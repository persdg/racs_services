
scorbot_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e9c8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000022d0  0801ebc8  0801ebc8  0002ebc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08020e98  08020e98  0004247c  2**0
                  CONTENTS
  4 .ARM          00000008  08020e98  08020e98  00030e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08020ea0  08020ea0  0004247c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000020  08020ea0  08020ea0  00030ea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08020ec0  08020ec0  00030ec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000247c  20000000  08020ec8  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000eb54  20002480  08023344  00042480  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20010fd4  08023344  00050fd4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0004247c  2**0
                  CONTENTS, READONLY
 12 .comment      00000076  00000000  00000000  000424aa  2**0
                  CONTENTS, READONLY
 13 .debug_info   000353f8  00000000  00000000  00042520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000644e  00000000  00000000  00077918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e28  00000000  00000000  0007dd68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000172c  00000000  00000000  0007fb90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000357e9  00000000  00000000  000812bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002ce8a  00000000  00000000  000b6aa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011f1e0  00000000  00000000  000e392f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008c84  00000000  00000000  00202b10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0020b794  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20002480 	.word	0x20002480
 800021c:	00000000 	.word	0x00000000
 8000220:	0801ebb0 	.word	0x0801ebb0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20002484 	.word	0x20002484
 800023c:	0801ebb0 	.word	0x0801ebb0

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr
	...

08000260 <memchr>:
 8000260:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000264:	2a10      	cmp	r2, #16
 8000266:	db2b      	blt.n	80002c0 <memchr+0x60>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	d008      	beq.n	8000280 <memchr+0x20>
 800026e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000272:	3a01      	subs	r2, #1
 8000274:	428b      	cmp	r3, r1
 8000276:	d02d      	beq.n	80002d4 <memchr+0x74>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	b342      	cbz	r2, 80002d0 <memchr+0x70>
 800027e:	d1f6      	bne.n	800026e <memchr+0xe>
 8000280:	b4f0      	push	{r4, r5, r6, r7}
 8000282:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000286:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800028a:	f022 0407 	bic.w	r4, r2, #7
 800028e:	f07f 0700 	mvns.w	r7, #0
 8000292:	2300      	movs	r3, #0
 8000294:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000298:	3c08      	subs	r4, #8
 800029a:	ea85 0501 	eor.w	r5, r5, r1
 800029e:	ea86 0601 	eor.w	r6, r6, r1
 80002a2:	fa85 f547 	uadd8	r5, r5, r7
 80002a6:	faa3 f587 	sel	r5, r3, r7
 80002aa:	fa86 f647 	uadd8	r6, r6, r7
 80002ae:	faa5 f687 	sel	r6, r5, r7
 80002b2:	b98e      	cbnz	r6, 80002d8 <memchr+0x78>
 80002b4:	d1ee      	bne.n	8000294 <memchr+0x34>
 80002b6:	bcf0      	pop	{r4, r5, r6, r7}
 80002b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002bc:	f002 0207 	and.w	r2, r2, #7
 80002c0:	b132      	cbz	r2, 80002d0 <memchr+0x70>
 80002c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c6:	3a01      	subs	r2, #1
 80002c8:	ea83 0301 	eor.w	r3, r3, r1
 80002cc:	b113      	cbz	r3, 80002d4 <memchr+0x74>
 80002ce:	d1f8      	bne.n	80002c2 <memchr+0x62>
 80002d0:	2000      	movs	r0, #0
 80002d2:	4770      	bx	lr
 80002d4:	3801      	subs	r0, #1
 80002d6:	4770      	bx	lr
 80002d8:	2d00      	cmp	r5, #0
 80002da:	bf06      	itte	eq
 80002dc:	4635      	moveq	r5, r6
 80002de:	3803      	subeq	r0, #3
 80002e0:	3807      	subne	r0, #7
 80002e2:	f015 0f01 	tst.w	r5, #1
 80002e6:	d107      	bne.n	80002f8 <memchr+0x98>
 80002e8:	3001      	adds	r0, #1
 80002ea:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ee:	bf02      	ittt	eq
 80002f0:	3001      	addeq	r0, #1
 80002f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002f6:	3001      	addeq	r0, #1
 80002f8:	bcf0      	pop	{r4, r5, r6, r7}
 80002fa:	3801      	subs	r0, #1
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop

08000300 <strlen>:
 8000300:	4603      	mov	r3, r0
 8000302:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000306:	2a00      	cmp	r2, #0
 8000308:	d1fb      	bne.n	8000302 <strlen+0x2>
 800030a:	1a18      	subs	r0, r3, r0
 800030c:	3801      	subs	r0, #1
 800030e:	4770      	bx	lr

08000310 <__aeabi_ldivmod>:
 8000310:	b97b      	cbnz	r3, 8000332 <__aeabi_ldivmod+0x22>
 8000312:	b972      	cbnz	r2, 8000332 <__aeabi_ldivmod+0x22>
 8000314:	2900      	cmp	r1, #0
 8000316:	bfbe      	ittt	lt
 8000318:	2000      	movlt	r0, #0
 800031a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800031e:	e006      	blt.n	800032e <__aeabi_ldivmod+0x1e>
 8000320:	bf08      	it	eq
 8000322:	2800      	cmpeq	r0, #0
 8000324:	bf1c      	itt	ne
 8000326:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800032a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800032e:	f000 b9bb 	b.w	80006a8 <__aeabi_idiv0>
 8000332:	f1ad 0c08 	sub.w	ip, sp, #8
 8000336:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800033a:	2900      	cmp	r1, #0
 800033c:	db09      	blt.n	8000352 <__aeabi_ldivmod+0x42>
 800033e:	2b00      	cmp	r3, #0
 8000340:	db1a      	blt.n	8000378 <__aeabi_ldivmod+0x68>
 8000342:	f000 f84d 	bl	80003e0 <__udivmoddi4>
 8000346:	f8dd e004 	ldr.w	lr, [sp, #4]
 800034a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034e:	b004      	add	sp, #16
 8000350:	4770      	bx	lr
 8000352:	4240      	negs	r0, r0
 8000354:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000358:	2b00      	cmp	r3, #0
 800035a:	db1b      	blt.n	8000394 <__aeabi_ldivmod+0x84>
 800035c:	f000 f840 	bl	80003e0 <__udivmoddi4>
 8000360:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000364:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000368:	b004      	add	sp, #16
 800036a:	4240      	negs	r0, r0
 800036c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000370:	4252      	negs	r2, r2
 8000372:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000376:	4770      	bx	lr
 8000378:	4252      	negs	r2, r2
 800037a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037e:	f000 f82f 	bl	80003e0 <__udivmoddi4>
 8000382:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000386:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800038a:	b004      	add	sp, #16
 800038c:	4240      	negs	r0, r0
 800038e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000392:	4770      	bx	lr
 8000394:	4252      	negs	r2, r2
 8000396:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800039a:	f000 f821 	bl	80003e0 <__udivmoddi4>
 800039e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003a6:	b004      	add	sp, #16
 80003a8:	4252      	negs	r2, r2
 80003aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003c4:	f000 b970 	b.w	80006a8 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9e08      	ldr	r6, [sp, #32]
 80003e6:	460d      	mov	r5, r1
 80003e8:	4604      	mov	r4, r0
 80003ea:	460f      	mov	r7, r1
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d14a      	bne.n	8000486 <__udivmoddi4+0xa6>
 80003f0:	428a      	cmp	r2, r1
 80003f2:	4694      	mov	ip, r2
 80003f4:	d965      	bls.n	80004c2 <__udivmoddi4+0xe2>
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	b143      	cbz	r3, 800040e <__udivmoddi4+0x2e>
 80003fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000400:	f1c3 0220 	rsb	r2, r3, #32
 8000404:	409f      	lsls	r7, r3
 8000406:	fa20 f202 	lsr.w	r2, r0, r2
 800040a:	4317      	orrs	r7, r2
 800040c:	409c      	lsls	r4, r3
 800040e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000412:	fa1f f58c 	uxth.w	r5, ip
 8000416:	fbb7 f1fe 	udiv	r1, r7, lr
 800041a:	0c22      	lsrs	r2, r4, #16
 800041c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000420:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000424:	fb01 f005 	mul.w	r0, r1, r5
 8000428:	4290      	cmp	r0, r2
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x62>
 800042c:	eb1c 0202 	adds.w	r2, ip, r2
 8000430:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000434:	f080 811c 	bcs.w	8000670 <__udivmoddi4+0x290>
 8000438:	4290      	cmp	r0, r2
 800043a:	f240 8119 	bls.w	8000670 <__udivmoddi4+0x290>
 800043e:	3902      	subs	r1, #2
 8000440:	4462      	add	r2, ip
 8000442:	1a12      	subs	r2, r2, r0
 8000444:	b2a4      	uxth	r4, r4
 8000446:	fbb2 f0fe 	udiv	r0, r2, lr
 800044a:	fb0e 2210 	mls	r2, lr, r0, r2
 800044e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000452:	fb00 f505 	mul.w	r5, r0, r5
 8000456:	42a5      	cmp	r5, r4
 8000458:	d90a      	bls.n	8000470 <__udivmoddi4+0x90>
 800045a:	eb1c 0404 	adds.w	r4, ip, r4
 800045e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000462:	f080 8107 	bcs.w	8000674 <__udivmoddi4+0x294>
 8000466:	42a5      	cmp	r5, r4
 8000468:	f240 8104 	bls.w	8000674 <__udivmoddi4+0x294>
 800046c:	4464      	add	r4, ip
 800046e:	3802      	subs	r0, #2
 8000470:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000474:	1b64      	subs	r4, r4, r5
 8000476:	2100      	movs	r1, #0
 8000478:	b11e      	cbz	r6, 8000482 <__udivmoddi4+0xa2>
 800047a:	40dc      	lsrs	r4, r3
 800047c:	2300      	movs	r3, #0
 800047e:	e9c6 4300 	strd	r4, r3, [r6]
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	428b      	cmp	r3, r1
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0xbc>
 800048a:	2e00      	cmp	r6, #0
 800048c:	f000 80ed 	beq.w	800066a <__udivmoddi4+0x28a>
 8000490:	2100      	movs	r1, #0
 8000492:	e9c6 0500 	strd	r0, r5, [r6]
 8000496:	4608      	mov	r0, r1
 8000498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049c:	fab3 f183 	clz	r1, r3
 80004a0:	2900      	cmp	r1, #0
 80004a2:	d149      	bne.n	8000538 <__udivmoddi4+0x158>
 80004a4:	42ab      	cmp	r3, r5
 80004a6:	d302      	bcc.n	80004ae <__udivmoddi4+0xce>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	f200 80f8 	bhi.w	800069e <__udivmoddi4+0x2be>
 80004ae:	1a84      	subs	r4, r0, r2
 80004b0:	eb65 0203 	sbc.w	r2, r5, r3
 80004b4:	2001      	movs	r0, #1
 80004b6:	4617      	mov	r7, r2
 80004b8:	2e00      	cmp	r6, #0
 80004ba:	d0e2      	beq.n	8000482 <__udivmoddi4+0xa2>
 80004bc:	e9c6 4700 	strd	r4, r7, [r6]
 80004c0:	e7df      	b.n	8000482 <__udivmoddi4+0xa2>
 80004c2:	b902      	cbnz	r2, 80004c6 <__udivmoddi4+0xe6>
 80004c4:	deff      	udf	#255	; 0xff
 80004c6:	fab2 f382 	clz	r3, r2
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	f040 8090 	bne.w	80005f0 <__udivmoddi4+0x210>
 80004d0:	1a8a      	subs	r2, r1, r2
 80004d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d6:	fa1f fe8c 	uxth.w	lr, ip
 80004da:	2101      	movs	r1, #1
 80004dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004e0:	fb07 2015 	mls	r0, r7, r5, r2
 80004e4:	0c22      	lsrs	r2, r4, #16
 80004e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ea:	fb0e f005 	mul.w	r0, lr, r5
 80004ee:	4290      	cmp	r0, r2
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x124>
 80004f2:	eb1c 0202 	adds.w	r2, ip, r2
 80004f6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x122>
 80004fc:	4290      	cmp	r0, r2
 80004fe:	f200 80cb 	bhi.w	8000698 <__udivmoddi4+0x2b8>
 8000502:	4645      	mov	r5, r8
 8000504:	1a12      	subs	r2, r2, r0
 8000506:	b2a4      	uxth	r4, r4
 8000508:	fbb2 f0f7 	udiv	r0, r2, r7
 800050c:	fb07 2210 	mls	r2, r7, r0, r2
 8000510:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000514:	fb0e fe00 	mul.w	lr, lr, r0
 8000518:	45a6      	cmp	lr, r4
 800051a:	d908      	bls.n	800052e <__udivmoddi4+0x14e>
 800051c:	eb1c 0404 	adds.w	r4, ip, r4
 8000520:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000524:	d202      	bcs.n	800052c <__udivmoddi4+0x14c>
 8000526:	45a6      	cmp	lr, r4
 8000528:	f200 80bb 	bhi.w	80006a2 <__udivmoddi4+0x2c2>
 800052c:	4610      	mov	r0, r2
 800052e:	eba4 040e 	sub.w	r4, r4, lr
 8000532:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000536:	e79f      	b.n	8000478 <__udivmoddi4+0x98>
 8000538:	f1c1 0720 	rsb	r7, r1, #32
 800053c:	408b      	lsls	r3, r1
 800053e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000542:	ea4c 0c03 	orr.w	ip, ip, r3
 8000546:	fa05 f401 	lsl.w	r4, r5, r1
 800054a:	fa20 f307 	lsr.w	r3, r0, r7
 800054e:	40fd      	lsrs	r5, r7
 8000550:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000554:	4323      	orrs	r3, r4
 8000556:	fbb5 f8f9 	udiv	r8, r5, r9
 800055a:	fa1f fe8c 	uxth.w	lr, ip
 800055e:	fb09 5518 	mls	r5, r9, r8, r5
 8000562:	0c1c      	lsrs	r4, r3, #16
 8000564:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000568:	fb08 f50e 	mul.w	r5, r8, lr
 800056c:	42a5      	cmp	r5, r4
 800056e:	fa02 f201 	lsl.w	r2, r2, r1
 8000572:	fa00 f001 	lsl.w	r0, r0, r1
 8000576:	d90b      	bls.n	8000590 <__udivmoddi4+0x1b0>
 8000578:	eb1c 0404 	adds.w	r4, ip, r4
 800057c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000580:	f080 8088 	bcs.w	8000694 <__udivmoddi4+0x2b4>
 8000584:	42a5      	cmp	r5, r4
 8000586:	f240 8085 	bls.w	8000694 <__udivmoddi4+0x2b4>
 800058a:	f1a8 0802 	sub.w	r8, r8, #2
 800058e:	4464      	add	r4, ip
 8000590:	1b64      	subs	r4, r4, r5
 8000592:	b29d      	uxth	r5, r3
 8000594:	fbb4 f3f9 	udiv	r3, r4, r9
 8000598:	fb09 4413 	mls	r4, r9, r3, r4
 800059c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80005a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80005a4:	45a6      	cmp	lr, r4
 80005a6:	d908      	bls.n	80005ba <__udivmoddi4+0x1da>
 80005a8:	eb1c 0404 	adds.w	r4, ip, r4
 80005ac:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80005b0:	d26c      	bcs.n	800068c <__udivmoddi4+0x2ac>
 80005b2:	45a6      	cmp	lr, r4
 80005b4:	d96a      	bls.n	800068c <__udivmoddi4+0x2ac>
 80005b6:	3b02      	subs	r3, #2
 80005b8:	4464      	add	r4, ip
 80005ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005be:	fba3 9502 	umull	r9, r5, r3, r2
 80005c2:	eba4 040e 	sub.w	r4, r4, lr
 80005c6:	42ac      	cmp	r4, r5
 80005c8:	46c8      	mov	r8, r9
 80005ca:	46ae      	mov	lr, r5
 80005cc:	d356      	bcc.n	800067c <__udivmoddi4+0x29c>
 80005ce:	d053      	beq.n	8000678 <__udivmoddi4+0x298>
 80005d0:	b156      	cbz	r6, 80005e8 <__udivmoddi4+0x208>
 80005d2:	ebb0 0208 	subs.w	r2, r0, r8
 80005d6:	eb64 040e 	sbc.w	r4, r4, lr
 80005da:	fa04 f707 	lsl.w	r7, r4, r7
 80005de:	40ca      	lsrs	r2, r1
 80005e0:	40cc      	lsrs	r4, r1
 80005e2:	4317      	orrs	r7, r2
 80005e4:	e9c6 7400 	strd	r7, r4, [r6]
 80005e8:	4618      	mov	r0, r3
 80005ea:	2100      	movs	r1, #0
 80005ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005f0:	f1c3 0120 	rsb	r1, r3, #32
 80005f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005f8:	fa20 f201 	lsr.w	r2, r0, r1
 80005fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000600:	409d      	lsls	r5, r3
 8000602:	432a      	orrs	r2, r5
 8000604:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000608:	fa1f fe8c 	uxth.w	lr, ip
 800060c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000610:	fb07 1510 	mls	r5, r7, r0, r1
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800061a:	fb00 f50e 	mul.w	r5, r0, lr
 800061e:	428d      	cmp	r5, r1
 8000620:	fa04 f403 	lsl.w	r4, r4, r3
 8000624:	d908      	bls.n	8000638 <__udivmoddi4+0x258>
 8000626:	eb1c 0101 	adds.w	r1, ip, r1
 800062a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800062e:	d22f      	bcs.n	8000690 <__udivmoddi4+0x2b0>
 8000630:	428d      	cmp	r5, r1
 8000632:	d92d      	bls.n	8000690 <__udivmoddi4+0x2b0>
 8000634:	3802      	subs	r0, #2
 8000636:	4461      	add	r1, ip
 8000638:	1b49      	subs	r1, r1, r5
 800063a:	b292      	uxth	r2, r2
 800063c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000640:	fb07 1115 	mls	r1, r7, r5, r1
 8000644:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000648:	fb05 f10e 	mul.w	r1, r5, lr
 800064c:	4291      	cmp	r1, r2
 800064e:	d908      	bls.n	8000662 <__udivmoddi4+0x282>
 8000650:	eb1c 0202 	adds.w	r2, ip, r2
 8000654:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000658:	d216      	bcs.n	8000688 <__udivmoddi4+0x2a8>
 800065a:	4291      	cmp	r1, r2
 800065c:	d914      	bls.n	8000688 <__udivmoddi4+0x2a8>
 800065e:	3d02      	subs	r5, #2
 8000660:	4462      	add	r2, ip
 8000662:	1a52      	subs	r2, r2, r1
 8000664:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000668:	e738      	b.n	80004dc <__udivmoddi4+0xfc>
 800066a:	4631      	mov	r1, r6
 800066c:	4630      	mov	r0, r6
 800066e:	e708      	b.n	8000482 <__udivmoddi4+0xa2>
 8000670:	4639      	mov	r1, r7
 8000672:	e6e6      	b.n	8000442 <__udivmoddi4+0x62>
 8000674:	4610      	mov	r0, r2
 8000676:	e6fb      	b.n	8000470 <__udivmoddi4+0x90>
 8000678:	4548      	cmp	r0, r9
 800067a:	d2a9      	bcs.n	80005d0 <__udivmoddi4+0x1f0>
 800067c:	ebb9 0802 	subs.w	r8, r9, r2
 8000680:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000684:	3b01      	subs	r3, #1
 8000686:	e7a3      	b.n	80005d0 <__udivmoddi4+0x1f0>
 8000688:	4645      	mov	r5, r8
 800068a:	e7ea      	b.n	8000662 <__udivmoddi4+0x282>
 800068c:	462b      	mov	r3, r5
 800068e:	e794      	b.n	80005ba <__udivmoddi4+0x1da>
 8000690:	4640      	mov	r0, r8
 8000692:	e7d1      	b.n	8000638 <__udivmoddi4+0x258>
 8000694:	46d0      	mov	r8, sl
 8000696:	e77b      	b.n	8000590 <__udivmoddi4+0x1b0>
 8000698:	3d02      	subs	r5, #2
 800069a:	4462      	add	r2, ip
 800069c:	e732      	b.n	8000504 <__udivmoddi4+0x124>
 800069e:	4608      	mov	r0, r1
 80006a0:	e70a      	b.n	80004b8 <__udivmoddi4+0xd8>
 80006a2:	4464      	add	r4, ip
 80006a4:	3802      	subs	r0, #2
 80006a6:	e742      	b.n	800052e <__udivmoddi4+0x14e>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <encoder_callback>:
#include <callbacks.hpp>

void encoder_callback(const void* msgin) {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
	const racs_services__msg__Encoder* enc_msg =
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	60fb      	str	r3, [r7, #12]
			(const racs_services__msg__Encoder*) msgin;

	ScorBot.setEncoders(enc_msg->encoders);
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	4619      	mov	r1, r3
 80006bc:	4805      	ldr	r0, [pc, #20]	; (80006d4 <encoder_callback+0x28>)
 80006be:	f000 fcdd 	bl	800107c <_ZN5Robot11setEncodersEPKs>
	ScorBot.setStatus(Robot::Status::PID, false);
 80006c2:	2200      	movs	r2, #0
 80006c4:	2102      	movs	r1, #2
 80006c6:	4803      	ldr	r0, [pc, #12]	; (80006d4 <encoder_callback+0x28>)
 80006c8:	f000 fc38 	bl	8000f3c <_ZN5Robot9setStatusENS_6StatusEb>
}
 80006cc:	bf00      	nop
 80006ce:	3710      	adds	r7, #16
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	2000249c 	.word	0x2000249c

080006d8 <pwm_callback>:

void pwm_callback(const void* msgin) {
 80006d8:	b590      	push	{r4, r7, lr}
 80006da:	b085      	sub	sp, #20
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
	const racs_services__msg__DirectAccess* pwm_msg =
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	60fb      	str	r3, [r7, #12]
		(const racs_services__msg__DirectAccess*) msgin;

	if(pwm_msg->num_motors != ScorBot.getSize()) {
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	461c      	mov	r4, r3
 80006ea:	480f      	ldr	r0, [pc, #60]	; (8000728 <pwm_callback+0x50>)
 80006ec:	f000 fc19 	bl	8000f22 <_ZN5Robot7getSizeEv>
 80006f0:	4603      	mov	r3, r0
 80006f2:	429c      	cmp	r4, r3
 80006f4:	bf14      	ite	ne
 80006f6:	2301      	movne	r3, #1
 80006f8:	2300      	moveq	r3, #0
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d005      	beq.n	800070c <pwm_callback+0x34>
	    ScorBot.setStatus(Robot::Status::Idle, true);
 8000700:	2201      	movs	r2, #1
 8000702:	2100      	movs	r1, #0
 8000704:	4808      	ldr	r0, [pc, #32]	; (8000728 <pwm_callback+0x50>)
 8000706:	f000 fc19 	bl	8000f3c <_ZN5Robot9setStatusENS_6StatusEb>
	    return;
 800070a:	e00a      	b.n	8000722 <pwm_callback+0x4a>
	}

	ScorBot.setPWMs(pwm_msg->pwms);
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	3302      	adds	r3, #2
 8000710:	4619      	mov	r1, r3
 8000712:	4805      	ldr	r0, [pc, #20]	; (8000728 <pwm_callback+0x50>)
 8000714:	f000 fcd1 	bl	80010ba <_ZN5Robot7setPWMsEPKs>
	ScorBot.setStatus(Robot::Status::DAQ, false);
 8000718:	2200      	movs	r2, #0
 800071a:	2101      	movs	r1, #1
 800071c:	4802      	ldr	r0, [pc, #8]	; (8000728 <pwm_callback+0x50>)
 800071e:	f000 fc0d 	bl	8000f3c <_ZN5Robot9setStatusENS_6StatusEb>
}
 8000722:	3714      	adds	r7, #20
 8000724:	46bd      	mov	sp, r7
 8000726:	bd90      	pop	{r4, r7, pc}
 8000728:	2000249c 	.word	0x2000249c

0800072c <control_callback>:

void control_callback(const void* request_msg, void* response_msg){
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
 8000734:	6039      	str	r1, [r7, #0]
		racs_services__srv__Control_Request* req_in =
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	60fb      	str	r3, [r7, #12]
				(racs_services__srv__Control_Request*) request_msg;
		racs_services__srv__Control_Response* res_in =
 800073a:	683b      	ldr	r3, [r7, #0]
 800073c:	60bb      	str	r3, [r7, #8]
				(racs_services__srv__Control_Response*) response_msg;
		ScorBot.rcvCtrl(req_in);
 800073e:	68f9      	ldr	r1, [r7, #12]
 8000740:	4805      	ldr	r0, [pc, #20]	; (8000758 <control_callback+0x2c>)
 8000742:	f000 fd11 	bl	8001168 <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request>
		ScorBot.sndCtrl(res_in);
 8000746:	68b9      	ldr	r1, [r7, #8]
 8000748:	4803      	ldr	r0, [pc, #12]	; (8000758 <control_callback+0x2c>)
 800074a:	f000 fd6a 	bl	8001222 <_ZN5Robot7sndCtrlEP36racs_services__srv__Control_Response>
	}
 800074e:	bf00      	nop
 8000750:	3710      	adds	r7, #16
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	2000249c 	.word	0x2000249c

0800075c <setup_callback>:

void setup_callback(const void* request_msg, void* response_msg){
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
 8000764:	6039      	str	r1, [r7, #0]
		racs_services__srv__Setup_Request* req_in =
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	60fb      	str	r3, [r7, #12]
				(racs_services__srv__Setup_Request*) request_msg;
		racs_services__srv__Setup_Response* res_in =
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	60bb      	str	r3, [r7, #8]
				(racs_services__srv__Setup_Response*) response_msg;
		ScorBot.rcvSetup(req_in);
 800076e:	68f9      	ldr	r1, [r7, #12]
 8000770:	4805      	ldr	r0, [pc, #20]	; (8000788 <setup_callback+0x2c>)
 8000772:	f000 fd67 	bl	8001244 <_ZN5Robot8rcvSetupEP33racs_services__srv__Setup_Request>
		ScorBot.sndSetup(res_in);
 8000776:	68b9      	ldr	r1, [r7, #8]
 8000778:	4803      	ldr	r0, [pc, #12]	; (8000788 <setup_callback+0x2c>)
 800077a:	f000 fdc3 	bl	8001304 <_ZN5Robot8sndSetupEP34racs_services__srv__Setup_Response>
	}
 800077e:	bf00      	nop
 8000780:	3710      	adds	r7, #16
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	2000249c 	.word	0x2000249c

0800078c <feedback_timer_callback>:

void feedback_timer_callback(rcl_timer_t* timer, int64_t last_call_time)
{
 800078c:	b590      	push	{r4, r7, lr}
 800078e:	b093      	sub	sp, #76	; 0x4c
 8000790:	af00      	add	r7, sp, #0
 8000792:	60f8      	str	r0, [r7, #12]
 8000794:	e9c7 2300 	strd	r2, r3, [r7]
	//UNUSED(timer);
	UNUSED(last_call_time);

	if (timer != NULL) {
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d069      	beq.n	8000872 <feedback_timer_callback+0xe6>
		racs_services__msg__Feedback feedback;
		racs_services__msg__Debug debug;
		rcl_ret_t rc;

		int size = ScorBot.getSize();
 800079e:	4836      	ldr	r0, [pc, #216]	; (8000878 <feedback_timer_callback+0xec>)
 80007a0:	f000 fbbf 	bl	8000f22 <_ZN5Robot7getSizeEv>
 80007a4:	6438      	str	r0, [r7, #64]	; 0x40
		feedback.num_motors = size;
 80007a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
		for(uint8_t i = 0; i < size; i++) {
 80007ae:	2300      	movs	r3, #0
 80007b0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80007b4:	e013      	b.n	80007de <feedback_timer_callback+0x52>
			feedback.encoders[i] = ScorBot.getEncoder(i);
 80007b6:	f897 4047 	ldrb.w	r4, [r7, #71]	; 0x47
 80007ba:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80007be:	4619      	mov	r1, r3
 80007c0:	482d      	ldr	r0, [pc, #180]	; (8000878 <feedback_timer_callback+0xec>)
 80007c2:	f000 fc32 	bl	800102a <_ZN5Robot10getEncoderEh>
 80007c6:	4603      	mov	r3, r0
 80007c8:	461a      	mov	r2, r3
 80007ca:	0063      	lsls	r3, r4, #1
 80007cc:	3348      	adds	r3, #72	; 0x48
 80007ce:	443b      	add	r3, r7
 80007d0:	f823 2c1a 	strh.w	r2, [r3, #-26]
		for(uint8_t i = 0; i < size; i++) {
 80007d4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80007d8:	3301      	adds	r3, #1
 80007da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80007de:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80007e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80007e4:	429a      	cmp	r2, r3
 80007e6:	dce6      	bgt.n	80007b6 <feedback_timer_callback+0x2a>
		}

		for(uint8_t i = 6; i > size; i--) {
 80007e8:	2306      	movs	r3, #6
 80007ea:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80007ee:	e00c      	b.n	800080a <feedback_timer_callback+0x7e>
			feedback.encoders[i] = 0;
 80007f0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80007f4:	005b      	lsls	r3, r3, #1
 80007f6:	3348      	adds	r3, #72	; 0x48
 80007f8:	443b      	add	r3, r7
 80007fa:	2200      	movs	r2, #0
 80007fc:	f823 2c1a 	strh.w	r2, [r3, #-26]
		for(uint8_t i = 6; i > size; i--) {
 8000800:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000804:	3b01      	subs	r3, #1
 8000806:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 800080a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800080e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000810:	429a      	cmp	r2, r3
 8000812:	dbed      	blt.n	80007f0 <feedback_timer_callback+0x64>
		}
		rc = rcl_publish(&feedback_publisher, &feedback, NULL);
 8000814:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000818:	2200      	movs	r2, #0
 800081a:	4619      	mov	r1, r3
 800081c:	4817      	ldr	r0, [pc, #92]	; (800087c <feedback_timer_callback+0xf0>)
 800081e:	f00d f969 	bl	800daf4 <rcl_publish>
 8000822:	63f8      	str	r0, [r7, #60]	; 0x3c
		if (rc != RCL_RET_OK) return;
 8000824:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000826:	2b00      	cmp	r3, #0
 8000828:	d122      	bne.n	8000870 <feedback_timer_callback+0xe4>

		for(uint8_t i = 0; i < 1; i++) {
 800082a:	2300      	movs	r3, #0
 800082c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8000830:	e00f      	b.n	8000852 <feedback_timer_callback+0xc6>
			ScorBot.getPID(0)->show(i, debug);
 8000832:	2100      	movs	r1, #0
 8000834:	4810      	ldr	r0, [pc, #64]	; (8000878 <feedback_timer_callback+0xec>)
 8000836:	f000 fbc4 	bl	8000fc2 <_ZN5Robot6getPIDEh>
 800083a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800083e:	f107 0214 	add.w	r2, r7, #20
 8000842:	4619      	mov	r1, r3
 8000844:	f001 fc18 	bl	8002078 <_ZN3PID4showEiR25racs_services__msg__Debug>
		for(uint8_t i = 0; i < 1; i++) {
 8000848:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800084c:	3301      	adds	r3, #1
 800084e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8000852:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8000856:	2b00      	cmp	r3, #0
 8000858:	d0eb      	beq.n	8000832 <feedback_timer_callback+0xa6>
		}
		rc = rcl_publish(&debug_publisher, &debug, NULL);
 800085a:	f107 0314 	add.w	r3, r7, #20
 800085e:	2200      	movs	r2, #0
 8000860:	4619      	mov	r1, r3
 8000862:	4807      	ldr	r0, [pc, #28]	; (8000880 <feedback_timer_callback+0xf4>)
 8000864:	f00d f946 	bl	800daf4 <rcl_publish>
 8000868:	63f8      	str	r0, [r7, #60]	; 0x3c
		if (rc != RCL_RET_OK) return;
 800086a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800086c:	2b00      	cmp	r3, #0
 800086e:	e000      	b.n	8000872 <feedback_timer_callback+0xe6>
		if (rc != RCL_RET_OK) return;
 8000870:	bf00      	nop
	}
}
 8000872:	374c      	adds	r7, #76	; 0x4c
 8000874:	46bd      	mov	sp, r7
 8000876:	bd90      	pop	{r4, r7, pc}
 8000878:	2000249c 	.word	0x2000249c
 800087c:	20006900 	.word	0x20006900
 8000880:	20006904 	.word	0x20006904

08000884 <robot_timer_callback>:

void robot_timer_callback(rcl_timer_t* timer, int64_t last_call_time)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
 800088a:	60f8      	str	r0, [r7, #12]
 800088c:	e9c7 2300 	strd	r2, r3, [r7]
	//UNUSED(timer);
	UNUSED(last_call_time);
	if (timer != NULL) {
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d002      	beq.n	800089c <robot_timer_callback+0x18>
		ScorBot.cycle();
 8000896:	4803      	ldr	r0, [pc, #12]	; (80008a4 <robot_timer_callback+0x20>)
 8000898:	f000 fe22 	bl	80014e0 <_ZN5Robot5cycleEv>
	}

}
 800089c:	bf00      	nop
 800089e:	3710      	adds	r7, #16
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	2000249c 	.word	0x2000249c

080008a8 <_ZN10IntegratorC1Ev>:


class Integrator //final
{
public:
  Integrator() {}
 80008a8:	b480      	push	{r7}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	4618      	mov	r0, r3
 80008b4:	370c      	adds	r7, #12
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr

080008be <_ZN10IntegratorD1Ev>:
  ~Integrator() {}
 80008be:	b480      	push	{r7}
 80008c0:	b083      	sub	sp, #12
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	6078      	str	r0, [r7, #4]
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	4618      	mov	r0, r3
 80008ca:	370c      	adds	r7, #12
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr

080008d4 <_ZN6FilterC1Ev>:


class Filter //final
{
public:
  Filter(){}
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	f04f 0200 	mov.w	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	f04f 0200 	mov.w	r2, #0
 80008ea:	605a      	str	r2, [r3, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	f04f 0200 	mov.w	r2, #0
 80008f2:	609a      	str	r2, [r3, #8]
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	f04f 0200 	mov.w	r2, #0
 80008fa:	60da      	str	r2, [r3, #12]
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	f04f 0200 	mov.w	r2, #0
 8000902:	611a      	str	r2, [r3, #16]
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	f04f 0200 	mov.w	r2, #0
 800090a:	615a      	str	r2, [r3, #20]
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	f04f 0200 	mov.w	r2, #0
 8000912:	619a      	str	r2, [r3, #24]
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	f04f 0200 	mov.w	r2, #0
 800091a:	61da      	str	r2, [r3, #28]
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	f04f 0200 	mov.w	r2, #0
 8000922:	621a      	str	r2, [r3, #32]
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	f04f 0200 	mov.w	r2, #0
 800092a:	625a      	str	r2, [r3, #36]	; 0x24
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	4618      	mov	r0, r3
 8000930:	370c      	adds	r7, #12
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr

0800093a <_ZN3PIDC1Ev>:


class PID final
{
public:
  PID(){}
 800093a:	b580      	push	{r7, lr}
 800093c:	b082      	sub	sp, #8
 800093e:	af00      	add	r7, sp, #0
 8000940:	6078      	str	r0, [r7, #4]
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	f04f 0200 	mov.w	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	f04f 0200 	mov.w	r2, #0
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	f04f 0200 	mov.w	r2, #0
 8000958:	609a      	str	r2, [r3, #8]
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	2200      	movs	r2, #0
 800095e:	731a      	strb	r2, [r3, #12]
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	f04f 0200 	mov.w	r2, #0
 8000966:	611a      	str	r2, [r3, #16]
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	f04f 0200 	mov.w	r2, #0
 800096e:	615a      	str	r2, [r3, #20]
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	f04f 0200 	mov.w	r2, #0
 8000976:	619a      	str	r2, [r3, #24]
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	f04f 0200 	mov.w	r2, #0
 800097e:	61da      	str	r2, [r3, #28]
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	f04f 0200 	mov.w	r2, #0
 8000986:	621a      	str	r2, [r3, #32]
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	f04f 0200 	mov.w	r2, #0
 800098e:	625a      	str	r2, [r3, #36]	; 0x24
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	f04f 0200 	mov.w	r2, #0
 8000996:	629a      	str	r2, [r3, #40]	; 0x28
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	f04f 0200 	mov.w	r2, #0
 800099e:	62da      	str	r2, [r3, #44]	; 0x2c
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	3330      	adds	r3, #48	; 0x30
 80009a4:	4618      	mov	r0, r3
 80009a6:	f7ff ff7f 	bl	80008a8 <_ZN10IntegratorC1Ev>
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	3340      	adds	r3, #64	; 0x40
 80009ae:	4618      	mov	r0, r3
 80009b0:	f7ff ff90 	bl	80008d4 <_ZN6FilterC1Ev>
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	3368      	adds	r3, #104	; 0x68
 80009b8:	4618      	mov	r0, r3
 80009ba:	f7ff ff8b 	bl	80008d4 <_ZN6FilterC1Ev>
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	4618      	mov	r0, r3
 80009c2:	3708      	adds	r7, #8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}

080009c8 <_ZN10PinControlC1EP12GPIO_TypeDeft>:

PinControl::PinControl() {

}

PinControl::PinControl(GPIO_TypeDef* port, uint16_t pin){
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b084      	sub	sp, #16
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	60f8      	str	r0, [r7, #12]
 80009d0:	60b9      	str	r1, [r7, #8]
 80009d2:	4613      	mov	r3, r2
 80009d4:	80fb      	strh	r3, [r7, #6]
  this->port = port;
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	68ba      	ldr	r2, [r7, #8]
 80009da:	601a      	str	r2, [r3, #0]
  this->pin = pin;
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	88fa      	ldrh	r2, [r7, #6]
 80009e0:	809a      	strh	r2, [r3, #4]
  setLimits(0.0, 0.0);
 80009e2:	eddf 0a06 	vldr	s1, [pc, #24]	; 80009fc <_ZN10PinControlC1EP12GPIO_TypeDeft+0x34>
 80009e6:	ed9f 0a05 	vldr	s0, [pc, #20]	; 80009fc <_ZN10PinControlC1EP12GPIO_TypeDeft+0x34>
 80009ea:	68f8      	ldr	r0, [r7, #12]
 80009ec:	f000 f808 	bl	8000a00 <_ZN10PinControl9setLimitsEff>
}
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	4618      	mov	r0, r3
 80009f4:	3710      	adds	r7, #16
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	00000000 	.word	0x00000000

08000a00 <_ZN10PinControl9setLimitsEff>:
  this->port = port;
  this->pin = pin;
  setLimits(v1, v2);
}

void PinControl::setLimits(float v1, float v2){
 8000a00:	b480      	push	{r7}
 8000a02:	b085      	sub	sp, #20
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	60f8      	str	r0, [r7, #12]
 8000a08:	ed87 0a02 	vstr	s0, [r7, #8]
 8000a0c:	edc7 0a01 	vstr	s1, [r7, #4]
  this->v1 = v1;
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	68ba      	ldr	r2, [r7, #8]
 8000a14:	609a      	str	r2, [r3, #8]
  this->v2 = v2;
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	687a      	ldr	r2, [r7, #4]
 8000a1a:	60da      	str	r2, [r3, #12]
}
 8000a1c:	bf00      	nop
 8000a1e:	3714      	adds	r7, #20
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr

08000a28 <_ZN10PinControl3setEb>:

void PinControl::set(bool state){
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
 8000a30:	460b      	mov	r3, r1
 8000a32:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_WritePin(port, pin, state ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	6818      	ldr	r0, [r3, #0]
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	8899      	ldrh	r1, [r3, #4]
 8000a3c:	78fb      	ldrb	r3, [r7, #3]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <_ZN10PinControl3setEb+0x1e>
 8000a42:	2301      	movs	r3, #1
 8000a44:	e000      	b.n	8000a48 <_ZN10PinControl3setEb+0x20>
 8000a46:	2300      	movs	r3, #0
 8000a48:	461a      	mov	r2, r3
 8000a4a:	f004 fc23 	bl	8005294 <HAL_GPIO_WritePin>
}
 8000a4e:	bf00      	nop
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
	...

08000a58 <_ZN10PinMeasureC1EP12GPIO_TypeDeft>:

PinMeasure::PinMeasure() {

}

PinMeasure::PinMeasure(GPIO_TypeDef* port, uint16_t pin){
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b084      	sub	sp, #16
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	60f8      	str	r0, [r7, #12]
 8000a60:	60b9      	str	r1, [r7, #8]
 8000a62:	4613      	mov	r3, r2
 8000a64:	80fb      	strh	r3, [r7, #6]
  this->port = port;
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	68ba      	ldr	r2, [r7, #8]
 8000a6a:	601a      	str	r2, [r3, #0]
  this->pin = pin;
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	88fa      	ldrh	r2, [r7, #6]
 8000a70:	809a      	strh	r2, [r3, #4]
  setLimits(0.0, 0.0);
 8000a72:	eddf 0a06 	vldr	s1, [pc, #24]	; 8000a8c <_ZN10PinMeasureC1EP12GPIO_TypeDeft+0x34>
 8000a76:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8000a8c <_ZN10PinMeasureC1EP12GPIO_TypeDeft+0x34>
 8000a7a:	68f8      	ldr	r0, [r7, #12]
 8000a7c:	f000 f808 	bl	8000a90 <_ZN10PinMeasure9setLimitsEff>
}
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	4618      	mov	r0, r3
 8000a84:	3710      	adds	r7, #16
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	00000000 	.word	0x00000000

08000a90 <_ZN10PinMeasure9setLimitsEff>:
  this->port = port;
  this->pin = pin;
  setLimits(v1, v2);
}

void PinMeasure::setLimits(float v1, float v2){
 8000a90:	b480      	push	{r7}
 8000a92:	b085      	sub	sp, #20
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	60f8      	str	r0, [r7, #12]
 8000a98:	ed87 0a02 	vstr	s0, [r7, #8]
 8000a9c:	edc7 0a01 	vstr	s1, [r7, #4]
  this->v1 = v1;
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	68ba      	ldr	r2, [r7, #8]
 8000aa4:	609a      	str	r2, [r3, #8]
  this->v2 = v2;
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	687a      	ldr	r2, [r7, #4]
 8000aaa:	60da      	str	r2, [r3, #12]
}
 8000aac:	bf00      	nop
 8000aae:	3714      	adds	r7, #20
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr

08000ab8 <_ZN10PinMeasure5stateEv>:

bool PinMeasure::state(){
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  return HAL_GPIO_ReadPin(port, pin);
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681a      	ldr	r2, [r3, #0]
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	889b      	ldrh	r3, [r3, #4]
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4610      	mov	r0, r2
 8000acc:	f004 fbca 	bl	8005264 <HAL_GPIO_ReadPin>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	bf14      	ite	ne
 8000ad6:	2301      	movne	r3, #1
 8000ad8:	2300      	moveq	r3, #0
 8000ada:	b2db      	uxtb	r3, r3
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	3708      	adds	r7, #8
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}

08000ae4 <_ZN5MotorC1E10PinControlS0_P17TIM_HandleTypeDefh10PinMeasure>:
Motor::Motor(PinControl &INA, PinControl &INB,
			 TIM_HandleTypeDef* htimPWM, uint8_t CCRx,
			 TIM_HandleTypeDef* htimENC, PinMeasure &END)
  : pin_INA(INA), pin_INB(INB), htimPWM(htimPWM), CCRx(CCRx), htimENC(htimENC), pin_END(END) {}
*/
Motor::Motor(PinControl INA, PinControl INB,
 8000ae4:	b084      	sub	sp, #16
 8000ae6:	b490      	push	{r4, r7}
 8000ae8:	b082      	sub	sp, #8
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	6078      	str	r0, [r7, #4]
 8000aee:	f107 0014 	add.w	r0, r7, #20
 8000af2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
			 TIM_HandleTypeDef* htimPWM, uint8_t CCRx,
			 PinMeasure END)
  : pin_INA(INA), pin_INB(INB), htimPWM(htimPWM), CCRx(CCRx), htimENC(NULL), pin_END(END){}
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	461c      	mov	r4, r3
 8000afa:	f107 0314 	add.w	r3, r7, #20
 8000afe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b00:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	f103 0410 	add.w	r4, r3, #16
 8000b0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b0e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b10:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000b18:	621a      	str	r2, [r3, #32]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8000b20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	2200      	movs	r2, #0
 8000b28:	629a      	str	r2, [r3, #40]	; 0x28
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8000b30:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000b34:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b36:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3708      	adds	r7, #8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bc90      	pop	{r4, r7}
 8000b44:	b004      	add	sp, #16
 8000b46:	4770      	bx	lr

08000b48 <_ZN5MotorC1E10PinControlS0_P17TIM_HandleTypeDefhS2_10PinMeasure>:

Motor::Motor(PinControl INA, PinControl INB,
 8000b48:	b084      	sub	sp, #16
 8000b4a:	b490      	push	{r4, r7}
 8000b4c:	b082      	sub	sp, #8
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	6078      	str	r0, [r7, #4]
 8000b52:	f107 0014 	add.w	r0, r7, #20
 8000b56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
			 TIM_HandleTypeDef* htimPWM, uint8_t CCRx,
			 TIM_HandleTypeDef* htimENC, PinMeasure END)
  : pin_INA(INA), pin_INB(INB), htimPWM(htimPWM), CCRx(CCRx), htimENC(htimENC), pin_END(END){}
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	461c      	mov	r4, r3
 8000b5e:	f107 0314 	add.w	r3, r7, #20
 8000b62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	f103 0410 	add.w	r4, r3, #16
 8000b6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b74:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000b7c:	621a      	str	r2, [r3, #32]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8000b84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000b8c:	629a      	str	r2, [r3, #40]	; 0x28
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8000b94:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000b98:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b9a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3708      	adds	r7, #8
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bc90      	pop	{r4, r7}
 8000ba8:	b004      	add	sp, #16
 8000baa:	4770      	bx	lr

08000bac <_ZN5MotorD1Ev>:


Motor::~Motor() {}
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	370c      	adds	r7, #12
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr

08000bc2 <_ZN5Motor10getEncoderEv>:

/*void Motor::invertEncoder(bool invert){
  this->encoder_invert = invert;
}*/

int16_t Motor::getEncoder(){
 8000bc2:	b480      	push	{r7}
 8000bc4:	b083      	sub	sp, #12
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	6078      	str	r0, [r7, #4]
  if (htimENC != NULL) {
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d009      	beq.n	8000be6 <_ZN5Motor10getEncoderEv+0x24>
	  return htimENC->Instance->CNT - (HALF_ENC+1);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bda:	b29b      	uxth	r3, r3
 8000bdc:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8000be0:	b29b      	uxth	r3, r3
 8000be2:	b21b      	sxth	r3, r3
 8000be4:	e000      	b.n	8000be8 <_ZN5Motor10getEncoderEv+0x26>
  } else {
	  return 0;
 8000be6:	2300      	movs	r3, #0
  }
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	370c      	adds	r7, #12
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr

08000bf4 <_ZN5Motor10driveMotorEs>:

void Motor::driveMotor(int16_t spwm){
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
 8000bfc:	460b      	mov	r3, r1
 8000bfe:	807b      	strh	r3, [r7, #2]
  OperatingMode mode = OperatingMode::BRAKE_GND;
 8000c00:	2300      	movs	r3, #0
 8000c02:	60fb      	str	r3, [r7, #12]
  spwm = spwm > -(HALF_PWM+1) ? spwm : -(HALF_PWM+1);
  spwm = spwm < HALF_PWM ? spwm : HALF_PWM;
  //spwm = (int16_t) std::min(std::max(spwm, (int16_t) -(HALF_PWM+1)), (int16_t) HALF_PWM);

  if(spwm > 0) {
 8000c04:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	dd02      	ble.n	8000c12 <_ZN5Motor10driveMotorEs+0x1e>
    mode = OperatingMode::SPIN_CW;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	e008      	b.n	8000c24 <_ZN5Motor10driveMotorEs+0x30>
  } else if (spwm < 0) {
 8000c12:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	da02      	bge.n	8000c20 <_ZN5Motor10driveMotorEs+0x2c>
    mode = OperatingMode::SPIN_CCW;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	60fb      	str	r3, [r7, #12]
 8000c1e:	e001      	b.n	8000c24 <_ZN5Motor10driveMotorEs+0x30>
  } else {
    mode = OperatingMode::BRAKE_GND;
 8000c20:	2300      	movs	r3, #0
 8000c22:	60fb      	str	r3, [r7, #12]
  }

  switch(mode){
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	2b03      	cmp	r3, #3
 8000c28:	d83a      	bhi.n	8000ca0 <_ZN5Motor10driveMotorEs+0xac>
 8000c2a:	a201      	add	r2, pc, #4	; (adr r2, 8000c30 <_ZN5Motor10driveMotorEs+0x3c>)
 8000c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c30:	08000c41 	.word	0x08000c41
 8000c34:	08000c59 	.word	0x08000c59
 8000c38:	08000c71 	.word	0x08000c71
 8000c3c:	08000c89 	.word	0x08000c89
    case OperatingMode::BRAKE_GND:
      pin_INA.set(false);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2100      	movs	r1, #0
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff feef 	bl	8000a28 <_ZN10PinControl3setEb>
      pin_INB.set(false);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	3310      	adds	r3, #16
 8000c4e:	2100      	movs	r1, #0
 8000c50:	4618      	mov	r0, r3
 8000c52:	f7ff fee9 	bl	8000a28 <_ZN10PinControl3setEb>
      break;
 8000c56:	e023      	b.n	8000ca0 <_ZN5Motor10driveMotorEs+0xac>
    case OperatingMode::SPIN_CCW:
      pin_INA.set(false);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f7ff fee3 	bl	8000a28 <_ZN10PinControl3setEb>
      pin_INB.set(true);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	3310      	adds	r3, #16
 8000c66:	2101      	movs	r1, #1
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f7ff fedd 	bl	8000a28 <_ZN10PinControl3setEb>
      break;
 8000c6e:	e017      	b.n	8000ca0 <_ZN5Motor10driveMotorEs+0xac>
    case OperatingMode::SPIN_CW:
      pin_INA.set(true);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2101      	movs	r1, #1
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff fed7 	bl	8000a28 <_ZN10PinControl3setEb>
      pin_INB.set(false);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	3310      	adds	r3, #16
 8000c7e:	2100      	movs	r1, #0
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff fed1 	bl	8000a28 <_ZN10PinControl3setEb>
      break;
 8000c86:	e00b      	b.n	8000ca0 <_ZN5Motor10driveMotorEs+0xac>
    case OperatingMode::BRAKE_VCC:
      pin_INA.set(true);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2101      	movs	r1, #1
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f7ff fecb 	bl	8000a28 <_ZN10PinControl3setEb>
      pin_INB.set(true);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	3310      	adds	r3, #16
 8000c96:	2101      	movs	r1, #1
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff fec5 	bl	8000a28 <_ZN10PinControl3setEb>
      break;
 8000c9e:	bf00      	nop
  }
  switch(CCRx) {
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000ca6:	3b01      	subs	r3, #1
 8000ca8:	2b05      	cmp	r3, #5
 8000caa:	d851      	bhi.n	8000d50 <_ZN5Motor10driveMotorEs+0x15c>
 8000cac:	a201      	add	r2, pc, #4	; (adr r2, 8000cb4 <_ZN5Motor10driveMotorEs+0xc0>)
 8000cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cb2:	bf00      	nop
 8000cb4:	08000ccd 	.word	0x08000ccd
 8000cb8:	08000ce3 	.word	0x08000ce3
 8000cbc:	08000cf9 	.word	0x08000cf9
 8000cc0:	08000d0f 	.word	0x08000d0f
 8000cc4:	08000d25 	.word	0x08000d25
 8000cc8:	08000d3b 	.word	0x08000d3b
    case 1:
      htimPWM->Instance->CCR1 = (uint16_t) abs(spwm);
 8000ccc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	bfb8      	it	lt
 8000cd4:	425b      	neglt	r3, r3
 8000cd6:	b29a      	uxth	r2, r3
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	6a1b      	ldr	r3, [r3, #32]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	635a      	str	r2, [r3, #52]	; 0x34
      break;
 8000ce0:	e036      	b.n	8000d50 <_ZN5Motor10driveMotorEs+0x15c>
    case 2:
      htimPWM->Instance->CCR2 = (uint16_t) abs(spwm);
 8000ce2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	bfb8      	it	lt
 8000cea:	425b      	neglt	r3, r3
 8000cec:	b29a      	uxth	r2, r3
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6a1b      	ldr	r3, [r3, #32]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	639a      	str	r2, [r3, #56]	; 0x38
      break;
 8000cf6:	e02b      	b.n	8000d50 <_ZN5Motor10driveMotorEs+0x15c>
    case 3:
      htimPWM->Instance->CCR3 = (uint16_t) abs(spwm);
 8000cf8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	bfb8      	it	lt
 8000d00:	425b      	neglt	r3, r3
 8000d02:	b29a      	uxth	r2, r3
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	6a1b      	ldr	r3, [r3, #32]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 8000d0c:	e020      	b.n	8000d50 <_ZN5Motor10driveMotorEs+0x15c>
    case 4:
      htimPWM->Instance->CCR4 = (uint16_t) abs(spwm);
 8000d0e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	bfb8      	it	lt
 8000d16:	425b      	neglt	r3, r3
 8000d18:	b29a      	uxth	r2, r3
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6a1b      	ldr	r3, [r3, #32]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8000d22:	e015      	b.n	8000d50 <_ZN5Motor10driveMotorEs+0x15c>
    case 5:
      htimPWM->Instance->CCR5 = (uint16_t) abs(spwm);
 8000d24:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	bfb8      	it	lt
 8000d2c:	425b      	neglt	r3, r3
 8000d2e:	b29a      	uxth	r2, r3
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	6a1b      	ldr	r3, [r3, #32]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8000d38:	e00a      	b.n	8000d50 <_ZN5Motor10driveMotorEs+0x15c>
    case 6:
      htimPWM->Instance->CCR6 = (uint16_t) abs(spwm);
 8000d3a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	bfb8      	it	lt
 8000d42:	425b      	neglt	r3, r3
 8000d44:	b29a      	uxth	r2, r3
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6a1b      	ldr	r3, [r3, #32]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 8000d4e:	bf00      	nop

  }
}
 8000d50:	bf00      	nop
 8000d52:	3710      	adds	r7, #16
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <_ZN5Motor11isInEndStopEv>:

bool Motor::isInEndStop(){
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  return pin_END.state();
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	332c      	adds	r3, #44	; 0x2c
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff fea7 	bl	8000ab8 <_ZN10PinMeasure5stateEv>
 8000d6a:	4603      	mov	r3, r0
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3708      	adds	r7, #8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <_ZN3PIDD1Ev>:
class PID final
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	3330      	adds	r3, #48	; 0x30
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff fd9c 	bl	80008be <_ZN10IntegratorD1Ev>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <_ZN5RobotC1E10PinControlS0_mhPP5MotorPf>:
// Robot
// ==================================================

/*Robot::Robot(PinControl &enable, PinControl &toggle, unsigned long ts_ms, uint8_t size, Motor **motors, float *encs_div)
  : motors(motors), error_div(encs_div), pin_enable(enable), pin_toggle(toggle) {*/
Robot::Robot(PinControl enable, PinControl toggle, unsigned long ts_ms, uint8_t size, Motor **motors, float *encs_div)
 8000d90:	b084      	sub	sp, #16
 8000d92:	b590      	push	{r4, r7, lr}
 8000d94:	b0a9      	sub	sp, #164	; 0xa4
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
 8000d9a:	f107 00b4 	add.w	r0, r7, #180	; 0xb4
 8000d9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  : pin_enable(enable), pin_toggle(toggle), motors(motors), error_div(encs_div) {
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	461c      	mov	r4, r3
 8000da6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000daa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000dac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	f103 0410 	add.w	r4, r3, #16
 8000db6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000dba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000dbc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8000dc6:	629a      	str	r2, [r3, #40]	; 0x28
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8000dce:	641a      	str	r2, [r3, #64]	; 0x40

  this->ts = ts_ms;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8000dd6:	621a      	str	r2, [r3, #32]
  //this->motors = 		(Motor**)	malloc(size * sizeof(Motor*));
  this->pids = 			(PID*)		malloc(size * sizeof(PID));
 8000dd8:	f897 20d8 	ldrb.w	r2, [r7, #216]	; 0xd8
 8000ddc:	4613      	mov	r3, r2
 8000dde:	00db      	lsls	r3, r3, #3
 8000de0:	4413      	add	r3, r2
 8000de2:	011b      	lsls	r3, r3, #4
 8000de4:	4618      	mov	r0, r3
 8000de6:	f01c fb5d 	bl	801d4a4 <malloc>
 8000dea:	4603      	mov	r3, r0
 8000dec:	461a      	mov	r2, r3
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	62da      	str	r2, [r3, #44]	; 0x2c
  this->switches = 		(bool*) 	malloc(size * sizeof(bool));
 8000df2:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
 8000df6:	4618      	mov	r0, r3
 8000df8:	f01c fb54 	bl	801d4a4 <malloc>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	461a      	mov	r2, r3
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	635a      	str	r2, [r3, #52]	; 0x34
  this->motors_pwm = 	(int16_t*) 	malloc(size * sizeof(int16_t));
 8000e04:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
 8000e08:	005b      	lsls	r3, r3, #1
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f01c fb4a 	bl	801d4a4 <malloc>
 8000e10:	4603      	mov	r3, r0
 8000e12:	461a      	mov	r2, r3
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	639a      	str	r2, [r3, #56]	; 0x38
  this->encoders =		(int16_t*)	malloc(size * sizeof(int16_t));
 8000e18:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
 8000e1c:	005b      	lsls	r3, r3, #1
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f01c fb40 	bl	801d4a4 <malloc>
 8000e24:	4603      	mov	r3, r0
 8000e26:	461a      	mov	r2, r3
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	63da      	str	r2, [r3, #60]	; 0x3c
  //this->error_div = 	(float*) 	malloc(size * sizeof(float));

  this->size = size;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	f897 20d8 	ldrb.w	r2, [r7, #216]	; 0xd8
 8000e32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  this->status = Status::Idle;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2200      	movs	r2, #0
 8000e3a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  for(int i = 0; i < size; i++){
 8000e3e:	2300      	movs	r3, #0
 8000e40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8000e44:	e035      	b.n	8000eb2 <_ZN5RobotC1E10PinControlS0_mhPP5MotorPf+0x122>
    this->switches[i] = false;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e4a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000e4e:	4413      	add	r3, r2
 8000e50:	2200      	movs	r2, #0
 8000e52:	701a      	strb	r2, [r3, #0]
    this->motors_pwm[i] = 0;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000e58:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000e5c:	005b      	lsls	r3, r3, #1
 8000e5e:	4413      	add	r3, r2
 8000e60:	2200      	movs	r2, #0
 8000e62:	801a      	strh	r2, [r3, #0]
    this->encoders[i] = 0;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e68:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	4413      	add	r3, r2
 8000e70:	2200      	movs	r2, #0
 8000e72:	801a      	strh	r2, [r3, #0]
    this->pids[i] = PID();
 8000e74:	f107 030c 	add.w	r3, r7, #12
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff fd5e 	bl	800093a <_ZN3PIDC1Ev>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000e82:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8000e86:	4613      	mov	r3, r2
 8000e88:	00db      	lsls	r3, r3, #3
 8000e8a:	4413      	add	r3, r2
 8000e8c:	011b      	lsls	r3, r3, #4
 8000e8e:	440b      	add	r3, r1
 8000e90:	4618      	mov	r0, r3
 8000e92:	f107 030c 	add.w	r3, r7, #12
 8000e96:	2290      	movs	r2, #144	; 0x90
 8000e98:	4619      	mov	r1, r3
 8000e9a:	f01c ffac 	bl	801ddf6 <memcpy>
 8000e9e:	f107 030c 	add.w	r3, r7, #12
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f7ff ff66 	bl	8000d74 <_ZN3PIDD1Ev>
  for(int i = 0; i < size; i++){
 8000ea8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000eac:	3301      	adds	r3, #1
 8000eae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8000eb2:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
 8000eb6:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8000eba:	429a      	cmp	r2, r3
 8000ebc:	dbc3      	blt.n	8000e46 <_ZN5RobotC1E10PinControlS0_mhPP5MotorPf+0xb6>
  }

  update();
 8000ebe:	6878      	ldr	r0, [r7, #4]
 8000ec0:	f000 fa2e 	bl	8001320 <_ZN5Robot6updateEv>
}
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	37a4      	adds	r7, #164	; 0xa4
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000ed0:	b004      	add	sp, #16
 8000ed2:	4770      	bx	lr

08000ed4 <_ZN5RobotD1Ev>:
  : Robot(enable, toggle,ts_ms, size, motors, NULL) {}

Robot::Robot(PinControl enable, PinControl toggle, unsigned long ts_ms, uint8_t size)
  : Robot(enable, toggle,ts_ms, size, NULL, NULL) {}

Robot::~Robot() {
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  free(this->motors);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f01c fae7 	bl	801d4b4 <free>
  free(this->pids);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eea:	4618      	mov	r0, r3
 8000eec:	f01c fae2 	bl	801d4b4 <free>
  free(this->switches);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f01c fadd 	bl	801d4b4 <free>
  free(this->motors_pwm);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000efe:	4618      	mov	r0, r3
 8000f00:	f01c fad8 	bl	801d4b4 <free>
  free(this->encoders);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f01c fad3 	bl	801d4b4 <free>
  free(this->error_div);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f12:	4618      	mov	r0, r3
 8000f14:	f01c face 	bl	801d4b4 <free>
}
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <_ZN5Robot7getSizeEv>:

int Robot::getSize(){
 8000f22:	b480      	push	{r7}
 8000f24:	b083      	sub	sp, #12
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
  return this->size;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	370c      	adds	r7, #12
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr

08000f3c <_ZN5Robot9setStatusENS_6StatusEb>:

Robot::Status Robot::getStatus(){
  return this->status;
}

void Robot::setStatus(Status status, bool reset = false){
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	460b      	mov	r3, r1
 8000f46:	70fb      	strb	r3, [r7, #3]
 8000f48:	4613      	mov	r3, r2
 8000f4a:	70bb      	strb	r3, [r7, #2]
  if(this->status != status || reset){
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000f52:	78fa      	ldrb	r2, [r7, #3]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	d102      	bne.n	8000f5e <_ZN5Robot9setStatusENS_6StatusEb+0x22>
 8000f58:	78bb      	ldrb	r3, [r7, #2]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d006      	beq.n	8000f6c <_ZN5Robot9setStatusENS_6StatusEb+0x30>
    //resetPWMs(); riga non necessaria?
    resetPIDs();
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	f000 f843 	bl	8000fea <_ZN5Robot9resetPIDsEv>
    this->status = status;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	78fa      	ldrb	r2, [r7, #3]
 8000f68:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  }
}
 8000f6c:	bf00      	nop
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <_ZN5Robot8getMotorEh>:

Motor * Robot::getMotor(uint8_t index){
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	70fb      	strb	r3, [r7, #3]
  return this->motors[index];
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f84:	78fb      	ldrb	r3, [r7, #3]
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	4413      	add	r3, r2
 8000f8a:	681b      	ldr	r3, [r3, #0]
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <_ZN5Robot17setEncoderDividerEhf>:
void Robot::setMotor(uint8_t index, Motor * motor, float enc_div){
  this->motors[index] = motor;
  this->error_div[index] = enc_div;
}

void Robot::setEncoderDivider(uint8_t index, float enc_div){
 8000f98:	b480      	push	{r7}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	ed87 0a01 	vstr	s0, [r7, #4]
 8000fa6:	72fb      	strb	r3, [r7, #11]
  this->error_div[index] = enc_div;
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fac:	7afb      	ldrb	r3, [r7, #11]
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	4413      	add	r3, r2
 8000fb2:	687a      	ldr	r2, [r7, #4]
 8000fb4:	601a      	str	r2, [r3, #0]
}
 8000fb6:	bf00      	nop
 8000fb8:	3714      	adds	r7, #20
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr

08000fc2 <_ZN5Robot6getPIDEh>:

PID * Robot::getPID(uint8_t index){
 8000fc2:	b480      	push	{r7}
 8000fc4:	b083      	sub	sp, #12
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
 8000fca:	460b      	mov	r3, r1
 8000fcc:	70fb      	strb	r3, [r7, #3]
  return &(this->pids[index]);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000fd2:	78fa      	ldrb	r2, [r7, #3]
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	00db      	lsls	r3, r3, #3
 8000fd8:	4413      	add	r3, r2
 8000fda:	011b      	lsls	r3, r3, #4
 8000fdc:	440b      	add	r3, r1
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr

08000fea <_ZN5Robot9resetPIDsEv>:
  for(int i = 0; i < size; i++){
    getPID(i)->setup(kp, ki, kd);
  }
}

void Robot::resetPIDs(){
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b084      	sub	sp, #16
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
  for(int i = 0; i < size; i++){
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	e00c      	b.n	8001012 <_ZN5Robot9resetPIDsEv+0x28>
    getPID(i)->reset();
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f7ff ffdf 	bl	8000fc2 <_ZN5Robot6getPIDEh>
 8001004:	4603      	mov	r3, r0
 8001006:	4618      	mov	r0, r3
 8001008:	f000 ff78 	bl	8001efc <_ZN3PID5resetEv>
  for(int i = 0; i < size; i++){
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	3301      	adds	r3, #1
 8001010:	60fb      	str	r3, [r7, #12]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001018:	461a      	mov	r2, r3
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	4293      	cmp	r3, r2
 800101e:	dbeb      	blt.n	8000ff8 <_ZN5Robot9resetPIDsEv+0xe>
  }
}
 8001020:	bf00      	nop
 8001022:	bf00      	nop
 8001024:	3710      	adds	r7, #16
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <_ZN5Robot10getEncoderEh>:

int16_t Robot::getEncoder(uint8_t index) {
 800102a:	b580      	push	{r7, lr}
 800102c:	b082      	sub	sp, #8
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
 8001032:	460b      	mov	r3, r1
 8001034:	70fb      	strb	r3, [r7, #3]
	return getMotor(index)->getEncoder();
 8001036:	78fb      	ldrb	r3, [r7, #3]
 8001038:	4619      	mov	r1, r3
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f7ff ff9a 	bl	8000f74 <_ZN5Robot8getMotorEh>
 8001040:	4603      	mov	r3, r0
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff fdbd 	bl	8000bc2 <_ZN5Motor10getEncoderEv>
 8001048:	4603      	mov	r3, r0
}
 800104a:	4618      	mov	r0, r3
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <_ZN5Robot10setEncoderEhs>:

void Robot::setEncoder(uint8_t i, const int16_t enc) {
 8001052:	b480      	push	{r7}
 8001054:	b083      	sub	sp, #12
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
 800105a:	460b      	mov	r3, r1
 800105c:	70fb      	strb	r3, [r7, #3]
 800105e:	4613      	mov	r3, r2
 8001060:	803b      	strh	r3, [r7, #0]
	encoders[i] = enc;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001066:	78fb      	ldrb	r3, [r7, #3]
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	4413      	add	r3, r2
 800106c:	883a      	ldrh	r2, [r7, #0]
 800106e:	801a      	strh	r2, [r3, #0]
}
 8001070:	bf00      	nop
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <_ZN5Robot11setEncodersEPKs>:

void Robot::setEncoders(const int16_t *encs) {
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	6039      	str	r1, [r7, #0]
  for(int i = 0; i < 5; i++) {
 8001086:	2300      	movs	r3, #0
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	e00e      	b.n	80010aa <_ZN5Robot11setEncodersEPKs+0x2e>
    setEncoder(i, encs[i]);
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	b2d9      	uxtb	r1, r3
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	683a      	ldr	r2, [r7, #0]
 8001096:	4413      	add	r3, r2
 8001098:	f9b3 3000 	ldrsh.w	r3, [r3]
 800109c:	461a      	mov	r2, r3
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f7ff ffd7 	bl	8001052 <_ZN5Robot10setEncoderEhs>
  for(int i = 0; i < 5; i++) {
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	3301      	adds	r3, #1
 80010a8:	60fb      	str	r3, [r7, #12]
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	2b04      	cmp	r3, #4
 80010ae:	dded      	ble.n	800108c <_ZN5Robot11setEncodersEPKs+0x10>
  }
}
 80010b0:	bf00      	nop
 80010b2:	bf00      	nop
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}

080010ba <_ZN5Robot7setPWMsEPKs>:

void Robot::setPWMs(const int16_t *pwms){
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b084      	sub	sp, #16
 80010be:	af00      	add	r7, sp, #0
 80010c0:	6078      	str	r0, [r7, #4]
 80010c2:	6039      	str	r1, [r7, #0]
  for(int i = 0; i < size; i++){
 80010c4:	2300      	movs	r3, #0
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	e00e      	b.n	80010e8 <_ZN5Robot7setPWMsEPKs+0x2e>
    setPWM(i, pwms[i]);
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	b2d9      	uxtb	r1, r3
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	683a      	ldr	r2, [r7, #0]
 80010d4:	4413      	add	r3, r2
 80010d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010da:	461a      	mov	r2, r3
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f000 f80f 	bl	8001100 <_ZN5Robot6setPWMEhs>
  for(int i = 0; i < size; i++){
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	3301      	adds	r3, #1
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80010ee:	461a      	mov	r2, r3
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	4293      	cmp	r3, r2
 80010f4:	dbe9      	blt.n	80010ca <_ZN5Robot7setPWMsEPKs+0x10>
  }
}
 80010f6:	bf00      	nop
 80010f8:	bf00      	nop
 80010fa:	3710      	adds	r7, #16
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}

08001100 <_ZN5Robot6setPWMEhs>:

void Robot::setPWM(uint8_t index, const int16_t pwm){
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	460b      	mov	r3, r1
 800110a:	70fb      	strb	r3, [r7, #3]
 800110c:	4613      	mov	r3, r2
 800110e:	803b      	strh	r3, [r7, #0]
  motors_pwm[index] = pwm;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001114:	78fb      	ldrb	r3, [r7, #3]
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	4413      	add	r3, r2
 800111a:	883a      	ldrh	r2, [r7, #0]
 800111c:	801a      	strh	r2, [r3, #0]

}
 800111e:	bf00      	nop
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr

0800112a <_ZN5Robot9resetPWMsEv>:

void Robot::resetPWMs(){
 800112a:	b480      	push	{r7}
 800112c:	b085      	sub	sp, #20
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
  for(int i = 0; i < size; i++){
 8001132:	2300      	movs	r3, #0
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	e009      	b.n	800114c <_ZN5Robot9resetPWMsEv+0x22>
    motors_pwm[i] = 0;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	4413      	add	r3, r2
 8001142:	2200      	movs	r2, #0
 8001144:	801a      	strh	r2, [r3, #0]
  for(int i = 0; i < size; i++){
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	3301      	adds	r3, #1
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001152:	461a      	mov	r2, r3
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	4293      	cmp	r3, r2
 8001158:	dbee      	blt.n	8001138 <_ZN5Robot9resetPWMsEv+0xe>
  }
}
 800115a:	bf00      	nop
 800115c:	bf00      	nop
 800115e:	3714      	adds	r7, #20
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr

08001168 <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request>:
void Robot::disableMotors(){
  setStatus(Status::Idle, true);
  pin_enable.set(false);
}

void Robot::rcvCtrl(racs_services__srv__Control_Request* request){
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	6039      	str	r1, [r7, #0]

  if(request->command > 2) {
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	785b      	ldrb	r3, [r3, #1]
 8001176:	2b02      	cmp	r3, #2
 8001178:	d905      	bls.n	8001186 <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0x1e>
    setStatus(Status::Idle, true);
 800117a:	2201      	movs	r2, #1
 800117c:	2100      	movs	r1, #0
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f7ff fedc 	bl	8000f3c <_ZN5Robot9setStatusENS_6StatusEb>
    return;
 8001184:	e04a      	b.n	800121c <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0xb4>
  }

  switch(request->command){
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	785b      	ldrb	r3, [r3, #1]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d002      	beq.n	8001194 <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0x2c>
 800118e:	2b02      	cmp	r3, #2
 8001190:	d01c      	beq.n	80011cc <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0x64>
 8001192:	e03c      	b.n	800120e <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0xa6>
    case (unsigned char) Command::Idle:
      for(int i = 0; i < size; i++) {
 8001194:	2300      	movs	r3, #0
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	e010      	b.n	80011bc <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0x54>
        motors_pwm[i] = 0;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	4413      	add	r3, r2
 80011a4:	2200      	movs	r2, #0
 80011a6:	801a      	strh	r2, [r3, #0]
        encoders[i] = 0;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	4413      	add	r3, r2
 80011b2:	2200      	movs	r2, #0
 80011b4:	801a      	strh	r2, [r3, #0]
      for(int i = 0; i < size; i++) {
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	3301      	adds	r3, #1
 80011ba:	60fb      	str	r3, [r7, #12]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80011c2:	461a      	mov	r2, r3
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	4293      	cmp	r3, r2
 80011c8:	dbe7      	blt.n	800119a <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0x32>
      }
      break;
 80011ca:	e020      	b.n	800120e <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0xa6>

    case (unsigned char) Command::PID:
      for(int i = 0; i < size; i++) {
 80011cc:	2300      	movs	r3, #0
 80011ce:	60bb      	str	r3, [r7, #8]
 80011d0:	e015      	b.n	80011fe <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0x96>
        motors_pwm[i] = 0;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	4413      	add	r3, r2
 80011dc:	2200      	movs	r2, #0
 80011de:	801a      	strh	r2, [r3, #0]
        encoders[i] = request->encoders[i];
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	441a      	add	r2, r3
 80011ea:	6839      	ldr	r1, [r7, #0]
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	440b      	add	r3, r1
 80011f2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80011f6:	8013      	strh	r3, [r2, #0]
      for(int i = 0; i < size; i++) {
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	3301      	adds	r3, #1
 80011fc:	60bb      	str	r3, [r7, #8]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001204:	461a      	mov	r2, r3
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	4293      	cmp	r3, r2
 800120a:	dbe2      	blt.n	80011d2 <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0x6a>
      }
      break;
 800120c:	bf00      	nop
  }

  setStatus((Status) request->command);
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	785b      	ldrb	r3, [r3, #1]
 8001212:	2200      	movs	r2, #0
 8001214:	4619      	mov	r1, r3
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f7ff fe90 	bl	8000f3c <_ZN5Robot9setStatusENS_6StatusEb>
}
 800121c:	3710      	adds	r7, #16
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <_ZN5Robot7sndCtrlEP36racs_services__srv__Control_Response>:

void Robot::sndCtrl(racs_services__srv__Control_Response* response){
 8001222:	b480      	push	{r7}
 8001224:	b083      	sub	sp, #12
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
 800122a:	6039      	str	r1, [r7, #0]
	response->response = (uint8_t) status;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	701a      	strb	r2, [r3, #0]
}
 8001236:	bf00      	nop
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
	...

08001244 <_ZN5Robot8rcvSetupEP33racs_services__srv__Setup_Request>:

void Robot::rcvSetup(racs_services__srv__Setup_Request* request){
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	6039      	str	r1, [r7, #0]

  setEncoderDivider(request->motor_index, request->eed);
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	781a      	ldrb	r2, [r3, #0]
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	edd3 7a01 	vldr	s15, [r3, #4]
 8001258:	eeb0 0a67 	vmov.f32	s0, s15
 800125c:	4611      	mov	r1, r2
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f7ff fe9a 	bl	8000f98 <_ZN5Robot17setEncoderDividerEhf>
  getPID(request->motor_index)->reset();
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	4619      	mov	r1, r3
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f7ff fea9 	bl	8000fc2 <_ZN5Robot6getPIDEh>
 8001270:	4603      	mov	r3, r0
 8001272:	4618      	mov	r0, r3
 8001274:	f000 fe42 	bl	8001efc <_ZN3PID5resetEv>
  getPID(request->motor_index)->init((float) ts/1000.0, request->tau, request->sat, true);
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	4619      	mov	r1, r3
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f7ff fe9f 	bl	8000fc2 <_ZN5Robot6getPIDEh>
 8001284:	4602      	mov	r2, r0
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6a1b      	ldr	r3, [r3, #32]
 800128a:	ee07 3a90 	vmov	s15, r3
 800128e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001292:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8001300 <_ZN5Robot8rcvSetupEP33racs_services__srv__Setup_Request+0xbc>
 8001296:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	edd3 7a05 	vldr	s15, [r3, #20]
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	edd3 6a06 	vldr	s13, [r3, #24]
 80012a6:	2101      	movs	r1, #1
 80012a8:	eeb0 1a66 	vmov.f32	s2, s13
 80012ac:	eef0 0a67 	vmov.f32	s1, s15
 80012b0:	eeb0 0a47 	vmov.f32	s0, s14
 80012b4:	4610      	mov	r0, r2
 80012b6:	f000 fd97 	bl	8001de8 <_ZN3PID4initEfffb>
  getPID(request->motor_index)->setup(request->p, request->i, request->d);
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	4619      	mov	r1, r3
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	f7ff fe7e 	bl	8000fc2 <_ZN5Robot6getPIDEh>
 80012c6:	4602      	mov	r2, r0
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	edd3 7a02 	vldr	s15, [r3, #8]
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	ed93 7a03 	vldr	s14, [r3, #12]
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	edd3 6a04 	vldr	s13, [r3, #16]
 80012da:	eeb0 1a66 	vmov.f32	s2, s13
 80012de:	eef0 0a47 	vmov.f32	s1, s14
 80012e2:	eeb0 0a67 	vmov.f32	s0, s15
 80012e6:	4610      	mov	r0, r2
 80012e8:	f000 fdee 	bl	8001ec8 <_ZN3PID5setupEfff>

  setStatus(Status::Idle, true);
 80012ec:	2201      	movs	r2, #1
 80012ee:	2100      	movs	r1, #0
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f7ff fe23 	bl	8000f3c <_ZN5Robot9setStatusENS_6StatusEb>
}
 80012f6:	bf00      	nop
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	447a0000 	.word	0x447a0000

08001304 <_ZN5Robot8sndSetupEP34racs_services__srv__Setup_Response>:

void Robot::sndSetup(racs_services__srv__Setup_Response* response){
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	6039      	str	r1, [r7, #0]
  response->response = (uint8_t) Status::Setup;
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	2203      	movs	r2, #3
 8001312:	701a      	strb	r2, [r3, #0]
}
 8001314:	bf00      	nop
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <_ZN5Robot6updateEv>:

void Robot::update(){
 8001320:	b590      	push	{r4, r7, lr}
 8001322:	b089      	sub	sp, #36	; 0x24
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  switch(status){
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800132e:	2b02      	cmp	r3, #2
 8001330:	d00b      	beq.n	800134a <_ZN5Robot6updateEv+0x2a>
 8001332:	2b02      	cmp	r3, #2
 8001334:	d87d      	bhi.n	8001432 <_ZN5Robot6updateEv+0x112>
 8001336:	2b00      	cmp	r3, #0
 8001338:	d003      	beq.n	8001342 <_ZN5Robot6updateEv+0x22>
 800133a:	2b01      	cmp	r3, #1
 800133c:	f000 8084 	beq.w	8001448 <_ZN5Robot6updateEv+0x128>
 8001340:	e077      	b.n	8001432 <_ZN5Robot6updateEv+0x112>
    case Status::Idle:
      resetPWMs();
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f7ff fef1 	bl	800112a <_ZN5Robot9resetPWMsEv>
      break;
 8001348:	e07f      	b.n	800144a <_ZN5Robot6updateEv+0x12a>

    case Status::DAQ:
      break;

    case Status::PID:
      for(int i = 0; i < 1; i++){
 800134a:	2300      	movs	r3, #0
 800134c:	61fb      	str	r3, [r7, #28]
 800134e:	e06c      	b.n	800142a <_ZN5Robot6updateEv+0x10a>
        float err = (float) (encoders[i] - getMotor(i)->getEncoder()) / ((error_div[i] == 0) ? 1.0 : error_div[i]);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	4413      	add	r3, r2
 800135a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800135e:	461c      	mov	r4, r3
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	b2db      	uxtb	r3, r3
 8001364:	4619      	mov	r1, r3
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f7ff fe04 	bl	8000f74 <_ZN5Robot8getMotorEh>
 800136c:	4603      	mov	r3, r0
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff fc27 	bl	8000bc2 <_ZN5Motor10getEncoderEv>
 8001374:	4603      	mov	r3, r0
 8001376:	1ae3      	subs	r3, r4, r3
 8001378:	ee07 3a90 	vmov	s15, r3
 800137c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001380:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	4413      	add	r3, r2
 800138e:	edd3 7a00 	vldr	s15, [r3]
 8001392:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800139a:	d009      	beq.n	80013b0 <_ZN5Robot6updateEv+0x90>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	4413      	add	r3, r2
 80013a6:	edd3 7a00 	vldr	s15, [r3]
 80013aa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013ae:	e001      	b.n	80013b4 <_ZN5Robot6updateEv+0x94>
 80013b0:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80013b4:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80013b8:	eef7 7bc6 	vcvt.f32.f64	s15, d6
 80013bc:	edc7 7a05 	vstr	s15, [r7, #20]
        float gettopiddo = getPID(i)->evolve(err);
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	4619      	mov	r1, r3
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f7ff fdfb 	bl	8000fc2 <_ZN5Robot6getPIDEh>
 80013cc:	4603      	mov	r3, r0
 80013ce:	ed97 0a05 	vldr	s0, [r7, #20]
 80013d2:	4618      	mov	r0, r3
 80013d4:	f000 fe37 	bl	8002046 <_ZN3PID6evolveEf>
 80013d8:	eef0 7a40 	vmov.f32	s15, s0
 80013dc:	edc7 7a02 	vstr	s15, [r7, #8]
    	motors_pwm[i] = (int16_t) std::min(std::max((float) -(HALF_PWM+1), gettopiddo), (float) HALF_PWM);
 80013e0:	f04f 4347 	mov.w	r3, #3338665984	; 0xc7000000
 80013e4:	60fb      	str	r3, [r7, #12]
 80013e6:	f107 0208 	add.w	r2, r7, #8
 80013ea:	f107 030c 	add.w	r3, r7, #12
 80013ee:	4611      	mov	r1, r2
 80013f0:	4618      	mov	r0, r3
 80013f2:	f000 fbd7 	bl	8001ba4 <_ZSt3maxIfERKT_S2_S2_>
 80013f6:	4602      	mov	r2, r0
 80013f8:	4b25      	ldr	r3, [pc, #148]	; (8001490 <_ZN5Robot6updateEv+0x170>)
 80013fa:	613b      	str	r3, [r7, #16]
 80013fc:	f107 0310 	add.w	r3, r7, #16
 8001400:	4619      	mov	r1, r3
 8001402:	4610      	mov	r0, r2
 8001404:	f000 fbe7 	bl	8001bd6 <_ZSt3minIfERKT_S2_S2_>
 8001408:	4603      	mov	r3, r0
 800140a:	edd3 7a00 	vldr	s15, [r3]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	4413      	add	r3, r2
 8001418:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800141c:	ee17 2a90 	vmov	r2, s15
 8001420:	b212      	sxth	r2, r2
 8001422:	801a      	strh	r2, [r3, #0]
      for(int i = 0; i < 1; i++){
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	3301      	adds	r3, #1
 8001428:	61fb      	str	r3, [r7, #28]
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	2b00      	cmp	r3, #0
 800142e:	dd8f      	ble.n	8001350 <_ZN5Robot6updateEv+0x30>
      }
      break;
 8001430:	e00b      	b.n	800144a <_ZN5Robot6updateEv+0x12a>

    default:
      resetPWMs();
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f7ff fe79 	bl	800112a <_ZN5Robot9resetPWMsEv>
      resetPIDs();
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f7ff fdd6 	bl	8000fea <_ZN5Robot9resetPIDsEv>
      status = Status::Idle;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2200      	movs	r2, #0
 8001442:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      break;
 8001446:	e000      	b.n	800144a <_ZN5Robot6updateEv+0x12a>
      break;
 8001448:	bf00      	nop
  }

  for(int i = 0; i < size; i++){
 800144a:	2300      	movs	r3, #0
 800144c:	61bb      	str	r3, [r7, #24]
 800144e:	e012      	b.n	8001476 <_ZN5Robot6updateEv+0x156>
    switches[i] = getMotor(i)->isInEndStop();
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	b2db      	uxtb	r3, r3
 8001454:	4619      	mov	r1, r3
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f7ff fd8c 	bl	8000f74 <_ZN5Robot8getMotorEh>
 800145c:	4601      	mov	r1, r0
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	18d4      	adds	r4, r2, r3
 8001466:	4608      	mov	r0, r1
 8001468:	f7ff fc76 	bl	8000d58 <_ZN5Motor11isInEndStopEv>
 800146c:	4603      	mov	r3, r0
 800146e:	7023      	strb	r3, [r4, #0]
  for(int i = 0; i < size; i++){
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	3301      	adds	r3, #1
 8001474:	61bb      	str	r3, [r7, #24]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800147c:	461a      	mov	r2, r3
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	4293      	cmp	r3, r2
 8001482:	dbe5      	blt.n	8001450 <_ZN5Robot6updateEv+0x130>
  }
}
 8001484:	bf00      	nop
 8001486:	bf00      	nop
 8001488:	3724      	adds	r7, #36	; 0x24
 800148a:	46bd      	mov	sp, r7
 800148c:	bd90      	pop	{r4, r7, pc}
 800148e:	bf00      	nop
 8001490:	46ffff00 	.word	0x46ffff00

08001494 <_ZN5Robot7actuateEv>:

void Robot::actuate(){
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  for(int i = 0; i < size; i++){
 800149c:	2300      	movs	r3, #0
 800149e:	60fb      	str	r3, [r7, #12]
 80014a0:	e012      	b.n	80014c8 <_ZN5Robot7actuateEv+0x34>
    getMotor(i)->driveMotor(motors_pwm[i]);
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	4619      	mov	r1, r3
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f7ff fd63 	bl	8000f74 <_ZN5Robot8getMotorEh>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	4413      	add	r3, r2
 80014b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014bc:	4619      	mov	r1, r3
 80014be:	f7ff fb99 	bl	8000bf4 <_ZN5Motor10driveMotorEs>
  for(int i = 0; i < size; i++){
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	3301      	adds	r3, #1
 80014c6:	60fb      	str	r3, [r7, #12]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014ce:	461a      	mov	r2, r3
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	4293      	cmp	r3, r2
 80014d4:	dbe5      	blt.n	80014a2 <_ZN5Robot7actuateEv+0xe>
  }
}
 80014d6:	bf00      	nop
 80014d8:	bf00      	nop
 80014da:	3710      	adds	r7, #16
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}

080014e0 <_ZN5Robot5cycleEv>:

void Robot::cycle(){
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
        pin_toggle.set(true);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	3310      	adds	r3, #16
 80014ec:	2101      	movs	r1, #1
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff fa9a 	bl	8000a28 <_ZN10PinControl3setEb>
        update();
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f7ff ff13 	bl	8001320 <_ZN5Robot6updateEv>
        actuate();
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f7ff ffca 	bl	8001494 <_ZN5Robot7actuateEv>
        pin_toggle.set(false);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	3310      	adds	r3, #16
 8001504:	2100      	movs	r1, #0
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff fa8e 	bl	8000a28 <_ZN10PinControl3setEb>
}
 800150c:	bf00      	nop
 800150e:	3708      	adds	r7, #8
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}

08001514 <_Z12create_robotv>:

Robot create_robot() {
 8001514:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001516:	f5ad 7d3b 	sub.w	sp, sp, #748	; 0x2ec
 800151a:	af0c      	add	r7, sp, #48	; 0x30
 800151c:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001520:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8001524:	6018      	str	r0, [r3, #0]

	PinControl mot1_ina = PinControl(MOTOR1_INA_GPIO_Port, MOTOR1_INA_Pin);
 8001526:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800152a:	2201      	movs	r2, #1
 800152c:	49cd      	ldr	r1, [pc, #820]	; (8001864 <_Z12create_robotv+0x350>)
 800152e:	4618      	mov	r0, r3
 8001530:	f7ff fa4a 	bl	80009c8 <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinControl mot1_inb = PinControl(MOTOR1_INB_GPIO_Port, MOTOR1_INB_Pin);
 8001534:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8001538:	2202      	movs	r2, #2
 800153a:	49ca      	ldr	r1, [pc, #808]	; (8001864 <_Z12create_robotv+0x350>)
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff fa43 	bl	80009c8 <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinMeasure mot1_end = PinMeasure(MOTOR1_END_GPIO_Port, MOTOR1_END_Pin);
 8001542:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8001546:	f44f 7200 	mov.w	r2, #512	; 0x200
 800154a:	49c7      	ldr	r1, [pc, #796]	; (8001868 <_Z12create_robotv+0x354>)
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff fa83 	bl	8000a58 <_ZN10PinMeasureC1EP12GPIO_TypeDeft>

	PinControl mot2_ina = PinControl(MOTOR2_INA_GPIO_Port, MOTOR2_INA_Pin);
 8001552:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8001556:	2204      	movs	r2, #4
 8001558:	49c2      	ldr	r1, [pc, #776]	; (8001864 <_Z12create_robotv+0x350>)
 800155a:	4618      	mov	r0, r3
 800155c:	f7ff fa34 	bl	80009c8 <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinControl mot2_inb = PinControl(MOTOR2_INB_GPIO_Port, MOTOR2_INB_Pin);
 8001560:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001564:	2208      	movs	r2, #8
 8001566:	49bf      	ldr	r1, [pc, #764]	; (8001864 <_Z12create_robotv+0x350>)
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff fa2d 	bl	80009c8 <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinMeasure mot2_end = PinMeasure(MOTOR2_END_GPIO_Port, MOTOR2_END_Pin);
 800156e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8001572:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001576:	49bc      	ldr	r1, [pc, #752]	; (8001868 <_Z12create_robotv+0x354>)
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff fa6d 	bl	8000a58 <_ZN10PinMeasureC1EP12GPIO_TypeDeft>

	PinControl mot3_ina = PinControl(MOTOR3_INA_GPIO_Port, MOTOR3_INA_Pin);
 800157e:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8001582:	2210      	movs	r2, #16
 8001584:	49b7      	ldr	r1, [pc, #732]	; (8001864 <_Z12create_robotv+0x350>)
 8001586:	4618      	mov	r0, r3
 8001588:	f7ff fa1e 	bl	80009c8 <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinControl mot3_inb = PinControl(MOTOR3_INB_GPIO_Port, MOTOR3_INB_Pin);
 800158c:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001590:	2220      	movs	r2, #32
 8001592:	49b4      	ldr	r1, [pc, #720]	; (8001864 <_Z12create_robotv+0x350>)
 8001594:	4618      	mov	r0, r3
 8001596:	f7ff fa17 	bl	80009c8 <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinMeasure mot3_end = PinMeasure(MOTOR3_END_GPIO_Port, MOTOR3_END_Pin);
 800159a:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800159e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015a2:	49b1      	ldr	r1, [pc, #708]	; (8001868 <_Z12create_robotv+0x354>)
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff fa57 	bl	8000a58 <_ZN10PinMeasureC1EP12GPIO_TypeDeft>

	PinControl mot4_ina = PinControl(MOTOR4_INA_GPIO_Port, MOTOR4_INA_Pin);
 80015aa:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80015ae:	2240      	movs	r2, #64	; 0x40
 80015b0:	49ac      	ldr	r1, [pc, #688]	; (8001864 <_Z12create_robotv+0x350>)
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7ff fa08 	bl	80009c8 <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinControl mot4_inb = PinControl(MOTOR4_INB_GPIO_Port, MOTOR4_INB_Pin);
 80015b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015bc:	2280      	movs	r2, #128	; 0x80
 80015be:	49a9      	ldr	r1, [pc, #676]	; (8001864 <_Z12create_robotv+0x350>)
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff fa01 	bl	80009c8 <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinMeasure mot4_end = PinMeasure(MOTOR4_END_GPIO_Port, MOTOR4_END_Pin);
 80015c6:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80015ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015ce:	49a6      	ldr	r1, [pc, #664]	; (8001868 <_Z12create_robotv+0x354>)
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff fa41 	bl	8000a58 <_ZN10PinMeasureC1EP12GPIO_TypeDeft>

	PinControl mot5_ina = PinControl(MOTOR5_INA_GPIO_Port, MOTOR5_INA_Pin);
 80015d6:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80015da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015de:	49a1      	ldr	r1, [pc, #644]	; (8001864 <_Z12create_robotv+0x350>)
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff f9f1 	bl	80009c8 <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinControl mot5_inb = PinControl(MOTOR5_INB_GPIO_Port, MOTOR5_INB_Pin);
 80015e6:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80015ea:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80015ee:	499d      	ldr	r1, [pc, #628]	; (8001864 <_Z12create_robotv+0x350>)
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7ff f9e9 	bl	80009c8 <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinMeasure mot5_end = PinMeasure(MOTOR5_END_GPIO_Port, MOTOR5_END_Pin);
 80015f6:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 80015fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015fe:	499a      	ldr	r1, [pc, #616]	; (8001868 <_Z12create_robotv+0x354>)
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff fa29 	bl	8000a58 <_ZN10PinMeasureC1EP12GPIO_TypeDeft>

	PinControl mot6_ina = PinControl(MOTOR6_INA_GPIO_Port, MOTOR6_INA_Pin);
 8001606:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800160a:	2204      	movs	r2, #4
 800160c:	4996      	ldr	r1, [pc, #600]	; (8001868 <_Z12create_robotv+0x354>)
 800160e:	4618      	mov	r0, r3
 8001610:	f7ff f9da 	bl	80009c8 <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinControl mot6_inb = PinControl(MOTOR6_INB_GPIO_Port, MOTOR6_INB_Pin);
 8001614:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001618:	2208      	movs	r2, #8
 800161a:	4993      	ldr	r1, [pc, #588]	; (8001868 <_Z12create_robotv+0x354>)
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff f9d3 	bl	80009c8 <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinMeasure mot6_end = PinMeasure(MOTOR6_END_GPIO_Port, MOTOR6_END_Pin);
 8001622:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001626:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800162a:	498f      	ldr	r1, [pc, #572]	; (8001868 <_Z12create_robotv+0x354>)
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff fa13 	bl	8000a58 <_ZN10PinMeasureC1EP12GPIO_TypeDeft>

	PinControl enable = PinControl(MOTORS_EN_GPIO_Port, MOTORS_EN_Pin);
 8001632:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8001636:	2240      	movs	r2, #64	; 0x40
 8001638:	498b      	ldr	r1, [pc, #556]	; (8001868 <_Z12create_robotv+0x354>)
 800163a:	4618      	mov	r0, r3
 800163c:	f7ff f9c4 	bl	80009c8 <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinControl toggle = PinControl(PIN_TOGGLE_GPIO_Port, PIN_TOGGLE_Pin);
 8001640:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001644:	2220      	movs	r2, #32
 8001646:	4988      	ldr	r1, [pc, #544]	; (8001868 <_Z12create_robotv+0x354>)
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff f9bd 	bl	80009c8 <_ZN10PinControlC1EP12GPIO_TypeDeft>

	Motor motor1 = Motor(mot1_ina, mot1_inb, &htim1, 1, &htim2, mot1_end);
 800164e:	f507 759a 	add.w	r5, r7, #308	; 0x134
 8001652:	ac08      	add	r4, sp, #32
 8001654:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8001658:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800165a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800165e:	4b83      	ldr	r3, [pc, #524]	; (800186c <_Z12create_robotv+0x358>)
 8001660:	9307      	str	r3, [sp, #28]
 8001662:	2301      	movs	r3, #1
 8001664:	9306      	str	r3, [sp, #24]
 8001666:	4b82      	ldr	r3, [pc, #520]	; (8001870 <_Z12create_robotv+0x35c>)
 8001668:	9305      	str	r3, [sp, #20]
 800166a:	ac01      	add	r4, sp, #4
 800166c:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8001670:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001672:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001676:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 800167a:	9300      	str	r3, [sp, #0]
 800167c:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8001680:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001682:	4628      	mov	r0, r5
 8001684:	f7ff fa60 	bl	8000b48 <_ZN5MotorC1E10PinControlS0_P17TIM_HandleTypeDefhS2_10PinMeasure>
	Motor motor2 = Motor(mot2_ina, mot2_inb, &htim1, 2, &htim3, mot2_end);
 8001688:	f107 05f8 	add.w	r5, r7, #248	; 0xf8
 800168c:	ac08      	add	r4, sp, #32
 800168e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8001692:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001694:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001698:	4b76      	ldr	r3, [pc, #472]	; (8001874 <_Z12create_robotv+0x360>)
 800169a:	9307      	str	r3, [sp, #28]
 800169c:	2302      	movs	r3, #2
 800169e:	9306      	str	r3, [sp, #24]
 80016a0:	4b73      	ldr	r3, [pc, #460]	; (8001870 <_Z12create_robotv+0x35c>)
 80016a2:	9305      	str	r3, [sp, #20]
 80016a4:	ac01      	add	r4, sp, #4
 80016a6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80016aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80016b0:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 80016b4:	9300      	str	r3, [sp, #0]
 80016b6:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80016ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016bc:	4628      	mov	r0, r5
 80016be:	f7ff fa43 	bl	8000b48 <_ZN5MotorC1E10PinControlS0_P17TIM_HandleTypeDefhS2_10PinMeasure>
	Motor motor3 = Motor(mot3_ina, mot3_inb, &htim1, 3, &htim4, mot3_end);
 80016c2:	f107 05bc 	add.w	r5, r7, #188	; 0xbc
 80016c6:	ac08      	add	r4, sp, #32
 80016c8:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80016cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80016d2:	4b69      	ldr	r3, [pc, #420]	; (8001878 <_Z12create_robotv+0x364>)
 80016d4:	9307      	str	r3, [sp, #28]
 80016d6:	2303      	movs	r3, #3
 80016d8:	9306      	str	r3, [sp, #24]
 80016da:	4b65      	ldr	r3, [pc, #404]	; (8001870 <_Z12create_robotv+0x35c>)
 80016dc:	9305      	str	r3, [sp, #20]
 80016de:	ac01      	add	r4, sp, #4
 80016e0:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80016e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80016ea:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80016ee:	9300      	str	r3, [sp, #0]
 80016f0:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80016f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016f6:	4628      	mov	r0, r5
 80016f8:	f7ff fa26 	bl	8000b48 <_ZN5MotorC1E10PinControlS0_P17TIM_HandleTypeDefhS2_10PinMeasure>
	Motor motor4 = Motor(mot4_ina, mot4_inb, &htim1, 4, &htim5, mot4_end);
 80016fc:	f107 0580 	add.w	r5, r7, #128	; 0x80
 8001700:	ac08      	add	r4, sp, #32
 8001702:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8001706:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001708:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800170c:	4b5b      	ldr	r3, [pc, #364]	; (800187c <_Z12create_robotv+0x368>)
 800170e:	9307      	str	r3, [sp, #28]
 8001710:	2304      	movs	r3, #4
 8001712:	9306      	str	r3, [sp, #24]
 8001714:	4b56      	ldr	r3, [pc, #344]	; (8001870 <_Z12create_robotv+0x35c>)
 8001716:	9305      	str	r3, [sp, #20]
 8001718:	ac01      	add	r4, sp, #4
 800171a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800171e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001720:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001724:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8001728:	9300      	str	r3, [sp, #0]
 800172a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800172e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001730:	4628      	mov	r0, r5
 8001732:	f7ff fa09 	bl	8000b48 <_ZN5MotorC1E10PinControlS0_P17TIM_HandleTypeDefhS2_10PinMeasure>
	Motor motor5 = Motor(mot5_ina, mot5_inb, &htim9, 1, &htim8, mot5_end);
 8001736:	f107 0544 	add.w	r5, r7, #68	; 0x44
 800173a:	ac08      	add	r4, sp, #32
 800173c:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8001740:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001742:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001746:	4b4e      	ldr	r3, [pc, #312]	; (8001880 <_Z12create_robotv+0x36c>)
 8001748:	9307      	str	r3, [sp, #28]
 800174a:	2301      	movs	r3, #1
 800174c:	9306      	str	r3, [sp, #24]
 800174e:	4b4d      	ldr	r3, [pc, #308]	; (8001884 <_Z12create_robotv+0x370>)
 8001750:	9305      	str	r3, [sp, #20]
 8001752:	ac01      	add	r4, sp, #4
 8001754:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8001758:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800175a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800175e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001762:	9300      	str	r3, [sp, #0]
 8001764:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8001768:	cb0e      	ldmia	r3, {r1, r2, r3}
 800176a:	4628      	mov	r0, r5
 800176c:	f7ff f9ec 	bl	8000b48 <_ZN5MotorC1E10PinControlS0_P17TIM_HandleTypeDefhS2_10PinMeasure>
	Motor motor6 = Motor(mot6_ina, mot6_inb, &htim9, 2, 		mot6_end);
 8001770:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001774:	f5a3 7484 	sub.w	r4, r3, #264	; 0x108
 8001778:	f107 0608 	add.w	r6, r7, #8
 800177c:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001780:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001784:	ad07      	add	r5, sp, #28
 8001786:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001788:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800178c:	2302      	movs	r3, #2
 800178e:	9306      	str	r3, [sp, #24]
 8001790:	4b3c      	ldr	r3, [pc, #240]	; (8001884 <_Z12create_robotv+0x370>)
 8001792:	9305      	str	r3, [sp, #20]
 8001794:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001798:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800179c:	ad01      	add	r5, sp, #4
 800179e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017a0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80017a4:	68e3      	ldr	r3, [r4, #12]
 80017a6:	9300      	str	r3, [sp, #0]
 80017a8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80017ac:	4630      	mov	r0, r6
 80017ae:	f7ff f999 	bl	8000ae4 <_ZN5MotorC1E10PinControlS0_P17TIM_HandleTypeDefh10PinMeasure>

	Motor** motors = (Motor**) malloc(sizeof(Motor*)*6);
 80017b2:	2018      	movs	r0, #24
 80017b4:	f01b fe76 	bl	801d4a4 <malloc>
 80017b8:	4603      	mov	r3, r0
 80017ba:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
	float* encs_div = (float*) malloc(sizeof(float)*6);
 80017be:	2018      	movs	r0, #24
 80017c0:	f01b fe70 	bl	801d4a4 <malloc>
 80017c4:	4603      	mov	r3, r0
 80017c6:	f8c7 32b0 	str.w	r3, [r7, #688]	; 0x2b0

	motors[0] = &motor1; motors[1] = &motor2; motors[2] = &motor3; motors[3] = &motor4; motors[4] = &motor5; motors[5] = &motor6;
 80017ca:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 80017ce:	f507 729a 	add.w	r2, r7, #308	; 0x134
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 80017d8:	3304      	adds	r3, #4
 80017da:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 80017e4:	3308      	adds	r3, #8
 80017e6:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 80017f0:	330c      	adds	r3, #12
 80017f2:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 80017fc:	3310      	adds	r3, #16
 80017fe:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8001808:	3314      	adds	r3, #20
 800180a:	f107 0208 	add.w	r2, r7, #8
 800180e:	601a      	str	r2, [r3, #0]
	encs_div[0] = 1; encs_div[1] = 1; encs_div[2] = 1; encs_div[3] = 1; encs_div[4] = 1; encs_div[5] = 1;
 8001810:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8001814:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001818:	601a      	str	r2, [r3, #0]
 800181a:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 800181e:	3304      	adds	r3, #4
 8001820:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001824:	601a      	str	r2, [r3, #0]
 8001826:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 800182a:	3308      	adds	r3, #8
 800182c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001830:	601a      	str	r2, [r3, #0]
 8001832:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8001836:	330c      	adds	r3, #12
 8001838:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8001842:	3310      	adds	r3, #16
 8001844:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 800184e:	3314      	adds	r3, #20
 8001850:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001854:	601a      	str	r2, [r3, #0]
	Robot myRobot = Robot(enable, toggle, TS, 6, motors, encs_div);
 8001856:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 800185a:	f5a3 749c 	sub.w	r4, r3, #312	; 0x138
 800185e:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001862:	e021      	b.n	80018a8 <_Z12create_robotv+0x394>
 8001864:	40020c00 	.word	0x40020c00
 8001868:	40021800 	.word	0x40021800
 800186c:	200069b4 	.word	0x200069b4
 8001870:	20006968 	.word	0x20006968
 8001874:	20006a00 	.word	0x20006a00
 8001878:	20006a4c 	.word	0x20006a4c
 800187c:	20006a98 	.word	0x20006a98
 8001880:	20006ae4 	.word	0x20006ae4
 8001884:	20006b30 	.word	0x20006b30
 8001888:	3d8f5c29 	.word	0x3d8f5c29
 800188c:	3eae147b 	.word	0x3eae147b
 8001890:	43340000 	.word	0x43340000
 8001894:	46ea6000 	.word	0x46ea6000
 8001898:	3dcccccd 	.word	0x3dcccccd
 800189c:	42c80000 	.word	0x42c80000
 80018a0:	461c4000 	.word	0x461c4000
 80018a4:	3c23d70a 	.word	0x3c23d70a
 80018a8:	f5a3 762d 	sub.w	r6, r3, #692	; 0x2b4
 80018ac:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 80018b0:	9308      	str	r3, [sp, #32]
 80018b2:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 80018b6:	9307      	str	r3, [sp, #28]
 80018b8:	2306      	movs	r3, #6
 80018ba:	9306      	str	r3, [sp, #24]
 80018bc:	230a      	movs	r3, #10
 80018be:	9305      	str	r3, [sp, #20]
 80018c0:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80018c4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80018c8:	ad01      	add	r5, sp, #4
 80018ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018cc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80018d0:	68e3      	ldr	r3, [r4, #12]
 80018d2:	9300      	str	r3, [sp, #0]
 80018d4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80018d8:	6830      	ldr	r0, [r6, #0]
 80018da:	f7ff fa59 	bl	8000d90 <_ZN5RobotC1E10PinControlS0_mhPP5MotorPf>

	myRobot.setStatus(Robot::Status::Idle, true);
 80018de:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80018e2:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 80018e6:	2201      	movs	r2, #1
 80018e8:	2100      	movs	r1, #0
 80018ea:	6818      	ldr	r0, [r3, #0]
 80018ec:	f7ff fb26 	bl	8000f3c <_ZN5Robot9setStatusENS_6StatusEb>

	myRobot.setEncoderDivider(0, ENC_1_DIV);
 80018f0:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80018f4:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 80018f8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80018fc:	2100      	movs	r1, #0
 80018fe:	6818      	ldr	r0, [r3, #0]
 8001900:	f7ff fb4a 	bl	8000f98 <_ZN5Robot17setEncoderDividerEhf>
	myRobot.getPID(0)->reset();
 8001904:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001908:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 800190c:	2100      	movs	r1, #0
 800190e:	6818      	ldr	r0, [r3, #0]
 8001910:	f7ff fb57 	bl	8000fc2 <_ZN5Robot6getPIDEh>
 8001914:	4603      	mov	r3, r0
 8001916:	4618      	mov	r0, r3
 8001918:	f000 faf0 	bl	8001efc <_ZN3PID5resetEv>
	myRobot.getPID(0)->setup(PID_1_KP, PID_1_KI, PID_1_KD);
 800191c:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001920:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8001924:	2100      	movs	r1, #0
 8001926:	6818      	ldr	r0, [r3, #0]
 8001928:	f7ff fb4b 	bl	8000fc2 <_ZN5Robot6getPIDEh>
 800192c:	4603      	mov	r3, r0
 800192e:	ed1f 1a2a 	vldr	s2, [pc, #-168]	; 8001888 <_Z12create_robotv+0x374>
 8001932:	ed5f 0a2a 	vldr	s1, [pc, #-168]	; 800188c <_Z12create_robotv+0x378>
 8001936:	ed1f 0a2a 	vldr	s0, [pc, #-168]	; 8001890 <_Z12create_robotv+0x37c>
 800193a:	4618      	mov	r0, r3
 800193c:	f000 fac4 	bl	8001ec8 <_ZN3PID5setupEfff>
	myRobot.getPID(0)->init((float) TS/1000.0, PID_1_POLE, PID_1_SAT, true);
 8001940:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001944:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8001948:	2100      	movs	r1, #0
 800194a:	6818      	ldr	r0, [r3, #0]
 800194c:	f7ff fb39 	bl	8000fc2 <_ZN5Robot6getPIDEh>
 8001950:	4603      	mov	r3, r0
 8001952:	2101      	movs	r1, #1
 8001954:	ed1f 1a31 	vldr	s2, [pc, #-196]	; 8001894 <_Z12create_robotv+0x380>
 8001958:	ed5f 0a31 	vldr	s1, [pc, #-196]	; 8001898 <_Z12create_robotv+0x384>
 800195c:	ed1f 0a2f 	vldr	s0, [pc, #-188]	; 80018a4 <_Z12create_robotv+0x390>
 8001960:	4618      	mov	r0, r3
 8001962:	f000 fa41 	bl	8001de8 <_ZN3PID4initEfffb>

	myRobot.setEncoderDivider(1, ENC_2_DIV);
 8001966:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 800196a:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 800196e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001972:	2101      	movs	r1, #1
 8001974:	6818      	ldr	r0, [r3, #0]
 8001976:	f7ff fb0f 	bl	8000f98 <_ZN5Robot17setEncoderDividerEhf>
	myRobot.getPID(1)->reset();
 800197a:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 800197e:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8001982:	2101      	movs	r1, #1
 8001984:	6818      	ldr	r0, [r3, #0]
 8001986:	f7ff fb1c 	bl	8000fc2 <_ZN5Robot6getPIDEh>
 800198a:	4603      	mov	r3, r0
 800198c:	4618      	mov	r0, r3
 800198e:	f000 fab5 	bl	8001efc <_ZN3PID5resetEv>
	myRobot.getPID(1)->setup(PID_2_KP, PID_2_KI, PID_2_KD);
 8001992:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001996:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 800199a:	2101      	movs	r1, #1
 800199c:	6818      	ldr	r0, [r3, #0]
 800199e:	f7ff fb10 	bl	8000fc2 <_ZN5Robot6getPIDEh>
 80019a2:	4603      	mov	r3, r0
 80019a4:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80019a8:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80019ac:	ed1f 0a45 	vldr	s0, [pc, #-276]	; 800189c <_Z12create_robotv+0x388>
 80019b0:	4618      	mov	r0, r3
 80019b2:	f000 fa89 	bl	8001ec8 <_ZN3PID5setupEfff>
	myRobot.getPID(1)->init((float) TS/1000.0, PID_2_POLE, PID_2_SAT, true);
 80019b6:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80019ba:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 80019be:	2101      	movs	r1, #1
 80019c0:	6818      	ldr	r0, [r3, #0]
 80019c2:	f7ff fafe 	bl	8000fc2 <_ZN5Robot6getPIDEh>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2101      	movs	r1, #1
 80019ca:	ed1f 1a4b 	vldr	s2, [pc, #-300]	; 80018a0 <_Z12create_robotv+0x38c>
 80019ce:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 80019d2:	ed1f 0a4c 	vldr	s0, [pc, #-304]	; 80018a4 <_Z12create_robotv+0x390>
 80019d6:	4618      	mov	r0, r3
 80019d8:	f000 fa06 	bl	8001de8 <_ZN3PID4initEfffb>

	myRobot.setEncoderDivider(2, ENC_3_DIV);
 80019dc:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80019e0:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 80019e4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80019e8:	2102      	movs	r1, #2
 80019ea:	6818      	ldr	r0, [r3, #0]
 80019ec:	f7ff fad4 	bl	8000f98 <_ZN5Robot17setEncoderDividerEhf>
	myRobot.getPID(2)->reset();
 80019f0:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80019f4:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 80019f8:	2102      	movs	r1, #2
 80019fa:	6818      	ldr	r0, [r3, #0]
 80019fc:	f7ff fae1 	bl	8000fc2 <_ZN5Robot6getPIDEh>
 8001a00:	4603      	mov	r3, r0
 8001a02:	4618      	mov	r0, r3
 8001a04:	f000 fa7a 	bl	8001efc <_ZN3PID5resetEv>
	myRobot.getPID(2)->setup(PID_3_KP, PID_3_KI, PID_3_KD);
 8001a08:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001a0c:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8001a10:	2102      	movs	r1, #2
 8001a12:	6818      	ldr	r0, [r3, #0]
 8001a14:	f7ff fad5 	bl	8000fc2 <_ZN5Robot6getPIDEh>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001a1e:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001a22:	ed1f 0a62 	vldr	s0, [pc, #-392]	; 800189c <_Z12create_robotv+0x388>
 8001a26:	4618      	mov	r0, r3
 8001a28:	f000 fa4e 	bl	8001ec8 <_ZN3PID5setupEfff>
	myRobot.getPID(2)->init((float) TS/1000.0, PID_3_POLE, PID_3_SAT, true);
 8001a2c:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001a30:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8001a34:	2102      	movs	r1, #2
 8001a36:	6818      	ldr	r0, [r3, #0]
 8001a38:	f7ff fac3 	bl	8000fc2 <_ZN5Robot6getPIDEh>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2101      	movs	r1, #1
 8001a40:	ed1f 1a69 	vldr	s2, [pc, #-420]	; 80018a0 <_Z12create_robotv+0x38c>
 8001a44:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 8001a48:	ed1f 0a6a 	vldr	s0, [pc, #-424]	; 80018a4 <_Z12create_robotv+0x390>
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f000 f9cb 	bl	8001de8 <_ZN3PID4initEfffb>

	myRobot.setEncoderDivider(3, ENC_4_DIV);
 8001a52:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001a56:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8001a5a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001a5e:	2103      	movs	r1, #3
 8001a60:	6818      	ldr	r0, [r3, #0]
 8001a62:	f7ff fa99 	bl	8000f98 <_ZN5Robot17setEncoderDividerEhf>
	myRobot.getPID(3)->reset();
 8001a66:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001a6a:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8001a6e:	2103      	movs	r1, #3
 8001a70:	6818      	ldr	r0, [r3, #0]
 8001a72:	f7ff faa6 	bl	8000fc2 <_ZN5Robot6getPIDEh>
 8001a76:	4603      	mov	r3, r0
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f000 fa3f 	bl	8001efc <_ZN3PID5resetEv>
	myRobot.getPID(3)->setup(PID_4_KP, PID_4_KI, PID_4_KD);
 8001a7e:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001a82:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8001a86:	2103      	movs	r1, #3
 8001a88:	6818      	ldr	r0, [r3, #0]
 8001a8a:	f7ff fa9a 	bl	8000fc2 <_ZN5Robot6getPIDEh>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001a94:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001a98:	ed1f 0a80 	vldr	s0, [pc, #-512]	; 800189c <_Z12create_robotv+0x388>
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f000 fa13 	bl	8001ec8 <_ZN3PID5setupEfff>
	myRobot.getPID(3)->init((float) TS/1000.0, PID_4_POLE, PID_4_SAT, true);
 8001aa2:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001aa6:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8001aaa:	2103      	movs	r1, #3
 8001aac:	6818      	ldr	r0, [r3, #0]
 8001aae:	f7ff fa88 	bl	8000fc2 <_ZN5Robot6getPIDEh>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2101      	movs	r1, #1
 8001ab6:	ed1f 1a86 	vldr	s2, [pc, #-536]	; 80018a0 <_Z12create_robotv+0x38c>
 8001aba:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 8001abe:	ed1f 0a87 	vldr	s0, [pc, #-540]	; 80018a4 <_Z12create_robotv+0x390>
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f000 f990 	bl	8001de8 <_ZN3PID4initEfffb>

	myRobot.setEncoderDivider(4, ENC_5_DIV);
 8001ac8:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001acc:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8001ad0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001ad4:	2104      	movs	r1, #4
 8001ad6:	6818      	ldr	r0, [r3, #0]
 8001ad8:	f7ff fa5e 	bl	8000f98 <_ZN5Robot17setEncoderDividerEhf>
	myRobot.getPID(4)->reset();
 8001adc:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001ae0:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8001ae4:	2104      	movs	r1, #4
 8001ae6:	6818      	ldr	r0, [r3, #0]
 8001ae8:	f7ff fa6b 	bl	8000fc2 <_ZN5Robot6getPIDEh>
 8001aec:	4603      	mov	r3, r0
 8001aee:	4618      	mov	r0, r3
 8001af0:	f000 fa04 	bl	8001efc <_ZN3PID5resetEv>
	myRobot.getPID(4)->setup(PID_5_KP, PID_5_KI, PID_5_KD);
 8001af4:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001af8:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8001afc:	2104      	movs	r1, #4
 8001afe:	6818      	ldr	r0, [r3, #0]
 8001b00:	f7ff fa5f 	bl	8000fc2 <_ZN5Robot6getPIDEh>
 8001b04:	4603      	mov	r3, r0
 8001b06:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001b0a:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001b0e:	ed1f 0a9d 	vldr	s0, [pc, #-628]	; 800189c <_Z12create_robotv+0x388>
 8001b12:	4618      	mov	r0, r3
 8001b14:	f000 f9d8 	bl	8001ec8 <_ZN3PID5setupEfff>
	myRobot.getPID(4)->init((float) TS/1000.0, PID_5_POLE, PID_5_SAT, true);
 8001b18:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001b1c:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8001b20:	2104      	movs	r1, #4
 8001b22:	6818      	ldr	r0, [r3, #0]
 8001b24:	f7ff fa4d 	bl	8000fc2 <_ZN5Robot6getPIDEh>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2101      	movs	r1, #1
 8001b2c:	ed1f 1aa4 	vldr	s2, [pc, #-656]	; 80018a0 <_Z12create_robotv+0x38c>
 8001b30:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 8001b34:	ed1f 0aa5 	vldr	s0, [pc, #-660]	; 80018a4 <_Z12create_robotv+0x390>
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f000 f955 	bl	8001de8 <_ZN3PID4initEfffb>

	return myRobot;
 8001b3e:	bf00      	nop
}
 8001b40:	f107 0308 	add.w	r3, r7, #8
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff f831 	bl	8000bac <_ZN5MotorD1Ev>
 8001b4a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7ff f82c 	bl	8000bac <_ZN5MotorD1Ev>
 8001b54:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7ff f827 	bl	8000bac <_ZN5MotorD1Ev>
 8001b5e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7ff f822 	bl	8000bac <_ZN5MotorD1Ev>
 8001b68:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7ff f81d 	bl	8000bac <_ZN5MotorD1Ev>
 8001b72:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7ff f818 	bl	8000bac <_ZN5MotorD1Ev>
	return myRobot;
 8001b7c:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001b80:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8001b84:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 8001b88:	f5a2 722d 	sub.w	r2, r2, #692	; 0x2b4
 8001b8c:	6812      	ldr	r2, [r2, #0]
 8001b8e:	601a      	str	r2, [r3, #0]
}
 8001b90:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001b94:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8001b98:	6818      	ldr	r0, [r3, #0]
 8001b9a:	f507 772f 	add.w	r7, r7, #700	; 0x2bc
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ba2:	bf00      	nop

08001ba4 <_ZSt3maxIfERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	ed93 7a00 	vldr	s14, [r3]
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	edd3 7a00 	vldr	s15, [r3]
 8001bba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bc2:	d501      	bpl.n	8001bc8 <_ZSt3maxIfERKT_S2_S2_+0x24>
	return __b;
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	e000      	b.n	8001bca <_ZSt3maxIfERKT_S2_S2_+0x26>
      return __a;
 8001bc8:	687b      	ldr	r3, [r7, #4]
    }
 8001bca:	4618      	mov	r0, r3
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr

08001bd6 <_ZSt3minIfERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8001bd6:	b480      	push	{r7}
 8001bd8:	b083      	sub	sp, #12
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
 8001bde:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	ed93 7a00 	vldr	s14, [r3]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	edd3 7a00 	vldr	s15, [r3]
 8001bec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bf4:	d501      	bpl.n	8001bfa <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	e000      	b.n	8001bfc <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 8001bfa:	687b      	ldr	r3, [r7, #4]
    }
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <_Z41__static_initialization_and_destruction_0ii>:

Robot ScorBot = create_robot();
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	6039      	str	r1, [r7, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d108      	bne.n	8001c2a <_Z41__static_initialization_and_destruction_0ii+0x22>
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d103      	bne.n	8001c2a <_Z41__static_initialization_and_destruction_0ii+0x22>
 8001c22:	4b09      	ldr	r3, [pc, #36]	; (8001c48 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7ff fc75 	bl	8001514 <_Z12create_robotv>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d107      	bne.n	8001c40 <_Z41__static_initialization_and_destruction_0ii+0x38>
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d102      	bne.n	8001c40 <_Z41__static_initialization_and_destruction_0ii+0x38>
 8001c3a:	4803      	ldr	r0, [pc, #12]	; (8001c48 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001c3c:	f7ff f94a 	bl	8000ed4 <_ZN5RobotD1Ev>
 8001c40:	bf00      	nop
 8001c42:	3708      	adds	r7, #8
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	2000249c 	.word	0x2000249c

08001c4c <_GLOBAL__sub_I__ZN10PinControlC2Ev>:
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001c54:	2001      	movs	r0, #1
 8001c56:	f7ff ffd7 	bl	8001c08 <_Z41__static_initialization_and_destruction_0ii>
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <_GLOBAL__sub_D__ZN10PinControlC2Ev>:
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001c64:	2000      	movs	r0, #0
 8001c66:	f7ff ffcf 	bl	8001c08 <_Z41__static_initialization_and_destruction_0ii>
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	ed87 0a01 	vstr	s0, [r7, #4]
 8001c76:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c7a:	eef0 7ae7 	vabs.f32	s15, s15
 8001c7e:	eeb0 0a67 	vmov.f32	s0, s15
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <_ZSt3expf>:
  using ::exp;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  exp(float __x)
  { return __builtin_expf(__x); }
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	ed87 0a01 	vstr	s0, [r7, #4]
 8001c96:	ed97 0a01 	vldr	s0, [r7, #4]
 8001c9a:	f01b fb01 	bl	801d2a0 <expf>
 8001c9e:	eef0 7a40 	vmov.f32	s15, s0
 8001ca2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ca6:	3708      	adds	r7, #8
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <_ZN10Integrator4initEff>:
#include <cmath>

// Integrator

void Integrator::init(float ts, float sat)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	ed87 0a02 	vstr	s0, [r7, #8]
 8001cb8:	edc7 0a01 	vstr	s1, [r7, #4]
  this->ts = ts;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	68ba      	ldr	r2, [r7, #8]
 8001cc0:	601a      	str	r2, [r3, #0]
  this->sat = sat;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	605a      	str	r2, [r3, #4]
}
 8001cc8:	bf00      	nop
 8001cca:	3714      	adds	r7, #20
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <_ZN10Integrator5inputEf>:
{
  this->x = x;
}

void Integrator::input(float u)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	ed87 0a00 	vstr	s0, [r7]
  this->u = u;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	683a      	ldr	r2, [r7, #0]
 8001ce4:	60da      	str	r2, [r3, #12]
}
 8001ce6:	bf00      	nop
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr

08001cf2 <_ZN10Integrator4stepEv>:

void Integrator::step()
{
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b082      	sub	sp, #8
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
  x = x + ts*u;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	ed93 7a02 	vldr	s14, [r3, #8]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	edd3 6a00 	vldr	s13, [r3]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	edd3 7a03 	vldr	s15, [r3, #12]
 8001d0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	edc3 7a02 	vstr	s15, [r3, #8]
  apply_saturation();
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f000 f82e 	bl	8001d7c <_ZN10Integrator16apply_saturationEv>
}
 8001d20:	bf00      	nop
 8001d22:	3708      	adds	r7, #8
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <_ZN10Integrator6outputEv>:

float Integrator::output()
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  return x;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	ee07 3a90 	vmov	s15, r3
}
 8001d38:	eeb0 0a67 	vmov.f32	s0, s15
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr

08001d46 <_ZN10Integrator6evolveEf>:

float Integrator::evolve(float u)
{ 
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b084      	sub	sp, #16
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
 8001d4e:	ed87 0a00 	vstr	s0, [r7]
  float y;

  input(u);
 8001d52:	ed97 0a00 	vldr	s0, [r7]
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f7ff ffbc 	bl	8001cd4 <_ZN10Integrator5inputEf>
  y = output();
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f7ff ffe3 	bl	8001d28 <_ZN10Integrator6outputEv>
 8001d62:	ed87 0a03 	vstr	s0, [r7, #12]
  step();
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f7ff ffc3 	bl	8001cf2 <_ZN10Integrator4stepEv>

  return y;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	ee07 3a90 	vmov	s15, r3
}
 8001d72:	eeb0 0a67 	vmov.f32	s0, s15
 8001d76:	3710      	adds	r7, #16
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <_ZN10Integrator16apply_saturationEv>:

void Integrator::apply_saturation()
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
	x = x > +sat ? +sat : x;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	ed93 7a02 	vldr	s14, [r3, #8]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001d90:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d98:	dd02      	ble.n	8001da0 <_ZN10Integrator16apply_saturationEv+0x24>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	e001      	b.n	8001da4 <_ZN10Integrator16apply_saturationEv+0x28>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	6093      	str	r3, [r2, #8]
	x = x < -sat ? -sat : x;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	ed93 7a02 	vldr	s14, [r3, #8]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	edd3 7a01 	vldr	s15, [r3, #4]
 8001db4:	eef1 7a67 	vneg.f32	s15, s15
 8001db8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001dbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dc0:	d505      	bpl.n	8001dce <_ZN10Integrator16apply_saturationEv+0x52>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	edd3 7a01 	vldr	s15, [r3, #4]
 8001dc8:	eef1 7a67 	vneg.f32	s15, s15
 8001dcc:	e002      	b.n	8001dd4 <_ZN10Integrator16apply_saturationEv+0x58>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	edd3 7a02 	vldr	s15, [r3, #8]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001dda:	bf00      	nop
 8001ddc:	370c      	adds	r7, #12
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
	...

08001de8 <_ZN3PID4initEfffb>:


// PID

void PID::init(float ts, float tau, float sat, bool bumpless)
{
 8001de8:	b5b0      	push	{r4, r5, r7, lr}
 8001dea:	b09e      	sub	sp, #120	; 0x78
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6178      	str	r0, [r7, #20]
 8001df0:	ed87 0a04 	vstr	s0, [r7, #16]
 8001df4:	edc7 0a03 	vstr	s1, [r7, #12]
 8001df8:	ed87 1a02 	vstr	s2, [r7, #8]
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	71fb      	strb	r3, [r7, #7]
  this->ts = ts;
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	693a      	ldr	r2, [r7, #16]
 8001e04:	601a      	str	r2, [r3, #0]
  this->N = N;
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	685a      	ldr	r2, [r3, #4]
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	605a      	str	r2, [r3, #4]
  this->sat = sat;
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	68ba      	ldr	r2, [r7, #8]
 8001e12:	609a      	str	r2, [r3, #8]
  this->bumpless = bumpless;
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	79fa      	ldrb	r2, [r7, #7]
 8001e18:	731a      	strb	r2, [r3, #12]
  this->integrator = Integrator();
 8001e1a:	f107 0318 	add.w	r3, r7, #24
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7fe fd42 	bl	80008a8 <_ZN10IntegratorC1Ev>
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8001e2a:	f107 0318 	add.w	r3, r7, #24
 8001e2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e30:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001e34:	f107 0318 	add.w	r3, r7, #24
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7fe fd40 	bl	80008be <_ZN10IntegratorD1Ev>
  this->derivator = Filter();
 8001e3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7fe fd46 	bl	80008d4 <_ZN6FilterC1Ev>
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8001e4e:	f107 0528 	add.w	r5, r7, #40	; 0x28
 8001e52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e5a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001e5e:	e884 0003 	stmia.w	r4, {r0, r1}
  this->lowPassFilter = Filter();
 8001e62:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7fe fd34 	bl	80008d4 <_ZN6FilterC1Ev>
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	f103 0468 	add.w	r4, r3, #104	; 0x68
 8001e72:	f107 0550 	add.w	r5, r7, #80	; 0x50
 8001e76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e7e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001e82:	e884 0003 	stmia.w	r4, {r0, r1}

  integrator.init(ts, 200);
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	3330      	adds	r3, #48	; 0x30
 8001e8a:	eddf 0a0d 	vldr	s1, [pc, #52]	; 8001ec0 <_ZN3PID4initEfffb+0xd8>
 8001e8e:	ed97 0a04 	vldr	s0, [r7, #16]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7ff ff0a 	bl	8001cac <_ZN10Integrator4initEff>
  derivator.init(tau, 1, 0, 1, ts);			// Td*s/(1+s*Td/N)
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	3340      	adds	r3, #64	; 0x40
 8001e9c:	ed97 2a04 	vldr	s4, [r7, #16]
 8001ea0:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8001ea4:	ed9f 1a07 	vldr	s2, [pc, #28]	; 8001ec4 <_ZN3PID4initEfffb+0xdc>
 8001ea8:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001eac:	ed97 0a03 	vldr	s0, [r7, #12]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f000 f986 	bl	80021c2 <_ZN6Filter4initEfffff>
}
 8001eb6:	bf00      	nop
 8001eb8:	3778      	adds	r7, #120	; 0x78
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bdb0      	pop	{r4, r5, r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	43480000 	.word	0x43480000
 8001ec4:	00000000 	.word	0x00000000

08001ec8 <_ZN3PID5setupEfff>:

void PID::setup(float kp, float ki, float kd)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	ed87 0a02 	vstr	s0, [r7, #8]
 8001ed4:	edc7 0a01 	vstr	s1, [r7, #4]
 8001ed8:	ed87 1a00 	vstr	s2, [r7]
  this->kp = kp;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	68ba      	ldr	r2, [r7, #8]
 8001ee0:	611a      	str	r2, [r3, #16]
  this->ki = ki;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	615a      	str	r2, [r3, #20]
  this->kd = kd;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	683a      	ldr	r2, [r7, #0]
 8001eec:	619a      	str	r2, [r3, #24]
}
 8001eee:	bf00      	nop
 8001ef0:	3714      	adds	r7, #20
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
	...

08001efc <_ZN3PID5resetEv>:

void PID::reset()
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  reset(0.0, 0.0);
 8001f04:	eddf 0a05 	vldr	s1, [pc, #20]	; 8001f1c <_ZN3PID5resetEv+0x20>
 8001f08:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8001f1c <_ZN3PID5resetEv+0x20>
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f000 f807 	bl	8001f20 <_ZN3PID5resetEff>
}
 8001f12:	bf00      	nop
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	00000000 	.word	0x00000000

08001f20 <_ZN3PID5resetEff>:

void PID::reset(float u2, float u3)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b085      	sub	sp, #20
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	ed87 0a02 	vstr	s0, [r7, #8]
 8001f2c:	edc7 0a01 	vstr	s1, [r7, #4]
  this-> u2 = u2; //xi
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	68ba      	ldr	r2, [r7, #8]
 8001f34:	625a      	str	r2, [r3, #36]	; 0x24
  this-> u3 = u3; //xd
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f3c:	bf00      	nop
 8001f3e:	3714      	adds	r7, #20
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <_ZN3PID5inputEf>:

void PID::input(float e)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	ed87 0a00 	vstr	s0, [r7]
  this->e = e;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	683a      	ldr	r2, [r7, #0]
 8001f58:	61da      	str	r2, [r3, #28]
}
 8001f5a:	bf00      	nop
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr

08001f66 <_ZN3PID4stepEv>:

void PID::step()
{
 8001f66:	b580      	push	{r7, lr}
 8001f68:	ed2d 8b02 	vpush	{d8}
 8001f6c:	b082      	sub	sp, #8
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]
  bool sgn;

  if (abs(e) > 0) {
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	edd3 7a07 	vldr	s15, [r3, #28]
 8001f78:	eeb0 0a67 	vmov.f32	s0, s15
 8001f7c:	f7ff fe76 	bl	8001c6c <_ZSt3absf>
 8001f80:	eef0 7a40 	vmov.f32	s15, s0
 8001f84:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f8c:	bfcc      	ite	gt
 8001f8e:	2301      	movgt	r3, #1
 8001f90:	2300      	movle	r3, #0
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d04c      	beq.n	8002032 <_ZN3PID4stepEv+0xcc>
	  u1 = kp*e;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	ed93 7a04 	vldr	s14, [r3, #16]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	edd3 7a07 	vldr	s15, [r3, #28]
 8001fa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	edc3 7a08 	vstr	s15, [r3, #32]
  	  u2 = ki*integrator.evolve(e);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	ed93 8a05 	vldr	s16, [r3, #20]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	edd3 7a07 	vldr	s15, [r3, #28]
 8001fc0:	eeb0 0a67 	vmov.f32	s0, s15
 8001fc4:	4610      	mov	r0, r2
 8001fc6:	f7ff febe 	bl	8001d46 <_ZN10Integrator6evolveEf>
 8001fca:	eef0 7a40 	vmov.f32	s15, s0
 8001fce:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
  	  u3 = kd*derivator.evolve(e);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	ed93 8a06 	vldr	s16, [r3, #24]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	edd3 7a07 	vldr	s15, [r3, #28]
 8001fea:	eeb0 0a67 	vmov.f32	s0, s15
 8001fee:	4610      	mov	r0, r2
 8001ff0:	f000 f9c3 	bl	800237a <_ZN6Filter6evolveEf>
 8001ff4:	eef0 7a40 	vmov.f32	s15, s0
 8001ff8:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
  	  //sgn = (u1+u2+u3) >= 0;
  	  u = apply_saturation(u1 + u2 + u3 /*+ (2*sgn-1)*9000*/);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	ed93 7a08 	vldr	s14, [r3, #32]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800200e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002018:	ee77 7a27 	vadd.f32	s15, s14, s15
 800201c:	eeb0 0a67 	vmov.f32	s0, s15
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f000 f891 	bl	8002148 <_ZN3PID16apply_saturationEf>
 8002026:	eef0 7a40 	vmov.f32	s15, s0
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
  } else
	  u = 0;
}
 8002030:	e003      	b.n	800203a <_ZN3PID4stepEv+0xd4>
	  u = 0;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f04f 0200 	mov.w	r2, #0
 8002038:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800203a:	bf00      	nop
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	ecbd 8b02 	vpop	{d8}
 8002044:	bd80      	pop	{r7, pc}

08002046 <_ZN3PID6evolveEf>:
{
  return u;
}

float PID::evolve(float e)
{
 8002046:	b580      	push	{r7, lr}
 8002048:	b082      	sub	sp, #8
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
 800204e:	ed87 0a00 	vstr	s0, [r7]
  input(e);
 8002052:	ed97 0a00 	vldr	s0, [r7]
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f7ff ff76 	bl	8001f48 <_ZN3PID5inputEf>
  step();
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f7ff ff82 	bl	8001f66 <_ZN3PID4stepEv>
  //u = output();

  return u;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002066:	ee07 3a90 	vmov	s15, r3
}
 800206a:	eeb0 0a67 	vmov.f32	s0, s15
 800206e:	3708      	adds	r7, #8
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	0000      	movs	r0, r0
	...

08002078 <_ZN3PID4showEiR25racs_services__msg__Debug>:

void PID::show(int i, racs_services__msg__Debug &debug_msg)
{
 8002078:	b480      	push	{r7}
 800207a:	b085      	sub	sp, #20
 800207c:	af00      	add	r7, sp, #0
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	60b9      	str	r1, [r7, #8]
 8002082:	607a      	str	r2, [r7, #4]
	debug_msg.data[0] = (float) i;
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	ee07 3a90 	vmov	s15, r3
 800208a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	edc3 7a00 	vstr	s15, [r3]
	debug_msg.data[1] = u1  *100.0/32767.0;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	edd3 7a08 	vldr	s15, [r3, #32]
 800209a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800209e:	ed9f 6b26 	vldr	d6, [pc, #152]	; 8002138 <_ZN3PID4showEiR25racs_services__msg__Debug+0xc0>
 80020a2:	ee27 6b06 	vmul.f64	d6, d7, d6
 80020a6:	ed9f 5b26 	vldr	d5, [pc, #152]	; 8002140 <_ZN3PID4showEiR25racs_services__msg__Debug+0xc8>
 80020aa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80020ae:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	edc3 7a01 	vstr	s15, [r3, #4]
	debug_msg.data[2] = u2  *100.0/32767.0;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80020be:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80020c2:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 8002138 <_ZN3PID4showEiR25racs_services__msg__Debug+0xc0>
 80020c6:	ee27 6b06 	vmul.f64	d6, d7, d6
 80020ca:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 8002140 <_ZN3PID4showEiR25racs_services__msg__Debug+0xc8>
 80020ce:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80020d2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	edc3 7a02 	vstr	s15, [r3, #8]
	debug_msg.data[3] = u3  *100.0/32767.0;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80020e2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80020e6:	ed9f 6b14 	vldr	d6, [pc, #80]	; 8002138 <_ZN3PID4showEiR25racs_services__msg__Debug+0xc0>
 80020ea:	ee27 6b06 	vmul.f64	d6, d7, d6
 80020ee:	ed9f 5b14 	vldr	d5, [pc, #80]	; 8002140 <_ZN3PID4showEiR25racs_services__msg__Debug+0xc8>
 80020f2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80020f6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	edc3 7a03 	vstr	s15, [r3, #12]
	debug_msg.data[4] = u   *100.0/32767.0;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002106:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800210a:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8002138 <_ZN3PID4showEiR25racs_services__msg__Debug+0xc0>
 800210e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002112:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8002140 <_ZN3PID4showEiR25racs_services__msg__Debug+0xc8>
 8002116:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800211a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	edc3 7a04 	vstr	s15, [r3, #16]
	debug_msg.data[5] = e;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	69da      	ldr	r2, [r3, #28]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	615a      	str	r2, [r3, #20]
}
 800212c:	bf00      	nop
 800212e:	3714      	adds	r7, #20
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr
 8002138:	00000000 	.word	0x00000000
 800213c:	40590000 	.word	0x40590000
 8002140:	00000000 	.word	0x00000000
 8002144:	40dfffc0 	.word	0x40dfffc0

08002148 <_ZN3PID16apply_saturationEf>:

float PID::apply_saturation(float x)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	ed87 0a00 	vstr	s0, [r7]
  if(sat > 0)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	edd3 7a02 	vldr	s15, [r3, #8]
 800215a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800215e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002162:	dd24      	ble.n	80021ae <_ZN3PID16apply_saturationEf+0x66>
  {
    x = x > +sat ? +sat : x;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	edd3 7a02 	vldr	s15, [r3, #8]
 800216a:	ed97 7a00 	vldr	s14, [r7]
 800216e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002176:	dd02      	ble.n	800217e <_ZN3PID16apply_saturationEf+0x36>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	e000      	b.n	8002180 <_ZN3PID16apply_saturationEf+0x38>
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	603b      	str	r3, [r7, #0]
    x = x < -sat ? -sat : x;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	edd3 7a02 	vldr	s15, [r3, #8]
 8002188:	eef1 7a67 	vneg.f32	s15, s15
 800218c:	ed97 7a00 	vldr	s14, [r7]
 8002190:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002198:	d505      	bpl.n	80021a6 <_ZN3PID16apply_saturationEf+0x5e>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	edd3 7a02 	vldr	s15, [r3, #8]
 80021a0:	eef1 7a67 	vneg.f32	s15, s15
 80021a4:	e001      	b.n	80021aa <_ZN3PID16apply_saturationEf+0x62>
 80021a6:	edd7 7a00 	vldr	s15, [r7]
 80021aa:	edc7 7a00 	vstr	s15, [r7]
  }
  return x;
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	ee07 3a90 	vmov	s15, r3
}
 80021b4:	eeb0 0a67 	vmov.f32	s0, s15
 80021b8:	370c      	adds	r7, #12
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr

080021c2 <_ZN6Filter4initEfffff>:


// Filter

void Filter::init(float a1, float a0, float b1, float b0, float ts)
{
 80021c2:	b580      	push	{r7, lr}
 80021c4:	ed2d 8b02 	vpush	{d8}
 80021c8:	b086      	sub	sp, #24
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6178      	str	r0, [r7, #20]
 80021ce:	ed87 0a04 	vstr	s0, [r7, #16]
 80021d2:	edc7 0a03 	vstr	s1, [r7, #12]
 80021d6:	ed87 1a02 	vstr	s2, [r7, #8]
 80021da:	edc7 1a01 	vstr	s3, [r7, #4]
 80021de:	ed87 2a00 	vstr	s4, [r7]
  this->a1 = a1;
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	693a      	ldr	r2, [r7, #16]
 80021e6:	601a      	str	r2, [r3, #0]
  this->a0 = a0;
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	68fa      	ldr	r2, [r7, #12]
 80021ec:	605a      	str	r2, [r3, #4]
  this->b1 = b1;
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	68ba      	ldr	r2, [r7, #8]
 80021f2:	609a      	str	r2, [r3, #8]
  this->b0 = b0;
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	60da      	str	r2, [r3, #12]

  A = exp(-(a0/a1)*ts);
 80021fa:	edd7 6a03 	vldr	s13, [r7, #12]
 80021fe:	ed97 7a04 	vldr	s14, [r7, #16]
 8002202:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002206:	eeb1 7a67 	vneg.f32	s14, s15
 800220a:	edd7 7a00 	vldr	s15, [r7]
 800220e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002212:	eeb0 0a67 	vmov.f32	s0, s15
 8002216:	f7ff fd39 	bl	8001c8c <_ZSt3expf>
 800221a:	eef0 7a40 	vmov.f32	s15, s0
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	edc3 7a04 	vstr	s15, [r3, #16]
  if (a0*a1 != 0) {
 8002224:	ed97 7a03 	vldr	s14, [r7, #12]
 8002228:	edd7 7a04 	vldr	s15, [r7, #16]
 800222c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002230:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002238:	d031      	beq.n	800229e <_ZN6Filter4initEfffff+0xdc>
	  C = ((a0*b1-a1*b0)/(a0*a1))*(exp((-a0/a1)*ts)-1);
 800223a:	ed97 7a03 	vldr	s14, [r7, #12]
 800223e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002242:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002246:	edd7 6a04 	vldr	s13, [r7, #16]
 800224a:	edd7 7a01 	vldr	s15, [r7, #4]
 800224e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002252:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002256:	edd7 6a03 	vldr	s13, [r7, #12]
 800225a:	edd7 7a04 	vldr	s15, [r7, #16]
 800225e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002262:	ee87 8a27 	vdiv.f32	s16, s14, s15
 8002266:	edd7 7a03 	vldr	s15, [r7, #12]
 800226a:	eef1 6a67 	vneg.f32	s13, s15
 800226e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002272:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002276:	edd7 7a00 	vldr	s15, [r7]
 800227a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800227e:	eeb0 0a67 	vmov.f32	s0, s15
 8002282:	f7ff fd03 	bl	8001c8c <_ZSt3expf>
 8002286:	eef0 7a40 	vmov.f32	s15, s0
 800228a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800228e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002292:	ee68 7a27 	vmul.f32	s15, s16, s15
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	edc3 7a06 	vstr	s15, [r3, #24]
 800229c:	e003      	b.n	80022a6 <_ZN6Filter4initEfffff+0xe4>
  }
  else
  {
	  C = 0;
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	f04f 0200 	mov.w	r2, #0
 80022a4:	619a      	str	r2, [r3, #24]
  }
  B = 1;
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80022ac:	615a      	str	r2, [r3, #20]
  if (a1 != 0) {
 80022ae:	edd7 7a04 	vldr	s15, [r7, #16]
 80022b2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80022b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022ba:	d009      	beq.n	80022d0 <_ZN6Filter4initEfffff+0x10e>
	  D = b1/a1;
 80022bc:	edd7 6a02 	vldr	s13, [r7, #8]
 80022c0:	ed97 7a04 	vldr	s14, [r7, #16]
 80022c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	edc3 7a07 	vstr	s15, [r3, #28]

  /*A = -(-2*a1+a0*ts)/(2*a1+a0*ts);
  B = 1;
  C = ((2*b1+b0*ts)/(2*a1+a0*ts)) * ((-2*a1+a0*ts)/(2*a1+a0*ts) + (-2*b1+b0*ts)/(2*b1+b0*ts));
  D = ((2*b1+b0*ts)/(2*a1+a0*ts));*/
}
 80022ce:	e003      	b.n	80022d8 <_ZN6Filter4initEfffff+0x116>
	  D = 0;
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	f04f 0200 	mov.w	r2, #0
 80022d6:	61da      	str	r2, [r3, #28]
}
 80022d8:	bf00      	nop
 80022da:	3718      	adds	r7, #24
 80022dc:	46bd      	mov	sp, r7
 80022de:	ecbd 8b02 	vpop	{d8}
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <_ZN6Filter5inputEf>:
{
  this->x = x;
}

void Filter::input(float u)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	ed87 0a00 	vstr	s0, [r7]
  this->u = u;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	683a      	ldr	r2, [r7, #0]
 80022f4:	621a      	str	r2, [r3, #32]
}
 80022f6:	bf00      	nop
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr

08002302 <_ZN6Filter4stepEv>:

void Filter::step()
{
 8002302:	b480      	push	{r7}
 8002304:	b083      	sub	sp, #12
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
  x = A*x + B*u;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	ed93 7a04 	vldr	s14, [r3, #16]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002316:	ee27 7a27 	vmul.f32	s14, s14, s15
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	edd3 6a05 	vldr	s13, [r3, #20]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	edd3 7a08 	vldr	s15, [r3, #32]
 8002326:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800232a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
}
 8002334:	bf00      	nop
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <_ZN6Filter6outputEv>:

float Filter::output()
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  return C*x + D*u;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	ed93 7a06 	vldr	s14, [r3, #24]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002354:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	edd3 6a07 	vldr	s13, [r3, #28]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	edd3 7a08 	vldr	s15, [r3, #32]
 8002364:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002368:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800236c:	eeb0 0a67 	vmov.f32	s0, s15
 8002370:	370c      	adds	r7, #12
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr

0800237a <_ZN6Filter6evolveEf>:

float Filter::evolve(float u)
{
 800237a:	b580      	push	{r7, lr}
 800237c:	b084      	sub	sp, #16
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
 8002382:	ed87 0a00 	vstr	s0, [r7]
  float y;
  
  input(u);
 8002386:	ed97 0a00 	vldr	s0, [r7]
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f7ff ffaa 	bl	80022e4 <_ZN6Filter5inputEf>
  y = output();
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f7ff ffd5 	bl	8002340 <_ZN6Filter6outputEv>
 8002396:	ed87 0a03 	vstr	s0, [r7, #12]
  step();
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f7ff ffb1 	bl	8002302 <_ZN6Filter4stepEv>

  return y;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	ee07 3a90 	vmov	s15, r3
}
 80023a6:	eeb0 0a67 	vmov.f32	s0, s15
 80023aa:	3710      	adds	r7, #16
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b08a      	sub	sp, #40	; 0x28
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80023b8:	2300      	movs	r3, #0
 80023ba:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80023bc:	f008 fde4 	bl	800af88 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80023c0:	4b5b      	ldr	r3, [pc, #364]	; (8002530 <pvPortMallocMicroROS+0x180>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d101      	bne.n	80023cc <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 80023c8:	f000 f98a 	bl	80026e0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80023cc:	4b59      	ldr	r3, [pc, #356]	; (8002534 <pvPortMallocMicroROS+0x184>)
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	4013      	ands	r3, r2
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	f040 8092 	bne.w	80024fe <pvPortMallocMicroROS+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d01f      	beq.n	8002420 <pvPortMallocMicroROS+0x70>
			{
				xWantedSize += xHeapStructSize;
 80023e0:	2208      	movs	r2, #8
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4413      	add	r3, r2
 80023e6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f003 0307 	and.w	r3, r3, #7
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d016      	beq.n	8002420 <pvPortMallocMicroROS+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f023 0307 	bic.w	r3, r3, #7
 80023f8:	3308      	adds	r3, #8
 80023fa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f003 0307 	and.w	r3, r3, #7
 8002402:	2b00      	cmp	r3, #0
 8002404:	d00c      	beq.n	8002420 <pvPortMallocMicroROS+0x70>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800240a:	b672      	cpsid	i
 800240c:	f383 8811 	msr	BASEPRI, r3
 8002410:	f3bf 8f6f 	isb	sy
 8002414:	f3bf 8f4f 	dsb	sy
 8002418:	b662      	cpsie	i
 800241a:	617b      	str	r3, [r7, #20]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800241c:	bf00      	nop
 800241e:	e7fe      	b.n	800241e <pvPortMallocMicroROS+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d06b      	beq.n	80024fe <pvPortMallocMicroROS+0x14e>
 8002426:	4b44      	ldr	r3, [pc, #272]	; (8002538 <pvPortMallocMicroROS+0x188>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	429a      	cmp	r2, r3
 800242e:	d866      	bhi.n	80024fe <pvPortMallocMicroROS+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002430:	4b42      	ldr	r3, [pc, #264]	; (800253c <pvPortMallocMicroROS+0x18c>)
 8002432:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002434:	4b41      	ldr	r3, [pc, #260]	; (800253c <pvPortMallocMicroROS+0x18c>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800243a:	e004      	b.n	8002446 <pvPortMallocMicroROS+0x96>
				{
					pxPreviousBlock = pxBlock;
 800243c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243e:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	429a      	cmp	r2, r3
 800244e:	d903      	bls.n	8002458 <pvPortMallocMicroROS+0xa8>
 8002450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d1f1      	bne.n	800243c <pvPortMallocMicroROS+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002458:	4b35      	ldr	r3, [pc, #212]	; (8002530 <pvPortMallocMicroROS+0x180>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800245e:	429a      	cmp	r2, r3
 8002460:	d04d      	beq.n	80024fe <pvPortMallocMicroROS+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002462:	6a3b      	ldr	r3, [r7, #32]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2208      	movs	r2, #8
 8002468:	4413      	add	r3, r2
 800246a:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800246c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	6a3b      	ldr	r3, [r7, #32]
 8002472:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002476:	685a      	ldr	r2, [r3, #4]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	1ad2      	subs	r2, r2, r3
 800247c:	2308      	movs	r3, #8
 800247e:	005b      	lsls	r3, r3, #1
 8002480:	429a      	cmp	r2, r3
 8002482:	d921      	bls.n	80024c8 <pvPortMallocMicroROS+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002484:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4413      	add	r3, r2
 800248a:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	f003 0307 	and.w	r3, r3, #7
 8002492:	2b00      	cmp	r3, #0
 8002494:	d00c      	beq.n	80024b0 <pvPortMallocMicroROS+0x100>
	__asm volatile
 8002496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800249a:	b672      	cpsid	i
 800249c:	f383 8811 	msr	BASEPRI, r3
 80024a0:	f3bf 8f6f 	isb	sy
 80024a4:	f3bf 8f4f 	dsb	sy
 80024a8:	b662      	cpsie	i
 80024aa:	613b      	str	r3, [r7, #16]
}
 80024ac:	bf00      	nop
 80024ae:	e7fe      	b.n	80024ae <pvPortMallocMicroROS+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80024b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b2:	685a      	ldr	r2, [r3, #4]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	1ad2      	subs	r2, r2, r3
 80024b8:	69bb      	ldr	r3, [r7, #24]
 80024ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80024bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80024c2:	69b8      	ldr	r0, [r7, #24]
 80024c4:	f000 f96e 	bl	80027a4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80024c8:	4b1b      	ldr	r3, [pc, #108]	; (8002538 <pvPortMallocMicroROS+0x188>)
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	4a19      	ldr	r2, [pc, #100]	; (8002538 <pvPortMallocMicroROS+0x188>)
 80024d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80024d6:	4b18      	ldr	r3, [pc, #96]	; (8002538 <pvPortMallocMicroROS+0x188>)
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	4b19      	ldr	r3, [pc, #100]	; (8002540 <pvPortMallocMicroROS+0x190>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	429a      	cmp	r2, r3
 80024e0:	d203      	bcs.n	80024ea <pvPortMallocMicroROS+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80024e2:	4b15      	ldr	r3, [pc, #84]	; (8002538 <pvPortMallocMicroROS+0x188>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a16      	ldr	r2, [pc, #88]	; (8002540 <pvPortMallocMicroROS+0x190>)
 80024e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80024ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ec:	685a      	ldr	r2, [r3, #4]
 80024ee:	4b11      	ldr	r3, [pc, #68]	; (8002534 <pvPortMallocMicroROS+0x184>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	431a      	orrs	r2, r3
 80024f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80024f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fa:	2200      	movs	r2, #0
 80024fc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80024fe:	f008 fd51 	bl	800afa4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	f003 0307 	and.w	r3, r3, #7
 8002508:	2b00      	cmp	r3, #0
 800250a:	d00c      	beq.n	8002526 <pvPortMallocMicroROS+0x176>
	__asm volatile
 800250c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002510:	b672      	cpsid	i
 8002512:	f383 8811 	msr	BASEPRI, r3
 8002516:	f3bf 8f6f 	isb	sy
 800251a:	f3bf 8f4f 	dsb	sy
 800251e:	b662      	cpsie	i
 8002520:	60fb      	str	r3, [r7, #12]
}
 8002522:	bf00      	nop
 8002524:	e7fe      	b.n	8002524 <pvPortMallocMicroROS+0x174>
	return pvReturn;
 8002526:	69fb      	ldr	r3, [r7, #28]
}
 8002528:	4618      	mov	r0, r3
 800252a:	3728      	adds	r7, #40	; 0x28
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	200060e8 	.word	0x200060e8
 8002534:	200060f4 	.word	0x200060f4
 8002538:	200060ec 	.word	0x200060ec
 800253c:	200060e0 	.word	0x200060e0
 8002540:	200060f0 	.word	0x200060f0

08002544 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b086      	sub	sp, #24
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d04c      	beq.n	80025f0 <vPortFreeMicroROS+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002556:	2308      	movs	r3, #8
 8002558:	425b      	negs	r3, r3
 800255a:	697a      	ldr	r2, [r7, #20]
 800255c:	4413      	add	r3, r2
 800255e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	685a      	ldr	r2, [r3, #4]
 8002568:	4b23      	ldr	r3, [pc, #140]	; (80025f8 <vPortFreeMicroROS+0xb4>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4013      	ands	r3, r2
 800256e:	2b00      	cmp	r3, #0
 8002570:	d10c      	bne.n	800258c <vPortFreeMicroROS+0x48>
	__asm volatile
 8002572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002576:	b672      	cpsid	i
 8002578:	f383 8811 	msr	BASEPRI, r3
 800257c:	f3bf 8f6f 	isb	sy
 8002580:	f3bf 8f4f 	dsb	sy
 8002584:	b662      	cpsie	i
 8002586:	60fb      	str	r3, [r7, #12]
}
 8002588:	bf00      	nop
 800258a:	e7fe      	b.n	800258a <vPortFreeMicroROS+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d00c      	beq.n	80025ae <vPortFreeMicroROS+0x6a>
	__asm volatile
 8002594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002598:	b672      	cpsid	i
 800259a:	f383 8811 	msr	BASEPRI, r3
 800259e:	f3bf 8f6f 	isb	sy
 80025a2:	f3bf 8f4f 	dsb	sy
 80025a6:	b662      	cpsie	i
 80025a8:	60bb      	str	r3, [r7, #8]
}
 80025aa:	bf00      	nop
 80025ac:	e7fe      	b.n	80025ac <vPortFreeMicroROS+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	685a      	ldr	r2, [r3, #4]
 80025b2:	4b11      	ldr	r3, [pc, #68]	; (80025f8 <vPortFreeMicroROS+0xb4>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4013      	ands	r3, r2
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d019      	beq.n	80025f0 <vPortFreeMicroROS+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d115      	bne.n	80025f0 <vPortFreeMicroROS+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	685a      	ldr	r2, [r3, #4]
 80025c8:	4b0b      	ldr	r3, [pc, #44]	; (80025f8 <vPortFreeMicroROS+0xb4>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	43db      	mvns	r3, r3
 80025ce:	401a      	ands	r2, r3
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80025d4:	f008 fcd8 	bl	800af88 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	685a      	ldr	r2, [r3, #4]
 80025dc:	4b07      	ldr	r3, [pc, #28]	; (80025fc <vPortFreeMicroROS+0xb8>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4413      	add	r3, r2
 80025e2:	4a06      	ldr	r2, [pc, #24]	; (80025fc <vPortFreeMicroROS+0xb8>)
 80025e4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80025e6:	6938      	ldr	r0, [r7, #16]
 80025e8:	f000 f8dc 	bl	80027a4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80025ec:	f008 fcda 	bl	800afa4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80025f0:	bf00      	nop
 80025f2:	3718      	adds	r7, #24
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	200060f4 	.word	0x200060f4
 80025fc:	200060ec 	.word	0x200060ec

08002600 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8002600:	b480      	push	{r7}
 8002602:	b087      	sub	sp, #28
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 800260c:	2308      	movs	r3, #8
 800260e:	425b      	negs	r3, r3
 8002610:	697a      	ldr	r2, [r7, #20]
 8002612:	4413      	add	r3, r2
 8002614:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	685a      	ldr	r2, [r3, #4]
 800261e:	4b06      	ldr	r3, [pc, #24]	; (8002638 <getBlockSize+0x38>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	43db      	mvns	r3, r3
 8002624:	4013      	ands	r3, r2
 8002626:	60fb      	str	r3, [r7, #12]

	return count;
 8002628:	68fb      	ldr	r3, [r7, #12]
}
 800262a:	4618      	mov	r0, r3
 800262c:	371c      	adds	r7, #28
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	200060f4 	.word	0x200060f4

0800263c <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8002646:	f008 fc9f 	bl	800af88 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 800264a:	6838      	ldr	r0, [r7, #0]
 800264c:	f7ff feb0 	bl	80023b0 <pvPortMallocMicroROS>
 8002650:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d017      	beq.n	8002688 <pvPortReallocMicroROS+0x4c>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d014      	beq.n	8002688 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f7ff ffce 	bl	8002600 <getBlockSize>
 8002664:	4603      	mov	r3, r0
 8002666:	2208      	movs	r2, #8
 8002668:	1a9b      	subs	r3, r3, r2
 800266a:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 800266c:	683a      	ldr	r2, [r7, #0]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	429a      	cmp	r2, r3
 8002672:	d201      	bcs.n	8002678 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8002678:	68fa      	ldr	r2, [r7, #12]
 800267a:	6879      	ldr	r1, [r7, #4]
 800267c:	68b8      	ldr	r0, [r7, #8]
 800267e:	f01b fbba 	bl	801ddf6 <memcpy>

		vPortFreeMicroROS(pv);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f7ff ff5e 	bl	8002544 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8002688:	f008 fc8c 	bl	800afa4 <xTaskResumeAll>

	return newmem;
 800268c:	68bb      	ldr	r3, [r7, #8]
}
 800268e:	4618      	mov	r0, r3
 8002690:	3710      	adds	r7, #16
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}

08002696 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8002696:	b580      	push	{r7, lr}
 8002698:	b086      	sub	sp, #24
 800269a:	af00      	add	r7, sp, #0
 800269c:	6078      	str	r0, [r7, #4]
 800269e:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80026a0:	f008 fc72 	bl	800af88 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	fb02 f303 	mul.w	r3, r2, r3
 80026ac:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 80026ae:	6978      	ldr	r0, [r7, #20]
 80026b0:	f7ff fe7e 	bl	80023b0 <pvPortMallocMicroROS>
 80026b4:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	613b      	str	r3, [r7, #16]

  	while(count--)
 80026ba:	e004      	b.n	80026c6 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	1c5a      	adds	r2, r3, #1
 80026c0:	613a      	str	r2, [r7, #16]
 80026c2:	2200      	movs	r2, #0
 80026c4:	701a      	strb	r2, [r3, #0]
  	while(count--)
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	1e5a      	subs	r2, r3, #1
 80026ca:	617a      	str	r2, [r7, #20]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d1f5      	bne.n	80026bc <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 80026d0:	f008 fc68 	bl	800afa4 <xTaskResumeAll>
  	return mem;
 80026d4:	68fb      	ldr	r3, [r7, #12]
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3718      	adds	r7, #24
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
	...

080026e0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80026e0:	b480      	push	{r7}
 80026e2:	b085      	sub	sp, #20
 80026e4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80026e6:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80026ea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80026ec:	4b27      	ldr	r3, [pc, #156]	; (800278c <prvHeapInit+0xac>)
 80026ee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f003 0307 	and.w	r3, r3, #7
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d00c      	beq.n	8002714 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	3307      	adds	r3, #7
 80026fe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f023 0307 	bic.w	r3, r3, #7
 8002706:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002708:	68ba      	ldr	r2, [r7, #8]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	4a1f      	ldr	r2, [pc, #124]	; (800278c <prvHeapInit+0xac>)
 8002710:	4413      	add	r3, r2
 8002712:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002718:	4a1d      	ldr	r2, [pc, #116]	; (8002790 <prvHeapInit+0xb0>)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800271e:	4b1c      	ldr	r3, [pc, #112]	; (8002790 <prvHeapInit+0xb0>)
 8002720:	2200      	movs	r2, #0
 8002722:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	68ba      	ldr	r2, [r7, #8]
 8002728:	4413      	add	r3, r2
 800272a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800272c:	2208      	movs	r2, #8
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	1a9b      	subs	r3, r3, r2
 8002732:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f023 0307 	bic.w	r3, r3, #7
 800273a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	4a15      	ldr	r2, [pc, #84]	; (8002794 <prvHeapInit+0xb4>)
 8002740:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002742:	4b14      	ldr	r3, [pc, #80]	; (8002794 <prvHeapInit+0xb4>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2200      	movs	r2, #0
 8002748:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800274a:	4b12      	ldr	r3, [pc, #72]	; (8002794 <prvHeapInit+0xb4>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2200      	movs	r2, #0
 8002750:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	68fa      	ldr	r2, [r7, #12]
 800275a:	1ad2      	subs	r2, r2, r3
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002760:	4b0c      	ldr	r3, [pc, #48]	; (8002794 <prvHeapInit+0xb4>)
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	4a0a      	ldr	r2, [pc, #40]	; (8002798 <prvHeapInit+0xb8>)
 800276e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	4a09      	ldr	r2, [pc, #36]	; (800279c <prvHeapInit+0xbc>)
 8002776:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002778:	4b09      	ldr	r3, [pc, #36]	; (80027a0 <prvHeapInit+0xc0>)
 800277a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800277e:	601a      	str	r2, [r3, #0]
}
 8002780:	bf00      	nop
 8002782:	3714      	adds	r7, #20
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr
 800278c:	200024e0 	.word	0x200024e0
 8002790:	200060e0 	.word	0x200060e0
 8002794:	200060e8 	.word	0x200060e8
 8002798:	200060f0 	.word	0x200060f0
 800279c:	200060ec 	.word	0x200060ec
 80027a0:	200060f4 	.word	0x200060f4

080027a4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80027a4:	b480      	push	{r7}
 80027a6:	b085      	sub	sp, #20
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80027ac:	4b28      	ldr	r3, [pc, #160]	; (8002850 <prvInsertBlockIntoFreeList+0xac>)
 80027ae:	60fb      	str	r3, [r7, #12]
 80027b0:	e002      	b.n	80027b8 <prvInsertBlockIntoFreeList+0x14>
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	60fb      	str	r3, [r7, #12]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	429a      	cmp	r2, r3
 80027c0:	d8f7      	bhi.n	80027b2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	68ba      	ldr	r2, [r7, #8]
 80027cc:	4413      	add	r3, r2
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d108      	bne.n	80027e6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	685a      	ldr	r2, [r3, #4]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	441a      	add	r2, r3
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	68ba      	ldr	r2, [r7, #8]
 80027f0:	441a      	add	r2, r3
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d118      	bne.n	800282c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	4b15      	ldr	r3, [pc, #84]	; (8002854 <prvInsertBlockIntoFreeList+0xb0>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	429a      	cmp	r2, r3
 8002804:	d00d      	beq.n	8002822 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685a      	ldr	r2, [r3, #4]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	441a      	add	r2, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	601a      	str	r2, [r3, #0]
 8002820:	e008      	b.n	8002834 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002822:	4b0c      	ldr	r3, [pc, #48]	; (8002854 <prvInsertBlockIntoFreeList+0xb0>)
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	601a      	str	r2, [r3, #0]
 800282a:	e003      	b.n	8002834 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002834:	68fa      	ldr	r2, [r7, #12]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	429a      	cmp	r2, r3
 800283a:	d002      	beq.n	8002842 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002842:	bf00      	nop
 8002844:	3714      	adds	r7, #20
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	200060e0 	.word	0x200060e0
 8002854:	200060e8 	.word	0x200060e8

08002858 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800285e:	4b10      	ldr	r3, [pc, #64]	; (80028a0 <MX_DMA_Init+0x48>)
 8002860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002862:	4a0f      	ldr	r2, [pc, #60]	; (80028a0 <MX_DMA_Init+0x48>)
 8002864:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002868:	6313      	str	r3, [r2, #48]	; 0x30
 800286a:	4b0d      	ldr	r3, [pc, #52]	; (80028a0 <MX_DMA_Init+0x48>)
 800286c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002872:	607b      	str	r3, [r7, #4]
 8002874:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8002876:	2200      	movs	r2, #0
 8002878:	2105      	movs	r1, #5
 800287a:	200c      	movs	r0, #12
 800287c:	f001 ff06 	bl	800468c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002880:	200c      	movs	r0, #12
 8002882:	f001 ff1f 	bl	80046c4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8002886:	2200      	movs	r2, #0
 8002888:	2105      	movs	r1, #5
 800288a:	200e      	movs	r0, #14
 800288c:	f001 fefe 	bl	800468c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002890:	200e      	movs	r0, #14
 8002892:	f001 ff17 	bl	80046c4 <HAL_NVIC_EnableIRQ>

}
 8002896:	bf00      	nop
 8002898:	3708      	adds	r7, #8
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	40023800 	.word	0x40023800

080028a4 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80028b2:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 80028b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80028b8:	4904      	ldr	r1, [pc, #16]	; (80028cc <cubemx_transport_open+0x28>)
 80028ba:	68f8      	ldr	r0, [r7, #12]
 80028bc:	f005 fbf8 	bl	80080b0 <HAL_UART_Receive_DMA>
    return true;
 80028c0:	2301      	movs	r3, #1
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3710      	adds	r7, #16
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	200060f8 	.word	0x200060f8

080028d0 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80028de:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 80028e0:	68f8      	ldr	r0, [r7, #12]
 80028e2:	f005 fc29 	bl	8008138 <HAL_UART_DMAStop>
    return true;
 80028e6:	2301      	movs	r3, #1
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3710      	adds	r7, #16
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, const uint8_t * buf, size_t len, uint8_t * err){
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b086      	sub	sp, #24
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
 80028fc:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8002904:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800290a:	2b20      	cmp	r3, #32
 800290c:	d11a      	bne.n	8002944 <cubemx_transport_write+0x54>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	b29b      	uxth	r3, r3
 8002912:	461a      	mov	r2, r3
 8002914:	68b9      	ldr	r1, [r7, #8]
 8002916:	6978      	ldr	r0, [r7, #20]
 8002918:	f005 fb4e 	bl	8007fb8 <HAL_UART_Transmit_DMA>
 800291c:	4603      	mov	r3, r0
 800291e:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8002920:	e002      	b.n	8002928 <cubemx_transport_write+0x38>
            osDelay(1);
 8002922:	2001      	movs	r0, #1
 8002924:	f007 faa6 	bl	8009e74 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8002928:	7cfb      	ldrb	r3, [r7, #19]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d103      	bne.n	8002936 <cubemx_transport_write+0x46>
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002932:	2b20      	cmp	r3, #32
 8002934:	d1f5      	bne.n	8002922 <cubemx_transport_write+0x32>
        }

        return (ret == HAL_OK) ? len : 0;
 8002936:	7cfb      	ldrb	r3, [r7, #19]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d101      	bne.n	8002940 <cubemx_transport_write+0x50>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	e002      	b.n	8002946 <cubemx_transport_write+0x56>
 8002940:	2300      	movs	r3, #0
 8002942:	e000      	b.n	8002946 <cubemx_transport_write+0x56>
    }else{
        return 0;
 8002944:	2300      	movs	r3, #0
    }
}
 8002946:	4618      	mov	r0, r3
 8002948:	3718      	adds	r7, #24
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
	...

08002950 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8002950:	b580      	push	{r7, lr}
 8002952:	b088      	sub	sp, #32
 8002954:	af00      	add	r7, sp, #0
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	60b9      	str	r1, [r7, #8]
 800295a:	607a      	str	r2, [r7, #4]
 800295c:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8002964:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8002966:	2300      	movs	r3, #0
 8002968:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800296a:	b672      	cpsid	i
}
 800296c:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 800297a:	4a1c      	ldr	r2, [pc, #112]	; (80029ec <cubemx_transport_read+0x9c>)
 800297c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800297e:	b662      	cpsie	i
}
 8002980:	bf00      	nop
        __enable_irq();
        ms_used++;
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	3301      	adds	r3, #1
 8002986:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8002988:	2001      	movs	r0, #1
 800298a:	f007 fa73 	bl	8009e74 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 800298e:	4b18      	ldr	r3, [pc, #96]	; (80029f0 <cubemx_transport_read+0xa0>)
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	4b16      	ldr	r3, [pc, #88]	; (80029ec <cubemx_transport_read+0x9c>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	429a      	cmp	r2, r3
 8002998:	d103      	bne.n	80029a2 <cubemx_transport_read+0x52>
 800299a:	69fa      	ldr	r2, [r7, #28]
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	429a      	cmp	r2, r3
 80029a0:	dbe3      	blt.n	800296a <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 80029a2:	2300      	movs	r3, #0
 80029a4:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80029a6:	e011      	b.n	80029cc <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 80029a8:	4b11      	ldr	r3, [pc, #68]	; (80029f0 <cubemx_transport_read+0xa0>)
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	68b9      	ldr	r1, [r7, #8]
 80029ae:	69bb      	ldr	r3, [r7, #24]
 80029b0:	440b      	add	r3, r1
 80029b2:	4910      	ldr	r1, [pc, #64]	; (80029f4 <cubemx_transport_read+0xa4>)
 80029b4:	5c8a      	ldrb	r2, [r1, r2]
 80029b6:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 80029b8:	4b0d      	ldr	r3, [pc, #52]	; (80029f0 <cubemx_transport_read+0xa0>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	3301      	adds	r3, #1
 80029be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029c2:	4a0b      	ldr	r2, [pc, #44]	; (80029f0 <cubemx_transport_read+0xa0>)
 80029c4:	6013      	str	r3, [r2, #0]
        wrote++;
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	3301      	adds	r3, #1
 80029ca:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80029cc:	4b08      	ldr	r3, [pc, #32]	; (80029f0 <cubemx_transport_read+0xa0>)
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	4b06      	ldr	r3, [pc, #24]	; (80029ec <cubemx_transport_read+0x9c>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d003      	beq.n	80029e0 <cubemx_transport_read+0x90>
 80029d8:	69ba      	ldr	r2, [r7, #24]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	429a      	cmp	r2, r3
 80029de:	d3e3      	bcc.n	80029a8 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 80029e0:	69bb      	ldr	r3, [r7, #24]
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3720      	adds	r7, #32
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	200068fc 	.word	0x200068fc
 80029f0:	200068f8 	.word	0x200068f8
 80029f4:	200060f8 	.word	0x200060f8

080029f8 <_Z16MX_FREERTOS_Initv>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80029f8:	b580      	push	{r7, lr}
 80029fa:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80029fc:	4a04      	ldr	r2, [pc, #16]	; (8002a10 <_Z16MX_FREERTOS_Initv+0x18>)
 80029fe:	2100      	movs	r1, #0
 8002a00:	4804      	ldr	r0, [pc, #16]	; (8002a14 <_Z16MX_FREERTOS_Initv+0x1c>)
 8002a02:	f007 f991 	bl	8009d28 <osThreadNew>
 8002a06:	4603      	mov	r3, r0
 8002a08:	4a03      	ldr	r2, [pc, #12]	; (8002a18 <_Z16MX_FREERTOS_Initv+0x20>)
 8002a0a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8002a0c:	bf00      	nop
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	0801ec58 	.word	0x0801ec58
 8002a14:	08002a1d 	.word	0x08002a1d
 8002a18:	20006908 	.word	0x20006908

08002a1c <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002a1c:	b5b0      	push	{r4, r5, r7, lr}
 8002a1e:	f5ad 7d28 	sub.w	sp, sp, #672	; 0x2a0
 8002a22:	af02      	add	r7, sp, #8
 8002a24:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002a28:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002a2c:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartDefaultTask */
	rmw_uros_set_custom_transport(
 8002a2e:	4bda      	ldr	r3, [pc, #872]	; (8002d98 <_Z16StartDefaultTaskPv+0x37c>)
 8002a30:	9301      	str	r3, [sp, #4]
 8002a32:	4bda      	ldr	r3, [pc, #872]	; (8002d9c <_Z16StartDefaultTaskPv+0x380>)
 8002a34:	9300      	str	r3, [sp, #0]
 8002a36:	4bda      	ldr	r3, [pc, #872]	; (8002da0 <_Z16StartDefaultTaskPv+0x384>)
 8002a38:	4ada      	ldr	r2, [pc, #872]	; (8002da4 <_Z16StartDefaultTaskPv+0x388>)
 8002a3a:	49db      	ldr	r1, [pc, #876]	; (8002da8 <_Z16StartDefaultTaskPv+0x38c>)
 8002a3c:	2001      	movs	r0, #1
 8002a3e:	f00c f98b 	bl	800ed58 <rmw_uros_set_custom_transport>
		cubemx_transport_open,
		cubemx_transport_close,
		cubemx_transport_write,
		cubemx_transport_read);

	rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8002a42:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8002a46:	4618      	mov	r0, r3
 8002a48:	f00c f8b8 	bl	800ebbc <rcutils_get_zero_initialized_allocator>
	freeRTOS_allocator.allocate = microros_allocate;
 8002a4c:	4bd7      	ldr	r3, [pc, #860]	; (8002dac <_Z16StartDefaultTaskPv+0x390>)
 8002a4e:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
	freeRTOS_allocator.deallocate = microros_deallocate;
 8002a52:	4bd7      	ldr	r3, [pc, #860]	; (8002db0 <_Z16StartDefaultTaskPv+0x394>)
 8002a54:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
	freeRTOS_allocator.reallocate = microros_reallocate;
 8002a58:	4bd6      	ldr	r3, [pc, #856]	; (8002db4 <_Z16StartDefaultTaskPv+0x398>)
 8002a5a:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
	freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8002a5e:	4bd6      	ldr	r3, [pc, #856]	; (8002db8 <_Z16StartDefaultTaskPv+0x39c>)
 8002a60:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250

	if (!rcutils_set_default_allocator(&freeRTOS_allocator)) return;
 8002a64:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f00c f8b5 	bl	800ebd8 <rcutils_set_default_allocator>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	f083 0301 	eor.w	r3, r3, #1
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	f040 817b 	bne.w	8002d72 <_Z16StartDefaultTaskPv+0x356>

	rcl_ret_t rc;
	rcl_node_t node; // nodo;
	rcl_timer_t feedback_timer, robot_timer;
	const unsigned int feedback_timer_period = RCL_MS_TO_NS(10);
 8002a7c:	4bcf      	ldr	r3, [pc, #828]	; (8002dbc <_Z16StartDefaultTaskPv+0x3a0>)
 8002a7e:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
	const unsigned int robot_timer_period = RCL_MS_TO_NS(10);
 8002a82:	4bce      	ldr	r3, [pc, #824]	; (8002dbc <_Z16StartDefaultTaskPv+0x3a0>)
 8002a84:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
	//rcl_publisher_t feedback_publisher; // publisher
	rcl_subscription_t pwm_subscriber, encoder_subscriber;
	rcl_service_t setup_service, control_service; //servizi

	const char* feedback_publisher_name = "/feedback";	//publishers
 8002a88:	4bcd      	ldr	r3, [pc, #820]	; (8002dc0 <_Z16StartDefaultTaskPv+0x3a4>)
 8002a8a:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
	const char* debug_publisher_name = "/debug";
 8002a8e:	4bcd      	ldr	r3, [pc, #820]	; (8002dc4 <_Z16StartDefaultTaskPv+0x3a8>)
 8002a90:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
	const char* pwm_subscriber_name = "/pwm";			//subscribers
 8002a94:	4bcc      	ldr	r3, [pc, #816]	; (8002dc8 <_Z16StartDefaultTaskPv+0x3ac>)
 8002a96:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
	const char* encoder_subscriber_name = "/encoder";
 8002a9a:	4bcc      	ldr	r3, [pc, #816]	; (8002dcc <_Z16StartDefaultTaskPv+0x3b0>)
 8002a9c:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
	const char* setup_service_name = "/setup";			//servizi
 8002aa0:	4bcb      	ldr	r3, [pc, #812]	; (8002dd0 <_Z16StartDefaultTaskPv+0x3b4>)
 8002aa2:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
	const char* control_service_name = "/control";
 8002aa6:	4bcb      	ldr	r3, [pc, #812]	; (8002dd4 <_Z16StartDefaultTaskPv+0x3b8>)
 8002aa8:	f8c7 3278 	str.w	r3, [r7, #632]	; 0x278

	const rosidl_message_type_support_t* feedback_type_support =
		ROSIDL_GET_MSG_TYPE_SUPPORT(racs_services, msg, Feedback);
 8002aac:	f009 ff5c 	bl	800c968 <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Feedback>
 8002ab0:	f8c7 0274 	str.w	r0, [r7, #628]	; 0x274
	const rosidl_message_type_support_t * pwm_type_support =
		ROSIDL_GET_MSG_TYPE_SUPPORT(racs_services, msg, DirectAccess);
 8002ab4:	f009 ff28 	bl	800c908 <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__DirectAccess>
 8002ab8:	f8c7 0270 	str.w	r0, [r7, #624]	; 0x270
	const rosidl_message_type_support_t * encoder_type_support =
		ROSIDL_GET_MSG_TYPE_SUPPORT(racs_services, msg, Encoder);
 8002abc:	f009 ff3c 	bl	800c938 <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Encoder>
 8002ac0:	f8c7 026c 	str.w	r0, [r7, #620]	; 0x26c
	const rosidl_message_type_support_t * debug_type_support =
		ROSIDL_GET_MSG_TYPE_SUPPORT(racs_services, msg, Debug);
 8002ac4:	f009 ff08 	bl	800c8d8 <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Debug>
 8002ac8:	f8c7 0268 	str.w	r0, [r7, #616]	; 0x268
	const rosidl_service_type_support_t* setup_type_support =
		ROSIDL_GET_SRV_TYPE_SUPPORT(racs_services, srv, Setup);
 8002acc:	f009 ff64 	bl	800c998 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Setup>
 8002ad0:	f8c7 0264 	str.w	r0, [r7, #612]	; 0x264
	const rosidl_service_type_support_t* control_type_support =
		ROSIDL_GET_SRV_TYPE_SUPPORT(racs_services, srv, Control);
 8002ad4:	f009 feda 	bl	800c88c <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Control>
 8002ad8:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
	racs_services__srv__Setup_Request req_setup;
	racs_services__srv__Setup_Response res_setup;
	racs_services__srv__Control_Request req_control;
	racs_services__srv__Control_Response res_control;

	allocator = rcl_get_default_allocator();
 8002adc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f00c f897 	bl	800ec14 <rcutils_get_default_allocator>
 8002ae6:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002aea:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8002aee:	f507 74ee 	add.w	r4, r7, #476	; 0x1dc
 8002af2:	461d      	mov	r5, r3
 8002af4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002af6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002af8:	682b      	ldr	r3, [r5, #0]
 8002afa:	6023      	str	r3, [r4, #0]

	rc = rclc_support_init(&support, 0, NULL, &allocator);
 8002afc:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 8002b00:	f507 70f8 	add.w	r0, r7, #496	; 0x1f0
 8002b04:	2200      	movs	r2, #0
 8002b06:	2100      	movs	r1, #0
 8002b08:	f00b fee6 	bl	800e8d8 <rclc_support_init>
 8002b0c:	f8c7 025c 	str.w	r0, [r7, #604]	; 0x25c
	if (rc != RCL_RET_OK) return;
 8002b10:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	f040 812e 	bne.w	8002d76 <_Z16StartDefaultTaskPv+0x35a>

	rc = rclc_timer_init_default(&feedback_timer, &support, feedback_timer_period, feedback_timer_callback);
 8002b1a:	f507 71f8 	add.w	r1, r7, #496	; 0x1f0
 8002b1e:	f507 700e 	add.w	r0, r7, #568	; 0x238
 8002b22:	4bad      	ldr	r3, [pc, #692]	; (8002dd8 <_Z16StartDefaultTaskPv+0x3bc>)
 8002b24:	9300      	str	r3, [sp, #0]
 8002b26:	4aa5      	ldr	r2, [pc, #660]	; (8002dbc <_Z16StartDefaultTaskPv+0x3a0>)
 8002b28:	f04f 0300 	mov.w	r3, #0
 8002b2c:	f00c f80e 	bl	800eb4c <rclc_timer_init_default>
 8002b30:	f8c7 025c 	str.w	r0, [r7, #604]	; 0x25c
	if (rc != RCL_RET_OK) return;
 8002b34:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	f040 811e 	bne.w	8002d7a <_Z16StartDefaultTaskPv+0x35e>

	rc = rclc_timer_init_default(&robot_timer, &support, robot_timer_period, robot_timer_callback);
 8002b3e:	f507 71f8 	add.w	r1, r7, #496	; 0x1f0
 8002b42:	f507 700d 	add.w	r0, r7, #564	; 0x234
 8002b46:	4ba5      	ldr	r3, [pc, #660]	; (8002ddc <_Z16StartDefaultTaskPv+0x3c0>)
 8002b48:	9300      	str	r3, [sp, #0]
 8002b4a:	4a9c      	ldr	r2, [pc, #624]	; (8002dbc <_Z16StartDefaultTaskPv+0x3a0>)
 8002b4c:	f04f 0300 	mov.w	r3, #0
 8002b50:	f00b fffc 	bl	800eb4c <rclc_timer_init_default>
 8002b54:	f8c7 025c 	str.w	r0, [r7, #604]	; 0x25c
	if (rc != RCL_RET_OK) return;
 8002b58:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	f040 810e 	bne.w	8002d7e <_Z16StartDefaultTaskPv+0x362>

	rc = rclc_node_init_default(&node, "STM32_node", "", &support);
 8002b62:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8002b66:	f507 700f 	add.w	r0, r7, #572	; 0x23c
 8002b6a:	4a9d      	ldr	r2, [pc, #628]	; (8002de0 <_Z16StartDefaultTaskPv+0x3c4>)
 8002b6c:	499d      	ldr	r1, [pc, #628]	; (8002de4 <_Z16StartDefaultTaskPv+0x3c8>)
 8002b6e:	f00b fefd 	bl	800e96c <rclc_node_init_default>
 8002b72:	f8c7 025c 	str.w	r0, [r7, #604]	; 0x25c
	if (rc != RCL_RET_OK) return;
 8002b76:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	f040 8101 	bne.w	8002d82 <_Z16StartDefaultTaskPv+0x366>

	rc = rclc_publisher_init_best_effort(
 8002b80:	f507 710f 	add.w	r1, r7, #572	; 0x23c
 8002b84:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8002b88:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 8002b8c:	4896      	ldr	r0, [pc, #600]	; (8002de8 <_Z16StartDefaultTaskPv+0x3cc>)
 8002b8e:	f00b ff2f 	bl	800e9f0 <rclc_publisher_init_best_effort>
 8002b92:	f8c7 025c 	str.w	r0, [r7, #604]	; 0x25c
	  &feedback_publisher, &node, feedback_type_support, feedback_publisher_name);
	if (rc != RCL_RET_OK) return;
 8002b96:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	f040 80f3 	bne.w	8002d86 <_Z16StartDefaultTaskPv+0x36a>

	rc = rclc_publisher_init_best_effort(
 8002ba0:	f507 710f 	add.w	r1, r7, #572	; 0x23c
 8002ba4:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 8002ba8:	f8d7 2268 	ldr.w	r2, [r7, #616]	; 0x268
 8002bac:	488f      	ldr	r0, [pc, #572]	; (8002dec <_Z16StartDefaultTaskPv+0x3d0>)
 8002bae:	f00b ff1f 	bl	800e9f0 <rclc_publisher_init_best_effort>
 8002bb2:	f8c7 025c 	str.w	r0, [r7, #604]	; 0x25c
	  &debug_publisher, &node, debug_type_support, debug_publisher_name);
	if (rc != RCL_RET_OK) return;
 8002bb6:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	f040 80e5 	bne.w	8002d8a <_Z16StartDefaultTaskPv+0x36e>

	rc = rclc_subscription_init_best_effort(
 8002bc0:	f507 710f 	add.w	r1, r7, #572	; 0x23c
 8002bc4:	f507 700c 	add.w	r0, r7, #560	; 0x230
 8002bc8:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8002bcc:	f8d7 2270 	ldr.w	r2, [r7, #624]	; 0x270
 8002bd0:	f00b ff82 	bl	800ead8 <rclc_subscription_init_best_effort>
 8002bd4:	f8c7 025c 	str.w	r0, [r7, #604]	; 0x25c
	  &pwm_subscriber, &node, pwm_type_support, pwm_subscriber_name);
	if (rc != RCL_RET_OK) return;
 8002bd8:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	f040 80d6 	bne.w	8002d8e <_Z16StartDefaultTaskPv+0x372>

	rc = rclc_subscription_init_best_effort(
 8002be2:	f507 710f 	add.w	r1, r7, #572	; 0x23c
 8002be6:	f507 700b 	add.w	r0, r7, #556	; 0x22c
 8002bea:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 8002bee:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 8002bf2:	f00b ff71 	bl	800ead8 <rclc_subscription_init_best_effort>
 8002bf6:	f8c7 025c 	str.w	r0, [r7, #604]	; 0x25c
	  &encoder_subscriber, &node, encoder_type_support, encoder_subscriber_name);
	if (rc != RCL_RET_OK) return;
 8002bfa:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	f040 80c7 	bne.w	8002d92 <_Z16StartDefaultTaskPv+0x376>

	rc = rclc_service_init_default(
 8002c04:	f507 710f 	add.w	r1, r7, #572	; 0x23c
 8002c08:	f507 700a 	add.w	r0, r7, #552	; 0x228
 8002c0c:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8002c10:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 8002c14:	f00b ff26 	bl	800ea64 <rclc_service_init_default>
 8002c18:	f8c7 025c 	str.w	r0, [r7, #604]	; 0x25c
		&setup_service, &node, setup_type_support, setup_service_name);
	if (rc != RCL_RET_OK) return;
 8002c1c:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	f040 80ed 	bne.w	8002e00 <_Z16StartDefaultTaskPv+0x3e4>

	rc = rclc_service_init_default(
 8002c26:	f507 710f 	add.w	r1, r7, #572	; 0x23c
 8002c2a:	f507 7009 	add.w	r0, r7, #548	; 0x224
 8002c2e:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 8002c32:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 8002c36:	f00b ff15 	bl	800ea64 <rclc_service_init_default>
 8002c3a:	f8c7 025c 	str.w	r0, [r7, #604]	; 0x25c
		&control_service, &node, control_type_support, control_service_name);
	if (rc != RCL_RET_OK) return;
 8002c3e:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	f040 80de 	bne.w	8002e04 <_Z16StartDefaultTaskPv+0x3e8>

	rclc_executor_t executor;
	executor = rclc_executor_get_zero_initialized_executor();
 8002c48:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002c4c:	f5a3 74d0 	sub.w	r4, r3, #416	; 0x1a0
 8002c50:	463b      	mov	r3, r7
 8002c52:	4618      	mov	r0, r3
 8002c54:	f00b fadc 	bl	800e210 <rclc_executor_get_zero_initialized_executor>
 8002c58:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002c5c:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 8002c60:	4620      	mov	r0, r4
 8002c62:	4619      	mov	r1, r3
 8002c64:	2390      	movs	r3, #144	; 0x90
 8002c66:	461a      	mov	r2, r3
 8002c68:	f01b f8c5 	bl	801ddf6 <memcpy>
	unsigned int num_handles = 6; //2 servizi, 2 timer e 2 subs
 8002c6c:	2306      	movs	r3, #6
 8002c6e:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
	rclc_executor_init(&executor, &support.context, num_handles, &allocator);
 8002c72:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 8002c76:	f507 71f8 	add.w	r1, r7, #496	; 0x1f0
 8002c7a:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 8002c7e:	f8d7 2258 	ldr.w	r2, [r7, #600]	; 0x258
 8002c82:	f00b fad1 	bl	800e228 <rclc_executor_init>

	rc = rclc_executor_add_timer(&executor, &feedback_timer);
 8002c86:	f507 720e 	add.w	r2, r7, #568	; 0x238
 8002c8a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002c8e:	4611      	mov	r1, r2
 8002c90:	4618      	mov	r0, r3
 8002c92:	f00b fb83 	bl	800e39c <rclc_executor_add_timer>
 8002c96:	f8c7 025c 	str.w	r0, [r7, #604]	; 0x25c
	if (rc != RCL_RET_OK) return;
 8002c9a:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	f040 80b2 	bne.w	8002e08 <_Z16StartDefaultTaskPv+0x3ec>

	rc = rclc_executor_add_timer(&executor, &robot_timer);
 8002ca4:	f507 720d 	add.w	r2, r7, #564	; 0x234
 8002ca8:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002cac:	4611      	mov	r1, r2
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f00b fb74 	bl	800e39c <rclc_executor_add_timer>
 8002cb4:	f8c7 025c 	str.w	r0, [r7, #604]	; 0x25c
	if (rc != RCL_RET_OK) return;
 8002cb8:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	f040 80a5 	bne.w	8002e0c <_Z16StartDefaultTaskPv+0x3f0>

	rc = rclc_executor_add_subscription(
 8002cc2:	f507 72e6 	add.w	r2, r7, #460	; 0x1cc
 8002cc6:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8002cca:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 8002cce:	2300      	movs	r3, #0
 8002cd0:	9300      	str	r3, [sp, #0]
 8002cd2:	4b47      	ldr	r3, [pc, #284]	; (8002df0 <_Z16StartDefaultTaskPv+0x3d4>)
 8002cd4:	f00b fb24 	bl	800e320 <rclc_executor_add_subscription>
 8002cd8:	f8c7 025c 	str.w	r0, [r7, #604]	; 0x25c
	  &executor, &pwm_subscriber, &pwm_msg,
	  &pwm_callback, ON_NEW_DATA);
	if (rc != RCL_RET_OK) return;
 8002cdc:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	f040 8095 	bne.w	8002e10 <_Z16StartDefaultTaskPv+0x3f4>

	rc = rclc_executor_add_subscription(
 8002ce6:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
 8002cea:	f507 710b 	add.w	r1, r7, #556	; 0x22c
 8002cee:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	9300      	str	r3, [sp, #0]
 8002cf6:	4b3f      	ldr	r3, [pc, #252]	; (8002df4 <_Z16StartDefaultTaskPv+0x3d8>)
 8002cf8:	f00b fb12 	bl	800e320 <rclc_executor_add_subscription>
 8002cfc:	f8c7 025c 	str.w	r0, [r7, #604]	; 0x25c
	  &executor, &encoder_subscriber, &encoder_msg,
	  &encoder_callback, ON_NEW_DATA);
	if (rc != RCL_RET_OK) return;
 8002d00:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	f040 8085 	bne.w	8002e14 <_Z16StartDefaultTaskPv+0x3f8>

	rc = rclc_executor_add_service(
 8002d0a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002d0e:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8002d12:	f507 710a 	add.w	r1, r7, #552	; 0x228
 8002d16:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 8002d1a:	4c37      	ldr	r4, [pc, #220]	; (8002df8 <_Z16StartDefaultTaskPv+0x3dc>)
 8002d1c:	9400      	str	r4, [sp, #0]
 8002d1e:	f00b fb6b 	bl	800e3f8 <rclc_executor_add_service>
 8002d22:	f8c7 025c 	str.w	r0, [r7, #604]	; 0x25c
		&executor, &setup_service, &req_setup,
		&res_setup, setup_callback);
	if (rc != RCL_RET_OK) return;
 8002d26:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d174      	bne.n	8002e18 <_Z16StartDefaultTaskPv+0x3fc>

	rc = rclc_executor_add_service(
 8002d2e:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8002d32:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 8002d36:	f507 7109 	add.w	r1, r7, #548	; 0x224
 8002d3a:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 8002d3e:	4c2f      	ldr	r4, [pc, #188]	; (8002dfc <_Z16StartDefaultTaskPv+0x3e0>)
 8002d40:	9400      	str	r4, [sp, #0]
 8002d42:	f00b fb59 	bl	800e3f8 <rclc_executor_add_service>
 8002d46:	f8c7 025c 	str.w	r0, [r7, #604]	; 0x25c
		&executor, &control_service, &req_control,
		&res_control, control_callback);
	if (rc != RCL_RET_OK) return;
 8002d4a:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d164      	bne.n	8002e1c <_Z16StartDefaultTaskPv+0x400>

	Robot ScorBot = create_robot();
 8002d52:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002d56:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7fe fbda 	bl	8001514 <_Z12create_robotv>

	rclc_executor_spin(&executor);
 8002d60:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002d64:	4618      	mov	r0, r3
 8002d66:	f00b fd77 	bl	800e858 <rclc_executor_spin>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002d6a:	2001      	movs	r0, #1
 8002d6c:	f007 f882 	bl	8009e74 <osDelay>
 8002d70:	e7fb      	b.n	8002d6a <_Z16StartDefaultTaskPv+0x34e>
	if (!rcutils_set_default_allocator(&freeRTOS_allocator)) return;
 8002d72:	bf00      	nop
 8002d74:	e053      	b.n	8002e1e <_Z16StartDefaultTaskPv+0x402>
	if (rc != RCL_RET_OK) return;
 8002d76:	bf00      	nop
 8002d78:	e051      	b.n	8002e1e <_Z16StartDefaultTaskPv+0x402>
	if (rc != RCL_RET_OK) return;
 8002d7a:	bf00      	nop
 8002d7c:	e04f      	b.n	8002e1e <_Z16StartDefaultTaskPv+0x402>
	if (rc != RCL_RET_OK) return;
 8002d7e:	bf00      	nop
 8002d80:	e04d      	b.n	8002e1e <_Z16StartDefaultTaskPv+0x402>
	if (rc != RCL_RET_OK) return;
 8002d82:	bf00      	nop
 8002d84:	e04b      	b.n	8002e1e <_Z16StartDefaultTaskPv+0x402>
	if (rc != RCL_RET_OK) return;
 8002d86:	bf00      	nop
 8002d88:	e049      	b.n	8002e1e <_Z16StartDefaultTaskPv+0x402>
	if (rc != RCL_RET_OK) return;
 8002d8a:	bf00      	nop
 8002d8c:	e047      	b.n	8002e1e <_Z16StartDefaultTaskPv+0x402>
	if (rc != RCL_RET_OK) return;
 8002d8e:	bf00      	nop
 8002d90:	e045      	b.n	8002e1e <_Z16StartDefaultTaskPv+0x402>
	if (rc != RCL_RET_OK) return;
 8002d92:	bf00      	nop
 8002d94:	e043      	b.n	8002e1e <_Z16StartDefaultTaskPv+0x402>
 8002d96:	bf00      	nop
 8002d98:	08002951 	.word	0x08002951
 8002d9c:	080028f1 	.word	0x080028f1
 8002da0:	080028d1 	.word	0x080028d1
 8002da4:	080028a5 	.word	0x080028a5
 8002da8:	20006b7c 	.word	0x20006b7c
 8002dac:	08003149 	.word	0x08003149
 8002db0:	0800318d 	.word	0x0800318d
 8002db4:	080031c5 	.word	0x080031c5
 8002db8:	08003231 	.word	0x08003231
 8002dbc:	00989680 	.word	0x00989680
 8002dc0:	0801ebd4 	.word	0x0801ebd4
 8002dc4:	0801ebe0 	.word	0x0801ebe0
 8002dc8:	0801ebe8 	.word	0x0801ebe8
 8002dcc:	0801ebf0 	.word	0x0801ebf0
 8002dd0:	0801ebfc 	.word	0x0801ebfc
 8002dd4:	0801ec04 	.word	0x0801ec04
 8002dd8:	0800078d 	.word	0x0800078d
 8002ddc:	08000885 	.word	0x08000885
 8002de0:	0801ec10 	.word	0x0801ec10
 8002de4:	0801ec14 	.word	0x0801ec14
 8002de8:	20006900 	.word	0x20006900
 8002dec:	20006904 	.word	0x20006904
 8002df0:	080006d9 	.word	0x080006d9
 8002df4:	080006ad 	.word	0x080006ad
 8002df8:	0800075d 	.word	0x0800075d
 8002dfc:	0800072d 	.word	0x0800072d
	if (rc != RCL_RET_OK) return;
 8002e00:	bf00      	nop
 8002e02:	e00c      	b.n	8002e1e <_Z16StartDefaultTaskPv+0x402>
	if (rc != RCL_RET_OK) return;
 8002e04:	bf00      	nop
 8002e06:	e00a      	b.n	8002e1e <_Z16StartDefaultTaskPv+0x402>
	if (rc != RCL_RET_OK) return;
 8002e08:	bf00      	nop
 8002e0a:	e008      	b.n	8002e1e <_Z16StartDefaultTaskPv+0x402>
	if (rc != RCL_RET_OK) return;
 8002e0c:	bf00      	nop
 8002e0e:	e006      	b.n	8002e1e <_Z16StartDefaultTaskPv+0x402>
	if (rc != RCL_RET_OK) return;
 8002e10:	bf00      	nop
 8002e12:	e004      	b.n	8002e1e <_Z16StartDefaultTaskPv+0x402>
	if (rc != RCL_RET_OK) return;
 8002e14:	bf00      	nop
 8002e16:	e002      	b.n	8002e1e <_Z16StartDefaultTaskPv+0x402>
	if (rc != RCL_RET_OK) return;
 8002e18:	bf00      	nop
 8002e1a:	e000      	b.n	8002e1e <_Z16StartDefaultTaskPv+0x402>
	if (rc != RCL_RET_OK) return;
 8002e1c:	bf00      	nop
  }
  /* USER CODE END StartDefaultTask */
}
 8002e1e:	f507 7726 	add.w	r7, r7, #664	; 0x298
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bdb0      	pop	{r4, r5, r7, pc}
 8002e26:	bf00      	nop

08002e28 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b08c      	sub	sp, #48	; 0x30
 8002e2c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e2e:	f107 031c 	add.w	r3, r7, #28
 8002e32:	2200      	movs	r2, #0
 8002e34:	601a      	str	r2, [r3, #0]
 8002e36:	605a      	str	r2, [r3, #4]
 8002e38:	609a      	str	r2, [r3, #8]
 8002e3a:	60da      	str	r2, [r3, #12]
 8002e3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e3e:	4b58      	ldr	r3, [pc, #352]	; (8002fa0 <MX_GPIO_Init+0x178>)
 8002e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e42:	4a57      	ldr	r2, [pc, #348]	; (8002fa0 <MX_GPIO_Init+0x178>)
 8002e44:	f043 0310 	orr.w	r3, r3, #16
 8002e48:	6313      	str	r3, [r2, #48]	; 0x30
 8002e4a:	4b55      	ldr	r3, [pc, #340]	; (8002fa0 <MX_GPIO_Init+0x178>)
 8002e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4e:	f003 0310 	and.w	r3, r3, #16
 8002e52:	61bb      	str	r3, [r7, #24]
 8002e54:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e56:	4b52      	ldr	r3, [pc, #328]	; (8002fa0 <MX_GPIO_Init+0x178>)
 8002e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5a:	4a51      	ldr	r2, [pc, #324]	; (8002fa0 <MX_GPIO_Init+0x178>)
 8002e5c:	f043 0304 	orr.w	r3, r3, #4
 8002e60:	6313      	str	r3, [r2, #48]	; 0x30
 8002e62:	4b4f      	ldr	r3, [pc, #316]	; (8002fa0 <MX_GPIO_Init+0x178>)
 8002e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e66:	f003 0304 	and.w	r3, r3, #4
 8002e6a:	617b      	str	r3, [r7, #20]
 8002e6c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002e6e:	4b4c      	ldr	r3, [pc, #304]	; (8002fa0 <MX_GPIO_Init+0x178>)
 8002e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e72:	4a4b      	ldr	r2, [pc, #300]	; (8002fa0 <MX_GPIO_Init+0x178>)
 8002e74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e78:	6313      	str	r3, [r2, #48]	; 0x30
 8002e7a:	4b49      	ldr	r3, [pc, #292]	; (8002fa0 <MX_GPIO_Init+0x178>)
 8002e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e82:	613b      	str	r3, [r7, #16]
 8002e84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e86:	4b46      	ldr	r3, [pc, #280]	; (8002fa0 <MX_GPIO_Init+0x178>)
 8002e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8a:	4a45      	ldr	r2, [pc, #276]	; (8002fa0 <MX_GPIO_Init+0x178>)
 8002e8c:	f043 0301 	orr.w	r3, r3, #1
 8002e90:	6313      	str	r3, [r2, #48]	; 0x30
 8002e92:	4b43      	ldr	r3, [pc, #268]	; (8002fa0 <MX_GPIO_Init+0x178>)
 8002e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e96:	f003 0301 	and.w	r3, r3, #1
 8002e9a:	60fb      	str	r3, [r7, #12]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e9e:	4b40      	ldr	r3, [pc, #256]	; (8002fa0 <MX_GPIO_Init+0x178>)
 8002ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea2:	4a3f      	ldr	r2, [pc, #252]	; (8002fa0 <MX_GPIO_Init+0x178>)
 8002ea4:	f043 0302 	orr.w	r3, r3, #2
 8002ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eaa:	4b3d      	ldr	r3, [pc, #244]	; (8002fa0 <MX_GPIO_Init+0x178>)
 8002eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eae:	f003 0302 	and.w	r3, r3, #2
 8002eb2:	60bb      	str	r3, [r7, #8]
 8002eb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002eb6:	4b3a      	ldr	r3, [pc, #232]	; (8002fa0 <MX_GPIO_Init+0x178>)
 8002eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eba:	4a39      	ldr	r2, [pc, #228]	; (8002fa0 <MX_GPIO_Init+0x178>)
 8002ebc:	f043 0308 	orr.w	r3, r3, #8
 8002ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ec2:	4b37      	ldr	r3, [pc, #220]	; (8002fa0 <MX_GPIO_Init+0x178>)
 8002ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec6:	f003 0308 	and.w	r3, r3, #8
 8002eca:	607b      	str	r3, [r7, #4]
 8002ecc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002ece:	4b34      	ldr	r3, [pc, #208]	; (8002fa0 <MX_GPIO_Init+0x178>)
 8002ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed2:	4a33      	ldr	r2, [pc, #204]	; (8002fa0 <MX_GPIO_Init+0x178>)
 8002ed4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eda:	4b31      	ldr	r3, [pc, #196]	; (8002fa0 <MX_GPIO_Init+0x178>)
 8002edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ee2:	603b      	str	r3, [r7, #0]
 8002ee4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f244 0181 	movw	r1, #16513	; 0x4081
 8002eec:	482d      	ldr	r0, [pc, #180]	; (8002fa4 <MX_GPIO_Init+0x17c>)
 8002eee:	f002 f9d1 	bl	8005294 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, MOTOR5_INA_Pin|MOTOR5_INB_Pin|MOTOR1_INA_Pin|MOTOR1_INB_Pin
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f24c 01ff 	movw	r1, #49407	; 0xc0ff
 8002ef8:	482b      	ldr	r0, [pc, #172]	; (8002fa8 <MX_GPIO_Init+0x180>)
 8002efa:	f002 f9cb 	bl	8005294 <HAL_GPIO_WritePin>
                          |MOTOR2_INA_Pin|MOTOR2_INB_Pin|MOTOR3_INA_Pin|MOTOR3_INB_Pin
                          |MOTOR4_INA_Pin|MOTOR4_INB_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, MOTOR6_INA_Pin|MOTOR6_INB_Pin|PIN_TOGGLE_Pin|MOTORS_EN_Pin
 8002efe:	2200      	movs	r2, #0
 8002f00:	f647 616c 	movw	r1, #32364	; 0x7e6c
 8002f04:	4829      	ldr	r0, [pc, #164]	; (8002fac <MX_GPIO_Init+0x184>)
 8002f06:	f002 f9c5 	bl	8005294 <HAL_GPIO_WritePin>
                          |MOTOR1_END_Pin|MOTOR2_END_Pin|MOTOR3_END_Pin|MOTOR4_END_Pin
                          |MOTOR5_END_Pin|MOTOR6_END_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002f0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002f10:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002f14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f16:	2300      	movs	r3, #0
 8002f18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002f1a:	f107 031c 	add.w	r3, r7, #28
 8002f1e:	4619      	mov	r1, r3
 8002f20:	4823      	ldr	r0, [pc, #140]	; (8002fb0 <MX_GPIO_Init+0x188>)
 8002f22:	f001 fff3 	bl	8004f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8002f26:	f244 0381 	movw	r3, #16513	; 0x4081
 8002f2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f30:	2300      	movs	r3, #0
 8002f32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f34:	2300      	movs	r3, #0
 8002f36:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f38:	f107 031c 	add.w	r3, r7, #28
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	4819      	ldr	r0, [pc, #100]	; (8002fa4 <MX_GPIO_Init+0x17c>)
 8002f40:	f001 ffe4 	bl	8004f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = MOTOR5_INA_Pin|MOTOR5_INB_Pin|MOTOR1_INA_Pin|MOTOR1_INB_Pin
 8002f44:	f24c 03ff 	movw	r3, #49407	; 0xc0ff
 8002f48:	61fb      	str	r3, [r7, #28]
                          |MOTOR2_INA_Pin|MOTOR2_INB_Pin|MOTOR3_INA_Pin|MOTOR3_INB_Pin
                          |MOTOR4_INA_Pin|MOTOR4_INB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f52:	2300      	movs	r3, #0
 8002f54:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f56:	f107 031c 	add.w	r3, r7, #28
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	4812      	ldr	r0, [pc, #72]	; (8002fa8 <MX_GPIO_Init+0x180>)
 8002f5e:	f001 ffd5 	bl	8004f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin
                           PGPin PGPin */
  GPIO_InitStruct.Pin = MOTOR6_INA_Pin|MOTOR6_INB_Pin|PIN_TOGGLE_Pin|MOTORS_EN_Pin
 8002f62:	f647 636c 	movw	r3, #32364	; 0x7e6c
 8002f66:	61fb      	str	r3, [r7, #28]
                          |MOTOR1_END_Pin|MOTOR2_END_Pin|MOTOR3_END_Pin|MOTOR4_END_Pin
                          |MOTOR5_END_Pin|MOTOR6_END_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f70:	2300      	movs	r3, #0
 8002f72:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002f74:	f107 031c 	add.w	r3, r7, #28
 8002f78:	4619      	mov	r1, r3
 8002f7a:	480c      	ldr	r0, [pc, #48]	; (8002fac <MX_GPIO_Init+0x184>)
 8002f7c:	f001 ffc6 	bl	8004f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002f80:	2380      	movs	r3, #128	; 0x80
 8002f82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f84:	2300      	movs	r3, #0
 8002f86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002f8c:	f107 031c 	add.w	r3, r7, #28
 8002f90:	4619      	mov	r1, r3
 8002f92:	4806      	ldr	r0, [pc, #24]	; (8002fac <MX_GPIO_Init+0x184>)
 8002f94:	f001 ffba 	bl	8004f0c <HAL_GPIO_Init>

}
 8002f98:	bf00      	nop
 8002f9a:	3730      	adds	r7, #48	; 0x30
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	40023800 	.word	0x40023800
 8002fa4:	40020400 	.word	0x40020400
 8002fa8:	40020c00 	.word	0x40020c00
 8002fac:	40021800 	.word	0x40021800
 8002fb0:	40020800 	.word	0x40020800

08002fb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002fb8:	f001 fa5f 	bl	800447a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002fbc:	f000 f82e 	bl	800301c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002fc0:	f7ff ff32 	bl	8002e28 <MX_GPIO_Init>
  MX_DMA_Init();
 8002fc4:	f7ff fc48 	bl	8002858 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8002fc8:	f001 f886 	bl	80040d8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8002fcc:	f001 f984 	bl	80042d8 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM1_Init();
 8002fd0:	f000 fbd6 	bl	8003780 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002fd4:	f000 fca4 	bl	8003920 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002fd8:	f000 fcf6 	bl	80039c8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002fdc:	f000 fd4a 	bl	8003a74 <MX_TIM4_Init>
  MX_TIM5_Init();
 8002fe0:	f000 fd9e 	bl	8003b20 <MX_TIM5_Init>
  MX_TIM8_Init();
 8002fe4:	f000 fdf2 	bl	8003bcc <MX_TIM8_Init>
  MX_TIM9_Init();
 8002fe8:	f000 fe4a 	bl	8003c80 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002fec:	2100      	movs	r1, #0
 8002fee:	4809      	ldr	r0, [pc, #36]	; (8003014 <main+0x60>)
 8002ff0:	f003 fd58 	bl	8006aa4 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8002ff4:	213c      	movs	r1, #60	; 0x3c
 8002ff6:	4808      	ldr	r0, [pc, #32]	; (8003018 <main+0x64>)
 8002ff8:	f003 fef4 	bl	8006de4 <HAL_TIM_Encoder_Start>
  TIM2->CNT = HALF_ENC+1;
 8002ffc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003000:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003004:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8003006:	f006 fe25 	bl	8009c54 <osKernelInitialize>
  MX_FREERTOS_Init();
 800300a:	f7ff fcf5 	bl	80029f8 <_Z16MX_FREERTOS_Initv>

  /* Start scheduler */
  osKernelStart();
 800300e:	f006 fe55 	bl	8009cbc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003012:	e7fe      	b.n	8003012 <main+0x5e>
 8003014:	20006968 	.word	0x20006968
 8003018:	200069b4 	.word	0x200069b4

0800301c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b094      	sub	sp, #80	; 0x50
 8003020:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003022:	f107 031c 	add.w	r3, r7, #28
 8003026:	2234      	movs	r2, #52	; 0x34
 8003028:	2100      	movs	r1, #0
 800302a:	4618      	mov	r0, r3
 800302c:	f01a fdb2 	bl	801db94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003030:	f107 0308 	add.w	r3, r7, #8
 8003034:	2200      	movs	r2, #0
 8003036:	601a      	str	r2, [r3, #0]
 8003038:	605a      	str	r2, [r3, #4]
 800303a:	609a      	str	r2, [r3, #8]
 800303c:	60da      	str	r2, [r3, #12]
 800303e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003040:	4b33      	ldr	r3, [pc, #204]	; (8003110 <_Z18SystemClock_Configv+0xf4>)
 8003042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003044:	4a32      	ldr	r2, [pc, #200]	; (8003110 <_Z18SystemClock_Configv+0xf4>)
 8003046:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800304a:	6413      	str	r3, [r2, #64]	; 0x40
 800304c:	4b30      	ldr	r3, [pc, #192]	; (8003110 <_Z18SystemClock_Configv+0xf4>)
 800304e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003050:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003054:	607b      	str	r3, [r7, #4]
 8003056:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003058:	4b2e      	ldr	r3, [pc, #184]	; (8003114 <_Z18SystemClock_Configv+0xf8>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003060:	4a2c      	ldr	r2, [pc, #176]	; (8003114 <_Z18SystemClock_Configv+0xf8>)
 8003062:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003066:	6013      	str	r3, [r2, #0]
 8003068:	4b2a      	ldr	r3, [pc, #168]	; (8003114 <_Z18SystemClock_Configv+0xf8>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003070:	603b      	str	r3, [r7, #0]
 8003072:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003074:	2301      	movs	r3, #1
 8003076:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003078:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800307c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800307e:	2302      	movs	r3, #2
 8003080:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003082:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003086:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003088:	2304      	movs	r3, #4
 800308a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 800308c:	2360      	movs	r3, #96	; 0x60
 800308e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003090:	2302      	movs	r3, #2
 8003092:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003094:	2304      	movs	r3, #4
 8003096:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003098:	2302      	movs	r3, #2
 800309a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800309c:	f107 031c 	add.w	r3, r7, #28
 80030a0:	4618      	mov	r0, r3
 80030a2:	f002 faa9 	bl	80055f8 <HAL_RCC_OscConfig>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	bf14      	ite	ne
 80030ac:	2301      	movne	r3, #1
 80030ae:	2300      	moveq	r3, #0
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d001      	beq.n	80030ba <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 80030b6:	f000 f841 	bl	800313c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80030ba:	f002 fa4d 	bl	8005558 <HAL_PWREx_EnableOverDrive>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	bf14      	ite	ne
 80030c4:	2301      	movne	r3, #1
 80030c6:	2300      	moveq	r3, #0
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d001      	beq.n	80030d2 <_Z18SystemClock_Configv+0xb6>
  {
    Error_Handler();
 80030ce:	f000 f835 	bl	800313c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80030d2:	230f      	movs	r3, #15
 80030d4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80030d6:	2302      	movs	r3, #2
 80030d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80030da:	2300      	movs	r3, #0
 80030dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80030de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80030e4:	2300      	movs	r3, #0
 80030e6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80030e8:	f107 0308 	add.w	r3, r7, #8
 80030ec:	2103      	movs	r1, #3
 80030ee:	4618      	mov	r0, r3
 80030f0:	f002 fd30 	bl	8005b54 <HAL_RCC_ClockConfig>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	bf14      	ite	ne
 80030fa:	2301      	movne	r3, #1
 80030fc:	2300      	moveq	r3, #0
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	2b00      	cmp	r3, #0
 8003102:	d001      	beq.n	8003108 <_Z18SystemClock_Configv+0xec>
  {
    Error_Handler();
 8003104:	f000 f81a 	bl	800313c <Error_Handler>
  }
}
 8003108:	bf00      	nop
 800310a:	3750      	adds	r7, #80	; 0x50
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	40023800 	.word	0x40023800
 8003114:	40007000 	.word	0x40007000

08003118 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a04      	ldr	r2, [pc, #16]	; (8003138 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d101      	bne.n	800312e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800312a:	f001 f9b3 	bl	8004494 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800312e:	bf00      	nop
 8003130:	3708      	adds	r7, #8
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	40001000 	.word	0x40001000

0800313c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800313c:	b480      	push	{r7}
 800313e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003140:	b672      	cpsid	i
}
 8003142:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003144:	e7fe      	b.n	8003144 <Error_Handler+0x8>
	...

08003148 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8003152:	4b0c      	ldr	r3, [pc, #48]	; (8003184 <microros_allocate+0x3c>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	461a      	mov	r2, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4413      	add	r3, r2
 800315c:	461a      	mov	r2, r3
 800315e:	4b09      	ldr	r3, [pc, #36]	; (8003184 <microros_allocate+0x3c>)
 8003160:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8003162:	4b09      	ldr	r3, [pc, #36]	; (8003188 <microros_allocate+0x40>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	461a      	mov	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4413      	add	r3, r2
 800316c:	461a      	mov	r2, r3
 800316e:	4b06      	ldr	r3, [pc, #24]	; (8003188 <microros_allocate+0x40>)
 8003170:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f7ff f91c 	bl	80023b0 <pvPortMallocMicroROS>
 8003178:	4603      	mov	r3, r0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3708      	adds	r7, #8
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	2000690c 	.word	0x2000690c
 8003188:	20006910 	.word	0x20006910

0800318c <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d00c      	beq.n	80031b6 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f7ff fa2f 	bl	8002600 <getBlockSize>
 80031a2:	4603      	mov	r3, r0
 80031a4:	4a06      	ldr	r2, [pc, #24]	; (80031c0 <microros_deallocate+0x34>)
 80031a6:	6812      	ldr	r2, [r2, #0]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	461a      	mov	r2, r3
 80031ac:	4b04      	ldr	r3, [pc, #16]	; (80031c0 <microros_deallocate+0x34>)
 80031ae:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f7ff f9c7 	bl	8002544 <vPortFreeMicroROS>
  }
}
 80031b6:	bf00      	nop
 80031b8:	3708      	adds	r7, #8
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	20006910 	.word	0x20006910

080031c4 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80031d0:	4b15      	ldr	r3, [pc, #84]	; (8003228 <microros_reallocate+0x64>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	461a      	mov	r2, r3
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	4413      	add	r3, r2
 80031da:	461a      	mov	r2, r3
 80031dc:	4b12      	ldr	r3, [pc, #72]	; (8003228 <microros_reallocate+0x64>)
 80031de:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80031e0:	4b12      	ldr	r3, [pc, #72]	; (800322c <microros_reallocate+0x68>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	461a      	mov	r2, r3
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	4413      	add	r3, r2
 80031ea:	461a      	mov	r2, r3
 80031ec:	4b0f      	ldr	r3, [pc, #60]	; (800322c <microros_reallocate+0x68>)
 80031ee:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d104      	bne.n	8003200 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 80031f6:	68b8      	ldr	r0, [r7, #8]
 80031f8:	f7ff f8da 	bl	80023b0 <pvPortMallocMicroROS>
 80031fc:	4603      	mov	r3, r0
 80031fe:	e00e      	b.n	800321e <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8003200:	68f8      	ldr	r0, [r7, #12]
 8003202:	f7ff f9fd 	bl	8002600 <getBlockSize>
 8003206:	4603      	mov	r3, r0
 8003208:	4a08      	ldr	r2, [pc, #32]	; (800322c <microros_reallocate+0x68>)
 800320a:	6812      	ldr	r2, [r2, #0]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	461a      	mov	r2, r3
 8003210:	4b06      	ldr	r3, [pc, #24]	; (800322c <microros_reallocate+0x68>)
 8003212:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8003214:	68b9      	ldr	r1, [r7, #8]
 8003216:	68f8      	ldr	r0, [r7, #12]
 8003218:	f7ff fa10 	bl	800263c <pvPortReallocMicroROS>
 800321c:	4603      	mov	r3, r0
  }
}
 800321e:	4618      	mov	r0, r3
 8003220:	3710      	adds	r7, #16
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	2000690c 	.word	0x2000690c
 800322c:	20006910 	.word	0x20006910

08003230 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	60b9      	str	r1, [r7, #8]
 800323a:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	68ba      	ldr	r2, [r7, #8]
 8003240:	fb02 f303 	mul.w	r3, r2, r3
 8003244:	4a0c      	ldr	r2, [pc, #48]	; (8003278 <microros_zero_allocate+0x48>)
 8003246:	6812      	ldr	r2, [r2, #0]
 8003248:	4413      	add	r3, r2
 800324a:	461a      	mov	r2, r3
 800324c:	4b0a      	ldr	r3, [pc, #40]	; (8003278 <microros_zero_allocate+0x48>)
 800324e:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	68ba      	ldr	r2, [r7, #8]
 8003254:	fb02 f303 	mul.w	r3, r2, r3
 8003258:	4a08      	ldr	r2, [pc, #32]	; (800327c <microros_zero_allocate+0x4c>)
 800325a:	6812      	ldr	r2, [r2, #0]
 800325c:	4413      	add	r3, r2
 800325e:	461a      	mov	r2, r3
 8003260:	4b06      	ldr	r3, [pc, #24]	; (800327c <microros_zero_allocate+0x4c>)
 8003262:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8003264:	68b9      	ldr	r1, [r7, #8]
 8003266:	68f8      	ldr	r0, [r7, #12]
 8003268:	f7ff fa15 	bl	8002696 <pvPortCallocMicroROS>
 800326c:	4603      	mov	r3, r0
 800326e:	4618      	mov	r0, r3
 8003270:	3710      	adds	r7, #16
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	2000690c 	.word	0x2000690c
 800327c:	20006910 	.word	0x20006910

08003280 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8003280:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003284:	b086      	sub	sp, #24
 8003286:	af00      	add	r7, sp, #0
 8003288:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800328c:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 800328e:	2300      	movs	r3, #0
 8003290:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8003292:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003296:	a320      	add	r3, pc, #128	; (adr r3, 8003318 <UTILS_NanosecondsToTimespec+0x98>)
 8003298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800329c:	f7fd f838 	bl	8000310 <__aeabi_ldivmod>
 80032a0:	4602      	mov	r2, r0
 80032a2:	460b      	mov	r3, r1
 80032a4:	6879      	ldr	r1, [r7, #4]
 80032a6:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 80032aa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80032ae:	a31a      	add	r3, pc, #104	; (adr r3, 8003318 <UTILS_NanosecondsToTimespec+0x98>)
 80032b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032b4:	f7fd f82c 	bl	8000310 <__aeabi_ldivmod>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	da20      	bge.n	8003306 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	4a11      	ldr	r2, [pc, #68]	; (8003310 <UTILS_NanosecondsToTimespec+0x90>)
 80032ca:	fb82 1203 	smull	r1, r2, r2, r3
 80032ce:	1712      	asrs	r2, r2, #28
 80032d0:	17db      	asrs	r3, r3, #31
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	3301      	adds	r3, #1
 80032d6:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032de:	6979      	ldr	r1, [r7, #20]
 80032e0:	17c8      	asrs	r0, r1, #31
 80032e2:	460c      	mov	r4, r1
 80032e4:	4605      	mov	r5, r0
 80032e6:	ebb2 0804 	subs.w	r8, r2, r4
 80032ea:	eb63 0905 	sbc.w	r9, r3, r5
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	689a      	ldr	r2, [r3, #8]
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	4906      	ldr	r1, [pc, #24]	; (8003314 <UTILS_NanosecondsToTimespec+0x94>)
 80032fc:	fb01 f303 	mul.w	r3, r1, r3
 8003300:	441a      	add	r2, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	609a      	str	r2, [r3, #8]
    }
}
 8003306:	bf00      	nop
 8003308:	3718      	adds	r7, #24
 800330a:	46bd      	mov	sp, r7
 800330c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003310:	44b82fa1 	.word	0x44b82fa1
 8003314:	3b9aca00 	.word	0x3b9aca00
 8003318:	3b9aca00 	.word	0x3b9aca00
 800331c:	00000000 	.word	0x00000000

08003320 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8003320:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003324:	b08e      	sub	sp, #56	; 0x38
 8003326:	af00      	add	r7, sp, #0
 8003328:	6278      	str	r0, [r7, #36]	; 0x24
 800332a:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 800332c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003330:	2300      	movs	r3, #0
 8003332:	6013      	str	r3, [r2, #0]
 8003334:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8003336:	f04f 0200 	mov.w	r2, #0
 800333a:	f04f 0300 	mov.w	r3, #0
 800333e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8003342:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003346:	4618      	mov	r0, r3
 8003348:	f008 f8b8 	bl	800b4bc <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 800334c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800334e:	17da      	asrs	r2, r3, #31
 8003350:	61bb      	str	r3, [r7, #24]
 8003352:	61fa      	str	r2, [r7, #28]
 8003354:	f04f 0200 	mov.w	r2, #0
 8003358:	f04f 0300 	mov.w	r3, #0
 800335c:	69b9      	ldr	r1, [r7, #24]
 800335e:	000b      	movs	r3, r1
 8003360:	2200      	movs	r2, #0
 8003362:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8003366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003368:	2200      	movs	r2, #0
 800336a:	461c      	mov	r4, r3
 800336c:	4615      	mov	r5, r2
 800336e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003372:	1911      	adds	r1, r2, r4
 8003374:	60b9      	str	r1, [r7, #8]
 8003376:	416b      	adcs	r3, r5
 8003378:	60fb      	str	r3, [r7, #12]
 800337a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800337e:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8003382:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003386:	4602      	mov	r2, r0
 8003388:	460b      	mov	r3, r1
 800338a:	f04f 0400 	mov.w	r4, #0
 800338e:	f04f 0500 	mov.w	r5, #0
 8003392:	015d      	lsls	r5, r3, #5
 8003394:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8003398:	0154      	lsls	r4, r2, #5
 800339a:	4622      	mov	r2, r4
 800339c:	462b      	mov	r3, r5
 800339e:	ebb2 0800 	subs.w	r8, r2, r0
 80033a2:	eb63 0901 	sbc.w	r9, r3, r1
 80033a6:	f04f 0200 	mov.w	r2, #0
 80033aa:	f04f 0300 	mov.w	r3, #0
 80033ae:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80033b2:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80033b6:	ea4f 2248 	mov.w	r2, r8, lsl #9
 80033ba:	4690      	mov	r8, r2
 80033bc:	4699      	mov	r9, r3
 80033be:	eb18 0a00 	adds.w	sl, r8, r0
 80033c2:	eb49 0b01 	adc.w	fp, r9, r1
 80033c6:	f04f 0200 	mov.w	r2, #0
 80033ca:	f04f 0300 	mov.w	r3, #0
 80033ce:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80033d2:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80033d6:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80033da:	ebb2 040a 	subs.w	r4, r2, sl
 80033de:	603c      	str	r4, [r7, #0]
 80033e0:	eb63 030b 	sbc.w	r3, r3, fp
 80033e4:	607b      	str	r3, [r7, #4]
 80033e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80033ea:	4623      	mov	r3, r4
 80033ec:	181b      	adds	r3, r3, r0
 80033ee:	613b      	str	r3, [r7, #16]
 80033f0:	462b      	mov	r3, r5
 80033f2:	eb41 0303 	adc.w	r3, r1, r3
 80033f6:	617b      	str	r3, [r7, #20]
 80033f8:	6a3a      	ldr	r2, [r7, #32]
 80033fa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80033fe:	f7ff ff3f 	bl	8003280 <UTILS_NanosecondsToTimespec>

    return 0;
 8003402:	2300      	movs	r3, #0
 8003404:	4618      	mov	r0, r3
 8003406:	3738      	adds	r7, #56	; 0x38
 8003408:	46bd      	mov	sp, r7
 800340a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003410 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003416:	4b11      	ldr	r3, [pc, #68]	; (800345c <HAL_MspInit+0x4c>)
 8003418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341a:	4a10      	ldr	r2, [pc, #64]	; (800345c <HAL_MspInit+0x4c>)
 800341c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003420:	6413      	str	r3, [r2, #64]	; 0x40
 8003422:	4b0e      	ldr	r3, [pc, #56]	; (800345c <HAL_MspInit+0x4c>)
 8003424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800342a:	607b      	str	r3, [r7, #4]
 800342c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800342e:	4b0b      	ldr	r3, [pc, #44]	; (800345c <HAL_MspInit+0x4c>)
 8003430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003432:	4a0a      	ldr	r2, [pc, #40]	; (800345c <HAL_MspInit+0x4c>)
 8003434:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003438:	6453      	str	r3, [r2, #68]	; 0x44
 800343a:	4b08      	ldr	r3, [pc, #32]	; (800345c <HAL_MspInit+0x4c>)
 800343c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800343e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003442:	603b      	str	r3, [r7, #0]
 8003444:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003446:	2200      	movs	r2, #0
 8003448:	210f      	movs	r1, #15
 800344a:	f06f 0001 	mvn.w	r0, #1
 800344e:	f001 f91d 	bl	800468c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003452:	bf00      	nop
 8003454:	3708      	adds	r7, #8
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	40023800 	.word	0x40023800

08003460 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b08e      	sub	sp, #56	; 0x38
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003468:	2300      	movs	r3, #0
 800346a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800346c:	2300      	movs	r3, #0
 800346e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003470:	4b33      	ldr	r3, [pc, #204]	; (8003540 <HAL_InitTick+0xe0>)
 8003472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003474:	4a32      	ldr	r2, [pc, #200]	; (8003540 <HAL_InitTick+0xe0>)
 8003476:	f043 0310 	orr.w	r3, r3, #16
 800347a:	6413      	str	r3, [r2, #64]	; 0x40
 800347c:	4b30      	ldr	r3, [pc, #192]	; (8003540 <HAL_InitTick+0xe0>)
 800347e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003480:	f003 0310 	and.w	r3, r3, #16
 8003484:	60fb      	str	r3, [r7, #12]
 8003486:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003488:	f107 0210 	add.w	r2, r7, #16
 800348c:	f107 0314 	add.w	r3, r7, #20
 8003490:	4611      	mov	r1, r2
 8003492:	4618      	mov	r0, r3
 8003494:	f002 fd84 	bl	8005fa0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003498:	6a3b      	ldr	r3, [r7, #32]
 800349a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800349c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d103      	bne.n	80034aa <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80034a2:	f002 fd55 	bl	8005f50 <HAL_RCC_GetPCLK1Freq>
 80034a6:	6378      	str	r0, [r7, #52]	; 0x34
 80034a8:	e004      	b.n	80034b4 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80034aa:	f002 fd51 	bl	8005f50 <HAL_RCC_GetPCLK1Freq>
 80034ae:	4603      	mov	r3, r0
 80034b0:	005b      	lsls	r3, r3, #1
 80034b2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80034b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034b6:	4a23      	ldr	r2, [pc, #140]	; (8003544 <HAL_InitTick+0xe4>)
 80034b8:	fba2 2303 	umull	r2, r3, r2, r3
 80034bc:	0c9b      	lsrs	r3, r3, #18
 80034be:	3b01      	subs	r3, #1
 80034c0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80034c2:	4b21      	ldr	r3, [pc, #132]	; (8003548 <HAL_InitTick+0xe8>)
 80034c4:	4a21      	ldr	r2, [pc, #132]	; (800354c <HAL_InitTick+0xec>)
 80034c6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80034c8:	4b1f      	ldr	r3, [pc, #124]	; (8003548 <HAL_InitTick+0xe8>)
 80034ca:	f240 32e7 	movw	r2, #999	; 0x3e7
 80034ce:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80034d0:	4a1d      	ldr	r2, [pc, #116]	; (8003548 <HAL_InitTick+0xe8>)
 80034d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034d4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80034d6:	4b1c      	ldr	r3, [pc, #112]	; (8003548 <HAL_InitTick+0xe8>)
 80034d8:	2200      	movs	r2, #0
 80034da:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034dc:	4b1a      	ldr	r3, [pc, #104]	; (8003548 <HAL_InitTick+0xe8>)
 80034de:	2200      	movs	r2, #0
 80034e0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034e2:	4b19      	ldr	r3, [pc, #100]	; (8003548 <HAL_InitTick+0xe8>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80034e8:	4817      	ldr	r0, [pc, #92]	; (8003548 <HAL_InitTick+0xe8>)
 80034ea:	f003 f9b3 	bl	8006854 <HAL_TIM_Base_Init>
 80034ee:	4603      	mov	r3, r0
 80034f0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80034f4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d11b      	bne.n	8003534 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80034fc:	4812      	ldr	r0, [pc, #72]	; (8003548 <HAL_InitTick+0xe8>)
 80034fe:	f003 fa01 	bl	8006904 <HAL_TIM_Base_Start_IT>
 8003502:	4603      	mov	r3, r0
 8003504:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8003508:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800350c:	2b00      	cmp	r3, #0
 800350e:	d111      	bne.n	8003534 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003510:	2036      	movs	r0, #54	; 0x36
 8003512:	f001 f8d7 	bl	80046c4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2b0f      	cmp	r3, #15
 800351a:	d808      	bhi.n	800352e <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800351c:	2200      	movs	r2, #0
 800351e:	6879      	ldr	r1, [r7, #4]
 8003520:	2036      	movs	r0, #54	; 0x36
 8003522:	f001 f8b3 	bl	800468c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003526:	4a0a      	ldr	r2, [pc, #40]	; (8003550 <HAL_InitTick+0xf0>)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6013      	str	r3, [r2, #0]
 800352c:	e002      	b.n	8003534 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003534:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8003538:	4618      	mov	r0, r3
 800353a:	3738      	adds	r7, #56	; 0x38
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	40023800 	.word	0x40023800
 8003544:	431bde83 	.word	0x431bde83
 8003548:	20006914 	.word	0x20006914
 800354c:	40001000 	.word	0x40001000
 8003550:	20000008 	.word	0x20000008

08003554 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003554:	b480      	push	{r7}
 8003556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003558:	e7fe      	b.n	8003558 <NMI_Handler+0x4>

0800355a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800355a:	b480      	push	{r7}
 800355c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800355e:	e7fe      	b.n	800355e <HardFault_Handler+0x4>

08003560 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003560:	b480      	push	{r7}
 8003562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003564:	e7fe      	b.n	8003564 <MemManage_Handler+0x4>

08003566 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003566:	b480      	push	{r7}
 8003568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800356a:	e7fe      	b.n	800356a <BusFault_Handler+0x4>

0800356c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800356c:	b480      	push	{r7}
 800356e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003570:	e7fe      	b.n	8003570 <UsageFault_Handler+0x4>

08003572 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003572:	b480      	push	{r7}
 8003574:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003576:	bf00      	nop
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003584:	4802      	ldr	r0, [pc, #8]	; (8003590 <DMA1_Stream1_IRQHandler+0x10>)
 8003586:	f001 fa4b 	bl	8004a20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800358a:	bf00      	nop
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	20006c64 	.word	0x20006c64

08003594 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8003598:	4802      	ldr	r0, [pc, #8]	; (80035a4 <DMA1_Stream3_IRQHandler+0x10>)
 800359a:	f001 fa41 	bl	8004a20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800359e:	bf00      	nop
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	20006c04 	.word	0x20006c04

080035a8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80035ac:	4802      	ldr	r0, [pc, #8]	; (80035b8 <USART3_IRQHandler+0x10>)
 80035ae:	f004 fe55 	bl	800825c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80035b2:	bf00      	nop
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	20006b7c 	.word	0x20006b7c

080035bc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80035c0:	4802      	ldr	r0, [pc, #8]	; (80035cc <TIM6_DAC_IRQHandler+0x10>)
 80035c2:	f003 fc9d 	bl	8006f00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80035c6:	bf00      	nop
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	20006914 	.word	0x20006914

080035d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80035d0:	b480      	push	{r7}
 80035d2:	af00      	add	r7, sp, #0
  return 1;
 80035d4:	2301      	movs	r3, #1
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <_kill>:

int _kill(int pid, int sig)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80035ea:	f01a fbcf 	bl	801dd8c <__errno>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2216      	movs	r2, #22
 80035f2:	601a      	str	r2, [r3, #0]
  return -1;
 80035f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3708      	adds	r7, #8
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}

08003600 <_exit>:

void _exit (int status)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b082      	sub	sp, #8
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003608:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f7ff ffe7 	bl	80035e0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003612:	e7fe      	b.n	8003612 <_exit+0x12>

08003614 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b086      	sub	sp, #24
 8003618:	af00      	add	r7, sp, #0
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	60b9      	str	r1, [r7, #8]
 800361e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003620:	2300      	movs	r3, #0
 8003622:	617b      	str	r3, [r7, #20]
 8003624:	e00a      	b.n	800363c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003626:	f3af 8000 	nop.w
 800362a:	4601      	mov	r1, r0
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	1c5a      	adds	r2, r3, #1
 8003630:	60ba      	str	r2, [r7, #8]
 8003632:	b2ca      	uxtb	r2, r1
 8003634:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	3301      	adds	r3, #1
 800363a:	617b      	str	r3, [r7, #20]
 800363c:	697a      	ldr	r2, [r7, #20]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	429a      	cmp	r2, r3
 8003642:	dbf0      	blt.n	8003626 <_read+0x12>
  }

  return len;
 8003644:	687b      	ldr	r3, [r7, #4]
}
 8003646:	4618      	mov	r0, r3
 8003648:	3718      	adds	r7, #24
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}

0800364e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800364e:	b580      	push	{r7, lr}
 8003650:	b086      	sub	sp, #24
 8003652:	af00      	add	r7, sp, #0
 8003654:	60f8      	str	r0, [r7, #12]
 8003656:	60b9      	str	r1, [r7, #8]
 8003658:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800365a:	2300      	movs	r3, #0
 800365c:	617b      	str	r3, [r7, #20]
 800365e:	e009      	b.n	8003674 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	1c5a      	adds	r2, r3, #1
 8003664:	60ba      	str	r2, [r7, #8]
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	4618      	mov	r0, r3
 800366a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	3301      	adds	r3, #1
 8003672:	617b      	str	r3, [r7, #20]
 8003674:	697a      	ldr	r2, [r7, #20]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	429a      	cmp	r2, r3
 800367a:	dbf1      	blt.n	8003660 <_write+0x12>
  }
  return len;
 800367c:	687b      	ldr	r3, [r7, #4]
}
 800367e:	4618      	mov	r0, r3
 8003680:	3718      	adds	r7, #24
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}

08003686 <_close>:

int _close(int file)
{
 8003686:	b480      	push	{r7}
 8003688:	b083      	sub	sp, #12
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800368e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003692:	4618      	mov	r0, r3
 8003694:	370c      	adds	r7, #12
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr

0800369e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800369e:	b480      	push	{r7}
 80036a0:	b083      	sub	sp, #12
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	6078      	str	r0, [r7, #4]
 80036a6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80036ae:	605a      	str	r2, [r3, #4]
  return 0;
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	370c      	adds	r7, #12
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr

080036be <_isatty>:

int _isatty(int file)
{
 80036be:	b480      	push	{r7}
 80036c0:	b083      	sub	sp, #12
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80036c6:	2301      	movs	r3, #1
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	370c      	adds	r7, #12
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b085      	sub	sp, #20
 80036d8:	af00      	add	r7, sp, #0
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	60b9      	str	r1, [r7, #8]
 80036de:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80036e0:	2300      	movs	r3, #0
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3714      	adds	r7, #20
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
	...

080036f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b086      	sub	sp, #24
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80036f8:	4a14      	ldr	r2, [pc, #80]	; (800374c <_sbrk+0x5c>)
 80036fa:	4b15      	ldr	r3, [pc, #84]	; (8003750 <_sbrk+0x60>)
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003704:	4b13      	ldr	r3, [pc, #76]	; (8003754 <_sbrk+0x64>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d102      	bne.n	8003712 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800370c:	4b11      	ldr	r3, [pc, #68]	; (8003754 <_sbrk+0x64>)
 800370e:	4a12      	ldr	r2, [pc, #72]	; (8003758 <_sbrk+0x68>)
 8003710:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003712:	4b10      	ldr	r3, [pc, #64]	; (8003754 <_sbrk+0x64>)
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4413      	add	r3, r2
 800371a:	693a      	ldr	r2, [r7, #16]
 800371c:	429a      	cmp	r2, r3
 800371e:	d207      	bcs.n	8003730 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003720:	f01a fb34 	bl	801dd8c <__errno>
 8003724:	4603      	mov	r3, r0
 8003726:	220c      	movs	r2, #12
 8003728:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800372a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800372e:	e009      	b.n	8003744 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003730:	4b08      	ldr	r3, [pc, #32]	; (8003754 <_sbrk+0x64>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003736:	4b07      	ldr	r3, [pc, #28]	; (8003754 <_sbrk+0x64>)
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4413      	add	r3, r2
 800373e:	4a05      	ldr	r2, [pc, #20]	; (8003754 <_sbrk+0x64>)
 8003740:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003742:	68fb      	ldr	r3, [r7, #12]
}
 8003744:	4618      	mov	r0, r3
 8003746:	3718      	adds	r7, #24
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	20080000 	.word	0x20080000
 8003750:	00000400 	.word	0x00000400
 8003754:	20006964 	.word	0x20006964
 8003758:	20010fd8 	.word	0x20010fd8

0800375c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800375c:	b480      	push	{r7}
 800375e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003760:	4b06      	ldr	r3, [pc, #24]	; (800377c <SystemInit+0x20>)
 8003762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003766:	4a05      	ldr	r2, [pc, #20]	; (800377c <SystemInit+0x20>)
 8003768:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800376c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003770:	bf00      	nop
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	e000ed00 	.word	0xe000ed00

08003780 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim9;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b09a      	sub	sp, #104	; 0x68
 8003784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003786:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800378a:	2200      	movs	r2, #0
 800378c:	601a      	str	r2, [r3, #0]
 800378e:	605a      	str	r2, [r3, #4]
 8003790:	609a      	str	r2, [r3, #8]
 8003792:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003794:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003798:	2200      	movs	r2, #0
 800379a:	601a      	str	r2, [r3, #0]
 800379c:	605a      	str	r2, [r3, #4]
 800379e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80037a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80037a4:	2200      	movs	r2, #0
 80037a6:	601a      	str	r2, [r3, #0]
 80037a8:	605a      	str	r2, [r3, #4]
 80037aa:	609a      	str	r2, [r3, #8]
 80037ac:	60da      	str	r2, [r3, #12]
 80037ae:	611a      	str	r2, [r3, #16]
 80037b0:	615a      	str	r2, [r3, #20]
 80037b2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80037b4:	1d3b      	adds	r3, r7, #4
 80037b6:	222c      	movs	r2, #44	; 0x2c
 80037b8:	2100      	movs	r1, #0
 80037ba:	4618      	mov	r0, r3
 80037bc:	f01a f9ea 	bl	801db94 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80037c0:	4b55      	ldr	r3, [pc, #340]	; (8003918 <MX_TIM1_Init+0x198>)
 80037c2:	4a56      	ldr	r2, [pc, #344]	; (800391c <MX_TIM1_Init+0x19c>)
 80037c4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2-1;
 80037c6:	4b54      	ldr	r3, [pc, #336]	; (8003918 <MX_TIM1_Init+0x198>)
 80037c8:	2201      	movs	r2, #1
 80037ca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037cc:	4b52      	ldr	r3, [pc, #328]	; (8003918 <MX_TIM1_Init+0x198>)
 80037ce:	2200      	movs	r2, #0
 80037d0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 32767;
 80037d2:	4b51      	ldr	r3, [pc, #324]	; (8003918 <MX_TIM1_Init+0x198>)
 80037d4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80037d8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037da:	4b4f      	ldr	r3, [pc, #316]	; (8003918 <MX_TIM1_Init+0x198>)
 80037dc:	2200      	movs	r2, #0
 80037de:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80037e0:	4b4d      	ldr	r3, [pc, #308]	; (8003918 <MX_TIM1_Init+0x198>)
 80037e2:	2200      	movs	r2, #0
 80037e4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037e6:	4b4c      	ldr	r3, [pc, #304]	; (8003918 <MX_TIM1_Init+0x198>)
 80037e8:	2200      	movs	r2, #0
 80037ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80037ec:	484a      	ldr	r0, [pc, #296]	; (8003918 <MX_TIM1_Init+0x198>)
 80037ee:	f003 f831 	bl	8006854 <HAL_TIM_Base_Init>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d001      	beq.n	80037fc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80037f8:	f7ff fca0 	bl	800313c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80037fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003800:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003802:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003806:	4619      	mov	r1, r3
 8003808:	4843      	ldr	r0, [pc, #268]	; (8003918 <MX_TIM1_Init+0x198>)
 800380a:	f003 fdad 	bl	8007368 <HAL_TIM_ConfigClockSource>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d001      	beq.n	8003818 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8003814:	f7ff fc92 	bl	800313c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003818:	483f      	ldr	r0, [pc, #252]	; (8003918 <MX_TIM1_Init+0x198>)
 800381a:	f003 f8eb 	bl	80069f4 <HAL_TIM_PWM_Init>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d001      	beq.n	8003828 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8003824:	f7ff fc8a 	bl	800313c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003828:	2300      	movs	r3, #0
 800382a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800382c:	2300      	movs	r3, #0
 800382e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003830:	2300      	movs	r3, #0
 8003832:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003834:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003838:	4619      	mov	r1, r3
 800383a:	4837      	ldr	r0, [pc, #220]	; (8003918 <MX_TIM1_Init+0x198>)
 800383c:	f004 fa44 	bl	8007cc8 <HAL_TIMEx_MasterConfigSynchronization>
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	d001      	beq.n	800384a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8003846:	f7ff fc79 	bl	800313c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800384a:	2360      	movs	r3, #96	; 0x60
 800384c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800384e:	2300      	movs	r3, #0
 8003850:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003852:	2300      	movs	r3, #0
 8003854:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003856:	2300      	movs	r3, #0
 8003858:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800385a:	2300      	movs	r3, #0
 800385c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800385e:	2300      	movs	r3, #0
 8003860:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003862:	2300      	movs	r3, #0
 8003864:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003866:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800386a:	2200      	movs	r2, #0
 800386c:	4619      	mov	r1, r3
 800386e:	482a      	ldr	r0, [pc, #168]	; (8003918 <MX_TIM1_Init+0x198>)
 8003870:	f003 fc66 	bl	8007140 <HAL_TIM_PWM_ConfigChannel>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d001      	beq.n	800387e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800387a:	f7ff fc5f 	bl	800313c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800387e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003882:	2204      	movs	r2, #4
 8003884:	4619      	mov	r1, r3
 8003886:	4824      	ldr	r0, [pc, #144]	; (8003918 <MX_TIM1_Init+0x198>)
 8003888:	f003 fc5a 	bl	8007140 <HAL_TIM_PWM_ConfigChannel>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d001      	beq.n	8003896 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8003892:	f7ff fc53 	bl	800313c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003896:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800389a:	2208      	movs	r2, #8
 800389c:	4619      	mov	r1, r3
 800389e:	481e      	ldr	r0, [pc, #120]	; (8003918 <MX_TIM1_Init+0x198>)
 80038a0:	f003 fc4e 	bl	8007140 <HAL_TIM_PWM_ConfigChannel>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d001      	beq.n	80038ae <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 80038aa:	f7ff fc47 	bl	800313c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80038ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80038b2:	220c      	movs	r2, #12
 80038b4:	4619      	mov	r1, r3
 80038b6:	4818      	ldr	r0, [pc, #96]	; (8003918 <MX_TIM1_Init+0x198>)
 80038b8:	f003 fc42 	bl	8007140 <HAL_TIM_PWM_ConfigChannel>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d001      	beq.n	80038c6 <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 80038c2:	f7ff fc3b 	bl	800313c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80038c6:	2300      	movs	r3, #0
 80038c8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80038ca:	2300      	movs	r3, #0
 80038cc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80038ce:	2300      	movs	r3, #0
 80038d0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80038d2:	2300      	movs	r3, #0
 80038d4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80038d6:	2300      	movs	r3, #0
 80038d8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80038da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80038de:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80038e0:	2300      	movs	r3, #0
 80038e2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80038e4:	2300      	movs	r3, #0
 80038e6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80038e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038ec:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80038ee:	2300      	movs	r3, #0
 80038f0:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80038f2:	2300      	movs	r3, #0
 80038f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80038f6:	1d3b      	adds	r3, r7, #4
 80038f8:	4619      	mov	r1, r3
 80038fa:	4807      	ldr	r0, [pc, #28]	; (8003918 <MX_TIM1_Init+0x198>)
 80038fc:	f004 fa72 	bl	8007de4 <HAL_TIMEx_ConfigBreakDeadTime>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d001      	beq.n	800390a <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 8003906:	f7ff fc19 	bl	800313c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800390a:	4803      	ldr	r0, [pc, #12]	; (8003918 <MX_TIM1_Init+0x198>)
 800390c:	f000 fb88 	bl	8004020 <HAL_TIM_MspPostInit>

}
 8003910:	bf00      	nop
 8003912:	3768      	adds	r7, #104	; 0x68
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}
 8003918:	20006968 	.word	0x20006968
 800391c:	40010000 	.word	0x40010000

08003920 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b08c      	sub	sp, #48	; 0x30
 8003924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003926:	f107 030c 	add.w	r3, r7, #12
 800392a:	2224      	movs	r2, #36	; 0x24
 800392c:	2100      	movs	r1, #0
 800392e:	4618      	mov	r0, r3
 8003930:	f01a f930 	bl	801db94 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003934:	463b      	mov	r3, r7
 8003936:	2200      	movs	r2, #0
 8003938:	601a      	str	r2, [r3, #0]
 800393a:	605a      	str	r2, [r3, #4]
 800393c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800393e:	4b21      	ldr	r3, [pc, #132]	; (80039c4 <MX_TIM2_Init+0xa4>)
 8003940:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003944:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003946:	4b1f      	ldr	r3, [pc, #124]	; (80039c4 <MX_TIM2_Init+0xa4>)
 8003948:	2200      	movs	r2, #0
 800394a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800394c:	4b1d      	ldr	r3, [pc, #116]	; (80039c4 <MX_TIM2_Init+0xa4>)
 800394e:	2200      	movs	r2, #0
 8003950:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8003952:	4b1c      	ldr	r3, [pc, #112]	; (80039c4 <MX_TIM2_Init+0xa4>)
 8003954:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003958:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800395a:	4b1a      	ldr	r3, [pc, #104]	; (80039c4 <MX_TIM2_Init+0xa4>)
 800395c:	2200      	movs	r2, #0
 800395e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003960:	4b18      	ldr	r3, [pc, #96]	; (80039c4 <MX_TIM2_Init+0xa4>)
 8003962:	2200      	movs	r2, #0
 8003964:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003966:	2301      	movs	r3, #1
 8003968:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800396a:	2300      	movs	r3, #0
 800396c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800396e:	2301      	movs	r3, #1
 8003970:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003972:	2300      	movs	r3, #0
 8003974:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003976:	2300      	movs	r3, #0
 8003978:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800397a:	2300      	movs	r3, #0
 800397c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800397e:	2301      	movs	r3, #1
 8003980:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003982:	2300      	movs	r3, #0
 8003984:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003986:	2300      	movs	r3, #0
 8003988:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800398a:	f107 030c 	add.w	r3, r7, #12
 800398e:	4619      	mov	r1, r3
 8003990:	480c      	ldr	r0, [pc, #48]	; (80039c4 <MX_TIM2_Init+0xa4>)
 8003992:	f003 f981 	bl	8006c98 <HAL_TIM_Encoder_Init>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d001      	beq.n	80039a0 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 800399c:	f7ff fbce 	bl	800313c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039a0:	2300      	movs	r3, #0
 80039a2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039a4:	2300      	movs	r3, #0
 80039a6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80039a8:	463b      	mov	r3, r7
 80039aa:	4619      	mov	r1, r3
 80039ac:	4805      	ldr	r0, [pc, #20]	; (80039c4 <MX_TIM2_Init+0xa4>)
 80039ae:	f004 f98b 	bl	8007cc8 <HAL_TIMEx_MasterConfigSynchronization>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d001      	beq.n	80039bc <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80039b8:	f7ff fbc0 	bl	800313c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80039bc:	bf00      	nop
 80039be:	3730      	adds	r7, #48	; 0x30
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	200069b4 	.word	0x200069b4

080039c8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b08c      	sub	sp, #48	; 0x30
 80039cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80039ce:	f107 030c 	add.w	r3, r7, #12
 80039d2:	2224      	movs	r2, #36	; 0x24
 80039d4:	2100      	movs	r1, #0
 80039d6:	4618      	mov	r0, r3
 80039d8:	f01a f8dc 	bl	801db94 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039dc:	463b      	mov	r3, r7
 80039de:	2200      	movs	r2, #0
 80039e0:	601a      	str	r2, [r3, #0]
 80039e2:	605a      	str	r2, [r3, #4]
 80039e4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80039e6:	4b21      	ldr	r3, [pc, #132]	; (8003a6c <MX_TIM3_Init+0xa4>)
 80039e8:	4a21      	ldr	r2, [pc, #132]	; (8003a70 <MX_TIM3_Init+0xa8>)
 80039ea:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80039ec:	4b1f      	ldr	r3, [pc, #124]	; (8003a6c <MX_TIM3_Init+0xa4>)
 80039ee:	2200      	movs	r2, #0
 80039f0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039f2:	4b1e      	ldr	r3, [pc, #120]	; (8003a6c <MX_TIM3_Init+0xa4>)
 80039f4:	2200      	movs	r2, #0
 80039f6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80039f8:	4b1c      	ldr	r3, [pc, #112]	; (8003a6c <MX_TIM3_Init+0xa4>)
 80039fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80039fe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a00:	4b1a      	ldr	r3, [pc, #104]	; (8003a6c <MX_TIM3_Init+0xa4>)
 8003a02:	2200      	movs	r2, #0
 8003a04:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a06:	4b19      	ldr	r3, [pc, #100]	; (8003a6c <MX_TIM3_Init+0xa4>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003a10:	2300      	movs	r3, #0
 8003a12:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003a14:	2301      	movs	r3, #1
 8003a16:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003a20:	2300      	movs	r3, #0
 8003a22:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003a24:	2301      	movs	r3, #1
 8003a26:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003a30:	f107 030c 	add.w	r3, r7, #12
 8003a34:	4619      	mov	r1, r3
 8003a36:	480d      	ldr	r0, [pc, #52]	; (8003a6c <MX_TIM3_Init+0xa4>)
 8003a38:	f003 f92e 	bl	8006c98 <HAL_TIM_Encoder_Init>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d001      	beq.n	8003a46 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8003a42:	f7ff fb7b 	bl	800313c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a46:	2300      	movs	r3, #0
 8003a48:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003a4e:	463b      	mov	r3, r7
 8003a50:	4619      	mov	r1, r3
 8003a52:	4806      	ldr	r0, [pc, #24]	; (8003a6c <MX_TIM3_Init+0xa4>)
 8003a54:	f004 f938 	bl	8007cc8 <HAL_TIMEx_MasterConfigSynchronization>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d001      	beq.n	8003a62 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8003a5e:	f7ff fb6d 	bl	800313c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003a62:	bf00      	nop
 8003a64:	3730      	adds	r7, #48	; 0x30
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	20006a00 	.word	0x20006a00
 8003a70:	40000400 	.word	0x40000400

08003a74 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b08c      	sub	sp, #48	; 0x30
 8003a78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003a7a:	f107 030c 	add.w	r3, r7, #12
 8003a7e:	2224      	movs	r2, #36	; 0x24
 8003a80:	2100      	movs	r1, #0
 8003a82:	4618      	mov	r0, r3
 8003a84:	f01a f886 	bl	801db94 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a88:	463b      	mov	r3, r7
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	601a      	str	r2, [r3, #0]
 8003a8e:	605a      	str	r2, [r3, #4]
 8003a90:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003a92:	4b21      	ldr	r3, [pc, #132]	; (8003b18 <MX_TIM4_Init+0xa4>)
 8003a94:	4a21      	ldr	r2, [pc, #132]	; (8003b1c <MX_TIM4_Init+0xa8>)
 8003a96:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003a98:	4b1f      	ldr	r3, [pc, #124]	; (8003b18 <MX_TIM4_Init+0xa4>)
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a9e:	4b1e      	ldr	r3, [pc, #120]	; (8003b18 <MX_TIM4_Init+0xa4>)
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003aa4:	4b1c      	ldr	r3, [pc, #112]	; (8003b18 <MX_TIM4_Init+0xa4>)
 8003aa6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003aaa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003aac:	4b1a      	ldr	r3, [pc, #104]	; (8003b18 <MX_TIM4_Init+0xa4>)
 8003aae:	2200      	movs	r2, #0
 8003ab0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ab2:	4b19      	ldr	r3, [pc, #100]	; (8003b18 <MX_TIM4_Init+0xa4>)
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003abc:	2300      	movs	r3, #0
 8003abe:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003acc:	2300      	movs	r3, #0
 8003ace:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003adc:	f107 030c 	add.w	r3, r7, #12
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	480d      	ldr	r0, [pc, #52]	; (8003b18 <MX_TIM4_Init+0xa4>)
 8003ae4:	f003 f8d8 	bl	8006c98 <HAL_TIM_Encoder_Init>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d001      	beq.n	8003af2 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8003aee:	f7ff fb25 	bl	800313c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003af2:	2300      	movs	r3, #0
 8003af4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003af6:	2300      	movs	r3, #0
 8003af8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003afa:	463b      	mov	r3, r7
 8003afc:	4619      	mov	r1, r3
 8003afe:	4806      	ldr	r0, [pc, #24]	; (8003b18 <MX_TIM4_Init+0xa4>)
 8003b00:	f004 f8e2 	bl	8007cc8 <HAL_TIMEx_MasterConfigSynchronization>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d001      	beq.n	8003b0e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8003b0a:	f7ff fb17 	bl	800313c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003b0e:	bf00      	nop
 8003b10:	3730      	adds	r7, #48	; 0x30
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	20006a4c 	.word	0x20006a4c
 8003b1c:	40000800 	.word	0x40000800

08003b20 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b08c      	sub	sp, #48	; 0x30
 8003b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003b26:	f107 030c 	add.w	r3, r7, #12
 8003b2a:	2224      	movs	r2, #36	; 0x24
 8003b2c:	2100      	movs	r1, #0
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f01a f830 	bl	801db94 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b34:	463b      	mov	r3, r7
 8003b36:	2200      	movs	r2, #0
 8003b38:	601a      	str	r2, [r3, #0]
 8003b3a:	605a      	str	r2, [r3, #4]
 8003b3c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003b3e:	4b21      	ldr	r3, [pc, #132]	; (8003bc4 <MX_TIM5_Init+0xa4>)
 8003b40:	4a21      	ldr	r2, [pc, #132]	; (8003bc8 <MX_TIM5_Init+0xa8>)
 8003b42:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8003b44:	4b1f      	ldr	r3, [pc, #124]	; (8003bc4 <MX_TIM5_Init+0xa4>)
 8003b46:	2200      	movs	r2, #0
 8003b48:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b4a:	4b1e      	ldr	r3, [pc, #120]	; (8003bc4 <MX_TIM5_Init+0xa4>)
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8003b50:	4b1c      	ldr	r3, [pc, #112]	; (8003bc4 <MX_TIM5_Init+0xa4>)
 8003b52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003b56:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b58:	4b1a      	ldr	r3, [pc, #104]	; (8003bc4 <MX_TIM5_Init+0xa4>)
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b5e:	4b19      	ldr	r3, [pc, #100]	; (8003bc4 <MX_TIM5_Init+0xa4>)
 8003b60:	2200      	movs	r2, #0
 8003b62:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003b64:	2301      	movs	r3, #1
 8003b66:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003b70:	2300      	movs	r3, #0
 8003b72:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003b74:	2300      	movs	r3, #0
 8003b76:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003b80:	2300      	movs	r3, #0
 8003b82:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003b84:	2300      	movs	r3, #0
 8003b86:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8003b88:	f107 030c 	add.w	r3, r7, #12
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	480d      	ldr	r0, [pc, #52]	; (8003bc4 <MX_TIM5_Init+0xa4>)
 8003b90:	f003 f882 	bl	8006c98 <HAL_TIM_Encoder_Init>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d001      	beq.n	8003b9e <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8003b9a:	f7ff facf 	bl	800313c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003ba6:	463b      	mov	r3, r7
 8003ba8:	4619      	mov	r1, r3
 8003baa:	4806      	ldr	r0, [pc, #24]	; (8003bc4 <MX_TIM5_Init+0xa4>)
 8003bac:	f004 f88c 	bl	8007cc8 <HAL_TIMEx_MasterConfigSynchronization>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d001      	beq.n	8003bba <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8003bb6:	f7ff fac1 	bl	800313c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003bba:	bf00      	nop
 8003bbc:	3730      	adds	r7, #48	; 0x30
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	20006a98 	.word	0x20006a98
 8003bc8:	40000c00 	.word	0x40000c00

08003bcc <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b08c      	sub	sp, #48	; 0x30
 8003bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003bd2:	f107 030c 	add.w	r3, r7, #12
 8003bd6:	2224      	movs	r2, #36	; 0x24
 8003bd8:	2100      	movs	r1, #0
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f019 ffda 	bl	801db94 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003be0:	463b      	mov	r3, r7
 8003be2:	2200      	movs	r2, #0
 8003be4:	601a      	str	r2, [r3, #0]
 8003be6:	605a      	str	r2, [r3, #4]
 8003be8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003bea:	4b23      	ldr	r3, [pc, #140]	; (8003c78 <MX_TIM8_Init+0xac>)
 8003bec:	4a23      	ldr	r2, [pc, #140]	; (8003c7c <MX_TIM8_Init+0xb0>)
 8003bee:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8003bf0:	4b21      	ldr	r3, [pc, #132]	; (8003c78 <MX_TIM8_Init+0xac>)
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bf6:	4b20      	ldr	r3, [pc, #128]	; (8003c78 <MX_TIM8_Init+0xac>)
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8003bfc:	4b1e      	ldr	r3, [pc, #120]	; (8003c78 <MX_TIM8_Init+0xac>)
 8003bfe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c02:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c04:	4b1c      	ldr	r3, [pc, #112]	; (8003c78 <MX_TIM8_Init+0xac>)
 8003c06:	2200      	movs	r2, #0
 8003c08:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003c0a:	4b1b      	ldr	r3, [pc, #108]	; (8003c78 <MX_TIM8_Init+0xac>)
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c10:	4b19      	ldr	r3, [pc, #100]	; (8003c78 <MX_TIM8_Init+0xac>)
 8003c12:	2200      	movs	r2, #0
 8003c14:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003c16:	2301      	movs	r3, #1
 8003c18:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003c22:	2300      	movs	r3, #0
 8003c24:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003c26:	2300      	movs	r3, #0
 8003c28:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003c32:	2300      	movs	r3, #0
 8003c34:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003c36:	2300      	movs	r3, #0
 8003c38:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8003c3a:	f107 030c 	add.w	r3, r7, #12
 8003c3e:	4619      	mov	r1, r3
 8003c40:	480d      	ldr	r0, [pc, #52]	; (8003c78 <MX_TIM8_Init+0xac>)
 8003c42:	f003 f829 	bl	8006c98 <HAL_TIM_Encoder_Init>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d001      	beq.n	8003c50 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8003c4c:	f7ff fa76 	bl	800313c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c50:	2300      	movs	r3, #0
 8003c52:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003c54:	2300      	movs	r3, #0
 8003c56:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003c5c:	463b      	mov	r3, r7
 8003c5e:	4619      	mov	r1, r3
 8003c60:	4805      	ldr	r0, [pc, #20]	; (8003c78 <MX_TIM8_Init+0xac>)
 8003c62:	f004 f831 	bl	8007cc8 <HAL_TIMEx_MasterConfigSynchronization>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d001      	beq.n	8003c70 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8003c6c:	f7ff fa66 	bl	800313c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8003c70:	bf00      	nop
 8003c72:	3730      	adds	r7, #48	; 0x30
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	20006ae4 	.word	0x20006ae4
 8003c7c:	40010400 	.word	0x40010400

08003c80 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b088      	sub	sp, #32
 8003c84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003c86:	1d3b      	adds	r3, r7, #4
 8003c88:	2200      	movs	r2, #0
 8003c8a:	601a      	str	r2, [r3, #0]
 8003c8c:	605a      	str	r2, [r3, #4]
 8003c8e:	609a      	str	r2, [r3, #8]
 8003c90:	60da      	str	r2, [r3, #12]
 8003c92:	611a      	str	r2, [r3, #16]
 8003c94:	615a      	str	r2, [r3, #20]
 8003c96:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8003c98:	4b1f      	ldr	r3, [pc, #124]	; (8003d18 <MX_TIM9_Init+0x98>)
 8003c9a:	4a20      	ldr	r2, [pc, #128]	; (8003d1c <MX_TIM9_Init+0x9c>)
 8003c9c:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8003c9e:	4b1e      	ldr	r3, [pc, #120]	; (8003d18 <MX_TIM9_Init+0x98>)
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ca4:	4b1c      	ldr	r3, [pc, #112]	; (8003d18 <MX_TIM9_Init+0x98>)
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8003caa:	4b1b      	ldr	r3, [pc, #108]	; (8003d18 <MX_TIM9_Init+0x98>)
 8003cac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003cb0:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003cb2:	4b19      	ldr	r3, [pc, #100]	; (8003d18 <MX_TIM9_Init+0x98>)
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003cb8:	4b17      	ldr	r3, [pc, #92]	; (8003d18 <MX_TIM9_Init+0x98>)
 8003cba:	2200      	movs	r2, #0
 8003cbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8003cbe:	4816      	ldr	r0, [pc, #88]	; (8003d18 <MX_TIM9_Init+0x98>)
 8003cc0:	f002 fe98 	bl	80069f4 <HAL_TIM_PWM_Init>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d001      	beq.n	8003cce <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 8003cca:	f7ff fa37 	bl	800313c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003cce:	2360      	movs	r3, #96	; 0x60
 8003cd0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003cde:	1d3b      	adds	r3, r7, #4
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	4619      	mov	r1, r3
 8003ce4:	480c      	ldr	r0, [pc, #48]	; (8003d18 <MX_TIM9_Init+0x98>)
 8003ce6:	f003 fa2b 	bl	8007140 <HAL_TIM_PWM_ConfigChannel>
 8003cea:	4603      	mov	r3, r0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d001      	beq.n	8003cf4 <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 8003cf0:	f7ff fa24 	bl	800313c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003cf4:	1d3b      	adds	r3, r7, #4
 8003cf6:	2204      	movs	r2, #4
 8003cf8:	4619      	mov	r1, r3
 8003cfa:	4807      	ldr	r0, [pc, #28]	; (8003d18 <MX_TIM9_Init+0x98>)
 8003cfc:	f003 fa20 	bl	8007140 <HAL_TIM_PWM_ConfigChannel>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d001      	beq.n	8003d0a <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 8003d06:	f7ff fa19 	bl	800313c <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8003d0a:	4803      	ldr	r0, [pc, #12]	; (8003d18 <MX_TIM9_Init+0x98>)
 8003d0c:	f000 f988 	bl	8004020 <HAL_TIM_MspPostInit>

}
 8003d10:	bf00      	nop
 8003d12:	3720      	adds	r7, #32
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	20006b30 	.word	0x20006b30
 8003d1c:	40014000 	.word	0x40014000

08003d20 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b085      	sub	sp, #20
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a0a      	ldr	r2, [pc, #40]	; (8003d58 <HAL_TIM_Base_MspInit+0x38>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d10b      	bne.n	8003d4a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003d32:	4b0a      	ldr	r3, [pc, #40]	; (8003d5c <HAL_TIM_Base_MspInit+0x3c>)
 8003d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d36:	4a09      	ldr	r2, [pc, #36]	; (8003d5c <HAL_TIM_Base_MspInit+0x3c>)
 8003d38:	f043 0301 	orr.w	r3, r3, #1
 8003d3c:	6453      	str	r3, [r2, #68]	; 0x44
 8003d3e:	4b07      	ldr	r3, [pc, #28]	; (8003d5c <HAL_TIM_Base_MspInit+0x3c>)
 8003d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d42:	f003 0301 	and.w	r3, r3, #1
 8003d46:	60fb      	str	r3, [r7, #12]
 8003d48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8003d4a:	bf00      	nop
 8003d4c:	3714      	adds	r7, #20
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr
 8003d56:	bf00      	nop
 8003d58:	40010000 	.word	0x40010000
 8003d5c:	40023800 	.word	0x40023800

08003d60 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b094      	sub	sp, #80	; 0x50
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d68:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	601a      	str	r2, [r3, #0]
 8003d70:	605a      	str	r2, [r3, #4]
 8003d72:	609a      	str	r2, [r3, #8]
 8003d74:	60da      	str	r2, [r3, #12]
 8003d76:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d80:	d144      	bne.n	8003e0c <HAL_TIM_Encoder_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003d82:	4b8e      	ldr	r3, [pc, #568]	; (8003fbc <HAL_TIM_Encoder_MspInit+0x25c>)
 8003d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d86:	4a8d      	ldr	r2, [pc, #564]	; (8003fbc <HAL_TIM_Encoder_MspInit+0x25c>)
 8003d88:	f043 0301 	orr.w	r3, r3, #1
 8003d8c:	6413      	str	r3, [r2, #64]	; 0x40
 8003d8e:	4b8b      	ldr	r3, [pc, #556]	; (8003fbc <HAL_TIM_Encoder_MspInit+0x25c>)
 8003d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d92:	f003 0301 	and.w	r3, r3, #1
 8003d96:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d9a:	4b88      	ldr	r3, [pc, #544]	; (8003fbc <HAL_TIM_Encoder_MspInit+0x25c>)
 8003d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9e:	4a87      	ldr	r2, [pc, #540]	; (8003fbc <HAL_TIM_Encoder_MspInit+0x25c>)
 8003da0:	f043 0301 	orr.w	r3, r3, #1
 8003da4:	6313      	str	r3, [r2, #48]	; 0x30
 8003da6:	4b85      	ldr	r3, [pc, #532]	; (8003fbc <HAL_TIM_Encoder_MspInit+0x25c>)
 8003da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003daa:	f003 0301 	and.w	r3, r3, #1
 8003dae:	637b      	str	r3, [r7, #52]	; 0x34
 8003db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003db2:	4b82      	ldr	r3, [pc, #520]	; (8003fbc <HAL_TIM_Encoder_MspInit+0x25c>)
 8003db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db6:	4a81      	ldr	r2, [pc, #516]	; (8003fbc <HAL_TIM_Encoder_MspInit+0x25c>)
 8003db8:	f043 0302 	orr.w	r3, r3, #2
 8003dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8003dbe:	4b7f      	ldr	r3, [pc, #508]	; (8003fbc <HAL_TIM_Encoder_MspInit+0x25c>)
 8003dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc2:	f003 0302 	and.w	r3, r3, #2
 8003dc6:	633b      	str	r3, [r7, #48]	; 0x30
 8003dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = MOTOR1_CHA_Pin;
 8003dca:	2320      	movs	r3, #32
 8003dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dce:	2302      	movs	r3, #2
 8003dd0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(MOTOR1_CHA_GPIO_Port, &GPIO_InitStruct);
 8003dde:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003de2:	4619      	mov	r1, r3
 8003de4:	4876      	ldr	r0, [pc, #472]	; (8003fc0 <HAL_TIM_Encoder_MspInit+0x260>)
 8003de6:	f001 f891 	bl	8004f0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTOR1_CHB_Pin;
 8003dea:	2308      	movs	r3, #8
 8003dec:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dee:	2302      	movs	r3, #2
 8003df0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003df2:	2300      	movs	r3, #0
 8003df4:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003df6:	2300      	movs	r3, #0
 8003df8:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(MOTOR1_CHB_GPIO_Port, &GPIO_InitStruct);
 8003dfe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003e02:	4619      	mov	r1, r3
 8003e04:	486f      	ldr	r0, [pc, #444]	; (8003fc4 <HAL_TIM_Encoder_MspInit+0x264>)
 8003e06:	f001 f881 	bl	8004f0c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8003e0a:	e0d3      	b.n	8003fb4 <HAL_TIM_Encoder_MspInit+0x254>
  else if(tim_encoderHandle->Instance==TIM3)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a6d      	ldr	r2, [pc, #436]	; (8003fc8 <HAL_TIM_Encoder_MspInit+0x268>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d144      	bne.n	8003ea0 <HAL_TIM_Encoder_MspInit+0x140>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003e16:	4b69      	ldr	r3, [pc, #420]	; (8003fbc <HAL_TIM_Encoder_MspInit+0x25c>)
 8003e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1a:	4a68      	ldr	r2, [pc, #416]	; (8003fbc <HAL_TIM_Encoder_MspInit+0x25c>)
 8003e1c:	f043 0302 	orr.w	r3, r3, #2
 8003e20:	6413      	str	r3, [r2, #64]	; 0x40
 8003e22:	4b66      	ldr	r3, [pc, #408]	; (8003fbc <HAL_TIM_Encoder_MspInit+0x25c>)
 8003e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e26:	f003 0302 	and.w	r3, r3, #2
 8003e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e2e:	4b63      	ldr	r3, [pc, #396]	; (8003fbc <HAL_TIM_Encoder_MspInit+0x25c>)
 8003e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e32:	4a62      	ldr	r2, [pc, #392]	; (8003fbc <HAL_TIM_Encoder_MspInit+0x25c>)
 8003e34:	f043 0301 	orr.w	r3, r3, #1
 8003e38:	6313      	str	r3, [r2, #48]	; 0x30
 8003e3a:	4b60      	ldr	r3, [pc, #384]	; (8003fbc <HAL_TIM_Encoder_MspInit+0x25c>)
 8003e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3e:	f003 0301 	and.w	r3, r3, #1
 8003e42:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e46:	4b5d      	ldr	r3, [pc, #372]	; (8003fbc <HAL_TIM_Encoder_MspInit+0x25c>)
 8003e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e4a:	4a5c      	ldr	r2, [pc, #368]	; (8003fbc <HAL_TIM_Encoder_MspInit+0x25c>)
 8003e4c:	f043 0302 	orr.w	r3, r3, #2
 8003e50:	6313      	str	r3, [r2, #48]	; 0x30
 8003e52:	4b5a      	ldr	r3, [pc, #360]	; (8003fbc <HAL_TIM_Encoder_MspInit+0x25c>)
 8003e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e56:	f003 0302 	and.w	r3, r3, #2
 8003e5a:	627b      	str	r3, [r7, #36]	; 0x24
 8003e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = MOTOR2_CHA_Pin;
 8003e5e:	2340      	movs	r3, #64	; 0x40
 8003e60:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e62:	2302      	movs	r3, #2
 8003e64:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e66:	2300      	movs	r3, #0
 8003e68:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003e6e:	2302      	movs	r3, #2
 8003e70:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(MOTOR2_CHA_GPIO_Port, &GPIO_InitStruct);
 8003e72:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003e76:	4619      	mov	r1, r3
 8003e78:	4851      	ldr	r0, [pc, #324]	; (8003fc0 <HAL_TIM_Encoder_MspInit+0x260>)
 8003e7a:	f001 f847 	bl	8004f0c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MOTOR2_CHB_Pin;
 8003e7e:	2320      	movs	r3, #32
 8003e80:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e82:	2302      	movs	r3, #2
 8003e84:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e86:	2300      	movs	r3, #0
 8003e88:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003e8e:	2302      	movs	r3, #2
 8003e90:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(MOTOR2_CHB_GPIO_Port, &GPIO_InitStruct);
 8003e92:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003e96:	4619      	mov	r1, r3
 8003e98:	484a      	ldr	r0, [pc, #296]	; (8003fc4 <HAL_TIM_Encoder_MspInit+0x264>)
 8003e9a:	f001 f837 	bl	8004f0c <HAL_GPIO_Init>
}
 8003e9e:	e089      	b.n	8003fb4 <HAL_TIM_Encoder_MspInit+0x254>
  else if(tim_encoderHandle->Instance==TIM4)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a49      	ldr	r2, [pc, #292]	; (8003fcc <HAL_TIM_Encoder_MspInit+0x26c>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d129      	bne.n	8003efe <HAL_TIM_Encoder_MspInit+0x19e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003eaa:	4b44      	ldr	r3, [pc, #272]	; (8003fbc <HAL_TIM_Encoder_MspInit+0x25c>)
 8003eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eae:	4a43      	ldr	r2, [pc, #268]	; (8003fbc <HAL_TIM_Encoder_MspInit+0x25c>)
 8003eb0:	f043 0304 	orr.w	r3, r3, #4
 8003eb4:	6413      	str	r3, [r2, #64]	; 0x40
 8003eb6:	4b41      	ldr	r3, [pc, #260]	; (8003fbc <HAL_TIM_Encoder_MspInit+0x25c>)
 8003eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eba:	f003 0304 	and.w	r3, r3, #4
 8003ebe:	623b      	str	r3, [r7, #32]
 8003ec0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ec2:	4b3e      	ldr	r3, [pc, #248]	; (8003fbc <HAL_TIM_Encoder_MspInit+0x25c>)
 8003ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec6:	4a3d      	ldr	r2, [pc, #244]	; (8003fbc <HAL_TIM_Encoder_MspInit+0x25c>)
 8003ec8:	f043 0308 	orr.w	r3, r3, #8
 8003ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8003ece:	4b3b      	ldr	r3, [pc, #236]	; (8003fbc <HAL_TIM_Encoder_MspInit+0x25c>)
 8003ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed2:	f003 0308 	and.w	r3, r3, #8
 8003ed6:	61fb      	str	r3, [r7, #28]
 8003ed8:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = MOTOR3_CHA_Pin|MOTOR3_CHB_Pin;
 8003eda:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003ede:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ee0:	2302      	movs	r3, #2
 8003ee2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003eec:	2302      	movs	r3, #2
 8003eee:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003ef0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	4836      	ldr	r0, [pc, #216]	; (8003fd0 <HAL_TIM_Encoder_MspInit+0x270>)
 8003ef8:	f001 f808 	bl	8004f0c <HAL_GPIO_Init>
}
 8003efc:	e05a      	b.n	8003fb4 <HAL_TIM_Encoder_MspInit+0x254>
  else if(tim_encoderHandle->Instance==TIM5)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a34      	ldr	r2, [pc, #208]	; (8003fd4 <HAL_TIM_Encoder_MspInit+0x274>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d128      	bne.n	8003f5a <HAL_TIM_Encoder_MspInit+0x1fa>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003f08:	4b2c      	ldr	r3, [pc, #176]	; (8003fbc <HAL_TIM_Encoder_MspInit+0x25c>)
 8003f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0c:	4a2b      	ldr	r2, [pc, #172]	; (8003fbc <HAL_TIM_Encoder_MspInit+0x25c>)
 8003f0e:	f043 0308 	orr.w	r3, r3, #8
 8003f12:	6413      	str	r3, [r2, #64]	; 0x40
 8003f14:	4b29      	ldr	r3, [pc, #164]	; (8003fbc <HAL_TIM_Encoder_MspInit+0x25c>)
 8003f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f18:	f003 0308 	and.w	r3, r3, #8
 8003f1c:	61bb      	str	r3, [r7, #24]
 8003f1e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f20:	4b26      	ldr	r3, [pc, #152]	; (8003fbc <HAL_TIM_Encoder_MspInit+0x25c>)
 8003f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f24:	4a25      	ldr	r2, [pc, #148]	; (8003fbc <HAL_TIM_Encoder_MspInit+0x25c>)
 8003f26:	f043 0301 	orr.w	r3, r3, #1
 8003f2a:	6313      	str	r3, [r2, #48]	; 0x30
 8003f2c:	4b23      	ldr	r3, [pc, #140]	; (8003fbc <HAL_TIM_Encoder_MspInit+0x25c>)
 8003f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f30:	f003 0301 	and.w	r3, r3, #1
 8003f34:	617b      	str	r3, [r7, #20]
 8003f36:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MOTOR4_CHA_Pin|MOTOR4_CHB_Pin;
 8003f38:	2303      	movs	r3, #3
 8003f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f3c:	2302      	movs	r3, #2
 8003f3e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f40:	2300      	movs	r3, #0
 8003f42:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f44:	2300      	movs	r3, #0
 8003f46:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003f48:	2302      	movs	r3, #2
 8003f4a:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f4c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003f50:	4619      	mov	r1, r3
 8003f52:	481b      	ldr	r0, [pc, #108]	; (8003fc0 <HAL_TIM_Encoder_MspInit+0x260>)
 8003f54:	f000 ffda 	bl	8004f0c <HAL_GPIO_Init>
}
 8003f58:	e02c      	b.n	8003fb4 <HAL_TIM_Encoder_MspInit+0x254>
  else if(tim_encoderHandle->Instance==TIM8)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a1e      	ldr	r2, [pc, #120]	; (8003fd8 <HAL_TIM_Encoder_MspInit+0x278>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d127      	bne.n	8003fb4 <HAL_TIM_Encoder_MspInit+0x254>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003f64:	4b15      	ldr	r3, [pc, #84]	; (8003fbc <HAL_TIM_Encoder_MspInit+0x25c>)
 8003f66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f68:	4a14      	ldr	r2, [pc, #80]	; (8003fbc <HAL_TIM_Encoder_MspInit+0x25c>)
 8003f6a:	f043 0302 	orr.w	r3, r3, #2
 8003f6e:	6453      	str	r3, [r2, #68]	; 0x44
 8003f70:	4b12      	ldr	r3, [pc, #72]	; (8003fbc <HAL_TIM_Encoder_MspInit+0x25c>)
 8003f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f74:	f003 0302 	and.w	r3, r3, #2
 8003f78:	613b      	str	r3, [r7, #16]
 8003f7a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f7c:	4b0f      	ldr	r3, [pc, #60]	; (8003fbc <HAL_TIM_Encoder_MspInit+0x25c>)
 8003f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f80:	4a0e      	ldr	r2, [pc, #56]	; (8003fbc <HAL_TIM_Encoder_MspInit+0x25c>)
 8003f82:	f043 0304 	orr.w	r3, r3, #4
 8003f86:	6313      	str	r3, [r2, #48]	; 0x30
 8003f88:	4b0c      	ldr	r3, [pc, #48]	; (8003fbc <HAL_TIM_Encoder_MspInit+0x25c>)
 8003f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f8c:	f003 0304 	and.w	r3, r3, #4
 8003f90:	60fb      	str	r3, [r7, #12]
 8003f92:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR5_CHA_Pin|MOTOR5_CHB_Pin;
 8003f94:	23c0      	movs	r3, #192	; 0xc0
 8003f96:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f98:	2302      	movs	r3, #2
 8003f9a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003fa8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003fac:	4619      	mov	r1, r3
 8003fae:	480b      	ldr	r0, [pc, #44]	; (8003fdc <HAL_TIM_Encoder_MspInit+0x27c>)
 8003fb0:	f000 ffac 	bl	8004f0c <HAL_GPIO_Init>
}
 8003fb4:	bf00      	nop
 8003fb6:	3750      	adds	r7, #80	; 0x50
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	40023800 	.word	0x40023800
 8003fc0:	40020000 	.word	0x40020000
 8003fc4:	40020400 	.word	0x40020400
 8003fc8:	40000400 	.word	0x40000400
 8003fcc:	40000800 	.word	0x40000800
 8003fd0:	40020c00 	.word	0x40020c00
 8003fd4:	40000c00 	.word	0x40000c00
 8003fd8:	40010400 	.word	0x40010400
 8003fdc:	40020800 	.word	0x40020800

08003fe0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b085      	sub	sp, #20
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM9)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a0a      	ldr	r2, [pc, #40]	; (8004018 <HAL_TIM_PWM_MspInit+0x38>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d10b      	bne.n	800400a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* TIM9 clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8003ff2:	4b0a      	ldr	r3, [pc, #40]	; (800401c <HAL_TIM_PWM_MspInit+0x3c>)
 8003ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ff6:	4a09      	ldr	r2, [pc, #36]	; (800401c <HAL_TIM_PWM_MspInit+0x3c>)
 8003ff8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ffc:	6453      	str	r3, [r2, #68]	; 0x44
 8003ffe:	4b07      	ldr	r3, [pc, #28]	; (800401c <HAL_TIM_PWM_MspInit+0x3c>)
 8004000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004002:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004006:	60fb      	str	r3, [r7, #12]
 8004008:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 800400a:	bf00      	nop
 800400c:	3714      	adds	r7, #20
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr
 8004016:	bf00      	nop
 8004018:	40014000 	.word	0x40014000
 800401c:	40023800 	.word	0x40023800

08004020 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b08a      	sub	sp, #40	; 0x28
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004028:	f107 0314 	add.w	r3, r7, #20
 800402c:	2200      	movs	r2, #0
 800402e:	601a      	str	r2, [r3, #0]
 8004030:	605a      	str	r2, [r3, #4]
 8004032:	609a      	str	r2, [r3, #8]
 8004034:	60da      	str	r2, [r3, #12]
 8004036:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a22      	ldr	r2, [pc, #136]	; (80040c8 <HAL_TIM_MspPostInit+0xa8>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d11d      	bne.n	800407e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004042:	4b22      	ldr	r3, [pc, #136]	; (80040cc <HAL_TIM_MspPostInit+0xac>)
 8004044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004046:	4a21      	ldr	r2, [pc, #132]	; (80040cc <HAL_TIM_MspPostInit+0xac>)
 8004048:	f043 0310 	orr.w	r3, r3, #16
 800404c:	6313      	str	r3, [r2, #48]	; 0x30
 800404e:	4b1f      	ldr	r3, [pc, #124]	; (80040cc <HAL_TIM_MspPostInit+0xac>)
 8004050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004052:	f003 0310 	and.w	r3, r3, #16
 8004056:	613b      	str	r3, [r7, #16]
 8004058:	693b      	ldr	r3, [r7, #16]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = MOTOR1_PWM_Pin|MOTOR2_PWM_Pin|MOTOR3_PWM_Pin|MOTOR4_PWM_Pin;
 800405a:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 800405e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004060:	2302      	movs	r3, #2
 8004062:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004064:	2300      	movs	r3, #0
 8004066:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004068:	2300      	movs	r3, #0
 800406a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800406c:	2301      	movs	r3, #1
 800406e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004070:	f107 0314 	add.w	r3, r7, #20
 8004074:	4619      	mov	r1, r3
 8004076:	4816      	ldr	r0, [pc, #88]	; (80040d0 <HAL_TIM_MspPostInit+0xb0>)
 8004078:	f000 ff48 	bl	8004f0c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 800407c:	e020      	b.n	80040c0 <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM9)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a14      	ldr	r2, [pc, #80]	; (80040d4 <HAL_TIM_MspPostInit+0xb4>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d11b      	bne.n	80040c0 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004088:	4b10      	ldr	r3, [pc, #64]	; (80040cc <HAL_TIM_MspPostInit+0xac>)
 800408a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800408c:	4a0f      	ldr	r2, [pc, #60]	; (80040cc <HAL_TIM_MspPostInit+0xac>)
 800408e:	f043 0310 	orr.w	r3, r3, #16
 8004092:	6313      	str	r3, [r2, #48]	; 0x30
 8004094:	4b0d      	ldr	r3, [pc, #52]	; (80040cc <HAL_TIM_MspPostInit+0xac>)
 8004096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004098:	f003 0310 	and.w	r3, r3, #16
 800409c:	60fb      	str	r3, [r7, #12]
 800409e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR5_PWM_Pin|MOTOR6_PWM_Pin;
 80040a0:	2360      	movs	r3, #96	; 0x60
 80040a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040a4:	2302      	movs	r3, #2
 80040a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040a8:	2300      	movs	r3, #0
 80040aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040ac:	2300      	movs	r3, #0
 80040ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80040b0:	2303      	movs	r3, #3
 80040b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80040b4:	f107 0314 	add.w	r3, r7, #20
 80040b8:	4619      	mov	r1, r3
 80040ba:	4805      	ldr	r0, [pc, #20]	; (80040d0 <HAL_TIM_MspPostInit+0xb0>)
 80040bc:	f000 ff26 	bl	8004f0c <HAL_GPIO_Init>
}
 80040c0:	bf00      	nop
 80040c2:	3728      	adds	r7, #40	; 0x28
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	40010000 	.word	0x40010000
 80040cc:	40023800 	.word	0x40023800
 80040d0:	40021000 	.word	0x40021000
 80040d4:	40014000 	.word	0x40014000

080040d8 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80040dc:	4b14      	ldr	r3, [pc, #80]	; (8004130 <MX_USART3_UART_Init+0x58>)
 80040de:	4a15      	ldr	r2, [pc, #84]	; (8004134 <MX_USART3_UART_Init+0x5c>)
 80040e0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80040e2:	4b13      	ldr	r3, [pc, #76]	; (8004130 <MX_USART3_UART_Init+0x58>)
 80040e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80040e8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80040ea:	4b11      	ldr	r3, [pc, #68]	; (8004130 <MX_USART3_UART_Init+0x58>)
 80040ec:	2200      	movs	r2, #0
 80040ee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80040f0:	4b0f      	ldr	r3, [pc, #60]	; (8004130 <MX_USART3_UART_Init+0x58>)
 80040f2:	2200      	movs	r2, #0
 80040f4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80040f6:	4b0e      	ldr	r3, [pc, #56]	; (8004130 <MX_USART3_UART_Init+0x58>)
 80040f8:	2200      	movs	r2, #0
 80040fa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80040fc:	4b0c      	ldr	r3, [pc, #48]	; (8004130 <MX_USART3_UART_Init+0x58>)
 80040fe:	220c      	movs	r2, #12
 8004100:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004102:	4b0b      	ldr	r3, [pc, #44]	; (8004130 <MX_USART3_UART_Init+0x58>)
 8004104:	2200      	movs	r2, #0
 8004106:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004108:	4b09      	ldr	r3, [pc, #36]	; (8004130 <MX_USART3_UART_Init+0x58>)
 800410a:	2200      	movs	r2, #0
 800410c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800410e:	4b08      	ldr	r3, [pc, #32]	; (8004130 <MX_USART3_UART_Init+0x58>)
 8004110:	2200      	movs	r2, #0
 8004112:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004114:	4b06      	ldr	r3, [pc, #24]	; (8004130 <MX_USART3_UART_Init+0x58>)
 8004116:	2200      	movs	r2, #0
 8004118:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800411a:	4805      	ldr	r0, [pc, #20]	; (8004130 <MX_USART3_UART_Init+0x58>)
 800411c:	f003 fefe 	bl	8007f1c <HAL_UART_Init>
 8004120:	4603      	mov	r3, r0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d001      	beq.n	800412a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8004126:	f7ff f809 	bl	800313c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800412a:	bf00      	nop
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	20006b7c 	.word	0x20006b7c
 8004134:	40004800 	.word	0x40004800

08004138 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b0ae      	sub	sp, #184	; 0xb8
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004140:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004144:	2200      	movs	r2, #0
 8004146:	601a      	str	r2, [r3, #0]
 8004148:	605a      	str	r2, [r3, #4]
 800414a:	609a      	str	r2, [r3, #8]
 800414c:	60da      	str	r2, [r3, #12]
 800414e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004150:	f107 0314 	add.w	r3, r7, #20
 8004154:	2290      	movs	r2, #144	; 0x90
 8004156:	2100      	movs	r1, #0
 8004158:	4618      	mov	r0, r3
 800415a:	f019 fd1b 	bl	801db94 <memset>
  if(uartHandle->Instance==USART3)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a56      	ldr	r2, [pc, #344]	; (80042bc <HAL_UART_MspInit+0x184>)
 8004164:	4293      	cmp	r3, r2
 8004166:	f040 80a4 	bne.w	80042b2 <HAL_UART_MspInit+0x17a>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800416a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800416e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8004170:	2300      	movs	r3, #0
 8004172:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004174:	f107 0314 	add.w	r3, r7, #20
 8004178:	4618      	mov	r0, r3
 800417a:	f001 ff43 	bl	8006004 <HAL_RCCEx_PeriphCLKConfig>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d001      	beq.n	8004188 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8004184:	f7fe ffda 	bl	800313c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004188:	4b4d      	ldr	r3, [pc, #308]	; (80042c0 <HAL_UART_MspInit+0x188>)
 800418a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418c:	4a4c      	ldr	r2, [pc, #304]	; (80042c0 <HAL_UART_MspInit+0x188>)
 800418e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004192:	6413      	str	r3, [r2, #64]	; 0x40
 8004194:	4b4a      	ldr	r3, [pc, #296]	; (80042c0 <HAL_UART_MspInit+0x188>)
 8004196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004198:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800419c:	613b      	str	r3, [r7, #16]
 800419e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80041a0:	4b47      	ldr	r3, [pc, #284]	; (80042c0 <HAL_UART_MspInit+0x188>)
 80041a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a4:	4a46      	ldr	r2, [pc, #280]	; (80042c0 <HAL_UART_MspInit+0x188>)
 80041a6:	f043 0308 	orr.w	r3, r3, #8
 80041aa:	6313      	str	r3, [r2, #48]	; 0x30
 80041ac:	4b44      	ldr	r3, [pc, #272]	; (80042c0 <HAL_UART_MspInit+0x188>)
 80041ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b0:	f003 0308 	and.w	r3, r3, #8
 80041b4:	60fb      	str	r3, [r7, #12]
 80041b6:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80041b8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80041bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041c0:	2302      	movs	r3, #2
 80041c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041c6:	2300      	movs	r3, #0
 80041c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041cc:	2303      	movs	r3, #3
 80041ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80041d2:	2307      	movs	r3, #7
 80041d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80041d8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80041dc:	4619      	mov	r1, r3
 80041de:	4839      	ldr	r0, [pc, #228]	; (80042c4 <HAL_UART_MspInit+0x18c>)
 80041e0:	f000 fe94 	bl	8004f0c <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80041e4:	4b38      	ldr	r3, [pc, #224]	; (80042c8 <HAL_UART_MspInit+0x190>)
 80041e6:	4a39      	ldr	r2, [pc, #228]	; (80042cc <HAL_UART_MspInit+0x194>)
 80041e8:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 80041ea:	4b37      	ldr	r3, [pc, #220]	; (80042c8 <HAL_UART_MspInit+0x190>)
 80041ec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80041f0:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80041f2:	4b35      	ldr	r3, [pc, #212]	; (80042c8 <HAL_UART_MspInit+0x190>)
 80041f4:	2240      	movs	r2, #64	; 0x40
 80041f6:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80041f8:	4b33      	ldr	r3, [pc, #204]	; (80042c8 <HAL_UART_MspInit+0x190>)
 80041fa:	2200      	movs	r2, #0
 80041fc:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80041fe:	4b32      	ldr	r3, [pc, #200]	; (80042c8 <HAL_UART_MspInit+0x190>)
 8004200:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004204:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004206:	4b30      	ldr	r3, [pc, #192]	; (80042c8 <HAL_UART_MspInit+0x190>)
 8004208:	2200      	movs	r2, #0
 800420a:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800420c:	4b2e      	ldr	r3, [pc, #184]	; (80042c8 <HAL_UART_MspInit+0x190>)
 800420e:	2200      	movs	r2, #0
 8004210:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8004212:	4b2d      	ldr	r3, [pc, #180]	; (80042c8 <HAL_UART_MspInit+0x190>)
 8004214:	2200      	movs	r2, #0
 8004216:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004218:	4b2b      	ldr	r3, [pc, #172]	; (80042c8 <HAL_UART_MspInit+0x190>)
 800421a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800421e:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004220:	4b29      	ldr	r3, [pc, #164]	; (80042c8 <HAL_UART_MspInit+0x190>)
 8004222:	2200      	movs	r2, #0
 8004224:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8004226:	4828      	ldr	r0, [pc, #160]	; (80042c8 <HAL_UART_MspInit+0x190>)
 8004228:	f000 fa5a 	bl	80046e0 <HAL_DMA_Init>
 800422c:	4603      	mov	r3, r0
 800422e:	2b00      	cmp	r3, #0
 8004230:	d001      	beq.n	8004236 <HAL_UART_MspInit+0xfe>
    {
      Error_Handler();
 8004232:	f7fe ff83 	bl	800313c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a23      	ldr	r2, [pc, #140]	; (80042c8 <HAL_UART_MspInit+0x190>)
 800423a:	671a      	str	r2, [r3, #112]	; 0x70
 800423c:	4a22      	ldr	r2, [pc, #136]	; (80042c8 <HAL_UART_MspInit+0x190>)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8004242:	4b23      	ldr	r3, [pc, #140]	; (80042d0 <HAL_UART_MspInit+0x198>)
 8004244:	4a23      	ldr	r2, [pc, #140]	; (80042d4 <HAL_UART_MspInit+0x19c>)
 8004246:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8004248:	4b21      	ldr	r3, [pc, #132]	; (80042d0 <HAL_UART_MspInit+0x198>)
 800424a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800424e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004250:	4b1f      	ldr	r3, [pc, #124]	; (80042d0 <HAL_UART_MspInit+0x198>)
 8004252:	2200      	movs	r2, #0
 8004254:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004256:	4b1e      	ldr	r3, [pc, #120]	; (80042d0 <HAL_UART_MspInit+0x198>)
 8004258:	2200      	movs	r2, #0
 800425a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800425c:	4b1c      	ldr	r3, [pc, #112]	; (80042d0 <HAL_UART_MspInit+0x198>)
 800425e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004262:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004264:	4b1a      	ldr	r3, [pc, #104]	; (80042d0 <HAL_UART_MspInit+0x198>)
 8004266:	2200      	movs	r2, #0
 8004268:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800426a:	4b19      	ldr	r3, [pc, #100]	; (80042d0 <HAL_UART_MspInit+0x198>)
 800426c:	2200      	movs	r2, #0
 800426e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8004270:	4b17      	ldr	r3, [pc, #92]	; (80042d0 <HAL_UART_MspInit+0x198>)
 8004272:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004276:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004278:	4b15      	ldr	r3, [pc, #84]	; (80042d0 <HAL_UART_MspInit+0x198>)
 800427a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800427e:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004280:	4b13      	ldr	r3, [pc, #76]	; (80042d0 <HAL_UART_MspInit+0x198>)
 8004282:	2200      	movs	r2, #0
 8004284:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8004286:	4812      	ldr	r0, [pc, #72]	; (80042d0 <HAL_UART_MspInit+0x198>)
 8004288:	f000 fa2a 	bl	80046e0 <HAL_DMA_Init>
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d001      	beq.n	8004296 <HAL_UART_MspInit+0x15e>
    {
      Error_Handler();
 8004292:	f7fe ff53 	bl	800313c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a0d      	ldr	r2, [pc, #52]	; (80042d0 <HAL_UART_MspInit+0x198>)
 800429a:	675a      	str	r2, [r3, #116]	; 0x74
 800429c:	4a0c      	ldr	r2, [pc, #48]	; (80042d0 <HAL_UART_MspInit+0x198>)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80042a2:	2200      	movs	r2, #0
 80042a4:	2105      	movs	r1, #5
 80042a6:	2027      	movs	r0, #39	; 0x27
 80042a8:	f000 f9f0 	bl	800468c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80042ac:	2027      	movs	r0, #39	; 0x27
 80042ae:	f000 fa09 	bl	80046c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80042b2:	bf00      	nop
 80042b4:	37b8      	adds	r7, #184	; 0xb8
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	40004800 	.word	0x40004800
 80042c0:	40023800 	.word	0x40023800
 80042c4:	40020c00 	.word	0x40020c00
 80042c8:	20006c04 	.word	0x20006c04
 80042cc:	40026058 	.word	0x40026058
 80042d0:	20006c64 	.word	0x20006c64
 80042d4:	40026028 	.word	0x40026028

080042d8 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80042dc:	4b14      	ldr	r3, [pc, #80]	; (8004330 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80042de:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80042e2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80042e4:	4b12      	ldr	r3, [pc, #72]	; (8004330 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80042e6:	2206      	movs	r2, #6
 80042e8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80042ea:	4b11      	ldr	r3, [pc, #68]	; (8004330 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80042ec:	2202      	movs	r2, #2
 80042ee:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80042f0:	4b0f      	ldr	r3, [pc, #60]	; (8004330 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80042f2:	2200      	movs	r2, #0
 80042f4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80042f6:	4b0e      	ldr	r3, [pc, #56]	; (8004330 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80042f8:	2202      	movs	r2, #2
 80042fa:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80042fc:	4b0c      	ldr	r3, [pc, #48]	; (8004330 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80042fe:	2201      	movs	r2, #1
 8004300:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8004302:	4b0b      	ldr	r3, [pc, #44]	; (8004330 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004304:	2200      	movs	r2, #0
 8004306:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8004308:	4b09      	ldr	r3, [pc, #36]	; (8004330 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800430a:	2200      	movs	r2, #0
 800430c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800430e:	4b08      	ldr	r3, [pc, #32]	; (8004330 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004310:	2201      	movs	r2, #1
 8004312:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8004314:	4b06      	ldr	r3, [pc, #24]	; (8004330 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004316:	2200      	movs	r2, #0
 8004318:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800431a:	4805      	ldr	r0, [pc, #20]	; (8004330 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800431c:	f000 ffd3 	bl	80052c6 <HAL_PCD_Init>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d001      	beq.n	800432a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8004326:	f7fe ff09 	bl	800313c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800432a:	bf00      	nop
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	20006cc4 	.word	0x20006cc4

08004334 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b0ae      	sub	sp, #184	; 0xb8
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800433c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004340:	2200      	movs	r2, #0
 8004342:	601a      	str	r2, [r3, #0]
 8004344:	605a      	str	r2, [r3, #4]
 8004346:	609a      	str	r2, [r3, #8]
 8004348:	60da      	str	r2, [r3, #12]
 800434a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800434c:	f107 0314 	add.w	r3, r7, #20
 8004350:	2290      	movs	r2, #144	; 0x90
 8004352:	2100      	movs	r1, #0
 8004354:	4618      	mov	r0, r3
 8004356:	f019 fc1d 	bl	801db94 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004362:	d159      	bne.n	8004418 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8004364:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004368:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800436a:	2300      	movs	r3, #0
 800436c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004370:	f107 0314 	add.w	r3, r7, #20
 8004374:	4618      	mov	r0, r3
 8004376:	f001 fe45 	bl	8006004 <HAL_RCCEx_PeriphCLKConfig>
 800437a:	4603      	mov	r3, r0
 800437c:	2b00      	cmp	r3, #0
 800437e:	d001      	beq.n	8004384 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8004380:	f7fe fedc 	bl	800313c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004384:	4b26      	ldr	r3, [pc, #152]	; (8004420 <HAL_PCD_MspInit+0xec>)
 8004386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004388:	4a25      	ldr	r2, [pc, #148]	; (8004420 <HAL_PCD_MspInit+0xec>)
 800438a:	f043 0301 	orr.w	r3, r3, #1
 800438e:	6313      	str	r3, [r2, #48]	; 0x30
 8004390:	4b23      	ldr	r3, [pc, #140]	; (8004420 <HAL_PCD_MspInit+0xec>)
 8004392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004394:	f003 0301 	and.w	r3, r3, #1
 8004398:	613b      	str	r3, [r7, #16]
 800439a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800439c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80043a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043a4:	2302      	movs	r3, #2
 80043a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043aa:	2300      	movs	r3, #0
 80043ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043b0:	2303      	movs	r3, #3
 80043b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80043b6:	230a      	movs	r3, #10
 80043b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043bc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80043c0:	4619      	mov	r1, r3
 80043c2:	4818      	ldr	r0, [pc, #96]	; (8004424 <HAL_PCD_MspInit+0xf0>)
 80043c4:	f000 fda2 	bl	8004f0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80043c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80043cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80043d0:	2300      	movs	r3, #0
 80043d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043d6:	2300      	movs	r3, #0
 80043d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80043dc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80043e0:	4619      	mov	r1, r3
 80043e2:	4810      	ldr	r0, [pc, #64]	; (8004424 <HAL_PCD_MspInit+0xf0>)
 80043e4:	f000 fd92 	bl	8004f0c <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80043e8:	4b0d      	ldr	r3, [pc, #52]	; (8004420 <HAL_PCD_MspInit+0xec>)
 80043ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043ec:	4a0c      	ldr	r2, [pc, #48]	; (8004420 <HAL_PCD_MspInit+0xec>)
 80043ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043f2:	6353      	str	r3, [r2, #52]	; 0x34
 80043f4:	4b0a      	ldr	r3, [pc, #40]	; (8004420 <HAL_PCD_MspInit+0xec>)
 80043f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043fc:	60fb      	str	r3, [r7, #12]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	4b07      	ldr	r3, [pc, #28]	; (8004420 <HAL_PCD_MspInit+0xec>)
 8004402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004404:	4a06      	ldr	r2, [pc, #24]	; (8004420 <HAL_PCD_MspInit+0xec>)
 8004406:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800440a:	6453      	str	r3, [r2, #68]	; 0x44
 800440c:	4b04      	ldr	r3, [pc, #16]	; (8004420 <HAL_PCD_MspInit+0xec>)
 800440e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004410:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004414:	60bb      	str	r3, [r7, #8]
 8004416:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8004418:	bf00      	nop
 800441a:	37b8      	adds	r7, #184	; 0xb8
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}
 8004420:	40023800 	.word	0x40023800
 8004424:	40020000 	.word	0x40020000

08004428 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004428:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004460 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800442c:	480d      	ldr	r0, [pc, #52]	; (8004464 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800442e:	490e      	ldr	r1, [pc, #56]	; (8004468 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004430:	4a0e      	ldr	r2, [pc, #56]	; (800446c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004432:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004434:	e002      	b.n	800443c <LoopCopyDataInit>

08004436 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004436:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004438:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800443a:	3304      	adds	r3, #4

0800443c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800443c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800443e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004440:	d3f9      	bcc.n	8004436 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004442:	4a0b      	ldr	r2, [pc, #44]	; (8004470 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004444:	4c0b      	ldr	r4, [pc, #44]	; (8004474 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004446:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004448:	e001      	b.n	800444e <LoopFillZerobss>

0800444a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800444a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800444c:	3204      	adds	r2, #4

0800444e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800444e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004450:	d3fb      	bcc.n	800444a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004452:	f7ff f983 	bl	800375c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004456:	f019 fc9f 	bl	801dd98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800445a:	f7fe fdab 	bl	8002fb4 <main>
  bx  lr    
 800445e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004460:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8004464:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004468:	2000247c 	.word	0x2000247c
  ldr r2, =_sidata
 800446c:	08020ec8 	.word	0x08020ec8
  ldr r2, =_sbss
 8004470:	20002480 	.word	0x20002480
  ldr r4, =_ebss
 8004474:	20010fd4 	.word	0x20010fd4

08004478 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004478:	e7fe      	b.n	8004478 <ADC_IRQHandler>

0800447a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800447a:	b580      	push	{r7, lr}
 800447c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800447e:	2003      	movs	r0, #3
 8004480:	f000 f8f9 	bl	8004676 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004484:	200f      	movs	r0, #15
 8004486:	f7fe ffeb 	bl	8003460 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800448a:	f7fe ffc1 	bl	8003410 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800448e:	2300      	movs	r3, #0
}
 8004490:	4618      	mov	r0, r3
 8004492:	bd80      	pop	{r7, pc}

08004494 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004494:	b480      	push	{r7}
 8004496:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004498:	4b06      	ldr	r3, [pc, #24]	; (80044b4 <HAL_IncTick+0x20>)
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	461a      	mov	r2, r3
 800449e:	4b06      	ldr	r3, [pc, #24]	; (80044b8 <HAL_IncTick+0x24>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4413      	add	r3, r2
 80044a4:	4a04      	ldr	r2, [pc, #16]	; (80044b8 <HAL_IncTick+0x24>)
 80044a6:	6013      	str	r3, [r2, #0]
}
 80044a8:	bf00      	nop
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr
 80044b2:	bf00      	nop
 80044b4:	2000000c 	.word	0x2000000c
 80044b8:	200071cc 	.word	0x200071cc

080044bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80044bc:	b480      	push	{r7}
 80044be:	af00      	add	r7, sp, #0
  return uwTick;
 80044c0:	4b03      	ldr	r3, [pc, #12]	; (80044d0 <HAL_GetTick+0x14>)
 80044c2:	681b      	ldr	r3, [r3, #0]
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr
 80044ce:	bf00      	nop
 80044d0:	200071cc 	.word	0x200071cc

080044d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b084      	sub	sp, #16
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80044dc:	f7ff ffee 	bl	80044bc <HAL_GetTick>
 80044e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044ec:	d005      	beq.n	80044fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80044ee:	4b0a      	ldr	r3, [pc, #40]	; (8004518 <HAL_Delay+0x44>)
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	461a      	mov	r2, r3
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	4413      	add	r3, r2
 80044f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80044fa:	bf00      	nop
 80044fc:	f7ff ffde 	bl	80044bc <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	68fa      	ldr	r2, [r7, #12]
 8004508:	429a      	cmp	r2, r3
 800450a:	d8f7      	bhi.n	80044fc <HAL_Delay+0x28>
  {
  }
}
 800450c:	bf00      	nop
 800450e:	bf00      	nop
 8004510:	3710      	adds	r7, #16
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	2000000c 	.word	0x2000000c

0800451c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800451c:	b480      	push	{r7}
 800451e:	b085      	sub	sp, #20
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f003 0307 	and.w	r3, r3, #7
 800452a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800452c:	4b0b      	ldr	r3, [pc, #44]	; (800455c <__NVIC_SetPriorityGrouping+0x40>)
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004532:	68ba      	ldr	r2, [r7, #8]
 8004534:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004538:	4013      	ands	r3, r2
 800453a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004544:	4b06      	ldr	r3, [pc, #24]	; (8004560 <__NVIC_SetPriorityGrouping+0x44>)
 8004546:	4313      	orrs	r3, r2
 8004548:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800454a:	4a04      	ldr	r2, [pc, #16]	; (800455c <__NVIC_SetPriorityGrouping+0x40>)
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	60d3      	str	r3, [r2, #12]
}
 8004550:	bf00      	nop
 8004552:	3714      	adds	r7, #20
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr
 800455c:	e000ed00 	.word	0xe000ed00
 8004560:	05fa0000 	.word	0x05fa0000

08004564 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004564:	b480      	push	{r7}
 8004566:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004568:	4b04      	ldr	r3, [pc, #16]	; (800457c <__NVIC_GetPriorityGrouping+0x18>)
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	0a1b      	lsrs	r3, r3, #8
 800456e:	f003 0307 	and.w	r3, r3, #7
}
 8004572:	4618      	mov	r0, r3
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr
 800457c:	e000ed00 	.word	0xe000ed00

08004580 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004580:	b480      	push	{r7}
 8004582:	b083      	sub	sp, #12
 8004584:	af00      	add	r7, sp, #0
 8004586:	4603      	mov	r3, r0
 8004588:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800458a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800458e:	2b00      	cmp	r3, #0
 8004590:	db0b      	blt.n	80045aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004592:	79fb      	ldrb	r3, [r7, #7]
 8004594:	f003 021f 	and.w	r2, r3, #31
 8004598:	4907      	ldr	r1, [pc, #28]	; (80045b8 <__NVIC_EnableIRQ+0x38>)
 800459a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800459e:	095b      	lsrs	r3, r3, #5
 80045a0:	2001      	movs	r0, #1
 80045a2:	fa00 f202 	lsl.w	r2, r0, r2
 80045a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80045aa:	bf00      	nop
 80045ac:	370c      	adds	r7, #12
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	e000e100 	.word	0xe000e100

080045bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80045bc:	b480      	push	{r7}
 80045be:	b083      	sub	sp, #12
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	4603      	mov	r3, r0
 80045c4:	6039      	str	r1, [r7, #0]
 80045c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	db0a      	blt.n	80045e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	b2da      	uxtb	r2, r3
 80045d4:	490c      	ldr	r1, [pc, #48]	; (8004608 <__NVIC_SetPriority+0x4c>)
 80045d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045da:	0112      	lsls	r2, r2, #4
 80045dc:	b2d2      	uxtb	r2, r2
 80045de:	440b      	add	r3, r1
 80045e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80045e4:	e00a      	b.n	80045fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	b2da      	uxtb	r2, r3
 80045ea:	4908      	ldr	r1, [pc, #32]	; (800460c <__NVIC_SetPriority+0x50>)
 80045ec:	79fb      	ldrb	r3, [r7, #7]
 80045ee:	f003 030f 	and.w	r3, r3, #15
 80045f2:	3b04      	subs	r3, #4
 80045f4:	0112      	lsls	r2, r2, #4
 80045f6:	b2d2      	uxtb	r2, r2
 80045f8:	440b      	add	r3, r1
 80045fa:	761a      	strb	r2, [r3, #24]
}
 80045fc:	bf00      	nop
 80045fe:	370c      	adds	r7, #12
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr
 8004608:	e000e100 	.word	0xe000e100
 800460c:	e000ed00 	.word	0xe000ed00

08004610 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004610:	b480      	push	{r7}
 8004612:	b089      	sub	sp, #36	; 0x24
 8004614:	af00      	add	r7, sp, #0
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	60b9      	str	r1, [r7, #8]
 800461a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f003 0307 	and.w	r3, r3, #7
 8004622:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	f1c3 0307 	rsb	r3, r3, #7
 800462a:	2b04      	cmp	r3, #4
 800462c:	bf28      	it	cs
 800462e:	2304      	movcs	r3, #4
 8004630:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	3304      	adds	r3, #4
 8004636:	2b06      	cmp	r3, #6
 8004638:	d902      	bls.n	8004640 <NVIC_EncodePriority+0x30>
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	3b03      	subs	r3, #3
 800463e:	e000      	b.n	8004642 <NVIC_EncodePriority+0x32>
 8004640:	2300      	movs	r3, #0
 8004642:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004644:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004648:	69bb      	ldr	r3, [r7, #24]
 800464a:	fa02 f303 	lsl.w	r3, r2, r3
 800464e:	43da      	mvns	r2, r3
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	401a      	ands	r2, r3
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004658:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	fa01 f303 	lsl.w	r3, r1, r3
 8004662:	43d9      	mvns	r1, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004668:	4313      	orrs	r3, r2
         );
}
 800466a:	4618      	mov	r0, r3
 800466c:	3724      	adds	r7, #36	; 0x24
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr

08004676 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004676:	b580      	push	{r7, lr}
 8004678:	b082      	sub	sp, #8
 800467a:	af00      	add	r7, sp, #0
 800467c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f7ff ff4c 	bl	800451c <__NVIC_SetPriorityGrouping>
}
 8004684:	bf00      	nop
 8004686:	3708      	adds	r7, #8
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}

0800468c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800468c:	b580      	push	{r7, lr}
 800468e:	b086      	sub	sp, #24
 8004690:	af00      	add	r7, sp, #0
 8004692:	4603      	mov	r3, r0
 8004694:	60b9      	str	r1, [r7, #8]
 8004696:	607a      	str	r2, [r7, #4]
 8004698:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800469a:	2300      	movs	r3, #0
 800469c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800469e:	f7ff ff61 	bl	8004564 <__NVIC_GetPriorityGrouping>
 80046a2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	68b9      	ldr	r1, [r7, #8]
 80046a8:	6978      	ldr	r0, [r7, #20]
 80046aa:	f7ff ffb1 	bl	8004610 <NVIC_EncodePriority>
 80046ae:	4602      	mov	r2, r0
 80046b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046b4:	4611      	mov	r1, r2
 80046b6:	4618      	mov	r0, r3
 80046b8:	f7ff ff80 	bl	80045bc <__NVIC_SetPriority>
}
 80046bc:	bf00      	nop
 80046be:	3718      	adds	r7, #24
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}

080046c4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b082      	sub	sp, #8
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	4603      	mov	r3, r0
 80046cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7ff ff54 	bl	8004580 <__NVIC_EnableIRQ>
}
 80046d8:	bf00      	nop
 80046da:	3708      	adds	r7, #8
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}

080046e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b086      	sub	sp, #24
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80046e8:	2300      	movs	r3, #0
 80046ea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80046ec:	f7ff fee6 	bl	80044bc <HAL_GetTick>
 80046f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d101      	bne.n	80046fc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	e099      	b.n	8004830 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2202      	movs	r2, #2
 8004700:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2200      	movs	r2, #0
 8004708:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f022 0201 	bic.w	r2, r2, #1
 800471a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800471c:	e00f      	b.n	800473e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800471e:	f7ff fecd 	bl	80044bc <HAL_GetTick>
 8004722:	4602      	mov	r2, r0
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	2b05      	cmp	r3, #5
 800472a:	d908      	bls.n	800473e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2220      	movs	r2, #32
 8004730:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2203      	movs	r2, #3
 8004736:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e078      	b.n	8004830 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0301 	and.w	r3, r3, #1
 8004748:	2b00      	cmp	r3, #0
 800474a:	d1e8      	bne.n	800471e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004754:	697a      	ldr	r2, [r7, #20]
 8004756:	4b38      	ldr	r3, [pc, #224]	; (8004838 <HAL_DMA_Init+0x158>)
 8004758:	4013      	ands	r3, r2
 800475a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	685a      	ldr	r2, [r3, #4]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800476a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	691b      	ldr	r3, [r3, #16]
 8004770:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004776:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	699b      	ldr	r3, [r3, #24]
 800477c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004782:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6a1b      	ldr	r3, [r3, #32]
 8004788:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800478a:	697a      	ldr	r2, [r7, #20]
 800478c:	4313      	orrs	r3, r2
 800478e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004794:	2b04      	cmp	r3, #4
 8004796:	d107      	bne.n	80047a8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a0:	4313      	orrs	r3, r2
 80047a2:	697a      	ldr	r2, [r7, #20]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	697a      	ldr	r2, [r7, #20]
 80047ae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	695b      	ldr	r3, [r3, #20]
 80047b6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	f023 0307 	bic.w	r3, r3, #7
 80047be:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c4:	697a      	ldr	r2, [r7, #20]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ce:	2b04      	cmp	r3, #4
 80047d0:	d117      	bne.n	8004802 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d6:	697a      	ldr	r2, [r7, #20]
 80047d8:	4313      	orrs	r3, r2
 80047da:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d00e      	beq.n	8004802 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f000 fb15 	bl	8004e14 <DMA_CheckFifoParam>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d008      	beq.n	8004802 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2240      	movs	r2, #64	; 0x40
 80047f4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2201      	movs	r2, #1
 80047fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80047fe:	2301      	movs	r3, #1
 8004800:	e016      	b.n	8004830 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	697a      	ldr	r2, [r7, #20]
 8004808:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f000 facc 	bl	8004da8 <DMA_CalcBaseAndBitshift>
 8004810:	4603      	mov	r3, r0
 8004812:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004818:	223f      	movs	r2, #63	; 0x3f
 800481a:	409a      	lsls	r2, r3
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2200      	movs	r2, #0
 8004824:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2201      	movs	r2, #1
 800482a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800482e:	2300      	movs	r3, #0
}
 8004830:	4618      	mov	r0, r3
 8004832:	3718      	adds	r7, #24
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}
 8004838:	e010803f 	.word	0xe010803f

0800483c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b086      	sub	sp, #24
 8004840:	af00      	add	r7, sp, #0
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	607a      	str	r2, [r7, #4]
 8004848:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800484a:	2300      	movs	r3, #0
 800484c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004852:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800485a:	2b01      	cmp	r3, #1
 800485c:	d101      	bne.n	8004862 <HAL_DMA_Start_IT+0x26>
 800485e:	2302      	movs	r3, #2
 8004860:	e048      	b.n	80048f4 <HAL_DMA_Start_IT+0xb8>
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2201      	movs	r2, #1
 8004866:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004870:	b2db      	uxtb	r3, r3
 8004872:	2b01      	cmp	r3, #1
 8004874:	d137      	bne.n	80048e6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2202      	movs	r2, #2
 800487a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2200      	movs	r2, #0
 8004882:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	68b9      	ldr	r1, [r7, #8]
 800488a:	68f8      	ldr	r0, [r7, #12]
 800488c:	f000 fa5e 	bl	8004d4c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004894:	223f      	movs	r2, #63	; 0x3f
 8004896:	409a      	lsls	r2, r3
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f042 0216 	orr.w	r2, r2, #22
 80048aa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	695a      	ldr	r2, [r3, #20]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80048ba:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d007      	beq.n	80048d4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f042 0208 	orr.w	r2, r2, #8
 80048d2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f042 0201 	orr.w	r2, r2, #1
 80048e2:	601a      	str	r2, [r3, #0]
 80048e4:	e005      	b.n	80048f2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80048ee:	2302      	movs	r3, #2
 80048f0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80048f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3718      	adds	r7, #24
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}

080048fc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004908:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800490a:	f7ff fdd7 	bl	80044bc <HAL_GetTick>
 800490e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004916:	b2db      	uxtb	r3, r3
 8004918:	2b02      	cmp	r3, #2
 800491a:	d008      	beq.n	800492e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2280      	movs	r2, #128	; 0x80
 8004920:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e052      	b.n	80049d4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f022 0216 	bic.w	r2, r2, #22
 800493c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	695a      	ldr	r2, [r3, #20]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800494c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004952:	2b00      	cmp	r3, #0
 8004954:	d103      	bne.n	800495e <HAL_DMA_Abort+0x62>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800495a:	2b00      	cmp	r3, #0
 800495c:	d007      	beq.n	800496e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f022 0208 	bic.w	r2, r2, #8
 800496c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f022 0201 	bic.w	r2, r2, #1
 800497c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800497e:	e013      	b.n	80049a8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004980:	f7ff fd9c 	bl	80044bc <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	2b05      	cmp	r3, #5
 800498c:	d90c      	bls.n	80049a8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2220      	movs	r2, #32
 8004992:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2203      	movs	r2, #3
 8004998:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80049a4:	2303      	movs	r3, #3
 80049a6:	e015      	b.n	80049d4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 0301 	and.w	r3, r3, #1
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d1e4      	bne.n	8004980 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049ba:	223f      	movs	r2, #63	; 0x3f
 80049bc:	409a      	lsls	r2, r3
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2201      	movs	r2, #1
 80049c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80049d2:	2300      	movs	r3, #0
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3710      	adds	r7, #16
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}

080049dc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80049dc:	b480      	push	{r7}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	2b02      	cmp	r3, #2
 80049ee:	d004      	beq.n	80049fa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2280      	movs	r2, #128	; 0x80
 80049f4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e00c      	b.n	8004a14 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2205      	movs	r2, #5
 80049fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f022 0201 	bic.w	r2, r2, #1
 8004a10:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004a12:	2300      	movs	r3, #0
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	370c      	adds	r7, #12
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr

08004a20 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b086      	sub	sp, #24
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8004a2c:	4b8e      	ldr	r3, [pc, #568]	; (8004c68 <HAL_DMA_IRQHandler+0x248>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a8e      	ldr	r2, [pc, #568]	; (8004c6c <HAL_DMA_IRQHandler+0x24c>)
 8004a32:	fba2 2303 	umull	r2, r3, r2, r3
 8004a36:	0a9b      	lsrs	r3, r3, #10
 8004a38:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a3e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a4a:	2208      	movs	r2, #8
 8004a4c:	409a      	lsls	r2, r3
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	4013      	ands	r3, r2
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d01a      	beq.n	8004a8c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 0304 	and.w	r3, r3, #4
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d013      	beq.n	8004a8c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f022 0204 	bic.w	r2, r2, #4
 8004a72:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a78:	2208      	movs	r2, #8
 8004a7a:	409a      	lsls	r2, r3
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a84:	f043 0201 	orr.w	r2, r3, #1
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a90:	2201      	movs	r2, #1
 8004a92:	409a      	lsls	r2, r3
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	4013      	ands	r3, r2
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d012      	beq.n	8004ac2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	695b      	ldr	r3, [r3, #20]
 8004aa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d00b      	beq.n	8004ac2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aae:	2201      	movs	r2, #1
 8004ab0:	409a      	lsls	r2, r3
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aba:	f043 0202 	orr.w	r2, r3, #2
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ac6:	2204      	movs	r2, #4
 8004ac8:	409a      	lsls	r2, r3
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	4013      	ands	r3, r2
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d012      	beq.n	8004af8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0302 	and.w	r3, r3, #2
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d00b      	beq.n	8004af8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ae4:	2204      	movs	r2, #4
 8004ae6:	409a      	lsls	r2, r3
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004af0:	f043 0204 	orr.w	r2, r3, #4
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004afc:	2210      	movs	r2, #16
 8004afe:	409a      	lsls	r2, r3
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	4013      	ands	r3, r2
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d043      	beq.n	8004b90 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 0308 	and.w	r3, r3, #8
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d03c      	beq.n	8004b90 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b1a:	2210      	movs	r2, #16
 8004b1c:	409a      	lsls	r2, r3
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d018      	beq.n	8004b62 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d108      	bne.n	8004b50 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d024      	beq.n	8004b90 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	4798      	blx	r3
 8004b4e:	e01f      	b.n	8004b90 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d01b      	beq.n	8004b90 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	4798      	blx	r3
 8004b60:	e016      	b.n	8004b90 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d107      	bne.n	8004b80 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f022 0208 	bic.w	r2, r2, #8
 8004b7e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d003      	beq.n	8004b90 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b94:	2220      	movs	r2, #32
 8004b96:	409a      	lsls	r2, r3
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	f000 808f 	beq.w	8004cc0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 0310 	and.w	r3, r3, #16
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	f000 8087 	beq.w	8004cc0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bb6:	2220      	movs	r2, #32
 8004bb8:	409a      	lsls	r2, r3
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	2b05      	cmp	r3, #5
 8004bc8:	d136      	bne.n	8004c38 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f022 0216 	bic.w	r2, r2, #22
 8004bd8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	695a      	ldr	r2, [r3, #20]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004be8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d103      	bne.n	8004bfa <HAL_DMA_IRQHandler+0x1da>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d007      	beq.n	8004c0a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f022 0208 	bic.w	r2, r2, #8
 8004c08:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c0e:	223f      	movs	r2, #63	; 0x3f
 8004c10:	409a      	lsls	r2, r3
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2201      	movs	r2, #1
 8004c1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d07e      	beq.n	8004d2c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	4798      	blx	r3
        }
        return;
 8004c36:	e079      	b.n	8004d2c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d01d      	beq.n	8004c82 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d10d      	bne.n	8004c70 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d031      	beq.n	8004cc0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	4798      	blx	r3
 8004c64:	e02c      	b.n	8004cc0 <HAL_DMA_IRQHandler+0x2a0>
 8004c66:	bf00      	nop
 8004c68:	20000004 	.word	0x20000004
 8004c6c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d023      	beq.n	8004cc0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	4798      	blx	r3
 8004c80:	e01e      	b.n	8004cc0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d10f      	bne.n	8004cb0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f022 0210 	bic.w	r2, r2, #16
 8004c9e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d003      	beq.n	8004cc0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d032      	beq.n	8004d2e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ccc:	f003 0301 	and.w	r3, r3, #1
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d022      	beq.n	8004d1a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2205      	movs	r2, #5
 8004cd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f022 0201 	bic.w	r2, r2, #1
 8004cea:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	3301      	adds	r3, #1
 8004cf0:	60bb      	str	r3, [r7, #8]
 8004cf2:	697a      	ldr	r2, [r7, #20]
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d307      	bcc.n	8004d08 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0301 	and.w	r3, r3, #1
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d1f2      	bne.n	8004cec <HAL_DMA_IRQHandler+0x2cc>
 8004d06:	e000      	b.n	8004d0a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004d08:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d005      	beq.n	8004d2e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	4798      	blx	r3
 8004d2a:	e000      	b.n	8004d2e <HAL_DMA_IRQHandler+0x30e>
        return;
 8004d2c:	bf00      	nop
    }
  }
}
 8004d2e:	3718      	adds	r7, #24
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}

08004d34 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b083      	sub	sp, #12
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	370c      	adds	r7, #12
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr

08004d4c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b085      	sub	sp, #20
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	60b9      	str	r1, [r7, #8]
 8004d56:	607a      	str	r2, [r7, #4]
 8004d58:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004d68:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	683a      	ldr	r2, [r7, #0]
 8004d70:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	2b40      	cmp	r3, #64	; 0x40
 8004d78:	d108      	bne.n	8004d8c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	68ba      	ldr	r2, [r7, #8]
 8004d88:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004d8a:	e007      	b.n	8004d9c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	68ba      	ldr	r2, [r7, #8]
 8004d92:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	687a      	ldr	r2, [r7, #4]
 8004d9a:	60da      	str	r2, [r3, #12]
}
 8004d9c:	bf00      	nop
 8004d9e:	3714      	adds	r7, #20
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr

08004da8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b085      	sub	sp, #20
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	3b10      	subs	r3, #16
 8004db8:	4a13      	ldr	r2, [pc, #76]	; (8004e08 <DMA_CalcBaseAndBitshift+0x60>)
 8004dba:	fba2 2303 	umull	r2, r3, r2, r3
 8004dbe:	091b      	lsrs	r3, r3, #4
 8004dc0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004dc2:	4a12      	ldr	r2, [pc, #72]	; (8004e0c <DMA_CalcBaseAndBitshift+0x64>)
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	4413      	add	r3, r2
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	461a      	mov	r2, r3
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2b03      	cmp	r3, #3
 8004dd4:	d908      	bls.n	8004de8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	461a      	mov	r2, r3
 8004ddc:	4b0c      	ldr	r3, [pc, #48]	; (8004e10 <DMA_CalcBaseAndBitshift+0x68>)
 8004dde:	4013      	ands	r3, r2
 8004de0:	1d1a      	adds	r2, r3, #4
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	659a      	str	r2, [r3, #88]	; 0x58
 8004de6:	e006      	b.n	8004df6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	461a      	mov	r2, r3
 8004dee:	4b08      	ldr	r3, [pc, #32]	; (8004e10 <DMA_CalcBaseAndBitshift+0x68>)
 8004df0:	4013      	ands	r3, r2
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3714      	adds	r7, #20
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr
 8004e06:	bf00      	nop
 8004e08:	aaaaaaab 	.word	0xaaaaaaab
 8004e0c:	0801ec94 	.word	0x0801ec94
 8004e10:	fffffc00 	.word	0xfffffc00

08004e14 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b085      	sub	sp, #20
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e24:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	699b      	ldr	r3, [r3, #24]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d11f      	bne.n	8004e6e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	2b03      	cmp	r3, #3
 8004e32:	d856      	bhi.n	8004ee2 <DMA_CheckFifoParam+0xce>
 8004e34:	a201      	add	r2, pc, #4	; (adr r2, 8004e3c <DMA_CheckFifoParam+0x28>)
 8004e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e3a:	bf00      	nop
 8004e3c:	08004e4d 	.word	0x08004e4d
 8004e40:	08004e5f 	.word	0x08004e5f
 8004e44:	08004e4d 	.word	0x08004e4d
 8004e48:	08004ee3 	.word	0x08004ee3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d046      	beq.n	8004ee6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e5c:	e043      	b.n	8004ee6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e62:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004e66:	d140      	bne.n	8004eea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e6c:	e03d      	b.n	8004eea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	699b      	ldr	r3, [r3, #24]
 8004e72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e76:	d121      	bne.n	8004ebc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	2b03      	cmp	r3, #3
 8004e7c:	d837      	bhi.n	8004eee <DMA_CheckFifoParam+0xda>
 8004e7e:	a201      	add	r2, pc, #4	; (adr r2, 8004e84 <DMA_CheckFifoParam+0x70>)
 8004e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e84:	08004e95 	.word	0x08004e95
 8004e88:	08004e9b 	.word	0x08004e9b
 8004e8c:	08004e95 	.word	0x08004e95
 8004e90:	08004ead 	.word	0x08004ead
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	73fb      	strb	r3, [r7, #15]
      break;
 8004e98:	e030      	b.n	8004efc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d025      	beq.n	8004ef2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004eaa:	e022      	b.n	8004ef2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004eb4:	d11f      	bne.n	8004ef6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004eba:	e01c      	b.n	8004ef6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	2b02      	cmp	r3, #2
 8004ec0:	d903      	bls.n	8004eca <DMA_CheckFifoParam+0xb6>
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	2b03      	cmp	r3, #3
 8004ec6:	d003      	beq.n	8004ed0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004ec8:	e018      	b.n	8004efc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	73fb      	strb	r3, [r7, #15]
      break;
 8004ece:	e015      	b.n	8004efc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d00e      	beq.n	8004efa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	73fb      	strb	r3, [r7, #15]
      break;
 8004ee0:	e00b      	b.n	8004efa <DMA_CheckFifoParam+0xe6>
      break;
 8004ee2:	bf00      	nop
 8004ee4:	e00a      	b.n	8004efc <DMA_CheckFifoParam+0xe8>
      break;
 8004ee6:	bf00      	nop
 8004ee8:	e008      	b.n	8004efc <DMA_CheckFifoParam+0xe8>
      break;
 8004eea:	bf00      	nop
 8004eec:	e006      	b.n	8004efc <DMA_CheckFifoParam+0xe8>
      break;
 8004eee:	bf00      	nop
 8004ef0:	e004      	b.n	8004efc <DMA_CheckFifoParam+0xe8>
      break;
 8004ef2:	bf00      	nop
 8004ef4:	e002      	b.n	8004efc <DMA_CheckFifoParam+0xe8>
      break;   
 8004ef6:	bf00      	nop
 8004ef8:	e000      	b.n	8004efc <DMA_CheckFifoParam+0xe8>
      break;
 8004efa:	bf00      	nop
    }
  } 
  
  return status; 
 8004efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3714      	adds	r7, #20
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr
 8004f0a:	bf00      	nop

08004f0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b089      	sub	sp, #36	; 0x24
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004f16:	2300      	movs	r3, #0
 8004f18:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004f22:	2300      	movs	r3, #0
 8004f24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004f26:	2300      	movs	r3, #0
 8004f28:	61fb      	str	r3, [r7, #28]
 8004f2a:	e175      	b.n	8005218 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	69fb      	ldr	r3, [r7, #28]
 8004f30:	fa02 f303 	lsl.w	r3, r2, r3
 8004f34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	697a      	ldr	r2, [r7, #20]
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004f40:	693a      	ldr	r2, [r7, #16]
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	429a      	cmp	r2, r3
 8004f46:	f040 8164 	bne.w	8005212 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	f003 0303 	and.w	r3, r3, #3
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d005      	beq.n	8004f62 <HAL_GPIO_Init+0x56>
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	f003 0303 	and.w	r3, r3, #3
 8004f5e:	2b02      	cmp	r3, #2
 8004f60:	d130      	bne.n	8004fc4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004f68:	69fb      	ldr	r3, [r7, #28]
 8004f6a:	005b      	lsls	r3, r3, #1
 8004f6c:	2203      	movs	r2, #3
 8004f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f72:	43db      	mvns	r3, r3
 8004f74:	69ba      	ldr	r2, [r7, #24]
 8004f76:	4013      	ands	r3, r2
 8004f78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	68da      	ldr	r2, [r3, #12]
 8004f7e:	69fb      	ldr	r3, [r7, #28]
 8004f80:	005b      	lsls	r3, r3, #1
 8004f82:	fa02 f303 	lsl.w	r3, r2, r3
 8004f86:	69ba      	ldr	r2, [r7, #24]
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	69ba      	ldr	r2, [r7, #24]
 8004f90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004f98:	2201      	movs	r2, #1
 8004f9a:	69fb      	ldr	r3, [r7, #28]
 8004f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa0:	43db      	mvns	r3, r3
 8004fa2:	69ba      	ldr	r2, [r7, #24]
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	091b      	lsrs	r3, r3, #4
 8004fae:	f003 0201 	and.w	r2, r3, #1
 8004fb2:	69fb      	ldr	r3, [r7, #28]
 8004fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb8:	69ba      	ldr	r2, [r7, #24]
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	69ba      	ldr	r2, [r7, #24]
 8004fc2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	f003 0303 	and.w	r3, r3, #3
 8004fcc:	2b03      	cmp	r3, #3
 8004fce:	d017      	beq.n	8005000 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004fd6:	69fb      	ldr	r3, [r7, #28]
 8004fd8:	005b      	lsls	r3, r3, #1
 8004fda:	2203      	movs	r2, #3
 8004fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe0:	43db      	mvns	r3, r3
 8004fe2:	69ba      	ldr	r2, [r7, #24]
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	689a      	ldr	r2, [r3, #8]
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	005b      	lsls	r3, r3, #1
 8004ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff4:	69ba      	ldr	r2, [r7, #24]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	69ba      	ldr	r2, [r7, #24]
 8004ffe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	f003 0303 	and.w	r3, r3, #3
 8005008:	2b02      	cmp	r3, #2
 800500a:	d123      	bne.n	8005054 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	08da      	lsrs	r2, r3, #3
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	3208      	adds	r2, #8
 8005014:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005018:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800501a:	69fb      	ldr	r3, [r7, #28]
 800501c:	f003 0307 	and.w	r3, r3, #7
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	220f      	movs	r2, #15
 8005024:	fa02 f303 	lsl.w	r3, r2, r3
 8005028:	43db      	mvns	r3, r3
 800502a:	69ba      	ldr	r2, [r7, #24]
 800502c:	4013      	ands	r3, r2
 800502e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	691a      	ldr	r2, [r3, #16]
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	f003 0307 	and.w	r3, r3, #7
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	fa02 f303 	lsl.w	r3, r2, r3
 8005040:	69ba      	ldr	r2, [r7, #24]
 8005042:	4313      	orrs	r3, r2
 8005044:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	08da      	lsrs	r2, r3, #3
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	3208      	adds	r2, #8
 800504e:	69b9      	ldr	r1, [r7, #24]
 8005050:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800505a:	69fb      	ldr	r3, [r7, #28]
 800505c:	005b      	lsls	r3, r3, #1
 800505e:	2203      	movs	r2, #3
 8005060:	fa02 f303 	lsl.w	r3, r2, r3
 8005064:	43db      	mvns	r3, r3
 8005066:	69ba      	ldr	r2, [r7, #24]
 8005068:	4013      	ands	r3, r2
 800506a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	f003 0203 	and.w	r2, r3, #3
 8005074:	69fb      	ldr	r3, [r7, #28]
 8005076:	005b      	lsls	r3, r3, #1
 8005078:	fa02 f303 	lsl.w	r3, r2, r3
 800507c:	69ba      	ldr	r2, [r7, #24]
 800507e:	4313      	orrs	r3, r2
 8005080:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	69ba      	ldr	r2, [r7, #24]
 8005086:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005090:	2b00      	cmp	r3, #0
 8005092:	f000 80be 	beq.w	8005212 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005096:	4b66      	ldr	r3, [pc, #408]	; (8005230 <HAL_GPIO_Init+0x324>)
 8005098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800509a:	4a65      	ldr	r2, [pc, #404]	; (8005230 <HAL_GPIO_Init+0x324>)
 800509c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80050a0:	6453      	str	r3, [r2, #68]	; 0x44
 80050a2:	4b63      	ldr	r3, [pc, #396]	; (8005230 <HAL_GPIO_Init+0x324>)
 80050a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050aa:	60fb      	str	r3, [r7, #12]
 80050ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80050ae:	4a61      	ldr	r2, [pc, #388]	; (8005234 <HAL_GPIO_Init+0x328>)
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	089b      	lsrs	r3, r3, #2
 80050b4:	3302      	adds	r3, #2
 80050b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	f003 0303 	and.w	r3, r3, #3
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	220f      	movs	r2, #15
 80050c6:	fa02 f303 	lsl.w	r3, r2, r3
 80050ca:	43db      	mvns	r3, r3
 80050cc:	69ba      	ldr	r2, [r7, #24]
 80050ce:	4013      	ands	r3, r2
 80050d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4a58      	ldr	r2, [pc, #352]	; (8005238 <HAL_GPIO_Init+0x32c>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d037      	beq.n	800514a <HAL_GPIO_Init+0x23e>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4a57      	ldr	r2, [pc, #348]	; (800523c <HAL_GPIO_Init+0x330>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d031      	beq.n	8005146 <HAL_GPIO_Init+0x23a>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a56      	ldr	r2, [pc, #344]	; (8005240 <HAL_GPIO_Init+0x334>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d02b      	beq.n	8005142 <HAL_GPIO_Init+0x236>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a55      	ldr	r2, [pc, #340]	; (8005244 <HAL_GPIO_Init+0x338>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d025      	beq.n	800513e <HAL_GPIO_Init+0x232>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4a54      	ldr	r2, [pc, #336]	; (8005248 <HAL_GPIO_Init+0x33c>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d01f      	beq.n	800513a <HAL_GPIO_Init+0x22e>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a53      	ldr	r2, [pc, #332]	; (800524c <HAL_GPIO_Init+0x340>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d019      	beq.n	8005136 <HAL_GPIO_Init+0x22a>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a52      	ldr	r2, [pc, #328]	; (8005250 <HAL_GPIO_Init+0x344>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d013      	beq.n	8005132 <HAL_GPIO_Init+0x226>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	4a51      	ldr	r2, [pc, #324]	; (8005254 <HAL_GPIO_Init+0x348>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d00d      	beq.n	800512e <HAL_GPIO_Init+0x222>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4a50      	ldr	r2, [pc, #320]	; (8005258 <HAL_GPIO_Init+0x34c>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d007      	beq.n	800512a <HAL_GPIO_Init+0x21e>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4a4f      	ldr	r2, [pc, #316]	; (800525c <HAL_GPIO_Init+0x350>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d101      	bne.n	8005126 <HAL_GPIO_Init+0x21a>
 8005122:	2309      	movs	r3, #9
 8005124:	e012      	b.n	800514c <HAL_GPIO_Init+0x240>
 8005126:	230a      	movs	r3, #10
 8005128:	e010      	b.n	800514c <HAL_GPIO_Init+0x240>
 800512a:	2308      	movs	r3, #8
 800512c:	e00e      	b.n	800514c <HAL_GPIO_Init+0x240>
 800512e:	2307      	movs	r3, #7
 8005130:	e00c      	b.n	800514c <HAL_GPIO_Init+0x240>
 8005132:	2306      	movs	r3, #6
 8005134:	e00a      	b.n	800514c <HAL_GPIO_Init+0x240>
 8005136:	2305      	movs	r3, #5
 8005138:	e008      	b.n	800514c <HAL_GPIO_Init+0x240>
 800513a:	2304      	movs	r3, #4
 800513c:	e006      	b.n	800514c <HAL_GPIO_Init+0x240>
 800513e:	2303      	movs	r3, #3
 8005140:	e004      	b.n	800514c <HAL_GPIO_Init+0x240>
 8005142:	2302      	movs	r3, #2
 8005144:	e002      	b.n	800514c <HAL_GPIO_Init+0x240>
 8005146:	2301      	movs	r3, #1
 8005148:	e000      	b.n	800514c <HAL_GPIO_Init+0x240>
 800514a:	2300      	movs	r3, #0
 800514c:	69fa      	ldr	r2, [r7, #28]
 800514e:	f002 0203 	and.w	r2, r2, #3
 8005152:	0092      	lsls	r2, r2, #2
 8005154:	4093      	lsls	r3, r2
 8005156:	69ba      	ldr	r2, [r7, #24]
 8005158:	4313      	orrs	r3, r2
 800515a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800515c:	4935      	ldr	r1, [pc, #212]	; (8005234 <HAL_GPIO_Init+0x328>)
 800515e:	69fb      	ldr	r3, [r7, #28]
 8005160:	089b      	lsrs	r3, r3, #2
 8005162:	3302      	adds	r3, #2
 8005164:	69ba      	ldr	r2, [r7, #24]
 8005166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800516a:	4b3d      	ldr	r3, [pc, #244]	; (8005260 <HAL_GPIO_Init+0x354>)
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	43db      	mvns	r3, r3
 8005174:	69ba      	ldr	r2, [r7, #24]
 8005176:	4013      	ands	r3, r2
 8005178:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005182:	2b00      	cmp	r3, #0
 8005184:	d003      	beq.n	800518e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005186:	69ba      	ldr	r2, [r7, #24]
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	4313      	orrs	r3, r2
 800518c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800518e:	4a34      	ldr	r2, [pc, #208]	; (8005260 <HAL_GPIO_Init+0x354>)
 8005190:	69bb      	ldr	r3, [r7, #24]
 8005192:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005194:	4b32      	ldr	r3, [pc, #200]	; (8005260 <HAL_GPIO_Init+0x354>)
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	43db      	mvns	r3, r3
 800519e:	69ba      	ldr	r2, [r7, #24]
 80051a0:	4013      	ands	r3, r2
 80051a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d003      	beq.n	80051b8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80051b0:	69ba      	ldr	r2, [r7, #24]
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80051b8:	4a29      	ldr	r2, [pc, #164]	; (8005260 <HAL_GPIO_Init+0x354>)
 80051ba:	69bb      	ldr	r3, [r7, #24]
 80051bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80051be:	4b28      	ldr	r3, [pc, #160]	; (8005260 <HAL_GPIO_Init+0x354>)
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	43db      	mvns	r3, r3
 80051c8:	69ba      	ldr	r2, [r7, #24]
 80051ca:	4013      	ands	r3, r2
 80051cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d003      	beq.n	80051e2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80051da:	69ba      	ldr	r2, [r7, #24]
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	4313      	orrs	r3, r2
 80051e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80051e2:	4a1f      	ldr	r2, [pc, #124]	; (8005260 <HAL_GPIO_Init+0x354>)
 80051e4:	69bb      	ldr	r3, [r7, #24]
 80051e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80051e8:	4b1d      	ldr	r3, [pc, #116]	; (8005260 <HAL_GPIO_Init+0x354>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	43db      	mvns	r3, r3
 80051f2:	69ba      	ldr	r2, [r7, #24]
 80051f4:	4013      	ands	r3, r2
 80051f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005200:	2b00      	cmp	r3, #0
 8005202:	d003      	beq.n	800520c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005204:	69ba      	ldr	r2, [r7, #24]
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	4313      	orrs	r3, r2
 800520a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800520c:	4a14      	ldr	r2, [pc, #80]	; (8005260 <HAL_GPIO_Init+0x354>)
 800520e:	69bb      	ldr	r3, [r7, #24]
 8005210:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	3301      	adds	r3, #1
 8005216:	61fb      	str	r3, [r7, #28]
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	2b0f      	cmp	r3, #15
 800521c:	f67f ae86 	bls.w	8004f2c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005220:	bf00      	nop
 8005222:	bf00      	nop
 8005224:	3724      	adds	r7, #36	; 0x24
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr
 800522e:	bf00      	nop
 8005230:	40023800 	.word	0x40023800
 8005234:	40013800 	.word	0x40013800
 8005238:	40020000 	.word	0x40020000
 800523c:	40020400 	.word	0x40020400
 8005240:	40020800 	.word	0x40020800
 8005244:	40020c00 	.word	0x40020c00
 8005248:	40021000 	.word	0x40021000
 800524c:	40021400 	.word	0x40021400
 8005250:	40021800 	.word	0x40021800
 8005254:	40021c00 	.word	0x40021c00
 8005258:	40022000 	.word	0x40022000
 800525c:	40022400 	.word	0x40022400
 8005260:	40013c00 	.word	0x40013c00

08005264 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005264:	b480      	push	{r7}
 8005266:	b085      	sub	sp, #20
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	460b      	mov	r3, r1
 800526e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	691a      	ldr	r2, [r3, #16]
 8005274:	887b      	ldrh	r3, [r7, #2]
 8005276:	4013      	ands	r3, r2
 8005278:	2b00      	cmp	r3, #0
 800527a:	d002      	beq.n	8005282 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800527c:	2301      	movs	r3, #1
 800527e:	73fb      	strb	r3, [r7, #15]
 8005280:	e001      	b.n	8005286 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005282:	2300      	movs	r3, #0
 8005284:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005286:	7bfb      	ldrb	r3, [r7, #15]
}
 8005288:	4618      	mov	r0, r3
 800528a:	3714      	adds	r7, #20
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr

08005294 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005294:	b480      	push	{r7}
 8005296:	b083      	sub	sp, #12
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	460b      	mov	r3, r1
 800529e:	807b      	strh	r3, [r7, #2]
 80052a0:	4613      	mov	r3, r2
 80052a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80052a4:	787b      	ldrb	r3, [r7, #1]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d003      	beq.n	80052b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80052aa:	887a      	ldrh	r2, [r7, #2]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80052b0:	e003      	b.n	80052ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80052b2:	887b      	ldrh	r3, [r7, #2]
 80052b4:	041a      	lsls	r2, r3, #16
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	619a      	str	r2, [r3, #24]
}
 80052ba:	bf00      	nop
 80052bc:	370c      	adds	r7, #12
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr

080052c6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80052c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052c8:	b08f      	sub	sp, #60	; 0x3c
 80052ca:	af0a      	add	r7, sp, #40	; 0x28
 80052cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d101      	bne.n	80052d8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	e116      	b.n	8005506 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d106      	bne.n	80052f8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f7ff f81e 	bl	8004334 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2203      	movs	r2, #3
 80052fc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005308:	2b00      	cmp	r3, #0
 800530a:	d102      	bne.n	8005312 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2200      	movs	r2, #0
 8005310:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4618      	mov	r0, r3
 8005318:	f004 f9f8 	bl	800970c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	603b      	str	r3, [r7, #0]
 8005322:	687e      	ldr	r6, [r7, #4]
 8005324:	466d      	mov	r5, sp
 8005326:	f106 0410 	add.w	r4, r6, #16
 800532a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800532c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800532e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005330:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005332:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005336:	e885 0003 	stmia.w	r5, {r0, r1}
 800533a:	1d33      	adds	r3, r6, #4
 800533c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800533e:	6838      	ldr	r0, [r7, #0]
 8005340:	f004 f98c 	bl	800965c <USB_CoreInit>
 8005344:	4603      	mov	r3, r0
 8005346:	2b00      	cmp	r3, #0
 8005348:	d005      	beq.n	8005356 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2202      	movs	r2, #2
 800534e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e0d7      	b.n	8005506 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	2100      	movs	r1, #0
 800535c:	4618      	mov	r0, r3
 800535e:	f004 f9e6 	bl	800972e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005362:	2300      	movs	r3, #0
 8005364:	73fb      	strb	r3, [r7, #15]
 8005366:	e04a      	b.n	80053fe <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005368:	7bfa      	ldrb	r2, [r7, #15]
 800536a:	6879      	ldr	r1, [r7, #4]
 800536c:	4613      	mov	r3, r2
 800536e:	00db      	lsls	r3, r3, #3
 8005370:	4413      	add	r3, r2
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	440b      	add	r3, r1
 8005376:	333d      	adds	r3, #61	; 0x3d
 8005378:	2201      	movs	r2, #1
 800537a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800537c:	7bfa      	ldrb	r2, [r7, #15]
 800537e:	6879      	ldr	r1, [r7, #4]
 8005380:	4613      	mov	r3, r2
 8005382:	00db      	lsls	r3, r3, #3
 8005384:	4413      	add	r3, r2
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	440b      	add	r3, r1
 800538a:	333c      	adds	r3, #60	; 0x3c
 800538c:	7bfa      	ldrb	r2, [r7, #15]
 800538e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005390:	7bfa      	ldrb	r2, [r7, #15]
 8005392:	7bfb      	ldrb	r3, [r7, #15]
 8005394:	b298      	uxth	r0, r3
 8005396:	6879      	ldr	r1, [r7, #4]
 8005398:	4613      	mov	r3, r2
 800539a:	00db      	lsls	r3, r3, #3
 800539c:	4413      	add	r3, r2
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	440b      	add	r3, r1
 80053a2:	3344      	adds	r3, #68	; 0x44
 80053a4:	4602      	mov	r2, r0
 80053a6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80053a8:	7bfa      	ldrb	r2, [r7, #15]
 80053aa:	6879      	ldr	r1, [r7, #4]
 80053ac:	4613      	mov	r3, r2
 80053ae:	00db      	lsls	r3, r3, #3
 80053b0:	4413      	add	r3, r2
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	440b      	add	r3, r1
 80053b6:	3340      	adds	r3, #64	; 0x40
 80053b8:	2200      	movs	r2, #0
 80053ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80053bc:	7bfa      	ldrb	r2, [r7, #15]
 80053be:	6879      	ldr	r1, [r7, #4]
 80053c0:	4613      	mov	r3, r2
 80053c2:	00db      	lsls	r3, r3, #3
 80053c4:	4413      	add	r3, r2
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	440b      	add	r3, r1
 80053ca:	3348      	adds	r3, #72	; 0x48
 80053cc:	2200      	movs	r2, #0
 80053ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80053d0:	7bfa      	ldrb	r2, [r7, #15]
 80053d2:	6879      	ldr	r1, [r7, #4]
 80053d4:	4613      	mov	r3, r2
 80053d6:	00db      	lsls	r3, r3, #3
 80053d8:	4413      	add	r3, r2
 80053da:	009b      	lsls	r3, r3, #2
 80053dc:	440b      	add	r3, r1
 80053de:	334c      	adds	r3, #76	; 0x4c
 80053e0:	2200      	movs	r2, #0
 80053e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80053e4:	7bfa      	ldrb	r2, [r7, #15]
 80053e6:	6879      	ldr	r1, [r7, #4]
 80053e8:	4613      	mov	r3, r2
 80053ea:	00db      	lsls	r3, r3, #3
 80053ec:	4413      	add	r3, r2
 80053ee:	009b      	lsls	r3, r3, #2
 80053f0:	440b      	add	r3, r1
 80053f2:	3354      	adds	r3, #84	; 0x54
 80053f4:	2200      	movs	r2, #0
 80053f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80053f8:	7bfb      	ldrb	r3, [r7, #15]
 80053fa:	3301      	adds	r3, #1
 80053fc:	73fb      	strb	r3, [r7, #15]
 80053fe:	7bfa      	ldrb	r2, [r7, #15]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	429a      	cmp	r2, r3
 8005406:	d3af      	bcc.n	8005368 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005408:	2300      	movs	r3, #0
 800540a:	73fb      	strb	r3, [r7, #15]
 800540c:	e044      	b.n	8005498 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800540e:	7bfa      	ldrb	r2, [r7, #15]
 8005410:	6879      	ldr	r1, [r7, #4]
 8005412:	4613      	mov	r3, r2
 8005414:	00db      	lsls	r3, r3, #3
 8005416:	4413      	add	r3, r2
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	440b      	add	r3, r1
 800541c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005420:	2200      	movs	r2, #0
 8005422:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005424:	7bfa      	ldrb	r2, [r7, #15]
 8005426:	6879      	ldr	r1, [r7, #4]
 8005428:	4613      	mov	r3, r2
 800542a:	00db      	lsls	r3, r3, #3
 800542c:	4413      	add	r3, r2
 800542e:	009b      	lsls	r3, r3, #2
 8005430:	440b      	add	r3, r1
 8005432:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005436:	7bfa      	ldrb	r2, [r7, #15]
 8005438:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800543a:	7bfa      	ldrb	r2, [r7, #15]
 800543c:	6879      	ldr	r1, [r7, #4]
 800543e:	4613      	mov	r3, r2
 8005440:	00db      	lsls	r3, r3, #3
 8005442:	4413      	add	r3, r2
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	440b      	add	r3, r1
 8005448:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800544c:	2200      	movs	r2, #0
 800544e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005450:	7bfa      	ldrb	r2, [r7, #15]
 8005452:	6879      	ldr	r1, [r7, #4]
 8005454:	4613      	mov	r3, r2
 8005456:	00db      	lsls	r3, r3, #3
 8005458:	4413      	add	r3, r2
 800545a:	009b      	lsls	r3, r3, #2
 800545c:	440b      	add	r3, r1
 800545e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005462:	2200      	movs	r2, #0
 8005464:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005466:	7bfa      	ldrb	r2, [r7, #15]
 8005468:	6879      	ldr	r1, [r7, #4]
 800546a:	4613      	mov	r3, r2
 800546c:	00db      	lsls	r3, r3, #3
 800546e:	4413      	add	r3, r2
 8005470:	009b      	lsls	r3, r3, #2
 8005472:	440b      	add	r3, r1
 8005474:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005478:	2200      	movs	r2, #0
 800547a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800547c:	7bfa      	ldrb	r2, [r7, #15]
 800547e:	6879      	ldr	r1, [r7, #4]
 8005480:	4613      	mov	r3, r2
 8005482:	00db      	lsls	r3, r3, #3
 8005484:	4413      	add	r3, r2
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	440b      	add	r3, r1
 800548a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800548e:	2200      	movs	r2, #0
 8005490:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005492:	7bfb      	ldrb	r3, [r7, #15]
 8005494:	3301      	adds	r3, #1
 8005496:	73fb      	strb	r3, [r7, #15]
 8005498:	7bfa      	ldrb	r2, [r7, #15]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	429a      	cmp	r2, r3
 80054a0:	d3b5      	bcc.n	800540e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	603b      	str	r3, [r7, #0]
 80054a8:	687e      	ldr	r6, [r7, #4]
 80054aa:	466d      	mov	r5, sp
 80054ac:	f106 0410 	add.w	r4, r6, #16
 80054b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80054b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80054b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80054b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80054b8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80054bc:	e885 0003 	stmia.w	r5, {r0, r1}
 80054c0:	1d33      	adds	r3, r6, #4
 80054c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80054c4:	6838      	ldr	r0, [r7, #0]
 80054c6:	f004 f97f 	bl	80097c8 <USB_DevInit>
 80054ca:	4603      	mov	r3, r0
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d005      	beq.n	80054dc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2202      	movs	r2, #2
 80054d4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	e014      	b.n	8005506 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2201      	movs	r2, #1
 80054e8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d102      	bne.n	80054fa <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f000 f80b 	bl	8005510 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4618      	mov	r0, r3
 8005500:	f004 fb3d 	bl	8009b7e <USB_DevDisconnect>

  return HAL_OK;
 8005504:	2300      	movs	r3, #0
}
 8005506:	4618      	mov	r0, r3
 8005508:	3714      	adds	r7, #20
 800550a:	46bd      	mov	sp, r7
 800550c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08005510 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005510:	b480      	push	{r7}
 8005512:	b085      	sub	sp, #20
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2201      	movs	r2, #1
 8005522:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	699b      	ldr	r3, [r3, #24]
 8005532:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800553e:	4b05      	ldr	r3, [pc, #20]	; (8005554 <HAL_PCDEx_ActivateLPM+0x44>)
 8005540:	4313      	orrs	r3, r2
 8005542:	68fa      	ldr	r2, [r7, #12]
 8005544:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005546:	2300      	movs	r3, #0
}
 8005548:	4618      	mov	r0, r3
 800554a:	3714      	adds	r7, #20
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr
 8005554:	10000003 	.word	0x10000003

08005558 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b082      	sub	sp, #8
 800555c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800555e:	2300      	movs	r3, #0
 8005560:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005562:	4b23      	ldr	r3, [pc, #140]	; (80055f0 <HAL_PWREx_EnableOverDrive+0x98>)
 8005564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005566:	4a22      	ldr	r2, [pc, #136]	; (80055f0 <HAL_PWREx_EnableOverDrive+0x98>)
 8005568:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800556c:	6413      	str	r3, [r2, #64]	; 0x40
 800556e:	4b20      	ldr	r3, [pc, #128]	; (80055f0 <HAL_PWREx_EnableOverDrive+0x98>)
 8005570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005576:	603b      	str	r3, [r7, #0]
 8005578:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800557a:	4b1e      	ldr	r3, [pc, #120]	; (80055f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a1d      	ldr	r2, [pc, #116]	; (80055f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005580:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005584:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005586:	f7fe ff99 	bl	80044bc <HAL_GetTick>
 800558a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800558c:	e009      	b.n	80055a2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800558e:	f7fe ff95 	bl	80044bc <HAL_GetTick>
 8005592:	4602      	mov	r2, r0
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	1ad3      	subs	r3, r2, r3
 8005598:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800559c:	d901      	bls.n	80055a2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800559e:	2303      	movs	r3, #3
 80055a0:	e022      	b.n	80055e8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80055a2:	4b14      	ldr	r3, [pc, #80]	; (80055f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055ae:	d1ee      	bne.n	800558e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80055b0:	4b10      	ldr	r3, [pc, #64]	; (80055f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a0f      	ldr	r2, [pc, #60]	; (80055f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80055b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055ba:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80055bc:	f7fe ff7e 	bl	80044bc <HAL_GetTick>
 80055c0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80055c2:	e009      	b.n	80055d8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80055c4:	f7fe ff7a 	bl	80044bc <HAL_GetTick>
 80055c8:	4602      	mov	r2, r0
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	1ad3      	subs	r3, r2, r3
 80055ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80055d2:	d901      	bls.n	80055d8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80055d4:	2303      	movs	r3, #3
 80055d6:	e007      	b.n	80055e8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80055d8:	4b06      	ldr	r3, [pc, #24]	; (80055f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055e4:	d1ee      	bne.n	80055c4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80055e6:	2300      	movs	r3, #0
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3708      	adds	r7, #8
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}
 80055f0:	40023800 	.word	0x40023800
 80055f4:	40007000 	.word	0x40007000

080055f8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b086      	sub	sp, #24
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005600:	2300      	movs	r3, #0
 8005602:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d101      	bne.n	800560e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	e29b      	b.n	8005b46 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 0301 	and.w	r3, r3, #1
 8005616:	2b00      	cmp	r3, #0
 8005618:	f000 8087 	beq.w	800572a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800561c:	4b96      	ldr	r3, [pc, #600]	; (8005878 <HAL_RCC_OscConfig+0x280>)
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	f003 030c 	and.w	r3, r3, #12
 8005624:	2b04      	cmp	r3, #4
 8005626:	d00c      	beq.n	8005642 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005628:	4b93      	ldr	r3, [pc, #588]	; (8005878 <HAL_RCC_OscConfig+0x280>)
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	f003 030c 	and.w	r3, r3, #12
 8005630:	2b08      	cmp	r3, #8
 8005632:	d112      	bne.n	800565a <HAL_RCC_OscConfig+0x62>
 8005634:	4b90      	ldr	r3, [pc, #576]	; (8005878 <HAL_RCC_OscConfig+0x280>)
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800563c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005640:	d10b      	bne.n	800565a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005642:	4b8d      	ldr	r3, [pc, #564]	; (8005878 <HAL_RCC_OscConfig+0x280>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800564a:	2b00      	cmp	r3, #0
 800564c:	d06c      	beq.n	8005728 <HAL_RCC_OscConfig+0x130>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d168      	bne.n	8005728 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	e275      	b.n	8005b46 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005662:	d106      	bne.n	8005672 <HAL_RCC_OscConfig+0x7a>
 8005664:	4b84      	ldr	r3, [pc, #528]	; (8005878 <HAL_RCC_OscConfig+0x280>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a83      	ldr	r2, [pc, #524]	; (8005878 <HAL_RCC_OscConfig+0x280>)
 800566a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800566e:	6013      	str	r3, [r2, #0]
 8005670:	e02e      	b.n	80056d0 <HAL_RCC_OscConfig+0xd8>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d10c      	bne.n	8005694 <HAL_RCC_OscConfig+0x9c>
 800567a:	4b7f      	ldr	r3, [pc, #508]	; (8005878 <HAL_RCC_OscConfig+0x280>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a7e      	ldr	r2, [pc, #504]	; (8005878 <HAL_RCC_OscConfig+0x280>)
 8005680:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005684:	6013      	str	r3, [r2, #0]
 8005686:	4b7c      	ldr	r3, [pc, #496]	; (8005878 <HAL_RCC_OscConfig+0x280>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a7b      	ldr	r2, [pc, #492]	; (8005878 <HAL_RCC_OscConfig+0x280>)
 800568c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005690:	6013      	str	r3, [r2, #0]
 8005692:	e01d      	b.n	80056d0 <HAL_RCC_OscConfig+0xd8>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800569c:	d10c      	bne.n	80056b8 <HAL_RCC_OscConfig+0xc0>
 800569e:	4b76      	ldr	r3, [pc, #472]	; (8005878 <HAL_RCC_OscConfig+0x280>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a75      	ldr	r2, [pc, #468]	; (8005878 <HAL_RCC_OscConfig+0x280>)
 80056a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80056a8:	6013      	str	r3, [r2, #0]
 80056aa:	4b73      	ldr	r3, [pc, #460]	; (8005878 <HAL_RCC_OscConfig+0x280>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a72      	ldr	r2, [pc, #456]	; (8005878 <HAL_RCC_OscConfig+0x280>)
 80056b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056b4:	6013      	str	r3, [r2, #0]
 80056b6:	e00b      	b.n	80056d0 <HAL_RCC_OscConfig+0xd8>
 80056b8:	4b6f      	ldr	r3, [pc, #444]	; (8005878 <HAL_RCC_OscConfig+0x280>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a6e      	ldr	r2, [pc, #440]	; (8005878 <HAL_RCC_OscConfig+0x280>)
 80056be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056c2:	6013      	str	r3, [r2, #0]
 80056c4:	4b6c      	ldr	r3, [pc, #432]	; (8005878 <HAL_RCC_OscConfig+0x280>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a6b      	ldr	r2, [pc, #428]	; (8005878 <HAL_RCC_OscConfig+0x280>)
 80056ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d013      	beq.n	8005700 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056d8:	f7fe fef0 	bl	80044bc <HAL_GetTick>
 80056dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056de:	e008      	b.n	80056f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056e0:	f7fe feec 	bl	80044bc <HAL_GetTick>
 80056e4:	4602      	mov	r2, r0
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	1ad3      	subs	r3, r2, r3
 80056ea:	2b64      	cmp	r3, #100	; 0x64
 80056ec:	d901      	bls.n	80056f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80056ee:	2303      	movs	r3, #3
 80056f0:	e229      	b.n	8005b46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056f2:	4b61      	ldr	r3, [pc, #388]	; (8005878 <HAL_RCC_OscConfig+0x280>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d0f0      	beq.n	80056e0 <HAL_RCC_OscConfig+0xe8>
 80056fe:	e014      	b.n	800572a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005700:	f7fe fedc 	bl	80044bc <HAL_GetTick>
 8005704:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005706:	e008      	b.n	800571a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005708:	f7fe fed8 	bl	80044bc <HAL_GetTick>
 800570c:	4602      	mov	r2, r0
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	1ad3      	subs	r3, r2, r3
 8005712:	2b64      	cmp	r3, #100	; 0x64
 8005714:	d901      	bls.n	800571a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005716:	2303      	movs	r3, #3
 8005718:	e215      	b.n	8005b46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800571a:	4b57      	ldr	r3, [pc, #348]	; (8005878 <HAL_RCC_OscConfig+0x280>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005722:	2b00      	cmp	r3, #0
 8005724:	d1f0      	bne.n	8005708 <HAL_RCC_OscConfig+0x110>
 8005726:	e000      	b.n	800572a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005728:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f003 0302 	and.w	r3, r3, #2
 8005732:	2b00      	cmp	r3, #0
 8005734:	d069      	beq.n	800580a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005736:	4b50      	ldr	r3, [pc, #320]	; (8005878 <HAL_RCC_OscConfig+0x280>)
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	f003 030c 	and.w	r3, r3, #12
 800573e:	2b00      	cmp	r3, #0
 8005740:	d00b      	beq.n	800575a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005742:	4b4d      	ldr	r3, [pc, #308]	; (8005878 <HAL_RCC_OscConfig+0x280>)
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	f003 030c 	and.w	r3, r3, #12
 800574a:	2b08      	cmp	r3, #8
 800574c:	d11c      	bne.n	8005788 <HAL_RCC_OscConfig+0x190>
 800574e:	4b4a      	ldr	r3, [pc, #296]	; (8005878 <HAL_RCC_OscConfig+0x280>)
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005756:	2b00      	cmp	r3, #0
 8005758:	d116      	bne.n	8005788 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800575a:	4b47      	ldr	r3, [pc, #284]	; (8005878 <HAL_RCC_OscConfig+0x280>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f003 0302 	and.w	r3, r3, #2
 8005762:	2b00      	cmp	r3, #0
 8005764:	d005      	beq.n	8005772 <HAL_RCC_OscConfig+0x17a>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	68db      	ldr	r3, [r3, #12]
 800576a:	2b01      	cmp	r3, #1
 800576c:	d001      	beq.n	8005772 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	e1e9      	b.n	8005b46 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005772:	4b41      	ldr	r3, [pc, #260]	; (8005878 <HAL_RCC_OscConfig+0x280>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	691b      	ldr	r3, [r3, #16]
 800577e:	00db      	lsls	r3, r3, #3
 8005780:	493d      	ldr	r1, [pc, #244]	; (8005878 <HAL_RCC_OscConfig+0x280>)
 8005782:	4313      	orrs	r3, r2
 8005784:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005786:	e040      	b.n	800580a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	68db      	ldr	r3, [r3, #12]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d023      	beq.n	80057d8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005790:	4b39      	ldr	r3, [pc, #228]	; (8005878 <HAL_RCC_OscConfig+0x280>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a38      	ldr	r2, [pc, #224]	; (8005878 <HAL_RCC_OscConfig+0x280>)
 8005796:	f043 0301 	orr.w	r3, r3, #1
 800579a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800579c:	f7fe fe8e 	bl	80044bc <HAL_GetTick>
 80057a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057a2:	e008      	b.n	80057b6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057a4:	f7fe fe8a 	bl	80044bc <HAL_GetTick>
 80057a8:	4602      	mov	r2, r0
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	1ad3      	subs	r3, r2, r3
 80057ae:	2b02      	cmp	r3, #2
 80057b0:	d901      	bls.n	80057b6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80057b2:	2303      	movs	r3, #3
 80057b4:	e1c7      	b.n	8005b46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057b6:	4b30      	ldr	r3, [pc, #192]	; (8005878 <HAL_RCC_OscConfig+0x280>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f003 0302 	and.w	r3, r3, #2
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d0f0      	beq.n	80057a4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057c2:	4b2d      	ldr	r3, [pc, #180]	; (8005878 <HAL_RCC_OscConfig+0x280>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	691b      	ldr	r3, [r3, #16]
 80057ce:	00db      	lsls	r3, r3, #3
 80057d0:	4929      	ldr	r1, [pc, #164]	; (8005878 <HAL_RCC_OscConfig+0x280>)
 80057d2:	4313      	orrs	r3, r2
 80057d4:	600b      	str	r3, [r1, #0]
 80057d6:	e018      	b.n	800580a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80057d8:	4b27      	ldr	r3, [pc, #156]	; (8005878 <HAL_RCC_OscConfig+0x280>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a26      	ldr	r2, [pc, #152]	; (8005878 <HAL_RCC_OscConfig+0x280>)
 80057de:	f023 0301 	bic.w	r3, r3, #1
 80057e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057e4:	f7fe fe6a 	bl	80044bc <HAL_GetTick>
 80057e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057ea:	e008      	b.n	80057fe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057ec:	f7fe fe66 	bl	80044bc <HAL_GetTick>
 80057f0:	4602      	mov	r2, r0
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	2b02      	cmp	r3, #2
 80057f8:	d901      	bls.n	80057fe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80057fa:	2303      	movs	r3, #3
 80057fc:	e1a3      	b.n	8005b46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057fe:	4b1e      	ldr	r3, [pc, #120]	; (8005878 <HAL_RCC_OscConfig+0x280>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f003 0302 	and.w	r3, r3, #2
 8005806:	2b00      	cmp	r3, #0
 8005808:	d1f0      	bne.n	80057ec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f003 0308 	and.w	r3, r3, #8
 8005812:	2b00      	cmp	r3, #0
 8005814:	d038      	beq.n	8005888 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	695b      	ldr	r3, [r3, #20]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d019      	beq.n	8005852 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800581e:	4b16      	ldr	r3, [pc, #88]	; (8005878 <HAL_RCC_OscConfig+0x280>)
 8005820:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005822:	4a15      	ldr	r2, [pc, #84]	; (8005878 <HAL_RCC_OscConfig+0x280>)
 8005824:	f043 0301 	orr.w	r3, r3, #1
 8005828:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800582a:	f7fe fe47 	bl	80044bc <HAL_GetTick>
 800582e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005830:	e008      	b.n	8005844 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005832:	f7fe fe43 	bl	80044bc <HAL_GetTick>
 8005836:	4602      	mov	r2, r0
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	1ad3      	subs	r3, r2, r3
 800583c:	2b02      	cmp	r3, #2
 800583e:	d901      	bls.n	8005844 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005840:	2303      	movs	r3, #3
 8005842:	e180      	b.n	8005b46 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005844:	4b0c      	ldr	r3, [pc, #48]	; (8005878 <HAL_RCC_OscConfig+0x280>)
 8005846:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005848:	f003 0302 	and.w	r3, r3, #2
 800584c:	2b00      	cmp	r3, #0
 800584e:	d0f0      	beq.n	8005832 <HAL_RCC_OscConfig+0x23a>
 8005850:	e01a      	b.n	8005888 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005852:	4b09      	ldr	r3, [pc, #36]	; (8005878 <HAL_RCC_OscConfig+0x280>)
 8005854:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005856:	4a08      	ldr	r2, [pc, #32]	; (8005878 <HAL_RCC_OscConfig+0x280>)
 8005858:	f023 0301 	bic.w	r3, r3, #1
 800585c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800585e:	f7fe fe2d 	bl	80044bc <HAL_GetTick>
 8005862:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005864:	e00a      	b.n	800587c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005866:	f7fe fe29 	bl	80044bc <HAL_GetTick>
 800586a:	4602      	mov	r2, r0
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	1ad3      	subs	r3, r2, r3
 8005870:	2b02      	cmp	r3, #2
 8005872:	d903      	bls.n	800587c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005874:	2303      	movs	r3, #3
 8005876:	e166      	b.n	8005b46 <HAL_RCC_OscConfig+0x54e>
 8005878:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800587c:	4b92      	ldr	r3, [pc, #584]	; (8005ac8 <HAL_RCC_OscConfig+0x4d0>)
 800587e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005880:	f003 0302 	and.w	r3, r3, #2
 8005884:	2b00      	cmp	r3, #0
 8005886:	d1ee      	bne.n	8005866 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f003 0304 	and.w	r3, r3, #4
 8005890:	2b00      	cmp	r3, #0
 8005892:	f000 80a4 	beq.w	80059de <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005896:	4b8c      	ldr	r3, [pc, #560]	; (8005ac8 <HAL_RCC_OscConfig+0x4d0>)
 8005898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800589a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d10d      	bne.n	80058be <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80058a2:	4b89      	ldr	r3, [pc, #548]	; (8005ac8 <HAL_RCC_OscConfig+0x4d0>)
 80058a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a6:	4a88      	ldr	r2, [pc, #544]	; (8005ac8 <HAL_RCC_OscConfig+0x4d0>)
 80058a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058ac:	6413      	str	r3, [r2, #64]	; 0x40
 80058ae:	4b86      	ldr	r3, [pc, #536]	; (8005ac8 <HAL_RCC_OscConfig+0x4d0>)
 80058b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058b6:	60bb      	str	r3, [r7, #8]
 80058b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058ba:	2301      	movs	r3, #1
 80058bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80058be:	4b83      	ldr	r3, [pc, #524]	; (8005acc <HAL_RCC_OscConfig+0x4d4>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d118      	bne.n	80058fc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80058ca:	4b80      	ldr	r3, [pc, #512]	; (8005acc <HAL_RCC_OscConfig+0x4d4>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a7f      	ldr	r2, [pc, #508]	; (8005acc <HAL_RCC_OscConfig+0x4d4>)
 80058d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058d6:	f7fe fdf1 	bl	80044bc <HAL_GetTick>
 80058da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80058dc:	e008      	b.n	80058f0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058de:	f7fe fded 	bl	80044bc <HAL_GetTick>
 80058e2:	4602      	mov	r2, r0
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	1ad3      	subs	r3, r2, r3
 80058e8:	2b64      	cmp	r3, #100	; 0x64
 80058ea:	d901      	bls.n	80058f0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80058ec:	2303      	movs	r3, #3
 80058ee:	e12a      	b.n	8005b46 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80058f0:	4b76      	ldr	r3, [pc, #472]	; (8005acc <HAL_RCC_OscConfig+0x4d4>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d0f0      	beq.n	80058de <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	2b01      	cmp	r3, #1
 8005902:	d106      	bne.n	8005912 <HAL_RCC_OscConfig+0x31a>
 8005904:	4b70      	ldr	r3, [pc, #448]	; (8005ac8 <HAL_RCC_OscConfig+0x4d0>)
 8005906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005908:	4a6f      	ldr	r2, [pc, #444]	; (8005ac8 <HAL_RCC_OscConfig+0x4d0>)
 800590a:	f043 0301 	orr.w	r3, r3, #1
 800590e:	6713      	str	r3, [r2, #112]	; 0x70
 8005910:	e02d      	b.n	800596e <HAL_RCC_OscConfig+0x376>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d10c      	bne.n	8005934 <HAL_RCC_OscConfig+0x33c>
 800591a:	4b6b      	ldr	r3, [pc, #428]	; (8005ac8 <HAL_RCC_OscConfig+0x4d0>)
 800591c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800591e:	4a6a      	ldr	r2, [pc, #424]	; (8005ac8 <HAL_RCC_OscConfig+0x4d0>)
 8005920:	f023 0301 	bic.w	r3, r3, #1
 8005924:	6713      	str	r3, [r2, #112]	; 0x70
 8005926:	4b68      	ldr	r3, [pc, #416]	; (8005ac8 <HAL_RCC_OscConfig+0x4d0>)
 8005928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800592a:	4a67      	ldr	r2, [pc, #412]	; (8005ac8 <HAL_RCC_OscConfig+0x4d0>)
 800592c:	f023 0304 	bic.w	r3, r3, #4
 8005930:	6713      	str	r3, [r2, #112]	; 0x70
 8005932:	e01c      	b.n	800596e <HAL_RCC_OscConfig+0x376>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	2b05      	cmp	r3, #5
 800593a:	d10c      	bne.n	8005956 <HAL_RCC_OscConfig+0x35e>
 800593c:	4b62      	ldr	r3, [pc, #392]	; (8005ac8 <HAL_RCC_OscConfig+0x4d0>)
 800593e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005940:	4a61      	ldr	r2, [pc, #388]	; (8005ac8 <HAL_RCC_OscConfig+0x4d0>)
 8005942:	f043 0304 	orr.w	r3, r3, #4
 8005946:	6713      	str	r3, [r2, #112]	; 0x70
 8005948:	4b5f      	ldr	r3, [pc, #380]	; (8005ac8 <HAL_RCC_OscConfig+0x4d0>)
 800594a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800594c:	4a5e      	ldr	r2, [pc, #376]	; (8005ac8 <HAL_RCC_OscConfig+0x4d0>)
 800594e:	f043 0301 	orr.w	r3, r3, #1
 8005952:	6713      	str	r3, [r2, #112]	; 0x70
 8005954:	e00b      	b.n	800596e <HAL_RCC_OscConfig+0x376>
 8005956:	4b5c      	ldr	r3, [pc, #368]	; (8005ac8 <HAL_RCC_OscConfig+0x4d0>)
 8005958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800595a:	4a5b      	ldr	r2, [pc, #364]	; (8005ac8 <HAL_RCC_OscConfig+0x4d0>)
 800595c:	f023 0301 	bic.w	r3, r3, #1
 8005960:	6713      	str	r3, [r2, #112]	; 0x70
 8005962:	4b59      	ldr	r3, [pc, #356]	; (8005ac8 <HAL_RCC_OscConfig+0x4d0>)
 8005964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005966:	4a58      	ldr	r2, [pc, #352]	; (8005ac8 <HAL_RCC_OscConfig+0x4d0>)
 8005968:	f023 0304 	bic.w	r3, r3, #4
 800596c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d015      	beq.n	80059a2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005976:	f7fe fda1 	bl	80044bc <HAL_GetTick>
 800597a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800597c:	e00a      	b.n	8005994 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800597e:	f7fe fd9d 	bl	80044bc <HAL_GetTick>
 8005982:	4602      	mov	r2, r0
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	1ad3      	subs	r3, r2, r3
 8005988:	f241 3288 	movw	r2, #5000	; 0x1388
 800598c:	4293      	cmp	r3, r2
 800598e:	d901      	bls.n	8005994 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005990:	2303      	movs	r3, #3
 8005992:	e0d8      	b.n	8005b46 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005994:	4b4c      	ldr	r3, [pc, #304]	; (8005ac8 <HAL_RCC_OscConfig+0x4d0>)
 8005996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005998:	f003 0302 	and.w	r3, r3, #2
 800599c:	2b00      	cmp	r3, #0
 800599e:	d0ee      	beq.n	800597e <HAL_RCC_OscConfig+0x386>
 80059a0:	e014      	b.n	80059cc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059a2:	f7fe fd8b 	bl	80044bc <HAL_GetTick>
 80059a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059a8:	e00a      	b.n	80059c0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059aa:	f7fe fd87 	bl	80044bc <HAL_GetTick>
 80059ae:	4602      	mov	r2, r0
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	1ad3      	subs	r3, r2, r3
 80059b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d901      	bls.n	80059c0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80059bc:	2303      	movs	r3, #3
 80059be:	e0c2      	b.n	8005b46 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059c0:	4b41      	ldr	r3, [pc, #260]	; (8005ac8 <HAL_RCC_OscConfig+0x4d0>)
 80059c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059c4:	f003 0302 	and.w	r3, r3, #2
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d1ee      	bne.n	80059aa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80059cc:	7dfb      	ldrb	r3, [r7, #23]
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d105      	bne.n	80059de <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059d2:	4b3d      	ldr	r3, [pc, #244]	; (8005ac8 <HAL_RCC_OscConfig+0x4d0>)
 80059d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d6:	4a3c      	ldr	r2, [pc, #240]	; (8005ac8 <HAL_RCC_OscConfig+0x4d0>)
 80059d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059dc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	699b      	ldr	r3, [r3, #24]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	f000 80ae 	beq.w	8005b44 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80059e8:	4b37      	ldr	r3, [pc, #220]	; (8005ac8 <HAL_RCC_OscConfig+0x4d0>)
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	f003 030c 	and.w	r3, r3, #12
 80059f0:	2b08      	cmp	r3, #8
 80059f2:	d06d      	beq.n	8005ad0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	699b      	ldr	r3, [r3, #24]
 80059f8:	2b02      	cmp	r3, #2
 80059fa:	d14b      	bne.n	8005a94 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059fc:	4b32      	ldr	r3, [pc, #200]	; (8005ac8 <HAL_RCC_OscConfig+0x4d0>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a31      	ldr	r2, [pc, #196]	; (8005ac8 <HAL_RCC_OscConfig+0x4d0>)
 8005a02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a08:	f7fe fd58 	bl	80044bc <HAL_GetTick>
 8005a0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a0e:	e008      	b.n	8005a22 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a10:	f7fe fd54 	bl	80044bc <HAL_GetTick>
 8005a14:	4602      	mov	r2, r0
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	1ad3      	subs	r3, r2, r3
 8005a1a:	2b02      	cmp	r3, #2
 8005a1c:	d901      	bls.n	8005a22 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005a1e:	2303      	movs	r3, #3
 8005a20:	e091      	b.n	8005b46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a22:	4b29      	ldr	r3, [pc, #164]	; (8005ac8 <HAL_RCC_OscConfig+0x4d0>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d1f0      	bne.n	8005a10 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	69da      	ldr	r2, [r3, #28]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6a1b      	ldr	r3, [r3, #32]
 8005a36:	431a      	orrs	r2, r3
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a3c:	019b      	lsls	r3, r3, #6
 8005a3e:	431a      	orrs	r2, r3
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a44:	085b      	lsrs	r3, r3, #1
 8005a46:	3b01      	subs	r3, #1
 8005a48:	041b      	lsls	r3, r3, #16
 8005a4a:	431a      	orrs	r2, r3
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a50:	061b      	lsls	r3, r3, #24
 8005a52:	431a      	orrs	r2, r3
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a58:	071b      	lsls	r3, r3, #28
 8005a5a:	491b      	ldr	r1, [pc, #108]	; (8005ac8 <HAL_RCC_OscConfig+0x4d0>)
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a60:	4b19      	ldr	r3, [pc, #100]	; (8005ac8 <HAL_RCC_OscConfig+0x4d0>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a18      	ldr	r2, [pc, #96]	; (8005ac8 <HAL_RCC_OscConfig+0x4d0>)
 8005a66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a6c:	f7fe fd26 	bl	80044bc <HAL_GetTick>
 8005a70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a72:	e008      	b.n	8005a86 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a74:	f7fe fd22 	bl	80044bc <HAL_GetTick>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	1ad3      	subs	r3, r2, r3
 8005a7e:	2b02      	cmp	r3, #2
 8005a80:	d901      	bls.n	8005a86 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8005a82:	2303      	movs	r3, #3
 8005a84:	e05f      	b.n	8005b46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a86:	4b10      	ldr	r3, [pc, #64]	; (8005ac8 <HAL_RCC_OscConfig+0x4d0>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d0f0      	beq.n	8005a74 <HAL_RCC_OscConfig+0x47c>
 8005a92:	e057      	b.n	8005b44 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a94:	4b0c      	ldr	r3, [pc, #48]	; (8005ac8 <HAL_RCC_OscConfig+0x4d0>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a0b      	ldr	r2, [pc, #44]	; (8005ac8 <HAL_RCC_OscConfig+0x4d0>)
 8005a9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aa0:	f7fe fd0c 	bl	80044bc <HAL_GetTick>
 8005aa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005aa6:	e008      	b.n	8005aba <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005aa8:	f7fe fd08 	bl	80044bc <HAL_GetTick>
 8005aac:	4602      	mov	r2, r0
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	1ad3      	subs	r3, r2, r3
 8005ab2:	2b02      	cmp	r3, #2
 8005ab4:	d901      	bls.n	8005aba <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8005ab6:	2303      	movs	r3, #3
 8005ab8:	e045      	b.n	8005b46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005aba:	4b03      	ldr	r3, [pc, #12]	; (8005ac8 <HAL_RCC_OscConfig+0x4d0>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d1f0      	bne.n	8005aa8 <HAL_RCC_OscConfig+0x4b0>
 8005ac6:	e03d      	b.n	8005b44 <HAL_RCC_OscConfig+0x54c>
 8005ac8:	40023800 	.word	0x40023800
 8005acc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005ad0:	4b1f      	ldr	r3, [pc, #124]	; (8005b50 <HAL_RCC_OscConfig+0x558>)
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	699b      	ldr	r3, [r3, #24]
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d030      	beq.n	8005b40 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d129      	bne.n	8005b40 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d122      	bne.n	8005b40 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005afa:	68fa      	ldr	r2, [r7, #12]
 8005afc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005b00:	4013      	ands	r3, r2
 8005b02:	687a      	ldr	r2, [r7, #4]
 8005b04:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005b06:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d119      	bne.n	8005b40 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b16:	085b      	lsrs	r3, r3, #1
 8005b18:	3b01      	subs	r3, #1
 8005b1a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d10f      	bne.n	8005b40 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b2a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d107      	bne.n	8005b40 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b3a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d001      	beq.n	8005b44 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8005b40:	2301      	movs	r3, #1
 8005b42:	e000      	b.n	8005b46 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8005b44:	2300      	movs	r3, #0
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3718      	adds	r7, #24
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}
 8005b4e:	bf00      	nop
 8005b50:	40023800 	.word	0x40023800

08005b54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b084      	sub	sp, #16
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d101      	bne.n	8005b6c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	e0d0      	b.n	8005d0e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005b6c:	4b6a      	ldr	r3, [pc, #424]	; (8005d18 <HAL_RCC_ClockConfig+0x1c4>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f003 030f 	and.w	r3, r3, #15
 8005b74:	683a      	ldr	r2, [r7, #0]
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d910      	bls.n	8005b9c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b7a:	4b67      	ldr	r3, [pc, #412]	; (8005d18 <HAL_RCC_ClockConfig+0x1c4>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f023 020f 	bic.w	r2, r3, #15
 8005b82:	4965      	ldr	r1, [pc, #404]	; (8005d18 <HAL_RCC_ClockConfig+0x1c4>)
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	4313      	orrs	r3, r2
 8005b88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b8a:	4b63      	ldr	r3, [pc, #396]	; (8005d18 <HAL_RCC_ClockConfig+0x1c4>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f003 030f 	and.w	r3, r3, #15
 8005b92:	683a      	ldr	r2, [r7, #0]
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d001      	beq.n	8005b9c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	e0b8      	b.n	8005d0e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f003 0302 	and.w	r3, r3, #2
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d020      	beq.n	8005bea <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f003 0304 	and.w	r3, r3, #4
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d005      	beq.n	8005bc0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005bb4:	4b59      	ldr	r3, [pc, #356]	; (8005d1c <HAL_RCC_ClockConfig+0x1c8>)
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	4a58      	ldr	r2, [pc, #352]	; (8005d1c <HAL_RCC_ClockConfig+0x1c8>)
 8005bba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005bbe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f003 0308 	and.w	r3, r3, #8
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d005      	beq.n	8005bd8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005bcc:	4b53      	ldr	r3, [pc, #332]	; (8005d1c <HAL_RCC_ClockConfig+0x1c8>)
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	4a52      	ldr	r2, [pc, #328]	; (8005d1c <HAL_RCC_ClockConfig+0x1c8>)
 8005bd2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005bd6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005bd8:	4b50      	ldr	r3, [pc, #320]	; (8005d1c <HAL_RCC_ClockConfig+0x1c8>)
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	494d      	ldr	r1, [pc, #308]	; (8005d1c <HAL_RCC_ClockConfig+0x1c8>)
 8005be6:	4313      	orrs	r3, r2
 8005be8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f003 0301 	and.w	r3, r3, #1
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d040      	beq.n	8005c78 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d107      	bne.n	8005c0e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bfe:	4b47      	ldr	r3, [pc, #284]	; (8005d1c <HAL_RCC_ClockConfig+0x1c8>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d115      	bne.n	8005c36 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	e07f      	b.n	8005d0e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	2b02      	cmp	r3, #2
 8005c14:	d107      	bne.n	8005c26 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c16:	4b41      	ldr	r3, [pc, #260]	; (8005d1c <HAL_RCC_ClockConfig+0x1c8>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d109      	bne.n	8005c36 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	e073      	b.n	8005d0e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c26:	4b3d      	ldr	r3, [pc, #244]	; (8005d1c <HAL_RCC_ClockConfig+0x1c8>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f003 0302 	and.w	r3, r3, #2
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d101      	bne.n	8005c36 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	e06b      	b.n	8005d0e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c36:	4b39      	ldr	r3, [pc, #228]	; (8005d1c <HAL_RCC_ClockConfig+0x1c8>)
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	f023 0203 	bic.w	r2, r3, #3
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	4936      	ldr	r1, [pc, #216]	; (8005d1c <HAL_RCC_ClockConfig+0x1c8>)
 8005c44:	4313      	orrs	r3, r2
 8005c46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c48:	f7fe fc38 	bl	80044bc <HAL_GetTick>
 8005c4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c4e:	e00a      	b.n	8005c66 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c50:	f7fe fc34 	bl	80044bc <HAL_GetTick>
 8005c54:	4602      	mov	r2, r0
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	1ad3      	subs	r3, r2, r3
 8005c5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d901      	bls.n	8005c66 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005c62:	2303      	movs	r3, #3
 8005c64:	e053      	b.n	8005d0e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c66:	4b2d      	ldr	r3, [pc, #180]	; (8005d1c <HAL_RCC_ClockConfig+0x1c8>)
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	f003 020c 	and.w	r2, r3, #12
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	009b      	lsls	r3, r3, #2
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d1eb      	bne.n	8005c50 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005c78:	4b27      	ldr	r3, [pc, #156]	; (8005d18 <HAL_RCC_ClockConfig+0x1c4>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f003 030f 	and.w	r3, r3, #15
 8005c80:	683a      	ldr	r2, [r7, #0]
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d210      	bcs.n	8005ca8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c86:	4b24      	ldr	r3, [pc, #144]	; (8005d18 <HAL_RCC_ClockConfig+0x1c4>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f023 020f 	bic.w	r2, r3, #15
 8005c8e:	4922      	ldr	r1, [pc, #136]	; (8005d18 <HAL_RCC_ClockConfig+0x1c4>)
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	4313      	orrs	r3, r2
 8005c94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c96:	4b20      	ldr	r3, [pc, #128]	; (8005d18 <HAL_RCC_ClockConfig+0x1c4>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f003 030f 	and.w	r3, r3, #15
 8005c9e:	683a      	ldr	r2, [r7, #0]
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d001      	beq.n	8005ca8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	e032      	b.n	8005d0e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f003 0304 	and.w	r3, r3, #4
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d008      	beq.n	8005cc6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005cb4:	4b19      	ldr	r3, [pc, #100]	; (8005d1c <HAL_RCC_ClockConfig+0x1c8>)
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	68db      	ldr	r3, [r3, #12]
 8005cc0:	4916      	ldr	r1, [pc, #88]	; (8005d1c <HAL_RCC_ClockConfig+0x1c8>)
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f003 0308 	and.w	r3, r3, #8
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d009      	beq.n	8005ce6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005cd2:	4b12      	ldr	r3, [pc, #72]	; (8005d1c <HAL_RCC_ClockConfig+0x1c8>)
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	691b      	ldr	r3, [r3, #16]
 8005cde:	00db      	lsls	r3, r3, #3
 8005ce0:	490e      	ldr	r1, [pc, #56]	; (8005d1c <HAL_RCC_ClockConfig+0x1c8>)
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005ce6:	f000 f821 	bl	8005d2c <HAL_RCC_GetSysClockFreq>
 8005cea:	4602      	mov	r2, r0
 8005cec:	4b0b      	ldr	r3, [pc, #44]	; (8005d1c <HAL_RCC_ClockConfig+0x1c8>)
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	091b      	lsrs	r3, r3, #4
 8005cf2:	f003 030f 	and.w	r3, r3, #15
 8005cf6:	490a      	ldr	r1, [pc, #40]	; (8005d20 <HAL_RCC_ClockConfig+0x1cc>)
 8005cf8:	5ccb      	ldrb	r3, [r1, r3]
 8005cfa:	fa22 f303 	lsr.w	r3, r2, r3
 8005cfe:	4a09      	ldr	r2, [pc, #36]	; (8005d24 <HAL_RCC_ClockConfig+0x1d0>)
 8005d00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005d02:	4b09      	ldr	r3, [pc, #36]	; (8005d28 <HAL_RCC_ClockConfig+0x1d4>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4618      	mov	r0, r3
 8005d08:	f7fd fbaa 	bl	8003460 <HAL_InitTick>

  return HAL_OK;
 8005d0c:	2300      	movs	r3, #0
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3710      	adds	r7, #16
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}
 8005d16:	bf00      	nop
 8005d18:	40023c00 	.word	0x40023c00
 8005d1c:	40023800 	.word	0x40023800
 8005d20:	0801ec7c 	.word	0x0801ec7c
 8005d24:	20000004 	.word	0x20000004
 8005d28:	20000008 	.word	0x20000008

08005d2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d30:	b094      	sub	sp, #80	; 0x50
 8005d32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005d34:	2300      	movs	r3, #0
 8005d36:	647b      	str	r3, [r7, #68]	; 0x44
 8005d38:	2300      	movs	r3, #0
 8005d3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8005d40:	2300      	movs	r3, #0
 8005d42:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d44:	4b79      	ldr	r3, [pc, #484]	; (8005f2c <HAL_RCC_GetSysClockFreq+0x200>)
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	f003 030c 	and.w	r3, r3, #12
 8005d4c:	2b08      	cmp	r3, #8
 8005d4e:	d00d      	beq.n	8005d6c <HAL_RCC_GetSysClockFreq+0x40>
 8005d50:	2b08      	cmp	r3, #8
 8005d52:	f200 80e1 	bhi.w	8005f18 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d002      	beq.n	8005d60 <HAL_RCC_GetSysClockFreq+0x34>
 8005d5a:	2b04      	cmp	r3, #4
 8005d5c:	d003      	beq.n	8005d66 <HAL_RCC_GetSysClockFreq+0x3a>
 8005d5e:	e0db      	b.n	8005f18 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005d60:	4b73      	ldr	r3, [pc, #460]	; (8005f30 <HAL_RCC_GetSysClockFreq+0x204>)
 8005d62:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005d64:	e0db      	b.n	8005f1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005d66:	4b73      	ldr	r3, [pc, #460]	; (8005f34 <HAL_RCC_GetSysClockFreq+0x208>)
 8005d68:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005d6a:	e0d8      	b.n	8005f1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005d6c:	4b6f      	ldr	r3, [pc, #444]	; (8005f2c <HAL_RCC_GetSysClockFreq+0x200>)
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d74:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005d76:	4b6d      	ldr	r3, [pc, #436]	; (8005f2c <HAL_RCC_GetSysClockFreq+0x200>)
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d063      	beq.n	8005e4a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d82:	4b6a      	ldr	r3, [pc, #424]	; (8005f2c <HAL_RCC_GetSysClockFreq+0x200>)
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	099b      	lsrs	r3, r3, #6
 8005d88:	2200      	movs	r2, #0
 8005d8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d8c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d94:	633b      	str	r3, [r7, #48]	; 0x30
 8005d96:	2300      	movs	r3, #0
 8005d98:	637b      	str	r3, [r7, #52]	; 0x34
 8005d9a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005d9e:	4622      	mov	r2, r4
 8005da0:	462b      	mov	r3, r5
 8005da2:	f04f 0000 	mov.w	r0, #0
 8005da6:	f04f 0100 	mov.w	r1, #0
 8005daa:	0159      	lsls	r1, r3, #5
 8005dac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005db0:	0150      	lsls	r0, r2, #5
 8005db2:	4602      	mov	r2, r0
 8005db4:	460b      	mov	r3, r1
 8005db6:	4621      	mov	r1, r4
 8005db8:	1a51      	subs	r1, r2, r1
 8005dba:	6139      	str	r1, [r7, #16]
 8005dbc:	4629      	mov	r1, r5
 8005dbe:	eb63 0301 	sbc.w	r3, r3, r1
 8005dc2:	617b      	str	r3, [r7, #20]
 8005dc4:	f04f 0200 	mov.w	r2, #0
 8005dc8:	f04f 0300 	mov.w	r3, #0
 8005dcc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005dd0:	4659      	mov	r1, fp
 8005dd2:	018b      	lsls	r3, r1, #6
 8005dd4:	4651      	mov	r1, sl
 8005dd6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005dda:	4651      	mov	r1, sl
 8005ddc:	018a      	lsls	r2, r1, #6
 8005dde:	4651      	mov	r1, sl
 8005de0:	ebb2 0801 	subs.w	r8, r2, r1
 8005de4:	4659      	mov	r1, fp
 8005de6:	eb63 0901 	sbc.w	r9, r3, r1
 8005dea:	f04f 0200 	mov.w	r2, #0
 8005dee:	f04f 0300 	mov.w	r3, #0
 8005df2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005df6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005dfa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005dfe:	4690      	mov	r8, r2
 8005e00:	4699      	mov	r9, r3
 8005e02:	4623      	mov	r3, r4
 8005e04:	eb18 0303 	adds.w	r3, r8, r3
 8005e08:	60bb      	str	r3, [r7, #8]
 8005e0a:	462b      	mov	r3, r5
 8005e0c:	eb49 0303 	adc.w	r3, r9, r3
 8005e10:	60fb      	str	r3, [r7, #12]
 8005e12:	f04f 0200 	mov.w	r2, #0
 8005e16:	f04f 0300 	mov.w	r3, #0
 8005e1a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005e1e:	4629      	mov	r1, r5
 8005e20:	024b      	lsls	r3, r1, #9
 8005e22:	4621      	mov	r1, r4
 8005e24:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005e28:	4621      	mov	r1, r4
 8005e2a:	024a      	lsls	r2, r1, #9
 8005e2c:	4610      	mov	r0, r2
 8005e2e:	4619      	mov	r1, r3
 8005e30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e32:	2200      	movs	r2, #0
 8005e34:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e38:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005e3c:	f7fa fab8 	bl	80003b0 <__aeabi_uldivmod>
 8005e40:	4602      	mov	r2, r0
 8005e42:	460b      	mov	r3, r1
 8005e44:	4613      	mov	r3, r2
 8005e46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e48:	e058      	b.n	8005efc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e4a:	4b38      	ldr	r3, [pc, #224]	; (8005f2c <HAL_RCC_GetSysClockFreq+0x200>)
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	099b      	lsrs	r3, r3, #6
 8005e50:	2200      	movs	r2, #0
 8005e52:	4618      	mov	r0, r3
 8005e54:	4611      	mov	r1, r2
 8005e56:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005e5a:	623b      	str	r3, [r7, #32]
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	627b      	str	r3, [r7, #36]	; 0x24
 8005e60:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005e64:	4642      	mov	r2, r8
 8005e66:	464b      	mov	r3, r9
 8005e68:	f04f 0000 	mov.w	r0, #0
 8005e6c:	f04f 0100 	mov.w	r1, #0
 8005e70:	0159      	lsls	r1, r3, #5
 8005e72:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e76:	0150      	lsls	r0, r2, #5
 8005e78:	4602      	mov	r2, r0
 8005e7a:	460b      	mov	r3, r1
 8005e7c:	4641      	mov	r1, r8
 8005e7e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005e82:	4649      	mov	r1, r9
 8005e84:	eb63 0b01 	sbc.w	fp, r3, r1
 8005e88:	f04f 0200 	mov.w	r2, #0
 8005e8c:	f04f 0300 	mov.w	r3, #0
 8005e90:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005e94:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005e98:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005e9c:	ebb2 040a 	subs.w	r4, r2, sl
 8005ea0:	eb63 050b 	sbc.w	r5, r3, fp
 8005ea4:	f04f 0200 	mov.w	r2, #0
 8005ea8:	f04f 0300 	mov.w	r3, #0
 8005eac:	00eb      	lsls	r3, r5, #3
 8005eae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005eb2:	00e2      	lsls	r2, r4, #3
 8005eb4:	4614      	mov	r4, r2
 8005eb6:	461d      	mov	r5, r3
 8005eb8:	4643      	mov	r3, r8
 8005eba:	18e3      	adds	r3, r4, r3
 8005ebc:	603b      	str	r3, [r7, #0]
 8005ebe:	464b      	mov	r3, r9
 8005ec0:	eb45 0303 	adc.w	r3, r5, r3
 8005ec4:	607b      	str	r3, [r7, #4]
 8005ec6:	f04f 0200 	mov.w	r2, #0
 8005eca:	f04f 0300 	mov.w	r3, #0
 8005ece:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005ed2:	4629      	mov	r1, r5
 8005ed4:	028b      	lsls	r3, r1, #10
 8005ed6:	4621      	mov	r1, r4
 8005ed8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005edc:	4621      	mov	r1, r4
 8005ede:	028a      	lsls	r2, r1, #10
 8005ee0:	4610      	mov	r0, r2
 8005ee2:	4619      	mov	r1, r3
 8005ee4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	61bb      	str	r3, [r7, #24]
 8005eea:	61fa      	str	r2, [r7, #28]
 8005eec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ef0:	f7fa fa5e 	bl	80003b0 <__aeabi_uldivmod>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	460b      	mov	r3, r1
 8005ef8:	4613      	mov	r3, r2
 8005efa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005efc:	4b0b      	ldr	r3, [pc, #44]	; (8005f2c <HAL_RCC_GetSysClockFreq+0x200>)
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	0c1b      	lsrs	r3, r3, #16
 8005f02:	f003 0303 	and.w	r3, r3, #3
 8005f06:	3301      	adds	r3, #1
 8005f08:	005b      	lsls	r3, r3, #1
 8005f0a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8005f0c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005f0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f14:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005f16:	e002      	b.n	8005f1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005f18:	4b05      	ldr	r3, [pc, #20]	; (8005f30 <HAL_RCC_GetSysClockFreq+0x204>)
 8005f1a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005f1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005f1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3750      	adds	r7, #80	; 0x50
 8005f24:	46bd      	mov	sp, r7
 8005f26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f2a:	bf00      	nop
 8005f2c:	40023800 	.word	0x40023800
 8005f30:	00f42400 	.word	0x00f42400
 8005f34:	007a1200 	.word	0x007a1200

08005f38 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f3c:	4b03      	ldr	r3, [pc, #12]	; (8005f4c <HAL_RCC_GetHCLKFreq+0x14>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr
 8005f4a:	bf00      	nop
 8005f4c:	20000004 	.word	0x20000004

08005f50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005f54:	f7ff fff0 	bl	8005f38 <HAL_RCC_GetHCLKFreq>
 8005f58:	4602      	mov	r2, r0
 8005f5a:	4b05      	ldr	r3, [pc, #20]	; (8005f70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	0a9b      	lsrs	r3, r3, #10
 8005f60:	f003 0307 	and.w	r3, r3, #7
 8005f64:	4903      	ldr	r1, [pc, #12]	; (8005f74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f66:	5ccb      	ldrb	r3, [r1, r3]
 8005f68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	bd80      	pop	{r7, pc}
 8005f70:	40023800 	.word	0x40023800
 8005f74:	0801ec8c 	.word	0x0801ec8c

08005f78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005f7c:	f7ff ffdc 	bl	8005f38 <HAL_RCC_GetHCLKFreq>
 8005f80:	4602      	mov	r2, r0
 8005f82:	4b05      	ldr	r3, [pc, #20]	; (8005f98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005f84:	689b      	ldr	r3, [r3, #8]
 8005f86:	0b5b      	lsrs	r3, r3, #13
 8005f88:	f003 0307 	and.w	r3, r3, #7
 8005f8c:	4903      	ldr	r1, [pc, #12]	; (8005f9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f8e:	5ccb      	ldrb	r3, [r1, r3]
 8005f90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	bd80      	pop	{r7, pc}
 8005f98:	40023800 	.word	0x40023800
 8005f9c:	0801ec8c 	.word	0x0801ec8c

08005fa0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b083      	sub	sp, #12
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	220f      	movs	r2, #15
 8005fae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005fb0:	4b12      	ldr	r3, [pc, #72]	; (8005ffc <HAL_RCC_GetClockConfig+0x5c>)
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	f003 0203 	and.w	r2, r3, #3
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005fbc:	4b0f      	ldr	r3, [pc, #60]	; (8005ffc <HAL_RCC_GetClockConfig+0x5c>)
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005fc8:	4b0c      	ldr	r3, [pc, #48]	; (8005ffc <HAL_RCC_GetClockConfig+0x5c>)
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005fd4:	4b09      	ldr	r3, [pc, #36]	; (8005ffc <HAL_RCC_GetClockConfig+0x5c>)
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	08db      	lsrs	r3, r3, #3
 8005fda:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005fe2:	4b07      	ldr	r3, [pc, #28]	; (8006000 <HAL_RCC_GetClockConfig+0x60>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f003 020f 	and.w	r2, r3, #15
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	601a      	str	r2, [r3, #0]
}
 8005fee:	bf00      	nop
 8005ff0:	370c      	adds	r7, #12
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr
 8005ffa:	bf00      	nop
 8005ffc:	40023800 	.word	0x40023800
 8006000:	40023c00 	.word	0x40023c00

08006004 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b088      	sub	sp, #32
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800600c:	2300      	movs	r3, #0
 800600e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006010:	2300      	movs	r3, #0
 8006012:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006014:	2300      	movs	r3, #0
 8006016:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006018:	2300      	movs	r3, #0
 800601a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800601c:	2300      	movs	r3, #0
 800601e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f003 0301 	and.w	r3, r3, #1
 8006028:	2b00      	cmp	r3, #0
 800602a:	d012      	beq.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800602c:	4b69      	ldr	r3, [pc, #420]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	4a68      	ldr	r2, [pc, #416]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006032:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006036:	6093      	str	r3, [r2, #8]
 8006038:	4b66      	ldr	r3, [pc, #408]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800603a:	689a      	ldr	r2, [r3, #8]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006040:	4964      	ldr	r1, [pc, #400]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006042:	4313      	orrs	r3, r2
 8006044:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800604a:	2b00      	cmp	r3, #0
 800604c:	d101      	bne.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800604e:	2301      	movs	r3, #1
 8006050:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800605a:	2b00      	cmp	r3, #0
 800605c:	d017      	beq.n	800608e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800605e:	4b5d      	ldr	r3, [pc, #372]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006060:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006064:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800606c:	4959      	ldr	r1, [pc, #356]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800606e:	4313      	orrs	r3, r2
 8006070:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006078:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800607c:	d101      	bne.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800607e:	2301      	movs	r3, #1
 8006080:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006086:	2b00      	cmp	r3, #0
 8006088:	d101      	bne.n	800608e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800608a:	2301      	movs	r3, #1
 800608c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006096:	2b00      	cmp	r3, #0
 8006098:	d017      	beq.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800609a:	4b4e      	ldr	r3, [pc, #312]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800609c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060a0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a8:	494a      	ldr	r1, [pc, #296]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060aa:	4313      	orrs	r3, r2
 80060ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80060b8:	d101      	bne.n	80060be <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80060ba:	2301      	movs	r3, #1
 80060bc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d101      	bne.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80060c6:	2301      	movs	r3, #1
 80060c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d001      	beq.n	80060da <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80060d6:	2301      	movs	r3, #1
 80060d8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f003 0320 	and.w	r3, r3, #32
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	f000 808b 	beq.w	80061fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80060e8:	4b3a      	ldr	r3, [pc, #232]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ec:	4a39      	ldr	r2, [pc, #228]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060f2:	6413      	str	r3, [r2, #64]	; 0x40
 80060f4:	4b37      	ldr	r3, [pc, #220]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060fc:	60bb      	str	r3, [r7, #8]
 80060fe:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006100:	4b35      	ldr	r3, [pc, #212]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a34      	ldr	r2, [pc, #208]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006106:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800610a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800610c:	f7fe f9d6 	bl	80044bc <HAL_GetTick>
 8006110:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006112:	e008      	b.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006114:	f7fe f9d2 	bl	80044bc <HAL_GetTick>
 8006118:	4602      	mov	r2, r0
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	1ad3      	subs	r3, r2, r3
 800611e:	2b64      	cmp	r3, #100	; 0x64
 8006120:	d901      	bls.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006122:	2303      	movs	r3, #3
 8006124:	e38f      	b.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006126:	4b2c      	ldr	r3, [pc, #176]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800612e:	2b00      	cmp	r3, #0
 8006130:	d0f0      	beq.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006132:	4b28      	ldr	r3, [pc, #160]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006136:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800613a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d035      	beq.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006146:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800614a:	693a      	ldr	r2, [r7, #16]
 800614c:	429a      	cmp	r2, r3
 800614e:	d02e      	beq.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006150:	4b20      	ldr	r3, [pc, #128]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006154:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006158:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800615a:	4b1e      	ldr	r3, [pc, #120]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800615c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800615e:	4a1d      	ldr	r2, [pc, #116]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006160:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006164:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006166:	4b1b      	ldr	r3, [pc, #108]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800616a:	4a1a      	ldr	r2, [pc, #104]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800616c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006170:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006172:	4a18      	ldr	r2, [pc, #96]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006178:	4b16      	ldr	r3, [pc, #88]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800617a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800617c:	f003 0301 	and.w	r3, r3, #1
 8006180:	2b01      	cmp	r3, #1
 8006182:	d114      	bne.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006184:	f7fe f99a 	bl	80044bc <HAL_GetTick>
 8006188:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800618a:	e00a      	b.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800618c:	f7fe f996 	bl	80044bc <HAL_GetTick>
 8006190:	4602      	mov	r2, r0
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	1ad3      	subs	r3, r2, r3
 8006196:	f241 3288 	movw	r2, #5000	; 0x1388
 800619a:	4293      	cmp	r3, r2
 800619c:	d901      	bls.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800619e:	2303      	movs	r3, #3
 80061a0:	e351      	b.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061a2:	4b0c      	ldr	r3, [pc, #48]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061a6:	f003 0302 	and.w	r3, r3, #2
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d0ee      	beq.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061ba:	d111      	bne.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80061bc:	4b05      	ldr	r3, [pc, #20]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80061c8:	4b04      	ldr	r3, [pc, #16]	; (80061dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80061ca:	400b      	ands	r3, r1
 80061cc:	4901      	ldr	r1, [pc, #4]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061ce:	4313      	orrs	r3, r2
 80061d0:	608b      	str	r3, [r1, #8]
 80061d2:	e00b      	b.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80061d4:	40023800 	.word	0x40023800
 80061d8:	40007000 	.word	0x40007000
 80061dc:	0ffffcff 	.word	0x0ffffcff
 80061e0:	4bac      	ldr	r3, [pc, #688]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	4aab      	ldr	r2, [pc, #684]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80061e6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80061ea:	6093      	str	r3, [r2, #8]
 80061ec:	4ba9      	ldr	r3, [pc, #676]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80061ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061f8:	49a6      	ldr	r1, [pc, #664]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80061fa:	4313      	orrs	r3, r2
 80061fc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f003 0310 	and.w	r3, r3, #16
 8006206:	2b00      	cmp	r3, #0
 8006208:	d010      	beq.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800620a:	4ba2      	ldr	r3, [pc, #648]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800620c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006210:	4aa0      	ldr	r2, [pc, #640]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006212:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006216:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800621a:	4b9e      	ldr	r3, [pc, #632]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800621c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006224:	499b      	ldr	r1, [pc, #620]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006226:	4313      	orrs	r3, r2
 8006228:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006234:	2b00      	cmp	r3, #0
 8006236:	d00a      	beq.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006238:	4b96      	ldr	r3, [pc, #600]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800623a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800623e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006246:	4993      	ldr	r1, [pc, #588]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006248:	4313      	orrs	r3, r2
 800624a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006256:	2b00      	cmp	r3, #0
 8006258:	d00a      	beq.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800625a:	4b8e      	ldr	r3, [pc, #568]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800625c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006260:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006268:	498a      	ldr	r1, [pc, #552]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800626a:	4313      	orrs	r3, r2
 800626c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006278:	2b00      	cmp	r3, #0
 800627a:	d00a      	beq.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800627c:	4b85      	ldr	r3, [pc, #532]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800627e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006282:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800628a:	4982      	ldr	r1, [pc, #520]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800628c:	4313      	orrs	r3, r2
 800628e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800629a:	2b00      	cmp	r3, #0
 800629c:	d00a      	beq.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800629e:	4b7d      	ldr	r3, [pc, #500]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80062a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062a4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062ac:	4979      	ldr	r1, [pc, #484]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80062ae:	4313      	orrs	r3, r2
 80062b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d00a      	beq.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80062c0:	4b74      	ldr	r3, [pc, #464]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80062c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062c6:	f023 0203 	bic.w	r2, r3, #3
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062ce:	4971      	ldr	r1, [pc, #452]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80062d0:	4313      	orrs	r3, r2
 80062d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d00a      	beq.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80062e2:	4b6c      	ldr	r3, [pc, #432]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80062e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062e8:	f023 020c 	bic.w	r2, r3, #12
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062f0:	4968      	ldr	r1, [pc, #416]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80062f2:	4313      	orrs	r3, r2
 80062f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006300:	2b00      	cmp	r3, #0
 8006302:	d00a      	beq.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006304:	4b63      	ldr	r3, [pc, #396]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800630a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006312:	4960      	ldr	r1, [pc, #384]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006314:	4313      	orrs	r3, r2
 8006316:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006322:	2b00      	cmp	r3, #0
 8006324:	d00a      	beq.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006326:	4b5b      	ldr	r3, [pc, #364]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006328:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800632c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006334:	4957      	ldr	r1, [pc, #348]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006336:	4313      	orrs	r3, r2
 8006338:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006344:	2b00      	cmp	r3, #0
 8006346:	d00a      	beq.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006348:	4b52      	ldr	r3, [pc, #328]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800634a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800634e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006356:	494f      	ldr	r1, [pc, #316]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006358:	4313      	orrs	r3, r2
 800635a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006366:	2b00      	cmp	r3, #0
 8006368:	d00a      	beq.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800636a:	4b4a      	ldr	r3, [pc, #296]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800636c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006370:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006378:	4946      	ldr	r1, [pc, #280]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800637a:	4313      	orrs	r3, r2
 800637c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006388:	2b00      	cmp	r3, #0
 800638a:	d00a      	beq.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800638c:	4b41      	ldr	r3, [pc, #260]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800638e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006392:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800639a:	493e      	ldr	r1, [pc, #248]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800639c:	4313      	orrs	r3, r2
 800639e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d00a      	beq.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80063ae:	4b39      	ldr	r3, [pc, #228]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80063b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063b4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063bc:	4935      	ldr	r1, [pc, #212]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80063be:	4313      	orrs	r3, r2
 80063c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d00a      	beq.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80063d0:	4b30      	ldr	r3, [pc, #192]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80063d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063d6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80063de:	492d      	ldr	r1, [pc, #180]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80063e0:	4313      	orrs	r3, r2
 80063e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d011      	beq.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80063f2:	4b28      	ldr	r3, [pc, #160]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80063f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063f8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006400:	4924      	ldr	r1, [pc, #144]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006402:	4313      	orrs	r3, r2
 8006404:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800640c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006410:	d101      	bne.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8006412:	2301      	movs	r3, #1
 8006414:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f003 0308 	and.w	r3, r3, #8
 800641e:	2b00      	cmp	r3, #0
 8006420:	d001      	beq.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8006422:	2301      	movs	r3, #1
 8006424:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800642e:	2b00      	cmp	r3, #0
 8006430:	d00a      	beq.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006432:	4b18      	ldr	r3, [pc, #96]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006434:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006438:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006440:	4914      	ldr	r1, [pc, #80]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006442:	4313      	orrs	r3, r2
 8006444:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006450:	2b00      	cmp	r3, #0
 8006452:	d00b      	beq.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006454:	4b0f      	ldr	r3, [pc, #60]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800645a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006464:	490b      	ldr	r1, [pc, #44]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006466:	4313      	orrs	r3, r2
 8006468:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006474:	2b00      	cmp	r3, #0
 8006476:	d00f      	beq.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8006478:	4b06      	ldr	r3, [pc, #24]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800647a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800647e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006488:	4902      	ldr	r1, [pc, #8]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800648a:	4313      	orrs	r3, r2
 800648c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006490:	e002      	b.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8006492:	bf00      	nop
 8006494:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d00b      	beq.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80064a4:	4b8a      	ldr	r3, [pc, #552]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80064a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80064aa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064b4:	4986      	ldr	r1, [pc, #536]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80064b6:	4313      	orrs	r3, r2
 80064b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d00b      	beq.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80064c8:	4b81      	ldr	r3, [pc, #516]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80064ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80064ce:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80064d8:	497d      	ldr	r1, [pc, #500]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80064da:	4313      	orrs	r3, r2
 80064dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80064e0:	69fb      	ldr	r3, [r7, #28]
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	d006      	beq.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	f000 80d6 	beq.w	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80064f4:	4b76      	ldr	r3, [pc, #472]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a75      	ldr	r2, [pc, #468]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80064fa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80064fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006500:	f7fd ffdc 	bl	80044bc <HAL_GetTick>
 8006504:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006506:	e008      	b.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006508:	f7fd ffd8 	bl	80044bc <HAL_GetTick>
 800650c:	4602      	mov	r2, r0
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	1ad3      	subs	r3, r2, r3
 8006512:	2b64      	cmp	r3, #100	; 0x64
 8006514:	d901      	bls.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006516:	2303      	movs	r3, #3
 8006518:	e195      	b.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800651a:	4b6d      	ldr	r3, [pc, #436]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006522:	2b00      	cmp	r3, #0
 8006524:	d1f0      	bne.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f003 0301 	and.w	r3, r3, #1
 800652e:	2b00      	cmp	r3, #0
 8006530:	d021      	beq.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006536:	2b00      	cmp	r3, #0
 8006538:	d11d      	bne.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800653a:	4b65      	ldr	r3, [pc, #404]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800653c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006540:	0c1b      	lsrs	r3, r3, #16
 8006542:	f003 0303 	and.w	r3, r3, #3
 8006546:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006548:	4b61      	ldr	r3, [pc, #388]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800654a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800654e:	0e1b      	lsrs	r3, r3, #24
 8006550:	f003 030f 	and.w	r3, r3, #15
 8006554:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	019a      	lsls	r2, r3, #6
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	041b      	lsls	r3, r3, #16
 8006560:	431a      	orrs	r2, r3
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	061b      	lsls	r3, r3, #24
 8006566:	431a      	orrs	r2, r3
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	071b      	lsls	r3, r3, #28
 800656e:	4958      	ldr	r1, [pc, #352]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006570:	4313      	orrs	r3, r2
 8006572:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800657e:	2b00      	cmp	r3, #0
 8006580:	d004      	beq.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006586:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800658a:	d00a      	beq.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006594:	2b00      	cmp	r3, #0
 8006596:	d02e      	beq.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800659c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80065a0:	d129      	bne.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80065a2:	4b4b      	ldr	r3, [pc, #300]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80065a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065a8:	0c1b      	lsrs	r3, r3, #16
 80065aa:	f003 0303 	and.w	r3, r3, #3
 80065ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80065b0:	4b47      	ldr	r3, [pc, #284]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80065b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065b6:	0f1b      	lsrs	r3, r3, #28
 80065b8:	f003 0307 	and.w	r3, r3, #7
 80065bc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	019a      	lsls	r2, r3, #6
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	041b      	lsls	r3, r3, #16
 80065c8:	431a      	orrs	r2, r3
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	68db      	ldr	r3, [r3, #12]
 80065ce:	061b      	lsls	r3, r3, #24
 80065d0:	431a      	orrs	r2, r3
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	071b      	lsls	r3, r3, #28
 80065d6:	493e      	ldr	r1, [pc, #248]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80065d8:	4313      	orrs	r3, r2
 80065da:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80065de:	4b3c      	ldr	r3, [pc, #240]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80065e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065e4:	f023 021f 	bic.w	r2, r3, #31
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ec:	3b01      	subs	r3, #1
 80065ee:	4938      	ldr	r1, [pc, #224]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80065f0:	4313      	orrs	r3, r2
 80065f2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d01d      	beq.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006602:	4b33      	ldr	r3, [pc, #204]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006604:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006608:	0e1b      	lsrs	r3, r3, #24
 800660a:	f003 030f 	and.w	r3, r3, #15
 800660e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006610:	4b2f      	ldr	r3, [pc, #188]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006612:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006616:	0f1b      	lsrs	r3, r3, #28
 8006618:	f003 0307 	and.w	r3, r3, #7
 800661c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	019a      	lsls	r2, r3, #6
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	691b      	ldr	r3, [r3, #16]
 8006628:	041b      	lsls	r3, r3, #16
 800662a:	431a      	orrs	r2, r3
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	061b      	lsls	r3, r3, #24
 8006630:	431a      	orrs	r2, r3
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	071b      	lsls	r3, r3, #28
 8006636:	4926      	ldr	r1, [pc, #152]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006638:	4313      	orrs	r3, r2
 800663a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006646:	2b00      	cmp	r3, #0
 8006648:	d011      	beq.n	800666e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	019a      	lsls	r2, r3, #6
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	691b      	ldr	r3, [r3, #16]
 8006654:	041b      	lsls	r3, r3, #16
 8006656:	431a      	orrs	r2, r3
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	68db      	ldr	r3, [r3, #12]
 800665c:	061b      	lsls	r3, r3, #24
 800665e:	431a      	orrs	r2, r3
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	071b      	lsls	r3, r3, #28
 8006666:	491a      	ldr	r1, [pc, #104]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006668:	4313      	orrs	r3, r2
 800666a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800666e:	4b18      	ldr	r3, [pc, #96]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a17      	ldr	r2, [pc, #92]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006674:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006678:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800667a:	f7fd ff1f 	bl	80044bc <HAL_GetTick>
 800667e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006680:	e008      	b.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006682:	f7fd ff1b 	bl	80044bc <HAL_GetTick>
 8006686:	4602      	mov	r2, r0
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	1ad3      	subs	r3, r2, r3
 800668c:	2b64      	cmp	r3, #100	; 0x64
 800668e:	d901      	bls.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006690:	2303      	movs	r3, #3
 8006692:	e0d8      	b.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006694:	4b0e      	ldr	r3, [pc, #56]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800669c:	2b00      	cmp	r3, #0
 800669e:	d0f0      	beq.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80066a0:	69bb      	ldr	r3, [r7, #24]
 80066a2:	2b01      	cmp	r3, #1
 80066a4:	f040 80ce 	bne.w	8006844 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80066a8:	4b09      	ldr	r3, [pc, #36]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a08      	ldr	r2, [pc, #32]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80066ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066b4:	f7fd ff02 	bl	80044bc <HAL_GetTick>
 80066b8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80066ba:	e00b      	b.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80066bc:	f7fd fefe 	bl	80044bc <HAL_GetTick>
 80066c0:	4602      	mov	r2, r0
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	1ad3      	subs	r3, r2, r3
 80066c6:	2b64      	cmp	r3, #100	; 0x64
 80066c8:	d904      	bls.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80066ca:	2303      	movs	r3, #3
 80066cc:	e0bb      	b.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80066ce:	bf00      	nop
 80066d0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80066d4:	4b5e      	ldr	r3, [pc, #376]	; (8006850 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80066dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066e0:	d0ec      	beq.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d003      	beq.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d009      	beq.n	800670a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d02e      	beq.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006706:	2b00      	cmp	r3, #0
 8006708:	d12a      	bne.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800670a:	4b51      	ldr	r3, [pc, #324]	; (8006850 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800670c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006710:	0c1b      	lsrs	r3, r3, #16
 8006712:	f003 0303 	and.w	r3, r3, #3
 8006716:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006718:	4b4d      	ldr	r3, [pc, #308]	; (8006850 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800671a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800671e:	0f1b      	lsrs	r3, r3, #28
 8006720:	f003 0307 	and.w	r3, r3, #7
 8006724:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	695b      	ldr	r3, [r3, #20]
 800672a:	019a      	lsls	r2, r3, #6
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	041b      	lsls	r3, r3, #16
 8006730:	431a      	orrs	r2, r3
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	699b      	ldr	r3, [r3, #24]
 8006736:	061b      	lsls	r3, r3, #24
 8006738:	431a      	orrs	r2, r3
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	071b      	lsls	r3, r3, #28
 800673e:	4944      	ldr	r1, [pc, #272]	; (8006850 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006740:	4313      	orrs	r3, r2
 8006742:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006746:	4b42      	ldr	r3, [pc, #264]	; (8006850 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006748:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800674c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006754:	3b01      	subs	r3, #1
 8006756:	021b      	lsls	r3, r3, #8
 8006758:	493d      	ldr	r1, [pc, #244]	; (8006850 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800675a:	4313      	orrs	r3, r2
 800675c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006768:	2b00      	cmp	r3, #0
 800676a:	d022      	beq.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006770:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006774:	d11d      	bne.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006776:	4b36      	ldr	r3, [pc, #216]	; (8006850 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006778:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800677c:	0e1b      	lsrs	r3, r3, #24
 800677e:	f003 030f 	and.w	r3, r3, #15
 8006782:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006784:	4b32      	ldr	r3, [pc, #200]	; (8006850 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800678a:	0f1b      	lsrs	r3, r3, #28
 800678c:	f003 0307 	and.w	r3, r3, #7
 8006790:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	695b      	ldr	r3, [r3, #20]
 8006796:	019a      	lsls	r2, r3, #6
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6a1b      	ldr	r3, [r3, #32]
 800679c:	041b      	lsls	r3, r3, #16
 800679e:	431a      	orrs	r2, r3
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	061b      	lsls	r3, r3, #24
 80067a4:	431a      	orrs	r2, r3
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	071b      	lsls	r3, r3, #28
 80067aa:	4929      	ldr	r1, [pc, #164]	; (8006850 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80067ac:	4313      	orrs	r3, r2
 80067ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f003 0308 	and.w	r3, r3, #8
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d028      	beq.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80067be:	4b24      	ldr	r3, [pc, #144]	; (8006850 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80067c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067c4:	0e1b      	lsrs	r3, r3, #24
 80067c6:	f003 030f 	and.w	r3, r3, #15
 80067ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80067cc:	4b20      	ldr	r3, [pc, #128]	; (8006850 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80067ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067d2:	0c1b      	lsrs	r3, r3, #16
 80067d4:	f003 0303 	and.w	r3, r3, #3
 80067d8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	695b      	ldr	r3, [r3, #20]
 80067de:	019a      	lsls	r2, r3, #6
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	041b      	lsls	r3, r3, #16
 80067e4:	431a      	orrs	r2, r3
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	061b      	lsls	r3, r3, #24
 80067ea:	431a      	orrs	r2, r3
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	69db      	ldr	r3, [r3, #28]
 80067f0:	071b      	lsls	r3, r3, #28
 80067f2:	4917      	ldr	r1, [pc, #92]	; (8006850 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80067f4:	4313      	orrs	r3, r2
 80067f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80067fa:	4b15      	ldr	r3, [pc, #84]	; (8006850 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80067fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006800:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006808:	4911      	ldr	r1, [pc, #68]	; (8006850 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800680a:	4313      	orrs	r3, r2
 800680c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006810:	4b0f      	ldr	r3, [pc, #60]	; (8006850 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a0e      	ldr	r2, [pc, #56]	; (8006850 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006816:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800681a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800681c:	f7fd fe4e 	bl	80044bc <HAL_GetTick>
 8006820:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006822:	e008      	b.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006824:	f7fd fe4a 	bl	80044bc <HAL_GetTick>
 8006828:	4602      	mov	r2, r0
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	1ad3      	subs	r3, r2, r3
 800682e:	2b64      	cmp	r3, #100	; 0x64
 8006830:	d901      	bls.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006832:	2303      	movs	r3, #3
 8006834:	e007      	b.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006836:	4b06      	ldr	r3, [pc, #24]	; (8006850 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800683e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006842:	d1ef      	bne.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8006844:	2300      	movs	r3, #0
}
 8006846:	4618      	mov	r0, r3
 8006848:	3720      	adds	r7, #32
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}
 800684e:	bf00      	nop
 8006850:	40023800 	.word	0x40023800

08006854 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b082      	sub	sp, #8
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d101      	bne.n	8006866 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006862:	2301      	movs	r3, #1
 8006864:	e049      	b.n	80068fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800686c:	b2db      	uxtb	r3, r3
 800686e:	2b00      	cmp	r3, #0
 8006870:	d106      	bne.n	8006880 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2200      	movs	r2, #0
 8006876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f7fd fa50 	bl	8003d20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2202      	movs	r2, #2
 8006884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681a      	ldr	r2, [r3, #0]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	3304      	adds	r3, #4
 8006890:	4619      	mov	r1, r3
 8006892:	4610      	mov	r0, r2
 8006894:	f000 fe5a 	bl	800754c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2201      	movs	r2, #1
 800689c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2201      	movs	r2, #1
 80068a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2201      	movs	r2, #1
 80068ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2201      	movs	r2, #1
 80068b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2201      	movs	r2, #1
 80068bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2201      	movs	r2, #1
 80068c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2201      	movs	r2, #1
 80068cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2201      	movs	r2, #1
 80068d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2201      	movs	r2, #1
 80068dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2201      	movs	r2, #1
 80068e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2201      	movs	r2, #1
 80068ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2201      	movs	r2, #1
 80068f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068f8:	2300      	movs	r3, #0
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3708      	adds	r7, #8
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}
	...

08006904 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006904:	b480      	push	{r7}
 8006906:	b085      	sub	sp, #20
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006912:	b2db      	uxtb	r3, r3
 8006914:	2b01      	cmp	r3, #1
 8006916:	d001      	beq.n	800691c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006918:	2301      	movs	r3, #1
 800691a:	e054      	b.n	80069c6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2202      	movs	r2, #2
 8006920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	68da      	ldr	r2, [r3, #12]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f042 0201 	orr.w	r2, r2, #1
 8006932:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a26      	ldr	r2, [pc, #152]	; (80069d4 <HAL_TIM_Base_Start_IT+0xd0>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d022      	beq.n	8006984 <HAL_TIM_Base_Start_IT+0x80>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006946:	d01d      	beq.n	8006984 <HAL_TIM_Base_Start_IT+0x80>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a22      	ldr	r2, [pc, #136]	; (80069d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d018      	beq.n	8006984 <HAL_TIM_Base_Start_IT+0x80>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a21      	ldr	r2, [pc, #132]	; (80069dc <HAL_TIM_Base_Start_IT+0xd8>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d013      	beq.n	8006984 <HAL_TIM_Base_Start_IT+0x80>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a1f      	ldr	r2, [pc, #124]	; (80069e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d00e      	beq.n	8006984 <HAL_TIM_Base_Start_IT+0x80>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a1e      	ldr	r2, [pc, #120]	; (80069e4 <HAL_TIM_Base_Start_IT+0xe0>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d009      	beq.n	8006984 <HAL_TIM_Base_Start_IT+0x80>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a1c      	ldr	r2, [pc, #112]	; (80069e8 <HAL_TIM_Base_Start_IT+0xe4>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d004      	beq.n	8006984 <HAL_TIM_Base_Start_IT+0x80>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a1b      	ldr	r2, [pc, #108]	; (80069ec <HAL_TIM_Base_Start_IT+0xe8>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d115      	bne.n	80069b0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	689a      	ldr	r2, [r3, #8]
 800698a:	4b19      	ldr	r3, [pc, #100]	; (80069f0 <HAL_TIM_Base_Start_IT+0xec>)
 800698c:	4013      	ands	r3, r2
 800698e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2b06      	cmp	r3, #6
 8006994:	d015      	beq.n	80069c2 <HAL_TIM_Base_Start_IT+0xbe>
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800699c:	d011      	beq.n	80069c2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	681a      	ldr	r2, [r3, #0]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f042 0201 	orr.w	r2, r2, #1
 80069ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069ae:	e008      	b.n	80069c2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	681a      	ldr	r2, [r3, #0]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f042 0201 	orr.w	r2, r2, #1
 80069be:	601a      	str	r2, [r3, #0]
 80069c0:	e000      	b.n	80069c4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80069c4:	2300      	movs	r3, #0
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3714      	adds	r7, #20
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr
 80069d2:	bf00      	nop
 80069d4:	40010000 	.word	0x40010000
 80069d8:	40000400 	.word	0x40000400
 80069dc:	40000800 	.word	0x40000800
 80069e0:	40000c00 	.word	0x40000c00
 80069e4:	40010400 	.word	0x40010400
 80069e8:	40014000 	.word	0x40014000
 80069ec:	40001800 	.word	0x40001800
 80069f0:	00010007 	.word	0x00010007

080069f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b082      	sub	sp, #8
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d101      	bne.n	8006a06 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006a02:	2301      	movs	r3, #1
 8006a04:	e049      	b.n	8006a9a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a0c:	b2db      	uxtb	r3, r3
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d106      	bne.n	8006a20 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2200      	movs	r2, #0
 8006a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f7fd fae0 	bl	8003fe0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2202      	movs	r2, #2
 8006a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	3304      	adds	r3, #4
 8006a30:	4619      	mov	r1, r3
 8006a32:	4610      	mov	r0, r2
 8006a34:	f000 fd8a 	bl	800754c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2201      	movs	r2, #1
 8006a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2201      	movs	r2, #1
 8006a54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2201      	movs	r2, #1
 8006a64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2201      	movs	r2, #1
 8006a74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2201      	movs	r2, #1
 8006a84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2201      	movs	r2, #1
 8006a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a98:	2300      	movs	r3, #0
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3708      	adds	r7, #8
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}
	...

08006aa4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b084      	sub	sp, #16
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d109      	bne.n	8006ac8 <HAL_TIM_PWM_Start+0x24>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006aba:	b2db      	uxtb	r3, r3
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	bf14      	ite	ne
 8006ac0:	2301      	movne	r3, #1
 8006ac2:	2300      	moveq	r3, #0
 8006ac4:	b2db      	uxtb	r3, r3
 8006ac6:	e03c      	b.n	8006b42 <HAL_TIM_PWM_Start+0x9e>
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	2b04      	cmp	r3, #4
 8006acc:	d109      	bne.n	8006ae2 <HAL_TIM_PWM_Start+0x3e>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006ad4:	b2db      	uxtb	r3, r3
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	bf14      	ite	ne
 8006ada:	2301      	movne	r3, #1
 8006adc:	2300      	moveq	r3, #0
 8006ade:	b2db      	uxtb	r3, r3
 8006ae0:	e02f      	b.n	8006b42 <HAL_TIM_PWM_Start+0x9e>
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	2b08      	cmp	r3, #8
 8006ae6:	d109      	bne.n	8006afc <HAL_TIM_PWM_Start+0x58>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006aee:	b2db      	uxtb	r3, r3
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	bf14      	ite	ne
 8006af4:	2301      	movne	r3, #1
 8006af6:	2300      	moveq	r3, #0
 8006af8:	b2db      	uxtb	r3, r3
 8006afa:	e022      	b.n	8006b42 <HAL_TIM_PWM_Start+0x9e>
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	2b0c      	cmp	r3, #12
 8006b00:	d109      	bne.n	8006b16 <HAL_TIM_PWM_Start+0x72>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b08:	b2db      	uxtb	r3, r3
 8006b0a:	2b01      	cmp	r3, #1
 8006b0c:	bf14      	ite	ne
 8006b0e:	2301      	movne	r3, #1
 8006b10:	2300      	moveq	r3, #0
 8006b12:	b2db      	uxtb	r3, r3
 8006b14:	e015      	b.n	8006b42 <HAL_TIM_PWM_Start+0x9e>
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	2b10      	cmp	r3, #16
 8006b1a:	d109      	bne.n	8006b30 <HAL_TIM_PWM_Start+0x8c>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006b22:	b2db      	uxtb	r3, r3
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	bf14      	ite	ne
 8006b28:	2301      	movne	r3, #1
 8006b2a:	2300      	moveq	r3, #0
 8006b2c:	b2db      	uxtb	r3, r3
 8006b2e:	e008      	b.n	8006b42 <HAL_TIM_PWM_Start+0x9e>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006b36:	b2db      	uxtb	r3, r3
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	bf14      	ite	ne
 8006b3c:	2301      	movne	r3, #1
 8006b3e:	2300      	moveq	r3, #0
 8006b40:	b2db      	uxtb	r3, r3
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d001      	beq.n	8006b4a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	e092      	b.n	8006c70 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d104      	bne.n	8006b5a <HAL_TIM_PWM_Start+0xb6>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2202      	movs	r2, #2
 8006b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b58:	e023      	b.n	8006ba2 <HAL_TIM_PWM_Start+0xfe>
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	2b04      	cmp	r3, #4
 8006b5e:	d104      	bne.n	8006b6a <HAL_TIM_PWM_Start+0xc6>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2202      	movs	r2, #2
 8006b64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b68:	e01b      	b.n	8006ba2 <HAL_TIM_PWM_Start+0xfe>
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	2b08      	cmp	r3, #8
 8006b6e:	d104      	bne.n	8006b7a <HAL_TIM_PWM_Start+0xd6>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2202      	movs	r2, #2
 8006b74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b78:	e013      	b.n	8006ba2 <HAL_TIM_PWM_Start+0xfe>
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	2b0c      	cmp	r3, #12
 8006b7e:	d104      	bne.n	8006b8a <HAL_TIM_PWM_Start+0xe6>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2202      	movs	r2, #2
 8006b84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006b88:	e00b      	b.n	8006ba2 <HAL_TIM_PWM_Start+0xfe>
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	2b10      	cmp	r3, #16
 8006b8e:	d104      	bne.n	8006b9a <HAL_TIM_PWM_Start+0xf6>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2202      	movs	r2, #2
 8006b94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b98:	e003      	b.n	8006ba2 <HAL_TIM_PWM_Start+0xfe>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2202      	movs	r2, #2
 8006b9e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	6839      	ldr	r1, [r7, #0]
 8006baa:	4618      	mov	r0, r3
 8006bac:	f001 f866 	bl	8007c7c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a30      	ldr	r2, [pc, #192]	; (8006c78 <HAL_TIM_PWM_Start+0x1d4>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d004      	beq.n	8006bc4 <HAL_TIM_PWM_Start+0x120>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a2f      	ldr	r2, [pc, #188]	; (8006c7c <HAL_TIM_PWM_Start+0x1d8>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d101      	bne.n	8006bc8 <HAL_TIM_PWM_Start+0x124>
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	e000      	b.n	8006bca <HAL_TIM_PWM_Start+0x126>
 8006bc8:	2300      	movs	r3, #0
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d007      	beq.n	8006bde <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006bdc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a25      	ldr	r2, [pc, #148]	; (8006c78 <HAL_TIM_PWM_Start+0x1d4>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d022      	beq.n	8006c2e <HAL_TIM_PWM_Start+0x18a>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bf0:	d01d      	beq.n	8006c2e <HAL_TIM_PWM_Start+0x18a>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a22      	ldr	r2, [pc, #136]	; (8006c80 <HAL_TIM_PWM_Start+0x1dc>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d018      	beq.n	8006c2e <HAL_TIM_PWM_Start+0x18a>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a20      	ldr	r2, [pc, #128]	; (8006c84 <HAL_TIM_PWM_Start+0x1e0>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d013      	beq.n	8006c2e <HAL_TIM_PWM_Start+0x18a>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a1f      	ldr	r2, [pc, #124]	; (8006c88 <HAL_TIM_PWM_Start+0x1e4>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d00e      	beq.n	8006c2e <HAL_TIM_PWM_Start+0x18a>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a19      	ldr	r2, [pc, #100]	; (8006c7c <HAL_TIM_PWM_Start+0x1d8>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d009      	beq.n	8006c2e <HAL_TIM_PWM_Start+0x18a>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a1b      	ldr	r2, [pc, #108]	; (8006c8c <HAL_TIM_PWM_Start+0x1e8>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d004      	beq.n	8006c2e <HAL_TIM_PWM_Start+0x18a>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a19      	ldr	r2, [pc, #100]	; (8006c90 <HAL_TIM_PWM_Start+0x1ec>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d115      	bne.n	8006c5a <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	689a      	ldr	r2, [r3, #8]
 8006c34:	4b17      	ldr	r3, [pc, #92]	; (8006c94 <HAL_TIM_PWM_Start+0x1f0>)
 8006c36:	4013      	ands	r3, r2
 8006c38:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2b06      	cmp	r3, #6
 8006c3e:	d015      	beq.n	8006c6c <HAL_TIM_PWM_Start+0x1c8>
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c46:	d011      	beq.n	8006c6c <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	681a      	ldr	r2, [r3, #0]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f042 0201 	orr.w	r2, r2, #1
 8006c56:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c58:	e008      	b.n	8006c6c <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	681a      	ldr	r2, [r3, #0]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f042 0201 	orr.w	r2, r2, #1
 8006c68:	601a      	str	r2, [r3, #0]
 8006c6a:	e000      	b.n	8006c6e <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c6c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006c6e:	2300      	movs	r3, #0
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	3710      	adds	r7, #16
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}
 8006c78:	40010000 	.word	0x40010000
 8006c7c:	40010400 	.word	0x40010400
 8006c80:	40000400 	.word	0x40000400
 8006c84:	40000800 	.word	0x40000800
 8006c88:	40000c00 	.word	0x40000c00
 8006c8c:	40014000 	.word	0x40014000
 8006c90:	40001800 	.word	0x40001800
 8006c94:	00010007 	.word	0x00010007

08006c98 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b086      	sub	sp, #24
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d101      	bne.n	8006cac <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006ca8:	2301      	movs	r3, #1
 8006caa:	e08f      	b.n	8006dcc <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cb2:	b2db      	uxtb	r3, r3
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d106      	bne.n	8006cc6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f7fd f84d 	bl	8003d60 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2202      	movs	r2, #2
 8006cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	6899      	ldr	r1, [r3, #8]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681a      	ldr	r2, [r3, #0]
 8006cd8:	4b3e      	ldr	r3, [pc, #248]	; (8006dd4 <HAL_TIM_Encoder_Init+0x13c>)
 8006cda:	400b      	ands	r3, r1
 8006cdc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681a      	ldr	r2, [r3, #0]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	3304      	adds	r3, #4
 8006ce6:	4619      	mov	r1, r3
 8006ce8:	4610      	mov	r0, r2
 8006cea:	f000 fc2f 	bl	800754c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	689b      	ldr	r3, [r3, #8]
 8006cf4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	699b      	ldr	r3, [r3, #24]
 8006cfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	6a1b      	ldr	r3, [r3, #32]
 8006d04:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	697a      	ldr	r2, [r7, #20]
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006d10:	693a      	ldr	r2, [r7, #16]
 8006d12:	4b31      	ldr	r3, [pc, #196]	; (8006dd8 <HAL_TIM_Encoder_Init+0x140>)
 8006d14:	4013      	ands	r3, r2
 8006d16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	689a      	ldr	r2, [r3, #8]
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	699b      	ldr	r3, [r3, #24]
 8006d20:	021b      	lsls	r3, r3, #8
 8006d22:	4313      	orrs	r3, r2
 8006d24:	693a      	ldr	r2, [r7, #16]
 8006d26:	4313      	orrs	r3, r2
 8006d28:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006d2a:	693a      	ldr	r2, [r7, #16]
 8006d2c:	4b2b      	ldr	r3, [pc, #172]	; (8006ddc <HAL_TIM_Encoder_Init+0x144>)
 8006d2e:	4013      	ands	r3, r2
 8006d30:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006d32:	693a      	ldr	r2, [r7, #16]
 8006d34:	4b2a      	ldr	r3, [pc, #168]	; (8006de0 <HAL_TIM_Encoder_Init+0x148>)
 8006d36:	4013      	ands	r3, r2
 8006d38:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	68da      	ldr	r2, [r3, #12]
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	69db      	ldr	r3, [r3, #28]
 8006d42:	021b      	lsls	r3, r3, #8
 8006d44:	4313      	orrs	r3, r2
 8006d46:	693a      	ldr	r2, [r7, #16]
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	691b      	ldr	r3, [r3, #16]
 8006d50:	011a      	lsls	r2, r3, #4
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	6a1b      	ldr	r3, [r3, #32]
 8006d56:	031b      	lsls	r3, r3, #12
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	693a      	ldr	r2, [r7, #16]
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006d66:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006d6e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	685a      	ldr	r2, [r3, #4]
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	695b      	ldr	r3, [r3, #20]
 8006d78:	011b      	lsls	r3, r3, #4
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	68fa      	ldr	r2, [r7, #12]
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	697a      	ldr	r2, [r7, #20]
 8006d88:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	693a      	ldr	r2, [r7, #16]
 8006d90:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	68fa      	ldr	r2, [r7, #12]
 8006d98:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2201      	movs	r2, #1
 8006d9e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2201      	movs	r2, #1
 8006da6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2201      	movs	r2, #1
 8006dae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2201      	movs	r2, #1
 8006db6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2201      	movs	r2, #1
 8006dbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006dca:	2300      	movs	r3, #0
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3718      	adds	r7, #24
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}
 8006dd4:	fffebff8 	.word	0xfffebff8
 8006dd8:	fffffcfc 	.word	0xfffffcfc
 8006ddc:	fffff3f3 	.word	0xfffff3f3
 8006de0:	ffff0f0f 	.word	0xffff0f0f

08006de4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b084      	sub	sp, #16
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006df4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006dfc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e04:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e0c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d110      	bne.n	8006e36 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006e14:	7bfb      	ldrb	r3, [r7, #15]
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	d102      	bne.n	8006e20 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006e1a:	7b7b      	ldrb	r3, [r7, #13]
 8006e1c:	2b01      	cmp	r3, #1
 8006e1e:	d001      	beq.n	8006e24 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006e20:	2301      	movs	r3, #1
 8006e22:	e069      	b.n	8006ef8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2202      	movs	r2, #2
 8006e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2202      	movs	r2, #2
 8006e30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e34:	e031      	b.n	8006e9a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	2b04      	cmp	r3, #4
 8006e3a:	d110      	bne.n	8006e5e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006e3c:	7bbb      	ldrb	r3, [r7, #14]
 8006e3e:	2b01      	cmp	r3, #1
 8006e40:	d102      	bne.n	8006e48 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006e42:	7b3b      	ldrb	r3, [r7, #12]
 8006e44:	2b01      	cmp	r3, #1
 8006e46:	d001      	beq.n	8006e4c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006e48:	2301      	movs	r3, #1
 8006e4a:	e055      	b.n	8006ef8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2202      	movs	r2, #2
 8006e50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2202      	movs	r2, #2
 8006e58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e5c:	e01d      	b.n	8006e9a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006e5e:	7bfb      	ldrb	r3, [r7, #15]
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d108      	bne.n	8006e76 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006e64:	7bbb      	ldrb	r3, [r7, #14]
 8006e66:	2b01      	cmp	r3, #1
 8006e68:	d105      	bne.n	8006e76 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006e6a:	7b7b      	ldrb	r3, [r7, #13]
 8006e6c:	2b01      	cmp	r3, #1
 8006e6e:	d102      	bne.n	8006e76 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006e70:	7b3b      	ldrb	r3, [r7, #12]
 8006e72:	2b01      	cmp	r3, #1
 8006e74:	d001      	beq.n	8006e7a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006e76:	2301      	movs	r3, #1
 8006e78:	e03e      	b.n	8006ef8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2202      	movs	r2, #2
 8006e7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2202      	movs	r2, #2
 8006e86:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2202      	movs	r2, #2
 8006e8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2202      	movs	r2, #2
 8006e96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d003      	beq.n	8006ea8 <HAL_TIM_Encoder_Start+0xc4>
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	2b04      	cmp	r3, #4
 8006ea4:	d008      	beq.n	8006eb8 <HAL_TIM_Encoder_Start+0xd4>
 8006ea6:	e00f      	b.n	8006ec8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	2201      	movs	r2, #1
 8006eae:	2100      	movs	r1, #0
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f000 fee3 	bl	8007c7c <TIM_CCxChannelCmd>
      break;
 8006eb6:	e016      	b.n	8006ee6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	2201      	movs	r2, #1
 8006ebe:	2104      	movs	r1, #4
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f000 fedb 	bl	8007c7c <TIM_CCxChannelCmd>
      break;
 8006ec6:	e00e      	b.n	8006ee6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	2201      	movs	r2, #1
 8006ece:	2100      	movs	r1, #0
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f000 fed3 	bl	8007c7c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	2201      	movs	r2, #1
 8006edc:	2104      	movs	r1, #4
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f000 fecc 	bl	8007c7c <TIM_CCxChannelCmd>
      break;
 8006ee4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	681a      	ldr	r2, [r3, #0]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f042 0201 	orr.w	r2, r2, #1
 8006ef4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006ef6:	2300      	movs	r3, #0
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3710      	adds	r7, #16
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}

08006f00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b082      	sub	sp, #8
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	691b      	ldr	r3, [r3, #16]
 8006f0e:	f003 0302 	and.w	r3, r3, #2
 8006f12:	2b02      	cmp	r3, #2
 8006f14:	d122      	bne.n	8006f5c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	68db      	ldr	r3, [r3, #12]
 8006f1c:	f003 0302 	and.w	r3, r3, #2
 8006f20:	2b02      	cmp	r3, #2
 8006f22:	d11b      	bne.n	8006f5c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f06f 0202 	mvn.w	r2, #2
 8006f2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2201      	movs	r2, #1
 8006f32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	699b      	ldr	r3, [r3, #24]
 8006f3a:	f003 0303 	and.w	r3, r3, #3
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d003      	beq.n	8006f4a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 fae4 	bl	8007510 <HAL_TIM_IC_CaptureCallback>
 8006f48:	e005      	b.n	8006f56 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 fad6 	bl	80074fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f000 fae7 	bl	8007524 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	691b      	ldr	r3, [r3, #16]
 8006f62:	f003 0304 	and.w	r3, r3, #4
 8006f66:	2b04      	cmp	r3, #4
 8006f68:	d122      	bne.n	8006fb0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	68db      	ldr	r3, [r3, #12]
 8006f70:	f003 0304 	and.w	r3, r3, #4
 8006f74:	2b04      	cmp	r3, #4
 8006f76:	d11b      	bne.n	8006fb0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f06f 0204 	mvn.w	r2, #4
 8006f80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2202      	movs	r2, #2
 8006f86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	699b      	ldr	r3, [r3, #24]
 8006f8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d003      	beq.n	8006f9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f000 faba 	bl	8007510 <HAL_TIM_IC_CaptureCallback>
 8006f9c:	e005      	b.n	8006faa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f000 faac 	bl	80074fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f000 fabd 	bl	8007524 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2200      	movs	r2, #0
 8006fae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	691b      	ldr	r3, [r3, #16]
 8006fb6:	f003 0308 	and.w	r3, r3, #8
 8006fba:	2b08      	cmp	r3, #8
 8006fbc:	d122      	bne.n	8007004 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	68db      	ldr	r3, [r3, #12]
 8006fc4:	f003 0308 	and.w	r3, r3, #8
 8006fc8:	2b08      	cmp	r3, #8
 8006fca:	d11b      	bne.n	8007004 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f06f 0208 	mvn.w	r2, #8
 8006fd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2204      	movs	r2, #4
 8006fda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	69db      	ldr	r3, [r3, #28]
 8006fe2:	f003 0303 	and.w	r3, r3, #3
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d003      	beq.n	8006ff2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f000 fa90 	bl	8007510 <HAL_TIM_IC_CaptureCallback>
 8006ff0:	e005      	b.n	8006ffe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f000 fa82 	bl	80074fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f000 fa93 	bl	8007524 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2200      	movs	r2, #0
 8007002:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	691b      	ldr	r3, [r3, #16]
 800700a:	f003 0310 	and.w	r3, r3, #16
 800700e:	2b10      	cmp	r3, #16
 8007010:	d122      	bne.n	8007058 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	68db      	ldr	r3, [r3, #12]
 8007018:	f003 0310 	and.w	r3, r3, #16
 800701c:	2b10      	cmp	r3, #16
 800701e:	d11b      	bne.n	8007058 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f06f 0210 	mvn.w	r2, #16
 8007028:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2208      	movs	r2, #8
 800702e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	69db      	ldr	r3, [r3, #28]
 8007036:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800703a:	2b00      	cmp	r3, #0
 800703c:	d003      	beq.n	8007046 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f000 fa66 	bl	8007510 <HAL_TIM_IC_CaptureCallback>
 8007044:	e005      	b.n	8007052 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 fa58 	bl	80074fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f000 fa69 	bl	8007524 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2200      	movs	r2, #0
 8007056:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	691b      	ldr	r3, [r3, #16]
 800705e:	f003 0301 	and.w	r3, r3, #1
 8007062:	2b01      	cmp	r3, #1
 8007064:	d10e      	bne.n	8007084 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	68db      	ldr	r3, [r3, #12]
 800706c:	f003 0301 	and.w	r3, r3, #1
 8007070:	2b01      	cmp	r3, #1
 8007072:	d107      	bne.n	8007084 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f06f 0201 	mvn.w	r2, #1
 800707c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f7fc f84a 	bl	8003118 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	691b      	ldr	r3, [r3, #16]
 800708a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800708e:	2b80      	cmp	r3, #128	; 0x80
 8007090:	d10e      	bne.n	80070b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	68db      	ldr	r3, [r3, #12]
 8007098:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800709c:	2b80      	cmp	r3, #128	; 0x80
 800709e:	d107      	bne.n	80070b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80070a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f000 ff22 	bl	8007ef4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	691b      	ldr	r3, [r3, #16]
 80070b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070be:	d10e      	bne.n	80070de <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	68db      	ldr	r3, [r3, #12]
 80070c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070ca:	2b80      	cmp	r3, #128	; 0x80
 80070cc:	d107      	bne.n	80070de <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80070d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f000 ff15 	bl	8007f08 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	691b      	ldr	r3, [r3, #16]
 80070e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070e8:	2b40      	cmp	r3, #64	; 0x40
 80070ea:	d10e      	bne.n	800710a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	68db      	ldr	r3, [r3, #12]
 80070f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070f6:	2b40      	cmp	r3, #64	; 0x40
 80070f8:	d107      	bne.n	800710a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007102:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f000 fa17 	bl	8007538 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	691b      	ldr	r3, [r3, #16]
 8007110:	f003 0320 	and.w	r3, r3, #32
 8007114:	2b20      	cmp	r3, #32
 8007116:	d10e      	bne.n	8007136 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	68db      	ldr	r3, [r3, #12]
 800711e:	f003 0320 	and.w	r3, r3, #32
 8007122:	2b20      	cmp	r3, #32
 8007124:	d107      	bne.n	8007136 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f06f 0220 	mvn.w	r2, #32
 800712e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f000 fed5 	bl	8007ee0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007136:	bf00      	nop
 8007138:	3708      	adds	r7, #8
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}
	...

08007140 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b086      	sub	sp, #24
 8007144:	af00      	add	r7, sp, #0
 8007146:	60f8      	str	r0, [r7, #12]
 8007148:	60b9      	str	r1, [r7, #8]
 800714a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800714c:	2300      	movs	r3, #0
 800714e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007156:	2b01      	cmp	r3, #1
 8007158:	d101      	bne.n	800715e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800715a:	2302      	movs	r3, #2
 800715c:	e0ff      	b.n	800735e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2201      	movs	r2, #1
 8007162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2b14      	cmp	r3, #20
 800716a:	f200 80f0 	bhi.w	800734e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800716e:	a201      	add	r2, pc, #4	; (adr r2, 8007174 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007174:	080071c9 	.word	0x080071c9
 8007178:	0800734f 	.word	0x0800734f
 800717c:	0800734f 	.word	0x0800734f
 8007180:	0800734f 	.word	0x0800734f
 8007184:	08007209 	.word	0x08007209
 8007188:	0800734f 	.word	0x0800734f
 800718c:	0800734f 	.word	0x0800734f
 8007190:	0800734f 	.word	0x0800734f
 8007194:	0800724b 	.word	0x0800724b
 8007198:	0800734f 	.word	0x0800734f
 800719c:	0800734f 	.word	0x0800734f
 80071a0:	0800734f 	.word	0x0800734f
 80071a4:	0800728b 	.word	0x0800728b
 80071a8:	0800734f 	.word	0x0800734f
 80071ac:	0800734f 	.word	0x0800734f
 80071b0:	0800734f 	.word	0x0800734f
 80071b4:	080072cd 	.word	0x080072cd
 80071b8:	0800734f 	.word	0x0800734f
 80071bc:	0800734f 	.word	0x0800734f
 80071c0:	0800734f 	.word	0x0800734f
 80071c4:	0800730d 	.word	0x0800730d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	68b9      	ldr	r1, [r7, #8]
 80071ce:	4618      	mov	r0, r3
 80071d0:	f000 fa5c 	bl	800768c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	699a      	ldr	r2, [r3, #24]
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f042 0208 	orr.w	r2, r2, #8
 80071e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	699a      	ldr	r2, [r3, #24]
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f022 0204 	bic.w	r2, r2, #4
 80071f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	6999      	ldr	r1, [r3, #24]
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	691a      	ldr	r2, [r3, #16]
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	430a      	orrs	r2, r1
 8007204:	619a      	str	r2, [r3, #24]
      break;
 8007206:	e0a5      	b.n	8007354 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	68b9      	ldr	r1, [r7, #8]
 800720e:	4618      	mov	r0, r3
 8007210:	f000 faae 	bl	8007770 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	699a      	ldr	r2, [r3, #24]
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007222:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	699a      	ldr	r2, [r3, #24]
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007232:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	6999      	ldr	r1, [r3, #24]
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	691b      	ldr	r3, [r3, #16]
 800723e:	021a      	lsls	r2, r3, #8
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	430a      	orrs	r2, r1
 8007246:	619a      	str	r2, [r3, #24]
      break;
 8007248:	e084      	b.n	8007354 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	68b9      	ldr	r1, [r7, #8]
 8007250:	4618      	mov	r0, r3
 8007252:	f000 fb05 	bl	8007860 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	69da      	ldr	r2, [r3, #28]
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f042 0208 	orr.w	r2, r2, #8
 8007264:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	69da      	ldr	r2, [r3, #28]
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f022 0204 	bic.w	r2, r2, #4
 8007274:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	69d9      	ldr	r1, [r3, #28]
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	691a      	ldr	r2, [r3, #16]
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	430a      	orrs	r2, r1
 8007286:	61da      	str	r2, [r3, #28]
      break;
 8007288:	e064      	b.n	8007354 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	68b9      	ldr	r1, [r7, #8]
 8007290:	4618      	mov	r0, r3
 8007292:	f000 fb5b 	bl	800794c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	69da      	ldr	r2, [r3, #28]
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80072a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	69da      	ldr	r2, [r3, #28]
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	69d9      	ldr	r1, [r3, #28]
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	691b      	ldr	r3, [r3, #16]
 80072c0:	021a      	lsls	r2, r3, #8
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	430a      	orrs	r2, r1
 80072c8:	61da      	str	r2, [r3, #28]
      break;
 80072ca:	e043      	b.n	8007354 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	68b9      	ldr	r1, [r7, #8]
 80072d2:	4618      	mov	r0, r3
 80072d4:	f000 fb92 	bl	80079fc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f042 0208 	orr.w	r2, r2, #8
 80072e6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f022 0204 	bic.w	r2, r2, #4
 80072f6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	691a      	ldr	r2, [r3, #16]
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	430a      	orrs	r2, r1
 8007308:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800730a:	e023      	b.n	8007354 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	68b9      	ldr	r1, [r7, #8]
 8007312:	4618      	mov	r0, r3
 8007314:	f000 fbc4 	bl	8007aa0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007326:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007336:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	691b      	ldr	r3, [r3, #16]
 8007342:	021a      	lsls	r2, r3, #8
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	430a      	orrs	r2, r1
 800734a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800734c:	e002      	b.n	8007354 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800734e:	2301      	movs	r3, #1
 8007350:	75fb      	strb	r3, [r7, #23]
      break;
 8007352:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	2200      	movs	r2, #0
 8007358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800735c:	7dfb      	ldrb	r3, [r7, #23]
}
 800735e:	4618      	mov	r0, r3
 8007360:	3718      	adds	r7, #24
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}
 8007366:	bf00      	nop

08007368 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b084      	sub	sp, #16
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
 8007370:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007372:	2300      	movs	r3, #0
 8007374:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800737c:	2b01      	cmp	r3, #1
 800737e:	d101      	bne.n	8007384 <HAL_TIM_ConfigClockSource+0x1c>
 8007380:	2302      	movs	r3, #2
 8007382:	e0b4      	b.n	80074ee <HAL_TIM_ConfigClockSource+0x186>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2201      	movs	r2, #1
 8007388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2202      	movs	r2, #2
 8007390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	689b      	ldr	r3, [r3, #8]
 800739a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800739c:	68ba      	ldr	r2, [r7, #8]
 800739e:	4b56      	ldr	r3, [pc, #344]	; (80074f8 <HAL_TIM_ConfigClockSource+0x190>)
 80073a0:	4013      	ands	r3, r2
 80073a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80073aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	68ba      	ldr	r2, [r7, #8]
 80073b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073bc:	d03e      	beq.n	800743c <HAL_TIM_ConfigClockSource+0xd4>
 80073be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073c2:	f200 8087 	bhi.w	80074d4 <HAL_TIM_ConfigClockSource+0x16c>
 80073c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073ca:	f000 8086 	beq.w	80074da <HAL_TIM_ConfigClockSource+0x172>
 80073ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073d2:	d87f      	bhi.n	80074d4 <HAL_TIM_ConfigClockSource+0x16c>
 80073d4:	2b70      	cmp	r3, #112	; 0x70
 80073d6:	d01a      	beq.n	800740e <HAL_TIM_ConfigClockSource+0xa6>
 80073d8:	2b70      	cmp	r3, #112	; 0x70
 80073da:	d87b      	bhi.n	80074d4 <HAL_TIM_ConfigClockSource+0x16c>
 80073dc:	2b60      	cmp	r3, #96	; 0x60
 80073de:	d050      	beq.n	8007482 <HAL_TIM_ConfigClockSource+0x11a>
 80073e0:	2b60      	cmp	r3, #96	; 0x60
 80073e2:	d877      	bhi.n	80074d4 <HAL_TIM_ConfigClockSource+0x16c>
 80073e4:	2b50      	cmp	r3, #80	; 0x50
 80073e6:	d03c      	beq.n	8007462 <HAL_TIM_ConfigClockSource+0xfa>
 80073e8:	2b50      	cmp	r3, #80	; 0x50
 80073ea:	d873      	bhi.n	80074d4 <HAL_TIM_ConfigClockSource+0x16c>
 80073ec:	2b40      	cmp	r3, #64	; 0x40
 80073ee:	d058      	beq.n	80074a2 <HAL_TIM_ConfigClockSource+0x13a>
 80073f0:	2b40      	cmp	r3, #64	; 0x40
 80073f2:	d86f      	bhi.n	80074d4 <HAL_TIM_ConfigClockSource+0x16c>
 80073f4:	2b30      	cmp	r3, #48	; 0x30
 80073f6:	d064      	beq.n	80074c2 <HAL_TIM_ConfigClockSource+0x15a>
 80073f8:	2b30      	cmp	r3, #48	; 0x30
 80073fa:	d86b      	bhi.n	80074d4 <HAL_TIM_ConfigClockSource+0x16c>
 80073fc:	2b20      	cmp	r3, #32
 80073fe:	d060      	beq.n	80074c2 <HAL_TIM_ConfigClockSource+0x15a>
 8007400:	2b20      	cmp	r3, #32
 8007402:	d867      	bhi.n	80074d4 <HAL_TIM_ConfigClockSource+0x16c>
 8007404:	2b00      	cmp	r3, #0
 8007406:	d05c      	beq.n	80074c2 <HAL_TIM_ConfigClockSource+0x15a>
 8007408:	2b10      	cmp	r3, #16
 800740a:	d05a      	beq.n	80074c2 <HAL_TIM_ConfigClockSource+0x15a>
 800740c:	e062      	b.n	80074d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800741e:	f000 fc0d 	bl	8007c3c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	689b      	ldr	r3, [r3, #8]
 8007428:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007430:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	68ba      	ldr	r2, [r7, #8]
 8007438:	609a      	str	r2, [r3, #8]
      break;
 800743a:	e04f      	b.n	80074dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800744c:	f000 fbf6 	bl	8007c3c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	689a      	ldr	r2, [r3, #8]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800745e:	609a      	str	r2, [r3, #8]
      break;
 8007460:	e03c      	b.n	80074dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800746e:	461a      	mov	r2, r3
 8007470:	f000 fb6a 	bl	8007b48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	2150      	movs	r1, #80	; 0x50
 800747a:	4618      	mov	r0, r3
 800747c:	f000 fbc3 	bl	8007c06 <TIM_ITRx_SetConfig>
      break;
 8007480:	e02c      	b.n	80074dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800748e:	461a      	mov	r2, r3
 8007490:	f000 fb89 	bl	8007ba6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	2160      	movs	r1, #96	; 0x60
 800749a:	4618      	mov	r0, r3
 800749c:	f000 fbb3 	bl	8007c06 <TIM_ITRx_SetConfig>
      break;
 80074a0:	e01c      	b.n	80074dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80074ae:	461a      	mov	r2, r3
 80074b0:	f000 fb4a 	bl	8007b48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	2140      	movs	r1, #64	; 0x40
 80074ba:	4618      	mov	r0, r3
 80074bc:	f000 fba3 	bl	8007c06 <TIM_ITRx_SetConfig>
      break;
 80074c0:	e00c      	b.n	80074dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681a      	ldr	r2, [r3, #0]
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4619      	mov	r1, r3
 80074cc:	4610      	mov	r0, r2
 80074ce:	f000 fb9a 	bl	8007c06 <TIM_ITRx_SetConfig>
      break;
 80074d2:	e003      	b.n	80074dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80074d4:	2301      	movs	r3, #1
 80074d6:	73fb      	strb	r3, [r7, #15]
      break;
 80074d8:	e000      	b.n	80074dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80074da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2201      	movs	r2, #1
 80074e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2200      	movs	r2, #0
 80074e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80074ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3710      	adds	r7, #16
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}
 80074f6:	bf00      	nop
 80074f8:	fffeff88 	.word	0xfffeff88

080074fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b083      	sub	sp, #12
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007504:	bf00      	nop
 8007506:	370c      	adds	r7, #12
 8007508:	46bd      	mov	sp, r7
 800750a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750e:	4770      	bx	lr

08007510 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007510:	b480      	push	{r7}
 8007512:	b083      	sub	sp, #12
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007518:	bf00      	nop
 800751a:	370c      	adds	r7, #12
 800751c:	46bd      	mov	sp, r7
 800751e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007522:	4770      	bx	lr

08007524 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007524:	b480      	push	{r7}
 8007526:	b083      	sub	sp, #12
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800752c:	bf00      	nop
 800752e:	370c      	adds	r7, #12
 8007530:	46bd      	mov	sp, r7
 8007532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007536:	4770      	bx	lr

08007538 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007538:	b480      	push	{r7}
 800753a:	b083      	sub	sp, #12
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007540:	bf00      	nop
 8007542:	370c      	adds	r7, #12
 8007544:	46bd      	mov	sp, r7
 8007546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754a:	4770      	bx	lr

0800754c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800754c:	b480      	push	{r7}
 800754e:	b085      	sub	sp, #20
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	4a40      	ldr	r2, [pc, #256]	; (8007660 <TIM_Base_SetConfig+0x114>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d013      	beq.n	800758c <TIM_Base_SetConfig+0x40>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800756a:	d00f      	beq.n	800758c <TIM_Base_SetConfig+0x40>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	4a3d      	ldr	r2, [pc, #244]	; (8007664 <TIM_Base_SetConfig+0x118>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d00b      	beq.n	800758c <TIM_Base_SetConfig+0x40>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	4a3c      	ldr	r2, [pc, #240]	; (8007668 <TIM_Base_SetConfig+0x11c>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d007      	beq.n	800758c <TIM_Base_SetConfig+0x40>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	4a3b      	ldr	r2, [pc, #236]	; (800766c <TIM_Base_SetConfig+0x120>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d003      	beq.n	800758c <TIM_Base_SetConfig+0x40>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	4a3a      	ldr	r2, [pc, #232]	; (8007670 <TIM_Base_SetConfig+0x124>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d108      	bne.n	800759e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007592:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	685b      	ldr	r3, [r3, #4]
 8007598:	68fa      	ldr	r2, [r7, #12]
 800759a:	4313      	orrs	r3, r2
 800759c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	4a2f      	ldr	r2, [pc, #188]	; (8007660 <TIM_Base_SetConfig+0x114>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d02b      	beq.n	80075fe <TIM_Base_SetConfig+0xb2>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075ac:	d027      	beq.n	80075fe <TIM_Base_SetConfig+0xb2>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	4a2c      	ldr	r2, [pc, #176]	; (8007664 <TIM_Base_SetConfig+0x118>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d023      	beq.n	80075fe <TIM_Base_SetConfig+0xb2>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	4a2b      	ldr	r2, [pc, #172]	; (8007668 <TIM_Base_SetConfig+0x11c>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d01f      	beq.n	80075fe <TIM_Base_SetConfig+0xb2>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	4a2a      	ldr	r2, [pc, #168]	; (800766c <TIM_Base_SetConfig+0x120>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d01b      	beq.n	80075fe <TIM_Base_SetConfig+0xb2>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	4a29      	ldr	r2, [pc, #164]	; (8007670 <TIM_Base_SetConfig+0x124>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d017      	beq.n	80075fe <TIM_Base_SetConfig+0xb2>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	4a28      	ldr	r2, [pc, #160]	; (8007674 <TIM_Base_SetConfig+0x128>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d013      	beq.n	80075fe <TIM_Base_SetConfig+0xb2>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	4a27      	ldr	r2, [pc, #156]	; (8007678 <TIM_Base_SetConfig+0x12c>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d00f      	beq.n	80075fe <TIM_Base_SetConfig+0xb2>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	4a26      	ldr	r2, [pc, #152]	; (800767c <TIM_Base_SetConfig+0x130>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d00b      	beq.n	80075fe <TIM_Base_SetConfig+0xb2>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	4a25      	ldr	r2, [pc, #148]	; (8007680 <TIM_Base_SetConfig+0x134>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d007      	beq.n	80075fe <TIM_Base_SetConfig+0xb2>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	4a24      	ldr	r2, [pc, #144]	; (8007684 <TIM_Base_SetConfig+0x138>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d003      	beq.n	80075fe <TIM_Base_SetConfig+0xb2>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	4a23      	ldr	r2, [pc, #140]	; (8007688 <TIM_Base_SetConfig+0x13c>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d108      	bne.n	8007610 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007604:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	68db      	ldr	r3, [r3, #12]
 800760a:	68fa      	ldr	r2, [r7, #12]
 800760c:	4313      	orrs	r3, r2
 800760e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	695b      	ldr	r3, [r3, #20]
 800761a:	4313      	orrs	r3, r2
 800761c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	68fa      	ldr	r2, [r7, #12]
 8007622:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	689a      	ldr	r2, [r3, #8]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	681a      	ldr	r2, [r3, #0]
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	4a0a      	ldr	r2, [pc, #40]	; (8007660 <TIM_Base_SetConfig+0x114>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d003      	beq.n	8007644 <TIM_Base_SetConfig+0xf8>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	4a0c      	ldr	r2, [pc, #48]	; (8007670 <TIM_Base_SetConfig+0x124>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d103      	bne.n	800764c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	691a      	ldr	r2, [r3, #16]
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2201      	movs	r2, #1
 8007650:	615a      	str	r2, [r3, #20]
}
 8007652:	bf00      	nop
 8007654:	3714      	adds	r7, #20
 8007656:	46bd      	mov	sp, r7
 8007658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765c:	4770      	bx	lr
 800765e:	bf00      	nop
 8007660:	40010000 	.word	0x40010000
 8007664:	40000400 	.word	0x40000400
 8007668:	40000800 	.word	0x40000800
 800766c:	40000c00 	.word	0x40000c00
 8007670:	40010400 	.word	0x40010400
 8007674:	40014000 	.word	0x40014000
 8007678:	40014400 	.word	0x40014400
 800767c:	40014800 	.word	0x40014800
 8007680:	40001800 	.word	0x40001800
 8007684:	40001c00 	.word	0x40001c00
 8007688:	40002000 	.word	0x40002000

0800768c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800768c:	b480      	push	{r7}
 800768e:	b087      	sub	sp, #28
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
 8007694:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6a1b      	ldr	r3, [r3, #32]
 800769a:	f023 0201 	bic.w	r2, r3, #1
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6a1b      	ldr	r3, [r3, #32]
 80076a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	699b      	ldr	r3, [r3, #24]
 80076b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80076b4:	68fa      	ldr	r2, [r7, #12]
 80076b6:	4b2b      	ldr	r3, [pc, #172]	; (8007764 <TIM_OC1_SetConfig+0xd8>)
 80076b8:	4013      	ands	r3, r2
 80076ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f023 0303 	bic.w	r3, r3, #3
 80076c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	68fa      	ldr	r2, [r7, #12]
 80076ca:	4313      	orrs	r3, r2
 80076cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	f023 0302 	bic.w	r3, r3, #2
 80076d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	689b      	ldr	r3, [r3, #8]
 80076da:	697a      	ldr	r2, [r7, #20]
 80076dc:	4313      	orrs	r3, r2
 80076de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	4a21      	ldr	r2, [pc, #132]	; (8007768 <TIM_OC1_SetConfig+0xdc>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d003      	beq.n	80076f0 <TIM_OC1_SetConfig+0x64>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	4a20      	ldr	r2, [pc, #128]	; (800776c <TIM_OC1_SetConfig+0xe0>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d10c      	bne.n	800770a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	f023 0308 	bic.w	r3, r3, #8
 80076f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	68db      	ldr	r3, [r3, #12]
 80076fc:	697a      	ldr	r2, [r7, #20]
 80076fe:	4313      	orrs	r3, r2
 8007700:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	f023 0304 	bic.w	r3, r3, #4
 8007708:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	4a16      	ldr	r2, [pc, #88]	; (8007768 <TIM_OC1_SetConfig+0xdc>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d003      	beq.n	800771a <TIM_OC1_SetConfig+0x8e>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	4a15      	ldr	r2, [pc, #84]	; (800776c <TIM_OC1_SetConfig+0xe0>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d111      	bne.n	800773e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007720:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007728:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	695b      	ldr	r3, [r3, #20]
 800772e:	693a      	ldr	r2, [r7, #16]
 8007730:	4313      	orrs	r3, r2
 8007732:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	699b      	ldr	r3, [r3, #24]
 8007738:	693a      	ldr	r2, [r7, #16]
 800773a:	4313      	orrs	r3, r2
 800773c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	693a      	ldr	r2, [r7, #16]
 8007742:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	68fa      	ldr	r2, [r7, #12]
 8007748:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	685a      	ldr	r2, [r3, #4]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	697a      	ldr	r2, [r7, #20]
 8007756:	621a      	str	r2, [r3, #32]
}
 8007758:	bf00      	nop
 800775a:	371c      	adds	r7, #28
 800775c:	46bd      	mov	sp, r7
 800775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007762:	4770      	bx	lr
 8007764:	fffeff8f 	.word	0xfffeff8f
 8007768:	40010000 	.word	0x40010000
 800776c:	40010400 	.word	0x40010400

08007770 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007770:	b480      	push	{r7}
 8007772:	b087      	sub	sp, #28
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
 8007778:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6a1b      	ldr	r3, [r3, #32]
 800777e:	f023 0210 	bic.w	r2, r3, #16
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6a1b      	ldr	r3, [r3, #32]
 800778a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	699b      	ldr	r3, [r3, #24]
 8007796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007798:	68fa      	ldr	r2, [r7, #12]
 800779a:	4b2e      	ldr	r3, [pc, #184]	; (8007854 <TIM_OC2_SetConfig+0xe4>)
 800779c:	4013      	ands	r3, r2
 800779e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	021b      	lsls	r3, r3, #8
 80077ae:	68fa      	ldr	r2, [r7, #12]
 80077b0:	4313      	orrs	r3, r2
 80077b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	f023 0320 	bic.w	r3, r3, #32
 80077ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	689b      	ldr	r3, [r3, #8]
 80077c0:	011b      	lsls	r3, r3, #4
 80077c2:	697a      	ldr	r2, [r7, #20]
 80077c4:	4313      	orrs	r3, r2
 80077c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	4a23      	ldr	r2, [pc, #140]	; (8007858 <TIM_OC2_SetConfig+0xe8>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d003      	beq.n	80077d8 <TIM_OC2_SetConfig+0x68>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	4a22      	ldr	r2, [pc, #136]	; (800785c <TIM_OC2_SetConfig+0xec>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d10d      	bne.n	80077f4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	68db      	ldr	r3, [r3, #12]
 80077e4:	011b      	lsls	r3, r3, #4
 80077e6:	697a      	ldr	r2, [r7, #20]
 80077e8:	4313      	orrs	r3, r2
 80077ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80077ec:	697b      	ldr	r3, [r7, #20]
 80077ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	4a18      	ldr	r2, [pc, #96]	; (8007858 <TIM_OC2_SetConfig+0xe8>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d003      	beq.n	8007804 <TIM_OC2_SetConfig+0x94>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	4a17      	ldr	r2, [pc, #92]	; (800785c <TIM_OC2_SetConfig+0xec>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d113      	bne.n	800782c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800780a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800780c:	693b      	ldr	r3, [r7, #16]
 800780e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007812:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	695b      	ldr	r3, [r3, #20]
 8007818:	009b      	lsls	r3, r3, #2
 800781a:	693a      	ldr	r2, [r7, #16]
 800781c:	4313      	orrs	r3, r2
 800781e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	699b      	ldr	r3, [r3, #24]
 8007824:	009b      	lsls	r3, r3, #2
 8007826:	693a      	ldr	r2, [r7, #16]
 8007828:	4313      	orrs	r3, r2
 800782a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	693a      	ldr	r2, [r7, #16]
 8007830:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	68fa      	ldr	r2, [r7, #12]
 8007836:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	685a      	ldr	r2, [r3, #4]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	697a      	ldr	r2, [r7, #20]
 8007844:	621a      	str	r2, [r3, #32]
}
 8007846:	bf00      	nop
 8007848:	371c      	adds	r7, #28
 800784a:	46bd      	mov	sp, r7
 800784c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007850:	4770      	bx	lr
 8007852:	bf00      	nop
 8007854:	feff8fff 	.word	0xfeff8fff
 8007858:	40010000 	.word	0x40010000
 800785c:	40010400 	.word	0x40010400

08007860 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007860:	b480      	push	{r7}
 8007862:	b087      	sub	sp, #28
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
 8007868:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6a1b      	ldr	r3, [r3, #32]
 800786e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6a1b      	ldr	r3, [r3, #32]
 800787a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	685b      	ldr	r3, [r3, #4]
 8007880:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	69db      	ldr	r3, [r3, #28]
 8007886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007888:	68fa      	ldr	r2, [r7, #12]
 800788a:	4b2d      	ldr	r3, [pc, #180]	; (8007940 <TIM_OC3_SetConfig+0xe0>)
 800788c:	4013      	ands	r3, r2
 800788e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	f023 0303 	bic.w	r3, r3, #3
 8007896:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	68fa      	ldr	r2, [r7, #12]
 800789e:	4313      	orrs	r3, r2
 80078a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80078a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	689b      	ldr	r3, [r3, #8]
 80078ae:	021b      	lsls	r3, r3, #8
 80078b0:	697a      	ldr	r2, [r7, #20]
 80078b2:	4313      	orrs	r3, r2
 80078b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	4a22      	ldr	r2, [pc, #136]	; (8007944 <TIM_OC3_SetConfig+0xe4>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d003      	beq.n	80078c6 <TIM_OC3_SetConfig+0x66>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	4a21      	ldr	r2, [pc, #132]	; (8007948 <TIM_OC3_SetConfig+0xe8>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d10d      	bne.n	80078e2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80078cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	68db      	ldr	r3, [r3, #12]
 80078d2:	021b      	lsls	r3, r3, #8
 80078d4:	697a      	ldr	r2, [r7, #20]
 80078d6:	4313      	orrs	r3, r2
 80078d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80078e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	4a17      	ldr	r2, [pc, #92]	; (8007944 <TIM_OC3_SetConfig+0xe4>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d003      	beq.n	80078f2 <TIM_OC3_SetConfig+0x92>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	4a16      	ldr	r2, [pc, #88]	; (8007948 <TIM_OC3_SetConfig+0xe8>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d113      	bne.n	800791a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80078f2:	693b      	ldr	r3, [r7, #16]
 80078f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80078f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007900:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	695b      	ldr	r3, [r3, #20]
 8007906:	011b      	lsls	r3, r3, #4
 8007908:	693a      	ldr	r2, [r7, #16]
 800790a:	4313      	orrs	r3, r2
 800790c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	699b      	ldr	r3, [r3, #24]
 8007912:	011b      	lsls	r3, r3, #4
 8007914:	693a      	ldr	r2, [r7, #16]
 8007916:	4313      	orrs	r3, r2
 8007918:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	693a      	ldr	r2, [r7, #16]
 800791e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	68fa      	ldr	r2, [r7, #12]
 8007924:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	685a      	ldr	r2, [r3, #4]
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	697a      	ldr	r2, [r7, #20]
 8007932:	621a      	str	r2, [r3, #32]
}
 8007934:	bf00      	nop
 8007936:	371c      	adds	r7, #28
 8007938:	46bd      	mov	sp, r7
 800793a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793e:	4770      	bx	lr
 8007940:	fffeff8f 	.word	0xfffeff8f
 8007944:	40010000 	.word	0x40010000
 8007948:	40010400 	.word	0x40010400

0800794c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800794c:	b480      	push	{r7}
 800794e:	b087      	sub	sp, #28
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6a1b      	ldr	r3, [r3, #32]
 800795a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6a1b      	ldr	r3, [r3, #32]
 8007966:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	69db      	ldr	r3, [r3, #28]
 8007972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007974:	68fa      	ldr	r2, [r7, #12]
 8007976:	4b1e      	ldr	r3, [pc, #120]	; (80079f0 <TIM_OC4_SetConfig+0xa4>)
 8007978:	4013      	ands	r3, r2
 800797a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007982:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	021b      	lsls	r3, r3, #8
 800798a:	68fa      	ldr	r2, [r7, #12]
 800798c:	4313      	orrs	r3, r2
 800798e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007996:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	689b      	ldr	r3, [r3, #8]
 800799c:	031b      	lsls	r3, r3, #12
 800799e:	693a      	ldr	r2, [r7, #16]
 80079a0:	4313      	orrs	r3, r2
 80079a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	4a13      	ldr	r2, [pc, #76]	; (80079f4 <TIM_OC4_SetConfig+0xa8>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d003      	beq.n	80079b4 <TIM_OC4_SetConfig+0x68>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	4a12      	ldr	r2, [pc, #72]	; (80079f8 <TIM_OC4_SetConfig+0xac>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d109      	bne.n	80079c8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80079b4:	697b      	ldr	r3, [r7, #20]
 80079b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80079ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	695b      	ldr	r3, [r3, #20]
 80079c0:	019b      	lsls	r3, r3, #6
 80079c2:	697a      	ldr	r2, [r7, #20]
 80079c4:	4313      	orrs	r3, r2
 80079c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	697a      	ldr	r2, [r7, #20]
 80079cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	68fa      	ldr	r2, [r7, #12]
 80079d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	685a      	ldr	r2, [r3, #4]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	693a      	ldr	r2, [r7, #16]
 80079e0:	621a      	str	r2, [r3, #32]
}
 80079e2:	bf00      	nop
 80079e4:	371c      	adds	r7, #28
 80079e6:	46bd      	mov	sp, r7
 80079e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ec:	4770      	bx	lr
 80079ee:	bf00      	nop
 80079f0:	feff8fff 	.word	0xfeff8fff
 80079f4:	40010000 	.word	0x40010000
 80079f8:	40010400 	.word	0x40010400

080079fc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b087      	sub	sp, #28
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
 8007a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6a1b      	ldr	r3, [r3, #32]
 8007a0a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6a1b      	ldr	r3, [r3, #32]
 8007a16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	685b      	ldr	r3, [r3, #4]
 8007a1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007a24:	68fa      	ldr	r2, [r7, #12]
 8007a26:	4b1b      	ldr	r3, [pc, #108]	; (8007a94 <TIM_OC5_SetConfig+0x98>)
 8007a28:	4013      	ands	r3, r2
 8007a2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	68fa      	ldr	r2, [r7, #12]
 8007a32:	4313      	orrs	r3, r2
 8007a34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007a36:	693b      	ldr	r3, [r7, #16]
 8007a38:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007a3c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	689b      	ldr	r3, [r3, #8]
 8007a42:	041b      	lsls	r3, r3, #16
 8007a44:	693a      	ldr	r2, [r7, #16]
 8007a46:	4313      	orrs	r3, r2
 8007a48:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	4a12      	ldr	r2, [pc, #72]	; (8007a98 <TIM_OC5_SetConfig+0x9c>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d003      	beq.n	8007a5a <TIM_OC5_SetConfig+0x5e>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	4a11      	ldr	r2, [pc, #68]	; (8007a9c <TIM_OC5_SetConfig+0xa0>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d109      	bne.n	8007a6e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a60:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	695b      	ldr	r3, [r3, #20]
 8007a66:	021b      	lsls	r3, r3, #8
 8007a68:	697a      	ldr	r2, [r7, #20]
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	697a      	ldr	r2, [r7, #20]
 8007a72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	68fa      	ldr	r2, [r7, #12]
 8007a78:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	685a      	ldr	r2, [r3, #4]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	693a      	ldr	r2, [r7, #16]
 8007a86:	621a      	str	r2, [r3, #32]
}
 8007a88:	bf00      	nop
 8007a8a:	371c      	adds	r7, #28
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a92:	4770      	bx	lr
 8007a94:	fffeff8f 	.word	0xfffeff8f
 8007a98:	40010000 	.word	0x40010000
 8007a9c:	40010400 	.word	0x40010400

08007aa0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	b087      	sub	sp, #28
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
 8007aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6a1b      	ldr	r3, [r3, #32]
 8007aae:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6a1b      	ldr	r3, [r3, #32]
 8007aba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007ac8:	68fa      	ldr	r2, [r7, #12]
 8007aca:	4b1c      	ldr	r3, [pc, #112]	; (8007b3c <TIM_OC6_SetConfig+0x9c>)
 8007acc:	4013      	ands	r3, r2
 8007ace:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	021b      	lsls	r3, r3, #8
 8007ad6:	68fa      	ldr	r2, [r7, #12]
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007ae2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	689b      	ldr	r3, [r3, #8]
 8007ae8:	051b      	lsls	r3, r3, #20
 8007aea:	693a      	ldr	r2, [r7, #16]
 8007aec:	4313      	orrs	r3, r2
 8007aee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	4a13      	ldr	r2, [pc, #76]	; (8007b40 <TIM_OC6_SetConfig+0xa0>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d003      	beq.n	8007b00 <TIM_OC6_SetConfig+0x60>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	4a12      	ldr	r2, [pc, #72]	; (8007b44 <TIM_OC6_SetConfig+0xa4>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d109      	bne.n	8007b14 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007b06:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	695b      	ldr	r3, [r3, #20]
 8007b0c:	029b      	lsls	r3, r3, #10
 8007b0e:	697a      	ldr	r2, [r7, #20]
 8007b10:	4313      	orrs	r3, r2
 8007b12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	697a      	ldr	r2, [r7, #20]
 8007b18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	68fa      	ldr	r2, [r7, #12]
 8007b1e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	685a      	ldr	r2, [r3, #4]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	693a      	ldr	r2, [r7, #16]
 8007b2c:	621a      	str	r2, [r3, #32]
}
 8007b2e:	bf00      	nop
 8007b30:	371c      	adds	r7, #28
 8007b32:	46bd      	mov	sp, r7
 8007b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b38:	4770      	bx	lr
 8007b3a:	bf00      	nop
 8007b3c:	feff8fff 	.word	0xfeff8fff
 8007b40:	40010000 	.word	0x40010000
 8007b44:	40010400 	.word	0x40010400

08007b48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b087      	sub	sp, #28
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	60f8      	str	r0, [r7, #12]
 8007b50:	60b9      	str	r1, [r7, #8]
 8007b52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	6a1b      	ldr	r3, [r3, #32]
 8007b58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	6a1b      	ldr	r3, [r3, #32]
 8007b5e:	f023 0201 	bic.w	r2, r3, #1
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	699b      	ldr	r3, [r3, #24]
 8007b6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007b72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	011b      	lsls	r3, r3, #4
 8007b78:	693a      	ldr	r2, [r7, #16]
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007b7e:	697b      	ldr	r3, [r7, #20]
 8007b80:	f023 030a 	bic.w	r3, r3, #10
 8007b84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007b86:	697a      	ldr	r2, [r7, #20]
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	693a      	ldr	r2, [r7, #16]
 8007b92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	697a      	ldr	r2, [r7, #20]
 8007b98:	621a      	str	r2, [r3, #32]
}
 8007b9a:	bf00      	nop
 8007b9c:	371c      	adds	r7, #28
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba4:	4770      	bx	lr

08007ba6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ba6:	b480      	push	{r7}
 8007ba8:	b087      	sub	sp, #28
 8007baa:	af00      	add	r7, sp, #0
 8007bac:	60f8      	str	r0, [r7, #12]
 8007bae:	60b9      	str	r1, [r7, #8]
 8007bb0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	6a1b      	ldr	r3, [r3, #32]
 8007bb6:	f023 0210 	bic.w	r2, r3, #16
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	699b      	ldr	r3, [r3, #24]
 8007bc2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	6a1b      	ldr	r3, [r3, #32]
 8007bc8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007bd0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	031b      	lsls	r3, r3, #12
 8007bd6:	697a      	ldr	r2, [r7, #20]
 8007bd8:	4313      	orrs	r3, r2
 8007bda:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007bdc:	693b      	ldr	r3, [r7, #16]
 8007bde:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007be2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	011b      	lsls	r3, r3, #4
 8007be8:	693a      	ldr	r2, [r7, #16]
 8007bea:	4313      	orrs	r3, r2
 8007bec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	697a      	ldr	r2, [r7, #20]
 8007bf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	693a      	ldr	r2, [r7, #16]
 8007bf8:	621a      	str	r2, [r3, #32]
}
 8007bfa:	bf00      	nop
 8007bfc:	371c      	adds	r7, #28
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c04:	4770      	bx	lr

08007c06 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007c06:	b480      	push	{r7}
 8007c08:	b085      	sub	sp, #20
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	6078      	str	r0, [r7, #4]
 8007c0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	689b      	ldr	r3, [r3, #8]
 8007c14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007c1e:	683a      	ldr	r2, [r7, #0]
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	4313      	orrs	r3, r2
 8007c24:	f043 0307 	orr.w	r3, r3, #7
 8007c28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	68fa      	ldr	r2, [r7, #12]
 8007c2e:	609a      	str	r2, [r3, #8]
}
 8007c30:	bf00      	nop
 8007c32:	3714      	adds	r7, #20
 8007c34:	46bd      	mov	sp, r7
 8007c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3a:	4770      	bx	lr

08007c3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b087      	sub	sp, #28
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	60f8      	str	r0, [r7, #12]
 8007c44:	60b9      	str	r1, [r7, #8]
 8007c46:	607a      	str	r2, [r7, #4]
 8007c48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	689b      	ldr	r3, [r3, #8]
 8007c4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c50:	697b      	ldr	r3, [r7, #20]
 8007c52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007c56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	021a      	lsls	r2, r3, #8
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	431a      	orrs	r2, r3
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	4313      	orrs	r3, r2
 8007c64:	697a      	ldr	r2, [r7, #20]
 8007c66:	4313      	orrs	r3, r2
 8007c68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	697a      	ldr	r2, [r7, #20]
 8007c6e:	609a      	str	r2, [r3, #8]
}
 8007c70:	bf00      	nop
 8007c72:	371c      	adds	r7, #28
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr

08007c7c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b087      	sub	sp, #28
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	60f8      	str	r0, [r7, #12]
 8007c84:	60b9      	str	r1, [r7, #8]
 8007c86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	f003 031f 	and.w	r3, r3, #31
 8007c8e:	2201      	movs	r2, #1
 8007c90:	fa02 f303 	lsl.w	r3, r2, r3
 8007c94:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	6a1a      	ldr	r2, [r3, #32]
 8007c9a:	697b      	ldr	r3, [r7, #20]
 8007c9c:	43db      	mvns	r3, r3
 8007c9e:	401a      	ands	r2, r3
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	6a1a      	ldr	r2, [r3, #32]
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	f003 031f 	and.w	r3, r3, #31
 8007cae:	6879      	ldr	r1, [r7, #4]
 8007cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8007cb4:	431a      	orrs	r2, r3
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	621a      	str	r2, [r3, #32]
}
 8007cba:	bf00      	nop
 8007cbc:	371c      	adds	r7, #28
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc4:	4770      	bx	lr
	...

08007cc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b085      	sub	sp, #20
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
 8007cd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007cd8:	2b01      	cmp	r3, #1
 8007cda:	d101      	bne.n	8007ce0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007cdc:	2302      	movs	r3, #2
 8007cde:	e06d      	b.n	8007dbc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2202      	movs	r2, #2
 8007cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	685b      	ldr	r3, [r3, #4]
 8007cf6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	689b      	ldr	r3, [r3, #8]
 8007cfe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4a30      	ldr	r2, [pc, #192]	; (8007dc8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d004      	beq.n	8007d14 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	4a2f      	ldr	r2, [pc, #188]	; (8007dcc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d108      	bne.n	8007d26 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007d1a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	685b      	ldr	r3, [r3, #4]
 8007d20:	68fa      	ldr	r2, [r7, #12]
 8007d22:	4313      	orrs	r3, r2
 8007d24:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d2c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	68fa      	ldr	r2, [r7, #12]
 8007d34:	4313      	orrs	r3, r2
 8007d36:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	68fa      	ldr	r2, [r7, #12]
 8007d3e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4a20      	ldr	r2, [pc, #128]	; (8007dc8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d022      	beq.n	8007d90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d52:	d01d      	beq.n	8007d90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4a1d      	ldr	r2, [pc, #116]	; (8007dd0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d018      	beq.n	8007d90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4a1c      	ldr	r2, [pc, #112]	; (8007dd4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d013      	beq.n	8007d90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a1a      	ldr	r2, [pc, #104]	; (8007dd8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d00e      	beq.n	8007d90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4a15      	ldr	r2, [pc, #84]	; (8007dcc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d009      	beq.n	8007d90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4a16      	ldr	r2, [pc, #88]	; (8007ddc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d004      	beq.n	8007d90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a15      	ldr	r2, [pc, #84]	; (8007de0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d10c      	bne.n	8007daa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d96:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	689b      	ldr	r3, [r3, #8]
 8007d9c:	68ba      	ldr	r2, [r7, #8]
 8007d9e:	4313      	orrs	r3, r2
 8007da0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	68ba      	ldr	r2, [r7, #8]
 8007da8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2201      	movs	r2, #1
 8007dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2200      	movs	r2, #0
 8007db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007dba:	2300      	movs	r3, #0
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3714      	adds	r7, #20
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc6:	4770      	bx	lr
 8007dc8:	40010000 	.word	0x40010000
 8007dcc:	40010400 	.word	0x40010400
 8007dd0:	40000400 	.word	0x40000400
 8007dd4:	40000800 	.word	0x40000800
 8007dd8:	40000c00 	.word	0x40000c00
 8007ddc:	40014000 	.word	0x40014000
 8007de0:	40001800 	.word	0x40001800

08007de4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007de4:	b480      	push	{r7}
 8007de6:	b085      	sub	sp, #20
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
 8007dec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007dee:	2300      	movs	r3, #0
 8007df0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007df8:	2b01      	cmp	r3, #1
 8007dfa:	d101      	bne.n	8007e00 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007dfc:	2302      	movs	r3, #2
 8007dfe:	e065      	b.n	8007ecc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2201      	movs	r2, #1
 8007e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	68db      	ldr	r3, [r3, #12]
 8007e12:	4313      	orrs	r3, r2
 8007e14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	689b      	ldr	r3, [r3, #8]
 8007e20:	4313      	orrs	r3, r2
 8007e22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4313      	orrs	r3, r2
 8007e3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	691b      	ldr	r3, [r3, #16]
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	695b      	ldr	r3, [r3, #20]
 8007e58:	4313      	orrs	r3, r2
 8007e5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e66:	4313      	orrs	r3, r2
 8007e68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	699b      	ldr	r3, [r3, #24]
 8007e74:	041b      	lsls	r3, r3, #16
 8007e76:	4313      	orrs	r3, r2
 8007e78:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	4a16      	ldr	r2, [pc, #88]	; (8007ed8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d004      	beq.n	8007e8e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	4a14      	ldr	r2, [pc, #80]	; (8007edc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d115      	bne.n	8007eba <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e98:	051b      	lsls	r3, r3, #20
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	69db      	ldr	r3, [r3, #28]
 8007ea8:	4313      	orrs	r3, r2
 8007eaa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	6a1b      	ldr	r3, [r3, #32]
 8007eb6:	4313      	orrs	r3, r2
 8007eb8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	68fa      	ldr	r2, [r7, #12]
 8007ec0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007eca:	2300      	movs	r3, #0
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3714      	adds	r7, #20
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed6:	4770      	bx	lr
 8007ed8:	40010000 	.word	0x40010000
 8007edc:	40010400 	.word	0x40010400

08007ee0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b083      	sub	sp, #12
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007ee8:	bf00      	nop
 8007eea:	370c      	adds	r7, #12
 8007eec:	46bd      	mov	sp, r7
 8007eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef2:	4770      	bx	lr

08007ef4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007ef4:	b480      	push	{r7}
 8007ef6:	b083      	sub	sp, #12
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007efc:	bf00      	nop
 8007efe:	370c      	adds	r7, #12
 8007f00:	46bd      	mov	sp, r7
 8007f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f06:	4770      	bx	lr

08007f08 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b083      	sub	sp, #12
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007f10:	bf00      	nop
 8007f12:	370c      	adds	r7, #12
 8007f14:	46bd      	mov	sp, r7
 8007f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1a:	4770      	bx	lr

08007f1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b082      	sub	sp, #8
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d101      	bne.n	8007f2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	e040      	b.n	8007fb0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d106      	bne.n	8007f44 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	f7fc f8fa 	bl	8004138 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2224      	movs	r2, #36	; 0x24
 8007f48:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	681a      	ldr	r2, [r3, #0]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f022 0201 	bic.w	r2, r2, #1
 8007f58:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f000 fcae 	bl	80088bc <UART_SetConfig>
 8007f60:	4603      	mov	r3, r0
 8007f62:	2b01      	cmp	r3, #1
 8007f64:	d101      	bne.n	8007f6a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007f66:	2301      	movs	r3, #1
 8007f68:	e022      	b.n	8007fb0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d002      	beq.n	8007f78 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f000 ff06 	bl	8008d84 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	685a      	ldr	r2, [r3, #4]
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007f86:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	689a      	ldr	r2, [r3, #8]
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007f96:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	681a      	ldr	r2, [r3, #0]
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f042 0201 	orr.w	r2, r2, #1
 8007fa6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f000 ff8d 	bl	8008ec8 <UART_CheckIdleState>
 8007fae:	4603      	mov	r3, r0
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3708      	adds	r7, #8
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}

08007fb8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b08a      	sub	sp, #40	; 0x28
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	60f8      	str	r0, [r7, #12]
 8007fc0:	60b9      	str	r1, [r7, #8]
 8007fc2:	4613      	mov	r3, r2
 8007fc4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007fca:	2b20      	cmp	r3, #32
 8007fcc:	d165      	bne.n	800809a <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d002      	beq.n	8007fda <HAL_UART_Transmit_DMA+0x22>
 8007fd4:	88fb      	ldrh	r3, [r7, #6]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d101      	bne.n	8007fde <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8007fda:	2301      	movs	r3, #1
 8007fdc:	e05e      	b.n	800809c <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	68ba      	ldr	r2, [r7, #8]
 8007fe2:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	88fa      	ldrh	r2, [r7, #6]
 8007fe8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	88fa      	ldrh	r2, [r7, #6]
 8007ff0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	2221      	movs	r2, #33	; 0x21
 8008000:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008006:	2b00      	cmp	r3, #0
 8008008:	d027      	beq.n	800805a <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800800e:	4a25      	ldr	r2, [pc, #148]	; (80080a4 <HAL_UART_Transmit_DMA+0xec>)
 8008010:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008016:	4a24      	ldr	r2, [pc, #144]	; (80080a8 <HAL_UART_Transmit_DMA+0xf0>)
 8008018:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800801e:	4a23      	ldr	r2, [pc, #140]	; (80080ac <HAL_UART_Transmit_DMA+0xf4>)
 8008020:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008026:	2200      	movs	r2, #0
 8008028:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008032:	4619      	mov	r1, r3
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	3328      	adds	r3, #40	; 0x28
 800803a:	461a      	mov	r2, r3
 800803c:	88fb      	ldrh	r3, [r7, #6]
 800803e:	f7fc fbfd 	bl	800483c <HAL_DMA_Start_IT>
 8008042:	4603      	mov	r3, r0
 8008044:	2b00      	cmp	r3, #0
 8008046:	d008      	beq.n	800805a <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	2210      	movs	r2, #16
 800804c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	2220      	movs	r2, #32
 8008054:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 8008056:	2301      	movs	r3, #1
 8008058:	e020      	b.n	800809c <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	2240      	movs	r2, #64	; 0x40
 8008060:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	3308      	adds	r3, #8
 8008068:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	e853 3f00 	ldrex	r3, [r3]
 8008070:	613b      	str	r3, [r7, #16]
   return(result);
 8008072:	693b      	ldr	r3, [r7, #16]
 8008074:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008078:	627b      	str	r3, [r7, #36]	; 0x24
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	3308      	adds	r3, #8
 8008080:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008082:	623a      	str	r2, [r7, #32]
 8008084:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008086:	69f9      	ldr	r1, [r7, #28]
 8008088:	6a3a      	ldr	r2, [r7, #32]
 800808a:	e841 2300 	strex	r3, r2, [r1]
 800808e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008090:	69bb      	ldr	r3, [r7, #24]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d1e5      	bne.n	8008062 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8008096:	2300      	movs	r3, #0
 8008098:	e000      	b.n	800809c <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 800809a:	2302      	movs	r3, #2
  }
}
 800809c:	4618      	mov	r0, r3
 800809e:	3728      	adds	r7, #40	; 0x28
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}
 80080a4:	08009345 	.word	0x08009345
 80080a8:	080093db 	.word	0x080093db
 80080ac:	0800955d 	.word	0x0800955d

080080b0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b08a      	sub	sp, #40	; 0x28
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	60f8      	str	r0, [r7, #12]
 80080b8:	60b9      	str	r1, [r7, #8]
 80080ba:	4613      	mov	r3, r2
 80080bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80080c4:	2b20      	cmp	r3, #32
 80080c6:	d132      	bne.n	800812e <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d002      	beq.n	80080d4 <HAL_UART_Receive_DMA+0x24>
 80080ce:	88fb      	ldrh	r3, [r7, #6]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d101      	bne.n	80080d8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80080d4:	2301      	movs	r3, #1
 80080d6:	e02b      	b.n	8008130 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	2200      	movs	r2, #0
 80080dc:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	685b      	ldr	r3, [r3, #4]
 80080e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d018      	beq.n	800811e <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	e853 3f00 	ldrex	r3, [r3]
 80080f8:	613b      	str	r3, [r7, #16]
   return(result);
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008100:	627b      	str	r3, [r7, #36]	; 0x24
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	461a      	mov	r2, r3
 8008108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800810a:	623b      	str	r3, [r7, #32]
 800810c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800810e:	69f9      	ldr	r1, [r7, #28]
 8008110:	6a3a      	ldr	r2, [r7, #32]
 8008112:	e841 2300 	strex	r3, r2, [r1]
 8008116:	61bb      	str	r3, [r7, #24]
   return(result);
 8008118:	69bb      	ldr	r3, [r7, #24]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d1e6      	bne.n	80080ec <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800811e:	88fb      	ldrh	r3, [r7, #6]
 8008120:	461a      	mov	r2, r3
 8008122:	68b9      	ldr	r1, [r7, #8]
 8008124:	68f8      	ldr	r0, [r7, #12]
 8008126:	f000 ffe3 	bl	80090f0 <UART_Start_Receive_DMA>
 800812a:	4603      	mov	r3, r0
 800812c:	e000      	b.n	8008130 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 800812e:	2302      	movs	r3, #2
  }
}
 8008130:	4618      	mov	r0, r3
 8008132:	3728      	adds	r7, #40	; 0x28
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}

08008138 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b090      	sub	sp, #64	; 0x40
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008144:	63fb      	str	r3, [r7, #60]	; 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800814c:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	689b      	ldr	r3, [r3, #8]
 8008154:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008158:	2b80      	cmp	r3, #128	; 0x80
 800815a:	d139      	bne.n	80081d0 <HAL_UART_DMAStop+0x98>
 800815c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800815e:	2b21      	cmp	r3, #33	; 0x21
 8008160:	d136      	bne.n	80081d0 <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	3308      	adds	r3, #8
 8008168:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800816a:	6a3b      	ldr	r3, [r7, #32]
 800816c:	e853 3f00 	ldrex	r3, [r3]
 8008170:	61fb      	str	r3, [r7, #28]
   return(result);
 8008172:	69fb      	ldr	r3, [r7, #28]
 8008174:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008178:	637b      	str	r3, [r7, #52]	; 0x34
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	3308      	adds	r3, #8
 8008180:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008182:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008184:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008186:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008188:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800818a:	e841 2300 	strex	r3, r2, [r1]
 800818e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008192:	2b00      	cmp	r3, #0
 8008194:	d1e5      	bne.n	8008162 <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800819a:	2b00      	cmp	r3, #0
 800819c:	d015      	beq.n	80081ca <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081a2:	4618      	mov	r0, r3
 80081a4:	f7fc fbaa 	bl	80048fc <HAL_DMA_Abort>
 80081a8:	4603      	mov	r3, r0
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d00d      	beq.n	80081ca <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081b2:	4618      	mov	r0, r3
 80081b4:	f7fc fdbe 	bl	8004d34 <HAL_DMA_GetError>
 80081b8:	4603      	mov	r3, r0
 80081ba:	2b20      	cmp	r3, #32
 80081bc:	d105      	bne.n	80081ca <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2210      	movs	r2, #16
 80081c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80081c6:	2303      	movs	r3, #3
 80081c8:	e044      	b.n	8008254 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f001 f830 	bl	8009230 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	689b      	ldr	r3, [r3, #8]
 80081d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081da:	2b40      	cmp	r3, #64	; 0x40
 80081dc:	d139      	bne.n	8008252 <HAL_UART_DMAStop+0x11a>
 80081de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081e0:	2b22      	cmp	r3, #34	; 0x22
 80081e2:	d136      	bne.n	8008252 <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	3308      	adds	r3, #8
 80081ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	e853 3f00 	ldrex	r3, [r3]
 80081f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081fa:	633b      	str	r3, [r7, #48]	; 0x30
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	3308      	adds	r3, #8
 8008202:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008204:	61ba      	str	r2, [r7, #24]
 8008206:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008208:	6979      	ldr	r1, [r7, #20]
 800820a:	69ba      	ldr	r2, [r7, #24]
 800820c:	e841 2300 	strex	r3, r2, [r1]
 8008210:	613b      	str	r3, [r7, #16]
   return(result);
 8008212:	693b      	ldr	r3, [r7, #16]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d1e5      	bne.n	80081e4 <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800821c:	2b00      	cmp	r3, #0
 800821e:	d015      	beq.n	800824c <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008224:	4618      	mov	r0, r3
 8008226:	f7fc fb69 	bl	80048fc <HAL_DMA_Abort>
 800822a:	4603      	mov	r3, r0
 800822c:	2b00      	cmp	r3, #0
 800822e:	d00d      	beq.n	800824c <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008234:	4618      	mov	r0, r3
 8008236:	f7fc fd7d 	bl	8004d34 <HAL_DMA_GetError>
 800823a:	4603      	mov	r3, r0
 800823c:	2b20      	cmp	r3, #32
 800823e:	d105      	bne.n	800824c <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2210      	movs	r2, #16
 8008244:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008248:	2303      	movs	r3, #3
 800824a:	e003      	b.n	8008254 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f001 f815 	bl	800927c <UART_EndRxTransfer>
  }

  return HAL_OK;
 8008252:	2300      	movs	r3, #0
}
 8008254:	4618      	mov	r0, r3
 8008256:	3740      	adds	r7, #64	; 0x40
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}

0800825c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b0ba      	sub	sp, #232	; 0xe8
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	69db      	ldr	r3, [r3, #28]
 800826a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	689b      	ldr	r3, [r3, #8]
 800827e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008282:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008286:	f640 030f 	movw	r3, #2063	; 0x80f
 800828a:	4013      	ands	r3, r2
 800828c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008290:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008294:	2b00      	cmp	r3, #0
 8008296:	d115      	bne.n	80082c4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008298:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800829c:	f003 0320 	and.w	r3, r3, #32
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d00f      	beq.n	80082c4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80082a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082a8:	f003 0320 	and.w	r3, r3, #32
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d009      	beq.n	80082c4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	f000 82ac 	beq.w	8008812 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	4798      	blx	r3
      }
      return;
 80082c2:	e2a6      	b.n	8008812 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80082c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	f000 8117 	beq.w	80084fc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80082ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80082d2:	f003 0301 	and.w	r3, r3, #1
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d106      	bne.n	80082e8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80082da:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80082de:	4b85      	ldr	r3, [pc, #532]	; (80084f4 <HAL_UART_IRQHandler+0x298>)
 80082e0:	4013      	ands	r3, r2
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	f000 810a 	beq.w	80084fc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80082e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082ec:	f003 0301 	and.w	r3, r3, #1
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d011      	beq.n	8008318 <HAL_UART_IRQHandler+0xbc>
 80082f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d00b      	beq.n	8008318 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	2201      	movs	r2, #1
 8008306:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800830e:	f043 0201 	orr.w	r2, r3, #1
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008318:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800831c:	f003 0302 	and.w	r3, r3, #2
 8008320:	2b00      	cmp	r3, #0
 8008322:	d011      	beq.n	8008348 <HAL_UART_IRQHandler+0xec>
 8008324:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008328:	f003 0301 	and.w	r3, r3, #1
 800832c:	2b00      	cmp	r3, #0
 800832e:	d00b      	beq.n	8008348 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	2202      	movs	r2, #2
 8008336:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800833e:	f043 0204 	orr.w	r2, r3, #4
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008348:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800834c:	f003 0304 	and.w	r3, r3, #4
 8008350:	2b00      	cmp	r3, #0
 8008352:	d011      	beq.n	8008378 <HAL_UART_IRQHandler+0x11c>
 8008354:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008358:	f003 0301 	and.w	r3, r3, #1
 800835c:	2b00      	cmp	r3, #0
 800835e:	d00b      	beq.n	8008378 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	2204      	movs	r2, #4
 8008366:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800836e:	f043 0202 	orr.w	r2, r3, #2
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008378:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800837c:	f003 0308 	and.w	r3, r3, #8
 8008380:	2b00      	cmp	r3, #0
 8008382:	d017      	beq.n	80083b4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008384:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008388:	f003 0320 	and.w	r3, r3, #32
 800838c:	2b00      	cmp	r3, #0
 800838e:	d105      	bne.n	800839c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008390:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008394:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008398:	2b00      	cmp	r3, #0
 800839a:	d00b      	beq.n	80083b4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	2208      	movs	r2, #8
 80083a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083aa:	f043 0208 	orr.w	r2, r3, #8
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80083b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d012      	beq.n	80083e6 <HAL_UART_IRQHandler+0x18a>
 80083c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d00c      	beq.n	80083e6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80083d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083dc:	f043 0220 	orr.w	r2, r3, #32
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	f000 8212 	beq.w	8008816 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80083f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083f6:	f003 0320 	and.w	r3, r3, #32
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d00d      	beq.n	800841a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80083fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008402:	f003 0320 	and.w	r3, r3, #32
 8008406:	2b00      	cmp	r3, #0
 8008408:	d007      	beq.n	800841a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800840e:	2b00      	cmp	r3, #0
 8008410:	d003      	beq.n	800841a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008420:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	689b      	ldr	r3, [r3, #8]
 800842a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800842e:	2b40      	cmp	r3, #64	; 0x40
 8008430:	d005      	beq.n	800843e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008432:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008436:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800843a:	2b00      	cmp	r3, #0
 800843c:	d04f      	beq.n	80084de <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f000 ff1c 	bl	800927c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	689b      	ldr	r3, [r3, #8]
 800844a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800844e:	2b40      	cmp	r3, #64	; 0x40
 8008450:	d141      	bne.n	80084d6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	3308      	adds	r3, #8
 8008458:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800845c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008460:	e853 3f00 	ldrex	r3, [r3]
 8008464:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008468:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800846c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008470:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	3308      	adds	r3, #8
 800847a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800847e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008482:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008486:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800848a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800848e:	e841 2300 	strex	r3, r2, [r1]
 8008492:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008496:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800849a:	2b00      	cmp	r3, #0
 800849c:	d1d9      	bne.n	8008452 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d013      	beq.n	80084ce <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084aa:	4a13      	ldr	r2, [pc, #76]	; (80084f8 <HAL_UART_IRQHandler+0x29c>)
 80084ac:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084b2:	4618      	mov	r0, r3
 80084b4:	f7fc fa92 	bl	80049dc <HAL_DMA_Abort_IT>
 80084b8:	4603      	mov	r3, r0
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d017      	beq.n	80084ee <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084c4:	687a      	ldr	r2, [r7, #4]
 80084c6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80084c8:	4610      	mov	r0, r2
 80084ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084cc:	e00f      	b.n	80084ee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f000 f9d4 	bl	800887c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084d4:	e00b      	b.n	80084ee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f000 f9d0 	bl	800887c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084dc:	e007      	b.n	80084ee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f000 f9cc 	bl	800887c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2200      	movs	r2, #0
 80084e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80084ec:	e193      	b.n	8008816 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084ee:	bf00      	nop
    return;
 80084f0:	e191      	b.n	8008816 <HAL_UART_IRQHandler+0x5ba>
 80084f2:	bf00      	nop
 80084f4:	04000120 	.word	0x04000120
 80084f8:	080095db 	.word	0x080095db

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008500:	2b01      	cmp	r3, #1
 8008502:	f040 814c 	bne.w	800879e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008506:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800850a:	f003 0310 	and.w	r3, r3, #16
 800850e:	2b00      	cmp	r3, #0
 8008510:	f000 8145 	beq.w	800879e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008514:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008518:	f003 0310 	and.w	r3, r3, #16
 800851c:	2b00      	cmp	r3, #0
 800851e:	f000 813e 	beq.w	800879e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	2210      	movs	r2, #16
 8008528:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	689b      	ldr	r3, [r3, #8]
 8008530:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008534:	2b40      	cmp	r3, #64	; 0x40
 8008536:	f040 80b6 	bne.w	80086a6 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	685b      	ldr	r3, [r3, #4]
 8008542:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008546:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800854a:	2b00      	cmp	r3, #0
 800854c:	f000 8165 	beq.w	800881a <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008556:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800855a:	429a      	cmp	r2, r3
 800855c:	f080 815d 	bcs.w	800881a <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008566:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800856e:	69db      	ldr	r3, [r3, #28]
 8008570:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008574:	f000 8086 	beq.w	8008684 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008580:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008584:	e853 3f00 	ldrex	r3, [r3]
 8008588:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800858c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008590:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008594:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	461a      	mov	r2, r3
 800859e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80085a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80085a6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80085ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80085b2:	e841 2300 	strex	r3, r2, [r1]
 80085b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80085ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d1da      	bne.n	8008578 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	3308      	adds	r3, #8
 80085c8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80085cc:	e853 3f00 	ldrex	r3, [r3]
 80085d0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80085d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80085d4:	f023 0301 	bic.w	r3, r3, #1
 80085d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	3308      	adds	r3, #8
 80085e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80085e6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80085ea:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ec:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80085ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80085f2:	e841 2300 	strex	r3, r2, [r1]
 80085f6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80085f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d1e1      	bne.n	80085c2 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	3308      	adds	r3, #8
 8008604:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008606:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008608:	e853 3f00 	ldrex	r3, [r3]
 800860c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800860e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008610:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008614:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	3308      	adds	r3, #8
 800861e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008622:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008624:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008626:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008628:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800862a:	e841 2300 	strex	r3, r2, [r1]
 800862e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008630:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008632:	2b00      	cmp	r3, #0
 8008634:	d1e3      	bne.n	80085fe <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2220      	movs	r2, #32
 800863a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2200      	movs	r2, #0
 8008642:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800864a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800864c:	e853 3f00 	ldrex	r3, [r3]
 8008650:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008652:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008654:	f023 0310 	bic.w	r3, r3, #16
 8008658:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	461a      	mov	r2, r3
 8008662:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008666:	65bb      	str	r3, [r7, #88]	; 0x58
 8008668:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800866a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800866c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800866e:	e841 2300 	strex	r3, r2, [r1]
 8008672:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008674:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008676:	2b00      	cmp	r3, #0
 8008678:	d1e4      	bne.n	8008644 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800867e:	4618      	mov	r0, r3
 8008680:	f7fc f93c 	bl	80048fc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2202      	movs	r2, #2
 8008688:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008696:	b29b      	uxth	r3, r3
 8008698:	1ad3      	subs	r3, r2, r3
 800869a:	b29b      	uxth	r3, r3
 800869c:	4619      	mov	r1, r3
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f000 f8f6 	bl	8008890 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80086a4:	e0b9      	b.n	800881a <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80086b2:	b29b      	uxth	r3, r3
 80086b4:	1ad3      	subs	r3, r2, r3
 80086b6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80086c0:	b29b      	uxth	r3, r3
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	f000 80ab 	beq.w	800881e <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 80086c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	f000 80a6 	beq.w	800881e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086da:	e853 3f00 	ldrex	r3, [r3]
 80086de:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80086e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086e2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80086e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	461a      	mov	r2, r3
 80086f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80086f4:	647b      	str	r3, [r7, #68]	; 0x44
 80086f6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086f8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80086fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80086fc:	e841 2300 	strex	r3, r2, [r1]
 8008700:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008702:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008704:	2b00      	cmp	r3, #0
 8008706:	d1e4      	bne.n	80086d2 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	3308      	adds	r3, #8
 800870e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008712:	e853 3f00 	ldrex	r3, [r3]
 8008716:	623b      	str	r3, [r7, #32]
   return(result);
 8008718:	6a3b      	ldr	r3, [r7, #32]
 800871a:	f023 0301 	bic.w	r3, r3, #1
 800871e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	3308      	adds	r3, #8
 8008728:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800872c:	633a      	str	r2, [r7, #48]	; 0x30
 800872e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008730:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008732:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008734:	e841 2300 	strex	r3, r2, [r1]
 8008738:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800873a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800873c:	2b00      	cmp	r3, #0
 800873e:	d1e3      	bne.n	8008708 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2220      	movs	r2, #32
 8008744:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2200      	movs	r2, #0
 800874c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2200      	movs	r2, #0
 8008752:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800875a:	693b      	ldr	r3, [r7, #16]
 800875c:	e853 3f00 	ldrex	r3, [r3]
 8008760:	60fb      	str	r3, [r7, #12]
   return(result);
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	f023 0310 	bic.w	r3, r3, #16
 8008768:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	461a      	mov	r2, r3
 8008772:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008776:	61fb      	str	r3, [r7, #28]
 8008778:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800877a:	69b9      	ldr	r1, [r7, #24]
 800877c:	69fa      	ldr	r2, [r7, #28]
 800877e:	e841 2300 	strex	r3, r2, [r1]
 8008782:	617b      	str	r3, [r7, #20]
   return(result);
 8008784:	697b      	ldr	r3, [r7, #20]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d1e4      	bne.n	8008754 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2202      	movs	r2, #2
 800878e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008790:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008794:	4619      	mov	r1, r3
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	f000 f87a 	bl	8008890 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800879c:	e03f      	b.n	800881e <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800879e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d00e      	beq.n	80087c8 <HAL_UART_IRQHandler+0x56c>
 80087aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80087ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d008      	beq.n	80087c8 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80087be:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f000 f871 	bl	80088a8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80087c6:	e02d      	b.n	8008824 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80087c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d00e      	beq.n	80087f2 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80087d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d008      	beq.n	80087f2 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d01c      	beq.n	8008822 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	4798      	blx	r3
    }
    return;
 80087f0:	e017      	b.n	8008822 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80087f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d012      	beq.n	8008824 <HAL_UART_IRQHandler+0x5c8>
 80087fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008806:	2b00      	cmp	r3, #0
 8008808:	d00c      	beq.n	8008824 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f000 fefb 	bl	8009606 <UART_EndTransmit_IT>
    return;
 8008810:	e008      	b.n	8008824 <HAL_UART_IRQHandler+0x5c8>
      return;
 8008812:	bf00      	nop
 8008814:	e006      	b.n	8008824 <HAL_UART_IRQHandler+0x5c8>
    return;
 8008816:	bf00      	nop
 8008818:	e004      	b.n	8008824 <HAL_UART_IRQHandler+0x5c8>
      return;
 800881a:	bf00      	nop
 800881c:	e002      	b.n	8008824 <HAL_UART_IRQHandler+0x5c8>
      return;
 800881e:	bf00      	nop
 8008820:	e000      	b.n	8008824 <HAL_UART_IRQHandler+0x5c8>
    return;
 8008822:	bf00      	nop
  }

}
 8008824:	37e8      	adds	r7, #232	; 0xe8
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}
 800882a:	bf00      	nop

0800882c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800882c:	b480      	push	{r7}
 800882e:	b083      	sub	sp, #12
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008834:	bf00      	nop
 8008836:	370c      	adds	r7, #12
 8008838:	46bd      	mov	sp, r7
 800883a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883e:	4770      	bx	lr

08008840 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008840:	b480      	push	{r7}
 8008842:	b083      	sub	sp, #12
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008848:	bf00      	nop
 800884a:	370c      	adds	r7, #12
 800884c:	46bd      	mov	sp, r7
 800884e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008852:	4770      	bx	lr

08008854 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008854:	b480      	push	{r7}
 8008856:	b083      	sub	sp, #12
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800885c:	bf00      	nop
 800885e:	370c      	adds	r7, #12
 8008860:	46bd      	mov	sp, r7
 8008862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008866:	4770      	bx	lr

08008868 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008868:	b480      	push	{r7}
 800886a:	b083      	sub	sp, #12
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008870:	bf00      	nop
 8008872:	370c      	adds	r7, #12
 8008874:	46bd      	mov	sp, r7
 8008876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887a:	4770      	bx	lr

0800887c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800887c:	b480      	push	{r7}
 800887e:	b083      	sub	sp, #12
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008884:	bf00      	nop
 8008886:	370c      	adds	r7, #12
 8008888:	46bd      	mov	sp, r7
 800888a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888e:	4770      	bx	lr

08008890 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008890:	b480      	push	{r7}
 8008892:	b083      	sub	sp, #12
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
 8008898:	460b      	mov	r3, r1
 800889a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800889c:	bf00      	nop
 800889e:	370c      	adds	r7, #12
 80088a0:	46bd      	mov	sp, r7
 80088a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a6:	4770      	bx	lr

080088a8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80088a8:	b480      	push	{r7}
 80088aa:	b083      	sub	sp, #12
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80088b0:	bf00      	nop
 80088b2:	370c      	adds	r7, #12
 80088b4:	46bd      	mov	sp, r7
 80088b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ba:	4770      	bx	lr

080088bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b088      	sub	sp, #32
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80088c4:	2300      	movs	r3, #0
 80088c6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	689a      	ldr	r2, [r3, #8]
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	691b      	ldr	r3, [r3, #16]
 80088d0:	431a      	orrs	r2, r3
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	695b      	ldr	r3, [r3, #20]
 80088d6:	431a      	orrs	r2, r3
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	69db      	ldr	r3, [r3, #28]
 80088dc:	4313      	orrs	r3, r2
 80088de:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	681a      	ldr	r2, [r3, #0]
 80088e6:	4ba6      	ldr	r3, [pc, #664]	; (8008b80 <UART_SetConfig+0x2c4>)
 80088e8:	4013      	ands	r3, r2
 80088ea:	687a      	ldr	r2, [r7, #4]
 80088ec:	6812      	ldr	r2, [r2, #0]
 80088ee:	6979      	ldr	r1, [r7, #20]
 80088f0:	430b      	orrs	r3, r1
 80088f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	685b      	ldr	r3, [r3, #4]
 80088fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	68da      	ldr	r2, [r3, #12]
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	430a      	orrs	r2, r1
 8008908:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	699b      	ldr	r3, [r3, #24]
 800890e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6a1b      	ldr	r3, [r3, #32]
 8008914:	697a      	ldr	r2, [r7, #20]
 8008916:	4313      	orrs	r3, r2
 8008918:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	689b      	ldr	r3, [r3, #8]
 8008920:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	697a      	ldr	r2, [r7, #20]
 800892a:	430a      	orrs	r2, r1
 800892c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	4a94      	ldr	r2, [pc, #592]	; (8008b84 <UART_SetConfig+0x2c8>)
 8008934:	4293      	cmp	r3, r2
 8008936:	d120      	bne.n	800897a <UART_SetConfig+0xbe>
 8008938:	4b93      	ldr	r3, [pc, #588]	; (8008b88 <UART_SetConfig+0x2cc>)
 800893a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800893e:	f003 0303 	and.w	r3, r3, #3
 8008942:	2b03      	cmp	r3, #3
 8008944:	d816      	bhi.n	8008974 <UART_SetConfig+0xb8>
 8008946:	a201      	add	r2, pc, #4	; (adr r2, 800894c <UART_SetConfig+0x90>)
 8008948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800894c:	0800895d 	.word	0x0800895d
 8008950:	08008969 	.word	0x08008969
 8008954:	08008963 	.word	0x08008963
 8008958:	0800896f 	.word	0x0800896f
 800895c:	2301      	movs	r3, #1
 800895e:	77fb      	strb	r3, [r7, #31]
 8008960:	e150      	b.n	8008c04 <UART_SetConfig+0x348>
 8008962:	2302      	movs	r3, #2
 8008964:	77fb      	strb	r3, [r7, #31]
 8008966:	e14d      	b.n	8008c04 <UART_SetConfig+0x348>
 8008968:	2304      	movs	r3, #4
 800896a:	77fb      	strb	r3, [r7, #31]
 800896c:	e14a      	b.n	8008c04 <UART_SetConfig+0x348>
 800896e:	2308      	movs	r3, #8
 8008970:	77fb      	strb	r3, [r7, #31]
 8008972:	e147      	b.n	8008c04 <UART_SetConfig+0x348>
 8008974:	2310      	movs	r3, #16
 8008976:	77fb      	strb	r3, [r7, #31]
 8008978:	e144      	b.n	8008c04 <UART_SetConfig+0x348>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	4a83      	ldr	r2, [pc, #524]	; (8008b8c <UART_SetConfig+0x2d0>)
 8008980:	4293      	cmp	r3, r2
 8008982:	d132      	bne.n	80089ea <UART_SetConfig+0x12e>
 8008984:	4b80      	ldr	r3, [pc, #512]	; (8008b88 <UART_SetConfig+0x2cc>)
 8008986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800898a:	f003 030c 	and.w	r3, r3, #12
 800898e:	2b0c      	cmp	r3, #12
 8008990:	d828      	bhi.n	80089e4 <UART_SetConfig+0x128>
 8008992:	a201      	add	r2, pc, #4	; (adr r2, 8008998 <UART_SetConfig+0xdc>)
 8008994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008998:	080089cd 	.word	0x080089cd
 800899c:	080089e5 	.word	0x080089e5
 80089a0:	080089e5 	.word	0x080089e5
 80089a4:	080089e5 	.word	0x080089e5
 80089a8:	080089d9 	.word	0x080089d9
 80089ac:	080089e5 	.word	0x080089e5
 80089b0:	080089e5 	.word	0x080089e5
 80089b4:	080089e5 	.word	0x080089e5
 80089b8:	080089d3 	.word	0x080089d3
 80089bc:	080089e5 	.word	0x080089e5
 80089c0:	080089e5 	.word	0x080089e5
 80089c4:	080089e5 	.word	0x080089e5
 80089c8:	080089df 	.word	0x080089df
 80089cc:	2300      	movs	r3, #0
 80089ce:	77fb      	strb	r3, [r7, #31]
 80089d0:	e118      	b.n	8008c04 <UART_SetConfig+0x348>
 80089d2:	2302      	movs	r3, #2
 80089d4:	77fb      	strb	r3, [r7, #31]
 80089d6:	e115      	b.n	8008c04 <UART_SetConfig+0x348>
 80089d8:	2304      	movs	r3, #4
 80089da:	77fb      	strb	r3, [r7, #31]
 80089dc:	e112      	b.n	8008c04 <UART_SetConfig+0x348>
 80089de:	2308      	movs	r3, #8
 80089e0:	77fb      	strb	r3, [r7, #31]
 80089e2:	e10f      	b.n	8008c04 <UART_SetConfig+0x348>
 80089e4:	2310      	movs	r3, #16
 80089e6:	77fb      	strb	r3, [r7, #31]
 80089e8:	e10c      	b.n	8008c04 <UART_SetConfig+0x348>
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	4a68      	ldr	r2, [pc, #416]	; (8008b90 <UART_SetConfig+0x2d4>)
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d120      	bne.n	8008a36 <UART_SetConfig+0x17a>
 80089f4:	4b64      	ldr	r3, [pc, #400]	; (8008b88 <UART_SetConfig+0x2cc>)
 80089f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089fa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80089fe:	2b30      	cmp	r3, #48	; 0x30
 8008a00:	d013      	beq.n	8008a2a <UART_SetConfig+0x16e>
 8008a02:	2b30      	cmp	r3, #48	; 0x30
 8008a04:	d814      	bhi.n	8008a30 <UART_SetConfig+0x174>
 8008a06:	2b20      	cmp	r3, #32
 8008a08:	d009      	beq.n	8008a1e <UART_SetConfig+0x162>
 8008a0a:	2b20      	cmp	r3, #32
 8008a0c:	d810      	bhi.n	8008a30 <UART_SetConfig+0x174>
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d002      	beq.n	8008a18 <UART_SetConfig+0x15c>
 8008a12:	2b10      	cmp	r3, #16
 8008a14:	d006      	beq.n	8008a24 <UART_SetConfig+0x168>
 8008a16:	e00b      	b.n	8008a30 <UART_SetConfig+0x174>
 8008a18:	2300      	movs	r3, #0
 8008a1a:	77fb      	strb	r3, [r7, #31]
 8008a1c:	e0f2      	b.n	8008c04 <UART_SetConfig+0x348>
 8008a1e:	2302      	movs	r3, #2
 8008a20:	77fb      	strb	r3, [r7, #31]
 8008a22:	e0ef      	b.n	8008c04 <UART_SetConfig+0x348>
 8008a24:	2304      	movs	r3, #4
 8008a26:	77fb      	strb	r3, [r7, #31]
 8008a28:	e0ec      	b.n	8008c04 <UART_SetConfig+0x348>
 8008a2a:	2308      	movs	r3, #8
 8008a2c:	77fb      	strb	r3, [r7, #31]
 8008a2e:	e0e9      	b.n	8008c04 <UART_SetConfig+0x348>
 8008a30:	2310      	movs	r3, #16
 8008a32:	77fb      	strb	r3, [r7, #31]
 8008a34:	e0e6      	b.n	8008c04 <UART_SetConfig+0x348>
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	4a56      	ldr	r2, [pc, #344]	; (8008b94 <UART_SetConfig+0x2d8>)
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d120      	bne.n	8008a82 <UART_SetConfig+0x1c6>
 8008a40:	4b51      	ldr	r3, [pc, #324]	; (8008b88 <UART_SetConfig+0x2cc>)
 8008a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a46:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008a4a:	2bc0      	cmp	r3, #192	; 0xc0
 8008a4c:	d013      	beq.n	8008a76 <UART_SetConfig+0x1ba>
 8008a4e:	2bc0      	cmp	r3, #192	; 0xc0
 8008a50:	d814      	bhi.n	8008a7c <UART_SetConfig+0x1c0>
 8008a52:	2b80      	cmp	r3, #128	; 0x80
 8008a54:	d009      	beq.n	8008a6a <UART_SetConfig+0x1ae>
 8008a56:	2b80      	cmp	r3, #128	; 0x80
 8008a58:	d810      	bhi.n	8008a7c <UART_SetConfig+0x1c0>
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d002      	beq.n	8008a64 <UART_SetConfig+0x1a8>
 8008a5e:	2b40      	cmp	r3, #64	; 0x40
 8008a60:	d006      	beq.n	8008a70 <UART_SetConfig+0x1b4>
 8008a62:	e00b      	b.n	8008a7c <UART_SetConfig+0x1c0>
 8008a64:	2300      	movs	r3, #0
 8008a66:	77fb      	strb	r3, [r7, #31]
 8008a68:	e0cc      	b.n	8008c04 <UART_SetConfig+0x348>
 8008a6a:	2302      	movs	r3, #2
 8008a6c:	77fb      	strb	r3, [r7, #31]
 8008a6e:	e0c9      	b.n	8008c04 <UART_SetConfig+0x348>
 8008a70:	2304      	movs	r3, #4
 8008a72:	77fb      	strb	r3, [r7, #31]
 8008a74:	e0c6      	b.n	8008c04 <UART_SetConfig+0x348>
 8008a76:	2308      	movs	r3, #8
 8008a78:	77fb      	strb	r3, [r7, #31]
 8008a7a:	e0c3      	b.n	8008c04 <UART_SetConfig+0x348>
 8008a7c:	2310      	movs	r3, #16
 8008a7e:	77fb      	strb	r3, [r7, #31]
 8008a80:	e0c0      	b.n	8008c04 <UART_SetConfig+0x348>
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	4a44      	ldr	r2, [pc, #272]	; (8008b98 <UART_SetConfig+0x2dc>)
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	d125      	bne.n	8008ad8 <UART_SetConfig+0x21c>
 8008a8c:	4b3e      	ldr	r3, [pc, #248]	; (8008b88 <UART_SetConfig+0x2cc>)
 8008a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008a9a:	d017      	beq.n	8008acc <UART_SetConfig+0x210>
 8008a9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008aa0:	d817      	bhi.n	8008ad2 <UART_SetConfig+0x216>
 8008aa2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008aa6:	d00b      	beq.n	8008ac0 <UART_SetConfig+0x204>
 8008aa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008aac:	d811      	bhi.n	8008ad2 <UART_SetConfig+0x216>
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d003      	beq.n	8008aba <UART_SetConfig+0x1fe>
 8008ab2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ab6:	d006      	beq.n	8008ac6 <UART_SetConfig+0x20a>
 8008ab8:	e00b      	b.n	8008ad2 <UART_SetConfig+0x216>
 8008aba:	2300      	movs	r3, #0
 8008abc:	77fb      	strb	r3, [r7, #31]
 8008abe:	e0a1      	b.n	8008c04 <UART_SetConfig+0x348>
 8008ac0:	2302      	movs	r3, #2
 8008ac2:	77fb      	strb	r3, [r7, #31]
 8008ac4:	e09e      	b.n	8008c04 <UART_SetConfig+0x348>
 8008ac6:	2304      	movs	r3, #4
 8008ac8:	77fb      	strb	r3, [r7, #31]
 8008aca:	e09b      	b.n	8008c04 <UART_SetConfig+0x348>
 8008acc:	2308      	movs	r3, #8
 8008ace:	77fb      	strb	r3, [r7, #31]
 8008ad0:	e098      	b.n	8008c04 <UART_SetConfig+0x348>
 8008ad2:	2310      	movs	r3, #16
 8008ad4:	77fb      	strb	r3, [r7, #31]
 8008ad6:	e095      	b.n	8008c04 <UART_SetConfig+0x348>
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	4a2f      	ldr	r2, [pc, #188]	; (8008b9c <UART_SetConfig+0x2e0>)
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	d125      	bne.n	8008b2e <UART_SetConfig+0x272>
 8008ae2:	4b29      	ldr	r3, [pc, #164]	; (8008b88 <UART_SetConfig+0x2cc>)
 8008ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ae8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008aec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008af0:	d017      	beq.n	8008b22 <UART_SetConfig+0x266>
 8008af2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008af6:	d817      	bhi.n	8008b28 <UART_SetConfig+0x26c>
 8008af8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008afc:	d00b      	beq.n	8008b16 <UART_SetConfig+0x25a>
 8008afe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b02:	d811      	bhi.n	8008b28 <UART_SetConfig+0x26c>
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d003      	beq.n	8008b10 <UART_SetConfig+0x254>
 8008b08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b0c:	d006      	beq.n	8008b1c <UART_SetConfig+0x260>
 8008b0e:	e00b      	b.n	8008b28 <UART_SetConfig+0x26c>
 8008b10:	2301      	movs	r3, #1
 8008b12:	77fb      	strb	r3, [r7, #31]
 8008b14:	e076      	b.n	8008c04 <UART_SetConfig+0x348>
 8008b16:	2302      	movs	r3, #2
 8008b18:	77fb      	strb	r3, [r7, #31]
 8008b1a:	e073      	b.n	8008c04 <UART_SetConfig+0x348>
 8008b1c:	2304      	movs	r3, #4
 8008b1e:	77fb      	strb	r3, [r7, #31]
 8008b20:	e070      	b.n	8008c04 <UART_SetConfig+0x348>
 8008b22:	2308      	movs	r3, #8
 8008b24:	77fb      	strb	r3, [r7, #31]
 8008b26:	e06d      	b.n	8008c04 <UART_SetConfig+0x348>
 8008b28:	2310      	movs	r3, #16
 8008b2a:	77fb      	strb	r3, [r7, #31]
 8008b2c:	e06a      	b.n	8008c04 <UART_SetConfig+0x348>
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	4a1b      	ldr	r2, [pc, #108]	; (8008ba0 <UART_SetConfig+0x2e4>)
 8008b34:	4293      	cmp	r3, r2
 8008b36:	d138      	bne.n	8008baa <UART_SetConfig+0x2ee>
 8008b38:	4b13      	ldr	r3, [pc, #76]	; (8008b88 <UART_SetConfig+0x2cc>)
 8008b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b3e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008b42:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008b46:	d017      	beq.n	8008b78 <UART_SetConfig+0x2bc>
 8008b48:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008b4c:	d82a      	bhi.n	8008ba4 <UART_SetConfig+0x2e8>
 8008b4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b52:	d00b      	beq.n	8008b6c <UART_SetConfig+0x2b0>
 8008b54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b58:	d824      	bhi.n	8008ba4 <UART_SetConfig+0x2e8>
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d003      	beq.n	8008b66 <UART_SetConfig+0x2aa>
 8008b5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b62:	d006      	beq.n	8008b72 <UART_SetConfig+0x2b6>
 8008b64:	e01e      	b.n	8008ba4 <UART_SetConfig+0x2e8>
 8008b66:	2300      	movs	r3, #0
 8008b68:	77fb      	strb	r3, [r7, #31]
 8008b6a:	e04b      	b.n	8008c04 <UART_SetConfig+0x348>
 8008b6c:	2302      	movs	r3, #2
 8008b6e:	77fb      	strb	r3, [r7, #31]
 8008b70:	e048      	b.n	8008c04 <UART_SetConfig+0x348>
 8008b72:	2304      	movs	r3, #4
 8008b74:	77fb      	strb	r3, [r7, #31]
 8008b76:	e045      	b.n	8008c04 <UART_SetConfig+0x348>
 8008b78:	2308      	movs	r3, #8
 8008b7a:	77fb      	strb	r3, [r7, #31]
 8008b7c:	e042      	b.n	8008c04 <UART_SetConfig+0x348>
 8008b7e:	bf00      	nop
 8008b80:	efff69f3 	.word	0xefff69f3
 8008b84:	40011000 	.word	0x40011000
 8008b88:	40023800 	.word	0x40023800
 8008b8c:	40004400 	.word	0x40004400
 8008b90:	40004800 	.word	0x40004800
 8008b94:	40004c00 	.word	0x40004c00
 8008b98:	40005000 	.word	0x40005000
 8008b9c:	40011400 	.word	0x40011400
 8008ba0:	40007800 	.word	0x40007800
 8008ba4:	2310      	movs	r3, #16
 8008ba6:	77fb      	strb	r3, [r7, #31]
 8008ba8:	e02c      	b.n	8008c04 <UART_SetConfig+0x348>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	4a72      	ldr	r2, [pc, #456]	; (8008d78 <UART_SetConfig+0x4bc>)
 8008bb0:	4293      	cmp	r3, r2
 8008bb2:	d125      	bne.n	8008c00 <UART_SetConfig+0x344>
 8008bb4:	4b71      	ldr	r3, [pc, #452]	; (8008d7c <UART_SetConfig+0x4c0>)
 8008bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008bba:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008bbe:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008bc2:	d017      	beq.n	8008bf4 <UART_SetConfig+0x338>
 8008bc4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008bc8:	d817      	bhi.n	8008bfa <UART_SetConfig+0x33e>
 8008bca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008bce:	d00b      	beq.n	8008be8 <UART_SetConfig+0x32c>
 8008bd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008bd4:	d811      	bhi.n	8008bfa <UART_SetConfig+0x33e>
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d003      	beq.n	8008be2 <UART_SetConfig+0x326>
 8008bda:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008bde:	d006      	beq.n	8008bee <UART_SetConfig+0x332>
 8008be0:	e00b      	b.n	8008bfa <UART_SetConfig+0x33e>
 8008be2:	2300      	movs	r3, #0
 8008be4:	77fb      	strb	r3, [r7, #31]
 8008be6:	e00d      	b.n	8008c04 <UART_SetConfig+0x348>
 8008be8:	2302      	movs	r3, #2
 8008bea:	77fb      	strb	r3, [r7, #31]
 8008bec:	e00a      	b.n	8008c04 <UART_SetConfig+0x348>
 8008bee:	2304      	movs	r3, #4
 8008bf0:	77fb      	strb	r3, [r7, #31]
 8008bf2:	e007      	b.n	8008c04 <UART_SetConfig+0x348>
 8008bf4:	2308      	movs	r3, #8
 8008bf6:	77fb      	strb	r3, [r7, #31]
 8008bf8:	e004      	b.n	8008c04 <UART_SetConfig+0x348>
 8008bfa:	2310      	movs	r3, #16
 8008bfc:	77fb      	strb	r3, [r7, #31]
 8008bfe:	e001      	b.n	8008c04 <UART_SetConfig+0x348>
 8008c00:	2310      	movs	r3, #16
 8008c02:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	69db      	ldr	r3, [r3, #28]
 8008c08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c0c:	d15b      	bne.n	8008cc6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8008c0e:	7ffb      	ldrb	r3, [r7, #31]
 8008c10:	2b08      	cmp	r3, #8
 8008c12:	d828      	bhi.n	8008c66 <UART_SetConfig+0x3aa>
 8008c14:	a201      	add	r2, pc, #4	; (adr r2, 8008c1c <UART_SetConfig+0x360>)
 8008c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c1a:	bf00      	nop
 8008c1c:	08008c41 	.word	0x08008c41
 8008c20:	08008c49 	.word	0x08008c49
 8008c24:	08008c51 	.word	0x08008c51
 8008c28:	08008c67 	.word	0x08008c67
 8008c2c:	08008c57 	.word	0x08008c57
 8008c30:	08008c67 	.word	0x08008c67
 8008c34:	08008c67 	.word	0x08008c67
 8008c38:	08008c67 	.word	0x08008c67
 8008c3c:	08008c5f 	.word	0x08008c5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c40:	f7fd f986 	bl	8005f50 <HAL_RCC_GetPCLK1Freq>
 8008c44:	61b8      	str	r0, [r7, #24]
        break;
 8008c46:	e013      	b.n	8008c70 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008c48:	f7fd f996 	bl	8005f78 <HAL_RCC_GetPCLK2Freq>
 8008c4c:	61b8      	str	r0, [r7, #24]
        break;
 8008c4e:	e00f      	b.n	8008c70 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008c50:	4b4b      	ldr	r3, [pc, #300]	; (8008d80 <UART_SetConfig+0x4c4>)
 8008c52:	61bb      	str	r3, [r7, #24]
        break;
 8008c54:	e00c      	b.n	8008c70 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c56:	f7fd f869 	bl	8005d2c <HAL_RCC_GetSysClockFreq>
 8008c5a:	61b8      	str	r0, [r7, #24]
        break;
 8008c5c:	e008      	b.n	8008c70 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c62:	61bb      	str	r3, [r7, #24]
        break;
 8008c64:	e004      	b.n	8008c70 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8008c66:	2300      	movs	r3, #0
 8008c68:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	77bb      	strb	r3, [r7, #30]
        break;
 8008c6e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008c70:	69bb      	ldr	r3, [r7, #24]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d074      	beq.n	8008d60 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008c76:	69bb      	ldr	r3, [r7, #24]
 8008c78:	005a      	lsls	r2, r3, #1
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	685b      	ldr	r3, [r3, #4]
 8008c7e:	085b      	lsrs	r3, r3, #1
 8008c80:	441a      	add	r2, r3
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	685b      	ldr	r3, [r3, #4]
 8008c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c8a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c8c:	693b      	ldr	r3, [r7, #16]
 8008c8e:	2b0f      	cmp	r3, #15
 8008c90:	d916      	bls.n	8008cc0 <UART_SetConfig+0x404>
 8008c92:	693b      	ldr	r3, [r7, #16]
 8008c94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c98:	d212      	bcs.n	8008cc0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008c9a:	693b      	ldr	r3, [r7, #16]
 8008c9c:	b29b      	uxth	r3, r3
 8008c9e:	f023 030f 	bic.w	r3, r3, #15
 8008ca2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008ca4:	693b      	ldr	r3, [r7, #16]
 8008ca6:	085b      	lsrs	r3, r3, #1
 8008ca8:	b29b      	uxth	r3, r3
 8008caa:	f003 0307 	and.w	r3, r3, #7
 8008cae:	b29a      	uxth	r2, r3
 8008cb0:	89fb      	ldrh	r3, [r7, #14]
 8008cb2:	4313      	orrs	r3, r2
 8008cb4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	89fa      	ldrh	r2, [r7, #14]
 8008cbc:	60da      	str	r2, [r3, #12]
 8008cbe:	e04f      	b.n	8008d60 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	77bb      	strb	r3, [r7, #30]
 8008cc4:	e04c      	b.n	8008d60 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008cc6:	7ffb      	ldrb	r3, [r7, #31]
 8008cc8:	2b08      	cmp	r3, #8
 8008cca:	d828      	bhi.n	8008d1e <UART_SetConfig+0x462>
 8008ccc:	a201      	add	r2, pc, #4	; (adr r2, 8008cd4 <UART_SetConfig+0x418>)
 8008cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cd2:	bf00      	nop
 8008cd4:	08008cf9 	.word	0x08008cf9
 8008cd8:	08008d01 	.word	0x08008d01
 8008cdc:	08008d09 	.word	0x08008d09
 8008ce0:	08008d1f 	.word	0x08008d1f
 8008ce4:	08008d0f 	.word	0x08008d0f
 8008ce8:	08008d1f 	.word	0x08008d1f
 8008cec:	08008d1f 	.word	0x08008d1f
 8008cf0:	08008d1f 	.word	0x08008d1f
 8008cf4:	08008d17 	.word	0x08008d17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008cf8:	f7fd f92a 	bl	8005f50 <HAL_RCC_GetPCLK1Freq>
 8008cfc:	61b8      	str	r0, [r7, #24]
        break;
 8008cfe:	e013      	b.n	8008d28 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008d00:	f7fd f93a 	bl	8005f78 <HAL_RCC_GetPCLK2Freq>
 8008d04:	61b8      	str	r0, [r7, #24]
        break;
 8008d06:	e00f      	b.n	8008d28 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008d08:	4b1d      	ldr	r3, [pc, #116]	; (8008d80 <UART_SetConfig+0x4c4>)
 8008d0a:	61bb      	str	r3, [r7, #24]
        break;
 8008d0c:	e00c      	b.n	8008d28 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008d0e:	f7fd f80d 	bl	8005d2c <HAL_RCC_GetSysClockFreq>
 8008d12:	61b8      	str	r0, [r7, #24]
        break;
 8008d14:	e008      	b.n	8008d28 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d1a:	61bb      	str	r3, [r7, #24]
        break;
 8008d1c:	e004      	b.n	8008d28 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8008d1e:	2300      	movs	r3, #0
 8008d20:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008d22:	2301      	movs	r3, #1
 8008d24:	77bb      	strb	r3, [r7, #30]
        break;
 8008d26:	bf00      	nop
    }

    if (pclk != 0U)
 8008d28:	69bb      	ldr	r3, [r7, #24]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d018      	beq.n	8008d60 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	685b      	ldr	r3, [r3, #4]
 8008d32:	085a      	lsrs	r2, r3, #1
 8008d34:	69bb      	ldr	r3, [r7, #24]
 8008d36:	441a      	add	r2, r3
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	685b      	ldr	r3, [r3, #4]
 8008d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d40:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008d42:	693b      	ldr	r3, [r7, #16]
 8008d44:	2b0f      	cmp	r3, #15
 8008d46:	d909      	bls.n	8008d5c <UART_SetConfig+0x4a0>
 8008d48:	693b      	ldr	r3, [r7, #16]
 8008d4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d4e:	d205      	bcs.n	8008d5c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008d50:	693b      	ldr	r3, [r7, #16]
 8008d52:	b29a      	uxth	r2, r3
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	60da      	str	r2, [r3, #12]
 8008d5a:	e001      	b.n	8008d60 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2200      	movs	r2, #0
 8008d64:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2200      	movs	r2, #0
 8008d6a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8008d6c:	7fbb      	ldrb	r3, [r7, #30]
}
 8008d6e:	4618      	mov	r0, r3
 8008d70:	3720      	adds	r7, #32
 8008d72:	46bd      	mov	sp, r7
 8008d74:	bd80      	pop	{r7, pc}
 8008d76:	bf00      	nop
 8008d78:	40007c00 	.word	0x40007c00
 8008d7c:	40023800 	.word	0x40023800
 8008d80:	00f42400 	.word	0x00f42400

08008d84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008d84:	b480      	push	{r7}
 8008d86:	b083      	sub	sp, #12
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d90:	f003 0301 	and.w	r3, r3, #1
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d00a      	beq.n	8008dae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	685b      	ldr	r3, [r3, #4]
 8008d9e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	430a      	orrs	r2, r1
 8008dac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008db2:	f003 0302 	and.w	r3, r3, #2
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d00a      	beq.n	8008dd0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	685b      	ldr	r3, [r3, #4]
 8008dc0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	430a      	orrs	r2, r1
 8008dce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dd4:	f003 0304 	and.w	r3, r3, #4
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d00a      	beq.n	8008df2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	685b      	ldr	r3, [r3, #4]
 8008de2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	430a      	orrs	r2, r1
 8008df0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008df6:	f003 0308 	and.w	r3, r3, #8
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d00a      	beq.n	8008e14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	685b      	ldr	r3, [r3, #4]
 8008e04:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	430a      	orrs	r2, r1
 8008e12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e18:	f003 0310 	and.w	r3, r3, #16
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d00a      	beq.n	8008e36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	689b      	ldr	r3, [r3, #8]
 8008e26:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	430a      	orrs	r2, r1
 8008e34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e3a:	f003 0320 	and.w	r3, r3, #32
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d00a      	beq.n	8008e58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	689b      	ldr	r3, [r3, #8]
 8008e48:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	430a      	orrs	r2, r1
 8008e56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d01a      	beq.n	8008e9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	685b      	ldr	r3, [r3, #4]
 8008e6a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	430a      	orrs	r2, r1
 8008e78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e82:	d10a      	bne.n	8008e9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	685b      	ldr	r3, [r3, #4]
 8008e8a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	430a      	orrs	r2, r1
 8008e98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d00a      	beq.n	8008ebc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	685b      	ldr	r3, [r3, #4]
 8008eac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	430a      	orrs	r2, r1
 8008eba:	605a      	str	r2, [r3, #4]
  }
}
 8008ebc:	bf00      	nop
 8008ebe:	370c      	adds	r7, #12
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec6:	4770      	bx	lr

08008ec8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b086      	sub	sp, #24
 8008ecc:	af02      	add	r7, sp, #8
 8008ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008ed8:	f7fb faf0 	bl	80044bc <HAL_GetTick>
 8008edc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f003 0308 	and.w	r3, r3, #8
 8008ee8:	2b08      	cmp	r3, #8
 8008eea:	d10e      	bne.n	8008f0a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008eec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008ef0:	9300      	str	r3, [sp, #0]
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f000 f831 	bl	8008f62 <UART_WaitOnFlagUntilTimeout>
 8008f00:	4603      	mov	r3, r0
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d001      	beq.n	8008f0a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008f06:	2303      	movs	r3, #3
 8008f08:	e027      	b.n	8008f5a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f003 0304 	and.w	r3, r3, #4
 8008f14:	2b04      	cmp	r3, #4
 8008f16:	d10e      	bne.n	8008f36 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008f18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008f1c:	9300      	str	r3, [sp, #0]
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	2200      	movs	r2, #0
 8008f22:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f000 f81b 	bl	8008f62 <UART_WaitOnFlagUntilTimeout>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d001      	beq.n	8008f36 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008f32:	2303      	movs	r3, #3
 8008f34:	e011      	b.n	8008f5a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2220      	movs	r2, #32
 8008f3a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2220      	movs	r2, #32
 8008f40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2200      	movs	r2, #0
 8008f48:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2200      	movs	r2, #0
 8008f54:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8008f58:	2300      	movs	r3, #0
}
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	3710      	adds	r7, #16
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}

08008f62 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008f62:	b580      	push	{r7, lr}
 8008f64:	b09c      	sub	sp, #112	; 0x70
 8008f66:	af00      	add	r7, sp, #0
 8008f68:	60f8      	str	r0, [r7, #12]
 8008f6a:	60b9      	str	r1, [r7, #8]
 8008f6c:	603b      	str	r3, [r7, #0]
 8008f6e:	4613      	mov	r3, r2
 8008f70:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f72:	e0a7      	b.n	80090c4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f7a:	f000 80a3 	beq.w	80090c4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f7e:	f7fb fa9d 	bl	80044bc <HAL_GetTick>
 8008f82:	4602      	mov	r2, r0
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	1ad3      	subs	r3, r2, r3
 8008f88:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008f8a:	429a      	cmp	r2, r3
 8008f8c:	d302      	bcc.n	8008f94 <UART_WaitOnFlagUntilTimeout+0x32>
 8008f8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d13f      	bne.n	8009014 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f9c:	e853 3f00 	ldrex	r3, [r3]
 8008fa0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008fa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fa4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008fa8:	667b      	str	r3, [r7, #100]	; 0x64
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	461a      	mov	r2, r3
 8008fb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008fb2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008fb4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fb6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008fb8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008fba:	e841 2300 	strex	r3, r2, [r1]
 8008fbe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008fc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d1e6      	bne.n	8008f94 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	3308      	adds	r3, #8
 8008fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fd0:	e853 3f00 	ldrex	r3, [r3]
 8008fd4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fd8:	f023 0301 	bic.w	r3, r3, #1
 8008fdc:	663b      	str	r3, [r7, #96]	; 0x60
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	3308      	adds	r3, #8
 8008fe4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008fe6:	64ba      	str	r2, [r7, #72]	; 0x48
 8008fe8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008fec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008fee:	e841 2300 	strex	r3, r2, [r1]
 8008ff2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008ff4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d1e5      	bne.n	8008fc6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	2220      	movs	r2, #32
 8008ffe:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	2220      	movs	r2, #32
 8009004:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	2200      	movs	r2, #0
 800900c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8009010:	2303      	movs	r3, #3
 8009012:	e068      	b.n	80090e6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	f003 0304 	and.w	r3, r3, #4
 800901e:	2b00      	cmp	r3, #0
 8009020:	d050      	beq.n	80090c4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	69db      	ldr	r3, [r3, #28]
 8009028:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800902c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009030:	d148      	bne.n	80090c4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800903a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009044:	e853 3f00 	ldrex	r3, [r3]
 8009048:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800904a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800904c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009050:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	461a      	mov	r2, r3
 8009058:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800905a:	637b      	str	r3, [r7, #52]	; 0x34
 800905c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800905e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009060:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009062:	e841 2300 	strex	r3, r2, [r1]
 8009066:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800906a:	2b00      	cmp	r3, #0
 800906c:	d1e6      	bne.n	800903c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	3308      	adds	r3, #8
 8009074:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009076:	697b      	ldr	r3, [r7, #20]
 8009078:	e853 3f00 	ldrex	r3, [r3]
 800907c:	613b      	str	r3, [r7, #16]
   return(result);
 800907e:	693b      	ldr	r3, [r7, #16]
 8009080:	f023 0301 	bic.w	r3, r3, #1
 8009084:	66bb      	str	r3, [r7, #104]	; 0x68
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	3308      	adds	r3, #8
 800908c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800908e:	623a      	str	r2, [r7, #32]
 8009090:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009092:	69f9      	ldr	r1, [r7, #28]
 8009094:	6a3a      	ldr	r2, [r7, #32]
 8009096:	e841 2300 	strex	r3, r2, [r1]
 800909a:	61bb      	str	r3, [r7, #24]
   return(result);
 800909c:	69bb      	ldr	r3, [r7, #24]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d1e5      	bne.n	800906e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	2220      	movs	r2, #32
 80090a6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	2220      	movs	r2, #32
 80090ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	2220      	movs	r2, #32
 80090b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	2200      	movs	r2, #0
 80090bc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80090c0:	2303      	movs	r3, #3
 80090c2:	e010      	b.n	80090e6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	69da      	ldr	r2, [r3, #28]
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	4013      	ands	r3, r2
 80090ce:	68ba      	ldr	r2, [r7, #8]
 80090d0:	429a      	cmp	r2, r3
 80090d2:	bf0c      	ite	eq
 80090d4:	2301      	moveq	r3, #1
 80090d6:	2300      	movne	r3, #0
 80090d8:	b2db      	uxtb	r3, r3
 80090da:	461a      	mov	r2, r3
 80090dc:	79fb      	ldrb	r3, [r7, #7]
 80090de:	429a      	cmp	r2, r3
 80090e0:	f43f af48 	beq.w	8008f74 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80090e4:	2300      	movs	r3, #0
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	3770      	adds	r7, #112	; 0x70
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}
	...

080090f0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b096      	sub	sp, #88	; 0x58
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	60f8      	str	r0, [r7, #12]
 80090f8:	60b9      	str	r1, [r7, #8]
 80090fa:	4613      	mov	r3, r2
 80090fc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	68ba      	ldr	r2, [r7, #8]
 8009102:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	88fa      	ldrh	r2, [r7, #6]
 8009108:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	2200      	movs	r2, #0
 8009110:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	2222      	movs	r2, #34	; 0x22
 8009118:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009120:	2b00      	cmp	r3, #0
 8009122:	d028      	beq.n	8009176 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009128:	4a3e      	ldr	r2, [pc, #248]	; (8009224 <UART_Start_Receive_DMA+0x134>)
 800912a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009130:	4a3d      	ldr	r2, [pc, #244]	; (8009228 <UART_Start_Receive_DMA+0x138>)
 8009132:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009138:	4a3c      	ldr	r2, [pc, #240]	; (800922c <UART_Start_Receive_DMA+0x13c>)
 800913a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009140:	2200      	movs	r2, #0
 8009142:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	3324      	adds	r3, #36	; 0x24
 800914e:	4619      	mov	r1, r3
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009154:	461a      	mov	r2, r3
 8009156:	88fb      	ldrh	r3, [r7, #6]
 8009158:	f7fb fb70 	bl	800483c <HAL_DMA_Start_IT>
 800915c:	4603      	mov	r3, r0
 800915e:	2b00      	cmp	r3, #0
 8009160:	d009      	beq.n	8009176 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	2210      	movs	r2, #16
 8009166:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	2220      	movs	r2, #32
 800916e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 8009172:	2301      	movs	r3, #1
 8009174:	e051      	b.n	800921a <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	691b      	ldr	r3, [r3, #16]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d018      	beq.n	80091b0 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009184:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009186:	e853 3f00 	ldrex	r3, [r3]
 800918a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800918c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800918e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009192:	657b      	str	r3, [r7, #84]	; 0x54
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	461a      	mov	r2, r3
 800919a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800919c:	64bb      	str	r3, [r7, #72]	; 0x48
 800919e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091a0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80091a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80091a4:	e841 2300 	strex	r3, r2, [r1]
 80091a8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80091aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d1e6      	bne.n	800917e <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	3308      	adds	r3, #8
 80091b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ba:	e853 3f00 	ldrex	r3, [r3]
 80091be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80091c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091c2:	f043 0301 	orr.w	r3, r3, #1
 80091c6:	653b      	str	r3, [r7, #80]	; 0x50
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	3308      	adds	r3, #8
 80091ce:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80091d0:	637a      	str	r2, [r7, #52]	; 0x34
 80091d2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80091d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80091d8:	e841 2300 	strex	r3, r2, [r1]
 80091dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80091de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d1e5      	bne.n	80091b0 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	3308      	adds	r3, #8
 80091ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ec:	697b      	ldr	r3, [r7, #20]
 80091ee:	e853 3f00 	ldrex	r3, [r3]
 80091f2:	613b      	str	r3, [r7, #16]
   return(result);
 80091f4:	693b      	ldr	r3, [r7, #16]
 80091f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	3308      	adds	r3, #8
 8009202:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009204:	623a      	str	r2, [r7, #32]
 8009206:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009208:	69f9      	ldr	r1, [r7, #28]
 800920a:	6a3a      	ldr	r2, [r7, #32]
 800920c:	e841 2300 	strex	r3, r2, [r1]
 8009210:	61bb      	str	r3, [r7, #24]
   return(result);
 8009212:	69bb      	ldr	r3, [r7, #24]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d1e5      	bne.n	80091e4 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8009218:	2300      	movs	r3, #0
}
 800921a:	4618      	mov	r0, r3
 800921c:	3758      	adds	r7, #88	; 0x58
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}
 8009222:	bf00      	nop
 8009224:	080093f7 	.word	0x080093f7
 8009228:	0800951f 	.word	0x0800951f
 800922c:	0800955d 	.word	0x0800955d

08009230 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009230:	b480      	push	{r7}
 8009232:	b089      	sub	sp, #36	; 0x24
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	e853 3f00 	ldrex	r3, [r3]
 8009244:	60bb      	str	r3, [r7, #8]
   return(result);
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800924c:	61fb      	str	r3, [r7, #28]
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	461a      	mov	r2, r3
 8009254:	69fb      	ldr	r3, [r7, #28]
 8009256:	61bb      	str	r3, [r7, #24]
 8009258:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800925a:	6979      	ldr	r1, [r7, #20]
 800925c:	69ba      	ldr	r2, [r7, #24]
 800925e:	e841 2300 	strex	r3, r2, [r1]
 8009262:	613b      	str	r3, [r7, #16]
   return(result);
 8009264:	693b      	ldr	r3, [r7, #16]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d1e6      	bne.n	8009238 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2220      	movs	r2, #32
 800926e:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8009270:	bf00      	nop
 8009272:	3724      	adds	r7, #36	; 0x24
 8009274:	46bd      	mov	sp, r7
 8009276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927a:	4770      	bx	lr

0800927c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800927c:	b480      	push	{r7}
 800927e:	b095      	sub	sp, #84	; 0x54
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800928a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800928c:	e853 3f00 	ldrex	r3, [r3]
 8009290:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009294:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009298:	64fb      	str	r3, [r7, #76]	; 0x4c
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	461a      	mov	r2, r3
 80092a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092a2:	643b      	str	r3, [r7, #64]	; 0x40
 80092a4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092a6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80092a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80092aa:	e841 2300 	strex	r3, r2, [r1]
 80092ae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80092b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d1e6      	bne.n	8009284 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	3308      	adds	r3, #8
 80092bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092be:	6a3b      	ldr	r3, [r7, #32]
 80092c0:	e853 3f00 	ldrex	r3, [r3]
 80092c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80092c6:	69fb      	ldr	r3, [r7, #28]
 80092c8:	f023 0301 	bic.w	r3, r3, #1
 80092cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	3308      	adds	r3, #8
 80092d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80092d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80092d8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80092dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80092de:	e841 2300 	strex	r3, r2, [r1]
 80092e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80092e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d1e5      	bne.n	80092b6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80092ee:	2b01      	cmp	r3, #1
 80092f0:	d118      	bne.n	8009324 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	e853 3f00 	ldrex	r3, [r3]
 80092fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	f023 0310 	bic.w	r3, r3, #16
 8009306:	647b      	str	r3, [r7, #68]	; 0x44
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	461a      	mov	r2, r3
 800930e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009310:	61bb      	str	r3, [r7, #24]
 8009312:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009314:	6979      	ldr	r1, [r7, #20]
 8009316:	69ba      	ldr	r2, [r7, #24]
 8009318:	e841 2300 	strex	r3, r2, [r1]
 800931c:	613b      	str	r3, [r7, #16]
   return(result);
 800931e:	693b      	ldr	r3, [r7, #16]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d1e6      	bne.n	80092f2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2220      	movs	r2, #32
 8009328:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2200      	movs	r2, #0
 8009330:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2200      	movs	r2, #0
 8009336:	669a      	str	r2, [r3, #104]	; 0x68
}
 8009338:	bf00      	nop
 800933a:	3754      	adds	r7, #84	; 0x54
 800933c:	46bd      	mov	sp, r7
 800933e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009342:	4770      	bx	lr

08009344 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b090      	sub	sp, #64	; 0x40
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009350:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	69db      	ldr	r3, [r3, #28]
 8009356:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800935a:	d037      	beq.n	80093cc <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800935c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800935e:	2200      	movs	r2, #0
 8009360:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009364:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	3308      	adds	r3, #8
 800936a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800936c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800936e:	e853 3f00 	ldrex	r3, [r3]
 8009372:	623b      	str	r3, [r7, #32]
   return(result);
 8009374:	6a3b      	ldr	r3, [r7, #32]
 8009376:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800937a:	63bb      	str	r3, [r7, #56]	; 0x38
 800937c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	3308      	adds	r3, #8
 8009382:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009384:	633a      	str	r2, [r7, #48]	; 0x30
 8009386:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009388:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800938a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800938c:	e841 2300 	strex	r3, r2, [r1]
 8009390:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009394:	2b00      	cmp	r3, #0
 8009396:	d1e5      	bne.n	8009364 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009398:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800939e:	693b      	ldr	r3, [r7, #16]
 80093a0:	e853 3f00 	ldrex	r3, [r3]
 80093a4:	60fb      	str	r3, [r7, #12]
   return(result);
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093ac:	637b      	str	r3, [r7, #52]	; 0x34
 80093ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	461a      	mov	r2, r3
 80093b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093b6:	61fb      	str	r3, [r7, #28]
 80093b8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093ba:	69b9      	ldr	r1, [r7, #24]
 80093bc:	69fa      	ldr	r2, [r7, #28]
 80093be:	e841 2300 	strex	r3, r2, [r1]
 80093c2:	617b      	str	r3, [r7, #20]
   return(result);
 80093c4:	697b      	ldr	r3, [r7, #20]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d1e6      	bne.n	8009398 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80093ca:	e002      	b.n	80093d2 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 80093cc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80093ce:	f7ff fa2d 	bl	800882c <HAL_UART_TxCpltCallback>
}
 80093d2:	bf00      	nop
 80093d4:	3740      	adds	r7, #64	; 0x40
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bd80      	pop	{r7, pc}

080093da <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80093da:	b580      	push	{r7, lr}
 80093dc:	b084      	sub	sp, #16
 80093de:	af00      	add	r7, sp, #0
 80093e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093e6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80093e8:	68f8      	ldr	r0, [r7, #12]
 80093ea:	f7ff fa29 	bl	8008840 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80093ee:	bf00      	nop
 80093f0:	3710      	adds	r7, #16
 80093f2:	46bd      	mov	sp, r7
 80093f4:	bd80      	pop	{r7, pc}

080093f6 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80093f6:	b580      	push	{r7, lr}
 80093f8:	b09c      	sub	sp, #112	; 0x70
 80093fa:	af00      	add	r7, sp, #0
 80093fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009402:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	69db      	ldr	r3, [r3, #28]
 8009408:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800940c:	d071      	beq.n	80094f2 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800940e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009410:	2200      	movs	r2, #0
 8009412:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009416:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800941c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800941e:	e853 3f00 	ldrex	r3, [r3]
 8009422:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009424:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009426:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800942a:	66bb      	str	r3, [r7, #104]	; 0x68
 800942c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	461a      	mov	r2, r3
 8009432:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009434:	65bb      	str	r3, [r7, #88]	; 0x58
 8009436:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009438:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800943a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800943c:	e841 2300 	strex	r3, r2, [r1]
 8009440:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009442:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009444:	2b00      	cmp	r3, #0
 8009446:	d1e6      	bne.n	8009416 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009448:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	3308      	adds	r3, #8
 800944e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009452:	e853 3f00 	ldrex	r3, [r3]
 8009456:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800945a:	f023 0301 	bic.w	r3, r3, #1
 800945e:	667b      	str	r3, [r7, #100]	; 0x64
 8009460:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	3308      	adds	r3, #8
 8009466:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009468:	647a      	str	r2, [r7, #68]	; 0x44
 800946a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800946c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800946e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009470:	e841 2300 	strex	r3, r2, [r1]
 8009474:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009476:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009478:	2b00      	cmp	r3, #0
 800947a:	d1e5      	bne.n	8009448 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800947c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	3308      	adds	r3, #8
 8009482:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009486:	e853 3f00 	ldrex	r3, [r3]
 800948a:	623b      	str	r3, [r7, #32]
   return(result);
 800948c:	6a3b      	ldr	r3, [r7, #32]
 800948e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009492:	663b      	str	r3, [r7, #96]	; 0x60
 8009494:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	3308      	adds	r3, #8
 800949a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800949c:	633a      	str	r2, [r7, #48]	; 0x30
 800949e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80094a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094a4:	e841 2300 	strex	r3, r2, [r1]
 80094a8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80094aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d1e5      	bne.n	800947c <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80094b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094b2:	2220      	movs	r2, #32
 80094b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80094bc:	2b01      	cmp	r3, #1
 80094be:	d118      	bne.n	80094f2 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094c6:	693b      	ldr	r3, [r7, #16]
 80094c8:	e853 3f00 	ldrex	r3, [r3]
 80094cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	f023 0310 	bic.w	r3, r3, #16
 80094d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80094d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	461a      	mov	r2, r3
 80094dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80094de:	61fb      	str	r3, [r7, #28]
 80094e0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094e2:	69b9      	ldr	r1, [r7, #24]
 80094e4:	69fa      	ldr	r2, [r7, #28]
 80094e6:	e841 2300 	strex	r3, r2, [r1]
 80094ea:	617b      	str	r3, [r7, #20]
   return(result);
 80094ec:	697b      	ldr	r3, [r7, #20]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d1e6      	bne.n	80094c0 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80094f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094f4:	2200      	movs	r2, #0
 80094f6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80094fc:	2b01      	cmp	r3, #1
 80094fe:	d107      	bne.n	8009510 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009500:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009502:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009506:	4619      	mov	r1, r3
 8009508:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800950a:	f7ff f9c1 	bl	8008890 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800950e:	e002      	b.n	8009516 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8009510:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009512:	f7ff f99f 	bl	8008854 <HAL_UART_RxCpltCallback>
}
 8009516:	bf00      	nop
 8009518:	3770      	adds	r7, #112	; 0x70
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}

0800951e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800951e:	b580      	push	{r7, lr}
 8009520:	b084      	sub	sp, #16
 8009522:	af00      	add	r7, sp, #0
 8009524:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800952a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	2201      	movs	r2, #1
 8009530:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009536:	2b01      	cmp	r3, #1
 8009538:	d109      	bne.n	800954e <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009540:	085b      	lsrs	r3, r3, #1
 8009542:	b29b      	uxth	r3, r3
 8009544:	4619      	mov	r1, r3
 8009546:	68f8      	ldr	r0, [r7, #12]
 8009548:	f7ff f9a2 	bl	8008890 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800954c:	e002      	b.n	8009554 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800954e:	68f8      	ldr	r0, [r7, #12]
 8009550:	f7ff f98a 	bl	8008868 <HAL_UART_RxHalfCpltCallback>
}
 8009554:	bf00      	nop
 8009556:	3710      	adds	r7, #16
 8009558:	46bd      	mov	sp, r7
 800955a:	bd80      	pop	{r7, pc}

0800955c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b086      	sub	sp, #24
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009568:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800956a:	697b      	ldr	r3, [r7, #20]
 800956c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800956e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009570:	697b      	ldr	r3, [r7, #20]
 8009572:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009576:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009578:	697b      	ldr	r3, [r7, #20]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	689b      	ldr	r3, [r3, #8]
 800957e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009582:	2b80      	cmp	r3, #128	; 0x80
 8009584:	d109      	bne.n	800959a <UART_DMAError+0x3e>
 8009586:	693b      	ldr	r3, [r7, #16]
 8009588:	2b21      	cmp	r3, #33	; 0x21
 800958a:	d106      	bne.n	800959a <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800958c:	697b      	ldr	r3, [r7, #20]
 800958e:	2200      	movs	r2, #0
 8009590:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8009594:	6978      	ldr	r0, [r7, #20]
 8009596:	f7ff fe4b 	bl	8009230 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800959a:	697b      	ldr	r3, [r7, #20]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	689b      	ldr	r3, [r3, #8]
 80095a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095a4:	2b40      	cmp	r3, #64	; 0x40
 80095a6:	d109      	bne.n	80095bc <UART_DMAError+0x60>
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	2b22      	cmp	r3, #34	; 0x22
 80095ac:	d106      	bne.n	80095bc <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80095ae:	697b      	ldr	r3, [r7, #20]
 80095b0:	2200      	movs	r2, #0
 80095b2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80095b6:	6978      	ldr	r0, [r7, #20]
 80095b8:	f7ff fe60 	bl	800927c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80095bc:	697b      	ldr	r3, [r7, #20]
 80095be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80095c2:	f043 0210 	orr.w	r2, r3, #16
 80095c6:	697b      	ldr	r3, [r7, #20]
 80095c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80095cc:	6978      	ldr	r0, [r7, #20]
 80095ce:	f7ff f955 	bl	800887c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80095d2:	bf00      	nop
 80095d4:	3718      	adds	r7, #24
 80095d6:	46bd      	mov	sp, r7
 80095d8:	bd80      	pop	{r7, pc}

080095da <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80095da:	b580      	push	{r7, lr}
 80095dc:	b084      	sub	sp, #16
 80095de:	af00      	add	r7, sp, #0
 80095e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095e6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	2200      	movs	r2, #0
 80095ec:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	2200      	movs	r2, #0
 80095f4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80095f8:	68f8      	ldr	r0, [r7, #12]
 80095fa:	f7ff f93f 	bl	800887c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80095fe:	bf00      	nop
 8009600:	3710      	adds	r7, #16
 8009602:	46bd      	mov	sp, r7
 8009604:	bd80      	pop	{r7, pc}

08009606 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009606:	b580      	push	{r7, lr}
 8009608:	b088      	sub	sp, #32
 800960a:	af00      	add	r7, sp, #0
 800960c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	e853 3f00 	ldrex	r3, [r3]
 800961a:	60bb      	str	r3, [r7, #8]
   return(result);
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009622:	61fb      	str	r3, [r7, #28]
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	461a      	mov	r2, r3
 800962a:	69fb      	ldr	r3, [r7, #28]
 800962c:	61bb      	str	r3, [r7, #24]
 800962e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009630:	6979      	ldr	r1, [r7, #20]
 8009632:	69ba      	ldr	r2, [r7, #24]
 8009634:	e841 2300 	strex	r3, r2, [r1]
 8009638:	613b      	str	r3, [r7, #16]
   return(result);
 800963a:	693b      	ldr	r3, [r7, #16]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d1e6      	bne.n	800960e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2220      	movs	r2, #32
 8009644:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2200      	movs	r2, #0
 800964a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f7ff f8ed 	bl	800882c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009652:	bf00      	nop
 8009654:	3720      	adds	r7, #32
 8009656:	46bd      	mov	sp, r7
 8009658:	bd80      	pop	{r7, pc}
	...

0800965c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800965c:	b084      	sub	sp, #16
 800965e:	b580      	push	{r7, lr}
 8009660:	b084      	sub	sp, #16
 8009662:	af00      	add	r7, sp, #0
 8009664:	6078      	str	r0, [r7, #4]
 8009666:	f107 001c 	add.w	r0, r7, #28
 800966a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800966e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009670:	2b01      	cmp	r3, #1
 8009672:	d120      	bne.n	80096b6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009678:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	68da      	ldr	r2, [r3, #12]
 8009684:	4b20      	ldr	r3, [pc, #128]	; (8009708 <USB_CoreInit+0xac>)
 8009686:	4013      	ands	r3, r2
 8009688:	687a      	ldr	r2, [r7, #4]
 800968a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	68db      	ldr	r3, [r3, #12]
 8009690:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009698:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800969a:	2b01      	cmp	r3, #1
 800969c:	d105      	bne.n	80096aa <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	68db      	ldr	r3, [r3, #12]
 80096a2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80096aa:	6878      	ldr	r0, [r7, #4]
 80096ac:	f000 fa96 	bl	8009bdc <USB_CoreReset>
 80096b0:	4603      	mov	r3, r0
 80096b2:	73fb      	strb	r3, [r7, #15]
 80096b4:	e010      	b.n	80096d8 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	68db      	ldr	r3, [r3, #12]
 80096ba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80096c2:	6878      	ldr	r0, [r7, #4]
 80096c4:	f000 fa8a 	bl	8009bdc <USB_CoreReset>
 80096c8:	4603      	mov	r3, r0
 80096ca:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096d0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80096d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096da:	2b01      	cmp	r3, #1
 80096dc:	d10b      	bne.n	80096f6 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	689b      	ldr	r3, [r3, #8]
 80096e2:	f043 0206 	orr.w	r2, r3, #6
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	689b      	ldr	r3, [r3, #8]
 80096ee:	f043 0220 	orr.w	r2, r3, #32
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80096f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80096f8:	4618      	mov	r0, r3
 80096fa:	3710      	adds	r7, #16
 80096fc:	46bd      	mov	sp, r7
 80096fe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009702:	b004      	add	sp, #16
 8009704:	4770      	bx	lr
 8009706:	bf00      	nop
 8009708:	ffbdffbf 	.word	0xffbdffbf

0800970c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800970c:	b480      	push	{r7}
 800970e:	b083      	sub	sp, #12
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	689b      	ldr	r3, [r3, #8]
 8009718:	f023 0201 	bic.w	r2, r3, #1
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009720:	2300      	movs	r3, #0
}
 8009722:	4618      	mov	r0, r3
 8009724:	370c      	adds	r7, #12
 8009726:	46bd      	mov	sp, r7
 8009728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972c:	4770      	bx	lr

0800972e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800972e:	b580      	push	{r7, lr}
 8009730:	b084      	sub	sp, #16
 8009732:	af00      	add	r7, sp, #0
 8009734:	6078      	str	r0, [r7, #4]
 8009736:	460b      	mov	r3, r1
 8009738:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800973a:	2300      	movs	r3, #0
 800973c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	68db      	ldr	r3, [r3, #12]
 8009742:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800974a:	78fb      	ldrb	r3, [r7, #3]
 800974c:	2b01      	cmp	r3, #1
 800974e:	d115      	bne.n	800977c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	68db      	ldr	r3, [r3, #12]
 8009754:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800975c:	2001      	movs	r0, #1
 800975e:	f7fa feb9 	bl	80044d4 <HAL_Delay>
      ms++;
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	3301      	adds	r3, #1
 8009766:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009768:	6878      	ldr	r0, [r7, #4]
 800976a:	f000 fa29 	bl	8009bc0 <USB_GetMode>
 800976e:	4603      	mov	r3, r0
 8009770:	2b01      	cmp	r3, #1
 8009772:	d01e      	beq.n	80097b2 <USB_SetCurrentMode+0x84>
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	2b31      	cmp	r3, #49	; 0x31
 8009778:	d9f0      	bls.n	800975c <USB_SetCurrentMode+0x2e>
 800977a:	e01a      	b.n	80097b2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800977c:	78fb      	ldrb	r3, [r7, #3]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d115      	bne.n	80097ae <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	68db      	ldr	r3, [r3, #12]
 8009786:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800978e:	2001      	movs	r0, #1
 8009790:	f7fa fea0 	bl	80044d4 <HAL_Delay>
      ms++;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	3301      	adds	r3, #1
 8009798:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800979a:	6878      	ldr	r0, [r7, #4]
 800979c:	f000 fa10 	bl	8009bc0 <USB_GetMode>
 80097a0:	4603      	mov	r3, r0
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d005      	beq.n	80097b2 <USB_SetCurrentMode+0x84>
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	2b31      	cmp	r3, #49	; 0x31
 80097aa:	d9f0      	bls.n	800978e <USB_SetCurrentMode+0x60>
 80097ac:	e001      	b.n	80097b2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80097ae:	2301      	movs	r3, #1
 80097b0:	e005      	b.n	80097be <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	2b32      	cmp	r3, #50	; 0x32
 80097b6:	d101      	bne.n	80097bc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80097b8:	2301      	movs	r3, #1
 80097ba:	e000      	b.n	80097be <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80097bc:	2300      	movs	r3, #0
}
 80097be:	4618      	mov	r0, r3
 80097c0:	3710      	adds	r7, #16
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bd80      	pop	{r7, pc}
	...

080097c8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80097c8:	b084      	sub	sp, #16
 80097ca:	b580      	push	{r7, lr}
 80097cc:	b086      	sub	sp, #24
 80097ce:	af00      	add	r7, sp, #0
 80097d0:	6078      	str	r0, [r7, #4]
 80097d2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80097d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80097da:	2300      	movs	r3, #0
 80097dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80097e2:	2300      	movs	r3, #0
 80097e4:	613b      	str	r3, [r7, #16]
 80097e6:	e009      	b.n	80097fc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80097e8:	687a      	ldr	r2, [r7, #4]
 80097ea:	693b      	ldr	r3, [r7, #16]
 80097ec:	3340      	adds	r3, #64	; 0x40
 80097ee:	009b      	lsls	r3, r3, #2
 80097f0:	4413      	add	r3, r2
 80097f2:	2200      	movs	r2, #0
 80097f4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80097f6:	693b      	ldr	r3, [r7, #16]
 80097f8:	3301      	adds	r3, #1
 80097fa:	613b      	str	r3, [r7, #16]
 80097fc:	693b      	ldr	r3, [r7, #16]
 80097fe:	2b0e      	cmp	r3, #14
 8009800:	d9f2      	bls.n	80097e8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009802:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009804:	2b00      	cmp	r3, #0
 8009806:	d11c      	bne.n	8009842 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800980e:	685b      	ldr	r3, [r3, #4]
 8009810:	68fa      	ldr	r2, [r7, #12]
 8009812:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009816:	f043 0302 	orr.w	r3, r3, #2
 800981a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009820:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	601a      	str	r2, [r3, #0]
 8009840:	e005      	b.n	800984e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009846:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009854:	461a      	mov	r2, r3
 8009856:	2300      	movs	r3, #0
 8009858:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009860:	4619      	mov	r1, r3
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009868:	461a      	mov	r2, r3
 800986a:	680b      	ldr	r3, [r1, #0]
 800986c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800986e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009870:	2b01      	cmp	r3, #1
 8009872:	d10c      	bne.n	800988e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009876:	2b00      	cmp	r3, #0
 8009878:	d104      	bne.n	8009884 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800987a:	2100      	movs	r1, #0
 800987c:	6878      	ldr	r0, [r7, #4]
 800987e:	f000 f965 	bl	8009b4c <USB_SetDevSpeed>
 8009882:	e008      	b.n	8009896 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009884:	2101      	movs	r1, #1
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f000 f960 	bl	8009b4c <USB_SetDevSpeed>
 800988c:	e003      	b.n	8009896 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800988e:	2103      	movs	r1, #3
 8009890:	6878      	ldr	r0, [r7, #4]
 8009892:	f000 f95b 	bl	8009b4c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009896:	2110      	movs	r1, #16
 8009898:	6878      	ldr	r0, [r7, #4]
 800989a:	f000 f8f3 	bl	8009a84 <USB_FlushTxFifo>
 800989e:	4603      	mov	r3, r0
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d001      	beq.n	80098a8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80098a4:	2301      	movs	r3, #1
 80098a6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80098a8:	6878      	ldr	r0, [r7, #4]
 80098aa:	f000 f91f 	bl	8009aec <USB_FlushRxFifo>
 80098ae:	4603      	mov	r3, r0
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d001      	beq.n	80098b8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80098b4:	2301      	movs	r3, #1
 80098b6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098be:	461a      	mov	r2, r3
 80098c0:	2300      	movs	r3, #0
 80098c2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098ca:	461a      	mov	r2, r3
 80098cc:	2300      	movs	r3, #0
 80098ce:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098d6:	461a      	mov	r2, r3
 80098d8:	2300      	movs	r3, #0
 80098da:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80098dc:	2300      	movs	r3, #0
 80098de:	613b      	str	r3, [r7, #16]
 80098e0:	e043      	b.n	800996a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80098e2:	693b      	ldr	r3, [r7, #16]
 80098e4:	015a      	lsls	r2, r3, #5
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	4413      	add	r3, r2
 80098ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80098f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80098f8:	d118      	bne.n	800992c <USB_DevInit+0x164>
    {
      if (i == 0U)
 80098fa:	693b      	ldr	r3, [r7, #16]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d10a      	bne.n	8009916 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009900:	693b      	ldr	r3, [r7, #16]
 8009902:	015a      	lsls	r2, r3, #5
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	4413      	add	r3, r2
 8009908:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800990c:	461a      	mov	r2, r3
 800990e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009912:	6013      	str	r3, [r2, #0]
 8009914:	e013      	b.n	800993e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009916:	693b      	ldr	r3, [r7, #16]
 8009918:	015a      	lsls	r2, r3, #5
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	4413      	add	r3, r2
 800991e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009922:	461a      	mov	r2, r3
 8009924:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009928:	6013      	str	r3, [r2, #0]
 800992a:	e008      	b.n	800993e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800992c:	693b      	ldr	r3, [r7, #16]
 800992e:	015a      	lsls	r2, r3, #5
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	4413      	add	r3, r2
 8009934:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009938:	461a      	mov	r2, r3
 800993a:	2300      	movs	r3, #0
 800993c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800993e:	693b      	ldr	r3, [r7, #16]
 8009940:	015a      	lsls	r2, r3, #5
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	4413      	add	r3, r2
 8009946:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800994a:	461a      	mov	r2, r3
 800994c:	2300      	movs	r3, #0
 800994e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009950:	693b      	ldr	r3, [r7, #16]
 8009952:	015a      	lsls	r2, r3, #5
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	4413      	add	r3, r2
 8009958:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800995c:	461a      	mov	r2, r3
 800995e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009962:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009964:	693b      	ldr	r3, [r7, #16]
 8009966:	3301      	adds	r3, #1
 8009968:	613b      	str	r3, [r7, #16]
 800996a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800996c:	693a      	ldr	r2, [r7, #16]
 800996e:	429a      	cmp	r2, r3
 8009970:	d3b7      	bcc.n	80098e2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009972:	2300      	movs	r3, #0
 8009974:	613b      	str	r3, [r7, #16]
 8009976:	e043      	b.n	8009a00 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009978:	693b      	ldr	r3, [r7, #16]
 800997a:	015a      	lsls	r2, r3, #5
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	4413      	add	r3, r2
 8009980:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800998a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800998e:	d118      	bne.n	80099c2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8009990:	693b      	ldr	r3, [r7, #16]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d10a      	bne.n	80099ac <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009996:	693b      	ldr	r3, [r7, #16]
 8009998:	015a      	lsls	r2, r3, #5
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	4413      	add	r3, r2
 800999e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099a2:	461a      	mov	r2, r3
 80099a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80099a8:	6013      	str	r3, [r2, #0]
 80099aa:	e013      	b.n	80099d4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80099ac:	693b      	ldr	r3, [r7, #16]
 80099ae:	015a      	lsls	r2, r3, #5
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	4413      	add	r3, r2
 80099b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099b8:	461a      	mov	r2, r3
 80099ba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80099be:	6013      	str	r3, [r2, #0]
 80099c0:	e008      	b.n	80099d4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80099c2:	693b      	ldr	r3, [r7, #16]
 80099c4:	015a      	lsls	r2, r3, #5
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	4413      	add	r3, r2
 80099ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099ce:	461a      	mov	r2, r3
 80099d0:	2300      	movs	r3, #0
 80099d2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80099d4:	693b      	ldr	r3, [r7, #16]
 80099d6:	015a      	lsls	r2, r3, #5
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	4413      	add	r3, r2
 80099dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099e0:	461a      	mov	r2, r3
 80099e2:	2300      	movs	r3, #0
 80099e4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80099e6:	693b      	ldr	r3, [r7, #16]
 80099e8:	015a      	lsls	r2, r3, #5
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	4413      	add	r3, r2
 80099ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099f2:	461a      	mov	r2, r3
 80099f4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80099f8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80099fa:	693b      	ldr	r3, [r7, #16]
 80099fc:	3301      	adds	r3, #1
 80099fe:	613b      	str	r3, [r7, #16]
 8009a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a02:	693a      	ldr	r2, [r7, #16]
 8009a04:	429a      	cmp	r2, r3
 8009a06:	d3b7      	bcc.n	8009978 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a0e:	691b      	ldr	r3, [r3, #16]
 8009a10:	68fa      	ldr	r2, [r7, #12]
 8009a12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009a16:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009a1a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2200      	movs	r2, #0
 8009a20:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009a28:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d105      	bne.n	8009a3c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	699b      	ldr	r3, [r3, #24]
 8009a34:	f043 0210 	orr.w	r2, r3, #16
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	699a      	ldr	r2, [r3, #24]
 8009a40:	4b0e      	ldr	r3, [pc, #56]	; (8009a7c <USB_DevInit+0x2b4>)
 8009a42:	4313      	orrs	r3, r2
 8009a44:	687a      	ldr	r2, [r7, #4]
 8009a46:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009a48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d005      	beq.n	8009a5a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	699b      	ldr	r3, [r3, #24]
 8009a52:	f043 0208 	orr.w	r2, r3, #8
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009a5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a5c:	2b01      	cmp	r3, #1
 8009a5e:	d105      	bne.n	8009a6c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	699a      	ldr	r2, [r3, #24]
 8009a64:	4b06      	ldr	r3, [pc, #24]	; (8009a80 <USB_DevInit+0x2b8>)
 8009a66:	4313      	orrs	r3, r2
 8009a68:	687a      	ldr	r2, [r7, #4]
 8009a6a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009a6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a6e:	4618      	mov	r0, r3
 8009a70:	3718      	adds	r7, #24
 8009a72:	46bd      	mov	sp, r7
 8009a74:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009a78:	b004      	add	sp, #16
 8009a7a:	4770      	bx	lr
 8009a7c:	803c3800 	.word	0x803c3800
 8009a80:	40000004 	.word	0x40000004

08009a84 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009a84:	b480      	push	{r7}
 8009a86:	b085      	sub	sp, #20
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
 8009a8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009a8e:	2300      	movs	r3, #0
 8009a90:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	3301      	adds	r3, #1
 8009a96:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	4a13      	ldr	r2, [pc, #76]	; (8009ae8 <USB_FlushTxFifo+0x64>)
 8009a9c:	4293      	cmp	r3, r2
 8009a9e:	d901      	bls.n	8009aa4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009aa0:	2303      	movs	r3, #3
 8009aa2:	e01b      	b.n	8009adc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	691b      	ldr	r3, [r3, #16]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	daf2      	bge.n	8009a92 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009aac:	2300      	movs	r3, #0
 8009aae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	019b      	lsls	r3, r3, #6
 8009ab4:	f043 0220 	orr.w	r2, r3, #32
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	3301      	adds	r3, #1
 8009ac0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	4a08      	ldr	r2, [pc, #32]	; (8009ae8 <USB_FlushTxFifo+0x64>)
 8009ac6:	4293      	cmp	r3, r2
 8009ac8:	d901      	bls.n	8009ace <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009aca:	2303      	movs	r3, #3
 8009acc:	e006      	b.n	8009adc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	691b      	ldr	r3, [r3, #16]
 8009ad2:	f003 0320 	and.w	r3, r3, #32
 8009ad6:	2b20      	cmp	r3, #32
 8009ad8:	d0f0      	beq.n	8009abc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009ada:	2300      	movs	r3, #0
}
 8009adc:	4618      	mov	r0, r3
 8009ade:	3714      	adds	r7, #20
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae6:	4770      	bx	lr
 8009ae8:	00030d40 	.word	0x00030d40

08009aec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009aec:	b480      	push	{r7}
 8009aee:	b085      	sub	sp, #20
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009af4:	2300      	movs	r3, #0
 8009af6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	3301      	adds	r3, #1
 8009afc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	4a11      	ldr	r2, [pc, #68]	; (8009b48 <USB_FlushRxFifo+0x5c>)
 8009b02:	4293      	cmp	r3, r2
 8009b04:	d901      	bls.n	8009b0a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009b06:	2303      	movs	r3, #3
 8009b08:	e018      	b.n	8009b3c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	691b      	ldr	r3, [r3, #16]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	daf2      	bge.n	8009af8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009b12:	2300      	movs	r3, #0
 8009b14:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2210      	movs	r2, #16
 8009b1a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	3301      	adds	r3, #1
 8009b20:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	4a08      	ldr	r2, [pc, #32]	; (8009b48 <USB_FlushRxFifo+0x5c>)
 8009b26:	4293      	cmp	r3, r2
 8009b28:	d901      	bls.n	8009b2e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009b2a:	2303      	movs	r3, #3
 8009b2c:	e006      	b.n	8009b3c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	691b      	ldr	r3, [r3, #16]
 8009b32:	f003 0310 	and.w	r3, r3, #16
 8009b36:	2b10      	cmp	r3, #16
 8009b38:	d0f0      	beq.n	8009b1c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009b3a:	2300      	movs	r3, #0
}
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	3714      	adds	r7, #20
 8009b40:	46bd      	mov	sp, r7
 8009b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b46:	4770      	bx	lr
 8009b48:	00030d40 	.word	0x00030d40

08009b4c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009b4c:	b480      	push	{r7}
 8009b4e:	b085      	sub	sp, #20
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
 8009b54:	460b      	mov	r3, r1
 8009b56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b62:	681a      	ldr	r2, [r3, #0]
 8009b64:	78fb      	ldrb	r3, [r7, #3]
 8009b66:	68f9      	ldr	r1, [r7, #12]
 8009b68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009b6c:	4313      	orrs	r3, r2
 8009b6e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009b70:	2300      	movs	r3, #0
}
 8009b72:	4618      	mov	r0, r3
 8009b74:	3714      	adds	r7, #20
 8009b76:	46bd      	mov	sp, r7
 8009b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7c:	4770      	bx	lr

08009b7e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009b7e:	b480      	push	{r7}
 8009b80:	b085      	sub	sp, #20
 8009b82:	af00      	add	r7, sp, #0
 8009b84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	68fa      	ldr	r2, [r7, #12]
 8009b94:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009b98:	f023 0303 	bic.w	r3, r3, #3
 8009b9c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ba4:	685b      	ldr	r3, [r3, #4]
 8009ba6:	68fa      	ldr	r2, [r7, #12]
 8009ba8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009bac:	f043 0302 	orr.w	r3, r3, #2
 8009bb0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009bb2:	2300      	movs	r3, #0
}
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	3714      	adds	r7, #20
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bbe:	4770      	bx	lr

08009bc0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009bc0:	b480      	push	{r7}
 8009bc2:	b083      	sub	sp, #12
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	695b      	ldr	r3, [r3, #20]
 8009bcc:	f003 0301 	and.w	r3, r3, #1
}
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	370c      	adds	r7, #12
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bda:	4770      	bx	lr

08009bdc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009bdc:	b480      	push	{r7}
 8009bde:	b085      	sub	sp, #20
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009be4:	2300      	movs	r3, #0
 8009be6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	3301      	adds	r3, #1
 8009bec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	4a13      	ldr	r2, [pc, #76]	; (8009c40 <USB_CoreReset+0x64>)
 8009bf2:	4293      	cmp	r3, r2
 8009bf4:	d901      	bls.n	8009bfa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009bf6:	2303      	movs	r3, #3
 8009bf8:	e01b      	b.n	8009c32 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	691b      	ldr	r3, [r3, #16]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	daf2      	bge.n	8009be8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009c02:	2300      	movs	r3, #0
 8009c04:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	691b      	ldr	r3, [r3, #16]
 8009c0a:	f043 0201 	orr.w	r2, r3, #1
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	3301      	adds	r3, #1
 8009c16:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	4a09      	ldr	r2, [pc, #36]	; (8009c40 <USB_CoreReset+0x64>)
 8009c1c:	4293      	cmp	r3, r2
 8009c1e:	d901      	bls.n	8009c24 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009c20:	2303      	movs	r3, #3
 8009c22:	e006      	b.n	8009c32 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	691b      	ldr	r3, [r3, #16]
 8009c28:	f003 0301 	and.w	r3, r3, #1
 8009c2c:	2b01      	cmp	r3, #1
 8009c2e:	d0f0      	beq.n	8009c12 <USB_CoreReset+0x36>

  return HAL_OK;
 8009c30:	2300      	movs	r3, #0
}
 8009c32:	4618      	mov	r0, r3
 8009c34:	3714      	adds	r7, #20
 8009c36:	46bd      	mov	sp, r7
 8009c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3c:	4770      	bx	lr
 8009c3e:	bf00      	nop
 8009c40:	00030d40 	.word	0x00030d40

08009c44 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009c44:	b480      	push	{r7}
 8009c46:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8009c48:	bf00      	nop
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c50:	4770      	bx	lr
	...

08009c54 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009c54:	b480      	push	{r7}
 8009c56:	b085      	sub	sp, #20
 8009c58:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c5a:	f3ef 8305 	mrs	r3, IPSR
 8009c5e:	60bb      	str	r3, [r7, #8]
  return(result);
 8009c60:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d10f      	bne.n	8009c86 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c66:	f3ef 8310 	mrs	r3, PRIMASK
 8009c6a:	607b      	str	r3, [r7, #4]
  return(result);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d105      	bne.n	8009c7e <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009c72:	f3ef 8311 	mrs	r3, BASEPRI
 8009c76:	603b      	str	r3, [r7, #0]
  return(result);
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d007      	beq.n	8009c8e <osKernelInitialize+0x3a>
 8009c7e:	4b0e      	ldr	r3, [pc, #56]	; (8009cb8 <osKernelInitialize+0x64>)
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	2b02      	cmp	r3, #2
 8009c84:	d103      	bne.n	8009c8e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8009c86:	f06f 0305 	mvn.w	r3, #5
 8009c8a:	60fb      	str	r3, [r7, #12]
 8009c8c:	e00c      	b.n	8009ca8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009c8e:	4b0a      	ldr	r3, [pc, #40]	; (8009cb8 <osKernelInitialize+0x64>)
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d105      	bne.n	8009ca2 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009c96:	4b08      	ldr	r3, [pc, #32]	; (8009cb8 <osKernelInitialize+0x64>)
 8009c98:	2201      	movs	r2, #1
 8009c9a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	60fb      	str	r3, [r7, #12]
 8009ca0:	e002      	b.n	8009ca8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8009ca2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009ca6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009ca8:	68fb      	ldr	r3, [r7, #12]
}
 8009caa:	4618      	mov	r0, r3
 8009cac:	3714      	adds	r7, #20
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb4:	4770      	bx	lr
 8009cb6:	bf00      	nop
 8009cb8:	200071d0 	.word	0x200071d0

08009cbc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b084      	sub	sp, #16
 8009cc0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009cc2:	f3ef 8305 	mrs	r3, IPSR
 8009cc6:	60bb      	str	r3, [r7, #8]
  return(result);
 8009cc8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d10f      	bne.n	8009cee <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009cce:	f3ef 8310 	mrs	r3, PRIMASK
 8009cd2:	607b      	str	r3, [r7, #4]
  return(result);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d105      	bne.n	8009ce6 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009cda:	f3ef 8311 	mrs	r3, BASEPRI
 8009cde:	603b      	str	r3, [r7, #0]
  return(result);
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d007      	beq.n	8009cf6 <osKernelStart+0x3a>
 8009ce6:	4b0f      	ldr	r3, [pc, #60]	; (8009d24 <osKernelStart+0x68>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	2b02      	cmp	r3, #2
 8009cec:	d103      	bne.n	8009cf6 <osKernelStart+0x3a>
    stat = osErrorISR;
 8009cee:	f06f 0305 	mvn.w	r3, #5
 8009cf2:	60fb      	str	r3, [r7, #12]
 8009cf4:	e010      	b.n	8009d18 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009cf6:	4b0b      	ldr	r3, [pc, #44]	; (8009d24 <osKernelStart+0x68>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	2b01      	cmp	r3, #1
 8009cfc:	d109      	bne.n	8009d12 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009cfe:	f7ff ffa1 	bl	8009c44 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009d02:	4b08      	ldr	r3, [pc, #32]	; (8009d24 <osKernelStart+0x68>)
 8009d04:	2202      	movs	r2, #2
 8009d06:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009d08:	f001 f8ca 	bl	800aea0 <vTaskStartScheduler>
      stat = osOK;
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	60fb      	str	r3, [r7, #12]
 8009d10:	e002      	b.n	8009d18 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8009d12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009d16:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009d18:	68fb      	ldr	r3, [r7, #12]
}
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	3710      	adds	r7, #16
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bd80      	pop	{r7, pc}
 8009d22:	bf00      	nop
 8009d24:	200071d0 	.word	0x200071d0

08009d28 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b090      	sub	sp, #64	; 0x40
 8009d2c:	af04      	add	r7, sp, #16
 8009d2e:	60f8      	str	r0, [r7, #12]
 8009d30:	60b9      	str	r1, [r7, #8]
 8009d32:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009d34:	2300      	movs	r3, #0
 8009d36:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d38:	f3ef 8305 	mrs	r3, IPSR
 8009d3c:	61fb      	str	r3, [r7, #28]
  return(result);
 8009d3e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	f040 808f 	bne.w	8009e64 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009d46:	f3ef 8310 	mrs	r3, PRIMASK
 8009d4a:	61bb      	str	r3, [r7, #24]
  return(result);
 8009d4c:	69bb      	ldr	r3, [r7, #24]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d105      	bne.n	8009d5e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009d52:	f3ef 8311 	mrs	r3, BASEPRI
 8009d56:	617b      	str	r3, [r7, #20]
  return(result);
 8009d58:	697b      	ldr	r3, [r7, #20]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d003      	beq.n	8009d66 <osThreadNew+0x3e>
 8009d5e:	4b44      	ldr	r3, [pc, #272]	; (8009e70 <osThreadNew+0x148>)
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	2b02      	cmp	r3, #2
 8009d64:	d07e      	beq.n	8009e64 <osThreadNew+0x13c>
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d07b      	beq.n	8009e64 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8009d6c:	2380      	movs	r3, #128	; 0x80
 8009d6e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8009d70:	2318      	movs	r3, #24
 8009d72:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8009d74:	2300      	movs	r3, #0
 8009d76:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8009d78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009d7c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d045      	beq.n	8009e10 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d002      	beq.n	8009d92 <osThreadNew+0x6a>
        name = attr->name;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	699b      	ldr	r3, [r3, #24]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d002      	beq.n	8009da0 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	699b      	ldr	r3, [r3, #24]
 8009d9e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d008      	beq.n	8009db8 <osThreadNew+0x90>
 8009da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009da8:	2b38      	cmp	r3, #56	; 0x38
 8009daa:	d805      	bhi.n	8009db8 <osThreadNew+0x90>
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	685b      	ldr	r3, [r3, #4]
 8009db0:	f003 0301 	and.w	r3, r3, #1
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d001      	beq.n	8009dbc <osThreadNew+0x94>
        return (NULL);
 8009db8:	2300      	movs	r3, #0
 8009dba:	e054      	b.n	8009e66 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	695b      	ldr	r3, [r3, #20]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d003      	beq.n	8009dcc <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	695b      	ldr	r3, [r3, #20]
 8009dc8:	089b      	lsrs	r3, r3, #2
 8009dca:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	689b      	ldr	r3, [r3, #8]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d00e      	beq.n	8009df2 <osThreadNew+0xca>
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	68db      	ldr	r3, [r3, #12]
 8009dd8:	2ba7      	cmp	r3, #167	; 0xa7
 8009dda:	d90a      	bls.n	8009df2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d006      	beq.n	8009df2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	695b      	ldr	r3, [r3, #20]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d002      	beq.n	8009df2 <osThreadNew+0xca>
        mem = 1;
 8009dec:	2301      	movs	r3, #1
 8009dee:	623b      	str	r3, [r7, #32]
 8009df0:	e010      	b.n	8009e14 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	689b      	ldr	r3, [r3, #8]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d10c      	bne.n	8009e14 <osThreadNew+0xec>
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	68db      	ldr	r3, [r3, #12]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d108      	bne.n	8009e14 <osThreadNew+0xec>
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	691b      	ldr	r3, [r3, #16]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d104      	bne.n	8009e14 <osThreadNew+0xec>
          mem = 0;
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	623b      	str	r3, [r7, #32]
 8009e0e:	e001      	b.n	8009e14 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8009e10:	2300      	movs	r3, #0
 8009e12:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8009e14:	6a3b      	ldr	r3, [r7, #32]
 8009e16:	2b01      	cmp	r3, #1
 8009e18:	d110      	bne.n	8009e3c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8009e1e:	687a      	ldr	r2, [r7, #4]
 8009e20:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009e22:	9202      	str	r2, [sp, #8]
 8009e24:	9301      	str	r3, [sp, #4]
 8009e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e28:	9300      	str	r3, [sp, #0]
 8009e2a:	68bb      	ldr	r3, [r7, #8]
 8009e2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009e30:	68f8      	ldr	r0, [r7, #12]
 8009e32:	f000 fe3f 	bl	800aab4 <xTaskCreateStatic>
 8009e36:	4603      	mov	r3, r0
 8009e38:	613b      	str	r3, [r7, #16]
 8009e3a:	e013      	b.n	8009e64 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8009e3c:	6a3b      	ldr	r3, [r7, #32]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d110      	bne.n	8009e64 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e44:	b29a      	uxth	r2, r3
 8009e46:	f107 0310 	add.w	r3, r7, #16
 8009e4a:	9301      	str	r3, [sp, #4]
 8009e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e4e:	9300      	str	r3, [sp, #0]
 8009e50:	68bb      	ldr	r3, [r7, #8]
 8009e52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009e54:	68f8      	ldr	r0, [r7, #12]
 8009e56:	f000 fe90 	bl	800ab7a <xTaskCreate>
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	2b01      	cmp	r3, #1
 8009e5e:	d001      	beq.n	8009e64 <osThreadNew+0x13c>
          hTask = NULL;
 8009e60:	2300      	movs	r3, #0
 8009e62:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009e64:	693b      	ldr	r3, [r7, #16]
}
 8009e66:	4618      	mov	r0, r3
 8009e68:	3730      	adds	r7, #48	; 0x30
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd80      	pop	{r7, pc}
 8009e6e:	bf00      	nop
 8009e70:	200071d0 	.word	0x200071d0

08009e74 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b086      	sub	sp, #24
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e7c:	f3ef 8305 	mrs	r3, IPSR
 8009e80:	613b      	str	r3, [r7, #16]
  return(result);
 8009e82:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d10f      	bne.n	8009ea8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009e88:	f3ef 8310 	mrs	r3, PRIMASK
 8009e8c:	60fb      	str	r3, [r7, #12]
  return(result);
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d105      	bne.n	8009ea0 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009e94:	f3ef 8311 	mrs	r3, BASEPRI
 8009e98:	60bb      	str	r3, [r7, #8]
  return(result);
 8009e9a:	68bb      	ldr	r3, [r7, #8]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d007      	beq.n	8009eb0 <osDelay+0x3c>
 8009ea0:	4b0a      	ldr	r3, [pc, #40]	; (8009ecc <osDelay+0x58>)
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	2b02      	cmp	r3, #2
 8009ea6:	d103      	bne.n	8009eb0 <osDelay+0x3c>
    stat = osErrorISR;
 8009ea8:	f06f 0305 	mvn.w	r3, #5
 8009eac:	617b      	str	r3, [r7, #20]
 8009eae:	e007      	b.n	8009ec0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d002      	beq.n	8009ec0 <osDelay+0x4c>
      vTaskDelay(ticks);
 8009eba:	6878      	ldr	r0, [r7, #4]
 8009ebc:	f000 ffba 	bl	800ae34 <vTaskDelay>
    }
  }

  return (stat);
 8009ec0:	697b      	ldr	r3, [r7, #20]
}
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	3718      	adds	r7, #24
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}
 8009eca:	bf00      	nop
 8009ecc:	200071d0 	.word	0x200071d0

08009ed0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009ed0:	b480      	push	{r7}
 8009ed2:	b085      	sub	sp, #20
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	60f8      	str	r0, [r7, #12]
 8009ed8:	60b9      	str	r1, [r7, #8]
 8009eda:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	4a07      	ldr	r2, [pc, #28]	; (8009efc <vApplicationGetIdleTaskMemory+0x2c>)
 8009ee0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009ee2:	68bb      	ldr	r3, [r7, #8]
 8009ee4:	4a06      	ldr	r2, [pc, #24]	; (8009f00 <vApplicationGetIdleTaskMemory+0x30>)
 8009ee6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2280      	movs	r2, #128	; 0x80
 8009eec:	601a      	str	r2, [r3, #0]
}
 8009eee:	bf00      	nop
 8009ef0:	3714      	adds	r7, #20
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef8:	4770      	bx	lr
 8009efa:	bf00      	nop
 8009efc:	200071d4 	.word	0x200071d4
 8009f00:	2000727c 	.word	0x2000727c

08009f04 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009f04:	b480      	push	{r7}
 8009f06:	b085      	sub	sp, #20
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	60f8      	str	r0, [r7, #12]
 8009f0c:	60b9      	str	r1, [r7, #8]
 8009f0e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	4a07      	ldr	r2, [pc, #28]	; (8009f30 <vApplicationGetTimerTaskMemory+0x2c>)
 8009f14:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009f16:	68bb      	ldr	r3, [r7, #8]
 8009f18:	4a06      	ldr	r2, [pc, #24]	; (8009f34 <vApplicationGetTimerTaskMemory+0x30>)
 8009f1a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009f22:	601a      	str	r2, [r3, #0]
}
 8009f24:	bf00      	nop
 8009f26:	3714      	adds	r7, #20
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2e:	4770      	bx	lr
 8009f30:	2000747c 	.word	0x2000747c
 8009f34:	20007524 	.word	0x20007524

08009f38 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009f38:	b480      	push	{r7}
 8009f3a:	b083      	sub	sp, #12
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	f103 0208 	add.w	r2, r3, #8
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009f50:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	f103 0208 	add.w	r2, r3, #8
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	f103 0208 	add.w	r2, r3, #8
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	2200      	movs	r2, #0
 8009f6a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009f6c:	bf00      	nop
 8009f6e:	370c      	adds	r7, #12
 8009f70:	46bd      	mov	sp, r7
 8009f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f76:	4770      	bx	lr

08009f78 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009f78:	b480      	push	{r7}
 8009f7a:	b083      	sub	sp, #12
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2200      	movs	r2, #0
 8009f84:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009f86:	bf00      	nop
 8009f88:	370c      	adds	r7, #12
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f90:	4770      	bx	lr

08009f92 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009f92:	b480      	push	{r7}
 8009f94:	b085      	sub	sp, #20
 8009f96:	af00      	add	r7, sp, #0
 8009f98:	6078      	str	r0, [r7, #4]
 8009f9a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	685b      	ldr	r3, [r3, #4]
 8009fa0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	68fa      	ldr	r2, [r7, #12]
 8009fa6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	689a      	ldr	r2, [r3, #8]
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	689b      	ldr	r3, [r3, #8]
 8009fb4:	683a      	ldr	r2, [r7, #0]
 8009fb6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	683a      	ldr	r2, [r7, #0]
 8009fbc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	687a      	ldr	r2, [r7, #4]
 8009fc2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	1c5a      	adds	r2, r3, #1
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	601a      	str	r2, [r3, #0]
}
 8009fce:	bf00      	nop
 8009fd0:	3714      	adds	r7, #20
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd8:	4770      	bx	lr

08009fda <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009fda:	b480      	push	{r7}
 8009fdc:	b085      	sub	sp, #20
 8009fde:	af00      	add	r7, sp, #0
 8009fe0:	6078      	str	r0, [r7, #4]
 8009fe2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009fea:	68bb      	ldr	r3, [r7, #8]
 8009fec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009ff0:	d103      	bne.n	8009ffa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	691b      	ldr	r3, [r3, #16]
 8009ff6:	60fb      	str	r3, [r7, #12]
 8009ff8:	e00c      	b.n	800a014 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	3308      	adds	r3, #8
 8009ffe:	60fb      	str	r3, [r7, #12]
 800a000:	e002      	b.n	800a008 <vListInsert+0x2e>
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	685b      	ldr	r3, [r3, #4]
 800a006:	60fb      	str	r3, [r7, #12]
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	685b      	ldr	r3, [r3, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	68ba      	ldr	r2, [r7, #8]
 800a010:	429a      	cmp	r2, r3
 800a012:	d2f6      	bcs.n	800a002 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	685a      	ldr	r2, [r3, #4]
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	685b      	ldr	r3, [r3, #4]
 800a020:	683a      	ldr	r2, [r7, #0]
 800a022:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	68fa      	ldr	r2, [r7, #12]
 800a028:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	683a      	ldr	r2, [r7, #0]
 800a02e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	687a      	ldr	r2, [r7, #4]
 800a034:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	1c5a      	adds	r2, r3, #1
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	601a      	str	r2, [r3, #0]
}
 800a040:	bf00      	nop
 800a042:	3714      	adds	r7, #20
 800a044:	46bd      	mov	sp, r7
 800a046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04a:	4770      	bx	lr

0800a04c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a04c:	b480      	push	{r7}
 800a04e:	b085      	sub	sp, #20
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	691b      	ldr	r3, [r3, #16]
 800a058:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	685b      	ldr	r3, [r3, #4]
 800a05e:	687a      	ldr	r2, [r7, #4]
 800a060:	6892      	ldr	r2, [r2, #8]
 800a062:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	689b      	ldr	r3, [r3, #8]
 800a068:	687a      	ldr	r2, [r7, #4]
 800a06a:	6852      	ldr	r2, [r2, #4]
 800a06c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	685b      	ldr	r3, [r3, #4]
 800a072:	687a      	ldr	r2, [r7, #4]
 800a074:	429a      	cmp	r2, r3
 800a076:	d103      	bne.n	800a080 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	689a      	ldr	r2, [r3, #8]
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2200      	movs	r2, #0
 800a084:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	1e5a      	subs	r2, r3, #1
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	681b      	ldr	r3, [r3, #0]
}
 800a094:	4618      	mov	r0, r3
 800a096:	3714      	adds	r7, #20
 800a098:	46bd      	mov	sp, r7
 800a09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09e:	4770      	bx	lr

0800a0a0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b084      	sub	sp, #16
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
 800a0a8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d10c      	bne.n	800a0ce <xQueueGenericReset+0x2e>
	__asm volatile
 800a0b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0b8:	b672      	cpsid	i
 800a0ba:	f383 8811 	msr	BASEPRI, r3
 800a0be:	f3bf 8f6f 	isb	sy
 800a0c2:	f3bf 8f4f 	dsb	sy
 800a0c6:	b662      	cpsie	i
 800a0c8:	60bb      	str	r3, [r7, #8]
}
 800a0ca:	bf00      	nop
 800a0cc:	e7fe      	b.n	800a0cc <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800a0ce:	f002 f8cd 	bl	800c26c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	681a      	ldr	r2, [r3, #0]
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0da:	68f9      	ldr	r1, [r7, #12]
 800a0dc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a0de:	fb01 f303 	mul.w	r3, r1, r3
 800a0e2:	441a      	add	r2, r3
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	681a      	ldr	r2, [r3, #0]
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	681a      	ldr	r2, [r3, #0]
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0fe:	3b01      	subs	r3, #1
 800a100:	68f9      	ldr	r1, [r7, #12]
 800a102:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a104:	fb01 f303 	mul.w	r3, r1, r3
 800a108:	441a      	add	r2, r3
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	22ff      	movs	r2, #255	; 0xff
 800a112:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	22ff      	movs	r2, #255	; 0xff
 800a11a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d114      	bne.n	800a14e <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	691b      	ldr	r3, [r3, #16]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d01a      	beq.n	800a162 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	3310      	adds	r3, #16
 800a130:	4618      	mov	r0, r3
 800a132:	f001 f95d 	bl	800b3f0 <xTaskRemoveFromEventList>
 800a136:	4603      	mov	r3, r0
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d012      	beq.n	800a162 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a13c:	4b0c      	ldr	r3, [pc, #48]	; (800a170 <xQueueGenericReset+0xd0>)
 800a13e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a142:	601a      	str	r2, [r3, #0]
 800a144:	f3bf 8f4f 	dsb	sy
 800a148:	f3bf 8f6f 	isb	sy
 800a14c:	e009      	b.n	800a162 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	3310      	adds	r3, #16
 800a152:	4618      	mov	r0, r3
 800a154:	f7ff fef0 	bl	8009f38 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	3324      	adds	r3, #36	; 0x24
 800a15c:	4618      	mov	r0, r3
 800a15e:	f7ff feeb 	bl	8009f38 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a162:	f002 f8b7 	bl	800c2d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a166:	2301      	movs	r3, #1
}
 800a168:	4618      	mov	r0, r3
 800a16a:	3710      	adds	r7, #16
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bd80      	pop	{r7, pc}
 800a170:	e000ed04 	.word	0xe000ed04

0800a174 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a174:	b580      	push	{r7, lr}
 800a176:	b08e      	sub	sp, #56	; 0x38
 800a178:	af02      	add	r7, sp, #8
 800a17a:	60f8      	str	r0, [r7, #12]
 800a17c:	60b9      	str	r1, [r7, #8]
 800a17e:	607a      	str	r2, [r7, #4]
 800a180:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d10c      	bne.n	800a1a2 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800a188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a18c:	b672      	cpsid	i
 800a18e:	f383 8811 	msr	BASEPRI, r3
 800a192:	f3bf 8f6f 	isb	sy
 800a196:	f3bf 8f4f 	dsb	sy
 800a19a:	b662      	cpsie	i
 800a19c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a19e:	bf00      	nop
 800a1a0:	e7fe      	b.n	800a1a0 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a1a2:	683b      	ldr	r3, [r7, #0]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d10c      	bne.n	800a1c2 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800a1a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ac:	b672      	cpsid	i
 800a1ae:	f383 8811 	msr	BASEPRI, r3
 800a1b2:	f3bf 8f6f 	isb	sy
 800a1b6:	f3bf 8f4f 	dsb	sy
 800a1ba:	b662      	cpsie	i
 800a1bc:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a1be:	bf00      	nop
 800a1c0:	e7fe      	b.n	800a1c0 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d002      	beq.n	800a1ce <xQueueGenericCreateStatic+0x5a>
 800a1c8:	68bb      	ldr	r3, [r7, #8]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d001      	beq.n	800a1d2 <xQueueGenericCreateStatic+0x5e>
 800a1ce:	2301      	movs	r3, #1
 800a1d0:	e000      	b.n	800a1d4 <xQueueGenericCreateStatic+0x60>
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d10c      	bne.n	800a1f2 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800a1d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1dc:	b672      	cpsid	i
 800a1de:	f383 8811 	msr	BASEPRI, r3
 800a1e2:	f3bf 8f6f 	isb	sy
 800a1e6:	f3bf 8f4f 	dsb	sy
 800a1ea:	b662      	cpsie	i
 800a1ec:	623b      	str	r3, [r7, #32]
}
 800a1ee:	bf00      	nop
 800a1f0:	e7fe      	b.n	800a1f0 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d102      	bne.n	800a1fe <xQueueGenericCreateStatic+0x8a>
 800a1f8:	68bb      	ldr	r3, [r7, #8]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d101      	bne.n	800a202 <xQueueGenericCreateStatic+0x8e>
 800a1fe:	2301      	movs	r3, #1
 800a200:	e000      	b.n	800a204 <xQueueGenericCreateStatic+0x90>
 800a202:	2300      	movs	r3, #0
 800a204:	2b00      	cmp	r3, #0
 800a206:	d10c      	bne.n	800a222 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800a208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a20c:	b672      	cpsid	i
 800a20e:	f383 8811 	msr	BASEPRI, r3
 800a212:	f3bf 8f6f 	isb	sy
 800a216:	f3bf 8f4f 	dsb	sy
 800a21a:	b662      	cpsie	i
 800a21c:	61fb      	str	r3, [r7, #28]
}
 800a21e:	bf00      	nop
 800a220:	e7fe      	b.n	800a220 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a222:	2350      	movs	r3, #80	; 0x50
 800a224:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a226:	697b      	ldr	r3, [r7, #20]
 800a228:	2b50      	cmp	r3, #80	; 0x50
 800a22a:	d00c      	beq.n	800a246 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800a22c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a230:	b672      	cpsid	i
 800a232:	f383 8811 	msr	BASEPRI, r3
 800a236:	f3bf 8f6f 	isb	sy
 800a23a:	f3bf 8f4f 	dsb	sy
 800a23e:	b662      	cpsie	i
 800a240:	61bb      	str	r3, [r7, #24]
}
 800a242:	bf00      	nop
 800a244:	e7fe      	b.n	800a244 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a246:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a24c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d00d      	beq.n	800a26e <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a254:	2201      	movs	r2, #1
 800a256:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a25a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a25e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a260:	9300      	str	r3, [sp, #0]
 800a262:	4613      	mov	r3, r2
 800a264:	687a      	ldr	r2, [r7, #4]
 800a266:	68b9      	ldr	r1, [r7, #8]
 800a268:	68f8      	ldr	r0, [r7, #12]
 800a26a:	f000 f805 	bl	800a278 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a26e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a270:	4618      	mov	r0, r3
 800a272:	3730      	adds	r7, #48	; 0x30
 800a274:	46bd      	mov	sp, r7
 800a276:	bd80      	pop	{r7, pc}

0800a278 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b084      	sub	sp, #16
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	60f8      	str	r0, [r7, #12]
 800a280:	60b9      	str	r1, [r7, #8]
 800a282:	607a      	str	r2, [r7, #4]
 800a284:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a286:	68bb      	ldr	r3, [r7, #8]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d103      	bne.n	800a294 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a28c:	69bb      	ldr	r3, [r7, #24]
 800a28e:	69ba      	ldr	r2, [r7, #24]
 800a290:	601a      	str	r2, [r3, #0]
 800a292:	e002      	b.n	800a29a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a294:	69bb      	ldr	r3, [r7, #24]
 800a296:	687a      	ldr	r2, [r7, #4]
 800a298:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a29a:	69bb      	ldr	r3, [r7, #24]
 800a29c:	68fa      	ldr	r2, [r7, #12]
 800a29e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a2a0:	69bb      	ldr	r3, [r7, #24]
 800a2a2:	68ba      	ldr	r2, [r7, #8]
 800a2a4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a2a6:	2101      	movs	r1, #1
 800a2a8:	69b8      	ldr	r0, [r7, #24]
 800a2aa:	f7ff fef9 	bl	800a0a0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a2ae:	69bb      	ldr	r3, [r7, #24]
 800a2b0:	78fa      	ldrb	r2, [r7, #3]
 800a2b2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a2b6:	bf00      	nop
 800a2b8:	3710      	adds	r7, #16
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}
	...

0800a2c0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b08e      	sub	sp, #56	; 0x38
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	60f8      	str	r0, [r7, #12]
 800a2c8:	60b9      	str	r1, [r7, #8]
 800a2ca:	607a      	str	r2, [r7, #4]
 800a2cc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a2d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d10c      	bne.n	800a2f6 <xQueueGenericSend+0x36>
	__asm volatile
 800a2dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2e0:	b672      	cpsid	i
 800a2e2:	f383 8811 	msr	BASEPRI, r3
 800a2e6:	f3bf 8f6f 	isb	sy
 800a2ea:	f3bf 8f4f 	dsb	sy
 800a2ee:	b662      	cpsie	i
 800a2f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a2f2:	bf00      	nop
 800a2f4:	e7fe      	b.n	800a2f4 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a2f6:	68bb      	ldr	r3, [r7, #8]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d103      	bne.n	800a304 <xQueueGenericSend+0x44>
 800a2fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a300:	2b00      	cmp	r3, #0
 800a302:	d101      	bne.n	800a308 <xQueueGenericSend+0x48>
 800a304:	2301      	movs	r3, #1
 800a306:	e000      	b.n	800a30a <xQueueGenericSend+0x4a>
 800a308:	2300      	movs	r3, #0
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d10c      	bne.n	800a328 <xQueueGenericSend+0x68>
	__asm volatile
 800a30e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a312:	b672      	cpsid	i
 800a314:	f383 8811 	msr	BASEPRI, r3
 800a318:	f3bf 8f6f 	isb	sy
 800a31c:	f3bf 8f4f 	dsb	sy
 800a320:	b662      	cpsie	i
 800a322:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a324:	bf00      	nop
 800a326:	e7fe      	b.n	800a326 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	2b02      	cmp	r3, #2
 800a32c:	d103      	bne.n	800a336 <xQueueGenericSend+0x76>
 800a32e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a332:	2b01      	cmp	r3, #1
 800a334:	d101      	bne.n	800a33a <xQueueGenericSend+0x7a>
 800a336:	2301      	movs	r3, #1
 800a338:	e000      	b.n	800a33c <xQueueGenericSend+0x7c>
 800a33a:	2300      	movs	r3, #0
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d10c      	bne.n	800a35a <xQueueGenericSend+0x9a>
	__asm volatile
 800a340:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a344:	b672      	cpsid	i
 800a346:	f383 8811 	msr	BASEPRI, r3
 800a34a:	f3bf 8f6f 	isb	sy
 800a34e:	f3bf 8f4f 	dsb	sy
 800a352:	b662      	cpsie	i
 800a354:	623b      	str	r3, [r7, #32]
}
 800a356:	bf00      	nop
 800a358:	e7fe      	b.n	800a358 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a35a:	f001 fa3b 	bl	800b7d4 <xTaskGetSchedulerState>
 800a35e:	4603      	mov	r3, r0
 800a360:	2b00      	cmp	r3, #0
 800a362:	d102      	bne.n	800a36a <xQueueGenericSend+0xaa>
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d101      	bne.n	800a36e <xQueueGenericSend+0xae>
 800a36a:	2301      	movs	r3, #1
 800a36c:	e000      	b.n	800a370 <xQueueGenericSend+0xb0>
 800a36e:	2300      	movs	r3, #0
 800a370:	2b00      	cmp	r3, #0
 800a372:	d10c      	bne.n	800a38e <xQueueGenericSend+0xce>
	__asm volatile
 800a374:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a378:	b672      	cpsid	i
 800a37a:	f383 8811 	msr	BASEPRI, r3
 800a37e:	f3bf 8f6f 	isb	sy
 800a382:	f3bf 8f4f 	dsb	sy
 800a386:	b662      	cpsie	i
 800a388:	61fb      	str	r3, [r7, #28]
}
 800a38a:	bf00      	nop
 800a38c:	e7fe      	b.n	800a38c <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a38e:	f001 ff6d 	bl	800c26c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a394:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a39a:	429a      	cmp	r2, r3
 800a39c:	d302      	bcc.n	800a3a4 <xQueueGenericSend+0xe4>
 800a39e:	683b      	ldr	r3, [r7, #0]
 800a3a0:	2b02      	cmp	r3, #2
 800a3a2:	d129      	bne.n	800a3f8 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a3a4:	683a      	ldr	r2, [r7, #0]
 800a3a6:	68b9      	ldr	r1, [r7, #8]
 800a3a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a3aa:	f000 fa15 	bl	800a7d8 <prvCopyDataToQueue>
 800a3ae:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a3b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d010      	beq.n	800a3da <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a3b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ba:	3324      	adds	r3, #36	; 0x24
 800a3bc:	4618      	mov	r0, r3
 800a3be:	f001 f817 	bl	800b3f0 <xTaskRemoveFromEventList>
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d013      	beq.n	800a3f0 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a3c8:	4b3f      	ldr	r3, [pc, #252]	; (800a4c8 <xQueueGenericSend+0x208>)
 800a3ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3ce:	601a      	str	r2, [r3, #0]
 800a3d0:	f3bf 8f4f 	dsb	sy
 800a3d4:	f3bf 8f6f 	isb	sy
 800a3d8:	e00a      	b.n	800a3f0 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a3da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d007      	beq.n	800a3f0 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a3e0:	4b39      	ldr	r3, [pc, #228]	; (800a4c8 <xQueueGenericSend+0x208>)
 800a3e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3e6:	601a      	str	r2, [r3, #0]
 800a3e8:	f3bf 8f4f 	dsb	sy
 800a3ec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a3f0:	f001 ff70 	bl	800c2d4 <vPortExitCritical>
				return pdPASS;
 800a3f4:	2301      	movs	r3, #1
 800a3f6:	e063      	b.n	800a4c0 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d103      	bne.n	800a406 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a3fe:	f001 ff69 	bl	800c2d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a402:	2300      	movs	r3, #0
 800a404:	e05c      	b.n	800a4c0 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d106      	bne.n	800a41a <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a40c:	f107 0314 	add.w	r3, r7, #20
 800a410:	4618      	mov	r0, r3
 800a412:	f001 f87b 	bl	800b50c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a416:	2301      	movs	r3, #1
 800a418:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a41a:	f001 ff5b 	bl	800c2d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a41e:	f000 fdb3 	bl	800af88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a422:	f001 ff23 	bl	800c26c <vPortEnterCritical>
 800a426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a428:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a42c:	b25b      	sxtb	r3, r3
 800a42e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a432:	d103      	bne.n	800a43c <xQueueGenericSend+0x17c>
 800a434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a436:	2200      	movs	r2, #0
 800a438:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a43c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a43e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a442:	b25b      	sxtb	r3, r3
 800a444:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a448:	d103      	bne.n	800a452 <xQueueGenericSend+0x192>
 800a44a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a44c:	2200      	movs	r2, #0
 800a44e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a452:	f001 ff3f 	bl	800c2d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a456:	1d3a      	adds	r2, r7, #4
 800a458:	f107 0314 	add.w	r3, r7, #20
 800a45c:	4611      	mov	r1, r2
 800a45e:	4618      	mov	r0, r3
 800a460:	f001 f86a 	bl	800b538 <xTaskCheckForTimeOut>
 800a464:	4603      	mov	r3, r0
 800a466:	2b00      	cmp	r3, #0
 800a468:	d124      	bne.n	800a4b4 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a46a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a46c:	f000 faac 	bl	800a9c8 <prvIsQueueFull>
 800a470:	4603      	mov	r3, r0
 800a472:	2b00      	cmp	r3, #0
 800a474:	d018      	beq.n	800a4a8 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a478:	3310      	adds	r3, #16
 800a47a:	687a      	ldr	r2, [r7, #4]
 800a47c:	4611      	mov	r1, r2
 800a47e:	4618      	mov	r0, r3
 800a480:	f000 ff62 	bl	800b348 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a484:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a486:	f000 fa37 	bl	800a8f8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a48a:	f000 fd8b 	bl	800afa4 <xTaskResumeAll>
 800a48e:	4603      	mov	r3, r0
 800a490:	2b00      	cmp	r3, #0
 800a492:	f47f af7c 	bne.w	800a38e <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800a496:	4b0c      	ldr	r3, [pc, #48]	; (800a4c8 <xQueueGenericSend+0x208>)
 800a498:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a49c:	601a      	str	r2, [r3, #0]
 800a49e:	f3bf 8f4f 	dsb	sy
 800a4a2:	f3bf 8f6f 	isb	sy
 800a4a6:	e772      	b.n	800a38e <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a4a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a4aa:	f000 fa25 	bl	800a8f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a4ae:	f000 fd79 	bl	800afa4 <xTaskResumeAll>
 800a4b2:	e76c      	b.n	800a38e <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a4b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a4b6:	f000 fa1f 	bl	800a8f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a4ba:	f000 fd73 	bl	800afa4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a4be:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	3738      	adds	r7, #56	; 0x38
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	bd80      	pop	{r7, pc}
 800a4c8:	e000ed04 	.word	0xe000ed04

0800a4cc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b08e      	sub	sp, #56	; 0x38
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	60f8      	str	r0, [r7, #12]
 800a4d4:	60b9      	str	r1, [r7, #8]
 800a4d6:	607a      	str	r2, [r7, #4]
 800a4d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a4de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d10c      	bne.n	800a4fe <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800a4e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4e8:	b672      	cpsid	i
 800a4ea:	f383 8811 	msr	BASEPRI, r3
 800a4ee:	f3bf 8f6f 	isb	sy
 800a4f2:	f3bf 8f4f 	dsb	sy
 800a4f6:	b662      	cpsie	i
 800a4f8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a4fa:	bf00      	nop
 800a4fc:	e7fe      	b.n	800a4fc <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a4fe:	68bb      	ldr	r3, [r7, #8]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d103      	bne.n	800a50c <xQueueGenericSendFromISR+0x40>
 800a504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d101      	bne.n	800a510 <xQueueGenericSendFromISR+0x44>
 800a50c:	2301      	movs	r3, #1
 800a50e:	e000      	b.n	800a512 <xQueueGenericSendFromISR+0x46>
 800a510:	2300      	movs	r3, #0
 800a512:	2b00      	cmp	r3, #0
 800a514:	d10c      	bne.n	800a530 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800a516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a51a:	b672      	cpsid	i
 800a51c:	f383 8811 	msr	BASEPRI, r3
 800a520:	f3bf 8f6f 	isb	sy
 800a524:	f3bf 8f4f 	dsb	sy
 800a528:	b662      	cpsie	i
 800a52a:	623b      	str	r3, [r7, #32]
}
 800a52c:	bf00      	nop
 800a52e:	e7fe      	b.n	800a52e <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	2b02      	cmp	r3, #2
 800a534:	d103      	bne.n	800a53e <xQueueGenericSendFromISR+0x72>
 800a536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a53a:	2b01      	cmp	r3, #1
 800a53c:	d101      	bne.n	800a542 <xQueueGenericSendFromISR+0x76>
 800a53e:	2301      	movs	r3, #1
 800a540:	e000      	b.n	800a544 <xQueueGenericSendFromISR+0x78>
 800a542:	2300      	movs	r3, #0
 800a544:	2b00      	cmp	r3, #0
 800a546:	d10c      	bne.n	800a562 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800a548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a54c:	b672      	cpsid	i
 800a54e:	f383 8811 	msr	BASEPRI, r3
 800a552:	f3bf 8f6f 	isb	sy
 800a556:	f3bf 8f4f 	dsb	sy
 800a55a:	b662      	cpsie	i
 800a55c:	61fb      	str	r3, [r7, #28]
}
 800a55e:	bf00      	nop
 800a560:	e7fe      	b.n	800a560 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a562:	f001 ff6b 	bl	800c43c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a566:	f3ef 8211 	mrs	r2, BASEPRI
 800a56a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a56e:	b672      	cpsid	i
 800a570:	f383 8811 	msr	BASEPRI, r3
 800a574:	f3bf 8f6f 	isb	sy
 800a578:	f3bf 8f4f 	dsb	sy
 800a57c:	b662      	cpsie	i
 800a57e:	61ba      	str	r2, [r7, #24]
 800a580:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a582:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a584:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a588:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a58a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a58c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a58e:	429a      	cmp	r2, r3
 800a590:	d302      	bcc.n	800a598 <xQueueGenericSendFromISR+0xcc>
 800a592:	683b      	ldr	r3, [r7, #0]
 800a594:	2b02      	cmp	r3, #2
 800a596:	d12c      	bne.n	800a5f2 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a59a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a59e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a5a2:	683a      	ldr	r2, [r7, #0]
 800a5a4:	68b9      	ldr	r1, [r7, #8]
 800a5a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a5a8:	f000 f916 	bl	800a7d8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a5ac:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800a5b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a5b4:	d112      	bne.n	800a5dc <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a5b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d016      	beq.n	800a5ec <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a5be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5c0:	3324      	adds	r3, #36	; 0x24
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	f000 ff14 	bl	800b3f0 <xTaskRemoveFromEventList>
 800a5c8:	4603      	mov	r3, r0
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d00e      	beq.n	800a5ec <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d00b      	beq.n	800a5ec <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2201      	movs	r2, #1
 800a5d8:	601a      	str	r2, [r3, #0]
 800a5da:	e007      	b.n	800a5ec <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a5dc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a5e0:	3301      	adds	r3, #1
 800a5e2:	b2db      	uxtb	r3, r3
 800a5e4:	b25a      	sxtb	r2, r3
 800a5e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a5ec:	2301      	movs	r3, #1
 800a5ee:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800a5f0:	e001      	b.n	800a5f6 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	637b      	str	r3, [r7, #52]	; 0x34
 800a5f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5f8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a5fa:	693b      	ldr	r3, [r7, #16]
 800a5fc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a600:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a604:	4618      	mov	r0, r3
 800a606:	3738      	adds	r7, #56	; 0x38
 800a608:	46bd      	mov	sp, r7
 800a60a:	bd80      	pop	{r7, pc}

0800a60c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b08c      	sub	sp, #48	; 0x30
 800a610:	af00      	add	r7, sp, #0
 800a612:	60f8      	str	r0, [r7, #12]
 800a614:	60b9      	str	r1, [r7, #8]
 800a616:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a618:	2300      	movs	r3, #0
 800a61a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a622:	2b00      	cmp	r3, #0
 800a624:	d10c      	bne.n	800a640 <xQueueReceive+0x34>
	__asm volatile
 800a626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a62a:	b672      	cpsid	i
 800a62c:	f383 8811 	msr	BASEPRI, r3
 800a630:	f3bf 8f6f 	isb	sy
 800a634:	f3bf 8f4f 	dsb	sy
 800a638:	b662      	cpsie	i
 800a63a:	623b      	str	r3, [r7, #32]
}
 800a63c:	bf00      	nop
 800a63e:	e7fe      	b.n	800a63e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a640:	68bb      	ldr	r3, [r7, #8]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d103      	bne.n	800a64e <xQueueReceive+0x42>
 800a646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d101      	bne.n	800a652 <xQueueReceive+0x46>
 800a64e:	2301      	movs	r3, #1
 800a650:	e000      	b.n	800a654 <xQueueReceive+0x48>
 800a652:	2300      	movs	r3, #0
 800a654:	2b00      	cmp	r3, #0
 800a656:	d10c      	bne.n	800a672 <xQueueReceive+0x66>
	__asm volatile
 800a658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a65c:	b672      	cpsid	i
 800a65e:	f383 8811 	msr	BASEPRI, r3
 800a662:	f3bf 8f6f 	isb	sy
 800a666:	f3bf 8f4f 	dsb	sy
 800a66a:	b662      	cpsie	i
 800a66c:	61fb      	str	r3, [r7, #28]
}
 800a66e:	bf00      	nop
 800a670:	e7fe      	b.n	800a670 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a672:	f001 f8af 	bl	800b7d4 <xTaskGetSchedulerState>
 800a676:	4603      	mov	r3, r0
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d102      	bne.n	800a682 <xQueueReceive+0x76>
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d101      	bne.n	800a686 <xQueueReceive+0x7a>
 800a682:	2301      	movs	r3, #1
 800a684:	e000      	b.n	800a688 <xQueueReceive+0x7c>
 800a686:	2300      	movs	r3, #0
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d10c      	bne.n	800a6a6 <xQueueReceive+0x9a>
	__asm volatile
 800a68c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a690:	b672      	cpsid	i
 800a692:	f383 8811 	msr	BASEPRI, r3
 800a696:	f3bf 8f6f 	isb	sy
 800a69a:	f3bf 8f4f 	dsb	sy
 800a69e:	b662      	cpsie	i
 800a6a0:	61bb      	str	r3, [r7, #24]
}
 800a6a2:	bf00      	nop
 800a6a4:	e7fe      	b.n	800a6a4 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a6a6:	f001 fde1 	bl	800c26c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a6aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6ae:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a6b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d01f      	beq.n	800a6f6 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a6b6:	68b9      	ldr	r1, [r7, #8]
 800a6b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a6ba:	f000 f8f7 	bl	800a8ac <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a6be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6c0:	1e5a      	subs	r2, r3, #1
 800a6c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6c4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a6c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6c8:	691b      	ldr	r3, [r3, #16]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d00f      	beq.n	800a6ee <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a6ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6d0:	3310      	adds	r3, #16
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	f000 fe8c 	bl	800b3f0 <xTaskRemoveFromEventList>
 800a6d8:	4603      	mov	r3, r0
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d007      	beq.n	800a6ee <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a6de:	4b3d      	ldr	r3, [pc, #244]	; (800a7d4 <xQueueReceive+0x1c8>)
 800a6e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6e4:	601a      	str	r2, [r3, #0]
 800a6e6:	f3bf 8f4f 	dsb	sy
 800a6ea:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a6ee:	f001 fdf1 	bl	800c2d4 <vPortExitCritical>
				return pdPASS;
 800a6f2:	2301      	movs	r3, #1
 800a6f4:	e069      	b.n	800a7ca <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d103      	bne.n	800a704 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a6fc:	f001 fdea 	bl	800c2d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a700:	2300      	movs	r3, #0
 800a702:	e062      	b.n	800a7ca <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a706:	2b00      	cmp	r3, #0
 800a708:	d106      	bne.n	800a718 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a70a:	f107 0310 	add.w	r3, r7, #16
 800a70e:	4618      	mov	r0, r3
 800a710:	f000 fefc 	bl	800b50c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a714:	2301      	movs	r3, #1
 800a716:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a718:	f001 fddc 	bl	800c2d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a71c:	f000 fc34 	bl	800af88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a720:	f001 fda4 	bl	800c26c <vPortEnterCritical>
 800a724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a726:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a72a:	b25b      	sxtb	r3, r3
 800a72c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a730:	d103      	bne.n	800a73a <xQueueReceive+0x12e>
 800a732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a734:	2200      	movs	r2, #0
 800a736:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a73a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a73c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a740:	b25b      	sxtb	r3, r3
 800a742:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a746:	d103      	bne.n	800a750 <xQueueReceive+0x144>
 800a748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a74a:	2200      	movs	r2, #0
 800a74c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a750:	f001 fdc0 	bl	800c2d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a754:	1d3a      	adds	r2, r7, #4
 800a756:	f107 0310 	add.w	r3, r7, #16
 800a75a:	4611      	mov	r1, r2
 800a75c:	4618      	mov	r0, r3
 800a75e:	f000 feeb 	bl	800b538 <xTaskCheckForTimeOut>
 800a762:	4603      	mov	r3, r0
 800a764:	2b00      	cmp	r3, #0
 800a766:	d123      	bne.n	800a7b0 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a768:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a76a:	f000 f917 	bl	800a99c <prvIsQueueEmpty>
 800a76e:	4603      	mov	r3, r0
 800a770:	2b00      	cmp	r3, #0
 800a772:	d017      	beq.n	800a7a4 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a776:	3324      	adds	r3, #36	; 0x24
 800a778:	687a      	ldr	r2, [r7, #4]
 800a77a:	4611      	mov	r1, r2
 800a77c:	4618      	mov	r0, r3
 800a77e:	f000 fde3 	bl	800b348 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a782:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a784:	f000 f8b8 	bl	800a8f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a788:	f000 fc0c 	bl	800afa4 <xTaskResumeAll>
 800a78c:	4603      	mov	r3, r0
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d189      	bne.n	800a6a6 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800a792:	4b10      	ldr	r3, [pc, #64]	; (800a7d4 <xQueueReceive+0x1c8>)
 800a794:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a798:	601a      	str	r2, [r3, #0]
 800a79a:	f3bf 8f4f 	dsb	sy
 800a79e:	f3bf 8f6f 	isb	sy
 800a7a2:	e780      	b.n	800a6a6 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a7a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7a6:	f000 f8a7 	bl	800a8f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a7aa:	f000 fbfb 	bl	800afa4 <xTaskResumeAll>
 800a7ae:	e77a      	b.n	800a6a6 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a7b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7b2:	f000 f8a1 	bl	800a8f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a7b6:	f000 fbf5 	bl	800afa4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a7ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7bc:	f000 f8ee 	bl	800a99c <prvIsQueueEmpty>
 800a7c0:	4603      	mov	r3, r0
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	f43f af6f 	beq.w	800a6a6 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a7c8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	3730      	adds	r7, #48	; 0x30
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bd80      	pop	{r7, pc}
 800a7d2:	bf00      	nop
 800a7d4:	e000ed04 	.word	0xe000ed04

0800a7d8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b086      	sub	sp, #24
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	60f8      	str	r0, [r7, #12]
 800a7e0:	60b9      	str	r1, [r7, #8]
 800a7e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7ec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d10d      	bne.n	800a812 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d14d      	bne.n	800a89a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	689b      	ldr	r3, [r3, #8]
 800a802:	4618      	mov	r0, r3
 800a804:	f001 f804 	bl	800b810 <xTaskPriorityDisinherit>
 800a808:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	2200      	movs	r2, #0
 800a80e:	609a      	str	r2, [r3, #8]
 800a810:	e043      	b.n	800a89a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d119      	bne.n	800a84c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	6858      	ldr	r0, [r3, #4]
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a820:	461a      	mov	r2, r3
 800a822:	68b9      	ldr	r1, [r7, #8]
 800a824:	f013 fae7 	bl	801ddf6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	685a      	ldr	r2, [r3, #4]
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a830:	441a      	add	r2, r3
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	685a      	ldr	r2, [r3, #4]
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	689b      	ldr	r3, [r3, #8]
 800a83e:	429a      	cmp	r2, r3
 800a840:	d32b      	bcc.n	800a89a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	681a      	ldr	r2, [r3, #0]
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	605a      	str	r2, [r3, #4]
 800a84a:	e026      	b.n	800a89a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	68d8      	ldr	r0, [r3, #12]
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a854:	461a      	mov	r2, r3
 800a856:	68b9      	ldr	r1, [r7, #8]
 800a858:	f013 facd 	bl	801ddf6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	68da      	ldr	r2, [r3, #12]
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a864:	425b      	negs	r3, r3
 800a866:	441a      	add	r2, r3
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	68da      	ldr	r2, [r3, #12]
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	429a      	cmp	r2, r3
 800a876:	d207      	bcs.n	800a888 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	689a      	ldr	r2, [r3, #8]
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a880:	425b      	negs	r3, r3
 800a882:	441a      	add	r2, r3
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2b02      	cmp	r3, #2
 800a88c:	d105      	bne.n	800a89a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a88e:	693b      	ldr	r3, [r7, #16]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d002      	beq.n	800a89a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a894:	693b      	ldr	r3, [r7, #16]
 800a896:	3b01      	subs	r3, #1
 800a898:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a89a:	693b      	ldr	r3, [r7, #16]
 800a89c:	1c5a      	adds	r2, r3, #1
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a8a2:	697b      	ldr	r3, [r7, #20]
}
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	3718      	adds	r7, #24
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	bd80      	pop	{r7, pc}

0800a8ac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b082      	sub	sp, #8
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
 800a8b4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d018      	beq.n	800a8f0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	68da      	ldr	r2, [r3, #12]
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8c6:	441a      	add	r2, r3
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	68da      	ldr	r2, [r3, #12]
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	689b      	ldr	r3, [r3, #8]
 800a8d4:	429a      	cmp	r2, r3
 800a8d6:	d303      	bcc.n	800a8e0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681a      	ldr	r2, [r3, #0]
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	68d9      	ldr	r1, [r3, #12]
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8e8:	461a      	mov	r2, r3
 800a8ea:	6838      	ldr	r0, [r7, #0]
 800a8ec:	f013 fa83 	bl	801ddf6 <memcpy>
	}
}
 800a8f0:	bf00      	nop
 800a8f2:	3708      	adds	r7, #8
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	bd80      	pop	{r7, pc}

0800a8f8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b084      	sub	sp, #16
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a900:	f001 fcb4 	bl	800c26c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a90a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a90c:	e011      	b.n	800a932 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a912:	2b00      	cmp	r3, #0
 800a914:	d012      	beq.n	800a93c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	3324      	adds	r3, #36	; 0x24
 800a91a:	4618      	mov	r0, r3
 800a91c:	f000 fd68 	bl	800b3f0 <xTaskRemoveFromEventList>
 800a920:	4603      	mov	r3, r0
 800a922:	2b00      	cmp	r3, #0
 800a924:	d001      	beq.n	800a92a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a926:	f000 fe6d 	bl	800b604 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a92a:	7bfb      	ldrb	r3, [r7, #15]
 800a92c:	3b01      	subs	r3, #1
 800a92e:	b2db      	uxtb	r3, r3
 800a930:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a936:	2b00      	cmp	r3, #0
 800a938:	dce9      	bgt.n	800a90e <prvUnlockQueue+0x16>
 800a93a:	e000      	b.n	800a93e <prvUnlockQueue+0x46>
					break;
 800a93c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	22ff      	movs	r2, #255	; 0xff
 800a942:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a946:	f001 fcc5 	bl	800c2d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a94a:	f001 fc8f 	bl	800c26c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a954:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a956:	e011      	b.n	800a97c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	691b      	ldr	r3, [r3, #16]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d012      	beq.n	800a986 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	3310      	adds	r3, #16
 800a964:	4618      	mov	r0, r3
 800a966:	f000 fd43 	bl	800b3f0 <xTaskRemoveFromEventList>
 800a96a:	4603      	mov	r3, r0
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d001      	beq.n	800a974 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a970:	f000 fe48 	bl	800b604 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a974:	7bbb      	ldrb	r3, [r7, #14]
 800a976:	3b01      	subs	r3, #1
 800a978:	b2db      	uxtb	r3, r3
 800a97a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a97c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a980:	2b00      	cmp	r3, #0
 800a982:	dce9      	bgt.n	800a958 <prvUnlockQueue+0x60>
 800a984:	e000      	b.n	800a988 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a986:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	22ff      	movs	r2, #255	; 0xff
 800a98c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a990:	f001 fca0 	bl	800c2d4 <vPortExitCritical>
}
 800a994:	bf00      	nop
 800a996:	3710      	adds	r7, #16
 800a998:	46bd      	mov	sp, r7
 800a99a:	bd80      	pop	{r7, pc}

0800a99c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b084      	sub	sp, #16
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a9a4:	f001 fc62 	bl	800c26c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d102      	bne.n	800a9b6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a9b0:	2301      	movs	r3, #1
 800a9b2:	60fb      	str	r3, [r7, #12]
 800a9b4:	e001      	b.n	800a9ba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a9ba:	f001 fc8b 	bl	800c2d4 <vPortExitCritical>

	return xReturn;
 800a9be:	68fb      	ldr	r3, [r7, #12]
}
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	3710      	adds	r7, #16
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	bd80      	pop	{r7, pc}

0800a9c8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b084      	sub	sp, #16
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a9d0:	f001 fc4c 	bl	800c26c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9dc:	429a      	cmp	r2, r3
 800a9de:	d102      	bne.n	800a9e6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a9e0:	2301      	movs	r3, #1
 800a9e2:	60fb      	str	r3, [r7, #12]
 800a9e4:	e001      	b.n	800a9ea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a9ea:	f001 fc73 	bl	800c2d4 <vPortExitCritical>

	return xReturn;
 800a9ee:	68fb      	ldr	r3, [r7, #12]
}
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	3710      	adds	r7, #16
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	bd80      	pop	{r7, pc}

0800a9f8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a9f8:	b480      	push	{r7}
 800a9fa:	b085      	sub	sp, #20
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
 800aa00:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aa02:	2300      	movs	r3, #0
 800aa04:	60fb      	str	r3, [r7, #12]
 800aa06:	e014      	b.n	800aa32 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800aa08:	4a0f      	ldr	r2, [pc, #60]	; (800aa48 <vQueueAddToRegistry+0x50>)
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d10b      	bne.n	800aa2c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800aa14:	490c      	ldr	r1, [pc, #48]	; (800aa48 <vQueueAddToRegistry+0x50>)
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	683a      	ldr	r2, [r7, #0]
 800aa1a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800aa1e:	4a0a      	ldr	r2, [pc, #40]	; (800aa48 <vQueueAddToRegistry+0x50>)
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	00db      	lsls	r3, r3, #3
 800aa24:	4413      	add	r3, r2
 800aa26:	687a      	ldr	r2, [r7, #4]
 800aa28:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800aa2a:	e006      	b.n	800aa3a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	3301      	adds	r3, #1
 800aa30:	60fb      	str	r3, [r7, #12]
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	2b07      	cmp	r3, #7
 800aa36:	d9e7      	bls.n	800aa08 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800aa38:	bf00      	nop
 800aa3a:	bf00      	nop
 800aa3c:	3714      	adds	r7, #20
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa44:	4770      	bx	lr
 800aa46:	bf00      	nop
 800aa48:	20007924 	.word	0x20007924

0800aa4c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b086      	sub	sp, #24
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	60f8      	str	r0, [r7, #12]
 800aa54:	60b9      	str	r1, [r7, #8]
 800aa56:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800aa5c:	f001 fc06 	bl	800c26c <vPortEnterCritical>
 800aa60:	697b      	ldr	r3, [r7, #20]
 800aa62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aa66:	b25b      	sxtb	r3, r3
 800aa68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aa6c:	d103      	bne.n	800aa76 <vQueueWaitForMessageRestricted+0x2a>
 800aa6e:	697b      	ldr	r3, [r7, #20]
 800aa70:	2200      	movs	r2, #0
 800aa72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aa76:	697b      	ldr	r3, [r7, #20]
 800aa78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aa7c:	b25b      	sxtb	r3, r3
 800aa7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aa82:	d103      	bne.n	800aa8c <vQueueWaitForMessageRestricted+0x40>
 800aa84:	697b      	ldr	r3, [r7, #20]
 800aa86:	2200      	movs	r2, #0
 800aa88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aa8c:	f001 fc22 	bl	800c2d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800aa90:	697b      	ldr	r3, [r7, #20]
 800aa92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d106      	bne.n	800aaa6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800aa98:	697b      	ldr	r3, [r7, #20]
 800aa9a:	3324      	adds	r3, #36	; 0x24
 800aa9c:	687a      	ldr	r2, [r7, #4]
 800aa9e:	68b9      	ldr	r1, [r7, #8]
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	f000 fc77 	bl	800b394 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800aaa6:	6978      	ldr	r0, [r7, #20]
 800aaa8:	f7ff ff26 	bl	800a8f8 <prvUnlockQueue>
	}
 800aaac:	bf00      	nop
 800aaae:	3718      	adds	r7, #24
 800aab0:	46bd      	mov	sp, r7
 800aab2:	bd80      	pop	{r7, pc}

0800aab4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b08e      	sub	sp, #56	; 0x38
 800aab8:	af04      	add	r7, sp, #16
 800aaba:	60f8      	str	r0, [r7, #12]
 800aabc:	60b9      	str	r1, [r7, #8]
 800aabe:	607a      	str	r2, [r7, #4]
 800aac0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800aac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d10c      	bne.n	800aae2 <xTaskCreateStatic+0x2e>
	__asm volatile
 800aac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aacc:	b672      	cpsid	i
 800aace:	f383 8811 	msr	BASEPRI, r3
 800aad2:	f3bf 8f6f 	isb	sy
 800aad6:	f3bf 8f4f 	dsb	sy
 800aada:	b662      	cpsie	i
 800aadc:	623b      	str	r3, [r7, #32]
}
 800aade:	bf00      	nop
 800aae0:	e7fe      	b.n	800aae0 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800aae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d10c      	bne.n	800ab02 <xTaskCreateStatic+0x4e>
	__asm volatile
 800aae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaec:	b672      	cpsid	i
 800aaee:	f383 8811 	msr	BASEPRI, r3
 800aaf2:	f3bf 8f6f 	isb	sy
 800aaf6:	f3bf 8f4f 	dsb	sy
 800aafa:	b662      	cpsie	i
 800aafc:	61fb      	str	r3, [r7, #28]
}
 800aafe:	bf00      	nop
 800ab00:	e7fe      	b.n	800ab00 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ab02:	23a8      	movs	r3, #168	; 0xa8
 800ab04:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ab06:	693b      	ldr	r3, [r7, #16]
 800ab08:	2ba8      	cmp	r3, #168	; 0xa8
 800ab0a:	d00c      	beq.n	800ab26 <xTaskCreateStatic+0x72>
	__asm volatile
 800ab0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab10:	b672      	cpsid	i
 800ab12:	f383 8811 	msr	BASEPRI, r3
 800ab16:	f3bf 8f6f 	isb	sy
 800ab1a:	f3bf 8f4f 	dsb	sy
 800ab1e:	b662      	cpsie	i
 800ab20:	61bb      	str	r3, [r7, #24]
}
 800ab22:	bf00      	nop
 800ab24:	e7fe      	b.n	800ab24 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ab26:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ab28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d01e      	beq.n	800ab6c <xTaskCreateStatic+0xb8>
 800ab2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d01b      	beq.n	800ab6c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ab34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab36:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ab38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab3c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ab3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab40:	2202      	movs	r2, #2
 800ab42:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ab46:	2300      	movs	r3, #0
 800ab48:	9303      	str	r3, [sp, #12]
 800ab4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab4c:	9302      	str	r3, [sp, #8]
 800ab4e:	f107 0314 	add.w	r3, r7, #20
 800ab52:	9301      	str	r3, [sp, #4]
 800ab54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab56:	9300      	str	r3, [sp, #0]
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	687a      	ldr	r2, [r7, #4]
 800ab5c:	68b9      	ldr	r1, [r7, #8]
 800ab5e:	68f8      	ldr	r0, [r7, #12]
 800ab60:	f000 f850 	bl	800ac04 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ab64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ab66:	f000 f8f5 	bl	800ad54 <prvAddNewTaskToReadyList>
 800ab6a:	e001      	b.n	800ab70 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ab70:	697b      	ldr	r3, [r7, #20]
	}
 800ab72:	4618      	mov	r0, r3
 800ab74:	3728      	adds	r7, #40	; 0x28
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bd80      	pop	{r7, pc}

0800ab7a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ab7a:	b580      	push	{r7, lr}
 800ab7c:	b08c      	sub	sp, #48	; 0x30
 800ab7e:	af04      	add	r7, sp, #16
 800ab80:	60f8      	str	r0, [r7, #12]
 800ab82:	60b9      	str	r1, [r7, #8]
 800ab84:	603b      	str	r3, [r7, #0]
 800ab86:	4613      	mov	r3, r2
 800ab88:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ab8a:	88fb      	ldrh	r3, [r7, #6]
 800ab8c:	009b      	lsls	r3, r3, #2
 800ab8e:	4618      	mov	r0, r3
 800ab90:	f001 fc98 	bl	800c4c4 <pvPortMalloc>
 800ab94:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ab96:	697b      	ldr	r3, [r7, #20]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d00e      	beq.n	800abba <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ab9c:	20a8      	movs	r0, #168	; 0xa8
 800ab9e:	f001 fc91 	bl	800c4c4 <pvPortMalloc>
 800aba2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800aba4:	69fb      	ldr	r3, [r7, #28]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d003      	beq.n	800abb2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800abaa:	69fb      	ldr	r3, [r7, #28]
 800abac:	697a      	ldr	r2, [r7, #20]
 800abae:	631a      	str	r2, [r3, #48]	; 0x30
 800abb0:	e005      	b.n	800abbe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800abb2:	6978      	ldr	r0, [r7, #20]
 800abb4:	f001 fd50 	bl	800c658 <vPortFree>
 800abb8:	e001      	b.n	800abbe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800abba:	2300      	movs	r3, #0
 800abbc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800abbe:	69fb      	ldr	r3, [r7, #28]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d017      	beq.n	800abf4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800abc4:	69fb      	ldr	r3, [r7, #28]
 800abc6:	2200      	movs	r2, #0
 800abc8:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800abcc:	88fa      	ldrh	r2, [r7, #6]
 800abce:	2300      	movs	r3, #0
 800abd0:	9303      	str	r3, [sp, #12]
 800abd2:	69fb      	ldr	r3, [r7, #28]
 800abd4:	9302      	str	r3, [sp, #8]
 800abd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abd8:	9301      	str	r3, [sp, #4]
 800abda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abdc:	9300      	str	r3, [sp, #0]
 800abde:	683b      	ldr	r3, [r7, #0]
 800abe0:	68b9      	ldr	r1, [r7, #8]
 800abe2:	68f8      	ldr	r0, [r7, #12]
 800abe4:	f000 f80e 	bl	800ac04 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800abe8:	69f8      	ldr	r0, [r7, #28]
 800abea:	f000 f8b3 	bl	800ad54 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800abee:	2301      	movs	r3, #1
 800abf0:	61bb      	str	r3, [r7, #24]
 800abf2:	e002      	b.n	800abfa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800abf4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800abf8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800abfa:	69bb      	ldr	r3, [r7, #24]
	}
 800abfc:	4618      	mov	r0, r3
 800abfe:	3720      	adds	r7, #32
 800ac00:	46bd      	mov	sp, r7
 800ac02:	bd80      	pop	{r7, pc}

0800ac04 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b088      	sub	sp, #32
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	60f8      	str	r0, [r7, #12]
 800ac0c:	60b9      	str	r1, [r7, #8]
 800ac0e:	607a      	str	r2, [r7, #4]
 800ac10:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ac12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac14:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	009b      	lsls	r3, r3, #2
 800ac1a:	461a      	mov	r2, r3
 800ac1c:	21a5      	movs	r1, #165	; 0xa5
 800ac1e:	f012 ffb9 	bl	801db94 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ac22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ac26:	6879      	ldr	r1, [r7, #4]
 800ac28:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800ac2c:	440b      	add	r3, r1
 800ac2e:	009b      	lsls	r3, r3, #2
 800ac30:	4413      	add	r3, r2
 800ac32:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ac34:	69bb      	ldr	r3, [r7, #24]
 800ac36:	f023 0307 	bic.w	r3, r3, #7
 800ac3a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ac3c:	69bb      	ldr	r3, [r7, #24]
 800ac3e:	f003 0307 	and.w	r3, r3, #7
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d00c      	beq.n	800ac60 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800ac46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac4a:	b672      	cpsid	i
 800ac4c:	f383 8811 	msr	BASEPRI, r3
 800ac50:	f3bf 8f6f 	isb	sy
 800ac54:	f3bf 8f4f 	dsb	sy
 800ac58:	b662      	cpsie	i
 800ac5a:	617b      	str	r3, [r7, #20]
}
 800ac5c:	bf00      	nop
 800ac5e:	e7fe      	b.n	800ac5e <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ac60:	68bb      	ldr	r3, [r7, #8]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d01f      	beq.n	800aca6 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ac66:	2300      	movs	r3, #0
 800ac68:	61fb      	str	r3, [r7, #28]
 800ac6a:	e012      	b.n	800ac92 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ac6c:	68ba      	ldr	r2, [r7, #8]
 800ac6e:	69fb      	ldr	r3, [r7, #28]
 800ac70:	4413      	add	r3, r2
 800ac72:	7819      	ldrb	r1, [r3, #0]
 800ac74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac76:	69fb      	ldr	r3, [r7, #28]
 800ac78:	4413      	add	r3, r2
 800ac7a:	3334      	adds	r3, #52	; 0x34
 800ac7c:	460a      	mov	r2, r1
 800ac7e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ac80:	68ba      	ldr	r2, [r7, #8]
 800ac82:	69fb      	ldr	r3, [r7, #28]
 800ac84:	4413      	add	r3, r2
 800ac86:	781b      	ldrb	r3, [r3, #0]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d006      	beq.n	800ac9a <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ac8c:	69fb      	ldr	r3, [r7, #28]
 800ac8e:	3301      	adds	r3, #1
 800ac90:	61fb      	str	r3, [r7, #28]
 800ac92:	69fb      	ldr	r3, [r7, #28]
 800ac94:	2b0f      	cmp	r3, #15
 800ac96:	d9e9      	bls.n	800ac6c <prvInitialiseNewTask+0x68>
 800ac98:	e000      	b.n	800ac9c <prvInitialiseNewTask+0x98>
			{
				break;
 800ac9a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ac9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac9e:	2200      	movs	r2, #0
 800aca0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800aca4:	e003      	b.n	800acae <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800aca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aca8:	2200      	movs	r2, #0
 800acaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800acae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acb0:	2b37      	cmp	r3, #55	; 0x37
 800acb2:	d901      	bls.n	800acb8 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800acb4:	2337      	movs	r3, #55	; 0x37
 800acb6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800acb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800acbc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800acbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800acc2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800acc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acc6:	2200      	movs	r2, #0
 800acc8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800acca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800accc:	3304      	adds	r3, #4
 800acce:	4618      	mov	r0, r3
 800acd0:	f7ff f952 	bl	8009f78 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800acd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acd6:	3318      	adds	r3, #24
 800acd8:	4618      	mov	r0, r3
 800acda:	f7ff f94d 	bl	8009f78 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800acde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ace0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ace2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ace4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ace6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800acea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800acee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800acf2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800acf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acf6:	2200      	movs	r2, #0
 800acf8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800acfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acfe:	2200      	movs	r2, #0
 800ad00:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ad04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad06:	3354      	adds	r3, #84	; 0x54
 800ad08:	224c      	movs	r2, #76	; 0x4c
 800ad0a:	2100      	movs	r1, #0
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	f012 ff41 	bl	801db94 <memset>
 800ad12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad14:	4a0c      	ldr	r2, [pc, #48]	; (800ad48 <prvInitialiseNewTask+0x144>)
 800ad16:	659a      	str	r2, [r3, #88]	; 0x58
 800ad18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad1a:	4a0c      	ldr	r2, [pc, #48]	; (800ad4c <prvInitialiseNewTask+0x148>)
 800ad1c:	65da      	str	r2, [r3, #92]	; 0x5c
 800ad1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad20:	4a0b      	ldr	r2, [pc, #44]	; (800ad50 <prvInitialiseNewTask+0x14c>)
 800ad22:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ad24:	683a      	ldr	r2, [r7, #0]
 800ad26:	68f9      	ldr	r1, [r7, #12]
 800ad28:	69b8      	ldr	r0, [r7, #24]
 800ad2a:	f001 f993 	bl	800c054 <pxPortInitialiseStack>
 800ad2e:	4602      	mov	r2, r0
 800ad30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad32:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ad34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d002      	beq.n	800ad40 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ad3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad3e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ad40:	bf00      	nop
 800ad42:	3720      	adds	r7, #32
 800ad44:	46bd      	mov	sp, r7
 800ad46:	bd80      	pop	{r7, pc}
 800ad48:	20010e90 	.word	0x20010e90
 800ad4c:	20010ef8 	.word	0x20010ef8
 800ad50:	20010f60 	.word	0x20010f60

0800ad54 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b082      	sub	sp, #8
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ad5c:	f001 fa86 	bl	800c26c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ad60:	4b2d      	ldr	r3, [pc, #180]	; (800ae18 <prvAddNewTaskToReadyList+0xc4>)
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	3301      	adds	r3, #1
 800ad66:	4a2c      	ldr	r2, [pc, #176]	; (800ae18 <prvAddNewTaskToReadyList+0xc4>)
 800ad68:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ad6a:	4b2c      	ldr	r3, [pc, #176]	; (800ae1c <prvAddNewTaskToReadyList+0xc8>)
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d109      	bne.n	800ad86 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ad72:	4a2a      	ldr	r2, [pc, #168]	; (800ae1c <prvAddNewTaskToReadyList+0xc8>)
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ad78:	4b27      	ldr	r3, [pc, #156]	; (800ae18 <prvAddNewTaskToReadyList+0xc4>)
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	2b01      	cmp	r3, #1
 800ad7e:	d110      	bne.n	800ada2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ad80:	f000 fc64 	bl	800b64c <prvInitialiseTaskLists>
 800ad84:	e00d      	b.n	800ada2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ad86:	4b26      	ldr	r3, [pc, #152]	; (800ae20 <prvAddNewTaskToReadyList+0xcc>)
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d109      	bne.n	800ada2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ad8e:	4b23      	ldr	r3, [pc, #140]	; (800ae1c <prvAddNewTaskToReadyList+0xc8>)
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad98:	429a      	cmp	r2, r3
 800ad9a:	d802      	bhi.n	800ada2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ad9c:	4a1f      	ldr	r2, [pc, #124]	; (800ae1c <prvAddNewTaskToReadyList+0xc8>)
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ada2:	4b20      	ldr	r3, [pc, #128]	; (800ae24 <prvAddNewTaskToReadyList+0xd0>)
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	3301      	adds	r3, #1
 800ada8:	4a1e      	ldr	r2, [pc, #120]	; (800ae24 <prvAddNewTaskToReadyList+0xd0>)
 800adaa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800adac:	4b1d      	ldr	r3, [pc, #116]	; (800ae24 <prvAddNewTaskToReadyList+0xd0>)
 800adae:	681a      	ldr	r2, [r3, #0]
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adb8:	4b1b      	ldr	r3, [pc, #108]	; (800ae28 <prvAddNewTaskToReadyList+0xd4>)
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	429a      	cmp	r2, r3
 800adbe:	d903      	bls.n	800adc8 <prvAddNewTaskToReadyList+0x74>
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adc4:	4a18      	ldr	r2, [pc, #96]	; (800ae28 <prvAddNewTaskToReadyList+0xd4>)
 800adc6:	6013      	str	r3, [r2, #0]
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adcc:	4613      	mov	r3, r2
 800adce:	009b      	lsls	r3, r3, #2
 800add0:	4413      	add	r3, r2
 800add2:	009b      	lsls	r3, r3, #2
 800add4:	4a15      	ldr	r2, [pc, #84]	; (800ae2c <prvAddNewTaskToReadyList+0xd8>)
 800add6:	441a      	add	r2, r3
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	3304      	adds	r3, #4
 800addc:	4619      	mov	r1, r3
 800adde:	4610      	mov	r0, r2
 800ade0:	f7ff f8d7 	bl	8009f92 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ade4:	f001 fa76 	bl	800c2d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ade8:	4b0d      	ldr	r3, [pc, #52]	; (800ae20 <prvAddNewTaskToReadyList+0xcc>)
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d00e      	beq.n	800ae0e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800adf0:	4b0a      	ldr	r3, [pc, #40]	; (800ae1c <prvAddNewTaskToReadyList+0xc8>)
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adfa:	429a      	cmp	r2, r3
 800adfc:	d207      	bcs.n	800ae0e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800adfe:	4b0c      	ldr	r3, [pc, #48]	; (800ae30 <prvAddNewTaskToReadyList+0xdc>)
 800ae00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae04:	601a      	str	r2, [r3, #0]
 800ae06:	f3bf 8f4f 	dsb	sy
 800ae0a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ae0e:	bf00      	nop
 800ae10:	3708      	adds	r7, #8
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bd80      	pop	{r7, pc}
 800ae16:	bf00      	nop
 800ae18:	20007e38 	.word	0x20007e38
 800ae1c:	20007964 	.word	0x20007964
 800ae20:	20007e44 	.word	0x20007e44
 800ae24:	20007e54 	.word	0x20007e54
 800ae28:	20007e40 	.word	0x20007e40
 800ae2c:	20007968 	.word	0x20007968
 800ae30:	e000ed04 	.word	0xe000ed04

0800ae34 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b084      	sub	sp, #16
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d019      	beq.n	800ae7a <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ae46:	4b14      	ldr	r3, [pc, #80]	; (800ae98 <vTaskDelay+0x64>)
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d00c      	beq.n	800ae68 <vTaskDelay+0x34>
	__asm volatile
 800ae4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae52:	b672      	cpsid	i
 800ae54:	f383 8811 	msr	BASEPRI, r3
 800ae58:	f3bf 8f6f 	isb	sy
 800ae5c:	f3bf 8f4f 	dsb	sy
 800ae60:	b662      	cpsie	i
 800ae62:	60bb      	str	r3, [r7, #8]
}
 800ae64:	bf00      	nop
 800ae66:	e7fe      	b.n	800ae66 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800ae68:	f000 f88e 	bl	800af88 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ae6c:	2100      	movs	r1, #0
 800ae6e:	6878      	ldr	r0, [r7, #4]
 800ae70:	f000 fd40 	bl	800b8f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ae74:	f000 f896 	bl	800afa4 <xTaskResumeAll>
 800ae78:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d107      	bne.n	800ae90 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800ae80:	4b06      	ldr	r3, [pc, #24]	; (800ae9c <vTaskDelay+0x68>)
 800ae82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae86:	601a      	str	r2, [r3, #0]
 800ae88:	f3bf 8f4f 	dsb	sy
 800ae8c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ae90:	bf00      	nop
 800ae92:	3710      	adds	r7, #16
 800ae94:	46bd      	mov	sp, r7
 800ae96:	bd80      	pop	{r7, pc}
 800ae98:	20007e60 	.word	0x20007e60
 800ae9c:	e000ed04 	.word	0xe000ed04

0800aea0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b08a      	sub	sp, #40	; 0x28
 800aea4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800aea6:	2300      	movs	r3, #0
 800aea8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800aeaa:	2300      	movs	r3, #0
 800aeac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800aeae:	463a      	mov	r2, r7
 800aeb0:	1d39      	adds	r1, r7, #4
 800aeb2:	f107 0308 	add.w	r3, r7, #8
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	f7ff f80a 	bl	8009ed0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800aebc:	6839      	ldr	r1, [r7, #0]
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	68ba      	ldr	r2, [r7, #8]
 800aec2:	9202      	str	r2, [sp, #8]
 800aec4:	9301      	str	r3, [sp, #4]
 800aec6:	2300      	movs	r3, #0
 800aec8:	9300      	str	r3, [sp, #0]
 800aeca:	2300      	movs	r3, #0
 800aecc:	460a      	mov	r2, r1
 800aece:	4926      	ldr	r1, [pc, #152]	; (800af68 <vTaskStartScheduler+0xc8>)
 800aed0:	4826      	ldr	r0, [pc, #152]	; (800af6c <vTaskStartScheduler+0xcc>)
 800aed2:	f7ff fdef 	bl	800aab4 <xTaskCreateStatic>
 800aed6:	4603      	mov	r3, r0
 800aed8:	4a25      	ldr	r2, [pc, #148]	; (800af70 <vTaskStartScheduler+0xd0>)
 800aeda:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800aedc:	4b24      	ldr	r3, [pc, #144]	; (800af70 <vTaskStartScheduler+0xd0>)
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d002      	beq.n	800aeea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800aee4:	2301      	movs	r3, #1
 800aee6:	617b      	str	r3, [r7, #20]
 800aee8:	e001      	b.n	800aeee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800aeea:	2300      	movs	r3, #0
 800aeec:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800aeee:	697b      	ldr	r3, [r7, #20]
 800aef0:	2b01      	cmp	r3, #1
 800aef2:	d102      	bne.n	800aefa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800aef4:	f000 fd52 	bl	800b99c <xTimerCreateTimerTask>
 800aef8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800aefa:	697b      	ldr	r3, [r7, #20]
 800aefc:	2b01      	cmp	r3, #1
 800aefe:	d11d      	bne.n	800af3c <vTaskStartScheduler+0x9c>
	__asm volatile
 800af00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af04:	b672      	cpsid	i
 800af06:	f383 8811 	msr	BASEPRI, r3
 800af0a:	f3bf 8f6f 	isb	sy
 800af0e:	f3bf 8f4f 	dsb	sy
 800af12:	b662      	cpsie	i
 800af14:	613b      	str	r3, [r7, #16]
}
 800af16:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800af18:	4b16      	ldr	r3, [pc, #88]	; (800af74 <vTaskStartScheduler+0xd4>)
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	3354      	adds	r3, #84	; 0x54
 800af1e:	4a16      	ldr	r2, [pc, #88]	; (800af78 <vTaskStartScheduler+0xd8>)
 800af20:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800af22:	4b16      	ldr	r3, [pc, #88]	; (800af7c <vTaskStartScheduler+0xdc>)
 800af24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800af28:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800af2a:	4b15      	ldr	r3, [pc, #84]	; (800af80 <vTaskStartScheduler+0xe0>)
 800af2c:	2201      	movs	r2, #1
 800af2e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800af30:	4b14      	ldr	r3, [pc, #80]	; (800af84 <vTaskStartScheduler+0xe4>)
 800af32:	2200      	movs	r2, #0
 800af34:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800af36:	f001 f91b 	bl	800c170 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800af3a:	e010      	b.n	800af5e <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800af3c:	697b      	ldr	r3, [r7, #20]
 800af3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800af42:	d10c      	bne.n	800af5e <vTaskStartScheduler+0xbe>
	__asm volatile
 800af44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af48:	b672      	cpsid	i
 800af4a:	f383 8811 	msr	BASEPRI, r3
 800af4e:	f3bf 8f6f 	isb	sy
 800af52:	f3bf 8f4f 	dsb	sy
 800af56:	b662      	cpsie	i
 800af58:	60fb      	str	r3, [r7, #12]
}
 800af5a:	bf00      	nop
 800af5c:	e7fe      	b.n	800af5c <vTaskStartScheduler+0xbc>
}
 800af5e:	bf00      	nop
 800af60:	3718      	adds	r7, #24
 800af62:	46bd      	mov	sp, r7
 800af64:	bd80      	pop	{r7, pc}
 800af66:	bf00      	nop
 800af68:	0801ec20 	.word	0x0801ec20
 800af6c:	0800b61d 	.word	0x0800b61d
 800af70:	20007e5c 	.word	0x20007e5c
 800af74:	20007964 	.word	0x20007964
 800af78:	20002478 	.word	0x20002478
 800af7c:	20007e58 	.word	0x20007e58
 800af80:	20007e44 	.word	0x20007e44
 800af84:	20007e3c 	.word	0x20007e3c

0800af88 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800af88:	b480      	push	{r7}
 800af8a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800af8c:	4b04      	ldr	r3, [pc, #16]	; (800afa0 <vTaskSuspendAll+0x18>)
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	3301      	adds	r3, #1
 800af92:	4a03      	ldr	r2, [pc, #12]	; (800afa0 <vTaskSuspendAll+0x18>)
 800af94:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800af96:	bf00      	nop
 800af98:	46bd      	mov	sp, r7
 800af9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9e:	4770      	bx	lr
 800afa0:	20007e60 	.word	0x20007e60

0800afa4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b084      	sub	sp, #16
 800afa8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800afaa:	2300      	movs	r3, #0
 800afac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800afae:	2300      	movs	r3, #0
 800afb0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800afb2:	4b43      	ldr	r3, [pc, #268]	; (800b0c0 <xTaskResumeAll+0x11c>)
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d10c      	bne.n	800afd4 <xTaskResumeAll+0x30>
	__asm volatile
 800afba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afbe:	b672      	cpsid	i
 800afc0:	f383 8811 	msr	BASEPRI, r3
 800afc4:	f3bf 8f6f 	isb	sy
 800afc8:	f3bf 8f4f 	dsb	sy
 800afcc:	b662      	cpsie	i
 800afce:	603b      	str	r3, [r7, #0]
}
 800afd0:	bf00      	nop
 800afd2:	e7fe      	b.n	800afd2 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800afd4:	f001 f94a 	bl	800c26c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800afd8:	4b39      	ldr	r3, [pc, #228]	; (800b0c0 <xTaskResumeAll+0x11c>)
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	3b01      	subs	r3, #1
 800afde:	4a38      	ldr	r2, [pc, #224]	; (800b0c0 <xTaskResumeAll+0x11c>)
 800afe0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800afe2:	4b37      	ldr	r3, [pc, #220]	; (800b0c0 <xTaskResumeAll+0x11c>)
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d162      	bne.n	800b0b0 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800afea:	4b36      	ldr	r3, [pc, #216]	; (800b0c4 <xTaskResumeAll+0x120>)
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d05e      	beq.n	800b0b0 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aff2:	e02f      	b.n	800b054 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aff4:	4b34      	ldr	r3, [pc, #208]	; (800b0c8 <xTaskResumeAll+0x124>)
 800aff6:	68db      	ldr	r3, [r3, #12]
 800aff8:	68db      	ldr	r3, [r3, #12]
 800affa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	3318      	adds	r3, #24
 800b000:	4618      	mov	r0, r3
 800b002:	f7ff f823 	bl	800a04c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	3304      	adds	r3, #4
 800b00a:	4618      	mov	r0, r3
 800b00c:	f7ff f81e 	bl	800a04c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b014:	4b2d      	ldr	r3, [pc, #180]	; (800b0cc <xTaskResumeAll+0x128>)
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	429a      	cmp	r2, r3
 800b01a:	d903      	bls.n	800b024 <xTaskResumeAll+0x80>
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b020:	4a2a      	ldr	r2, [pc, #168]	; (800b0cc <xTaskResumeAll+0x128>)
 800b022:	6013      	str	r3, [r2, #0]
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b028:	4613      	mov	r3, r2
 800b02a:	009b      	lsls	r3, r3, #2
 800b02c:	4413      	add	r3, r2
 800b02e:	009b      	lsls	r3, r3, #2
 800b030:	4a27      	ldr	r2, [pc, #156]	; (800b0d0 <xTaskResumeAll+0x12c>)
 800b032:	441a      	add	r2, r3
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	3304      	adds	r3, #4
 800b038:	4619      	mov	r1, r3
 800b03a:	4610      	mov	r0, r2
 800b03c:	f7fe ffa9 	bl	8009f92 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b044:	4b23      	ldr	r3, [pc, #140]	; (800b0d4 <xTaskResumeAll+0x130>)
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b04a:	429a      	cmp	r2, r3
 800b04c:	d302      	bcc.n	800b054 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800b04e:	4b22      	ldr	r3, [pc, #136]	; (800b0d8 <xTaskResumeAll+0x134>)
 800b050:	2201      	movs	r2, #1
 800b052:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b054:	4b1c      	ldr	r3, [pc, #112]	; (800b0c8 <xTaskResumeAll+0x124>)
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d1cb      	bne.n	800aff4 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d001      	beq.n	800b066 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b062:	f000 fb97 	bl	800b794 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b066:	4b1d      	ldr	r3, [pc, #116]	; (800b0dc <xTaskResumeAll+0x138>)
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d010      	beq.n	800b094 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b072:	f000 f847 	bl	800b104 <xTaskIncrementTick>
 800b076:	4603      	mov	r3, r0
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d002      	beq.n	800b082 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800b07c:	4b16      	ldr	r3, [pc, #88]	; (800b0d8 <xTaskResumeAll+0x134>)
 800b07e:	2201      	movs	r2, #1
 800b080:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	3b01      	subs	r3, #1
 800b086:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d1f1      	bne.n	800b072 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800b08e:	4b13      	ldr	r3, [pc, #76]	; (800b0dc <xTaskResumeAll+0x138>)
 800b090:	2200      	movs	r2, #0
 800b092:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b094:	4b10      	ldr	r3, [pc, #64]	; (800b0d8 <xTaskResumeAll+0x134>)
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d009      	beq.n	800b0b0 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b09c:	2301      	movs	r3, #1
 800b09e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b0a0:	4b0f      	ldr	r3, [pc, #60]	; (800b0e0 <xTaskResumeAll+0x13c>)
 800b0a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0a6:	601a      	str	r2, [r3, #0]
 800b0a8:	f3bf 8f4f 	dsb	sy
 800b0ac:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b0b0:	f001 f910 	bl	800c2d4 <vPortExitCritical>

	return xAlreadyYielded;
 800b0b4:	68bb      	ldr	r3, [r7, #8]
}
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	3710      	adds	r7, #16
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bd80      	pop	{r7, pc}
 800b0be:	bf00      	nop
 800b0c0:	20007e60 	.word	0x20007e60
 800b0c4:	20007e38 	.word	0x20007e38
 800b0c8:	20007df8 	.word	0x20007df8
 800b0cc:	20007e40 	.word	0x20007e40
 800b0d0:	20007968 	.word	0x20007968
 800b0d4:	20007964 	.word	0x20007964
 800b0d8:	20007e4c 	.word	0x20007e4c
 800b0dc:	20007e48 	.word	0x20007e48
 800b0e0:	e000ed04 	.word	0xe000ed04

0800b0e4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b0e4:	b480      	push	{r7}
 800b0e6:	b083      	sub	sp, #12
 800b0e8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b0ea:	4b05      	ldr	r3, [pc, #20]	; (800b100 <xTaskGetTickCount+0x1c>)
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b0f0:	687b      	ldr	r3, [r7, #4]
}
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	370c      	adds	r7, #12
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fc:	4770      	bx	lr
 800b0fe:	bf00      	nop
 800b100:	20007e3c 	.word	0x20007e3c

0800b104 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b104:	b580      	push	{r7, lr}
 800b106:	b086      	sub	sp, #24
 800b108:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b10a:	2300      	movs	r3, #0
 800b10c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b10e:	4b50      	ldr	r3, [pc, #320]	; (800b250 <xTaskIncrementTick+0x14c>)
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	2b00      	cmp	r3, #0
 800b114:	f040 808b 	bne.w	800b22e <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b118:	4b4e      	ldr	r3, [pc, #312]	; (800b254 <xTaskIncrementTick+0x150>)
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	3301      	adds	r3, #1
 800b11e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b120:	4a4c      	ldr	r2, [pc, #304]	; (800b254 <xTaskIncrementTick+0x150>)
 800b122:	693b      	ldr	r3, [r7, #16]
 800b124:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b126:	693b      	ldr	r3, [r7, #16]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d122      	bne.n	800b172 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800b12c:	4b4a      	ldr	r3, [pc, #296]	; (800b258 <xTaskIncrementTick+0x154>)
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d00c      	beq.n	800b150 <xTaskIncrementTick+0x4c>
	__asm volatile
 800b136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b13a:	b672      	cpsid	i
 800b13c:	f383 8811 	msr	BASEPRI, r3
 800b140:	f3bf 8f6f 	isb	sy
 800b144:	f3bf 8f4f 	dsb	sy
 800b148:	b662      	cpsie	i
 800b14a:	603b      	str	r3, [r7, #0]
}
 800b14c:	bf00      	nop
 800b14e:	e7fe      	b.n	800b14e <xTaskIncrementTick+0x4a>
 800b150:	4b41      	ldr	r3, [pc, #260]	; (800b258 <xTaskIncrementTick+0x154>)
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	60fb      	str	r3, [r7, #12]
 800b156:	4b41      	ldr	r3, [pc, #260]	; (800b25c <xTaskIncrementTick+0x158>)
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	4a3f      	ldr	r2, [pc, #252]	; (800b258 <xTaskIncrementTick+0x154>)
 800b15c:	6013      	str	r3, [r2, #0]
 800b15e:	4a3f      	ldr	r2, [pc, #252]	; (800b25c <xTaskIncrementTick+0x158>)
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	6013      	str	r3, [r2, #0]
 800b164:	4b3e      	ldr	r3, [pc, #248]	; (800b260 <xTaskIncrementTick+0x15c>)
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	3301      	adds	r3, #1
 800b16a:	4a3d      	ldr	r2, [pc, #244]	; (800b260 <xTaskIncrementTick+0x15c>)
 800b16c:	6013      	str	r3, [r2, #0]
 800b16e:	f000 fb11 	bl	800b794 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b172:	4b3c      	ldr	r3, [pc, #240]	; (800b264 <xTaskIncrementTick+0x160>)
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	693a      	ldr	r2, [r7, #16]
 800b178:	429a      	cmp	r2, r3
 800b17a:	d349      	bcc.n	800b210 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b17c:	4b36      	ldr	r3, [pc, #216]	; (800b258 <xTaskIncrementTick+0x154>)
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d104      	bne.n	800b190 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b186:	4b37      	ldr	r3, [pc, #220]	; (800b264 <xTaskIncrementTick+0x160>)
 800b188:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b18c:	601a      	str	r2, [r3, #0]
					break;
 800b18e:	e03f      	b.n	800b210 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b190:	4b31      	ldr	r3, [pc, #196]	; (800b258 <xTaskIncrementTick+0x154>)
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	68db      	ldr	r3, [r3, #12]
 800b196:	68db      	ldr	r3, [r3, #12]
 800b198:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b19a:	68bb      	ldr	r3, [r7, #8]
 800b19c:	685b      	ldr	r3, [r3, #4]
 800b19e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b1a0:	693a      	ldr	r2, [r7, #16]
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	429a      	cmp	r2, r3
 800b1a6:	d203      	bcs.n	800b1b0 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b1a8:	4a2e      	ldr	r2, [pc, #184]	; (800b264 <xTaskIncrementTick+0x160>)
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b1ae:	e02f      	b.n	800b210 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b1b0:	68bb      	ldr	r3, [r7, #8]
 800b1b2:	3304      	adds	r3, #4
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	f7fe ff49 	bl	800a04c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b1ba:	68bb      	ldr	r3, [r7, #8]
 800b1bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d004      	beq.n	800b1cc <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b1c2:	68bb      	ldr	r3, [r7, #8]
 800b1c4:	3318      	adds	r3, #24
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	f7fe ff40 	bl	800a04c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b1cc:	68bb      	ldr	r3, [r7, #8]
 800b1ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1d0:	4b25      	ldr	r3, [pc, #148]	; (800b268 <xTaskIncrementTick+0x164>)
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	429a      	cmp	r2, r3
 800b1d6:	d903      	bls.n	800b1e0 <xTaskIncrementTick+0xdc>
 800b1d8:	68bb      	ldr	r3, [r7, #8]
 800b1da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1dc:	4a22      	ldr	r2, [pc, #136]	; (800b268 <xTaskIncrementTick+0x164>)
 800b1de:	6013      	str	r3, [r2, #0]
 800b1e0:	68bb      	ldr	r3, [r7, #8]
 800b1e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1e4:	4613      	mov	r3, r2
 800b1e6:	009b      	lsls	r3, r3, #2
 800b1e8:	4413      	add	r3, r2
 800b1ea:	009b      	lsls	r3, r3, #2
 800b1ec:	4a1f      	ldr	r2, [pc, #124]	; (800b26c <xTaskIncrementTick+0x168>)
 800b1ee:	441a      	add	r2, r3
 800b1f0:	68bb      	ldr	r3, [r7, #8]
 800b1f2:	3304      	adds	r3, #4
 800b1f4:	4619      	mov	r1, r3
 800b1f6:	4610      	mov	r0, r2
 800b1f8:	f7fe fecb 	bl	8009f92 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b1fc:	68bb      	ldr	r3, [r7, #8]
 800b1fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b200:	4b1b      	ldr	r3, [pc, #108]	; (800b270 <xTaskIncrementTick+0x16c>)
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b206:	429a      	cmp	r2, r3
 800b208:	d3b8      	bcc.n	800b17c <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800b20a:	2301      	movs	r3, #1
 800b20c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b20e:	e7b5      	b.n	800b17c <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b210:	4b17      	ldr	r3, [pc, #92]	; (800b270 <xTaskIncrementTick+0x16c>)
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b216:	4915      	ldr	r1, [pc, #84]	; (800b26c <xTaskIncrementTick+0x168>)
 800b218:	4613      	mov	r3, r2
 800b21a:	009b      	lsls	r3, r3, #2
 800b21c:	4413      	add	r3, r2
 800b21e:	009b      	lsls	r3, r3, #2
 800b220:	440b      	add	r3, r1
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	2b01      	cmp	r3, #1
 800b226:	d907      	bls.n	800b238 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800b228:	2301      	movs	r3, #1
 800b22a:	617b      	str	r3, [r7, #20]
 800b22c:	e004      	b.n	800b238 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b22e:	4b11      	ldr	r3, [pc, #68]	; (800b274 <xTaskIncrementTick+0x170>)
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	3301      	adds	r3, #1
 800b234:	4a0f      	ldr	r2, [pc, #60]	; (800b274 <xTaskIncrementTick+0x170>)
 800b236:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b238:	4b0f      	ldr	r3, [pc, #60]	; (800b278 <xTaskIncrementTick+0x174>)
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d001      	beq.n	800b244 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800b240:	2301      	movs	r3, #1
 800b242:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b244:	697b      	ldr	r3, [r7, #20]
}
 800b246:	4618      	mov	r0, r3
 800b248:	3718      	adds	r7, #24
 800b24a:	46bd      	mov	sp, r7
 800b24c:	bd80      	pop	{r7, pc}
 800b24e:	bf00      	nop
 800b250:	20007e60 	.word	0x20007e60
 800b254:	20007e3c 	.word	0x20007e3c
 800b258:	20007df0 	.word	0x20007df0
 800b25c:	20007df4 	.word	0x20007df4
 800b260:	20007e50 	.word	0x20007e50
 800b264:	20007e58 	.word	0x20007e58
 800b268:	20007e40 	.word	0x20007e40
 800b26c:	20007968 	.word	0x20007968
 800b270:	20007964 	.word	0x20007964
 800b274:	20007e48 	.word	0x20007e48
 800b278:	20007e4c 	.word	0x20007e4c

0800b27c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b27c:	b480      	push	{r7}
 800b27e:	b085      	sub	sp, #20
 800b280:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b282:	4b2b      	ldr	r3, [pc, #172]	; (800b330 <vTaskSwitchContext+0xb4>)
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d003      	beq.n	800b292 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b28a:	4b2a      	ldr	r3, [pc, #168]	; (800b334 <vTaskSwitchContext+0xb8>)
 800b28c:	2201      	movs	r2, #1
 800b28e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b290:	e048      	b.n	800b324 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 800b292:	4b28      	ldr	r3, [pc, #160]	; (800b334 <vTaskSwitchContext+0xb8>)
 800b294:	2200      	movs	r2, #0
 800b296:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b298:	4b27      	ldr	r3, [pc, #156]	; (800b338 <vTaskSwitchContext+0xbc>)
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	60fb      	str	r3, [r7, #12]
 800b29e:	e012      	b.n	800b2c6 <vTaskSwitchContext+0x4a>
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d10c      	bne.n	800b2c0 <vTaskSwitchContext+0x44>
	__asm volatile
 800b2a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2aa:	b672      	cpsid	i
 800b2ac:	f383 8811 	msr	BASEPRI, r3
 800b2b0:	f3bf 8f6f 	isb	sy
 800b2b4:	f3bf 8f4f 	dsb	sy
 800b2b8:	b662      	cpsie	i
 800b2ba:	607b      	str	r3, [r7, #4]
}
 800b2bc:	bf00      	nop
 800b2be:	e7fe      	b.n	800b2be <vTaskSwitchContext+0x42>
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	3b01      	subs	r3, #1
 800b2c4:	60fb      	str	r3, [r7, #12]
 800b2c6:	491d      	ldr	r1, [pc, #116]	; (800b33c <vTaskSwitchContext+0xc0>)
 800b2c8:	68fa      	ldr	r2, [r7, #12]
 800b2ca:	4613      	mov	r3, r2
 800b2cc:	009b      	lsls	r3, r3, #2
 800b2ce:	4413      	add	r3, r2
 800b2d0:	009b      	lsls	r3, r3, #2
 800b2d2:	440b      	add	r3, r1
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d0e2      	beq.n	800b2a0 <vTaskSwitchContext+0x24>
 800b2da:	68fa      	ldr	r2, [r7, #12]
 800b2dc:	4613      	mov	r3, r2
 800b2de:	009b      	lsls	r3, r3, #2
 800b2e0:	4413      	add	r3, r2
 800b2e2:	009b      	lsls	r3, r3, #2
 800b2e4:	4a15      	ldr	r2, [pc, #84]	; (800b33c <vTaskSwitchContext+0xc0>)
 800b2e6:	4413      	add	r3, r2
 800b2e8:	60bb      	str	r3, [r7, #8]
 800b2ea:	68bb      	ldr	r3, [r7, #8]
 800b2ec:	685b      	ldr	r3, [r3, #4]
 800b2ee:	685a      	ldr	r2, [r3, #4]
 800b2f0:	68bb      	ldr	r3, [r7, #8]
 800b2f2:	605a      	str	r2, [r3, #4]
 800b2f4:	68bb      	ldr	r3, [r7, #8]
 800b2f6:	685a      	ldr	r2, [r3, #4]
 800b2f8:	68bb      	ldr	r3, [r7, #8]
 800b2fa:	3308      	adds	r3, #8
 800b2fc:	429a      	cmp	r2, r3
 800b2fe:	d104      	bne.n	800b30a <vTaskSwitchContext+0x8e>
 800b300:	68bb      	ldr	r3, [r7, #8]
 800b302:	685b      	ldr	r3, [r3, #4]
 800b304:	685a      	ldr	r2, [r3, #4]
 800b306:	68bb      	ldr	r3, [r7, #8]
 800b308:	605a      	str	r2, [r3, #4]
 800b30a:	68bb      	ldr	r3, [r7, #8]
 800b30c:	685b      	ldr	r3, [r3, #4]
 800b30e:	68db      	ldr	r3, [r3, #12]
 800b310:	4a0b      	ldr	r2, [pc, #44]	; (800b340 <vTaskSwitchContext+0xc4>)
 800b312:	6013      	str	r3, [r2, #0]
 800b314:	4a08      	ldr	r2, [pc, #32]	; (800b338 <vTaskSwitchContext+0xbc>)
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b31a:	4b09      	ldr	r3, [pc, #36]	; (800b340 <vTaskSwitchContext+0xc4>)
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	3354      	adds	r3, #84	; 0x54
 800b320:	4a08      	ldr	r2, [pc, #32]	; (800b344 <vTaskSwitchContext+0xc8>)
 800b322:	6013      	str	r3, [r2, #0]
}
 800b324:	bf00      	nop
 800b326:	3714      	adds	r7, #20
 800b328:	46bd      	mov	sp, r7
 800b32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32e:	4770      	bx	lr
 800b330:	20007e60 	.word	0x20007e60
 800b334:	20007e4c 	.word	0x20007e4c
 800b338:	20007e40 	.word	0x20007e40
 800b33c:	20007968 	.word	0x20007968
 800b340:	20007964 	.word	0x20007964
 800b344:	20002478 	.word	0x20002478

0800b348 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b084      	sub	sp, #16
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
 800b350:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d10c      	bne.n	800b372 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800b358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b35c:	b672      	cpsid	i
 800b35e:	f383 8811 	msr	BASEPRI, r3
 800b362:	f3bf 8f6f 	isb	sy
 800b366:	f3bf 8f4f 	dsb	sy
 800b36a:	b662      	cpsie	i
 800b36c:	60fb      	str	r3, [r7, #12]
}
 800b36e:	bf00      	nop
 800b370:	e7fe      	b.n	800b370 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b372:	4b07      	ldr	r3, [pc, #28]	; (800b390 <vTaskPlaceOnEventList+0x48>)
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	3318      	adds	r3, #24
 800b378:	4619      	mov	r1, r3
 800b37a:	6878      	ldr	r0, [r7, #4]
 800b37c:	f7fe fe2d 	bl	8009fda <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b380:	2101      	movs	r1, #1
 800b382:	6838      	ldr	r0, [r7, #0]
 800b384:	f000 fab6 	bl	800b8f4 <prvAddCurrentTaskToDelayedList>
}
 800b388:	bf00      	nop
 800b38a:	3710      	adds	r7, #16
 800b38c:	46bd      	mov	sp, r7
 800b38e:	bd80      	pop	{r7, pc}
 800b390:	20007964 	.word	0x20007964

0800b394 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b394:	b580      	push	{r7, lr}
 800b396:	b086      	sub	sp, #24
 800b398:	af00      	add	r7, sp, #0
 800b39a:	60f8      	str	r0, [r7, #12]
 800b39c:	60b9      	str	r1, [r7, #8]
 800b39e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d10c      	bne.n	800b3c0 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800b3a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3aa:	b672      	cpsid	i
 800b3ac:	f383 8811 	msr	BASEPRI, r3
 800b3b0:	f3bf 8f6f 	isb	sy
 800b3b4:	f3bf 8f4f 	dsb	sy
 800b3b8:	b662      	cpsie	i
 800b3ba:	617b      	str	r3, [r7, #20]
}
 800b3bc:	bf00      	nop
 800b3be:	e7fe      	b.n	800b3be <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b3c0:	4b0a      	ldr	r3, [pc, #40]	; (800b3ec <vTaskPlaceOnEventListRestricted+0x58>)
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	3318      	adds	r3, #24
 800b3c6:	4619      	mov	r1, r3
 800b3c8:	68f8      	ldr	r0, [r7, #12]
 800b3ca:	f7fe fde2 	bl	8009f92 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d002      	beq.n	800b3da <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800b3d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b3d8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b3da:	6879      	ldr	r1, [r7, #4]
 800b3dc:	68b8      	ldr	r0, [r7, #8]
 800b3de:	f000 fa89 	bl	800b8f4 <prvAddCurrentTaskToDelayedList>
	}
 800b3e2:	bf00      	nop
 800b3e4:	3718      	adds	r7, #24
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	bd80      	pop	{r7, pc}
 800b3ea:	bf00      	nop
 800b3ec:	20007964 	.word	0x20007964

0800b3f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b086      	sub	sp, #24
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	68db      	ldr	r3, [r3, #12]
 800b3fc:	68db      	ldr	r3, [r3, #12]
 800b3fe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b400:	693b      	ldr	r3, [r7, #16]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d10c      	bne.n	800b420 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800b406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b40a:	b672      	cpsid	i
 800b40c:	f383 8811 	msr	BASEPRI, r3
 800b410:	f3bf 8f6f 	isb	sy
 800b414:	f3bf 8f4f 	dsb	sy
 800b418:	b662      	cpsie	i
 800b41a:	60fb      	str	r3, [r7, #12]
}
 800b41c:	bf00      	nop
 800b41e:	e7fe      	b.n	800b41e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b420:	693b      	ldr	r3, [r7, #16]
 800b422:	3318      	adds	r3, #24
 800b424:	4618      	mov	r0, r3
 800b426:	f7fe fe11 	bl	800a04c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b42a:	4b1e      	ldr	r3, [pc, #120]	; (800b4a4 <xTaskRemoveFromEventList+0xb4>)
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d11d      	bne.n	800b46e <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b432:	693b      	ldr	r3, [r7, #16]
 800b434:	3304      	adds	r3, #4
 800b436:	4618      	mov	r0, r3
 800b438:	f7fe fe08 	bl	800a04c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b43c:	693b      	ldr	r3, [r7, #16]
 800b43e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b440:	4b19      	ldr	r3, [pc, #100]	; (800b4a8 <xTaskRemoveFromEventList+0xb8>)
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	429a      	cmp	r2, r3
 800b446:	d903      	bls.n	800b450 <xTaskRemoveFromEventList+0x60>
 800b448:	693b      	ldr	r3, [r7, #16]
 800b44a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b44c:	4a16      	ldr	r2, [pc, #88]	; (800b4a8 <xTaskRemoveFromEventList+0xb8>)
 800b44e:	6013      	str	r3, [r2, #0]
 800b450:	693b      	ldr	r3, [r7, #16]
 800b452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b454:	4613      	mov	r3, r2
 800b456:	009b      	lsls	r3, r3, #2
 800b458:	4413      	add	r3, r2
 800b45a:	009b      	lsls	r3, r3, #2
 800b45c:	4a13      	ldr	r2, [pc, #76]	; (800b4ac <xTaskRemoveFromEventList+0xbc>)
 800b45e:	441a      	add	r2, r3
 800b460:	693b      	ldr	r3, [r7, #16]
 800b462:	3304      	adds	r3, #4
 800b464:	4619      	mov	r1, r3
 800b466:	4610      	mov	r0, r2
 800b468:	f7fe fd93 	bl	8009f92 <vListInsertEnd>
 800b46c:	e005      	b.n	800b47a <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b46e:	693b      	ldr	r3, [r7, #16]
 800b470:	3318      	adds	r3, #24
 800b472:	4619      	mov	r1, r3
 800b474:	480e      	ldr	r0, [pc, #56]	; (800b4b0 <xTaskRemoveFromEventList+0xc0>)
 800b476:	f7fe fd8c 	bl	8009f92 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b47a:	693b      	ldr	r3, [r7, #16]
 800b47c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b47e:	4b0d      	ldr	r3, [pc, #52]	; (800b4b4 <xTaskRemoveFromEventList+0xc4>)
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b484:	429a      	cmp	r2, r3
 800b486:	d905      	bls.n	800b494 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b488:	2301      	movs	r3, #1
 800b48a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b48c:	4b0a      	ldr	r3, [pc, #40]	; (800b4b8 <xTaskRemoveFromEventList+0xc8>)
 800b48e:	2201      	movs	r2, #1
 800b490:	601a      	str	r2, [r3, #0]
 800b492:	e001      	b.n	800b498 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800b494:	2300      	movs	r3, #0
 800b496:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b498:	697b      	ldr	r3, [r7, #20]
}
 800b49a:	4618      	mov	r0, r3
 800b49c:	3718      	adds	r7, #24
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	bd80      	pop	{r7, pc}
 800b4a2:	bf00      	nop
 800b4a4:	20007e60 	.word	0x20007e60
 800b4a8:	20007e40 	.word	0x20007e40
 800b4ac:	20007968 	.word	0x20007968
 800b4b0:	20007df8 	.word	0x20007df8
 800b4b4:	20007964 	.word	0x20007964
 800b4b8:	20007e4c 	.word	0x20007e4c

0800b4bc <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b084      	sub	sp, #16
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d10c      	bne.n	800b4e4 <vTaskSetTimeOutState+0x28>
	__asm volatile
 800b4ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4ce:	b672      	cpsid	i
 800b4d0:	f383 8811 	msr	BASEPRI, r3
 800b4d4:	f3bf 8f6f 	isb	sy
 800b4d8:	f3bf 8f4f 	dsb	sy
 800b4dc:	b662      	cpsie	i
 800b4de:	60fb      	str	r3, [r7, #12]
}
 800b4e0:	bf00      	nop
 800b4e2:	e7fe      	b.n	800b4e2 <vTaskSetTimeOutState+0x26>
	taskENTER_CRITICAL();
 800b4e4:	f000 fec2 	bl	800c26c <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b4e8:	4b06      	ldr	r3, [pc, #24]	; (800b504 <vTaskSetTimeOutState+0x48>)
 800b4ea:	681a      	ldr	r2, [r3, #0]
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800b4f0:	4b05      	ldr	r3, [pc, #20]	; (800b508 <vTaskSetTimeOutState+0x4c>)
 800b4f2:	681a      	ldr	r2, [r3, #0]
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800b4f8:	f000 feec 	bl	800c2d4 <vPortExitCritical>
}
 800b4fc:	bf00      	nop
 800b4fe:	3710      	adds	r7, #16
 800b500:	46bd      	mov	sp, r7
 800b502:	bd80      	pop	{r7, pc}
 800b504:	20007e50 	.word	0x20007e50
 800b508:	20007e3c 	.word	0x20007e3c

0800b50c <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b50c:	b480      	push	{r7}
 800b50e:	b083      	sub	sp, #12
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b514:	4b06      	ldr	r3, [pc, #24]	; (800b530 <vTaskInternalSetTimeOutState+0x24>)
 800b516:	681a      	ldr	r2, [r3, #0]
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b51c:	4b05      	ldr	r3, [pc, #20]	; (800b534 <vTaskInternalSetTimeOutState+0x28>)
 800b51e:	681a      	ldr	r2, [r3, #0]
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	605a      	str	r2, [r3, #4]
}
 800b524:	bf00      	nop
 800b526:	370c      	adds	r7, #12
 800b528:	46bd      	mov	sp, r7
 800b52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52e:	4770      	bx	lr
 800b530:	20007e50 	.word	0x20007e50
 800b534:	20007e3c 	.word	0x20007e3c

0800b538 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	b088      	sub	sp, #32
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
 800b540:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d10c      	bne.n	800b562 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800b548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b54c:	b672      	cpsid	i
 800b54e:	f383 8811 	msr	BASEPRI, r3
 800b552:	f3bf 8f6f 	isb	sy
 800b556:	f3bf 8f4f 	dsb	sy
 800b55a:	b662      	cpsie	i
 800b55c:	613b      	str	r3, [r7, #16]
}
 800b55e:	bf00      	nop
 800b560:	e7fe      	b.n	800b560 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800b562:	683b      	ldr	r3, [r7, #0]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d10c      	bne.n	800b582 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800b568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b56c:	b672      	cpsid	i
 800b56e:	f383 8811 	msr	BASEPRI, r3
 800b572:	f3bf 8f6f 	isb	sy
 800b576:	f3bf 8f4f 	dsb	sy
 800b57a:	b662      	cpsie	i
 800b57c:	60fb      	str	r3, [r7, #12]
}
 800b57e:	bf00      	nop
 800b580:	e7fe      	b.n	800b580 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800b582:	f000 fe73 	bl	800c26c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b586:	4b1d      	ldr	r3, [pc, #116]	; (800b5fc <xTaskCheckForTimeOut+0xc4>)
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	685b      	ldr	r3, [r3, #4]
 800b590:	69ba      	ldr	r2, [r7, #24]
 800b592:	1ad3      	subs	r3, r2, r3
 800b594:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b596:	683b      	ldr	r3, [r7, #0]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b59e:	d102      	bne.n	800b5a6 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	61fb      	str	r3, [r7, #28]
 800b5a4:	e023      	b.n	800b5ee <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	681a      	ldr	r2, [r3, #0]
 800b5aa:	4b15      	ldr	r3, [pc, #84]	; (800b600 <xTaskCheckForTimeOut+0xc8>)
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	429a      	cmp	r2, r3
 800b5b0:	d007      	beq.n	800b5c2 <xTaskCheckForTimeOut+0x8a>
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	685b      	ldr	r3, [r3, #4]
 800b5b6:	69ba      	ldr	r2, [r7, #24]
 800b5b8:	429a      	cmp	r2, r3
 800b5ba:	d302      	bcc.n	800b5c2 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b5bc:	2301      	movs	r3, #1
 800b5be:	61fb      	str	r3, [r7, #28]
 800b5c0:	e015      	b.n	800b5ee <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b5c2:	683b      	ldr	r3, [r7, #0]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	697a      	ldr	r2, [r7, #20]
 800b5c8:	429a      	cmp	r2, r3
 800b5ca:	d20b      	bcs.n	800b5e4 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b5cc:	683b      	ldr	r3, [r7, #0]
 800b5ce:	681a      	ldr	r2, [r3, #0]
 800b5d0:	697b      	ldr	r3, [r7, #20]
 800b5d2:	1ad2      	subs	r2, r2, r3
 800b5d4:	683b      	ldr	r3, [r7, #0]
 800b5d6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b5d8:	6878      	ldr	r0, [r7, #4]
 800b5da:	f7ff ff97 	bl	800b50c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b5de:	2300      	movs	r3, #0
 800b5e0:	61fb      	str	r3, [r7, #28]
 800b5e2:	e004      	b.n	800b5ee <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800b5e4:	683b      	ldr	r3, [r7, #0]
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b5ea:	2301      	movs	r3, #1
 800b5ec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b5ee:	f000 fe71 	bl	800c2d4 <vPortExitCritical>

	return xReturn;
 800b5f2:	69fb      	ldr	r3, [r7, #28]
}
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	3720      	adds	r7, #32
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	bd80      	pop	{r7, pc}
 800b5fc:	20007e3c 	.word	0x20007e3c
 800b600:	20007e50 	.word	0x20007e50

0800b604 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b604:	b480      	push	{r7}
 800b606:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b608:	4b03      	ldr	r3, [pc, #12]	; (800b618 <vTaskMissedYield+0x14>)
 800b60a:	2201      	movs	r2, #1
 800b60c:	601a      	str	r2, [r3, #0]
}
 800b60e:	bf00      	nop
 800b610:	46bd      	mov	sp, r7
 800b612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b616:	4770      	bx	lr
 800b618:	20007e4c 	.word	0x20007e4c

0800b61c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b082      	sub	sp, #8
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b624:	f000 f852 	bl	800b6cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b628:	4b06      	ldr	r3, [pc, #24]	; (800b644 <prvIdleTask+0x28>)
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	2b01      	cmp	r3, #1
 800b62e:	d9f9      	bls.n	800b624 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b630:	4b05      	ldr	r3, [pc, #20]	; (800b648 <prvIdleTask+0x2c>)
 800b632:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b636:	601a      	str	r2, [r3, #0]
 800b638:	f3bf 8f4f 	dsb	sy
 800b63c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b640:	e7f0      	b.n	800b624 <prvIdleTask+0x8>
 800b642:	bf00      	nop
 800b644:	20007968 	.word	0x20007968
 800b648:	e000ed04 	.word	0xe000ed04

0800b64c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b082      	sub	sp, #8
 800b650:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b652:	2300      	movs	r3, #0
 800b654:	607b      	str	r3, [r7, #4]
 800b656:	e00c      	b.n	800b672 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b658:	687a      	ldr	r2, [r7, #4]
 800b65a:	4613      	mov	r3, r2
 800b65c:	009b      	lsls	r3, r3, #2
 800b65e:	4413      	add	r3, r2
 800b660:	009b      	lsls	r3, r3, #2
 800b662:	4a12      	ldr	r2, [pc, #72]	; (800b6ac <prvInitialiseTaskLists+0x60>)
 800b664:	4413      	add	r3, r2
 800b666:	4618      	mov	r0, r3
 800b668:	f7fe fc66 	bl	8009f38 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	3301      	adds	r3, #1
 800b670:	607b      	str	r3, [r7, #4]
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	2b37      	cmp	r3, #55	; 0x37
 800b676:	d9ef      	bls.n	800b658 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b678:	480d      	ldr	r0, [pc, #52]	; (800b6b0 <prvInitialiseTaskLists+0x64>)
 800b67a:	f7fe fc5d 	bl	8009f38 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b67e:	480d      	ldr	r0, [pc, #52]	; (800b6b4 <prvInitialiseTaskLists+0x68>)
 800b680:	f7fe fc5a 	bl	8009f38 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b684:	480c      	ldr	r0, [pc, #48]	; (800b6b8 <prvInitialiseTaskLists+0x6c>)
 800b686:	f7fe fc57 	bl	8009f38 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b68a:	480c      	ldr	r0, [pc, #48]	; (800b6bc <prvInitialiseTaskLists+0x70>)
 800b68c:	f7fe fc54 	bl	8009f38 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b690:	480b      	ldr	r0, [pc, #44]	; (800b6c0 <prvInitialiseTaskLists+0x74>)
 800b692:	f7fe fc51 	bl	8009f38 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b696:	4b0b      	ldr	r3, [pc, #44]	; (800b6c4 <prvInitialiseTaskLists+0x78>)
 800b698:	4a05      	ldr	r2, [pc, #20]	; (800b6b0 <prvInitialiseTaskLists+0x64>)
 800b69a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b69c:	4b0a      	ldr	r3, [pc, #40]	; (800b6c8 <prvInitialiseTaskLists+0x7c>)
 800b69e:	4a05      	ldr	r2, [pc, #20]	; (800b6b4 <prvInitialiseTaskLists+0x68>)
 800b6a0:	601a      	str	r2, [r3, #0]
}
 800b6a2:	bf00      	nop
 800b6a4:	3708      	adds	r7, #8
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	bd80      	pop	{r7, pc}
 800b6aa:	bf00      	nop
 800b6ac:	20007968 	.word	0x20007968
 800b6b0:	20007dc8 	.word	0x20007dc8
 800b6b4:	20007ddc 	.word	0x20007ddc
 800b6b8:	20007df8 	.word	0x20007df8
 800b6bc:	20007e0c 	.word	0x20007e0c
 800b6c0:	20007e24 	.word	0x20007e24
 800b6c4:	20007df0 	.word	0x20007df0
 800b6c8:	20007df4 	.word	0x20007df4

0800b6cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b082      	sub	sp, #8
 800b6d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b6d2:	e019      	b.n	800b708 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b6d4:	f000 fdca 	bl	800c26c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b6d8:	4b10      	ldr	r3, [pc, #64]	; (800b71c <prvCheckTasksWaitingTermination+0x50>)
 800b6da:	68db      	ldr	r3, [r3, #12]
 800b6dc:	68db      	ldr	r3, [r3, #12]
 800b6de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	3304      	adds	r3, #4
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	f7fe fcb1 	bl	800a04c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b6ea:	4b0d      	ldr	r3, [pc, #52]	; (800b720 <prvCheckTasksWaitingTermination+0x54>)
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	3b01      	subs	r3, #1
 800b6f0:	4a0b      	ldr	r2, [pc, #44]	; (800b720 <prvCheckTasksWaitingTermination+0x54>)
 800b6f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b6f4:	4b0b      	ldr	r3, [pc, #44]	; (800b724 <prvCheckTasksWaitingTermination+0x58>)
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	3b01      	subs	r3, #1
 800b6fa:	4a0a      	ldr	r2, [pc, #40]	; (800b724 <prvCheckTasksWaitingTermination+0x58>)
 800b6fc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b6fe:	f000 fde9 	bl	800c2d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b702:	6878      	ldr	r0, [r7, #4]
 800b704:	f000 f810 	bl	800b728 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b708:	4b06      	ldr	r3, [pc, #24]	; (800b724 <prvCheckTasksWaitingTermination+0x58>)
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d1e1      	bne.n	800b6d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b710:	bf00      	nop
 800b712:	bf00      	nop
 800b714:	3708      	adds	r7, #8
 800b716:	46bd      	mov	sp, r7
 800b718:	bd80      	pop	{r7, pc}
 800b71a:	bf00      	nop
 800b71c:	20007e0c 	.word	0x20007e0c
 800b720:	20007e38 	.word	0x20007e38
 800b724:	20007e20 	.word	0x20007e20

0800b728 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b728:	b580      	push	{r7, lr}
 800b72a:	b084      	sub	sp, #16
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	3354      	adds	r3, #84	; 0x54
 800b734:	4618      	mov	r0, r3
 800b736:	f012 fa8d 	bl	801dc54 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800b740:	2b00      	cmp	r3, #0
 800b742:	d108      	bne.n	800b756 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b748:	4618      	mov	r0, r3
 800b74a:	f000 ff85 	bl	800c658 <vPortFree>
				vPortFree( pxTCB );
 800b74e:	6878      	ldr	r0, [r7, #4]
 800b750:	f000 ff82 	bl	800c658 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b754:	e01a      	b.n	800b78c <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800b75c:	2b01      	cmp	r3, #1
 800b75e:	d103      	bne.n	800b768 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b760:	6878      	ldr	r0, [r7, #4]
 800b762:	f000 ff79 	bl	800c658 <vPortFree>
	}
 800b766:	e011      	b.n	800b78c <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800b76e:	2b02      	cmp	r3, #2
 800b770:	d00c      	beq.n	800b78c <prvDeleteTCB+0x64>
	__asm volatile
 800b772:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b776:	b672      	cpsid	i
 800b778:	f383 8811 	msr	BASEPRI, r3
 800b77c:	f3bf 8f6f 	isb	sy
 800b780:	f3bf 8f4f 	dsb	sy
 800b784:	b662      	cpsie	i
 800b786:	60fb      	str	r3, [r7, #12]
}
 800b788:	bf00      	nop
 800b78a:	e7fe      	b.n	800b78a <prvDeleteTCB+0x62>
	}
 800b78c:	bf00      	nop
 800b78e:	3710      	adds	r7, #16
 800b790:	46bd      	mov	sp, r7
 800b792:	bd80      	pop	{r7, pc}

0800b794 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b794:	b480      	push	{r7}
 800b796:	b083      	sub	sp, #12
 800b798:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b79a:	4b0c      	ldr	r3, [pc, #48]	; (800b7cc <prvResetNextTaskUnblockTime+0x38>)
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d104      	bne.n	800b7ae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b7a4:	4b0a      	ldr	r3, [pc, #40]	; (800b7d0 <prvResetNextTaskUnblockTime+0x3c>)
 800b7a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b7aa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b7ac:	e008      	b.n	800b7c0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7ae:	4b07      	ldr	r3, [pc, #28]	; (800b7cc <prvResetNextTaskUnblockTime+0x38>)
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	68db      	ldr	r3, [r3, #12]
 800b7b4:	68db      	ldr	r3, [r3, #12]
 800b7b6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	685b      	ldr	r3, [r3, #4]
 800b7bc:	4a04      	ldr	r2, [pc, #16]	; (800b7d0 <prvResetNextTaskUnblockTime+0x3c>)
 800b7be:	6013      	str	r3, [r2, #0]
}
 800b7c0:	bf00      	nop
 800b7c2:	370c      	adds	r7, #12
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ca:	4770      	bx	lr
 800b7cc:	20007df0 	.word	0x20007df0
 800b7d0:	20007e58 	.word	0x20007e58

0800b7d4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b7d4:	b480      	push	{r7}
 800b7d6:	b083      	sub	sp, #12
 800b7d8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b7da:	4b0b      	ldr	r3, [pc, #44]	; (800b808 <xTaskGetSchedulerState+0x34>)
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d102      	bne.n	800b7e8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b7e2:	2301      	movs	r3, #1
 800b7e4:	607b      	str	r3, [r7, #4]
 800b7e6:	e008      	b.n	800b7fa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b7e8:	4b08      	ldr	r3, [pc, #32]	; (800b80c <xTaskGetSchedulerState+0x38>)
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d102      	bne.n	800b7f6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b7f0:	2302      	movs	r3, #2
 800b7f2:	607b      	str	r3, [r7, #4]
 800b7f4:	e001      	b.n	800b7fa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b7fa:	687b      	ldr	r3, [r7, #4]
	}
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	370c      	adds	r7, #12
 800b800:	46bd      	mov	sp, r7
 800b802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b806:	4770      	bx	lr
 800b808:	20007e44 	.word	0x20007e44
 800b80c:	20007e60 	.word	0x20007e60

0800b810 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b810:	b580      	push	{r7, lr}
 800b812:	b086      	sub	sp, #24
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b81c:	2300      	movs	r3, #0
 800b81e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d05a      	beq.n	800b8dc <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b826:	4b30      	ldr	r3, [pc, #192]	; (800b8e8 <xTaskPriorityDisinherit+0xd8>)
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	693a      	ldr	r2, [r7, #16]
 800b82c:	429a      	cmp	r2, r3
 800b82e:	d00c      	beq.n	800b84a <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800b830:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b834:	b672      	cpsid	i
 800b836:	f383 8811 	msr	BASEPRI, r3
 800b83a:	f3bf 8f6f 	isb	sy
 800b83e:	f3bf 8f4f 	dsb	sy
 800b842:	b662      	cpsie	i
 800b844:	60fb      	str	r3, [r7, #12]
}
 800b846:	bf00      	nop
 800b848:	e7fe      	b.n	800b848 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800b84a:	693b      	ldr	r3, [r7, #16]
 800b84c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d10c      	bne.n	800b86c <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800b852:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b856:	b672      	cpsid	i
 800b858:	f383 8811 	msr	BASEPRI, r3
 800b85c:	f3bf 8f6f 	isb	sy
 800b860:	f3bf 8f4f 	dsb	sy
 800b864:	b662      	cpsie	i
 800b866:	60bb      	str	r3, [r7, #8]
}
 800b868:	bf00      	nop
 800b86a:	e7fe      	b.n	800b86a <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800b86c:	693b      	ldr	r3, [r7, #16]
 800b86e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b870:	1e5a      	subs	r2, r3, #1
 800b872:	693b      	ldr	r3, [r7, #16]
 800b874:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b876:	693b      	ldr	r3, [r7, #16]
 800b878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b87a:	693b      	ldr	r3, [r7, #16]
 800b87c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b87e:	429a      	cmp	r2, r3
 800b880:	d02c      	beq.n	800b8dc <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b882:	693b      	ldr	r3, [r7, #16]
 800b884:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b886:	2b00      	cmp	r3, #0
 800b888:	d128      	bne.n	800b8dc <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b88a:	693b      	ldr	r3, [r7, #16]
 800b88c:	3304      	adds	r3, #4
 800b88e:	4618      	mov	r0, r3
 800b890:	f7fe fbdc 	bl	800a04c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b894:	693b      	ldr	r3, [r7, #16]
 800b896:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b898:	693b      	ldr	r3, [r7, #16]
 800b89a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b89c:	693b      	ldr	r3, [r7, #16]
 800b89e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8a0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b8a4:	693b      	ldr	r3, [r7, #16]
 800b8a6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b8a8:	693b      	ldr	r3, [r7, #16]
 800b8aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8ac:	4b0f      	ldr	r3, [pc, #60]	; (800b8ec <xTaskPriorityDisinherit+0xdc>)
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	429a      	cmp	r2, r3
 800b8b2:	d903      	bls.n	800b8bc <xTaskPriorityDisinherit+0xac>
 800b8b4:	693b      	ldr	r3, [r7, #16]
 800b8b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8b8:	4a0c      	ldr	r2, [pc, #48]	; (800b8ec <xTaskPriorityDisinherit+0xdc>)
 800b8ba:	6013      	str	r3, [r2, #0]
 800b8bc:	693b      	ldr	r3, [r7, #16]
 800b8be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8c0:	4613      	mov	r3, r2
 800b8c2:	009b      	lsls	r3, r3, #2
 800b8c4:	4413      	add	r3, r2
 800b8c6:	009b      	lsls	r3, r3, #2
 800b8c8:	4a09      	ldr	r2, [pc, #36]	; (800b8f0 <xTaskPriorityDisinherit+0xe0>)
 800b8ca:	441a      	add	r2, r3
 800b8cc:	693b      	ldr	r3, [r7, #16]
 800b8ce:	3304      	adds	r3, #4
 800b8d0:	4619      	mov	r1, r3
 800b8d2:	4610      	mov	r0, r2
 800b8d4:	f7fe fb5d 	bl	8009f92 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b8d8:	2301      	movs	r3, #1
 800b8da:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b8dc:	697b      	ldr	r3, [r7, #20]
	}
 800b8de:	4618      	mov	r0, r3
 800b8e0:	3718      	adds	r7, #24
 800b8e2:	46bd      	mov	sp, r7
 800b8e4:	bd80      	pop	{r7, pc}
 800b8e6:	bf00      	nop
 800b8e8:	20007964 	.word	0x20007964
 800b8ec:	20007e40 	.word	0x20007e40
 800b8f0:	20007968 	.word	0x20007968

0800b8f4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b084      	sub	sp, #16
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
 800b8fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b8fe:	4b21      	ldr	r3, [pc, #132]	; (800b984 <prvAddCurrentTaskToDelayedList+0x90>)
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b904:	4b20      	ldr	r3, [pc, #128]	; (800b988 <prvAddCurrentTaskToDelayedList+0x94>)
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	3304      	adds	r3, #4
 800b90a:	4618      	mov	r0, r3
 800b90c:	f7fe fb9e 	bl	800a04c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b916:	d10a      	bne.n	800b92e <prvAddCurrentTaskToDelayedList+0x3a>
 800b918:	683b      	ldr	r3, [r7, #0]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d007      	beq.n	800b92e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b91e:	4b1a      	ldr	r3, [pc, #104]	; (800b988 <prvAddCurrentTaskToDelayedList+0x94>)
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	3304      	adds	r3, #4
 800b924:	4619      	mov	r1, r3
 800b926:	4819      	ldr	r0, [pc, #100]	; (800b98c <prvAddCurrentTaskToDelayedList+0x98>)
 800b928:	f7fe fb33 	bl	8009f92 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b92c:	e026      	b.n	800b97c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b92e:	68fa      	ldr	r2, [r7, #12]
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	4413      	add	r3, r2
 800b934:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b936:	4b14      	ldr	r3, [pc, #80]	; (800b988 <prvAddCurrentTaskToDelayedList+0x94>)
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	68ba      	ldr	r2, [r7, #8]
 800b93c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b93e:	68ba      	ldr	r2, [r7, #8]
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	429a      	cmp	r2, r3
 800b944:	d209      	bcs.n	800b95a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b946:	4b12      	ldr	r3, [pc, #72]	; (800b990 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b948:	681a      	ldr	r2, [r3, #0]
 800b94a:	4b0f      	ldr	r3, [pc, #60]	; (800b988 <prvAddCurrentTaskToDelayedList+0x94>)
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	3304      	adds	r3, #4
 800b950:	4619      	mov	r1, r3
 800b952:	4610      	mov	r0, r2
 800b954:	f7fe fb41 	bl	8009fda <vListInsert>
}
 800b958:	e010      	b.n	800b97c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b95a:	4b0e      	ldr	r3, [pc, #56]	; (800b994 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b95c:	681a      	ldr	r2, [r3, #0]
 800b95e:	4b0a      	ldr	r3, [pc, #40]	; (800b988 <prvAddCurrentTaskToDelayedList+0x94>)
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	3304      	adds	r3, #4
 800b964:	4619      	mov	r1, r3
 800b966:	4610      	mov	r0, r2
 800b968:	f7fe fb37 	bl	8009fda <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b96c:	4b0a      	ldr	r3, [pc, #40]	; (800b998 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	68ba      	ldr	r2, [r7, #8]
 800b972:	429a      	cmp	r2, r3
 800b974:	d202      	bcs.n	800b97c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b976:	4a08      	ldr	r2, [pc, #32]	; (800b998 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b978:	68bb      	ldr	r3, [r7, #8]
 800b97a:	6013      	str	r3, [r2, #0]
}
 800b97c:	bf00      	nop
 800b97e:	3710      	adds	r7, #16
 800b980:	46bd      	mov	sp, r7
 800b982:	bd80      	pop	{r7, pc}
 800b984:	20007e3c 	.word	0x20007e3c
 800b988:	20007964 	.word	0x20007964
 800b98c:	20007e24 	.word	0x20007e24
 800b990:	20007df4 	.word	0x20007df4
 800b994:	20007df0 	.word	0x20007df0
 800b998:	20007e58 	.word	0x20007e58

0800b99c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b08a      	sub	sp, #40	; 0x28
 800b9a0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b9a6:	f000 fb15 	bl	800bfd4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b9aa:	4b1d      	ldr	r3, [pc, #116]	; (800ba20 <xTimerCreateTimerTask+0x84>)
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d021      	beq.n	800b9f6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b9ba:	1d3a      	adds	r2, r7, #4
 800b9bc:	f107 0108 	add.w	r1, r7, #8
 800b9c0:	f107 030c 	add.w	r3, r7, #12
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	f7fe fa9d 	bl	8009f04 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b9ca:	6879      	ldr	r1, [r7, #4]
 800b9cc:	68bb      	ldr	r3, [r7, #8]
 800b9ce:	68fa      	ldr	r2, [r7, #12]
 800b9d0:	9202      	str	r2, [sp, #8]
 800b9d2:	9301      	str	r3, [sp, #4]
 800b9d4:	2302      	movs	r3, #2
 800b9d6:	9300      	str	r3, [sp, #0]
 800b9d8:	2300      	movs	r3, #0
 800b9da:	460a      	mov	r2, r1
 800b9dc:	4911      	ldr	r1, [pc, #68]	; (800ba24 <xTimerCreateTimerTask+0x88>)
 800b9de:	4812      	ldr	r0, [pc, #72]	; (800ba28 <xTimerCreateTimerTask+0x8c>)
 800b9e0:	f7ff f868 	bl	800aab4 <xTaskCreateStatic>
 800b9e4:	4603      	mov	r3, r0
 800b9e6:	4a11      	ldr	r2, [pc, #68]	; (800ba2c <xTimerCreateTimerTask+0x90>)
 800b9e8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b9ea:	4b10      	ldr	r3, [pc, #64]	; (800ba2c <xTimerCreateTimerTask+0x90>)
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d001      	beq.n	800b9f6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b9f2:	2301      	movs	r3, #1
 800b9f4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b9f6:	697b      	ldr	r3, [r7, #20]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d10c      	bne.n	800ba16 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800b9fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba00:	b672      	cpsid	i
 800ba02:	f383 8811 	msr	BASEPRI, r3
 800ba06:	f3bf 8f6f 	isb	sy
 800ba0a:	f3bf 8f4f 	dsb	sy
 800ba0e:	b662      	cpsie	i
 800ba10:	613b      	str	r3, [r7, #16]
}
 800ba12:	bf00      	nop
 800ba14:	e7fe      	b.n	800ba14 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800ba16:	697b      	ldr	r3, [r7, #20]
}
 800ba18:	4618      	mov	r0, r3
 800ba1a:	3718      	adds	r7, #24
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	bd80      	pop	{r7, pc}
 800ba20:	20007e94 	.word	0x20007e94
 800ba24:	0801ec28 	.word	0x0801ec28
 800ba28:	0800bb6d 	.word	0x0800bb6d
 800ba2c:	20007e98 	.word	0x20007e98

0800ba30 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b08a      	sub	sp, #40	; 0x28
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	60f8      	str	r0, [r7, #12]
 800ba38:	60b9      	str	r1, [r7, #8]
 800ba3a:	607a      	str	r2, [r7, #4]
 800ba3c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ba3e:	2300      	movs	r3, #0
 800ba40:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d10c      	bne.n	800ba62 <xTimerGenericCommand+0x32>
	__asm volatile
 800ba48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba4c:	b672      	cpsid	i
 800ba4e:	f383 8811 	msr	BASEPRI, r3
 800ba52:	f3bf 8f6f 	isb	sy
 800ba56:	f3bf 8f4f 	dsb	sy
 800ba5a:	b662      	cpsie	i
 800ba5c:	623b      	str	r3, [r7, #32]
}
 800ba5e:	bf00      	nop
 800ba60:	e7fe      	b.n	800ba60 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ba62:	4b1a      	ldr	r3, [pc, #104]	; (800bacc <xTimerGenericCommand+0x9c>)
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d02a      	beq.n	800bac0 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ba6a:	68bb      	ldr	r3, [r7, #8]
 800ba6c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ba76:	68bb      	ldr	r3, [r7, #8]
 800ba78:	2b05      	cmp	r3, #5
 800ba7a:	dc18      	bgt.n	800baae <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ba7c:	f7ff feaa 	bl	800b7d4 <xTaskGetSchedulerState>
 800ba80:	4603      	mov	r3, r0
 800ba82:	2b02      	cmp	r3, #2
 800ba84:	d109      	bne.n	800ba9a <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ba86:	4b11      	ldr	r3, [pc, #68]	; (800bacc <xTimerGenericCommand+0x9c>)
 800ba88:	6818      	ldr	r0, [r3, #0]
 800ba8a:	f107 0110 	add.w	r1, r7, #16
 800ba8e:	2300      	movs	r3, #0
 800ba90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba92:	f7fe fc15 	bl	800a2c0 <xQueueGenericSend>
 800ba96:	6278      	str	r0, [r7, #36]	; 0x24
 800ba98:	e012      	b.n	800bac0 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ba9a:	4b0c      	ldr	r3, [pc, #48]	; (800bacc <xTimerGenericCommand+0x9c>)
 800ba9c:	6818      	ldr	r0, [r3, #0]
 800ba9e:	f107 0110 	add.w	r1, r7, #16
 800baa2:	2300      	movs	r3, #0
 800baa4:	2200      	movs	r2, #0
 800baa6:	f7fe fc0b 	bl	800a2c0 <xQueueGenericSend>
 800baaa:	6278      	str	r0, [r7, #36]	; 0x24
 800baac:	e008      	b.n	800bac0 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800baae:	4b07      	ldr	r3, [pc, #28]	; (800bacc <xTimerGenericCommand+0x9c>)
 800bab0:	6818      	ldr	r0, [r3, #0]
 800bab2:	f107 0110 	add.w	r1, r7, #16
 800bab6:	2300      	movs	r3, #0
 800bab8:	683a      	ldr	r2, [r7, #0]
 800baba:	f7fe fd07 	bl	800a4cc <xQueueGenericSendFromISR>
 800babe:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bac2:	4618      	mov	r0, r3
 800bac4:	3728      	adds	r7, #40	; 0x28
 800bac6:	46bd      	mov	sp, r7
 800bac8:	bd80      	pop	{r7, pc}
 800baca:	bf00      	nop
 800bacc:	20007e94 	.word	0x20007e94

0800bad0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b088      	sub	sp, #32
 800bad4:	af02      	add	r7, sp, #8
 800bad6:	6078      	str	r0, [r7, #4]
 800bad8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bada:	4b23      	ldr	r3, [pc, #140]	; (800bb68 <prvProcessExpiredTimer+0x98>)
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	68db      	ldr	r3, [r3, #12]
 800bae0:	68db      	ldr	r3, [r3, #12]
 800bae2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bae4:	697b      	ldr	r3, [r7, #20]
 800bae6:	3304      	adds	r3, #4
 800bae8:	4618      	mov	r0, r3
 800baea:	f7fe faaf 	bl	800a04c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800baee:	697b      	ldr	r3, [r7, #20]
 800baf0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800baf4:	f003 0304 	and.w	r3, r3, #4
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d024      	beq.n	800bb46 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bafc:	697b      	ldr	r3, [r7, #20]
 800bafe:	699a      	ldr	r2, [r3, #24]
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	18d1      	adds	r1, r2, r3
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	683a      	ldr	r2, [r7, #0]
 800bb08:	6978      	ldr	r0, [r7, #20]
 800bb0a:	f000 f8d3 	bl	800bcb4 <prvInsertTimerInActiveList>
 800bb0e:	4603      	mov	r3, r0
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d021      	beq.n	800bb58 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bb14:	2300      	movs	r3, #0
 800bb16:	9300      	str	r3, [sp, #0]
 800bb18:	2300      	movs	r3, #0
 800bb1a:	687a      	ldr	r2, [r7, #4]
 800bb1c:	2100      	movs	r1, #0
 800bb1e:	6978      	ldr	r0, [r7, #20]
 800bb20:	f7ff ff86 	bl	800ba30 <xTimerGenericCommand>
 800bb24:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bb26:	693b      	ldr	r3, [r7, #16]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d115      	bne.n	800bb58 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800bb2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb30:	b672      	cpsid	i
 800bb32:	f383 8811 	msr	BASEPRI, r3
 800bb36:	f3bf 8f6f 	isb	sy
 800bb3a:	f3bf 8f4f 	dsb	sy
 800bb3e:	b662      	cpsie	i
 800bb40:	60fb      	str	r3, [r7, #12]
}
 800bb42:	bf00      	nop
 800bb44:	e7fe      	b.n	800bb44 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bb46:	697b      	ldr	r3, [r7, #20]
 800bb48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bb4c:	f023 0301 	bic.w	r3, r3, #1
 800bb50:	b2da      	uxtb	r2, r3
 800bb52:	697b      	ldr	r3, [r7, #20]
 800bb54:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bb58:	697b      	ldr	r3, [r7, #20]
 800bb5a:	6a1b      	ldr	r3, [r3, #32]
 800bb5c:	6978      	ldr	r0, [r7, #20]
 800bb5e:	4798      	blx	r3
}
 800bb60:	bf00      	nop
 800bb62:	3718      	adds	r7, #24
 800bb64:	46bd      	mov	sp, r7
 800bb66:	bd80      	pop	{r7, pc}
 800bb68:	20007e8c 	.word	0x20007e8c

0800bb6c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	b084      	sub	sp, #16
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bb74:	f107 0308 	add.w	r3, r7, #8
 800bb78:	4618      	mov	r0, r3
 800bb7a:	f000 f857 	bl	800bc2c <prvGetNextExpireTime>
 800bb7e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bb80:	68bb      	ldr	r3, [r7, #8]
 800bb82:	4619      	mov	r1, r3
 800bb84:	68f8      	ldr	r0, [r7, #12]
 800bb86:	f000 f803 	bl	800bb90 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bb8a:	f000 f8d5 	bl	800bd38 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bb8e:	e7f1      	b.n	800bb74 <prvTimerTask+0x8>

0800bb90 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b084      	sub	sp, #16
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	6078      	str	r0, [r7, #4]
 800bb98:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bb9a:	f7ff f9f5 	bl	800af88 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bb9e:	f107 0308 	add.w	r3, r7, #8
 800bba2:	4618      	mov	r0, r3
 800bba4:	f000 f866 	bl	800bc74 <prvSampleTimeNow>
 800bba8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bbaa:	68bb      	ldr	r3, [r7, #8]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d130      	bne.n	800bc12 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bbb0:	683b      	ldr	r3, [r7, #0]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d10a      	bne.n	800bbcc <prvProcessTimerOrBlockTask+0x3c>
 800bbb6:	687a      	ldr	r2, [r7, #4]
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	429a      	cmp	r2, r3
 800bbbc:	d806      	bhi.n	800bbcc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bbbe:	f7ff f9f1 	bl	800afa4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bbc2:	68f9      	ldr	r1, [r7, #12]
 800bbc4:	6878      	ldr	r0, [r7, #4]
 800bbc6:	f7ff ff83 	bl	800bad0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bbca:	e024      	b.n	800bc16 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bbcc:	683b      	ldr	r3, [r7, #0]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d008      	beq.n	800bbe4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bbd2:	4b13      	ldr	r3, [pc, #76]	; (800bc20 <prvProcessTimerOrBlockTask+0x90>)
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d101      	bne.n	800bbe0 <prvProcessTimerOrBlockTask+0x50>
 800bbdc:	2301      	movs	r3, #1
 800bbde:	e000      	b.n	800bbe2 <prvProcessTimerOrBlockTask+0x52>
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bbe4:	4b0f      	ldr	r3, [pc, #60]	; (800bc24 <prvProcessTimerOrBlockTask+0x94>)
 800bbe6:	6818      	ldr	r0, [r3, #0]
 800bbe8:	687a      	ldr	r2, [r7, #4]
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	1ad3      	subs	r3, r2, r3
 800bbee:	683a      	ldr	r2, [r7, #0]
 800bbf0:	4619      	mov	r1, r3
 800bbf2:	f7fe ff2b 	bl	800aa4c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bbf6:	f7ff f9d5 	bl	800afa4 <xTaskResumeAll>
 800bbfa:	4603      	mov	r3, r0
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d10a      	bne.n	800bc16 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bc00:	4b09      	ldr	r3, [pc, #36]	; (800bc28 <prvProcessTimerOrBlockTask+0x98>)
 800bc02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc06:	601a      	str	r2, [r3, #0]
 800bc08:	f3bf 8f4f 	dsb	sy
 800bc0c:	f3bf 8f6f 	isb	sy
}
 800bc10:	e001      	b.n	800bc16 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bc12:	f7ff f9c7 	bl	800afa4 <xTaskResumeAll>
}
 800bc16:	bf00      	nop
 800bc18:	3710      	adds	r7, #16
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	bd80      	pop	{r7, pc}
 800bc1e:	bf00      	nop
 800bc20:	20007e90 	.word	0x20007e90
 800bc24:	20007e94 	.word	0x20007e94
 800bc28:	e000ed04 	.word	0xe000ed04

0800bc2c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bc2c:	b480      	push	{r7}
 800bc2e:	b085      	sub	sp, #20
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bc34:	4b0e      	ldr	r3, [pc, #56]	; (800bc70 <prvGetNextExpireTime+0x44>)
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d101      	bne.n	800bc42 <prvGetNextExpireTime+0x16>
 800bc3e:	2201      	movs	r2, #1
 800bc40:	e000      	b.n	800bc44 <prvGetNextExpireTime+0x18>
 800bc42:	2200      	movs	r2, #0
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d105      	bne.n	800bc5c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bc50:	4b07      	ldr	r3, [pc, #28]	; (800bc70 <prvGetNextExpireTime+0x44>)
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	68db      	ldr	r3, [r3, #12]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	60fb      	str	r3, [r7, #12]
 800bc5a:	e001      	b.n	800bc60 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bc5c:	2300      	movs	r3, #0
 800bc5e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bc60:	68fb      	ldr	r3, [r7, #12]
}
 800bc62:	4618      	mov	r0, r3
 800bc64:	3714      	adds	r7, #20
 800bc66:	46bd      	mov	sp, r7
 800bc68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6c:	4770      	bx	lr
 800bc6e:	bf00      	nop
 800bc70:	20007e8c 	.word	0x20007e8c

0800bc74 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b084      	sub	sp, #16
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bc7c:	f7ff fa32 	bl	800b0e4 <xTaskGetTickCount>
 800bc80:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bc82:	4b0b      	ldr	r3, [pc, #44]	; (800bcb0 <prvSampleTimeNow+0x3c>)
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	68fa      	ldr	r2, [r7, #12]
 800bc88:	429a      	cmp	r2, r3
 800bc8a:	d205      	bcs.n	800bc98 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bc8c:	f000 f93c 	bl	800bf08 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	2201      	movs	r2, #1
 800bc94:	601a      	str	r2, [r3, #0]
 800bc96:	e002      	b.n	800bc9e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bc9e:	4a04      	ldr	r2, [pc, #16]	; (800bcb0 <prvSampleTimeNow+0x3c>)
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bca4:	68fb      	ldr	r3, [r7, #12]
}
 800bca6:	4618      	mov	r0, r3
 800bca8:	3710      	adds	r7, #16
 800bcaa:	46bd      	mov	sp, r7
 800bcac:	bd80      	pop	{r7, pc}
 800bcae:	bf00      	nop
 800bcb0:	20007e9c 	.word	0x20007e9c

0800bcb4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	b086      	sub	sp, #24
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	60f8      	str	r0, [r7, #12]
 800bcbc:	60b9      	str	r1, [r7, #8]
 800bcbe:	607a      	str	r2, [r7, #4]
 800bcc0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	68ba      	ldr	r2, [r7, #8]
 800bcca:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	68fa      	ldr	r2, [r7, #12]
 800bcd0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bcd2:	68ba      	ldr	r2, [r7, #8]
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	429a      	cmp	r2, r3
 800bcd8:	d812      	bhi.n	800bd00 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bcda:	687a      	ldr	r2, [r7, #4]
 800bcdc:	683b      	ldr	r3, [r7, #0]
 800bcde:	1ad2      	subs	r2, r2, r3
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	699b      	ldr	r3, [r3, #24]
 800bce4:	429a      	cmp	r2, r3
 800bce6:	d302      	bcc.n	800bcee <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bce8:	2301      	movs	r3, #1
 800bcea:	617b      	str	r3, [r7, #20]
 800bcec:	e01b      	b.n	800bd26 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bcee:	4b10      	ldr	r3, [pc, #64]	; (800bd30 <prvInsertTimerInActiveList+0x7c>)
 800bcf0:	681a      	ldr	r2, [r3, #0]
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	3304      	adds	r3, #4
 800bcf6:	4619      	mov	r1, r3
 800bcf8:	4610      	mov	r0, r2
 800bcfa:	f7fe f96e 	bl	8009fda <vListInsert>
 800bcfe:	e012      	b.n	800bd26 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bd00:	687a      	ldr	r2, [r7, #4]
 800bd02:	683b      	ldr	r3, [r7, #0]
 800bd04:	429a      	cmp	r2, r3
 800bd06:	d206      	bcs.n	800bd16 <prvInsertTimerInActiveList+0x62>
 800bd08:	68ba      	ldr	r2, [r7, #8]
 800bd0a:	683b      	ldr	r3, [r7, #0]
 800bd0c:	429a      	cmp	r2, r3
 800bd0e:	d302      	bcc.n	800bd16 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bd10:	2301      	movs	r3, #1
 800bd12:	617b      	str	r3, [r7, #20]
 800bd14:	e007      	b.n	800bd26 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bd16:	4b07      	ldr	r3, [pc, #28]	; (800bd34 <prvInsertTimerInActiveList+0x80>)
 800bd18:	681a      	ldr	r2, [r3, #0]
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	3304      	adds	r3, #4
 800bd1e:	4619      	mov	r1, r3
 800bd20:	4610      	mov	r0, r2
 800bd22:	f7fe f95a 	bl	8009fda <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bd26:	697b      	ldr	r3, [r7, #20]
}
 800bd28:	4618      	mov	r0, r3
 800bd2a:	3718      	adds	r7, #24
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	bd80      	pop	{r7, pc}
 800bd30:	20007e90 	.word	0x20007e90
 800bd34:	20007e8c 	.word	0x20007e8c

0800bd38 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	b08e      	sub	sp, #56	; 0x38
 800bd3c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bd3e:	e0d0      	b.n	800bee2 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	da1a      	bge.n	800bd7c <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bd46:	1d3b      	adds	r3, r7, #4
 800bd48:	3304      	adds	r3, #4
 800bd4a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bd4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d10c      	bne.n	800bd6c <prvProcessReceivedCommands+0x34>
	__asm volatile
 800bd52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd56:	b672      	cpsid	i
 800bd58:	f383 8811 	msr	BASEPRI, r3
 800bd5c:	f3bf 8f6f 	isb	sy
 800bd60:	f3bf 8f4f 	dsb	sy
 800bd64:	b662      	cpsie	i
 800bd66:	61fb      	str	r3, [r7, #28]
}
 800bd68:	bf00      	nop
 800bd6a:	e7fe      	b.n	800bd6a <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bd6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bd72:	6850      	ldr	r0, [r2, #4]
 800bd74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bd76:	6892      	ldr	r2, [r2, #8]
 800bd78:	4611      	mov	r1, r2
 800bd7a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	f2c0 80af 	blt.w	800bee2 <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bd88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd8a:	695b      	ldr	r3, [r3, #20]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d004      	beq.n	800bd9a <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bd90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd92:	3304      	adds	r3, #4
 800bd94:	4618      	mov	r0, r3
 800bd96:	f7fe f959 	bl	800a04c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bd9a:	463b      	mov	r3, r7
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	f7ff ff69 	bl	800bc74 <prvSampleTimeNow>
 800bda2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	2b09      	cmp	r3, #9
 800bda8:	f200 809a 	bhi.w	800bee0 <prvProcessReceivedCommands+0x1a8>
 800bdac:	a201      	add	r2, pc, #4	; (adr r2, 800bdb4 <prvProcessReceivedCommands+0x7c>)
 800bdae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdb2:	bf00      	nop
 800bdb4:	0800bddd 	.word	0x0800bddd
 800bdb8:	0800bddd 	.word	0x0800bddd
 800bdbc:	0800bddd 	.word	0x0800bddd
 800bdc0:	0800be55 	.word	0x0800be55
 800bdc4:	0800be69 	.word	0x0800be69
 800bdc8:	0800beb7 	.word	0x0800beb7
 800bdcc:	0800bddd 	.word	0x0800bddd
 800bdd0:	0800bddd 	.word	0x0800bddd
 800bdd4:	0800be55 	.word	0x0800be55
 800bdd8:	0800be69 	.word	0x0800be69
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdde:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bde2:	f043 0301 	orr.w	r3, r3, #1
 800bde6:	b2da      	uxtb	r2, r3
 800bde8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bdee:	68ba      	ldr	r2, [r7, #8]
 800bdf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdf2:	699b      	ldr	r3, [r3, #24]
 800bdf4:	18d1      	adds	r1, r2, r3
 800bdf6:	68bb      	ldr	r3, [r7, #8]
 800bdf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bdfa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bdfc:	f7ff ff5a 	bl	800bcb4 <prvInsertTimerInActiveList>
 800be00:	4603      	mov	r3, r0
 800be02:	2b00      	cmp	r3, #0
 800be04:	d06d      	beq.n	800bee2 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800be06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be08:	6a1b      	ldr	r3, [r3, #32]
 800be0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be0c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800be0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be14:	f003 0304 	and.w	r3, r3, #4
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d062      	beq.n	800bee2 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800be1c:	68ba      	ldr	r2, [r7, #8]
 800be1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be20:	699b      	ldr	r3, [r3, #24]
 800be22:	441a      	add	r2, r3
 800be24:	2300      	movs	r3, #0
 800be26:	9300      	str	r3, [sp, #0]
 800be28:	2300      	movs	r3, #0
 800be2a:	2100      	movs	r1, #0
 800be2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be2e:	f7ff fdff 	bl	800ba30 <xTimerGenericCommand>
 800be32:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800be34:	6a3b      	ldr	r3, [r7, #32]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d153      	bne.n	800bee2 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800be3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be3e:	b672      	cpsid	i
 800be40:	f383 8811 	msr	BASEPRI, r3
 800be44:	f3bf 8f6f 	isb	sy
 800be48:	f3bf 8f4f 	dsb	sy
 800be4c:	b662      	cpsie	i
 800be4e:	61bb      	str	r3, [r7, #24]
}
 800be50:	bf00      	nop
 800be52:	e7fe      	b.n	800be52 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800be54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be5a:	f023 0301 	bic.w	r3, r3, #1
 800be5e:	b2da      	uxtb	r2, r3
 800be60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800be66:	e03c      	b.n	800bee2 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800be68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be6e:	f043 0301 	orr.w	r3, r3, #1
 800be72:	b2da      	uxtb	r2, r3
 800be74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800be7a:	68ba      	ldr	r2, [r7, #8]
 800be7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be7e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800be80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be82:	699b      	ldr	r3, [r3, #24]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d10c      	bne.n	800bea2 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800be88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be8c:	b672      	cpsid	i
 800be8e:	f383 8811 	msr	BASEPRI, r3
 800be92:	f3bf 8f6f 	isb	sy
 800be96:	f3bf 8f4f 	dsb	sy
 800be9a:	b662      	cpsie	i
 800be9c:	617b      	str	r3, [r7, #20]
}
 800be9e:	bf00      	nop
 800bea0:	e7fe      	b.n	800bea0 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bea4:	699a      	ldr	r2, [r3, #24]
 800bea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bea8:	18d1      	adds	r1, r2, r3
 800beaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800beae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800beb0:	f7ff ff00 	bl	800bcb4 <prvInsertTimerInActiveList>
					break;
 800beb4:	e015      	b.n	800bee2 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800beb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bebc:	f003 0302 	and.w	r3, r3, #2
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d103      	bne.n	800becc <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800bec4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bec6:	f000 fbc7 	bl	800c658 <vPortFree>
 800beca:	e00a      	b.n	800bee2 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800becc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bece:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bed2:	f023 0301 	bic.w	r3, r3, #1
 800bed6:	b2da      	uxtb	r2, r3
 800bed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bede:	e000      	b.n	800bee2 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 800bee0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bee2:	4b08      	ldr	r3, [pc, #32]	; (800bf04 <prvProcessReceivedCommands+0x1cc>)
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	1d39      	adds	r1, r7, #4
 800bee8:	2200      	movs	r2, #0
 800beea:	4618      	mov	r0, r3
 800beec:	f7fe fb8e 	bl	800a60c <xQueueReceive>
 800bef0:	4603      	mov	r3, r0
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	f47f af24 	bne.w	800bd40 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800bef8:	bf00      	nop
 800befa:	bf00      	nop
 800befc:	3730      	adds	r7, #48	; 0x30
 800befe:	46bd      	mov	sp, r7
 800bf00:	bd80      	pop	{r7, pc}
 800bf02:	bf00      	nop
 800bf04:	20007e94 	.word	0x20007e94

0800bf08 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b088      	sub	sp, #32
 800bf0c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bf0e:	e04a      	b.n	800bfa6 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bf10:	4b2e      	ldr	r3, [pc, #184]	; (800bfcc <prvSwitchTimerLists+0xc4>)
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	68db      	ldr	r3, [r3, #12]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf1a:	4b2c      	ldr	r3, [pc, #176]	; (800bfcc <prvSwitchTimerLists+0xc4>)
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	68db      	ldr	r3, [r3, #12]
 800bf20:	68db      	ldr	r3, [r3, #12]
 800bf22:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	3304      	adds	r3, #4
 800bf28:	4618      	mov	r0, r3
 800bf2a:	f7fe f88f 	bl	800a04c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	6a1b      	ldr	r3, [r3, #32]
 800bf32:	68f8      	ldr	r0, [r7, #12]
 800bf34:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bf3c:	f003 0304 	and.w	r3, r3, #4
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d030      	beq.n	800bfa6 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	699b      	ldr	r3, [r3, #24]
 800bf48:	693a      	ldr	r2, [r7, #16]
 800bf4a:	4413      	add	r3, r2
 800bf4c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bf4e:	68ba      	ldr	r2, [r7, #8]
 800bf50:	693b      	ldr	r3, [r7, #16]
 800bf52:	429a      	cmp	r2, r3
 800bf54:	d90e      	bls.n	800bf74 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	68ba      	ldr	r2, [r7, #8]
 800bf5a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	68fa      	ldr	r2, [r7, #12]
 800bf60:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bf62:	4b1a      	ldr	r3, [pc, #104]	; (800bfcc <prvSwitchTimerLists+0xc4>)
 800bf64:	681a      	ldr	r2, [r3, #0]
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	3304      	adds	r3, #4
 800bf6a:	4619      	mov	r1, r3
 800bf6c:	4610      	mov	r0, r2
 800bf6e:	f7fe f834 	bl	8009fda <vListInsert>
 800bf72:	e018      	b.n	800bfa6 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bf74:	2300      	movs	r3, #0
 800bf76:	9300      	str	r3, [sp, #0]
 800bf78:	2300      	movs	r3, #0
 800bf7a:	693a      	ldr	r2, [r7, #16]
 800bf7c:	2100      	movs	r1, #0
 800bf7e:	68f8      	ldr	r0, [r7, #12]
 800bf80:	f7ff fd56 	bl	800ba30 <xTimerGenericCommand>
 800bf84:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d10c      	bne.n	800bfa6 <prvSwitchTimerLists+0x9e>
	__asm volatile
 800bf8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf90:	b672      	cpsid	i
 800bf92:	f383 8811 	msr	BASEPRI, r3
 800bf96:	f3bf 8f6f 	isb	sy
 800bf9a:	f3bf 8f4f 	dsb	sy
 800bf9e:	b662      	cpsie	i
 800bfa0:	603b      	str	r3, [r7, #0]
}
 800bfa2:	bf00      	nop
 800bfa4:	e7fe      	b.n	800bfa4 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bfa6:	4b09      	ldr	r3, [pc, #36]	; (800bfcc <prvSwitchTimerLists+0xc4>)
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d1af      	bne.n	800bf10 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bfb0:	4b06      	ldr	r3, [pc, #24]	; (800bfcc <prvSwitchTimerLists+0xc4>)
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bfb6:	4b06      	ldr	r3, [pc, #24]	; (800bfd0 <prvSwitchTimerLists+0xc8>)
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	4a04      	ldr	r2, [pc, #16]	; (800bfcc <prvSwitchTimerLists+0xc4>)
 800bfbc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bfbe:	4a04      	ldr	r2, [pc, #16]	; (800bfd0 <prvSwitchTimerLists+0xc8>)
 800bfc0:	697b      	ldr	r3, [r7, #20]
 800bfc2:	6013      	str	r3, [r2, #0]
}
 800bfc4:	bf00      	nop
 800bfc6:	3718      	adds	r7, #24
 800bfc8:	46bd      	mov	sp, r7
 800bfca:	bd80      	pop	{r7, pc}
 800bfcc:	20007e8c 	.word	0x20007e8c
 800bfd0:	20007e90 	.word	0x20007e90

0800bfd4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b082      	sub	sp, #8
 800bfd8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bfda:	f000 f947 	bl	800c26c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bfde:	4b15      	ldr	r3, [pc, #84]	; (800c034 <prvCheckForValidListAndQueue+0x60>)
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d120      	bne.n	800c028 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bfe6:	4814      	ldr	r0, [pc, #80]	; (800c038 <prvCheckForValidListAndQueue+0x64>)
 800bfe8:	f7fd ffa6 	bl	8009f38 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bfec:	4813      	ldr	r0, [pc, #76]	; (800c03c <prvCheckForValidListAndQueue+0x68>)
 800bfee:	f7fd ffa3 	bl	8009f38 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bff2:	4b13      	ldr	r3, [pc, #76]	; (800c040 <prvCheckForValidListAndQueue+0x6c>)
 800bff4:	4a10      	ldr	r2, [pc, #64]	; (800c038 <prvCheckForValidListAndQueue+0x64>)
 800bff6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bff8:	4b12      	ldr	r3, [pc, #72]	; (800c044 <prvCheckForValidListAndQueue+0x70>)
 800bffa:	4a10      	ldr	r2, [pc, #64]	; (800c03c <prvCheckForValidListAndQueue+0x68>)
 800bffc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bffe:	2300      	movs	r3, #0
 800c000:	9300      	str	r3, [sp, #0]
 800c002:	4b11      	ldr	r3, [pc, #68]	; (800c048 <prvCheckForValidListAndQueue+0x74>)
 800c004:	4a11      	ldr	r2, [pc, #68]	; (800c04c <prvCheckForValidListAndQueue+0x78>)
 800c006:	2110      	movs	r1, #16
 800c008:	200a      	movs	r0, #10
 800c00a:	f7fe f8b3 	bl	800a174 <xQueueGenericCreateStatic>
 800c00e:	4603      	mov	r3, r0
 800c010:	4a08      	ldr	r2, [pc, #32]	; (800c034 <prvCheckForValidListAndQueue+0x60>)
 800c012:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c014:	4b07      	ldr	r3, [pc, #28]	; (800c034 <prvCheckForValidListAndQueue+0x60>)
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d005      	beq.n	800c028 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c01c:	4b05      	ldr	r3, [pc, #20]	; (800c034 <prvCheckForValidListAndQueue+0x60>)
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	490b      	ldr	r1, [pc, #44]	; (800c050 <prvCheckForValidListAndQueue+0x7c>)
 800c022:	4618      	mov	r0, r3
 800c024:	f7fe fce8 	bl	800a9f8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c028:	f000 f954 	bl	800c2d4 <vPortExitCritical>
}
 800c02c:	bf00      	nop
 800c02e:	46bd      	mov	sp, r7
 800c030:	bd80      	pop	{r7, pc}
 800c032:	bf00      	nop
 800c034:	20007e94 	.word	0x20007e94
 800c038:	20007e64 	.word	0x20007e64
 800c03c:	20007e78 	.word	0x20007e78
 800c040:	20007e8c 	.word	0x20007e8c
 800c044:	20007e90 	.word	0x20007e90
 800c048:	20007f40 	.word	0x20007f40
 800c04c:	20007ea0 	.word	0x20007ea0
 800c050:	0801ec30 	.word	0x0801ec30

0800c054 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c054:	b480      	push	{r7}
 800c056:	b085      	sub	sp, #20
 800c058:	af00      	add	r7, sp, #0
 800c05a:	60f8      	str	r0, [r7, #12]
 800c05c:	60b9      	str	r1, [r7, #8]
 800c05e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	3b04      	subs	r3, #4
 800c064:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c06c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	3b04      	subs	r3, #4
 800c072:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c074:	68bb      	ldr	r3, [r7, #8]
 800c076:	f023 0201 	bic.w	r2, r3, #1
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	3b04      	subs	r3, #4
 800c082:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c084:	4a0c      	ldr	r2, [pc, #48]	; (800c0b8 <pxPortInitialiseStack+0x64>)
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	3b14      	subs	r3, #20
 800c08e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c090:	687a      	ldr	r2, [r7, #4]
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	3b04      	subs	r3, #4
 800c09a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	f06f 0202 	mvn.w	r2, #2
 800c0a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	3b20      	subs	r3, #32
 800c0a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c0aa:	68fb      	ldr	r3, [r7, #12]
}
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	3714      	adds	r7, #20
 800c0b0:	46bd      	mov	sp, r7
 800c0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b6:	4770      	bx	lr
 800c0b8:	0800c0bd 	.word	0x0800c0bd

0800c0bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c0bc:	b480      	push	{r7}
 800c0be:	b085      	sub	sp, #20
 800c0c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c0c6:	4b14      	ldr	r3, [pc, #80]	; (800c118 <prvTaskExitError+0x5c>)
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c0ce:	d00c      	beq.n	800c0ea <prvTaskExitError+0x2e>
	__asm volatile
 800c0d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0d4:	b672      	cpsid	i
 800c0d6:	f383 8811 	msr	BASEPRI, r3
 800c0da:	f3bf 8f6f 	isb	sy
 800c0de:	f3bf 8f4f 	dsb	sy
 800c0e2:	b662      	cpsie	i
 800c0e4:	60fb      	str	r3, [r7, #12]
}
 800c0e6:	bf00      	nop
 800c0e8:	e7fe      	b.n	800c0e8 <prvTaskExitError+0x2c>
	__asm volatile
 800c0ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0ee:	b672      	cpsid	i
 800c0f0:	f383 8811 	msr	BASEPRI, r3
 800c0f4:	f3bf 8f6f 	isb	sy
 800c0f8:	f3bf 8f4f 	dsb	sy
 800c0fc:	b662      	cpsie	i
 800c0fe:	60bb      	str	r3, [r7, #8]
}
 800c100:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c102:	bf00      	nop
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	2b00      	cmp	r3, #0
 800c108:	d0fc      	beq.n	800c104 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c10a:	bf00      	nop
 800c10c:	bf00      	nop
 800c10e:	3714      	adds	r7, #20
 800c110:	46bd      	mov	sp, r7
 800c112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c116:	4770      	bx	lr
 800c118:	20000010 	.word	0x20000010
 800c11c:	00000000 	.word	0x00000000

0800c120 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c120:	4b07      	ldr	r3, [pc, #28]	; (800c140 <pxCurrentTCBConst2>)
 800c122:	6819      	ldr	r1, [r3, #0]
 800c124:	6808      	ldr	r0, [r1, #0]
 800c126:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c12a:	f380 8809 	msr	PSP, r0
 800c12e:	f3bf 8f6f 	isb	sy
 800c132:	f04f 0000 	mov.w	r0, #0
 800c136:	f380 8811 	msr	BASEPRI, r0
 800c13a:	4770      	bx	lr
 800c13c:	f3af 8000 	nop.w

0800c140 <pxCurrentTCBConst2>:
 800c140:	20007964 	.word	0x20007964
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c144:	bf00      	nop
 800c146:	bf00      	nop

0800c148 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c148:	4808      	ldr	r0, [pc, #32]	; (800c16c <prvPortStartFirstTask+0x24>)
 800c14a:	6800      	ldr	r0, [r0, #0]
 800c14c:	6800      	ldr	r0, [r0, #0]
 800c14e:	f380 8808 	msr	MSP, r0
 800c152:	f04f 0000 	mov.w	r0, #0
 800c156:	f380 8814 	msr	CONTROL, r0
 800c15a:	b662      	cpsie	i
 800c15c:	b661      	cpsie	f
 800c15e:	f3bf 8f4f 	dsb	sy
 800c162:	f3bf 8f6f 	isb	sy
 800c166:	df00      	svc	0
 800c168:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c16a:	bf00      	nop
 800c16c:	e000ed08 	.word	0xe000ed08

0800c170 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c170:	b580      	push	{r7, lr}
 800c172:	b084      	sub	sp, #16
 800c174:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c176:	4b37      	ldr	r3, [pc, #220]	; (800c254 <xPortStartScheduler+0xe4>)
 800c178:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	781b      	ldrb	r3, [r3, #0]
 800c17e:	b2db      	uxtb	r3, r3
 800c180:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	22ff      	movs	r2, #255	; 0xff
 800c186:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	781b      	ldrb	r3, [r3, #0]
 800c18c:	b2db      	uxtb	r3, r3
 800c18e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c190:	78fb      	ldrb	r3, [r7, #3]
 800c192:	b2db      	uxtb	r3, r3
 800c194:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c198:	b2da      	uxtb	r2, r3
 800c19a:	4b2f      	ldr	r3, [pc, #188]	; (800c258 <xPortStartScheduler+0xe8>)
 800c19c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c19e:	4b2f      	ldr	r3, [pc, #188]	; (800c25c <xPortStartScheduler+0xec>)
 800c1a0:	2207      	movs	r2, #7
 800c1a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c1a4:	e009      	b.n	800c1ba <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800c1a6:	4b2d      	ldr	r3, [pc, #180]	; (800c25c <xPortStartScheduler+0xec>)
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	3b01      	subs	r3, #1
 800c1ac:	4a2b      	ldr	r2, [pc, #172]	; (800c25c <xPortStartScheduler+0xec>)
 800c1ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c1b0:	78fb      	ldrb	r3, [r7, #3]
 800c1b2:	b2db      	uxtb	r3, r3
 800c1b4:	005b      	lsls	r3, r3, #1
 800c1b6:	b2db      	uxtb	r3, r3
 800c1b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c1ba:	78fb      	ldrb	r3, [r7, #3]
 800c1bc:	b2db      	uxtb	r3, r3
 800c1be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c1c2:	2b80      	cmp	r3, #128	; 0x80
 800c1c4:	d0ef      	beq.n	800c1a6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c1c6:	4b25      	ldr	r3, [pc, #148]	; (800c25c <xPortStartScheduler+0xec>)
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	f1c3 0307 	rsb	r3, r3, #7
 800c1ce:	2b04      	cmp	r3, #4
 800c1d0:	d00c      	beq.n	800c1ec <xPortStartScheduler+0x7c>
	__asm volatile
 800c1d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1d6:	b672      	cpsid	i
 800c1d8:	f383 8811 	msr	BASEPRI, r3
 800c1dc:	f3bf 8f6f 	isb	sy
 800c1e0:	f3bf 8f4f 	dsb	sy
 800c1e4:	b662      	cpsie	i
 800c1e6:	60bb      	str	r3, [r7, #8]
}
 800c1e8:	bf00      	nop
 800c1ea:	e7fe      	b.n	800c1ea <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c1ec:	4b1b      	ldr	r3, [pc, #108]	; (800c25c <xPortStartScheduler+0xec>)
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	021b      	lsls	r3, r3, #8
 800c1f2:	4a1a      	ldr	r2, [pc, #104]	; (800c25c <xPortStartScheduler+0xec>)
 800c1f4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c1f6:	4b19      	ldr	r3, [pc, #100]	; (800c25c <xPortStartScheduler+0xec>)
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c1fe:	4a17      	ldr	r2, [pc, #92]	; (800c25c <xPortStartScheduler+0xec>)
 800c200:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	b2da      	uxtb	r2, r3
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c20a:	4b15      	ldr	r3, [pc, #84]	; (800c260 <xPortStartScheduler+0xf0>)
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	4a14      	ldr	r2, [pc, #80]	; (800c260 <xPortStartScheduler+0xf0>)
 800c210:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c214:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c216:	4b12      	ldr	r3, [pc, #72]	; (800c260 <xPortStartScheduler+0xf0>)
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	4a11      	ldr	r2, [pc, #68]	; (800c260 <xPortStartScheduler+0xf0>)
 800c21c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c220:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c222:	f000 f8dd 	bl	800c3e0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c226:	4b0f      	ldr	r3, [pc, #60]	; (800c264 <xPortStartScheduler+0xf4>)
 800c228:	2200      	movs	r2, #0
 800c22a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c22c:	f000 f8fc 	bl	800c428 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c230:	4b0d      	ldr	r3, [pc, #52]	; (800c268 <xPortStartScheduler+0xf8>)
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	4a0c      	ldr	r2, [pc, #48]	; (800c268 <xPortStartScheduler+0xf8>)
 800c236:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c23a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c23c:	f7ff ff84 	bl	800c148 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c240:	f7ff f81c 	bl	800b27c <vTaskSwitchContext>
	prvTaskExitError();
 800c244:	f7ff ff3a 	bl	800c0bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c248:	2300      	movs	r3, #0
}
 800c24a:	4618      	mov	r0, r3
 800c24c:	3710      	adds	r7, #16
 800c24e:	46bd      	mov	sp, r7
 800c250:	bd80      	pop	{r7, pc}
 800c252:	bf00      	nop
 800c254:	e000e400 	.word	0xe000e400
 800c258:	20007f90 	.word	0x20007f90
 800c25c:	20007f94 	.word	0x20007f94
 800c260:	e000ed20 	.word	0xe000ed20
 800c264:	20000010 	.word	0x20000010
 800c268:	e000ef34 	.word	0xe000ef34

0800c26c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c26c:	b480      	push	{r7}
 800c26e:	b083      	sub	sp, #12
 800c270:	af00      	add	r7, sp, #0
	__asm volatile
 800c272:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c276:	b672      	cpsid	i
 800c278:	f383 8811 	msr	BASEPRI, r3
 800c27c:	f3bf 8f6f 	isb	sy
 800c280:	f3bf 8f4f 	dsb	sy
 800c284:	b662      	cpsie	i
 800c286:	607b      	str	r3, [r7, #4]
}
 800c288:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c28a:	4b10      	ldr	r3, [pc, #64]	; (800c2cc <vPortEnterCritical+0x60>)
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	3301      	adds	r3, #1
 800c290:	4a0e      	ldr	r2, [pc, #56]	; (800c2cc <vPortEnterCritical+0x60>)
 800c292:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c294:	4b0d      	ldr	r3, [pc, #52]	; (800c2cc <vPortEnterCritical+0x60>)
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	2b01      	cmp	r3, #1
 800c29a:	d111      	bne.n	800c2c0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c29c:	4b0c      	ldr	r3, [pc, #48]	; (800c2d0 <vPortEnterCritical+0x64>)
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	b2db      	uxtb	r3, r3
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d00c      	beq.n	800c2c0 <vPortEnterCritical+0x54>
	__asm volatile
 800c2a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2aa:	b672      	cpsid	i
 800c2ac:	f383 8811 	msr	BASEPRI, r3
 800c2b0:	f3bf 8f6f 	isb	sy
 800c2b4:	f3bf 8f4f 	dsb	sy
 800c2b8:	b662      	cpsie	i
 800c2ba:	603b      	str	r3, [r7, #0]
}
 800c2bc:	bf00      	nop
 800c2be:	e7fe      	b.n	800c2be <vPortEnterCritical+0x52>
	}
}
 800c2c0:	bf00      	nop
 800c2c2:	370c      	adds	r7, #12
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ca:	4770      	bx	lr
 800c2cc:	20000010 	.word	0x20000010
 800c2d0:	e000ed04 	.word	0xe000ed04

0800c2d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c2d4:	b480      	push	{r7}
 800c2d6:	b083      	sub	sp, #12
 800c2d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c2da:	4b13      	ldr	r3, [pc, #76]	; (800c328 <vPortExitCritical+0x54>)
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d10c      	bne.n	800c2fc <vPortExitCritical+0x28>
	__asm volatile
 800c2e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2e6:	b672      	cpsid	i
 800c2e8:	f383 8811 	msr	BASEPRI, r3
 800c2ec:	f3bf 8f6f 	isb	sy
 800c2f0:	f3bf 8f4f 	dsb	sy
 800c2f4:	b662      	cpsie	i
 800c2f6:	607b      	str	r3, [r7, #4]
}
 800c2f8:	bf00      	nop
 800c2fa:	e7fe      	b.n	800c2fa <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800c2fc:	4b0a      	ldr	r3, [pc, #40]	; (800c328 <vPortExitCritical+0x54>)
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	3b01      	subs	r3, #1
 800c302:	4a09      	ldr	r2, [pc, #36]	; (800c328 <vPortExitCritical+0x54>)
 800c304:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c306:	4b08      	ldr	r3, [pc, #32]	; (800c328 <vPortExitCritical+0x54>)
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d105      	bne.n	800c31a <vPortExitCritical+0x46>
 800c30e:	2300      	movs	r3, #0
 800c310:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c312:	683b      	ldr	r3, [r7, #0]
 800c314:	f383 8811 	msr	BASEPRI, r3
}
 800c318:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c31a:	bf00      	nop
 800c31c:	370c      	adds	r7, #12
 800c31e:	46bd      	mov	sp, r7
 800c320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c324:	4770      	bx	lr
 800c326:	bf00      	nop
 800c328:	20000010 	.word	0x20000010
 800c32c:	00000000 	.word	0x00000000

0800c330 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c330:	f3ef 8009 	mrs	r0, PSP
 800c334:	f3bf 8f6f 	isb	sy
 800c338:	4b15      	ldr	r3, [pc, #84]	; (800c390 <pxCurrentTCBConst>)
 800c33a:	681a      	ldr	r2, [r3, #0]
 800c33c:	f01e 0f10 	tst.w	lr, #16
 800c340:	bf08      	it	eq
 800c342:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c346:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c34a:	6010      	str	r0, [r2, #0]
 800c34c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c350:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c354:	b672      	cpsid	i
 800c356:	f380 8811 	msr	BASEPRI, r0
 800c35a:	f3bf 8f4f 	dsb	sy
 800c35e:	f3bf 8f6f 	isb	sy
 800c362:	b662      	cpsie	i
 800c364:	f7fe ff8a 	bl	800b27c <vTaskSwitchContext>
 800c368:	f04f 0000 	mov.w	r0, #0
 800c36c:	f380 8811 	msr	BASEPRI, r0
 800c370:	bc09      	pop	{r0, r3}
 800c372:	6819      	ldr	r1, [r3, #0]
 800c374:	6808      	ldr	r0, [r1, #0]
 800c376:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c37a:	f01e 0f10 	tst.w	lr, #16
 800c37e:	bf08      	it	eq
 800c380:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c384:	f380 8809 	msr	PSP, r0
 800c388:	f3bf 8f6f 	isb	sy
 800c38c:	4770      	bx	lr
 800c38e:	bf00      	nop

0800c390 <pxCurrentTCBConst>:
 800c390:	20007964 	.word	0x20007964
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c394:	bf00      	nop
 800c396:	bf00      	nop

0800c398 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c398:	b580      	push	{r7, lr}
 800c39a:	b082      	sub	sp, #8
 800c39c:	af00      	add	r7, sp, #0
	__asm volatile
 800c39e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3a2:	b672      	cpsid	i
 800c3a4:	f383 8811 	msr	BASEPRI, r3
 800c3a8:	f3bf 8f6f 	isb	sy
 800c3ac:	f3bf 8f4f 	dsb	sy
 800c3b0:	b662      	cpsie	i
 800c3b2:	607b      	str	r3, [r7, #4]
}
 800c3b4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c3b6:	f7fe fea5 	bl	800b104 <xTaskIncrementTick>
 800c3ba:	4603      	mov	r3, r0
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d003      	beq.n	800c3c8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c3c0:	4b06      	ldr	r3, [pc, #24]	; (800c3dc <SysTick_Handler+0x44>)
 800c3c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3c6:	601a      	str	r2, [r3, #0]
 800c3c8:	2300      	movs	r3, #0
 800c3ca:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c3cc:	683b      	ldr	r3, [r7, #0]
 800c3ce:	f383 8811 	msr	BASEPRI, r3
}
 800c3d2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c3d4:	bf00      	nop
 800c3d6:	3708      	adds	r7, #8
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	bd80      	pop	{r7, pc}
 800c3dc:	e000ed04 	.word	0xe000ed04

0800c3e0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c3e0:	b480      	push	{r7}
 800c3e2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c3e4:	4b0b      	ldr	r3, [pc, #44]	; (800c414 <vPortSetupTimerInterrupt+0x34>)
 800c3e6:	2200      	movs	r2, #0
 800c3e8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c3ea:	4b0b      	ldr	r3, [pc, #44]	; (800c418 <vPortSetupTimerInterrupt+0x38>)
 800c3ec:	2200      	movs	r2, #0
 800c3ee:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c3f0:	4b0a      	ldr	r3, [pc, #40]	; (800c41c <vPortSetupTimerInterrupt+0x3c>)
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	4a0a      	ldr	r2, [pc, #40]	; (800c420 <vPortSetupTimerInterrupt+0x40>)
 800c3f6:	fba2 2303 	umull	r2, r3, r2, r3
 800c3fa:	099b      	lsrs	r3, r3, #6
 800c3fc:	4a09      	ldr	r2, [pc, #36]	; (800c424 <vPortSetupTimerInterrupt+0x44>)
 800c3fe:	3b01      	subs	r3, #1
 800c400:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c402:	4b04      	ldr	r3, [pc, #16]	; (800c414 <vPortSetupTimerInterrupt+0x34>)
 800c404:	2207      	movs	r2, #7
 800c406:	601a      	str	r2, [r3, #0]
}
 800c408:	bf00      	nop
 800c40a:	46bd      	mov	sp, r7
 800c40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c410:	4770      	bx	lr
 800c412:	bf00      	nop
 800c414:	e000e010 	.word	0xe000e010
 800c418:	e000e018 	.word	0xe000e018
 800c41c:	20000004 	.word	0x20000004
 800c420:	10624dd3 	.word	0x10624dd3
 800c424:	e000e014 	.word	0xe000e014

0800c428 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c428:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c438 <vPortEnableVFP+0x10>
 800c42c:	6801      	ldr	r1, [r0, #0]
 800c42e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c432:	6001      	str	r1, [r0, #0]
 800c434:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c436:	bf00      	nop
 800c438:	e000ed88 	.word	0xe000ed88

0800c43c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c43c:	b480      	push	{r7}
 800c43e:	b085      	sub	sp, #20
 800c440:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c442:	f3ef 8305 	mrs	r3, IPSR
 800c446:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	2b0f      	cmp	r3, #15
 800c44c:	d916      	bls.n	800c47c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c44e:	4a19      	ldr	r2, [pc, #100]	; (800c4b4 <vPortValidateInterruptPriority+0x78>)
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	4413      	add	r3, r2
 800c454:	781b      	ldrb	r3, [r3, #0]
 800c456:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c458:	4b17      	ldr	r3, [pc, #92]	; (800c4b8 <vPortValidateInterruptPriority+0x7c>)
 800c45a:	781b      	ldrb	r3, [r3, #0]
 800c45c:	7afa      	ldrb	r2, [r7, #11]
 800c45e:	429a      	cmp	r2, r3
 800c460:	d20c      	bcs.n	800c47c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800c462:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c466:	b672      	cpsid	i
 800c468:	f383 8811 	msr	BASEPRI, r3
 800c46c:	f3bf 8f6f 	isb	sy
 800c470:	f3bf 8f4f 	dsb	sy
 800c474:	b662      	cpsie	i
 800c476:	607b      	str	r3, [r7, #4]
}
 800c478:	bf00      	nop
 800c47a:	e7fe      	b.n	800c47a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c47c:	4b0f      	ldr	r3, [pc, #60]	; (800c4bc <vPortValidateInterruptPriority+0x80>)
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c484:	4b0e      	ldr	r3, [pc, #56]	; (800c4c0 <vPortValidateInterruptPriority+0x84>)
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	429a      	cmp	r2, r3
 800c48a:	d90c      	bls.n	800c4a6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800c48c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c490:	b672      	cpsid	i
 800c492:	f383 8811 	msr	BASEPRI, r3
 800c496:	f3bf 8f6f 	isb	sy
 800c49a:	f3bf 8f4f 	dsb	sy
 800c49e:	b662      	cpsie	i
 800c4a0:	603b      	str	r3, [r7, #0]
}
 800c4a2:	bf00      	nop
 800c4a4:	e7fe      	b.n	800c4a4 <vPortValidateInterruptPriority+0x68>
	}
 800c4a6:	bf00      	nop
 800c4a8:	3714      	adds	r7, #20
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b0:	4770      	bx	lr
 800c4b2:	bf00      	nop
 800c4b4:	e000e3f0 	.word	0xe000e3f0
 800c4b8:	20007f90 	.word	0x20007f90
 800c4bc:	e000ed0c 	.word	0xe000ed0c
 800c4c0:	20007f94 	.word	0x20007f94

0800c4c4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b08a      	sub	sp, #40	; 0x28
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c4d0:	f7fe fd5a 	bl	800af88 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c4d4:	4b5b      	ldr	r3, [pc, #364]	; (800c644 <pvPortMalloc+0x180>)
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d101      	bne.n	800c4e0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c4dc:	f000 f91a 	bl	800c714 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c4e0:	4b59      	ldr	r3, [pc, #356]	; (800c648 <pvPortMalloc+0x184>)
 800c4e2:	681a      	ldr	r2, [r3, #0]
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	4013      	ands	r3, r2
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	f040 8092 	bne.w	800c612 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d01f      	beq.n	800c534 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800c4f4:	2208      	movs	r2, #8
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	4413      	add	r3, r2
 800c4fa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	f003 0307 	and.w	r3, r3, #7
 800c502:	2b00      	cmp	r3, #0
 800c504:	d016      	beq.n	800c534 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	f023 0307 	bic.w	r3, r3, #7
 800c50c:	3308      	adds	r3, #8
 800c50e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	f003 0307 	and.w	r3, r3, #7
 800c516:	2b00      	cmp	r3, #0
 800c518:	d00c      	beq.n	800c534 <pvPortMalloc+0x70>
	__asm volatile
 800c51a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c51e:	b672      	cpsid	i
 800c520:	f383 8811 	msr	BASEPRI, r3
 800c524:	f3bf 8f6f 	isb	sy
 800c528:	f3bf 8f4f 	dsb	sy
 800c52c:	b662      	cpsie	i
 800c52e:	617b      	str	r3, [r7, #20]
}
 800c530:	bf00      	nop
 800c532:	e7fe      	b.n	800c532 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d06b      	beq.n	800c612 <pvPortMalloc+0x14e>
 800c53a:	4b44      	ldr	r3, [pc, #272]	; (800c64c <pvPortMalloc+0x188>)
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	687a      	ldr	r2, [r7, #4]
 800c540:	429a      	cmp	r2, r3
 800c542:	d866      	bhi.n	800c612 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c544:	4b42      	ldr	r3, [pc, #264]	; (800c650 <pvPortMalloc+0x18c>)
 800c546:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c548:	4b41      	ldr	r3, [pc, #260]	; (800c650 <pvPortMalloc+0x18c>)
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c54e:	e004      	b.n	800c55a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800c550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c552:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c55a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c55c:	685b      	ldr	r3, [r3, #4]
 800c55e:	687a      	ldr	r2, [r7, #4]
 800c560:	429a      	cmp	r2, r3
 800c562:	d903      	bls.n	800c56c <pvPortMalloc+0xa8>
 800c564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d1f1      	bne.n	800c550 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c56c:	4b35      	ldr	r3, [pc, #212]	; (800c644 <pvPortMalloc+0x180>)
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c572:	429a      	cmp	r2, r3
 800c574:	d04d      	beq.n	800c612 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c576:	6a3b      	ldr	r3, [r7, #32]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	2208      	movs	r2, #8
 800c57c:	4413      	add	r3, r2
 800c57e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c582:	681a      	ldr	r2, [r3, #0]
 800c584:	6a3b      	ldr	r3, [r7, #32]
 800c586:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c58a:	685a      	ldr	r2, [r3, #4]
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	1ad2      	subs	r2, r2, r3
 800c590:	2308      	movs	r3, #8
 800c592:	005b      	lsls	r3, r3, #1
 800c594:	429a      	cmp	r2, r3
 800c596:	d921      	bls.n	800c5dc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c598:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	4413      	add	r3, r2
 800c59e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c5a0:	69bb      	ldr	r3, [r7, #24]
 800c5a2:	f003 0307 	and.w	r3, r3, #7
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d00c      	beq.n	800c5c4 <pvPortMalloc+0x100>
	__asm volatile
 800c5aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5ae:	b672      	cpsid	i
 800c5b0:	f383 8811 	msr	BASEPRI, r3
 800c5b4:	f3bf 8f6f 	isb	sy
 800c5b8:	f3bf 8f4f 	dsb	sy
 800c5bc:	b662      	cpsie	i
 800c5be:	613b      	str	r3, [r7, #16]
}
 800c5c0:	bf00      	nop
 800c5c2:	e7fe      	b.n	800c5c2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c5c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5c6:	685a      	ldr	r2, [r3, #4]
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	1ad2      	subs	r2, r2, r3
 800c5cc:	69bb      	ldr	r3, [r7, #24]
 800c5ce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c5d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5d2:	687a      	ldr	r2, [r7, #4]
 800c5d4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c5d6:	69b8      	ldr	r0, [r7, #24]
 800c5d8:	f000 f8fe 	bl	800c7d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c5dc:	4b1b      	ldr	r3, [pc, #108]	; (800c64c <pvPortMalloc+0x188>)
 800c5de:	681a      	ldr	r2, [r3, #0]
 800c5e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5e2:	685b      	ldr	r3, [r3, #4]
 800c5e4:	1ad3      	subs	r3, r2, r3
 800c5e6:	4a19      	ldr	r2, [pc, #100]	; (800c64c <pvPortMalloc+0x188>)
 800c5e8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c5ea:	4b18      	ldr	r3, [pc, #96]	; (800c64c <pvPortMalloc+0x188>)
 800c5ec:	681a      	ldr	r2, [r3, #0]
 800c5ee:	4b19      	ldr	r3, [pc, #100]	; (800c654 <pvPortMalloc+0x190>)
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	429a      	cmp	r2, r3
 800c5f4:	d203      	bcs.n	800c5fe <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c5f6:	4b15      	ldr	r3, [pc, #84]	; (800c64c <pvPortMalloc+0x188>)
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	4a16      	ldr	r2, [pc, #88]	; (800c654 <pvPortMalloc+0x190>)
 800c5fc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c5fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c600:	685a      	ldr	r2, [r3, #4]
 800c602:	4b11      	ldr	r3, [pc, #68]	; (800c648 <pvPortMalloc+0x184>)
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	431a      	orrs	r2, r3
 800c608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c60a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c60c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c60e:	2200      	movs	r2, #0
 800c610:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c612:	f7fe fcc7 	bl	800afa4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c616:	69fb      	ldr	r3, [r7, #28]
 800c618:	f003 0307 	and.w	r3, r3, #7
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d00c      	beq.n	800c63a <pvPortMalloc+0x176>
	__asm volatile
 800c620:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c624:	b672      	cpsid	i
 800c626:	f383 8811 	msr	BASEPRI, r3
 800c62a:	f3bf 8f6f 	isb	sy
 800c62e:	f3bf 8f4f 	dsb	sy
 800c632:	b662      	cpsie	i
 800c634:	60fb      	str	r3, [r7, #12]
}
 800c636:	bf00      	nop
 800c638:	e7fe      	b.n	800c638 <pvPortMalloc+0x174>
	return pvReturn;
 800c63a:	69fb      	ldr	r3, [r7, #28]
}
 800c63c:	4618      	mov	r0, r3
 800c63e:	3728      	adds	r7, #40	; 0x28
 800c640:	46bd      	mov	sp, r7
 800c642:	bd80      	pop	{r7, pc}
 800c644:	2000bba0 	.word	0x2000bba0
 800c648:	2000bbac 	.word	0x2000bbac
 800c64c:	2000bba4 	.word	0x2000bba4
 800c650:	2000bb98 	.word	0x2000bb98
 800c654:	2000bba8 	.word	0x2000bba8

0800c658 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b086      	sub	sp, #24
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	2b00      	cmp	r3, #0
 800c668:	d04c      	beq.n	800c704 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c66a:	2308      	movs	r3, #8
 800c66c:	425b      	negs	r3, r3
 800c66e:	697a      	ldr	r2, [r7, #20]
 800c670:	4413      	add	r3, r2
 800c672:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c674:	697b      	ldr	r3, [r7, #20]
 800c676:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c678:	693b      	ldr	r3, [r7, #16]
 800c67a:	685a      	ldr	r2, [r3, #4]
 800c67c:	4b23      	ldr	r3, [pc, #140]	; (800c70c <vPortFree+0xb4>)
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	4013      	ands	r3, r2
 800c682:	2b00      	cmp	r3, #0
 800c684:	d10c      	bne.n	800c6a0 <vPortFree+0x48>
	__asm volatile
 800c686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c68a:	b672      	cpsid	i
 800c68c:	f383 8811 	msr	BASEPRI, r3
 800c690:	f3bf 8f6f 	isb	sy
 800c694:	f3bf 8f4f 	dsb	sy
 800c698:	b662      	cpsie	i
 800c69a:	60fb      	str	r3, [r7, #12]
}
 800c69c:	bf00      	nop
 800c69e:	e7fe      	b.n	800c69e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c6a0:	693b      	ldr	r3, [r7, #16]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d00c      	beq.n	800c6c2 <vPortFree+0x6a>
	__asm volatile
 800c6a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6ac:	b672      	cpsid	i
 800c6ae:	f383 8811 	msr	BASEPRI, r3
 800c6b2:	f3bf 8f6f 	isb	sy
 800c6b6:	f3bf 8f4f 	dsb	sy
 800c6ba:	b662      	cpsie	i
 800c6bc:	60bb      	str	r3, [r7, #8]
}
 800c6be:	bf00      	nop
 800c6c0:	e7fe      	b.n	800c6c0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c6c2:	693b      	ldr	r3, [r7, #16]
 800c6c4:	685a      	ldr	r2, [r3, #4]
 800c6c6:	4b11      	ldr	r3, [pc, #68]	; (800c70c <vPortFree+0xb4>)
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	4013      	ands	r3, r2
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d019      	beq.n	800c704 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c6d0:	693b      	ldr	r3, [r7, #16]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d115      	bne.n	800c704 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c6d8:	693b      	ldr	r3, [r7, #16]
 800c6da:	685a      	ldr	r2, [r3, #4]
 800c6dc:	4b0b      	ldr	r3, [pc, #44]	; (800c70c <vPortFree+0xb4>)
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	43db      	mvns	r3, r3
 800c6e2:	401a      	ands	r2, r3
 800c6e4:	693b      	ldr	r3, [r7, #16]
 800c6e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c6e8:	f7fe fc4e 	bl	800af88 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c6ec:	693b      	ldr	r3, [r7, #16]
 800c6ee:	685a      	ldr	r2, [r3, #4]
 800c6f0:	4b07      	ldr	r3, [pc, #28]	; (800c710 <vPortFree+0xb8>)
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	4413      	add	r3, r2
 800c6f6:	4a06      	ldr	r2, [pc, #24]	; (800c710 <vPortFree+0xb8>)
 800c6f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c6fa:	6938      	ldr	r0, [r7, #16]
 800c6fc:	f000 f86c 	bl	800c7d8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c700:	f7fe fc50 	bl	800afa4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c704:	bf00      	nop
 800c706:	3718      	adds	r7, #24
 800c708:	46bd      	mov	sp, r7
 800c70a:	bd80      	pop	{r7, pc}
 800c70c:	2000bbac 	.word	0x2000bbac
 800c710:	2000bba4 	.word	0x2000bba4

0800c714 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c714:	b480      	push	{r7}
 800c716:	b085      	sub	sp, #20
 800c718:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c71a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c71e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c720:	4b27      	ldr	r3, [pc, #156]	; (800c7c0 <prvHeapInit+0xac>)
 800c722:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	f003 0307 	and.w	r3, r3, #7
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d00c      	beq.n	800c748 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	3307      	adds	r3, #7
 800c732:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	f023 0307 	bic.w	r3, r3, #7
 800c73a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c73c:	68ba      	ldr	r2, [r7, #8]
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	1ad3      	subs	r3, r2, r3
 800c742:	4a1f      	ldr	r2, [pc, #124]	; (800c7c0 <prvHeapInit+0xac>)
 800c744:	4413      	add	r3, r2
 800c746:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c74c:	4a1d      	ldr	r2, [pc, #116]	; (800c7c4 <prvHeapInit+0xb0>)
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c752:	4b1c      	ldr	r3, [pc, #112]	; (800c7c4 <prvHeapInit+0xb0>)
 800c754:	2200      	movs	r2, #0
 800c756:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	68ba      	ldr	r2, [r7, #8]
 800c75c:	4413      	add	r3, r2
 800c75e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c760:	2208      	movs	r2, #8
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	1a9b      	subs	r3, r3, r2
 800c766:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	f023 0307 	bic.w	r3, r3, #7
 800c76e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	4a15      	ldr	r2, [pc, #84]	; (800c7c8 <prvHeapInit+0xb4>)
 800c774:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c776:	4b14      	ldr	r3, [pc, #80]	; (800c7c8 <prvHeapInit+0xb4>)
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	2200      	movs	r2, #0
 800c77c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c77e:	4b12      	ldr	r3, [pc, #72]	; (800c7c8 <prvHeapInit+0xb4>)
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	2200      	movs	r2, #0
 800c784:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c78a:	683b      	ldr	r3, [r7, #0]
 800c78c:	68fa      	ldr	r2, [r7, #12]
 800c78e:	1ad2      	subs	r2, r2, r3
 800c790:	683b      	ldr	r3, [r7, #0]
 800c792:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c794:	4b0c      	ldr	r3, [pc, #48]	; (800c7c8 <prvHeapInit+0xb4>)
 800c796:	681a      	ldr	r2, [r3, #0]
 800c798:	683b      	ldr	r3, [r7, #0]
 800c79a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c79c:	683b      	ldr	r3, [r7, #0]
 800c79e:	685b      	ldr	r3, [r3, #4]
 800c7a0:	4a0a      	ldr	r2, [pc, #40]	; (800c7cc <prvHeapInit+0xb8>)
 800c7a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c7a4:	683b      	ldr	r3, [r7, #0]
 800c7a6:	685b      	ldr	r3, [r3, #4]
 800c7a8:	4a09      	ldr	r2, [pc, #36]	; (800c7d0 <prvHeapInit+0xbc>)
 800c7aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c7ac:	4b09      	ldr	r3, [pc, #36]	; (800c7d4 <prvHeapInit+0xc0>)
 800c7ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c7b2:	601a      	str	r2, [r3, #0]
}
 800c7b4:	bf00      	nop
 800c7b6:	3714      	adds	r7, #20
 800c7b8:	46bd      	mov	sp, r7
 800c7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7be:	4770      	bx	lr
 800c7c0:	20007f98 	.word	0x20007f98
 800c7c4:	2000bb98 	.word	0x2000bb98
 800c7c8:	2000bba0 	.word	0x2000bba0
 800c7cc:	2000bba8 	.word	0x2000bba8
 800c7d0:	2000bba4 	.word	0x2000bba4
 800c7d4:	2000bbac 	.word	0x2000bbac

0800c7d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c7d8:	b480      	push	{r7}
 800c7da:	b085      	sub	sp, #20
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c7e0:	4b28      	ldr	r3, [pc, #160]	; (800c884 <prvInsertBlockIntoFreeList+0xac>)
 800c7e2:	60fb      	str	r3, [r7, #12]
 800c7e4:	e002      	b.n	800c7ec <prvInsertBlockIntoFreeList+0x14>
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	60fb      	str	r3, [r7, #12]
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	687a      	ldr	r2, [r7, #4]
 800c7f2:	429a      	cmp	r2, r3
 800c7f4:	d8f7      	bhi.n	800c7e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	685b      	ldr	r3, [r3, #4]
 800c7fe:	68ba      	ldr	r2, [r7, #8]
 800c800:	4413      	add	r3, r2
 800c802:	687a      	ldr	r2, [r7, #4]
 800c804:	429a      	cmp	r2, r3
 800c806:	d108      	bne.n	800c81a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	685a      	ldr	r2, [r3, #4]
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	685b      	ldr	r3, [r3, #4]
 800c810:	441a      	add	r2, r3
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	685b      	ldr	r3, [r3, #4]
 800c822:	68ba      	ldr	r2, [r7, #8]
 800c824:	441a      	add	r2, r3
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	429a      	cmp	r2, r3
 800c82c:	d118      	bne.n	800c860 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	681a      	ldr	r2, [r3, #0]
 800c832:	4b15      	ldr	r3, [pc, #84]	; (800c888 <prvInsertBlockIntoFreeList+0xb0>)
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	429a      	cmp	r2, r3
 800c838:	d00d      	beq.n	800c856 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	685a      	ldr	r2, [r3, #4]
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	685b      	ldr	r3, [r3, #4]
 800c844:	441a      	add	r2, r3
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	681a      	ldr	r2, [r3, #0]
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	601a      	str	r2, [r3, #0]
 800c854:	e008      	b.n	800c868 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c856:	4b0c      	ldr	r3, [pc, #48]	; (800c888 <prvInsertBlockIntoFreeList+0xb0>)
 800c858:	681a      	ldr	r2, [r3, #0]
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	601a      	str	r2, [r3, #0]
 800c85e:	e003      	b.n	800c868 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	681a      	ldr	r2, [r3, #0]
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c868:	68fa      	ldr	r2, [r7, #12]
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	429a      	cmp	r2, r3
 800c86e:	d002      	beq.n	800c876 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	687a      	ldr	r2, [r7, #4]
 800c874:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c876:	bf00      	nop
 800c878:	3714      	adds	r7, #20
 800c87a:	46bd      	mov	sp, r7
 800c87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c880:	4770      	bx	lr
 800c882:	bf00      	nop
 800c884:	2000bb98 	.word	0x2000bb98
 800c888:	2000bba0 	.word	0x2000bba0

0800c88c <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Control>:
 800c88c:	4b04      	ldr	r3, [pc, #16]	; (800c8a0 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Control+0x14>)
 800c88e:	681a      	ldr	r2, [r3, #0]
 800c890:	b10a      	cbz	r2, 800c896 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Control+0xa>
 800c892:	4803      	ldr	r0, [pc, #12]	; (800c8a0 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Control+0x14>)
 800c894:	4770      	bx	lr
 800c896:	4a03      	ldr	r2, [pc, #12]	; (800c8a4 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Control+0x18>)
 800c898:	4801      	ldr	r0, [pc, #4]	; (800c8a0 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Control+0x14>)
 800c89a:	6812      	ldr	r2, [r2, #0]
 800c89c:	601a      	str	r2, [r3, #0]
 800c89e:	4770      	bx	lr
 800c8a0:	2000001c 	.word	0x2000001c
 800c8a4:	20000b60 	.word	0x20000b60

0800c8a8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Control_Request>:
 800c8a8:	4b06      	ldr	r3, [pc, #24]	; (800c8c4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x1c>)
 800c8aa:	4807      	ldr	r0, [pc, #28]	; (800c8c8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x20>)
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	4907      	ldr	r1, [pc, #28]	; (800c8cc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x24>)
 800c8b0:	4a07      	ldr	r2, [pc, #28]	; (800c8d0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x28>)
 800c8b2:	b410      	push	{r4}
 800c8b4:	4c07      	ldr	r4, [pc, #28]	; (800c8d4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x2c>)
 800c8b6:	6003      	str	r3, [r0, #0]
 800c8b8:	6023      	str	r3, [r4, #0]
 800c8ba:	600b      	str	r3, [r1, #0]
 800c8bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c8c0:	6013      	str	r3, [r2, #0]
 800c8c2:	4770      	bx	lr
 800c8c4:	20000b60 	.word	0x20000b60
 800c8c8:	20000090 	.word	0x20000090
 800c8cc:	20000050 	.word	0x20000050
 800c8d0:	2000001c 	.word	0x2000001c
 800c8d4:	20000078 	.word	0x20000078

0800c8d8 <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Debug>:
 800c8d8:	4b04      	ldr	r3, [pc, #16]	; (800c8ec <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Debug+0x14>)
 800c8da:	681a      	ldr	r2, [r3, #0]
 800c8dc:	b10a      	cbz	r2, 800c8e2 <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Debug+0xa>
 800c8de:	4803      	ldr	r0, [pc, #12]	; (800c8ec <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Debug+0x14>)
 800c8e0:	4770      	bx	lr
 800c8e2:	4a03      	ldr	r2, [pc, #12]	; (800c8f0 <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Debug+0x18>)
 800c8e4:	4801      	ldr	r0, [pc, #4]	; (800c8ec <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Debug+0x14>)
 800c8e6:	6812      	ldr	r2, [r2, #0]
 800c8e8:	601a      	str	r2, [r3, #0]
 800c8ea:	4770      	bx	lr
 800c8ec:	200000b0 	.word	0x200000b0
 800c8f0:	20000b60 	.word	0x20000b60

0800c8f4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Debug>:
 800c8f4:	4a02      	ldr	r2, [pc, #8]	; (800c900 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Debug+0xc>)
 800c8f6:	4b03      	ldr	r3, [pc, #12]	; (800c904 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Debug+0x10>)
 800c8f8:	6812      	ldr	r2, [r2, #0]
 800c8fa:	601a      	str	r2, [r3, #0]
 800c8fc:	4770      	bx	lr
 800c8fe:	bf00      	nop
 800c900:	20000b60 	.word	0x20000b60
 800c904:	200000b0 	.word	0x200000b0

0800c908 <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__DirectAccess>:
 800c908:	4b04      	ldr	r3, [pc, #16]	; (800c91c <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__DirectAccess+0x14>)
 800c90a:	681a      	ldr	r2, [r3, #0]
 800c90c:	b10a      	cbz	r2, 800c912 <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__DirectAccess+0xa>
 800c90e:	4803      	ldr	r0, [pc, #12]	; (800c91c <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__DirectAccess+0x14>)
 800c910:	4770      	bx	lr
 800c912:	4a03      	ldr	r2, [pc, #12]	; (800c920 <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__DirectAccess+0x18>)
 800c914:	4801      	ldr	r0, [pc, #4]	; (800c91c <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__DirectAccess+0x14>)
 800c916:	6812      	ldr	r2, [r2, #0]
 800c918:	601a      	str	r2, [r3, #0]
 800c91a:	4770      	bx	lr
 800c91c:	200000d0 	.word	0x200000d0
 800c920:	20000b60 	.word	0x20000b60

0800c924 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__DirectAccess>:
 800c924:	4a02      	ldr	r2, [pc, #8]	; (800c930 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__DirectAccess+0xc>)
 800c926:	4b03      	ldr	r3, [pc, #12]	; (800c934 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__DirectAccess+0x10>)
 800c928:	6812      	ldr	r2, [r2, #0]
 800c92a:	601a      	str	r2, [r3, #0]
 800c92c:	4770      	bx	lr
 800c92e:	bf00      	nop
 800c930:	20000b60 	.word	0x20000b60
 800c934:	200000d0 	.word	0x200000d0

0800c938 <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Encoder>:
 800c938:	4b04      	ldr	r3, [pc, #16]	; (800c94c <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Encoder+0x14>)
 800c93a:	681a      	ldr	r2, [r3, #0]
 800c93c:	b10a      	cbz	r2, 800c942 <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Encoder+0xa>
 800c93e:	4803      	ldr	r0, [pc, #12]	; (800c94c <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Encoder+0x14>)
 800c940:	4770      	bx	lr
 800c942:	4a03      	ldr	r2, [pc, #12]	; (800c950 <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Encoder+0x18>)
 800c944:	4801      	ldr	r0, [pc, #4]	; (800c94c <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Encoder+0x14>)
 800c946:	6812      	ldr	r2, [r2, #0]
 800c948:	601a      	str	r2, [r3, #0]
 800c94a:	4770      	bx	lr
 800c94c:	200000f0 	.word	0x200000f0
 800c950:	20000b60 	.word	0x20000b60

0800c954 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Encoder>:
 800c954:	4a02      	ldr	r2, [pc, #8]	; (800c960 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Encoder+0xc>)
 800c956:	4b03      	ldr	r3, [pc, #12]	; (800c964 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Encoder+0x10>)
 800c958:	6812      	ldr	r2, [r2, #0]
 800c95a:	601a      	str	r2, [r3, #0]
 800c95c:	4770      	bx	lr
 800c95e:	bf00      	nop
 800c960:	20000b60 	.word	0x20000b60
 800c964:	200000f0 	.word	0x200000f0

0800c968 <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Feedback>:
 800c968:	4b04      	ldr	r3, [pc, #16]	; (800c97c <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Feedback+0x14>)
 800c96a:	681a      	ldr	r2, [r3, #0]
 800c96c:	b10a      	cbz	r2, 800c972 <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Feedback+0xa>
 800c96e:	4803      	ldr	r0, [pc, #12]	; (800c97c <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Feedback+0x14>)
 800c970:	4770      	bx	lr
 800c972:	4a03      	ldr	r2, [pc, #12]	; (800c980 <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Feedback+0x18>)
 800c974:	4801      	ldr	r0, [pc, #4]	; (800c97c <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Feedback+0x14>)
 800c976:	6812      	ldr	r2, [r2, #0]
 800c978:	601a      	str	r2, [r3, #0]
 800c97a:	4770      	bx	lr
 800c97c:	20000110 	.word	0x20000110
 800c980:	20000b60 	.word	0x20000b60

0800c984 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Feedback>:
 800c984:	4a02      	ldr	r2, [pc, #8]	; (800c990 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Feedback+0xc>)
 800c986:	4b03      	ldr	r3, [pc, #12]	; (800c994 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Feedback+0x10>)
 800c988:	6812      	ldr	r2, [r2, #0]
 800c98a:	601a      	str	r2, [r3, #0]
 800c98c:	4770      	bx	lr
 800c98e:	bf00      	nop
 800c990:	20000b60 	.word	0x20000b60
 800c994:	20000110 	.word	0x20000110

0800c998 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Setup>:
 800c998:	4b04      	ldr	r3, [pc, #16]	; (800c9ac <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Setup+0x14>)
 800c99a:	681a      	ldr	r2, [r3, #0]
 800c99c:	b10a      	cbz	r2, 800c9a2 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Setup+0xa>
 800c99e:	4803      	ldr	r0, [pc, #12]	; (800c9ac <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Setup+0x14>)
 800c9a0:	4770      	bx	lr
 800c9a2:	4a03      	ldr	r2, [pc, #12]	; (800c9b0 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Setup+0x18>)
 800c9a4:	4801      	ldr	r0, [pc, #4]	; (800c9ac <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Setup+0x14>)
 800c9a6:	6812      	ldr	r2, [r2, #0]
 800c9a8:	601a      	str	r2, [r3, #0]
 800c9aa:	4770      	bx	lr
 800c9ac:	20000130 	.word	0x20000130
 800c9b0:	20000b60 	.word	0x20000b60

0800c9b4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Setup_Request>:
 800c9b4:	4b06      	ldr	r3, [pc, #24]	; (800c9d0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x1c>)
 800c9b6:	4807      	ldr	r0, [pc, #28]	; (800c9d4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x20>)
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	4907      	ldr	r1, [pc, #28]	; (800c9d8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x24>)
 800c9bc:	4a07      	ldr	r2, [pc, #28]	; (800c9dc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x28>)
 800c9be:	b410      	push	{r4}
 800c9c0:	4c07      	ldr	r4, [pc, #28]	; (800c9e0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x2c>)
 800c9c2:	6003      	str	r3, [r0, #0]
 800c9c4:	6023      	str	r3, [r4, #0]
 800c9c6:	600b      	str	r3, [r1, #0]
 800c9c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c9cc:	6013      	str	r3, [r2, #0]
 800c9ce:	4770      	bx	lr
 800c9d0:	20000b60 	.word	0x20000b60
 800c9d4:	200001a4 	.word	0x200001a4
 800c9d8:	20000164 	.word	0x20000164
 800c9dc:	20000130 	.word	0x20000130
 800c9e0:	2000018c 	.word	0x2000018c

0800c9e4 <racs_services__srv__Control_Request__rosidl_typesupport_introspection_c__size_function__Control_Request__encoders>:
 800c9e4:	2006      	movs	r0, #6
 800c9e6:	4770      	bx	lr

0800c9e8 <racs_services__srv__Control_Request__rosidl_typesupport_introspection_c__get_const_function__Control_Request__encoders>:
 800c9e8:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800c9ec:	4770      	bx	lr
 800c9ee:	bf00      	nop

0800c9f0 <racs_services__srv__Control_Request__rosidl_typesupport_introspection_c__fetch_function__Control_Request__encoders>:
 800c9f0:	f930 3011 	ldrsh.w	r3, [r0, r1, lsl #1]
 800c9f4:	8013      	strh	r3, [r2, #0]
 800c9f6:	4770      	bx	lr

0800c9f8 <racs_services__srv__Control_Request__rosidl_typesupport_introspection_c__assign_function__Control_Request__encoders>:
 800c9f8:	f9b2 3000 	ldrsh.w	r3, [r2]
 800c9fc:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 800ca00:	4770      	bx	lr
 800ca02:	bf00      	nop

0800ca04 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__size_function__Control_Event__request>:
 800ca04:	6840      	ldr	r0, [r0, #4]
 800ca06:	4770      	bx	lr

0800ca08 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__get_const_function__Control_Event__request>:
 800ca08:	6800      	ldr	r0, [r0, #0]
 800ca0a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800ca0e:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800ca12:	4770      	bx	lr

0800ca14 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__fetch_function__Control_Event__request>:
 800ca14:	6800      	ldr	r0, [r0, #0]
 800ca16:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800ca1a:	eb00 0341 	add.w	r3, r0, r1, lsl #1
 800ca1e:	f850 c011 	ldr.w	ip, [r0, r1, lsl #1]
 800ca22:	6858      	ldr	r0, [r3, #4]
 800ca24:	6899      	ldr	r1, [r3, #8]
 800ca26:	f8c2 c000 	str.w	ip, [r2]
 800ca2a:	6050      	str	r0, [r2, #4]
 800ca2c:	6091      	str	r1, [r2, #8]
 800ca2e:	899b      	ldrh	r3, [r3, #12]
 800ca30:	8193      	strh	r3, [r2, #12]
 800ca32:	4770      	bx	lr

0800ca34 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__assign_function__Control_Event__request>:
 800ca34:	6800      	ldr	r0, [r0, #0]
 800ca36:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800ca3a:	f8d2 c008 	ldr.w	ip, [r2, #8]
 800ca3e:	eb00 0341 	add.w	r3, r0, r1, lsl #1
 800ca42:	b510      	push	{r4, lr}
 800ca44:	6814      	ldr	r4, [r2, #0]
 800ca46:	f8d2 e004 	ldr.w	lr, [r2, #4]
 800ca4a:	f840 4011 	str.w	r4, [r0, r1, lsl #1]
 800ca4e:	f8c3 e004 	str.w	lr, [r3, #4]
 800ca52:	f8c3 c008 	str.w	ip, [r3, #8]
 800ca56:	8992      	ldrh	r2, [r2, #12]
 800ca58:	819a      	strh	r2, [r3, #12]
 800ca5a:	bd10      	pop	{r4, pc}

0800ca5c <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__size_function__Control_Event__response>:
 800ca5c:	6840      	ldr	r0, [r0, #4]
 800ca5e:	4770      	bx	lr

0800ca60 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__get_const_function__Control_Event__response>:
 800ca60:	6800      	ldr	r0, [r0, #0]
 800ca62:	4408      	add	r0, r1
 800ca64:	4770      	bx	lr
 800ca66:	bf00      	nop

0800ca68 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__fetch_function__Control_Event__response>:
 800ca68:	6803      	ldr	r3, [r0, #0]
 800ca6a:	5c5b      	ldrb	r3, [r3, r1]
 800ca6c:	7013      	strb	r3, [r2, #0]
 800ca6e:	4770      	bx	lr

0800ca70 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__assign_function__Control_Event__response>:
 800ca70:	6803      	ldr	r3, [r0, #0]
 800ca72:	7812      	ldrb	r2, [r2, #0]
 800ca74:	545a      	strb	r2, [r3, r1]
 800ca76:	4770      	bx	lr

0800ca78 <racs_services__srv__Control_Request__rosidl_typesupport_introspection_c__Control_Request_init_function>:
 800ca78:	f008 b9aa 	b.w	8014dd0 <racs_services__srv__Control_Request__init>

0800ca7c <racs_services__srv__Control_Request__rosidl_typesupport_introspection_c__Control_Request_fini_function>:
 800ca7c:	f008 b9ac 	b.w	8014dd8 <racs_services__srv__Control_Request__fini>

0800ca80 <racs_services__srv__Control_Response__rosidl_typesupport_introspection_c__Control_Response_init_function>:
 800ca80:	f008 b9ec 	b.w	8014e5c <racs_services__srv__Control_Response__init>

0800ca84 <racs_services__srv__Control_Response__rosidl_typesupport_introspection_c__Control_Response_fini_function>:
 800ca84:	f008 b9ee 	b.w	8014e64 <racs_services__srv__Control_Response__fini>

0800ca88 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__Control_Event_init_function>:
 800ca88:	f008 ba24 	b.w	8014ed4 <racs_services__srv__Control_Event__init>

0800ca8c <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__Control_Event_fini_function>:
 800ca8c:	f008 ba44 	b.w	8014f18 <racs_services__srv__Control_Event__fini>

0800ca90 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__resize_function__Control_Event__request>:
 800ca90:	b510      	push	{r4, lr}
 800ca92:	4604      	mov	r4, r0
 800ca94:	b082      	sub	sp, #8
 800ca96:	9101      	str	r1, [sp, #4]
 800ca98:	f008 f9cc 	bl	8014e34 <racs_services__srv__Control_Request__Sequence__fini>
 800ca9c:	9901      	ldr	r1, [sp, #4]
 800ca9e:	4620      	mov	r0, r4
 800caa0:	b002      	add	sp, #8
 800caa2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800caa6:	f008 b9ab 	b.w	8014e00 <racs_services__srv__Control_Request__Sequence__init>
 800caaa:	bf00      	nop

0800caac <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__resize_function__Control_Event__response>:
 800caac:	b510      	push	{r4, lr}
 800caae:	4604      	mov	r4, r0
 800cab0:	b082      	sub	sp, #8
 800cab2:	9101      	str	r1, [sp, #4]
 800cab4:	f008 f9fa 	bl	8014eac <racs_services__srv__Control_Response__Sequence__fini>
 800cab8:	9901      	ldr	r1, [sp, #4]
 800caba:	4620      	mov	r0, r4
 800cabc:	b002      	add	sp, #8
 800cabe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cac2:	f008 b9d9 	b.w	8014e78 <racs_services__srv__Control_Response__Sequence__init>
 800cac6:	bf00      	nop

0800cac8 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__get_function__Control_Event__response>:
 800cac8:	6800      	ldr	r0, [r0, #0]
 800caca:	4408      	add	r0, r1
 800cacc:	4770      	bx	lr
 800cace:	bf00      	nop

0800cad0 <racs_services__srv__Control_Request__rosidl_typesupport_introspection_c__get_function__Control_Request__encoders>:
 800cad0:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800cad4:	4770      	bx	lr
 800cad6:	bf00      	nop

0800cad8 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__get_function__Control_Event__request>:
 800cad8:	6800      	ldr	r0, [r0, #0]
 800cada:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800cade:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800cae2:	4770      	bx	lr

0800cae4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Request>:
 800cae4:	4b04      	ldr	r3, [pc, #16]	; (800caf8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x14>)
 800cae6:	681a      	ldr	r2, [r3, #0]
 800cae8:	b10a      	cbz	r2, 800caee <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Request+0xa>
 800caea:	4803      	ldr	r0, [pc, #12]	; (800caf8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x14>)
 800caec:	4770      	bx	lr
 800caee:	4a03      	ldr	r2, [pc, #12]	; (800cafc <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x18>)
 800caf0:	4801      	ldr	r0, [pc, #4]	; (800caf8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x14>)
 800caf2:	6812      	ldr	r2, [r2, #0]
 800caf4:	601a      	str	r2, [r3, #0]
 800caf6:	4770      	bx	lr
 800caf8:	2000033c 	.word	0x2000033c
 800cafc:	20000b64 	.word	0x20000b64

0800cb00 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Response>:
 800cb00:	4b04      	ldr	r3, [pc, #16]	; (800cb14 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Response+0x14>)
 800cb02:	681a      	ldr	r2, [r3, #0]
 800cb04:	b10a      	cbz	r2, 800cb0a <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Response+0xa>
 800cb06:	4803      	ldr	r0, [pc, #12]	; (800cb14 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Response+0x14>)
 800cb08:	4770      	bx	lr
 800cb0a:	4a03      	ldr	r2, [pc, #12]	; (800cb18 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Response+0x18>)
 800cb0c:	4801      	ldr	r0, [pc, #4]	; (800cb14 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Response+0x14>)
 800cb0e:	6812      	ldr	r2, [r2, #0]
 800cb10:	601a      	str	r2, [r3, #0]
 800cb12:	4770      	bx	lr
 800cb14:	20000390 	.word	0x20000390
 800cb18:	20000b64 	.word	0x20000b64

0800cb1c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event>:
 800cb1c:	b508      	push	{r3, lr}
 800cb1e:	f002 ff6b 	bl	800f9f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800cb22:	4913      	ldr	r1, [pc, #76]	; (800cb70 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x54>)
 800cb24:	4b13      	ldr	r3, [pc, #76]	; (800cb74 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x58>)
 800cb26:	680a      	ldr	r2, [r1, #0]
 800cb28:	60d8      	str	r0, [r3, #12]
 800cb2a:	b152      	cbz	r2, 800cb42 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x26>
 800cb2c:	4a12      	ldr	r2, [pc, #72]	; (800cb78 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x5c>)
 800cb2e:	6499      	str	r1, [r3, #72]	; 0x48
 800cb30:	6811      	ldr	r1, [r2, #0]
 800cb32:	b171      	cbz	r1, 800cb52 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x36>
 800cb34:	4911      	ldr	r1, [pc, #68]	; (800cb7c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x60>)
 800cb36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800cb3a:	680b      	ldr	r3, [r1, #0]
 800cb3c:	b193      	cbz	r3, 800cb64 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x48>
 800cb3e:	480f      	ldr	r0, [pc, #60]	; (800cb7c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x60>)
 800cb40:	bd08      	pop	{r3, pc}
 800cb42:	4a0f      	ldr	r2, [pc, #60]	; (800cb80 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x64>)
 800cb44:	6499      	str	r1, [r3, #72]	; 0x48
 800cb46:	6812      	ldr	r2, [r2, #0]
 800cb48:	600a      	str	r2, [r1, #0]
 800cb4a:	4a0b      	ldr	r2, [pc, #44]	; (800cb78 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x5c>)
 800cb4c:	6811      	ldr	r1, [r2, #0]
 800cb4e:	2900      	cmp	r1, #0
 800cb50:	d1f0      	bne.n	800cb34 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x18>
 800cb52:	490b      	ldr	r1, [pc, #44]	; (800cb80 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x64>)
 800cb54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800cb58:	6809      	ldr	r1, [r1, #0]
 800cb5a:	6011      	str	r1, [r2, #0]
 800cb5c:	4907      	ldr	r1, [pc, #28]	; (800cb7c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x60>)
 800cb5e:	680b      	ldr	r3, [r1, #0]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d1ec      	bne.n	800cb3e <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x22>
 800cb64:	4b06      	ldr	r3, [pc, #24]	; (800cb80 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x64>)
 800cb66:	4805      	ldr	r0, [pc, #20]	; (800cb7c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x60>)
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	600b      	str	r3, [r1, #0]
 800cb6c:	bd08      	pop	{r3, pc}
 800cb6e:	bf00      	nop
 800cb70:	2000033c 	.word	0x2000033c
 800cb74:	200001bc 	.word	0x200001bc
 800cb78:	20000390 	.word	0x20000390
 800cb7c:	20000270 	.word	0x20000270
 800cb80:	20000b64 	.word	0x20000b64

0800cb84 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control>:
 800cb84:	4b25      	ldr	r3, [pc, #148]	; (800cc1c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x98>)
 800cb86:	681a      	ldr	r2, [r3, #0]
 800cb88:	b510      	push	{r4, lr}
 800cb8a:	b142      	cbz	r2, 800cb9e <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x1a>
 800cb8c:	685c      	ldr	r4, [r3, #4]
 800cb8e:	68a3      	ldr	r3, [r4, #8]
 800cb90:	b163      	cbz	r3, 800cbac <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x28>
 800cb92:	68e3      	ldr	r3, [r4, #12]
 800cb94:	b193      	cbz	r3, 800cbbc <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x38>
 800cb96:	6923      	ldr	r3, [r4, #16]
 800cb98:	b1c3      	cbz	r3, 800cbcc <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x48>
 800cb9a:	4820      	ldr	r0, [pc, #128]	; (800cc1c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x98>)
 800cb9c:	bd10      	pop	{r4, pc}
 800cb9e:	4a20      	ldr	r2, [pc, #128]	; (800cc20 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x9c>)
 800cba0:	685c      	ldr	r4, [r3, #4]
 800cba2:	6812      	ldr	r2, [r2, #0]
 800cba4:	601a      	str	r2, [r3, #0]
 800cba6:	68a3      	ldr	r3, [r4, #8]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d1f2      	bne.n	800cb92 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0xe>
 800cbac:	4a1d      	ldr	r2, [pc, #116]	; (800cc24 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0xa0>)
 800cbae:	6813      	ldr	r3, [r2, #0]
 800cbb0:	b303      	cbz	r3, 800cbf4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x70>
 800cbb2:	6853      	ldr	r3, [r2, #4]
 800cbb4:	60a3      	str	r3, [r4, #8]
 800cbb6:	68e3      	ldr	r3, [r4, #12]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d1ec      	bne.n	800cb96 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x12>
 800cbbc:	4b1a      	ldr	r3, [pc, #104]	; (800cc28 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0xa4>)
 800cbbe:	681a      	ldr	r2, [r3, #0]
 800cbc0:	b1e2      	cbz	r2, 800cbfc <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x78>
 800cbc2:	685b      	ldr	r3, [r3, #4]
 800cbc4:	60e3      	str	r3, [r4, #12]
 800cbc6:	6923      	ldr	r3, [r4, #16]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d1e6      	bne.n	800cb9a <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x16>
 800cbcc:	f002 ff14 	bl	800f9f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800cbd0:	4a14      	ldr	r2, [pc, #80]	; (800cc24 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0xa0>)
 800cbd2:	4916      	ldr	r1, [pc, #88]	; (800cc2c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0xa8>)
 800cbd4:	6813      	ldr	r3, [r2, #0]
 800cbd6:	60c8      	str	r0, [r1, #12]
 800cbd8:	b1e3      	cbz	r3, 800cc14 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x90>
 800cbda:	4b13      	ldr	r3, [pc, #76]	; (800cc28 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0xa4>)
 800cbdc:	648a      	str	r2, [r1, #72]	; 0x48
 800cbde:	681a      	ldr	r2, [r3, #0]
 800cbe0:	b1a2      	cbz	r2, 800cc0c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x88>
 800cbe2:	4a13      	ldr	r2, [pc, #76]	; (800cc30 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0xac>)
 800cbe4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 800cbe8:	6813      	ldr	r3, [r2, #0]
 800cbea:	b15b      	cbz	r3, 800cc04 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x80>
 800cbec:	6853      	ldr	r3, [r2, #4]
 800cbee:	480b      	ldr	r0, [pc, #44]	; (800cc1c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x98>)
 800cbf0:	6123      	str	r3, [r4, #16]
 800cbf2:	bd10      	pop	{r4, pc}
 800cbf4:	4b0a      	ldr	r3, [pc, #40]	; (800cc20 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x9c>)
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	6013      	str	r3, [r2, #0]
 800cbfa:	e7da      	b.n	800cbb2 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x2e>
 800cbfc:	4a08      	ldr	r2, [pc, #32]	; (800cc20 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x9c>)
 800cbfe:	6812      	ldr	r2, [r2, #0]
 800cc00:	601a      	str	r2, [r3, #0]
 800cc02:	e7de      	b.n	800cbc2 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x3e>
 800cc04:	4b06      	ldr	r3, [pc, #24]	; (800cc20 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x9c>)
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	6013      	str	r3, [r2, #0]
 800cc0a:	e7ef      	b.n	800cbec <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x68>
 800cc0c:	4a04      	ldr	r2, [pc, #16]	; (800cc20 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x9c>)
 800cc0e:	6812      	ldr	r2, [r2, #0]
 800cc10:	601a      	str	r2, [r3, #0]
 800cc12:	e7e6      	b.n	800cbe2 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x5e>
 800cc14:	4b02      	ldr	r3, [pc, #8]	; (800cc20 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x9c>)
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	6013      	str	r3, [r2, #0]
 800cc1a:	e7de      	b.n	800cbda <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x56>
 800cc1c:	200003bc 	.word	0x200003bc
 800cc20:	20000b64 	.word	0x20000b64
 800cc24:	2000033c 	.word	0x2000033c
 800cc28:	20000390 	.word	0x20000390
 800cc2c:	200001bc 	.word	0x200001bc
 800cc30:	20000270 	.word	0x20000270

0800cc34 <racs_services__msg__Debug__rosidl_typesupport_introspection_c__size_function__Debug__data>:
 800cc34:	2006      	movs	r0, #6
 800cc36:	4770      	bx	lr

0800cc38 <racs_services__msg__Debug__rosidl_typesupport_introspection_c__get_const_function__Debug__data>:
 800cc38:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800cc3c:	4770      	bx	lr
 800cc3e:	bf00      	nop

0800cc40 <racs_services__msg__Debug__rosidl_typesupport_introspection_c__fetch_function__Debug__data>:
 800cc40:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cc44:	680b      	ldr	r3, [r1, #0]
 800cc46:	6013      	str	r3, [r2, #0]
 800cc48:	4770      	bx	lr
 800cc4a:	bf00      	nop

0800cc4c <racs_services__msg__Debug__rosidl_typesupport_introspection_c__assign_function__Debug__data>:
 800cc4c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cc50:	6813      	ldr	r3, [r2, #0]
 800cc52:	600b      	str	r3, [r1, #0]
 800cc54:	4770      	bx	lr
 800cc56:	bf00      	nop

0800cc58 <racs_services__msg__Debug__rosidl_typesupport_introspection_c__Debug_init_function>:
 800cc58:	f008 ba1e 	b.w	8015098 <racs_services__msg__Debug__init>

0800cc5c <racs_services__msg__Debug__rosidl_typesupport_introspection_c__Debug_fini_function>:
 800cc5c:	f008 ba20 	b.w	80150a0 <racs_services__msg__Debug__fini>

0800cc60 <racs_services__msg__Debug__rosidl_typesupport_introspection_c__get_function__Debug__data>:
 800cc60:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800cc64:	4770      	bx	lr
 800cc66:	bf00      	nop

0800cc68 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__Debug>:
 800cc68:	4b04      	ldr	r3, [pc, #16]	; (800cc7c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__Debug+0x14>)
 800cc6a:	681a      	ldr	r2, [r3, #0]
 800cc6c:	b10a      	cbz	r2, 800cc72 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__Debug+0xa>
 800cc6e:	4803      	ldr	r0, [pc, #12]	; (800cc7c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__Debug+0x14>)
 800cc70:	4770      	bx	lr
 800cc72:	4a03      	ldr	r2, [pc, #12]	; (800cc80 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__Debug+0x18>)
 800cc74:	4801      	ldr	r0, [pc, #4]	; (800cc7c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__Debug+0x14>)
 800cc76:	6812      	ldr	r2, [r2, #0]
 800cc78:	601a      	str	r2, [r3, #0]
 800cc7a:	4770      	bx	lr
 800cc7c:	20000424 	.word	0x20000424
 800cc80:	20000b64 	.word	0x20000b64

0800cc84 <racs_services__msg__DirectAccess__rosidl_typesupport_introspection_c__size_function__DirectAccess__pwms>:
 800cc84:	2006      	movs	r0, #6
 800cc86:	4770      	bx	lr

0800cc88 <racs_services__msg__DirectAccess__rosidl_typesupport_introspection_c__get_const_function__DirectAccess__pwms>:
 800cc88:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800cc8c:	4770      	bx	lr
 800cc8e:	bf00      	nop

0800cc90 <racs_services__msg__DirectAccess__rosidl_typesupport_introspection_c__fetch_function__DirectAccess__pwms>:
 800cc90:	f930 3011 	ldrsh.w	r3, [r0, r1, lsl #1]
 800cc94:	8013      	strh	r3, [r2, #0]
 800cc96:	4770      	bx	lr

0800cc98 <racs_services__msg__DirectAccess__rosidl_typesupport_introspection_c__assign_function__DirectAccess__pwms>:
 800cc98:	f9b2 3000 	ldrsh.w	r3, [r2]
 800cc9c:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 800cca0:	4770      	bx	lr
 800cca2:	bf00      	nop

0800cca4 <racs_services__msg__DirectAccess__rosidl_typesupport_introspection_c__DirectAccess_init_function>:
 800cca4:	f008 ba2a 	b.w	80150fc <racs_services__msg__DirectAccess__init>

0800cca8 <racs_services__msg__DirectAccess__rosidl_typesupport_introspection_c__DirectAccess_fini_function>:
 800cca8:	f008 ba2c 	b.w	8015104 <racs_services__msg__DirectAccess__fini>

0800ccac <racs_services__msg__DirectAccess__rosidl_typesupport_introspection_c__get_function__DirectAccess__pwms>:
 800ccac:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800ccb0:	4770      	bx	lr
 800ccb2:	bf00      	nop

0800ccb4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__DirectAccess>:
 800ccb4:	4b04      	ldr	r3, [pc, #16]	; (800ccc8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__DirectAccess+0x14>)
 800ccb6:	681a      	ldr	r2, [r3, #0]
 800ccb8:	b10a      	cbz	r2, 800ccbe <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__DirectAccess+0xa>
 800ccba:	4803      	ldr	r0, [pc, #12]	; (800ccc8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__DirectAccess+0x14>)
 800ccbc:	4770      	bx	lr
 800ccbe:	4a03      	ldr	r2, [pc, #12]	; (800cccc <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__DirectAccess+0x18>)
 800ccc0:	4801      	ldr	r0, [pc, #4]	; (800ccc8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__DirectAccess+0x14>)
 800ccc2:	6812      	ldr	r2, [r2, #0]
 800ccc4:	601a      	str	r2, [r3, #0]
 800ccc6:	4770      	bx	lr
 800ccc8:	200004b4 	.word	0x200004b4
 800cccc:	20000b64 	.word	0x20000b64

0800ccd0 <racs_services__msg__Encoder__rosidl_typesupport_introspection_c__size_function__Encoder__encoders>:
 800ccd0:	2005      	movs	r0, #5
 800ccd2:	4770      	bx	lr

0800ccd4 <racs_services__msg__Encoder__rosidl_typesupport_introspection_c__get_const_function__Encoder__encoders>:
 800ccd4:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800ccd8:	4770      	bx	lr
 800ccda:	bf00      	nop

0800ccdc <racs_services__msg__Encoder__rosidl_typesupport_introspection_c__fetch_function__Encoder__encoders>:
 800ccdc:	f930 3011 	ldrsh.w	r3, [r0, r1, lsl #1]
 800cce0:	8013      	strh	r3, [r2, #0]
 800cce2:	4770      	bx	lr

0800cce4 <racs_services__msg__Encoder__rosidl_typesupport_introspection_c__assign_function__Encoder__encoders>:
 800cce4:	f9b2 3000 	ldrsh.w	r3, [r2]
 800cce8:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 800ccec:	4770      	bx	lr
 800ccee:	bf00      	nop

0800ccf0 <racs_services__msg__Encoder__rosidl_typesupport_introspection_c__Encoder_init_function>:
 800ccf0:	f008 ba36 	b.w	8015160 <racs_services__msg__Encoder__init>

0800ccf4 <racs_services__msg__Encoder__rosidl_typesupport_introspection_c__Encoder_fini_function>:
 800ccf4:	f008 ba38 	b.w	8015168 <racs_services__msg__Encoder__fini>

0800ccf8 <racs_services__msg__Encoder__rosidl_typesupport_introspection_c__get_function__Encoder__encoders>:
 800ccf8:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800ccfc:	4770      	bx	lr
 800ccfe:	bf00      	nop

0800cd00 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__Encoder>:
 800cd00:	4b04      	ldr	r3, [pc, #16]	; (800cd14 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__Encoder+0x14>)
 800cd02:	681a      	ldr	r2, [r3, #0]
 800cd04:	b10a      	cbz	r2, 800cd0a <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__Encoder+0xa>
 800cd06:	4803      	ldr	r0, [pc, #12]	; (800cd14 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__Encoder+0x14>)
 800cd08:	4770      	bx	lr
 800cd0a:	4a03      	ldr	r2, [pc, #12]	; (800cd18 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__Encoder+0x18>)
 800cd0c:	4801      	ldr	r0, [pc, #4]	; (800cd14 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__Encoder+0x14>)
 800cd0e:	6812      	ldr	r2, [r2, #0]
 800cd10:	601a      	str	r2, [r3, #0]
 800cd12:	4770      	bx	lr
 800cd14:	20000508 	.word	0x20000508
 800cd18:	20000b64 	.word	0x20000b64

0800cd1c <racs_services__msg__Feedback__rosidl_typesupport_introspection_c__size_function__Feedback__encoders>:
 800cd1c:	2006      	movs	r0, #6
 800cd1e:	4770      	bx	lr

0800cd20 <racs_services__msg__Feedback__rosidl_typesupport_introspection_c__get_const_function__Feedback__encoders>:
 800cd20:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800cd24:	4770      	bx	lr
 800cd26:	bf00      	nop

0800cd28 <racs_services__msg__Feedback__rosidl_typesupport_introspection_c__fetch_function__Feedback__encoders>:
 800cd28:	f930 3011 	ldrsh.w	r3, [r0, r1, lsl #1]
 800cd2c:	8013      	strh	r3, [r2, #0]
 800cd2e:	4770      	bx	lr

0800cd30 <racs_services__msg__Feedback__rosidl_typesupport_introspection_c__assign_function__Feedback__encoders>:
 800cd30:	f9b2 3000 	ldrsh.w	r3, [r2]
 800cd34:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 800cd38:	4770      	bx	lr
 800cd3a:	bf00      	nop

0800cd3c <racs_services__msg__Feedback__rosidl_typesupport_introspection_c__Feedback_init_function>:
 800cd3c:	f008 ba42 	b.w	80151c4 <racs_services__msg__Feedback__init>

0800cd40 <racs_services__msg__Feedback__rosidl_typesupport_introspection_c__Feedback_fini_function>:
 800cd40:	f008 ba44 	b.w	80151cc <racs_services__msg__Feedback__fini>

0800cd44 <racs_services__msg__Feedback__rosidl_typesupport_introspection_c__get_function__Feedback__encoders>:
 800cd44:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800cd48:	4770      	bx	lr
 800cd4a:	bf00      	nop

0800cd4c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__Feedback>:
 800cd4c:	4b04      	ldr	r3, [pc, #16]	; (800cd60 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__Feedback+0x14>)
 800cd4e:	681a      	ldr	r2, [r3, #0]
 800cd50:	b10a      	cbz	r2, 800cd56 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__Feedback+0xa>
 800cd52:	4803      	ldr	r0, [pc, #12]	; (800cd60 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__Feedback+0x14>)
 800cd54:	4770      	bx	lr
 800cd56:	4a03      	ldr	r2, [pc, #12]	; (800cd64 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__Feedback+0x18>)
 800cd58:	4801      	ldr	r0, [pc, #4]	; (800cd60 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__Feedback+0x14>)
 800cd5a:	6812      	ldr	r2, [r2, #0]
 800cd5c:	601a      	str	r2, [r3, #0]
 800cd5e:	4770      	bx	lr
 800cd60:	20000598 	.word	0x20000598
 800cd64:	20000b64 	.word	0x20000b64

0800cd68 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__size_function__Setup_Event__request>:
 800cd68:	6840      	ldr	r0, [r0, #4]
 800cd6a:	4770      	bx	lr

0800cd6c <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__get_const_function__Setup_Event__request>:
 800cd6c:	6800      	ldr	r0, [r0, #0]
 800cd6e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800cd72:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800cd76:	4770      	bx	lr

0800cd78 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__fetch_function__Setup_Event__request>:
 800cd78:	6803      	ldr	r3, [r0, #0]
 800cd7a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800cd7e:	4694      	mov	ip, r2
 800cd80:	b500      	push	{lr}
 800cd82:	eb03 0e81 	add.w	lr, r3, r1, lsl #2
 800cd86:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800cd8a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cd8e:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 800cd92:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 800cd96:	f85d fb04 	ldr.w	pc, [sp], #4
 800cd9a:	bf00      	nop

0800cd9c <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__assign_function__Setup_Event__request>:
 800cd9c:	6803      	ldr	r3, [r0, #0]
 800cd9e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800cda2:	b500      	push	{lr}
 800cda4:	4696      	mov	lr, r2
 800cda6:	eb03 0c81 	add.w	ip, r3, r1, lsl #2
 800cdaa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800cdae:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cdb2:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 800cdb6:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 800cdba:	f85d fb04 	ldr.w	pc, [sp], #4
 800cdbe:	bf00      	nop

0800cdc0 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__size_function__Setup_Event__response>:
 800cdc0:	6840      	ldr	r0, [r0, #4]
 800cdc2:	4770      	bx	lr

0800cdc4 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__get_const_function__Setup_Event__response>:
 800cdc4:	6800      	ldr	r0, [r0, #0]
 800cdc6:	4408      	add	r0, r1
 800cdc8:	4770      	bx	lr
 800cdca:	bf00      	nop

0800cdcc <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__fetch_function__Setup_Event__response>:
 800cdcc:	6803      	ldr	r3, [r0, #0]
 800cdce:	5c5b      	ldrb	r3, [r3, r1]
 800cdd0:	7013      	strb	r3, [r2, #0]
 800cdd2:	4770      	bx	lr

0800cdd4 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__assign_function__Setup_Event__response>:
 800cdd4:	6803      	ldr	r3, [r0, #0]
 800cdd6:	7812      	ldrb	r2, [r2, #0]
 800cdd8:	545a      	strb	r2, [r3, r1]
 800cdda:	4770      	bx	lr

0800cddc <racs_services__srv__Setup_Request__rosidl_typesupport_introspection_c__Setup_Request_init_function>:
 800cddc:	f008 bbda 	b.w	8015594 <racs_services__srv__Setup_Request__init>

0800cde0 <racs_services__srv__Setup_Request__rosidl_typesupport_introspection_c__Setup_Request_fini_function>:
 800cde0:	f008 bbdc 	b.w	801559c <racs_services__srv__Setup_Request__fini>

0800cde4 <racs_services__srv__Setup_Response__rosidl_typesupport_introspection_c__Setup_Response_init_function>:
 800cde4:	f008 bc24 	b.w	8015630 <racs_services__srv__Setup_Response__init>

0800cde8 <racs_services__srv__Setup_Response__rosidl_typesupport_introspection_c__Setup_Response_fini_function>:
 800cde8:	f008 bc26 	b.w	8015638 <racs_services__srv__Setup_Response__fini>

0800cdec <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__Setup_Event_init_function>:
 800cdec:	f008 bc5c 	b.w	80156a8 <racs_services__srv__Setup_Event__init>

0800cdf0 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__Setup_Event_fini_function>:
 800cdf0:	f008 bc7c 	b.w	80156ec <racs_services__srv__Setup_Event__fini>

0800cdf4 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__resize_function__Setup_Event__request>:
 800cdf4:	b510      	push	{r4, lr}
 800cdf6:	4604      	mov	r4, r0
 800cdf8:	b082      	sub	sp, #8
 800cdfa:	9101      	str	r1, [sp, #4]
 800cdfc:	f008 fc04 	bl	8015608 <racs_services__srv__Setup_Request__Sequence__fini>
 800ce00:	9901      	ldr	r1, [sp, #4]
 800ce02:	4620      	mov	r0, r4
 800ce04:	b002      	add	sp, #8
 800ce06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce0a:	f008 bbe3 	b.w	80155d4 <racs_services__srv__Setup_Request__Sequence__init>
 800ce0e:	bf00      	nop

0800ce10 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__resize_function__Setup_Event__response>:
 800ce10:	b510      	push	{r4, lr}
 800ce12:	4604      	mov	r4, r0
 800ce14:	b082      	sub	sp, #8
 800ce16:	9101      	str	r1, [sp, #4]
 800ce18:	f008 fc32 	bl	8015680 <racs_services__srv__Setup_Response__Sequence__fini>
 800ce1c:	9901      	ldr	r1, [sp, #4]
 800ce1e:	4620      	mov	r0, r4
 800ce20:	b002      	add	sp, #8
 800ce22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce26:	f008 bc11 	b.w	801564c <racs_services__srv__Setup_Response__Sequence__init>
 800ce2a:	bf00      	nop

0800ce2c <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__get_function__Setup_Event__response>:
 800ce2c:	6800      	ldr	r0, [r0, #0]
 800ce2e:	4408      	add	r0, r1
 800ce30:	4770      	bx	lr
 800ce32:	bf00      	nop

0800ce34 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__get_function__Setup_Event__request>:
 800ce34:	6800      	ldr	r0, [r0, #0]
 800ce36:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800ce3a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800ce3e:	4770      	bx	lr

0800ce40 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Request>:
 800ce40:	4b04      	ldr	r3, [pc, #16]	; (800ce54 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x14>)
 800ce42:	681a      	ldr	r2, [r3, #0]
 800ce44:	b10a      	cbz	r2, 800ce4a <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0xa>
 800ce46:	4803      	ldr	r0, [pc, #12]	; (800ce54 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x14>)
 800ce48:	4770      	bx	lr
 800ce4a:	4a03      	ldr	r2, [pc, #12]	; (800ce58 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x18>)
 800ce4c:	4801      	ldr	r0, [pc, #4]	; (800ce54 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x14>)
 800ce4e:	6812      	ldr	r2, [r2, #0]
 800ce50:	601a      	str	r2, [r3, #0]
 800ce52:	4770      	bx	lr
 800ce54:	20000820 	.word	0x20000820
 800ce58:	20000b64 	.word	0x20000b64

0800ce5c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Response>:
 800ce5c:	4b04      	ldr	r3, [pc, #16]	; (800ce70 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Response+0x14>)
 800ce5e:	681a      	ldr	r2, [r3, #0]
 800ce60:	b10a      	cbz	r2, 800ce66 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Response+0xa>
 800ce62:	4803      	ldr	r0, [pc, #12]	; (800ce70 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Response+0x14>)
 800ce64:	4770      	bx	lr
 800ce66:	4a03      	ldr	r2, [pc, #12]	; (800ce74 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Response+0x18>)
 800ce68:	4801      	ldr	r0, [pc, #4]	; (800ce70 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Response+0x14>)
 800ce6a:	6812      	ldr	r2, [r2, #0]
 800ce6c:	601a      	str	r2, [r3, #0]
 800ce6e:	4770      	bx	lr
 800ce70:	20000874 	.word	0x20000874
 800ce74:	20000b64 	.word	0x20000b64

0800ce78 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event>:
 800ce78:	b508      	push	{r3, lr}
 800ce7a:	f002 fdbd 	bl	800f9f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800ce7e:	4913      	ldr	r1, [pc, #76]	; (800cecc <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x54>)
 800ce80:	4b13      	ldr	r3, [pc, #76]	; (800ced0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x58>)
 800ce82:	680a      	ldr	r2, [r1, #0]
 800ce84:	60d8      	str	r0, [r3, #12]
 800ce86:	b152      	cbz	r2, 800ce9e <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x26>
 800ce88:	4a12      	ldr	r2, [pc, #72]	; (800ced4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x5c>)
 800ce8a:	6499      	str	r1, [r3, #72]	; 0x48
 800ce8c:	6811      	ldr	r1, [r2, #0]
 800ce8e:	b171      	cbz	r1, 800ceae <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x36>
 800ce90:	4911      	ldr	r1, [pc, #68]	; (800ced8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x60>)
 800ce92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800ce96:	680b      	ldr	r3, [r1, #0]
 800ce98:	b193      	cbz	r3, 800cec0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x48>
 800ce9a:	480f      	ldr	r0, [pc, #60]	; (800ced8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x60>)
 800ce9c:	bd08      	pop	{r3, pc}
 800ce9e:	4a0f      	ldr	r2, [pc, #60]	; (800cedc <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x64>)
 800cea0:	6499      	str	r1, [r3, #72]	; 0x48
 800cea2:	6812      	ldr	r2, [r2, #0]
 800cea4:	600a      	str	r2, [r1, #0]
 800cea6:	4a0b      	ldr	r2, [pc, #44]	; (800ced4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x5c>)
 800cea8:	6811      	ldr	r1, [r2, #0]
 800ceaa:	2900      	cmp	r1, #0
 800ceac:	d1f0      	bne.n	800ce90 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x18>
 800ceae:	490b      	ldr	r1, [pc, #44]	; (800cedc <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x64>)
 800ceb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800ceb4:	6809      	ldr	r1, [r1, #0]
 800ceb6:	6011      	str	r1, [r2, #0]
 800ceb8:	4907      	ldr	r1, [pc, #28]	; (800ced8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x60>)
 800ceba:	680b      	ldr	r3, [r1, #0]
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d1ec      	bne.n	800ce9a <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x22>
 800cec0:	4b06      	ldr	r3, [pc, #24]	; (800cedc <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x64>)
 800cec2:	4805      	ldr	r0, [pc, #20]	; (800ced8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x60>)
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	600b      	str	r3, [r1, #0]
 800cec8:	bd08      	pop	{r3, pc}
 800ceca:	bf00      	nop
 800cecc:	20000820 	.word	0x20000820
 800ced0:	200005b0 	.word	0x200005b0
 800ced4:	20000874 	.word	0x20000874
 800ced8:	20000664 	.word	0x20000664
 800cedc:	20000b64 	.word	0x20000b64

0800cee0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup>:
 800cee0:	4b25      	ldr	r3, [pc, #148]	; (800cf78 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x98>)
 800cee2:	681a      	ldr	r2, [r3, #0]
 800cee4:	b510      	push	{r4, lr}
 800cee6:	b142      	cbz	r2, 800cefa <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x1a>
 800cee8:	685c      	ldr	r4, [r3, #4]
 800ceea:	68a3      	ldr	r3, [r4, #8]
 800ceec:	b163      	cbz	r3, 800cf08 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x28>
 800ceee:	68e3      	ldr	r3, [r4, #12]
 800cef0:	b193      	cbz	r3, 800cf18 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x38>
 800cef2:	6923      	ldr	r3, [r4, #16]
 800cef4:	b1c3      	cbz	r3, 800cf28 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x48>
 800cef6:	4820      	ldr	r0, [pc, #128]	; (800cf78 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x98>)
 800cef8:	bd10      	pop	{r4, pc}
 800cefa:	4a20      	ldr	r2, [pc, #128]	; (800cf7c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x9c>)
 800cefc:	685c      	ldr	r4, [r3, #4]
 800cefe:	6812      	ldr	r2, [r2, #0]
 800cf00:	601a      	str	r2, [r3, #0]
 800cf02:	68a3      	ldr	r3, [r4, #8]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d1f2      	bne.n	800ceee <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0xe>
 800cf08:	4a1d      	ldr	r2, [pc, #116]	; (800cf80 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0xa0>)
 800cf0a:	6813      	ldr	r3, [r2, #0]
 800cf0c:	b303      	cbz	r3, 800cf50 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x70>
 800cf0e:	6853      	ldr	r3, [r2, #4]
 800cf10:	60a3      	str	r3, [r4, #8]
 800cf12:	68e3      	ldr	r3, [r4, #12]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d1ec      	bne.n	800cef2 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x12>
 800cf18:	4b1a      	ldr	r3, [pc, #104]	; (800cf84 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0xa4>)
 800cf1a:	681a      	ldr	r2, [r3, #0]
 800cf1c:	b1e2      	cbz	r2, 800cf58 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x78>
 800cf1e:	685b      	ldr	r3, [r3, #4]
 800cf20:	60e3      	str	r3, [r4, #12]
 800cf22:	6923      	ldr	r3, [r4, #16]
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d1e6      	bne.n	800cef6 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x16>
 800cf28:	f002 fd66 	bl	800f9f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800cf2c:	4a14      	ldr	r2, [pc, #80]	; (800cf80 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0xa0>)
 800cf2e:	4916      	ldr	r1, [pc, #88]	; (800cf88 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0xa8>)
 800cf30:	6813      	ldr	r3, [r2, #0]
 800cf32:	60c8      	str	r0, [r1, #12]
 800cf34:	b1e3      	cbz	r3, 800cf70 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x90>
 800cf36:	4b13      	ldr	r3, [pc, #76]	; (800cf84 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0xa4>)
 800cf38:	648a      	str	r2, [r1, #72]	; 0x48
 800cf3a:	681a      	ldr	r2, [r3, #0]
 800cf3c:	b1a2      	cbz	r2, 800cf68 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x88>
 800cf3e:	4a13      	ldr	r2, [pc, #76]	; (800cf8c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0xac>)
 800cf40:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 800cf44:	6813      	ldr	r3, [r2, #0]
 800cf46:	b15b      	cbz	r3, 800cf60 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x80>
 800cf48:	6853      	ldr	r3, [r2, #4]
 800cf4a:	480b      	ldr	r0, [pc, #44]	; (800cf78 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x98>)
 800cf4c:	6123      	str	r3, [r4, #16]
 800cf4e:	bd10      	pop	{r4, pc}
 800cf50:	4b0a      	ldr	r3, [pc, #40]	; (800cf7c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x9c>)
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	6013      	str	r3, [r2, #0]
 800cf56:	e7da      	b.n	800cf0e <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x2e>
 800cf58:	4a08      	ldr	r2, [pc, #32]	; (800cf7c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x9c>)
 800cf5a:	6812      	ldr	r2, [r2, #0]
 800cf5c:	601a      	str	r2, [r3, #0]
 800cf5e:	e7de      	b.n	800cf1e <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x3e>
 800cf60:	4b06      	ldr	r3, [pc, #24]	; (800cf7c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x9c>)
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	6013      	str	r3, [r2, #0]
 800cf66:	e7ef      	b.n	800cf48 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x68>
 800cf68:	4a04      	ldr	r2, [pc, #16]	; (800cf7c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x9c>)
 800cf6a:	6812      	ldr	r2, [r2, #0]
 800cf6c:	601a      	str	r2, [r3, #0]
 800cf6e:	e7e6      	b.n	800cf3e <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x5e>
 800cf70:	4b02      	ldr	r3, [pc, #8]	; (800cf7c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x9c>)
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	6013      	str	r3, [r2, #0]
 800cf76:	e7de      	b.n	800cf36 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x56>
 800cf78:	200008a0 	.word	0x200008a0
 800cf7c:	20000b64 	.word	0x20000b64
 800cf80:	20000820 	.word	0x20000820
 800cf84:	20000874 	.word	0x20000874
 800cf88:	200005b0 	.word	0x200005b0
 800cf8c:	20000664 	.word	0x20000664

0800cf90 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Control_Request>:
 800cf90:	4800      	ldr	r0, [pc, #0]	; (800cf94 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x4>)
 800cf92:	4770      	bx	lr
 800cf94:	20000920 	.word	0x20000920

0800cf98 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Control_Response>:
 800cf98:	4800      	ldr	r0, [pc, #0]	; (800cf9c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Control_Response+0x4>)
 800cf9a:	4770      	bx	lr
 800cf9c:	20000938 	.word	0x20000938

0800cfa0 <_Control_Response__max_serialized_size>:
 800cfa0:	2101      	movs	r1, #1
 800cfa2:	2000      	movs	r0, #0
 800cfa4:	b508      	push	{r3, lr}
 800cfa6:	f004 fdc1 	bl	8011b2c <ucdr_alignment>
 800cfaa:	3001      	adds	r0, #1
 800cfac:	bd08      	pop	{r3, pc}
 800cfae:	bf00      	nop

0800cfb0 <_Control_Response__cdr_deserialize>:
 800cfb0:	b109      	cbz	r1, 800cfb6 <_Control_Response__cdr_deserialize+0x6>
 800cfb2:	f003 b93d 	b.w	8010230 <ucdr_deserialize_uint8_t>
 800cfb6:	4608      	mov	r0, r1
 800cfb8:	4770      	bx	lr
 800cfba:	bf00      	nop

0800cfbc <_Control_Event__max_serialized_size>:
 800cfbc:	b500      	push	{lr}
 800cfbe:	b083      	sub	sp, #12
 800cfc0:	2301      	movs	r3, #1
 800cfc2:	2100      	movs	r1, #0
 800cfc4:	f10d 0007 	add.w	r0, sp, #7
 800cfc8:	f88d 3007 	strb.w	r3, [sp, #7]
 800cfcc:	f002 fdc4 	bl	800fb58 <max_serialized_size_service_msgs__msg__ServiceEventInfo>
 800cfd0:	b003      	add	sp, #12
 800cfd2:	f85d fb04 	ldr.w	pc, [sp], #4
 800cfd6:	bf00      	nop

0800cfd8 <get_serialized_size_racs_services__srv__Control_Request>:
 800cfd8:	b1b0      	cbz	r0, 800d008 <get_serialized_size_racs_services__srv__Control_Request+0x30>
 800cfda:	b538      	push	{r3, r4, r5, lr}
 800cfdc:	460d      	mov	r5, r1
 800cfde:	2101      	movs	r1, #1
 800cfe0:	4628      	mov	r0, r5
 800cfe2:	f004 fda3 	bl	8011b2c <ucdr_alignment>
 800cfe6:	1c6b      	adds	r3, r5, #1
 800cfe8:	2101      	movs	r1, #1
 800cfea:	f1c5 050c 	rsb	r5, r5, #12
 800cfee:	181c      	adds	r4, r3, r0
 800cff0:	4620      	mov	r0, r4
 800cff2:	f004 fd9b 	bl	8011b2c <ucdr_alignment>
 800cff6:	3001      	adds	r0, #1
 800cff8:	2102      	movs	r1, #2
 800cffa:	4404      	add	r4, r0
 800cffc:	4620      	mov	r0, r4
 800cffe:	f004 fd95 	bl	8011b2c <ucdr_alignment>
 800d002:	4428      	add	r0, r5
 800d004:	4420      	add	r0, r4
 800d006:	bd38      	pop	{r3, r4, r5, pc}
 800d008:	4770      	bx	lr
 800d00a:	bf00      	nop

0800d00c <get_serialized_size_racs_services__srv__Control_Response>:
 800d00c:	b138      	cbz	r0, 800d01e <get_serialized_size_racs_services__srv__Control_Response+0x12>
 800d00e:	b508      	push	{r3, lr}
 800d010:	460b      	mov	r3, r1
 800d012:	2101      	movs	r1, #1
 800d014:	4618      	mov	r0, r3
 800d016:	f004 fd89 	bl	8011b2c <ucdr_alignment>
 800d01a:	3001      	adds	r0, #1
 800d01c:	bd08      	pop	{r3, pc}
 800d01e:	4770      	bx	lr

0800d020 <_Control_Request__cdr_deserialize>:
 800d020:	b538      	push	{r3, r4, r5, lr}
 800d022:	460c      	mov	r4, r1
 800d024:	b169      	cbz	r1, 800d042 <_Control_Request__cdr_deserialize+0x22>
 800d026:	4605      	mov	r5, r0
 800d028:	f003 f902 	bl	8010230 <ucdr_deserialize_uint8_t>
 800d02c:	1c61      	adds	r1, r4, #1
 800d02e:	4628      	mov	r0, r5
 800d030:	f003 f8fe 	bl	8010230 <ucdr_deserialize_uint8_t>
 800d034:	1ca1      	adds	r1, r4, #2
 800d036:	4628      	mov	r0, r5
 800d038:	2206      	movs	r2, #6
 800d03a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d03e:	f002 bfb7 	b.w	800ffb0 <ucdr_deserialize_array_int16_t>
 800d042:	4608      	mov	r0, r1
 800d044:	bd38      	pop	{r3, r4, r5, pc}
 800d046:	bf00      	nop

0800d048 <_Control_Response__cdr_serialize>:
 800d048:	460a      	mov	r2, r1
 800d04a:	b118      	cbz	r0, 800d054 <_Control_Response__cdr_serialize+0xc>
 800d04c:	7801      	ldrb	r1, [r0, #0]
 800d04e:	4610      	mov	r0, r2
 800d050:	f003 b8d8 	b.w	8010204 <ucdr_serialize_uint8_t>
 800d054:	4770      	bx	lr
 800d056:	bf00      	nop

0800d058 <_Control_Request__cdr_serialize>:
 800d058:	b188      	cbz	r0, 800d07e <_Control_Request__cdr_serialize+0x26>
 800d05a:	b538      	push	{r3, r4, r5, lr}
 800d05c:	460d      	mov	r5, r1
 800d05e:	4604      	mov	r4, r0
 800d060:	7801      	ldrb	r1, [r0, #0]
 800d062:	4628      	mov	r0, r5
 800d064:	f003 f8ce 	bl	8010204 <ucdr_serialize_uint8_t>
 800d068:	7861      	ldrb	r1, [r4, #1]
 800d06a:	4628      	mov	r0, r5
 800d06c:	f003 f8ca 	bl	8010204 <ucdr_serialize_uint8_t>
 800d070:	1ca1      	adds	r1, r4, #2
 800d072:	4628      	mov	r0, r5
 800d074:	2206      	movs	r2, #6
 800d076:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d07a:	f002 bf43 	b.w	800ff04 <ucdr_serialize_array_int16_t>
 800d07e:	4770      	bx	lr

0800d080 <get_serialized_size_racs_services__srv__Control_Event.part.0>:
 800d080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d084:	460e      	mov	r6, r1
 800d086:	4605      	mov	r5, r0
 800d088:	f002 fccc 	bl	800fa24 <get_serialized_size_service_msgs__msg__ServiceEventInfo>
 800d08c:	2104      	movs	r1, #4
 800d08e:	eb06 0800 	add.w	r8, r6, r0
 800d092:	f8d5 902c 	ldr.w	r9, [r5, #44]	; 0x2c
 800d096:	4640      	mov	r0, r8
 800d098:	f004 fd48 	bl	8011b2c <ucdr_alignment>
 800d09c:	3004      	adds	r0, #4
 800d09e:	4480      	add	r8, r0
 800d0a0:	f1b9 0f00 	cmp.w	r9, #0
 800d0a4:	d019      	beq.n	800d0da <get_serialized_size_racs_services__srv__Control_Event.part.0+0x5a>
 800d0a6:	2700      	movs	r7, #0
 800d0a8:	f8df a07c 	ldr.w	sl, [pc, #124]	; 800d128 <get_serialized_size_racs_services__srv__Control_Event.part.0+0xa8>
 800d0ac:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800d0ae:	ebc7 00c7 	rsb	r0, r7, r7, lsl #3
 800d0b2:	f8da 3004 	ldr.w	r3, [sl, #4]
 800d0b6:	4641      	mov	r1, r8
 800d0b8:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 800d0bc:	3701      	adds	r7, #1
 800d0be:	695b      	ldr	r3, [r3, #20]
 800d0c0:	4798      	blx	r3
 800d0c2:	4604      	mov	r4, r0
 800d0c4:	4640      	mov	r0, r8
 800d0c6:	2c04      	cmp	r4, #4
 800d0c8:	4621      	mov	r1, r4
 800d0ca:	bf28      	it	cs
 800d0cc:	2104      	movcs	r1, #4
 800d0ce:	f004 fd2d 	bl	8011b2c <ucdr_alignment>
 800d0d2:	45b9      	cmp	r9, r7
 800d0d4:	4420      	add	r0, r4
 800d0d6:	4480      	add	r8, r0
 800d0d8:	d1e8      	bne.n	800d0ac <get_serialized_size_racs_services__srv__Control_Event.part.0+0x2c>
 800d0da:	4640      	mov	r0, r8
 800d0dc:	2104      	movs	r1, #4
 800d0de:	6baf      	ldr	r7, [r5, #56]	; 0x38
 800d0e0:	f004 fd24 	bl	8011b2c <ucdr_alignment>
 800d0e4:	4480      	add	r8, r0
 800d0e6:	f108 0804 	add.w	r8, r8, #4
 800d0ea:	b1c7      	cbz	r7, 800d11e <get_serialized_size_racs_services__srv__Control_Event.part.0+0x9e>
 800d0ec:	f04f 0900 	mov.w	r9, #0
 800d0f0:	f8df a038 	ldr.w	sl, [pc, #56]	; 800d12c <get_serialized_size_racs_services__srv__Control_Event.part.0+0xac>
 800d0f4:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800d0f6:	4641      	mov	r1, r8
 800d0f8:	f8da 3004 	ldr.w	r3, [sl, #4]
 800d0fc:	4448      	add	r0, r9
 800d0fe:	f109 0901 	add.w	r9, r9, #1
 800d102:	695b      	ldr	r3, [r3, #20]
 800d104:	4798      	blx	r3
 800d106:	4604      	mov	r4, r0
 800d108:	4640      	mov	r0, r8
 800d10a:	2c04      	cmp	r4, #4
 800d10c:	4621      	mov	r1, r4
 800d10e:	bf28      	it	cs
 800d110:	2104      	movcs	r1, #4
 800d112:	f004 fd0b 	bl	8011b2c <ucdr_alignment>
 800d116:	454f      	cmp	r7, r9
 800d118:	4420      	add	r0, r4
 800d11a:	4480      	add	r8, r0
 800d11c:	d1ea      	bne.n	800d0f4 <get_serialized_size_racs_services__srv__Control_Event.part.0+0x74>
 800d11e:	eba8 0006 	sub.w	r0, r8, r6
 800d122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d126:	bf00      	nop
 800d128:	20000920 	.word	0x20000920
 800d12c:	20000938 	.word	0x20000938

0800d130 <get_serialized_size_racs_services__srv__Control_Event>:
 800d130:	b108      	cbz	r0, 800d136 <get_serialized_size_racs_services__srv__Control_Event+0x6>
 800d132:	f7ff bfa5 	b.w	800d080 <get_serialized_size_racs_services__srv__Control_Event.part.0>
 800d136:	4770      	bx	lr

0800d138 <_Control_Event__get_serialized_size>:
 800d138:	b110      	cbz	r0, 800d140 <_Control_Event__get_serialized_size+0x8>
 800d13a:	2100      	movs	r1, #0
 800d13c:	f7ff bfa0 	b.w	800d080 <get_serialized_size_racs_services__srv__Control_Event.part.0>
 800d140:	4770      	bx	lr
 800d142:	bf00      	nop

0800d144 <_Control_Event__cdr_deserialize>:
 800d144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d148:	460c      	mov	r4, r1
 800d14a:	b082      	sub	sp, #8
 800d14c:	2900      	cmp	r1, #0
 800d14e:	d045      	beq.n	800d1dc <_Control_Event__cdr_deserialize+0x98>
 800d150:	4607      	mov	r7, r0
 800d152:	f002 fd27 	bl	800fba4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800d156:	4603      	mov	r3, r0
 800d158:	4621      	mov	r1, r4
 800d15a:	4638      	mov	r0, r7
 800d15c:	685b      	ldr	r3, [r3, #4]
 800d15e:	68db      	ldr	r3, [r3, #12]
 800d160:	4798      	blx	r3
 800d162:	4638      	mov	r0, r7
 800d164:	a901      	add	r1, sp, #4
 800d166:	f003 fb93 	bl	8010890 <ucdr_deserialize_uint32_t>
 800d16a:	9b01      	ldr	r3, [sp, #4]
 800d16c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800d16e:	429a      	cmp	r2, r3
 800d170:	d330      	bcc.n	800d1d4 <_Control_Event__cdr_deserialize+0x90>
 800d172:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d174:	b193      	cbz	r3, 800d19c <_Control_Event__cdr_deserialize+0x58>
 800d176:	2500      	movs	r5, #0
 800d178:	f8df 806c 	ldr.w	r8, [pc, #108]	; 800d1e8 <_Control_Event__cdr_deserialize+0xa4>
 800d17c:	462e      	mov	r6, r5
 800d17e:	e002      	b.n	800d186 <_Control_Event__cdr_deserialize+0x42>
 800d180:	9b01      	ldr	r3, [sp, #4]
 800d182:	429e      	cmp	r6, r3
 800d184:	d20a      	bcs.n	800d19c <_Control_Event__cdr_deserialize+0x58>
 800d186:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800d188:	4638      	mov	r0, r7
 800d18a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d18e:	3601      	adds	r6, #1
 800d190:	4429      	add	r1, r5
 800d192:	350e      	adds	r5, #14
 800d194:	68db      	ldr	r3, [r3, #12]
 800d196:	4798      	blx	r3
 800d198:	2800      	cmp	r0, #0
 800d19a:	d1f1      	bne.n	800d180 <_Control_Event__cdr_deserialize+0x3c>
 800d19c:	a901      	add	r1, sp, #4
 800d19e:	4638      	mov	r0, r7
 800d1a0:	f003 fb76 	bl	8010890 <ucdr_deserialize_uint32_t>
 800d1a4:	9b01      	ldr	r3, [sp, #4]
 800d1a6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800d1a8:	429a      	cmp	r2, r3
 800d1aa:	d313      	bcc.n	800d1d4 <_Control_Event__cdr_deserialize+0x90>
 800d1ac:	63a3      	str	r3, [r4, #56]	; 0x38
 800d1ae:	b193      	cbz	r3, 800d1d6 <_Control_Event__cdr_deserialize+0x92>
 800d1b0:	2500      	movs	r5, #0
 800d1b2:	4e0c      	ldr	r6, [pc, #48]	; (800d1e4 <_Control_Event__cdr_deserialize+0xa0>)
 800d1b4:	e002      	b.n	800d1bc <_Control_Event__cdr_deserialize+0x78>
 800d1b6:	9b01      	ldr	r3, [sp, #4]
 800d1b8:	429d      	cmp	r5, r3
 800d1ba:	d20c      	bcs.n	800d1d6 <_Control_Event__cdr_deserialize+0x92>
 800d1bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d1be:	4638      	mov	r0, r7
 800d1c0:	6873      	ldr	r3, [r6, #4]
 800d1c2:	4429      	add	r1, r5
 800d1c4:	3501      	adds	r5, #1
 800d1c6:	68db      	ldr	r3, [r3, #12]
 800d1c8:	4798      	blx	r3
 800d1ca:	2800      	cmp	r0, #0
 800d1cc:	d1f3      	bne.n	800d1b6 <_Control_Event__cdr_deserialize+0x72>
 800d1ce:	b002      	add	sp, #8
 800d1d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1d4:	2000      	movs	r0, #0
 800d1d6:	b002      	add	sp, #8
 800d1d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1dc:	4608      	mov	r0, r1
 800d1de:	b002      	add	sp, #8
 800d1e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1e4:	20000938 	.word	0x20000938
 800d1e8:	20000920 	.word	0x20000920

0800d1ec <_Control_Event__cdr_serialize>:
 800d1ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d1f0:	2800      	cmp	r0, #0
 800d1f2:	d03b      	beq.n	800d26c <_Control_Event__cdr_serialize+0x80>
 800d1f4:	4605      	mov	r5, r0
 800d1f6:	460e      	mov	r6, r1
 800d1f8:	f002 fcd4 	bl	800fba4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800d1fc:	4603      	mov	r3, r0
 800d1fe:	4631      	mov	r1, r6
 800d200:	4628      	mov	r0, r5
 800d202:	685b      	ldr	r3, [r3, #4]
 800d204:	689b      	ldr	r3, [r3, #8]
 800d206:	4798      	blx	r3
 800d208:	6aef      	ldr	r7, [r5, #44]	; 0x2c
 800d20a:	4630      	mov	r0, r6
 800d20c:	4639      	mov	r1, r7
 800d20e:	f003 fa0f 	bl	8010630 <ucdr_serialize_uint32_t>
 800d212:	b198      	cbz	r0, 800d23c <_Control_Event__cdr_serialize+0x50>
 800d214:	b197      	cbz	r7, 800d23c <_Control_Event__cdr_serialize+0x50>
 800d216:	2400      	movs	r4, #0
 800d218:	f8df 805c 	ldr.w	r8, [pc, #92]	; 800d278 <_Control_Event__cdr_serialize+0x8c>
 800d21c:	e001      	b.n	800d222 <_Control_Event__cdr_serialize+0x36>
 800d21e:	42a7      	cmp	r7, r4
 800d220:	d00c      	beq.n	800d23c <_Control_Event__cdr_serialize+0x50>
 800d222:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
 800d226:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800d228:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d22c:	4631      	mov	r1, r6
 800d22e:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 800d232:	3401      	adds	r4, #1
 800d234:	689b      	ldr	r3, [r3, #8]
 800d236:	4798      	blx	r3
 800d238:	2800      	cmp	r0, #0
 800d23a:	d1f0      	bne.n	800d21e <_Control_Event__cdr_serialize+0x32>
 800d23c:	6baf      	ldr	r7, [r5, #56]	; 0x38
 800d23e:	4630      	mov	r0, r6
 800d240:	4639      	mov	r1, r7
 800d242:	f003 f9f5 	bl	8010630 <ucdr_serialize_uint32_t>
 800d246:	4680      	mov	r8, r0
 800d248:	b180      	cbz	r0, 800d26c <_Control_Event__cdr_serialize+0x80>
 800d24a:	b18f      	cbz	r7, 800d270 <_Control_Event__cdr_serialize+0x84>
 800d24c:	2400      	movs	r4, #0
 800d24e:	f8df 902c 	ldr.w	r9, [pc, #44]	; 800d27c <_Control_Event__cdr_serialize+0x90>
 800d252:	e001      	b.n	800d258 <_Control_Event__cdr_serialize+0x6c>
 800d254:	42a7      	cmp	r7, r4
 800d256:	d00b      	beq.n	800d270 <_Control_Event__cdr_serialize+0x84>
 800d258:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800d25a:	4631      	mov	r1, r6
 800d25c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800d260:	4420      	add	r0, r4
 800d262:	3401      	adds	r4, #1
 800d264:	689b      	ldr	r3, [r3, #8]
 800d266:	4798      	blx	r3
 800d268:	2800      	cmp	r0, #0
 800d26a:	d1f3      	bne.n	800d254 <_Control_Event__cdr_serialize+0x68>
 800d26c:	f04f 0800 	mov.w	r8, #0
 800d270:	4640      	mov	r0, r8
 800d272:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d276:	bf00      	nop
 800d278:	20000920 	.word	0x20000920
 800d27c:	20000938 	.word	0x20000938

0800d280 <_Control_Response__get_serialized_size>:
 800d280:	b130      	cbz	r0, 800d290 <_Control_Response__get_serialized_size+0x10>
 800d282:	2101      	movs	r1, #1
 800d284:	2000      	movs	r0, #0
 800d286:	b508      	push	{r3, lr}
 800d288:	f004 fc50 	bl	8011b2c <ucdr_alignment>
 800d28c:	3001      	adds	r0, #1
 800d28e:	bd08      	pop	{r3, pc}
 800d290:	4770      	bx	lr
 800d292:	bf00      	nop

0800d294 <_Control_Request__get_serialized_size>:
 800d294:	b190      	cbz	r0, 800d2bc <_Control_Request__get_serialized_size+0x28>
 800d296:	2101      	movs	r1, #1
 800d298:	2000      	movs	r0, #0
 800d29a:	b510      	push	{r4, lr}
 800d29c:	f004 fc46 	bl	8011b2c <ucdr_alignment>
 800d2a0:	2101      	movs	r1, #1
 800d2a2:	1844      	adds	r4, r0, r1
 800d2a4:	4620      	mov	r0, r4
 800d2a6:	f004 fc41 	bl	8011b2c <ucdr_alignment>
 800d2aa:	3001      	adds	r0, #1
 800d2ac:	2102      	movs	r1, #2
 800d2ae:	4404      	add	r4, r0
 800d2b0:	4620      	mov	r0, r4
 800d2b2:	f004 fc3b 	bl	8011b2c <ucdr_alignment>
 800d2b6:	300c      	adds	r0, #12
 800d2b8:	4420      	add	r0, r4
 800d2ba:	bd10      	pop	{r4, pc}
 800d2bc:	4770      	bx	lr
 800d2be:	bf00      	nop

0800d2c0 <_Control_Request__max_serialized_size>:
 800d2c0:	b538      	push	{r3, r4, r5, lr}
 800d2c2:	2101      	movs	r1, #1
 800d2c4:	2000      	movs	r0, #0
 800d2c6:	f004 fc31 	bl	8011b2c <ucdr_alignment>
 800d2ca:	2101      	movs	r1, #1
 800d2cc:	1845      	adds	r5, r0, r1
 800d2ce:	4628      	mov	r0, r5
 800d2d0:	f004 fc2c 	bl	8011b2c <ucdr_alignment>
 800d2d4:	1c44      	adds	r4, r0, #1
 800d2d6:	2102      	movs	r1, #2
 800d2d8:	442c      	add	r4, r5
 800d2da:	4620      	mov	r0, r4
 800d2dc:	f004 fc26 	bl	8011b2c <ucdr_alignment>
 800d2e0:	300c      	adds	r0, #12
 800d2e2:	4420      	add	r0, r4
 800d2e4:	bd38      	pop	{r3, r4, r5, pc}
 800d2e6:	bf00      	nop

0800d2e8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Control_Event>:
 800d2e8:	4800      	ldr	r0, [pc, #0]	; (800d2ec <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x4>)
 800d2ea:	4770      	bx	lr
 800d2ec:	20000908 	.word	0x20000908

0800d2f0 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__racs_services__srv__Control>:
 800d2f0:	4800      	ldr	r0, [pc, #0]	; (800d2f4 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__racs_services__srv__Control+0x4>)
 800d2f2:	4770      	bx	lr
 800d2f4:	200008dc 	.word	0x200008dc

0800d2f8 <_Debug__max_serialized_size>:
 800d2f8:	2104      	movs	r1, #4
 800d2fa:	2000      	movs	r0, #0
 800d2fc:	b508      	push	{r3, lr}
 800d2fe:	f004 fc15 	bl	8011b2c <ucdr_alignment>
 800d302:	3018      	adds	r0, #24
 800d304:	bd08      	pop	{r3, pc}
 800d306:	bf00      	nop

0800d308 <get_serialized_size_racs_services__msg__Debug>:
 800d308:	b138      	cbz	r0, 800d31a <get_serialized_size_racs_services__msg__Debug+0x12>
 800d30a:	b508      	push	{r3, lr}
 800d30c:	460b      	mov	r3, r1
 800d30e:	2104      	movs	r1, #4
 800d310:	4618      	mov	r0, r3
 800d312:	f004 fc0b 	bl	8011b2c <ucdr_alignment>
 800d316:	3018      	adds	r0, #24
 800d318:	bd08      	pop	{r3, pc}
 800d31a:	4770      	bx	lr

0800d31c <_Debug__cdr_deserialize>:
 800d31c:	b111      	cbz	r1, 800d324 <_Debug__cdr_deserialize+0x8>
 800d31e:	2206      	movs	r2, #6
 800d320:	f002 beee 	b.w	8010100 <ucdr_deserialize_array_float>
 800d324:	4608      	mov	r0, r1
 800d326:	4770      	bx	lr

0800d328 <_Debug__cdr_serialize>:
 800d328:	468c      	mov	ip, r1
 800d32a:	b120      	cbz	r0, 800d336 <_Debug__cdr_serialize+0xe>
 800d32c:	4601      	mov	r1, r0
 800d32e:	2206      	movs	r2, #6
 800d330:	4660      	mov	r0, ip
 800d332:	f002 be91 	b.w	8010058 <ucdr_serialize_array_float>
 800d336:	4770      	bx	lr

0800d338 <_Debug__get_serialized_size>:
 800d338:	b130      	cbz	r0, 800d348 <_Debug__get_serialized_size+0x10>
 800d33a:	2104      	movs	r1, #4
 800d33c:	2000      	movs	r0, #0
 800d33e:	b508      	push	{r3, lr}
 800d340:	f004 fbf4 	bl	8011b2c <ucdr_alignment>
 800d344:	3018      	adds	r0, #24
 800d346:	bd08      	pop	{r3, pc}
 800d348:	4770      	bx	lr
 800d34a:	bf00      	nop

0800d34c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__msg__Debug>:
 800d34c:	4800      	ldr	r0, [pc, #0]	; (800d350 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__msg__Debug+0x4>)
 800d34e:	4770      	bx	lr
 800d350:	200009a4 	.word	0x200009a4

0800d354 <get_serialized_size_racs_services__msg__DirectAccess>:
 800d354:	b180      	cbz	r0, 800d378 <get_serialized_size_racs_services__msg__DirectAccess+0x24>
 800d356:	b538      	push	{r3, r4, r5, lr}
 800d358:	460d      	mov	r5, r1
 800d35a:	2101      	movs	r1, #1
 800d35c:	4628      	mov	r0, r5
 800d35e:	f004 fbe5 	bl	8011b2c <ucdr_alignment>
 800d362:	1c6b      	adds	r3, r5, #1
 800d364:	f1c5 050c 	rsb	r5, r5, #12
 800d368:	2102      	movs	r1, #2
 800d36a:	181c      	adds	r4, r3, r0
 800d36c:	4620      	mov	r0, r4
 800d36e:	f004 fbdd 	bl	8011b2c <ucdr_alignment>
 800d372:	4428      	add	r0, r5
 800d374:	4420      	add	r0, r4
 800d376:	bd38      	pop	{r3, r4, r5, pc}
 800d378:	4770      	bx	lr
 800d37a:	bf00      	nop

0800d37c <_DirectAccess__cdr_deserialize>:
 800d37c:	b538      	push	{r3, r4, r5, lr}
 800d37e:	460c      	mov	r4, r1
 800d380:	b149      	cbz	r1, 800d396 <_DirectAccess__cdr_deserialize+0x1a>
 800d382:	4605      	mov	r5, r0
 800d384:	f002 ff54 	bl	8010230 <ucdr_deserialize_uint8_t>
 800d388:	1ca1      	adds	r1, r4, #2
 800d38a:	2206      	movs	r2, #6
 800d38c:	4628      	mov	r0, r5
 800d38e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d392:	f002 be0d 	b.w	800ffb0 <ucdr_deserialize_array_int16_t>
 800d396:	4608      	mov	r0, r1
 800d398:	bd38      	pop	{r3, r4, r5, pc}
 800d39a:	bf00      	nop

0800d39c <_DirectAccess__cdr_serialize>:
 800d39c:	b170      	cbz	r0, 800d3bc <_DirectAccess__cdr_serialize+0x20>
 800d39e:	b538      	push	{r3, r4, r5, lr}
 800d3a0:	4604      	mov	r4, r0
 800d3a2:	460d      	mov	r5, r1
 800d3a4:	4608      	mov	r0, r1
 800d3a6:	f814 1b02 	ldrb.w	r1, [r4], #2
 800d3aa:	f002 ff2b 	bl	8010204 <ucdr_serialize_uint8_t>
 800d3ae:	4628      	mov	r0, r5
 800d3b0:	4621      	mov	r1, r4
 800d3b2:	2206      	movs	r2, #6
 800d3b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d3b8:	f002 bda4 	b.w	800ff04 <ucdr_serialize_array_int16_t>
 800d3bc:	4770      	bx	lr
 800d3be:	bf00      	nop

0800d3c0 <_DirectAccess__get_serialized_size>:
 800d3c0:	b160      	cbz	r0, 800d3dc <_DirectAccess__get_serialized_size+0x1c>
 800d3c2:	2101      	movs	r1, #1
 800d3c4:	2000      	movs	r0, #0
 800d3c6:	b510      	push	{r4, lr}
 800d3c8:	f004 fbb0 	bl	8011b2c <ucdr_alignment>
 800d3cc:	1c44      	adds	r4, r0, #1
 800d3ce:	2102      	movs	r1, #2
 800d3d0:	4620      	mov	r0, r4
 800d3d2:	f004 fbab 	bl	8011b2c <ucdr_alignment>
 800d3d6:	300c      	adds	r0, #12
 800d3d8:	4420      	add	r0, r4
 800d3da:	bd10      	pop	{r4, pc}
 800d3dc:	4770      	bx	lr
 800d3de:	bf00      	nop

0800d3e0 <_DirectAccess__max_serialized_size>:
 800d3e0:	b510      	push	{r4, lr}
 800d3e2:	2101      	movs	r1, #1
 800d3e4:	2000      	movs	r0, #0
 800d3e6:	f004 fba1 	bl	8011b2c <ucdr_alignment>
 800d3ea:	1c44      	adds	r4, r0, #1
 800d3ec:	2102      	movs	r1, #2
 800d3ee:	4620      	mov	r0, r4
 800d3f0:	f004 fb9c 	bl	8011b2c <ucdr_alignment>
 800d3f4:	300c      	adds	r0, #12
 800d3f6:	4420      	add	r0, r4
 800d3f8:	bd10      	pop	{r4, pc}
 800d3fa:	bf00      	nop

0800d3fc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__msg__DirectAccess>:
 800d3fc:	4800      	ldr	r0, [pc, #0]	; (800d400 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__msg__DirectAccess+0x4>)
 800d3fe:	4770      	bx	lr
 800d400:	200009d8 	.word	0x200009d8

0800d404 <_Encoder__max_serialized_size>:
 800d404:	2102      	movs	r1, #2
 800d406:	2000      	movs	r0, #0
 800d408:	b508      	push	{r3, lr}
 800d40a:	f004 fb8f 	bl	8011b2c <ucdr_alignment>
 800d40e:	300a      	adds	r0, #10
 800d410:	bd08      	pop	{r3, pc}
 800d412:	bf00      	nop

0800d414 <get_serialized_size_racs_services__msg__Encoder>:
 800d414:	b138      	cbz	r0, 800d426 <get_serialized_size_racs_services__msg__Encoder+0x12>
 800d416:	b508      	push	{r3, lr}
 800d418:	460b      	mov	r3, r1
 800d41a:	2102      	movs	r1, #2
 800d41c:	4618      	mov	r0, r3
 800d41e:	f004 fb85 	bl	8011b2c <ucdr_alignment>
 800d422:	300a      	adds	r0, #10
 800d424:	bd08      	pop	{r3, pc}
 800d426:	4770      	bx	lr

0800d428 <_Encoder__cdr_deserialize>:
 800d428:	b111      	cbz	r1, 800d430 <_Encoder__cdr_deserialize+0x8>
 800d42a:	2205      	movs	r2, #5
 800d42c:	f002 bdc0 	b.w	800ffb0 <ucdr_deserialize_array_int16_t>
 800d430:	4608      	mov	r0, r1
 800d432:	4770      	bx	lr

0800d434 <_Encoder__cdr_serialize>:
 800d434:	468c      	mov	ip, r1
 800d436:	b120      	cbz	r0, 800d442 <_Encoder__cdr_serialize+0xe>
 800d438:	4601      	mov	r1, r0
 800d43a:	2205      	movs	r2, #5
 800d43c:	4660      	mov	r0, ip
 800d43e:	f002 bd61 	b.w	800ff04 <ucdr_serialize_array_int16_t>
 800d442:	4770      	bx	lr

0800d444 <_Encoder__get_serialized_size>:
 800d444:	b130      	cbz	r0, 800d454 <_Encoder__get_serialized_size+0x10>
 800d446:	2102      	movs	r1, #2
 800d448:	2000      	movs	r0, #0
 800d44a:	b508      	push	{r3, lr}
 800d44c:	f004 fb6e 	bl	8011b2c <ucdr_alignment>
 800d450:	300a      	adds	r0, #10
 800d452:	bd08      	pop	{r3, pc}
 800d454:	4770      	bx	lr
 800d456:	bf00      	nop

0800d458 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__msg__Encoder>:
 800d458:	4800      	ldr	r0, [pc, #0]	; (800d45c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__msg__Encoder+0x4>)
 800d45a:	4770      	bx	lr
 800d45c:	20000a0c 	.word	0x20000a0c

0800d460 <get_serialized_size_racs_services__msg__Feedback>:
 800d460:	b180      	cbz	r0, 800d484 <get_serialized_size_racs_services__msg__Feedback+0x24>
 800d462:	b538      	push	{r3, r4, r5, lr}
 800d464:	460d      	mov	r5, r1
 800d466:	2101      	movs	r1, #1
 800d468:	4628      	mov	r0, r5
 800d46a:	f004 fb5f 	bl	8011b2c <ucdr_alignment>
 800d46e:	1c6b      	adds	r3, r5, #1
 800d470:	f1c5 050c 	rsb	r5, r5, #12
 800d474:	2102      	movs	r1, #2
 800d476:	181c      	adds	r4, r3, r0
 800d478:	4620      	mov	r0, r4
 800d47a:	f004 fb57 	bl	8011b2c <ucdr_alignment>
 800d47e:	4428      	add	r0, r5
 800d480:	4420      	add	r0, r4
 800d482:	bd38      	pop	{r3, r4, r5, pc}
 800d484:	4770      	bx	lr
 800d486:	bf00      	nop

0800d488 <_Feedback__cdr_deserialize>:
 800d488:	b538      	push	{r3, r4, r5, lr}
 800d48a:	460c      	mov	r4, r1
 800d48c:	b149      	cbz	r1, 800d4a2 <_Feedback__cdr_deserialize+0x1a>
 800d48e:	4605      	mov	r5, r0
 800d490:	f002 fece 	bl	8010230 <ucdr_deserialize_uint8_t>
 800d494:	1ca1      	adds	r1, r4, #2
 800d496:	2206      	movs	r2, #6
 800d498:	4628      	mov	r0, r5
 800d49a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d49e:	f002 bd87 	b.w	800ffb0 <ucdr_deserialize_array_int16_t>
 800d4a2:	4608      	mov	r0, r1
 800d4a4:	bd38      	pop	{r3, r4, r5, pc}
 800d4a6:	bf00      	nop

0800d4a8 <_Feedback__cdr_serialize>:
 800d4a8:	b170      	cbz	r0, 800d4c8 <_Feedback__cdr_serialize+0x20>
 800d4aa:	b538      	push	{r3, r4, r5, lr}
 800d4ac:	4604      	mov	r4, r0
 800d4ae:	460d      	mov	r5, r1
 800d4b0:	4608      	mov	r0, r1
 800d4b2:	f814 1b02 	ldrb.w	r1, [r4], #2
 800d4b6:	f002 fea5 	bl	8010204 <ucdr_serialize_uint8_t>
 800d4ba:	4628      	mov	r0, r5
 800d4bc:	4621      	mov	r1, r4
 800d4be:	2206      	movs	r2, #6
 800d4c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d4c4:	f002 bd1e 	b.w	800ff04 <ucdr_serialize_array_int16_t>
 800d4c8:	4770      	bx	lr
 800d4ca:	bf00      	nop

0800d4cc <_Feedback__get_serialized_size>:
 800d4cc:	b160      	cbz	r0, 800d4e8 <_Feedback__get_serialized_size+0x1c>
 800d4ce:	2101      	movs	r1, #1
 800d4d0:	2000      	movs	r0, #0
 800d4d2:	b510      	push	{r4, lr}
 800d4d4:	f004 fb2a 	bl	8011b2c <ucdr_alignment>
 800d4d8:	1c44      	adds	r4, r0, #1
 800d4da:	2102      	movs	r1, #2
 800d4dc:	4620      	mov	r0, r4
 800d4de:	f004 fb25 	bl	8011b2c <ucdr_alignment>
 800d4e2:	300c      	adds	r0, #12
 800d4e4:	4420      	add	r0, r4
 800d4e6:	bd10      	pop	{r4, pc}
 800d4e8:	4770      	bx	lr
 800d4ea:	bf00      	nop

0800d4ec <_Feedback__max_serialized_size>:
 800d4ec:	b510      	push	{r4, lr}
 800d4ee:	2101      	movs	r1, #1
 800d4f0:	2000      	movs	r0, #0
 800d4f2:	f004 fb1b 	bl	8011b2c <ucdr_alignment>
 800d4f6:	1c44      	adds	r4, r0, #1
 800d4f8:	2102      	movs	r1, #2
 800d4fa:	4620      	mov	r0, r4
 800d4fc:	f004 fb16 	bl	8011b2c <ucdr_alignment>
 800d500:	300c      	adds	r0, #12
 800d502:	4420      	add	r0, r4
 800d504:	bd10      	pop	{r4, pc}
 800d506:	bf00      	nop

0800d508 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__msg__Feedback>:
 800d508:	4800      	ldr	r0, [pc, #0]	; (800d50c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__msg__Feedback+0x4>)
 800d50a:	4770      	bx	lr
 800d50c:	20000a40 	.word	0x20000a40

0800d510 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Setup_Request>:
 800d510:	4800      	ldr	r0, [pc, #0]	; (800d514 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x4>)
 800d512:	4770      	bx	lr
 800d514:	20000ac8 	.word	0x20000ac8

0800d518 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Setup_Response>:
 800d518:	4800      	ldr	r0, [pc, #0]	; (800d51c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Setup_Response+0x4>)
 800d51a:	4770      	bx	lr
 800d51c:	20000ae0 	.word	0x20000ae0

0800d520 <_Setup_Response__max_serialized_size>:
 800d520:	2101      	movs	r1, #1
 800d522:	2000      	movs	r0, #0
 800d524:	b508      	push	{r3, lr}
 800d526:	f004 fb01 	bl	8011b2c <ucdr_alignment>
 800d52a:	3001      	adds	r0, #1
 800d52c:	bd08      	pop	{r3, pc}
 800d52e:	bf00      	nop

0800d530 <_Setup_Response__cdr_deserialize>:
 800d530:	b109      	cbz	r1, 800d536 <_Setup_Response__cdr_deserialize+0x6>
 800d532:	f002 be7d 	b.w	8010230 <ucdr_deserialize_uint8_t>
 800d536:	4608      	mov	r0, r1
 800d538:	4770      	bx	lr
 800d53a:	bf00      	nop

0800d53c <_Setup_Event__max_serialized_size>:
 800d53c:	b500      	push	{lr}
 800d53e:	b083      	sub	sp, #12
 800d540:	2301      	movs	r3, #1
 800d542:	2100      	movs	r1, #0
 800d544:	f10d 0007 	add.w	r0, sp, #7
 800d548:	f88d 3007 	strb.w	r3, [sp, #7]
 800d54c:	f002 fb04 	bl	800fb58 <max_serialized_size_service_msgs__msg__ServiceEventInfo>
 800d550:	b003      	add	sp, #12
 800d552:	f85d fb04 	ldr.w	pc, [sp], #4
 800d556:	bf00      	nop

0800d558 <get_serialized_size_racs_services__srv__Setup_Request.part.0>:
 800d558:	b570      	push	{r4, r5, r6, lr}
 800d55a:	4604      	mov	r4, r0
 800d55c:	2101      	movs	r1, #1
 800d55e:	f004 fae5 	bl	8011b2c <ucdr_alignment>
 800d562:	2104      	movs	r1, #4
 800d564:	1c65      	adds	r5, r4, #1
 800d566:	f1c4 0404 	rsb	r4, r4, #4
 800d56a:	4405      	add	r5, r0
 800d56c:	4628      	mov	r0, r5
 800d56e:	f004 fadd 	bl	8011b2c <ucdr_alignment>
 800d572:	2104      	movs	r1, #4
 800d574:	1846      	adds	r6, r0, r1
 800d576:	442e      	add	r6, r5
 800d578:	4630      	mov	r0, r6
 800d57a:	f004 fad7 	bl	8011b2c <ucdr_alignment>
 800d57e:	2104      	movs	r1, #4
 800d580:	1845      	adds	r5, r0, r1
 800d582:	442e      	add	r6, r5
 800d584:	4630      	mov	r0, r6
 800d586:	f004 fad1 	bl	8011b2c <ucdr_alignment>
 800d58a:	2104      	movs	r1, #4
 800d58c:	4408      	add	r0, r1
 800d58e:	4406      	add	r6, r0
 800d590:	4630      	mov	r0, r6
 800d592:	f004 facb 	bl	8011b2c <ucdr_alignment>
 800d596:	2104      	movs	r1, #4
 800d598:	1845      	adds	r5, r0, r1
 800d59a:	4435      	add	r5, r6
 800d59c:	4628      	mov	r0, r5
 800d59e:	f004 fac5 	bl	8011b2c <ucdr_alignment>
 800d5a2:	2104      	movs	r1, #4
 800d5a4:	4408      	add	r0, r1
 800d5a6:	4405      	add	r5, r0
 800d5a8:	4628      	mov	r0, r5
 800d5aa:	f004 fabf 	bl	8011b2c <ucdr_alignment>
 800d5ae:	4420      	add	r0, r4
 800d5b0:	4428      	add	r0, r5
 800d5b2:	bd70      	pop	{r4, r5, r6, pc}

0800d5b4 <get_serialized_size_racs_services__srv__Setup_Request>:
 800d5b4:	b110      	cbz	r0, 800d5bc <get_serialized_size_racs_services__srv__Setup_Request+0x8>
 800d5b6:	4608      	mov	r0, r1
 800d5b8:	f7ff bfce 	b.w	800d558 <get_serialized_size_racs_services__srv__Setup_Request.part.0>
 800d5bc:	4770      	bx	lr
 800d5be:	bf00      	nop

0800d5c0 <_Setup_Request__get_serialized_size>:
 800d5c0:	b110      	cbz	r0, 800d5c8 <_Setup_Request__get_serialized_size+0x8>
 800d5c2:	2000      	movs	r0, #0
 800d5c4:	f7ff bfc8 	b.w	800d558 <get_serialized_size_racs_services__srv__Setup_Request.part.0>
 800d5c8:	4770      	bx	lr
 800d5ca:	bf00      	nop

0800d5cc <get_serialized_size_racs_services__srv__Setup_Response>:
 800d5cc:	b138      	cbz	r0, 800d5de <get_serialized_size_racs_services__srv__Setup_Response+0x12>
 800d5ce:	b508      	push	{r3, lr}
 800d5d0:	460b      	mov	r3, r1
 800d5d2:	2101      	movs	r1, #1
 800d5d4:	4618      	mov	r0, r3
 800d5d6:	f004 faa9 	bl	8011b2c <ucdr_alignment>
 800d5da:	3001      	adds	r0, #1
 800d5dc:	bd08      	pop	{r3, pc}
 800d5de:	4770      	bx	lr

0800d5e0 <_Setup_Request__cdr_deserialize>:
 800d5e0:	b538      	push	{r3, r4, r5, lr}
 800d5e2:	460c      	mov	r4, r1
 800d5e4:	b309      	cbz	r1, 800d62a <_Setup_Request__cdr_deserialize+0x4a>
 800d5e6:	4605      	mov	r5, r0
 800d5e8:	f002 fe22 	bl	8010230 <ucdr_deserialize_uint8_t>
 800d5ec:	1d21      	adds	r1, r4, #4
 800d5ee:	4628      	mov	r0, r5
 800d5f0:	f004 f91e 	bl	8011830 <ucdr_deserialize_float>
 800d5f4:	f104 0108 	add.w	r1, r4, #8
 800d5f8:	4628      	mov	r0, r5
 800d5fa:	f004 f919 	bl	8011830 <ucdr_deserialize_float>
 800d5fe:	f104 010c 	add.w	r1, r4, #12
 800d602:	4628      	mov	r0, r5
 800d604:	f004 f914 	bl	8011830 <ucdr_deserialize_float>
 800d608:	f104 0110 	add.w	r1, r4, #16
 800d60c:	4628      	mov	r0, r5
 800d60e:	f004 f90f 	bl	8011830 <ucdr_deserialize_float>
 800d612:	f104 0114 	add.w	r1, r4, #20
 800d616:	4628      	mov	r0, r5
 800d618:	f004 f90a 	bl	8011830 <ucdr_deserialize_float>
 800d61c:	f104 0118 	add.w	r1, r4, #24
 800d620:	4628      	mov	r0, r5
 800d622:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d626:	f004 b903 	b.w	8011830 <ucdr_deserialize_float>
 800d62a:	4608      	mov	r0, r1
 800d62c:	bd38      	pop	{r3, r4, r5, pc}
 800d62e:	bf00      	nop

0800d630 <_Setup_Response__cdr_serialize>:
 800d630:	460a      	mov	r2, r1
 800d632:	b118      	cbz	r0, 800d63c <_Setup_Response__cdr_serialize+0xc>
 800d634:	7801      	ldrb	r1, [r0, #0]
 800d636:	4610      	mov	r0, r2
 800d638:	f002 bde4 	b.w	8010204 <ucdr_serialize_uint8_t>
 800d63c:	4770      	bx	lr
 800d63e:	bf00      	nop

0800d640 <_Setup_Request__cdr_serialize>:
 800d640:	b330      	cbz	r0, 800d690 <_Setup_Request__cdr_serialize+0x50>
 800d642:	b538      	push	{r3, r4, r5, lr}
 800d644:	460d      	mov	r5, r1
 800d646:	4604      	mov	r4, r0
 800d648:	7801      	ldrb	r1, [r0, #0]
 800d64a:	4628      	mov	r0, r5
 800d64c:	f002 fdda 	bl	8010204 <ucdr_serialize_uint8_t>
 800d650:	ed94 0a01 	vldr	s0, [r4, #4]
 800d654:	4628      	mov	r0, r5
 800d656:	f003 ffb9 	bl	80115cc <ucdr_serialize_float>
 800d65a:	ed94 0a02 	vldr	s0, [r4, #8]
 800d65e:	4628      	mov	r0, r5
 800d660:	f003 ffb4 	bl	80115cc <ucdr_serialize_float>
 800d664:	ed94 0a03 	vldr	s0, [r4, #12]
 800d668:	4628      	mov	r0, r5
 800d66a:	f003 ffaf 	bl	80115cc <ucdr_serialize_float>
 800d66e:	ed94 0a04 	vldr	s0, [r4, #16]
 800d672:	4628      	mov	r0, r5
 800d674:	f003 ffaa 	bl	80115cc <ucdr_serialize_float>
 800d678:	ed94 0a05 	vldr	s0, [r4, #20]
 800d67c:	4628      	mov	r0, r5
 800d67e:	f003 ffa5 	bl	80115cc <ucdr_serialize_float>
 800d682:	ed94 0a06 	vldr	s0, [r4, #24]
 800d686:	4628      	mov	r0, r5
 800d688:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d68c:	f003 bf9e 	b.w	80115cc <ucdr_serialize_float>
 800d690:	4770      	bx	lr
 800d692:	bf00      	nop

0800d694 <get_serialized_size_racs_services__srv__Setup_Event.part.0>:
 800d694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d698:	460e      	mov	r6, r1
 800d69a:	4605      	mov	r5, r0
 800d69c:	f002 f9c2 	bl	800fa24 <get_serialized_size_service_msgs__msg__ServiceEventInfo>
 800d6a0:	2104      	movs	r1, #4
 800d6a2:	eb06 0800 	add.w	r8, r6, r0
 800d6a6:	f8d5 902c 	ldr.w	r9, [r5, #44]	; 0x2c
 800d6aa:	4640      	mov	r0, r8
 800d6ac:	f004 fa3e 	bl	8011b2c <ucdr_alignment>
 800d6b0:	3004      	adds	r0, #4
 800d6b2:	4480      	add	r8, r0
 800d6b4:	f1b9 0f00 	cmp.w	r9, #0
 800d6b8:	d019      	beq.n	800d6ee <get_serialized_size_racs_services__srv__Setup_Event.part.0+0x5a>
 800d6ba:	2700      	movs	r7, #0
 800d6bc:	f8df a07c 	ldr.w	sl, [pc, #124]	; 800d73c <get_serialized_size_racs_services__srv__Setup_Event.part.0+0xa8>
 800d6c0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800d6c2:	ebc7 00c7 	rsb	r0, r7, r7, lsl #3
 800d6c6:	f8da 3004 	ldr.w	r3, [sl, #4]
 800d6ca:	4641      	mov	r1, r8
 800d6cc:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800d6d0:	3701      	adds	r7, #1
 800d6d2:	695b      	ldr	r3, [r3, #20]
 800d6d4:	4798      	blx	r3
 800d6d6:	4604      	mov	r4, r0
 800d6d8:	4640      	mov	r0, r8
 800d6da:	2c04      	cmp	r4, #4
 800d6dc:	4621      	mov	r1, r4
 800d6de:	bf28      	it	cs
 800d6e0:	2104      	movcs	r1, #4
 800d6e2:	f004 fa23 	bl	8011b2c <ucdr_alignment>
 800d6e6:	45b9      	cmp	r9, r7
 800d6e8:	4420      	add	r0, r4
 800d6ea:	4480      	add	r8, r0
 800d6ec:	d1e8      	bne.n	800d6c0 <get_serialized_size_racs_services__srv__Setup_Event.part.0+0x2c>
 800d6ee:	4640      	mov	r0, r8
 800d6f0:	2104      	movs	r1, #4
 800d6f2:	6baf      	ldr	r7, [r5, #56]	; 0x38
 800d6f4:	f004 fa1a 	bl	8011b2c <ucdr_alignment>
 800d6f8:	4480      	add	r8, r0
 800d6fa:	f108 0804 	add.w	r8, r8, #4
 800d6fe:	b1c7      	cbz	r7, 800d732 <get_serialized_size_racs_services__srv__Setup_Event.part.0+0x9e>
 800d700:	f04f 0900 	mov.w	r9, #0
 800d704:	f8df a038 	ldr.w	sl, [pc, #56]	; 800d740 <get_serialized_size_racs_services__srv__Setup_Event.part.0+0xac>
 800d708:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800d70a:	4641      	mov	r1, r8
 800d70c:	f8da 3004 	ldr.w	r3, [sl, #4]
 800d710:	4448      	add	r0, r9
 800d712:	f109 0901 	add.w	r9, r9, #1
 800d716:	695b      	ldr	r3, [r3, #20]
 800d718:	4798      	blx	r3
 800d71a:	4604      	mov	r4, r0
 800d71c:	4640      	mov	r0, r8
 800d71e:	2c04      	cmp	r4, #4
 800d720:	4621      	mov	r1, r4
 800d722:	bf28      	it	cs
 800d724:	2104      	movcs	r1, #4
 800d726:	f004 fa01 	bl	8011b2c <ucdr_alignment>
 800d72a:	454f      	cmp	r7, r9
 800d72c:	4420      	add	r0, r4
 800d72e:	4480      	add	r8, r0
 800d730:	d1ea      	bne.n	800d708 <get_serialized_size_racs_services__srv__Setup_Event.part.0+0x74>
 800d732:	eba8 0006 	sub.w	r0, r8, r6
 800d736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d73a:	bf00      	nop
 800d73c:	20000ac8 	.word	0x20000ac8
 800d740:	20000ae0 	.word	0x20000ae0

0800d744 <get_serialized_size_racs_services__srv__Setup_Event>:
 800d744:	b108      	cbz	r0, 800d74a <get_serialized_size_racs_services__srv__Setup_Event+0x6>
 800d746:	f7ff bfa5 	b.w	800d694 <get_serialized_size_racs_services__srv__Setup_Event.part.0>
 800d74a:	4770      	bx	lr

0800d74c <_Setup_Event__get_serialized_size>:
 800d74c:	b110      	cbz	r0, 800d754 <_Setup_Event__get_serialized_size+0x8>
 800d74e:	2100      	movs	r1, #0
 800d750:	f7ff bfa0 	b.w	800d694 <get_serialized_size_racs_services__srv__Setup_Event.part.0>
 800d754:	4770      	bx	lr
 800d756:	bf00      	nop

0800d758 <_Setup_Event__cdr_deserialize>:
 800d758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d75c:	460c      	mov	r4, r1
 800d75e:	b082      	sub	sp, #8
 800d760:	2900      	cmp	r1, #0
 800d762:	d045      	beq.n	800d7f0 <_Setup_Event__cdr_deserialize+0x98>
 800d764:	4607      	mov	r7, r0
 800d766:	f002 fa1d 	bl	800fba4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800d76a:	4603      	mov	r3, r0
 800d76c:	4621      	mov	r1, r4
 800d76e:	4638      	mov	r0, r7
 800d770:	685b      	ldr	r3, [r3, #4]
 800d772:	68db      	ldr	r3, [r3, #12]
 800d774:	4798      	blx	r3
 800d776:	4638      	mov	r0, r7
 800d778:	a901      	add	r1, sp, #4
 800d77a:	f003 f889 	bl	8010890 <ucdr_deserialize_uint32_t>
 800d77e:	9b01      	ldr	r3, [sp, #4]
 800d780:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800d782:	429a      	cmp	r2, r3
 800d784:	d330      	bcc.n	800d7e8 <_Setup_Event__cdr_deserialize+0x90>
 800d786:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d788:	b193      	cbz	r3, 800d7b0 <_Setup_Event__cdr_deserialize+0x58>
 800d78a:	2500      	movs	r5, #0
 800d78c:	f8df 806c 	ldr.w	r8, [pc, #108]	; 800d7fc <_Setup_Event__cdr_deserialize+0xa4>
 800d790:	462e      	mov	r6, r5
 800d792:	e002      	b.n	800d79a <_Setup_Event__cdr_deserialize+0x42>
 800d794:	9b01      	ldr	r3, [sp, #4]
 800d796:	429e      	cmp	r6, r3
 800d798:	d20a      	bcs.n	800d7b0 <_Setup_Event__cdr_deserialize+0x58>
 800d79a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800d79c:	4638      	mov	r0, r7
 800d79e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d7a2:	3601      	adds	r6, #1
 800d7a4:	4429      	add	r1, r5
 800d7a6:	351c      	adds	r5, #28
 800d7a8:	68db      	ldr	r3, [r3, #12]
 800d7aa:	4798      	blx	r3
 800d7ac:	2800      	cmp	r0, #0
 800d7ae:	d1f1      	bne.n	800d794 <_Setup_Event__cdr_deserialize+0x3c>
 800d7b0:	a901      	add	r1, sp, #4
 800d7b2:	4638      	mov	r0, r7
 800d7b4:	f003 f86c 	bl	8010890 <ucdr_deserialize_uint32_t>
 800d7b8:	9b01      	ldr	r3, [sp, #4]
 800d7ba:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800d7bc:	429a      	cmp	r2, r3
 800d7be:	d313      	bcc.n	800d7e8 <_Setup_Event__cdr_deserialize+0x90>
 800d7c0:	63a3      	str	r3, [r4, #56]	; 0x38
 800d7c2:	b193      	cbz	r3, 800d7ea <_Setup_Event__cdr_deserialize+0x92>
 800d7c4:	2500      	movs	r5, #0
 800d7c6:	4e0c      	ldr	r6, [pc, #48]	; (800d7f8 <_Setup_Event__cdr_deserialize+0xa0>)
 800d7c8:	e002      	b.n	800d7d0 <_Setup_Event__cdr_deserialize+0x78>
 800d7ca:	9b01      	ldr	r3, [sp, #4]
 800d7cc:	429d      	cmp	r5, r3
 800d7ce:	d20c      	bcs.n	800d7ea <_Setup_Event__cdr_deserialize+0x92>
 800d7d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d7d2:	4638      	mov	r0, r7
 800d7d4:	6873      	ldr	r3, [r6, #4]
 800d7d6:	4429      	add	r1, r5
 800d7d8:	3501      	adds	r5, #1
 800d7da:	68db      	ldr	r3, [r3, #12]
 800d7dc:	4798      	blx	r3
 800d7de:	2800      	cmp	r0, #0
 800d7e0:	d1f3      	bne.n	800d7ca <_Setup_Event__cdr_deserialize+0x72>
 800d7e2:	b002      	add	sp, #8
 800d7e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7e8:	2000      	movs	r0, #0
 800d7ea:	b002      	add	sp, #8
 800d7ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7f0:	4608      	mov	r0, r1
 800d7f2:	b002      	add	sp, #8
 800d7f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7f8:	20000ae0 	.word	0x20000ae0
 800d7fc:	20000ac8 	.word	0x20000ac8

0800d800 <_Setup_Event__cdr_serialize>:
 800d800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d804:	2800      	cmp	r0, #0
 800d806:	d03b      	beq.n	800d880 <_Setup_Event__cdr_serialize+0x80>
 800d808:	4605      	mov	r5, r0
 800d80a:	460e      	mov	r6, r1
 800d80c:	f002 f9ca 	bl	800fba4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800d810:	4603      	mov	r3, r0
 800d812:	4631      	mov	r1, r6
 800d814:	4628      	mov	r0, r5
 800d816:	685b      	ldr	r3, [r3, #4]
 800d818:	689b      	ldr	r3, [r3, #8]
 800d81a:	4798      	blx	r3
 800d81c:	6aef      	ldr	r7, [r5, #44]	; 0x2c
 800d81e:	4630      	mov	r0, r6
 800d820:	4639      	mov	r1, r7
 800d822:	f002 ff05 	bl	8010630 <ucdr_serialize_uint32_t>
 800d826:	b198      	cbz	r0, 800d850 <_Setup_Event__cdr_serialize+0x50>
 800d828:	b197      	cbz	r7, 800d850 <_Setup_Event__cdr_serialize+0x50>
 800d82a:	2400      	movs	r4, #0
 800d82c:	f8df 805c 	ldr.w	r8, [pc, #92]	; 800d88c <_Setup_Event__cdr_serialize+0x8c>
 800d830:	e001      	b.n	800d836 <_Setup_Event__cdr_serialize+0x36>
 800d832:	42a7      	cmp	r7, r4
 800d834:	d00c      	beq.n	800d850 <_Setup_Event__cdr_serialize+0x50>
 800d836:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
 800d83a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800d83c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d840:	4631      	mov	r1, r6
 800d842:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800d846:	3401      	adds	r4, #1
 800d848:	689b      	ldr	r3, [r3, #8]
 800d84a:	4798      	blx	r3
 800d84c:	2800      	cmp	r0, #0
 800d84e:	d1f0      	bne.n	800d832 <_Setup_Event__cdr_serialize+0x32>
 800d850:	6baf      	ldr	r7, [r5, #56]	; 0x38
 800d852:	4630      	mov	r0, r6
 800d854:	4639      	mov	r1, r7
 800d856:	f002 feeb 	bl	8010630 <ucdr_serialize_uint32_t>
 800d85a:	4680      	mov	r8, r0
 800d85c:	b180      	cbz	r0, 800d880 <_Setup_Event__cdr_serialize+0x80>
 800d85e:	b18f      	cbz	r7, 800d884 <_Setup_Event__cdr_serialize+0x84>
 800d860:	2400      	movs	r4, #0
 800d862:	f8df 902c 	ldr.w	r9, [pc, #44]	; 800d890 <_Setup_Event__cdr_serialize+0x90>
 800d866:	e001      	b.n	800d86c <_Setup_Event__cdr_serialize+0x6c>
 800d868:	42a7      	cmp	r7, r4
 800d86a:	d00b      	beq.n	800d884 <_Setup_Event__cdr_serialize+0x84>
 800d86c:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800d86e:	4631      	mov	r1, r6
 800d870:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800d874:	4420      	add	r0, r4
 800d876:	3401      	adds	r4, #1
 800d878:	689b      	ldr	r3, [r3, #8]
 800d87a:	4798      	blx	r3
 800d87c:	2800      	cmp	r0, #0
 800d87e:	d1f3      	bne.n	800d868 <_Setup_Event__cdr_serialize+0x68>
 800d880:	f04f 0800 	mov.w	r8, #0
 800d884:	4640      	mov	r0, r8
 800d886:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d88a:	bf00      	nop
 800d88c:	20000ac8 	.word	0x20000ac8
 800d890:	20000ae0 	.word	0x20000ae0

0800d894 <_Setup_Response__get_serialized_size>:
 800d894:	b130      	cbz	r0, 800d8a4 <_Setup_Response__get_serialized_size+0x10>
 800d896:	2101      	movs	r1, #1
 800d898:	2000      	movs	r0, #0
 800d89a:	b508      	push	{r3, lr}
 800d89c:	f004 f946 	bl	8011b2c <ucdr_alignment>
 800d8a0:	3001      	adds	r0, #1
 800d8a2:	bd08      	pop	{r3, pc}
 800d8a4:	4770      	bx	lr
 800d8a6:	bf00      	nop

0800d8a8 <max_serialized_size_racs_services__srv__Setup_Request>:
 800d8a8:	b570      	push	{r4, r5, r6, lr}
 800d8aa:	460c      	mov	r4, r1
 800d8ac:	2301      	movs	r3, #1
 800d8ae:	1c65      	adds	r5, r4, #1
 800d8b0:	4619      	mov	r1, r3
 800d8b2:	7003      	strb	r3, [r0, #0]
 800d8b4:	4620      	mov	r0, r4
 800d8b6:	f004 f939 	bl	8011b2c <ucdr_alignment>
 800d8ba:	4405      	add	r5, r0
 800d8bc:	2104      	movs	r1, #4
 800d8be:	f1c4 0404 	rsb	r4, r4, #4
 800d8c2:	4628      	mov	r0, r5
 800d8c4:	f004 f932 	bl	8011b2c <ucdr_alignment>
 800d8c8:	2104      	movs	r1, #4
 800d8ca:	1846      	adds	r6, r0, r1
 800d8cc:	442e      	add	r6, r5
 800d8ce:	4630      	mov	r0, r6
 800d8d0:	f004 f92c 	bl	8011b2c <ucdr_alignment>
 800d8d4:	2104      	movs	r1, #4
 800d8d6:	1845      	adds	r5, r0, r1
 800d8d8:	442e      	add	r6, r5
 800d8da:	4630      	mov	r0, r6
 800d8dc:	f004 f926 	bl	8011b2c <ucdr_alignment>
 800d8e0:	2104      	movs	r1, #4
 800d8e2:	4408      	add	r0, r1
 800d8e4:	4406      	add	r6, r0
 800d8e6:	4630      	mov	r0, r6
 800d8e8:	f004 f920 	bl	8011b2c <ucdr_alignment>
 800d8ec:	2104      	movs	r1, #4
 800d8ee:	1845      	adds	r5, r0, r1
 800d8f0:	4435      	add	r5, r6
 800d8f2:	4628      	mov	r0, r5
 800d8f4:	f004 f91a 	bl	8011b2c <ucdr_alignment>
 800d8f8:	2104      	movs	r1, #4
 800d8fa:	4408      	add	r0, r1
 800d8fc:	4405      	add	r5, r0
 800d8fe:	4628      	mov	r0, r5
 800d900:	f004 f914 	bl	8011b2c <ucdr_alignment>
 800d904:	4420      	add	r0, r4
 800d906:	4428      	add	r0, r5
 800d908:	bd70      	pop	{r4, r5, r6, pc}
 800d90a:	bf00      	nop

0800d90c <_Setup_Request__max_serialized_size>:
 800d90c:	b500      	push	{lr}
 800d90e:	b083      	sub	sp, #12
 800d910:	2100      	movs	r1, #0
 800d912:	f10d 0007 	add.w	r0, sp, #7
 800d916:	f7ff ffc7 	bl	800d8a8 <max_serialized_size_racs_services__srv__Setup_Request>
 800d91a:	b003      	add	sp, #12
 800d91c:	f85d fb04 	ldr.w	pc, [sp], #4

0800d920 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Setup_Event>:
 800d920:	4800      	ldr	r0, [pc, #0]	; (800d924 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x4>)
 800d922:	4770      	bx	lr
 800d924:	20000ab0 	.word	0x20000ab0

0800d928 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__racs_services__srv__Setup>:
 800d928:	4800      	ldr	r0, [pc, #0]	; (800d92c <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__racs_services__srv__Setup+0x4>)
 800d92a:	4770      	bx	lr
 800d92c:	20000a84 	.word	0x20000a84

0800d930 <rcl_get_zero_initialized_publisher>:
 800d930:	4b01      	ldr	r3, [pc, #4]	; (800d938 <rcl_get_zero_initialized_publisher+0x8>)
 800d932:	6818      	ldr	r0, [r3, #0]
 800d934:	4770      	bx	lr
 800d936:	bf00      	nop
 800d938:	0801fa00 	.word	0x0801fa00

0800d93c <rcl_publisher_init>:
 800d93c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d940:	b088      	sub	sp, #32
 800d942:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800d944:	2e00      	cmp	r6, #0
 800d946:	d06c      	beq.n	800da22 <rcl_publisher_init+0xe6>
 800d948:	f106 0a50 	add.w	sl, r6, #80	; 0x50
 800d94c:	4605      	mov	r5, r0
 800d94e:	460f      	mov	r7, r1
 800d950:	4690      	mov	r8, r2
 800d952:	4650      	mov	r0, sl
 800d954:	4699      	mov	r9, r3
 800d956:	f001 f96b 	bl	800ec30 <rcutils_allocator_is_valid>
 800d95a:	f080 0401 	eor.w	r4, r0, #1
 800d95e:	b2e4      	uxtb	r4, r4
 800d960:	2c00      	cmp	r4, #0
 800d962:	d15e      	bne.n	800da22 <rcl_publisher_init+0xe6>
 800d964:	2d00      	cmp	r5, #0
 800d966:	d05c      	beq.n	800da22 <rcl_publisher_init+0xe6>
 800d968:	682b      	ldr	r3, [r5, #0]
 800d96a:	b123      	cbz	r3, 800d976 <rcl_publisher_init+0x3a>
 800d96c:	2464      	movs	r4, #100	; 0x64
 800d96e:	4620      	mov	r0, r4
 800d970:	b008      	add	sp, #32
 800d972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d976:	4638      	mov	r0, r7
 800d978:	f008 fc32 	bl	80161e0 <rcl_node_is_valid>
 800d97c:	2800      	cmp	r0, #0
 800d97e:	d055      	beq.n	800da2c <rcl_publisher_init+0xf0>
 800d980:	f1b8 0f00 	cmp.w	r8, #0
 800d984:	d04d      	beq.n	800da22 <rcl_publisher_init+0xe6>
 800d986:	fab9 f389 	clz	r3, r9
 800d98a:	095b      	lsrs	r3, r3, #5
 800d98c:	f1b9 0f00 	cmp.w	r9, #0
 800d990:	d047      	beq.n	800da22 <rcl_publisher_init+0xe6>
 800d992:	aa07      	add	r2, sp, #28
 800d994:	9307      	str	r3, [sp, #28]
 800d996:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800d99a:	f106 0358 	add.w	r3, r6, #88	; 0x58
 800d99e:	9205      	str	r2, [sp, #20]
 800d9a0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d9a4:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800d9a8:	4649      	mov	r1, r9
 800d9aa:	4638      	mov	r0, r7
 800d9ac:	e89a 000c 	ldmia.w	sl, {r2, r3}
 800d9b0:	f008 fc8e 	bl	80162d0 <rcl_node_resolve_name>
 800d9b4:	2800      	cmp	r0, #0
 800d9b6:	d150      	bne.n	800da5a <rcl_publisher_init+0x11e>
 800d9b8:	21c8      	movs	r1, #200	; 0xc8
 800d9ba:	2001      	movs	r0, #1
 800d9bc:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	; 0x5c
 800d9c0:	4798      	blx	r3
 800d9c2:	6028      	str	r0, [r5, #0]
 800d9c4:	2800      	cmp	r0, #0
 800d9c6:	d050      	beq.n	800da6a <rcl_publisher_init+0x12e>
 800d9c8:	4638      	mov	r0, r7
 800d9ca:	f008 fc2b 	bl	8016224 <rcl_node_get_rmw_handle>
 800d9ce:	f106 0364 	add.w	r3, r6, #100	; 0x64
 800d9d2:	4641      	mov	r1, r8
 800d9d4:	9a07      	ldr	r2, [sp, #28]
 800d9d6:	9300      	str	r3, [sp, #0]
 800d9d8:	4633      	mov	r3, r6
 800d9da:	682c      	ldr	r4, [r5, #0]
 800d9dc:	f001 fa36 	bl	800ee4c <rmw_create_publisher>
 800d9e0:	682b      	ldr	r3, [r5, #0]
 800d9e2:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
 800d9e6:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 800d9ea:	b370      	cbz	r0, 800da4a <rcl_publisher_init+0x10e>
 800d9ec:	f103 0170 	add.w	r1, r3, #112	; 0x70
 800d9f0:	f001 fb10 	bl	800f014 <rmw_publisher_get_actual_qos>
 800d9f4:	682b      	ldr	r3, [r5, #0]
 800d9f6:	4604      	mov	r4, r0
 800d9f8:	b9d0      	cbnz	r0, 800da30 <rcl_publisher_init+0xf4>
 800d9fa:	f896 2048 	ldrb.w	r2, [r6, #72]	; 0x48
 800d9fe:	4631      	mov	r1, r6
 800da00:	4618      	mov	r0, r3
 800da02:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 800da06:	2270      	movs	r2, #112	; 0x70
 800da08:	f010 f9f5 	bl	801ddf6 <memcpy>
 800da0c:	683a      	ldr	r2, [r7, #0]
 800da0e:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
 800da12:	9807      	ldr	r0, [sp, #28]
 800da14:	6d73      	ldr	r3, [r6, #84]	; 0x54
 800da16:	6e31      	ldr	r1, [r6, #96]	; 0x60
 800da18:	4798      	blx	r3
 800da1a:	4620      	mov	r0, r4
 800da1c:	b008      	add	sp, #32
 800da1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da22:	240b      	movs	r4, #11
 800da24:	4620      	mov	r0, r4
 800da26:	b008      	add	sp, #32
 800da28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da2c:	24c8      	movs	r4, #200	; 0xc8
 800da2e:	e79e      	b.n	800d96e <rcl_publisher_init+0x32>
 800da30:	b1cb      	cbz	r3, 800da66 <rcl_publisher_init+0x12a>
 800da32:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800da36:	b142      	cbz	r2, 800da4a <rcl_publisher_init+0x10e>
 800da38:	4638      	mov	r0, r7
 800da3a:	f008 fbf3 	bl	8016224 <rcl_node_get_rmw_handle>
 800da3e:	682b      	ldr	r3, [r5, #0]
 800da40:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 800da44:	f001 fafa 	bl	800f03c <rmw_destroy_publisher>
 800da48:	682b      	ldr	r3, [r5, #0]
 800da4a:	4618      	mov	r0, r3
 800da4c:	6d72      	ldr	r2, [r6, #84]	; 0x54
 800da4e:	6e31      	ldr	r1, [r6, #96]	; 0x60
 800da50:	2401      	movs	r4, #1
 800da52:	4790      	blx	r2
 800da54:	2300      	movs	r3, #0
 800da56:	602b      	str	r3, [r5, #0]
 800da58:	e7db      	b.n	800da12 <rcl_publisher_init+0xd6>
 800da5a:	2867      	cmp	r0, #103	; 0x67
 800da5c:	d007      	beq.n	800da6e <rcl_publisher_init+0x132>
 800da5e:	2869      	cmp	r0, #105	; 0x69
 800da60:	d005      	beq.n	800da6e <rcl_publisher_init+0x132>
 800da62:	280a      	cmp	r0, #10
 800da64:	d001      	beq.n	800da6a <rcl_publisher_init+0x12e>
 800da66:	2401      	movs	r4, #1
 800da68:	e7d3      	b.n	800da12 <rcl_publisher_init+0xd6>
 800da6a:	240a      	movs	r4, #10
 800da6c:	e7d1      	b.n	800da12 <rcl_publisher_init+0xd6>
 800da6e:	2467      	movs	r4, #103	; 0x67
 800da70:	e7cf      	b.n	800da12 <rcl_publisher_init+0xd6>
 800da72:	bf00      	nop

0800da74 <rcl_publisher_get_default_options>:
 800da74:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da76:	4d1d      	ldr	r5, [pc, #116]	; (800daec <rcl_publisher_get_default_options+0x78>)
 800da78:	b08b      	sub	sp, #44	; 0x2c
 800da7a:	2250      	movs	r2, #80	; 0x50
 800da7c:	491c      	ldr	r1, [pc, #112]	; (800daf0 <rcl_publisher_get_default_options+0x7c>)
 800da7e:	4604      	mov	r4, r0
 800da80:	4628      	mov	r0, r5
 800da82:	f010 f9b8 	bl	801ddf6 <memcpy>
 800da86:	a802      	add	r0, sp, #8
 800da88:	f001 f8c4 	bl	800ec14 <rcutils_get_default_allocator>
 800da8c:	f10d 0c08 	add.w	ip, sp, #8
 800da90:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 800da94:	466e      	mov	r6, sp
 800da96:	2700      	movs	r7, #0
 800da98:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800da9c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800daa0:	f8dc 3000 	ldr.w	r3, [ip]
 800daa4:	4630      	mov	r0, r6
 800daa6:	f8ce 3000 	str.w	r3, [lr]
 800daaa:	f001 f951 	bl	800ed50 <rmw_get_default_publisher_options>
 800daae:	f105 0364 	add.w	r3, r5, #100	; 0x64
 800dab2:	f88d 7027 	strb.w	r7, [sp, #39]	; 0x27
 800dab6:	e896 0003 	ldmia.w	r6, {r0, r1}
 800daba:	e883 0003 	stmia.w	r3, {r0, r1}
 800dabe:	f10d 0027 	add.w	r0, sp, #39	; 0x27
 800dac2:	f008 fbb5 	bl	8016230 <rcl_get_disable_loaned_message>
 800dac6:	b958      	cbnz	r0, 800dae0 <rcl_publisher_get_default_options+0x6c>
 800dac8:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 800dacc:	f885 306c 	strb.w	r3, [r5, #108]	; 0x6c
 800dad0:	2270      	movs	r2, #112	; 0x70
 800dad2:	4906      	ldr	r1, [pc, #24]	; (800daec <rcl_publisher_get_default_options+0x78>)
 800dad4:	4620      	mov	r0, r4
 800dad6:	f010 f98e 	bl	801ddf6 <memcpy>
 800dada:	4620      	mov	r0, r4
 800dadc:	b00b      	add	sp, #44	; 0x2c
 800dade:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dae0:	f001 f8ca 	bl	800ec78 <rcutils_reset_error>
 800dae4:	f885 706c 	strb.w	r7, [r5, #108]	; 0x6c
 800dae8:	e7f2      	b.n	800dad0 <rcl_publisher_get_default_options+0x5c>
 800daea:	bf00      	nop
 800daec:	2000bbb0 	.word	0x2000bbb0
 800daf0:	0801fa08 	.word	0x0801fa08

0800daf4 <rcl_publish>:
 800daf4:	b1f8      	cbz	r0, 800db36 <rcl_publish+0x42>
 800daf6:	6803      	ldr	r3, [r0, #0]
 800daf8:	b570      	push	{r4, r5, r6, lr}
 800dafa:	4604      	mov	r4, r0
 800dafc:	b1b3      	cbz	r3, 800db2c <rcl_publish+0x38>
 800dafe:	4616      	mov	r6, r2
 800db00:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800db04:	b192      	cbz	r2, 800db2c <rcl_publish+0x38>
 800db06:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 800db0a:	460d      	mov	r5, r1
 800db0c:	f007 ff6c 	bl	80159e8 <rcl_context_is_valid>
 800db10:	b160      	cbz	r0, 800db2c <rcl_publish+0x38>
 800db12:	6823      	ldr	r3, [r4, #0]
 800db14:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 800db18:	b140      	cbz	r0, 800db2c <rcl_publish+0x38>
 800db1a:	b155      	cbz	r5, 800db32 <rcl_publish+0x3e>
 800db1c:	4632      	mov	r2, r6
 800db1e:	4629      	mov	r1, r5
 800db20:	f001 f934 	bl	800ed8c <rmw_publish>
 800db24:	3800      	subs	r0, #0
 800db26:	bf18      	it	ne
 800db28:	2001      	movne	r0, #1
 800db2a:	bd70      	pop	{r4, r5, r6, pc}
 800db2c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800db30:	bd70      	pop	{r4, r5, r6, pc}
 800db32:	200b      	movs	r0, #11
 800db34:	bd70      	pop	{r4, r5, r6, pc}
 800db36:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800db3a:	4770      	bx	lr

0800db3c <rcl_publisher_is_valid>:
 800db3c:	b1a0      	cbz	r0, 800db68 <rcl_publisher_is_valid+0x2c>
 800db3e:	6803      	ldr	r3, [r0, #0]
 800db40:	b510      	push	{r4, lr}
 800db42:	4604      	mov	r4, r0
 800db44:	b173      	cbz	r3, 800db64 <rcl_publisher_is_valid+0x28>
 800db46:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800db4a:	b15a      	cbz	r2, 800db64 <rcl_publisher_is_valid+0x28>
 800db4c:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 800db50:	f007 ff4a 	bl	80159e8 <rcl_context_is_valid>
 800db54:	b130      	cbz	r0, 800db64 <rcl_publisher_is_valid+0x28>
 800db56:	6823      	ldr	r3, [r4, #0]
 800db58:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 800db5c:	3800      	subs	r0, #0
 800db5e:	bf18      	it	ne
 800db60:	2001      	movne	r0, #1
 800db62:	bd10      	pop	{r4, pc}
 800db64:	2000      	movs	r0, #0
 800db66:	bd10      	pop	{r4, pc}
 800db68:	2000      	movs	r0, #0
 800db6a:	4770      	bx	lr

0800db6c <rcl_publisher_is_valid_except_context>:
 800db6c:	b130      	cbz	r0, 800db7c <rcl_publisher_is_valid_except_context+0x10>
 800db6e:	6800      	ldr	r0, [r0, #0]
 800db70:	b120      	cbz	r0, 800db7c <rcl_publisher_is_valid_except_context+0x10>
 800db72:	f8d0 00c4 	ldr.w	r0, [r0, #196]	; 0xc4
 800db76:	3800      	subs	r0, #0
 800db78:	bf18      	it	ne
 800db7a:	2001      	movne	r0, #1
 800db7c:	4770      	bx	lr
 800db7e:	bf00      	nop

0800db80 <_rclc_check_for_new_data>:
 800db80:	2800      	cmp	r0, #0
 800db82:	d046      	beq.n	800dc12 <_rclc_check_for_new_data+0x92>
 800db84:	4603      	mov	r3, r0
 800db86:	b530      	push	{r4, r5, lr}
 800db88:	7802      	ldrb	r2, [r0, #0]
 800db8a:	b085      	sub	sp, #20
 800db8c:	2a0a      	cmp	r2, #10
 800db8e:	d842      	bhi.n	800dc16 <_rclc_check_for_new_data+0x96>
 800db90:	e8df f002 	tbb	[pc, r2]
 800db94:	14181212 	.word	0x14181212
 800db98:	06060614 	.word	0x06060614
 800db9c:	2e1a      	.short	0x2e1a
 800db9e:	16          	.byte	0x16
 800db9f:	00          	.byte	0x00
 800dba0:	6a0a      	ldr	r2, [r1, #32]
 800dba2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800dba4:	2000      	movs	r0, #0
 800dba6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800dbaa:	1a12      	subs	r2, r2, r0
 800dbac:	bf18      	it	ne
 800dbae:	2201      	movne	r2, #1
 800dbb0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800dbb4:	b005      	add	sp, #20
 800dbb6:	bd30      	pop	{r4, r5, pc}
 800dbb8:	680a      	ldr	r2, [r1, #0]
 800dbba:	e7f2      	b.n	800dba2 <_rclc_check_for_new_data+0x22>
 800dbbc:	698a      	ldr	r2, [r1, #24]
 800dbbe:	e7f0      	b.n	800dba2 <_rclc_check_for_new_data+0x22>
 800dbc0:	688a      	ldr	r2, [r1, #8]
 800dbc2:	e7ee      	b.n	800dba2 <_rclc_check_for_new_data+0x22>
 800dbc4:	690a      	ldr	r2, [r1, #16]
 800dbc6:	e7ec      	b.n	800dba2 <_rclc_check_for_new_data+0x22>
 800dbc8:	685c      	ldr	r4, [r3, #4]
 800dbca:	4608      	mov	r0, r1
 800dbcc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dbd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dbd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dbd8:	f104 0110 	add.w	r1, r4, #16
 800dbdc:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800dbe0:	9500      	str	r5, [sp, #0]
 800dbe2:	f104 0341 	add.w	r3, r4, #65	; 0x41
 800dbe6:	f104 0240 	add.w	r2, r4, #64	; 0x40
 800dbea:	f00a fc4d 	bl	8018488 <rcl_action_client_wait_set_get_entities_ready>
 800dbee:	e7e1      	b.n	800dbb4 <_rclc_check_for_new_data+0x34>
 800dbf0:	685c      	ldr	r4, [r3, #4]
 800dbf2:	4608      	mov	r0, r1
 800dbf4:	f104 0222 	add.w	r2, r4, #34	; 0x22
 800dbf8:	f104 0123 	add.w	r1, r4, #35	; 0x23
 800dbfc:	f104 0321 	add.w	r3, r4, #33	; 0x21
 800dc00:	e9cd 2100 	strd	r2, r1, [sp]
 800dc04:	f104 0220 	add.w	r2, r4, #32
 800dc08:	f104 0110 	add.w	r1, r4, #16
 800dc0c:	f00a fe54 	bl	80188b8 <rcl_action_server_wait_set_get_entities_ready>
 800dc10:	e7d0      	b.n	800dbb4 <_rclc_check_for_new_data+0x34>
 800dc12:	200b      	movs	r0, #11
 800dc14:	4770      	bx	lr
 800dc16:	2001      	movs	r0, #1
 800dc18:	e7cc      	b.n	800dbb4 <_rclc_check_for_new_data+0x34>
 800dc1a:	bf00      	nop

0800dc1c <_rclc_take_new_data>:
 800dc1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc1e:	b099      	sub	sp, #100	; 0x64
 800dc20:	2800      	cmp	r0, #0
 800dc22:	f000 8088 	beq.w	800dd36 <_rclc_take_new_data+0x11a>
 800dc26:	7803      	ldrb	r3, [r0, #0]
 800dc28:	4604      	mov	r4, r0
 800dc2a:	2b0a      	cmp	r3, #10
 800dc2c:	f200 8167 	bhi.w	800defe <_rclc_take_new_data+0x2e2>
 800dc30:	e8df f003 	tbb	[pc, r3]
 800dc34:	44152d2d 	.word	0x44152d2d
 800dc38:	19191944 	.word	0x19191944
 800dc3c:	065a      	.short	0x065a
 800dc3e:	15          	.byte	0x15
 800dc3f:	00          	.byte	0x00
 800dc40:	6840      	ldr	r0, [r0, #4]
 800dc42:	f890 3020 	ldrb.w	r3, [r0, #32]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	f040 80b2 	bne.w	800ddb0 <_rclc_take_new_data+0x194>
 800dc4c:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	f040 80e4 	bne.w	800de1e <_rclc_take_new_data+0x202>
 800dc56:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d16f      	bne.n	800dd3e <_rclc_take_new_data+0x122>
 800dc5e:	2500      	movs	r5, #0
 800dc60:	4628      	mov	r0, r5
 800dc62:	b019      	add	sp, #100	; 0x64
 800dc64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc66:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800dc68:	6a0b      	ldr	r3, [r1, #32]
 800dc6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d0f5      	beq.n	800dc5e <_rclc_take_new_data+0x42>
 800dc72:	6882      	ldr	r2, [r0, #8]
 800dc74:	f100 0110 	add.w	r1, r0, #16
 800dc78:	6840      	ldr	r0, [r0, #4]
 800dc7a:	f008 fdd5 	bl	8016828 <rcl_take_request>
 800dc7e:	4605      	mov	r5, r0
 800dc80:	2800      	cmp	r0, #0
 800dc82:	d0ec      	beq.n	800dc5e <_rclc_take_new_data+0x42>
 800dc84:	f240 2359 	movw	r3, #601	; 0x259
 800dc88:	4298      	cmp	r0, r3
 800dc8a:	d013      	beq.n	800dcb4 <_rclc_take_new_data+0x98>
 800dc8c:	e029      	b.n	800dce2 <_rclc_take_new_data+0xc6>
 800dc8e:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800dc90:	680b      	ldr	r3, [r1, #0]
 800dc92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d0e1      	beq.n	800dc5e <_rclc_take_new_data+0x42>
 800dc9a:	2300      	movs	r3, #0
 800dc9c:	aa0a      	add	r2, sp, #40	; 0x28
 800dc9e:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800dca2:	f008 ffcf 	bl	8016c44 <rcl_take>
 800dca6:	4605      	mov	r5, r0
 800dca8:	2800      	cmp	r0, #0
 800dcaa:	d0d9      	beq.n	800dc60 <_rclc_take_new_data+0x44>
 800dcac:	f240 1391 	movw	r3, #401	; 0x191
 800dcb0:	4298      	cmp	r0, r3
 800dcb2:	d116      	bne.n	800dce2 <_rclc_take_new_data+0xc6>
 800dcb4:	2300      	movs	r3, #0
 800dcb6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 800dcba:	e7d1      	b.n	800dc60 <_rclc_take_new_data+0x44>
 800dcbc:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800dcbe:	698b      	ldr	r3, [r1, #24]
 800dcc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d0ca      	beq.n	800dc5e <_rclc_take_new_data+0x42>
 800dcc8:	6882      	ldr	r2, [r0, #8]
 800dcca:	f100 0110 	add.w	r1, r0, #16
 800dcce:	6840      	ldr	r0, [r0, #4]
 800dcd0:	f007 fdfa 	bl	80158c8 <rcl_take_response>
 800dcd4:	4605      	mov	r5, r0
 800dcd6:	2800      	cmp	r0, #0
 800dcd8:	d0c1      	beq.n	800dc5e <_rclc_take_new_data+0x42>
 800dcda:	f240 13f5 	movw	r3, #501	; 0x1f5
 800dcde:	4298      	cmp	r0, r3
 800dce0:	d0be      	beq.n	800dc60 <_rclc_take_new_data+0x44>
 800dce2:	f000 ffc9 	bl	800ec78 <rcutils_reset_error>
 800dce6:	e7bb      	b.n	800dc60 <_rclc_take_new_data+0x44>
 800dce8:	6840      	ldr	r0, [r0, #4]
 800dcea:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d17d      	bne.n	800ddee <_rclc_take_new_data+0x1d2>
 800dcf2:	69c3      	ldr	r3, [r0, #28]
 800dcf4:	b11b      	cbz	r3, 800dcfe <_rclc_take_new_data+0xe2>
 800dcf6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d144      	bne.n	800dd88 <_rclc_take_new_data+0x16c>
 800dcfe:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	f040 80ac 	bne.w	800de60 <_rclc_take_new_data+0x244>
 800dd08:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d0a6      	beq.n	800dc5e <_rclc_take_new_data+0x42>
 800dd10:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800dd12:	a90a      	add	r1, sp, #40	; 0x28
 800dd14:	3010      	adds	r0, #16
 800dd16:	f00a fa8f 	bl	8018238 <rcl_action_take_result_response>
 800dd1a:	4605      	mov	r5, r0
 800dd1c:	2800      	cmp	r0, #0
 800dd1e:	d1e0      	bne.n	800dce2 <_rclc_take_new_data+0xc6>
 800dd20:	6860      	ldr	r0, [r4, #4]
 800dd22:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800dd26:	f00a fef7 	bl	8018b18 <rclc_action_find_handle_by_result_request_sequence_number>
 800dd2a:	2800      	cmp	r0, #0
 800dd2c:	d098      	beq.n	800dc60 <_rclc_take_new_data+0x44>
 800dd2e:	2301      	movs	r3, #1
 800dd30:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
 800dd34:	e794      	b.n	800dc60 <_rclc_take_new_data+0x44>
 800dd36:	250b      	movs	r5, #11
 800dd38:	4628      	mov	r0, r5
 800dd3a:	b019      	add	sp, #100	; 0x64
 800dd3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd3e:	ae04      	add	r6, sp, #16
 800dd40:	3010      	adds	r0, #16
 800dd42:	aa0a      	add	r2, sp, #40	; 0x28
 800dd44:	4631      	mov	r1, r6
 800dd46:	f00a fceb 	bl	8018720 <rcl_action_take_cancel_request>
 800dd4a:	4605      	mov	r5, r0
 800dd4c:	2800      	cmp	r0, #0
 800dd4e:	d1c8      	bne.n	800dce2 <_rclc_take_new_data+0xc6>
 800dd50:	a90a      	add	r1, sp, #40	; 0x28
 800dd52:	6860      	ldr	r0, [r4, #4]
 800dd54:	f00a fea0 	bl	8018a98 <rclc_action_find_goal_handle_by_uuid>
 800dd58:	4607      	mov	r7, r0
 800dd5a:	2800      	cmp	r0, #0
 800dd5c:	f000 80bb 	beq.w	800ded6 <_rclc_take_new_data+0x2ba>
 800dd60:	2101      	movs	r1, #1
 800dd62:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800dd66:	f00a fe21 	bl	80189ac <rcl_action_transition_goal_state>
 800dd6a:	2803      	cmp	r0, #3
 800dd6c:	4684      	mov	ip, r0
 800dd6e:	f040 80a7 	bne.w	800dec0 <_rclc_take_new_data+0x2a4>
 800dd72:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800dd76:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800dd78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dd7a:	e896 0003 	ldmia.w	r6, {r0, r1}
 800dd7e:	e884 0003 	stmia.w	r4, {r0, r1}
 800dd82:	f887 c008 	strb.w	ip, [r7, #8]
 800dd86:	e76b      	b.n	800dc60 <_rclc_take_new_data+0x44>
 800dd88:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800dd8a:	3010      	adds	r0, #16
 800dd8c:	f00a fad4 	bl	8018338 <rcl_action_take_feedback>
 800dd90:	4605      	mov	r5, r0
 800dd92:	2800      	cmp	r0, #0
 800dd94:	d1a5      	bne.n	800dce2 <_rclc_take_new_data+0xc6>
 800dd96:	6860      	ldr	r0, [r4, #4]
 800dd98:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800dd9a:	f00a fe7d 	bl	8018a98 <rclc_action_find_goal_handle_by_uuid>
 800dd9e:	4603      	mov	r3, r0
 800dda0:	2800      	cmp	r0, #0
 800dda2:	f000 80a3 	beq.w	800deec <_rclc_take_new_data+0x2d0>
 800dda6:	2201      	movs	r2, #1
 800dda8:	6860      	ldr	r0, [r4, #4]
 800ddaa:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 800ddae:	e7a6      	b.n	800dcfe <_rclc_take_new_data+0xe2>
 800ddb0:	f00a fe4c 	bl	8018a4c <rclc_action_take_goal_handle>
 800ddb4:	4606      	mov	r6, r0
 800ddb6:	6860      	ldr	r0, [r4, #4]
 800ddb8:	2e00      	cmp	r6, #0
 800ddba:	f43f af47 	beq.w	800dc4c <_rclc_take_new_data+0x30>
 800ddbe:	6070      	str	r0, [r6, #4]
 800ddc0:	f106 0128 	add.w	r1, r6, #40	; 0x28
 800ddc4:	69f2      	ldr	r2, [r6, #28]
 800ddc6:	3010      	adds	r0, #16
 800ddc8:	f00a fbf4 	bl	80185b4 <rcl_action_take_goal_request>
 800ddcc:	4605      	mov	r5, r0
 800ddce:	2800      	cmp	r0, #0
 800ddd0:	f040 808e 	bne.w	800def0 <_rclc_take_new_data+0x2d4>
 800ddd4:	69f7      	ldr	r7, [r6, #28]
 800ddd6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800ddd8:	7235      	strb	r5, [r6, #8]
 800ddda:	f8c6 0009 	str.w	r0, [r6, #9]
 800ddde:	f8c6 100d 	str.w	r1, [r6, #13]
 800dde2:	6860      	ldr	r0, [r4, #4]
 800dde4:	f8c6 2011 	str.w	r2, [r6, #17]
 800dde8:	f8c6 3015 	str.w	r3, [r6, #21]
 800ddec:	e72e      	b.n	800dc4c <_rclc_take_new_data+0x30>
 800ddee:	aa04      	add	r2, sp, #16
 800ddf0:	a90a      	add	r1, sp, #40	; 0x28
 800ddf2:	3010      	adds	r0, #16
 800ddf4:	f00a f9a8 	bl	8018148 <rcl_action_take_goal_response>
 800ddf8:	4605      	mov	r5, r0
 800ddfa:	2800      	cmp	r0, #0
 800ddfc:	f47f af71 	bne.w	800dce2 <_rclc_take_new_data+0xc6>
 800de00:	6860      	ldr	r0, [r4, #4]
 800de02:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800de06:	f00a fe75 	bl	8018af4 <rclc_action_find_handle_by_goal_request_sequence_number>
 800de0a:	b130      	cbz	r0, 800de1a <_rclc_take_new_data+0x1fe>
 800de0c:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800de10:	2201      	movs	r2, #1
 800de12:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
 800de16:	f880 2020 	strb.w	r2, [r0, #32]
 800de1a:	6860      	ldr	r0, [r4, #4]
 800de1c:	e769      	b.n	800dcf2 <_rclc_take_new_data+0xd6>
 800de1e:	3010      	adds	r0, #16
 800de20:	aa04      	add	r2, sp, #16
 800de22:	a90a      	add	r1, sp, #40	; 0x28
 800de24:	f00a fc3c 	bl	80186a0 <rcl_action_take_result_request>
 800de28:	4605      	mov	r5, r0
 800de2a:	2800      	cmp	r0, #0
 800de2c:	f47f af59 	bne.w	800dce2 <_rclc_take_new_data+0xc6>
 800de30:	a904      	add	r1, sp, #16
 800de32:	6860      	ldr	r0, [r4, #4]
 800de34:	f00a fe30 	bl	8018a98 <rclc_action_find_goal_handle_by_uuid>
 800de38:	4607      	mov	r7, r0
 800de3a:	b160      	cbz	r0, 800de56 <_rclc_take_new_data+0x23a>
 800de3c:	ad0a      	add	r5, sp, #40	; 0x28
 800de3e:	f100 0640 	add.w	r6, r0, #64	; 0x40
 800de42:	f04f 0c02 	mov.w	ip, #2
 800de46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800de48:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800de4a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800de4e:	e886 0003 	stmia.w	r6, {r0, r1}
 800de52:	f887 c008 	strb.w	ip, [r7, #8]
 800de56:	6860      	ldr	r0, [r4, #4]
 800de58:	2300      	movs	r3, #0
 800de5a:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
 800de5e:	e6fa      	b.n	800dc56 <_rclc_take_new_data+0x3a>
 800de60:	f100 0230 	add.w	r2, r0, #48	; 0x30
 800de64:	a90a      	add	r1, sp, #40	; 0x28
 800de66:	3010      	adds	r0, #16
 800de68:	f00a fa26 	bl	80182b8 <rcl_action_take_cancel_response>
 800de6c:	4605      	mov	r5, r0
 800de6e:	2800      	cmp	r0, #0
 800de70:	f47f af37 	bne.w	800dce2 <_rclc_take_new_data+0xc6>
 800de74:	6860      	ldr	r0, [r4, #4]
 800de76:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800de7a:	f00a fe5f 	bl	8018b3c <rclc_action_find_handle_by_cancel_request_sequence_number>
 800de7e:	4606      	mov	r6, r0
 800de80:	6860      	ldr	r0, [r4, #4]
 800de82:	2e00      	cmp	r6, #0
 800de84:	f43f af40 	beq.w	800dd08 <_rclc_take_new_data+0xec>
 800de88:	2701      	movs	r7, #1
 800de8a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800de8c:	84b7      	strh	r7, [r6, #36]	; 0x24
 800de8e:	2b00      	cmp	r3, #0
 800de90:	f43f af3a 	beq.w	800dd08 <_rclc_take_new_data+0xec>
 800de94:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800de96:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800de9a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800de9e:	f00a fdfb 	bl	8018a98 <rclc_action_find_goal_handle_by_uuid>
 800dea2:	b138      	cbz	r0, 800deb4 <_rclc_take_new_data+0x298>
 800dea4:	6860      	ldr	r0, [r4, #4]
 800dea6:	3501      	adds	r5, #1
 800dea8:	f886 7025 	strb.w	r7, [r6, #37]	; 0x25
 800deac:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800deae:	42ab      	cmp	r3, r5
 800deb0:	d8f0      	bhi.n	800de94 <_rclc_take_new_data+0x278>
 800deb2:	e729      	b.n	800dd08 <_rclc_take_new_data+0xec>
 800deb4:	6860      	ldr	r0, [r4, #4]
 800deb6:	3501      	adds	r5, #1
 800deb8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800deba:	42ab      	cmp	r3, r5
 800debc:	d8ea      	bhi.n	800de94 <_rclc_take_new_data+0x278>
 800debe:	e723      	b.n	800dd08 <_rclc_take_new_data+0xec>
 800dec0:	ab06      	add	r3, sp, #24
 800dec2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dec4:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800dec8:	2103      	movs	r1, #3
 800deca:	6860      	ldr	r0, [r4, #4]
 800decc:	e896 000c 	ldmia.w	r6, {r2, r3}
 800ded0:	f00a feaa 	bl	8018c28 <rclc_action_server_goal_cancel_reject>
 800ded4:	e6c4      	b.n	800dc60 <_rclc_take_new_data+0x44>
 800ded6:	ab06      	add	r3, sp, #24
 800ded8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800deda:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800dede:	2102      	movs	r1, #2
 800dee0:	6860      	ldr	r0, [r4, #4]
 800dee2:	e896 000c 	ldmia.w	r6, {r2, r3}
 800dee6:	f00a fe9f 	bl	8018c28 <rclc_action_server_goal_cancel_reject>
 800deea:	e6b9      	b.n	800dc60 <_rclc_take_new_data+0x44>
 800deec:	6860      	ldr	r0, [r4, #4]
 800deee:	e706      	b.n	800dcfe <_rclc_take_new_data+0xe2>
 800def0:	4631      	mov	r1, r6
 800def2:	6860      	ldr	r0, [r4, #4]
 800def4:	f00a fdba 	bl	8018a6c <rclc_action_remove_used_goal_handle>
 800def8:	f000 febe 	bl	800ec78 <rcutils_reset_error>
 800defc:	e6b0      	b.n	800dc60 <_rclc_take_new_data+0x44>
 800defe:	2501      	movs	r5, #1
 800df00:	e6ae      	b.n	800dc60 <_rclc_take_new_data+0x44>
 800df02:	bf00      	nop

0800df04 <_rclc_execute.part.0>:
 800df04:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df06:	7803      	ldrb	r3, [r0, #0]
 800df08:	b085      	sub	sp, #20
 800df0a:	4604      	mov	r4, r0
 800df0c:	2b0a      	cmp	r3, #10
 800df0e:	f200 8139 	bhi.w	800e184 <_rclc_execute.part.0+0x280>
 800df12:	e8df f003 	tbb	[pc, r3]
 800df16:	4268      	.short	0x4268
 800df18:	06a75b4d 	.word	0x06a75b4d
 800df1c:	721d0606 	.word	0x721d0606
 800df20:	62          	.byte	0x62
 800df21:	00          	.byte	0x00
 800df22:	2b06      	cmp	r3, #6
 800df24:	f000 8126 	beq.w	800e174 <_rclc_execute.part.0+0x270>
 800df28:	2b07      	cmp	r3, #7
 800df2a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800df2c:	f040 811c 	bne.w	800e168 <_rclc_execute.part.0+0x264>
 800df30:	f104 0510 	add.w	r5, r4, #16
 800df34:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	; 0x28
 800df38:	6880      	ldr	r0, [r0, #8]
 800df3a:	4798      	blx	r3
 800df3c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800df3e:	4629      	mov	r1, r5
 800df40:	6860      	ldr	r0, [r4, #4]
 800df42:	f008 fcc1 	bl	80168c8 <rcl_send_response>
 800df46:	4604      	mov	r4, r0
 800df48:	b378      	cbz	r0, 800dfaa <_rclc_execute.part.0+0xa6>
 800df4a:	f000 fe95 	bl	800ec78 <rcutils_reset_error>
 800df4e:	e02c      	b.n	800dfaa <_rclc_execute.part.0+0xa6>
 800df50:	6840      	ldr	r0, [r0, #4]
 800df52:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 800df56:	2b00      	cmp	r3, #0
 800df58:	f000 808e 	beq.w	800e078 <_rclc_execute.part.0+0x174>
 800df5c:	2600      	movs	r6, #0
 800df5e:	2701      	movs	r7, #1
 800df60:	e004      	b.n	800df6c <_rclc_execute.part.0+0x68>
 800df62:	f00a fd4d 	bl	8018a00 <rclc_action_send_result_request>
 800df66:	b998      	cbnz	r0, 800df90 <_rclc_execute.part.0+0x8c>
 800df68:	722f      	strb	r7, [r5, #8]
 800df6a:	6860      	ldr	r0, [r4, #4]
 800df6c:	f00a fdf8 	bl	8018b60 <rclc_action_find_first_handle_with_goal_response>
 800df70:	4605      	mov	r5, r0
 800df72:	2800      	cmp	r0, #0
 800df74:	d07f      	beq.n	800e076 <_rclc_execute.part.0+0x172>
 800df76:	6863      	ldr	r3, [r4, #4]
 800df78:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800df7a:	699b      	ldr	r3, [r3, #24]
 800df7c:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
 800df80:	f885 6020 	strb.w	r6, [r5, #32]
 800df84:	4798      	blx	r3
 800df86:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 800df8a:	4628      	mov	r0, r5
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d1e8      	bne.n	800df62 <_rclc_execute.part.0+0x5e>
 800df90:	6860      	ldr	r0, [r4, #4]
 800df92:	4629      	mov	r1, r5
 800df94:	f00a fd6a 	bl	8018a6c <rclc_action_remove_used_goal_handle>
 800df98:	e7e7      	b.n	800df6a <_rclc_execute.part.0+0x66>
 800df9a:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 800df9e:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	; 0x2c
 800dfa2:	b100      	cbz	r0, 800dfa6 <_rclc_execute.part.0+0xa2>
 800dfa4:	68a0      	ldr	r0, [r4, #8]
 800dfa6:	2400      	movs	r4, #0
 800dfa8:	4798      	blx	r3
 800dfaa:	4620      	mov	r0, r4
 800dfac:	b005      	add	sp, #20
 800dfae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dfb0:	6840      	ldr	r0, [r0, #4]
 800dfb2:	f009 f981 	bl	80172b8 <rcl_timer_call>
 800dfb6:	f240 3321 	movw	r3, #801	; 0x321
 800dfba:	4604      	mov	r4, r0
 800dfbc:	4298      	cmp	r0, r3
 800dfbe:	d001      	beq.n	800dfc4 <_rclc_execute.part.0+0xc0>
 800dfc0:	2800      	cmp	r0, #0
 800dfc2:	d1c2      	bne.n	800df4a <_rclc_execute.part.0+0x46>
 800dfc4:	2400      	movs	r4, #0
 800dfc6:	4620      	mov	r0, r4
 800dfc8:	b005      	add	sp, #20
 800dfca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dfcc:	2400      	movs	r4, #0
 800dfce:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800dfd0:	6880      	ldr	r0, [r0, #8]
 800dfd2:	4798      	blx	r3
 800dfd4:	4620      	mov	r0, r4
 800dfd6:	b005      	add	sp, #20
 800dfd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dfda:	2400      	movs	r4, #0
 800dfdc:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800dfde:	4798      	blx	r3
 800dfe0:	4620      	mov	r0, r4
 800dfe2:	b005      	add	sp, #20
 800dfe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dfe6:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 800dfea:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800dfec:	b100      	cbz	r0, 800dff0 <_rclc_execute.part.0+0xec>
 800dfee:	68a0      	ldr	r0, [r4, #8]
 800dff0:	2400      	movs	r4, #0
 800dff2:	4798      	blx	r3
 800dff4:	4620      	mov	r0, r4
 800dff6:	b005      	add	sp, #20
 800dff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dffa:	6840      	ldr	r0, [r0, #4]
 800dffc:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800e000:	bb3b      	cbnz	r3, 800e052 <_rclc_execute.part.0+0x14e>
 800e002:	f890 3020 	ldrb.w	r3, [r0, #32]
 800e006:	2b00      	cmp	r3, #0
 800e008:	d07d      	beq.n	800e106 <_rclc_execute.part.0+0x202>
 800e00a:	f640 0634 	movw	r6, #2100	; 0x834
 800e00e:	2701      	movs	r7, #1
 800e010:	e007      	b.n	800e022 <_rclc_execute.part.0+0x11e>
 800e012:	4628      	mov	r0, r5
 800e014:	f00a fdbc 	bl	8018b90 <rclc_action_server_response_goal_request>
 800e018:	4629      	mov	r1, r5
 800e01a:	6860      	ldr	r0, [r4, #4]
 800e01c:	f00a fd26 	bl	8018a6c <rclc_action_remove_used_goal_handle>
 800e020:	6860      	ldr	r0, [r4, #4]
 800e022:	2100      	movs	r1, #0
 800e024:	f00a fd4e 	bl	8018ac4 <rclc_action_find_first_handle_by_status>
 800e028:	4605      	mov	r5, r0
 800e02a:	2800      	cmp	r0, #0
 800e02c:	d068      	beq.n	800e100 <_rclc_execute.part.0+0x1fc>
 800e02e:	6863      	ldr	r3, [r4, #4]
 800e030:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800e032:	699b      	ldr	r3, [r3, #24]
 800e034:	4798      	blx	r3
 800e036:	42b0      	cmp	r0, r6
 800e038:	f04f 0100 	mov.w	r1, #0
 800e03c:	d1e9      	bne.n	800e012 <_rclc_execute.part.0+0x10e>
 800e03e:	2101      	movs	r1, #1
 800e040:	4628      	mov	r0, r5
 800e042:	f00a fda5 	bl	8018b90 <rclc_action_server_response_goal_request>
 800e046:	722f      	strb	r7, [r5, #8]
 800e048:	e7ea      	b.n	800e020 <_rclc_execute.part.0+0x11c>
 800e04a:	6848      	ldr	r0, [r1, #4]
 800e04c:	f00a fd0e 	bl	8018a6c <rclc_action_remove_used_goal_handle>
 800e050:	6860      	ldr	r0, [r4, #4]
 800e052:	f00a fd43 	bl	8018adc <rclc_action_find_first_terminated_handle>
 800e056:	4601      	mov	r1, r0
 800e058:	2800      	cmp	r0, #0
 800e05a:	d1f6      	bne.n	800e04a <_rclc_execute.part.0+0x146>
 800e05c:	6860      	ldr	r0, [r4, #4]
 800e05e:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 800e062:	e7ce      	b.n	800e002 <_rclc_execute.part.0+0xfe>
 800e064:	2400      	movs	r4, #0
 800e066:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800e068:	f100 0110 	add.w	r1, r0, #16
 800e06c:	6880      	ldr	r0, [r0, #8]
 800e06e:	4798      	blx	r3
 800e070:	4620      	mov	r0, r4
 800e072:	b005      	add	sp, #20
 800e074:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e076:	6860      	ldr	r0, [r4, #4]
 800e078:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800e07c:	b18b      	cbz	r3, 800e0a2 <_rclc_execute.part.0+0x19e>
 800e07e:	68c5      	ldr	r5, [r0, #12]
 800e080:	b32d      	cbz	r5, 800e0ce <_rclc_execute.part.0+0x1ca>
 800e082:	2600      	movs	r6, #0
 800e084:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 800e088:	b143      	cbz	r3, 800e09c <_rclc_execute.part.0+0x198>
 800e08a:	69c3      	ldr	r3, [r0, #28]
 800e08c:	f885 6022 	strb.w	r6, [r5, #34]	; 0x22
 800e090:	b123      	cbz	r3, 800e09c <_rclc_execute.part.0+0x198>
 800e092:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800e094:	4628      	mov	r0, r5
 800e096:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800e098:	4798      	blx	r3
 800e09a:	6860      	ldr	r0, [r4, #4]
 800e09c:	682d      	ldr	r5, [r5, #0]
 800e09e:	2d00      	cmp	r5, #0
 800e0a0:	d1f0      	bne.n	800e084 <_rclc_execute.part.0+0x180>
 800e0a2:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800e0a6:	b193      	cbz	r3, 800e0ce <_rclc_execute.part.0+0x1ca>
 800e0a8:	68c5      	ldr	r5, [r0, #12]
 800e0aa:	b185      	cbz	r5, 800e0ce <_rclc_execute.part.0+0x1ca>
 800e0ac:	2600      	movs	r6, #0
 800e0ae:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 800e0b2:	b14b      	cbz	r3, 800e0c8 <_rclc_execute.part.0+0x1c4>
 800e0b4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800e0b6:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
 800e0ba:	b12b      	cbz	r3, 800e0c8 <_rclc_execute.part.0+0x1c4>
 800e0bc:	4628      	mov	r0, r5
 800e0be:	f895 1025 	ldrb.w	r1, [r5, #37]	; 0x25
 800e0c2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800e0c4:	4798      	blx	r3
 800e0c6:	6860      	ldr	r0, [r4, #4]
 800e0c8:	682d      	ldr	r5, [r5, #0]
 800e0ca:	2d00      	cmp	r5, #0
 800e0cc:	d1ef      	bne.n	800e0ae <_rclc_execute.part.0+0x1aa>
 800e0ce:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	f43f af76 	beq.w	800dfc4 <_rclc_execute.part.0+0xc0>
 800e0d8:	2700      	movs	r7, #0
 800e0da:	e00b      	b.n	800e0f4 <_rclc_execute.part.0+0x1f0>
 800e0dc:	6863      	ldr	r3, [r4, #4]
 800e0de:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800e0e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800e0e2:	6a1e      	ldr	r6, [r3, #32]
 800e0e4:	f885 7023 	strb.w	r7, [r5, #35]	; 0x23
 800e0e8:	47b0      	blx	r6
 800e0ea:	6860      	ldr	r0, [r4, #4]
 800e0ec:	4629      	mov	r1, r5
 800e0ee:	f00a fcbd 	bl	8018a6c <rclc_action_remove_used_goal_handle>
 800e0f2:	6860      	ldr	r0, [r4, #4]
 800e0f4:	f00a fd40 	bl	8018b78 <rclc_action_find_first_handle_with_result_response>
 800e0f8:	4605      	mov	r5, r0
 800e0fa:	2800      	cmp	r0, #0
 800e0fc:	d1ee      	bne.n	800e0dc <_rclc_execute.part.0+0x1d8>
 800e0fe:	e761      	b.n	800dfc4 <_rclc_execute.part.0+0xc0>
 800e100:	6860      	ldr	r0, [r4, #4]
 800e102:	f880 5020 	strb.w	r5, [r0, #32]
 800e106:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	f43f af5a 	beq.w	800dfc4 <_rclc_execute.part.0+0xc0>
 800e110:	68c5      	ldr	r5, [r0, #12]
 800e112:	b1b5      	cbz	r5, 800e142 <_rclc_execute.part.0+0x23e>
 800e114:	2602      	movs	r6, #2
 800e116:	e001      	b.n	800e11c <_rclc_execute.part.0+0x218>
 800e118:	682d      	ldr	r5, [r5, #0]
 800e11a:	b195      	cbz	r5, 800e142 <_rclc_execute.part.0+0x23e>
 800e11c:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800e120:	2b03      	cmp	r3, #3
 800e122:	d1f9      	bne.n	800e118 <_rclc_execute.part.0+0x214>
 800e124:	69c3      	ldr	r3, [r0, #28]
 800e126:	4628      	mov	r0, r5
 800e128:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800e12a:	4798      	blx	r3
 800e12c:	4603      	mov	r3, r0
 800e12e:	f105 0260 	add.w	r2, r5, #96	; 0x60
 800e132:	4628      	mov	r0, r5
 800e134:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 800e138:	b143      	cbz	r3, 800e14c <_rclc_execute.part.0+0x248>
 800e13a:	f00a fd49 	bl	8018bd0 <rclc_action_server_goal_cancel_accept>
 800e13e:	6860      	ldr	r0, [r4, #4]
 800e140:	e7ea      	b.n	800e118 <_rclc_execute.part.0+0x214>
 800e142:	2300      	movs	r3, #0
 800e144:	461c      	mov	r4, r3
 800e146:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
 800e14a:	e72e      	b.n	800dfaa <_rclc_execute.part.0+0xa6>
 800e14c:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800e14e:	f105 0758 	add.w	r7, r5, #88	; 0x58
 800e152:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800e156:	2101      	movs	r1, #1
 800e158:	6860      	ldr	r0, [r4, #4]
 800e15a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e15e:	f00a fd63 	bl	8018c28 <rclc_action_server_goal_cancel_reject>
 800e162:	722e      	strb	r6, [r5, #8]
 800e164:	6860      	ldr	r0, [r4, #4]
 800e166:	e7d7      	b.n	800e118 <_rclc_execute.part.0+0x214>
 800e168:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800e16a:	f104 0510 	add.w	r5, r4, #16
 800e16e:	6880      	ldr	r0, [r0, #8]
 800e170:	4798      	blx	r3
 800e172:	e6e3      	b.n	800df3c <_rclc_execute.part.0+0x38>
 800e174:	f100 0510 	add.w	r5, r0, #16
 800e178:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800e17a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800e17c:	4629      	mov	r1, r5
 800e17e:	6880      	ldr	r0, [r0, #8]
 800e180:	4798      	blx	r3
 800e182:	e6db      	b.n	800df3c <_rclc_execute.part.0+0x38>
 800e184:	2401      	movs	r4, #1
 800e186:	e710      	b.n	800dfaa <_rclc_execute.part.0+0xa6>

0800e188 <rclc_executor_trigger_any>:
 800e188:	2800      	cmp	r0, #0
 800e18a:	d03d      	beq.n	800e208 <rclc_executor_trigger_any+0x80>
 800e18c:	2900      	cmp	r1, #0
 800e18e:	d03c      	beq.n	800e20a <rclc_executor_trigger_any+0x82>
 800e190:	4603      	mov	r3, r0
 800e192:	f890 0038 	ldrb.w	r0, [r0, #56]	; 0x38
 800e196:	2200      	movs	r2, #0
 800e198:	2800      	cmp	r0, #0
 800e19a:	d035      	beq.n	800e208 <rclc_executor_trigger_any+0x80>
 800e19c:	b430      	push	{r4, r5}
 800e19e:	f893 c000 	ldrb.w	ip, [r3]
 800e1a2:	f1bc 0f08 	cmp.w	ip, #8
 800e1a6:	d11d      	bne.n	800e1e4 <rclc_executor_trigger_any+0x5c>
 800e1a8:	685c      	ldr	r4, [r3, #4]
 800e1aa:	6c25      	ldr	r5, [r4, #64]	; 0x40
 800e1ac:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 800e1b0:	d105      	bne.n	800e1be <rclc_executor_trigger_any+0x36>
 800e1b2:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 800e1b6:	b910      	cbnz	r0, 800e1be <rclc_executor_trigger_any+0x36>
 800e1b8:	f894 0043 	ldrb.w	r0, [r4, #67]	; 0x43
 800e1bc:	b128      	cbz	r0, 800e1ca <rclc_executor_trigger_any+0x42>
 800e1be:	bc30      	pop	{r4, r5}
 800e1c0:	4770      	bx	lr
 800e1c2:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
 800e1c6:	2800      	cmp	r0, #0
 800e1c8:	d1f9      	bne.n	800e1be <rclc_executor_trigger_any+0x36>
 800e1ca:	3201      	adds	r2, #1
 800e1cc:	3340      	adds	r3, #64	; 0x40
 800e1ce:	4291      	cmp	r1, r2
 800e1d0:	d017      	beq.n	800e202 <rclc_executor_trigger_any+0x7a>
 800e1d2:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
 800e1d6:	2800      	cmp	r0, #0
 800e1d8:	d0f1      	beq.n	800e1be <rclc_executor_trigger_any+0x36>
 800e1da:	f893 c000 	ldrb.w	ip, [r3]
 800e1de:	f1bc 0f08 	cmp.w	ip, #8
 800e1e2:	d0e1      	beq.n	800e1a8 <rclc_executor_trigger_any+0x20>
 800e1e4:	f1bc 0f09 	cmp.w	ip, #9
 800e1e8:	d1eb      	bne.n	800e1c2 <rclc_executor_trigger_any+0x3a>
 800e1ea:	685c      	ldr	r4, [r3, #4]
 800e1ec:	6a25      	ldr	r5, [r4, #32]
 800e1ee:	2d00      	cmp	r5, #0
 800e1f0:	d1e5      	bne.n	800e1be <rclc_executor_trigger_any+0x36>
 800e1f2:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 800e1f6:	2800      	cmp	r0, #0
 800e1f8:	d1e1      	bne.n	800e1be <rclc_executor_trigger_any+0x36>
 800e1fa:	3201      	adds	r2, #1
 800e1fc:	3340      	adds	r3, #64	; 0x40
 800e1fe:	4291      	cmp	r1, r2
 800e200:	d1e7      	bne.n	800e1d2 <rclc_executor_trigger_any+0x4a>
 800e202:	2000      	movs	r0, #0
 800e204:	bc30      	pop	{r4, r5}
 800e206:	4770      	bx	lr
 800e208:	4770      	bx	lr
 800e20a:	4608      	mov	r0, r1
 800e20c:	4770      	bx	lr
 800e20e:	bf00      	nop

0800e210 <rclc_executor_get_zero_initialized_executor>:
 800e210:	b510      	push	{r4, lr}
 800e212:	4604      	mov	r4, r0
 800e214:	2290      	movs	r2, #144	; 0x90
 800e216:	4902      	ldr	r1, [pc, #8]	; (800e220 <rclc_executor_get_zero_initialized_executor+0x10>)
 800e218:	f00f fded 	bl	801ddf6 <memcpy>
 800e21c:	4620      	mov	r0, r4
 800e21e:	bd10      	pop	{r4, pc}
 800e220:	0801fa58 	.word	0x0801fa58
 800e224:	00000000 	.word	0x00000000

0800e228 <rclc_executor_init>:
 800e228:	2900      	cmp	r1, #0
 800e22a:	d06a      	beq.n	800e302 <rclc_executor_init+0xda>
 800e22c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e230:	4605      	mov	r5, r0
 800e232:	b0b2      	sub	sp, #200	; 0xc8
 800e234:	2800      	cmp	r0, #0
 800e236:	d05c      	beq.n	800e2f2 <rclc_executor_init+0xca>
 800e238:	4616      	mov	r6, r2
 800e23a:	4618      	mov	r0, r3
 800e23c:	4688      	mov	r8, r1
 800e23e:	461f      	mov	r7, r3
 800e240:	f000 fcf6 	bl	800ec30 <rcutils_allocator_is_valid>
 800e244:	2e00      	cmp	r6, #0
 800e246:	d054      	beq.n	800e2f2 <rclc_executor_init+0xca>
 800e248:	f080 0401 	eor.w	r4, r0, #1
 800e24c:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 800e250:	d14f      	bne.n	800e2f2 <rclc_executor_init+0xca>
 800e252:	2290      	movs	r2, #144	; 0x90
 800e254:	4930      	ldr	r1, [pc, #192]	; (800e318 <rclc_executor_init+0xf0>)
 800e256:	a80e      	add	r0, sp, #56	; 0x38
 800e258:	f00f fdcd 	bl	801ddf6 <memcpy>
 800e25c:	a90e      	add	r1, sp, #56	; 0x38
 800e25e:	2290      	movs	r2, #144	; 0x90
 800e260:	4628      	mov	r0, r5
 800e262:	f00f fdc8 	bl	801ddf6 <memcpy>
 800e266:	4668      	mov	r0, sp
 800e268:	f8c5 8004 	str.w	r8, [r5, #4]
 800e26c:	60ee      	str	r6, [r5, #12]
 800e26e:	f009 f999 	bl	80175a4 <rcl_get_zero_initialized_wait_set>
 800e272:	46ec      	mov	ip, sp
 800e274:	f105 0e18 	add.w	lr, r5, #24
 800e278:	f8d7 8000 	ldr.w	r8, [r7]
 800e27c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e280:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e284:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e288:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e28c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e290:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 800e310 <rclc_executor_init+0xe8>
 800e294:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e298:	f8dc 3000 	ldr.w	r3, [ip]
 800e29c:	01b0      	lsls	r0, r6, #6
 800e29e:	6939      	ldr	r1, [r7, #16]
 800e2a0:	f8ce 3000 	str.w	r3, [lr]
 800e2a4:	616f      	str	r7, [r5, #20]
 800e2a6:	ed85 7b1c 	vstr	d7, [r5, #112]	; 0x70
 800e2aa:	47c0      	blx	r8
 800e2ac:	60a8      	str	r0, [r5, #8]
 800e2ae:	b908      	cbnz	r0, 800e2b4 <rclc_executor_init+0x8c>
 800e2b0:	e029      	b.n	800e306 <rclc_executor_init+0xde>
 800e2b2:	68a8      	ldr	r0, [r5, #8]
 800e2b4:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800e2b8:	3401      	adds	r4, #1
 800e2ba:	4631      	mov	r1, r6
 800e2bc:	f000 faf4 	bl	800e8a8 <rclc_executor_handle_init>
 800e2c0:	42a6      	cmp	r6, r4
 800e2c2:	d8f6      	bhi.n	800e2b2 <rclc_executor_init+0x8a>
 800e2c4:	f105 004c 	add.w	r0, r5, #76	; 0x4c
 800e2c8:	f000 fae4 	bl	800e894 <rclc_executor_handle_counters_zero_init>
 800e2cc:	4a13      	ldr	r2, [pc, #76]	; (800e31c <rclc_executor_init+0xf4>)
 800e2ce:	2300      	movs	r3, #0
 800e2d0:	68a8      	ldr	r0, [r5, #8]
 800e2d2:	e9c5 2320 	strd	r2, r3, [r5, #128]	; 0x80
 800e2d6:	b168      	cbz	r0, 800e2f4 <rclc_executor_init+0xcc>
 800e2d8:	68eb      	ldr	r3, [r5, #12]
 800e2da:	b173      	cbz	r3, 800e2fa <rclc_executor_init+0xd2>
 800e2dc:	696a      	ldr	r2, [r5, #20]
 800e2de:	fab2 f382 	clz	r3, r2
 800e2e2:	095b      	lsrs	r3, r3, #5
 800e2e4:	b14a      	cbz	r2, 800e2fa <rclc_executor_init+0xd2>
 800e2e6:	4618      	mov	r0, r3
 800e2e8:	f885 3088 	strb.w	r3, [r5, #136]	; 0x88
 800e2ec:	b032      	add	sp, #200	; 0xc8
 800e2ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2f2:	200b      	movs	r0, #11
 800e2f4:	b032      	add	sp, #200	; 0xc8
 800e2f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2fa:	2000      	movs	r0, #0
 800e2fc:	b032      	add	sp, #200	; 0xc8
 800e2fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e302:	200b      	movs	r0, #11
 800e304:	4770      	bx	lr
 800e306:	200a      	movs	r0, #10
 800e308:	e7f4      	b.n	800e2f4 <rclc_executor_init+0xcc>
 800e30a:	bf00      	nop
 800e30c:	f3af 8000 	nop.w
 800e310:	3b9aca00 	.word	0x3b9aca00
 800e314:	00000000 	.word	0x00000000
 800e318:	0801fa58 	.word	0x0801fa58
 800e31c:	0800e189 	.word	0x0800e189

0800e320 <rclc_executor_add_subscription>:
 800e320:	2b00      	cmp	r3, #0
 800e322:	bf18      	it	ne
 800e324:	2a00      	cmpne	r2, #0
 800e326:	b570      	push	{r4, r5, r6, lr}
 800e328:	4604      	mov	r4, r0
 800e32a:	bf0c      	ite	eq
 800e32c:	2001      	moveq	r0, #1
 800e32e:	2000      	movne	r0, #0
 800e330:	f89d c010 	ldrb.w	ip, [sp, #16]
 800e334:	2900      	cmp	r1, #0
 800e336:	bf08      	it	eq
 800e338:	f040 0001 	orreq.w	r0, r0, #1
 800e33c:	bb28      	cbnz	r0, 800e38a <rclc_executor_add_subscription+0x6a>
 800e33e:	fab4 f584 	clz	r5, r4
 800e342:	096d      	lsrs	r5, r5, #5
 800e344:	b30c      	cbz	r4, 800e38a <rclc_executor_add_subscription+0x6a>
 800e346:	e9d4 0603 	ldrd	r0, r6, [r4, #12]
 800e34a:	4286      	cmp	r6, r0
 800e34c:	d301      	bcc.n	800e352 <rclc_executor_add_subscription+0x32>
 800e34e:	2001      	movs	r0, #1
 800e350:	bd70      	pop	{r4, r5, r6, pc}
 800e352:	68a0      	ldr	r0, [r4, #8]
 800e354:	ea4f 1e86 	mov.w	lr, r6, lsl #6
 800e358:	f800 500e 	strb.w	r5, [r0, lr]
 800e35c:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 800e360:	3601      	adds	r6, #1
 800e362:	6303      	str	r3, [r0, #48]	; 0x30
 800e364:	2301      	movs	r3, #1
 800e366:	62c5      	str	r5, [r0, #44]	; 0x2c
 800e368:	f104 0518 	add.w	r5, r4, #24
 800e36c:	f880 c001 	strb.w	ip, [r0, #1]
 800e370:	8703      	strh	r3, [r0, #56]	; 0x38
 800e372:	e9c0 1201 	strd	r1, r2, [r0, #4]
 800e376:	4628      	mov	r0, r5
 800e378:	6126      	str	r6, [r4, #16]
 800e37a:	f009 f927 	bl	80175cc <rcl_wait_set_is_valid>
 800e37e:	b930      	cbnz	r0, 800e38e <rclc_executor_add_subscription+0x6e>
 800e380:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800e382:	2000      	movs	r0, #0
 800e384:	3301      	adds	r3, #1
 800e386:	64e3      	str	r3, [r4, #76]	; 0x4c
 800e388:	bd70      	pop	{r4, r5, r6, pc}
 800e38a:	200b      	movs	r0, #11
 800e38c:	bd70      	pop	{r4, r5, r6, pc}
 800e38e:	4628      	mov	r0, r5
 800e390:	f009 f922 	bl	80175d8 <rcl_wait_set_fini>
 800e394:	2800      	cmp	r0, #0
 800e396:	d0f3      	beq.n	800e380 <rclc_executor_add_subscription+0x60>
 800e398:	bd70      	pop	{r4, r5, r6, pc}
 800e39a:	bf00      	nop

0800e39c <rclc_executor_add_timer>:
 800e39c:	b351      	cbz	r1, 800e3f4 <rclc_executor_add_timer+0x58>
 800e39e:	fab0 f280 	clz	r2, r0
 800e3a2:	b570      	push	{r4, r5, r6, lr}
 800e3a4:	0952      	lsrs	r2, r2, #5
 800e3a6:	4604      	mov	r4, r0
 800e3a8:	b1e0      	cbz	r0, 800e3e4 <rclc_executor_add_timer+0x48>
 800e3aa:	e9d0 0303 	ldrd	r0, r3, [r0, #12]
 800e3ae:	4283      	cmp	r3, r0
 800e3b0:	d301      	bcc.n	800e3b6 <rclc_executor_add_timer+0x1a>
 800e3b2:	2001      	movs	r0, #1
 800e3b4:	bd70      	pop	{r4, r5, r6, pc}
 800e3b6:	68a0      	ldr	r0, [r4, #8]
 800e3b8:	019d      	lsls	r5, r3, #6
 800e3ba:	1c5e      	adds	r6, r3, #1
 800e3bc:	eb00 1383 	add.w	r3, r0, r3, lsl #6
 800e3c0:	6059      	str	r1, [r3, #4]
 800e3c2:	2102      	movs	r1, #2
 800e3c4:	5341      	strh	r1, [r0, r5]
 800e3c6:	2101      	movs	r1, #1
 800e3c8:	f104 0518 	add.w	r5, r4, #24
 800e3cc:	62da      	str	r2, [r3, #44]	; 0x2c
 800e3ce:	8719      	strh	r1, [r3, #56]	; 0x38
 800e3d0:	4628      	mov	r0, r5
 800e3d2:	6126      	str	r6, [r4, #16]
 800e3d4:	f009 f8fa 	bl	80175cc <rcl_wait_set_is_valid>
 800e3d8:	b930      	cbnz	r0, 800e3e8 <rclc_executor_add_timer+0x4c>
 800e3da:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e3dc:	2000      	movs	r0, #0
 800e3de:	3301      	adds	r3, #1
 800e3e0:	6523      	str	r3, [r4, #80]	; 0x50
 800e3e2:	bd70      	pop	{r4, r5, r6, pc}
 800e3e4:	200b      	movs	r0, #11
 800e3e6:	bd70      	pop	{r4, r5, r6, pc}
 800e3e8:	4628      	mov	r0, r5
 800e3ea:	f009 f8f5 	bl	80175d8 <rcl_wait_set_fini>
 800e3ee:	2800      	cmp	r0, #0
 800e3f0:	d0f3      	beq.n	800e3da <rclc_executor_add_timer+0x3e>
 800e3f2:	bd70      	pop	{r4, r5, r6, pc}
 800e3f4:	200b      	movs	r0, #11
 800e3f6:	4770      	bx	lr

0800e3f8 <rclc_executor_add_service>:
 800e3f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3fa:	9d06      	ldr	r5, [sp, #24]
 800e3fc:	4604      	mov	r4, r0
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	bf18      	it	ne
 800e402:	2d00      	cmpne	r5, #0
 800e404:	bf0c      	ite	eq
 800e406:	2001      	moveq	r0, #1
 800e408:	2000      	movne	r0, #0
 800e40a:	2a00      	cmp	r2, #0
 800e40c:	bf08      	it	eq
 800e40e:	f040 0001 	orreq.w	r0, r0, #1
 800e412:	2900      	cmp	r1, #0
 800e414:	bf08      	it	eq
 800e416:	f040 0001 	orreq.w	r0, r0, #1
 800e41a:	bb40      	cbnz	r0, 800e46e <rclc_executor_add_service+0x76>
 800e41c:	fab4 f684 	clz	r6, r4
 800e420:	0976      	lsrs	r6, r6, #5
 800e422:	b324      	cbz	r4, 800e46e <rclc_executor_add_service+0x76>
 800e424:	e9d4 7003 	ldrd	r7, r0, [r4, #12]
 800e428:	42b8      	cmp	r0, r7
 800e42a:	d301      	bcc.n	800e430 <rclc_executor_add_service+0x38>
 800e42c:	2001      	movs	r0, #1
 800e42e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e430:	68a7      	ldr	r7, [r4, #8]
 800e432:	ea4f 1e80 	mov.w	lr, r0, lsl #6
 800e436:	f100 0c01 	add.w	ip, r0, #1
 800e43a:	eb07 1080 	add.w	r0, r7, r0, lsl #6
 800e43e:	6283      	str	r3, [r0, #40]	; 0x28
 800e440:	2305      	movs	r3, #5
 800e442:	6305      	str	r5, [r0, #48]	; 0x30
 800e444:	f104 0518 	add.w	r5, r4, #24
 800e448:	e9c0 1201 	strd	r1, r2, [r0, #4]
 800e44c:	f827 300e 	strh.w	r3, [r7, lr]
 800e450:	2301      	movs	r3, #1
 800e452:	62c6      	str	r6, [r0, #44]	; 0x2c
 800e454:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 800e458:	4628      	mov	r0, r5
 800e45a:	f8c4 c010 	str.w	ip, [r4, #16]
 800e45e:	f009 f8b5 	bl	80175cc <rcl_wait_set_is_valid>
 800e462:	b930      	cbnz	r0, 800e472 <rclc_executor_add_service+0x7a>
 800e464:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e466:	2000      	movs	r0, #0
 800e468:	3301      	adds	r3, #1
 800e46a:	65a3      	str	r3, [r4, #88]	; 0x58
 800e46c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e46e:	200b      	movs	r0, #11
 800e470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e472:	4628      	mov	r0, r5
 800e474:	f009 f8b0 	bl	80175d8 <rcl_wait_set_fini>
 800e478:	2800      	cmp	r0, #0
 800e47a:	d0f3      	beq.n	800e464 <rclc_executor_add_service+0x6c>
 800e47c:	e7d7      	b.n	800e42e <rclc_executor_add_service+0x36>
 800e47e:	bf00      	nop

0800e480 <rclc_executor_prepare>:
 800e480:	2800      	cmp	r0, #0
 800e482:	d044      	beq.n	800e50e <rclc_executor_prepare+0x8e>
 800e484:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e486:	f100 0518 	add.w	r5, r0, #24
 800e48a:	b09b      	sub	sp, #108	; 0x6c
 800e48c:	4604      	mov	r4, r0
 800e48e:	4628      	mov	r0, r5
 800e490:	f009 f89c 	bl	80175cc <rcl_wait_set_is_valid>
 800e494:	b110      	cbz	r0, 800e49c <rclc_executor_prepare+0x1c>
 800e496:	2000      	movs	r0, #0
 800e498:	b01b      	add	sp, #108	; 0x6c
 800e49a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e49c:	4628      	mov	r0, r5
 800e49e:	f009 f89b 	bl	80175d8 <rcl_wait_set_fini>
 800e4a2:	2800      	cmp	r0, #0
 800e4a4:	d130      	bne.n	800e508 <rclc_executor_prepare+0x88>
 800e4a6:	a80c      	add	r0, sp, #48	; 0x30
 800e4a8:	ae04      	add	r6, sp, #16
 800e4aa:	f009 f87b 	bl	80175a4 <rcl_get_zero_initialized_wait_set>
 800e4ae:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 800e4b2:	46ae      	mov	lr, r5
 800e4b4:	6967      	ldr	r7, [r4, #20]
 800e4b6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e4ba:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e4be:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e4c2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e4c6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e4ca:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e4ce:	f8dc 3000 	ldr.w	r3, [ip]
 800e4d2:	f8ce 3000 	str.w	r3, [lr]
 800e4d6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800e4d8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800e4da:	683b      	ldr	r3, [r7, #0]
 800e4dc:	4628      	mov	r0, r5
 800e4de:	6862      	ldr	r2, [r4, #4]
 800e4e0:	6033      	str	r3, [r6, #0]
 800e4e2:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800e4e4:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800e4e6:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800e4ea:	e9d4 3214 	ldrd	r3, r2, [r4, #80]	; 0x50
 800e4ee:	e9cd 2100 	strd	r2, r1, [sp]
 800e4f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e4f4:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800e4f6:	f009 fb6f 	bl	8017bd8 <rcl_wait_set_init>
 800e4fa:	2800      	cmp	r0, #0
 800e4fc:	d0cc      	beq.n	800e498 <rclc_executor_prepare+0x18>
 800e4fe:	900b      	str	r0, [sp, #44]	; 0x2c
 800e500:	f000 fbba 	bl	800ec78 <rcutils_reset_error>
 800e504:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800e506:	e7c7      	b.n	800e498 <rclc_executor_prepare+0x18>
 800e508:	f000 fbb6 	bl	800ec78 <rcutils_reset_error>
 800e50c:	e7cb      	b.n	800e4a6 <rclc_executor_prepare+0x26>
 800e50e:	200b      	movs	r0, #11
 800e510:	4770      	bx	lr
 800e512:	bf00      	nop

0800e514 <rclc_executor_spin_some.part.0>:
 800e514:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e518:	4605      	mov	r5, r0
 800e51a:	4691      	mov	r9, r2
 800e51c:	4698      	mov	r8, r3
 800e51e:	f7ff ffaf 	bl	800e480 <rclc_executor_prepare>
 800e522:	f105 0618 	add.w	r6, r5, #24
 800e526:	4630      	mov	r0, r6
 800e528:	f009 f922 	bl	8017770 <rcl_wait_set_clear>
 800e52c:	4607      	mov	r7, r0
 800e52e:	2800      	cmp	r0, #0
 800e530:	f040 80a8 	bne.w	800e684 <rclc_executor_spin_some.part.0+0x170>
 800e534:	68eb      	ldr	r3, [r5, #12]
 800e536:	b30b      	cbz	r3, 800e57c <rclc_executor_spin_some.part.0+0x68>
 800e538:	4604      	mov	r4, r0
 800e53a:	68a9      	ldr	r1, [r5, #8]
 800e53c:	01a2      	lsls	r2, r4, #6
 800e53e:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800e542:	f89c 3038 	ldrb.w	r3, [ip, #56]	; 0x38
 800e546:	b1cb      	cbz	r3, 800e57c <rclc_executor_spin_some.part.0+0x68>
 800e548:	5c8b      	ldrb	r3, [r1, r2]
 800e54a:	2b0a      	cmp	r3, #10
 800e54c:	f200 80de 	bhi.w	800e70c <rclc_executor_spin_some.part.0+0x1f8>
 800e550:	e8df f003 	tbb	[pc, r3]
 800e554:	8da99d9d 	.word	0x8da99d9d
 800e558:	0606068d 	.word	0x0606068d
 800e55c:	c1ce      	.short	0xc1ce
 800e55e:	b5          	.byte	0xb5
 800e55f:	00          	.byte	0x00
 800e560:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800e564:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800e568:	4630      	mov	r0, r6
 800e56a:	f009 fc51 	bl	8017e10 <rcl_wait_set_add_service>
 800e56e:	2800      	cmp	r0, #0
 800e570:	f040 8087 	bne.w	800e682 <rclc_executor_spin_some.part.0+0x16e>
 800e574:	3401      	adds	r4, #1
 800e576:	68eb      	ldr	r3, [r5, #12]
 800e578:	429c      	cmp	r4, r3
 800e57a:	d3de      	bcc.n	800e53a <rclc_executor_spin_some.part.0+0x26>
 800e57c:	4643      	mov	r3, r8
 800e57e:	464a      	mov	r2, r9
 800e580:	4630      	mov	r0, r6
 800e582:	f009 fc71 	bl	8017e68 <rcl_wait>
 800e586:	f895 3088 	ldrb.w	r3, [r5, #136]	; 0x88
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	f000 80c6 	beq.w	800e71c <rclc_executor_spin_some.part.0+0x208>
 800e590:	2b01      	cmp	r3, #1
 800e592:	f040 80bb 	bne.w	800e70c <rclc_executor_spin_some.part.0+0x1f8>
 800e596:	68eb      	ldr	r3, [r5, #12]
 800e598:	2b00      	cmp	r3, #0
 800e59a:	f000 8159 	beq.w	800e850 <rclc_executor_spin_some.part.0+0x33c>
 800e59e:	2400      	movs	r4, #0
 800e5a0:	f240 1991 	movw	r9, #401	; 0x191
 800e5a4:	46a0      	mov	r8, r4
 800e5a6:	e00a      	b.n	800e5be <rclc_executor_spin_some.part.0+0xaa>
 800e5a8:	f7ff faea 	bl	800db80 <_rclc_check_for_new_data>
 800e5ac:	4604      	mov	r4, r0
 800e5ae:	b110      	cbz	r0, 800e5b6 <rclc_executor_spin_some.part.0+0xa2>
 800e5b0:	4548      	cmp	r0, r9
 800e5b2:	f040 80b1 	bne.w	800e718 <rclc_executor_spin_some.part.0+0x204>
 800e5b6:	68eb      	ldr	r3, [r5, #12]
 800e5b8:	4598      	cmp	r8, r3
 800e5ba:	f080 8126 	bcs.w	800e80a <rclc_executor_spin_some.part.0+0x2f6>
 800e5be:	68aa      	ldr	r2, [r5, #8]
 800e5c0:	4631      	mov	r1, r6
 800e5c2:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800e5c6:	f108 0801 	add.w	r8, r8, #1
 800e5ca:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 800e5ce:	f1bc 0f00 	cmp.w	ip, #0
 800e5d2:	d1e9      	bne.n	800e5a8 <rclc_executor_spin_some.part.0+0x94>
 800e5d4:	4619      	mov	r1, r3
 800e5d6:	4610      	mov	r0, r2
 800e5d8:	e9d5 3220 	ldrd	r3, r2, [r5, #128]	; 0x80
 800e5dc:	4798      	blx	r3
 800e5de:	2800      	cmp	r0, #0
 800e5e0:	f000 809a 	beq.w	800e718 <rclc_executor_spin_some.part.0+0x204>
 800e5e4:	68eb      	ldr	r3, [r5, #12]
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	f000 8096 	beq.w	800e718 <rclc_executor_spin_some.part.0+0x204>
 800e5ec:	f04f 0800 	mov.w	r8, #0
 800e5f0:	f240 1991 	movw	r9, #401	; 0x191
 800e5f4:	e009      	b.n	800e60a <rclc_executor_spin_some.part.0+0xf6>
 800e5f6:	f7ff fb11 	bl	800dc1c <_rclc_take_new_data>
 800e5fa:	4604      	mov	r4, r0
 800e5fc:	b110      	cbz	r0, 800e604 <rclc_executor_spin_some.part.0+0xf0>
 800e5fe:	4548      	cmp	r0, r9
 800e600:	f040 808a 	bne.w	800e718 <rclc_executor_spin_some.part.0+0x204>
 800e604:	68eb      	ldr	r3, [r5, #12]
 800e606:	4598      	cmp	r8, r3
 800e608:	d209      	bcs.n	800e61e <rclc_executor_spin_some.part.0+0x10a>
 800e60a:	68a8      	ldr	r0, [r5, #8]
 800e60c:	4631      	mov	r1, r6
 800e60e:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800e612:	f108 0801 	add.w	r8, r8, #1
 800e616:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 800e61a:	2a00      	cmp	r2, #0
 800e61c:	d1eb      	bne.n	800e5f6 <rclc_executor_spin_some.part.0+0xe2>
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d07a      	beq.n	800e718 <rclc_executor_spin_some.part.0+0x204>
 800e622:	2600      	movs	r6, #0
 800e624:	e00e      	b.n	800e644 <rclc_executor_spin_some.part.0+0x130>
 800e626:	f812 200c 	ldrb.w	r2, [r2, ip]
 800e62a:	2a08      	cmp	r2, #8
 800e62c:	f000 80fc 	beq.w	800e828 <rclc_executor_spin_some.part.0+0x314>
 800e630:	2a09      	cmp	r2, #9
 800e632:	f000 80ee 	beq.w	800e812 <rclc_executor_spin_some.part.0+0x2fe>
 800e636:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
 800e63a:	b98a      	cbnz	r2, 800e660 <rclc_executor_spin_some.part.0+0x14c>
 800e63c:	3601      	adds	r6, #1
 800e63e:	429e      	cmp	r6, r3
 800e640:	d267      	bcs.n	800e712 <rclc_executor_spin_some.part.0+0x1fe>
 800e642:	2400      	movs	r4, #0
 800e644:	68aa      	ldr	r2, [r5, #8]
 800e646:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800e64a:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800e64e:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
 800e652:	2900      	cmp	r1, #0
 800e654:	d060      	beq.n	800e718 <rclc_executor_spin_some.part.0+0x204>
 800e656:	7841      	ldrb	r1, [r0, #1]
 800e658:	2900      	cmp	r1, #0
 800e65a:	d0e4      	beq.n	800e626 <rclc_executor_spin_some.part.0+0x112>
 800e65c:	2901      	cmp	r1, #1
 800e65e:	d1ed      	bne.n	800e63c <rclc_executor_spin_some.part.0+0x128>
 800e660:	f7ff fc50 	bl	800df04 <_rclc_execute.part.0>
 800e664:	2800      	cmp	r0, #0
 800e666:	f040 80b5 	bne.w	800e7d4 <rclc_executor_spin_some.part.0+0x2c0>
 800e66a:	68eb      	ldr	r3, [r5, #12]
 800e66c:	e7e6      	b.n	800e63c <rclc_executor_spin_some.part.0+0x128>
 800e66e:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800e672:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800e676:	4630      	mov	r0, r6
 800e678:	f009 fb9e 	bl	8017db8 <rcl_wait_set_add_client>
 800e67c:	2800      	cmp	r0, #0
 800e67e:	f43f af79 	beq.w	800e574 <rclc_executor_spin_some.part.0+0x60>
 800e682:	4607      	mov	r7, r0
 800e684:	f000 faf8 	bl	800ec78 <rcutils_reset_error>
 800e688:	4638      	mov	r0, r7
 800e68a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e68e:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800e692:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800e696:	4630      	mov	r0, r6
 800e698:	f009 f83e 	bl	8017718 <rcl_wait_set_add_subscription>
 800e69c:	2800      	cmp	r0, #0
 800e69e:	f43f af69 	beq.w	800e574 <rclc_executor_spin_some.part.0+0x60>
 800e6a2:	4607      	mov	r7, r0
 800e6a4:	e7ee      	b.n	800e684 <rclc_executor_spin_some.part.0+0x170>
 800e6a6:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800e6aa:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800e6ae:	4630      	mov	r0, r6
 800e6b0:	f009 fb52 	bl	8017d58 <rcl_wait_set_add_timer>
 800e6b4:	2800      	cmp	r0, #0
 800e6b6:	f43f af5d 	beq.w	800e574 <rclc_executor_spin_some.part.0+0x60>
 800e6ba:	4607      	mov	r7, r0
 800e6bc:	e7e2      	b.n	800e684 <rclc_executor_spin_some.part.0+0x170>
 800e6be:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800e6c2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800e6c6:	4630      	mov	r0, r6
 800e6c8:	f009 fb1a 	bl	8017d00 <rcl_wait_set_add_guard_condition>
 800e6cc:	2800      	cmp	r0, #0
 800e6ce:	f43f af51 	beq.w	800e574 <rclc_executor_spin_some.part.0+0x60>
 800e6d2:	4607      	mov	r7, r0
 800e6d4:	e7d6      	b.n	800e684 <rclc_executor_spin_some.part.0+0x170>
 800e6d6:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800e6da:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800e6de:	4630      	mov	r0, r6
 800e6e0:	3110      	adds	r1, #16
 800e6e2:	f00a f895 	bl	8018810 <rcl_action_wait_set_add_action_server>
 800e6e6:	2800      	cmp	r0, #0
 800e6e8:	f43f af44 	beq.w	800e574 <rclc_executor_spin_some.part.0+0x60>
 800e6ec:	4607      	mov	r7, r0
 800e6ee:	e7c9      	b.n	800e684 <rclc_executor_spin_some.part.0+0x170>
 800e6f0:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800e6f4:	2300      	movs	r3, #0
 800e6f6:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800e6fa:	4630      	mov	r0, r6
 800e6fc:	3110      	adds	r1, #16
 800e6fe:	f009 fe5f 	bl	80183c0 <rcl_action_wait_set_add_action_client>
 800e702:	2800      	cmp	r0, #0
 800e704:	f43f af36 	beq.w	800e574 <rclc_executor_spin_some.part.0+0x60>
 800e708:	4607      	mov	r7, r0
 800e70a:	e7bb      	b.n	800e684 <rclc_executor_spin_some.part.0+0x170>
 800e70c:	2701      	movs	r7, #1
 800e70e:	f000 fab3 	bl	800ec78 <rcutils_reset_error>
 800e712:	4638      	mov	r0, r7
 800e714:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e718:	4627      	mov	r7, r4
 800e71a:	e7fa      	b.n	800e712 <rclc_executor_spin_some.part.0+0x1fe>
 800e71c:	68eb      	ldr	r3, [r5, #12]
 800e71e:	2b00      	cmp	r3, #0
 800e720:	f000 8093 	beq.w	800e84a <rclc_executor_spin_some.part.0+0x336>
 800e724:	2400      	movs	r4, #0
 800e726:	f240 1991 	movw	r9, #401	; 0x191
 800e72a:	46a0      	mov	r8, r4
 800e72c:	e008      	b.n	800e740 <rclc_executor_spin_some.part.0+0x22c>
 800e72e:	f7ff fa27 	bl	800db80 <_rclc_check_for_new_data>
 800e732:	4604      	mov	r4, r0
 800e734:	b108      	cbz	r0, 800e73a <rclc_executor_spin_some.part.0+0x226>
 800e736:	4548      	cmp	r0, r9
 800e738:	d1ee      	bne.n	800e718 <rclc_executor_spin_some.part.0+0x204>
 800e73a:	68eb      	ldr	r3, [r5, #12]
 800e73c:	4598      	cmp	r8, r3
 800e73e:	d266      	bcs.n	800e80e <rclc_executor_spin_some.part.0+0x2fa>
 800e740:	68aa      	ldr	r2, [r5, #8]
 800e742:	4631      	mov	r1, r6
 800e744:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800e748:	f108 0801 	add.w	r8, r8, #1
 800e74c:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 800e750:	f1bc 0f00 	cmp.w	ip, #0
 800e754:	d1eb      	bne.n	800e72e <rclc_executor_spin_some.part.0+0x21a>
 800e756:	4619      	mov	r1, r3
 800e758:	4610      	mov	r0, r2
 800e75a:	e9d5 3220 	ldrd	r3, r2, [r5, #128]	; 0x80
 800e75e:	4798      	blx	r3
 800e760:	2800      	cmp	r0, #0
 800e762:	d0d9      	beq.n	800e718 <rclc_executor_spin_some.part.0+0x204>
 800e764:	68eb      	ldr	r3, [r5, #12]
 800e766:	2b00      	cmp	r3, #0
 800e768:	d0d6      	beq.n	800e718 <rclc_executor_spin_some.part.0+0x204>
 800e76a:	f04f 0a00 	mov.w	sl, #0
 800e76e:	f240 1891 	movw	r8, #401	; 0x191
 800e772:	f240 2959 	movw	r9, #601	; 0x259
 800e776:	e00e      	b.n	800e796 <rclc_executor_spin_some.part.0+0x282>
 800e778:	f813 300b 	ldrb.w	r3, [r3, fp]
 800e77c:	2b08      	cmp	r3, #8
 800e77e:	d034      	beq.n	800e7ea <rclc_executor_spin_some.part.0+0x2d6>
 800e780:	2b09      	cmp	r3, #9
 800e782:	d029      	beq.n	800e7d8 <rclc_executor_spin_some.part.0+0x2c4>
 800e784:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800e788:	bb03      	cbnz	r3, 800e7cc <rclc_executor_spin_some.part.0+0x2b8>
 800e78a:	f10a 0a01 	add.w	sl, sl, #1
 800e78e:	68eb      	ldr	r3, [r5, #12]
 800e790:	459a      	cmp	sl, r3
 800e792:	d2be      	bcs.n	800e712 <rclc_executor_spin_some.part.0+0x1fe>
 800e794:	2400      	movs	r4, #0
 800e796:	68a8      	ldr	r0, [r5, #8]
 800e798:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 800e79c:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 800e7a0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d0b7      	beq.n	800e718 <rclc_executor_spin_some.part.0+0x204>
 800e7a8:	4631      	mov	r1, r6
 800e7aa:	f7ff fa37 	bl	800dc1c <_rclc_take_new_data>
 800e7ae:	2800      	cmp	r0, #0
 800e7b0:	bf18      	it	ne
 800e7b2:	4540      	cmpne	r0, r8
 800e7b4:	d001      	beq.n	800e7ba <rclc_executor_spin_some.part.0+0x2a6>
 800e7b6:	4548      	cmp	r0, r9
 800e7b8:	d10c      	bne.n	800e7d4 <rclc_executor_spin_some.part.0+0x2c0>
 800e7ba:	68ab      	ldr	r3, [r5, #8]
 800e7bc:	eb13 000b 	adds.w	r0, r3, fp
 800e7c0:	d021      	beq.n	800e806 <rclc_executor_spin_some.part.0+0x2f2>
 800e7c2:	7842      	ldrb	r2, [r0, #1]
 800e7c4:	2a00      	cmp	r2, #0
 800e7c6:	d0d7      	beq.n	800e778 <rclc_executor_spin_some.part.0+0x264>
 800e7c8:	2a01      	cmp	r2, #1
 800e7ca:	d1de      	bne.n	800e78a <rclc_executor_spin_some.part.0+0x276>
 800e7cc:	f7ff fb9a 	bl	800df04 <_rclc_execute.part.0>
 800e7d0:	2800      	cmp	r0, #0
 800e7d2:	d0da      	beq.n	800e78a <rclc_executor_spin_some.part.0+0x276>
 800e7d4:	4607      	mov	r7, r0
 800e7d6:	e79c      	b.n	800e712 <rclc_executor_spin_some.part.0+0x1fe>
 800e7d8:	6843      	ldr	r3, [r0, #4]
 800e7da:	6a1a      	ldr	r2, [r3, #32]
 800e7dc:	2a00      	cmp	r2, #0
 800e7de:	d1f5      	bne.n	800e7cc <rclc_executor_spin_some.part.0+0x2b8>
 800e7e0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d0d0      	beq.n	800e78a <rclc_executor_spin_some.part.0+0x276>
 800e7e8:	e7f0      	b.n	800e7cc <rclc_executor_spin_some.part.0+0x2b8>
 800e7ea:	6843      	ldr	r3, [r0, #4]
 800e7ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e7ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800e7f2:	d1eb      	bne.n	800e7cc <rclc_executor_spin_some.part.0+0x2b8>
 800e7f4:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800e7f8:	2a00      	cmp	r2, #0
 800e7fa:	d1e7      	bne.n	800e7cc <rclc_executor_spin_some.part.0+0x2b8>
 800e7fc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e800:	2b00      	cmp	r3, #0
 800e802:	d0c2      	beq.n	800e78a <rclc_executor_spin_some.part.0+0x276>
 800e804:	e7e2      	b.n	800e7cc <rclc_executor_spin_some.part.0+0x2b8>
 800e806:	270b      	movs	r7, #11
 800e808:	e783      	b.n	800e712 <rclc_executor_spin_some.part.0+0x1fe>
 800e80a:	68aa      	ldr	r2, [r5, #8]
 800e80c:	e6e2      	b.n	800e5d4 <rclc_executor_spin_some.part.0+0xc0>
 800e80e:	68aa      	ldr	r2, [r5, #8]
 800e810:	e7a1      	b.n	800e756 <rclc_executor_spin_some.part.0+0x242>
 800e812:	6842      	ldr	r2, [r0, #4]
 800e814:	6a11      	ldr	r1, [r2, #32]
 800e816:	2900      	cmp	r1, #0
 800e818:	f47f af22 	bne.w	800e660 <rclc_executor_spin_some.part.0+0x14c>
 800e81c:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800e820:	2a00      	cmp	r2, #0
 800e822:	f43f af0b 	beq.w	800e63c <rclc_executor_spin_some.part.0+0x128>
 800e826:	e71b      	b.n	800e660 <rclc_executor_spin_some.part.0+0x14c>
 800e828:	6842      	ldr	r2, [r0, #4]
 800e82a:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800e82c:	f031 417f 	bics.w	r1, r1, #4278190080	; 0xff000000
 800e830:	f47f af16 	bne.w	800e660 <rclc_executor_spin_some.part.0+0x14c>
 800e834:	f892 1044 	ldrb.w	r1, [r2, #68]	; 0x44
 800e838:	2900      	cmp	r1, #0
 800e83a:	f47f af11 	bne.w	800e660 <rclc_executor_spin_some.part.0+0x14c>
 800e83e:	f892 2043 	ldrb.w	r2, [r2, #67]	; 0x43
 800e842:	2a00      	cmp	r2, #0
 800e844:	f43f aefa 	beq.w	800e63c <rclc_executor_spin_some.part.0+0x128>
 800e848:	e70a      	b.n	800e660 <rclc_executor_spin_some.part.0+0x14c>
 800e84a:	68aa      	ldr	r2, [r5, #8]
 800e84c:	461c      	mov	r4, r3
 800e84e:	e782      	b.n	800e756 <rclc_executor_spin_some.part.0+0x242>
 800e850:	68aa      	ldr	r2, [r5, #8]
 800e852:	461c      	mov	r4, r3
 800e854:	e6be      	b.n	800e5d4 <rclc_executor_spin_some.part.0+0xc0>
 800e856:	bf00      	nop

0800e858 <rclc_executor_spin>:
 800e858:	b1d0      	cbz	r0, 800e890 <rclc_executor_spin+0x38>
 800e85a:	b510      	push	{r4, lr}
 800e85c:	4604      	mov	r4, r0
 800e85e:	b082      	sub	sp, #8
 800e860:	e004      	b.n	800e86c <rclc_executor_spin+0x14>
 800e862:	f7ff fe57 	bl	800e514 <rclc_executor_spin_some.part.0>
 800e866:	f030 0302 	bics.w	r3, r0, #2
 800e86a:	d10f      	bne.n	800e88c <rclc_executor_spin+0x34>
 800e86c:	6860      	ldr	r0, [r4, #4]
 800e86e:	e9d4 231c 	ldrd	r2, r3, [r4, #112]	; 0x70
 800e872:	e9cd 2300 	strd	r2, r3, [sp]
 800e876:	f007 f8b7 	bl	80159e8 <rcl_context_is_valid>
 800e87a:	4601      	mov	r1, r0
 800e87c:	4620      	mov	r0, r4
 800e87e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e882:	2900      	cmp	r1, #0
 800e884:	d1ed      	bne.n	800e862 <rclc_executor_spin+0xa>
 800e886:	f000 f9f7 	bl	800ec78 <rcutils_reset_error>
 800e88a:	2001      	movs	r0, #1
 800e88c:	b002      	add	sp, #8
 800e88e:	bd10      	pop	{r4, pc}
 800e890:	200b      	movs	r0, #11
 800e892:	4770      	bx	lr

0800e894 <rclc_executor_handle_counters_zero_init>:
 800e894:	b130      	cbz	r0, 800e8a4 <rclc_executor_handle_counters_zero_init+0x10>
 800e896:	2220      	movs	r2, #32
 800e898:	2100      	movs	r1, #0
 800e89a:	b508      	push	{r3, lr}
 800e89c:	f00f f97a 	bl	801db94 <memset>
 800e8a0:	2000      	movs	r0, #0
 800e8a2:	bd08      	pop	{r3, pc}
 800e8a4:	200b      	movs	r0, #11
 800e8a6:	4770      	bx	lr

0800e8a8 <rclc_executor_handle_init>:
 800e8a8:	4603      	mov	r3, r0
 800e8aa:	b178      	cbz	r0, 800e8cc <rclc_executor_handle_init+0x24>
 800e8ac:	2200      	movs	r2, #0
 800e8ae:	f04f 0c0b 	mov.w	ip, #11
 800e8b2:	6341      	str	r1, [r0, #52]	; 0x34
 800e8b4:	4610      	mov	r0, r2
 800e8b6:	f8a3 c000 	strh.w	ip, [r3]
 800e8ba:	631a      	str	r2, [r3, #48]	; 0x30
 800e8bc:	871a      	strh	r2, [r3, #56]	; 0x38
 800e8be:	ed9f 7b04 	vldr	d7, [pc, #16]	; 800e8d0 <rclc_executor_handle_init+0x28>
 800e8c2:	e9c3 2201 	strd	r2, r2, [r3, #4]
 800e8c6:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
 800e8ca:	4770      	bx	lr
 800e8cc:	200b      	movs	r0, #11
 800e8ce:	4770      	bx	lr
	...

0800e8d8 <rclc_support_init>:
 800e8d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8dc:	b086      	sub	sp, #24
 800e8de:	b3bb      	cbz	r3, 800e950 <rclc_support_init+0x78>
 800e8e0:	4606      	mov	r6, r0
 800e8e2:	b3a8      	cbz	r0, 800e950 <rclc_support_init+0x78>
 800e8e4:	461c      	mov	r4, r3
 800e8e6:	460f      	mov	r7, r1
 800e8e8:	4690      	mov	r8, r2
 800e8ea:	f007 fa1d 	bl	8015d28 <rcl_get_zero_initialized_init_options>
 800e8ee:	f104 050c 	add.w	r5, r4, #12
 800e8f2:	9005      	str	r0, [sp, #20]
 800e8f4:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e8f8:	e88d 0003 	stmia.w	sp, {r0, r1}
 800e8fc:	a805      	add	r0, sp, #20
 800e8fe:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800e902:	f007 fa13 	bl	8015d2c <rcl_init_options_init>
 800e906:	4605      	mov	r5, r0
 800e908:	b9e0      	cbnz	r0, 800e944 <rclc_support_init+0x6c>
 800e90a:	ad02      	add	r5, sp, #8
 800e90c:	4628      	mov	r0, r5
 800e90e:	f007 f861 	bl	80159d4 <rcl_get_zero_initialized_context>
 800e912:	4633      	mov	r3, r6
 800e914:	aa05      	add	r2, sp, #20
 800e916:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e91a:	e886 0003 	stmia.w	r6, {r0, r1}
 800e91e:	4641      	mov	r1, r8
 800e920:	4638      	mov	r0, r7
 800e922:	f007 f8c7 	bl	8015ab4 <rcl_init>
 800e926:	4605      	mov	r5, r0
 800e928:	b9b8      	cbnz	r0, 800e95a <rclc_support_init+0x82>
 800e92a:	4622      	mov	r2, r4
 800e92c:	f106 010c 	add.w	r1, r6, #12
 800e930:	2003      	movs	r0, #3
 800e932:	60b4      	str	r4, [r6, #8]
 800e934:	f008 fa10 	bl	8016d58 <rcl_clock_init>
 800e938:	4605      	mov	r5, r0
 800e93a:	b970      	cbnz	r0, 800e95a <rclc_support_init+0x82>
 800e93c:	a805      	add	r0, sp, #20
 800e93e:	f007 fa51 	bl	8015de4 <rcl_init_options_fini>
 800e942:	b108      	cbz	r0, 800e948 <rclc_support_init+0x70>
 800e944:	f000 f998 	bl	800ec78 <rcutils_reset_error>
 800e948:	4628      	mov	r0, r5
 800e94a:	b006      	add	sp, #24
 800e94c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e950:	250b      	movs	r5, #11
 800e952:	4628      	mov	r0, r5
 800e954:	b006      	add	sp, #24
 800e956:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e95a:	f000 f98d 	bl	800ec78 <rcutils_reset_error>
 800e95e:	a805      	add	r0, sp, #20
 800e960:	f007 fa40 	bl	8015de4 <rcl_init_options_fini>
 800e964:	2800      	cmp	r0, #0
 800e966:	d0ef      	beq.n	800e948 <rclc_support_init+0x70>
 800e968:	e7ec      	b.n	800e944 <rclc_support_init+0x6c>
 800e96a:	bf00      	nop

0800e96c <rclc_node_init_default>:
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	bf18      	it	ne
 800e970:	2a00      	cmpne	r2, #0
 800e972:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e976:	4616      	mov	r6, r2
 800e978:	bf0c      	ite	eq
 800e97a:	2201      	moveq	r2, #1
 800e97c:	2200      	movne	r2, #0
 800e97e:	b0a3      	sub	sp, #140	; 0x8c
 800e980:	2900      	cmp	r1, #0
 800e982:	bf08      	it	eq
 800e984:	f042 0201 	orreq.w	r2, r2, #1
 800e988:	bb22      	cbnz	r2, 800e9d4 <rclc_node_init_default+0x68>
 800e98a:	4604      	mov	r4, r0
 800e98c:	b310      	cbz	r0, 800e9d4 <rclc_node_init_default+0x68>
 800e98e:	f10d 0810 	add.w	r8, sp, #16
 800e992:	461f      	mov	r7, r3
 800e994:	460d      	mov	r5, r1
 800e996:	f10d 0918 	add.w	r9, sp, #24
 800e99a:	4640      	mov	r0, r8
 800e99c:	f007 face 	bl	8015f3c <rcl_get_zero_initialized_node>
 800e9a0:	e898 0003 	ldmia.w	r8, {r0, r1}
 800e9a4:	e884 0003 	stmia.w	r4, {r0, r1}
 800e9a8:	4648      	mov	r0, r9
 800e9aa:	f007 fc61 	bl	8016270 <rcl_node_get_default_options>
 800e9ae:	4640      	mov	r0, r8
 800e9b0:	f007 fac4 	bl	8015f3c <rcl_get_zero_initialized_node>
 800e9b4:	f8cd 9000 	str.w	r9, [sp]
 800e9b8:	463b      	mov	r3, r7
 800e9ba:	4632      	mov	r2, r6
 800e9bc:	e898 0003 	ldmia.w	r8, {r0, r1}
 800e9c0:	e884 0003 	stmia.w	r4, {r0, r1}
 800e9c4:	4629      	mov	r1, r5
 800e9c6:	4620      	mov	r0, r4
 800e9c8:	f007 fac2 	bl	8015f50 <rcl_node_init>
 800e9cc:	b930      	cbnz	r0, 800e9dc <rclc_node_init_default+0x70>
 800e9ce:	b023      	add	sp, #140	; 0x8c
 800e9d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e9d4:	200b      	movs	r0, #11
 800e9d6:	b023      	add	sp, #140	; 0x8c
 800e9d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e9dc:	9003      	str	r0, [sp, #12]
 800e9de:	f000 f94b 	bl	800ec78 <rcutils_reset_error>
 800e9e2:	f000 f949 	bl	800ec78 <rcutils_reset_error>
 800e9e6:	9803      	ldr	r0, [sp, #12]
 800e9e8:	b023      	add	sp, #140	; 0x8c
 800e9ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e9ee:	bf00      	nop

0800e9f0 <rclc_publisher_init_best_effort>:
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	bf18      	it	ne
 800e9f4:	2a00      	cmpne	r2, #0
 800e9f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9fa:	4616      	mov	r6, r2
 800e9fc:	bf0c      	ite	eq
 800e9fe:	2201      	moveq	r2, #1
 800ea00:	2200      	movne	r2, #0
 800ea02:	b0a0      	sub	sp, #128	; 0x80
 800ea04:	2900      	cmp	r1, #0
 800ea06:	bf08      	it	eq
 800ea08:	f042 0201 	orreq.w	r2, r2, #1
 800ea0c:	bb1a      	cbnz	r2, 800ea56 <rclc_publisher_init_best_effort+0x66>
 800ea0e:	4604      	mov	r4, r0
 800ea10:	b308      	cbz	r0, 800ea56 <rclc_publisher_init_best_effort+0x66>
 800ea12:	f10d 0810 	add.w	r8, sp, #16
 800ea16:	461f      	mov	r7, r3
 800ea18:	460d      	mov	r5, r1
 800ea1a:	f7fe ff89 	bl	800d930 <rcl_get_zero_initialized_publisher>
 800ea1e:	6020      	str	r0, [r4, #0]
 800ea20:	4640      	mov	r0, r8
 800ea22:	f7ff f827 	bl	800da74 <rcl_publisher_get_default_options>
 800ea26:	2250      	movs	r2, #80	; 0x50
 800ea28:	490d      	ldr	r1, [pc, #52]	; (800ea60 <rclc_publisher_init_best_effort+0x70>)
 800ea2a:	4640      	mov	r0, r8
 800ea2c:	f00f f9e3 	bl	801ddf6 <memcpy>
 800ea30:	463b      	mov	r3, r7
 800ea32:	4632      	mov	r2, r6
 800ea34:	4629      	mov	r1, r5
 800ea36:	4620      	mov	r0, r4
 800ea38:	f8cd 8000 	str.w	r8, [sp]
 800ea3c:	f7fe ff7e 	bl	800d93c <rcl_publisher_init>
 800ea40:	b910      	cbnz	r0, 800ea48 <rclc_publisher_init_best_effort+0x58>
 800ea42:	b020      	add	sp, #128	; 0x80
 800ea44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea48:	9003      	str	r0, [sp, #12]
 800ea4a:	f000 f915 	bl	800ec78 <rcutils_reset_error>
 800ea4e:	9803      	ldr	r0, [sp, #12]
 800ea50:	b020      	add	sp, #128	; 0x80
 800ea52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea56:	200b      	movs	r0, #11
 800ea58:	b020      	add	sp, #128	; 0x80
 800ea5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea5e:	bf00      	nop
 800ea60:	0801fae8 	.word	0x0801fae8

0800ea64 <rclc_service_init_default>:
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	bf18      	it	ne
 800ea68:	2a00      	cmpne	r2, #0
 800ea6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea6e:	4616      	mov	r6, r2
 800ea70:	bf0c      	ite	eq
 800ea72:	2201      	moveq	r2, #1
 800ea74:	2200      	movne	r2, #0
 800ea76:	b09e      	sub	sp, #120	; 0x78
 800ea78:	2900      	cmp	r1, #0
 800ea7a:	bf08      	it	eq
 800ea7c:	f042 0201 	orreq.w	r2, r2, #1
 800ea80:	bb1a      	cbnz	r2, 800eaca <rclc_service_init_default+0x66>
 800ea82:	4604      	mov	r4, r0
 800ea84:	b308      	cbz	r0, 800eaca <rclc_service_init_default+0x66>
 800ea86:	f10d 0810 	add.w	r8, sp, #16
 800ea8a:	461f      	mov	r7, r3
 800ea8c:	460d      	mov	r5, r1
 800ea8e:	f007 fdf3 	bl	8016678 <rcl_get_zero_initialized_service>
 800ea92:	6020      	str	r0, [r4, #0]
 800ea94:	4640      	mov	r0, r8
 800ea96:	f007 fe9d 	bl	80167d4 <rcl_service_get_default_options>
 800ea9a:	2250      	movs	r2, #80	; 0x50
 800ea9c:	490d      	ldr	r1, [pc, #52]	; (800ead4 <rclc_service_init_default+0x70>)
 800ea9e:	4640      	mov	r0, r8
 800eaa0:	f00f f9a9 	bl	801ddf6 <memcpy>
 800eaa4:	463b      	mov	r3, r7
 800eaa6:	4632      	mov	r2, r6
 800eaa8:	4629      	mov	r1, r5
 800eaaa:	4620      	mov	r0, r4
 800eaac:	f8cd 8000 	str.w	r8, [sp]
 800eab0:	f007 fde8 	bl	8016684 <rcl_service_init>
 800eab4:	b910      	cbnz	r0, 800eabc <rclc_service_init_default+0x58>
 800eab6:	b01e      	add	sp, #120	; 0x78
 800eab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eabc:	9003      	str	r0, [sp, #12]
 800eabe:	f000 f8db 	bl	800ec78 <rcutils_reset_error>
 800eac2:	9803      	ldr	r0, [sp, #12]
 800eac4:	b01e      	add	sp, #120	; 0x78
 800eac6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eaca:	200b      	movs	r0, #11
 800eacc:	b01e      	add	sp, #120	; 0x78
 800eace:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ead2:	bf00      	nop
 800ead4:	0801fb38 	.word	0x0801fb38

0800ead8 <rclc_subscription_init_best_effort>:
 800ead8:	2b00      	cmp	r3, #0
 800eada:	bf18      	it	ne
 800eadc:	2a00      	cmpne	r2, #0
 800eade:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eae2:	4616      	mov	r6, r2
 800eae4:	bf0c      	ite	eq
 800eae6:	2201      	moveq	r2, #1
 800eae8:	2200      	movne	r2, #0
 800eaea:	b0a2      	sub	sp, #136	; 0x88
 800eaec:	2900      	cmp	r1, #0
 800eaee:	bf08      	it	eq
 800eaf0:	f042 0201 	orreq.w	r2, r2, #1
 800eaf4:	bb1a      	cbnz	r2, 800eb3e <rclc_subscription_init_best_effort+0x66>
 800eaf6:	4604      	mov	r4, r0
 800eaf8:	b308      	cbz	r0, 800eb3e <rclc_subscription_init_best_effort+0x66>
 800eafa:	f10d 0810 	add.w	r8, sp, #16
 800eafe:	461f      	mov	r7, r3
 800eb00:	460d      	mov	r5, r1
 800eb02:	f007 ffb9 	bl	8016a78 <rcl_get_zero_initialized_subscription>
 800eb06:	6020      	str	r0, [r4, #0]
 800eb08:	4640      	mov	r0, r8
 800eb0a:	f008 f869 	bl	8016be0 <rcl_subscription_get_default_options>
 800eb0e:	2250      	movs	r2, #80	; 0x50
 800eb10:	490d      	ldr	r1, [pc, #52]	; (800eb48 <rclc_subscription_init_best_effort+0x70>)
 800eb12:	4640      	mov	r0, r8
 800eb14:	f00f f96f 	bl	801ddf6 <memcpy>
 800eb18:	463b      	mov	r3, r7
 800eb1a:	4632      	mov	r2, r6
 800eb1c:	4629      	mov	r1, r5
 800eb1e:	4620      	mov	r0, r4
 800eb20:	f8cd 8000 	str.w	r8, [sp]
 800eb24:	f007 ffae 	bl	8016a84 <rcl_subscription_init>
 800eb28:	b910      	cbnz	r0, 800eb30 <rclc_subscription_init_best_effort+0x58>
 800eb2a:	b022      	add	sp, #136	; 0x88
 800eb2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb30:	9003      	str	r0, [sp, #12]
 800eb32:	f000 f8a1 	bl	800ec78 <rcutils_reset_error>
 800eb36:	9803      	ldr	r0, [sp, #12]
 800eb38:	b022      	add	sp, #136	; 0x88
 800eb3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb3e:	200b      	movs	r0, #11
 800eb40:	b022      	add	sp, #136	; 0x88
 800eb42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb46:	bf00      	nop
 800eb48:	0801fb88 	.word	0x0801fb88

0800eb4c <rclc_timer_init_default>:
 800eb4c:	b361      	cbz	r1, 800eba8 <rclc_timer_init_default+0x5c>
 800eb4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb52:	4606      	mov	r6, r0
 800eb54:	b08a      	sub	sp, #40	; 0x28
 800eb56:	b318      	cbz	r0, 800eba0 <rclc_timer_init_default+0x54>
 800eb58:	460d      	mov	r5, r1
 800eb5a:	4690      	mov	r8, r2
 800eb5c:	461f      	mov	r7, r3
 800eb5e:	f008 faf3 	bl	8017148 <rcl_get_zero_initialized_timer>
 800eb62:	68ac      	ldr	r4, [r5, #8]
 800eb64:	f10d 0c0c 	add.w	ip, sp, #12
 800eb68:	6030      	str	r0, [r6, #0]
 800eb6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800eb6c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800eb70:	6823      	ldr	r3, [r4, #0]
 800eb72:	462a      	mov	r2, r5
 800eb74:	f105 010c 	add.w	r1, r5, #12
 800eb78:	4630      	mov	r0, r6
 800eb7a:	f8cc 3000 	str.w	r3, [ip]
 800eb7e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800eb80:	e9cd 8700 	strd	r8, r7, [sp]
 800eb84:	9302      	str	r3, [sp, #8]
 800eb86:	f008 fae5 	bl	8017154 <rcl_timer_init>
 800eb8a:	b910      	cbnz	r0, 800eb92 <rclc_timer_init_default+0x46>
 800eb8c:	b00a      	add	sp, #40	; 0x28
 800eb8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb92:	9009      	str	r0, [sp, #36]	; 0x24
 800eb94:	f000 f870 	bl	800ec78 <rcutils_reset_error>
 800eb98:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eb9a:	b00a      	add	sp, #40	; 0x28
 800eb9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eba0:	200b      	movs	r0, #11
 800eba2:	b00a      	add	sp, #40	; 0x28
 800eba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eba8:	200b      	movs	r0, #11
 800ebaa:	4770      	bx	lr

0800ebac <__default_zero_allocate>:
 800ebac:	f00e bc14 	b.w	801d3d8 <calloc>

0800ebb0 <__default_reallocate>:
 800ebb0:	f00e bda0 	b.w	801d6f4 <realloc>

0800ebb4 <__default_deallocate>:
 800ebb4:	f00e bc7e 	b.w	801d4b4 <free>

0800ebb8 <__default_allocate>:
 800ebb8:	f00e bc74 	b.w	801d4a4 <malloc>

0800ebbc <rcutils_get_zero_initialized_allocator>:
 800ebbc:	b510      	push	{r4, lr}
 800ebbe:	4c05      	ldr	r4, [pc, #20]	; (800ebd4 <rcutils_get_zero_initialized_allocator+0x18>)
 800ebc0:	4686      	mov	lr, r0
 800ebc2:	4684      	mov	ip, r0
 800ebc4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ebc6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ebca:	6823      	ldr	r3, [r4, #0]
 800ebcc:	4670      	mov	r0, lr
 800ebce:	f8cc 3000 	str.w	r3, [ip]
 800ebd2:	bd10      	pop	{r4, pc}
 800ebd4:	0801fbd8 	.word	0x0801fbd8

0800ebd8 <rcutils_set_default_allocator>:
 800ebd8:	b1a8      	cbz	r0, 800ec06 <rcutils_set_default_allocator+0x2e>
 800ebda:	6802      	ldr	r2, [r0, #0]
 800ebdc:	b1a2      	cbz	r2, 800ec08 <rcutils_set_default_allocator+0x30>
 800ebde:	6841      	ldr	r1, [r0, #4]
 800ebe0:	b1a1      	cbz	r1, 800ec0c <rcutils_set_default_allocator+0x34>
 800ebe2:	b410      	push	{r4}
 800ebe4:	68c4      	ldr	r4, [r0, #12]
 800ebe6:	b164      	cbz	r4, 800ec02 <rcutils_set_default_allocator+0x2a>
 800ebe8:	6880      	ldr	r0, [r0, #8]
 800ebea:	b138      	cbz	r0, 800ebfc <rcutils_set_default_allocator+0x24>
 800ebec:	4b08      	ldr	r3, [pc, #32]	; (800ec10 <rcutils_set_default_allocator+0x38>)
 800ebee:	601a      	str	r2, [r3, #0]
 800ebf0:	2200      	movs	r2, #0
 800ebf2:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800ebf6:	2001      	movs	r0, #1
 800ebf8:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800ebfc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ec00:	4770      	bx	lr
 800ec02:	4620      	mov	r0, r4
 800ec04:	e7fa      	b.n	800ebfc <rcutils_set_default_allocator+0x24>
 800ec06:	4770      	bx	lr
 800ec08:	4610      	mov	r0, r2
 800ec0a:	4770      	bx	lr
 800ec0c:	4608      	mov	r0, r1
 800ec0e:	4770      	bx	lr
 800ec10:	20000b4c 	.word	0x20000b4c

0800ec14 <rcutils_get_default_allocator>:
 800ec14:	b510      	push	{r4, lr}
 800ec16:	4c05      	ldr	r4, [pc, #20]	; (800ec2c <rcutils_get_default_allocator+0x18>)
 800ec18:	4686      	mov	lr, r0
 800ec1a:	4684      	mov	ip, r0
 800ec1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ec1e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ec22:	6823      	ldr	r3, [r4, #0]
 800ec24:	4670      	mov	r0, lr
 800ec26:	f8cc 3000 	str.w	r3, [ip]
 800ec2a:	bd10      	pop	{r4, pc}
 800ec2c:	20000b4c 	.word	0x20000b4c

0800ec30 <rcutils_allocator_is_valid>:
 800ec30:	b158      	cbz	r0, 800ec4a <rcutils_allocator_is_valid+0x1a>
 800ec32:	6803      	ldr	r3, [r0, #0]
 800ec34:	b143      	cbz	r3, 800ec48 <rcutils_allocator_is_valid+0x18>
 800ec36:	6843      	ldr	r3, [r0, #4]
 800ec38:	b133      	cbz	r3, 800ec48 <rcutils_allocator_is_valid+0x18>
 800ec3a:	68c3      	ldr	r3, [r0, #12]
 800ec3c:	b123      	cbz	r3, 800ec48 <rcutils_allocator_is_valid+0x18>
 800ec3e:	6880      	ldr	r0, [r0, #8]
 800ec40:	3800      	subs	r0, #0
 800ec42:	bf18      	it	ne
 800ec44:	2001      	movne	r0, #1
 800ec46:	4770      	bx	lr
 800ec48:	4618      	mov	r0, r3
 800ec4a:	4770      	bx	lr

0800ec4c <rcutils_get_error_string>:
 800ec4c:	4b06      	ldr	r3, [pc, #24]	; (800ec68 <rcutils_get_error_string+0x1c>)
 800ec4e:	781b      	ldrb	r3, [r3, #0]
 800ec50:	b13b      	cbz	r3, 800ec62 <rcutils_get_error_string+0x16>
 800ec52:	4b06      	ldr	r3, [pc, #24]	; (800ec6c <rcutils_get_error_string+0x20>)
 800ec54:	781a      	ldrb	r2, [r3, #0]
 800ec56:	b90a      	cbnz	r2, 800ec5c <rcutils_get_error_string+0x10>
 800ec58:	2201      	movs	r2, #1
 800ec5a:	701a      	strb	r2, [r3, #0]
 800ec5c:	4b04      	ldr	r3, [pc, #16]	; (800ec70 <rcutils_get_error_string+0x24>)
 800ec5e:	7818      	ldrb	r0, [r3, #0]
 800ec60:	4770      	bx	lr
 800ec62:	4b04      	ldr	r3, [pc, #16]	; (800ec74 <rcutils_get_error_string+0x28>)
 800ec64:	7818      	ldrb	r0, [r3, #0]
 800ec66:	4770      	bx	lr
 800ec68:	2000bc20 	.word	0x2000bc20
 800ec6c:	2000bc39 	.word	0x2000bc39
 800ec70:	2000bc38 	.word	0x2000bc38
 800ec74:	0801eef0 	.word	0x0801eef0

0800ec78 <rcutils_reset_error>:
 800ec78:	ed9f 7b07 	vldr	d7, [pc, #28]	; 800ec98 <rcutils_reset_error+0x20>
 800ec7c:	2300      	movs	r3, #0
 800ec7e:	4a08      	ldr	r2, [pc, #32]	; (800eca0 <rcutils_reset_error+0x28>)
 800ec80:	4808      	ldr	r0, [pc, #32]	; (800eca4 <rcutils_reset_error+0x2c>)
 800ec82:	8013      	strh	r3, [r2, #0]
 800ec84:	4908      	ldr	r1, [pc, #32]	; (800eca8 <rcutils_reset_error+0x30>)
 800ec86:	7003      	strb	r3, [r0, #0]
 800ec88:	700b      	strb	r3, [r1, #0]
 800ec8a:	ed82 7b02 	vstr	d7, [r2, #8]
 800ec8e:	4a07      	ldr	r2, [pc, #28]	; (800ecac <rcutils_reset_error+0x34>)
 800ec90:	7013      	strb	r3, [r2, #0]
 800ec92:	4770      	bx	lr
 800ec94:	f3af 8000 	nop.w
	...
 800eca0:	2000bc28 	.word	0x2000bc28
 800eca4:	2000bc39 	.word	0x2000bc39
 800eca8:	2000bc38 	.word	0x2000bc38
 800ecac:	2000bc20 	.word	0x2000bc20

0800ecb0 <rcutils_system_time_now>:
 800ecb0:	b310      	cbz	r0, 800ecf8 <rcutils_system_time_now+0x48>
 800ecb2:	b570      	push	{r4, r5, r6, lr}
 800ecb4:	b084      	sub	sp, #16
 800ecb6:	4604      	mov	r4, r0
 800ecb8:	2001      	movs	r0, #1
 800ecba:	4669      	mov	r1, sp
 800ecbc:	f7f4 fb30 	bl	8003320 <clock_gettime>
 800ecc0:	2800      	cmp	r0, #0
 800ecc2:	db16      	blt.n	800ecf2 <rcutils_system_time_now+0x42>
 800ecc4:	e9dd 3100 	ldrd	r3, r1, [sp]
 800ecc8:	2900      	cmp	r1, #0
 800ecca:	db12      	blt.n	800ecf2 <rcutils_system_time_now+0x42>
 800eccc:	ea53 0201 	orrs.w	r2, r3, r1
 800ecd0:	9d02      	ldr	r5, [sp, #8]
 800ecd2:	d101      	bne.n	800ecd8 <rcutils_system_time_now+0x28>
 800ecd4:	2d00      	cmp	r5, #0
 800ecd6:	db0c      	blt.n	800ecf2 <rcutils_system_time_now+0x42>
 800ecd8:	4e08      	ldr	r6, [pc, #32]	; (800ecfc <rcutils_system_time_now+0x4c>)
 800ecda:	2000      	movs	r0, #0
 800ecdc:	fba3 3206 	umull	r3, r2, r3, r6
 800ece0:	195b      	adds	r3, r3, r5
 800ece2:	fb06 2201 	mla	r2, r6, r1, r2
 800ece6:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 800ecea:	e9c4 3200 	strd	r3, r2, [r4]
 800ecee:	b004      	add	sp, #16
 800ecf0:	bd70      	pop	{r4, r5, r6, pc}
 800ecf2:	2002      	movs	r0, #2
 800ecf4:	b004      	add	sp, #16
 800ecf6:	bd70      	pop	{r4, r5, r6, pc}
 800ecf8:	200b      	movs	r0, #11
 800ecfa:	4770      	bx	lr
 800ecfc:	3b9aca00 	.word	0x3b9aca00

0800ed00 <rcutils_steady_time_now>:
 800ed00:	b310      	cbz	r0, 800ed48 <rcutils_steady_time_now+0x48>
 800ed02:	b570      	push	{r4, r5, r6, lr}
 800ed04:	b084      	sub	sp, #16
 800ed06:	4604      	mov	r4, r0
 800ed08:	2000      	movs	r0, #0
 800ed0a:	4669      	mov	r1, sp
 800ed0c:	f7f4 fb08 	bl	8003320 <clock_gettime>
 800ed10:	2800      	cmp	r0, #0
 800ed12:	db16      	blt.n	800ed42 <rcutils_steady_time_now+0x42>
 800ed14:	e9dd 3100 	ldrd	r3, r1, [sp]
 800ed18:	2900      	cmp	r1, #0
 800ed1a:	db12      	blt.n	800ed42 <rcutils_steady_time_now+0x42>
 800ed1c:	ea53 0201 	orrs.w	r2, r3, r1
 800ed20:	9d02      	ldr	r5, [sp, #8]
 800ed22:	d101      	bne.n	800ed28 <rcutils_steady_time_now+0x28>
 800ed24:	2d00      	cmp	r5, #0
 800ed26:	db0c      	blt.n	800ed42 <rcutils_steady_time_now+0x42>
 800ed28:	4e08      	ldr	r6, [pc, #32]	; (800ed4c <rcutils_steady_time_now+0x4c>)
 800ed2a:	2000      	movs	r0, #0
 800ed2c:	fba3 3206 	umull	r3, r2, r3, r6
 800ed30:	195b      	adds	r3, r3, r5
 800ed32:	fb06 2201 	mla	r2, r6, r1, r2
 800ed36:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 800ed3a:	e9c4 3200 	strd	r3, r2, [r4]
 800ed3e:	b004      	add	sp, #16
 800ed40:	bd70      	pop	{r4, r5, r6, pc}
 800ed42:	2002      	movs	r0, #2
 800ed44:	b004      	add	sp, #16
 800ed46:	bd70      	pop	{r4, r5, r6, pc}
 800ed48:	200b      	movs	r0, #11
 800ed4a:	4770      	bx	lr
 800ed4c:	3b9aca00 	.word	0x3b9aca00

0800ed50 <rmw_get_default_publisher_options>:
 800ed50:	2200      	movs	r2, #0
 800ed52:	6002      	str	r2, [r0, #0]
 800ed54:	7102      	strb	r2, [r0, #4]
 800ed56:	4770      	bx	lr

0800ed58 <rmw_uros_set_custom_transport>:
 800ed58:	b470      	push	{r4, r5, r6}
 800ed5a:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800ed5e:	b162      	cbz	r2, 800ed7a <rmw_uros_set_custom_transport+0x22>
 800ed60:	b15b      	cbz	r3, 800ed7a <rmw_uros_set_custom_transport+0x22>
 800ed62:	b155      	cbz	r5, 800ed7a <rmw_uros_set_custom_transport+0x22>
 800ed64:	b14e      	cbz	r6, 800ed7a <rmw_uros_set_custom_transport+0x22>
 800ed66:	4c06      	ldr	r4, [pc, #24]	; (800ed80 <rmw_uros_set_custom_transport+0x28>)
 800ed68:	7020      	strb	r0, [r4, #0]
 800ed6a:	2000      	movs	r0, #0
 800ed6c:	6166      	str	r6, [r4, #20]
 800ed6e:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800ed72:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800ed76:	bc70      	pop	{r4, r5, r6}
 800ed78:	4770      	bx	lr
 800ed7a:	200b      	movs	r0, #11
 800ed7c:	bc70      	pop	{r4, r5, r6}
 800ed7e:	4770      	bx	lr
 800ed80:	2000bc3c 	.word	0x2000bc3c

0800ed84 <flush_session>:
 800ed84:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
 800ed86:	f003 be87 	b.w	8012a98 <uxr_run_session_until_confirm_delivery>
 800ed8a:	bf00      	nop

0800ed8c <rmw_publish>:
 800ed8c:	2800      	cmp	r0, #0
 800ed8e:	d053      	beq.n	800ee38 <rmw_publish+0xac>
 800ed90:	b570      	push	{r4, r5, r6, lr}
 800ed92:	460d      	mov	r5, r1
 800ed94:	b08e      	sub	sp, #56	; 0x38
 800ed96:	2900      	cmp	r1, #0
 800ed98:	d04b      	beq.n	800ee32 <rmw_publish+0xa6>
 800ed9a:	4604      	mov	r4, r0
 800ed9c:	6800      	ldr	r0, [r0, #0]
 800ed9e:	f000 fd97 	bl	800f8d0 <is_uxrce_rmw_identifier_valid>
 800eda2:	2800      	cmp	r0, #0
 800eda4:	d045      	beq.n	800ee32 <rmw_publish+0xa6>
 800eda6:	6866      	ldr	r6, [r4, #4]
 800eda8:	2e00      	cmp	r6, #0
 800edaa:	d042      	beq.n	800ee32 <rmw_publish+0xa6>
 800edac:	69b4      	ldr	r4, [r6, #24]
 800edae:	4628      	mov	r0, r5
 800edb0:	6923      	ldr	r3, [r4, #16]
 800edb2:	4798      	blx	r3
 800edb4:	69f3      	ldr	r3, [r6, #28]
 800edb6:	9005      	str	r0, [sp, #20]
 800edb8:	b113      	cbz	r3, 800edc0 <rmw_publish+0x34>
 800edba:	a805      	add	r0, sp, #20
 800edbc:	4798      	blx	r3
 800edbe:	9805      	ldr	r0, [sp, #20]
 800edc0:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800edc4:	691b      	ldr	r3, [r3, #16]
 800edc6:	9000      	str	r0, [sp, #0]
 800edc8:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800edcc:	6972      	ldr	r2, [r6, #20]
 800edce:	ab06      	add	r3, sp, #24
 800edd0:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 800edd2:	f004 fc5f 	bl	8013694 <uxr_prepare_output_stream>
 800edd6:	b1d8      	cbz	r0, 800ee10 <rmw_publish+0x84>
 800edd8:	68a3      	ldr	r3, [r4, #8]
 800edda:	a906      	add	r1, sp, #24
 800eddc:	4628      	mov	r0, r5
 800edde:	4798      	blx	r3
 800ede0:	6a33      	ldr	r3, [r6, #32]
 800ede2:	4604      	mov	r4, r0
 800ede4:	b10b      	cbz	r3, 800edea <rmw_publish+0x5e>
 800ede6:	a806      	add	r0, sp, #24
 800ede8:	4798      	blx	r3
 800edea:	f896 307a 	ldrb.w	r3, [r6, #122]	; 0x7a
 800edee:	2b01      	cmp	r3, #1
 800edf0:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800edf4:	d022      	beq.n	800ee3c <rmw_publish+0xb0>
 800edf6:	6918      	ldr	r0, [r3, #16]
 800edf8:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
 800edfa:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800edfe:	f003 fe4b 	bl	8012a98 <uxr_run_session_until_confirm_delivery>
 800ee02:	4020      	ands	r0, r4
 800ee04:	b2c4      	uxtb	r4, r0
 800ee06:	f084 0001 	eor.w	r0, r4, #1
 800ee0a:	b2c0      	uxtb	r0, r0
 800ee0c:	b00e      	add	sp, #56	; 0x38
 800ee0e:	bd70      	pop	{r4, r5, r6, pc}
 800ee10:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800ee14:	6918      	ldr	r0, [r3, #16]
 800ee16:	9b05      	ldr	r3, [sp, #20]
 800ee18:	9602      	str	r6, [sp, #8]
 800ee1a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800ee1e:	9300      	str	r3, [sp, #0]
 800ee20:	4b09      	ldr	r3, [pc, #36]	; (800ee48 <rmw_publish+0xbc>)
 800ee22:	9301      	str	r3, [sp, #4]
 800ee24:	ab06      	add	r3, sp, #24
 800ee26:	6972      	ldr	r2, [r6, #20]
 800ee28:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 800ee2a:	f004 fc63 	bl	80136f4 <uxr_prepare_output_stream_fragmented>
 800ee2e:	2800      	cmp	r0, #0
 800ee30:	d1d2      	bne.n	800edd8 <rmw_publish+0x4c>
 800ee32:	2001      	movs	r0, #1
 800ee34:	b00e      	add	sp, #56	; 0x38
 800ee36:	bd70      	pop	{r4, r5, r6, pc}
 800ee38:	2001      	movs	r0, #1
 800ee3a:	4770      	bx	lr
 800ee3c:	6918      	ldr	r0, [r3, #16]
 800ee3e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800ee42:	f003 fa6f 	bl	8012324 <uxr_flash_output_streams>
 800ee46:	e7de      	b.n	800ee06 <rmw_publish+0x7a>
 800ee48:	0800ed85 	.word	0x0800ed85

0800ee4c <rmw_create_publisher>:
 800ee4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee50:	b087      	sub	sp, #28
 800ee52:	2800      	cmp	r0, #0
 800ee54:	f000 80d2 	beq.w	800effc <rmw_create_publisher+0x1b0>
 800ee58:	460e      	mov	r6, r1
 800ee5a:	2900      	cmp	r1, #0
 800ee5c:	f000 80ce 	beq.w	800effc <rmw_create_publisher+0x1b0>
 800ee60:	4604      	mov	r4, r0
 800ee62:	6800      	ldr	r0, [r0, #0]
 800ee64:	4615      	mov	r5, r2
 800ee66:	461f      	mov	r7, r3
 800ee68:	f000 fd32 	bl	800f8d0 <is_uxrce_rmw_identifier_valid>
 800ee6c:	f080 0001 	eor.w	r0, r0, #1
 800ee70:	b2c0      	uxtb	r0, r0
 800ee72:	2800      	cmp	r0, #0
 800ee74:	f040 80c2 	bne.w	800effc <rmw_create_publisher+0x1b0>
 800ee78:	2d00      	cmp	r5, #0
 800ee7a:	f000 80bf 	beq.w	800effc <rmw_create_publisher+0x1b0>
 800ee7e:	782b      	ldrb	r3, [r5, #0]
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	f000 80bb 	beq.w	800effc <rmw_create_publisher+0x1b0>
 800ee86:	2f00      	cmp	r7, #0
 800ee88:	f000 80b8 	beq.w	800effc <rmw_create_publisher+0x1b0>
 800ee8c:	485e      	ldr	r0, [pc, #376]	; (800f008 <rmw_create_publisher+0x1bc>)
 800ee8e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800ee92:	f00a fc67 	bl	8019764 <get_memory>
 800ee96:	2800      	cmp	r0, #0
 800ee98:	f000 80b0 	beq.w	800effc <rmw_create_publisher+0x1b0>
 800ee9c:	6884      	ldr	r4, [r0, #8]
 800ee9e:	f104 0a9c 	add.w	sl, r4, #156	; 0x9c
 800eea2:	f8c4 4088 	str.w	r4, [r4, #136]	; 0x88
 800eea6:	f00a fce3 	bl	8019870 <rmw_get_implementation_identifier>
 800eeaa:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 800eeae:	f8c4 a08c 	str.w	sl, [r4, #140]	; 0x8c
 800eeb2:	4628      	mov	r0, r5
 800eeb4:	f7f1 fa24 	bl	8000300 <strlen>
 800eeb8:	3001      	adds	r0, #1
 800eeba:	f104 0884 	add.w	r8, r4, #132	; 0x84
 800eebe:	283c      	cmp	r0, #60	; 0x3c
 800eec0:	f200 808f 	bhi.w	800efe2 <rmw_create_publisher+0x196>
 800eec4:	462b      	mov	r3, r5
 800eec6:	4a51      	ldr	r2, [pc, #324]	; (800f00c <rmw_create_publisher+0x1c0>)
 800eec8:	213c      	movs	r1, #60	; 0x3c
 800eeca:	4650      	mov	r0, sl
 800eecc:	f00e fd88 	bl	801d9e0 <sniprintf>
 800eed0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800eed4:	4639      	mov	r1, r7
 800eed6:	2250      	movs	r2, #80	; 0x50
 800eed8:	67e3      	str	r3, [r4, #124]	; 0x7c
 800eeda:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800eede:	f8c4 9080 	str.w	r9, [r4, #128]	; 0x80
 800eee2:	f00e ff88 	bl	801ddf6 <memcpy>
 800eee6:	7a3b      	ldrb	r3, [r7, #8]
 800eee8:	4630      	mov	r0, r6
 800eeea:	4949      	ldr	r1, [pc, #292]	; (800f010 <rmw_create_publisher+0x1c4>)
 800eeec:	2b02      	cmp	r3, #2
 800eeee:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800eef2:	bf0c      	ite	eq
 800eef4:	f8d3 337c 	ldreq.w	r3, [r3, #892]	; 0x37c
 800eef8:	f8d3 3378 	ldrne.w	r3, [r3, #888]	; 0x378
 800eefc:	67a3      	str	r3, [r4, #120]	; 0x78
 800eefe:	2300      	movs	r3, #0
 800ef00:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800ef04:	f000 fcf2 	bl	800f8ec <get_message_typesupport_handle>
 800ef08:	2800      	cmp	r0, #0
 800ef0a:	d06a      	beq.n	800efe2 <rmw_create_publisher+0x196>
 800ef0c:	6842      	ldr	r2, [r0, #4]
 800ef0e:	61a2      	str	r2, [r4, #24]
 800ef10:	2a00      	cmp	r2, #0
 800ef12:	d066      	beq.n	800efe2 <rmw_create_publisher+0x196>
 800ef14:	4629      	mov	r1, r5
 800ef16:	463b      	mov	r3, r7
 800ef18:	4648      	mov	r0, r9
 800ef1a:	f00a fee7 	bl	8019cec <create_topic>
 800ef1e:	6260      	str	r0, [r4, #36]	; 0x24
 800ef20:	2800      	cmp	r0, #0
 800ef22:	d062      	beq.n	800efea <rmw_create_publisher+0x19e>
 800ef24:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ef28:	2103      	movs	r1, #3
 800ef2a:	2506      	movs	r5, #6
 800ef2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ef30:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	; 0x598
 800ef34:	1c42      	adds	r2, r0, #1
 800ef36:	f8a3 2598 	strh.w	r2, [r3, #1432]	; 0x598
 800ef3a:	f003 f8a3 	bl	8012084 <uxr_object_id>
 800ef3e:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800ef42:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ef46:	6120      	str	r0, [r4, #16]
 800ef48:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 800ef4c:	6910      	ldr	r0, [r2, #16]
 800ef4e:	9500      	str	r5, [sp, #0]
 800ef50:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800ef54:	6819      	ldr	r1, [r3, #0]
 800ef56:	6922      	ldr	r2, [r4, #16]
 800ef58:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800ef5c:	f002 ff0a 	bl	8011d74 <uxr_buffer_create_publisher_bin>
 800ef60:	4602      	mov	r2, r0
 800ef62:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800ef66:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800ef6a:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800ef6e:	f000 fb9d 	bl	800f6ac <run_xrce_session>
 800ef72:	b3b0      	cbz	r0, 800efe2 <rmw_create_publisher+0x196>
 800ef74:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ef78:	2105      	movs	r1, #5
 800ef7a:	f10d 0a10 	add.w	sl, sp, #16
 800ef7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ef82:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	; 0x59a
 800ef86:	1c42      	adds	r2, r0, #1
 800ef88:	f8a3 259a 	strh.w	r2, [r3, #1434]	; 0x59a
 800ef8c:	f003 f87a 	bl	8012084 <uxr_object_id>
 800ef90:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800ef94:	4639      	mov	r1, r7
 800ef96:	6160      	str	r0, [r4, #20]
 800ef98:	691e      	ldr	r6, [r3, #16]
 800ef9a:	4650      	mov	r0, sl
 800ef9c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800efa0:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 800efa4:	f506 7628 	add.w	r6, r6, #672	; 0x2a0
 800efa8:	f8d3 7384 	ldr.w	r7, [r3, #900]	; 0x384
 800efac:	f000 fb9a 	bl	800f6e4 <convert_qos_profile>
 800efb0:	9503      	str	r5, [sp, #12]
 800efb2:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800efb6:	9001      	str	r0, [sp, #4]
 800efb8:	4630      	mov	r0, r6
 800efba:	f8ad 1008 	strh.w	r1, [sp, #8]
 800efbe:	f8db 3010 	ldr.w	r3, [fp, #16]
 800efc2:	9300      	str	r3, [sp, #0]
 800efc4:	6839      	ldr	r1, [r7, #0]
 800efc6:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800efca:	f002 ff33 	bl	8011e34 <uxr_buffer_create_datawriter_bin>
 800efce:	4602      	mov	r2, r0
 800efd0:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800efd4:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800efd8:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800efdc:	f000 fb66 	bl	800f6ac <run_xrce_session>
 800efe0:	b970      	cbnz	r0, 800f000 <rmw_create_publisher+0x1b4>
 800efe2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800efe4:	b108      	cbz	r0, 800efea <rmw_create_publisher+0x19e>
 800efe6:	f000 fa53 	bl	800f490 <rmw_uxrce_fini_topic_memory>
 800efea:	4640      	mov	r0, r8
 800efec:	f04f 0800 	mov.w	r8, #0
 800eff0:	f000 f9f6 	bl	800f3e0 <rmw_uxrce_fini_publisher_memory>
 800eff4:	4640      	mov	r0, r8
 800eff6:	b007      	add	sp, #28
 800eff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800effc:	f04f 0800 	mov.w	r8, #0
 800f000:	4640      	mov	r0, r8
 800f002:	b007      	add	sp, #28
 800f004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f008:	200105fc 	.word	0x200105fc
 800f00c:	0801fbfc 	.word	0x0801fbfc
 800f010:	0801ed94 	.word	0x0801ed94

0800f014 <rmw_publisher_get_actual_qos>:
 800f014:	b178      	cbz	r0, 800f036 <rmw_publisher_get_actual_qos+0x22>
 800f016:	b510      	push	{r4, lr}
 800f018:	fab1 f481 	clz	r4, r1
 800f01c:	0964      	lsrs	r4, r4, #5
 800f01e:	b141      	cbz	r1, 800f032 <rmw_publisher_get_actual_qos+0x1e>
 800f020:	6843      	ldr	r3, [r0, #4]
 800f022:	2250      	movs	r2, #80	; 0x50
 800f024:	4608      	mov	r0, r1
 800f026:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800f02a:	f00e fee4 	bl	801ddf6 <memcpy>
 800f02e:	4620      	mov	r0, r4
 800f030:	bd10      	pop	{r4, pc}
 800f032:	200b      	movs	r0, #11
 800f034:	bd10      	pop	{r4, pc}
 800f036:	200b      	movs	r0, #11
 800f038:	4770      	bx	lr
 800f03a:	bf00      	nop

0800f03c <rmw_destroy_publisher>:
 800f03c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f040:	b128      	cbz	r0, 800f04e <rmw_destroy_publisher+0x12>
 800f042:	4604      	mov	r4, r0
 800f044:	6800      	ldr	r0, [r0, #0]
 800f046:	460d      	mov	r5, r1
 800f048:	f000 fc42 	bl	800f8d0 <is_uxrce_rmw_identifier_valid>
 800f04c:	b918      	cbnz	r0, 800f056 <rmw_destroy_publisher+0x1a>
 800f04e:	2401      	movs	r4, #1
 800f050:	4620      	mov	r0, r4
 800f052:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f056:	6863      	ldr	r3, [r4, #4]
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d0f8      	beq.n	800f04e <rmw_destroy_publisher+0x12>
 800f05c:	fab5 f485 	clz	r4, r5
 800f060:	0964      	lsrs	r4, r4, #5
 800f062:	2d00      	cmp	r5, #0
 800f064:	d0f3      	beq.n	800f04e <rmw_destroy_publisher+0x12>
 800f066:	6828      	ldr	r0, [r5, #0]
 800f068:	f000 fc32 	bl	800f8d0 <is_uxrce_rmw_identifier_valid>
 800f06c:	2800      	cmp	r0, #0
 800f06e:	d0ee      	beq.n	800f04e <rmw_destroy_publisher+0x12>
 800f070:	686e      	ldr	r6, [r5, #4]
 800f072:	2e00      	cmp	r6, #0
 800f074:	d0eb      	beq.n	800f04e <rmw_destroy_publisher+0x12>
 800f076:	6a70      	ldr	r0, [r6, #36]	; 0x24
 800f078:	f8d6 7080 	ldr.w	r7, [r6, #128]	; 0x80
 800f07c:	f00a fe86 	bl	8019d8c <destroy_topic>
 800f080:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800f084:	6972      	ldr	r2, [r6, #20]
 800f086:	6918      	ldr	r0, [r3, #16]
 800f088:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800f08c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800f090:	6819      	ldr	r1, [r3, #0]
 800f092:	f002 fdbb 	bl	8011c0c <uxr_buffer_delete_entity>
 800f096:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800f09a:	4680      	mov	r8, r0
 800f09c:	6932      	ldr	r2, [r6, #16]
 800f09e:	6918      	ldr	r0, [r3, #16]
 800f0a0:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800f0a4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800f0a8:	6819      	ldr	r1, [r3, #0]
 800f0aa:	f002 fdaf 	bl	8011c0c <uxr_buffer_delete_entity>
 800f0ae:	4606      	mov	r6, r0
 800f0b0:	6938      	ldr	r0, [r7, #16]
 800f0b2:	4642      	mov	r2, r8
 800f0b4:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800f0b8:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800f0bc:	f000 faf6 	bl	800f6ac <run_xrce_session>
 800f0c0:	693f      	ldr	r7, [r7, #16]
 800f0c2:	4632      	mov	r2, r6
 800f0c4:	4606      	mov	r6, r0
 800f0c6:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 800f0ca:	4638      	mov	r0, r7
 800f0cc:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 800f0d0:	f000 faec 	bl	800f6ac <run_xrce_session>
 800f0d4:	b126      	cbz	r6, 800f0e0 <rmw_destroy_publisher+0xa4>
 800f0d6:	b118      	cbz	r0, 800f0e0 <rmw_destroy_publisher+0xa4>
 800f0d8:	4628      	mov	r0, r5
 800f0da:	f000 f981 	bl	800f3e0 <rmw_uxrce_fini_publisher_memory>
 800f0de:	e7b7      	b.n	800f050 <rmw_destroy_publisher+0x14>
 800f0e0:	2402      	movs	r4, #2
 800f0e2:	e7f9      	b.n	800f0d8 <rmw_destroy_publisher+0x9c>

0800f0e4 <rmw_uxrce_init_service_memory>:
 800f0e4:	b1e2      	cbz	r2, 800f120 <rmw_uxrce_init_service_memory+0x3c>
 800f0e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0ea:	7b05      	ldrb	r5, [r0, #12]
 800f0ec:	4606      	mov	r6, r0
 800f0ee:	b9ad      	cbnz	r5, 800f11c <rmw_uxrce_init_service_memory+0x38>
 800f0f0:	23c8      	movs	r3, #200	; 0xc8
 800f0f2:	4617      	mov	r7, r2
 800f0f4:	460c      	mov	r4, r1
 800f0f6:	46a8      	mov	r8, r5
 800f0f8:	6083      	str	r3, [r0, #8]
 800f0fa:	f240 1301 	movw	r3, #257	; 0x101
 800f0fe:	e9c0 5500 	strd	r5, r5, [r0]
 800f102:	8183      	strh	r3, [r0, #12]
 800f104:	3501      	adds	r5, #1
 800f106:	4621      	mov	r1, r4
 800f108:	4630      	mov	r0, r6
 800f10a:	f00a fb3b 	bl	8019784 <put_memory>
 800f10e:	42af      	cmp	r7, r5
 800f110:	60a4      	str	r4, [r4, #8]
 800f112:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 800f116:	f804 8cbc 	strb.w	r8, [r4, #-188]
 800f11a:	d1f3      	bne.n	800f104 <rmw_uxrce_init_service_memory+0x20>
 800f11c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f120:	4770      	bx	lr
 800f122:	bf00      	nop

0800f124 <rmw_uxrce_init_client_memory>:
 800f124:	b1e2      	cbz	r2, 800f160 <rmw_uxrce_init_client_memory+0x3c>
 800f126:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f12a:	7b05      	ldrb	r5, [r0, #12]
 800f12c:	4606      	mov	r6, r0
 800f12e:	b9ad      	cbnz	r5, 800f15c <rmw_uxrce_init_client_memory+0x38>
 800f130:	23c8      	movs	r3, #200	; 0xc8
 800f132:	4617      	mov	r7, r2
 800f134:	460c      	mov	r4, r1
 800f136:	46a8      	mov	r8, r5
 800f138:	6083      	str	r3, [r0, #8]
 800f13a:	f240 1301 	movw	r3, #257	; 0x101
 800f13e:	e9c0 5500 	strd	r5, r5, [r0]
 800f142:	8183      	strh	r3, [r0, #12]
 800f144:	3501      	adds	r5, #1
 800f146:	4621      	mov	r1, r4
 800f148:	4630      	mov	r0, r6
 800f14a:	f00a fb1b 	bl	8019784 <put_memory>
 800f14e:	42af      	cmp	r7, r5
 800f150:	60a4      	str	r4, [r4, #8]
 800f152:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 800f156:	f804 8cbc 	strb.w	r8, [r4, #-188]
 800f15a:	d1f3      	bne.n	800f144 <rmw_uxrce_init_client_memory+0x20>
 800f15c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f160:	4770      	bx	lr
 800f162:	bf00      	nop

0800f164 <rmw_uxrce_init_publisher_memory>:
 800f164:	b1e2      	cbz	r2, 800f1a0 <rmw_uxrce_init_publisher_memory+0x3c>
 800f166:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f16a:	7b05      	ldrb	r5, [r0, #12]
 800f16c:	4606      	mov	r6, r0
 800f16e:	b9ad      	cbnz	r5, 800f19c <rmw_uxrce_init_publisher_memory+0x38>
 800f170:	23d8      	movs	r3, #216	; 0xd8
 800f172:	4617      	mov	r7, r2
 800f174:	460c      	mov	r4, r1
 800f176:	46a8      	mov	r8, r5
 800f178:	6083      	str	r3, [r0, #8]
 800f17a:	f240 1301 	movw	r3, #257	; 0x101
 800f17e:	e9c0 5500 	strd	r5, r5, [r0]
 800f182:	8183      	strh	r3, [r0, #12]
 800f184:	3501      	adds	r5, #1
 800f186:	4621      	mov	r1, r4
 800f188:	4630      	mov	r0, r6
 800f18a:	f00a fafb 	bl	8019784 <put_memory>
 800f18e:	42af      	cmp	r7, r5
 800f190:	60a4      	str	r4, [r4, #8]
 800f192:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 800f196:	f804 8ccc 	strb.w	r8, [r4, #-204]
 800f19a:	d1f3      	bne.n	800f184 <rmw_uxrce_init_publisher_memory+0x20>
 800f19c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1a0:	4770      	bx	lr
 800f1a2:	bf00      	nop

0800f1a4 <rmw_uxrce_init_subscription_memory>:
 800f1a4:	b1e2      	cbz	r2, 800f1e0 <rmw_uxrce_init_subscription_memory+0x3c>
 800f1a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1aa:	7b05      	ldrb	r5, [r0, #12]
 800f1ac:	4606      	mov	r6, r0
 800f1ae:	b9ad      	cbnz	r5, 800f1dc <rmw_uxrce_init_subscription_memory+0x38>
 800f1b0:	23d8      	movs	r3, #216	; 0xd8
 800f1b2:	4617      	mov	r7, r2
 800f1b4:	460c      	mov	r4, r1
 800f1b6:	46a8      	mov	r8, r5
 800f1b8:	6083      	str	r3, [r0, #8]
 800f1ba:	f240 1301 	movw	r3, #257	; 0x101
 800f1be:	e9c0 5500 	strd	r5, r5, [r0]
 800f1c2:	8183      	strh	r3, [r0, #12]
 800f1c4:	3501      	adds	r5, #1
 800f1c6:	4621      	mov	r1, r4
 800f1c8:	4630      	mov	r0, r6
 800f1ca:	f00a fadb 	bl	8019784 <put_memory>
 800f1ce:	42af      	cmp	r7, r5
 800f1d0:	60a4      	str	r4, [r4, #8]
 800f1d2:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 800f1d6:	f804 8ccc 	strb.w	r8, [r4, #-204]
 800f1da:	d1f3      	bne.n	800f1c4 <rmw_uxrce_init_subscription_memory+0x20>
 800f1dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1e0:	4770      	bx	lr
 800f1e2:	bf00      	nop

0800f1e4 <rmw_uxrce_init_node_memory>:
 800f1e4:	b1e2      	cbz	r2, 800f220 <rmw_uxrce_init_node_memory+0x3c>
 800f1e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1ea:	7b05      	ldrb	r5, [r0, #12]
 800f1ec:	4606      	mov	r6, r0
 800f1ee:	b9ad      	cbnz	r5, 800f21c <rmw_uxrce_init_node_memory+0x38>
 800f1f0:	23a4      	movs	r3, #164	; 0xa4
 800f1f2:	4617      	mov	r7, r2
 800f1f4:	460c      	mov	r4, r1
 800f1f6:	46a8      	mov	r8, r5
 800f1f8:	6083      	str	r3, [r0, #8]
 800f1fa:	f240 1301 	movw	r3, #257	; 0x101
 800f1fe:	e9c0 5500 	strd	r5, r5, [r0]
 800f202:	8183      	strh	r3, [r0, #12]
 800f204:	3501      	adds	r5, #1
 800f206:	4621      	mov	r1, r4
 800f208:	4630      	mov	r0, r6
 800f20a:	f00a fabb 	bl	8019784 <put_memory>
 800f20e:	42af      	cmp	r7, r5
 800f210:	60a4      	str	r4, [r4, #8]
 800f212:	f104 04a4 	add.w	r4, r4, #164	; 0xa4
 800f216:	f804 8c98 	strb.w	r8, [r4, #-152]
 800f21a:	d1f3      	bne.n	800f204 <rmw_uxrce_init_node_memory+0x20>
 800f21c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f220:	4770      	bx	lr
 800f222:	bf00      	nop

0800f224 <rmw_uxrce_init_session_memory>:
 800f224:	b1ea      	cbz	r2, 800f262 <rmw_uxrce_init_session_memory+0x3e>
 800f226:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f22a:	7b05      	ldrb	r5, [r0, #12]
 800f22c:	4606      	mov	r6, r0
 800f22e:	b9b5      	cbnz	r5, 800f25e <rmw_uxrce_init_session_memory+0x3a>
 800f230:	f241 58a8 	movw	r8, #5544	; 0x15a8
 800f234:	f240 1301 	movw	r3, #257	; 0x101
 800f238:	4617      	mov	r7, r2
 800f23a:	460c      	mov	r4, r1
 800f23c:	46a9      	mov	r9, r5
 800f23e:	f8c0 8008 	str.w	r8, [r0, #8]
 800f242:	8183      	strh	r3, [r0, #12]
 800f244:	e9c0 5500 	strd	r5, r5, [r0]
 800f248:	3501      	adds	r5, #1
 800f24a:	4621      	mov	r1, r4
 800f24c:	4630      	mov	r0, r6
 800f24e:	f00a fa99 	bl	8019784 <put_memory>
 800f252:	42af      	cmp	r7, r5
 800f254:	60a4      	str	r4, [r4, #8]
 800f256:	f884 900c 	strb.w	r9, [r4, #12]
 800f25a:	4444      	add	r4, r8
 800f25c:	d1f4      	bne.n	800f248 <rmw_uxrce_init_session_memory+0x24>
 800f25e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f262:	4770      	bx	lr

0800f264 <rmw_uxrce_init_topic_memory>:
 800f264:	b1e2      	cbz	r2, 800f2a0 <rmw_uxrce_init_topic_memory+0x3c>
 800f266:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f26a:	7b05      	ldrb	r5, [r0, #12]
 800f26c:	4606      	mov	r6, r0
 800f26e:	b9ad      	cbnz	r5, 800f29c <rmw_uxrce_init_topic_memory+0x38>
 800f270:	231c      	movs	r3, #28
 800f272:	4617      	mov	r7, r2
 800f274:	460c      	mov	r4, r1
 800f276:	46a8      	mov	r8, r5
 800f278:	6083      	str	r3, [r0, #8]
 800f27a:	f240 1301 	movw	r3, #257	; 0x101
 800f27e:	e9c0 5500 	strd	r5, r5, [r0]
 800f282:	8183      	strh	r3, [r0, #12]
 800f284:	3501      	adds	r5, #1
 800f286:	4621      	mov	r1, r4
 800f288:	4630      	mov	r0, r6
 800f28a:	f00a fa7b 	bl	8019784 <put_memory>
 800f28e:	42af      	cmp	r7, r5
 800f290:	60a4      	str	r4, [r4, #8]
 800f292:	f104 041c 	add.w	r4, r4, #28
 800f296:	f804 8c10 	strb.w	r8, [r4, #-16]
 800f29a:	d1f3      	bne.n	800f284 <rmw_uxrce_init_topic_memory+0x20>
 800f29c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2a0:	4770      	bx	lr
 800f2a2:	bf00      	nop

0800f2a4 <rmw_uxrce_init_static_input_buffer_memory>:
 800f2a4:	b1ea      	cbz	r2, 800f2e2 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800f2a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2aa:	7b05      	ldrb	r5, [r0, #12]
 800f2ac:	4606      	mov	r6, r0
 800f2ae:	b9b5      	cbnz	r5, 800f2de <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800f2b0:	f44f 6304 	mov.w	r3, #2112	; 0x840
 800f2b4:	4617      	mov	r7, r2
 800f2b6:	460c      	mov	r4, r1
 800f2b8:	46a8      	mov	r8, r5
 800f2ba:	6083      	str	r3, [r0, #8]
 800f2bc:	f240 1301 	movw	r3, #257	; 0x101
 800f2c0:	e9c0 5500 	strd	r5, r5, [r0]
 800f2c4:	8183      	strh	r3, [r0, #12]
 800f2c6:	3501      	adds	r5, #1
 800f2c8:	4621      	mov	r1, r4
 800f2ca:	4630      	mov	r0, r6
 800f2cc:	f00a fa5a 	bl	8019784 <put_memory>
 800f2d0:	42af      	cmp	r7, r5
 800f2d2:	60a4      	str	r4, [r4, #8]
 800f2d4:	f884 800c 	strb.w	r8, [r4, #12]
 800f2d8:	f504 6404 	add.w	r4, r4, #2112	; 0x840
 800f2dc:	d1f3      	bne.n	800f2c6 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800f2de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2e2:	4770      	bx	lr

0800f2e4 <rmw_uxrce_init_init_options_impl_memory>:
 800f2e4:	b1e2      	cbz	r2, 800f320 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800f2e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2ea:	7b05      	ldrb	r5, [r0, #12]
 800f2ec:	4606      	mov	r6, r0
 800f2ee:	b9ad      	cbnz	r5, 800f31c <rmw_uxrce_init_init_options_impl_memory+0x38>
 800f2f0:	232c      	movs	r3, #44	; 0x2c
 800f2f2:	4617      	mov	r7, r2
 800f2f4:	460c      	mov	r4, r1
 800f2f6:	46a8      	mov	r8, r5
 800f2f8:	6083      	str	r3, [r0, #8]
 800f2fa:	f240 1301 	movw	r3, #257	; 0x101
 800f2fe:	e9c0 5500 	strd	r5, r5, [r0]
 800f302:	8183      	strh	r3, [r0, #12]
 800f304:	3501      	adds	r5, #1
 800f306:	4621      	mov	r1, r4
 800f308:	4630      	mov	r0, r6
 800f30a:	f00a fa3b 	bl	8019784 <put_memory>
 800f30e:	42af      	cmp	r7, r5
 800f310:	60a4      	str	r4, [r4, #8]
 800f312:	f104 042c 	add.w	r4, r4, #44	; 0x2c
 800f316:	f804 8c20 	strb.w	r8, [r4, #-32]
 800f31a:	d1f3      	bne.n	800f304 <rmw_uxrce_init_init_options_impl_memory+0x20>
 800f31c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f320:	4770      	bx	lr
 800f322:	bf00      	nop

0800f324 <rmw_uxrce_init_wait_set_memory>:
 800f324:	b1e2      	cbz	r2, 800f360 <rmw_uxrce_init_wait_set_memory+0x3c>
 800f326:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f32a:	7b05      	ldrb	r5, [r0, #12]
 800f32c:	4606      	mov	r6, r0
 800f32e:	b9ad      	cbnz	r5, 800f35c <rmw_uxrce_init_wait_set_memory+0x38>
 800f330:	231c      	movs	r3, #28
 800f332:	4617      	mov	r7, r2
 800f334:	460c      	mov	r4, r1
 800f336:	46a8      	mov	r8, r5
 800f338:	6083      	str	r3, [r0, #8]
 800f33a:	f240 1301 	movw	r3, #257	; 0x101
 800f33e:	e9c0 5500 	strd	r5, r5, [r0]
 800f342:	8183      	strh	r3, [r0, #12]
 800f344:	3501      	adds	r5, #1
 800f346:	4621      	mov	r1, r4
 800f348:	4630      	mov	r0, r6
 800f34a:	f00a fa1b 	bl	8019784 <put_memory>
 800f34e:	42af      	cmp	r7, r5
 800f350:	60a4      	str	r4, [r4, #8]
 800f352:	f104 041c 	add.w	r4, r4, #28
 800f356:	f804 8c10 	strb.w	r8, [r4, #-16]
 800f35a:	d1f3      	bne.n	800f344 <rmw_uxrce_init_wait_set_memory+0x20>
 800f35c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f360:	4770      	bx	lr
 800f362:	bf00      	nop

0800f364 <rmw_uxrce_init_guard_condition_memory>:
 800f364:	b1e2      	cbz	r2, 800f3a0 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800f366:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f36a:	7b05      	ldrb	r5, [r0, #12]
 800f36c:	4606      	mov	r6, r0
 800f36e:	b9ad      	cbnz	r5, 800f39c <rmw_uxrce_init_guard_condition_memory+0x38>
 800f370:	2320      	movs	r3, #32
 800f372:	4617      	mov	r7, r2
 800f374:	460c      	mov	r4, r1
 800f376:	46a8      	mov	r8, r5
 800f378:	6083      	str	r3, [r0, #8]
 800f37a:	f240 1301 	movw	r3, #257	; 0x101
 800f37e:	e9c0 5500 	strd	r5, r5, [r0]
 800f382:	8183      	strh	r3, [r0, #12]
 800f384:	3501      	adds	r5, #1
 800f386:	4621      	mov	r1, r4
 800f388:	4630      	mov	r0, r6
 800f38a:	f00a f9fb 	bl	8019784 <put_memory>
 800f38e:	42af      	cmp	r7, r5
 800f390:	60a4      	str	r4, [r4, #8]
 800f392:	f104 0420 	add.w	r4, r4, #32
 800f396:	f804 8c14 	strb.w	r8, [r4, #-20]
 800f39a:	d1f3      	bne.n	800f384 <rmw_uxrce_init_guard_condition_memory+0x20>
 800f39c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3a0:	4770      	bx	lr
 800f3a2:	bf00      	nop

0800f3a4 <rmw_uxrce_fini_session_memory>:
 800f3a4:	4601      	mov	r1, r0
 800f3a6:	4801      	ldr	r0, [pc, #4]	; (800f3ac <rmw_uxrce_fini_session_memory+0x8>)
 800f3a8:	f00a b9ec 	b.w	8019784 <put_memory>
 800f3ac:	2001061c 	.word	0x2001061c

0800f3b0 <rmw_uxrce_fini_node_memory>:
 800f3b0:	b538      	push	{r3, r4, r5, lr}
 800f3b2:	4604      	mov	r4, r0
 800f3b4:	6800      	ldr	r0, [r0, #0]
 800f3b6:	b128      	cbz	r0, 800f3c4 <rmw_uxrce_fini_node_memory+0x14>
 800f3b8:	4b07      	ldr	r3, [pc, #28]	; (800f3d8 <rmw_uxrce_fini_node_memory+0x28>)
 800f3ba:	6819      	ldr	r1, [r3, #0]
 800f3bc:	f7f0 ff40 	bl	8000240 <strcmp>
 800f3c0:	b940      	cbnz	r0, 800f3d4 <rmw_uxrce_fini_node_memory+0x24>
 800f3c2:	6020      	str	r0, [r4, #0]
 800f3c4:	6861      	ldr	r1, [r4, #4]
 800f3c6:	b129      	cbz	r1, 800f3d4 <rmw_uxrce_fini_node_memory+0x24>
 800f3c8:	2500      	movs	r5, #0
 800f3ca:	4804      	ldr	r0, [pc, #16]	; (800f3dc <rmw_uxrce_fini_node_memory+0x2c>)
 800f3cc:	610d      	str	r5, [r1, #16]
 800f3ce:	f00a f9d9 	bl	8019784 <put_memory>
 800f3d2:	6065      	str	r5, [r4, #4]
 800f3d4:	bd38      	pop	{r3, r4, r5, pc}
 800f3d6:	bf00      	nop
 800f3d8:	08020748 	.word	0x08020748
 800f3dc:	200105ec 	.word	0x200105ec

0800f3e0 <rmw_uxrce_fini_publisher_memory>:
 800f3e0:	b510      	push	{r4, lr}
 800f3e2:	4604      	mov	r4, r0
 800f3e4:	6800      	ldr	r0, [r0, #0]
 800f3e6:	b128      	cbz	r0, 800f3f4 <rmw_uxrce_fini_publisher_memory+0x14>
 800f3e8:	4b06      	ldr	r3, [pc, #24]	; (800f404 <rmw_uxrce_fini_publisher_memory+0x24>)
 800f3ea:	6819      	ldr	r1, [r3, #0]
 800f3ec:	f7f0 ff28 	bl	8000240 <strcmp>
 800f3f0:	b938      	cbnz	r0, 800f402 <rmw_uxrce_fini_publisher_memory+0x22>
 800f3f2:	6020      	str	r0, [r4, #0]
 800f3f4:	6861      	ldr	r1, [r4, #4]
 800f3f6:	b121      	cbz	r1, 800f402 <rmw_uxrce_fini_publisher_memory+0x22>
 800f3f8:	4803      	ldr	r0, [pc, #12]	; (800f408 <rmw_uxrce_fini_publisher_memory+0x28>)
 800f3fa:	f00a f9c3 	bl	8019784 <put_memory>
 800f3fe:	2300      	movs	r3, #0
 800f400:	6063      	str	r3, [r4, #4]
 800f402:	bd10      	pop	{r4, pc}
 800f404:	08020748 	.word	0x08020748
 800f408:	200105fc 	.word	0x200105fc

0800f40c <rmw_uxrce_fini_subscription_memory>:
 800f40c:	b510      	push	{r4, lr}
 800f40e:	4604      	mov	r4, r0
 800f410:	6800      	ldr	r0, [r0, #0]
 800f412:	b128      	cbz	r0, 800f420 <rmw_uxrce_fini_subscription_memory+0x14>
 800f414:	4b06      	ldr	r3, [pc, #24]	; (800f430 <rmw_uxrce_fini_subscription_memory+0x24>)
 800f416:	6819      	ldr	r1, [r3, #0]
 800f418:	f7f0 ff12 	bl	8000240 <strcmp>
 800f41c:	b938      	cbnz	r0, 800f42e <rmw_uxrce_fini_subscription_memory+0x22>
 800f41e:	6020      	str	r0, [r4, #0]
 800f420:	6861      	ldr	r1, [r4, #4]
 800f422:	b121      	cbz	r1, 800f42e <rmw_uxrce_fini_subscription_memory+0x22>
 800f424:	4803      	ldr	r0, [pc, #12]	; (800f434 <rmw_uxrce_fini_subscription_memory+0x28>)
 800f426:	f00a f9ad 	bl	8019784 <put_memory>
 800f42a:	2300      	movs	r3, #0
 800f42c:	6063      	str	r3, [r4, #4]
 800f42e:	bd10      	pop	{r4, pc}
 800f430:	08020748 	.word	0x08020748
 800f434:	2001063c 	.word	0x2001063c

0800f438 <rmw_uxrce_fini_service_memory>:
 800f438:	b510      	push	{r4, lr}
 800f43a:	4604      	mov	r4, r0
 800f43c:	6800      	ldr	r0, [r0, #0]
 800f43e:	b128      	cbz	r0, 800f44c <rmw_uxrce_fini_service_memory+0x14>
 800f440:	4b06      	ldr	r3, [pc, #24]	; (800f45c <rmw_uxrce_fini_service_memory+0x24>)
 800f442:	6819      	ldr	r1, [r3, #0]
 800f444:	f7f0 fefc 	bl	8000240 <strcmp>
 800f448:	b938      	cbnz	r0, 800f45a <rmw_uxrce_fini_service_memory+0x22>
 800f44a:	6020      	str	r0, [r4, #0]
 800f44c:	6861      	ldr	r1, [r4, #4]
 800f44e:	b121      	cbz	r1, 800f45a <rmw_uxrce_fini_service_memory+0x22>
 800f450:	4803      	ldr	r0, [pc, #12]	; (800f460 <rmw_uxrce_fini_service_memory+0x28>)
 800f452:	f00a f997 	bl	8019784 <put_memory>
 800f456:	2300      	movs	r3, #0
 800f458:	6063      	str	r3, [r4, #4]
 800f45a:	bd10      	pop	{r4, pc}
 800f45c:	08020748 	.word	0x08020748
 800f460:	2001060c 	.word	0x2001060c

0800f464 <rmw_uxrce_fini_client_memory>:
 800f464:	b510      	push	{r4, lr}
 800f466:	4604      	mov	r4, r0
 800f468:	6800      	ldr	r0, [r0, #0]
 800f46a:	b128      	cbz	r0, 800f478 <rmw_uxrce_fini_client_memory+0x14>
 800f46c:	4b06      	ldr	r3, [pc, #24]	; (800f488 <rmw_uxrce_fini_client_memory+0x24>)
 800f46e:	6819      	ldr	r1, [r3, #0]
 800f470:	f7f0 fee6 	bl	8000240 <strcmp>
 800f474:	b938      	cbnz	r0, 800f486 <rmw_uxrce_fini_client_memory+0x22>
 800f476:	6020      	str	r0, [r4, #0]
 800f478:	6861      	ldr	r1, [r4, #4]
 800f47a:	b121      	cbz	r1, 800f486 <rmw_uxrce_fini_client_memory+0x22>
 800f47c:	4803      	ldr	r0, [pc, #12]	; (800f48c <rmw_uxrce_fini_client_memory+0x28>)
 800f47e:	f00a f981 	bl	8019784 <put_memory>
 800f482:	2300      	movs	r3, #0
 800f484:	6063      	str	r3, [r4, #4]
 800f486:	bd10      	pop	{r4, pc}
 800f488:	08020748 	.word	0x08020748
 800f48c:	2000bc58 	.word	0x2000bc58

0800f490 <rmw_uxrce_fini_topic_memory>:
 800f490:	b510      	push	{r4, lr}
 800f492:	4604      	mov	r4, r0
 800f494:	4803      	ldr	r0, [pc, #12]	; (800f4a4 <rmw_uxrce_fini_topic_memory+0x14>)
 800f496:	4621      	mov	r1, r4
 800f498:	f00a f974 	bl	8019784 <put_memory>
 800f49c:	2300      	movs	r3, #0
 800f49e:	61a3      	str	r3, [r4, #24]
 800f4a0:	bd10      	pop	{r4, pc}
 800f4a2:	bf00      	nop
 800f4a4:	2001064c 	.word	0x2001064c

0800f4a8 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800f4a8:	b082      	sub	sp, #8
 800f4aa:	492b      	ldr	r1, [pc, #172]	; (800f558 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 800f4ac:	b530      	push	{r4, r5, lr}
 800f4ae:	680d      	ldr	r5, [r1, #0]
 800f4b0:	ac03      	add	r4, sp, #12
 800f4b2:	e884 000c 	stmia.w	r4, {r2, r3}
 800f4b6:	461c      	mov	r4, r3
 800f4b8:	2d00      	cmp	r5, #0
 800f4ba:	d04b      	beq.n	800f554 <rmw_uxrce_get_static_input_buffer_for_entity+0xac>
 800f4bc:	462b      	mov	r3, r5
 800f4be:	2100      	movs	r1, #0
 800f4c0:	689a      	ldr	r2, [r3, #8]
 800f4c2:	685b      	ldr	r3, [r3, #4]
 800f4c4:	f8d2 2814 	ldr.w	r2, [r2, #2068]	; 0x814
 800f4c8:	4290      	cmp	r0, r2
 800f4ca:	bf08      	it	eq
 800f4cc:	3101      	addeq	r1, #1
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d1f6      	bne.n	800f4c0 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800f4d2:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800f4d6:	2b02      	cmp	r3, #2
 800f4d8:	d029      	beq.n	800f52e <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800f4da:	d820      	bhi.n	800f51e <rmw_uxrce_get_static_input_buffer_for_entity+0x76>
 800f4dc:	428c      	cmp	r4, r1
 800f4de:	d828      	bhi.n	800f532 <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 800f4e0:	fab4 f284 	clz	r2, r4
 800f4e4:	0952      	lsrs	r2, r2, #5
 800f4e6:	b324      	cbz	r4, 800f532 <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 800f4e8:	b1dd      	cbz	r5, 800f522 <rmw_uxrce_get_static_input_buffer_for_entity+0x7a>
 800f4ea:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800f4ee:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 800f4f2:	e001      	b.n	800f4f8 <rmw_uxrce_get_static_input_buffer_for_entity+0x50>
 800f4f4:	686d      	ldr	r5, [r5, #4]
 800f4f6:	b1ad      	cbz	r5, 800f524 <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 800f4f8:	68ab      	ldr	r3, [r5, #8]
 800f4fa:	f8d3 1814 	ldr.w	r1, [r3, #2068]	; 0x814
 800f4fe:	4288      	cmp	r0, r1
 800f500:	d1f8      	bne.n	800f4f4 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 800f502:	f8d3 1818 	ldr.w	r1, [r3, #2072]	; 0x818
 800f506:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 800f50a:	4561      	cmp	r1, ip
 800f50c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800f510:	eb73 0e04 	sbcs.w	lr, r3, r4
 800f514:	daee      	bge.n	800f4f4 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 800f516:	468c      	mov	ip, r1
 800f518:	461c      	mov	r4, r3
 800f51a:	462a      	mov	r2, r5
 800f51c:	e7ea      	b.n	800f4f4 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 800f51e:	2b03      	cmp	r3, #3
 800f520:	d0dc      	beq.n	800f4dc <rmw_uxrce_get_static_input_buffer_for_entity+0x34>
 800f522:	2200      	movs	r2, #0
 800f524:	4610      	mov	r0, r2
 800f526:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f52a:	b002      	add	sp, #8
 800f52c:	4770      	bx	lr
 800f52e:	428c      	cmp	r4, r1
 800f530:	d905      	bls.n	800f53e <rmw_uxrce_get_static_input_buffer_for_entity+0x96>
 800f532:	4809      	ldr	r0, [pc, #36]	; (800f558 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 800f534:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f538:	b002      	add	sp, #8
 800f53a:	f00a b913 	b.w	8019764 <get_memory>
 800f53e:	fab4 f284 	clz	r2, r4
 800f542:	0952      	lsrs	r2, r2, #5
 800f544:	2c00      	cmp	r4, #0
 800f546:	d1ed      	bne.n	800f524 <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 800f548:	4803      	ldr	r0, [pc, #12]	; (800f558 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 800f54a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f54e:	b002      	add	sp, #8
 800f550:	f00a b908 	b.w	8019764 <get_memory>
 800f554:	4629      	mov	r1, r5
 800f556:	e7bc      	b.n	800f4d2 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800f558:	2001062c 	.word	0x2001062c

0800f55c <rmw_uxrce_find_static_input_buffer_by_owner>:
 800f55c:	4b12      	ldr	r3, [pc, #72]	; (800f5a8 <rmw_uxrce_find_static_input_buffer_by_owner+0x4c>)
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	b530      	push	{r4, r5, lr}
 800f562:	b1f3      	cbz	r3, 800f5a2 <rmw_uxrce_find_static_input_buffer_by_owner+0x46>
 800f564:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800f568:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
 800f56c:	2400      	movs	r4, #0
 800f56e:	e001      	b.n	800f574 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800f570:	685b      	ldr	r3, [r3, #4]
 800f572:	b1a3      	cbz	r3, 800f59e <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800f574:	689a      	ldr	r2, [r3, #8]
 800f576:	f8d2 1814 	ldr.w	r1, [r2, #2068]	; 0x814
 800f57a:	4288      	cmp	r0, r1
 800f57c:	d1f8      	bne.n	800f570 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800f57e:	f8d2 1818 	ldr.w	r1, [r2, #2072]	; 0x818
 800f582:	f502 6202 	add.w	r2, r2, #2080	; 0x820
 800f586:	4571      	cmp	r1, lr
 800f588:	f852 2c04 	ldr.w	r2, [r2, #-4]
 800f58c:	eb72 050c 	sbcs.w	r5, r2, ip
 800f590:	daee      	bge.n	800f570 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800f592:	461c      	mov	r4, r3
 800f594:	685b      	ldr	r3, [r3, #4]
 800f596:	468e      	mov	lr, r1
 800f598:	4694      	mov	ip, r2
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d1ea      	bne.n	800f574 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800f59e:	4620      	mov	r0, r4
 800f5a0:	bd30      	pop	{r4, r5, pc}
 800f5a2:	461c      	mov	r4, r3
 800f5a4:	4620      	mov	r0, r4
 800f5a6:	bd30      	pop	{r4, r5, pc}
 800f5a8:	2001062c 	.word	0x2001062c
 800f5ac:	00000000 	.word	0x00000000

0800f5b0 <rmw_uxrce_clean_expired_static_input_buffer>:
 800f5b0:	4b3d      	ldr	r3, [pc, #244]	; (800f6a8 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800f5b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5b6:	681f      	ldr	r7, [r3, #0]
 800f5b8:	ed2d 8b06 	vpush	{d8-d10}
 800f5bc:	b08d      	sub	sp, #52	; 0x34
 800f5be:	f00b fb0d 	bl	801abdc <rmw_uros_epoch_nanos>
 800f5c2:	2f00      	cmp	r7, #0
 800f5c4:	d05d      	beq.n	800f682 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800f5c6:	46b8      	mov	r8, r7
 800f5c8:	4681      	mov	r9, r0
 800f5ca:	468a      	mov	sl, r1
 800f5cc:	ac04      	add	r4, sp, #16
 800f5ce:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800f5d2:	f895 3820 	ldrb.w	r3, [r5, #2080]	; 0x820
 800f5d6:	2b04      	cmp	r3, #4
 800f5d8:	ed9f 8b2d 	vldr	d8, [pc, #180]	; 800f690 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800f5dc:	ed9f ab2e 	vldr	d10, [pc, #184]	; 800f698 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800f5e0:	ed9f 9b2f 	vldr	d9, [pc, #188]	; 800f6a0 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800f5e4:	d03f      	beq.n	800f666 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800f5e6:	2b05      	cmp	r3, #5
 800f5e8:	d044      	beq.n	800f674 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800f5ea:	2b03      	cmp	r3, #3
 800f5ec:	d03b      	beq.n	800f666 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800f5ee:	ed8d 8b04 	vstr	d8, [sp, #16]
 800f5f2:	ed8d ab06 	vstr	d10, [sp, #24]
 800f5f6:	ab08      	add	r3, sp, #32
 800f5f8:	ed8d 8b08 	vstr	d8, [sp, #32]
 800f5fc:	ed8d 8b0a 	vstr	d8, [sp, #40]	; 0x28
 800f600:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f602:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800f606:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800f60a:	f009 fecd 	bl	80193a8 <rmw_time_equal>
 800f60e:	b118      	cbz	r0, 800f618 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800f610:	ed8d 9b04 	vstr	d9, [sp, #16]
 800f614:	ed8d 8b06 	vstr	d8, [sp, #24]
 800f618:	f8d5 6818 	ldr.w	r6, [r5, #2072]	; 0x818
 800f61c:	f505 6502 	add.w	r5, r5, #2080	; 0x820
 800f620:	f855 7c04 	ldr.w	r7, [r5, #-4]
 800f624:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800f628:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800f62c:	f009 ff12 	bl	8019454 <rmw_time_total_nsec>
 800f630:	1830      	adds	r0, r6, r0
 800f632:	eb47 0101 	adc.w	r1, r7, r1
 800f636:	4548      	cmp	r0, r9
 800f638:	eb71 030a 	sbcs.w	r3, r1, sl
 800f63c:	db05      	blt.n	800f64a <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800f63e:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800f642:	4591      	cmp	r9, r2
 800f644:	eb7a 0303 	sbcs.w	r3, sl, r3
 800f648:	da03      	bge.n	800f652 <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800f64a:	4641      	mov	r1, r8
 800f64c:	4816      	ldr	r0, [pc, #88]	; (800f6a8 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800f64e:	f00a f899 	bl	8019784 <put_memory>
 800f652:	f1bb 0f00 	cmp.w	fp, #0
 800f656:	d014      	beq.n	800f682 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800f658:	46d8      	mov	r8, fp
 800f65a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800f65e:	f895 3820 	ldrb.w	r3, [r5, #2080]	; 0x820
 800f662:	2b04      	cmp	r3, #4
 800f664:	d1bf      	bne.n	800f5e6 <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 800f666:	f8d5 3814 	ldr.w	r3, [r5, #2068]	; 0x814
 800f66a:	3340      	adds	r3, #64	; 0x40
 800f66c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f66e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800f672:	e7c0      	b.n	800f5f6 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800f674:	f8d5 3814 	ldr.w	r3, [r5, #2068]	; 0x814
 800f678:	3348      	adds	r3, #72	; 0x48
 800f67a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f67c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800f680:	e7b9      	b.n	800f5f6 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800f682:	b00d      	add	sp, #52	; 0x34
 800f684:	ecbd 8b06 	vpop	{d8-d10}
 800f688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f68c:	f3af 8000 	nop.w
	...
 800f698:	00000001 	.word	0x00000001
 800f69c:	00000000 	.word	0x00000000
 800f6a0:	0000001e 	.word	0x0000001e
 800f6a4:	00000000 	.word	0x00000000
 800f6a8:	2001062c 	.word	0x2001062c

0800f6ac <run_xrce_session>:
 800f6ac:	b510      	push	{r4, lr}
 800f6ae:	788c      	ldrb	r4, [r1, #2]
 800f6b0:	b086      	sub	sp, #24
 800f6b2:	2c01      	cmp	r4, #1
 800f6b4:	f8ad 200e 	strh.w	r2, [sp, #14]
 800f6b8:	d00c      	beq.n	800f6d4 <run_xrce_session+0x28>
 800f6ba:	2401      	movs	r4, #1
 800f6bc:	4619      	mov	r1, r3
 800f6be:	f10d 020e 	add.w	r2, sp, #14
 800f6c2:	f10d 0317 	add.w	r3, sp, #23
 800f6c6:	9400      	str	r4, [sp, #0]
 800f6c8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800f6cc:	f003 fa08 	bl	8012ae0 <uxr_run_session_until_all_status>
 800f6d0:	b006      	add	sp, #24
 800f6d2:	bd10      	pop	{r4, pc}
 800f6d4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800f6d8:	f002 fe24 	bl	8012324 <uxr_flash_output_streams>
 800f6dc:	4620      	mov	r0, r4
 800f6de:	b006      	add	sp, #24
 800f6e0:	bd10      	pop	{r4, pc}
 800f6e2:	bf00      	nop

0800f6e4 <convert_qos_profile>:
 800f6e4:	7a4a      	ldrb	r2, [r1, #9]
 800f6e6:	f891 c008 	ldrb.w	ip, [r1, #8]
 800f6ea:	2a02      	cmp	r2, #2
 800f6ec:	bf18      	it	ne
 800f6ee:	2200      	movne	r2, #0
 800f6f0:	7002      	strb	r2, [r0, #0]
 800f6f2:	f1ac 0202 	sub.w	r2, ip, #2
 800f6f6:	fab2 f282 	clz	r2, r2
 800f6fa:	0952      	lsrs	r2, r2, #5
 800f6fc:	7042      	strb	r2, [r0, #1]
 800f6fe:	780a      	ldrb	r2, [r1, #0]
 800f700:	8889      	ldrh	r1, [r1, #4]
 800f702:	f1a2 0202 	sub.w	r2, r2, #2
 800f706:	8081      	strh	r1, [r0, #4]
 800f708:	fab2 f282 	clz	r2, r2
 800f70c:	0952      	lsrs	r2, r2, #5
 800f70e:	7082      	strb	r2, [r0, #2]
 800f710:	4770      	bx	lr
 800f712:	bf00      	nop

0800f714 <generate_service_topics>:
 800f714:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f716:	461d      	mov	r5, r3
 800f718:	b083      	sub	sp, #12
 800f71a:	4606      	mov	r6, r0
 800f71c:	4c11      	ldr	r4, [pc, #68]	; (800f764 <generate_service_topics+0x50>)
 800f71e:	4608      	mov	r0, r1
 800f720:	4b11      	ldr	r3, [pc, #68]	; (800f768 <generate_service_topics+0x54>)
 800f722:	4617      	mov	r7, r2
 800f724:	4629      	mov	r1, r5
 800f726:	4a11      	ldr	r2, [pc, #68]	; (800f76c <generate_service_topics+0x58>)
 800f728:	9401      	str	r4, [sp, #4]
 800f72a:	9600      	str	r6, [sp, #0]
 800f72c:	f00e f958 	bl	801d9e0 <sniprintf>
 800f730:	4a0f      	ldr	r2, [pc, #60]	; (800f770 <generate_service_topics+0x5c>)
 800f732:	4604      	mov	r4, r0
 800f734:	4b0f      	ldr	r3, [pc, #60]	; (800f774 <generate_service_topics+0x60>)
 800f736:	9201      	str	r2, [sp, #4]
 800f738:	4638      	mov	r0, r7
 800f73a:	4a0c      	ldr	r2, [pc, #48]	; (800f76c <generate_service_topics+0x58>)
 800f73c:	4629      	mov	r1, r5
 800f73e:	9600      	str	r6, [sp, #0]
 800f740:	f00e f94e 	bl	801d9e0 <sniprintf>
 800f744:	2c00      	cmp	r4, #0
 800f746:	bfa8      	it	ge
 800f748:	42a5      	cmpge	r5, r4
 800f74a:	bfcc      	ite	gt
 800f74c:	2401      	movgt	r4, #1
 800f74e:	2400      	movle	r4, #0
 800f750:	dd05      	ble.n	800f75e <generate_service_topics+0x4a>
 800f752:	2800      	cmp	r0, #0
 800f754:	bfa8      	it	ge
 800f756:	4285      	cmpge	r5, r0
 800f758:	bfcc      	ite	gt
 800f75a:	2401      	movgt	r4, #1
 800f75c:	2400      	movle	r4, #0
 800f75e:	4620      	mov	r0, r4
 800f760:	b003      	add	sp, #12
 800f762:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f764:	0801fc20 	.word	0x0801fc20
 800f768:	0801fc1c 	.word	0x0801fc1c
 800f76c:	0801fbf8 	.word	0x0801fbf8
 800f770:	0801fc14 	.word	0x0801fc14
 800f774:	0801fc10 	.word	0x0801fc10

0800f778 <generate_service_types>:
 800f778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f77c:	4606      	mov	r6, r0
 800f77e:	b087      	sub	sp, #28
 800f780:	461c      	mov	r4, r3
 800f782:	6883      	ldr	r3, [r0, #8]
 800f784:	460d      	mov	r5, r1
 800f786:	4617      	mov	r7, r2
 800f788:	4798      	blx	r3
 800f78a:	68f3      	ldr	r3, [r6, #12]
 800f78c:	4606      	mov	r6, r0
 800f78e:	4798      	blx	r3
 800f790:	2300      	movs	r3, #0
 800f792:	f8d0 b004 	ldr.w	fp, [r0, #4]
 800f796:	6872      	ldr	r2, [r6, #4]
 800f798:	702b      	strb	r3, [r5, #0]
 800f79a:	6813      	ldr	r3, [r2, #0]
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d03f      	beq.n	800f820 <generate_service_types+0xa8>
 800f7a0:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800f834 <generate_service_types+0xbc>
 800f7a4:	4649      	mov	r1, r9
 800f7a6:	f8df 8094 	ldr.w	r8, [pc, #148]	; 800f83c <generate_service_types+0xc4>
 800f7aa:	4628      	mov	r0, r5
 800f7ac:	f8df a090 	ldr.w	sl, [pc, #144]	; 800f840 <generate_service_types+0xc8>
 800f7b0:	f8cd 8014 	str.w	r8, [sp, #20]
 800f7b4:	6852      	ldr	r2, [r2, #4]
 800f7b6:	9100      	str	r1, [sp, #0]
 800f7b8:	4621      	mov	r1, r4
 800f7ba:	f8cd 8008 	str.w	r8, [sp, #8]
 800f7be:	f8cd a004 	str.w	sl, [sp, #4]
 800f7c2:	e9cd 9203 	strd	r9, r2, [sp, #12]
 800f7c6:	4a1a      	ldr	r2, [pc, #104]	; (800f830 <generate_service_types+0xb8>)
 800f7c8:	f00e f90a 	bl	801d9e0 <sniprintf>
 800f7cc:	2300      	movs	r3, #0
 800f7ce:	42a0      	cmp	r0, r4
 800f7d0:	ea6f 0600 	mvn.w	r6, r0
 800f7d4:	703b      	strb	r3, [r7, #0]
 800f7d6:	f8db 3000 	ldr.w	r3, [fp]
 800f7da:	ea4f 76d6 	mov.w	r6, r6, lsr #31
 800f7de:	bfac      	ite	ge
 800f7e0:	2500      	movge	r5, #0
 800f7e2:	2501      	movlt	r5, #1
 800f7e4:	b30b      	cbz	r3, 800f82a <generate_service_types+0xb2>
 800f7e6:	4a13      	ldr	r2, [pc, #76]	; (800f834 <generate_service_types+0xbc>)
 800f7e8:	f8cd 8014 	str.w	r8, [sp, #20]
 800f7ec:	402e      	ands	r6, r5
 800f7ee:	f8db 1004 	ldr.w	r1, [fp, #4]
 800f7f2:	4638      	mov	r0, r7
 800f7f4:	9104      	str	r1, [sp, #16]
 800f7f6:	4621      	mov	r1, r4
 800f7f8:	e9cd 2a00 	strd	r2, sl, [sp]
 800f7fc:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800f800:	4a0b      	ldr	r2, [pc, #44]	; (800f830 <generate_service_types+0xb8>)
 800f802:	f00e f8ed 	bl	801d9e0 <sniprintf>
 800f806:	2800      	cmp	r0, #0
 800f808:	bfb4      	ite	lt
 800f80a:	2600      	movlt	r6, #0
 800f80c:	f006 0601 	andge.w	r6, r6, #1
 800f810:	42a0      	cmp	r0, r4
 800f812:	bfac      	ite	ge
 800f814:	2000      	movge	r0, #0
 800f816:	f006 0001 	andlt.w	r0, r6, #1
 800f81a:	b007      	add	sp, #28
 800f81c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f820:	4b05      	ldr	r3, [pc, #20]	; (800f838 <generate_service_types+0xc0>)
 800f822:	f8df 9010 	ldr.w	r9, [pc, #16]	; 800f834 <generate_service_types+0xbc>
 800f826:	4619      	mov	r1, r3
 800f828:	e7bd      	b.n	800f7a6 <generate_service_types+0x2e>
 800f82a:	4b03      	ldr	r3, [pc, #12]	; (800f838 <generate_service_types+0xc0>)
 800f82c:	461a      	mov	r2, r3
 800f82e:	e7db      	b.n	800f7e8 <generate_service_types+0x70>
 800f830:	0801fbf0 	.word	0x0801fbf0
 800f834:	0801fbec 	.word	0x0801fbec
 800f838:	08020520 	.word	0x08020520
 800f83c:	0801fc00 	.word	0x0801fc00
 800f840:	0801fc04 	.word	0x0801fc04

0800f844 <generate_type_name>:
 800f844:	2300      	movs	r3, #0
 800f846:	b530      	push	{r4, r5, lr}
 800f848:	700b      	strb	r3, [r1, #0]
 800f84a:	b087      	sub	sp, #28
 800f84c:	6803      	ldr	r3, [r0, #0]
 800f84e:	4614      	mov	r4, r2
 800f850:	b1bb      	cbz	r3, 800f882 <generate_type_name+0x3e>
 800f852:	4a0e      	ldr	r2, [pc, #56]	; (800f88c <generate_type_name+0x48>)
 800f854:	4615      	mov	r5, r2
 800f856:	9500      	str	r5, [sp, #0]
 800f858:	9203      	str	r2, [sp, #12]
 800f85a:	4d0d      	ldr	r5, [pc, #52]	; (800f890 <generate_type_name+0x4c>)
 800f85c:	6842      	ldr	r2, [r0, #4]
 800f85e:	4608      	mov	r0, r1
 800f860:	490c      	ldr	r1, [pc, #48]	; (800f894 <generate_type_name+0x50>)
 800f862:	9204      	str	r2, [sp, #16]
 800f864:	9105      	str	r1, [sp, #20]
 800f866:	9102      	str	r1, [sp, #8]
 800f868:	4621      	mov	r1, r4
 800f86a:	4a0b      	ldr	r2, [pc, #44]	; (800f898 <generate_type_name+0x54>)
 800f86c:	9501      	str	r5, [sp, #4]
 800f86e:	f00e f8b7 	bl	801d9e0 <sniprintf>
 800f872:	2800      	cmp	r0, #0
 800f874:	bfa8      	it	ge
 800f876:	4284      	cmpge	r4, r0
 800f878:	bfcc      	ite	gt
 800f87a:	2001      	movgt	r0, #1
 800f87c:	2000      	movle	r0, #0
 800f87e:	b007      	add	sp, #28
 800f880:	bd30      	pop	{r4, r5, pc}
 800f882:	4b06      	ldr	r3, [pc, #24]	; (800f89c <generate_type_name+0x58>)
 800f884:	4a01      	ldr	r2, [pc, #4]	; (800f88c <generate_type_name+0x48>)
 800f886:	461d      	mov	r5, r3
 800f888:	e7e5      	b.n	800f856 <generate_type_name+0x12>
 800f88a:	bf00      	nop
 800f88c:	0801fbec 	.word	0x0801fbec
 800f890:	0801fc04 	.word	0x0801fc04
 800f894:	0801fc00 	.word	0x0801fc00
 800f898:	0801fbf0 	.word	0x0801fbf0
 800f89c:	08020520 	.word	0x08020520

0800f8a0 <generate_topic_name>:
 800f8a0:	b530      	push	{r4, r5, lr}
 800f8a2:	4614      	mov	r4, r2
 800f8a4:	b083      	sub	sp, #12
 800f8a6:	4605      	mov	r5, r0
 800f8a8:	4b07      	ldr	r3, [pc, #28]	; (800f8c8 <generate_topic_name+0x28>)
 800f8aa:	4a08      	ldr	r2, [pc, #32]	; (800f8cc <generate_topic_name+0x2c>)
 800f8ac:	4608      	mov	r0, r1
 800f8ae:	9500      	str	r5, [sp, #0]
 800f8b0:	4621      	mov	r1, r4
 800f8b2:	f00e f895 	bl	801d9e0 <sniprintf>
 800f8b6:	2800      	cmp	r0, #0
 800f8b8:	bfa8      	it	ge
 800f8ba:	4284      	cmpge	r4, r0
 800f8bc:	bfcc      	ite	gt
 800f8be:	2001      	movgt	r0, #1
 800f8c0:	2000      	movle	r0, #0
 800f8c2:	b003      	add	sp, #12
 800f8c4:	bd30      	pop	{r4, r5, pc}
 800f8c6:	bf00      	nop
 800f8c8:	0801fc28 	.word	0x0801fc28
 800f8cc:	0801fc08 	.word	0x0801fc08

0800f8d0 <is_uxrce_rmw_identifier_valid>:
 800f8d0:	b510      	push	{r4, lr}
 800f8d2:	4604      	mov	r4, r0
 800f8d4:	b140      	cbz	r0, 800f8e8 <is_uxrce_rmw_identifier_valid+0x18>
 800f8d6:	f009 ffcb 	bl	8019870 <rmw_get_implementation_identifier>
 800f8da:	4601      	mov	r1, r0
 800f8dc:	4620      	mov	r0, r4
 800f8de:	f7f0 fcaf 	bl	8000240 <strcmp>
 800f8e2:	fab0 f080 	clz	r0, r0
 800f8e6:	0940      	lsrs	r0, r0, #5
 800f8e8:	bd10      	pop	{r4, pc}
 800f8ea:	bf00      	nop

0800f8ec <get_message_typesupport_handle>:
 800f8ec:	6883      	ldr	r3, [r0, #8]
 800f8ee:	4718      	bx	r3

0800f8f0 <get_message_typesupport_handle_function>:
 800f8f0:	b510      	push	{r4, lr}
 800f8f2:	4604      	mov	r4, r0
 800f8f4:	6800      	ldr	r0, [r0, #0]
 800f8f6:	f7f0 fca3 	bl	8000240 <strcmp>
 800f8fa:	2800      	cmp	r0, #0
 800f8fc:	bf0c      	ite	eq
 800f8fe:	4620      	moveq	r0, r4
 800f900:	2000      	movne	r0, #0
 800f902:	bd10      	pop	{r4, pc}

0800f904 <get_service_typesupport_handle>:
 800f904:	6883      	ldr	r3, [r0, #8]
 800f906:	4718      	bx	r3

0800f908 <get_service_typesupport_handle_function>:
 800f908:	b510      	push	{r4, lr}
 800f90a:	4604      	mov	r4, r0
 800f90c:	6800      	ldr	r0, [r0, #0]
 800f90e:	f7f0 fc97 	bl	8000240 <strcmp>
 800f912:	2800      	cmp	r0, #0
 800f914:	bf0c      	ite	eq
 800f916:	4620      	moveq	r0, r4
 800f918:	2000      	movne	r0, #0
 800f91a:	bd10      	pop	{r4, pc}

0800f91c <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 800f91c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f920:	6805      	ldr	r5, [r0, #0]
 800f922:	4604      	mov	r4, r0
 800f924:	460e      	mov	r6, r1
 800f926:	4628      	mov	r0, r5
 800f928:	f7f0 fc8a 	bl	8000240 <strcmp>
 800f92c:	b1c8      	cbz	r0, 800f962 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 800f92e:	4b11      	ldr	r3, [pc, #68]	; (800f974 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	429d      	cmp	r5, r3
 800f934:	d112      	bne.n	800f95c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800f936:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800f93a:	f8d8 4000 	ldr.w	r4, [r8]
 800f93e:	b16c      	cbz	r4, 800f95c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800f940:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800f944:	2700      	movs	r7, #0
 800f946:	3d04      	subs	r5, #4
 800f948:	4631      	mov	r1, r6
 800f94a:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800f94e:	f7f0 fc77 	bl	8000240 <strcmp>
 800f952:	00bb      	lsls	r3, r7, #2
 800f954:	b140      	cbz	r0, 800f968 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 800f956:	3701      	adds	r7, #1
 800f958:	42bc      	cmp	r4, r7
 800f95a:	d1f5      	bne.n	800f948 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 800f95c:	2000      	movs	r0, #0
 800f95e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f962:	4620      	mov	r0, r4
 800f964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f968:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f96c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f970:	58d3      	ldr	r3, [r2, r3]
 800f972:	4718      	bx	r3
 800f974:	20000b60 	.word	0x20000b60

0800f978 <rosidl_typesupport_c__get_service_typesupport_handle_function>:
 800f978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f97c:	6805      	ldr	r5, [r0, #0]
 800f97e:	4604      	mov	r4, r0
 800f980:	460e      	mov	r6, r1
 800f982:	4628      	mov	r0, r5
 800f984:	f7f0 fc5c 	bl	8000240 <strcmp>
 800f988:	b1c8      	cbz	r0, 800f9be <rosidl_typesupport_c__get_service_typesupport_handle_function+0x46>
 800f98a:	4b11      	ldr	r3, [pc, #68]	; (800f9d0 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x58>)
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	429d      	cmp	r5, r3
 800f990:	d112      	bne.n	800f9b8 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 800f992:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800f996:	f8d8 4000 	ldr.w	r4, [r8]
 800f99a:	b16c      	cbz	r4, 800f9b8 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 800f99c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800f9a0:	2700      	movs	r7, #0
 800f9a2:	3d04      	subs	r5, #4
 800f9a4:	4631      	mov	r1, r6
 800f9a6:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800f9aa:	f7f0 fc49 	bl	8000240 <strcmp>
 800f9ae:	00bb      	lsls	r3, r7, #2
 800f9b0:	b140      	cbz	r0, 800f9c4 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x4c>
 800f9b2:	3701      	adds	r7, #1
 800f9b4:	42bc      	cmp	r4, r7
 800f9b6:	d1f5      	bne.n	800f9a4 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x2c>
 800f9b8:	2000      	movs	r0, #0
 800f9ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9be:	4620      	mov	r0, r4
 800f9c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9c4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f9c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f9cc:	58d3      	ldr	r3, [r2, r3]
 800f9ce:	4718      	bx	r3
 800f9d0:	20000b60 	.word	0x20000b60

0800f9d4 <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__size_function__ServiceEventInfo__client_gid>:
 800f9d4:	2010      	movs	r0, #16
 800f9d6:	4770      	bx	lr

0800f9d8 <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__get_const_function__ServiceEventInfo__client_gid>:
 800f9d8:	4408      	add	r0, r1
 800f9da:	4770      	bx	lr

0800f9dc <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__fetch_function__ServiceEventInfo__client_gid>:
 800f9dc:	5c43      	ldrb	r3, [r0, r1]
 800f9de:	7013      	strb	r3, [r2, #0]
 800f9e0:	4770      	bx	lr
 800f9e2:	bf00      	nop

0800f9e4 <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__assign_function__ServiceEventInfo__client_gid>:
 800f9e4:	7813      	ldrb	r3, [r2, #0]
 800f9e6:	5443      	strb	r3, [r0, r1]
 800f9e8:	4770      	bx	lr
 800f9ea:	bf00      	nop

0800f9ec <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__ServiceEventInfo_init_function>:
 800f9ec:	f00b b94c 	b.w	801ac88 <service_msgs__msg__ServiceEventInfo__init>

0800f9f0 <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__ServiceEventInfo_fini_function>:
 800f9f0:	f00b b95c 	b.w	801acac <service_msgs__msg__ServiceEventInfo__fini>

0800f9f4 <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__get_function__ServiceEventInfo__client_gid>:
 800f9f4:	4408      	add	r0, r1
 800f9f6:	4770      	bx	lr

0800f9f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>:
 800f9f8:	b508      	push	{r3, lr}
 800f9fa:	f000 f8db 	bl	800fbb4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f9fe:	4b06      	ldr	r3, [pc, #24]	; (800fa18 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x20>)
 800fa00:	4906      	ldr	r1, [pc, #24]	; (800fa1c <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x24>)
 800fa02:	681a      	ldr	r2, [r3, #0]
 800fa04:	6488      	str	r0, [r1, #72]	; 0x48
 800fa06:	b10a      	cbz	r2, 800fa0c <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x14>
 800fa08:	4803      	ldr	r0, [pc, #12]	; (800fa18 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x20>)
 800fa0a:	bd08      	pop	{r3, pc}
 800fa0c:	4a04      	ldr	r2, [pc, #16]	; (800fa20 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x28>)
 800fa0e:	4802      	ldr	r0, [pc, #8]	; (800fa18 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x20>)
 800fa10:	6812      	ldr	r2, [r2, #0]
 800fa12:	601a      	str	r2, [r3, #0]
 800fa14:	bd08      	pop	{r3, pc}
 800fa16:	bf00      	nop
 800fa18:	20000c58 	.word	0x20000c58
 800fa1c:	20000b68 	.word	0x20000b68
 800fa20:	20000b64 	.word	0x20000b64

0800fa24 <get_serialized_size_service_msgs__msg__ServiceEventInfo>:
 800fa24:	b5b0      	push	{r4, r5, r7, lr}
 800fa26:	4604      	mov	r4, r0
 800fa28:	b1d8      	cbz	r0, 800fa62 <get_serialized_size_service_msgs__msg__ServiceEventInfo+0x3e>
 800fa2a:	460d      	mov	r5, r1
 800fa2c:	2101      	movs	r1, #1
 800fa2e:	4628      	mov	r0, r5
 800fa30:	f002 f87c 	bl	8011b2c <ucdr_alignment>
 800fa34:	1c6b      	adds	r3, r5, #1
 800fa36:	4607      	mov	r7, r0
 800fa38:	1d20      	adds	r0, r4, #4
 800fa3a:	f1c5 0508 	rsb	r5, r5, #8
 800fa3e:	441f      	add	r7, r3
 800fa40:	4639      	mov	r1, r7
 800fa42:	f000 f8c5 	bl	800fbd0 <get_serialized_size_builtin_interfaces__msg__Time>
 800fa46:	4407      	add	r7, r0
 800fa48:	2101      	movs	r1, #1
 800fa4a:	4638      	mov	r0, r7
 800fa4c:	f002 f86e 	bl	8011b2c <ucdr_alignment>
 800fa50:	f100 0410 	add.w	r4, r0, #16
 800fa54:	2108      	movs	r1, #8
 800fa56:	443c      	add	r4, r7
 800fa58:	4620      	mov	r0, r4
 800fa5a:	f002 f867 	bl	8011b2c <ucdr_alignment>
 800fa5e:	4428      	add	r0, r5
 800fa60:	4420      	add	r0, r4
 800fa62:	bdb0      	pop	{r4, r5, r7, pc}

0800fa64 <_ServiceEventInfo__cdr_deserialize>:
 800fa64:	b538      	push	{r3, r4, r5, lr}
 800fa66:	460c      	mov	r4, r1
 800fa68:	b1b9      	cbz	r1, 800fa9a <_ServiceEventInfo__cdr_deserialize+0x36>
 800fa6a:	4605      	mov	r5, r0
 800fa6c:	f000 fbe0 	bl	8010230 <ucdr_deserialize_uint8_t>
 800fa70:	f000 f912 	bl	800fc98 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800fa74:	4603      	mov	r3, r0
 800fa76:	1d21      	adds	r1, r4, #4
 800fa78:	4628      	mov	r0, r5
 800fa7a:	685b      	ldr	r3, [r3, #4]
 800fa7c:	68db      	ldr	r3, [r3, #12]
 800fa7e:	4798      	blx	r3
 800fa80:	f104 010c 	add.w	r1, r4, #12
 800fa84:	4628      	mov	r0, r5
 800fa86:	2210      	movs	r2, #16
 800fa88:	f000 f9d4 	bl	800fe34 <ucdr_deserialize_array_uint8_t>
 800fa8c:	f104 0120 	add.w	r1, r4, #32
 800fa90:	4628      	mov	r0, r5
 800fa92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fa96:	f001 bcd3 	b.w	8011440 <ucdr_deserialize_int64_t>
 800fa9a:	4608      	mov	r0, r1
 800fa9c:	bd38      	pop	{r3, r4, r5, pc}
 800fa9e:	bf00      	nop

0800faa0 <_ServiceEventInfo__cdr_serialize>:
 800faa0:	b1e8      	cbz	r0, 800fade <_ServiceEventInfo__cdr_serialize+0x3e>
 800faa2:	b570      	push	{r4, r5, r6, lr}
 800faa4:	4606      	mov	r6, r0
 800faa6:	460d      	mov	r5, r1
 800faa8:	4604      	mov	r4, r0
 800faaa:	4608      	mov	r0, r1
 800faac:	f816 1b04 	ldrb.w	r1, [r6], #4
 800fab0:	f000 fba8 	bl	8010204 <ucdr_serialize_uint8_t>
 800fab4:	f000 f8f0 	bl	800fc98 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800fab8:	4603      	mov	r3, r0
 800faba:	4629      	mov	r1, r5
 800fabc:	4630      	mov	r0, r6
 800fabe:	685b      	ldr	r3, [r3, #4]
 800fac0:	689b      	ldr	r3, [r3, #8]
 800fac2:	4798      	blx	r3
 800fac4:	2210      	movs	r2, #16
 800fac6:	f104 010c 	add.w	r1, r4, #12
 800faca:	4628      	mov	r0, r5
 800facc:	f000 f94e 	bl	800fd6c <ucdr_serialize_array_uint8_t>
 800fad0:	4628      	mov	r0, r5
 800fad2:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 800fad6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fada:	f001 bbe1 	b.w	80112a0 <ucdr_serialize_int64_t>
 800fade:	4770      	bx	lr

0800fae0 <_ServiceEventInfo__get_serialized_size>:
 800fae0:	b538      	push	{r3, r4, r5, lr}
 800fae2:	4604      	mov	r4, r0
 800fae4:	b1b0      	cbz	r0, 800fb14 <_ServiceEventInfo__get_serialized_size+0x34>
 800fae6:	2101      	movs	r1, #1
 800fae8:	2000      	movs	r0, #0
 800faea:	f002 f81f 	bl	8011b2c <ucdr_alignment>
 800faee:	4605      	mov	r5, r0
 800faf0:	1d20      	adds	r0, r4, #4
 800faf2:	3501      	adds	r5, #1
 800faf4:	4629      	mov	r1, r5
 800faf6:	f000 f86b 	bl	800fbd0 <get_serialized_size_builtin_interfaces__msg__Time>
 800fafa:	4405      	add	r5, r0
 800fafc:	2101      	movs	r1, #1
 800fafe:	4628      	mov	r0, r5
 800fb00:	f002 f814 	bl	8011b2c <ucdr_alignment>
 800fb04:	3010      	adds	r0, #16
 800fb06:	2108      	movs	r1, #8
 800fb08:	4405      	add	r5, r0
 800fb0a:	4628      	mov	r0, r5
 800fb0c:	f002 f80e 	bl	8011b2c <ucdr_alignment>
 800fb10:	3008      	adds	r0, #8
 800fb12:	4428      	add	r0, r5
 800fb14:	bd38      	pop	{r3, r4, r5, pc}
 800fb16:	bf00      	nop

0800fb18 <_ServiceEventInfo__max_serialized_size>:
 800fb18:	b550      	push	{r4, r6, lr}
 800fb1a:	2601      	movs	r6, #1
 800fb1c:	b083      	sub	sp, #12
 800fb1e:	2000      	movs	r0, #0
 800fb20:	4631      	mov	r1, r6
 800fb22:	f88d 6007 	strb.w	r6, [sp, #7]
 800fb26:	f002 f801 	bl	8011b2c <ucdr_alignment>
 800fb2a:	4604      	mov	r4, r0
 800fb2c:	f10d 0007 	add.w	r0, sp, #7
 800fb30:	4434      	add	r4, r6
 800fb32:	4621      	mov	r1, r4
 800fb34:	f000 f89c 	bl	800fc70 <max_serialized_size_builtin_interfaces__msg__Time>
 800fb38:	4404      	add	r4, r0
 800fb3a:	4631      	mov	r1, r6
 800fb3c:	4620      	mov	r0, r4
 800fb3e:	f001 fff5 	bl	8011b2c <ucdr_alignment>
 800fb42:	3010      	adds	r0, #16
 800fb44:	2108      	movs	r1, #8
 800fb46:	4404      	add	r4, r0
 800fb48:	4620      	mov	r0, r4
 800fb4a:	f001 ffef 	bl	8011b2c <ucdr_alignment>
 800fb4e:	3008      	adds	r0, #8
 800fb50:	4420      	add	r0, r4
 800fb52:	b003      	add	sp, #12
 800fb54:	bd50      	pop	{r4, r6, pc}
 800fb56:	bf00      	nop

0800fb58 <max_serialized_size_service_msgs__msg__ServiceEventInfo>:
 800fb58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb5c:	f04f 0801 	mov.w	r8, #1
 800fb60:	460c      	mov	r4, r1
 800fb62:	4607      	mov	r7, r0
 800fb64:	4641      	mov	r1, r8
 800fb66:	4620      	mov	r0, r4
 800fb68:	f887 8000 	strb.w	r8, [r7]
 800fb6c:	eb04 0608 	add.w	r6, r4, r8
 800fb70:	f001 ffdc 	bl	8011b2c <ucdr_alignment>
 800fb74:	4605      	mov	r5, r0
 800fb76:	4638      	mov	r0, r7
 800fb78:	f1c4 0408 	rsb	r4, r4, #8
 800fb7c:	4435      	add	r5, r6
 800fb7e:	4629      	mov	r1, r5
 800fb80:	f000 f876 	bl	800fc70 <max_serialized_size_builtin_interfaces__msg__Time>
 800fb84:	4405      	add	r5, r0
 800fb86:	4641      	mov	r1, r8
 800fb88:	4628      	mov	r0, r5
 800fb8a:	f001 ffcf 	bl	8011b2c <ucdr_alignment>
 800fb8e:	3010      	adds	r0, #16
 800fb90:	2108      	movs	r1, #8
 800fb92:	4405      	add	r5, r0
 800fb94:	4628      	mov	r0, r5
 800fb96:	f001 ffc9 	bl	8011b2c <ucdr_alignment>
 800fb9a:	4420      	add	r0, r4
 800fb9c:	4428      	add	r0, r5
 800fb9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fba2:	bf00      	nop

0800fba4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>:
 800fba4:	4800      	ldr	r0, [pc, #0]	; (800fba8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x4>)
 800fba6:	4770      	bx	lr
 800fba8:	20000c70 	.word	0x20000c70

0800fbac <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function>:
 800fbac:	f00b b8b4 	b.w	801ad18 <builtin_interfaces__msg__Time__init>

0800fbb0 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function>:
 800fbb0:	f00b b8b6 	b.w	801ad20 <builtin_interfaces__msg__Time__fini>

0800fbb4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800fbb4:	4b04      	ldr	r3, [pc, #16]	; (800fbc8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800fbb6:	681a      	ldr	r2, [r3, #0]
 800fbb8:	b10a      	cbz	r2, 800fbbe <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0xa>
 800fbba:	4803      	ldr	r0, [pc, #12]	; (800fbc8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800fbbc:	4770      	bx	lr
 800fbbe:	4a03      	ldr	r2, [pc, #12]	; (800fbcc <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x18>)
 800fbc0:	4801      	ldr	r0, [pc, #4]	; (800fbc8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800fbc2:	6812      	ldr	r2, [r2, #0]
 800fbc4:	601a      	str	r2, [r3, #0]
 800fbc6:	4770      	bx	lr
 800fbc8:	20000d1c 	.word	0x20000d1c
 800fbcc:	20000b64 	.word	0x20000b64

0800fbd0 <get_serialized_size_builtin_interfaces__msg__Time>:
 800fbd0:	b180      	cbz	r0, 800fbf4 <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 800fbd2:	b538      	push	{r3, r4, r5, lr}
 800fbd4:	460d      	mov	r5, r1
 800fbd6:	2104      	movs	r1, #4
 800fbd8:	4628      	mov	r0, r5
 800fbda:	f001 ffa7 	bl	8011b2c <ucdr_alignment>
 800fbde:	1d2b      	adds	r3, r5, #4
 800fbe0:	f1c5 0504 	rsb	r5, r5, #4
 800fbe4:	2104      	movs	r1, #4
 800fbe6:	181c      	adds	r4, r3, r0
 800fbe8:	4620      	mov	r0, r4
 800fbea:	f001 ff9f 	bl	8011b2c <ucdr_alignment>
 800fbee:	4428      	add	r0, r5
 800fbf0:	4420      	add	r0, r4
 800fbf2:	bd38      	pop	{r3, r4, r5, pc}
 800fbf4:	4770      	bx	lr
 800fbf6:	bf00      	nop

0800fbf8 <_Time__cdr_deserialize>:
 800fbf8:	b538      	push	{r3, r4, r5, lr}
 800fbfa:	460c      	mov	r4, r1
 800fbfc:	b141      	cbz	r1, 800fc10 <_Time__cdr_deserialize+0x18>
 800fbfe:	4605      	mov	r5, r0
 800fc00:	f001 fabe 	bl	8011180 <ucdr_deserialize_int32_t>
 800fc04:	1d21      	adds	r1, r4, #4
 800fc06:	4628      	mov	r0, r5
 800fc08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fc0c:	f000 be40 	b.w	8010890 <ucdr_deserialize_uint32_t>
 800fc10:	4608      	mov	r0, r1
 800fc12:	bd38      	pop	{r3, r4, r5, pc}

0800fc14 <_Time__cdr_serialize>:
 800fc14:	b160      	cbz	r0, 800fc30 <_Time__cdr_serialize+0x1c>
 800fc16:	b538      	push	{r3, r4, r5, lr}
 800fc18:	460d      	mov	r5, r1
 800fc1a:	4604      	mov	r4, r0
 800fc1c:	6801      	ldr	r1, [r0, #0]
 800fc1e:	4628      	mov	r0, r5
 800fc20:	f001 fa16 	bl	8011050 <ucdr_serialize_int32_t>
 800fc24:	6861      	ldr	r1, [r4, #4]
 800fc26:	4628      	mov	r0, r5
 800fc28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fc2c:	f000 bd00 	b.w	8010630 <ucdr_serialize_uint32_t>
 800fc30:	4770      	bx	lr
 800fc32:	bf00      	nop

0800fc34 <_Time__get_serialized_size>:
 800fc34:	b160      	cbz	r0, 800fc50 <_Time__get_serialized_size+0x1c>
 800fc36:	2104      	movs	r1, #4
 800fc38:	2000      	movs	r0, #0
 800fc3a:	b510      	push	{r4, lr}
 800fc3c:	f001 ff76 	bl	8011b2c <ucdr_alignment>
 800fc40:	2104      	movs	r1, #4
 800fc42:	1844      	adds	r4, r0, r1
 800fc44:	4620      	mov	r0, r4
 800fc46:	f001 ff71 	bl	8011b2c <ucdr_alignment>
 800fc4a:	3004      	adds	r0, #4
 800fc4c:	4420      	add	r0, r4
 800fc4e:	bd10      	pop	{r4, pc}
 800fc50:	4770      	bx	lr
 800fc52:	bf00      	nop

0800fc54 <_Time__max_serialized_size>:
 800fc54:	b510      	push	{r4, lr}
 800fc56:	2104      	movs	r1, #4
 800fc58:	2000      	movs	r0, #0
 800fc5a:	f001 ff67 	bl	8011b2c <ucdr_alignment>
 800fc5e:	2104      	movs	r1, #4
 800fc60:	1844      	adds	r4, r0, r1
 800fc62:	4620      	mov	r0, r4
 800fc64:	f001 ff62 	bl	8011b2c <ucdr_alignment>
 800fc68:	3004      	adds	r0, #4
 800fc6a:	4420      	add	r0, r4
 800fc6c:	bd10      	pop	{r4, pc}
 800fc6e:	bf00      	nop

0800fc70 <max_serialized_size_builtin_interfaces__msg__Time>:
 800fc70:	b538      	push	{r3, r4, r5, lr}
 800fc72:	460c      	mov	r4, r1
 800fc74:	2301      	movs	r3, #1
 800fc76:	2104      	movs	r1, #4
 800fc78:	1d25      	adds	r5, r4, #4
 800fc7a:	7003      	strb	r3, [r0, #0]
 800fc7c:	4620      	mov	r0, r4
 800fc7e:	f1c4 0404 	rsb	r4, r4, #4
 800fc82:	f001 ff53 	bl	8011b2c <ucdr_alignment>
 800fc86:	4405      	add	r5, r0
 800fc88:	2104      	movs	r1, #4
 800fc8a:	4628      	mov	r0, r5
 800fc8c:	f001 ff4e 	bl	8011b2c <ucdr_alignment>
 800fc90:	4420      	add	r0, r4
 800fc92:	4428      	add	r0, r5
 800fc94:	bd38      	pop	{r3, r4, r5, pc}
 800fc96:	bf00      	nop

0800fc98 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800fc98:	4800      	ldr	r0, [pc, #0]	; (800fc9c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 800fc9a:	4770      	bx	lr
 800fc9c:	20000d34 	.word	0x20000d34

0800fca0 <ucdr_serialize_endian_array_char>:
 800fca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fca4:	4619      	mov	r1, r3
 800fca6:	461f      	mov	r7, r3
 800fca8:	4605      	mov	r5, r0
 800fcaa:	4690      	mov	r8, r2
 800fcac:	f001 fee6 	bl	8011a7c <ucdr_check_buffer_available_for>
 800fcb0:	b9e0      	cbnz	r0, 800fcec <ucdr_serialize_endian_array_char+0x4c>
 800fcb2:	463e      	mov	r6, r7
 800fcb4:	e00b      	b.n	800fcce <ucdr_serialize_endian_array_char+0x2e>
 800fcb6:	4441      	add	r1, r8
 800fcb8:	68a8      	ldr	r0, [r5, #8]
 800fcba:	4622      	mov	r2, r4
 800fcbc:	1b36      	subs	r6, r6, r4
 800fcbe:	f00e f89a 	bl	801ddf6 <memcpy>
 800fcc2:	68ab      	ldr	r3, [r5, #8]
 800fcc4:	6928      	ldr	r0, [r5, #16]
 800fcc6:	4423      	add	r3, r4
 800fcc8:	4420      	add	r0, r4
 800fcca:	60ab      	str	r3, [r5, #8]
 800fccc:	6128      	str	r0, [r5, #16]
 800fcce:	4631      	mov	r1, r6
 800fcd0:	2201      	movs	r2, #1
 800fcd2:	4628      	mov	r0, r5
 800fcd4:	f001 ff5c 	bl	8011b90 <ucdr_check_final_buffer_behavior_array>
 800fcd8:	1bb9      	subs	r1, r7, r6
 800fcda:	4604      	mov	r4, r0
 800fcdc:	2800      	cmp	r0, #0
 800fcde:	d1ea      	bne.n	800fcb6 <ucdr_serialize_endian_array_char+0x16>
 800fce0:	2301      	movs	r3, #1
 800fce2:	7da8      	ldrb	r0, [r5, #22]
 800fce4:	756b      	strb	r3, [r5, #21]
 800fce6:	4058      	eors	r0, r3
 800fce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fcec:	463a      	mov	r2, r7
 800fcee:	4641      	mov	r1, r8
 800fcf0:	68a8      	ldr	r0, [r5, #8]
 800fcf2:	f00e f880 	bl	801ddf6 <memcpy>
 800fcf6:	68aa      	ldr	r2, [r5, #8]
 800fcf8:	692b      	ldr	r3, [r5, #16]
 800fcfa:	443a      	add	r2, r7
 800fcfc:	443b      	add	r3, r7
 800fcfe:	60aa      	str	r2, [r5, #8]
 800fd00:	612b      	str	r3, [r5, #16]
 800fd02:	e7ed      	b.n	800fce0 <ucdr_serialize_endian_array_char+0x40>

0800fd04 <ucdr_deserialize_endian_array_char>:
 800fd04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd08:	4619      	mov	r1, r3
 800fd0a:	461f      	mov	r7, r3
 800fd0c:	4605      	mov	r5, r0
 800fd0e:	4690      	mov	r8, r2
 800fd10:	f001 feb4 	bl	8011a7c <ucdr_check_buffer_available_for>
 800fd14:	b9e8      	cbnz	r0, 800fd52 <ucdr_deserialize_endian_array_char+0x4e>
 800fd16:	463e      	mov	r6, r7
 800fd18:	e00c      	b.n	800fd34 <ucdr_deserialize_endian_array_char+0x30>
 800fd1a:	eb08 0003 	add.w	r0, r8, r3
 800fd1e:	68a9      	ldr	r1, [r5, #8]
 800fd20:	4622      	mov	r2, r4
 800fd22:	1b36      	subs	r6, r6, r4
 800fd24:	f00e f867 	bl	801ddf6 <memcpy>
 800fd28:	68ab      	ldr	r3, [r5, #8]
 800fd2a:	6928      	ldr	r0, [r5, #16]
 800fd2c:	4423      	add	r3, r4
 800fd2e:	4420      	add	r0, r4
 800fd30:	60ab      	str	r3, [r5, #8]
 800fd32:	6128      	str	r0, [r5, #16]
 800fd34:	4631      	mov	r1, r6
 800fd36:	2201      	movs	r2, #1
 800fd38:	4628      	mov	r0, r5
 800fd3a:	f001 ff29 	bl	8011b90 <ucdr_check_final_buffer_behavior_array>
 800fd3e:	1bbb      	subs	r3, r7, r6
 800fd40:	4604      	mov	r4, r0
 800fd42:	2800      	cmp	r0, #0
 800fd44:	d1e9      	bne.n	800fd1a <ucdr_deserialize_endian_array_char+0x16>
 800fd46:	2301      	movs	r3, #1
 800fd48:	7da8      	ldrb	r0, [r5, #22]
 800fd4a:	756b      	strb	r3, [r5, #21]
 800fd4c:	4058      	eors	r0, r3
 800fd4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd52:	463a      	mov	r2, r7
 800fd54:	68a9      	ldr	r1, [r5, #8]
 800fd56:	4640      	mov	r0, r8
 800fd58:	f00e f84d 	bl	801ddf6 <memcpy>
 800fd5c:	68aa      	ldr	r2, [r5, #8]
 800fd5e:	692b      	ldr	r3, [r5, #16]
 800fd60:	443a      	add	r2, r7
 800fd62:	443b      	add	r3, r7
 800fd64:	60aa      	str	r2, [r5, #8]
 800fd66:	612b      	str	r3, [r5, #16]
 800fd68:	e7ed      	b.n	800fd46 <ucdr_deserialize_endian_array_char+0x42>
 800fd6a:	bf00      	nop

0800fd6c <ucdr_serialize_array_uint8_t>:
 800fd6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd70:	4688      	mov	r8, r1
 800fd72:	4611      	mov	r1, r2
 800fd74:	4617      	mov	r7, r2
 800fd76:	4605      	mov	r5, r0
 800fd78:	f001 fe80 	bl	8011a7c <ucdr_check_buffer_available_for>
 800fd7c:	b9e0      	cbnz	r0, 800fdb8 <ucdr_serialize_array_uint8_t+0x4c>
 800fd7e:	463e      	mov	r6, r7
 800fd80:	e00b      	b.n	800fd9a <ucdr_serialize_array_uint8_t+0x2e>
 800fd82:	4441      	add	r1, r8
 800fd84:	68a8      	ldr	r0, [r5, #8]
 800fd86:	4622      	mov	r2, r4
 800fd88:	1b36      	subs	r6, r6, r4
 800fd8a:	f00e f834 	bl	801ddf6 <memcpy>
 800fd8e:	68ab      	ldr	r3, [r5, #8]
 800fd90:	6928      	ldr	r0, [r5, #16]
 800fd92:	4423      	add	r3, r4
 800fd94:	4420      	add	r0, r4
 800fd96:	60ab      	str	r3, [r5, #8]
 800fd98:	6128      	str	r0, [r5, #16]
 800fd9a:	4631      	mov	r1, r6
 800fd9c:	2201      	movs	r2, #1
 800fd9e:	4628      	mov	r0, r5
 800fda0:	f001 fef6 	bl	8011b90 <ucdr_check_final_buffer_behavior_array>
 800fda4:	1bb9      	subs	r1, r7, r6
 800fda6:	4604      	mov	r4, r0
 800fda8:	2800      	cmp	r0, #0
 800fdaa:	d1ea      	bne.n	800fd82 <ucdr_serialize_array_uint8_t+0x16>
 800fdac:	2301      	movs	r3, #1
 800fdae:	7da8      	ldrb	r0, [r5, #22]
 800fdb0:	756b      	strb	r3, [r5, #21]
 800fdb2:	4058      	eors	r0, r3
 800fdb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fdb8:	463a      	mov	r2, r7
 800fdba:	4641      	mov	r1, r8
 800fdbc:	68a8      	ldr	r0, [r5, #8]
 800fdbe:	f00e f81a 	bl	801ddf6 <memcpy>
 800fdc2:	68aa      	ldr	r2, [r5, #8]
 800fdc4:	692b      	ldr	r3, [r5, #16]
 800fdc6:	443a      	add	r2, r7
 800fdc8:	443b      	add	r3, r7
 800fdca:	60aa      	str	r2, [r5, #8]
 800fdcc:	612b      	str	r3, [r5, #16]
 800fdce:	e7ed      	b.n	800fdac <ucdr_serialize_array_uint8_t+0x40>

0800fdd0 <ucdr_serialize_endian_array_uint8_t>:
 800fdd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fdd4:	4619      	mov	r1, r3
 800fdd6:	461f      	mov	r7, r3
 800fdd8:	4605      	mov	r5, r0
 800fdda:	4690      	mov	r8, r2
 800fddc:	f001 fe4e 	bl	8011a7c <ucdr_check_buffer_available_for>
 800fde0:	b9e0      	cbnz	r0, 800fe1c <ucdr_serialize_endian_array_uint8_t+0x4c>
 800fde2:	463e      	mov	r6, r7
 800fde4:	e00b      	b.n	800fdfe <ucdr_serialize_endian_array_uint8_t+0x2e>
 800fde6:	4441      	add	r1, r8
 800fde8:	68a8      	ldr	r0, [r5, #8]
 800fdea:	4622      	mov	r2, r4
 800fdec:	1b36      	subs	r6, r6, r4
 800fdee:	f00e f802 	bl	801ddf6 <memcpy>
 800fdf2:	68ab      	ldr	r3, [r5, #8]
 800fdf4:	6928      	ldr	r0, [r5, #16]
 800fdf6:	4423      	add	r3, r4
 800fdf8:	4420      	add	r0, r4
 800fdfa:	60ab      	str	r3, [r5, #8]
 800fdfc:	6128      	str	r0, [r5, #16]
 800fdfe:	4631      	mov	r1, r6
 800fe00:	2201      	movs	r2, #1
 800fe02:	4628      	mov	r0, r5
 800fe04:	f001 fec4 	bl	8011b90 <ucdr_check_final_buffer_behavior_array>
 800fe08:	1bb9      	subs	r1, r7, r6
 800fe0a:	4604      	mov	r4, r0
 800fe0c:	2800      	cmp	r0, #0
 800fe0e:	d1ea      	bne.n	800fde6 <ucdr_serialize_endian_array_uint8_t+0x16>
 800fe10:	2301      	movs	r3, #1
 800fe12:	7da8      	ldrb	r0, [r5, #22]
 800fe14:	756b      	strb	r3, [r5, #21]
 800fe16:	4058      	eors	r0, r3
 800fe18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe1c:	463a      	mov	r2, r7
 800fe1e:	4641      	mov	r1, r8
 800fe20:	68a8      	ldr	r0, [r5, #8]
 800fe22:	f00d ffe8 	bl	801ddf6 <memcpy>
 800fe26:	68aa      	ldr	r2, [r5, #8]
 800fe28:	692b      	ldr	r3, [r5, #16]
 800fe2a:	443a      	add	r2, r7
 800fe2c:	443b      	add	r3, r7
 800fe2e:	60aa      	str	r2, [r5, #8]
 800fe30:	612b      	str	r3, [r5, #16]
 800fe32:	e7ed      	b.n	800fe10 <ucdr_serialize_endian_array_uint8_t+0x40>

0800fe34 <ucdr_deserialize_array_uint8_t>:
 800fe34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe38:	4688      	mov	r8, r1
 800fe3a:	4611      	mov	r1, r2
 800fe3c:	4617      	mov	r7, r2
 800fe3e:	4605      	mov	r5, r0
 800fe40:	f001 fe1c 	bl	8011a7c <ucdr_check_buffer_available_for>
 800fe44:	b9e8      	cbnz	r0, 800fe82 <ucdr_deserialize_array_uint8_t+0x4e>
 800fe46:	463e      	mov	r6, r7
 800fe48:	e00c      	b.n	800fe64 <ucdr_deserialize_array_uint8_t+0x30>
 800fe4a:	eb08 0003 	add.w	r0, r8, r3
 800fe4e:	68a9      	ldr	r1, [r5, #8]
 800fe50:	4622      	mov	r2, r4
 800fe52:	1b36      	subs	r6, r6, r4
 800fe54:	f00d ffcf 	bl	801ddf6 <memcpy>
 800fe58:	68ab      	ldr	r3, [r5, #8]
 800fe5a:	6928      	ldr	r0, [r5, #16]
 800fe5c:	4423      	add	r3, r4
 800fe5e:	4420      	add	r0, r4
 800fe60:	60ab      	str	r3, [r5, #8]
 800fe62:	6128      	str	r0, [r5, #16]
 800fe64:	4631      	mov	r1, r6
 800fe66:	2201      	movs	r2, #1
 800fe68:	4628      	mov	r0, r5
 800fe6a:	f001 fe91 	bl	8011b90 <ucdr_check_final_buffer_behavior_array>
 800fe6e:	1bbb      	subs	r3, r7, r6
 800fe70:	4604      	mov	r4, r0
 800fe72:	2800      	cmp	r0, #0
 800fe74:	d1e9      	bne.n	800fe4a <ucdr_deserialize_array_uint8_t+0x16>
 800fe76:	2301      	movs	r3, #1
 800fe78:	7da8      	ldrb	r0, [r5, #22]
 800fe7a:	756b      	strb	r3, [r5, #21]
 800fe7c:	4058      	eors	r0, r3
 800fe7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe82:	463a      	mov	r2, r7
 800fe84:	68a9      	ldr	r1, [r5, #8]
 800fe86:	4640      	mov	r0, r8
 800fe88:	f00d ffb5 	bl	801ddf6 <memcpy>
 800fe8c:	68aa      	ldr	r2, [r5, #8]
 800fe8e:	692b      	ldr	r3, [r5, #16]
 800fe90:	443a      	add	r2, r7
 800fe92:	443b      	add	r3, r7
 800fe94:	60aa      	str	r2, [r5, #8]
 800fe96:	612b      	str	r3, [r5, #16]
 800fe98:	e7ed      	b.n	800fe76 <ucdr_deserialize_array_uint8_t+0x42>
 800fe9a:	bf00      	nop

0800fe9c <ucdr_deserialize_endian_array_uint8_t>:
 800fe9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fea0:	4619      	mov	r1, r3
 800fea2:	461f      	mov	r7, r3
 800fea4:	4605      	mov	r5, r0
 800fea6:	4690      	mov	r8, r2
 800fea8:	f001 fde8 	bl	8011a7c <ucdr_check_buffer_available_for>
 800feac:	b9e8      	cbnz	r0, 800feea <ucdr_deserialize_endian_array_uint8_t+0x4e>
 800feae:	463e      	mov	r6, r7
 800feb0:	e00c      	b.n	800fecc <ucdr_deserialize_endian_array_uint8_t+0x30>
 800feb2:	eb08 0003 	add.w	r0, r8, r3
 800feb6:	68a9      	ldr	r1, [r5, #8]
 800feb8:	4622      	mov	r2, r4
 800feba:	1b36      	subs	r6, r6, r4
 800febc:	f00d ff9b 	bl	801ddf6 <memcpy>
 800fec0:	68ab      	ldr	r3, [r5, #8]
 800fec2:	6928      	ldr	r0, [r5, #16]
 800fec4:	4423      	add	r3, r4
 800fec6:	4420      	add	r0, r4
 800fec8:	60ab      	str	r3, [r5, #8]
 800feca:	6128      	str	r0, [r5, #16]
 800fecc:	4631      	mov	r1, r6
 800fece:	2201      	movs	r2, #1
 800fed0:	4628      	mov	r0, r5
 800fed2:	f001 fe5d 	bl	8011b90 <ucdr_check_final_buffer_behavior_array>
 800fed6:	1bbb      	subs	r3, r7, r6
 800fed8:	4604      	mov	r4, r0
 800feda:	2800      	cmp	r0, #0
 800fedc:	d1e9      	bne.n	800feb2 <ucdr_deserialize_endian_array_uint8_t+0x16>
 800fede:	2301      	movs	r3, #1
 800fee0:	7da8      	ldrb	r0, [r5, #22]
 800fee2:	756b      	strb	r3, [r5, #21]
 800fee4:	4058      	eors	r0, r3
 800fee6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800feea:	463a      	mov	r2, r7
 800feec:	68a9      	ldr	r1, [r5, #8]
 800feee:	4640      	mov	r0, r8
 800fef0:	f00d ff81 	bl	801ddf6 <memcpy>
 800fef4:	68aa      	ldr	r2, [r5, #8]
 800fef6:	692b      	ldr	r3, [r5, #16]
 800fef8:	443a      	add	r2, r7
 800fefa:	443b      	add	r3, r7
 800fefc:	60aa      	str	r2, [r5, #8]
 800fefe:	612b      	str	r3, [r5, #16]
 800ff00:	e7ed      	b.n	800fede <ucdr_deserialize_endian_array_uint8_t+0x42>
 800ff02:	bf00      	nop

0800ff04 <ucdr_serialize_array_int16_t>:
 800ff04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff08:	4604      	mov	r4, r0
 800ff0a:	460e      	mov	r6, r1
 800ff0c:	2102      	movs	r1, #2
 800ff0e:	4617      	mov	r7, r2
 800ff10:	f001 fe14 	bl	8011b3c <ucdr_buffer_alignment>
 800ff14:	4601      	mov	r1, r0
 800ff16:	4620      	mov	r0, r4
 800ff18:	7d65      	ldrb	r5, [r4, #21]
 800ff1a:	f001 fe57 	bl	8011bcc <ucdr_advance_buffer>
 800ff1e:	7d21      	ldrb	r1, [r4, #20]
 800ff20:	7565      	strb	r5, [r4, #21]
 800ff22:	2901      	cmp	r1, #1
 800ff24:	d011      	beq.n	800ff4a <ucdr_serialize_array_int16_t+0x46>
 800ff26:	b15f      	cbz	r7, 800ff40 <ucdr_serialize_array_int16_t+0x3c>
 800ff28:	3e02      	subs	r6, #2
 800ff2a:	2500      	movs	r5, #0
 800ff2c:	e000      	b.n	800ff30 <ucdr_serialize_array_int16_t+0x2c>
 800ff2e:	7d21      	ldrb	r1, [r4, #20]
 800ff30:	3501      	adds	r5, #1
 800ff32:	f936 2f02 	ldrsh.w	r2, [r6, #2]!
 800ff36:	4620      	mov	r0, r4
 800ff38:	f000 ff20 	bl	8010d7c <ucdr_serialize_endian_int16_t>
 800ff3c:	42af      	cmp	r7, r5
 800ff3e:	d1f6      	bne.n	800ff2e <ucdr_serialize_array_int16_t+0x2a>
 800ff40:	7da0      	ldrb	r0, [r4, #22]
 800ff42:	f080 0001 	eor.w	r0, r0, #1
 800ff46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff4a:	007f      	lsls	r7, r7, #1
 800ff4c:	4620      	mov	r0, r4
 800ff4e:	4639      	mov	r1, r7
 800ff50:	f001 fd94 	bl	8011a7c <ucdr_check_buffer_available_for>
 800ff54:	b9f8      	cbnz	r0, 800ff96 <ucdr_serialize_array_int16_t+0x92>
 800ff56:	46b8      	mov	r8, r7
 800ff58:	e00c      	b.n	800ff74 <ucdr_serialize_array_int16_t+0x70>
 800ff5a:	462a      	mov	r2, r5
 800ff5c:	4431      	add	r1, r6
 800ff5e:	68a0      	ldr	r0, [r4, #8]
 800ff60:	eba8 0805 	sub.w	r8, r8, r5
 800ff64:	f00d ff47 	bl	801ddf6 <memcpy>
 800ff68:	68a2      	ldr	r2, [r4, #8]
 800ff6a:	6923      	ldr	r3, [r4, #16]
 800ff6c:	442a      	add	r2, r5
 800ff6e:	442b      	add	r3, r5
 800ff70:	60a2      	str	r2, [r4, #8]
 800ff72:	6123      	str	r3, [r4, #16]
 800ff74:	4641      	mov	r1, r8
 800ff76:	2202      	movs	r2, #2
 800ff78:	4620      	mov	r0, r4
 800ff7a:	f001 fe09 	bl	8011b90 <ucdr_check_final_buffer_behavior_array>
 800ff7e:	eba7 0108 	sub.w	r1, r7, r8
 800ff82:	4605      	mov	r5, r0
 800ff84:	2800      	cmp	r0, #0
 800ff86:	d1e8      	bne.n	800ff5a <ucdr_serialize_array_int16_t+0x56>
 800ff88:	2302      	movs	r3, #2
 800ff8a:	7da0      	ldrb	r0, [r4, #22]
 800ff8c:	7563      	strb	r3, [r4, #21]
 800ff8e:	f080 0001 	eor.w	r0, r0, #1
 800ff92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff96:	463a      	mov	r2, r7
 800ff98:	4631      	mov	r1, r6
 800ff9a:	68a0      	ldr	r0, [r4, #8]
 800ff9c:	f00d ff2b 	bl	801ddf6 <memcpy>
 800ffa0:	68a2      	ldr	r2, [r4, #8]
 800ffa2:	6923      	ldr	r3, [r4, #16]
 800ffa4:	443a      	add	r2, r7
 800ffa6:	441f      	add	r7, r3
 800ffa8:	60a2      	str	r2, [r4, #8]
 800ffaa:	6127      	str	r7, [r4, #16]
 800ffac:	e7ec      	b.n	800ff88 <ucdr_serialize_array_int16_t+0x84>
 800ffae:	bf00      	nop

0800ffb0 <ucdr_deserialize_array_int16_t>:
 800ffb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffb4:	4604      	mov	r4, r0
 800ffb6:	460e      	mov	r6, r1
 800ffb8:	2102      	movs	r1, #2
 800ffba:	4617      	mov	r7, r2
 800ffbc:	f001 fdbe 	bl	8011b3c <ucdr_buffer_alignment>
 800ffc0:	4601      	mov	r1, r0
 800ffc2:	4620      	mov	r0, r4
 800ffc4:	7d65      	ldrb	r5, [r4, #21]
 800ffc6:	f001 fe01 	bl	8011bcc <ucdr_advance_buffer>
 800ffca:	7d21      	ldrb	r1, [r4, #20]
 800ffcc:	7565      	strb	r5, [r4, #21]
 800ffce:	2901      	cmp	r1, #1
 800ffd0:	d010      	beq.n	800fff4 <ucdr_deserialize_array_int16_t+0x44>
 800ffd2:	b157      	cbz	r7, 800ffea <ucdr_deserialize_array_int16_t+0x3a>
 800ffd4:	2500      	movs	r5, #0
 800ffd6:	e000      	b.n	800ffda <ucdr_deserialize_array_int16_t+0x2a>
 800ffd8:	7d21      	ldrb	r1, [r4, #20]
 800ffda:	3501      	adds	r5, #1
 800ffdc:	4632      	mov	r2, r6
 800ffde:	4620      	mov	r0, r4
 800ffe0:	3602      	adds	r6, #2
 800ffe2:	f000 ffbf 	bl	8010f64 <ucdr_deserialize_endian_int16_t>
 800ffe6:	42af      	cmp	r7, r5
 800ffe8:	d1f6      	bne.n	800ffd8 <ucdr_deserialize_array_int16_t+0x28>
 800ffea:	7da0      	ldrb	r0, [r4, #22]
 800ffec:	f080 0001 	eor.w	r0, r0, #1
 800fff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fff4:	007f      	lsls	r7, r7, #1
 800fff6:	4620      	mov	r0, r4
 800fff8:	4639      	mov	r1, r7
 800fffa:	f001 fd3f 	bl	8011a7c <ucdr_check_buffer_available_for>
 800fffe:	b9f8      	cbnz	r0, 8010040 <ucdr_deserialize_array_int16_t+0x90>
 8010000:	46b8      	mov	r8, r7
 8010002:	e00c      	b.n	801001e <ucdr_deserialize_array_int16_t+0x6e>
 8010004:	18f0      	adds	r0, r6, r3
 8010006:	462a      	mov	r2, r5
 8010008:	68a1      	ldr	r1, [r4, #8]
 801000a:	eba8 0805 	sub.w	r8, r8, r5
 801000e:	f00d fef2 	bl	801ddf6 <memcpy>
 8010012:	68a2      	ldr	r2, [r4, #8]
 8010014:	6923      	ldr	r3, [r4, #16]
 8010016:	442a      	add	r2, r5
 8010018:	442b      	add	r3, r5
 801001a:	60a2      	str	r2, [r4, #8]
 801001c:	6123      	str	r3, [r4, #16]
 801001e:	4641      	mov	r1, r8
 8010020:	2202      	movs	r2, #2
 8010022:	4620      	mov	r0, r4
 8010024:	f001 fdb4 	bl	8011b90 <ucdr_check_final_buffer_behavior_array>
 8010028:	eba7 0308 	sub.w	r3, r7, r8
 801002c:	4605      	mov	r5, r0
 801002e:	2800      	cmp	r0, #0
 8010030:	d1e8      	bne.n	8010004 <ucdr_deserialize_array_int16_t+0x54>
 8010032:	2302      	movs	r3, #2
 8010034:	7da0      	ldrb	r0, [r4, #22]
 8010036:	7563      	strb	r3, [r4, #21]
 8010038:	f080 0001 	eor.w	r0, r0, #1
 801003c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010040:	463a      	mov	r2, r7
 8010042:	68a1      	ldr	r1, [r4, #8]
 8010044:	4630      	mov	r0, r6
 8010046:	f00d fed6 	bl	801ddf6 <memcpy>
 801004a:	68a2      	ldr	r2, [r4, #8]
 801004c:	6923      	ldr	r3, [r4, #16]
 801004e:	443a      	add	r2, r7
 8010050:	441f      	add	r7, r3
 8010052:	60a2      	str	r2, [r4, #8]
 8010054:	6127      	str	r7, [r4, #16]
 8010056:	e7ec      	b.n	8010032 <ucdr_deserialize_array_int16_t+0x82>

08010058 <ucdr_serialize_array_float>:
 8010058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801005c:	4604      	mov	r4, r0
 801005e:	460e      	mov	r6, r1
 8010060:	2104      	movs	r1, #4
 8010062:	4617      	mov	r7, r2
 8010064:	f001 fd6a 	bl	8011b3c <ucdr_buffer_alignment>
 8010068:	4601      	mov	r1, r0
 801006a:	4620      	mov	r0, r4
 801006c:	7d65      	ldrb	r5, [r4, #21]
 801006e:	f001 fdad 	bl	8011bcc <ucdr_advance_buffer>
 8010072:	7d21      	ldrb	r1, [r4, #20]
 8010074:	7565      	strb	r5, [r4, #21]
 8010076:	2901      	cmp	r1, #1
 8010078:	d010      	beq.n	801009c <ucdr_serialize_array_float+0x44>
 801007a:	b157      	cbz	r7, 8010092 <ucdr_serialize_array_float+0x3a>
 801007c:	2500      	movs	r5, #0
 801007e:	e000      	b.n	8010082 <ucdr_serialize_array_float+0x2a>
 8010080:	7d21      	ldrb	r1, [r4, #20]
 8010082:	3501      	adds	r5, #1
 8010084:	ecb6 0a01 	vldmia	r6!, {s0}
 8010088:	4620      	mov	r0, r4
 801008a:	f001 fb37 	bl	80116fc <ucdr_serialize_endian_float>
 801008e:	42af      	cmp	r7, r5
 8010090:	d1f6      	bne.n	8010080 <ucdr_serialize_array_float+0x28>
 8010092:	7da0      	ldrb	r0, [r4, #22]
 8010094:	f080 0001 	eor.w	r0, r0, #1
 8010098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801009c:	00bf      	lsls	r7, r7, #2
 801009e:	4620      	mov	r0, r4
 80100a0:	4639      	mov	r1, r7
 80100a2:	f001 fceb 	bl	8011a7c <ucdr_check_buffer_available_for>
 80100a6:	b9f8      	cbnz	r0, 80100e8 <ucdr_serialize_array_float+0x90>
 80100a8:	46b8      	mov	r8, r7
 80100aa:	e00c      	b.n	80100c6 <ucdr_serialize_array_float+0x6e>
 80100ac:	462a      	mov	r2, r5
 80100ae:	4431      	add	r1, r6
 80100b0:	68a0      	ldr	r0, [r4, #8]
 80100b2:	eba8 0805 	sub.w	r8, r8, r5
 80100b6:	f00d fe9e 	bl	801ddf6 <memcpy>
 80100ba:	68a2      	ldr	r2, [r4, #8]
 80100bc:	6923      	ldr	r3, [r4, #16]
 80100be:	442a      	add	r2, r5
 80100c0:	442b      	add	r3, r5
 80100c2:	60a2      	str	r2, [r4, #8]
 80100c4:	6123      	str	r3, [r4, #16]
 80100c6:	4641      	mov	r1, r8
 80100c8:	2204      	movs	r2, #4
 80100ca:	4620      	mov	r0, r4
 80100cc:	f001 fd60 	bl	8011b90 <ucdr_check_final_buffer_behavior_array>
 80100d0:	eba7 0108 	sub.w	r1, r7, r8
 80100d4:	4605      	mov	r5, r0
 80100d6:	2800      	cmp	r0, #0
 80100d8:	d1e8      	bne.n	80100ac <ucdr_serialize_array_float+0x54>
 80100da:	2304      	movs	r3, #4
 80100dc:	7da0      	ldrb	r0, [r4, #22]
 80100de:	7563      	strb	r3, [r4, #21]
 80100e0:	f080 0001 	eor.w	r0, r0, #1
 80100e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80100e8:	463a      	mov	r2, r7
 80100ea:	4631      	mov	r1, r6
 80100ec:	68a0      	ldr	r0, [r4, #8]
 80100ee:	f00d fe82 	bl	801ddf6 <memcpy>
 80100f2:	68a2      	ldr	r2, [r4, #8]
 80100f4:	6923      	ldr	r3, [r4, #16]
 80100f6:	443a      	add	r2, r7
 80100f8:	441f      	add	r7, r3
 80100fa:	60a2      	str	r2, [r4, #8]
 80100fc:	6127      	str	r7, [r4, #16]
 80100fe:	e7ec      	b.n	80100da <ucdr_serialize_array_float+0x82>

08010100 <ucdr_deserialize_array_float>:
 8010100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010104:	4604      	mov	r4, r0
 8010106:	460e      	mov	r6, r1
 8010108:	2104      	movs	r1, #4
 801010a:	4617      	mov	r7, r2
 801010c:	f001 fd16 	bl	8011b3c <ucdr_buffer_alignment>
 8010110:	4601      	mov	r1, r0
 8010112:	4620      	mov	r0, r4
 8010114:	7d65      	ldrb	r5, [r4, #21]
 8010116:	f001 fd59 	bl	8011bcc <ucdr_advance_buffer>
 801011a:	7d21      	ldrb	r1, [r4, #20]
 801011c:	7565      	strb	r5, [r4, #21]
 801011e:	2901      	cmp	r1, #1
 8010120:	d010      	beq.n	8010144 <ucdr_deserialize_array_float+0x44>
 8010122:	b157      	cbz	r7, 801013a <ucdr_deserialize_array_float+0x3a>
 8010124:	2500      	movs	r5, #0
 8010126:	e000      	b.n	801012a <ucdr_deserialize_array_float+0x2a>
 8010128:	7d21      	ldrb	r1, [r4, #20]
 801012a:	3501      	adds	r5, #1
 801012c:	4632      	mov	r2, r6
 801012e:	4620      	mov	r0, r4
 8010130:	3604      	adds	r6, #4
 8010132:	f001 fc0d 	bl	8011950 <ucdr_deserialize_endian_float>
 8010136:	42af      	cmp	r7, r5
 8010138:	d1f6      	bne.n	8010128 <ucdr_deserialize_array_float+0x28>
 801013a:	7da0      	ldrb	r0, [r4, #22]
 801013c:	f080 0001 	eor.w	r0, r0, #1
 8010140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010144:	00bf      	lsls	r7, r7, #2
 8010146:	4620      	mov	r0, r4
 8010148:	4639      	mov	r1, r7
 801014a:	f001 fc97 	bl	8011a7c <ucdr_check_buffer_available_for>
 801014e:	b9f8      	cbnz	r0, 8010190 <ucdr_deserialize_array_float+0x90>
 8010150:	46b8      	mov	r8, r7
 8010152:	e00c      	b.n	801016e <ucdr_deserialize_array_float+0x6e>
 8010154:	18f0      	adds	r0, r6, r3
 8010156:	462a      	mov	r2, r5
 8010158:	68a1      	ldr	r1, [r4, #8]
 801015a:	eba8 0805 	sub.w	r8, r8, r5
 801015e:	f00d fe4a 	bl	801ddf6 <memcpy>
 8010162:	68a2      	ldr	r2, [r4, #8]
 8010164:	6923      	ldr	r3, [r4, #16]
 8010166:	442a      	add	r2, r5
 8010168:	442b      	add	r3, r5
 801016a:	60a2      	str	r2, [r4, #8]
 801016c:	6123      	str	r3, [r4, #16]
 801016e:	4641      	mov	r1, r8
 8010170:	2204      	movs	r2, #4
 8010172:	4620      	mov	r0, r4
 8010174:	f001 fd0c 	bl	8011b90 <ucdr_check_final_buffer_behavior_array>
 8010178:	eba7 0308 	sub.w	r3, r7, r8
 801017c:	4605      	mov	r5, r0
 801017e:	2800      	cmp	r0, #0
 8010180:	d1e8      	bne.n	8010154 <ucdr_deserialize_array_float+0x54>
 8010182:	2304      	movs	r3, #4
 8010184:	7da0      	ldrb	r0, [r4, #22]
 8010186:	7563      	strb	r3, [r4, #21]
 8010188:	f080 0001 	eor.w	r0, r0, #1
 801018c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010190:	463a      	mov	r2, r7
 8010192:	68a1      	ldr	r1, [r4, #8]
 8010194:	4630      	mov	r0, r6
 8010196:	f00d fe2e 	bl	801ddf6 <memcpy>
 801019a:	68a2      	ldr	r2, [r4, #8]
 801019c:	6923      	ldr	r3, [r4, #16]
 801019e:	443a      	add	r2, r7
 80101a0:	441f      	add	r7, r3
 80101a2:	60a2      	str	r2, [r4, #8]
 80101a4:	6127      	str	r7, [r4, #16]
 80101a6:	e7ec      	b.n	8010182 <ucdr_deserialize_array_float+0x82>

080101a8 <ucdr_serialize_bool>:
 80101a8:	b538      	push	{r3, r4, r5, lr}
 80101aa:	460d      	mov	r5, r1
 80101ac:	2101      	movs	r1, #1
 80101ae:	4604      	mov	r4, r0
 80101b0:	f001 fc70 	bl	8011a94 <ucdr_check_final_buffer_behavior>
 80101b4:	b148      	cbz	r0, 80101ca <ucdr_serialize_bool+0x22>
 80101b6:	68a3      	ldr	r3, [r4, #8]
 80101b8:	2101      	movs	r1, #1
 80101ba:	701d      	strb	r5, [r3, #0]
 80101bc:	68a2      	ldr	r2, [r4, #8]
 80101be:	6923      	ldr	r3, [r4, #16]
 80101c0:	440a      	add	r2, r1
 80101c2:	7561      	strb	r1, [r4, #21]
 80101c4:	440b      	add	r3, r1
 80101c6:	60a2      	str	r2, [r4, #8]
 80101c8:	6123      	str	r3, [r4, #16]
 80101ca:	7da0      	ldrb	r0, [r4, #22]
 80101cc:	f080 0001 	eor.w	r0, r0, #1
 80101d0:	bd38      	pop	{r3, r4, r5, pc}
 80101d2:	bf00      	nop

080101d4 <ucdr_deserialize_bool>:
 80101d4:	b538      	push	{r3, r4, r5, lr}
 80101d6:	460d      	mov	r5, r1
 80101d8:	2101      	movs	r1, #1
 80101da:	4604      	mov	r4, r0
 80101dc:	f001 fc5a 	bl	8011a94 <ucdr_check_final_buffer_behavior>
 80101e0:	b160      	cbz	r0, 80101fc <ucdr_deserialize_bool+0x28>
 80101e2:	68a2      	ldr	r2, [r4, #8]
 80101e4:	2101      	movs	r1, #1
 80101e6:	6923      	ldr	r3, [r4, #16]
 80101e8:	f812 0b01 	ldrb.w	r0, [r2], #1
 80101ec:	440b      	add	r3, r1
 80101ee:	3800      	subs	r0, #0
 80101f0:	bf18      	it	ne
 80101f2:	2001      	movne	r0, #1
 80101f4:	7028      	strb	r0, [r5, #0]
 80101f6:	60a2      	str	r2, [r4, #8]
 80101f8:	6123      	str	r3, [r4, #16]
 80101fa:	7561      	strb	r1, [r4, #21]
 80101fc:	7da0      	ldrb	r0, [r4, #22]
 80101fe:	f080 0001 	eor.w	r0, r0, #1
 8010202:	bd38      	pop	{r3, r4, r5, pc}

08010204 <ucdr_serialize_uint8_t>:
 8010204:	b538      	push	{r3, r4, r5, lr}
 8010206:	460d      	mov	r5, r1
 8010208:	2101      	movs	r1, #1
 801020a:	4604      	mov	r4, r0
 801020c:	f001 fc42 	bl	8011a94 <ucdr_check_final_buffer_behavior>
 8010210:	b148      	cbz	r0, 8010226 <ucdr_serialize_uint8_t+0x22>
 8010212:	68a3      	ldr	r3, [r4, #8]
 8010214:	2101      	movs	r1, #1
 8010216:	701d      	strb	r5, [r3, #0]
 8010218:	68a2      	ldr	r2, [r4, #8]
 801021a:	6923      	ldr	r3, [r4, #16]
 801021c:	440a      	add	r2, r1
 801021e:	7561      	strb	r1, [r4, #21]
 8010220:	440b      	add	r3, r1
 8010222:	60a2      	str	r2, [r4, #8]
 8010224:	6123      	str	r3, [r4, #16]
 8010226:	7da0      	ldrb	r0, [r4, #22]
 8010228:	f080 0001 	eor.w	r0, r0, #1
 801022c:	bd38      	pop	{r3, r4, r5, pc}
 801022e:	bf00      	nop

08010230 <ucdr_deserialize_uint8_t>:
 8010230:	b538      	push	{r3, r4, r5, lr}
 8010232:	460d      	mov	r5, r1
 8010234:	2101      	movs	r1, #1
 8010236:	4604      	mov	r4, r0
 8010238:	f001 fc2c 	bl	8011a94 <ucdr_check_final_buffer_behavior>
 801023c:	b150      	cbz	r0, 8010254 <ucdr_deserialize_uint8_t+0x24>
 801023e:	68a3      	ldr	r3, [r4, #8]
 8010240:	2101      	movs	r1, #1
 8010242:	781b      	ldrb	r3, [r3, #0]
 8010244:	702b      	strb	r3, [r5, #0]
 8010246:	68a2      	ldr	r2, [r4, #8]
 8010248:	6923      	ldr	r3, [r4, #16]
 801024a:	440a      	add	r2, r1
 801024c:	7561      	strb	r1, [r4, #21]
 801024e:	440b      	add	r3, r1
 8010250:	60a2      	str	r2, [r4, #8]
 8010252:	6123      	str	r3, [r4, #16]
 8010254:	7da0      	ldrb	r0, [r4, #22]
 8010256:	f080 0001 	eor.w	r0, r0, #1
 801025a:	bd38      	pop	{r3, r4, r5, pc}

0801025c <ucdr_serialize_uint16_t>:
 801025c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010260:	460b      	mov	r3, r1
 8010262:	b082      	sub	sp, #8
 8010264:	4604      	mov	r4, r0
 8010266:	2102      	movs	r1, #2
 8010268:	f8ad 3006 	strh.w	r3, [sp, #6]
 801026c:	f001 fc66 	bl	8011b3c <ucdr_buffer_alignment>
 8010270:	4601      	mov	r1, r0
 8010272:	4620      	mov	r0, r4
 8010274:	7d67      	ldrb	r7, [r4, #21]
 8010276:	f001 fca9 	bl	8011bcc <ucdr_advance_buffer>
 801027a:	2102      	movs	r1, #2
 801027c:	4620      	mov	r0, r4
 801027e:	f001 fbfd 	bl	8011a7c <ucdr_check_buffer_available_for>
 8010282:	bb78      	cbnz	r0, 80102e4 <ucdr_serialize_uint16_t+0x88>
 8010284:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8010288:	42ab      	cmp	r3, r5
 801028a:	d926      	bls.n	80102da <ucdr_serialize_uint16_t+0x7e>
 801028c:	1b5e      	subs	r6, r3, r5
 801028e:	60a3      	str	r3, [r4, #8]
 8010290:	6923      	ldr	r3, [r4, #16]
 8010292:	4620      	mov	r0, r4
 8010294:	f1c6 0802 	rsb	r8, r6, #2
 8010298:	4433      	add	r3, r6
 801029a:	4641      	mov	r1, r8
 801029c:	6123      	str	r3, [r4, #16]
 801029e:	f001 fbf9 	bl	8011a94 <ucdr_check_final_buffer_behavior>
 80102a2:	2800      	cmp	r0, #0
 80102a4:	d03b      	beq.n	801031e <ucdr_serialize_uint16_t+0xc2>
 80102a6:	7d23      	ldrb	r3, [r4, #20]
 80102a8:	2b01      	cmp	r3, #1
 80102aa:	d04a      	beq.n	8010342 <ucdr_serialize_uint16_t+0xe6>
 80102ac:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80102b0:	702b      	strb	r3, [r5, #0]
 80102b2:	2e00      	cmp	r6, #0
 80102b4:	d040      	beq.n	8010338 <ucdr_serialize_uint16_t+0xdc>
 80102b6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80102ba:	706b      	strb	r3, [r5, #1]
 80102bc:	6923      	ldr	r3, [r4, #16]
 80102be:	2102      	movs	r1, #2
 80102c0:	68a2      	ldr	r2, [r4, #8]
 80102c2:	3302      	adds	r3, #2
 80102c4:	7da0      	ldrb	r0, [r4, #22]
 80102c6:	4442      	add	r2, r8
 80102c8:	7561      	strb	r1, [r4, #21]
 80102ca:	1b9e      	subs	r6, r3, r6
 80102cc:	f080 0001 	eor.w	r0, r0, #1
 80102d0:	60a2      	str	r2, [r4, #8]
 80102d2:	6126      	str	r6, [r4, #16]
 80102d4:	b002      	add	sp, #8
 80102d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102da:	2102      	movs	r1, #2
 80102dc:	4620      	mov	r0, r4
 80102de:	f001 fbd9 	bl	8011a94 <ucdr_check_final_buffer_behavior>
 80102e2:	b190      	cbz	r0, 801030a <ucdr_serialize_uint16_t+0xae>
 80102e4:	7d23      	ldrb	r3, [r4, #20]
 80102e6:	2b01      	cmp	r3, #1
 80102e8:	68a3      	ldr	r3, [r4, #8]
 80102ea:	d014      	beq.n	8010316 <ucdr_serialize_uint16_t+0xba>
 80102ec:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80102f0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80102f4:	7019      	strb	r1, [r3, #0]
 80102f6:	68a3      	ldr	r3, [r4, #8]
 80102f8:	705a      	strb	r2, [r3, #1]
 80102fa:	2102      	movs	r1, #2
 80102fc:	68a2      	ldr	r2, [r4, #8]
 80102fe:	6923      	ldr	r3, [r4, #16]
 8010300:	440a      	add	r2, r1
 8010302:	7561      	strb	r1, [r4, #21]
 8010304:	440b      	add	r3, r1
 8010306:	60a2      	str	r2, [r4, #8]
 8010308:	6123      	str	r3, [r4, #16]
 801030a:	7da0      	ldrb	r0, [r4, #22]
 801030c:	f080 0001 	eor.w	r0, r0, #1
 8010310:	b002      	add	sp, #8
 8010312:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010316:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801031a:	801a      	strh	r2, [r3, #0]
 801031c:	e7ed      	b.n	80102fa <ucdr_serialize_uint16_t+0x9e>
 801031e:	68a2      	ldr	r2, [r4, #8]
 8010320:	6923      	ldr	r3, [r4, #16]
 8010322:	7da0      	ldrb	r0, [r4, #22]
 8010324:	1b92      	subs	r2, r2, r6
 8010326:	1b9b      	subs	r3, r3, r6
 8010328:	7567      	strb	r7, [r4, #21]
 801032a:	f080 0001 	eor.w	r0, r0, #1
 801032e:	60a2      	str	r2, [r4, #8]
 8010330:	6123      	str	r3, [r4, #16]
 8010332:	b002      	add	sp, #8
 8010334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010338:	68a3      	ldr	r3, [r4, #8]
 801033a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801033e:	701a      	strb	r2, [r3, #0]
 8010340:	e7bc      	b.n	80102bc <ucdr_serialize_uint16_t+0x60>
 8010342:	4628      	mov	r0, r5
 8010344:	f10d 0506 	add.w	r5, sp, #6
 8010348:	4632      	mov	r2, r6
 801034a:	4629      	mov	r1, r5
 801034c:	f00d fd53 	bl	801ddf6 <memcpy>
 8010350:	4642      	mov	r2, r8
 8010352:	19a9      	adds	r1, r5, r6
 8010354:	68a0      	ldr	r0, [r4, #8]
 8010356:	f00d fd4e 	bl	801ddf6 <memcpy>
 801035a:	e7af      	b.n	80102bc <ucdr_serialize_uint16_t+0x60>

0801035c <ucdr_serialize_endian_uint16_t>:
 801035c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010360:	4604      	mov	r4, r0
 8010362:	b083      	sub	sp, #12
 8010364:	460d      	mov	r5, r1
 8010366:	2102      	movs	r1, #2
 8010368:	f8ad 2006 	strh.w	r2, [sp, #6]
 801036c:	f001 fbe6 	bl	8011b3c <ucdr_buffer_alignment>
 8010370:	4601      	mov	r1, r0
 8010372:	4620      	mov	r0, r4
 8010374:	f894 8015 	ldrb.w	r8, [r4, #21]
 8010378:	f001 fc28 	bl	8011bcc <ucdr_advance_buffer>
 801037c:	2102      	movs	r1, #2
 801037e:	4620      	mov	r0, r4
 8010380:	f001 fb7c 	bl	8011a7c <ucdr_check_buffer_available_for>
 8010384:	bb70      	cbnz	r0, 80103e4 <ucdr_serialize_endian_uint16_t+0x88>
 8010386:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 801038a:	42be      	cmp	r6, r7
 801038c:	d925      	bls.n	80103da <ucdr_serialize_endian_uint16_t+0x7e>
 801038e:	6923      	ldr	r3, [r4, #16]
 8010390:	4620      	mov	r0, r4
 8010392:	60a6      	str	r6, [r4, #8]
 8010394:	1bf6      	subs	r6, r6, r7
 8010396:	4433      	add	r3, r6
 8010398:	f1c6 0902 	rsb	r9, r6, #2
 801039c:	6123      	str	r3, [r4, #16]
 801039e:	4649      	mov	r1, r9
 80103a0:	f001 fb78 	bl	8011a94 <ucdr_check_final_buffer_behavior>
 80103a4:	2800      	cmp	r0, #0
 80103a6:	d039      	beq.n	801041c <ucdr_serialize_endian_uint16_t+0xc0>
 80103a8:	2d01      	cmp	r5, #1
 80103aa:	d04a      	beq.n	8010442 <ucdr_serialize_endian_uint16_t+0xe6>
 80103ac:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80103b0:	703b      	strb	r3, [r7, #0]
 80103b2:	2e00      	cmp	r6, #0
 80103b4:	d040      	beq.n	8010438 <ucdr_serialize_endian_uint16_t+0xdc>
 80103b6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80103ba:	707b      	strb	r3, [r7, #1]
 80103bc:	6923      	ldr	r3, [r4, #16]
 80103be:	2102      	movs	r1, #2
 80103c0:	68a2      	ldr	r2, [r4, #8]
 80103c2:	7da0      	ldrb	r0, [r4, #22]
 80103c4:	3302      	adds	r3, #2
 80103c6:	444a      	add	r2, r9
 80103c8:	7561      	strb	r1, [r4, #21]
 80103ca:	1b9b      	subs	r3, r3, r6
 80103cc:	f080 0001 	eor.w	r0, r0, #1
 80103d0:	60a2      	str	r2, [r4, #8]
 80103d2:	6123      	str	r3, [r4, #16]
 80103d4:	b003      	add	sp, #12
 80103d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80103da:	2102      	movs	r1, #2
 80103dc:	4620      	mov	r0, r4
 80103de:	f001 fb59 	bl	8011a94 <ucdr_check_final_buffer_behavior>
 80103e2:	b188      	cbz	r0, 8010408 <ucdr_serialize_endian_uint16_t+0xac>
 80103e4:	2d01      	cmp	r5, #1
 80103e6:	68a3      	ldr	r3, [r4, #8]
 80103e8:	d014      	beq.n	8010414 <ucdr_serialize_endian_uint16_t+0xb8>
 80103ea:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80103ee:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80103f2:	7019      	strb	r1, [r3, #0]
 80103f4:	68a3      	ldr	r3, [r4, #8]
 80103f6:	705a      	strb	r2, [r3, #1]
 80103f8:	2102      	movs	r1, #2
 80103fa:	68a2      	ldr	r2, [r4, #8]
 80103fc:	6923      	ldr	r3, [r4, #16]
 80103fe:	440a      	add	r2, r1
 8010400:	7561      	strb	r1, [r4, #21]
 8010402:	440b      	add	r3, r1
 8010404:	60a2      	str	r2, [r4, #8]
 8010406:	6123      	str	r3, [r4, #16]
 8010408:	7da0      	ldrb	r0, [r4, #22]
 801040a:	f080 0001 	eor.w	r0, r0, #1
 801040e:	b003      	add	sp, #12
 8010410:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010414:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8010418:	801a      	strh	r2, [r3, #0]
 801041a:	e7ed      	b.n	80103f8 <ucdr_serialize_endian_uint16_t+0x9c>
 801041c:	68a2      	ldr	r2, [r4, #8]
 801041e:	6923      	ldr	r3, [r4, #16]
 8010420:	7da0      	ldrb	r0, [r4, #22]
 8010422:	1b92      	subs	r2, r2, r6
 8010424:	1b9b      	subs	r3, r3, r6
 8010426:	f884 8015 	strb.w	r8, [r4, #21]
 801042a:	f080 0001 	eor.w	r0, r0, #1
 801042e:	60a2      	str	r2, [r4, #8]
 8010430:	6123      	str	r3, [r4, #16]
 8010432:	b003      	add	sp, #12
 8010434:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010438:	68a3      	ldr	r3, [r4, #8]
 801043a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801043e:	701a      	strb	r2, [r3, #0]
 8010440:	e7bc      	b.n	80103bc <ucdr_serialize_endian_uint16_t+0x60>
 8010442:	f10d 0506 	add.w	r5, sp, #6
 8010446:	4632      	mov	r2, r6
 8010448:	4638      	mov	r0, r7
 801044a:	4629      	mov	r1, r5
 801044c:	f00d fcd3 	bl	801ddf6 <memcpy>
 8010450:	464a      	mov	r2, r9
 8010452:	19a9      	adds	r1, r5, r6
 8010454:	68a0      	ldr	r0, [r4, #8]
 8010456:	f00d fcce 	bl	801ddf6 <memcpy>
 801045a:	e7af      	b.n	80103bc <ucdr_serialize_endian_uint16_t+0x60>

0801045c <ucdr_deserialize_uint16_t>:
 801045c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010460:	4604      	mov	r4, r0
 8010462:	460d      	mov	r5, r1
 8010464:	2102      	movs	r1, #2
 8010466:	f001 fb69 	bl	8011b3c <ucdr_buffer_alignment>
 801046a:	4601      	mov	r1, r0
 801046c:	4620      	mov	r0, r4
 801046e:	f894 8015 	ldrb.w	r8, [r4, #21]
 8010472:	f001 fbab 	bl	8011bcc <ucdr_advance_buffer>
 8010476:	2102      	movs	r1, #2
 8010478:	4620      	mov	r0, r4
 801047a:	f001 faff 	bl	8011a7c <ucdr_check_buffer_available_for>
 801047e:	bb60      	cbnz	r0, 80104da <ucdr_deserialize_uint16_t+0x7e>
 8010480:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8010484:	42be      	cmp	r6, r7
 8010486:	d923      	bls.n	80104d0 <ucdr_deserialize_uint16_t+0x74>
 8010488:	6923      	ldr	r3, [r4, #16]
 801048a:	4620      	mov	r0, r4
 801048c:	60a6      	str	r6, [r4, #8]
 801048e:	1bf6      	subs	r6, r6, r7
 8010490:	4433      	add	r3, r6
 8010492:	f1c6 0902 	rsb	r9, r6, #2
 8010496:	6123      	str	r3, [r4, #16]
 8010498:	4649      	mov	r1, r9
 801049a:	f001 fafb 	bl	8011a94 <ucdr_check_final_buffer_behavior>
 801049e:	2800      	cmp	r0, #0
 80104a0:	d034      	beq.n	801050c <ucdr_deserialize_uint16_t+0xb0>
 80104a2:	7d23      	ldrb	r3, [r4, #20]
 80104a4:	2b01      	cmp	r3, #1
 80104a6:	d042      	beq.n	801052e <ucdr_deserialize_uint16_t+0xd2>
 80104a8:	787b      	ldrb	r3, [r7, #1]
 80104aa:	702b      	strb	r3, [r5, #0]
 80104ac:	2e00      	cmp	r6, #0
 80104ae:	d03a      	beq.n	8010526 <ucdr_deserialize_uint16_t+0xca>
 80104b0:	783b      	ldrb	r3, [r7, #0]
 80104b2:	706b      	strb	r3, [r5, #1]
 80104b4:	6923      	ldr	r3, [r4, #16]
 80104b6:	2102      	movs	r1, #2
 80104b8:	68a2      	ldr	r2, [r4, #8]
 80104ba:	3302      	adds	r3, #2
 80104bc:	7da0      	ldrb	r0, [r4, #22]
 80104be:	444a      	add	r2, r9
 80104c0:	7561      	strb	r1, [r4, #21]
 80104c2:	1b9b      	subs	r3, r3, r6
 80104c4:	f080 0001 	eor.w	r0, r0, #1
 80104c8:	60a2      	str	r2, [r4, #8]
 80104ca:	6123      	str	r3, [r4, #16]
 80104cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80104d0:	2102      	movs	r1, #2
 80104d2:	4620      	mov	r0, r4
 80104d4:	f001 fade 	bl	8011a94 <ucdr_check_final_buffer_behavior>
 80104d8:	b180      	cbz	r0, 80104fc <ucdr_deserialize_uint16_t+0xa0>
 80104da:	7d23      	ldrb	r3, [r4, #20]
 80104dc:	2b01      	cmp	r3, #1
 80104de:	68a3      	ldr	r3, [r4, #8]
 80104e0:	d011      	beq.n	8010506 <ucdr_deserialize_uint16_t+0xaa>
 80104e2:	785b      	ldrb	r3, [r3, #1]
 80104e4:	702b      	strb	r3, [r5, #0]
 80104e6:	68a3      	ldr	r3, [r4, #8]
 80104e8:	781b      	ldrb	r3, [r3, #0]
 80104ea:	706b      	strb	r3, [r5, #1]
 80104ec:	2102      	movs	r1, #2
 80104ee:	68a2      	ldr	r2, [r4, #8]
 80104f0:	6923      	ldr	r3, [r4, #16]
 80104f2:	440a      	add	r2, r1
 80104f4:	7561      	strb	r1, [r4, #21]
 80104f6:	440b      	add	r3, r1
 80104f8:	60a2      	str	r2, [r4, #8]
 80104fa:	6123      	str	r3, [r4, #16]
 80104fc:	7da0      	ldrb	r0, [r4, #22]
 80104fe:	f080 0001 	eor.w	r0, r0, #1
 8010502:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010506:	881b      	ldrh	r3, [r3, #0]
 8010508:	802b      	strh	r3, [r5, #0]
 801050a:	e7ef      	b.n	80104ec <ucdr_deserialize_uint16_t+0x90>
 801050c:	68a2      	ldr	r2, [r4, #8]
 801050e:	6923      	ldr	r3, [r4, #16]
 8010510:	1b92      	subs	r2, r2, r6
 8010512:	7da0      	ldrb	r0, [r4, #22]
 8010514:	1b9b      	subs	r3, r3, r6
 8010516:	f884 8015 	strb.w	r8, [r4, #21]
 801051a:	f080 0001 	eor.w	r0, r0, #1
 801051e:	60a2      	str	r2, [r4, #8]
 8010520:	6123      	str	r3, [r4, #16]
 8010522:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010526:	68a3      	ldr	r3, [r4, #8]
 8010528:	781b      	ldrb	r3, [r3, #0]
 801052a:	706b      	strb	r3, [r5, #1]
 801052c:	e7c2      	b.n	80104b4 <ucdr_deserialize_uint16_t+0x58>
 801052e:	4639      	mov	r1, r7
 8010530:	4632      	mov	r2, r6
 8010532:	4628      	mov	r0, r5
 8010534:	f00d fc5f 	bl	801ddf6 <memcpy>
 8010538:	464a      	mov	r2, r9
 801053a:	19a8      	adds	r0, r5, r6
 801053c:	68a1      	ldr	r1, [r4, #8]
 801053e:	f00d fc5a 	bl	801ddf6 <memcpy>
 8010542:	e7b7      	b.n	80104b4 <ucdr_deserialize_uint16_t+0x58>

08010544 <ucdr_deserialize_endian_uint16_t>:
 8010544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010548:	4604      	mov	r4, r0
 801054a:	460e      	mov	r6, r1
 801054c:	2102      	movs	r1, #2
 801054e:	4615      	mov	r5, r2
 8010550:	f001 faf4 	bl	8011b3c <ucdr_buffer_alignment>
 8010554:	4601      	mov	r1, r0
 8010556:	4620      	mov	r0, r4
 8010558:	f894 8015 	ldrb.w	r8, [r4, #21]
 801055c:	f001 fb36 	bl	8011bcc <ucdr_advance_buffer>
 8010560:	2102      	movs	r1, #2
 8010562:	4620      	mov	r0, r4
 8010564:	f001 fa8a 	bl	8011a7c <ucdr_check_buffer_available_for>
 8010568:	bb70      	cbnz	r0, 80105c8 <ucdr_deserialize_endian_uint16_t+0x84>
 801056a:	e9d4 7901 	ldrd	r7, r9, [r4, #4]
 801056e:	454f      	cmp	r7, r9
 8010570:	d925      	bls.n	80105be <ucdr_deserialize_endian_uint16_t+0x7a>
 8010572:	6923      	ldr	r3, [r4, #16]
 8010574:	4620      	mov	r0, r4
 8010576:	60a7      	str	r7, [r4, #8]
 8010578:	eba7 0709 	sub.w	r7, r7, r9
 801057c:	443b      	add	r3, r7
 801057e:	f1c7 0a02 	rsb	sl, r7, #2
 8010582:	6123      	str	r3, [r4, #16]
 8010584:	4651      	mov	r1, sl
 8010586:	f001 fa85 	bl	8011a94 <ucdr_check_final_buffer_behavior>
 801058a:	2800      	cmp	r0, #0
 801058c:	d034      	beq.n	80105f8 <ucdr_deserialize_endian_uint16_t+0xb4>
 801058e:	2e01      	cmp	r6, #1
 8010590:	d043      	beq.n	801061a <ucdr_deserialize_endian_uint16_t+0xd6>
 8010592:	f899 3001 	ldrb.w	r3, [r9, #1]
 8010596:	702b      	strb	r3, [r5, #0]
 8010598:	2f00      	cmp	r7, #0
 801059a:	d03a      	beq.n	8010612 <ucdr_deserialize_endian_uint16_t+0xce>
 801059c:	f899 3000 	ldrb.w	r3, [r9]
 80105a0:	706b      	strb	r3, [r5, #1]
 80105a2:	6923      	ldr	r3, [r4, #16]
 80105a4:	2102      	movs	r1, #2
 80105a6:	68a2      	ldr	r2, [r4, #8]
 80105a8:	3302      	adds	r3, #2
 80105aa:	7da0      	ldrb	r0, [r4, #22]
 80105ac:	4452      	add	r2, sl
 80105ae:	7561      	strb	r1, [r4, #21]
 80105b0:	1bdb      	subs	r3, r3, r7
 80105b2:	f080 0001 	eor.w	r0, r0, #1
 80105b6:	60a2      	str	r2, [r4, #8]
 80105b8:	6123      	str	r3, [r4, #16]
 80105ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80105be:	2102      	movs	r1, #2
 80105c0:	4620      	mov	r0, r4
 80105c2:	f001 fa67 	bl	8011a94 <ucdr_check_final_buffer_behavior>
 80105c6:	b178      	cbz	r0, 80105e8 <ucdr_deserialize_endian_uint16_t+0xa4>
 80105c8:	2e01      	cmp	r6, #1
 80105ca:	68a3      	ldr	r3, [r4, #8]
 80105cc:	d011      	beq.n	80105f2 <ucdr_deserialize_endian_uint16_t+0xae>
 80105ce:	785b      	ldrb	r3, [r3, #1]
 80105d0:	702b      	strb	r3, [r5, #0]
 80105d2:	68a3      	ldr	r3, [r4, #8]
 80105d4:	781b      	ldrb	r3, [r3, #0]
 80105d6:	706b      	strb	r3, [r5, #1]
 80105d8:	2102      	movs	r1, #2
 80105da:	68a2      	ldr	r2, [r4, #8]
 80105dc:	6923      	ldr	r3, [r4, #16]
 80105de:	440a      	add	r2, r1
 80105e0:	7561      	strb	r1, [r4, #21]
 80105e2:	440b      	add	r3, r1
 80105e4:	60a2      	str	r2, [r4, #8]
 80105e6:	6123      	str	r3, [r4, #16]
 80105e8:	7da0      	ldrb	r0, [r4, #22]
 80105ea:	f080 0001 	eor.w	r0, r0, #1
 80105ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80105f2:	881b      	ldrh	r3, [r3, #0]
 80105f4:	802b      	strh	r3, [r5, #0]
 80105f6:	e7ef      	b.n	80105d8 <ucdr_deserialize_endian_uint16_t+0x94>
 80105f8:	68a2      	ldr	r2, [r4, #8]
 80105fa:	6923      	ldr	r3, [r4, #16]
 80105fc:	1bd2      	subs	r2, r2, r7
 80105fe:	7da0      	ldrb	r0, [r4, #22]
 8010600:	1bdb      	subs	r3, r3, r7
 8010602:	f884 8015 	strb.w	r8, [r4, #21]
 8010606:	f080 0001 	eor.w	r0, r0, #1
 801060a:	60a2      	str	r2, [r4, #8]
 801060c:	6123      	str	r3, [r4, #16]
 801060e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010612:	68a3      	ldr	r3, [r4, #8]
 8010614:	781b      	ldrb	r3, [r3, #0]
 8010616:	706b      	strb	r3, [r5, #1]
 8010618:	e7c3      	b.n	80105a2 <ucdr_deserialize_endian_uint16_t+0x5e>
 801061a:	4649      	mov	r1, r9
 801061c:	463a      	mov	r2, r7
 801061e:	4628      	mov	r0, r5
 8010620:	f00d fbe9 	bl	801ddf6 <memcpy>
 8010624:	4652      	mov	r2, sl
 8010626:	19e8      	adds	r0, r5, r7
 8010628:	68a1      	ldr	r1, [r4, #8]
 801062a:	f00d fbe4 	bl	801ddf6 <memcpy>
 801062e:	e7b8      	b.n	80105a2 <ucdr_deserialize_endian_uint16_t+0x5e>

08010630 <ucdr_serialize_uint32_t>:
 8010630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010634:	b082      	sub	sp, #8
 8010636:	4604      	mov	r4, r0
 8010638:	9101      	str	r1, [sp, #4]
 801063a:	2104      	movs	r1, #4
 801063c:	f001 fa7e 	bl	8011b3c <ucdr_buffer_alignment>
 8010640:	4601      	mov	r1, r0
 8010642:	4620      	mov	r0, r4
 8010644:	7d67      	ldrb	r7, [r4, #21]
 8010646:	f001 fac1 	bl	8011bcc <ucdr_advance_buffer>
 801064a:	2104      	movs	r1, #4
 801064c:	4620      	mov	r0, r4
 801064e:	f001 fa15 	bl	8011a7c <ucdr_check_buffer_available_for>
 8010652:	2800      	cmp	r0, #0
 8010654:	d139      	bne.n	80106ca <ucdr_serialize_uint32_t+0x9a>
 8010656:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 801065a:	42ab      	cmp	r3, r5
 801065c:	d930      	bls.n	80106c0 <ucdr_serialize_uint32_t+0x90>
 801065e:	1b5e      	subs	r6, r3, r5
 8010660:	60a3      	str	r3, [r4, #8]
 8010662:	6923      	ldr	r3, [r4, #16]
 8010664:	4620      	mov	r0, r4
 8010666:	f1c6 0804 	rsb	r8, r6, #4
 801066a:	4433      	add	r3, r6
 801066c:	4641      	mov	r1, r8
 801066e:	6123      	str	r3, [r4, #16]
 8010670:	f001 fa10 	bl	8011a94 <ucdr_check_final_buffer_behavior>
 8010674:	2800      	cmp	r0, #0
 8010676:	d04c      	beq.n	8010712 <ucdr_serialize_uint32_t+0xe2>
 8010678:	7d23      	ldrb	r3, [r4, #20]
 801067a:	2b01      	cmp	r3, #1
 801067c:	d063      	beq.n	8010746 <ucdr_serialize_uint32_t+0x116>
 801067e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010682:	702b      	strb	r3, [r5, #0]
 8010684:	2e00      	cmp	r6, #0
 8010686:	d051      	beq.n	801072c <ucdr_serialize_uint32_t+0xfc>
 8010688:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801068c:	2e01      	cmp	r6, #1
 801068e:	706b      	strb	r3, [r5, #1]
 8010690:	d050      	beq.n	8010734 <ucdr_serialize_uint32_t+0x104>
 8010692:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010696:	2e02      	cmp	r6, #2
 8010698:	70ab      	strb	r3, [r5, #2]
 801069a:	d04f      	beq.n	801073c <ucdr_serialize_uint32_t+0x10c>
 801069c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80106a0:	70eb      	strb	r3, [r5, #3]
 80106a2:	6923      	ldr	r3, [r4, #16]
 80106a4:	2104      	movs	r1, #4
 80106a6:	68a2      	ldr	r2, [r4, #8]
 80106a8:	3304      	adds	r3, #4
 80106aa:	7da0      	ldrb	r0, [r4, #22]
 80106ac:	4442      	add	r2, r8
 80106ae:	7561      	strb	r1, [r4, #21]
 80106b0:	1b9e      	subs	r6, r3, r6
 80106b2:	f080 0001 	eor.w	r0, r0, #1
 80106b6:	60a2      	str	r2, [r4, #8]
 80106b8:	6126      	str	r6, [r4, #16]
 80106ba:	b002      	add	sp, #8
 80106bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80106c0:	2104      	movs	r1, #4
 80106c2:	4620      	mov	r0, r4
 80106c4:	f001 f9e6 	bl	8011a94 <ucdr_check_final_buffer_behavior>
 80106c8:	b1d0      	cbz	r0, 8010700 <ucdr_serialize_uint32_t+0xd0>
 80106ca:	7d23      	ldrb	r3, [r4, #20]
 80106cc:	2b01      	cmp	r3, #1
 80106ce:	68a3      	ldr	r3, [r4, #8]
 80106d0:	d01c      	beq.n	801070c <ucdr_serialize_uint32_t+0xdc>
 80106d2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80106d6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80106da:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80106de:	7018      	strb	r0, [r3, #0]
 80106e0:	68a3      	ldr	r3, [r4, #8]
 80106e2:	705a      	strb	r2, [r3, #1]
 80106e4:	68a3      	ldr	r3, [r4, #8]
 80106e6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80106ea:	7099      	strb	r1, [r3, #2]
 80106ec:	68a3      	ldr	r3, [r4, #8]
 80106ee:	70da      	strb	r2, [r3, #3]
 80106f0:	2104      	movs	r1, #4
 80106f2:	68a2      	ldr	r2, [r4, #8]
 80106f4:	6923      	ldr	r3, [r4, #16]
 80106f6:	440a      	add	r2, r1
 80106f8:	7561      	strb	r1, [r4, #21]
 80106fa:	440b      	add	r3, r1
 80106fc:	60a2      	str	r2, [r4, #8]
 80106fe:	6123      	str	r3, [r4, #16]
 8010700:	7da0      	ldrb	r0, [r4, #22]
 8010702:	f080 0001 	eor.w	r0, r0, #1
 8010706:	b002      	add	sp, #8
 8010708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801070c:	9a01      	ldr	r2, [sp, #4]
 801070e:	601a      	str	r2, [r3, #0]
 8010710:	e7ee      	b.n	80106f0 <ucdr_serialize_uint32_t+0xc0>
 8010712:	68a2      	ldr	r2, [r4, #8]
 8010714:	6923      	ldr	r3, [r4, #16]
 8010716:	7da0      	ldrb	r0, [r4, #22]
 8010718:	1b92      	subs	r2, r2, r6
 801071a:	1b9b      	subs	r3, r3, r6
 801071c:	7567      	strb	r7, [r4, #21]
 801071e:	f080 0001 	eor.w	r0, r0, #1
 8010722:	60a2      	str	r2, [r4, #8]
 8010724:	6123      	str	r3, [r4, #16]
 8010726:	b002      	add	sp, #8
 8010728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801072c:	68a3      	ldr	r3, [r4, #8]
 801072e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010732:	701a      	strb	r2, [r3, #0]
 8010734:	68a3      	ldr	r3, [r4, #8]
 8010736:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801073a:	701a      	strb	r2, [r3, #0]
 801073c:	68a3      	ldr	r3, [r4, #8]
 801073e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010742:	701a      	strb	r2, [r3, #0]
 8010744:	e7ad      	b.n	80106a2 <ucdr_serialize_uint32_t+0x72>
 8010746:	4628      	mov	r0, r5
 8010748:	ad01      	add	r5, sp, #4
 801074a:	4632      	mov	r2, r6
 801074c:	4629      	mov	r1, r5
 801074e:	f00d fb52 	bl	801ddf6 <memcpy>
 8010752:	4642      	mov	r2, r8
 8010754:	19a9      	adds	r1, r5, r6
 8010756:	68a0      	ldr	r0, [r4, #8]
 8010758:	f00d fb4d 	bl	801ddf6 <memcpy>
 801075c:	e7a1      	b.n	80106a2 <ucdr_serialize_uint32_t+0x72>
 801075e:	bf00      	nop

08010760 <ucdr_serialize_endian_uint32_t>:
 8010760:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010764:	4604      	mov	r4, r0
 8010766:	b083      	sub	sp, #12
 8010768:	460d      	mov	r5, r1
 801076a:	2104      	movs	r1, #4
 801076c:	9201      	str	r2, [sp, #4]
 801076e:	f001 f9e5 	bl	8011b3c <ucdr_buffer_alignment>
 8010772:	4601      	mov	r1, r0
 8010774:	4620      	mov	r0, r4
 8010776:	f894 8015 	ldrb.w	r8, [r4, #21]
 801077a:	f001 fa27 	bl	8011bcc <ucdr_advance_buffer>
 801077e:	2104      	movs	r1, #4
 8010780:	4620      	mov	r0, r4
 8010782:	f001 f97b 	bl	8011a7c <ucdr_check_buffer_available_for>
 8010786:	2800      	cmp	r0, #0
 8010788:	d138      	bne.n	80107fc <ucdr_serialize_endian_uint32_t+0x9c>
 801078a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 801078e:	42b7      	cmp	r7, r6
 8010790:	d92f      	bls.n	80107f2 <ucdr_serialize_endian_uint32_t+0x92>
 8010792:	6923      	ldr	r3, [r4, #16]
 8010794:	4620      	mov	r0, r4
 8010796:	60a7      	str	r7, [r4, #8]
 8010798:	1bbf      	subs	r7, r7, r6
 801079a:	443b      	add	r3, r7
 801079c:	f1c7 0904 	rsb	r9, r7, #4
 80107a0:	6123      	str	r3, [r4, #16]
 80107a2:	4649      	mov	r1, r9
 80107a4:	f001 f976 	bl	8011a94 <ucdr_check_final_buffer_behavior>
 80107a8:	2800      	cmp	r0, #0
 80107aa:	d04a      	beq.n	8010842 <ucdr_serialize_endian_uint32_t+0xe2>
 80107ac:	2d01      	cmp	r5, #1
 80107ae:	d063      	beq.n	8010878 <ucdr_serialize_endian_uint32_t+0x118>
 80107b0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80107b4:	7033      	strb	r3, [r6, #0]
 80107b6:	2f00      	cmp	r7, #0
 80107b8:	d051      	beq.n	801085e <ucdr_serialize_endian_uint32_t+0xfe>
 80107ba:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80107be:	2f01      	cmp	r7, #1
 80107c0:	7073      	strb	r3, [r6, #1]
 80107c2:	d050      	beq.n	8010866 <ucdr_serialize_endian_uint32_t+0x106>
 80107c4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80107c8:	2f02      	cmp	r7, #2
 80107ca:	70b3      	strb	r3, [r6, #2]
 80107cc:	d04f      	beq.n	801086e <ucdr_serialize_endian_uint32_t+0x10e>
 80107ce:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80107d2:	70f3      	strb	r3, [r6, #3]
 80107d4:	6923      	ldr	r3, [r4, #16]
 80107d6:	2104      	movs	r1, #4
 80107d8:	68a2      	ldr	r2, [r4, #8]
 80107da:	7da0      	ldrb	r0, [r4, #22]
 80107dc:	3304      	adds	r3, #4
 80107de:	444a      	add	r2, r9
 80107e0:	7561      	strb	r1, [r4, #21]
 80107e2:	1bdb      	subs	r3, r3, r7
 80107e4:	f080 0001 	eor.w	r0, r0, #1
 80107e8:	60a2      	str	r2, [r4, #8]
 80107ea:	6123      	str	r3, [r4, #16]
 80107ec:	b003      	add	sp, #12
 80107ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80107f2:	2104      	movs	r1, #4
 80107f4:	4620      	mov	r0, r4
 80107f6:	f001 f94d 	bl	8011a94 <ucdr_check_final_buffer_behavior>
 80107fa:	b1c8      	cbz	r0, 8010830 <ucdr_serialize_endian_uint32_t+0xd0>
 80107fc:	2d01      	cmp	r5, #1
 80107fe:	68a3      	ldr	r3, [r4, #8]
 8010800:	d01c      	beq.n	801083c <ucdr_serialize_endian_uint32_t+0xdc>
 8010802:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8010806:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801080a:	f89d 1005 	ldrb.w	r1, [sp, #5]
 801080e:	7018      	strb	r0, [r3, #0]
 8010810:	68a3      	ldr	r3, [r4, #8]
 8010812:	705a      	strb	r2, [r3, #1]
 8010814:	68a3      	ldr	r3, [r4, #8]
 8010816:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801081a:	7099      	strb	r1, [r3, #2]
 801081c:	68a3      	ldr	r3, [r4, #8]
 801081e:	70da      	strb	r2, [r3, #3]
 8010820:	2104      	movs	r1, #4
 8010822:	68a2      	ldr	r2, [r4, #8]
 8010824:	6923      	ldr	r3, [r4, #16]
 8010826:	440a      	add	r2, r1
 8010828:	7561      	strb	r1, [r4, #21]
 801082a:	440b      	add	r3, r1
 801082c:	60a2      	str	r2, [r4, #8]
 801082e:	6123      	str	r3, [r4, #16]
 8010830:	7da0      	ldrb	r0, [r4, #22]
 8010832:	f080 0001 	eor.w	r0, r0, #1
 8010836:	b003      	add	sp, #12
 8010838:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801083c:	9a01      	ldr	r2, [sp, #4]
 801083e:	601a      	str	r2, [r3, #0]
 8010840:	e7ee      	b.n	8010820 <ucdr_serialize_endian_uint32_t+0xc0>
 8010842:	68a2      	ldr	r2, [r4, #8]
 8010844:	6923      	ldr	r3, [r4, #16]
 8010846:	7da0      	ldrb	r0, [r4, #22]
 8010848:	1bd2      	subs	r2, r2, r7
 801084a:	1bdb      	subs	r3, r3, r7
 801084c:	f884 8015 	strb.w	r8, [r4, #21]
 8010850:	f080 0001 	eor.w	r0, r0, #1
 8010854:	60a2      	str	r2, [r4, #8]
 8010856:	6123      	str	r3, [r4, #16]
 8010858:	b003      	add	sp, #12
 801085a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801085e:	68a3      	ldr	r3, [r4, #8]
 8010860:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010864:	701a      	strb	r2, [r3, #0]
 8010866:	68a3      	ldr	r3, [r4, #8]
 8010868:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801086c:	701a      	strb	r2, [r3, #0]
 801086e:	68a3      	ldr	r3, [r4, #8]
 8010870:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010874:	701a      	strb	r2, [r3, #0]
 8010876:	e7ad      	b.n	80107d4 <ucdr_serialize_endian_uint32_t+0x74>
 8010878:	ad01      	add	r5, sp, #4
 801087a:	463a      	mov	r2, r7
 801087c:	4630      	mov	r0, r6
 801087e:	4629      	mov	r1, r5
 8010880:	f00d fab9 	bl	801ddf6 <memcpy>
 8010884:	464a      	mov	r2, r9
 8010886:	19e9      	adds	r1, r5, r7
 8010888:	68a0      	ldr	r0, [r4, #8]
 801088a:	f00d fab4 	bl	801ddf6 <memcpy>
 801088e:	e7a1      	b.n	80107d4 <ucdr_serialize_endian_uint32_t+0x74>

08010890 <ucdr_deserialize_uint32_t>:
 8010890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010894:	4604      	mov	r4, r0
 8010896:	460d      	mov	r5, r1
 8010898:	2104      	movs	r1, #4
 801089a:	f001 f94f 	bl	8011b3c <ucdr_buffer_alignment>
 801089e:	4601      	mov	r1, r0
 80108a0:	4620      	mov	r0, r4
 80108a2:	f894 8015 	ldrb.w	r8, [r4, #21]
 80108a6:	f001 f991 	bl	8011bcc <ucdr_advance_buffer>
 80108aa:	2104      	movs	r1, #4
 80108ac:	4620      	mov	r0, r4
 80108ae:	f001 f8e5 	bl	8011a7c <ucdr_check_buffer_available_for>
 80108b2:	2800      	cmp	r0, #0
 80108b4:	d138      	bne.n	8010928 <ucdr_deserialize_uint32_t+0x98>
 80108b6:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80108ba:	42b7      	cmp	r7, r6
 80108bc:	d92f      	bls.n	801091e <ucdr_deserialize_uint32_t+0x8e>
 80108be:	6923      	ldr	r3, [r4, #16]
 80108c0:	4620      	mov	r0, r4
 80108c2:	60a7      	str	r7, [r4, #8]
 80108c4:	1bbf      	subs	r7, r7, r6
 80108c6:	443b      	add	r3, r7
 80108c8:	f1c7 0904 	rsb	r9, r7, #4
 80108cc:	6123      	str	r3, [r4, #16]
 80108ce:	4649      	mov	r1, r9
 80108d0:	f001 f8e0 	bl	8011a94 <ucdr_check_final_buffer_behavior>
 80108d4:	2800      	cmp	r0, #0
 80108d6:	d046      	beq.n	8010966 <ucdr_deserialize_uint32_t+0xd6>
 80108d8:	7d23      	ldrb	r3, [r4, #20]
 80108da:	2b01      	cmp	r3, #1
 80108dc:	d05c      	beq.n	8010998 <ucdr_deserialize_uint32_t+0x108>
 80108de:	78f3      	ldrb	r3, [r6, #3]
 80108e0:	702b      	strb	r3, [r5, #0]
 80108e2:	2f00      	cmp	r7, #0
 80108e4:	d04c      	beq.n	8010980 <ucdr_deserialize_uint32_t+0xf0>
 80108e6:	78b3      	ldrb	r3, [r6, #2]
 80108e8:	2f01      	cmp	r7, #1
 80108ea:	706b      	strb	r3, [r5, #1]
 80108ec:	f105 0302 	add.w	r3, r5, #2
 80108f0:	d04a      	beq.n	8010988 <ucdr_deserialize_uint32_t+0xf8>
 80108f2:	7873      	ldrb	r3, [r6, #1]
 80108f4:	2f02      	cmp	r7, #2
 80108f6:	70ab      	strb	r3, [r5, #2]
 80108f8:	f105 0303 	add.w	r3, r5, #3
 80108fc:	d048      	beq.n	8010990 <ucdr_deserialize_uint32_t+0x100>
 80108fe:	7833      	ldrb	r3, [r6, #0]
 8010900:	70eb      	strb	r3, [r5, #3]
 8010902:	6923      	ldr	r3, [r4, #16]
 8010904:	2104      	movs	r1, #4
 8010906:	68a2      	ldr	r2, [r4, #8]
 8010908:	3304      	adds	r3, #4
 801090a:	7da0      	ldrb	r0, [r4, #22]
 801090c:	444a      	add	r2, r9
 801090e:	7561      	strb	r1, [r4, #21]
 8010910:	1bdb      	subs	r3, r3, r7
 8010912:	f080 0001 	eor.w	r0, r0, #1
 8010916:	60a2      	str	r2, [r4, #8]
 8010918:	6123      	str	r3, [r4, #16]
 801091a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801091e:	2104      	movs	r1, #4
 8010920:	4620      	mov	r0, r4
 8010922:	f001 f8b7 	bl	8011a94 <ucdr_check_final_buffer_behavior>
 8010926:	b1b0      	cbz	r0, 8010956 <ucdr_deserialize_uint32_t+0xc6>
 8010928:	7d23      	ldrb	r3, [r4, #20]
 801092a:	2b01      	cmp	r3, #1
 801092c:	68a3      	ldr	r3, [r4, #8]
 801092e:	d017      	beq.n	8010960 <ucdr_deserialize_uint32_t+0xd0>
 8010930:	78db      	ldrb	r3, [r3, #3]
 8010932:	702b      	strb	r3, [r5, #0]
 8010934:	68a3      	ldr	r3, [r4, #8]
 8010936:	789b      	ldrb	r3, [r3, #2]
 8010938:	706b      	strb	r3, [r5, #1]
 801093a:	68a3      	ldr	r3, [r4, #8]
 801093c:	785b      	ldrb	r3, [r3, #1]
 801093e:	70ab      	strb	r3, [r5, #2]
 8010940:	68a3      	ldr	r3, [r4, #8]
 8010942:	781b      	ldrb	r3, [r3, #0]
 8010944:	70eb      	strb	r3, [r5, #3]
 8010946:	2104      	movs	r1, #4
 8010948:	68a2      	ldr	r2, [r4, #8]
 801094a:	6923      	ldr	r3, [r4, #16]
 801094c:	440a      	add	r2, r1
 801094e:	7561      	strb	r1, [r4, #21]
 8010950:	440b      	add	r3, r1
 8010952:	60a2      	str	r2, [r4, #8]
 8010954:	6123      	str	r3, [r4, #16]
 8010956:	7da0      	ldrb	r0, [r4, #22]
 8010958:	f080 0001 	eor.w	r0, r0, #1
 801095c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010960:	681b      	ldr	r3, [r3, #0]
 8010962:	602b      	str	r3, [r5, #0]
 8010964:	e7ef      	b.n	8010946 <ucdr_deserialize_uint32_t+0xb6>
 8010966:	68a2      	ldr	r2, [r4, #8]
 8010968:	6923      	ldr	r3, [r4, #16]
 801096a:	1bd2      	subs	r2, r2, r7
 801096c:	7da0      	ldrb	r0, [r4, #22]
 801096e:	1bdb      	subs	r3, r3, r7
 8010970:	f884 8015 	strb.w	r8, [r4, #21]
 8010974:	f080 0001 	eor.w	r0, r0, #1
 8010978:	60a2      	str	r2, [r4, #8]
 801097a:	6123      	str	r3, [r4, #16]
 801097c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010980:	68a3      	ldr	r3, [r4, #8]
 8010982:	789b      	ldrb	r3, [r3, #2]
 8010984:	706b      	strb	r3, [r5, #1]
 8010986:	1cab      	adds	r3, r5, #2
 8010988:	68a2      	ldr	r2, [r4, #8]
 801098a:	7852      	ldrb	r2, [r2, #1]
 801098c:	f803 2b01 	strb.w	r2, [r3], #1
 8010990:	68a2      	ldr	r2, [r4, #8]
 8010992:	7812      	ldrb	r2, [r2, #0]
 8010994:	701a      	strb	r2, [r3, #0]
 8010996:	e7b4      	b.n	8010902 <ucdr_deserialize_uint32_t+0x72>
 8010998:	4631      	mov	r1, r6
 801099a:	463a      	mov	r2, r7
 801099c:	4628      	mov	r0, r5
 801099e:	f00d fa2a 	bl	801ddf6 <memcpy>
 80109a2:	464a      	mov	r2, r9
 80109a4:	19e8      	adds	r0, r5, r7
 80109a6:	68a1      	ldr	r1, [r4, #8]
 80109a8:	f00d fa25 	bl	801ddf6 <memcpy>
 80109ac:	e7a9      	b.n	8010902 <ucdr_deserialize_uint32_t+0x72>
 80109ae:	bf00      	nop

080109b0 <ucdr_deserialize_endian_uint32_t>:
 80109b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80109b4:	4604      	mov	r4, r0
 80109b6:	460e      	mov	r6, r1
 80109b8:	2104      	movs	r1, #4
 80109ba:	4615      	mov	r5, r2
 80109bc:	f001 f8be 	bl	8011b3c <ucdr_buffer_alignment>
 80109c0:	4601      	mov	r1, r0
 80109c2:	4620      	mov	r0, r4
 80109c4:	f894 8015 	ldrb.w	r8, [r4, #21]
 80109c8:	f001 f900 	bl	8011bcc <ucdr_advance_buffer>
 80109cc:	2104      	movs	r1, #4
 80109ce:	4620      	mov	r0, r4
 80109d0:	f001 f854 	bl	8011a7c <ucdr_check_buffer_available_for>
 80109d4:	2800      	cmp	r0, #0
 80109d6:	d13c      	bne.n	8010a52 <ucdr_deserialize_endian_uint32_t+0xa2>
 80109d8:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 80109dc:	42bb      	cmp	r3, r7
 80109de:	d933      	bls.n	8010a48 <ucdr_deserialize_endian_uint32_t+0x98>
 80109e0:	eba3 0907 	sub.w	r9, r3, r7
 80109e4:	60a3      	str	r3, [r4, #8]
 80109e6:	6923      	ldr	r3, [r4, #16]
 80109e8:	4620      	mov	r0, r4
 80109ea:	f1c9 0a04 	rsb	sl, r9, #4
 80109ee:	444b      	add	r3, r9
 80109f0:	4651      	mov	r1, sl
 80109f2:	6123      	str	r3, [r4, #16]
 80109f4:	f001 f84e 	bl	8011a94 <ucdr_check_final_buffer_behavior>
 80109f8:	2800      	cmp	r0, #0
 80109fa:	d048      	beq.n	8010a8e <ucdr_deserialize_endian_uint32_t+0xde>
 80109fc:	2e01      	cmp	r6, #1
 80109fe:	d061      	beq.n	8010ac4 <ucdr_deserialize_endian_uint32_t+0x114>
 8010a00:	78fb      	ldrb	r3, [r7, #3]
 8010a02:	702b      	strb	r3, [r5, #0]
 8010a04:	f1b9 0f00 	cmp.w	r9, #0
 8010a08:	d050      	beq.n	8010aac <ucdr_deserialize_endian_uint32_t+0xfc>
 8010a0a:	78bb      	ldrb	r3, [r7, #2]
 8010a0c:	f1b9 0f01 	cmp.w	r9, #1
 8010a10:	706b      	strb	r3, [r5, #1]
 8010a12:	f105 0302 	add.w	r3, r5, #2
 8010a16:	d04d      	beq.n	8010ab4 <ucdr_deserialize_endian_uint32_t+0x104>
 8010a18:	787b      	ldrb	r3, [r7, #1]
 8010a1a:	f1b9 0f02 	cmp.w	r9, #2
 8010a1e:	70ab      	strb	r3, [r5, #2]
 8010a20:	f105 0303 	add.w	r3, r5, #3
 8010a24:	d04a      	beq.n	8010abc <ucdr_deserialize_endian_uint32_t+0x10c>
 8010a26:	783b      	ldrb	r3, [r7, #0]
 8010a28:	70eb      	strb	r3, [r5, #3]
 8010a2a:	6923      	ldr	r3, [r4, #16]
 8010a2c:	2104      	movs	r1, #4
 8010a2e:	68a2      	ldr	r2, [r4, #8]
 8010a30:	3304      	adds	r3, #4
 8010a32:	7da0      	ldrb	r0, [r4, #22]
 8010a34:	4452      	add	r2, sl
 8010a36:	7561      	strb	r1, [r4, #21]
 8010a38:	eba3 0309 	sub.w	r3, r3, r9
 8010a3c:	f080 0001 	eor.w	r0, r0, #1
 8010a40:	60a2      	str	r2, [r4, #8]
 8010a42:	6123      	str	r3, [r4, #16]
 8010a44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a48:	2104      	movs	r1, #4
 8010a4a:	4620      	mov	r0, r4
 8010a4c:	f001 f822 	bl	8011a94 <ucdr_check_final_buffer_behavior>
 8010a50:	b1a8      	cbz	r0, 8010a7e <ucdr_deserialize_endian_uint32_t+0xce>
 8010a52:	2e01      	cmp	r6, #1
 8010a54:	68a3      	ldr	r3, [r4, #8]
 8010a56:	d017      	beq.n	8010a88 <ucdr_deserialize_endian_uint32_t+0xd8>
 8010a58:	78db      	ldrb	r3, [r3, #3]
 8010a5a:	702b      	strb	r3, [r5, #0]
 8010a5c:	68a3      	ldr	r3, [r4, #8]
 8010a5e:	789b      	ldrb	r3, [r3, #2]
 8010a60:	706b      	strb	r3, [r5, #1]
 8010a62:	68a3      	ldr	r3, [r4, #8]
 8010a64:	785b      	ldrb	r3, [r3, #1]
 8010a66:	70ab      	strb	r3, [r5, #2]
 8010a68:	68a3      	ldr	r3, [r4, #8]
 8010a6a:	781b      	ldrb	r3, [r3, #0]
 8010a6c:	70eb      	strb	r3, [r5, #3]
 8010a6e:	2104      	movs	r1, #4
 8010a70:	68a2      	ldr	r2, [r4, #8]
 8010a72:	6923      	ldr	r3, [r4, #16]
 8010a74:	440a      	add	r2, r1
 8010a76:	7561      	strb	r1, [r4, #21]
 8010a78:	440b      	add	r3, r1
 8010a7a:	60a2      	str	r2, [r4, #8]
 8010a7c:	6123      	str	r3, [r4, #16]
 8010a7e:	7da0      	ldrb	r0, [r4, #22]
 8010a80:	f080 0001 	eor.w	r0, r0, #1
 8010a84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a88:	681b      	ldr	r3, [r3, #0]
 8010a8a:	602b      	str	r3, [r5, #0]
 8010a8c:	e7ef      	b.n	8010a6e <ucdr_deserialize_endian_uint32_t+0xbe>
 8010a8e:	68a2      	ldr	r2, [r4, #8]
 8010a90:	6923      	ldr	r3, [r4, #16]
 8010a92:	eba2 0209 	sub.w	r2, r2, r9
 8010a96:	7da0      	ldrb	r0, [r4, #22]
 8010a98:	eba3 0309 	sub.w	r3, r3, r9
 8010a9c:	f884 8015 	strb.w	r8, [r4, #21]
 8010aa0:	f080 0001 	eor.w	r0, r0, #1
 8010aa4:	60a2      	str	r2, [r4, #8]
 8010aa6:	6123      	str	r3, [r4, #16]
 8010aa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010aac:	68a3      	ldr	r3, [r4, #8]
 8010aae:	789b      	ldrb	r3, [r3, #2]
 8010ab0:	706b      	strb	r3, [r5, #1]
 8010ab2:	1cab      	adds	r3, r5, #2
 8010ab4:	68a2      	ldr	r2, [r4, #8]
 8010ab6:	7852      	ldrb	r2, [r2, #1]
 8010ab8:	f803 2b01 	strb.w	r2, [r3], #1
 8010abc:	68a2      	ldr	r2, [r4, #8]
 8010abe:	7812      	ldrb	r2, [r2, #0]
 8010ac0:	701a      	strb	r2, [r3, #0]
 8010ac2:	e7b2      	b.n	8010a2a <ucdr_deserialize_endian_uint32_t+0x7a>
 8010ac4:	4639      	mov	r1, r7
 8010ac6:	464a      	mov	r2, r9
 8010ac8:	4628      	mov	r0, r5
 8010aca:	f00d f994 	bl	801ddf6 <memcpy>
 8010ace:	4652      	mov	r2, sl
 8010ad0:	eb05 0009 	add.w	r0, r5, r9
 8010ad4:	68a1      	ldr	r1, [r4, #8]
 8010ad6:	f00d f98e 	bl	801ddf6 <memcpy>
 8010ada:	e7a6      	b.n	8010a2a <ucdr_deserialize_endian_uint32_t+0x7a>

08010adc <ucdr_serialize_uint64_t>:
 8010adc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ae0:	4604      	mov	r4, r0
 8010ae2:	b082      	sub	sp, #8
 8010ae4:	2108      	movs	r1, #8
 8010ae6:	e9cd 2300 	strd	r2, r3, [sp]
 8010aea:	f001 f827 	bl	8011b3c <ucdr_buffer_alignment>
 8010aee:	4601      	mov	r1, r0
 8010af0:	4620      	mov	r0, r4
 8010af2:	7d67      	ldrb	r7, [r4, #21]
 8010af4:	f001 f86a 	bl	8011bcc <ucdr_advance_buffer>
 8010af8:	2108      	movs	r1, #8
 8010afa:	4620      	mov	r0, r4
 8010afc:	f000 ffbe 	bl	8011a7c <ucdr_check_buffer_available_for>
 8010b00:	2800      	cmp	r0, #0
 8010b02:	d14e      	bne.n	8010ba2 <ucdr_serialize_uint64_t+0xc6>
 8010b04:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8010b08:	42ab      	cmp	r3, r5
 8010b0a:	d945      	bls.n	8010b98 <ucdr_serialize_uint64_t+0xbc>
 8010b0c:	1b5e      	subs	r6, r3, r5
 8010b0e:	60a3      	str	r3, [r4, #8]
 8010b10:	6923      	ldr	r3, [r4, #16]
 8010b12:	4620      	mov	r0, r4
 8010b14:	f1c6 0808 	rsb	r8, r6, #8
 8010b18:	4433      	add	r3, r6
 8010b1a:	4641      	mov	r1, r8
 8010b1c:	6123      	str	r3, [r4, #16]
 8010b1e:	f000 ffb9 	bl	8011a94 <ucdr_check_final_buffer_behavior>
 8010b22:	2800      	cmp	r0, #0
 8010b24:	d074      	beq.n	8010c10 <ucdr_serialize_uint64_t+0x134>
 8010b26:	7d23      	ldrb	r3, [r4, #20]
 8010b28:	2b01      	cmp	r3, #1
 8010b2a:	f000 809b 	beq.w	8010c64 <ucdr_serialize_uint64_t+0x188>
 8010b2e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010b32:	702b      	strb	r3, [r5, #0]
 8010b34:	2e00      	cmp	r6, #0
 8010b36:	d078      	beq.n	8010c2a <ucdr_serialize_uint64_t+0x14e>
 8010b38:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010b3c:	2e01      	cmp	r6, #1
 8010b3e:	706b      	strb	r3, [r5, #1]
 8010b40:	d077      	beq.n	8010c32 <ucdr_serialize_uint64_t+0x156>
 8010b42:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010b46:	2e02      	cmp	r6, #2
 8010b48:	70ab      	strb	r3, [r5, #2]
 8010b4a:	d076      	beq.n	8010c3a <ucdr_serialize_uint64_t+0x15e>
 8010b4c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010b50:	2e03      	cmp	r6, #3
 8010b52:	70eb      	strb	r3, [r5, #3]
 8010b54:	d075      	beq.n	8010c42 <ucdr_serialize_uint64_t+0x166>
 8010b56:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8010b5a:	2e04      	cmp	r6, #4
 8010b5c:	712b      	strb	r3, [r5, #4]
 8010b5e:	d074      	beq.n	8010c4a <ucdr_serialize_uint64_t+0x16e>
 8010b60:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8010b64:	2e05      	cmp	r6, #5
 8010b66:	716b      	strb	r3, [r5, #5]
 8010b68:	d073      	beq.n	8010c52 <ucdr_serialize_uint64_t+0x176>
 8010b6a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8010b6e:	2e06      	cmp	r6, #6
 8010b70:	71ab      	strb	r3, [r5, #6]
 8010b72:	d072      	beq.n	8010c5a <ucdr_serialize_uint64_t+0x17e>
 8010b74:	f89d 3000 	ldrb.w	r3, [sp]
 8010b78:	71eb      	strb	r3, [r5, #7]
 8010b7a:	6923      	ldr	r3, [r4, #16]
 8010b7c:	2108      	movs	r1, #8
 8010b7e:	68a2      	ldr	r2, [r4, #8]
 8010b80:	3308      	adds	r3, #8
 8010b82:	7da0      	ldrb	r0, [r4, #22]
 8010b84:	4442      	add	r2, r8
 8010b86:	7561      	strb	r1, [r4, #21]
 8010b88:	1b9e      	subs	r6, r3, r6
 8010b8a:	f080 0001 	eor.w	r0, r0, #1
 8010b8e:	60a2      	str	r2, [r4, #8]
 8010b90:	6126      	str	r6, [r4, #16]
 8010b92:	b002      	add	sp, #8
 8010b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b98:	2108      	movs	r1, #8
 8010b9a:	4620      	mov	r0, r4
 8010b9c:	f000 ff7a 	bl	8011a94 <ucdr_check_final_buffer_behavior>
 8010ba0:	b350      	cbz	r0, 8010bf8 <ucdr_serialize_uint64_t+0x11c>
 8010ba2:	7d23      	ldrb	r3, [r4, #20]
 8010ba4:	2b01      	cmp	r3, #1
 8010ba6:	d02d      	beq.n	8010c04 <ucdr_serialize_uint64_t+0x128>
 8010ba8:	68a3      	ldr	r3, [r4, #8]
 8010baa:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8010bae:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010bb2:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8010bb6:	7018      	strb	r0, [r3, #0]
 8010bb8:	68a3      	ldr	r3, [r4, #8]
 8010bba:	705a      	strb	r2, [r3, #1]
 8010bbc:	68a3      	ldr	r3, [r4, #8]
 8010bbe:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010bc2:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8010bc6:	7099      	strb	r1, [r3, #2]
 8010bc8:	68a3      	ldr	r3, [r4, #8]
 8010bca:	70da      	strb	r2, [r3, #3]
 8010bcc:	68a3      	ldr	r3, [r4, #8]
 8010bce:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8010bd2:	f89d 1001 	ldrb.w	r1, [sp, #1]
 8010bd6:	7118      	strb	r0, [r3, #4]
 8010bd8:	68a3      	ldr	r3, [r4, #8]
 8010bda:	715a      	strb	r2, [r3, #5]
 8010bdc:	68a3      	ldr	r3, [r4, #8]
 8010bde:	f89d 2000 	ldrb.w	r2, [sp]
 8010be2:	7199      	strb	r1, [r3, #6]
 8010be4:	68a3      	ldr	r3, [r4, #8]
 8010be6:	71da      	strb	r2, [r3, #7]
 8010be8:	2108      	movs	r1, #8
 8010bea:	68a2      	ldr	r2, [r4, #8]
 8010bec:	6923      	ldr	r3, [r4, #16]
 8010bee:	440a      	add	r2, r1
 8010bf0:	7561      	strb	r1, [r4, #21]
 8010bf2:	440b      	add	r3, r1
 8010bf4:	60a2      	str	r2, [r4, #8]
 8010bf6:	6123      	str	r3, [r4, #16]
 8010bf8:	7da0      	ldrb	r0, [r4, #22]
 8010bfa:	f080 0001 	eor.w	r0, r0, #1
 8010bfe:	b002      	add	sp, #8
 8010c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c04:	466b      	mov	r3, sp
 8010c06:	68a2      	ldr	r2, [r4, #8]
 8010c08:	cb03      	ldmia	r3!, {r0, r1}
 8010c0a:	6010      	str	r0, [r2, #0]
 8010c0c:	6051      	str	r1, [r2, #4]
 8010c0e:	e7eb      	b.n	8010be8 <ucdr_serialize_uint64_t+0x10c>
 8010c10:	68a2      	ldr	r2, [r4, #8]
 8010c12:	6923      	ldr	r3, [r4, #16]
 8010c14:	7da0      	ldrb	r0, [r4, #22]
 8010c16:	1b92      	subs	r2, r2, r6
 8010c18:	1b9b      	subs	r3, r3, r6
 8010c1a:	7567      	strb	r7, [r4, #21]
 8010c1c:	f080 0001 	eor.w	r0, r0, #1
 8010c20:	60a2      	str	r2, [r4, #8]
 8010c22:	6123      	str	r3, [r4, #16]
 8010c24:	b002      	add	sp, #8
 8010c26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c2a:	68a3      	ldr	r3, [r4, #8]
 8010c2c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010c30:	701a      	strb	r2, [r3, #0]
 8010c32:	68a3      	ldr	r3, [r4, #8]
 8010c34:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8010c38:	701a      	strb	r2, [r3, #0]
 8010c3a:	68a3      	ldr	r3, [r4, #8]
 8010c3c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010c40:	701a      	strb	r2, [r3, #0]
 8010c42:	68a3      	ldr	r3, [r4, #8]
 8010c44:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8010c48:	701a      	strb	r2, [r3, #0]
 8010c4a:	68a3      	ldr	r3, [r4, #8]
 8010c4c:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8010c50:	701a      	strb	r2, [r3, #0]
 8010c52:	68a3      	ldr	r3, [r4, #8]
 8010c54:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8010c58:	701a      	strb	r2, [r3, #0]
 8010c5a:	68a3      	ldr	r3, [r4, #8]
 8010c5c:	f89d 2000 	ldrb.w	r2, [sp]
 8010c60:	701a      	strb	r2, [r3, #0]
 8010c62:	e78a      	b.n	8010b7a <ucdr_serialize_uint64_t+0x9e>
 8010c64:	4628      	mov	r0, r5
 8010c66:	466d      	mov	r5, sp
 8010c68:	4632      	mov	r2, r6
 8010c6a:	4629      	mov	r1, r5
 8010c6c:	f00d f8c3 	bl	801ddf6 <memcpy>
 8010c70:	4642      	mov	r2, r8
 8010c72:	19a9      	adds	r1, r5, r6
 8010c74:	68a0      	ldr	r0, [r4, #8]
 8010c76:	f00d f8be 	bl	801ddf6 <memcpy>
 8010c7a:	e77e      	b.n	8010b7a <ucdr_serialize_uint64_t+0x9e>

08010c7c <ucdr_serialize_int16_t>:
 8010c7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c80:	460b      	mov	r3, r1
 8010c82:	b082      	sub	sp, #8
 8010c84:	4604      	mov	r4, r0
 8010c86:	2102      	movs	r1, #2
 8010c88:	f8ad 3006 	strh.w	r3, [sp, #6]
 8010c8c:	f000 ff56 	bl	8011b3c <ucdr_buffer_alignment>
 8010c90:	4601      	mov	r1, r0
 8010c92:	4620      	mov	r0, r4
 8010c94:	7d67      	ldrb	r7, [r4, #21]
 8010c96:	f000 ff99 	bl	8011bcc <ucdr_advance_buffer>
 8010c9a:	2102      	movs	r1, #2
 8010c9c:	4620      	mov	r0, r4
 8010c9e:	f000 feed 	bl	8011a7c <ucdr_check_buffer_available_for>
 8010ca2:	bb78      	cbnz	r0, 8010d04 <ucdr_serialize_int16_t+0x88>
 8010ca4:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8010ca8:	42ab      	cmp	r3, r5
 8010caa:	d926      	bls.n	8010cfa <ucdr_serialize_int16_t+0x7e>
 8010cac:	1b5e      	subs	r6, r3, r5
 8010cae:	60a3      	str	r3, [r4, #8]
 8010cb0:	6923      	ldr	r3, [r4, #16]
 8010cb2:	4620      	mov	r0, r4
 8010cb4:	f1c6 0802 	rsb	r8, r6, #2
 8010cb8:	4433      	add	r3, r6
 8010cba:	4641      	mov	r1, r8
 8010cbc:	6123      	str	r3, [r4, #16]
 8010cbe:	f000 fee9 	bl	8011a94 <ucdr_check_final_buffer_behavior>
 8010cc2:	2800      	cmp	r0, #0
 8010cc4:	d03b      	beq.n	8010d3e <ucdr_serialize_int16_t+0xc2>
 8010cc6:	7d23      	ldrb	r3, [r4, #20]
 8010cc8:	2b01      	cmp	r3, #1
 8010cca:	d04a      	beq.n	8010d62 <ucdr_serialize_int16_t+0xe6>
 8010ccc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010cd0:	702b      	strb	r3, [r5, #0]
 8010cd2:	2e00      	cmp	r6, #0
 8010cd4:	d040      	beq.n	8010d58 <ucdr_serialize_int16_t+0xdc>
 8010cd6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010cda:	706b      	strb	r3, [r5, #1]
 8010cdc:	6923      	ldr	r3, [r4, #16]
 8010cde:	2102      	movs	r1, #2
 8010ce0:	68a2      	ldr	r2, [r4, #8]
 8010ce2:	3302      	adds	r3, #2
 8010ce4:	7da0      	ldrb	r0, [r4, #22]
 8010ce6:	4442      	add	r2, r8
 8010ce8:	7561      	strb	r1, [r4, #21]
 8010cea:	1b9e      	subs	r6, r3, r6
 8010cec:	f080 0001 	eor.w	r0, r0, #1
 8010cf0:	60a2      	str	r2, [r4, #8]
 8010cf2:	6126      	str	r6, [r4, #16]
 8010cf4:	b002      	add	sp, #8
 8010cf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010cfa:	2102      	movs	r1, #2
 8010cfc:	4620      	mov	r0, r4
 8010cfe:	f000 fec9 	bl	8011a94 <ucdr_check_final_buffer_behavior>
 8010d02:	b190      	cbz	r0, 8010d2a <ucdr_serialize_int16_t+0xae>
 8010d04:	7d23      	ldrb	r3, [r4, #20]
 8010d06:	2b01      	cmp	r3, #1
 8010d08:	68a3      	ldr	r3, [r4, #8]
 8010d0a:	d014      	beq.n	8010d36 <ucdr_serialize_int16_t+0xba>
 8010d0c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8010d10:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010d14:	7019      	strb	r1, [r3, #0]
 8010d16:	68a3      	ldr	r3, [r4, #8]
 8010d18:	705a      	strb	r2, [r3, #1]
 8010d1a:	2102      	movs	r1, #2
 8010d1c:	68a2      	ldr	r2, [r4, #8]
 8010d1e:	6923      	ldr	r3, [r4, #16]
 8010d20:	440a      	add	r2, r1
 8010d22:	7561      	strb	r1, [r4, #21]
 8010d24:	440b      	add	r3, r1
 8010d26:	60a2      	str	r2, [r4, #8]
 8010d28:	6123      	str	r3, [r4, #16]
 8010d2a:	7da0      	ldrb	r0, [r4, #22]
 8010d2c:	f080 0001 	eor.w	r0, r0, #1
 8010d30:	b002      	add	sp, #8
 8010d32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d36:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8010d3a:	801a      	strh	r2, [r3, #0]
 8010d3c:	e7ed      	b.n	8010d1a <ucdr_serialize_int16_t+0x9e>
 8010d3e:	68a2      	ldr	r2, [r4, #8]
 8010d40:	6923      	ldr	r3, [r4, #16]
 8010d42:	7da0      	ldrb	r0, [r4, #22]
 8010d44:	1b92      	subs	r2, r2, r6
 8010d46:	1b9b      	subs	r3, r3, r6
 8010d48:	7567      	strb	r7, [r4, #21]
 8010d4a:	f080 0001 	eor.w	r0, r0, #1
 8010d4e:	60a2      	str	r2, [r4, #8]
 8010d50:	6123      	str	r3, [r4, #16]
 8010d52:	b002      	add	sp, #8
 8010d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d58:	68a3      	ldr	r3, [r4, #8]
 8010d5a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010d5e:	701a      	strb	r2, [r3, #0]
 8010d60:	e7bc      	b.n	8010cdc <ucdr_serialize_int16_t+0x60>
 8010d62:	4628      	mov	r0, r5
 8010d64:	f10d 0506 	add.w	r5, sp, #6
 8010d68:	4632      	mov	r2, r6
 8010d6a:	4629      	mov	r1, r5
 8010d6c:	f00d f843 	bl	801ddf6 <memcpy>
 8010d70:	4642      	mov	r2, r8
 8010d72:	19a9      	adds	r1, r5, r6
 8010d74:	68a0      	ldr	r0, [r4, #8]
 8010d76:	f00d f83e 	bl	801ddf6 <memcpy>
 8010d7a:	e7af      	b.n	8010cdc <ucdr_serialize_int16_t+0x60>

08010d7c <ucdr_serialize_endian_int16_t>:
 8010d7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010d80:	4604      	mov	r4, r0
 8010d82:	b083      	sub	sp, #12
 8010d84:	460d      	mov	r5, r1
 8010d86:	2102      	movs	r1, #2
 8010d88:	f8ad 2006 	strh.w	r2, [sp, #6]
 8010d8c:	f000 fed6 	bl	8011b3c <ucdr_buffer_alignment>
 8010d90:	4601      	mov	r1, r0
 8010d92:	4620      	mov	r0, r4
 8010d94:	f894 8015 	ldrb.w	r8, [r4, #21]
 8010d98:	f000 ff18 	bl	8011bcc <ucdr_advance_buffer>
 8010d9c:	2102      	movs	r1, #2
 8010d9e:	4620      	mov	r0, r4
 8010da0:	f000 fe6c 	bl	8011a7c <ucdr_check_buffer_available_for>
 8010da4:	bb70      	cbnz	r0, 8010e04 <ucdr_serialize_endian_int16_t+0x88>
 8010da6:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8010daa:	42be      	cmp	r6, r7
 8010dac:	d925      	bls.n	8010dfa <ucdr_serialize_endian_int16_t+0x7e>
 8010dae:	6923      	ldr	r3, [r4, #16]
 8010db0:	4620      	mov	r0, r4
 8010db2:	60a6      	str	r6, [r4, #8]
 8010db4:	1bf6      	subs	r6, r6, r7
 8010db6:	4433      	add	r3, r6
 8010db8:	f1c6 0902 	rsb	r9, r6, #2
 8010dbc:	6123      	str	r3, [r4, #16]
 8010dbe:	4649      	mov	r1, r9
 8010dc0:	f000 fe68 	bl	8011a94 <ucdr_check_final_buffer_behavior>
 8010dc4:	2800      	cmp	r0, #0
 8010dc6:	d039      	beq.n	8010e3c <ucdr_serialize_endian_int16_t+0xc0>
 8010dc8:	2d01      	cmp	r5, #1
 8010dca:	d04a      	beq.n	8010e62 <ucdr_serialize_endian_int16_t+0xe6>
 8010dcc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010dd0:	703b      	strb	r3, [r7, #0]
 8010dd2:	2e00      	cmp	r6, #0
 8010dd4:	d040      	beq.n	8010e58 <ucdr_serialize_endian_int16_t+0xdc>
 8010dd6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010dda:	707b      	strb	r3, [r7, #1]
 8010ddc:	6923      	ldr	r3, [r4, #16]
 8010dde:	2102      	movs	r1, #2
 8010de0:	68a2      	ldr	r2, [r4, #8]
 8010de2:	7da0      	ldrb	r0, [r4, #22]
 8010de4:	3302      	adds	r3, #2
 8010de6:	444a      	add	r2, r9
 8010de8:	7561      	strb	r1, [r4, #21]
 8010dea:	1b9b      	subs	r3, r3, r6
 8010dec:	f080 0001 	eor.w	r0, r0, #1
 8010df0:	60a2      	str	r2, [r4, #8]
 8010df2:	6123      	str	r3, [r4, #16]
 8010df4:	b003      	add	sp, #12
 8010df6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010dfa:	2102      	movs	r1, #2
 8010dfc:	4620      	mov	r0, r4
 8010dfe:	f000 fe49 	bl	8011a94 <ucdr_check_final_buffer_behavior>
 8010e02:	b188      	cbz	r0, 8010e28 <ucdr_serialize_endian_int16_t+0xac>
 8010e04:	2d01      	cmp	r5, #1
 8010e06:	68a3      	ldr	r3, [r4, #8]
 8010e08:	d014      	beq.n	8010e34 <ucdr_serialize_endian_int16_t+0xb8>
 8010e0a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8010e0e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010e12:	7019      	strb	r1, [r3, #0]
 8010e14:	68a3      	ldr	r3, [r4, #8]
 8010e16:	705a      	strb	r2, [r3, #1]
 8010e18:	2102      	movs	r1, #2
 8010e1a:	68a2      	ldr	r2, [r4, #8]
 8010e1c:	6923      	ldr	r3, [r4, #16]
 8010e1e:	440a      	add	r2, r1
 8010e20:	7561      	strb	r1, [r4, #21]
 8010e22:	440b      	add	r3, r1
 8010e24:	60a2      	str	r2, [r4, #8]
 8010e26:	6123      	str	r3, [r4, #16]
 8010e28:	7da0      	ldrb	r0, [r4, #22]
 8010e2a:	f080 0001 	eor.w	r0, r0, #1
 8010e2e:	b003      	add	sp, #12
 8010e30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010e34:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8010e38:	801a      	strh	r2, [r3, #0]
 8010e3a:	e7ed      	b.n	8010e18 <ucdr_serialize_endian_int16_t+0x9c>
 8010e3c:	68a2      	ldr	r2, [r4, #8]
 8010e3e:	6923      	ldr	r3, [r4, #16]
 8010e40:	7da0      	ldrb	r0, [r4, #22]
 8010e42:	1b92      	subs	r2, r2, r6
 8010e44:	1b9b      	subs	r3, r3, r6
 8010e46:	f884 8015 	strb.w	r8, [r4, #21]
 8010e4a:	f080 0001 	eor.w	r0, r0, #1
 8010e4e:	60a2      	str	r2, [r4, #8]
 8010e50:	6123      	str	r3, [r4, #16]
 8010e52:	b003      	add	sp, #12
 8010e54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010e58:	68a3      	ldr	r3, [r4, #8]
 8010e5a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010e5e:	701a      	strb	r2, [r3, #0]
 8010e60:	e7bc      	b.n	8010ddc <ucdr_serialize_endian_int16_t+0x60>
 8010e62:	f10d 0506 	add.w	r5, sp, #6
 8010e66:	4632      	mov	r2, r6
 8010e68:	4638      	mov	r0, r7
 8010e6a:	4629      	mov	r1, r5
 8010e6c:	f00c ffc3 	bl	801ddf6 <memcpy>
 8010e70:	464a      	mov	r2, r9
 8010e72:	19a9      	adds	r1, r5, r6
 8010e74:	68a0      	ldr	r0, [r4, #8]
 8010e76:	f00c ffbe 	bl	801ddf6 <memcpy>
 8010e7a:	e7af      	b.n	8010ddc <ucdr_serialize_endian_int16_t+0x60>

08010e7c <ucdr_deserialize_int16_t>:
 8010e7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010e80:	4604      	mov	r4, r0
 8010e82:	460d      	mov	r5, r1
 8010e84:	2102      	movs	r1, #2
 8010e86:	f000 fe59 	bl	8011b3c <ucdr_buffer_alignment>
 8010e8a:	4601      	mov	r1, r0
 8010e8c:	4620      	mov	r0, r4
 8010e8e:	f894 8015 	ldrb.w	r8, [r4, #21]
 8010e92:	f000 fe9b 	bl	8011bcc <ucdr_advance_buffer>
 8010e96:	2102      	movs	r1, #2
 8010e98:	4620      	mov	r0, r4
 8010e9a:	f000 fdef 	bl	8011a7c <ucdr_check_buffer_available_for>
 8010e9e:	bb60      	cbnz	r0, 8010efa <ucdr_deserialize_int16_t+0x7e>
 8010ea0:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8010ea4:	42be      	cmp	r6, r7
 8010ea6:	d923      	bls.n	8010ef0 <ucdr_deserialize_int16_t+0x74>
 8010ea8:	6923      	ldr	r3, [r4, #16]
 8010eaa:	4620      	mov	r0, r4
 8010eac:	60a6      	str	r6, [r4, #8]
 8010eae:	1bf6      	subs	r6, r6, r7
 8010eb0:	4433      	add	r3, r6
 8010eb2:	f1c6 0902 	rsb	r9, r6, #2
 8010eb6:	6123      	str	r3, [r4, #16]
 8010eb8:	4649      	mov	r1, r9
 8010eba:	f000 fdeb 	bl	8011a94 <ucdr_check_final_buffer_behavior>
 8010ebe:	2800      	cmp	r0, #0
 8010ec0:	d034      	beq.n	8010f2c <ucdr_deserialize_int16_t+0xb0>
 8010ec2:	7d23      	ldrb	r3, [r4, #20]
 8010ec4:	2b01      	cmp	r3, #1
 8010ec6:	d042      	beq.n	8010f4e <ucdr_deserialize_int16_t+0xd2>
 8010ec8:	787b      	ldrb	r3, [r7, #1]
 8010eca:	702b      	strb	r3, [r5, #0]
 8010ecc:	2e00      	cmp	r6, #0
 8010ece:	d03a      	beq.n	8010f46 <ucdr_deserialize_int16_t+0xca>
 8010ed0:	783b      	ldrb	r3, [r7, #0]
 8010ed2:	706b      	strb	r3, [r5, #1]
 8010ed4:	6923      	ldr	r3, [r4, #16]
 8010ed6:	2102      	movs	r1, #2
 8010ed8:	68a2      	ldr	r2, [r4, #8]
 8010eda:	3302      	adds	r3, #2
 8010edc:	7da0      	ldrb	r0, [r4, #22]
 8010ede:	444a      	add	r2, r9
 8010ee0:	7561      	strb	r1, [r4, #21]
 8010ee2:	1b9b      	subs	r3, r3, r6
 8010ee4:	f080 0001 	eor.w	r0, r0, #1
 8010ee8:	60a2      	str	r2, [r4, #8]
 8010eea:	6123      	str	r3, [r4, #16]
 8010eec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010ef0:	2102      	movs	r1, #2
 8010ef2:	4620      	mov	r0, r4
 8010ef4:	f000 fdce 	bl	8011a94 <ucdr_check_final_buffer_behavior>
 8010ef8:	b180      	cbz	r0, 8010f1c <ucdr_deserialize_int16_t+0xa0>
 8010efa:	7d23      	ldrb	r3, [r4, #20]
 8010efc:	2b01      	cmp	r3, #1
 8010efe:	68a3      	ldr	r3, [r4, #8]
 8010f00:	d011      	beq.n	8010f26 <ucdr_deserialize_int16_t+0xaa>
 8010f02:	785b      	ldrb	r3, [r3, #1]
 8010f04:	702b      	strb	r3, [r5, #0]
 8010f06:	68a3      	ldr	r3, [r4, #8]
 8010f08:	781b      	ldrb	r3, [r3, #0]
 8010f0a:	706b      	strb	r3, [r5, #1]
 8010f0c:	2102      	movs	r1, #2
 8010f0e:	68a2      	ldr	r2, [r4, #8]
 8010f10:	6923      	ldr	r3, [r4, #16]
 8010f12:	440a      	add	r2, r1
 8010f14:	7561      	strb	r1, [r4, #21]
 8010f16:	440b      	add	r3, r1
 8010f18:	60a2      	str	r2, [r4, #8]
 8010f1a:	6123      	str	r3, [r4, #16]
 8010f1c:	7da0      	ldrb	r0, [r4, #22]
 8010f1e:	f080 0001 	eor.w	r0, r0, #1
 8010f22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010f26:	881b      	ldrh	r3, [r3, #0]
 8010f28:	802b      	strh	r3, [r5, #0]
 8010f2a:	e7ef      	b.n	8010f0c <ucdr_deserialize_int16_t+0x90>
 8010f2c:	68a2      	ldr	r2, [r4, #8]
 8010f2e:	6923      	ldr	r3, [r4, #16]
 8010f30:	1b92      	subs	r2, r2, r6
 8010f32:	7da0      	ldrb	r0, [r4, #22]
 8010f34:	1b9b      	subs	r3, r3, r6
 8010f36:	f884 8015 	strb.w	r8, [r4, #21]
 8010f3a:	f080 0001 	eor.w	r0, r0, #1
 8010f3e:	60a2      	str	r2, [r4, #8]
 8010f40:	6123      	str	r3, [r4, #16]
 8010f42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010f46:	68a3      	ldr	r3, [r4, #8]
 8010f48:	781b      	ldrb	r3, [r3, #0]
 8010f4a:	706b      	strb	r3, [r5, #1]
 8010f4c:	e7c2      	b.n	8010ed4 <ucdr_deserialize_int16_t+0x58>
 8010f4e:	4639      	mov	r1, r7
 8010f50:	4632      	mov	r2, r6
 8010f52:	4628      	mov	r0, r5
 8010f54:	f00c ff4f 	bl	801ddf6 <memcpy>
 8010f58:	464a      	mov	r2, r9
 8010f5a:	19a8      	adds	r0, r5, r6
 8010f5c:	68a1      	ldr	r1, [r4, #8]
 8010f5e:	f00c ff4a 	bl	801ddf6 <memcpy>
 8010f62:	e7b7      	b.n	8010ed4 <ucdr_deserialize_int16_t+0x58>

08010f64 <ucdr_deserialize_endian_int16_t>:
 8010f64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010f68:	4604      	mov	r4, r0
 8010f6a:	460e      	mov	r6, r1
 8010f6c:	2102      	movs	r1, #2
 8010f6e:	4615      	mov	r5, r2
 8010f70:	f000 fde4 	bl	8011b3c <ucdr_buffer_alignment>
 8010f74:	4601      	mov	r1, r0
 8010f76:	4620      	mov	r0, r4
 8010f78:	f894 8015 	ldrb.w	r8, [r4, #21]
 8010f7c:	f000 fe26 	bl	8011bcc <ucdr_advance_buffer>
 8010f80:	2102      	movs	r1, #2
 8010f82:	4620      	mov	r0, r4
 8010f84:	f000 fd7a 	bl	8011a7c <ucdr_check_buffer_available_for>
 8010f88:	bb70      	cbnz	r0, 8010fe8 <ucdr_deserialize_endian_int16_t+0x84>
 8010f8a:	e9d4 7901 	ldrd	r7, r9, [r4, #4]
 8010f8e:	454f      	cmp	r7, r9
 8010f90:	d925      	bls.n	8010fde <ucdr_deserialize_endian_int16_t+0x7a>
 8010f92:	6923      	ldr	r3, [r4, #16]
 8010f94:	4620      	mov	r0, r4
 8010f96:	60a7      	str	r7, [r4, #8]
 8010f98:	eba7 0709 	sub.w	r7, r7, r9
 8010f9c:	443b      	add	r3, r7
 8010f9e:	f1c7 0a02 	rsb	sl, r7, #2
 8010fa2:	6123      	str	r3, [r4, #16]
 8010fa4:	4651      	mov	r1, sl
 8010fa6:	f000 fd75 	bl	8011a94 <ucdr_check_final_buffer_behavior>
 8010faa:	2800      	cmp	r0, #0
 8010fac:	d034      	beq.n	8011018 <ucdr_deserialize_endian_int16_t+0xb4>
 8010fae:	2e01      	cmp	r6, #1
 8010fb0:	d043      	beq.n	801103a <ucdr_deserialize_endian_int16_t+0xd6>
 8010fb2:	f899 3001 	ldrb.w	r3, [r9, #1]
 8010fb6:	702b      	strb	r3, [r5, #0]
 8010fb8:	2f00      	cmp	r7, #0
 8010fba:	d03a      	beq.n	8011032 <ucdr_deserialize_endian_int16_t+0xce>
 8010fbc:	f899 3000 	ldrb.w	r3, [r9]
 8010fc0:	706b      	strb	r3, [r5, #1]
 8010fc2:	6923      	ldr	r3, [r4, #16]
 8010fc4:	2102      	movs	r1, #2
 8010fc6:	68a2      	ldr	r2, [r4, #8]
 8010fc8:	3302      	adds	r3, #2
 8010fca:	7da0      	ldrb	r0, [r4, #22]
 8010fcc:	4452      	add	r2, sl
 8010fce:	7561      	strb	r1, [r4, #21]
 8010fd0:	1bdb      	subs	r3, r3, r7
 8010fd2:	f080 0001 	eor.w	r0, r0, #1
 8010fd6:	60a2      	str	r2, [r4, #8]
 8010fd8:	6123      	str	r3, [r4, #16]
 8010fda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010fde:	2102      	movs	r1, #2
 8010fe0:	4620      	mov	r0, r4
 8010fe2:	f000 fd57 	bl	8011a94 <ucdr_check_final_buffer_behavior>
 8010fe6:	b178      	cbz	r0, 8011008 <ucdr_deserialize_endian_int16_t+0xa4>
 8010fe8:	2e01      	cmp	r6, #1
 8010fea:	68a3      	ldr	r3, [r4, #8]
 8010fec:	d011      	beq.n	8011012 <ucdr_deserialize_endian_int16_t+0xae>
 8010fee:	785b      	ldrb	r3, [r3, #1]
 8010ff0:	702b      	strb	r3, [r5, #0]
 8010ff2:	68a3      	ldr	r3, [r4, #8]
 8010ff4:	781b      	ldrb	r3, [r3, #0]
 8010ff6:	706b      	strb	r3, [r5, #1]
 8010ff8:	2102      	movs	r1, #2
 8010ffa:	68a2      	ldr	r2, [r4, #8]
 8010ffc:	6923      	ldr	r3, [r4, #16]
 8010ffe:	440a      	add	r2, r1
 8011000:	7561      	strb	r1, [r4, #21]
 8011002:	440b      	add	r3, r1
 8011004:	60a2      	str	r2, [r4, #8]
 8011006:	6123      	str	r3, [r4, #16]
 8011008:	7da0      	ldrb	r0, [r4, #22]
 801100a:	f080 0001 	eor.w	r0, r0, #1
 801100e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011012:	881b      	ldrh	r3, [r3, #0]
 8011014:	802b      	strh	r3, [r5, #0]
 8011016:	e7ef      	b.n	8010ff8 <ucdr_deserialize_endian_int16_t+0x94>
 8011018:	68a2      	ldr	r2, [r4, #8]
 801101a:	6923      	ldr	r3, [r4, #16]
 801101c:	1bd2      	subs	r2, r2, r7
 801101e:	7da0      	ldrb	r0, [r4, #22]
 8011020:	1bdb      	subs	r3, r3, r7
 8011022:	f884 8015 	strb.w	r8, [r4, #21]
 8011026:	f080 0001 	eor.w	r0, r0, #1
 801102a:	60a2      	str	r2, [r4, #8]
 801102c:	6123      	str	r3, [r4, #16]
 801102e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011032:	68a3      	ldr	r3, [r4, #8]
 8011034:	781b      	ldrb	r3, [r3, #0]
 8011036:	706b      	strb	r3, [r5, #1]
 8011038:	e7c3      	b.n	8010fc2 <ucdr_deserialize_endian_int16_t+0x5e>
 801103a:	4649      	mov	r1, r9
 801103c:	463a      	mov	r2, r7
 801103e:	4628      	mov	r0, r5
 8011040:	f00c fed9 	bl	801ddf6 <memcpy>
 8011044:	4652      	mov	r2, sl
 8011046:	19e8      	adds	r0, r5, r7
 8011048:	68a1      	ldr	r1, [r4, #8]
 801104a:	f00c fed4 	bl	801ddf6 <memcpy>
 801104e:	e7b8      	b.n	8010fc2 <ucdr_deserialize_endian_int16_t+0x5e>

08011050 <ucdr_serialize_int32_t>:
 8011050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011054:	b082      	sub	sp, #8
 8011056:	4604      	mov	r4, r0
 8011058:	9101      	str	r1, [sp, #4]
 801105a:	2104      	movs	r1, #4
 801105c:	f000 fd6e 	bl	8011b3c <ucdr_buffer_alignment>
 8011060:	4601      	mov	r1, r0
 8011062:	4620      	mov	r0, r4
 8011064:	7d67      	ldrb	r7, [r4, #21]
 8011066:	f000 fdb1 	bl	8011bcc <ucdr_advance_buffer>
 801106a:	2104      	movs	r1, #4
 801106c:	4620      	mov	r0, r4
 801106e:	f000 fd05 	bl	8011a7c <ucdr_check_buffer_available_for>
 8011072:	2800      	cmp	r0, #0
 8011074:	d139      	bne.n	80110ea <ucdr_serialize_int32_t+0x9a>
 8011076:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 801107a:	42ab      	cmp	r3, r5
 801107c:	d930      	bls.n	80110e0 <ucdr_serialize_int32_t+0x90>
 801107e:	1b5e      	subs	r6, r3, r5
 8011080:	60a3      	str	r3, [r4, #8]
 8011082:	6923      	ldr	r3, [r4, #16]
 8011084:	4620      	mov	r0, r4
 8011086:	f1c6 0804 	rsb	r8, r6, #4
 801108a:	4433      	add	r3, r6
 801108c:	4641      	mov	r1, r8
 801108e:	6123      	str	r3, [r4, #16]
 8011090:	f000 fd00 	bl	8011a94 <ucdr_check_final_buffer_behavior>
 8011094:	2800      	cmp	r0, #0
 8011096:	d04c      	beq.n	8011132 <ucdr_serialize_int32_t+0xe2>
 8011098:	7d23      	ldrb	r3, [r4, #20]
 801109a:	2b01      	cmp	r3, #1
 801109c:	d063      	beq.n	8011166 <ucdr_serialize_int32_t+0x116>
 801109e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80110a2:	702b      	strb	r3, [r5, #0]
 80110a4:	2e00      	cmp	r6, #0
 80110a6:	d051      	beq.n	801114c <ucdr_serialize_int32_t+0xfc>
 80110a8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80110ac:	2e01      	cmp	r6, #1
 80110ae:	706b      	strb	r3, [r5, #1]
 80110b0:	d050      	beq.n	8011154 <ucdr_serialize_int32_t+0x104>
 80110b2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80110b6:	2e02      	cmp	r6, #2
 80110b8:	70ab      	strb	r3, [r5, #2]
 80110ba:	d04f      	beq.n	801115c <ucdr_serialize_int32_t+0x10c>
 80110bc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80110c0:	70eb      	strb	r3, [r5, #3]
 80110c2:	6923      	ldr	r3, [r4, #16]
 80110c4:	2104      	movs	r1, #4
 80110c6:	68a2      	ldr	r2, [r4, #8]
 80110c8:	3304      	adds	r3, #4
 80110ca:	7da0      	ldrb	r0, [r4, #22]
 80110cc:	4442      	add	r2, r8
 80110ce:	7561      	strb	r1, [r4, #21]
 80110d0:	1b9e      	subs	r6, r3, r6
 80110d2:	f080 0001 	eor.w	r0, r0, #1
 80110d6:	60a2      	str	r2, [r4, #8]
 80110d8:	6126      	str	r6, [r4, #16]
 80110da:	b002      	add	sp, #8
 80110dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80110e0:	2104      	movs	r1, #4
 80110e2:	4620      	mov	r0, r4
 80110e4:	f000 fcd6 	bl	8011a94 <ucdr_check_final_buffer_behavior>
 80110e8:	b1d0      	cbz	r0, 8011120 <ucdr_serialize_int32_t+0xd0>
 80110ea:	7d23      	ldrb	r3, [r4, #20]
 80110ec:	2b01      	cmp	r3, #1
 80110ee:	68a3      	ldr	r3, [r4, #8]
 80110f0:	d01c      	beq.n	801112c <ucdr_serialize_int32_t+0xdc>
 80110f2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80110f6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80110fa:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80110fe:	7018      	strb	r0, [r3, #0]
 8011100:	68a3      	ldr	r3, [r4, #8]
 8011102:	705a      	strb	r2, [r3, #1]
 8011104:	68a3      	ldr	r3, [r4, #8]
 8011106:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801110a:	7099      	strb	r1, [r3, #2]
 801110c:	68a3      	ldr	r3, [r4, #8]
 801110e:	70da      	strb	r2, [r3, #3]
 8011110:	2104      	movs	r1, #4
 8011112:	68a2      	ldr	r2, [r4, #8]
 8011114:	6923      	ldr	r3, [r4, #16]
 8011116:	440a      	add	r2, r1
 8011118:	7561      	strb	r1, [r4, #21]
 801111a:	440b      	add	r3, r1
 801111c:	60a2      	str	r2, [r4, #8]
 801111e:	6123      	str	r3, [r4, #16]
 8011120:	7da0      	ldrb	r0, [r4, #22]
 8011122:	f080 0001 	eor.w	r0, r0, #1
 8011126:	b002      	add	sp, #8
 8011128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801112c:	9a01      	ldr	r2, [sp, #4]
 801112e:	601a      	str	r2, [r3, #0]
 8011130:	e7ee      	b.n	8011110 <ucdr_serialize_int32_t+0xc0>
 8011132:	68a2      	ldr	r2, [r4, #8]
 8011134:	6923      	ldr	r3, [r4, #16]
 8011136:	7da0      	ldrb	r0, [r4, #22]
 8011138:	1b92      	subs	r2, r2, r6
 801113a:	1b9b      	subs	r3, r3, r6
 801113c:	7567      	strb	r7, [r4, #21]
 801113e:	f080 0001 	eor.w	r0, r0, #1
 8011142:	60a2      	str	r2, [r4, #8]
 8011144:	6123      	str	r3, [r4, #16]
 8011146:	b002      	add	sp, #8
 8011148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801114c:	68a3      	ldr	r3, [r4, #8]
 801114e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011152:	701a      	strb	r2, [r3, #0]
 8011154:	68a3      	ldr	r3, [r4, #8]
 8011156:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801115a:	701a      	strb	r2, [r3, #0]
 801115c:	68a3      	ldr	r3, [r4, #8]
 801115e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011162:	701a      	strb	r2, [r3, #0]
 8011164:	e7ad      	b.n	80110c2 <ucdr_serialize_int32_t+0x72>
 8011166:	4628      	mov	r0, r5
 8011168:	ad01      	add	r5, sp, #4
 801116a:	4632      	mov	r2, r6
 801116c:	4629      	mov	r1, r5
 801116e:	f00c fe42 	bl	801ddf6 <memcpy>
 8011172:	4642      	mov	r2, r8
 8011174:	19a9      	adds	r1, r5, r6
 8011176:	68a0      	ldr	r0, [r4, #8]
 8011178:	f00c fe3d 	bl	801ddf6 <memcpy>
 801117c:	e7a1      	b.n	80110c2 <ucdr_serialize_int32_t+0x72>
 801117e:	bf00      	nop

08011180 <ucdr_deserialize_int32_t>:
 8011180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011184:	4604      	mov	r4, r0
 8011186:	460d      	mov	r5, r1
 8011188:	2104      	movs	r1, #4
 801118a:	f000 fcd7 	bl	8011b3c <ucdr_buffer_alignment>
 801118e:	4601      	mov	r1, r0
 8011190:	4620      	mov	r0, r4
 8011192:	f894 8015 	ldrb.w	r8, [r4, #21]
 8011196:	f000 fd19 	bl	8011bcc <ucdr_advance_buffer>
 801119a:	2104      	movs	r1, #4
 801119c:	4620      	mov	r0, r4
 801119e:	f000 fc6d 	bl	8011a7c <ucdr_check_buffer_available_for>
 80111a2:	2800      	cmp	r0, #0
 80111a4:	d138      	bne.n	8011218 <ucdr_deserialize_int32_t+0x98>
 80111a6:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80111aa:	42b7      	cmp	r7, r6
 80111ac:	d92f      	bls.n	801120e <ucdr_deserialize_int32_t+0x8e>
 80111ae:	6923      	ldr	r3, [r4, #16]
 80111b0:	4620      	mov	r0, r4
 80111b2:	60a7      	str	r7, [r4, #8]
 80111b4:	1bbf      	subs	r7, r7, r6
 80111b6:	443b      	add	r3, r7
 80111b8:	f1c7 0904 	rsb	r9, r7, #4
 80111bc:	6123      	str	r3, [r4, #16]
 80111be:	4649      	mov	r1, r9
 80111c0:	f000 fc68 	bl	8011a94 <ucdr_check_final_buffer_behavior>
 80111c4:	2800      	cmp	r0, #0
 80111c6:	d046      	beq.n	8011256 <ucdr_deserialize_int32_t+0xd6>
 80111c8:	7d23      	ldrb	r3, [r4, #20]
 80111ca:	2b01      	cmp	r3, #1
 80111cc:	d05c      	beq.n	8011288 <ucdr_deserialize_int32_t+0x108>
 80111ce:	78f3      	ldrb	r3, [r6, #3]
 80111d0:	702b      	strb	r3, [r5, #0]
 80111d2:	2f00      	cmp	r7, #0
 80111d4:	d04c      	beq.n	8011270 <ucdr_deserialize_int32_t+0xf0>
 80111d6:	78b3      	ldrb	r3, [r6, #2]
 80111d8:	2f01      	cmp	r7, #1
 80111da:	706b      	strb	r3, [r5, #1]
 80111dc:	f105 0302 	add.w	r3, r5, #2
 80111e0:	d04a      	beq.n	8011278 <ucdr_deserialize_int32_t+0xf8>
 80111e2:	7873      	ldrb	r3, [r6, #1]
 80111e4:	2f02      	cmp	r7, #2
 80111e6:	70ab      	strb	r3, [r5, #2]
 80111e8:	f105 0303 	add.w	r3, r5, #3
 80111ec:	d048      	beq.n	8011280 <ucdr_deserialize_int32_t+0x100>
 80111ee:	7833      	ldrb	r3, [r6, #0]
 80111f0:	70eb      	strb	r3, [r5, #3]
 80111f2:	6923      	ldr	r3, [r4, #16]
 80111f4:	2104      	movs	r1, #4
 80111f6:	68a2      	ldr	r2, [r4, #8]
 80111f8:	3304      	adds	r3, #4
 80111fa:	7da0      	ldrb	r0, [r4, #22]
 80111fc:	444a      	add	r2, r9
 80111fe:	7561      	strb	r1, [r4, #21]
 8011200:	1bdb      	subs	r3, r3, r7
 8011202:	f080 0001 	eor.w	r0, r0, #1
 8011206:	60a2      	str	r2, [r4, #8]
 8011208:	6123      	str	r3, [r4, #16]
 801120a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801120e:	2104      	movs	r1, #4
 8011210:	4620      	mov	r0, r4
 8011212:	f000 fc3f 	bl	8011a94 <ucdr_check_final_buffer_behavior>
 8011216:	b1b0      	cbz	r0, 8011246 <ucdr_deserialize_int32_t+0xc6>
 8011218:	7d23      	ldrb	r3, [r4, #20]
 801121a:	2b01      	cmp	r3, #1
 801121c:	68a3      	ldr	r3, [r4, #8]
 801121e:	d017      	beq.n	8011250 <ucdr_deserialize_int32_t+0xd0>
 8011220:	78db      	ldrb	r3, [r3, #3]
 8011222:	702b      	strb	r3, [r5, #0]
 8011224:	68a3      	ldr	r3, [r4, #8]
 8011226:	789b      	ldrb	r3, [r3, #2]
 8011228:	706b      	strb	r3, [r5, #1]
 801122a:	68a3      	ldr	r3, [r4, #8]
 801122c:	785b      	ldrb	r3, [r3, #1]
 801122e:	70ab      	strb	r3, [r5, #2]
 8011230:	68a3      	ldr	r3, [r4, #8]
 8011232:	781b      	ldrb	r3, [r3, #0]
 8011234:	70eb      	strb	r3, [r5, #3]
 8011236:	2104      	movs	r1, #4
 8011238:	68a2      	ldr	r2, [r4, #8]
 801123a:	6923      	ldr	r3, [r4, #16]
 801123c:	440a      	add	r2, r1
 801123e:	7561      	strb	r1, [r4, #21]
 8011240:	440b      	add	r3, r1
 8011242:	60a2      	str	r2, [r4, #8]
 8011244:	6123      	str	r3, [r4, #16]
 8011246:	7da0      	ldrb	r0, [r4, #22]
 8011248:	f080 0001 	eor.w	r0, r0, #1
 801124c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011250:	681b      	ldr	r3, [r3, #0]
 8011252:	602b      	str	r3, [r5, #0]
 8011254:	e7ef      	b.n	8011236 <ucdr_deserialize_int32_t+0xb6>
 8011256:	68a2      	ldr	r2, [r4, #8]
 8011258:	6923      	ldr	r3, [r4, #16]
 801125a:	1bd2      	subs	r2, r2, r7
 801125c:	7da0      	ldrb	r0, [r4, #22]
 801125e:	1bdb      	subs	r3, r3, r7
 8011260:	f884 8015 	strb.w	r8, [r4, #21]
 8011264:	f080 0001 	eor.w	r0, r0, #1
 8011268:	60a2      	str	r2, [r4, #8]
 801126a:	6123      	str	r3, [r4, #16]
 801126c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011270:	68a3      	ldr	r3, [r4, #8]
 8011272:	789b      	ldrb	r3, [r3, #2]
 8011274:	706b      	strb	r3, [r5, #1]
 8011276:	1cab      	adds	r3, r5, #2
 8011278:	68a2      	ldr	r2, [r4, #8]
 801127a:	7852      	ldrb	r2, [r2, #1]
 801127c:	f803 2b01 	strb.w	r2, [r3], #1
 8011280:	68a2      	ldr	r2, [r4, #8]
 8011282:	7812      	ldrb	r2, [r2, #0]
 8011284:	701a      	strb	r2, [r3, #0]
 8011286:	e7b4      	b.n	80111f2 <ucdr_deserialize_int32_t+0x72>
 8011288:	4631      	mov	r1, r6
 801128a:	463a      	mov	r2, r7
 801128c:	4628      	mov	r0, r5
 801128e:	f00c fdb2 	bl	801ddf6 <memcpy>
 8011292:	464a      	mov	r2, r9
 8011294:	19e8      	adds	r0, r5, r7
 8011296:	68a1      	ldr	r1, [r4, #8]
 8011298:	f00c fdad 	bl	801ddf6 <memcpy>
 801129c:	e7a9      	b.n	80111f2 <ucdr_deserialize_int32_t+0x72>
 801129e:	bf00      	nop

080112a0 <ucdr_serialize_int64_t>:
 80112a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80112a4:	4604      	mov	r4, r0
 80112a6:	b082      	sub	sp, #8
 80112a8:	2108      	movs	r1, #8
 80112aa:	e9cd 2300 	strd	r2, r3, [sp]
 80112ae:	f000 fc45 	bl	8011b3c <ucdr_buffer_alignment>
 80112b2:	4601      	mov	r1, r0
 80112b4:	4620      	mov	r0, r4
 80112b6:	7d67      	ldrb	r7, [r4, #21]
 80112b8:	f000 fc88 	bl	8011bcc <ucdr_advance_buffer>
 80112bc:	2108      	movs	r1, #8
 80112be:	4620      	mov	r0, r4
 80112c0:	f000 fbdc 	bl	8011a7c <ucdr_check_buffer_available_for>
 80112c4:	2800      	cmp	r0, #0
 80112c6:	d14e      	bne.n	8011366 <ucdr_serialize_int64_t+0xc6>
 80112c8:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80112cc:	42ab      	cmp	r3, r5
 80112ce:	d945      	bls.n	801135c <ucdr_serialize_int64_t+0xbc>
 80112d0:	1b5e      	subs	r6, r3, r5
 80112d2:	60a3      	str	r3, [r4, #8]
 80112d4:	6923      	ldr	r3, [r4, #16]
 80112d6:	4620      	mov	r0, r4
 80112d8:	f1c6 0808 	rsb	r8, r6, #8
 80112dc:	4433      	add	r3, r6
 80112de:	4641      	mov	r1, r8
 80112e0:	6123      	str	r3, [r4, #16]
 80112e2:	f000 fbd7 	bl	8011a94 <ucdr_check_final_buffer_behavior>
 80112e6:	2800      	cmp	r0, #0
 80112e8:	d074      	beq.n	80113d4 <ucdr_serialize_int64_t+0x134>
 80112ea:	7d23      	ldrb	r3, [r4, #20]
 80112ec:	2b01      	cmp	r3, #1
 80112ee:	f000 809b 	beq.w	8011428 <ucdr_serialize_int64_t+0x188>
 80112f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80112f6:	702b      	strb	r3, [r5, #0]
 80112f8:	2e00      	cmp	r6, #0
 80112fa:	d078      	beq.n	80113ee <ucdr_serialize_int64_t+0x14e>
 80112fc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011300:	2e01      	cmp	r6, #1
 8011302:	706b      	strb	r3, [r5, #1]
 8011304:	d077      	beq.n	80113f6 <ucdr_serialize_int64_t+0x156>
 8011306:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801130a:	2e02      	cmp	r6, #2
 801130c:	70ab      	strb	r3, [r5, #2]
 801130e:	d076      	beq.n	80113fe <ucdr_serialize_int64_t+0x15e>
 8011310:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011314:	2e03      	cmp	r6, #3
 8011316:	70eb      	strb	r3, [r5, #3]
 8011318:	d075      	beq.n	8011406 <ucdr_serialize_int64_t+0x166>
 801131a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801131e:	2e04      	cmp	r6, #4
 8011320:	712b      	strb	r3, [r5, #4]
 8011322:	d074      	beq.n	801140e <ucdr_serialize_int64_t+0x16e>
 8011324:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8011328:	2e05      	cmp	r6, #5
 801132a:	716b      	strb	r3, [r5, #5]
 801132c:	d073      	beq.n	8011416 <ucdr_serialize_int64_t+0x176>
 801132e:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8011332:	2e06      	cmp	r6, #6
 8011334:	71ab      	strb	r3, [r5, #6]
 8011336:	d072      	beq.n	801141e <ucdr_serialize_int64_t+0x17e>
 8011338:	f89d 3000 	ldrb.w	r3, [sp]
 801133c:	71eb      	strb	r3, [r5, #7]
 801133e:	6923      	ldr	r3, [r4, #16]
 8011340:	2108      	movs	r1, #8
 8011342:	68a2      	ldr	r2, [r4, #8]
 8011344:	3308      	adds	r3, #8
 8011346:	7da0      	ldrb	r0, [r4, #22]
 8011348:	4442      	add	r2, r8
 801134a:	7561      	strb	r1, [r4, #21]
 801134c:	1b9e      	subs	r6, r3, r6
 801134e:	f080 0001 	eor.w	r0, r0, #1
 8011352:	60a2      	str	r2, [r4, #8]
 8011354:	6126      	str	r6, [r4, #16]
 8011356:	b002      	add	sp, #8
 8011358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801135c:	2108      	movs	r1, #8
 801135e:	4620      	mov	r0, r4
 8011360:	f000 fb98 	bl	8011a94 <ucdr_check_final_buffer_behavior>
 8011364:	b350      	cbz	r0, 80113bc <ucdr_serialize_int64_t+0x11c>
 8011366:	7d23      	ldrb	r3, [r4, #20]
 8011368:	2b01      	cmp	r3, #1
 801136a:	d02d      	beq.n	80113c8 <ucdr_serialize_int64_t+0x128>
 801136c:	68a3      	ldr	r3, [r4, #8]
 801136e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8011372:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011376:	f89d 1005 	ldrb.w	r1, [sp, #5]
 801137a:	7018      	strb	r0, [r3, #0]
 801137c:	68a3      	ldr	r3, [r4, #8]
 801137e:	705a      	strb	r2, [r3, #1]
 8011380:	68a3      	ldr	r3, [r4, #8]
 8011382:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011386:	f89d 0003 	ldrb.w	r0, [sp, #3]
 801138a:	7099      	strb	r1, [r3, #2]
 801138c:	68a3      	ldr	r3, [r4, #8]
 801138e:	70da      	strb	r2, [r3, #3]
 8011390:	68a3      	ldr	r3, [r4, #8]
 8011392:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8011396:	f89d 1001 	ldrb.w	r1, [sp, #1]
 801139a:	7118      	strb	r0, [r3, #4]
 801139c:	68a3      	ldr	r3, [r4, #8]
 801139e:	715a      	strb	r2, [r3, #5]
 80113a0:	68a3      	ldr	r3, [r4, #8]
 80113a2:	f89d 2000 	ldrb.w	r2, [sp]
 80113a6:	7199      	strb	r1, [r3, #6]
 80113a8:	68a3      	ldr	r3, [r4, #8]
 80113aa:	71da      	strb	r2, [r3, #7]
 80113ac:	2108      	movs	r1, #8
 80113ae:	68a2      	ldr	r2, [r4, #8]
 80113b0:	6923      	ldr	r3, [r4, #16]
 80113b2:	440a      	add	r2, r1
 80113b4:	7561      	strb	r1, [r4, #21]
 80113b6:	440b      	add	r3, r1
 80113b8:	60a2      	str	r2, [r4, #8]
 80113ba:	6123      	str	r3, [r4, #16]
 80113bc:	7da0      	ldrb	r0, [r4, #22]
 80113be:	f080 0001 	eor.w	r0, r0, #1
 80113c2:	b002      	add	sp, #8
 80113c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80113c8:	466b      	mov	r3, sp
 80113ca:	68a2      	ldr	r2, [r4, #8]
 80113cc:	cb03      	ldmia	r3!, {r0, r1}
 80113ce:	6010      	str	r0, [r2, #0]
 80113d0:	6051      	str	r1, [r2, #4]
 80113d2:	e7eb      	b.n	80113ac <ucdr_serialize_int64_t+0x10c>
 80113d4:	68a2      	ldr	r2, [r4, #8]
 80113d6:	6923      	ldr	r3, [r4, #16]
 80113d8:	7da0      	ldrb	r0, [r4, #22]
 80113da:	1b92      	subs	r2, r2, r6
 80113dc:	1b9b      	subs	r3, r3, r6
 80113de:	7567      	strb	r7, [r4, #21]
 80113e0:	f080 0001 	eor.w	r0, r0, #1
 80113e4:	60a2      	str	r2, [r4, #8]
 80113e6:	6123      	str	r3, [r4, #16]
 80113e8:	b002      	add	sp, #8
 80113ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80113ee:	68a3      	ldr	r3, [r4, #8]
 80113f0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80113f4:	701a      	strb	r2, [r3, #0]
 80113f6:	68a3      	ldr	r3, [r4, #8]
 80113f8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80113fc:	701a      	strb	r2, [r3, #0]
 80113fe:	68a3      	ldr	r3, [r4, #8]
 8011400:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011404:	701a      	strb	r2, [r3, #0]
 8011406:	68a3      	ldr	r3, [r4, #8]
 8011408:	f89d 2003 	ldrb.w	r2, [sp, #3]
 801140c:	701a      	strb	r2, [r3, #0]
 801140e:	68a3      	ldr	r3, [r4, #8]
 8011410:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8011414:	701a      	strb	r2, [r3, #0]
 8011416:	68a3      	ldr	r3, [r4, #8]
 8011418:	f89d 2001 	ldrb.w	r2, [sp, #1]
 801141c:	701a      	strb	r2, [r3, #0]
 801141e:	68a3      	ldr	r3, [r4, #8]
 8011420:	f89d 2000 	ldrb.w	r2, [sp]
 8011424:	701a      	strb	r2, [r3, #0]
 8011426:	e78a      	b.n	801133e <ucdr_serialize_int64_t+0x9e>
 8011428:	4628      	mov	r0, r5
 801142a:	466d      	mov	r5, sp
 801142c:	4632      	mov	r2, r6
 801142e:	4629      	mov	r1, r5
 8011430:	f00c fce1 	bl	801ddf6 <memcpy>
 8011434:	4642      	mov	r2, r8
 8011436:	19a9      	adds	r1, r5, r6
 8011438:	68a0      	ldr	r0, [r4, #8]
 801143a:	f00c fcdc 	bl	801ddf6 <memcpy>
 801143e:	e77e      	b.n	801133e <ucdr_serialize_int64_t+0x9e>

08011440 <ucdr_deserialize_int64_t>:
 8011440:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011444:	4604      	mov	r4, r0
 8011446:	460d      	mov	r5, r1
 8011448:	2108      	movs	r1, #8
 801144a:	f000 fb77 	bl	8011b3c <ucdr_buffer_alignment>
 801144e:	4601      	mov	r1, r0
 8011450:	4620      	mov	r0, r4
 8011452:	f894 8015 	ldrb.w	r8, [r4, #21]
 8011456:	f000 fbb9 	bl	8011bcc <ucdr_advance_buffer>
 801145a:	2108      	movs	r1, #8
 801145c:	4620      	mov	r0, r4
 801145e:	f000 fb0d 	bl	8011a7c <ucdr_check_buffer_available_for>
 8011462:	2800      	cmp	r0, #0
 8011464:	d151      	bne.n	801150a <ucdr_deserialize_int64_t+0xca>
 8011466:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 801146a:	42be      	cmp	r6, r7
 801146c:	d948      	bls.n	8011500 <ucdr_deserialize_int64_t+0xc0>
 801146e:	6923      	ldr	r3, [r4, #16]
 8011470:	4620      	mov	r0, r4
 8011472:	60a6      	str	r6, [r4, #8]
 8011474:	1bf6      	subs	r6, r6, r7
 8011476:	4433      	add	r3, r6
 8011478:	f1c6 0908 	rsb	r9, r6, #8
 801147c:	6123      	str	r3, [r4, #16]
 801147e:	4649      	mov	r1, r9
 8011480:	f000 fb08 	bl	8011a94 <ucdr_check_final_buffer_behavior>
 8011484:	2800      	cmp	r0, #0
 8011486:	d06d      	beq.n	8011564 <ucdr_deserialize_int64_t+0x124>
 8011488:	7d23      	ldrb	r3, [r4, #20]
 801148a:	2b01      	cmp	r3, #1
 801148c:	f000 8093 	beq.w	80115b6 <ucdr_deserialize_int64_t+0x176>
 8011490:	79fb      	ldrb	r3, [r7, #7]
 8011492:	702b      	strb	r3, [r5, #0]
 8011494:	2e00      	cmp	r6, #0
 8011496:	d072      	beq.n	801157e <ucdr_deserialize_int64_t+0x13e>
 8011498:	79bb      	ldrb	r3, [r7, #6]
 801149a:	2e01      	cmp	r6, #1
 801149c:	706b      	strb	r3, [r5, #1]
 801149e:	f105 0302 	add.w	r3, r5, #2
 80114a2:	d070      	beq.n	8011586 <ucdr_deserialize_int64_t+0x146>
 80114a4:	797b      	ldrb	r3, [r7, #5]
 80114a6:	2e02      	cmp	r6, #2
 80114a8:	70ab      	strb	r3, [r5, #2]
 80114aa:	f105 0303 	add.w	r3, r5, #3
 80114ae:	d06e      	beq.n	801158e <ucdr_deserialize_int64_t+0x14e>
 80114b0:	793b      	ldrb	r3, [r7, #4]
 80114b2:	2e03      	cmp	r6, #3
 80114b4:	70eb      	strb	r3, [r5, #3]
 80114b6:	f105 0304 	add.w	r3, r5, #4
 80114ba:	d06c      	beq.n	8011596 <ucdr_deserialize_int64_t+0x156>
 80114bc:	78fb      	ldrb	r3, [r7, #3]
 80114be:	2e04      	cmp	r6, #4
 80114c0:	712b      	strb	r3, [r5, #4]
 80114c2:	f105 0305 	add.w	r3, r5, #5
 80114c6:	d06a      	beq.n	801159e <ucdr_deserialize_int64_t+0x15e>
 80114c8:	78bb      	ldrb	r3, [r7, #2]
 80114ca:	2e05      	cmp	r6, #5
 80114cc:	716b      	strb	r3, [r5, #5]
 80114ce:	f105 0306 	add.w	r3, r5, #6
 80114d2:	d068      	beq.n	80115a6 <ucdr_deserialize_int64_t+0x166>
 80114d4:	787b      	ldrb	r3, [r7, #1]
 80114d6:	2e06      	cmp	r6, #6
 80114d8:	71ab      	strb	r3, [r5, #6]
 80114da:	f105 0307 	add.w	r3, r5, #7
 80114de:	d066      	beq.n	80115ae <ucdr_deserialize_int64_t+0x16e>
 80114e0:	783b      	ldrb	r3, [r7, #0]
 80114e2:	71eb      	strb	r3, [r5, #7]
 80114e4:	6923      	ldr	r3, [r4, #16]
 80114e6:	2108      	movs	r1, #8
 80114e8:	68a2      	ldr	r2, [r4, #8]
 80114ea:	3308      	adds	r3, #8
 80114ec:	7da0      	ldrb	r0, [r4, #22]
 80114ee:	444a      	add	r2, r9
 80114f0:	7561      	strb	r1, [r4, #21]
 80114f2:	1b9e      	subs	r6, r3, r6
 80114f4:	f080 0001 	eor.w	r0, r0, #1
 80114f8:	60a2      	str	r2, [r4, #8]
 80114fa:	6126      	str	r6, [r4, #16]
 80114fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011500:	2108      	movs	r1, #8
 8011502:	4620      	mov	r0, r4
 8011504:	f000 fac6 	bl	8011a94 <ucdr_check_final_buffer_behavior>
 8011508:	b310      	cbz	r0, 8011550 <ucdr_deserialize_int64_t+0x110>
 801150a:	7d23      	ldrb	r3, [r4, #20]
 801150c:	2b01      	cmp	r3, #1
 801150e:	68a3      	ldr	r3, [r4, #8]
 8011510:	d023      	beq.n	801155a <ucdr_deserialize_int64_t+0x11a>
 8011512:	79db      	ldrb	r3, [r3, #7]
 8011514:	702b      	strb	r3, [r5, #0]
 8011516:	68a3      	ldr	r3, [r4, #8]
 8011518:	799b      	ldrb	r3, [r3, #6]
 801151a:	706b      	strb	r3, [r5, #1]
 801151c:	68a3      	ldr	r3, [r4, #8]
 801151e:	795b      	ldrb	r3, [r3, #5]
 8011520:	70ab      	strb	r3, [r5, #2]
 8011522:	68a3      	ldr	r3, [r4, #8]
 8011524:	791b      	ldrb	r3, [r3, #4]
 8011526:	70eb      	strb	r3, [r5, #3]
 8011528:	68a3      	ldr	r3, [r4, #8]
 801152a:	78db      	ldrb	r3, [r3, #3]
 801152c:	712b      	strb	r3, [r5, #4]
 801152e:	68a3      	ldr	r3, [r4, #8]
 8011530:	789b      	ldrb	r3, [r3, #2]
 8011532:	716b      	strb	r3, [r5, #5]
 8011534:	68a3      	ldr	r3, [r4, #8]
 8011536:	785b      	ldrb	r3, [r3, #1]
 8011538:	71ab      	strb	r3, [r5, #6]
 801153a:	68a3      	ldr	r3, [r4, #8]
 801153c:	781b      	ldrb	r3, [r3, #0]
 801153e:	71eb      	strb	r3, [r5, #7]
 8011540:	2108      	movs	r1, #8
 8011542:	68a2      	ldr	r2, [r4, #8]
 8011544:	6923      	ldr	r3, [r4, #16]
 8011546:	440a      	add	r2, r1
 8011548:	7561      	strb	r1, [r4, #21]
 801154a:	440b      	add	r3, r1
 801154c:	60a2      	str	r2, [r4, #8]
 801154e:	6123      	str	r3, [r4, #16]
 8011550:	7da0      	ldrb	r0, [r4, #22]
 8011552:	f080 0001 	eor.w	r0, r0, #1
 8011556:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801155a:	681a      	ldr	r2, [r3, #0]
 801155c:	685b      	ldr	r3, [r3, #4]
 801155e:	602a      	str	r2, [r5, #0]
 8011560:	606b      	str	r3, [r5, #4]
 8011562:	e7ed      	b.n	8011540 <ucdr_deserialize_int64_t+0x100>
 8011564:	68a2      	ldr	r2, [r4, #8]
 8011566:	6923      	ldr	r3, [r4, #16]
 8011568:	1b92      	subs	r2, r2, r6
 801156a:	7da0      	ldrb	r0, [r4, #22]
 801156c:	1b9b      	subs	r3, r3, r6
 801156e:	f884 8015 	strb.w	r8, [r4, #21]
 8011572:	f080 0001 	eor.w	r0, r0, #1
 8011576:	60a2      	str	r2, [r4, #8]
 8011578:	6123      	str	r3, [r4, #16]
 801157a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801157e:	68a3      	ldr	r3, [r4, #8]
 8011580:	799b      	ldrb	r3, [r3, #6]
 8011582:	706b      	strb	r3, [r5, #1]
 8011584:	1cab      	adds	r3, r5, #2
 8011586:	68a2      	ldr	r2, [r4, #8]
 8011588:	7952      	ldrb	r2, [r2, #5]
 801158a:	f803 2b01 	strb.w	r2, [r3], #1
 801158e:	68a2      	ldr	r2, [r4, #8]
 8011590:	7912      	ldrb	r2, [r2, #4]
 8011592:	f803 2b01 	strb.w	r2, [r3], #1
 8011596:	68a2      	ldr	r2, [r4, #8]
 8011598:	78d2      	ldrb	r2, [r2, #3]
 801159a:	f803 2b01 	strb.w	r2, [r3], #1
 801159e:	68a2      	ldr	r2, [r4, #8]
 80115a0:	7892      	ldrb	r2, [r2, #2]
 80115a2:	f803 2b01 	strb.w	r2, [r3], #1
 80115a6:	68a2      	ldr	r2, [r4, #8]
 80115a8:	7852      	ldrb	r2, [r2, #1]
 80115aa:	f803 2b01 	strb.w	r2, [r3], #1
 80115ae:	68a2      	ldr	r2, [r4, #8]
 80115b0:	7812      	ldrb	r2, [r2, #0]
 80115b2:	701a      	strb	r2, [r3, #0]
 80115b4:	e796      	b.n	80114e4 <ucdr_deserialize_int64_t+0xa4>
 80115b6:	4639      	mov	r1, r7
 80115b8:	4632      	mov	r2, r6
 80115ba:	4628      	mov	r0, r5
 80115bc:	f00c fc1b 	bl	801ddf6 <memcpy>
 80115c0:	464a      	mov	r2, r9
 80115c2:	19a8      	adds	r0, r5, r6
 80115c4:	68a1      	ldr	r1, [r4, #8]
 80115c6:	f00c fc16 	bl	801ddf6 <memcpy>
 80115ca:	e78b      	b.n	80114e4 <ucdr_deserialize_int64_t+0xa4>

080115cc <ucdr_serialize_float>:
 80115cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80115d0:	4604      	mov	r4, r0
 80115d2:	b082      	sub	sp, #8
 80115d4:	2104      	movs	r1, #4
 80115d6:	ed8d 0a01 	vstr	s0, [sp, #4]
 80115da:	f000 faaf 	bl	8011b3c <ucdr_buffer_alignment>
 80115de:	4601      	mov	r1, r0
 80115e0:	4620      	mov	r0, r4
 80115e2:	7d67      	ldrb	r7, [r4, #21]
 80115e4:	f000 faf2 	bl	8011bcc <ucdr_advance_buffer>
 80115e8:	2104      	movs	r1, #4
 80115ea:	4620      	mov	r0, r4
 80115ec:	f000 fa46 	bl	8011a7c <ucdr_check_buffer_available_for>
 80115f0:	2800      	cmp	r0, #0
 80115f2:	d139      	bne.n	8011668 <ucdr_serialize_float+0x9c>
 80115f4:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80115f8:	42ab      	cmp	r3, r5
 80115fa:	d930      	bls.n	801165e <ucdr_serialize_float+0x92>
 80115fc:	1b5e      	subs	r6, r3, r5
 80115fe:	60a3      	str	r3, [r4, #8]
 8011600:	6923      	ldr	r3, [r4, #16]
 8011602:	4620      	mov	r0, r4
 8011604:	f1c6 0804 	rsb	r8, r6, #4
 8011608:	4433      	add	r3, r6
 801160a:	4641      	mov	r1, r8
 801160c:	6123      	str	r3, [r4, #16]
 801160e:	f000 fa41 	bl	8011a94 <ucdr_check_final_buffer_behavior>
 8011612:	2800      	cmp	r0, #0
 8011614:	d04c      	beq.n	80116b0 <ucdr_serialize_float+0xe4>
 8011616:	7d23      	ldrb	r3, [r4, #20]
 8011618:	2b01      	cmp	r3, #1
 801161a:	d063      	beq.n	80116e4 <ucdr_serialize_float+0x118>
 801161c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011620:	702b      	strb	r3, [r5, #0]
 8011622:	2e00      	cmp	r6, #0
 8011624:	d051      	beq.n	80116ca <ucdr_serialize_float+0xfe>
 8011626:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801162a:	2e01      	cmp	r6, #1
 801162c:	706b      	strb	r3, [r5, #1]
 801162e:	d050      	beq.n	80116d2 <ucdr_serialize_float+0x106>
 8011630:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8011634:	2e02      	cmp	r6, #2
 8011636:	70ab      	strb	r3, [r5, #2]
 8011638:	d04f      	beq.n	80116da <ucdr_serialize_float+0x10e>
 801163a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801163e:	70eb      	strb	r3, [r5, #3]
 8011640:	6923      	ldr	r3, [r4, #16]
 8011642:	2104      	movs	r1, #4
 8011644:	68a2      	ldr	r2, [r4, #8]
 8011646:	3304      	adds	r3, #4
 8011648:	7da0      	ldrb	r0, [r4, #22]
 801164a:	4442      	add	r2, r8
 801164c:	7561      	strb	r1, [r4, #21]
 801164e:	1b9e      	subs	r6, r3, r6
 8011650:	f080 0001 	eor.w	r0, r0, #1
 8011654:	60a2      	str	r2, [r4, #8]
 8011656:	6126      	str	r6, [r4, #16]
 8011658:	b002      	add	sp, #8
 801165a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801165e:	2104      	movs	r1, #4
 8011660:	4620      	mov	r0, r4
 8011662:	f000 fa17 	bl	8011a94 <ucdr_check_final_buffer_behavior>
 8011666:	b1d0      	cbz	r0, 801169e <ucdr_serialize_float+0xd2>
 8011668:	7d23      	ldrb	r3, [r4, #20]
 801166a:	2b01      	cmp	r3, #1
 801166c:	68a3      	ldr	r3, [r4, #8]
 801166e:	d01c      	beq.n	80116aa <ucdr_serialize_float+0xde>
 8011670:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8011674:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011678:	f89d 1005 	ldrb.w	r1, [sp, #5]
 801167c:	7018      	strb	r0, [r3, #0]
 801167e:	68a3      	ldr	r3, [r4, #8]
 8011680:	705a      	strb	r2, [r3, #1]
 8011682:	68a3      	ldr	r3, [r4, #8]
 8011684:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011688:	7099      	strb	r1, [r3, #2]
 801168a:	68a3      	ldr	r3, [r4, #8]
 801168c:	70da      	strb	r2, [r3, #3]
 801168e:	2104      	movs	r1, #4
 8011690:	68a2      	ldr	r2, [r4, #8]
 8011692:	6923      	ldr	r3, [r4, #16]
 8011694:	440a      	add	r2, r1
 8011696:	7561      	strb	r1, [r4, #21]
 8011698:	440b      	add	r3, r1
 801169a:	60a2      	str	r2, [r4, #8]
 801169c:	6123      	str	r3, [r4, #16]
 801169e:	7da0      	ldrb	r0, [r4, #22]
 80116a0:	f080 0001 	eor.w	r0, r0, #1
 80116a4:	b002      	add	sp, #8
 80116a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116aa:	9a01      	ldr	r2, [sp, #4]
 80116ac:	601a      	str	r2, [r3, #0]
 80116ae:	e7ee      	b.n	801168e <ucdr_serialize_float+0xc2>
 80116b0:	68a2      	ldr	r2, [r4, #8]
 80116b2:	6923      	ldr	r3, [r4, #16]
 80116b4:	7da0      	ldrb	r0, [r4, #22]
 80116b6:	1b92      	subs	r2, r2, r6
 80116b8:	1b9b      	subs	r3, r3, r6
 80116ba:	7567      	strb	r7, [r4, #21]
 80116bc:	f080 0001 	eor.w	r0, r0, #1
 80116c0:	60a2      	str	r2, [r4, #8]
 80116c2:	6123      	str	r3, [r4, #16]
 80116c4:	b002      	add	sp, #8
 80116c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116ca:	68a3      	ldr	r3, [r4, #8]
 80116cc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80116d0:	701a      	strb	r2, [r3, #0]
 80116d2:	68a3      	ldr	r3, [r4, #8]
 80116d4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80116d8:	701a      	strb	r2, [r3, #0]
 80116da:	68a3      	ldr	r3, [r4, #8]
 80116dc:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80116e0:	701a      	strb	r2, [r3, #0]
 80116e2:	e7ad      	b.n	8011640 <ucdr_serialize_float+0x74>
 80116e4:	4628      	mov	r0, r5
 80116e6:	ad01      	add	r5, sp, #4
 80116e8:	4632      	mov	r2, r6
 80116ea:	4629      	mov	r1, r5
 80116ec:	f00c fb83 	bl	801ddf6 <memcpy>
 80116f0:	4642      	mov	r2, r8
 80116f2:	19a9      	adds	r1, r5, r6
 80116f4:	68a0      	ldr	r0, [r4, #8]
 80116f6:	f00c fb7e 	bl	801ddf6 <memcpy>
 80116fa:	e7a1      	b.n	8011640 <ucdr_serialize_float+0x74>

080116fc <ucdr_serialize_endian_float>:
 80116fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011700:	4604      	mov	r4, r0
 8011702:	b083      	sub	sp, #12
 8011704:	460d      	mov	r5, r1
 8011706:	2104      	movs	r1, #4
 8011708:	ed8d 0a01 	vstr	s0, [sp, #4]
 801170c:	f000 fa16 	bl	8011b3c <ucdr_buffer_alignment>
 8011710:	4601      	mov	r1, r0
 8011712:	4620      	mov	r0, r4
 8011714:	f894 8015 	ldrb.w	r8, [r4, #21]
 8011718:	f000 fa58 	bl	8011bcc <ucdr_advance_buffer>
 801171c:	2104      	movs	r1, #4
 801171e:	4620      	mov	r0, r4
 8011720:	f000 f9ac 	bl	8011a7c <ucdr_check_buffer_available_for>
 8011724:	2800      	cmp	r0, #0
 8011726:	d138      	bne.n	801179a <ucdr_serialize_endian_float+0x9e>
 8011728:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 801172c:	42b7      	cmp	r7, r6
 801172e:	d92f      	bls.n	8011790 <ucdr_serialize_endian_float+0x94>
 8011730:	6923      	ldr	r3, [r4, #16]
 8011732:	4620      	mov	r0, r4
 8011734:	60a7      	str	r7, [r4, #8]
 8011736:	1bbf      	subs	r7, r7, r6
 8011738:	443b      	add	r3, r7
 801173a:	f1c7 0904 	rsb	r9, r7, #4
 801173e:	6123      	str	r3, [r4, #16]
 8011740:	4649      	mov	r1, r9
 8011742:	f000 f9a7 	bl	8011a94 <ucdr_check_final_buffer_behavior>
 8011746:	2800      	cmp	r0, #0
 8011748:	d04a      	beq.n	80117e0 <ucdr_serialize_endian_float+0xe4>
 801174a:	2d01      	cmp	r5, #1
 801174c:	d063      	beq.n	8011816 <ucdr_serialize_endian_float+0x11a>
 801174e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011752:	7033      	strb	r3, [r6, #0]
 8011754:	2f00      	cmp	r7, #0
 8011756:	d051      	beq.n	80117fc <ucdr_serialize_endian_float+0x100>
 8011758:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801175c:	2f01      	cmp	r7, #1
 801175e:	7073      	strb	r3, [r6, #1]
 8011760:	d050      	beq.n	8011804 <ucdr_serialize_endian_float+0x108>
 8011762:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8011766:	2f02      	cmp	r7, #2
 8011768:	70b3      	strb	r3, [r6, #2]
 801176a:	d04f      	beq.n	801180c <ucdr_serialize_endian_float+0x110>
 801176c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011770:	70f3      	strb	r3, [r6, #3]
 8011772:	6923      	ldr	r3, [r4, #16]
 8011774:	2104      	movs	r1, #4
 8011776:	68a2      	ldr	r2, [r4, #8]
 8011778:	7da0      	ldrb	r0, [r4, #22]
 801177a:	3304      	adds	r3, #4
 801177c:	444a      	add	r2, r9
 801177e:	7561      	strb	r1, [r4, #21]
 8011780:	1bdb      	subs	r3, r3, r7
 8011782:	f080 0001 	eor.w	r0, r0, #1
 8011786:	60a2      	str	r2, [r4, #8]
 8011788:	6123      	str	r3, [r4, #16]
 801178a:	b003      	add	sp, #12
 801178c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011790:	2104      	movs	r1, #4
 8011792:	4620      	mov	r0, r4
 8011794:	f000 f97e 	bl	8011a94 <ucdr_check_final_buffer_behavior>
 8011798:	b1c8      	cbz	r0, 80117ce <ucdr_serialize_endian_float+0xd2>
 801179a:	2d01      	cmp	r5, #1
 801179c:	68a3      	ldr	r3, [r4, #8]
 801179e:	d01c      	beq.n	80117da <ucdr_serialize_endian_float+0xde>
 80117a0:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80117a4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80117a8:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80117ac:	7018      	strb	r0, [r3, #0]
 80117ae:	68a3      	ldr	r3, [r4, #8]
 80117b0:	705a      	strb	r2, [r3, #1]
 80117b2:	68a3      	ldr	r3, [r4, #8]
 80117b4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80117b8:	7099      	strb	r1, [r3, #2]
 80117ba:	68a3      	ldr	r3, [r4, #8]
 80117bc:	70da      	strb	r2, [r3, #3]
 80117be:	2104      	movs	r1, #4
 80117c0:	68a2      	ldr	r2, [r4, #8]
 80117c2:	6923      	ldr	r3, [r4, #16]
 80117c4:	440a      	add	r2, r1
 80117c6:	7561      	strb	r1, [r4, #21]
 80117c8:	440b      	add	r3, r1
 80117ca:	60a2      	str	r2, [r4, #8]
 80117cc:	6123      	str	r3, [r4, #16]
 80117ce:	7da0      	ldrb	r0, [r4, #22]
 80117d0:	f080 0001 	eor.w	r0, r0, #1
 80117d4:	b003      	add	sp, #12
 80117d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80117da:	9a01      	ldr	r2, [sp, #4]
 80117dc:	601a      	str	r2, [r3, #0]
 80117de:	e7ee      	b.n	80117be <ucdr_serialize_endian_float+0xc2>
 80117e0:	68a2      	ldr	r2, [r4, #8]
 80117e2:	6923      	ldr	r3, [r4, #16]
 80117e4:	7da0      	ldrb	r0, [r4, #22]
 80117e6:	1bd2      	subs	r2, r2, r7
 80117e8:	1bdb      	subs	r3, r3, r7
 80117ea:	f884 8015 	strb.w	r8, [r4, #21]
 80117ee:	f080 0001 	eor.w	r0, r0, #1
 80117f2:	60a2      	str	r2, [r4, #8]
 80117f4:	6123      	str	r3, [r4, #16]
 80117f6:	b003      	add	sp, #12
 80117f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80117fc:	68a3      	ldr	r3, [r4, #8]
 80117fe:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011802:	701a      	strb	r2, [r3, #0]
 8011804:	68a3      	ldr	r3, [r4, #8]
 8011806:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801180a:	701a      	strb	r2, [r3, #0]
 801180c:	68a3      	ldr	r3, [r4, #8]
 801180e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011812:	701a      	strb	r2, [r3, #0]
 8011814:	e7ad      	b.n	8011772 <ucdr_serialize_endian_float+0x76>
 8011816:	ad01      	add	r5, sp, #4
 8011818:	463a      	mov	r2, r7
 801181a:	4630      	mov	r0, r6
 801181c:	4629      	mov	r1, r5
 801181e:	f00c faea 	bl	801ddf6 <memcpy>
 8011822:	464a      	mov	r2, r9
 8011824:	19e9      	adds	r1, r5, r7
 8011826:	68a0      	ldr	r0, [r4, #8]
 8011828:	f00c fae5 	bl	801ddf6 <memcpy>
 801182c:	e7a1      	b.n	8011772 <ucdr_serialize_endian_float+0x76>
 801182e:	bf00      	nop

08011830 <ucdr_deserialize_float>:
 8011830:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011834:	4604      	mov	r4, r0
 8011836:	460d      	mov	r5, r1
 8011838:	2104      	movs	r1, #4
 801183a:	f000 f97f 	bl	8011b3c <ucdr_buffer_alignment>
 801183e:	4601      	mov	r1, r0
 8011840:	4620      	mov	r0, r4
 8011842:	f894 8015 	ldrb.w	r8, [r4, #21]
 8011846:	f000 f9c1 	bl	8011bcc <ucdr_advance_buffer>
 801184a:	2104      	movs	r1, #4
 801184c:	4620      	mov	r0, r4
 801184e:	f000 f915 	bl	8011a7c <ucdr_check_buffer_available_for>
 8011852:	2800      	cmp	r0, #0
 8011854:	d138      	bne.n	80118c8 <ucdr_deserialize_float+0x98>
 8011856:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 801185a:	42b7      	cmp	r7, r6
 801185c:	d92f      	bls.n	80118be <ucdr_deserialize_float+0x8e>
 801185e:	6923      	ldr	r3, [r4, #16]
 8011860:	4620      	mov	r0, r4
 8011862:	60a7      	str	r7, [r4, #8]
 8011864:	1bbf      	subs	r7, r7, r6
 8011866:	443b      	add	r3, r7
 8011868:	f1c7 0904 	rsb	r9, r7, #4
 801186c:	6123      	str	r3, [r4, #16]
 801186e:	4649      	mov	r1, r9
 8011870:	f000 f910 	bl	8011a94 <ucdr_check_final_buffer_behavior>
 8011874:	2800      	cmp	r0, #0
 8011876:	d046      	beq.n	8011906 <ucdr_deserialize_float+0xd6>
 8011878:	7d23      	ldrb	r3, [r4, #20]
 801187a:	2b01      	cmp	r3, #1
 801187c:	d05c      	beq.n	8011938 <ucdr_deserialize_float+0x108>
 801187e:	78f3      	ldrb	r3, [r6, #3]
 8011880:	702b      	strb	r3, [r5, #0]
 8011882:	2f00      	cmp	r7, #0
 8011884:	d04c      	beq.n	8011920 <ucdr_deserialize_float+0xf0>
 8011886:	78b3      	ldrb	r3, [r6, #2]
 8011888:	2f01      	cmp	r7, #1
 801188a:	706b      	strb	r3, [r5, #1]
 801188c:	f105 0302 	add.w	r3, r5, #2
 8011890:	d04a      	beq.n	8011928 <ucdr_deserialize_float+0xf8>
 8011892:	7873      	ldrb	r3, [r6, #1]
 8011894:	2f02      	cmp	r7, #2
 8011896:	70ab      	strb	r3, [r5, #2]
 8011898:	f105 0303 	add.w	r3, r5, #3
 801189c:	d048      	beq.n	8011930 <ucdr_deserialize_float+0x100>
 801189e:	7833      	ldrb	r3, [r6, #0]
 80118a0:	70eb      	strb	r3, [r5, #3]
 80118a2:	6923      	ldr	r3, [r4, #16]
 80118a4:	2104      	movs	r1, #4
 80118a6:	68a2      	ldr	r2, [r4, #8]
 80118a8:	3304      	adds	r3, #4
 80118aa:	7da0      	ldrb	r0, [r4, #22]
 80118ac:	444a      	add	r2, r9
 80118ae:	7561      	strb	r1, [r4, #21]
 80118b0:	1bdb      	subs	r3, r3, r7
 80118b2:	f080 0001 	eor.w	r0, r0, #1
 80118b6:	60a2      	str	r2, [r4, #8]
 80118b8:	6123      	str	r3, [r4, #16]
 80118ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80118be:	2104      	movs	r1, #4
 80118c0:	4620      	mov	r0, r4
 80118c2:	f000 f8e7 	bl	8011a94 <ucdr_check_final_buffer_behavior>
 80118c6:	b1b0      	cbz	r0, 80118f6 <ucdr_deserialize_float+0xc6>
 80118c8:	7d23      	ldrb	r3, [r4, #20]
 80118ca:	2b01      	cmp	r3, #1
 80118cc:	68a3      	ldr	r3, [r4, #8]
 80118ce:	d017      	beq.n	8011900 <ucdr_deserialize_float+0xd0>
 80118d0:	78db      	ldrb	r3, [r3, #3]
 80118d2:	702b      	strb	r3, [r5, #0]
 80118d4:	68a3      	ldr	r3, [r4, #8]
 80118d6:	789b      	ldrb	r3, [r3, #2]
 80118d8:	706b      	strb	r3, [r5, #1]
 80118da:	68a3      	ldr	r3, [r4, #8]
 80118dc:	785b      	ldrb	r3, [r3, #1]
 80118de:	70ab      	strb	r3, [r5, #2]
 80118e0:	68a3      	ldr	r3, [r4, #8]
 80118e2:	781b      	ldrb	r3, [r3, #0]
 80118e4:	70eb      	strb	r3, [r5, #3]
 80118e6:	2104      	movs	r1, #4
 80118e8:	68a2      	ldr	r2, [r4, #8]
 80118ea:	6923      	ldr	r3, [r4, #16]
 80118ec:	440a      	add	r2, r1
 80118ee:	7561      	strb	r1, [r4, #21]
 80118f0:	440b      	add	r3, r1
 80118f2:	60a2      	str	r2, [r4, #8]
 80118f4:	6123      	str	r3, [r4, #16]
 80118f6:	7da0      	ldrb	r0, [r4, #22]
 80118f8:	f080 0001 	eor.w	r0, r0, #1
 80118fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011900:	681b      	ldr	r3, [r3, #0]
 8011902:	602b      	str	r3, [r5, #0]
 8011904:	e7ef      	b.n	80118e6 <ucdr_deserialize_float+0xb6>
 8011906:	68a2      	ldr	r2, [r4, #8]
 8011908:	6923      	ldr	r3, [r4, #16]
 801190a:	1bd2      	subs	r2, r2, r7
 801190c:	7da0      	ldrb	r0, [r4, #22]
 801190e:	1bdb      	subs	r3, r3, r7
 8011910:	f884 8015 	strb.w	r8, [r4, #21]
 8011914:	f080 0001 	eor.w	r0, r0, #1
 8011918:	60a2      	str	r2, [r4, #8]
 801191a:	6123      	str	r3, [r4, #16]
 801191c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011920:	68a3      	ldr	r3, [r4, #8]
 8011922:	789b      	ldrb	r3, [r3, #2]
 8011924:	706b      	strb	r3, [r5, #1]
 8011926:	1cab      	adds	r3, r5, #2
 8011928:	68a2      	ldr	r2, [r4, #8]
 801192a:	7852      	ldrb	r2, [r2, #1]
 801192c:	f803 2b01 	strb.w	r2, [r3], #1
 8011930:	68a2      	ldr	r2, [r4, #8]
 8011932:	7812      	ldrb	r2, [r2, #0]
 8011934:	701a      	strb	r2, [r3, #0]
 8011936:	e7b4      	b.n	80118a2 <ucdr_deserialize_float+0x72>
 8011938:	4631      	mov	r1, r6
 801193a:	463a      	mov	r2, r7
 801193c:	4628      	mov	r0, r5
 801193e:	f00c fa5a 	bl	801ddf6 <memcpy>
 8011942:	464a      	mov	r2, r9
 8011944:	19e8      	adds	r0, r5, r7
 8011946:	68a1      	ldr	r1, [r4, #8]
 8011948:	f00c fa55 	bl	801ddf6 <memcpy>
 801194c:	e7a9      	b.n	80118a2 <ucdr_deserialize_float+0x72>
 801194e:	bf00      	nop

08011950 <ucdr_deserialize_endian_float>:
 8011950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011954:	4604      	mov	r4, r0
 8011956:	460e      	mov	r6, r1
 8011958:	2104      	movs	r1, #4
 801195a:	4615      	mov	r5, r2
 801195c:	f000 f8ee 	bl	8011b3c <ucdr_buffer_alignment>
 8011960:	4601      	mov	r1, r0
 8011962:	4620      	mov	r0, r4
 8011964:	f894 8015 	ldrb.w	r8, [r4, #21]
 8011968:	f000 f930 	bl	8011bcc <ucdr_advance_buffer>
 801196c:	2104      	movs	r1, #4
 801196e:	4620      	mov	r0, r4
 8011970:	f000 f884 	bl	8011a7c <ucdr_check_buffer_available_for>
 8011974:	2800      	cmp	r0, #0
 8011976:	d13c      	bne.n	80119f2 <ucdr_deserialize_endian_float+0xa2>
 8011978:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 801197c:	42bb      	cmp	r3, r7
 801197e:	d933      	bls.n	80119e8 <ucdr_deserialize_endian_float+0x98>
 8011980:	eba3 0907 	sub.w	r9, r3, r7
 8011984:	60a3      	str	r3, [r4, #8]
 8011986:	6923      	ldr	r3, [r4, #16]
 8011988:	4620      	mov	r0, r4
 801198a:	f1c9 0a04 	rsb	sl, r9, #4
 801198e:	444b      	add	r3, r9
 8011990:	4651      	mov	r1, sl
 8011992:	6123      	str	r3, [r4, #16]
 8011994:	f000 f87e 	bl	8011a94 <ucdr_check_final_buffer_behavior>
 8011998:	2800      	cmp	r0, #0
 801199a:	d048      	beq.n	8011a2e <ucdr_deserialize_endian_float+0xde>
 801199c:	2e01      	cmp	r6, #1
 801199e:	d061      	beq.n	8011a64 <ucdr_deserialize_endian_float+0x114>
 80119a0:	78fb      	ldrb	r3, [r7, #3]
 80119a2:	702b      	strb	r3, [r5, #0]
 80119a4:	f1b9 0f00 	cmp.w	r9, #0
 80119a8:	d050      	beq.n	8011a4c <ucdr_deserialize_endian_float+0xfc>
 80119aa:	78bb      	ldrb	r3, [r7, #2]
 80119ac:	f1b9 0f01 	cmp.w	r9, #1
 80119b0:	706b      	strb	r3, [r5, #1]
 80119b2:	f105 0302 	add.w	r3, r5, #2
 80119b6:	d04d      	beq.n	8011a54 <ucdr_deserialize_endian_float+0x104>
 80119b8:	787b      	ldrb	r3, [r7, #1]
 80119ba:	f1b9 0f02 	cmp.w	r9, #2
 80119be:	70ab      	strb	r3, [r5, #2]
 80119c0:	f105 0303 	add.w	r3, r5, #3
 80119c4:	d04a      	beq.n	8011a5c <ucdr_deserialize_endian_float+0x10c>
 80119c6:	783b      	ldrb	r3, [r7, #0]
 80119c8:	70eb      	strb	r3, [r5, #3]
 80119ca:	6923      	ldr	r3, [r4, #16]
 80119cc:	2104      	movs	r1, #4
 80119ce:	68a2      	ldr	r2, [r4, #8]
 80119d0:	3304      	adds	r3, #4
 80119d2:	7da0      	ldrb	r0, [r4, #22]
 80119d4:	4452      	add	r2, sl
 80119d6:	7561      	strb	r1, [r4, #21]
 80119d8:	eba3 0309 	sub.w	r3, r3, r9
 80119dc:	f080 0001 	eor.w	r0, r0, #1
 80119e0:	60a2      	str	r2, [r4, #8]
 80119e2:	6123      	str	r3, [r4, #16]
 80119e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80119e8:	2104      	movs	r1, #4
 80119ea:	4620      	mov	r0, r4
 80119ec:	f000 f852 	bl	8011a94 <ucdr_check_final_buffer_behavior>
 80119f0:	b1a8      	cbz	r0, 8011a1e <ucdr_deserialize_endian_float+0xce>
 80119f2:	2e01      	cmp	r6, #1
 80119f4:	68a3      	ldr	r3, [r4, #8]
 80119f6:	d017      	beq.n	8011a28 <ucdr_deserialize_endian_float+0xd8>
 80119f8:	78db      	ldrb	r3, [r3, #3]
 80119fa:	702b      	strb	r3, [r5, #0]
 80119fc:	68a3      	ldr	r3, [r4, #8]
 80119fe:	789b      	ldrb	r3, [r3, #2]
 8011a00:	706b      	strb	r3, [r5, #1]
 8011a02:	68a3      	ldr	r3, [r4, #8]
 8011a04:	785b      	ldrb	r3, [r3, #1]
 8011a06:	70ab      	strb	r3, [r5, #2]
 8011a08:	68a3      	ldr	r3, [r4, #8]
 8011a0a:	781b      	ldrb	r3, [r3, #0]
 8011a0c:	70eb      	strb	r3, [r5, #3]
 8011a0e:	2104      	movs	r1, #4
 8011a10:	68a2      	ldr	r2, [r4, #8]
 8011a12:	6923      	ldr	r3, [r4, #16]
 8011a14:	440a      	add	r2, r1
 8011a16:	7561      	strb	r1, [r4, #21]
 8011a18:	440b      	add	r3, r1
 8011a1a:	60a2      	str	r2, [r4, #8]
 8011a1c:	6123      	str	r3, [r4, #16]
 8011a1e:	7da0      	ldrb	r0, [r4, #22]
 8011a20:	f080 0001 	eor.w	r0, r0, #1
 8011a24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a28:	681b      	ldr	r3, [r3, #0]
 8011a2a:	602b      	str	r3, [r5, #0]
 8011a2c:	e7ef      	b.n	8011a0e <ucdr_deserialize_endian_float+0xbe>
 8011a2e:	68a2      	ldr	r2, [r4, #8]
 8011a30:	6923      	ldr	r3, [r4, #16]
 8011a32:	eba2 0209 	sub.w	r2, r2, r9
 8011a36:	7da0      	ldrb	r0, [r4, #22]
 8011a38:	eba3 0309 	sub.w	r3, r3, r9
 8011a3c:	f884 8015 	strb.w	r8, [r4, #21]
 8011a40:	f080 0001 	eor.w	r0, r0, #1
 8011a44:	60a2      	str	r2, [r4, #8]
 8011a46:	6123      	str	r3, [r4, #16]
 8011a48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a4c:	68a3      	ldr	r3, [r4, #8]
 8011a4e:	789b      	ldrb	r3, [r3, #2]
 8011a50:	706b      	strb	r3, [r5, #1]
 8011a52:	1cab      	adds	r3, r5, #2
 8011a54:	68a2      	ldr	r2, [r4, #8]
 8011a56:	7852      	ldrb	r2, [r2, #1]
 8011a58:	f803 2b01 	strb.w	r2, [r3], #1
 8011a5c:	68a2      	ldr	r2, [r4, #8]
 8011a5e:	7812      	ldrb	r2, [r2, #0]
 8011a60:	701a      	strb	r2, [r3, #0]
 8011a62:	e7b2      	b.n	80119ca <ucdr_deserialize_endian_float+0x7a>
 8011a64:	4639      	mov	r1, r7
 8011a66:	464a      	mov	r2, r9
 8011a68:	4628      	mov	r0, r5
 8011a6a:	f00c f9c4 	bl	801ddf6 <memcpy>
 8011a6e:	4652      	mov	r2, sl
 8011a70:	eb05 0009 	add.w	r0, r5, r9
 8011a74:	68a1      	ldr	r1, [r4, #8]
 8011a76:	f00c f9be 	bl	801ddf6 <memcpy>
 8011a7a:	e7a6      	b.n	80119ca <ucdr_deserialize_endian_float+0x7a>

08011a7c <ucdr_check_buffer_available_for>:
 8011a7c:	7d83      	ldrb	r3, [r0, #22]
 8011a7e:	b93b      	cbnz	r3, 8011a90 <ucdr_check_buffer_available_for+0x14>
 8011a80:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 8011a84:	4419      	add	r1, r3
 8011a86:	4288      	cmp	r0, r1
 8011a88:	bf34      	ite	cc
 8011a8a:	2000      	movcc	r0, #0
 8011a8c:	2001      	movcs	r0, #1
 8011a8e:	4770      	bx	lr
 8011a90:	2000      	movs	r0, #0
 8011a92:	4770      	bx	lr

08011a94 <ucdr_check_final_buffer_behavior>:
 8011a94:	7d83      	ldrb	r3, [r0, #22]
 8011a96:	b943      	cbnz	r3, 8011aaa <ucdr_check_final_buffer_behavior+0x16>
 8011a98:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 8011a9c:	b510      	push	{r4, lr}
 8011a9e:	4291      	cmp	r1, r2
 8011aa0:	4604      	mov	r4, r0
 8011aa2:	d205      	bcs.n	8011ab0 <ucdr_check_final_buffer_behavior+0x1c>
 8011aa4:	2301      	movs	r3, #1
 8011aa6:	4618      	mov	r0, r3
 8011aa8:	bd10      	pop	{r4, pc}
 8011aaa:	2300      	movs	r3, #0
 8011aac:	4618      	mov	r0, r3
 8011aae:	4770      	bx	lr
 8011ab0:	6982      	ldr	r2, [r0, #24]
 8011ab2:	b13a      	cbz	r2, 8011ac4 <ucdr_check_final_buffer_behavior+0x30>
 8011ab4:	69c1      	ldr	r1, [r0, #28]
 8011ab6:	4790      	blx	r2
 8011ab8:	f080 0301 	eor.w	r3, r0, #1
 8011abc:	75a0      	strb	r0, [r4, #22]
 8011abe:	b2db      	uxtb	r3, r3
 8011ac0:	4618      	mov	r0, r3
 8011ac2:	bd10      	pop	{r4, pc}
 8011ac4:	2001      	movs	r0, #1
 8011ac6:	75a0      	strb	r0, [r4, #22]
 8011ac8:	e7fa      	b.n	8011ac0 <ucdr_check_final_buffer_behavior+0x2c>
 8011aca:	bf00      	nop

08011acc <ucdr_set_on_full_buffer_callback>:
 8011acc:	e9c0 1206 	strd	r1, r2, [r0, #24]
 8011ad0:	4770      	bx	lr
 8011ad2:	bf00      	nop

08011ad4 <ucdr_init_buffer_origin_offset_endian>:
 8011ad4:	b410      	push	{r4}
 8011ad6:	9c01      	ldr	r4, [sp, #4]
 8011ad8:	440a      	add	r2, r1
 8011ada:	6001      	str	r1, [r0, #0]
 8011adc:	6042      	str	r2, [r0, #4]
 8011ade:	190a      	adds	r2, r1, r4
 8011ae0:	441c      	add	r4, r3
 8011ae2:	6082      	str	r2, [r0, #8]
 8011ae4:	2200      	movs	r2, #0
 8011ae6:	e9c0 3403 	strd	r3, r4, [r0, #12]
 8011aea:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8011aee:	7542      	strb	r2, [r0, #21]
 8011af0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011af4:	7582      	strb	r2, [r0, #22]
 8011af6:	7503      	strb	r3, [r0, #20]
 8011af8:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8011afc:	4770      	bx	lr
 8011afe:	bf00      	nop

08011b00 <ucdr_init_buffer_origin_offset>:
 8011b00:	b510      	push	{r4, lr}
 8011b02:	b082      	sub	sp, #8
 8011b04:	9c04      	ldr	r4, [sp, #16]
 8011b06:	9400      	str	r4, [sp, #0]
 8011b08:	2401      	movs	r4, #1
 8011b0a:	9401      	str	r4, [sp, #4]
 8011b0c:	f7ff ffe2 	bl	8011ad4 <ucdr_init_buffer_origin_offset_endian>
 8011b10:	b002      	add	sp, #8
 8011b12:	bd10      	pop	{r4, pc}

08011b14 <ucdr_init_buffer_origin>:
 8011b14:	b510      	push	{r4, lr}
 8011b16:	2400      	movs	r4, #0
 8011b18:	b082      	sub	sp, #8
 8011b1a:	9400      	str	r4, [sp, #0]
 8011b1c:	f7ff fff0 	bl	8011b00 <ucdr_init_buffer_origin_offset>
 8011b20:	b002      	add	sp, #8
 8011b22:	bd10      	pop	{r4, pc}

08011b24 <ucdr_init_buffer>:
 8011b24:	2300      	movs	r3, #0
 8011b26:	f7ff bff5 	b.w	8011b14 <ucdr_init_buffer_origin>
 8011b2a:	bf00      	nop

08011b2c <ucdr_alignment>:
 8011b2c:	fbb0 f2f1 	udiv	r2, r0, r1
 8011b30:	fb02 0011 	mls	r0, r2, r1, r0
 8011b34:	1e4b      	subs	r3, r1, #1
 8011b36:	1a08      	subs	r0, r1, r0
 8011b38:	4018      	ands	r0, r3
 8011b3a:	4770      	bx	lr

08011b3c <ucdr_buffer_alignment>:
 8011b3c:	7d43      	ldrb	r3, [r0, #21]
 8011b3e:	428b      	cmp	r3, r1
 8011b40:	d209      	bcs.n	8011b56 <ucdr_buffer_alignment+0x1a>
 8011b42:	6903      	ldr	r3, [r0, #16]
 8011b44:	1e4a      	subs	r2, r1, #1
 8011b46:	fbb3 f0f1 	udiv	r0, r3, r1
 8011b4a:	fb01 3010 	mls	r0, r1, r0, r3
 8011b4e:	1a09      	subs	r1, r1, r0
 8011b50:	ea01 0002 	and.w	r0, r1, r2
 8011b54:	4770      	bx	lr
 8011b56:	2000      	movs	r0, #0
 8011b58:	4770      	bx	lr
 8011b5a:	bf00      	nop

08011b5c <ucdr_align_to>:
 8011b5c:	b538      	push	{r3, r4, r5, lr}
 8011b5e:	4604      	mov	r4, r0
 8011b60:	460d      	mov	r5, r1
 8011b62:	f7ff ffeb 	bl	8011b3c <ucdr_buffer_alignment>
 8011b66:	68a3      	ldr	r3, [r4, #8]
 8011b68:	7565      	strb	r5, [r4, #21]
 8011b6a:	181a      	adds	r2, r3, r0
 8011b6c:	6923      	ldr	r3, [r4, #16]
 8011b6e:	4418      	add	r0, r3
 8011b70:	6863      	ldr	r3, [r4, #4]
 8011b72:	4293      	cmp	r3, r2
 8011b74:	6120      	str	r0, [r4, #16]
 8011b76:	bf28      	it	cs
 8011b78:	4613      	movcs	r3, r2
 8011b7a:	60a3      	str	r3, [r4, #8]
 8011b7c:	bd38      	pop	{r3, r4, r5, pc}
 8011b7e:	bf00      	nop

08011b80 <ucdr_buffer_length>:
 8011b80:	6882      	ldr	r2, [r0, #8]
 8011b82:	6800      	ldr	r0, [r0, #0]
 8011b84:	1a10      	subs	r0, r2, r0
 8011b86:	4770      	bx	lr

08011b88 <ucdr_buffer_remaining>:
 8011b88:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 8011b8c:	1a10      	subs	r0, r2, r0
 8011b8e:	4770      	bx	lr

08011b90 <ucdr_check_final_buffer_behavior_array>:
 8011b90:	b538      	push	{r3, r4, r5, lr}
 8011b92:	7d83      	ldrb	r3, [r0, #22]
 8011b94:	b9a3      	cbnz	r3, 8011bc0 <ucdr_check_final_buffer_behavior_array+0x30>
 8011b96:	4604      	mov	r4, r0
 8011b98:	460d      	mov	r5, r1
 8011b9a:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8011b9e:	429a      	cmp	r2, r3
 8011ba0:	d300      	bcc.n	8011ba4 <ucdr_check_final_buffer_behavior_array+0x14>
 8011ba2:	b931      	cbnz	r1, 8011bb2 <ucdr_check_final_buffer_behavior_array+0x22>
 8011ba4:	4620      	mov	r0, r4
 8011ba6:	f7ff ffef 	bl	8011b88 <ucdr_buffer_remaining>
 8011baa:	42a8      	cmp	r0, r5
 8011bac:	bf28      	it	cs
 8011bae:	4628      	movcs	r0, r5
 8011bb0:	bd38      	pop	{r3, r4, r5, pc}
 8011bb2:	6983      	ldr	r3, [r0, #24]
 8011bb4:	b133      	cbz	r3, 8011bc4 <ucdr_check_final_buffer_behavior_array+0x34>
 8011bb6:	69c1      	ldr	r1, [r0, #28]
 8011bb8:	4798      	blx	r3
 8011bba:	75a0      	strb	r0, [r4, #22]
 8011bbc:	2800      	cmp	r0, #0
 8011bbe:	d0f1      	beq.n	8011ba4 <ucdr_check_final_buffer_behavior_array+0x14>
 8011bc0:	2000      	movs	r0, #0
 8011bc2:	bd38      	pop	{r3, r4, r5, pc}
 8011bc4:	2301      	movs	r3, #1
 8011bc6:	7583      	strb	r3, [r0, #22]
 8011bc8:	e7fa      	b.n	8011bc0 <ucdr_check_final_buffer_behavior_array+0x30>
 8011bca:	bf00      	nop

08011bcc <ucdr_advance_buffer>:
 8011bcc:	b538      	push	{r3, r4, r5, lr}
 8011bce:	4604      	mov	r4, r0
 8011bd0:	460d      	mov	r5, r1
 8011bd2:	f7ff ff53 	bl	8011a7c <ucdr_check_buffer_available_for>
 8011bd6:	b178      	cbz	r0, 8011bf8 <ucdr_advance_buffer+0x2c>
 8011bd8:	6923      	ldr	r3, [r4, #16]
 8011bda:	68a2      	ldr	r2, [r4, #8]
 8011bdc:	442b      	add	r3, r5
 8011bde:	442a      	add	r2, r5
 8011be0:	6123      	str	r3, [r4, #16]
 8011be2:	2301      	movs	r3, #1
 8011be4:	60a2      	str	r2, [r4, #8]
 8011be6:	7563      	strb	r3, [r4, #21]
 8011be8:	bd38      	pop	{r3, r4, r5, pc}
 8011bea:	68a2      	ldr	r2, [r4, #8]
 8011bec:	1a2d      	subs	r5, r5, r0
 8011bee:	6923      	ldr	r3, [r4, #16]
 8011bf0:	4402      	add	r2, r0
 8011bf2:	4418      	add	r0, r3
 8011bf4:	60a2      	str	r2, [r4, #8]
 8011bf6:	6120      	str	r0, [r4, #16]
 8011bf8:	4629      	mov	r1, r5
 8011bfa:	2201      	movs	r2, #1
 8011bfc:	4620      	mov	r0, r4
 8011bfe:	f7ff ffc7 	bl	8011b90 <ucdr_check_final_buffer_behavior_array>
 8011c02:	2800      	cmp	r0, #0
 8011c04:	d1f1      	bne.n	8011bea <ucdr_advance_buffer+0x1e>
 8011c06:	2301      	movs	r3, #1
 8011c08:	7563      	strb	r3, [r4, #21]
 8011c0a:	bd38      	pop	{r3, r4, r5, pc}

08011c0c <uxr_buffer_delete_entity>:
 8011c0c:	b510      	push	{r4, lr}
 8011c0e:	2300      	movs	r3, #0
 8011c10:	b08e      	sub	sp, #56	; 0x38
 8011c12:	4604      	mov	r4, r0
 8011c14:	9103      	str	r1, [sp, #12]
 8011c16:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8011c1a:	2303      	movs	r3, #3
 8011c1c:	2204      	movs	r2, #4
 8011c1e:	9300      	str	r3, [sp, #0]
 8011c20:	ab06      	add	r3, sp, #24
 8011c22:	f001 f989 	bl	8012f38 <uxr_prepare_stream_to_write_submessage>
 8011c26:	b918      	cbnz	r0, 8011c30 <uxr_buffer_delete_entity+0x24>
 8011c28:	4604      	mov	r4, r0
 8011c2a:	4620      	mov	r0, r4
 8011c2c:	b00e      	add	sp, #56	; 0x38
 8011c2e:	bd10      	pop	{r4, pc}
 8011c30:	9902      	ldr	r1, [sp, #8]
 8011c32:	aa05      	add	r2, sp, #20
 8011c34:	4620      	mov	r0, r4
 8011c36:	f001 fabb 	bl	80131b0 <uxr_init_base_object_request>
 8011c3a:	4604      	mov	r4, r0
 8011c3c:	a905      	add	r1, sp, #20
 8011c3e:	a806      	add	r0, sp, #24
 8011c40:	f002 fd44 	bl	80146cc <uxr_serialize_DELETE_Payload>
 8011c44:	4620      	mov	r0, r4
 8011c46:	b00e      	add	sp, #56	; 0x38
 8011c48:	bd10      	pop	{r4, pc}
 8011c4a:	bf00      	nop

08011c4c <uxr_common_create_entity>:
 8011c4c:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8011c50:	b510      	push	{r4, lr}
 8011c52:	f1bc 0f01 	cmp.w	ip, #1
 8011c56:	b08c      	sub	sp, #48	; 0x30
 8011c58:	4604      	mov	r4, r0
 8011c5a:	9202      	str	r2, [sp, #8]
 8011c5c:	bf0c      	ite	eq
 8011c5e:	f003 0201 	andeq.w	r2, r3, #1
 8011c62:	2200      	movne	r2, #0
 8011c64:	330e      	adds	r3, #14
 8011c66:	9103      	str	r1, [sp, #12]
 8011c68:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 8011c6c:	441a      	add	r2, r3
 8011c6e:	ab04      	add	r3, sp, #16
 8011c70:	9101      	str	r1, [sp, #4]
 8011c72:	2101      	movs	r1, #1
 8011c74:	b292      	uxth	r2, r2
 8011c76:	9100      	str	r1, [sp, #0]
 8011c78:	9903      	ldr	r1, [sp, #12]
 8011c7a:	f001 f95d 	bl	8012f38 <uxr_prepare_stream_to_write_submessage>
 8011c7e:	b918      	cbnz	r0, 8011c88 <uxr_common_create_entity+0x3c>
 8011c80:	4604      	mov	r4, r0
 8011c82:	4620      	mov	r0, r4
 8011c84:	b00c      	add	sp, #48	; 0x30
 8011c86:	bd10      	pop	{r4, pc}
 8011c88:	9902      	ldr	r1, [sp, #8]
 8011c8a:	4620      	mov	r0, r4
 8011c8c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011c8e:	f001 fa8f 	bl	80131b0 <uxr_init_base_object_request>
 8011c92:	4604      	mov	r4, r0
 8011c94:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8011c96:	a804      	add	r0, sp, #16
 8011c98:	f002 fc72 	bl	8014580 <uxr_serialize_CREATE_Payload>
 8011c9c:	4620      	mov	r0, r4
 8011c9e:	b00c      	add	sp, #48	; 0x30
 8011ca0:	bd10      	pop	{r4, pc}
 8011ca2:	bf00      	nop

08011ca4 <uxr_buffer_create_participant_bin>:
 8011ca4:	b570      	push	{r4, r5, r6, lr}
 8011ca6:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 8011caa:	4605      	mov	r5, r0
 8011cac:	ac11      	add	r4, sp, #68	; 0x44
 8011cae:	f8ad 3254 	strh.w	r3, [sp, #596]	; 0x254
 8011cb2:	2303      	movs	r3, #3
 8011cb4:	f89d 626c 	ldrb.w	r6, [sp, #620]	; 0x26c
 8011cb8:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8011cbc:	7223      	strb	r3, [r4, #8]
 8011cbe:	2300      	movs	r3, #0
 8011cc0:	2201      	movs	r2, #1
 8011cc2:	f88d 3014 	strb.w	r3, [sp, #20]
 8011cc6:	9b9a      	ldr	r3, [sp, #616]	; 0x268
 8011cc8:	7122      	strb	r2, [r4, #4]
 8011cca:	b1cb      	cbz	r3, 8011d00 <uxr_buffer_create_participant_bin+0x5c>
 8011ccc:	f88d 201c 	strb.w	r2, [sp, #28]
 8011cd0:	9308      	str	r3, [sp, #32]
 8011cd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011cd6:	a915      	add	r1, sp, #84	; 0x54
 8011cd8:	a809      	add	r0, sp, #36	; 0x24
 8011cda:	f7ff ff23 	bl	8011b24 <ucdr_init_buffer>
 8011cde:	a905      	add	r1, sp, #20
 8011ce0:	a809      	add	r0, sp, #36	; 0x24
 8011ce2:	f002 f803 	bl	8013cec <uxr_serialize_OBJK_DomainParticipant_Binary>
 8011ce6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011ce8:	9600      	str	r6, [sp, #0]
 8011cea:	4628      	mov	r0, r5
 8011cec:	9401      	str	r4, [sp, #4]
 8011cee:	60e3      	str	r3, [r4, #12]
 8011cf0:	b29b      	uxth	r3, r3
 8011cf2:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8011cf6:	f7ff ffa9 	bl	8011c4c <uxr_common_create_entity>
 8011cfa:	f50d 7d16 	add.w	sp, sp, #600	; 0x258
 8011cfe:	bd70      	pop	{r4, r5, r6, pc}
 8011d00:	f88d 301c 	strb.w	r3, [sp, #28]
 8011d04:	e7e5      	b.n	8011cd2 <uxr_buffer_create_participant_bin+0x2e>
 8011d06:	bf00      	nop

08011d08 <uxr_buffer_create_topic_bin>:
 8011d08:	b570      	push	{r4, r5, r6, lr}
 8011d0a:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
 8011d0e:	4605      	mov	r5, r0
 8011d10:	4618      	mov	r0, r3
 8011d12:	9105      	str	r1, [sp, #20]
 8011d14:	a997      	add	r1, sp, #604	; 0x25c
 8011d16:	f89d 6278 	ldrb.w	r6, [sp, #632]	; 0x278
 8011d1a:	ac13      	add	r4, sp, #76	; 0x4c
 8011d1c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8011d20:	2302      	movs	r3, #2
 8011d22:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
 8011d26:	f000 f9cf 	bl	80120c8 <uxr_object_id_to_raw>
 8011d2a:	9b9c      	ldr	r3, [sp, #624]	; 0x270
 8011d2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011d30:	a917      	add	r1, sp, #92	; 0x5c
 8011d32:	a80b      	add	r0, sp, #44	; 0x2c
 8011d34:	9306      	str	r3, [sp, #24]
 8011d36:	9b9d      	ldr	r3, [sp, #628]	; 0x274
 8011d38:	930a      	str	r3, [sp, #40]	; 0x28
 8011d3a:	2303      	movs	r3, #3
 8011d3c:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8011d40:	2301      	movs	r3, #1
 8011d42:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8011d46:	2300      	movs	r3, #0
 8011d48:	f88d 301c 	strb.w	r3, [sp, #28]
 8011d4c:	f7ff feea 	bl	8011b24 <ucdr_init_buffer>
 8011d50:	a906      	add	r1, sp, #24
 8011d52:	a80b      	add	r0, sp, #44	; 0x2c
 8011d54:	f001 ffec 	bl	8013d30 <uxr_serialize_OBJK_Topic_Binary>
 8011d58:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011d5a:	4628      	mov	r0, r5
 8011d5c:	9600      	str	r6, [sp, #0]
 8011d5e:	9316      	str	r3, [sp, #88]	; 0x58
 8011d60:	b29b      	uxth	r3, r3
 8011d62:	9401      	str	r4, [sp, #4]
 8011d64:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8011d68:	f7ff ff70 	bl	8011c4c <uxr_common_create_entity>
 8011d6c:	f50d 7d18 	add.w	sp, sp, #608	; 0x260
 8011d70:	bd70      	pop	{r4, r5, r6, pc}
 8011d72:	bf00      	nop

08011d74 <uxr_buffer_create_publisher_bin>:
 8011d74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011d76:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 8011d7a:	2603      	movs	r6, #3
 8011d7c:	4605      	mov	r5, r0
 8011d7e:	4618      	mov	r0, r3
 8011d80:	9105      	str	r1, [sp, #20]
 8011d82:	a992      	add	r1, sp, #584	; 0x248
 8011d84:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 8011d88:	ac0e      	add	r4, sp, #56	; 0x38
 8011d8a:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 8011d8e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8011d92:	f000 f999 	bl	80120c8 <uxr_object_id_to_raw>
 8011d96:	2300      	movs	r3, #0
 8011d98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011d9c:	a912      	add	r1, sp, #72	; 0x48
 8011d9e:	a806      	add	r0, sp, #24
 8011da0:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 8011da4:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 8011da8:	f88d 6040 	strb.w	r6, [sp, #64]	; 0x40
 8011dac:	f7ff feba 	bl	8011b24 <ucdr_init_buffer>
 8011db0:	a993      	add	r1, sp, #588	; 0x24c
 8011db2:	a806      	add	r0, sp, #24
 8011db4:	f002 f870 	bl	8013e98 <uxr_serialize_OBJK_Publisher_Binary>
 8011db8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011dba:	4628      	mov	r0, r5
 8011dbc:	9700      	str	r7, [sp, #0]
 8011dbe:	9311      	str	r3, [sp, #68]	; 0x44
 8011dc0:	b29b      	uxth	r3, r3
 8011dc2:	9401      	str	r4, [sp, #4]
 8011dc4:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8011dc8:	f7ff ff40 	bl	8011c4c <uxr_common_create_entity>
 8011dcc:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 8011dd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011dd2:	bf00      	nop

08011dd4 <uxr_buffer_create_subscriber_bin>:
 8011dd4:	b570      	push	{r4, r5, r6, lr}
 8011dd6:	f5ad 6d91 	sub.w	sp, sp, #1160	; 0x488
 8011dda:	4605      	mov	r5, r0
 8011ddc:	4618      	mov	r0, r3
 8011dde:	9105      	str	r1, [sp, #20]
 8011de0:	a992      	add	r1, sp, #584	; 0x248
 8011de2:	f89d 6498 	ldrb.w	r6, [sp, #1176]	; 0x498
 8011de6:	ac0e      	add	r4, sp, #56	; 0x38
 8011de8:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8011dec:	2304      	movs	r3, #4
 8011dee:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
 8011df2:	f000 f969 	bl	80120c8 <uxr_object_id_to_raw>
 8011df6:	2300      	movs	r3, #0
 8011df8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011dfc:	a912      	add	r1, sp, #72	; 0x48
 8011dfe:	a806      	add	r0, sp, #24
 8011e00:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 8011e04:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 8011e08:	2303      	movs	r3, #3
 8011e0a:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 8011e0e:	f7ff fe89 	bl	8011b24 <ucdr_init_buffer>
 8011e12:	a993      	add	r1, sp, #588	; 0x24c
 8011e14:	a806      	add	r0, sp, #24
 8011e16:	f002 f8ef 	bl	8013ff8 <uxr_serialize_OBJK_Subscriber_Binary>
 8011e1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011e1c:	4628      	mov	r0, r5
 8011e1e:	9600      	str	r6, [sp, #0]
 8011e20:	9311      	str	r3, [sp, #68]	; 0x44
 8011e22:	b29b      	uxth	r3, r3
 8011e24:	9401      	str	r4, [sp, #4]
 8011e26:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8011e2a:	f7ff ff0f 	bl	8011c4c <uxr_common_create_entity>
 8011e2e:	f50d 6d91 	add.w	sp, sp, #1160	; 0x488
 8011e32:	bd70      	pop	{r4, r5, r6, pc}

08011e34 <uxr_buffer_create_datawriter_bin>:
 8011e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e38:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8011e3c:	4606      	mov	r6, r0
 8011e3e:	4618      	mov	r0, r3
 8011e40:	2703      	movs	r7, #3
 8011e42:	ac1d      	add	r4, sp, #116	; 0x74
 8011e44:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	; 0x2a8
 8011e48:	9105      	str	r1, [sp, #20]
 8011e4a:	a9a1      	add	r1, sp, #644	; 0x284
 8011e4c:	f89d 82ac 	ldrb.w	r8, [sp, #684]	; 0x2ac
 8011e50:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8011e54:	2305      	movs	r3, #5
 8011e56:	7123      	strb	r3, [r4, #4]
 8011e58:	f000 f936 	bl	80120c8 <uxr_object_id_to_raw>
 8011e5c:	a90e      	add	r1, sp, #56	; 0x38
 8011e5e:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
 8011e60:	7227      	strb	r7, [r4, #8]
 8011e62:	f000 f931 	bl	80120c8 <uxr_object_id_to_raw>
 8011e66:	2300      	movs	r3, #0
 8011e68:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 8011e6c:	3d00      	subs	r5, #0
 8011e6e:	f89d 22a5 	ldrb.w	r2, [sp, #677]	; 0x2a5
 8011e72:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 8011e76:	bf18      	it	ne
 8011e78:	2501      	movne	r5, #1
 8011e7a:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 8011e7e:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 8011e82:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8011e86:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8011e8a:	2301      	movs	r3, #1
 8011e8c:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 8011e90:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 8011e94:	bb8a      	cbnz	r2, 8011efa <uxr_buffer_create_datawriter_bin+0xc6>
 8011e96:	f04f 0e23 	mov.w	lr, #35	; 0x23
 8011e9a:	f04f 0c13 	mov.w	ip, #19
 8011e9e:	250b      	movs	r5, #11
 8011ea0:	2221      	movs	r2, #33	; 0x21
 8011ea2:	2111      	movs	r1, #17
 8011ea4:	2009      	movs	r0, #9
 8011ea6:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8011eaa:	f89d 32a6 	ldrb.w	r3, [sp, #678]	; 0x2a6
 8011eae:	b923      	cbnz	r3, 8011eba <uxr_buffer_create_datawriter_bin+0x86>
 8011eb0:	4672      	mov	r2, lr
 8011eb2:	4661      	mov	r1, ip
 8011eb4:	4628      	mov	r0, r5
 8011eb6:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 8011eba:	f89d 32a4 	ldrb.w	r3, [sp, #676]	; 0x2a4
 8011ebe:	2b01      	cmp	r3, #1
 8011ec0:	d025      	beq.n	8011f0e <uxr_buffer_create_datawriter_bin+0xda>
 8011ec2:	2b03      	cmp	r3, #3
 8011ec4:	d029      	beq.n	8011f1a <uxr_buffer_create_datawriter_bin+0xe6>
 8011ec6:	b32b      	cbz	r3, 8011f14 <uxr_buffer_create_datawriter_bin+0xe0>
 8011ec8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011ecc:	a921      	add	r1, sp, #132	; 0x84
 8011ece:	a806      	add	r0, sp, #24
 8011ed0:	f7ff fe28 	bl	8011b24 <ucdr_init_buffer>
 8011ed4:	a90e      	add	r1, sp, #56	; 0x38
 8011ed6:	a806      	add	r0, sp, #24
 8011ed8:	f002 f940 	bl	801415c <uxr_serialize_OBJK_DataWriter_Binary>
 8011edc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011ede:	f8cd 8000 	str.w	r8, [sp]
 8011ee2:	4630      	mov	r0, r6
 8011ee4:	9401      	str	r4, [sp, #4]
 8011ee6:	60e3      	str	r3, [r4, #12]
 8011ee8:	b29b      	uxth	r3, r3
 8011eea:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8011eee:	f7ff fead 	bl	8011c4c <uxr_common_create_entity>
 8011ef2:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8011ef6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011efa:	f04f 0e22 	mov.w	lr, #34	; 0x22
 8011efe:	f04f 0c12 	mov.w	ip, #18
 8011f02:	250a      	movs	r5, #10
 8011f04:	2220      	movs	r2, #32
 8011f06:	2110      	movs	r1, #16
 8011f08:	2008      	movs	r0, #8
 8011f0a:	2702      	movs	r7, #2
 8011f0c:	e7cd      	b.n	8011eaa <uxr_buffer_create_datawriter_bin+0x76>
 8011f0e:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 8011f12:	e7d9      	b.n	8011ec8 <uxr_buffer_create_datawriter_bin+0x94>
 8011f14:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 8011f18:	e7d6      	b.n	8011ec8 <uxr_buffer_create_datawriter_bin+0x94>
 8011f1a:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8011f1e:	e7d3      	b.n	8011ec8 <uxr_buffer_create_datawriter_bin+0x94>

08011f20 <uxr_buffer_create_datareader_bin>:
 8011f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f24:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 8011f28:	4606      	mov	r6, r0
 8011f2a:	4618      	mov	r0, r3
 8011f2c:	2703      	movs	r7, #3
 8011f2e:	ac1f      	add	r4, sp, #124	; 0x7c
 8011f30:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	; 0x2b0
 8011f34:	9105      	str	r1, [sp, #20]
 8011f36:	a9a3      	add	r1, sp, #652	; 0x28c
 8011f38:	f89d 82b4 	ldrb.w	r8, [sp, #692]	; 0x2b4
 8011f3c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8011f40:	2306      	movs	r3, #6
 8011f42:	7123      	strb	r3, [r4, #4]
 8011f44:	f000 f8c0 	bl	80120c8 <uxr_object_id_to_raw>
 8011f48:	a90e      	add	r1, sp, #56	; 0x38
 8011f4a:	98aa      	ldr	r0, [sp, #680]	; 0x2a8
 8011f4c:	7227      	strb	r7, [r4, #8]
 8011f4e:	f000 f8bb 	bl	80120c8 <uxr_object_id_to_raw>
 8011f52:	2300      	movs	r3, #0
 8011f54:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 8011f58:	3d00      	subs	r5, #0
 8011f5a:	f89d 22ad 	ldrb.w	r2, [sp, #685]	; 0x2ad
 8011f5e:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 8011f62:	bf18      	it	ne
 8011f64:	2501      	movne	r5, #1
 8011f66:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 8011f6a:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 8011f6e:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 8011f72:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8011f76:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8011f7a:	2301      	movs	r3, #1
 8011f7c:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 8011f80:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 8011f84:	bb8a      	cbnz	r2, 8011fea <uxr_buffer_create_datareader_bin+0xca>
 8011f86:	f04f 0e23 	mov.w	lr, #35	; 0x23
 8011f8a:	f04f 0c13 	mov.w	ip, #19
 8011f8e:	250b      	movs	r5, #11
 8011f90:	2221      	movs	r2, #33	; 0x21
 8011f92:	2111      	movs	r1, #17
 8011f94:	2009      	movs	r0, #9
 8011f96:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8011f9a:	f89d 32ae 	ldrb.w	r3, [sp, #686]	; 0x2ae
 8011f9e:	b923      	cbnz	r3, 8011faa <uxr_buffer_create_datareader_bin+0x8a>
 8011fa0:	4672      	mov	r2, lr
 8011fa2:	4661      	mov	r1, ip
 8011fa4:	4628      	mov	r0, r5
 8011fa6:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 8011faa:	f89d 32ac 	ldrb.w	r3, [sp, #684]	; 0x2ac
 8011fae:	2b01      	cmp	r3, #1
 8011fb0:	d025      	beq.n	8011ffe <uxr_buffer_create_datareader_bin+0xde>
 8011fb2:	2b03      	cmp	r3, #3
 8011fb4:	d029      	beq.n	801200a <uxr_buffer_create_datareader_bin+0xea>
 8011fb6:	b32b      	cbz	r3, 8012004 <uxr_buffer_create_datareader_bin+0xe4>
 8011fb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011fbc:	a923      	add	r1, sp, #140	; 0x8c
 8011fbe:	a806      	add	r0, sp, #24
 8011fc0:	f7ff fdb0 	bl	8011b24 <ucdr_init_buffer>
 8011fc4:	a90e      	add	r1, sp, #56	; 0x38
 8011fc6:	a806      	add	r0, sp, #24
 8011fc8:	f002 f88c 	bl	80140e4 <uxr_serialize_OBJK_DataReader_Binary>
 8011fcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011fce:	f8cd 8000 	str.w	r8, [sp]
 8011fd2:	4630      	mov	r0, r6
 8011fd4:	9401      	str	r4, [sp, #4]
 8011fd6:	60e3      	str	r3, [r4, #12]
 8011fd8:	b29b      	uxth	r3, r3
 8011fda:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8011fde:	f7ff fe35 	bl	8011c4c <uxr_common_create_entity>
 8011fe2:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 8011fe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011fea:	f04f 0e22 	mov.w	lr, #34	; 0x22
 8011fee:	f04f 0c12 	mov.w	ip, #18
 8011ff2:	250a      	movs	r5, #10
 8011ff4:	2220      	movs	r2, #32
 8011ff6:	2110      	movs	r1, #16
 8011ff8:	2008      	movs	r0, #8
 8011ffa:	2702      	movs	r7, #2
 8011ffc:	e7cd      	b.n	8011f9a <uxr_buffer_create_datareader_bin+0x7a>
 8011ffe:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 8012002:	e7d9      	b.n	8011fb8 <uxr_buffer_create_datareader_bin+0x98>
 8012004:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 8012008:	e7d6      	b.n	8011fb8 <uxr_buffer_create_datareader_bin+0x98>
 801200a:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801200e:	e7d3      	b.n	8011fb8 <uxr_buffer_create_datareader_bin+0x98>

08012010 <uxr_buffer_create_replier_bin>:
 8012010:	b570      	push	{r4, r5, r6, lr}
 8012012:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 8012016:	4605      	mov	r5, r0
 8012018:	4618      	mov	r0, r3
 801201a:	9105      	str	r1, [sp, #20]
 801201c:	a999      	add	r1, sp, #612	; 0x264
 801201e:	f89d 6294 	ldrb.w	r6, [sp, #660]	; 0x294
 8012022:	ac15      	add	r4, sp, #84	; 0x54
 8012024:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8012028:	2308      	movs	r3, #8
 801202a:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
 801202e:	f000 f84b 	bl	80120c8 <uxr_object_id_to_raw>
 8012032:	9b9e      	ldr	r3, [sp, #632]	; 0x278
 8012034:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012038:	a919      	add	r1, sp, #100	; 0x64
 801203a:	a80d      	add	r0, sp, #52	; 0x34
 801203c:	9306      	str	r3, [sp, #24]
 801203e:	9b9f      	ldr	r3, [sp, #636]	; 0x27c
 8012040:	9307      	str	r3, [sp, #28]
 8012042:	9ba0      	ldr	r3, [sp, #640]	; 0x280
 8012044:	9308      	str	r3, [sp, #32]
 8012046:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8012048:	930c      	str	r3, [sp, #48]	; 0x30
 801204a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801204c:	930a      	str	r3, [sp, #40]	; 0x28
 801204e:	2301      	movs	r3, #1
 8012050:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8012054:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8012058:	2303      	movs	r3, #3
 801205a:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
 801205e:	f7ff fd61 	bl	8011b24 <ucdr_init_buffer>
 8012062:	a906      	add	r1, sp, #24
 8012064:	a80d      	add	r0, sp, #52	; 0x34
 8012066:	f002 f8a5 	bl	80141b4 <uxr_serialize_OBJK_Replier_Binary>
 801206a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801206c:	4628      	mov	r0, r5
 801206e:	9600      	str	r6, [sp, #0]
 8012070:	9318      	str	r3, [sp, #96]	; 0x60
 8012072:	b29b      	uxth	r3, r3
 8012074:	9401      	str	r4, [sp, #4]
 8012076:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801207a:	f7ff fde7 	bl	8011c4c <uxr_common_create_entity>
 801207e:	f50d 7d1a 	add.w	sp, sp, #616	; 0x268
 8012082:	bd70      	pop	{r4, r5, r6, pc}

08012084 <uxr_object_id>:
 8012084:	b082      	sub	sp, #8
 8012086:	2300      	movs	r3, #0
 8012088:	f88d 1006 	strb.w	r1, [sp, #6]
 801208c:	f360 030f 	bfi	r3, r0, #0, #16
 8012090:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8012094:	f362 431f 	bfi	r3, r2, #16, #16
 8012098:	4618      	mov	r0, r3
 801209a:	b002      	add	sp, #8
 801209c:	4770      	bx	lr
 801209e:	bf00      	nop

080120a0 <uxr_object_id_from_raw>:
 80120a0:	7843      	ldrb	r3, [r0, #1]
 80120a2:	b082      	sub	sp, #8
 80120a4:	7801      	ldrb	r1, [r0, #0]
 80120a6:	2000      	movs	r0, #0
 80120a8:	091a      	lsrs	r2, r3, #4
 80120aa:	f003 030f 	and.w	r3, r3, #15
 80120ae:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80120b2:	f88d 3006 	strb.w	r3, [sp, #6]
 80120b6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80120ba:	f362 000f 	bfi	r0, r2, #0, #16
 80120be:	f363 401f 	bfi	r0, r3, #16, #16
 80120c2:	b002      	add	sp, #8
 80120c4:	4770      	bx	lr
 80120c6:	bf00      	nop

080120c8 <uxr_object_id_to_raw>:
 80120c8:	4602      	mov	r2, r0
 80120ca:	f3c0 4303 	ubfx	r3, r0, #16, #4
 80120ce:	b082      	sub	sp, #8
 80120d0:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 80120d4:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 80120d8:	f881 c000 	strb.w	ip, [r1]
 80120dc:	7048      	strb	r0, [r1, #1]
 80120de:	b002      	add	sp, #8
 80120e0:	4770      	bx	lr
 80120e2:	bf00      	nop

080120e4 <on_get_fragmentation_info>:
 80120e4:	b500      	push	{lr}
 80120e6:	b08b      	sub	sp, #44	; 0x2c
 80120e8:	4601      	mov	r1, r0
 80120ea:	2204      	movs	r2, #4
 80120ec:	a802      	add	r0, sp, #8
 80120ee:	f7ff fd19 	bl	8011b24 <ucdr_init_buffer>
 80120f2:	f10d 0305 	add.w	r3, sp, #5
 80120f6:	f10d 0206 	add.w	r2, sp, #6
 80120fa:	a901      	add	r1, sp, #4
 80120fc:	a802      	add	r0, sp, #8
 80120fe:	f001 f9e1 	bl	80134c4 <uxr_read_submessage_header>
 8012102:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012106:	2b0d      	cmp	r3, #13
 8012108:	d003      	beq.n	8012112 <on_get_fragmentation_info+0x2e>
 801210a:	2000      	movs	r0, #0
 801210c:	b00b      	add	sp, #44	; 0x2c
 801210e:	f85d fb04 	ldr.w	pc, [sp], #4
 8012112:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012116:	f013 0f02 	tst.w	r3, #2
 801211a:	bf14      	ite	ne
 801211c:	2002      	movne	r0, #2
 801211e:	2001      	moveq	r0, #1
 8012120:	b00b      	add	sp, #44	; 0x2c
 8012122:	f85d fb04 	ldr.w	pc, [sp], #4
 8012126:	bf00      	nop

08012128 <read_submessage_get_info>:
 8012128:	b570      	push	{r4, r5, r6, lr}
 801212a:	2500      	movs	r5, #0
 801212c:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
 8012130:	460e      	mov	r6, r1
 8012132:	4604      	mov	r4, r0
 8012134:	f44f 7224 	mov.w	r2, #656	; 0x290
 8012138:	4629      	mov	r1, r5
 801213a:	a810      	add	r0, sp, #64	; 0x40
 801213c:	9503      	str	r5, [sp, #12]
 801213e:	9504      	str	r5, [sp, #16]
 8012140:	f00b fd28 	bl	801db94 <memset>
 8012144:	a903      	add	r1, sp, #12
 8012146:	4630      	mov	r0, r6
 8012148:	f002 faaa 	bl	80146a0 <uxr_deserialize_GET_INFO_Payload>
 801214c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8012150:	4620      	mov	r0, r4
 8012152:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8012156:	f001 f823 	bl	80131a0 <uxr_session_header_offset>
 801215a:	462b      	mov	r3, r5
 801215c:	220c      	movs	r2, #12
 801215e:	a905      	add	r1, sp, #20
 8012160:	9000      	str	r0, [sp, #0]
 8012162:	a808      	add	r0, sp, #32
 8012164:	f7ff fccc 	bl	8011b00 <ucdr_init_buffer_origin_offset>
 8012168:	a910      	add	r1, sp, #64	; 0x40
 801216a:	a808      	add	r0, sp, #32
 801216c:	f002 fb0c 	bl	8014788 <uxr_serialize_INFO_Payload>
 8012170:	9b08      	ldr	r3, [sp, #32]
 8012172:	462a      	mov	r2, r5
 8012174:	4629      	mov	r1, r5
 8012176:	4620      	mov	r0, r4
 8012178:	f000 ffbe 	bl	80130f8 <uxr_stamp_session_header>
 801217c:	a808      	add	r0, sp, #32
 801217e:	f7ff fcff 	bl	8011b80 <ucdr_buffer_length>
 8012182:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8012184:	4602      	mov	r2, r0
 8012186:	a905      	add	r1, sp, #20
 8012188:	e9d3 0400 	ldrd	r0, r4, [r3]
 801218c:	47a0      	blx	r4
 801218e:	f50d 7d34 	add.w	sp, sp, #720	; 0x2d0
 8012192:	bd70      	pop	{r4, r5, r6, pc}

08012194 <write_submessage_acknack.isra.0>:
 8012194:	b570      	push	{r4, r5, r6, lr}
 8012196:	b092      	sub	sp, #72	; 0x48
 8012198:	4605      	mov	r5, r0
 801219a:	460e      	mov	r6, r1
 801219c:	4614      	mov	r4, r2
 801219e:	f000 ffff 	bl	80131a0 <uxr_session_header_offset>
 80121a2:	a905      	add	r1, sp, #20
 80121a4:	9000      	str	r0, [sp, #0]
 80121a6:	2300      	movs	r3, #0
 80121a8:	a80a      	add	r0, sp, #40	; 0x28
 80121aa:	2211      	movs	r2, #17
 80121ac:	f7ff fca8 	bl	8011b00 <ucdr_init_buffer_origin_offset>
 80121b0:	2218      	movs	r2, #24
 80121b2:	2300      	movs	r3, #0
 80121b4:	210a      	movs	r1, #10
 80121b6:	fb02 5404 	mla	r4, r2, r4, r5
 80121ba:	a80a      	add	r0, sp, #40	; 0x28
 80121bc:	2205      	movs	r2, #5
 80121be:	3450      	adds	r4, #80	; 0x50
 80121c0:	f001 f966 	bl	8013490 <uxr_buffer_submessage_header>
 80121c4:	a903      	add	r1, sp, #12
 80121c6:	4620      	mov	r0, r4
 80121c8:	f009 f874 	bl	801b2b4 <uxr_compute_acknack>
 80121cc:	ba40      	rev16	r0, r0
 80121ce:	a903      	add	r1, sp, #12
 80121d0:	f88d 6010 	strb.w	r6, [sp, #16]
 80121d4:	f8ad 000e 	strh.w	r0, [sp, #14]
 80121d8:	a80a      	add	r0, sp, #40	; 0x28
 80121da:	f002 fb47 	bl	801486c <uxr_serialize_ACKNACK_Payload>
 80121de:	2200      	movs	r2, #0
 80121e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80121e2:	4628      	mov	r0, r5
 80121e4:	4611      	mov	r1, r2
 80121e6:	f000 ff87 	bl	80130f8 <uxr_stamp_session_header>
 80121ea:	a80a      	add	r0, sp, #40	; 0x28
 80121ec:	f7ff fcc8 	bl	8011b80 <ucdr_buffer_length>
 80121f0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80121f2:	4602      	mov	r2, r0
 80121f4:	a905      	add	r1, sp, #20
 80121f6:	e9d3 0400 	ldrd	r0, r4, [r3]
 80121fa:	47a0      	blx	r4
 80121fc:	b012      	add	sp, #72	; 0x48
 80121fe:	bd70      	pop	{r4, r5, r6, pc}

08012200 <uxr_init_session>:
 8012200:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 8012238 <uxr_init_session+0x38>
 8012204:	2300      	movs	r3, #0
 8012206:	b510      	push	{r4, lr}
 8012208:	4604      	mov	r4, r0
 801220a:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 801220e:	e9c0 131c 	strd	r1, r3, [r0, #112]	; 0x70
 8012212:	e9c0 331e 	strd	r3, r3, [r0, #120]	; 0x78
 8012216:	e9c0 3320 	strd	r3, r3, [r0, #128]	; 0x80
 801221a:	e9c0 3322 	strd	r3, r3, [r0, #136]	; 0x88
 801221e:	e9c0 3324 	strd	r3, r3, [r0, #144]	; 0x90
 8012222:	ed80 7b26 	vstr	d7, [r0, #152]	; 0x98
 8012226:	2181      	movs	r1, #129	; 0x81
 8012228:	f000 feca 	bl	8012fc0 <uxr_init_session_info>
 801222c:	f104 0008 	add.w	r0, r4, #8
 8012230:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012234:	f001 b848 	b.w	80132c8 <uxr_init_stream_storage>
	...

08012240 <uxr_set_status_callback>:
 8012240:	e9c0 1220 	strd	r1, r2, [r0, #128]	; 0x80
 8012244:	4770      	bx	lr
 8012246:	bf00      	nop

08012248 <uxr_set_topic_callback>:
 8012248:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
 801224c:	4770      	bx	lr
 801224e:	bf00      	nop

08012250 <uxr_set_request_callback>:
 8012250:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
 8012254:	4770      	bx	lr
 8012256:	bf00      	nop

08012258 <uxr_set_reply_callback>:
 8012258:	e9c0 122b 	strd	r1, r2, [r0, #172]	; 0xac
 801225c:	4770      	bx	lr
 801225e:	bf00      	nop

08012260 <uxr_create_output_best_effort_stream>:
 8012260:	b510      	push	{r4, lr}
 8012262:	4604      	mov	r4, r0
 8012264:	b084      	sub	sp, #16
 8012266:	e9cd 2100 	strd	r2, r1, [sp]
 801226a:	f000 ff99 	bl	80131a0 <uxr_session_header_offset>
 801226e:	4603      	mov	r3, r0
 8012270:	f104 0008 	add.w	r0, r4, #8
 8012274:	e9dd 2100 	ldrd	r2, r1, [sp]
 8012278:	b004      	add	sp, #16
 801227a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801227e:	f001 b869 	b.w	8013354 <uxr_add_output_best_effort_buffer>
 8012282:	bf00      	nop

08012284 <uxr_create_output_reliable_stream>:
 8012284:	b530      	push	{r4, r5, lr}
 8012286:	b089      	sub	sp, #36	; 0x24
 8012288:	4604      	mov	r4, r0
 801228a:	e9cd 2104 	strd	r2, r1, [sp, #16]
 801228e:	9303      	str	r3, [sp, #12]
 8012290:	f000 ff86 	bl	80131a0 <uxr_session_header_offset>
 8012294:	4605      	mov	r5, r0
 8012296:	9905      	ldr	r1, [sp, #20]
 8012298:	f104 0008 	add.w	r0, r4, #8
 801229c:	9500      	str	r5, [sp, #0]
 801229e:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 80122a2:	f001 f86b 	bl	801337c <uxr_add_output_reliable_buffer>
 80122a6:	2200      	movs	r2, #0
 80122a8:	fa5f fc80 	uxtb.w	ip, r0
 80122ac:	f3c0 2407 	ubfx	r4, r0, #8, #8
 80122b0:	f3c0 4107 	ubfx	r1, r0, #16, #8
 80122b4:	0e03      	lsrs	r3, r0, #24
 80122b6:	f36c 0207 	bfi	r2, ip, #0, #8
 80122ba:	f364 220f 	bfi	r2, r4, #8, #8
 80122be:	f361 4217 	bfi	r2, r1, #16, #8
 80122c2:	f363 621f 	bfi	r2, r3, #24, #8
 80122c6:	4610      	mov	r0, r2
 80122c8:	b009      	add	sp, #36	; 0x24
 80122ca:	bd30      	pop	{r4, r5, pc}

080122cc <uxr_create_input_best_effort_stream>:
 80122cc:	b082      	sub	sp, #8
 80122ce:	3008      	adds	r0, #8
 80122d0:	b002      	add	sp, #8
 80122d2:	f001 b86d 	b.w	80133b0 <uxr_add_input_best_effort_buffer>
 80122d6:	bf00      	nop

080122d8 <uxr_create_input_reliable_stream>:
 80122d8:	b510      	push	{r4, lr}
 80122da:	4c0c      	ldr	r4, [pc, #48]	; (801230c <uxr_create_input_reliable_stream+0x34>)
 80122dc:	b084      	sub	sp, #16
 80122de:	3008      	adds	r0, #8
 80122e0:	9400      	str	r4, [sp, #0]
 80122e2:	f001 f87b 	bl	80133dc <uxr_add_input_reliable_buffer>
 80122e6:	2200      	movs	r2, #0
 80122e8:	fa5f fe80 	uxtb.w	lr, r0
 80122ec:	f3c0 2c07 	ubfx	ip, r0, #8, #8
 80122f0:	f3c0 4107 	ubfx	r1, r0, #16, #8
 80122f4:	0e03      	lsrs	r3, r0, #24
 80122f6:	f36e 0207 	bfi	r2, lr, #0, #8
 80122fa:	f36c 220f 	bfi	r2, ip, #8, #8
 80122fe:	f361 4217 	bfi	r2, r1, #16, #8
 8012302:	f363 621f 	bfi	r2, r3, #24, #8
 8012306:	4610      	mov	r0, r2
 8012308:	b004      	add	sp, #16
 801230a:	bd10      	pop	{r4, pc}
 801230c:	080120e5 	.word	0x080120e5

08012310 <uxr_epoch_nanos>:
 8012310:	b510      	push	{r4, lr}
 8012312:	4604      	mov	r4, r0
 8012314:	f001 f91e 	bl	8013554 <uxr_nanos>
 8012318:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 801231c:	1ac0      	subs	r0, r0, r3
 801231e:	eb61 0102 	sbc.w	r1, r1, r2
 8012322:	bd10      	pop	{r4, pc}

08012324 <uxr_flash_output_streams>:
 8012324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012328:	7e03      	ldrb	r3, [r0, #24]
 801232a:	b084      	sub	sp, #16
 801232c:	4604      	mov	r4, r0
 801232e:	b1fb      	cbz	r3, 8012370 <uxr_flash_output_streams+0x4c>
 8012330:	f04f 0900 	mov.w	r9, #0
 8012334:	f10d 0802 	add.w	r8, sp, #2
 8012338:	af03      	add	r7, sp, #12
 801233a:	ae02      	add	r6, sp, #8
 801233c:	4648      	mov	r0, r9
 801233e:	2201      	movs	r2, #1
 8012340:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 8012344:	4611      	mov	r1, r2
 8012346:	3508      	adds	r5, #8
 8012348:	f000 ff64 	bl	8013214 <uxr_stream_id>
 801234c:	4684      	mov	ip, r0
 801234e:	4643      	mov	r3, r8
 8012350:	463a      	mov	r2, r7
 8012352:	4631      	mov	r1, r6
 8012354:	4628      	mov	r0, r5
 8012356:	f8cd c004 	str.w	ip, [sp, #4]
 801235a:	f009 f835 	bl	801b3c8 <uxr_prepare_best_effort_buffer_to_send>
 801235e:	2800      	cmp	r0, #0
 8012360:	d13d      	bne.n	80123de <uxr_flash_output_streams+0xba>
 8012362:	f109 0901 	add.w	r9, r9, #1
 8012366:	7e23      	ldrb	r3, [r4, #24]
 8012368:	fa5f f089 	uxtb.w	r0, r9
 801236c:	4283      	cmp	r3, r0
 801236e:	d8e6      	bhi.n	801233e <uxr_flash_output_streams+0x1a>
 8012370:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8012374:	b383      	cbz	r3, 80123d8 <uxr_flash_output_streams+0xb4>
 8012376:	f04f 0900 	mov.w	r9, #0
 801237a:	f10d 0802 	add.w	r8, sp, #2
 801237e:	af03      	add	r7, sp, #12
 8012380:	ae02      	add	r6, sp, #8
 8012382:	4648      	mov	r0, r9
 8012384:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 8012388:	2201      	movs	r2, #1
 801238a:	2102      	movs	r1, #2
 801238c:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8012390:	f000 ff40 	bl	8013214 <uxr_stream_id>
 8012394:	9001      	str	r0, [sp, #4]
 8012396:	3520      	adds	r5, #32
 8012398:	e00c      	b.n	80123b4 <uxr_flash_output_streams+0x90>
 801239a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801239e:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80123a2:	9b02      	ldr	r3, [sp, #8]
 80123a4:	f000 fea8 	bl	80130f8 <uxr_stamp_session_header>
 80123a8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80123aa:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80123ae:	e9d3 0a00 	ldrd	r0, sl, [r3]
 80123b2:	47d0      	blx	sl
 80123b4:	4643      	mov	r3, r8
 80123b6:	463a      	mov	r2, r7
 80123b8:	4631      	mov	r1, r6
 80123ba:	4628      	mov	r0, r5
 80123bc:	f009 fa28 	bl	801b810 <uxr_prepare_next_reliable_buffer_to_send>
 80123c0:	4603      	mov	r3, r0
 80123c2:	4620      	mov	r0, r4
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	d1e8      	bne.n	801239a <uxr_flash_output_streams+0x76>
 80123c8:	f109 0901 	add.w	r9, r9, #1
 80123cc:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 80123d0:	fa5f f089 	uxtb.w	r0, r9
 80123d4:	4283      	cmp	r3, r0
 80123d6:	d8d5      	bhi.n	8012384 <uxr_flash_output_streams+0x60>
 80123d8:	b004      	add	sp, #16
 80123da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80123de:	9b02      	ldr	r3, [sp, #8]
 80123e0:	4620      	mov	r0, r4
 80123e2:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80123e6:	f109 0901 	add.w	r9, r9, #1
 80123ea:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80123ee:	f000 fe83 	bl	80130f8 <uxr_stamp_session_header>
 80123f2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80123f4:	9a03      	ldr	r2, [sp, #12]
 80123f6:	685d      	ldr	r5, [r3, #4]
 80123f8:	6818      	ldr	r0, [r3, #0]
 80123fa:	9902      	ldr	r1, [sp, #8]
 80123fc:	47a8      	blx	r5
 80123fe:	7e23      	ldrb	r3, [r4, #24]
 8012400:	fa5f f089 	uxtb.w	r0, r9
 8012404:	4283      	cmp	r3, r0
 8012406:	d89a      	bhi.n	801233e <uxr_flash_output_streams+0x1a>
 8012408:	e7b2      	b.n	8012370 <uxr_flash_output_streams+0x4c>
 801240a:	bf00      	nop

0801240c <read_submessage_info>:
 801240c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012410:	460d      	mov	r5, r1
 8012412:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 8012416:	4606      	mov	r6, r0
 8012418:	4669      	mov	r1, sp
 801241a:	4628      	mov	r0, r5
 801241c:	f002 f852 	bl	80144c4 <uxr_deserialize_BaseObjectReply>
 8012420:	4604      	mov	r4, r0
 8012422:	a902      	add	r1, sp, #8
 8012424:	4628      	mov	r0, r5
 8012426:	f89d 7005 	ldrb.w	r7, [sp, #5]
 801242a:	f7fd fed3 	bl	80101d4 <ucdr_deserialize_bool>
 801242e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8012432:	4004      	ands	r4, r0
 8012434:	b2e4      	uxtb	r4, r4
 8012436:	b95b      	cbnz	r3, 8012450 <read_submessage_info+0x44>
 8012438:	a987      	add	r1, sp, #540	; 0x21c
 801243a:	4628      	mov	r0, r5
 801243c:	f7fd feca 	bl	80101d4 <ucdr_deserialize_bool>
 8012440:	f89d 321c 	ldrb.w	r3, [sp, #540]	; 0x21c
 8012444:	4680      	mov	r8, r0
 8012446:	b94b      	cbnz	r3, 801245c <read_submessage_info+0x50>
 8012448:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 801244c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012450:	a903      	add	r1, sp, #12
 8012452:	4628      	mov	r0, r5
 8012454:	f001 fee2 	bl	801421c <uxr_deserialize_ObjectVariant>
 8012458:	4004      	ands	r4, r0
 801245a:	e7ed      	b.n	8012438 <read_submessage_info+0x2c>
 801245c:	a988      	add	r1, sp, #544	; 0x220
 801245e:	4628      	mov	r0, r5
 8012460:	f7fd fee6 	bl	8010230 <ucdr_deserialize_uint8_t>
 8012464:	ea14 0f08 	tst.w	r4, r8
 8012468:	d0ee      	beq.n	8012448 <read_submessage_info+0x3c>
 801246a:	2800      	cmp	r0, #0
 801246c:	d0ec      	beq.n	8012448 <read_submessage_info+0x3c>
 801246e:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
 8012472:	2b0d      	cmp	r3, #13
 8012474:	d1e8      	bne.n	8012448 <read_submessage_info+0x3c>
 8012476:	a98a      	add	r1, sp, #552	; 0x228
 8012478:	4628      	mov	r0, r5
 801247a:	f7fe fcff 	bl	8010e7c <ucdr_deserialize_int16_t>
 801247e:	b138      	cbz	r0, 8012490 <read_submessage_info+0x84>
 8012480:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	; 0x228
 8012484:	2b00      	cmp	r3, #0
 8012486:	dd06      	ble.n	8012496 <read_submessage_info+0x8a>
 8012488:	2f00      	cmp	r7, #0
 801248a:	bf14      	ite	ne
 801248c:	2001      	movne	r0, #1
 801248e:	2002      	moveq	r0, #2
 8012490:	f886 00b5 	strb.w	r0, [r6, #181]	; 0xb5
 8012494:	e7d8      	b.n	8012448 <read_submessage_info+0x3c>
 8012496:	2000      	movs	r0, #0
 8012498:	e7fa      	b.n	8012490 <read_submessage_info+0x84>
 801249a:	bf00      	nop

0801249c <read_submessage_list>:
 801249c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124a0:	4604      	mov	r4, r0
 80124a2:	b097      	sub	sp, #92	; 0x5c
 80124a4:	460d      	mov	r5, r1
 80124a6:	4ec1      	ldr	r6, [pc, #772]	; (80127ac <read_submessage_list+0x310>)
 80124a8:	9209      	str	r2, [sp, #36]	; 0x24
 80124aa:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 80124ae:	aa0c      	add	r2, sp, #48	; 0x30
 80124b0:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 80124b4:	4628      	mov	r0, r5
 80124b6:	f001 f805 	bl	80134c4 <uxr_read_submessage_header>
 80124ba:	2800      	cmp	r0, #0
 80124bc:	f000 8142 	beq.w	8012744 <read_submessage_list+0x2a8>
 80124c0:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 80124c4:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 80124c8:	3b02      	subs	r3, #2
 80124ca:	2b0d      	cmp	r3, #13
 80124cc:	d8ed      	bhi.n	80124aa <read_submessage_list+0xe>
 80124ce:	a101      	add	r1, pc, #4	; (adr r1, 80124d4 <read_submessage_list+0x38>)
 80124d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80124d4:	0801273b 	.word	0x0801273b
 80124d8:	080124ab 	.word	0x080124ab
 80124dc:	0801272b 	.word	0x0801272b
 80124e0:	080126c9 	.word	0x080126c9
 80124e4:	080126bf 	.word	0x080126bf
 80124e8:	080124ab 	.word	0x080124ab
 80124ec:	080124ab 	.word	0x080124ab
 80124f0:	08012615 	.word	0x08012615
 80124f4:	080125a7 	.word	0x080125a7
 80124f8:	08012567 	.word	0x08012567
 80124fc:	080124ab 	.word	0x080124ab
 8012500:	080124ab 	.word	0x080124ab
 8012504:	080124ab 	.word	0x080124ab
 8012508:	0801250d 	.word	0x0801250d
 801250c:	a910      	add	r1, sp, #64	; 0x40
 801250e:	4628      	mov	r0, r5
 8012510:	f002 fa00 	bl	8014914 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 8012514:	f8d4 8090 	ldr.w	r8, [r4, #144]	; 0x90
 8012518:	f1b8 0f00 	cmp.w	r8, #0
 801251c:	f000 811a 	beq.w	8012754 <read_submessage_list+0x2b8>
 8012520:	f001 f818 	bl	8013554 <uxr_nanos>
 8012524:	4602      	mov	r2, r0
 8012526:	460b      	mov	r3, r1
 8012528:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 801252c:	2100      	movs	r1, #0
 801252e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8012530:	9006      	str	r0, [sp, #24]
 8012532:	468c      	mov	ip, r1
 8012534:	9815      	ldr	r0, [sp, #84]	; 0x54
 8012536:	fbc7 0c06 	smlal	r0, ip, r7, r6
 801253a:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801253c:	e9cd 0c04 	strd	r0, ip, [sp, #16]
 8012540:	468c      	mov	ip, r1
 8012542:	9811      	ldr	r0, [sp, #68]	; 0x44
 8012544:	fbc7 0c06 	smlal	r0, ip, r7, r6
 8012548:	e9cd 0c02 	strd	r0, ip, [sp, #8]
 801254c:	e9dd 7012 	ldrd	r7, r0, [sp, #72]	; 0x48
 8012550:	fbc7 0106 	smlal	r0, r1, r7, r6
 8012554:	e9cd 0100 	strd	r0, r1, [sp]
 8012558:	4620      	mov	r0, r4
 801255a:	47c0      	blx	r8
 801255c:	f04f 0301 	mov.w	r3, #1
 8012560:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
 8012564:	e7a1      	b.n	80124aa <read_submessage_list+0xe>
 8012566:	a910      	add	r1, sp, #64	; 0x40
 8012568:	4628      	mov	r0, r5
 801256a:	f002 f9bf 	bl	80148ec <uxr_deserialize_HEARTBEAT_Payload>
 801256e:	2100      	movs	r1, #0
 8012570:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8012574:	f000 fe7c 	bl	8013270 <uxr_stream_id_from_raw>
 8012578:	f3c0 2807 	ubfx	r8, r0, #8, #8
 801257c:	900f      	str	r0, [sp, #60]	; 0x3c
 801257e:	f104 0008 	add.w	r0, r4, #8
 8012582:	4641      	mov	r1, r8
 8012584:	f000 ff62 	bl	801344c <uxr_get_input_reliable_stream>
 8012588:	2800      	cmp	r0, #0
 801258a:	d08e      	beq.n	80124aa <read_submessage_list+0xe>
 801258c:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 8012590:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8012594:	f008 fe82 	bl	801b29c <uxr_process_heartbeat>
 8012598:	4642      	mov	r2, r8
 801259a:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 801259e:	4620      	mov	r0, r4
 80125a0:	f7ff fdf8 	bl	8012194 <write_submessage_acknack.isra.0>
 80125a4:	e781      	b.n	80124aa <read_submessage_list+0xe>
 80125a6:	a910      	add	r1, sp, #64	; 0x40
 80125a8:	4628      	mov	r0, r5
 80125aa:	f002 f977 	bl	801489c <uxr_deserialize_ACKNACK_Payload>
 80125ae:	2100      	movs	r1, #0
 80125b0:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 80125b4:	f000 fe5c 	bl	8013270 <uxr_stream_id_from_raw>
 80125b8:	f3c0 2107 	ubfx	r1, r0, #8, #8
 80125bc:	900d      	str	r0, [sp, #52]	; 0x34
 80125be:	f104 0008 	add.w	r0, r4, #8
 80125c2:	f000 ff2d 	bl	8013420 <uxr_get_output_reliable_stream>
 80125c6:	4680      	mov	r8, r0
 80125c8:	2800      	cmp	r0, #0
 80125ca:	f43f af6e 	beq.w	80124aa <read_submessage_list+0xe>
 80125ce:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 80125d2:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 80125d6:	f89d 1043 	ldrb.w	r1, [sp, #67]	; 0x43
 80125da:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 80125de:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 80125e2:	b289      	uxth	r1, r1
 80125e4:	f009 f9bc 	bl	801b960 <uxr_process_acknack>
 80125e8:	4640      	mov	r0, r8
 80125ea:	f009 f97d 	bl	801b8e8 <uxr_begin_output_nack_buffer_it>
 80125ee:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
 80125f2:	e005      	b.n	8012600 <read_submessage_list+0x164>
 80125f4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80125f6:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	; 0x38
 80125fa:	e9d3 0900 	ldrd	r0, r9, [r3]
 80125fe:	47c8      	blx	r9
 8012600:	f10d 0332 	add.w	r3, sp, #50	; 0x32
 8012604:	aa0f      	add	r2, sp, #60	; 0x3c
 8012606:	4651      	mov	r1, sl
 8012608:	4640      	mov	r0, r8
 801260a:	f009 f96f 	bl	801b8ec <uxr_next_reliable_nack_buffer_to_send>
 801260e:	2800      	cmp	r0, #0
 8012610:	d1f0      	bne.n	80125f4 <read_submessage_list+0x158>
 8012612:	e74a      	b.n	80124aa <read_submessage_list+0xe>
 8012614:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 8012618:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 801261c:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30
 8012620:	4628      	mov	r0, r5
 8012622:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
 8012626:	4651      	mov	r1, sl
 8012628:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 801262c:	f1a8 0804 	sub.w	r8, r8, #4
 8012630:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
 8012634:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
 8012638:	fa1f f888 	uxth.w	r8, r8
 801263c:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8012640:	f009 090e 	and.w	r9, r9, #14
 8012644:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
 8012648:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 801264c:	f001 fe88 	bl	8014360 <uxr_deserialize_BaseObjectRequest>
 8012650:	4650      	mov	r0, sl
 8012652:	a90f      	add	r1, sp, #60	; 0x3c
 8012654:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 8012658:	f000 fdca 	bl	80131f0 <uxr_parse_base_object_request>
 801265c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801265e:	f8d4 b080 	ldr.w	fp, [r4, #128]	; 0x80
 8012662:	f8bd a032 	ldrh.w	sl, [sp, #50]	; 0x32
 8012666:	9110      	str	r1, [sp, #64]	; 0x40
 8012668:	f1bb 0f00 	cmp.w	fp, #0
 801266c:	d006      	beq.n	801267c <read_submessage_list+0x1e0>
 801266e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8012672:	4652      	mov	r2, sl
 8012674:	4620      	mov	r0, r4
 8012676:	9300      	str	r3, [sp, #0]
 8012678:	2300      	movs	r3, #0
 801267a:	47d8      	blx	fp
 801267c:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 801267e:	b182      	cbz	r2, 80126a2 <read_submessage_list+0x206>
 8012680:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8012682:	f04f 0c00 	mov.w	ip, #0
 8012686:	3902      	subs	r1, #2
 8012688:	e003      	b.n	8012692 <read_submessage_list+0x1f6>
 801268a:	f10c 0c01 	add.w	ip, ip, #1
 801268e:	4594      	cmp	ip, r2
 8012690:	d007      	beq.n	80126a2 <read_submessage_list+0x206>
 8012692:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 8012696:	4553      	cmp	r3, sl
 8012698:	d1f7      	bne.n	801268a <read_submessage_list+0x1ee>
 801269a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 801269c:	2200      	movs	r2, #0
 801269e:	f803 200c 	strb.w	r2, [r3, ip]
 80126a2:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 80126a6:	464b      	mov	r3, r9
 80126a8:	4642      	mov	r2, r8
 80126aa:	4620      	mov	r0, r4
 80126ac:	9102      	str	r1, [sp, #8]
 80126ae:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80126b0:	9101      	str	r1, [sp, #4]
 80126b2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80126b4:	9100      	str	r1, [sp, #0]
 80126b6:	4629      	mov	r1, r5
 80126b8:	f009 fa14 	bl	801bae4 <read_submessage_format>
 80126bc:	e6f5      	b.n	80124aa <read_submessage_list+0xe>
 80126be:	4629      	mov	r1, r5
 80126c0:	4620      	mov	r0, r4
 80126c2:	f7ff fea3 	bl	801240c <read_submessage_info>
 80126c6:	e6f0      	b.n	80124aa <read_submessage_list+0xe>
 80126c8:	2a00      	cmp	r2, #0
 80126ca:	d03e      	beq.n	801274a <read_submessage_list+0x2ae>
 80126cc:	a910      	add	r1, sp, #64	; 0x40
 80126ce:	4628      	mov	r0, r5
 80126d0:	f002 f83c 	bl	801474c <uxr_deserialize_STATUS_Payload>
 80126d4:	a90e      	add	r1, sp, #56	; 0x38
 80126d6:	aa0d      	add	r2, sp, #52	; 0x34
 80126d8:	a810      	add	r0, sp, #64	; 0x40
 80126da:	f000 fd89 	bl	80131f0 <uxr_parse_base_object_request>
 80126de:	990e      	ldr	r1, [sp, #56]	; 0x38
 80126e0:	f8d4 a080 	ldr.w	sl, [r4, #128]	; 0x80
 80126e4:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
 80126e8:	f8bd 8034 	ldrh.w	r8, [sp, #52]	; 0x34
 80126ec:	910f      	str	r1, [sp, #60]	; 0x3c
 80126ee:	f1ba 0f00 	cmp.w	sl, #0
 80126f2:	d006      	beq.n	8012702 <read_submessage_list+0x266>
 80126f4:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80126f8:	4642      	mov	r2, r8
 80126fa:	4620      	mov	r0, r4
 80126fc:	9300      	str	r3, [sp, #0]
 80126fe:	464b      	mov	r3, r9
 8012700:	47d0      	blx	sl
 8012702:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8012704:	2a00      	cmp	r2, #0
 8012706:	f43f aed0 	beq.w	80124aa <read_submessage_list+0xe>
 801270a:	6f60      	ldr	r0, [r4, #116]	; 0x74
 801270c:	2100      	movs	r1, #0
 801270e:	3802      	subs	r0, #2
 8012710:	e003      	b.n	801271a <read_submessage_list+0x27e>
 8012712:	3101      	adds	r1, #1
 8012714:	4291      	cmp	r1, r2
 8012716:	f43f aec8 	beq.w	80124aa <read_submessage_list+0xe>
 801271a:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 801271e:	4543      	cmp	r3, r8
 8012720:	d1f7      	bne.n	8012712 <read_submessage_list+0x276>
 8012722:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8012724:	f803 9001 	strb.w	r9, [r3, r1]
 8012728:	e6bf      	b.n	80124aa <read_submessage_list+0xe>
 801272a:	2a00      	cmp	r2, #0
 801272c:	f47f aebd 	bne.w	80124aa <read_submessage_list+0xe>
 8012730:	4629      	mov	r1, r5
 8012732:	4620      	mov	r0, r4
 8012734:	f000 fca0 	bl	8013078 <uxr_read_create_session_status>
 8012738:	e6b7      	b.n	80124aa <read_submessage_list+0xe>
 801273a:	4629      	mov	r1, r5
 801273c:	4620      	mov	r0, r4
 801273e:	f7ff fcf3 	bl	8012128 <read_submessage_get_info>
 8012742:	e6b2      	b.n	80124aa <read_submessage_list+0xe>
 8012744:	b017      	add	sp, #92	; 0x5c
 8012746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801274a:	4629      	mov	r1, r5
 801274c:	4620      	mov	r0, r4
 801274e:	f000 fca1 	bl	8013094 <uxr_read_delete_session_status>
 8012752:	e6aa      	b.n	80124aa <read_submessage_list+0xe>
 8012754:	f000 fefe 	bl	8013554 <uxr_nanos>
 8012758:	4642      	mov	r2, r8
 801275a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 801275c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801275e:	fbc7 3206 	smlal	r3, r2, r7, r6
 8012762:	1818      	adds	r0, r3, r0
 8012764:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8012766:	eb42 0101 	adc.w	r1, r2, r1
 801276a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801276c:	4642      	mov	r2, r8
 801276e:	fbc7 3206 	smlal	r3, r2, r7, r6
 8012772:	469c      	mov	ip, r3
 8012774:	e9dd 3710 	ldrd	r3, r7, [sp, #64]	; 0x40
 8012778:	fbc3 7806 	smlal	r7, r8, r3, r6
 801277c:	4643      	mov	r3, r8
 801277e:	eb1c 0c07 	adds.w	ip, ip, r7
 8012782:	eb42 0203 	adc.w	r2, r2, r3
 8012786:	ebb0 030c 	subs.w	r3, r0, ip
 801278a:	eb61 0202 	sbc.w	r2, r1, r2
 801278e:	2a00      	cmp	r2, #0
 8012790:	db08      	blt.n	80127a4 <read_submessage_list+0x308>
 8012792:	085b      	lsrs	r3, r3, #1
 8012794:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 8012798:	1052      	asrs	r2, r2, #1
 801279a:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 801279e:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
 80127a2:	e6db      	b.n	801255c <read_submessage_list+0xc0>
 80127a4:	3301      	adds	r3, #1
 80127a6:	f142 0200 	adc.w	r2, r2, #0
 80127aa:	e7f2      	b.n	8012792 <read_submessage_list+0x2f6>
 80127ac:	3b9aca00 	.word	0x3b9aca00

080127b0 <listen_message_reliably>:
 80127b0:	1e0b      	subs	r3, r1, #0
 80127b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127b6:	bfb8      	it	lt
 80127b8:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 80127bc:	b09d      	sub	sp, #116	; 0x74
 80127be:	4680      	mov	r8, r0
 80127c0:	9305      	str	r3, [sp, #20]
 80127c2:	f000 feab 	bl	801351c <uxr_millis>
 80127c6:	f898 2048 	ldrb.w	r2, [r8, #72]	; 0x48
 80127ca:	4681      	mov	r9, r0
 80127cc:	2a00      	cmp	r2, #0
 80127ce:	f000 809a 	beq.w	8012906 <listen_message_reliably+0x156>
 80127d2:	2600      	movs	r6, #0
 80127d4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80127d8:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 80127dc:	460f      	mov	r7, r1
 80127de:	4630      	mov	r0, r6
 80127e0:	9303      	str	r3, [sp, #12]
 80127e2:	e00e      	b.n	8012802 <listen_message_reliably+0x52>
 80127e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80127e6:	3601      	adds	r6, #1
 80127e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80127ea:	455a      	cmp	r2, fp
 80127ec:	9903      	ldr	r1, [sp, #12]
 80127ee:	b2f0      	uxtb	r0, r6
 80127f0:	eb73 0101 	sbcs.w	r1, r3, r1
 80127f4:	da01      	bge.n	80127fa <listen_message_reliably+0x4a>
 80127f6:	4693      	mov	fp, r2
 80127f8:	9303      	str	r3, [sp, #12]
 80127fa:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 80127fe:	4283      	cmp	r3, r0
 8012800:	d95f      	bls.n	80128c2 <listen_message_reliably+0x112>
 8012802:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 8012806:	2102      	movs	r1, #2
 8012808:	2201      	movs	r2, #1
 801280a:	00e4      	lsls	r4, r4, #3
 801280c:	f000 fd02 	bl	8013214 <uxr_stream_id>
 8012810:	4601      	mov	r1, r0
 8012812:	f104 0520 	add.w	r5, r4, #32
 8012816:	463b      	mov	r3, r7
 8012818:	464a      	mov	r2, r9
 801281a:	9109      	str	r1, [sp, #36]	; 0x24
 801281c:	4445      	add	r5, r8
 801281e:	4628      	mov	r0, r5
 8012820:	f009 f836 	bl	801b890 <uxr_update_output_stream_heartbeat_timestamp>
 8012824:	eb08 0304 	add.w	r3, r8, r4
 8012828:	2800      	cmp	r0, #0
 801282a:	d0db      	beq.n	80127e4 <listen_message_reliably+0x34>
 801282c:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
 8012830:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
 8012834:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8012838:	4640      	mov	r0, r8
 801283a:	3501      	adds	r5, #1
 801283c:	4444      	add	r4, r8
 801283e:	9304      	str	r3, [sp, #16]
 8012840:	f000 fcae 	bl	80131a0 <uxr_session_header_offset>
 8012844:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8012848:	2300      	movs	r3, #0
 801284a:	2211      	movs	r2, #17
 801284c:	a90c      	add	r1, sp, #48	; 0x30
 801284e:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 8012852:	9000      	str	r0, [sp, #0]
 8012854:	4650      	mov	r0, sl
 8012856:	3601      	adds	r6, #1
 8012858:	f7ff f952 	bl	8011b00 <ucdr_init_buffer_origin_offset>
 801285c:	2300      	movs	r3, #0
 801285e:	2205      	movs	r2, #5
 8012860:	210b      	movs	r1, #11
 8012862:	4650      	mov	r0, sl
 8012864:	f000 fe14 	bl	8013490 <uxr_buffer_submessage_header>
 8012868:	2101      	movs	r1, #1
 801286a:	8968      	ldrh	r0, [r5, #10]
 801286c:	f009 fa04 	bl	801bc78 <uxr_seq_num_add>
 8012870:	892b      	ldrh	r3, [r5, #8]
 8012872:	4602      	mov	r2, r0
 8012874:	a90a      	add	r1, sp, #40	; 0x28
 8012876:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801287a:	4650      	mov	r0, sl
 801287c:	9b04      	ldr	r3, [sp, #16]
 801287e:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8012882:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8012886:	f002 f81d 	bl	80148c4 <uxr_serialize_HEARTBEAT_Payload>
 801288a:	2200      	movs	r2, #0
 801288c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801288e:	4640      	mov	r0, r8
 8012890:	4611      	mov	r1, r2
 8012892:	f000 fc31 	bl	80130f8 <uxr_stamp_session_header>
 8012896:	4650      	mov	r0, sl
 8012898:	f7ff f972 	bl	8011b80 <ucdr_buffer_length>
 801289c:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 80128a0:	4602      	mov	r2, r0
 80128a2:	a90c      	add	r1, sp, #48	; 0x30
 80128a4:	e9d3 0500 	ldrd	r0, r5, [r3]
 80128a8:	47a8      	blx	r5
 80128aa:	9903      	ldr	r1, [sp, #12]
 80128ac:	b2f0      	uxtb	r0, r6
 80128ae:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 80128b2:	455a      	cmp	r2, fp
 80128b4:	eb73 0101 	sbcs.w	r1, r3, r1
 80128b8:	db9d      	blt.n	80127f6 <listen_message_reliably+0x46>
 80128ba:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 80128be:	4283      	cmp	r3, r0
 80128c0:	d89f      	bhi.n	8012802 <listen_message_reliably+0x52>
 80128c2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80128c6:	9a03      	ldr	r2, [sp, #12]
 80128c8:	429a      	cmp	r2, r3
 80128ca:	bf08      	it	eq
 80128cc:	f1bb 3fff 	cmpeq.w	fp, #4294967295	; 0xffffffff
 80128d0:	d019      	beq.n	8012906 <listen_message_reliably+0x156>
 80128d2:	ebab 0309 	sub.w	r3, fp, r9
 80128d6:	2b00      	cmp	r3, #0
 80128d8:	9d05      	ldr	r5, [sp, #20]
 80128da:	f8d8 0070 	ldr.w	r0, [r8, #112]	; 0x70
 80128de:	aa08      	add	r2, sp, #32
 80128e0:	bf08      	it	eq
 80128e2:	2301      	moveq	r3, #1
 80128e4:	a907      	add	r1, sp, #28
 80128e6:	6884      	ldr	r4, [r0, #8]
 80128e8:	429d      	cmp	r5, r3
 80128ea:	6800      	ldr	r0, [r0, #0]
 80128ec:	bfa8      	it	ge
 80128ee:	461d      	movge	r5, r3
 80128f0:	462b      	mov	r3, r5
 80128f2:	47a0      	blx	r4
 80128f4:	b948      	cbnz	r0, 801290a <listen_message_reliably+0x15a>
 80128f6:	9b05      	ldr	r3, [sp, #20]
 80128f8:	1b5b      	subs	r3, r3, r5
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	9305      	str	r3, [sp, #20]
 80128fe:	f73f af60 	bgt.w	80127c2 <listen_message_reliably+0x12>
 8012902:	4604      	mov	r4, r0
 8012904:	e012      	b.n	801292c <listen_message_reliably+0x17c>
 8012906:	9b05      	ldr	r3, [sp, #20]
 8012908:	e7e5      	b.n	80128d6 <listen_message_reliably+0x126>
 801290a:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 801290e:	4604      	mov	r4, r0
 8012910:	2500      	movs	r5, #0
 8012912:	a80c      	add	r0, sp, #48	; 0x30
 8012914:	f7ff f906 	bl	8011b24 <ucdr_init_buffer>
 8012918:	f10d 031a 	add.w	r3, sp, #26
 801291c:	aa06      	add	r2, sp, #24
 801291e:	a90c      	add	r1, sp, #48	; 0x30
 8012920:	4640      	mov	r0, r8
 8012922:	f88d 5018 	strb.w	r5, [sp, #24]
 8012926:	f000 fbfb 	bl	8013120 <uxr_read_session_header>
 801292a:	b918      	cbnz	r0, 8012934 <listen_message_reliably+0x184>
 801292c:	4620      	mov	r0, r4
 801292e:	b01d      	add	sp, #116	; 0x74
 8012930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012934:	4629      	mov	r1, r5
 8012936:	f89d 0018 	ldrb.w	r0, [sp, #24]
 801293a:	f000 fc99 	bl	8013270 <uxr_stream_id_from_raw>
 801293e:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8012942:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 8012946:	f3c0 2507 	ubfx	r5, r0, #8, #8
 801294a:	2e01      	cmp	r6, #1
 801294c:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 8012950:	d04b      	beq.n	80129ea <listen_message_reliably+0x23a>
 8012952:	2e02      	cmp	r6, #2
 8012954:	d00f      	beq.n	8012976 <listen_message_reliably+0x1c6>
 8012956:	2e00      	cmp	r6, #0
 8012958:	d1e8      	bne.n	801292c <listen_message_reliably+0x17c>
 801295a:	4631      	mov	r1, r6
 801295c:	4630      	mov	r0, r6
 801295e:	f000 fc87 	bl	8013270 <uxr_stream_id_from_raw>
 8012962:	4602      	mov	r2, r0
 8012964:	a90c      	add	r1, sp, #48	; 0x30
 8012966:	4640      	mov	r0, r8
 8012968:	920a      	str	r2, [sp, #40]	; 0x28
 801296a:	f7ff fd97 	bl	801249c <read_submessage_list>
 801296e:	4620      	mov	r0, r4
 8012970:	b01d      	add	sp, #116	; 0x74
 8012972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012976:	4629      	mov	r1, r5
 8012978:	f108 0008 	add.w	r0, r8, #8
 801297c:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 8012980:	f000 fd64 	bl	801344c <uxr_get_input_reliable_stream>
 8012984:	4607      	mov	r7, r0
 8012986:	b338      	cbz	r0, 80129d8 <listen_message_reliably+0x228>
 8012988:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801298a:	a80c      	add	r0, sp, #48	; 0x30
 801298c:	9203      	str	r2, [sp, #12]
 801298e:	f7ff f8fb 	bl	8011b88 <ucdr_buffer_remaining>
 8012992:	4603      	mov	r3, r0
 8012994:	f10d 0019 	add.w	r0, sp, #25
 8012998:	9a03      	ldr	r2, [sp, #12]
 801299a:	4651      	mov	r1, sl
 801299c:	9000      	str	r0, [sp, #0]
 801299e:	4638      	mov	r0, r7
 80129a0:	f008 fb80 	bl	801b0a4 <uxr_receive_reliable_message>
 80129a4:	b1c0      	cbz	r0, 80129d8 <listen_message_reliably+0x228>
 80129a6:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80129aa:	b393      	cbz	r3, 8012a12 <listen_message_reliably+0x262>
 80129ac:	ae14      	add	r6, sp, #80	; 0x50
 80129ae:	f04f 0a02 	mov.w	sl, #2
 80129b2:	e00a      	b.n	80129ca <listen_message_reliably+0x21a>
 80129b4:	f88d 9028 	strb.w	r9, [sp, #40]	; 0x28
 80129b8:	4631      	mov	r1, r6
 80129ba:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 80129be:	4640      	mov	r0, r8
 80129c0:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 80129c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80129c6:	f7ff fd69 	bl	801249c <read_submessage_list>
 80129ca:	2204      	movs	r2, #4
 80129cc:	4631      	mov	r1, r6
 80129ce:	4638      	mov	r0, r7
 80129d0:	f008 fbea 	bl	801b1a8 <uxr_next_input_reliable_buffer_available>
 80129d4:	2800      	cmp	r0, #0
 80129d6:	d1ed      	bne.n	80129b4 <listen_message_reliably+0x204>
 80129d8:	4640      	mov	r0, r8
 80129da:	462a      	mov	r2, r5
 80129dc:	4649      	mov	r1, r9
 80129de:	f7ff fbd9 	bl	8012194 <write_submessage_acknack.isra.0>
 80129e2:	4620      	mov	r0, r4
 80129e4:	b01d      	add	sp, #116	; 0x74
 80129e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129ea:	4629      	mov	r1, r5
 80129ec:	f108 0008 	add.w	r0, r8, #8
 80129f0:	f000 fd22 	bl	8013438 <uxr_get_input_best_effort_stream>
 80129f4:	2800      	cmp	r0, #0
 80129f6:	d099      	beq.n	801292c <listen_message_reliably+0x17c>
 80129f8:	4651      	mov	r1, sl
 80129fa:	f008 fac9 	bl	801af90 <uxr_receive_best_effort_message>
 80129fe:	2800      	cmp	r0, #0
 8012a00:	d094      	beq.n	801292c <listen_message_reliably+0x17c>
 8012a02:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 8012a06:	a90c      	add	r1, sp, #48	; 0x30
 8012a08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012a0a:	4640      	mov	r0, r8
 8012a0c:	f7ff fd46 	bl	801249c <read_submessage_list>
 8012a10:	e78c      	b.n	801292c <listen_message_reliably+0x17c>
 8012a12:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 8012a16:	a90c      	add	r1, sp, #48	; 0x30
 8012a18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012a1a:	4640      	mov	r0, r8
 8012a1c:	f7ff fd3e 	bl	801249c <read_submessage_list>
 8012a20:	e7c4      	b.n	80129ac <listen_message_reliably+0x1fc>
 8012a22:	bf00      	nop

08012a24 <uxr_run_session_timeout>:
 8012a24:	b570      	push	{r4, r5, r6, lr}
 8012a26:	4604      	mov	r4, r0
 8012a28:	460d      	mov	r5, r1
 8012a2a:	f000 fd77 	bl	801351c <uxr_millis>
 8012a2e:	4606      	mov	r6, r0
 8012a30:	4620      	mov	r0, r4
 8012a32:	f7ff fc77 	bl	8012324 <uxr_flash_output_streams>
 8012a36:	4629      	mov	r1, r5
 8012a38:	4620      	mov	r0, r4
 8012a3a:	f7ff feb9 	bl	80127b0 <listen_message_reliably>
 8012a3e:	f000 fd6d 	bl	801351c <uxr_millis>
 8012a42:	1b83      	subs	r3, r0, r6
 8012a44:	1ae9      	subs	r1, r5, r3
 8012a46:	2900      	cmp	r1, #0
 8012a48:	dcf6      	bgt.n	8012a38 <uxr_run_session_timeout+0x14>
 8012a4a:	f104 0008 	add.w	r0, r4, #8
 8012a4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012a52:	f000 bd07 	b.w	8013464 <uxr_output_streams_confirmed>
 8012a56:	bf00      	nop

08012a58 <uxr_run_session_until_data>:
 8012a58:	b570      	push	{r4, r5, r6, lr}
 8012a5a:	4604      	mov	r4, r0
 8012a5c:	460d      	mov	r5, r1
 8012a5e:	f000 fd5d 	bl	801351c <uxr_millis>
 8012a62:	4606      	mov	r6, r0
 8012a64:	4620      	mov	r0, r4
 8012a66:	f7ff fc5d 	bl	8012324 <uxr_flash_output_streams>
 8012a6a:	2300      	movs	r3, #0
 8012a6c:	4629      	mov	r1, r5
 8012a6e:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 8012a72:	e005      	b.n	8012a80 <uxr_run_session_until_data+0x28>
 8012a74:	f000 fd52 	bl	801351c <uxr_millis>
 8012a78:	1b83      	subs	r3, r0, r6
 8012a7a:	1ae9      	subs	r1, r5, r3
 8012a7c:	2900      	cmp	r1, #0
 8012a7e:	dd07      	ble.n	8012a90 <uxr_run_session_until_data+0x38>
 8012a80:	4620      	mov	r0, r4
 8012a82:	f7ff fe95 	bl	80127b0 <listen_message_reliably>
 8012a86:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 8012a8a:	2800      	cmp	r0, #0
 8012a8c:	d0f2      	beq.n	8012a74 <uxr_run_session_until_data+0x1c>
 8012a8e:	bd70      	pop	{r4, r5, r6, pc}
 8012a90:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 8012a94:	bd70      	pop	{r4, r5, r6, pc}
 8012a96:	bf00      	nop

08012a98 <uxr_run_session_until_confirm_delivery>:
 8012a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a9c:	4606      	mov	r6, r0
 8012a9e:	460d      	mov	r5, r1
 8012aa0:	f000 fd3c 	bl	801351c <uxr_millis>
 8012aa4:	4607      	mov	r7, r0
 8012aa6:	4630      	mov	r0, r6
 8012aa8:	f106 0808 	add.w	r8, r6, #8
 8012aac:	f7ff fc3a 	bl	8012324 <uxr_flash_output_streams>
 8012ab0:	2d00      	cmp	r5, #0
 8012ab2:	db10      	blt.n	8012ad6 <uxr_run_session_until_confirm_delivery+0x3e>
 8012ab4:	462c      	mov	r4, r5
 8012ab6:	e006      	b.n	8012ac6 <uxr_run_session_until_confirm_delivery+0x2e>
 8012ab8:	f7ff fe7a 	bl	80127b0 <listen_message_reliably>
 8012abc:	f000 fd2e 	bl	801351c <uxr_millis>
 8012ac0:	1bc3      	subs	r3, r0, r7
 8012ac2:	1aec      	subs	r4, r5, r3
 8012ac4:	d407      	bmi.n	8012ad6 <uxr_run_session_until_confirm_delivery+0x3e>
 8012ac6:	4640      	mov	r0, r8
 8012ac8:	f000 fccc 	bl	8013464 <uxr_output_streams_confirmed>
 8012acc:	4603      	mov	r3, r0
 8012ace:	4621      	mov	r1, r4
 8012ad0:	4630      	mov	r0, r6
 8012ad2:	2b00      	cmp	r3, #0
 8012ad4:	d0f0      	beq.n	8012ab8 <uxr_run_session_until_confirm_delivery+0x20>
 8012ad6:	4640      	mov	r0, r8
 8012ad8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012adc:	f000 bcc2 	b.w	8013464 <uxr_output_streams_confirmed>

08012ae0 <uxr_run_session_until_all_status>:
 8012ae0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ae4:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8012ae8:	4606      	mov	r6, r0
 8012aea:	4688      	mov	r8, r1
 8012aec:	4692      	mov	sl, r2
 8012aee:	461f      	mov	r7, r3
 8012af0:	f7ff fc18 	bl	8012324 <uxr_flash_output_streams>
 8012af4:	f1bb 0f00 	cmp.w	fp, #0
 8012af8:	d004      	beq.n	8012b04 <uxr_run_session_until_all_status+0x24>
 8012afa:	465a      	mov	r2, fp
 8012afc:	21ff      	movs	r1, #255	; 0xff
 8012afe:	4638      	mov	r0, r7
 8012b00:	f00b f848 	bl	801db94 <memset>
 8012b04:	f8c6 b07c 	str.w	fp, [r6, #124]	; 0x7c
 8012b08:	1e7d      	subs	r5, r7, #1
 8012b0a:	e9c6 a71d 	strd	sl, r7, [r6, #116]	; 0x74
 8012b0e:	f000 fd05 	bl	801351c <uxr_millis>
 8012b12:	4641      	mov	r1, r8
 8012b14:	4681      	mov	r9, r0
 8012b16:	4630      	mov	r0, r6
 8012b18:	f7ff fe4a 	bl	80127b0 <listen_message_reliably>
 8012b1c:	f000 fcfe 	bl	801351c <uxr_millis>
 8012b20:	eba0 0009 	sub.w	r0, r0, r9
 8012b24:	eba8 0100 	sub.w	r1, r8, r0
 8012b28:	f1bb 0f00 	cmp.w	fp, #0
 8012b2c:	d029      	beq.n	8012b82 <uxr_run_session_until_all_status+0xa2>
 8012b2e:	46ae      	mov	lr, r5
 8012b30:	f04f 0c00 	mov.w	ip, #0
 8012b34:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 8012b38:	2cff      	cmp	r4, #255	; 0xff
 8012b3a:	d015      	beq.n	8012b68 <uxr_run_session_until_all_status+0x88>
 8012b3c:	f10c 0c01 	add.w	ip, ip, #1
 8012b40:	45e3      	cmp	fp, ip
 8012b42:	d8f7      	bhi.n	8012b34 <uxr_run_session_until_all_status+0x54>
 8012b44:	2300      	movs	r3, #0
 8012b46:	67f3      	str	r3, [r6, #124]	; 0x7c
 8012b48:	e000      	b.n	8012b4c <uxr_run_session_until_all_status+0x6c>
 8012b4a:	b158      	cbz	r0, 8012b64 <uxr_run_session_until_all_status+0x84>
 8012b4c:	462b      	mov	r3, r5
 8012b4e:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8012b52:	3302      	adds	r3, #2
 8012b54:	2801      	cmp	r0, #1
 8012b56:	eba3 0307 	sub.w	r3, r3, r7
 8012b5a:	bf8c      	ite	hi
 8012b5c:	2000      	movhi	r0, #0
 8012b5e:	2001      	movls	r0, #1
 8012b60:	459b      	cmp	fp, r3
 8012b62:	d8f2      	bhi.n	8012b4a <uxr_run_session_until_all_status+0x6a>
 8012b64:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b68:	f83a 301c 	ldrh.w	r3, [sl, ip, lsl #1]
 8012b6c:	f10c 0c01 	add.w	ip, ip, #1
 8012b70:	45dc      	cmp	ip, fp
 8012b72:	d201      	bcs.n	8012b78 <uxr_run_session_until_all_status+0x98>
 8012b74:	2b00      	cmp	r3, #0
 8012b76:	d0dd      	beq.n	8012b34 <uxr_run_session_until_all_status+0x54>
 8012b78:	2900      	cmp	r1, #0
 8012b7a:	dde3      	ble.n	8012b44 <uxr_run_session_until_all_status+0x64>
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d1ca      	bne.n	8012b16 <uxr_run_session_until_all_status+0x36>
 8012b80:	e7e0      	b.n	8012b44 <uxr_run_session_until_all_status+0x64>
 8012b82:	2001      	movs	r0, #1
 8012b84:	f8c6 b07c 	str.w	fp, [r6, #124]	; 0x7c
 8012b88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012b8c <wait_session_status>:
 8012b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b90:	4604      	mov	r4, r0
 8012b92:	b09d      	sub	sp, #116	; 0x74
 8012b94:	20ff      	movs	r0, #255	; 0xff
 8012b96:	9303      	str	r3, [sp, #12]
 8012b98:	7160      	strb	r0, [r4, #5]
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	f000 80b6 	beq.w	8012d0c <wait_session_status+0x180>
 8012ba0:	4689      	mov	r9, r1
 8012ba2:	4692      	mov	sl, r2
 8012ba4:	f04f 0b00 	mov.w	fp, #0
 8012ba8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8012baa:	4652      	mov	r2, sl
 8012bac:	4649      	mov	r1, r9
 8012bae:	e9d3 0500 	ldrd	r0, r5, [r3]
 8012bb2:	47a8      	blx	r5
 8012bb4:	f000 fcb2 	bl	801351c <uxr_millis>
 8012bb8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012bbc:	4605      	mov	r5, r0
 8012bbe:	e009      	b.n	8012bd4 <wait_session_status+0x48>
 8012bc0:	f000 fcac 	bl	801351c <uxr_millis>
 8012bc4:	1b40      	subs	r0, r0, r5
 8012bc6:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	dd40      	ble.n	8012c50 <wait_session_status+0xc4>
 8012bce:	7960      	ldrb	r0, [r4, #5]
 8012bd0:	28ff      	cmp	r0, #255	; 0xff
 8012bd2:	d145      	bne.n	8012c60 <wait_session_status+0xd4>
 8012bd4:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8012bd6:	a908      	add	r1, sp, #32
 8012bd8:	6896      	ldr	r6, [r2, #8]
 8012bda:	6810      	ldr	r0, [r2, #0]
 8012bdc:	aa09      	add	r2, sp, #36	; 0x24
 8012bde:	47b0      	blx	r6
 8012be0:	2800      	cmp	r0, #0
 8012be2:	d0ed      	beq.n	8012bc0 <wait_session_status+0x34>
 8012be4:	a80c      	add	r0, sp, #48	; 0x30
 8012be6:	2600      	movs	r6, #0
 8012be8:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8012bec:	f7fe ff9a 	bl	8011b24 <ucdr_init_buffer>
 8012bf0:	f10d 031e 	add.w	r3, sp, #30
 8012bf4:	aa07      	add	r2, sp, #28
 8012bf6:	a90c      	add	r1, sp, #48	; 0x30
 8012bf8:	4620      	mov	r0, r4
 8012bfa:	f88d 601c 	strb.w	r6, [sp, #28]
 8012bfe:	f000 fa8f 	bl	8013120 <uxr_read_session_header>
 8012c02:	2800      	cmp	r0, #0
 8012c04:	d0dc      	beq.n	8012bc0 <wait_session_status+0x34>
 8012c06:	4631      	mov	r1, r6
 8012c08:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8012c0c:	f000 fb30 	bl	8013270 <uxr_stream_id_from_raw>
 8012c10:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8012c14:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8012c18:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8012c1c:	2f01      	cmp	r7, #1
 8012c1e:	9302      	str	r3, [sp, #8]
 8012c20:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 8012c24:	d05c      	beq.n	8012ce0 <wait_session_status+0x154>
 8012c26:	2f02      	cmp	r7, #2
 8012c28:	d020      	beq.n	8012c6c <wait_session_status+0xe0>
 8012c2a:	2f00      	cmp	r7, #0
 8012c2c:	d1c8      	bne.n	8012bc0 <wait_session_status+0x34>
 8012c2e:	4639      	mov	r1, r7
 8012c30:	4638      	mov	r0, r7
 8012c32:	f000 fb1d 	bl	8013270 <uxr_stream_id_from_raw>
 8012c36:	a90c      	add	r1, sp, #48	; 0x30
 8012c38:	4602      	mov	r2, r0
 8012c3a:	900b      	str	r0, [sp, #44]	; 0x2c
 8012c3c:	4620      	mov	r0, r4
 8012c3e:	f7ff fc2d 	bl	801249c <read_submessage_list>
 8012c42:	f000 fc6b 	bl	801351c <uxr_millis>
 8012c46:	1b40      	subs	r0, r0, r5
 8012c48:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8012c4c:	2b00      	cmp	r3, #0
 8012c4e:	dcbe      	bgt.n	8012bce <wait_session_status+0x42>
 8012c50:	f10b 0b01 	add.w	fp, fp, #1
 8012c54:	9b03      	ldr	r3, [sp, #12]
 8012c56:	7960      	ldrb	r0, [r4, #5]
 8012c58:	455b      	cmp	r3, fp
 8012c5a:	d001      	beq.n	8012c60 <wait_session_status+0xd4>
 8012c5c:	28ff      	cmp	r0, #255	; 0xff
 8012c5e:	d0a3      	beq.n	8012ba8 <wait_session_status+0x1c>
 8012c60:	38ff      	subs	r0, #255	; 0xff
 8012c62:	bf18      	it	ne
 8012c64:	2001      	movne	r0, #1
 8012c66:	b01d      	add	sp, #116	; 0x74
 8012c68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c6c:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8012c70:	4631      	mov	r1, r6
 8012c72:	f104 0008 	add.w	r0, r4, #8
 8012c76:	9304      	str	r3, [sp, #16]
 8012c78:	f000 fbe8 	bl	801344c <uxr_get_input_reliable_stream>
 8012c7c:	4680      	mov	r8, r0
 8012c7e:	b348      	cbz	r0, 8012cd4 <wait_session_status+0x148>
 8012c80:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012c82:	a80c      	add	r0, sp, #48	; 0x30
 8012c84:	9205      	str	r2, [sp, #20]
 8012c86:	f7fe ff7f 	bl	8011b88 <ucdr_buffer_remaining>
 8012c8a:	4603      	mov	r3, r0
 8012c8c:	f10d 001d 	add.w	r0, sp, #29
 8012c90:	9a05      	ldr	r2, [sp, #20]
 8012c92:	9000      	str	r0, [sp, #0]
 8012c94:	4640      	mov	r0, r8
 8012c96:	9902      	ldr	r1, [sp, #8]
 8012c98:	f008 fa04 	bl	801b0a4 <uxr_receive_reliable_message>
 8012c9c:	b1d0      	cbz	r0, 8012cd4 <wait_session_status+0x148>
 8012c9e:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	d03a      	beq.n	8012d1c <wait_session_status+0x190>
 8012ca6:	9f04      	ldr	r7, [sp, #16]
 8012ca8:	e00a      	b.n	8012cc0 <wait_session_status+0x134>
 8012caa:	f04f 0302 	mov.w	r3, #2
 8012cae:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
 8012cb2:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 8012cb6:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 8012cba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012cbc:	f7ff fbee 	bl	801249c <read_submessage_list>
 8012cc0:	a914      	add	r1, sp, #80	; 0x50
 8012cc2:	2204      	movs	r2, #4
 8012cc4:	4640      	mov	r0, r8
 8012cc6:	f008 fa6f 	bl	801b1a8 <uxr_next_input_reliable_buffer_available>
 8012cca:	4603      	mov	r3, r0
 8012ccc:	a914      	add	r1, sp, #80	; 0x50
 8012cce:	4620      	mov	r0, r4
 8012cd0:	2b00      	cmp	r3, #0
 8012cd2:	d1ea      	bne.n	8012caa <wait_session_status+0x11e>
 8012cd4:	4632      	mov	r2, r6
 8012cd6:	9904      	ldr	r1, [sp, #16]
 8012cd8:	4620      	mov	r0, r4
 8012cda:	f7ff fa5b 	bl	8012194 <write_submessage_acknack.isra.0>
 8012cde:	e76f      	b.n	8012bc0 <wait_session_status+0x34>
 8012ce0:	4631      	mov	r1, r6
 8012ce2:	f104 0008 	add.w	r0, r4, #8
 8012ce6:	f000 fba7 	bl	8013438 <uxr_get_input_best_effort_stream>
 8012cea:	2800      	cmp	r0, #0
 8012cec:	f43f af68 	beq.w	8012bc0 <wait_session_status+0x34>
 8012cf0:	9902      	ldr	r1, [sp, #8]
 8012cf2:	f008 f94d 	bl	801af90 <uxr_receive_best_effort_message>
 8012cf6:	2800      	cmp	r0, #0
 8012cf8:	f43f af62 	beq.w	8012bc0 <wait_session_status+0x34>
 8012cfc:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 8012d00:	a90c      	add	r1, sp, #48	; 0x30
 8012d02:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012d04:	4620      	mov	r0, r4
 8012d06:	f7ff fbc9 	bl	801249c <read_submessage_list>
 8012d0a:	e759      	b.n	8012bc0 <wait_session_status+0x34>
 8012d0c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8012d0e:	e9d3 0400 	ldrd	r0, r4, [r3]
 8012d12:	47a0      	blx	r4
 8012d14:	2001      	movs	r0, #1
 8012d16:	b01d      	add	sp, #116	; 0x74
 8012d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d1c:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 8012d20:	a90c      	add	r1, sp, #48	; 0x30
 8012d22:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012d24:	4620      	mov	r0, r4
 8012d26:	f7ff fbb9 	bl	801249c <read_submessage_list>
 8012d2a:	e7bc      	b.n	8012ca6 <wait_session_status+0x11a>

08012d2c <uxr_delete_session_retries>:
 8012d2c:	b530      	push	{r4, r5, lr}
 8012d2e:	b08f      	sub	sp, #60	; 0x3c
 8012d30:	4604      	mov	r4, r0
 8012d32:	460d      	mov	r5, r1
 8012d34:	f000 fa34 	bl	80131a0 <uxr_session_header_offset>
 8012d38:	2300      	movs	r3, #0
 8012d3a:	2210      	movs	r2, #16
 8012d3c:	a902      	add	r1, sp, #8
 8012d3e:	9000      	str	r0, [sp, #0]
 8012d40:	a806      	add	r0, sp, #24
 8012d42:	f7fe fedd 	bl	8011b00 <ucdr_init_buffer_origin_offset>
 8012d46:	a906      	add	r1, sp, #24
 8012d48:	4620      	mov	r0, r4
 8012d4a:	f000 f979 	bl	8013040 <uxr_buffer_delete_session>
 8012d4e:	2200      	movs	r2, #0
 8012d50:	9b06      	ldr	r3, [sp, #24]
 8012d52:	4620      	mov	r0, r4
 8012d54:	4611      	mov	r1, r2
 8012d56:	f000 f9cf 	bl	80130f8 <uxr_stamp_session_header>
 8012d5a:	a806      	add	r0, sp, #24
 8012d5c:	f7fe ff10 	bl	8011b80 <ucdr_buffer_length>
 8012d60:	462b      	mov	r3, r5
 8012d62:	4602      	mov	r2, r0
 8012d64:	a902      	add	r1, sp, #8
 8012d66:	4620      	mov	r0, r4
 8012d68:	f7ff ff10 	bl	8012b8c <wait_session_status>
 8012d6c:	b118      	cbz	r0, 8012d76 <uxr_delete_session_retries+0x4a>
 8012d6e:	7960      	ldrb	r0, [r4, #5]
 8012d70:	fab0 f080 	clz	r0, r0
 8012d74:	0940      	lsrs	r0, r0, #5
 8012d76:	b00f      	add	sp, #60	; 0x3c
 8012d78:	bd30      	pop	{r4, r5, pc}
 8012d7a:	bf00      	nop

08012d7c <uxr_create_session>:
 8012d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d80:	f100 0b08 	add.w	fp, r0, #8
 8012d84:	4604      	mov	r4, r0
 8012d86:	b0ab      	sub	sp, #172	; 0xac
 8012d88:	4658      	mov	r0, fp
 8012d8a:	465e      	mov	r6, fp
 8012d8c:	f000 faa6 	bl	80132dc <uxr_reset_stream_storage>
 8012d90:	4620      	mov	r0, r4
 8012d92:	f000 fa05 	bl	80131a0 <uxr_session_header_offset>
 8012d96:	2300      	movs	r3, #0
 8012d98:	221c      	movs	r2, #28
 8012d9a:	a90b      	add	r1, sp, #44	; 0x2c
 8012d9c:	9000      	str	r0, [sp, #0]
 8012d9e:	a812      	add	r0, sp, #72	; 0x48
 8012da0:	f7fe feae 	bl	8011b00 <ucdr_init_buffer_origin_offset>
 8012da4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8012da6:	a912      	add	r1, sp, #72	; 0x48
 8012da8:	4620      	mov	r0, r4
 8012daa:	8a1a      	ldrh	r2, [r3, #16]
 8012dac:	3a04      	subs	r2, #4
 8012dae:	b292      	uxth	r2, r2
 8012db0:	f000 f91c 	bl	8012fec <uxr_buffer_create_session>
 8012db4:	9912      	ldr	r1, [sp, #72]	; 0x48
 8012db6:	4620      	mov	r0, r4
 8012db8:	f000 f98a 	bl	80130d0 <uxr_stamp_create_session_header>
 8012dbc:	a812      	add	r0, sp, #72	; 0x48
 8012dbe:	f7fe fedf 	bl	8011b80 <ucdr_buffer_length>
 8012dc2:	23ff      	movs	r3, #255	; 0xff
 8012dc4:	4681      	mov	r9, r0
 8012dc6:	7163      	strb	r3, [r4, #5]
 8012dc8:	230a      	movs	r3, #10
 8012dca:	9303      	str	r3, [sp, #12]
 8012dcc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8012dce:	464a      	mov	r2, r9
 8012dd0:	a90b      	add	r1, sp, #44	; 0x2c
 8012dd2:	e9d3 0500 	ldrd	r0, r5, [r3]
 8012dd6:	47a8      	blx	r5
 8012dd8:	f000 fba0 	bl	801351c <uxr_millis>
 8012ddc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012de0:	4605      	mov	r5, r0
 8012de2:	e009      	b.n	8012df8 <uxr_create_session+0x7c>
 8012de4:	f000 fb9a 	bl	801351c <uxr_millis>
 8012de8:	1b40      	subs	r0, r0, r5
 8012dea:	7962      	ldrb	r2, [r4, #5]
 8012dec:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	dd38      	ble.n	8012e66 <uxr_create_session+0xea>
 8012df4:	2aff      	cmp	r2, #255	; 0xff
 8012df6:	d13c      	bne.n	8012e72 <uxr_create_session+0xf6>
 8012df8:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8012dfa:	a907      	add	r1, sp, #28
 8012dfc:	6897      	ldr	r7, [r2, #8]
 8012dfe:	6810      	ldr	r0, [r2, #0]
 8012e00:	aa08      	add	r2, sp, #32
 8012e02:	47b8      	blx	r7
 8012e04:	2800      	cmp	r0, #0
 8012e06:	d0ed      	beq.n	8012de4 <uxr_create_session+0x68>
 8012e08:	a81a      	add	r0, sp, #104	; 0x68
 8012e0a:	2700      	movs	r7, #0
 8012e0c:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8012e10:	f7fe fe88 	bl	8011b24 <ucdr_init_buffer>
 8012e14:	f10d 031a 	add.w	r3, sp, #26
 8012e18:	aa06      	add	r2, sp, #24
 8012e1a:	a91a      	add	r1, sp, #104	; 0x68
 8012e1c:	4620      	mov	r0, r4
 8012e1e:	f88d 7018 	strb.w	r7, [sp, #24]
 8012e22:	f000 f97d 	bl	8013120 <uxr_read_session_header>
 8012e26:	2800      	cmp	r0, #0
 8012e28:	d0dc      	beq.n	8012de4 <uxr_create_session+0x68>
 8012e2a:	4639      	mov	r1, r7
 8012e2c:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8012e30:	f000 fa1e 	bl	8013270 <uxr_stream_id_from_raw>
 8012e34:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8012e38:	f8bd b01a 	ldrh.w	fp, [sp, #26]
 8012e3c:	f3c0 2807 	ubfx	r8, r0, #8, #8
 8012e40:	2f01      	cmp	r7, #1
 8012e42:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 8012e46:	d053      	beq.n	8012ef0 <uxr_create_session+0x174>
 8012e48:	2f02      	cmp	r7, #2
 8012e4a:	d018      	beq.n	8012e7e <uxr_create_session+0x102>
 8012e4c:	2f00      	cmp	r7, #0
 8012e4e:	d1c9      	bne.n	8012de4 <uxr_create_session+0x68>
 8012e50:	4639      	mov	r1, r7
 8012e52:	4638      	mov	r0, r7
 8012e54:	f000 fa0c 	bl	8013270 <uxr_stream_id_from_raw>
 8012e58:	a91a      	add	r1, sp, #104	; 0x68
 8012e5a:	4602      	mov	r2, r0
 8012e5c:	900a      	str	r0, [sp, #40]	; 0x28
 8012e5e:	4620      	mov	r0, r4
 8012e60:	f7ff fb1c 	bl	801249c <read_submessage_list>
 8012e64:	e7be      	b.n	8012de4 <uxr_create_session+0x68>
 8012e66:	9b03      	ldr	r3, [sp, #12]
 8012e68:	3b01      	subs	r3, #1
 8012e6a:	9303      	str	r3, [sp, #12]
 8012e6c:	d001      	beq.n	8012e72 <uxr_create_session+0xf6>
 8012e6e:	2aff      	cmp	r2, #255	; 0xff
 8012e70:	d0ac      	beq.n	8012dcc <uxr_create_session+0x50>
 8012e72:	2a00      	cmp	r2, #0
 8012e74:	d051      	beq.n	8012f1a <uxr_create_session+0x19e>
 8012e76:	2000      	movs	r0, #0
 8012e78:	b02b      	add	sp, #172	; 0xac
 8012e7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e7e:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8012e82:	4641      	mov	r1, r8
 8012e84:	4630      	mov	r0, r6
 8012e86:	9304      	str	r3, [sp, #16]
 8012e88:	f000 fae0 	bl	801344c <uxr_get_input_reliable_stream>
 8012e8c:	4682      	mov	sl, r0
 8012e8e:	b348      	cbz	r0, 8012ee4 <uxr_create_session+0x168>
 8012e90:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8012e92:	a81a      	add	r0, sp, #104	; 0x68
 8012e94:	9205      	str	r2, [sp, #20]
 8012e96:	f7fe fe77 	bl	8011b88 <ucdr_buffer_remaining>
 8012e9a:	4603      	mov	r3, r0
 8012e9c:	f10d 0019 	add.w	r0, sp, #25
 8012ea0:	9a05      	ldr	r2, [sp, #20]
 8012ea2:	4659      	mov	r1, fp
 8012ea4:	9000      	str	r0, [sp, #0]
 8012ea6:	4650      	mov	r0, sl
 8012ea8:	f008 f8fc 	bl	801b0a4 <uxr_receive_reliable_message>
 8012eac:	b1d0      	cbz	r0, 8012ee4 <uxr_create_session+0x168>
 8012eae:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8012eb2:	2b00      	cmp	r3, #0
 8012eb4:	d038      	beq.n	8012f28 <uxr_create_session+0x1ac>
 8012eb6:	9f04      	ldr	r7, [sp, #16]
 8012eb8:	e00a      	b.n	8012ed0 <uxr_create_session+0x154>
 8012eba:	f04f 0302 	mov.w	r3, #2
 8012ebe:	f88d 7028 	strb.w	r7, [sp, #40]	; 0x28
 8012ec2:	f88d 8029 	strb.w	r8, [sp, #41]	; 0x29
 8012ec6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012eca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012ecc:	f7ff fae6 	bl	801249c <read_submessage_list>
 8012ed0:	a922      	add	r1, sp, #136	; 0x88
 8012ed2:	2204      	movs	r2, #4
 8012ed4:	4650      	mov	r0, sl
 8012ed6:	f008 f967 	bl	801b1a8 <uxr_next_input_reliable_buffer_available>
 8012eda:	4603      	mov	r3, r0
 8012edc:	a922      	add	r1, sp, #136	; 0x88
 8012ede:	4620      	mov	r0, r4
 8012ee0:	2b00      	cmp	r3, #0
 8012ee2:	d1ea      	bne.n	8012eba <uxr_create_session+0x13e>
 8012ee4:	4642      	mov	r2, r8
 8012ee6:	9904      	ldr	r1, [sp, #16]
 8012ee8:	4620      	mov	r0, r4
 8012eea:	f7ff f953 	bl	8012194 <write_submessage_acknack.isra.0>
 8012eee:	e779      	b.n	8012de4 <uxr_create_session+0x68>
 8012ef0:	4641      	mov	r1, r8
 8012ef2:	4630      	mov	r0, r6
 8012ef4:	f000 faa0 	bl	8013438 <uxr_get_input_best_effort_stream>
 8012ef8:	2800      	cmp	r0, #0
 8012efa:	f43f af73 	beq.w	8012de4 <uxr_create_session+0x68>
 8012efe:	4659      	mov	r1, fp
 8012f00:	f008 f846 	bl	801af90 <uxr_receive_best_effort_message>
 8012f04:	2800      	cmp	r0, #0
 8012f06:	f43f af6d 	beq.w	8012de4 <uxr_create_session+0x68>
 8012f0a:	f88d 702a 	strb.w	r7, [sp, #42]	; 0x2a
 8012f0e:	a91a      	add	r1, sp, #104	; 0x68
 8012f10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012f12:	4620      	mov	r0, r4
 8012f14:	f7ff fac2 	bl	801249c <read_submessage_list>
 8012f18:	e764      	b.n	8012de4 <uxr_create_session+0x68>
 8012f1a:	4630      	mov	r0, r6
 8012f1c:	f000 f9de 	bl	80132dc <uxr_reset_stream_storage>
 8012f20:	2001      	movs	r0, #1
 8012f22:	b02b      	add	sp, #172	; 0xac
 8012f24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f28:	f88d 702a 	strb.w	r7, [sp, #42]	; 0x2a
 8012f2c:	a91a      	add	r1, sp, #104	; 0x68
 8012f2e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012f30:	4620      	mov	r0, r4
 8012f32:	f7ff fab3 	bl	801249c <read_submessage_list>
 8012f36:	e7be      	b.n	8012eb6 <uxr_create_session+0x13a>

08012f38 <uxr_prepare_stream_to_write_submessage>:
 8012f38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012f3c:	b082      	sub	sp, #8
 8012f3e:	4604      	mov	r4, r0
 8012f40:	4610      	mov	r0, r2
 8012f42:	4615      	mov	r5, r2
 8012f44:	461e      	mov	r6, r3
 8012f46:	f3c1 2a07 	ubfx	sl, r1, #8, #8
 8012f4a:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 8012f4e:	f105 0904 	add.w	r9, r5, #4
 8012f52:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 8012f56:	9101      	str	r1, [sp, #4]
 8012f58:	f000 fada 	bl	8013510 <uxr_submessage_padding>
 8012f5c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012f60:	4481      	add	r9, r0
 8012f62:	2b01      	cmp	r3, #1
 8012f64:	d01d      	beq.n	8012fa2 <uxr_prepare_stream_to_write_submessage+0x6a>
 8012f66:	2b02      	cmp	r3, #2
 8012f68:	d116      	bne.n	8012f98 <uxr_prepare_stream_to_write_submessage+0x60>
 8012f6a:	f104 0008 	add.w	r0, r4, #8
 8012f6e:	4651      	mov	r1, sl
 8012f70:	f000 fa56 	bl	8013420 <uxr_get_output_reliable_stream>
 8012f74:	4604      	mov	r4, r0
 8012f76:	b158      	cbz	r0, 8012f90 <uxr_prepare_stream_to_write_submessage+0x58>
 8012f78:	4649      	mov	r1, r9
 8012f7a:	4632      	mov	r2, r6
 8012f7c:	f008 fada 	bl	801b534 <uxr_prepare_reliable_buffer_to_write>
 8012f80:	4604      	mov	r4, r0
 8012f82:	b12c      	cbz	r4, 8012f90 <uxr_prepare_stream_to_write_submessage+0x58>
 8012f84:	4643      	mov	r3, r8
 8012f86:	b2aa      	uxth	r2, r5
 8012f88:	4639      	mov	r1, r7
 8012f8a:	4630      	mov	r0, r6
 8012f8c:	f000 fa80 	bl	8013490 <uxr_buffer_submessage_header>
 8012f90:	4620      	mov	r0, r4
 8012f92:	b002      	add	sp, #8
 8012f94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f98:	2400      	movs	r4, #0
 8012f9a:	4620      	mov	r0, r4
 8012f9c:	b002      	add	sp, #8
 8012f9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012fa2:	f104 0008 	add.w	r0, r4, #8
 8012fa6:	4651      	mov	r1, sl
 8012fa8:	f000 fa32 	bl	8013410 <uxr_get_output_best_effort_stream>
 8012fac:	4604      	mov	r4, r0
 8012fae:	2800      	cmp	r0, #0
 8012fb0:	d0ee      	beq.n	8012f90 <uxr_prepare_stream_to_write_submessage+0x58>
 8012fb2:	4649      	mov	r1, r9
 8012fb4:	4632      	mov	r2, r6
 8012fb6:	f008 f9e7 	bl	801b388 <uxr_prepare_best_effort_buffer_to_write>
 8012fba:	4604      	mov	r4, r0
 8012fbc:	e7e1      	b.n	8012f82 <uxr_prepare_stream_to_write_submessage+0x4a>
 8012fbe:	bf00      	nop

08012fc0 <uxr_init_session_info>:
 8012fc0:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8012fc4:	23ff      	movs	r3, #255	; 0xff
 8012fc6:	7102      	strb	r2, [r0, #4]
 8012fc8:	f880 c001 	strb.w	ip, [r0, #1]
 8012fcc:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8012fd0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8012fd4:	7001      	strb	r1, [r0, #0]
 8012fd6:	f880 c002 	strb.w	ip, [r0, #2]
 8012fda:	7143      	strb	r3, [r0, #5]
 8012fdc:	70c2      	strb	r2, [r0, #3]
 8012fde:	b500      	push	{lr}
 8012fe0:	f04f 0e09 	mov.w	lr, #9
 8012fe4:	f8a0 e006 	strh.w	lr, [r0, #6]
 8012fe8:	f85d fb04 	ldr.w	pc, [sp], #4

08012fec <uxr_buffer_create_session>:
 8012fec:	b530      	push	{r4, r5, lr}
 8012fee:	2300      	movs	r3, #0
 8012ff0:	b089      	sub	sp, #36	; 0x24
 8012ff2:	4d12      	ldr	r5, [pc, #72]	; (801303c <uxr_buffer_create_session+0x50>)
 8012ff4:	460c      	mov	r4, r1
 8012ff6:	9307      	str	r3, [sp, #28]
 8012ff8:	4619      	mov	r1, r3
 8012ffa:	f8ad 201c 	strh.w	r2, [sp, #28]
 8012ffe:	2201      	movs	r2, #1
 8013000:	9301      	str	r3, [sp, #4]
 8013002:	80c2      	strh	r2, [r0, #6]
 8013004:	f88d 2004 	strb.w	r2, [sp, #4]
 8013008:	682a      	ldr	r2, [r5, #0]
 801300a:	9303      	str	r3, [sp, #12]
 801300c:	9200      	str	r2, [sp, #0]
 801300e:	88aa      	ldrh	r2, [r5, #4]
 8013010:	9306      	str	r3, [sp, #24]
 8013012:	f8ad 2006 	strh.w	r2, [sp, #6]
 8013016:	f8d0 2001 	ldr.w	r2, [r0, #1]
 801301a:	9202      	str	r2, [sp, #8]
 801301c:	7802      	ldrb	r2, [r0, #0]
 801301e:	4620      	mov	r0, r4
 8013020:	f88d 200c 	strb.w	r2, [sp, #12]
 8013024:	2210      	movs	r2, #16
 8013026:	e9cd 3304 	strd	r3, r3, [sp, #16]
 801302a:	f000 fa31 	bl	8013490 <uxr_buffer_submessage_header>
 801302e:	4669      	mov	r1, sp
 8013030:	4620      	mov	r0, r4
 8013032:	f001 faa3 	bl	801457c <uxr_serialize_CREATE_CLIENT_Payload>
 8013036:	b009      	add	sp, #36	; 0x24
 8013038:	bd30      	pop	{r4, r5, pc}
 801303a:	bf00      	nop
 801303c:	0801ec38 	.word	0x0801ec38

08013040 <uxr_buffer_delete_session>:
 8013040:	4a0c      	ldr	r2, [pc, #48]	; (8013074 <uxr_buffer_delete_session+0x34>)
 8013042:	2302      	movs	r3, #2
 8013044:	f44f 7c00 	mov.w	ip, #512	; 0x200
 8013048:	b510      	push	{r4, lr}
 801304a:	460c      	mov	r4, r1
 801304c:	b082      	sub	sp, #8
 801304e:	8911      	ldrh	r1, [r2, #8]
 8013050:	2204      	movs	r2, #4
 8013052:	80c3      	strh	r3, [r0, #6]
 8013054:	2300      	movs	r3, #0
 8013056:	f8ad 1006 	strh.w	r1, [sp, #6]
 801305a:	4620      	mov	r0, r4
 801305c:	2103      	movs	r1, #3
 801305e:	f8ad c004 	strh.w	ip, [sp, #4]
 8013062:	f000 fa15 	bl	8013490 <uxr_buffer_submessage_header>
 8013066:	a901      	add	r1, sp, #4
 8013068:	4620      	mov	r0, r4
 801306a:	f001 fb2f 	bl	80146cc <uxr_serialize_DELETE_Payload>
 801306e:	b002      	add	sp, #8
 8013070:	bd10      	pop	{r4, pc}
 8013072:	bf00      	nop
 8013074:	0801ec38 	.word	0x0801ec38

08013078 <uxr_read_create_session_status>:
 8013078:	b510      	push	{r4, lr}
 801307a:	460b      	mov	r3, r1
 801307c:	b088      	sub	sp, #32
 801307e:	4604      	mov	r4, r0
 8013080:	a901      	add	r1, sp, #4
 8013082:	4618      	mov	r0, r3
 8013084:	f001 fb32 	bl	80146ec <uxr_deserialize_STATUS_AGENT_Payload>
 8013088:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801308c:	7163      	strb	r3, [r4, #5]
 801308e:	b008      	add	sp, #32
 8013090:	bd10      	pop	{r4, pc}
 8013092:	bf00      	nop

08013094 <uxr_read_delete_session_status>:
 8013094:	b510      	push	{r4, lr}
 8013096:	b084      	sub	sp, #16
 8013098:	4604      	mov	r4, r0
 801309a:	4608      	mov	r0, r1
 801309c:	a902      	add	r1, sp, #8
 801309e:	f001 fb55 	bl	801474c <uxr_deserialize_STATUS_Payload>
 80130a2:	88e3      	ldrh	r3, [r4, #6]
 80130a4:	2b02      	cmp	r3, #2
 80130a6:	d001      	beq.n	80130ac <uxr_read_delete_session_status+0x18>
 80130a8:	b004      	add	sp, #16
 80130aa:	bd10      	pop	{r4, pc}
 80130ac:	f10d 000a 	add.w	r0, sp, #10
 80130b0:	f7fe fff6 	bl	80120a0 <uxr_object_id_from_raw>
 80130b4:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80130b8:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80130bc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80130c0:	b29b      	uxth	r3, r3
 80130c2:	2b02      	cmp	r3, #2
 80130c4:	d1f0      	bne.n	80130a8 <uxr_read_delete_session_status+0x14>
 80130c6:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80130ca:	7163      	strb	r3, [r4, #5]
 80130cc:	e7ec      	b.n	80130a8 <uxr_read_delete_session_status+0x14>
 80130ce:	bf00      	nop

080130d0 <uxr_stamp_create_session_header>:
 80130d0:	b510      	push	{r4, lr}
 80130d2:	2208      	movs	r2, #8
 80130d4:	b08a      	sub	sp, #40	; 0x28
 80130d6:	4604      	mov	r4, r0
 80130d8:	eb0d 0002 	add.w	r0, sp, r2
 80130dc:	f7fe fd22 	bl	8011b24 <ucdr_init_buffer>
 80130e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80130e4:	2300      	movs	r3, #0
 80130e6:	a802      	add	r0, sp, #8
 80130e8:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80130ec:	9400      	str	r4, [sp, #0]
 80130ee:	461a      	mov	r2, r3
 80130f0:	f000 fbca 	bl	8013888 <uxr_serialize_message_header>
 80130f4:	b00a      	add	sp, #40	; 0x28
 80130f6:	bd10      	pop	{r4, pc}

080130f8 <uxr_stamp_session_header>:
 80130f8:	b530      	push	{r4, r5, lr}
 80130fa:	b08d      	sub	sp, #52	; 0x34
 80130fc:	4604      	mov	r4, r0
 80130fe:	460d      	mov	r5, r1
 8013100:	4619      	mov	r1, r3
 8013102:	a804      	add	r0, sp, #16
 8013104:	9203      	str	r2, [sp, #12]
 8013106:	2208      	movs	r2, #8
 8013108:	f7fe fd0c 	bl	8011b24 <ucdr_init_buffer>
 801310c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013110:	9b03      	ldr	r3, [sp, #12]
 8013112:	462a      	mov	r2, r5
 8013114:	a804      	add	r0, sp, #16
 8013116:	9400      	str	r4, [sp, #0]
 8013118:	f000 fbb6 	bl	8013888 <uxr_serialize_message_header>
 801311c:	b00d      	add	sp, #52	; 0x34
 801311e:	bd30      	pop	{r4, r5, pc}

08013120 <uxr_read_session_header>:
 8013120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013124:	4607      	mov	r7, r0
 8013126:	b084      	sub	sp, #16
 8013128:	4608      	mov	r0, r1
 801312a:	460c      	mov	r4, r1
 801312c:	4615      	mov	r5, r2
 801312e:	461e      	mov	r6, r3
 8013130:	f7fe fd2a 	bl	8011b88 <ucdr_buffer_remaining>
 8013134:	2808      	cmp	r0, #8
 8013136:	d803      	bhi.n	8013140 <uxr_read_session_header+0x20>
 8013138:	2000      	movs	r0, #0
 801313a:	b004      	add	sp, #16
 801313c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013140:	f10d 080c 	add.w	r8, sp, #12
 8013144:	4633      	mov	r3, r6
 8013146:	462a      	mov	r2, r5
 8013148:	4620      	mov	r0, r4
 801314a:	f10d 010b 	add.w	r1, sp, #11
 801314e:	f8cd 8000 	str.w	r8, [sp]
 8013152:	f000 fbb7 	bl	80138c4 <uxr_deserialize_message_header>
 8013156:	783a      	ldrb	r2, [r7, #0]
 8013158:	f89d 300b 	ldrb.w	r3, [sp, #11]
 801315c:	4293      	cmp	r3, r2
 801315e:	d1eb      	bne.n	8013138 <uxr_read_session_header+0x18>
 8013160:	061b      	lsls	r3, r3, #24
 8013162:	d41b      	bmi.n	801319c <uxr_read_session_header+0x7c>
 8013164:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8013168:	787b      	ldrb	r3, [r7, #1]
 801316a:	429a      	cmp	r2, r3
 801316c:	d003      	beq.n	8013176 <uxr_read_session_header+0x56>
 801316e:	2001      	movs	r0, #1
 8013170:	f080 0001 	eor.w	r0, r0, #1
 8013174:	e7e1      	b.n	801313a <uxr_read_session_header+0x1a>
 8013176:	f89d 200d 	ldrb.w	r2, [sp, #13]
 801317a:	1cb8      	adds	r0, r7, #2
 801317c:	78bb      	ldrb	r3, [r7, #2]
 801317e:	429a      	cmp	r2, r3
 8013180:	d1f5      	bne.n	801316e <uxr_read_session_header+0x4e>
 8013182:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8013186:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 801318a:	429a      	cmp	r2, r3
 801318c:	d1ef      	bne.n	801316e <uxr_read_session_header+0x4e>
 801318e:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8013192:	7843      	ldrb	r3, [r0, #1]
 8013194:	429a      	cmp	r2, r3
 8013196:	d1ea      	bne.n	801316e <uxr_read_session_header+0x4e>
 8013198:	2000      	movs	r0, #0
 801319a:	e7e9      	b.n	8013170 <uxr_read_session_header+0x50>
 801319c:	2001      	movs	r0, #1
 801319e:	e7cc      	b.n	801313a <uxr_read_session_header+0x1a>

080131a0 <uxr_session_header_offset>:
 80131a0:	f990 3000 	ldrsb.w	r3, [r0]
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	bfac      	ite	ge
 80131a8:	2008      	movge	r0, #8
 80131aa:	2004      	movlt	r0, #4
 80131ac:	4770      	bx	lr
 80131ae:	bf00      	nop

080131b0 <uxr_init_base_object_request>:
 80131b0:	b510      	push	{r4, lr}
 80131b2:	b082      	sub	sp, #8
 80131b4:	f64f 74f4 	movw	r4, #65524	; 0xfff4
 80131b8:	9101      	str	r1, [sp, #4]
 80131ba:	88c3      	ldrh	r3, [r0, #6]
 80131bc:	f1a3 010a 	sub.w	r1, r3, #10
 80131c0:	b289      	uxth	r1, r1
 80131c2:	42a1      	cmp	r1, r4
 80131c4:	d80f      	bhi.n	80131e6 <uxr_init_base_object_request+0x36>
 80131c6:	3301      	adds	r3, #1
 80131c8:	b29c      	uxth	r4, r3
 80131ca:	f3c3 2c07 	ubfx	ip, r3, #8, #8
 80131ce:	b2db      	uxtb	r3, r3
 80131d0:	80c4      	strh	r4, [r0, #6]
 80131d2:	1c91      	adds	r1, r2, #2
 80131d4:	9801      	ldr	r0, [sp, #4]
 80131d6:	f882 c000 	strb.w	ip, [r2]
 80131da:	7053      	strb	r3, [r2, #1]
 80131dc:	f7fe ff74 	bl	80120c8 <uxr_object_id_to_raw>
 80131e0:	4620      	mov	r0, r4
 80131e2:	b002      	add	sp, #8
 80131e4:	bd10      	pop	{r4, pc}
 80131e6:	230a      	movs	r3, #10
 80131e8:	f04f 0c00 	mov.w	ip, #0
 80131ec:	461c      	mov	r4, r3
 80131ee:	e7ef      	b.n	80131d0 <uxr_init_base_object_request+0x20>

080131f0 <uxr_parse_base_object_request>:
 80131f0:	b570      	push	{r4, r5, r6, lr}
 80131f2:	4604      	mov	r4, r0
 80131f4:	3002      	adds	r0, #2
 80131f6:	460d      	mov	r5, r1
 80131f8:	4616      	mov	r6, r2
 80131fa:	f7fe ff51 	bl	80120a0 <uxr_object_id_from_raw>
 80131fe:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8013202:	8028      	strh	r0, [r5, #0]
 8013204:	806b      	strh	r3, [r5, #2]
 8013206:	7822      	ldrb	r2, [r4, #0]
 8013208:	7863      	ldrb	r3, [r4, #1]
 801320a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801320e:	8033      	strh	r3, [r6, #0]
 8013210:	bd70      	pop	{r4, r5, r6, pc}
 8013212:	bf00      	nop

08013214 <uxr_stream_id>:
 8013214:	2901      	cmp	r1, #1
 8013216:	4684      	mov	ip, r0
 8013218:	b500      	push	{lr}
 801321a:	b083      	sub	sp, #12
 801321c:	d01f      	beq.n	801325e <uxr_stream_id+0x4a>
 801321e:	2902      	cmp	r1, #2
 8013220:	f04f 0e00 	mov.w	lr, #0
 8013224:	d020      	beq.n	8013268 <uxr_stream_id+0x54>
 8013226:	2300      	movs	r3, #0
 8013228:	2000      	movs	r0, #0
 801322a:	f36e 0307 	bfi	r3, lr, #0, #8
 801322e:	f36c 230f 	bfi	r3, ip, #8, #8
 8013232:	f361 4317 	bfi	r3, r1, #16, #8
 8013236:	f362 631f 	bfi	r3, r2, #24, #8
 801323a:	fa5f fc83 	uxtb.w	ip, r3
 801323e:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8013242:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8013246:	0e1b      	lsrs	r3, r3, #24
 8013248:	f36c 0007 	bfi	r0, ip, #0, #8
 801324c:	f361 200f 	bfi	r0, r1, #8, #8
 8013250:	f362 4017 	bfi	r0, r2, #16, #8
 8013254:	f363 601f 	bfi	r0, r3, #24, #8
 8013258:	b003      	add	sp, #12
 801325a:	f85d fb04 	ldr.w	pc, [sp], #4
 801325e:	f100 0e01 	add.w	lr, r0, #1
 8013262:	fa5f fe8e 	uxtb.w	lr, lr
 8013266:	e7de      	b.n	8013226 <uxr_stream_id+0x12>
 8013268:	f080 0e80 	eor.w	lr, r0, #128	; 0x80
 801326c:	e7db      	b.n	8013226 <uxr_stream_id+0x12>
 801326e:	bf00      	nop

08013270 <uxr_stream_id_from_raw>:
 8013270:	b082      	sub	sp, #8
 8013272:	b130      	cbz	r0, 8013282 <uxr_stream_id_from_raw+0x12>
 8013274:	0603      	lsls	r3, r0, #24
 8013276:	d421      	bmi.n	80132bc <uxr_stream_id_from_raw+0x4c>
 8013278:	1e42      	subs	r2, r0, #1
 801327a:	f04f 0c01 	mov.w	ip, #1
 801327e:	b2d2      	uxtb	r2, r2
 8013280:	e001      	b.n	8013286 <uxr_stream_id_from_raw+0x16>
 8013282:	4684      	mov	ip, r0
 8013284:	4602      	mov	r2, r0
 8013286:	2300      	movs	r3, #0
 8013288:	f360 0307 	bfi	r3, r0, #0, #8
 801328c:	2000      	movs	r0, #0
 801328e:	f362 230f 	bfi	r3, r2, #8, #8
 8013292:	f36c 4317 	bfi	r3, ip, #16, #8
 8013296:	f361 631f 	bfi	r3, r1, #24, #8
 801329a:	fa5f fc83 	uxtb.w	ip, r3
 801329e:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80132a2:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80132a6:	0e1b      	lsrs	r3, r3, #24
 80132a8:	f36c 0007 	bfi	r0, ip, #0, #8
 80132ac:	f361 200f 	bfi	r0, r1, #8, #8
 80132b0:	f362 4017 	bfi	r0, r2, #16, #8
 80132b4:	f363 601f 	bfi	r0, r3, #24, #8
 80132b8:	b002      	add	sp, #8
 80132ba:	4770      	bx	lr
 80132bc:	f080 0280 	eor.w	r2, r0, #128	; 0x80
 80132c0:	f04f 0c02 	mov.w	ip, #2
 80132c4:	e7df      	b.n	8013286 <uxr_stream_id_from_raw+0x16>
 80132c6:	bf00      	nop

080132c8 <uxr_init_stream_storage>:
 80132c8:	2300      	movs	r3, #0
 80132ca:	7403      	strb	r3, [r0, #16]
 80132cc:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 80132d0:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 80132d4:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 80132d8:	4770      	bx	lr
 80132da:	bf00      	nop

080132dc <uxr_reset_stream_storage>:
 80132dc:	b570      	push	{r4, r5, r6, lr}
 80132de:	7c03      	ldrb	r3, [r0, #16]
 80132e0:	4604      	mov	r4, r0
 80132e2:	b14b      	cbz	r3, 80132f8 <uxr_reset_stream_storage+0x1c>
 80132e4:	4606      	mov	r6, r0
 80132e6:	2500      	movs	r5, #0
 80132e8:	4630      	mov	r0, r6
 80132ea:	3501      	adds	r5, #1
 80132ec:	f008 f846 	bl	801b37c <uxr_reset_output_best_effort_stream>
 80132f0:	7c23      	ldrb	r3, [r4, #16]
 80132f2:	3610      	adds	r6, #16
 80132f4:	42ab      	cmp	r3, r5
 80132f6:	d8f7      	bhi.n	80132e8 <uxr_reset_stream_storage+0xc>
 80132f8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80132fc:	b15b      	cbz	r3, 8013316 <uxr_reset_stream_storage+0x3a>
 80132fe:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8013302:	2500      	movs	r5, #0
 8013304:	4630      	mov	r0, r6
 8013306:	3501      	adds	r5, #1
 8013308:	f007 fe3e 	bl	801af88 <uxr_reset_input_best_effort_stream>
 801330c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8013310:	3602      	adds	r6, #2
 8013312:	42ab      	cmp	r3, r5
 8013314:	d8f6      	bhi.n	8013304 <uxr_reset_stream_storage+0x28>
 8013316:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 801331a:	b15b      	cbz	r3, 8013334 <uxr_reset_stream_storage+0x58>
 801331c:	f104 0618 	add.w	r6, r4, #24
 8013320:	2500      	movs	r5, #0
 8013322:	4630      	mov	r0, r6
 8013324:	3501      	adds	r5, #1
 8013326:	f008 f8d7 	bl	801b4d8 <uxr_reset_output_reliable_stream>
 801332a:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 801332e:	3628      	adds	r6, #40	; 0x28
 8013330:	42ab      	cmp	r3, r5
 8013332:	d8f6      	bhi.n	8013322 <uxr_reset_stream_storage+0x46>
 8013334:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8013338:	b15b      	cbz	r3, 8013352 <uxr_reset_stream_storage+0x76>
 801333a:	f104 0648 	add.w	r6, r4, #72	; 0x48
 801333e:	2500      	movs	r5, #0
 8013340:	4630      	mov	r0, r6
 8013342:	3501      	adds	r5, #1
 8013344:	f007 fe8c 	bl	801b060 <uxr_reset_input_reliable_stream>
 8013348:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 801334c:	3618      	adds	r6, #24
 801334e:	42ab      	cmp	r3, r5
 8013350:	d8f6      	bhi.n	8013340 <uxr_reset_stream_storage+0x64>
 8013352:	bd70      	pop	{r4, r5, r6, pc}

08013354 <uxr_add_output_best_effort_buffer>:
 8013354:	b510      	push	{r4, lr}
 8013356:	7c04      	ldrb	r4, [r0, #16]
 8013358:	b082      	sub	sp, #8
 801335a:	f104 0c01 	add.w	ip, r4, #1
 801335e:	f880 c010 	strb.w	ip, [r0, #16]
 8013362:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8013366:	f007 ffff 	bl	801b368 <uxr_init_output_best_effort_stream>
 801336a:	2201      	movs	r2, #1
 801336c:	4620      	mov	r0, r4
 801336e:	4611      	mov	r1, r2
 8013370:	b002      	add	sp, #8
 8013372:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013376:	f7ff bf4d 	b.w	8013214 <uxr_stream_id>
 801337a:	bf00      	nop

0801337c <uxr_add_output_reliable_buffer>:
 801337c:	b510      	push	{r4, lr}
 801337e:	b084      	sub	sp, #16
 8013380:	4684      	mov	ip, r0
 8013382:	2028      	movs	r0, #40	; 0x28
 8013384:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8013388:	9400      	str	r4, [sp, #0]
 801338a:	f89c 4040 	ldrb.w	r4, [ip, #64]	; 0x40
 801338e:	fb00 c004 	mla	r0, r0, r4, ip
 8013392:	f104 0e01 	add.w	lr, r4, #1
 8013396:	3018      	adds	r0, #24
 8013398:	f88c e040 	strb.w	lr, [ip, #64]	; 0x40
 801339c:	f008 f864 	bl	801b468 <uxr_init_output_reliable_stream>
 80133a0:	2201      	movs	r2, #1
 80133a2:	2102      	movs	r1, #2
 80133a4:	4620      	mov	r0, r4
 80133a6:	b004      	add	sp, #16
 80133a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80133ac:	f7ff bf32 	b.w	8013214 <uxr_stream_id>

080133b0 <uxr_add_input_best_effort_buffer>:
 80133b0:	b510      	push	{r4, lr}
 80133b2:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 80133b6:	b082      	sub	sp, #8
 80133b8:	1c62      	adds	r2, r4, #1
 80133ba:	f104 0321 	add.w	r3, r4, #33	; 0x21
 80133be:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 80133c2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80133c6:	f007 fddb 	bl	801af80 <uxr_init_input_best_effort_stream>
 80133ca:	2200      	movs	r2, #0
 80133cc:	2101      	movs	r1, #1
 80133ce:	4620      	mov	r0, r4
 80133d0:	b002      	add	sp, #8
 80133d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80133d6:	f7ff bf1d 	b.w	8013214 <uxr_stream_id>
 80133da:	bf00      	nop

080133dc <uxr_add_input_reliable_buffer>:
 80133dc:	b510      	push	{r4, lr}
 80133de:	b084      	sub	sp, #16
 80133e0:	4684      	mov	ip, r0
 80133e2:	2018      	movs	r0, #24
 80133e4:	9c06      	ldr	r4, [sp, #24]
 80133e6:	9400      	str	r4, [sp, #0]
 80133e8:	f89c 4060 	ldrb.w	r4, [ip, #96]	; 0x60
 80133ec:	fb00 c004 	mla	r0, r0, r4, ip
 80133f0:	f104 0e01 	add.w	lr, r4, #1
 80133f4:	3048      	adds	r0, #72	; 0x48
 80133f6:	f88c e060 	strb.w	lr, [ip, #96]	; 0x60
 80133fa:	f007 fe0b 	bl	801b014 <uxr_init_input_reliable_stream>
 80133fe:	2200      	movs	r2, #0
 8013400:	2102      	movs	r1, #2
 8013402:	4620      	mov	r0, r4
 8013404:	b004      	add	sp, #16
 8013406:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801340a:	f7ff bf03 	b.w	8013214 <uxr_stream_id>
 801340e:	bf00      	nop

08013410 <uxr_get_output_best_effort_stream>:
 8013410:	7c03      	ldrb	r3, [r0, #16]
 8013412:	428b      	cmp	r3, r1
 8013414:	bf8c      	ite	hi
 8013416:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 801341a:	2000      	movls	r0, #0
 801341c:	4770      	bx	lr
 801341e:	bf00      	nop

08013420 <uxr_get_output_reliable_stream>:
 8013420:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8013424:	428b      	cmp	r3, r1
 8013426:	d904      	bls.n	8013432 <uxr_get_output_reliable_stream+0x12>
 8013428:	2328      	movs	r3, #40	; 0x28
 801342a:	fb03 0001 	mla	r0, r3, r1, r0
 801342e:	3018      	adds	r0, #24
 8013430:	4770      	bx	lr
 8013432:	2000      	movs	r0, #0
 8013434:	4770      	bx	lr
 8013436:	bf00      	nop

08013438 <uxr_get_input_best_effort_stream>:
 8013438:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 801343c:	428b      	cmp	r3, r1
 801343e:	d903      	bls.n	8013448 <uxr_get_input_best_effort_stream+0x10>
 8013440:	3121      	adds	r1, #33	; 0x21
 8013442:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8013446:	4770      	bx	lr
 8013448:	2000      	movs	r0, #0
 801344a:	4770      	bx	lr

0801344c <uxr_get_input_reliable_stream>:
 801344c:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 8013450:	428b      	cmp	r3, r1
 8013452:	d904      	bls.n	801345e <uxr_get_input_reliable_stream+0x12>
 8013454:	2318      	movs	r3, #24
 8013456:	fb03 0001 	mla	r0, r3, r1, r0
 801345a:	3048      	adds	r0, #72	; 0x48
 801345c:	4770      	bx	lr
 801345e:	2000      	movs	r0, #0
 8013460:	4770      	bx	lr
 8013462:	bf00      	nop

08013464 <uxr_output_streams_confirmed>:
 8013464:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8013468:	b183      	cbz	r3, 801348c <uxr_output_streams_confirmed+0x28>
 801346a:	b570      	push	{r4, r5, r6, lr}
 801346c:	4606      	mov	r6, r0
 801346e:	f100 0518 	add.w	r5, r0, #24
 8013472:	2400      	movs	r4, #0
 8013474:	e000      	b.n	8013478 <uxr_output_streams_confirmed+0x14>
 8013476:	b140      	cbz	r0, 801348a <uxr_output_streams_confirmed+0x26>
 8013478:	4628      	mov	r0, r5
 801347a:	3401      	adds	r4, #1
 801347c:	f008 faa0 	bl	801b9c0 <uxr_is_output_up_to_date>
 8013480:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 8013484:	3528      	adds	r5, #40	; 0x28
 8013486:	42a3      	cmp	r3, r4
 8013488:	d8f5      	bhi.n	8013476 <uxr_output_streams_confirmed+0x12>
 801348a:	bd70      	pop	{r4, r5, r6, pc}
 801348c:	2001      	movs	r0, #1
 801348e:	4770      	bx	lr

08013490 <uxr_buffer_submessage_header>:
 8013490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013492:	460e      	mov	r6, r1
 8013494:	2104      	movs	r1, #4
 8013496:	4604      	mov	r4, r0
 8013498:	4615      	mov	r5, r2
 801349a:	461f      	mov	r7, r3
 801349c:	f7fe fb5e 	bl	8011b5c <ucdr_align_to>
 80134a0:	2301      	movs	r3, #1
 80134a2:	4631      	mov	r1, r6
 80134a4:	4620      	mov	r0, r4
 80134a6:	ea47 0203 	orr.w	r2, r7, r3
 80134aa:	7523      	strb	r3, [r4, #20]
 80134ac:	462b      	mov	r3, r5
 80134ae:	f000 fa29 	bl	8013904 <uxr_serialize_submessage_header>
 80134b2:	4620      	mov	r0, r4
 80134b4:	f7fe fb68 	bl	8011b88 <ucdr_buffer_remaining>
 80134b8:	42a8      	cmp	r0, r5
 80134ba:	bf34      	ite	cc
 80134bc:	2000      	movcc	r0, #0
 80134be:	2001      	movcs	r0, #1
 80134c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80134c2:	bf00      	nop

080134c4 <uxr_read_submessage_header>:
 80134c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80134c8:	4604      	mov	r4, r0
 80134ca:	460d      	mov	r5, r1
 80134cc:	2104      	movs	r1, #4
 80134ce:	4616      	mov	r6, r2
 80134d0:	4698      	mov	r8, r3
 80134d2:	f7fe fb43 	bl	8011b5c <ucdr_align_to>
 80134d6:	4620      	mov	r0, r4
 80134d8:	f7fe fb56 	bl	8011b88 <ucdr_buffer_remaining>
 80134dc:	2803      	cmp	r0, #3
 80134de:	bf8c      	ite	hi
 80134e0:	2701      	movhi	r7, #1
 80134e2:	2700      	movls	r7, #0
 80134e4:	d802      	bhi.n	80134ec <uxr_read_submessage_header+0x28>
 80134e6:	4638      	mov	r0, r7
 80134e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80134ec:	4633      	mov	r3, r6
 80134ee:	4642      	mov	r2, r8
 80134f0:	4620      	mov	r0, r4
 80134f2:	4629      	mov	r1, r5
 80134f4:	f000 fa1a 	bl	801392c <uxr_deserialize_submessage_header>
 80134f8:	f898 3000 	ldrb.w	r3, [r8]
 80134fc:	4638      	mov	r0, r7
 80134fe:	f003 0201 	and.w	r2, r3, #1
 8013502:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8013506:	f888 3000 	strb.w	r3, [r8]
 801350a:	7522      	strb	r2, [r4, #20]
 801350c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013510 <uxr_submessage_padding>:
 8013510:	f010 0003 	ands.w	r0, r0, #3
 8013514:	bf18      	it	ne
 8013516:	f1c0 0004 	rsbne	r0, r0, #4
 801351a:	4770      	bx	lr

0801351c <uxr_millis>:
 801351c:	b510      	push	{r4, lr}
 801351e:	b084      	sub	sp, #16
 8013520:	2001      	movs	r0, #1
 8013522:	4669      	mov	r1, sp
 8013524:	f7ef fefc 	bl	8003320 <clock_gettime>
 8013528:	4908      	ldr	r1, [pc, #32]	; (801354c <uxr_millis+0x30>)
 801352a:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 801352e:	fba0 0301 	umull	r0, r3, r0, r1
 8013532:	1900      	adds	r0, r0, r4
 8013534:	fb01 3102 	mla	r1, r1, r2, r3
 8013538:	4a05      	ldr	r2, [pc, #20]	; (8013550 <uxr_millis+0x34>)
 801353a:	f04f 0300 	mov.w	r3, #0
 801353e:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8013542:	f7ec fee5 	bl	8000310 <__aeabi_ldivmod>
 8013546:	b004      	add	sp, #16
 8013548:	bd10      	pop	{r4, pc}
 801354a:	bf00      	nop
 801354c:	3b9aca00 	.word	0x3b9aca00
 8013550:	000f4240 	.word	0x000f4240

08013554 <uxr_nanos>:
 8013554:	b510      	push	{r4, lr}
 8013556:	b084      	sub	sp, #16
 8013558:	2001      	movs	r0, #1
 801355a:	4669      	mov	r1, sp
 801355c:	f7ef fee0 	bl	8003320 <clock_gettime>
 8013560:	4a06      	ldr	r2, [pc, #24]	; (801357c <uxr_nanos+0x28>)
 8013562:	9800      	ldr	r0, [sp, #0]
 8013564:	9902      	ldr	r1, [sp, #8]
 8013566:	fba0 0302 	umull	r0, r3, r0, r2
 801356a:	9c01      	ldr	r4, [sp, #4]
 801356c:	1840      	adds	r0, r0, r1
 801356e:	fb02 3304 	mla	r3, r2, r4, r3
 8013572:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 8013576:	b004      	add	sp, #16
 8013578:	bd10      	pop	{r4, pc}
 801357a:	bf00      	nop
 801357c:	3b9aca00 	.word	0x3b9aca00

08013580 <on_full_output_buffer_fragmented>:
 8013580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013584:	460c      	mov	r4, r1
 8013586:	b08a      	sub	sp, #40	; 0x28
 8013588:	4606      	mov	r6, r0
 801358a:	f891 10c1 	ldrb.w	r1, [r1, #193]	; 0xc1
 801358e:	f104 0008 	add.w	r0, r4, #8
 8013592:	f7ff ff45 	bl	8013420 <uxr_get_output_reliable_stream>
 8013596:	4605      	mov	r5, r0
 8013598:	f008 fa1c 	bl	801b9d4 <get_available_free_slots>
 801359c:	b968      	cbnz	r0, 80135ba <on_full_output_buffer_fragmented+0x3a>
 801359e:	4620      	mov	r0, r4
 80135a0:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	; 0xb8
 80135a4:	4798      	blx	r3
 80135a6:	b918      	cbnz	r0, 80135b0 <on_full_output_buffer_fragmented+0x30>
 80135a8:	2001      	movs	r0, #1
 80135aa:	b00a      	add	sp, #40	; 0x28
 80135ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80135b0:	4628      	mov	r0, r5
 80135b2:	f008 fa0f 	bl	801b9d4 <get_available_free_slots>
 80135b6:	2800      	cmp	r0, #0
 80135b8:	d0f6      	beq.n	80135a8 <on_full_output_buffer_fragmented+0x28>
 80135ba:	8929      	ldrh	r1, [r5, #8]
 80135bc:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 80135c0:	89eb      	ldrh	r3, [r5, #14]
 80135c2:	7b28      	ldrb	r0, [r5, #12]
 80135c4:	686f      	ldr	r7, [r5, #4]
 80135c6:	1a12      	subs	r2, r2, r0
 80135c8:	fbb3 f0f1 	udiv	r0, r3, r1
 80135cc:	fbb7 f7f1 	udiv	r7, r7, r1
 80135d0:	fb01 3110 	mls	r1, r1, r0, r3
 80135d4:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 80135d8:	b289      	uxth	r1, r1
 80135da:	fb07 f101 	mul.w	r1, r7, r1
 80135de:	3f04      	subs	r7, #4
 80135e0:	443a      	add	r2, r7
 80135e2:	3104      	adds	r1, #4
 80135e4:	fa1f f882 	uxth.w	r8, r2
 80135e8:	463a      	mov	r2, r7
 80135ea:	eba3 0308 	sub.w	r3, r3, r8
 80135ee:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
 80135f2:	682b      	ldr	r3, [r5, #0]
 80135f4:	4419      	add	r1, r3
 80135f6:	2300      	movs	r3, #0
 80135f8:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80135fc:	9000      	str	r0, [sp, #0]
 80135fe:	a802      	add	r0, sp, #8
 8013600:	f7fe fa7e 	bl	8011b00 <ucdr_init_buffer_origin_offset>
 8013604:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 8013608:	f102 0308 	add.w	r3, r2, #8
 801360c:	42bb      	cmp	r3, r7
 801360e:	d927      	bls.n	8013660 <on_full_output_buffer_fragmented+0xe0>
 8013610:	4642      	mov	r2, r8
 8013612:	2300      	movs	r3, #0
 8013614:	210d      	movs	r1, #13
 8013616:	a802      	add	r0, sp, #8
 8013618:	f7ff ff3a 	bl	8013490 <uxr_buffer_submessage_header>
 801361c:	8929      	ldrh	r1, [r5, #8]
 801361e:	89eb      	ldrh	r3, [r5, #14]
 8013620:	686a      	ldr	r2, [r5, #4]
 8013622:	fbb3 f0f1 	udiv	r0, r3, r1
 8013626:	fbb2 f2f1 	udiv	r2, r2, r1
 801362a:	fb01 3310 	mls	r3, r1, r0, r3
 801362e:	b29b      	uxth	r3, r3
 8013630:	fb02 f303 	mul.w	r3, r2, r3
 8013634:	682a      	ldr	r2, [r5, #0]
 8013636:	50d7      	str	r7, [r2, r3]
 8013638:	2101      	movs	r1, #1
 801363a:	89e8      	ldrh	r0, [r5, #14]
 801363c:	f008 fb1c 	bl	801bc78 <uxr_seq_num_add>
 8013640:	9904      	ldr	r1, [sp, #16]
 8013642:	9a03      	ldr	r2, [sp, #12]
 8013644:	81e8      	strh	r0, [r5, #14]
 8013646:	4630      	mov	r0, r6
 8013648:	1a52      	subs	r2, r2, r1
 801364a:	f7fe fa6b 	bl	8011b24 <ucdr_init_buffer>
 801364e:	4630      	mov	r0, r6
 8013650:	4622      	mov	r2, r4
 8013652:	490f      	ldr	r1, [pc, #60]	; (8013690 <on_full_output_buffer_fragmented+0x110>)
 8013654:	f7fe fa3a 	bl	8011acc <ucdr_set_on_full_buffer_callback>
 8013658:	2000      	movs	r0, #0
 801365a:	b00a      	add	sp, #40	; 0x28
 801365c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013660:	b292      	uxth	r2, r2
 8013662:	2302      	movs	r3, #2
 8013664:	210d      	movs	r1, #13
 8013666:	a802      	add	r0, sp, #8
 8013668:	f7ff ff12 	bl	8013490 <uxr_buffer_submessage_header>
 801366c:	8928      	ldrh	r0, [r5, #8]
 801366e:	89eb      	ldrh	r3, [r5, #14]
 8013670:	6869      	ldr	r1, [r5, #4]
 8013672:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 8013676:	fbb3 f7f0 	udiv	r7, r3, r0
 801367a:	fbb1 f1f0 	udiv	r1, r1, r0
 801367e:	fb00 3317 	mls	r3, r0, r7, r3
 8013682:	3208      	adds	r2, #8
 8013684:	b29b      	uxth	r3, r3
 8013686:	fb01 f303 	mul.w	r3, r1, r3
 801368a:	6829      	ldr	r1, [r5, #0]
 801368c:	50ca      	str	r2, [r1, r3]
 801368e:	e7d3      	b.n	8013638 <on_full_output_buffer_fragmented+0xb8>
 8013690:	08013581 	.word	0x08013581

08013694 <uxr_prepare_output_stream>:
 8013694:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013696:	b087      	sub	sp, #28
 8013698:	2707      	movs	r7, #7
 801369a:	2500      	movs	r5, #0
 801369c:	461c      	mov	r4, r3
 801369e:	4606      	mov	r6, r0
 80136a0:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80136a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80136a6:	e9cd 7500 	strd	r7, r5, [sp]
 80136aa:	3204      	adds	r2, #4
 80136ac:	f7ff fc44 	bl	8012f38 <uxr_prepare_stream_to_write_submessage>
 80136b0:	f080 0201 	eor.w	r2, r0, #1
 80136b4:	b2d2      	uxtb	r2, r2
 80136b6:	75a2      	strb	r2, [r4, #22]
 80136b8:	b112      	cbz	r2, 80136c0 <uxr_prepare_output_stream+0x2c>
 80136ba:	4628      	mov	r0, r5
 80136bc:	b007      	add	sp, #28
 80136be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80136c0:	aa05      	add	r2, sp, #20
 80136c2:	9902      	ldr	r1, [sp, #8]
 80136c4:	4630      	mov	r0, r6
 80136c6:	f7ff fd73 	bl	80131b0 <uxr_init_base_object_request>
 80136ca:	a905      	add	r1, sp, #20
 80136cc:	4605      	mov	r5, r0
 80136ce:	4620      	mov	r0, r4
 80136d0:	f001 f8bc 	bl	801484c <uxr_serialize_WRITE_DATA_Payload_Data>
 80136d4:	69a6      	ldr	r6, [r4, #24]
 80136d6:	69e7      	ldr	r7, [r4, #28]
 80136d8:	4620      	mov	r0, r4
 80136da:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 80136de:	1a52      	subs	r2, r2, r1
 80136e0:	f7fe fa20 	bl	8011b24 <ucdr_init_buffer>
 80136e4:	4620      	mov	r0, r4
 80136e6:	463a      	mov	r2, r7
 80136e8:	4631      	mov	r1, r6
 80136ea:	f7fe f9ef 	bl	8011acc <ucdr_set_on_full_buffer_callback>
 80136ee:	4628      	mov	r0, r5
 80136f0:	b007      	add	sp, #28
 80136f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080136f4 <uxr_prepare_output_stream_fragmented>:
 80136f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136f8:	b091      	sub	sp, #68	; 0x44
 80136fa:	4605      	mov	r5, r0
 80136fc:	3008      	adds	r0, #8
 80136fe:	461e      	mov	r6, r3
 8013700:	9105      	str	r1, [sp, #20]
 8013702:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8013706:	9204      	str	r2, [sp, #16]
 8013708:	f7ff fe8a 	bl	8013420 <uxr_get_output_reliable_stream>
 801370c:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8013710:	2b01      	cmp	r3, #1
 8013712:	f000 8093 	beq.w	801383c <uxr_prepare_output_stream_fragmented+0x148>
 8013716:	4604      	mov	r4, r0
 8013718:	2800      	cmp	r0, #0
 801371a:	f000 808f 	beq.w	801383c <uxr_prepare_output_stream_fragmented+0x148>
 801371e:	f008 f959 	bl	801b9d4 <get_available_free_slots>
 8013722:	2800      	cmp	r0, #0
 8013724:	f000 8085 	beq.w	8013832 <uxr_prepare_output_stream_fragmented+0x13e>
 8013728:	8923      	ldrh	r3, [r4, #8]
 801372a:	89e7      	ldrh	r7, [r4, #14]
 801372c:	6862      	ldr	r2, [r4, #4]
 801372e:	fbb7 f9f3 	udiv	r9, r7, r3
 8013732:	fbb2 f2f3 	udiv	r2, r2, r3
 8013736:	fb03 7919 	mls	r9, r3, r9, r7
 801373a:	6823      	ldr	r3, [r4, #0]
 801373c:	f1a2 0b04 	sub.w	fp, r2, #4
 8013740:	9203      	str	r2, [sp, #12]
 8013742:	fa1f f989 	uxth.w	r9, r9
 8013746:	fb02 f909 	mul.w	r9, r2, r9
 801374a:	f109 0904 	add.w	r9, r9, #4
 801374e:	4499      	add	r9, r3
 8013750:	7b23      	ldrb	r3, [r4, #12]
 8013752:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8013756:	4543      	cmp	r3, r8
 8013758:	d37c      	bcc.n	8013854 <uxr_prepare_output_stream_fragmented+0x160>
 801375a:	f1ab 0a04 	sub.w	sl, fp, #4
 801375e:	465a      	mov	r2, fp
 8013760:	4649      	mov	r1, r9
 8013762:	a808      	add	r0, sp, #32
 8013764:	ebaa 0a03 	sub.w	sl, sl, r3
 8013768:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801376a:	f8cd 8000 	str.w	r8, [sp]
 801376e:	3308      	adds	r3, #8
 8013770:	fa1f fa8a 	uxth.w	sl, sl
 8013774:	9302      	str	r3, [sp, #8]
 8013776:	2300      	movs	r3, #0
 8013778:	f7fe f9c2 	bl	8011b00 <ucdr_init_buffer_origin_offset>
 801377c:	9b02      	ldr	r3, [sp, #8]
 801377e:	4652      	mov	r2, sl
 8013780:	210d      	movs	r1, #13
 8013782:	455b      	cmp	r3, fp
 8013784:	bf34      	ite	cc
 8013786:	2302      	movcc	r3, #2
 8013788:	2300      	movcs	r3, #0
 801378a:	a808      	add	r0, sp, #32
 801378c:	f7ff fe80 	bl	8013490 <uxr_buffer_submessage_header>
 8013790:	8921      	ldrh	r1, [r4, #8]
 8013792:	6863      	ldr	r3, [r4, #4]
 8013794:	4638      	mov	r0, r7
 8013796:	fbb7 f2f1 	udiv	r2, r7, r1
 801379a:	fbb3 f3f1 	udiv	r3, r3, r1
 801379e:	fb01 7212 	mls	r2, r1, r2, r7
 80137a2:	2101      	movs	r1, #1
 80137a4:	b292      	uxth	r2, r2
 80137a6:	fb02 f303 	mul.w	r3, r2, r3
 80137aa:	6822      	ldr	r2, [r4, #0]
 80137ac:	f842 b003 	str.w	fp, [r2, r3]
 80137b0:	f008 fa62 	bl	801bc78 <uxr_seq_num_add>
 80137b4:	9b03      	ldr	r3, [sp, #12]
 80137b6:	f108 0104 	add.w	r1, r8, #4
 80137ba:	4607      	mov	r7, r0
 80137bc:	f1a3 0208 	sub.w	r2, r3, #8
 80137c0:	4630      	mov	r0, r6
 80137c2:	4449      	add	r1, r9
 80137c4:	eba2 0208 	sub.w	r2, r2, r8
 80137c8:	f7fe f9ac 	bl	8011b24 <ucdr_init_buffer>
 80137cc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80137ce:	2107      	movs	r1, #7
 80137d0:	81e7      	strh	r7, [r4, #14]
 80137d2:	1d1a      	adds	r2, r3, #4
 80137d4:	2300      	movs	r3, #0
 80137d6:	4630      	mov	r0, r6
 80137d8:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80137dc:	bf28      	it	cs
 80137de:	461a      	movcs	r2, r3
 80137e0:	b292      	uxth	r2, r2
 80137e2:	f7ff fe55 	bl	8013490 <uxr_buffer_submessage_header>
 80137e6:	aa07      	add	r2, sp, #28
 80137e8:	9904      	ldr	r1, [sp, #16]
 80137ea:	4628      	mov	r0, r5
 80137ec:	f7ff fce0 	bl	80131b0 <uxr_init_base_object_request>
 80137f0:	4604      	mov	r4, r0
 80137f2:	b320      	cbz	r0, 801383e <uxr_prepare_output_stream_fragmented+0x14a>
 80137f4:	a907      	add	r1, sp, #28
 80137f6:	4630      	mov	r0, r6
 80137f8:	f001 f828 	bl	801484c <uxr_serialize_WRITE_DATA_Payload_Data>
 80137fc:	4630      	mov	r0, r6
 80137fe:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8013802:	1a52      	subs	r2, r2, r1
 8013804:	f7fe f98e 	bl	8011b24 <ucdr_init_buffer>
 8013808:	9b05      	ldr	r3, [sp, #20]
 801380a:	9a02      	ldr	r2, [sp, #8]
 801380c:	4630      	mov	r0, r6
 801380e:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
 8013812:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013814:	f8c5 20c4 	str.w	r2, [r5, #196]	; 0xc4
 8013818:	462a      	mov	r2, r5
 801381a:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
 801381e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8013820:	4918      	ldr	r1, [pc, #96]	; (8013884 <uxr_prepare_output_stream_fragmented+0x190>)
 8013822:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
 8013826:	f7fe f951 	bl	8011acc <ucdr_set_on_full_buffer_callback>
 801382a:	4620      	mov	r0, r4
 801382c:	b011      	add	sp, #68	; 0x44
 801382e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013832:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013834:	4628      	mov	r0, r5
 8013836:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013838:	4798      	blx	r3
 801383a:	b920      	cbnz	r0, 8013846 <uxr_prepare_output_stream_fragmented+0x152>
 801383c:	2400      	movs	r4, #0
 801383e:	4620      	mov	r0, r4
 8013840:	b011      	add	sp, #68	; 0x44
 8013842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013846:	4620      	mov	r0, r4
 8013848:	f008 f8c4 	bl	801b9d4 <get_available_free_slots>
 801384c:	2800      	cmp	r0, #0
 801384e:	f47f af6b 	bne.w	8013728 <uxr_prepare_output_stream_fragmented+0x34>
 8013852:	e7f3      	b.n	801383c <uxr_prepare_output_stream_fragmented+0x148>
 8013854:	4638      	mov	r0, r7
 8013856:	2101      	movs	r1, #1
 8013858:	f008 fa0e 	bl	801bc78 <uxr_seq_num_add>
 801385c:	8922      	ldrh	r2, [r4, #8]
 801385e:	6863      	ldr	r3, [r4, #4]
 8013860:	4607      	mov	r7, r0
 8013862:	fbb3 f9f2 	udiv	r9, r3, r2
 8013866:	fbb0 f3f2 	udiv	r3, r0, r2
 801386a:	fb02 0313 	mls	r3, r2, r3, r0
 801386e:	b29b      	uxth	r3, r3
 8013870:	fb03 f909 	mul.w	r9, r3, r9
 8013874:	6823      	ldr	r3, [r4, #0]
 8013876:	f109 0904 	add.w	r9, r9, #4
 801387a:	4499      	add	r9, r3
 801387c:	7b23      	ldrb	r3, [r4, #12]
 801387e:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8013882:	e76a      	b.n	801375a <uxr_prepare_output_stream_fragmented+0x66>
 8013884:	08013581 	.word	0x08013581

08013888 <uxr_serialize_message_header>:
 8013888:	b5f0      	push	{r4, r5, r6, r7, lr}
 801388a:	4616      	mov	r6, r2
 801388c:	b083      	sub	sp, #12
 801388e:	4604      	mov	r4, r0
 8013890:	460d      	mov	r5, r1
 8013892:	9301      	str	r3, [sp, #4]
 8013894:	9f08      	ldr	r7, [sp, #32]
 8013896:	f7fc fcb5 	bl	8010204 <ucdr_serialize_uint8_t>
 801389a:	4631      	mov	r1, r6
 801389c:	4620      	mov	r0, r4
 801389e:	f7fc fcb1 	bl	8010204 <ucdr_serialize_uint8_t>
 80138a2:	9a01      	ldr	r2, [sp, #4]
 80138a4:	2101      	movs	r1, #1
 80138a6:	4620      	mov	r0, r4
 80138a8:	f7fc fd58 	bl	801035c <ucdr_serialize_endian_uint16_t>
 80138ac:	062b      	lsls	r3, r5, #24
 80138ae:	d501      	bpl.n	80138b4 <uxr_serialize_message_header+0x2c>
 80138b0:	b003      	add	sp, #12
 80138b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80138b4:	2204      	movs	r2, #4
 80138b6:	4639      	mov	r1, r7
 80138b8:	4620      	mov	r0, r4
 80138ba:	b003      	add	sp, #12
 80138bc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80138c0:	f7fc ba54 	b.w	800fd6c <ucdr_serialize_array_uint8_t>

080138c4 <uxr_deserialize_message_header>:
 80138c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80138c6:	4616      	mov	r6, r2
 80138c8:	b083      	sub	sp, #12
 80138ca:	4604      	mov	r4, r0
 80138cc:	460d      	mov	r5, r1
 80138ce:	9301      	str	r3, [sp, #4]
 80138d0:	9f08      	ldr	r7, [sp, #32]
 80138d2:	f7fc fcad 	bl	8010230 <ucdr_deserialize_uint8_t>
 80138d6:	4631      	mov	r1, r6
 80138d8:	4620      	mov	r0, r4
 80138da:	f7fc fca9 	bl	8010230 <ucdr_deserialize_uint8_t>
 80138de:	9a01      	ldr	r2, [sp, #4]
 80138e0:	2101      	movs	r1, #1
 80138e2:	4620      	mov	r0, r4
 80138e4:	f7fc fe2e 	bl	8010544 <ucdr_deserialize_endian_uint16_t>
 80138e8:	f995 3000 	ldrsb.w	r3, [r5]
 80138ec:	2b00      	cmp	r3, #0
 80138ee:	da01      	bge.n	80138f4 <uxr_deserialize_message_header+0x30>
 80138f0:	b003      	add	sp, #12
 80138f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80138f4:	2204      	movs	r2, #4
 80138f6:	4639      	mov	r1, r7
 80138f8:	4620      	mov	r0, r4
 80138fa:	b003      	add	sp, #12
 80138fc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013900:	f7fc ba98 	b.w	800fe34 <ucdr_deserialize_array_uint8_t>

08013904 <uxr_serialize_submessage_header>:
 8013904:	b530      	push	{r4, r5, lr}
 8013906:	4615      	mov	r5, r2
 8013908:	b083      	sub	sp, #12
 801390a:	4604      	mov	r4, r0
 801390c:	9301      	str	r3, [sp, #4]
 801390e:	f7fc fc79 	bl	8010204 <ucdr_serialize_uint8_t>
 8013912:	4629      	mov	r1, r5
 8013914:	4620      	mov	r0, r4
 8013916:	f7fc fc75 	bl	8010204 <ucdr_serialize_uint8_t>
 801391a:	9a01      	ldr	r2, [sp, #4]
 801391c:	2101      	movs	r1, #1
 801391e:	4620      	mov	r0, r4
 8013920:	b003      	add	sp, #12
 8013922:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013926:	f7fc bd19 	b.w	801035c <ucdr_serialize_endian_uint16_t>
 801392a:	bf00      	nop

0801392c <uxr_deserialize_submessage_header>:
 801392c:	b530      	push	{r4, r5, lr}
 801392e:	4615      	mov	r5, r2
 8013930:	b083      	sub	sp, #12
 8013932:	4604      	mov	r4, r0
 8013934:	9301      	str	r3, [sp, #4]
 8013936:	f7fc fc7b 	bl	8010230 <ucdr_deserialize_uint8_t>
 801393a:	4629      	mov	r1, r5
 801393c:	4620      	mov	r0, r4
 801393e:	f7fc fc77 	bl	8010230 <ucdr_deserialize_uint8_t>
 8013942:	9a01      	ldr	r2, [sp, #4]
 8013944:	2101      	movs	r1, #1
 8013946:	4620      	mov	r0, r4
 8013948:	b003      	add	sp, #12
 801394a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801394e:	f7fc bdf9 	b.w	8010544 <ucdr_deserialize_endian_uint16_t>
 8013952:	bf00      	nop

08013954 <uxr_serialize_CLIENT_Representation>:
 8013954:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013958:	2204      	movs	r2, #4
 801395a:	460e      	mov	r6, r1
 801395c:	4605      	mov	r5, r0
 801395e:	f7fc fa05 	bl	800fd6c <ucdr_serialize_array_uint8_t>
 8013962:	4607      	mov	r7, r0
 8013964:	2202      	movs	r2, #2
 8013966:	1d31      	adds	r1, r6, #4
 8013968:	4628      	mov	r0, r5
 801396a:	f7fc f9ff 	bl	800fd6c <ucdr_serialize_array_uint8_t>
 801396e:	4038      	ands	r0, r7
 8013970:	2202      	movs	r2, #2
 8013972:	1db1      	adds	r1, r6, #6
 8013974:	b2c7      	uxtb	r7, r0
 8013976:	4628      	mov	r0, r5
 8013978:	f7fc f9f8 	bl	800fd6c <ucdr_serialize_array_uint8_t>
 801397c:	2204      	movs	r2, #4
 801397e:	4007      	ands	r7, r0
 8013980:	f106 0108 	add.w	r1, r6, #8
 8013984:	4628      	mov	r0, r5
 8013986:	f7fc f9f1 	bl	800fd6c <ucdr_serialize_array_uint8_t>
 801398a:	4007      	ands	r7, r0
 801398c:	7b31      	ldrb	r1, [r6, #12]
 801398e:	4628      	mov	r0, r5
 8013990:	f7fc fc38 	bl	8010204 <ucdr_serialize_uint8_t>
 8013994:	7b71      	ldrb	r1, [r6, #13]
 8013996:	4007      	ands	r7, r0
 8013998:	4628      	mov	r0, r5
 801399a:	f7fc fc05 	bl	80101a8 <ucdr_serialize_bool>
 801399e:	7b73      	ldrb	r3, [r6, #13]
 80139a0:	ea07 0800 	and.w	r8, r7, r0
 80139a4:	b93b      	cbnz	r3, 80139b6 <uxr_serialize_CLIENT_Representation+0x62>
 80139a6:	8bb1      	ldrh	r1, [r6, #28]
 80139a8:	4628      	mov	r0, r5
 80139aa:	f7fc fc57 	bl	801025c <ucdr_serialize_uint16_t>
 80139ae:	ea08 0000 	and.w	r0, r8, r0
 80139b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80139b6:	6931      	ldr	r1, [r6, #16]
 80139b8:	4628      	mov	r0, r5
 80139ba:	f7fc fe39 	bl	8010630 <ucdr_serialize_uint32_t>
 80139be:	6933      	ldr	r3, [r6, #16]
 80139c0:	b1e3      	cbz	r3, 80139fc <uxr_serialize_CLIENT_Representation+0xa8>
 80139c2:	b1c0      	cbz	r0, 80139f6 <uxr_serialize_CLIENT_Representation+0xa2>
 80139c4:	4637      	mov	r7, r6
 80139c6:	f04f 0900 	mov.w	r9, #0
 80139ca:	e000      	b.n	80139ce <uxr_serialize_CLIENT_Representation+0x7a>
 80139cc:	b19c      	cbz	r4, 80139f6 <uxr_serialize_CLIENT_Representation+0xa2>
 80139ce:	6979      	ldr	r1, [r7, #20]
 80139d0:	4628      	mov	r0, r5
 80139d2:	f007 f9ff 	bl	801add4 <ucdr_serialize_string>
 80139d6:	69b9      	ldr	r1, [r7, #24]
 80139d8:	4604      	mov	r4, r0
 80139da:	4628      	mov	r0, r5
 80139dc:	f007 f9fa 	bl	801add4 <ucdr_serialize_string>
 80139e0:	f109 0901 	add.w	r9, r9, #1
 80139e4:	6933      	ldr	r3, [r6, #16]
 80139e6:	4004      	ands	r4, r0
 80139e8:	3708      	adds	r7, #8
 80139ea:	4599      	cmp	r9, r3
 80139ec:	b2e4      	uxtb	r4, r4
 80139ee:	d3ed      	bcc.n	80139cc <uxr_serialize_CLIENT_Representation+0x78>
 80139f0:	ea08 0804 	and.w	r8, r8, r4
 80139f4:	e7d7      	b.n	80139a6 <uxr_serialize_CLIENT_Representation+0x52>
 80139f6:	f04f 0800 	mov.w	r8, #0
 80139fa:	e7d4      	b.n	80139a6 <uxr_serialize_CLIENT_Representation+0x52>
 80139fc:	ea08 0800 	and.w	r8, r8, r0
 8013a00:	e7d1      	b.n	80139a6 <uxr_serialize_CLIENT_Representation+0x52>
 8013a02:	bf00      	nop

08013a04 <uxr_deserialize_CLIENT_Representation>:
 8013a04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013a08:	2204      	movs	r2, #4
 8013a0a:	460c      	mov	r4, r1
 8013a0c:	4605      	mov	r5, r0
 8013a0e:	f7fc fa11 	bl	800fe34 <ucdr_deserialize_array_uint8_t>
 8013a12:	4607      	mov	r7, r0
 8013a14:	2202      	movs	r2, #2
 8013a16:	1d21      	adds	r1, r4, #4
 8013a18:	4628      	mov	r0, r5
 8013a1a:	f7fc fa0b 	bl	800fe34 <ucdr_deserialize_array_uint8_t>
 8013a1e:	4038      	ands	r0, r7
 8013a20:	2202      	movs	r2, #2
 8013a22:	1da1      	adds	r1, r4, #6
 8013a24:	b2c6      	uxtb	r6, r0
 8013a26:	4628      	mov	r0, r5
 8013a28:	f7fc fa04 	bl	800fe34 <ucdr_deserialize_array_uint8_t>
 8013a2c:	2204      	movs	r2, #4
 8013a2e:	4006      	ands	r6, r0
 8013a30:	f104 0108 	add.w	r1, r4, #8
 8013a34:	4628      	mov	r0, r5
 8013a36:	f7fc f9fd 	bl	800fe34 <ucdr_deserialize_array_uint8_t>
 8013a3a:	4006      	ands	r6, r0
 8013a3c:	f104 010c 	add.w	r1, r4, #12
 8013a40:	4628      	mov	r0, r5
 8013a42:	f7fc fbf5 	bl	8010230 <ucdr_deserialize_uint8_t>
 8013a46:	f104 010d 	add.w	r1, r4, #13
 8013a4a:	ea06 0700 	and.w	r7, r6, r0
 8013a4e:	4628      	mov	r0, r5
 8013a50:	f7fc fbc0 	bl	80101d4 <ucdr_deserialize_bool>
 8013a54:	7b63      	ldrb	r3, [r4, #13]
 8013a56:	4007      	ands	r7, r0
 8013a58:	b93b      	cbnz	r3, 8013a6a <uxr_deserialize_CLIENT_Representation+0x66>
 8013a5a:	f104 011c 	add.w	r1, r4, #28
 8013a5e:	4628      	mov	r0, r5
 8013a60:	f7fc fcfc 	bl	801045c <ucdr_deserialize_uint16_t>
 8013a64:	4038      	ands	r0, r7
 8013a66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013a6a:	f104 0110 	add.w	r1, r4, #16
 8013a6e:	4628      	mov	r0, r5
 8013a70:	f7fc ff0e 	bl	8010890 <ucdr_deserialize_uint32_t>
 8013a74:	6923      	ldr	r3, [r4, #16]
 8013a76:	2b01      	cmp	r3, #1
 8013a78:	d903      	bls.n	8013a82 <uxr_deserialize_CLIENT_Representation+0x7e>
 8013a7a:	2301      	movs	r3, #1
 8013a7c:	2700      	movs	r7, #0
 8013a7e:	75ab      	strb	r3, [r5, #22]
 8013a80:	e7eb      	b.n	8013a5a <uxr_deserialize_CLIENT_Representation+0x56>
 8013a82:	b30b      	cbz	r3, 8013ac8 <uxr_deserialize_CLIENT_Representation+0xc4>
 8013a84:	b1f0      	cbz	r0, 8013ac4 <uxr_deserialize_CLIENT_Representation+0xc0>
 8013a86:	46a0      	mov	r8, r4
 8013a88:	f04f 0900 	mov.w	r9, #0
 8013a8c:	e000      	b.n	8013a90 <uxr_deserialize_CLIENT_Representation+0x8c>
 8013a8e:	b1ce      	cbz	r6, 8013ac4 <uxr_deserialize_CLIENT_Representation+0xc0>
 8013a90:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8013a94:	f108 0808 	add.w	r8, r8, #8
 8013a98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013a9c:	4628      	mov	r0, r5
 8013a9e:	f007 f9a9 	bl	801adf4 <ucdr_deserialize_string>
 8013aa2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013aa6:	4606      	mov	r6, r0
 8013aa8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013aac:	4628      	mov	r0, r5
 8013aae:	f109 0901 	add.w	r9, r9, #1
 8013ab2:	f007 f99f 	bl	801adf4 <ucdr_deserialize_string>
 8013ab6:	6923      	ldr	r3, [r4, #16]
 8013ab8:	4006      	ands	r6, r0
 8013aba:	4599      	cmp	r9, r3
 8013abc:	b2f6      	uxtb	r6, r6
 8013abe:	d3e6      	bcc.n	8013a8e <uxr_deserialize_CLIENT_Representation+0x8a>
 8013ac0:	4037      	ands	r7, r6
 8013ac2:	e7ca      	b.n	8013a5a <uxr_deserialize_CLIENT_Representation+0x56>
 8013ac4:	2700      	movs	r7, #0
 8013ac6:	e7c8      	b.n	8013a5a <uxr_deserialize_CLIENT_Representation+0x56>
 8013ac8:	4007      	ands	r7, r0
 8013aca:	e7c6      	b.n	8013a5a <uxr_deserialize_CLIENT_Representation+0x56>

08013acc <uxr_serialize_AGENT_Representation>:
 8013acc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013ad0:	2204      	movs	r2, #4
 8013ad2:	460f      	mov	r7, r1
 8013ad4:	4605      	mov	r5, r0
 8013ad6:	f7fc f949 	bl	800fd6c <ucdr_serialize_array_uint8_t>
 8013ada:	4604      	mov	r4, r0
 8013adc:	2202      	movs	r2, #2
 8013ade:	1d39      	adds	r1, r7, #4
 8013ae0:	4628      	mov	r0, r5
 8013ae2:	f7fc f943 	bl	800fd6c <ucdr_serialize_array_uint8_t>
 8013ae6:	4020      	ands	r0, r4
 8013ae8:	2202      	movs	r2, #2
 8013aea:	1db9      	adds	r1, r7, #6
 8013aec:	b2c4      	uxtb	r4, r0
 8013aee:	4628      	mov	r0, r5
 8013af0:	f7fc f93c 	bl	800fd6c <ucdr_serialize_array_uint8_t>
 8013af4:	7a39      	ldrb	r1, [r7, #8]
 8013af6:	4004      	ands	r4, r0
 8013af8:	4628      	mov	r0, r5
 8013afa:	f7fc fb55 	bl	80101a8 <ucdr_serialize_bool>
 8013afe:	7a3b      	ldrb	r3, [r7, #8]
 8013b00:	ea00 0804 	and.w	r8, r0, r4
 8013b04:	b913      	cbnz	r3, 8013b0c <uxr_serialize_AGENT_Representation+0x40>
 8013b06:	4640      	mov	r0, r8
 8013b08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013b0c:	68f9      	ldr	r1, [r7, #12]
 8013b0e:	4628      	mov	r0, r5
 8013b10:	f7fc fd8e 	bl	8010630 <ucdr_serialize_uint32_t>
 8013b14:	68fb      	ldr	r3, [r7, #12]
 8013b16:	b303      	cbz	r3, 8013b5a <uxr_serialize_AGENT_Representation+0x8e>
 8013b18:	b1d0      	cbz	r0, 8013b50 <uxr_serialize_AGENT_Representation+0x84>
 8013b1a:	463e      	mov	r6, r7
 8013b1c:	f04f 0900 	mov.w	r9, #0
 8013b20:	e000      	b.n	8013b24 <uxr_serialize_AGENT_Representation+0x58>
 8013b22:	b1ac      	cbz	r4, 8013b50 <uxr_serialize_AGENT_Representation+0x84>
 8013b24:	6931      	ldr	r1, [r6, #16]
 8013b26:	4628      	mov	r0, r5
 8013b28:	f007 f954 	bl	801add4 <ucdr_serialize_string>
 8013b2c:	6971      	ldr	r1, [r6, #20]
 8013b2e:	4604      	mov	r4, r0
 8013b30:	4628      	mov	r0, r5
 8013b32:	f007 f94f 	bl	801add4 <ucdr_serialize_string>
 8013b36:	f109 0901 	add.w	r9, r9, #1
 8013b3a:	68fb      	ldr	r3, [r7, #12]
 8013b3c:	4004      	ands	r4, r0
 8013b3e:	3608      	adds	r6, #8
 8013b40:	4599      	cmp	r9, r3
 8013b42:	b2e4      	uxtb	r4, r4
 8013b44:	d3ed      	bcc.n	8013b22 <uxr_serialize_AGENT_Representation+0x56>
 8013b46:	ea08 0804 	and.w	r8, r8, r4
 8013b4a:	4640      	mov	r0, r8
 8013b4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013b50:	f04f 0800 	mov.w	r8, #0
 8013b54:	4640      	mov	r0, r8
 8013b56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013b5a:	ea08 0800 	and.w	r8, r8, r0
 8013b5e:	e7d2      	b.n	8013b06 <uxr_serialize_AGENT_Representation+0x3a>

08013b60 <uxr_serialize_DATAWRITER_Representation>:
 8013b60:	b570      	push	{r4, r5, r6, lr}
 8013b62:	460d      	mov	r5, r1
 8013b64:	7809      	ldrb	r1, [r1, #0]
 8013b66:	4606      	mov	r6, r0
 8013b68:	f7fc fb4c 	bl	8010204 <ucdr_serialize_uint8_t>
 8013b6c:	4604      	mov	r4, r0
 8013b6e:	b130      	cbz	r0, 8013b7e <uxr_serialize_DATAWRITER_Representation+0x1e>
 8013b70:	782b      	ldrb	r3, [r5, #0]
 8013b72:	2b02      	cmp	r3, #2
 8013b74:	d00c      	beq.n	8013b90 <uxr_serialize_DATAWRITER_Representation+0x30>
 8013b76:	2b03      	cmp	r3, #3
 8013b78:	d010      	beq.n	8013b9c <uxr_serialize_DATAWRITER_Representation+0x3c>
 8013b7a:	2b01      	cmp	r3, #1
 8013b7c:	d008      	beq.n	8013b90 <uxr_serialize_DATAWRITER_Representation+0x30>
 8013b7e:	2202      	movs	r2, #2
 8013b80:	f505 7102 	add.w	r1, r5, #520	; 0x208
 8013b84:	4630      	mov	r0, r6
 8013b86:	f7fc f8f1 	bl	800fd6c <ucdr_serialize_array_uint8_t>
 8013b8a:	4020      	ands	r0, r4
 8013b8c:	b2c0      	uxtb	r0, r0
 8013b8e:	bd70      	pop	{r4, r5, r6, pc}
 8013b90:	6869      	ldr	r1, [r5, #4]
 8013b92:	4630      	mov	r0, r6
 8013b94:	f007 f91e 	bl	801add4 <ucdr_serialize_string>
 8013b98:	4604      	mov	r4, r0
 8013b9a:	e7f0      	b.n	8013b7e <uxr_serialize_DATAWRITER_Representation+0x1e>
 8013b9c:	4629      	mov	r1, r5
 8013b9e:	4630      	mov	r0, r6
 8013ba0:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8013ba4:	3104      	adds	r1, #4
 8013ba6:	f007 f8e9 	bl	801ad7c <ucdr_serialize_sequence_uint8_t>
 8013baa:	4604      	mov	r4, r0
 8013bac:	e7e7      	b.n	8013b7e <uxr_serialize_DATAWRITER_Representation+0x1e>
 8013bae:	bf00      	nop

08013bb0 <uxr_serialize_ObjectVariant.part.0>:
 8013bb0:	b570      	push	{r4, r5, r6, lr}
 8013bb2:	780b      	ldrb	r3, [r1, #0]
 8013bb4:	460c      	mov	r4, r1
 8013bb6:	4605      	mov	r5, r0
 8013bb8:	3b01      	subs	r3, #1
 8013bba:	2b0d      	cmp	r3, #13
 8013bbc:	d854      	bhi.n	8013c68 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8013bbe:	e8df f003 	tbb	[pc, r3]
 8013bc2:	0730      	.short	0x0730
 8013bc4:	07071b1b 	.word	0x07071b1b
 8013bc8:	0c530707 	.word	0x0c530707
 8013bcc:	494e0c0c 	.word	0x494e0c0c
 8013bd0:	3104      	adds	r1, #4
 8013bd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013bd6:	f7ff bfc3 	b.w	8013b60 <uxr_serialize_DATAWRITER_Representation>
 8013bda:	7909      	ldrb	r1, [r1, #4]
 8013bdc:	f7fc fb12 	bl	8010204 <ucdr_serialize_uint8_t>
 8013be0:	b1e8      	cbz	r0, 8013c1e <uxr_serialize_ObjectVariant.part.0+0x6e>
 8013be2:	7923      	ldrb	r3, [r4, #4]
 8013be4:	2b01      	cmp	r3, #1
 8013be6:	d001      	beq.n	8013bec <uxr_serialize_ObjectVariant.part.0+0x3c>
 8013be8:	2b02      	cmp	r3, #2
 8013bea:	d13d      	bne.n	8013c68 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8013bec:	68a1      	ldr	r1, [r4, #8]
 8013bee:	4628      	mov	r0, r5
 8013bf0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013bf4:	f007 b8ee 	b.w	801add4 <ucdr_serialize_string>
 8013bf8:	7909      	ldrb	r1, [r1, #4]
 8013bfa:	f7fc fb03 	bl	8010204 <ucdr_serialize_uint8_t>
 8013bfe:	4606      	mov	r6, r0
 8013c00:	b120      	cbz	r0, 8013c0c <uxr_serialize_ObjectVariant.part.0+0x5c>
 8013c02:	7923      	ldrb	r3, [r4, #4]
 8013c04:	2b02      	cmp	r3, #2
 8013c06:	d039      	beq.n	8013c7c <uxr_serialize_ObjectVariant.part.0+0xcc>
 8013c08:	2b03      	cmp	r3, #3
 8013c0a:	d02f      	beq.n	8013c6c <uxr_serialize_ObjectVariant.part.0+0xbc>
 8013c0c:	2202      	movs	r2, #2
 8013c0e:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8013c12:	4628      	mov	r0, r5
 8013c14:	f7fc f8aa 	bl	800fd6c <ucdr_serialize_array_uint8_t>
 8013c18:	4030      	ands	r0, r6
 8013c1a:	b2c0      	uxtb	r0, r0
 8013c1c:	bd70      	pop	{r4, r5, r6, pc}
 8013c1e:	2000      	movs	r0, #0
 8013c20:	bd70      	pop	{r4, r5, r6, pc}
 8013c22:	7909      	ldrb	r1, [r1, #4]
 8013c24:	f7fc faee 	bl	8010204 <ucdr_serialize_uint8_t>
 8013c28:	4606      	mov	r6, r0
 8013c2a:	b158      	cbz	r0, 8013c44 <uxr_serialize_ObjectVariant.part.0+0x94>
 8013c2c:	7923      	ldrb	r3, [r4, #4]
 8013c2e:	2b02      	cmp	r3, #2
 8013c30:	d003      	beq.n	8013c3a <uxr_serialize_ObjectVariant.part.0+0x8a>
 8013c32:	2b03      	cmp	r3, #3
 8013c34:	d028      	beq.n	8013c88 <uxr_serialize_ObjectVariant.part.0+0xd8>
 8013c36:	2b01      	cmp	r3, #1
 8013c38:	d104      	bne.n	8013c44 <uxr_serialize_ObjectVariant.part.0+0x94>
 8013c3a:	68a1      	ldr	r1, [r4, #8]
 8013c3c:	4628      	mov	r0, r5
 8013c3e:	f007 f8c9 	bl	801add4 <ucdr_serialize_string>
 8013c42:	4606      	mov	r6, r0
 8013c44:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	; 0x20c
 8013c48:	4628      	mov	r0, r5
 8013c4a:	f7fd f817 	bl	8010c7c <ucdr_serialize_int16_t>
 8013c4e:	4030      	ands	r0, r6
 8013c50:	b2c0      	uxtb	r0, r0
 8013c52:	bd70      	pop	{r4, r5, r6, pc}
 8013c54:	3104      	adds	r1, #4
 8013c56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013c5a:	f7ff be7b 	b.w	8013954 <uxr_serialize_CLIENT_Representation>
 8013c5e:	3104      	adds	r1, #4
 8013c60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013c64:	f7ff bf32 	b.w	8013acc <uxr_serialize_AGENT_Representation>
 8013c68:	2001      	movs	r0, #1
 8013c6a:	bd70      	pop	{r4, r5, r6, pc}
 8013c6c:	68a2      	ldr	r2, [r4, #8]
 8013c6e:	f104 010c 	add.w	r1, r4, #12
 8013c72:	4628      	mov	r0, r5
 8013c74:	f007 f882 	bl	801ad7c <ucdr_serialize_sequence_uint8_t>
 8013c78:	4606      	mov	r6, r0
 8013c7a:	e7c7      	b.n	8013c0c <uxr_serialize_ObjectVariant.part.0+0x5c>
 8013c7c:	68a1      	ldr	r1, [r4, #8]
 8013c7e:	4628      	mov	r0, r5
 8013c80:	f007 f8a8 	bl	801add4 <ucdr_serialize_string>
 8013c84:	4606      	mov	r6, r0
 8013c86:	e7c1      	b.n	8013c0c <uxr_serialize_ObjectVariant.part.0+0x5c>
 8013c88:	68a2      	ldr	r2, [r4, #8]
 8013c8a:	f104 010c 	add.w	r1, r4, #12
 8013c8e:	4628      	mov	r0, r5
 8013c90:	f007 f874 	bl	801ad7c <ucdr_serialize_sequence_uint8_t>
 8013c94:	4606      	mov	r6, r0
 8013c96:	e7d5      	b.n	8013c44 <uxr_serialize_ObjectVariant.part.0+0x94>

08013c98 <uxr_deserialize_DATAWRITER_Representation>:
 8013c98:	b570      	push	{r4, r5, r6, lr}
 8013c9a:	4606      	mov	r6, r0
 8013c9c:	460d      	mov	r5, r1
 8013c9e:	f7fc fac7 	bl	8010230 <ucdr_deserialize_uint8_t>
 8013ca2:	4604      	mov	r4, r0
 8013ca4:	b130      	cbz	r0, 8013cb4 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8013ca6:	782b      	ldrb	r3, [r5, #0]
 8013ca8:	2b02      	cmp	r3, #2
 8013caa:	d00c      	beq.n	8013cc6 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8013cac:	2b03      	cmp	r3, #3
 8013cae:	d012      	beq.n	8013cd6 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8013cb0:	2b01      	cmp	r3, #1
 8013cb2:	d008      	beq.n	8013cc6 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8013cb4:	2202      	movs	r2, #2
 8013cb6:	f505 7102 	add.w	r1, r5, #520	; 0x208
 8013cba:	4630      	mov	r0, r6
 8013cbc:	f7fc f8ba 	bl	800fe34 <ucdr_deserialize_array_uint8_t>
 8013cc0:	4020      	ands	r0, r4
 8013cc2:	b2c0      	uxtb	r0, r0
 8013cc4:	bd70      	pop	{r4, r5, r6, pc}
 8013cc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013cca:	6869      	ldr	r1, [r5, #4]
 8013ccc:	4630      	mov	r0, r6
 8013cce:	f007 f891 	bl	801adf4 <ucdr_deserialize_string>
 8013cd2:	4604      	mov	r4, r0
 8013cd4:	e7ee      	b.n	8013cb4 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8013cd6:	1d2b      	adds	r3, r5, #4
 8013cd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013cdc:	f105 0108 	add.w	r1, r5, #8
 8013ce0:	4630      	mov	r0, r6
 8013ce2:	f007 f85d 	bl	801ada0 <ucdr_deserialize_sequence_uint8_t>
 8013ce6:	4604      	mov	r4, r0
 8013ce8:	e7e4      	b.n	8013cb4 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8013cea:	bf00      	nop

08013cec <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8013cec:	b570      	push	{r4, r5, r6, lr}
 8013cee:	460d      	mov	r5, r1
 8013cf0:	7809      	ldrb	r1, [r1, #0]
 8013cf2:	4606      	mov	r6, r0
 8013cf4:	f7fc fa58 	bl	80101a8 <ucdr_serialize_bool>
 8013cf8:	782b      	ldrb	r3, [r5, #0]
 8013cfa:	4604      	mov	r4, r0
 8013cfc:	b94b      	cbnz	r3, 8013d12 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8013cfe:	7a29      	ldrb	r1, [r5, #8]
 8013d00:	4630      	mov	r0, r6
 8013d02:	f7fc fa51 	bl	80101a8 <ucdr_serialize_bool>
 8013d06:	7a2b      	ldrb	r3, [r5, #8]
 8013d08:	4004      	ands	r4, r0
 8013d0a:	b2e4      	uxtb	r4, r4
 8013d0c:	b943      	cbnz	r3, 8013d20 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8013d0e:	4620      	mov	r0, r4
 8013d10:	bd70      	pop	{r4, r5, r6, pc}
 8013d12:	6869      	ldr	r1, [r5, #4]
 8013d14:	4630      	mov	r0, r6
 8013d16:	f007 f85d 	bl	801add4 <ucdr_serialize_string>
 8013d1a:	4004      	ands	r4, r0
 8013d1c:	b2e4      	uxtb	r4, r4
 8013d1e:	e7ee      	b.n	8013cfe <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8013d20:	68e9      	ldr	r1, [r5, #12]
 8013d22:	4630      	mov	r0, r6
 8013d24:	f007 f856 	bl	801add4 <ucdr_serialize_string>
 8013d28:	4004      	ands	r4, r0
 8013d2a:	4620      	mov	r0, r4
 8013d2c:	bd70      	pop	{r4, r5, r6, pc}
 8013d2e:	bf00      	nop

08013d30 <uxr_serialize_OBJK_Topic_Binary>:
 8013d30:	b570      	push	{r4, r5, r6, lr}
 8013d32:	460d      	mov	r5, r1
 8013d34:	4606      	mov	r6, r0
 8013d36:	6809      	ldr	r1, [r1, #0]
 8013d38:	f007 f84c 	bl	801add4 <ucdr_serialize_string>
 8013d3c:	4604      	mov	r4, r0
 8013d3e:	7929      	ldrb	r1, [r5, #4]
 8013d40:	4630      	mov	r0, r6
 8013d42:	f7fc fa31 	bl	80101a8 <ucdr_serialize_bool>
 8013d46:	792b      	ldrb	r3, [r5, #4]
 8013d48:	4004      	ands	r4, r0
 8013d4a:	b2e4      	uxtb	r4, r4
 8013d4c:	b943      	cbnz	r3, 8013d60 <uxr_serialize_OBJK_Topic_Binary+0x30>
 8013d4e:	7b29      	ldrb	r1, [r5, #12]
 8013d50:	4630      	mov	r0, r6
 8013d52:	f7fc fa29 	bl	80101a8 <ucdr_serialize_bool>
 8013d56:	7b2b      	ldrb	r3, [r5, #12]
 8013d58:	4004      	ands	r4, r0
 8013d5a:	b93b      	cbnz	r3, 8013d6c <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8013d5c:	4620      	mov	r0, r4
 8013d5e:	bd70      	pop	{r4, r5, r6, pc}
 8013d60:	68a9      	ldr	r1, [r5, #8]
 8013d62:	4630      	mov	r0, r6
 8013d64:	f007 f836 	bl	801add4 <ucdr_serialize_string>
 8013d68:	4004      	ands	r4, r0
 8013d6a:	e7f0      	b.n	8013d4e <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8013d6c:	6929      	ldr	r1, [r5, #16]
 8013d6e:	4630      	mov	r0, r6
 8013d70:	f007 f830 	bl	801add4 <ucdr_serialize_string>
 8013d74:	4004      	ands	r4, r0
 8013d76:	b2e4      	uxtb	r4, r4
 8013d78:	4620      	mov	r0, r4
 8013d7a:	bd70      	pop	{r4, r5, r6, pc}

08013d7c <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8013d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d80:	460c      	mov	r4, r1
 8013d82:	7809      	ldrb	r1, [r1, #0]
 8013d84:	4606      	mov	r6, r0
 8013d86:	f7fc fa0f 	bl	80101a8 <ucdr_serialize_bool>
 8013d8a:	7823      	ldrb	r3, [r4, #0]
 8013d8c:	4605      	mov	r5, r0
 8013d8e:	b96b      	cbnz	r3, 8013dac <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8013d90:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8013d94:	4630      	mov	r0, r6
 8013d96:	f7fc fa07 	bl	80101a8 <ucdr_serialize_bool>
 8013d9a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8013d9e:	4005      	ands	r5, r0
 8013da0:	b2ed      	uxtb	r5, r5
 8013da2:	2b00      	cmp	r3, #0
 8013da4:	d169      	bne.n	8013e7a <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 8013da6:	4628      	mov	r0, r5
 8013da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013dac:	6861      	ldr	r1, [r4, #4]
 8013dae:	4630      	mov	r0, r6
 8013db0:	f7fc fc3e 	bl	8010630 <ucdr_serialize_uint32_t>
 8013db4:	6863      	ldr	r3, [r4, #4]
 8013db6:	2b00      	cmp	r3, #0
 8013db8:	d06b      	beq.n	8013e92 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 8013dba:	2800      	cmp	r0, #0
 8013dbc:	d067      	beq.n	8013e8e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013dbe:	68a1      	ldr	r1, [r4, #8]
 8013dc0:	4630      	mov	r0, r6
 8013dc2:	f007 f807 	bl	801add4 <ucdr_serialize_string>
 8013dc6:	6863      	ldr	r3, [r4, #4]
 8013dc8:	2b01      	cmp	r3, #1
 8013dca:	d953      	bls.n	8013e74 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013dcc:	2800      	cmp	r0, #0
 8013dce:	d05e      	beq.n	8013e8e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013dd0:	68e1      	ldr	r1, [r4, #12]
 8013dd2:	4630      	mov	r0, r6
 8013dd4:	f006 fffe 	bl	801add4 <ucdr_serialize_string>
 8013dd8:	6863      	ldr	r3, [r4, #4]
 8013dda:	2b02      	cmp	r3, #2
 8013ddc:	d94a      	bls.n	8013e74 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013dde:	2800      	cmp	r0, #0
 8013de0:	d055      	beq.n	8013e8e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013de2:	6921      	ldr	r1, [r4, #16]
 8013de4:	4630      	mov	r0, r6
 8013de6:	f006 fff5 	bl	801add4 <ucdr_serialize_string>
 8013dea:	6863      	ldr	r3, [r4, #4]
 8013dec:	2b03      	cmp	r3, #3
 8013dee:	d941      	bls.n	8013e74 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013df0:	2800      	cmp	r0, #0
 8013df2:	d04c      	beq.n	8013e8e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013df4:	6961      	ldr	r1, [r4, #20]
 8013df6:	4630      	mov	r0, r6
 8013df8:	f006 ffec 	bl	801add4 <ucdr_serialize_string>
 8013dfc:	6863      	ldr	r3, [r4, #4]
 8013dfe:	2b04      	cmp	r3, #4
 8013e00:	d938      	bls.n	8013e74 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013e02:	2800      	cmp	r0, #0
 8013e04:	d043      	beq.n	8013e8e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013e06:	69a1      	ldr	r1, [r4, #24]
 8013e08:	4630      	mov	r0, r6
 8013e0a:	f006 ffe3 	bl	801add4 <ucdr_serialize_string>
 8013e0e:	6863      	ldr	r3, [r4, #4]
 8013e10:	2b05      	cmp	r3, #5
 8013e12:	d92f      	bls.n	8013e74 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013e14:	2800      	cmp	r0, #0
 8013e16:	d03a      	beq.n	8013e8e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013e18:	69e1      	ldr	r1, [r4, #28]
 8013e1a:	4630      	mov	r0, r6
 8013e1c:	f006 ffda 	bl	801add4 <ucdr_serialize_string>
 8013e20:	6863      	ldr	r3, [r4, #4]
 8013e22:	2b06      	cmp	r3, #6
 8013e24:	d926      	bls.n	8013e74 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013e26:	b390      	cbz	r0, 8013e8e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013e28:	6a21      	ldr	r1, [r4, #32]
 8013e2a:	4630      	mov	r0, r6
 8013e2c:	f006 ffd2 	bl	801add4 <ucdr_serialize_string>
 8013e30:	6863      	ldr	r3, [r4, #4]
 8013e32:	2b07      	cmp	r3, #7
 8013e34:	d91e      	bls.n	8013e74 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013e36:	b350      	cbz	r0, 8013e8e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013e38:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8013e3a:	4630      	mov	r0, r6
 8013e3c:	f006 ffca 	bl	801add4 <ucdr_serialize_string>
 8013e40:	6863      	ldr	r3, [r4, #4]
 8013e42:	2b08      	cmp	r3, #8
 8013e44:	d916      	bls.n	8013e74 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013e46:	b310      	cbz	r0, 8013e8e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013e48:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8013e4a:	4630      	mov	r0, r6
 8013e4c:	f006 ffc2 	bl	801add4 <ucdr_serialize_string>
 8013e50:	6863      	ldr	r3, [r4, #4]
 8013e52:	2b09      	cmp	r3, #9
 8013e54:	d90e      	bls.n	8013e74 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013e56:	b1d0      	cbz	r0, 8013e8e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013e58:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8013e5c:	2709      	movs	r7, #9
 8013e5e:	e000      	b.n	8013e62 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8013e60:	b1a8      	cbz	r0, 8013e8e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013e62:	f858 1b04 	ldr.w	r1, [r8], #4
 8013e66:	4630      	mov	r0, r6
 8013e68:	f006 ffb4 	bl	801add4 <ucdr_serialize_string>
 8013e6c:	3701      	adds	r7, #1
 8013e6e:	6862      	ldr	r2, [r4, #4]
 8013e70:	4297      	cmp	r7, r2
 8013e72:	d3f5      	bcc.n	8013e60 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8013e74:	4005      	ands	r5, r0
 8013e76:	b2ed      	uxtb	r5, r5
 8013e78:	e78a      	b.n	8013d90 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8013e7a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8013e7c:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8013e80:	4630      	mov	r0, r6
 8013e82:	f006 ff7b 	bl	801ad7c <ucdr_serialize_sequence_uint8_t>
 8013e86:	4005      	ands	r5, r0
 8013e88:	4628      	mov	r0, r5
 8013e8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e8e:	2500      	movs	r5, #0
 8013e90:	e77e      	b.n	8013d90 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8013e92:	4028      	ands	r0, r5
 8013e94:	b2c5      	uxtb	r5, r0
 8013e96:	e77b      	b.n	8013d90 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08013e98 <uxr_serialize_OBJK_Publisher_Binary>:
 8013e98:	b570      	push	{r4, r5, r6, lr}
 8013e9a:	460d      	mov	r5, r1
 8013e9c:	7809      	ldrb	r1, [r1, #0]
 8013e9e:	4606      	mov	r6, r0
 8013ea0:	f7fc f982 	bl	80101a8 <ucdr_serialize_bool>
 8013ea4:	782b      	ldrb	r3, [r5, #0]
 8013ea6:	4604      	mov	r4, r0
 8013ea8:	b94b      	cbnz	r3, 8013ebe <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8013eaa:	7a29      	ldrb	r1, [r5, #8]
 8013eac:	4630      	mov	r0, r6
 8013eae:	f7fc f97b 	bl	80101a8 <ucdr_serialize_bool>
 8013eb2:	7a2b      	ldrb	r3, [r5, #8]
 8013eb4:	4004      	ands	r4, r0
 8013eb6:	b2e4      	uxtb	r4, r4
 8013eb8:	b943      	cbnz	r3, 8013ecc <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8013eba:	4620      	mov	r0, r4
 8013ebc:	bd70      	pop	{r4, r5, r6, pc}
 8013ebe:	6869      	ldr	r1, [r5, #4]
 8013ec0:	4630      	mov	r0, r6
 8013ec2:	f006 ff87 	bl	801add4 <ucdr_serialize_string>
 8013ec6:	4004      	ands	r4, r0
 8013ec8:	b2e4      	uxtb	r4, r4
 8013eca:	e7ee      	b.n	8013eaa <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8013ecc:	f105 010c 	add.w	r1, r5, #12
 8013ed0:	4630      	mov	r0, r6
 8013ed2:	f7ff ff53 	bl	8013d7c <uxr_serialize_OBJK_Publisher_Binary_Qos>
 8013ed6:	4004      	ands	r4, r0
 8013ed8:	4620      	mov	r0, r4
 8013eda:	bd70      	pop	{r4, r5, r6, pc}

08013edc <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 8013edc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ee0:	460c      	mov	r4, r1
 8013ee2:	7809      	ldrb	r1, [r1, #0]
 8013ee4:	4606      	mov	r6, r0
 8013ee6:	f7fc f95f 	bl	80101a8 <ucdr_serialize_bool>
 8013eea:	7823      	ldrb	r3, [r4, #0]
 8013eec:	4605      	mov	r5, r0
 8013eee:	b96b      	cbnz	r3, 8013f0c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 8013ef0:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8013ef4:	4630      	mov	r0, r6
 8013ef6:	f7fc f957 	bl	80101a8 <ucdr_serialize_bool>
 8013efa:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8013efe:	4005      	ands	r5, r0
 8013f00:	b2ed      	uxtb	r5, r5
 8013f02:	2b00      	cmp	r3, #0
 8013f04:	d169      	bne.n	8013fda <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 8013f06:	4628      	mov	r0, r5
 8013f08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f0c:	6861      	ldr	r1, [r4, #4]
 8013f0e:	4630      	mov	r0, r6
 8013f10:	f7fc fb8e 	bl	8010630 <ucdr_serialize_uint32_t>
 8013f14:	6863      	ldr	r3, [r4, #4]
 8013f16:	2b00      	cmp	r3, #0
 8013f18:	d06b      	beq.n	8013ff2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 8013f1a:	2800      	cmp	r0, #0
 8013f1c:	d067      	beq.n	8013fee <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013f1e:	68a1      	ldr	r1, [r4, #8]
 8013f20:	4630      	mov	r0, r6
 8013f22:	f006 ff57 	bl	801add4 <ucdr_serialize_string>
 8013f26:	6863      	ldr	r3, [r4, #4]
 8013f28:	2b01      	cmp	r3, #1
 8013f2a:	d953      	bls.n	8013fd4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013f2c:	2800      	cmp	r0, #0
 8013f2e:	d05e      	beq.n	8013fee <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013f30:	68e1      	ldr	r1, [r4, #12]
 8013f32:	4630      	mov	r0, r6
 8013f34:	f006 ff4e 	bl	801add4 <ucdr_serialize_string>
 8013f38:	6863      	ldr	r3, [r4, #4]
 8013f3a:	2b02      	cmp	r3, #2
 8013f3c:	d94a      	bls.n	8013fd4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013f3e:	2800      	cmp	r0, #0
 8013f40:	d055      	beq.n	8013fee <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013f42:	6921      	ldr	r1, [r4, #16]
 8013f44:	4630      	mov	r0, r6
 8013f46:	f006 ff45 	bl	801add4 <ucdr_serialize_string>
 8013f4a:	6863      	ldr	r3, [r4, #4]
 8013f4c:	2b03      	cmp	r3, #3
 8013f4e:	d941      	bls.n	8013fd4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013f50:	2800      	cmp	r0, #0
 8013f52:	d04c      	beq.n	8013fee <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013f54:	6961      	ldr	r1, [r4, #20]
 8013f56:	4630      	mov	r0, r6
 8013f58:	f006 ff3c 	bl	801add4 <ucdr_serialize_string>
 8013f5c:	6863      	ldr	r3, [r4, #4]
 8013f5e:	2b04      	cmp	r3, #4
 8013f60:	d938      	bls.n	8013fd4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013f62:	2800      	cmp	r0, #0
 8013f64:	d043      	beq.n	8013fee <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013f66:	69a1      	ldr	r1, [r4, #24]
 8013f68:	4630      	mov	r0, r6
 8013f6a:	f006 ff33 	bl	801add4 <ucdr_serialize_string>
 8013f6e:	6863      	ldr	r3, [r4, #4]
 8013f70:	2b05      	cmp	r3, #5
 8013f72:	d92f      	bls.n	8013fd4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013f74:	2800      	cmp	r0, #0
 8013f76:	d03a      	beq.n	8013fee <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013f78:	69e1      	ldr	r1, [r4, #28]
 8013f7a:	4630      	mov	r0, r6
 8013f7c:	f006 ff2a 	bl	801add4 <ucdr_serialize_string>
 8013f80:	6863      	ldr	r3, [r4, #4]
 8013f82:	2b06      	cmp	r3, #6
 8013f84:	d926      	bls.n	8013fd4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013f86:	b390      	cbz	r0, 8013fee <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013f88:	6a21      	ldr	r1, [r4, #32]
 8013f8a:	4630      	mov	r0, r6
 8013f8c:	f006 ff22 	bl	801add4 <ucdr_serialize_string>
 8013f90:	6863      	ldr	r3, [r4, #4]
 8013f92:	2b07      	cmp	r3, #7
 8013f94:	d91e      	bls.n	8013fd4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013f96:	b350      	cbz	r0, 8013fee <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013f98:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8013f9a:	4630      	mov	r0, r6
 8013f9c:	f006 ff1a 	bl	801add4 <ucdr_serialize_string>
 8013fa0:	6863      	ldr	r3, [r4, #4]
 8013fa2:	2b08      	cmp	r3, #8
 8013fa4:	d916      	bls.n	8013fd4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013fa6:	b310      	cbz	r0, 8013fee <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013fa8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8013faa:	4630      	mov	r0, r6
 8013fac:	f006 ff12 	bl	801add4 <ucdr_serialize_string>
 8013fb0:	6863      	ldr	r3, [r4, #4]
 8013fb2:	2b09      	cmp	r3, #9
 8013fb4:	d90e      	bls.n	8013fd4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013fb6:	b1d0      	cbz	r0, 8013fee <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013fb8:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8013fbc:	2709      	movs	r7, #9
 8013fbe:	e000      	b.n	8013fc2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 8013fc0:	b1a8      	cbz	r0, 8013fee <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013fc2:	f858 1b04 	ldr.w	r1, [r8], #4
 8013fc6:	4630      	mov	r0, r6
 8013fc8:	f006 ff04 	bl	801add4 <ucdr_serialize_string>
 8013fcc:	3701      	adds	r7, #1
 8013fce:	6862      	ldr	r2, [r4, #4]
 8013fd0:	4297      	cmp	r7, r2
 8013fd2:	d3f5      	bcc.n	8013fc0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 8013fd4:	4005      	ands	r5, r0
 8013fd6:	b2ed      	uxtb	r5, r5
 8013fd8:	e78a      	b.n	8013ef0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8013fda:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8013fdc:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8013fe0:	4630      	mov	r0, r6
 8013fe2:	f006 fecb 	bl	801ad7c <ucdr_serialize_sequence_uint8_t>
 8013fe6:	4005      	ands	r5, r0
 8013fe8:	4628      	mov	r0, r5
 8013fea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013fee:	2500      	movs	r5, #0
 8013ff0:	e77e      	b.n	8013ef0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8013ff2:	4028      	ands	r0, r5
 8013ff4:	b2c5      	uxtb	r5, r0
 8013ff6:	e77b      	b.n	8013ef0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

08013ff8 <uxr_serialize_OBJK_Subscriber_Binary>:
 8013ff8:	b570      	push	{r4, r5, r6, lr}
 8013ffa:	460d      	mov	r5, r1
 8013ffc:	7809      	ldrb	r1, [r1, #0]
 8013ffe:	4606      	mov	r6, r0
 8014000:	f7fc f8d2 	bl	80101a8 <ucdr_serialize_bool>
 8014004:	782b      	ldrb	r3, [r5, #0]
 8014006:	4604      	mov	r4, r0
 8014008:	b94b      	cbnz	r3, 801401e <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 801400a:	7a29      	ldrb	r1, [r5, #8]
 801400c:	4630      	mov	r0, r6
 801400e:	f7fc f8cb 	bl	80101a8 <ucdr_serialize_bool>
 8014012:	7a2b      	ldrb	r3, [r5, #8]
 8014014:	4004      	ands	r4, r0
 8014016:	b2e4      	uxtb	r4, r4
 8014018:	b943      	cbnz	r3, 801402c <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 801401a:	4620      	mov	r0, r4
 801401c:	bd70      	pop	{r4, r5, r6, pc}
 801401e:	6869      	ldr	r1, [r5, #4]
 8014020:	4630      	mov	r0, r6
 8014022:	f006 fed7 	bl	801add4 <ucdr_serialize_string>
 8014026:	4004      	ands	r4, r0
 8014028:	b2e4      	uxtb	r4, r4
 801402a:	e7ee      	b.n	801400a <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 801402c:	f105 010c 	add.w	r1, r5, #12
 8014030:	4630      	mov	r0, r6
 8014032:	f7ff ff53 	bl	8013edc <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 8014036:	4004      	ands	r4, r0
 8014038:	4620      	mov	r0, r4
 801403a:	bd70      	pop	{r4, r5, r6, pc}

0801403c <uxr_serialize_OBJK_Endpoint_QosBinary>:
 801403c:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8014040:	4688      	mov	r8, r1
 8014042:	4681      	mov	r9, r0
 8014044:	8809      	ldrh	r1, [r1, #0]
 8014046:	f7fc f909 	bl	801025c <ucdr_serialize_uint16_t>
 801404a:	4606      	mov	r6, r0
 801404c:	f898 1002 	ldrb.w	r1, [r8, #2]
 8014050:	4648      	mov	r0, r9
 8014052:	f7fc f8a9 	bl	80101a8 <ucdr_serialize_bool>
 8014056:	f898 3002 	ldrb.w	r3, [r8, #2]
 801405a:	4006      	ands	r6, r0
 801405c:	b2f5      	uxtb	r5, r6
 801405e:	b9eb      	cbnz	r3, 801409c <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8014060:	f898 1006 	ldrb.w	r1, [r8, #6]
 8014064:	4648      	mov	r0, r9
 8014066:	f7fc f89f 	bl	80101a8 <ucdr_serialize_bool>
 801406a:	f898 3006 	ldrb.w	r3, [r8, #6]
 801406e:	4005      	ands	r5, r0
 8014070:	bb7b      	cbnz	r3, 80140d2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 8014072:	f898 100c 	ldrb.w	r1, [r8, #12]
 8014076:	4648      	mov	r0, r9
 8014078:	f7fc f896 	bl	80101a8 <ucdr_serialize_bool>
 801407c:	f898 300c 	ldrb.w	r3, [r8, #12]
 8014080:	4005      	ands	r5, r0
 8014082:	b9f3      	cbnz	r3, 80140c2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 8014084:	f898 1014 	ldrb.w	r1, [r8, #20]
 8014088:	4648      	mov	r0, r9
 801408a:	f7fc f88d 	bl	80101a8 <ucdr_serialize_bool>
 801408e:	f898 3014 	ldrb.w	r3, [r8, #20]
 8014092:	4005      	ands	r5, r0
 8014094:	b94b      	cbnz	r3, 80140aa <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 8014096:	4628      	mov	r0, r5
 8014098:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 801409c:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 80140a0:	4648      	mov	r0, r9
 80140a2:	f7fc f8db 	bl	801025c <ucdr_serialize_uint16_t>
 80140a6:	4005      	ands	r5, r0
 80140a8:	e7da      	b.n	8014060 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 80140aa:	f8d8 2018 	ldr.w	r2, [r8, #24]
 80140ae:	f108 011c 	add.w	r1, r8, #28
 80140b2:	4648      	mov	r0, r9
 80140b4:	f006 fe62 	bl	801ad7c <ucdr_serialize_sequence_uint8_t>
 80140b8:	4028      	ands	r0, r5
 80140ba:	b2c5      	uxtb	r5, r0
 80140bc:	4628      	mov	r0, r5
 80140be:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 80140c2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80140c6:	4648      	mov	r0, r9
 80140c8:	f7fc fab2 	bl	8010630 <ucdr_serialize_uint32_t>
 80140cc:	4028      	ands	r0, r5
 80140ce:	b2c5      	uxtb	r5, r0
 80140d0:	e7d8      	b.n	8014084 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 80140d2:	f8d8 1008 	ldr.w	r1, [r8, #8]
 80140d6:	4648      	mov	r0, r9
 80140d8:	f7fc faaa 	bl	8010630 <ucdr_serialize_uint32_t>
 80140dc:	4028      	ands	r0, r5
 80140de:	b2c5      	uxtb	r5, r0
 80140e0:	e7c7      	b.n	8014072 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 80140e2:	bf00      	nop

080140e4 <uxr_serialize_OBJK_DataReader_Binary>:
 80140e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80140e6:	2202      	movs	r2, #2
 80140e8:	460c      	mov	r4, r1
 80140ea:	4606      	mov	r6, r0
 80140ec:	f7fb fe3e 	bl	800fd6c <ucdr_serialize_array_uint8_t>
 80140f0:	4605      	mov	r5, r0
 80140f2:	78a1      	ldrb	r1, [r4, #2]
 80140f4:	4630      	mov	r0, r6
 80140f6:	f7fc f857 	bl	80101a8 <ucdr_serialize_bool>
 80140fa:	78a3      	ldrb	r3, [r4, #2]
 80140fc:	4005      	ands	r5, r0
 80140fe:	b2ed      	uxtb	r5, r5
 8014100:	b90b      	cbnz	r3, 8014106 <uxr_serialize_OBJK_DataReader_Binary+0x22>
 8014102:	4628      	mov	r0, r5
 8014104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014106:	f104 0108 	add.w	r1, r4, #8
 801410a:	4630      	mov	r0, r6
 801410c:	f7ff ff96 	bl	801403c <uxr_serialize_OBJK_Endpoint_QosBinary>
 8014110:	4607      	mov	r7, r0
 8014112:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8014116:	4630      	mov	r0, r6
 8014118:	f7fc f846 	bl	80101a8 <ucdr_serialize_bool>
 801411c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8014120:	4038      	ands	r0, r7
 8014122:	b2c7      	uxtb	r7, r0
 8014124:	b95b      	cbnz	r3, 801413e <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 8014126:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 801412a:	4630      	mov	r0, r6
 801412c:	f7fc f83c 	bl	80101a8 <ucdr_serialize_bool>
 8014130:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8014134:	4007      	ands	r7, r0
 8014136:	b94b      	cbnz	r3, 801414c <uxr_serialize_OBJK_DataReader_Binary+0x68>
 8014138:	403d      	ands	r5, r7
 801413a:	4628      	mov	r0, r5
 801413c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801413e:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 8014142:	4630      	mov	r0, r6
 8014144:	f7fc fcca 	bl	8010adc <ucdr_serialize_uint64_t>
 8014148:	4007      	ands	r7, r0
 801414a:	e7ec      	b.n	8014126 <uxr_serialize_OBJK_DataReader_Binary+0x42>
 801414c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801414e:	4630      	mov	r0, r6
 8014150:	f006 fe40 	bl	801add4 <ucdr_serialize_string>
 8014154:	4007      	ands	r7, r0
 8014156:	b2ff      	uxtb	r7, r7
 8014158:	e7ee      	b.n	8014138 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 801415a:	bf00      	nop

0801415c <uxr_serialize_OBJK_DataWriter_Binary>:
 801415c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801415e:	2202      	movs	r2, #2
 8014160:	460d      	mov	r5, r1
 8014162:	4606      	mov	r6, r0
 8014164:	f7fb fe02 	bl	800fd6c <ucdr_serialize_array_uint8_t>
 8014168:	4604      	mov	r4, r0
 801416a:	78a9      	ldrb	r1, [r5, #2]
 801416c:	4630      	mov	r0, r6
 801416e:	f7fc f81b 	bl	80101a8 <ucdr_serialize_bool>
 8014172:	78ab      	ldrb	r3, [r5, #2]
 8014174:	4004      	ands	r4, r0
 8014176:	b2e4      	uxtb	r4, r4
 8014178:	b90b      	cbnz	r3, 801417e <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 801417a:	4620      	mov	r0, r4
 801417c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801417e:	f105 0108 	add.w	r1, r5, #8
 8014182:	4630      	mov	r0, r6
 8014184:	f7ff ff5a 	bl	801403c <uxr_serialize_OBJK_Endpoint_QosBinary>
 8014188:	4607      	mov	r7, r0
 801418a:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
 801418e:	4630      	mov	r0, r6
 8014190:	f7fc f80a 	bl	80101a8 <ucdr_serialize_bool>
 8014194:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 8014198:	4038      	ands	r0, r7
 801419a:	b2c7      	uxtb	r7, r0
 801419c:	b913      	cbnz	r3, 80141a4 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 801419e:	403c      	ands	r4, r7
 80141a0:	4620      	mov	r0, r4
 80141a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80141a4:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
 80141a8:	4630      	mov	r0, r6
 80141aa:	f7fc fc97 	bl	8010adc <ucdr_serialize_uint64_t>
 80141ae:	4007      	ands	r7, r0
 80141b0:	e7f5      	b.n	801419e <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 80141b2:	bf00      	nop

080141b4 <uxr_serialize_OBJK_Replier_Binary>:
 80141b4:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 80141b8:	460f      	mov	r7, r1
 80141ba:	4680      	mov	r8, r0
 80141bc:	6809      	ldr	r1, [r1, #0]
 80141be:	f006 fe09 	bl	801add4 <ucdr_serialize_string>
 80141c2:	4605      	mov	r5, r0
 80141c4:	6879      	ldr	r1, [r7, #4]
 80141c6:	4640      	mov	r0, r8
 80141c8:	f006 fe04 	bl	801add4 <ucdr_serialize_string>
 80141cc:	4005      	ands	r5, r0
 80141ce:	68b9      	ldr	r1, [r7, #8]
 80141d0:	4640      	mov	r0, r8
 80141d2:	b2ec      	uxtb	r4, r5
 80141d4:	f006 fdfe 	bl	801add4 <ucdr_serialize_string>
 80141d8:	7b39      	ldrb	r1, [r7, #12]
 80141da:	4004      	ands	r4, r0
 80141dc:	4640      	mov	r0, r8
 80141de:	f7fb ffe3 	bl	80101a8 <ucdr_serialize_bool>
 80141e2:	7b3b      	ldrb	r3, [r7, #12]
 80141e4:	4004      	ands	r4, r0
 80141e6:	b94b      	cbnz	r3, 80141fc <uxr_serialize_OBJK_Replier_Binary+0x48>
 80141e8:	7d39      	ldrb	r1, [r7, #20]
 80141ea:	4640      	mov	r0, r8
 80141ec:	f7fb ffdc 	bl	80101a8 <ucdr_serialize_bool>
 80141f0:	7d3b      	ldrb	r3, [r7, #20]
 80141f2:	4004      	ands	r4, r0
 80141f4:	b943      	cbnz	r3, 8014208 <uxr_serialize_OBJK_Replier_Binary+0x54>
 80141f6:	4620      	mov	r0, r4
 80141f8:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 80141fc:	6939      	ldr	r1, [r7, #16]
 80141fe:	4640      	mov	r0, r8
 8014200:	f006 fde8 	bl	801add4 <ucdr_serialize_string>
 8014204:	4004      	ands	r4, r0
 8014206:	e7ef      	b.n	80141e8 <uxr_serialize_OBJK_Replier_Binary+0x34>
 8014208:	69b9      	ldr	r1, [r7, #24]
 801420a:	4640      	mov	r0, r8
 801420c:	f006 fde2 	bl	801add4 <ucdr_serialize_string>
 8014210:	4004      	ands	r4, r0
 8014212:	b2e4      	uxtb	r4, r4
 8014214:	4620      	mov	r0, r4
 8014216:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 801421a:	bf00      	nop

0801421c <uxr_deserialize_ObjectVariant>:
 801421c:	b570      	push	{r4, r5, r6, lr}
 801421e:	4605      	mov	r5, r0
 8014220:	460e      	mov	r6, r1
 8014222:	f7fc f805 	bl	8010230 <ucdr_deserialize_uint8_t>
 8014226:	b168      	cbz	r0, 8014244 <uxr_deserialize_ObjectVariant+0x28>
 8014228:	7833      	ldrb	r3, [r6, #0]
 801422a:	4604      	mov	r4, r0
 801422c:	3b01      	subs	r3, #1
 801422e:	2b0d      	cmp	r3, #13
 8014230:	d809      	bhi.n	8014246 <uxr_deserialize_ObjectVariant+0x2a>
 8014232:	e8df f003 	tbb	[pc, r3]
 8014236:	0a41      	.short	0x0a41
 8014238:	0a0a2323 	.word	0x0a0a2323
 801423c:	10080a0a 	.word	0x10080a0a
 8014240:	565c1010 	.word	0x565c1010
 8014244:	2400      	movs	r4, #0
 8014246:	4620      	mov	r0, r4
 8014248:	bd70      	pop	{r4, r5, r6, pc}
 801424a:	1d31      	adds	r1, r6, #4
 801424c:	4628      	mov	r0, r5
 801424e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014252:	f7ff bd21 	b.w	8013c98 <uxr_deserialize_DATAWRITER_Representation>
 8014256:	1d31      	adds	r1, r6, #4
 8014258:	4628      	mov	r0, r5
 801425a:	f7fb ffe9 	bl	8010230 <ucdr_deserialize_uint8_t>
 801425e:	2800      	cmp	r0, #0
 8014260:	d0f0      	beq.n	8014244 <uxr_deserialize_ObjectVariant+0x28>
 8014262:	7933      	ldrb	r3, [r6, #4]
 8014264:	2b01      	cmp	r3, #1
 8014266:	d001      	beq.n	801426c <uxr_deserialize_ObjectVariant+0x50>
 8014268:	2b02      	cmp	r3, #2
 801426a:	d1ec      	bne.n	8014246 <uxr_deserialize_ObjectVariant+0x2a>
 801426c:	68b1      	ldr	r1, [r6, #8]
 801426e:	4628      	mov	r0, r5
 8014270:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014274:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014278:	f006 bdbc 	b.w	801adf4 <ucdr_deserialize_string>
 801427c:	1d31      	adds	r1, r6, #4
 801427e:	4628      	mov	r0, r5
 8014280:	f7fb ffd6 	bl	8010230 <ucdr_deserialize_uint8_t>
 8014284:	4604      	mov	r4, r0
 8014286:	b170      	cbz	r0, 80142a6 <uxr_deserialize_ObjectVariant+0x8a>
 8014288:	7933      	ldrb	r3, [r6, #4]
 801428a:	2b02      	cmp	r3, #2
 801428c:	d04c      	beq.n	8014328 <uxr_deserialize_ObjectVariant+0x10c>
 801428e:	2b03      	cmp	r3, #3
 8014290:	d109      	bne.n	80142a6 <uxr_deserialize_ObjectVariant+0x8a>
 8014292:	f106 0308 	add.w	r3, r6, #8
 8014296:	f44f 7200 	mov.w	r2, #512	; 0x200
 801429a:	f106 010c 	add.w	r1, r6, #12
 801429e:	4628      	mov	r0, r5
 80142a0:	f006 fd7e 	bl	801ada0 <ucdr_deserialize_sequence_uint8_t>
 80142a4:	4604      	mov	r4, r0
 80142a6:	2202      	movs	r2, #2
 80142a8:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 80142ac:	4628      	mov	r0, r5
 80142ae:	f7fb fdc1 	bl	800fe34 <ucdr_deserialize_array_uint8_t>
 80142b2:	4020      	ands	r0, r4
 80142b4:	b2c4      	uxtb	r4, r0
 80142b6:	e7c6      	b.n	8014246 <uxr_deserialize_ObjectVariant+0x2a>
 80142b8:	1d31      	adds	r1, r6, #4
 80142ba:	4628      	mov	r0, r5
 80142bc:	f7fb ffb8 	bl	8010230 <ucdr_deserialize_uint8_t>
 80142c0:	4604      	mov	r4, r0
 80142c2:	b130      	cbz	r0, 80142d2 <uxr_deserialize_ObjectVariant+0xb6>
 80142c4:	7933      	ldrb	r3, [r6, #4]
 80142c6:	2b02      	cmp	r3, #2
 80142c8:	d036      	beq.n	8014338 <uxr_deserialize_ObjectVariant+0x11c>
 80142ca:	2b03      	cmp	r3, #3
 80142cc:	d03c      	beq.n	8014348 <uxr_deserialize_ObjectVariant+0x12c>
 80142ce:	2b01      	cmp	r3, #1
 80142d0:	d032      	beq.n	8014338 <uxr_deserialize_ObjectVariant+0x11c>
 80142d2:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 80142d6:	4628      	mov	r0, r5
 80142d8:	f7fc fdd0 	bl	8010e7c <ucdr_deserialize_int16_t>
 80142dc:	4020      	ands	r0, r4
 80142de:	b2c4      	uxtb	r4, r0
 80142e0:	e7b1      	b.n	8014246 <uxr_deserialize_ObjectVariant+0x2a>
 80142e2:	1d31      	adds	r1, r6, #4
 80142e4:	4628      	mov	r0, r5
 80142e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80142ea:	f7ff bb8b 	b.w	8013a04 <uxr_deserialize_CLIENT_Representation>
 80142ee:	2204      	movs	r2, #4
 80142f0:	4628      	mov	r0, r5
 80142f2:	18b1      	adds	r1, r6, r2
 80142f4:	f7fb fd9e 	bl	800fe34 <ucdr_deserialize_array_uint8_t>
 80142f8:	4604      	mov	r4, r0
 80142fa:	2202      	movs	r2, #2
 80142fc:	f106 0108 	add.w	r1, r6, #8
 8014300:	4628      	mov	r0, r5
 8014302:	f7fb fd97 	bl	800fe34 <ucdr_deserialize_array_uint8_t>
 8014306:	4004      	ands	r4, r0
 8014308:	2202      	movs	r2, #2
 801430a:	f106 010a 	add.w	r1, r6, #10
 801430e:	4628      	mov	r0, r5
 8014310:	b2e4      	uxtb	r4, r4
 8014312:	f7fb fd8f 	bl	800fe34 <ucdr_deserialize_array_uint8_t>
 8014316:	4603      	mov	r3, r0
 8014318:	f106 010c 	add.w	r1, r6, #12
 801431c:	4628      	mov	r0, r5
 801431e:	401c      	ands	r4, r3
 8014320:	f7fb ff58 	bl	80101d4 <ucdr_deserialize_bool>
 8014324:	4004      	ands	r4, r0
 8014326:	e78e      	b.n	8014246 <uxr_deserialize_ObjectVariant+0x2a>
 8014328:	f44f 7200 	mov.w	r2, #512	; 0x200
 801432c:	68b1      	ldr	r1, [r6, #8]
 801432e:	4628      	mov	r0, r5
 8014330:	f006 fd60 	bl	801adf4 <ucdr_deserialize_string>
 8014334:	4604      	mov	r4, r0
 8014336:	e7b6      	b.n	80142a6 <uxr_deserialize_ObjectVariant+0x8a>
 8014338:	f44f 7200 	mov.w	r2, #512	; 0x200
 801433c:	68b1      	ldr	r1, [r6, #8]
 801433e:	4628      	mov	r0, r5
 8014340:	f006 fd58 	bl	801adf4 <ucdr_deserialize_string>
 8014344:	4604      	mov	r4, r0
 8014346:	e7c4      	b.n	80142d2 <uxr_deserialize_ObjectVariant+0xb6>
 8014348:	f106 0308 	add.w	r3, r6, #8
 801434c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014350:	f106 010c 	add.w	r1, r6, #12
 8014354:	4628      	mov	r0, r5
 8014356:	f006 fd23 	bl	801ada0 <ucdr_deserialize_sequence_uint8_t>
 801435a:	4604      	mov	r4, r0
 801435c:	e7b9      	b.n	80142d2 <uxr_deserialize_ObjectVariant+0xb6>
 801435e:	bf00      	nop

08014360 <uxr_deserialize_BaseObjectRequest>:
 8014360:	b570      	push	{r4, r5, r6, lr}
 8014362:	2202      	movs	r2, #2
 8014364:	4605      	mov	r5, r0
 8014366:	460e      	mov	r6, r1
 8014368:	f7fb fd64 	bl	800fe34 <ucdr_deserialize_array_uint8_t>
 801436c:	2202      	movs	r2, #2
 801436e:	4604      	mov	r4, r0
 8014370:	4628      	mov	r0, r5
 8014372:	18b1      	adds	r1, r6, r2
 8014374:	f7fb fd5e 	bl	800fe34 <ucdr_deserialize_array_uint8_t>
 8014378:	4020      	ands	r0, r4
 801437a:	b2c0      	uxtb	r0, r0
 801437c:	bd70      	pop	{r4, r5, r6, pc}
 801437e:	bf00      	nop

08014380 <uxr_serialize_ActivityInfoVariant>:
 8014380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014384:	460e      	mov	r6, r1
 8014386:	7809      	ldrb	r1, [r1, #0]
 8014388:	4680      	mov	r8, r0
 801438a:	f7fb ff3b 	bl	8010204 <ucdr_serialize_uint8_t>
 801438e:	4607      	mov	r7, r0
 8014390:	b138      	cbz	r0, 80143a2 <uxr_serialize_ActivityInfoVariant+0x22>
 8014392:	7833      	ldrb	r3, [r6, #0]
 8014394:	2b06      	cmp	r3, #6
 8014396:	f000 8081 	beq.w	801449c <uxr_serialize_ActivityInfoVariant+0x11c>
 801439a:	2b0d      	cmp	r3, #13
 801439c:	d014      	beq.n	80143c8 <uxr_serialize_ActivityInfoVariant+0x48>
 801439e:	2b05      	cmp	r3, #5
 80143a0:	d002      	beq.n	80143a8 <uxr_serialize_ActivityInfoVariant+0x28>
 80143a2:	4638      	mov	r0, r7
 80143a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80143a8:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 80143ac:	4640      	mov	r0, r8
 80143ae:	f7fc fc65 	bl	8010c7c <ucdr_serialize_int16_t>
 80143b2:	4607      	mov	r7, r0
 80143b4:	4640      	mov	r0, r8
 80143b6:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 80143ba:	f7fc fb8f 	bl	8010adc <ucdr_serialize_uint64_t>
 80143be:	4038      	ands	r0, r7
 80143c0:	b2c7      	uxtb	r7, r0
 80143c2:	4638      	mov	r0, r7
 80143c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80143c8:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 80143cc:	4640      	mov	r0, r8
 80143ce:	f7fc fc55 	bl	8010c7c <ucdr_serialize_int16_t>
 80143d2:	68f1      	ldr	r1, [r6, #12]
 80143d4:	4607      	mov	r7, r0
 80143d6:	4640      	mov	r0, r8
 80143d8:	f7fc f92a 	bl	8010630 <ucdr_serialize_uint32_t>
 80143dc:	68f3      	ldr	r3, [r6, #12]
 80143de:	2b00      	cmp	r3, #0
 80143e0:	d0ed      	beq.n	80143be <uxr_serialize_ActivityInfoVariant+0x3e>
 80143e2:	b318      	cbz	r0, 801442c <uxr_serialize_ActivityInfoVariant+0xac>
 80143e4:	f106 090c 	add.w	r9, r6, #12
 80143e8:	2400      	movs	r4, #0
 80143ea:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 80143ee:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
 80143f2:	7c29      	ldrb	r1, [r5, #16]
 80143f4:	4640      	mov	r0, r8
 80143f6:	f7fb ff05 	bl	8010204 <ucdr_serialize_uint8_t>
 80143fa:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 80143fe:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8014402:	2800      	cmp	r0, #0
 8014404:	d051      	beq.n	80144aa <uxr_serialize_ActivityInfoVariant+0x12a>
 8014406:	7c2b      	ldrb	r3, [r5, #16]
 8014408:	00c9      	lsls	r1, r1, #3
 801440a:	2b03      	cmp	r3, #3
 801440c:	d854      	bhi.n	80144b8 <uxr_serialize_ActivityInfoVariant+0x138>
 801440e:	e8df f003 	tbb	[pc, r3]
 8014412:	2133      	.short	0x2133
 8014414:	020f      	.short	0x020f
 8014416:	4449      	add	r1, r9
 8014418:	4640      	mov	r0, r8
 801441a:	6889      	ldr	r1, [r1, #8]
 801441c:	f006 fcda 	bl	801add4 <ucdr_serialize_string>
 8014420:	3401      	adds	r4, #1
 8014422:	68f2      	ldr	r2, [r6, #12]
 8014424:	4294      	cmp	r4, r2
 8014426:	d244      	bcs.n	80144b2 <uxr_serialize_ActivityInfoVariant+0x132>
 8014428:	2800      	cmp	r0, #0
 801442a:	d1de      	bne.n	80143ea <uxr_serialize_ActivityInfoVariant+0x6a>
 801442c:	2700      	movs	r7, #0
 801442e:	e7b8      	b.n	80143a2 <uxr_serialize_ActivityInfoVariant+0x22>
 8014430:	3108      	adds	r1, #8
 8014432:	44a2      	add	sl, r4
 8014434:	2210      	movs	r2, #16
 8014436:	4640      	mov	r0, r8
 8014438:	4449      	add	r1, r9
 801443a:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801443e:	f7fb fc95 	bl	800fd6c <ucdr_serialize_array_uint8_t>
 8014442:	4605      	mov	r5, r0
 8014444:	f8da 1024 	ldr.w	r1, [sl, #36]	; 0x24
 8014448:	4640      	mov	r0, r8
 801444a:	f7fc f8f1 	bl	8010630 <ucdr_serialize_uint32_t>
 801444e:	4028      	ands	r0, r5
 8014450:	b2c0      	uxtb	r0, r0
 8014452:	e7e5      	b.n	8014420 <uxr_serialize_ActivityInfoVariant+0xa0>
 8014454:	3108      	adds	r1, #8
 8014456:	44a2      	add	sl, r4
 8014458:	2204      	movs	r2, #4
 801445a:	4640      	mov	r0, r8
 801445c:	4449      	add	r1, r9
 801445e:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8014462:	f7fb fc83 	bl	800fd6c <ucdr_serialize_array_uint8_t>
 8014466:	4605      	mov	r5, r0
 8014468:	f8ba 1018 	ldrh.w	r1, [sl, #24]
 801446c:	4640      	mov	r0, r8
 801446e:	f7fb fef5 	bl	801025c <ucdr_serialize_uint16_t>
 8014472:	4028      	ands	r0, r5
 8014474:	b2c0      	uxtb	r0, r0
 8014476:	e7d3      	b.n	8014420 <uxr_serialize_ActivityInfoVariant+0xa0>
 8014478:	3108      	adds	r1, #8
 801447a:	44a2      	add	sl, r4
 801447c:	2202      	movs	r2, #2
 801447e:	4640      	mov	r0, r8
 8014480:	4449      	add	r1, r9
 8014482:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8014486:	f7fb fc71 	bl	800fd6c <ucdr_serialize_array_uint8_t>
 801448a:	4605      	mov	r5, r0
 801448c:	f89a 1016 	ldrb.w	r1, [sl, #22]
 8014490:	4640      	mov	r0, r8
 8014492:	f7fb feb7 	bl	8010204 <ucdr_serialize_uint8_t>
 8014496:	4028      	ands	r0, r5
 8014498:	b2c0      	uxtb	r0, r0
 801449a:	e7c1      	b.n	8014420 <uxr_serialize_ActivityInfoVariant+0xa0>
 801449c:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 80144a0:	4640      	mov	r0, r8
 80144a2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80144a6:	f7fc bbe9 	b.w	8010c7c <ucdr_serialize_int16_t>
 80144aa:	3401      	adds	r4, #1
 80144ac:	68f2      	ldr	r2, [r6, #12]
 80144ae:	42a2      	cmp	r2, r4
 80144b0:	d8bc      	bhi.n	801442c <uxr_serialize_ActivityInfoVariant+0xac>
 80144b2:	4007      	ands	r7, r0
 80144b4:	b2ff      	uxtb	r7, r7
 80144b6:	e774      	b.n	80143a2 <uxr_serialize_ActivityInfoVariant+0x22>
 80144b8:	3401      	adds	r4, #1
 80144ba:	68f3      	ldr	r3, [r6, #12]
 80144bc:	3518      	adds	r5, #24
 80144be:	429c      	cmp	r4, r3
 80144c0:	d397      	bcc.n	80143f2 <uxr_serialize_ActivityInfoVariant+0x72>
 80144c2:	e76e      	b.n	80143a2 <uxr_serialize_ActivityInfoVariant+0x22>

080144c4 <uxr_deserialize_BaseObjectReply>:
 80144c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80144c8:	2202      	movs	r2, #2
 80144ca:	4606      	mov	r6, r0
 80144cc:	460f      	mov	r7, r1
 80144ce:	f7fb fcb1 	bl	800fe34 <ucdr_deserialize_array_uint8_t>
 80144d2:	2202      	movs	r2, #2
 80144d4:	4605      	mov	r5, r0
 80144d6:	4630      	mov	r0, r6
 80144d8:	18b9      	adds	r1, r7, r2
 80144da:	f7fb fcab 	bl	800fe34 <ucdr_deserialize_array_uint8_t>
 80144de:	4680      	mov	r8, r0
 80144e0:	1d39      	adds	r1, r7, #4
 80144e2:	4630      	mov	r0, r6
 80144e4:	f7fb fea4 	bl	8010230 <ucdr_deserialize_uint8_t>
 80144e8:	ea05 0508 	and.w	r5, r5, r8
 80144ec:	4604      	mov	r4, r0
 80144ee:	1d79      	adds	r1, r7, #5
 80144f0:	4630      	mov	r0, r6
 80144f2:	402c      	ands	r4, r5
 80144f4:	f7fb fe9c 	bl	8010230 <ucdr_deserialize_uint8_t>
 80144f8:	4020      	ands	r0, r4
 80144fa:	b2c0      	uxtb	r0, r0
 80144fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014500 <uxr_serialize_ReadSpecification>:
 8014500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014502:	460e      	mov	r6, r1
 8014504:	4607      	mov	r7, r0
 8014506:	7809      	ldrb	r1, [r1, #0]
 8014508:	f7fb fe7c 	bl	8010204 <ucdr_serialize_uint8_t>
 801450c:	4604      	mov	r4, r0
 801450e:	7871      	ldrb	r1, [r6, #1]
 8014510:	4638      	mov	r0, r7
 8014512:	f7fb fe77 	bl	8010204 <ucdr_serialize_uint8_t>
 8014516:	4004      	ands	r4, r0
 8014518:	78b1      	ldrb	r1, [r6, #2]
 801451a:	4638      	mov	r0, r7
 801451c:	f7fb fe44 	bl	80101a8 <ucdr_serialize_bool>
 8014520:	78b3      	ldrb	r3, [r6, #2]
 8014522:	b2e4      	uxtb	r4, r4
 8014524:	4004      	ands	r4, r0
 8014526:	b943      	cbnz	r3, 801453a <uxr_serialize_ReadSpecification+0x3a>
 8014528:	7a31      	ldrb	r1, [r6, #8]
 801452a:	4638      	mov	r0, r7
 801452c:	f7fb fe3c 	bl	80101a8 <ucdr_serialize_bool>
 8014530:	7a33      	ldrb	r3, [r6, #8]
 8014532:	4004      	ands	r4, r0
 8014534:	b93b      	cbnz	r3, 8014546 <uxr_serialize_ReadSpecification+0x46>
 8014536:	4620      	mov	r0, r4
 8014538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801453a:	6871      	ldr	r1, [r6, #4]
 801453c:	4638      	mov	r0, r7
 801453e:	f006 fc49 	bl	801add4 <ucdr_serialize_string>
 8014542:	4004      	ands	r4, r0
 8014544:	e7f0      	b.n	8014528 <uxr_serialize_ReadSpecification+0x28>
 8014546:	8971      	ldrh	r1, [r6, #10]
 8014548:	4638      	mov	r0, r7
 801454a:	f7fb fe87 	bl	801025c <ucdr_serialize_uint16_t>
 801454e:	4605      	mov	r5, r0
 8014550:	89b1      	ldrh	r1, [r6, #12]
 8014552:	4638      	mov	r0, r7
 8014554:	f7fb fe82 	bl	801025c <ucdr_serialize_uint16_t>
 8014558:	4005      	ands	r5, r0
 801455a:	89f1      	ldrh	r1, [r6, #14]
 801455c:	4638      	mov	r0, r7
 801455e:	b2ed      	uxtb	r5, r5
 8014560:	f7fb fe7c 	bl	801025c <ucdr_serialize_uint16_t>
 8014564:	8a31      	ldrh	r1, [r6, #16]
 8014566:	4025      	ands	r5, r4
 8014568:	4604      	mov	r4, r0
 801456a:	4638      	mov	r0, r7
 801456c:	4025      	ands	r5, r4
 801456e:	f7fb fe75 	bl	801025c <ucdr_serialize_uint16_t>
 8014572:	ea00 0405 	and.w	r4, r0, r5
 8014576:	4620      	mov	r0, r4
 8014578:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801457a:	bf00      	nop

0801457c <uxr_serialize_CREATE_CLIENT_Payload>:
 801457c:	f7ff b9ea 	b.w	8013954 <uxr_serialize_CLIENT_Representation>

08014580 <uxr_serialize_CREATE_Payload>:
 8014580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014582:	2202      	movs	r2, #2
 8014584:	4607      	mov	r7, r0
 8014586:	460e      	mov	r6, r1
 8014588:	f7fb fbf0 	bl	800fd6c <ucdr_serialize_array_uint8_t>
 801458c:	2202      	movs	r2, #2
 801458e:	4605      	mov	r5, r0
 8014590:	4638      	mov	r0, r7
 8014592:	18b1      	adds	r1, r6, r2
 8014594:	f7fb fbea 	bl	800fd6c <ucdr_serialize_array_uint8_t>
 8014598:	7931      	ldrb	r1, [r6, #4]
 801459a:	4604      	mov	r4, r0
 801459c:	4638      	mov	r0, r7
 801459e:	f7fb fe31 	bl	8010204 <ucdr_serialize_uint8_t>
 80145a2:	b170      	cbz	r0, 80145c2 <uxr_serialize_CREATE_Payload+0x42>
 80145a4:	7933      	ldrb	r3, [r6, #4]
 80145a6:	402c      	ands	r4, r5
 80145a8:	3b01      	subs	r3, #1
 80145aa:	b2e4      	uxtb	r4, r4
 80145ac:	2b0d      	cmp	r3, #13
 80145ae:	d809      	bhi.n	80145c4 <uxr_serialize_CREATE_Payload+0x44>
 80145b0:	e8df f003 	tbb	[pc, r3]
 80145b4:	23230a4c 	.word	0x23230a4c
 80145b8:	0a0a0a0a 	.word	0x0a0a0a0a
 80145bc:	12121208 	.word	0x12121208
 80145c0:	3e45      	.short	0x3e45
 80145c2:	2400      	movs	r4, #0
 80145c4:	4620      	mov	r0, r4
 80145c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80145c8:	f106 0108 	add.w	r1, r6, #8
 80145cc:	4638      	mov	r0, r7
 80145ce:	f7ff fac7 	bl	8013b60 <uxr_serialize_DATAWRITER_Representation>
 80145d2:	4004      	ands	r4, r0
 80145d4:	4620      	mov	r0, r4
 80145d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80145d8:	7a31      	ldrb	r1, [r6, #8]
 80145da:	4638      	mov	r0, r7
 80145dc:	f7fb fe12 	bl	8010204 <ucdr_serialize_uint8_t>
 80145e0:	2800      	cmp	r0, #0
 80145e2:	d0ee      	beq.n	80145c2 <uxr_serialize_CREATE_Payload+0x42>
 80145e4:	7a33      	ldrb	r3, [r6, #8]
 80145e6:	2b01      	cmp	r3, #1
 80145e8:	d001      	beq.n	80145ee <uxr_serialize_CREATE_Payload+0x6e>
 80145ea:	2b02      	cmp	r3, #2
 80145ec:	d1ea      	bne.n	80145c4 <uxr_serialize_CREATE_Payload+0x44>
 80145ee:	68f1      	ldr	r1, [r6, #12]
 80145f0:	4638      	mov	r0, r7
 80145f2:	f006 fbef 	bl	801add4 <ucdr_serialize_string>
 80145f6:	4004      	ands	r4, r0
 80145f8:	e7e4      	b.n	80145c4 <uxr_serialize_CREATE_Payload+0x44>
 80145fa:	7a31      	ldrb	r1, [r6, #8]
 80145fc:	4638      	mov	r0, r7
 80145fe:	f7fb fe01 	bl	8010204 <ucdr_serialize_uint8_t>
 8014602:	4605      	mov	r5, r0
 8014604:	b158      	cbz	r0, 801461e <uxr_serialize_CREATE_Payload+0x9e>
 8014606:	7a33      	ldrb	r3, [r6, #8]
 8014608:	2b02      	cmp	r3, #2
 801460a:	d034      	beq.n	8014676 <uxr_serialize_CREATE_Payload+0xf6>
 801460c:	2b03      	cmp	r3, #3
 801460e:	d106      	bne.n	801461e <uxr_serialize_CREATE_Payload+0x9e>
 8014610:	68f2      	ldr	r2, [r6, #12]
 8014612:	f106 0110 	add.w	r1, r6, #16
 8014616:	4638      	mov	r0, r7
 8014618:	f006 fbb0 	bl	801ad7c <ucdr_serialize_sequence_uint8_t>
 801461c:	4605      	mov	r5, r0
 801461e:	2202      	movs	r2, #2
 8014620:	f506 7104 	add.w	r1, r6, #528	; 0x210
 8014624:	4638      	mov	r0, r7
 8014626:	f7fb fba1 	bl	800fd6c <ucdr_serialize_array_uint8_t>
 801462a:	4028      	ands	r0, r5
 801462c:	4004      	ands	r4, r0
 801462e:	e7c9      	b.n	80145c4 <uxr_serialize_CREATE_Payload+0x44>
 8014630:	f106 0108 	add.w	r1, r6, #8
 8014634:	4638      	mov	r0, r7
 8014636:	f7ff f98d 	bl	8013954 <uxr_serialize_CLIENT_Representation>
 801463a:	4004      	ands	r4, r0
 801463c:	e7c2      	b.n	80145c4 <uxr_serialize_CREATE_Payload+0x44>
 801463e:	f106 0108 	add.w	r1, r6, #8
 8014642:	4638      	mov	r0, r7
 8014644:	f7ff fa42 	bl	8013acc <uxr_serialize_AGENT_Representation>
 8014648:	4004      	ands	r4, r0
 801464a:	e7bb      	b.n	80145c4 <uxr_serialize_CREATE_Payload+0x44>
 801464c:	7a31      	ldrb	r1, [r6, #8]
 801464e:	4638      	mov	r0, r7
 8014650:	f7fb fdd8 	bl	8010204 <ucdr_serialize_uint8_t>
 8014654:	4605      	mov	r5, r0
 8014656:	b130      	cbz	r0, 8014666 <uxr_serialize_CREATE_Payload+0xe6>
 8014658:	7a33      	ldrb	r3, [r6, #8]
 801465a:	2b02      	cmp	r3, #2
 801465c:	d011      	beq.n	8014682 <uxr_serialize_CREATE_Payload+0x102>
 801465e:	2b03      	cmp	r3, #3
 8014660:	d015      	beq.n	801468e <uxr_serialize_CREATE_Payload+0x10e>
 8014662:	2b01      	cmp	r3, #1
 8014664:	d00d      	beq.n	8014682 <uxr_serialize_CREATE_Payload+0x102>
 8014666:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	; 0x210
 801466a:	4638      	mov	r0, r7
 801466c:	f7fc fb06 	bl	8010c7c <ucdr_serialize_int16_t>
 8014670:	4028      	ands	r0, r5
 8014672:	4004      	ands	r4, r0
 8014674:	e7a6      	b.n	80145c4 <uxr_serialize_CREATE_Payload+0x44>
 8014676:	68f1      	ldr	r1, [r6, #12]
 8014678:	4638      	mov	r0, r7
 801467a:	f006 fbab 	bl	801add4 <ucdr_serialize_string>
 801467e:	4605      	mov	r5, r0
 8014680:	e7cd      	b.n	801461e <uxr_serialize_CREATE_Payload+0x9e>
 8014682:	68f1      	ldr	r1, [r6, #12]
 8014684:	4638      	mov	r0, r7
 8014686:	f006 fba5 	bl	801add4 <ucdr_serialize_string>
 801468a:	4605      	mov	r5, r0
 801468c:	e7eb      	b.n	8014666 <uxr_serialize_CREATE_Payload+0xe6>
 801468e:	68f2      	ldr	r2, [r6, #12]
 8014690:	f106 0110 	add.w	r1, r6, #16
 8014694:	4638      	mov	r0, r7
 8014696:	f006 fb71 	bl	801ad7c <ucdr_serialize_sequence_uint8_t>
 801469a:	4605      	mov	r5, r0
 801469c:	e7e3      	b.n	8014666 <uxr_serialize_CREATE_Payload+0xe6>
 801469e:	bf00      	nop

080146a0 <uxr_deserialize_GET_INFO_Payload>:
 80146a0:	b570      	push	{r4, r5, r6, lr}
 80146a2:	2202      	movs	r2, #2
 80146a4:	4605      	mov	r5, r0
 80146a6:	460e      	mov	r6, r1
 80146a8:	f7fb fbc4 	bl	800fe34 <ucdr_deserialize_array_uint8_t>
 80146ac:	2202      	movs	r2, #2
 80146ae:	4604      	mov	r4, r0
 80146b0:	4628      	mov	r0, r5
 80146b2:	18b1      	adds	r1, r6, r2
 80146b4:	f7fb fbbe 	bl	800fe34 <ucdr_deserialize_array_uint8_t>
 80146b8:	4603      	mov	r3, r0
 80146ba:	1d31      	adds	r1, r6, #4
 80146bc:	4628      	mov	r0, r5
 80146be:	401c      	ands	r4, r3
 80146c0:	f7fc f8e6 	bl	8010890 <ucdr_deserialize_uint32_t>
 80146c4:	b2e4      	uxtb	r4, r4
 80146c6:	4020      	ands	r0, r4
 80146c8:	bd70      	pop	{r4, r5, r6, pc}
 80146ca:	bf00      	nop

080146cc <uxr_serialize_DELETE_Payload>:
 80146cc:	b570      	push	{r4, r5, r6, lr}
 80146ce:	2202      	movs	r2, #2
 80146d0:	4605      	mov	r5, r0
 80146d2:	460e      	mov	r6, r1
 80146d4:	f7fb fb4a 	bl	800fd6c <ucdr_serialize_array_uint8_t>
 80146d8:	2202      	movs	r2, #2
 80146da:	4604      	mov	r4, r0
 80146dc:	4628      	mov	r0, r5
 80146de:	18b1      	adds	r1, r6, r2
 80146e0:	f7fb fb44 	bl	800fd6c <ucdr_serialize_array_uint8_t>
 80146e4:	4020      	ands	r0, r4
 80146e6:	b2c0      	uxtb	r0, r0
 80146e8:	bd70      	pop	{r4, r5, r6, pc}
 80146ea:	bf00      	nop

080146ec <uxr_deserialize_STATUS_AGENT_Payload>:
 80146ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80146f0:	460e      	mov	r6, r1
 80146f2:	4605      	mov	r5, r0
 80146f4:	f7fb fd9c 	bl	8010230 <ucdr_deserialize_uint8_t>
 80146f8:	4604      	mov	r4, r0
 80146fa:	1c71      	adds	r1, r6, #1
 80146fc:	4628      	mov	r0, r5
 80146fe:	f7fb fd97 	bl	8010230 <ucdr_deserialize_uint8_t>
 8014702:	2204      	movs	r2, #4
 8014704:	4681      	mov	r9, r0
 8014706:	4628      	mov	r0, r5
 8014708:	18b1      	adds	r1, r6, r2
 801470a:	f7fb fb93 	bl	800fe34 <ucdr_deserialize_array_uint8_t>
 801470e:	f106 0108 	add.w	r1, r6, #8
 8014712:	4680      	mov	r8, r0
 8014714:	2202      	movs	r2, #2
 8014716:	4628      	mov	r0, r5
 8014718:	f7fb fb8c 	bl	800fe34 <ucdr_deserialize_array_uint8_t>
 801471c:	ea04 0309 	and.w	r3, r4, r9
 8014720:	4607      	mov	r7, r0
 8014722:	2202      	movs	r2, #2
 8014724:	b2db      	uxtb	r3, r3
 8014726:	f106 010a 	add.w	r1, r6, #10
 801472a:	4628      	mov	r0, r5
 801472c:	ea03 0408 	and.w	r4, r3, r8
 8014730:	f7fb fb80 	bl	800fe34 <ucdr_deserialize_array_uint8_t>
 8014734:	4603      	mov	r3, r0
 8014736:	4628      	mov	r0, r5
 8014738:	403c      	ands	r4, r7
 801473a:	f106 010c 	add.w	r1, r6, #12
 801473e:	461d      	mov	r5, r3
 8014740:	f7fb fd48 	bl	80101d4 <ucdr_deserialize_bool>
 8014744:	4025      	ands	r5, r4
 8014746:	4028      	ands	r0, r5
 8014748:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801474c <uxr_deserialize_STATUS_Payload>:
 801474c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014750:	2202      	movs	r2, #2
 8014752:	4606      	mov	r6, r0
 8014754:	460f      	mov	r7, r1
 8014756:	f7fb fb6d 	bl	800fe34 <ucdr_deserialize_array_uint8_t>
 801475a:	2202      	movs	r2, #2
 801475c:	4605      	mov	r5, r0
 801475e:	4630      	mov	r0, r6
 8014760:	18b9      	adds	r1, r7, r2
 8014762:	f7fb fb67 	bl	800fe34 <ucdr_deserialize_array_uint8_t>
 8014766:	4680      	mov	r8, r0
 8014768:	1d39      	adds	r1, r7, #4
 801476a:	4630      	mov	r0, r6
 801476c:	f7fb fd60 	bl	8010230 <ucdr_deserialize_uint8_t>
 8014770:	ea05 0508 	and.w	r5, r5, r8
 8014774:	4604      	mov	r4, r0
 8014776:	1d79      	adds	r1, r7, #5
 8014778:	4630      	mov	r0, r6
 801477a:	402c      	ands	r4, r5
 801477c:	f7fb fd58 	bl	8010230 <ucdr_deserialize_uint8_t>
 8014780:	4020      	ands	r0, r4
 8014782:	b2c0      	uxtb	r0, r0
 8014784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014788 <uxr_serialize_INFO_Payload>:
 8014788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801478c:	2202      	movs	r2, #2
 801478e:	460c      	mov	r4, r1
 8014790:	4605      	mov	r5, r0
 8014792:	f7fb faeb 	bl	800fd6c <ucdr_serialize_array_uint8_t>
 8014796:	2202      	movs	r2, #2
 8014798:	4680      	mov	r8, r0
 801479a:	4628      	mov	r0, r5
 801479c:	18a1      	adds	r1, r4, r2
 801479e:	f7fb fae5 	bl	800fd6c <ucdr_serialize_array_uint8_t>
 80147a2:	4607      	mov	r7, r0
 80147a4:	7921      	ldrb	r1, [r4, #4]
 80147a6:	4628      	mov	r0, r5
 80147a8:	f7fb fd2c 	bl	8010204 <ucdr_serialize_uint8_t>
 80147ac:	ea08 0807 	and.w	r8, r8, r7
 80147b0:	4606      	mov	r6, r0
 80147b2:	7961      	ldrb	r1, [r4, #5]
 80147b4:	4628      	mov	r0, r5
 80147b6:	ea06 0608 	and.w	r6, r6, r8
 80147ba:	f7fb fd23 	bl	8010204 <ucdr_serialize_uint8_t>
 80147be:	7a21      	ldrb	r1, [r4, #8]
 80147c0:	4030      	ands	r0, r6
 80147c2:	b2c7      	uxtb	r7, r0
 80147c4:	4628      	mov	r0, r5
 80147c6:	f7fb fcef 	bl	80101a8 <ucdr_serialize_bool>
 80147ca:	7a23      	ldrb	r3, [r4, #8]
 80147cc:	4606      	mov	r6, r0
 80147ce:	b96b      	cbnz	r3, 80147ec <uxr_serialize_INFO_Payload+0x64>
 80147d0:	f894 121c 	ldrb.w	r1, [r4, #540]	; 0x21c
 80147d4:	4628      	mov	r0, r5
 80147d6:	f7fb fce7 	bl	80101a8 <ucdr_serialize_bool>
 80147da:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
 80147de:	4030      	ands	r0, r6
 80147e0:	b2c6      	uxtb	r6, r0
 80147e2:	b983      	cbnz	r3, 8014806 <uxr_serialize_INFO_Payload+0x7e>
 80147e4:	ea06 0007 	and.w	r0, r6, r7
 80147e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80147ec:	7b21      	ldrb	r1, [r4, #12]
 80147ee:	4628      	mov	r0, r5
 80147f0:	f7fb fd08 	bl	8010204 <ucdr_serialize_uint8_t>
 80147f4:	b188      	cbz	r0, 801481a <uxr_serialize_INFO_Payload+0x92>
 80147f6:	f104 010c 	add.w	r1, r4, #12
 80147fa:	4628      	mov	r0, r5
 80147fc:	f7ff f9d8 	bl	8013bb0 <uxr_serialize_ObjectVariant.part.0>
 8014800:	4030      	ands	r0, r6
 8014802:	b2c6      	uxtb	r6, r0
 8014804:	e7e4      	b.n	80147d0 <uxr_serialize_INFO_Payload+0x48>
 8014806:	f504 7108 	add.w	r1, r4, #544	; 0x220
 801480a:	4628      	mov	r0, r5
 801480c:	f7ff fdb8 	bl	8014380 <uxr_serialize_ActivityInfoVariant>
 8014810:	4006      	ands	r6, r0
 8014812:	ea06 0007 	and.w	r0, r6, r7
 8014816:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801481a:	4606      	mov	r6, r0
 801481c:	e7d8      	b.n	80147d0 <uxr_serialize_INFO_Payload+0x48>
 801481e:	bf00      	nop

08014820 <uxr_serialize_READ_DATA_Payload>:
 8014820:	b570      	push	{r4, r5, r6, lr}
 8014822:	2202      	movs	r2, #2
 8014824:	4605      	mov	r5, r0
 8014826:	460e      	mov	r6, r1
 8014828:	f7fb faa0 	bl	800fd6c <ucdr_serialize_array_uint8_t>
 801482c:	2202      	movs	r2, #2
 801482e:	4604      	mov	r4, r0
 8014830:	4628      	mov	r0, r5
 8014832:	18b1      	adds	r1, r6, r2
 8014834:	f7fb fa9a 	bl	800fd6c <ucdr_serialize_array_uint8_t>
 8014838:	4603      	mov	r3, r0
 801483a:	1d31      	adds	r1, r6, #4
 801483c:	4628      	mov	r0, r5
 801483e:	401c      	ands	r4, r3
 8014840:	f7ff fe5e 	bl	8014500 <uxr_serialize_ReadSpecification>
 8014844:	b2e4      	uxtb	r4, r4
 8014846:	4020      	ands	r0, r4
 8014848:	bd70      	pop	{r4, r5, r6, pc}
 801484a:	bf00      	nop

0801484c <uxr_serialize_WRITE_DATA_Payload_Data>:
 801484c:	b570      	push	{r4, r5, r6, lr}
 801484e:	2202      	movs	r2, #2
 8014850:	4605      	mov	r5, r0
 8014852:	460e      	mov	r6, r1
 8014854:	f7fb fa8a 	bl	800fd6c <ucdr_serialize_array_uint8_t>
 8014858:	2202      	movs	r2, #2
 801485a:	4604      	mov	r4, r0
 801485c:	4628      	mov	r0, r5
 801485e:	18b1      	adds	r1, r6, r2
 8014860:	f7fb fa84 	bl	800fd6c <ucdr_serialize_array_uint8_t>
 8014864:	4020      	ands	r0, r4
 8014866:	b2c0      	uxtb	r0, r0
 8014868:	bd70      	pop	{r4, r5, r6, pc}
 801486a:	bf00      	nop

0801486c <uxr_serialize_ACKNACK_Payload>:
 801486c:	b570      	push	{r4, r5, r6, lr}
 801486e:	460c      	mov	r4, r1
 8014870:	4605      	mov	r5, r0
 8014872:	460e      	mov	r6, r1
 8014874:	f834 1b02 	ldrh.w	r1, [r4], #2
 8014878:	f7fb fcf0 	bl	801025c <ucdr_serialize_uint16_t>
 801487c:	2202      	movs	r2, #2
 801487e:	4621      	mov	r1, r4
 8014880:	4604      	mov	r4, r0
 8014882:	4628      	mov	r0, r5
 8014884:	f7fb fa72 	bl	800fd6c <ucdr_serialize_array_uint8_t>
 8014888:	4603      	mov	r3, r0
 801488a:	7931      	ldrb	r1, [r6, #4]
 801488c:	4628      	mov	r0, r5
 801488e:	401c      	ands	r4, r3
 8014890:	f7fb fcb8 	bl	8010204 <ucdr_serialize_uint8_t>
 8014894:	b2e4      	uxtb	r4, r4
 8014896:	4020      	ands	r0, r4
 8014898:	bd70      	pop	{r4, r5, r6, pc}
 801489a:	bf00      	nop

0801489c <uxr_deserialize_ACKNACK_Payload>:
 801489c:	b570      	push	{r4, r5, r6, lr}
 801489e:	460e      	mov	r6, r1
 80148a0:	4605      	mov	r5, r0
 80148a2:	f7fb fddb 	bl	801045c <ucdr_deserialize_uint16_t>
 80148a6:	2202      	movs	r2, #2
 80148a8:	4604      	mov	r4, r0
 80148aa:	4628      	mov	r0, r5
 80148ac:	18b1      	adds	r1, r6, r2
 80148ae:	f7fb fac1 	bl	800fe34 <ucdr_deserialize_array_uint8_t>
 80148b2:	4603      	mov	r3, r0
 80148b4:	1d31      	adds	r1, r6, #4
 80148b6:	4628      	mov	r0, r5
 80148b8:	401c      	ands	r4, r3
 80148ba:	f7fb fcb9 	bl	8010230 <ucdr_deserialize_uint8_t>
 80148be:	b2e4      	uxtb	r4, r4
 80148c0:	4020      	ands	r0, r4
 80148c2:	bd70      	pop	{r4, r5, r6, pc}

080148c4 <uxr_serialize_HEARTBEAT_Payload>:
 80148c4:	b570      	push	{r4, r5, r6, lr}
 80148c6:	460d      	mov	r5, r1
 80148c8:	4606      	mov	r6, r0
 80148ca:	8809      	ldrh	r1, [r1, #0]
 80148cc:	f7fb fcc6 	bl	801025c <ucdr_serialize_uint16_t>
 80148d0:	8869      	ldrh	r1, [r5, #2]
 80148d2:	4604      	mov	r4, r0
 80148d4:	4630      	mov	r0, r6
 80148d6:	f7fb fcc1 	bl	801025c <ucdr_serialize_uint16_t>
 80148da:	4603      	mov	r3, r0
 80148dc:	7929      	ldrb	r1, [r5, #4]
 80148de:	4630      	mov	r0, r6
 80148e0:	401c      	ands	r4, r3
 80148e2:	f7fb fc8f 	bl	8010204 <ucdr_serialize_uint8_t>
 80148e6:	b2e4      	uxtb	r4, r4
 80148e8:	4020      	ands	r0, r4
 80148ea:	bd70      	pop	{r4, r5, r6, pc}

080148ec <uxr_deserialize_HEARTBEAT_Payload>:
 80148ec:	b570      	push	{r4, r5, r6, lr}
 80148ee:	460e      	mov	r6, r1
 80148f0:	4605      	mov	r5, r0
 80148f2:	f7fb fdb3 	bl	801045c <ucdr_deserialize_uint16_t>
 80148f6:	4604      	mov	r4, r0
 80148f8:	1cb1      	adds	r1, r6, #2
 80148fa:	4628      	mov	r0, r5
 80148fc:	f7fb fdae 	bl	801045c <ucdr_deserialize_uint16_t>
 8014900:	4603      	mov	r3, r0
 8014902:	1d31      	adds	r1, r6, #4
 8014904:	4628      	mov	r0, r5
 8014906:	401c      	ands	r4, r3
 8014908:	f7fb fc92 	bl	8010230 <ucdr_deserialize_uint8_t>
 801490c:	b2e4      	uxtb	r4, r4
 801490e:	4020      	ands	r0, r4
 8014910:	bd70      	pop	{r4, r5, r6, pc}
 8014912:	bf00      	nop

08014914 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8014914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014918:	460e      	mov	r6, r1
 801491a:	4605      	mov	r5, r0
 801491c:	f7fc fc30 	bl	8011180 <ucdr_deserialize_int32_t>
 8014920:	4607      	mov	r7, r0
 8014922:	1d31      	adds	r1, r6, #4
 8014924:	4628      	mov	r0, r5
 8014926:	f7fb ffb3 	bl	8010890 <ucdr_deserialize_uint32_t>
 801492a:	4680      	mov	r8, r0
 801492c:	f106 0108 	add.w	r1, r6, #8
 8014930:	4628      	mov	r0, r5
 8014932:	f7fc fc25 	bl	8011180 <ucdr_deserialize_int32_t>
 8014936:	ea07 0708 	and.w	r7, r7, r8
 801493a:	4604      	mov	r4, r0
 801493c:	f106 010c 	add.w	r1, r6, #12
 8014940:	4628      	mov	r0, r5
 8014942:	403c      	ands	r4, r7
 8014944:	f7fb ffa4 	bl	8010890 <ucdr_deserialize_uint32_t>
 8014948:	f106 0110 	add.w	r1, r6, #16
 801494c:	4004      	ands	r4, r0
 801494e:	4628      	mov	r0, r5
 8014950:	f7fc fc16 	bl	8011180 <ucdr_deserialize_int32_t>
 8014954:	4603      	mov	r3, r0
 8014956:	b2e4      	uxtb	r4, r4
 8014958:	4628      	mov	r0, r5
 801495a:	461d      	mov	r5, r3
 801495c:	f106 0114 	add.w	r1, r6, #20
 8014960:	f7fb ff96 	bl	8010890 <ucdr_deserialize_uint32_t>
 8014964:	402c      	ands	r4, r5
 8014966:	4020      	ands	r0, r4
 8014968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801496c <uxr_serialize_SampleIdentity>:
 801496c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014970:	4604      	mov	r4, r0
 8014972:	460d      	mov	r5, r1
 8014974:	220c      	movs	r2, #12
 8014976:	f7fb f9f9 	bl	800fd6c <ucdr_serialize_array_uint8_t>
 801497a:	2203      	movs	r2, #3
 801497c:	f105 010c 	add.w	r1, r5, #12
 8014980:	4607      	mov	r7, r0
 8014982:	4620      	mov	r0, r4
 8014984:	f7fb f9f2 	bl	800fd6c <ucdr_serialize_array_uint8_t>
 8014988:	7be9      	ldrb	r1, [r5, #15]
 801498a:	4680      	mov	r8, r0
 801498c:	4620      	mov	r0, r4
 801498e:	f7fb fc39 	bl	8010204 <ucdr_serialize_uint8_t>
 8014992:	6929      	ldr	r1, [r5, #16]
 8014994:	4606      	mov	r6, r0
 8014996:	4620      	mov	r0, r4
 8014998:	f7fc fb5a 	bl	8011050 <ucdr_serialize_int32_t>
 801499c:	ea07 0708 	and.w	r7, r7, r8
 80149a0:	4603      	mov	r3, r0
 80149a2:	4620      	mov	r0, r4
 80149a4:	403e      	ands	r6, r7
 80149a6:	6969      	ldr	r1, [r5, #20]
 80149a8:	461c      	mov	r4, r3
 80149aa:	f7fb fe41 	bl	8010630 <ucdr_serialize_uint32_t>
 80149ae:	4034      	ands	r4, r6
 80149b0:	4020      	ands	r0, r4
 80149b2:	b2c0      	uxtb	r0, r0
 80149b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080149b8 <uxr_deserialize_SampleIdentity>:
 80149b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80149bc:	4604      	mov	r4, r0
 80149be:	460d      	mov	r5, r1
 80149c0:	220c      	movs	r2, #12
 80149c2:	f7fb fa37 	bl	800fe34 <ucdr_deserialize_array_uint8_t>
 80149c6:	2203      	movs	r2, #3
 80149c8:	f105 010c 	add.w	r1, r5, #12
 80149cc:	4607      	mov	r7, r0
 80149ce:	4620      	mov	r0, r4
 80149d0:	f7fb fa30 	bl	800fe34 <ucdr_deserialize_array_uint8_t>
 80149d4:	f105 010f 	add.w	r1, r5, #15
 80149d8:	4680      	mov	r8, r0
 80149da:	4620      	mov	r0, r4
 80149dc:	f7fb fc28 	bl	8010230 <ucdr_deserialize_uint8_t>
 80149e0:	f105 0110 	add.w	r1, r5, #16
 80149e4:	4606      	mov	r6, r0
 80149e6:	4620      	mov	r0, r4
 80149e8:	f7fc fbca 	bl	8011180 <ucdr_deserialize_int32_t>
 80149ec:	ea07 0708 	and.w	r7, r7, r8
 80149f0:	4603      	mov	r3, r0
 80149f2:	4620      	mov	r0, r4
 80149f4:	403e      	ands	r6, r7
 80149f6:	f105 0114 	add.w	r1, r5, #20
 80149fa:	461c      	mov	r4, r3
 80149fc:	f7fb ff48 	bl	8010890 <ucdr_deserialize_uint32_t>
 8014a00:	4034      	ands	r4, r6
 8014a02:	4020      	ands	r0, r4
 8014a04:	b2c0      	uxtb	r0, r0
 8014a06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a0a:	bf00      	nop

08014a0c <racs_services__srv__Control_Event__get_type_description.part.0>:
 8014a0c:	b510      	push	{r4, lr}
 8014a0e:	2000      	movs	r0, #0
 8014a10:	4c13      	ldr	r4, [pc, #76]	; (8014a60 <racs_services__srv__Control_Event__get_type_description.part.0+0x54>)
 8014a12:	f006 f955 	bl	801acc0 <builtin_interfaces__msg__Time__get_type_description>
 8014a16:	300c      	adds	r0, #12
 8014a18:	4b12      	ldr	r3, [pc, #72]	; (8014a64 <racs_services__srv__Control_Event__get_type_description.part.0+0x58>)
 8014a1a:	c807      	ldmia	r0, {r0, r1, r2}
 8014a1c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8014a20:	7823      	ldrb	r3, [r4, #0]
 8014a22:	b90b      	cbnz	r3, 8014a28 <racs_services__srv__Control_Event__get_type_description.part.0+0x1c>
 8014a24:	2301      	movs	r3, #1
 8014a26:	7023      	strb	r3, [r4, #0]
 8014a28:	4a0f      	ldr	r2, [pc, #60]	; (8014a68 <racs_services__srv__Control_Event__get_type_description.part.0+0x5c>)
 8014a2a:	4b10      	ldr	r3, [pc, #64]	; (8014a6c <racs_services__srv__Control_Event__get_type_description.part.0+0x60>)
 8014a2c:	4c10      	ldr	r4, [pc, #64]	; (8014a70 <racs_services__srv__Control_Event__get_type_description.part.0+0x64>)
 8014a2e:	ca07      	ldmia	r2, {r0, r1, r2}
 8014a30:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8014a34:	7823      	ldrb	r3, [r4, #0]
 8014a36:	b90b      	cbnz	r3, 8014a3c <racs_services__srv__Control_Event__get_type_description.part.0+0x30>
 8014a38:	2301      	movs	r3, #1
 8014a3a:	7023      	strb	r3, [r4, #0]
 8014a3c:	4b0d      	ldr	r3, [pc, #52]	; (8014a74 <racs_services__srv__Control_Event__get_type_description.part.0+0x68>)
 8014a3e:	4c0e      	ldr	r4, [pc, #56]	; (8014a78 <racs_services__srv__Control_Event__get_type_description.part.0+0x6c>)
 8014a40:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014a44:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8014a48:	2000      	movs	r0, #0
 8014a4a:	3418      	adds	r4, #24
 8014a4c:	f006 f8d8 	bl	801ac00 <service_msgs__msg__ServiceEventInfo__get_type_description>
 8014a50:	300c      	adds	r0, #12
 8014a52:	4b0a      	ldr	r3, [pc, #40]	; (8014a7c <racs_services__srv__Control_Event__get_type_description.part.0+0x70>)
 8014a54:	c807      	ldmia	r0, {r0, r1, r2}
 8014a56:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8014a5a:	2201      	movs	r2, #1
 8014a5c:	701a      	strb	r2, [r3, #0]
 8014a5e:	bd10      	pop	{r4, pc}
 8014a60:	20010670 	.word	0x20010670
 8014a64:	20000f20 	.word	0x20000f20
 8014a68:	0801fd7c 	.word	0x0801fd7c
 8014a6c:	20000f38 	.word	0x20000f38
 8014a70:	2001066e 	.word	0x2001066e
 8014a74:	0801fd58 	.word	0x0801fd58
 8014a78:	20000f50 	.word	0x20000f50
 8014a7c:	2001066d 	.word	0x2001066d

08014a80 <racs_services__srv__Control__get_type_hash>:
 8014a80:	4800      	ldr	r0, [pc, #0]	; (8014a84 <racs_services__srv__Control__get_type_hash+0x4>)
 8014a82:	4770      	bx	lr
 8014a84:	20000df0 	.word	0x20000df0

08014a88 <racs_services__srv__Control_Request__get_type_hash>:
 8014a88:	4800      	ldr	r0, [pc, #0]	; (8014a8c <racs_services__srv__Control_Request__get_type_hash+0x4>)
 8014a8a:	4770      	bx	lr
 8014a8c:	20000dcc 	.word	0x20000dcc

08014a90 <racs_services__srv__Control_Response__get_type_hash>:
 8014a90:	4800      	ldr	r0, [pc, #0]	; (8014a94 <racs_services__srv__Control_Response__get_type_hash+0x4>)
 8014a92:	4770      	bx	lr
 8014a94:	20000da8 	.word	0x20000da8

08014a98 <racs_services__srv__Control_Event__get_type_hash>:
 8014a98:	4800      	ldr	r0, [pc, #0]	; (8014a9c <racs_services__srv__Control_Event__get_type_hash+0x4>)
 8014a9a:	4770      	bx	lr
 8014a9c:	20000d84 	.word	0x20000d84

08014aa0 <racs_services__srv__Control__get_type_description>:
 8014aa0:	b538      	push	{r3, r4, r5, lr}
 8014aa2:	4d1c      	ldr	r5, [pc, #112]	; (8014b14 <racs_services__srv__Control__get_type_description+0x74>)
 8014aa4:	7828      	ldrb	r0, [r5, #0]
 8014aa6:	b108      	cbz	r0, 8014aac <racs_services__srv__Control__get_type_description+0xc>
 8014aa8:	481b      	ldr	r0, [pc, #108]	; (8014b18 <racs_services__srv__Control__get_type_description+0x78>)
 8014aaa:	bd38      	pop	{r3, r4, r5, pc}
 8014aac:	f006 f908 	bl	801acc0 <builtin_interfaces__msg__Time__get_type_description>
 8014ab0:	300c      	adds	r0, #12
 8014ab2:	4b1a      	ldr	r3, [pc, #104]	; (8014b1c <racs_services__srv__Control__get_type_description+0x7c>)
 8014ab4:	c807      	ldmia	r0, {r0, r1, r2}
 8014ab6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8014aba:	4b19      	ldr	r3, [pc, #100]	; (8014b20 <racs_services__srv__Control__get_type_description+0x80>)
 8014abc:	781b      	ldrb	r3, [r3, #0]
 8014abe:	b32b      	cbz	r3, 8014b0c <racs_services__srv__Control__get_type_description+0x6c>
 8014ac0:	4a18      	ldr	r2, [pc, #96]	; (8014b24 <racs_services__srv__Control__get_type_description+0x84>)
 8014ac2:	4b19      	ldr	r3, [pc, #100]	; (8014b28 <racs_services__srv__Control__get_type_description+0x88>)
 8014ac4:	4c19      	ldr	r4, [pc, #100]	; (8014b2c <racs_services__srv__Control__get_type_description+0x8c>)
 8014ac6:	ca07      	ldmia	r2, {r0, r1, r2}
 8014ac8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8014acc:	7823      	ldrb	r3, [r4, #0]
 8014ace:	b90b      	cbnz	r3, 8014ad4 <racs_services__srv__Control__get_type_description+0x34>
 8014ad0:	2301      	movs	r3, #1
 8014ad2:	7023      	strb	r3, [r4, #0]
 8014ad4:	4a16      	ldr	r2, [pc, #88]	; (8014b30 <racs_services__srv__Control__get_type_description+0x90>)
 8014ad6:	4b17      	ldr	r3, [pc, #92]	; (8014b34 <racs_services__srv__Control__get_type_description+0x94>)
 8014ad8:	4c17      	ldr	r4, [pc, #92]	; (8014b38 <racs_services__srv__Control__get_type_description+0x98>)
 8014ada:	ca07      	ldmia	r2, {r0, r1, r2}
 8014adc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8014ae0:	7823      	ldrb	r3, [r4, #0]
 8014ae2:	b90b      	cbnz	r3, 8014ae8 <racs_services__srv__Control__get_type_description+0x48>
 8014ae4:	2301      	movs	r3, #1
 8014ae6:	7023      	strb	r3, [r4, #0]
 8014ae8:	4b14      	ldr	r3, [pc, #80]	; (8014b3c <racs_services__srv__Control__get_type_description+0x9c>)
 8014aea:	4c15      	ldr	r4, [pc, #84]	; (8014b40 <racs_services__srv__Control__get_type_description+0xa0>)
 8014aec:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014af0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8014af4:	2000      	movs	r0, #0
 8014af6:	3418      	adds	r4, #24
 8014af8:	f006 f882 	bl	801ac00 <service_msgs__msg__ServiceEventInfo__get_type_description>
 8014afc:	300c      	adds	r0, #12
 8014afe:	2301      	movs	r3, #1
 8014b00:	c807      	ldmia	r0, {r0, r1, r2}
 8014b02:	702b      	strb	r3, [r5, #0]
 8014b04:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8014b08:	4803      	ldr	r0, [pc, #12]	; (8014b18 <racs_services__srv__Control__get_type_description+0x78>)
 8014b0a:	bd38      	pop	{r3, r4, r5, pc}
 8014b0c:	f7ff ff7e 	bl	8014a0c <racs_services__srv__Control_Event__get_type_description.part.0>
 8014b10:	e7d6      	b.n	8014ac0 <racs_services__srv__Control__get_type_description+0x20>
 8014b12:	bf00      	nop
 8014b14:	20010671 	.word	0x20010671
 8014b18:	0801fd94 	.word	0x0801fd94
 8014b1c:	20001248 	.word	0x20001248
 8014b20:	2001066d 	.word	0x2001066d
 8014b24:	0801fd34 	.word	0x0801fd34
 8014b28:	20001260 	.word	0x20001260
 8014b2c:	20010670 	.word	0x20010670
 8014b30:	0801fd7c 	.word	0x0801fd7c
 8014b34:	20001278 	.word	0x20001278
 8014b38:	2001066e 	.word	0x2001066e
 8014b3c:	0801fd58 	.word	0x0801fd58
 8014b40:	20001290 	.word	0x20001290

08014b44 <racs_services__srv__Control_Request__get_type_description>:
 8014b44:	4b03      	ldr	r3, [pc, #12]	; (8014b54 <racs_services__srv__Control_Request__get_type_description+0x10>)
 8014b46:	781a      	ldrb	r2, [r3, #0]
 8014b48:	b90a      	cbnz	r2, 8014b4e <racs_services__srv__Control_Request__get_type_description+0xa>
 8014b4a:	2201      	movs	r2, #1
 8014b4c:	701a      	strb	r2, [r3, #0]
 8014b4e:	4802      	ldr	r0, [pc, #8]	; (8014b58 <racs_services__srv__Control_Request__get_type_description+0x14>)
 8014b50:	4770      	bx	lr
 8014b52:	bf00      	nop
 8014b54:	20010670 	.word	0x20010670
 8014b58:	0801fd70 	.word	0x0801fd70

08014b5c <racs_services__srv__Control_Response__get_type_description>:
 8014b5c:	4b03      	ldr	r3, [pc, #12]	; (8014b6c <racs_services__srv__Control_Response__get_type_description+0x10>)
 8014b5e:	781a      	ldrb	r2, [r3, #0]
 8014b60:	b90a      	cbnz	r2, 8014b66 <racs_services__srv__Control_Response__get_type_description+0xa>
 8014b62:	2201      	movs	r2, #1
 8014b64:	701a      	strb	r2, [r3, #0]
 8014b66:	4802      	ldr	r0, [pc, #8]	; (8014b70 <racs_services__srv__Control_Response__get_type_description+0x14>)
 8014b68:	4770      	bx	lr
 8014b6a:	bf00      	nop
 8014b6c:	2001066e 	.word	0x2001066e
 8014b70:	0801fd4c 	.word	0x0801fd4c

08014b74 <racs_services__srv__Control_Event__get_type_description>:
 8014b74:	b508      	push	{r3, lr}
 8014b76:	4b04      	ldr	r3, [pc, #16]	; (8014b88 <racs_services__srv__Control_Event__get_type_description+0x14>)
 8014b78:	781b      	ldrb	r3, [r3, #0]
 8014b7a:	b10b      	cbz	r3, 8014b80 <racs_services__srv__Control_Event__get_type_description+0xc>
 8014b7c:	4803      	ldr	r0, [pc, #12]	; (8014b8c <racs_services__srv__Control_Event__get_type_description+0x18>)
 8014b7e:	bd08      	pop	{r3, pc}
 8014b80:	f7ff ff44 	bl	8014a0c <racs_services__srv__Control_Event__get_type_description.part.0>
 8014b84:	4801      	ldr	r0, [pc, #4]	; (8014b8c <racs_services__srv__Control_Event__get_type_description+0x18>)
 8014b86:	bd08      	pop	{r3, pc}
 8014b88:	2001066d 	.word	0x2001066d
 8014b8c:	0801fd28 	.word	0x0801fd28

08014b90 <racs_services__srv__Control__get_type_description_sources>:
 8014b90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b94:	4b2c      	ldr	r3, [pc, #176]	; (8014c48 <racs_services__srv__Control__get_type_description_sources+0xb8>)
 8014b96:	f893 9000 	ldrb.w	r9, [r3]
 8014b9a:	f1b9 0f00 	cmp.w	r9, #0
 8014b9e:	d002      	beq.n	8014ba6 <racs_services__srv__Control__get_type_description_sources+0x16>
 8014ba0:	482a      	ldr	r0, [pc, #168]	; (8014c4c <racs_services__srv__Control__get_type_description_sources+0xbc>)
 8014ba2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ba6:	4d2a      	ldr	r5, [pc, #168]	; (8014c50 <racs_services__srv__Control__get_type_description_sources+0xc0>)
 8014ba8:	4c2a      	ldr	r4, [pc, #168]	; (8014c54 <racs_services__srv__Control__get_type_description_sources+0xc4>)
 8014baa:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 8014c5c <racs_services__srv__Control__get_type_description_sources+0xcc>
 8014bae:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8014c60 <racs_services__srv__Control__get_type_description_sources+0xd0>
 8014bb2:	4e29      	ldr	r6, [pc, #164]	; (8014c58 <racs_services__srv__Control__get_type_description_sources+0xc8>)
 8014bb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014bb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014bb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014bba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014bbc:	682b      	ldr	r3, [r5, #0]
 8014bbe:	4625      	mov	r5, r4
 8014bc0:	4648      	mov	r0, r9
 8014bc2:	f104 0a28 	add.w	sl, r4, #40	; 0x28
 8014bc6:	f845 3b04 	str.w	r3, [r5], #4
 8014bca:	f104 074c 	add.w	r7, r4, #76	; 0x4c
 8014bce:	f006 f883 	bl	801acd8 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 8014bd2:	4684      	mov	ip, r0
 8014bd4:	f104 0e70 	add.w	lr, r4, #112	; 0x70
 8014bd8:	3494      	adds	r4, #148	; 0x94
 8014bda:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014bde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014be0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014be4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014be6:	f8dc 3000 	ldr.w	r3, [ip]
 8014bea:	602b      	str	r3, [r5, #0]
 8014bec:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 8014bf0:	e8aa 000f 	stmia.w	sl!, {r0, r1, r2, r3}
 8014bf4:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 8014bf8:	e8aa 000f 	stmia.w	sl!, {r0, r1, r2, r3}
 8014bfc:	f8db 3000 	ldr.w	r3, [fp]
 8014c00:	f8ca 3000 	str.w	r3, [sl]
 8014c04:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 8014c08:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8014c0a:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 8014c0e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8014c10:	f8d8 3000 	ldr.w	r3, [r8]
 8014c14:	603b      	str	r3, [r7, #0]
 8014c16:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8014c18:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014c1c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8014c1e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014c22:	6833      	ldr	r3, [r6, #0]
 8014c24:	4648      	mov	r0, r9
 8014c26:	f8ce 3000 	str.w	r3, [lr]
 8014c2a:	f006 f801 	bl	801ac30 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source>
 8014c2e:	2301      	movs	r3, #1
 8014c30:	4a05      	ldr	r2, [pc, #20]	; (8014c48 <racs_services__srv__Control__get_type_description_sources+0xb8>)
 8014c32:	4605      	mov	r5, r0
 8014c34:	7013      	strb	r3, [r2, #0]
 8014c36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014c38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014c3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014c3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014c3e:	682b      	ldr	r3, [r5, #0]
 8014c40:	4802      	ldr	r0, [pc, #8]	; (8014c4c <racs_services__srv__Control__get_type_description_sources+0xbc>)
 8014c42:	6023      	str	r3, [r4, #0]
 8014c44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c48:	2001066c 	.word	0x2001066c
 8014c4c:	0801fe6c 	.word	0x0801fe6c
 8014c50:	0801fe24 	.word	0x0801fe24
 8014c54:	20010728 	.word	0x20010728
 8014c58:	0801fddc 	.word	0x0801fddc
 8014c5c:	0801fdb8 	.word	0x0801fdb8
 8014c60:	0801fe00 	.word	0x0801fe00

08014c64 <racs_services__srv__Control_Request__get_type_description_sources>:
 8014c64:	4b09      	ldr	r3, [pc, #36]	; (8014c8c <racs_services__srv__Control_Request__get_type_description_sources+0x28>)
 8014c66:	781a      	ldrb	r2, [r3, #0]
 8014c68:	b96a      	cbnz	r2, 8014c86 <racs_services__srv__Control_Request__get_type_description_sources+0x22>
 8014c6a:	2201      	movs	r2, #1
 8014c6c:	b430      	push	{r4, r5}
 8014c6e:	4d08      	ldr	r5, [pc, #32]	; (8014c90 <racs_services__srv__Control_Request__get_type_description_sources+0x2c>)
 8014c70:	4c08      	ldr	r4, [pc, #32]	; (8014c94 <racs_services__srv__Control_Request__get_type_description_sources+0x30>)
 8014c72:	701a      	strb	r2, [r3, #0]
 8014c74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014c76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014c78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014c7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014c7c:	682b      	ldr	r3, [r5, #0]
 8014c7e:	4806      	ldr	r0, [pc, #24]	; (8014c98 <racs_services__srv__Control_Request__get_type_description_sources+0x34>)
 8014c80:	6023      	str	r3, [r4, #0]
 8014c82:	bc30      	pop	{r4, r5}
 8014c84:	4770      	bx	lr
 8014c86:	4804      	ldr	r0, [pc, #16]	; (8014c98 <racs_services__srv__Control_Request__get_type_description_sources+0x34>)
 8014c88:	4770      	bx	lr
 8014c8a:	bf00      	nop
 8014c8c:	20010673 	.word	0x20010673
 8014c90:	0801fe00 	.word	0x0801fe00
 8014c94:	20010824 	.word	0x20010824
 8014c98:	0801fe60 	.word	0x0801fe60

08014c9c <racs_services__srv__Control_Response__get_type_description_sources>:
 8014c9c:	4b09      	ldr	r3, [pc, #36]	; (8014cc4 <racs_services__srv__Control_Response__get_type_description_sources+0x28>)
 8014c9e:	781a      	ldrb	r2, [r3, #0]
 8014ca0:	b96a      	cbnz	r2, 8014cbe <racs_services__srv__Control_Response__get_type_description_sources+0x22>
 8014ca2:	2201      	movs	r2, #1
 8014ca4:	b430      	push	{r4, r5}
 8014ca6:	4d08      	ldr	r5, [pc, #32]	; (8014cc8 <racs_services__srv__Control_Response__get_type_description_sources+0x2c>)
 8014ca8:	4c08      	ldr	r4, [pc, #32]	; (8014ccc <racs_services__srv__Control_Response__get_type_description_sources+0x30>)
 8014caa:	701a      	strb	r2, [r3, #0]
 8014cac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014cae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014cb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014cb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014cb4:	682b      	ldr	r3, [r5, #0]
 8014cb6:	4806      	ldr	r0, [pc, #24]	; (8014cd0 <racs_services__srv__Control_Response__get_type_description_sources+0x34>)
 8014cb8:	6023      	str	r3, [r4, #0]
 8014cba:	bc30      	pop	{r4, r5}
 8014cbc:	4770      	bx	lr
 8014cbe:	4804      	ldr	r0, [pc, #16]	; (8014cd0 <racs_services__srv__Control_Response__get_type_description_sources+0x34>)
 8014cc0:	4770      	bx	lr
 8014cc2:	bf00      	nop
 8014cc4:	20010672 	.word	0x20010672
 8014cc8:	0801fddc 	.word	0x0801fddc
 8014ccc:	20010800 	.word	0x20010800
 8014cd0:	0801fe54 	.word	0x0801fe54

08014cd4 <racs_services__srv__Control_Event__get_type_description_sources>:
 8014cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014cd8:	4e27      	ldr	r6, [pc, #156]	; (8014d78 <racs_services__srv__Control_Event__get_type_description_sources+0xa4>)
 8014cda:	f896 8000 	ldrb.w	r8, [r6]
 8014cde:	f1b8 0f00 	cmp.w	r8, #0
 8014ce2:	d002      	beq.n	8014cea <racs_services__srv__Control_Event__get_type_description_sources+0x16>
 8014ce4:	4825      	ldr	r0, [pc, #148]	; (8014d7c <racs_services__srv__Control_Event__get_type_description_sources+0xa8>)
 8014ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014cea:	4d25      	ldr	r5, [pc, #148]	; (8014d80 <racs_services__srv__Control_Event__get_type_description_sources+0xac>)
 8014cec:	4c25      	ldr	r4, [pc, #148]	; (8014d84 <racs_services__srv__Control_Event__get_type_description_sources+0xb0>)
 8014cee:	f8df a09c 	ldr.w	sl, [pc, #156]	; 8014d8c <racs_services__srv__Control_Event__get_type_description_sources+0xb8>
 8014cf2:	4f25      	ldr	r7, [pc, #148]	; (8014d88 <racs_services__srv__Control_Event__get_type_description_sources+0xb4>)
 8014cf4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014cf6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014cf8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014cfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014cfc:	682b      	ldr	r3, [r5, #0]
 8014cfe:	4625      	mov	r5, r4
 8014d00:	4640      	mov	r0, r8
 8014d02:	f104 0928 	add.w	r9, r4, #40	; 0x28
 8014d06:	f845 3b04 	str.w	r3, [r5], #4
 8014d0a:	f005 ffe5 	bl	801acd8 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 8014d0e:	4684      	mov	ip, r0
 8014d10:	f104 0e4c 	add.w	lr, r4, #76	; 0x4c
 8014d14:	3470      	adds	r4, #112	; 0x70
 8014d16:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014d1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014d1c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014d20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014d22:	f8dc 3000 	ldr.w	r3, [ip]
 8014d26:	602b      	str	r3, [r5, #0]
 8014d28:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
 8014d2c:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 8014d30:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
 8014d34:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 8014d38:	f8da 3000 	ldr.w	r3, [sl]
 8014d3c:	f8c9 3000 	str.w	r3, [r9]
 8014d40:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8014d42:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014d46:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8014d48:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014d4c:	683b      	ldr	r3, [r7, #0]
 8014d4e:	4640      	mov	r0, r8
 8014d50:	f8ce 3000 	str.w	r3, [lr]
 8014d54:	f005 ff6c 	bl	801ac30 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source>
 8014d58:	2301      	movs	r3, #1
 8014d5a:	4684      	mov	ip, r0
 8014d5c:	7033      	strb	r3, [r6, #0]
 8014d5e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014d62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014d64:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014d68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014d6a:	f8dc 3000 	ldr.w	r3, [ip]
 8014d6e:	4803      	ldr	r0, [pc, #12]	; (8014d7c <racs_services__srv__Control_Event__get_type_description_sources+0xa8>)
 8014d70:	6023      	str	r3, [r4, #0]
 8014d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014d76:	bf00      	nop
 8014d78:	2001066f 	.word	0x2001066f
 8014d7c:	0801fe48 	.word	0x0801fe48
 8014d80:	0801fdb8 	.word	0x0801fdb8
 8014d84:	20010674 	.word	0x20010674
 8014d88:	0801fddc 	.word	0x0801fddc
 8014d8c:	0801fe00 	.word	0x0801fe00

08014d90 <racs_services__srv__Control_Event__fini.part.0>:
 8014d90:	b510      	push	{r4, lr}
 8014d92:	b086      	sub	sp, #24
 8014d94:	4604      	mov	r4, r0
 8014d96:	f005 ff89 	bl	801acac <service_msgs__msg__ServiceEventInfo__fini>
 8014d9a:	a801      	add	r0, sp, #4
 8014d9c:	f7f9 ff3a 	bl	800ec14 <rcutils_get_default_allocator>
 8014da0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8014da2:	b130      	cbz	r0, 8014db2 <racs_services__srv__Control_Event__fini.part.0+0x22>
 8014da4:	9b02      	ldr	r3, [sp, #8]
 8014da6:	9905      	ldr	r1, [sp, #20]
 8014da8:	4798      	blx	r3
 8014daa:	2300      	movs	r3, #0
 8014dac:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 8014db0:	6323      	str	r3, [r4, #48]	; 0x30
 8014db2:	a801      	add	r0, sp, #4
 8014db4:	f7f9 ff2e 	bl	800ec14 <rcutils_get_default_allocator>
 8014db8:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8014dba:	b130      	cbz	r0, 8014dca <racs_services__srv__Control_Event__fini.part.0+0x3a>
 8014dbc:	9b02      	ldr	r3, [sp, #8]
 8014dbe:	9905      	ldr	r1, [sp, #20]
 8014dc0:	4798      	blx	r3
 8014dc2:	2300      	movs	r3, #0
 8014dc4:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 8014dc8:	63e3      	str	r3, [r4, #60]	; 0x3c
 8014dca:	b006      	add	sp, #24
 8014dcc:	bd10      	pop	{r4, pc}
 8014dce:	bf00      	nop

08014dd0 <racs_services__srv__Control_Request__init>:
 8014dd0:	3800      	subs	r0, #0
 8014dd2:	bf18      	it	ne
 8014dd4:	2001      	movne	r0, #1
 8014dd6:	4770      	bx	lr

08014dd8 <racs_services__srv__Control_Request__fini>:
 8014dd8:	4770      	bx	lr
 8014dda:	bf00      	nop

08014ddc <racs_services__srv__Control_Request__copy>:
 8014ddc:	b168      	cbz	r0, 8014dfa <racs_services__srv__Control_Request__copy+0x1e>
 8014dde:	b161      	cbz	r1, 8014dfa <racs_services__srv__Control_Request__copy+0x1e>
 8014de0:	220c      	movs	r2, #12
 8014de2:	b508      	push	{r3, lr}
 8014de4:	4603      	mov	r3, r0
 8014de6:	4608      	mov	r0, r1
 8014de8:	f833 1b02 	ldrh.w	r1, [r3], #2
 8014dec:	f820 1b02 	strh.w	r1, [r0], #2
 8014df0:	4619      	mov	r1, r3
 8014df2:	f008 feb5 	bl	801db60 <memmove>
 8014df6:	2001      	movs	r0, #1
 8014df8:	bd08      	pop	{r3, pc}
 8014dfa:	2000      	movs	r0, #0
 8014dfc:	4770      	bx	lr
 8014dfe:	bf00      	nop

08014e00 <racs_services__srv__Control_Request__Sequence__init>:
 8014e00:	b530      	push	{r4, r5, lr}
 8014e02:	4604      	mov	r4, r0
 8014e04:	b087      	sub	sp, #28
 8014e06:	b148      	cbz	r0, 8014e1c <racs_services__srv__Control_Request__Sequence__init+0x1c>
 8014e08:	460d      	mov	r5, r1
 8014e0a:	a801      	add	r0, sp, #4
 8014e0c:	f7f9 ff02 	bl	800ec14 <rcutils_get_default_allocator>
 8014e10:	b935      	cbnz	r5, 8014e20 <racs_services__srv__Control_Request__Sequence__init+0x20>
 8014e12:	462b      	mov	r3, r5
 8014e14:	2001      	movs	r0, #1
 8014e16:	60a5      	str	r5, [r4, #8]
 8014e18:	e9c4 3500 	strd	r3, r5, [r4]
 8014e1c:	b007      	add	sp, #28
 8014e1e:	bd30      	pop	{r4, r5, pc}
 8014e20:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8014e24:	210e      	movs	r1, #14
 8014e26:	4628      	mov	r0, r5
 8014e28:	4798      	blx	r3
 8014e2a:	4603      	mov	r3, r0
 8014e2c:	2800      	cmp	r0, #0
 8014e2e:	d1f1      	bne.n	8014e14 <racs_services__srv__Control_Request__Sequence__init+0x14>
 8014e30:	e7f4      	b.n	8014e1c <racs_services__srv__Control_Request__Sequence__init+0x1c>
 8014e32:	bf00      	nop

08014e34 <racs_services__srv__Control_Request__Sequence__fini>:
 8014e34:	b180      	cbz	r0, 8014e58 <racs_services__srv__Control_Request__Sequence__fini+0x24>
 8014e36:	b510      	push	{r4, lr}
 8014e38:	b086      	sub	sp, #24
 8014e3a:	4604      	mov	r4, r0
 8014e3c:	a801      	add	r0, sp, #4
 8014e3e:	f7f9 fee9 	bl	800ec14 <rcutils_get_default_allocator>
 8014e42:	6820      	ldr	r0, [r4, #0]
 8014e44:	b130      	cbz	r0, 8014e54 <racs_services__srv__Control_Request__Sequence__fini+0x20>
 8014e46:	9b02      	ldr	r3, [sp, #8]
 8014e48:	9905      	ldr	r1, [sp, #20]
 8014e4a:	4798      	blx	r3
 8014e4c:	2300      	movs	r3, #0
 8014e4e:	e9c4 3300 	strd	r3, r3, [r4]
 8014e52:	60a3      	str	r3, [r4, #8]
 8014e54:	b006      	add	sp, #24
 8014e56:	bd10      	pop	{r4, pc}
 8014e58:	4770      	bx	lr
 8014e5a:	bf00      	nop

08014e5c <racs_services__srv__Control_Response__init>:
 8014e5c:	3800      	subs	r0, #0
 8014e5e:	bf18      	it	ne
 8014e60:	2001      	movne	r0, #1
 8014e62:	4770      	bx	lr

08014e64 <racs_services__srv__Control_Response__fini>:
 8014e64:	4770      	bx	lr
 8014e66:	bf00      	nop

08014e68 <racs_services__srv__Control_Response__copy>:
 8014e68:	b120      	cbz	r0, 8014e74 <racs_services__srv__Control_Response__copy+0xc>
 8014e6a:	b119      	cbz	r1, 8014e74 <racs_services__srv__Control_Response__copy+0xc>
 8014e6c:	7803      	ldrb	r3, [r0, #0]
 8014e6e:	2001      	movs	r0, #1
 8014e70:	700b      	strb	r3, [r1, #0]
 8014e72:	4770      	bx	lr
 8014e74:	2000      	movs	r0, #0
 8014e76:	4770      	bx	lr

08014e78 <racs_services__srv__Control_Response__Sequence__init>:
 8014e78:	b530      	push	{r4, r5, lr}
 8014e7a:	4604      	mov	r4, r0
 8014e7c:	b087      	sub	sp, #28
 8014e7e:	b148      	cbz	r0, 8014e94 <racs_services__srv__Control_Response__Sequence__init+0x1c>
 8014e80:	460d      	mov	r5, r1
 8014e82:	a801      	add	r0, sp, #4
 8014e84:	f7f9 fec6 	bl	800ec14 <rcutils_get_default_allocator>
 8014e88:	b935      	cbnz	r5, 8014e98 <racs_services__srv__Control_Response__Sequence__init+0x20>
 8014e8a:	462b      	mov	r3, r5
 8014e8c:	2001      	movs	r0, #1
 8014e8e:	60a5      	str	r5, [r4, #8]
 8014e90:	e9c4 3500 	strd	r3, r5, [r4]
 8014e94:	b007      	add	sp, #28
 8014e96:	bd30      	pop	{r4, r5, pc}
 8014e98:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8014e9c:	2101      	movs	r1, #1
 8014e9e:	4628      	mov	r0, r5
 8014ea0:	4798      	blx	r3
 8014ea2:	4603      	mov	r3, r0
 8014ea4:	2800      	cmp	r0, #0
 8014ea6:	d1f1      	bne.n	8014e8c <racs_services__srv__Control_Response__Sequence__init+0x14>
 8014ea8:	e7f4      	b.n	8014e94 <racs_services__srv__Control_Response__Sequence__init+0x1c>
 8014eaa:	bf00      	nop

08014eac <racs_services__srv__Control_Response__Sequence__fini>:
 8014eac:	b180      	cbz	r0, 8014ed0 <racs_services__srv__Control_Response__Sequence__fini+0x24>
 8014eae:	b510      	push	{r4, lr}
 8014eb0:	b086      	sub	sp, #24
 8014eb2:	4604      	mov	r4, r0
 8014eb4:	a801      	add	r0, sp, #4
 8014eb6:	f7f9 fead 	bl	800ec14 <rcutils_get_default_allocator>
 8014eba:	6820      	ldr	r0, [r4, #0]
 8014ebc:	b130      	cbz	r0, 8014ecc <racs_services__srv__Control_Response__Sequence__fini+0x20>
 8014ebe:	9b02      	ldr	r3, [sp, #8]
 8014ec0:	9905      	ldr	r1, [sp, #20]
 8014ec2:	4798      	blx	r3
 8014ec4:	2300      	movs	r3, #0
 8014ec6:	e9c4 3300 	strd	r3, r3, [r4]
 8014eca:	60a3      	str	r3, [r4, #8]
 8014ecc:	b006      	add	sp, #24
 8014ece:	bd10      	pop	{r4, pc}
 8014ed0:	4770      	bx	lr
 8014ed2:	bf00      	nop

08014ed4 <racs_services__srv__Control_Event__init>:
 8014ed4:	b570      	push	{r4, r5, r6, lr}
 8014ed6:	4604      	mov	r4, r0
 8014ed8:	b086      	sub	sp, #24
 8014eda:	b1c8      	cbz	r0, 8014f10 <racs_services__srv__Control_Event__init+0x3c>
 8014edc:	f005 fed4 	bl	801ac88 <service_msgs__msg__ServiceEventInfo__init>
 8014ee0:	4605      	mov	r5, r0
 8014ee2:	b178      	cbz	r0, 8014f04 <racs_services__srv__Control_Event__init+0x30>
 8014ee4:	2600      	movs	r6, #0
 8014ee6:	a801      	add	r0, sp, #4
 8014ee8:	f7f9 fe94 	bl	800ec14 <rcutils_get_default_allocator>
 8014eec:	a801      	add	r0, sp, #4
 8014eee:	6326      	str	r6, [r4, #48]	; 0x30
 8014ef0:	e9c4 660a 	strd	r6, r6, [r4, #40]	; 0x28
 8014ef4:	f7f9 fe8e 	bl	800ec14 <rcutils_get_default_allocator>
 8014ef8:	4628      	mov	r0, r5
 8014efa:	63e6      	str	r6, [r4, #60]	; 0x3c
 8014efc:	e9c4 660d 	strd	r6, r6, [r4, #52]	; 0x34
 8014f00:	b006      	add	sp, #24
 8014f02:	bd70      	pop	{r4, r5, r6, pc}
 8014f04:	4620      	mov	r0, r4
 8014f06:	f7ff ff43 	bl	8014d90 <racs_services__srv__Control_Event__fini.part.0>
 8014f0a:	4628      	mov	r0, r5
 8014f0c:	b006      	add	sp, #24
 8014f0e:	bd70      	pop	{r4, r5, r6, pc}
 8014f10:	4605      	mov	r5, r0
 8014f12:	4628      	mov	r0, r5
 8014f14:	b006      	add	sp, #24
 8014f16:	bd70      	pop	{r4, r5, r6, pc}

08014f18 <racs_services__srv__Control_Event__fini>:
 8014f18:	b1f0      	cbz	r0, 8014f58 <racs_services__srv__Control_Event__fini+0x40>
 8014f1a:	b510      	push	{r4, lr}
 8014f1c:	b086      	sub	sp, #24
 8014f1e:	4604      	mov	r4, r0
 8014f20:	f005 fec4 	bl	801acac <service_msgs__msg__ServiceEventInfo__fini>
 8014f24:	a801      	add	r0, sp, #4
 8014f26:	f7f9 fe75 	bl	800ec14 <rcutils_get_default_allocator>
 8014f2a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8014f2c:	b130      	cbz	r0, 8014f3c <racs_services__srv__Control_Event__fini+0x24>
 8014f2e:	9b02      	ldr	r3, [sp, #8]
 8014f30:	9905      	ldr	r1, [sp, #20]
 8014f32:	4798      	blx	r3
 8014f34:	2300      	movs	r3, #0
 8014f36:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 8014f3a:	6323      	str	r3, [r4, #48]	; 0x30
 8014f3c:	a801      	add	r0, sp, #4
 8014f3e:	f7f9 fe69 	bl	800ec14 <rcutils_get_default_allocator>
 8014f42:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8014f44:	b130      	cbz	r0, 8014f54 <racs_services__srv__Control_Event__fini+0x3c>
 8014f46:	9b02      	ldr	r3, [sp, #8]
 8014f48:	9905      	ldr	r1, [sp, #20]
 8014f4a:	4798      	blx	r3
 8014f4c:	2300      	movs	r3, #0
 8014f4e:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 8014f52:	63e3      	str	r3, [r4, #60]	; 0x3c
 8014f54:	b006      	add	sp, #24
 8014f56:	bd10      	pop	{r4, pc}
 8014f58:	4770      	bx	lr
 8014f5a:	bf00      	nop

08014f5c <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control>:
 8014f5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f60:	2900      	cmp	r1, #0
 8014f62:	d04d      	beq.n	8015000 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control+0xa4>
 8014f64:	4605      	mov	r5, r0
 8014f66:	2800      	cmp	r0, #0
 8014f68:	d04a      	beq.n	8015000 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control+0xa4>
 8014f6a:	460e      	mov	r6, r1
 8014f6c:	4698      	mov	r8, r3
 8014f6e:	2040      	movs	r0, #64	; 0x40
 8014f70:	680b      	ldr	r3, [r1, #0]
 8014f72:	6909      	ldr	r1, [r1, #16]
 8014f74:	4617      	mov	r7, r2
 8014f76:	4798      	blx	r3
 8014f78:	4604      	mov	r4, r0
 8014f7a:	f7ff ffab 	bl	8014ed4 <racs_services__srv__Control_Event__init>
 8014f7e:	4684      	mov	ip, r0
 8014f80:	b370      	cbz	r0, 8014fe0 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control+0x84>
 8014f82:	782b      	ldrb	r3, [r5, #0]
 8014f84:	7023      	strb	r3, [r4, #0]
 8014f86:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
 8014f8a:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 8014f8e:	e9c4 2301 	strd	r2, r3, [r4, #4]
 8014f92:	e9c4 0108 	strd	r0, r1, [r4, #32]
 8014f96:	68e8      	ldr	r0, [r5, #12]
 8014f98:	6929      	ldr	r1, [r5, #16]
 8014f9a:	696a      	ldr	r2, [r5, #20]
 8014f9c:	69ab      	ldr	r3, [r5, #24]
 8014f9e:	60e0      	str	r0, [r4, #12]
 8014fa0:	6121      	str	r1, [r4, #16]
 8014fa2:	6162      	str	r2, [r4, #20]
 8014fa4:	61a3      	str	r3, [r4, #24]
 8014fa6:	b157      	cbz	r7, 8014fbe <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control+0x62>
 8014fa8:	2101      	movs	r1, #1
 8014faa:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8014fae:	f7ff ff27 	bl	8014e00 <racs_services__srv__Control_Request__Sequence__init>
 8014fb2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8014fb4:	4638      	mov	r0, r7
 8014fb6:	f7ff ff11 	bl	8014ddc <racs_services__srv__Control_Request__copy>
 8014fba:	4603      	mov	r3, r0
 8014fbc:	b1c0      	cbz	r0, 8014ff0 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control+0x94>
 8014fbe:	f1b8 0f00 	cmp.w	r8, #0
 8014fc2:	d00a      	beq.n	8014fda <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control+0x7e>
 8014fc4:	2101      	movs	r1, #1
 8014fc6:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8014fca:	f7ff ff55 	bl	8014e78 <racs_services__srv__Control_Response__Sequence__init>
 8014fce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014fd0:	4640      	mov	r0, r8
 8014fd2:	f7ff ff49 	bl	8014e68 <racs_services__srv__Control_Response__copy>
 8014fd6:	4603      	mov	r3, r0
 8014fd8:	b150      	cbz	r0, 8014ff0 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control+0x94>
 8014fda:	4620      	mov	r0, r4
 8014fdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014fe0:	4620      	mov	r0, r4
 8014fe2:	4664      	mov	r4, ip
 8014fe4:	6873      	ldr	r3, [r6, #4]
 8014fe6:	6931      	ldr	r1, [r6, #16]
 8014fe8:	4798      	blx	r3
 8014fea:	4620      	mov	r0, r4
 8014fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ff0:	4620      	mov	r0, r4
 8014ff2:	461c      	mov	r4, r3
 8014ff4:	6872      	ldr	r2, [r6, #4]
 8014ff6:	6931      	ldr	r1, [r6, #16]
 8014ff8:	4790      	blx	r2
 8014ffa:	4620      	mov	r0, r4
 8014ffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015000:	2400      	movs	r4, #0
 8015002:	4620      	mov	r0, r4
 8015004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015008 <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Control>:
 8015008:	b1b9      	cbz	r1, 801503a <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Control+0x32>
 801500a:	b538      	push	{r3, r4, r5, lr}
 801500c:	4605      	mov	r5, r0
 801500e:	b190      	cbz	r0, 8015036 <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Control+0x2e>
 8015010:	460c      	mov	r4, r1
 8015012:	f7ff ff81 	bl	8014f18 <racs_services__srv__Control_Event__fini>
 8015016:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8015018:	b110      	cbz	r0, 8015020 <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Control+0x18>
 801501a:	6863      	ldr	r3, [r4, #4]
 801501c:	6921      	ldr	r1, [r4, #16]
 801501e:	4798      	blx	r3
 8015020:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8015022:	b110      	cbz	r0, 801502a <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Control+0x22>
 8015024:	6863      	ldr	r3, [r4, #4]
 8015026:	6921      	ldr	r1, [r4, #16]
 8015028:	4798      	blx	r3
 801502a:	4628      	mov	r0, r5
 801502c:	6863      	ldr	r3, [r4, #4]
 801502e:	6921      	ldr	r1, [r4, #16]
 8015030:	4798      	blx	r3
 8015032:	2001      	movs	r0, #1
 8015034:	bd38      	pop	{r3, r4, r5, pc}
 8015036:	2000      	movs	r0, #0
 8015038:	bd38      	pop	{r3, r4, r5, pc}
 801503a:	2000      	movs	r0, #0
 801503c:	4770      	bx	lr
 801503e:	bf00      	nop

08015040 <racs_services__msg__Debug__get_type_hash>:
 8015040:	4800      	ldr	r0, [pc, #0]	; (8015044 <racs_services__msg__Debug__get_type_hash+0x4>)
 8015042:	4770      	bx	lr
 8015044:	2000133c 	.word	0x2000133c

08015048 <racs_services__msg__Debug__get_type_description>:
 8015048:	4b03      	ldr	r3, [pc, #12]	; (8015058 <racs_services__msg__Debug__get_type_description+0x10>)
 801504a:	781a      	ldrb	r2, [r3, #0]
 801504c:	b90a      	cbnz	r2, 8015052 <racs_services__msg__Debug__get_type_description+0xa>
 801504e:	2201      	movs	r2, #1
 8015050:	701a      	strb	r2, [r3, #0]
 8015052:	4802      	ldr	r0, [pc, #8]	; (801505c <racs_services__msg__Debug__get_type_description+0x14>)
 8015054:	4770      	bx	lr
 8015056:	bf00      	nop
 8015058:	20010849 	.word	0x20010849
 801505c:	0801fe78 	.word	0x0801fe78

08015060 <racs_services__msg__Debug__get_type_description_sources>:
 8015060:	4b09      	ldr	r3, [pc, #36]	; (8015088 <racs_services__msg__Debug__get_type_description_sources+0x28>)
 8015062:	781a      	ldrb	r2, [r3, #0]
 8015064:	b96a      	cbnz	r2, 8015082 <racs_services__msg__Debug__get_type_description_sources+0x22>
 8015066:	2201      	movs	r2, #1
 8015068:	b430      	push	{r4, r5}
 801506a:	4d08      	ldr	r5, [pc, #32]	; (801508c <racs_services__msg__Debug__get_type_description_sources+0x2c>)
 801506c:	4c08      	ldr	r4, [pc, #32]	; (8015090 <racs_services__msg__Debug__get_type_description_sources+0x30>)
 801506e:	701a      	strb	r2, [r3, #0]
 8015070:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015072:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015074:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015076:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015078:	682b      	ldr	r3, [r5, #0]
 801507a:	4806      	ldr	r0, [pc, #24]	; (8015094 <racs_services__msg__Debug__get_type_description_sources+0x34>)
 801507c:	6023      	str	r3, [r4, #0]
 801507e:	bc30      	pop	{r4, r5}
 8015080:	4770      	bx	lr
 8015082:	4804      	ldr	r0, [pc, #16]	; (8015094 <racs_services__msg__Debug__get_type_description_sources+0x34>)
 8015084:	4770      	bx	lr
 8015086:	bf00      	nop
 8015088:	20010848 	.word	0x20010848
 801508c:	0801fe9c 	.word	0x0801fe9c
 8015090:	2001084c 	.word	0x2001084c
 8015094:	0801fec0 	.word	0x0801fec0

08015098 <racs_services__msg__Debug__init>:
 8015098:	3800      	subs	r0, #0
 801509a:	bf18      	it	ne
 801509c:	2001      	movne	r0, #1
 801509e:	4770      	bx	lr

080150a0 <racs_services__msg__Debug__fini>:
 80150a0:	4770      	bx	lr
 80150a2:	bf00      	nop

080150a4 <racs_services__msg__DirectAccess__get_type_hash>:
 80150a4:	4800      	ldr	r0, [pc, #0]	; (80150a8 <racs_services__msg__DirectAccess__get_type_hash+0x4>)
 80150a6:	4770      	bx	lr
 80150a8:	200013e0 	.word	0x200013e0

080150ac <racs_services__msg__DirectAccess__get_type_description>:
 80150ac:	4b03      	ldr	r3, [pc, #12]	; (80150bc <racs_services__msg__DirectAccess__get_type_description+0x10>)
 80150ae:	781a      	ldrb	r2, [r3, #0]
 80150b0:	b90a      	cbnz	r2, 80150b6 <racs_services__msg__DirectAccess__get_type_description+0xa>
 80150b2:	2201      	movs	r2, #1
 80150b4:	701a      	strb	r2, [r3, #0]
 80150b6:	4802      	ldr	r0, [pc, #8]	; (80150c0 <racs_services__msg__DirectAccess__get_type_description+0x14>)
 80150b8:	4770      	bx	lr
 80150ba:	bf00      	nop
 80150bc:	20010871 	.word	0x20010871
 80150c0:	0801fecc 	.word	0x0801fecc

080150c4 <racs_services__msg__DirectAccess__get_type_description_sources>:
 80150c4:	4b09      	ldr	r3, [pc, #36]	; (80150ec <racs_services__msg__DirectAccess__get_type_description_sources+0x28>)
 80150c6:	781a      	ldrb	r2, [r3, #0]
 80150c8:	b96a      	cbnz	r2, 80150e6 <racs_services__msg__DirectAccess__get_type_description_sources+0x22>
 80150ca:	2201      	movs	r2, #1
 80150cc:	b430      	push	{r4, r5}
 80150ce:	4d08      	ldr	r5, [pc, #32]	; (80150f0 <racs_services__msg__DirectAccess__get_type_description_sources+0x2c>)
 80150d0:	4c08      	ldr	r4, [pc, #32]	; (80150f4 <racs_services__msg__DirectAccess__get_type_description_sources+0x30>)
 80150d2:	701a      	strb	r2, [r3, #0]
 80150d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80150d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80150d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80150da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80150dc:	682b      	ldr	r3, [r5, #0]
 80150de:	4806      	ldr	r0, [pc, #24]	; (80150f8 <racs_services__msg__DirectAccess__get_type_description_sources+0x34>)
 80150e0:	6023      	str	r3, [r4, #0]
 80150e2:	bc30      	pop	{r4, r5}
 80150e4:	4770      	bx	lr
 80150e6:	4804      	ldr	r0, [pc, #16]	; (80150f8 <racs_services__msg__DirectAccess__get_type_description_sources+0x34>)
 80150e8:	4770      	bx	lr
 80150ea:	bf00      	nop
 80150ec:	20010870 	.word	0x20010870
 80150f0:	0801fef0 	.word	0x0801fef0
 80150f4:	20010874 	.word	0x20010874
 80150f8:	0801ff14 	.word	0x0801ff14

080150fc <racs_services__msg__DirectAccess__init>:
 80150fc:	3800      	subs	r0, #0
 80150fe:	bf18      	it	ne
 8015100:	2001      	movne	r0, #1
 8015102:	4770      	bx	lr

08015104 <racs_services__msg__DirectAccess__fini>:
 8015104:	4770      	bx	lr
 8015106:	bf00      	nop

08015108 <racs_services__msg__Encoder__get_type_hash>:
 8015108:	4800      	ldr	r0, [pc, #0]	; (801510c <racs_services__msg__Encoder__get_type_hash+0x4>)
 801510a:	4770      	bx	lr
 801510c:	200014ec 	.word	0x200014ec

08015110 <racs_services__msg__Encoder__get_type_description>:
 8015110:	4b03      	ldr	r3, [pc, #12]	; (8015120 <racs_services__msg__Encoder__get_type_description+0x10>)
 8015112:	781a      	ldrb	r2, [r3, #0]
 8015114:	b90a      	cbnz	r2, 801511a <racs_services__msg__Encoder__get_type_description+0xa>
 8015116:	2201      	movs	r2, #1
 8015118:	701a      	strb	r2, [r3, #0]
 801511a:	4802      	ldr	r0, [pc, #8]	; (8015124 <racs_services__msg__Encoder__get_type_description+0x14>)
 801511c:	4770      	bx	lr
 801511e:	bf00      	nop
 8015120:	20010899 	.word	0x20010899
 8015124:	0801ff20 	.word	0x0801ff20

08015128 <racs_services__msg__Encoder__get_type_description_sources>:
 8015128:	4b09      	ldr	r3, [pc, #36]	; (8015150 <racs_services__msg__Encoder__get_type_description_sources+0x28>)
 801512a:	781a      	ldrb	r2, [r3, #0]
 801512c:	b96a      	cbnz	r2, 801514a <racs_services__msg__Encoder__get_type_description_sources+0x22>
 801512e:	2201      	movs	r2, #1
 8015130:	b430      	push	{r4, r5}
 8015132:	4d08      	ldr	r5, [pc, #32]	; (8015154 <racs_services__msg__Encoder__get_type_description_sources+0x2c>)
 8015134:	4c08      	ldr	r4, [pc, #32]	; (8015158 <racs_services__msg__Encoder__get_type_description_sources+0x30>)
 8015136:	701a      	strb	r2, [r3, #0]
 8015138:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801513a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801513c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801513e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015140:	682b      	ldr	r3, [r5, #0]
 8015142:	4806      	ldr	r0, [pc, #24]	; (801515c <racs_services__msg__Encoder__get_type_description_sources+0x34>)
 8015144:	6023      	str	r3, [r4, #0]
 8015146:	bc30      	pop	{r4, r5}
 8015148:	4770      	bx	lr
 801514a:	4804      	ldr	r0, [pc, #16]	; (801515c <racs_services__msg__Encoder__get_type_description_sources+0x34>)
 801514c:	4770      	bx	lr
 801514e:	bf00      	nop
 8015150:	20010898 	.word	0x20010898
 8015154:	0801ff44 	.word	0x0801ff44
 8015158:	2001089c 	.word	0x2001089c
 801515c:	0801ff68 	.word	0x0801ff68

08015160 <racs_services__msg__Encoder__init>:
 8015160:	3800      	subs	r0, #0
 8015162:	bf18      	it	ne
 8015164:	2001      	movne	r0, #1
 8015166:	4770      	bx	lr

08015168 <racs_services__msg__Encoder__fini>:
 8015168:	4770      	bx	lr
 801516a:	bf00      	nop

0801516c <racs_services__msg__Feedback__get_type_hash>:
 801516c:	4800      	ldr	r0, [pc, #0]	; (8015170 <racs_services__msg__Feedback__get_type_hash+0x4>)
 801516e:	4770      	bx	lr
 8015170:	2000159c 	.word	0x2000159c

08015174 <racs_services__msg__Feedback__get_type_description>:
 8015174:	4b03      	ldr	r3, [pc, #12]	; (8015184 <racs_services__msg__Feedback__get_type_description+0x10>)
 8015176:	781a      	ldrb	r2, [r3, #0]
 8015178:	b90a      	cbnz	r2, 801517e <racs_services__msg__Feedback__get_type_description+0xa>
 801517a:	2201      	movs	r2, #1
 801517c:	701a      	strb	r2, [r3, #0]
 801517e:	4802      	ldr	r0, [pc, #8]	; (8015188 <racs_services__msg__Feedback__get_type_description+0x14>)
 8015180:	4770      	bx	lr
 8015182:	bf00      	nop
 8015184:	200108c1 	.word	0x200108c1
 8015188:	0801ff74 	.word	0x0801ff74

0801518c <racs_services__msg__Feedback__get_type_description_sources>:
 801518c:	4b09      	ldr	r3, [pc, #36]	; (80151b4 <racs_services__msg__Feedback__get_type_description_sources+0x28>)
 801518e:	781a      	ldrb	r2, [r3, #0]
 8015190:	b96a      	cbnz	r2, 80151ae <racs_services__msg__Feedback__get_type_description_sources+0x22>
 8015192:	2201      	movs	r2, #1
 8015194:	b430      	push	{r4, r5}
 8015196:	4d08      	ldr	r5, [pc, #32]	; (80151b8 <racs_services__msg__Feedback__get_type_description_sources+0x2c>)
 8015198:	4c08      	ldr	r4, [pc, #32]	; (80151bc <racs_services__msg__Feedback__get_type_description_sources+0x30>)
 801519a:	701a      	strb	r2, [r3, #0]
 801519c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801519e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80151a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80151a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80151a4:	682b      	ldr	r3, [r5, #0]
 80151a6:	4806      	ldr	r0, [pc, #24]	; (80151c0 <racs_services__msg__Feedback__get_type_description_sources+0x34>)
 80151a8:	6023      	str	r3, [r4, #0]
 80151aa:	bc30      	pop	{r4, r5}
 80151ac:	4770      	bx	lr
 80151ae:	4804      	ldr	r0, [pc, #16]	; (80151c0 <racs_services__msg__Feedback__get_type_description_sources+0x34>)
 80151b0:	4770      	bx	lr
 80151b2:	bf00      	nop
 80151b4:	200108c0 	.word	0x200108c0
 80151b8:	0801ff98 	.word	0x0801ff98
 80151bc:	200108c4 	.word	0x200108c4
 80151c0:	0801ffbc 	.word	0x0801ffbc

080151c4 <racs_services__msg__Feedback__init>:
 80151c4:	3800      	subs	r0, #0
 80151c6:	bf18      	it	ne
 80151c8:	2001      	movne	r0, #1
 80151ca:	4770      	bx	lr

080151cc <racs_services__msg__Feedback__fini>:
 80151cc:	4770      	bx	lr
 80151ce:	bf00      	nop

080151d0 <racs_services__srv__Setup_Event__get_type_description.part.0>:
 80151d0:	b510      	push	{r4, lr}
 80151d2:	2000      	movs	r0, #0
 80151d4:	4c13      	ldr	r4, [pc, #76]	; (8015224 <racs_services__srv__Setup_Event__get_type_description.part.0+0x54>)
 80151d6:	f005 fd73 	bl	801acc0 <builtin_interfaces__msg__Time__get_type_description>
 80151da:	300c      	adds	r0, #12
 80151dc:	4b12      	ldr	r3, [pc, #72]	; (8015228 <racs_services__srv__Setup_Event__get_type_description.part.0+0x58>)
 80151de:	c807      	ldmia	r0, {r0, r1, r2}
 80151e0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80151e4:	7823      	ldrb	r3, [r4, #0]
 80151e6:	b90b      	cbnz	r3, 80151ec <racs_services__srv__Setup_Event__get_type_description.part.0+0x1c>
 80151e8:	2301      	movs	r3, #1
 80151ea:	7023      	strb	r3, [r4, #0]
 80151ec:	4a0f      	ldr	r2, [pc, #60]	; (801522c <racs_services__srv__Setup_Event__get_type_description.part.0+0x5c>)
 80151ee:	4b10      	ldr	r3, [pc, #64]	; (8015230 <racs_services__srv__Setup_Event__get_type_description.part.0+0x60>)
 80151f0:	4c10      	ldr	r4, [pc, #64]	; (8015234 <racs_services__srv__Setup_Event__get_type_description.part.0+0x64>)
 80151f2:	ca07      	ldmia	r2, {r0, r1, r2}
 80151f4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80151f8:	7823      	ldrb	r3, [r4, #0]
 80151fa:	b90b      	cbnz	r3, 8015200 <racs_services__srv__Setup_Event__get_type_description.part.0+0x30>
 80151fc:	2301      	movs	r3, #1
 80151fe:	7023      	strb	r3, [r4, #0]
 8015200:	4b0d      	ldr	r3, [pc, #52]	; (8015238 <racs_services__srv__Setup_Event__get_type_description.part.0+0x68>)
 8015202:	4c0e      	ldr	r4, [pc, #56]	; (801523c <racs_services__srv__Setup_Event__get_type_description.part.0+0x6c>)
 8015204:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015208:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801520c:	2000      	movs	r0, #0
 801520e:	3418      	adds	r4, #24
 8015210:	f005 fcf6 	bl	801ac00 <service_msgs__msg__ServiceEventInfo__get_type_description>
 8015214:	300c      	adds	r0, #12
 8015216:	4b0a      	ldr	r3, [pc, #40]	; (8015240 <racs_services__srv__Setup_Event__get_type_description.part.0+0x70>)
 8015218:	c807      	ldmia	r0, {r0, r1, r2}
 801521a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801521e:	2201      	movs	r2, #1
 8015220:	701a      	strb	r2, [r3, #0]
 8015222:	bd10      	pop	{r4, pc}
 8015224:	200108ec 	.word	0x200108ec
 8015228:	20001868 	.word	0x20001868
 801522c:	0802001c 	.word	0x0802001c
 8015230:	20001880 	.word	0x20001880
 8015234:	200108ea 	.word	0x200108ea
 8015238:	0801fff8 	.word	0x0801fff8
 801523c:	20001898 	.word	0x20001898
 8015240:	200108e9 	.word	0x200108e9

08015244 <racs_services__srv__Setup__get_type_hash>:
 8015244:	4800      	ldr	r0, [pc, #0]	; (8015248 <racs_services__srv__Setup__get_type_hash+0x4>)
 8015246:	4770      	bx	lr
 8015248:	20001738 	.word	0x20001738

0801524c <racs_services__srv__Setup_Request__get_type_hash>:
 801524c:	4800      	ldr	r0, [pc, #0]	; (8015250 <racs_services__srv__Setup_Request__get_type_hash+0x4>)
 801524e:	4770      	bx	lr
 8015250:	20001714 	.word	0x20001714

08015254 <racs_services__srv__Setup_Response__get_type_hash>:
 8015254:	4800      	ldr	r0, [pc, #0]	; (8015258 <racs_services__srv__Setup_Response__get_type_hash+0x4>)
 8015256:	4770      	bx	lr
 8015258:	200016f0 	.word	0x200016f0

0801525c <racs_services__srv__Setup_Event__get_type_hash>:
 801525c:	4800      	ldr	r0, [pc, #0]	; (8015260 <racs_services__srv__Setup_Event__get_type_hash+0x4>)
 801525e:	4770      	bx	lr
 8015260:	200016cc 	.word	0x200016cc

08015264 <racs_services__srv__Setup__get_type_description>:
 8015264:	b538      	push	{r3, r4, r5, lr}
 8015266:	4d1c      	ldr	r5, [pc, #112]	; (80152d8 <racs_services__srv__Setup__get_type_description+0x74>)
 8015268:	7828      	ldrb	r0, [r5, #0]
 801526a:	b108      	cbz	r0, 8015270 <racs_services__srv__Setup__get_type_description+0xc>
 801526c:	481b      	ldr	r0, [pc, #108]	; (80152dc <racs_services__srv__Setup__get_type_description+0x78>)
 801526e:	bd38      	pop	{r3, r4, r5, pc}
 8015270:	f005 fd26 	bl	801acc0 <builtin_interfaces__msg__Time__get_type_description>
 8015274:	300c      	adds	r0, #12
 8015276:	4b1a      	ldr	r3, [pc, #104]	; (80152e0 <racs_services__srv__Setup__get_type_description+0x7c>)
 8015278:	c807      	ldmia	r0, {r0, r1, r2}
 801527a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801527e:	4b19      	ldr	r3, [pc, #100]	; (80152e4 <racs_services__srv__Setup__get_type_description+0x80>)
 8015280:	781b      	ldrb	r3, [r3, #0]
 8015282:	b32b      	cbz	r3, 80152d0 <racs_services__srv__Setup__get_type_description+0x6c>
 8015284:	4a18      	ldr	r2, [pc, #96]	; (80152e8 <racs_services__srv__Setup__get_type_description+0x84>)
 8015286:	4b19      	ldr	r3, [pc, #100]	; (80152ec <racs_services__srv__Setup__get_type_description+0x88>)
 8015288:	4c19      	ldr	r4, [pc, #100]	; (80152f0 <racs_services__srv__Setup__get_type_description+0x8c>)
 801528a:	ca07      	ldmia	r2, {r0, r1, r2}
 801528c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8015290:	7823      	ldrb	r3, [r4, #0]
 8015292:	b90b      	cbnz	r3, 8015298 <racs_services__srv__Setup__get_type_description+0x34>
 8015294:	2301      	movs	r3, #1
 8015296:	7023      	strb	r3, [r4, #0]
 8015298:	4a16      	ldr	r2, [pc, #88]	; (80152f4 <racs_services__srv__Setup__get_type_description+0x90>)
 801529a:	4b17      	ldr	r3, [pc, #92]	; (80152f8 <racs_services__srv__Setup__get_type_description+0x94>)
 801529c:	4c17      	ldr	r4, [pc, #92]	; (80152fc <racs_services__srv__Setup__get_type_description+0x98>)
 801529e:	ca07      	ldmia	r2, {r0, r1, r2}
 80152a0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80152a4:	7823      	ldrb	r3, [r4, #0]
 80152a6:	b90b      	cbnz	r3, 80152ac <racs_services__srv__Setup__get_type_description+0x48>
 80152a8:	2301      	movs	r3, #1
 80152aa:	7023      	strb	r3, [r4, #0]
 80152ac:	4b14      	ldr	r3, [pc, #80]	; (8015300 <racs_services__srv__Setup__get_type_description+0x9c>)
 80152ae:	4c15      	ldr	r4, [pc, #84]	; (8015304 <racs_services__srv__Setup__get_type_description+0xa0>)
 80152b0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80152b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80152b8:	2000      	movs	r0, #0
 80152ba:	3418      	adds	r4, #24
 80152bc:	f005 fca0 	bl	801ac00 <service_msgs__msg__ServiceEventInfo__get_type_description>
 80152c0:	300c      	adds	r0, #12
 80152c2:	2301      	movs	r3, #1
 80152c4:	c807      	ldmia	r0, {r0, r1, r2}
 80152c6:	702b      	strb	r3, [r5, #0]
 80152c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80152cc:	4803      	ldr	r0, [pc, #12]	; (80152dc <racs_services__srv__Setup__get_type_description+0x78>)
 80152ce:	bd38      	pop	{r3, r4, r5, pc}
 80152d0:	f7ff ff7e 	bl	80151d0 <racs_services__srv__Setup_Event__get_type_description.part.0>
 80152d4:	e7d6      	b.n	8015284 <racs_services__srv__Setup__get_type_description+0x20>
 80152d6:	bf00      	nop
 80152d8:	200108ed 	.word	0x200108ed
 80152dc:	08020034 	.word	0x08020034
 80152e0:	20001cb0 	.word	0x20001cb0
 80152e4:	200108e9 	.word	0x200108e9
 80152e8:	0801ffd4 	.word	0x0801ffd4
 80152ec:	20001cc8 	.word	0x20001cc8
 80152f0:	200108ec 	.word	0x200108ec
 80152f4:	0802001c 	.word	0x0802001c
 80152f8:	20001ce0 	.word	0x20001ce0
 80152fc:	200108ea 	.word	0x200108ea
 8015300:	0801fff8 	.word	0x0801fff8
 8015304:	20001cf8 	.word	0x20001cf8

08015308 <racs_services__srv__Setup_Request__get_type_description>:
 8015308:	4b03      	ldr	r3, [pc, #12]	; (8015318 <racs_services__srv__Setup_Request__get_type_description+0x10>)
 801530a:	781a      	ldrb	r2, [r3, #0]
 801530c:	b90a      	cbnz	r2, 8015312 <racs_services__srv__Setup_Request__get_type_description+0xa>
 801530e:	2201      	movs	r2, #1
 8015310:	701a      	strb	r2, [r3, #0]
 8015312:	4802      	ldr	r0, [pc, #8]	; (801531c <racs_services__srv__Setup_Request__get_type_description+0x14>)
 8015314:	4770      	bx	lr
 8015316:	bf00      	nop
 8015318:	200108ec 	.word	0x200108ec
 801531c:	08020010 	.word	0x08020010

08015320 <racs_services__srv__Setup_Response__get_type_description>:
 8015320:	4b03      	ldr	r3, [pc, #12]	; (8015330 <racs_services__srv__Setup_Response__get_type_description+0x10>)
 8015322:	781a      	ldrb	r2, [r3, #0]
 8015324:	b90a      	cbnz	r2, 801532a <racs_services__srv__Setup_Response__get_type_description+0xa>
 8015326:	2201      	movs	r2, #1
 8015328:	701a      	strb	r2, [r3, #0]
 801532a:	4802      	ldr	r0, [pc, #8]	; (8015334 <racs_services__srv__Setup_Response__get_type_description+0x14>)
 801532c:	4770      	bx	lr
 801532e:	bf00      	nop
 8015330:	200108ea 	.word	0x200108ea
 8015334:	0801ffec 	.word	0x0801ffec

08015338 <racs_services__srv__Setup_Event__get_type_description>:
 8015338:	b508      	push	{r3, lr}
 801533a:	4b04      	ldr	r3, [pc, #16]	; (801534c <racs_services__srv__Setup_Event__get_type_description+0x14>)
 801533c:	781b      	ldrb	r3, [r3, #0]
 801533e:	b10b      	cbz	r3, 8015344 <racs_services__srv__Setup_Event__get_type_description+0xc>
 8015340:	4803      	ldr	r0, [pc, #12]	; (8015350 <racs_services__srv__Setup_Event__get_type_description+0x18>)
 8015342:	bd08      	pop	{r3, pc}
 8015344:	f7ff ff44 	bl	80151d0 <racs_services__srv__Setup_Event__get_type_description.part.0>
 8015348:	4801      	ldr	r0, [pc, #4]	; (8015350 <racs_services__srv__Setup_Event__get_type_description+0x18>)
 801534a:	bd08      	pop	{r3, pc}
 801534c:	200108e9 	.word	0x200108e9
 8015350:	0801ffc8 	.word	0x0801ffc8

08015354 <racs_services__srv__Setup__get_type_description_sources>:
 8015354:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015358:	4b2c      	ldr	r3, [pc, #176]	; (801540c <racs_services__srv__Setup__get_type_description_sources+0xb8>)
 801535a:	f893 9000 	ldrb.w	r9, [r3]
 801535e:	f1b9 0f00 	cmp.w	r9, #0
 8015362:	d002      	beq.n	801536a <racs_services__srv__Setup__get_type_description_sources+0x16>
 8015364:	482a      	ldr	r0, [pc, #168]	; (8015410 <racs_services__srv__Setup__get_type_description_sources+0xbc>)
 8015366:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801536a:	4d2a      	ldr	r5, [pc, #168]	; (8015414 <racs_services__srv__Setup__get_type_description_sources+0xc0>)
 801536c:	4c2a      	ldr	r4, [pc, #168]	; (8015418 <racs_services__srv__Setup__get_type_description_sources+0xc4>)
 801536e:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 8015420 <racs_services__srv__Setup__get_type_description_sources+0xcc>
 8015372:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8015424 <racs_services__srv__Setup__get_type_description_sources+0xd0>
 8015376:	4e29      	ldr	r6, [pc, #164]	; (801541c <racs_services__srv__Setup__get_type_description_sources+0xc8>)
 8015378:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801537a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801537c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801537e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015380:	682b      	ldr	r3, [r5, #0]
 8015382:	4625      	mov	r5, r4
 8015384:	4648      	mov	r0, r9
 8015386:	f104 0a28 	add.w	sl, r4, #40	; 0x28
 801538a:	f845 3b04 	str.w	r3, [r5], #4
 801538e:	f104 074c 	add.w	r7, r4, #76	; 0x4c
 8015392:	f005 fca1 	bl	801acd8 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 8015396:	4684      	mov	ip, r0
 8015398:	f104 0e70 	add.w	lr, r4, #112	; 0x70
 801539c:	3494      	adds	r4, #148	; 0x94
 801539e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80153a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80153a4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80153a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80153aa:	f8dc 3000 	ldr.w	r3, [ip]
 80153ae:	602b      	str	r3, [r5, #0]
 80153b0:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 80153b4:	e8aa 000f 	stmia.w	sl!, {r0, r1, r2, r3}
 80153b8:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 80153bc:	e8aa 000f 	stmia.w	sl!, {r0, r1, r2, r3}
 80153c0:	f8db 3000 	ldr.w	r3, [fp]
 80153c4:	f8ca 3000 	str.w	r3, [sl]
 80153c8:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 80153cc:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80153ce:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 80153d2:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80153d4:	f8d8 3000 	ldr.w	r3, [r8]
 80153d8:	603b      	str	r3, [r7, #0]
 80153da:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80153dc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80153e0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80153e2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80153e6:	6833      	ldr	r3, [r6, #0]
 80153e8:	4648      	mov	r0, r9
 80153ea:	f8ce 3000 	str.w	r3, [lr]
 80153ee:	f005 fc1f 	bl	801ac30 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source>
 80153f2:	2301      	movs	r3, #1
 80153f4:	4a05      	ldr	r2, [pc, #20]	; (801540c <racs_services__srv__Setup__get_type_description_sources+0xb8>)
 80153f6:	4605      	mov	r5, r0
 80153f8:	7013      	strb	r3, [r2, #0]
 80153fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80153fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80153fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015400:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015402:	682b      	ldr	r3, [r5, #0]
 8015404:	4802      	ldr	r0, [pc, #8]	; (8015410 <racs_services__srv__Setup__get_type_description_sources+0xbc>)
 8015406:	6023      	str	r3, [r4, #0]
 8015408:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801540c:	200108e8 	.word	0x200108e8
 8015410:	0802010c 	.word	0x0802010c
 8015414:	080200c4 	.word	0x080200c4
 8015418:	200109a4 	.word	0x200109a4
 801541c:	0802007c 	.word	0x0802007c
 8015420:	08020058 	.word	0x08020058
 8015424:	080200a0 	.word	0x080200a0

08015428 <racs_services__srv__Setup_Request__get_type_description_sources>:
 8015428:	4b09      	ldr	r3, [pc, #36]	; (8015450 <racs_services__srv__Setup_Request__get_type_description_sources+0x28>)
 801542a:	781a      	ldrb	r2, [r3, #0]
 801542c:	b96a      	cbnz	r2, 801544a <racs_services__srv__Setup_Request__get_type_description_sources+0x22>
 801542e:	2201      	movs	r2, #1
 8015430:	b430      	push	{r4, r5}
 8015432:	4d08      	ldr	r5, [pc, #32]	; (8015454 <racs_services__srv__Setup_Request__get_type_description_sources+0x2c>)
 8015434:	4c08      	ldr	r4, [pc, #32]	; (8015458 <racs_services__srv__Setup_Request__get_type_description_sources+0x30>)
 8015436:	701a      	strb	r2, [r3, #0]
 8015438:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801543a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801543c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801543e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015440:	682b      	ldr	r3, [r5, #0]
 8015442:	4806      	ldr	r0, [pc, #24]	; (801545c <racs_services__srv__Setup_Request__get_type_description_sources+0x34>)
 8015444:	6023      	str	r3, [r4, #0]
 8015446:	bc30      	pop	{r4, r5}
 8015448:	4770      	bx	lr
 801544a:	4804      	ldr	r0, [pc, #16]	; (801545c <racs_services__srv__Setup_Request__get_type_description_sources+0x34>)
 801544c:	4770      	bx	lr
 801544e:	bf00      	nop
 8015450:	200108ef 	.word	0x200108ef
 8015454:	080200a0 	.word	0x080200a0
 8015458:	20010aa0 	.word	0x20010aa0
 801545c:	08020100 	.word	0x08020100

08015460 <racs_services__srv__Setup_Response__get_type_description_sources>:
 8015460:	4b09      	ldr	r3, [pc, #36]	; (8015488 <racs_services__srv__Setup_Response__get_type_description_sources+0x28>)
 8015462:	781a      	ldrb	r2, [r3, #0]
 8015464:	b96a      	cbnz	r2, 8015482 <racs_services__srv__Setup_Response__get_type_description_sources+0x22>
 8015466:	2201      	movs	r2, #1
 8015468:	b430      	push	{r4, r5}
 801546a:	4d08      	ldr	r5, [pc, #32]	; (801548c <racs_services__srv__Setup_Response__get_type_description_sources+0x2c>)
 801546c:	4c08      	ldr	r4, [pc, #32]	; (8015490 <racs_services__srv__Setup_Response__get_type_description_sources+0x30>)
 801546e:	701a      	strb	r2, [r3, #0]
 8015470:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015472:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015474:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015476:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015478:	682b      	ldr	r3, [r5, #0]
 801547a:	4806      	ldr	r0, [pc, #24]	; (8015494 <racs_services__srv__Setup_Response__get_type_description_sources+0x34>)
 801547c:	6023      	str	r3, [r4, #0]
 801547e:	bc30      	pop	{r4, r5}
 8015480:	4770      	bx	lr
 8015482:	4804      	ldr	r0, [pc, #16]	; (8015494 <racs_services__srv__Setup_Response__get_type_description_sources+0x34>)
 8015484:	4770      	bx	lr
 8015486:	bf00      	nop
 8015488:	200108ee 	.word	0x200108ee
 801548c:	0802007c 	.word	0x0802007c
 8015490:	20010a7c 	.word	0x20010a7c
 8015494:	080200f4 	.word	0x080200f4

08015498 <racs_services__srv__Setup_Event__get_type_description_sources>:
 8015498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801549c:	4e27      	ldr	r6, [pc, #156]	; (801553c <racs_services__srv__Setup_Event__get_type_description_sources+0xa4>)
 801549e:	f896 8000 	ldrb.w	r8, [r6]
 80154a2:	f1b8 0f00 	cmp.w	r8, #0
 80154a6:	d002      	beq.n	80154ae <racs_services__srv__Setup_Event__get_type_description_sources+0x16>
 80154a8:	4825      	ldr	r0, [pc, #148]	; (8015540 <racs_services__srv__Setup_Event__get_type_description_sources+0xa8>)
 80154aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80154ae:	4d25      	ldr	r5, [pc, #148]	; (8015544 <racs_services__srv__Setup_Event__get_type_description_sources+0xac>)
 80154b0:	4c25      	ldr	r4, [pc, #148]	; (8015548 <racs_services__srv__Setup_Event__get_type_description_sources+0xb0>)
 80154b2:	f8df a09c 	ldr.w	sl, [pc, #156]	; 8015550 <racs_services__srv__Setup_Event__get_type_description_sources+0xb8>
 80154b6:	4f25      	ldr	r7, [pc, #148]	; (801554c <racs_services__srv__Setup_Event__get_type_description_sources+0xb4>)
 80154b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80154ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80154bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80154be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80154c0:	682b      	ldr	r3, [r5, #0]
 80154c2:	4625      	mov	r5, r4
 80154c4:	4640      	mov	r0, r8
 80154c6:	f104 0928 	add.w	r9, r4, #40	; 0x28
 80154ca:	f845 3b04 	str.w	r3, [r5], #4
 80154ce:	f005 fc03 	bl	801acd8 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 80154d2:	4684      	mov	ip, r0
 80154d4:	f104 0e4c 	add.w	lr, r4, #76	; 0x4c
 80154d8:	3470      	adds	r4, #112	; 0x70
 80154da:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80154de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80154e0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80154e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80154e6:	f8dc 3000 	ldr.w	r3, [ip]
 80154ea:	602b      	str	r3, [r5, #0]
 80154ec:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
 80154f0:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 80154f4:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
 80154f8:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 80154fc:	f8da 3000 	ldr.w	r3, [sl]
 8015500:	f8c9 3000 	str.w	r3, [r9]
 8015504:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8015506:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801550a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801550c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015510:	683b      	ldr	r3, [r7, #0]
 8015512:	4640      	mov	r0, r8
 8015514:	f8ce 3000 	str.w	r3, [lr]
 8015518:	f005 fb8a 	bl	801ac30 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source>
 801551c:	2301      	movs	r3, #1
 801551e:	4684      	mov	ip, r0
 8015520:	7033      	strb	r3, [r6, #0]
 8015522:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015526:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015528:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801552c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801552e:	f8dc 3000 	ldr.w	r3, [ip]
 8015532:	4803      	ldr	r0, [pc, #12]	; (8015540 <racs_services__srv__Setup_Event__get_type_description_sources+0xa8>)
 8015534:	6023      	str	r3, [r4, #0]
 8015536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801553a:	bf00      	nop
 801553c:	200108eb 	.word	0x200108eb
 8015540:	080200e8 	.word	0x080200e8
 8015544:	08020058 	.word	0x08020058
 8015548:	200108f0 	.word	0x200108f0
 801554c:	0802007c 	.word	0x0802007c
 8015550:	080200a0 	.word	0x080200a0

08015554 <racs_services__srv__Setup_Event__fini.part.0>:
 8015554:	b510      	push	{r4, lr}
 8015556:	b086      	sub	sp, #24
 8015558:	4604      	mov	r4, r0
 801555a:	f005 fba7 	bl	801acac <service_msgs__msg__ServiceEventInfo__fini>
 801555e:	a801      	add	r0, sp, #4
 8015560:	f7f9 fb58 	bl	800ec14 <rcutils_get_default_allocator>
 8015564:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8015566:	b130      	cbz	r0, 8015576 <racs_services__srv__Setup_Event__fini.part.0+0x22>
 8015568:	9b02      	ldr	r3, [sp, #8]
 801556a:	9905      	ldr	r1, [sp, #20]
 801556c:	4798      	blx	r3
 801556e:	2300      	movs	r3, #0
 8015570:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 8015574:	6323      	str	r3, [r4, #48]	; 0x30
 8015576:	a801      	add	r0, sp, #4
 8015578:	f7f9 fb4c 	bl	800ec14 <rcutils_get_default_allocator>
 801557c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801557e:	b130      	cbz	r0, 801558e <racs_services__srv__Setup_Event__fini.part.0+0x3a>
 8015580:	9b02      	ldr	r3, [sp, #8]
 8015582:	9905      	ldr	r1, [sp, #20]
 8015584:	4798      	blx	r3
 8015586:	2300      	movs	r3, #0
 8015588:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 801558c:	63e3      	str	r3, [r4, #60]	; 0x3c
 801558e:	b006      	add	sp, #24
 8015590:	bd10      	pop	{r4, pc}
 8015592:	bf00      	nop

08015594 <racs_services__srv__Setup_Request__init>:
 8015594:	3800      	subs	r0, #0
 8015596:	bf18      	it	ne
 8015598:	2001      	movne	r0, #1
 801559a:	4770      	bx	lr

0801559c <racs_services__srv__Setup_Request__fini>:
 801559c:	4770      	bx	lr
 801559e:	bf00      	nop

080155a0 <racs_services__srv__Setup_Request__copy>:
 80155a0:	4603      	mov	r3, r0
 80155a2:	b1a0      	cbz	r0, 80155ce <racs_services__srv__Setup_Request__copy+0x2e>
 80155a4:	b199      	cbz	r1, 80155ce <racs_services__srv__Setup_Request__copy+0x2e>
 80155a6:	7802      	ldrb	r2, [r0, #0]
 80155a8:	2001      	movs	r0, #1
 80155aa:	700a      	strb	r2, [r1, #0]
 80155ac:	689a      	ldr	r2, [r3, #8]
 80155ae:	f8d3 c004 	ldr.w	ip, [r3, #4]
 80155b2:	608a      	str	r2, [r1, #8]
 80155b4:	691a      	ldr	r2, [r3, #16]
 80155b6:	f8c1 c004 	str.w	ip, [r1, #4]
 80155ba:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 80155be:	610a      	str	r2, [r1, #16]
 80155c0:	695a      	ldr	r2, [r3, #20]
 80155c2:	699b      	ldr	r3, [r3, #24]
 80155c4:	f8c1 c00c 	str.w	ip, [r1, #12]
 80155c8:	614a      	str	r2, [r1, #20]
 80155ca:	618b      	str	r3, [r1, #24]
 80155cc:	4770      	bx	lr
 80155ce:	2000      	movs	r0, #0
 80155d0:	4770      	bx	lr
 80155d2:	bf00      	nop

080155d4 <racs_services__srv__Setup_Request__Sequence__init>:
 80155d4:	b530      	push	{r4, r5, lr}
 80155d6:	4604      	mov	r4, r0
 80155d8:	b087      	sub	sp, #28
 80155da:	b148      	cbz	r0, 80155f0 <racs_services__srv__Setup_Request__Sequence__init+0x1c>
 80155dc:	460d      	mov	r5, r1
 80155de:	a801      	add	r0, sp, #4
 80155e0:	f7f9 fb18 	bl	800ec14 <rcutils_get_default_allocator>
 80155e4:	b935      	cbnz	r5, 80155f4 <racs_services__srv__Setup_Request__Sequence__init+0x20>
 80155e6:	462b      	mov	r3, r5
 80155e8:	2001      	movs	r0, #1
 80155ea:	60a5      	str	r5, [r4, #8]
 80155ec:	e9c4 3500 	strd	r3, r5, [r4]
 80155f0:	b007      	add	sp, #28
 80155f2:	bd30      	pop	{r4, r5, pc}
 80155f4:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 80155f8:	211c      	movs	r1, #28
 80155fa:	4628      	mov	r0, r5
 80155fc:	4798      	blx	r3
 80155fe:	4603      	mov	r3, r0
 8015600:	2800      	cmp	r0, #0
 8015602:	d1f1      	bne.n	80155e8 <racs_services__srv__Setup_Request__Sequence__init+0x14>
 8015604:	e7f4      	b.n	80155f0 <racs_services__srv__Setup_Request__Sequence__init+0x1c>
 8015606:	bf00      	nop

08015608 <racs_services__srv__Setup_Request__Sequence__fini>:
 8015608:	b180      	cbz	r0, 801562c <racs_services__srv__Setup_Request__Sequence__fini+0x24>
 801560a:	b510      	push	{r4, lr}
 801560c:	b086      	sub	sp, #24
 801560e:	4604      	mov	r4, r0
 8015610:	a801      	add	r0, sp, #4
 8015612:	f7f9 faff 	bl	800ec14 <rcutils_get_default_allocator>
 8015616:	6820      	ldr	r0, [r4, #0]
 8015618:	b130      	cbz	r0, 8015628 <racs_services__srv__Setup_Request__Sequence__fini+0x20>
 801561a:	9b02      	ldr	r3, [sp, #8]
 801561c:	9905      	ldr	r1, [sp, #20]
 801561e:	4798      	blx	r3
 8015620:	2300      	movs	r3, #0
 8015622:	e9c4 3300 	strd	r3, r3, [r4]
 8015626:	60a3      	str	r3, [r4, #8]
 8015628:	b006      	add	sp, #24
 801562a:	bd10      	pop	{r4, pc}
 801562c:	4770      	bx	lr
 801562e:	bf00      	nop

08015630 <racs_services__srv__Setup_Response__init>:
 8015630:	3800      	subs	r0, #0
 8015632:	bf18      	it	ne
 8015634:	2001      	movne	r0, #1
 8015636:	4770      	bx	lr

08015638 <racs_services__srv__Setup_Response__fini>:
 8015638:	4770      	bx	lr
 801563a:	bf00      	nop

0801563c <racs_services__srv__Setup_Response__copy>:
 801563c:	b120      	cbz	r0, 8015648 <racs_services__srv__Setup_Response__copy+0xc>
 801563e:	b119      	cbz	r1, 8015648 <racs_services__srv__Setup_Response__copy+0xc>
 8015640:	7803      	ldrb	r3, [r0, #0]
 8015642:	2001      	movs	r0, #1
 8015644:	700b      	strb	r3, [r1, #0]
 8015646:	4770      	bx	lr
 8015648:	2000      	movs	r0, #0
 801564a:	4770      	bx	lr

0801564c <racs_services__srv__Setup_Response__Sequence__init>:
 801564c:	b530      	push	{r4, r5, lr}
 801564e:	4604      	mov	r4, r0
 8015650:	b087      	sub	sp, #28
 8015652:	b148      	cbz	r0, 8015668 <racs_services__srv__Setup_Response__Sequence__init+0x1c>
 8015654:	460d      	mov	r5, r1
 8015656:	a801      	add	r0, sp, #4
 8015658:	f7f9 fadc 	bl	800ec14 <rcutils_get_default_allocator>
 801565c:	b935      	cbnz	r5, 801566c <racs_services__srv__Setup_Response__Sequence__init+0x20>
 801565e:	462b      	mov	r3, r5
 8015660:	2001      	movs	r0, #1
 8015662:	60a5      	str	r5, [r4, #8]
 8015664:	e9c4 3500 	strd	r3, r5, [r4]
 8015668:	b007      	add	sp, #28
 801566a:	bd30      	pop	{r4, r5, pc}
 801566c:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8015670:	2101      	movs	r1, #1
 8015672:	4628      	mov	r0, r5
 8015674:	4798      	blx	r3
 8015676:	4603      	mov	r3, r0
 8015678:	2800      	cmp	r0, #0
 801567a:	d1f1      	bne.n	8015660 <racs_services__srv__Setup_Response__Sequence__init+0x14>
 801567c:	e7f4      	b.n	8015668 <racs_services__srv__Setup_Response__Sequence__init+0x1c>
 801567e:	bf00      	nop

08015680 <racs_services__srv__Setup_Response__Sequence__fini>:
 8015680:	b180      	cbz	r0, 80156a4 <racs_services__srv__Setup_Response__Sequence__fini+0x24>
 8015682:	b510      	push	{r4, lr}
 8015684:	b086      	sub	sp, #24
 8015686:	4604      	mov	r4, r0
 8015688:	a801      	add	r0, sp, #4
 801568a:	f7f9 fac3 	bl	800ec14 <rcutils_get_default_allocator>
 801568e:	6820      	ldr	r0, [r4, #0]
 8015690:	b130      	cbz	r0, 80156a0 <racs_services__srv__Setup_Response__Sequence__fini+0x20>
 8015692:	9b02      	ldr	r3, [sp, #8]
 8015694:	9905      	ldr	r1, [sp, #20]
 8015696:	4798      	blx	r3
 8015698:	2300      	movs	r3, #0
 801569a:	e9c4 3300 	strd	r3, r3, [r4]
 801569e:	60a3      	str	r3, [r4, #8]
 80156a0:	b006      	add	sp, #24
 80156a2:	bd10      	pop	{r4, pc}
 80156a4:	4770      	bx	lr
 80156a6:	bf00      	nop

080156a8 <racs_services__srv__Setup_Event__init>:
 80156a8:	b570      	push	{r4, r5, r6, lr}
 80156aa:	4604      	mov	r4, r0
 80156ac:	b086      	sub	sp, #24
 80156ae:	b1c8      	cbz	r0, 80156e4 <racs_services__srv__Setup_Event__init+0x3c>
 80156b0:	f005 faea 	bl	801ac88 <service_msgs__msg__ServiceEventInfo__init>
 80156b4:	4605      	mov	r5, r0
 80156b6:	b178      	cbz	r0, 80156d8 <racs_services__srv__Setup_Event__init+0x30>
 80156b8:	2600      	movs	r6, #0
 80156ba:	a801      	add	r0, sp, #4
 80156bc:	f7f9 faaa 	bl	800ec14 <rcutils_get_default_allocator>
 80156c0:	a801      	add	r0, sp, #4
 80156c2:	6326      	str	r6, [r4, #48]	; 0x30
 80156c4:	e9c4 660a 	strd	r6, r6, [r4, #40]	; 0x28
 80156c8:	f7f9 faa4 	bl	800ec14 <rcutils_get_default_allocator>
 80156cc:	4628      	mov	r0, r5
 80156ce:	63e6      	str	r6, [r4, #60]	; 0x3c
 80156d0:	e9c4 660d 	strd	r6, r6, [r4, #52]	; 0x34
 80156d4:	b006      	add	sp, #24
 80156d6:	bd70      	pop	{r4, r5, r6, pc}
 80156d8:	4620      	mov	r0, r4
 80156da:	f7ff ff3b 	bl	8015554 <racs_services__srv__Setup_Event__fini.part.0>
 80156de:	4628      	mov	r0, r5
 80156e0:	b006      	add	sp, #24
 80156e2:	bd70      	pop	{r4, r5, r6, pc}
 80156e4:	4605      	mov	r5, r0
 80156e6:	4628      	mov	r0, r5
 80156e8:	b006      	add	sp, #24
 80156ea:	bd70      	pop	{r4, r5, r6, pc}

080156ec <racs_services__srv__Setup_Event__fini>:
 80156ec:	b1f0      	cbz	r0, 801572c <racs_services__srv__Setup_Event__fini+0x40>
 80156ee:	b510      	push	{r4, lr}
 80156f0:	b086      	sub	sp, #24
 80156f2:	4604      	mov	r4, r0
 80156f4:	f005 fada 	bl	801acac <service_msgs__msg__ServiceEventInfo__fini>
 80156f8:	a801      	add	r0, sp, #4
 80156fa:	f7f9 fa8b 	bl	800ec14 <rcutils_get_default_allocator>
 80156fe:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8015700:	b130      	cbz	r0, 8015710 <racs_services__srv__Setup_Event__fini+0x24>
 8015702:	9b02      	ldr	r3, [sp, #8]
 8015704:	9905      	ldr	r1, [sp, #20]
 8015706:	4798      	blx	r3
 8015708:	2300      	movs	r3, #0
 801570a:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 801570e:	6323      	str	r3, [r4, #48]	; 0x30
 8015710:	a801      	add	r0, sp, #4
 8015712:	f7f9 fa7f 	bl	800ec14 <rcutils_get_default_allocator>
 8015716:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8015718:	b130      	cbz	r0, 8015728 <racs_services__srv__Setup_Event__fini+0x3c>
 801571a:	9b02      	ldr	r3, [sp, #8]
 801571c:	9905      	ldr	r1, [sp, #20]
 801571e:	4798      	blx	r3
 8015720:	2300      	movs	r3, #0
 8015722:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 8015726:	63e3      	str	r3, [r4, #60]	; 0x3c
 8015728:	b006      	add	sp, #24
 801572a:	bd10      	pop	{r4, pc}
 801572c:	4770      	bx	lr
 801572e:	bf00      	nop

08015730 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup>:
 8015730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015734:	2900      	cmp	r1, #0
 8015736:	d04d      	beq.n	80157d4 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup+0xa4>
 8015738:	4605      	mov	r5, r0
 801573a:	2800      	cmp	r0, #0
 801573c:	d04a      	beq.n	80157d4 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup+0xa4>
 801573e:	460e      	mov	r6, r1
 8015740:	4698      	mov	r8, r3
 8015742:	2040      	movs	r0, #64	; 0x40
 8015744:	680b      	ldr	r3, [r1, #0]
 8015746:	6909      	ldr	r1, [r1, #16]
 8015748:	4617      	mov	r7, r2
 801574a:	4798      	blx	r3
 801574c:	4604      	mov	r4, r0
 801574e:	f7ff ffab 	bl	80156a8 <racs_services__srv__Setup_Event__init>
 8015752:	4684      	mov	ip, r0
 8015754:	b370      	cbz	r0, 80157b4 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup+0x84>
 8015756:	782b      	ldrb	r3, [r5, #0]
 8015758:	7023      	strb	r3, [r4, #0]
 801575a:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
 801575e:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 8015762:	e9c4 2301 	strd	r2, r3, [r4, #4]
 8015766:	e9c4 0108 	strd	r0, r1, [r4, #32]
 801576a:	68e8      	ldr	r0, [r5, #12]
 801576c:	6929      	ldr	r1, [r5, #16]
 801576e:	696a      	ldr	r2, [r5, #20]
 8015770:	69ab      	ldr	r3, [r5, #24]
 8015772:	60e0      	str	r0, [r4, #12]
 8015774:	6121      	str	r1, [r4, #16]
 8015776:	6162      	str	r2, [r4, #20]
 8015778:	61a3      	str	r3, [r4, #24]
 801577a:	b157      	cbz	r7, 8015792 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup+0x62>
 801577c:	2101      	movs	r1, #1
 801577e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8015782:	f7ff ff27 	bl	80155d4 <racs_services__srv__Setup_Request__Sequence__init>
 8015786:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8015788:	4638      	mov	r0, r7
 801578a:	f7ff ff09 	bl	80155a0 <racs_services__srv__Setup_Request__copy>
 801578e:	4603      	mov	r3, r0
 8015790:	b1c0      	cbz	r0, 80157c4 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup+0x94>
 8015792:	f1b8 0f00 	cmp.w	r8, #0
 8015796:	d00a      	beq.n	80157ae <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup+0x7e>
 8015798:	2101      	movs	r1, #1
 801579a:	f104 0034 	add.w	r0, r4, #52	; 0x34
 801579e:	f7ff ff55 	bl	801564c <racs_services__srv__Setup_Response__Sequence__init>
 80157a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80157a4:	4640      	mov	r0, r8
 80157a6:	f7ff ff49 	bl	801563c <racs_services__srv__Setup_Response__copy>
 80157aa:	4603      	mov	r3, r0
 80157ac:	b150      	cbz	r0, 80157c4 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup+0x94>
 80157ae:	4620      	mov	r0, r4
 80157b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80157b4:	4620      	mov	r0, r4
 80157b6:	4664      	mov	r4, ip
 80157b8:	6873      	ldr	r3, [r6, #4]
 80157ba:	6931      	ldr	r1, [r6, #16]
 80157bc:	4798      	blx	r3
 80157be:	4620      	mov	r0, r4
 80157c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80157c4:	4620      	mov	r0, r4
 80157c6:	461c      	mov	r4, r3
 80157c8:	6872      	ldr	r2, [r6, #4]
 80157ca:	6931      	ldr	r1, [r6, #16]
 80157cc:	4790      	blx	r2
 80157ce:	4620      	mov	r0, r4
 80157d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80157d4:	2400      	movs	r4, #0
 80157d6:	4620      	mov	r0, r4
 80157d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080157dc <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Setup>:
 80157dc:	b1b9      	cbz	r1, 801580e <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Setup+0x32>
 80157de:	b538      	push	{r3, r4, r5, lr}
 80157e0:	4605      	mov	r5, r0
 80157e2:	b190      	cbz	r0, 801580a <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Setup+0x2e>
 80157e4:	460c      	mov	r4, r1
 80157e6:	f7ff ff81 	bl	80156ec <racs_services__srv__Setup_Event__fini>
 80157ea:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 80157ec:	b110      	cbz	r0, 80157f4 <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Setup+0x18>
 80157ee:	6863      	ldr	r3, [r4, #4]
 80157f0:	6921      	ldr	r1, [r4, #16]
 80157f2:	4798      	blx	r3
 80157f4:	6b68      	ldr	r0, [r5, #52]	; 0x34
 80157f6:	b110      	cbz	r0, 80157fe <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Setup+0x22>
 80157f8:	6863      	ldr	r3, [r4, #4]
 80157fa:	6921      	ldr	r1, [r4, #16]
 80157fc:	4798      	blx	r3
 80157fe:	4628      	mov	r0, r5
 8015800:	6863      	ldr	r3, [r4, #4]
 8015802:	6921      	ldr	r1, [r4, #16]
 8015804:	4798      	blx	r3
 8015806:	2001      	movs	r0, #1
 8015808:	bd38      	pop	{r3, r4, r5, pc}
 801580a:	2000      	movs	r0, #0
 801580c:	bd38      	pop	{r3, r4, r5, pc}
 801580e:	2000      	movs	r0, #0
 8015810:	4770      	bx	lr
 8015812:	bf00      	nop

08015814 <rcl_client_get_rmw_handle>:
 8015814:	b118      	cbz	r0, 801581e <rcl_client_get_rmw_handle+0xa>
 8015816:	6800      	ldr	r0, [r0, #0]
 8015818:	b108      	cbz	r0, 801581e <rcl_client_get_rmw_handle+0xa>
 801581a:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 801581e:	4770      	bx	lr

08015820 <rcl_send_request>:
 8015820:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015822:	b08b      	sub	sp, #44	; 0x2c
 8015824:	b1e8      	cbz	r0, 8015862 <rcl_send_request+0x42>
 8015826:	4604      	mov	r4, r0
 8015828:	6800      	ldr	r0, [r0, #0]
 801582a:	b1d0      	cbz	r0, 8015862 <rcl_send_request+0x42>
 801582c:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8015830:	b1bb      	cbz	r3, 8015862 <rcl_send_request+0x42>
 8015832:	460f      	mov	r7, r1
 8015834:	b1d1      	cbz	r1, 801586c <rcl_send_request+0x4c>
 8015836:	4615      	mov	r5, r2
 8015838:	b1c2      	cbz	r2, 801586c <rcl_send_request+0x4c>
 801583a:	2105      	movs	r1, #5
 801583c:	f500 7088 	add.w	r0, r0, #272	; 0x110
 8015840:	f003 fa12 	bl	8018c68 <__atomic_load_8>
 8015844:	6823      	ldr	r3, [r4, #0]
 8015846:	462a      	mov	r2, r5
 8015848:	e9c5 0100 	strd	r0, r1, [r5]
 801584c:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 8015850:	4639      	mov	r1, r7
 8015852:	f004 fbd3 	bl	8019ffc <rmw_send_request>
 8015856:	4606      	mov	r6, r0
 8015858:	b160      	cbz	r0, 8015874 <rcl_send_request+0x54>
 801585a:	2601      	movs	r6, #1
 801585c:	4630      	mov	r0, r6
 801585e:	b00b      	add	sp, #44	; 0x2c
 8015860:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015862:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
 8015866:	4630      	mov	r0, r6
 8015868:	b00b      	add	sp, #44	; 0x2c
 801586a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801586c:	260b      	movs	r6, #11
 801586e:	4630      	mov	r0, r6
 8015870:	b00b      	add	sp, #44	; 0x2c
 8015872:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015874:	6820      	ldr	r0, [r4, #0]
 8015876:	2305      	movs	r3, #5
 8015878:	f500 7088 	add.w	r0, r0, #272	; 0x110
 801587c:	9300      	str	r3, [sp, #0]
 801587e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015882:	f003 fa5d 	bl	8018d40 <__atomic_exchange_8>
 8015886:	6823      	ldr	r3, [r4, #0]
 8015888:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 801588c:	2a00      	cmp	r2, #0
 801588e:	d0e5      	beq.n	801585c <rcl_send_request+0x3c>
 8015890:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 8015894:	a905      	add	r1, sp, #20
 8015896:	f003 ffcd 	bl	8019834 <rmw_get_gid_for_client>
 801589a:	b970      	cbnz	r0, 80158ba <rcl_send_request+0x9a>
 801589c:	6820      	ldr	r0, [r4, #0]
 801589e:	ab06      	add	r3, sp, #24
 80158a0:	4631      	mov	r1, r6
 80158a2:	463a      	mov	r2, r7
 80158a4:	f8d0 0118 	ldr.w	r0, [r0, #280]	; 0x118
 80158a8:	9302      	str	r3, [sp, #8]
 80158aa:	e9d5 4500 	ldrd	r4, r5, [r5]
 80158ae:	e9cd 4500 	strd	r4, r5, [sp]
 80158b2:	f001 f845 	bl	8016940 <rcl_send_service_event_message>
 80158b6:	4606      	mov	r6, r0
 80158b8:	e7d0      	b.n	801585c <rcl_send_request+0x3c>
 80158ba:	f000 f877 	bl	80159ac <rcl_convert_rmw_ret_to_rcl_ret>
 80158be:	4606      	mov	r6, r0
 80158c0:	e7cc      	b.n	801585c <rcl_send_request+0x3c>
 80158c2:	bf00      	nop
 80158c4:	0000      	movs	r0, r0
	...

080158c8 <rcl_take_response>:
 80158c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80158ca:	468e      	mov	lr, r1
 80158cc:	b095      	sub	sp, #84	; 0x54
 80158ce:	460c      	mov	r4, r1
 80158d0:	4616      	mov	r6, r2
 80158d2:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
 80158d6:	4605      	mov	r5, r0
 80158d8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80158dc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80158e0:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80158e4:	e88c 0003 	stmia.w	ip, {r0, r1}
 80158e8:	2d00      	cmp	r5, #0
 80158ea:	d042      	beq.n	8015972 <rcl_take_response+0xaa>
 80158ec:	682b      	ldr	r3, [r5, #0]
 80158ee:	2b00      	cmp	r3, #0
 80158f0:	d03f      	beq.n	8015972 <rcl_take_response+0xaa>
 80158f2:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 80158f6:	2800      	cmp	r0, #0
 80158f8:	d03b      	beq.n	8015972 <rcl_take_response+0xaa>
 80158fa:	2e00      	cmp	r6, #0
 80158fc:	d03c      	beq.n	8015978 <rcl_take_response+0xb0>
 80158fe:	2300      	movs	r3, #0
 8015900:	4632      	mov	r2, r6
 8015902:	a90a      	add	r1, sp, #40	; 0x28
 8015904:	f88d 3013 	strb.w	r3, [sp, #19]
 8015908:	f10d 0313 	add.w	r3, sp, #19
 801590c:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8015990 <rcl_take_response+0xc8>
 8015910:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8015914:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8015918:	f004 fc78 	bl	801a20c <rmw_take_response>
 801591c:	4607      	mov	r7, r0
 801591e:	bb68      	cbnz	r0, 801597c <rcl_take_response+0xb4>
 8015920:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8015924:	b363      	cbz	r3, 8015980 <rcl_take_response+0xb8>
 8015926:	682b      	ldr	r3, [r5, #0]
 8015928:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 801592c:	b19a      	cbz	r2, 8015956 <rcl_take_response+0x8e>
 801592e:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 8015932:	a905      	add	r1, sp, #20
 8015934:	f003 ff7e 	bl	8019834 <rmw_get_gid_for_client>
 8015938:	bb28      	cbnz	r0, 8015986 <rcl_take_response+0xbe>
 801593a:	6829      	ldr	r1, [r5, #0]
 801593c:	ab06      	add	r3, sp, #24
 801593e:	4632      	mov	r2, r6
 8015940:	f8d1 0118 	ldr.w	r0, [r1, #280]	; 0x118
 8015944:	2103      	movs	r1, #3
 8015946:	9302      	str	r3, [sp, #8]
 8015948:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 801594c:	e9cd 6700 	strd	r6, r7, [sp]
 8015950:	f000 fff6 	bl	8016940 <rcl_send_service_event_message>
 8015954:	4607      	mov	r7, r0
 8015956:	f10d 0e38 	add.w	lr, sp, #56	; 0x38
 801595a:	46a4      	mov	ip, r4
 801595c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015960:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015964:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8015968:	e88c 0003 	stmia.w	ip, {r0, r1}
 801596c:	4638      	mov	r0, r7
 801596e:	b015      	add	sp, #84	; 0x54
 8015970:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015972:	f44f 77fa 	mov.w	r7, #500	; 0x1f4
 8015976:	e7ee      	b.n	8015956 <rcl_take_response+0x8e>
 8015978:	270b      	movs	r7, #11
 801597a:	e7ec      	b.n	8015956 <rcl_take_response+0x8e>
 801597c:	2701      	movs	r7, #1
 801597e:	e7ea      	b.n	8015956 <rcl_take_response+0x8e>
 8015980:	f240 17f5 	movw	r7, #501	; 0x1f5
 8015984:	e7e7      	b.n	8015956 <rcl_take_response+0x8e>
 8015986:	f000 f811 	bl	80159ac <rcl_convert_rmw_ret_to_rcl_ret>
 801598a:	4607      	mov	r7, r0
 801598c:	e7e3      	b.n	8015956 <rcl_take_response+0x8e>
 801598e:	bf00      	nop
	...

08015998 <rcl_client_is_valid>:
 8015998:	b130      	cbz	r0, 80159a8 <rcl_client_is_valid+0x10>
 801599a:	6800      	ldr	r0, [r0, #0]
 801599c:	b120      	cbz	r0, 80159a8 <rcl_client_is_valid+0x10>
 801599e:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 80159a2:	3800      	subs	r0, #0
 80159a4:	bf18      	it	ne
 80159a6:	2001      	movne	r0, #1
 80159a8:	4770      	bx	lr
 80159aa:	bf00      	nop

080159ac <rcl_convert_rmw_ret_to_rcl_ret>:
 80159ac:	280b      	cmp	r0, #11
 80159ae:	dc0d      	bgt.n	80159cc <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 80159b0:	2800      	cmp	r0, #0
 80159b2:	db09      	blt.n	80159c8 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 80159b4:	280b      	cmp	r0, #11
 80159b6:	d807      	bhi.n	80159c8 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 80159b8:	e8df f000 	tbb	[pc, r0]
 80159bc:	07060607 	.word	0x07060607
 80159c0:	06060606 	.word	0x06060606
 80159c4:	07070606 	.word	0x07070606
 80159c8:	2001      	movs	r0, #1
 80159ca:	4770      	bx	lr
 80159cc:	28cb      	cmp	r0, #203	; 0xcb
 80159ce:	bf18      	it	ne
 80159d0:	2001      	movne	r0, #1
 80159d2:	4770      	bx	lr

080159d4 <rcl_get_zero_initialized_context>:
 80159d4:	4a03      	ldr	r2, [pc, #12]	; (80159e4 <rcl_get_zero_initialized_context+0x10>)
 80159d6:	4603      	mov	r3, r0
 80159d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80159dc:	e883 0003 	stmia.w	r3, {r0, r1}
 80159e0:	4618      	mov	r0, r3
 80159e2:	4770      	bx	lr
 80159e4:	08020118 	.word	0x08020118

080159e8 <rcl_context_is_valid>:
 80159e8:	b118      	cbz	r0, 80159f2 <rcl_context_is_valid+0xa>
 80159ea:	6840      	ldr	r0, [r0, #4]
 80159ec:	3800      	subs	r0, #0
 80159ee:	bf18      	it	ne
 80159f0:	2001      	movne	r0, #1
 80159f2:	4770      	bx	lr

080159f4 <__cleanup_context>:
 80159f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80159f8:	4606      	mov	r6, r0
 80159fa:	2300      	movs	r3, #0
 80159fc:	6800      	ldr	r0, [r0, #0]
 80159fe:	6073      	str	r3, [r6, #4]
 8015a00:	2800      	cmp	r0, #0
 8015a02:	d049      	beq.n	8015a98 <__cleanup_context+0xa4>
 8015a04:	6947      	ldr	r7, [r0, #20]
 8015a06:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8015a0a:	f8d0 9010 	ldr.w	r9, [r0, #16]
 8015a0e:	b137      	cbz	r7, 8015a1e <__cleanup_context+0x2a>
 8015a10:	3014      	adds	r0, #20
 8015a12:	f000 f9e7 	bl	8015de4 <rcl_init_options_fini>
 8015a16:	4607      	mov	r7, r0
 8015a18:	2800      	cmp	r0, #0
 8015a1a:	d144      	bne.n	8015aa6 <__cleanup_context+0xb2>
 8015a1c:	6830      	ldr	r0, [r6, #0]
 8015a1e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8015a20:	b143      	cbz	r3, 8015a34 <__cleanup_context+0x40>
 8015a22:	3028      	adds	r0, #40	; 0x28
 8015a24:	f004 f930 	bl	8019c88 <rmw_context_fini>
 8015a28:	b118      	cbz	r0, 8015a32 <__cleanup_context+0x3e>
 8015a2a:	2f00      	cmp	r7, #0
 8015a2c:	d03e      	beq.n	8015aac <__cleanup_context+0xb8>
 8015a2e:	f7f9 f923 	bl	800ec78 <rcutils_reset_error>
 8015a32:	6830      	ldr	r0, [r6, #0]
 8015a34:	6a03      	ldr	r3, [r0, #32]
 8015a36:	b1db      	cbz	r3, 8015a70 <__cleanup_context+0x7c>
 8015a38:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 8015a3c:	2a01      	cmp	r2, #1
 8015a3e:	f17c 0100 	sbcs.w	r1, ip, #0
 8015a42:	db11      	blt.n	8015a68 <__cleanup_context+0x74>
 8015a44:	2400      	movs	r4, #0
 8015a46:	4625      	mov	r5, r4
 8015a48:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015a4c:	4649      	mov	r1, r9
 8015a4e:	b1b8      	cbz	r0, 8015a80 <__cleanup_context+0x8c>
 8015a50:	47c0      	blx	r8
 8015a52:	6833      	ldr	r3, [r6, #0]
 8015a54:	3401      	adds	r4, #1
 8015a56:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 8015a5a:	f145 0500 	adc.w	r5, r5, #0
 8015a5e:	6a1b      	ldr	r3, [r3, #32]
 8015a60:	4294      	cmp	r4, r2
 8015a62:	eb75 010c 	sbcs.w	r1, r5, ip
 8015a66:	dbef      	blt.n	8015a48 <__cleanup_context+0x54>
 8015a68:	4618      	mov	r0, r3
 8015a6a:	4649      	mov	r1, r9
 8015a6c:	47c0      	blx	r8
 8015a6e:	6830      	ldr	r0, [r6, #0]
 8015a70:	4649      	mov	r1, r9
 8015a72:	47c0      	blx	r8
 8015a74:	2300      	movs	r3, #0
 8015a76:	4638      	mov	r0, r7
 8015a78:	e9c6 3300 	strd	r3, r3, [r6]
 8015a7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015a80:	3401      	adds	r4, #1
 8015a82:	f145 0500 	adc.w	r5, r5, #0
 8015a86:	4294      	cmp	r4, r2
 8015a88:	eb75 010c 	sbcs.w	r1, r5, ip
 8015a8c:	dbdc      	blt.n	8015a48 <__cleanup_context+0x54>
 8015a8e:	4618      	mov	r0, r3
 8015a90:	4649      	mov	r1, r9
 8015a92:	47c0      	blx	r8
 8015a94:	6830      	ldr	r0, [r6, #0]
 8015a96:	e7eb      	b.n	8015a70 <__cleanup_context+0x7c>
 8015a98:	4607      	mov	r7, r0
 8015a9a:	2300      	movs	r3, #0
 8015a9c:	4638      	mov	r0, r7
 8015a9e:	e9c6 3300 	strd	r3, r3, [r6]
 8015aa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015aa6:	f7f9 f8e7 	bl	800ec78 <rcutils_reset_error>
 8015aaa:	e7b7      	b.n	8015a1c <__cleanup_context+0x28>
 8015aac:	f7ff ff7e 	bl	80159ac <rcl_convert_rmw_ret_to_rcl_ret>
 8015ab0:	4607      	mov	r7, r0
 8015ab2:	e7bc      	b.n	8015a2e <__cleanup_context+0x3a>

08015ab4 <rcl_init>:
 8015ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ab8:	1e05      	subs	r5, r0, #0
 8015aba:	b0a7      	sub	sp, #156	; 0x9c
 8015abc:	460e      	mov	r6, r1
 8015abe:	4690      	mov	r8, r2
 8015ac0:	461f      	mov	r7, r3
 8015ac2:	f340 80a0 	ble.w	8015c06 <rcl_init+0x152>
 8015ac6:	2900      	cmp	r1, #0
 8015ac8:	f000 80a0 	beq.w	8015c0c <rcl_init+0x158>
 8015acc:	f1a1 0e04 	sub.w	lr, r1, #4
 8015ad0:	f04f 0c00 	mov.w	ip, #0
 8015ad4:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 8015ad8:	f10c 0c01 	add.w	ip, ip, #1
 8015adc:	2c00      	cmp	r4, #0
 8015ade:	f000 8095 	beq.w	8015c0c <rcl_init+0x158>
 8015ae2:	4565      	cmp	r5, ip
 8015ae4:	d1f6      	bne.n	8015ad4 <rcl_init+0x20>
 8015ae6:	f1b8 0f00 	cmp.w	r8, #0
 8015aea:	f000 808f 	beq.w	8015c0c <rcl_init+0x158>
 8015aee:	f8d8 4000 	ldr.w	r4, [r8]
 8015af2:	2c00      	cmp	r4, #0
 8015af4:	f000 808a 	beq.w	8015c0c <rcl_init+0x158>
 8015af8:	f10d 0c84 	add.w	ip, sp, #132	; 0x84
 8015afc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015afe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015b02:	6823      	ldr	r3, [r4, #0]
 8015b04:	a821      	add	r0, sp, #132	; 0x84
 8015b06:	f8cc 3000 	str.w	r3, [ip]
 8015b0a:	f7f9 f891 	bl	800ec30 <rcutils_allocator_is_valid>
 8015b0e:	f080 0001 	eor.w	r0, r0, #1
 8015b12:	b2c0      	uxtb	r0, r0
 8015b14:	2800      	cmp	r0, #0
 8015b16:	d179      	bne.n	8015c0c <rcl_init+0x158>
 8015b18:	2f00      	cmp	r7, #0
 8015b1a:	d077      	beq.n	8015c0c <rcl_init+0x158>
 8015b1c:	683b      	ldr	r3, [r7, #0]
 8015b1e:	2b00      	cmp	r3, #0
 8015b20:	d179      	bne.n	8015c16 <rcl_init+0x162>
 8015b22:	2198      	movs	r1, #152	; 0x98
 8015b24:	2001      	movs	r0, #1
 8015b26:	e9dd 3224 	ldrd	r3, r2, [sp, #144]	; 0x90
 8015b2a:	4798      	blx	r3
 8015b2c:	4604      	mov	r4, r0
 8015b2e:	6038      	str	r0, [r7, #0]
 8015b30:	2800      	cmp	r0, #0
 8015b32:	f000 80cd 	beq.w	8015cd0 <rcl_init+0x21c>
 8015b36:	a802      	add	r0, sp, #8
 8015b38:	f003 fbea 	bl	8019310 <rmw_get_zero_initialized_context>
 8015b3c:	a902      	add	r1, sp, #8
 8015b3e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8015b42:	2270      	movs	r2, #112	; 0x70
 8015b44:	f008 f957 	bl	801ddf6 <memcpy>
 8015b48:	f8d7 e000 	ldr.w	lr, [r7]
 8015b4c:	f10d 0c84 	add.w	ip, sp, #132	; 0x84
 8015b50:	4674      	mov	r4, lr
 8015b52:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015b56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015b58:	f8dc 3000 	ldr.w	r3, [ip]
 8015b5c:	f10e 0114 	add.w	r1, lr, #20
 8015b60:	4640      	mov	r0, r8
 8015b62:	6023      	str	r3, [r4, #0]
 8015b64:	f000 f968 	bl	8015e38 <rcl_init_options_copy>
 8015b68:	4604      	mov	r4, r0
 8015b6a:	2800      	cmp	r0, #0
 8015b6c:	d144      	bne.n	8015bf8 <rcl_init+0x144>
 8015b6e:	f8d7 9000 	ldr.w	r9, [r7]
 8015b72:	ea4f 7ae5 	mov.w	sl, r5, asr #31
 8015b76:	f8c9 0020 	str.w	r0, [r9, #32]
 8015b7a:	f8c9 5018 	str.w	r5, [r9, #24]
 8015b7e:	f8c9 a01c 	str.w	sl, [r9, #28]
 8015b82:	2d00      	cmp	r5, #0
 8015b84:	d04e      	beq.n	8015c24 <rcl_init+0x170>
 8015b86:	2e00      	cmp	r6, #0
 8015b88:	d04c      	beq.n	8015c24 <rcl_init+0x170>
 8015b8a:	2104      	movs	r1, #4
 8015b8c:	4628      	mov	r0, r5
 8015b8e:	e9dd 3224 	ldrd	r3, r2, [sp, #144]	; 0x90
 8015b92:	4798      	blx	r3
 8015b94:	f8c9 0020 	str.w	r0, [r9, #32]
 8015b98:	f8d7 9000 	ldr.w	r9, [r7]
 8015b9c:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8015ba0:	46cb      	mov	fp, r9
 8015ba2:	b343      	cbz	r3, 8015bf6 <rcl_init+0x142>
 8015ba4:	2d01      	cmp	r5, #1
 8015ba6:	f17a 0300 	sbcs.w	r3, sl, #0
 8015baa:	db3b      	blt.n	8015c24 <rcl_init+0x170>
 8015bac:	2400      	movs	r4, #0
 8015bae:	3e04      	subs	r6, #4
 8015bb0:	46a1      	mov	r9, r4
 8015bb2:	e00b      	b.n	8015bcc <rcl_init+0x118>
 8015bb4:	6831      	ldr	r1, [r6, #0]
 8015bb6:	f008 f91e 	bl	801ddf6 <memcpy>
 8015bba:	3401      	adds	r4, #1
 8015bbc:	f149 0900 	adc.w	r9, r9, #0
 8015bc0:	45ca      	cmp	sl, r9
 8015bc2:	bf08      	it	eq
 8015bc4:	42a5      	cmpeq	r5, r4
 8015bc6:	d02b      	beq.n	8015c20 <rcl_init+0x16c>
 8015bc8:	f8d7 b000 	ldr.w	fp, [r7]
 8015bcc:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8015bd0:	f7ea fb96 	bl	8000300 <strlen>
 8015bd4:	1c42      	adds	r2, r0, #1
 8015bd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015bd8:	4610      	mov	r0, r2
 8015bda:	9925      	ldr	r1, [sp, #148]	; 0x94
 8015bdc:	f8db b020 	ldr.w	fp, [fp, #32]
 8015be0:	9201      	str	r2, [sp, #4]
 8015be2:	4798      	blx	r3
 8015be4:	683b      	ldr	r3, [r7, #0]
 8015be6:	f84b 0024 	str.w	r0, [fp, r4, lsl #2]
 8015bea:	6a1b      	ldr	r3, [r3, #32]
 8015bec:	9a01      	ldr	r2, [sp, #4]
 8015bee:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015bf2:	2800      	cmp	r0, #0
 8015bf4:	d1de      	bne.n	8015bb4 <rcl_init+0x100>
 8015bf6:	240a      	movs	r4, #10
 8015bf8:	4638      	mov	r0, r7
 8015bfa:	f7ff fefb 	bl	80159f4 <__cleanup_context>
 8015bfe:	4620      	mov	r0, r4
 8015c00:	b027      	add	sp, #156	; 0x9c
 8015c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c06:	2900      	cmp	r1, #0
 8015c08:	f43f af6d 	beq.w	8015ae6 <rcl_init+0x32>
 8015c0c:	240b      	movs	r4, #11
 8015c0e:	4620      	mov	r0, r4
 8015c10:	b027      	add	sp, #156	; 0x9c
 8015c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c16:	2464      	movs	r4, #100	; 0x64
 8015c18:	4620      	mov	r0, r4
 8015c1a:	b027      	add	sp, #156	; 0x9c
 8015c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c20:	f8d7 9000 	ldr.w	r9, [r7]
 8015c24:	493f      	ldr	r1, [pc, #252]	; (8015d24 <rcl_init+0x270>)
 8015c26:	680b      	ldr	r3, [r1, #0]
 8015c28:	3301      	adds	r3, #1
 8015c2a:	d04c      	beq.n	8015cc6 <rcl_init+0x212>
 8015c2c:	461a      	mov	r2, r3
 8015c2e:	2000      	movs	r0, #0
 8015c30:	600b      	str	r3, [r1, #0]
 8015c32:	f8d9 5014 	ldr.w	r5, [r9, #20]
 8015c36:	607b      	str	r3, [r7, #4]
 8015c38:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8015c3a:	3301      	adds	r3, #1
 8015c3c:	e9c5 2006 	strd	r2, r0, [r5, #24]
 8015c40:	d05d      	beq.n	8015cfe <rcl_init+0x24a>
 8015c42:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8015c46:	2b00      	cmp	r3, #0
 8015c48:	d044      	beq.n	8015cd4 <rcl_init+0x220>
 8015c4a:	2b01      	cmp	r3, #1
 8015c4c:	d04e      	beq.n	8015cec <rcl_init+0x238>
 8015c4e:	f8d8 3000 	ldr.w	r3, [r8]
 8015c52:	f105 0634 	add.w	r6, r5, #52	; 0x34
 8015c56:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8015c5a:	2b00      	cmp	r3, #0
 8015c5c:	d05a      	beq.n	8015d14 <rcl_init+0x260>
 8015c5e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8015c60:	b953      	cbnz	r3, 8015c78 <rcl_init+0x1c4>
 8015c62:	f895 0034 	ldrb.w	r0, [r5, #52]	; 0x34
 8015c66:	2801      	cmp	r0, #1
 8015c68:	d008      	beq.n	8015c7c <rcl_init+0x1c8>
 8015c6a:	a921      	add	r1, sp, #132	; 0x84
 8015c6c:	4630      	mov	r0, r6
 8015c6e:	f006 fceb 	bl	801c648 <rcl_get_discovery_static_peers>
 8015c72:	4604      	mov	r4, r0
 8015c74:	2800      	cmp	r0, #0
 8015c76:	d1bf      	bne.n	8015bf8 <rcl_init+0x144>
 8015c78:	f895 0034 	ldrb.w	r0, [r5, #52]	; 0x34
 8015c7c:	f006 fcda 	bl	801c634 <rcl_automatic_discovery_range_to_string>
 8015c80:	683b      	ldr	r3, [r7, #0]
 8015c82:	aa20      	add	r2, sp, #128	; 0x80
 8015c84:	a91f      	add	r1, sp, #124	; 0x7c
 8015c86:	695b      	ldr	r3, [r3, #20]
 8015c88:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8015c8a:	f001 fc79 	bl	8017580 <rcl_validate_enclave_name>
 8015c8e:	4604      	mov	r4, r0
 8015c90:	2800      	cmp	r0, #0
 8015c92:	d1b1      	bne.n	8015bf8 <rcl_init+0x144>
 8015c94:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8015c96:	bb83      	cbnz	r3, 8015cfa <rcl_init+0x246>
 8015c98:	6839      	ldr	r1, [r7, #0]
 8015c9a:	694b      	ldr	r3, [r1, #20]
 8015c9c:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8015ca0:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8015ca2:	f000 fc97 	bl	80165d4 <rcl_get_security_options_from_environment>
 8015ca6:	4604      	mov	r4, r0
 8015ca8:	2800      	cmp	r0, #0
 8015caa:	d1a5      	bne.n	8015bf8 <rcl_init+0x144>
 8015cac:	6839      	ldr	r1, [r7, #0]
 8015cae:	6948      	ldr	r0, [r1, #20]
 8015cb0:	3128      	adds	r1, #40	; 0x28
 8015cb2:	3018      	adds	r0, #24
 8015cb4:	f003 feb2 	bl	8019a1c <rmw_init>
 8015cb8:	4604      	mov	r4, r0
 8015cba:	2800      	cmp	r0, #0
 8015cbc:	d0a7      	beq.n	8015c0e <rcl_init+0x15a>
 8015cbe:	f7ff fe75 	bl	80159ac <rcl_convert_rmw_ret_to_rcl_ret>
 8015cc2:	4604      	mov	r4, r0
 8015cc4:	e798      	b.n	8015bf8 <rcl_init+0x144>
 8015cc6:	2201      	movs	r2, #1
 8015cc8:	4618      	mov	r0, r3
 8015cca:	600a      	str	r2, [r1, #0]
 8015ccc:	4613      	mov	r3, r2
 8015cce:	e7b0      	b.n	8015c32 <rcl_init+0x17e>
 8015cd0:	240a      	movs	r4, #10
 8015cd2:	e79c      	b.n	8015c0e <rcl_init+0x15a>
 8015cd4:	f105 0030 	add.w	r0, r5, #48	; 0x30
 8015cd8:	f000 f90c 	bl	8015ef4 <rcl_get_localhost_only>
 8015cdc:	4604      	mov	r4, r0
 8015cde:	2800      	cmp	r0, #0
 8015ce0:	d18a      	bne.n	8015bf8 <rcl_init+0x144>
 8015ce2:	683a      	ldr	r2, [r7, #0]
 8015ce4:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8015ce8:	6955      	ldr	r5, [r2, #20]
 8015cea:	e7ae      	b.n	8015c4a <rcl_init+0x196>
 8015cec:	2302      	movs	r3, #2
 8015cee:	2200      	movs	r2, #0
 8015cf0:	4618      	mov	r0, r3
 8015cf2:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
 8015cf6:	63ea      	str	r2, [r5, #60]	; 0x3c
 8015cf8:	e7c0      	b.n	8015c7c <rcl_init+0x1c8>
 8015cfa:	2401      	movs	r4, #1
 8015cfc:	e77c      	b.n	8015bf8 <rcl_init+0x144>
 8015cfe:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8015d02:	f006 fd07 	bl	801c714 <rcl_get_default_domain_id>
 8015d06:	4604      	mov	r4, r0
 8015d08:	2800      	cmp	r0, #0
 8015d0a:	f47f af75 	bne.w	8015bf8 <rcl_init+0x144>
 8015d0e:	683b      	ldr	r3, [r7, #0]
 8015d10:	695d      	ldr	r5, [r3, #20]
 8015d12:	e796      	b.n	8015c42 <rcl_init+0x18e>
 8015d14:	4630      	mov	r0, r6
 8015d16:	f006 fc4b 	bl	801c5b0 <rcl_get_automatic_discovery_range>
 8015d1a:	4604      	mov	r4, r0
 8015d1c:	2800      	cmp	r0, #0
 8015d1e:	d09e      	beq.n	8015c5e <rcl_init+0x1aa>
 8015d20:	e76a      	b.n	8015bf8 <rcl_init+0x144>
 8015d22:	bf00      	nop
 8015d24:	20010ac4 	.word	0x20010ac4

08015d28 <rcl_get_zero_initialized_init_options>:
 8015d28:	2000      	movs	r0, #0
 8015d2a:	4770      	bx	lr

08015d2c <rcl_init_options_init>:
 8015d2c:	b084      	sub	sp, #16
 8015d2e:	b570      	push	{r4, r5, r6, lr}
 8015d30:	b09e      	sub	sp, #120	; 0x78
 8015d32:	ad23      	add	r5, sp, #140	; 0x8c
 8015d34:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8015d38:	2800      	cmp	r0, #0
 8015d3a:	d046      	beq.n	8015dca <rcl_init_options_init+0x9e>
 8015d3c:	6803      	ldr	r3, [r0, #0]
 8015d3e:	4604      	mov	r4, r0
 8015d40:	b133      	cbz	r3, 8015d50 <rcl_init_options_init+0x24>
 8015d42:	2564      	movs	r5, #100	; 0x64
 8015d44:	4628      	mov	r0, r5
 8015d46:	b01e      	add	sp, #120	; 0x78
 8015d48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015d4c:	b004      	add	sp, #16
 8015d4e:	4770      	bx	lr
 8015d50:	4628      	mov	r0, r5
 8015d52:	f7f8 ff6d 	bl	800ec30 <rcutils_allocator_is_valid>
 8015d56:	2800      	cmp	r0, #0
 8015d58:	d037      	beq.n	8015dca <rcl_init_options_init+0x9e>
 8015d5a:	46ae      	mov	lr, r5
 8015d5c:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
 8015d60:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015d64:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015d68:	f8de 3000 	ldr.w	r3, [lr]
 8015d6c:	2070      	movs	r0, #112	; 0x70
 8015d6e:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8015d70:	f8cc 3000 	str.w	r3, [ip]
 8015d74:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8015d76:	4798      	blx	r3
 8015d78:	4606      	mov	r6, r0
 8015d7a:	6020      	str	r0, [r4, #0]
 8015d7c:	b338      	cbz	r0, 8015dce <rcl_init_options_init+0xa2>
 8015d7e:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
 8015d82:	4686      	mov	lr, r0
 8015d84:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015d88:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015d8c:	f8dc 3000 	ldr.w	r3, [ip]
 8015d90:	a802      	add	r0, sp, #8
 8015d92:	f8ce 3000 	str.w	r3, [lr]
 8015d96:	f003 facf 	bl	8019338 <rmw_get_zero_initialized_init_options>
 8015d9a:	2258      	movs	r2, #88	; 0x58
 8015d9c:	a902      	add	r1, sp, #8
 8015d9e:	f106 0018 	add.w	r0, r6, #24
 8015da2:	f008 f828 	bl	801ddf6 <memcpy>
 8015da6:	ab26      	add	r3, sp, #152	; 0x98
 8015da8:	6826      	ldr	r6, [r4, #0]
 8015daa:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015dae:	e88d 0003 	stmia.w	sp, {r0, r1}
 8015db2:	f106 0018 	add.w	r0, r6, #24
 8015db6:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8015dba:	f003 fd5f 	bl	801987c <rmw_init_options_init>
 8015dbe:	4605      	mov	r5, r0
 8015dc0:	b938      	cbnz	r0, 8015dd2 <rcl_init_options_init+0xa6>
 8015dc2:	6823      	ldr	r3, [r4, #0]
 8015dc4:	f883 0034 	strb.w	r0, [r3, #52]	; 0x34
 8015dc8:	e7bc      	b.n	8015d44 <rcl_init_options_init+0x18>
 8015dca:	250b      	movs	r5, #11
 8015dcc:	e7ba      	b.n	8015d44 <rcl_init_options_init+0x18>
 8015dce:	250a      	movs	r5, #10
 8015dd0:	e7b8      	b.n	8015d44 <rcl_init_options_init+0x18>
 8015dd2:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8015dd4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8015dd6:	6820      	ldr	r0, [r4, #0]
 8015dd8:	4798      	blx	r3
 8015dda:	4628      	mov	r0, r5
 8015ddc:	f7ff fde6 	bl	80159ac <rcl_convert_rmw_ret_to_rcl_ret>
 8015de0:	4605      	mov	r5, r0
 8015de2:	e7af      	b.n	8015d44 <rcl_init_options_init+0x18>

08015de4 <rcl_init_options_fini>:
 8015de4:	b530      	push	{r4, r5, lr}
 8015de6:	b087      	sub	sp, #28
 8015de8:	b1f0      	cbz	r0, 8015e28 <rcl_init_options_fini+0x44>
 8015dea:	6803      	ldr	r3, [r0, #0]
 8015dec:	4604      	mov	r4, r0
 8015dee:	b1db      	cbz	r3, 8015e28 <rcl_init_options_fini+0x44>
 8015df0:	469c      	mov	ip, r3
 8015df2:	f10d 0e04 	add.w	lr, sp, #4
 8015df6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015dfa:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015dfe:	f8dc 3000 	ldr.w	r3, [ip]
 8015e02:	a801      	add	r0, sp, #4
 8015e04:	f8ce 3000 	str.w	r3, [lr]
 8015e08:	f7f8 ff12 	bl	800ec30 <rcutils_allocator_is_valid>
 8015e0c:	b160      	cbz	r0, 8015e28 <rcl_init_options_fini+0x44>
 8015e0e:	6820      	ldr	r0, [r4, #0]
 8015e10:	3018      	adds	r0, #24
 8015e12:	f003 fdcd 	bl	80199b0 <rmw_init_options_fini>
 8015e16:	4605      	mov	r5, r0
 8015e18:	b950      	cbnz	r0, 8015e30 <rcl_init_options_fini+0x4c>
 8015e1a:	6820      	ldr	r0, [r4, #0]
 8015e1c:	9b02      	ldr	r3, [sp, #8]
 8015e1e:	9905      	ldr	r1, [sp, #20]
 8015e20:	4798      	blx	r3
 8015e22:	4628      	mov	r0, r5
 8015e24:	b007      	add	sp, #28
 8015e26:	bd30      	pop	{r4, r5, pc}
 8015e28:	250b      	movs	r5, #11
 8015e2a:	4628      	mov	r0, r5
 8015e2c:	b007      	add	sp, #28
 8015e2e:	bd30      	pop	{r4, r5, pc}
 8015e30:	f7ff fdbc 	bl	80159ac <rcl_convert_rmw_ret_to_rcl_ret>
 8015e34:	4605      	mov	r5, r0
 8015e36:	e7f8      	b.n	8015e2a <rcl_init_options_fini+0x46>

08015e38 <rcl_init_options_copy>:
 8015e38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015e3a:	b09d      	sub	sp, #116	; 0x74
 8015e3c:	2800      	cmp	r0, #0
 8015e3e:	d04d      	beq.n	8015edc <rcl_init_options_copy+0xa4>
 8015e40:	4604      	mov	r4, r0
 8015e42:	6800      	ldr	r0, [r0, #0]
 8015e44:	2800      	cmp	r0, #0
 8015e46:	d049      	beq.n	8015edc <rcl_init_options_copy+0xa4>
 8015e48:	460d      	mov	r5, r1
 8015e4a:	f7f8 fef1 	bl	800ec30 <rcutils_allocator_is_valid>
 8015e4e:	2d00      	cmp	r5, #0
 8015e50:	d044      	beq.n	8015edc <rcl_init_options_copy+0xa4>
 8015e52:	f080 0001 	eor.w	r0, r0, #1
 8015e56:	b2c0      	uxtb	r0, r0
 8015e58:	2800      	cmp	r0, #0
 8015e5a:	d13f      	bne.n	8015edc <rcl_init_options_copy+0xa4>
 8015e5c:	682b      	ldr	r3, [r5, #0]
 8015e5e:	b11b      	cbz	r3, 8015e68 <rcl_init_options_copy+0x30>
 8015e60:	2464      	movs	r4, #100	; 0x64
 8015e62:	4620      	mov	r0, r4
 8015e64:	b01d      	add	sp, #116	; 0x74
 8015e66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015e68:	6826      	ldr	r6, [r4, #0]
 8015e6a:	f10d 0c5c 	add.w	ip, sp, #92	; 0x5c
 8015e6e:	46b6      	mov	lr, r6
 8015e70:	6837      	ldr	r7, [r6, #0]
 8015e72:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015e76:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015e7a:	f8de 3000 	ldr.w	r3, [lr]
 8015e7e:	2070      	movs	r0, #112	; 0x70
 8015e80:	4619      	mov	r1, r3
 8015e82:	f8cc 3000 	str.w	r3, [ip]
 8015e86:	47b8      	blx	r7
 8015e88:	4606      	mov	r6, r0
 8015e8a:	6028      	str	r0, [r5, #0]
 8015e8c:	b350      	cbz	r0, 8015ee4 <rcl_init_options_copy+0xac>
 8015e8e:	f10d 0c5c 	add.w	ip, sp, #92	; 0x5c
 8015e92:	4686      	mov	lr, r0
 8015e94:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015e98:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015e9c:	f8dc 3000 	ldr.w	r3, [ip]
 8015ea0:	4668      	mov	r0, sp
 8015ea2:	f8ce 3000 	str.w	r3, [lr]
 8015ea6:	f003 fa47 	bl	8019338 <rmw_get_zero_initialized_init_options>
 8015eaa:	2258      	movs	r2, #88	; 0x58
 8015eac:	4669      	mov	r1, sp
 8015eae:	f106 0018 	add.w	r0, r6, #24
 8015eb2:	f007 ffa0 	bl	801ddf6 <memcpy>
 8015eb6:	6820      	ldr	r0, [r4, #0]
 8015eb8:	6829      	ldr	r1, [r5, #0]
 8015eba:	3018      	adds	r0, #24
 8015ebc:	3118      	adds	r1, #24
 8015ebe:	f003 fd45 	bl	801994c <rmw_init_options_copy>
 8015ec2:	4604      	mov	r4, r0
 8015ec4:	2800      	cmp	r0, #0
 8015ec6:	d0cc      	beq.n	8015e62 <rcl_init_options_copy+0x2a>
 8015ec8:	f7f8 fec0 	bl	800ec4c <rcutils_get_error_string>
 8015ecc:	f7f8 fed4 	bl	800ec78 <rcutils_reset_error>
 8015ed0:	4628      	mov	r0, r5
 8015ed2:	f7ff ff87 	bl	8015de4 <rcl_init_options_fini>
 8015ed6:	b138      	cbz	r0, 8015ee8 <rcl_init_options_copy+0xb0>
 8015ed8:	4604      	mov	r4, r0
 8015eda:	e7c2      	b.n	8015e62 <rcl_init_options_copy+0x2a>
 8015edc:	240b      	movs	r4, #11
 8015ede:	4620      	mov	r0, r4
 8015ee0:	b01d      	add	sp, #116	; 0x74
 8015ee2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015ee4:	240a      	movs	r4, #10
 8015ee6:	e7bc      	b.n	8015e62 <rcl_init_options_copy+0x2a>
 8015ee8:	4620      	mov	r0, r4
 8015eea:	b01d      	add	sp, #116	; 0x74
 8015eec:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8015ef0:	f7ff bd5c 	b.w	80159ac <rcl_convert_rmw_ret_to_rcl_ret>

08015ef4 <rcl_get_localhost_only>:
 8015ef4:	b510      	push	{r4, lr}
 8015ef6:	2300      	movs	r3, #0
 8015ef8:	b082      	sub	sp, #8
 8015efa:	9301      	str	r3, [sp, #4]
 8015efc:	b1c0      	cbz	r0, 8015f30 <rcl_get_localhost_only+0x3c>
 8015efe:	4604      	mov	r4, r0
 8015f00:	a901      	add	r1, sp, #4
 8015f02:	480d      	ldr	r0, [pc, #52]	; (8015f38 <rcl_get_localhost_only+0x44>)
 8015f04:	f002 ff54 	bl	8018db0 <rcutils_get_env>
 8015f08:	b110      	cbz	r0, 8015f10 <rcl_get_localhost_only+0x1c>
 8015f0a:	2001      	movs	r0, #1
 8015f0c:	b002      	add	sp, #8
 8015f0e:	bd10      	pop	{r4, pc}
 8015f10:	9b01      	ldr	r3, [sp, #4]
 8015f12:	b10b      	cbz	r3, 8015f18 <rcl_get_localhost_only+0x24>
 8015f14:	781b      	ldrb	r3, [r3, #0]
 8015f16:	b923      	cbnz	r3, 8015f22 <rcl_get_localhost_only+0x2e>
 8015f18:	2300      	movs	r3, #0
 8015f1a:	4618      	mov	r0, r3
 8015f1c:	7023      	strb	r3, [r4, #0]
 8015f1e:	b002      	add	sp, #8
 8015f20:	bd10      	pop	{r4, pc}
 8015f22:	2b31      	cmp	r3, #49	; 0x31
 8015f24:	bf0c      	ite	eq
 8015f26:	2301      	moveq	r3, #1
 8015f28:	2302      	movne	r3, #2
 8015f2a:	7023      	strb	r3, [r4, #0]
 8015f2c:	b002      	add	sp, #8
 8015f2e:	bd10      	pop	{r4, pc}
 8015f30:	200b      	movs	r0, #11
 8015f32:	b002      	add	sp, #8
 8015f34:	bd10      	pop	{r4, pc}
 8015f36:	bf00      	nop
 8015f38:	08020120 	.word	0x08020120

08015f3c <rcl_get_zero_initialized_node>:
 8015f3c:	4a03      	ldr	r2, [pc, #12]	; (8015f4c <rcl_get_zero_initialized_node+0x10>)
 8015f3e:	4603      	mov	r3, r0
 8015f40:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015f44:	e883 0003 	stmia.w	r3, {r0, r1}
 8015f48:	4618      	mov	r0, r3
 8015f4a:	4770      	bx	lr
 8015f4c:	08020164 	.word	0x08020164

08015f50 <rcl_node_init>:
 8015f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f54:	b0ab      	sub	sp, #172	; 0xac
 8015f56:	4604      	mov	r4, r0
 8015f58:	460e      	mov	r6, r1
 8015f5a:	4615      	mov	r5, r2
 8015f5c:	f8dd 80d0 	ldr.w	r8, [sp, #208]	; 0xd0
 8015f60:	a825      	add	r0, sp, #148	; 0x94
 8015f62:	461f      	mov	r7, r3
 8015f64:	f006 fe4a 	bl	801cbfc <rcl_guard_condition_get_default_options>
 8015f68:	f1b8 0f00 	cmp.w	r8, #0
 8015f6c:	f000 80f3 	beq.w	8016156 <rcl_node_init+0x206>
 8015f70:	4640      	mov	r0, r8
 8015f72:	f7f8 fe5d 	bl	800ec30 <rcutils_allocator_is_valid>
 8015f76:	2d00      	cmp	r5, #0
 8015f78:	bf18      	it	ne
 8015f7a:	2c00      	cmpne	r4, #0
 8015f7c:	f080 0001 	eor.w	r0, r0, #1
 8015f80:	bf0c      	ite	eq
 8015f82:	f04f 0c01 	moveq.w	ip, #1
 8015f86:	f04f 0c00 	movne.w	ip, #0
 8015f8a:	2e00      	cmp	r6, #0
 8015f8c:	bf08      	it	eq
 8015f8e:	f04c 0c01 	orreq.w	ip, ip, #1
 8015f92:	ea4c 0c00 	orr.w	ip, ip, r0
 8015f96:	f01c 09ff 	ands.w	r9, ip, #255	; 0xff
 8015f9a:	f040 80dc 	bne.w	8016156 <rcl_node_init+0x206>
 8015f9e:	f8d4 a004 	ldr.w	sl, [r4, #4]
 8015fa2:	f1ba 0f00 	cmp.w	sl, #0
 8015fa6:	f040 80fc 	bne.w	80161a2 <rcl_node_init+0x252>
 8015faa:	2f00      	cmp	r7, #0
 8015fac:	f000 80d3 	beq.w	8016156 <rcl_node_init+0x206>
 8015fb0:	4638      	mov	r0, r7
 8015fb2:	f7ff fd19 	bl	80159e8 <rcl_context_is_valid>
 8015fb6:	4683      	mov	fp, r0
 8015fb8:	2800      	cmp	r0, #0
 8015fba:	f000 80d2 	beq.w	8016162 <rcl_node_init+0x212>
 8015fbe:	4652      	mov	r2, sl
 8015fc0:	4630      	mov	r0, r6
 8015fc2:	a924      	add	r1, sp, #144	; 0x90
 8015fc4:	f8cd a090 	str.w	sl, [sp, #144]	; 0x90
 8015fc8:	f003 fb6c 	bl	80196a4 <rmw_validate_node_name>
 8015fcc:	4682      	mov	sl, r0
 8015fce:	2800      	cmp	r0, #0
 8015fd0:	f040 80c3 	bne.w	801615a <rcl_node_init+0x20a>
 8015fd4:	9824      	ldr	r0, [sp, #144]	; 0x90
 8015fd6:	2800      	cmp	r0, #0
 8015fd8:	f040 80f1 	bne.w	80161be <rcl_node_init+0x26e>
 8015fdc:	4628      	mov	r0, r5
 8015fde:	f7ea f98f 	bl	8000300 <strlen>
 8015fe2:	2800      	cmp	r0, #0
 8015fe4:	f040 80c0 	bne.w	8016168 <rcl_node_init+0x218>
 8015fe8:	4d79      	ldr	r5, [pc, #484]	; (80161d0 <rcl_node_init+0x280>)
 8015fea:	a924      	add	r1, sp, #144	; 0x90
 8015fec:	2200      	movs	r2, #0
 8015fee:	4628      	mov	r0, r5
 8015ff0:	f003 fb3a 	bl	8019668 <rmw_validate_namespace>
 8015ff4:	4682      	mov	sl, r0
 8015ff6:	2800      	cmp	r0, #0
 8015ff8:	f040 80af 	bne.w	801615a <rcl_node_init+0x20a>
 8015ffc:	9824      	ldr	r0, [sp, #144]	; 0x90
 8015ffe:	2800      	cmp	r0, #0
 8016000:	f040 80d5 	bne.w	80161ae <rcl_node_init+0x25e>
 8016004:	f8d8 3000 	ldr.w	r3, [r8]
 8016008:	2080      	movs	r0, #128	; 0x80
 801600a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801600e:	4798      	blx	r3
 8016010:	4682      	mov	sl, r0
 8016012:	6060      	str	r0, [r4, #4]
 8016014:	2800      	cmp	r0, #0
 8016016:	f000 80cf 	beq.w	80161b8 <rcl_node_init+0x268>
 801601a:	2200      	movs	r2, #0
 801601c:	2300      	movs	r3, #0
 801601e:	a808      	add	r0, sp, #32
 8016020:	e9ca 231c 	strd	r2, r3, [sl, #112]	; 0x70
 8016024:	e9ca 231e 	strd	r2, r3, [sl, #120]	; 0x78
 8016028:	f000 f922 	bl	8016270 <rcl_node_get_default_options>
 801602c:	a908      	add	r1, sp, #32
 801602e:	4650      	mov	r0, sl
 8016030:	2270      	movs	r2, #112	; 0x70
 8016032:	f007 fee0 	bl	801ddf6 <memcpy>
 8016036:	6861      	ldr	r1, [r4, #4]
 8016038:	4640      	mov	r0, r8
 801603a:	6027      	str	r7, [r4, #0]
 801603c:	f000 f926 	bl	801628c <rcl_node_options_copy>
 8016040:	2800      	cmp	r0, #0
 8016042:	d158      	bne.n	80160f6 <rcl_node_init+0x1a6>
 8016044:	4628      	mov	r0, r5
 8016046:	f7ea f95b 	bl	8000300 <strlen>
 801604a:	4428      	add	r0, r5
 801604c:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8016050:	e9cd 5603 	strd	r5, r6, [sp, #12]
 8016054:	2b2f      	cmp	r3, #47	; 0x2f
 8016056:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801605a:	9300      	str	r3, [sp, #0]
 801605c:	bf0c      	ite	eq
 801605e:	4b5d      	ldreq	r3, [pc, #372]	; (80161d4 <rcl_node_init+0x284>)
 8016060:	4b5d      	ldrne	r3, [pc, #372]	; (80161d8 <rcl_node_init+0x288>)
 8016062:	9302      	str	r3, [sp, #8]
 8016064:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016068:	9301      	str	r3, [sp, #4]
 801606a:	f8d4 a004 	ldr.w	sl, [r4, #4]
 801606e:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8016072:	f002 fec5 	bl	8018e00 <rcutils_format_string_limit>
 8016076:	6823      	ldr	r3, [r4, #0]
 8016078:	f8ca 007c 	str.w	r0, [sl, #124]	; 0x7c
 801607c:	4631      	mov	r1, r6
 801607e:	6818      	ldr	r0, [r3, #0]
 8016080:	462a      	mov	r2, r5
 8016082:	6866      	ldr	r6, [r4, #4]
 8016084:	3028      	adds	r0, #40	; 0x28
 8016086:	f003 ff23 	bl	8019ed0 <rmw_create_node>
 801608a:	6863      	ldr	r3, [r4, #4]
 801608c:	6730      	str	r0, [r6, #112]	; 0x70
 801608e:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8016090:	2800      	cmp	r0, #0
 8016092:	d032      	beq.n	80160fa <rcl_node_init+0x1aa>
 8016094:	f003 ffac 	bl	8019ff0 <rmw_node_get_graph_guard_condition>
 8016098:	4682      	mov	sl, r0
 801609a:	b360      	cbz	r0, 80160f6 <rcl_node_init+0x1a6>
 801609c:	f8d8 3000 	ldr.w	r3, [r8]
 80160a0:	2008      	movs	r0, #8
 80160a2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80160a6:	6866      	ldr	r6, [r4, #4]
 80160a8:	4798      	blx	r3
 80160aa:	6863      	ldr	r3, [r4, #4]
 80160ac:	6770      	str	r0, [r6, #116]	; 0x74
 80160ae:	f8d3 b074 	ldr.w	fp, [r3, #116]	; 0x74
 80160b2:	f1bb 0f00 	cmp.w	fp, #0
 80160b6:	d020      	beq.n	80160fa <rcl_node_init+0x1aa>
 80160b8:	a806      	add	r0, sp, #24
 80160ba:	ae25      	add	r6, sp, #148	; 0x94
 80160bc:	f006 fcc4 	bl	801ca48 <rcl_get_zero_initialized_guard_condition>
 80160c0:	a806      	add	r0, sp, #24
 80160c2:	6863      	ldr	r3, [r4, #4]
 80160c4:	46c4      	mov	ip, r8
 80160c6:	c803      	ldmia	r0, {r0, r1}
 80160c8:	f8d3 e074 	ldr.w	lr, [r3, #116]	; 0x74
 80160cc:	e88b 0003 	stmia.w	fp, {r0, r1}
 80160d0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80160d4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80160d6:	f8dc 3000 	ldr.w	r3, [ip]
 80160da:	6033      	str	r3, [r6, #0]
 80160dc:	ab2a      	add	r3, sp, #168	; 0xa8
 80160de:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 80160e2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80160e6:	4651      	mov	r1, sl
 80160e8:	463a      	mov	r2, r7
 80160ea:	4670      	mov	r0, lr
 80160ec:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80160ee:	f006 fd03 	bl	801caf8 <rcl_guard_condition_init_from_rmw>
 80160f2:	4682      	mov	sl, r0
 80160f4:	b328      	cbz	r0, 8016142 <rcl_node_init+0x1f2>
 80160f6:	6863      	ldr	r3, [r4, #4]
 80160f8:	b1f3      	cbz	r3, 8016138 <rcl_node_init+0x1e8>
 80160fa:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80160fc:	b128      	cbz	r0, 801610a <rcl_node_init+0x1ba>
 80160fe:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016102:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8016106:	4798      	blx	r3
 8016108:	6863      	ldr	r3, [r4, #4]
 801610a:	6f18      	ldr	r0, [r3, #112]	; 0x70
 801610c:	b110      	cbz	r0, 8016114 <rcl_node_init+0x1c4>
 801610e:	f003 fef1 	bl	8019ef4 <rmw_destroy_node>
 8016112:	6863      	ldr	r3, [r4, #4]
 8016114:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8016116:	b148      	cbz	r0, 801612c <rcl_node_init+0x1dc>
 8016118:	f006 fd4a 	bl	801cbb0 <rcl_guard_condition_fini>
 801611c:	6863      	ldr	r3, [r4, #4]
 801611e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8016122:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8016124:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016128:	4798      	blx	r3
 801612a:	6863      	ldr	r3, [r4, #4]
 801612c:	4618      	mov	r0, r3
 801612e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8016132:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016136:	4798      	blx	r3
 8016138:	2300      	movs	r3, #0
 801613a:	f04f 0a01 	mov.w	sl, #1
 801613e:	e9c4 3300 	strd	r3, r3, [r4]
 8016142:	f1b9 0f00 	cmp.w	r9, #0
 8016146:	d008      	beq.n	801615a <rcl_node_init+0x20a>
 8016148:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801614c:	4628      	mov	r0, r5
 801614e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8016152:	4798      	blx	r3
 8016154:	e001      	b.n	801615a <rcl_node_init+0x20a>
 8016156:	f04f 0a0b 	mov.w	sl, #11
 801615a:	4650      	mov	r0, sl
 801615c:	b02b      	add	sp, #172	; 0xac
 801615e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016162:	f04f 0a65 	mov.w	sl, #101	; 0x65
 8016166:	e7f8      	b.n	801615a <rcl_node_init+0x20a>
 8016168:	782b      	ldrb	r3, [r5, #0]
 801616a:	2b2f      	cmp	r3, #47	; 0x2f
 801616c:	f43f af3d 	beq.w	8015fea <rcl_node_init+0x9a>
 8016170:	9503      	str	r5, [sp, #12]
 8016172:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8016176:	9300      	str	r3, [sp, #0]
 8016178:	4b18      	ldr	r3, [pc, #96]	; (80161dc <rcl_node_init+0x28c>)
 801617a:	9302      	str	r3, [sp, #8]
 801617c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016180:	9301      	str	r3, [sp, #4]
 8016182:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8016186:	f002 fe3b 	bl	8018e00 <rcutils_format_string_limit>
 801618a:	4605      	mov	r5, r0
 801618c:	b1e0      	cbz	r0, 80161c8 <rcl_node_init+0x278>
 801618e:	2200      	movs	r2, #0
 8016190:	a924      	add	r1, sp, #144	; 0x90
 8016192:	9224      	str	r2, [sp, #144]	; 0x90
 8016194:	f003 fa68 	bl	8019668 <rmw_validate_namespace>
 8016198:	4682      	mov	sl, r0
 801619a:	2800      	cmp	r0, #0
 801619c:	d1d4      	bne.n	8016148 <rcl_node_init+0x1f8>
 801619e:	46d9      	mov	r9, fp
 80161a0:	e72c      	b.n	8015ffc <rcl_node_init+0xac>
 80161a2:	f04f 0a64 	mov.w	sl, #100	; 0x64
 80161a6:	4650      	mov	r0, sl
 80161a8:	b02b      	add	sp, #172	; 0xac
 80161aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80161ae:	f04f 0aca 	mov.w	sl, #202	; 0xca
 80161b2:	f003 fa6b 	bl	801968c <rmw_namespace_validation_result_string>
 80161b6:	e7c4      	b.n	8016142 <rcl_node_init+0x1f2>
 80161b8:	f04f 0a0a 	mov.w	sl, #10
 80161bc:	e7c1      	b.n	8016142 <rcl_node_init+0x1f2>
 80161be:	f04f 0ac9 	mov.w	sl, #201	; 0xc9
 80161c2:	f003 fac3 	bl	801974c <rmw_node_name_validation_result_string>
 80161c6:	e7c8      	b.n	801615a <rcl_node_init+0x20a>
 80161c8:	f04f 0a0a 	mov.w	sl, #10
 80161cc:	e7c5      	b.n	801615a <rcl_node_init+0x20a>
 80161ce:	bf00      	nop
 80161d0:	08020138 	.word	0x08020138
 80161d4:	0801fc08 	.word	0x0801fc08
 80161d8:	08020140 	.word	0x08020140
 80161dc:	0802013c 	.word	0x0802013c

080161e0 <rcl_node_is_valid>:
 80161e0:	b130      	cbz	r0, 80161f0 <rcl_node_is_valid+0x10>
 80161e2:	6843      	ldr	r3, [r0, #4]
 80161e4:	b123      	cbz	r3, 80161f0 <rcl_node_is_valid+0x10>
 80161e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80161e8:	b113      	cbz	r3, 80161f0 <rcl_node_is_valid+0x10>
 80161ea:	6800      	ldr	r0, [r0, #0]
 80161ec:	f7ff bbfc 	b.w	80159e8 <rcl_context_is_valid>
 80161f0:	2000      	movs	r0, #0
 80161f2:	4770      	bx	lr

080161f4 <rcl_node_get_name>:
 80161f4:	b120      	cbz	r0, 8016200 <rcl_node_get_name+0xc>
 80161f6:	6840      	ldr	r0, [r0, #4]
 80161f8:	b110      	cbz	r0, 8016200 <rcl_node_get_name+0xc>
 80161fa:	6f00      	ldr	r0, [r0, #112]	; 0x70
 80161fc:	b100      	cbz	r0, 8016200 <rcl_node_get_name+0xc>
 80161fe:	6880      	ldr	r0, [r0, #8]
 8016200:	4770      	bx	lr
 8016202:	bf00      	nop

08016204 <rcl_node_get_namespace>:
 8016204:	b120      	cbz	r0, 8016210 <rcl_node_get_namespace+0xc>
 8016206:	6840      	ldr	r0, [r0, #4]
 8016208:	b110      	cbz	r0, 8016210 <rcl_node_get_namespace+0xc>
 801620a:	6f00      	ldr	r0, [r0, #112]	; 0x70
 801620c:	b100      	cbz	r0, 8016210 <rcl_node_get_namespace+0xc>
 801620e:	68c0      	ldr	r0, [r0, #12]
 8016210:	4770      	bx	lr
 8016212:	bf00      	nop

08016214 <rcl_node_get_options>:
 8016214:	b128      	cbz	r0, 8016222 <rcl_node_get_options+0xe>
 8016216:	6840      	ldr	r0, [r0, #4]
 8016218:	b118      	cbz	r0, 8016222 <rcl_node_get_options+0xe>
 801621a:	6f03      	ldr	r3, [r0, #112]	; 0x70
 801621c:	2b00      	cmp	r3, #0
 801621e:	bf08      	it	eq
 8016220:	2000      	moveq	r0, #0
 8016222:	4770      	bx	lr

08016224 <rcl_node_get_rmw_handle>:
 8016224:	b110      	cbz	r0, 801622c <rcl_node_get_rmw_handle+0x8>
 8016226:	6840      	ldr	r0, [r0, #4]
 8016228:	b100      	cbz	r0, 801622c <rcl_node_get_rmw_handle+0x8>
 801622a:	6f00      	ldr	r0, [r0, #112]	; 0x70
 801622c:	4770      	bx	lr
 801622e:	bf00      	nop

08016230 <rcl_get_disable_loaned_message>:
 8016230:	b510      	push	{r4, lr}
 8016232:	2300      	movs	r3, #0
 8016234:	b082      	sub	sp, #8
 8016236:	9301      	str	r3, [sp, #4]
 8016238:	b1a0      	cbz	r0, 8016264 <rcl_get_disable_loaned_message+0x34>
 801623a:	4604      	mov	r4, r0
 801623c:	a901      	add	r1, sp, #4
 801623e:	480b      	ldr	r0, [pc, #44]	; (801626c <rcl_get_disable_loaned_message+0x3c>)
 8016240:	f002 fdb6 	bl	8018db0 <rcutils_get_env>
 8016244:	b110      	cbz	r0, 801624c <rcl_get_disable_loaned_message+0x1c>
 8016246:	2001      	movs	r0, #1
 8016248:	b002      	add	sp, #8
 801624a:	bd10      	pop	{r4, pc}
 801624c:	9a01      	ldr	r2, [sp, #4]
 801624e:	2000      	movs	r0, #0
 8016250:	7813      	ldrb	r3, [r2, #0]
 8016252:	3b31      	subs	r3, #49	; 0x31
 8016254:	bf08      	it	eq
 8016256:	7853      	ldrbeq	r3, [r2, #1]
 8016258:	fab3 f383 	clz	r3, r3
 801625c:	095b      	lsrs	r3, r3, #5
 801625e:	7023      	strb	r3, [r4, #0]
 8016260:	b002      	add	sp, #8
 8016262:	bd10      	pop	{r4, pc}
 8016264:	200b      	movs	r0, #11
 8016266:	b002      	add	sp, #8
 8016268:	bd10      	pop	{r4, pc}
 801626a:	bf00      	nop
 801626c:	08020148 	.word	0x08020148

08016270 <rcl_node_get_default_options>:
 8016270:	b510      	push	{r4, lr}
 8016272:	4604      	mov	r4, r0
 8016274:	2270      	movs	r2, #112	; 0x70
 8016276:	2100      	movs	r1, #0
 8016278:	f007 fc8c 	bl	801db94 <memset>
 801627c:	4620      	mov	r0, r4
 801627e:	f7f8 fcc9 	bl	800ec14 <rcutils_get_default_allocator>
 8016282:	2301      	movs	r3, #1
 8016284:	4620      	mov	r0, r4
 8016286:	7523      	strb	r3, [r4, #20]
 8016288:	bd10      	pop	{r4, pc}
 801628a:	bf00      	nop

0801628c <rcl_node_options_copy>:
 801628c:	2800      	cmp	r0, #0
 801628e:	bf18      	it	ne
 8016290:	4288      	cmpne	r0, r1
 8016292:	d01b      	beq.n	80162cc <rcl_node_options_copy+0x40>
 8016294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016296:	fab1 f681 	clz	r6, r1
 801629a:	460c      	mov	r4, r1
 801629c:	0976      	lsrs	r6, r6, #5
 801629e:	b199      	cbz	r1, 80162c8 <rcl_node_options_copy+0x3c>
 80162a0:	4605      	mov	r5, r0
 80162a2:	8a87      	ldrh	r7, [r0, #20]
 80162a4:	4684      	mov	ip, r0
 80162a6:	468e      	mov	lr, r1
 80162a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80162aa:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80162ae:	682b      	ldr	r3, [r5, #0]
 80162b0:	2250      	movs	r2, #80	; 0x50
 80162b2:	f10c 0118 	add.w	r1, ip, #24
 80162b6:	f104 0018 	add.w	r0, r4, #24
 80162ba:	f8ce 3000 	str.w	r3, [lr]
 80162be:	82a7      	strh	r7, [r4, #20]
 80162c0:	f007 fd99 	bl	801ddf6 <memcpy>
 80162c4:	4630      	mov	r0, r6
 80162c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80162c8:	200b      	movs	r0, #11
 80162ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80162cc:	200b      	movs	r0, #11
 80162ce:	4770      	bx	lr

080162d0 <rcl_node_resolve_name>:
 80162d0:	b082      	sub	sp, #8
 80162d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162d6:	b091      	sub	sp, #68	; 0x44
 80162d8:	ac1a      	add	r4, sp, #104	; 0x68
 80162da:	f89d 807c 	ldrb.w	r8, [sp, #124]	; 0x7c
 80162de:	e884 000c 	stmia.w	r4, {r2, r3}
 80162e2:	2800      	cmp	r0, #0
 80162e4:	d03d      	beq.n	8016362 <rcl_node_resolve_name+0x92>
 80162e6:	460c      	mov	r4, r1
 80162e8:	4605      	mov	r5, r0
 80162ea:	f7ff ff93 	bl	8016214 <rcl_node_get_options>
 80162ee:	2800      	cmp	r0, #0
 80162f0:	d03a      	beq.n	8016368 <rcl_node_resolve_name+0x98>
 80162f2:	4628      	mov	r0, r5
 80162f4:	f7ff ff7e 	bl	80161f4 <rcl_node_get_name>
 80162f8:	4606      	mov	r6, r0
 80162fa:	4628      	mov	r0, r5
 80162fc:	ad0b      	add	r5, sp, #44	; 0x2c
 80162fe:	f7ff ff81 	bl	8016204 <rcl_node_get_namespace>
 8016302:	f10d 0e68 	add.w	lr, sp, #104	; 0x68
 8016306:	4607      	mov	r7, r0
 8016308:	46ac      	mov	ip, r5
 801630a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801630e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016312:	f8de 3000 	ldr.w	r3, [lr]
 8016316:	f8cc 3000 	str.w	r3, [ip]
 801631a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801631c:	b30b      	cbz	r3, 8016362 <rcl_node_resolve_name+0x92>
 801631e:	4689      	mov	r9, r1
 8016320:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8016324:	f002 feee 	bl	8019104 <rcutils_get_zero_initialized_string_map>
 8016328:	ab10      	add	r3, sp, #64	; 0x40
 801632a:	9008      	str	r0, [sp, #32]
 801632c:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8016330:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016334:	2100      	movs	r1, #0
 8016336:	a808      	add	r0, sp, #32
 8016338:	e895 000c 	ldmia.w	r5, {r2, r3}
 801633c:	f002 ff34 	bl	80191a8 <rcutils_string_map_init>
 8016340:	4683      	mov	fp, r0
 8016342:	b1a0      	cbz	r0, 801636e <rcl_node_resolve_name+0x9e>
 8016344:	f7f8 fc82 	bl	800ec4c <rcutils_get_error_string>
 8016348:	f7f8 fc96 	bl	800ec78 <rcutils_reset_error>
 801634c:	f1bb 0f0a 	cmp.w	fp, #10
 8016350:	bf18      	it	ne
 8016352:	f04f 0b01 	movne.w	fp, #1
 8016356:	4658      	mov	r0, fp
 8016358:	b011      	add	sp, #68	; 0x44
 801635a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801635e:	b002      	add	sp, #8
 8016360:	4770      	bx	lr
 8016362:	f04f 0b0b 	mov.w	fp, #11
 8016366:	e7f6      	b.n	8016356 <rcl_node_resolve_name+0x86>
 8016368:	f04f 0b01 	mov.w	fp, #1
 801636c:	e7f3      	b.n	8016356 <rcl_node_resolve_name+0x86>
 801636e:	9009      	str	r0, [sp, #36]	; 0x24
 8016370:	9007      	str	r0, [sp, #28]
 8016372:	a808      	add	r0, sp, #32
 8016374:	f006 fb62 	bl	801ca3c <rcl_get_default_topic_name_substitutions>
 8016378:	4683      	mov	fp, r0
 801637a:	b180      	cbz	r0, 801639e <rcl_node_resolve_name+0xce>
 801637c:	280a      	cmp	r0, #10
 801637e:	a808      	add	r0, sp, #32
 8016380:	bf18      	it	ne
 8016382:	f04f 0b01 	movne.w	fp, #1
 8016386:	f002 ff4d 	bl	8019224 <rcutils_string_map_fini>
 801638a:	4604      	mov	r4, r0
 801638c:	2800      	cmp	r0, #0
 801638e:	d15b      	bne.n	8016448 <rcl_node_resolve_name+0x178>
 8016390:	4651      	mov	r1, sl
 8016392:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016394:	47c8      	blx	r9
 8016396:	4651      	mov	r1, sl
 8016398:	4620      	mov	r0, r4
 801639a:	47c8      	blx	r9
 801639c:	e7db      	b.n	8016356 <rcl_node_resolve_name+0x86>
 801639e:	ab09      	add	r3, sp, #36	; 0x24
 80163a0:	46ec      	mov	ip, sp
 80163a2:	9305      	str	r3, [sp, #20]
 80163a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80163a6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80163aa:	682b      	ldr	r3, [r5, #0]
 80163ac:	463a      	mov	r2, r7
 80163ae:	4631      	mov	r1, r6
 80163b0:	4620      	mov	r0, r4
 80163b2:	f8cc 3000 	str.w	r3, [ip]
 80163b6:	ab08      	add	r3, sp, #32
 80163b8:	f006 f9e0 	bl	801c77c <rcl_expand_topic_name>
 80163bc:	4683      	mov	fp, r0
 80163be:	b9d8      	cbnz	r0, 80163f8 <rcl_node_resolve_name+0x128>
 80163c0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80163c2:	4602      	mov	r2, r0
 80163c4:	9009      	str	r0, [sp, #36]	; 0x24
 80163c6:	a90a      	add	r1, sp, #40	; 0x28
 80163c8:	4620      	mov	r0, r4
 80163ca:	f003 f87d 	bl	80194c8 <rmw_validate_full_topic_name>
 80163ce:	bb50      	cbnz	r0, 8016426 <rcl_node_resolve_name+0x156>
 80163d0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80163d2:	2d00      	cmp	r5, #0
 80163d4:	d140      	bne.n	8016458 <rcl_node_resolve_name+0x188>
 80163d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80163d8:	a808      	add	r0, sp, #32
 80163da:	601c      	str	r4, [r3, #0]
 80163dc:	f002 ff22 	bl	8019224 <rcutils_string_map_fini>
 80163e0:	4683      	mov	fp, r0
 80163e2:	2800      	cmp	r0, #0
 80163e4:	d043      	beq.n	801646e <rcl_node_resolve_name+0x19e>
 80163e6:	f7f8 fc31 	bl	800ec4c <rcutils_get_error_string>
 80163ea:	46a8      	mov	r8, r5
 80163ec:	f04f 0b01 	mov.w	fp, #1
 80163f0:	462c      	mov	r4, r5
 80163f2:	f7f8 fc41 	bl	800ec78 <rcutils_reset_error>
 80163f6:	e00a      	b.n	801640e <rcl_node_resolve_name+0x13e>
 80163f8:	2867      	cmp	r0, #103	; 0x67
 80163fa:	bf14      	ite	ne
 80163fc:	f04f 0800 	movne.w	r8, #0
 8016400:	f008 0801 	andeq.w	r8, r8, #1
 8016404:	9c07      	ldr	r4, [sp, #28]
 8016406:	a808      	add	r0, sp, #32
 8016408:	f002 ff0c 	bl	8019224 <rcutils_string_map_fini>
 801640c:	bb50      	cbnz	r0, 8016464 <rcl_node_resolve_name+0x194>
 801640e:	4651      	mov	r1, sl
 8016410:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016412:	47c8      	blx	r9
 8016414:	4651      	mov	r1, sl
 8016416:	4620      	mov	r0, r4
 8016418:	47c8      	blx	r9
 801641a:	f1b8 0f00 	cmp.w	r8, #0
 801641e:	bf18      	it	ne
 8016420:	f04f 0b68 	movne.w	fp, #104	; 0x68
 8016424:	e797      	b.n	8016356 <rcl_node_resolve_name+0x86>
 8016426:	f7f8 fc11 	bl	800ec4c <rcutils_get_error_string>
 801642a:	f7f8 fc25 	bl	800ec78 <rcutils_reset_error>
 801642e:	a808      	add	r0, sp, #32
 8016430:	f002 fef8 	bl	8019224 <rcutils_string_map_fini>
 8016434:	b998      	cbnz	r0, 801645e <rcl_node_resolve_name+0x18e>
 8016436:	4651      	mov	r1, sl
 8016438:	9809      	ldr	r0, [sp, #36]	; 0x24
 801643a:	47c8      	blx	r9
 801643c:	4651      	mov	r1, sl
 801643e:	4620      	mov	r0, r4
 8016440:	f04f 0b01 	mov.w	fp, #1
 8016444:	47c8      	blx	r9
 8016446:	e786      	b.n	8016356 <rcl_node_resolve_name+0x86>
 8016448:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801644c:	f7f8 fbfe 	bl	800ec4c <rcutils_get_error_string>
 8016450:	f7f8 fc12 	bl	800ec78 <rcutils_reset_error>
 8016454:	4644      	mov	r4, r8
 8016456:	e7da      	b.n	801640e <rcl_node_resolve_name+0x13e>
 8016458:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801645c:	e7d3      	b.n	8016406 <rcl_node_resolve_name+0x136>
 801645e:	46d8      	mov	r8, fp
 8016460:	f04f 0b01 	mov.w	fp, #1
 8016464:	f7f8 fbf2 	bl	800ec4c <rcutils_get_error_string>
 8016468:	f7f8 fc06 	bl	800ec78 <rcutils_reset_error>
 801646c:	e7cf      	b.n	801640e <rcl_node_resolve_name+0x13e>
 801646e:	4651      	mov	r1, sl
 8016470:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016472:	47c8      	blx	r9
 8016474:	4651      	mov	r1, sl
 8016476:	4658      	mov	r0, fp
 8016478:	47c8      	blx	r9
 801647a:	e76c      	b.n	8016356 <rcl_node_resolve_name+0x86>

0801647c <exact_match_lookup>:
 801647c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801647e:	f102 0708 	add.w	r7, r2, #8
 8016482:	460b      	mov	r3, r1
 8016484:	b085      	sub	sp, #20
 8016486:	4614      	mov	r4, r2
 8016488:	4606      	mov	r6, r0
 801648a:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801648e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016492:	4618      	mov	r0, r3
 8016494:	4919      	ldr	r1, [pc, #100]	; (80164fc <exact_match_lookup+0x80>)
 8016496:	e894 000c 	ldmia.w	r4, {r2, r3}
 801649a:	f002 fca3 	bl	8018de4 <rcutils_join_path>
 801649e:	7833      	ldrb	r3, [r6, #0]
 80164a0:	4605      	mov	r5, r0
 80164a2:	2b2f      	cmp	r3, #47	; 0x2f
 80164a4:	d023      	beq.n	80164ee <exact_match_lookup+0x72>
 80164a6:	f104 030c 	add.w	r3, r4, #12
 80164aa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80164ae:	e88d 0003 	stmia.w	sp, {r0, r1}
 80164b2:	1c70      	adds	r0, r6, #1
 80164b4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80164b8:	f002 fc9a 	bl	8018df0 <rcutils_to_native_path>
 80164bc:	4606      	mov	r6, r0
 80164be:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80164c2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80164c6:	4631      	mov	r1, r6
 80164c8:	4628      	mov	r0, r5
 80164ca:	e894 000c 	ldmia.w	r4, {r2, r3}
 80164ce:	f002 fc89 	bl	8018de4 <rcutils_join_path>
 80164d2:	4603      	mov	r3, r0
 80164d4:	4630      	mov	r0, r6
 80164d6:	6862      	ldr	r2, [r4, #4]
 80164d8:	461e      	mov	r6, r3
 80164da:	6921      	ldr	r1, [r4, #16]
 80164dc:	4790      	blx	r2
 80164de:	4628      	mov	r0, r5
 80164e0:	4635      	mov	r5, r6
 80164e2:	6863      	ldr	r3, [r4, #4]
 80164e4:	6921      	ldr	r1, [r4, #16]
 80164e6:	4798      	blx	r3
 80164e8:	4628      	mov	r0, r5
 80164ea:	b005      	add	sp, #20
 80164ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80164ee:	7873      	ldrb	r3, [r6, #1]
 80164f0:	2b00      	cmp	r3, #0
 80164f2:	d1d8      	bne.n	80164a6 <exact_match_lookup+0x2a>
 80164f4:	4628      	mov	r0, r5
 80164f6:	b005      	add	sp, #20
 80164f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80164fa:	bf00      	nop
 80164fc:	080201a8 	.word	0x080201a8

08016500 <rcl_get_secure_root>:
 8016500:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016504:	b085      	sub	sp, #20
 8016506:	b168      	cbz	r0, 8016524 <rcl_get_secure_root+0x24>
 8016508:	4607      	mov	r7, r0
 801650a:	4608      	mov	r0, r1
 801650c:	460c      	mov	r4, r1
 801650e:	f7f8 fb8f 	bl	800ec30 <rcutils_allocator_is_valid>
 8016512:	b138      	cbz	r0, 8016524 <rcl_get_secure_root+0x24>
 8016514:	2300      	movs	r3, #0
 8016516:	482d      	ldr	r0, [pc, #180]	; (80165cc <rcl_get_secure_root+0xcc>)
 8016518:	a903      	add	r1, sp, #12
 801651a:	9303      	str	r3, [sp, #12]
 801651c:	f002 fc48 	bl	8018db0 <rcutils_get_env>
 8016520:	4605      	mov	r5, r0
 8016522:	b120      	cbz	r0, 801652e <rcl_get_secure_root+0x2e>
 8016524:	2500      	movs	r5, #0
 8016526:	4628      	mov	r0, r5
 8016528:	b005      	add	sp, #20
 801652a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801652e:	9b03      	ldr	r3, [sp, #12]
 8016530:	781a      	ldrb	r2, [r3, #0]
 8016532:	2a00      	cmp	r2, #0
 8016534:	d0f6      	beq.n	8016524 <rcl_get_secure_root+0x24>
 8016536:	f104 090c 	add.w	r9, r4, #12
 801653a:	e899 0003 	ldmia.w	r9, {r0, r1}
 801653e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8016542:	4618      	mov	r0, r3
 8016544:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8016548:	f002 fd94 	bl	8019074 <rcutils_strdup>
 801654c:	4680      	mov	r8, r0
 801654e:	2800      	cmp	r0, #0
 8016550:	d0e8      	beq.n	8016524 <rcl_get_secure_root+0x24>
 8016552:	a903      	add	r1, sp, #12
 8016554:	481e      	ldr	r0, [pc, #120]	; (80165d0 <rcl_get_secure_root+0xd0>)
 8016556:	9503      	str	r5, [sp, #12]
 8016558:	f002 fc2a 	bl	8018db0 <rcutils_get_env>
 801655c:	b160      	cbz	r0, 8016578 <rcl_get_secure_root+0x78>
 801655e:	2600      	movs	r6, #0
 8016560:	4630      	mov	r0, r6
 8016562:	6863      	ldr	r3, [r4, #4]
 8016564:	6921      	ldr	r1, [r4, #16]
 8016566:	4798      	blx	r3
 8016568:	4640      	mov	r0, r8
 801656a:	6863      	ldr	r3, [r4, #4]
 801656c:	6921      	ldr	r1, [r4, #16]
 801656e:	4798      	blx	r3
 8016570:	4628      	mov	r0, r5
 8016572:	b005      	add	sp, #20
 8016574:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016578:	9b03      	ldr	r3, [sp, #12]
 801657a:	781e      	ldrb	r6, [r3, #0]
 801657c:	b1f6      	cbz	r6, 80165bc <rcl_get_secure_root+0xbc>
 801657e:	e899 0003 	ldmia.w	r9, {r0, r1}
 8016582:	e88d 0003 	stmia.w	sp, {r0, r1}
 8016586:	4618      	mov	r0, r3
 8016588:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801658c:	f002 fd72 	bl	8019074 <rcutils_strdup>
 8016590:	4606      	mov	r6, r0
 8016592:	2800      	cmp	r0, #0
 8016594:	d0e3      	beq.n	801655e <rcl_get_secure_root+0x5e>
 8016596:	4622      	mov	r2, r4
 8016598:	4641      	mov	r1, r8
 801659a:	f7ff ff6f 	bl	801647c <exact_match_lookup>
 801659e:	4605      	mov	r5, r0
 80165a0:	2d00      	cmp	r5, #0
 80165a2:	d0dd      	beq.n	8016560 <rcl_get_secure_root+0x60>
 80165a4:	4628      	mov	r0, r5
 80165a6:	f002 fc1b 	bl	8018de0 <rcutils_is_directory>
 80165aa:	4603      	mov	r3, r0
 80165ac:	2800      	cmp	r0, #0
 80165ae:	d1d7      	bne.n	8016560 <rcl_get_secure_root+0x60>
 80165b0:	4628      	mov	r0, r5
 80165b2:	6921      	ldr	r1, [r4, #16]
 80165b4:	461d      	mov	r5, r3
 80165b6:	6863      	ldr	r3, [r4, #4]
 80165b8:	4798      	blx	r3
 80165ba:	e7d1      	b.n	8016560 <rcl_get_secure_root+0x60>
 80165bc:	4622      	mov	r2, r4
 80165be:	4638      	mov	r0, r7
 80165c0:	4641      	mov	r1, r8
 80165c2:	f7ff ff5b 	bl	801647c <exact_match_lookup>
 80165c6:	4605      	mov	r5, r0
 80165c8:	e7ea      	b.n	80165a0 <rcl_get_secure_root+0xa0>
 80165ca:	bf00      	nop
 80165cc:	080201b4 	.word	0x080201b4
 80165d0:	080201cc 	.word	0x080201cc

080165d4 <rcl_get_security_options_from_environment>:
 80165d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80165d8:	b082      	sub	sp, #8
 80165da:	2300      	movs	r3, #0
 80165dc:	4606      	mov	r6, r0
 80165de:	460f      	mov	r7, r1
 80165e0:	4821      	ldr	r0, [pc, #132]	; (8016668 <rcl_get_security_options_from_environment+0x94>)
 80165e2:	a901      	add	r1, sp, #4
 80165e4:	4690      	mov	r8, r2
 80165e6:	9301      	str	r3, [sp, #4]
 80165e8:	f002 fbe2 	bl	8018db0 <rcutils_get_env>
 80165ec:	b120      	cbz	r0, 80165f8 <rcl_get_security_options_from_environment+0x24>
 80165ee:	2501      	movs	r5, #1
 80165f0:	4628      	mov	r0, r5
 80165f2:	b002      	add	sp, #8
 80165f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80165f8:	4604      	mov	r4, r0
 80165fa:	491c      	ldr	r1, [pc, #112]	; (801666c <rcl_get_security_options_from_environment+0x98>)
 80165fc:	9801      	ldr	r0, [sp, #4]
 80165fe:	f7e9 fe1f 	bl	8000240 <strcmp>
 8016602:	4605      	mov	r5, r0
 8016604:	b9f0      	cbnz	r0, 8016644 <rcl_get_security_options_from_environment+0x70>
 8016606:	9001      	str	r0, [sp, #4]
 8016608:	f1b8 0f00 	cmp.w	r8, #0
 801660c:	d021      	beq.n	8016652 <rcl_get_security_options_from_environment+0x7e>
 801660e:	a901      	add	r1, sp, #4
 8016610:	4817      	ldr	r0, [pc, #92]	; (8016670 <rcl_get_security_options_from_environment+0x9c>)
 8016612:	f002 fbcd 	bl	8018db0 <rcutils_get_env>
 8016616:	2800      	cmp	r0, #0
 8016618:	d1e9      	bne.n	80165ee <rcl_get_security_options_from_environment+0x1a>
 801661a:	4916      	ldr	r1, [pc, #88]	; (8016674 <rcl_get_security_options_from_environment+0xa0>)
 801661c:	9801      	ldr	r0, [sp, #4]
 801661e:	f7e9 fe0f 	bl	8000240 <strcmp>
 8016622:	4603      	mov	r3, r0
 8016624:	4639      	mov	r1, r7
 8016626:	4630      	mov	r0, r6
 8016628:	fab3 f383 	clz	r3, r3
 801662c:	095b      	lsrs	r3, r3, #5
 801662e:	f888 3000 	strb.w	r3, [r8]
 8016632:	f7ff ff65 	bl	8016500 <rcl_get_secure_root>
 8016636:	b170      	cbz	r0, 8016656 <rcl_get_security_options_from_environment+0x82>
 8016638:	f8c8 0004 	str.w	r0, [r8, #4]
 801663c:	4628      	mov	r0, r5
 801663e:	b002      	add	sp, #8
 8016640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016644:	4625      	mov	r5, r4
 8016646:	f888 4000 	strb.w	r4, [r8]
 801664a:	4628      	mov	r0, r5
 801664c:	b002      	add	sp, #8
 801664e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016652:	250b      	movs	r5, #11
 8016654:	e7cc      	b.n	80165f0 <rcl_get_security_options_from_environment+0x1c>
 8016656:	f898 5000 	ldrb.w	r5, [r8]
 801665a:	f1a5 0501 	sub.w	r5, r5, #1
 801665e:	fab5 f585 	clz	r5, r5
 8016662:	096d      	lsrs	r5, r5, #5
 8016664:	e7c4      	b.n	80165f0 <rcl_get_security_options_from_environment+0x1c>
 8016666:	bf00      	nop
 8016668:	0802016c 	.word	0x0802016c
 801666c:	08020180 	.word	0x08020180
 8016670:	08020188 	.word	0x08020188
 8016674:	080201a0 	.word	0x080201a0

08016678 <rcl_get_zero_initialized_service>:
 8016678:	4b01      	ldr	r3, [pc, #4]	; (8016680 <rcl_get_zero_initialized_service+0x8>)
 801667a:	6818      	ldr	r0, [r3, #0]
 801667c:	4770      	bx	lr
 801667e:	bf00      	nop
 8016680:	080201ec 	.word	0x080201ec

08016684 <rcl_service_init>:
 8016684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016688:	b086      	sub	sp, #24
 801668a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801668c:	2d00      	cmp	r5, #0
 801668e:	d04d      	beq.n	801672c <rcl_service_init+0xa8>
 8016690:	f105 0950 	add.w	r9, r5, #80	; 0x50
 8016694:	4604      	mov	r4, r0
 8016696:	460e      	mov	r6, r1
 8016698:	4690      	mov	r8, r2
 801669a:	4648      	mov	r0, r9
 801669c:	461f      	mov	r7, r3
 801669e:	f7f8 fac7 	bl	800ec30 <rcutils_allocator_is_valid>
 80166a2:	2c00      	cmp	r4, #0
 80166a4:	d042      	beq.n	801672c <rcl_service_init+0xa8>
 80166a6:	f080 0001 	eor.w	r0, r0, #1
 80166aa:	b2c0      	uxtb	r0, r0
 80166ac:	2800      	cmp	r0, #0
 80166ae:	d13d      	bne.n	801672c <rcl_service_init+0xa8>
 80166b0:	4630      	mov	r0, r6
 80166b2:	f7ff fd95 	bl	80161e0 <rcl_node_is_valid>
 80166b6:	2800      	cmp	r0, #0
 80166b8:	d042      	beq.n	8016740 <rcl_service_init+0xbc>
 80166ba:	2f00      	cmp	r7, #0
 80166bc:	d036      	beq.n	801672c <rcl_service_init+0xa8>
 80166be:	f1b8 0f00 	cmp.w	r8, #0
 80166c2:	d033      	beq.n	801672c <rcl_service_init+0xa8>
 80166c4:	f8d4 a000 	ldr.w	sl, [r4]
 80166c8:	f1ba 0f00 	cmp.w	sl, #0
 80166cc:	d133      	bne.n	8016736 <rcl_service_init+0xb2>
 80166ce:	f44f 718c 	mov.w	r1, #280	; 0x118
 80166d2:	2001      	movs	r0, #1
 80166d4:	e9d5 3217 	ldrd	r3, r2, [r5, #92]	; 0x5c
 80166d8:	4798      	blx	r3
 80166da:	6020      	str	r0, [r4, #0]
 80166dc:	2800      	cmp	r0, #0
 80166de:	d075      	beq.n	80167cc <rcl_service_init+0x148>
 80166e0:	f500 7088 	add.w	r0, r0, #272	; 0x110
 80166e4:	f105 0358 	add.w	r3, r5, #88	; 0x58
 80166e8:	2201      	movs	r2, #1
 80166ea:	f8cd a010 	str.w	sl, [sp, #16]
 80166ee:	9005      	str	r0, [sp, #20]
 80166f0:	9203      	str	r2, [sp, #12]
 80166f2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80166f6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80166fa:	4639      	mov	r1, r7
 80166fc:	4630      	mov	r0, r6
 80166fe:	e899 000c 	ldmia.w	r9, {r2, r3}
 8016702:	f7ff fde5 	bl	80162d0 <rcl_node_resolve_name>
 8016706:	4607      	mov	r7, r0
 8016708:	b1f8      	cbz	r0, 801674a <rcl_service_init+0xc6>
 801670a:	f1a0 0368 	sub.w	r3, r0, #104	; 0x68
 801670e:	6820      	ldr	r0, [r4, #0]
 8016710:	2b01      	cmp	r3, #1
 8016712:	d943      	bls.n	801679c <rcl_service_init+0x118>
 8016714:	2f0a      	cmp	r7, #10
 8016716:	d000      	beq.n	801671a <rcl_service_init+0x96>
 8016718:	2701      	movs	r7, #1
 801671a:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 801671c:	6e29      	ldr	r1, [r5, #96]	; 0x60
 801671e:	4798      	blx	r3
 8016720:	2300      	movs	r3, #0
 8016722:	4638      	mov	r0, r7
 8016724:	6023      	str	r3, [r4, #0]
 8016726:	b006      	add	sp, #24
 8016728:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801672c:	270b      	movs	r7, #11
 801672e:	4638      	mov	r0, r7
 8016730:	b006      	add	sp, #24
 8016732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016736:	2764      	movs	r7, #100	; 0x64
 8016738:	4638      	mov	r0, r7
 801673a:	b006      	add	sp, #24
 801673c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016740:	27c8      	movs	r7, #200	; 0xc8
 8016742:	4638      	mov	r0, r7
 8016744:	b006      	add	sp, #24
 8016746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801674a:	4630      	mov	r0, r6
 801674c:	f7ff fd6a 	bl	8016224 <rcl_node_get_rmw_handle>
 8016750:	6827      	ldr	r7, [r4, #0]
 8016752:	4641      	mov	r1, r8
 8016754:	462b      	mov	r3, r5
 8016756:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 801675a:	f003 fd9f 	bl	801a29c <rmw_create_service>
 801675e:	6821      	ldr	r1, [r4, #0]
 8016760:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
 8016764:	f8d1 0108 	ldr.w	r0, [r1, #264]	; 0x108
 8016768:	b390      	cbz	r0, 80167d0 <rcl_service_init+0x14c>
 801676a:	3168      	adds	r1, #104	; 0x68
 801676c:	f003 fec8 	bl	801a500 <rmw_service_request_subscription_get_actual_qos>
 8016770:	b9b0      	cbnz	r0, 80167a0 <rcl_service_init+0x11c>
 8016772:	6823      	ldr	r3, [r4, #0]
 8016774:	f103 01b8 	add.w	r1, r3, #184	; 0xb8
 8016778:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 801677c:	f003 feac 	bl	801a4d8 <rmw_service_response_publisher_get_actual_qos>
 8016780:	4607      	mov	r7, r0
 8016782:	b968      	cbnz	r0, 80167a0 <rcl_service_init+0x11c>
 8016784:	6820      	ldr	r0, [r4, #0]
 8016786:	2268      	movs	r2, #104	; 0x68
 8016788:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
 801678c:	4629      	mov	r1, r5
 801678e:	f880 30b0 	strb.w	r3, [r0, #176]	; 0xb0
 8016792:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
 8016796:	f007 fb2e 	bl	801ddf6 <memcpy>
 801679a:	e7c8      	b.n	801672e <rcl_service_init+0xaa>
 801679c:	2768      	movs	r7, #104	; 0x68
 801679e:	e7bc      	b.n	801671a <rcl_service_init+0x96>
 80167a0:	f7ff f904 	bl	80159ac <rcl_convert_rmw_ret_to_rcl_ret>
 80167a4:	4607      	mov	r7, r0
 80167a6:	4630      	mov	r0, r6
 80167a8:	f7ff fd3c 	bl	8016224 <rcl_node_get_rmw_handle>
 80167ac:	6823      	ldr	r3, [r4, #0]
 80167ae:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 80167b2:	f003 fe4d 	bl	801a450 <rmw_destroy_service>
 80167b6:	6821      	ldr	r1, [r4, #0]
 80167b8:	f8d1 0110 	ldr.w	r0, [r1, #272]	; 0x110
 80167bc:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 80167be:	6e29      	ldr	r1, [r5, #96]	; 0x60
 80167c0:	4798      	blx	r3
 80167c2:	6820      	ldr	r0, [r4, #0]
 80167c4:	2300      	movs	r3, #0
 80167c6:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
 80167ca:	e7a6      	b.n	801671a <rcl_service_init+0x96>
 80167cc:	270a      	movs	r7, #10
 80167ce:	e7ae      	b.n	801672e <rcl_service_init+0xaa>
 80167d0:	2701      	movs	r7, #1
 80167d2:	e7f1      	b.n	80167b8 <rcl_service_init+0x134>

080167d4 <rcl_service_get_default_options>:
 80167d4:	b530      	push	{r4, r5, lr}
 80167d6:	4d0f      	ldr	r5, [pc, #60]	; (8016814 <rcl_service_get_default_options+0x40>)
 80167d8:	b087      	sub	sp, #28
 80167da:	4604      	mov	r4, r0
 80167dc:	2250      	movs	r2, #80	; 0x50
 80167de:	490e      	ldr	r1, [pc, #56]	; (8016818 <rcl_service_get_default_options+0x44>)
 80167e0:	4628      	mov	r0, r5
 80167e2:	f007 fb08 	bl	801ddf6 <memcpy>
 80167e6:	4668      	mov	r0, sp
 80167e8:	f7f8 fa14 	bl	800ec14 <rcutils_get_default_allocator>
 80167ec:	46ec      	mov	ip, sp
 80167ee:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 80167f2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80167f6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80167fa:	f8dc 3000 	ldr.w	r3, [ip]
 80167fe:	2268      	movs	r2, #104	; 0x68
 8016800:	4629      	mov	r1, r5
 8016802:	4620      	mov	r0, r4
 8016804:	f8ce 3000 	str.w	r3, [lr]
 8016808:	f007 faf5 	bl	801ddf6 <memcpy>
 801680c:	4620      	mov	r0, r4
 801680e:	b007      	add	sp, #28
 8016810:	bd30      	pop	{r4, r5, pc}
 8016812:	bf00      	nop
 8016814:	20010ac8 	.word	0x20010ac8
 8016818:	080201f0 	.word	0x080201f0

0801681c <rcl_service_get_rmw_handle>:
 801681c:	b118      	cbz	r0, 8016826 <rcl_service_get_rmw_handle+0xa>
 801681e:	6800      	ldr	r0, [r0, #0]
 8016820:	b108      	cbz	r0, 8016826 <rcl_service_get_rmw_handle+0xa>
 8016822:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 8016826:	4770      	bx	lr

08016828 <rcl_take_request>:
 8016828:	b5f0      	push	{r4, r5, r6, r7, lr}
 801682a:	468e      	mov	lr, r1
 801682c:	b091      	sub	sp, #68	; 0x44
 801682e:	460c      	mov	r4, r1
 8016830:	4617      	mov	r7, r2
 8016832:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 8016836:	4605      	mov	r5, r0
 8016838:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801683c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016840:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8016844:	e88c 0003 	stmia.w	ip, {r0, r1}
 8016848:	b30d      	cbz	r5, 801688e <rcl_take_request+0x66>
 801684a:	682b      	ldr	r3, [r5, #0]
 801684c:	b1fb      	cbz	r3, 801688e <rcl_take_request+0x66>
 801684e:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 8016852:	b1e0      	cbz	r0, 801688e <rcl_take_request+0x66>
 8016854:	b397      	cbz	r7, 80168bc <rcl_take_request+0x94>
 8016856:	2300      	movs	r3, #0
 8016858:	463a      	mov	r2, r7
 801685a:	a906      	add	r1, sp, #24
 801685c:	f88d 3017 	strb.w	r3, [sp, #23]
 8016860:	f10d 0317 	add.w	r3, sp, #23
 8016864:	f003 fc18 	bl	801a098 <rmw_take_request>
 8016868:	4606      	mov	r6, r0
 801686a:	b198      	cbz	r0, 8016894 <rcl_take_request+0x6c>
 801686c:	280a      	cmp	r0, #10
 801686e:	bf18      	it	ne
 8016870:	2601      	movne	r6, #1
 8016872:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 8016876:	46a6      	mov	lr, r4
 8016878:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801687c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8016880:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8016884:	e88e 0003 	stmia.w	lr, {r0, r1}
 8016888:	4630      	mov	r0, r6
 801688a:	b011      	add	sp, #68	; 0x44
 801688c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801688e:	f44f 7616 	mov.w	r6, #600	; 0x258
 8016892:	e7ee      	b.n	8016872 <rcl_take_request+0x4a>
 8016894:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8016898:	b193      	cbz	r3, 80168c0 <rcl_take_request+0x98>
 801689a:	682b      	ldr	r3, [r5, #0]
 801689c:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
 80168a0:	2800      	cmp	r0, #0
 80168a2:	d0e6      	beq.n	8016872 <rcl_take_request+0x4a>
 80168a4:	463a      	mov	r2, r7
 80168a6:	ab0a      	add	r3, sp, #40	; 0x28
 80168a8:	2101      	movs	r1, #1
 80168aa:	9302      	str	r3, [sp, #8]
 80168ac:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 80168b0:	e9cd 6700 	strd	r6, r7, [sp]
 80168b4:	f000 f844 	bl	8016940 <rcl_send_service_event_message>
 80168b8:	4606      	mov	r6, r0
 80168ba:	e7da      	b.n	8016872 <rcl_take_request+0x4a>
 80168bc:	260b      	movs	r6, #11
 80168be:	e7d8      	b.n	8016872 <rcl_take_request+0x4a>
 80168c0:	f240 2659 	movw	r6, #601	; 0x259
 80168c4:	e7d5      	b.n	8016872 <rcl_take_request+0x4a>
 80168c6:	bf00      	nop

080168c8 <rcl_send_response>:
 80168c8:	b350      	cbz	r0, 8016920 <rcl_send_response+0x58>
 80168ca:	6803      	ldr	r3, [r0, #0]
 80168cc:	b570      	push	{r4, r5, r6, lr}
 80168ce:	4604      	mov	r4, r0
 80168d0:	b084      	sub	sp, #16
 80168d2:	b1cb      	cbz	r3, 8016908 <rcl_send_response+0x40>
 80168d4:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 80168d8:	b1b0      	cbz	r0, 8016908 <rcl_send_response+0x40>
 80168da:	4615      	mov	r5, r2
 80168dc:	b1ea      	cbz	r2, 801691a <rcl_send_response+0x52>
 80168de:	460e      	mov	r6, r1
 80168e0:	b1d9      	cbz	r1, 801691a <rcl_send_response+0x52>
 80168e2:	f003 fc37 	bl	801a154 <rmw_send_response>
 80168e6:	b998      	cbnz	r0, 8016910 <rcl_send_response+0x48>
 80168e8:	6823      	ldr	r3, [r4, #0]
 80168ea:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80168ee:	b16b      	cbz	r3, 801690c <rcl_send_response+0x44>
 80168f0:	462a      	mov	r2, r5
 80168f2:	2102      	movs	r1, #2
 80168f4:	4618      	mov	r0, r3
 80168f6:	ed96 7b04 	vldr	d7, [r6, #16]
 80168fa:	9602      	str	r6, [sp, #8]
 80168fc:	ed8d 7b00 	vstr	d7, [sp]
 8016900:	f000 f81e 	bl	8016940 <rcl_send_service_event_message>
 8016904:	b004      	add	sp, #16
 8016906:	bd70      	pop	{r4, r5, r6, pc}
 8016908:	f44f 7016 	mov.w	r0, #600	; 0x258
 801690c:	b004      	add	sp, #16
 801690e:	bd70      	pop	{r4, r5, r6, pc}
 8016910:	2802      	cmp	r0, #2
 8016912:	bf18      	it	ne
 8016914:	2001      	movne	r0, #1
 8016916:	b004      	add	sp, #16
 8016918:	bd70      	pop	{r4, r5, r6, pc}
 801691a:	200b      	movs	r0, #11
 801691c:	b004      	add	sp, #16
 801691e:	bd70      	pop	{r4, r5, r6, pc}
 8016920:	f44f 7016 	mov.w	r0, #600	; 0x258
 8016924:	4770      	bx	lr
 8016926:	bf00      	nop

08016928 <rcl_service_is_valid>:
 8016928:	b130      	cbz	r0, 8016938 <rcl_service_is_valid+0x10>
 801692a:	6800      	ldr	r0, [r0, #0]
 801692c:	b120      	cbz	r0, 8016938 <rcl_service_is_valid+0x10>
 801692e:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 8016932:	3800      	subs	r0, #0
 8016934:	bf18      	it	ne
 8016936:	2001      	movne	r0, #1
 8016938:	4770      	bx	lr
 801693a:	bf00      	nop
 801693c:	0000      	movs	r0, r0
	...

08016940 <rcl_send_service_event_message>:
 8016940:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016944:	b093      	sub	sp, #76	; 0x4c
 8016946:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8016948:	b196      	cbz	r6, 8016970 <rcl_send_service_event_message+0x30>
 801694a:	4615      	mov	r5, r2
 801694c:	b182      	cbz	r2, 8016970 <rcl_send_service_event_message+0x30>
 801694e:	4604      	mov	r4, r0
 8016950:	b148      	cbz	r0, 8016966 <rcl_send_service_event_message+0x26>
 8016952:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8016956:	b133      	cbz	r3, 8016966 <rcl_send_service_event_message+0x26>
 8016958:	68c0      	ldr	r0, [r0, #12]
 801695a:	460f      	mov	r7, r1
 801695c:	f000 f9f2 	bl	8016d44 <rcl_clock_valid>
 8016960:	b108      	cbz	r0, 8016966 <rcl_send_service_event_message+0x26>
 8016962:	7a23      	ldrb	r3, [r4, #8]
 8016964:	b94b      	cbnz	r3, 801697a <rcl_send_service_event_message+0x3a>
 8016966:	2401      	movs	r4, #1
 8016968:	4620      	mov	r0, r4
 801696a:	b013      	add	sp, #76	; 0x4c
 801696c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016970:	240b      	movs	r4, #11
 8016972:	4620      	mov	r0, r4
 8016974:	b013      	add	sp, #76	; 0x4c
 8016976:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801697a:	f104 0e60 	add.w	lr, r4, #96	; 0x60
 801697e:	f10d 0c0c 	add.w	ip, sp, #12
 8016982:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016986:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801698a:	f8de 3000 	ldr.w	r3, [lr]
 801698e:	a803      	add	r0, sp, #12
 8016990:	f8cc 3000 	str.w	r3, [ip]
 8016994:	f7f8 f94c 	bl	800ec30 <rcutils_allocator_is_valid>
 8016998:	2800      	cmp	r0, #0
 801699a:	d0e9      	beq.n	8016970 <rcl_send_service_event_message+0x30>
 801699c:	6820      	ldr	r0, [r4, #0]
 801699e:	f7f7 f8cd 	bl	800db3c <rcl_publisher_is_valid>
 80169a2:	2800      	cmp	r0, #0
 80169a4:	d05e      	beq.n	8016a64 <rcl_send_service_event_message+0x124>
 80169a6:	4669      	mov	r1, sp
 80169a8:	68e0      	ldr	r0, [r4, #12]
 80169aa:	f000 fa5d 	bl	8016e68 <rcl_clock_get_now>
 80169ae:	4601      	mov	r1, r0
 80169b0:	2800      	cmp	r0, #0
 80169b2:	d146      	bne.n	8016a42 <rcl_send_service_event_message+0x102>
 80169b4:	2220      	movs	r2, #32
 80169b6:	eb0d 0002 	add.w	r0, sp, r2
 80169ba:	f007 f8eb 	bl	801db94 <memset>
 80169be:	f88d 7020 	strb.w	r7, [sp, #32]
 80169c2:	e9dd 8900 	ldrd	r8, r9, [sp]
 80169c6:	a32a      	add	r3, pc, #168	; (adr r3, 8016a70 <rcl_send_service_event_message+0x130>)
 80169c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169cc:	4640      	mov	r0, r8
 80169ce:	4649      	mov	r1, r9
 80169d0:	f7e9 fc9e 	bl	8000310 <__aeabi_ldivmod>
 80169d4:	4649      	mov	r1, r9
 80169d6:	9009      	str	r0, [sp, #36]	; 0x24
 80169d8:	4640      	mov	r0, r8
 80169da:	a325      	add	r3, pc, #148	; (adr r3, 8016a70 <rcl_send_service_event_message+0x130>)
 80169dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169e0:	f7e9 fc96 	bl	8000310 <__aeabi_ldivmod>
 80169e4:	920a      	str	r2, [sp, #40]	; 0x28
 80169e6:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
 80169ea:	6830      	ldr	r0, [r6, #0]
 80169ec:	6871      	ldr	r1, [r6, #4]
 80169ee:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 80169f2:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80169f6:	7a23      	ldrb	r3, [r4, #8]
 80169f8:	68b2      	ldr	r2, [r6, #8]
 80169fa:	2b01      	cmp	r3, #1
 80169fc:	68f3      	ldr	r3, [r6, #12]
 80169fe:	bf08      	it	eq
 8016a00:	2500      	moveq	r5, #0
 8016a02:	2f01      	cmp	r7, #1
 8016a04:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016a08:	d81f      	bhi.n	8016a4a <rcl_send_service_event_message+0x10a>
 8016a0a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8016a0e:	462a      	mov	r2, r5
 8016a10:	a808      	add	r0, sp, #32
 8016a12:	a903      	add	r1, sp, #12
 8016a14:	699d      	ldr	r5, [r3, #24]
 8016a16:	2300      	movs	r3, #0
 8016a18:	47a8      	blx	r5
 8016a1a:	4605      	mov	r5, r0
 8016a1c:	2d00      	cmp	r5, #0
 8016a1e:	d0a2      	beq.n	8016966 <rcl_send_service_event_message+0x26>
 8016a20:	4629      	mov	r1, r5
 8016a22:	6820      	ldr	r0, [r4, #0]
 8016a24:	2200      	movs	r2, #0
 8016a26:	f7f7 f865 	bl	800daf4 <rcl_publish>
 8016a2a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8016a2e:	4604      	mov	r4, r0
 8016a30:	a903      	add	r1, sp, #12
 8016a32:	4628      	mov	r0, r5
 8016a34:	69db      	ldr	r3, [r3, #28]
 8016a36:	4798      	blx	r3
 8016a38:	2c00      	cmp	r4, #0
 8016a3a:	d095      	beq.n	8016968 <rcl_send_service_event_message+0x28>
 8016a3c:	f7f8 f91c 	bl	800ec78 <rcutils_reset_error>
 8016a40:	e792      	b.n	8016968 <rcl_send_service_event_message+0x28>
 8016a42:	2401      	movs	r4, #1
 8016a44:	f7f8 f918 	bl	800ec78 <rcutils_reset_error>
 8016a48:	e78e      	b.n	8016968 <rcl_send_service_event_message+0x28>
 8016a4a:	1eb9      	subs	r1, r7, #2
 8016a4c:	2901      	cmp	r1, #1
 8016a4e:	d8f8      	bhi.n	8016a42 <rcl_send_service_event_message+0x102>
 8016a50:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8016a54:	462b      	mov	r3, r5
 8016a56:	a808      	add	r0, sp, #32
 8016a58:	a903      	add	r1, sp, #12
 8016a5a:	6995      	ldr	r5, [r2, #24]
 8016a5c:	2200      	movs	r2, #0
 8016a5e:	47a8      	blx	r5
 8016a60:	4605      	mov	r5, r0
 8016a62:	e7db      	b.n	8016a1c <rcl_send_service_event_message+0xdc>
 8016a64:	f44f 7496 	mov.w	r4, #300	; 0x12c
 8016a68:	e77e      	b.n	8016968 <rcl_send_service_event_message+0x28>
 8016a6a:	bf00      	nop
 8016a6c:	f3af 8000 	nop.w
 8016a70:	3b9aca00 	.word	0x3b9aca00
 8016a74:	00000000 	.word	0x00000000

08016a78 <rcl_get_zero_initialized_subscription>:
 8016a78:	4b01      	ldr	r3, [pc, #4]	; (8016a80 <rcl_get_zero_initialized_subscription+0x8>)
 8016a7a:	6818      	ldr	r0, [r3, #0]
 8016a7c:	4770      	bx	lr
 8016a7e:	bf00      	nop
 8016a80:	08020240 	.word	0x08020240

08016a84 <rcl_subscription_init>:
 8016a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016a88:	b088      	sub	sp, #32
 8016a8a:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8016a8c:	b1ff      	cbz	r7, 8016ace <rcl_subscription_init+0x4a>
 8016a8e:	f107 0a50 	add.w	sl, r7, #80	; 0x50
 8016a92:	4605      	mov	r5, r0
 8016a94:	460e      	mov	r6, r1
 8016a96:	4691      	mov	r9, r2
 8016a98:	4650      	mov	r0, sl
 8016a9a:	4698      	mov	r8, r3
 8016a9c:	f7f8 f8c8 	bl	800ec30 <rcutils_allocator_is_valid>
 8016aa0:	f080 0401 	eor.w	r4, r0, #1
 8016aa4:	b2e4      	uxtb	r4, r4
 8016aa6:	b994      	cbnz	r4, 8016ace <rcl_subscription_init+0x4a>
 8016aa8:	b18d      	cbz	r5, 8016ace <rcl_subscription_init+0x4a>
 8016aaa:	4630      	mov	r0, r6
 8016aac:	f7ff fb98 	bl	80161e0 <rcl_node_is_valid>
 8016ab0:	2800      	cmp	r0, #0
 8016ab2:	d055      	beq.n	8016b60 <rcl_subscription_init+0xdc>
 8016ab4:	f1b9 0f00 	cmp.w	r9, #0
 8016ab8:	d009      	beq.n	8016ace <rcl_subscription_init+0x4a>
 8016aba:	f1b8 0f00 	cmp.w	r8, #0
 8016abe:	d006      	beq.n	8016ace <rcl_subscription_init+0x4a>
 8016ac0:	682b      	ldr	r3, [r5, #0]
 8016ac2:	b14b      	cbz	r3, 8016ad8 <rcl_subscription_init+0x54>
 8016ac4:	2464      	movs	r4, #100	; 0x64
 8016ac6:	4620      	mov	r0, r4
 8016ac8:	b008      	add	sp, #32
 8016aca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016ace:	240b      	movs	r4, #11
 8016ad0:	4620      	mov	r0, r4
 8016ad2:	b008      	add	sp, #32
 8016ad4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016ad8:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8016adc:	aa07      	add	r2, sp, #28
 8016ade:	9307      	str	r3, [sp, #28]
 8016ae0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8016ae4:	9205      	str	r2, [sp, #20]
 8016ae6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016aea:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016aee:	4641      	mov	r1, r8
 8016af0:	4630      	mov	r0, r6
 8016af2:	e89a 000c 	ldmia.w	sl, {r2, r3}
 8016af6:	f7ff fbeb 	bl	80162d0 <rcl_node_resolve_name>
 8016afa:	2800      	cmp	r0, #0
 8016afc:	d15f      	bne.n	8016bbe <rcl_subscription_init+0x13a>
 8016afe:	21d0      	movs	r1, #208	; 0xd0
 8016b00:	2001      	movs	r0, #1
 8016b02:	e9d7 3217 	ldrd	r3, r2, [r7, #92]	; 0x5c
 8016b06:	4798      	blx	r3
 8016b08:	6028      	str	r0, [r5, #0]
 8016b0a:	2800      	cmp	r0, #0
 8016b0c:	d05f      	beq.n	8016bce <rcl_subscription_init+0x14a>
 8016b0e:	4630      	mov	r0, r6
 8016b10:	f7ff fb88 	bl	8016224 <rcl_node_get_rmw_handle>
 8016b14:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8016b18:	4649      	mov	r1, r9
 8016b1a:	9a07      	ldr	r2, [sp, #28]
 8016b1c:	9300      	str	r3, [sp, #0]
 8016b1e:	463b      	mov	r3, r7
 8016b20:	682c      	ldr	r4, [r5, #0]
 8016b22:	f003 fd01 	bl	801a528 <rmw_create_subscription>
 8016b26:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
 8016b2a:	682c      	ldr	r4, [r5, #0]
 8016b2c:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
 8016b30:	b348      	cbz	r0, 8016b86 <rcl_subscription_init+0x102>
 8016b32:	f104 0178 	add.w	r1, r4, #120	; 0x78
 8016b36:	f003 fded 	bl	801a714 <rmw_subscription_get_actual_qos>
 8016b3a:	4604      	mov	r4, r0
 8016b3c:	b9a8      	cbnz	r0, 8016b6a <rcl_subscription_init+0xe6>
 8016b3e:	6828      	ldr	r0, [r5, #0]
 8016b40:	2278      	movs	r2, #120	; 0x78
 8016b42:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8016b46:	4639      	mov	r1, r7
 8016b48:	f880 30c0 	strb.w	r3, [r0, #192]	; 0xc0
 8016b4c:	f007 f953 	bl	801ddf6 <memcpy>
 8016b50:	9807      	ldr	r0, [sp, #28]
 8016b52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016b54:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8016b56:	4798      	blx	r3
 8016b58:	4620      	mov	r0, r4
 8016b5a:	b008      	add	sp, #32
 8016b5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016b60:	24c8      	movs	r4, #200	; 0xc8
 8016b62:	4620      	mov	r0, r4
 8016b64:	b008      	add	sp, #32
 8016b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016b6a:	682c      	ldr	r4, [r5, #0]
 8016b6c:	b36c      	cbz	r4, 8016bca <rcl_subscription_init+0x146>
 8016b6e:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
 8016b72:	b14b      	cbz	r3, 8016b88 <rcl_subscription_init+0x104>
 8016b74:	4630      	mov	r0, r6
 8016b76:	f7ff fb55 	bl	8016224 <rcl_node_get_rmw_handle>
 8016b7a:	682b      	ldr	r3, [r5, #0]
 8016b7c:	f8d3 10c8 	ldr.w	r1, [r3, #200]	; 0xc8
 8016b80:	f003 fddc 	bl	801a73c <rmw_destroy_subscription>
 8016b84:	682c      	ldr	r4, [r5, #0]
 8016b86:	b194      	cbz	r4, 8016bae <rcl_subscription_init+0x12a>
 8016b88:	f104 0650 	add.w	r6, r4, #80	; 0x50
 8016b8c:	4630      	mov	r0, r6
 8016b8e:	f7f8 f84f 	bl	800ec30 <rcutils_allocator_is_valid>
 8016b92:	b158      	cbz	r0, 8016bac <rcl_subscription_init+0x128>
 8016b94:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8016b96:	b148      	cbz	r0, 8016bac <rcl_subscription_init+0x128>
 8016b98:	4631      	mov	r1, r6
 8016b9a:	f002 fbe5 	bl	8019368 <rmw_subscription_content_filter_options_fini>
 8016b9e:	4606      	mov	r6, r0
 8016ba0:	b9c8      	cbnz	r0, 8016bd6 <rcl_subscription_init+0x152>
 8016ba2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8016ba4:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8016ba6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8016ba8:	4798      	blx	r3
 8016baa:	66e6      	str	r6, [r4, #108]	; 0x6c
 8016bac:	682c      	ldr	r4, [r5, #0]
 8016bae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016bb0:	4620      	mov	r0, r4
 8016bb2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8016bb4:	2401      	movs	r4, #1
 8016bb6:	4798      	blx	r3
 8016bb8:	2300      	movs	r3, #0
 8016bba:	602b      	str	r3, [r5, #0]
 8016bbc:	e7c8      	b.n	8016b50 <rcl_subscription_init+0xcc>
 8016bbe:	2867      	cmp	r0, #103	; 0x67
 8016bc0:	d007      	beq.n	8016bd2 <rcl_subscription_init+0x14e>
 8016bc2:	2869      	cmp	r0, #105	; 0x69
 8016bc4:	d005      	beq.n	8016bd2 <rcl_subscription_init+0x14e>
 8016bc6:	280a      	cmp	r0, #10
 8016bc8:	d001      	beq.n	8016bce <rcl_subscription_init+0x14a>
 8016bca:	2401      	movs	r4, #1
 8016bcc:	e7c0      	b.n	8016b50 <rcl_subscription_init+0xcc>
 8016bce:	240a      	movs	r4, #10
 8016bd0:	e7be      	b.n	8016b50 <rcl_subscription_init+0xcc>
 8016bd2:	2467      	movs	r4, #103	; 0x67
 8016bd4:	e7bc      	b.n	8016b50 <rcl_subscription_init+0xcc>
 8016bd6:	f7fe fee9 	bl	80159ac <rcl_convert_rmw_ret_to_rcl_ret>
 8016bda:	682c      	ldr	r4, [r5, #0]
 8016bdc:	e7e7      	b.n	8016bae <rcl_subscription_init+0x12a>
 8016bde:	bf00      	nop

08016be0 <rcl_subscription_get_default_options>:
 8016be0:	b570      	push	{r4, r5, r6, lr}
 8016be2:	4c16      	ldr	r4, [pc, #88]	; (8016c3c <rcl_subscription_get_default_options+0x5c>)
 8016be4:	b08a      	sub	sp, #40	; 0x28
 8016be6:	4605      	mov	r5, r0
 8016be8:	2250      	movs	r2, #80	; 0x50
 8016bea:	4915      	ldr	r1, [pc, #84]	; (8016c40 <rcl_subscription_get_default_options+0x60>)
 8016bec:	4620      	mov	r0, r4
 8016bee:	f007 f902 	bl	801ddf6 <memcpy>
 8016bf2:	a804      	add	r0, sp, #16
 8016bf4:	f7f8 f80e 	bl	800ec14 <rcutils_get_default_allocator>
 8016bf8:	f10d 0c10 	add.w	ip, sp, #16
 8016bfc:	f104 0e50 	add.w	lr, r4, #80	; 0x50
 8016c00:	466e      	mov	r6, sp
 8016c02:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016c06:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8016c0a:	f8dc 3000 	ldr.w	r3, [ip]
 8016c0e:	4630      	mov	r0, r6
 8016c10:	f8ce 3000 	str.w	r3, [lr]
 8016c14:	f002 fbc2 	bl	801939c <rmw_get_default_subscription_options>
 8016c18:	f104 0364 	add.w	r3, r4, #100	; 0x64
 8016c1c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8016c20:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8016c24:	2301      	movs	r3, #1
 8016c26:	2278      	movs	r2, #120	; 0x78
 8016c28:	4621      	mov	r1, r4
 8016c2a:	4628      	mov	r0, r5
 8016c2c:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 8016c30:	f007 f8e1 	bl	801ddf6 <memcpy>
 8016c34:	4628      	mov	r0, r5
 8016c36:	b00a      	add	sp, #40	; 0x28
 8016c38:	bd70      	pop	{r4, r5, r6, pc}
 8016c3a:	bf00      	nop
 8016c3c:	20010b30 	.word	0x20010b30
 8016c40:	08020248 	.word	0x08020248

08016c44 <rcl_take>:
 8016c44:	2800      	cmp	r0, #0
 8016c46:	d049      	beq.n	8016cdc <rcl_take+0x98>
 8016c48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016c4c:	4615      	mov	r5, r2
 8016c4e:	6802      	ldr	r2, [r0, #0]
 8016c50:	b0a0      	sub	sp, #128	; 0x80
 8016c52:	4604      	mov	r4, r0
 8016c54:	2a00      	cmp	r2, #0
 8016c56:	d039      	beq.n	8016ccc <rcl_take+0x88>
 8016c58:	461f      	mov	r7, r3
 8016c5a:	f8d2 30c8 	ldr.w	r3, [r2, #200]	; 0xc8
 8016c5e:	b3ab      	cbz	r3, 8016ccc <rcl_take+0x88>
 8016c60:	460e      	mov	r6, r1
 8016c62:	2900      	cmp	r1, #0
 8016c64:	d038      	beq.n	8016cd8 <rcl_take+0x94>
 8016c66:	2d00      	cmp	r5, #0
 8016c68:	d03c      	beq.n	8016ce4 <rcl_take+0xa0>
 8016c6a:	a802      	add	r0, sp, #8
 8016c6c:	f002 fc24 	bl	80194b8 <rmw_get_zero_initialized_message_info>
 8016c70:	6823      	ldr	r3, [r4, #0]
 8016c72:	f10d 0c08 	add.w	ip, sp, #8
 8016c76:	46ae      	mov	lr, r5
 8016c78:	f8d3 80c8 	ldr.w	r8, [r3, #200]	; 0xc8
 8016c7c:	2400      	movs	r4, #0
 8016c7e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016c82:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8016c86:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016c8a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8016c8e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016c92:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8016c96:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8016c9a:	462b      	mov	r3, r5
 8016c9c:	f10d 0247 	add.w	r2, sp, #71	; 0x47
 8016ca0:	f88d 4047 	strb.w	r4, [sp, #71]	; 0x47
 8016ca4:	e88e 0003 	stmia.w	lr, {r0, r1}
 8016ca8:	4631      	mov	r1, r6
 8016caa:	4640      	mov	r0, r8
 8016cac:	9700      	str	r7, [sp, #0]
 8016cae:	f003 fda7 	bl	801a800 <rmw_take_with_info>
 8016cb2:	4603      	mov	r3, r0
 8016cb4:	b9c0      	cbnz	r0, 8016ce8 <rcl_take+0xa4>
 8016cb6:	f89d 1047 	ldrb.w	r1, [sp, #71]	; 0x47
 8016cba:	f240 1291 	movw	r2, #401	; 0x191
 8016cbe:	2900      	cmp	r1, #0
 8016cc0:	bf08      	it	eq
 8016cc2:	4613      	moveq	r3, r2
 8016cc4:	4618      	mov	r0, r3
 8016cc6:	b020      	add	sp, #128	; 0x80
 8016cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016ccc:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8016cd0:	4618      	mov	r0, r3
 8016cd2:	b020      	add	sp, #128	; 0x80
 8016cd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016cd8:	230b      	movs	r3, #11
 8016cda:	e7f3      	b.n	8016cc4 <rcl_take+0x80>
 8016cdc:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8016ce0:	4618      	mov	r0, r3
 8016ce2:	4770      	bx	lr
 8016ce4:	ad12      	add	r5, sp, #72	; 0x48
 8016ce6:	e7c0      	b.n	8016c6a <rcl_take+0x26>
 8016ce8:	f7fe fe60 	bl	80159ac <rcl_convert_rmw_ret_to_rcl_ret>
 8016cec:	4603      	mov	r3, r0
 8016cee:	e7e9      	b.n	8016cc4 <rcl_take+0x80>

08016cf0 <rcl_subscription_get_rmw_handle>:
 8016cf0:	b118      	cbz	r0, 8016cfa <rcl_subscription_get_rmw_handle+0xa>
 8016cf2:	6800      	ldr	r0, [r0, #0]
 8016cf4:	b108      	cbz	r0, 8016cfa <rcl_subscription_get_rmw_handle+0xa>
 8016cf6:	f8d0 00c8 	ldr.w	r0, [r0, #200]	; 0xc8
 8016cfa:	4770      	bx	lr

08016cfc <rcl_subscription_is_valid>:
 8016cfc:	b130      	cbz	r0, 8016d0c <rcl_subscription_is_valid+0x10>
 8016cfe:	6800      	ldr	r0, [r0, #0]
 8016d00:	b120      	cbz	r0, 8016d0c <rcl_subscription_is_valid+0x10>
 8016d02:	f8d0 00c8 	ldr.w	r0, [r0, #200]	; 0xc8
 8016d06:	3800      	subs	r0, #0
 8016d08:	bf18      	it	ne
 8016d0a:	2001      	movne	r0, #1
 8016d0c:	4770      	bx	lr
 8016d0e:	bf00      	nop

08016d10 <rcl_get_system_time>:
 8016d10:	4608      	mov	r0, r1
 8016d12:	f7f7 bfcd 	b.w	800ecb0 <rcutils_system_time_now>
 8016d16:	bf00      	nop

08016d18 <rcl_get_steady_time>:
 8016d18:	4608      	mov	r0, r1
 8016d1a:	f7f7 bff1 	b.w	800ed00 <rcutils_steady_time_now>
 8016d1e:	bf00      	nop

08016d20 <rcl_get_ros_time>:
 8016d20:	7a03      	ldrb	r3, [r0, #8]
 8016d22:	b510      	push	{r4, lr}
 8016d24:	460c      	mov	r4, r1
 8016d26:	b143      	cbz	r3, 8016d3a <rcl_get_ros_time+0x1a>
 8016d28:	2105      	movs	r1, #5
 8016d2a:	f001 ff9d 	bl	8018c68 <__atomic_load_8>
 8016d2e:	4602      	mov	r2, r0
 8016d30:	460b      	mov	r3, r1
 8016d32:	2000      	movs	r0, #0
 8016d34:	e9c4 2300 	strd	r2, r3, [r4]
 8016d38:	bd10      	pop	{r4, pc}
 8016d3a:	4608      	mov	r0, r1
 8016d3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016d40:	f7f7 bfb6 	b.w	800ecb0 <rcutils_system_time_now>

08016d44 <rcl_clock_valid>:
 8016d44:	b138      	cbz	r0, 8016d56 <rcl_clock_valid+0x12>
 8016d46:	7803      	ldrb	r3, [r0, #0]
 8016d48:	b123      	cbz	r3, 8016d54 <rcl_clock_valid+0x10>
 8016d4a:	68c0      	ldr	r0, [r0, #12]
 8016d4c:	3800      	subs	r0, #0
 8016d4e:	bf18      	it	ne
 8016d50:	2001      	movne	r0, #1
 8016d52:	4770      	bx	lr
 8016d54:	4618      	mov	r0, r3
 8016d56:	4770      	bx	lr

08016d58 <rcl_clock_init>:
 8016d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d5a:	4605      	mov	r5, r0
 8016d5c:	4610      	mov	r0, r2
 8016d5e:	4614      	mov	r4, r2
 8016d60:	460e      	mov	r6, r1
 8016d62:	f7f7 ff65 	bl	800ec30 <rcutils_allocator_is_valid>
 8016d66:	b128      	cbz	r0, 8016d74 <rcl_clock_init+0x1c>
 8016d68:	2d03      	cmp	r5, #3
 8016d6a:	d803      	bhi.n	8016d74 <rcl_clock_init+0x1c>
 8016d6c:	e8df f005 	tbb	[pc, r5]
 8016d70:	0659301f 	.word	0x0659301f
 8016d74:	f04f 0c0b 	mov.w	ip, #11
 8016d78:	4660      	mov	r0, ip
 8016d7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016d7c:	2c00      	cmp	r4, #0
 8016d7e:	d0f9      	beq.n	8016d74 <rcl_clock_init+0x1c>
 8016d80:	fab6 f386 	clz	r3, r6
 8016d84:	095b      	lsrs	r3, r3, #5
 8016d86:	2e00      	cmp	r6, #0
 8016d88:	d0f4      	beq.n	8016d74 <rcl_clock_init+0x1c>
 8016d8a:	6133      	str	r3, [r6, #16]
 8016d8c:	469c      	mov	ip, r3
 8016d8e:	f106 0514 	add.w	r5, r6, #20
 8016d92:	4f32      	ldr	r7, [pc, #200]	; (8016e5c <rcl_clock_init+0x104>)
 8016d94:	f04f 0e03 	mov.w	lr, #3
 8016d98:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8016d9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016d9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8016da0:	6823      	ldr	r3, [r4, #0]
 8016da2:	4660      	mov	r0, ip
 8016da4:	602b      	str	r3, [r5, #0]
 8016da6:	60f7      	str	r7, [r6, #12]
 8016da8:	f886 e000 	strb.w	lr, [r6]
 8016dac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016dae:	2e00      	cmp	r6, #0
 8016db0:	d0e0      	beq.n	8016d74 <rcl_clock_init+0x1c>
 8016db2:	2300      	movs	r3, #0
 8016db4:	f106 0514 	add.w	r5, r6, #20
 8016db8:	7033      	strb	r3, [r6, #0]
 8016dba:	469c      	mov	ip, r3
 8016dbc:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8016dc0:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8016dc4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016dc6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8016dc8:	6823      	ldr	r3, [r4, #0]
 8016dca:	4660      	mov	r0, ip
 8016dcc:	602b      	str	r3, [r5, #0]
 8016dce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016dd0:	2c00      	cmp	r4, #0
 8016dd2:	d0cf      	beq.n	8016d74 <rcl_clock_init+0x1c>
 8016dd4:	fab6 f586 	clz	r5, r6
 8016dd8:	096d      	lsrs	r5, r5, #5
 8016dda:	2e00      	cmp	r6, #0
 8016ddc:	d0ca      	beq.n	8016d74 <rcl_clock_init+0x1c>
 8016dde:	46a6      	mov	lr, r4
 8016de0:	7035      	strb	r5, [r6, #0]
 8016de2:	f106 0c14 	add.w	ip, r6, #20
 8016de6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016dea:	e9c6 5501 	strd	r5, r5, [r6, #4]
 8016dee:	e9c6 5503 	strd	r5, r5, [r6, #12]
 8016df2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016df6:	f8de 3000 	ldr.w	r3, [lr]
 8016dfa:	2010      	movs	r0, #16
 8016dfc:	f8cc 3000 	str.w	r3, [ip]
 8016e00:	6823      	ldr	r3, [r4, #0]
 8016e02:	6921      	ldr	r1, [r4, #16]
 8016e04:	4798      	blx	r3
 8016e06:	6130      	str	r0, [r6, #16]
 8016e08:	b320      	cbz	r0, 8016e54 <rcl_clock_init+0xfc>
 8016e0a:	2200      	movs	r2, #0
 8016e0c:	2300      	movs	r3, #0
 8016e0e:	46ac      	mov	ip, r5
 8016e10:	7205      	strb	r5, [r0, #8]
 8016e12:	e9c0 2300 	strd	r2, r3, [r0]
 8016e16:	4a12      	ldr	r2, [pc, #72]	; (8016e60 <rcl_clock_init+0x108>)
 8016e18:	2301      	movs	r3, #1
 8016e1a:	4660      	mov	r0, ip
 8016e1c:	60f2      	str	r2, [r6, #12]
 8016e1e:	7033      	strb	r3, [r6, #0]
 8016e20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016e22:	2c00      	cmp	r4, #0
 8016e24:	d0a6      	beq.n	8016d74 <rcl_clock_init+0x1c>
 8016e26:	fab6 f386 	clz	r3, r6
 8016e2a:	095b      	lsrs	r3, r3, #5
 8016e2c:	2e00      	cmp	r6, #0
 8016e2e:	d0a1      	beq.n	8016d74 <rcl_clock_init+0x1c>
 8016e30:	6133      	str	r3, [r6, #16]
 8016e32:	469c      	mov	ip, r3
 8016e34:	f106 0514 	add.w	r5, r6, #20
 8016e38:	f8df e028 	ldr.w	lr, [pc, #40]	; 8016e64 <rcl_clock_init+0x10c>
 8016e3c:	2702      	movs	r7, #2
 8016e3e:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8016e42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016e44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8016e46:	6823      	ldr	r3, [r4, #0]
 8016e48:	4660      	mov	r0, ip
 8016e4a:	602b      	str	r3, [r5, #0]
 8016e4c:	f8c6 e00c 	str.w	lr, [r6, #12]
 8016e50:	7037      	strb	r7, [r6, #0]
 8016e52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016e54:	f04f 0c0a 	mov.w	ip, #10
 8016e58:	e78e      	b.n	8016d78 <rcl_clock_init+0x20>
 8016e5a:	bf00      	nop
 8016e5c:	08016d19 	.word	0x08016d19
 8016e60:	08016d21 	.word	0x08016d21
 8016e64:	08016d11 	.word	0x08016d11

08016e68 <rcl_clock_get_now>:
 8016e68:	b140      	cbz	r0, 8016e7c <rcl_clock_get_now+0x14>
 8016e6a:	b139      	cbz	r1, 8016e7c <rcl_clock_get_now+0x14>
 8016e6c:	7803      	ldrb	r3, [r0, #0]
 8016e6e:	b11b      	cbz	r3, 8016e78 <rcl_clock_get_now+0x10>
 8016e70:	68c3      	ldr	r3, [r0, #12]
 8016e72:	b10b      	cbz	r3, 8016e78 <rcl_clock_get_now+0x10>
 8016e74:	6900      	ldr	r0, [r0, #16]
 8016e76:	4718      	bx	r3
 8016e78:	2001      	movs	r0, #1
 8016e7a:	4770      	bx	lr
 8016e7c:	200b      	movs	r0, #11
 8016e7e:	4770      	bx	lr

08016e80 <rcl_clock_add_jump_callback>:
 8016e80:	b082      	sub	sp, #8
 8016e82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e86:	a906      	add	r1, sp, #24
 8016e88:	e9dd 560c 	ldrd	r5, r6, [sp, #48]	; 0x30
 8016e8c:	e881 000c 	stmia.w	r1, {r2, r3}
 8016e90:	b330      	cbz	r0, 8016ee0 <rcl_clock_add_jump_callback+0x60>
 8016e92:	4604      	mov	r4, r0
 8016e94:	3014      	adds	r0, #20
 8016e96:	f7f7 fecb 	bl	800ec30 <rcutils_allocator_is_valid>
 8016e9a:	b30d      	cbz	r5, 8016ee0 <rcl_clock_add_jump_callback+0x60>
 8016e9c:	f080 0301 	eor.w	r3, r0, #1
 8016ea0:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8016ea4:	d11c      	bne.n	8016ee0 <rcl_clock_add_jump_callback+0x60>
 8016ea6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016ea8:	2a00      	cmp	r2, #0
 8016eaa:	db19      	blt.n	8016ee0 <rcl_clock_add_jump_callback+0x60>
 8016eac:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8016eb0:	2901      	cmp	r1, #1
 8016eb2:	f172 0200 	sbcs.w	r2, r2, #0
 8016eb6:	da13      	bge.n	8016ee0 <rcl_clock_add_jump_callback+0x60>
 8016eb8:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 8016ebc:	2f00      	cmp	r7, #0
 8016ebe:	d040      	beq.n	8016f42 <rcl_clock_add_jump_callback+0xc2>
 8016ec0:	4602      	mov	r2, r0
 8016ec2:	e003      	b.n	8016ecc <rcl_clock_add_jump_callback+0x4c>
 8016ec4:	42bb      	cmp	r3, r7
 8016ec6:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8016eca:	d010      	beq.n	8016eee <rcl_clock_add_jump_callback+0x6e>
 8016ecc:	6811      	ldr	r1, [r2, #0]
 8016ece:	3301      	adds	r3, #1
 8016ed0:	42a9      	cmp	r1, r5
 8016ed2:	d1f7      	bne.n	8016ec4 <rcl_clock_add_jump_callback+0x44>
 8016ed4:	6a11      	ldr	r1, [r2, #32]
 8016ed6:	42b1      	cmp	r1, r6
 8016ed8:	d1f4      	bne.n	8016ec4 <rcl_clock_add_jump_callback+0x44>
 8016eda:	f04f 0e01 	mov.w	lr, #1
 8016ede:	e001      	b.n	8016ee4 <rcl_clock_add_jump_callback+0x64>
 8016ee0:	f04f 0e0b 	mov.w	lr, #11
 8016ee4:	4670      	mov	r0, lr
 8016ee6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016eea:	b002      	add	sp, #8
 8016eec:	4770      	bx	lr
 8016eee:	3301      	adds	r3, #1
 8016ef0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8016ef4:	00d9      	lsls	r1, r3, #3
 8016ef6:	69e3      	ldr	r3, [r4, #28]
 8016ef8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8016efa:	4798      	blx	r3
 8016efc:	b1f0      	cbz	r0, 8016f3c <rcl_clock_add_jump_callback+0xbc>
 8016efe:	68a3      	ldr	r3, [r4, #8]
 8016f00:	f10d 0c18 	add.w	ip, sp, #24
 8016f04:	6060      	str	r0, [r4, #4]
 8016f06:	f04f 0e00 	mov.w	lr, #0
 8016f0a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8016f0e:	f103 0801 	add.w	r8, r3, #1
 8016f12:	f840 5032 	str.w	r5, [r0, r2, lsl #3]
 8016f16:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 8016f1a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016f1e:	f105 0708 	add.w	r7, r5, #8
 8016f22:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8016f24:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8016f28:	e887 0003 	stmia.w	r7, {r0, r1}
 8016f2c:	4670      	mov	r0, lr
 8016f2e:	622e      	str	r6, [r5, #32]
 8016f30:	f8c4 8008 	str.w	r8, [r4, #8]
 8016f34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016f38:	b002      	add	sp, #8
 8016f3a:	4770      	bx	lr
 8016f3c:	f04f 0e0a 	mov.w	lr, #10
 8016f40:	e7d0      	b.n	8016ee4 <rcl_clock_add_jump_callback+0x64>
 8016f42:	2128      	movs	r1, #40	; 0x28
 8016f44:	e7d7      	b.n	8016ef6 <rcl_clock_add_jump_callback+0x76>
 8016f46:	bf00      	nop

08016f48 <rcl_clock_remove_jump_callback>:
 8016f48:	2800      	cmp	r0, #0
 8016f4a:	d05f      	beq.n	801700c <rcl_clock_remove_jump_callback+0xc4>
 8016f4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016f50:	4605      	mov	r5, r0
 8016f52:	3014      	adds	r0, #20
 8016f54:	460f      	mov	r7, r1
 8016f56:	4692      	mov	sl, r2
 8016f58:	f7f7 fe6a 	bl	800ec30 <rcutils_allocator_is_valid>
 8016f5c:	f080 0001 	eor.w	r0, r0, #1
 8016f60:	b2c0      	uxtb	r0, r0
 8016f62:	2800      	cmp	r0, #0
 8016f64:	d13f      	bne.n	8016fe6 <rcl_clock_remove_jump_callback+0x9e>
 8016f66:	2f00      	cmp	r7, #0
 8016f68:	d03d      	beq.n	8016fe6 <rcl_clock_remove_jump_callback+0x9e>
 8016f6a:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8016f6e:	f1b8 0f00 	cmp.w	r8, #0
 8016f72:	d00c      	beq.n	8016f8e <rcl_clock_remove_jump_callback+0x46>
 8016f74:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8016f78:	eb08 0688 	add.w	r6, r8, r8, lsl #2
 8016f7c:	464c      	mov	r4, r9
 8016f7e:	eb09 06c6 	add.w	r6, r9, r6, lsl #3
 8016f82:	6823      	ldr	r3, [r4, #0]
 8016f84:	42bb      	cmp	r3, r7
 8016f86:	d005      	beq.n	8016f94 <rcl_clock_remove_jump_callback+0x4c>
 8016f88:	3428      	adds	r4, #40	; 0x28
 8016f8a:	42a6      	cmp	r6, r4
 8016f8c:	d1f9      	bne.n	8016f82 <rcl_clock_remove_jump_callback+0x3a>
 8016f8e:	2001      	movs	r0, #1
 8016f90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016f94:	6a23      	ldr	r3, [r4, #32]
 8016f96:	3428      	adds	r4, #40	; 0x28
 8016f98:	42a6      	cmp	r6, r4
 8016f9a:	d02f      	beq.n	8016ffc <rcl_clock_remove_jump_callback+0xb4>
 8016f9c:	4553      	cmp	r3, sl
 8016f9e:	d1f0      	bne.n	8016f82 <rcl_clock_remove_jump_callback+0x3a>
 8016fa0:	46a6      	mov	lr, r4
 8016fa2:	f1a4 0c28 	sub.w	ip, r4, #40	; 0x28
 8016fa6:	3428      	adds	r4, #40	; 0x28
 8016fa8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016fac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016fb0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016fb4:	42a6      	cmp	r6, r4
 8016fb6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016fba:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8016fbe:	e88c 0003 	stmia.w	ip, {r0, r1}
 8016fc2:	d1ed      	bne.n	8016fa0 <rcl_clock_remove_jump_callback+0x58>
 8016fc4:	f108 34ff 	add.w	r4, r8, #4294967295	; 0xffffffff
 8016fc8:	60ac      	str	r4, [r5, #8]
 8016fca:	b17c      	cbz	r4, 8016fec <rcl_clock_remove_jump_callback+0xa4>
 8016fcc:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8016fd0:	69eb      	ldr	r3, [r5, #28]
 8016fd2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8016fd4:	4648      	mov	r0, r9
 8016fd6:	00e1      	lsls	r1, r4, #3
 8016fd8:	4798      	blx	r3
 8016fda:	4603      	mov	r3, r0
 8016fdc:	b1c0      	cbz	r0, 8017010 <rcl_clock_remove_jump_callback+0xc8>
 8016fde:	2000      	movs	r0, #0
 8016fe0:	606b      	str	r3, [r5, #4]
 8016fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016fe6:	200b      	movs	r0, #11
 8016fe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016fec:	4648      	mov	r0, r9
 8016fee:	69ab      	ldr	r3, [r5, #24]
 8016ff0:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8016ff2:	4798      	blx	r3
 8016ff4:	4620      	mov	r0, r4
 8016ff6:	606c      	str	r4, [r5, #4]
 8016ff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016ffc:	4553      	cmp	r3, sl
 8016ffe:	d1c6      	bne.n	8016f8e <rcl_clock_remove_jump_callback+0x46>
 8017000:	f108 34ff 	add.w	r4, r8, #4294967295	; 0xffffffff
 8017004:	60ac      	str	r4, [r5, #8]
 8017006:	2c00      	cmp	r4, #0
 8017008:	d1e0      	bne.n	8016fcc <rcl_clock_remove_jump_callback+0x84>
 801700a:	e7ef      	b.n	8016fec <rcl_clock_remove_jump_callback+0xa4>
 801700c:	200b      	movs	r0, #11
 801700e:	4770      	bx	lr
 8017010:	200a      	movs	r0, #10
 8017012:	e7e9      	b.n	8016fe8 <rcl_clock_remove_jump_callback+0xa0>

08017014 <_rcl_timer_time_jump>:
 8017014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017018:	4605      	mov	r5, r0
 801701a:	b084      	sub	sp, #16
 801701c:	4614      	mov	r4, r2
 801701e:	b131      	cbz	r1, 801702e <_rcl_timer_time_jump+0x1a>
 8017020:	7803      	ldrb	r3, [r0, #0]
 8017022:	3b02      	subs	r3, #2
 8017024:	2b01      	cmp	r3, #1
 8017026:	d93f      	bls.n	80170a8 <_rcl_timer_time_jump+0x94>
 8017028:	b004      	add	sp, #16
 801702a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801702e:	6813      	ldr	r3, [r2, #0]
 8017030:	a902      	add	r1, sp, #8
 8017032:	6818      	ldr	r0, [r3, #0]
 8017034:	f7ff ff18 	bl	8016e68 <rcl_clock_get_now>
 8017038:	2800      	cmp	r0, #0
 801703a:	d1f5      	bne.n	8017028 <_rcl_timer_time_jump+0x14>
 801703c:	6820      	ldr	r0, [r4, #0]
 801703e:	2105      	movs	r1, #5
 8017040:	3020      	adds	r0, #32
 8017042:	f001 fe11 	bl	8018c68 <__atomic_load_8>
 8017046:	6823      	ldr	r3, [r4, #0]
 8017048:	4681      	mov	r9, r0
 801704a:	4688      	mov	r8, r1
 801704c:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8017050:	2105      	movs	r1, #5
 8017052:	f001 fe09 	bl	8018c68 <__atomic_load_8>
 8017056:	4607      	mov	r7, r0
 8017058:	6820      	ldr	r0, [r4, #0]
 801705a:	460e      	mov	r6, r1
 801705c:	2105      	movs	r1, #5
 801705e:	3018      	adds	r0, #24
 8017060:	f001 fe02 	bl	8018c68 <__atomic_load_8>
 8017064:	782b      	ldrb	r3, [r5, #0]
 8017066:	4682      	mov	sl, r0
 8017068:	460d      	mov	r5, r1
 801706a:	3b02      	subs	r3, #2
 801706c:	9a02      	ldr	r2, [sp, #8]
 801706e:	2b01      	cmp	r3, #1
 8017070:	9b03      	ldr	r3, [sp, #12]
 8017072:	d937      	bls.n	80170e4 <_rcl_timer_time_jump+0xd0>
 8017074:	42ba      	cmp	r2, r7
 8017076:	eb73 0106 	sbcs.w	r1, r3, r6
 801707a:	da60      	bge.n	801713e <_rcl_timer_time_jump+0x12a>
 801707c:	454a      	cmp	r2, r9
 801707e:	eb73 0108 	sbcs.w	r1, r3, r8
 8017082:	dad1      	bge.n	8017028 <_rcl_timer_time_jump+0x14>
 8017084:	eb1a 0202 	adds.w	r2, sl, r2
 8017088:	6820      	ldr	r0, [r4, #0]
 801708a:	eb43 0305 	adc.w	r3, r3, r5
 801708e:	2505      	movs	r5, #5
 8017090:	3028      	adds	r0, #40	; 0x28
 8017092:	9500      	str	r5, [sp, #0]
 8017094:	f001 fe1e 	bl	8018cd4 <__atomic_store_8>
 8017098:	6820      	ldr	r0, [r4, #0]
 801709a:	9500      	str	r5, [sp, #0]
 801709c:	3020      	adds	r0, #32
 801709e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80170a2:	f001 fe17 	bl	8018cd4 <__atomic_store_8>
 80170a6:	e7bf      	b.n	8017028 <_rcl_timer_time_jump+0x14>
 80170a8:	6813      	ldr	r3, [r2, #0]
 80170aa:	a902      	add	r1, sp, #8
 80170ac:	6818      	ldr	r0, [r3, #0]
 80170ae:	f7ff fedb 	bl	8016e68 <rcl_clock_get_now>
 80170b2:	2800      	cmp	r0, #0
 80170b4:	d1b8      	bne.n	8017028 <_rcl_timer_time_jump+0x14>
 80170b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80170ba:	4313      	orrs	r3, r2
 80170bc:	d0b4      	beq.n	8017028 <_rcl_timer_time_jump+0x14>
 80170be:	6820      	ldr	r0, [r4, #0]
 80170c0:	2105      	movs	r1, #5
 80170c2:	3028      	adds	r0, #40	; 0x28
 80170c4:	f001 fdd0 	bl	8018c68 <__atomic_load_8>
 80170c8:	9d02      	ldr	r5, [sp, #8]
 80170ca:	4602      	mov	r2, r0
 80170cc:	9b03      	ldr	r3, [sp, #12]
 80170ce:	6820      	ldr	r0, [r4, #0]
 80170d0:	1b52      	subs	r2, r2, r5
 80170d2:	f100 0030 	add.w	r0, r0, #48	; 0x30
 80170d6:	eb61 0303 	sbc.w	r3, r1, r3
 80170da:	2105      	movs	r1, #5
 80170dc:	9100      	str	r1, [sp, #0]
 80170de:	f001 fdf9 	bl	8018cd4 <__atomic_store_8>
 80170e2:	e7a1      	b.n	8017028 <_rcl_timer_time_jump+0x14>
 80170e4:	4313      	orrs	r3, r2
 80170e6:	d09f      	beq.n	8017028 <_rcl_timer_time_jump+0x14>
 80170e8:	6820      	ldr	r0, [r4, #0]
 80170ea:	f04f 0805 	mov.w	r8, #5
 80170ee:	2300      	movs	r3, #0
 80170f0:	2200      	movs	r2, #0
 80170f2:	3030      	adds	r0, #48	; 0x30
 80170f4:	f8cd 8000 	str.w	r8, [sp]
 80170f8:	f001 fe22 	bl	8018d40 <__atomic_exchange_8>
 80170fc:	ea51 0300 	orrs.w	r3, r1, r0
 8017100:	4606      	mov	r6, r0
 8017102:	460f      	mov	r7, r1
 8017104:	d090      	beq.n	8017028 <_rcl_timer_time_jump+0x14>
 8017106:	9a02      	ldr	r2, [sp, #8]
 8017108:	9b03      	ldr	r3, [sp, #12]
 801710a:	1a12      	subs	r2, r2, r0
 801710c:	f8cd 8000 	str.w	r8, [sp]
 8017110:	6820      	ldr	r0, [r4, #0]
 8017112:	eb63 0301 	sbc.w	r3, r3, r1
 8017116:	eb12 020a 	adds.w	r2, r2, sl
 801711a:	f100 0028 	add.w	r0, r0, #40	; 0x28
 801711e:	eb43 0305 	adc.w	r3, r3, r5
 8017122:	f001 fdd7 	bl	8018cd4 <__atomic_store_8>
 8017126:	f8cd 8000 	str.w	r8, [sp]
 801712a:	6820      	ldr	r0, [r4, #0]
 801712c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017130:	3020      	adds	r0, #32
 8017132:	1b92      	subs	r2, r2, r6
 8017134:	eb63 0307 	sbc.w	r3, r3, r7
 8017138:	f001 fdcc 	bl	8018cd4 <__atomic_store_8>
 801713c:	e774      	b.n	8017028 <_rcl_timer_time_jump+0x14>
 801713e:	6820      	ldr	r0, [r4, #0]
 8017140:	3008      	adds	r0, #8
 8017142:	f005 fd77 	bl	801cc34 <rcl_trigger_guard_condition>
 8017146:	e76f      	b.n	8017028 <_rcl_timer_time_jump+0x14>

08017148 <rcl_get_zero_initialized_timer>:
 8017148:	4b01      	ldr	r3, [pc, #4]	; (8017150 <rcl_get_zero_initialized_timer+0x8>)
 801714a:	6818      	ldr	r0, [r3, #0]
 801714c:	4770      	bx	lr
 801714e:	bf00      	nop
 8017150:	08020298 	.word	0x08020298

08017154 <rcl_timer_init>:
 8017154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017158:	b0af      	sub	sp, #188	; 0xbc
 801715a:	460d      	mov	r5, r1
 801715c:	4604      	mov	r4, r0
 801715e:	4692      	mov	sl, r2
 8017160:	a83b      	add	r0, sp, #236	; 0xec
 8017162:	e9dd 8938 	ldrd	r8, r9, [sp, #224]	; 0xe0
 8017166:	f7f7 fd63 	bl	800ec30 <rcutils_allocator_is_valid>
 801716a:	fab5 f385 	clz	r3, r5
 801716e:	095b      	lsrs	r3, r3, #5
 8017170:	ea43 73d9 	orr.w	r3, r3, r9, lsr #31
 8017174:	2c00      	cmp	r4, #0
 8017176:	bf08      	it	eq
 8017178:	f043 0301 	orreq.w	r3, r3, #1
 801717c:	2b00      	cmp	r3, #0
 801717e:	d167      	bne.n	8017250 <rcl_timer_init+0xfc>
 8017180:	f080 0001 	eor.w	r0, r0, #1
 8017184:	b2c0      	uxtb	r0, r0
 8017186:	2800      	cmp	r0, #0
 8017188:	d162      	bne.n	8017250 <rcl_timer_init+0xfc>
 801718a:	6823      	ldr	r3, [r4, #0]
 801718c:	b123      	cbz	r3, 8017198 <rcl_timer_init+0x44>
 801718e:	2664      	movs	r6, #100	; 0x64
 8017190:	4630      	mov	r0, r6
 8017192:	b02f      	add	sp, #188	; 0xbc
 8017194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017198:	a908      	add	r1, sp, #32
 801719a:	4628      	mov	r0, r5
 801719c:	f7ff fe64 	bl	8016e68 <rcl_clock_get_now>
 80171a0:	4606      	mov	r6, r0
 80171a2:	2800      	cmp	r0, #0
 80171a4:	d1f4      	bne.n	8017190 <rcl_timer_init+0x3c>
 80171a6:	f10d 0b18 	add.w	fp, sp, #24
 80171aa:	ae0b      	add	r6, sp, #44	; 0x2c
 80171ac:	af18      	add	r7, sp, #96	; 0x60
 80171ae:	4658      	mov	r0, fp
 80171b0:	e9cd 5a16 	strd	r5, sl, [sp, #88]	; 0x58
 80171b4:	f005 fc48 	bl	801ca48 <rcl_get_zero_initialized_guard_condition>
 80171b8:	e89b 0003 	ldmia.w	fp, {r0, r1}
 80171bc:	e887 0003 	stmia.w	r7, {r0, r1}
 80171c0:	4630      	mov	r0, r6
 80171c2:	f005 fd1b 	bl	801cbfc <rcl_guard_condition_get_default_options>
 80171c6:	ab0d      	add	r3, sp, #52	; 0x34
 80171c8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80171cc:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80171d0:	4651      	mov	r1, sl
 80171d2:	4638      	mov	r0, r7
 80171d4:	e896 000c 	ldmia.w	r6, {r2, r3}
 80171d8:	f005 fc40 	bl	801ca5c <rcl_guard_condition_init>
 80171dc:	4606      	mov	r6, r0
 80171de:	2800      	cmp	r0, #0
 80171e0:	d1d6      	bne.n	8017190 <rcl_timer_init+0x3c>
 80171e2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80171e4:	781b      	ldrb	r3, [r3, #0]
 80171e6:	2b01      	cmp	r3, #1
 80171e8:	d037      	beq.n	801725a <rcl_timer_init+0x106>
 80171ea:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 80171ec:	f10d 0cec 	add.w	ip, sp, #236	; 0xec
 80171f0:	f10d 0e94 	add.w	lr, sp, #148	; 0x94
 80171f4:	f04f 0a00 	mov.w	sl, #0
 80171f8:	931a      	str	r3, [sp, #104]	; 0x68
 80171fa:	f8cd a0b0 	str.w	sl, [sp, #176]	; 0xb0
 80171fe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017202:	e9cd 891c 	strd	r8, r9, [sp, #112]	; 0x70
 8017206:	eb12 0008 	adds.w	r0, r2, r8
 801720a:	f04f 0800 	mov.w	r8, #0
 801720e:	eb43 0109 	adc.w	r1, r3, r9
 8017212:	f04f 0900 	mov.w	r9, #0
 8017216:	e9cd 8922 	strd	r8, r9, [sp, #136]	; 0x88
 801721a:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
 801721e:	e9cd 0120 	strd	r0, r1, [sp, #128]	; 0x80
 8017222:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8017226:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801722a:	f8dc 3000 	ldr.w	r3, [ip]
 801722e:	2060      	movs	r0, #96	; 0x60
 8017230:	f88d a090 	strb.w	sl, [sp, #144]	; 0x90
 8017234:	4619      	mov	r1, r3
 8017236:	f8ce 3000 	str.w	r3, [lr]
 801723a:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 801723c:	e9cd aa2a 	strd	sl, sl, [sp, #168]	; 0xa8
 8017240:	4798      	blx	r3
 8017242:	6020      	str	r0, [r4, #0]
 8017244:	b358      	cbz	r0, 801729e <rcl_timer_init+0x14a>
 8017246:	2260      	movs	r2, #96	; 0x60
 8017248:	a916      	add	r1, sp, #88	; 0x58
 801724a:	f006 fdd4 	bl	801ddf6 <memcpy>
 801724e:	e79f      	b.n	8017190 <rcl_timer_init+0x3c>
 8017250:	260b      	movs	r6, #11
 8017252:	4630      	mov	r0, r6
 8017254:	b02f      	add	sp, #188	; 0xbc
 8017256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801725a:	2001      	movs	r0, #1
 801725c:	2100      	movs	r1, #0
 801725e:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 8017262:	ab12      	add	r3, sp, #72	; 0x48
 8017264:	4a13      	ldr	r2, [pc, #76]	; (80172b4 <rcl_timer_init+0x160>)
 8017266:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
 801726a:	9405      	str	r4, [sp, #20]
 801726c:	9204      	str	r2, [sp, #16]
 801726e:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8017272:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017276:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801727a:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
 801727e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017280:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8017284:	4628      	mov	r0, r5
 8017286:	e89c 000c 	ldmia.w	ip, {r2, r3}
 801728a:	f7ff fdf9 	bl	8016e80 <rcl_clock_add_jump_callback>
 801728e:	4603      	mov	r3, r0
 8017290:	2800      	cmp	r0, #0
 8017292:	d0aa      	beq.n	80171ea <rcl_timer_init+0x96>
 8017294:	4638      	mov	r0, r7
 8017296:	461e      	mov	r6, r3
 8017298:	f005 fc8a 	bl	801cbb0 <rcl_guard_condition_fini>
 801729c:	e778      	b.n	8017190 <rcl_timer_init+0x3c>
 801729e:	4638      	mov	r0, r7
 80172a0:	260a      	movs	r6, #10
 80172a2:	f005 fc85 	bl	801cbb0 <rcl_guard_condition_fini>
 80172a6:	4622      	mov	r2, r4
 80172a8:	4902      	ldr	r1, [pc, #8]	; (80172b4 <rcl_timer_init+0x160>)
 80172aa:	4628      	mov	r0, r5
 80172ac:	f7ff fe4c 	bl	8016f48 <rcl_clock_remove_jump_callback>
 80172b0:	e76e      	b.n	8017190 <rcl_timer_init+0x3c>
 80172b2:	bf00      	nop
 80172b4:	08017015 	.word	0x08017015

080172b8 <rcl_timer_call>:
 80172b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172bc:	b087      	sub	sp, #28
 80172be:	2800      	cmp	r0, #0
 80172c0:	d06c      	beq.n	801739c <rcl_timer_call+0xe4>
 80172c2:	6803      	ldr	r3, [r0, #0]
 80172c4:	4604      	mov	r4, r0
 80172c6:	2b00      	cmp	r3, #0
 80172c8:	d062      	beq.n	8017390 <rcl_timer_call+0xd8>
 80172ca:	f3bf 8f5b 	dmb	ish
 80172ce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80172d2:	f3bf 8f5b 	dmb	ish
 80172d6:	2b00      	cmp	r3, #0
 80172d8:	d14f      	bne.n	801737a <rcl_timer_call+0xc2>
 80172da:	6803      	ldr	r3, [r0, #0]
 80172dc:	a904      	add	r1, sp, #16
 80172de:	6818      	ldr	r0, [r3, #0]
 80172e0:	f7ff fdc2 	bl	8016e68 <rcl_clock_get_now>
 80172e4:	4605      	mov	r5, r0
 80172e6:	2800      	cmp	r0, #0
 80172e8:	d149      	bne.n	801737e <rcl_timer_call+0xc6>
 80172ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80172ee:	2b00      	cmp	r3, #0
 80172f0:	db49      	blt.n	8017386 <rcl_timer_call+0xce>
 80172f2:	2605      	movs	r6, #5
 80172f4:	6820      	ldr	r0, [r4, #0]
 80172f6:	9600      	str	r6, [sp, #0]
 80172f8:	3020      	adds	r0, #32
 80172fa:	f001 fd21 	bl	8018d40 <__atomic_exchange_8>
 80172fe:	6823      	ldr	r3, [r4, #0]
 8017300:	4680      	mov	r8, r0
 8017302:	f3bf 8f5b 	dmb	ish
 8017306:	f8d3 b010 	ldr.w	fp, [r3, #16]
 801730a:	f3bf 8f5b 	dmb	ish
 801730e:	6820      	ldr	r0, [r4, #0]
 8017310:	4689      	mov	r9, r1
 8017312:	4631      	mov	r1, r6
 8017314:	3028      	adds	r0, #40	; 0x28
 8017316:	f001 fca7 	bl	8018c68 <__atomic_load_8>
 801731a:	460f      	mov	r7, r1
 801731c:	4631      	mov	r1, r6
 801731e:	4606      	mov	r6, r0
 8017320:	6820      	ldr	r0, [r4, #0]
 8017322:	3018      	adds	r0, #24
 8017324:	f001 fca0 	bl	8018c68 <__atomic_load_8>
 8017328:	4602      	mov	r2, r0
 801732a:	9804      	ldr	r0, [sp, #16]
 801732c:	460b      	mov	r3, r1
 801732e:	18b6      	adds	r6, r6, r2
 8017330:	f8dd c014 	ldr.w	ip, [sp, #20]
 8017334:	4692      	mov	sl, r2
 8017336:	eb47 0701 	adc.w	r7, r7, r1
 801733a:	4286      	cmp	r6, r0
 801733c:	eb77 010c 	sbcs.w	r1, r7, ip
 8017340:	da04      	bge.n	801734c <rcl_timer_call+0x94>
 8017342:	ea53 0102 	orrs.w	r1, r3, r2
 8017346:	d12e      	bne.n	80173a6 <rcl_timer_call+0xee>
 8017348:	4606      	mov	r6, r0
 801734a:	4667      	mov	r7, ip
 801734c:	6820      	ldr	r0, [r4, #0]
 801734e:	2105      	movs	r1, #5
 8017350:	4632      	mov	r2, r6
 8017352:	463b      	mov	r3, r7
 8017354:	3028      	adds	r0, #40	; 0x28
 8017356:	9100      	str	r1, [sp, #0]
 8017358:	f001 fcbc 	bl	8018cd4 <__atomic_store_8>
 801735c:	f1bb 0f00 	cmp.w	fp, #0
 8017360:	d00d      	beq.n	801737e <rcl_timer_call+0xc6>
 8017362:	9a04      	ldr	r2, [sp, #16]
 8017364:	4620      	mov	r0, r4
 8017366:	9b05      	ldr	r3, [sp, #20]
 8017368:	ebb2 0208 	subs.w	r2, r2, r8
 801736c:	eb63 0309 	sbc.w	r3, r3, r9
 8017370:	47d8      	blx	fp
 8017372:	4628      	mov	r0, r5
 8017374:	b007      	add	sp, #28
 8017376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801737a:	f240 3521 	movw	r5, #801	; 0x321
 801737e:	4628      	mov	r0, r5
 8017380:	b007      	add	sp, #28
 8017382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017386:	2501      	movs	r5, #1
 8017388:	4628      	mov	r0, r5
 801738a:	b007      	add	sp, #28
 801738c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017390:	f44f 7548 	mov.w	r5, #800	; 0x320
 8017394:	4628      	mov	r0, r5
 8017396:	b007      	add	sp, #28
 8017398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801739c:	250b      	movs	r5, #11
 801739e:	4628      	mov	r0, r5
 80173a0:	b007      	add	sp, #28
 80173a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80173a6:	1b80      	subs	r0, r0, r6
 80173a8:	eb6c 0107 	sbc.w	r1, ip, r7
 80173ac:	3801      	subs	r0, #1
 80173ae:	f161 0100 	sbc.w	r1, r1, #0
 80173b2:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80173b6:	f7e8 ffab 	bl	8000310 <__aeabi_ldivmod>
 80173ba:	9b02      	ldr	r3, [sp, #8]
 80173bc:	3001      	adds	r0, #1
 80173be:	f141 0100 	adc.w	r1, r1, #0
 80173c2:	fb00 f303 	mul.w	r3, r0, r3
 80173c6:	fb01 330a 	mla	r3, r1, sl, r3
 80173ca:	fba0 0a0a 	umull	r0, sl, r0, sl
 80173ce:	1986      	adds	r6, r0, r6
 80173d0:	4453      	add	r3, sl
 80173d2:	eb43 0707 	adc.w	r7, r3, r7
 80173d6:	e7b9      	b.n	801734c <rcl_timer_call+0x94>

080173d8 <rcl_timer_is_ready>:
 80173d8:	b570      	push	{r4, r5, r6, lr}
 80173da:	b082      	sub	sp, #8
 80173dc:	b380      	cbz	r0, 8017440 <rcl_timer_is_ready+0x68>
 80173de:	6803      	ldr	r3, [r0, #0]
 80173e0:	4604      	mov	r4, r0
 80173e2:	b38b      	cbz	r3, 8017448 <rcl_timer_is_ready+0x70>
 80173e4:	460d      	mov	r5, r1
 80173e6:	b359      	cbz	r1, 8017440 <rcl_timer_is_ready+0x68>
 80173e8:	f3bf 8f5b 	dmb	ish
 80173ec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80173f0:	f3bf 8f5b 	dmb	ish
 80173f4:	b953      	cbnz	r3, 801740c <rcl_timer_is_ready+0x34>
 80173f6:	6803      	ldr	r3, [r0, #0]
 80173f8:	4669      	mov	r1, sp
 80173fa:	6818      	ldr	r0, [r3, #0]
 80173fc:	f7ff fd34 	bl	8016e68 <rcl_clock_get_now>
 8017400:	4606      	mov	r6, r0
 8017402:	b148      	cbz	r0, 8017418 <rcl_timer_is_ready+0x40>
 8017404:	f240 3321 	movw	r3, #801	; 0x321
 8017408:	4298      	cmp	r0, r3
 801740a:	d102      	bne.n	8017412 <rcl_timer_is_ready+0x3a>
 801740c:	2300      	movs	r3, #0
 801740e:	461e      	mov	r6, r3
 8017410:	702b      	strb	r3, [r5, #0]
 8017412:	4630      	mov	r0, r6
 8017414:	b002      	add	sp, #8
 8017416:	bd70      	pop	{r4, r5, r6, pc}
 8017418:	6820      	ldr	r0, [r4, #0]
 801741a:	2105      	movs	r1, #5
 801741c:	3028      	adds	r0, #40	; 0x28
 801741e:	f001 fc23 	bl	8018c68 <__atomic_load_8>
 8017422:	9b00      	ldr	r3, [sp, #0]
 8017424:	1ac0      	subs	r0, r0, r3
 8017426:	9b01      	ldr	r3, [sp, #4]
 8017428:	eb61 0103 	sbc.w	r1, r1, r3
 801742c:	2801      	cmp	r0, #1
 801742e:	4630      	mov	r0, r6
 8017430:	f171 0300 	sbcs.w	r3, r1, #0
 8017434:	bfb4      	ite	lt
 8017436:	2301      	movlt	r3, #1
 8017438:	2300      	movge	r3, #0
 801743a:	702b      	strb	r3, [r5, #0]
 801743c:	b002      	add	sp, #8
 801743e:	bd70      	pop	{r4, r5, r6, pc}
 8017440:	260b      	movs	r6, #11
 8017442:	4630      	mov	r0, r6
 8017444:	b002      	add	sp, #8
 8017446:	bd70      	pop	{r4, r5, r6, pc}
 8017448:	f44f 7648 	mov.w	r6, #800	; 0x320
 801744c:	e7e1      	b.n	8017412 <rcl_timer_is_ready+0x3a>
 801744e:	bf00      	nop

08017450 <rcl_timer_get_time_until_next_call>:
 8017450:	b570      	push	{r4, r5, r6, lr}
 8017452:	b082      	sub	sp, #8
 8017454:	b330      	cbz	r0, 80174a4 <rcl_timer_get_time_until_next_call+0x54>
 8017456:	6803      	ldr	r3, [r0, #0]
 8017458:	4604      	mov	r4, r0
 801745a:	b33b      	cbz	r3, 80174ac <rcl_timer_get_time_until_next_call+0x5c>
 801745c:	460d      	mov	r5, r1
 801745e:	b309      	cbz	r1, 80174a4 <rcl_timer_get_time_until_next_call+0x54>
 8017460:	f3bf 8f5b 	dmb	ish
 8017464:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8017468:	f3bf 8f5b 	dmb	ish
 801746c:	b9ab      	cbnz	r3, 801749a <rcl_timer_get_time_until_next_call+0x4a>
 801746e:	6803      	ldr	r3, [r0, #0]
 8017470:	4669      	mov	r1, sp
 8017472:	6818      	ldr	r0, [r3, #0]
 8017474:	f7ff fcf8 	bl	8016e68 <rcl_clock_get_now>
 8017478:	4606      	mov	r6, r0
 801747a:	b958      	cbnz	r0, 8017494 <rcl_timer_get_time_until_next_call+0x44>
 801747c:	6820      	ldr	r0, [r4, #0]
 801747e:	2105      	movs	r1, #5
 8017480:	3028      	adds	r0, #40	; 0x28
 8017482:	f001 fbf1 	bl	8018c68 <__atomic_load_8>
 8017486:	9b00      	ldr	r3, [sp, #0]
 8017488:	1ac0      	subs	r0, r0, r3
 801748a:	9b01      	ldr	r3, [sp, #4]
 801748c:	eb61 0103 	sbc.w	r1, r1, r3
 8017490:	6028      	str	r0, [r5, #0]
 8017492:	6069      	str	r1, [r5, #4]
 8017494:	4630      	mov	r0, r6
 8017496:	b002      	add	sp, #8
 8017498:	bd70      	pop	{r4, r5, r6, pc}
 801749a:	f240 3621 	movw	r6, #801	; 0x321
 801749e:	4630      	mov	r0, r6
 80174a0:	b002      	add	sp, #8
 80174a2:	bd70      	pop	{r4, r5, r6, pc}
 80174a4:	260b      	movs	r6, #11
 80174a6:	4630      	mov	r0, r6
 80174a8:	b002      	add	sp, #8
 80174aa:	bd70      	pop	{r4, r5, r6, pc}
 80174ac:	f44f 7648 	mov.w	r6, #800	; 0x320
 80174b0:	e7f0      	b.n	8017494 <rcl_timer_get_time_until_next_call+0x44>
 80174b2:	bf00      	nop

080174b4 <rcl_timer_get_guard_condition>:
 80174b4:	b130      	cbz	r0, 80174c4 <rcl_timer_get_guard_condition+0x10>
 80174b6:	6800      	ldr	r0, [r0, #0]
 80174b8:	b120      	cbz	r0, 80174c4 <rcl_timer_get_guard_condition+0x10>
 80174ba:	68c3      	ldr	r3, [r0, #12]
 80174bc:	b10b      	cbz	r3, 80174c2 <rcl_timer_get_guard_condition+0xe>
 80174be:	3008      	adds	r0, #8
 80174c0:	4770      	bx	lr
 80174c2:	4618      	mov	r0, r3
 80174c4:	4770      	bx	lr
 80174c6:	bf00      	nop

080174c8 <rcl_validate_enclave_name_with_size>:
 80174c8:	2800      	cmp	r0, #0
 80174ca:	d049      	beq.n	8017560 <rcl_validate_enclave_name_with_size+0x98>
 80174cc:	b570      	push	{r4, r5, r6, lr}
 80174ce:	4615      	mov	r5, r2
 80174d0:	b0c2      	sub	sp, #264	; 0x108
 80174d2:	b19a      	cbz	r2, 80174fc <rcl_validate_enclave_name_with_size+0x34>
 80174d4:	461e      	mov	r6, r3
 80174d6:	466a      	mov	r2, sp
 80174d8:	ab01      	add	r3, sp, #4
 80174da:	460c      	mov	r4, r1
 80174dc:	f002 f870 	bl	80195c0 <rmw_validate_namespace_with_size>
 80174e0:	4684      	mov	ip, r0
 80174e2:	b9b8      	cbnz	r0, 8017514 <rcl_validate_enclave_name_with_size+0x4c>
 80174e4:	9900      	ldr	r1, [sp, #0]
 80174e6:	b171      	cbz	r1, 8017506 <rcl_validate_enclave_name_with_size+0x3e>
 80174e8:	2907      	cmp	r1, #7
 80174ea:	d019      	beq.n	8017520 <rcl_validate_enclave_name_with_size+0x58>
 80174ec:	1e4b      	subs	r3, r1, #1
 80174ee:	2b05      	cmp	r3, #5
 80174f0:	d83a      	bhi.n	8017568 <rcl_validate_enclave_name_with_size+0xa0>
 80174f2:	e8df f003 	tbb	[pc, r3]
 80174f6:	2926      	.short	0x2926
 80174f8:	1d322f2c 	.word	0x1d322f2c
 80174fc:	f04f 0c0b 	mov.w	ip, #11
 8017500:	4660      	mov	r0, ip
 8017502:	b042      	add	sp, #264	; 0x108
 8017504:	bd70      	pop	{r4, r5, r6, pc}
 8017506:	2907      	cmp	r1, #7
 8017508:	d00a      	beq.n	8017520 <rcl_validate_enclave_name_with_size+0x58>
 801750a:	2300      	movs	r3, #0
 801750c:	4660      	mov	r0, ip
 801750e:	602b      	str	r3, [r5, #0]
 8017510:	b042      	add	sp, #264	; 0x108
 8017512:	bd70      	pop	{r4, r5, r6, pc}
 8017514:	f7fe fa4a 	bl	80159ac <rcl_convert_rmw_ret_to_rcl_ret>
 8017518:	4684      	mov	ip, r0
 801751a:	4660      	mov	r0, ip
 801751c:	b042      	add	sp, #264	; 0x108
 801751e:	bd70      	pop	{r4, r5, r6, pc}
 8017520:	2cff      	cmp	r4, #255	; 0xff
 8017522:	d9f2      	bls.n	801750a <rcl_validate_enclave_name_with_size+0x42>
 8017524:	6029      	str	r1, [r5, #0]
 8017526:	2e00      	cmp	r6, #0
 8017528:	d0ea      	beq.n	8017500 <rcl_validate_enclave_name_with_size+0x38>
 801752a:	23fe      	movs	r3, #254	; 0xfe
 801752c:	6033      	str	r3, [r6, #0]
 801752e:	e7e7      	b.n	8017500 <rcl_validate_enclave_name_with_size+0x38>
 8017530:	2306      	movs	r3, #6
 8017532:	602b      	str	r3, [r5, #0]
 8017534:	2e00      	cmp	r6, #0
 8017536:	d0e3      	beq.n	8017500 <rcl_validate_enclave_name_with_size+0x38>
 8017538:	9b01      	ldr	r3, [sp, #4]
 801753a:	4660      	mov	r0, ip
 801753c:	6033      	str	r3, [r6, #0]
 801753e:	b042      	add	sp, #264	; 0x108
 8017540:	bd70      	pop	{r4, r5, r6, pc}
 8017542:	2301      	movs	r3, #1
 8017544:	602b      	str	r3, [r5, #0]
 8017546:	e7f5      	b.n	8017534 <rcl_validate_enclave_name_with_size+0x6c>
 8017548:	2302      	movs	r3, #2
 801754a:	602b      	str	r3, [r5, #0]
 801754c:	e7f2      	b.n	8017534 <rcl_validate_enclave_name_with_size+0x6c>
 801754e:	2303      	movs	r3, #3
 8017550:	602b      	str	r3, [r5, #0]
 8017552:	e7ef      	b.n	8017534 <rcl_validate_enclave_name_with_size+0x6c>
 8017554:	2304      	movs	r3, #4
 8017556:	602b      	str	r3, [r5, #0]
 8017558:	e7ec      	b.n	8017534 <rcl_validate_enclave_name_with_size+0x6c>
 801755a:	2305      	movs	r3, #5
 801755c:	602b      	str	r3, [r5, #0]
 801755e:	e7e9      	b.n	8017534 <rcl_validate_enclave_name_with_size+0x6c>
 8017560:	f04f 0c0b 	mov.w	ip, #11
 8017564:	4660      	mov	r0, ip
 8017566:	4770      	bx	lr
 8017568:	460b      	mov	r3, r1
 801756a:	4a04      	ldr	r2, [pc, #16]	; (801757c <rcl_validate_enclave_name_with_size+0xb4>)
 801756c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8017570:	a802      	add	r0, sp, #8
 8017572:	f001 fd31 	bl	8018fd8 <rcutils_snprintf>
 8017576:	f04f 0c01 	mov.w	ip, #1
 801757a:	e7c1      	b.n	8017500 <rcl_validate_enclave_name_with_size+0x38>
 801757c:	0802029c 	.word	0x0802029c

08017580 <rcl_validate_enclave_name>:
 8017580:	b168      	cbz	r0, 801759e <rcl_validate_enclave_name+0x1e>
 8017582:	b570      	push	{r4, r5, r6, lr}
 8017584:	460d      	mov	r5, r1
 8017586:	4616      	mov	r6, r2
 8017588:	4604      	mov	r4, r0
 801758a:	f7e8 feb9 	bl	8000300 <strlen>
 801758e:	4633      	mov	r3, r6
 8017590:	4601      	mov	r1, r0
 8017592:	462a      	mov	r2, r5
 8017594:	4620      	mov	r0, r4
 8017596:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801759a:	f7ff bf95 	b.w	80174c8 <rcl_validate_enclave_name_with_size>
 801759e:	200b      	movs	r0, #11
 80175a0:	4770      	bx	lr
 80175a2:	bf00      	nop

080175a4 <rcl_get_zero_initialized_wait_set>:
 80175a4:	b510      	push	{r4, lr}
 80175a6:	4c08      	ldr	r4, [pc, #32]	; (80175c8 <rcl_get_zero_initialized_wait_set+0x24>)
 80175a8:	4686      	mov	lr, r0
 80175aa:	4684      	mov	ip, r0
 80175ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80175ae:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80175b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80175b4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80175b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80175ba:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80175be:	6823      	ldr	r3, [r4, #0]
 80175c0:	4670      	mov	r0, lr
 80175c2:	f8cc 3000 	str.w	r3, [ip]
 80175c6:	bd10      	pop	{r4, pc}
 80175c8:	080202fc 	.word	0x080202fc

080175cc <rcl_wait_set_is_valid>:
 80175cc:	b118      	cbz	r0, 80175d6 <rcl_wait_set_is_valid+0xa>
 80175ce:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80175d0:	3800      	subs	r0, #0
 80175d2:	bf18      	it	ne
 80175d4:	2001      	movne	r0, #1
 80175d6:	4770      	bx	lr

080175d8 <rcl_wait_set_fini>:
 80175d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80175dc:	b082      	sub	sp, #8
 80175de:	2800      	cmp	r0, #0
 80175e0:	f000 8095 	beq.w	801770e <rcl_wait_set_fini+0x136>
 80175e4:	6b06      	ldr	r6, [r0, #48]	; 0x30
 80175e6:	4604      	mov	r4, r0
 80175e8:	2e00      	cmp	r6, #0
 80175ea:	f000 808c 	beq.w	8017706 <rcl_wait_set_fini+0x12e>
 80175ee:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 80175f0:	f003 fae0 	bl	801abb4 <rmw_destroy_wait_set>
 80175f4:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80175f6:	1e06      	subs	r6, r0, #0
 80175f8:	bf18      	it	ne
 80175fa:	f44f 7661 	movne.w	r6, #900	; 0x384
 80175fe:	2d00      	cmp	r5, #0
 8017600:	f000 8081 	beq.w	8017706 <rcl_wait_set_fini+0x12e>
 8017604:	2700      	movs	r7, #0
 8017606:	6820      	ldr	r0, [r4, #0]
 8017608:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 801760c:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801760e:	6067      	str	r7, [r4, #4]
 8017610:	602f      	str	r7, [r5, #0]
 8017612:	b120      	cbz	r0, 801761e <rcl_wait_set_fini+0x46>
 8017614:	9101      	str	r1, [sp, #4]
 8017616:	47c0      	blx	r8
 8017618:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801761a:	9901      	ldr	r1, [sp, #4]
 801761c:	6027      	str	r7, [r4, #0]
 801761e:	68a8      	ldr	r0, [r5, #8]
 8017620:	b120      	cbz	r0, 801762c <rcl_wait_set_fini+0x54>
 8017622:	47c0      	blx	r8
 8017624:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8017626:	2300      	movs	r3, #0
 8017628:	e9c5 3301 	strd	r3, r3, [r5, #4]
 801762c:	f04f 0800 	mov.w	r8, #0
 8017630:	68a0      	ldr	r0, [r4, #8]
 8017632:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8017634:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8017636:	f8c4 800c 	str.w	r8, [r4, #12]
 801763a:	f8c5 800c 	str.w	r8, [r5, #12]
 801763e:	b128      	cbz	r0, 801764c <rcl_wait_set_fini+0x74>
 8017640:	47b8      	blx	r7
 8017642:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8017644:	f8c4 8008 	str.w	r8, [r4, #8]
 8017648:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 801764a:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801764c:	f04f 0800 	mov.w	r8, #0
 8017650:	6968      	ldr	r0, [r5, #20]
 8017652:	f8c5 8010 	str.w	r8, [r5, #16]
 8017656:	b128      	cbz	r0, 8017664 <rcl_wait_set_fini+0x8c>
 8017658:	47b8      	blx	r7
 801765a:	f8c5 8014 	str.w	r8, [r5, #20]
 801765e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8017660:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8017662:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8017664:	f04f 0800 	mov.w	r8, #0
 8017668:	6920      	ldr	r0, [r4, #16]
 801766a:	f8c4 8014 	str.w	r8, [r4, #20]
 801766e:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40
 8017672:	b128      	cbz	r0, 8017680 <rcl_wait_set_fini+0xa8>
 8017674:	47b8      	blx	r7
 8017676:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8017678:	f8c4 8010 	str.w	r8, [r4, #16]
 801767c:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 801767e:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8017680:	f04f 0800 	mov.w	r8, #0
 8017684:	69a0      	ldr	r0, [r4, #24]
 8017686:	f8c4 801c 	str.w	r8, [r4, #28]
 801768a:	f8c5 8018 	str.w	r8, [r5, #24]
 801768e:	b128      	cbz	r0, 801769c <rcl_wait_set_fini+0xc4>
 8017690:	9101      	str	r1, [sp, #4]
 8017692:	47b8      	blx	r7
 8017694:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8017696:	9901      	ldr	r1, [sp, #4]
 8017698:	f8c4 8018 	str.w	r8, [r4, #24]
 801769c:	6a28      	ldr	r0, [r5, #32]
 801769e:	b120      	cbz	r0, 80176aa <rcl_wait_set_fini+0xd2>
 80176a0:	47b8      	blx	r7
 80176a2:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80176a4:	2300      	movs	r3, #0
 80176a6:	e9c5 3307 	strd	r3, r3, [r5, #28]
 80176aa:	2700      	movs	r7, #0
 80176ac:	6a20      	ldr	r0, [r4, #32]
 80176ae:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 80176b2:	6da9      	ldr	r1, [r5, #88]	; 0x58
 80176b4:	6267      	str	r7, [r4, #36]	; 0x24
 80176b6:	626f      	str	r7, [r5, #36]	; 0x24
 80176b8:	b120      	cbz	r0, 80176c4 <rcl_wait_set_fini+0xec>
 80176ba:	9101      	str	r1, [sp, #4]
 80176bc:	47c0      	blx	r8
 80176be:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80176c0:	9901      	ldr	r1, [sp, #4]
 80176c2:	6227      	str	r7, [r4, #32]
 80176c4:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80176c6:	b120      	cbz	r0, 80176d2 <rcl_wait_set_fini+0xfa>
 80176c8:	47c0      	blx	r8
 80176ca:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80176cc:	2300      	movs	r3, #0
 80176ce:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 80176d2:	2700      	movs	r7, #0
 80176d4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80176d6:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 80176da:	6da9      	ldr	r1, [r5, #88]	; 0x58
 80176dc:	62e7      	str	r7, [r4, #44]	; 0x2c
 80176de:	632f      	str	r7, [r5, #48]	; 0x30
 80176e0:	b120      	cbz	r0, 80176ec <rcl_wait_set_fini+0x114>
 80176e2:	9101      	str	r1, [sp, #4]
 80176e4:	47c0      	blx	r8
 80176e6:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80176e8:	9901      	ldr	r1, [sp, #4]
 80176ea:	62a7      	str	r7, [r4, #40]	; 0x28
 80176ec:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 80176ee:	b120      	cbz	r0, 80176fa <rcl_wait_set_fini+0x122>
 80176f0:	47c0      	blx	r8
 80176f2:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80176f4:	2300      	movs	r3, #0
 80176f6:	e9c5 330d 	strd	r3, r3, [r5, #52]	; 0x34
 80176fa:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80176fc:	4628      	mov	r0, r5
 80176fe:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8017700:	4798      	blx	r3
 8017702:	2300      	movs	r3, #0
 8017704:	6323      	str	r3, [r4, #48]	; 0x30
 8017706:	4630      	mov	r0, r6
 8017708:	b002      	add	sp, #8
 801770a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801770e:	260b      	movs	r6, #11
 8017710:	4630      	mov	r0, r6
 8017712:	b002      	add	sp, #8
 8017714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017718 <rcl_wait_set_add_subscription>:
 8017718:	b318      	cbz	r0, 8017762 <rcl_wait_set_add_subscription+0x4a>
 801771a:	b538      	push	{r3, r4, r5, lr}
 801771c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801771e:	4604      	mov	r4, r0
 8017720:	b30b      	cbz	r3, 8017766 <rcl_wait_set_add_subscription+0x4e>
 8017722:	b319      	cbz	r1, 801776c <rcl_wait_set_add_subscription+0x54>
 8017724:	681d      	ldr	r5, [r3, #0]
 8017726:	6840      	ldr	r0, [r0, #4]
 8017728:	4285      	cmp	r5, r0
 801772a:	d217      	bcs.n	801775c <rcl_wait_set_add_subscription+0x44>
 801772c:	1c68      	adds	r0, r5, #1
 801772e:	6018      	str	r0, [r3, #0]
 8017730:	6823      	ldr	r3, [r4, #0]
 8017732:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8017736:	b102      	cbz	r2, 801773a <rcl_wait_set_add_subscription+0x22>
 8017738:	6015      	str	r5, [r2, #0]
 801773a:	4608      	mov	r0, r1
 801773c:	f7ff fad8 	bl	8016cf0 <rcl_subscription_get_rmw_handle>
 8017740:	b150      	cbz	r0, 8017758 <rcl_wait_set_add_subscription+0x40>
 8017742:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017744:	6842      	ldr	r2, [r0, #4]
 8017746:	2000      	movs	r0, #0
 8017748:	689b      	ldr	r3, [r3, #8]
 801774a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801774e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8017750:	6853      	ldr	r3, [r2, #4]
 8017752:	3301      	adds	r3, #1
 8017754:	6053      	str	r3, [r2, #4]
 8017756:	bd38      	pop	{r3, r4, r5, pc}
 8017758:	2001      	movs	r0, #1
 801775a:	bd38      	pop	{r3, r4, r5, pc}
 801775c:	f240 3086 	movw	r0, #902	; 0x386
 8017760:	bd38      	pop	{r3, r4, r5, pc}
 8017762:	200b      	movs	r0, #11
 8017764:	4770      	bx	lr
 8017766:	f44f 7061 	mov.w	r0, #900	; 0x384
 801776a:	bd38      	pop	{r3, r4, r5, pc}
 801776c:	200b      	movs	r0, #11
 801776e:	bd38      	pop	{r3, r4, r5, pc}

08017770 <rcl_wait_set_clear>:
 8017770:	2800      	cmp	r0, #0
 8017772:	d074      	beq.n	801785e <rcl_wait_set_clear+0xee>
 8017774:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8017776:	b510      	push	{r4, lr}
 8017778:	4604      	mov	r4, r0
 801777a:	2b00      	cmp	r3, #0
 801777c:	d071      	beq.n	8017862 <rcl_wait_set_clear+0xf2>
 801777e:	6800      	ldr	r0, [r0, #0]
 8017780:	b138      	cbz	r0, 8017792 <rcl_wait_set_clear+0x22>
 8017782:	6862      	ldr	r2, [r4, #4]
 8017784:	2100      	movs	r1, #0
 8017786:	0092      	lsls	r2, r2, #2
 8017788:	f006 fa04 	bl	801db94 <memset>
 801778c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801778e:	2200      	movs	r2, #0
 8017790:	601a      	str	r2, [r3, #0]
 8017792:	68a0      	ldr	r0, [r4, #8]
 8017794:	b138      	cbz	r0, 80177a6 <rcl_wait_set_clear+0x36>
 8017796:	68e2      	ldr	r2, [r4, #12]
 8017798:	2100      	movs	r1, #0
 801779a:	0092      	lsls	r2, r2, #2
 801779c:	f006 f9fa 	bl	801db94 <memset>
 80177a0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80177a2:	2200      	movs	r2, #0
 80177a4:	60da      	str	r2, [r3, #12]
 80177a6:	69a0      	ldr	r0, [r4, #24]
 80177a8:	b138      	cbz	r0, 80177ba <rcl_wait_set_clear+0x4a>
 80177aa:	69e2      	ldr	r2, [r4, #28]
 80177ac:	2100      	movs	r1, #0
 80177ae:	0092      	lsls	r2, r2, #2
 80177b0:	f006 f9f0 	bl	801db94 <memset>
 80177b4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80177b6:	2200      	movs	r2, #0
 80177b8:	619a      	str	r2, [r3, #24]
 80177ba:	6a20      	ldr	r0, [r4, #32]
 80177bc:	b138      	cbz	r0, 80177ce <rcl_wait_set_clear+0x5e>
 80177be:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80177c0:	2100      	movs	r1, #0
 80177c2:	0092      	lsls	r2, r2, #2
 80177c4:	f006 f9e6 	bl	801db94 <memset>
 80177c8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80177ca:	2200      	movs	r2, #0
 80177cc:	625a      	str	r2, [r3, #36]	; 0x24
 80177ce:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80177d0:	b138      	cbz	r0, 80177e2 <rcl_wait_set_clear+0x72>
 80177d2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80177d4:	2100      	movs	r1, #0
 80177d6:	0092      	lsls	r2, r2, #2
 80177d8:	f006 f9dc 	bl	801db94 <memset>
 80177dc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80177de:	2200      	movs	r2, #0
 80177e0:	631a      	str	r2, [r3, #48]	; 0x30
 80177e2:	6920      	ldr	r0, [r4, #16]
 80177e4:	b138      	cbz	r0, 80177f6 <rcl_wait_set_clear+0x86>
 80177e6:	6962      	ldr	r2, [r4, #20]
 80177e8:	2100      	movs	r1, #0
 80177ea:	0092      	lsls	r2, r2, #2
 80177ec:	f006 f9d2 	bl	801db94 <memset>
 80177f0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80177f2:	2200      	movs	r2, #0
 80177f4:	641a      	str	r2, [r3, #64]	; 0x40
 80177f6:	6898      	ldr	r0, [r3, #8]
 80177f8:	b138      	cbz	r0, 801780a <rcl_wait_set_clear+0x9a>
 80177fa:	685a      	ldr	r2, [r3, #4]
 80177fc:	2100      	movs	r1, #0
 80177fe:	0092      	lsls	r2, r2, #2
 8017800:	f006 f9c8 	bl	801db94 <memset>
 8017804:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017806:	2200      	movs	r2, #0
 8017808:	605a      	str	r2, [r3, #4]
 801780a:	6958      	ldr	r0, [r3, #20]
 801780c:	b138      	cbz	r0, 801781e <rcl_wait_set_clear+0xae>
 801780e:	691a      	ldr	r2, [r3, #16]
 8017810:	2100      	movs	r1, #0
 8017812:	0092      	lsls	r2, r2, #2
 8017814:	f006 f9be 	bl	801db94 <memset>
 8017818:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801781a:	2200      	movs	r2, #0
 801781c:	611a      	str	r2, [r3, #16]
 801781e:	6a18      	ldr	r0, [r3, #32]
 8017820:	b138      	cbz	r0, 8017832 <rcl_wait_set_clear+0xc2>
 8017822:	69da      	ldr	r2, [r3, #28]
 8017824:	2100      	movs	r1, #0
 8017826:	0092      	lsls	r2, r2, #2
 8017828:	f006 f9b4 	bl	801db94 <memset>
 801782c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801782e:	2200      	movs	r2, #0
 8017830:	61da      	str	r2, [r3, #28]
 8017832:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8017834:	b138      	cbz	r0, 8017846 <rcl_wait_set_clear+0xd6>
 8017836:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017838:	2100      	movs	r1, #0
 801783a:	0092      	lsls	r2, r2, #2
 801783c:	f006 f9aa 	bl	801db94 <memset>
 8017840:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017842:	2200      	movs	r2, #0
 8017844:	629a      	str	r2, [r3, #40]	; 0x28
 8017846:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8017848:	b140      	cbz	r0, 801785c <rcl_wait_set_clear+0xec>
 801784a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801784c:	2100      	movs	r1, #0
 801784e:	0092      	lsls	r2, r2, #2
 8017850:	f006 f9a0 	bl	801db94 <memset>
 8017854:	2300      	movs	r3, #0
 8017856:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8017858:	4618      	mov	r0, r3
 801785a:	6353      	str	r3, [r2, #52]	; 0x34
 801785c:	bd10      	pop	{r4, pc}
 801785e:	200b      	movs	r0, #11
 8017860:	4770      	bx	lr
 8017862:	f44f 7061 	mov.w	r0, #900	; 0x384
 8017866:	bd10      	pop	{r4, pc}

08017868 <rcl_wait_set_resize>:
 8017868:	2800      	cmp	r0, #0
 801786a:	f000 8180 	beq.w	8017b6e <rcl_wait_set_resize+0x306>
 801786e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017872:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8017874:	b083      	sub	sp, #12
 8017876:	4605      	mov	r5, r0
 8017878:	2c00      	cmp	r4, #0
 801787a:	f000 817a 	beq.w	8017b72 <rcl_wait_set_resize+0x30a>
 801787e:	f04f 0900 	mov.w	r9, #0
 8017882:	461f      	mov	r7, r3
 8017884:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8017888:	4688      	mov	r8, r1
 801788a:	4616      	mov	r6, r2
 801788c:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	; 0x4c
 8017890:	f8c0 9004 	str.w	r9, [r0, #4]
 8017894:	f8c4 9000 	str.w	r9, [r4]
 8017898:	2900      	cmp	r1, #0
 801789a:	f000 80bf 	beq.w	8017a1c <rcl_wait_set_resize+0x1b4>
 801789e:	008c      	lsls	r4, r1, #2
 80178a0:	4652      	mov	r2, sl
 80178a2:	6800      	ldr	r0, [r0, #0]
 80178a4:	4621      	mov	r1, r4
 80178a6:	9301      	str	r3, [sp, #4]
 80178a8:	4798      	blx	r3
 80178aa:	9b01      	ldr	r3, [sp, #4]
 80178ac:	6028      	str	r0, [r5, #0]
 80178ae:	2800      	cmp	r0, #0
 80178b0:	f000 80f6 	beq.w	8017aa0 <rcl_wait_set_resize+0x238>
 80178b4:	4622      	mov	r2, r4
 80178b6:	4649      	mov	r1, r9
 80178b8:	9301      	str	r3, [sp, #4]
 80178ba:	f006 f96b 	bl	801db94 <memset>
 80178be:	f8c5 8004 	str.w	r8, [r5, #4]
 80178c2:	4652      	mov	r2, sl
 80178c4:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 80178c8:	4621      	mov	r1, r4
 80178ca:	9b01      	ldr	r3, [sp, #4]
 80178cc:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80178d0:	f8c8 9004 	str.w	r9, [r8, #4]
 80178d4:	4798      	blx	r3
 80178d6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80178d8:	f8c8 0008 	str.w	r0, [r8, #8]
 80178dc:	689b      	ldr	r3, [r3, #8]
 80178de:	2b00      	cmp	r3, #0
 80178e0:	f000 814a 	beq.w	8017b78 <rcl_wait_set_resize+0x310>
 80178e4:	4622      	mov	r2, r4
 80178e6:	4649      	mov	r1, r9
 80178e8:	4618      	mov	r0, r3
 80178ea:	f006 f953 	bl	801db94 <memset>
 80178ee:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80178f0:	f04f 0800 	mov.w	r8, #0
 80178f4:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80178f8:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	; 0x4c
 80178fc:	f8c5 800c 	str.w	r8, [r5, #12]
 8017900:	f8c4 800c 	str.w	r8, [r4, #12]
 8017904:	2e00      	cmp	r6, #0
 8017906:	f040 809b 	bne.w	8017a40 <rcl_wait_set_resize+0x1d8>
 801790a:	68a8      	ldr	r0, [r5, #8]
 801790c:	b128      	cbz	r0, 801791a <rcl_wait_set_resize+0xb2>
 801790e:	4649      	mov	r1, r9
 8017910:	4790      	blx	r2
 8017912:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8017914:	60ae      	str	r6, [r5, #8]
 8017916:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801791a:	f04f 0800 	mov.w	r8, #0
 801791e:	19f6      	adds	r6, r6, r7
 8017920:	f8c4 8010 	str.w	r8, [r4, #16]
 8017924:	f040 80a2 	bne.w	8017a6c <rcl_wait_set_resize+0x204>
 8017928:	6960      	ldr	r0, [r4, #20]
 801792a:	b130      	cbz	r0, 801793a <rcl_wait_set_resize+0xd2>
 801792c:	4649      	mov	r1, r9
 801792e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8017930:	4798      	blx	r3
 8017932:	6166      	str	r6, [r4, #20]
 8017934:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8017936:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801793a:	2600      	movs	r6, #0
 801793c:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 8017940:	616e      	str	r6, [r5, #20]
 8017942:	6426      	str	r6, [r4, #64]	; 0x40
 8017944:	2f00      	cmp	r7, #0
 8017946:	f040 80af 	bne.w	8017aa8 <rcl_wait_set_resize+0x240>
 801794a:	6928      	ldr	r0, [r5, #16]
 801794c:	b138      	cbz	r0, 801795e <rcl_wait_set_resize+0xf6>
 801794e:	4649      	mov	r1, r9
 8017950:	47d0      	blx	sl
 8017952:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8017954:	612f      	str	r7, [r5, #16]
 8017956:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801795a:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 801795e:	2600      	movs	r6, #0
 8017960:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017962:	61ee      	str	r6, [r5, #28]
 8017964:	61a6      	str	r6, [r4, #24]
 8017966:	2b00      	cmp	r3, #0
 8017968:	f040 8093 	bne.w	8017a92 <rcl_wait_set_resize+0x22a>
 801796c:	69a8      	ldr	r0, [r5, #24]
 801796e:	b120      	cbz	r0, 801797a <rcl_wait_set_resize+0x112>
 8017970:	4649      	mov	r1, r9
 8017972:	47d0      	blx	sl
 8017974:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017976:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8017978:	61ab      	str	r3, [r5, #24]
 801797a:	6a20      	ldr	r0, [r4, #32]
 801797c:	b128      	cbz	r0, 801798a <rcl_wait_set_resize+0x122>
 801797e:	4649      	mov	r1, r9
 8017980:	47d0      	blx	sl
 8017982:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8017984:	2300      	movs	r3, #0
 8017986:	e9c4 3307 	strd	r3, r3, [r4, #28]
 801798a:	2600      	movs	r6, #0
 801798c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801798e:	6da7      	ldr	r7, [r4, #88]	; 0x58
 8017990:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	; 0x4c
 8017994:	626e      	str	r6, [r5, #36]	; 0x24
 8017996:	6266      	str	r6, [r4, #36]	; 0x24
 8017998:	2b00      	cmp	r3, #0
 801799a:	f000 8098 	beq.w	8017ace <rcl_wait_set_resize+0x266>
 801799e:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 80179a2:	463a      	mov	r2, r7
 80179a4:	6a28      	ldr	r0, [r5, #32]
 80179a6:	4651      	mov	r1, sl
 80179a8:	47c8      	blx	r9
 80179aa:	6228      	str	r0, [r5, #32]
 80179ac:	2800      	cmp	r0, #0
 80179ae:	d077      	beq.n	8017aa0 <rcl_wait_set_resize+0x238>
 80179b0:	4652      	mov	r2, sl
 80179b2:	4631      	mov	r1, r6
 80179b4:	f006 f8ee 	bl	801db94 <memset>
 80179b8:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80179ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80179bc:	463a      	mov	r2, r7
 80179be:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80179c0:	4651      	mov	r1, sl
 80179c2:	626b      	str	r3, [r5, #36]	; 0x24
 80179c4:	62a6      	str	r6, [r4, #40]	; 0x28
 80179c6:	47c8      	blx	r9
 80179c8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80179ca:	62e0      	str	r0, [r4, #44]	; 0x2c
 80179cc:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80179ce:	2c00      	cmp	r4, #0
 80179d0:	f000 80f2 	beq.w	8017bb8 <rcl_wait_set_resize+0x350>
 80179d4:	4620      	mov	r0, r4
 80179d6:	4652      	mov	r2, sl
 80179d8:	4631      	mov	r1, r6
 80179da:	f006 f8db 	bl	801db94 <memset>
 80179de:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80179e0:	2600      	movs	r6, #0
 80179e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80179e4:	6da7      	ldr	r7, [r4, #88]	; 0x58
 80179e6:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	; 0x4c
 80179ea:	62ee      	str	r6, [r5, #44]	; 0x2c
 80179ec:	6326      	str	r6, [r4, #48]	; 0x30
 80179ee:	2b00      	cmp	r3, #0
 80179f0:	f040 8097 	bne.w	8017b22 <rcl_wait_set_resize+0x2ba>
 80179f4:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 80179f6:	b120      	cbz	r0, 8017a02 <rcl_wait_set_resize+0x19a>
 80179f8:	4639      	mov	r1, r7
 80179fa:	47c0      	blx	r8
 80179fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80179fe:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8017a00:	62ab      	str	r3, [r5, #40]	; 0x28
 8017a02:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8017a04:	2800      	cmp	r0, #0
 8017a06:	d04c      	beq.n	8017aa2 <rcl_wait_set_resize+0x23a>
 8017a08:	4639      	mov	r1, r7
 8017a0a:	47c0      	blx	r8
 8017a0c:	2300      	movs	r3, #0
 8017a0e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8017a10:	4618      	mov	r0, r3
 8017a12:	e9c2 330d 	strd	r3, r3, [r2, #52]	; 0x34
 8017a16:	b003      	add	sp, #12
 8017a18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a1c:	6800      	ldr	r0, [r0, #0]
 8017a1e:	b120      	cbz	r0, 8017a2a <rcl_wait_set_resize+0x1c2>
 8017a20:	4651      	mov	r1, sl
 8017a22:	47d8      	blx	fp
 8017a24:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8017a26:	f8c5 8000 	str.w	r8, [r5]
 8017a2a:	68a0      	ldr	r0, [r4, #8]
 8017a2c:	2800      	cmp	r0, #0
 8017a2e:	f43f af5f 	beq.w	80178f0 <rcl_wait_set_resize+0x88>
 8017a32:	4651      	mov	r1, sl
 8017a34:	47d8      	blx	fp
 8017a36:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8017a38:	2300      	movs	r3, #0
 8017a3a:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8017a3e:	e757      	b.n	80178f0 <rcl_wait_set_resize+0x88>
 8017a40:	00b4      	lsls	r4, r6, #2
 8017a42:	464a      	mov	r2, r9
 8017a44:	68a8      	ldr	r0, [r5, #8]
 8017a46:	4621      	mov	r1, r4
 8017a48:	4798      	blx	r3
 8017a4a:	60a8      	str	r0, [r5, #8]
 8017a4c:	b340      	cbz	r0, 8017aa0 <rcl_wait_set_resize+0x238>
 8017a4e:	4622      	mov	r2, r4
 8017a50:	4641      	mov	r1, r8
 8017a52:	f006 f89f 	bl	801db94 <memset>
 8017a56:	f04f 0800 	mov.w	r8, #0
 8017a5a:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8017a5c:	60ee      	str	r6, [r5, #12]
 8017a5e:	19f6      	adds	r6, r6, r7
 8017a60:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8017a64:	f8c4 8010 	str.w	r8, [r4, #16]
 8017a68:	f43f af5e 	beq.w	8017928 <rcl_wait_set_resize+0xc0>
 8017a6c:	00b6      	lsls	r6, r6, #2
 8017a6e:	464a      	mov	r2, r9
 8017a70:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8017a72:	6960      	ldr	r0, [r4, #20]
 8017a74:	4631      	mov	r1, r6
 8017a76:	4798      	blx	r3
 8017a78:	4681      	mov	r9, r0
 8017a7a:	6160      	str	r0, [r4, #20]
 8017a7c:	2800      	cmp	r0, #0
 8017a7e:	f000 8084 	beq.w	8017b8a <rcl_wait_set_resize+0x322>
 8017a82:	4632      	mov	r2, r6
 8017a84:	4641      	mov	r1, r8
 8017a86:	f006 f885 	bl	801db94 <memset>
 8017a8a:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8017a8c:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8017a90:	e753      	b.n	801793a <rcl_wait_set_resize+0xd2>
 8017a92:	009c      	lsls	r4, r3, #2
 8017a94:	464a      	mov	r2, r9
 8017a96:	69a8      	ldr	r0, [r5, #24]
 8017a98:	4621      	mov	r1, r4
 8017a9a:	47c0      	blx	r8
 8017a9c:	61a8      	str	r0, [r5, #24]
 8017a9e:	bb40      	cbnz	r0, 8017af2 <rcl_wait_set_resize+0x28a>
 8017aa0:	200a      	movs	r0, #10
 8017aa2:	b003      	add	sp, #12
 8017aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017aa8:	00bc      	lsls	r4, r7, #2
 8017aaa:	464a      	mov	r2, r9
 8017aac:	6928      	ldr	r0, [r5, #16]
 8017aae:	4621      	mov	r1, r4
 8017ab0:	47c0      	blx	r8
 8017ab2:	6128      	str	r0, [r5, #16]
 8017ab4:	2800      	cmp	r0, #0
 8017ab6:	d0f3      	beq.n	8017aa0 <rcl_wait_set_resize+0x238>
 8017ab8:	4622      	mov	r2, r4
 8017aba:	4631      	mov	r1, r6
 8017abc:	f006 f86a 	bl	801db94 <memset>
 8017ac0:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8017ac2:	616f      	str	r7, [r5, #20]
 8017ac4:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8017ac8:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 8017acc:	e747      	b.n	801795e <rcl_wait_set_resize+0xf6>
 8017ace:	6a28      	ldr	r0, [r5, #32]
 8017ad0:	b120      	cbz	r0, 8017adc <rcl_wait_set_resize+0x274>
 8017ad2:	4639      	mov	r1, r7
 8017ad4:	47c0      	blx	r8
 8017ad6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017ad8:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8017ada:	622b      	str	r3, [r5, #32]
 8017adc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8017ade:	2800      	cmp	r0, #0
 8017ae0:	f43f af7e 	beq.w	80179e0 <rcl_wait_set_resize+0x178>
 8017ae4:	4639      	mov	r1, r7
 8017ae6:	47c0      	blx	r8
 8017ae8:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8017aea:	2300      	movs	r3, #0
 8017aec:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 8017af0:	e776      	b.n	80179e0 <rcl_wait_set_resize+0x178>
 8017af2:	4622      	mov	r2, r4
 8017af4:	4631      	mov	r1, r6
 8017af6:	f006 f84d 	bl	801db94 <memset>
 8017afa:	6b2f      	ldr	r7, [r5, #48]	; 0x30
 8017afc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017afe:	464a      	mov	r2, r9
 8017b00:	6a38      	ldr	r0, [r7, #32]
 8017b02:	4621      	mov	r1, r4
 8017b04:	61eb      	str	r3, [r5, #28]
 8017b06:	61fe      	str	r6, [r7, #28]
 8017b08:	47c0      	blx	r8
 8017b0a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8017b0c:	6238      	str	r0, [r7, #32]
 8017b0e:	6a1f      	ldr	r7, [r3, #32]
 8017b10:	2f00      	cmp	r7, #0
 8017b12:	d04a      	beq.n	8017baa <rcl_wait_set_resize+0x342>
 8017b14:	4622      	mov	r2, r4
 8017b16:	4631      	mov	r1, r6
 8017b18:	4638      	mov	r0, r7
 8017b1a:	f006 f83b 	bl	801db94 <memset>
 8017b1e:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8017b20:	e733      	b.n	801798a <rcl_wait_set_resize+0x122>
 8017b22:	009c      	lsls	r4, r3, #2
 8017b24:	463a      	mov	r2, r7
 8017b26:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8017b28:	4621      	mov	r1, r4
 8017b2a:	47c8      	blx	r9
 8017b2c:	62a8      	str	r0, [r5, #40]	; 0x28
 8017b2e:	2800      	cmp	r0, #0
 8017b30:	d0b6      	beq.n	8017aa0 <rcl_wait_set_resize+0x238>
 8017b32:	4622      	mov	r2, r4
 8017b34:	4631      	mov	r1, r6
 8017b36:	f006 f82d 	bl	801db94 <memset>
 8017b3a:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 8017b3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017b40:	463a      	mov	r2, r7
 8017b42:	4621      	mov	r1, r4
 8017b44:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 8017b48:	62eb      	str	r3, [r5, #44]	; 0x2c
 8017b4a:	f8ca 6034 	str.w	r6, [sl, #52]	; 0x34
 8017b4e:	47c8      	blx	r9
 8017b50:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8017b52:	f8ca 0038 	str.w	r0, [sl, #56]	; 0x38
 8017b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017b58:	2b00      	cmp	r3, #0
 8017b5a:	d034      	beq.n	8017bc6 <rcl_wait_set_resize+0x35e>
 8017b5c:	4622      	mov	r2, r4
 8017b5e:	4631      	mov	r1, r6
 8017b60:	4618      	mov	r0, r3
 8017b62:	f006 f817 	bl	801db94 <memset>
 8017b66:	4630      	mov	r0, r6
 8017b68:	b003      	add	sp, #12
 8017b6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b6e:	200b      	movs	r0, #11
 8017b70:	4770      	bx	lr
 8017b72:	f44f 7061 	mov.w	r0, #900	; 0x384
 8017b76:	e794      	b.n	8017aa2 <rcl_wait_set_resize+0x23a>
 8017b78:	6828      	ldr	r0, [r5, #0]
 8017b7a:	4651      	mov	r1, sl
 8017b7c:	9301      	str	r3, [sp, #4]
 8017b7e:	47d8      	blx	fp
 8017b80:	9b01      	ldr	r3, [sp, #4]
 8017b82:	200a      	movs	r0, #10
 8017b84:	e9c5 3300 	strd	r3, r3, [r5]
 8017b88:	e78b      	b.n	8017aa2 <rcl_wait_set_resize+0x23a>
 8017b8a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8017b8c:	68a8      	ldr	r0, [r5, #8]
 8017b8e:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8017b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017b92:	4798      	blx	r3
 8017b94:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8017b96:	6928      	ldr	r0, [r5, #16]
 8017b98:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8017b9a:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8017b9c:	e9c5 9902 	strd	r9, r9, [r5, #8]
 8017ba0:	4790      	blx	r2
 8017ba2:	200a      	movs	r0, #10
 8017ba4:	e9c5 9904 	strd	r9, r9, [r5, #16]
 8017ba8:	e77b      	b.n	8017aa2 <rcl_wait_set_resize+0x23a>
 8017baa:	69a8      	ldr	r0, [r5, #24]
 8017bac:	4649      	mov	r1, r9
 8017bae:	47d0      	blx	sl
 8017bb0:	200a      	movs	r0, #10
 8017bb2:	e9c5 7706 	strd	r7, r7, [r5, #24]
 8017bb6:	e774      	b.n	8017aa2 <rcl_wait_set_resize+0x23a>
 8017bb8:	6a28      	ldr	r0, [r5, #32]
 8017bba:	4639      	mov	r1, r7
 8017bbc:	47c0      	blx	r8
 8017bbe:	200a      	movs	r0, #10
 8017bc0:	e9c5 4408 	strd	r4, r4, [r5, #32]
 8017bc4:	e76d      	b.n	8017aa2 <rcl_wait_set_resize+0x23a>
 8017bc6:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8017bc8:	4639      	mov	r1, r7
 8017bca:	9301      	str	r3, [sp, #4]
 8017bcc:	47c0      	blx	r8
 8017bce:	9b01      	ldr	r3, [sp, #4]
 8017bd0:	200a      	movs	r0, #10
 8017bd2:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 8017bd6:	e764      	b.n	8017aa2 <rcl_wait_set_resize+0x23a>

08017bd8 <rcl_wait_set_init>:
 8017bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017bdc:	b085      	sub	sp, #20
 8017bde:	4605      	mov	r5, r0
 8017be0:	460e      	mov	r6, r1
 8017be2:	4617      	mov	r7, r2
 8017be4:	a812      	add	r0, sp, #72	; 0x48
 8017be6:	4698      	mov	r8, r3
 8017be8:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
 8017bec:	f7f7 f820 	bl	800ec30 <rcutils_allocator_is_valid>
 8017bf0:	2d00      	cmp	r5, #0
 8017bf2:	d072      	beq.n	8017cda <rcl_wait_set_init+0x102>
 8017bf4:	f080 0001 	eor.w	r0, r0, #1
 8017bf8:	b2c0      	uxtb	r0, r0
 8017bfa:	2800      	cmp	r0, #0
 8017bfc:	d16d      	bne.n	8017cda <rcl_wait_set_init+0x102>
 8017bfe:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 8017c02:	f1ba 0f00 	cmp.w	sl, #0
 8017c06:	d004      	beq.n	8017c12 <rcl_wait_set_init+0x3a>
 8017c08:	2464      	movs	r4, #100	; 0x64
 8017c0a:	4620      	mov	r0, r4
 8017c0c:	b005      	add	sp, #20
 8017c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c12:	f1b9 0f00 	cmp.w	r9, #0
 8017c16:	d060      	beq.n	8017cda <rcl_wait_set_init+0x102>
 8017c18:	4648      	mov	r0, r9
 8017c1a:	f7fd fee5 	bl	80159e8 <rcl_context_is_valid>
 8017c1e:	2800      	cmp	r0, #0
 8017c20:	d068      	beq.n	8017cf4 <rcl_wait_set_init+0x11c>
 8017c22:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017c24:	205c      	movs	r0, #92	; 0x5c
 8017c26:	9916      	ldr	r1, [sp, #88]	; 0x58
 8017c28:	4798      	blx	r3
 8017c2a:	6328      	str	r0, [r5, #48]	; 0x30
 8017c2c:	2800      	cmp	r0, #0
 8017c2e:	d063      	beq.n	8017cf8 <rcl_wait_set_init+0x120>
 8017c30:	225c      	movs	r2, #92	; 0x5c
 8017c32:	4651      	mov	r1, sl
 8017c34:	f005 ffae 	bl	801db94 <memset>
 8017c38:	ac12      	add	r4, sp, #72	; 0x48
 8017c3a:	f8d5 b030 	ldr.w	fp, [r5, #48]	; 0x30
 8017c3e:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 8017c42:	f10b 0c48 	add.w	ip, fp, #72	; 0x48
 8017c46:	f8cb 9044 	str.w	r9, [fp, #68]	; 0x44
 8017c4a:	eb03 0e02 	add.w	lr, r3, r2
 8017c4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017c50:	f8d9 9000 	ldr.w	r9, [r9]
 8017c54:	449e      	add	lr, r3
 8017c56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017c58:	e9cb aa01 	strd	sl, sl, [fp, #4]
 8017c5c:	e9cb aa04 	strd	sl, sl, [fp, #16]
 8017c60:	e9cb aa07 	strd	sl, sl, [fp, #28]
 8017c64:	e9cb aa0a 	strd	sl, sl, [fp, #40]	; 0x28
 8017c68:	e9cb aa0d 	strd	sl, sl, [fp, #52]	; 0x34
 8017c6c:	44be      	add	lr, r7
 8017c6e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017c72:	6823      	ldr	r3, [r4, #0]
 8017c74:	eb0e 0146 	add.w	r1, lr, r6, lsl #1
 8017c78:	f109 0028 	add.w	r0, r9, #40	; 0x28
 8017c7c:	f8cc 3000 	str.w	r3, [ip]
 8017c80:	f002 ff8e 	bl	801aba0 <rmw_create_wait_set>
 8017c84:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8017c86:	f8cb 003c 	str.w	r0, [fp, #60]	; 0x3c
 8017c8a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8017c8c:	b350      	cbz	r0, 8017ce4 <rcl_wait_set_init+0x10c>
 8017c8e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8017c90:	4643      	mov	r3, r8
 8017c92:	463a      	mov	r2, r7
 8017c94:	4631      	mov	r1, r6
 8017c96:	9402      	str	r4, [sp, #8]
 8017c98:	4628      	mov	r0, r5
 8017c9a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8017c9c:	9401      	str	r4, [sp, #4]
 8017c9e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8017ca0:	9400      	str	r4, [sp, #0]
 8017ca2:	f7ff fde1 	bl	8017868 <rcl_wait_set_resize>
 8017ca6:	4604      	mov	r4, r0
 8017ca8:	2800      	cmp	r0, #0
 8017caa:	d0ae      	beq.n	8017c0a <rcl_wait_set_init+0x32>
 8017cac:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8017cae:	bb2b      	cbnz	r3, 8017cfc <rcl_wait_set_init+0x124>
 8017cb0:	2600      	movs	r6, #0
 8017cb2:	4628      	mov	r0, r5
 8017cb4:	4633      	mov	r3, r6
 8017cb6:	4632      	mov	r2, r6
 8017cb8:	4631      	mov	r1, r6
 8017cba:	9600      	str	r6, [sp, #0]
 8017cbc:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8017cc0:	f7ff fdd2 	bl	8017868 <rcl_wait_set_resize>
 8017cc4:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8017cc6:	2800      	cmp	r0, #0
 8017cc8:	d09f      	beq.n	8017c0a <rcl_wait_set_init+0x32>
 8017cca:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8017ccc:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8017cce:	4798      	blx	r3
 8017cd0:	4620      	mov	r0, r4
 8017cd2:	632e      	str	r6, [r5, #48]	; 0x30
 8017cd4:	b005      	add	sp, #20
 8017cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017cda:	240b      	movs	r4, #11
 8017cdc:	4620      	mov	r0, r4
 8017cde:	b005      	add	sp, #20
 8017ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ce4:	2401      	movs	r4, #1
 8017ce6:	f002 ff65 	bl	801abb4 <rmw_destroy_wait_set>
 8017cea:	2800      	cmp	r0, #0
 8017cec:	bf18      	it	ne
 8017cee:	f44f 7461 	movne.w	r4, #900	; 0x384
 8017cf2:	e7dd      	b.n	8017cb0 <rcl_wait_set_init+0xd8>
 8017cf4:	2465      	movs	r4, #101	; 0x65
 8017cf6:	e788      	b.n	8017c0a <rcl_wait_set_init+0x32>
 8017cf8:	240a      	movs	r4, #10
 8017cfa:	e786      	b.n	8017c0a <rcl_wait_set_init+0x32>
 8017cfc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8017cfe:	e7f2      	b.n	8017ce6 <rcl_wait_set_init+0x10e>

08017d00 <rcl_wait_set_add_guard_condition>:
 8017d00:	b318      	cbz	r0, 8017d4a <rcl_wait_set_add_guard_condition+0x4a>
 8017d02:	b538      	push	{r3, r4, r5, lr}
 8017d04:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8017d06:	4604      	mov	r4, r0
 8017d08:	b30b      	cbz	r3, 8017d4e <rcl_wait_set_add_guard_condition+0x4e>
 8017d0a:	b319      	cbz	r1, 8017d54 <rcl_wait_set_add_guard_condition+0x54>
 8017d0c:	68dd      	ldr	r5, [r3, #12]
 8017d0e:	68c0      	ldr	r0, [r0, #12]
 8017d10:	4285      	cmp	r5, r0
 8017d12:	d217      	bcs.n	8017d44 <rcl_wait_set_add_guard_condition+0x44>
 8017d14:	1c68      	adds	r0, r5, #1
 8017d16:	60d8      	str	r0, [r3, #12]
 8017d18:	68a3      	ldr	r3, [r4, #8]
 8017d1a:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8017d1e:	b102      	cbz	r2, 8017d22 <rcl_wait_set_add_guard_condition+0x22>
 8017d20:	6015      	str	r5, [r2, #0]
 8017d22:	4608      	mov	r0, r1
 8017d24:	f004 ff96 	bl	801cc54 <rcl_guard_condition_get_rmw_handle>
 8017d28:	b150      	cbz	r0, 8017d40 <rcl_wait_set_add_guard_condition+0x40>
 8017d2a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017d2c:	6842      	ldr	r2, [r0, #4]
 8017d2e:	2000      	movs	r0, #0
 8017d30:	695b      	ldr	r3, [r3, #20]
 8017d32:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017d36:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8017d38:	6913      	ldr	r3, [r2, #16]
 8017d3a:	3301      	adds	r3, #1
 8017d3c:	6113      	str	r3, [r2, #16]
 8017d3e:	bd38      	pop	{r3, r4, r5, pc}
 8017d40:	2001      	movs	r0, #1
 8017d42:	bd38      	pop	{r3, r4, r5, pc}
 8017d44:	f240 3086 	movw	r0, #902	; 0x386
 8017d48:	bd38      	pop	{r3, r4, r5, pc}
 8017d4a:	200b      	movs	r0, #11
 8017d4c:	4770      	bx	lr
 8017d4e:	f44f 7061 	mov.w	r0, #900	; 0x384
 8017d52:	bd38      	pop	{r3, r4, r5, pc}
 8017d54:	200b      	movs	r0, #11
 8017d56:	bd38      	pop	{r3, r4, r5, pc}

08017d58 <rcl_wait_set_add_timer>:
 8017d58:	b328      	cbz	r0, 8017da6 <rcl_wait_set_add_timer+0x4e>
 8017d5a:	b538      	push	{r3, r4, r5, lr}
 8017d5c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8017d5e:	4604      	mov	r4, r0
 8017d60:	b31b      	cbz	r3, 8017daa <rcl_wait_set_add_timer+0x52>
 8017d62:	b329      	cbz	r1, 8017db0 <rcl_wait_set_add_timer+0x58>
 8017d64:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8017d66:	6965      	ldr	r5, [r4, #20]
 8017d68:	42a8      	cmp	r0, r5
 8017d6a:	d219      	bcs.n	8017da0 <rcl_wait_set_add_timer+0x48>
 8017d6c:	1c45      	adds	r5, r0, #1
 8017d6e:	641d      	str	r5, [r3, #64]	; 0x40
 8017d70:	6923      	ldr	r3, [r4, #16]
 8017d72:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 8017d76:	b102      	cbz	r2, 8017d7a <rcl_wait_set_add_timer+0x22>
 8017d78:	6010      	str	r0, [r2, #0]
 8017d7a:	4608      	mov	r0, r1
 8017d7c:	f7ff fb9a 	bl	80174b4 <rcl_timer_get_guard_condition>
 8017d80:	b168      	cbz	r0, 8017d9e <rcl_wait_set_add_timer+0x46>
 8017d82:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8017d84:	68e3      	ldr	r3, [r4, #12]
 8017d86:	6c15      	ldr	r5, [r2, #64]	; 0x40
 8017d88:	3b01      	subs	r3, #1
 8017d8a:	441d      	add	r5, r3
 8017d8c:	f004 ff62 	bl	801cc54 <rcl_guard_condition_get_rmw_handle>
 8017d90:	b180      	cbz	r0, 8017db4 <rcl_wait_set_add_timer+0x5c>
 8017d92:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017d94:	6842      	ldr	r2, [r0, #4]
 8017d96:	2000      	movs	r0, #0
 8017d98:	695b      	ldr	r3, [r3, #20]
 8017d9a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017d9e:	bd38      	pop	{r3, r4, r5, pc}
 8017da0:	f240 3086 	movw	r0, #902	; 0x386
 8017da4:	bd38      	pop	{r3, r4, r5, pc}
 8017da6:	200b      	movs	r0, #11
 8017da8:	4770      	bx	lr
 8017daa:	f44f 7061 	mov.w	r0, #900	; 0x384
 8017dae:	bd38      	pop	{r3, r4, r5, pc}
 8017db0:	200b      	movs	r0, #11
 8017db2:	bd38      	pop	{r3, r4, r5, pc}
 8017db4:	2001      	movs	r0, #1
 8017db6:	bd38      	pop	{r3, r4, r5, pc}

08017db8 <rcl_wait_set_add_client>:
 8017db8:	b318      	cbz	r0, 8017e02 <rcl_wait_set_add_client+0x4a>
 8017dba:	b538      	push	{r3, r4, r5, lr}
 8017dbc:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8017dbe:	4604      	mov	r4, r0
 8017dc0:	b30b      	cbz	r3, 8017e06 <rcl_wait_set_add_client+0x4e>
 8017dc2:	b319      	cbz	r1, 8017e0c <rcl_wait_set_add_client+0x54>
 8017dc4:	699d      	ldr	r5, [r3, #24]
 8017dc6:	69c0      	ldr	r0, [r0, #28]
 8017dc8:	4285      	cmp	r5, r0
 8017dca:	d217      	bcs.n	8017dfc <rcl_wait_set_add_client+0x44>
 8017dcc:	1c68      	adds	r0, r5, #1
 8017dce:	6198      	str	r0, [r3, #24]
 8017dd0:	69a3      	ldr	r3, [r4, #24]
 8017dd2:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8017dd6:	b102      	cbz	r2, 8017dda <rcl_wait_set_add_client+0x22>
 8017dd8:	6015      	str	r5, [r2, #0]
 8017dda:	4608      	mov	r0, r1
 8017ddc:	f7fd fd1a 	bl	8015814 <rcl_client_get_rmw_handle>
 8017de0:	b150      	cbz	r0, 8017df8 <rcl_wait_set_add_client+0x40>
 8017de2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017de4:	6842      	ldr	r2, [r0, #4]
 8017de6:	2000      	movs	r0, #0
 8017de8:	6a1b      	ldr	r3, [r3, #32]
 8017dea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017dee:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8017df0:	69d3      	ldr	r3, [r2, #28]
 8017df2:	3301      	adds	r3, #1
 8017df4:	61d3      	str	r3, [r2, #28]
 8017df6:	bd38      	pop	{r3, r4, r5, pc}
 8017df8:	2001      	movs	r0, #1
 8017dfa:	bd38      	pop	{r3, r4, r5, pc}
 8017dfc:	f240 3086 	movw	r0, #902	; 0x386
 8017e00:	bd38      	pop	{r3, r4, r5, pc}
 8017e02:	200b      	movs	r0, #11
 8017e04:	4770      	bx	lr
 8017e06:	f44f 7061 	mov.w	r0, #900	; 0x384
 8017e0a:	bd38      	pop	{r3, r4, r5, pc}
 8017e0c:	200b      	movs	r0, #11
 8017e0e:	bd38      	pop	{r3, r4, r5, pc}

08017e10 <rcl_wait_set_add_service>:
 8017e10:	b318      	cbz	r0, 8017e5a <rcl_wait_set_add_service+0x4a>
 8017e12:	b538      	push	{r3, r4, r5, lr}
 8017e14:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8017e16:	4604      	mov	r4, r0
 8017e18:	b30b      	cbz	r3, 8017e5e <rcl_wait_set_add_service+0x4e>
 8017e1a:	b319      	cbz	r1, 8017e64 <rcl_wait_set_add_service+0x54>
 8017e1c:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8017e1e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8017e20:	4285      	cmp	r5, r0
 8017e22:	d217      	bcs.n	8017e54 <rcl_wait_set_add_service+0x44>
 8017e24:	1c68      	adds	r0, r5, #1
 8017e26:	6258      	str	r0, [r3, #36]	; 0x24
 8017e28:	6a23      	ldr	r3, [r4, #32]
 8017e2a:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8017e2e:	b102      	cbz	r2, 8017e32 <rcl_wait_set_add_service+0x22>
 8017e30:	6015      	str	r5, [r2, #0]
 8017e32:	4608      	mov	r0, r1
 8017e34:	f7fe fcf2 	bl	801681c <rcl_service_get_rmw_handle>
 8017e38:	b150      	cbz	r0, 8017e50 <rcl_wait_set_add_service+0x40>
 8017e3a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017e3c:	6842      	ldr	r2, [r0, #4]
 8017e3e:	2000      	movs	r0, #0
 8017e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017e42:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017e46:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8017e48:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8017e4a:	3301      	adds	r3, #1
 8017e4c:	6293      	str	r3, [r2, #40]	; 0x28
 8017e4e:	bd38      	pop	{r3, r4, r5, pc}
 8017e50:	2001      	movs	r0, #1
 8017e52:	bd38      	pop	{r3, r4, r5, pc}
 8017e54:	f240 3086 	movw	r0, #902	; 0x386
 8017e58:	bd38      	pop	{r3, r4, r5, pc}
 8017e5a:	200b      	movs	r0, #11
 8017e5c:	4770      	bx	lr
 8017e5e:	f44f 7061 	mov.w	r0, #900	; 0x384
 8017e62:	bd38      	pop	{r3, r4, r5, pc}
 8017e64:	200b      	movs	r0, #11
 8017e66:	bd38      	pop	{r3, r4, r5, pc}

08017e68 <rcl_wait>:
 8017e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e6c:	ed2d 8b02 	vpush	{d8}
 8017e70:	b08d      	sub	sp, #52	; 0x34
 8017e72:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8017e76:	2800      	cmp	r0, #0
 8017e78:	f000 814f 	beq.w	801811a <rcl_wait+0x2b2>
 8017e7c:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8017e7e:	4605      	mov	r5, r0
 8017e80:	2e00      	cmp	r6, #0
 8017e82:	f000 811a 	beq.w	80180ba <rcl_wait+0x252>
 8017e86:	6843      	ldr	r3, [r0, #4]
 8017e88:	b983      	cbnz	r3, 8017eac <rcl_wait+0x44>
 8017e8a:	68eb      	ldr	r3, [r5, #12]
 8017e8c:	b973      	cbnz	r3, 8017eac <rcl_wait+0x44>
 8017e8e:	696b      	ldr	r3, [r5, #20]
 8017e90:	b963      	cbnz	r3, 8017eac <rcl_wait+0x44>
 8017e92:	69eb      	ldr	r3, [r5, #28]
 8017e94:	b953      	cbnz	r3, 8017eac <rcl_wait+0x44>
 8017e96:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8017e98:	b943      	cbnz	r3, 8017eac <rcl_wait+0x44>
 8017e9a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8017e9c:	b933      	cbnz	r3, 8017eac <rcl_wait+0x44>
 8017e9e:	f240 3085 	movw	r0, #901	; 0x385
 8017ea2:	b00d      	add	sp, #52	; 0x34
 8017ea4:	ecbd 8b02 	vpop	{d8}
 8017ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017eac:	9b04      	ldr	r3, [sp, #16]
 8017eae:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8017eb0:	2b01      	cmp	r3, #1
 8017eb2:	9b05      	ldr	r3, [sp, #20]
 8017eb4:	f173 0300 	sbcs.w	r3, r3, #0
 8017eb8:	f2c0 80f8 	blt.w	80180ac <rcl_wait+0x244>
 8017ebc:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8017ec0:	2a00      	cmp	r2, #0
 8017ec2:	f000 810f 	beq.w	80180e4 <rcl_wait+0x27c>
 8017ec6:	2400      	movs	r4, #0
 8017ec8:	4613      	mov	r3, r2
 8017eca:	f240 3921 	movw	r9, #801	; 0x321
 8017ece:	4632      	mov	r2, r6
 8017ed0:	46a2      	mov	sl, r4
 8017ed2:	46a3      	mov	fp, r4
 8017ed4:	ed9f 8b98 	vldr	d8, [pc, #608]	; 8018138 <rcl_wait+0x2d0>
 8017ed8:	e014      	b.n	8017f04 <rcl_wait+0x9c>
 8017eda:	2800      	cmp	r0, #0
 8017edc:	d1e1      	bne.n	8017ea2 <rcl_wait+0x3a>
 8017ede:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017ee2:	4542      	cmp	r2, r8
 8017ee4:	eb73 0107 	sbcs.w	r1, r3, r7
 8017ee8:	da03      	bge.n	8017ef2 <rcl_wait+0x8a>
 8017eea:	4690      	mov	r8, r2
 8017eec:	461f      	mov	r7, r3
 8017eee:	f04f 0b01 	mov.w	fp, #1
 8017ef2:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8017ef4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8017ef6:	3401      	adds	r4, #1
 8017ef8:	f14a 0a00 	adc.w	sl, sl, #0
 8017efc:	429c      	cmp	r4, r3
 8017efe:	f17a 0100 	sbcs.w	r1, sl, #0
 8017f02:	d228      	bcs.n	8017f56 <rcl_wait+0xee>
 8017f04:	6928      	ldr	r0, [r5, #16]
 8017f06:	a908      	add	r1, sp, #32
 8017f08:	00a6      	lsls	r6, r4, #2
 8017f0a:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8017f0e:	2800      	cmp	r0, #0
 8017f10:	d0f1      	beq.n	8017ef6 <rcl_wait+0x8e>
 8017f12:	68eb      	ldr	r3, [r5, #12]
 8017f14:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8017f18:	4423      	add	r3, r4
 8017f1a:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8017f1e:	f1be 0f00 	cmp.w	lr, #0
 8017f22:	d006      	beq.n	8017f32 <rcl_wait+0xca>
 8017f24:	6913      	ldr	r3, [r2, #16]
 8017f26:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 8017f2a:	3301      	adds	r3, #1
 8017f2c:	6113      	str	r3, [r2, #16]
 8017f2e:	692b      	ldr	r3, [r5, #16]
 8017f30:	5998      	ldr	r0, [r3, r6]
 8017f32:	ed8d 8b08 	vstr	d8, [sp, #32]
 8017f36:	f7ff fa8b 	bl	8017450 <rcl_timer_get_time_until_next_call>
 8017f3a:	4548      	cmp	r0, r9
 8017f3c:	d1cd      	bne.n	8017eda <rcl_wait+0x72>
 8017f3e:	692b      	ldr	r3, [r5, #16]
 8017f40:	2200      	movs	r2, #0
 8017f42:	3401      	adds	r4, #1
 8017f44:	519a      	str	r2, [r3, r6]
 8017f46:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8017f48:	f14a 0a00 	adc.w	sl, sl, #0
 8017f4c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8017f4e:	429c      	cmp	r4, r3
 8017f50:	f17a 0100 	sbcs.w	r1, sl, #0
 8017f54:	d3d6      	bcc.n	8017f04 <rcl_wait+0x9c>
 8017f56:	4659      	mov	r1, fp
 8017f58:	4616      	mov	r6, r2
 8017f5a:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8017f5e:	4313      	orrs	r3, r2
 8017f60:	f040 80b4 	bne.w	80180cc <rcl_wait+0x264>
 8017f64:	2300      	movs	r3, #0
 8017f66:	2200      	movs	r2, #0
 8017f68:	460c      	mov	r4, r1
 8017f6a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8017f6e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8017f72:	ab08      	add	r3, sp, #32
 8017f74:	9302      	str	r3, [sp, #8]
 8017f76:	f106 0334 	add.w	r3, r6, #52	; 0x34
 8017f7a:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 8017f7c:	f106 0110 	add.w	r1, r6, #16
 8017f80:	9300      	str	r3, [sp, #0]
 8017f82:	1d30      	adds	r0, r6, #4
 8017f84:	f106 031c 	add.w	r3, r6, #28
 8017f88:	9201      	str	r2, [sp, #4]
 8017f8a:	f106 0228 	add.w	r2, r6, #40	; 0x28
 8017f8e:	f002 fca3 	bl	801a8d8 <rmw_wait>
 8017f92:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8017f94:	4680      	mov	r8, r0
 8017f96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8017f98:	b1e2      	cbz	r2, 8017fd4 <rcl_wait+0x16c>
 8017f9a:	f04f 0900 	mov.w	r9, #0
 8017f9e:	464f      	mov	r7, r9
 8017fa0:	692a      	ldr	r2, [r5, #16]
 8017fa2:	f10d 011f 	add.w	r1, sp, #31
 8017fa6:	ea4f 0689 	mov.w	r6, r9, lsl #2
 8017faa:	f852 0029 	ldr.w	r0, [r2, r9, lsl #2]
 8017fae:	b160      	cbz	r0, 8017fca <rcl_wait+0x162>
 8017fb0:	f88d 701f 	strb.w	r7, [sp, #31]
 8017fb4:	f7ff fa10 	bl	80173d8 <rcl_timer_is_ready>
 8017fb8:	2800      	cmp	r0, #0
 8017fba:	f47f af72 	bne.w	8017ea2 <rcl_wait+0x3a>
 8017fbe:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8017fc2:	b90b      	cbnz	r3, 8017fc8 <rcl_wait+0x160>
 8017fc4:	692a      	ldr	r2, [r5, #16]
 8017fc6:	5193      	str	r3, [r2, r6]
 8017fc8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8017fca:	f109 0901 	add.w	r9, r9, #1
 8017fce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8017fd0:	454a      	cmp	r2, r9
 8017fd2:	d8e5      	bhi.n	8017fa0 <rcl_wait+0x138>
 8017fd4:	f038 0002 	bics.w	r0, r8, #2
 8017fd8:	d176      	bne.n	80180c8 <rcl_wait+0x260>
 8017fda:	686f      	ldr	r7, [r5, #4]
 8017fdc:	b17f      	cbz	r7, 8017ffe <rcl_wait+0x196>
 8017fde:	4602      	mov	r2, r0
 8017fe0:	e002      	b.n	8017fe8 <rcl_wait+0x180>
 8017fe2:	3201      	adds	r2, #1
 8017fe4:	42ba      	cmp	r2, r7
 8017fe6:	d00a      	beq.n	8017ffe <rcl_wait+0x196>
 8017fe8:	6899      	ldr	r1, [r3, #8]
 8017fea:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8017fee:	2900      	cmp	r1, #0
 8017ff0:	d1f7      	bne.n	8017fe2 <rcl_wait+0x17a>
 8017ff2:	682e      	ldr	r6, [r5, #0]
 8017ff4:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8017ff8:	3201      	adds	r2, #1
 8017ffa:	42ba      	cmp	r2, r7
 8017ffc:	d1f4      	bne.n	8017fe8 <rcl_wait+0x180>
 8017ffe:	68ef      	ldr	r7, [r5, #12]
 8018000:	b17f      	cbz	r7, 8018022 <rcl_wait+0x1ba>
 8018002:	2200      	movs	r2, #0
 8018004:	e002      	b.n	801800c <rcl_wait+0x1a4>
 8018006:	3201      	adds	r2, #1
 8018008:	42ba      	cmp	r2, r7
 801800a:	d00a      	beq.n	8018022 <rcl_wait+0x1ba>
 801800c:	6959      	ldr	r1, [r3, #20]
 801800e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8018012:	2900      	cmp	r1, #0
 8018014:	d1f7      	bne.n	8018006 <rcl_wait+0x19e>
 8018016:	68ae      	ldr	r6, [r5, #8]
 8018018:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801801c:	3201      	adds	r2, #1
 801801e:	42ba      	cmp	r2, r7
 8018020:	d1f4      	bne.n	801800c <rcl_wait+0x1a4>
 8018022:	69ef      	ldr	r7, [r5, #28]
 8018024:	b17f      	cbz	r7, 8018046 <rcl_wait+0x1de>
 8018026:	2200      	movs	r2, #0
 8018028:	e002      	b.n	8018030 <rcl_wait+0x1c8>
 801802a:	3201      	adds	r2, #1
 801802c:	42ba      	cmp	r2, r7
 801802e:	d00a      	beq.n	8018046 <rcl_wait+0x1de>
 8018030:	6a19      	ldr	r1, [r3, #32]
 8018032:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8018036:	2900      	cmp	r1, #0
 8018038:	d1f7      	bne.n	801802a <rcl_wait+0x1c2>
 801803a:	69ae      	ldr	r6, [r5, #24]
 801803c:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8018040:	3201      	adds	r2, #1
 8018042:	42ba      	cmp	r2, r7
 8018044:	d1f4      	bne.n	8018030 <rcl_wait+0x1c8>
 8018046:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 8018048:	b17f      	cbz	r7, 801806a <rcl_wait+0x202>
 801804a:	2200      	movs	r2, #0
 801804c:	e002      	b.n	8018054 <rcl_wait+0x1ec>
 801804e:	3201      	adds	r2, #1
 8018050:	42ba      	cmp	r2, r7
 8018052:	d00a      	beq.n	801806a <rcl_wait+0x202>
 8018054:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8018056:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801805a:	2900      	cmp	r1, #0
 801805c:	d1f7      	bne.n	801804e <rcl_wait+0x1e6>
 801805e:	6a2e      	ldr	r6, [r5, #32]
 8018060:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8018064:	3201      	adds	r2, #1
 8018066:	42ba      	cmp	r2, r7
 8018068:	d1f4      	bne.n	8018054 <rcl_wait+0x1ec>
 801806a:	6aef      	ldr	r7, [r5, #44]	; 0x2c
 801806c:	b17f      	cbz	r7, 801808e <rcl_wait+0x226>
 801806e:	2200      	movs	r2, #0
 8018070:	e002      	b.n	8018078 <rcl_wait+0x210>
 8018072:	3201      	adds	r2, #1
 8018074:	42ba      	cmp	r2, r7
 8018076:	d00a      	beq.n	801808e <rcl_wait+0x226>
 8018078:	6b99      	ldr	r1, [r3, #56]	; 0x38
 801807a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801807e:	2900      	cmp	r1, #0
 8018080:	d1f7      	bne.n	8018072 <rcl_wait+0x20a>
 8018082:	6aae      	ldr	r6, [r5, #40]	; 0x28
 8018084:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8018088:	3201      	adds	r2, #1
 801808a:	42ba      	cmp	r2, r7
 801808c:	d1f4      	bne.n	8018078 <rcl_wait+0x210>
 801808e:	f1b8 0f02 	cmp.w	r8, #2
 8018092:	f47f af06 	bne.w	8017ea2 <rcl_wait+0x3a>
 8018096:	f084 0301 	eor.w	r3, r4, #1
 801809a:	b2db      	uxtb	r3, r3
 801809c:	2b00      	cmp	r3, #0
 801809e:	bf18      	it	ne
 80180a0:	2002      	movne	r0, #2
 80180a2:	b00d      	add	sp, #52	; 0x34
 80180a4:	ecbd 8b02 	vpop	{d8}
 80180a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80180ac:	2a00      	cmp	r2, #0
 80180ae:	d03a      	beq.n	8018126 <rcl_wait+0x2be>
 80180b0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80180b4:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 80180b8:	e705      	b.n	8017ec6 <rcl_wait+0x5e>
 80180ba:	f44f 7061 	mov.w	r0, #900	; 0x384
 80180be:	b00d      	add	sp, #52	; 0x34
 80180c0:	ecbd 8b02 	vpop	{d8}
 80180c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80180c8:	2001      	movs	r0, #1
 80180ca:	e6ea      	b.n	8017ea2 <rcl_wait+0x3a>
 80180cc:	9b04      	ldr	r3, [sp, #16]
 80180ce:	460c      	mov	r4, r1
 80180d0:	2b01      	cmp	r3, #1
 80180d2:	9b05      	ldr	r3, [sp, #20]
 80180d4:	f173 0300 	sbcs.w	r3, r3, #0
 80180d8:	bfa8      	it	ge
 80180da:	f044 0401 	orrge.w	r4, r4, #1
 80180de:	b914      	cbnz	r4, 80180e6 <rcl_wait+0x27e>
 80180e0:	4623      	mov	r3, r4
 80180e2:	e747      	b.n	8017f74 <rcl_wait+0x10c>
 80180e4:	4611      	mov	r1, r2
 80180e6:	2f00      	cmp	r7, #0
 80180e8:	da02      	bge.n	80180f0 <rcl_wait+0x288>
 80180ea:	f04f 0800 	mov.w	r8, #0
 80180ee:	4647      	mov	r7, r8
 80180f0:	460c      	mov	r4, r1
 80180f2:	4640      	mov	r0, r8
 80180f4:	4639      	mov	r1, r7
 80180f6:	a312      	add	r3, pc, #72	; (adr r3, 8018140 <rcl_wait+0x2d8>)
 80180f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80180fc:	f7e8 f908 	bl	8000310 <__aeabi_ldivmod>
 8018100:	a30f      	add	r3, pc, #60	; (adr r3, 8018140 <rcl_wait+0x2d8>)
 8018102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018106:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801810a:	4640      	mov	r0, r8
 801810c:	4639      	mov	r1, r7
 801810e:	f7e8 f8ff 	bl	8000310 <__aeabi_ldivmod>
 8018112:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8018116:	ab08      	add	r3, sp, #32
 8018118:	e72c      	b.n	8017f74 <rcl_wait+0x10c>
 801811a:	200b      	movs	r0, #11
 801811c:	b00d      	add	sp, #52	; 0x34
 801811e:	ecbd 8b02 	vpop	{d8}
 8018122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018126:	4611      	mov	r1, r2
 8018128:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801812c:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 8018130:	e713      	b.n	8017f5a <rcl_wait+0xf2>
 8018132:	bf00      	nop
 8018134:	f3af 8000 	nop.w
 8018138:	ffffffff 	.word	0xffffffff
 801813c:	7fffffff 	.word	0x7fffffff
 8018140:	3b9aca00 	.word	0x3b9aca00
 8018144:	00000000 	.word	0x00000000

08018148 <rcl_action_take_goal_response>:
 8018148:	2800      	cmp	r0, #0
 801814a:	d039      	beq.n	80181c0 <rcl_action_take_goal_response+0x78>
 801814c:	b570      	push	{r4, r5, r6, lr}
 801814e:	4604      	mov	r4, r0
 8018150:	6800      	ldr	r0, [r0, #0]
 8018152:	b380      	cbz	r0, 80181b6 <rcl_action_take_goal_response+0x6e>
 8018154:	460e      	mov	r6, r1
 8018156:	4615      	mov	r5, r2
 8018158:	f7fd fc1e 	bl	8015998 <rcl_client_is_valid>
 801815c:	b330      	cbz	r0, 80181ac <rcl_action_take_goal_response+0x64>
 801815e:	6820      	ldr	r0, [r4, #0]
 8018160:	3004      	adds	r0, #4
 8018162:	f7fd fc19 	bl	8015998 <rcl_client_is_valid>
 8018166:	b308      	cbz	r0, 80181ac <rcl_action_take_goal_response+0x64>
 8018168:	6820      	ldr	r0, [r4, #0]
 801816a:	3008      	adds	r0, #8
 801816c:	f7fd fc14 	bl	8015998 <rcl_client_is_valid>
 8018170:	b1e0      	cbz	r0, 80181ac <rcl_action_take_goal_response+0x64>
 8018172:	6820      	ldr	r0, [r4, #0]
 8018174:	300c      	adds	r0, #12
 8018176:	f7fe fdc1 	bl	8016cfc <rcl_subscription_is_valid>
 801817a:	b1b8      	cbz	r0, 80181ac <rcl_action_take_goal_response+0x64>
 801817c:	6820      	ldr	r0, [r4, #0]
 801817e:	3010      	adds	r0, #16
 8018180:	f7fe fdbc 	bl	8016cfc <rcl_subscription_is_valid>
 8018184:	b190      	cbz	r0, 80181ac <rcl_action_take_goal_response+0x64>
 8018186:	b1cd      	cbz	r5, 80181bc <rcl_action_take_goal_response+0x74>
 8018188:	b1c6      	cbz	r6, 80181bc <rcl_action_take_goal_response+0x74>
 801818a:	462a      	mov	r2, r5
 801818c:	4631      	mov	r1, r6
 801818e:	6820      	ldr	r0, [r4, #0]
 8018190:	f7fd fb9a 	bl	80158c8 <rcl_take_response>
 8018194:	b148      	cbz	r0, 80181aa <rcl_action_take_goal_response+0x62>
 8018196:	280a      	cmp	r0, #10
 8018198:	d007      	beq.n	80181aa <rcl_action_take_goal_response+0x62>
 801819a:	f240 12f5 	movw	r2, #501	; 0x1f5
 801819e:	f640 0337 	movw	r3, #2103	; 0x837
 80181a2:	4290      	cmp	r0, r2
 80181a4:	bf0c      	ite	eq
 80181a6:	4618      	moveq	r0, r3
 80181a8:	2001      	movne	r0, #1
 80181aa:	bd70      	pop	{r4, r5, r6, pc}
 80181ac:	f7f6 fd64 	bl	800ec78 <rcutils_reset_error>
 80181b0:	f640 0036 	movw	r0, #2102	; 0x836
 80181b4:	bd70      	pop	{r4, r5, r6, pc}
 80181b6:	f640 0036 	movw	r0, #2102	; 0x836
 80181ba:	bd70      	pop	{r4, r5, r6, pc}
 80181bc:	200b      	movs	r0, #11
 80181be:	bd70      	pop	{r4, r5, r6, pc}
 80181c0:	f640 0036 	movw	r0, #2102	; 0x836
 80181c4:	4770      	bx	lr
 80181c6:	bf00      	nop

080181c8 <rcl_action_send_result_request>:
 80181c8:	b390      	cbz	r0, 8018230 <rcl_action_send_result_request+0x68>
 80181ca:	b570      	push	{r4, r5, r6, lr}
 80181cc:	4604      	mov	r4, r0
 80181ce:	6800      	ldr	r0, [r0, #0]
 80181d0:	b348      	cbz	r0, 8018226 <rcl_action_send_result_request+0x5e>
 80181d2:	460e      	mov	r6, r1
 80181d4:	4615      	mov	r5, r2
 80181d6:	f7fd fbdf 	bl	8015998 <rcl_client_is_valid>
 80181da:	b1f8      	cbz	r0, 801821c <rcl_action_send_result_request+0x54>
 80181dc:	6820      	ldr	r0, [r4, #0]
 80181de:	3004      	adds	r0, #4
 80181e0:	f7fd fbda 	bl	8015998 <rcl_client_is_valid>
 80181e4:	b1d0      	cbz	r0, 801821c <rcl_action_send_result_request+0x54>
 80181e6:	6820      	ldr	r0, [r4, #0]
 80181e8:	3008      	adds	r0, #8
 80181ea:	f7fd fbd5 	bl	8015998 <rcl_client_is_valid>
 80181ee:	b1a8      	cbz	r0, 801821c <rcl_action_send_result_request+0x54>
 80181f0:	6820      	ldr	r0, [r4, #0]
 80181f2:	300c      	adds	r0, #12
 80181f4:	f7fe fd82 	bl	8016cfc <rcl_subscription_is_valid>
 80181f8:	b180      	cbz	r0, 801821c <rcl_action_send_result_request+0x54>
 80181fa:	6820      	ldr	r0, [r4, #0]
 80181fc:	3010      	adds	r0, #16
 80181fe:	f7fe fd7d 	bl	8016cfc <rcl_subscription_is_valid>
 8018202:	b158      	cbz	r0, 801821c <rcl_action_send_result_request+0x54>
 8018204:	b195      	cbz	r5, 801822c <rcl_action_send_result_request+0x64>
 8018206:	b18e      	cbz	r6, 801822c <rcl_action_send_result_request+0x64>
 8018208:	6820      	ldr	r0, [r4, #0]
 801820a:	462a      	mov	r2, r5
 801820c:	4631      	mov	r1, r6
 801820e:	3008      	adds	r0, #8
 8018210:	f7fd fb06 	bl	8015820 <rcl_send_request>
 8018214:	3800      	subs	r0, #0
 8018216:	bf18      	it	ne
 8018218:	2001      	movne	r0, #1
 801821a:	bd70      	pop	{r4, r5, r6, pc}
 801821c:	f7f6 fd2c 	bl	800ec78 <rcutils_reset_error>
 8018220:	f640 0036 	movw	r0, #2102	; 0x836
 8018224:	bd70      	pop	{r4, r5, r6, pc}
 8018226:	f640 0036 	movw	r0, #2102	; 0x836
 801822a:	bd70      	pop	{r4, r5, r6, pc}
 801822c:	200b      	movs	r0, #11
 801822e:	bd70      	pop	{r4, r5, r6, pc}
 8018230:	f640 0036 	movw	r0, #2102	; 0x836
 8018234:	4770      	bx	lr
 8018236:	bf00      	nop

08018238 <rcl_action_take_result_response>:
 8018238:	2800      	cmp	r0, #0
 801823a:	d03a      	beq.n	80182b2 <rcl_action_take_result_response+0x7a>
 801823c:	b570      	push	{r4, r5, r6, lr}
 801823e:	4604      	mov	r4, r0
 8018240:	6800      	ldr	r0, [r0, #0]
 8018242:	b388      	cbz	r0, 80182a8 <rcl_action_take_result_response+0x70>
 8018244:	460e      	mov	r6, r1
 8018246:	4615      	mov	r5, r2
 8018248:	f7fd fba6 	bl	8015998 <rcl_client_is_valid>
 801824c:	b338      	cbz	r0, 801829e <rcl_action_take_result_response+0x66>
 801824e:	6820      	ldr	r0, [r4, #0]
 8018250:	3004      	adds	r0, #4
 8018252:	f7fd fba1 	bl	8015998 <rcl_client_is_valid>
 8018256:	b310      	cbz	r0, 801829e <rcl_action_take_result_response+0x66>
 8018258:	6820      	ldr	r0, [r4, #0]
 801825a:	3008      	adds	r0, #8
 801825c:	f7fd fb9c 	bl	8015998 <rcl_client_is_valid>
 8018260:	b1e8      	cbz	r0, 801829e <rcl_action_take_result_response+0x66>
 8018262:	6820      	ldr	r0, [r4, #0]
 8018264:	300c      	adds	r0, #12
 8018266:	f7fe fd49 	bl	8016cfc <rcl_subscription_is_valid>
 801826a:	b1c0      	cbz	r0, 801829e <rcl_action_take_result_response+0x66>
 801826c:	6820      	ldr	r0, [r4, #0]
 801826e:	3010      	adds	r0, #16
 8018270:	f7fe fd44 	bl	8016cfc <rcl_subscription_is_valid>
 8018274:	b198      	cbz	r0, 801829e <rcl_action_take_result_response+0x66>
 8018276:	b1d5      	cbz	r5, 80182ae <rcl_action_take_result_response+0x76>
 8018278:	b1ce      	cbz	r6, 80182ae <rcl_action_take_result_response+0x76>
 801827a:	6820      	ldr	r0, [r4, #0]
 801827c:	462a      	mov	r2, r5
 801827e:	4631      	mov	r1, r6
 8018280:	3008      	adds	r0, #8
 8018282:	f7fd fb21 	bl	80158c8 <rcl_take_response>
 8018286:	b148      	cbz	r0, 801829c <rcl_action_take_result_response+0x64>
 8018288:	280a      	cmp	r0, #10
 801828a:	d007      	beq.n	801829c <rcl_action_take_result_response+0x64>
 801828c:	f240 12f5 	movw	r2, #501	; 0x1f5
 8018290:	f640 0337 	movw	r3, #2103	; 0x837
 8018294:	4290      	cmp	r0, r2
 8018296:	bf0c      	ite	eq
 8018298:	4618      	moveq	r0, r3
 801829a:	2001      	movne	r0, #1
 801829c:	bd70      	pop	{r4, r5, r6, pc}
 801829e:	f7f6 fceb 	bl	800ec78 <rcutils_reset_error>
 80182a2:	f640 0036 	movw	r0, #2102	; 0x836
 80182a6:	bd70      	pop	{r4, r5, r6, pc}
 80182a8:	f640 0036 	movw	r0, #2102	; 0x836
 80182ac:	bd70      	pop	{r4, r5, r6, pc}
 80182ae:	200b      	movs	r0, #11
 80182b0:	bd70      	pop	{r4, r5, r6, pc}
 80182b2:	f640 0036 	movw	r0, #2102	; 0x836
 80182b6:	4770      	bx	lr

080182b8 <rcl_action_take_cancel_response>:
 80182b8:	2800      	cmp	r0, #0
 80182ba:	d03a      	beq.n	8018332 <rcl_action_take_cancel_response+0x7a>
 80182bc:	b570      	push	{r4, r5, r6, lr}
 80182be:	4604      	mov	r4, r0
 80182c0:	6800      	ldr	r0, [r0, #0]
 80182c2:	b388      	cbz	r0, 8018328 <rcl_action_take_cancel_response+0x70>
 80182c4:	460e      	mov	r6, r1
 80182c6:	4615      	mov	r5, r2
 80182c8:	f7fd fb66 	bl	8015998 <rcl_client_is_valid>
 80182cc:	b338      	cbz	r0, 801831e <rcl_action_take_cancel_response+0x66>
 80182ce:	6820      	ldr	r0, [r4, #0]
 80182d0:	3004      	adds	r0, #4
 80182d2:	f7fd fb61 	bl	8015998 <rcl_client_is_valid>
 80182d6:	b310      	cbz	r0, 801831e <rcl_action_take_cancel_response+0x66>
 80182d8:	6820      	ldr	r0, [r4, #0]
 80182da:	3008      	adds	r0, #8
 80182dc:	f7fd fb5c 	bl	8015998 <rcl_client_is_valid>
 80182e0:	b1e8      	cbz	r0, 801831e <rcl_action_take_cancel_response+0x66>
 80182e2:	6820      	ldr	r0, [r4, #0]
 80182e4:	300c      	adds	r0, #12
 80182e6:	f7fe fd09 	bl	8016cfc <rcl_subscription_is_valid>
 80182ea:	b1c0      	cbz	r0, 801831e <rcl_action_take_cancel_response+0x66>
 80182ec:	6820      	ldr	r0, [r4, #0]
 80182ee:	3010      	adds	r0, #16
 80182f0:	f7fe fd04 	bl	8016cfc <rcl_subscription_is_valid>
 80182f4:	b198      	cbz	r0, 801831e <rcl_action_take_cancel_response+0x66>
 80182f6:	b1d5      	cbz	r5, 801832e <rcl_action_take_cancel_response+0x76>
 80182f8:	b1ce      	cbz	r6, 801832e <rcl_action_take_cancel_response+0x76>
 80182fa:	6820      	ldr	r0, [r4, #0]
 80182fc:	462a      	mov	r2, r5
 80182fe:	4631      	mov	r1, r6
 8018300:	3004      	adds	r0, #4
 8018302:	f7fd fae1 	bl	80158c8 <rcl_take_response>
 8018306:	b148      	cbz	r0, 801831c <rcl_action_take_cancel_response+0x64>
 8018308:	280a      	cmp	r0, #10
 801830a:	d007      	beq.n	801831c <rcl_action_take_cancel_response+0x64>
 801830c:	f240 12f5 	movw	r2, #501	; 0x1f5
 8018310:	f640 0337 	movw	r3, #2103	; 0x837
 8018314:	4290      	cmp	r0, r2
 8018316:	bf0c      	ite	eq
 8018318:	4618      	moveq	r0, r3
 801831a:	2001      	movne	r0, #1
 801831c:	bd70      	pop	{r4, r5, r6, pc}
 801831e:	f7f6 fcab 	bl	800ec78 <rcutils_reset_error>
 8018322:	f640 0036 	movw	r0, #2102	; 0x836
 8018326:	bd70      	pop	{r4, r5, r6, pc}
 8018328:	f640 0036 	movw	r0, #2102	; 0x836
 801832c:	bd70      	pop	{r4, r5, r6, pc}
 801832e:	200b      	movs	r0, #11
 8018330:	bd70      	pop	{r4, r5, r6, pc}
 8018332:	f640 0036 	movw	r0, #2102	; 0x836
 8018336:	4770      	bx	lr

08018338 <rcl_action_take_feedback>:
 8018338:	2800      	cmp	r0, #0
 801833a:	d038      	beq.n	80183ae <rcl_action_take_feedback+0x76>
 801833c:	b530      	push	{r4, r5, lr}
 801833e:	4604      	mov	r4, r0
 8018340:	6800      	ldr	r0, [r0, #0]
 8018342:	b08f      	sub	sp, #60	; 0x3c
 8018344:	b378      	cbz	r0, 80183a6 <rcl_action_take_feedback+0x6e>
 8018346:	460d      	mov	r5, r1
 8018348:	f7fd fb26 	bl	8015998 <rcl_client_is_valid>
 801834c:	b328      	cbz	r0, 801839a <rcl_action_take_feedback+0x62>
 801834e:	6820      	ldr	r0, [r4, #0]
 8018350:	3004      	adds	r0, #4
 8018352:	f7fd fb21 	bl	8015998 <rcl_client_is_valid>
 8018356:	b300      	cbz	r0, 801839a <rcl_action_take_feedback+0x62>
 8018358:	6820      	ldr	r0, [r4, #0]
 801835a:	3008      	adds	r0, #8
 801835c:	f7fd fb1c 	bl	8015998 <rcl_client_is_valid>
 8018360:	b1d8      	cbz	r0, 801839a <rcl_action_take_feedback+0x62>
 8018362:	6820      	ldr	r0, [r4, #0]
 8018364:	300c      	adds	r0, #12
 8018366:	f7fe fcc9 	bl	8016cfc <rcl_subscription_is_valid>
 801836a:	b1b0      	cbz	r0, 801839a <rcl_action_take_feedback+0x62>
 801836c:	6820      	ldr	r0, [r4, #0]
 801836e:	3010      	adds	r0, #16
 8018370:	f7fe fcc4 	bl	8016cfc <rcl_subscription_is_valid>
 8018374:	b188      	cbz	r0, 801839a <rcl_action_take_feedback+0x62>
 8018376:	b1ed      	cbz	r5, 80183b4 <rcl_action_take_feedback+0x7c>
 8018378:	6820      	ldr	r0, [r4, #0]
 801837a:	2300      	movs	r3, #0
 801837c:	466a      	mov	r2, sp
 801837e:	4629      	mov	r1, r5
 8018380:	300c      	adds	r0, #12
 8018382:	f7fe fc5f 	bl	8016c44 <rcl_take>
 8018386:	b160      	cbz	r0, 80183a2 <rcl_action_take_feedback+0x6a>
 8018388:	f240 1391 	movw	r3, #401	; 0x191
 801838c:	4298      	cmp	r0, r3
 801838e:	d014      	beq.n	80183ba <rcl_action_take_feedback+0x82>
 8018390:	280a      	cmp	r0, #10
 8018392:	bf18      	it	ne
 8018394:	2001      	movne	r0, #1
 8018396:	b00f      	add	sp, #60	; 0x3c
 8018398:	bd30      	pop	{r4, r5, pc}
 801839a:	f7f6 fc6d 	bl	800ec78 <rcutils_reset_error>
 801839e:	f640 0036 	movw	r0, #2102	; 0x836
 80183a2:	b00f      	add	sp, #60	; 0x3c
 80183a4:	bd30      	pop	{r4, r5, pc}
 80183a6:	f640 0036 	movw	r0, #2102	; 0x836
 80183aa:	b00f      	add	sp, #60	; 0x3c
 80183ac:	bd30      	pop	{r4, r5, pc}
 80183ae:	f640 0036 	movw	r0, #2102	; 0x836
 80183b2:	4770      	bx	lr
 80183b4:	200b      	movs	r0, #11
 80183b6:	b00f      	add	sp, #60	; 0x3c
 80183b8:	bd30      	pop	{r4, r5, pc}
 80183ba:	f640 0037 	movw	r0, #2103	; 0x837
 80183be:	e7f0      	b.n	80183a2 <rcl_action_take_feedback+0x6a>

080183c0 <rcl_action_wait_set_add_action_client>:
 80183c0:	2800      	cmp	r0, #0
 80183c2:	d048      	beq.n	8018456 <rcl_action_wait_set_add_action_client+0x96>
 80183c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80183c6:	460c      	mov	r4, r1
 80183c8:	2900      	cmp	r1, #0
 80183ca:	d03c      	beq.n	8018446 <rcl_action_wait_set_add_action_client+0x86>
 80183cc:	4605      	mov	r5, r0
 80183ce:	6808      	ldr	r0, [r1, #0]
 80183d0:	2800      	cmp	r0, #0
 80183d2:	d038      	beq.n	8018446 <rcl_action_wait_set_add_action_client+0x86>
 80183d4:	4617      	mov	r7, r2
 80183d6:	461e      	mov	r6, r3
 80183d8:	f7fd fade 	bl	8015998 <rcl_client_is_valid>
 80183dc:	b3b0      	cbz	r0, 801844c <rcl_action_wait_set_add_action_client+0x8c>
 80183de:	6820      	ldr	r0, [r4, #0]
 80183e0:	3004      	adds	r0, #4
 80183e2:	f7fd fad9 	bl	8015998 <rcl_client_is_valid>
 80183e6:	b388      	cbz	r0, 801844c <rcl_action_wait_set_add_action_client+0x8c>
 80183e8:	6820      	ldr	r0, [r4, #0]
 80183ea:	3008      	adds	r0, #8
 80183ec:	f7fd fad4 	bl	8015998 <rcl_client_is_valid>
 80183f0:	b360      	cbz	r0, 801844c <rcl_action_wait_set_add_action_client+0x8c>
 80183f2:	6820      	ldr	r0, [r4, #0]
 80183f4:	300c      	adds	r0, #12
 80183f6:	f7fe fc81 	bl	8016cfc <rcl_subscription_is_valid>
 80183fa:	b338      	cbz	r0, 801844c <rcl_action_wait_set_add_action_client+0x8c>
 80183fc:	6820      	ldr	r0, [r4, #0]
 80183fe:	3010      	adds	r0, #16
 8018400:	f7fe fc7c 	bl	8016cfc <rcl_subscription_is_valid>
 8018404:	b310      	cbz	r0, 801844c <rcl_action_wait_set_add_action_client+0x8c>
 8018406:	6821      	ldr	r1, [r4, #0]
 8018408:	4628      	mov	r0, r5
 801840a:	f501 72e2 	add.w	r2, r1, #452	; 0x1c4
 801840e:	f7ff fcd3 	bl	8017db8 <rcl_wait_set_add_client>
 8018412:	b9b8      	cbnz	r0, 8018444 <rcl_action_wait_set_add_action_client+0x84>
 8018414:	6821      	ldr	r1, [r4, #0]
 8018416:	4628      	mov	r0, r5
 8018418:	f501 72e4 	add.w	r2, r1, #456	; 0x1c8
 801841c:	3104      	adds	r1, #4
 801841e:	f7ff fccb 	bl	8017db8 <rcl_wait_set_add_client>
 8018422:	b978      	cbnz	r0, 8018444 <rcl_action_wait_set_add_action_client+0x84>
 8018424:	6821      	ldr	r1, [r4, #0]
 8018426:	4628      	mov	r0, r5
 8018428:	f501 72e6 	add.w	r2, r1, #460	; 0x1cc
 801842c:	3108      	adds	r1, #8
 801842e:	f7ff fcc3 	bl	8017db8 <rcl_wait_set_add_client>
 8018432:	b938      	cbnz	r0, 8018444 <rcl_action_wait_set_add_action_client+0x84>
 8018434:	6821      	ldr	r1, [r4, #0]
 8018436:	4628      	mov	r0, r5
 8018438:	f501 72e8 	add.w	r2, r1, #464	; 0x1d0
 801843c:	310c      	adds	r1, #12
 801843e:	f7ff f96b 	bl	8017718 <rcl_wait_set_add_subscription>
 8018442:	b158      	cbz	r0, 801845c <rcl_action_wait_set_add_action_client+0x9c>
 8018444:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018446:	f640 0036 	movw	r0, #2102	; 0x836
 801844a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801844c:	f7f6 fc14 	bl	800ec78 <rcutils_reset_error>
 8018450:	f640 0036 	movw	r0, #2102	; 0x836
 8018454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018456:	f44f 7061 	mov.w	r0, #900	; 0x384
 801845a:	4770      	bx	lr
 801845c:	6821      	ldr	r1, [r4, #0]
 801845e:	4628      	mov	r0, r5
 8018460:	f501 72ea 	add.w	r2, r1, #468	; 0x1d4
 8018464:	3110      	adds	r1, #16
 8018466:	f7ff f957 	bl	8017718 <rcl_wait_set_add_subscription>
 801846a:	2800      	cmp	r0, #0
 801846c:	d1ea      	bne.n	8018444 <rcl_action_wait_set_add_action_client+0x84>
 801846e:	b11f      	cbz	r7, 8018478 <rcl_action_wait_set_add_action_client+0xb8>
 8018470:	6823      	ldr	r3, [r4, #0]
 8018472:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 8018476:	603b      	str	r3, [r7, #0]
 8018478:	2e00      	cmp	r6, #0
 801847a:	d0e3      	beq.n	8018444 <rcl_action_wait_set_add_action_client+0x84>
 801847c:	6823      	ldr	r3, [r4, #0]
 801847e:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 8018482:	6033      	str	r3, [r6, #0]
 8018484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018486:	bf00      	nop

08018488 <rcl_action_client_wait_set_get_entities_ready>:
 8018488:	2800      	cmp	r0, #0
 801848a:	d050      	beq.n	801852e <rcl_action_client_wait_set_get_entities_ready+0xa6>
 801848c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018490:	460c      	mov	r4, r1
 8018492:	2900      	cmp	r1, #0
 8018494:	d03e      	beq.n	8018514 <rcl_action_client_wait_set_get_entities_ready+0x8c>
 8018496:	4605      	mov	r5, r0
 8018498:	6808      	ldr	r0, [r1, #0]
 801849a:	2800      	cmp	r0, #0
 801849c:	d03a      	beq.n	8018514 <rcl_action_client_wait_set_get_entities_ready+0x8c>
 801849e:	4616      	mov	r6, r2
 80184a0:	461f      	mov	r7, r3
 80184a2:	f7fd fa79 	bl	8015998 <rcl_client_is_valid>
 80184a6:	2800      	cmp	r0, #0
 80184a8:	d038      	beq.n	801851c <rcl_action_client_wait_set_get_entities_ready+0x94>
 80184aa:	6820      	ldr	r0, [r4, #0]
 80184ac:	3004      	adds	r0, #4
 80184ae:	f7fd fa73 	bl	8015998 <rcl_client_is_valid>
 80184b2:	2800      	cmp	r0, #0
 80184b4:	d032      	beq.n	801851c <rcl_action_client_wait_set_get_entities_ready+0x94>
 80184b6:	6820      	ldr	r0, [r4, #0]
 80184b8:	3008      	adds	r0, #8
 80184ba:	f7fd fa6d 	bl	8015998 <rcl_client_is_valid>
 80184be:	b368      	cbz	r0, 801851c <rcl_action_client_wait_set_get_entities_ready+0x94>
 80184c0:	6820      	ldr	r0, [r4, #0]
 80184c2:	300c      	adds	r0, #12
 80184c4:	f7fe fc1a 	bl	8016cfc <rcl_subscription_is_valid>
 80184c8:	b340      	cbz	r0, 801851c <rcl_action_client_wait_set_get_entities_ready+0x94>
 80184ca:	6820      	ldr	r0, [r4, #0]
 80184cc:	3010      	adds	r0, #16
 80184ce:	f7fe fc15 	bl	8016cfc <rcl_subscription_is_valid>
 80184d2:	b318      	cbz	r0, 801851c <rcl_action_client_wait_set_get_entities_ready+0x94>
 80184d4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80184d8:	2a00      	cmp	r2, #0
 80184da:	bf18      	it	ne
 80184dc:	2b00      	cmpne	r3, #0
 80184de:	9b08      	ldr	r3, [sp, #32]
 80184e0:	bf0c      	ite	eq
 80184e2:	2101      	moveq	r1, #1
 80184e4:	2100      	movne	r1, #0
 80184e6:	2b00      	cmp	r3, #0
 80184e8:	bf08      	it	eq
 80184ea:	f041 0101 	orreq.w	r1, r1, #1
 80184ee:	2f00      	cmp	r7, #0
 80184f0:	bf08      	it	eq
 80184f2:	f041 0101 	orreq.w	r1, r1, #1
 80184f6:	b9b9      	cbnz	r1, 8018528 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 80184f8:	b1b6      	cbz	r6, 8018528 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 80184fa:	6823      	ldr	r3, [r4, #0]
 80184fc:	686c      	ldr	r4, [r5, #4]
 80184fe:	e9d3 2174 	ldrd	r2, r1, [r3, #464]	; 0x1d0
 8018502:	428a      	cmp	r2, r1
 8018504:	4610      	mov	r0, r2
 8018506:	bf38      	it	cc
 8018508:	4608      	movcc	r0, r1
 801850a:	4284      	cmp	r4, r0
 801850c:	d812      	bhi.n	8018534 <rcl_action_client_wait_set_get_entities_ready+0xac>
 801850e:	2001      	movs	r0, #1
 8018510:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018514:	f640 0036 	movw	r0, #2102	; 0x836
 8018518:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801851c:	f7f6 fbac 	bl	800ec78 <rcutils_reset_error>
 8018520:	f640 0036 	movw	r0, #2102	; 0x836
 8018524:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018528:	200b      	movs	r0, #11
 801852a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801852e:	f44f 7061 	mov.w	r0, #900	; 0x384
 8018532:	4770      	bx	lr
 8018534:	e9d3 8e71 	ldrd	r8, lr, [r3, #452]	; 0x1c4
 8018538:	f8d3 c1cc 	ldr.w	ip, [r3, #460]	; 0x1cc
 801853c:	45f0      	cmp	r8, lr
 801853e:	4640      	mov	r0, r8
 8018540:	69ec      	ldr	r4, [r5, #28]
 8018542:	bf38      	it	cc
 8018544:	4670      	movcc	r0, lr
 8018546:	4560      	cmp	r0, ip
 8018548:	bf38      	it	cc
 801854a:	4660      	movcc	r0, ip
 801854c:	4284      	cmp	r4, r0
 801854e:	d9de      	bls.n	801850e <rcl_action_client_wait_set_get_entities_ready+0x86>
 8018550:	f8d5 9018 	ldr.w	r9, [r5, #24]
 8018554:	682d      	ldr	r5, [r5, #0]
 8018556:	f859 0028 	ldr.w	r0, [r9, r8, lsl #2]
 801855a:	f855 4021 	ldr.w	r4, [r5, r1, lsl #2]
 801855e:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 8018562:	1a18      	subs	r0, r3, r0
 8018564:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 8018568:	f103 0c0c 	add.w	ip, r3, #12
 801856c:	f859 102e 	ldr.w	r1, [r9, lr, lsl #2]
 8018570:	fab0 f080 	clz	r0, r0
 8018574:	eba5 050c 	sub.w	r5, r5, ip
 8018578:	0940      	lsrs	r0, r0, #5
 801857a:	fab5 f585 	clz	r5, r5
 801857e:	096d      	lsrs	r5, r5, #5
 8018580:	7035      	strb	r5, [r6, #0]
 8018582:	f103 0510 	add.w	r5, r3, #16
 8018586:	1b64      	subs	r4, r4, r5
 8018588:	9d08      	ldr	r5, [sp, #32]
 801858a:	fab4 f484 	clz	r4, r4
 801858e:	0964      	lsrs	r4, r4, #5
 8018590:	703c      	strb	r4, [r7, #0]
 8018592:	1d1c      	adds	r4, r3, #4
 8018594:	3308      	adds	r3, #8
 8018596:	7028      	strb	r0, [r5, #0]
 8018598:	1b09      	subs	r1, r1, r4
 801859a:	2000      	movs	r0, #0
 801859c:	1ad3      	subs	r3, r2, r3
 801859e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80185a0:	fab1 f181 	clz	r1, r1
 80185a4:	fab3 f383 	clz	r3, r3
 80185a8:	0949      	lsrs	r1, r1, #5
 80185aa:	095b      	lsrs	r3, r3, #5
 80185ac:	7011      	strb	r1, [r2, #0]
 80185ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80185b0:	7013      	strb	r3, [r2, #0]
 80185b2:	e7b1      	b.n	8018518 <rcl_action_client_wait_set_get_entities_ready+0x90>

080185b4 <rcl_action_take_goal_request>:
 80185b4:	2800      	cmp	r0, #0
 80185b6:	d039      	beq.n	801862c <rcl_action_take_goal_request+0x78>
 80185b8:	b570      	push	{r4, r5, r6, lr}
 80185ba:	4604      	mov	r4, r0
 80185bc:	6800      	ldr	r0, [r0, #0]
 80185be:	b380      	cbz	r0, 8018622 <rcl_action_take_goal_request+0x6e>
 80185c0:	460e      	mov	r6, r1
 80185c2:	4615      	mov	r5, r2
 80185c4:	f7fe f9b0 	bl	8016928 <rcl_service_is_valid>
 80185c8:	b330      	cbz	r0, 8018618 <rcl_action_take_goal_request+0x64>
 80185ca:	6820      	ldr	r0, [r4, #0]
 80185cc:	3004      	adds	r0, #4
 80185ce:	f7fe f9ab 	bl	8016928 <rcl_service_is_valid>
 80185d2:	b308      	cbz	r0, 8018618 <rcl_action_take_goal_request+0x64>
 80185d4:	6820      	ldr	r0, [r4, #0]
 80185d6:	3008      	adds	r0, #8
 80185d8:	f7fe f9a6 	bl	8016928 <rcl_service_is_valid>
 80185dc:	b1e0      	cbz	r0, 8018618 <rcl_action_take_goal_request+0x64>
 80185de:	6820      	ldr	r0, [r4, #0]
 80185e0:	300c      	adds	r0, #12
 80185e2:	f7f5 faab 	bl	800db3c <rcl_publisher_is_valid>
 80185e6:	b1b8      	cbz	r0, 8018618 <rcl_action_take_goal_request+0x64>
 80185e8:	6820      	ldr	r0, [r4, #0]
 80185ea:	3010      	adds	r0, #16
 80185ec:	f7f5 faa6 	bl	800db3c <rcl_publisher_is_valid>
 80185f0:	b190      	cbz	r0, 8018618 <rcl_action_take_goal_request+0x64>
 80185f2:	b1cd      	cbz	r5, 8018628 <rcl_action_take_goal_request+0x74>
 80185f4:	b1c6      	cbz	r6, 8018628 <rcl_action_take_goal_request+0x74>
 80185f6:	462a      	mov	r2, r5
 80185f8:	4631      	mov	r1, r6
 80185fa:	6820      	ldr	r0, [r4, #0]
 80185fc:	f7fe f914 	bl	8016828 <rcl_take_request>
 8018600:	b148      	cbz	r0, 8018616 <rcl_action_take_goal_request+0x62>
 8018602:	280a      	cmp	r0, #10
 8018604:	d007      	beq.n	8018616 <rcl_action_take_goal_request+0x62>
 8018606:	f240 2259 	movw	r2, #601	; 0x259
 801860a:	f640 0399 	movw	r3, #2201	; 0x899
 801860e:	4290      	cmp	r0, r2
 8018610:	bf0c      	ite	eq
 8018612:	4618      	moveq	r0, r3
 8018614:	2001      	movne	r0, #1
 8018616:	bd70      	pop	{r4, r5, r6, pc}
 8018618:	f7f6 fb2e 	bl	800ec78 <rcutils_reset_error>
 801861c:	f640 0098 	movw	r0, #2200	; 0x898
 8018620:	bd70      	pop	{r4, r5, r6, pc}
 8018622:	f640 0098 	movw	r0, #2200	; 0x898
 8018626:	bd70      	pop	{r4, r5, r6, pc}
 8018628:	200b      	movs	r0, #11
 801862a:	bd70      	pop	{r4, r5, r6, pc}
 801862c:	f640 0098 	movw	r0, #2200	; 0x898
 8018630:	4770      	bx	lr
 8018632:	bf00      	nop

08018634 <rcl_action_send_goal_response>:
 8018634:	b388      	cbz	r0, 801869a <rcl_action_send_goal_response+0x66>
 8018636:	b570      	push	{r4, r5, r6, lr}
 8018638:	4604      	mov	r4, r0
 801863a:	6800      	ldr	r0, [r0, #0]
 801863c:	b340      	cbz	r0, 8018690 <rcl_action_send_goal_response+0x5c>
 801863e:	460e      	mov	r6, r1
 8018640:	4615      	mov	r5, r2
 8018642:	f7fe f971 	bl	8016928 <rcl_service_is_valid>
 8018646:	b1f0      	cbz	r0, 8018686 <rcl_action_send_goal_response+0x52>
 8018648:	6820      	ldr	r0, [r4, #0]
 801864a:	3004      	adds	r0, #4
 801864c:	f7fe f96c 	bl	8016928 <rcl_service_is_valid>
 8018650:	b1c8      	cbz	r0, 8018686 <rcl_action_send_goal_response+0x52>
 8018652:	6820      	ldr	r0, [r4, #0]
 8018654:	3008      	adds	r0, #8
 8018656:	f7fe f967 	bl	8016928 <rcl_service_is_valid>
 801865a:	b1a0      	cbz	r0, 8018686 <rcl_action_send_goal_response+0x52>
 801865c:	6820      	ldr	r0, [r4, #0]
 801865e:	300c      	adds	r0, #12
 8018660:	f7f5 fa6c 	bl	800db3c <rcl_publisher_is_valid>
 8018664:	b178      	cbz	r0, 8018686 <rcl_action_send_goal_response+0x52>
 8018666:	6820      	ldr	r0, [r4, #0]
 8018668:	3010      	adds	r0, #16
 801866a:	f7f5 fa67 	bl	800db3c <rcl_publisher_is_valid>
 801866e:	b150      	cbz	r0, 8018686 <rcl_action_send_goal_response+0x52>
 8018670:	b18d      	cbz	r5, 8018696 <rcl_action_send_goal_response+0x62>
 8018672:	b186      	cbz	r6, 8018696 <rcl_action_send_goal_response+0x62>
 8018674:	462a      	mov	r2, r5
 8018676:	4631      	mov	r1, r6
 8018678:	6820      	ldr	r0, [r4, #0]
 801867a:	f7fe f925 	bl	80168c8 <rcl_send_response>
 801867e:	3800      	subs	r0, #0
 8018680:	bf18      	it	ne
 8018682:	2001      	movne	r0, #1
 8018684:	bd70      	pop	{r4, r5, r6, pc}
 8018686:	f7f6 faf7 	bl	800ec78 <rcutils_reset_error>
 801868a:	f640 0098 	movw	r0, #2200	; 0x898
 801868e:	bd70      	pop	{r4, r5, r6, pc}
 8018690:	f640 0098 	movw	r0, #2200	; 0x898
 8018694:	bd70      	pop	{r4, r5, r6, pc}
 8018696:	200b      	movs	r0, #11
 8018698:	bd70      	pop	{r4, r5, r6, pc}
 801869a:	f640 0098 	movw	r0, #2200	; 0x898
 801869e:	4770      	bx	lr

080186a0 <rcl_action_take_result_request>:
 80186a0:	2800      	cmp	r0, #0
 80186a2:	d03a      	beq.n	801871a <rcl_action_take_result_request+0x7a>
 80186a4:	b570      	push	{r4, r5, r6, lr}
 80186a6:	4604      	mov	r4, r0
 80186a8:	6800      	ldr	r0, [r0, #0]
 80186aa:	b388      	cbz	r0, 8018710 <rcl_action_take_result_request+0x70>
 80186ac:	460e      	mov	r6, r1
 80186ae:	4615      	mov	r5, r2
 80186b0:	f7fe f93a 	bl	8016928 <rcl_service_is_valid>
 80186b4:	b338      	cbz	r0, 8018706 <rcl_action_take_result_request+0x66>
 80186b6:	6820      	ldr	r0, [r4, #0]
 80186b8:	3004      	adds	r0, #4
 80186ba:	f7fe f935 	bl	8016928 <rcl_service_is_valid>
 80186be:	b310      	cbz	r0, 8018706 <rcl_action_take_result_request+0x66>
 80186c0:	6820      	ldr	r0, [r4, #0]
 80186c2:	3008      	adds	r0, #8
 80186c4:	f7fe f930 	bl	8016928 <rcl_service_is_valid>
 80186c8:	b1e8      	cbz	r0, 8018706 <rcl_action_take_result_request+0x66>
 80186ca:	6820      	ldr	r0, [r4, #0]
 80186cc:	300c      	adds	r0, #12
 80186ce:	f7f5 fa35 	bl	800db3c <rcl_publisher_is_valid>
 80186d2:	b1c0      	cbz	r0, 8018706 <rcl_action_take_result_request+0x66>
 80186d4:	6820      	ldr	r0, [r4, #0]
 80186d6:	3010      	adds	r0, #16
 80186d8:	f7f5 fa30 	bl	800db3c <rcl_publisher_is_valid>
 80186dc:	b198      	cbz	r0, 8018706 <rcl_action_take_result_request+0x66>
 80186de:	b1d5      	cbz	r5, 8018716 <rcl_action_take_result_request+0x76>
 80186e0:	b1ce      	cbz	r6, 8018716 <rcl_action_take_result_request+0x76>
 80186e2:	6820      	ldr	r0, [r4, #0]
 80186e4:	462a      	mov	r2, r5
 80186e6:	4631      	mov	r1, r6
 80186e8:	3008      	adds	r0, #8
 80186ea:	f7fe f89d 	bl	8016828 <rcl_take_request>
 80186ee:	b148      	cbz	r0, 8018704 <rcl_action_take_result_request+0x64>
 80186f0:	280a      	cmp	r0, #10
 80186f2:	d007      	beq.n	8018704 <rcl_action_take_result_request+0x64>
 80186f4:	f240 2259 	movw	r2, #601	; 0x259
 80186f8:	f640 0399 	movw	r3, #2201	; 0x899
 80186fc:	4290      	cmp	r0, r2
 80186fe:	bf0c      	ite	eq
 8018700:	4618      	moveq	r0, r3
 8018702:	2001      	movne	r0, #1
 8018704:	bd70      	pop	{r4, r5, r6, pc}
 8018706:	f7f6 fab7 	bl	800ec78 <rcutils_reset_error>
 801870a:	f640 0098 	movw	r0, #2200	; 0x898
 801870e:	bd70      	pop	{r4, r5, r6, pc}
 8018710:	f640 0098 	movw	r0, #2200	; 0x898
 8018714:	bd70      	pop	{r4, r5, r6, pc}
 8018716:	200b      	movs	r0, #11
 8018718:	bd70      	pop	{r4, r5, r6, pc}
 801871a:	f640 0098 	movw	r0, #2200	; 0x898
 801871e:	4770      	bx	lr

08018720 <rcl_action_take_cancel_request>:
 8018720:	2800      	cmp	r0, #0
 8018722:	d03a      	beq.n	801879a <rcl_action_take_cancel_request+0x7a>
 8018724:	b570      	push	{r4, r5, r6, lr}
 8018726:	4604      	mov	r4, r0
 8018728:	6800      	ldr	r0, [r0, #0]
 801872a:	b388      	cbz	r0, 8018790 <rcl_action_take_cancel_request+0x70>
 801872c:	460e      	mov	r6, r1
 801872e:	4615      	mov	r5, r2
 8018730:	f7fe f8fa 	bl	8016928 <rcl_service_is_valid>
 8018734:	b338      	cbz	r0, 8018786 <rcl_action_take_cancel_request+0x66>
 8018736:	6820      	ldr	r0, [r4, #0]
 8018738:	3004      	adds	r0, #4
 801873a:	f7fe f8f5 	bl	8016928 <rcl_service_is_valid>
 801873e:	b310      	cbz	r0, 8018786 <rcl_action_take_cancel_request+0x66>
 8018740:	6820      	ldr	r0, [r4, #0]
 8018742:	3008      	adds	r0, #8
 8018744:	f7fe f8f0 	bl	8016928 <rcl_service_is_valid>
 8018748:	b1e8      	cbz	r0, 8018786 <rcl_action_take_cancel_request+0x66>
 801874a:	6820      	ldr	r0, [r4, #0]
 801874c:	300c      	adds	r0, #12
 801874e:	f7f5 f9f5 	bl	800db3c <rcl_publisher_is_valid>
 8018752:	b1c0      	cbz	r0, 8018786 <rcl_action_take_cancel_request+0x66>
 8018754:	6820      	ldr	r0, [r4, #0]
 8018756:	3010      	adds	r0, #16
 8018758:	f7f5 f9f0 	bl	800db3c <rcl_publisher_is_valid>
 801875c:	b198      	cbz	r0, 8018786 <rcl_action_take_cancel_request+0x66>
 801875e:	b1d5      	cbz	r5, 8018796 <rcl_action_take_cancel_request+0x76>
 8018760:	b1ce      	cbz	r6, 8018796 <rcl_action_take_cancel_request+0x76>
 8018762:	6820      	ldr	r0, [r4, #0]
 8018764:	462a      	mov	r2, r5
 8018766:	4631      	mov	r1, r6
 8018768:	3004      	adds	r0, #4
 801876a:	f7fe f85d 	bl	8016828 <rcl_take_request>
 801876e:	b148      	cbz	r0, 8018784 <rcl_action_take_cancel_request+0x64>
 8018770:	280a      	cmp	r0, #10
 8018772:	d007      	beq.n	8018784 <rcl_action_take_cancel_request+0x64>
 8018774:	f240 2259 	movw	r2, #601	; 0x259
 8018778:	f640 0399 	movw	r3, #2201	; 0x899
 801877c:	4290      	cmp	r0, r2
 801877e:	bf0c      	ite	eq
 8018780:	4618      	moveq	r0, r3
 8018782:	2001      	movne	r0, #1
 8018784:	bd70      	pop	{r4, r5, r6, pc}
 8018786:	f7f6 fa77 	bl	800ec78 <rcutils_reset_error>
 801878a:	f640 0098 	movw	r0, #2200	; 0x898
 801878e:	bd70      	pop	{r4, r5, r6, pc}
 8018790:	f640 0098 	movw	r0, #2200	; 0x898
 8018794:	bd70      	pop	{r4, r5, r6, pc}
 8018796:	200b      	movs	r0, #11
 8018798:	bd70      	pop	{r4, r5, r6, pc}
 801879a:	f640 0098 	movw	r0, #2200	; 0x898
 801879e:	4770      	bx	lr

080187a0 <rcl_action_send_cancel_response>:
 80187a0:	b390      	cbz	r0, 8018808 <rcl_action_send_cancel_response+0x68>
 80187a2:	b570      	push	{r4, r5, r6, lr}
 80187a4:	4604      	mov	r4, r0
 80187a6:	6800      	ldr	r0, [r0, #0]
 80187a8:	b348      	cbz	r0, 80187fe <rcl_action_send_cancel_response+0x5e>
 80187aa:	460e      	mov	r6, r1
 80187ac:	4615      	mov	r5, r2
 80187ae:	f7fe f8bb 	bl	8016928 <rcl_service_is_valid>
 80187b2:	b1f8      	cbz	r0, 80187f4 <rcl_action_send_cancel_response+0x54>
 80187b4:	6820      	ldr	r0, [r4, #0]
 80187b6:	3004      	adds	r0, #4
 80187b8:	f7fe f8b6 	bl	8016928 <rcl_service_is_valid>
 80187bc:	b1d0      	cbz	r0, 80187f4 <rcl_action_send_cancel_response+0x54>
 80187be:	6820      	ldr	r0, [r4, #0]
 80187c0:	3008      	adds	r0, #8
 80187c2:	f7fe f8b1 	bl	8016928 <rcl_service_is_valid>
 80187c6:	b1a8      	cbz	r0, 80187f4 <rcl_action_send_cancel_response+0x54>
 80187c8:	6820      	ldr	r0, [r4, #0]
 80187ca:	300c      	adds	r0, #12
 80187cc:	f7f5 f9b6 	bl	800db3c <rcl_publisher_is_valid>
 80187d0:	b180      	cbz	r0, 80187f4 <rcl_action_send_cancel_response+0x54>
 80187d2:	6820      	ldr	r0, [r4, #0]
 80187d4:	3010      	adds	r0, #16
 80187d6:	f7f5 f9b1 	bl	800db3c <rcl_publisher_is_valid>
 80187da:	b158      	cbz	r0, 80187f4 <rcl_action_send_cancel_response+0x54>
 80187dc:	b195      	cbz	r5, 8018804 <rcl_action_send_cancel_response+0x64>
 80187de:	b18e      	cbz	r6, 8018804 <rcl_action_send_cancel_response+0x64>
 80187e0:	6820      	ldr	r0, [r4, #0]
 80187e2:	462a      	mov	r2, r5
 80187e4:	4631      	mov	r1, r6
 80187e6:	3004      	adds	r0, #4
 80187e8:	f7fe f86e 	bl	80168c8 <rcl_send_response>
 80187ec:	3800      	subs	r0, #0
 80187ee:	bf18      	it	ne
 80187f0:	2001      	movne	r0, #1
 80187f2:	bd70      	pop	{r4, r5, r6, pc}
 80187f4:	f7f6 fa40 	bl	800ec78 <rcutils_reset_error>
 80187f8:	f640 0098 	movw	r0, #2200	; 0x898
 80187fc:	bd70      	pop	{r4, r5, r6, pc}
 80187fe:	f640 0098 	movw	r0, #2200	; 0x898
 8018802:	bd70      	pop	{r4, r5, r6, pc}
 8018804:	200b      	movs	r0, #11
 8018806:	bd70      	pop	{r4, r5, r6, pc}
 8018808:	f640 0098 	movw	r0, #2200	; 0x898
 801880c:	4770      	bx	lr
 801880e:	bf00      	nop

08018810 <rcl_action_wait_set_add_action_server>:
 8018810:	2800      	cmp	r0, #0
 8018812:	d04d      	beq.n	80188b0 <rcl_action_wait_set_add_action_server+0xa0>
 8018814:	b570      	push	{r4, r5, r6, lr}
 8018816:	460c      	mov	r4, r1
 8018818:	b159      	cbz	r1, 8018832 <rcl_action_wait_set_add_action_server+0x22>
 801881a:	4605      	mov	r5, r0
 801881c:	6808      	ldr	r0, [r1, #0]
 801881e:	b140      	cbz	r0, 8018832 <rcl_action_wait_set_add_action_server+0x22>
 8018820:	4616      	mov	r6, r2
 8018822:	f7fe f881 	bl	8016928 <rcl_service_is_valid>
 8018826:	b120      	cbz	r0, 8018832 <rcl_action_wait_set_add_action_server+0x22>
 8018828:	6820      	ldr	r0, [r4, #0]
 801882a:	3004      	adds	r0, #4
 801882c:	f7fe f87c 	bl	8016928 <rcl_service_is_valid>
 8018830:	b910      	cbnz	r0, 8018838 <rcl_action_wait_set_add_action_server+0x28>
 8018832:	f640 0098 	movw	r0, #2200	; 0x898
 8018836:	bd70      	pop	{r4, r5, r6, pc}
 8018838:	6820      	ldr	r0, [r4, #0]
 801883a:	3008      	adds	r0, #8
 801883c:	f7fe f874 	bl	8016928 <rcl_service_is_valid>
 8018840:	2800      	cmp	r0, #0
 8018842:	d0f6      	beq.n	8018832 <rcl_action_wait_set_add_action_server+0x22>
 8018844:	6820      	ldr	r0, [r4, #0]
 8018846:	300c      	adds	r0, #12
 8018848:	f7f5 f990 	bl	800db6c <rcl_publisher_is_valid_except_context>
 801884c:	2800      	cmp	r0, #0
 801884e:	d0f0      	beq.n	8018832 <rcl_action_wait_set_add_action_server+0x22>
 8018850:	6820      	ldr	r0, [r4, #0]
 8018852:	3010      	adds	r0, #16
 8018854:	f7f5 f98a 	bl	800db6c <rcl_publisher_is_valid_except_context>
 8018858:	2800      	cmp	r0, #0
 801885a:	d0ea      	beq.n	8018832 <rcl_action_wait_set_add_action_server+0x22>
 801885c:	6821      	ldr	r1, [r4, #0]
 801885e:	4628      	mov	r0, r5
 8018860:	f501 72ee 	add.w	r2, r1, #476	; 0x1dc
 8018864:	f7ff fad4 	bl	8017e10 <rcl_wait_set_add_service>
 8018868:	2800      	cmp	r0, #0
 801886a:	d1e4      	bne.n	8018836 <rcl_action_wait_set_add_action_server+0x26>
 801886c:	6821      	ldr	r1, [r4, #0]
 801886e:	4628      	mov	r0, r5
 8018870:	f501 72f0 	add.w	r2, r1, #480	; 0x1e0
 8018874:	3104      	adds	r1, #4
 8018876:	f7ff facb 	bl	8017e10 <rcl_wait_set_add_service>
 801887a:	2800      	cmp	r0, #0
 801887c:	d1db      	bne.n	8018836 <rcl_action_wait_set_add_action_server+0x26>
 801887e:	6821      	ldr	r1, [r4, #0]
 8018880:	4628      	mov	r0, r5
 8018882:	f501 72f2 	add.w	r2, r1, #484	; 0x1e4
 8018886:	3108      	adds	r1, #8
 8018888:	f7ff fac2 	bl	8017e10 <rcl_wait_set_add_service>
 801888c:	2800      	cmp	r0, #0
 801888e:	d1d2      	bne.n	8018836 <rcl_action_wait_set_add_action_server+0x26>
 8018890:	6821      	ldr	r1, [r4, #0]
 8018892:	4628      	mov	r0, r5
 8018894:	f501 72f4 	add.w	r2, r1, #488	; 0x1e8
 8018898:	3114      	adds	r1, #20
 801889a:	f7ff fa5d 	bl	8017d58 <rcl_wait_set_add_timer>
 801889e:	2800      	cmp	r0, #0
 80188a0:	d1c9      	bne.n	8018836 <rcl_action_wait_set_add_action_server+0x26>
 80188a2:	2e00      	cmp	r6, #0
 80188a4:	d0c7      	beq.n	8018836 <rcl_action_wait_set_add_action_server+0x26>
 80188a6:	6823      	ldr	r3, [r4, #0]
 80188a8:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 80188ac:	6033      	str	r3, [r6, #0]
 80188ae:	bd70      	pop	{r4, r5, r6, pc}
 80188b0:	f44f 7061 	mov.w	r0, #900	; 0x384
 80188b4:	4770      	bx	lr
 80188b6:	bf00      	nop

080188b8 <rcl_action_server_wait_set_get_entities_ready>:
 80188b8:	2800      	cmp	r0, #0
 80188ba:	d067      	beq.n	801898c <rcl_action_server_wait_set_get_entities_ready+0xd4>
 80188bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80188c0:	460c      	mov	r4, r1
 80188c2:	b161      	cbz	r1, 80188de <rcl_action_server_wait_set_get_entities_ready+0x26>
 80188c4:	4605      	mov	r5, r0
 80188c6:	6808      	ldr	r0, [r1, #0]
 80188c8:	b148      	cbz	r0, 80188de <rcl_action_server_wait_set_get_entities_ready+0x26>
 80188ca:	4616      	mov	r6, r2
 80188cc:	4698      	mov	r8, r3
 80188ce:	f7fe f82b 	bl	8016928 <rcl_service_is_valid>
 80188d2:	b120      	cbz	r0, 80188de <rcl_action_server_wait_set_get_entities_ready+0x26>
 80188d4:	6820      	ldr	r0, [r4, #0]
 80188d6:	3004      	adds	r0, #4
 80188d8:	f7fe f826 	bl	8016928 <rcl_service_is_valid>
 80188dc:	b918      	cbnz	r0, 80188e6 <rcl_action_server_wait_set_get_entities_ready+0x2e>
 80188de:	f640 0098 	movw	r0, #2200	; 0x898
 80188e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80188e6:	6820      	ldr	r0, [r4, #0]
 80188e8:	3008      	adds	r0, #8
 80188ea:	f7fe f81d 	bl	8016928 <rcl_service_is_valid>
 80188ee:	2800      	cmp	r0, #0
 80188f0:	d0f5      	beq.n	80188de <rcl_action_server_wait_set_get_entities_ready+0x26>
 80188f2:	6820      	ldr	r0, [r4, #0]
 80188f4:	300c      	adds	r0, #12
 80188f6:	f7f5 f939 	bl	800db6c <rcl_publisher_is_valid_except_context>
 80188fa:	2800      	cmp	r0, #0
 80188fc:	d0ef      	beq.n	80188de <rcl_action_server_wait_set_get_entities_ready+0x26>
 80188fe:	6820      	ldr	r0, [r4, #0]
 8018900:	3010      	adds	r0, #16
 8018902:	f7f5 f933 	bl	800db6c <rcl_publisher_is_valid_except_context>
 8018906:	2800      	cmp	r0, #0
 8018908:	d0e9      	beq.n	80188de <rcl_action_server_wait_set_get_entities_ready+0x26>
 801890a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801890e:	2a00      	cmp	r2, #0
 8018910:	bf18      	it	ne
 8018912:	2b00      	cmpne	r3, #0
 8018914:	bf0c      	ite	eq
 8018916:	2101      	moveq	r1, #1
 8018918:	2100      	movne	r1, #0
 801891a:	f1b8 0f00 	cmp.w	r8, #0
 801891e:	bf08      	it	eq
 8018920:	f041 0101 	orreq.w	r1, r1, #1
 8018924:	bba9      	cbnz	r1, 8018992 <rcl_action_server_wait_set_get_entities_ready+0xda>
 8018926:	b3a6      	cbz	r6, 8018992 <rcl_action_server_wait_set_get_entities_ready+0xda>
 8018928:	6821      	ldr	r1, [r4, #0]
 801892a:	2000      	movs	r0, #0
 801892c:	692c      	ldr	r4, [r5, #16]
 801892e:	f8d1 21e8 	ldr.w	r2, [r1, #488]	; 0x1e8
 8018932:	6a2f      	ldr	r7, [r5, #32]
 8018934:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8018938:	f8d1 41dc 	ldr.w	r4, [r1, #476]	; 0x1dc
 801893c:	f8d1 31e0 	ldr.w	r3, [r1, #480]	; 0x1e0
 8018940:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
 8018944:	f857 5023 	ldr.w	r5, [r7, r3, lsl #2]
 8018948:	1a64      	subs	r4, r4, r1
 801894a:	f8d1 31e4 	ldr.w	r3, [r1, #484]	; 0x1e4
 801894e:	fab4 f484 	clz	r4, r4
 8018952:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8018956:	0964      	lsrs	r4, r4, #5
 8018958:	7034      	strb	r4, [r6, #0]
 801895a:	1d0c      	adds	r4, r1, #4
 801895c:	1b2c      	subs	r4, r5, r4
 801895e:	fab4 f484 	clz	r4, r4
 8018962:	0964      	lsrs	r4, r4, #5
 8018964:	f888 4000 	strb.w	r4, [r8]
 8018968:	f101 0408 	add.w	r4, r1, #8
 801896c:	1b1b      	subs	r3, r3, r4
 801896e:	9c06      	ldr	r4, [sp, #24]
 8018970:	fab3 f383 	clz	r3, r3
 8018974:	095b      	lsrs	r3, r3, #5
 8018976:	7023      	strb	r3, [r4, #0]
 8018978:	f101 0314 	add.w	r3, r1, #20
 801897c:	1ad3      	subs	r3, r2, r3
 801897e:	9a07      	ldr	r2, [sp, #28]
 8018980:	fab3 f383 	clz	r3, r3
 8018984:	095b      	lsrs	r3, r3, #5
 8018986:	7013      	strb	r3, [r2, #0]
 8018988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801898c:	f44f 7061 	mov.w	r0, #900	; 0x384
 8018990:	4770      	bx	lr
 8018992:	200b      	movs	r0, #11
 8018994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018998 <_execute_event_handler>:
 8018998:	2002      	movs	r0, #2
 801899a:	4770      	bx	lr

0801899c <_cancel_goal_event_handler>:
 801899c:	2003      	movs	r0, #3
 801899e:	4770      	bx	lr

080189a0 <_succeed_event_handler>:
 80189a0:	2004      	movs	r0, #4
 80189a2:	4770      	bx	lr

080189a4 <_abort_event_handler>:
 80189a4:	2006      	movs	r0, #6
 80189a6:	4770      	bx	lr

080189a8 <_canceled_event_handler>:
 80189a8:	2005      	movs	r0, #5
 80189aa:	4770      	bx	lr

080189ac <rcl_action_transition_goal_state>:
 80189ac:	b2c2      	uxtb	r2, r0
 80189ae:	2a06      	cmp	r2, #6
 80189b0:	d810      	bhi.n	80189d4 <rcl_action_transition_goal_state+0x28>
 80189b2:	2904      	cmp	r1, #4
 80189b4:	d80e      	bhi.n	80189d4 <rcl_action_transition_goal_state+0x28>
 80189b6:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 80189ba:	b410      	push	{r4}
 80189bc:	1853      	adds	r3, r2, r1
 80189be:	4c06      	ldr	r4, [pc, #24]	; (80189d8 <rcl_action_transition_goal_state+0x2c>)
 80189c0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80189c4:	b113      	cbz	r3, 80189cc <rcl_action_transition_goal_state+0x20>
 80189c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80189ca:	4718      	bx	r3
 80189cc:	2000      	movs	r0, #0
 80189ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80189d2:	4770      	bx	lr
 80189d4:	2000      	movs	r0, #0
 80189d6:	4770      	bx	lr
 80189d8:	08020330 	.word	0x08020330

080189dc <rcl_action_get_zero_initialized_cancel_response>:
 80189dc:	b510      	push	{r4, lr}
 80189de:	4c07      	ldr	r4, [pc, #28]	; (80189fc <rcl_action_get_zero_initialized_cancel_response+0x20>)
 80189e0:	4686      	mov	lr, r0
 80189e2:	4684      	mov	ip, r0
 80189e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80189e6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80189ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80189ec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80189f0:	6823      	ldr	r3, [r4, #0]
 80189f2:	4670      	mov	r0, lr
 80189f4:	f8cc 3000 	str.w	r3, [ip]
 80189f8:	bd10      	pop	{r4, pc}
 80189fa:	bf00      	nop
 80189fc:	080203bc 	.word	0x080203bc

08018a00 <rclc_action_send_result_request>:
 8018a00:	b1d0      	cbz	r0, 8018a38 <rclc_action_send_result_request+0x38>
 8018a02:	4684      	mov	ip, r0
 8018a04:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8018a08:	b500      	push	{lr}
 8018a0a:	b087      	sub	sp, #28
 8018a0c:	f8dc 100d 	ldr.w	r1, [ip, #13]
 8018a10:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8018a14:	f8dc 3015 	ldr.w	r3, [ip, #21]
 8018a18:	f10d 0e08 	add.w	lr, sp, #8
 8018a1c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8018a20:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8018a24:	f10c 0240 	add.w	r2, ip, #64	; 0x40
 8018a28:	a902      	add	r1, sp, #8
 8018a2a:	3010      	adds	r0, #16
 8018a2c:	f7ff fbcc 	bl	80181c8 <rcl_action_send_result_request>
 8018a30:	b920      	cbnz	r0, 8018a3c <rclc_action_send_result_request+0x3c>
 8018a32:	b007      	add	sp, #28
 8018a34:	f85d fb04 	ldr.w	pc, [sp], #4
 8018a38:	200b      	movs	r0, #11
 8018a3a:	4770      	bx	lr
 8018a3c:	9001      	str	r0, [sp, #4]
 8018a3e:	f7f6 f91b 	bl	800ec78 <rcutils_reset_error>
 8018a42:	9801      	ldr	r0, [sp, #4]
 8018a44:	b007      	add	sp, #28
 8018a46:	f85d fb04 	ldr.w	pc, [sp], #4
 8018a4a:	bf00      	nop

08018a4c <rclc_action_take_goal_handle>:
 8018a4c:	b160      	cbz	r0, 8018a68 <rclc_action_take_goal_handle+0x1c>
 8018a4e:	6883      	ldr	r3, [r0, #8]
 8018a50:	b143      	cbz	r3, 8018a64 <rclc_action_take_goal_handle+0x18>
 8018a52:	6819      	ldr	r1, [r3, #0]
 8018a54:	2200      	movs	r2, #0
 8018a56:	6081      	str	r1, [r0, #8]
 8018a58:	721a      	strb	r2, [r3, #8]
 8018a5a:	68c1      	ldr	r1, [r0, #12]
 8018a5c:	621a      	str	r2, [r3, #32]
 8018a5e:	849a      	strh	r2, [r3, #36]	; 0x24
 8018a60:	6019      	str	r1, [r3, #0]
 8018a62:	60c3      	str	r3, [r0, #12]
 8018a64:	4618      	mov	r0, r3
 8018a66:	4770      	bx	lr
 8018a68:	4603      	mov	r3, r0
 8018a6a:	e7fb      	b.n	8018a64 <rclc_action_take_goal_handle+0x18>

08018a6c <rclc_action_remove_used_goal_handle>:
 8018a6c:	b180      	cbz	r0, 8018a90 <rclc_action_remove_used_goal_handle+0x24>
 8018a6e:	b179      	cbz	r1, 8018a90 <rclc_action_remove_used_goal_handle+0x24>
 8018a70:	68c3      	ldr	r3, [r0, #12]
 8018a72:	4299      	cmp	r1, r3
 8018a74:	d00d      	beq.n	8018a92 <rclc_action_remove_used_goal_handle+0x26>
 8018a76:	b12b      	cbz	r3, 8018a84 <rclc_action_remove_used_goal_handle+0x18>
 8018a78:	681a      	ldr	r2, [r3, #0]
 8018a7a:	4291      	cmp	r1, r2
 8018a7c:	d003      	beq.n	8018a86 <rclc_action_remove_used_goal_handle+0x1a>
 8018a7e:	4613      	mov	r3, r2
 8018a80:	2b00      	cmp	r3, #0
 8018a82:	d1f9      	bne.n	8018a78 <rclc_action_remove_used_goal_handle+0xc>
 8018a84:	4770      	bx	lr
 8018a86:	680a      	ldr	r2, [r1, #0]
 8018a88:	601a      	str	r2, [r3, #0]
 8018a8a:	6883      	ldr	r3, [r0, #8]
 8018a8c:	600b      	str	r3, [r1, #0]
 8018a8e:	6081      	str	r1, [r0, #8]
 8018a90:	4770      	bx	lr
 8018a92:	680b      	ldr	r3, [r1, #0]
 8018a94:	60c3      	str	r3, [r0, #12]
 8018a96:	e7f8      	b.n	8018a8a <rclc_action_remove_used_goal_handle+0x1e>

08018a98 <rclc_action_find_goal_handle_by_uuid>:
 8018a98:	b538      	push	{r3, r4, r5, lr}
 8018a9a:	b181      	cbz	r1, 8018abe <rclc_action_find_goal_handle_by_uuid+0x26>
 8018a9c:	b178      	cbz	r0, 8018abe <rclc_action_find_goal_handle_by_uuid+0x26>
 8018a9e:	68c4      	ldr	r4, [r0, #12]
 8018aa0:	460d      	mov	r5, r1
 8018aa2:	b914      	cbnz	r4, 8018aaa <rclc_action_find_goal_handle_by_uuid+0x12>
 8018aa4:	e009      	b.n	8018aba <rclc_action_find_goal_handle_by_uuid+0x22>
 8018aa6:	6824      	ldr	r4, [r4, #0]
 8018aa8:	b13c      	cbz	r4, 8018aba <rclc_action_find_goal_handle_by_uuid+0x22>
 8018aaa:	f104 0009 	add.w	r0, r4, #9
 8018aae:	2210      	movs	r2, #16
 8018ab0:	4629      	mov	r1, r5
 8018ab2:	f005 f845 	bl	801db40 <memcmp>
 8018ab6:	2800      	cmp	r0, #0
 8018ab8:	d1f5      	bne.n	8018aa6 <rclc_action_find_goal_handle_by_uuid+0xe>
 8018aba:	4620      	mov	r0, r4
 8018abc:	bd38      	pop	{r3, r4, r5, pc}
 8018abe:	2400      	movs	r4, #0
 8018ac0:	4620      	mov	r0, r4
 8018ac2:	bd38      	pop	{r3, r4, r5, pc}

08018ac4 <rclc_action_find_first_handle_by_status>:
 8018ac4:	b140      	cbz	r0, 8018ad8 <rclc_action_find_first_handle_by_status+0x14>
 8018ac6:	68c0      	ldr	r0, [r0, #12]
 8018ac8:	b910      	cbnz	r0, 8018ad0 <rclc_action_find_first_handle_by_status+0xc>
 8018aca:	e005      	b.n	8018ad8 <rclc_action_find_first_handle_by_status+0x14>
 8018acc:	6800      	ldr	r0, [r0, #0]
 8018ace:	b118      	cbz	r0, 8018ad8 <rclc_action_find_first_handle_by_status+0x14>
 8018ad0:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8018ad4:	428b      	cmp	r3, r1
 8018ad6:	d1f9      	bne.n	8018acc <rclc_action_find_first_handle_by_status+0x8>
 8018ad8:	4770      	bx	lr
 8018ada:	bf00      	nop

08018adc <rclc_action_find_first_terminated_handle>:
 8018adc:	b140      	cbz	r0, 8018af0 <rclc_action_find_first_terminated_handle+0x14>
 8018ade:	68c0      	ldr	r0, [r0, #12]
 8018ae0:	b910      	cbnz	r0, 8018ae8 <rclc_action_find_first_terminated_handle+0xc>
 8018ae2:	e005      	b.n	8018af0 <rclc_action_find_first_terminated_handle+0x14>
 8018ae4:	6800      	ldr	r0, [r0, #0]
 8018ae6:	b118      	cbz	r0, 8018af0 <rclc_action_find_first_terminated_handle+0x14>
 8018ae8:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8018aec:	2b03      	cmp	r3, #3
 8018aee:	ddf9      	ble.n	8018ae4 <rclc_action_find_first_terminated_handle+0x8>
 8018af0:	4770      	bx	lr
 8018af2:	bf00      	nop

08018af4 <rclc_action_find_handle_by_goal_request_sequence_number>:
 8018af4:	b170      	cbz	r0, 8018b14 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8018af6:	68c0      	ldr	r0, [r0, #12]
 8018af8:	b160      	cbz	r0, 8018b14 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8018afa:	b410      	push	{r4}
 8018afc:	e001      	b.n	8018b02 <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 8018afe:	6800      	ldr	r0, [r0, #0]
 8018b00:	b128      	cbz	r0, 8018b0e <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 8018b02:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	; 0x28
 8018b06:	4299      	cmp	r1, r3
 8018b08:	bf08      	it	eq
 8018b0a:	4294      	cmpeq	r4, r2
 8018b0c:	d1f7      	bne.n	8018afe <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 8018b0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018b12:	4770      	bx	lr
 8018b14:	4770      	bx	lr
 8018b16:	bf00      	nop

08018b18 <rclc_action_find_handle_by_result_request_sequence_number>:
 8018b18:	b170      	cbz	r0, 8018b38 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8018b1a:	68c0      	ldr	r0, [r0, #12]
 8018b1c:	b160      	cbz	r0, 8018b38 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8018b1e:	b410      	push	{r4}
 8018b20:	e001      	b.n	8018b26 <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 8018b22:	6800      	ldr	r0, [r0, #0]
 8018b24:	b128      	cbz	r0, 8018b32 <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 8018b26:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	; 0x40
 8018b2a:	4299      	cmp	r1, r3
 8018b2c:	bf08      	it	eq
 8018b2e:	4294      	cmpeq	r4, r2
 8018b30:	d1f7      	bne.n	8018b22 <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 8018b32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018b36:	4770      	bx	lr
 8018b38:	4770      	bx	lr
 8018b3a:	bf00      	nop

08018b3c <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8018b3c:	b170      	cbz	r0, 8018b5c <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8018b3e:	68c0      	ldr	r0, [r0, #12]
 8018b40:	b160      	cbz	r0, 8018b5c <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8018b42:	b410      	push	{r4}
 8018b44:	e001      	b.n	8018b4a <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 8018b46:	6800      	ldr	r0, [r0, #0]
 8018b48:	b128      	cbz	r0, 8018b56 <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 8018b4a:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	; 0x58
 8018b4e:	4299      	cmp	r1, r3
 8018b50:	bf08      	it	eq
 8018b52:	4294      	cmpeq	r4, r2
 8018b54:	d1f7      	bne.n	8018b46 <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 8018b56:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018b5a:	4770      	bx	lr
 8018b5c:	4770      	bx	lr
 8018b5e:	bf00      	nop

08018b60 <rclc_action_find_first_handle_with_goal_response>:
 8018b60:	b140      	cbz	r0, 8018b74 <rclc_action_find_first_handle_with_goal_response+0x14>
 8018b62:	68c0      	ldr	r0, [r0, #12]
 8018b64:	b910      	cbnz	r0, 8018b6c <rclc_action_find_first_handle_with_goal_response+0xc>
 8018b66:	e005      	b.n	8018b74 <rclc_action_find_first_handle_with_goal_response+0x14>
 8018b68:	6800      	ldr	r0, [r0, #0]
 8018b6a:	b118      	cbz	r0, 8018b74 <rclc_action_find_first_handle_with_goal_response+0x14>
 8018b6c:	f890 3020 	ldrb.w	r3, [r0, #32]
 8018b70:	2b00      	cmp	r3, #0
 8018b72:	d0f9      	beq.n	8018b68 <rclc_action_find_first_handle_with_goal_response+0x8>
 8018b74:	4770      	bx	lr
 8018b76:	bf00      	nop

08018b78 <rclc_action_find_first_handle_with_result_response>:
 8018b78:	b140      	cbz	r0, 8018b8c <rclc_action_find_first_handle_with_result_response+0x14>
 8018b7a:	68c0      	ldr	r0, [r0, #12]
 8018b7c:	b910      	cbnz	r0, 8018b84 <rclc_action_find_first_handle_with_result_response+0xc>
 8018b7e:	e005      	b.n	8018b8c <rclc_action_find_first_handle_with_result_response+0x14>
 8018b80:	6800      	ldr	r0, [r0, #0]
 8018b82:	b118      	cbz	r0, 8018b8c <rclc_action_find_first_handle_with_result_response+0x14>
 8018b84:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 8018b88:	2b00      	cmp	r3, #0
 8018b8a:	d0f9      	beq.n	8018b80 <rclc_action_find_first_handle_with_result_response+0x8>
 8018b8c:	4770      	bx	lr
 8018b8e:	bf00      	nop

08018b90 <rclc_action_server_response_goal_request>:
 8018b90:	b198      	cbz	r0, 8018bba <rclc_action_server_response_goal_request+0x2a>
 8018b92:	2200      	movs	r2, #0
 8018b94:	460b      	mov	r3, r1
 8018b96:	f100 0128 	add.w	r1, r0, #40	; 0x28
 8018b9a:	b510      	push	{r4, lr}
 8018b9c:	6844      	ldr	r4, [r0, #4]
 8018b9e:	b086      	sub	sp, #24
 8018ba0:	f104 0010 	add.w	r0, r4, #16
 8018ba4:	9205      	str	r2, [sp, #20]
 8018ba6:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8018baa:	aa03      	add	r2, sp, #12
 8018bac:	f88d 300c 	strb.w	r3, [sp, #12]
 8018bb0:	f7ff fd40 	bl	8018634 <rcl_action_send_goal_response>
 8018bb4:	b918      	cbnz	r0, 8018bbe <rclc_action_server_response_goal_request+0x2e>
 8018bb6:	b006      	add	sp, #24
 8018bb8:	bd10      	pop	{r4, pc}
 8018bba:	200b      	movs	r0, #11
 8018bbc:	4770      	bx	lr
 8018bbe:	9001      	str	r0, [sp, #4]
 8018bc0:	f7f6 f85a 	bl	800ec78 <rcutils_reset_error>
 8018bc4:	9801      	ldr	r0, [sp, #4]
 8018bc6:	b006      	add	sp, #24
 8018bc8:	bd10      	pop	{r4, pc}
 8018bca:	bf00      	nop
 8018bcc:	0000      	movs	r0, r0
	...

08018bd0 <rclc_action_server_goal_cancel_accept>:
 8018bd0:	b310      	cbz	r0, 8018c18 <rclc_action_server_goal_cancel_accept+0x48>
 8018bd2:	b510      	push	{r4, lr}
 8018bd4:	b090      	sub	sp, #64	; 0x40
 8018bd6:	4604      	mov	r4, r0
 8018bd8:	a806      	add	r0, sp, #24
 8018bda:	f7ff feff 	bl	80189dc <rcl_action_get_zero_initialized_cancel_response>
 8018bde:	2300      	movs	r3, #0
 8018be0:	f8d4 0009 	ldr.w	r0, [r4, #9]
 8018be4:	46ec      	mov	ip, sp
 8018be6:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8018bea:	f8d4 2011 	ldr.w	r2, [r4, #17]
 8018bee:	f88d 3018 	strb.w	r3, [sp, #24]
 8018bf2:	f8d4 3015 	ldr.w	r3, [r4, #21]
 8018bf6:	f8cd d01c 	str.w	sp, [sp, #28]
 8018bfa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018bfe:	ed9f 7b08 	vldr	d7, [pc, #32]	; 8018c20 <rclc_action_server_goal_cancel_accept+0x50>
 8018c02:	6860      	ldr	r0, [r4, #4]
 8018c04:	aa06      	add	r2, sp, #24
 8018c06:	f104 0158 	add.w	r1, r4, #88	; 0x58
 8018c0a:	3010      	adds	r0, #16
 8018c0c:	ed8d 7b08 	vstr	d7, [sp, #32]
 8018c10:	f7ff fdc6 	bl	80187a0 <rcl_action_send_cancel_response>
 8018c14:	b010      	add	sp, #64	; 0x40
 8018c16:	bd10      	pop	{r4, pc}
 8018c18:	200b      	movs	r0, #11
 8018c1a:	4770      	bx	lr
 8018c1c:	f3af 8000 	nop.w
 8018c20:	00000001 	.word	0x00000001
 8018c24:	00000001 	.word	0x00000001

08018c28 <rclc_action_server_goal_cancel_reject>:
 8018c28:	b082      	sub	sp, #8
 8018c2a:	b530      	push	{r4, r5, lr}
 8018c2c:	b08b      	sub	sp, #44	; 0x2c
 8018c2e:	ac0e      	add	r4, sp, #56	; 0x38
 8018c30:	e884 000c 	stmia.w	r4, {r2, r3}
 8018c34:	b188      	cbz	r0, 8018c5a <rclc_action_server_goal_cancel_reject+0x32>
 8018c36:	4604      	mov	r4, r0
 8018c38:	a801      	add	r0, sp, #4
 8018c3a:	460d      	mov	r5, r1
 8018c3c:	f7ff fece 	bl	80189dc <rcl_action_get_zero_initialized_cancel_response>
 8018c40:	aa01      	add	r2, sp, #4
 8018c42:	a90e      	add	r1, sp, #56	; 0x38
 8018c44:	f104 0010 	add.w	r0, r4, #16
 8018c48:	f88d 5004 	strb.w	r5, [sp, #4]
 8018c4c:	f7ff fda8 	bl	80187a0 <rcl_action_send_cancel_response>
 8018c50:	b00b      	add	sp, #44	; 0x2c
 8018c52:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018c56:	b002      	add	sp, #8
 8018c58:	4770      	bx	lr
 8018c5a:	200b      	movs	r0, #11
 8018c5c:	b00b      	add	sp, #44	; 0x2c
 8018c5e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018c62:	b002      	add	sp, #8
 8018c64:	4770      	bx	lr
 8018c66:	bf00      	nop

08018c68 <__atomic_load_8>:
 8018c68:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8018c6c:	4a16      	ldr	r2, [pc, #88]	; (8018cc8 <__atomic_load_8+0x60>)
 8018c6e:	4b17      	ldr	r3, [pc, #92]	; (8018ccc <__atomic_load_8+0x64>)
 8018c70:	f04f 0c01 	mov.w	ip, #1
 8018c74:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 8018c78:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8018c7c:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8018c80:	fb02 f101 	mul.w	r1, r2, r1
 8018c84:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8018c88:	fba3 2301 	umull	r2, r3, r3, r1
 8018c8c:	091b      	lsrs	r3, r3, #4
 8018c8e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8018c92:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 8018c96:	b4d0      	push	{r4, r6, r7}
 8018c98:	1ac9      	subs	r1, r1, r3
 8018c9a:	4c0d      	ldr	r4, [pc, #52]	; (8018cd0 <__atomic_load_8+0x68>)
 8018c9c:	1862      	adds	r2, r4, r1
 8018c9e:	e8d2 3f4f 	ldrexb	r3, [r2]
 8018ca2:	e8c2 cf46 	strexb	r6, ip, [r2]
 8018ca6:	2e00      	cmp	r6, #0
 8018ca8:	d1f9      	bne.n	8018c9e <__atomic_load_8+0x36>
 8018caa:	b2db      	uxtb	r3, r3
 8018cac:	f3bf 8f5b 	dmb	ish
 8018cb0:	2b00      	cmp	r3, #0
 8018cb2:	d1f4      	bne.n	8018c9e <__atomic_load_8+0x36>
 8018cb4:	e9d0 6700 	ldrd	r6, r7, [r0]
 8018cb8:	f3bf 8f5b 	dmb	ish
 8018cbc:	5463      	strb	r3, [r4, r1]
 8018cbe:	4630      	mov	r0, r6
 8018cc0:	4639      	mov	r1, r7
 8018cc2:	bcd0      	pop	{r4, r6, r7}
 8018cc4:	4770      	bx	lr
 8018cc6:	bf00      	nop
 8018cc8:	27d4eb2d 	.word	0x27d4eb2d
 8018ccc:	b21642c9 	.word	0xb21642c9
 8018cd0:	20010ba8 	.word	0x20010ba8

08018cd4 <__atomic_store_8>:
 8018cd4:	b570      	push	{r4, r5, r6, lr}
 8018cd6:	ea80 4e10 	eor.w	lr, r0, r0, lsr #16
 8018cda:	4916      	ldr	r1, [pc, #88]	; (8018d34 <__atomic_store_8+0x60>)
 8018cdc:	4c16      	ldr	r4, [pc, #88]	; (8018d38 <__atomic_store_8+0x64>)
 8018cde:	f08e 0e3d 	eor.w	lr, lr, #61	; 0x3d
 8018ce2:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 8018ce6:	ea8e 1e1e 	eor.w	lr, lr, lr, lsr #4
 8018cea:	fb01 fe0e 	mul.w	lr, r1, lr
 8018cee:	4913      	ldr	r1, [pc, #76]	; (8018d3c <__atomic_store_8+0x68>)
 8018cf0:	ea8e 3ede 	eor.w	lr, lr, lr, lsr #15
 8018cf4:	fba1 510e 	umull	r5, r1, r1, lr
 8018cf8:	f04f 0501 	mov.w	r5, #1
 8018cfc:	0909      	lsrs	r1, r1, #4
 8018cfe:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
 8018d02:	ebc1 01cc 	rsb	r1, r1, ip, lsl #3
 8018d06:	ebae 0e01 	sub.w	lr, lr, r1
 8018d0a:	eb04 0c0e 	add.w	ip, r4, lr
 8018d0e:	e8dc 1f4f 	ldrexb	r1, [ip]
 8018d12:	e8cc 5f46 	strexb	r6, r5, [ip]
 8018d16:	2e00      	cmp	r6, #0
 8018d18:	d1f9      	bne.n	8018d0e <__atomic_store_8+0x3a>
 8018d1a:	b2c9      	uxtb	r1, r1
 8018d1c:	f3bf 8f5b 	dmb	ish
 8018d20:	2900      	cmp	r1, #0
 8018d22:	d1f4      	bne.n	8018d0e <__atomic_store_8+0x3a>
 8018d24:	e9c0 2300 	strd	r2, r3, [r0]
 8018d28:	f3bf 8f5b 	dmb	ish
 8018d2c:	f804 100e 	strb.w	r1, [r4, lr]
 8018d30:	bd70      	pop	{r4, r5, r6, pc}
 8018d32:	bf00      	nop
 8018d34:	27d4eb2d 	.word	0x27d4eb2d
 8018d38:	20010ba8 	.word	0x20010ba8
 8018d3c:	b21642c9 	.word	0xb21642c9

08018d40 <__atomic_exchange_8>:
 8018d40:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 8018d44:	4917      	ldr	r1, [pc, #92]	; (8018da4 <__atomic_exchange_8+0x64>)
 8018d46:	f08c 0c3d 	eor.w	ip, ip, #61	; 0x3d
 8018d4a:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 8018d4e:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 8018d52:	fb01 fc0c 	mul.w	ip, r1, ip
 8018d56:	4914      	ldr	r1, [pc, #80]	; (8018da8 <__atomic_exchange_8+0x68>)
 8018d58:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 8018d5c:	b570      	push	{r4, r5, r6, lr}
 8018d5e:	4686      	mov	lr, r0
 8018d60:	fba1 010c 	umull	r0, r1, r1, ip
 8018d64:	4d11      	ldr	r5, [pc, #68]	; (8018dac <__atomic_exchange_8+0x6c>)
 8018d66:	f04f 0001 	mov.w	r0, #1
 8018d6a:	0909      	lsrs	r1, r1, #4
 8018d6c:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 8018d70:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 8018d74:	ebac 0c01 	sub.w	ip, ip, r1
 8018d78:	eb05 010c 	add.w	r1, r5, ip
 8018d7c:	e8d1 4f4f 	ldrexb	r4, [r1]
 8018d80:	e8c1 0f46 	strexb	r6, r0, [r1]
 8018d84:	2e00      	cmp	r6, #0
 8018d86:	d1f9      	bne.n	8018d7c <__atomic_exchange_8+0x3c>
 8018d88:	b2e4      	uxtb	r4, r4
 8018d8a:	f3bf 8f5b 	dmb	ish
 8018d8e:	2c00      	cmp	r4, #0
 8018d90:	d1f4      	bne.n	8018d7c <__atomic_exchange_8+0x3c>
 8018d92:	e9de 0100 	ldrd	r0, r1, [lr]
 8018d96:	e9ce 2300 	strd	r2, r3, [lr]
 8018d9a:	f3bf 8f5b 	dmb	ish
 8018d9e:	f805 400c 	strb.w	r4, [r5, ip]
 8018da2:	bd70      	pop	{r4, r5, r6, pc}
 8018da4:	27d4eb2d 	.word	0x27d4eb2d
 8018da8:	b21642c9 	.word	0xb21642c9
 8018dac:	20010ba8 	.word	0x20010ba8

08018db0 <rcutils_get_env>:
 8018db0:	b168      	cbz	r0, 8018dce <rcutils_get_env+0x1e>
 8018db2:	b510      	push	{r4, lr}
 8018db4:	460c      	mov	r4, r1
 8018db6:	b129      	cbz	r1, 8018dc4 <rcutils_get_env+0x14>
 8018db8:	f004 fb2c 	bl	801d414 <getenv>
 8018dbc:	b120      	cbz	r0, 8018dc8 <rcutils_get_env+0x18>
 8018dbe:	6020      	str	r0, [r4, #0]
 8018dc0:	2000      	movs	r0, #0
 8018dc2:	bd10      	pop	{r4, pc}
 8018dc4:	4803      	ldr	r0, [pc, #12]	; (8018dd4 <rcutils_get_env+0x24>)
 8018dc6:	bd10      	pop	{r4, pc}
 8018dc8:	4b03      	ldr	r3, [pc, #12]	; (8018dd8 <rcutils_get_env+0x28>)
 8018dca:	6023      	str	r3, [r4, #0]
 8018dcc:	bd10      	pop	{r4, pc}
 8018dce:	4803      	ldr	r0, [pc, #12]	; (8018ddc <rcutils_get_env+0x2c>)
 8018dd0:	4770      	bx	lr
 8018dd2:	bf00      	nop
 8018dd4:	080203fc 	.word	0x080203fc
 8018dd8:	08020520 	.word	0x08020520
 8018ddc:	080203e0 	.word	0x080203e0

08018de0 <rcutils_is_directory>:
 8018de0:	2000      	movs	r0, #0
 8018de2:	4770      	bx	lr

08018de4 <rcutils_join_path>:
 8018de4:	b082      	sub	sp, #8
 8018de6:	2000      	movs	r0, #0
 8018de8:	e88d 000c 	stmia.w	sp, {r2, r3}
 8018dec:	b002      	add	sp, #8
 8018dee:	4770      	bx	lr

08018df0 <rcutils_to_native_path>:
 8018df0:	b084      	sub	sp, #16
 8018df2:	2000      	movs	r0, #0
 8018df4:	f10d 0c04 	add.w	ip, sp, #4
 8018df8:	b004      	add	sp, #16
 8018dfa:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 8018dfe:	4770      	bx	lr

08018e00 <rcutils_format_string_limit>:
 8018e00:	b40f      	push	{r0, r1, r2, r3}
 8018e02:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018e04:	b083      	sub	sp, #12
 8018e06:	ac08      	add	r4, sp, #32
 8018e08:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8018e0a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8018e0e:	b326      	cbz	r6, 8018e5a <rcutils_format_string_limit+0x5a>
 8018e10:	a808      	add	r0, sp, #32
 8018e12:	f7f5 ff0d 	bl	800ec30 <rcutils_allocator_is_valid>
 8018e16:	b300      	cbz	r0, 8018e5a <rcutils_format_string_limit+0x5a>
 8018e18:	2100      	movs	r1, #0
 8018e1a:	ab0f      	add	r3, sp, #60	; 0x3c
 8018e1c:	4632      	mov	r2, r6
 8018e1e:	4608      	mov	r0, r1
 8018e20:	e9cd 3300 	strd	r3, r3, [sp]
 8018e24:	f000 f906 	bl	8019034 <rcutils_vsnprintf>
 8018e28:	1c43      	adds	r3, r0, #1
 8018e2a:	4605      	mov	r5, r0
 8018e2c:	d015      	beq.n	8018e5a <rcutils_format_string_limit+0x5a>
 8018e2e:	1c47      	adds	r7, r0, #1
 8018e30:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018e32:	429f      	cmp	r7, r3
 8018e34:	d901      	bls.n	8018e3a <rcutils_format_string_limit+0x3a>
 8018e36:	1e5d      	subs	r5, r3, #1
 8018e38:	461f      	mov	r7, r3
 8018e3a:	9b08      	ldr	r3, [sp, #32]
 8018e3c:	4638      	mov	r0, r7
 8018e3e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8018e40:	4798      	blx	r3
 8018e42:	4604      	mov	r4, r0
 8018e44:	b148      	cbz	r0, 8018e5a <rcutils_format_string_limit+0x5a>
 8018e46:	4632      	mov	r2, r6
 8018e48:	4639      	mov	r1, r7
 8018e4a:	9b01      	ldr	r3, [sp, #4]
 8018e4c:	f000 f8f2 	bl	8019034 <rcutils_vsnprintf>
 8018e50:	2800      	cmp	r0, #0
 8018e52:	db09      	blt.n	8018e68 <rcutils_format_string_limit+0x68>
 8018e54:	2300      	movs	r3, #0
 8018e56:	5563      	strb	r3, [r4, r5]
 8018e58:	e000      	b.n	8018e5c <rcutils_format_string_limit+0x5c>
 8018e5a:	2400      	movs	r4, #0
 8018e5c:	4620      	mov	r0, r4
 8018e5e:	b003      	add	sp, #12
 8018e60:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8018e64:	b004      	add	sp, #16
 8018e66:	4770      	bx	lr
 8018e68:	4620      	mov	r0, r4
 8018e6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018e6c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8018e6e:	2400      	movs	r4, #0
 8018e70:	4798      	blx	r3
 8018e72:	e7f3      	b.n	8018e5c <rcutils_format_string_limit+0x5c>

08018e74 <rcutils_repl_str>:
 8018e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e78:	ed2d 8b02 	vpush	{d8}
 8018e7c:	b087      	sub	sp, #28
 8018e7e:	2600      	movs	r6, #0
 8018e80:	4680      	mov	r8, r0
 8018e82:	468a      	mov	sl, r1
 8018e84:	9000      	str	r0, [sp, #0]
 8018e86:	4608      	mov	r0, r1
 8018e88:	ee08 2a10 	vmov	s16, r2
 8018e8c:	4699      	mov	r9, r3
 8018e8e:	2510      	movs	r5, #16
 8018e90:	f7e7 fa36 	bl	8000300 <strlen>
 8018e94:	4637      	mov	r7, r6
 8018e96:	46b3      	mov	fp, r6
 8018e98:	9001      	str	r0, [sp, #4]
 8018e9a:	e01e      	b.n	8018eda <rcutils_repl_str+0x66>
 8018e9c:	f10b 0b01 	add.w	fp, fp, #1
 8018ea0:	9b01      	ldr	r3, [sp, #4]
 8018ea2:	455e      	cmp	r6, fp
 8018ea4:	eb04 0803 	add.w	r8, r4, r3
 8018ea8:	d211      	bcs.n	8018ece <rcutils_repl_str+0x5a>
 8018eaa:	442e      	add	r6, r5
 8018eac:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8018eb0:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8018eb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018eb8:	00b1      	lsls	r1, r6, #2
 8018eba:	4798      	blx	r3
 8018ebc:	2800      	cmp	r0, #0
 8018ebe:	f000 8088 	beq.w	8018fd2 <rcutils_repl_str+0x15e>
 8018ec2:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 8018ec6:	4607      	mov	r7, r0
 8018ec8:	bf28      	it	cs
 8018eca:	f44f 1580 	movcs.w	r5, #1048576	; 0x100000
 8018ece:	9a00      	ldr	r2, [sp, #0]
 8018ed0:	eb07 038b 	add.w	r3, r7, fp, lsl #2
 8018ed4:	1aa4      	subs	r4, r4, r2
 8018ed6:	f843 4c04 	str.w	r4, [r3, #-4]
 8018eda:	4651      	mov	r1, sl
 8018edc:	4640      	mov	r0, r8
 8018ede:	f004 fe93 	bl	801dc08 <strstr>
 8018ee2:	4604      	mov	r4, r0
 8018ee4:	4638      	mov	r0, r7
 8018ee6:	2c00      	cmp	r4, #0
 8018ee8:	d1d8      	bne.n	8018e9c <rcutils_repl_str+0x28>
 8018eea:	4640      	mov	r0, r8
 8018eec:	f7e7 fa08 	bl	8000300 <strlen>
 8018ef0:	9b00      	ldr	r3, [sp, #0]
 8018ef2:	eba8 0803 	sub.w	r8, r8, r3
 8018ef6:	eb08 0400 	add.w	r4, r8, r0
 8018efa:	9402      	str	r4, [sp, #8]
 8018efc:	f1bb 0f00 	cmp.w	fp, #0
 8018f00:	d045      	beq.n	8018f8e <rcutils_repl_str+0x11a>
 8018f02:	ee18 0a10 	vmov	r0, s16
 8018f06:	f7e7 f9fb 	bl	8000300 <strlen>
 8018f0a:	9a01      	ldr	r2, [sp, #4]
 8018f0c:	4606      	mov	r6, r0
 8018f0e:	f8d9 3000 	ldr.w	r3, [r9]
 8018f12:	1a82      	subs	r2, r0, r2
 8018f14:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8018f18:	fb0b 4202 	mla	r2, fp, r2, r4
 8018f1c:	1c50      	adds	r0, r2, #1
 8018f1e:	9205      	str	r2, [sp, #20]
 8018f20:	4798      	blx	r3
 8018f22:	4682      	mov	sl, r0
 8018f24:	2800      	cmp	r0, #0
 8018f26:	d054      	beq.n	8018fd2 <rcutils_repl_str+0x15e>
 8018f28:	683a      	ldr	r2, [r7, #0]
 8018f2a:	463d      	mov	r5, r7
 8018f2c:	9900      	ldr	r1, [sp, #0]
 8018f2e:	2401      	movs	r4, #1
 8018f30:	f004 ff61 	bl	801ddf6 <memcpy>
 8018f34:	683b      	ldr	r3, [r7, #0]
 8018f36:	e9cd 7a03 	strd	r7, sl, [sp, #12]
 8018f3a:	eb0a 0803 	add.w	r8, sl, r3
 8018f3e:	ee18 7a10 	vmov	r7, s16
 8018f42:	f8dd a000 	ldr.w	sl, [sp]
 8018f46:	f8cd 9000 	str.w	r9, [sp]
 8018f4a:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8018f4e:	4632      	mov	r2, r6
 8018f50:	4639      	mov	r1, r7
 8018f52:	4640      	mov	r0, r8
 8018f54:	44b0      	add	r8, r6
 8018f56:	f004 ff4e 	bl	801ddf6 <memcpy>
 8018f5a:	f855 2b04 	ldr.w	r2, [r5], #4
 8018f5e:	45a3      	cmp	fp, r4
 8018f60:	444a      	add	r2, r9
 8018f62:	eb0a 0102 	add.w	r1, sl, r2
 8018f66:	d02a      	beq.n	8018fbe <rcutils_repl_str+0x14a>
 8018f68:	6828      	ldr	r0, [r5, #0]
 8018f6a:	1a82      	subs	r2, r0, r2
 8018f6c:	4640      	mov	r0, r8
 8018f6e:	4490      	add	r8, r2
 8018f70:	f004 ff41 	bl	801ddf6 <memcpy>
 8018f74:	1c62      	adds	r2, r4, #1
 8018f76:	45a3      	cmp	fp, r4
 8018f78:	4614      	mov	r4, r2
 8018f7a:	d8e8      	bhi.n	8018f4e <rcutils_repl_str+0xda>
 8018f7c:	f8dd 9000 	ldr.w	r9, [sp]
 8018f80:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 8018f84:	2300      	movs	r3, #0
 8018f86:	9a05      	ldr	r2, [sp, #20]
 8018f88:	f80a 3002 	strb.w	r3, [sl, r2]
 8018f8c:	e00b      	b.n	8018fa6 <rcutils_repl_str+0x132>
 8018f8e:	4620      	mov	r0, r4
 8018f90:	f8d9 3000 	ldr.w	r3, [r9]
 8018f94:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8018f98:	3001      	adds	r0, #1
 8018f9a:	4798      	blx	r3
 8018f9c:	4682      	mov	sl, r0
 8018f9e:	b110      	cbz	r0, 8018fa6 <rcutils_repl_str+0x132>
 8018fa0:	9900      	ldr	r1, [sp, #0]
 8018fa2:	f004 ff20 	bl	801dde6 <strcpy>
 8018fa6:	4638      	mov	r0, r7
 8018fa8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8018fac:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8018fb0:	4798      	blx	r3
 8018fb2:	4650      	mov	r0, sl
 8018fb4:	b007      	add	sp, #28
 8018fb6:	ecbd 8b02 	vpop	{d8}
 8018fba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018fbe:	9b02      	ldr	r3, [sp, #8]
 8018fc0:	4640      	mov	r0, r8
 8018fc2:	f8dd 9000 	ldr.w	r9, [sp]
 8018fc6:	1a9a      	subs	r2, r3, r2
 8018fc8:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 8018fcc:	f004 ff13 	bl	801ddf6 <memcpy>
 8018fd0:	e7d8      	b.n	8018f84 <rcutils_repl_str+0x110>
 8018fd2:	f04f 0a00 	mov.w	sl, #0
 8018fd6:	e7e6      	b.n	8018fa6 <rcutils_repl_str+0x132>

08018fd8 <rcutils_snprintf>:
 8018fd8:	b40c      	push	{r2, r3}
 8018fda:	b530      	push	{r4, r5, lr}
 8018fdc:	b083      	sub	sp, #12
 8018fde:	ab06      	add	r3, sp, #24
 8018fe0:	f853 2b04 	ldr.w	r2, [r3], #4
 8018fe4:	9301      	str	r3, [sp, #4]
 8018fe6:	b1e2      	cbz	r2, 8019022 <rcutils_snprintf+0x4a>
 8018fe8:	fab0 f480 	clz	r4, r0
 8018fec:	fab1 f581 	clz	r5, r1
 8018ff0:	ea50 0c01 	orrs.w	ip, r0, r1
 8018ff4:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8018ff8:	ea4f 1555 	mov.w	r5, r5, lsr #5
 8018ffc:	d008      	beq.n	8019010 <rcutils_snprintf+0x38>
 8018ffe:	b984      	cbnz	r4, 8019022 <rcutils_snprintf+0x4a>
 8019000:	b97d      	cbnz	r5, 8019022 <rcutils_snprintf+0x4a>
 8019002:	f004 fd8f 	bl	801db24 <vsniprintf>
 8019006:	b003      	add	sp, #12
 8019008:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801900c:	b002      	add	sp, #8
 801900e:	4770      	bx	lr
 8019010:	4661      	mov	r1, ip
 8019012:	4660      	mov	r0, ip
 8019014:	f004 fd86 	bl	801db24 <vsniprintf>
 8019018:	b003      	add	sp, #12
 801901a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801901e:	b002      	add	sp, #8
 8019020:	4770      	bx	lr
 8019022:	f004 feb3 	bl	801dd8c <__errno>
 8019026:	2216      	movs	r2, #22
 8019028:	4603      	mov	r3, r0
 801902a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801902e:	601a      	str	r2, [r3, #0]
 8019030:	e7e9      	b.n	8019006 <rcutils_snprintf+0x2e>
 8019032:	bf00      	nop

08019034 <rcutils_vsnprintf>:
 8019034:	b570      	push	{r4, r5, r6, lr}
 8019036:	b1b2      	cbz	r2, 8019066 <rcutils_vsnprintf+0x32>
 8019038:	fab0 f480 	clz	r4, r0
 801903c:	fab1 f581 	clz	r5, r1
 8019040:	ea50 0c01 	orrs.w	ip, r0, r1
 8019044:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8019048:	ea4f 1555 	mov.w	r5, r5, lsr #5
 801904c:	d005      	beq.n	801905a <rcutils_vsnprintf+0x26>
 801904e:	b954      	cbnz	r4, 8019066 <rcutils_vsnprintf+0x32>
 8019050:	b94d      	cbnz	r5, 8019066 <rcutils_vsnprintf+0x32>
 8019052:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019056:	f004 bd65 	b.w	801db24 <vsniprintf>
 801905a:	4661      	mov	r1, ip
 801905c:	4660      	mov	r0, ip
 801905e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019062:	f004 bd5f 	b.w	801db24 <vsniprintf>
 8019066:	f004 fe91 	bl	801dd8c <__errno>
 801906a:	2316      	movs	r3, #22
 801906c:	6003      	str	r3, [r0, #0]
 801906e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019072:	bd70      	pop	{r4, r5, r6, pc}

08019074 <rcutils_strdup>:
 8019074:	b084      	sub	sp, #16
 8019076:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019078:	ac07      	add	r4, sp, #28
 801907a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801907c:	4605      	mov	r5, r0
 801907e:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8019082:	b1d0      	cbz	r0, 80190ba <rcutils_strdup+0x46>
 8019084:	460c      	mov	r4, r1
 8019086:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801908a:	2100      	movs	r1, #0
 801908c:	f7e7 f8e8 	bl	8000260 <memchr>
 8019090:	b180      	cbz	r0, 80190b4 <rcutils_strdup+0x40>
 8019092:	1b46      	subs	r6, r0, r5
 8019094:	1c70      	adds	r0, r6, #1
 8019096:	4639      	mov	r1, r7
 8019098:	47a0      	blx	r4
 801909a:	4604      	mov	r4, r0
 801909c:	b128      	cbz	r0, 80190aa <rcutils_strdup+0x36>
 801909e:	4632      	mov	r2, r6
 80190a0:	4629      	mov	r1, r5
 80190a2:	f004 fea8 	bl	801ddf6 <memcpy>
 80190a6:	2300      	movs	r3, #0
 80190a8:	55a3      	strb	r3, [r4, r6]
 80190aa:	4620      	mov	r0, r4
 80190ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80190b0:	b004      	add	sp, #16
 80190b2:	4770      	bx	lr
 80190b4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80190b8:	e7ed      	b.n	8019096 <rcutils_strdup+0x22>
 80190ba:	4604      	mov	r4, r0
 80190bc:	e7f5      	b.n	80190aa <rcutils_strdup+0x36>
 80190be:	bf00      	nop

080190c0 <rcutils_strndup>:
 80190c0:	b082      	sub	sp, #8
 80190c2:	b570      	push	{r4, r5, r6, lr}
 80190c4:	ac04      	add	r4, sp, #16
 80190c6:	4606      	mov	r6, r0
 80190c8:	e884 000c 	stmia.w	r4, {r2, r3}
 80190cc:	b1b8      	cbz	r0, 80190fe <rcutils_strndup+0x3e>
 80190ce:	460c      	mov	r4, r1
 80190d0:	460a      	mov	r2, r1
 80190d2:	2100      	movs	r1, #0
 80190d4:	f7e7 f8c4 	bl	8000260 <memchr>
 80190d8:	b100      	cbz	r0, 80190dc <rcutils_strndup+0x1c>
 80190da:	1b84      	subs	r4, r0, r6
 80190dc:	9b04      	ldr	r3, [sp, #16]
 80190de:	1c60      	adds	r0, r4, #1
 80190e0:	9908      	ldr	r1, [sp, #32]
 80190e2:	4798      	blx	r3
 80190e4:	4605      	mov	r5, r0
 80190e6:	b128      	cbz	r0, 80190f4 <rcutils_strndup+0x34>
 80190e8:	4622      	mov	r2, r4
 80190ea:	4631      	mov	r1, r6
 80190ec:	f004 fe83 	bl	801ddf6 <memcpy>
 80190f0:	2300      	movs	r3, #0
 80190f2:	552b      	strb	r3, [r5, r4]
 80190f4:	4628      	mov	r0, r5
 80190f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80190fa:	b002      	add	sp, #8
 80190fc:	4770      	bx	lr
 80190fe:	4605      	mov	r5, r0
 8019100:	e7f8      	b.n	80190f4 <rcutils_strndup+0x34>
 8019102:	bf00      	nop

08019104 <rcutils_get_zero_initialized_string_map>:
 8019104:	2000      	movs	r0, #0
 8019106:	4b01      	ldr	r3, [pc, #4]	; (801910c <rcutils_get_zero_initialized_string_map+0x8>)
 8019108:	6018      	str	r0, [r3, #0]
 801910a:	4770      	bx	lr
 801910c:	20010bc0 	.word	0x20010bc0

08019110 <rcutils_string_map_reserve>:
 8019110:	2800      	cmp	r0, #0
 8019112:	d03e      	beq.n	8019192 <rcutils_string_map_reserve+0x82>
 8019114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019116:	6805      	ldr	r5, [r0, #0]
 8019118:	4606      	mov	r6, r0
 801911a:	460c      	mov	r4, r1
 801911c:	b12d      	cbz	r5, 801912a <rcutils_string_map_reserve+0x1a>
 801911e:	68ab      	ldr	r3, [r5, #8]
 8019120:	42a3      	cmp	r3, r4
 8019122:	d904      	bls.n	801912e <rcutils_string_map_reserve+0x1e>
 8019124:	461c      	mov	r4, r3
 8019126:	2d00      	cmp	r5, #0
 8019128:	d1f9      	bne.n	801911e <rcutils_string_map_reserve+0xe>
 801912a:	201f      	movs	r0, #31
 801912c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801912e:	686b      	ldr	r3, [r5, #4]
 8019130:	42a3      	cmp	r3, r4
 8019132:	d02a      	beq.n	801918a <rcutils_string_map_reserve+0x7a>
 8019134:	69e9      	ldr	r1, [r5, #28]
 8019136:	b304      	cbz	r4, 801917a <rcutils_string_map_reserve+0x6a>
 8019138:	f1b4 5f00 	cmp.w	r4, #536870912	; 0x20000000
 801913c:	d227      	bcs.n	801918e <rcutils_string_map_reserve+0x7e>
 801913e:	00e7      	lsls	r7, r4, #3
 8019140:	460a      	mov	r2, r1
 8019142:	696b      	ldr	r3, [r5, #20]
 8019144:	6828      	ldr	r0, [r5, #0]
 8019146:	4639      	mov	r1, r7
 8019148:	4798      	blx	r3
 801914a:	b300      	cbz	r0, 801918e <rcutils_string_map_reserve+0x7e>
 801914c:	6835      	ldr	r5, [r6, #0]
 801914e:	686a      	ldr	r2, [r5, #4]
 8019150:	6028      	str	r0, [r5, #0]
 8019152:	42a2      	cmp	r2, r4
 8019154:	d216      	bcs.n	8019184 <rcutils_string_map_reserve+0x74>
 8019156:	43d1      	mvns	r1, r2
 8019158:	eb00 03c2 	add.w	r3, r0, r2, lsl #3
 801915c:	4421      	add	r1, r4
 801915e:	2909      	cmp	r1, #9
 8019160:	d919      	bls.n	8019196 <rcutils_string_map_reserve+0x86>
 8019162:	0759      	lsls	r1, r3, #29
 8019164:	d117      	bne.n	8019196 <rcutils_string_map_reserve+0x86>
 8019166:	1aa1      	subs	r1, r4, r2
 8019168:	2600      	movs	r6, #0
 801916a:	2200      	movs	r2, #0
 801916c:	2700      	movs	r7, #0
 801916e:	3201      	adds	r2, #1
 8019170:	4291      	cmp	r1, r2
 8019172:	e8e3 6702 	strd	r6, r7, [r3], #8
 8019176:	d8fa      	bhi.n	801916e <rcutils_string_map_reserve+0x5e>
 8019178:	e004      	b.n	8019184 <rcutils_string_map_reserve+0x74>
 801917a:	692b      	ldr	r3, [r5, #16]
 801917c:	6828      	ldr	r0, [r5, #0]
 801917e:	4798      	blx	r3
 8019180:	6835      	ldr	r5, [r6, #0]
 8019182:	602c      	str	r4, [r5, #0]
 8019184:	2000      	movs	r0, #0
 8019186:	606c      	str	r4, [r5, #4]
 8019188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801918a:	2000      	movs	r0, #0
 801918c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801918e:	200a      	movs	r0, #10
 8019190:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019192:	200b      	movs	r0, #11
 8019194:	4770      	bx	lr
 8019196:	4438      	add	r0, r7
 8019198:	2200      	movs	r2, #0
 801919a:	e9c3 2200 	strd	r2, r2, [r3]
 801919e:	3308      	adds	r3, #8
 80191a0:	4283      	cmp	r3, r0
 80191a2:	d1fa      	bne.n	801919a <rcutils_string_map_reserve+0x8a>
 80191a4:	e7ee      	b.n	8019184 <rcutils_string_map_reserve+0x74>
 80191a6:	bf00      	nop

080191a8 <rcutils_string_map_init>:
 80191a8:	b082      	sub	sp, #8
 80191aa:	b570      	push	{r4, r5, r6, lr}
 80191ac:	ac04      	add	r4, sp, #16
 80191ae:	e884 000c 	stmia.w	r4, {r2, r3}
 80191b2:	b378      	cbz	r0, 8019214 <rcutils_string_map_init+0x6c>
 80191b4:	6806      	ldr	r6, [r0, #0]
 80191b6:	4604      	mov	r4, r0
 80191b8:	b12e      	cbz	r6, 80191c6 <rcutils_string_map_init+0x1e>
 80191ba:	251e      	movs	r5, #30
 80191bc:	4628      	mov	r0, r5
 80191be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80191c2:	b002      	add	sp, #8
 80191c4:	4770      	bx	lr
 80191c6:	a804      	add	r0, sp, #16
 80191c8:	460d      	mov	r5, r1
 80191ca:	f7f5 fd31 	bl	800ec30 <rcutils_allocator_is_valid>
 80191ce:	b308      	cbz	r0, 8019214 <rcutils_string_map_init+0x6c>
 80191d0:	9b04      	ldr	r3, [sp, #16]
 80191d2:	2020      	movs	r0, #32
 80191d4:	9908      	ldr	r1, [sp, #32]
 80191d6:	4798      	blx	r3
 80191d8:	6020      	str	r0, [r4, #0]
 80191da:	b308      	cbz	r0, 8019220 <rcutils_string_map_init+0x78>
 80191dc:	f10d 0e10 	add.w	lr, sp, #16
 80191e0:	6086      	str	r6, [r0, #8]
 80191e2:	f100 0c0c 	add.w	ip, r0, #12
 80191e6:	e9c0 6600 	strd	r6, r6, [r0]
 80191ea:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80191ee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80191f2:	f8de 3000 	ldr.w	r3, [lr]
 80191f6:	4629      	mov	r1, r5
 80191f8:	4620      	mov	r0, r4
 80191fa:	f8cc 3000 	str.w	r3, [ip]
 80191fe:	f7ff ff87 	bl	8019110 <rcutils_string_map_reserve>
 8019202:	4605      	mov	r5, r0
 8019204:	2800      	cmp	r0, #0
 8019206:	d0d9      	beq.n	80191bc <rcutils_string_map_init+0x14>
 8019208:	9b05      	ldr	r3, [sp, #20]
 801920a:	9908      	ldr	r1, [sp, #32]
 801920c:	6820      	ldr	r0, [r4, #0]
 801920e:	4798      	blx	r3
 8019210:	6026      	str	r6, [r4, #0]
 8019212:	e7d3      	b.n	80191bc <rcutils_string_map_init+0x14>
 8019214:	250b      	movs	r5, #11
 8019216:	4628      	mov	r0, r5
 8019218:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801921c:	b002      	add	sp, #8
 801921e:	4770      	bx	lr
 8019220:	250a      	movs	r5, #10
 8019222:	e7cb      	b.n	80191bc <rcutils_string_map_init+0x14>

08019224 <rcutils_string_map_fini>:
 8019224:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019228:	b083      	sub	sp, #12
 801922a:	2800      	cmp	r0, #0
 801922c:	d03e      	beq.n	80192ac <rcutils_string_map_fini+0x88>
 801922e:	6804      	ldr	r4, [r0, #0]
 8019230:	4606      	mov	r6, r0
 8019232:	2c00      	cmp	r4, #0
 8019234:	d036      	beq.n	80192a4 <rcutils_string_map_fini+0x80>
 8019236:	6863      	ldr	r3, [r4, #4]
 8019238:	b34b      	cbz	r3, 801928e <rcutils_string_map_fini+0x6a>
 801923a:	2500      	movs	r5, #0
 801923c:	6822      	ldr	r2, [r4, #0]
 801923e:	462f      	mov	r7, r5
 8019240:	f852 0035 	ldr.w	r0, [r2, r5, lsl #3]
 8019244:	ea4f 08c5 	mov.w	r8, r5, lsl #3
 8019248:	b1f0      	cbz	r0, 8019288 <rcutils_string_map_fini+0x64>
 801924a:	69e1      	ldr	r1, [r4, #28]
 801924c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8019250:	9101      	str	r1, [sp, #4]
 8019252:	47c8      	blx	r9
 8019254:	6823      	ldr	r3, [r4, #0]
 8019256:	9901      	ldr	r1, [sp, #4]
 8019258:	eb03 0208 	add.w	r2, r3, r8
 801925c:	f843 7035 	str.w	r7, [r3, r5, lsl #3]
 8019260:	3501      	adds	r5, #1
 8019262:	6850      	ldr	r0, [r2, #4]
 8019264:	47c8      	blx	r9
 8019266:	68a3      	ldr	r3, [r4, #8]
 8019268:	6822      	ldr	r2, [r4, #0]
 801926a:	3b01      	subs	r3, #1
 801926c:	4442      	add	r2, r8
 801926e:	6057      	str	r7, [r2, #4]
 8019270:	60a3      	str	r3, [r4, #8]
 8019272:	6834      	ldr	r4, [r6, #0]
 8019274:	6863      	ldr	r3, [r4, #4]
 8019276:	429d      	cmp	r5, r3
 8019278:	d209      	bcs.n	801928e <rcutils_string_map_fini+0x6a>
 801927a:	6822      	ldr	r2, [r4, #0]
 801927c:	ea4f 08c5 	mov.w	r8, r5, lsl #3
 8019280:	f852 0035 	ldr.w	r0, [r2, r5, lsl #3]
 8019284:	2800      	cmp	r0, #0
 8019286:	d1e0      	bne.n	801924a <rcutils_string_map_fini+0x26>
 8019288:	3501      	adds	r5, #1
 801928a:	429d      	cmp	r5, r3
 801928c:	d3d8      	bcc.n	8019240 <rcutils_string_map_fini+0x1c>
 801928e:	2100      	movs	r1, #0
 8019290:	4630      	mov	r0, r6
 8019292:	f7ff ff3d 	bl	8019110 <rcutils_string_map_reserve>
 8019296:	4604      	mov	r4, r0
 8019298:	b920      	cbnz	r0, 80192a4 <rcutils_string_map_fini+0x80>
 801929a:	6830      	ldr	r0, [r6, #0]
 801929c:	6903      	ldr	r3, [r0, #16]
 801929e:	69c1      	ldr	r1, [r0, #28]
 80192a0:	4798      	blx	r3
 80192a2:	6034      	str	r4, [r6, #0]
 80192a4:	4620      	mov	r0, r4
 80192a6:	b003      	add	sp, #12
 80192a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80192ac:	240b      	movs	r4, #11
 80192ae:	4620      	mov	r0, r4
 80192b0:	b003      	add	sp, #12
 80192b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80192b6:	bf00      	nop

080192b8 <rcutils_string_map_getn>:
 80192b8:	b338      	cbz	r0, 801930a <rcutils_string_map_getn+0x52>
 80192ba:	6803      	ldr	r3, [r0, #0]
 80192bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80192c0:	4688      	mov	r8, r1
 80192c2:	b1d9      	cbz	r1, 80192fc <rcutils_string_map_getn+0x44>
 80192c4:	fab3 f483 	clz	r4, r3
 80192c8:	0964      	lsrs	r4, r4, #5
 80192ca:	b1bb      	cbz	r3, 80192fc <rcutils_string_map_getn+0x44>
 80192cc:	4691      	mov	r9, r2
 80192ce:	e9d3 7600 	ldrd	r7, r6, [r3]
 80192d2:	b19e      	cbz	r6, 80192fc <rcutils_string_map_getn+0x44>
 80192d4:	f857 5034 	ldr.w	r5, [r7, r4, lsl #3]
 80192d8:	eb07 0ac4 	add.w	sl, r7, r4, lsl #3
 80192dc:	3401      	adds	r4, #1
 80192de:	4628      	mov	r0, r5
 80192e0:	b155      	cbz	r5, 80192f8 <rcutils_string_map_getn+0x40>
 80192e2:	f7e7 f80d 	bl	8000300 <strlen>
 80192e6:	4602      	mov	r2, r0
 80192e8:	4629      	mov	r1, r5
 80192ea:	4640      	mov	r0, r8
 80192ec:	454a      	cmp	r2, r9
 80192ee:	bf38      	it	cc
 80192f0:	464a      	movcc	r2, r9
 80192f2:	f004 fc64 	bl	801dbbe <strncmp>
 80192f6:	b120      	cbz	r0, 8019302 <rcutils_string_map_getn+0x4a>
 80192f8:	42a6      	cmp	r6, r4
 80192fa:	d1eb      	bne.n	80192d4 <rcutils_string_map_getn+0x1c>
 80192fc:	2000      	movs	r0, #0
 80192fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019302:	f8da 0004 	ldr.w	r0, [sl, #4]
 8019306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801930a:	4770      	bx	lr
 801930c:	0000      	movs	r0, r0
	...

08019310 <rmw_get_zero_initialized_context>:
 8019310:	b510      	push	{r4, lr}
 8019312:	4604      	mov	r4, r0
 8019314:	3010      	adds	r0, #16
 8019316:	f000 f80f 	bl	8019338 <rmw_get_zero_initialized_init_options>
 801931a:	2300      	movs	r3, #0
 801931c:	4620      	mov	r0, r4
 801931e:	60a3      	str	r3, [r4, #8]
 8019320:	66a3      	str	r3, [r4, #104]	; 0x68
 8019322:	66e3      	str	r3, [r4, #108]	; 0x6c
 8019324:	ed9f 7b02 	vldr	d7, [pc, #8]	; 8019330 <rmw_get_zero_initialized_context+0x20>
 8019328:	ed84 7b00 	vstr	d7, [r4]
 801932c:	bd10      	pop	{r4, pc}
 801932e:	bf00      	nop
	...

08019338 <rmw_get_zero_initialized_init_options>:
 8019338:	b510      	push	{r4, lr}
 801933a:	4604      	mov	r4, r0
 801933c:	2258      	movs	r2, #88	; 0x58
 801933e:	2100      	movs	r1, #0
 8019340:	f004 fc28 	bl	801db94 <memset>
 8019344:	f104 0010 	add.w	r0, r4, #16
 8019348:	f000 f80a 	bl	8019360 <rmw_get_default_security_options>
 801934c:	f104 001c 	add.w	r0, r4, #28
 8019350:	f003 fe50 	bl	801cff4 <rmw_get_zero_initialized_discovery_options>
 8019354:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019358:	4620      	mov	r0, r4
 801935a:	60e3      	str	r3, [r4, #12]
 801935c:	bd10      	pop	{r4, pc}
 801935e:	bf00      	nop

08019360 <rmw_get_default_security_options>:
 8019360:	2200      	movs	r2, #0
 8019362:	7002      	strb	r2, [r0, #0]
 8019364:	6042      	str	r2, [r0, #4]
 8019366:	4770      	bx	lr

08019368 <rmw_subscription_content_filter_options_fini>:
 8019368:	b1b0      	cbz	r0, 8019398 <rmw_subscription_content_filter_options_fini+0x30>
 801936a:	b538      	push	{r3, r4, r5, lr}
 801936c:	4604      	mov	r4, r0
 801936e:	4608      	mov	r0, r1
 8019370:	460d      	mov	r5, r1
 8019372:	f7f5 fc5d 	bl	800ec30 <rcutils_allocator_is_valid>
 8019376:	b168      	cbz	r0, 8019394 <rmw_subscription_content_filter_options_fini+0x2c>
 8019378:	6820      	ldr	r0, [r4, #0]
 801937a:	b120      	cbz	r0, 8019386 <rmw_subscription_content_filter_options_fini+0x1e>
 801937c:	686b      	ldr	r3, [r5, #4]
 801937e:	6929      	ldr	r1, [r5, #16]
 8019380:	4798      	blx	r3
 8019382:	2300      	movs	r3, #0
 8019384:	6023      	str	r3, [r4, #0]
 8019386:	1d20      	adds	r0, r4, #4
 8019388:	f003 fe0a 	bl	801cfa0 <rcutils_string_array_fini>
 801938c:	3800      	subs	r0, #0
 801938e:	bf18      	it	ne
 8019390:	2001      	movne	r0, #1
 8019392:	bd38      	pop	{r3, r4, r5, pc}
 8019394:	200b      	movs	r0, #11
 8019396:	bd38      	pop	{r3, r4, r5, pc}
 8019398:	200b      	movs	r0, #11
 801939a:	4770      	bx	lr

0801939c <rmw_get_default_subscription_options>:
 801939c:	2200      	movs	r2, #0
 801939e:	e9c0 2200 	strd	r2, r2, [r0]
 80193a2:	6082      	str	r2, [r0, #8]
 80193a4:	4770      	bx	lr
 80193a6:	bf00      	nop

080193a8 <rmw_time_equal>:
 80193a8:	b4f0      	push	{r4, r5, r6, r7}
 80193aa:	b084      	sub	sp, #16
 80193ac:	ac04      	add	r4, sp, #16
 80193ae:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 80193b2:	4603      	mov	r3, r0
 80193b4:	4925      	ldr	r1, [pc, #148]	; (801944c <rmw_time_equal+0xa4>)
 80193b6:	9d01      	ldr	r5, [sp, #4]
 80193b8:	4610      	mov	r0, r2
 80193ba:	4299      	cmp	r1, r3
 80193bc:	f04f 0202 	mov.w	r2, #2
 80193c0:	9e03      	ldr	r6, [sp, #12]
 80193c2:	41aa      	sbcs	r2, r5
 80193c4:	d330      	bcc.n	8019428 <rmw_time_equal+0x80>
 80193c6:	4c22      	ldr	r4, [pc, #136]	; (8019450 <rmw_time_equal+0xa8>)
 80193c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80193cc:	fba3 3204 	umull	r3, r2, r3, r4
 80193d0:	fb04 2205 	mla	r2, r4, r5, r2
 80193d4:	43dd      	mvns	r5, r3
 80193d6:	1a8c      	subs	r4, r1, r2
 80193d8:	4285      	cmp	r5, r0
 80193da:	41b4      	sbcs	r4, r6
 80193dc:	d332      	bcc.n	8019444 <rmw_time_equal+0x9c>
 80193de:	eb10 0c03 	adds.w	ip, r0, r3
 80193e2:	eb42 0106 	adc.w	r1, r2, r6
 80193e6:	4819      	ldr	r0, [pc, #100]	; (801944c <rmw_time_equal+0xa4>)
 80193e8:	2202      	movs	r2, #2
 80193ea:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80193ec:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80193ee:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 80193f2:	4298      	cmp	r0, r3
 80193f4:	41b2      	sbcs	r2, r6
 80193f6:	d31c      	bcc.n	8019432 <rmw_time_equal+0x8a>
 80193f8:	4c15      	ldr	r4, [pc, #84]	; (8019450 <rmw_time_equal+0xa8>)
 80193fa:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 80193fe:	fba3 3204 	umull	r3, r2, r3, r4
 8019402:	fb04 2206 	mla	r2, r4, r6, r2
 8019406:	43de      	mvns	r6, r3
 8019408:	1a84      	subs	r4, r0, r2
 801940a:	42ae      	cmp	r6, r5
 801940c:	41bc      	sbcs	r4, r7
 801940e:	d315      	bcc.n	801943c <rmw_time_equal+0x94>
 8019410:	195b      	adds	r3, r3, r5
 8019412:	eb42 0207 	adc.w	r2, r2, r7
 8019416:	428a      	cmp	r2, r1
 8019418:	bf08      	it	eq
 801941a:	4563      	cmpeq	r3, ip
 801941c:	bf0c      	ite	eq
 801941e:	2001      	moveq	r0, #1
 8019420:	2000      	movne	r0, #0
 8019422:	b004      	add	sp, #16
 8019424:	bcf0      	pop	{r4, r5, r6, r7}
 8019426:	4770      	bx	lr
 8019428:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 801942c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8019430:	e7d9      	b.n	80193e6 <rmw_time_equal+0x3e>
 8019432:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019436:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 801943a:	e7ec      	b.n	8019416 <rmw_time_equal+0x6e>
 801943c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019440:	4602      	mov	r2, r0
 8019442:	e7e8      	b.n	8019416 <rmw_time_equal+0x6e>
 8019444:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8019448:	e7cd      	b.n	80193e6 <rmw_time_equal+0x3e>
 801944a:	bf00      	nop
 801944c:	25c17d04 	.word	0x25c17d04
 8019450:	3b9aca00 	.word	0x3b9aca00

08019454 <rmw_time_total_nsec>:
 8019454:	b470      	push	{r4, r5, r6}
 8019456:	b085      	sub	sp, #20
 8019458:	ac04      	add	r4, sp, #16
 801945a:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801945e:	4603      	mov	r3, r0
 8019460:	4913      	ldr	r1, [pc, #76]	; (80194b0 <rmw_time_total_nsec+0x5c>)
 8019462:	9d01      	ldr	r5, [sp, #4]
 8019464:	4610      	mov	r0, r2
 8019466:	4299      	cmp	r1, r3
 8019468:	f04f 0202 	mov.w	r2, #2
 801946c:	9e03      	ldr	r6, [sp, #12]
 801946e:	41aa      	sbcs	r2, r5
 8019470:	d311      	bcc.n	8019496 <rmw_time_total_nsec+0x42>
 8019472:	4c10      	ldr	r4, [pc, #64]	; (80194b4 <rmw_time_total_nsec+0x60>)
 8019474:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8019478:	fba3 3204 	umull	r3, r2, r3, r4
 801947c:	fb04 2205 	mla	r2, r4, r5, r2
 8019480:	43dd      	mvns	r5, r3
 8019482:	1a8c      	subs	r4, r1, r2
 8019484:	4285      	cmp	r5, r0
 8019486:	41b4      	sbcs	r4, r6
 8019488:	d30c      	bcc.n	80194a4 <rmw_time_total_nsec+0x50>
 801948a:	1818      	adds	r0, r3, r0
 801948c:	eb42 0106 	adc.w	r1, r2, r6
 8019490:	b005      	add	sp, #20
 8019492:	bc70      	pop	{r4, r5, r6}
 8019494:	4770      	bx	lr
 8019496:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801949a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801949e:	b005      	add	sp, #20
 80194a0:	bc70      	pop	{r4, r5, r6}
 80194a2:	4770      	bx	lr
 80194a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80194a8:	b005      	add	sp, #20
 80194aa:	bc70      	pop	{r4, r5, r6}
 80194ac:	4770      	bx	lr
 80194ae:	bf00      	nop
 80194b0:	25c17d04 	.word	0x25c17d04
 80194b4:	3b9aca00 	.word	0x3b9aca00

080194b8 <rmw_get_zero_initialized_message_info>:
 80194b8:	b510      	push	{r4, lr}
 80194ba:	4604      	mov	r4, r0
 80194bc:	2238      	movs	r2, #56	; 0x38
 80194be:	2100      	movs	r1, #0
 80194c0:	f004 fb68 	bl	801db94 <memset>
 80194c4:	4620      	mov	r0, r4
 80194c6:	bd10      	pop	{r4, pc}

080194c8 <rmw_validate_full_topic_name>:
 80194c8:	2800      	cmp	r0, #0
 80194ca:	d05d      	beq.n	8019588 <rmw_validate_full_topic_name+0xc0>
 80194cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80194d0:	460d      	mov	r5, r1
 80194d2:	2900      	cmp	r1, #0
 80194d4:	d05a      	beq.n	801958c <rmw_validate_full_topic_name+0xc4>
 80194d6:	4604      	mov	r4, r0
 80194d8:	4616      	mov	r6, r2
 80194da:	f7e6 ff11 	bl	8000300 <strlen>
 80194de:	b150      	cbz	r0, 80194f6 <rmw_validate_full_topic_name+0x2e>
 80194e0:	7823      	ldrb	r3, [r4, #0]
 80194e2:	2b2f      	cmp	r3, #47	; 0x2f
 80194e4:	d00e      	beq.n	8019504 <rmw_validate_full_topic_name+0x3c>
 80194e6:	2302      	movs	r3, #2
 80194e8:	602b      	str	r3, [r5, #0]
 80194ea:	b146      	cbz	r6, 80194fe <rmw_validate_full_topic_name+0x36>
 80194ec:	2300      	movs	r3, #0
 80194ee:	4618      	mov	r0, r3
 80194f0:	6033      	str	r3, [r6, #0]
 80194f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80194f6:	2301      	movs	r3, #1
 80194f8:	602b      	str	r3, [r5, #0]
 80194fa:	2e00      	cmp	r6, #0
 80194fc:	d1f6      	bne.n	80194ec <rmw_validate_full_topic_name+0x24>
 80194fe:	2000      	movs	r0, #0
 8019500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019504:	1e43      	subs	r3, r0, #1
 8019506:	5ce2      	ldrb	r2, [r4, r3]
 8019508:	2a2f      	cmp	r2, #47	; 0x2f
 801950a:	d041      	beq.n	8019590 <rmw_validate_full_topic_name+0xc8>
 801950c:	1e62      	subs	r2, r4, #1
 801950e:	f1c4 0e01 	rsb	lr, r4, #1
 8019512:	eb02 0800 	add.w	r8, r2, r0
 8019516:	eb0e 0702 	add.w	r7, lr, r2
 801951a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 801951e:	f023 0120 	bic.w	r1, r3, #32
 8019522:	f1a3 0c2f 	sub.w	ip, r3, #47	; 0x2f
 8019526:	3941      	subs	r1, #65	; 0x41
 8019528:	2919      	cmp	r1, #25
 801952a:	d90f      	bls.n	801954c <rmw_validate_full_topic_name+0x84>
 801952c:	f1bc 0f0a 	cmp.w	ip, #10
 8019530:	d90c      	bls.n	801954c <rmw_validate_full_topic_name+0x84>
 8019532:	f1a3 035f 	sub.w	r3, r3, #95	; 0x5f
 8019536:	fab3 f383 	clz	r3, r3
 801953a:	095b      	lsrs	r3, r3, #5
 801953c:	b933      	cbnz	r3, 801954c <rmw_validate_full_topic_name+0x84>
 801953e:	2204      	movs	r2, #4
 8019540:	602a      	str	r2, [r5, #0]
 8019542:	2e00      	cmp	r6, #0
 8019544:	d0db      	beq.n	80194fe <rmw_validate_full_topic_name+0x36>
 8019546:	4618      	mov	r0, r3
 8019548:	6037      	str	r7, [r6, #0]
 801954a:	e7d2      	b.n	80194f2 <rmw_validate_full_topic_name+0x2a>
 801954c:	4542      	cmp	r2, r8
 801954e:	d1e2      	bne.n	8019516 <rmw_validate_full_topic_name+0x4e>
 8019550:	2301      	movs	r3, #1
 8019552:	4f1a      	ldr	r7, [pc, #104]	; (80195bc <rmw_validate_full_topic_name+0xf4>)
 8019554:	e004      	b.n	8019560 <rmw_validate_full_topic_name+0x98>
 8019556:	4298      	cmp	r0, r3
 8019558:	f104 0401 	add.w	r4, r4, #1
 801955c:	4613      	mov	r3, r2
 801955e:	d91c      	bls.n	801959a <rmw_validate_full_topic_name+0xd2>
 8019560:	4298      	cmp	r0, r3
 8019562:	f103 0201 	add.w	r2, r3, #1
 8019566:	d0f6      	beq.n	8019556 <rmw_validate_full_topic_name+0x8e>
 8019568:	7821      	ldrb	r1, [r4, #0]
 801956a:	292f      	cmp	r1, #47	; 0x2f
 801956c:	d1f3      	bne.n	8019556 <rmw_validate_full_topic_name+0x8e>
 801956e:	7861      	ldrb	r1, [r4, #1]
 8019570:	292f      	cmp	r1, #47	; 0x2f
 8019572:	d01e      	beq.n	80195b2 <rmw_validate_full_topic_name+0xea>
 8019574:	5dc9      	ldrb	r1, [r1, r7]
 8019576:	0749      	lsls	r1, r1, #29
 8019578:	d5ed      	bpl.n	8019556 <rmw_validate_full_topic_name+0x8e>
 801957a:	2206      	movs	r2, #6
 801957c:	602a      	str	r2, [r5, #0]
 801957e:	2e00      	cmp	r6, #0
 8019580:	d0bd      	beq.n	80194fe <rmw_validate_full_topic_name+0x36>
 8019582:	2000      	movs	r0, #0
 8019584:	6033      	str	r3, [r6, #0]
 8019586:	e7b4      	b.n	80194f2 <rmw_validate_full_topic_name+0x2a>
 8019588:	200b      	movs	r0, #11
 801958a:	4770      	bx	lr
 801958c:	200b      	movs	r0, #11
 801958e:	e7b0      	b.n	80194f2 <rmw_validate_full_topic_name+0x2a>
 8019590:	2203      	movs	r2, #3
 8019592:	602a      	str	r2, [r5, #0]
 8019594:	2e00      	cmp	r6, #0
 8019596:	d1f4      	bne.n	8019582 <rmw_validate_full_topic_name+0xba>
 8019598:	e7b1      	b.n	80194fe <rmw_validate_full_topic_name+0x36>
 801959a:	28f7      	cmp	r0, #247	; 0xf7
 801959c:	d803      	bhi.n	80195a6 <rmw_validate_full_topic_name+0xde>
 801959e:	2300      	movs	r3, #0
 80195a0:	4618      	mov	r0, r3
 80195a2:	602b      	str	r3, [r5, #0]
 80195a4:	e7a5      	b.n	80194f2 <rmw_validate_full_topic_name+0x2a>
 80195a6:	2307      	movs	r3, #7
 80195a8:	602b      	str	r3, [r5, #0]
 80195aa:	2e00      	cmp	r6, #0
 80195ac:	d0a7      	beq.n	80194fe <rmw_validate_full_topic_name+0x36>
 80195ae:	23f6      	movs	r3, #246	; 0xf6
 80195b0:	e7e7      	b.n	8019582 <rmw_validate_full_topic_name+0xba>
 80195b2:	2205      	movs	r2, #5
 80195b4:	602a      	str	r2, [r5, #0]
 80195b6:	2e00      	cmp	r6, #0
 80195b8:	d1e3      	bne.n	8019582 <rmw_validate_full_topic_name+0xba>
 80195ba:	e7a0      	b.n	80194fe <rmw_validate_full_topic_name+0x36>
 80195bc:	08020d28 	.word	0x08020d28

080195c0 <rmw_validate_namespace_with_size>:
 80195c0:	2800      	cmp	r0, #0
 80195c2:	d043      	beq.n	801964c <rmw_validate_namespace_with_size+0x8c>
 80195c4:	b570      	push	{r4, r5, r6, lr}
 80195c6:	4614      	mov	r4, r2
 80195c8:	b0c2      	sub	sp, #264	; 0x108
 80195ca:	b32a      	cbz	r2, 8019618 <rmw_validate_namespace_with_size+0x58>
 80195cc:	2901      	cmp	r1, #1
 80195ce:	460d      	mov	r5, r1
 80195d0:	461e      	mov	r6, r3
 80195d2:	d102      	bne.n	80195da <rmw_validate_namespace_with_size+0x1a>
 80195d4:	7803      	ldrb	r3, [r0, #0]
 80195d6:	2b2f      	cmp	r3, #47	; 0x2f
 80195d8:	d012      	beq.n	8019600 <rmw_validate_namespace_with_size+0x40>
 80195da:	aa01      	add	r2, sp, #4
 80195dc:	4669      	mov	r1, sp
 80195de:	f7ff ff73 	bl	80194c8 <rmw_validate_full_topic_name>
 80195e2:	b980      	cbnz	r0, 8019606 <rmw_validate_namespace_with_size+0x46>
 80195e4:	9a00      	ldr	r2, [sp, #0]
 80195e6:	b14a      	cbz	r2, 80195fc <rmw_validate_namespace_with_size+0x3c>
 80195e8:	2a07      	cmp	r2, #7
 80195ea:	d007      	beq.n	80195fc <rmw_validate_namespace_with_size+0x3c>
 80195ec:	1e53      	subs	r3, r2, #1
 80195ee:	2b05      	cmp	r3, #5
 80195f0:	d82e      	bhi.n	8019650 <rmw_validate_namespace_with_size+0x90>
 80195f2:	e8df f003 	tbb	[pc, r3]
 80195f6:	1f1c      	.short	0x1f1c
 80195f8:	14282522 	.word	0x14282522
 80195fc:	2df5      	cmp	r5, #245	; 0xf5
 80195fe:	d804      	bhi.n	801960a <rmw_validate_namespace_with_size+0x4a>
 8019600:	2300      	movs	r3, #0
 8019602:	4618      	mov	r0, r3
 8019604:	6023      	str	r3, [r4, #0]
 8019606:	b042      	add	sp, #264	; 0x108
 8019608:	bd70      	pop	{r4, r5, r6, pc}
 801960a:	2307      	movs	r3, #7
 801960c:	6023      	str	r3, [r4, #0]
 801960e:	2e00      	cmp	r6, #0
 8019610:	d0f9      	beq.n	8019606 <rmw_validate_namespace_with_size+0x46>
 8019612:	23f4      	movs	r3, #244	; 0xf4
 8019614:	6033      	str	r3, [r6, #0]
 8019616:	e7f6      	b.n	8019606 <rmw_validate_namespace_with_size+0x46>
 8019618:	200b      	movs	r0, #11
 801961a:	b042      	add	sp, #264	; 0x108
 801961c:	bd70      	pop	{r4, r5, r6, pc}
 801961e:	2306      	movs	r3, #6
 8019620:	6023      	str	r3, [r4, #0]
 8019622:	2e00      	cmp	r6, #0
 8019624:	d0ef      	beq.n	8019606 <rmw_validate_namespace_with_size+0x46>
 8019626:	9b01      	ldr	r3, [sp, #4]
 8019628:	6033      	str	r3, [r6, #0]
 801962a:	b042      	add	sp, #264	; 0x108
 801962c:	bd70      	pop	{r4, r5, r6, pc}
 801962e:	2301      	movs	r3, #1
 8019630:	6023      	str	r3, [r4, #0]
 8019632:	e7f6      	b.n	8019622 <rmw_validate_namespace_with_size+0x62>
 8019634:	2302      	movs	r3, #2
 8019636:	6023      	str	r3, [r4, #0]
 8019638:	e7f3      	b.n	8019622 <rmw_validate_namespace_with_size+0x62>
 801963a:	2303      	movs	r3, #3
 801963c:	6023      	str	r3, [r4, #0]
 801963e:	e7f0      	b.n	8019622 <rmw_validate_namespace_with_size+0x62>
 8019640:	2304      	movs	r3, #4
 8019642:	6023      	str	r3, [r4, #0]
 8019644:	e7ed      	b.n	8019622 <rmw_validate_namespace_with_size+0x62>
 8019646:	2305      	movs	r3, #5
 8019648:	6023      	str	r3, [r4, #0]
 801964a:	e7ea      	b.n	8019622 <rmw_validate_namespace_with_size+0x62>
 801964c:	200b      	movs	r0, #11
 801964e:	4770      	bx	lr
 8019650:	4613      	mov	r3, r2
 8019652:	f44f 7180 	mov.w	r1, #256	; 0x100
 8019656:	4a03      	ldr	r2, [pc, #12]	; (8019664 <rmw_validate_namespace_with_size+0xa4>)
 8019658:	a802      	add	r0, sp, #8
 801965a:	f7ff fcbd 	bl	8018fd8 <rcutils_snprintf>
 801965e:	2001      	movs	r0, #1
 8019660:	e7d1      	b.n	8019606 <rmw_validate_namespace_with_size+0x46>
 8019662:	bf00      	nop
 8019664:	08020418 	.word	0x08020418

08019668 <rmw_validate_namespace>:
 8019668:	b168      	cbz	r0, 8019686 <rmw_validate_namespace+0x1e>
 801966a:	b570      	push	{r4, r5, r6, lr}
 801966c:	460d      	mov	r5, r1
 801966e:	4616      	mov	r6, r2
 8019670:	4604      	mov	r4, r0
 8019672:	f7e6 fe45 	bl	8000300 <strlen>
 8019676:	4633      	mov	r3, r6
 8019678:	4601      	mov	r1, r0
 801967a:	462a      	mov	r2, r5
 801967c:	4620      	mov	r0, r4
 801967e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019682:	f7ff bf9d 	b.w	80195c0 <rmw_validate_namespace_with_size>
 8019686:	200b      	movs	r0, #11
 8019688:	4770      	bx	lr
 801968a:	bf00      	nop

0801968c <rmw_namespace_validation_result_string>:
 801968c:	2807      	cmp	r0, #7
 801968e:	d803      	bhi.n	8019698 <rmw_namespace_validation_result_string+0xc>
 8019690:	4b02      	ldr	r3, [pc, #8]	; (801969c <rmw_namespace_validation_result_string+0x10>)
 8019692:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8019696:	4770      	bx	lr
 8019698:	4801      	ldr	r0, [pc, #4]	; (80196a0 <rmw_namespace_validation_result_string+0x14>)
 801969a:	4770      	bx	lr
 801969c:	08020610 	.word	0x08020610
 80196a0:	08020468 	.word	0x08020468

080196a4 <rmw_validate_node_name>:
 80196a4:	2800      	cmp	r0, #0
 80196a6:	d042      	beq.n	801972e <rmw_validate_node_name+0x8a>
 80196a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80196ac:	460d      	mov	r5, r1
 80196ae:	2900      	cmp	r1, #0
 80196b0:	d03f      	beq.n	8019732 <rmw_validate_node_name+0x8e>
 80196b2:	4604      	mov	r4, r0
 80196b4:	4616      	mov	r6, r2
 80196b6:	f7e6 fe23 	bl	8000300 <strlen>
 80196ba:	b310      	cbz	r0, 8019702 <rmw_validate_node_name+0x5e>
 80196bc:	1e63      	subs	r3, r4, #1
 80196be:	f1c4 0101 	rsb	r1, r4, #1
 80196c2:	eb03 0800 	add.w	r8, r3, r0
 80196c6:	18cf      	adds	r7, r1, r3
 80196c8:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 80196cc:	f1ae 0230 	sub.w	r2, lr, #48	; 0x30
 80196d0:	f02e 0c20 	bic.w	ip, lr, #32
 80196d4:	2a09      	cmp	r2, #9
 80196d6:	f1ac 0c41 	sub.w	ip, ip, #65	; 0x41
 80196da:	d905      	bls.n	80196e8 <rmw_validate_node_name+0x44>
 80196dc:	f1bc 0f19 	cmp.w	ip, #25
 80196e0:	d902      	bls.n	80196e8 <rmw_validate_node_name+0x44>
 80196e2:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
 80196e6:	d114      	bne.n	8019712 <rmw_validate_node_name+0x6e>
 80196e8:	4598      	cmp	r8, r3
 80196ea:	d1ec      	bne.n	80196c6 <rmw_validate_node_name+0x22>
 80196ec:	7822      	ldrb	r2, [r4, #0]
 80196ee:	4b16      	ldr	r3, [pc, #88]	; (8019748 <rmw_validate_node_name+0xa4>)
 80196f0:	5cd3      	ldrb	r3, [r2, r3]
 80196f2:	f013 0304 	ands.w	r3, r3, #4
 80196f6:	d113      	bne.n	8019720 <rmw_validate_node_name+0x7c>
 80196f8:	28ff      	cmp	r0, #255	; 0xff
 80196fa:	d81c      	bhi.n	8019736 <rmw_validate_node_name+0x92>
 80196fc:	4618      	mov	r0, r3
 80196fe:	602b      	str	r3, [r5, #0]
 8019700:	e00c      	b.n	801971c <rmw_validate_node_name+0x78>
 8019702:	2301      	movs	r3, #1
 8019704:	602b      	str	r3, [r5, #0]
 8019706:	b17e      	cbz	r6, 8019728 <rmw_validate_node_name+0x84>
 8019708:	2300      	movs	r3, #0
 801970a:	4618      	mov	r0, r3
 801970c:	6033      	str	r3, [r6, #0]
 801970e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019712:	2302      	movs	r3, #2
 8019714:	602b      	str	r3, [r5, #0]
 8019716:	b13e      	cbz	r6, 8019728 <rmw_validate_node_name+0x84>
 8019718:	2000      	movs	r0, #0
 801971a:	6037      	str	r7, [r6, #0]
 801971c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019720:	2303      	movs	r3, #3
 8019722:	602b      	str	r3, [r5, #0]
 8019724:	2e00      	cmp	r6, #0
 8019726:	d1ef      	bne.n	8019708 <rmw_validate_node_name+0x64>
 8019728:	2000      	movs	r0, #0
 801972a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801972e:	200b      	movs	r0, #11
 8019730:	4770      	bx	lr
 8019732:	200b      	movs	r0, #11
 8019734:	e7f2      	b.n	801971c <rmw_validate_node_name+0x78>
 8019736:	2204      	movs	r2, #4
 8019738:	602a      	str	r2, [r5, #0]
 801973a:	2e00      	cmp	r6, #0
 801973c:	d0f4      	beq.n	8019728 <rmw_validate_node_name+0x84>
 801973e:	22fe      	movs	r2, #254	; 0xfe
 8019740:	4618      	mov	r0, r3
 8019742:	6032      	str	r2, [r6, #0]
 8019744:	e7ea      	b.n	801971c <rmw_validate_node_name+0x78>
 8019746:	bf00      	nop
 8019748:	08020d28 	.word	0x08020d28

0801974c <rmw_node_name_validation_result_string>:
 801974c:	2804      	cmp	r0, #4
 801974e:	d803      	bhi.n	8019758 <rmw_node_name_validation_result_string+0xc>
 8019750:	4b02      	ldr	r3, [pc, #8]	; (801975c <rmw_node_name_validation_result_string+0x10>)
 8019752:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8019756:	4770      	bx	lr
 8019758:	4801      	ldr	r0, [pc, #4]	; (8019760 <rmw_node_name_validation_result_string+0x14>)
 801975a:	4770      	bx	lr
 801975c:	0802071c 	.word	0x0802071c
 8019760:	08020630 	.word	0x08020630

08019764 <get_memory>:
 8019764:	4603      	mov	r3, r0
 8019766:	6840      	ldr	r0, [r0, #4]
 8019768:	b158      	cbz	r0, 8019782 <get_memory+0x1e>
 801976a:	6842      	ldr	r2, [r0, #4]
 801976c:	605a      	str	r2, [r3, #4]
 801976e:	b10a      	cbz	r2, 8019774 <get_memory+0x10>
 8019770:	2100      	movs	r1, #0
 8019772:	6011      	str	r1, [r2, #0]
 8019774:	681a      	ldr	r2, [r3, #0]
 8019776:	6042      	str	r2, [r0, #4]
 8019778:	b102      	cbz	r2, 801977c <get_memory+0x18>
 801977a:	6010      	str	r0, [r2, #0]
 801977c:	2200      	movs	r2, #0
 801977e:	6002      	str	r2, [r0, #0]
 8019780:	6018      	str	r0, [r3, #0]
 8019782:	4770      	bx	lr

08019784 <put_memory>:
 8019784:	680b      	ldr	r3, [r1, #0]
 8019786:	b10b      	cbz	r3, 801978c <put_memory+0x8>
 8019788:	684a      	ldr	r2, [r1, #4]
 801978a:	605a      	str	r2, [r3, #4]
 801978c:	684a      	ldr	r2, [r1, #4]
 801978e:	b102      	cbz	r2, 8019792 <put_memory+0xe>
 8019790:	6013      	str	r3, [r2, #0]
 8019792:	6803      	ldr	r3, [r0, #0]
 8019794:	428b      	cmp	r3, r1
 8019796:	6843      	ldr	r3, [r0, #4]
 8019798:	bf08      	it	eq
 801979a:	6002      	streq	r2, [r0, #0]
 801979c:	604b      	str	r3, [r1, #4]
 801979e:	b103      	cbz	r3, 80197a2 <put_memory+0x1e>
 80197a0:	6019      	str	r1, [r3, #0]
 80197a2:	2300      	movs	r3, #0
 80197a4:	600b      	str	r3, [r1, #0]
 80197a6:	6041      	str	r1, [r0, #4]
 80197a8:	4770      	bx	lr
 80197aa:	bf00      	nop

080197ac <rmw_destroy_client>:
 80197ac:	b570      	push	{r4, r5, r6, lr}
 80197ae:	b128      	cbz	r0, 80197bc <rmw_destroy_client+0x10>
 80197b0:	4604      	mov	r4, r0
 80197b2:	6800      	ldr	r0, [r0, #0]
 80197b4:	460d      	mov	r5, r1
 80197b6:	f7f6 f88b 	bl	800f8d0 <is_uxrce_rmw_identifier_valid>
 80197ba:	b910      	cbnz	r0, 80197c2 <rmw_destroy_client+0x16>
 80197bc:	2401      	movs	r4, #1
 80197be:	4620      	mov	r0, r4
 80197c0:	bd70      	pop	{r4, r5, r6, pc}
 80197c2:	6863      	ldr	r3, [r4, #4]
 80197c4:	2b00      	cmp	r3, #0
 80197c6:	d0f9      	beq.n	80197bc <rmw_destroy_client+0x10>
 80197c8:	2d00      	cmp	r5, #0
 80197ca:	d0f7      	beq.n	80197bc <rmw_destroy_client+0x10>
 80197cc:	6828      	ldr	r0, [r5, #0]
 80197ce:	f7f6 f87f 	bl	800f8d0 <is_uxrce_rmw_identifier_valid>
 80197d2:	2800      	cmp	r0, #0
 80197d4:	d0f2      	beq.n	80197bc <rmw_destroy_client+0x10>
 80197d6:	686e      	ldr	r6, [r5, #4]
 80197d8:	2e00      	cmp	r6, #0
 80197da:	d0ef      	beq.n	80197bc <rmw_destroy_client+0x10>
 80197dc:	6864      	ldr	r4, [r4, #4]
 80197de:	6932      	ldr	r2, [r6, #16]
 80197e0:	6920      	ldr	r0, [r4, #16]
 80197e2:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80197e6:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80197ea:	6819      	ldr	r1, [r3, #0]
 80197ec:	f002 f94e 	bl	801ba8c <uxr_buffer_cancel_data>
 80197f0:	4602      	mov	r2, r0
 80197f2:	6920      	ldr	r0, [r4, #16]
 80197f4:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80197f8:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80197fc:	f7f5 ff56 	bl	800f6ac <run_xrce_session>
 8019800:	6920      	ldr	r0, [r4, #16]
 8019802:	6932      	ldr	r2, [r6, #16]
 8019804:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8019808:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801980c:	6819      	ldr	r1, [r3, #0]
 801980e:	f7f8 f9fd 	bl	8011c0c <uxr_buffer_delete_entity>
 8019812:	4602      	mov	r2, r0
 8019814:	6920      	ldr	r0, [r4, #16]
 8019816:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801981a:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801981e:	f7f5 ff45 	bl	800f6ac <run_xrce_session>
 8019822:	4603      	mov	r3, r0
 8019824:	4628      	mov	r0, r5
 8019826:	2b00      	cmp	r3, #0
 8019828:	bf14      	ite	ne
 801982a:	2400      	movne	r4, #0
 801982c:	2402      	moveq	r4, #2
 801982e:	f7f5 fe19 	bl	800f464 <rmw_uxrce_fini_client_memory>
 8019832:	e7c4      	b.n	80197be <rmw_destroy_client+0x12>

08019834 <rmw_get_gid_for_client>:
 8019834:	b1b9      	cbz	r1, 8019866 <rmw_get_gid_for_client+0x32>
 8019836:	b538      	push	{r3, r4, r5, lr}
 8019838:	4605      	mov	r5, r0
 801983a:	b180      	cbz	r0, 801985e <rmw_get_gid_for_client+0x2a>
 801983c:	6800      	ldr	r0, [r0, #0]
 801983e:	460c      	mov	r4, r1
 8019840:	b120      	cbz	r0, 801984c <rmw_get_gid_for_client+0x18>
 8019842:	4b0a      	ldr	r3, [pc, #40]	; (801986c <rmw_get_gid_for_client+0x38>)
 8019844:	6819      	ldr	r1, [r3, #0]
 8019846:	f7e6 fcfb 	bl	8000240 <strcmp>
 801984a:	b950      	cbnz	r0, 8019862 <rmw_get_gid_for_client+0x2e>
 801984c:	686b      	ldr	r3, [r5, #4]
 801984e:	2000      	movs	r0, #0
 8019850:	6060      	str	r0, [r4, #4]
 8019852:	60a0      	str	r0, [r4, #8]
 8019854:	60e0      	str	r0, [r4, #12]
 8019856:	6120      	str	r0, [r4, #16]
 8019858:	691b      	ldr	r3, [r3, #16]
 801985a:	6063      	str	r3, [r4, #4]
 801985c:	bd38      	pop	{r3, r4, r5, pc}
 801985e:	200b      	movs	r0, #11
 8019860:	bd38      	pop	{r3, r4, r5, pc}
 8019862:	200c      	movs	r0, #12
 8019864:	bd38      	pop	{r3, r4, r5, pc}
 8019866:	200b      	movs	r0, #11
 8019868:	4770      	bx	lr
 801986a:	bf00      	nop
 801986c:	08020748 	.word	0x08020748

08019870 <rmw_get_implementation_identifier>:
 8019870:	4b01      	ldr	r3, [pc, #4]	; (8019878 <rmw_get_implementation_identifier+0x8>)
 8019872:	6818      	ldr	r0, [r3, #0]
 8019874:	4770      	bx	lr
 8019876:	bf00      	nop
 8019878:	08020748 	.word	0x08020748

0801987c <rmw_init_options_init>:
 801987c:	b084      	sub	sp, #16
 801987e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019880:	b083      	sub	sp, #12
 8019882:	ad09      	add	r5, sp, #36	; 0x24
 8019884:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8019888:	b130      	cbz	r0, 8019898 <rmw_init_options_init+0x1c>
 801988a:	4604      	mov	r4, r0
 801988c:	4628      	mov	r0, r5
 801988e:	f7f5 f9cf 	bl	800ec30 <rcutils_allocator_is_valid>
 8019892:	b108      	cbz	r0, 8019898 <rmw_init_options_init+0x1c>
 8019894:	68a6      	ldr	r6, [r4, #8]
 8019896:	b12e      	cbz	r6, 80198a4 <rmw_init_options_init+0x28>
 8019898:	200b      	movs	r0, #11
 801989a:	b003      	add	sp, #12
 801989c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80198a0:	b004      	add	sp, #16
 80198a2:	4770      	bx	lr
 80198a4:	2200      	movs	r2, #0
 80198a6:	2300      	movs	r3, #0
 80198a8:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 80198ac:	f8df e098 	ldr.w	lr, [pc, #152]	; 8019948 <rmw_init_options_init+0xcc>
 80198b0:	466f      	mov	r7, sp
 80198b2:	e9c4 2300 	strd	r2, r3, [r4]
 80198b6:	4b20      	ldr	r3, [pc, #128]	; (8019938 <rmw_init_options_init+0xbc>)
 80198b8:	681b      	ldr	r3, [r3, #0]
 80198ba:	60a3      	str	r3, [r4, #8]
 80198bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80198be:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80198c2:	682b      	ldr	r3, [r5, #0]
 80198c4:	4638      	mov	r0, r7
 80198c6:	f8cc 3000 	str.w	r3, [ip]
 80198ca:	f8c4 e03c 	str.w	lr, [r4, #60]	; 0x3c
 80198ce:	60e6      	str	r6, [r4, #12]
 80198d0:	f7ff fd46 	bl	8019360 <rmw_get_default_security_options>
 80198d4:	f104 0310 	add.w	r3, r4, #16
 80198d8:	2203      	movs	r2, #3
 80198da:	e897 0003 	ldmia.w	r7, {r0, r1}
 80198de:	e883 0003 	stmia.w	r3, {r0, r1}
 80198e2:	4816      	ldr	r0, [pc, #88]	; (801993c <rmw_init_options_init+0xc0>)
 80198e4:	4916      	ldr	r1, [pc, #88]	; (8019940 <rmw_init_options_init+0xc4>)
 80198e6:	7626      	strb	r6, [r4, #24]
 80198e8:	f7f5 fcfc 	bl	800f2e4 <rmw_uxrce_init_init_options_impl_memory>
 80198ec:	4813      	ldr	r0, [pc, #76]	; (801993c <rmw_init_options_init+0xc0>)
 80198ee:	f7ff ff39 	bl	8019764 <get_memory>
 80198f2:	b1f0      	cbz	r0, 8019932 <rmw_init_options_init+0xb6>
 80198f4:	4a13      	ldr	r2, [pc, #76]	; (8019944 <rmw_init_options_init+0xc8>)
 80198f6:	6883      	ldr	r3, [r0, #8]
 80198f8:	6851      	ldr	r1, [r2, #4]
 80198fa:	6563      	str	r3, [r4, #84]	; 0x54
 80198fc:	7810      	ldrb	r0, [r2, #0]
 80198fe:	6159      	str	r1, [r3, #20]
 8019900:	68d1      	ldr	r1, [r2, #12]
 8019902:	7418      	strb	r0, [r3, #16]
 8019904:	61d9      	str	r1, [r3, #28]
 8019906:	6911      	ldr	r1, [r2, #16]
 8019908:	6219      	str	r1, [r3, #32]
 801990a:	6951      	ldr	r1, [r2, #20]
 801990c:	6892      	ldr	r2, [r2, #8]
 801990e:	6259      	str	r1, [r3, #36]	; 0x24
 8019910:	619a      	str	r2, [r3, #24]
 8019912:	f7f9 fe1f 	bl	8013554 <uxr_nanos>
 8019916:	f003 fe81 	bl	801d61c <srand>
 801991a:	f003 fead 	bl	801d678 <rand>
 801991e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8019920:	6298      	str	r0, [r3, #40]	; 0x28
 8019922:	2800      	cmp	r0, #0
 8019924:	d0f9      	beq.n	801991a <rmw_init_options_init+0x9e>
 8019926:	2000      	movs	r0, #0
 8019928:	b003      	add	sp, #12
 801992a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801992e:	b004      	add	sp, #16
 8019930:	4770      	bx	lr
 8019932:	2001      	movs	r0, #1
 8019934:	e7b1      	b.n	801989a <rmw_init_options_init+0x1e>
 8019936:	bf00      	nop
 8019938:	08020748 	.word	0x08020748
 801993c:	200105dc 	.word	0x200105dc
 8019940:	2000bdb0 	.word	0x2000bdb0
 8019944:	2000bc3c 	.word	0x2000bc3c
 8019948:	08020138 	.word	0x08020138

0801994c <rmw_init_options_copy>:
 801994c:	b570      	push	{r4, r5, r6, lr}
 801994e:	b158      	cbz	r0, 8019968 <rmw_init_options_copy+0x1c>
 8019950:	460d      	mov	r5, r1
 8019952:	b149      	cbz	r1, 8019968 <rmw_init_options_copy+0x1c>
 8019954:	4604      	mov	r4, r0
 8019956:	6880      	ldr	r0, [r0, #8]
 8019958:	b120      	cbz	r0, 8019964 <rmw_init_options_copy+0x18>
 801995a:	4b13      	ldr	r3, [pc, #76]	; (80199a8 <rmw_init_options_copy+0x5c>)
 801995c:	6819      	ldr	r1, [r3, #0]
 801995e:	f7e6 fc6f 	bl	8000240 <strcmp>
 8019962:	b9d8      	cbnz	r0, 801999c <rmw_init_options_copy+0x50>
 8019964:	68ae      	ldr	r6, [r5, #8]
 8019966:	b116      	cbz	r6, 801996e <rmw_init_options_copy+0x22>
 8019968:	260b      	movs	r6, #11
 801996a:	4630      	mov	r0, r6
 801996c:	bd70      	pop	{r4, r5, r6, pc}
 801996e:	2258      	movs	r2, #88	; 0x58
 8019970:	4621      	mov	r1, r4
 8019972:	4628      	mov	r0, r5
 8019974:	f004 fa3f 	bl	801ddf6 <memcpy>
 8019978:	480c      	ldr	r0, [pc, #48]	; (80199ac <rmw_init_options_copy+0x60>)
 801997a:	f7ff fef3 	bl	8019764 <get_memory>
 801997e:	b180      	cbz	r0, 80199a2 <rmw_init_options_copy+0x56>
 8019980:	6883      	ldr	r3, [r0, #8]
 8019982:	656b      	str	r3, [r5, #84]	; 0x54
 8019984:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8019986:	f103 0410 	add.w	r4, r3, #16
 801998a:	3510      	adds	r5, #16
 801998c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801998e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019990:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8019994:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8019998:	4630      	mov	r0, r6
 801999a:	bd70      	pop	{r4, r5, r6, pc}
 801999c:	260c      	movs	r6, #12
 801999e:	4630      	mov	r0, r6
 80199a0:	bd70      	pop	{r4, r5, r6, pc}
 80199a2:	2601      	movs	r6, #1
 80199a4:	e7e1      	b.n	801996a <rmw_init_options_copy+0x1e>
 80199a6:	bf00      	nop
 80199a8:	08020748 	.word	0x08020748
 80199ac:	200105dc 	.word	0x200105dc

080199b0 <rmw_init_options_fini>:
 80199b0:	b368      	cbz	r0, 8019a0e <rmw_init_options_fini+0x5e>
 80199b2:	b510      	push	{r4, lr}
 80199b4:	4604      	mov	r4, r0
 80199b6:	b096      	sub	sp, #88	; 0x58
 80199b8:	3040      	adds	r0, #64	; 0x40
 80199ba:	f7f5 f939 	bl	800ec30 <rcutils_allocator_is_valid>
 80199be:	b1f0      	cbz	r0, 80199fe <rmw_init_options_fini+0x4e>
 80199c0:	68a0      	ldr	r0, [r4, #8]
 80199c2:	b120      	cbz	r0, 80199ce <rmw_init_options_fini+0x1e>
 80199c4:	4b13      	ldr	r3, [pc, #76]	; (8019a14 <rmw_init_options_fini+0x64>)
 80199c6:	6819      	ldr	r1, [r3, #0]
 80199c8:	f7e6 fc3a 	bl	8000240 <strcmp>
 80199cc:	b9e8      	cbnz	r0, 8019a0a <rmw_init_options_fini+0x5a>
 80199ce:	4b12      	ldr	r3, [pc, #72]	; (8019a18 <rmw_init_options_fini+0x68>)
 80199d0:	6819      	ldr	r1, [r3, #0]
 80199d2:	b1b9      	cbz	r1, 8019a04 <rmw_init_options_fini+0x54>
 80199d4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80199d6:	e001      	b.n	80199dc <rmw_init_options_fini+0x2c>
 80199d8:	6849      	ldr	r1, [r1, #4]
 80199da:	b199      	cbz	r1, 8019a04 <rmw_init_options_fini+0x54>
 80199dc:	688b      	ldr	r3, [r1, #8]
 80199de:	429a      	cmp	r2, r3
 80199e0:	d1fa      	bne.n	80199d8 <rmw_init_options_fini+0x28>
 80199e2:	480d      	ldr	r0, [pc, #52]	; (8019a18 <rmw_init_options_fini+0x68>)
 80199e4:	f7ff fece 	bl	8019784 <put_memory>
 80199e8:	4668      	mov	r0, sp
 80199ea:	f7ff fca5 	bl	8019338 <rmw_get_zero_initialized_init_options>
 80199ee:	2258      	movs	r2, #88	; 0x58
 80199f0:	4669      	mov	r1, sp
 80199f2:	4620      	mov	r0, r4
 80199f4:	f004 f9ff 	bl	801ddf6 <memcpy>
 80199f8:	2000      	movs	r0, #0
 80199fa:	b016      	add	sp, #88	; 0x58
 80199fc:	bd10      	pop	{r4, pc}
 80199fe:	200b      	movs	r0, #11
 8019a00:	b016      	add	sp, #88	; 0x58
 8019a02:	bd10      	pop	{r4, pc}
 8019a04:	2001      	movs	r0, #1
 8019a06:	b016      	add	sp, #88	; 0x58
 8019a08:	bd10      	pop	{r4, pc}
 8019a0a:	200c      	movs	r0, #12
 8019a0c:	e7f5      	b.n	80199fa <rmw_init_options_fini+0x4a>
 8019a0e:	200b      	movs	r0, #11
 8019a10:	4770      	bx	lr
 8019a12:	bf00      	nop
 8019a14:	08020748 	.word	0x08020748
 8019a18:	200105dc 	.word	0x200105dc

08019a1c <rmw_init>:
 8019a1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019a20:	b083      	sub	sp, #12
 8019a22:	2800      	cmp	r0, #0
 8019a24:	f000 80d3 	beq.w	8019bce <rmw_init+0x1b2>
 8019a28:	460e      	mov	r6, r1
 8019a2a:	2900      	cmp	r1, #0
 8019a2c:	f000 80cf 	beq.w	8019bce <rmw_init+0x1b2>
 8019a30:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8019a32:	4605      	mov	r5, r0
 8019a34:	2b00      	cmp	r3, #0
 8019a36:	f000 80ca 	beq.w	8019bce <rmw_init+0x1b2>
 8019a3a:	4b78      	ldr	r3, [pc, #480]	; (8019c1c <rmw_init+0x200>)
 8019a3c:	6880      	ldr	r0, [r0, #8]
 8019a3e:	681f      	ldr	r7, [r3, #0]
 8019a40:	b128      	cbz	r0, 8019a4e <rmw_init+0x32>
 8019a42:	4639      	mov	r1, r7
 8019a44:	f7e6 fbfc 	bl	8000240 <strcmp>
 8019a48:	2800      	cmp	r0, #0
 8019a4a:	f040 80ca 	bne.w	8019be2 <rmw_init+0x1c6>
 8019a4e:	4c74      	ldr	r4, [pc, #464]	; (8019c20 <rmw_init+0x204>)
 8019a50:	f04f 0800 	mov.w	r8, #0
 8019a54:	4973      	ldr	r1, [pc, #460]	; (8019c24 <rmw_init+0x208>)
 8019a56:	4874      	ldr	r0, [pc, #464]	; (8019c28 <rmw_init+0x20c>)
 8019a58:	e9d5 2300 	ldrd	r2, r3, [r5]
 8019a5c:	60b7      	str	r7, [r6, #8]
 8019a5e:	e9c6 2300 	strd	r2, r3, [r6]
 8019a62:	68eb      	ldr	r3, [r5, #12]
 8019a64:	2201      	movs	r2, #1
 8019a66:	66b3      	str	r3, [r6, #104]	; 0x68
 8019a68:	f7f5 fbdc 	bl	800f224 <rmw_uxrce_init_session_memory>
 8019a6c:	4620      	mov	r0, r4
 8019a6e:	2204      	movs	r2, #4
 8019a70:	496e      	ldr	r1, [pc, #440]	; (8019c2c <rmw_init+0x210>)
 8019a72:	f7f5 fc17 	bl	800f2a4 <rmw_uxrce_init_static_input_buffer_memory>
 8019a76:	486c      	ldr	r0, [pc, #432]	; (8019c28 <rmw_init+0x20c>)
 8019a78:	f884 800d 	strb.w	r8, [r4, #13]
 8019a7c:	f7ff fe72 	bl	8019764 <get_memory>
 8019a80:	2800      	cmp	r0, #0
 8019a82:	f000 80a9 	beq.w	8019bd8 <rmw_init+0x1bc>
 8019a86:	6884      	ldr	r4, [r0, #8]
 8019a88:	6d68      	ldr	r0, [r5, #84]	; 0x54
 8019a8a:	f104 0910 	add.w	r9, r4, #16
 8019a8e:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8019a90:	f890 c010 	ldrb.w	ip, [r0, #16]
 8019a94:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8019a98:	9101      	str	r1, [sp, #4]
 8019a9a:	4661      	mov	r1, ip
 8019a9c:	6a00      	ldr	r0, [r0, #32]
 8019a9e:	9000      	str	r0, [sp, #0]
 8019aa0:	4648      	mov	r0, r9
 8019aa2:	f001 fa2b 	bl	801aefc <uxr_set_custom_transport_callbacks>
 8019aa6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8019aaa:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 8019aae:	4960      	ldr	r1, [pc, #384]	; (8019c30 <rmw_init+0x214>)
 8019ab0:	4860      	ldr	r0, [pc, #384]	; (8019c34 <rmw_init+0x218>)
 8019ab2:	e9c4 22e3 	strd	r2, r2, [r4, #908]	; 0x38c
 8019ab6:	f504 725e 	add.w	r2, r4, #888	; 0x378
 8019aba:	e9c4 22e1 	strd	r2, r2, [r4, #900]	; 0x384
 8019abe:	f8c3 8594 	str.w	r8, [r3, #1428]	; 0x594
 8019ac2:	2201      	movs	r2, #1
 8019ac4:	f8c3 8598 	str.w	r8, [r3, #1432]	; 0x598
 8019ac8:	f8c3 859c 	str.w	r8, [r3, #1436]	; 0x59c
 8019acc:	f8c3 85a0 	str.w	r8, [r3, #1440]	; 0x5a0
 8019ad0:	e9c4 78da 	strd	r7, r8, [r4, #872]	; 0x368
 8019ad4:	66f4      	str	r4, [r6, #108]	; 0x6c
 8019ad6:	f7f5 fb85 	bl	800f1e4 <rmw_uxrce_init_node_memory>
 8019ada:	2205      	movs	r2, #5
 8019adc:	4956      	ldr	r1, [pc, #344]	; (8019c38 <rmw_init+0x21c>)
 8019ade:	4857      	ldr	r0, [pc, #348]	; (8019c3c <rmw_init+0x220>)
 8019ae0:	f7f5 fb60 	bl	800f1a4 <rmw_uxrce_init_subscription_memory>
 8019ae4:	220a      	movs	r2, #10
 8019ae6:	4956      	ldr	r1, [pc, #344]	; (8019c40 <rmw_init+0x224>)
 8019ae8:	4856      	ldr	r0, [pc, #344]	; (8019c44 <rmw_init+0x228>)
 8019aea:	f7f5 fb3b 	bl	800f164 <rmw_uxrce_init_publisher_memory>
 8019aee:	2202      	movs	r2, #2
 8019af0:	4955      	ldr	r1, [pc, #340]	; (8019c48 <rmw_init+0x22c>)
 8019af2:	4856      	ldr	r0, [pc, #344]	; (8019c4c <rmw_init+0x230>)
 8019af4:	f7f5 faf6 	bl	800f0e4 <rmw_uxrce_init_service_memory>
 8019af8:	2201      	movs	r2, #1
 8019afa:	4955      	ldr	r1, [pc, #340]	; (8019c50 <rmw_init+0x234>)
 8019afc:	4855      	ldr	r0, [pc, #340]	; (8019c54 <rmw_init+0x238>)
 8019afe:	f7f5 fb11 	bl	800f124 <rmw_uxrce_init_client_memory>
 8019b02:	220f      	movs	r2, #15
 8019b04:	4954      	ldr	r1, [pc, #336]	; (8019c58 <rmw_init+0x23c>)
 8019b06:	4855      	ldr	r0, [pc, #340]	; (8019c5c <rmw_init+0x240>)
 8019b08:	f7f5 fbac 	bl	800f264 <rmw_uxrce_init_topic_memory>
 8019b0c:	2203      	movs	r2, #3
 8019b0e:	4954      	ldr	r1, [pc, #336]	; (8019c60 <rmw_init+0x244>)
 8019b10:	4854      	ldr	r0, [pc, #336]	; (8019c64 <rmw_init+0x248>)
 8019b12:	f7f5 fbe7 	bl	800f2e4 <rmw_uxrce_init_init_options_impl_memory>
 8019b16:	2204      	movs	r2, #4
 8019b18:	4953      	ldr	r1, [pc, #332]	; (8019c68 <rmw_init+0x24c>)
 8019b1a:	4854      	ldr	r0, [pc, #336]	; (8019c6c <rmw_init+0x250>)
 8019b1c:	f7f5 fc02 	bl	800f324 <rmw_uxrce_init_wait_set_memory>
 8019b20:	4953      	ldr	r1, [pc, #332]	; (8019c70 <rmw_init+0x254>)
 8019b22:	4854      	ldr	r0, [pc, #336]	; (8019c74 <rmw_init+0x258>)
 8019b24:	2204      	movs	r2, #4
 8019b26:	f7f5 fc1d 	bl	800f364 <rmw_uxrce_init_guard_condition_memory>
 8019b2a:	4642      	mov	r2, r8
 8019b2c:	6d69      	ldr	r1, [r5, #84]	; 0x54
 8019b2e:	6ef0      	ldr	r0, [r6, #108]	; 0x6c
 8019b30:	f000 feba 	bl	801a8a8 <rmw_uxrce_transport_init>
 8019b34:	4607      	mov	r7, r0
 8019b36:	2800      	cmp	r0, #0
 8019b38:	d158      	bne.n	8019bec <rmw_init+0x1d0>
 8019b3a:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8019b3c:	f504 7528 	add.w	r5, r4, #672	; 0x2a0
 8019b40:	f504 7122 	add.w	r1, r4, #648	; 0x288
 8019b44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8019b46:	4628      	mov	r0, r5
 8019b48:	f7f8 fb5a 	bl	8012200 <uxr_init_session>
 8019b4c:	4622      	mov	r2, r4
 8019b4e:	494a      	ldr	r1, [pc, #296]	; (8019c78 <rmw_init+0x25c>)
 8019b50:	4628      	mov	r0, r5
 8019b52:	f7f8 fb79 	bl	8012248 <uxr_set_topic_callback>
 8019b56:	463a      	mov	r2, r7
 8019b58:	4948      	ldr	r1, [pc, #288]	; (8019c7c <rmw_init+0x260>)
 8019b5a:	4628      	mov	r0, r5
 8019b5c:	f7f8 fb70 	bl	8012240 <uxr_set_status_callback>
 8019b60:	463a      	mov	r2, r7
 8019b62:	4947      	ldr	r1, [pc, #284]	; (8019c80 <rmw_init+0x264>)
 8019b64:	4628      	mov	r0, r5
 8019b66:	f7f8 fb73 	bl	8012250 <uxr_set_request_callback>
 8019b6a:	463a      	mov	r2, r7
 8019b6c:	4945      	ldr	r1, [pc, #276]	; (8019c84 <rmw_init+0x268>)
 8019b6e:	4628      	mov	r0, r5
 8019b70:	f7f8 fb72 	bl	8012258 <uxr_set_reply_callback>
 8019b74:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8019b78:	2304      	movs	r3, #4
 8019b7a:	f504 7165 	add.w	r1, r4, #916	; 0x394
 8019b7e:	0092      	lsls	r2, r2, #2
 8019b80:	4628      	mov	r0, r5
 8019b82:	f7f8 fba9 	bl	80122d8 <uxr_create_input_reliable_stream>
 8019b86:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8019b8a:	2304      	movs	r3, #4
 8019b8c:	f604 3194 	addw	r1, r4, #2964	; 0xb94
 8019b90:	0092      	lsls	r2, r2, #2
 8019b92:	f8c4 0374 	str.w	r0, [r4, #884]	; 0x374
 8019b96:	4628      	mov	r0, r5
 8019b98:	f7f8 fb74 	bl	8012284 <uxr_create_output_reliable_stream>
 8019b9c:	f8c4 0378 	str.w	r0, [r4, #888]	; 0x378
 8019ba0:	4628      	mov	r0, r5
 8019ba2:	f7f8 fb93 	bl	80122cc <uxr_create_input_best_effort_stream>
 8019ba6:	f241 3194 	movw	r1, #5012	; 0x1394
 8019baa:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
 8019bae:	4628      	mov	r0, r5
 8019bb0:	4421      	add	r1, r4
 8019bb2:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8019bb6:	f7f8 fb53 	bl	8012260 <uxr_create_output_best_effort_stream>
 8019bba:	f8c4 037c 	str.w	r0, [r4, #892]	; 0x37c
 8019bbe:	4628      	mov	r0, r5
 8019bc0:	f7f9 f8dc 	bl	8012d7c <uxr_create_session>
 8019bc4:	b1f8      	cbz	r0, 8019c06 <rmw_init+0x1ea>
 8019bc6:	4638      	mov	r0, r7
 8019bc8:	b003      	add	sp, #12
 8019bca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019bce:	270b      	movs	r7, #11
 8019bd0:	4638      	mov	r0, r7
 8019bd2:	b003      	add	sp, #12
 8019bd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019bd8:	2701      	movs	r7, #1
 8019bda:	4638      	mov	r0, r7
 8019bdc:	b003      	add	sp, #12
 8019bde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019be2:	270c      	movs	r7, #12
 8019be4:	4638      	mov	r0, r7
 8019be6:	b003      	add	sp, #12
 8019be8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019bec:	4648      	mov	r0, r9
 8019bee:	f001 f9c3 	bl	801af78 <uxr_close_custom_transport>
 8019bf2:	4621      	mov	r1, r4
 8019bf4:	480c      	ldr	r0, [pc, #48]	; (8019c28 <rmw_init+0x20c>)
 8019bf6:	f7ff fdc5 	bl	8019784 <put_memory>
 8019bfa:	4638      	mov	r0, r7
 8019bfc:	f8c6 806c 	str.w	r8, [r6, #108]	; 0x6c
 8019c00:	b003      	add	sp, #12
 8019c02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019c06:	4648      	mov	r0, r9
 8019c08:	f001 f9b6 	bl	801af78 <uxr_close_custom_transport>
 8019c0c:	4621      	mov	r1, r4
 8019c0e:	4806      	ldr	r0, [pc, #24]	; (8019c28 <rmw_init+0x20c>)
 8019c10:	f7ff fdb8 	bl	8019784 <put_memory>
 8019c14:	66f7      	str	r7, [r6, #108]	; 0x6c
 8019c16:	2701      	movs	r7, #1
 8019c18:	e7d5      	b.n	8019bc6 <rmw_init+0x1aa>
 8019c1a:	bf00      	nop
 8019c1c:	08020748 	.word	0x08020748
 8019c20:	2001062c 	.word	0x2001062c
 8019c24:	2000c8d8 	.word	0x2000c8d8
 8019c28:	2001061c 	.word	0x2001061c
 8019c2c:	2000de80 	.word	0x2000de80
 8019c30:	2000be34 	.word	0x2000be34
 8019c34:	200105ec 	.word	0x200105ec
 8019c38:	2000ff80 	.word	0x2000ff80
 8019c3c:	2001063c 	.word	0x2001063c
 8019c40:	2000bed8 	.word	0x2000bed8
 8019c44:	200105fc 	.word	0x200105fc
 8019c48:	2000c748 	.word	0x2000c748
 8019c4c:	2001060c 	.word	0x2001060c
 8019c50:	2000bc68 	.word	0x2000bc68
 8019c54:	2000bc58 	.word	0x2000bc58
 8019c58:	200103b8 	.word	0x200103b8
 8019c5c:	2001064c 	.word	0x2001064c
 8019c60:	2000bdb0 	.word	0x2000bdb0
 8019c64:	200105dc 	.word	0x200105dc
 8019c68:	2001055c 	.word	0x2001055c
 8019c6c:	2001065c 	.word	0x2001065c
 8019c70:	2000bd30 	.word	0x2000bd30
 8019c74:	200105cc 	.word	0x200105cc
 8019c78:	0801d065 	.word	0x0801d065
 8019c7c:	0801d05d 	.word	0x0801d05d
 8019c80:	0801d0fd 	.word	0x0801d0fd
 8019c84:	0801d199 	.word	0x0801d199

08019c88 <rmw_context_fini>:
 8019c88:	4b17      	ldr	r3, [pc, #92]	; (8019ce8 <rmw_context_fini+0x60>)
 8019c8a:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 8019c8c:	b570      	push	{r4, r5, r6, lr}
 8019c8e:	681c      	ldr	r4, [r3, #0]
 8019c90:	4605      	mov	r5, r0
 8019c92:	b334      	cbz	r4, 8019ce2 <rmw_context_fini+0x5a>
 8019c94:	2600      	movs	r6, #0
 8019c96:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 8019c9a:	6902      	ldr	r2, [r0, #16]
 8019c9c:	428a      	cmp	r2, r1
 8019c9e:	d018      	beq.n	8019cd2 <rmw_context_fini+0x4a>
 8019ca0:	2c00      	cmp	r4, #0
 8019ca2:	d1f8      	bne.n	8019c96 <rmw_context_fini+0xe>
 8019ca4:	b189      	cbz	r1, 8019cca <rmw_context_fini+0x42>
 8019ca6:	f8d1 3388 	ldr.w	r3, [r1, #904]	; 0x388
 8019caa:	f501 7028 	add.w	r0, r1, #672	; 0x2a0
 8019cae:	789b      	ldrb	r3, [r3, #2]
 8019cb0:	2b01      	cmp	r3, #1
 8019cb2:	bf14      	ite	ne
 8019cb4:	210a      	movne	r1, #10
 8019cb6:	2100      	moveq	r1, #0
 8019cb8:	f7f9 f838 	bl	8012d2c <uxr_delete_session_retries>
 8019cbc:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 8019cbe:	f7f5 fb71 	bl	800f3a4 <rmw_uxrce_fini_session_memory>
 8019cc2:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 8019cc4:	3010      	adds	r0, #16
 8019cc6:	f001 f957 	bl	801af78 <uxr_close_custom_transport>
 8019cca:	2300      	movs	r3, #0
 8019ccc:	4630      	mov	r0, r6
 8019cce:	66eb      	str	r3, [r5, #108]	; 0x6c
 8019cd0:	bd70      	pop	{r4, r5, r6, pc}
 8019cd2:	3018      	adds	r0, #24
 8019cd4:	f000 f90e 	bl	8019ef4 <rmw_destroy_node>
 8019cd8:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
 8019cda:	4606      	mov	r6, r0
 8019cdc:	2c00      	cmp	r4, #0
 8019cde:	d1da      	bne.n	8019c96 <rmw_context_fini+0xe>
 8019ce0:	e7e0      	b.n	8019ca4 <rmw_context_fini+0x1c>
 8019ce2:	4626      	mov	r6, r4
 8019ce4:	e7de      	b.n	8019ca4 <rmw_context_fini+0x1c>
 8019ce6:	bf00      	nop
 8019ce8:	200105ec 	.word	0x200105ec

08019cec <create_topic>:
 8019cec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019cf0:	4605      	mov	r5, r0
 8019cf2:	b084      	sub	sp, #16
 8019cf4:	4822      	ldr	r0, [pc, #136]	; (8019d80 <create_topic+0x94>)
 8019cf6:	460f      	mov	r7, r1
 8019cf8:	4616      	mov	r6, r2
 8019cfa:	f7ff fd33 	bl	8019764 <get_memory>
 8019cfe:	4604      	mov	r4, r0
 8019d00:	2800      	cmp	r0, #0
 8019d02:	d039      	beq.n	8019d78 <create_topic+0x8c>
 8019d04:	692b      	ldr	r3, [r5, #16]
 8019d06:	2102      	movs	r1, #2
 8019d08:	6884      	ldr	r4, [r0, #8]
 8019d0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019d0e:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8019d88 <create_topic+0x9c>
 8019d12:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	; 0x596
 8019d16:	1c42      	adds	r2, r0, #1
 8019d18:	e9c4 6505 	strd	r6, r5, [r4, #20]
 8019d1c:	f8a3 2596 	strh.w	r2, [r3, #1430]	; 0x596
 8019d20:	f7f8 f9b0 	bl	8012084 <uxr_object_id>
 8019d24:	223c      	movs	r2, #60	; 0x3c
 8019d26:	6120      	str	r0, [r4, #16]
 8019d28:	4641      	mov	r1, r8
 8019d2a:	4638      	mov	r0, r7
 8019d2c:	f7f5 fdb8 	bl	800f8a0 <generate_topic_name>
 8019d30:	b1f0      	cbz	r0, 8019d70 <create_topic+0x84>
 8019d32:	4f14      	ldr	r7, [pc, #80]	; (8019d84 <create_topic+0x98>)
 8019d34:	4630      	mov	r0, r6
 8019d36:	2264      	movs	r2, #100	; 0x64
 8019d38:	4639      	mov	r1, r7
 8019d3a:	f7f5 fd83 	bl	800f844 <generate_type_name>
 8019d3e:	b1b8      	cbz	r0, 8019d70 <create_topic+0x84>
 8019d40:	6928      	ldr	r0, [r5, #16]
 8019d42:	2106      	movs	r1, #6
 8019d44:	696b      	ldr	r3, [r5, #20]
 8019d46:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 8019d4a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8019d4e:	f8cd 8000 	str.w	r8, [sp]
 8019d52:	e9cd 7101 	strd	r7, r1, [sp, #4]
 8019d56:	6811      	ldr	r1, [r2, #0]
 8019d58:	6922      	ldr	r2, [r4, #16]
 8019d5a:	f7f7 ffd5 	bl	8011d08 <uxr_buffer_create_topic_bin>
 8019d5e:	4602      	mov	r2, r0
 8019d60:	6928      	ldr	r0, [r5, #16]
 8019d62:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8019d66:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8019d6a:	f7f5 fc9f 	bl	800f6ac <run_xrce_session>
 8019d6e:	b918      	cbnz	r0, 8019d78 <create_topic+0x8c>
 8019d70:	4620      	mov	r0, r4
 8019d72:	2400      	movs	r4, #0
 8019d74:	f7f5 fb8c 	bl	800f490 <rmw_uxrce_fini_topic_memory>
 8019d78:	4620      	mov	r0, r4
 8019d7a:	b004      	add	sp, #16
 8019d7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019d80:	2001064c 	.word	0x2001064c
 8019d84:	20010c00 	.word	0x20010c00
 8019d88:	20010bc4 	.word	0x20010bc4

08019d8c <destroy_topic>:
 8019d8c:	b538      	push	{r3, r4, r5, lr}
 8019d8e:	6985      	ldr	r5, [r0, #24]
 8019d90:	b1dd      	cbz	r5, 8019dca <destroy_topic+0x3e>
 8019d92:	4604      	mov	r4, r0
 8019d94:	6928      	ldr	r0, [r5, #16]
 8019d96:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8019d9a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8019d9e:	6922      	ldr	r2, [r4, #16]
 8019da0:	6819      	ldr	r1, [r3, #0]
 8019da2:	f7f7 ff33 	bl	8011c0c <uxr_buffer_delete_entity>
 8019da6:	4602      	mov	r2, r0
 8019da8:	6928      	ldr	r0, [r5, #16]
 8019daa:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8019dae:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8019db2:	f7f5 fc7b 	bl	800f6ac <run_xrce_session>
 8019db6:	4603      	mov	r3, r0
 8019db8:	4620      	mov	r0, r4
 8019dba:	2b00      	cmp	r3, #0
 8019dbc:	bf14      	ite	ne
 8019dbe:	2400      	movne	r4, #0
 8019dc0:	2402      	moveq	r4, #2
 8019dc2:	f7f5 fb65 	bl	800f490 <rmw_uxrce_fini_topic_memory>
 8019dc6:	4620      	mov	r0, r4
 8019dc8:	bd38      	pop	{r3, r4, r5, pc}
 8019dca:	2401      	movs	r4, #1
 8019dcc:	4620      	mov	r0, r4
 8019dce:	bd38      	pop	{r3, r4, r5, pc}

08019dd0 <create_node>:
 8019dd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019dd4:	b083      	sub	sp, #12
 8019dd6:	2b00      	cmp	r3, #0
 8019dd8:	d064      	beq.n	8019ea4 <create_node+0xd4>
 8019dda:	4606      	mov	r6, r0
 8019ddc:	4838      	ldr	r0, [pc, #224]	; (8019ec0 <create_node+0xf0>)
 8019dde:	460f      	mov	r7, r1
 8019de0:	4690      	mov	r8, r2
 8019de2:	461d      	mov	r5, r3
 8019de4:	f7ff fcbe 	bl	8019764 <get_memory>
 8019de8:	2800      	cmp	r0, #0
 8019dea:	d05b      	beq.n	8019ea4 <create_node+0xd4>
 8019dec:	6884      	ldr	r4, [r0, #8]
 8019dee:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8019df0:	f104 092c 	add.w	r9, r4, #44	; 0x2c
 8019df4:	f104 0518 	add.w	r5, r4, #24
 8019df8:	6123      	str	r3, [r4, #16]
 8019dfa:	f7ff fd39 	bl	8019870 <rmw_get_implementation_identifier>
 8019dfe:	f8c4 9020 	str.w	r9, [r4, #32]
 8019e02:	e9c4 0406 	strd	r0, r4, [r4, #24]
 8019e06:	4630      	mov	r0, r6
 8019e08:	f7e6 fa7a 	bl	8000300 <strlen>
 8019e0c:	1c42      	adds	r2, r0, #1
 8019e0e:	2a3c      	cmp	r2, #60	; 0x3c
 8019e10:	d840      	bhi.n	8019e94 <create_node+0xc4>
 8019e12:	4648      	mov	r0, r9
 8019e14:	f104 0968 	add.w	r9, r4, #104	; 0x68
 8019e18:	4631      	mov	r1, r6
 8019e1a:	f003 ffec 	bl	801ddf6 <memcpy>
 8019e1e:	4638      	mov	r0, r7
 8019e20:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 8019e24:	f7e6 fa6c 	bl	8000300 <strlen>
 8019e28:	1c42      	adds	r2, r0, #1
 8019e2a:	2a3c      	cmp	r2, #60	; 0x3c
 8019e2c:	d832      	bhi.n	8019e94 <create_node+0xc4>
 8019e2e:	4639      	mov	r1, r7
 8019e30:	4648      	mov	r0, r9
 8019e32:	f003 ffe0 	bl	801ddf6 <memcpy>
 8019e36:	6923      	ldr	r3, [r4, #16]
 8019e38:	2101      	movs	r1, #1
 8019e3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019e3e:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	; 0x594
 8019e42:	1842      	adds	r2, r0, r1
 8019e44:	f8a3 2594 	strh.w	r2, [r3, #1428]	; 0x594
 8019e48:	f7f8 f91c 	bl	8012084 <uxr_object_id>
 8019e4c:	6160      	str	r0, [r4, #20]
 8019e4e:	783b      	ldrb	r3, [r7, #0]
 8019e50:	2b2f      	cmp	r3, #47	; 0x2f
 8019e52:	d12c      	bne.n	8019eae <create_node+0xde>
 8019e54:	787b      	ldrb	r3, [r7, #1]
 8019e56:	bb53      	cbnz	r3, 8019eae <create_node+0xde>
 8019e58:	4633      	mov	r3, r6
 8019e5a:	4a1a      	ldr	r2, [pc, #104]	; (8019ec4 <create_node+0xf4>)
 8019e5c:	213c      	movs	r1, #60	; 0x3c
 8019e5e:	481a      	ldr	r0, [pc, #104]	; (8019ec8 <create_node+0xf8>)
 8019e60:	f003 fdbe 	bl	801d9e0 <sniprintf>
 8019e64:	6920      	ldr	r0, [r4, #16]
 8019e66:	2106      	movs	r1, #6
 8019e68:	fa1f f388 	uxth.w	r3, r8
 8019e6c:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 8019e70:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8019e74:	9101      	str	r1, [sp, #4]
 8019e76:	4914      	ldr	r1, [pc, #80]	; (8019ec8 <create_node+0xf8>)
 8019e78:	9100      	str	r1, [sp, #0]
 8019e7a:	6811      	ldr	r1, [r2, #0]
 8019e7c:	6962      	ldr	r2, [r4, #20]
 8019e7e:	f7f7 ff11 	bl	8011ca4 <uxr_buffer_create_participant_bin>
 8019e82:	4602      	mov	r2, r0
 8019e84:	6920      	ldr	r0, [r4, #16]
 8019e86:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8019e8a:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8019e8e:	f7f5 fc0d 	bl	800f6ac <run_xrce_session>
 8019e92:	b918      	cbnz	r0, 8019e9c <create_node+0xcc>
 8019e94:	4628      	mov	r0, r5
 8019e96:	2500      	movs	r5, #0
 8019e98:	f7f5 fa8a 	bl	800f3b0 <rmw_uxrce_fini_node_memory>
 8019e9c:	4628      	mov	r0, r5
 8019e9e:	b003      	add	sp, #12
 8019ea0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019ea4:	2500      	movs	r5, #0
 8019ea6:	4628      	mov	r0, r5
 8019ea8:	b003      	add	sp, #12
 8019eaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019eae:	463b      	mov	r3, r7
 8019eb0:	4a06      	ldr	r2, [pc, #24]	; (8019ecc <create_node+0xfc>)
 8019eb2:	213c      	movs	r1, #60	; 0x3c
 8019eb4:	9600      	str	r6, [sp, #0]
 8019eb6:	4804      	ldr	r0, [pc, #16]	; (8019ec8 <create_node+0xf8>)
 8019eb8:	f003 fd92 	bl	801d9e0 <sniprintf>
 8019ebc:	e7d2      	b.n	8019e64 <create_node+0x94>
 8019ebe:	bf00      	nop
 8019ec0:	200105ec 	.word	0x200105ec
 8019ec4:	0801fbfc 	.word	0x0801fbfc
 8019ec8:	20010c64 	.word	0x20010c64
 8019ecc:	08020140 	.word	0x08020140

08019ed0 <rmw_create_node>:
 8019ed0:	468c      	mov	ip, r1
 8019ed2:	4611      	mov	r1, r2
 8019ed4:	f1bc 0f00 	cmp.w	ip, #0
 8019ed8:	d00a      	beq.n	8019ef0 <rmw_create_node+0x20>
 8019eda:	f89c 3000 	ldrb.w	r3, [ip]
 8019ede:	b13b      	cbz	r3, 8019ef0 <rmw_create_node+0x20>
 8019ee0:	b132      	cbz	r2, 8019ef0 <rmw_create_node+0x20>
 8019ee2:	7813      	ldrb	r3, [r2, #0]
 8019ee4:	b123      	cbz	r3, 8019ef0 <rmw_create_node+0x20>
 8019ee6:	4603      	mov	r3, r0
 8019ee8:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8019eea:	4660      	mov	r0, ip
 8019eec:	f7ff bf70 	b.w	8019dd0 <create_node>
 8019ef0:	2000      	movs	r0, #0
 8019ef2:	4770      	bx	lr

08019ef4 <rmw_destroy_node>:
 8019ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019ef6:	b328      	cbz	r0, 8019f44 <rmw_destroy_node+0x50>
 8019ef8:	4607      	mov	r7, r0
 8019efa:	6800      	ldr	r0, [r0, #0]
 8019efc:	b120      	cbz	r0, 8019f08 <rmw_destroy_node+0x14>
 8019efe:	4b37      	ldr	r3, [pc, #220]	; (8019fdc <rmw_destroy_node+0xe8>)
 8019f00:	6819      	ldr	r1, [r3, #0]
 8019f02:	f7e6 f99d 	bl	8000240 <strcmp>
 8019f06:	b9e8      	cbnz	r0, 8019f44 <rmw_destroy_node+0x50>
 8019f08:	687d      	ldr	r5, [r7, #4]
 8019f0a:	b1dd      	cbz	r5, 8019f44 <rmw_destroy_node+0x50>
 8019f0c:	4b34      	ldr	r3, [pc, #208]	; (8019fe0 <rmw_destroy_node+0xec>)
 8019f0e:	681c      	ldr	r4, [r3, #0]
 8019f10:	2c00      	cmp	r4, #0
 8019f12:	d060      	beq.n	8019fd6 <rmw_destroy_node+0xe2>
 8019f14:	2600      	movs	r6, #0
 8019f16:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8019f1a:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 8019f1e:	429d      	cmp	r5, r3
 8019f20:	d013      	beq.n	8019f4a <rmw_destroy_node+0x56>
 8019f22:	2c00      	cmp	r4, #0
 8019f24:	d1f7      	bne.n	8019f16 <rmw_destroy_node+0x22>
 8019f26:	4b2f      	ldr	r3, [pc, #188]	; (8019fe4 <rmw_destroy_node+0xf0>)
 8019f28:	681c      	ldr	r4, [r3, #0]
 8019f2a:	b1c4      	cbz	r4, 8019f5e <rmw_destroy_node+0x6a>
 8019f2c:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8019f30:	6a0b      	ldr	r3, [r1, #32]
 8019f32:	429d      	cmp	r5, r3
 8019f34:	d1f9      	bne.n	8019f2a <rmw_destroy_node+0x36>
 8019f36:	317c      	adds	r1, #124	; 0x7c
 8019f38:	4638      	mov	r0, r7
 8019f3a:	f000 fbff 	bl	801a73c <rmw_destroy_subscription>
 8019f3e:	2801      	cmp	r0, #1
 8019f40:	4606      	mov	r6, r0
 8019f42:	d1f2      	bne.n	8019f2a <rmw_destroy_node+0x36>
 8019f44:	2601      	movs	r6, #1
 8019f46:	4630      	mov	r0, r6
 8019f48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019f4a:	3184      	adds	r1, #132	; 0x84
 8019f4c:	4638      	mov	r0, r7
 8019f4e:	f7f5 f875 	bl	800f03c <rmw_destroy_publisher>
 8019f52:	2801      	cmp	r0, #1
 8019f54:	4606      	mov	r6, r0
 8019f56:	d0f5      	beq.n	8019f44 <rmw_destroy_node+0x50>
 8019f58:	2c00      	cmp	r4, #0
 8019f5a:	d1dc      	bne.n	8019f16 <rmw_destroy_node+0x22>
 8019f5c:	e7e3      	b.n	8019f26 <rmw_destroy_node+0x32>
 8019f5e:	4b22      	ldr	r3, [pc, #136]	; (8019fe8 <rmw_destroy_node+0xf4>)
 8019f60:	681c      	ldr	r4, [r3, #0]
 8019f62:	b16c      	cbz	r4, 8019f80 <rmw_destroy_node+0x8c>
 8019f64:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8019f68:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 8019f6a:	429d      	cmp	r5, r3
 8019f6c:	d1f9      	bne.n	8019f62 <rmw_destroy_node+0x6e>
 8019f6e:	317c      	adds	r1, #124	; 0x7c
 8019f70:	4638      	mov	r0, r7
 8019f72:	f000 fa6d 	bl	801a450 <rmw_destroy_service>
 8019f76:	2801      	cmp	r0, #1
 8019f78:	4606      	mov	r6, r0
 8019f7a:	d0e3      	beq.n	8019f44 <rmw_destroy_node+0x50>
 8019f7c:	2c00      	cmp	r4, #0
 8019f7e:	d1f1      	bne.n	8019f64 <rmw_destroy_node+0x70>
 8019f80:	4b1a      	ldr	r3, [pc, #104]	; (8019fec <rmw_destroy_node+0xf8>)
 8019f82:	681c      	ldr	r4, [r3, #0]
 8019f84:	b16c      	cbz	r4, 8019fa2 <rmw_destroy_node+0xae>
 8019f86:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8019f8a:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 8019f8c:	429d      	cmp	r5, r3
 8019f8e:	d1f9      	bne.n	8019f84 <rmw_destroy_node+0x90>
 8019f90:	317c      	adds	r1, #124	; 0x7c
 8019f92:	4638      	mov	r0, r7
 8019f94:	f7ff fc0a 	bl	80197ac <rmw_destroy_client>
 8019f98:	2801      	cmp	r0, #1
 8019f9a:	4606      	mov	r6, r0
 8019f9c:	d0d2      	beq.n	8019f44 <rmw_destroy_node+0x50>
 8019f9e:	2c00      	cmp	r4, #0
 8019fa0:	d1f1      	bne.n	8019f86 <rmw_destroy_node+0x92>
 8019fa2:	6928      	ldr	r0, [r5, #16]
 8019fa4:	696a      	ldr	r2, [r5, #20]
 8019fa6:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8019faa:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8019fae:	6819      	ldr	r1, [r3, #0]
 8019fb0:	f7f7 fe2c 	bl	8011c0c <uxr_buffer_delete_entity>
 8019fb4:	4602      	mov	r2, r0
 8019fb6:	6928      	ldr	r0, [r5, #16]
 8019fb8:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8019fbc:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8019fc0:	f7f5 fb74 	bl	800f6ac <run_xrce_session>
 8019fc4:	4603      	mov	r3, r0
 8019fc6:	4638      	mov	r0, r7
 8019fc8:	2b00      	cmp	r3, #0
 8019fca:	bf08      	it	eq
 8019fcc:	2602      	moveq	r6, #2
 8019fce:	f7f5 f9ef 	bl	800f3b0 <rmw_uxrce_fini_node_memory>
 8019fd2:	4630      	mov	r0, r6
 8019fd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019fd6:	4626      	mov	r6, r4
 8019fd8:	e7a5      	b.n	8019f26 <rmw_destroy_node+0x32>
 8019fda:	bf00      	nop
 8019fdc:	08020748 	.word	0x08020748
 8019fe0:	200105fc 	.word	0x200105fc
 8019fe4:	2001063c 	.word	0x2001063c
 8019fe8:	2001060c 	.word	0x2001060c
 8019fec:	2000bc58 	.word	0x2000bc58

08019ff0 <rmw_node_get_graph_guard_condition>:
 8019ff0:	6843      	ldr	r3, [r0, #4]
 8019ff2:	6918      	ldr	r0, [r3, #16]
 8019ff4:	f500 705a 	add.w	r0, r0, #872	; 0x368
 8019ff8:	4770      	bx	lr
 8019ffa:	bf00      	nop

08019ffc <rmw_send_request>:
 8019ffc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a000:	4604      	mov	r4, r0
 801a002:	6800      	ldr	r0, [r0, #0]
 801a004:	b08b      	sub	sp, #44	; 0x2c
 801a006:	460e      	mov	r6, r1
 801a008:	4615      	mov	r5, r2
 801a00a:	b128      	cbz	r0, 801a018 <rmw_send_request+0x1c>
 801a00c:	4b21      	ldr	r3, [pc, #132]	; (801a094 <rmw_send_request+0x98>)
 801a00e:	6819      	ldr	r1, [r3, #0]
 801a010:	f7e6 f916 	bl	8000240 <strcmp>
 801a014:	2800      	cmp	r0, #0
 801a016:	d139      	bne.n	801a08c <rmw_send_request+0x90>
 801a018:	6864      	ldr	r4, [r4, #4]
 801a01a:	2700      	movs	r7, #0
 801a01c:	6963      	ldr	r3, [r4, #20]
 801a01e:	f8d4 8078 	ldr.w	r8, [r4, #120]	; 0x78
 801a022:	689b      	ldr	r3, [r3, #8]
 801a024:	4798      	blx	r3
 801a026:	f8d0 9004 	ldr.w	r9, [r0, #4]
 801a02a:	4630      	mov	r0, r6
 801a02c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801a030:	4798      	blx	r3
 801a032:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801a036:	9000      	str	r0, [sp, #0]
 801a038:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 801a03c:	6922      	ldr	r2, [r4, #16]
 801a03e:	ab02      	add	r3, sp, #8
 801a040:	6f21      	ldr	r1, [r4, #112]	; 0x70
 801a042:	f7f9 fb27 	bl	8013694 <uxr_prepare_output_stream>
 801a046:	e9c5 0700 	strd	r0, r7, [r5]
 801a04a:	b198      	cbz	r0, 801a074 <rmw_send_request+0x78>
 801a04c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801a050:	a902      	add	r1, sp, #8
 801a052:	4630      	mov	r0, r6
 801a054:	4798      	blx	r3
 801a056:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
 801a05a:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801a05e:	2b01      	cmp	r3, #1
 801a060:	d00c      	beq.n	801a07c <rmw_send_request+0x80>
 801a062:	6f61      	ldr	r1, [r4, #116]	; 0x74
 801a064:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801a068:	f7f8 fd16 	bl	8012a98 <uxr_run_session_until_confirm_delivery>
 801a06c:	4638      	mov	r0, r7
 801a06e:	b00b      	add	sp, #44	; 0x2c
 801a070:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a074:	2001      	movs	r0, #1
 801a076:	b00b      	add	sp, #44	; 0x2c
 801a078:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a07c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801a080:	f7f8 f950 	bl	8012324 <uxr_flash_output_streams>
 801a084:	4638      	mov	r0, r7
 801a086:	b00b      	add	sp, #44	; 0x2c
 801a088:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a08c:	200c      	movs	r0, #12
 801a08e:	b00b      	add	sp, #44	; 0x2c
 801a090:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a094:	08020748 	.word	0x08020748

0801a098 <rmw_take_request>:
 801a098:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a09c:	4605      	mov	r5, r0
 801a09e:	6800      	ldr	r0, [r0, #0]
 801a0a0:	b089      	sub	sp, #36	; 0x24
 801a0a2:	460c      	mov	r4, r1
 801a0a4:	4690      	mov	r8, r2
 801a0a6:	461e      	mov	r6, r3
 801a0a8:	b128      	cbz	r0, 801a0b6 <rmw_take_request+0x1e>
 801a0aa:	4b28      	ldr	r3, [pc, #160]	; (801a14c <rmw_take_request+0xb4>)
 801a0ac:	6819      	ldr	r1, [r3, #0]
 801a0ae:	f7e6 f8c7 	bl	8000240 <strcmp>
 801a0b2:	2800      	cmp	r0, #0
 801a0b4:	d146      	bne.n	801a144 <rmw_take_request+0xac>
 801a0b6:	b10e      	cbz	r6, 801a0bc <rmw_take_request+0x24>
 801a0b8:	2300      	movs	r3, #0
 801a0ba:	7033      	strb	r3, [r6, #0]
 801a0bc:	f8d5 9004 	ldr.w	r9, [r5, #4]
 801a0c0:	f7f5 fa76 	bl	800f5b0 <rmw_uxrce_clean_expired_static_input_buffer>
 801a0c4:	4648      	mov	r0, r9
 801a0c6:	f7f5 fa49 	bl	800f55c <rmw_uxrce_find_static_input_buffer_by_owner>
 801a0ca:	4607      	mov	r7, r0
 801a0cc:	b3b0      	cbz	r0, 801a13c <rmw_take_request+0xa4>
 801a0ce:	6885      	ldr	r5, [r0, #8]
 801a0d0:	f8d5 2838 	ldr.w	r2, [r5, #2104]	; 0x838
 801a0d4:	f8d5 383c 	ldr.w	r3, [r5, #2108]	; 0x83c
 801a0d8:	e9c4 3208 	strd	r3, r2, [r4, #32]
 801a0dc:	f895 3837 	ldrb.w	r3, [r5, #2103]	; 0x837
 801a0e0:	7423      	strb	r3, [r4, #16]
 801a0e2:	f8b5 2834 	ldrh.w	r2, [r5, #2100]	; 0x834
 801a0e6:	f895 3836 	ldrb.w	r3, [r5, #2102]	; 0x836
 801a0ea:	f8a4 2011 	strh.w	r2, [r4, #17]
 801a0ee:	74e3      	strb	r3, [r4, #19]
 801a0f0:	f8d5 1828 	ldr.w	r1, [r5, #2088]	; 0x828
 801a0f4:	f8d5 282c 	ldr.w	r2, [r5, #2092]	; 0x82c
 801a0f8:	f8d5 3830 	ldr.w	r3, [r5, #2096]	; 0x830
 801a0fc:	6161      	str	r1, [r4, #20]
 801a0fe:	61a2      	str	r2, [r4, #24]
 801a100:	61e3      	str	r3, [r4, #28]
 801a102:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801a106:	689b      	ldr	r3, [r3, #8]
 801a108:	4798      	blx	r3
 801a10a:	6844      	ldr	r4, [r0, #4]
 801a10c:	f8d5 2810 	ldr.w	r2, [r5, #2064]	; 0x810
 801a110:	f105 0110 	add.w	r1, r5, #16
 801a114:	4668      	mov	r0, sp
 801a116:	f7f7 fd05 	bl	8011b24 <ucdr_init_buffer>
 801a11a:	4641      	mov	r1, r8
 801a11c:	68e3      	ldr	r3, [r4, #12]
 801a11e:	4668      	mov	r0, sp
 801a120:	4798      	blx	r3
 801a122:	4639      	mov	r1, r7
 801a124:	4604      	mov	r4, r0
 801a126:	480a      	ldr	r0, [pc, #40]	; (801a150 <rmw_take_request+0xb8>)
 801a128:	f7ff fb2c 	bl	8019784 <put_memory>
 801a12c:	b106      	cbz	r6, 801a130 <rmw_take_request+0x98>
 801a12e:	7034      	strb	r4, [r6, #0]
 801a130:	f084 0001 	eor.w	r0, r4, #1
 801a134:	b2c0      	uxtb	r0, r0
 801a136:	b009      	add	sp, #36	; 0x24
 801a138:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a13c:	2001      	movs	r0, #1
 801a13e:	b009      	add	sp, #36	; 0x24
 801a140:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a144:	200c      	movs	r0, #12
 801a146:	b009      	add	sp, #36	; 0x24
 801a148:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a14c:	08020748 	.word	0x08020748
 801a150:	2001062c 	.word	0x2001062c

0801a154 <rmw_send_response>:
 801a154:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a156:	4605      	mov	r5, r0
 801a158:	6800      	ldr	r0, [r0, #0]
 801a15a:	b091      	sub	sp, #68	; 0x44
 801a15c:	460c      	mov	r4, r1
 801a15e:	4616      	mov	r6, r2
 801a160:	b128      	cbz	r0, 801a16e <rmw_send_response+0x1a>
 801a162:	4b29      	ldr	r3, [pc, #164]	; (801a208 <rmw_send_response+0xb4>)
 801a164:	6819      	ldr	r1, [r3, #0]
 801a166:	f7e6 f86b 	bl	8000240 <strcmp>
 801a16a:	2800      	cmp	r0, #0
 801a16c:	d141      	bne.n	801a1f2 <rmw_send_response+0x9e>
 801a16e:	686d      	ldr	r5, [r5, #4]
 801a170:	68a1      	ldr	r1, [r4, #8]
 801a172:	6860      	ldr	r0, [r4, #4]
 801a174:	6faf      	ldr	r7, [r5, #120]	; 0x78
 801a176:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 801a17a:	9307      	str	r3, [sp, #28]
 801a17c:	4623      	mov	r3, r4
 801a17e:	9206      	str	r2, [sp, #24]
 801a180:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a184:	789b      	ldrb	r3, [r3, #2]
 801a186:	f88d 2017 	strb.w	r2, [sp, #23]
 801a18a:	f88d 3016 	strb.w	r3, [sp, #22]
 801a18e:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 801a192:	68e2      	ldr	r2, [r4, #12]
 801a194:	f8ad 3014 	strh.w	r3, [sp, #20]
 801a198:	ab02      	add	r3, sp, #8
 801a19a:	696c      	ldr	r4, [r5, #20]
 801a19c:	c307      	stmia	r3!, {r0, r1, r2}
 801a19e:	68e3      	ldr	r3, [r4, #12]
 801a1a0:	4798      	blx	r3
 801a1a2:	6844      	ldr	r4, [r0, #4]
 801a1a4:	4630      	mov	r0, r6
 801a1a6:	6923      	ldr	r3, [r4, #16]
 801a1a8:	4798      	blx	r3
 801a1aa:	f100 0318 	add.w	r3, r0, #24
 801a1ae:	6938      	ldr	r0, [r7, #16]
 801a1b0:	9300      	str	r3, [sp, #0]
 801a1b2:	ab08      	add	r3, sp, #32
 801a1b4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801a1b8:	692a      	ldr	r2, [r5, #16]
 801a1ba:	6f29      	ldr	r1, [r5, #112]	; 0x70
 801a1bc:	f7f9 fa6a 	bl	8013694 <uxr_prepare_output_stream>
 801a1c0:	b910      	cbnz	r0, 801a1c8 <rmw_send_response+0x74>
 801a1c2:	2001      	movs	r0, #1
 801a1c4:	b011      	add	sp, #68	; 0x44
 801a1c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a1c8:	a902      	add	r1, sp, #8
 801a1ca:	a808      	add	r0, sp, #32
 801a1cc:	f7fa fbce 	bl	801496c <uxr_serialize_SampleIdentity>
 801a1d0:	68a3      	ldr	r3, [r4, #8]
 801a1d2:	a908      	add	r1, sp, #32
 801a1d4:	4630      	mov	r0, r6
 801a1d6:	4798      	blx	r3
 801a1d8:	f895 3072 	ldrb.w	r3, [r5, #114]	; 0x72
 801a1dc:	6938      	ldr	r0, [r7, #16]
 801a1de:	2b01      	cmp	r3, #1
 801a1e0:	d00a      	beq.n	801a1f8 <rmw_send_response+0xa4>
 801a1e2:	6f69      	ldr	r1, [r5, #116]	; 0x74
 801a1e4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801a1e8:	f7f8 fc56 	bl	8012a98 <uxr_run_session_until_confirm_delivery>
 801a1ec:	2000      	movs	r0, #0
 801a1ee:	b011      	add	sp, #68	; 0x44
 801a1f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a1f2:	200c      	movs	r0, #12
 801a1f4:	b011      	add	sp, #68	; 0x44
 801a1f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a1f8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801a1fc:	f7f8 f892 	bl	8012324 <uxr_flash_output_streams>
 801a200:	2000      	movs	r0, #0
 801a202:	b011      	add	sp, #68	; 0x44
 801a204:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a206:	bf00      	nop
 801a208:	08020748 	.word	0x08020748

0801a20c <rmw_take_response>:
 801a20c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a210:	4604      	mov	r4, r0
 801a212:	6800      	ldr	r0, [r0, #0]
 801a214:	b088      	sub	sp, #32
 801a216:	460f      	mov	r7, r1
 801a218:	4690      	mov	r8, r2
 801a21a:	461d      	mov	r5, r3
 801a21c:	b120      	cbz	r0, 801a228 <rmw_take_response+0x1c>
 801a21e:	4b1d      	ldr	r3, [pc, #116]	; (801a294 <rmw_take_response+0x88>)
 801a220:	6819      	ldr	r1, [r3, #0]
 801a222:	f7e6 f80d 	bl	8000240 <strcmp>
 801a226:	bb68      	cbnz	r0, 801a284 <rmw_take_response+0x78>
 801a228:	b10d      	cbz	r5, 801a22e <rmw_take_response+0x22>
 801a22a:	2300      	movs	r3, #0
 801a22c:	702b      	strb	r3, [r5, #0]
 801a22e:	6864      	ldr	r4, [r4, #4]
 801a230:	f7f5 f9be 	bl	800f5b0 <rmw_uxrce_clean_expired_static_input_buffer>
 801a234:	4620      	mov	r0, r4
 801a236:	f7f5 f991 	bl	800f55c <rmw_uxrce_find_static_input_buffer_by_owner>
 801a23a:	4606      	mov	r6, r0
 801a23c:	b330      	cbz	r0, 801a28c <rmw_take_response+0x80>
 801a23e:	6963      	ldr	r3, [r4, #20]
 801a240:	6884      	ldr	r4, [r0, #8]
 801a242:	68db      	ldr	r3, [r3, #12]
 801a244:	f504 6203 	add.w	r2, r4, #2096	; 0x830
 801a248:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 801a24c:	e9c7 0108 	strd	r0, r1, [r7, #32]
 801a250:	4798      	blx	r3
 801a252:	6847      	ldr	r7, [r0, #4]
 801a254:	f8d4 2810 	ldr.w	r2, [r4, #2064]	; 0x810
 801a258:	f104 0110 	add.w	r1, r4, #16
 801a25c:	4668      	mov	r0, sp
 801a25e:	f7f7 fc61 	bl	8011b24 <ucdr_init_buffer>
 801a262:	4641      	mov	r1, r8
 801a264:	68fb      	ldr	r3, [r7, #12]
 801a266:	4668      	mov	r0, sp
 801a268:	4798      	blx	r3
 801a26a:	4631      	mov	r1, r6
 801a26c:	4604      	mov	r4, r0
 801a26e:	480a      	ldr	r0, [pc, #40]	; (801a298 <rmw_take_response+0x8c>)
 801a270:	f7ff fa88 	bl	8019784 <put_memory>
 801a274:	b105      	cbz	r5, 801a278 <rmw_take_response+0x6c>
 801a276:	702c      	strb	r4, [r5, #0]
 801a278:	f084 0001 	eor.w	r0, r4, #1
 801a27c:	b2c0      	uxtb	r0, r0
 801a27e:	b008      	add	sp, #32
 801a280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a284:	200c      	movs	r0, #12
 801a286:	b008      	add	sp, #32
 801a288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a28c:	2001      	movs	r0, #1
 801a28e:	b008      	add	sp, #32
 801a290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a294:	08020748 	.word	0x08020748
 801a298:	2001062c 	.word	0x2001062c

0801a29c <rmw_create_service>:
 801a29c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a2a0:	b091      	sub	sp, #68	; 0x44
 801a2a2:	2900      	cmp	r1, #0
 801a2a4:	f000 80bb 	beq.w	801a41e <rmw_create_service+0x182>
 801a2a8:	4606      	mov	r6, r0
 801a2aa:	2800      	cmp	r0, #0
 801a2ac:	f000 80b7 	beq.w	801a41e <rmw_create_service+0x182>
 801a2b0:	4614      	mov	r4, r2
 801a2b2:	6800      	ldr	r0, [r0, #0]
 801a2b4:	4689      	mov	r9, r1
 801a2b6:	461d      	mov	r5, r3
 801a2b8:	f7f5 fb0a 	bl	800f8d0 <is_uxrce_rmw_identifier_valid>
 801a2bc:	2c00      	cmp	r4, #0
 801a2be:	f000 80ae 	beq.w	801a41e <rmw_create_service+0x182>
 801a2c2:	f080 0001 	eor.w	r0, r0, #1
 801a2c6:	b2c0      	uxtb	r0, r0
 801a2c8:	2800      	cmp	r0, #0
 801a2ca:	f040 80a8 	bne.w	801a41e <rmw_create_service+0x182>
 801a2ce:	7823      	ldrb	r3, [r4, #0]
 801a2d0:	2b00      	cmp	r3, #0
 801a2d2:	f000 80a4 	beq.w	801a41e <rmw_create_service+0x182>
 801a2d6:	2d00      	cmp	r5, #0
 801a2d8:	f000 80a1 	beq.w	801a41e <rmw_create_service+0x182>
 801a2dc:	4856      	ldr	r0, [pc, #344]	; (801a438 <rmw_create_service+0x19c>)
 801a2de:	f8d6 8004 	ldr.w	r8, [r6, #4]
 801a2e2:	f7ff fa3f 	bl	8019764 <get_memory>
 801a2e6:	4606      	mov	r6, r0
 801a2e8:	2800      	cmp	r0, #0
 801a2ea:	f000 8099 	beq.w	801a420 <rmw_create_service+0x184>
 801a2ee:	6887      	ldr	r7, [r0, #8]
 801a2f0:	f107 0a88 	add.w	sl, r7, #136	; 0x88
 801a2f4:	f8c7 7080 	str.w	r7, [r7, #128]	; 0x80
 801a2f8:	f7ff faba 	bl	8019870 <rmw_get_implementation_identifier>
 801a2fc:	67f8      	str	r0, [r7, #124]	; 0x7c
 801a2fe:	f8c7 a084 	str.w	sl, [r7, #132]	; 0x84
 801a302:	4620      	mov	r0, r4
 801a304:	f7e5 fffc 	bl	8000300 <strlen>
 801a308:	1c42      	adds	r2, r0, #1
 801a30a:	f107 067c 	add.w	r6, r7, #124	; 0x7c
 801a30e:	2a3c      	cmp	r2, #60	; 0x3c
 801a310:	f200 808a 	bhi.w	801a428 <rmw_create_service+0x18c>
 801a314:	4621      	mov	r1, r4
 801a316:	4650      	mov	r0, sl
 801a318:	f003 fd6d 	bl	801ddf6 <memcpy>
 801a31c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801a320:	4629      	mov	r1, r5
 801a322:	2250      	movs	r2, #80	; 0x50
 801a324:	f107 0020 	add.w	r0, r7, #32
 801a328:	f8c7 8078 	str.w	r8, [r7, #120]	; 0x78
 801a32c:	677b      	str	r3, [r7, #116]	; 0x74
 801a32e:	f003 fd62 	bl	801ddf6 <memcpy>
 801a332:	4648      	mov	r0, r9
 801a334:	4941      	ldr	r1, [pc, #260]	; (801a43c <rmw_create_service+0x1a0>)
 801a336:	f7f5 fae5 	bl	800f904 <get_service_typesupport_handle>
 801a33a:	2800      	cmp	r0, #0
 801a33c:	d074      	beq.n	801a428 <rmw_create_service+0x18c>
 801a33e:	6843      	ldr	r3, [r0, #4]
 801a340:	617b      	str	r3, [r7, #20]
 801a342:	2b00      	cmp	r3, #0
 801a344:	d070      	beq.n	801a428 <rmw_create_service+0x18c>
 801a346:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801a34a:	2108      	movs	r1, #8
 801a34c:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 801a444 <rmw_create_service+0x1a8>
 801a350:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a354:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 801a448 <rmw_create_service+0x1ac>
 801a358:	f8b3 05a2 	ldrh.w	r0, [r3, #1442]	; 0x5a2
 801a35c:	1c42      	adds	r2, r0, #1
 801a35e:	f8a3 25a2 	strh.w	r2, [r3, #1442]	; 0x5a2
 801a362:	f7f7 fe8f 	bl	8012084 <uxr_object_id>
 801a366:	2364      	movs	r3, #100	; 0x64
 801a368:	6138      	str	r0, [r7, #16]
 801a36a:	4652      	mov	r2, sl
 801a36c:	4649      	mov	r1, r9
 801a36e:	6978      	ldr	r0, [r7, #20]
 801a370:	f7f5 fa02 	bl	800f778 <generate_service_types>
 801a374:	2800      	cmp	r0, #0
 801a376:	d057      	beq.n	801a428 <rmw_create_service+0x18c>
 801a378:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 801a44c <rmw_create_service+0x1b0>
 801a37c:	233c      	movs	r3, #60	; 0x3c
 801a37e:	4a30      	ldr	r2, [pc, #192]	; (801a440 <rmw_create_service+0x1a4>)
 801a380:	4620      	mov	r0, r4
 801a382:	4659      	mov	r1, fp
 801a384:	f7f5 f9c6 	bl	800f714 <generate_service_topics>
 801a388:	2800      	cmp	r0, #0
 801a38a:	d04d      	beq.n	801a428 <rmw_create_service+0x18c>
 801a38c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801a390:	a80c      	add	r0, sp, #48	; 0x30
 801a392:	4629      	mov	r1, r5
 801a394:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 801a398:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801a39c:	f7f5 f9a2 	bl	800f6e4 <convert_qos_profile>
 801a3a0:	4a27      	ldr	r2, [pc, #156]	; (801a440 <rmw_create_service+0x1a4>)
 801a3a2:	a80c      	add	r0, sp, #48	; 0x30
 801a3a4:	9400      	str	r4, [sp, #0]
 801a3a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a3a8:	e9cd b203 	strd	fp, r2, [sp, #12]
 801a3ac:	e9cd 9a01 	strd	r9, sl, [sp, #4]
 801a3b0:	c803      	ldmia	r0, {r0, r1}
 801a3b2:	9a08      	ldr	r2, [sp, #32]
 801a3b4:	9005      	str	r0, [sp, #20]
 801a3b6:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 801a3ba:	2306      	movs	r3, #6
 801a3bc:	f8ad 1018 	strh.w	r1, [sp, #24]
 801a3c0:	9307      	str	r3, [sp, #28]
 801a3c2:	6811      	ldr	r1, [r2, #0]
 801a3c4:	f8d8 3014 	ldr.w	r3, [r8, #20]
 801a3c8:	693a      	ldr	r2, [r7, #16]
 801a3ca:	f7f7 fe21 	bl	8012010 <uxr_buffer_create_replier_bin>
 801a3ce:	4602      	mov	r2, r0
 801a3d0:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801a3d4:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 801a3d8:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 801a3dc:	f7f5 f966 	bl	800f6ac <run_xrce_session>
 801a3e0:	b310      	cbz	r0, 801a428 <rmw_create_service+0x18c>
 801a3e2:	7a2b      	ldrb	r3, [r5, #8]
 801a3e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a3e8:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801a3ec:	2b02      	cmp	r3, #2
 801a3ee:	920e      	str	r2, [sp, #56]	; 0x38
 801a3f0:	f04f 0200 	mov.w	r2, #0
 801a3f4:	920f      	str	r2, [sp, #60]	; 0x3c
 801a3f6:	bf0c      	ite	eq
 801a3f8:	e9d0 23df 	ldrdeq	r2, r3, [r0, #892]	; 0x37c
 801a3fc:	e9d0 32dd 	ldrdne	r3, r2, [r0, #884]	; 0x374
 801a400:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801a404:	930b      	str	r3, [sp, #44]	; 0x2c
 801a406:	ab0e      	add	r3, sp, #56	; 0x38
 801a408:	673a      	str	r2, [r7, #112]	; 0x70
 801a40a:	f8d0 20e4 	ldr.w	r2, [r0, #228]	; 0xe4
 801a40e:	9300      	str	r3, [sp, #0]
 801a410:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a412:	6811      	ldr	r1, [r2, #0]
 801a414:	693a      	ldr	r2, [r7, #16]
 801a416:	f001 faff 	bl	801ba18 <uxr_buffer_request_data>
 801a41a:	8338      	strh	r0, [r7, #24]
 801a41c:	e000      	b.n	801a420 <rmw_create_service+0x184>
 801a41e:	2600      	movs	r6, #0
 801a420:	4630      	mov	r0, r6
 801a422:	b011      	add	sp, #68	; 0x44
 801a424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a428:	4630      	mov	r0, r6
 801a42a:	2600      	movs	r6, #0
 801a42c:	f7f5 f804 	bl	800f438 <rmw_uxrce_fini_service_memory>
 801a430:	4630      	mov	r0, r6
 801a432:	b011      	add	sp, #68	; 0x44
 801a434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a438:	2001060c 	.word	0x2001060c
 801a43c:	0801ed94 	.word	0x0801ed94
 801a440:	20010d40 	.word	0x20010d40
 801a444:	20010d7c 	.word	0x20010d7c
 801a448:	20010cdc 	.word	0x20010cdc
 801a44c:	20010ca0 	.word	0x20010ca0

0801a450 <rmw_destroy_service>:
 801a450:	b570      	push	{r4, r5, r6, lr}
 801a452:	b128      	cbz	r0, 801a460 <rmw_destroy_service+0x10>
 801a454:	4604      	mov	r4, r0
 801a456:	6800      	ldr	r0, [r0, #0]
 801a458:	460d      	mov	r5, r1
 801a45a:	f7f5 fa39 	bl	800f8d0 <is_uxrce_rmw_identifier_valid>
 801a45e:	b910      	cbnz	r0, 801a466 <rmw_destroy_service+0x16>
 801a460:	2401      	movs	r4, #1
 801a462:	4620      	mov	r0, r4
 801a464:	bd70      	pop	{r4, r5, r6, pc}
 801a466:	6863      	ldr	r3, [r4, #4]
 801a468:	2b00      	cmp	r3, #0
 801a46a:	d0f9      	beq.n	801a460 <rmw_destroy_service+0x10>
 801a46c:	2d00      	cmp	r5, #0
 801a46e:	d0f7      	beq.n	801a460 <rmw_destroy_service+0x10>
 801a470:	6828      	ldr	r0, [r5, #0]
 801a472:	f7f5 fa2d 	bl	800f8d0 <is_uxrce_rmw_identifier_valid>
 801a476:	2800      	cmp	r0, #0
 801a478:	d0f2      	beq.n	801a460 <rmw_destroy_service+0x10>
 801a47a:	686e      	ldr	r6, [r5, #4]
 801a47c:	2e00      	cmp	r6, #0
 801a47e:	d0ef      	beq.n	801a460 <rmw_destroy_service+0x10>
 801a480:	6864      	ldr	r4, [r4, #4]
 801a482:	6932      	ldr	r2, [r6, #16]
 801a484:	6920      	ldr	r0, [r4, #16]
 801a486:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801a48a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801a48e:	6819      	ldr	r1, [r3, #0]
 801a490:	f001 fafc 	bl	801ba8c <uxr_buffer_cancel_data>
 801a494:	4602      	mov	r2, r0
 801a496:	6920      	ldr	r0, [r4, #16]
 801a498:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801a49c:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801a4a0:	f7f5 f904 	bl	800f6ac <run_xrce_session>
 801a4a4:	6920      	ldr	r0, [r4, #16]
 801a4a6:	6932      	ldr	r2, [r6, #16]
 801a4a8:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801a4ac:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801a4b0:	6819      	ldr	r1, [r3, #0]
 801a4b2:	f7f7 fbab 	bl	8011c0c <uxr_buffer_delete_entity>
 801a4b6:	4602      	mov	r2, r0
 801a4b8:	6920      	ldr	r0, [r4, #16]
 801a4ba:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801a4be:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801a4c2:	f7f5 f8f3 	bl	800f6ac <run_xrce_session>
 801a4c6:	4603      	mov	r3, r0
 801a4c8:	4628      	mov	r0, r5
 801a4ca:	2b00      	cmp	r3, #0
 801a4cc:	bf14      	ite	ne
 801a4ce:	2400      	movne	r4, #0
 801a4d0:	2402      	moveq	r4, #2
 801a4d2:	f7f4 ffb1 	bl	800f438 <rmw_uxrce_fini_service_memory>
 801a4d6:	e7c4      	b.n	801a462 <rmw_destroy_service+0x12>

0801a4d8 <rmw_service_response_publisher_get_actual_qos>:
 801a4d8:	b181      	cbz	r1, 801a4fc <rmw_service_response_publisher_get_actual_qos+0x24>
 801a4da:	4603      	mov	r3, r0
 801a4dc:	b510      	push	{r4, lr}
 801a4de:	fab0 f480 	clz	r4, r0
 801a4e2:	0964      	lsrs	r4, r4, #5
 801a4e4:	b140      	cbz	r0, 801a4f8 <rmw_service_response_publisher_get_actual_qos+0x20>
 801a4e6:	685b      	ldr	r3, [r3, #4]
 801a4e8:	4608      	mov	r0, r1
 801a4ea:	2250      	movs	r2, #80	; 0x50
 801a4ec:	f103 0120 	add.w	r1, r3, #32
 801a4f0:	f003 fc81 	bl	801ddf6 <memcpy>
 801a4f4:	4620      	mov	r0, r4
 801a4f6:	bd10      	pop	{r4, pc}
 801a4f8:	200b      	movs	r0, #11
 801a4fa:	bd10      	pop	{r4, pc}
 801a4fc:	200b      	movs	r0, #11
 801a4fe:	4770      	bx	lr

0801a500 <rmw_service_request_subscription_get_actual_qos>:
 801a500:	b178      	cbz	r0, 801a522 <rmw_service_request_subscription_get_actual_qos+0x22>
 801a502:	b510      	push	{r4, lr}
 801a504:	fab1 f481 	clz	r4, r1
 801a508:	0964      	lsrs	r4, r4, #5
 801a50a:	b141      	cbz	r1, 801a51e <rmw_service_request_subscription_get_actual_qos+0x1e>
 801a50c:	6843      	ldr	r3, [r0, #4]
 801a50e:	2250      	movs	r2, #80	; 0x50
 801a510:	4608      	mov	r0, r1
 801a512:	f103 0120 	add.w	r1, r3, #32
 801a516:	f003 fc6e 	bl	801ddf6 <memcpy>
 801a51a:	4620      	mov	r0, r4
 801a51c:	bd10      	pop	{r4, pc}
 801a51e:	200b      	movs	r0, #11
 801a520:	bd10      	pop	{r4, pc}
 801a522:	200b      	movs	r0, #11
 801a524:	4770      	bx	lr
 801a526:	bf00      	nop

0801a528 <rmw_create_subscription>:
 801a528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a52c:	b08d      	sub	sp, #52	; 0x34
 801a52e:	2900      	cmp	r1, #0
 801a530:	f000 80d8 	beq.w	801a6e4 <rmw_create_subscription+0x1bc>
 801a534:	4604      	mov	r4, r0
 801a536:	2800      	cmp	r0, #0
 801a538:	f000 80d4 	beq.w	801a6e4 <rmw_create_subscription+0x1bc>
 801a53c:	6800      	ldr	r0, [r0, #0]
 801a53e:	460e      	mov	r6, r1
 801a540:	4615      	mov	r5, r2
 801a542:	461f      	mov	r7, r3
 801a544:	f7f5 f9c4 	bl	800f8d0 <is_uxrce_rmw_identifier_valid>
 801a548:	f080 0001 	eor.w	r0, r0, #1
 801a54c:	b2c0      	uxtb	r0, r0
 801a54e:	2800      	cmp	r0, #0
 801a550:	f040 80c8 	bne.w	801a6e4 <rmw_create_subscription+0x1bc>
 801a554:	2d00      	cmp	r5, #0
 801a556:	f000 80c5 	beq.w	801a6e4 <rmw_create_subscription+0x1bc>
 801a55a:	782b      	ldrb	r3, [r5, #0]
 801a55c:	2b00      	cmp	r3, #0
 801a55e:	f000 80c1 	beq.w	801a6e4 <rmw_create_subscription+0x1bc>
 801a562:	2f00      	cmp	r7, #0
 801a564:	f000 80be 	beq.w	801a6e4 <rmw_create_subscription+0x1bc>
 801a568:	4867      	ldr	r0, [pc, #412]	; (801a708 <rmw_create_subscription+0x1e0>)
 801a56a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801a56e:	f7ff f8f9 	bl	8019764 <get_memory>
 801a572:	4604      	mov	r4, r0
 801a574:	2800      	cmp	r0, #0
 801a576:	f000 80b6 	beq.w	801a6e6 <rmw_create_subscription+0x1be>
 801a57a:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801a57e:	f108 0a98 	add.w	sl, r8, #152	; 0x98
 801a582:	f8c8 8080 	str.w	r8, [r8, #128]	; 0x80
 801a586:	f7ff f973 	bl	8019870 <rmw_get_implementation_identifier>
 801a58a:	f8c8 007c 	str.w	r0, [r8, #124]	; 0x7c
 801a58e:	f8c8 a084 	str.w	sl, [r8, #132]	; 0x84
 801a592:	4628      	mov	r0, r5
 801a594:	f7e5 feb4 	bl	8000300 <strlen>
 801a598:	3001      	adds	r0, #1
 801a59a:	f108 047c 	add.w	r4, r8, #124	; 0x7c
 801a59e:	283c      	cmp	r0, #60	; 0x3c
 801a5a0:	f200 80a5 	bhi.w	801a6ee <rmw_create_subscription+0x1c6>
 801a5a4:	462b      	mov	r3, r5
 801a5a6:	4a59      	ldr	r2, [pc, #356]	; (801a70c <rmw_create_subscription+0x1e4>)
 801a5a8:	213c      	movs	r1, #60	; 0x3c
 801a5aa:	4650      	mov	r0, sl
 801a5ac:	f003 fa18 	bl	801d9e0 <sniprintf>
 801a5b0:	4639      	mov	r1, r7
 801a5b2:	2250      	movs	r2, #80	; 0x50
 801a5b4:	f108 0028 	add.w	r0, r8, #40	; 0x28
 801a5b8:	f8c8 9020 	str.w	r9, [r8, #32]
 801a5bc:	f003 fc1b 	bl	801ddf6 <memcpy>
 801a5c0:	4630      	mov	r0, r6
 801a5c2:	4953      	ldr	r1, [pc, #332]	; (801a710 <rmw_create_subscription+0x1e8>)
 801a5c4:	f7f5 f992 	bl	800f8ec <get_message_typesupport_handle>
 801a5c8:	2800      	cmp	r0, #0
 801a5ca:	f000 8090 	beq.w	801a6ee <rmw_create_subscription+0x1c6>
 801a5ce:	6842      	ldr	r2, [r0, #4]
 801a5d0:	f8c8 2018 	str.w	r2, [r8, #24]
 801a5d4:	2a00      	cmp	r2, #0
 801a5d6:	f000 808a 	beq.w	801a6ee <rmw_create_subscription+0x1c6>
 801a5da:	4629      	mov	r1, r5
 801a5dc:	463b      	mov	r3, r7
 801a5de:	4648      	mov	r0, r9
 801a5e0:	f7ff fb84 	bl	8019cec <create_topic>
 801a5e4:	f8c8 001c 	str.w	r0, [r8, #28]
 801a5e8:	2800      	cmp	r0, #0
 801a5ea:	f000 8085 	beq.w	801a6f8 <rmw_create_subscription+0x1d0>
 801a5ee:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801a5f2:	2104      	movs	r1, #4
 801a5f4:	2506      	movs	r5, #6
 801a5f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a5fa:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	; 0x59c
 801a5fe:	1c42      	adds	r2, r0, #1
 801a600:	f8a3 259c 	strh.w	r2, [r3, #1436]	; 0x59c
 801a604:	f7f7 fd3e 	bl	8012084 <uxr_object_id>
 801a608:	f8c8 0010 	str.w	r0, [r8, #16]
 801a60c:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801a610:	f8d0 3384 	ldr.w	r3, [r0, #900]	; 0x384
 801a614:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801a618:	9500      	str	r5, [sp, #0]
 801a61a:	6819      	ldr	r1, [r3, #0]
 801a61c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801a620:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801a624:	f7f7 fbd6 	bl	8011dd4 <uxr_buffer_create_subscriber_bin>
 801a628:	4602      	mov	r2, r0
 801a62a:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801a62e:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 801a632:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 801a636:	f7f5 f839 	bl	800f6ac <run_xrce_session>
 801a63a:	2800      	cmp	r0, #0
 801a63c:	d057      	beq.n	801a6ee <rmw_create_subscription+0x1c6>
 801a63e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801a642:	4629      	mov	r1, r5
 801a644:	ae08      	add	r6, sp, #32
 801a646:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a64a:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	; 0x59e
 801a64e:	1c42      	adds	r2, r0, #1
 801a650:	f8a3 259e 	strh.w	r2, [r3, #1438]	; 0x59e
 801a654:	f7f7 fd16 	bl	8012084 <uxr_object_id>
 801a658:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801a65c:	f8d8 301c 	ldr.w	r3, [r8, #28]
 801a660:	4639      	mov	r1, r7
 801a662:	f8c8 0014 	str.w	r0, [r8, #20]
 801a666:	4630      	mov	r0, r6
 801a668:	f8da b384 	ldr.w	fp, [sl, #900]	; 0x384
 801a66c:	9305      	str	r3, [sp, #20]
 801a66e:	f7f5 f839 	bl	800f6e4 <convert_qos_profile>
 801a672:	9503      	str	r5, [sp, #12]
 801a674:	9b05      	ldr	r3, [sp, #20]
 801a676:	e896 0003 	ldmia.w	r6, {r0, r1}
 801a67a:	9001      	str	r0, [sp, #4]
 801a67c:	f50a 7028 	add.w	r0, sl, #672	; 0x2a0
 801a680:	f8ad 1008 	strh.w	r1, [sp, #8]
 801a684:	691b      	ldr	r3, [r3, #16]
 801a686:	9300      	str	r3, [sp, #0]
 801a688:	f8db 1000 	ldr.w	r1, [fp]
 801a68c:	e9d8 3204 	ldrd	r3, r2, [r8, #16]
 801a690:	f7f7 fc46 	bl	8011f20 <uxr_buffer_create_datareader_bin>
 801a694:	4602      	mov	r2, r0
 801a696:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801a69a:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 801a69e:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 801a6a2:	f7f5 f803 	bl	800f6ac <run_xrce_session>
 801a6a6:	b310      	cbz	r0, 801a6ee <rmw_create_subscription+0x1c6>
 801a6a8:	7a3b      	ldrb	r3, [r7, #8]
 801a6aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a6ae:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801a6b2:	2b02      	cmp	r3, #2
 801a6b4:	920a      	str	r2, [sp, #40]	; 0x28
 801a6b6:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 801a6ba:	f04f 0200 	mov.w	r2, #0
 801a6be:	bf08      	it	eq
 801a6c0:	f8d0 3380 	ldreq.w	r3, [r0, #896]	; 0x380
 801a6c4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801a6c8:	bf18      	it	ne
 801a6ca:	f8d0 30d4 	ldrne.w	r3, [r0, #212]	; 0xd4
 801a6ce:	920b      	str	r2, [sp, #44]	; 0x2c
 801a6d0:	9307      	str	r3, [sp, #28]
 801a6d2:	ab0a      	add	r3, sp, #40	; 0x28
 801a6d4:	9300      	str	r3, [sp, #0]
 801a6d6:	9b07      	ldr	r3, [sp, #28]
 801a6d8:	f8d8 2014 	ldr.w	r2, [r8, #20]
 801a6dc:	6809      	ldr	r1, [r1, #0]
 801a6de:	f001 f99b 	bl	801ba18 <uxr_buffer_request_data>
 801a6e2:	e000      	b.n	801a6e6 <rmw_create_subscription+0x1be>
 801a6e4:	2400      	movs	r4, #0
 801a6e6:	4620      	mov	r0, r4
 801a6e8:	b00d      	add	sp, #52	; 0x34
 801a6ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a6ee:	f8d8 001c 	ldr.w	r0, [r8, #28]
 801a6f2:	b108      	cbz	r0, 801a6f8 <rmw_create_subscription+0x1d0>
 801a6f4:	f7f4 fecc 	bl	800f490 <rmw_uxrce_fini_topic_memory>
 801a6f8:	4620      	mov	r0, r4
 801a6fa:	2400      	movs	r4, #0
 801a6fc:	f7f4 fe86 	bl	800f40c <rmw_uxrce_fini_subscription_memory>
 801a700:	4620      	mov	r0, r4
 801a702:	b00d      	add	sp, #52	; 0x34
 801a704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a708:	2001063c 	.word	0x2001063c
 801a70c:	0801fbfc 	.word	0x0801fbfc
 801a710:	0801ed94 	.word	0x0801ed94

0801a714 <rmw_subscription_get_actual_qos>:
 801a714:	b178      	cbz	r0, 801a736 <rmw_subscription_get_actual_qos+0x22>
 801a716:	b510      	push	{r4, lr}
 801a718:	fab1 f481 	clz	r4, r1
 801a71c:	0964      	lsrs	r4, r4, #5
 801a71e:	b141      	cbz	r1, 801a732 <rmw_subscription_get_actual_qos+0x1e>
 801a720:	6843      	ldr	r3, [r0, #4]
 801a722:	2250      	movs	r2, #80	; 0x50
 801a724:	4608      	mov	r0, r1
 801a726:	f103 0128 	add.w	r1, r3, #40	; 0x28
 801a72a:	f003 fb64 	bl	801ddf6 <memcpy>
 801a72e:	4620      	mov	r0, r4
 801a730:	bd10      	pop	{r4, pc}
 801a732:	200b      	movs	r0, #11
 801a734:	bd10      	pop	{r4, pc}
 801a736:	200b      	movs	r0, #11
 801a738:	4770      	bx	lr
 801a73a:	bf00      	nop

0801a73c <rmw_destroy_subscription>:
 801a73c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a740:	b128      	cbz	r0, 801a74e <rmw_destroy_subscription+0x12>
 801a742:	4604      	mov	r4, r0
 801a744:	6800      	ldr	r0, [r0, #0]
 801a746:	460d      	mov	r5, r1
 801a748:	f7f5 f8c2 	bl	800f8d0 <is_uxrce_rmw_identifier_valid>
 801a74c:	b918      	cbnz	r0, 801a756 <rmw_destroy_subscription+0x1a>
 801a74e:	2401      	movs	r4, #1
 801a750:	4620      	mov	r0, r4
 801a752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a756:	6863      	ldr	r3, [r4, #4]
 801a758:	2b00      	cmp	r3, #0
 801a75a:	d0f8      	beq.n	801a74e <rmw_destroy_subscription+0x12>
 801a75c:	fab5 f485 	clz	r4, r5
 801a760:	0964      	lsrs	r4, r4, #5
 801a762:	2d00      	cmp	r5, #0
 801a764:	d0f3      	beq.n	801a74e <rmw_destroy_subscription+0x12>
 801a766:	6828      	ldr	r0, [r5, #0]
 801a768:	f7f5 f8b2 	bl	800f8d0 <is_uxrce_rmw_identifier_valid>
 801a76c:	2800      	cmp	r0, #0
 801a76e:	d0ee      	beq.n	801a74e <rmw_destroy_subscription+0x12>
 801a770:	686e      	ldr	r6, [r5, #4]
 801a772:	2e00      	cmp	r6, #0
 801a774:	d0eb      	beq.n	801a74e <rmw_destroy_subscription+0x12>
 801a776:	6a37      	ldr	r7, [r6, #32]
 801a778:	6972      	ldr	r2, [r6, #20]
 801a77a:	6938      	ldr	r0, [r7, #16]
 801a77c:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801a780:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801a784:	6819      	ldr	r1, [r3, #0]
 801a786:	f001 f981 	bl	801ba8c <uxr_buffer_cancel_data>
 801a78a:	4602      	mov	r2, r0
 801a78c:	6938      	ldr	r0, [r7, #16]
 801a78e:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801a792:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801a796:	f7f4 ff89 	bl	800f6ac <run_xrce_session>
 801a79a:	69f0      	ldr	r0, [r6, #28]
 801a79c:	f7ff faf6 	bl	8019d8c <destroy_topic>
 801a7a0:	6a33      	ldr	r3, [r6, #32]
 801a7a2:	6972      	ldr	r2, [r6, #20]
 801a7a4:	6918      	ldr	r0, [r3, #16]
 801a7a6:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801a7aa:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801a7ae:	6819      	ldr	r1, [r3, #0]
 801a7b0:	f7f7 fa2c 	bl	8011c0c <uxr_buffer_delete_entity>
 801a7b4:	6a33      	ldr	r3, [r6, #32]
 801a7b6:	4680      	mov	r8, r0
 801a7b8:	6932      	ldr	r2, [r6, #16]
 801a7ba:	6918      	ldr	r0, [r3, #16]
 801a7bc:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801a7c0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801a7c4:	6819      	ldr	r1, [r3, #0]
 801a7c6:	f7f7 fa21 	bl	8011c0c <uxr_buffer_delete_entity>
 801a7ca:	4606      	mov	r6, r0
 801a7cc:	6938      	ldr	r0, [r7, #16]
 801a7ce:	4642      	mov	r2, r8
 801a7d0:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801a7d4:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801a7d8:	f7f4 ff68 	bl	800f6ac <run_xrce_session>
 801a7dc:	693f      	ldr	r7, [r7, #16]
 801a7de:	4632      	mov	r2, r6
 801a7e0:	4606      	mov	r6, r0
 801a7e2:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 801a7e6:	4638      	mov	r0, r7
 801a7e8:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 801a7ec:	f7f4 ff5e 	bl	800f6ac <run_xrce_session>
 801a7f0:	b126      	cbz	r6, 801a7fc <rmw_destroy_subscription+0xc0>
 801a7f2:	b118      	cbz	r0, 801a7fc <rmw_destroy_subscription+0xc0>
 801a7f4:	4628      	mov	r0, r5
 801a7f6:	f7f4 fe09 	bl	800f40c <rmw_uxrce_fini_subscription_memory>
 801a7fa:	e7a9      	b.n	801a750 <rmw_destroy_subscription+0x14>
 801a7fc:	2402      	movs	r4, #2
 801a7fe:	e7f9      	b.n	801a7f4 <rmw_destroy_subscription+0xb8>

0801a800 <rmw_take_with_info>:
 801a800:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a802:	4604      	mov	r4, r0
 801a804:	6800      	ldr	r0, [r0, #0]
 801a806:	b089      	sub	sp, #36	; 0x24
 801a808:	460f      	mov	r7, r1
 801a80a:	4615      	mov	r5, r2
 801a80c:	b128      	cbz	r0, 801a81a <rmw_take_with_info+0x1a>
 801a80e:	4b24      	ldr	r3, [pc, #144]	; (801a8a0 <rmw_take_with_info+0xa0>)
 801a810:	6819      	ldr	r1, [r3, #0]
 801a812:	f7e5 fd15 	bl	8000240 <strcmp>
 801a816:	2800      	cmp	r0, #0
 801a818:	d13e      	bne.n	801a898 <rmw_take_with_info+0x98>
 801a81a:	b305      	cbz	r5, 801a85e <rmw_take_with_info+0x5e>
 801a81c:	2300      	movs	r3, #0
 801a81e:	6864      	ldr	r4, [r4, #4]
 801a820:	702b      	strb	r3, [r5, #0]
 801a822:	f7f4 fec5 	bl	800f5b0 <rmw_uxrce_clean_expired_static_input_buffer>
 801a826:	4620      	mov	r0, r4
 801a828:	f7f4 fe98 	bl	800f55c <rmw_uxrce_find_static_input_buffer_by_owner>
 801a82c:	4606      	mov	r6, r0
 801a82e:	b1f0      	cbz	r0, 801a86e <rmw_take_with_info+0x6e>
 801a830:	6881      	ldr	r1, [r0, #8]
 801a832:	4668      	mov	r0, sp
 801a834:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 801a838:	3110      	adds	r1, #16
 801a83a:	f7f7 f973 	bl	8011b24 <ucdr_init_buffer>
 801a83e:	69a3      	ldr	r3, [r4, #24]
 801a840:	4639      	mov	r1, r7
 801a842:	4668      	mov	r0, sp
 801a844:	68db      	ldr	r3, [r3, #12]
 801a846:	4798      	blx	r3
 801a848:	4604      	mov	r4, r0
 801a84a:	4631      	mov	r1, r6
 801a84c:	4815      	ldr	r0, [pc, #84]	; (801a8a4 <rmw_take_with_info+0xa4>)
 801a84e:	f7fe ff99 	bl	8019784 <put_memory>
 801a852:	702c      	strb	r4, [r5, #0]
 801a854:	f084 0001 	eor.w	r0, r4, #1
 801a858:	b2c0      	uxtb	r0, r0
 801a85a:	b009      	add	sp, #36	; 0x24
 801a85c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a85e:	6864      	ldr	r4, [r4, #4]
 801a860:	f7f4 fea6 	bl	800f5b0 <rmw_uxrce_clean_expired_static_input_buffer>
 801a864:	4620      	mov	r0, r4
 801a866:	f7f4 fe79 	bl	800f55c <rmw_uxrce_find_static_input_buffer_by_owner>
 801a86a:	4605      	mov	r5, r0
 801a86c:	b910      	cbnz	r0, 801a874 <rmw_take_with_info+0x74>
 801a86e:	2001      	movs	r0, #1
 801a870:	b009      	add	sp, #36	; 0x24
 801a872:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a874:	68a9      	ldr	r1, [r5, #8]
 801a876:	4668      	mov	r0, sp
 801a878:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 801a87c:	3110      	adds	r1, #16
 801a87e:	f7f7 f951 	bl	8011b24 <ucdr_init_buffer>
 801a882:	69a3      	ldr	r3, [r4, #24]
 801a884:	4639      	mov	r1, r7
 801a886:	4668      	mov	r0, sp
 801a888:	68db      	ldr	r3, [r3, #12]
 801a88a:	4798      	blx	r3
 801a88c:	4629      	mov	r1, r5
 801a88e:	4604      	mov	r4, r0
 801a890:	4804      	ldr	r0, [pc, #16]	; (801a8a4 <rmw_take_with_info+0xa4>)
 801a892:	f7fe ff77 	bl	8019784 <put_memory>
 801a896:	e7dd      	b.n	801a854 <rmw_take_with_info+0x54>
 801a898:	200c      	movs	r0, #12
 801a89a:	b009      	add	sp, #36	; 0x24
 801a89c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a89e:	bf00      	nop
 801a8a0:	08020748 	.word	0x08020748
 801a8a4:	2001062c 	.word	0x2001062c

0801a8a8 <rmw_uxrce_transport_init>:
 801a8a8:	b508      	push	{r3, lr}
 801a8aa:	b108      	cbz	r0, 801a8b0 <rmw_uxrce_transport_init+0x8>
 801a8ac:	f100 0210 	add.w	r2, r0, #16
 801a8b0:	b139      	cbz	r1, 801a8c2 <rmw_uxrce_transport_init+0x1a>
 801a8b2:	6949      	ldr	r1, [r1, #20]
 801a8b4:	4610      	mov	r0, r2
 801a8b6:	f000 fb2b 	bl	801af10 <uxr_init_custom_transport>
 801a8ba:	f080 0001 	eor.w	r0, r0, #1
 801a8be:	b2c0      	uxtb	r0, r0
 801a8c0:	bd08      	pop	{r3, pc}
 801a8c2:	4b04      	ldr	r3, [pc, #16]	; (801a8d4 <rmw_uxrce_transport_init+0x2c>)
 801a8c4:	4610      	mov	r0, r2
 801a8c6:	6859      	ldr	r1, [r3, #4]
 801a8c8:	f000 fb22 	bl	801af10 <uxr_init_custom_transport>
 801a8cc:	f080 0001 	eor.w	r0, r0, #1
 801a8d0:	b2c0      	uxtb	r0, r0
 801a8d2:	bd08      	pop	{r3, pc}
 801a8d4:	2000bc3c 	.word	0x2000bc3c

0801a8d8 <rmw_wait>:
 801a8d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a8dc:	4698      	mov	r8, r3
 801a8de:	ea40 0301 	orr.w	r3, r0, r1
 801a8e2:	b089      	sub	sp, #36	; 0x24
 801a8e4:	ea48 0303 	orr.w	r3, r8, r3
 801a8e8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801a8ea:	4313      	orrs	r3, r2
 801a8ec:	f000 8106 	beq.w	801aafc <rmw_wait+0x224>
 801a8f0:	4605      	mov	r5, r0
 801a8f2:	460e      	mov	r6, r1
 801a8f4:	4691      	mov	r9, r2
 801a8f6:	b16c      	cbz	r4, 801a914 <rmw_wait+0x3c>
 801a8f8:	4ba6      	ldr	r3, [pc, #664]	; (801ab94 <rmw_wait+0x2bc>)
 801a8fa:	af04      	add	r7, sp, #16
 801a8fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801a8fe:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 801a902:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801a906:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801a90a:	f7fe fd4d 	bl	80193a8 <rmw_time_equal>
 801a90e:	2800      	cmp	r0, #0
 801a910:	f000 810b 	beq.w	801ab2a <rmw_wait+0x252>
 801a914:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801a918:	f7f4 fe4a 	bl	800f5b0 <rmw_uxrce_clean_expired_static_input_buffer>
 801a91c:	4b9e      	ldr	r3, [pc, #632]	; (801ab98 <rmw_wait+0x2c0>)
 801a91e:	681c      	ldr	r4, [r3, #0]
 801a920:	b14c      	cbz	r4, 801a936 <rmw_wait+0x5e>
 801a922:	4623      	mov	r3, r4
 801a924:	2100      	movs	r1, #0
 801a926:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 801a92a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801a92e:	f882 15a4 	strb.w	r1, [r2, #1444]	; 0x5a4
 801a932:	2b00      	cmp	r3, #0
 801a934:	d1f7      	bne.n	801a926 <rmw_wait+0x4e>
 801a936:	f1b9 0f00 	cmp.w	r9, #0
 801a93a:	d011      	beq.n	801a960 <rmw_wait+0x88>
 801a93c:	f8d9 1000 	ldr.w	r1, [r9]
 801a940:	b171      	cbz	r1, 801a960 <rmw_wait+0x88>
 801a942:	f8d9 c004 	ldr.w	ip, [r9, #4]
 801a946:	2300      	movs	r3, #0
 801a948:	2001      	movs	r0, #1
 801a94a:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801a94e:	3301      	adds	r3, #1
 801a950:	6f92      	ldr	r2, [r2, #120]	; 0x78
 801a952:	4299      	cmp	r1, r3
 801a954:	6912      	ldr	r2, [r2, #16]
 801a956:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801a95a:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 801a95e:	d1f4      	bne.n	801a94a <rmw_wait+0x72>
 801a960:	f1b8 0f00 	cmp.w	r8, #0
 801a964:	d011      	beq.n	801a98a <rmw_wait+0xb2>
 801a966:	f8d8 1000 	ldr.w	r1, [r8]
 801a96a:	b171      	cbz	r1, 801a98a <rmw_wait+0xb2>
 801a96c:	f8d8 c004 	ldr.w	ip, [r8, #4]
 801a970:	2300      	movs	r3, #0
 801a972:	2001      	movs	r0, #1
 801a974:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801a978:	3301      	adds	r3, #1
 801a97a:	6f92      	ldr	r2, [r2, #120]	; 0x78
 801a97c:	4299      	cmp	r1, r3
 801a97e:	6912      	ldr	r2, [r2, #16]
 801a980:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801a984:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 801a988:	d1f4      	bne.n	801a974 <rmw_wait+0x9c>
 801a98a:	b185      	cbz	r5, 801a9ae <rmw_wait+0xd6>
 801a98c:	6829      	ldr	r1, [r5, #0]
 801a98e:	b171      	cbz	r1, 801a9ae <rmw_wait+0xd6>
 801a990:	f8d5 c004 	ldr.w	ip, [r5, #4]
 801a994:	2300      	movs	r3, #0
 801a996:	2001      	movs	r0, #1
 801a998:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801a99c:	3301      	adds	r3, #1
 801a99e:	6a12      	ldr	r2, [r2, #32]
 801a9a0:	4299      	cmp	r1, r3
 801a9a2:	6912      	ldr	r2, [r2, #16]
 801a9a4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801a9a8:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 801a9ac:	d1f4      	bne.n	801a998 <rmw_wait+0xc0>
 801a9ae:	b344      	cbz	r4, 801aa02 <rmw_wait+0x12a>
 801a9b0:	4622      	mov	r2, r4
 801a9b2:	2300      	movs	r3, #0
 801a9b4:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 801a9b8:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 801a9bc:	f891 15a4 	ldrb.w	r1, [r1, #1444]	; 0x5a4
 801a9c0:	440b      	add	r3, r1
 801a9c2:	b2db      	uxtb	r3, r3
 801a9c4:	2a00      	cmp	r2, #0
 801a9c6:	d1f5      	bne.n	801a9b4 <rmw_wait+0xdc>
 801a9c8:	2b00      	cmp	r3, #0
 801a9ca:	d05f      	beq.n	801aa8c <rmw_wait+0x1b4>
 801a9cc:	1c7a      	adds	r2, r7, #1
 801a9ce:	d00d      	beq.n	801a9ec <rmw_wait+0x114>
 801a9d0:	ee07 7a90 	vmov	s15, r7
 801a9d4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801a9d8:	ee07 3a90 	vmov	s15, r3
 801a9dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801a9e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801a9e4:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 801a9e8:	ee17 7a90 	vmov	r7, s15
 801a9ec:	68a0      	ldr	r0, [r4, #8]
 801a9ee:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 801a9f2:	f893 35a4 	ldrb.w	r3, [r3, #1444]	; 0x5a4
 801a9f6:	2b00      	cmp	r3, #0
 801a9f8:	f040 808d 	bne.w	801ab16 <rmw_wait+0x23e>
 801a9fc:	6864      	ldr	r4, [r4, #4]
 801a9fe:	2c00      	cmp	r4, #0
 801aa00:	d1f4      	bne.n	801a9ec <rmw_wait+0x114>
 801aa02:	f1b9 0f00 	cmp.w	r9, #0
 801aa06:	f000 80a1 	beq.w	801ab4c <rmw_wait+0x274>
 801aa0a:	f8d9 7000 	ldr.w	r7, [r9]
 801aa0e:	2f00      	cmp	r7, #0
 801aa10:	f000 80a4 	beq.w	801ab5c <rmw_wait+0x284>
 801aa14:	2400      	movs	r4, #0
 801aa16:	4627      	mov	r7, r4
 801aa18:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801aa1c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801aa20:	f7f4 fd9c 	bl	800f55c <rmw_uxrce_find_static_input_buffer_by_owner>
 801aa24:	2800      	cmp	r0, #0
 801aa26:	d03b      	beq.n	801aaa0 <rmw_wait+0x1c8>
 801aa28:	3401      	adds	r4, #1
 801aa2a:	f8d9 3000 	ldr.w	r3, [r9]
 801aa2e:	2701      	movs	r7, #1
 801aa30:	42a3      	cmp	r3, r4
 801aa32:	d8f1      	bhi.n	801aa18 <rmw_wait+0x140>
 801aa34:	2701      	movs	r7, #1
 801aa36:	f1b8 0f00 	cmp.w	r8, #0
 801aa3a:	d010      	beq.n	801aa5e <rmw_wait+0x186>
 801aa3c:	f8d8 3000 	ldr.w	r3, [r8]
 801aa40:	b16b      	cbz	r3, 801aa5e <rmw_wait+0x186>
 801aa42:	2400      	movs	r4, #0
 801aa44:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801aa48:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801aa4c:	f7f4 fd86 	bl	800f55c <rmw_uxrce_find_static_input_buffer_by_owner>
 801aa50:	b370      	cbz	r0, 801aab0 <rmw_wait+0x1d8>
 801aa52:	3401      	adds	r4, #1
 801aa54:	f8d8 3000 	ldr.w	r3, [r8]
 801aa58:	2701      	movs	r7, #1
 801aa5a:	42a3      	cmp	r3, r4
 801aa5c:	d8f2      	bhi.n	801aa44 <rmw_wait+0x16c>
 801aa5e:	2d00      	cmp	r5, #0
 801aa60:	d035      	beq.n	801aace <rmw_wait+0x1f6>
 801aa62:	682b      	ldr	r3, [r5, #0]
 801aa64:	b39b      	cbz	r3, 801aace <rmw_wait+0x1f6>
 801aa66:	2400      	movs	r4, #0
 801aa68:	686b      	ldr	r3, [r5, #4]
 801aa6a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801aa6e:	f7f4 fd75 	bl	800f55c <rmw_uxrce_find_static_input_buffer_by_owner>
 801aa72:	b328      	cbz	r0, 801aac0 <rmw_wait+0x1e8>
 801aa74:	3401      	adds	r4, #1
 801aa76:	682b      	ldr	r3, [r5, #0]
 801aa78:	2701      	movs	r7, #1
 801aa7a:	42a3      	cmp	r3, r4
 801aa7c:	d8f4      	bhi.n	801aa68 <rmw_wait+0x190>
 801aa7e:	2e00      	cmp	r6, #0
 801aa80:	d03c      	beq.n	801aafc <rmw_wait+0x224>
 801aa82:	6834      	ldr	r4, [r6, #0]
 801aa84:	2c00      	cmp	r4, #0
 801aa86:	d039      	beq.n	801aafc <rmw_wait+0x224>
 801aa88:	2701      	movs	r7, #1
 801aa8a:	e023      	b.n	801aad4 <rmw_wait+0x1fc>
 801aa8c:	68a0      	ldr	r0, [r4, #8]
 801aa8e:	2100      	movs	r1, #0
 801aa90:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801aa94:	f7f7 ffc6 	bl	8012a24 <uxr_run_session_timeout>
 801aa98:	6864      	ldr	r4, [r4, #4]
 801aa9a:	2c00      	cmp	r4, #0
 801aa9c:	d1f6      	bne.n	801aa8c <rmw_wait+0x1b4>
 801aa9e:	e7b0      	b.n	801aa02 <rmw_wait+0x12a>
 801aaa0:	e9d9 3200 	ldrd	r3, r2, [r9]
 801aaa4:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801aaa8:	3401      	adds	r4, #1
 801aaaa:	42a3      	cmp	r3, r4
 801aaac:	d8b4      	bhi.n	801aa18 <rmw_wait+0x140>
 801aaae:	e7c2      	b.n	801aa36 <rmw_wait+0x15e>
 801aab0:	e9d8 3200 	ldrd	r3, r2, [r8]
 801aab4:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801aab8:	3401      	adds	r4, #1
 801aaba:	429c      	cmp	r4, r3
 801aabc:	d3c2      	bcc.n	801aa44 <rmw_wait+0x16c>
 801aabe:	e7ce      	b.n	801aa5e <rmw_wait+0x186>
 801aac0:	e9d5 3200 	ldrd	r3, r2, [r5]
 801aac4:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801aac8:	3401      	adds	r4, #1
 801aaca:	42a3      	cmp	r3, r4
 801aacc:	d8cc      	bhi.n	801aa68 <rmw_wait+0x190>
 801aace:	b1a6      	cbz	r6, 801aafa <rmw_wait+0x222>
 801aad0:	6834      	ldr	r4, [r6, #0]
 801aad2:	b194      	cbz	r4, 801aafa <rmw_wait+0x222>
 801aad4:	2300      	movs	r3, #0
 801aad6:	461d      	mov	r5, r3
 801aad8:	e004      	b.n	801aae4 <rmw_wait+0x20c>
 801aada:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 801aade:	3301      	adds	r3, #1
 801aae0:	42a3      	cmp	r3, r4
 801aae2:	d00a      	beq.n	801aafa <rmw_wait+0x222>
 801aae4:	6870      	ldr	r0, [r6, #4]
 801aae6:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 801aaea:	7c0a      	ldrb	r2, [r1, #16]
 801aaec:	2a00      	cmp	r2, #0
 801aaee:	d0f4      	beq.n	801aada <rmw_wait+0x202>
 801aaf0:	3301      	adds	r3, #1
 801aaf2:	4617      	mov	r7, r2
 801aaf4:	740d      	strb	r5, [r1, #16]
 801aaf6:	42a3      	cmp	r3, r4
 801aaf8:	d1f4      	bne.n	801aae4 <rmw_wait+0x20c>
 801aafa:	b147      	cbz	r7, 801ab0e <rmw_wait+0x236>
 801aafc:	2000      	movs	r0, #0
 801aafe:	b009      	add	sp, #36	; 0x24
 801ab00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ab04:	b11e      	cbz	r6, 801ab0e <rmw_wait+0x236>
 801ab06:	6834      	ldr	r4, [r6, #0]
 801ab08:	462f      	mov	r7, r5
 801ab0a:	2c00      	cmp	r4, #0
 801ab0c:	d1e2      	bne.n	801aad4 <rmw_wait+0x1fc>
 801ab0e:	2002      	movs	r0, #2
 801ab10:	b009      	add	sp, #36	; 0x24
 801ab12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ab16:	4639      	mov	r1, r7
 801ab18:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801ab1c:	f7f7 ff9c 	bl	8012a58 <uxr_run_session_until_data>
 801ab20:	6864      	ldr	r4, [r4, #4]
 801ab22:	2c00      	cmp	r4, #0
 801ab24:	f47f af62 	bne.w	801a9ec <rmw_wait+0x114>
 801ab28:	e76b      	b.n	801aa02 <rmw_wait+0x12a>
 801ab2a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801ab2e:	f7fe fc91 	bl	8019454 <rmw_time_total_nsec>
 801ab32:	2300      	movs	r3, #0
 801ab34:	4a19      	ldr	r2, [pc, #100]	; (801ab9c <rmw_wait+0x2c4>)
 801ab36:	f7e5 fc3b 	bl	80003b0 <__aeabi_uldivmod>
 801ab3a:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 801ab3e:	4607      	mov	r7, r0
 801ab40:	f171 0300 	sbcs.w	r3, r1, #0
 801ab44:	bfa8      	it	ge
 801ab46:	f06f 4700 	mvnge.w	r7, #2147483648	; 0x80000000
 801ab4a:	e6e5      	b.n	801a918 <rmw_wait+0x40>
 801ab4c:	f1b8 0f00 	cmp.w	r8, #0
 801ab50:	d00f      	beq.n	801ab72 <rmw_wait+0x29a>
 801ab52:	f8d8 3000 	ldr.w	r3, [r8]
 801ab56:	b193      	cbz	r3, 801ab7e <rmw_wait+0x2a6>
 801ab58:	464f      	mov	r7, r9
 801ab5a:	e772      	b.n	801aa42 <rmw_wait+0x16a>
 801ab5c:	f1b8 0f00 	cmp.w	r8, #0
 801ab60:	d007      	beq.n	801ab72 <rmw_wait+0x29a>
 801ab62:	f8d8 3000 	ldr.w	r3, [r8]
 801ab66:	2b00      	cmp	r3, #0
 801ab68:	f47f af6b 	bne.w	801aa42 <rmw_wait+0x16a>
 801ab6c:	b155      	cbz	r5, 801ab84 <rmw_wait+0x2ac>
 801ab6e:	461f      	mov	r7, r3
 801ab70:	e777      	b.n	801aa62 <rmw_wait+0x18a>
 801ab72:	2d00      	cmp	r5, #0
 801ab74:	d0c6      	beq.n	801ab04 <rmw_wait+0x22c>
 801ab76:	682b      	ldr	r3, [r5, #0]
 801ab78:	b143      	cbz	r3, 801ab8c <rmw_wait+0x2b4>
 801ab7a:	4647      	mov	r7, r8
 801ab7c:	e773      	b.n	801aa66 <rmw_wait+0x18e>
 801ab7e:	b10d      	cbz	r5, 801ab84 <rmw_wait+0x2ac>
 801ab80:	464f      	mov	r7, r9
 801ab82:	e76e      	b.n	801aa62 <rmw_wait+0x18a>
 801ab84:	462f      	mov	r7, r5
 801ab86:	2e00      	cmp	r6, #0
 801ab88:	d1a2      	bne.n	801aad0 <rmw_wait+0x1f8>
 801ab8a:	e7c0      	b.n	801ab0e <rmw_wait+0x236>
 801ab8c:	4647      	mov	r7, r8
 801ab8e:	2e00      	cmp	r6, #0
 801ab90:	d19e      	bne.n	801aad0 <rmw_wait+0x1f8>
 801ab92:	e7bc      	b.n	801ab0e <rmw_wait+0x236>
 801ab94:	0801ec48 	.word	0x0801ec48
 801ab98:	2001061c 	.word	0x2001061c
 801ab9c:	000f4240 	.word	0x000f4240

0801aba0 <rmw_create_wait_set>:
 801aba0:	b508      	push	{r3, lr}
 801aba2:	4803      	ldr	r0, [pc, #12]	; (801abb0 <rmw_create_wait_set+0x10>)
 801aba4:	f7fe fdde 	bl	8019764 <get_memory>
 801aba8:	b108      	cbz	r0, 801abae <rmw_create_wait_set+0xe>
 801abaa:	6880      	ldr	r0, [r0, #8]
 801abac:	3010      	adds	r0, #16
 801abae:	bd08      	pop	{r3, pc}
 801abb0:	2001065c 	.word	0x2001065c

0801abb4 <rmw_destroy_wait_set>:
 801abb4:	b508      	push	{r3, lr}
 801abb6:	4b08      	ldr	r3, [pc, #32]	; (801abd8 <rmw_destroy_wait_set+0x24>)
 801abb8:	6819      	ldr	r1, [r3, #0]
 801abba:	b911      	cbnz	r1, 801abc2 <rmw_destroy_wait_set+0xe>
 801abbc:	e00a      	b.n	801abd4 <rmw_destroy_wait_set+0x20>
 801abbe:	6849      	ldr	r1, [r1, #4]
 801abc0:	b141      	cbz	r1, 801abd4 <rmw_destroy_wait_set+0x20>
 801abc2:	688b      	ldr	r3, [r1, #8]
 801abc4:	3310      	adds	r3, #16
 801abc6:	4298      	cmp	r0, r3
 801abc8:	d1f9      	bne.n	801abbe <rmw_destroy_wait_set+0xa>
 801abca:	4803      	ldr	r0, [pc, #12]	; (801abd8 <rmw_destroy_wait_set+0x24>)
 801abcc:	f7fe fdda 	bl	8019784 <put_memory>
 801abd0:	2000      	movs	r0, #0
 801abd2:	bd08      	pop	{r3, pc}
 801abd4:	2001      	movs	r0, #1
 801abd6:	bd08      	pop	{r3, pc}
 801abd8:	2001065c 	.word	0x2001065c

0801abdc <rmw_uros_epoch_nanos>:
 801abdc:	4b05      	ldr	r3, [pc, #20]	; (801abf4 <rmw_uros_epoch_nanos+0x18>)
 801abde:	681b      	ldr	r3, [r3, #0]
 801abe0:	b123      	cbz	r3, 801abec <rmw_uros_epoch_nanos+0x10>
 801abe2:	6898      	ldr	r0, [r3, #8]
 801abe4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801abe8:	f7f7 bb92 	b.w	8012310 <uxr_epoch_nanos>
 801abec:	2000      	movs	r0, #0
 801abee:	2100      	movs	r1, #0
 801abf0:	4770      	bx	lr
 801abf2:	bf00      	nop
 801abf4:	2001061c 	.word	0x2001061c

0801abf8 <service_msgs__msg__ServiceEventInfo__get_type_hash>:
 801abf8:	4800      	ldr	r0, [pc, #0]	; (801abfc <service_msgs__msg__ServiceEventInfo__get_type_hash+0x4>)
 801abfa:	4770      	bx	lr
 801abfc:	20001de0 	.word	0x20001de0

0801ac00 <service_msgs__msg__ServiceEventInfo__get_type_description>:
 801ac00:	b510      	push	{r4, lr}
 801ac02:	4c08      	ldr	r4, [pc, #32]	; (801ac24 <service_msgs__msg__ServiceEventInfo__get_type_description+0x24>)
 801ac04:	7820      	ldrb	r0, [r4, #0]
 801ac06:	b108      	cbz	r0, 801ac0c <service_msgs__msg__ServiceEventInfo__get_type_description+0xc>
 801ac08:	4807      	ldr	r0, [pc, #28]	; (801ac28 <service_msgs__msg__ServiceEventInfo__get_type_description+0x28>)
 801ac0a:	bd10      	pop	{r4, pc}
 801ac0c:	f000 f858 	bl	801acc0 <builtin_interfaces__msg__Time__get_type_description>
 801ac10:	300c      	adds	r0, #12
 801ac12:	4b06      	ldr	r3, [pc, #24]	; (801ac2c <service_msgs__msg__ServiceEventInfo__get_type_description+0x2c>)
 801ac14:	c807      	ldmia	r0, {r0, r1, r2}
 801ac16:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801ac1a:	2301      	movs	r3, #1
 801ac1c:	4802      	ldr	r0, [pc, #8]	; (801ac28 <service_msgs__msg__ServiceEventInfo__get_type_description+0x28>)
 801ac1e:	7023      	strb	r3, [r4, #0]
 801ac20:	bd10      	pop	{r4, pc}
 801ac22:	bf00      	nop
 801ac24:	20010de1 	.word	0x20010de1
 801ac28:	0802074c 	.word	0x0802074c
 801ac2c:	20001f64 	.word	0x20001f64

0801ac30 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source>:
 801ac30:	4800      	ldr	r0, [pc, #0]	; (801ac34 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source+0x4>)
 801ac32:	4770      	bx	lr
 801ac34:	08020770 	.word	0x08020770

0801ac38 <service_msgs__msg__ServiceEventInfo__get_type_description_sources>:
 801ac38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ac3a:	4e0f      	ldr	r6, [pc, #60]	; (801ac78 <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0x40>)
 801ac3c:	7837      	ldrb	r7, [r6, #0]
 801ac3e:	b10f      	cbz	r7, 801ac44 <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0xc>
 801ac40:	480e      	ldr	r0, [pc, #56]	; (801ac7c <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0x44>)
 801ac42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ac44:	4d0e      	ldr	r5, [pc, #56]	; (801ac80 <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0x48>)
 801ac46:	4c0f      	ldr	r4, [pc, #60]	; (801ac84 <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0x4c>)
 801ac48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ac4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801ac4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ac4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801ac50:	682b      	ldr	r3, [r5, #0]
 801ac52:	4638      	mov	r0, r7
 801ac54:	f844 3b04 	str.w	r3, [r4], #4
 801ac58:	f000 f83e 	bl	801acd8 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 801ac5c:	2301      	movs	r3, #1
 801ac5e:	4684      	mov	ip, r0
 801ac60:	7033      	strb	r3, [r6, #0]
 801ac62:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801ac66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801ac68:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801ac6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801ac6e:	f8dc 3000 	ldr.w	r3, [ip]
 801ac72:	4802      	ldr	r0, [pc, #8]	; (801ac7c <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0x44>)
 801ac74:	6023      	str	r3, [r4, #0]
 801ac76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ac78:	20010de0 	.word	0x20010de0
 801ac7c:	08020794 	.word	0x08020794
 801ac80:	08020770 	.word	0x08020770
 801ac84:	20010de4 	.word	0x20010de4

0801ac88 <service_msgs__msg__ServiceEventInfo__init>:
 801ac88:	b538      	push	{r3, r4, r5, lr}
 801ac8a:	b138      	cbz	r0, 801ac9c <service_msgs__msg__ServiceEventInfo__init+0x14>
 801ac8c:	1d05      	adds	r5, r0, #4
 801ac8e:	4628      	mov	r0, r5
 801ac90:	f000 f842 	bl	801ad18 <builtin_interfaces__msg__Time__init>
 801ac94:	4604      	mov	r4, r0
 801ac96:	b120      	cbz	r0, 801aca2 <service_msgs__msg__ServiceEventInfo__init+0x1a>
 801ac98:	4620      	mov	r0, r4
 801ac9a:	bd38      	pop	{r3, r4, r5, pc}
 801ac9c:	4604      	mov	r4, r0
 801ac9e:	4620      	mov	r0, r4
 801aca0:	bd38      	pop	{r3, r4, r5, pc}
 801aca2:	4628      	mov	r0, r5
 801aca4:	f000 f83c 	bl	801ad20 <builtin_interfaces__msg__Time__fini>
 801aca8:	4620      	mov	r0, r4
 801acaa:	bd38      	pop	{r3, r4, r5, pc}

0801acac <service_msgs__msg__ServiceEventInfo__fini>:
 801acac:	b110      	cbz	r0, 801acb4 <service_msgs__msg__ServiceEventInfo__fini+0x8>
 801acae:	3004      	adds	r0, #4
 801acb0:	f000 b836 	b.w	801ad20 <builtin_interfaces__msg__Time__fini>
 801acb4:	4770      	bx	lr
 801acb6:	bf00      	nop

0801acb8 <builtin_interfaces__msg__Time__get_type_hash>:
 801acb8:	4800      	ldr	r0, [pc, #0]	; (801acbc <builtin_interfaces__msg__Time__get_type_hash+0x4>)
 801acba:	4770      	bx	lr
 801acbc:	20002300 	.word	0x20002300

0801acc0 <builtin_interfaces__msg__Time__get_type_description>:
 801acc0:	4b03      	ldr	r3, [pc, #12]	; (801acd0 <builtin_interfaces__msg__Time__get_type_description+0x10>)
 801acc2:	781a      	ldrb	r2, [r3, #0]
 801acc4:	b90a      	cbnz	r2, 801acca <builtin_interfaces__msg__Time__get_type_description+0xa>
 801acc6:	2201      	movs	r2, #1
 801acc8:	701a      	strb	r2, [r3, #0]
 801acca:	4802      	ldr	r0, [pc, #8]	; (801acd4 <builtin_interfaces__msg__Time__get_type_description+0x14>)
 801accc:	4770      	bx	lr
 801acce:	bf00      	nop
 801acd0:	20010e2d 	.word	0x20010e2d
 801acd4:	080207a0 	.word	0x080207a0

0801acd8 <builtin_interfaces__msg__Time__get_individual_type_description_source>:
 801acd8:	4800      	ldr	r0, [pc, #0]	; (801acdc <builtin_interfaces__msg__Time__get_individual_type_description_source+0x4>)
 801acda:	4770      	bx	lr
 801acdc:	080207c4 	.word	0x080207c4

0801ace0 <builtin_interfaces__msg__Time__get_type_description_sources>:
 801ace0:	4b09      	ldr	r3, [pc, #36]	; (801ad08 <builtin_interfaces__msg__Time__get_type_description_sources+0x28>)
 801ace2:	781a      	ldrb	r2, [r3, #0]
 801ace4:	b96a      	cbnz	r2, 801ad02 <builtin_interfaces__msg__Time__get_type_description_sources+0x22>
 801ace6:	2201      	movs	r2, #1
 801ace8:	b430      	push	{r4, r5}
 801acea:	4d08      	ldr	r5, [pc, #32]	; (801ad0c <builtin_interfaces__msg__Time__get_type_description_sources+0x2c>)
 801acec:	4c08      	ldr	r4, [pc, #32]	; (801ad10 <builtin_interfaces__msg__Time__get_type_description_sources+0x30>)
 801acee:	701a      	strb	r2, [r3, #0]
 801acf0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801acf2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801acf4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801acf6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801acf8:	682b      	ldr	r3, [r5, #0]
 801acfa:	4806      	ldr	r0, [pc, #24]	; (801ad14 <builtin_interfaces__msg__Time__get_type_description_sources+0x34>)
 801acfc:	6023      	str	r3, [r4, #0]
 801acfe:	bc30      	pop	{r4, r5}
 801ad00:	4770      	bx	lr
 801ad02:	4804      	ldr	r0, [pc, #16]	; (801ad14 <builtin_interfaces__msg__Time__get_type_description_sources+0x34>)
 801ad04:	4770      	bx	lr
 801ad06:	bf00      	nop
 801ad08:	20010e2c 	.word	0x20010e2c
 801ad0c:	080207c4 	.word	0x080207c4
 801ad10:	20010e30 	.word	0x20010e30
 801ad14:	080207e8 	.word	0x080207e8

0801ad18 <builtin_interfaces__msg__Time__init>:
 801ad18:	3800      	subs	r0, #0
 801ad1a:	bf18      	it	ne
 801ad1c:	2001      	movne	r0, #1
 801ad1e:	4770      	bx	lr

0801ad20 <builtin_interfaces__msg__Time__fini>:
 801ad20:	4770      	bx	lr
 801ad22:	bf00      	nop

0801ad24 <ucdr_serialize_sequence_char>:
 801ad24:	b570      	push	{r4, r5, r6, lr}
 801ad26:	4615      	mov	r5, r2
 801ad28:	460e      	mov	r6, r1
 801ad2a:	7d01      	ldrb	r1, [r0, #20]
 801ad2c:	4604      	mov	r4, r0
 801ad2e:	f7f5 fd17 	bl	8010760 <ucdr_serialize_endian_uint32_t>
 801ad32:	b90d      	cbnz	r5, 801ad38 <ucdr_serialize_sequence_char+0x14>
 801ad34:	2001      	movs	r0, #1
 801ad36:	bd70      	pop	{r4, r5, r6, pc}
 801ad38:	462b      	mov	r3, r5
 801ad3a:	4632      	mov	r2, r6
 801ad3c:	7d21      	ldrb	r1, [r4, #20]
 801ad3e:	4620      	mov	r0, r4
 801ad40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ad44:	f7f4 bfac 	b.w	800fca0 <ucdr_serialize_endian_array_char>

0801ad48 <ucdr_deserialize_sequence_char>:
 801ad48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ad4c:	461d      	mov	r5, r3
 801ad4e:	4616      	mov	r6, r2
 801ad50:	460f      	mov	r7, r1
 801ad52:	461a      	mov	r2, r3
 801ad54:	7d01      	ldrb	r1, [r0, #20]
 801ad56:	4604      	mov	r4, r0
 801ad58:	f7f5 fe2a 	bl	80109b0 <ucdr_deserialize_endian_uint32_t>
 801ad5c:	682b      	ldr	r3, [r5, #0]
 801ad5e:	429e      	cmp	r6, r3
 801ad60:	d201      	bcs.n	801ad66 <ucdr_deserialize_sequence_char+0x1e>
 801ad62:	2201      	movs	r2, #1
 801ad64:	75a2      	strb	r2, [r4, #22]
 801ad66:	b913      	cbnz	r3, 801ad6e <ucdr_deserialize_sequence_char+0x26>
 801ad68:	2001      	movs	r0, #1
 801ad6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ad6e:	463a      	mov	r2, r7
 801ad70:	7d21      	ldrb	r1, [r4, #20]
 801ad72:	4620      	mov	r0, r4
 801ad74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ad78:	f7f4 bfc4 	b.w	800fd04 <ucdr_deserialize_endian_array_char>

0801ad7c <ucdr_serialize_sequence_uint8_t>:
 801ad7c:	b570      	push	{r4, r5, r6, lr}
 801ad7e:	4615      	mov	r5, r2
 801ad80:	460e      	mov	r6, r1
 801ad82:	7d01      	ldrb	r1, [r0, #20]
 801ad84:	4604      	mov	r4, r0
 801ad86:	f7f5 fceb 	bl	8010760 <ucdr_serialize_endian_uint32_t>
 801ad8a:	b90d      	cbnz	r5, 801ad90 <ucdr_serialize_sequence_uint8_t+0x14>
 801ad8c:	2001      	movs	r0, #1
 801ad8e:	bd70      	pop	{r4, r5, r6, pc}
 801ad90:	462b      	mov	r3, r5
 801ad92:	4632      	mov	r2, r6
 801ad94:	7d21      	ldrb	r1, [r4, #20]
 801ad96:	4620      	mov	r0, r4
 801ad98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ad9c:	f7f5 b818 	b.w	800fdd0 <ucdr_serialize_endian_array_uint8_t>

0801ada0 <ucdr_deserialize_sequence_uint8_t>:
 801ada0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ada4:	461d      	mov	r5, r3
 801ada6:	4616      	mov	r6, r2
 801ada8:	460f      	mov	r7, r1
 801adaa:	461a      	mov	r2, r3
 801adac:	7d01      	ldrb	r1, [r0, #20]
 801adae:	4604      	mov	r4, r0
 801adb0:	f7f5 fdfe 	bl	80109b0 <ucdr_deserialize_endian_uint32_t>
 801adb4:	682b      	ldr	r3, [r5, #0]
 801adb6:	429e      	cmp	r6, r3
 801adb8:	d201      	bcs.n	801adbe <ucdr_deserialize_sequence_uint8_t+0x1e>
 801adba:	2201      	movs	r2, #1
 801adbc:	75a2      	strb	r2, [r4, #22]
 801adbe:	b913      	cbnz	r3, 801adc6 <ucdr_deserialize_sequence_uint8_t+0x26>
 801adc0:	2001      	movs	r0, #1
 801adc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801adc6:	463a      	mov	r2, r7
 801adc8:	7d21      	ldrb	r1, [r4, #20]
 801adca:	4620      	mov	r0, r4
 801adcc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801add0:	f7f5 b864 	b.w	800fe9c <ucdr_deserialize_endian_array_uint8_t>

0801add4 <ucdr_serialize_string>:
 801add4:	b510      	push	{r4, lr}
 801add6:	b082      	sub	sp, #8
 801add8:	4604      	mov	r4, r0
 801adda:	4608      	mov	r0, r1
 801addc:	9101      	str	r1, [sp, #4]
 801adde:	f7e5 fa8f 	bl	8000300 <strlen>
 801ade2:	4602      	mov	r2, r0
 801ade4:	9901      	ldr	r1, [sp, #4]
 801ade6:	4620      	mov	r0, r4
 801ade8:	3201      	adds	r2, #1
 801adea:	b002      	add	sp, #8
 801adec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801adf0:	f7ff bf98 	b.w	801ad24 <ucdr_serialize_sequence_char>

0801adf4 <ucdr_deserialize_string>:
 801adf4:	b500      	push	{lr}
 801adf6:	b083      	sub	sp, #12
 801adf8:	ab01      	add	r3, sp, #4
 801adfa:	f7ff ffa5 	bl	801ad48 <ucdr_deserialize_sequence_char>
 801adfe:	b003      	add	sp, #12
 801ae00:	f85d fb04 	ldr.w	pc, [sp], #4

0801ae04 <get_custom_error>:
 801ae04:	4b01      	ldr	r3, [pc, #4]	; (801ae0c <get_custom_error+0x8>)
 801ae06:	7818      	ldrb	r0, [r3, #0]
 801ae08:	4770      	bx	lr
 801ae0a:	bf00      	nop
 801ae0c:	20010e54 	.word	0x20010e54

0801ae10 <recv_custom_msg>:
 801ae10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ae14:	4693      	mov	fp, r2
 801ae16:	b089      	sub	sp, #36	; 0x24
 801ae18:	2200      	movs	r2, #0
 801ae1a:	4604      	mov	r4, r0
 801ae1c:	468a      	mov	sl, r1
 801ae1e:	9305      	str	r3, [sp, #20]
 801ae20:	f88d 201e 	strb.w	r2, [sp, #30]
 801ae24:	f890 2200 	ldrb.w	r2, [r0, #512]	; 0x200
 801ae28:	b322      	cbz	r2, 801ae74 <recv_custom_msg+0x64>
 801ae2a:	f200 2902 	addw	r9, r0, #514	; 0x202
 801ae2e:	f10d 081f 	add.w	r8, sp, #31
 801ae32:	af05      	add	r7, sp, #20
 801ae34:	f10d 061e 	add.w	r6, sp, #30
 801ae38:	f44f 7500 	mov.w	r5, #512	; 0x200
 801ae3c:	e002      	b.n	801ae44 <recv_custom_msg+0x34>
 801ae3e:	9b05      	ldr	r3, [sp, #20]
 801ae40:	2b00      	cmp	r3, #0
 801ae42:	dd0f      	ble.n	801ae64 <recv_custom_msg+0x54>
 801ae44:	f8d4 1274 	ldr.w	r1, [r4, #628]	; 0x274
 801ae48:	4623      	mov	r3, r4
 801ae4a:	4622      	mov	r2, r4
 801ae4c:	4648      	mov	r0, r9
 801ae4e:	e9cd 7802 	strd	r7, r8, [sp, #8]
 801ae52:	e9cd 5600 	strd	r5, r6, [sp]
 801ae56:	f001 f913 	bl	801c080 <uxr_read_framed_msg>
 801ae5a:	2800      	cmp	r0, #0
 801ae5c:	d0ef      	beq.n	801ae3e <recv_custom_msg+0x2e>
 801ae5e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801ae62:	b1b3      	cbz	r3, 801ae92 <recv_custom_msg+0x82>
 801ae64:	4b0f      	ldr	r3, [pc, #60]	; (801aea4 <recv_custom_msg+0x94>)
 801ae66:	2000      	movs	r0, #0
 801ae68:	f89d 201f 	ldrb.w	r2, [sp, #31]
 801ae6c:	701a      	strb	r2, [r3, #0]
 801ae6e:	b009      	add	sp, #36	; 0x24
 801ae70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ae74:	f10d 021f 	add.w	r2, sp, #31
 801ae78:	4601      	mov	r1, r0
 801ae7a:	9200      	str	r2, [sp, #0]
 801ae7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 801ae80:	f8d0 5274 	ldr.w	r5, [r0, #628]	; 0x274
 801ae84:	47a8      	blx	r5
 801ae86:	2800      	cmp	r0, #0
 801ae88:	d0ec      	beq.n	801ae64 <recv_custom_msg+0x54>
 801ae8a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801ae8e:	2b00      	cmp	r3, #0
 801ae90:	d1e8      	bne.n	801ae64 <recv_custom_msg+0x54>
 801ae92:	f8cb 0000 	str.w	r0, [fp]
 801ae96:	2001      	movs	r0, #1
 801ae98:	f8ca 4000 	str.w	r4, [sl]
 801ae9c:	b009      	add	sp, #36	; 0x24
 801ae9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aea2:	bf00      	nop
 801aea4:	20010e54 	.word	0x20010e54

0801aea8 <send_custom_msg>:
 801aea8:	b530      	push	{r4, r5, lr}
 801aeaa:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 801aeae:	b087      	sub	sp, #28
 801aeb0:	4614      	mov	r4, r2
 801aeb2:	b995      	cbnz	r5, 801aeda <send_custom_msg+0x32>
 801aeb4:	f8d0 5270 	ldr.w	r5, [r0, #624]	; 0x270
 801aeb8:	f10d 0317 	add.w	r3, sp, #23
 801aebc:	47a8      	blx	r5
 801aebe:	1e03      	subs	r3, r0, #0
 801aec0:	bf18      	it	ne
 801aec2:	2301      	movne	r3, #1
 801aec4:	42a0      	cmp	r0, r4
 801aec6:	bf18      	it	ne
 801aec8:	2300      	movne	r3, #0
 801aeca:	b91b      	cbnz	r3, 801aed4 <send_custom_msg+0x2c>
 801aecc:	4a0a      	ldr	r2, [pc, #40]	; (801aef8 <send_custom_msg+0x50>)
 801aece:	f89d 1017 	ldrb.w	r1, [sp, #23]
 801aed2:	7011      	strb	r1, [r2, #0]
 801aed4:	4618      	mov	r0, r3
 801aed6:	b007      	add	sp, #28
 801aed8:	bd30      	pop	{r4, r5, pc}
 801aeda:	460b      	mov	r3, r1
 801aedc:	2200      	movs	r2, #0
 801aede:	f10d 0117 	add.w	r1, sp, #23
 801aee2:	9400      	str	r4, [sp, #0]
 801aee4:	e9cd 2101 	strd	r2, r1, [sp, #4]
 801aee8:	4602      	mov	r2, r0
 801aeea:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
 801aeee:	f200 2002 	addw	r0, r0, #514	; 0x202
 801aef2:	f000 fee7 	bl	801bcc4 <uxr_write_framed_msg>
 801aef6:	e7e2      	b.n	801aebe <send_custom_msg+0x16>
 801aef8:	20010e54 	.word	0x20010e54

0801aefc <uxr_set_custom_transport_callbacks>:
 801aefc:	f880 1200 	strb.w	r1, [r0, #512]	; 0x200
 801af00:	9901      	ldr	r1, [sp, #4]
 801af02:	e9c0 239a 	strd	r2, r3, [r0, #616]	; 0x268
 801af06:	9b00      	ldr	r3, [sp, #0]
 801af08:	e9c0 319c 	strd	r3, r1, [r0, #624]	; 0x270
 801af0c:	4770      	bx	lr
 801af0e:	bf00      	nop

0801af10 <uxr_init_custom_transport>:
 801af10:	b538      	push	{r3, r4, r5, lr}
 801af12:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
 801af16:	b303      	cbz	r3, 801af5a <uxr_init_custom_transport+0x4a>
 801af18:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 801af1c:	4604      	mov	r4, r0
 801af1e:	b1e2      	cbz	r2, 801af5a <uxr_init_custom_transport+0x4a>
 801af20:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 801af24:	b1ca      	cbz	r2, 801af5a <uxr_init_custom_transport+0x4a>
 801af26:	f8d0 2274 	ldr.w	r2, [r0, #628]	; 0x274
 801af2a:	b1b2      	cbz	r2, 801af5a <uxr_init_custom_transport+0x4a>
 801af2c:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
 801af30:	4798      	blx	r3
 801af32:	4605      	mov	r5, r0
 801af34:	b188      	cbz	r0, 801af5a <uxr_init_custom_transport+0x4a>
 801af36:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 801af3a:	b98b      	cbnz	r3, 801af60 <uxr_init_custom_transport+0x50>
 801af3c:	4b0b      	ldr	r3, [pc, #44]	; (801af6c <uxr_init_custom_transport+0x5c>)
 801af3e:	4628      	mov	r0, r5
 801af40:	490b      	ldr	r1, [pc, #44]	; (801af70 <uxr_init_custom_transport+0x60>)
 801af42:	4a0c      	ldr	r2, [pc, #48]	; (801af74 <uxr_init_custom_transport+0x64>)
 801af44:	f8c4 3280 	str.w	r3, [r4, #640]	; 0x280
 801af48:	f44f 7300 	mov.w	r3, #512	; 0x200
 801af4c:	f8c4 2284 	str.w	r2, [r4, #644]	; 0x284
 801af50:	f8a4 3288 	strh.w	r3, [r4, #648]	; 0x288
 801af54:	e9c4 419e 	strd	r4, r1, [r4, #632]	; 0x278
 801af58:	bd38      	pop	{r3, r4, r5, pc}
 801af5a:	2500      	movs	r5, #0
 801af5c:	4628      	mov	r0, r5
 801af5e:	bd38      	pop	{r3, r4, r5, pc}
 801af60:	2100      	movs	r1, #0
 801af62:	f204 2002 	addw	r0, r4, #514	; 0x202
 801af66:	f000 fea7 	bl	801bcb8 <uxr_init_framing_io>
 801af6a:	e7e7      	b.n	801af3c <uxr_init_custom_transport+0x2c>
 801af6c:	0801ae11 	.word	0x0801ae11
 801af70:	0801aea9 	.word	0x0801aea9
 801af74:	0801ae05 	.word	0x0801ae05

0801af78 <uxr_close_custom_transport>:
 801af78:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 801af7c:	4718      	bx	r3
 801af7e:	bf00      	nop

0801af80 <uxr_init_input_best_effort_stream>:
 801af80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801af84:	8003      	strh	r3, [r0, #0]
 801af86:	4770      	bx	lr

0801af88 <uxr_reset_input_best_effort_stream>:
 801af88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801af8c:	8003      	strh	r3, [r0, #0]
 801af8e:	4770      	bx	lr

0801af90 <uxr_receive_best_effort_message>:
 801af90:	b538      	push	{r3, r4, r5, lr}
 801af92:	4604      	mov	r4, r0
 801af94:	8800      	ldrh	r0, [r0, #0]
 801af96:	460d      	mov	r5, r1
 801af98:	f000 fe76 	bl	801bc88 <uxr_seq_num_cmp>
 801af9c:	4603      	mov	r3, r0
 801af9e:	0fc0      	lsrs	r0, r0, #31
 801afa0:	2b00      	cmp	r3, #0
 801afa2:	bfb8      	it	lt
 801afa4:	8025      	strhlt	r5, [r4, #0]
 801afa6:	bd38      	pop	{r3, r4, r5, pc}

0801afa8 <on_full_input_buffer>:
 801afa8:	b570      	push	{r4, r5, r6, lr}
 801afaa:	460c      	mov	r4, r1
 801afac:	4605      	mov	r5, r0
 801afae:	8908      	ldrh	r0, [r1, #8]
 801afb0:	682b      	ldr	r3, [r5, #0]
 801afb2:	7d26      	ldrb	r6, [r4, #20]
 801afb4:	e9d1 1200 	ldrd	r1, r2, [r1]
 801afb8:	fbb2 f2f0 	udiv	r2, r2, r0
 801afbc:	eba3 0c01 	sub.w	ip, r3, r1
 801afc0:	fbbc fcf2 	udiv	ip, ip, r2
 801afc4:	f10c 0c01 	add.w	ip, ip, #1
 801afc8:	fa1f f38c 	uxth.w	r3, ip
 801afcc:	fbb3 fcf0 	udiv	ip, r3, r0
 801afd0:	fb00 331c 	mls	r3, r0, ip, r3
 801afd4:	b29b      	uxth	r3, r3
 801afd6:	fb02 f303 	mul.w	r3, r2, r3
 801afda:	1d18      	adds	r0, r3, #4
 801afdc:	4408      	add	r0, r1
 801afde:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801afe2:	b116      	cbz	r6, 801afea <on_full_input_buffer+0x42>
 801afe4:	2600      	movs	r6, #0
 801afe6:	f840 6c04 	str.w	r6, [r0, #-4]
 801afea:	2a03      	cmp	r2, #3
 801afec:	d801      	bhi.n	801aff2 <on_full_input_buffer+0x4a>
 801afee:	2001      	movs	r0, #1
 801aff0:	bd70      	pop	{r4, r5, r6, pc}
 801aff2:	3308      	adds	r3, #8
 801aff4:	4628      	mov	r0, r5
 801aff6:	3a04      	subs	r2, #4
 801aff8:	4419      	add	r1, r3
 801affa:	692b      	ldr	r3, [r5, #16]
 801affc:	f7f6 fd8a 	bl	8011b14 <ucdr_init_buffer_origin>
 801b000:	4628      	mov	r0, r5
 801b002:	4622      	mov	r2, r4
 801b004:	4902      	ldr	r1, [pc, #8]	; (801b010 <on_full_input_buffer+0x68>)
 801b006:	f7f6 fd61 	bl	8011acc <ucdr_set_on_full_buffer_callback>
 801b00a:	2000      	movs	r0, #0
 801b00c:	bd70      	pop	{r4, r5, r6, pc}
 801b00e:	bf00      	nop
 801b010:	0801afa9 	.word	0x0801afa9

0801b014 <uxr_init_input_reliable_stream>:
 801b014:	b510      	push	{r4, lr}
 801b016:	e9c0 1200 	strd	r1, r2, [r0]
 801b01a:	2400      	movs	r4, #0
 801b01c:	9a02      	ldr	r2, [sp, #8]
 801b01e:	8103      	strh	r3, [r0, #8]
 801b020:	6102      	str	r2, [r0, #16]
 801b022:	7504      	strb	r4, [r0, #20]
 801b024:	b1c3      	cbz	r3, 801b058 <uxr_init_input_reliable_stream+0x44>
 801b026:	600c      	str	r4, [r1, #0]
 801b028:	8901      	ldrh	r1, [r0, #8]
 801b02a:	2901      	cmp	r1, #1
 801b02c:	d914      	bls.n	801b058 <uxr_init_input_reliable_stream+0x44>
 801b02e:	f04f 0c01 	mov.w	ip, #1
 801b032:	6843      	ldr	r3, [r0, #4]
 801b034:	f10c 0e01 	add.w	lr, ip, #1
 801b038:	fbbc f2f1 	udiv	r2, ip, r1
 801b03c:	fbb3 f3f1 	udiv	r3, r3, r1
 801b040:	fb01 c212 	mls	r2, r1, r2, ip
 801b044:	fa1f fc8e 	uxth.w	ip, lr
 801b048:	b292      	uxth	r2, r2
 801b04a:	fb02 f303 	mul.w	r3, r2, r3
 801b04e:	6802      	ldr	r2, [r0, #0]
 801b050:	50d4      	str	r4, [r2, r3]
 801b052:	8901      	ldrh	r1, [r0, #8]
 801b054:	4561      	cmp	r1, ip
 801b056:	d8ec      	bhi.n	801b032 <uxr_init_input_reliable_stream+0x1e>
 801b058:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b05c:	60c3      	str	r3, [r0, #12]
 801b05e:	bd10      	pop	{r4, pc}

0801b060 <uxr_reset_input_reliable_stream>:
 801b060:	8901      	ldrh	r1, [r0, #8]
 801b062:	b1d9      	cbz	r1, 801b09c <uxr_reset_input_reliable_stream+0x3c>
 801b064:	b510      	push	{r4, lr}
 801b066:	f04f 0e00 	mov.w	lr, #0
 801b06a:	46f4      	mov	ip, lr
 801b06c:	4674      	mov	r4, lr
 801b06e:	6843      	ldr	r3, [r0, #4]
 801b070:	f10e 0e01 	add.w	lr, lr, #1
 801b074:	fbbc f2f1 	udiv	r2, ip, r1
 801b078:	fbb3 f3f1 	udiv	r3, r3, r1
 801b07c:	fb01 c212 	mls	r2, r1, r2, ip
 801b080:	fa1f fc8e 	uxth.w	ip, lr
 801b084:	b292      	uxth	r2, r2
 801b086:	fb02 f303 	mul.w	r3, r2, r3
 801b08a:	6802      	ldr	r2, [r0, #0]
 801b08c:	50d4      	str	r4, [r2, r3]
 801b08e:	8901      	ldrh	r1, [r0, #8]
 801b090:	4561      	cmp	r1, ip
 801b092:	d8ec      	bhi.n	801b06e <uxr_reset_input_reliable_stream+0xe>
 801b094:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b098:	60c3      	str	r3, [r0, #12]
 801b09a:	bd10      	pop	{r4, pc}
 801b09c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b0a0:	60c3      	str	r3, [r0, #12]
 801b0a2:	4770      	bx	lr

0801b0a4 <uxr_receive_reliable_message>:
 801b0a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b0a8:	4604      	mov	r4, r0
 801b0aa:	460d      	mov	r5, r1
 801b0ac:	8901      	ldrh	r1, [r0, #8]
 801b0ae:	4617      	mov	r7, r2
 801b0b0:	8980      	ldrh	r0, [r0, #12]
 801b0b2:	4698      	mov	r8, r3
 801b0b4:	f000 fde0 	bl	801bc78 <uxr_seq_num_add>
 801b0b8:	4629      	mov	r1, r5
 801b0ba:	4606      	mov	r6, r0
 801b0bc:	89a0      	ldrh	r0, [r4, #12]
 801b0be:	f000 fde3 	bl	801bc88 <uxr_seq_num_cmp>
 801b0c2:	2800      	cmp	r0, #0
 801b0c4:	db0a      	blt.n	801b0dc <uxr_receive_reliable_message+0x38>
 801b0c6:	2600      	movs	r6, #0
 801b0c8:	4629      	mov	r1, r5
 801b0ca:	89e0      	ldrh	r0, [r4, #14]
 801b0cc:	f000 fddc 	bl	801bc88 <uxr_seq_num_cmp>
 801b0d0:	2800      	cmp	r0, #0
 801b0d2:	da00      	bge.n	801b0d6 <uxr_receive_reliable_message+0x32>
 801b0d4:	81e5      	strh	r5, [r4, #14]
 801b0d6:	4630      	mov	r0, r6
 801b0d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b0dc:	4630      	mov	r0, r6
 801b0de:	4629      	mov	r1, r5
 801b0e0:	f000 fdd2 	bl	801bc88 <uxr_seq_num_cmp>
 801b0e4:	2800      	cmp	r0, #0
 801b0e6:	dbee      	blt.n	801b0c6 <uxr_receive_reliable_message+0x22>
 801b0e8:	6923      	ldr	r3, [r4, #16]
 801b0ea:	4638      	mov	r0, r7
 801b0ec:	4798      	blx	r3
 801b0ee:	4681      	mov	r9, r0
 801b0f0:	2101      	movs	r1, #1
 801b0f2:	89a0      	ldrh	r0, [r4, #12]
 801b0f4:	f000 fdc0 	bl	801bc78 <uxr_seq_num_add>
 801b0f8:	f1b9 0f00 	cmp.w	r9, #0
 801b0fc:	bf08      	it	eq
 801b0fe:	4285      	cmpeq	r5, r0
 801b100:	bf0c      	ite	eq
 801b102:	2601      	moveq	r6, #1
 801b104:	2600      	movne	r6, #0
 801b106:	d104      	bne.n	801b112 <uxr_receive_reliable_message+0x6e>
 801b108:	2300      	movs	r3, #0
 801b10a:	9a08      	ldr	r2, [sp, #32]
 801b10c:	81a0      	strh	r0, [r4, #12]
 801b10e:	7013      	strb	r3, [r2, #0]
 801b110:	e7da      	b.n	801b0c8 <uxr_receive_reliable_message+0x24>
 801b112:	8922      	ldrh	r2, [r4, #8]
 801b114:	6863      	ldr	r3, [r4, #4]
 801b116:	fbb5 f0f2 	udiv	r0, r5, r2
 801b11a:	fbb3 f3f2 	udiv	r3, r3, r2
 801b11e:	fb02 5010 	mls	r0, r2, r0, r5
 801b122:	b280      	uxth	r0, r0
 801b124:	fb03 f000 	mul.w	r0, r3, r0
 801b128:	6823      	ldr	r3, [r4, #0]
 801b12a:	3004      	adds	r0, #4
 801b12c:	4418      	add	r0, r3
 801b12e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801b132:	2b00      	cmp	r3, #0
 801b134:	d1c7      	bne.n	801b0c6 <uxr_receive_reliable_message+0x22>
 801b136:	4639      	mov	r1, r7
 801b138:	4642      	mov	r2, r8
 801b13a:	f002 fe5c 	bl	801ddf6 <memcpy>
 801b13e:	8921      	ldrh	r1, [r4, #8]
 801b140:	6863      	ldr	r3, [r4, #4]
 801b142:	fbb5 f2f1 	udiv	r2, r5, r1
 801b146:	fbb3 f3f1 	udiv	r3, r3, r1
 801b14a:	fb01 5212 	mls	r2, r1, r2, r5
 801b14e:	b292      	uxth	r2, r2
 801b150:	fb02 f303 	mul.w	r3, r2, r3
 801b154:	6822      	ldr	r2, [r4, #0]
 801b156:	f842 8003 	str.w	r8, [r2, r3]
 801b15a:	2301      	movs	r3, #1
 801b15c:	9a08      	ldr	r2, [sp, #32]
 801b15e:	7013      	strb	r3, [r2, #0]
 801b160:	f1b9 0f00 	cmp.w	r9, #0
 801b164:	d0af      	beq.n	801b0c6 <uxr_receive_reliable_message+0x22>
 801b166:	89a6      	ldrh	r6, [r4, #12]
 801b168:	2101      	movs	r1, #1
 801b16a:	4630      	mov	r0, r6
 801b16c:	f000 fd84 	bl	801bc78 <uxr_seq_num_add>
 801b170:	8921      	ldrh	r1, [r4, #8]
 801b172:	6863      	ldr	r3, [r4, #4]
 801b174:	4606      	mov	r6, r0
 801b176:	fbb0 f2f1 	udiv	r2, r0, r1
 801b17a:	fbb3 f3f1 	udiv	r3, r3, r1
 801b17e:	fb01 0212 	mls	r2, r1, r2, r0
 801b182:	6820      	ldr	r0, [r4, #0]
 801b184:	b292      	uxth	r2, r2
 801b186:	fb02 f303 	mul.w	r3, r2, r3
 801b18a:	3304      	adds	r3, #4
 801b18c:	4418      	add	r0, r3
 801b18e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801b192:	2b00      	cmp	r3, #0
 801b194:	d097      	beq.n	801b0c6 <uxr_receive_reliable_message+0x22>
 801b196:	6923      	ldr	r3, [r4, #16]
 801b198:	4798      	blx	r3
 801b19a:	2802      	cmp	r0, #2
 801b19c:	d002      	beq.n	801b1a4 <uxr_receive_reliable_message+0x100>
 801b19e:	2801      	cmp	r0, #1
 801b1a0:	d0e2      	beq.n	801b168 <uxr_receive_reliable_message+0xc4>
 801b1a2:	e790      	b.n	801b0c6 <uxr_receive_reliable_message+0x22>
 801b1a4:	2601      	movs	r6, #1
 801b1a6:	e78f      	b.n	801b0c8 <uxr_receive_reliable_message+0x24>

0801b1a8 <uxr_next_input_reliable_buffer_available>:
 801b1a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b1ac:	4604      	mov	r4, r0
 801b1ae:	460f      	mov	r7, r1
 801b1b0:	8980      	ldrh	r0, [r0, #12]
 801b1b2:	2101      	movs	r1, #1
 801b1b4:	4690      	mov	r8, r2
 801b1b6:	f000 fd5f 	bl	801bc78 <uxr_seq_num_add>
 801b1ba:	8922      	ldrh	r2, [r4, #8]
 801b1bc:	6866      	ldr	r6, [r4, #4]
 801b1be:	fbb0 f3f2 	udiv	r3, r0, r2
 801b1c2:	fbb6 f6f2 	udiv	r6, r6, r2
 801b1c6:	fb02 0313 	mls	r3, r2, r3, r0
 801b1ca:	b29b      	uxth	r3, r3
 801b1cc:	fb03 f606 	mul.w	r6, r3, r6
 801b1d0:	6823      	ldr	r3, [r4, #0]
 801b1d2:	3604      	adds	r6, #4
 801b1d4:	441e      	add	r6, r3
 801b1d6:	f856 9c04 	ldr.w	r9, [r6, #-4]
 801b1da:	f1b9 0f00 	cmp.w	r9, #0
 801b1de:	d023      	beq.n	801b228 <uxr_next_input_reliable_buffer_available+0x80>
 801b1e0:	4605      	mov	r5, r0
 801b1e2:	6923      	ldr	r3, [r4, #16]
 801b1e4:	4630      	mov	r0, r6
 801b1e6:	4798      	blx	r3
 801b1e8:	4682      	mov	sl, r0
 801b1ea:	b300      	cbz	r0, 801b22e <uxr_next_input_reliable_buffer_available+0x86>
 801b1ec:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 801b1f0:	2101      	movs	r1, #1
 801b1f2:	4650      	mov	r0, sl
 801b1f4:	f000 fd40 	bl	801bc78 <uxr_seq_num_add>
 801b1f8:	8921      	ldrh	r1, [r4, #8]
 801b1fa:	4682      	mov	sl, r0
 801b1fc:	6863      	ldr	r3, [r4, #4]
 801b1fe:	6820      	ldr	r0, [r4, #0]
 801b200:	fbba f2f1 	udiv	r2, sl, r1
 801b204:	fbb3 f3f1 	udiv	r3, r3, r1
 801b208:	fb01 a212 	mls	r2, r1, r2, sl
 801b20c:	b292      	uxth	r2, r2
 801b20e:	fb02 f303 	mul.w	r3, r2, r3
 801b212:	3304      	adds	r3, #4
 801b214:	4418      	add	r0, r3
 801b216:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801b21a:	b12b      	cbz	r3, 801b228 <uxr_next_input_reliable_buffer_available+0x80>
 801b21c:	6923      	ldr	r3, [r4, #16]
 801b21e:	4798      	blx	r3
 801b220:	2802      	cmp	r0, #2
 801b222:	d01b      	beq.n	801b25c <uxr_next_input_reliable_buffer_available+0xb4>
 801b224:	2801      	cmp	r0, #1
 801b226:	d0e3      	beq.n	801b1f0 <uxr_next_input_reliable_buffer_available+0x48>
 801b228:	2000      	movs	r0, #0
 801b22a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b22e:	464a      	mov	r2, r9
 801b230:	4631      	mov	r1, r6
 801b232:	4638      	mov	r0, r7
 801b234:	f7f6 fc76 	bl	8011b24 <ucdr_init_buffer>
 801b238:	8921      	ldrh	r1, [r4, #8]
 801b23a:	6863      	ldr	r3, [r4, #4]
 801b23c:	2001      	movs	r0, #1
 801b23e:	fbb5 f2f1 	udiv	r2, r5, r1
 801b242:	fbb3 f3f1 	udiv	r3, r3, r1
 801b246:	fb01 5212 	mls	r2, r1, r2, r5
 801b24a:	b292      	uxth	r2, r2
 801b24c:	fb02 f303 	mul.w	r3, r2, r3
 801b250:	6822      	ldr	r2, [r4, #0]
 801b252:	f842 a003 	str.w	sl, [r2, r3]
 801b256:	81a5      	strh	r5, [r4, #12]
 801b258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b25c:	8920      	ldrh	r0, [r4, #8]
 801b25e:	eb06 0108 	add.w	r1, r6, r8
 801b262:	6863      	ldr	r3, [r4, #4]
 801b264:	eba9 0208 	sub.w	r2, r9, r8
 801b268:	fbb5 f6f0 	udiv	r6, r5, r0
 801b26c:	fbb3 f3f0 	udiv	r3, r3, r0
 801b270:	fb00 5516 	mls	r5, r0, r6, r5
 801b274:	2000      	movs	r0, #0
 801b276:	b2ad      	uxth	r5, r5
 801b278:	fb03 f505 	mul.w	r5, r3, r5
 801b27c:	6823      	ldr	r3, [r4, #0]
 801b27e:	5158      	str	r0, [r3, r5]
 801b280:	4638      	mov	r0, r7
 801b282:	f7f6 fc4f 	bl	8011b24 <ucdr_init_buffer>
 801b286:	4638      	mov	r0, r7
 801b288:	4622      	mov	r2, r4
 801b28a:	4903      	ldr	r1, [pc, #12]	; (801b298 <uxr_next_input_reliable_buffer_available+0xf0>)
 801b28c:	f7f6 fc1e 	bl	8011acc <ucdr_set_on_full_buffer_callback>
 801b290:	2001      	movs	r0, #1
 801b292:	f8a4 a00c 	strh.w	sl, [r4, #12]
 801b296:	e7c8      	b.n	801b22a <uxr_next_input_reliable_buffer_available+0x82>
 801b298:	0801afa9 	.word	0x0801afa9

0801b29c <uxr_process_heartbeat>:
 801b29c:	b538      	push	{r3, r4, r5, lr}
 801b29e:	4611      	mov	r1, r2
 801b2a0:	4604      	mov	r4, r0
 801b2a2:	89c0      	ldrh	r0, [r0, #14]
 801b2a4:	4615      	mov	r5, r2
 801b2a6:	f000 fcef 	bl	801bc88 <uxr_seq_num_cmp>
 801b2aa:	2800      	cmp	r0, #0
 801b2ac:	bfb8      	it	lt
 801b2ae:	81e5      	strhlt	r5, [r4, #14]
 801b2b0:	bd38      	pop	{r3, r4, r5, pc}
 801b2b2:	bf00      	nop

0801b2b4 <uxr_compute_acknack>:
 801b2b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b2b8:	8903      	ldrh	r3, [r0, #8]
 801b2ba:	4604      	mov	r4, r0
 801b2bc:	460f      	mov	r7, r1
 801b2be:	8985      	ldrh	r5, [r0, #12]
 801b2c0:	b1db      	cbz	r3, 801b2fa <uxr_compute_acknack+0x46>
 801b2c2:	4628      	mov	r0, r5
 801b2c4:	2601      	movs	r6, #1
 801b2c6:	e004      	b.n	801b2d2 <uxr_compute_acknack+0x1e>
 801b2c8:	4566      	cmp	r6, ip
 801b2ca:	f106 0601 	add.w	r6, r6, #1
 801b2ce:	d214      	bcs.n	801b2fa <uxr_compute_acknack+0x46>
 801b2d0:	89a0      	ldrh	r0, [r4, #12]
 801b2d2:	b2b1      	uxth	r1, r6
 801b2d4:	f000 fcd0 	bl	801bc78 <uxr_seq_num_add>
 801b2d8:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801b2dc:	fbb0 f2fc 	udiv	r2, r0, ip
 801b2e0:	e9d4 1300 	ldrd	r1, r3, [r4]
 801b2e4:	fb0c 0212 	mls	r2, ip, r2, r0
 801b2e8:	fbb3 f3fc 	udiv	r3, r3, ip
 801b2ec:	b292      	uxth	r2, r2
 801b2ee:	fb02 f303 	mul.w	r3, r2, r3
 801b2f2:	58cb      	ldr	r3, [r1, r3]
 801b2f4:	2b00      	cmp	r3, #0
 801b2f6:	d1e7      	bne.n	801b2c8 <uxr_compute_acknack+0x14>
 801b2f8:	4605      	mov	r5, r0
 801b2fa:	803d      	strh	r5, [r7, #0]
 801b2fc:	2101      	movs	r1, #1
 801b2fe:	89e6      	ldrh	r6, [r4, #14]
 801b300:	4628      	mov	r0, r5
 801b302:	f000 fcbd 	bl	801bc80 <uxr_seq_num_sub>
 801b306:	4601      	mov	r1, r0
 801b308:	4630      	mov	r0, r6
 801b30a:	f000 fcb9 	bl	801bc80 <uxr_seq_num_sub>
 801b30e:	4606      	mov	r6, r0
 801b310:	b328      	cbz	r0, 801b35e <uxr_compute_acknack+0xaa>
 801b312:	f04f 0900 	mov.w	r9, #0
 801b316:	f04f 0801 	mov.w	r8, #1
 801b31a:	464d      	mov	r5, r9
 801b31c:	fa1f f189 	uxth.w	r1, r9
 801b320:	8838      	ldrh	r0, [r7, #0]
 801b322:	f000 fca9 	bl	801bc78 <uxr_seq_num_add>
 801b326:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801b32a:	6861      	ldr	r1, [r4, #4]
 801b32c:	fa08 fe09 	lsl.w	lr, r8, r9
 801b330:	6822      	ldr	r2, [r4, #0]
 801b332:	f109 0901 	add.w	r9, r9, #1
 801b336:	ea4e 0e05 	orr.w	lr, lr, r5
 801b33a:	fbb0 f3fc 	udiv	r3, r0, ip
 801b33e:	fbb1 f1fc 	udiv	r1, r1, ip
 801b342:	fb03 001c 	mls	r0, r3, ip, r0
 801b346:	b283      	uxth	r3, r0
 801b348:	fb01 f303 	mul.w	r3, r1, r3
 801b34c:	58d3      	ldr	r3, [r2, r3]
 801b34e:	b90b      	cbnz	r3, 801b354 <uxr_compute_acknack+0xa0>
 801b350:	fa1f f58e 	uxth.w	r5, lr
 801b354:	454e      	cmp	r6, r9
 801b356:	d1e1      	bne.n	801b31c <uxr_compute_acknack+0x68>
 801b358:	4628      	mov	r0, r5
 801b35a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b35e:	4605      	mov	r5, r0
 801b360:	4628      	mov	r0, r5
 801b362:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b366:	bf00      	nop

0801b368 <uxr_init_output_best_effort_stream>:
 801b368:	f64f 7cff 	movw	ip, #65535	; 0xffff
 801b36c:	6001      	str	r1, [r0, #0]
 801b36e:	7303      	strb	r3, [r0, #12]
 801b370:	f8a0 c00e 	strh.w	ip, [r0, #14]
 801b374:	e9c0 3201 	strd	r3, r2, [r0, #4]
 801b378:	4770      	bx	lr
 801b37a:	bf00      	nop

0801b37c <uxr_reset_output_best_effort_stream>:
 801b37c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b380:	7b03      	ldrb	r3, [r0, #12]
 801b382:	81c2      	strh	r2, [r0, #14]
 801b384:	6043      	str	r3, [r0, #4]
 801b386:	4770      	bx	lr

0801b388 <uxr_prepare_best_effort_buffer_to_write>:
 801b388:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b38a:	4604      	mov	r4, r0
 801b38c:	b083      	sub	sp, #12
 801b38e:	6840      	ldr	r0, [r0, #4]
 801b390:	460d      	mov	r5, r1
 801b392:	4616      	mov	r6, r2
 801b394:	f7f8 f8bc 	bl	8013510 <uxr_submessage_padding>
 801b398:	6863      	ldr	r3, [r4, #4]
 801b39a:	4418      	add	r0, r3
 801b39c:	68a3      	ldr	r3, [r4, #8]
 801b39e:	1942      	adds	r2, r0, r5
 801b3a0:	4293      	cmp	r3, r2
 801b3a2:	bf2c      	ite	cs
 801b3a4:	2701      	movcs	r7, #1
 801b3a6:	2700      	movcc	r7, #0
 801b3a8:	d202      	bcs.n	801b3b0 <uxr_prepare_best_effort_buffer_to_write+0x28>
 801b3aa:	4638      	mov	r0, r7
 801b3ac:	b003      	add	sp, #12
 801b3ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b3b0:	9000      	str	r0, [sp, #0]
 801b3b2:	2300      	movs	r3, #0
 801b3b4:	4630      	mov	r0, r6
 801b3b6:	6821      	ldr	r1, [r4, #0]
 801b3b8:	f7f6 fba2 	bl	8011b00 <ucdr_init_buffer_origin_offset>
 801b3bc:	6861      	ldr	r1, [r4, #4]
 801b3be:	4638      	mov	r0, r7
 801b3c0:	4429      	add	r1, r5
 801b3c2:	6061      	str	r1, [r4, #4]
 801b3c4:	b003      	add	sp, #12
 801b3c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801b3c8 <uxr_prepare_best_effort_buffer_to_send>:
 801b3c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b3cc:	4604      	mov	r4, r0
 801b3ce:	461d      	mov	r5, r3
 801b3d0:	6840      	ldr	r0, [r0, #4]
 801b3d2:	7b23      	ldrb	r3, [r4, #12]
 801b3d4:	4298      	cmp	r0, r3
 801b3d6:	bf8c      	ite	hi
 801b3d8:	2601      	movhi	r6, #1
 801b3da:	2600      	movls	r6, #0
 801b3dc:	d802      	bhi.n	801b3e4 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 801b3de:	4630      	mov	r0, r6
 801b3e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b3e4:	4688      	mov	r8, r1
 801b3e6:	89e0      	ldrh	r0, [r4, #14]
 801b3e8:	2101      	movs	r1, #1
 801b3ea:	4617      	mov	r7, r2
 801b3ec:	f000 fc44 	bl	801bc78 <uxr_seq_num_add>
 801b3f0:	6823      	ldr	r3, [r4, #0]
 801b3f2:	81e0      	strh	r0, [r4, #14]
 801b3f4:	8028      	strh	r0, [r5, #0]
 801b3f6:	4630      	mov	r0, r6
 801b3f8:	f8c8 3000 	str.w	r3, [r8]
 801b3fc:	6863      	ldr	r3, [r4, #4]
 801b3fe:	603b      	str	r3, [r7, #0]
 801b400:	7b23      	ldrb	r3, [r4, #12]
 801b402:	6063      	str	r3, [r4, #4]
 801b404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b408 <on_full_output_buffer>:
 801b408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b40a:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 801b40e:	460c      	mov	r4, r1
 801b410:	6803      	ldr	r3, [r0, #0]
 801b412:	4605      	mov	r5, r0
 801b414:	7b26      	ldrb	r6, [r4, #12]
 801b416:	e9d1 1200 	ldrd	r1, r2, [r1]
 801b41a:	fbb2 f2fc 	udiv	r2, r2, ip
 801b41e:	eba3 0e01 	sub.w	lr, r3, r1
 801b422:	6903      	ldr	r3, [r0, #16]
 801b424:	fbbe fef2 	udiv	lr, lr, r2
 801b428:	f10e 0e01 	add.w	lr, lr, #1
 801b42c:	fa1f fe8e 	uxth.w	lr, lr
 801b430:	fbbe f7fc 	udiv	r7, lr, ip
 801b434:	fb0c ec17 	mls	ip, ip, r7, lr
 801b438:	fa1f fc8c 	uxth.w	ip, ip
 801b43c:	fb02 fc0c 	mul.w	ip, r2, ip
 801b440:	f851 200c 	ldr.w	r2, [r1, ip]
 801b444:	44b4      	add	ip, r6
 801b446:	1b92      	subs	r2, r2, r6
 801b448:	f10c 0c08 	add.w	ip, ip, #8
 801b44c:	3a04      	subs	r2, #4
 801b44e:	4461      	add	r1, ip
 801b450:	f7f6 fb60 	bl	8011b14 <ucdr_init_buffer_origin>
 801b454:	4628      	mov	r0, r5
 801b456:	4622      	mov	r2, r4
 801b458:	4902      	ldr	r1, [pc, #8]	; (801b464 <on_full_output_buffer+0x5c>)
 801b45a:	f7f6 fb37 	bl	8011acc <ucdr_set_on_full_buffer_callback>
 801b45e:	2000      	movs	r0, #0
 801b460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b462:	bf00      	nop
 801b464:	0801b409 	.word	0x0801b409

0801b468 <uxr_init_output_reliable_stream>:
 801b468:	b530      	push	{r4, r5, lr}
 801b46a:	f89d 400c 	ldrb.w	r4, [sp, #12]
 801b46e:	8103      	strh	r3, [r0, #8]
 801b470:	7304      	strb	r4, [r0, #12]
 801b472:	e9c0 1200 	strd	r1, r2, [r0]
 801b476:	b1e3      	cbz	r3, 801b4b2 <uxr_init_output_reliable_stream+0x4a>
 801b478:	600c      	str	r4, [r1, #0]
 801b47a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801b47e:	f1bc 0f01 	cmp.w	ip, #1
 801b482:	d916      	bls.n	801b4b2 <uxr_init_output_reliable_stream+0x4a>
 801b484:	f04f 0e01 	mov.w	lr, #1
 801b488:	6843      	ldr	r3, [r0, #4]
 801b48a:	f10e 0501 	add.w	r5, lr, #1
 801b48e:	7b04      	ldrb	r4, [r0, #12]
 801b490:	6801      	ldr	r1, [r0, #0]
 801b492:	fbbe f2fc 	udiv	r2, lr, ip
 801b496:	fbb3 f3fc 	udiv	r3, r3, ip
 801b49a:	fb0c e212 	mls	r2, ip, r2, lr
 801b49e:	fa1f fe85 	uxth.w	lr, r5
 801b4a2:	b292      	uxth	r2, r2
 801b4a4:	fb02 f303 	mul.w	r3, r2, r3
 801b4a8:	50cc      	str	r4, [r1, r3]
 801b4aa:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801b4ae:	45f4      	cmp	ip, lr
 801b4b0:	d8ea      	bhi.n	801b488 <uxr_init_output_reliable_stream+0x20>
 801b4b2:	4b07      	ldr	r3, [pc, #28]	; (801b4d0 <uxr_init_output_reliable_stream+0x68>)
 801b4b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b4b8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801b4bc:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 801b4c0:	f8c0 300e 	str.w	r3, [r0, #14]
 801b4c4:	2300      	movs	r3, #0
 801b4c6:	8242      	strh	r2, [r0, #18]
 801b4c8:	8403      	strh	r3, [r0, #32]
 801b4ca:	e9c0 4506 	strd	r4, r5, [r0, #24]
 801b4ce:	bd30      	pop	{r4, r5, pc}
 801b4d0:	ffff0000 	.word	0xffff0000
 801b4d4:	00000000 	.word	0x00000000

0801b4d8 <uxr_reset_output_reliable_stream>:
 801b4d8:	8901      	ldrh	r1, [r0, #8]
 801b4da:	b510      	push	{r4, lr}
 801b4dc:	b1b1      	cbz	r1, 801b50c <uxr_reset_output_reliable_stream+0x34>
 801b4de:	f04f 0e00 	mov.w	lr, #0
 801b4e2:	46f4      	mov	ip, lr
 801b4e4:	6843      	ldr	r3, [r0, #4]
 801b4e6:	f10e 0e01 	add.w	lr, lr, #1
 801b4ea:	7b04      	ldrb	r4, [r0, #12]
 801b4ec:	fbbc f2f1 	udiv	r2, ip, r1
 801b4f0:	fbb3 f3f1 	udiv	r3, r3, r1
 801b4f4:	fb01 c212 	mls	r2, r1, r2, ip
 801b4f8:	fa1f fc8e 	uxth.w	ip, lr
 801b4fc:	b292      	uxth	r2, r2
 801b4fe:	fb02 f303 	mul.w	r3, r2, r3
 801b502:	6802      	ldr	r2, [r0, #0]
 801b504:	50d4      	str	r4, [r2, r3]
 801b506:	8901      	ldrh	r1, [r0, #8]
 801b508:	4561      	cmp	r1, ip
 801b50a:	d8eb      	bhi.n	801b4e4 <uxr_reset_output_reliable_stream+0xc>
 801b50c:	4b08      	ldr	r3, [pc, #32]	; (801b530 <uxr_reset_output_reliable_stream+0x58>)
 801b50e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b512:	ed9f 7b05 	vldr	d7, [pc, #20]	; 801b528 <uxr_reset_output_reliable_stream+0x50>
 801b516:	f8c0 300e 	str.w	r3, [r0, #14]
 801b51a:	2300      	movs	r3, #0
 801b51c:	8242      	strh	r2, [r0, #18]
 801b51e:	8403      	strh	r3, [r0, #32]
 801b520:	ed80 7b06 	vstr	d7, [r0, #24]
 801b524:	bd10      	pop	{r4, pc}
 801b526:	bf00      	nop
 801b528:	ffffffff 	.word	0xffffffff
 801b52c:	7fffffff 	.word	0x7fffffff
 801b530:	ffff0000 	.word	0xffff0000

0801b534 <uxr_prepare_reliable_buffer_to_write>:
 801b534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b538:	4604      	mov	r4, r0
 801b53a:	b091      	sub	sp, #68	; 0x44
 801b53c:	8900      	ldrh	r0, [r0, #8]
 801b53e:	468b      	mov	fp, r1
 801b540:	89e6      	ldrh	r6, [r4, #14]
 801b542:	9204      	str	r2, [sp, #16]
 801b544:	6865      	ldr	r5, [r4, #4]
 801b546:	6823      	ldr	r3, [r4, #0]
 801b548:	f894 900c 	ldrb.w	r9, [r4, #12]
 801b54c:	fbb6 f2f0 	udiv	r2, r6, r0
 801b550:	fbb5 f5f0 	udiv	r5, r5, r0
 801b554:	fb00 6212 	mls	r2, r0, r2, r6
 801b558:	1f2f      	subs	r7, r5, #4
 801b55a:	b292      	uxth	r2, r2
 801b55c:	fb05 3202 	mla	r2, r5, r2, r3
 801b560:	1d11      	adds	r1, r2, #4
 801b562:	f8d2 8000 	ldr.w	r8, [r2]
 801b566:	9103      	str	r1, [sp, #12]
 801b568:	2800      	cmp	r0, #0
 801b56a:	f000 814a 	beq.w	801b802 <uxr_prepare_reliable_buffer_to_write+0x2ce>
 801b56e:	f04f 0c00 	mov.w	ip, #0
 801b572:	46e2      	mov	sl, ip
 801b574:	4661      	mov	r1, ip
 801b576:	f10c 0c01 	add.w	ip, ip, #1
 801b57a:	fbb1 f2f0 	udiv	r2, r1, r0
 801b57e:	fb00 1212 	mls	r2, r0, r2, r1
 801b582:	fa1f f18c 	uxth.w	r1, ip
 801b586:	b292      	uxth	r2, r2
 801b588:	fb05 f202 	mul.w	r2, r5, r2
 801b58c:	589a      	ldr	r2, [r3, r2]
 801b58e:	454a      	cmp	r2, r9
 801b590:	d103      	bne.n	801b59a <uxr_prepare_reliable_buffer_to_write+0x66>
 801b592:	f10a 0a01 	add.w	sl, sl, #1
 801b596:	fa1f fa8a 	uxth.w	sl, sl
 801b59a:	4281      	cmp	r1, r0
 801b59c:	d3eb      	bcc.n	801b576 <uxr_prepare_reliable_buffer_to_write+0x42>
 801b59e:	4640      	mov	r0, r8
 801b5a0:	2104      	movs	r1, #4
 801b5a2:	f8cd a014 	str.w	sl, [sp, #20]
 801b5a6:	f7f6 fac1 	bl	8011b2c <ucdr_alignment>
 801b5aa:	4480      	add	r8, r0
 801b5ac:	eb08 020b 	add.w	r2, r8, fp
 801b5b0:	42ba      	cmp	r2, r7
 801b5b2:	f240 80ca 	bls.w	801b74a <uxr_prepare_reliable_buffer_to_write+0x216>
 801b5b6:	7b22      	ldrb	r2, [r4, #12]
 801b5b8:	445a      	add	r2, fp
 801b5ba:	42ba      	cmp	r2, r7
 801b5bc:	f240 80b2 	bls.w	801b724 <uxr_prepare_reliable_buffer_to_write+0x1f0>
 801b5c0:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 801b5c4:	b2bb      	uxth	r3, r7
 801b5c6:	eba2 0209 	sub.w	r2, r2, r9
 801b5ca:	441a      	add	r2, r3
 801b5cc:	b292      	uxth	r2, r2
 801b5ce:	fb0a f902 	mul.w	r9, sl, r2
 801b5d2:	9205      	str	r2, [sp, #20]
 801b5d4:	45d9      	cmp	r9, fp
 801b5d6:	9206      	str	r2, [sp, #24]
 801b5d8:	f0c0 80b3 	bcc.w	801b742 <uxr_prepare_reliable_buffer_to_write+0x20e>
 801b5dc:	f108 0204 	add.w	r2, r8, #4
 801b5e0:	42ba      	cmp	r2, r7
 801b5e2:	f080 80da 	bcs.w	801b79a <uxr_prepare_reliable_buffer_to_write+0x266>
 801b5e6:	f1a3 0904 	sub.w	r9, r3, #4
 801b5ea:	9b05      	ldr	r3, [sp, #20]
 801b5ec:	eba9 0908 	sub.w	r9, r9, r8
 801b5f0:	fa1f f989 	uxth.w	r9, r9
 801b5f4:	ebab 0b09 	sub.w	fp, fp, r9
 801b5f8:	fbbb f2f3 	udiv	r2, fp, r3
 801b5fc:	fb03 b312 	mls	r3, r3, r2, fp
 801b600:	2b00      	cmp	r3, #0
 801b602:	f040 80c4 	bne.w	801b78e <uxr_prepare_reliable_buffer_to_write+0x25a>
 801b606:	b293      	uxth	r3, r2
 801b608:	4553      	cmp	r3, sl
 801b60a:	f200 809a 	bhi.w	801b742 <uxr_prepare_reliable_buffer_to_write+0x20e>
 801b60e:	2b00      	cmp	r3, #0
 801b610:	f000 80f9 	beq.w	801b806 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 801b614:	f8cd 801c 	str.w	r8, [sp, #28]
 801b618:	f04f 0a00 	mov.w	sl, #0
 801b61c:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801b620:	f10d 0b20 	add.w	fp, sp, #32
 801b624:	9505      	str	r5, [sp, #20]
 801b626:	461d      	mov	r5, r3
 801b628:	e000      	b.n	801b62c <uxr_prepare_reliable_buffer_to_write+0xf8>
 801b62a:	46c1      	mov	r9, r8
 801b62c:	8922      	ldrh	r2, [r4, #8]
 801b62e:	4658      	mov	r0, fp
 801b630:	6863      	ldr	r3, [r4, #4]
 801b632:	f10a 0a01 	add.w	sl, sl, #1
 801b636:	fbb6 f1f2 	udiv	r1, r6, r2
 801b63a:	fbb3 f3f2 	udiv	r3, r3, r2
 801b63e:	fb02 6111 	mls	r1, r2, r1, r6
 801b642:	463a      	mov	r2, r7
 801b644:	b289      	uxth	r1, r1
 801b646:	fb03 f101 	mul.w	r1, r3, r1
 801b64a:	6823      	ldr	r3, [r4, #0]
 801b64c:	3104      	adds	r1, #4
 801b64e:	4419      	add	r1, r3
 801b650:	2300      	movs	r3, #0
 801b652:	f851 cc04 	ldr.w	ip, [r1, #-4]
 801b656:	f8cd c000 	str.w	ip, [sp]
 801b65a:	f7f6 fa51 	bl	8011b00 <ucdr_init_buffer_origin_offset>
 801b65e:	464a      	mov	r2, r9
 801b660:	2300      	movs	r3, #0
 801b662:	210d      	movs	r1, #13
 801b664:	4658      	mov	r0, fp
 801b666:	f7f7 ff13 	bl	8013490 <uxr_buffer_submessage_header>
 801b66a:	8921      	ldrh	r1, [r4, #8]
 801b66c:	6863      	ldr	r3, [r4, #4]
 801b66e:	4630      	mov	r0, r6
 801b670:	fbb6 f2f1 	udiv	r2, r6, r1
 801b674:	fbb3 f3f1 	udiv	r3, r3, r1
 801b678:	fb01 6212 	mls	r2, r1, r2, r6
 801b67c:	2101      	movs	r1, #1
 801b67e:	b292      	uxth	r2, r2
 801b680:	fb02 f303 	mul.w	r3, r2, r3
 801b684:	6822      	ldr	r2, [r4, #0]
 801b686:	50d7      	str	r7, [r2, r3]
 801b688:	f000 faf6 	bl	801bc78 <uxr_seq_num_add>
 801b68c:	4606      	mov	r6, r0
 801b68e:	fa1f f38a 	uxth.w	r3, sl
 801b692:	429d      	cmp	r5, r3
 801b694:	d8c9      	bhi.n	801b62a <uxr_prepare_reliable_buffer_to_write+0xf6>
 801b696:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801b69a:	9d05      	ldr	r5, [sp, #20]
 801b69c:	8920      	ldrh	r0, [r4, #8]
 801b69e:	463a      	mov	r2, r7
 801b6a0:	6863      	ldr	r3, [r4, #4]
 801b6a2:	fbb6 f1f0 	udiv	r1, r6, r0
 801b6a6:	fbb3 f3f0 	udiv	r3, r3, r0
 801b6aa:	fb00 6111 	mls	r1, r0, r1, r6
 801b6ae:	4658      	mov	r0, fp
 801b6b0:	b289      	uxth	r1, r1
 801b6b2:	fb01 f303 	mul.w	r3, r1, r3
 801b6b6:	6821      	ldr	r1, [r4, #0]
 801b6b8:	3304      	adds	r3, #4
 801b6ba:	4419      	add	r1, r3
 801b6bc:	2300      	movs	r3, #0
 801b6be:	f851 7c04 	ldr.w	r7, [r1, #-4]
 801b6c2:	9700      	str	r7, [sp, #0]
 801b6c4:	f7f6 fa1c 	bl	8011b00 <ucdr_init_buffer_origin_offset>
 801b6c8:	9f06      	ldr	r7, [sp, #24]
 801b6ca:	4658      	mov	r0, fp
 801b6cc:	2302      	movs	r3, #2
 801b6ce:	b2ba      	uxth	r2, r7
 801b6d0:	210d      	movs	r1, #13
 801b6d2:	f7f7 fedd 	bl	8013490 <uxr_buffer_submessage_header>
 801b6d6:	f108 0104 	add.w	r1, r8, #4
 801b6da:	9b03      	ldr	r3, [sp, #12]
 801b6dc:	f1a5 0208 	sub.w	r2, r5, #8
 801b6e0:	8925      	ldrh	r5, [r4, #8]
 801b6e2:	440b      	add	r3, r1
 801b6e4:	eba2 0208 	sub.w	r2, r2, r8
 801b6e8:	fbb6 f0f5 	udiv	r0, r6, r5
 801b6ec:	4619      	mov	r1, r3
 801b6ee:	6863      	ldr	r3, [r4, #4]
 801b6f0:	fb05 6010 	mls	r0, r5, r0, r6
 801b6f4:	fbb3 f3f5 	udiv	r3, r3, r5
 801b6f8:	b280      	uxth	r0, r0
 801b6fa:	6825      	ldr	r5, [r4, #0]
 801b6fc:	fb00 f303 	mul.w	r3, r0, r3
 801b700:	7b20      	ldrb	r0, [r4, #12]
 801b702:	3004      	adds	r0, #4
 801b704:	4438      	add	r0, r7
 801b706:	50e8      	str	r0, [r5, r3]
 801b708:	9d04      	ldr	r5, [sp, #16]
 801b70a:	4628      	mov	r0, r5
 801b70c:	f7f6 fa0a 	bl	8011b24 <ucdr_init_buffer>
 801b710:	4628      	mov	r0, r5
 801b712:	4622      	mov	r2, r4
 801b714:	493d      	ldr	r1, [pc, #244]	; (801b80c <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 801b716:	f7f6 f9d9 	bl	8011acc <ucdr_set_on_full_buffer_callback>
 801b71a:	2001      	movs	r0, #1
 801b71c:	81e6      	strh	r6, [r4, #14]
 801b71e:	b011      	add	sp, #68	; 0x44
 801b720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b724:	2101      	movs	r1, #1
 801b726:	89e0      	ldrh	r0, [r4, #14]
 801b728:	f000 faa6 	bl	801bc78 <uxr_seq_num_add>
 801b72c:	4605      	mov	r5, r0
 801b72e:	8921      	ldrh	r1, [r4, #8]
 801b730:	8a60      	ldrh	r0, [r4, #18]
 801b732:	f000 faa1 	bl	801bc78 <uxr_seq_num_add>
 801b736:	4601      	mov	r1, r0
 801b738:	4628      	mov	r0, r5
 801b73a:	f000 faa5 	bl	801bc88 <uxr_seq_num_cmp>
 801b73e:	2800      	cmp	r0, #0
 801b740:	dd44      	ble.n	801b7cc <uxr_prepare_reliable_buffer_to_write+0x298>
 801b742:	2000      	movs	r0, #0
 801b744:	b011      	add	sp, #68	; 0x44
 801b746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b74a:	8921      	ldrh	r1, [r4, #8]
 801b74c:	8a60      	ldrh	r0, [r4, #18]
 801b74e:	9205      	str	r2, [sp, #20]
 801b750:	f000 fa92 	bl	801bc78 <uxr_seq_num_add>
 801b754:	4601      	mov	r1, r0
 801b756:	4630      	mov	r0, r6
 801b758:	f000 fa96 	bl	801bc88 <uxr_seq_num_cmp>
 801b75c:	2800      	cmp	r0, #0
 801b75e:	9a05      	ldr	r2, [sp, #20]
 801b760:	dcef      	bgt.n	801b742 <uxr_prepare_reliable_buffer_to_write+0x20e>
 801b762:	8925      	ldrh	r5, [r4, #8]
 801b764:	e9d4 7300 	ldrd	r7, r3, [r4]
 801b768:	fbb6 f4f5 	udiv	r4, r6, r5
 801b76c:	fbb3 f3f5 	udiv	r3, r3, r5
 801b770:	fb05 6414 	mls	r4, r5, r4, r6
 801b774:	b2a4      	uxth	r4, r4
 801b776:	fb04 f303 	mul.w	r3, r4, r3
 801b77a:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 801b77e:	50fa      	str	r2, [r7, r3]
 801b780:	2300      	movs	r3, #0
 801b782:	f8cd 8000 	str.w	r8, [sp]
 801b786:	f7f6 f9bb 	bl	8011b00 <ucdr_init_buffer_origin_offset>
 801b78a:	2001      	movs	r0, #1
 801b78c:	e7da      	b.n	801b744 <uxr_prepare_reliable_buffer_to_write+0x210>
 801b78e:	3201      	adds	r2, #1
 801b790:	9306      	str	r3, [sp, #24]
 801b792:	b293      	uxth	r3, r2
 801b794:	4553      	cmp	r3, sl
 801b796:	d8d4      	bhi.n	801b742 <uxr_prepare_reliable_buffer_to_write+0x20e>
 801b798:	e739      	b.n	801b60e <uxr_prepare_reliable_buffer_to_write+0xda>
 801b79a:	4630      	mov	r0, r6
 801b79c:	2101      	movs	r1, #1
 801b79e:	9307      	str	r3, [sp, #28]
 801b7a0:	f000 fa6a 	bl	801bc78 <uxr_seq_num_add>
 801b7a4:	4606      	mov	r6, r0
 801b7a6:	8920      	ldrh	r0, [r4, #8]
 801b7a8:	6862      	ldr	r2, [r4, #4]
 801b7aa:	fbb6 f1f0 	udiv	r1, r6, r0
 801b7ae:	fbb2 f2f0 	udiv	r2, r2, r0
 801b7b2:	fb00 6111 	mls	r1, r0, r1, r6
 801b7b6:	b289      	uxth	r1, r1
 801b7b8:	fb01 f202 	mul.w	r2, r1, r2
 801b7bc:	6821      	ldr	r1, [r4, #0]
 801b7be:	3204      	adds	r2, #4
 801b7c0:	188b      	adds	r3, r1, r2
 801b7c2:	f853 8c04 	ldr.w	r8, [r3, #-4]
 801b7c6:	9303      	str	r3, [sp, #12]
 801b7c8:	9b07      	ldr	r3, [sp, #28]
 801b7ca:	e70c      	b.n	801b5e6 <uxr_prepare_reliable_buffer_to_write+0xb2>
 801b7cc:	8921      	ldrh	r1, [r4, #8]
 801b7ce:	6863      	ldr	r3, [r4, #4]
 801b7d0:	9804      	ldr	r0, [sp, #16]
 801b7d2:	fbb5 f2f1 	udiv	r2, r5, r1
 801b7d6:	fbb3 f3f1 	udiv	r3, r3, r1
 801b7da:	fb01 5212 	mls	r2, r1, r2, r5
 801b7de:	6821      	ldr	r1, [r4, #0]
 801b7e0:	b292      	uxth	r2, r2
 801b7e2:	fb02 f303 	mul.w	r3, r2, r3
 801b7e6:	7b22      	ldrb	r2, [r4, #12]
 801b7e8:	3304      	adds	r3, #4
 801b7ea:	445a      	add	r2, fp
 801b7ec:	4419      	add	r1, r3
 801b7ee:	f841 2c04 	str.w	r2, [r1, #-4]
 801b7f2:	7b23      	ldrb	r3, [r4, #12]
 801b7f4:	9300      	str	r3, [sp, #0]
 801b7f6:	2300      	movs	r3, #0
 801b7f8:	f7f6 f982 	bl	8011b00 <ucdr_init_buffer_origin_offset>
 801b7fc:	2001      	movs	r0, #1
 801b7fe:	81e5      	strh	r5, [r4, #14]
 801b800:	e7a0      	b.n	801b744 <uxr_prepare_reliable_buffer_to_write+0x210>
 801b802:	4682      	mov	sl, r0
 801b804:	e6cb      	b.n	801b59e <uxr_prepare_reliable_buffer_to_write+0x6a>
 801b806:	f10d 0b20 	add.w	fp, sp, #32
 801b80a:	e747      	b.n	801b69c <uxr_prepare_reliable_buffer_to_write+0x168>
 801b80c:	0801b409 	.word	0x0801b409

0801b810 <uxr_prepare_next_reliable_buffer_to_send>:
 801b810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b812:	4604      	mov	r4, r0
 801b814:	461d      	mov	r5, r3
 801b816:	460f      	mov	r7, r1
 801b818:	8a00      	ldrh	r0, [r0, #16]
 801b81a:	2101      	movs	r1, #1
 801b81c:	4616      	mov	r6, r2
 801b81e:	f000 fa2b 	bl	801bc78 <uxr_seq_num_add>
 801b822:	8028      	strh	r0, [r5, #0]
 801b824:	8922      	ldrh	r2, [r4, #8]
 801b826:	6863      	ldr	r3, [r4, #4]
 801b828:	fbb0 f1f2 	udiv	r1, r0, r2
 801b82c:	fbb3 f3f2 	udiv	r3, r3, r2
 801b830:	fb02 0c11 	mls	ip, r2, r1, r0
 801b834:	89e1      	ldrh	r1, [r4, #14]
 801b836:	fa1f fc8c 	uxth.w	ip, ip
 801b83a:	fb0c fc03 	mul.w	ip, ip, r3
 801b83e:	6823      	ldr	r3, [r4, #0]
 801b840:	f10c 0c04 	add.w	ip, ip, #4
 801b844:	4463      	add	r3, ip
 801b846:	603b      	str	r3, [r7, #0]
 801b848:	6823      	ldr	r3, [r4, #0]
 801b84a:	449c      	add	ip, r3
 801b84c:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 801b850:	6033      	str	r3, [r6, #0]
 801b852:	f000 fa19 	bl	801bc88 <uxr_seq_num_cmp>
 801b856:	2800      	cmp	r0, #0
 801b858:	dd01      	ble.n	801b85e <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 801b85a:	2000      	movs	r0, #0
 801b85c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b85e:	7b23      	ldrb	r3, [r4, #12]
 801b860:	6832      	ldr	r2, [r6, #0]
 801b862:	429a      	cmp	r2, r3
 801b864:	d9f9      	bls.n	801b85a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801b866:	8a61      	ldrh	r1, [r4, #18]
 801b868:	8a20      	ldrh	r0, [r4, #16]
 801b86a:	f000 fa09 	bl	801bc80 <uxr_seq_num_sub>
 801b86e:	8923      	ldrh	r3, [r4, #8]
 801b870:	4283      	cmp	r3, r0
 801b872:	d0f2      	beq.n	801b85a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801b874:	8828      	ldrh	r0, [r5, #0]
 801b876:	89e3      	ldrh	r3, [r4, #14]
 801b878:	8220      	strh	r0, [r4, #16]
 801b87a:	4298      	cmp	r0, r3
 801b87c:	d001      	beq.n	801b882 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 801b87e:	2001      	movs	r0, #1
 801b880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b882:	2101      	movs	r1, #1
 801b884:	f000 f9f8 	bl	801bc78 <uxr_seq_num_add>
 801b888:	4603      	mov	r3, r0
 801b88a:	2001      	movs	r0, #1
 801b88c:	81e3      	strh	r3, [r4, #14]
 801b88e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801b890 <uxr_update_output_stream_heartbeat_timestamp>:
 801b890:	b570      	push	{r4, r5, r6, lr}
 801b892:	8a01      	ldrh	r1, [r0, #16]
 801b894:	4604      	mov	r4, r0
 801b896:	8a40      	ldrh	r0, [r0, #18]
 801b898:	4615      	mov	r5, r2
 801b89a:	461e      	mov	r6, r3
 801b89c:	f000 f9f4 	bl	801bc88 <uxr_seq_num_cmp>
 801b8a0:	2800      	cmp	r0, #0
 801b8a2:	db07      	blt.n	801b8b4 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 801b8a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801b8a8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801b8ac:	2000      	movs	r0, #0
 801b8ae:	e9c4 2306 	strd	r2, r3, [r4, #24]
 801b8b2:	bd70      	pop	{r4, r5, r6, pc}
 801b8b4:	f894 0020 	ldrb.w	r0, [r4, #32]
 801b8b8:	b940      	cbnz	r0, 801b8cc <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 801b8ba:	2301      	movs	r3, #1
 801b8bc:	f884 3020 	strb.w	r3, [r4, #32]
 801b8c0:	3564      	adds	r5, #100	; 0x64
 801b8c2:	f146 0600 	adc.w	r6, r6, #0
 801b8c6:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801b8ca:	bd70      	pop	{r4, r5, r6, pc}
 801b8cc:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 801b8d0:	4295      	cmp	r5, r2
 801b8d2:	eb76 0303 	sbcs.w	r3, r6, r3
 801b8d6:	db04      	blt.n	801b8e2 <uxr_update_output_stream_heartbeat_timestamp+0x52>
 801b8d8:	1c43      	adds	r3, r0, #1
 801b8da:	2001      	movs	r0, #1
 801b8dc:	f884 3020 	strb.w	r3, [r4, #32]
 801b8e0:	e7ee      	b.n	801b8c0 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 801b8e2:	2000      	movs	r0, #0
 801b8e4:	e7ec      	b.n	801b8c0 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 801b8e6:	bf00      	nop

0801b8e8 <uxr_begin_output_nack_buffer_it>:
 801b8e8:	8a40      	ldrh	r0, [r0, #18]
 801b8ea:	4770      	bx	lr

0801b8ec <uxr_next_reliable_nack_buffer_to_send>:
 801b8ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b8f0:	f890 7021 	ldrb.w	r7, [r0, #33]	; 0x21
 801b8f4:	b197      	cbz	r7, 801b91c <uxr_next_reliable_nack_buffer_to_send+0x30>
 801b8f6:	4680      	mov	r8, r0
 801b8f8:	460d      	mov	r5, r1
 801b8fa:	4616      	mov	r6, r2
 801b8fc:	461c      	mov	r4, r3
 801b8fe:	8818      	ldrh	r0, [r3, #0]
 801b900:	2101      	movs	r1, #1
 801b902:	f000 f9b9 	bl	801bc78 <uxr_seq_num_add>
 801b906:	8020      	strh	r0, [r4, #0]
 801b908:	f8b8 1010 	ldrh.w	r1, [r8, #16]
 801b90c:	f000 f9bc 	bl	801bc88 <uxr_seq_num_cmp>
 801b910:	2800      	cmp	r0, #0
 801b912:	dd06      	ble.n	801b922 <uxr_next_reliable_nack_buffer_to_send+0x36>
 801b914:	2300      	movs	r3, #0
 801b916:	461f      	mov	r7, r3
 801b918:	f888 3021 	strb.w	r3, [r8, #33]	; 0x21
 801b91c:	4638      	mov	r0, r7
 801b91e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b922:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 801b926:	8820      	ldrh	r0, [r4, #0]
 801b928:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801b92c:	fbb0 f3f2 	udiv	r3, r0, r2
 801b930:	fbb1 fcf2 	udiv	ip, r1, r2
 801b934:	fb02 0313 	mls	r3, r2, r3, r0
 801b938:	b29b      	uxth	r3, r3
 801b93a:	fb03 fc0c 	mul.w	ip, r3, ip
 801b93e:	f8d8 3000 	ldr.w	r3, [r8]
 801b942:	f10c 0c04 	add.w	ip, ip, #4
 801b946:	4463      	add	r3, ip
 801b948:	602b      	str	r3, [r5, #0]
 801b94a:	f8d8 3000 	ldr.w	r3, [r8]
 801b94e:	4463      	add	r3, ip
 801b950:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801b954:	6033      	str	r3, [r6, #0]
 801b956:	f898 200c 	ldrb.w	r2, [r8, #12]
 801b95a:	429a      	cmp	r2, r3
 801b95c:	d0d0      	beq.n	801b900 <uxr_next_reliable_nack_buffer_to_send+0x14>
 801b95e:	e7dd      	b.n	801b91c <uxr_next_reliable_nack_buffer_to_send+0x30>

0801b960 <uxr_process_acknack>:
 801b960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b962:	4604      	mov	r4, r0
 801b964:	460e      	mov	r6, r1
 801b966:	4610      	mov	r0, r2
 801b968:	2101      	movs	r1, #1
 801b96a:	f000 f989 	bl	801bc80 <uxr_seq_num_sub>
 801b96e:	8a61      	ldrh	r1, [r4, #18]
 801b970:	f000 f986 	bl	801bc80 <uxr_seq_num_sub>
 801b974:	b1c8      	cbz	r0, 801b9aa <uxr_process_acknack+0x4a>
 801b976:	4605      	mov	r5, r0
 801b978:	2700      	movs	r7, #0
 801b97a:	2101      	movs	r1, #1
 801b97c:	8a60      	ldrh	r0, [r4, #18]
 801b97e:	f000 f97b 	bl	801bc78 <uxr_seq_num_add>
 801b982:	8923      	ldrh	r3, [r4, #8]
 801b984:	6862      	ldr	r2, [r4, #4]
 801b986:	3701      	adds	r7, #1
 801b988:	f894 c00c 	ldrb.w	ip, [r4, #12]
 801b98c:	6821      	ldr	r1, [r4, #0]
 801b98e:	42bd      	cmp	r5, r7
 801b990:	8260      	strh	r0, [r4, #18]
 801b992:	fbb0 fef3 	udiv	lr, r0, r3
 801b996:	fbb2 f2f3 	udiv	r2, r2, r3
 801b99a:	fb03 031e 	mls	r3, r3, lr, r0
 801b99e:	b29b      	uxth	r3, r3
 801b9a0:	fb02 f303 	mul.w	r3, r2, r3
 801b9a4:	f841 c003 	str.w	ip, [r1, r3]
 801b9a8:	d1e7      	bne.n	801b97a <uxr_process_acknack+0x1a>
 801b9aa:	3e00      	subs	r6, #0
 801b9ac:	f04f 0300 	mov.w	r3, #0
 801b9b0:	bf18      	it	ne
 801b9b2:	2601      	movne	r6, #1
 801b9b4:	f884 3020 	strb.w	r3, [r4, #32]
 801b9b8:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
 801b9bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b9be:	bf00      	nop

0801b9c0 <uxr_is_output_up_to_date>:
 801b9c0:	8a01      	ldrh	r1, [r0, #16]
 801b9c2:	8a40      	ldrh	r0, [r0, #18]
 801b9c4:	b508      	push	{r3, lr}
 801b9c6:	f000 f95f 	bl	801bc88 <uxr_seq_num_cmp>
 801b9ca:	fab0 f080 	clz	r0, r0
 801b9ce:	0940      	lsrs	r0, r0, #5
 801b9d0:	bd08      	pop	{r3, pc}
 801b9d2:	bf00      	nop

0801b9d4 <get_available_free_slots>:
 801b9d4:	8901      	ldrh	r1, [r0, #8]
 801b9d6:	b1e1      	cbz	r1, 801ba12 <get_available_free_slots+0x3e>
 801b9d8:	6843      	ldr	r3, [r0, #4]
 801b9da:	f04f 0c00 	mov.w	ip, #0
 801b9de:	b530      	push	{r4, r5, lr}
 801b9e0:	fbb3 fef1 	udiv	lr, r3, r1
 801b9e4:	6805      	ldr	r5, [r0, #0]
 801b9e6:	4662      	mov	r2, ip
 801b9e8:	7b04      	ldrb	r4, [r0, #12]
 801b9ea:	4660      	mov	r0, ip
 801b9ec:	f10c 0c01 	add.w	ip, ip, #1
 801b9f0:	fbb2 f3f1 	udiv	r3, r2, r1
 801b9f4:	fb01 2313 	mls	r3, r1, r3, r2
 801b9f8:	fa1f f28c 	uxth.w	r2, ip
 801b9fc:	b29b      	uxth	r3, r3
 801b9fe:	fb0e f303 	mul.w	r3, lr, r3
 801ba02:	58eb      	ldr	r3, [r5, r3]
 801ba04:	429c      	cmp	r4, r3
 801ba06:	d101      	bne.n	801ba0c <get_available_free_slots+0x38>
 801ba08:	3001      	adds	r0, #1
 801ba0a:	b280      	uxth	r0, r0
 801ba0c:	428a      	cmp	r2, r1
 801ba0e:	d3ed      	bcc.n	801b9ec <get_available_free_slots+0x18>
 801ba10:	bd30      	pop	{r4, r5, pc}
 801ba12:	4608      	mov	r0, r1
 801ba14:	4770      	bx	lr
 801ba16:	bf00      	nop

0801ba18 <uxr_buffer_request_data>:
 801ba18:	b530      	push	{r4, r5, lr}
 801ba1a:	b095      	sub	sp, #84	; 0x54
 801ba1c:	4604      	mov	r4, r0
 801ba1e:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801ba20:	9303      	str	r3, [sp, #12]
 801ba22:	2d00      	cmp	r5, #0
 801ba24:	f88d 301c 	strb.w	r3, [sp, #28]
 801ba28:	e9cd 2104 	strd	r2, r1, [sp, #16]
 801ba2c:	f04f 0200 	mov.w	r2, #0
 801ba30:	bf14      	ite	ne
 801ba32:	2101      	movne	r1, #1
 801ba34:	4611      	moveq	r1, r2
 801ba36:	f88d 201d 	strb.w	r2, [sp, #29]
 801ba3a:	f88d 201e 	strb.w	r2, [sp, #30]
 801ba3e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801ba42:	d021      	beq.n	801ba88 <uxr_buffer_request_data+0x70>
 801ba44:	686b      	ldr	r3, [r5, #4]
 801ba46:	2210      	movs	r2, #16
 801ba48:	6829      	ldr	r1, [r5, #0]
 801ba4a:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 801ba4e:	f8cd 1026 	str.w	r1, [sp, #38]	; 0x26
 801ba52:	2308      	movs	r3, #8
 801ba54:	2100      	movs	r1, #0
 801ba56:	4620      	mov	r0, r4
 801ba58:	e9cd 3100 	strd	r3, r1, [sp]
 801ba5c:	ab0c      	add	r3, sp, #48	; 0x30
 801ba5e:	9905      	ldr	r1, [sp, #20]
 801ba60:	f7f7 fa6a 	bl	8012f38 <uxr_prepare_stream_to_write_submessage>
 801ba64:	b918      	cbnz	r0, 801ba6e <uxr_buffer_request_data+0x56>
 801ba66:	4604      	mov	r4, r0
 801ba68:	4620      	mov	r0, r4
 801ba6a:	b015      	add	sp, #84	; 0x54
 801ba6c:	bd30      	pop	{r4, r5, pc}
 801ba6e:	9904      	ldr	r1, [sp, #16]
 801ba70:	aa06      	add	r2, sp, #24
 801ba72:	4620      	mov	r0, r4
 801ba74:	f7f7 fb9c 	bl	80131b0 <uxr_init_base_object_request>
 801ba78:	4604      	mov	r4, r0
 801ba7a:	a906      	add	r1, sp, #24
 801ba7c:	a80c      	add	r0, sp, #48	; 0x30
 801ba7e:	f7f8 fecf 	bl	8014820 <uxr_serialize_READ_DATA_Payload>
 801ba82:	4620      	mov	r0, r4
 801ba84:	b015      	add	sp, #84	; 0x54
 801ba86:	bd30      	pop	{r4, r5, pc}
 801ba88:	2208      	movs	r2, #8
 801ba8a:	e7e2      	b.n	801ba52 <uxr_buffer_request_data+0x3a>

0801ba8c <uxr_buffer_cancel_data>:
 801ba8c:	b510      	push	{r4, lr}
 801ba8e:	2300      	movs	r3, #0
 801ba90:	b094      	sub	sp, #80	; 0x50
 801ba92:	4604      	mov	r4, r0
 801ba94:	9205      	str	r2, [sp, #20]
 801ba96:	9301      	str	r3, [sp, #4]
 801ba98:	f8ad 301c 	strh.w	r3, [sp, #28]
 801ba9c:	f88d 301e 	strb.w	r3, [sp, #30]
 801baa0:	f8cd 3026 	str.w	r3, [sp, #38]	; 0x26
 801baa4:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 801baa8:	2308      	movs	r3, #8
 801baaa:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801baae:	2201      	movs	r2, #1
 801bab0:	9300      	str	r3, [sp, #0]
 801bab2:	ab0c      	add	r3, sp, #48	; 0x30
 801bab4:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 801bab8:	2210      	movs	r2, #16
 801baba:	f7f7 fa3d 	bl	8012f38 <uxr_prepare_stream_to_write_submessage>
 801babe:	b918      	cbnz	r0, 801bac8 <uxr_buffer_cancel_data+0x3c>
 801bac0:	4604      	mov	r4, r0
 801bac2:	4620      	mov	r0, r4
 801bac4:	b014      	add	sp, #80	; 0x50
 801bac6:	bd10      	pop	{r4, pc}
 801bac8:	9905      	ldr	r1, [sp, #20]
 801baca:	aa06      	add	r2, sp, #24
 801bacc:	4620      	mov	r0, r4
 801bace:	f7f7 fb6f 	bl	80131b0 <uxr_init_base_object_request>
 801bad2:	4604      	mov	r4, r0
 801bad4:	a906      	add	r1, sp, #24
 801bad6:	a80c      	add	r0, sp, #48	; 0x30
 801bad8:	f7f8 fea2 	bl	8014820 <uxr_serialize_READ_DATA_Payload>
 801badc:	4620      	mov	r0, r4
 801bade:	b014      	add	sp, #80	; 0x50
 801bae0:	bd10      	pop	{r4, pc}
 801bae2:	bf00      	nop

0801bae4 <read_submessage_format>:
 801bae4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801bae8:	b095      	sub	sp, #84	; 0x54
 801baea:	f8bd 7078 	ldrh.w	r7, [sp, #120]	; 0x78
 801baee:	b113      	cbz	r3, 801baf6 <read_submessage_format+0x12>
 801baf0:	b015      	add	sp, #84	; 0x54
 801baf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801baf6:	4606      	mov	r6, r0
 801baf8:	981c      	ldr	r0, [sp, #112]	; 0x70
 801bafa:	460c      	mov	r4, r1
 801bafc:	4615      	mov	r5, r2
 801bafe:	9004      	str	r0, [sp, #16]
 801bb00:	4699      	mov	r9, r3
 801bb02:	981d      	ldr	r0, [sp, #116]	; 0x74
 801bb04:	f89d 8076 	ldrb.w	r8, [sp, #118]	; 0x76
 801bb08:	9005      	str	r0, [sp, #20]
 801bb0a:	a80c      	add	r0, sp, #48	; 0x30
 801bb0c:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 801bb10:	1a52      	subs	r2, r2, r1
 801bb12:	f7f6 f807 	bl	8011b24 <ucdr_init_buffer>
 801bb16:	a80c      	add	r0, sp, #48	; 0x30
 801bb18:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801bb1c:	f7f5 ffd6 	bl	8011acc <ucdr_set_on_full_buffer_callback>
 801bb20:	69e2      	ldr	r2, [r4, #28]
 801bb22:	b19a      	cbz	r2, 801bb4c <read_submessage_format+0x68>
 801bb24:	f1b8 0f07 	cmp.w	r8, #7
 801bb28:	f882 9014 	strb.w	r9, [r2, #20]
 801bb2c:	d040      	beq.n	801bbb0 <read_submessage_format+0xcc>
 801bb2e:	f1b8 0f08 	cmp.w	r8, #8
 801bb32:	d02e      	beq.n	801bb92 <read_submessage_format+0xae>
 801bb34:	f1b8 0f06 	cmp.w	r8, #6
 801bb38:	d011      	beq.n	801bb5e <read_submessage_format+0x7a>
 801bb3a:	2301      	movs	r3, #1
 801bb3c:	7513      	strb	r3, [r2, #20]
 801bb3e:	4629      	mov	r1, r5
 801bb40:	4620      	mov	r0, r4
 801bb42:	f7f6 f843 	bl	8011bcc <ucdr_advance_buffer>
 801bb46:	b015      	add	sp, #84	; 0x54
 801bb48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bb4c:	f1b8 0f07 	cmp.w	r8, #7
 801bb50:	d02e      	beq.n	801bbb0 <read_submessage_format+0xcc>
 801bb52:	f1b8 0f08 	cmp.w	r8, #8
 801bb56:	d01c      	beq.n	801bb92 <read_submessage_format+0xae>
 801bb58:	f1b8 0f06 	cmp.w	r8, #6
 801bb5c:	d1ef      	bne.n	801bb3e <read_submessage_format+0x5a>
 801bb5e:	f8d6 8088 	ldr.w	r8, [r6, #136]	; 0x88
 801bb62:	f1b8 0f00 	cmp.w	r8, #0
 801bb66:	d011      	beq.n	801bb8c <read_submessage_format+0xa8>
 801bb68:	ab0c      	add	r3, sp, #48	; 0x30
 801bb6a:	9501      	str	r5, [sp, #4]
 801bb6c:	463a      	mov	r2, r7
 801bb6e:	4630      	mov	r0, r6
 801bb70:	9300      	str	r3, [sp, #0]
 801bb72:	2306      	movs	r3, #6
 801bb74:	f88d 3016 	strb.w	r3, [sp, #22]
 801bb78:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 801bb7c:	9302      	str	r3, [sp, #8]
 801bb7e:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 801bb82:	47c0      	blx	r8
 801bb84:	2301      	movs	r3, #1
 801bb86:	69e2      	ldr	r2, [r4, #28]
 801bb88:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 801bb8c:	2a00      	cmp	r2, #0
 801bb8e:	d1d4      	bne.n	801bb3a <read_submessage_format+0x56>
 801bb90:	e7d5      	b.n	801bb3e <read_submessage_format+0x5a>
 801bb92:	f8d6 30a4 	ldr.w	r3, [r6, #164]	; 0xa4
 801bb96:	2b00      	cmp	r3, #0
 801bb98:	d0f8      	beq.n	801bb8c <read_submessage_format+0xa8>
 801bb9a:	a80c      	add	r0, sp, #48	; 0x30
 801bb9c:	a906      	add	r1, sp, #24
 801bb9e:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 801bba2:	f7f8 ff09 	bl	80149b8 <uxr_deserialize_SampleIdentity>
 801bba6:	b9a0      	cbnz	r0, 801bbd2 <read_submessage_format+0xee>
 801bba8:	69e2      	ldr	r2, [r4, #28]
 801bbaa:	2a00      	cmp	r2, #0
 801bbac:	d1c5      	bne.n	801bb3a <read_submessage_format+0x56>
 801bbae:	e7c6      	b.n	801bb3e <read_submessage_format+0x5a>
 801bbb0:	f8d6 30ac 	ldr.w	r3, [r6, #172]	; 0xac
 801bbb4:	b13b      	cbz	r3, 801bbc6 <read_submessage_format+0xe2>
 801bbb6:	a906      	add	r1, sp, #24
 801bbb8:	a80c      	add	r0, sp, #48	; 0x30
 801bbba:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 801bbbe:	f7f8 fbcf 	bl	8014360 <uxr_deserialize_BaseObjectRequest>
 801bbc2:	bb60      	cbnz	r0, 801bc1e <read_submessage_format+0x13a>
 801bbc4:	69e2      	ldr	r2, [r4, #28]
 801bbc6:	68a3      	ldr	r3, [r4, #8]
 801bbc8:	442b      	add	r3, r5
 801bbca:	60a3      	str	r3, [r4, #8]
 801bbcc:	2a00      	cmp	r2, #0
 801bbce:	d1b4      	bne.n	801bb3a <read_submessage_format+0x56>
 801bbd0:	e7b5      	b.n	801bb3e <read_submessage_format+0x5a>
 801bbd2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bbd4:	a80c      	add	r0, sp, #48	; 0x30
 801bbd6:	eba8 0803 	sub.w	r8, r8, r3
 801bbda:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 801bbde:	44a8      	add	r8, r5
 801bbe0:	1a52      	subs	r2, r2, r1
 801bbe2:	f7f5 ff9f 	bl	8011b24 <ucdr_init_buffer>
 801bbe6:	a80c      	add	r0, sp, #48	; 0x30
 801bbe8:	fa1f f888 	uxth.w	r8, r8
 801bbec:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801bbf0:	f7f5 ff6c 	bl	8011acc <ucdr_set_on_full_buffer_callback>
 801bbf4:	ab0c      	add	r3, sp, #48	; 0x30
 801bbf6:	2108      	movs	r1, #8
 801bbf8:	f8cd 8004 	str.w	r8, [sp, #4]
 801bbfc:	9300      	str	r3, [sp, #0]
 801bbfe:	463a      	mov	r2, r7
 801bc00:	f88d 1016 	strb.w	r1, [sp, #22]
 801bc04:	ab06      	add	r3, sp, #24
 801bc06:	f8d6 10a8 	ldr.w	r1, [r6, #168]	; 0xa8
 801bc0a:	4630      	mov	r0, r6
 801bc0c:	9102      	str	r1, [sp, #8]
 801bc0e:	9905      	ldr	r1, [sp, #20]
 801bc10:	f8d6 70a4 	ldr.w	r7, [r6, #164]	; 0xa4
 801bc14:	47b8      	blx	r7
 801bc16:	2301      	movs	r3, #1
 801bc18:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 801bc1c:	e7c4      	b.n	801bba8 <read_submessage_format+0xc4>
 801bc1e:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 801bc22:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bc24:	a80c      	add	r0, sp, #48	; 0x30
 801bc26:	1a52      	subs	r2, r2, r1
 801bc28:	eba8 0803 	sub.w	r8, r8, r3
 801bc2c:	f7f5 ff7a 	bl	8011b24 <ucdr_init_buffer>
 801bc30:	a80c      	add	r0, sp, #48	; 0x30
 801bc32:	44a8      	add	r8, r5
 801bc34:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801bc38:	f7f5 ff48 	bl	8011acc <ucdr_set_on_full_buffer_callback>
 801bc3c:	ab0c      	add	r3, sp, #48	; 0x30
 801bc3e:	f89d 1018 	ldrb.w	r1, [sp, #24]
 801bc42:	fa1f f888 	uxth.w	r8, r8
 801bc46:	9300      	str	r3, [sp, #0]
 801bc48:	463a      	mov	r2, r7
 801bc4a:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801bc4e:	4630      	mov	r0, r6
 801bc50:	f8cd 8004 	str.w	r8, [sp, #4]
 801bc54:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 801bc58:	2107      	movs	r1, #7
 801bc5a:	f88d 1016 	strb.w	r1, [sp, #22]
 801bc5e:	b29b      	uxth	r3, r3
 801bc60:	f8d6 10b0 	ldr.w	r1, [r6, #176]	; 0xb0
 801bc64:	9102      	str	r1, [sp, #8]
 801bc66:	9905      	ldr	r1, [sp, #20]
 801bc68:	f8d6 70ac 	ldr.w	r7, [r6, #172]	; 0xac
 801bc6c:	47b8      	blx	r7
 801bc6e:	2301      	movs	r3, #1
 801bc70:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 801bc74:	e7a6      	b.n	801bbc4 <read_submessage_format+0xe0>
 801bc76:	bf00      	nop

0801bc78 <uxr_seq_num_add>:
 801bc78:	4408      	add	r0, r1
 801bc7a:	b280      	uxth	r0, r0
 801bc7c:	4770      	bx	lr
 801bc7e:	bf00      	nop

0801bc80 <uxr_seq_num_sub>:
 801bc80:	1a40      	subs	r0, r0, r1
 801bc82:	b280      	uxth	r0, r0
 801bc84:	4770      	bx	lr
 801bc86:	bf00      	nop

0801bc88 <uxr_seq_num_cmp>:
 801bc88:	4288      	cmp	r0, r1
 801bc8a:	d011      	beq.n	801bcb0 <uxr_seq_num_cmp+0x28>
 801bc8c:	d309      	bcc.n	801bca2 <uxr_seq_num_cmp+0x1a>
 801bc8e:	4288      	cmp	r0, r1
 801bc90:	d910      	bls.n	801bcb4 <uxr_seq_num_cmp+0x2c>
 801bc92:	1a40      	subs	r0, r0, r1
 801bc94:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 801bc98:	bfd4      	ite	le
 801bc9a:	2001      	movle	r0, #1
 801bc9c:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
 801bca0:	4770      	bx	lr
 801bca2:	1a0b      	subs	r3, r1, r0
 801bca4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801bca8:	daf1      	bge.n	801bc8e <uxr_seq_num_cmp+0x6>
 801bcaa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801bcae:	4770      	bx	lr
 801bcb0:	2000      	movs	r0, #0
 801bcb2:	4770      	bx	lr
 801bcb4:	2001      	movs	r0, #1
 801bcb6:	4770      	bx	lr

0801bcb8 <uxr_init_framing_io>:
 801bcb8:	2300      	movs	r3, #0
 801bcba:	7041      	strb	r1, [r0, #1]
 801bcbc:	7003      	strb	r3, [r0, #0]
 801bcbe:	8583      	strh	r3, [r0, #44]	; 0x2c
 801bcc0:	4770      	bx	lr
 801bcc2:	bf00      	nop

0801bcc4 <uxr_write_framed_msg>:
 801bcc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bcc8:	4617      	mov	r7, r2
 801bcca:	7842      	ldrb	r2, [r0, #1]
 801bccc:	460e      	mov	r6, r1
 801bcce:	b083      	sub	sp, #12
 801bcd0:	f1a2 017d 	sub.w	r1, r2, #125	; 0x7d
 801bcd4:	469b      	mov	fp, r3
 801bcd6:	237e      	movs	r3, #126	; 0x7e
 801bcd8:	4604      	mov	r4, r0
 801bcda:	2901      	cmp	r1, #1
 801bcdc:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 801bce0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 801bce4:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 801bce8:	f240 8115 	bls.w	801bf16 <uxr_write_framed_msg+0x252>
 801bcec:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 801bcf0:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
 801bcf4:	2202      	movs	r2, #2
 801bcf6:	2901      	cmp	r1, #1
 801bcf8:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801bcfc:	d952      	bls.n	801bda4 <uxr_write_framed_msg+0xe0>
 801bcfe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bd00:	2103      	movs	r1, #3
 801bd02:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 801bd06:	b2dd      	uxtb	r5, r3
 801bd08:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 801bd0c:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 801bd10:	2a01      	cmp	r2, #1
 801bd12:	d95c      	bls.n	801bdce <uxr_write_framed_msg+0x10a>
 801bd14:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bd16:	1862      	adds	r2, r4, r1
 801bd18:	3101      	adds	r1, #1
 801bd1a:	f3c3 2007 	ubfx	r0, r3, #8, #8
 801bd1e:	f882 5038 	strb.w	r5, [r2, #56]	; 0x38
 801bd22:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 801bd26:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 801bd2a:	2a01      	cmp	r2, #1
 801bd2c:	d961      	bls.n	801bdf2 <uxr_write_framed_msg+0x12e>
 801bd2e:	1c4a      	adds	r2, r1, #1
 801bd30:	4421      	add	r1, r4
 801bd32:	b2d2      	uxtb	r2, r2
 801bd34:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
 801bd38:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801bd3c:	2b00      	cmp	r3, #0
 801bd3e:	d06a      	beq.n	801be16 <uxr_write_framed_msg+0x152>
 801bd40:	f04f 0800 	mov.w	r8, #0
 801bd44:	46c1      	mov	r9, r8
 801bd46:	e016      	b.n	801bd76 <uxr_write_framed_msg+0xb2>
 801bd48:	2a29      	cmp	r2, #41	; 0x29
 801bd4a:	d868      	bhi.n	801be1e <uxr_write_framed_msg+0x15a>
 801bd4c:	18a0      	adds	r0, r4, r2
 801bd4e:	3201      	adds	r2, #1
 801bd50:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 801bd54:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801bd58:	ea88 0101 	eor.w	r1, r8, r1
 801bd5c:	4b7d      	ldr	r3, [pc, #500]	; (801bf54 <uxr_write_framed_msg+0x290>)
 801bd5e:	f109 0901 	add.w	r9, r9, #1
 801bd62:	b2c9      	uxtb	r1, r1
 801bd64:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 801bd68:	ea82 2818 	eor.w	r8, r2, r8, lsr #8
 801bd6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bd6e:	454b      	cmp	r3, r9
 801bd70:	d969      	bls.n	801be46 <uxr_write_framed_msg+0x182>
 801bd72:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801bd76:	f81b 1009 	ldrb.w	r1, [fp, r9]
 801bd7a:	f1a1 007d 	sub.w	r0, r1, #125	; 0x7d
 801bd7e:	2801      	cmp	r0, #1
 801bd80:	d8e2      	bhi.n	801bd48 <uxr_write_framed_msg+0x84>
 801bd82:	1c50      	adds	r0, r2, #1
 801bd84:	b2c0      	uxtb	r0, r0
 801bd86:	2829      	cmp	r0, #41	; 0x29
 801bd88:	d849      	bhi.n	801be1e <uxr_write_framed_msg+0x15a>
 801bd8a:	18a0      	adds	r0, r4, r2
 801bd8c:	f04f 037d 	mov.w	r3, #125	; 0x7d
 801bd90:	3202      	adds	r2, #2
 801bd92:	f081 0520 	eor.w	r5, r1, #32
 801bd96:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 801bd9a:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
 801bd9e:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801bda2:	e7d9      	b.n	801bd58 <uxr_write_framed_msg+0x94>
 801bda4:	2104      	movs	r1, #4
 801bda6:	f04f 0c03 	mov.w	ip, #3
 801bdaa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bdac:	4422      	add	r2, r4
 801bdae:	f04f 0e7d 	mov.w	lr, #125	; 0x7d
 801bdb2:	44a4      	add	ip, r4
 801bdb4:	b2dd      	uxtb	r5, r3
 801bdb6:	f080 0020 	eor.w	r0, r0, #32
 801bdba:	f882 e038 	strb.w	lr, [r2, #56]	; 0x38
 801bdbe:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 801bdc2:	f88c 0038 	strb.w	r0, [ip, #56]	; 0x38
 801bdc6:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 801bdca:	2a01      	cmp	r2, #1
 801bdcc:	d8a2      	bhi.n	801bd14 <uxr_write_framed_msg+0x50>
 801bdce:	1862      	adds	r2, r4, r1
 801bdd0:	207d      	movs	r0, #125	; 0x7d
 801bdd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bdd4:	f085 0520 	eor.w	r5, r5, #32
 801bdd8:	f882 0038 	strb.w	r0, [r2, #56]	; 0x38
 801bddc:	3102      	adds	r1, #2
 801bdde:	f3c3 2007 	ubfx	r0, r3, #8, #8
 801bde2:	f882 5039 	strb.w	r5, [r2, #57]	; 0x39
 801bde6:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 801bdea:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 801bdee:	2a01      	cmp	r2, #1
 801bdf0:	d89d      	bhi.n	801bd2e <uxr_write_framed_msg+0x6a>
 801bdf2:	1c4d      	adds	r5, r1, #1
 801bdf4:	1c8a      	adds	r2, r1, #2
 801bdf6:	f080 0020 	eor.w	r0, r0, #32
 801bdfa:	4421      	add	r1, r4
 801bdfc:	fa54 f585 	uxtab	r5, r4, r5
 801be00:	b2d2      	uxtb	r2, r2
 801be02:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 801be06:	f881 c038 	strb.w	ip, [r1, #56]	; 0x38
 801be0a:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
 801be0e:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801be12:	2b00      	cmp	r3, #0
 801be14:	d194      	bne.n	801bd40 <uxr_write_framed_msg+0x7c>
 801be16:	4619      	mov	r1, r3
 801be18:	f8ad 3004 	strh.w	r3, [sp, #4]
 801be1c:	e019      	b.n	801be52 <uxr_write_framed_msg+0x18e>
 801be1e:	2500      	movs	r5, #0
 801be20:	e000      	b.n	801be24 <uxr_write_framed_msg+0x160>
 801be22:	b160      	cbz	r0, 801be3e <uxr_write_framed_msg+0x17a>
 801be24:	f105 0138 	add.w	r1, r5, #56	; 0x38
 801be28:	1b52      	subs	r2, r2, r5
 801be2a:	4653      	mov	r3, sl
 801be2c:	4638      	mov	r0, r7
 801be2e:	4421      	add	r1, r4
 801be30:	47b0      	blx	r6
 801be32:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801be36:	4405      	add	r5, r0
 801be38:	4295      	cmp	r5, r2
 801be3a:	d3f2      	bcc.n	801be22 <uxr_write_framed_msg+0x15e>
 801be3c:	d066      	beq.n	801bf0c <uxr_write_framed_msg+0x248>
 801be3e:	2000      	movs	r0, #0
 801be40:	b003      	add	sp, #12
 801be42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801be46:	fa5f f188 	uxtb.w	r1, r8
 801be4a:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801be4e:	f8ad 8004 	strh.w	r8, [sp, #4]
 801be52:	f04f 0900 	mov.w	r9, #0
 801be56:	f04f 0b7d 	mov.w	fp, #125	; 0x7d
 801be5a:	46c8      	mov	r8, r9
 801be5c:	e013      	b.n	801be86 <uxr_write_framed_msg+0x1c2>
 801be5e:	2a29      	cmp	r2, #41	; 0x29
 801be60:	d824      	bhi.n	801beac <uxr_write_framed_msg+0x1e8>
 801be62:	18a3      	adds	r3, r4, r2
 801be64:	3201      	adds	r2, #1
 801be66:	f883 1038 	strb.w	r1, [r3, #56]	; 0x38
 801be6a:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801be6e:	f109 0901 	add.w	r9, r9, #1
 801be72:	f1b9 0f02 	cmp.w	r9, #2
 801be76:	d02d      	beq.n	801bed4 <uxr_write_framed_msg+0x210>
 801be78:	f109 0308 	add.w	r3, r9, #8
 801be7c:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801be80:	446b      	add	r3, sp
 801be82:	f813 1c04 	ldrb.w	r1, [r3, #-4]
 801be86:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 801be8a:	2b01      	cmp	r3, #1
 801be8c:	d8e7      	bhi.n	801be5e <uxr_write_framed_msg+0x19a>
 801be8e:	1c53      	adds	r3, r2, #1
 801be90:	b2db      	uxtb	r3, r3
 801be92:	2b29      	cmp	r3, #41	; 0x29
 801be94:	d80a      	bhi.n	801beac <uxr_write_framed_msg+0x1e8>
 801be96:	18a3      	adds	r3, r4, r2
 801be98:	f081 0120 	eor.w	r1, r1, #32
 801be9c:	3202      	adds	r2, #2
 801be9e:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
 801bea2:	f883 b038 	strb.w	fp, [r3, #56]	; 0x38
 801bea6:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801beaa:	e7e0      	b.n	801be6e <uxr_write_framed_msg+0x1aa>
 801beac:	2500      	movs	r5, #0
 801beae:	e001      	b.n	801beb4 <uxr_write_framed_msg+0x1f0>
 801beb0:	2800      	cmp	r0, #0
 801beb2:	d0c4      	beq.n	801be3e <uxr_write_framed_msg+0x17a>
 801beb4:	f105 0138 	add.w	r1, r5, #56	; 0x38
 801beb8:	1b52      	subs	r2, r2, r5
 801beba:	4653      	mov	r3, sl
 801bebc:	4638      	mov	r0, r7
 801bebe:	4421      	add	r1, r4
 801bec0:	47b0      	blx	r6
 801bec2:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801bec6:	4405      	add	r5, r0
 801bec8:	4295      	cmp	r5, r2
 801beca:	d3f1      	bcc.n	801beb0 <uxr_write_framed_msg+0x1ec>
 801becc:	d1b7      	bne.n	801be3e <uxr_write_framed_msg+0x17a>
 801bece:	f884 8062 	strb.w	r8, [r4, #98]	; 0x62
 801bed2:	e7d1      	b.n	801be78 <uxr_write_framed_msg+0x1b4>
 801bed4:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801bed8:	b19a      	cbz	r2, 801bf02 <uxr_write_framed_msg+0x23e>
 801beda:	2500      	movs	r5, #0
 801bedc:	e001      	b.n	801bee2 <uxr_write_framed_msg+0x21e>
 801bede:	2800      	cmp	r0, #0
 801bee0:	d0ad      	beq.n	801be3e <uxr_write_framed_msg+0x17a>
 801bee2:	f105 0138 	add.w	r1, r5, #56	; 0x38
 801bee6:	1b52      	subs	r2, r2, r5
 801bee8:	4653      	mov	r3, sl
 801beea:	4638      	mov	r0, r7
 801beec:	4421      	add	r1, r4
 801beee:	47b0      	blx	r6
 801bef0:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801bef4:	4405      	add	r5, r0
 801bef6:	4295      	cmp	r5, r2
 801bef8:	d3f1      	bcc.n	801bede <uxr_write_framed_msg+0x21a>
 801befa:	d1a0      	bne.n	801be3e <uxr_write_framed_msg+0x17a>
 801befc:	2300      	movs	r3, #0
 801befe:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 801bf02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bf04:	b298      	uxth	r0, r3
 801bf06:	b003      	add	sp, #12
 801bf08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bf0c:	f04f 0300 	mov.w	r3, #0
 801bf10:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 801bf14:	e72a      	b.n	801bd6c <uxr_write_framed_msg+0xa8>
 801bf16:	217d      	movs	r1, #125	; 0x7d
 801bf18:	f082 0220 	eor.w	r2, r2, #32
 801bf1c:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
 801bf20:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 801bf24:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
 801bf28:	2203      	movs	r2, #3
 801bf2a:	2901      	cmp	r1, #1
 801bf2c:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801bf30:	d803      	bhi.n	801bf3a <uxr_write_framed_msg+0x276>
 801bf32:	2105      	movs	r1, #5
 801bf34:	f04f 0c04 	mov.w	ip, #4
 801bf38:	e737      	b.n	801bdaa <uxr_write_framed_msg+0xe6>
 801bf3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bf3c:	2104      	movs	r1, #4
 801bf3e:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
 801bf42:	b2dd      	uxtb	r5, r3
 801bf44:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 801bf48:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 801bf4c:	2a01      	cmp	r2, #1
 801bf4e:	f63f aee1 	bhi.w	801bd14 <uxr_write_framed_msg+0x50>
 801bf52:	e73c      	b.n	801bdce <uxr_write_framed_msg+0x10a>
 801bf54:	080207f4 	.word	0x080207f4

0801bf58 <uxr_framing_read_transport>:
 801bf58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bf5c:	4604      	mov	r4, r0
 801bf5e:	b085      	sub	sp, #20
 801bf60:	4692      	mov	sl, r2
 801bf62:	4689      	mov	r9, r1
 801bf64:	461d      	mov	r5, r3
 801bf66:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801bf68:	f7f7 fad8 	bl	801351c <uxr_millis>
 801bf6c:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 801bf70:	f894 702d 	ldrb.w	r7, [r4, #45]	; 0x2d
 801bf74:	4680      	mov	r8, r0
 801bf76:	42ba      	cmp	r2, r7
 801bf78:	d05f      	beq.n	801c03a <uxr_framing_read_transport+0xe2>
 801bf7a:	d817      	bhi.n	801bfac <uxr_framing_read_transport+0x54>
 801bf7c:	3f01      	subs	r7, #1
 801bf7e:	1aba      	subs	r2, r7, r2
 801bf80:	2700      	movs	r7, #0
 801bf82:	b2d2      	uxtb	r2, r2
 801bf84:	42b2      	cmp	r2, r6
 801bf86:	d81a      	bhi.n	801bfbe <uxr_framing_read_transport+0x66>
 801bf88:	19d3      	adds	r3, r2, r7
 801bf8a:	42b3      	cmp	r3, r6
 801bf8c:	d852      	bhi.n	801c034 <uxr_framing_read_transport+0xdc>
 801bf8e:	b9d2      	cbnz	r2, 801bfc6 <uxr_framing_read_transport+0x6e>
 801bf90:	2600      	movs	r6, #0
 801bf92:	f7f7 fac3 	bl	801351c <uxr_millis>
 801bf96:	682b      	ldr	r3, [r5, #0]
 801bf98:	eba0 0008 	sub.w	r0, r0, r8
 801bf9c:	1a1b      	subs	r3, r3, r0
 801bf9e:	4630      	mov	r0, r6
 801bfa0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bfa4:	602b      	str	r3, [r5, #0]
 801bfa6:	b005      	add	sp, #20
 801bfa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bfac:	2f00      	cmp	r7, #0
 801bfae:	d060      	beq.n	801c072 <uxr_framing_read_transport+0x11a>
 801bfb0:	f1c2 022a 	rsb	r2, r2, #42	; 0x2a
 801bfb4:	3f01      	subs	r7, #1
 801bfb6:	b2d2      	uxtb	r2, r2
 801bfb8:	b2ff      	uxtb	r7, r7
 801bfba:	42b2      	cmp	r2, r6
 801bfbc:	d9e4      	bls.n	801bf88 <uxr_framing_read_transport+0x30>
 801bfbe:	b2f2      	uxtb	r2, r6
 801bfc0:	2700      	movs	r7, #0
 801bfc2:	2a00      	cmp	r2, #0
 801bfc4:	d0e4      	beq.n	801bf90 <uxr_framing_read_transport+0x38>
 801bfc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bfc8:	4650      	mov	r0, sl
 801bfca:	9203      	str	r2, [sp, #12]
 801bfcc:	9300      	str	r3, [sp, #0]
 801bfce:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 801bfd2:	682b      	ldr	r3, [r5, #0]
 801bfd4:	3102      	adds	r1, #2
 801bfd6:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 801c07c <uxr_framing_read_transport+0x124>
 801bfda:	4421      	add	r1, r4
 801bfdc:	47c8      	blx	r9
 801bfde:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801bfe2:	4606      	mov	r6, r0
 801bfe4:	4403      	add	r3, r0
 801bfe6:	0859      	lsrs	r1, r3, #1
 801bfe8:	fbab 2101 	umull	r2, r1, fp, r1
 801bfec:	222a      	movs	r2, #42	; 0x2a
 801bfee:	0889      	lsrs	r1, r1, #2
 801bff0:	fb02 3111 	mls	r1, r2, r1, r3
 801bff4:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
 801bff8:	2800      	cmp	r0, #0
 801bffa:	d0c9      	beq.n	801bf90 <uxr_framing_read_transport+0x38>
 801bffc:	9a03      	ldr	r2, [sp, #12]
 801bffe:	4290      	cmp	r0, r2
 801c000:	d1c7      	bne.n	801bf92 <uxr_framing_read_transport+0x3a>
 801c002:	2f00      	cmp	r7, #0
 801c004:	d0c5      	beq.n	801bf92 <uxr_framing_read_transport+0x3a>
 801c006:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c008:	3102      	adds	r1, #2
 801c00a:	463a      	mov	r2, r7
 801c00c:	4650      	mov	r0, sl
 801c00e:	4421      	add	r1, r4
 801c010:	9300      	str	r3, [sp, #0]
 801c012:	2300      	movs	r3, #0
 801c014:	47c8      	blx	r9
 801c016:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 801c01a:	4406      	add	r6, r0
 801c01c:	1813      	adds	r3, r2, r0
 801c01e:	085a      	lsrs	r2, r3, #1
 801c020:	fbab 1b02 	umull	r1, fp, fp, r2
 801c024:	222a      	movs	r2, #42	; 0x2a
 801c026:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
 801c02a:	fb02 331b 	mls	r3, r2, fp, r3
 801c02e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 801c032:	e7ae      	b.n	801bf92 <uxr_framing_read_transport+0x3a>
 801c034:	1ab6      	subs	r6, r6, r2
 801c036:	b2f7      	uxtb	r7, r6
 801c038:	e7a9      	b.n	801bf8e <uxr_framing_read_transport+0x36>
 801c03a:	2300      	movs	r3, #0
 801c03c:	2e28      	cmp	r6, #40	; 0x28
 801c03e:	85a3      	strh	r3, [r4, #44]	; 0x2c
 801c040:	d9bd      	bls.n	801bfbe <uxr_framing_read_transport+0x66>
 801c042:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c044:	2229      	movs	r2, #41	; 0x29
 801c046:	1ca1      	adds	r1, r4, #2
 801c048:	4650      	mov	r0, sl
 801c04a:	9300      	str	r3, [sp, #0]
 801c04c:	682b      	ldr	r3, [r5, #0]
 801c04e:	47c8      	blx	r9
 801c050:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801c054:	4606      	mov	r6, r0
 801c056:	212a      	movs	r1, #42	; 0x2a
 801c058:	4403      	add	r3, r0
 801c05a:	4808      	ldr	r0, [pc, #32]	; (801c07c <uxr_framing_read_transport+0x124>)
 801c05c:	085a      	lsrs	r2, r3, #1
 801c05e:	fba0 0202 	umull	r0, r2, r0, r2
 801c062:	0892      	lsrs	r2, r2, #2
 801c064:	fb01 3312 	mls	r3, r1, r2, r3
 801c068:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 801c06c:	2e00      	cmp	r6, #0
 801c06e:	d08f      	beq.n	801bf90 <uxr_framing_read_transport+0x38>
 801c070:	e78f      	b.n	801bf92 <uxr_framing_read_transport+0x3a>
 801c072:	f1c2 0229 	rsb	r2, r2, #41	; 0x29
 801c076:	b2d2      	uxtb	r2, r2
 801c078:	e784      	b.n	801bf84 <uxr_framing_read_transport+0x2c>
 801c07a:	bf00      	nop
 801c07c:	30c30c31 	.word	0x30c30c31

0801c080 <uxr_read_framed_msg>:
 801c080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c084:	461e      	mov	r6, r3
 801c086:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 801c08a:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 801c08e:	b083      	sub	sp, #12
 801c090:	4604      	mov	r4, r0
 801c092:	4688      	mov	r8, r1
 801c094:	429d      	cmp	r5, r3
 801c096:	4691      	mov	r9, r2
 801c098:	f000 818c 	beq.w	801c3b4 <uxr_read_framed_msg+0x334>
 801c09c:	7823      	ldrb	r3, [r4, #0]
 801c09e:	4dc3      	ldr	r5, [pc, #780]	; (801c3ac <uxr_read_framed_msg+0x32c>)
 801c0a0:	4fc3      	ldr	r7, [pc, #780]	; (801c3b0 <uxr_read_framed_msg+0x330>)
 801c0a2:	2b07      	cmp	r3, #7
 801c0a4:	d8fd      	bhi.n	801c0a2 <uxr_read_framed_msg+0x22>
 801c0a6:	e8df f013 	tbh	[pc, r3, lsl #1]
 801c0aa:	011c      	.short	0x011c
 801c0ac:	00d900fb 	.word	0x00d900fb
 801c0b0:	008f00ba 	.word	0x008f00ba
 801c0b4:	00320051 	.word	0x00320051
 801c0b8:	0008      	.short	0x0008
 801c0ba:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 801c0be:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801c0c2:	4299      	cmp	r1, r3
 801c0c4:	f000 814d 	beq.w	801c362 <uxr_read_framed_msg+0x2e2>
 801c0c8:	18e2      	adds	r2, r4, r3
 801c0ca:	7892      	ldrb	r2, [r2, #2]
 801c0cc:	2a7d      	cmp	r2, #125	; 0x7d
 801c0ce:	f000 81b8 	beq.w	801c442 <uxr_read_framed_msg+0x3c2>
 801c0d2:	3301      	adds	r3, #1
 801c0d4:	212a      	movs	r1, #42	; 0x2a
 801c0d6:	2a7e      	cmp	r2, #126	; 0x7e
 801c0d8:	ea4f 0053 	mov.w	r0, r3, lsr #1
 801c0dc:	fba5 c000 	umull	ip, r0, r5, r0
 801c0e0:	ea4f 0090 	mov.w	r0, r0, lsr #2
 801c0e4:	fb01 3310 	mls	r3, r1, r0, r3
 801c0e8:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801c0ec:	f000 8257 	beq.w	801c59e <uxr_read_framed_msg+0x51e>
 801c0f0:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801c0f2:	2000      	movs	r0, #0
 801c0f4:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 801c0f6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801c0fa:	7020      	strb	r0, [r4, #0]
 801c0fc:	b29b      	uxth	r3, r3
 801c0fe:	4299      	cmp	r1, r3
 801c100:	86a3      	strh	r3, [r4, #52]	; 0x34
 801c102:	f000 8178 	beq.w	801c3f6 <uxr_read_framed_msg+0x376>
 801c106:	2000      	movs	r0, #0
 801c108:	b003      	add	sp, #12
 801c10a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c10e:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 801c112:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801c116:	4298      	cmp	r0, r3
 801c118:	f000 8132 	beq.w	801c380 <uxr_read_framed_msg+0x300>
 801c11c:	18e2      	adds	r2, r4, r3
 801c11e:	7891      	ldrb	r1, [r2, #2]
 801c120:	297d      	cmp	r1, #125	; 0x7d
 801c122:	f000 8170 	beq.w	801c406 <uxr_read_framed_msg+0x386>
 801c126:	3301      	adds	r3, #1
 801c128:	202a      	movs	r0, #42	; 0x2a
 801c12a:	297e      	cmp	r1, #126	; 0x7e
 801c12c:	ea4f 0253 	mov.w	r2, r3, lsr #1
 801c130:	fba5 c202 	umull	ip, r2, r5, r2
 801c134:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801c138:	fb00 3312 	mls	r3, r0, r2, r3
 801c13c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801c140:	f000 821d 	beq.w	801c57e <uxr_read_framed_msg+0x4fe>
 801c144:	2307      	movs	r3, #7
 801c146:	86a1      	strh	r1, [r4, #52]	; 0x34
 801c148:	7023      	strb	r3, [r4, #0]
 801c14a:	e7aa      	b.n	801c0a2 <uxr_read_framed_msg+0x22>
 801c14c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 801c14e:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 801c152:	459e      	cmp	lr, r3
 801c154:	d827      	bhi.n	801c1a6 <uxr_read_framed_msg+0x126>
 801c156:	e032      	b.n	801c1be <uxr_read_framed_msg+0x13e>
 801c158:	fba5 b101 	umull	fp, r1, r5, r1
 801c15c:	f89c c002 	ldrb.w	ip, [ip, #2]
 801c160:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
 801c164:	0889      	lsrs	r1, r1, #2
 801c166:	f1bc 0f7d 	cmp.w	ip, #125	; 0x7d
 801c16a:	fb0b 0111 	mls	r1, fp, r1, r0
 801c16e:	f000 80d4 	beq.w	801c31a <uxr_read_framed_msg+0x29a>
 801c172:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 801c176:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
 801c17a:	f000 80cb 	beq.w	801c314 <uxr_read_framed_msg+0x294>
 801c17e:	f806 c003 	strb.w	ip, [r6, r3]
 801c182:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 801c184:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 801c186:	ea80 010c 	eor.w	r1, r0, ip
 801c18a:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 801c18e:	3301      	adds	r3, #1
 801c190:	b2c9      	uxtb	r1, r1
 801c192:	b29b      	uxth	r3, r3
 801c194:	f837 2011 	ldrh.w	r2, [r7, r1, lsl #1]
 801c198:	4573      	cmp	r3, lr
 801c19a:	8663      	strh	r3, [r4, #50]	; 0x32
 801c19c:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 801c1a0:	86e2      	strh	r2, [r4, #54]	; 0x36
 801c1a2:	f080 811d 	bcs.w	801c3e0 <uxr_read_framed_msg+0x360>
 801c1a6:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 801c1aa:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
 801c1ae:	1c50      	adds	r0, r2, #1
 801c1b0:	eb04 0c02 	add.w	ip, r4, r2
 801c1b4:	4592      	cmp	sl, r2
 801c1b6:	ea4f 0150 	mov.w	r1, r0, lsr #1
 801c1ba:	d1cd      	bne.n	801c158 <uxr_read_framed_msg+0xd8>
 801c1bc:	459e      	cmp	lr, r3
 801c1be:	f040 8114 	bne.w	801c3ea <uxr_read_framed_msg+0x36a>
 801c1c2:	2306      	movs	r3, #6
 801c1c4:	7023      	strb	r3, [r4, #0]
 801c1c6:	e76c      	b.n	801c0a2 <uxr_read_framed_msg+0x22>
 801c1c8:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 801c1cc:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801c1d0:	4298      	cmp	r0, r3
 801c1d2:	f000 80c6 	beq.w	801c362 <uxr_read_framed_msg+0x2e2>
 801c1d6:	18e2      	adds	r2, r4, r3
 801c1d8:	7891      	ldrb	r1, [r2, #2]
 801c1da:	297d      	cmp	r1, #125	; 0x7d
 801c1dc:	f000 8193 	beq.w	801c506 <uxr_read_framed_msg+0x486>
 801c1e0:	3301      	adds	r3, #1
 801c1e2:	202a      	movs	r0, #42	; 0x2a
 801c1e4:	297e      	cmp	r1, #126	; 0x7e
 801c1e6:	ea4f 0253 	mov.w	r2, r3, lsr #1
 801c1ea:	fba5 c202 	umull	ip, r2, r5, r2
 801c1ee:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801c1f2:	fb00 3312 	mls	r3, r0, r2, r3
 801c1f6:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801c1fa:	f000 81d0 	beq.w	801c59e <uxr_read_framed_msg+0x51e>
 801c1fe:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801c200:	2000      	movs	r0, #0
 801c202:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 801c206:	990c      	ldr	r1, [sp, #48]	; 0x30
 801c208:	8660      	strh	r0, [r4, #50]	; 0x32
 801c20a:	b29b      	uxth	r3, r3
 801c20c:	86e0      	strh	r0, [r4, #54]	; 0x36
 801c20e:	428b      	cmp	r3, r1
 801c210:	8623      	strh	r3, [r4, #48]	; 0x30
 801c212:	f240 80e2 	bls.w	801c3da <uxr_read_framed_msg+0x35a>
 801c216:	7020      	strb	r0, [r4, #0]
 801c218:	b003      	add	sp, #12
 801c21a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c21e:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 801c222:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801c226:	4298      	cmp	r0, r3
 801c228:	f000 80aa 	beq.w	801c380 <uxr_read_framed_msg+0x300>
 801c22c:	18e2      	adds	r2, r4, r3
 801c22e:	7891      	ldrb	r1, [r2, #2]
 801c230:	297d      	cmp	r1, #125	; 0x7d
 801c232:	f000 8186 	beq.w	801c542 <uxr_read_framed_msg+0x4c2>
 801c236:	3301      	adds	r3, #1
 801c238:	202a      	movs	r0, #42	; 0x2a
 801c23a:	297e      	cmp	r1, #126	; 0x7e
 801c23c:	ea4f 0253 	mov.w	r2, r3, lsr #1
 801c240:	fba5 c202 	umull	ip, r2, r5, r2
 801c244:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801c248:	fb00 3312 	mls	r3, r0, r2, r3
 801c24c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801c250:	f000 8195 	beq.w	801c57e <uxr_read_framed_msg+0x4fe>
 801c254:	2304      	movs	r3, #4
 801c256:	8621      	strh	r1, [r4, #48]	; 0x30
 801c258:	7023      	strb	r3, [r4, #0]
 801c25a:	e722      	b.n	801c0a2 <uxr_read_framed_msg+0x22>
 801c25c:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 801c260:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 801c264:	4290      	cmp	r0, r2
 801c266:	f000 80b4 	beq.w	801c3d2 <uxr_read_framed_msg+0x352>
 801c26a:	18a3      	adds	r3, r4, r2
 801c26c:	7899      	ldrb	r1, [r3, #2]
 801c26e:	297d      	cmp	r1, #125	; 0x7d
 801c270:	f000 8107 	beq.w	801c482 <uxr_read_framed_msg+0x402>
 801c274:	3201      	adds	r2, #1
 801c276:	232a      	movs	r3, #42	; 0x2a
 801c278:	297e      	cmp	r1, #126	; 0x7e
 801c27a:	ea4f 0052 	mov.w	r0, r2, lsr #1
 801c27e:	fba5 c000 	umull	ip, r0, r5, r0
 801c282:	ea4f 0090 	mov.w	r0, r0, lsr #2
 801c286:	fb03 2210 	mls	r2, r3, r0, r2
 801c28a:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 801c28e:	f000 818a 	beq.w	801c5a6 <uxr_read_framed_msg+0x526>
 801c292:	7863      	ldrb	r3, [r4, #1]
 801c294:	428b      	cmp	r3, r1
 801c296:	bf0c      	ite	eq
 801c298:	2303      	moveq	r3, #3
 801c29a:	2300      	movne	r3, #0
 801c29c:	7023      	strb	r3, [r4, #0]
 801c29e:	e700      	b.n	801c0a2 <uxr_read_framed_msg+0x22>
 801c2a0:	2300      	movs	r3, #0
 801c2a2:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 801c2a6:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
 801c2aa:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801c2ae:	4299      	cmp	r1, r3
 801c2b0:	d06a      	beq.n	801c388 <uxr_read_framed_msg+0x308>
 801c2b2:	18e2      	adds	r2, r4, r3
 801c2b4:	7890      	ldrb	r0, [r2, #2]
 801c2b6:	287d      	cmp	r0, #125	; 0x7d
 801c2b8:	f000 8100 	beq.w	801c4bc <uxr_read_framed_msg+0x43c>
 801c2bc:	3301      	adds	r3, #1
 801c2be:	212a      	movs	r1, #42	; 0x2a
 801c2c0:	287e      	cmp	r0, #126	; 0x7e
 801c2c2:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
 801c2c6:	ea4f 0253 	mov.w	r2, r3, lsr #1
 801c2ca:	fba5 c202 	umull	ip, r2, r5, r2
 801c2ce:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801c2d2:	fb01 3312 	mls	r3, r1, r2, r3
 801c2d6:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801c2da:	d055      	beq.n	801c388 <uxr_read_framed_msg+0x308>
 801c2dc:	2302      	movs	r3, #2
 801c2de:	7023      	strb	r3, [r4, #0]
 801c2e0:	e6df      	b.n	801c0a2 <uxr_read_framed_msg+0x22>
 801c2e2:	f894 c02c 	ldrb.w	ip, [r4, #44]	; 0x2c
 801c2e6:	f04f 0e2a 	mov.w	lr, #42	; 0x2a
 801c2ea:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801c2ee:	1c5a      	adds	r2, r3, #1
 801c2f0:	459c      	cmp	ip, r3
 801c2f2:	eb04 0103 	add.w	r1, r4, r3
 801c2f6:	ea4f 0352 	mov.w	r3, r2, lsr #1
 801c2fa:	f43f af04 	beq.w	801c106 <uxr_read_framed_msg+0x86>
 801c2fe:	fba5 0303 	umull	r0, r3, r5, r3
 801c302:	7889      	ldrb	r1, [r1, #2]
 801c304:	089b      	lsrs	r3, r3, #2
 801c306:	297e      	cmp	r1, #126	; 0x7e
 801c308:	fb0e 2313 	mls	r3, lr, r3, r2
 801c30c:	b2db      	uxtb	r3, r3
 801c30e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801c312:	d1ec      	bne.n	801c2ee <uxr_read_framed_msg+0x26e>
 801c314:	2301      	movs	r3, #1
 801c316:	7023      	strb	r3, [r4, #0]
 801c318:	e6c3      	b.n	801c0a2 <uxr_read_framed_msg+0x22>
 801c31a:	1c50      	adds	r0, r2, #1
 801c31c:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
 801c320:	3202      	adds	r2, #2
 801c322:	0841      	lsrs	r1, r0, #1
 801c324:	fba5 c101 	umull	ip, r1, r5, r1
 801c328:	0889      	lsrs	r1, r1, #2
 801c32a:	fb0b 0111 	mls	r1, fp, r1, r0
 801c32e:	1860      	adds	r0, r4, r1
 801c330:	b2c9      	uxtb	r1, r1
 801c332:	458a      	cmp	sl, r1
 801c334:	f43f af42 	beq.w	801c1bc <uxr_read_framed_msg+0x13c>
 801c338:	0851      	lsrs	r1, r2, #1
 801c33a:	7880      	ldrb	r0, [r0, #2]
 801c33c:	fba5 a101 	umull	sl, r1, r5, r1
 801c340:	287e      	cmp	r0, #126	; 0x7e
 801c342:	f080 0c20 	eor.w	ip, r0, #32
 801c346:	ea4f 0191 	mov.w	r1, r1, lsr #2
 801c34a:	fb0b 2211 	mls	r2, fp, r1, r2
 801c34e:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 801c352:	f47f af14 	bne.w	801c17e <uxr_read_framed_msg+0xfe>
 801c356:	459e      	cmp	lr, r3
 801c358:	f43f af33 	beq.w	801c1c2 <uxr_read_framed_msg+0x142>
 801c35c:	2301      	movs	r3, #1
 801c35e:	7023      	strb	r3, [r4, #0]
 801c360:	e69f      	b.n	801c0a2 <uxr_read_framed_msg+0x22>
 801c362:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c364:	9300      	str	r3, [sp, #0]
 801c366:	2301      	movs	r3, #1
 801c368:	9301      	str	r3, [sp, #4]
 801c36a:	464a      	mov	r2, r9
 801c36c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c36e:	4641      	mov	r1, r8
 801c370:	4620      	mov	r0, r4
 801c372:	f7ff fdf1 	bl	801bf58 <uxr_framing_read_transport>
 801c376:	2800      	cmp	r0, #0
 801c378:	f43f aec5 	beq.w	801c106 <uxr_read_framed_msg+0x86>
 801c37c:	7823      	ldrb	r3, [r4, #0]
 801c37e:	e690      	b.n	801c0a2 <uxr_read_framed_msg+0x22>
 801c380:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c382:	9300      	str	r3, [sp, #0]
 801c384:	2302      	movs	r3, #2
 801c386:	e7ef      	b.n	801c368 <uxr_read_framed_msg+0x2e8>
 801c388:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c38a:	464a      	mov	r2, r9
 801c38c:	4641      	mov	r1, r8
 801c38e:	4620      	mov	r0, r4
 801c390:	9300      	str	r3, [sp, #0]
 801c392:	2304      	movs	r3, #4
 801c394:	9301      	str	r3, [sp, #4]
 801c396:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c398:	f7ff fdde 	bl	801bf58 <uxr_framing_read_transport>
 801c39c:	2800      	cmp	r0, #0
 801c39e:	d1ed      	bne.n	801c37c <uxr_read_framed_msg+0x2fc>
 801c3a0:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 801c3a4:	2b7e      	cmp	r3, #126	; 0x7e
 801c3a6:	d0e9      	beq.n	801c37c <uxr_read_framed_msg+0x2fc>
 801c3a8:	e6ad      	b.n	801c106 <uxr_read_framed_msg+0x86>
 801c3aa:	bf00      	nop
 801c3ac:	30c30c31 	.word	0x30c30c31
 801c3b0:	080207f4 	.word	0x080207f4
 801c3b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c3b6:	9300      	str	r3, [sp, #0]
 801c3b8:	2305      	movs	r3, #5
 801c3ba:	9301      	str	r3, [sp, #4]
 801c3bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c3be:	f7ff fdcb 	bl	801bf58 <uxr_framing_read_transport>
 801c3c2:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 801c3c6:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801c3ca:	429a      	cmp	r2, r3
 801c3cc:	f43f ae9b 	beq.w	801c106 <uxr_read_framed_msg+0x86>
 801c3d0:	e664      	b.n	801c09c <uxr_read_framed_msg+0x1c>
 801c3d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c3d4:	9300      	str	r3, [sp, #0]
 801c3d6:	2303      	movs	r3, #3
 801c3d8:	e7c6      	b.n	801c368 <uxr_read_framed_msg+0x2e8>
 801c3da:	2305      	movs	r3, #5
 801c3dc:	7023      	strb	r3, [r4, #0]
 801c3de:	e660      	b.n	801c0a2 <uxr_read_framed_msg+0x22>
 801c3e0:	f43f aeef 	beq.w	801c1c2 <uxr_read_framed_msg+0x142>
 801c3e4:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 801c3e8:	d094      	beq.n	801c314 <uxr_read_framed_msg+0x294>
 801c3ea:	ebae 0303 	sub.w	r3, lr, r3
 801c3ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c3f0:	3302      	adds	r3, #2
 801c3f2:	9200      	str	r2, [sp, #0]
 801c3f4:	e7b8      	b.n	801c368 <uxr_read_framed_msg+0x2e8>
 801c3f6:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 801c3fa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c3fc:	7013      	strb	r3, [r2, #0]
 801c3fe:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 801c400:	b003      	add	sp, #12
 801c402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c406:	1c59      	adds	r1, r3, #1
 801c408:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 801c40c:	084a      	lsrs	r2, r1, #1
 801c40e:	fba5 e202 	umull	lr, r2, r5, r2
 801c412:	0892      	lsrs	r2, r2, #2
 801c414:	fb0c 1212 	mls	r2, ip, r2, r1
 801c418:	b2d1      	uxtb	r1, r2
 801c41a:	4288      	cmp	r0, r1
 801c41c:	d0b0      	beq.n	801c380 <uxr_read_framed_msg+0x300>
 801c41e:	3302      	adds	r3, #2
 801c420:	4422      	add	r2, r4
 801c422:	7891      	ldrb	r1, [r2, #2]
 801c424:	085a      	lsrs	r2, r3, #1
 801c426:	fba5 0202 	umull	r0, r2, r5, r2
 801c42a:	297e      	cmp	r1, #126	; 0x7e
 801c42c:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801c430:	fb0c 3312 	mls	r3, ip, r2, r3
 801c434:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801c438:	f000 80a1 	beq.w	801c57e <uxr_read_framed_msg+0x4fe>
 801c43c:	f081 0120 	eor.w	r1, r1, #32
 801c440:	e680      	b.n	801c144 <uxr_read_framed_msg+0xc4>
 801c442:	f103 0c01 	add.w	ip, r3, #1
 801c446:	202a      	movs	r0, #42	; 0x2a
 801c448:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801c44c:	fba5 e202 	umull	lr, r2, r5, r2
 801c450:	0892      	lsrs	r2, r2, #2
 801c452:	fb00 c212 	mls	r2, r0, r2, ip
 801c456:	fa5f fc82 	uxtb.w	ip, r2
 801c45a:	4561      	cmp	r1, ip
 801c45c:	d081      	beq.n	801c362 <uxr_read_framed_msg+0x2e2>
 801c45e:	3302      	adds	r3, #2
 801c460:	4422      	add	r2, r4
 801c462:	0859      	lsrs	r1, r3, #1
 801c464:	7892      	ldrb	r2, [r2, #2]
 801c466:	fba5 c101 	umull	ip, r1, r5, r1
 801c46a:	2a7e      	cmp	r2, #126	; 0x7e
 801c46c:	ea4f 0191 	mov.w	r1, r1, lsr #2
 801c470:	fb00 3311 	mls	r3, r0, r1, r3
 801c474:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801c478:	f000 8091 	beq.w	801c59e <uxr_read_framed_msg+0x51e>
 801c47c:	f082 0220 	eor.w	r2, r2, #32
 801c480:	e636      	b.n	801c0f0 <uxr_read_framed_msg+0x70>
 801c482:	1c51      	adds	r1, r2, #1
 801c484:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 801c488:	084b      	lsrs	r3, r1, #1
 801c48a:	fba5 e303 	umull	lr, r3, r5, r3
 801c48e:	089b      	lsrs	r3, r3, #2
 801c490:	fb0c 1313 	mls	r3, ip, r3, r1
 801c494:	b2d9      	uxtb	r1, r3
 801c496:	4288      	cmp	r0, r1
 801c498:	d09b      	beq.n	801c3d2 <uxr_read_framed_msg+0x352>
 801c49a:	3202      	adds	r2, #2
 801c49c:	4423      	add	r3, r4
 801c49e:	0850      	lsrs	r0, r2, #1
 801c4a0:	789b      	ldrb	r3, [r3, #2]
 801c4a2:	fba5 1000 	umull	r1, r0, r5, r0
 801c4a6:	2b7e      	cmp	r3, #126	; 0x7e
 801c4a8:	ea4f 0090 	mov.w	r0, r0, lsr #2
 801c4ac:	fb0c 2210 	mls	r2, ip, r0, r2
 801c4b0:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 801c4b4:	d077      	beq.n	801c5a6 <uxr_read_framed_msg+0x526>
 801c4b6:	f083 0120 	eor.w	r1, r3, #32
 801c4ba:	e6ea      	b.n	801c292 <uxr_read_framed_msg+0x212>
 801c4bc:	f103 0c01 	add.w	ip, r3, #1
 801c4c0:	202a      	movs	r0, #42	; 0x2a
 801c4c2:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801c4c6:	fba5 e202 	umull	lr, r2, r5, r2
 801c4ca:	0892      	lsrs	r2, r2, #2
 801c4cc:	fb00 c212 	mls	r2, r0, r2, ip
 801c4d0:	fa5f fc82 	uxtb.w	ip, r2
 801c4d4:	4561      	cmp	r1, ip
 801c4d6:	f43f af57 	beq.w	801c388 <uxr_read_framed_msg+0x308>
 801c4da:	3302      	adds	r3, #2
 801c4dc:	4422      	add	r2, r4
 801c4de:	7891      	ldrb	r1, [r2, #2]
 801c4e0:	085a      	lsrs	r2, r3, #1
 801c4e2:	fba5 c202 	umull	ip, r2, r5, r2
 801c4e6:	297e      	cmp	r1, #126	; 0x7e
 801c4e8:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 801c4ec:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801c4f0:	fb00 3312 	mls	r3, r0, r2, r3
 801c4f4:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801c4f8:	f43f af46 	beq.w	801c388 <uxr_read_framed_msg+0x308>
 801c4fc:	f081 0120 	eor.w	r1, r1, #32
 801c500:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 801c504:	e6ea      	b.n	801c2dc <uxr_read_framed_msg+0x25c>
 801c506:	1c59      	adds	r1, r3, #1
 801c508:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 801c50c:	084a      	lsrs	r2, r1, #1
 801c50e:	fba5 e202 	umull	lr, r2, r5, r2
 801c512:	0892      	lsrs	r2, r2, #2
 801c514:	fb0c 1212 	mls	r2, ip, r2, r1
 801c518:	b2d1      	uxtb	r1, r2
 801c51a:	4288      	cmp	r0, r1
 801c51c:	f43f af21 	beq.w	801c362 <uxr_read_framed_msg+0x2e2>
 801c520:	3302      	adds	r3, #2
 801c522:	4422      	add	r2, r4
 801c524:	7891      	ldrb	r1, [r2, #2]
 801c526:	085a      	lsrs	r2, r3, #1
 801c528:	fba5 0202 	umull	r0, r2, r5, r2
 801c52c:	297e      	cmp	r1, #126	; 0x7e
 801c52e:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801c532:	fb0c 3312 	mls	r3, ip, r2, r3
 801c536:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801c53a:	d030      	beq.n	801c59e <uxr_read_framed_msg+0x51e>
 801c53c:	f081 0120 	eor.w	r1, r1, #32
 801c540:	e65d      	b.n	801c1fe <uxr_read_framed_msg+0x17e>
 801c542:	1c59      	adds	r1, r3, #1
 801c544:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 801c548:	084a      	lsrs	r2, r1, #1
 801c54a:	fba5 e202 	umull	lr, r2, r5, r2
 801c54e:	0892      	lsrs	r2, r2, #2
 801c550:	fb0c 1212 	mls	r2, ip, r2, r1
 801c554:	b2d1      	uxtb	r1, r2
 801c556:	4288      	cmp	r0, r1
 801c558:	f43f af12 	beq.w	801c380 <uxr_read_framed_msg+0x300>
 801c55c:	3302      	adds	r3, #2
 801c55e:	4422      	add	r2, r4
 801c560:	7891      	ldrb	r1, [r2, #2]
 801c562:	085a      	lsrs	r2, r3, #1
 801c564:	fba5 0202 	umull	r0, r2, r5, r2
 801c568:	297e      	cmp	r1, #126	; 0x7e
 801c56a:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801c56e:	fb0c 3312 	mls	r3, ip, r2, r3
 801c572:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801c576:	d002      	beq.n	801c57e <uxr_read_framed_msg+0x4fe>
 801c578:	f081 0120 	eor.w	r1, r1, #32
 801c57c:	e66a      	b.n	801c254 <uxr_read_framed_msg+0x1d4>
 801c57e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c580:	9300      	str	r3, [sp, #0]
 801c582:	2302      	movs	r3, #2
 801c584:	9301      	str	r3, [sp, #4]
 801c586:	464a      	mov	r2, r9
 801c588:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c58a:	4641      	mov	r1, r8
 801c58c:	4620      	mov	r0, r4
 801c58e:	f7ff fce3 	bl	801bf58 <uxr_framing_read_transport>
 801c592:	2800      	cmp	r0, #0
 801c594:	f47f aef2 	bne.w	801c37c <uxr_read_framed_msg+0x2fc>
 801c598:	2301      	movs	r3, #1
 801c59a:	7023      	strb	r3, [r4, #0]
 801c59c:	e581      	b.n	801c0a2 <uxr_read_framed_msg+0x22>
 801c59e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c5a0:	9300      	str	r3, [sp, #0]
 801c5a2:	2301      	movs	r3, #1
 801c5a4:	e7ee      	b.n	801c584 <uxr_read_framed_msg+0x504>
 801c5a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c5a8:	9300      	str	r3, [sp, #0]
 801c5aa:	2303      	movs	r3, #3
 801c5ac:	e7ea      	b.n	801c584 <uxr_read_framed_msg+0x504>
 801c5ae:	bf00      	nop

0801c5b0 <rcl_get_automatic_discovery_range>:
 801c5b0:	b530      	push	{r4, r5, lr}
 801c5b2:	2300      	movs	r3, #0
 801c5b4:	b083      	sub	sp, #12
 801c5b6:	9301      	str	r3, [sp, #4]
 801c5b8:	b1c0      	cbz	r0, 801c5ec <rcl_get_automatic_discovery_range+0x3c>
 801c5ba:	4604      	mov	r4, r0
 801c5bc:	a901      	add	r1, sp, #4
 801c5be:	4818      	ldr	r0, [pc, #96]	; (801c620 <rcl_get_automatic_discovery_range+0x70>)
 801c5c0:	f7fc fbf6 	bl	8018db0 <rcutils_get_env>
 801c5c4:	b110      	cbz	r0, 801c5cc <rcl_get_automatic_discovery_range+0x1c>
 801c5c6:	2001      	movs	r0, #1
 801c5c8:	b003      	add	sp, #12
 801c5ca:	bd30      	pop	{r4, r5, pc}
 801c5cc:	9d01      	ldr	r5, [sp, #4]
 801c5ce:	782b      	ldrb	r3, [r5, #0]
 801c5d0:	b13b      	cbz	r3, 801c5e2 <rcl_get_automatic_discovery_range+0x32>
 801c5d2:	4914      	ldr	r1, [pc, #80]	; (801c624 <rcl_get_automatic_discovery_range+0x74>)
 801c5d4:	4628      	mov	r0, r5
 801c5d6:	f7e3 fe33 	bl	8000240 <strcmp>
 801c5da:	b950      	cbnz	r0, 801c5f2 <rcl_get_automatic_discovery_range+0x42>
 801c5dc:	2301      	movs	r3, #1
 801c5de:	7023      	strb	r3, [r4, #0]
 801c5e0:	e7f2      	b.n	801c5c8 <rcl_get_automatic_discovery_range+0x18>
 801c5e2:	2303      	movs	r3, #3
 801c5e4:	2000      	movs	r0, #0
 801c5e6:	7023      	strb	r3, [r4, #0]
 801c5e8:	b003      	add	sp, #12
 801c5ea:	bd30      	pop	{r4, r5, pc}
 801c5ec:	200b      	movs	r0, #11
 801c5ee:	b003      	add	sp, #12
 801c5f0:	bd30      	pop	{r4, r5, pc}
 801c5f2:	490d      	ldr	r1, [pc, #52]	; (801c628 <rcl_get_automatic_discovery_range+0x78>)
 801c5f4:	4628      	mov	r0, r5
 801c5f6:	f7e3 fe23 	bl	8000240 <strcmp>
 801c5fa:	b168      	cbz	r0, 801c618 <rcl_get_automatic_discovery_range+0x68>
 801c5fc:	490b      	ldr	r1, [pc, #44]	; (801c62c <rcl_get_automatic_discovery_range+0x7c>)
 801c5fe:	4628      	mov	r0, r5
 801c600:	f7e3 fe1e 	bl	8000240 <strcmp>
 801c604:	2800      	cmp	r0, #0
 801c606:	d0ec      	beq.n	801c5e2 <rcl_get_automatic_discovery_range+0x32>
 801c608:	4909      	ldr	r1, [pc, #36]	; (801c630 <rcl_get_automatic_discovery_range+0x80>)
 801c60a:	4628      	mov	r0, r5
 801c60c:	f7e3 fe18 	bl	8000240 <strcmp>
 801c610:	b910      	cbnz	r0, 801c618 <rcl_get_automatic_discovery_range+0x68>
 801c612:	2304      	movs	r3, #4
 801c614:	7023      	strb	r3, [r4, #0]
 801c616:	e7d7      	b.n	801c5c8 <rcl_get_automatic_discovery_range+0x18>
 801c618:	2302      	movs	r3, #2
 801c61a:	2000      	movs	r0, #0
 801c61c:	7023      	strb	r3, [r4, #0]
 801c61e:	e7d3      	b.n	801c5c8 <rcl_get_automatic_discovery_range+0x18>
 801c620:	080209f4 	.word	0x080209f4
 801c624:	08020a14 	.word	0x08020a14
 801c628:	08020a18 	.word	0x08020a18
 801c62c:	08020a24 	.word	0x08020a24
 801c630:	08020a2c 	.word	0x08020a2c

0801c634 <rcl_automatic_discovery_range_to_string>:
 801c634:	2804      	cmp	r0, #4
 801c636:	d803      	bhi.n	801c640 <rcl_automatic_discovery_range_to_string+0xc>
 801c638:	4b02      	ldr	r3, [pc, #8]	; (801c644 <rcl_automatic_discovery_range_to_string+0x10>)
 801c63a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801c63e:	4770      	bx	lr
 801c640:	2000      	movs	r0, #0
 801c642:	4770      	bx	lr
 801c644:	08020b1c 	.word	0x08020b1c

0801c648 <rcl_get_discovery_static_peers>:
 801c648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c64c:	2300      	movs	r3, #0
 801c64e:	b08e      	sub	sp, #56	; 0x38
 801c650:	9306      	str	r3, [sp, #24]
 801c652:	2900      	cmp	r1, #0
 801c654:	d04b      	beq.n	801c6ee <rcl_get_discovery_static_peers+0xa6>
 801c656:	4605      	mov	r5, r0
 801c658:	2800      	cmp	r0, #0
 801c65a:	d048      	beq.n	801c6ee <rcl_get_discovery_static_peers+0xa6>
 801c65c:	460c      	mov	r4, r1
 801c65e:	482c      	ldr	r0, [pc, #176]	; (801c710 <rcl_get_discovery_static_peers+0xc8>)
 801c660:	a906      	add	r1, sp, #24
 801c662:	f7fc fba5 	bl	8018db0 <rcutils_get_env>
 801c666:	b118      	cbz	r0, 801c670 <rcl_get_discovery_static_peers+0x28>
 801c668:	2001      	movs	r0, #1
 801c66a:	b00e      	add	sp, #56	; 0x38
 801c66c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c670:	9b06      	ldr	r3, [sp, #24]
 801c672:	2b00      	cmp	r3, #0
 801c674:	d0f8      	beq.n	801c668 <rcl_get_discovery_static_peers+0x20>
 801c676:	af07      	add	r7, sp, #28
 801c678:	4638      	mov	r0, r7
 801c67a:	f000 fc73 	bl	801cf64 <rcutils_get_zero_initialized_string_array>
 801c67e:	f104 0308 	add.w	r3, r4, #8
 801c682:	9703      	str	r7, [sp, #12]
 801c684:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801c688:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801c68c:	213b      	movs	r1, #59	; 0x3b
 801c68e:	9806      	ldr	r0, [sp, #24]
 801c690:	e894 000c 	ldmia.w	r4, {r2, r3}
 801c694:	f000 fba8 	bl	801cde8 <rcutils_split>
 801c698:	2800      	cmp	r0, #0
 801c69a:	d1e5      	bne.n	801c668 <rcl_get_discovery_static_peers+0x20>
 801c69c:	4622      	mov	r2, r4
 801c69e:	9907      	ldr	r1, [sp, #28]
 801c6a0:	4628      	mov	r0, r5
 801c6a2:	f000 fcaf 	bl	801d004 <rmw_discovery_options_init>
 801c6a6:	4604      	mov	r4, r0
 801c6a8:	bb78      	cbnz	r0, 801c70a <rcl_get_discovery_static_peers+0xc2>
 801c6aa:	9e07      	ldr	r6, [sp, #28]
 801c6ac:	b336      	cbz	r6, 801c6fc <rcl_get_discovery_static_peers+0xb4>
 801c6ae:	f8dd a020 	ldr.w	sl, [sp, #32]
 801c6b2:	4680      	mov	r8, r0
 801c6b4:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
 801c6b8:	ea4f 2904 	mov.w	r9, r4, lsl #8
 801c6bc:	4608      	mov	r0, r1
 801c6be:	9105      	str	r1, [sp, #20]
 801c6c0:	f7e3 fe1e 	bl	8000300 <strlen>
 801c6c4:	28ff      	cmp	r0, #255	; 0xff
 801c6c6:	9905      	ldr	r1, [sp, #20]
 801c6c8:	d815      	bhi.n	801c6f6 <rcl_get_discovery_static_peers+0xae>
 801c6ca:	6868      	ldr	r0, [r5, #4]
 801c6cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 801c6d0:	eb00 2004 	add.w	r0, r0, r4, lsl #8
 801c6d4:	3401      	adds	r4, #1
 801c6d6:	f001 fa84 	bl	801dbe2 <strncpy>
 801c6da:	686b      	ldr	r3, [r5, #4]
 801c6dc:	9e07      	ldr	r6, [sp, #28]
 801c6de:	444b      	add	r3, r9
 801c6e0:	42b4      	cmp	r4, r6
 801c6e2:	f883 80ff 	strb.w	r8, [r3, #255]	; 0xff
 801c6e6:	d209      	bcs.n	801c6fc <rcl_get_discovery_static_peers+0xb4>
 801c6e8:	f8dd a020 	ldr.w	sl, [sp, #32]
 801c6ec:	e7e2      	b.n	801c6b4 <rcl_get_discovery_static_peers+0x6c>
 801c6ee:	200b      	movs	r0, #11
 801c6f0:	b00e      	add	sp, #56	; 0x38
 801c6f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c6f6:	3401      	adds	r4, #1
 801c6f8:	42b4      	cmp	r4, r6
 801c6fa:	d3db      	bcc.n	801c6b4 <rcl_get_discovery_static_peers+0x6c>
 801c6fc:	4638      	mov	r0, r7
 801c6fe:	f000 fc4f 	bl	801cfa0 <rcutils_string_array_fini>
 801c702:	3800      	subs	r0, #0
 801c704:	bf18      	it	ne
 801c706:	2001      	movne	r0, #1
 801c708:	e7af      	b.n	801c66a <rcl_get_discovery_static_peers+0x22>
 801c70a:	f7f9 f94f 	bl	80159ac <rcl_convert_rmw_ret_to_rcl_ret>
 801c70e:	e7ac      	b.n	801c66a <rcl_get_discovery_static_peers+0x22>
 801c710:	08020a3c 	.word	0x08020a3c

0801c714 <rcl_get_default_domain_id>:
 801c714:	b530      	push	{r4, r5, lr}
 801c716:	2300      	movs	r3, #0
 801c718:	b083      	sub	sp, #12
 801c71a:	9300      	str	r3, [sp, #0]
 801c71c:	b1d0      	cbz	r0, 801c754 <rcl_get_default_domain_id+0x40>
 801c71e:	4604      	mov	r4, r0
 801c720:	4669      	mov	r1, sp
 801c722:	4815      	ldr	r0, [pc, #84]	; (801c778 <rcl_get_default_domain_id+0x64>)
 801c724:	f7fc fb44 	bl	8018db0 <rcutils_get_env>
 801c728:	4602      	mov	r2, r0
 801c72a:	b110      	cbz	r0, 801c732 <rcl_get_default_domain_id+0x1e>
 801c72c:	2001      	movs	r0, #1
 801c72e:	b003      	add	sp, #12
 801c730:	bd30      	pop	{r4, r5, pc}
 801c732:	9b00      	ldr	r3, [sp, #0]
 801c734:	b18b      	cbz	r3, 801c75a <rcl_get_default_domain_id+0x46>
 801c736:	7818      	ldrb	r0, [r3, #0]
 801c738:	2800      	cmp	r0, #0
 801c73a:	d0f8      	beq.n	801c72e <rcl_get_default_domain_id+0x1a>
 801c73c:	a901      	add	r1, sp, #4
 801c73e:	4618      	mov	r0, r3
 801c740:	9201      	str	r2, [sp, #4]
 801c742:	f001 f881 	bl	801d848 <strtoul>
 801c746:	4605      	mov	r5, r0
 801c748:	b150      	cbz	r0, 801c760 <rcl_get_default_domain_id+0x4c>
 801c74a:	1c43      	adds	r3, r0, #1
 801c74c:	d00d      	beq.n	801c76a <rcl_get_default_domain_id+0x56>
 801c74e:	2000      	movs	r0, #0
 801c750:	6025      	str	r5, [r4, #0]
 801c752:	e7ec      	b.n	801c72e <rcl_get_default_domain_id+0x1a>
 801c754:	200b      	movs	r0, #11
 801c756:	b003      	add	sp, #12
 801c758:	bd30      	pop	{r4, r5, pc}
 801c75a:	4618      	mov	r0, r3
 801c75c:	b003      	add	sp, #12
 801c75e:	bd30      	pop	{r4, r5, pc}
 801c760:	9b01      	ldr	r3, [sp, #4]
 801c762:	781b      	ldrb	r3, [r3, #0]
 801c764:	2b00      	cmp	r3, #0
 801c766:	d0f2      	beq.n	801c74e <rcl_get_default_domain_id+0x3a>
 801c768:	e7e0      	b.n	801c72c <rcl_get_default_domain_id+0x18>
 801c76a:	f001 fb0f 	bl	801dd8c <__errno>
 801c76e:	6803      	ldr	r3, [r0, #0]
 801c770:	2b22      	cmp	r3, #34	; 0x22
 801c772:	d1ec      	bne.n	801c74e <rcl_get_default_domain_id+0x3a>
 801c774:	e7da      	b.n	801c72c <rcl_get_default_domain_id+0x18>
 801c776:	bf00      	nop
 801c778:	08020b30 	.word	0x08020b30

0801c77c <rcl_expand_topic_name>:
 801c77c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c780:	b08d      	sub	sp, #52	; 0x34
 801c782:	4698      	mov	r8, r3
 801c784:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801c786:	9207      	str	r2, [sp, #28]
 801c788:	2b00      	cmp	r3, #0
 801c78a:	bf18      	it	ne
 801c78c:	f1b8 0f00 	cmpne.w	r8, #0
 801c790:	bf0c      	ite	eq
 801c792:	2301      	moveq	r3, #1
 801c794:	2300      	movne	r3, #0
 801c796:	2a00      	cmp	r2, #0
 801c798:	bf08      	it	eq
 801c79a:	f043 0301 	orreq.w	r3, r3, #1
 801c79e:	2900      	cmp	r1, #0
 801c7a0:	bf08      	it	eq
 801c7a2:	f043 0301 	orreq.w	r3, r3, #1
 801c7a6:	2b00      	cmp	r3, #0
 801c7a8:	d13d      	bne.n	801c826 <rcl_expand_topic_name+0xaa>
 801c7aa:	fab0 f280 	clz	r2, r0
 801c7ae:	4604      	mov	r4, r0
 801c7b0:	0952      	lsrs	r2, r2, #5
 801c7b2:	2800      	cmp	r0, #0
 801c7b4:	d037      	beq.n	801c826 <rcl_expand_topic_name+0xaa>
 801c7b6:	460f      	mov	r7, r1
 801c7b8:	a90b      	add	r1, sp, #44	; 0x2c
 801c7ba:	f000 fa51 	bl	801cc60 <rcl_validate_topic_name>
 801c7be:	4605      	mov	r5, r0
 801c7c0:	bb68      	cbnz	r0, 801c81e <rcl_expand_topic_name+0xa2>
 801c7c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c7c4:	2b00      	cmp	r3, #0
 801c7c6:	d137      	bne.n	801c838 <rcl_expand_topic_name+0xbc>
 801c7c8:	4602      	mov	r2, r0
 801c7ca:	a90b      	add	r1, sp, #44	; 0x2c
 801c7cc:	4638      	mov	r0, r7
 801c7ce:	f7fc ff69 	bl	80196a4 <rmw_validate_node_name>
 801c7d2:	bb68      	cbnz	r0, 801c830 <rcl_expand_topic_name+0xb4>
 801c7d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c7d6:	2b00      	cmp	r3, #0
 801c7d8:	d133      	bne.n	801c842 <rcl_expand_topic_name+0xc6>
 801c7da:	462a      	mov	r2, r5
 801c7dc:	a90b      	add	r1, sp, #44	; 0x2c
 801c7de:	9807      	ldr	r0, [sp, #28]
 801c7e0:	f7fc ff42 	bl	8019668 <rmw_validate_namespace>
 801c7e4:	bb20      	cbnz	r0, 801c830 <rcl_expand_topic_name+0xb4>
 801c7e6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801c7e8:	2d00      	cmp	r5, #0
 801c7ea:	f040 80a2 	bne.w	801c932 <rcl_expand_topic_name+0x1b6>
 801c7ee:	217b      	movs	r1, #123	; 0x7b
 801c7f0:	4620      	mov	r0, r4
 801c7f2:	f001 f9d7 	bl	801dba4 <strchr>
 801c7f6:	7823      	ldrb	r3, [r4, #0]
 801c7f8:	4681      	mov	r9, r0
 801c7fa:	bb20      	cbnz	r0, 801c846 <rcl_expand_topic_name+0xca>
 801c7fc:	2b2f      	cmp	r3, #47	; 0x2f
 801c7fe:	d122      	bne.n	801c846 <rcl_expand_topic_name+0xca>
 801c800:	ab19      	add	r3, sp, #100	; 0x64
 801c802:	e893 0003 	ldmia.w	r3, {r0, r1}
 801c806:	ab16      	add	r3, sp, #88	; 0x58
 801c808:	e88d 0003 	stmia.w	sp, {r0, r1}
 801c80c:	4620      	mov	r0, r4
 801c80e:	cb0e      	ldmia	r3, {r1, r2, r3}
 801c810:	f7fc fc30 	bl	8019074 <rcutils_strdup>
 801c814:	2800      	cmp	r0, #0
 801c816:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801c818:	bf08      	it	eq
 801c81a:	250a      	moveq	r5, #10
 801c81c:	6018      	str	r0, [r3, #0]
 801c81e:	4628      	mov	r0, r5
 801c820:	b00d      	add	sp, #52	; 0x34
 801c822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c826:	250b      	movs	r5, #11
 801c828:	4628      	mov	r0, r5
 801c82a:	b00d      	add	sp, #52	; 0x34
 801c82c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c830:	f7f9 f8bc 	bl	80159ac <rcl_convert_rmw_ret_to_rcl_ret>
 801c834:	4605      	mov	r5, r0
 801c836:	e7f2      	b.n	801c81e <rcl_expand_topic_name+0xa2>
 801c838:	2567      	movs	r5, #103	; 0x67
 801c83a:	4628      	mov	r0, r5
 801c83c:	b00d      	add	sp, #52	; 0x34
 801c83e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c842:	25c9      	movs	r5, #201	; 0xc9
 801c844:	e7eb      	b.n	801c81e <rcl_expand_topic_name+0xa2>
 801c846:	2b7e      	cmp	r3, #126	; 0x7e
 801c848:	d075      	beq.n	801c936 <rcl_expand_topic_name+0x1ba>
 801c84a:	f1b9 0f00 	cmp.w	r9, #0
 801c84e:	f000 80c2 	beq.w	801c9d6 <rcl_expand_topic_name+0x25a>
 801c852:	2300      	movs	r3, #0
 801c854:	46a2      	mov	sl, r4
 801c856:	461e      	mov	r6, r3
 801c858:	9508      	str	r5, [sp, #32]
 801c85a:	4655      	mov	r5, sl
 801c85c:	9409      	str	r4, [sp, #36]	; 0x24
 801c85e:	46b2      	mov	sl, r6
 801c860:	464c      	mov	r4, r9
 801c862:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801c866:	2c00      	cmp	r4, #0
 801c868:	f000 80ae 	beq.w	801c9c8 <rcl_expand_topic_name+0x24c>
 801c86c:	217d      	movs	r1, #125	; 0x7d
 801c86e:	4628      	mov	r0, r5
 801c870:	f001 f998 	bl	801dba4 <strchr>
 801c874:	eba0 0904 	sub.w	r9, r0, r4
 801c878:	4621      	mov	r1, r4
 801c87a:	4869      	ldr	r0, [pc, #420]	; (801ca20 <rcl_expand_topic_name+0x2a4>)
 801c87c:	f109 0601 	add.w	r6, r9, #1
 801c880:	4632      	mov	r2, r6
 801c882:	f001 f99c 	bl	801dbbe <strncmp>
 801c886:	2800      	cmp	r0, #0
 801c888:	d051      	beq.n	801c92e <rcl_expand_topic_name+0x1b2>
 801c88a:	4632      	mov	r2, r6
 801c88c:	4621      	mov	r1, r4
 801c88e:	4865      	ldr	r0, [pc, #404]	; (801ca24 <rcl_expand_topic_name+0x2a8>)
 801c890:	f001 f995 	bl	801dbbe <strncmp>
 801c894:	b128      	cbz	r0, 801c8a2 <rcl_expand_topic_name+0x126>
 801c896:	4632      	mov	r2, r6
 801c898:	4621      	mov	r1, r4
 801c89a:	4863      	ldr	r0, [pc, #396]	; (801ca28 <rcl_expand_topic_name+0x2ac>)
 801c89c:	f001 f98f 	bl	801dbbe <strncmp>
 801c8a0:	bb38      	cbnz	r0, 801c8f2 <rcl_expand_topic_name+0x176>
 801c8a2:	46d9      	mov	r9, fp
 801c8a4:	ab18      	add	r3, sp, #96	; 0x60
 801c8a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801c8aa:	ab16      	add	r3, sp, #88	; 0x58
 801c8ac:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801c8b0:	4620      	mov	r0, r4
 801c8b2:	4631      	mov	r1, r6
 801c8b4:	cb0c      	ldmia	r3, {r2, r3}
 801c8b6:	f7fc fc03 	bl	80190c0 <rcutils_strndup>
 801c8ba:	4604      	mov	r4, r0
 801c8bc:	2800      	cmp	r0, #0
 801c8be:	f000 80a3 	beq.w	801ca08 <rcl_expand_topic_name+0x28c>
 801c8c2:	464a      	mov	r2, r9
 801c8c4:	4628      	mov	r0, r5
 801c8c6:	ab16      	add	r3, sp, #88	; 0x58
 801c8c8:	4621      	mov	r1, r4
 801c8ca:	f7fc fad3 	bl	8018e74 <rcutils_repl_str>
 801c8ce:	991a      	ldr	r1, [sp, #104]	; 0x68
 801c8d0:	4605      	mov	r5, r0
 801c8d2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c8d4:	4620      	mov	r0, r4
 801c8d6:	4798      	blx	r3
 801c8d8:	4650      	mov	r0, sl
 801c8da:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c8dc:	991a      	ldr	r1, [sp, #104]	; 0x68
 801c8de:	4798      	blx	r3
 801c8e0:	2d00      	cmp	r5, #0
 801c8e2:	d06c      	beq.n	801c9be <rcl_expand_topic_name+0x242>
 801c8e4:	217b      	movs	r1, #123	; 0x7b
 801c8e6:	4628      	mov	r0, r5
 801c8e8:	f001 f95c 	bl	801dba4 <strchr>
 801c8ec:	46aa      	mov	sl, r5
 801c8ee:	4604      	mov	r4, r0
 801c8f0:	e7b9      	b.n	801c866 <rcl_expand_topic_name+0xea>
 801c8f2:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 801c8f6:	1c61      	adds	r1, r4, #1
 801c8f8:	4640      	mov	r0, r8
 801c8fa:	f7fc fcdd 	bl	80192b8 <rcutils_string_map_getn>
 801c8fe:	4681      	mov	r9, r0
 801c900:	2800      	cmp	r0, #0
 801c902:	d1cf      	bne.n	801c8a4 <rcl_expand_topic_name+0x128>
 801c904:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801c906:	aa18      	add	r2, sp, #96	; 0x60
 801c908:	2569      	movs	r5, #105	; 0x69
 801c90a:	6018      	str	r0, [r3, #0]
 801c90c:	ab16      	add	r3, sp, #88	; 0x58
 801c90e:	ca07      	ldmia	r2, {r0, r1, r2}
 801c910:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801c914:	4631      	mov	r1, r6
 801c916:	4620      	mov	r0, r4
 801c918:	cb0c      	ldmia	r3, {r2, r3}
 801c91a:	f7fc fbd1 	bl	80190c0 <rcutils_strndup>
 801c91e:	991a      	ldr	r1, [sp, #104]	; 0x68
 801c920:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c922:	4798      	blx	r3
 801c924:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c926:	991a      	ldr	r1, [sp, #104]	; 0x68
 801c928:	4650      	mov	r0, sl
 801c92a:	4798      	blx	r3
 801c92c:	e777      	b.n	801c81e <rcl_expand_topic_name+0xa2>
 801c92e:	46b9      	mov	r9, r7
 801c930:	e7b8      	b.n	801c8a4 <rcl_expand_topic_name+0x128>
 801c932:	25ca      	movs	r5, #202	; 0xca
 801c934:	e773      	b.n	801c81e <rcl_expand_topic_name+0xa2>
 801c936:	9e07      	ldr	r6, [sp, #28]
 801c938:	4630      	mov	r0, r6
 801c93a:	f7e3 fce1 	bl	8000300 <strlen>
 801c93e:	4a3b      	ldr	r2, [pc, #236]	; (801ca2c <rcl_expand_topic_name+0x2b0>)
 801c940:	4b3b      	ldr	r3, [pc, #236]	; (801ca30 <rcl_expand_topic_name+0x2b4>)
 801c942:	9603      	str	r6, [sp, #12]
 801c944:	2801      	cmp	r0, #1
 801c946:	bf18      	it	ne
 801c948:	4613      	movne	r3, r2
 801c94a:	9704      	str	r7, [sp, #16]
 801c94c:	9302      	str	r3, [sp, #8]
 801c94e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801c950:	9300      	str	r3, [sp, #0]
 801c952:	1c63      	adds	r3, r4, #1
 801c954:	9305      	str	r3, [sp, #20]
 801c956:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801c95a:	9301      	str	r3, [sp, #4]
 801c95c:	ab16      	add	r3, sp, #88	; 0x58
 801c95e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801c960:	f7fc fa4e 	bl	8018e00 <rcutils_format_string_limit>
 801c964:	4606      	mov	r6, r0
 801c966:	b350      	cbz	r0, 801c9be <rcl_expand_topic_name+0x242>
 801c968:	f1b9 0f00 	cmp.w	r9, #0
 801c96c:	d005      	beq.n	801c97a <rcl_expand_topic_name+0x1fe>
 801c96e:	217b      	movs	r1, #123	; 0x7b
 801c970:	46b2      	mov	sl, r6
 801c972:	f001 f917 	bl	801dba4 <strchr>
 801c976:	4681      	mov	r9, r0
 801c978:	e76e      	b.n	801c858 <rcl_expand_topic_name+0xdc>
 801c97a:	7833      	ldrb	r3, [r6, #0]
 801c97c:	2b2f      	cmp	r3, #47	; 0x2f
 801c97e:	d01b      	beq.n	801c9b8 <rcl_expand_topic_name+0x23c>
 801c980:	9c07      	ldr	r4, [sp, #28]
 801c982:	4620      	mov	r0, r4
 801c984:	f7e3 fcbc 	bl	8000300 <strlen>
 801c988:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801c98c:	4a29      	ldr	r2, [pc, #164]	; (801ca34 <rcl_expand_topic_name+0x2b8>)
 801c98e:	9301      	str	r3, [sp, #4]
 801c990:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801c992:	9604      	str	r6, [sp, #16]
 801c994:	9300      	str	r3, [sp, #0]
 801c996:	4b28      	ldr	r3, [pc, #160]	; (801ca38 <rcl_expand_topic_name+0x2bc>)
 801c998:	9403      	str	r4, [sp, #12]
 801c99a:	2801      	cmp	r0, #1
 801c99c:	bf18      	it	ne
 801c99e:	4613      	movne	r3, r2
 801c9a0:	9302      	str	r3, [sp, #8]
 801c9a2:	ab16      	add	r3, sp, #88	; 0x58
 801c9a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801c9a6:	f7fc fa2b 	bl	8018e00 <rcutils_format_string_limit>
 801c9aa:	4603      	mov	r3, r0
 801c9ac:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801c9ae:	4630      	mov	r0, r6
 801c9b0:	991a      	ldr	r1, [sp, #104]	; 0x68
 801c9b2:	461e      	mov	r6, r3
 801c9b4:	4790      	blx	r2
 801c9b6:	b116      	cbz	r6, 801c9be <rcl_expand_topic_name+0x242>
 801c9b8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801c9ba:	601e      	str	r6, [r3, #0]
 801c9bc:	e72f      	b.n	801c81e <rcl_expand_topic_name+0xa2>
 801c9be:	2300      	movs	r3, #0
 801c9c0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801c9c2:	250a      	movs	r5, #10
 801c9c4:	6013      	str	r3, [r2, #0]
 801c9c6:	e72a      	b.n	801c81e <rcl_expand_topic_name+0xa2>
 801c9c8:	4653      	mov	r3, sl
 801c9ca:	4656      	mov	r6, sl
 801c9cc:	e9dd 5408 	ldrd	r5, r4, [sp, #32]
 801c9d0:	2b00      	cmp	r3, #0
 801c9d2:	d1d2      	bne.n	801c97a <rcl_expand_topic_name+0x1fe>
 801c9d4:	7823      	ldrb	r3, [r4, #0]
 801c9d6:	2b2f      	cmp	r3, #47	; 0x2f
 801c9d8:	d01e      	beq.n	801ca18 <rcl_expand_topic_name+0x29c>
 801c9da:	9e07      	ldr	r6, [sp, #28]
 801c9dc:	4630      	mov	r0, r6
 801c9de:	f7e3 fc8f 	bl	8000300 <strlen>
 801c9e2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801c9e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801c9e8:	9603      	str	r6, [sp, #12]
 801c9ea:	9404      	str	r4, [sp, #16]
 801c9ec:	e9cd 2300 	strd	r2, r3, [sp]
 801c9f0:	4a10      	ldr	r2, [pc, #64]	; (801ca34 <rcl_expand_topic_name+0x2b8>)
 801c9f2:	4b11      	ldr	r3, [pc, #68]	; (801ca38 <rcl_expand_topic_name+0x2bc>)
 801c9f4:	2801      	cmp	r0, #1
 801c9f6:	bf18      	it	ne
 801c9f8:	4613      	movne	r3, r2
 801c9fa:	9302      	str	r3, [sp, #8]
 801c9fc:	ab16      	add	r3, sp, #88	; 0x58
 801c9fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801ca00:	f7fc f9fe 	bl	8018e00 <rcutils_format_string_limit>
 801ca04:	4606      	mov	r6, r0
 801ca06:	e7d6      	b.n	801c9b6 <rcl_expand_topic_name+0x23a>
 801ca08:	e9dd 121a 	ldrd	r1, r2, [sp, #104]	; 0x68
 801ca0c:	4650      	mov	r0, sl
 801ca0e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801ca10:	6014      	str	r4, [r2, #0]
 801ca12:	250a      	movs	r5, #10
 801ca14:	4798      	blx	r3
 801ca16:	e702      	b.n	801c81e <rcl_expand_topic_name+0xa2>
 801ca18:	2300      	movs	r3, #0
 801ca1a:	461e      	mov	r6, r3
 801ca1c:	e7cc      	b.n	801c9b8 <rcl_expand_topic_name+0x23c>
 801ca1e:	bf00      	nop
 801ca20:	08020b48 	.word	0x08020b48
 801ca24:	08020b50 	.word	0x08020b50
 801ca28:	08020b58 	.word	0x08020b58
 801ca2c:	08020b40 	.word	0x08020b40
 801ca30:	0801fbf8 	.word	0x0801fbf8
 801ca34:	08020140 	.word	0x08020140
 801ca38:	0801fc08 	.word	0x0801fc08

0801ca3c <rcl_get_default_topic_name_substitutions>:
 801ca3c:	2800      	cmp	r0, #0
 801ca3e:	bf0c      	ite	eq
 801ca40:	200b      	moveq	r0, #11
 801ca42:	2000      	movne	r0, #0
 801ca44:	4770      	bx	lr
 801ca46:	bf00      	nop

0801ca48 <rcl_get_zero_initialized_guard_condition>:
 801ca48:	4a03      	ldr	r2, [pc, #12]	; (801ca58 <rcl_get_zero_initialized_guard_condition+0x10>)
 801ca4a:	4603      	mov	r3, r0
 801ca4c:	e892 0003 	ldmia.w	r2, {r0, r1}
 801ca50:	e883 0003 	stmia.w	r3, {r0, r1}
 801ca54:	4618      	mov	r0, r3
 801ca56:	4770      	bx	lr
 801ca58:	08020b64 	.word	0x08020b64

0801ca5c <rcl_guard_condition_init>:
 801ca5c:	b082      	sub	sp, #8
 801ca5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ca60:	b087      	sub	sp, #28
 801ca62:	4604      	mov	r4, r0
 801ca64:	460d      	mov	r5, r1
 801ca66:	f10d 0e30 	add.w	lr, sp, #48	; 0x30
 801ca6a:	f10d 0c04 	add.w	ip, sp, #4
 801ca6e:	e9ce 2300 	strd	r2, r3, [lr]
 801ca72:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801ca76:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801ca7a:	f8de 3000 	ldr.w	r3, [lr]
 801ca7e:	a801      	add	r0, sp, #4
 801ca80:	f8cc 3000 	str.w	r3, [ip]
 801ca84:	f7f2 f8d4 	bl	800ec30 <rcutils_allocator_is_valid>
 801ca88:	b354      	cbz	r4, 801cae0 <rcl_guard_condition_init+0x84>
 801ca8a:	f080 0301 	eor.w	r3, r0, #1
 801ca8e:	b2db      	uxtb	r3, r3
 801ca90:	bb33      	cbnz	r3, 801cae0 <rcl_guard_condition_init+0x84>
 801ca92:	6866      	ldr	r6, [r4, #4]
 801ca94:	b9ee      	cbnz	r6, 801cad2 <rcl_guard_condition_init+0x76>
 801ca96:	b31d      	cbz	r5, 801cae0 <rcl_guard_condition_init+0x84>
 801ca98:	4628      	mov	r0, r5
 801ca9a:	f7f8 ffa5 	bl	80159e8 <rcl_context_is_valid>
 801ca9e:	b308      	cbz	r0, 801cae4 <rcl_guard_condition_init+0x88>
 801caa0:	9b01      	ldr	r3, [sp, #4]
 801caa2:	201c      	movs	r0, #28
 801caa4:	9905      	ldr	r1, [sp, #20]
 801caa6:	4798      	blx	r3
 801caa8:	4607      	mov	r7, r0
 801caaa:	6060      	str	r0, [r4, #4]
 801caac:	b310      	cbz	r0, 801caf4 <rcl_guard_condition_init+0x98>
 801caae:	6828      	ldr	r0, [r5, #0]
 801cab0:	3028      	adds	r0, #40	; 0x28
 801cab2:	f000 fbbb 	bl	801d22c <rmw_create_guard_condition>
 801cab6:	6038      	str	r0, [r7, #0]
 801cab8:	6860      	ldr	r0, [r4, #4]
 801caba:	6807      	ldr	r7, [r0, #0]
 801cabc:	b1a7      	cbz	r7, 801cae8 <rcl_guard_condition_init+0x8c>
 801cabe:	2301      	movs	r3, #1
 801cac0:	ac01      	add	r4, sp, #4
 801cac2:	f100 0708 	add.w	r7, r0, #8
 801cac6:	7103      	strb	r3, [r0, #4]
 801cac8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801caca:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801cacc:	6823      	ldr	r3, [r4, #0]
 801cace:	603b      	str	r3, [r7, #0]
 801cad0:	e000      	b.n	801cad4 <rcl_guard_condition_init+0x78>
 801cad2:	2664      	movs	r6, #100	; 0x64
 801cad4:	4630      	mov	r0, r6
 801cad6:	b007      	add	sp, #28
 801cad8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801cadc:	b002      	add	sp, #8
 801cade:	4770      	bx	lr
 801cae0:	260b      	movs	r6, #11
 801cae2:	e7f7      	b.n	801cad4 <rcl_guard_condition_init+0x78>
 801cae4:	2665      	movs	r6, #101	; 0x65
 801cae6:	e7f5      	b.n	801cad4 <rcl_guard_condition_init+0x78>
 801cae8:	9b02      	ldr	r3, [sp, #8]
 801caea:	2601      	movs	r6, #1
 801caec:	9905      	ldr	r1, [sp, #20]
 801caee:	4798      	blx	r3
 801caf0:	6067      	str	r7, [r4, #4]
 801caf2:	e7ef      	b.n	801cad4 <rcl_guard_condition_init+0x78>
 801caf4:	260a      	movs	r6, #10
 801caf6:	e7ed      	b.n	801cad4 <rcl_guard_condition_init+0x78>

0801caf8 <rcl_guard_condition_init_from_rmw>:
 801caf8:	b082      	sub	sp, #8
 801cafa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cafe:	b086      	sub	sp, #24
 801cb00:	4604      	mov	r4, r0
 801cb02:	460e      	mov	r6, r1
 801cb04:	4615      	mov	r5, r2
 801cb06:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801cb0a:	f10d 0e04 	add.w	lr, sp, #4
 801cb0e:	f84c 3f04 	str.w	r3, [ip, #4]!
 801cb12:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801cb16:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801cb1a:	f8dc 3000 	ldr.w	r3, [ip]
 801cb1e:	a801      	add	r0, sp, #4
 801cb20:	f8ce 3000 	str.w	r3, [lr]
 801cb24:	f7f2 f884 	bl	800ec30 <rcutils_allocator_is_valid>
 801cb28:	f080 0301 	eor.w	r3, r0, #1
 801cb2c:	b2db      	uxtb	r3, r3
 801cb2e:	bb3b      	cbnz	r3, 801cb80 <rcl_guard_condition_init_from_rmw+0x88>
 801cb30:	b334      	cbz	r4, 801cb80 <rcl_guard_condition_init_from_rmw+0x88>
 801cb32:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801cb36:	f1b8 0f00 	cmp.w	r8, #0
 801cb3a:	d11a      	bne.n	801cb72 <rcl_guard_condition_init_from_rmw+0x7a>
 801cb3c:	b305      	cbz	r5, 801cb80 <rcl_guard_condition_init_from_rmw+0x88>
 801cb3e:	4628      	mov	r0, r5
 801cb40:	f7f8 ff52 	bl	80159e8 <rcl_context_is_valid>
 801cb44:	b1f0      	cbz	r0, 801cb84 <rcl_guard_condition_init_from_rmw+0x8c>
 801cb46:	9b01      	ldr	r3, [sp, #4]
 801cb48:	201c      	movs	r0, #28
 801cb4a:	9905      	ldr	r1, [sp, #20]
 801cb4c:	4798      	blx	r3
 801cb4e:	4607      	mov	r7, r0
 801cb50:	6060      	str	r0, [r4, #4]
 801cb52:	b320      	cbz	r0, 801cb9e <rcl_guard_condition_init_from_rmw+0xa6>
 801cb54:	b1c6      	cbz	r6, 801cb88 <rcl_guard_condition_init_from_rmw+0x90>
 801cb56:	6006      	str	r6, [r0, #0]
 801cb58:	f880 8004 	strb.w	r8, [r0, #4]
 801cb5c:	ac01      	add	r4, sp, #4
 801cb5e:	f107 0c08 	add.w	ip, r7, #8
 801cb62:	2500      	movs	r5, #0
 801cb64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801cb66:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801cb6a:	6823      	ldr	r3, [r4, #0]
 801cb6c:	f8cc 3000 	str.w	r3, [ip]
 801cb70:	e000      	b.n	801cb74 <rcl_guard_condition_init_from_rmw+0x7c>
 801cb72:	2564      	movs	r5, #100	; 0x64
 801cb74:	4628      	mov	r0, r5
 801cb76:	b006      	add	sp, #24
 801cb78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801cb7c:	b002      	add	sp, #8
 801cb7e:	4770      	bx	lr
 801cb80:	250b      	movs	r5, #11
 801cb82:	e7f7      	b.n	801cb74 <rcl_guard_condition_init_from_rmw+0x7c>
 801cb84:	2565      	movs	r5, #101	; 0x65
 801cb86:	e7f5      	b.n	801cb74 <rcl_guard_condition_init_from_rmw+0x7c>
 801cb88:	6828      	ldr	r0, [r5, #0]
 801cb8a:	3028      	adds	r0, #40	; 0x28
 801cb8c:	f000 fb4e 	bl	801d22c <rmw_create_guard_condition>
 801cb90:	6038      	str	r0, [r7, #0]
 801cb92:	6867      	ldr	r7, [r4, #4]
 801cb94:	683e      	ldr	r6, [r7, #0]
 801cb96:	b126      	cbz	r6, 801cba2 <rcl_guard_condition_init_from_rmw+0xaa>
 801cb98:	2301      	movs	r3, #1
 801cb9a:	713b      	strb	r3, [r7, #4]
 801cb9c:	e7de      	b.n	801cb5c <rcl_guard_condition_init_from_rmw+0x64>
 801cb9e:	250a      	movs	r5, #10
 801cba0:	e7e8      	b.n	801cb74 <rcl_guard_condition_init_from_rmw+0x7c>
 801cba2:	9b02      	ldr	r3, [sp, #8]
 801cba4:	4638      	mov	r0, r7
 801cba6:	9905      	ldr	r1, [sp, #20]
 801cba8:	2501      	movs	r5, #1
 801cbaa:	4798      	blx	r3
 801cbac:	6066      	str	r6, [r4, #4]
 801cbae:	e7e1      	b.n	801cb74 <rcl_guard_condition_init_from_rmw+0x7c>

0801cbb0 <rcl_guard_condition_fini>:
 801cbb0:	b570      	push	{r4, r5, r6, lr}
 801cbb2:	b082      	sub	sp, #8
 801cbb4:	b1f0      	cbz	r0, 801cbf4 <rcl_guard_condition_fini+0x44>
 801cbb6:	6843      	ldr	r3, [r0, #4]
 801cbb8:	4604      	mov	r4, r0
 801cbba:	b163      	cbz	r3, 801cbd6 <rcl_guard_condition_fini+0x26>
 801cbbc:	6818      	ldr	r0, [r3, #0]
 801cbbe:	68de      	ldr	r6, [r3, #12]
 801cbc0:	6999      	ldr	r1, [r3, #24]
 801cbc2:	b160      	cbz	r0, 801cbde <rcl_guard_condition_fini+0x2e>
 801cbc4:	791d      	ldrb	r5, [r3, #4]
 801cbc6:	b965      	cbnz	r5, 801cbe2 <rcl_guard_condition_fini+0x32>
 801cbc8:	4618      	mov	r0, r3
 801cbca:	47b0      	blx	r6
 801cbcc:	2300      	movs	r3, #0
 801cbce:	4628      	mov	r0, r5
 801cbd0:	6063      	str	r3, [r4, #4]
 801cbd2:	b002      	add	sp, #8
 801cbd4:	bd70      	pop	{r4, r5, r6, pc}
 801cbd6:	461d      	mov	r5, r3
 801cbd8:	4628      	mov	r0, r5
 801cbda:	b002      	add	sp, #8
 801cbdc:	bd70      	pop	{r4, r5, r6, pc}
 801cbde:	4605      	mov	r5, r0
 801cbe0:	e7f2      	b.n	801cbc8 <rcl_guard_condition_fini+0x18>
 801cbe2:	9101      	str	r1, [sp, #4]
 801cbe4:	f000 fb38 	bl	801d258 <rmw_destroy_guard_condition>
 801cbe8:	1e05      	subs	r5, r0, #0
 801cbea:	6863      	ldr	r3, [r4, #4]
 801cbec:	9901      	ldr	r1, [sp, #4]
 801cbee:	bf18      	it	ne
 801cbf0:	2501      	movne	r5, #1
 801cbf2:	e7e9      	b.n	801cbc8 <rcl_guard_condition_fini+0x18>
 801cbf4:	250b      	movs	r5, #11
 801cbf6:	4628      	mov	r0, r5
 801cbf8:	b002      	add	sp, #8
 801cbfa:	bd70      	pop	{r4, r5, r6, pc}

0801cbfc <rcl_guard_condition_get_default_options>:
 801cbfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cbfe:	b087      	sub	sp, #28
 801cc00:	4606      	mov	r6, r0
 801cc02:	4c0b      	ldr	r4, [pc, #44]	; (801cc30 <rcl_guard_condition_get_default_options+0x34>)
 801cc04:	4668      	mov	r0, sp
 801cc06:	f7f2 f805 	bl	800ec14 <rcutils_get_default_allocator>
 801cc0a:	46ee      	mov	lr, sp
 801cc0c:	46a4      	mov	ip, r4
 801cc0e:	4625      	mov	r5, r4
 801cc10:	4634      	mov	r4, r6
 801cc12:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801cc16:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801cc1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801cc1c:	f8de 7000 	ldr.w	r7, [lr]
 801cc20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801cc22:	4630      	mov	r0, r6
 801cc24:	f8cc 7000 	str.w	r7, [ip]
 801cc28:	6027      	str	r7, [r4, #0]
 801cc2a:	b007      	add	sp, #28
 801cc2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cc2e:	bf00      	nop
 801cc30:	20010e58 	.word	0x20010e58

0801cc34 <rcl_trigger_guard_condition>:
 801cc34:	b148      	cbz	r0, 801cc4a <rcl_trigger_guard_condition+0x16>
 801cc36:	b508      	push	{r3, lr}
 801cc38:	6843      	ldr	r3, [r0, #4]
 801cc3a:	b143      	cbz	r3, 801cc4e <rcl_trigger_guard_condition+0x1a>
 801cc3c:	6818      	ldr	r0, [r3, #0]
 801cc3e:	f000 fb1f 	bl	801d280 <rmw_trigger_guard_condition>
 801cc42:	3800      	subs	r0, #0
 801cc44:	bf18      	it	ne
 801cc46:	2001      	movne	r0, #1
 801cc48:	bd08      	pop	{r3, pc}
 801cc4a:	200b      	movs	r0, #11
 801cc4c:	4770      	bx	lr
 801cc4e:	200b      	movs	r0, #11
 801cc50:	bd08      	pop	{r3, pc}
 801cc52:	bf00      	nop

0801cc54 <rcl_guard_condition_get_rmw_handle>:
 801cc54:	b110      	cbz	r0, 801cc5c <rcl_guard_condition_get_rmw_handle+0x8>
 801cc56:	6840      	ldr	r0, [r0, #4]
 801cc58:	b100      	cbz	r0, 801cc5c <rcl_guard_condition_get_rmw_handle+0x8>
 801cc5a:	6800      	ldr	r0, [r0, #0]
 801cc5c:	4770      	bx	lr
 801cc5e:	bf00      	nop

0801cc60 <rcl_validate_topic_name>:
 801cc60:	2800      	cmp	r0, #0
 801cc62:	f000 8089 	beq.w	801cd78 <rcl_validate_topic_name+0x118>
 801cc66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cc6a:	460e      	mov	r6, r1
 801cc6c:	2900      	cmp	r1, #0
 801cc6e:	f000 8085 	beq.w	801cd7c <rcl_validate_topic_name+0x11c>
 801cc72:	4604      	mov	r4, r0
 801cc74:	4617      	mov	r7, r2
 801cc76:	f7e3 fb43 	bl	8000300 <strlen>
 801cc7a:	b1b0      	cbz	r0, 801ccaa <rcl_validate_topic_name+0x4a>
 801cc7c:	f894 e000 	ldrb.w	lr, [r4]
 801cc80:	f8df c160 	ldr.w	ip, [pc, #352]	; 801cde4 <rcl_validate_topic_name+0x184>
 801cc84:	f81c 300e 	ldrb.w	r3, [ip, lr]
 801cc88:	f013 0304 	ands.w	r3, r3, #4
 801cc8c:	d139      	bne.n	801cd02 <rcl_validate_topic_name+0xa2>
 801cc8e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 801cc92:	f814 2008 	ldrb.w	r2, [r4, r8]
 801cc96:	2a2f      	cmp	r2, #47	; 0x2f
 801cc98:	d10f      	bne.n	801ccba <rcl_validate_topic_name+0x5a>
 801cc9a:	2202      	movs	r2, #2
 801cc9c:	6032      	str	r2, [r6, #0]
 801cc9e:	b3a7      	cbz	r7, 801cd0a <rcl_validate_topic_name+0xaa>
 801cca0:	4618      	mov	r0, r3
 801cca2:	f8c7 8000 	str.w	r8, [r7]
 801cca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ccaa:	2301      	movs	r3, #1
 801ccac:	6033      	str	r3, [r6, #0]
 801ccae:	b367      	cbz	r7, 801cd0a <rcl_validate_topic_name+0xaa>
 801ccb0:	2300      	movs	r3, #0
 801ccb2:	4618      	mov	r0, r3
 801ccb4:	603b      	str	r3, [r7, #0]
 801ccb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ccba:	f104 3aff 	add.w	sl, r4, #4294967295	; 0xffffffff
 801ccbe:	461d      	mov	r5, r3
 801ccc0:	4619      	mov	r1, r3
 801ccc2:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 801ccc6:	f1a2 0930 	sub.w	r9, r2, #48	; 0x30
 801ccca:	f1b9 0f09 	cmp.w	r9, #9
 801ccce:	d91f      	bls.n	801cd10 <rcl_validate_topic_name+0xb0>
 801ccd0:	f022 0920 	bic.w	r9, r2, #32
 801ccd4:	f1a9 0941 	sub.w	r9, r9, #65	; 0x41
 801ccd8:	f1b9 0f19 	cmp.w	r9, #25
 801ccdc:	d918      	bls.n	801cd10 <rcl_validate_topic_name+0xb0>
 801ccde:	2a5f      	cmp	r2, #95	; 0x5f
 801cce0:	d024      	beq.n	801cd2c <rcl_validate_topic_name+0xcc>
 801cce2:	2a2f      	cmp	r2, #47	; 0x2f
 801cce4:	d058      	beq.n	801cd98 <rcl_validate_topic_name+0x138>
 801cce6:	2a7e      	cmp	r2, #126	; 0x7e
 801cce8:	d04a      	beq.n	801cd80 <rcl_validate_topic_name+0x120>
 801ccea:	2a7b      	cmp	r2, #123	; 0x7b
 801ccec:	d05b      	beq.n	801cda6 <rcl_validate_topic_name+0x146>
 801ccee:	2a7d      	cmp	r2, #125	; 0x7d
 801ccf0:	d169      	bne.n	801cdc6 <rcl_validate_topic_name+0x166>
 801ccf2:	2d00      	cmp	r5, #0
 801ccf4:	d15c      	bne.n	801cdb0 <rcl_validate_topic_name+0x150>
 801ccf6:	2305      	movs	r3, #5
 801ccf8:	6033      	str	r3, [r6, #0]
 801ccfa:	b137      	cbz	r7, 801cd0a <rcl_validate_topic_name+0xaa>
 801ccfc:	2000      	movs	r0, #0
 801ccfe:	6039      	str	r1, [r7, #0]
 801cd00:	e7d9      	b.n	801ccb6 <rcl_validate_topic_name+0x56>
 801cd02:	2304      	movs	r3, #4
 801cd04:	6033      	str	r3, [r6, #0]
 801cd06:	2f00      	cmp	r7, #0
 801cd08:	d1d2      	bne.n	801ccb0 <rcl_validate_topic_name+0x50>
 801cd0a:	2000      	movs	r0, #0
 801cd0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cd10:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801cd14:	0752      	lsls	r2, r2, #29
 801cd16:	d509      	bpl.n	801cd2c <rcl_validate_topic_name+0xcc>
 801cd18:	2900      	cmp	r1, #0
 801cd1a:	bf0c      	ite	eq
 801cd1c:	2200      	moveq	r2, #0
 801cd1e:	f005 0201 	andne.w	r2, r5, #1
 801cd22:	b11a      	cbz	r2, 801cd2c <rcl_validate_topic_name+0xcc>
 801cd24:	1e4d      	subs	r5, r1, #1
 801cd26:	429d      	cmp	r5, r3
 801cd28:	d031      	beq.n	801cd8e <rcl_validate_topic_name+0x12e>
 801cd2a:	4615      	mov	r5, r2
 801cd2c:	3101      	adds	r1, #1
 801cd2e:	4288      	cmp	r0, r1
 801cd30:	d1c7      	bne.n	801ccc2 <rcl_validate_topic_name+0x62>
 801cd32:	2d00      	cmp	r5, #0
 801cd34:	d142      	bne.n	801cdbc <rcl_validate_topic_name+0x15c>
 801cd36:	4628      	mov	r0, r5
 801cd38:	2301      	movs	r3, #1
 801cd3a:	e00c      	b.n	801cd56 <rcl_validate_topic_name+0xf6>
 801cd3c:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 801cd40:	d101      	bne.n	801cd46 <rcl_validate_topic_name+0xe6>
 801cd42:	2801      	cmp	r0, #1
 801cd44:	d047      	beq.n	801cdd6 <rcl_validate_topic_name+0x176>
 801cd46:	1c5a      	adds	r2, r3, #1
 801cd48:	428b      	cmp	r3, r1
 801cd4a:	f100 0001 	add.w	r0, r0, #1
 801cd4e:	f104 0401 	add.w	r4, r4, #1
 801cd52:	4613      	mov	r3, r2
 801cd54:	d22e      	bcs.n	801cdb4 <rcl_validate_topic_name+0x154>
 801cd56:	4580      	cmp	r8, r0
 801cd58:	d0f5      	beq.n	801cd46 <rcl_validate_topic_name+0xe6>
 801cd5a:	7822      	ldrb	r2, [r4, #0]
 801cd5c:	2a2f      	cmp	r2, #47	; 0x2f
 801cd5e:	d1ed      	bne.n	801cd3c <rcl_validate_topic_name+0xdc>
 801cd60:	7862      	ldrb	r2, [r4, #1]
 801cd62:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801cd66:	0752      	lsls	r2, r2, #29
 801cd68:	d5ed      	bpl.n	801cd46 <rcl_validate_topic_name+0xe6>
 801cd6a:	2204      	movs	r2, #4
 801cd6c:	6032      	str	r2, [r6, #0]
 801cd6e:	2f00      	cmp	r7, #0
 801cd70:	d0cb      	beq.n	801cd0a <rcl_validate_topic_name+0xaa>
 801cd72:	2000      	movs	r0, #0
 801cd74:	603b      	str	r3, [r7, #0]
 801cd76:	e79e      	b.n	801ccb6 <rcl_validate_topic_name+0x56>
 801cd78:	200b      	movs	r0, #11
 801cd7a:	4770      	bx	lr
 801cd7c:	200b      	movs	r0, #11
 801cd7e:	e79a      	b.n	801ccb6 <rcl_validate_topic_name+0x56>
 801cd80:	2900      	cmp	r1, #0
 801cd82:	d0d3      	beq.n	801cd2c <rcl_validate_topic_name+0xcc>
 801cd84:	2306      	movs	r3, #6
 801cd86:	6033      	str	r3, [r6, #0]
 801cd88:	2f00      	cmp	r7, #0
 801cd8a:	d1b7      	bne.n	801ccfc <rcl_validate_topic_name+0x9c>
 801cd8c:	e7bd      	b.n	801cd0a <rcl_validate_topic_name+0xaa>
 801cd8e:	2309      	movs	r3, #9
 801cd90:	6033      	str	r3, [r6, #0]
 801cd92:	2f00      	cmp	r7, #0
 801cd94:	d1b2      	bne.n	801ccfc <rcl_validate_topic_name+0x9c>
 801cd96:	e7b8      	b.n	801cd0a <rcl_validate_topic_name+0xaa>
 801cd98:	2d00      	cmp	r5, #0
 801cd9a:	d0c7      	beq.n	801cd2c <rcl_validate_topic_name+0xcc>
 801cd9c:	2308      	movs	r3, #8
 801cd9e:	6033      	str	r3, [r6, #0]
 801cda0:	2f00      	cmp	r7, #0
 801cda2:	d1ab      	bne.n	801ccfc <rcl_validate_topic_name+0x9c>
 801cda4:	e7b1      	b.n	801cd0a <rcl_validate_topic_name+0xaa>
 801cda6:	2d00      	cmp	r5, #0
 801cda8:	d1f8      	bne.n	801cd9c <rcl_validate_topic_name+0x13c>
 801cdaa:	460b      	mov	r3, r1
 801cdac:	2501      	movs	r5, #1
 801cdae:	e7bd      	b.n	801cd2c <rcl_validate_topic_name+0xcc>
 801cdb0:	2500      	movs	r5, #0
 801cdb2:	e7bb      	b.n	801cd2c <rcl_validate_topic_name+0xcc>
 801cdb4:	2300      	movs	r3, #0
 801cdb6:	4618      	mov	r0, r3
 801cdb8:	6033      	str	r3, [r6, #0]
 801cdba:	e77c      	b.n	801ccb6 <rcl_validate_topic_name+0x56>
 801cdbc:	2205      	movs	r2, #5
 801cdbe:	6032      	str	r2, [r6, #0]
 801cdc0:	2f00      	cmp	r7, #0
 801cdc2:	d1d6      	bne.n	801cd72 <rcl_validate_topic_name+0x112>
 801cdc4:	e7a1      	b.n	801cd0a <rcl_validate_topic_name+0xaa>
 801cdc6:	2d00      	cmp	r5, #0
 801cdc8:	bf14      	ite	ne
 801cdca:	2308      	movne	r3, #8
 801cdcc:	2303      	moveq	r3, #3
 801cdce:	6033      	str	r3, [r6, #0]
 801cdd0:	2f00      	cmp	r7, #0
 801cdd2:	d193      	bne.n	801ccfc <rcl_validate_topic_name+0x9c>
 801cdd4:	e799      	b.n	801cd0a <rcl_validate_topic_name+0xaa>
 801cdd6:	2307      	movs	r3, #7
 801cdd8:	6033      	str	r3, [r6, #0]
 801cdda:	2f00      	cmp	r7, #0
 801cddc:	d095      	beq.n	801cd0a <rcl_validate_topic_name+0xaa>
 801cdde:	2301      	movs	r3, #1
 801cde0:	e7c7      	b.n	801cd72 <rcl_validate_topic_name+0x112>
 801cde2:	bf00      	nop
 801cde4:	08020d28 	.word	0x08020d28

0801cde8 <rcutils_split>:
 801cde8:	b082      	sub	sp, #8
 801cdea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cdee:	b08d      	sub	sp, #52	; 0x34
 801cdf0:	ac16      	add	r4, sp, #88	; 0x58
 801cdf2:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 801cdf4:	e884 000c 	stmia.w	r4, {r2, r3}
 801cdf8:	2f00      	cmp	r7, #0
 801cdfa:	f000 80a8 	beq.w	801cf4e <rcutils_split+0x166>
 801cdfe:	4605      	mov	r5, r0
 801ce00:	2800      	cmp	r0, #0
 801ce02:	d07e      	beq.n	801cf02 <rcutils_split+0x11a>
 801ce04:	7803      	ldrb	r3, [r0, #0]
 801ce06:	2b00      	cmp	r3, #0
 801ce08:	d07b      	beq.n	801cf02 <rcutils_split+0x11a>
 801ce0a:	f10d 0c58 	add.w	ip, sp, #88	; 0x58
 801ce0e:	460e      	mov	r6, r1
 801ce10:	9203      	str	r2, [sp, #12]
 801ce12:	f107 0408 	add.w	r4, r7, #8
 801ce16:	f8dd b068 	ldr.w	fp, [sp, #104]	; 0x68
 801ce1a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801ce1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801ce20:	4628      	mov	r0, r5
 801ce22:	f8c4 b000 	str.w	fp, [r4]
 801ce26:	f7e3 fa6b 	bl	8000300 <strlen>
 801ce2a:	782c      	ldrb	r4, [r5, #0]
 801ce2c:	182b      	adds	r3, r5, r0
 801ce2e:	1ba4      	subs	r4, r4, r6
 801ce30:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801ce34:	fab4 f484 	clz	r4, r4
 801ce38:	42b3      	cmp	r3, r6
 801ce3a:	bf14      	ite	ne
 801ce3c:	4680      	movne	r8, r0
 801ce3e:	f1a0 0801 	subeq.w	r8, r0, #1
 801ce42:	2001      	movs	r0, #1
 801ce44:	0964      	lsrs	r4, r4, #5
 801ce46:	6038      	str	r0, [r7, #0]
 801ce48:	4544      	cmp	r4, r8
 801ce4a:	d26b      	bcs.n	801cf24 <rcutils_split+0x13c>
 801ce4c:	192b      	adds	r3, r5, r4
 801ce4e:	eb05 0108 	add.w	r1, r5, r8
 801ce52:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ce56:	42b2      	cmp	r2, r6
 801ce58:	d101      	bne.n	801ce5e <rcutils_split+0x76>
 801ce5a:	3001      	adds	r0, #1
 801ce5c:	6038      	str	r0, [r7, #0]
 801ce5e:	4299      	cmp	r1, r3
 801ce60:	d1f7      	bne.n	801ce52 <rcutils_split+0x6a>
 801ce62:	9b03      	ldr	r3, [sp, #12]
 801ce64:	0080      	lsls	r0, r0, #2
 801ce66:	4659      	mov	r1, fp
 801ce68:	4798      	blx	r3
 801ce6a:	4603      	mov	r3, r0
 801ce6c:	6078      	str	r0, [r7, #4]
 801ce6e:	2800      	cmp	r0, #0
 801ce70:	d05f      	beq.n	801cf32 <rcutils_split+0x14a>
 801ce72:	f04f 0a00 	mov.w	sl, #0
 801ce76:	46a1      	mov	r9, r4
 801ce78:	e002      	b.n	801ce80 <rcutils_split+0x98>
 801ce7a:	3401      	adds	r4, #1
 801ce7c:	45a0      	cmp	r8, r4
 801ce7e:	d922      	bls.n	801cec6 <rcutils_split+0xde>
 801ce80:	5d2a      	ldrb	r2, [r5, r4]
 801ce82:	42b2      	cmp	r2, r6
 801ce84:	d1f9      	bne.n	801ce7a <rcutils_split+0x92>
 801ce86:	45a1      	cmp	r9, r4
 801ce88:	eba4 0209 	sub.w	r2, r4, r9
 801ce8c:	d032      	beq.n	801cef4 <rcutils_split+0x10c>
 801ce8e:	4659      	mov	r1, fp
 801ce90:	1c90      	adds	r0, r2, #2
 801ce92:	9302      	str	r3, [sp, #8]
 801ce94:	9b03      	ldr	r3, [sp, #12]
 801ce96:	9201      	str	r2, [sp, #4]
 801ce98:	4798      	blx	r3
 801ce9a:	9a01      	ldr	r2, [sp, #4]
 801ce9c:	9b02      	ldr	r3, [sp, #8]
 801ce9e:	1c51      	adds	r1, r2, #1
 801cea0:	687a      	ldr	r2, [r7, #4]
 801cea2:	f843 002a 	str.w	r0, [r3, sl, lsl #2]
 801cea6:	eb05 0309 	add.w	r3, r5, r9
 801ceaa:	f852 002a 	ldr.w	r0, [r2, sl, lsl #2]
 801ceae:	2800      	cmp	r0, #0
 801ceb0:	d04f      	beq.n	801cf52 <rcutils_split+0x16a>
 801ceb2:	4a2b      	ldr	r2, [pc, #172]	; (801cf60 <rcutils_split+0x178>)
 801ceb4:	f10a 0a01 	add.w	sl, sl, #1
 801ceb8:	f000 fd92 	bl	801d9e0 <sniprintf>
 801cebc:	687b      	ldr	r3, [r7, #4]
 801cebe:	3401      	adds	r4, #1
 801cec0:	45a0      	cmp	r8, r4
 801cec2:	46a1      	mov	r9, r4
 801cec4:	d8dc      	bhi.n	801ce80 <rcutils_split+0x98>
 801cec6:	45a1      	cmp	r9, r4
 801cec8:	d039      	beq.n	801cf3e <rcutils_split+0x156>
 801ceca:	eba4 0409 	sub.w	r4, r4, r9
 801cece:	4659      	mov	r1, fp
 801ced0:	9301      	str	r3, [sp, #4]
 801ced2:	1ca0      	adds	r0, r4, #2
 801ced4:	9b03      	ldr	r3, [sp, #12]
 801ced6:	4798      	blx	r3
 801ced8:	9b01      	ldr	r3, [sp, #4]
 801ceda:	4a21      	ldr	r2, [pc, #132]	; (801cf60 <rcutils_split+0x178>)
 801cedc:	1c61      	adds	r1, r4, #1
 801cede:	f843 002a 	str.w	r0, [r3, sl, lsl #2]
 801cee2:	eb05 0309 	add.w	r3, r5, r9
 801cee6:	6878      	ldr	r0, [r7, #4]
 801cee8:	2500      	movs	r5, #0
 801ceea:	f850 002a 	ldr.w	r0, [r0, sl, lsl #2]
 801ceee:	f000 fd77 	bl	801d9e0 <sniprintf>
 801cef2:	e011      	b.n	801cf18 <rcutils_split+0x130>
 801cef4:	683a      	ldr	r2, [r7, #0]
 801cef6:	2100      	movs	r1, #0
 801cef8:	3a01      	subs	r2, #1
 801cefa:	603a      	str	r2, [r7, #0]
 801cefc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 801cf00:	e7dd      	b.n	801cebe <rcutils_split+0xd6>
 801cf02:	ac04      	add	r4, sp, #16
 801cf04:	a804      	add	r0, sp, #16
 801cf06:	f000 f82d 	bl	801cf64 <rcutils_get_zero_initialized_string_array>
 801cf0a:	2500      	movs	r5, #0
 801cf0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801cf0e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801cf10:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801cf14:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 801cf18:	4628      	mov	r0, r5
 801cf1a:	b00d      	add	sp, #52	; 0x34
 801cf1c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cf20:	b002      	add	sp, #8
 801cf22:	4770      	bx	lr
 801cf24:	9b03      	ldr	r3, [sp, #12]
 801cf26:	4659      	mov	r1, fp
 801cf28:	2004      	movs	r0, #4
 801cf2a:	4798      	blx	r3
 801cf2c:	4603      	mov	r3, r0
 801cf2e:	6078      	str	r0, [r7, #4]
 801cf30:	b928      	cbnz	r0, 801cf3e <rcutils_split+0x156>
 801cf32:	4638      	mov	r0, r7
 801cf34:	f000 f834 	bl	801cfa0 <rcutils_string_array_fini>
 801cf38:	b970      	cbnz	r0, 801cf58 <rcutils_split+0x170>
 801cf3a:	2502      	movs	r5, #2
 801cf3c:	e7ec      	b.n	801cf18 <rcutils_split+0x130>
 801cf3e:	683a      	ldr	r2, [r7, #0]
 801cf40:	2100      	movs	r1, #0
 801cf42:	3a01      	subs	r2, #1
 801cf44:	460d      	mov	r5, r1
 801cf46:	603a      	str	r2, [r7, #0]
 801cf48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 801cf4c:	e7e4      	b.n	801cf18 <rcutils_split+0x130>
 801cf4e:	250b      	movs	r5, #11
 801cf50:	e7e2      	b.n	801cf18 <rcutils_split+0x130>
 801cf52:	f8c7 a000 	str.w	sl, [r7]
 801cf56:	e7ec      	b.n	801cf32 <rcutils_split+0x14a>
 801cf58:	2502      	movs	r5, #2
 801cf5a:	f7f1 fe8d 	bl	800ec78 <rcutils_reset_error>
 801cf5e:	e7db      	b.n	801cf18 <rcutils_split+0x130>
 801cf60:	0801fbfc 	.word	0x0801fbfc

0801cf64 <rcutils_get_zero_initialized_string_array>:
 801cf64:	b570      	push	{r4, r5, r6, lr}
 801cf66:	b086      	sub	sp, #24
 801cf68:	4606      	mov	r6, r0
 801cf6a:	4c0c      	ldr	r4, [pc, #48]	; (801cf9c <rcutils_get_zero_initialized_string_array+0x38>)
 801cf6c:	4668      	mov	r0, sp
 801cf6e:	f7f1 fe25 	bl	800ebbc <rcutils_get_zero_initialized_allocator>
 801cf72:	46ee      	mov	lr, sp
 801cf74:	f104 0508 	add.w	r5, r4, #8
 801cf78:	46a4      	mov	ip, r4
 801cf7a:	4634      	mov	r4, r6
 801cf7c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801cf80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801cf82:	f8de 3000 	ldr.w	r3, [lr]
 801cf86:	602b      	str	r3, [r5, #0]
 801cf88:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801cf8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801cf8e:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 801cf92:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801cf96:	4630      	mov	r0, r6
 801cf98:	b006      	add	sp, #24
 801cf9a:	bd70      	pop	{r4, r5, r6, pc}
 801cf9c:	20010e6c 	.word	0x20010e6c

0801cfa0 <rcutils_string_array_fini>:
 801cfa0:	b328      	cbz	r0, 801cfee <rcutils_string_array_fini+0x4e>
 801cfa2:	b570      	push	{r4, r5, r6, lr}
 801cfa4:	4604      	mov	r4, r0
 801cfa6:	6840      	ldr	r0, [r0, #4]
 801cfa8:	b1e0      	cbz	r0, 801cfe4 <rcutils_string_array_fini+0x44>
 801cfaa:	f104 0008 	add.w	r0, r4, #8
 801cfae:	f7f1 fe3f 	bl	800ec30 <rcutils_allocator_is_valid>
 801cfb2:	b1c0      	cbz	r0, 801cfe6 <rcutils_string_array_fini+0x46>
 801cfb4:	6823      	ldr	r3, [r4, #0]
 801cfb6:	b1c3      	cbz	r3, 801cfea <rcutils_string_array_fini+0x4a>
 801cfb8:	2500      	movs	r5, #0
 801cfba:	6860      	ldr	r0, [r4, #4]
 801cfbc:	462e      	mov	r6, r5
 801cfbe:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801cfc2:	68e3      	ldr	r3, [r4, #12]
 801cfc4:	69a1      	ldr	r1, [r4, #24]
 801cfc6:	4798      	blx	r3
 801cfc8:	e9d4 3000 	ldrd	r3, r0, [r4]
 801cfcc:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 801cfd0:	3501      	adds	r5, #1
 801cfd2:	429d      	cmp	r5, r3
 801cfd4:	d3f3      	bcc.n	801cfbe <rcutils_string_array_fini+0x1e>
 801cfd6:	68e3      	ldr	r3, [r4, #12]
 801cfd8:	69a1      	ldr	r1, [r4, #24]
 801cfda:	4798      	blx	r3
 801cfdc:	2300      	movs	r3, #0
 801cfde:	4618      	mov	r0, r3
 801cfe0:	e9c4 3300 	strd	r3, r3, [r4]
 801cfe4:	bd70      	pop	{r4, r5, r6, pc}
 801cfe6:	200b      	movs	r0, #11
 801cfe8:	bd70      	pop	{r4, r5, r6, pc}
 801cfea:	6860      	ldr	r0, [r4, #4]
 801cfec:	e7f3      	b.n	801cfd6 <rcutils_string_array_fini+0x36>
 801cfee:	200b      	movs	r0, #11
 801cff0:	4770      	bx	lr
 801cff2:	bf00      	nop

0801cff4 <rmw_get_zero_initialized_discovery_options>:
 801cff4:	b510      	push	{r4, lr}
 801cff6:	4604      	mov	r4, r0
 801cff8:	2220      	movs	r2, #32
 801cffa:	2100      	movs	r1, #0
 801cffc:	f000 fdca 	bl	801db94 <memset>
 801d000:	4620      	mov	r0, r4
 801d002:	bd10      	pop	{r4, pc}

0801d004 <rmw_discovery_options_init>:
 801d004:	b570      	push	{r4, r5, r6, lr}
 801d006:	b318      	cbz	r0, 801d050 <rmw_discovery_options_init+0x4c>
 801d008:	4604      	mov	r4, r0
 801d00a:	4610      	mov	r0, r2
 801d00c:	460e      	mov	r6, r1
 801d00e:	4615      	mov	r5, r2
 801d010:	f7f1 fe0e 	bl	800ec30 <rcutils_allocator_is_valid>
 801d014:	b1e0      	cbz	r0, 801d050 <rmw_discovery_options_init+0x4c>
 801d016:	68a3      	ldr	r3, [r4, #8]
 801d018:	b9d3      	cbnz	r3, 801d050 <rmw_discovery_options_init+0x4c>
 801d01a:	6863      	ldr	r3, [r4, #4]
 801d01c:	b9c3      	cbnz	r3, 801d050 <rmw_discovery_options_init+0x4c>
 801d01e:	7823      	ldrb	r3, [r4, #0]
 801d020:	b90b      	cbnz	r3, 801d026 <rmw_discovery_options_init+0x22>
 801d022:	2302      	movs	r3, #2
 801d024:	7023      	strb	r3, [r4, #0]
 801d026:	b1a6      	cbz	r6, 801d052 <rmw_discovery_options_init+0x4e>
 801d028:	f44f 7180 	mov.w	r1, #256	; 0x100
 801d02c:	4630      	mov	r0, r6
 801d02e:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
 801d032:	4798      	blx	r3
 801d034:	6060      	str	r0, [r4, #4]
 801d036:	b170      	cbz	r0, 801d056 <rmw_discovery_options_init+0x52>
 801d038:	f104 0c0c 	add.w	ip, r4, #12
 801d03c:	60a6      	str	r6, [r4, #8]
 801d03e:	2600      	movs	r6, #0
 801d040:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801d042:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801d046:	682b      	ldr	r3, [r5, #0]
 801d048:	4630      	mov	r0, r6
 801d04a:	f8cc 3000 	str.w	r3, [ip]
 801d04e:	bd70      	pop	{r4, r5, r6, pc}
 801d050:	260b      	movs	r6, #11
 801d052:	4630      	mov	r0, r6
 801d054:	bd70      	pop	{r4, r5, r6, pc}
 801d056:	260a      	movs	r6, #10
 801d058:	e7fb      	b.n	801d052 <rmw_discovery_options_init+0x4e>
 801d05a:	bf00      	nop

0801d05c <on_status>:
 801d05c:	b082      	sub	sp, #8
 801d05e:	b002      	add	sp, #8
 801d060:	4770      	bx	lr
 801d062:	bf00      	nop

0801d064 <on_topic>:
 801d064:	4a23      	ldr	r2, [pc, #140]	; (801d0f4 <on_topic+0x90>)
 801d066:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d06a:	6812      	ldr	r2, [r2, #0]
 801d06c:	b094      	sub	sp, #80	; 0x50
 801d06e:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 801d070:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
 801d074:	9113      	str	r1, [sp, #76]	; 0x4c
 801d076:	9312      	str	r3, [sp, #72]	; 0x48
 801d078:	b3c2      	cbz	r2, 801d0ec <on_topic+0x88>
 801d07a:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 801d07e:	f89d 004e 	ldrb.w	r0, [sp, #78]	; 0x4e
 801d082:	e001      	b.n	801d088 <on_topic+0x24>
 801d084:	6852      	ldr	r2, [r2, #4]
 801d086:	b38a      	cbz	r2, 801d0ec <on_topic+0x88>
 801d088:	6894      	ldr	r4, [r2, #8]
 801d08a:	8aa3      	ldrh	r3, [r4, #20]
 801d08c:	428b      	cmp	r3, r1
 801d08e:	d1f9      	bne.n	801d084 <on_topic+0x20>
 801d090:	7da3      	ldrb	r3, [r4, #22]
 801d092:	4283      	cmp	r3, r0
 801d094:	d1f6      	bne.n	801d084 <on_topic+0x20>
 801d096:	2248      	movs	r2, #72	; 0x48
 801d098:	f104 0130 	add.w	r1, r4, #48	; 0x30
 801d09c:	4668      	mov	r0, sp
 801d09e:	f000 feaa 	bl	801ddf6 <memcpy>
 801d0a2:	f104 0328 	add.w	r3, r4, #40	; 0x28
 801d0a6:	4620      	mov	r0, r4
 801d0a8:	cb0c      	ldmia	r3, {r2, r3}
 801d0aa:	f7f2 f9fd 	bl	800f4a8 <rmw_uxrce_get_static_input_buffer_for_entity>
 801d0ae:	4607      	mov	r7, r0
 801d0b0:	b1e0      	cbz	r0, 801d0ec <on_topic+0x88>
 801d0b2:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801d0b6:	462a      	mov	r2, r5
 801d0b8:	4630      	mov	r0, r6
 801d0ba:	f108 0110 	add.w	r1, r8, #16
 801d0be:	f7f2 feb9 	bl	800fe34 <ucdr_deserialize_array_uint8_t>
 801d0c2:	b930      	cbnz	r0, 801d0d2 <on_topic+0x6e>
 801d0c4:	4639      	mov	r1, r7
 801d0c6:	480c      	ldr	r0, [pc, #48]	; (801d0f8 <on_topic+0x94>)
 801d0c8:	b014      	add	sp, #80	; 0x50
 801d0ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d0ce:	f7fc bb59 	b.w	8019784 <put_memory>
 801d0d2:	f8c8 4814 	str.w	r4, [r8, #2068]	; 0x814
 801d0d6:	f8c8 5810 	str.w	r5, [r8, #2064]	; 0x810
 801d0da:	f7fd fd7f 	bl	801abdc <rmw_uros_epoch_nanos>
 801d0de:	f508 6202 	add.w	r2, r8, #2080	; 0x820
 801d0e2:	2305      	movs	r3, #5
 801d0e4:	e942 0102 	strd	r0, r1, [r2, #-8]
 801d0e8:	f888 3820 	strb.w	r3, [r8, #2080]	; 0x820
 801d0ec:	b014      	add	sp, #80	; 0x50
 801d0ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d0f2:	bf00      	nop
 801d0f4:	2001063c 	.word	0x2001063c
 801d0f8:	2001062c 	.word	0x2001062c

0801d0fc <on_request>:
 801d0fc:	4824      	ldr	r0, [pc, #144]	; (801d190 <on_request+0x94>)
 801d0fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d102:	6800      	ldr	r0, [r0, #0]
 801d104:	b094      	sub	sp, #80	; 0x50
 801d106:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 801d108:	f8bd 706c 	ldrh.w	r7, [sp, #108]	; 0x6c
 801d10c:	9113      	str	r1, [sp, #76]	; 0x4c
 801d10e:	2800      	cmp	r0, #0
 801d110:	d03b      	beq.n	801d18a <on_request+0x8e>
 801d112:	461d      	mov	r5, r3
 801d114:	e001      	b.n	801d11a <on_request+0x1e>
 801d116:	6840      	ldr	r0, [r0, #4]
 801d118:	b3b8      	cbz	r0, 801d18a <on_request+0x8e>
 801d11a:	6884      	ldr	r4, [r0, #8]
 801d11c:	8b21      	ldrh	r1, [r4, #24]
 801d11e:	4291      	cmp	r1, r2
 801d120:	d1f9      	bne.n	801d116 <on_request+0x1a>
 801d122:	2248      	movs	r2, #72	; 0x48
 801d124:	f104 0128 	add.w	r1, r4, #40	; 0x28
 801d128:	4668      	mov	r0, sp
 801d12a:	f000 fe64 	bl	801ddf6 <memcpy>
 801d12e:	f104 0320 	add.w	r3, r4, #32
 801d132:	4620      	mov	r0, r4
 801d134:	cb0c      	ldmia	r3, {r2, r3}
 801d136:	f7f2 f9b7 	bl	800f4a8 <rmw_uxrce_get_static_input_buffer_for_entity>
 801d13a:	4680      	mov	r8, r0
 801d13c:	b328      	cbz	r0, 801d18a <on_request+0x8e>
 801d13e:	4630      	mov	r0, r6
 801d140:	f8d8 6008 	ldr.w	r6, [r8, #8]
 801d144:	463a      	mov	r2, r7
 801d146:	f106 0110 	add.w	r1, r6, #16
 801d14a:	f7f2 fe73 	bl	800fe34 <ucdr_deserialize_array_uint8_t>
 801d14e:	b930      	cbnz	r0, 801d15e <on_request+0x62>
 801d150:	4641      	mov	r1, r8
 801d152:	4810      	ldr	r0, [pc, #64]	; (801d194 <on_request+0x98>)
 801d154:	b014      	add	sp, #80	; 0x50
 801d156:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d15a:	f7fc bb13 	b.w	8019784 <put_memory>
 801d15e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801d160:	f606 0c28 	addw	ip, r6, #2088	; 0x828
 801d164:	f8c6 4814 	str.w	r4, [r6, #2068]	; 0x814
 801d168:	f8c6 7810 	str.w	r7, [r6, #2064]	; 0x810
 801d16c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801d170:	e895 0003 	ldmia.w	r5, {r0, r1}
 801d174:	e88c 0003 	stmia.w	ip, {r0, r1}
 801d178:	f7fd fd30 	bl	801abdc <rmw_uros_epoch_nanos>
 801d17c:	f506 6202 	add.w	r2, r6, #2080	; 0x820
 801d180:	2303      	movs	r3, #3
 801d182:	e942 0102 	strd	r0, r1, [r2, #-8]
 801d186:	f886 3820 	strb.w	r3, [r6, #2080]	; 0x820
 801d18a:	b014      	add	sp, #80	; 0x50
 801d18c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d190:	2001060c 	.word	0x2001060c
 801d194:	2001062c 	.word	0x2001062c

0801d198 <on_reply>:
 801d198:	4822      	ldr	r0, [pc, #136]	; (801d224 <on_reply+0x8c>)
 801d19a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d19e:	6800      	ldr	r0, [r0, #0]
 801d1a0:	b094      	sub	sp, #80	; 0x50
 801d1a2:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 801d1a4:	f8bd 706c 	ldrh.w	r7, [sp, #108]	; 0x6c
 801d1a8:	9113      	str	r1, [sp, #76]	; 0x4c
 801d1aa:	b3b8      	cbz	r0, 801d21c <on_reply+0x84>
 801d1ac:	461d      	mov	r5, r3
 801d1ae:	e001      	b.n	801d1b4 <on_reply+0x1c>
 801d1b0:	6840      	ldr	r0, [r0, #4]
 801d1b2:	b398      	cbz	r0, 801d21c <on_reply+0x84>
 801d1b4:	6884      	ldr	r4, [r0, #8]
 801d1b6:	8b21      	ldrh	r1, [r4, #24]
 801d1b8:	4291      	cmp	r1, r2
 801d1ba:	d1f9      	bne.n	801d1b0 <on_reply+0x18>
 801d1bc:	2248      	movs	r2, #72	; 0x48
 801d1be:	f104 0128 	add.w	r1, r4, #40	; 0x28
 801d1c2:	4668      	mov	r0, sp
 801d1c4:	f000 fe17 	bl	801ddf6 <memcpy>
 801d1c8:	f104 0320 	add.w	r3, r4, #32
 801d1cc:	4620      	mov	r0, r4
 801d1ce:	cb0c      	ldmia	r3, {r2, r3}
 801d1d0:	f7f2 f96a 	bl	800f4a8 <rmw_uxrce_get_static_input_buffer_for_entity>
 801d1d4:	4680      	mov	r8, r0
 801d1d6:	b308      	cbz	r0, 801d21c <on_reply+0x84>
 801d1d8:	4630      	mov	r0, r6
 801d1da:	f8d8 6008 	ldr.w	r6, [r8, #8]
 801d1de:	463a      	mov	r2, r7
 801d1e0:	f106 0110 	add.w	r1, r6, #16
 801d1e4:	f7f2 fe26 	bl	800fe34 <ucdr_deserialize_array_uint8_t>
 801d1e8:	b930      	cbnz	r0, 801d1f8 <on_reply+0x60>
 801d1ea:	4641      	mov	r1, r8
 801d1ec:	480e      	ldr	r0, [pc, #56]	; (801d228 <on_reply+0x90>)
 801d1ee:	b014      	add	sp, #80	; 0x50
 801d1f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d1f4:	f7fc bac6 	b.w	8019784 <put_memory>
 801d1f8:	2200      	movs	r2, #0
 801d1fa:	f8c6 4814 	str.w	r4, [r6, #2068]	; 0x814
 801d1fe:	f8c6 7810 	str.w	r7, [r6, #2064]	; 0x810
 801d202:	f8c6 282c 	str.w	r2, [r6, #2092]	; 0x82c
 801d206:	f8c6 5828 	str.w	r5, [r6, #2088]	; 0x828
 801d20a:	f7fd fce7 	bl	801abdc <rmw_uros_epoch_nanos>
 801d20e:	f506 6202 	add.w	r2, r6, #2080	; 0x820
 801d212:	2304      	movs	r3, #4
 801d214:	e942 0102 	strd	r0, r1, [r2, #-8]
 801d218:	f886 3820 	strb.w	r3, [r6, #2080]	; 0x820
 801d21c:	b014      	add	sp, #80	; 0x50
 801d21e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d222:	bf00      	nop
 801d224:	2000bc58 	.word	0x2000bc58
 801d228:	2001062c 	.word	0x2001062c

0801d22c <rmw_create_guard_condition>:
 801d22c:	b538      	push	{r3, r4, r5, lr}
 801d22e:	4605      	mov	r5, r0
 801d230:	4808      	ldr	r0, [pc, #32]	; (801d254 <rmw_create_guard_condition+0x28>)
 801d232:	f7fc fa97 	bl	8019764 <get_memory>
 801d236:	4603      	mov	r3, r0
 801d238:	b148      	cbz	r0, 801d24e <rmw_create_guard_condition+0x22>
 801d23a:	6884      	ldr	r4, [r0, #8]
 801d23c:	2300      	movs	r3, #0
 801d23e:	61e5      	str	r5, [r4, #28]
 801d240:	7423      	strb	r3, [r4, #16]
 801d242:	f7fc fb15 	bl	8019870 <rmw_get_implementation_identifier>
 801d246:	f104 0314 	add.w	r3, r4, #20
 801d24a:	e9c4 0405 	strd	r0, r4, [r4, #20]
 801d24e:	4618      	mov	r0, r3
 801d250:	bd38      	pop	{r3, r4, r5, pc}
 801d252:	bf00      	nop
 801d254:	200105cc 	.word	0x200105cc

0801d258 <rmw_destroy_guard_condition>:
 801d258:	b508      	push	{r3, lr}
 801d25a:	4b08      	ldr	r3, [pc, #32]	; (801d27c <rmw_destroy_guard_condition+0x24>)
 801d25c:	6819      	ldr	r1, [r3, #0]
 801d25e:	b911      	cbnz	r1, 801d266 <rmw_destroy_guard_condition+0xe>
 801d260:	e00a      	b.n	801d278 <rmw_destroy_guard_condition+0x20>
 801d262:	6849      	ldr	r1, [r1, #4]
 801d264:	b141      	cbz	r1, 801d278 <rmw_destroy_guard_condition+0x20>
 801d266:	688b      	ldr	r3, [r1, #8]
 801d268:	3314      	adds	r3, #20
 801d26a:	4298      	cmp	r0, r3
 801d26c:	d1f9      	bne.n	801d262 <rmw_destroy_guard_condition+0xa>
 801d26e:	4803      	ldr	r0, [pc, #12]	; (801d27c <rmw_destroy_guard_condition+0x24>)
 801d270:	f7fc fa88 	bl	8019784 <put_memory>
 801d274:	2000      	movs	r0, #0
 801d276:	bd08      	pop	{r3, pc}
 801d278:	2001      	movs	r0, #1
 801d27a:	bd08      	pop	{r3, pc}
 801d27c:	200105cc 	.word	0x200105cc

0801d280 <rmw_trigger_guard_condition>:
 801d280:	b160      	cbz	r0, 801d29c <rmw_trigger_guard_condition+0x1c>
 801d282:	b510      	push	{r4, lr}
 801d284:	4604      	mov	r4, r0
 801d286:	6800      	ldr	r0, [r0, #0]
 801d288:	f7f2 fb22 	bl	800f8d0 <is_uxrce_rmw_identifier_valid>
 801d28c:	b908      	cbnz	r0, 801d292 <rmw_trigger_guard_condition+0x12>
 801d28e:	2001      	movs	r0, #1
 801d290:	bd10      	pop	{r4, pc}
 801d292:	6863      	ldr	r3, [r4, #4]
 801d294:	2201      	movs	r2, #1
 801d296:	2000      	movs	r0, #0
 801d298:	741a      	strb	r2, [r3, #16]
 801d29a:	bd10      	pop	{r4, pc}
 801d29c:	2001      	movs	r0, #1
 801d29e:	4770      	bx	lr

0801d2a0 <expf>:
 801d2a0:	ee10 2a10 	vmov	r2, s0
 801d2a4:	f240 412a 	movw	r1, #1066	; 0x42a
 801d2a8:	f3c2 530a 	ubfx	r3, r2, #20, #11
 801d2ac:	428b      	cmp	r3, r1
 801d2ae:	b430      	push	{r4, r5}
 801d2b0:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 801d2b4:	d92a      	bls.n	801d30c <expf+0x6c>
 801d2b6:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
 801d2ba:	d058      	beq.n	801d36e <expf+0xce>
 801d2bc:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 801d2c0:	d303      	bcc.n	801d2ca <expf+0x2a>
 801d2c2:	ee30 0a00 	vadd.f32	s0, s0, s0
 801d2c6:	bc30      	pop	{r4, r5}
 801d2c8:	4770      	bx	lr
 801d2ca:	eddf 7a2a 	vldr	s15, [pc, #168]	; 801d374 <expf+0xd4>
 801d2ce:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801d2d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d2d6:	dd03      	ble.n	801d2e0 <expf+0x40>
 801d2d8:	bc30      	pop	{r4, r5}
 801d2da:	2000      	movs	r0, #0
 801d2dc:	f000 b876 	b.w	801d3cc <__math_oflowf>
 801d2e0:	eddf 7a25 	vldr	s15, [pc, #148]	; 801d378 <expf+0xd8>
 801d2e4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801d2e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d2ec:	d503      	bpl.n	801d2f6 <expf+0x56>
 801d2ee:	bc30      	pop	{r4, r5}
 801d2f0:	2000      	movs	r0, #0
 801d2f2:	f000 b85f 	b.w	801d3b4 <__math_uflowf>
 801d2f6:	eddf 7a21 	vldr	s15, [pc, #132]	; 801d37c <expf+0xdc>
 801d2fa:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801d2fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d302:	d503      	bpl.n	801d30c <expf+0x6c>
 801d304:	bc30      	pop	{r4, r5}
 801d306:	2000      	movs	r0, #0
 801d308:	f000 b85a 	b.w	801d3c0 <__math_may_uflowf>
 801d30c:	4b1c      	ldr	r3, [pc, #112]	; (801d380 <expf+0xe0>)
 801d30e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801d312:	ed93 5b4a 	vldr	d5, [r3, #296]	; 0x128
 801d316:	ed93 4b48 	vldr	d4, [r3, #288]	; 0x120
 801d31a:	eeb0 7b44 	vmov.f64	d7, d4
 801d31e:	eea5 7b06 	vfma.f64	d7, d5, d6
 801d322:	ee17 0a10 	vmov	r0, s14
 801d326:	ee37 7b44 	vsub.f64	d7, d7, d4
 801d32a:	f000 021f 	and.w	r2, r0, #31
 801d32e:	ee95 7b06 	vfnms.f64	d7, d5, d6
 801d332:	ed93 5b4c 	vldr	d5, [r3, #304]	; 0x130
 801d336:	ee27 4b07 	vmul.f64	d4, d7, d7
 801d33a:	ed93 6b4e 	vldr	d6, [r3, #312]	; 0x138
 801d33e:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 801d342:	eea5 6b07 	vfma.f64	d6, d5, d7
 801d346:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
 801d34a:	684d      	ldr	r5, [r1, #4]
 801d34c:	ed93 5b50 	vldr	d5, [r3, #320]	; 0x140
 801d350:	2100      	movs	r1, #0
 801d352:	190a      	adds	r2, r1, r4
 801d354:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 801d358:	eea5 0b07 	vfma.f64	d0, d5, d7
 801d35c:	ec43 2b17 	vmov	d7, r2, r3
 801d360:	eea6 0b04 	vfma.f64	d0, d6, d4
 801d364:	ee20 0b07 	vmul.f64	d0, d0, d7
 801d368:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801d36c:	e7ab      	b.n	801d2c6 <expf+0x26>
 801d36e:	ed9f 0a05 	vldr	s0, [pc, #20]	; 801d384 <expf+0xe4>
 801d372:	e7a8      	b.n	801d2c6 <expf+0x26>
 801d374:	42b17217 	.word	0x42b17217
 801d378:	c2cff1b4 	.word	0xc2cff1b4
 801d37c:	c2ce8ecf 	.word	0xc2ce8ecf
 801d380:	08020b70 	.word	0x08020b70
 801d384:	00000000 	.word	0x00000000

0801d388 <with_errnof>:
 801d388:	b513      	push	{r0, r1, r4, lr}
 801d38a:	4604      	mov	r4, r0
 801d38c:	ed8d 0a01 	vstr	s0, [sp, #4]
 801d390:	f000 fcfc 	bl	801dd8c <__errno>
 801d394:	ed9d 0a01 	vldr	s0, [sp, #4]
 801d398:	6004      	str	r4, [r0, #0]
 801d39a:	b002      	add	sp, #8
 801d39c:	bd10      	pop	{r4, pc}

0801d39e <xflowf>:
 801d39e:	b130      	cbz	r0, 801d3ae <xflowf+0x10>
 801d3a0:	eef1 7a40 	vneg.f32	s15, s0
 801d3a4:	ee27 0a80 	vmul.f32	s0, s15, s0
 801d3a8:	2022      	movs	r0, #34	; 0x22
 801d3aa:	f7ff bfed 	b.w	801d388 <with_errnof>
 801d3ae:	eef0 7a40 	vmov.f32	s15, s0
 801d3b2:	e7f7      	b.n	801d3a4 <xflowf+0x6>

0801d3b4 <__math_uflowf>:
 801d3b4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801d3bc <__math_uflowf+0x8>
 801d3b8:	f7ff bff1 	b.w	801d39e <xflowf>
 801d3bc:	10000000 	.word	0x10000000

0801d3c0 <__math_may_uflowf>:
 801d3c0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801d3c8 <__math_may_uflowf+0x8>
 801d3c4:	f7ff bfeb 	b.w	801d39e <xflowf>
 801d3c8:	1a200000 	.word	0x1a200000

0801d3cc <__math_oflowf>:
 801d3cc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801d3d4 <__math_oflowf+0x8>
 801d3d0:	f7ff bfe5 	b.w	801d39e <xflowf>
 801d3d4:	70000000 	.word	0x70000000

0801d3d8 <calloc>:
 801d3d8:	4b02      	ldr	r3, [pc, #8]	; (801d3e4 <calloc+0xc>)
 801d3da:	460a      	mov	r2, r1
 801d3dc:	4601      	mov	r1, r0
 801d3de:	6818      	ldr	r0, [r3, #0]
 801d3e0:	f000 b802 	b.w	801d3e8 <_calloc_r>
 801d3e4:	20002478 	.word	0x20002478

0801d3e8 <_calloc_r>:
 801d3e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d3ea:	fba1 2402 	umull	r2, r4, r1, r2
 801d3ee:	b94c      	cbnz	r4, 801d404 <_calloc_r+0x1c>
 801d3f0:	4611      	mov	r1, r2
 801d3f2:	9201      	str	r2, [sp, #4]
 801d3f4:	f000 f886 	bl	801d504 <_malloc_r>
 801d3f8:	9a01      	ldr	r2, [sp, #4]
 801d3fa:	4605      	mov	r5, r0
 801d3fc:	b930      	cbnz	r0, 801d40c <_calloc_r+0x24>
 801d3fe:	4628      	mov	r0, r5
 801d400:	b003      	add	sp, #12
 801d402:	bd30      	pop	{r4, r5, pc}
 801d404:	220c      	movs	r2, #12
 801d406:	6002      	str	r2, [r0, #0]
 801d408:	2500      	movs	r5, #0
 801d40a:	e7f8      	b.n	801d3fe <_calloc_r+0x16>
 801d40c:	4621      	mov	r1, r4
 801d40e:	f000 fbc1 	bl	801db94 <memset>
 801d412:	e7f4      	b.n	801d3fe <_calloc_r+0x16>

0801d414 <getenv>:
 801d414:	b507      	push	{r0, r1, r2, lr}
 801d416:	4b04      	ldr	r3, [pc, #16]	; (801d428 <getenv+0x14>)
 801d418:	4601      	mov	r1, r0
 801d41a:	aa01      	add	r2, sp, #4
 801d41c:	6818      	ldr	r0, [r3, #0]
 801d41e:	f000 f805 	bl	801d42c <_findenv_r>
 801d422:	b003      	add	sp, #12
 801d424:	f85d fb04 	ldr.w	pc, [sp], #4
 801d428:	20002478 	.word	0x20002478

0801d42c <_findenv_r>:
 801d42c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d430:	f8df a06c 	ldr.w	sl, [pc, #108]	; 801d4a0 <_findenv_r+0x74>
 801d434:	4607      	mov	r7, r0
 801d436:	4689      	mov	r9, r1
 801d438:	4616      	mov	r6, r2
 801d43a:	f000 fd09 	bl	801de50 <__env_lock>
 801d43e:	f8da 4000 	ldr.w	r4, [sl]
 801d442:	b134      	cbz	r4, 801d452 <_findenv_r+0x26>
 801d444:	464b      	mov	r3, r9
 801d446:	4698      	mov	r8, r3
 801d448:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d44c:	b13a      	cbz	r2, 801d45e <_findenv_r+0x32>
 801d44e:	2a3d      	cmp	r2, #61	; 0x3d
 801d450:	d1f9      	bne.n	801d446 <_findenv_r+0x1a>
 801d452:	4638      	mov	r0, r7
 801d454:	f000 fd02 	bl	801de5c <__env_unlock>
 801d458:	2000      	movs	r0, #0
 801d45a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d45e:	eba8 0809 	sub.w	r8, r8, r9
 801d462:	46a3      	mov	fp, r4
 801d464:	f854 0b04 	ldr.w	r0, [r4], #4
 801d468:	2800      	cmp	r0, #0
 801d46a:	d0f2      	beq.n	801d452 <_findenv_r+0x26>
 801d46c:	4642      	mov	r2, r8
 801d46e:	4649      	mov	r1, r9
 801d470:	f000 fba5 	bl	801dbbe <strncmp>
 801d474:	2800      	cmp	r0, #0
 801d476:	d1f4      	bne.n	801d462 <_findenv_r+0x36>
 801d478:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801d47c:	eb03 0508 	add.w	r5, r3, r8
 801d480:	f813 3008 	ldrb.w	r3, [r3, r8]
 801d484:	2b3d      	cmp	r3, #61	; 0x3d
 801d486:	d1ec      	bne.n	801d462 <_findenv_r+0x36>
 801d488:	f8da 3000 	ldr.w	r3, [sl]
 801d48c:	ebab 0303 	sub.w	r3, fp, r3
 801d490:	109b      	asrs	r3, r3, #2
 801d492:	4638      	mov	r0, r7
 801d494:	6033      	str	r3, [r6, #0]
 801d496:	f000 fce1 	bl	801de5c <__env_unlock>
 801d49a:	1c68      	adds	r0, r5, #1
 801d49c:	e7dd      	b.n	801d45a <_findenv_r+0x2e>
 801d49e:	bf00      	nop
 801d4a0:	20000000 	.word	0x20000000

0801d4a4 <malloc>:
 801d4a4:	4b02      	ldr	r3, [pc, #8]	; (801d4b0 <malloc+0xc>)
 801d4a6:	4601      	mov	r1, r0
 801d4a8:	6818      	ldr	r0, [r3, #0]
 801d4aa:	f000 b82b 	b.w	801d504 <_malloc_r>
 801d4ae:	bf00      	nop
 801d4b0:	20002478 	.word	0x20002478

0801d4b4 <free>:
 801d4b4:	4b02      	ldr	r3, [pc, #8]	; (801d4c0 <free+0xc>)
 801d4b6:	4601      	mov	r1, r0
 801d4b8:	6818      	ldr	r0, [r3, #0]
 801d4ba:	f000 bcd5 	b.w	801de68 <_free_r>
 801d4be:	bf00      	nop
 801d4c0:	20002478 	.word	0x20002478

0801d4c4 <sbrk_aligned>:
 801d4c4:	b570      	push	{r4, r5, r6, lr}
 801d4c6:	4e0e      	ldr	r6, [pc, #56]	; (801d500 <sbrk_aligned+0x3c>)
 801d4c8:	460c      	mov	r4, r1
 801d4ca:	6831      	ldr	r1, [r6, #0]
 801d4cc:	4605      	mov	r5, r0
 801d4ce:	b911      	cbnz	r1, 801d4d6 <sbrk_aligned+0x12>
 801d4d0:	f000 fc3a 	bl	801dd48 <_sbrk_r>
 801d4d4:	6030      	str	r0, [r6, #0]
 801d4d6:	4621      	mov	r1, r4
 801d4d8:	4628      	mov	r0, r5
 801d4da:	f000 fc35 	bl	801dd48 <_sbrk_r>
 801d4de:	1c43      	adds	r3, r0, #1
 801d4e0:	d00a      	beq.n	801d4f8 <sbrk_aligned+0x34>
 801d4e2:	1cc4      	adds	r4, r0, #3
 801d4e4:	f024 0403 	bic.w	r4, r4, #3
 801d4e8:	42a0      	cmp	r0, r4
 801d4ea:	d007      	beq.n	801d4fc <sbrk_aligned+0x38>
 801d4ec:	1a21      	subs	r1, r4, r0
 801d4ee:	4628      	mov	r0, r5
 801d4f0:	f000 fc2a 	bl	801dd48 <_sbrk_r>
 801d4f4:	3001      	adds	r0, #1
 801d4f6:	d101      	bne.n	801d4fc <sbrk_aligned+0x38>
 801d4f8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801d4fc:	4620      	mov	r0, r4
 801d4fe:	bd70      	pop	{r4, r5, r6, pc}
 801d500:	20010e8c 	.word	0x20010e8c

0801d504 <_malloc_r>:
 801d504:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d508:	1ccd      	adds	r5, r1, #3
 801d50a:	f025 0503 	bic.w	r5, r5, #3
 801d50e:	3508      	adds	r5, #8
 801d510:	2d0c      	cmp	r5, #12
 801d512:	bf38      	it	cc
 801d514:	250c      	movcc	r5, #12
 801d516:	2d00      	cmp	r5, #0
 801d518:	4607      	mov	r7, r0
 801d51a:	db01      	blt.n	801d520 <_malloc_r+0x1c>
 801d51c:	42a9      	cmp	r1, r5
 801d51e:	d905      	bls.n	801d52c <_malloc_r+0x28>
 801d520:	230c      	movs	r3, #12
 801d522:	603b      	str	r3, [r7, #0]
 801d524:	2600      	movs	r6, #0
 801d526:	4630      	mov	r0, r6
 801d528:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d52c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801d600 <_malloc_r+0xfc>
 801d530:	f000 f868 	bl	801d604 <__malloc_lock>
 801d534:	f8d8 3000 	ldr.w	r3, [r8]
 801d538:	461c      	mov	r4, r3
 801d53a:	bb5c      	cbnz	r4, 801d594 <_malloc_r+0x90>
 801d53c:	4629      	mov	r1, r5
 801d53e:	4638      	mov	r0, r7
 801d540:	f7ff ffc0 	bl	801d4c4 <sbrk_aligned>
 801d544:	1c43      	adds	r3, r0, #1
 801d546:	4604      	mov	r4, r0
 801d548:	d155      	bne.n	801d5f6 <_malloc_r+0xf2>
 801d54a:	f8d8 4000 	ldr.w	r4, [r8]
 801d54e:	4626      	mov	r6, r4
 801d550:	2e00      	cmp	r6, #0
 801d552:	d145      	bne.n	801d5e0 <_malloc_r+0xdc>
 801d554:	2c00      	cmp	r4, #0
 801d556:	d048      	beq.n	801d5ea <_malloc_r+0xe6>
 801d558:	6823      	ldr	r3, [r4, #0]
 801d55a:	4631      	mov	r1, r6
 801d55c:	4638      	mov	r0, r7
 801d55e:	eb04 0903 	add.w	r9, r4, r3
 801d562:	f000 fbf1 	bl	801dd48 <_sbrk_r>
 801d566:	4581      	cmp	r9, r0
 801d568:	d13f      	bne.n	801d5ea <_malloc_r+0xe6>
 801d56a:	6821      	ldr	r1, [r4, #0]
 801d56c:	1a6d      	subs	r5, r5, r1
 801d56e:	4629      	mov	r1, r5
 801d570:	4638      	mov	r0, r7
 801d572:	f7ff ffa7 	bl	801d4c4 <sbrk_aligned>
 801d576:	3001      	adds	r0, #1
 801d578:	d037      	beq.n	801d5ea <_malloc_r+0xe6>
 801d57a:	6823      	ldr	r3, [r4, #0]
 801d57c:	442b      	add	r3, r5
 801d57e:	6023      	str	r3, [r4, #0]
 801d580:	f8d8 3000 	ldr.w	r3, [r8]
 801d584:	2b00      	cmp	r3, #0
 801d586:	d038      	beq.n	801d5fa <_malloc_r+0xf6>
 801d588:	685a      	ldr	r2, [r3, #4]
 801d58a:	42a2      	cmp	r2, r4
 801d58c:	d12b      	bne.n	801d5e6 <_malloc_r+0xe2>
 801d58e:	2200      	movs	r2, #0
 801d590:	605a      	str	r2, [r3, #4]
 801d592:	e00f      	b.n	801d5b4 <_malloc_r+0xb0>
 801d594:	6822      	ldr	r2, [r4, #0]
 801d596:	1b52      	subs	r2, r2, r5
 801d598:	d41f      	bmi.n	801d5da <_malloc_r+0xd6>
 801d59a:	2a0b      	cmp	r2, #11
 801d59c:	d917      	bls.n	801d5ce <_malloc_r+0xca>
 801d59e:	1961      	adds	r1, r4, r5
 801d5a0:	42a3      	cmp	r3, r4
 801d5a2:	6025      	str	r5, [r4, #0]
 801d5a4:	bf18      	it	ne
 801d5a6:	6059      	strne	r1, [r3, #4]
 801d5a8:	6863      	ldr	r3, [r4, #4]
 801d5aa:	bf08      	it	eq
 801d5ac:	f8c8 1000 	streq.w	r1, [r8]
 801d5b0:	5162      	str	r2, [r4, r5]
 801d5b2:	604b      	str	r3, [r1, #4]
 801d5b4:	4638      	mov	r0, r7
 801d5b6:	f104 060b 	add.w	r6, r4, #11
 801d5ba:	f000 f829 	bl	801d610 <__malloc_unlock>
 801d5be:	f026 0607 	bic.w	r6, r6, #7
 801d5c2:	1d23      	adds	r3, r4, #4
 801d5c4:	1af2      	subs	r2, r6, r3
 801d5c6:	d0ae      	beq.n	801d526 <_malloc_r+0x22>
 801d5c8:	1b9b      	subs	r3, r3, r6
 801d5ca:	50a3      	str	r3, [r4, r2]
 801d5cc:	e7ab      	b.n	801d526 <_malloc_r+0x22>
 801d5ce:	42a3      	cmp	r3, r4
 801d5d0:	6862      	ldr	r2, [r4, #4]
 801d5d2:	d1dd      	bne.n	801d590 <_malloc_r+0x8c>
 801d5d4:	f8c8 2000 	str.w	r2, [r8]
 801d5d8:	e7ec      	b.n	801d5b4 <_malloc_r+0xb0>
 801d5da:	4623      	mov	r3, r4
 801d5dc:	6864      	ldr	r4, [r4, #4]
 801d5de:	e7ac      	b.n	801d53a <_malloc_r+0x36>
 801d5e0:	4634      	mov	r4, r6
 801d5e2:	6876      	ldr	r6, [r6, #4]
 801d5e4:	e7b4      	b.n	801d550 <_malloc_r+0x4c>
 801d5e6:	4613      	mov	r3, r2
 801d5e8:	e7cc      	b.n	801d584 <_malloc_r+0x80>
 801d5ea:	230c      	movs	r3, #12
 801d5ec:	603b      	str	r3, [r7, #0]
 801d5ee:	4638      	mov	r0, r7
 801d5f0:	f000 f80e 	bl	801d610 <__malloc_unlock>
 801d5f4:	e797      	b.n	801d526 <_malloc_r+0x22>
 801d5f6:	6025      	str	r5, [r4, #0]
 801d5f8:	e7dc      	b.n	801d5b4 <_malloc_r+0xb0>
 801d5fa:	605b      	str	r3, [r3, #4]
 801d5fc:	deff      	udf	#255	; 0xff
 801d5fe:	bf00      	nop
 801d600:	20010e88 	.word	0x20010e88

0801d604 <__malloc_lock>:
 801d604:	4801      	ldr	r0, [pc, #4]	; (801d60c <__malloc_lock+0x8>)
 801d606:	f000 bbec 	b.w	801dde2 <__retarget_lock_acquire_recursive>
 801d60a:	bf00      	nop
 801d60c:	20010fd1 	.word	0x20010fd1

0801d610 <__malloc_unlock>:
 801d610:	4801      	ldr	r0, [pc, #4]	; (801d618 <__malloc_unlock+0x8>)
 801d612:	f000 bbe7 	b.w	801dde4 <__retarget_lock_release_recursive>
 801d616:	bf00      	nop
 801d618:	20010fd1 	.word	0x20010fd1

0801d61c <srand>:
 801d61c:	b538      	push	{r3, r4, r5, lr}
 801d61e:	4b10      	ldr	r3, [pc, #64]	; (801d660 <srand+0x44>)
 801d620:	681d      	ldr	r5, [r3, #0]
 801d622:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801d624:	4604      	mov	r4, r0
 801d626:	b9b3      	cbnz	r3, 801d656 <srand+0x3a>
 801d628:	2018      	movs	r0, #24
 801d62a:	f7ff ff3b 	bl	801d4a4 <malloc>
 801d62e:	4602      	mov	r2, r0
 801d630:	6328      	str	r0, [r5, #48]	; 0x30
 801d632:	b920      	cbnz	r0, 801d63e <srand+0x22>
 801d634:	4b0b      	ldr	r3, [pc, #44]	; (801d664 <srand+0x48>)
 801d636:	480c      	ldr	r0, [pc, #48]	; (801d668 <srand+0x4c>)
 801d638:	2146      	movs	r1, #70	; 0x46
 801d63a:	f000 fbeb 	bl	801de14 <__assert_func>
 801d63e:	490b      	ldr	r1, [pc, #44]	; (801d66c <srand+0x50>)
 801d640:	4b0b      	ldr	r3, [pc, #44]	; (801d670 <srand+0x54>)
 801d642:	e9c0 1300 	strd	r1, r3, [r0]
 801d646:	4b0b      	ldr	r3, [pc, #44]	; (801d674 <srand+0x58>)
 801d648:	6083      	str	r3, [r0, #8]
 801d64a:	230b      	movs	r3, #11
 801d64c:	8183      	strh	r3, [r0, #12]
 801d64e:	2100      	movs	r1, #0
 801d650:	2001      	movs	r0, #1
 801d652:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801d656:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801d658:	2200      	movs	r2, #0
 801d65a:	611c      	str	r4, [r3, #16]
 801d65c:	615a      	str	r2, [r3, #20]
 801d65e:	bd38      	pop	{r3, r4, r5, pc}
 801d660:	20002478 	.word	0x20002478
 801d664:	08020cb8 	.word	0x08020cb8
 801d668:	08020ccf 	.word	0x08020ccf
 801d66c:	abcd330e 	.word	0xabcd330e
 801d670:	e66d1234 	.word	0xe66d1234
 801d674:	0005deec 	.word	0x0005deec

0801d678 <rand>:
 801d678:	4b16      	ldr	r3, [pc, #88]	; (801d6d4 <rand+0x5c>)
 801d67a:	b510      	push	{r4, lr}
 801d67c:	681c      	ldr	r4, [r3, #0]
 801d67e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801d680:	b9b3      	cbnz	r3, 801d6b0 <rand+0x38>
 801d682:	2018      	movs	r0, #24
 801d684:	f7ff ff0e 	bl	801d4a4 <malloc>
 801d688:	4602      	mov	r2, r0
 801d68a:	6320      	str	r0, [r4, #48]	; 0x30
 801d68c:	b920      	cbnz	r0, 801d698 <rand+0x20>
 801d68e:	4b12      	ldr	r3, [pc, #72]	; (801d6d8 <rand+0x60>)
 801d690:	4812      	ldr	r0, [pc, #72]	; (801d6dc <rand+0x64>)
 801d692:	2152      	movs	r1, #82	; 0x52
 801d694:	f000 fbbe 	bl	801de14 <__assert_func>
 801d698:	4911      	ldr	r1, [pc, #68]	; (801d6e0 <rand+0x68>)
 801d69a:	4b12      	ldr	r3, [pc, #72]	; (801d6e4 <rand+0x6c>)
 801d69c:	e9c0 1300 	strd	r1, r3, [r0]
 801d6a0:	4b11      	ldr	r3, [pc, #68]	; (801d6e8 <rand+0x70>)
 801d6a2:	6083      	str	r3, [r0, #8]
 801d6a4:	230b      	movs	r3, #11
 801d6a6:	8183      	strh	r3, [r0, #12]
 801d6a8:	2100      	movs	r1, #0
 801d6aa:	2001      	movs	r0, #1
 801d6ac:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801d6b0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801d6b2:	480e      	ldr	r0, [pc, #56]	; (801d6ec <rand+0x74>)
 801d6b4:	690b      	ldr	r3, [r1, #16]
 801d6b6:	694c      	ldr	r4, [r1, #20]
 801d6b8:	4a0d      	ldr	r2, [pc, #52]	; (801d6f0 <rand+0x78>)
 801d6ba:	4358      	muls	r0, r3
 801d6bc:	fb02 0004 	mla	r0, r2, r4, r0
 801d6c0:	fba3 3202 	umull	r3, r2, r3, r2
 801d6c4:	3301      	adds	r3, #1
 801d6c6:	eb40 0002 	adc.w	r0, r0, r2
 801d6ca:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801d6ce:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801d6d2:	bd10      	pop	{r4, pc}
 801d6d4:	20002478 	.word	0x20002478
 801d6d8:	08020cb8 	.word	0x08020cb8
 801d6dc:	08020ccf 	.word	0x08020ccf
 801d6e0:	abcd330e 	.word	0xabcd330e
 801d6e4:	e66d1234 	.word	0xe66d1234
 801d6e8:	0005deec 	.word	0x0005deec
 801d6ec:	5851f42d 	.word	0x5851f42d
 801d6f0:	4c957f2d 	.word	0x4c957f2d

0801d6f4 <realloc>:
 801d6f4:	4b02      	ldr	r3, [pc, #8]	; (801d700 <realloc+0xc>)
 801d6f6:	460a      	mov	r2, r1
 801d6f8:	4601      	mov	r1, r0
 801d6fa:	6818      	ldr	r0, [r3, #0]
 801d6fc:	f000 b802 	b.w	801d704 <_realloc_r>
 801d700:	20002478 	.word	0x20002478

0801d704 <_realloc_r>:
 801d704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d708:	4680      	mov	r8, r0
 801d70a:	4614      	mov	r4, r2
 801d70c:	460e      	mov	r6, r1
 801d70e:	b921      	cbnz	r1, 801d71a <_realloc_r+0x16>
 801d710:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d714:	4611      	mov	r1, r2
 801d716:	f7ff bef5 	b.w	801d504 <_malloc_r>
 801d71a:	b92a      	cbnz	r2, 801d728 <_realloc_r+0x24>
 801d71c:	f000 fba4 	bl	801de68 <_free_r>
 801d720:	4625      	mov	r5, r4
 801d722:	4628      	mov	r0, r5
 801d724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d728:	f000 fbea 	bl	801df00 <_malloc_usable_size_r>
 801d72c:	4284      	cmp	r4, r0
 801d72e:	4607      	mov	r7, r0
 801d730:	d802      	bhi.n	801d738 <_realloc_r+0x34>
 801d732:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801d736:	d812      	bhi.n	801d75e <_realloc_r+0x5a>
 801d738:	4621      	mov	r1, r4
 801d73a:	4640      	mov	r0, r8
 801d73c:	f7ff fee2 	bl	801d504 <_malloc_r>
 801d740:	4605      	mov	r5, r0
 801d742:	2800      	cmp	r0, #0
 801d744:	d0ed      	beq.n	801d722 <_realloc_r+0x1e>
 801d746:	42bc      	cmp	r4, r7
 801d748:	4622      	mov	r2, r4
 801d74a:	4631      	mov	r1, r6
 801d74c:	bf28      	it	cs
 801d74e:	463a      	movcs	r2, r7
 801d750:	f000 fb51 	bl	801ddf6 <memcpy>
 801d754:	4631      	mov	r1, r6
 801d756:	4640      	mov	r0, r8
 801d758:	f000 fb86 	bl	801de68 <_free_r>
 801d75c:	e7e1      	b.n	801d722 <_realloc_r+0x1e>
 801d75e:	4635      	mov	r5, r6
 801d760:	e7df      	b.n	801d722 <_realloc_r+0x1e>
	...

0801d764 <_strtoul_l.constprop.0>:
 801d764:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d768:	4f36      	ldr	r7, [pc, #216]	; (801d844 <_strtoul_l.constprop.0+0xe0>)
 801d76a:	4686      	mov	lr, r0
 801d76c:	460d      	mov	r5, r1
 801d76e:	4628      	mov	r0, r5
 801d770:	f815 4b01 	ldrb.w	r4, [r5], #1
 801d774:	5d3e      	ldrb	r6, [r7, r4]
 801d776:	f016 0608 	ands.w	r6, r6, #8
 801d77a:	d1f8      	bne.n	801d76e <_strtoul_l.constprop.0+0xa>
 801d77c:	2c2d      	cmp	r4, #45	; 0x2d
 801d77e:	d130      	bne.n	801d7e2 <_strtoul_l.constprop.0+0x7e>
 801d780:	782c      	ldrb	r4, [r5, #0]
 801d782:	2601      	movs	r6, #1
 801d784:	1c85      	adds	r5, r0, #2
 801d786:	2b00      	cmp	r3, #0
 801d788:	d057      	beq.n	801d83a <_strtoul_l.constprop.0+0xd6>
 801d78a:	2b10      	cmp	r3, #16
 801d78c:	d109      	bne.n	801d7a2 <_strtoul_l.constprop.0+0x3e>
 801d78e:	2c30      	cmp	r4, #48	; 0x30
 801d790:	d107      	bne.n	801d7a2 <_strtoul_l.constprop.0+0x3e>
 801d792:	7828      	ldrb	r0, [r5, #0]
 801d794:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801d798:	2858      	cmp	r0, #88	; 0x58
 801d79a:	d149      	bne.n	801d830 <_strtoul_l.constprop.0+0xcc>
 801d79c:	786c      	ldrb	r4, [r5, #1]
 801d79e:	2310      	movs	r3, #16
 801d7a0:	3502      	adds	r5, #2
 801d7a2:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801d7a6:	2700      	movs	r7, #0
 801d7a8:	fbb8 f8f3 	udiv	r8, r8, r3
 801d7ac:	fb03 f908 	mul.w	r9, r3, r8
 801d7b0:	ea6f 0909 	mvn.w	r9, r9
 801d7b4:	4638      	mov	r0, r7
 801d7b6:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801d7ba:	f1bc 0f09 	cmp.w	ip, #9
 801d7be:	d815      	bhi.n	801d7ec <_strtoul_l.constprop.0+0x88>
 801d7c0:	4664      	mov	r4, ip
 801d7c2:	42a3      	cmp	r3, r4
 801d7c4:	dd23      	ble.n	801d80e <_strtoul_l.constprop.0+0xaa>
 801d7c6:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 801d7ca:	d007      	beq.n	801d7dc <_strtoul_l.constprop.0+0x78>
 801d7cc:	4580      	cmp	r8, r0
 801d7ce:	d31b      	bcc.n	801d808 <_strtoul_l.constprop.0+0xa4>
 801d7d0:	d101      	bne.n	801d7d6 <_strtoul_l.constprop.0+0x72>
 801d7d2:	45a1      	cmp	r9, r4
 801d7d4:	db18      	blt.n	801d808 <_strtoul_l.constprop.0+0xa4>
 801d7d6:	fb00 4003 	mla	r0, r0, r3, r4
 801d7da:	2701      	movs	r7, #1
 801d7dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 801d7e0:	e7e9      	b.n	801d7b6 <_strtoul_l.constprop.0+0x52>
 801d7e2:	2c2b      	cmp	r4, #43	; 0x2b
 801d7e4:	bf04      	itt	eq
 801d7e6:	782c      	ldrbeq	r4, [r5, #0]
 801d7e8:	1c85      	addeq	r5, r0, #2
 801d7ea:	e7cc      	b.n	801d786 <_strtoul_l.constprop.0+0x22>
 801d7ec:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801d7f0:	f1bc 0f19 	cmp.w	ip, #25
 801d7f4:	d801      	bhi.n	801d7fa <_strtoul_l.constprop.0+0x96>
 801d7f6:	3c37      	subs	r4, #55	; 0x37
 801d7f8:	e7e3      	b.n	801d7c2 <_strtoul_l.constprop.0+0x5e>
 801d7fa:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801d7fe:	f1bc 0f19 	cmp.w	ip, #25
 801d802:	d804      	bhi.n	801d80e <_strtoul_l.constprop.0+0xaa>
 801d804:	3c57      	subs	r4, #87	; 0x57
 801d806:	e7dc      	b.n	801d7c2 <_strtoul_l.constprop.0+0x5e>
 801d808:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801d80c:	e7e6      	b.n	801d7dc <_strtoul_l.constprop.0+0x78>
 801d80e:	1c7b      	adds	r3, r7, #1
 801d810:	d106      	bne.n	801d820 <_strtoul_l.constprop.0+0xbc>
 801d812:	2322      	movs	r3, #34	; 0x22
 801d814:	f8ce 3000 	str.w	r3, [lr]
 801d818:	4638      	mov	r0, r7
 801d81a:	b932      	cbnz	r2, 801d82a <_strtoul_l.constprop.0+0xc6>
 801d81c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d820:	b106      	cbz	r6, 801d824 <_strtoul_l.constprop.0+0xc0>
 801d822:	4240      	negs	r0, r0
 801d824:	2a00      	cmp	r2, #0
 801d826:	d0f9      	beq.n	801d81c <_strtoul_l.constprop.0+0xb8>
 801d828:	b107      	cbz	r7, 801d82c <_strtoul_l.constprop.0+0xc8>
 801d82a:	1e69      	subs	r1, r5, #1
 801d82c:	6011      	str	r1, [r2, #0]
 801d82e:	e7f5      	b.n	801d81c <_strtoul_l.constprop.0+0xb8>
 801d830:	2430      	movs	r4, #48	; 0x30
 801d832:	2b00      	cmp	r3, #0
 801d834:	d1b5      	bne.n	801d7a2 <_strtoul_l.constprop.0+0x3e>
 801d836:	2308      	movs	r3, #8
 801d838:	e7b3      	b.n	801d7a2 <_strtoul_l.constprop.0+0x3e>
 801d83a:	2c30      	cmp	r4, #48	; 0x30
 801d83c:	d0a9      	beq.n	801d792 <_strtoul_l.constprop.0+0x2e>
 801d83e:	230a      	movs	r3, #10
 801d840:	e7af      	b.n	801d7a2 <_strtoul_l.constprop.0+0x3e>
 801d842:	bf00      	nop
 801d844:	08020d28 	.word	0x08020d28

0801d848 <strtoul>:
 801d848:	4613      	mov	r3, r2
 801d84a:	460a      	mov	r2, r1
 801d84c:	4601      	mov	r1, r0
 801d84e:	4802      	ldr	r0, [pc, #8]	; (801d858 <strtoul+0x10>)
 801d850:	6800      	ldr	r0, [r0, #0]
 801d852:	f7ff bf87 	b.w	801d764 <_strtoul_l.constprop.0>
 801d856:	bf00      	nop
 801d858:	20002478 	.word	0x20002478

0801d85c <std>:
 801d85c:	2300      	movs	r3, #0
 801d85e:	b510      	push	{r4, lr}
 801d860:	4604      	mov	r4, r0
 801d862:	e9c0 3300 	strd	r3, r3, [r0]
 801d866:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801d86a:	6083      	str	r3, [r0, #8]
 801d86c:	8181      	strh	r1, [r0, #12]
 801d86e:	6643      	str	r3, [r0, #100]	; 0x64
 801d870:	81c2      	strh	r2, [r0, #14]
 801d872:	6183      	str	r3, [r0, #24]
 801d874:	4619      	mov	r1, r3
 801d876:	2208      	movs	r2, #8
 801d878:	305c      	adds	r0, #92	; 0x5c
 801d87a:	f000 f98b 	bl	801db94 <memset>
 801d87e:	4b0d      	ldr	r3, [pc, #52]	; (801d8b4 <std+0x58>)
 801d880:	6263      	str	r3, [r4, #36]	; 0x24
 801d882:	4b0d      	ldr	r3, [pc, #52]	; (801d8b8 <std+0x5c>)
 801d884:	62a3      	str	r3, [r4, #40]	; 0x28
 801d886:	4b0d      	ldr	r3, [pc, #52]	; (801d8bc <std+0x60>)
 801d888:	62e3      	str	r3, [r4, #44]	; 0x2c
 801d88a:	4b0d      	ldr	r3, [pc, #52]	; (801d8c0 <std+0x64>)
 801d88c:	6323      	str	r3, [r4, #48]	; 0x30
 801d88e:	4b0d      	ldr	r3, [pc, #52]	; (801d8c4 <std+0x68>)
 801d890:	6224      	str	r4, [r4, #32]
 801d892:	429c      	cmp	r4, r3
 801d894:	d006      	beq.n	801d8a4 <std+0x48>
 801d896:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801d89a:	4294      	cmp	r4, r2
 801d89c:	d002      	beq.n	801d8a4 <std+0x48>
 801d89e:	33d0      	adds	r3, #208	; 0xd0
 801d8a0:	429c      	cmp	r4, r3
 801d8a2:	d105      	bne.n	801d8b0 <std+0x54>
 801d8a4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801d8a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d8ac:	f000 ba98 	b.w	801dde0 <__retarget_lock_init_recursive>
 801d8b0:	bd10      	pop	{r4, pc}
 801d8b2:	bf00      	nop
 801d8b4:	0801da49 	.word	0x0801da49
 801d8b8:	0801da6b 	.word	0x0801da6b
 801d8bc:	0801daa3 	.word	0x0801daa3
 801d8c0:	0801dac7 	.word	0x0801dac7
 801d8c4:	20010e90 	.word	0x20010e90

0801d8c8 <stdio_exit_handler>:
 801d8c8:	4a02      	ldr	r2, [pc, #8]	; (801d8d4 <stdio_exit_handler+0xc>)
 801d8ca:	4903      	ldr	r1, [pc, #12]	; (801d8d8 <stdio_exit_handler+0x10>)
 801d8cc:	4803      	ldr	r0, [pc, #12]	; (801d8dc <stdio_exit_handler+0x14>)
 801d8ce:	f000 b869 	b.w	801d9a4 <_fwalk_sglue>
 801d8d2:	bf00      	nop
 801d8d4:	20002420 	.word	0x20002420
 801d8d8:	0801e5ed 	.word	0x0801e5ed
 801d8dc:	2000242c 	.word	0x2000242c

0801d8e0 <cleanup_stdio>:
 801d8e0:	6841      	ldr	r1, [r0, #4]
 801d8e2:	4b0c      	ldr	r3, [pc, #48]	; (801d914 <cleanup_stdio+0x34>)
 801d8e4:	4299      	cmp	r1, r3
 801d8e6:	b510      	push	{r4, lr}
 801d8e8:	4604      	mov	r4, r0
 801d8ea:	d001      	beq.n	801d8f0 <cleanup_stdio+0x10>
 801d8ec:	f000 fe7e 	bl	801e5ec <_fflush_r>
 801d8f0:	68a1      	ldr	r1, [r4, #8]
 801d8f2:	4b09      	ldr	r3, [pc, #36]	; (801d918 <cleanup_stdio+0x38>)
 801d8f4:	4299      	cmp	r1, r3
 801d8f6:	d002      	beq.n	801d8fe <cleanup_stdio+0x1e>
 801d8f8:	4620      	mov	r0, r4
 801d8fa:	f000 fe77 	bl	801e5ec <_fflush_r>
 801d8fe:	68e1      	ldr	r1, [r4, #12]
 801d900:	4b06      	ldr	r3, [pc, #24]	; (801d91c <cleanup_stdio+0x3c>)
 801d902:	4299      	cmp	r1, r3
 801d904:	d004      	beq.n	801d910 <cleanup_stdio+0x30>
 801d906:	4620      	mov	r0, r4
 801d908:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d90c:	f000 be6e 	b.w	801e5ec <_fflush_r>
 801d910:	bd10      	pop	{r4, pc}
 801d912:	bf00      	nop
 801d914:	20010e90 	.word	0x20010e90
 801d918:	20010ef8 	.word	0x20010ef8
 801d91c:	20010f60 	.word	0x20010f60

0801d920 <global_stdio_init.part.0>:
 801d920:	b510      	push	{r4, lr}
 801d922:	4b0b      	ldr	r3, [pc, #44]	; (801d950 <global_stdio_init.part.0+0x30>)
 801d924:	4c0b      	ldr	r4, [pc, #44]	; (801d954 <global_stdio_init.part.0+0x34>)
 801d926:	4a0c      	ldr	r2, [pc, #48]	; (801d958 <global_stdio_init.part.0+0x38>)
 801d928:	601a      	str	r2, [r3, #0]
 801d92a:	4620      	mov	r0, r4
 801d92c:	2200      	movs	r2, #0
 801d92e:	2104      	movs	r1, #4
 801d930:	f7ff ff94 	bl	801d85c <std>
 801d934:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801d938:	2201      	movs	r2, #1
 801d93a:	2109      	movs	r1, #9
 801d93c:	f7ff ff8e 	bl	801d85c <std>
 801d940:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801d944:	2202      	movs	r2, #2
 801d946:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d94a:	2112      	movs	r1, #18
 801d94c:	f7ff bf86 	b.w	801d85c <std>
 801d950:	20010fc8 	.word	0x20010fc8
 801d954:	20010e90 	.word	0x20010e90
 801d958:	0801d8c9 	.word	0x0801d8c9

0801d95c <__sfp_lock_acquire>:
 801d95c:	4801      	ldr	r0, [pc, #4]	; (801d964 <__sfp_lock_acquire+0x8>)
 801d95e:	f000 ba40 	b.w	801dde2 <__retarget_lock_acquire_recursive>
 801d962:	bf00      	nop
 801d964:	20010fd2 	.word	0x20010fd2

0801d968 <__sfp_lock_release>:
 801d968:	4801      	ldr	r0, [pc, #4]	; (801d970 <__sfp_lock_release+0x8>)
 801d96a:	f000 ba3b 	b.w	801dde4 <__retarget_lock_release_recursive>
 801d96e:	bf00      	nop
 801d970:	20010fd2 	.word	0x20010fd2

0801d974 <__sinit>:
 801d974:	b510      	push	{r4, lr}
 801d976:	4604      	mov	r4, r0
 801d978:	f7ff fff0 	bl	801d95c <__sfp_lock_acquire>
 801d97c:	6a23      	ldr	r3, [r4, #32]
 801d97e:	b11b      	cbz	r3, 801d988 <__sinit+0x14>
 801d980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d984:	f7ff bff0 	b.w	801d968 <__sfp_lock_release>
 801d988:	4b04      	ldr	r3, [pc, #16]	; (801d99c <__sinit+0x28>)
 801d98a:	6223      	str	r3, [r4, #32]
 801d98c:	4b04      	ldr	r3, [pc, #16]	; (801d9a0 <__sinit+0x2c>)
 801d98e:	681b      	ldr	r3, [r3, #0]
 801d990:	2b00      	cmp	r3, #0
 801d992:	d1f5      	bne.n	801d980 <__sinit+0xc>
 801d994:	f7ff ffc4 	bl	801d920 <global_stdio_init.part.0>
 801d998:	e7f2      	b.n	801d980 <__sinit+0xc>
 801d99a:	bf00      	nop
 801d99c:	0801d8e1 	.word	0x0801d8e1
 801d9a0:	20010fc8 	.word	0x20010fc8

0801d9a4 <_fwalk_sglue>:
 801d9a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d9a8:	4607      	mov	r7, r0
 801d9aa:	4688      	mov	r8, r1
 801d9ac:	4614      	mov	r4, r2
 801d9ae:	2600      	movs	r6, #0
 801d9b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801d9b4:	f1b9 0901 	subs.w	r9, r9, #1
 801d9b8:	d505      	bpl.n	801d9c6 <_fwalk_sglue+0x22>
 801d9ba:	6824      	ldr	r4, [r4, #0]
 801d9bc:	2c00      	cmp	r4, #0
 801d9be:	d1f7      	bne.n	801d9b0 <_fwalk_sglue+0xc>
 801d9c0:	4630      	mov	r0, r6
 801d9c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d9c6:	89ab      	ldrh	r3, [r5, #12]
 801d9c8:	2b01      	cmp	r3, #1
 801d9ca:	d907      	bls.n	801d9dc <_fwalk_sglue+0x38>
 801d9cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801d9d0:	3301      	adds	r3, #1
 801d9d2:	d003      	beq.n	801d9dc <_fwalk_sglue+0x38>
 801d9d4:	4629      	mov	r1, r5
 801d9d6:	4638      	mov	r0, r7
 801d9d8:	47c0      	blx	r8
 801d9da:	4306      	orrs	r6, r0
 801d9dc:	3568      	adds	r5, #104	; 0x68
 801d9de:	e7e9      	b.n	801d9b4 <_fwalk_sglue+0x10>

0801d9e0 <sniprintf>:
 801d9e0:	b40c      	push	{r2, r3}
 801d9e2:	b530      	push	{r4, r5, lr}
 801d9e4:	4b17      	ldr	r3, [pc, #92]	; (801da44 <sniprintf+0x64>)
 801d9e6:	1e0c      	subs	r4, r1, #0
 801d9e8:	681d      	ldr	r5, [r3, #0]
 801d9ea:	b09d      	sub	sp, #116	; 0x74
 801d9ec:	da08      	bge.n	801da00 <sniprintf+0x20>
 801d9ee:	238b      	movs	r3, #139	; 0x8b
 801d9f0:	602b      	str	r3, [r5, #0]
 801d9f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d9f6:	b01d      	add	sp, #116	; 0x74
 801d9f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d9fc:	b002      	add	sp, #8
 801d9fe:	4770      	bx	lr
 801da00:	f44f 7302 	mov.w	r3, #520	; 0x208
 801da04:	f8ad 3014 	strh.w	r3, [sp, #20]
 801da08:	bf14      	ite	ne
 801da0a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801da0e:	4623      	moveq	r3, r4
 801da10:	9304      	str	r3, [sp, #16]
 801da12:	9307      	str	r3, [sp, #28]
 801da14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801da18:	9002      	str	r0, [sp, #8]
 801da1a:	9006      	str	r0, [sp, #24]
 801da1c:	f8ad 3016 	strh.w	r3, [sp, #22]
 801da20:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801da22:	ab21      	add	r3, sp, #132	; 0x84
 801da24:	a902      	add	r1, sp, #8
 801da26:	4628      	mov	r0, r5
 801da28:	9301      	str	r3, [sp, #4]
 801da2a:	f000 facb 	bl	801dfc4 <_svfiprintf_r>
 801da2e:	1c43      	adds	r3, r0, #1
 801da30:	bfbc      	itt	lt
 801da32:	238b      	movlt	r3, #139	; 0x8b
 801da34:	602b      	strlt	r3, [r5, #0]
 801da36:	2c00      	cmp	r4, #0
 801da38:	d0dd      	beq.n	801d9f6 <sniprintf+0x16>
 801da3a:	9b02      	ldr	r3, [sp, #8]
 801da3c:	2200      	movs	r2, #0
 801da3e:	701a      	strb	r2, [r3, #0]
 801da40:	e7d9      	b.n	801d9f6 <sniprintf+0x16>
 801da42:	bf00      	nop
 801da44:	20002478 	.word	0x20002478

0801da48 <__sread>:
 801da48:	b510      	push	{r4, lr}
 801da4a:	460c      	mov	r4, r1
 801da4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801da50:	f000 f968 	bl	801dd24 <_read_r>
 801da54:	2800      	cmp	r0, #0
 801da56:	bfab      	itete	ge
 801da58:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801da5a:	89a3      	ldrhlt	r3, [r4, #12]
 801da5c:	181b      	addge	r3, r3, r0
 801da5e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801da62:	bfac      	ite	ge
 801da64:	6563      	strge	r3, [r4, #84]	; 0x54
 801da66:	81a3      	strhlt	r3, [r4, #12]
 801da68:	bd10      	pop	{r4, pc}

0801da6a <__swrite>:
 801da6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801da6e:	461f      	mov	r7, r3
 801da70:	898b      	ldrh	r3, [r1, #12]
 801da72:	05db      	lsls	r3, r3, #23
 801da74:	4605      	mov	r5, r0
 801da76:	460c      	mov	r4, r1
 801da78:	4616      	mov	r6, r2
 801da7a:	d505      	bpl.n	801da88 <__swrite+0x1e>
 801da7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801da80:	2302      	movs	r3, #2
 801da82:	2200      	movs	r2, #0
 801da84:	f000 f93c 	bl	801dd00 <_lseek_r>
 801da88:	89a3      	ldrh	r3, [r4, #12]
 801da8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801da8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801da92:	81a3      	strh	r3, [r4, #12]
 801da94:	4632      	mov	r2, r6
 801da96:	463b      	mov	r3, r7
 801da98:	4628      	mov	r0, r5
 801da9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801da9e:	f000 b963 	b.w	801dd68 <_write_r>

0801daa2 <__sseek>:
 801daa2:	b510      	push	{r4, lr}
 801daa4:	460c      	mov	r4, r1
 801daa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801daaa:	f000 f929 	bl	801dd00 <_lseek_r>
 801daae:	1c43      	adds	r3, r0, #1
 801dab0:	89a3      	ldrh	r3, [r4, #12]
 801dab2:	bf15      	itete	ne
 801dab4:	6560      	strne	r0, [r4, #84]	; 0x54
 801dab6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801daba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801dabe:	81a3      	strheq	r3, [r4, #12]
 801dac0:	bf18      	it	ne
 801dac2:	81a3      	strhne	r3, [r4, #12]
 801dac4:	bd10      	pop	{r4, pc}

0801dac6 <__sclose>:
 801dac6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801daca:	f000 b8b3 	b.w	801dc34 <_close_r>

0801dace <_vsniprintf_r>:
 801dace:	b530      	push	{r4, r5, lr}
 801dad0:	4614      	mov	r4, r2
 801dad2:	2c00      	cmp	r4, #0
 801dad4:	b09b      	sub	sp, #108	; 0x6c
 801dad6:	4605      	mov	r5, r0
 801dad8:	461a      	mov	r2, r3
 801dada:	da05      	bge.n	801dae8 <_vsniprintf_r+0x1a>
 801dadc:	238b      	movs	r3, #139	; 0x8b
 801dade:	6003      	str	r3, [r0, #0]
 801dae0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801dae4:	b01b      	add	sp, #108	; 0x6c
 801dae6:	bd30      	pop	{r4, r5, pc}
 801dae8:	f44f 7302 	mov.w	r3, #520	; 0x208
 801daec:	f8ad 300c 	strh.w	r3, [sp, #12]
 801daf0:	bf14      	ite	ne
 801daf2:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801daf6:	4623      	moveq	r3, r4
 801daf8:	9302      	str	r3, [sp, #8]
 801dafa:	9305      	str	r3, [sp, #20]
 801dafc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801db00:	9100      	str	r1, [sp, #0]
 801db02:	9104      	str	r1, [sp, #16]
 801db04:	f8ad 300e 	strh.w	r3, [sp, #14]
 801db08:	4669      	mov	r1, sp
 801db0a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801db0c:	f000 fa5a 	bl	801dfc4 <_svfiprintf_r>
 801db10:	1c43      	adds	r3, r0, #1
 801db12:	bfbc      	itt	lt
 801db14:	238b      	movlt	r3, #139	; 0x8b
 801db16:	602b      	strlt	r3, [r5, #0]
 801db18:	2c00      	cmp	r4, #0
 801db1a:	d0e3      	beq.n	801dae4 <_vsniprintf_r+0x16>
 801db1c:	9b00      	ldr	r3, [sp, #0]
 801db1e:	2200      	movs	r2, #0
 801db20:	701a      	strb	r2, [r3, #0]
 801db22:	e7df      	b.n	801dae4 <_vsniprintf_r+0x16>

0801db24 <vsniprintf>:
 801db24:	b507      	push	{r0, r1, r2, lr}
 801db26:	9300      	str	r3, [sp, #0]
 801db28:	4613      	mov	r3, r2
 801db2a:	460a      	mov	r2, r1
 801db2c:	4601      	mov	r1, r0
 801db2e:	4803      	ldr	r0, [pc, #12]	; (801db3c <vsniprintf+0x18>)
 801db30:	6800      	ldr	r0, [r0, #0]
 801db32:	f7ff ffcc 	bl	801dace <_vsniprintf_r>
 801db36:	b003      	add	sp, #12
 801db38:	f85d fb04 	ldr.w	pc, [sp], #4
 801db3c:	20002478 	.word	0x20002478

0801db40 <memcmp>:
 801db40:	b510      	push	{r4, lr}
 801db42:	3901      	subs	r1, #1
 801db44:	4402      	add	r2, r0
 801db46:	4290      	cmp	r0, r2
 801db48:	d101      	bne.n	801db4e <memcmp+0xe>
 801db4a:	2000      	movs	r0, #0
 801db4c:	e005      	b.n	801db5a <memcmp+0x1a>
 801db4e:	7803      	ldrb	r3, [r0, #0]
 801db50:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801db54:	42a3      	cmp	r3, r4
 801db56:	d001      	beq.n	801db5c <memcmp+0x1c>
 801db58:	1b18      	subs	r0, r3, r4
 801db5a:	bd10      	pop	{r4, pc}
 801db5c:	3001      	adds	r0, #1
 801db5e:	e7f2      	b.n	801db46 <memcmp+0x6>

0801db60 <memmove>:
 801db60:	4288      	cmp	r0, r1
 801db62:	b510      	push	{r4, lr}
 801db64:	eb01 0402 	add.w	r4, r1, r2
 801db68:	d902      	bls.n	801db70 <memmove+0x10>
 801db6a:	4284      	cmp	r4, r0
 801db6c:	4623      	mov	r3, r4
 801db6e:	d807      	bhi.n	801db80 <memmove+0x20>
 801db70:	1e43      	subs	r3, r0, #1
 801db72:	42a1      	cmp	r1, r4
 801db74:	d008      	beq.n	801db88 <memmove+0x28>
 801db76:	f811 2b01 	ldrb.w	r2, [r1], #1
 801db7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801db7e:	e7f8      	b.n	801db72 <memmove+0x12>
 801db80:	4402      	add	r2, r0
 801db82:	4601      	mov	r1, r0
 801db84:	428a      	cmp	r2, r1
 801db86:	d100      	bne.n	801db8a <memmove+0x2a>
 801db88:	bd10      	pop	{r4, pc}
 801db8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801db8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801db92:	e7f7      	b.n	801db84 <memmove+0x24>

0801db94 <memset>:
 801db94:	4402      	add	r2, r0
 801db96:	4603      	mov	r3, r0
 801db98:	4293      	cmp	r3, r2
 801db9a:	d100      	bne.n	801db9e <memset+0xa>
 801db9c:	4770      	bx	lr
 801db9e:	f803 1b01 	strb.w	r1, [r3], #1
 801dba2:	e7f9      	b.n	801db98 <memset+0x4>

0801dba4 <strchr>:
 801dba4:	b2c9      	uxtb	r1, r1
 801dba6:	4603      	mov	r3, r0
 801dba8:	f810 2b01 	ldrb.w	r2, [r0], #1
 801dbac:	b11a      	cbz	r2, 801dbb6 <strchr+0x12>
 801dbae:	428a      	cmp	r2, r1
 801dbb0:	d1f9      	bne.n	801dba6 <strchr+0x2>
 801dbb2:	4618      	mov	r0, r3
 801dbb4:	4770      	bx	lr
 801dbb6:	2900      	cmp	r1, #0
 801dbb8:	bf18      	it	ne
 801dbba:	2300      	movne	r3, #0
 801dbbc:	e7f9      	b.n	801dbb2 <strchr+0xe>

0801dbbe <strncmp>:
 801dbbe:	b510      	push	{r4, lr}
 801dbc0:	b16a      	cbz	r2, 801dbde <strncmp+0x20>
 801dbc2:	3901      	subs	r1, #1
 801dbc4:	1884      	adds	r4, r0, r2
 801dbc6:	f810 2b01 	ldrb.w	r2, [r0], #1
 801dbca:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801dbce:	429a      	cmp	r2, r3
 801dbd0:	d103      	bne.n	801dbda <strncmp+0x1c>
 801dbd2:	42a0      	cmp	r0, r4
 801dbd4:	d001      	beq.n	801dbda <strncmp+0x1c>
 801dbd6:	2a00      	cmp	r2, #0
 801dbd8:	d1f5      	bne.n	801dbc6 <strncmp+0x8>
 801dbda:	1ad0      	subs	r0, r2, r3
 801dbdc:	bd10      	pop	{r4, pc}
 801dbde:	4610      	mov	r0, r2
 801dbe0:	e7fc      	b.n	801dbdc <strncmp+0x1e>

0801dbe2 <strncpy>:
 801dbe2:	b510      	push	{r4, lr}
 801dbe4:	3901      	subs	r1, #1
 801dbe6:	4603      	mov	r3, r0
 801dbe8:	b132      	cbz	r2, 801dbf8 <strncpy+0x16>
 801dbea:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801dbee:	f803 4b01 	strb.w	r4, [r3], #1
 801dbf2:	3a01      	subs	r2, #1
 801dbf4:	2c00      	cmp	r4, #0
 801dbf6:	d1f7      	bne.n	801dbe8 <strncpy+0x6>
 801dbf8:	441a      	add	r2, r3
 801dbfa:	2100      	movs	r1, #0
 801dbfc:	4293      	cmp	r3, r2
 801dbfe:	d100      	bne.n	801dc02 <strncpy+0x20>
 801dc00:	bd10      	pop	{r4, pc}
 801dc02:	f803 1b01 	strb.w	r1, [r3], #1
 801dc06:	e7f9      	b.n	801dbfc <strncpy+0x1a>

0801dc08 <strstr>:
 801dc08:	780a      	ldrb	r2, [r1, #0]
 801dc0a:	b570      	push	{r4, r5, r6, lr}
 801dc0c:	b96a      	cbnz	r2, 801dc2a <strstr+0x22>
 801dc0e:	bd70      	pop	{r4, r5, r6, pc}
 801dc10:	429a      	cmp	r2, r3
 801dc12:	d109      	bne.n	801dc28 <strstr+0x20>
 801dc14:	460c      	mov	r4, r1
 801dc16:	4605      	mov	r5, r0
 801dc18:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801dc1c:	2b00      	cmp	r3, #0
 801dc1e:	d0f6      	beq.n	801dc0e <strstr+0x6>
 801dc20:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801dc24:	429e      	cmp	r6, r3
 801dc26:	d0f7      	beq.n	801dc18 <strstr+0x10>
 801dc28:	3001      	adds	r0, #1
 801dc2a:	7803      	ldrb	r3, [r0, #0]
 801dc2c:	2b00      	cmp	r3, #0
 801dc2e:	d1ef      	bne.n	801dc10 <strstr+0x8>
 801dc30:	4618      	mov	r0, r3
 801dc32:	e7ec      	b.n	801dc0e <strstr+0x6>

0801dc34 <_close_r>:
 801dc34:	b538      	push	{r3, r4, r5, lr}
 801dc36:	4d06      	ldr	r5, [pc, #24]	; (801dc50 <_close_r+0x1c>)
 801dc38:	2300      	movs	r3, #0
 801dc3a:	4604      	mov	r4, r0
 801dc3c:	4608      	mov	r0, r1
 801dc3e:	602b      	str	r3, [r5, #0]
 801dc40:	f7e5 fd21 	bl	8003686 <_close>
 801dc44:	1c43      	adds	r3, r0, #1
 801dc46:	d102      	bne.n	801dc4e <_close_r+0x1a>
 801dc48:	682b      	ldr	r3, [r5, #0]
 801dc4a:	b103      	cbz	r3, 801dc4e <_close_r+0x1a>
 801dc4c:	6023      	str	r3, [r4, #0]
 801dc4e:	bd38      	pop	{r3, r4, r5, pc}
 801dc50:	20010fcc 	.word	0x20010fcc

0801dc54 <_reclaim_reent>:
 801dc54:	4b29      	ldr	r3, [pc, #164]	; (801dcfc <_reclaim_reent+0xa8>)
 801dc56:	681b      	ldr	r3, [r3, #0]
 801dc58:	4283      	cmp	r3, r0
 801dc5a:	b570      	push	{r4, r5, r6, lr}
 801dc5c:	4604      	mov	r4, r0
 801dc5e:	d04b      	beq.n	801dcf8 <_reclaim_reent+0xa4>
 801dc60:	69c3      	ldr	r3, [r0, #28]
 801dc62:	b143      	cbz	r3, 801dc76 <_reclaim_reent+0x22>
 801dc64:	68db      	ldr	r3, [r3, #12]
 801dc66:	2b00      	cmp	r3, #0
 801dc68:	d144      	bne.n	801dcf4 <_reclaim_reent+0xa0>
 801dc6a:	69e3      	ldr	r3, [r4, #28]
 801dc6c:	6819      	ldr	r1, [r3, #0]
 801dc6e:	b111      	cbz	r1, 801dc76 <_reclaim_reent+0x22>
 801dc70:	4620      	mov	r0, r4
 801dc72:	f000 f8f9 	bl	801de68 <_free_r>
 801dc76:	6961      	ldr	r1, [r4, #20]
 801dc78:	b111      	cbz	r1, 801dc80 <_reclaim_reent+0x2c>
 801dc7a:	4620      	mov	r0, r4
 801dc7c:	f000 f8f4 	bl	801de68 <_free_r>
 801dc80:	69e1      	ldr	r1, [r4, #28]
 801dc82:	b111      	cbz	r1, 801dc8a <_reclaim_reent+0x36>
 801dc84:	4620      	mov	r0, r4
 801dc86:	f000 f8ef 	bl	801de68 <_free_r>
 801dc8a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801dc8c:	b111      	cbz	r1, 801dc94 <_reclaim_reent+0x40>
 801dc8e:	4620      	mov	r0, r4
 801dc90:	f000 f8ea 	bl	801de68 <_free_r>
 801dc94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801dc96:	b111      	cbz	r1, 801dc9e <_reclaim_reent+0x4a>
 801dc98:	4620      	mov	r0, r4
 801dc9a:	f000 f8e5 	bl	801de68 <_free_r>
 801dc9e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801dca0:	b111      	cbz	r1, 801dca8 <_reclaim_reent+0x54>
 801dca2:	4620      	mov	r0, r4
 801dca4:	f000 f8e0 	bl	801de68 <_free_r>
 801dca8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801dcaa:	b111      	cbz	r1, 801dcb2 <_reclaim_reent+0x5e>
 801dcac:	4620      	mov	r0, r4
 801dcae:	f000 f8db 	bl	801de68 <_free_r>
 801dcb2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801dcb4:	b111      	cbz	r1, 801dcbc <_reclaim_reent+0x68>
 801dcb6:	4620      	mov	r0, r4
 801dcb8:	f000 f8d6 	bl	801de68 <_free_r>
 801dcbc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801dcbe:	b111      	cbz	r1, 801dcc6 <_reclaim_reent+0x72>
 801dcc0:	4620      	mov	r0, r4
 801dcc2:	f000 f8d1 	bl	801de68 <_free_r>
 801dcc6:	6a23      	ldr	r3, [r4, #32]
 801dcc8:	b1b3      	cbz	r3, 801dcf8 <_reclaim_reent+0xa4>
 801dcca:	4620      	mov	r0, r4
 801dccc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801dcd0:	4718      	bx	r3
 801dcd2:	5949      	ldr	r1, [r1, r5]
 801dcd4:	b941      	cbnz	r1, 801dce8 <_reclaim_reent+0x94>
 801dcd6:	3504      	adds	r5, #4
 801dcd8:	69e3      	ldr	r3, [r4, #28]
 801dcda:	2d80      	cmp	r5, #128	; 0x80
 801dcdc:	68d9      	ldr	r1, [r3, #12]
 801dcde:	d1f8      	bne.n	801dcd2 <_reclaim_reent+0x7e>
 801dce0:	4620      	mov	r0, r4
 801dce2:	f000 f8c1 	bl	801de68 <_free_r>
 801dce6:	e7c0      	b.n	801dc6a <_reclaim_reent+0x16>
 801dce8:	680e      	ldr	r6, [r1, #0]
 801dcea:	4620      	mov	r0, r4
 801dcec:	f000 f8bc 	bl	801de68 <_free_r>
 801dcf0:	4631      	mov	r1, r6
 801dcf2:	e7ef      	b.n	801dcd4 <_reclaim_reent+0x80>
 801dcf4:	2500      	movs	r5, #0
 801dcf6:	e7ef      	b.n	801dcd8 <_reclaim_reent+0x84>
 801dcf8:	bd70      	pop	{r4, r5, r6, pc}
 801dcfa:	bf00      	nop
 801dcfc:	20002478 	.word	0x20002478

0801dd00 <_lseek_r>:
 801dd00:	b538      	push	{r3, r4, r5, lr}
 801dd02:	4d07      	ldr	r5, [pc, #28]	; (801dd20 <_lseek_r+0x20>)
 801dd04:	4604      	mov	r4, r0
 801dd06:	4608      	mov	r0, r1
 801dd08:	4611      	mov	r1, r2
 801dd0a:	2200      	movs	r2, #0
 801dd0c:	602a      	str	r2, [r5, #0]
 801dd0e:	461a      	mov	r2, r3
 801dd10:	f7e5 fce0 	bl	80036d4 <_lseek>
 801dd14:	1c43      	adds	r3, r0, #1
 801dd16:	d102      	bne.n	801dd1e <_lseek_r+0x1e>
 801dd18:	682b      	ldr	r3, [r5, #0]
 801dd1a:	b103      	cbz	r3, 801dd1e <_lseek_r+0x1e>
 801dd1c:	6023      	str	r3, [r4, #0]
 801dd1e:	bd38      	pop	{r3, r4, r5, pc}
 801dd20:	20010fcc 	.word	0x20010fcc

0801dd24 <_read_r>:
 801dd24:	b538      	push	{r3, r4, r5, lr}
 801dd26:	4d07      	ldr	r5, [pc, #28]	; (801dd44 <_read_r+0x20>)
 801dd28:	4604      	mov	r4, r0
 801dd2a:	4608      	mov	r0, r1
 801dd2c:	4611      	mov	r1, r2
 801dd2e:	2200      	movs	r2, #0
 801dd30:	602a      	str	r2, [r5, #0]
 801dd32:	461a      	mov	r2, r3
 801dd34:	f7e5 fc6e 	bl	8003614 <_read>
 801dd38:	1c43      	adds	r3, r0, #1
 801dd3a:	d102      	bne.n	801dd42 <_read_r+0x1e>
 801dd3c:	682b      	ldr	r3, [r5, #0]
 801dd3e:	b103      	cbz	r3, 801dd42 <_read_r+0x1e>
 801dd40:	6023      	str	r3, [r4, #0]
 801dd42:	bd38      	pop	{r3, r4, r5, pc}
 801dd44:	20010fcc 	.word	0x20010fcc

0801dd48 <_sbrk_r>:
 801dd48:	b538      	push	{r3, r4, r5, lr}
 801dd4a:	4d06      	ldr	r5, [pc, #24]	; (801dd64 <_sbrk_r+0x1c>)
 801dd4c:	2300      	movs	r3, #0
 801dd4e:	4604      	mov	r4, r0
 801dd50:	4608      	mov	r0, r1
 801dd52:	602b      	str	r3, [r5, #0]
 801dd54:	f7e5 fccc 	bl	80036f0 <_sbrk>
 801dd58:	1c43      	adds	r3, r0, #1
 801dd5a:	d102      	bne.n	801dd62 <_sbrk_r+0x1a>
 801dd5c:	682b      	ldr	r3, [r5, #0]
 801dd5e:	b103      	cbz	r3, 801dd62 <_sbrk_r+0x1a>
 801dd60:	6023      	str	r3, [r4, #0]
 801dd62:	bd38      	pop	{r3, r4, r5, pc}
 801dd64:	20010fcc 	.word	0x20010fcc

0801dd68 <_write_r>:
 801dd68:	b538      	push	{r3, r4, r5, lr}
 801dd6a:	4d07      	ldr	r5, [pc, #28]	; (801dd88 <_write_r+0x20>)
 801dd6c:	4604      	mov	r4, r0
 801dd6e:	4608      	mov	r0, r1
 801dd70:	4611      	mov	r1, r2
 801dd72:	2200      	movs	r2, #0
 801dd74:	602a      	str	r2, [r5, #0]
 801dd76:	461a      	mov	r2, r3
 801dd78:	f7e5 fc69 	bl	800364e <_write>
 801dd7c:	1c43      	adds	r3, r0, #1
 801dd7e:	d102      	bne.n	801dd86 <_write_r+0x1e>
 801dd80:	682b      	ldr	r3, [r5, #0]
 801dd82:	b103      	cbz	r3, 801dd86 <_write_r+0x1e>
 801dd84:	6023      	str	r3, [r4, #0]
 801dd86:	bd38      	pop	{r3, r4, r5, pc}
 801dd88:	20010fcc 	.word	0x20010fcc

0801dd8c <__errno>:
 801dd8c:	4b01      	ldr	r3, [pc, #4]	; (801dd94 <__errno+0x8>)
 801dd8e:	6818      	ldr	r0, [r3, #0]
 801dd90:	4770      	bx	lr
 801dd92:	bf00      	nop
 801dd94:	20002478 	.word	0x20002478

0801dd98 <__libc_init_array>:
 801dd98:	b570      	push	{r4, r5, r6, lr}
 801dd9a:	4d0d      	ldr	r5, [pc, #52]	; (801ddd0 <__libc_init_array+0x38>)
 801dd9c:	4c0d      	ldr	r4, [pc, #52]	; (801ddd4 <__libc_init_array+0x3c>)
 801dd9e:	1b64      	subs	r4, r4, r5
 801dda0:	10a4      	asrs	r4, r4, #2
 801dda2:	2600      	movs	r6, #0
 801dda4:	42a6      	cmp	r6, r4
 801dda6:	d109      	bne.n	801ddbc <__libc_init_array+0x24>
 801dda8:	4d0b      	ldr	r5, [pc, #44]	; (801ddd8 <__libc_init_array+0x40>)
 801ddaa:	4c0c      	ldr	r4, [pc, #48]	; (801dddc <__libc_init_array+0x44>)
 801ddac:	f000 ff00 	bl	801ebb0 <_init>
 801ddb0:	1b64      	subs	r4, r4, r5
 801ddb2:	10a4      	asrs	r4, r4, #2
 801ddb4:	2600      	movs	r6, #0
 801ddb6:	42a6      	cmp	r6, r4
 801ddb8:	d105      	bne.n	801ddc6 <__libc_init_array+0x2e>
 801ddba:	bd70      	pop	{r4, r5, r6, pc}
 801ddbc:	f855 3b04 	ldr.w	r3, [r5], #4
 801ddc0:	4798      	blx	r3
 801ddc2:	3601      	adds	r6, #1
 801ddc4:	e7ee      	b.n	801dda4 <__libc_init_array+0xc>
 801ddc6:	f855 3b04 	ldr.w	r3, [r5], #4
 801ddca:	4798      	blx	r3
 801ddcc:	3601      	adds	r6, #1
 801ddce:	e7f2      	b.n	801ddb6 <__libc_init_array+0x1e>
 801ddd0:	08020ea0 	.word	0x08020ea0
 801ddd4:	08020ea0 	.word	0x08020ea0
 801ddd8:	08020ea0 	.word	0x08020ea0
 801dddc:	08020ec0 	.word	0x08020ec0

0801dde0 <__retarget_lock_init_recursive>:
 801dde0:	4770      	bx	lr

0801dde2 <__retarget_lock_acquire_recursive>:
 801dde2:	4770      	bx	lr

0801dde4 <__retarget_lock_release_recursive>:
 801dde4:	4770      	bx	lr

0801dde6 <strcpy>:
 801dde6:	4603      	mov	r3, r0
 801dde8:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ddec:	f803 2b01 	strb.w	r2, [r3], #1
 801ddf0:	2a00      	cmp	r2, #0
 801ddf2:	d1f9      	bne.n	801dde8 <strcpy+0x2>
 801ddf4:	4770      	bx	lr

0801ddf6 <memcpy>:
 801ddf6:	440a      	add	r2, r1
 801ddf8:	4291      	cmp	r1, r2
 801ddfa:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801ddfe:	d100      	bne.n	801de02 <memcpy+0xc>
 801de00:	4770      	bx	lr
 801de02:	b510      	push	{r4, lr}
 801de04:	f811 4b01 	ldrb.w	r4, [r1], #1
 801de08:	f803 4f01 	strb.w	r4, [r3, #1]!
 801de0c:	4291      	cmp	r1, r2
 801de0e:	d1f9      	bne.n	801de04 <memcpy+0xe>
 801de10:	bd10      	pop	{r4, pc}
	...

0801de14 <__assert_func>:
 801de14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801de16:	4614      	mov	r4, r2
 801de18:	461a      	mov	r2, r3
 801de1a:	4b09      	ldr	r3, [pc, #36]	; (801de40 <__assert_func+0x2c>)
 801de1c:	681b      	ldr	r3, [r3, #0]
 801de1e:	4605      	mov	r5, r0
 801de20:	68d8      	ldr	r0, [r3, #12]
 801de22:	b14c      	cbz	r4, 801de38 <__assert_func+0x24>
 801de24:	4b07      	ldr	r3, [pc, #28]	; (801de44 <__assert_func+0x30>)
 801de26:	9100      	str	r1, [sp, #0]
 801de28:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801de2c:	4906      	ldr	r1, [pc, #24]	; (801de48 <__assert_func+0x34>)
 801de2e:	462b      	mov	r3, r5
 801de30:	f000 fc04 	bl	801e63c <fiprintf>
 801de34:	f000 fc14 	bl	801e660 <abort>
 801de38:	4b04      	ldr	r3, [pc, #16]	; (801de4c <__assert_func+0x38>)
 801de3a:	461c      	mov	r4, r3
 801de3c:	e7f3      	b.n	801de26 <__assert_func+0x12>
 801de3e:	bf00      	nop
 801de40:	20002478 	.word	0x20002478
 801de44:	08020e28 	.word	0x08020e28
 801de48:	08020e35 	.word	0x08020e35
 801de4c:	08020e63 	.word	0x08020e63

0801de50 <__env_lock>:
 801de50:	4801      	ldr	r0, [pc, #4]	; (801de58 <__env_lock+0x8>)
 801de52:	f7ff bfc6 	b.w	801dde2 <__retarget_lock_acquire_recursive>
 801de56:	bf00      	nop
 801de58:	20010fd0 	.word	0x20010fd0

0801de5c <__env_unlock>:
 801de5c:	4801      	ldr	r0, [pc, #4]	; (801de64 <__env_unlock+0x8>)
 801de5e:	f7ff bfc1 	b.w	801dde4 <__retarget_lock_release_recursive>
 801de62:	bf00      	nop
 801de64:	20010fd0 	.word	0x20010fd0

0801de68 <_free_r>:
 801de68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801de6a:	2900      	cmp	r1, #0
 801de6c:	d044      	beq.n	801def8 <_free_r+0x90>
 801de6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801de72:	9001      	str	r0, [sp, #4]
 801de74:	2b00      	cmp	r3, #0
 801de76:	f1a1 0404 	sub.w	r4, r1, #4
 801de7a:	bfb8      	it	lt
 801de7c:	18e4      	addlt	r4, r4, r3
 801de7e:	f7ff fbc1 	bl	801d604 <__malloc_lock>
 801de82:	4a1e      	ldr	r2, [pc, #120]	; (801defc <_free_r+0x94>)
 801de84:	9801      	ldr	r0, [sp, #4]
 801de86:	6813      	ldr	r3, [r2, #0]
 801de88:	b933      	cbnz	r3, 801de98 <_free_r+0x30>
 801de8a:	6063      	str	r3, [r4, #4]
 801de8c:	6014      	str	r4, [r2, #0]
 801de8e:	b003      	add	sp, #12
 801de90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801de94:	f7ff bbbc 	b.w	801d610 <__malloc_unlock>
 801de98:	42a3      	cmp	r3, r4
 801de9a:	d908      	bls.n	801deae <_free_r+0x46>
 801de9c:	6825      	ldr	r5, [r4, #0]
 801de9e:	1961      	adds	r1, r4, r5
 801dea0:	428b      	cmp	r3, r1
 801dea2:	bf01      	itttt	eq
 801dea4:	6819      	ldreq	r1, [r3, #0]
 801dea6:	685b      	ldreq	r3, [r3, #4]
 801dea8:	1949      	addeq	r1, r1, r5
 801deaa:	6021      	streq	r1, [r4, #0]
 801deac:	e7ed      	b.n	801de8a <_free_r+0x22>
 801deae:	461a      	mov	r2, r3
 801deb0:	685b      	ldr	r3, [r3, #4]
 801deb2:	b10b      	cbz	r3, 801deb8 <_free_r+0x50>
 801deb4:	42a3      	cmp	r3, r4
 801deb6:	d9fa      	bls.n	801deae <_free_r+0x46>
 801deb8:	6811      	ldr	r1, [r2, #0]
 801deba:	1855      	adds	r5, r2, r1
 801debc:	42a5      	cmp	r5, r4
 801debe:	d10b      	bne.n	801ded8 <_free_r+0x70>
 801dec0:	6824      	ldr	r4, [r4, #0]
 801dec2:	4421      	add	r1, r4
 801dec4:	1854      	adds	r4, r2, r1
 801dec6:	42a3      	cmp	r3, r4
 801dec8:	6011      	str	r1, [r2, #0]
 801deca:	d1e0      	bne.n	801de8e <_free_r+0x26>
 801decc:	681c      	ldr	r4, [r3, #0]
 801dece:	685b      	ldr	r3, [r3, #4]
 801ded0:	6053      	str	r3, [r2, #4]
 801ded2:	440c      	add	r4, r1
 801ded4:	6014      	str	r4, [r2, #0]
 801ded6:	e7da      	b.n	801de8e <_free_r+0x26>
 801ded8:	d902      	bls.n	801dee0 <_free_r+0x78>
 801deda:	230c      	movs	r3, #12
 801dedc:	6003      	str	r3, [r0, #0]
 801dede:	e7d6      	b.n	801de8e <_free_r+0x26>
 801dee0:	6825      	ldr	r5, [r4, #0]
 801dee2:	1961      	adds	r1, r4, r5
 801dee4:	428b      	cmp	r3, r1
 801dee6:	bf04      	itt	eq
 801dee8:	6819      	ldreq	r1, [r3, #0]
 801deea:	685b      	ldreq	r3, [r3, #4]
 801deec:	6063      	str	r3, [r4, #4]
 801deee:	bf04      	itt	eq
 801def0:	1949      	addeq	r1, r1, r5
 801def2:	6021      	streq	r1, [r4, #0]
 801def4:	6054      	str	r4, [r2, #4]
 801def6:	e7ca      	b.n	801de8e <_free_r+0x26>
 801def8:	b003      	add	sp, #12
 801defa:	bd30      	pop	{r4, r5, pc}
 801defc:	20010e88 	.word	0x20010e88

0801df00 <_malloc_usable_size_r>:
 801df00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801df04:	1f18      	subs	r0, r3, #4
 801df06:	2b00      	cmp	r3, #0
 801df08:	bfbc      	itt	lt
 801df0a:	580b      	ldrlt	r3, [r1, r0]
 801df0c:	18c0      	addlt	r0, r0, r3
 801df0e:	4770      	bx	lr

0801df10 <__ssputs_r>:
 801df10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801df14:	688e      	ldr	r6, [r1, #8]
 801df16:	461f      	mov	r7, r3
 801df18:	42be      	cmp	r6, r7
 801df1a:	680b      	ldr	r3, [r1, #0]
 801df1c:	4682      	mov	sl, r0
 801df1e:	460c      	mov	r4, r1
 801df20:	4690      	mov	r8, r2
 801df22:	d82c      	bhi.n	801df7e <__ssputs_r+0x6e>
 801df24:	898a      	ldrh	r2, [r1, #12]
 801df26:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801df2a:	d026      	beq.n	801df7a <__ssputs_r+0x6a>
 801df2c:	6965      	ldr	r5, [r4, #20]
 801df2e:	6909      	ldr	r1, [r1, #16]
 801df30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801df34:	eba3 0901 	sub.w	r9, r3, r1
 801df38:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801df3c:	1c7b      	adds	r3, r7, #1
 801df3e:	444b      	add	r3, r9
 801df40:	106d      	asrs	r5, r5, #1
 801df42:	429d      	cmp	r5, r3
 801df44:	bf38      	it	cc
 801df46:	461d      	movcc	r5, r3
 801df48:	0553      	lsls	r3, r2, #21
 801df4a:	d527      	bpl.n	801df9c <__ssputs_r+0x8c>
 801df4c:	4629      	mov	r1, r5
 801df4e:	f7ff fad9 	bl	801d504 <_malloc_r>
 801df52:	4606      	mov	r6, r0
 801df54:	b360      	cbz	r0, 801dfb0 <__ssputs_r+0xa0>
 801df56:	6921      	ldr	r1, [r4, #16]
 801df58:	464a      	mov	r2, r9
 801df5a:	f7ff ff4c 	bl	801ddf6 <memcpy>
 801df5e:	89a3      	ldrh	r3, [r4, #12]
 801df60:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801df64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801df68:	81a3      	strh	r3, [r4, #12]
 801df6a:	6126      	str	r6, [r4, #16]
 801df6c:	6165      	str	r5, [r4, #20]
 801df6e:	444e      	add	r6, r9
 801df70:	eba5 0509 	sub.w	r5, r5, r9
 801df74:	6026      	str	r6, [r4, #0]
 801df76:	60a5      	str	r5, [r4, #8]
 801df78:	463e      	mov	r6, r7
 801df7a:	42be      	cmp	r6, r7
 801df7c:	d900      	bls.n	801df80 <__ssputs_r+0x70>
 801df7e:	463e      	mov	r6, r7
 801df80:	6820      	ldr	r0, [r4, #0]
 801df82:	4632      	mov	r2, r6
 801df84:	4641      	mov	r1, r8
 801df86:	f7ff fdeb 	bl	801db60 <memmove>
 801df8a:	68a3      	ldr	r3, [r4, #8]
 801df8c:	1b9b      	subs	r3, r3, r6
 801df8e:	60a3      	str	r3, [r4, #8]
 801df90:	6823      	ldr	r3, [r4, #0]
 801df92:	4433      	add	r3, r6
 801df94:	6023      	str	r3, [r4, #0]
 801df96:	2000      	movs	r0, #0
 801df98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801df9c:	462a      	mov	r2, r5
 801df9e:	f7ff fbb1 	bl	801d704 <_realloc_r>
 801dfa2:	4606      	mov	r6, r0
 801dfa4:	2800      	cmp	r0, #0
 801dfa6:	d1e0      	bne.n	801df6a <__ssputs_r+0x5a>
 801dfa8:	6921      	ldr	r1, [r4, #16]
 801dfaa:	4650      	mov	r0, sl
 801dfac:	f7ff ff5c 	bl	801de68 <_free_r>
 801dfb0:	230c      	movs	r3, #12
 801dfb2:	f8ca 3000 	str.w	r3, [sl]
 801dfb6:	89a3      	ldrh	r3, [r4, #12]
 801dfb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801dfbc:	81a3      	strh	r3, [r4, #12]
 801dfbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801dfc2:	e7e9      	b.n	801df98 <__ssputs_r+0x88>

0801dfc4 <_svfiprintf_r>:
 801dfc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dfc8:	4698      	mov	r8, r3
 801dfca:	898b      	ldrh	r3, [r1, #12]
 801dfcc:	061b      	lsls	r3, r3, #24
 801dfce:	b09d      	sub	sp, #116	; 0x74
 801dfd0:	4607      	mov	r7, r0
 801dfd2:	460d      	mov	r5, r1
 801dfd4:	4614      	mov	r4, r2
 801dfd6:	d50e      	bpl.n	801dff6 <_svfiprintf_r+0x32>
 801dfd8:	690b      	ldr	r3, [r1, #16]
 801dfda:	b963      	cbnz	r3, 801dff6 <_svfiprintf_r+0x32>
 801dfdc:	2140      	movs	r1, #64	; 0x40
 801dfde:	f7ff fa91 	bl	801d504 <_malloc_r>
 801dfe2:	6028      	str	r0, [r5, #0]
 801dfe4:	6128      	str	r0, [r5, #16]
 801dfe6:	b920      	cbnz	r0, 801dff2 <_svfiprintf_r+0x2e>
 801dfe8:	230c      	movs	r3, #12
 801dfea:	603b      	str	r3, [r7, #0]
 801dfec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801dff0:	e0d0      	b.n	801e194 <_svfiprintf_r+0x1d0>
 801dff2:	2340      	movs	r3, #64	; 0x40
 801dff4:	616b      	str	r3, [r5, #20]
 801dff6:	2300      	movs	r3, #0
 801dff8:	9309      	str	r3, [sp, #36]	; 0x24
 801dffa:	2320      	movs	r3, #32
 801dffc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801e000:	f8cd 800c 	str.w	r8, [sp, #12]
 801e004:	2330      	movs	r3, #48	; 0x30
 801e006:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801e1ac <_svfiprintf_r+0x1e8>
 801e00a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801e00e:	f04f 0901 	mov.w	r9, #1
 801e012:	4623      	mov	r3, r4
 801e014:	469a      	mov	sl, r3
 801e016:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e01a:	b10a      	cbz	r2, 801e020 <_svfiprintf_r+0x5c>
 801e01c:	2a25      	cmp	r2, #37	; 0x25
 801e01e:	d1f9      	bne.n	801e014 <_svfiprintf_r+0x50>
 801e020:	ebba 0b04 	subs.w	fp, sl, r4
 801e024:	d00b      	beq.n	801e03e <_svfiprintf_r+0x7a>
 801e026:	465b      	mov	r3, fp
 801e028:	4622      	mov	r2, r4
 801e02a:	4629      	mov	r1, r5
 801e02c:	4638      	mov	r0, r7
 801e02e:	f7ff ff6f 	bl	801df10 <__ssputs_r>
 801e032:	3001      	adds	r0, #1
 801e034:	f000 80a9 	beq.w	801e18a <_svfiprintf_r+0x1c6>
 801e038:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e03a:	445a      	add	r2, fp
 801e03c:	9209      	str	r2, [sp, #36]	; 0x24
 801e03e:	f89a 3000 	ldrb.w	r3, [sl]
 801e042:	2b00      	cmp	r3, #0
 801e044:	f000 80a1 	beq.w	801e18a <_svfiprintf_r+0x1c6>
 801e048:	2300      	movs	r3, #0
 801e04a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801e04e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e052:	f10a 0a01 	add.w	sl, sl, #1
 801e056:	9304      	str	r3, [sp, #16]
 801e058:	9307      	str	r3, [sp, #28]
 801e05a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801e05e:	931a      	str	r3, [sp, #104]	; 0x68
 801e060:	4654      	mov	r4, sl
 801e062:	2205      	movs	r2, #5
 801e064:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e068:	4850      	ldr	r0, [pc, #320]	; (801e1ac <_svfiprintf_r+0x1e8>)
 801e06a:	f7e2 f8f9 	bl	8000260 <memchr>
 801e06e:	9a04      	ldr	r2, [sp, #16]
 801e070:	b9d8      	cbnz	r0, 801e0aa <_svfiprintf_r+0xe6>
 801e072:	06d0      	lsls	r0, r2, #27
 801e074:	bf44      	itt	mi
 801e076:	2320      	movmi	r3, #32
 801e078:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e07c:	0711      	lsls	r1, r2, #28
 801e07e:	bf44      	itt	mi
 801e080:	232b      	movmi	r3, #43	; 0x2b
 801e082:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e086:	f89a 3000 	ldrb.w	r3, [sl]
 801e08a:	2b2a      	cmp	r3, #42	; 0x2a
 801e08c:	d015      	beq.n	801e0ba <_svfiprintf_r+0xf6>
 801e08e:	9a07      	ldr	r2, [sp, #28]
 801e090:	4654      	mov	r4, sl
 801e092:	2000      	movs	r0, #0
 801e094:	f04f 0c0a 	mov.w	ip, #10
 801e098:	4621      	mov	r1, r4
 801e09a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e09e:	3b30      	subs	r3, #48	; 0x30
 801e0a0:	2b09      	cmp	r3, #9
 801e0a2:	d94d      	bls.n	801e140 <_svfiprintf_r+0x17c>
 801e0a4:	b1b0      	cbz	r0, 801e0d4 <_svfiprintf_r+0x110>
 801e0a6:	9207      	str	r2, [sp, #28]
 801e0a8:	e014      	b.n	801e0d4 <_svfiprintf_r+0x110>
 801e0aa:	eba0 0308 	sub.w	r3, r0, r8
 801e0ae:	fa09 f303 	lsl.w	r3, r9, r3
 801e0b2:	4313      	orrs	r3, r2
 801e0b4:	9304      	str	r3, [sp, #16]
 801e0b6:	46a2      	mov	sl, r4
 801e0b8:	e7d2      	b.n	801e060 <_svfiprintf_r+0x9c>
 801e0ba:	9b03      	ldr	r3, [sp, #12]
 801e0bc:	1d19      	adds	r1, r3, #4
 801e0be:	681b      	ldr	r3, [r3, #0]
 801e0c0:	9103      	str	r1, [sp, #12]
 801e0c2:	2b00      	cmp	r3, #0
 801e0c4:	bfbb      	ittet	lt
 801e0c6:	425b      	neglt	r3, r3
 801e0c8:	f042 0202 	orrlt.w	r2, r2, #2
 801e0cc:	9307      	strge	r3, [sp, #28]
 801e0ce:	9307      	strlt	r3, [sp, #28]
 801e0d0:	bfb8      	it	lt
 801e0d2:	9204      	strlt	r2, [sp, #16]
 801e0d4:	7823      	ldrb	r3, [r4, #0]
 801e0d6:	2b2e      	cmp	r3, #46	; 0x2e
 801e0d8:	d10c      	bne.n	801e0f4 <_svfiprintf_r+0x130>
 801e0da:	7863      	ldrb	r3, [r4, #1]
 801e0dc:	2b2a      	cmp	r3, #42	; 0x2a
 801e0de:	d134      	bne.n	801e14a <_svfiprintf_r+0x186>
 801e0e0:	9b03      	ldr	r3, [sp, #12]
 801e0e2:	1d1a      	adds	r2, r3, #4
 801e0e4:	681b      	ldr	r3, [r3, #0]
 801e0e6:	9203      	str	r2, [sp, #12]
 801e0e8:	2b00      	cmp	r3, #0
 801e0ea:	bfb8      	it	lt
 801e0ec:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801e0f0:	3402      	adds	r4, #2
 801e0f2:	9305      	str	r3, [sp, #20]
 801e0f4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801e1bc <_svfiprintf_r+0x1f8>
 801e0f8:	7821      	ldrb	r1, [r4, #0]
 801e0fa:	2203      	movs	r2, #3
 801e0fc:	4650      	mov	r0, sl
 801e0fe:	f7e2 f8af 	bl	8000260 <memchr>
 801e102:	b138      	cbz	r0, 801e114 <_svfiprintf_r+0x150>
 801e104:	9b04      	ldr	r3, [sp, #16]
 801e106:	eba0 000a 	sub.w	r0, r0, sl
 801e10a:	2240      	movs	r2, #64	; 0x40
 801e10c:	4082      	lsls	r2, r0
 801e10e:	4313      	orrs	r3, r2
 801e110:	3401      	adds	r4, #1
 801e112:	9304      	str	r3, [sp, #16]
 801e114:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e118:	4825      	ldr	r0, [pc, #148]	; (801e1b0 <_svfiprintf_r+0x1ec>)
 801e11a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801e11e:	2206      	movs	r2, #6
 801e120:	f7e2 f89e 	bl	8000260 <memchr>
 801e124:	2800      	cmp	r0, #0
 801e126:	d038      	beq.n	801e19a <_svfiprintf_r+0x1d6>
 801e128:	4b22      	ldr	r3, [pc, #136]	; (801e1b4 <_svfiprintf_r+0x1f0>)
 801e12a:	bb1b      	cbnz	r3, 801e174 <_svfiprintf_r+0x1b0>
 801e12c:	9b03      	ldr	r3, [sp, #12]
 801e12e:	3307      	adds	r3, #7
 801e130:	f023 0307 	bic.w	r3, r3, #7
 801e134:	3308      	adds	r3, #8
 801e136:	9303      	str	r3, [sp, #12]
 801e138:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e13a:	4433      	add	r3, r6
 801e13c:	9309      	str	r3, [sp, #36]	; 0x24
 801e13e:	e768      	b.n	801e012 <_svfiprintf_r+0x4e>
 801e140:	fb0c 3202 	mla	r2, ip, r2, r3
 801e144:	460c      	mov	r4, r1
 801e146:	2001      	movs	r0, #1
 801e148:	e7a6      	b.n	801e098 <_svfiprintf_r+0xd4>
 801e14a:	2300      	movs	r3, #0
 801e14c:	3401      	adds	r4, #1
 801e14e:	9305      	str	r3, [sp, #20]
 801e150:	4619      	mov	r1, r3
 801e152:	f04f 0c0a 	mov.w	ip, #10
 801e156:	4620      	mov	r0, r4
 801e158:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e15c:	3a30      	subs	r2, #48	; 0x30
 801e15e:	2a09      	cmp	r2, #9
 801e160:	d903      	bls.n	801e16a <_svfiprintf_r+0x1a6>
 801e162:	2b00      	cmp	r3, #0
 801e164:	d0c6      	beq.n	801e0f4 <_svfiprintf_r+0x130>
 801e166:	9105      	str	r1, [sp, #20]
 801e168:	e7c4      	b.n	801e0f4 <_svfiprintf_r+0x130>
 801e16a:	fb0c 2101 	mla	r1, ip, r1, r2
 801e16e:	4604      	mov	r4, r0
 801e170:	2301      	movs	r3, #1
 801e172:	e7f0      	b.n	801e156 <_svfiprintf_r+0x192>
 801e174:	ab03      	add	r3, sp, #12
 801e176:	9300      	str	r3, [sp, #0]
 801e178:	462a      	mov	r2, r5
 801e17a:	4b0f      	ldr	r3, [pc, #60]	; (801e1b8 <_svfiprintf_r+0x1f4>)
 801e17c:	a904      	add	r1, sp, #16
 801e17e:	4638      	mov	r0, r7
 801e180:	f3af 8000 	nop.w
 801e184:	1c42      	adds	r2, r0, #1
 801e186:	4606      	mov	r6, r0
 801e188:	d1d6      	bne.n	801e138 <_svfiprintf_r+0x174>
 801e18a:	89ab      	ldrh	r3, [r5, #12]
 801e18c:	065b      	lsls	r3, r3, #25
 801e18e:	f53f af2d 	bmi.w	801dfec <_svfiprintf_r+0x28>
 801e192:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e194:	b01d      	add	sp, #116	; 0x74
 801e196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e19a:	ab03      	add	r3, sp, #12
 801e19c:	9300      	str	r3, [sp, #0]
 801e19e:	462a      	mov	r2, r5
 801e1a0:	4b05      	ldr	r3, [pc, #20]	; (801e1b8 <_svfiprintf_r+0x1f4>)
 801e1a2:	a904      	add	r1, sp, #16
 801e1a4:	4638      	mov	r0, r7
 801e1a6:	f000 f879 	bl	801e29c <_printf_i>
 801e1aa:	e7eb      	b.n	801e184 <_svfiprintf_r+0x1c0>
 801e1ac:	08020e64 	.word	0x08020e64
 801e1b0:	08020e6e 	.word	0x08020e6e
 801e1b4:	00000000 	.word	0x00000000
 801e1b8:	0801df11 	.word	0x0801df11
 801e1bc:	08020e6a 	.word	0x08020e6a

0801e1c0 <_printf_common>:
 801e1c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e1c4:	4616      	mov	r6, r2
 801e1c6:	4699      	mov	r9, r3
 801e1c8:	688a      	ldr	r2, [r1, #8]
 801e1ca:	690b      	ldr	r3, [r1, #16]
 801e1cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801e1d0:	4293      	cmp	r3, r2
 801e1d2:	bfb8      	it	lt
 801e1d4:	4613      	movlt	r3, r2
 801e1d6:	6033      	str	r3, [r6, #0]
 801e1d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801e1dc:	4607      	mov	r7, r0
 801e1de:	460c      	mov	r4, r1
 801e1e0:	b10a      	cbz	r2, 801e1e6 <_printf_common+0x26>
 801e1e2:	3301      	adds	r3, #1
 801e1e4:	6033      	str	r3, [r6, #0]
 801e1e6:	6823      	ldr	r3, [r4, #0]
 801e1e8:	0699      	lsls	r1, r3, #26
 801e1ea:	bf42      	ittt	mi
 801e1ec:	6833      	ldrmi	r3, [r6, #0]
 801e1ee:	3302      	addmi	r3, #2
 801e1f0:	6033      	strmi	r3, [r6, #0]
 801e1f2:	6825      	ldr	r5, [r4, #0]
 801e1f4:	f015 0506 	ands.w	r5, r5, #6
 801e1f8:	d106      	bne.n	801e208 <_printf_common+0x48>
 801e1fa:	f104 0a19 	add.w	sl, r4, #25
 801e1fe:	68e3      	ldr	r3, [r4, #12]
 801e200:	6832      	ldr	r2, [r6, #0]
 801e202:	1a9b      	subs	r3, r3, r2
 801e204:	42ab      	cmp	r3, r5
 801e206:	dc26      	bgt.n	801e256 <_printf_common+0x96>
 801e208:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801e20c:	1e13      	subs	r3, r2, #0
 801e20e:	6822      	ldr	r2, [r4, #0]
 801e210:	bf18      	it	ne
 801e212:	2301      	movne	r3, #1
 801e214:	0692      	lsls	r2, r2, #26
 801e216:	d42b      	bmi.n	801e270 <_printf_common+0xb0>
 801e218:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801e21c:	4649      	mov	r1, r9
 801e21e:	4638      	mov	r0, r7
 801e220:	47c0      	blx	r8
 801e222:	3001      	adds	r0, #1
 801e224:	d01e      	beq.n	801e264 <_printf_common+0xa4>
 801e226:	6823      	ldr	r3, [r4, #0]
 801e228:	6922      	ldr	r2, [r4, #16]
 801e22a:	f003 0306 	and.w	r3, r3, #6
 801e22e:	2b04      	cmp	r3, #4
 801e230:	bf02      	ittt	eq
 801e232:	68e5      	ldreq	r5, [r4, #12]
 801e234:	6833      	ldreq	r3, [r6, #0]
 801e236:	1aed      	subeq	r5, r5, r3
 801e238:	68a3      	ldr	r3, [r4, #8]
 801e23a:	bf0c      	ite	eq
 801e23c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801e240:	2500      	movne	r5, #0
 801e242:	4293      	cmp	r3, r2
 801e244:	bfc4      	itt	gt
 801e246:	1a9b      	subgt	r3, r3, r2
 801e248:	18ed      	addgt	r5, r5, r3
 801e24a:	2600      	movs	r6, #0
 801e24c:	341a      	adds	r4, #26
 801e24e:	42b5      	cmp	r5, r6
 801e250:	d11a      	bne.n	801e288 <_printf_common+0xc8>
 801e252:	2000      	movs	r0, #0
 801e254:	e008      	b.n	801e268 <_printf_common+0xa8>
 801e256:	2301      	movs	r3, #1
 801e258:	4652      	mov	r2, sl
 801e25a:	4649      	mov	r1, r9
 801e25c:	4638      	mov	r0, r7
 801e25e:	47c0      	blx	r8
 801e260:	3001      	adds	r0, #1
 801e262:	d103      	bne.n	801e26c <_printf_common+0xac>
 801e264:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e26c:	3501      	adds	r5, #1
 801e26e:	e7c6      	b.n	801e1fe <_printf_common+0x3e>
 801e270:	18e1      	adds	r1, r4, r3
 801e272:	1c5a      	adds	r2, r3, #1
 801e274:	2030      	movs	r0, #48	; 0x30
 801e276:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801e27a:	4422      	add	r2, r4
 801e27c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801e280:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801e284:	3302      	adds	r3, #2
 801e286:	e7c7      	b.n	801e218 <_printf_common+0x58>
 801e288:	2301      	movs	r3, #1
 801e28a:	4622      	mov	r2, r4
 801e28c:	4649      	mov	r1, r9
 801e28e:	4638      	mov	r0, r7
 801e290:	47c0      	blx	r8
 801e292:	3001      	adds	r0, #1
 801e294:	d0e6      	beq.n	801e264 <_printf_common+0xa4>
 801e296:	3601      	adds	r6, #1
 801e298:	e7d9      	b.n	801e24e <_printf_common+0x8e>
	...

0801e29c <_printf_i>:
 801e29c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801e2a0:	7e0f      	ldrb	r7, [r1, #24]
 801e2a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801e2a4:	2f78      	cmp	r7, #120	; 0x78
 801e2a6:	4691      	mov	r9, r2
 801e2a8:	4680      	mov	r8, r0
 801e2aa:	460c      	mov	r4, r1
 801e2ac:	469a      	mov	sl, r3
 801e2ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801e2b2:	d807      	bhi.n	801e2c4 <_printf_i+0x28>
 801e2b4:	2f62      	cmp	r7, #98	; 0x62
 801e2b6:	d80a      	bhi.n	801e2ce <_printf_i+0x32>
 801e2b8:	2f00      	cmp	r7, #0
 801e2ba:	f000 80d4 	beq.w	801e466 <_printf_i+0x1ca>
 801e2be:	2f58      	cmp	r7, #88	; 0x58
 801e2c0:	f000 80c0 	beq.w	801e444 <_printf_i+0x1a8>
 801e2c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801e2c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801e2cc:	e03a      	b.n	801e344 <_printf_i+0xa8>
 801e2ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801e2d2:	2b15      	cmp	r3, #21
 801e2d4:	d8f6      	bhi.n	801e2c4 <_printf_i+0x28>
 801e2d6:	a101      	add	r1, pc, #4	; (adr r1, 801e2dc <_printf_i+0x40>)
 801e2d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801e2dc:	0801e335 	.word	0x0801e335
 801e2e0:	0801e349 	.word	0x0801e349
 801e2e4:	0801e2c5 	.word	0x0801e2c5
 801e2e8:	0801e2c5 	.word	0x0801e2c5
 801e2ec:	0801e2c5 	.word	0x0801e2c5
 801e2f0:	0801e2c5 	.word	0x0801e2c5
 801e2f4:	0801e349 	.word	0x0801e349
 801e2f8:	0801e2c5 	.word	0x0801e2c5
 801e2fc:	0801e2c5 	.word	0x0801e2c5
 801e300:	0801e2c5 	.word	0x0801e2c5
 801e304:	0801e2c5 	.word	0x0801e2c5
 801e308:	0801e44d 	.word	0x0801e44d
 801e30c:	0801e375 	.word	0x0801e375
 801e310:	0801e407 	.word	0x0801e407
 801e314:	0801e2c5 	.word	0x0801e2c5
 801e318:	0801e2c5 	.word	0x0801e2c5
 801e31c:	0801e46f 	.word	0x0801e46f
 801e320:	0801e2c5 	.word	0x0801e2c5
 801e324:	0801e375 	.word	0x0801e375
 801e328:	0801e2c5 	.word	0x0801e2c5
 801e32c:	0801e2c5 	.word	0x0801e2c5
 801e330:	0801e40f 	.word	0x0801e40f
 801e334:	682b      	ldr	r3, [r5, #0]
 801e336:	1d1a      	adds	r2, r3, #4
 801e338:	681b      	ldr	r3, [r3, #0]
 801e33a:	602a      	str	r2, [r5, #0]
 801e33c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801e340:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801e344:	2301      	movs	r3, #1
 801e346:	e09f      	b.n	801e488 <_printf_i+0x1ec>
 801e348:	6820      	ldr	r0, [r4, #0]
 801e34a:	682b      	ldr	r3, [r5, #0]
 801e34c:	0607      	lsls	r7, r0, #24
 801e34e:	f103 0104 	add.w	r1, r3, #4
 801e352:	6029      	str	r1, [r5, #0]
 801e354:	d501      	bpl.n	801e35a <_printf_i+0xbe>
 801e356:	681e      	ldr	r6, [r3, #0]
 801e358:	e003      	b.n	801e362 <_printf_i+0xc6>
 801e35a:	0646      	lsls	r6, r0, #25
 801e35c:	d5fb      	bpl.n	801e356 <_printf_i+0xba>
 801e35e:	f9b3 6000 	ldrsh.w	r6, [r3]
 801e362:	2e00      	cmp	r6, #0
 801e364:	da03      	bge.n	801e36e <_printf_i+0xd2>
 801e366:	232d      	movs	r3, #45	; 0x2d
 801e368:	4276      	negs	r6, r6
 801e36a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e36e:	485a      	ldr	r0, [pc, #360]	; (801e4d8 <_printf_i+0x23c>)
 801e370:	230a      	movs	r3, #10
 801e372:	e012      	b.n	801e39a <_printf_i+0xfe>
 801e374:	682b      	ldr	r3, [r5, #0]
 801e376:	6820      	ldr	r0, [r4, #0]
 801e378:	1d19      	adds	r1, r3, #4
 801e37a:	6029      	str	r1, [r5, #0]
 801e37c:	0605      	lsls	r5, r0, #24
 801e37e:	d501      	bpl.n	801e384 <_printf_i+0xe8>
 801e380:	681e      	ldr	r6, [r3, #0]
 801e382:	e002      	b.n	801e38a <_printf_i+0xee>
 801e384:	0641      	lsls	r1, r0, #25
 801e386:	d5fb      	bpl.n	801e380 <_printf_i+0xe4>
 801e388:	881e      	ldrh	r6, [r3, #0]
 801e38a:	4853      	ldr	r0, [pc, #332]	; (801e4d8 <_printf_i+0x23c>)
 801e38c:	2f6f      	cmp	r7, #111	; 0x6f
 801e38e:	bf0c      	ite	eq
 801e390:	2308      	moveq	r3, #8
 801e392:	230a      	movne	r3, #10
 801e394:	2100      	movs	r1, #0
 801e396:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801e39a:	6865      	ldr	r5, [r4, #4]
 801e39c:	60a5      	str	r5, [r4, #8]
 801e39e:	2d00      	cmp	r5, #0
 801e3a0:	bfa2      	ittt	ge
 801e3a2:	6821      	ldrge	r1, [r4, #0]
 801e3a4:	f021 0104 	bicge.w	r1, r1, #4
 801e3a8:	6021      	strge	r1, [r4, #0]
 801e3aa:	b90e      	cbnz	r6, 801e3b0 <_printf_i+0x114>
 801e3ac:	2d00      	cmp	r5, #0
 801e3ae:	d04b      	beq.n	801e448 <_printf_i+0x1ac>
 801e3b0:	4615      	mov	r5, r2
 801e3b2:	fbb6 f1f3 	udiv	r1, r6, r3
 801e3b6:	fb03 6711 	mls	r7, r3, r1, r6
 801e3ba:	5dc7      	ldrb	r7, [r0, r7]
 801e3bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801e3c0:	4637      	mov	r7, r6
 801e3c2:	42bb      	cmp	r3, r7
 801e3c4:	460e      	mov	r6, r1
 801e3c6:	d9f4      	bls.n	801e3b2 <_printf_i+0x116>
 801e3c8:	2b08      	cmp	r3, #8
 801e3ca:	d10b      	bne.n	801e3e4 <_printf_i+0x148>
 801e3cc:	6823      	ldr	r3, [r4, #0]
 801e3ce:	07de      	lsls	r6, r3, #31
 801e3d0:	d508      	bpl.n	801e3e4 <_printf_i+0x148>
 801e3d2:	6923      	ldr	r3, [r4, #16]
 801e3d4:	6861      	ldr	r1, [r4, #4]
 801e3d6:	4299      	cmp	r1, r3
 801e3d8:	bfde      	ittt	le
 801e3da:	2330      	movle	r3, #48	; 0x30
 801e3dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 801e3e0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801e3e4:	1b52      	subs	r2, r2, r5
 801e3e6:	6122      	str	r2, [r4, #16]
 801e3e8:	f8cd a000 	str.w	sl, [sp]
 801e3ec:	464b      	mov	r3, r9
 801e3ee:	aa03      	add	r2, sp, #12
 801e3f0:	4621      	mov	r1, r4
 801e3f2:	4640      	mov	r0, r8
 801e3f4:	f7ff fee4 	bl	801e1c0 <_printf_common>
 801e3f8:	3001      	adds	r0, #1
 801e3fa:	d14a      	bne.n	801e492 <_printf_i+0x1f6>
 801e3fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e400:	b004      	add	sp, #16
 801e402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e406:	6823      	ldr	r3, [r4, #0]
 801e408:	f043 0320 	orr.w	r3, r3, #32
 801e40c:	6023      	str	r3, [r4, #0]
 801e40e:	4833      	ldr	r0, [pc, #204]	; (801e4dc <_printf_i+0x240>)
 801e410:	2778      	movs	r7, #120	; 0x78
 801e412:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801e416:	6823      	ldr	r3, [r4, #0]
 801e418:	6829      	ldr	r1, [r5, #0]
 801e41a:	061f      	lsls	r7, r3, #24
 801e41c:	f851 6b04 	ldr.w	r6, [r1], #4
 801e420:	d402      	bmi.n	801e428 <_printf_i+0x18c>
 801e422:	065f      	lsls	r7, r3, #25
 801e424:	bf48      	it	mi
 801e426:	b2b6      	uxthmi	r6, r6
 801e428:	07df      	lsls	r7, r3, #31
 801e42a:	bf48      	it	mi
 801e42c:	f043 0320 	orrmi.w	r3, r3, #32
 801e430:	6029      	str	r1, [r5, #0]
 801e432:	bf48      	it	mi
 801e434:	6023      	strmi	r3, [r4, #0]
 801e436:	b91e      	cbnz	r6, 801e440 <_printf_i+0x1a4>
 801e438:	6823      	ldr	r3, [r4, #0]
 801e43a:	f023 0320 	bic.w	r3, r3, #32
 801e43e:	6023      	str	r3, [r4, #0]
 801e440:	2310      	movs	r3, #16
 801e442:	e7a7      	b.n	801e394 <_printf_i+0xf8>
 801e444:	4824      	ldr	r0, [pc, #144]	; (801e4d8 <_printf_i+0x23c>)
 801e446:	e7e4      	b.n	801e412 <_printf_i+0x176>
 801e448:	4615      	mov	r5, r2
 801e44a:	e7bd      	b.n	801e3c8 <_printf_i+0x12c>
 801e44c:	682b      	ldr	r3, [r5, #0]
 801e44e:	6826      	ldr	r6, [r4, #0]
 801e450:	6961      	ldr	r1, [r4, #20]
 801e452:	1d18      	adds	r0, r3, #4
 801e454:	6028      	str	r0, [r5, #0]
 801e456:	0635      	lsls	r5, r6, #24
 801e458:	681b      	ldr	r3, [r3, #0]
 801e45a:	d501      	bpl.n	801e460 <_printf_i+0x1c4>
 801e45c:	6019      	str	r1, [r3, #0]
 801e45e:	e002      	b.n	801e466 <_printf_i+0x1ca>
 801e460:	0670      	lsls	r0, r6, #25
 801e462:	d5fb      	bpl.n	801e45c <_printf_i+0x1c0>
 801e464:	8019      	strh	r1, [r3, #0]
 801e466:	2300      	movs	r3, #0
 801e468:	6123      	str	r3, [r4, #16]
 801e46a:	4615      	mov	r5, r2
 801e46c:	e7bc      	b.n	801e3e8 <_printf_i+0x14c>
 801e46e:	682b      	ldr	r3, [r5, #0]
 801e470:	1d1a      	adds	r2, r3, #4
 801e472:	602a      	str	r2, [r5, #0]
 801e474:	681d      	ldr	r5, [r3, #0]
 801e476:	6862      	ldr	r2, [r4, #4]
 801e478:	2100      	movs	r1, #0
 801e47a:	4628      	mov	r0, r5
 801e47c:	f7e1 fef0 	bl	8000260 <memchr>
 801e480:	b108      	cbz	r0, 801e486 <_printf_i+0x1ea>
 801e482:	1b40      	subs	r0, r0, r5
 801e484:	6060      	str	r0, [r4, #4]
 801e486:	6863      	ldr	r3, [r4, #4]
 801e488:	6123      	str	r3, [r4, #16]
 801e48a:	2300      	movs	r3, #0
 801e48c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e490:	e7aa      	b.n	801e3e8 <_printf_i+0x14c>
 801e492:	6923      	ldr	r3, [r4, #16]
 801e494:	462a      	mov	r2, r5
 801e496:	4649      	mov	r1, r9
 801e498:	4640      	mov	r0, r8
 801e49a:	47d0      	blx	sl
 801e49c:	3001      	adds	r0, #1
 801e49e:	d0ad      	beq.n	801e3fc <_printf_i+0x160>
 801e4a0:	6823      	ldr	r3, [r4, #0]
 801e4a2:	079b      	lsls	r3, r3, #30
 801e4a4:	d413      	bmi.n	801e4ce <_printf_i+0x232>
 801e4a6:	68e0      	ldr	r0, [r4, #12]
 801e4a8:	9b03      	ldr	r3, [sp, #12]
 801e4aa:	4298      	cmp	r0, r3
 801e4ac:	bfb8      	it	lt
 801e4ae:	4618      	movlt	r0, r3
 801e4b0:	e7a6      	b.n	801e400 <_printf_i+0x164>
 801e4b2:	2301      	movs	r3, #1
 801e4b4:	4632      	mov	r2, r6
 801e4b6:	4649      	mov	r1, r9
 801e4b8:	4640      	mov	r0, r8
 801e4ba:	47d0      	blx	sl
 801e4bc:	3001      	adds	r0, #1
 801e4be:	d09d      	beq.n	801e3fc <_printf_i+0x160>
 801e4c0:	3501      	adds	r5, #1
 801e4c2:	68e3      	ldr	r3, [r4, #12]
 801e4c4:	9903      	ldr	r1, [sp, #12]
 801e4c6:	1a5b      	subs	r3, r3, r1
 801e4c8:	42ab      	cmp	r3, r5
 801e4ca:	dcf2      	bgt.n	801e4b2 <_printf_i+0x216>
 801e4cc:	e7eb      	b.n	801e4a6 <_printf_i+0x20a>
 801e4ce:	2500      	movs	r5, #0
 801e4d0:	f104 0619 	add.w	r6, r4, #25
 801e4d4:	e7f5      	b.n	801e4c2 <_printf_i+0x226>
 801e4d6:	bf00      	nop
 801e4d8:	08020e75 	.word	0x08020e75
 801e4dc:	08020e86 	.word	0x08020e86

0801e4e0 <__sflush_r>:
 801e4e0:	898a      	ldrh	r2, [r1, #12]
 801e4e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e4e6:	4605      	mov	r5, r0
 801e4e8:	0710      	lsls	r0, r2, #28
 801e4ea:	460c      	mov	r4, r1
 801e4ec:	d458      	bmi.n	801e5a0 <__sflush_r+0xc0>
 801e4ee:	684b      	ldr	r3, [r1, #4]
 801e4f0:	2b00      	cmp	r3, #0
 801e4f2:	dc05      	bgt.n	801e500 <__sflush_r+0x20>
 801e4f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801e4f6:	2b00      	cmp	r3, #0
 801e4f8:	dc02      	bgt.n	801e500 <__sflush_r+0x20>
 801e4fa:	2000      	movs	r0, #0
 801e4fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e500:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e502:	2e00      	cmp	r6, #0
 801e504:	d0f9      	beq.n	801e4fa <__sflush_r+0x1a>
 801e506:	2300      	movs	r3, #0
 801e508:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801e50c:	682f      	ldr	r7, [r5, #0]
 801e50e:	6a21      	ldr	r1, [r4, #32]
 801e510:	602b      	str	r3, [r5, #0]
 801e512:	d032      	beq.n	801e57a <__sflush_r+0x9a>
 801e514:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801e516:	89a3      	ldrh	r3, [r4, #12]
 801e518:	075a      	lsls	r2, r3, #29
 801e51a:	d505      	bpl.n	801e528 <__sflush_r+0x48>
 801e51c:	6863      	ldr	r3, [r4, #4]
 801e51e:	1ac0      	subs	r0, r0, r3
 801e520:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801e522:	b10b      	cbz	r3, 801e528 <__sflush_r+0x48>
 801e524:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801e526:	1ac0      	subs	r0, r0, r3
 801e528:	2300      	movs	r3, #0
 801e52a:	4602      	mov	r2, r0
 801e52c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e52e:	6a21      	ldr	r1, [r4, #32]
 801e530:	4628      	mov	r0, r5
 801e532:	47b0      	blx	r6
 801e534:	1c43      	adds	r3, r0, #1
 801e536:	89a3      	ldrh	r3, [r4, #12]
 801e538:	d106      	bne.n	801e548 <__sflush_r+0x68>
 801e53a:	6829      	ldr	r1, [r5, #0]
 801e53c:	291d      	cmp	r1, #29
 801e53e:	d82b      	bhi.n	801e598 <__sflush_r+0xb8>
 801e540:	4a29      	ldr	r2, [pc, #164]	; (801e5e8 <__sflush_r+0x108>)
 801e542:	410a      	asrs	r2, r1
 801e544:	07d6      	lsls	r6, r2, #31
 801e546:	d427      	bmi.n	801e598 <__sflush_r+0xb8>
 801e548:	2200      	movs	r2, #0
 801e54a:	6062      	str	r2, [r4, #4]
 801e54c:	04d9      	lsls	r1, r3, #19
 801e54e:	6922      	ldr	r2, [r4, #16]
 801e550:	6022      	str	r2, [r4, #0]
 801e552:	d504      	bpl.n	801e55e <__sflush_r+0x7e>
 801e554:	1c42      	adds	r2, r0, #1
 801e556:	d101      	bne.n	801e55c <__sflush_r+0x7c>
 801e558:	682b      	ldr	r3, [r5, #0]
 801e55a:	b903      	cbnz	r3, 801e55e <__sflush_r+0x7e>
 801e55c:	6560      	str	r0, [r4, #84]	; 0x54
 801e55e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e560:	602f      	str	r7, [r5, #0]
 801e562:	2900      	cmp	r1, #0
 801e564:	d0c9      	beq.n	801e4fa <__sflush_r+0x1a>
 801e566:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e56a:	4299      	cmp	r1, r3
 801e56c:	d002      	beq.n	801e574 <__sflush_r+0x94>
 801e56e:	4628      	mov	r0, r5
 801e570:	f7ff fc7a 	bl	801de68 <_free_r>
 801e574:	2000      	movs	r0, #0
 801e576:	6360      	str	r0, [r4, #52]	; 0x34
 801e578:	e7c0      	b.n	801e4fc <__sflush_r+0x1c>
 801e57a:	2301      	movs	r3, #1
 801e57c:	4628      	mov	r0, r5
 801e57e:	47b0      	blx	r6
 801e580:	1c41      	adds	r1, r0, #1
 801e582:	d1c8      	bne.n	801e516 <__sflush_r+0x36>
 801e584:	682b      	ldr	r3, [r5, #0]
 801e586:	2b00      	cmp	r3, #0
 801e588:	d0c5      	beq.n	801e516 <__sflush_r+0x36>
 801e58a:	2b1d      	cmp	r3, #29
 801e58c:	d001      	beq.n	801e592 <__sflush_r+0xb2>
 801e58e:	2b16      	cmp	r3, #22
 801e590:	d101      	bne.n	801e596 <__sflush_r+0xb6>
 801e592:	602f      	str	r7, [r5, #0]
 801e594:	e7b1      	b.n	801e4fa <__sflush_r+0x1a>
 801e596:	89a3      	ldrh	r3, [r4, #12]
 801e598:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e59c:	81a3      	strh	r3, [r4, #12]
 801e59e:	e7ad      	b.n	801e4fc <__sflush_r+0x1c>
 801e5a0:	690f      	ldr	r7, [r1, #16]
 801e5a2:	2f00      	cmp	r7, #0
 801e5a4:	d0a9      	beq.n	801e4fa <__sflush_r+0x1a>
 801e5a6:	0793      	lsls	r3, r2, #30
 801e5a8:	680e      	ldr	r6, [r1, #0]
 801e5aa:	bf08      	it	eq
 801e5ac:	694b      	ldreq	r3, [r1, #20]
 801e5ae:	600f      	str	r7, [r1, #0]
 801e5b0:	bf18      	it	ne
 801e5b2:	2300      	movne	r3, #0
 801e5b4:	eba6 0807 	sub.w	r8, r6, r7
 801e5b8:	608b      	str	r3, [r1, #8]
 801e5ba:	f1b8 0f00 	cmp.w	r8, #0
 801e5be:	dd9c      	ble.n	801e4fa <__sflush_r+0x1a>
 801e5c0:	6a21      	ldr	r1, [r4, #32]
 801e5c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801e5c4:	4643      	mov	r3, r8
 801e5c6:	463a      	mov	r2, r7
 801e5c8:	4628      	mov	r0, r5
 801e5ca:	47b0      	blx	r6
 801e5cc:	2800      	cmp	r0, #0
 801e5ce:	dc06      	bgt.n	801e5de <__sflush_r+0xfe>
 801e5d0:	89a3      	ldrh	r3, [r4, #12]
 801e5d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e5d6:	81a3      	strh	r3, [r4, #12]
 801e5d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e5dc:	e78e      	b.n	801e4fc <__sflush_r+0x1c>
 801e5de:	4407      	add	r7, r0
 801e5e0:	eba8 0800 	sub.w	r8, r8, r0
 801e5e4:	e7e9      	b.n	801e5ba <__sflush_r+0xda>
 801e5e6:	bf00      	nop
 801e5e8:	dfbffffe 	.word	0xdfbffffe

0801e5ec <_fflush_r>:
 801e5ec:	b538      	push	{r3, r4, r5, lr}
 801e5ee:	690b      	ldr	r3, [r1, #16]
 801e5f0:	4605      	mov	r5, r0
 801e5f2:	460c      	mov	r4, r1
 801e5f4:	b913      	cbnz	r3, 801e5fc <_fflush_r+0x10>
 801e5f6:	2500      	movs	r5, #0
 801e5f8:	4628      	mov	r0, r5
 801e5fa:	bd38      	pop	{r3, r4, r5, pc}
 801e5fc:	b118      	cbz	r0, 801e606 <_fflush_r+0x1a>
 801e5fe:	6a03      	ldr	r3, [r0, #32]
 801e600:	b90b      	cbnz	r3, 801e606 <_fflush_r+0x1a>
 801e602:	f7ff f9b7 	bl	801d974 <__sinit>
 801e606:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e60a:	2b00      	cmp	r3, #0
 801e60c:	d0f3      	beq.n	801e5f6 <_fflush_r+0xa>
 801e60e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801e610:	07d0      	lsls	r0, r2, #31
 801e612:	d404      	bmi.n	801e61e <_fflush_r+0x32>
 801e614:	0599      	lsls	r1, r3, #22
 801e616:	d402      	bmi.n	801e61e <_fflush_r+0x32>
 801e618:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e61a:	f7ff fbe2 	bl	801dde2 <__retarget_lock_acquire_recursive>
 801e61e:	4628      	mov	r0, r5
 801e620:	4621      	mov	r1, r4
 801e622:	f7ff ff5d 	bl	801e4e0 <__sflush_r>
 801e626:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e628:	07da      	lsls	r2, r3, #31
 801e62a:	4605      	mov	r5, r0
 801e62c:	d4e4      	bmi.n	801e5f8 <_fflush_r+0xc>
 801e62e:	89a3      	ldrh	r3, [r4, #12]
 801e630:	059b      	lsls	r3, r3, #22
 801e632:	d4e1      	bmi.n	801e5f8 <_fflush_r+0xc>
 801e634:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e636:	f7ff fbd5 	bl	801dde4 <__retarget_lock_release_recursive>
 801e63a:	e7dd      	b.n	801e5f8 <_fflush_r+0xc>

0801e63c <fiprintf>:
 801e63c:	b40e      	push	{r1, r2, r3}
 801e63e:	b503      	push	{r0, r1, lr}
 801e640:	4601      	mov	r1, r0
 801e642:	ab03      	add	r3, sp, #12
 801e644:	4805      	ldr	r0, [pc, #20]	; (801e65c <fiprintf+0x20>)
 801e646:	f853 2b04 	ldr.w	r2, [r3], #4
 801e64a:	6800      	ldr	r0, [r0, #0]
 801e64c:	9301      	str	r3, [sp, #4]
 801e64e:	f000 f837 	bl	801e6c0 <_vfiprintf_r>
 801e652:	b002      	add	sp, #8
 801e654:	f85d eb04 	ldr.w	lr, [sp], #4
 801e658:	b003      	add	sp, #12
 801e65a:	4770      	bx	lr
 801e65c:	20002478 	.word	0x20002478

0801e660 <abort>:
 801e660:	b508      	push	{r3, lr}
 801e662:	2006      	movs	r0, #6
 801e664:	f000 fa04 	bl	801ea70 <raise>
 801e668:	2001      	movs	r0, #1
 801e66a:	f7e4 ffc9 	bl	8003600 <_exit>

0801e66e <__sfputc_r>:
 801e66e:	6893      	ldr	r3, [r2, #8]
 801e670:	3b01      	subs	r3, #1
 801e672:	2b00      	cmp	r3, #0
 801e674:	b410      	push	{r4}
 801e676:	6093      	str	r3, [r2, #8]
 801e678:	da08      	bge.n	801e68c <__sfputc_r+0x1e>
 801e67a:	6994      	ldr	r4, [r2, #24]
 801e67c:	42a3      	cmp	r3, r4
 801e67e:	db01      	blt.n	801e684 <__sfputc_r+0x16>
 801e680:	290a      	cmp	r1, #10
 801e682:	d103      	bne.n	801e68c <__sfputc_r+0x1e>
 801e684:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e688:	f000 b934 	b.w	801e8f4 <__swbuf_r>
 801e68c:	6813      	ldr	r3, [r2, #0]
 801e68e:	1c58      	adds	r0, r3, #1
 801e690:	6010      	str	r0, [r2, #0]
 801e692:	7019      	strb	r1, [r3, #0]
 801e694:	4608      	mov	r0, r1
 801e696:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e69a:	4770      	bx	lr

0801e69c <__sfputs_r>:
 801e69c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e69e:	4606      	mov	r6, r0
 801e6a0:	460f      	mov	r7, r1
 801e6a2:	4614      	mov	r4, r2
 801e6a4:	18d5      	adds	r5, r2, r3
 801e6a6:	42ac      	cmp	r4, r5
 801e6a8:	d101      	bne.n	801e6ae <__sfputs_r+0x12>
 801e6aa:	2000      	movs	r0, #0
 801e6ac:	e007      	b.n	801e6be <__sfputs_r+0x22>
 801e6ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e6b2:	463a      	mov	r2, r7
 801e6b4:	4630      	mov	r0, r6
 801e6b6:	f7ff ffda 	bl	801e66e <__sfputc_r>
 801e6ba:	1c43      	adds	r3, r0, #1
 801e6bc:	d1f3      	bne.n	801e6a6 <__sfputs_r+0xa>
 801e6be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801e6c0 <_vfiprintf_r>:
 801e6c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e6c4:	460d      	mov	r5, r1
 801e6c6:	b09d      	sub	sp, #116	; 0x74
 801e6c8:	4614      	mov	r4, r2
 801e6ca:	4698      	mov	r8, r3
 801e6cc:	4606      	mov	r6, r0
 801e6ce:	b118      	cbz	r0, 801e6d8 <_vfiprintf_r+0x18>
 801e6d0:	6a03      	ldr	r3, [r0, #32]
 801e6d2:	b90b      	cbnz	r3, 801e6d8 <_vfiprintf_r+0x18>
 801e6d4:	f7ff f94e 	bl	801d974 <__sinit>
 801e6d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e6da:	07d9      	lsls	r1, r3, #31
 801e6dc:	d405      	bmi.n	801e6ea <_vfiprintf_r+0x2a>
 801e6de:	89ab      	ldrh	r3, [r5, #12]
 801e6e0:	059a      	lsls	r2, r3, #22
 801e6e2:	d402      	bmi.n	801e6ea <_vfiprintf_r+0x2a>
 801e6e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e6e6:	f7ff fb7c 	bl	801dde2 <__retarget_lock_acquire_recursive>
 801e6ea:	89ab      	ldrh	r3, [r5, #12]
 801e6ec:	071b      	lsls	r3, r3, #28
 801e6ee:	d501      	bpl.n	801e6f4 <_vfiprintf_r+0x34>
 801e6f0:	692b      	ldr	r3, [r5, #16]
 801e6f2:	b99b      	cbnz	r3, 801e71c <_vfiprintf_r+0x5c>
 801e6f4:	4629      	mov	r1, r5
 801e6f6:	4630      	mov	r0, r6
 801e6f8:	f000 f93a 	bl	801e970 <__swsetup_r>
 801e6fc:	b170      	cbz	r0, 801e71c <_vfiprintf_r+0x5c>
 801e6fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e700:	07dc      	lsls	r4, r3, #31
 801e702:	d504      	bpl.n	801e70e <_vfiprintf_r+0x4e>
 801e704:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e708:	b01d      	add	sp, #116	; 0x74
 801e70a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e70e:	89ab      	ldrh	r3, [r5, #12]
 801e710:	0598      	lsls	r0, r3, #22
 801e712:	d4f7      	bmi.n	801e704 <_vfiprintf_r+0x44>
 801e714:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e716:	f7ff fb65 	bl	801dde4 <__retarget_lock_release_recursive>
 801e71a:	e7f3      	b.n	801e704 <_vfiprintf_r+0x44>
 801e71c:	2300      	movs	r3, #0
 801e71e:	9309      	str	r3, [sp, #36]	; 0x24
 801e720:	2320      	movs	r3, #32
 801e722:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801e726:	f8cd 800c 	str.w	r8, [sp, #12]
 801e72a:	2330      	movs	r3, #48	; 0x30
 801e72c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801e8e0 <_vfiprintf_r+0x220>
 801e730:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801e734:	f04f 0901 	mov.w	r9, #1
 801e738:	4623      	mov	r3, r4
 801e73a:	469a      	mov	sl, r3
 801e73c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e740:	b10a      	cbz	r2, 801e746 <_vfiprintf_r+0x86>
 801e742:	2a25      	cmp	r2, #37	; 0x25
 801e744:	d1f9      	bne.n	801e73a <_vfiprintf_r+0x7a>
 801e746:	ebba 0b04 	subs.w	fp, sl, r4
 801e74a:	d00b      	beq.n	801e764 <_vfiprintf_r+0xa4>
 801e74c:	465b      	mov	r3, fp
 801e74e:	4622      	mov	r2, r4
 801e750:	4629      	mov	r1, r5
 801e752:	4630      	mov	r0, r6
 801e754:	f7ff ffa2 	bl	801e69c <__sfputs_r>
 801e758:	3001      	adds	r0, #1
 801e75a:	f000 80a9 	beq.w	801e8b0 <_vfiprintf_r+0x1f0>
 801e75e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e760:	445a      	add	r2, fp
 801e762:	9209      	str	r2, [sp, #36]	; 0x24
 801e764:	f89a 3000 	ldrb.w	r3, [sl]
 801e768:	2b00      	cmp	r3, #0
 801e76a:	f000 80a1 	beq.w	801e8b0 <_vfiprintf_r+0x1f0>
 801e76e:	2300      	movs	r3, #0
 801e770:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801e774:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e778:	f10a 0a01 	add.w	sl, sl, #1
 801e77c:	9304      	str	r3, [sp, #16]
 801e77e:	9307      	str	r3, [sp, #28]
 801e780:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801e784:	931a      	str	r3, [sp, #104]	; 0x68
 801e786:	4654      	mov	r4, sl
 801e788:	2205      	movs	r2, #5
 801e78a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e78e:	4854      	ldr	r0, [pc, #336]	; (801e8e0 <_vfiprintf_r+0x220>)
 801e790:	f7e1 fd66 	bl	8000260 <memchr>
 801e794:	9a04      	ldr	r2, [sp, #16]
 801e796:	b9d8      	cbnz	r0, 801e7d0 <_vfiprintf_r+0x110>
 801e798:	06d1      	lsls	r1, r2, #27
 801e79a:	bf44      	itt	mi
 801e79c:	2320      	movmi	r3, #32
 801e79e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e7a2:	0713      	lsls	r3, r2, #28
 801e7a4:	bf44      	itt	mi
 801e7a6:	232b      	movmi	r3, #43	; 0x2b
 801e7a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e7ac:	f89a 3000 	ldrb.w	r3, [sl]
 801e7b0:	2b2a      	cmp	r3, #42	; 0x2a
 801e7b2:	d015      	beq.n	801e7e0 <_vfiprintf_r+0x120>
 801e7b4:	9a07      	ldr	r2, [sp, #28]
 801e7b6:	4654      	mov	r4, sl
 801e7b8:	2000      	movs	r0, #0
 801e7ba:	f04f 0c0a 	mov.w	ip, #10
 801e7be:	4621      	mov	r1, r4
 801e7c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e7c4:	3b30      	subs	r3, #48	; 0x30
 801e7c6:	2b09      	cmp	r3, #9
 801e7c8:	d94d      	bls.n	801e866 <_vfiprintf_r+0x1a6>
 801e7ca:	b1b0      	cbz	r0, 801e7fa <_vfiprintf_r+0x13a>
 801e7cc:	9207      	str	r2, [sp, #28]
 801e7ce:	e014      	b.n	801e7fa <_vfiprintf_r+0x13a>
 801e7d0:	eba0 0308 	sub.w	r3, r0, r8
 801e7d4:	fa09 f303 	lsl.w	r3, r9, r3
 801e7d8:	4313      	orrs	r3, r2
 801e7da:	9304      	str	r3, [sp, #16]
 801e7dc:	46a2      	mov	sl, r4
 801e7de:	e7d2      	b.n	801e786 <_vfiprintf_r+0xc6>
 801e7e0:	9b03      	ldr	r3, [sp, #12]
 801e7e2:	1d19      	adds	r1, r3, #4
 801e7e4:	681b      	ldr	r3, [r3, #0]
 801e7e6:	9103      	str	r1, [sp, #12]
 801e7e8:	2b00      	cmp	r3, #0
 801e7ea:	bfbb      	ittet	lt
 801e7ec:	425b      	neglt	r3, r3
 801e7ee:	f042 0202 	orrlt.w	r2, r2, #2
 801e7f2:	9307      	strge	r3, [sp, #28]
 801e7f4:	9307      	strlt	r3, [sp, #28]
 801e7f6:	bfb8      	it	lt
 801e7f8:	9204      	strlt	r2, [sp, #16]
 801e7fa:	7823      	ldrb	r3, [r4, #0]
 801e7fc:	2b2e      	cmp	r3, #46	; 0x2e
 801e7fe:	d10c      	bne.n	801e81a <_vfiprintf_r+0x15a>
 801e800:	7863      	ldrb	r3, [r4, #1]
 801e802:	2b2a      	cmp	r3, #42	; 0x2a
 801e804:	d134      	bne.n	801e870 <_vfiprintf_r+0x1b0>
 801e806:	9b03      	ldr	r3, [sp, #12]
 801e808:	1d1a      	adds	r2, r3, #4
 801e80a:	681b      	ldr	r3, [r3, #0]
 801e80c:	9203      	str	r2, [sp, #12]
 801e80e:	2b00      	cmp	r3, #0
 801e810:	bfb8      	it	lt
 801e812:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801e816:	3402      	adds	r4, #2
 801e818:	9305      	str	r3, [sp, #20]
 801e81a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801e8f0 <_vfiprintf_r+0x230>
 801e81e:	7821      	ldrb	r1, [r4, #0]
 801e820:	2203      	movs	r2, #3
 801e822:	4650      	mov	r0, sl
 801e824:	f7e1 fd1c 	bl	8000260 <memchr>
 801e828:	b138      	cbz	r0, 801e83a <_vfiprintf_r+0x17a>
 801e82a:	9b04      	ldr	r3, [sp, #16]
 801e82c:	eba0 000a 	sub.w	r0, r0, sl
 801e830:	2240      	movs	r2, #64	; 0x40
 801e832:	4082      	lsls	r2, r0
 801e834:	4313      	orrs	r3, r2
 801e836:	3401      	adds	r4, #1
 801e838:	9304      	str	r3, [sp, #16]
 801e83a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e83e:	4829      	ldr	r0, [pc, #164]	; (801e8e4 <_vfiprintf_r+0x224>)
 801e840:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801e844:	2206      	movs	r2, #6
 801e846:	f7e1 fd0b 	bl	8000260 <memchr>
 801e84a:	2800      	cmp	r0, #0
 801e84c:	d03f      	beq.n	801e8ce <_vfiprintf_r+0x20e>
 801e84e:	4b26      	ldr	r3, [pc, #152]	; (801e8e8 <_vfiprintf_r+0x228>)
 801e850:	bb1b      	cbnz	r3, 801e89a <_vfiprintf_r+0x1da>
 801e852:	9b03      	ldr	r3, [sp, #12]
 801e854:	3307      	adds	r3, #7
 801e856:	f023 0307 	bic.w	r3, r3, #7
 801e85a:	3308      	adds	r3, #8
 801e85c:	9303      	str	r3, [sp, #12]
 801e85e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e860:	443b      	add	r3, r7
 801e862:	9309      	str	r3, [sp, #36]	; 0x24
 801e864:	e768      	b.n	801e738 <_vfiprintf_r+0x78>
 801e866:	fb0c 3202 	mla	r2, ip, r2, r3
 801e86a:	460c      	mov	r4, r1
 801e86c:	2001      	movs	r0, #1
 801e86e:	e7a6      	b.n	801e7be <_vfiprintf_r+0xfe>
 801e870:	2300      	movs	r3, #0
 801e872:	3401      	adds	r4, #1
 801e874:	9305      	str	r3, [sp, #20]
 801e876:	4619      	mov	r1, r3
 801e878:	f04f 0c0a 	mov.w	ip, #10
 801e87c:	4620      	mov	r0, r4
 801e87e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e882:	3a30      	subs	r2, #48	; 0x30
 801e884:	2a09      	cmp	r2, #9
 801e886:	d903      	bls.n	801e890 <_vfiprintf_r+0x1d0>
 801e888:	2b00      	cmp	r3, #0
 801e88a:	d0c6      	beq.n	801e81a <_vfiprintf_r+0x15a>
 801e88c:	9105      	str	r1, [sp, #20]
 801e88e:	e7c4      	b.n	801e81a <_vfiprintf_r+0x15a>
 801e890:	fb0c 2101 	mla	r1, ip, r1, r2
 801e894:	4604      	mov	r4, r0
 801e896:	2301      	movs	r3, #1
 801e898:	e7f0      	b.n	801e87c <_vfiprintf_r+0x1bc>
 801e89a:	ab03      	add	r3, sp, #12
 801e89c:	9300      	str	r3, [sp, #0]
 801e89e:	462a      	mov	r2, r5
 801e8a0:	4b12      	ldr	r3, [pc, #72]	; (801e8ec <_vfiprintf_r+0x22c>)
 801e8a2:	a904      	add	r1, sp, #16
 801e8a4:	4630      	mov	r0, r6
 801e8a6:	f3af 8000 	nop.w
 801e8aa:	4607      	mov	r7, r0
 801e8ac:	1c78      	adds	r0, r7, #1
 801e8ae:	d1d6      	bne.n	801e85e <_vfiprintf_r+0x19e>
 801e8b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e8b2:	07d9      	lsls	r1, r3, #31
 801e8b4:	d405      	bmi.n	801e8c2 <_vfiprintf_r+0x202>
 801e8b6:	89ab      	ldrh	r3, [r5, #12]
 801e8b8:	059a      	lsls	r2, r3, #22
 801e8ba:	d402      	bmi.n	801e8c2 <_vfiprintf_r+0x202>
 801e8bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e8be:	f7ff fa91 	bl	801dde4 <__retarget_lock_release_recursive>
 801e8c2:	89ab      	ldrh	r3, [r5, #12]
 801e8c4:	065b      	lsls	r3, r3, #25
 801e8c6:	f53f af1d 	bmi.w	801e704 <_vfiprintf_r+0x44>
 801e8ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e8cc:	e71c      	b.n	801e708 <_vfiprintf_r+0x48>
 801e8ce:	ab03      	add	r3, sp, #12
 801e8d0:	9300      	str	r3, [sp, #0]
 801e8d2:	462a      	mov	r2, r5
 801e8d4:	4b05      	ldr	r3, [pc, #20]	; (801e8ec <_vfiprintf_r+0x22c>)
 801e8d6:	a904      	add	r1, sp, #16
 801e8d8:	4630      	mov	r0, r6
 801e8da:	f7ff fcdf 	bl	801e29c <_printf_i>
 801e8de:	e7e4      	b.n	801e8aa <_vfiprintf_r+0x1ea>
 801e8e0:	08020e64 	.word	0x08020e64
 801e8e4:	08020e6e 	.word	0x08020e6e
 801e8e8:	00000000 	.word	0x00000000
 801e8ec:	0801e69d 	.word	0x0801e69d
 801e8f0:	08020e6a 	.word	0x08020e6a

0801e8f4 <__swbuf_r>:
 801e8f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e8f6:	460e      	mov	r6, r1
 801e8f8:	4614      	mov	r4, r2
 801e8fa:	4605      	mov	r5, r0
 801e8fc:	b118      	cbz	r0, 801e906 <__swbuf_r+0x12>
 801e8fe:	6a03      	ldr	r3, [r0, #32]
 801e900:	b90b      	cbnz	r3, 801e906 <__swbuf_r+0x12>
 801e902:	f7ff f837 	bl	801d974 <__sinit>
 801e906:	69a3      	ldr	r3, [r4, #24]
 801e908:	60a3      	str	r3, [r4, #8]
 801e90a:	89a3      	ldrh	r3, [r4, #12]
 801e90c:	071a      	lsls	r2, r3, #28
 801e90e:	d525      	bpl.n	801e95c <__swbuf_r+0x68>
 801e910:	6923      	ldr	r3, [r4, #16]
 801e912:	b31b      	cbz	r3, 801e95c <__swbuf_r+0x68>
 801e914:	6823      	ldr	r3, [r4, #0]
 801e916:	6922      	ldr	r2, [r4, #16]
 801e918:	1a98      	subs	r0, r3, r2
 801e91a:	6963      	ldr	r3, [r4, #20]
 801e91c:	b2f6      	uxtb	r6, r6
 801e91e:	4283      	cmp	r3, r0
 801e920:	4637      	mov	r7, r6
 801e922:	dc04      	bgt.n	801e92e <__swbuf_r+0x3a>
 801e924:	4621      	mov	r1, r4
 801e926:	4628      	mov	r0, r5
 801e928:	f7ff fe60 	bl	801e5ec <_fflush_r>
 801e92c:	b9e0      	cbnz	r0, 801e968 <__swbuf_r+0x74>
 801e92e:	68a3      	ldr	r3, [r4, #8]
 801e930:	3b01      	subs	r3, #1
 801e932:	60a3      	str	r3, [r4, #8]
 801e934:	6823      	ldr	r3, [r4, #0]
 801e936:	1c5a      	adds	r2, r3, #1
 801e938:	6022      	str	r2, [r4, #0]
 801e93a:	701e      	strb	r6, [r3, #0]
 801e93c:	6962      	ldr	r2, [r4, #20]
 801e93e:	1c43      	adds	r3, r0, #1
 801e940:	429a      	cmp	r2, r3
 801e942:	d004      	beq.n	801e94e <__swbuf_r+0x5a>
 801e944:	89a3      	ldrh	r3, [r4, #12]
 801e946:	07db      	lsls	r3, r3, #31
 801e948:	d506      	bpl.n	801e958 <__swbuf_r+0x64>
 801e94a:	2e0a      	cmp	r6, #10
 801e94c:	d104      	bne.n	801e958 <__swbuf_r+0x64>
 801e94e:	4621      	mov	r1, r4
 801e950:	4628      	mov	r0, r5
 801e952:	f7ff fe4b 	bl	801e5ec <_fflush_r>
 801e956:	b938      	cbnz	r0, 801e968 <__swbuf_r+0x74>
 801e958:	4638      	mov	r0, r7
 801e95a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e95c:	4621      	mov	r1, r4
 801e95e:	4628      	mov	r0, r5
 801e960:	f000 f806 	bl	801e970 <__swsetup_r>
 801e964:	2800      	cmp	r0, #0
 801e966:	d0d5      	beq.n	801e914 <__swbuf_r+0x20>
 801e968:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801e96c:	e7f4      	b.n	801e958 <__swbuf_r+0x64>
	...

0801e970 <__swsetup_r>:
 801e970:	b538      	push	{r3, r4, r5, lr}
 801e972:	4b2a      	ldr	r3, [pc, #168]	; (801ea1c <__swsetup_r+0xac>)
 801e974:	4605      	mov	r5, r0
 801e976:	6818      	ldr	r0, [r3, #0]
 801e978:	460c      	mov	r4, r1
 801e97a:	b118      	cbz	r0, 801e984 <__swsetup_r+0x14>
 801e97c:	6a03      	ldr	r3, [r0, #32]
 801e97e:	b90b      	cbnz	r3, 801e984 <__swsetup_r+0x14>
 801e980:	f7fe fff8 	bl	801d974 <__sinit>
 801e984:	89a3      	ldrh	r3, [r4, #12]
 801e986:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e98a:	0718      	lsls	r0, r3, #28
 801e98c:	d422      	bmi.n	801e9d4 <__swsetup_r+0x64>
 801e98e:	06d9      	lsls	r1, r3, #27
 801e990:	d407      	bmi.n	801e9a2 <__swsetup_r+0x32>
 801e992:	2309      	movs	r3, #9
 801e994:	602b      	str	r3, [r5, #0]
 801e996:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801e99a:	81a3      	strh	r3, [r4, #12]
 801e99c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e9a0:	e034      	b.n	801ea0c <__swsetup_r+0x9c>
 801e9a2:	0758      	lsls	r0, r3, #29
 801e9a4:	d512      	bpl.n	801e9cc <__swsetup_r+0x5c>
 801e9a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e9a8:	b141      	cbz	r1, 801e9bc <__swsetup_r+0x4c>
 801e9aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e9ae:	4299      	cmp	r1, r3
 801e9b0:	d002      	beq.n	801e9b8 <__swsetup_r+0x48>
 801e9b2:	4628      	mov	r0, r5
 801e9b4:	f7ff fa58 	bl	801de68 <_free_r>
 801e9b8:	2300      	movs	r3, #0
 801e9ba:	6363      	str	r3, [r4, #52]	; 0x34
 801e9bc:	89a3      	ldrh	r3, [r4, #12]
 801e9be:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801e9c2:	81a3      	strh	r3, [r4, #12]
 801e9c4:	2300      	movs	r3, #0
 801e9c6:	6063      	str	r3, [r4, #4]
 801e9c8:	6923      	ldr	r3, [r4, #16]
 801e9ca:	6023      	str	r3, [r4, #0]
 801e9cc:	89a3      	ldrh	r3, [r4, #12]
 801e9ce:	f043 0308 	orr.w	r3, r3, #8
 801e9d2:	81a3      	strh	r3, [r4, #12]
 801e9d4:	6923      	ldr	r3, [r4, #16]
 801e9d6:	b94b      	cbnz	r3, 801e9ec <__swsetup_r+0x7c>
 801e9d8:	89a3      	ldrh	r3, [r4, #12]
 801e9da:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801e9de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801e9e2:	d003      	beq.n	801e9ec <__swsetup_r+0x7c>
 801e9e4:	4621      	mov	r1, r4
 801e9e6:	4628      	mov	r0, r5
 801e9e8:	f000 f884 	bl	801eaf4 <__smakebuf_r>
 801e9ec:	89a0      	ldrh	r0, [r4, #12]
 801e9ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e9f2:	f010 0301 	ands.w	r3, r0, #1
 801e9f6:	d00a      	beq.n	801ea0e <__swsetup_r+0x9e>
 801e9f8:	2300      	movs	r3, #0
 801e9fa:	60a3      	str	r3, [r4, #8]
 801e9fc:	6963      	ldr	r3, [r4, #20]
 801e9fe:	425b      	negs	r3, r3
 801ea00:	61a3      	str	r3, [r4, #24]
 801ea02:	6923      	ldr	r3, [r4, #16]
 801ea04:	b943      	cbnz	r3, 801ea18 <__swsetup_r+0xa8>
 801ea06:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801ea0a:	d1c4      	bne.n	801e996 <__swsetup_r+0x26>
 801ea0c:	bd38      	pop	{r3, r4, r5, pc}
 801ea0e:	0781      	lsls	r1, r0, #30
 801ea10:	bf58      	it	pl
 801ea12:	6963      	ldrpl	r3, [r4, #20]
 801ea14:	60a3      	str	r3, [r4, #8]
 801ea16:	e7f4      	b.n	801ea02 <__swsetup_r+0x92>
 801ea18:	2000      	movs	r0, #0
 801ea1a:	e7f7      	b.n	801ea0c <__swsetup_r+0x9c>
 801ea1c:	20002478 	.word	0x20002478

0801ea20 <_raise_r>:
 801ea20:	291f      	cmp	r1, #31
 801ea22:	b538      	push	{r3, r4, r5, lr}
 801ea24:	4604      	mov	r4, r0
 801ea26:	460d      	mov	r5, r1
 801ea28:	d904      	bls.n	801ea34 <_raise_r+0x14>
 801ea2a:	2316      	movs	r3, #22
 801ea2c:	6003      	str	r3, [r0, #0]
 801ea2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ea32:	bd38      	pop	{r3, r4, r5, pc}
 801ea34:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801ea36:	b112      	cbz	r2, 801ea3e <_raise_r+0x1e>
 801ea38:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801ea3c:	b94b      	cbnz	r3, 801ea52 <_raise_r+0x32>
 801ea3e:	4620      	mov	r0, r4
 801ea40:	f000 f830 	bl	801eaa4 <_getpid_r>
 801ea44:	462a      	mov	r2, r5
 801ea46:	4601      	mov	r1, r0
 801ea48:	4620      	mov	r0, r4
 801ea4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ea4e:	f000 b817 	b.w	801ea80 <_kill_r>
 801ea52:	2b01      	cmp	r3, #1
 801ea54:	d00a      	beq.n	801ea6c <_raise_r+0x4c>
 801ea56:	1c59      	adds	r1, r3, #1
 801ea58:	d103      	bne.n	801ea62 <_raise_r+0x42>
 801ea5a:	2316      	movs	r3, #22
 801ea5c:	6003      	str	r3, [r0, #0]
 801ea5e:	2001      	movs	r0, #1
 801ea60:	e7e7      	b.n	801ea32 <_raise_r+0x12>
 801ea62:	2400      	movs	r4, #0
 801ea64:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801ea68:	4628      	mov	r0, r5
 801ea6a:	4798      	blx	r3
 801ea6c:	2000      	movs	r0, #0
 801ea6e:	e7e0      	b.n	801ea32 <_raise_r+0x12>

0801ea70 <raise>:
 801ea70:	4b02      	ldr	r3, [pc, #8]	; (801ea7c <raise+0xc>)
 801ea72:	4601      	mov	r1, r0
 801ea74:	6818      	ldr	r0, [r3, #0]
 801ea76:	f7ff bfd3 	b.w	801ea20 <_raise_r>
 801ea7a:	bf00      	nop
 801ea7c:	20002478 	.word	0x20002478

0801ea80 <_kill_r>:
 801ea80:	b538      	push	{r3, r4, r5, lr}
 801ea82:	4d07      	ldr	r5, [pc, #28]	; (801eaa0 <_kill_r+0x20>)
 801ea84:	2300      	movs	r3, #0
 801ea86:	4604      	mov	r4, r0
 801ea88:	4608      	mov	r0, r1
 801ea8a:	4611      	mov	r1, r2
 801ea8c:	602b      	str	r3, [r5, #0]
 801ea8e:	f7e4 fda7 	bl	80035e0 <_kill>
 801ea92:	1c43      	adds	r3, r0, #1
 801ea94:	d102      	bne.n	801ea9c <_kill_r+0x1c>
 801ea96:	682b      	ldr	r3, [r5, #0]
 801ea98:	b103      	cbz	r3, 801ea9c <_kill_r+0x1c>
 801ea9a:	6023      	str	r3, [r4, #0]
 801ea9c:	bd38      	pop	{r3, r4, r5, pc}
 801ea9e:	bf00      	nop
 801eaa0:	20010fcc 	.word	0x20010fcc

0801eaa4 <_getpid_r>:
 801eaa4:	f7e4 bd94 	b.w	80035d0 <_getpid>

0801eaa8 <__swhatbuf_r>:
 801eaa8:	b570      	push	{r4, r5, r6, lr}
 801eaaa:	460c      	mov	r4, r1
 801eaac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801eab0:	2900      	cmp	r1, #0
 801eab2:	b096      	sub	sp, #88	; 0x58
 801eab4:	4615      	mov	r5, r2
 801eab6:	461e      	mov	r6, r3
 801eab8:	da0d      	bge.n	801ead6 <__swhatbuf_r+0x2e>
 801eaba:	89a3      	ldrh	r3, [r4, #12]
 801eabc:	f013 0f80 	tst.w	r3, #128	; 0x80
 801eac0:	f04f 0100 	mov.w	r1, #0
 801eac4:	bf0c      	ite	eq
 801eac6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801eaca:	2340      	movne	r3, #64	; 0x40
 801eacc:	2000      	movs	r0, #0
 801eace:	6031      	str	r1, [r6, #0]
 801ead0:	602b      	str	r3, [r5, #0]
 801ead2:	b016      	add	sp, #88	; 0x58
 801ead4:	bd70      	pop	{r4, r5, r6, pc}
 801ead6:	466a      	mov	r2, sp
 801ead8:	f000 f848 	bl	801eb6c <_fstat_r>
 801eadc:	2800      	cmp	r0, #0
 801eade:	dbec      	blt.n	801eaba <__swhatbuf_r+0x12>
 801eae0:	9901      	ldr	r1, [sp, #4]
 801eae2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801eae6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801eaea:	4259      	negs	r1, r3
 801eaec:	4159      	adcs	r1, r3
 801eaee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801eaf2:	e7eb      	b.n	801eacc <__swhatbuf_r+0x24>

0801eaf4 <__smakebuf_r>:
 801eaf4:	898b      	ldrh	r3, [r1, #12]
 801eaf6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801eaf8:	079d      	lsls	r5, r3, #30
 801eafa:	4606      	mov	r6, r0
 801eafc:	460c      	mov	r4, r1
 801eafe:	d507      	bpl.n	801eb10 <__smakebuf_r+0x1c>
 801eb00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801eb04:	6023      	str	r3, [r4, #0]
 801eb06:	6123      	str	r3, [r4, #16]
 801eb08:	2301      	movs	r3, #1
 801eb0a:	6163      	str	r3, [r4, #20]
 801eb0c:	b002      	add	sp, #8
 801eb0e:	bd70      	pop	{r4, r5, r6, pc}
 801eb10:	ab01      	add	r3, sp, #4
 801eb12:	466a      	mov	r2, sp
 801eb14:	f7ff ffc8 	bl	801eaa8 <__swhatbuf_r>
 801eb18:	9900      	ldr	r1, [sp, #0]
 801eb1a:	4605      	mov	r5, r0
 801eb1c:	4630      	mov	r0, r6
 801eb1e:	f7fe fcf1 	bl	801d504 <_malloc_r>
 801eb22:	b948      	cbnz	r0, 801eb38 <__smakebuf_r+0x44>
 801eb24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801eb28:	059a      	lsls	r2, r3, #22
 801eb2a:	d4ef      	bmi.n	801eb0c <__smakebuf_r+0x18>
 801eb2c:	f023 0303 	bic.w	r3, r3, #3
 801eb30:	f043 0302 	orr.w	r3, r3, #2
 801eb34:	81a3      	strh	r3, [r4, #12]
 801eb36:	e7e3      	b.n	801eb00 <__smakebuf_r+0xc>
 801eb38:	89a3      	ldrh	r3, [r4, #12]
 801eb3a:	6020      	str	r0, [r4, #0]
 801eb3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801eb40:	81a3      	strh	r3, [r4, #12]
 801eb42:	9b00      	ldr	r3, [sp, #0]
 801eb44:	6163      	str	r3, [r4, #20]
 801eb46:	9b01      	ldr	r3, [sp, #4]
 801eb48:	6120      	str	r0, [r4, #16]
 801eb4a:	b15b      	cbz	r3, 801eb64 <__smakebuf_r+0x70>
 801eb4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801eb50:	4630      	mov	r0, r6
 801eb52:	f000 f81d 	bl	801eb90 <_isatty_r>
 801eb56:	b128      	cbz	r0, 801eb64 <__smakebuf_r+0x70>
 801eb58:	89a3      	ldrh	r3, [r4, #12]
 801eb5a:	f023 0303 	bic.w	r3, r3, #3
 801eb5e:	f043 0301 	orr.w	r3, r3, #1
 801eb62:	81a3      	strh	r3, [r4, #12]
 801eb64:	89a3      	ldrh	r3, [r4, #12]
 801eb66:	431d      	orrs	r5, r3
 801eb68:	81a5      	strh	r5, [r4, #12]
 801eb6a:	e7cf      	b.n	801eb0c <__smakebuf_r+0x18>

0801eb6c <_fstat_r>:
 801eb6c:	b538      	push	{r3, r4, r5, lr}
 801eb6e:	4d07      	ldr	r5, [pc, #28]	; (801eb8c <_fstat_r+0x20>)
 801eb70:	2300      	movs	r3, #0
 801eb72:	4604      	mov	r4, r0
 801eb74:	4608      	mov	r0, r1
 801eb76:	4611      	mov	r1, r2
 801eb78:	602b      	str	r3, [r5, #0]
 801eb7a:	f7e4 fd90 	bl	800369e <_fstat>
 801eb7e:	1c43      	adds	r3, r0, #1
 801eb80:	d102      	bne.n	801eb88 <_fstat_r+0x1c>
 801eb82:	682b      	ldr	r3, [r5, #0]
 801eb84:	b103      	cbz	r3, 801eb88 <_fstat_r+0x1c>
 801eb86:	6023      	str	r3, [r4, #0]
 801eb88:	bd38      	pop	{r3, r4, r5, pc}
 801eb8a:	bf00      	nop
 801eb8c:	20010fcc 	.word	0x20010fcc

0801eb90 <_isatty_r>:
 801eb90:	b538      	push	{r3, r4, r5, lr}
 801eb92:	4d06      	ldr	r5, [pc, #24]	; (801ebac <_isatty_r+0x1c>)
 801eb94:	2300      	movs	r3, #0
 801eb96:	4604      	mov	r4, r0
 801eb98:	4608      	mov	r0, r1
 801eb9a:	602b      	str	r3, [r5, #0]
 801eb9c:	f7e4 fd8f 	bl	80036be <_isatty>
 801eba0:	1c43      	adds	r3, r0, #1
 801eba2:	d102      	bne.n	801ebaa <_isatty_r+0x1a>
 801eba4:	682b      	ldr	r3, [r5, #0]
 801eba6:	b103      	cbz	r3, 801ebaa <_isatty_r+0x1a>
 801eba8:	6023      	str	r3, [r4, #0]
 801ebaa:	bd38      	pop	{r3, r4, r5, pc}
 801ebac:	20010fcc 	.word	0x20010fcc

0801ebb0 <_init>:
 801ebb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ebb2:	bf00      	nop
 801ebb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ebb6:	bc08      	pop	{r3}
 801ebb8:	469e      	mov	lr, r3
 801ebba:	4770      	bx	lr

0801ebbc <_fini>:
 801ebbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ebbe:	bf00      	nop
 801ebc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ebc2:	bc08      	pop	{r3}
 801ebc4:	469e      	mov	lr, r3
 801ebc6:	4770      	bx	lr
