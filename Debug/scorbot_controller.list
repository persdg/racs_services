
scorbot_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001d578  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002038  0801d778  0801d778  0002d778  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801f7b0  0801f7b0  000321dc  2**0
                  CONTENTS
  4 .ARM          00000008  0801f7b0  0801f7b0  0002f7b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801f7b8  0801f7b8  000321dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000018  0801f7b8  0801f7b8  0002f7b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0801f7d0  0801f7d0  0002f7d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000021dc  20000000  0801f7d8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000eb0c  200021e0  080219b4  000321e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20010cec  080219b4  00040cec  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000321dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000076  00000000  00000000  0003220a  2**0
                  CONTENTS, READONLY
 13 .debug_info   000360ff  00000000  00000000  00032280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000066bf  00000000  00000000  0006837f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ec8  00000000  00000000  0006ea40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000179a  00000000  00000000  00070908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000358c2  00000000  00000000  000720a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002db65  00000000  00000000  000a7964  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011efed  00000000  00000000  000d54c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008e30  00000000  00000000  001f44b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  001fd2e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200021e0 	.word	0x200021e0
 800021c:	00000000 	.word	0x00000000
 8000220:	0801d760 	.word	0x0801d760

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200021e4 	.word	0x200021e4
 800023c:	0801d760 	.word	0x0801d760

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr
	...

08000260 <memchr>:
 8000260:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000264:	2a10      	cmp	r2, #16
 8000266:	db2b      	blt.n	80002c0 <memchr+0x60>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	d008      	beq.n	8000280 <memchr+0x20>
 800026e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000272:	3a01      	subs	r2, #1
 8000274:	428b      	cmp	r3, r1
 8000276:	d02d      	beq.n	80002d4 <memchr+0x74>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	b342      	cbz	r2, 80002d0 <memchr+0x70>
 800027e:	d1f6      	bne.n	800026e <memchr+0xe>
 8000280:	b4f0      	push	{r4, r5, r6, r7}
 8000282:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000286:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800028a:	f022 0407 	bic.w	r4, r2, #7
 800028e:	f07f 0700 	mvns.w	r7, #0
 8000292:	2300      	movs	r3, #0
 8000294:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000298:	3c08      	subs	r4, #8
 800029a:	ea85 0501 	eor.w	r5, r5, r1
 800029e:	ea86 0601 	eor.w	r6, r6, r1
 80002a2:	fa85 f547 	uadd8	r5, r5, r7
 80002a6:	faa3 f587 	sel	r5, r3, r7
 80002aa:	fa86 f647 	uadd8	r6, r6, r7
 80002ae:	faa5 f687 	sel	r6, r5, r7
 80002b2:	b98e      	cbnz	r6, 80002d8 <memchr+0x78>
 80002b4:	d1ee      	bne.n	8000294 <memchr+0x34>
 80002b6:	bcf0      	pop	{r4, r5, r6, r7}
 80002b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002bc:	f002 0207 	and.w	r2, r2, #7
 80002c0:	b132      	cbz	r2, 80002d0 <memchr+0x70>
 80002c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c6:	3a01      	subs	r2, #1
 80002c8:	ea83 0301 	eor.w	r3, r3, r1
 80002cc:	b113      	cbz	r3, 80002d4 <memchr+0x74>
 80002ce:	d1f8      	bne.n	80002c2 <memchr+0x62>
 80002d0:	2000      	movs	r0, #0
 80002d2:	4770      	bx	lr
 80002d4:	3801      	subs	r0, #1
 80002d6:	4770      	bx	lr
 80002d8:	2d00      	cmp	r5, #0
 80002da:	bf06      	itte	eq
 80002dc:	4635      	moveq	r5, r6
 80002de:	3803      	subeq	r0, #3
 80002e0:	3807      	subne	r0, #7
 80002e2:	f015 0f01 	tst.w	r5, #1
 80002e6:	d107      	bne.n	80002f8 <memchr+0x98>
 80002e8:	3001      	adds	r0, #1
 80002ea:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ee:	bf02      	ittt	eq
 80002f0:	3001      	addeq	r0, #1
 80002f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002f6:	3001      	addeq	r0, #1
 80002f8:	bcf0      	pop	{r4, r5, r6, r7}
 80002fa:	3801      	subs	r0, #1
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop

08000300 <strlen>:
 8000300:	4603      	mov	r3, r0
 8000302:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000306:	2a00      	cmp	r2, #0
 8000308:	d1fb      	bne.n	8000302 <strlen+0x2>
 800030a:	1a18      	subs	r0, r3, r0
 800030c:	3801      	subs	r0, #1
 800030e:	4770      	bx	lr

08000310 <__aeabi_ldivmod>:
 8000310:	b97b      	cbnz	r3, 8000332 <__aeabi_ldivmod+0x22>
 8000312:	b972      	cbnz	r2, 8000332 <__aeabi_ldivmod+0x22>
 8000314:	2900      	cmp	r1, #0
 8000316:	bfbe      	ittt	lt
 8000318:	2000      	movlt	r0, #0
 800031a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800031e:	e006      	blt.n	800032e <__aeabi_ldivmod+0x1e>
 8000320:	bf08      	it	eq
 8000322:	2800      	cmpeq	r0, #0
 8000324:	bf1c      	itt	ne
 8000326:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800032a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800032e:	f000 b9bb 	b.w	80006a8 <__aeabi_idiv0>
 8000332:	f1ad 0c08 	sub.w	ip, sp, #8
 8000336:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800033a:	2900      	cmp	r1, #0
 800033c:	db09      	blt.n	8000352 <__aeabi_ldivmod+0x42>
 800033e:	2b00      	cmp	r3, #0
 8000340:	db1a      	blt.n	8000378 <__aeabi_ldivmod+0x68>
 8000342:	f000 f84d 	bl	80003e0 <__udivmoddi4>
 8000346:	f8dd e004 	ldr.w	lr, [sp, #4]
 800034a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034e:	b004      	add	sp, #16
 8000350:	4770      	bx	lr
 8000352:	4240      	negs	r0, r0
 8000354:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000358:	2b00      	cmp	r3, #0
 800035a:	db1b      	blt.n	8000394 <__aeabi_ldivmod+0x84>
 800035c:	f000 f840 	bl	80003e0 <__udivmoddi4>
 8000360:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000364:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000368:	b004      	add	sp, #16
 800036a:	4240      	negs	r0, r0
 800036c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000370:	4252      	negs	r2, r2
 8000372:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000376:	4770      	bx	lr
 8000378:	4252      	negs	r2, r2
 800037a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037e:	f000 f82f 	bl	80003e0 <__udivmoddi4>
 8000382:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000386:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800038a:	b004      	add	sp, #16
 800038c:	4240      	negs	r0, r0
 800038e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000392:	4770      	bx	lr
 8000394:	4252      	negs	r2, r2
 8000396:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800039a:	f000 f821 	bl	80003e0 <__udivmoddi4>
 800039e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003a6:	b004      	add	sp, #16
 80003a8:	4252      	negs	r2, r2
 80003aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003c4:	f000 b970 	b.w	80006a8 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9e08      	ldr	r6, [sp, #32]
 80003e6:	460d      	mov	r5, r1
 80003e8:	4604      	mov	r4, r0
 80003ea:	460f      	mov	r7, r1
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d14a      	bne.n	8000486 <__udivmoddi4+0xa6>
 80003f0:	428a      	cmp	r2, r1
 80003f2:	4694      	mov	ip, r2
 80003f4:	d965      	bls.n	80004c2 <__udivmoddi4+0xe2>
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	b143      	cbz	r3, 800040e <__udivmoddi4+0x2e>
 80003fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000400:	f1c3 0220 	rsb	r2, r3, #32
 8000404:	409f      	lsls	r7, r3
 8000406:	fa20 f202 	lsr.w	r2, r0, r2
 800040a:	4317      	orrs	r7, r2
 800040c:	409c      	lsls	r4, r3
 800040e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000412:	fa1f f58c 	uxth.w	r5, ip
 8000416:	fbb7 f1fe 	udiv	r1, r7, lr
 800041a:	0c22      	lsrs	r2, r4, #16
 800041c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000420:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000424:	fb01 f005 	mul.w	r0, r1, r5
 8000428:	4290      	cmp	r0, r2
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x62>
 800042c:	eb1c 0202 	adds.w	r2, ip, r2
 8000430:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000434:	f080 811c 	bcs.w	8000670 <__udivmoddi4+0x290>
 8000438:	4290      	cmp	r0, r2
 800043a:	f240 8119 	bls.w	8000670 <__udivmoddi4+0x290>
 800043e:	3902      	subs	r1, #2
 8000440:	4462      	add	r2, ip
 8000442:	1a12      	subs	r2, r2, r0
 8000444:	b2a4      	uxth	r4, r4
 8000446:	fbb2 f0fe 	udiv	r0, r2, lr
 800044a:	fb0e 2210 	mls	r2, lr, r0, r2
 800044e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000452:	fb00 f505 	mul.w	r5, r0, r5
 8000456:	42a5      	cmp	r5, r4
 8000458:	d90a      	bls.n	8000470 <__udivmoddi4+0x90>
 800045a:	eb1c 0404 	adds.w	r4, ip, r4
 800045e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000462:	f080 8107 	bcs.w	8000674 <__udivmoddi4+0x294>
 8000466:	42a5      	cmp	r5, r4
 8000468:	f240 8104 	bls.w	8000674 <__udivmoddi4+0x294>
 800046c:	4464      	add	r4, ip
 800046e:	3802      	subs	r0, #2
 8000470:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000474:	1b64      	subs	r4, r4, r5
 8000476:	2100      	movs	r1, #0
 8000478:	b11e      	cbz	r6, 8000482 <__udivmoddi4+0xa2>
 800047a:	40dc      	lsrs	r4, r3
 800047c:	2300      	movs	r3, #0
 800047e:	e9c6 4300 	strd	r4, r3, [r6]
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	428b      	cmp	r3, r1
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0xbc>
 800048a:	2e00      	cmp	r6, #0
 800048c:	f000 80ed 	beq.w	800066a <__udivmoddi4+0x28a>
 8000490:	2100      	movs	r1, #0
 8000492:	e9c6 0500 	strd	r0, r5, [r6]
 8000496:	4608      	mov	r0, r1
 8000498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049c:	fab3 f183 	clz	r1, r3
 80004a0:	2900      	cmp	r1, #0
 80004a2:	d149      	bne.n	8000538 <__udivmoddi4+0x158>
 80004a4:	42ab      	cmp	r3, r5
 80004a6:	d302      	bcc.n	80004ae <__udivmoddi4+0xce>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	f200 80f8 	bhi.w	800069e <__udivmoddi4+0x2be>
 80004ae:	1a84      	subs	r4, r0, r2
 80004b0:	eb65 0203 	sbc.w	r2, r5, r3
 80004b4:	2001      	movs	r0, #1
 80004b6:	4617      	mov	r7, r2
 80004b8:	2e00      	cmp	r6, #0
 80004ba:	d0e2      	beq.n	8000482 <__udivmoddi4+0xa2>
 80004bc:	e9c6 4700 	strd	r4, r7, [r6]
 80004c0:	e7df      	b.n	8000482 <__udivmoddi4+0xa2>
 80004c2:	b902      	cbnz	r2, 80004c6 <__udivmoddi4+0xe6>
 80004c4:	deff      	udf	#255	; 0xff
 80004c6:	fab2 f382 	clz	r3, r2
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	f040 8090 	bne.w	80005f0 <__udivmoddi4+0x210>
 80004d0:	1a8a      	subs	r2, r1, r2
 80004d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d6:	fa1f fe8c 	uxth.w	lr, ip
 80004da:	2101      	movs	r1, #1
 80004dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004e0:	fb07 2015 	mls	r0, r7, r5, r2
 80004e4:	0c22      	lsrs	r2, r4, #16
 80004e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ea:	fb0e f005 	mul.w	r0, lr, r5
 80004ee:	4290      	cmp	r0, r2
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x124>
 80004f2:	eb1c 0202 	adds.w	r2, ip, r2
 80004f6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x122>
 80004fc:	4290      	cmp	r0, r2
 80004fe:	f200 80cb 	bhi.w	8000698 <__udivmoddi4+0x2b8>
 8000502:	4645      	mov	r5, r8
 8000504:	1a12      	subs	r2, r2, r0
 8000506:	b2a4      	uxth	r4, r4
 8000508:	fbb2 f0f7 	udiv	r0, r2, r7
 800050c:	fb07 2210 	mls	r2, r7, r0, r2
 8000510:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000514:	fb0e fe00 	mul.w	lr, lr, r0
 8000518:	45a6      	cmp	lr, r4
 800051a:	d908      	bls.n	800052e <__udivmoddi4+0x14e>
 800051c:	eb1c 0404 	adds.w	r4, ip, r4
 8000520:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000524:	d202      	bcs.n	800052c <__udivmoddi4+0x14c>
 8000526:	45a6      	cmp	lr, r4
 8000528:	f200 80bb 	bhi.w	80006a2 <__udivmoddi4+0x2c2>
 800052c:	4610      	mov	r0, r2
 800052e:	eba4 040e 	sub.w	r4, r4, lr
 8000532:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000536:	e79f      	b.n	8000478 <__udivmoddi4+0x98>
 8000538:	f1c1 0720 	rsb	r7, r1, #32
 800053c:	408b      	lsls	r3, r1
 800053e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000542:	ea4c 0c03 	orr.w	ip, ip, r3
 8000546:	fa05 f401 	lsl.w	r4, r5, r1
 800054a:	fa20 f307 	lsr.w	r3, r0, r7
 800054e:	40fd      	lsrs	r5, r7
 8000550:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000554:	4323      	orrs	r3, r4
 8000556:	fbb5 f8f9 	udiv	r8, r5, r9
 800055a:	fa1f fe8c 	uxth.w	lr, ip
 800055e:	fb09 5518 	mls	r5, r9, r8, r5
 8000562:	0c1c      	lsrs	r4, r3, #16
 8000564:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000568:	fb08 f50e 	mul.w	r5, r8, lr
 800056c:	42a5      	cmp	r5, r4
 800056e:	fa02 f201 	lsl.w	r2, r2, r1
 8000572:	fa00 f001 	lsl.w	r0, r0, r1
 8000576:	d90b      	bls.n	8000590 <__udivmoddi4+0x1b0>
 8000578:	eb1c 0404 	adds.w	r4, ip, r4
 800057c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000580:	f080 8088 	bcs.w	8000694 <__udivmoddi4+0x2b4>
 8000584:	42a5      	cmp	r5, r4
 8000586:	f240 8085 	bls.w	8000694 <__udivmoddi4+0x2b4>
 800058a:	f1a8 0802 	sub.w	r8, r8, #2
 800058e:	4464      	add	r4, ip
 8000590:	1b64      	subs	r4, r4, r5
 8000592:	b29d      	uxth	r5, r3
 8000594:	fbb4 f3f9 	udiv	r3, r4, r9
 8000598:	fb09 4413 	mls	r4, r9, r3, r4
 800059c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80005a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80005a4:	45a6      	cmp	lr, r4
 80005a6:	d908      	bls.n	80005ba <__udivmoddi4+0x1da>
 80005a8:	eb1c 0404 	adds.w	r4, ip, r4
 80005ac:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80005b0:	d26c      	bcs.n	800068c <__udivmoddi4+0x2ac>
 80005b2:	45a6      	cmp	lr, r4
 80005b4:	d96a      	bls.n	800068c <__udivmoddi4+0x2ac>
 80005b6:	3b02      	subs	r3, #2
 80005b8:	4464      	add	r4, ip
 80005ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005be:	fba3 9502 	umull	r9, r5, r3, r2
 80005c2:	eba4 040e 	sub.w	r4, r4, lr
 80005c6:	42ac      	cmp	r4, r5
 80005c8:	46c8      	mov	r8, r9
 80005ca:	46ae      	mov	lr, r5
 80005cc:	d356      	bcc.n	800067c <__udivmoddi4+0x29c>
 80005ce:	d053      	beq.n	8000678 <__udivmoddi4+0x298>
 80005d0:	b156      	cbz	r6, 80005e8 <__udivmoddi4+0x208>
 80005d2:	ebb0 0208 	subs.w	r2, r0, r8
 80005d6:	eb64 040e 	sbc.w	r4, r4, lr
 80005da:	fa04 f707 	lsl.w	r7, r4, r7
 80005de:	40ca      	lsrs	r2, r1
 80005e0:	40cc      	lsrs	r4, r1
 80005e2:	4317      	orrs	r7, r2
 80005e4:	e9c6 7400 	strd	r7, r4, [r6]
 80005e8:	4618      	mov	r0, r3
 80005ea:	2100      	movs	r1, #0
 80005ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005f0:	f1c3 0120 	rsb	r1, r3, #32
 80005f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005f8:	fa20 f201 	lsr.w	r2, r0, r1
 80005fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000600:	409d      	lsls	r5, r3
 8000602:	432a      	orrs	r2, r5
 8000604:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000608:	fa1f fe8c 	uxth.w	lr, ip
 800060c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000610:	fb07 1510 	mls	r5, r7, r0, r1
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800061a:	fb00 f50e 	mul.w	r5, r0, lr
 800061e:	428d      	cmp	r5, r1
 8000620:	fa04 f403 	lsl.w	r4, r4, r3
 8000624:	d908      	bls.n	8000638 <__udivmoddi4+0x258>
 8000626:	eb1c 0101 	adds.w	r1, ip, r1
 800062a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800062e:	d22f      	bcs.n	8000690 <__udivmoddi4+0x2b0>
 8000630:	428d      	cmp	r5, r1
 8000632:	d92d      	bls.n	8000690 <__udivmoddi4+0x2b0>
 8000634:	3802      	subs	r0, #2
 8000636:	4461      	add	r1, ip
 8000638:	1b49      	subs	r1, r1, r5
 800063a:	b292      	uxth	r2, r2
 800063c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000640:	fb07 1115 	mls	r1, r7, r5, r1
 8000644:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000648:	fb05 f10e 	mul.w	r1, r5, lr
 800064c:	4291      	cmp	r1, r2
 800064e:	d908      	bls.n	8000662 <__udivmoddi4+0x282>
 8000650:	eb1c 0202 	adds.w	r2, ip, r2
 8000654:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000658:	d216      	bcs.n	8000688 <__udivmoddi4+0x2a8>
 800065a:	4291      	cmp	r1, r2
 800065c:	d914      	bls.n	8000688 <__udivmoddi4+0x2a8>
 800065e:	3d02      	subs	r5, #2
 8000660:	4462      	add	r2, ip
 8000662:	1a52      	subs	r2, r2, r1
 8000664:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000668:	e738      	b.n	80004dc <__udivmoddi4+0xfc>
 800066a:	4631      	mov	r1, r6
 800066c:	4630      	mov	r0, r6
 800066e:	e708      	b.n	8000482 <__udivmoddi4+0xa2>
 8000670:	4639      	mov	r1, r7
 8000672:	e6e6      	b.n	8000442 <__udivmoddi4+0x62>
 8000674:	4610      	mov	r0, r2
 8000676:	e6fb      	b.n	8000470 <__udivmoddi4+0x90>
 8000678:	4548      	cmp	r0, r9
 800067a:	d2a9      	bcs.n	80005d0 <__udivmoddi4+0x1f0>
 800067c:	ebb9 0802 	subs.w	r8, r9, r2
 8000680:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000684:	3b01      	subs	r3, #1
 8000686:	e7a3      	b.n	80005d0 <__udivmoddi4+0x1f0>
 8000688:	4645      	mov	r5, r8
 800068a:	e7ea      	b.n	8000662 <__udivmoddi4+0x282>
 800068c:	462b      	mov	r3, r5
 800068e:	e794      	b.n	80005ba <__udivmoddi4+0x1da>
 8000690:	4640      	mov	r0, r8
 8000692:	e7d1      	b.n	8000638 <__udivmoddi4+0x258>
 8000694:	46d0      	mov	r8, sl
 8000696:	e77b      	b.n	8000590 <__udivmoddi4+0x1b0>
 8000698:	3d02      	subs	r5, #2
 800069a:	4462      	add	r2, ip
 800069c:	e732      	b.n	8000504 <__udivmoddi4+0x124>
 800069e:	4608      	mov	r0, r1
 80006a0:	e70a      	b.n	80004b8 <__udivmoddi4+0xd8>
 80006a2:	4464      	add	r4, ip
 80006a4:	3802      	subs	r0, #2
 80006a6:	e742      	b.n	800052e <__udivmoddi4+0x14e>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <pwm_callback>:
#include <callbacks.hpp>

void pwm_callback(const void* msgin) {
 80006ac:	b590      	push	{r4, r7, lr}
 80006ae:	b085      	sub	sp, #20
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
	const racs_services__msg__DirectAccess* pwm_msg =
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	60fb      	str	r3, [r7, #12]
		(const racs_services__msg__DirectAccess*) msgin;

	if(pwm_msg->num_motors != ScorBot.getSize()) {
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	461c      	mov	r4, r3
 80006be:	480f      	ldr	r0, [pc, #60]	; (80006fc <pwm_callback+0x50>)
 80006c0:	f000 fb7b 	bl	8000dba <_ZN5Robot7getSizeEv>
 80006c4:	4603      	mov	r3, r0
 80006c6:	429c      	cmp	r4, r3
 80006c8:	bf14      	ite	ne
 80006ca:	2301      	movne	r3, #1
 80006cc:	2300      	moveq	r3, #0
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d005      	beq.n	80006e0 <pwm_callback+0x34>
	    ScorBot.setStatus(Robot::Status::Idle, true);
 80006d4:	2201      	movs	r2, #1
 80006d6:	2100      	movs	r1, #0
 80006d8:	4808      	ldr	r0, [pc, #32]	; (80006fc <pwm_callback+0x50>)
 80006da:	f000 fb7b 	bl	8000dd4 <_ZN5Robot9setStatusENS_6StatusEb>
	    return;
 80006de:	e00a      	b.n	80006f6 <pwm_callback+0x4a>
	}

	ScorBot.setPWMs(pwm_msg->pwms);
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	3302      	adds	r3, #2
 80006e4:	4619      	mov	r1, r3
 80006e6:	4805      	ldr	r0, [pc, #20]	; (80006fc <pwm_callback+0x50>)
 80006e8:	f000 fbff 	bl	8000eea <_ZN5Robot7setPWMsEPKs>
	ScorBot.setStatus(Robot::Status::DAQ, false);
 80006ec:	2200      	movs	r2, #0
 80006ee:	2101      	movs	r1, #1
 80006f0:	4802      	ldr	r0, [pc, #8]	; (80006fc <pwm_callback+0x50>)
 80006f2:	f000 fb6f 	bl	8000dd4 <_ZN5Robot9setStatusENS_6StatusEb>
}
 80006f6:	3714      	adds	r7, #20
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd90      	pop	{r4, r7, pc}
 80006fc:	200021fc 	.word	0x200021fc

08000700 <control_callback>:

void control_callback(const void* request_msg, void* response_msg){
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
 8000708:	6039      	str	r1, [r7, #0]
		racs_services__srv__Control_Request* req_in =
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	60fb      	str	r3, [r7, #12]
				(racs_services__srv__Control_Request*) request_msg;
		racs_services__srv__Control_Response* res_in =
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	60bb      	str	r3, [r7, #8]
				(racs_services__srv__Control_Response*) response_msg;
		ScorBot.lastEvent = getCurrentTime();
 8000712:	f003 fa65 	bl	8003be0 <_Z14getCurrentTimev>
 8000716:	4603      	mov	r3, r0
 8000718:	4a06      	ldr	r2, [pc, #24]	; (8000734 <control_callback+0x34>)
 800071a:	6013      	str	r3, [r2, #0]
		ScorBot.rcvCtrl(req_in);
 800071c:	68f9      	ldr	r1, [r7, #12]
 800071e:	4805      	ldr	r0, [pc, #20]	; (8000734 <control_callback+0x34>)
 8000720:	f000 fc3a 	bl	8000f98 <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request>
		ScorBot.sndCtrl(res_in);
 8000724:	68b9      	ldr	r1, [r7, #8]
 8000726:	4803      	ldr	r0, [pc, #12]	; (8000734 <control_callback+0x34>)
 8000728:	f000 fc93 	bl	8001052 <_ZN5Robot7sndCtrlEP36racs_services__srv__Control_Response>
	}
 800072c:	bf00      	nop
 800072e:	3710      	adds	r7, #16
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	200021fc 	.word	0x200021fc

08000738 <setup_callback>:

void setup_callback(const void* request_msg, void* response_msg){
 8000738:	b580      	push	{r7, lr}
 800073a:	b084      	sub	sp, #16
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
 8000740:	6039      	str	r1, [r7, #0]
		racs_services__srv__Setup_Request* req_in =
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	60fb      	str	r3, [r7, #12]
				(racs_services__srv__Setup_Request*) request_msg;
		racs_services__srv__Setup_Response* res_in =
 8000746:	683b      	ldr	r3, [r7, #0]
 8000748:	60bb      	str	r3, [r7, #8]
				(racs_services__srv__Setup_Response*) response_msg;
		ScorBot.lastEvent = getCurrentTime();
 800074a:	f003 fa49 	bl	8003be0 <_Z14getCurrentTimev>
 800074e:	4603      	mov	r3, r0
 8000750:	4a06      	ldr	r2, [pc, #24]	; (800076c <setup_callback+0x34>)
 8000752:	6013      	str	r3, [r2, #0]
		ScorBot.rcvSetup(req_in);
 8000754:	68f9      	ldr	r1, [r7, #12]
 8000756:	4805      	ldr	r0, [pc, #20]	; (800076c <setup_callback+0x34>)
 8000758:	f000 fc8c 	bl	8001074 <_ZN5Robot8rcvSetupEP33racs_services__srv__Setup_Request>
		ScorBot.sndSetup(res_in);
 800075c:	68b9      	ldr	r1, [r7, #8]
 800075e:	4803      	ldr	r0, [pc, #12]	; (800076c <setup_callback+0x34>)
 8000760:	f000 fce8 	bl	8001134 <_ZN5Robot8sndSetupEP34racs_services__srv__Setup_Response>
	}
 8000764:	bf00      	nop
 8000766:	3710      	adds	r7, #16
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	200021fc 	.word	0x200021fc

08000770 <feedback_timer_callback>:

void feedback_timer_callback(rcl_timer_t* timer, int64_t last_call_time)
{
 8000770:	b590      	push	{r4, r7, lr}
 8000772:	b08d      	sub	sp, #52	; 0x34
 8000774:	af00      	add	r7, sp, #0
 8000776:	60f8      	str	r0, [r7, #12]
 8000778:	e9c7 2300 	strd	r2, r3, [r7]
	//UNUSED(timer);
	UNUSED(last_call_time);

	if (timer != NULL) {
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d043      	beq.n	800080a <feedback_timer_callback+0x9a>
		racs_services__msg__Feedback feedback;
		rcl_ret_t rc;

		int size = ScorBot.getSize();
 8000782:	4823      	ldr	r0, [pc, #140]	; (8000810 <feedback_timer_callback+0xa0>)
 8000784:	f000 fb19 	bl	8000dba <_ZN5Robot7getSizeEv>
 8000788:	62b8      	str	r0, [r7, #40]	; 0x28
		feedback.num_motors = size;
 800078a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800078c:	b2db      	uxtb	r3, r3
 800078e:	753b      	strb	r3, [r7, #20]
		for(uint8_t i = 0; i < size; i++) {
 8000790:	2300      	movs	r3, #0
 8000792:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000796:	e013      	b.n	80007c0 <feedback_timer_callback+0x50>
			feedback.encoders[i] = ScorBot.getEncoder(i);
 8000798:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 800079c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80007a0:	4619      	mov	r1, r3
 80007a2:	481b      	ldr	r0, [pc, #108]	; (8000810 <feedback_timer_callback+0xa0>)
 80007a4:	f000 fb8d 	bl	8000ec2 <_ZN5Robot10getEncoderEh>
 80007a8:	4603      	mov	r3, r0
 80007aa:	461a      	mov	r2, r3
 80007ac:	0063      	lsls	r3, r4, #1
 80007ae:	3330      	adds	r3, #48	; 0x30
 80007b0:	443b      	add	r3, r7
 80007b2:	f823 2c1a 	strh.w	r2, [r3, #-26]
		for(uint8_t i = 0; i < size; i++) {
 80007b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80007ba:	3301      	adds	r3, #1
 80007bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80007c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80007c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80007c6:	429a      	cmp	r2, r3
 80007c8:	dce6      	bgt.n	8000798 <feedback_timer_callback+0x28>
		}

		for(uint8_t i = 6; i > size; i--) {
 80007ca:	2306      	movs	r3, #6
 80007cc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80007d0:	e00c      	b.n	80007ec <feedback_timer_callback+0x7c>
			feedback.encoders[i] = 0;
 80007d2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80007d6:	005b      	lsls	r3, r3, #1
 80007d8:	3330      	adds	r3, #48	; 0x30
 80007da:	443b      	add	r3, r7
 80007dc:	2200      	movs	r2, #0
 80007de:	f823 2c1a 	strh.w	r2, [r3, #-26]
		for(uint8_t i = 6; i > size; i--) {
 80007e2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80007e6:	3b01      	subs	r3, #1
 80007e8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80007ec:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80007f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80007f2:	429a      	cmp	r2, r3
 80007f4:	dbed      	blt.n	80007d2 <feedback_timer_callback+0x62>
		}
		rc = rcl_publish(&feedback_publisher, &feedback, NULL);
 80007f6:	f107 0314 	add.w	r3, r7, #20
 80007fa:	2200      	movs	r2, #0
 80007fc:	4619      	mov	r1, r3
 80007fe:	4805      	ldr	r0, [pc, #20]	; (8000814 <feedback_timer_callback+0xa4>)
 8000800:	f00c f98e 	bl	800cb20 <rcl_publish>
 8000804:	6278      	str	r0, [r7, #36]	; 0x24
		if (rc != RCL_RET_OK) return;
 8000806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000808:	2b00      	cmp	r3, #0
	}
}
 800080a:	3734      	adds	r7, #52	; 0x34
 800080c:	46bd      	mov	sp, r7
 800080e:	bd90      	pop	{r4, r7, pc}
 8000810:	200021fc 	.word	0x200021fc
 8000814:	20006664 	.word	0x20006664

08000818 <robot_timer_callback>:

void robot_timer_callback(rcl_timer_t* timer, int64_t last_call_time)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b084      	sub	sp, #16
 800081c:	af00      	add	r7, sp, #0
 800081e:	60f8      	str	r0, [r7, #12]
 8000820:	e9c7 2300 	strd	r2, r3, [r7]
	//UNUSED(timer);
	UNUSED(last_call_time);
	if (timer != NULL) {
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d002      	beq.n	8000830 <robot_timer_callback+0x18>
		ScorBot.cycle();
 800082a:	4803      	ldr	r0, [pc, #12]	; (8000838 <robot_timer_callback+0x20>)
 800082c:	f000 fd78 	bl	8001320 <_ZN5Robot5cycleEv>
	}

}
 8000830:	bf00      	nop
 8000832:	3710      	adds	r7, #16
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	200021fc 	.word	0x200021fc

0800083c <_ZN10PinControlC1EP12GPIO_TypeDeft>:

PinControl::PinControl() {

}

PinControl::PinControl(GPIO_TypeDef* port, uint16_t pin){
 800083c:	b580      	push	{r7, lr}
 800083e:	b084      	sub	sp, #16
 8000840:	af00      	add	r7, sp, #0
 8000842:	60f8      	str	r0, [r7, #12]
 8000844:	60b9      	str	r1, [r7, #8]
 8000846:	4613      	mov	r3, r2
 8000848:	80fb      	strh	r3, [r7, #6]
  this->port = port;
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	68ba      	ldr	r2, [r7, #8]
 800084e:	601a      	str	r2, [r3, #0]
  this->pin = pin;
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	88fa      	ldrh	r2, [r7, #6]
 8000854:	809a      	strh	r2, [r3, #4]
  setLimits(0.0, 0.0);
 8000856:	eddf 0a06 	vldr	s1, [pc, #24]	; 8000870 <_ZN10PinControlC1EP12GPIO_TypeDeft+0x34>
 800085a:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8000870 <_ZN10PinControlC1EP12GPIO_TypeDeft+0x34>
 800085e:	68f8      	ldr	r0, [r7, #12]
 8000860:	f000 f808 	bl	8000874 <_ZN10PinControl9setLimitsEff>
}
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	4618      	mov	r0, r3
 8000868:	3710      	adds	r7, #16
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	00000000 	.word	0x00000000

08000874 <_ZN10PinControl9setLimitsEff>:
  this->port = port;
  this->pin = pin;
  setLimits(v1, v2);
}

void PinControl::setLimits(float v1, float v2){
 8000874:	b480      	push	{r7}
 8000876:	b085      	sub	sp, #20
 8000878:	af00      	add	r7, sp, #0
 800087a:	60f8      	str	r0, [r7, #12]
 800087c:	ed87 0a02 	vstr	s0, [r7, #8]
 8000880:	edc7 0a01 	vstr	s1, [r7, #4]
  this->v1 = v1;
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	68ba      	ldr	r2, [r7, #8]
 8000888:	609a      	str	r2, [r3, #8]
  this->v2 = v2;
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	687a      	ldr	r2, [r7, #4]
 800088e:	60da      	str	r2, [r3, #12]
}
 8000890:	bf00      	nop
 8000892:	3714      	adds	r7, #20
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr

0800089c <_ZN10PinControl3setEb>:

void PinControl::set(bool state){
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
 80008a4:	460b      	mov	r3, r1
 80008a6:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_WritePin(port, pin, state ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	6818      	ldr	r0, [r3, #0]
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	8899      	ldrh	r1, [r3, #4]
 80008b0:	78fb      	ldrb	r3, [r7, #3]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <_ZN10PinControl3setEb+0x1e>
 80008b6:	2301      	movs	r3, #1
 80008b8:	e000      	b.n	80008bc <_ZN10PinControl3setEb+0x20>
 80008ba:	2300      	movs	r3, #0
 80008bc:	461a      	mov	r2, r3
 80008be:	f004 f8cd 	bl	8004a5c <HAL_GPIO_WritePin>
}
 80008c2:	bf00      	nop
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
	...

080008cc <_ZN10PinMeasureC1EP12GPIO_TypeDeft>:

PinMeasure::PinMeasure() {

}

PinMeasure::PinMeasure(GPIO_TypeDef* port, uint16_t pin){
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	60f8      	str	r0, [r7, #12]
 80008d4:	60b9      	str	r1, [r7, #8]
 80008d6:	4613      	mov	r3, r2
 80008d8:	80fb      	strh	r3, [r7, #6]
  this->port = port;
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	68ba      	ldr	r2, [r7, #8]
 80008de:	601a      	str	r2, [r3, #0]
  this->pin = pin;
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	88fa      	ldrh	r2, [r7, #6]
 80008e4:	809a      	strh	r2, [r3, #4]
  setLimits(0.0, 0.0);
 80008e6:	eddf 0a06 	vldr	s1, [pc, #24]	; 8000900 <_ZN10PinMeasureC1EP12GPIO_TypeDeft+0x34>
 80008ea:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8000900 <_ZN10PinMeasureC1EP12GPIO_TypeDeft+0x34>
 80008ee:	68f8      	ldr	r0, [r7, #12]
 80008f0:	f000 f808 	bl	8000904 <_ZN10PinMeasure9setLimitsEff>
}
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	4618      	mov	r0, r3
 80008f8:	3710      	adds	r7, #16
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	00000000 	.word	0x00000000

08000904 <_ZN10PinMeasure9setLimitsEff>:
  this->port = port;
  this->pin = pin;
  setLimits(v1, v2);
}

void PinMeasure::setLimits(float v1, float v2){
 8000904:	b480      	push	{r7}
 8000906:	b085      	sub	sp, #20
 8000908:	af00      	add	r7, sp, #0
 800090a:	60f8      	str	r0, [r7, #12]
 800090c:	ed87 0a02 	vstr	s0, [r7, #8]
 8000910:	edc7 0a01 	vstr	s1, [r7, #4]
  this->v1 = v1;
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	68ba      	ldr	r2, [r7, #8]
 8000918:	609a      	str	r2, [r3, #8]
  this->v2 = v2;
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	687a      	ldr	r2, [r7, #4]
 800091e:	60da      	str	r2, [r3, #12]
}
 8000920:	bf00      	nop
 8000922:	3714      	adds	r7, #20
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr

0800092c <_ZN10PinMeasure5stateEv>:

bool PinMeasure::state(){
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  return HAL_GPIO_ReadPin(port, pin);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681a      	ldr	r2, [r3, #0]
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	889b      	ldrh	r3, [r3, #4]
 800093c:	4619      	mov	r1, r3
 800093e:	4610      	mov	r0, r2
 8000940:	f004 f874 	bl	8004a2c <HAL_GPIO_ReadPin>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	bf14      	ite	ne
 800094a:	2301      	movne	r3, #1
 800094c:	2300      	moveq	r3, #0
 800094e:	b2db      	uxtb	r3, r3
}
 8000950:	4618      	mov	r0, r3
 8000952:	3708      	adds	r7, #8
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}

08000958 <_ZN5MotorC1E10PinControlS0_P17TIM_HandleTypeDefh10PinMeasure>:
Motor::Motor(PinControl &INA, PinControl &INB,
			 TIM_HandleTypeDef* htimPWM, uint8_t CCRx,
			 TIM_HandleTypeDef* htimENC, PinMeasure &END)
  : pin_INA(INA), pin_INB(INB), htimPWM(htimPWM), CCRx(CCRx), htimENC(htimENC), pin_END(END) {}
*/
Motor::Motor(PinControl INA, PinControl INB,
 8000958:	b084      	sub	sp, #16
 800095a:	b490      	push	{r4, r7}
 800095c:	b082      	sub	sp, #8
 800095e:	af00      	add	r7, sp, #0
 8000960:	6078      	str	r0, [r7, #4]
 8000962:	f107 0014 	add.w	r0, r7, #20
 8000966:	e880 000e 	stmia.w	r0, {r1, r2, r3}
			 TIM_HandleTypeDef* htimPWM, uint8_t CCRx,
			 PinMeasure END)
  : pin_INA(INA), pin_INB(INB), htimPWM(htimPWM), CCRx(CCRx), htimENC(NULL), pin_END(END) {}
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	461c      	mov	r4, r3
 800096e:	f107 0314 	add.w	r3, r7, #20
 8000972:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000974:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	f103 0410 	add.w	r4, r3, #16
 800097e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000982:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000984:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800098c:	621a      	str	r2, [r3, #32]
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8000994:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	2200      	movs	r2, #0
 800099c:	629a      	str	r2, [r3, #40]	; 0x28
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80009a4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80009a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	2200      	movs	r2, #0
 80009b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	4618      	mov	r0, r3
 80009ba:	3708      	adds	r7, #8
 80009bc:	46bd      	mov	sp, r7
 80009be:	bc90      	pop	{r4, r7}
 80009c0:	b004      	add	sp, #16
 80009c2:	4770      	bx	lr

080009c4 <_ZN5MotorC1E10PinControlS0_P17TIM_HandleTypeDefhS2_10PinMeasure>:

Motor::Motor(PinControl INA, PinControl INB,
 80009c4:	b084      	sub	sp, #16
 80009c6:	b490      	push	{r4, r7}
 80009c8:	b082      	sub	sp, #8
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	6078      	str	r0, [r7, #4]
 80009ce:	f107 0014 	add.w	r0, r7, #20
 80009d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
			 TIM_HandleTypeDef* htimPWM, uint8_t CCRx,
			 TIM_HandleTypeDef* htimENC, PinMeasure END)
  : pin_INA(INA), pin_INB(INB), htimPWM(htimPWM), CCRx(CCRx), htimENC(htimENC), pin_END(END) {}
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	461c      	mov	r4, r3
 80009da:	f107 0314 	add.w	r3, r7, #20
 80009de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	f103 0410 	add.w	r4, r3, #16
 80009ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80009f8:	621a      	str	r2, [r3, #32]
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8000a00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000a08:	629a      	str	r2, [r3, #40]	; 0x28
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8000a10:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a14:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a16:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	4618      	mov	r0, r3
 8000a26:	3708      	adds	r7, #8
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bc90      	pop	{r4, r7}
 8000a2c:	b004      	add	sp, #16
 8000a2e:	4770      	bx	lr

08000a30 <_ZN5MotorD1Ev>:


Motor::~Motor() {}
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr

08000a46 <_ZN5Motor10getEncoderEv>:

/*void Motor::invertEncoder(bool invert){
  this->encoder_invert = invert;
}*/

int16_t Motor::getEncoder(){
 8000a46:	b480      	push	{r7}
 8000a48:	b083      	sub	sp, #12
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	6078      	str	r0, [r7, #4]
  if (htimENC != NULL) {
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d005      	beq.n	8000a62 <_ZN5Motor10getEncoderEv+0x1c>
	  return htimENC->Instance->CNT;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a5e:	b21b      	sxth	r3, r3
 8000a60:	e000      	b.n	8000a64 <_ZN5Motor10getEncoderEv+0x1e>
  } else {
	  return 0;
 8000a62:	2300      	movs	r3, #0
  }
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	370c      	adds	r7, #12
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr

08000a70 <_ZN5Motor10driveMotorEs>:

void Motor::invertMotor(bool invert){
  this->motor_invert = invert;
}
void Motor::driveMotor(int16_t spwm){
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b086      	sub	sp, #24
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	460b      	mov	r3, r1
 8000a7a:	807b      	strh	r3, [r7, #2]
  OperatingMode mode = OperatingMode::BRAKE_GND;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	617b      	str	r3, [r7, #20]
  spwm = std::min(std::max(spwm, (int16_t) -30000), (int16_t) 30000);
 8000a80:	f648 23d0 	movw	r3, #35536	; 0x8ad0
 8000a84:	813b      	strh	r3, [r7, #8]
 8000a86:	f107 0208 	add.w	r2, r7, #8
 8000a8a:	1cbb      	adds	r3, r7, #2
 8000a8c:	4611      	mov	r1, r2
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f000 fe68 	bl	8001764 <_ZSt3maxIsERKT_S2_S2_>
 8000a94:	4602      	mov	r2, r0
 8000a96:	f247 5330 	movw	r3, #30000	; 0x7530
 8000a9a:	817b      	strh	r3, [r7, #10]
 8000a9c:	f107 030a 	add.w	r3, r7, #10
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	f000 fe74 	bl	8001790 <_ZSt3minIsERKT_S2_S2_>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000aae:	807b      	strh	r3, [r7, #2]

  if(spwm > 0) {
 8000ab0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	dd09      	ble.n	8000acc <_ZN5Motor10driveMotorEs+0x5c>
    mode = motor_invert ? OperatingMode::SPIN_CCW : OperatingMode::SPIN_CW;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <_ZN5Motor10driveMotorEs+0x56>
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	e000      	b.n	8000ac8 <_ZN5Motor10driveMotorEs+0x58>
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	617b      	str	r3, [r7, #20]
 8000aca:	e00f      	b.n	8000aec <_ZN5Motor10driveMotorEs+0x7c>
  } else if (spwm < 0) {
 8000acc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	da09      	bge.n	8000ae8 <_ZN5Motor10driveMotorEs+0x78>
    mode = motor_invert ? OperatingMode::SPIN_CW : OperatingMode::SPIN_CCW;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <_ZN5Motor10driveMotorEs+0x72>
 8000ade:	2302      	movs	r3, #2
 8000ae0:	e000      	b.n	8000ae4 <_ZN5Motor10driveMotorEs+0x74>
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	617b      	str	r3, [r7, #20]
 8000ae6:	e001      	b.n	8000aec <_ZN5Motor10driveMotorEs+0x7c>
  } else {
    mode = OperatingMode::BRAKE_GND;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	617b      	str	r3, [r7, #20]
  }

  switch(mode){
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	2b03      	cmp	r3, #3
 8000af0:	d83a      	bhi.n	8000b68 <_ZN5Motor10driveMotorEs+0xf8>
 8000af2:	a201      	add	r2, pc, #4	; (adr r2, 8000af8 <_ZN5Motor10driveMotorEs+0x88>)
 8000af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000af8:	08000b09 	.word	0x08000b09
 8000afc:	08000b21 	.word	0x08000b21
 8000b00:	08000b39 	.word	0x08000b39
 8000b04:	08000b51 	.word	0x08000b51
    case OperatingMode::BRAKE_GND:
      pin_INA.set(false);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f7ff fec5 	bl	800089c <_ZN10PinControl3setEb>
      pin_INB.set(false);
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	3310      	adds	r3, #16
 8000b16:	2100      	movs	r1, #0
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f7ff febf 	bl	800089c <_ZN10PinControl3setEb>
      break;
 8000b1e:	e023      	b.n	8000b68 <_ZN5Motor10driveMotorEs+0xf8>
    case OperatingMode::SPIN_CCW:
      pin_INA.set(false);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	2100      	movs	r1, #0
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff feb9 	bl	800089c <_ZN10PinControl3setEb>
      pin_INB.set(true);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	3310      	adds	r3, #16
 8000b2e:	2101      	movs	r1, #1
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff feb3 	bl	800089c <_ZN10PinControl3setEb>
      break;
 8000b36:	e017      	b.n	8000b68 <_ZN5Motor10driveMotorEs+0xf8>
    case OperatingMode::SPIN_CW:
      pin_INA.set(true);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2101      	movs	r1, #1
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f7ff fead 	bl	800089c <_ZN10PinControl3setEb>
      pin_INB.set(false);
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	3310      	adds	r3, #16
 8000b46:	2100      	movs	r1, #0
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f7ff fea7 	bl	800089c <_ZN10PinControl3setEb>
      break;
 8000b4e:	e00b      	b.n	8000b68 <_ZN5Motor10driveMotorEs+0xf8>
    case OperatingMode::BRAKE_VCC:
      pin_INA.set(true);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	2101      	movs	r1, #1
 8000b54:	4618      	mov	r0, r3
 8000b56:	f7ff fea1 	bl	800089c <_ZN10PinControl3setEb>
      pin_INB.set(true);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	3310      	adds	r3, #16
 8000b5e:	2101      	movs	r1, #1
 8000b60:	4618      	mov	r0, r3
 8000b62:	f7ff fe9b 	bl	800089c <_ZN10PinControl3setEb>
      break;
 8000b66:	bf00      	nop
  }
  int a,b;
  switch(CCRx) {
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000b6e:	3b01      	subs	r3, #1
 8000b70:	2b05      	cmp	r3, #5
 8000b72:	d857      	bhi.n	8000c24 <_ZN5Motor10driveMotorEs+0x1b4>
 8000b74:	a201      	add	r2, pc, #4	; (adr r2, 8000b7c <_ZN5Motor10driveMotorEs+0x10c>)
 8000b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b7a:	bf00      	nop
 8000b7c:	08000b95 	.word	0x08000b95
 8000b80:	08000bb7 	.word	0x08000bb7
 8000b84:	08000bcd 	.word	0x08000bcd
 8000b88:	08000be3 	.word	0x08000be3
 8000b8c:	08000bf9 	.word	0x08000bf9
 8000b90:	08000c0f 	.word	0x08000c0f
    case 1:
      htimPWM->Instance->CCR1 = (uint16_t) abs(spwm);
 8000b94:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	bfb8      	it	lt
 8000b9c:	425b      	neglt	r3, r3
 8000b9e:	b29a      	uxth	r2, r3
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	6a1b      	ldr	r3, [r3, #32]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	635a      	str	r2, [r3, #52]	; 0x34
      a = TIM1->CCR1;
 8000ba8:	4b20      	ldr	r3, [pc, #128]	; (8000c2c <_ZN5Motor10driveMotorEs+0x1bc>)
 8000baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bac:	613b      	str	r3, [r7, #16]
      b = TIM1->CNT;
 8000bae:	4b1f      	ldr	r3, [pc, #124]	; (8000c2c <_ZN5Motor10driveMotorEs+0x1bc>)
 8000bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bb2:	60fb      	str	r3, [r7, #12]
      break;
 8000bb4:	e036      	b.n	8000c24 <_ZN5Motor10driveMotorEs+0x1b4>
    case 2:
      htimPWM->Instance->CCR2 = (uint16_t) abs(spwm);
 8000bb6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	bfb8      	it	lt
 8000bbe:	425b      	neglt	r3, r3
 8000bc0:	b29a      	uxth	r2, r3
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6a1b      	ldr	r3, [r3, #32]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	639a      	str	r2, [r3, #56]	; 0x38
      break;
 8000bca:	e02b      	b.n	8000c24 <_ZN5Motor10driveMotorEs+0x1b4>
    case 3:
      htimPWM->Instance->CCR3 = (uint16_t) abs(spwm);
 8000bcc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	bfb8      	it	lt
 8000bd4:	425b      	neglt	r3, r3
 8000bd6:	b29a      	uxth	r2, r3
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	6a1b      	ldr	r3, [r3, #32]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 8000be0:	e020      	b.n	8000c24 <_ZN5Motor10driveMotorEs+0x1b4>
    case 4:
      htimPWM->Instance->CCR4 = (uint16_t) abs(spwm);
 8000be2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	bfb8      	it	lt
 8000bea:	425b      	neglt	r3, r3
 8000bec:	b29a      	uxth	r2, r3
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6a1b      	ldr	r3, [r3, #32]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8000bf6:	e015      	b.n	8000c24 <_ZN5Motor10driveMotorEs+0x1b4>
    case 5:
      htimPWM->Instance->CCR5 = (uint16_t) abs(spwm);
 8000bf8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	bfb8      	it	lt
 8000c00:	425b      	neglt	r3, r3
 8000c02:	b29a      	uxth	r2, r3
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	6a1b      	ldr	r3, [r3, #32]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8000c0c:	e00a      	b.n	8000c24 <_ZN5Motor10driveMotorEs+0x1b4>
    case 6:
      htimPWM->Instance->CCR6 = (uint16_t) abs(spwm);
 8000c0e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	bfb8      	it	lt
 8000c16:	425b      	neglt	r3, r3
 8000c18:	b29a      	uxth	r2, r3
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	6a1b      	ldr	r3, [r3, #32]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 8000c22:	bf00      	nop

  }
}
 8000c24:	bf00      	nop
 8000c26:	3718      	adds	r7, #24
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	40010000 	.word	0x40010000

08000c30 <_ZN5Motor11isInEndStopEv>:

bool Motor::isInEndStop(){
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  return pin_END.state();
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	332c      	adds	r3, #44	; 0x2c
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f7ff fe75 	bl	800092c <_ZN10PinMeasure5stateEv>
 8000c42:	4603      	mov	r3, r0
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	3708      	adds	r7, #8
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}

08000c4c <_ZN5RobotC1E10PinControlS0_mhPP5MotorPf>:
// Robot
// ==================================================

/*Robot::Robot(PinControl &enable, PinControl &toggle, unsigned long ts_ms, uint8_t size, Motor **motors, float *encs_div)
  : motors(motors), error_div(encs_div), pin_enable(enable), pin_toggle(toggle) {*/
Robot::Robot(PinControl enable, PinControl toggle, unsigned long ts_ms, uint8_t size, Motor **motors, float *encs_div)
 8000c4c:	b084      	sub	sp, #16
 8000c4e:	b590      	push	{r4, r7, lr}
 8000c50:	b085      	sub	sp, #20
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	6078      	str	r0, [r7, #4]
 8000c56:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8000c5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  : pin_enable(enable), pin_toggle(toggle), motors(motors), error_div(encs_div) {
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	1d1c      	adds	r4, r3, #4
 8000c62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c66:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c68:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	f103 0414 	add.w	r4, r3, #20
 8000c72:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000c80:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000c86:	645a      	str	r2, [r3, #68]	; 0x44
  this->ts = ts_ms;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000c8c:	625a      	str	r2, [r3, #36]	; 0x24
  //this->motors = 		(Motor**)	malloc(size * sizeof(Motor*));
  this->pids = 			(PID*)		malloc(size * sizeof(PID));
 8000c8e:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 8000c92:	4613      	mov	r3, r2
 8000c94:	00db      	lsls	r3, r3, #3
 8000c96:	1a9b      	subs	r3, r3, r2
 8000c98:	00db      	lsls	r3, r3, #3
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f01b f9da 	bl	801c054 <malloc>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	631a      	str	r2, [r3, #48]	; 0x30
  this->switches = 		(bool*) 	malloc(size * sizeof(bool));
 8000ca8:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8000cac:	4618      	mov	r0, r3
 8000cae:	f01b f9d1 	bl	801c054 <malloc>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	639a      	str	r2, [r3, #56]	; 0x38
  this->motors_pwm = 	(int16_t*) 	malloc(size * sizeof(int16_t));
 8000cba:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8000cbe:	005b      	lsls	r3, r3, #1
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f01b f9c7 	bl	801c054 <malloc>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	461a      	mov	r2, r3
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	63da      	str	r2, [r3, #60]	; 0x3c
  this->encoders =		(int16_t*)	malloc(size * sizeof(int16_t));
 8000cce:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f01b f9bd 	bl	801c054 <malloc>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	461a      	mov	r2, r3
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	641a      	str	r2, [r3, #64]	; 0x40
  //this->error_div = 	(float*) 	malloc(size * sizeof(float));

  this->size = size;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 8000ce8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  this->status = Status::Idle;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2200      	movs	r2, #0
 8000cf0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  this->lastEvent = getCurrentTime();
 8000cf4:	f002 ff74 	bl	8003be0 <_Z14getCurrentTimev>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	601a      	str	r2, [r3, #0]

  for(int i = 0; i < size; i++){
 8000cfe:	2300      	movs	r3, #0
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	e01e      	b.n	8000d42 <_ZN5RobotC1E10PinControlS0_mhPP5MotorPf+0xf6>
    this->switches[i] = false;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	4413      	add	r3, r2
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	701a      	strb	r2, [r3, #0]
    this->motors_pwm[i] = 0;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	005b      	lsls	r3, r3, #1
 8000d18:	4413      	add	r3, r2
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	801a      	strh	r2, [r3, #0]
    this->encoders[i] = 0;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	005b      	lsls	r3, r3, #1
 8000d26:	4413      	add	r3, r2
 8000d28:	2200      	movs	r2, #0
 8000d2a:	801a      	strh	r2, [r3, #0]
    this->error_div[i] = 0.0;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	009b      	lsls	r3, r3, #2
 8000d34:	4413      	add	r3, r2
 8000d36:	f04f 0200 	mov.w	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
  for(int i = 0; i < size; i++){
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	3301      	adds	r3, #1
 8000d40:	60fb      	str	r3, [r7, #12]
 8000d42:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8000d46:	68fa      	ldr	r2, [r7, #12]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	dbdb      	blt.n	8000d04 <_ZN5RobotC1E10PinControlS0_mhPP5MotorPf+0xb8>
        setMotor(i, motors[i]);
      }
    }
  }*/

  lastEvent = getCurrentTime();
 8000d4c:	f002 ff48 	bl	8003be0 <_Z14getCurrentTimev>
 8000d50:	4602      	mov	r2, r0
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	601a      	str	r2, [r3, #0]
  update();
 8000d56:	6878      	ldr	r0, [r7, #4]
 8000d58:	f000 f9fa 	bl	8001150 <_ZN5Robot6updateEv>
}
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3714      	adds	r7, #20
 8000d62:	46bd      	mov	sp, r7
 8000d64:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000d68:	b004      	add	sp, #16
 8000d6a:	4770      	bx	lr

08000d6c <_ZN5RobotD1Ev>:
  : Robot(enable, toggle,ts_ms, size, motors, NULL) {}

Robot::Robot(PinControl enable, PinControl toggle, unsigned long ts_ms, uint8_t size)
  : Robot(enable, toggle,ts_ms, size, NULL, NULL) {}

Robot::~Robot() {
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  free(this->motors);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f01b f973 	bl	801c064 <free>
  free(this->pids);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	4618      	mov	r0, r3
 8000d84:	f01b f96e 	bl	801c064 <free>
  free(this->switches);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f01b f969 	bl	801c064 <free>
  free(this->motors_pwm);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d96:	4618      	mov	r0, r3
 8000d98:	f01b f964 	bl	801c064 <free>
  free(this->encoders);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da0:	4618      	mov	r0, r3
 8000da2:	f01b f95f 	bl	801c064 <free>
  free(this->error_div);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000daa:	4618      	mov	r0, r3
 8000dac:	f01b f95a 	bl	801c064 <free>
}
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	4618      	mov	r0, r3
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}

08000dba <_ZN5Robot7getSizeEv>:

int Robot::getSize(){
 8000dba:	b480      	push	{r7}
 8000dbc:	b083      	sub	sp, #12
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	6078      	str	r0, [r7, #4]
  return this->size;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	370c      	adds	r7, #12
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr

08000dd4 <_ZN5Robot9setStatusENS_6StatusEb>:

Robot::Status Robot::getStatus(){
  return this->status;
}

void Robot::setStatus(Status status, bool reset = false){
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
 8000ddc:	460b      	mov	r3, r1
 8000dde:	70fb      	strb	r3, [r7, #3]
 8000de0:	4613      	mov	r3, r2
 8000de2:	70bb      	strb	r3, [r7, #2]
  if(this->status != status || reset){
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000dea:	78fa      	ldrb	r2, [r7, #3]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	d102      	bne.n	8000df6 <_ZN5Robot9setStatusENS_6StatusEb+0x22>
 8000df0:	78bb      	ldrb	r3, [r7, #2]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d006      	beq.n	8000e04 <_ZN5Robot9setStatusENS_6StatusEb+0x30>
    //resetPWMs(); riga non necessaria?
    resetPIDs();
 8000df6:	6878      	ldr	r0, [r7, #4]
 8000df8:	f000 f843 	bl	8000e82 <_ZN5Robot9resetPIDsEv>
    this->status = status;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	78fa      	ldrb	r2, [r7, #3]
 8000e00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
}
 8000e04:	bf00      	nop
 8000e06:	3708      	adds	r7, #8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <_ZN5Robot8getMotorEh>:

Motor * Robot::getMotor(uint8_t index){
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	460b      	mov	r3, r1
 8000e16:	70fb      	strb	r3, [r7, #3]
  return this->motors[index];
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e1c:	78fb      	ldrb	r3, [r7, #3]
 8000e1e:	009b      	lsls	r3, r3, #2
 8000e20:	4413      	add	r3, r2
 8000e22:	681b      	ldr	r3, [r3, #0]
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr

08000e30 <_ZN5Robot17setEncoderDividerEhf>:
void Robot::setMotor(uint8_t index, Motor * motor, float enc_div){
  this->motors[index] = motor;
  this->error_div[index] = enc_div;
}

void Robot::setEncoderDivider(uint8_t index, float enc_div){
 8000e30:	b480      	push	{r7}
 8000e32:	b085      	sub	sp, #20
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	60f8      	str	r0, [r7, #12]
 8000e38:	460b      	mov	r3, r1
 8000e3a:	ed87 0a01 	vstr	s0, [r7, #4]
 8000e3e:	72fb      	strb	r3, [r7, #11]
  this->error_div[index] = enc_div;
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000e44:	7afb      	ldrb	r3, [r7, #11]
 8000e46:	009b      	lsls	r3, r3, #2
 8000e48:	4413      	add	r3, r2
 8000e4a:	687a      	ldr	r2, [r7, #4]
 8000e4c:	601a      	str	r2, [r3, #0]
}
 8000e4e:	bf00      	nop
 8000e50:	3714      	adds	r7, #20
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr

08000e5a <_ZN5Robot6getPIDEh>:

PID * Robot::getPID(uint8_t index){
 8000e5a:	b480      	push	{r7}
 8000e5c:	b083      	sub	sp, #12
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	6078      	str	r0, [r7, #4]
 8000e62:	460b      	mov	r3, r1
 8000e64:	70fb      	strb	r3, [r7, #3]
  return &(this->pids[index]);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000e6a:	78fa      	ldrb	r2, [r7, #3]
 8000e6c:	4613      	mov	r3, r2
 8000e6e:	00db      	lsls	r3, r3, #3
 8000e70:	1a9b      	subs	r3, r3, r2
 8000e72:	00db      	lsls	r3, r3, #3
 8000e74:	440b      	add	r3, r1
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	370c      	adds	r7, #12
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr

08000e82 <_ZN5Robot9resetPIDsEv>:
  for(int i = 0; i < size; i++){
    getPID(i)->setup(kp, ki, kd);
  }
}

void Robot::resetPIDs(){
 8000e82:	b580      	push	{r7, lr}
 8000e84:	b084      	sub	sp, #16
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	6078      	str	r0, [r7, #4]
  for(int i = 0; i < size; i++){
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	60fb      	str	r3, [r7, #12]
 8000e8e:	e00c      	b.n	8000eaa <_ZN5Robot9resetPIDsEv+0x28>
    getPID(i)->reset();
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	4619      	mov	r1, r3
 8000e96:	6878      	ldr	r0, [r7, #4]
 8000e98:	f7ff ffdf 	bl	8000e5a <_ZN5Robot6getPIDEh>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f000 fd88 	bl	80019b4 <_ZN3PID5resetEv>
  for(int i = 0; i < size; i++){
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	60fb      	str	r3, [r7, #12]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	dbeb      	blt.n	8000e90 <_ZN5Robot9resetPIDsEv+0xe>
  }
}
 8000eb8:	bf00      	nop
 8000eba:	bf00      	nop
 8000ebc:	3710      	adds	r7, #16
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <_ZN5Robot10getEncoderEh>:
  for(int i = 0; i < size; i++){
    setEncoder(i, 0);
  }
}*/

int16_t Robot::getEncoder(uint8_t index) {
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b082      	sub	sp, #8
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
 8000eca:	460b      	mov	r3, r1
 8000ecc:	70fb      	strb	r3, [r7, #3]
	return getMotor(index)->getEncoder();
 8000ece:	78fb      	ldrb	r3, [r7, #3]
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f7ff ff9a 	bl	8000e0c <_ZN5Robot8getMotorEh>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff fdb3 	bl	8000a46 <_ZN5Motor10getEncoderEv>
 8000ee0:	4603      	mov	r3, r0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <_ZN5Robot7setPWMsEPKs>:

void Robot::setPWMs(const int16_t *pwms){
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b084      	sub	sp, #16
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	6078      	str	r0, [r7, #4]
 8000ef2:	6039      	str	r1, [r7, #0]
  for(int i = 0; i < size; i++){
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	e00e      	b.n	8000f18 <_ZN5Robot7setPWMsEPKs+0x2e>
    setPWM(i, pwms[i]);
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	b2d9      	uxtb	r1, r3
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	005b      	lsls	r3, r3, #1
 8000f02:	683a      	ldr	r2, [r7, #0]
 8000f04:	4413      	add	r3, r2
 8000f06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	6878      	ldr	r0, [r7, #4]
 8000f0e:	f000 f80f 	bl	8000f30 <_ZN5Robot6setPWMEhs>
  for(int i = 0; i < size; i++){
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	3301      	adds	r3, #1
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000f1e:	461a      	mov	r2, r3
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	4293      	cmp	r3, r2
 8000f24:	dbe9      	blt.n	8000efa <_ZN5Robot7setPWMsEPKs+0x10>
  }
}
 8000f26:	bf00      	nop
 8000f28:	bf00      	nop
 8000f2a:	3710      	adds	r7, #16
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <_ZN5Robot6setPWMEhs>:

void Robot::setPWM(uint8_t index, const int16_t pwm){
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	460b      	mov	r3, r1
 8000f3a:	70fb      	strb	r3, [r7, #3]
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	803b      	strh	r3, [r7, #0]
  motors_pwm[index] = pwm;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f44:	78fb      	ldrb	r3, [r7, #3]
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	4413      	add	r3, r2
 8000f4a:	883a      	ldrh	r2, [r7, #0]
 8000f4c:	801a      	strh	r2, [r3, #0]

}
 8000f4e:	bf00      	nop
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr

08000f5a <_ZN5Robot9resetPWMsEv>:

void Robot::resetPWMs(){
 8000f5a:	b480      	push	{r7}
 8000f5c:	b085      	sub	sp, #20
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	6078      	str	r0, [r7, #4]
  for(int i = 0; i < size; i++){
 8000f62:	2300      	movs	r3, #0
 8000f64:	60fb      	str	r3, [r7, #12]
 8000f66:	e009      	b.n	8000f7c <_ZN5Robot9resetPWMsEv+0x22>
    motors_pwm[i] = 0;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	005b      	lsls	r3, r3, #1
 8000f70:	4413      	add	r3, r2
 8000f72:	2200      	movs	r2, #0
 8000f74:	801a      	strh	r2, [r3, #0]
  for(int i = 0; i < size; i++){
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000f82:	461a      	mov	r2, r3
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	4293      	cmp	r3, r2
 8000f88:	dbee      	blt.n	8000f68 <_ZN5Robot9resetPWMsEv+0xe>
  }
}
 8000f8a:	bf00      	nop
 8000f8c:	bf00      	nop
 8000f8e:	3714      	adds	r7, #20
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request>:
void Robot::disableMotors(){
  setStatus(Status::Idle, true);
  pin_enable.set(false);
}

void Robot::rcvCtrl(racs_services__srv__Control_Request* request){
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	6039      	str	r1, [r7, #0]

  if(request->command > 2) {
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	785b      	ldrb	r3, [r3, #1]
 8000fa6:	2b02      	cmp	r3, #2
 8000fa8:	d905      	bls.n	8000fb6 <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0x1e>
    setStatus(Status::Idle, true);
 8000faa:	2201      	movs	r2, #1
 8000fac:	2100      	movs	r1, #0
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f7ff ff10 	bl	8000dd4 <_ZN5Robot9setStatusENS_6StatusEb>
    return;
 8000fb4:	e04a      	b.n	800104c <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0xb4>
  }

  switch(request->command){
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	785b      	ldrb	r3, [r3, #1]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d002      	beq.n	8000fc4 <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0x2c>
 8000fbe:	2b02      	cmp	r3, #2
 8000fc0:	d01c      	beq.n	8000ffc <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0x64>
 8000fc2:	e03c      	b.n	800103e <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0xa6>
    case (unsigned char) Command::Idle:
      for(int i = 0; i < size; i++) {
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	e010      	b.n	8000fec <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0x54>
        motors_pwm[i] = 0;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	4413      	add	r3, r2
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	801a      	strh	r2, [r3, #0]
        encoders[i] = 0;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	4413      	add	r3, r2
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	801a      	strh	r2, [r3, #0]
      for(int i = 0; i < size; i++) {
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	3301      	adds	r3, #1
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	dbe7      	blt.n	8000fca <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0x32>
      }
      break;
 8000ffa:	e020      	b.n	800103e <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0xa6>

    case (unsigned char) Command::PID:
      for(int i = 0; i < size; i++) {
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	60bb      	str	r3, [r7, #8]
 8001000:	e015      	b.n	800102e <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0x96>
        motors_pwm[i] = 0;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	4413      	add	r3, r2
 800100c:	2200      	movs	r2, #0
 800100e:	801a      	strh	r2, [r3, #0]
        encoders[i] = request->encoders[i];
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	441a      	add	r2, r3
 800101a:	6839      	ldr	r1, [r7, #0]
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	440b      	add	r3, r1
 8001022:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001026:	8013      	strh	r3, [r2, #0]
      for(int i = 0; i < size; i++) {
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	3301      	adds	r3, #1
 800102c:	60bb      	str	r3, [r7, #8]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001034:	461a      	mov	r2, r3
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	4293      	cmp	r3, r2
 800103a:	dbe2      	blt.n	8001002 <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0x6a>
      }
      break;
 800103c:	bf00      	nop
  }

  setStatus((Status) request->command);
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	785b      	ldrb	r3, [r3, #1]
 8001042:	2200      	movs	r2, #0
 8001044:	4619      	mov	r1, r3
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f7ff fec4 	bl	8000dd4 <_ZN5Robot9setStatusENS_6StatusEb>
}
 800104c:	3710      	adds	r7, #16
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <_ZN5Robot7sndCtrlEP36racs_services__srv__Control_Response>:

void Robot::sndCtrl(racs_services__srv__Control_Response* response){
 8001052:	b480      	push	{r7}
 8001054:	b083      	sub	sp, #12
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
 800105a:	6039      	str	r1, [r7, #0]
	response->response = (uint8_t) status;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	701a      	strb	r2, [r3, #0]
}
 8001066:	bf00      	nop
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
	...

08001074 <_ZN5Robot8rcvSetupEP33racs_services__srv__Setup_Request>:

void Robot::rcvSetup(racs_services__srv__Setup_Request* request){
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	6039      	str	r1, [r7, #0]

  setEncoderDivider(request->motor_index, request->eed);
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	781a      	ldrb	r2, [r3, #0]
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	edd3 7a01 	vldr	s15, [r3, #4]
 8001088:	eeb0 0a67 	vmov.f32	s0, s15
 800108c:	4611      	mov	r1, r2
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f7ff fece 	bl	8000e30 <_ZN5Robot17setEncoderDividerEhf>
  getPID(request->motor_index)->reset();
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	4619      	mov	r1, r3
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f7ff fedd 	bl	8000e5a <_ZN5Robot6getPIDEh>
 80010a0:	4603      	mov	r3, r0
 80010a2:	4618      	mov	r0, r3
 80010a4:	f000 fc86 	bl	80019b4 <_ZN3PID5resetEv>
  getPID(request->motor_index)->init((float) ts/1000.0, request->tau, request->sat, true);
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	4619      	mov	r1, r3
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f7ff fed3 	bl	8000e5a <_ZN5Robot6getPIDEh>
 80010b4:	4602      	mov	r2, r0
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ba:	ee07 3a90 	vmov	s15, r3
 80010be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010c2:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8001130 <_ZN5Robot8rcvSetupEP33racs_services__srv__Setup_Request+0xbc>
 80010c6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	edd3 7a05 	vldr	s15, [r3, #20]
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	edd3 6a06 	vldr	s13, [r3, #24]
 80010d6:	2101      	movs	r1, #1
 80010d8:	eeb0 1a66 	vmov.f32	s2, s13
 80010dc:	eef0 0a67 	vmov.f32	s1, s15
 80010e0:	eeb0 0a47 	vmov.f32	s0, s14
 80010e4:	4610      	mov	r0, r2
 80010e6:	f000 fbdd 	bl	80018a4 <_ZN3PID4initEfffb>
  getPID(request->motor_index)->setup(request->p, request->i, request->d);
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	4619      	mov	r1, r3
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f7ff feb2 	bl	8000e5a <_ZN5Robot6getPIDEh>
 80010f6:	4602      	mov	r2, r0
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	edd3 7a02 	vldr	s15, [r3, #8]
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	ed93 7a03 	vldr	s14, [r3, #12]
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	edd3 6a04 	vldr	s13, [r3, #16]
 800110a:	eeb0 1a66 	vmov.f32	s2, s13
 800110e:	eef0 0a47 	vmov.f32	s1, s14
 8001112:	eeb0 0a67 	vmov.f32	s0, s15
 8001116:	4610      	mov	r0, r2
 8001118:	f000 fc32 	bl	8001980 <_ZN3PID5setupEfff>

  setStatus(Status::Idle, true);
 800111c:	2201      	movs	r2, #1
 800111e:	2100      	movs	r1, #0
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f7ff fe57 	bl	8000dd4 <_ZN5Robot9setStatusENS_6StatusEb>
}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	447a0000 	.word	0x447a0000

08001134 <_ZN5Robot8sndSetupEP34racs_services__srv__Setup_Response>:

void Robot::sndSetup(racs_services__srv__Setup_Response* response){
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	6039      	str	r1, [r7, #0]
  response->response = (uint8_t) Status::Setup;
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	2203      	movs	r2, #3
 8001142:	701a      	strb	r2, [r3, #0]
}
 8001144:	bf00      	nop
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <_ZN5Robot6updateEv>:

void Robot::update(){
 8001150:	b590      	push	{r4, r7, lr}
 8001152:	b089      	sub	sp, #36	; 0x24
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  switch(status){
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800115e:	2b02      	cmp	r3, #2
 8001160:	d00c      	beq.n	800117c <_ZN5Robot6updateEv+0x2c>
 8001162:	2b02      	cmp	r3, #2
 8001164:	f200 8088 	bhi.w	8001278 <_ZN5Robot6updateEv+0x128>
 8001168:	2b00      	cmp	r3, #0
 800116a:	d003      	beq.n	8001174 <_ZN5Robot6updateEv+0x24>
 800116c:	2b01      	cmp	r3, #1
 800116e:	f000 808e 	beq.w	800128e <_ZN5Robot6updateEv+0x13e>
 8001172:	e081      	b.n	8001278 <_ZN5Robot6updateEv+0x128>
    case Status::Idle:
      resetPWMs();
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f7ff fef0 	bl	8000f5a <_ZN5Robot9resetPWMsEv>
      break;
 800117a:	e089      	b.n	8001290 <_ZN5Robot6updateEv+0x140>

    case Status::DAQ:
      break;

    case Status::PID:
      for(int i = 0; i < size; i++){
 800117c:	2300      	movs	r3, #0
 800117e:	61fb      	str	r3, [r7, #28]
 8001180:	e072      	b.n	8001268 <_ZN5Robot6updateEv+0x118>
        float err = (float) (getMotor(i)->getEncoder() - encoders[i]) / ((error_div[i] == 0) ? 1.0 : error_div[i]);
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	b2db      	uxtb	r3, r3
 8001186:	4619      	mov	r1, r3
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f7ff fe3f 	bl	8000e0c <_ZN5Robot8getMotorEh>
 800118e:	4603      	mov	r3, r0
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff fc58 	bl	8000a46 <_ZN5Motor10getEncoderEv>
 8001196:	4603      	mov	r3, r0
 8001198:	4619      	mov	r1, r3
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	4413      	add	r3, r2
 80011a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011a8:	1acb      	subs	r3, r1, r3
 80011aa:	ee07 3a90 	vmov	s15, r3
 80011ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011b2:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	4413      	add	r3, r2
 80011c0:	edd3 7a00 	vldr	s15, [r3]
 80011c4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80011c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011cc:	d009      	beq.n	80011e2 <_ZN5Robot6updateEv+0x92>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	4413      	add	r3, r2
 80011d8:	edd3 7a00 	vldr	s15, [r3]
 80011dc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011e0:	e001      	b.n	80011e6 <_ZN5Robot6updateEv+0x96>
 80011e2:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80011e6:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80011ea:	eef7 7bc6 	vcvt.f32.f64	s15, d6
 80011ee:	edc7 7a05 	vstr	s15, [r7, #20]
    	motors_pwm[i] = (int16_t) std::min(std::max((float) 0, getPID(i)->evolve(err)), (float) MAX_PWM) - HALF_PWM;
 80011f2:	f04f 0300 	mov.w	r3, #0
 80011f6:	60bb      	str	r3, [r7, #8]
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	4619      	mov	r1, r3
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f7ff fe2b 	bl	8000e5a <_ZN5Robot6getPIDEh>
 8001204:	4603      	mov	r3, r0
 8001206:	ed97 0a05 	vldr	s0, [r7, #20]
 800120a:	4618      	mov	r0, r3
 800120c:	f000 fcbf 	bl	8001b8e <_ZN3PID6evolveEf>
 8001210:	eef0 7a40 	vmov.f32	s15, s0
 8001214:	edc7 7a03 	vstr	s15, [r7, #12]
 8001218:	f107 020c 	add.w	r2, r7, #12
 800121c:	f107 0308 	add.w	r3, r7, #8
 8001220:	4611      	mov	r1, r2
 8001222:	4618      	mov	r0, r3
 8001224:	f000 faca 	bl	80017bc <_ZSt3maxIfERKT_S2_S2_>
 8001228:	4602      	mov	r2, r0
 800122a:	f04f 438f 	mov.w	r3, #1199570944	; 0x47800000
 800122e:	613b      	str	r3, [r7, #16]
 8001230:	f107 0310 	add.w	r3, r7, #16
 8001234:	4619      	mov	r1, r3
 8001236:	4610      	mov	r0, r2
 8001238:	f000 fad9 	bl	80017ee <_ZSt3minIfERKT_S2_S2_>
 800123c:	4603      	mov	r3, r0
 800123e:	edd3 7a00 	vldr	s15, [r3]
 8001242:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001246:	ee17 3a90 	vmov	r3, s15
 800124a:	b21b      	sxth	r3, r3
 800124c:	b29b      	uxth	r3, r3
 800124e:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8001252:	b299      	uxth	r1, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	4413      	add	r3, r2
 800125e:	b20a      	sxth	r2, r1
 8001260:	801a      	strh	r2, [r3, #0]
      for(int i = 0; i < size; i++){
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	3301      	adds	r3, #1
 8001266:	61fb      	str	r3, [r7, #28]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800126e:	461a      	mov	r2, r3
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	4293      	cmp	r3, r2
 8001274:	db85      	blt.n	8001182 <_ZN5Robot6updateEv+0x32>
      }
      break;
 8001276:	e00b      	b.n	8001290 <_ZN5Robot6updateEv+0x140>

    default:
      resetPWMs();
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f7ff fe6e 	bl	8000f5a <_ZN5Robot9resetPWMsEv>
      resetPIDs();
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f7ff fdff 	bl	8000e82 <_ZN5Robot9resetPIDsEv>
      status = Status::Idle;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2200      	movs	r2, #0
 8001288:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      break;
 800128c:	e000      	b.n	8001290 <_ZN5Robot6updateEv+0x140>
      break;
 800128e:	bf00      	nop
  }

  for(int i = 0; i < size; i++){
 8001290:	2300      	movs	r3, #0
 8001292:	61bb      	str	r3, [r7, #24]
 8001294:	e012      	b.n	80012bc <_ZN5Robot6updateEv+0x16c>
    switches[i] = getMotor(i)->isInEndStop();
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	b2db      	uxtb	r3, r3
 800129a:	4619      	mov	r1, r3
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f7ff fdb5 	bl	8000e0c <_ZN5Robot8getMotorEh>
 80012a2:	4601      	mov	r1, r0
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	18d4      	adds	r4, r2, r3
 80012ac:	4608      	mov	r0, r1
 80012ae:	f7ff fcbf 	bl	8000c30 <_ZN5Motor11isInEndStopEv>
 80012b2:	4603      	mov	r3, r0
 80012b4:	7023      	strb	r3, [r4, #0]
  for(int i = 0; i < size; i++){
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	3301      	adds	r3, #1
 80012ba:	61bb      	str	r3, [r7, #24]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80012c2:	461a      	mov	r2, r3
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	4293      	cmp	r3, r2
 80012c8:	dbe5      	blt.n	8001296 <_ZN5Robot6updateEv+0x146>
  }
}
 80012ca:	bf00      	nop
 80012cc:	bf00      	nop
 80012ce:	3724      	adds	r7, #36	; 0x24
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd90      	pop	{r4, r7, pc}

080012d4 <_ZN5Robot7actuateEv>:

void Robot::actuate(){
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  for(int i = 0; i < size; i++){
 80012dc:	2300      	movs	r3, #0
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	e012      	b.n	8001308 <_ZN5Robot7actuateEv+0x34>
    getMotor(i)->driveMotor(motors_pwm[i]);
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	4619      	mov	r1, r3
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f7ff fd8f 	bl	8000e0c <_ZN5Robot8getMotorEh>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	4413      	add	r3, r2
 80012f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012fc:	4619      	mov	r1, r3
 80012fe:	f7ff fbb7 	bl	8000a70 <_ZN5Motor10driveMotorEs>
  for(int i = 0; i < size; i++){
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	3301      	adds	r3, #1
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800130e:	461a      	mov	r2, r3
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	4293      	cmp	r3, r2
 8001314:	dbe5      	blt.n	80012e2 <_ZN5Robot7actuateEv+0xe>
  }
}
 8001316:	bf00      	nop
 8001318:	bf00      	nop
 800131a:	3710      	adds	r7, #16
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}

08001320 <_ZN5Robot5cycleEv>:
      }
    }
  }
}*/

void Robot::cycle(){
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
      //if (getElapsedTime(lastEvent) >= time_ms){
    	//lastEvent = getCurrentTime();
        pin_toggle.set(true);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	3314      	adds	r3, #20
 800132c:	2101      	movs	r1, #1
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff fab4 	bl	800089c <_ZN10PinControl3setEb>
        update();
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f7ff ff0b 	bl	8001150 <_ZN5Robot6updateEv>
        actuate();
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f7ff ffca 	bl	80012d4 <_ZN5Robot7actuateEv>
        pin_toggle.set(false);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	3314      	adds	r3, #20
 8001344:	2100      	movs	r1, #0
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff faa8 	bl	800089c <_ZN10PinControl3setEb>
      //}
}
 800134c:	bf00      	nop
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}

08001354 <_Z12create_robotv>:

Robot create_robot() {
 8001354:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001356:	f5ad 7d47 	sub.w	sp, sp, #796	; 0x31c
 800135a:	af0c      	add	r7, sp, #48	; 0x30
 800135c:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 8001360:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 8001364:	6018      	str	r0, [r3, #0]

	PinControl mot1_ina = PinControl(MOTOR1_INA_GPIO_Port, MOTOR1_INA_Pin);
 8001366:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800136a:	2201      	movs	r2, #1
 800136c:	49cd      	ldr	r1, [pc, #820]	; (80016a4 <_Z12create_robotv+0x350>)
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff fa64 	bl	800083c <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinControl mot1_inb = PinControl(MOTOR1_INB_GPIO_Port, MOTOR1_INB_Pin);
 8001374:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001378:	2202      	movs	r2, #2
 800137a:	49ca      	ldr	r1, [pc, #808]	; (80016a4 <_Z12create_robotv+0x350>)
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff fa5d 	bl	800083c <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinMeasure mot1_end = PinMeasure(MOTOR1_END_GPIO_Port, MOTOR1_END_Pin);
 8001382:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8001386:	f44f 7200 	mov.w	r2, #512	; 0x200
 800138a:	49c7      	ldr	r1, [pc, #796]	; (80016a8 <_Z12create_robotv+0x354>)
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff fa9d 	bl	80008cc <_ZN10PinMeasureC1EP12GPIO_TypeDeft>

	PinControl mot2_ina = PinControl(MOTOR2_INA_GPIO_Port, MOTOR2_INA_Pin);
 8001392:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8001396:	2204      	movs	r2, #4
 8001398:	49c2      	ldr	r1, [pc, #776]	; (80016a4 <_Z12create_robotv+0x350>)
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff fa4e 	bl	800083c <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinControl mot2_inb = PinControl(MOTOR2_INB_GPIO_Port, MOTOR2_INB_Pin);
 80013a0:	f507 7324 	add.w	r3, r7, #656	; 0x290
 80013a4:	2208      	movs	r2, #8
 80013a6:	49bf      	ldr	r1, [pc, #764]	; (80016a4 <_Z12create_robotv+0x350>)
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff fa47 	bl	800083c <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinMeasure mot2_end = PinMeasure(MOTOR2_END_GPIO_Port, MOTOR2_END_Pin);
 80013ae:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80013b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013b6:	49bc      	ldr	r1, [pc, #752]	; (80016a8 <_Z12create_robotv+0x354>)
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff fa87 	bl	80008cc <_ZN10PinMeasureC1EP12GPIO_TypeDeft>

	PinControl mot3_ina = PinControl(MOTOR3_INA_GPIO_Port, MOTOR3_INA_Pin);
 80013be:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80013c2:	2210      	movs	r2, #16
 80013c4:	49b7      	ldr	r1, [pc, #732]	; (80016a4 <_Z12create_robotv+0x350>)
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff fa38 	bl	800083c <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinControl mot3_inb = PinControl(MOTOR3_INB_GPIO_Port, MOTOR3_INB_Pin);
 80013cc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80013d0:	2220      	movs	r2, #32
 80013d2:	49b4      	ldr	r1, [pc, #720]	; (80016a4 <_Z12create_robotv+0x350>)
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff fa31 	bl	800083c <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinMeasure mot3_end = PinMeasure(MOTOR3_END_GPIO_Port, MOTOR3_END_Pin);
 80013da:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80013de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013e2:	49b1      	ldr	r1, [pc, #708]	; (80016a8 <_Z12create_robotv+0x354>)
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff fa71 	bl	80008cc <_ZN10PinMeasureC1EP12GPIO_TypeDeft>

	PinControl mot4_ina = PinControl(MOTOR4_INA_GPIO_Port, MOTOR4_INA_Pin);
 80013ea:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80013ee:	2240      	movs	r2, #64	; 0x40
 80013f0:	49ac      	ldr	r1, [pc, #688]	; (80016a4 <_Z12create_robotv+0x350>)
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff fa22 	bl	800083c <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinControl mot4_inb = PinControl(MOTOR4_INB_GPIO_Port, MOTOR4_INB_Pin);
 80013f8:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80013fc:	2280      	movs	r2, #128	; 0x80
 80013fe:	49a9      	ldr	r1, [pc, #676]	; (80016a4 <_Z12create_robotv+0x350>)
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff fa1b 	bl	800083c <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinMeasure mot4_end = PinMeasure(MOTOR4_END_GPIO_Port, MOTOR4_END_Pin);
 8001406:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800140a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800140e:	49a6      	ldr	r1, [pc, #664]	; (80016a8 <_Z12create_robotv+0x354>)
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff fa5b 	bl	80008cc <_ZN10PinMeasureC1EP12GPIO_TypeDeft>

	PinControl mot5_ina = PinControl(MOTOR5_INA_GPIO_Port, MOTOR5_INA_Pin);
 8001416:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800141a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800141e:	49a1      	ldr	r1, [pc, #644]	; (80016a4 <_Z12create_robotv+0x350>)
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff fa0b 	bl	800083c <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinControl mot5_inb = PinControl(MOTOR5_INB_GPIO_Port, MOTOR5_INB_Pin);
 8001426:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800142a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800142e:	499d      	ldr	r1, [pc, #628]	; (80016a4 <_Z12create_robotv+0x350>)
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff fa03 	bl	800083c <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinMeasure mot5_end = PinMeasure(MOTOR5_END_GPIO_Port, MOTOR5_END_Pin);
 8001436:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800143a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800143e:	499a      	ldr	r1, [pc, #616]	; (80016a8 <_Z12create_robotv+0x354>)
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff fa43 	bl	80008cc <_ZN10PinMeasureC1EP12GPIO_TypeDeft>

	PinControl mot6_ina = PinControl(MOTOR6_INA_GPIO_Port, MOTOR6_INA_Pin);
 8001446:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800144a:	2204      	movs	r2, #4
 800144c:	4996      	ldr	r1, [pc, #600]	; (80016a8 <_Z12create_robotv+0x354>)
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff f9f4 	bl	800083c <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinControl mot6_inb = PinControl(MOTOR6_INB_GPIO_Port, MOTOR6_INB_Pin);
 8001454:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8001458:	2208      	movs	r2, #8
 800145a:	4993      	ldr	r1, [pc, #588]	; (80016a8 <_Z12create_robotv+0x354>)
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff f9ed 	bl	800083c <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinMeasure mot6_end = PinMeasure(MOTOR6_END_GPIO_Port, MOTOR6_END_Pin);
 8001462:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8001466:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800146a:	498f      	ldr	r1, [pc, #572]	; (80016a8 <_Z12create_robotv+0x354>)
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff fa2d 	bl	80008cc <_ZN10PinMeasureC1EP12GPIO_TypeDeft>

	PinControl enable = PinControl(MOTORS_EN_GPIO_Port, MOTORS_EN_Pin);
 8001472:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001476:	2240      	movs	r2, #64	; 0x40
 8001478:	498b      	ldr	r1, [pc, #556]	; (80016a8 <_Z12create_robotv+0x354>)
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff f9de 	bl	800083c <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinControl toggle = PinControl(PIN_TOGGLE_GPIO_Port, PIN_TOGGLE_Pin);
 8001480:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001484:	2220      	movs	r2, #32
 8001486:	4988      	ldr	r1, [pc, #544]	; (80016a8 <_Z12create_robotv+0x354>)
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff f9d7 	bl	800083c <_ZN10PinControlC1EP12GPIO_TypeDeft>

	Motor motor1 = Motor(mot1_ina, mot1_inb, &htim1, 1, &htim2, mot1_end);
 800148e:	f507 75ae 	add.w	r5, r7, #348	; 0x15c
 8001492:	ac08      	add	r4, sp, #32
 8001494:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8001498:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800149a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800149e:	4b83      	ldr	r3, [pc, #524]	; (80016ac <_Z12create_robotv+0x358>)
 80014a0:	9307      	str	r3, [sp, #28]
 80014a2:	2301      	movs	r3, #1
 80014a4:	9306      	str	r3, [sp, #24]
 80014a6:	4b82      	ldr	r3, [pc, #520]	; (80016b0 <_Z12create_robotv+0x35c>)
 80014a8:	9305      	str	r3, [sp, #20]
 80014aa:	ac01      	add	r4, sp, #4
 80014ac:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 80014b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80014b6:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 80014ba:	9300      	str	r3, [sp, #0]
 80014bc:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80014c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014c2:	4628      	mov	r0, r5
 80014c4:	f7ff fa7e 	bl	80009c4 <_ZN5MotorC1E10PinControlS0_P17TIM_HandleTypeDefhS2_10PinMeasure>
	Motor motor2 = Motor(mot2_ina, mot2_inb, &htim1, 2, &htim3, mot2_end);
 80014c8:	f507 758c 	add.w	r5, r7, #280	; 0x118
 80014cc:	ac08      	add	r4, sp, #32
 80014ce:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80014d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80014d8:	4b76      	ldr	r3, [pc, #472]	; (80016b4 <_Z12create_robotv+0x360>)
 80014da:	9307      	str	r3, [sp, #28]
 80014dc:	2302      	movs	r3, #2
 80014de:	9306      	str	r3, [sp, #24]
 80014e0:	4b73      	ldr	r3, [pc, #460]	; (80016b0 <_Z12create_robotv+0x35c>)
 80014e2:	9305      	str	r3, [sp, #20]
 80014e4:	ac01      	add	r4, sp, #4
 80014e6:	f507 7324 	add.w	r3, r7, #656	; 0x290
 80014ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80014f0:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 80014f4:	9300      	str	r3, [sp, #0]
 80014f6:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80014fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014fc:	4628      	mov	r0, r5
 80014fe:	f7ff fa61 	bl	80009c4 <_ZN5MotorC1E10PinControlS0_P17TIM_HandleTypeDefhS2_10PinMeasure>
	Motor motor3 = Motor(mot3_ina, mot3_inb, &htim1, 3, &htim4, mot3_end);
 8001502:	f107 05d4 	add.w	r5, r7, #212	; 0xd4
 8001506:	ac08      	add	r4, sp, #32
 8001508:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800150c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800150e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001512:	4b69      	ldr	r3, [pc, #420]	; (80016b8 <_Z12create_robotv+0x364>)
 8001514:	9307      	str	r3, [sp, #28]
 8001516:	2303      	movs	r3, #3
 8001518:	9306      	str	r3, [sp, #24]
 800151a:	4b65      	ldr	r3, [pc, #404]	; (80016b0 <_Z12create_robotv+0x35c>)
 800151c:	9305      	str	r3, [sp, #20]
 800151e:	ac01      	add	r4, sp, #4
 8001520:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001524:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001526:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800152a:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 800152e:	9300      	str	r3, [sp, #0]
 8001530:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8001534:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001536:	4628      	mov	r0, r5
 8001538:	f7ff fa44 	bl	80009c4 <_ZN5MotorC1E10PinControlS0_P17TIM_HandleTypeDefhS2_10PinMeasure>
	Motor motor4 = Motor(mot4_ina, mot4_inb, &htim1, 4, &htim5, mot4_end);
 800153c:	f107 0590 	add.w	r5, r7, #144	; 0x90
 8001540:	ac08      	add	r4, sp, #32
 8001542:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001546:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001548:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800154c:	4b5b      	ldr	r3, [pc, #364]	; (80016bc <_Z12create_robotv+0x368>)
 800154e:	9307      	str	r3, [sp, #28]
 8001550:	2304      	movs	r3, #4
 8001552:	9306      	str	r3, [sp, #24]
 8001554:	4b56      	ldr	r3, [pc, #344]	; (80016b0 <_Z12create_robotv+0x35c>)
 8001556:	9305      	str	r3, [sp, #20]
 8001558:	ac01      	add	r4, sp, #4
 800155a:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800155e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001560:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001564:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8001568:	9300      	str	r3, [sp, #0]
 800156a:	f507 7310 	add.w	r3, r7, #576	; 0x240
 800156e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001570:	4628      	mov	r0, r5
 8001572:	f7ff fa27 	bl	80009c4 <_ZN5MotorC1E10PinControlS0_P17TIM_HandleTypeDefhS2_10PinMeasure>
	Motor motor5 = Motor(mot5_ina, mot5_inb, &htim9, 1, &htim8, mot5_end);
 8001576:	f107 054c 	add.w	r5, r7, #76	; 0x4c
 800157a:	ac08      	add	r4, sp, #32
 800157c:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8001580:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001582:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001586:	4b4e      	ldr	r3, [pc, #312]	; (80016c0 <_Z12create_robotv+0x36c>)
 8001588:	9307      	str	r3, [sp, #28]
 800158a:	2301      	movs	r3, #1
 800158c:	9306      	str	r3, [sp, #24]
 800158e:	4b4d      	ldr	r3, [pc, #308]	; (80016c4 <_Z12create_robotv+0x370>)
 8001590:	9305      	str	r3, [sp, #20]
 8001592:	ac01      	add	r4, sp, #4
 8001594:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001598:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800159a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800159e:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80015a2:	9300      	str	r3, [sp, #0]
 80015a4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80015a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015aa:	4628      	mov	r0, r5
 80015ac:	f7ff fa0a 	bl	80009c4 <_ZN5MotorC1E10PinControlS0_P17TIM_HandleTypeDefhS2_10PinMeasure>
	Motor motor6 = Motor(mot6_ina, mot6_inb, &htim9, 2, 		mot6_end);
 80015b0:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 80015b4:	f5a3 7484 	sub.w	r4, r3, #264	; 0x108
 80015b8:	f107 0608 	add.w	r6, r7, #8
 80015bc:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 80015c0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80015c4:	ad07      	add	r5, sp, #28
 80015c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015c8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80015cc:	2302      	movs	r3, #2
 80015ce:	9306      	str	r3, [sp, #24]
 80015d0:	4b3c      	ldr	r3, [pc, #240]	; (80016c4 <_Z12create_robotv+0x370>)
 80015d2:	9305      	str	r3, [sp, #20]
 80015d4:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 80015d8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80015dc:	ad01      	add	r5, sp, #4
 80015de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015e0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80015e4:	68e3      	ldr	r3, [r4, #12]
 80015e6:	9300      	str	r3, [sp, #0]
 80015e8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80015ec:	4630      	mov	r0, r6
 80015ee:	f7ff f9b3 	bl	8000958 <_ZN5MotorC1E10PinControlS0_P17TIM_HandleTypeDefh10PinMeasure>

	Motor** motors = (Motor**) malloc(sizeof(Motor*)*6);
 80015f2:	2018      	movs	r0, #24
 80015f4:	f01a fd2e 	bl	801c054 <malloc>
 80015f8:	4603      	mov	r3, r0
 80015fa:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
	//Motor** motors = (Motor**) malloc(sizeof(Motor*)*1);
	float* encs_div = (float*) malloc(sizeof(float)*6);
 80015fe:	2018      	movs	r0, #24
 8001600:	f01a fd28 	bl	801c054 <malloc>
 8001604:	4603      	mov	r3, r0
 8001606:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
	//float* encs_div = (float*) malloc(sizeof(float)*1);

	motors[0] = &motor1; motors[1] = &motor2; motors[2] = &motor3; motors[3] = &motor4; motors[4] = &motor5; motors[5] = &motor6;
 800160a:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 800160e:	f507 72ae 	add.w	r2, r7, #348	; 0x15c
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8001618:	3304      	adds	r3, #4
 800161a:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8001624:	3308      	adds	r3, #8
 8001626:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8001630:	330c      	adds	r3, #12
 8001632:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 800163c:	3310      	adds	r3, #16
 800163e:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8001648:	3314      	adds	r3, #20
 800164a:	f107 0208 	add.w	r2, r7, #8
 800164e:	601a      	str	r2, [r3, #0]
	encs_div[0] = 1; encs_div[1] = 1; encs_div[2] = 1; encs_div[3] = 1; encs_div[4] = 1; encs_div[5] = 1;
 8001650:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8001654:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800165e:	3304      	adds	r3, #4
 8001660:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001664:	601a      	str	r2, [r3, #0]
 8001666:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800166a:	3308      	adds	r3, #8
 800166c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001670:	601a      	str	r2, [r3, #0]
 8001672:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8001676:	330c      	adds	r3, #12
 8001678:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800167c:	601a      	str	r2, [r3, #0]
 800167e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8001682:	3310      	adds	r3, #16
 8001684:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001688:	601a      	str	r2, [r3, #0]
 800168a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800168e:	3314      	adds	r3, #20
 8001690:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001694:	601a      	str	r2, [r3, #0]
	Robot myRobot = Robot(enable, toggle, TS, 6, motors, encs_div);
 8001696:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 800169a:	f5a3 749c 	sub.w	r4, r3, #312	; 0x138
 800169e:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 80016a2:	e011      	b.n	80016c8 <_Z12create_robotv+0x374>
 80016a4:	40020c00 	.word	0x40020c00
 80016a8:	40021800 	.word	0x40021800
 80016ac:	20006718 	.word	0x20006718
 80016b0:	200066cc 	.word	0x200066cc
 80016b4:	20006764 	.word	0x20006764
 80016b8:	200067b0 	.word	0x200067b0
 80016bc:	200067fc 	.word	0x200067fc
 80016c0:	20006848 	.word	0x20006848
 80016c4:	20006894 	.word	0x20006894
 80016c8:	f5a3 7639 	sub.w	r6, r3, #740	; 0x2e4
 80016cc:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80016d0:	9308      	str	r3, [sp, #32]
 80016d2:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80016d6:	9307      	str	r3, [sp, #28]
 80016d8:	2306      	movs	r3, #6
 80016da:	9306      	str	r3, [sp, #24]
 80016dc:	230a      	movs	r3, #10
 80016de:	9305      	str	r3, [sp, #20]
 80016e0:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 80016e4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80016e8:	ad01      	add	r5, sp, #4
 80016ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016ec:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80016f0:	68e3      	ldr	r3, [r4, #12]
 80016f2:	9300      	str	r3, [sp, #0]
 80016f4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80016f8:	6830      	ldr	r0, [r6, #0]
 80016fa:	f7ff faa7 	bl	8000c4c <_ZN5RobotC1E10PinControlS0_mhPP5MotorPf>
	//Robot myRobot = Robot(enable, toggle, TS, 1, motors, encs_div);

	return myRobot;
 80016fe:	bf00      	nop
}
 8001700:	f107 0308 	add.w	r3, r7, #8
 8001704:	4618      	mov	r0, r3
 8001706:	f7ff f993 	bl	8000a30 <_ZN5MotorD1Ev>
 800170a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800170e:	4618      	mov	r0, r3
 8001710:	f7ff f98e 	bl	8000a30 <_ZN5MotorD1Ev>
 8001714:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff f989 	bl	8000a30 <_ZN5MotorD1Ev>
 800171e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001722:	4618      	mov	r0, r3
 8001724:	f7ff f984 	bl	8000a30 <_ZN5MotorD1Ev>
 8001728:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff f97f 	bl	8000a30 <_ZN5MotorD1Ev>
 8001732:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8001736:	4618      	mov	r0, r3
 8001738:	f7ff f97a 	bl	8000a30 <_ZN5MotorD1Ev>
	return myRobot;
 800173c:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 8001740:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 8001744:	f507 723a 	add.w	r2, r7, #744	; 0x2e8
 8001748:	f5a2 7239 	sub.w	r2, r2, #740	; 0x2e4
 800174c:	6812      	ldr	r2, [r2, #0]
 800174e:	601a      	str	r2, [r3, #0]
}
 8001750:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 8001754:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 8001758:	6818      	ldr	r0, [r3, #0]
 800175a:	f507 773b 	add.w	r7, r7, #748	; 0x2ec
 800175e:	46bd      	mov	sp, r7
 8001760:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001762:	bf00      	nop

08001764 <_ZSt3maxIsERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	f9b3 3000 	ldrsh.w	r3, [r3]
 800177a:	429a      	cmp	r2, r3
 800177c:	da01      	bge.n	8001782 <_ZSt3maxIsERKT_S2_S2_+0x1e>
	return __b;
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	e000      	b.n	8001784 <_ZSt3maxIsERKT_S2_S2_+0x20>
      return __a;
 8001782:	687b      	ldr	r3, [r7, #4]
    }
 8001784:	4618      	mov	r0, r3
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <_ZSt3minIsERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	f9b3 2000 	ldrsh.w	r2, [r3]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017a6:	429a      	cmp	r2, r3
 80017a8:	da01      	bge.n	80017ae <_ZSt3minIsERKT_S2_S2_+0x1e>
	return __b;
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	e000      	b.n	80017b0 <_ZSt3minIsERKT_S2_S2_+0x20>
      return __a;
 80017ae:	687b      	ldr	r3, [r7, #4]
    }
 80017b0:	4618      	mov	r0, r3
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <_ZSt3maxIfERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	ed93 7a00 	vldr	s14, [r3]
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	edd3 7a00 	vldr	s15, [r3]
 80017d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017da:	d501      	bpl.n	80017e0 <_ZSt3maxIfERKT_S2_S2_+0x24>
	return __b;
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	e000      	b.n	80017e2 <_ZSt3maxIfERKT_S2_S2_+0x26>
      return __a;
 80017e0:	687b      	ldr	r3, [r7, #4]
    }
 80017e2:	4618      	mov	r0, r3
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr

080017ee <_ZSt3minIfERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 80017ee:	b480      	push	{r7}
 80017f0:	b083      	sub	sp, #12
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
 80017f6:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	ed93 7a00 	vldr	s14, [r3]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	edd3 7a00 	vldr	s15, [r3]
 8001804:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800180c:	d501      	bpl.n	8001812 <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	e000      	b.n	8001814 <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 8001812:	687b      	ldr	r3, [r7, #4]
    }
 8001814:	4618      	mov	r0, r3
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <_Z41__static_initialization_and_destruction_0ii>:

Robot ScorBot = create_robot();
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2b01      	cmp	r3, #1
 800182e:	d108      	bne.n	8001842 <_Z41__static_initialization_and_destruction_0ii+0x22>
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001836:	4293      	cmp	r3, r2
 8001838:	d103      	bne.n	8001842 <_Z41__static_initialization_and_destruction_0ii+0x22>
 800183a:	4b09      	ldr	r3, [pc, #36]	; (8001860 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff fd89 	bl	8001354 <_Z12create_robotv>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d107      	bne.n	8001858 <_Z41__static_initialization_and_destruction_0ii+0x38>
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800184e:	4293      	cmp	r3, r2
 8001850:	d102      	bne.n	8001858 <_Z41__static_initialization_and_destruction_0ii+0x38>
 8001852:	4803      	ldr	r0, [pc, #12]	; (8001860 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001854:	f7ff fa8a 	bl	8000d6c <_ZN5RobotD1Ev>
 8001858:	bf00      	nop
 800185a:	3708      	adds	r7, #8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	200021fc 	.word	0x200021fc

08001864 <_GLOBAL__sub_I__ZN10PinControlC2Ev>:
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
 8001868:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800186c:	2001      	movs	r0, #1
 800186e:	f7ff ffd7 	bl	8001820 <_Z41__static_initialization_and_destruction_0ii>
 8001872:	bd80      	pop	{r7, pc}

08001874 <_GLOBAL__sub_D__ZN10PinControlC2Ev>:
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
 8001878:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800187c:	2000      	movs	r0, #0
 800187e:	f7ff ffcf 	bl	8001820 <_Z41__static_initialization_and_destruction_0ii>
 8001882:	bd80      	pop	{r7, pc}

08001884 <_ZSt3expf>:
  using ::exp;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  exp(float __x)
  { return __builtin_expf(__x); }
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	ed87 0a01 	vstr	s0, [r7, #4]
 800188e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001892:	f01a fadd 	bl	801be50 <expf>
 8001896:	eef0 7a40 	vmov.f32	s15, s0
 800189a:	eeb0 0a67 	vmov.f32	s0, s15
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <_ZN3PID4initEfffb>:


// PID

void PID::init(float ts, float pole, float sat, bool bumpless)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b086      	sub	sp, #24
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6178      	str	r0, [r7, #20]
 80018ac:	ed87 0a04 	vstr	s0, [r7, #16]
 80018b0:	edc7 0a03 	vstr	s1, [r7, #12]
 80018b4:	ed87 1a02 	vstr	s2, [r7, #8]
 80018b8:	460b      	mov	r3, r1
 80018ba:	71fb      	strb	r3, [r7, #7]
  this->ts = ts;
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	693a      	ldr	r2, [r7, #16]
 80018c0:	601a      	str	r2, [r3, #0]
  this->pole = pole;
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	68fa      	ldr	r2, [r7, #12]
 80018c6:	605a      	str	r2, [r3, #4]
  this->sat = sat;
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	68ba      	ldr	r2, [r7, #8]
 80018cc:	609a      	str	r2, [r3, #8]
  this->bumpless = bumpless;
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	79fa      	ldrb	r2, [r7, #7]
 80018d2:	731a      	strb	r2, [r3, #12]

  if(pole > 0)
 80018d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80018d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018e0:	dd2d      	ble.n	800193e <_ZN3PID4initEfffb+0x9a>
  {
    A = exp(-pole*ts);
 80018e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80018e6:	eeb1 7a67 	vneg.f32	s14, s15
 80018ea:	edd7 7a04 	vldr	s15, [r7, #16]
 80018ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018f2:	eeb0 0a67 	vmov.f32	s0, s15
 80018f6:	f7ff ffc5 	bl	8001884 <_ZSt3expf>
 80018fa:	eef0 7a40 	vmov.f32	s15, s0
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    B = (1-A)/pole;
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800190a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800190e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001912:	ed97 7a03 	vldr	s14, [r7, #12]
 8001916:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    C = -pole*pole;
 8001920:	edd7 7a03 	vldr	s15, [r7, #12]
 8001924:	eeb1 7a67 	vneg.f32	s14, s15
 8001928:	edd7 7a03 	vldr	s15, [r7, #12]
 800192c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
    D = pole;
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	68fa      	ldr	r2, [r7, #12]
 800193a:	635a      	str	r2, [r3, #52]	; 0x34
 800193c:	e019      	b.n	8001972 <_ZN3PID4initEfffb+0xce>
  }
  else
  {
    A = 0;
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	f04f 0200 	mov.w	r2, #0
 8001944:	629a      	str	r2, [r3, #40]	; 0x28
    B = 1;
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800194c:	62da      	str	r2, [r3, #44]	; 0x2c
    C = -1/ts;
 800194e:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 8001952:	ed97 7a04 	vldr	s14, [r7, #16]
 8001956:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
    D = 1/ts;
 8001960:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001964:	ed97 7a04 	vldr	s14, [r7, #16]
 8001968:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
  }

  apply_saturation();
 8001972:	6978      	ldr	r0, [r7, #20]
 8001974:	f000 f926 	bl	8001bc4 <_ZN3PID16apply_saturationEv>
}
 8001978:	bf00      	nop
 800197a:	3718      	adds	r7, #24
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}

08001980 <_ZN3PID5setupEfff>:

void PID::setup(float kp, float ki, float kd)
{
 8001980:	b480      	push	{r7}
 8001982:	b085      	sub	sp, #20
 8001984:	af00      	add	r7, sp, #0
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	ed87 0a02 	vstr	s0, [r7, #8]
 800198c:	edc7 0a01 	vstr	s1, [r7, #4]
 8001990:	ed87 1a00 	vstr	s2, [r7]
  this->kp = kp;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	68ba      	ldr	r2, [r7, #8]
 8001998:	611a      	str	r2, [r3, #16]
  this->ki = ki;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	615a      	str	r2, [r3, #20]
  this->kd = kd;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	683a      	ldr	r2, [r7, #0]
 80019a4:	619a      	str	r2, [r3, #24]
}
 80019a6:	bf00      	nop
 80019a8:	3714      	adds	r7, #20
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
	...

080019b4 <_ZN3PID5resetEv>:

void PID::reset()
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  reset(0.0, 0.0);
 80019bc:	eddf 0a05 	vldr	s1, [pc, #20]	; 80019d4 <_ZN3PID5resetEv+0x20>
 80019c0:	ed9f 0a04 	vldr	s0, [pc, #16]	; 80019d4 <_ZN3PID5resetEv+0x20>
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f000 f807 	bl	80019d8 <_ZN3PID5resetEff>
}
 80019ca:	bf00      	nop
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	00000000 	.word	0x00000000

080019d8 <_ZN3PID5resetEff>:

void PID::reset(float xi, float xd)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	ed87 0a02 	vstr	s0, [r7, #8]
 80019e4:	edc7 0a01 	vstr	s1, [r7, #4]
  this-> xi = xi;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	68ba      	ldr	r2, [r7, #8]
 80019ec:	621a      	str	r2, [r3, #32]
  this-> xd = xd;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	625a      	str	r2, [r3, #36]	; 0x24

  apply_saturation();
 80019f4:	68f8      	ldr	r0, [r7, #12]
 80019f6:	f000 f8e5 	bl	8001bc4 <_ZN3PID16apply_saturationEv>
}
 80019fa:	bf00      	nop
 80019fc:	3710      	adds	r7, #16
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <_ZN3PID5inputEf>:

void PID::input(float e)
{
 8001a02:	b480      	push	{r7}
 8001a04:	b083      	sub	sp, #12
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
 8001a0a:	ed87 0a00 	vstr	s0, [r7]
  this->e = e;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	683a      	ldr	r2, [r7, #0]
 8001a12:	61da      	str	r2, [r3, #28]
}
 8001a14:	bf00      	nop
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <_ZN3PID4stepEv>:

void PID::step()
{  
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  xi = xi + (bumpless ? ki*ts*e : ts*e);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	ed93 7a08 	vldr	s14, [r3, #32]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	7b1b      	ldrb	r3, [r3, #12]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d00d      	beq.n	8001a52 <_ZN3PID4stepEv+0x32>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	edd3 6a05 	vldr	s13, [r3, #20]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	edd3 7a00 	vldr	s15, [r3]
 8001a42:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	edd3 7a07 	vldr	s15, [r3, #28]
 8001a4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a50:	e007      	b.n	8001a62 <_ZN3PID4stepEv+0x42>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	edd3 6a00 	vldr	s13, [r3]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	edd3 7a07 	vldr	s15, [r3, #28]
 8001a5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a62:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	edc3 7a08 	vstr	s15, [r3, #32]
  xd = A*xd + (bumpless ? kd*B*e : B*e);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001a78:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	7b1b      	ldrb	r3, [r3, #12]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d00d      	beq.n	8001aa0 <_ZN3PID4stepEv+0x80>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	edd3 6a06 	vldr	s13, [r3, #24]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001a90:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	edd3 7a07 	vldr	s15, [r3, #28]
 8001a9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a9e:	e007      	b.n	8001ab0 <_ZN3PID4stepEv+0x90>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	edd3 7a07 	vldr	s15, [r3, #28]
 8001aac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ab0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

  apply_saturation();
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f000 f882 	bl	8001bc4 <_ZN3PID16apply_saturationEv>
}
 8001ac0:	bf00      	nop
 8001ac2:	3708      	adds	r7, #8
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <_ZN3PID6outputEv>:

float PID::output()
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b085      	sub	sp, #20
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  float u;

  if(bumpless) u = (kp + kd*D) * e + xi + C*xd;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	7b1b      	ldrb	r3, [r3, #12]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d023      	beq.n	8001b20 <_ZN3PID6outputEv+0x58>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	ed93 7a04 	vldr	s14, [r3, #16]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	edd3 6a06 	vldr	s13, [r3, #24]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001aea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001aee:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	edd3 7a07 	vldr	s15, [r3, #28]
 8001af8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	edd3 7a08 	vldr	s15, [r3, #32]
 8001b02:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001b12:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b1a:	edc7 7a03 	vstr	s15, [r7, #12]
 8001b1e:	e02c      	b.n	8001b7a <_ZN3PID6outputEv+0xb2>
  else u = (kp + kd*D) * e + ki*xi + kd*C*xd;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	ed93 7a04 	vldr	s14, [r3, #16]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	edd3 6a06 	vldr	s13, [r3, #24]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001b32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b36:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	edd3 7a07 	vldr	s15, [r3, #28]
 8001b40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	edd3 6a05 	vldr	s13, [r3, #20]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	edd3 7a08 	vldr	s15, [r3, #32]
 8001b50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b54:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	edd3 6a06 	vldr	s13, [r3, #24]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001b64:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001b6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b76:	edc7 7a03 	vstr	s15, [r7, #12]

  return u;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	ee07 3a90 	vmov	s15, r3
}
 8001b80:	eeb0 0a67 	vmov.f32	s0, s15
 8001b84:	3714      	adds	r7, #20
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr

08001b8e <_ZN3PID6evolveEf>:

float PID::evolve(float e)
{ 
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b084      	sub	sp, #16
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
 8001b96:	ed87 0a00 	vstr	s0, [r7]
  float u;
  
  input(e);
 8001b9a:	ed97 0a00 	vldr	s0, [r7]
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f7ff ff2f 	bl	8001a02 <_ZN3PID5inputEf>
  u = output();
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f7ff ff8f 	bl	8001ac8 <_ZN3PID6outputEv>
 8001baa:	ed87 0a03 	vstr	s0, [r7, #12]
  step();
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f7ff ff36 	bl	8001a20 <_ZN3PID4stepEv>

  return u;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	ee07 3a90 	vmov	s15, r3
}
 8001bba:	eeb0 0a67 	vmov.f32	s0, s15
 8001bbe:	3710      	adds	r7, #16
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <_ZN3PID16apply_saturationEv>:

void PID::apply_saturation()
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  if(sat > 0)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	edd3 7a02 	vldr	s15, [r3, #8]
 8001bd2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bda:	dc00      	bgt.n	8001bde <_ZN3PID16apply_saturationEv+0x1a>
  {
    xi = xi > +sat ? +sat : xi;
    xi = xi < -sat ? -sat : xi;
  }
}
 8001bdc:	e02a      	b.n	8001c34 <_ZN3PID16apply_saturationEv+0x70>
    xi = xi > +sat ? +sat : xi;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	ed93 7a08 	vldr	s14, [r3, #32]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	edd3 7a02 	vldr	s15, [r3, #8]
 8001bea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bf2:	dd02      	ble.n	8001bfa <_ZN3PID16apply_saturationEv+0x36>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	e001      	b.n	8001bfe <_ZN3PID16apply_saturationEv+0x3a>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6a1b      	ldr	r3, [r3, #32]
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	6213      	str	r3, [r2, #32]
    xi = xi < -sat ? -sat : xi;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	ed93 7a08 	vldr	s14, [r3, #32]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	edd3 7a02 	vldr	s15, [r3, #8]
 8001c0e:	eef1 7a67 	vneg.f32	s15, s15
 8001c12:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c1a:	d505      	bpl.n	8001c28 <_ZN3PID16apply_saturationEv+0x64>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001c22:	eef1 7a67 	vneg.f32	s15, s15
 8001c26:	e002      	b.n	8001c2e <_ZN3PID16apply_saturationEv+0x6a>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	edd3 7a08 	vldr	s15, [r3, #32]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	edc3 7a08 	vstr	s15, [r3, #32]
}
 8001c34:	bf00      	nop
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr

08001c40 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b08a      	sub	sp, #40	; 0x28
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8001c4c:	f008 fa88 	bl	800a160 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8001c50:	4b5b      	ldr	r3, [pc, #364]	; (8001dc0 <pvPortMallocMicroROS+0x180>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d101      	bne.n	8001c5c <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8001c58:	f000 f98a 	bl	8001f70 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001c5c:	4b59      	ldr	r3, [pc, #356]	; (8001dc4 <pvPortMallocMicroROS+0x184>)
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	4013      	ands	r3, r2
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	f040 8092 	bne.w	8001d8e <pvPortMallocMicroROS+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d01f      	beq.n	8001cb0 <pvPortMallocMicroROS+0x70>
			{
				xWantedSize += xHeapStructSize;
 8001c70:	2208      	movs	r2, #8
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4413      	add	r3, r2
 8001c76:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f003 0307 	and.w	r3, r3, #7
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d016      	beq.n	8001cb0 <pvPortMallocMicroROS+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f023 0307 	bic.w	r3, r3, #7
 8001c88:	3308      	adds	r3, #8
 8001c8a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f003 0307 	and.w	r3, r3, #7
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d00c      	beq.n	8001cb0 <pvPortMallocMicroROS+0x70>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c9a:	b672      	cpsid	i
 8001c9c:	f383 8811 	msr	BASEPRI, r3
 8001ca0:	f3bf 8f6f 	isb	sy
 8001ca4:	f3bf 8f4f 	dsb	sy
 8001ca8:	b662      	cpsie	i
 8001caa:	617b      	str	r3, [r7, #20]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001cac:	bf00      	nop
 8001cae:	e7fe      	b.n	8001cae <pvPortMallocMicroROS+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d06b      	beq.n	8001d8e <pvPortMallocMicroROS+0x14e>
 8001cb6:	4b44      	ldr	r3, [pc, #272]	; (8001dc8 <pvPortMallocMicroROS+0x188>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d866      	bhi.n	8001d8e <pvPortMallocMicroROS+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8001cc0:	4b42      	ldr	r3, [pc, #264]	; (8001dcc <pvPortMallocMicroROS+0x18c>)
 8001cc2:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8001cc4:	4b41      	ldr	r3, [pc, #260]	; (8001dcc <pvPortMallocMicroROS+0x18c>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001cca:	e004      	b.n	8001cd6 <pvPortMallocMicroROS+0x96>
				{
					pxPreviousBlock = pxBlock;
 8001ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cce:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8001cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d903      	bls.n	8001ce8 <pvPortMallocMicroROS+0xa8>
 8001ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d1f1      	bne.n	8001ccc <pvPortMallocMicroROS+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001ce8:	4b35      	ldr	r3, [pc, #212]	; (8001dc0 <pvPortMallocMicroROS+0x180>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d04d      	beq.n	8001d8e <pvPortMallocMicroROS+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001cf2:	6a3b      	ldr	r3, [r7, #32]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2208      	movs	r2, #8
 8001cf8:	4413      	add	r3, r2
 8001cfa:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	6a3b      	ldr	r3, [r7, #32]
 8001d02:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d06:	685a      	ldr	r2, [r3, #4]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	1ad2      	subs	r2, r2, r3
 8001d0c:	2308      	movs	r3, #8
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d921      	bls.n	8001d58 <pvPortMallocMicroROS+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001d14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4413      	add	r3, r2
 8001d1a:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	f003 0307 	and.w	r3, r3, #7
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d00c      	beq.n	8001d40 <pvPortMallocMicroROS+0x100>
	__asm volatile
 8001d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d2a:	b672      	cpsid	i
 8001d2c:	f383 8811 	msr	BASEPRI, r3
 8001d30:	f3bf 8f6f 	isb	sy
 8001d34:	f3bf 8f4f 	dsb	sy
 8001d38:	b662      	cpsie	i
 8001d3a:	613b      	str	r3, [r7, #16]
}
 8001d3c:	bf00      	nop
 8001d3e:	e7fe      	b.n	8001d3e <pvPortMallocMicroROS+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d42:	685a      	ldr	r2, [r3, #4]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	1ad2      	subs	r2, r2, r3
 8001d48:	69bb      	ldr	r3, [r7, #24]
 8001d4a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001d52:	69b8      	ldr	r0, [r7, #24]
 8001d54:	f000 f96e 	bl	8002034 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001d58:	4b1b      	ldr	r3, [pc, #108]	; (8001dc8 <pvPortMallocMicroROS+0x188>)
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	4a19      	ldr	r2, [pc, #100]	; (8001dc8 <pvPortMallocMicroROS+0x188>)
 8001d64:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001d66:	4b18      	ldr	r3, [pc, #96]	; (8001dc8 <pvPortMallocMicroROS+0x188>)
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	4b19      	ldr	r3, [pc, #100]	; (8001dd0 <pvPortMallocMicroROS+0x190>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d203      	bcs.n	8001d7a <pvPortMallocMicroROS+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001d72:	4b15      	ldr	r3, [pc, #84]	; (8001dc8 <pvPortMallocMicroROS+0x188>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a16      	ldr	r2, [pc, #88]	; (8001dd0 <pvPortMallocMicroROS+0x190>)
 8001d78:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7c:	685a      	ldr	r2, [r3, #4]
 8001d7e:	4b11      	ldr	r3, [pc, #68]	; (8001dc4 <pvPortMallocMicroROS+0x184>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	431a      	orrs	r2, r3
 8001d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d86:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001d8e:	f008 f9f5 	bl	800a17c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	f003 0307 	and.w	r3, r3, #7
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d00c      	beq.n	8001db6 <pvPortMallocMicroROS+0x176>
	__asm volatile
 8001d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001da0:	b672      	cpsid	i
 8001da2:	f383 8811 	msr	BASEPRI, r3
 8001da6:	f3bf 8f6f 	isb	sy
 8001daa:	f3bf 8f4f 	dsb	sy
 8001dae:	b662      	cpsie	i
 8001db0:	60fb      	str	r3, [r7, #12]
}
 8001db2:	bf00      	nop
 8001db4:	e7fe      	b.n	8001db4 <pvPortMallocMicroROS+0x174>
	return pvReturn;
 8001db6:	69fb      	ldr	r3, [r7, #28]
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3728      	adds	r7, #40	; 0x28
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	20005e4c 	.word	0x20005e4c
 8001dc4:	20005e58 	.word	0x20005e58
 8001dc8:	20005e50 	.word	0x20005e50
 8001dcc:	20005e44 	.word	0x20005e44
 8001dd0:	20005e54 	.word	0x20005e54

08001dd4 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d04c      	beq.n	8001e80 <vPortFreeMicroROS+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8001de6:	2308      	movs	r3, #8
 8001de8:	425b      	negs	r3, r3
 8001dea:	697a      	ldr	r2, [r7, #20]
 8001dec:	4413      	add	r3, r2
 8001dee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	685a      	ldr	r2, [r3, #4]
 8001df8:	4b23      	ldr	r3, [pc, #140]	; (8001e88 <vPortFreeMicroROS+0xb4>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d10c      	bne.n	8001e1c <vPortFreeMicroROS+0x48>
	__asm volatile
 8001e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e06:	b672      	cpsid	i
 8001e08:	f383 8811 	msr	BASEPRI, r3
 8001e0c:	f3bf 8f6f 	isb	sy
 8001e10:	f3bf 8f4f 	dsb	sy
 8001e14:	b662      	cpsie	i
 8001e16:	60fb      	str	r3, [r7, #12]
}
 8001e18:	bf00      	nop
 8001e1a:	e7fe      	b.n	8001e1a <vPortFreeMicroROS+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d00c      	beq.n	8001e3e <vPortFreeMicroROS+0x6a>
	__asm volatile
 8001e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e28:	b672      	cpsid	i
 8001e2a:	f383 8811 	msr	BASEPRI, r3
 8001e2e:	f3bf 8f6f 	isb	sy
 8001e32:	f3bf 8f4f 	dsb	sy
 8001e36:	b662      	cpsie	i
 8001e38:	60bb      	str	r3, [r7, #8]
}
 8001e3a:	bf00      	nop
 8001e3c:	e7fe      	b.n	8001e3c <vPortFreeMicroROS+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	685a      	ldr	r2, [r3, #4]
 8001e42:	4b11      	ldr	r3, [pc, #68]	; (8001e88 <vPortFreeMicroROS+0xb4>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4013      	ands	r3, r2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d019      	beq.n	8001e80 <vPortFreeMicroROS+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d115      	bne.n	8001e80 <vPortFreeMicroROS+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	685a      	ldr	r2, [r3, #4]
 8001e58:	4b0b      	ldr	r3, [pc, #44]	; (8001e88 <vPortFreeMicroROS+0xb4>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	43db      	mvns	r3, r3
 8001e5e:	401a      	ands	r2, r3
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001e64:	f008 f97c 	bl	800a160 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	685a      	ldr	r2, [r3, #4]
 8001e6c:	4b07      	ldr	r3, [pc, #28]	; (8001e8c <vPortFreeMicroROS+0xb8>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4413      	add	r3, r2
 8001e72:	4a06      	ldr	r2, [pc, #24]	; (8001e8c <vPortFreeMicroROS+0xb8>)
 8001e74:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001e76:	6938      	ldr	r0, [r7, #16]
 8001e78:	f000 f8dc 	bl	8002034 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8001e7c:	f008 f97e 	bl	800a17c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001e80:	bf00      	nop
 8001e82:	3718      	adds	r7, #24
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	20005e58 	.word	0x20005e58
 8001e8c:	20005e50 	.word	0x20005e50

08001e90 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8001e90:	b480      	push	{r7}
 8001e92:	b087      	sub	sp, #28
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8001e9c:	2308      	movs	r3, #8
 8001e9e:	425b      	negs	r3, r3
 8001ea0:	697a      	ldr	r2, [r7, #20]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	685a      	ldr	r2, [r3, #4]
 8001eae:	4b06      	ldr	r3, [pc, #24]	; (8001ec8 <getBlockSize+0x38>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	43db      	mvns	r3, r3
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	60fb      	str	r3, [r7, #12]

	return count;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	371c      	adds	r7, #28
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	20005e58 	.word	0x20005e58

08001ecc <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001ed6:	f008 f943 	bl	800a160 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8001eda:	6838      	ldr	r0, [r7, #0]
 8001edc:	f7ff feb0 	bl	8001c40 <pvPortMallocMicroROS>
 8001ee0:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d017      	beq.n	8001f18 <pvPortReallocMicroROS+0x4c>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d014      	beq.n	8001f18 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f7ff ffce 	bl	8001e90 <getBlockSize>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2208      	movs	r2, #8
 8001ef8:	1a9b      	subs	r3, r3, r2
 8001efa:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8001efc:	683a      	ldr	r2, [r7, #0]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d201      	bcs.n	8001f08 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8001f08:	68fa      	ldr	r2, [r7, #12]
 8001f0a:	6879      	ldr	r1, [r7, #4]
 8001f0c:	68b8      	ldr	r0, [r7, #8]
 8001f0e:	f01a fd4a 	bl	801c9a6 <memcpy>

		vPortFreeMicroROS(pv);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f7ff ff5e 	bl	8001dd4 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8001f18:	f008 f930 	bl	800a17c <xTaskResumeAll>

	return newmem;
 8001f1c:	68bb      	ldr	r3, [r7, #8]
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3710      	adds	r7, #16
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}

08001f26 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8001f26:	b580      	push	{r7, lr}
 8001f28:	b086      	sub	sp, #24
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
 8001f2e:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001f30:	f008 f916 	bl	800a160 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	fb02 f303 	mul.w	r3, r2, r3
 8001f3c:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8001f3e:	6978      	ldr	r0, [r7, #20]
 8001f40:	f7ff fe7e 	bl	8001c40 <pvPortMallocMicroROS>
 8001f44:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	613b      	str	r3, [r7, #16]

  	while(count--)
 8001f4a:	e004      	b.n	8001f56 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	1c5a      	adds	r2, r3, #1
 8001f50:	613a      	str	r2, [r7, #16]
 8001f52:	2200      	movs	r2, #0
 8001f54:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	1e5a      	subs	r2, r3, #1
 8001f5a:	617a      	str	r2, [r7, #20]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d1f5      	bne.n	8001f4c <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8001f60:	f008 f90c 	bl	800a17c <xTaskResumeAll>
  	return mem;
 8001f64:	68fb      	ldr	r3, [r7, #12]
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3718      	adds	r7, #24
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
	...

08001f70 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001f70:	b480      	push	{r7}
 8001f72:	b085      	sub	sp, #20
 8001f74:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001f76:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001f7a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001f7c:	4b27      	ldr	r3, [pc, #156]	; (800201c <prvHeapInit+0xac>)
 8001f7e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f003 0307 	and.w	r3, r3, #7
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d00c      	beq.n	8001fa4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	3307      	adds	r3, #7
 8001f8e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	f023 0307 	bic.w	r3, r3, #7
 8001f96:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001f98:	68ba      	ldr	r2, [r7, #8]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	4a1f      	ldr	r2, [pc, #124]	; (800201c <prvHeapInit+0xac>)
 8001fa0:	4413      	add	r3, r2
 8001fa2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001fa8:	4a1d      	ldr	r2, [pc, #116]	; (8002020 <prvHeapInit+0xb0>)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001fae:	4b1c      	ldr	r3, [pc, #112]	; (8002020 <prvHeapInit+0xb0>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	68ba      	ldr	r2, [r7, #8]
 8001fb8:	4413      	add	r3, r2
 8001fba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001fbc:	2208      	movs	r2, #8
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	1a9b      	subs	r3, r3, r2
 8001fc2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	f023 0307 	bic.w	r3, r3, #7
 8001fca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	4a15      	ldr	r2, [pc, #84]	; (8002024 <prvHeapInit+0xb4>)
 8001fd0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001fd2:	4b14      	ldr	r3, [pc, #80]	; (8002024 <prvHeapInit+0xb4>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001fda:	4b12      	ldr	r3, [pc, #72]	; (8002024 <prvHeapInit+0xb4>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	68fa      	ldr	r2, [r7, #12]
 8001fea:	1ad2      	subs	r2, r2, r3
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001ff0:	4b0c      	ldr	r3, [pc, #48]	; (8002024 <prvHeapInit+0xb4>)
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	4a0a      	ldr	r2, [pc, #40]	; (8002028 <prvHeapInit+0xb8>)
 8001ffe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	4a09      	ldr	r2, [pc, #36]	; (800202c <prvHeapInit+0xbc>)
 8002006:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002008:	4b09      	ldr	r3, [pc, #36]	; (8002030 <prvHeapInit+0xc0>)
 800200a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800200e:	601a      	str	r2, [r3, #0]
}
 8002010:	bf00      	nop
 8002012:	3714      	adds	r7, #20
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr
 800201c:	20002244 	.word	0x20002244
 8002020:	20005e44 	.word	0x20005e44
 8002024:	20005e4c 	.word	0x20005e4c
 8002028:	20005e54 	.word	0x20005e54
 800202c:	20005e50 	.word	0x20005e50
 8002030:	20005e58 	.word	0x20005e58

08002034 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002034:	b480      	push	{r7}
 8002036:	b085      	sub	sp, #20
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800203c:	4b28      	ldr	r3, [pc, #160]	; (80020e0 <prvInsertBlockIntoFreeList+0xac>)
 800203e:	60fb      	str	r3, [r7, #12]
 8002040:	e002      	b.n	8002048 <prvInsertBlockIntoFreeList+0x14>
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	60fb      	str	r3, [r7, #12]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	429a      	cmp	r2, r3
 8002050:	d8f7      	bhi.n	8002042 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	68ba      	ldr	r2, [r7, #8]
 800205c:	4413      	add	r3, r2
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	429a      	cmp	r2, r3
 8002062:	d108      	bne.n	8002076 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	685a      	ldr	r2, [r3, #4]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	441a      	add	r2, r3
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	68ba      	ldr	r2, [r7, #8]
 8002080:	441a      	add	r2, r3
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	429a      	cmp	r2, r3
 8002088:	d118      	bne.n	80020bc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	4b15      	ldr	r3, [pc, #84]	; (80020e4 <prvInsertBlockIntoFreeList+0xb0>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	429a      	cmp	r2, r3
 8002094:	d00d      	beq.n	80020b2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685a      	ldr	r2, [r3, #4]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	441a      	add	r2, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	601a      	str	r2, [r3, #0]
 80020b0:	e008      	b.n	80020c4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80020b2:	4b0c      	ldr	r3, [pc, #48]	; (80020e4 <prvInsertBlockIntoFreeList+0xb0>)
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	601a      	str	r2, [r3, #0]
 80020ba:	e003      	b.n	80020c4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80020c4:	68fa      	ldr	r2, [r7, #12]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d002      	beq.n	80020d2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80020d2:	bf00      	nop
 80020d4:	3714      	adds	r7, #20
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	20005e44 	.word	0x20005e44
 80020e4:	20005e4c 	.word	0x20005e4c

080020e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80020ee:	4b10      	ldr	r3, [pc, #64]	; (8002130 <MX_DMA_Init+0x48>)
 80020f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f2:	4a0f      	ldr	r2, [pc, #60]	; (8002130 <MX_DMA_Init+0x48>)
 80020f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020f8:	6313      	str	r3, [r2, #48]	; 0x30
 80020fa:	4b0d      	ldr	r3, [pc, #52]	; (8002130 <MX_DMA_Init+0x48>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002102:	607b      	str	r3, [r7, #4]
 8002104:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8002106:	2200      	movs	r2, #0
 8002108:	2105      	movs	r1, #5
 800210a:	200c      	movs	r0, #12
 800210c:	f001 fea2 	bl	8003e54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002110:	200c      	movs	r0, #12
 8002112:	f001 febb 	bl	8003e8c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8002116:	2200      	movs	r2, #0
 8002118:	2105      	movs	r1, #5
 800211a:	200e      	movs	r0, #14
 800211c:	f001 fe9a 	bl	8003e54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002120:	200e      	movs	r0, #14
 8002122:	f001 feb3 	bl	8003e8c <HAL_NVIC_EnableIRQ>

}
 8002126:	bf00      	nop
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	40023800 	.word	0x40023800

08002134 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8002142:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8002144:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002148:	4904      	ldr	r1, [pc, #16]	; (800215c <cubemx_transport_open+0x28>)
 800214a:	68f8      	ldr	r0, [r7, #12]
 800214c:	f005 f89c 	bl	8007288 <HAL_UART_Receive_DMA>
    return true;
 8002150:	2301      	movs	r3, #1
}
 8002152:	4618      	mov	r0, r3
 8002154:	3710      	adds	r7, #16
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	20005e5c 	.word	0x20005e5c

08002160 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800216e:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8002170:	68f8      	ldr	r0, [r7, #12]
 8002172:	f005 f8cd 	bl	8007310 <HAL_UART_DMAStop>
    return true;
 8002176:	2301      	movs	r3, #1
}
 8002178:	4618      	mov	r0, r3
 800217a:	3710      	adds	r7, #16
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}

08002180 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, const uint8_t * buf, size_t len, uint8_t * err){
 8002180:	b580      	push	{r7, lr}
 8002182:	b086      	sub	sp, #24
 8002184:	af00      	add	r7, sp, #0
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	60b9      	str	r1, [r7, #8]
 800218a:	607a      	str	r2, [r7, #4]
 800218c:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8002194:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800219a:	2b20      	cmp	r3, #32
 800219c:	d11a      	bne.n	80021d4 <cubemx_transport_write+0x54>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	461a      	mov	r2, r3
 80021a4:	68b9      	ldr	r1, [r7, #8]
 80021a6:	6978      	ldr	r0, [r7, #20]
 80021a8:	f004 fff2 	bl	8007190 <HAL_UART_Transmit_DMA>
 80021ac:	4603      	mov	r3, r0
 80021ae:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 80021b0:	e002      	b.n	80021b8 <cubemx_transport_write+0x38>
            osDelay(1);
 80021b2:	2001      	movs	r0, #1
 80021b4:	f006 ff4a 	bl	800904c <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 80021b8:	7cfb      	ldrb	r3, [r7, #19]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d103      	bne.n	80021c6 <cubemx_transport_write+0x46>
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021c2:	2b20      	cmp	r3, #32
 80021c4:	d1f5      	bne.n	80021b2 <cubemx_transport_write+0x32>
        }

        return (ret == HAL_OK) ? len : 0;
 80021c6:	7cfb      	ldrb	r3, [r7, #19]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d101      	bne.n	80021d0 <cubemx_transport_write+0x50>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	e002      	b.n	80021d6 <cubemx_transport_write+0x56>
 80021d0:	2300      	movs	r3, #0
 80021d2:	e000      	b.n	80021d6 <cubemx_transport_write+0x56>
    }else{
        return 0;
 80021d4:	2300      	movs	r3, #0
    }
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3718      	adds	r7, #24
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
	...

080021e0 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b088      	sub	sp, #32
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	60b9      	str	r1, [r7, #8]
 80021ea:	607a      	str	r2, [r7, #4]
 80021ec:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80021f4:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 80021f6:	2300      	movs	r3, #0
 80021f8:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021fa:	b672      	cpsid	i
}
 80021fc:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 800220a:	4a1c      	ldr	r2, [pc, #112]	; (800227c <cubemx_transport_read+0x9c>)
 800220c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800220e:	b662      	cpsie	i
}
 8002210:	bf00      	nop
        __enable_irq();
        ms_used++;
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	3301      	adds	r3, #1
 8002216:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8002218:	2001      	movs	r0, #1
 800221a:	f006 ff17 	bl	800904c <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 800221e:	4b18      	ldr	r3, [pc, #96]	; (8002280 <cubemx_transport_read+0xa0>)
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	4b16      	ldr	r3, [pc, #88]	; (800227c <cubemx_transport_read+0x9c>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	429a      	cmp	r2, r3
 8002228:	d103      	bne.n	8002232 <cubemx_transport_read+0x52>
 800222a:	69fa      	ldr	r2, [r7, #28]
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	429a      	cmp	r2, r3
 8002230:	dbe3      	blt.n	80021fa <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8002232:	2300      	movs	r3, #0
 8002234:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8002236:	e011      	b.n	800225c <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8002238:	4b11      	ldr	r3, [pc, #68]	; (8002280 <cubemx_transport_read+0xa0>)
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	68b9      	ldr	r1, [r7, #8]
 800223e:	69bb      	ldr	r3, [r7, #24]
 8002240:	440b      	add	r3, r1
 8002242:	4910      	ldr	r1, [pc, #64]	; (8002284 <cubemx_transport_read+0xa4>)
 8002244:	5c8a      	ldrb	r2, [r1, r2]
 8002246:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8002248:	4b0d      	ldr	r3, [pc, #52]	; (8002280 <cubemx_transport_read+0xa0>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	3301      	adds	r3, #1
 800224e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002252:	4a0b      	ldr	r2, [pc, #44]	; (8002280 <cubemx_transport_read+0xa0>)
 8002254:	6013      	str	r3, [r2, #0]
        wrote++;
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	3301      	adds	r3, #1
 800225a:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 800225c:	4b08      	ldr	r3, [pc, #32]	; (8002280 <cubemx_transport_read+0xa0>)
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	4b06      	ldr	r3, [pc, #24]	; (800227c <cubemx_transport_read+0x9c>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	429a      	cmp	r2, r3
 8002266:	d003      	beq.n	8002270 <cubemx_transport_read+0x90>
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	429a      	cmp	r2, r3
 800226e:	d3e3      	bcc.n	8002238 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8002270:	69bb      	ldr	r3, [r7, #24]
}
 8002272:	4618      	mov	r0, r3
 8002274:	3720      	adds	r7, #32
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	20006660 	.word	0x20006660
 8002280:	2000665c 	.word	0x2000665c
 8002284:	20005e5c 	.word	0x20005e5c

08002288 <_Z16MX_FREERTOS_Initv>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800228c:	4a08      	ldr	r2, [pc, #32]	; (80022b0 <_Z16MX_FREERTOS_Initv+0x28>)
 800228e:	2100      	movs	r1, #0
 8002290:	4808      	ldr	r0, [pc, #32]	; (80022b4 <_Z16MX_FREERTOS_Initv+0x2c>)
 8002292:	f006 fe35 	bl	8008f00 <osThreadNew>
 8002296:	4603      	mov	r3, r0
 8002298:	4a07      	ldr	r2, [pc, #28]	; (80022b8 <_Z16MX_FREERTOS_Initv+0x30>)
 800229a:	6013      	str	r3, [r2, #0]

  /* creation of cycleRobot */
  cycleRobotHandle = osThreadNew(cycleRobotTask, NULL, &cycleRobot_attributes);
 800229c:	4a07      	ldr	r2, [pc, #28]	; (80022bc <_Z16MX_FREERTOS_Initv+0x34>)
 800229e:	2100      	movs	r1, #0
 80022a0:	4807      	ldr	r0, [pc, #28]	; (80022c0 <_Z16MX_FREERTOS_Initv+0x38>)
 80022a2:	f006 fe2d 	bl	8008f00 <osThreadNew>
 80022a6:	4603      	mov	r3, r0
 80022a8:	4a06      	ldr	r2, [pc, #24]	; (80022c4 <_Z16MX_FREERTOS_Initv+0x3c>)
 80022aa:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80022ac:	bf00      	nop
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	0801d800 	.word	0x0801d800
 80022b4:	080022c9 	.word	0x080022c9
 80022b8:	20006668 	.word	0x20006668
 80022bc:	0801d824 	.word	0x0801d824
 80022c0:	0800263d 	.word	0x0800263d
 80022c4:	2000666c 	.word	0x2000666c

080022c8 <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80022c8:	b5b0      	push	{r4, r5, r7, lr}
 80022ca:	f5ad 7d20 	sub.w	sp, sp, #640	; 0x280
 80022ce:	af02      	add	r7, sp, #8
 80022d0:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80022d4:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 80022d8:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartDefaultTask */
	rmw_uros_set_custom_transport(
 80022da:	4bc1      	ldr	r3, [pc, #772]	; (80025e0 <_Z16StartDefaultTaskPv+0x318>)
 80022dc:	9301      	str	r3, [sp, #4]
 80022de:	4bc1      	ldr	r3, [pc, #772]	; (80025e4 <_Z16StartDefaultTaskPv+0x31c>)
 80022e0:	9300      	str	r3, [sp, #0]
 80022e2:	4bc1      	ldr	r3, [pc, #772]	; (80025e8 <_Z16StartDefaultTaskPv+0x320>)
 80022e4:	4ac1      	ldr	r2, [pc, #772]	; (80025ec <_Z16StartDefaultTaskPv+0x324>)
 80022e6:	49c2      	ldr	r1, [pc, #776]	; (80025f0 <_Z16StartDefaultTaskPv+0x328>)
 80022e8:	2001      	movs	r0, #1
 80022ea:	f00b fd49 	bl	800dd80 <rmw_uros_set_custom_transport>
		cubemx_transport_open,
		cubemx_transport_close,
		cubemx_transport_write,
		cubemx_transport_read);

	rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 80022ee:	f507 730d 	add.w	r3, r7, #564	; 0x234
 80022f2:	4618      	mov	r0, r3
 80022f4:	f00b fc76 	bl	800dbe4 <rcutils_get_zero_initialized_allocator>
	freeRTOS_allocator.allocate = microros_allocate;
 80022f8:	4bbe      	ldr	r3, [pc, #760]	; (80025f4 <_Z16StartDefaultTaskPv+0x32c>)
 80022fa:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
	freeRTOS_allocator.deallocate = microros_deallocate;
 80022fe:	4bbe      	ldr	r3, [pc, #760]	; (80025f8 <_Z16StartDefaultTaskPv+0x330>)
 8002300:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
	freeRTOS_allocator.reallocate = microros_reallocate;
 8002304:	4bbd      	ldr	r3, [pc, #756]	; (80025fc <_Z16StartDefaultTaskPv+0x334>)
 8002306:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
	freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 800230a:	4bbd      	ldr	r3, [pc, #756]	; (8002600 <_Z16StartDefaultTaskPv+0x338>)
 800230c:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240

	if (!rcutils_set_default_allocator(&freeRTOS_allocator)) return;
 8002310:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8002314:	4618      	mov	r0, r3
 8002316:	f00b fc73 	bl	800dc00 <rcutils_set_default_allocator>
 800231a:	4603      	mov	r3, r0
 800231c:	f083 0301 	eor.w	r3, r3, #1
 8002320:	b2db      	uxtb	r3, r3
 8002322:	2b00      	cmp	r3, #0
 8002324:	f040 8137 	bne.w	8002596 <_Z16StartDefaultTaskPv+0x2ce>
	//Robot ScorBot = create_robot();

	rcl_ret_t rc;
	rcl_node_t node; // nodo;
	rcl_timer_t feedback_timer, robot_timer;
	const unsigned int feedback_timer_period = RCL_MS_TO_NS(1000);
 8002328:	4bb6      	ldr	r3, [pc, #728]	; (8002604 <_Z16StartDefaultTaskPv+0x33c>)
 800232a:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
	const unsigned int robot_timer_period = RCL_MS_TO_NS(10);
 800232e:	4bb6      	ldr	r3, [pc, #728]	; (8002608 <_Z16StartDefaultTaskPv+0x340>)
 8002330:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270
	//rcl_publisher_t feedback_publisher; // publisher
	rcl_subscription_t subscriber;
	rcl_service_t setup_service, control_service; //servizi

	const char* feedback_publisher_name = "/feedback";	//publisher
 8002334:	4bb5      	ldr	r3, [pc, #724]	; (800260c <_Z16StartDefaultTaskPv+0x344>)
 8002336:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
	const char* pwm_subscriber_name = "/pwm";			//subscriber
 800233a:	4bb5      	ldr	r3, [pc, #724]	; (8002610 <_Z16StartDefaultTaskPv+0x348>)
 800233c:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
	const char* setup_service_name = "/setup";			//servizi
 8002340:	4bb4      	ldr	r3, [pc, #720]	; (8002614 <_Z16StartDefaultTaskPv+0x34c>)
 8002342:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
	const char* control_service_name = "/control";
 8002346:	4bb4      	ldr	r3, [pc, #720]	; (8002618 <_Z16StartDefaultTaskPv+0x350>)
 8002348:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260

	const rosidl_message_type_support_t* feedback_type_support =
		ROSIDL_GET_MSG_TYPE_SUPPORT(racs_services, msg, Feedback);
 800234c:	f009 fbcc 	bl	800bae8 <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Feedback>
 8002350:	f8c7 025c 	str.w	r0, [r7, #604]	; 0x25c
	const rosidl_message_type_support_t * pwm_type_support =
	  ROSIDL_GET_MSG_TYPE_SUPPORT(racs_services, msg, DirectAccess);
 8002354:	f009 fbb0 	bl	800bab8 <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__DirectAccess>
 8002358:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
	const rosidl_service_type_support_t* setup_type_support =
		ROSIDL_GET_SRV_TYPE_SUPPORT(racs_services, srv, Setup);
 800235c:	f009 fbdc 	bl	800bb18 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Setup>
 8002360:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
	const rosidl_service_type_support_t* control_type_support =
		ROSIDL_GET_SRV_TYPE_SUPPORT(racs_services, srv, Control);
 8002364:	f009 fb82 	bl	800ba6c <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Control>
 8002368:	f8c7 0250 	str.w	r0, [r7, #592]	; 0x250
	racs_services__srv__Setup_Request req_setup;
	racs_services__srv__Setup_Response res_setup;
	racs_services__srv__Control_Request req_control;
	racs_services__srv__Control_Response res_control;

	allocator = rcl_get_default_allocator();
 800236c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002370:	4618      	mov	r0, r3
 8002372:	f00b fc63 	bl	800dc3c <rcutils_get_default_allocator>
 8002376:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800237a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800237e:	f507 74e8 	add.w	r4, r7, #464	; 0x1d0
 8002382:	461d      	mov	r5, r3
 8002384:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002386:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002388:	682b      	ldr	r3, [r5, #0]
 800238a:	6023      	str	r3, [r4, #0]

	rc = rclc_support_init(&support, 0, NULL, &allocator);
 800238c:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8002390:	f507 70f2 	add.w	r0, r7, #484	; 0x1e4
 8002394:	2200      	movs	r2, #0
 8002396:	2100      	movs	r1, #0
 8002398:	f00b fab2 	bl	800d900 <rclc_support_init>
 800239c:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
	if (rc != RCL_RET_OK) return;
 80023a0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	f040 80f8 	bne.w	800259a <_Z16StartDefaultTaskPv+0x2d2>

	rc = rclc_timer_init_default(&feedback_timer, &support, feedback_timer_period, feedback_timer_callback);
 80023aa:	f507 71f2 	add.w	r1, r7, #484	; 0x1e4
 80023ae:	f507 700a 	add.w	r0, r7, #552	; 0x228
 80023b2:	4b9a      	ldr	r3, [pc, #616]	; (800261c <_Z16StartDefaultTaskPv+0x354>)
 80023b4:	9300      	str	r3, [sp, #0]
 80023b6:	a388      	add	r3, pc, #544	; (adr r3, 80025d8 <_Z16StartDefaultTaskPv+0x310>)
 80023b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023bc:	f00b fbda 	bl	800db74 <rclc_timer_init_default>
 80023c0:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
	if (rc != RCL_RET_OK) return;
 80023c4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	f040 80e8 	bne.w	800259e <_Z16StartDefaultTaskPv+0x2d6>

	rc = rclc_timer_init_default(&robot_timer, &support, robot_timer_period, robot_timer_callback);
 80023ce:	f507 71f2 	add.w	r1, r7, #484	; 0x1e4
 80023d2:	f507 7009 	add.w	r0, r7, #548	; 0x224
 80023d6:	4b92      	ldr	r3, [pc, #584]	; (8002620 <_Z16StartDefaultTaskPv+0x358>)
 80023d8:	9300      	str	r3, [sp, #0]
 80023da:	4a8b      	ldr	r2, [pc, #556]	; (8002608 <_Z16StartDefaultTaskPv+0x340>)
 80023dc:	f04f 0300 	mov.w	r3, #0
 80023e0:	f00b fbc8 	bl	800db74 <rclc_timer_init_default>
 80023e4:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
	if (rc != RCL_RET_OK) return;
 80023e8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	f040 80d8 	bne.w	80025a2 <_Z16StartDefaultTaskPv+0x2da>

	rc = rclc_node_init_default(&node, "STM32_node", "", &support);
 80023f2:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 80023f6:	f507 700b 	add.w	r0, r7, #556	; 0x22c
 80023fa:	4a8a      	ldr	r2, [pc, #552]	; (8002624 <_Z16StartDefaultTaskPv+0x35c>)
 80023fc:	498a      	ldr	r1, [pc, #552]	; (8002628 <_Z16StartDefaultTaskPv+0x360>)
 80023fe:	f00b fac9 	bl	800d994 <rclc_node_init_default>
 8002402:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
	if (rc != RCL_RET_OK) return;
 8002406:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800240a:	2b00      	cmp	r3, #0
 800240c:	f040 80cb 	bne.w	80025a6 <_Z16StartDefaultTaskPv+0x2de>

	rc = rclc_publisher_init_best_effort(
 8002410:	f507 710b 	add.w	r1, r7, #556	; 0x22c
 8002414:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 8002418:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 800241c:	4883      	ldr	r0, [pc, #524]	; (800262c <_Z16StartDefaultTaskPv+0x364>)
 800241e:	f00b fafb 	bl	800da18 <rclc_publisher_init_best_effort>
 8002422:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
	  &feedback_publisher, &node, feedback_type_support, feedback_publisher_name);
	if (rc != RCL_RET_OK) return;
 8002426:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800242a:	2b00      	cmp	r3, #0
 800242c:	f040 80bd 	bne.w	80025aa <_Z16StartDefaultTaskPv+0x2e2>

	rc = rclc_subscription_init_best_effort(
 8002430:	f507 710b 	add.w	r1, r7, #556	; 0x22c
 8002434:	f507 7008 	add.w	r0, r7, #544	; 0x220
 8002438:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 800243c:	f8d7 2258 	ldr.w	r2, [r7, #600]	; 0x258
 8002440:	f00b fb5e 	bl	800db00 <rclc_subscription_init_best_effort>
 8002444:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
	  &subscriber, &node, pwm_type_support, pwm_subscriber_name);
	if (rc != RCL_RET_OK) return;
 8002448:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800244c:	2b00      	cmp	r3, #0
 800244e:	f040 80ae 	bne.w	80025ae <_Z16StartDefaultTaskPv+0x2e6>

	rc = rclc_service_init_default(
 8002452:	f507 710b 	add.w	r1, r7, #556	; 0x22c
 8002456:	f507 7007 	add.w	r0, r7, #540	; 0x21c
 800245a:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 800245e:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8002462:	f00b fb13 	bl	800da8c <rclc_service_init_default>
 8002466:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
		&setup_service, &node, setup_type_support, setup_service_name);
	if (rc != RCL_RET_OK) return;
 800246a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800246e:	2b00      	cmp	r3, #0
 8002470:	f040 809f 	bne.w	80025b2 <_Z16StartDefaultTaskPv+0x2ea>

	rc = rclc_service_init_default(
 8002474:	f507 710b 	add.w	r1, r7, #556	; 0x22c
 8002478:	f507 7006 	add.w	r0, r7, #536	; 0x218
 800247c:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8002480:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 8002484:	f00b fb02 	bl	800da8c <rclc_service_init_default>
 8002488:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
		&control_service, &node, control_type_support, control_service_name);
	if (rc != RCL_RET_OK) return;
 800248c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8002490:	2b00      	cmp	r3, #0
 8002492:	f040 8090 	bne.w	80025b6 <_Z16StartDefaultTaskPv+0x2ee>

	rclc_executor_t executor;
	executor = rclc_executor_get_zero_initialized_executor();
 8002496:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800249a:	f5a3 74c0 	sub.w	r4, r3, #384	; 0x180
 800249e:	463b      	mov	r3, r7
 80024a0:	4618      	mov	r0, r3
 80024a2:	f00a fecb 	bl	800d23c <rclc_executor_get_zero_initialized_executor>
 80024a6:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80024aa:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 80024ae:	4620      	mov	r0, r4
 80024b0:	4619      	mov	r1, r3
 80024b2:	2390      	movs	r3, #144	; 0x90
 80024b4:	461a      	mov	r2, r3
 80024b6:	f01a fa76 	bl	801c9a6 <memcpy>
	unsigned int num_handles = 5; //2 servizi, 2 timer e 1 sub
 80024ba:	2305      	movs	r3, #5
 80024bc:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
	rclc_executor_init(&executor, &support.context, num_handles, &allocator);
 80024c0:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80024c4:	f507 71f2 	add.w	r1, r7, #484	; 0x1e4
 80024c8:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 80024cc:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 80024d0:	f00a febe 	bl	800d250 <rclc_executor_init>

	rc = rclc_executor_add_timer(&executor, &feedback_timer);
 80024d4:	f507 720a 	add.w	r2, r7, #552	; 0x228
 80024d8:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80024dc:	4611      	mov	r1, r2
 80024de:	4618      	mov	r0, r3
 80024e0:	f00a ff70 	bl	800d3c4 <rclc_executor_add_timer>
 80024e4:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
	if (rc != RCL_RET_OK) return;
 80024e8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d164      	bne.n	80025ba <_Z16StartDefaultTaskPv+0x2f2>

	rc = rclc_executor_add_timer(&executor, &robot_timer);
 80024f0:	f507 7209 	add.w	r2, r7, #548	; 0x224
 80024f4:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80024f8:	4611      	mov	r1, r2
 80024fa:	4618      	mov	r0, r3
 80024fc:	f00a ff62 	bl	800d3c4 <rclc_executor_add_timer>
 8002500:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
	if (rc != RCL_RET_OK) return;
 8002504:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8002508:	2b00      	cmp	r3, #0
 800250a:	d158      	bne.n	80025be <_Z16StartDefaultTaskPv+0x2f6>

	rc = rclc_executor_add_subscription(
 800250c:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
 8002510:	f507 7108 	add.w	r1, r7, #544	; 0x220
 8002514:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 8002518:	2300      	movs	r3, #0
 800251a:	9300      	str	r3, [sp, #0]
 800251c:	4b44      	ldr	r3, [pc, #272]	; (8002630 <_Z16StartDefaultTaskPv+0x368>)
 800251e:	f00a ff13 	bl	800d348 <rclc_executor_add_subscription>
 8002522:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
	  &executor, &subscriber, &pwm_msg,
	  &pwm_callback, ON_NEW_DATA);
	if (rc != RCL_RET_OK) return;
 8002526:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800252a:	2b00      	cmp	r3, #0
 800252c:	d149      	bne.n	80025c2 <_Z16StartDefaultTaskPv+0x2fa>

	rc = rclc_executor_add_service(
 800252e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002532:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8002536:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800253a:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 800253e:	4c3d      	ldr	r4, [pc, #244]	; (8002634 <_Z16StartDefaultTaskPv+0x36c>)
 8002540:	9400      	str	r4, [sp, #0]
 8002542:	f00a ff6d 	bl	800d420 <rclc_executor_add_service>
 8002546:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
		&executor, &setup_service, &req_setup,
		&res_setup, setup_callback);
	if (rc != RCL_RET_OK) return;
 800254a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800254e:	2b00      	cmp	r3, #0
 8002550:	d139      	bne.n	80025c6 <_Z16StartDefaultTaskPv+0x2fe>

	rc = rclc_executor_add_service(
 8002552:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8002556:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 800255a:	f507 7106 	add.w	r1, r7, #536	; 0x218
 800255e:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 8002562:	4c35      	ldr	r4, [pc, #212]	; (8002638 <_Z16StartDefaultTaskPv+0x370>)
 8002564:	9400      	str	r4, [sp, #0]
 8002566:	f00a ff5b 	bl	800d420 <rclc_executor_add_service>
 800256a:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
		&executor, &control_service, &req_control,
		&res_control, control_callback);
	if (rc != RCL_RET_OK) return;
 800256e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8002572:	2b00      	cmp	r3, #0
 8002574:	d129      	bne.n	80025ca <_Z16StartDefaultTaskPv+0x302>

	Robot ScorBot = create_robot();
 8002576:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800257a:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800257e:	4618      	mov	r0, r3
 8002580:	f7fe fee8 	bl	8001354 <_Z12create_robotv>

	rclc_executor_spin(&executor);
 8002584:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002588:	4618      	mov	r0, r3
 800258a:	f00b f979 	bl	800d880 <rclc_executor_spin>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800258e:	2001      	movs	r0, #1
 8002590:	f006 fd5c 	bl	800904c <osDelay>
 8002594:	e7fb      	b.n	800258e <_Z16StartDefaultTaskPv+0x2c6>
	if (!rcutils_set_default_allocator(&freeRTOS_allocator)) return;
 8002596:	bf00      	nop
 8002598:	e018      	b.n	80025cc <_Z16StartDefaultTaskPv+0x304>
	if (rc != RCL_RET_OK) return;
 800259a:	bf00      	nop
 800259c:	e016      	b.n	80025cc <_Z16StartDefaultTaskPv+0x304>
	if (rc != RCL_RET_OK) return;
 800259e:	bf00      	nop
 80025a0:	e014      	b.n	80025cc <_Z16StartDefaultTaskPv+0x304>
	if (rc != RCL_RET_OK) return;
 80025a2:	bf00      	nop
 80025a4:	e012      	b.n	80025cc <_Z16StartDefaultTaskPv+0x304>
	if (rc != RCL_RET_OK) return;
 80025a6:	bf00      	nop
 80025a8:	e010      	b.n	80025cc <_Z16StartDefaultTaskPv+0x304>
	if (rc != RCL_RET_OK) return;
 80025aa:	bf00      	nop
 80025ac:	e00e      	b.n	80025cc <_Z16StartDefaultTaskPv+0x304>
	if (rc != RCL_RET_OK) return;
 80025ae:	bf00      	nop
 80025b0:	e00c      	b.n	80025cc <_Z16StartDefaultTaskPv+0x304>
	if (rc != RCL_RET_OK) return;
 80025b2:	bf00      	nop
 80025b4:	e00a      	b.n	80025cc <_Z16StartDefaultTaskPv+0x304>
	if (rc != RCL_RET_OK) return;
 80025b6:	bf00      	nop
 80025b8:	e008      	b.n	80025cc <_Z16StartDefaultTaskPv+0x304>
	if (rc != RCL_RET_OK) return;
 80025ba:	bf00      	nop
 80025bc:	e006      	b.n	80025cc <_Z16StartDefaultTaskPv+0x304>
	if (rc != RCL_RET_OK) return;
 80025be:	bf00      	nop
 80025c0:	e004      	b.n	80025cc <_Z16StartDefaultTaskPv+0x304>
	if (rc != RCL_RET_OK) return;
 80025c2:	bf00      	nop
 80025c4:	e002      	b.n	80025cc <_Z16StartDefaultTaskPv+0x304>
	if (rc != RCL_RET_OK) return;
 80025c6:	bf00      	nop
 80025c8:	e000      	b.n	80025cc <_Z16StartDefaultTaskPv+0x304>
	if (rc != RCL_RET_OK) return;
 80025ca:	bf00      	nop
  }
  /* USER CODE END StartDefaultTask */
}
 80025cc:	f507 771e 	add.w	r7, r7, #632	; 0x278
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bdb0      	pop	{r4, r5, r7, pc}
 80025d4:	f3af 8000 	nop.w
 80025d8:	3b9aca00 	.word	0x3b9aca00
 80025dc:	00000000 	.word	0x00000000
 80025e0:	080021e1 	.word	0x080021e1
 80025e4:	08002181 	.word	0x08002181
 80025e8:	08002161 	.word	0x08002161
 80025ec:	08002135 	.word	0x08002135
 80025f0:	200068e0 	.word	0x200068e0
 80025f4:	08002951 	.word	0x08002951
 80025f8:	08002995 	.word	0x08002995
 80025fc:	080029cd 	.word	0x080029cd
 8002600:	08002a39 	.word	0x08002a39
 8002604:	3b9aca00 	.word	0x3b9aca00
 8002608:	00989680 	.word	0x00989680
 800260c:	0801d790 	.word	0x0801d790
 8002610:	0801d79c 	.word	0x0801d79c
 8002614:	0801d7a4 	.word	0x0801d7a4
 8002618:	0801d7ac 	.word	0x0801d7ac
 800261c:	08000771 	.word	0x08000771
 8002620:	08000819 	.word	0x08000819
 8002624:	0801d7b8 	.word	0x0801d7b8
 8002628:	0801d7bc 	.word	0x0801d7bc
 800262c:	20006664 	.word	0x20006664
 8002630:	080006ad 	.word	0x080006ad
 8002634:	08000739 	.word	0x08000739
 8002638:	08000701 	.word	0x08000701

0800263c <_Z14cycleRobotTaskPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_cycleRobotTask */
void cycleRobotTask(void *argument)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN cycleRobotTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002644:	2001      	movs	r0, #1
 8002646:	f006 fd01 	bl	800904c <osDelay>
 800264a:	e7fb      	b.n	8002644 <_Z14cycleRobotTaskPv+0x8>

0800264c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b08c      	sub	sp, #48	; 0x30
 8002650:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002652:	f107 031c 	add.w	r3, r7, #28
 8002656:	2200      	movs	r2, #0
 8002658:	601a      	str	r2, [r3, #0]
 800265a:	605a      	str	r2, [r3, #4]
 800265c:	609a      	str	r2, [r3, #8]
 800265e:	60da      	str	r2, [r3, #12]
 8002660:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002662:	4b58      	ldr	r3, [pc, #352]	; (80027c4 <MX_GPIO_Init+0x178>)
 8002664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002666:	4a57      	ldr	r2, [pc, #348]	; (80027c4 <MX_GPIO_Init+0x178>)
 8002668:	f043 0310 	orr.w	r3, r3, #16
 800266c:	6313      	str	r3, [r2, #48]	; 0x30
 800266e:	4b55      	ldr	r3, [pc, #340]	; (80027c4 <MX_GPIO_Init+0x178>)
 8002670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002672:	f003 0310 	and.w	r3, r3, #16
 8002676:	61bb      	str	r3, [r7, #24]
 8002678:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800267a:	4b52      	ldr	r3, [pc, #328]	; (80027c4 <MX_GPIO_Init+0x178>)
 800267c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267e:	4a51      	ldr	r2, [pc, #324]	; (80027c4 <MX_GPIO_Init+0x178>)
 8002680:	f043 0304 	orr.w	r3, r3, #4
 8002684:	6313      	str	r3, [r2, #48]	; 0x30
 8002686:	4b4f      	ldr	r3, [pc, #316]	; (80027c4 <MX_GPIO_Init+0x178>)
 8002688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268a:	f003 0304 	and.w	r3, r3, #4
 800268e:	617b      	str	r3, [r7, #20]
 8002690:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002692:	4b4c      	ldr	r3, [pc, #304]	; (80027c4 <MX_GPIO_Init+0x178>)
 8002694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002696:	4a4b      	ldr	r2, [pc, #300]	; (80027c4 <MX_GPIO_Init+0x178>)
 8002698:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800269c:	6313      	str	r3, [r2, #48]	; 0x30
 800269e:	4b49      	ldr	r3, [pc, #292]	; (80027c4 <MX_GPIO_Init+0x178>)
 80026a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026a6:	613b      	str	r3, [r7, #16]
 80026a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026aa:	4b46      	ldr	r3, [pc, #280]	; (80027c4 <MX_GPIO_Init+0x178>)
 80026ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ae:	4a45      	ldr	r2, [pc, #276]	; (80027c4 <MX_GPIO_Init+0x178>)
 80026b0:	f043 0301 	orr.w	r3, r3, #1
 80026b4:	6313      	str	r3, [r2, #48]	; 0x30
 80026b6:	4b43      	ldr	r3, [pc, #268]	; (80027c4 <MX_GPIO_Init+0x178>)
 80026b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ba:	f003 0301 	and.w	r3, r3, #1
 80026be:	60fb      	str	r3, [r7, #12]
 80026c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026c2:	4b40      	ldr	r3, [pc, #256]	; (80027c4 <MX_GPIO_Init+0x178>)
 80026c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c6:	4a3f      	ldr	r2, [pc, #252]	; (80027c4 <MX_GPIO_Init+0x178>)
 80026c8:	f043 0302 	orr.w	r3, r3, #2
 80026cc:	6313      	str	r3, [r2, #48]	; 0x30
 80026ce:	4b3d      	ldr	r3, [pc, #244]	; (80027c4 <MX_GPIO_Init+0x178>)
 80026d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	60bb      	str	r3, [r7, #8]
 80026d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80026da:	4b3a      	ldr	r3, [pc, #232]	; (80027c4 <MX_GPIO_Init+0x178>)
 80026dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026de:	4a39      	ldr	r2, [pc, #228]	; (80027c4 <MX_GPIO_Init+0x178>)
 80026e0:	f043 0308 	orr.w	r3, r3, #8
 80026e4:	6313      	str	r3, [r2, #48]	; 0x30
 80026e6:	4b37      	ldr	r3, [pc, #220]	; (80027c4 <MX_GPIO_Init+0x178>)
 80026e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ea:	f003 0308 	and.w	r3, r3, #8
 80026ee:	607b      	str	r3, [r7, #4]
 80026f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80026f2:	4b34      	ldr	r3, [pc, #208]	; (80027c4 <MX_GPIO_Init+0x178>)
 80026f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f6:	4a33      	ldr	r2, [pc, #204]	; (80027c4 <MX_GPIO_Init+0x178>)
 80026f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026fc:	6313      	str	r3, [r2, #48]	; 0x30
 80026fe:	4b31      	ldr	r3, [pc, #196]	; (80027c4 <MX_GPIO_Init+0x178>)
 8002700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002706:	603b      	str	r3, [r7, #0]
 8002708:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800270a:	2200      	movs	r2, #0
 800270c:	f244 0181 	movw	r1, #16513	; 0x4081
 8002710:	482d      	ldr	r0, [pc, #180]	; (80027c8 <MX_GPIO_Init+0x17c>)
 8002712:	f002 f9a3 	bl	8004a5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, MOTOR5_INA_Pin|MOTOR5_INB_Pin|MOTOR1_INA_Pin|MOTOR1_INB_Pin
 8002716:	2200      	movs	r2, #0
 8002718:	f24c 01ff 	movw	r1, #49407	; 0xc0ff
 800271c:	482b      	ldr	r0, [pc, #172]	; (80027cc <MX_GPIO_Init+0x180>)
 800271e:	f002 f99d 	bl	8004a5c <HAL_GPIO_WritePin>
                          |MOTOR2_INA_Pin|MOTOR2_INB_Pin|MOTOR3_INA_Pin|MOTOR3_INB_Pin
                          |MOTOR4_INA_Pin|MOTOR4_INB_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, MOTOR6_INA_Pin|MOTOR6_INB_Pin|PIN_TOGGLE_Pin|MOTORS_EN_Pin
 8002722:	2200      	movs	r2, #0
 8002724:	f647 616c 	movw	r1, #32364	; 0x7e6c
 8002728:	4829      	ldr	r0, [pc, #164]	; (80027d0 <MX_GPIO_Init+0x184>)
 800272a:	f002 f997 	bl	8004a5c <HAL_GPIO_WritePin>
                          |MOTOR1_END_Pin|MOTOR2_END_Pin|MOTOR3_END_Pin|MOTOR4_END_Pin
                          |MOTOR5_END_Pin|MOTOR6_END_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800272e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002732:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002734:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002738:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273a:	2300      	movs	r3, #0
 800273c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800273e:	f107 031c 	add.w	r3, r7, #28
 8002742:	4619      	mov	r1, r3
 8002744:	4823      	ldr	r0, [pc, #140]	; (80027d4 <MX_GPIO_Init+0x188>)
 8002746:	f001 ffc5 	bl	80046d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800274a:	f244 0381 	movw	r3, #16513	; 0x4081
 800274e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002750:	2301      	movs	r3, #1
 8002752:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002754:	2300      	movs	r3, #0
 8002756:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002758:	2300      	movs	r3, #0
 800275a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800275c:	f107 031c 	add.w	r3, r7, #28
 8002760:	4619      	mov	r1, r3
 8002762:	4819      	ldr	r0, [pc, #100]	; (80027c8 <MX_GPIO_Init+0x17c>)
 8002764:	f001 ffb6 	bl	80046d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = MOTOR5_INA_Pin|MOTOR5_INB_Pin|MOTOR1_INA_Pin|MOTOR1_INB_Pin
 8002768:	f24c 03ff 	movw	r3, #49407	; 0xc0ff
 800276c:	61fb      	str	r3, [r7, #28]
                          |MOTOR2_INA_Pin|MOTOR2_INB_Pin|MOTOR3_INA_Pin|MOTOR3_INB_Pin
                          |MOTOR4_INA_Pin|MOTOR4_INB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800276e:	2301      	movs	r3, #1
 8002770:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002772:	2300      	movs	r3, #0
 8002774:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002776:	2300      	movs	r3, #0
 8002778:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800277a:	f107 031c 	add.w	r3, r7, #28
 800277e:	4619      	mov	r1, r3
 8002780:	4812      	ldr	r0, [pc, #72]	; (80027cc <MX_GPIO_Init+0x180>)
 8002782:	f001 ffa7 	bl	80046d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin
                           PGPin PGPin */
  GPIO_InitStruct.Pin = MOTOR6_INA_Pin|MOTOR6_INB_Pin|PIN_TOGGLE_Pin|MOTORS_EN_Pin
 8002786:	f647 636c 	movw	r3, #32364	; 0x7e6c
 800278a:	61fb      	str	r3, [r7, #28]
                          |MOTOR1_END_Pin|MOTOR2_END_Pin|MOTOR3_END_Pin|MOTOR4_END_Pin
                          |MOTOR5_END_Pin|MOTOR6_END_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800278c:	2301      	movs	r3, #1
 800278e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002790:	2300      	movs	r3, #0
 8002792:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002794:	2300      	movs	r3, #0
 8002796:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002798:	f107 031c 	add.w	r3, r7, #28
 800279c:	4619      	mov	r1, r3
 800279e:	480c      	ldr	r0, [pc, #48]	; (80027d0 <MX_GPIO_Init+0x184>)
 80027a0:	f001 ff98 	bl	80046d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80027a4:	2380      	movs	r3, #128	; 0x80
 80027a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027a8:	2300      	movs	r3, #0
 80027aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ac:	2300      	movs	r3, #0
 80027ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80027b0:	f107 031c 	add.w	r3, r7, #28
 80027b4:	4619      	mov	r1, r3
 80027b6:	4806      	ldr	r0, [pc, #24]	; (80027d0 <MX_GPIO_Init+0x184>)
 80027b8:	f001 ff8c 	bl	80046d4 <HAL_GPIO_Init>

}
 80027bc:	bf00      	nop
 80027be:	3730      	adds	r7, #48	; 0x30
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	40023800 	.word	0x40023800
 80027c8:	40020400 	.word	0x40020400
 80027cc:	40020c00 	.word	0x40020c00
 80027d0:	40021800 	.word	0x40021800
 80027d4:	40020800 	.word	0x40020800

080027d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80027dc:	f001 fa31 	bl	8003c42 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80027e0:	f000 f81e 	bl	8002820 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80027e4:	f7ff ff32 	bl	800264c <MX_GPIO_Init>
  MX_DMA_Init();
 80027e8:	f7ff fc7e 	bl	80020e8 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80027ec:	f001 f850 	bl	8003890 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80027f0:	f001 f94e 	bl	8003a90 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM1_Init();
 80027f4:	f000 fbc8 	bl	8002f88 <MX_TIM1_Init>
  MX_TIM2_Init();
 80027f8:	f000 fc7a 	bl	80030f0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80027fc:	f000 fccc 	bl	8003198 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002800:	f000 fd20 	bl	8003244 <MX_TIM4_Init>
  MX_TIM5_Init();
 8002804:	f000 fd74 	bl	80032f0 <MX_TIM5_Init>
  MX_TIM8_Init();
 8002808:	f000 fdc8 	bl	800339c <MX_TIM8_Init>
  MX_TIM9_Init();
 800280c:	f000 fe20 	bl	8003450 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8002810:	f006 fb0c 	bl	8008e2c <osKernelInitialize>
  MX_FREERTOS_Init();
 8002814:	f7ff fd38 	bl	8002288 <_Z16MX_FREERTOS_Initv>

  /* Start scheduler */
  osKernelStart();
 8002818:	f006 fb3c 	bl	8008e94 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800281c:	e7fe      	b.n	800281c <main+0x44>
	...

08002820 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b094      	sub	sp, #80	; 0x50
 8002824:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002826:	f107 031c 	add.w	r3, r7, #28
 800282a:	2234      	movs	r2, #52	; 0x34
 800282c:	2100      	movs	r1, #0
 800282e:	4618      	mov	r0, r3
 8002830:	f019 ff88 	bl	801c744 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002834:	f107 0308 	add.w	r3, r7, #8
 8002838:	2200      	movs	r2, #0
 800283a:	601a      	str	r2, [r3, #0]
 800283c:	605a      	str	r2, [r3, #4]
 800283e:	609a      	str	r2, [r3, #8]
 8002840:	60da      	str	r2, [r3, #12]
 8002842:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002844:	f002 fa6c 	bl	8004d20 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002848:	4b33      	ldr	r3, [pc, #204]	; (8002918 <_Z18SystemClock_Configv+0xf8>)
 800284a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284c:	4a32      	ldr	r2, [pc, #200]	; (8002918 <_Z18SystemClock_Configv+0xf8>)
 800284e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002852:	6413      	str	r3, [r2, #64]	; 0x40
 8002854:	4b30      	ldr	r3, [pc, #192]	; (8002918 <_Z18SystemClock_Configv+0xf8>)
 8002856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002858:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800285c:	607b      	str	r3, [r7, #4]
 800285e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002860:	4b2e      	ldr	r3, [pc, #184]	; (800291c <_Z18SystemClock_Configv+0xfc>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002868:	4a2c      	ldr	r2, [pc, #176]	; (800291c <_Z18SystemClock_Configv+0xfc>)
 800286a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800286e:	6013      	str	r3, [r2, #0]
 8002870:	4b2a      	ldr	r3, [pc, #168]	; (800291c <_Z18SystemClock_Configv+0xfc>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002878:	603b      	str	r3, [r7, #0]
 800287a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800287c:	2301      	movs	r3, #1
 800287e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002880:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002884:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002886:	2302      	movs	r3, #2
 8002888:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800288a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800288e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002890:	2304      	movs	r3, #4
 8002892:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8002894:	2360      	movs	r3, #96	; 0x60
 8002896:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002898:	2302      	movs	r3, #2
 800289a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800289c:	2304      	movs	r3, #4
 800289e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80028a0:	2302      	movs	r3, #2
 80028a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028a4:	f107 031c 	add.w	r3, r7, #28
 80028a8:	4618      	mov	r0, r3
 80028aa:	f002 fa99 	bl	8004de0 <HAL_RCC_OscConfig>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	bf14      	ite	ne
 80028b4:	2301      	movne	r3, #1
 80028b6:	2300      	moveq	r3, #0
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d001      	beq.n	80028c2 <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 80028be:	f000 f841 	bl	8002944 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80028c2:	f002 fa3d 	bl	8004d40 <HAL_PWREx_EnableOverDrive>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	bf14      	ite	ne
 80028cc:	2301      	movne	r3, #1
 80028ce:	2300      	moveq	r3, #0
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d001      	beq.n	80028da <_Z18SystemClock_Configv+0xba>
  {
    Error_Handler();
 80028d6:	f000 f835 	bl	8002944 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028da:	230f      	movs	r3, #15
 80028dc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028de:	2302      	movs	r3, #2
 80028e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028e2:	2300      	movs	r3, #0
 80028e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80028e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80028ec:	2300      	movs	r3, #0
 80028ee:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80028f0:	f107 0308 	add.w	r3, r7, #8
 80028f4:	2103      	movs	r1, #3
 80028f6:	4618      	mov	r0, r3
 80028f8:	f002 fd20 	bl	800533c <HAL_RCC_ClockConfig>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	bf14      	ite	ne
 8002902:	2301      	movne	r3, #1
 8002904:	2300      	moveq	r3, #0
 8002906:	b2db      	uxtb	r3, r3
 8002908:	2b00      	cmp	r3, #0
 800290a:	d001      	beq.n	8002910 <_Z18SystemClock_Configv+0xf0>
  {
    Error_Handler();
 800290c:	f000 f81a 	bl	8002944 <Error_Handler>
  }
}
 8002910:	bf00      	nop
 8002912:	3750      	adds	r7, #80	; 0x50
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	40023800 	.word	0x40023800
 800291c:	40007000 	.word	0x40007000

08002920 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a04      	ldr	r2, [pc, #16]	; (8002940 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d101      	bne.n	8002936 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002932:	f001 f993 	bl	8003c5c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002936:	bf00      	nop
 8002938:	3708      	adds	r7, #8
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	40001000 	.word	0x40001000

08002944 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002948:	b672      	cpsid	i
}
 800294a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800294c:	e7fe      	b.n	800294c <Error_Handler+0x8>
	...

08002950 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 800295a:	4b0c      	ldr	r3, [pc, #48]	; (800298c <microros_allocate+0x3c>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	461a      	mov	r2, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	4413      	add	r3, r2
 8002964:	461a      	mov	r2, r3
 8002966:	4b09      	ldr	r3, [pc, #36]	; (800298c <microros_allocate+0x3c>)
 8002968:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 800296a:	4b09      	ldr	r3, [pc, #36]	; (8002990 <microros_allocate+0x40>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	461a      	mov	r2, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	4413      	add	r3, r2
 8002974:	461a      	mov	r2, r3
 8002976:	4b06      	ldr	r3, [pc, #24]	; (8002990 <microros_allocate+0x40>)
 8002978:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f7ff f960 	bl	8001c40 <pvPortMallocMicroROS>
 8002980:	4603      	mov	r3, r0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3708      	adds	r7, #8
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	20006670 	.word	0x20006670
 8002990:	20006674 	.word	0x20006674

08002994 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d00c      	beq.n	80029be <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f7ff fa73 	bl	8001e90 <getBlockSize>
 80029aa:	4603      	mov	r3, r0
 80029ac:	4a06      	ldr	r2, [pc, #24]	; (80029c8 <microros_deallocate+0x34>)
 80029ae:	6812      	ldr	r2, [r2, #0]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	461a      	mov	r2, r3
 80029b4:	4b04      	ldr	r3, [pc, #16]	; (80029c8 <microros_deallocate+0x34>)
 80029b6:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f7ff fa0b 	bl	8001dd4 <vPortFreeMicroROS>
  }
}
 80029be:	bf00      	nop
 80029c0:	3708      	adds	r7, #8
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	20006674 	.word	0x20006674

080029cc <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80029d8:	4b15      	ldr	r3, [pc, #84]	; (8002a30 <microros_reallocate+0x64>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	461a      	mov	r2, r3
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	4413      	add	r3, r2
 80029e2:	461a      	mov	r2, r3
 80029e4:	4b12      	ldr	r3, [pc, #72]	; (8002a30 <microros_reallocate+0x64>)
 80029e6:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80029e8:	4b12      	ldr	r3, [pc, #72]	; (8002a34 <microros_reallocate+0x68>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	461a      	mov	r2, r3
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	4413      	add	r3, r2
 80029f2:	461a      	mov	r2, r3
 80029f4:	4b0f      	ldr	r3, [pc, #60]	; (8002a34 <microros_reallocate+0x68>)
 80029f6:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d104      	bne.n	8002a08 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 80029fe:	68b8      	ldr	r0, [r7, #8]
 8002a00:	f7ff f91e 	bl	8001c40 <pvPortMallocMicroROS>
 8002a04:	4603      	mov	r3, r0
 8002a06:	e00e      	b.n	8002a26 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8002a08:	68f8      	ldr	r0, [r7, #12]
 8002a0a:	f7ff fa41 	bl	8001e90 <getBlockSize>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	4a08      	ldr	r2, [pc, #32]	; (8002a34 <microros_reallocate+0x68>)
 8002a12:	6812      	ldr	r2, [r2, #0]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	461a      	mov	r2, r3
 8002a18:	4b06      	ldr	r3, [pc, #24]	; (8002a34 <microros_reallocate+0x68>)
 8002a1a:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8002a1c:	68b9      	ldr	r1, [r7, #8]
 8002a1e:	68f8      	ldr	r0, [r7, #12]
 8002a20:	f7ff fa54 	bl	8001ecc <pvPortReallocMicroROS>
 8002a24:	4603      	mov	r3, r0
  }
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3710      	adds	r7, #16
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	20006670 	.word	0x20006670
 8002a34:	20006674 	.word	0x20006674

08002a38 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	60b9      	str	r1, [r7, #8]
 8002a42:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	68ba      	ldr	r2, [r7, #8]
 8002a48:	fb02 f303 	mul.w	r3, r2, r3
 8002a4c:	4a0c      	ldr	r2, [pc, #48]	; (8002a80 <microros_zero_allocate+0x48>)
 8002a4e:	6812      	ldr	r2, [r2, #0]
 8002a50:	4413      	add	r3, r2
 8002a52:	461a      	mov	r2, r3
 8002a54:	4b0a      	ldr	r3, [pc, #40]	; (8002a80 <microros_zero_allocate+0x48>)
 8002a56:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	68ba      	ldr	r2, [r7, #8]
 8002a5c:	fb02 f303 	mul.w	r3, r2, r3
 8002a60:	4a08      	ldr	r2, [pc, #32]	; (8002a84 <microros_zero_allocate+0x4c>)
 8002a62:	6812      	ldr	r2, [r2, #0]
 8002a64:	4413      	add	r3, r2
 8002a66:	461a      	mov	r2, r3
 8002a68:	4b06      	ldr	r3, [pc, #24]	; (8002a84 <microros_zero_allocate+0x4c>)
 8002a6a:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8002a6c:	68b9      	ldr	r1, [r7, #8]
 8002a6e:	68f8      	ldr	r0, [r7, #12]
 8002a70:	f7ff fa59 	bl	8001f26 <pvPortCallocMicroROS>
 8002a74:	4603      	mov	r3, r0
 8002a76:	4618      	mov	r0, r3
 8002a78:	3710      	adds	r7, #16
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	20006670 	.word	0x20006670
 8002a84:	20006674 	.word	0x20006674

08002a88 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8002a88:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002a8c:	b086      	sub	sp, #24
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002a94:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8002a96:	2300      	movs	r3, #0
 8002a98:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8002a9a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002a9e:	a320      	add	r3, pc, #128	; (adr r3, 8002b20 <UTILS_NanosecondsToTimespec+0x98>)
 8002aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aa4:	f7fd fc34 	bl	8000310 <__aeabi_ldivmod>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	460b      	mov	r3, r1
 8002aac:	6879      	ldr	r1, [r7, #4]
 8002aae:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8002ab2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002ab6:	a31a      	add	r3, pc, #104	; (adr r3, 8002b20 <UTILS_NanosecondsToTimespec+0x98>)
 8002ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002abc:	f7fd fc28 	bl	8000310 <__aeabi_ldivmod>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	da20      	bge.n	8002b0e <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	4a11      	ldr	r2, [pc, #68]	; (8002b18 <UTILS_NanosecondsToTimespec+0x90>)
 8002ad2:	fb82 1203 	smull	r1, r2, r2, r3
 8002ad6:	1712      	asrs	r2, r2, #28
 8002ad8:	17db      	asrs	r3, r3, #31
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	3301      	adds	r3, #1
 8002ade:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ae6:	6979      	ldr	r1, [r7, #20]
 8002ae8:	17c8      	asrs	r0, r1, #31
 8002aea:	460c      	mov	r4, r1
 8002aec:	4605      	mov	r5, r0
 8002aee:	ebb2 0804 	subs.w	r8, r2, r4
 8002af2:	eb63 0905 	sbc.w	r9, r3, r5
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	689a      	ldr	r2, [r3, #8]
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	4906      	ldr	r1, [pc, #24]	; (8002b1c <UTILS_NanosecondsToTimespec+0x94>)
 8002b04:	fb01 f303 	mul.w	r3, r1, r3
 8002b08:	441a      	add	r2, r3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	609a      	str	r2, [r3, #8]
    }
}
 8002b0e:	bf00      	nop
 8002b10:	3718      	adds	r7, #24
 8002b12:	46bd      	mov	sp, r7
 8002b14:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002b18:	44b82fa1 	.word	0x44b82fa1
 8002b1c:	3b9aca00 	.word	0x3b9aca00
 8002b20:	3b9aca00 	.word	0x3b9aca00
 8002b24:	00000000 	.word	0x00000000

08002b28 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8002b28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b2c:	b08e      	sub	sp, #56	; 0x38
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6278      	str	r0, [r7, #36]	; 0x24
 8002b32:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8002b34:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002b38:	2300      	movs	r3, #0
 8002b3a:	6013      	str	r3, [r2, #0]
 8002b3c:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8002b3e:	f04f 0200 	mov.w	r2, #0
 8002b42:	f04f 0300 	mov.w	r3, #0
 8002b46:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8002b4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f007 fda0 	bl	800a694 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8002b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b56:	17da      	asrs	r2, r3, #31
 8002b58:	61bb      	str	r3, [r7, #24]
 8002b5a:	61fa      	str	r2, [r7, #28]
 8002b5c:	f04f 0200 	mov.w	r2, #0
 8002b60:	f04f 0300 	mov.w	r3, #0
 8002b64:	69b9      	ldr	r1, [r7, #24]
 8002b66:	000b      	movs	r3, r1
 8002b68:	2200      	movs	r2, #0
 8002b6a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8002b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b70:	2200      	movs	r2, #0
 8002b72:	461c      	mov	r4, r3
 8002b74:	4615      	mov	r5, r2
 8002b76:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002b7a:	1911      	adds	r1, r2, r4
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	416b      	adcs	r3, r5
 8002b80:	60fb      	str	r3, [r7, #12]
 8002b82:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002b86:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8002b8a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002b8e:	4602      	mov	r2, r0
 8002b90:	460b      	mov	r3, r1
 8002b92:	f04f 0400 	mov.w	r4, #0
 8002b96:	f04f 0500 	mov.w	r5, #0
 8002b9a:	015d      	lsls	r5, r3, #5
 8002b9c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8002ba0:	0154      	lsls	r4, r2, #5
 8002ba2:	4622      	mov	r2, r4
 8002ba4:	462b      	mov	r3, r5
 8002ba6:	ebb2 0800 	subs.w	r8, r2, r0
 8002baa:	eb63 0901 	sbc.w	r9, r3, r1
 8002bae:	f04f 0200 	mov.w	r2, #0
 8002bb2:	f04f 0300 	mov.w	r3, #0
 8002bb6:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8002bba:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8002bbe:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8002bc2:	4690      	mov	r8, r2
 8002bc4:	4699      	mov	r9, r3
 8002bc6:	eb18 0a00 	adds.w	sl, r8, r0
 8002bca:	eb49 0b01 	adc.w	fp, r9, r1
 8002bce:	f04f 0200 	mov.w	r2, #0
 8002bd2:	f04f 0300 	mov.w	r3, #0
 8002bd6:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002bda:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002bde:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002be2:	ebb2 040a 	subs.w	r4, r2, sl
 8002be6:	603c      	str	r4, [r7, #0]
 8002be8:	eb63 030b 	sbc.w	r3, r3, fp
 8002bec:	607b      	str	r3, [r7, #4]
 8002bee:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002bf2:	4623      	mov	r3, r4
 8002bf4:	181b      	adds	r3, r3, r0
 8002bf6:	613b      	str	r3, [r7, #16]
 8002bf8:	462b      	mov	r3, r5
 8002bfa:	eb41 0303 	adc.w	r3, r1, r3
 8002bfe:	617b      	str	r3, [r7, #20]
 8002c00:	6a3a      	ldr	r2, [r7, #32]
 8002c02:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002c06:	f7ff ff3f 	bl	8002a88 <UTILS_NanosecondsToTimespec>

    return 0;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3738      	adds	r7, #56	; 0x38
 8002c10:	46bd      	mov	sp, r7
 8002c12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08002c18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002c1e:	4b11      	ldr	r3, [pc, #68]	; (8002c64 <HAL_MspInit+0x4c>)
 8002c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c22:	4a10      	ldr	r2, [pc, #64]	; (8002c64 <HAL_MspInit+0x4c>)
 8002c24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c28:	6413      	str	r3, [r2, #64]	; 0x40
 8002c2a:	4b0e      	ldr	r3, [pc, #56]	; (8002c64 <HAL_MspInit+0x4c>)
 8002c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c32:	607b      	str	r3, [r7, #4]
 8002c34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c36:	4b0b      	ldr	r3, [pc, #44]	; (8002c64 <HAL_MspInit+0x4c>)
 8002c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c3a:	4a0a      	ldr	r2, [pc, #40]	; (8002c64 <HAL_MspInit+0x4c>)
 8002c3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c40:	6453      	str	r3, [r2, #68]	; 0x44
 8002c42:	4b08      	ldr	r3, [pc, #32]	; (8002c64 <HAL_MspInit+0x4c>)
 8002c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c4a:	603b      	str	r3, [r7, #0]
 8002c4c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002c4e:	2200      	movs	r2, #0
 8002c50:	210f      	movs	r1, #15
 8002c52:	f06f 0001 	mvn.w	r0, #1
 8002c56:	f001 f8fd 	bl	8003e54 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c5a:	bf00      	nop
 8002c5c:	3708      	adds	r7, #8
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	40023800 	.word	0x40023800

08002c68 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b08e      	sub	sp, #56	; 0x38
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002c70:	2300      	movs	r3, #0
 8002c72:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002c74:	2300      	movs	r3, #0
 8002c76:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002c78:	4b33      	ldr	r3, [pc, #204]	; (8002d48 <HAL_InitTick+0xe0>)
 8002c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7c:	4a32      	ldr	r2, [pc, #200]	; (8002d48 <HAL_InitTick+0xe0>)
 8002c7e:	f043 0310 	orr.w	r3, r3, #16
 8002c82:	6413      	str	r3, [r2, #64]	; 0x40
 8002c84:	4b30      	ldr	r3, [pc, #192]	; (8002d48 <HAL_InitTick+0xe0>)
 8002c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c88:	f003 0310 	and.w	r3, r3, #16
 8002c8c:	60fb      	str	r3, [r7, #12]
 8002c8e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002c90:	f107 0210 	add.w	r2, r7, #16
 8002c94:	f107 0314 	add.w	r3, r7, #20
 8002c98:	4611      	mov	r1, r2
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f002 fd74 	bl	8005788 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002ca0:	6a3b      	ldr	r3, [r7, #32]
 8002ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d103      	bne.n	8002cb2 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002caa:	f002 fd45 	bl	8005738 <HAL_RCC_GetPCLK1Freq>
 8002cae:	6378      	str	r0, [r7, #52]	; 0x34
 8002cb0:	e004      	b.n	8002cbc <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002cb2:	f002 fd41 	bl	8005738 <HAL_RCC_GetPCLK1Freq>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	005b      	lsls	r3, r3, #1
 8002cba:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002cbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cbe:	4a23      	ldr	r2, [pc, #140]	; (8002d4c <HAL_InitTick+0xe4>)
 8002cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc4:	0c9b      	lsrs	r3, r3, #18
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002cca:	4b21      	ldr	r3, [pc, #132]	; (8002d50 <HAL_InitTick+0xe8>)
 8002ccc:	4a21      	ldr	r2, [pc, #132]	; (8002d54 <HAL_InitTick+0xec>)
 8002cce:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002cd0:	4b1f      	ldr	r3, [pc, #124]	; (8002d50 <HAL_InitTick+0xe8>)
 8002cd2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002cd6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002cd8:	4a1d      	ldr	r2, [pc, #116]	; (8002d50 <HAL_InitTick+0xe8>)
 8002cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cdc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002cde:	4b1c      	ldr	r3, [pc, #112]	; (8002d50 <HAL_InitTick+0xe8>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ce4:	4b1a      	ldr	r3, [pc, #104]	; (8002d50 <HAL_InitTick+0xe8>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cea:	4b19      	ldr	r3, [pc, #100]	; (8002d50 <HAL_InitTick+0xe8>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002cf0:	4817      	ldr	r0, [pc, #92]	; (8002d50 <HAL_InitTick+0xe8>)
 8002cf2:	f003 f9a3 	bl	800603c <HAL_TIM_Base_Init>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002cfc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d11b      	bne.n	8002d3c <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002d04:	4812      	ldr	r0, [pc, #72]	; (8002d50 <HAL_InitTick+0xe8>)
 8002d06:	f003 f9fb 	bl	8006100 <HAL_TIM_Base_Start_IT>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002d10:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d111      	bne.n	8002d3c <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002d18:	2036      	movs	r0, #54	; 0x36
 8002d1a:	f001 f8b7 	bl	8003e8c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2b0f      	cmp	r3, #15
 8002d22:	d808      	bhi.n	8002d36 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002d24:	2200      	movs	r2, #0
 8002d26:	6879      	ldr	r1, [r7, #4]
 8002d28:	2036      	movs	r0, #54	; 0x36
 8002d2a:	f001 f893 	bl	8003e54 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002d2e:	4a0a      	ldr	r2, [pc, #40]	; (8002d58 <HAL_InitTick+0xf0>)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6013      	str	r3, [r2, #0]
 8002d34:	e002      	b.n	8002d3c <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002d3c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3738      	adds	r7, #56	; 0x38
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	40023800 	.word	0x40023800
 8002d4c:	431bde83 	.word	0x431bde83
 8002d50:	20006678 	.word	0x20006678
 8002d54:	40001000 	.word	0x40001000
 8002d58:	20000008 	.word	0x20000008

08002d5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d60:	e7fe      	b.n	8002d60 <NMI_Handler+0x4>

08002d62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d62:	b480      	push	{r7}
 8002d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d66:	e7fe      	b.n	8002d66 <HardFault_Handler+0x4>

08002d68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d6c:	e7fe      	b.n	8002d6c <MemManage_Handler+0x4>

08002d6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d6e:	b480      	push	{r7}
 8002d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d72:	e7fe      	b.n	8002d72 <BusFault_Handler+0x4>

08002d74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d74:	b480      	push	{r7}
 8002d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d78:	e7fe      	b.n	8002d78 <UsageFault_Handler+0x4>

08002d7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d7a:	b480      	push	{r7}
 8002d7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d7e:	bf00      	nop
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr

08002d88 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002d8c:	4802      	ldr	r0, [pc, #8]	; (8002d98 <DMA1_Stream1_IRQHandler+0x10>)
 8002d8e:	f001 fa2b 	bl	80041e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002d92:	bf00      	nop
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	200069c8 	.word	0x200069c8

08002d9c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002da0:	4802      	ldr	r0, [pc, #8]	; (8002dac <DMA1_Stream3_IRQHandler+0x10>)
 8002da2:	f001 fa21 	bl	80041e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002da6:	bf00      	nop
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	20006968 	.word	0x20006968

08002db0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002db4:	4802      	ldr	r0, [pc, #8]	; (8002dc0 <USART3_IRQHandler+0x10>)
 8002db6:	f004 fb3d 	bl	8007434 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002dba:	bf00      	nop
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	200068e0 	.word	0x200068e0

08002dc4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002dc8:	4802      	ldr	r0, [pc, #8]	; (8002dd4 <TIM6_DAC_IRQHandler+0x10>)
 8002dca:	f003 fb0f 	bl	80063ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002dce:	bf00      	nop
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	20006678 	.word	0x20006678

08002dd8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	af00      	add	r7, sp, #0
  return 1;
 8002ddc:	2301      	movs	r3, #1
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <_kill>:

int _kill(int pid, int sig)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002df2:	f019 fda3 	bl	801c93c <__errno>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2216      	movs	r2, #22
 8002dfa:	601a      	str	r2, [r3, #0]
  return -1;
 8002dfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3708      	adds	r7, #8
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <_exit>:

void _exit (int status)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002e10:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f7ff ffe7 	bl	8002de8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002e1a:	e7fe      	b.n	8002e1a <_exit+0x12>

08002e1c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b086      	sub	sp, #24
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	60b9      	str	r1, [r7, #8]
 8002e26:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e28:	2300      	movs	r3, #0
 8002e2a:	617b      	str	r3, [r7, #20]
 8002e2c:	e00a      	b.n	8002e44 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002e2e:	f3af 8000 	nop.w
 8002e32:	4601      	mov	r1, r0
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	1c5a      	adds	r2, r3, #1
 8002e38:	60ba      	str	r2, [r7, #8]
 8002e3a:	b2ca      	uxtb	r2, r1
 8002e3c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	3301      	adds	r3, #1
 8002e42:	617b      	str	r3, [r7, #20]
 8002e44:	697a      	ldr	r2, [r7, #20]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	dbf0      	blt.n	8002e2e <_read+0x12>
  }

  return len;
 8002e4c:	687b      	ldr	r3, [r7, #4]
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3718      	adds	r7, #24
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e56:	b580      	push	{r7, lr}
 8002e58:	b086      	sub	sp, #24
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	60f8      	str	r0, [r7, #12]
 8002e5e:	60b9      	str	r1, [r7, #8]
 8002e60:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e62:	2300      	movs	r3, #0
 8002e64:	617b      	str	r3, [r7, #20]
 8002e66:	e009      	b.n	8002e7c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	1c5a      	adds	r2, r3, #1
 8002e6c:	60ba      	str	r2, [r7, #8]
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	4618      	mov	r0, r3
 8002e72:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	3301      	adds	r3, #1
 8002e7a:	617b      	str	r3, [r7, #20]
 8002e7c:	697a      	ldr	r2, [r7, #20]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	dbf1      	blt.n	8002e68 <_write+0x12>
  }
  return len;
 8002e84:	687b      	ldr	r3, [r7, #4]
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3718      	adds	r7, #24
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}

08002e8e <_close>:

int _close(int file)
{
 8002e8e:	b480      	push	{r7}
 8002e90:	b083      	sub	sp, #12
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002e96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	370c      	adds	r7, #12
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr

08002ea6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ea6:	b480      	push	{r7}
 8002ea8:	b083      	sub	sp, #12
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
 8002eae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002eb6:	605a      	str	r2, [r3, #4]
  return 0;
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	370c      	adds	r7, #12
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr

08002ec6 <_isatty>:

int _isatty(int file)
{
 8002ec6:	b480      	push	{r7}
 8002ec8:	b083      	sub	sp, #12
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002ece:	2301      	movs	r3, #1
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b085      	sub	sp, #20
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	60b9      	str	r1, [r7, #8]
 8002ee6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3714      	adds	r7, #20
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
	...

08002ef8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b086      	sub	sp, #24
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f00:	4a14      	ldr	r2, [pc, #80]	; (8002f54 <_sbrk+0x5c>)
 8002f02:	4b15      	ldr	r3, [pc, #84]	; (8002f58 <_sbrk+0x60>)
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f0c:	4b13      	ldr	r3, [pc, #76]	; (8002f5c <_sbrk+0x64>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d102      	bne.n	8002f1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f14:	4b11      	ldr	r3, [pc, #68]	; (8002f5c <_sbrk+0x64>)
 8002f16:	4a12      	ldr	r2, [pc, #72]	; (8002f60 <_sbrk+0x68>)
 8002f18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f1a:	4b10      	ldr	r3, [pc, #64]	; (8002f5c <_sbrk+0x64>)
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4413      	add	r3, r2
 8002f22:	693a      	ldr	r2, [r7, #16]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d207      	bcs.n	8002f38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f28:	f019 fd08 	bl	801c93c <__errno>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	220c      	movs	r2, #12
 8002f30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f36:	e009      	b.n	8002f4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f38:	4b08      	ldr	r3, [pc, #32]	; (8002f5c <_sbrk+0x64>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f3e:	4b07      	ldr	r3, [pc, #28]	; (8002f5c <_sbrk+0x64>)
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4413      	add	r3, r2
 8002f46:	4a05      	ldr	r2, [pc, #20]	; (8002f5c <_sbrk+0x64>)
 8002f48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3718      	adds	r7, #24
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	20080000 	.word	0x20080000
 8002f58:	00000400 	.word	0x00000400
 8002f5c:	200066c8 	.word	0x200066c8
 8002f60:	20010cf0 	.word	0x20010cf0

08002f64 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f64:	b480      	push	{r7}
 8002f66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f68:	4b06      	ldr	r3, [pc, #24]	; (8002f84 <SystemInit+0x20>)
 8002f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f6e:	4a05      	ldr	r2, [pc, #20]	; (8002f84 <SystemInit+0x20>)
 8002f70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f78:	bf00      	nop
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	e000ed00 	.word	0xe000ed00

08002f88 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim9;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b096      	sub	sp, #88	; 0x58
 8002f8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f8e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002f92:	2200      	movs	r2, #0
 8002f94:	601a      	str	r2, [r3, #0]
 8002f96:	605a      	str	r2, [r3, #4]
 8002f98:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f9a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	601a      	str	r2, [r3, #0]
 8002fa2:	605a      	str	r2, [r3, #4]
 8002fa4:	609a      	str	r2, [r3, #8]
 8002fa6:	60da      	str	r2, [r3, #12]
 8002fa8:	611a      	str	r2, [r3, #16]
 8002faa:	615a      	str	r2, [r3, #20]
 8002fac:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002fae:	1d3b      	adds	r3, r7, #4
 8002fb0:	222c      	movs	r2, #44	; 0x2c
 8002fb2:	2100      	movs	r1, #0
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f019 fbc5 	bl	801c744 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002fba:	4b4b      	ldr	r3, [pc, #300]	; (80030e8 <MX_TIM1_Init+0x160>)
 8002fbc:	4a4b      	ldr	r2, [pc, #300]	; (80030ec <MX_TIM1_Init+0x164>)
 8002fbe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002fc0:	4b49      	ldr	r3, [pc, #292]	; (80030e8 <MX_TIM1_Init+0x160>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fc6:	4b48      	ldr	r3, [pc, #288]	; (80030e8 <MX_TIM1_Init+0x160>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002fcc:	4b46      	ldr	r3, [pc, #280]	; (80030e8 <MX_TIM1_Init+0x160>)
 8002fce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002fd2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fd4:	4b44      	ldr	r3, [pc, #272]	; (80030e8 <MX_TIM1_Init+0x160>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002fda:	4b43      	ldr	r3, [pc, #268]	; (80030e8 <MX_TIM1_Init+0x160>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fe0:	4b41      	ldr	r3, [pc, #260]	; (80030e8 <MX_TIM1_Init+0x160>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002fe6:	4840      	ldr	r0, [pc, #256]	; (80030e8 <MX_TIM1_Init+0x160>)
 8002fe8:	f003 f902 	bl	80061f0 <HAL_TIM_PWM_Init>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d001      	beq.n	8002ff6 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8002ff2:	f7ff fca7 	bl	8002944 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ffe:	2300      	movs	r3, #0
 8003000:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003002:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003006:	4619      	mov	r1, r3
 8003008:	4837      	ldr	r0, [pc, #220]	; (80030e8 <MX_TIM1_Init+0x160>)
 800300a:	f003 ff49 	bl	8006ea0 <HAL_TIMEx_MasterConfigSynchronization>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d001      	beq.n	8003018 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8003014:	f7ff fc96 	bl	8002944 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003018:	2360      	movs	r3, #96	; 0x60
 800301a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800301c:	2300      	movs	r3, #0
 800301e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003020:	2300      	movs	r3, #0
 8003022:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003024:	2300      	movs	r3, #0
 8003026:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003028:	2300      	movs	r3, #0
 800302a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800302c:	2300      	movs	r3, #0
 800302e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003030:	2300      	movs	r3, #0
 8003032:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003034:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003038:	2200      	movs	r2, #0
 800303a:	4619      	mov	r1, r3
 800303c:	482a      	ldr	r0, [pc, #168]	; (80030e8 <MX_TIM1_Init+0x160>)
 800303e:	f003 faf5 	bl	800662c <HAL_TIM_PWM_ConfigChannel>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d001      	beq.n	800304c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8003048:	f7ff fc7c 	bl	8002944 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800304c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003050:	2204      	movs	r2, #4
 8003052:	4619      	mov	r1, r3
 8003054:	4824      	ldr	r0, [pc, #144]	; (80030e8 <MX_TIM1_Init+0x160>)
 8003056:	f003 fae9 	bl	800662c <HAL_TIM_PWM_ConfigChannel>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d001      	beq.n	8003064 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8003060:	f7ff fc70 	bl	8002944 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003064:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003068:	2208      	movs	r2, #8
 800306a:	4619      	mov	r1, r3
 800306c:	481e      	ldr	r0, [pc, #120]	; (80030e8 <MX_TIM1_Init+0x160>)
 800306e:	f003 fadd 	bl	800662c <HAL_TIM_PWM_ConfigChannel>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d001      	beq.n	800307c <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8003078:	f7ff fc64 	bl	8002944 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800307c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003080:	220c      	movs	r2, #12
 8003082:	4619      	mov	r1, r3
 8003084:	4818      	ldr	r0, [pc, #96]	; (80030e8 <MX_TIM1_Init+0x160>)
 8003086:	f003 fad1 	bl	800662c <HAL_TIM_PWM_ConfigChannel>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d001      	beq.n	8003094 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8003090:	f7ff fc58 	bl	8002944 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003094:	2300      	movs	r3, #0
 8003096:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003098:	2300      	movs	r3, #0
 800309a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800309c:	2300      	movs	r3, #0
 800309e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80030a0:	2300      	movs	r3, #0
 80030a2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80030a4:	2300      	movs	r3, #0
 80030a6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80030a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80030ac:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80030ae:	2300      	movs	r3, #0
 80030b0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80030b2:	2300      	movs	r3, #0
 80030b4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80030b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030ba:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80030bc:	2300      	movs	r3, #0
 80030be:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80030c0:	2300      	movs	r3, #0
 80030c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80030c4:	1d3b      	adds	r3, r7, #4
 80030c6:	4619      	mov	r1, r3
 80030c8:	4807      	ldr	r0, [pc, #28]	; (80030e8 <MX_TIM1_Init+0x160>)
 80030ca:	f003 ff77 	bl	8006fbc <HAL_TIMEx_ConfigBreakDeadTime>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d001      	beq.n	80030d8 <MX_TIM1_Init+0x150>
  {
    Error_Handler();
 80030d4:	f7ff fc36 	bl	8002944 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80030d8:	4803      	ldr	r0, [pc, #12]	; (80030e8 <MX_TIM1_Init+0x160>)
 80030da:	f000 fb7d 	bl	80037d8 <HAL_TIM_MspPostInit>

}
 80030de:	bf00      	nop
 80030e0:	3758      	adds	r7, #88	; 0x58
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	200066cc 	.word	0x200066cc
 80030ec:	40010000 	.word	0x40010000

080030f0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b08c      	sub	sp, #48	; 0x30
 80030f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80030f6:	f107 030c 	add.w	r3, r7, #12
 80030fa:	2224      	movs	r2, #36	; 0x24
 80030fc:	2100      	movs	r1, #0
 80030fe:	4618      	mov	r0, r3
 8003100:	f019 fb20 	bl	801c744 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003104:	463b      	mov	r3, r7
 8003106:	2200      	movs	r2, #0
 8003108:	601a      	str	r2, [r3, #0]
 800310a:	605a      	str	r2, [r3, #4]
 800310c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800310e:	4b21      	ldr	r3, [pc, #132]	; (8003194 <MX_TIM2_Init+0xa4>)
 8003110:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003114:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003116:	4b1f      	ldr	r3, [pc, #124]	; (8003194 <MX_TIM2_Init+0xa4>)
 8003118:	2200      	movs	r2, #0
 800311a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800311c:	4b1d      	ldr	r3, [pc, #116]	; (8003194 <MX_TIM2_Init+0xa4>)
 800311e:	2200      	movs	r2, #0
 8003120:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8003122:	4b1c      	ldr	r3, [pc, #112]	; (8003194 <MX_TIM2_Init+0xa4>)
 8003124:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003128:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800312a:	4b1a      	ldr	r3, [pc, #104]	; (8003194 <MX_TIM2_Init+0xa4>)
 800312c:	2200      	movs	r2, #0
 800312e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003130:	4b18      	ldr	r3, [pc, #96]	; (8003194 <MX_TIM2_Init+0xa4>)
 8003132:	2200      	movs	r2, #0
 8003134:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003136:	2301      	movs	r3, #1
 8003138:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800313a:	2300      	movs	r3, #0
 800313c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800313e:	2301      	movs	r3, #1
 8003140:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003142:	2300      	movs	r3, #0
 8003144:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003146:	2300      	movs	r3, #0
 8003148:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800314a:	2300      	movs	r3, #0
 800314c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800314e:	2301      	movs	r3, #1
 8003150:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003152:	2300      	movs	r3, #0
 8003154:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003156:	2300      	movs	r3, #0
 8003158:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800315a:	f107 030c 	add.w	r3, r7, #12
 800315e:	4619      	mov	r1, r3
 8003160:	480c      	ldr	r0, [pc, #48]	; (8003194 <MX_TIM2_Init+0xa4>)
 8003162:	f003 f89d 	bl	80062a0 <HAL_TIM_Encoder_Init>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d001      	beq.n	8003170 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 800316c:	f7ff fbea 	bl	8002944 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003170:	2300      	movs	r3, #0
 8003172:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003174:	2300      	movs	r3, #0
 8003176:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003178:	463b      	mov	r3, r7
 800317a:	4619      	mov	r1, r3
 800317c:	4805      	ldr	r0, [pc, #20]	; (8003194 <MX_TIM2_Init+0xa4>)
 800317e:	f003 fe8f 	bl	8006ea0 <HAL_TIMEx_MasterConfigSynchronization>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d001      	beq.n	800318c <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8003188:	f7ff fbdc 	bl	8002944 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800318c:	bf00      	nop
 800318e:	3730      	adds	r7, #48	; 0x30
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}
 8003194:	20006718 	.word	0x20006718

08003198 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b08c      	sub	sp, #48	; 0x30
 800319c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800319e:	f107 030c 	add.w	r3, r7, #12
 80031a2:	2224      	movs	r2, #36	; 0x24
 80031a4:	2100      	movs	r1, #0
 80031a6:	4618      	mov	r0, r3
 80031a8:	f019 facc 	bl	801c744 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031ac:	463b      	mov	r3, r7
 80031ae:	2200      	movs	r2, #0
 80031b0:	601a      	str	r2, [r3, #0]
 80031b2:	605a      	str	r2, [r3, #4]
 80031b4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80031b6:	4b21      	ldr	r3, [pc, #132]	; (800323c <MX_TIM3_Init+0xa4>)
 80031b8:	4a21      	ldr	r2, [pc, #132]	; (8003240 <MX_TIM3_Init+0xa8>)
 80031ba:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80031bc:	4b1f      	ldr	r3, [pc, #124]	; (800323c <MX_TIM3_Init+0xa4>)
 80031be:	2200      	movs	r2, #0
 80031c0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031c2:	4b1e      	ldr	r3, [pc, #120]	; (800323c <MX_TIM3_Init+0xa4>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80031c8:	4b1c      	ldr	r3, [pc, #112]	; (800323c <MX_TIM3_Init+0xa4>)
 80031ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80031ce:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031d0:	4b1a      	ldr	r3, [pc, #104]	; (800323c <MX_TIM3_Init+0xa4>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031d6:	4b19      	ldr	r3, [pc, #100]	; (800323c <MX_TIM3_Init+0xa4>)
 80031d8:	2200      	movs	r2, #0
 80031da:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80031dc:	2301      	movs	r3, #1
 80031de:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80031e0:	2300      	movs	r3, #0
 80031e2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80031e4:	2301      	movs	r3, #1
 80031e6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80031e8:	2300      	movs	r3, #0
 80031ea:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80031ec:	2300      	movs	r3, #0
 80031ee:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80031f0:	2300      	movs	r3, #0
 80031f2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80031f4:	2301      	movs	r3, #1
 80031f6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80031f8:	2300      	movs	r3, #0
 80031fa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80031fc:	2300      	movs	r3, #0
 80031fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003200:	f107 030c 	add.w	r3, r7, #12
 8003204:	4619      	mov	r1, r3
 8003206:	480d      	ldr	r0, [pc, #52]	; (800323c <MX_TIM3_Init+0xa4>)
 8003208:	f003 f84a 	bl	80062a0 <HAL_TIM_Encoder_Init>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d001      	beq.n	8003216 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8003212:	f7ff fb97 	bl	8002944 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003216:	2300      	movs	r3, #0
 8003218:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800321a:	2300      	movs	r3, #0
 800321c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800321e:	463b      	mov	r3, r7
 8003220:	4619      	mov	r1, r3
 8003222:	4806      	ldr	r0, [pc, #24]	; (800323c <MX_TIM3_Init+0xa4>)
 8003224:	f003 fe3c 	bl	8006ea0 <HAL_TIMEx_MasterConfigSynchronization>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d001      	beq.n	8003232 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800322e:	f7ff fb89 	bl	8002944 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003232:	bf00      	nop
 8003234:	3730      	adds	r7, #48	; 0x30
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	20006764 	.word	0x20006764
 8003240:	40000400 	.word	0x40000400

08003244 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b08c      	sub	sp, #48	; 0x30
 8003248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800324a:	f107 030c 	add.w	r3, r7, #12
 800324e:	2224      	movs	r2, #36	; 0x24
 8003250:	2100      	movs	r1, #0
 8003252:	4618      	mov	r0, r3
 8003254:	f019 fa76 	bl	801c744 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003258:	463b      	mov	r3, r7
 800325a:	2200      	movs	r2, #0
 800325c:	601a      	str	r2, [r3, #0]
 800325e:	605a      	str	r2, [r3, #4]
 8003260:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003262:	4b21      	ldr	r3, [pc, #132]	; (80032e8 <MX_TIM4_Init+0xa4>)
 8003264:	4a21      	ldr	r2, [pc, #132]	; (80032ec <MX_TIM4_Init+0xa8>)
 8003266:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003268:	4b1f      	ldr	r3, [pc, #124]	; (80032e8 <MX_TIM4_Init+0xa4>)
 800326a:	2200      	movs	r2, #0
 800326c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800326e:	4b1e      	ldr	r3, [pc, #120]	; (80032e8 <MX_TIM4_Init+0xa4>)
 8003270:	2200      	movs	r2, #0
 8003272:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003274:	4b1c      	ldr	r3, [pc, #112]	; (80032e8 <MX_TIM4_Init+0xa4>)
 8003276:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800327a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800327c:	4b1a      	ldr	r3, [pc, #104]	; (80032e8 <MX_TIM4_Init+0xa4>)
 800327e:	2200      	movs	r2, #0
 8003280:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003282:	4b19      	ldr	r3, [pc, #100]	; (80032e8 <MX_TIM4_Init+0xa4>)
 8003284:	2200      	movs	r2, #0
 8003286:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003288:	2301      	movs	r3, #1
 800328a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800328c:	2300      	movs	r3, #0
 800328e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003290:	2301      	movs	r3, #1
 8003292:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003294:	2300      	movs	r3, #0
 8003296:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003298:	2300      	movs	r3, #0
 800329a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800329c:	2300      	movs	r3, #0
 800329e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80032a0:	2301      	movs	r3, #1
 80032a2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80032a4:	2300      	movs	r3, #0
 80032a6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80032a8:	2300      	movs	r3, #0
 80032aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80032ac:	f107 030c 	add.w	r3, r7, #12
 80032b0:	4619      	mov	r1, r3
 80032b2:	480d      	ldr	r0, [pc, #52]	; (80032e8 <MX_TIM4_Init+0xa4>)
 80032b4:	f002 fff4 	bl	80062a0 <HAL_TIM_Encoder_Init>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d001      	beq.n	80032c2 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80032be:	f7ff fb41 	bl	8002944 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032c2:	2300      	movs	r3, #0
 80032c4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032c6:	2300      	movs	r3, #0
 80032c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80032ca:	463b      	mov	r3, r7
 80032cc:	4619      	mov	r1, r3
 80032ce:	4806      	ldr	r0, [pc, #24]	; (80032e8 <MX_TIM4_Init+0xa4>)
 80032d0:	f003 fde6 	bl	8006ea0 <HAL_TIMEx_MasterConfigSynchronization>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d001      	beq.n	80032de <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80032da:	f7ff fb33 	bl	8002944 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80032de:	bf00      	nop
 80032e0:	3730      	adds	r7, #48	; 0x30
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	200067b0 	.word	0x200067b0
 80032ec:	40000800 	.word	0x40000800

080032f0 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b08c      	sub	sp, #48	; 0x30
 80032f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80032f6:	f107 030c 	add.w	r3, r7, #12
 80032fa:	2224      	movs	r2, #36	; 0x24
 80032fc:	2100      	movs	r1, #0
 80032fe:	4618      	mov	r0, r3
 8003300:	f019 fa20 	bl	801c744 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003304:	463b      	mov	r3, r7
 8003306:	2200      	movs	r2, #0
 8003308:	601a      	str	r2, [r3, #0]
 800330a:	605a      	str	r2, [r3, #4]
 800330c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800330e:	4b21      	ldr	r3, [pc, #132]	; (8003394 <MX_TIM5_Init+0xa4>)
 8003310:	4a21      	ldr	r2, [pc, #132]	; (8003398 <MX_TIM5_Init+0xa8>)
 8003312:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8003314:	4b1f      	ldr	r3, [pc, #124]	; (8003394 <MX_TIM5_Init+0xa4>)
 8003316:	2200      	movs	r2, #0
 8003318:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800331a:	4b1e      	ldr	r3, [pc, #120]	; (8003394 <MX_TIM5_Init+0xa4>)
 800331c:	2200      	movs	r2, #0
 800331e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8003320:	4b1c      	ldr	r3, [pc, #112]	; (8003394 <MX_TIM5_Init+0xa4>)
 8003322:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003326:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003328:	4b1a      	ldr	r3, [pc, #104]	; (8003394 <MX_TIM5_Init+0xa4>)
 800332a:	2200      	movs	r2, #0
 800332c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800332e:	4b19      	ldr	r3, [pc, #100]	; (8003394 <MX_TIM5_Init+0xa4>)
 8003330:	2200      	movs	r2, #0
 8003332:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003334:	2301      	movs	r3, #1
 8003336:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003338:	2300      	movs	r3, #0
 800333a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800333c:	2301      	movs	r3, #1
 800333e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003340:	2300      	movs	r3, #0
 8003342:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003344:	2300      	movs	r3, #0
 8003346:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003348:	2300      	movs	r3, #0
 800334a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800334c:	2301      	movs	r3, #1
 800334e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003350:	2300      	movs	r3, #0
 8003352:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003354:	2300      	movs	r3, #0
 8003356:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8003358:	f107 030c 	add.w	r3, r7, #12
 800335c:	4619      	mov	r1, r3
 800335e:	480d      	ldr	r0, [pc, #52]	; (8003394 <MX_TIM5_Init+0xa4>)
 8003360:	f002 ff9e 	bl	80062a0 <HAL_TIM_Encoder_Init>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d001      	beq.n	800336e <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 800336a:	f7ff faeb 	bl	8002944 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800336e:	2300      	movs	r3, #0
 8003370:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003372:	2300      	movs	r3, #0
 8003374:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003376:	463b      	mov	r3, r7
 8003378:	4619      	mov	r1, r3
 800337a:	4806      	ldr	r0, [pc, #24]	; (8003394 <MX_TIM5_Init+0xa4>)
 800337c:	f003 fd90 	bl	8006ea0 <HAL_TIMEx_MasterConfigSynchronization>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d001      	beq.n	800338a <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8003386:	f7ff fadd 	bl	8002944 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800338a:	bf00      	nop
 800338c:	3730      	adds	r7, #48	; 0x30
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	200067fc 	.word	0x200067fc
 8003398:	40000c00 	.word	0x40000c00

0800339c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b08c      	sub	sp, #48	; 0x30
 80033a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80033a2:	f107 030c 	add.w	r3, r7, #12
 80033a6:	2224      	movs	r2, #36	; 0x24
 80033a8:	2100      	movs	r1, #0
 80033aa:	4618      	mov	r0, r3
 80033ac:	f019 f9ca 	bl	801c744 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033b0:	463b      	mov	r3, r7
 80033b2:	2200      	movs	r2, #0
 80033b4:	601a      	str	r2, [r3, #0]
 80033b6:	605a      	str	r2, [r3, #4]
 80033b8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80033ba:	4b23      	ldr	r3, [pc, #140]	; (8003448 <MX_TIM8_Init+0xac>)
 80033bc:	4a23      	ldr	r2, [pc, #140]	; (800344c <MX_TIM8_Init+0xb0>)
 80033be:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80033c0:	4b21      	ldr	r3, [pc, #132]	; (8003448 <MX_TIM8_Init+0xac>)
 80033c2:	2200      	movs	r2, #0
 80033c4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033c6:	4b20      	ldr	r3, [pc, #128]	; (8003448 <MX_TIM8_Init+0xac>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80033cc:	4b1e      	ldr	r3, [pc, #120]	; (8003448 <MX_TIM8_Init+0xac>)
 80033ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80033d2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033d4:	4b1c      	ldr	r3, [pc, #112]	; (8003448 <MX_TIM8_Init+0xac>)
 80033d6:	2200      	movs	r2, #0
 80033d8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80033da:	4b1b      	ldr	r3, [pc, #108]	; (8003448 <MX_TIM8_Init+0xac>)
 80033dc:	2200      	movs	r2, #0
 80033de:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033e0:	4b19      	ldr	r3, [pc, #100]	; (8003448 <MX_TIM8_Init+0xac>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80033e6:	2301      	movs	r3, #1
 80033e8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80033ea:	2300      	movs	r3, #0
 80033ec:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80033ee:	2301      	movs	r3, #1
 80033f0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80033f2:	2300      	movs	r3, #0
 80033f4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80033f6:	2300      	movs	r3, #0
 80033f8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80033fa:	2300      	movs	r3, #0
 80033fc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80033fe:	2301      	movs	r3, #1
 8003400:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003402:	2300      	movs	r3, #0
 8003404:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003406:	2300      	movs	r3, #0
 8003408:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 800340a:	f107 030c 	add.w	r3, r7, #12
 800340e:	4619      	mov	r1, r3
 8003410:	480d      	ldr	r0, [pc, #52]	; (8003448 <MX_TIM8_Init+0xac>)
 8003412:	f002 ff45 	bl	80062a0 <HAL_TIM_Encoder_Init>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d001      	beq.n	8003420 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 800341c:	f7ff fa92 	bl	8002944 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003420:	2300      	movs	r3, #0
 8003422:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003424:	2300      	movs	r3, #0
 8003426:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003428:	2300      	movs	r3, #0
 800342a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800342c:	463b      	mov	r3, r7
 800342e:	4619      	mov	r1, r3
 8003430:	4805      	ldr	r0, [pc, #20]	; (8003448 <MX_TIM8_Init+0xac>)
 8003432:	f003 fd35 	bl	8006ea0 <HAL_TIMEx_MasterConfigSynchronization>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d001      	beq.n	8003440 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 800343c:	f7ff fa82 	bl	8002944 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8003440:	bf00      	nop
 8003442:	3730      	adds	r7, #48	; 0x30
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	20006848 	.word	0x20006848
 800344c:	40010400 	.word	0x40010400

08003450 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b088      	sub	sp, #32
 8003454:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003456:	1d3b      	adds	r3, r7, #4
 8003458:	2200      	movs	r2, #0
 800345a:	601a      	str	r2, [r3, #0]
 800345c:	605a      	str	r2, [r3, #4]
 800345e:	609a      	str	r2, [r3, #8]
 8003460:	60da      	str	r2, [r3, #12]
 8003462:	611a      	str	r2, [r3, #16]
 8003464:	615a      	str	r2, [r3, #20]
 8003466:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8003468:	4b1f      	ldr	r3, [pc, #124]	; (80034e8 <MX_TIM9_Init+0x98>)
 800346a:	4a20      	ldr	r2, [pc, #128]	; (80034ec <MX_TIM9_Init+0x9c>)
 800346c:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 800346e:	4b1e      	ldr	r3, [pc, #120]	; (80034e8 <MX_TIM9_Init+0x98>)
 8003470:	2200      	movs	r2, #0
 8003472:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003474:	4b1c      	ldr	r3, [pc, #112]	; (80034e8 <MX_TIM9_Init+0x98>)
 8003476:	2200      	movs	r2, #0
 8003478:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 800347a:	4b1b      	ldr	r3, [pc, #108]	; (80034e8 <MX_TIM9_Init+0x98>)
 800347c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003480:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003482:	4b19      	ldr	r3, [pc, #100]	; (80034e8 <MX_TIM9_Init+0x98>)
 8003484:	2200      	movs	r2, #0
 8003486:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003488:	4b17      	ldr	r3, [pc, #92]	; (80034e8 <MX_TIM9_Init+0x98>)
 800348a:	2200      	movs	r2, #0
 800348c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 800348e:	4816      	ldr	r0, [pc, #88]	; (80034e8 <MX_TIM9_Init+0x98>)
 8003490:	f002 feae 	bl	80061f0 <HAL_TIM_PWM_Init>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d001      	beq.n	800349e <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 800349a:	f7ff fa53 	bl	8002944 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800349e:	2360      	movs	r3, #96	; 0x60
 80034a0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80034a2:	2300      	movs	r3, #0
 80034a4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80034a6:	2300      	movs	r3, #0
 80034a8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80034aa:	2300      	movs	r3, #0
 80034ac:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80034ae:	1d3b      	adds	r3, r7, #4
 80034b0:	2200      	movs	r2, #0
 80034b2:	4619      	mov	r1, r3
 80034b4:	480c      	ldr	r0, [pc, #48]	; (80034e8 <MX_TIM9_Init+0x98>)
 80034b6:	f003 f8b9 	bl	800662c <HAL_TIM_PWM_ConfigChannel>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d001      	beq.n	80034c4 <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 80034c0:	f7ff fa40 	bl	8002944 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80034c4:	1d3b      	adds	r3, r7, #4
 80034c6:	2204      	movs	r2, #4
 80034c8:	4619      	mov	r1, r3
 80034ca:	4807      	ldr	r0, [pc, #28]	; (80034e8 <MX_TIM9_Init+0x98>)
 80034cc:	f003 f8ae 	bl	800662c <HAL_TIM_PWM_ConfigChannel>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d001      	beq.n	80034da <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 80034d6:	f7ff fa35 	bl	8002944 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 80034da:	4803      	ldr	r0, [pc, #12]	; (80034e8 <MX_TIM9_Init+0x98>)
 80034dc:	f000 f97c 	bl	80037d8 <HAL_TIM_MspPostInit>

}
 80034e0:	bf00      	nop
 80034e2:	3720      	adds	r7, #32
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	20006894 	.word	0x20006894
 80034ec:	40014000 	.word	0x40014000

080034f0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b085      	sub	sp, #20
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a13      	ldr	r2, [pc, #76]	; (800354c <HAL_TIM_PWM_MspInit+0x5c>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d10c      	bne.n	800351c <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003502:	4b13      	ldr	r3, [pc, #76]	; (8003550 <HAL_TIM_PWM_MspInit+0x60>)
 8003504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003506:	4a12      	ldr	r2, [pc, #72]	; (8003550 <HAL_TIM_PWM_MspInit+0x60>)
 8003508:	f043 0301 	orr.w	r3, r3, #1
 800350c:	6453      	str	r3, [r2, #68]	; 0x44
 800350e:	4b10      	ldr	r3, [pc, #64]	; (8003550 <HAL_TIM_PWM_MspInit+0x60>)
 8003510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003512:	f003 0301 	and.w	r3, r3, #1
 8003516:	60fb      	str	r3, [r7, #12]
 8003518:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM9_CLK_ENABLE();
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 800351a:	e010      	b.n	800353e <HAL_TIM_PWM_MspInit+0x4e>
  else if(tim_pwmHandle->Instance==TIM9)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a0c      	ldr	r2, [pc, #48]	; (8003554 <HAL_TIM_PWM_MspInit+0x64>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d10b      	bne.n	800353e <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8003526:	4b0a      	ldr	r3, [pc, #40]	; (8003550 <HAL_TIM_PWM_MspInit+0x60>)
 8003528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800352a:	4a09      	ldr	r2, [pc, #36]	; (8003550 <HAL_TIM_PWM_MspInit+0x60>)
 800352c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003530:	6453      	str	r3, [r2, #68]	; 0x44
 8003532:	4b07      	ldr	r3, [pc, #28]	; (8003550 <HAL_TIM_PWM_MspInit+0x60>)
 8003534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003536:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800353a:	60bb      	str	r3, [r7, #8]
 800353c:	68bb      	ldr	r3, [r7, #8]
}
 800353e:	bf00      	nop
 8003540:	3714      	adds	r7, #20
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	40010000 	.word	0x40010000
 8003550:	40023800 	.word	0x40023800
 8003554:	40014000 	.word	0x40014000

08003558 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b094      	sub	sp, #80	; 0x50
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003560:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003564:	2200      	movs	r2, #0
 8003566:	601a      	str	r2, [r3, #0]
 8003568:	605a      	str	r2, [r3, #4]
 800356a:	609a      	str	r2, [r3, #8]
 800356c:	60da      	str	r2, [r3, #12]
 800356e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003578:	d144      	bne.n	8003604 <HAL_TIM_Encoder_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800357a:	4b8e      	ldr	r3, [pc, #568]	; (80037b4 <HAL_TIM_Encoder_MspInit+0x25c>)
 800357c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357e:	4a8d      	ldr	r2, [pc, #564]	; (80037b4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003580:	f043 0301 	orr.w	r3, r3, #1
 8003584:	6413      	str	r3, [r2, #64]	; 0x40
 8003586:	4b8b      	ldr	r3, [pc, #556]	; (80037b4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358a:	f003 0301 	and.w	r3, r3, #1
 800358e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003590:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003592:	4b88      	ldr	r3, [pc, #544]	; (80037b4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003596:	4a87      	ldr	r2, [pc, #540]	; (80037b4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003598:	f043 0301 	orr.w	r3, r3, #1
 800359c:	6313      	str	r3, [r2, #48]	; 0x30
 800359e:	4b85      	ldr	r3, [pc, #532]	; (80037b4 <HAL_TIM_Encoder_MspInit+0x25c>)
 80035a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a2:	f003 0301 	and.w	r3, r3, #1
 80035a6:	637b      	str	r3, [r7, #52]	; 0x34
 80035a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035aa:	4b82      	ldr	r3, [pc, #520]	; (80037b4 <HAL_TIM_Encoder_MspInit+0x25c>)
 80035ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ae:	4a81      	ldr	r2, [pc, #516]	; (80037b4 <HAL_TIM_Encoder_MspInit+0x25c>)
 80035b0:	f043 0302 	orr.w	r3, r3, #2
 80035b4:	6313      	str	r3, [r2, #48]	; 0x30
 80035b6:	4b7f      	ldr	r3, [pc, #508]	; (80037b4 <HAL_TIM_Encoder_MspInit+0x25c>)
 80035b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ba:	f003 0302 	and.w	r3, r3, #2
 80035be:	633b      	str	r3, [r7, #48]	; 0x30
 80035c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = MOTOR1_CHA_Pin;
 80035c2:	2320      	movs	r3, #32
 80035c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035c6:	2302      	movs	r3, #2
 80035c8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ca:	2300      	movs	r3, #0
 80035cc:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035ce:	2300      	movs	r3, #0
 80035d0:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80035d2:	2301      	movs	r3, #1
 80035d4:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(MOTOR1_CHA_GPIO_Port, &GPIO_InitStruct);
 80035d6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80035da:	4619      	mov	r1, r3
 80035dc:	4876      	ldr	r0, [pc, #472]	; (80037b8 <HAL_TIM_Encoder_MspInit+0x260>)
 80035de:	f001 f879 	bl	80046d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTOR1_CHB_Pin;
 80035e2:	2308      	movs	r3, #8
 80035e4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035e6:	2302      	movs	r3, #2
 80035e8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ea:	2300      	movs	r3, #0
 80035ec:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035ee:	2300      	movs	r3, #0
 80035f0:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80035f2:	2301      	movs	r3, #1
 80035f4:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(MOTOR1_CHB_GPIO_Port, &GPIO_InitStruct);
 80035f6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80035fa:	4619      	mov	r1, r3
 80035fc:	486f      	ldr	r0, [pc, #444]	; (80037bc <HAL_TIM_Encoder_MspInit+0x264>)
 80035fe:	f001 f869 	bl	80046d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8003602:	e0d3      	b.n	80037ac <HAL_TIM_Encoder_MspInit+0x254>
  else if(tim_encoderHandle->Instance==TIM3)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a6d      	ldr	r2, [pc, #436]	; (80037c0 <HAL_TIM_Encoder_MspInit+0x268>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d144      	bne.n	8003698 <HAL_TIM_Encoder_MspInit+0x140>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800360e:	4b69      	ldr	r3, [pc, #420]	; (80037b4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003612:	4a68      	ldr	r2, [pc, #416]	; (80037b4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003614:	f043 0302 	orr.w	r3, r3, #2
 8003618:	6413      	str	r3, [r2, #64]	; 0x40
 800361a:	4b66      	ldr	r3, [pc, #408]	; (80037b4 <HAL_TIM_Encoder_MspInit+0x25c>)
 800361c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361e:	f003 0302 	and.w	r3, r3, #2
 8003622:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003626:	4b63      	ldr	r3, [pc, #396]	; (80037b4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362a:	4a62      	ldr	r2, [pc, #392]	; (80037b4 <HAL_TIM_Encoder_MspInit+0x25c>)
 800362c:	f043 0301 	orr.w	r3, r3, #1
 8003630:	6313      	str	r3, [r2, #48]	; 0x30
 8003632:	4b60      	ldr	r3, [pc, #384]	; (80037b4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003636:	f003 0301 	and.w	r3, r3, #1
 800363a:	62bb      	str	r3, [r7, #40]	; 0x28
 800363c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800363e:	4b5d      	ldr	r3, [pc, #372]	; (80037b4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003642:	4a5c      	ldr	r2, [pc, #368]	; (80037b4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003644:	f043 0302 	orr.w	r3, r3, #2
 8003648:	6313      	str	r3, [r2, #48]	; 0x30
 800364a:	4b5a      	ldr	r3, [pc, #360]	; (80037b4 <HAL_TIM_Encoder_MspInit+0x25c>)
 800364c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364e:	f003 0302 	and.w	r3, r3, #2
 8003652:	627b      	str	r3, [r7, #36]	; 0x24
 8003654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = MOTOR2_CHA_Pin;
 8003656:	2340      	movs	r3, #64	; 0x40
 8003658:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800365a:	2302      	movs	r3, #2
 800365c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800365e:	2300      	movs	r3, #0
 8003660:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003662:	2300      	movs	r3, #0
 8003664:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003666:	2302      	movs	r3, #2
 8003668:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(MOTOR2_CHA_GPIO_Port, &GPIO_InitStruct);
 800366a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800366e:	4619      	mov	r1, r3
 8003670:	4851      	ldr	r0, [pc, #324]	; (80037b8 <HAL_TIM_Encoder_MspInit+0x260>)
 8003672:	f001 f82f 	bl	80046d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MOTOR2_CHB_Pin;
 8003676:	2320      	movs	r3, #32
 8003678:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800367a:	2302      	movs	r3, #2
 800367c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800367e:	2300      	movs	r3, #0
 8003680:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003682:	2300      	movs	r3, #0
 8003684:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003686:	2302      	movs	r3, #2
 8003688:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(MOTOR2_CHB_GPIO_Port, &GPIO_InitStruct);
 800368a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800368e:	4619      	mov	r1, r3
 8003690:	484a      	ldr	r0, [pc, #296]	; (80037bc <HAL_TIM_Encoder_MspInit+0x264>)
 8003692:	f001 f81f 	bl	80046d4 <HAL_GPIO_Init>
}
 8003696:	e089      	b.n	80037ac <HAL_TIM_Encoder_MspInit+0x254>
  else if(tim_encoderHandle->Instance==TIM4)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a49      	ldr	r2, [pc, #292]	; (80037c4 <HAL_TIM_Encoder_MspInit+0x26c>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d129      	bne.n	80036f6 <HAL_TIM_Encoder_MspInit+0x19e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80036a2:	4b44      	ldr	r3, [pc, #272]	; (80037b4 <HAL_TIM_Encoder_MspInit+0x25c>)
 80036a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a6:	4a43      	ldr	r2, [pc, #268]	; (80037b4 <HAL_TIM_Encoder_MspInit+0x25c>)
 80036a8:	f043 0304 	orr.w	r3, r3, #4
 80036ac:	6413      	str	r3, [r2, #64]	; 0x40
 80036ae:	4b41      	ldr	r3, [pc, #260]	; (80037b4 <HAL_TIM_Encoder_MspInit+0x25c>)
 80036b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b2:	f003 0304 	and.w	r3, r3, #4
 80036b6:	623b      	str	r3, [r7, #32]
 80036b8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80036ba:	4b3e      	ldr	r3, [pc, #248]	; (80037b4 <HAL_TIM_Encoder_MspInit+0x25c>)
 80036bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036be:	4a3d      	ldr	r2, [pc, #244]	; (80037b4 <HAL_TIM_Encoder_MspInit+0x25c>)
 80036c0:	f043 0308 	orr.w	r3, r3, #8
 80036c4:	6313      	str	r3, [r2, #48]	; 0x30
 80036c6:	4b3b      	ldr	r3, [pc, #236]	; (80037b4 <HAL_TIM_Encoder_MspInit+0x25c>)
 80036c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ca:	f003 0308 	and.w	r3, r3, #8
 80036ce:	61fb      	str	r3, [r7, #28]
 80036d0:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = MOTOR3_CHA_Pin|MOTOR3_CHB_Pin;
 80036d2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80036d6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036d8:	2302      	movs	r3, #2
 80036da:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036dc:	2300      	movs	r3, #0
 80036de:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036e0:	2300      	movs	r3, #0
 80036e2:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80036e4:	2302      	movs	r3, #2
 80036e6:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80036e8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80036ec:	4619      	mov	r1, r3
 80036ee:	4836      	ldr	r0, [pc, #216]	; (80037c8 <HAL_TIM_Encoder_MspInit+0x270>)
 80036f0:	f000 fff0 	bl	80046d4 <HAL_GPIO_Init>
}
 80036f4:	e05a      	b.n	80037ac <HAL_TIM_Encoder_MspInit+0x254>
  else if(tim_encoderHandle->Instance==TIM5)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a34      	ldr	r2, [pc, #208]	; (80037cc <HAL_TIM_Encoder_MspInit+0x274>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d128      	bne.n	8003752 <HAL_TIM_Encoder_MspInit+0x1fa>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003700:	4b2c      	ldr	r3, [pc, #176]	; (80037b4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003704:	4a2b      	ldr	r2, [pc, #172]	; (80037b4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003706:	f043 0308 	orr.w	r3, r3, #8
 800370a:	6413      	str	r3, [r2, #64]	; 0x40
 800370c:	4b29      	ldr	r3, [pc, #164]	; (80037b4 <HAL_TIM_Encoder_MspInit+0x25c>)
 800370e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003710:	f003 0308 	and.w	r3, r3, #8
 8003714:	61bb      	str	r3, [r7, #24]
 8003716:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003718:	4b26      	ldr	r3, [pc, #152]	; (80037b4 <HAL_TIM_Encoder_MspInit+0x25c>)
 800371a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371c:	4a25      	ldr	r2, [pc, #148]	; (80037b4 <HAL_TIM_Encoder_MspInit+0x25c>)
 800371e:	f043 0301 	orr.w	r3, r3, #1
 8003722:	6313      	str	r3, [r2, #48]	; 0x30
 8003724:	4b23      	ldr	r3, [pc, #140]	; (80037b4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003728:	f003 0301 	and.w	r3, r3, #1
 800372c:	617b      	str	r3, [r7, #20]
 800372e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MOTOR4_CHA_Pin|MOTOR4_CHB_Pin;
 8003730:	2303      	movs	r3, #3
 8003732:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003734:	2302      	movs	r3, #2
 8003736:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003738:	2300      	movs	r3, #0
 800373a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800373c:	2300      	movs	r3, #0
 800373e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003740:	2302      	movs	r3, #2
 8003742:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003744:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003748:	4619      	mov	r1, r3
 800374a:	481b      	ldr	r0, [pc, #108]	; (80037b8 <HAL_TIM_Encoder_MspInit+0x260>)
 800374c:	f000 ffc2 	bl	80046d4 <HAL_GPIO_Init>
}
 8003750:	e02c      	b.n	80037ac <HAL_TIM_Encoder_MspInit+0x254>
  else if(tim_encoderHandle->Instance==TIM8)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a1e      	ldr	r2, [pc, #120]	; (80037d0 <HAL_TIM_Encoder_MspInit+0x278>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d127      	bne.n	80037ac <HAL_TIM_Encoder_MspInit+0x254>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800375c:	4b15      	ldr	r3, [pc, #84]	; (80037b4 <HAL_TIM_Encoder_MspInit+0x25c>)
 800375e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003760:	4a14      	ldr	r2, [pc, #80]	; (80037b4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003762:	f043 0302 	orr.w	r3, r3, #2
 8003766:	6453      	str	r3, [r2, #68]	; 0x44
 8003768:	4b12      	ldr	r3, [pc, #72]	; (80037b4 <HAL_TIM_Encoder_MspInit+0x25c>)
 800376a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800376c:	f003 0302 	and.w	r3, r3, #2
 8003770:	613b      	str	r3, [r7, #16]
 8003772:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003774:	4b0f      	ldr	r3, [pc, #60]	; (80037b4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003778:	4a0e      	ldr	r2, [pc, #56]	; (80037b4 <HAL_TIM_Encoder_MspInit+0x25c>)
 800377a:	f043 0304 	orr.w	r3, r3, #4
 800377e:	6313      	str	r3, [r2, #48]	; 0x30
 8003780:	4b0c      	ldr	r3, [pc, #48]	; (80037b4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003784:	f003 0304 	and.w	r3, r3, #4
 8003788:	60fb      	str	r3, [r7, #12]
 800378a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR5_CHA_Pin|MOTOR5_CHB_Pin;
 800378c:	23c0      	movs	r3, #192	; 0xc0
 800378e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003790:	2302      	movs	r3, #2
 8003792:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003794:	2300      	movs	r3, #0
 8003796:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003798:	2300      	movs	r3, #0
 800379a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800379c:	2303      	movs	r3, #3
 800379e:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037a0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80037a4:	4619      	mov	r1, r3
 80037a6:	480b      	ldr	r0, [pc, #44]	; (80037d4 <HAL_TIM_Encoder_MspInit+0x27c>)
 80037a8:	f000 ff94 	bl	80046d4 <HAL_GPIO_Init>
}
 80037ac:	bf00      	nop
 80037ae:	3750      	adds	r7, #80	; 0x50
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	40023800 	.word	0x40023800
 80037b8:	40020000 	.word	0x40020000
 80037bc:	40020400 	.word	0x40020400
 80037c0:	40000400 	.word	0x40000400
 80037c4:	40000800 	.word	0x40000800
 80037c8:	40020c00 	.word	0x40020c00
 80037cc:	40000c00 	.word	0x40000c00
 80037d0:	40010400 	.word	0x40010400
 80037d4:	40020800 	.word	0x40020800

080037d8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b08a      	sub	sp, #40	; 0x28
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037e0:	f107 0314 	add.w	r3, r7, #20
 80037e4:	2200      	movs	r2, #0
 80037e6:	601a      	str	r2, [r3, #0]
 80037e8:	605a      	str	r2, [r3, #4]
 80037ea:	609a      	str	r2, [r3, #8]
 80037ec:	60da      	str	r2, [r3, #12]
 80037ee:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a22      	ldr	r2, [pc, #136]	; (8003880 <HAL_TIM_MspPostInit+0xa8>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d11d      	bne.n	8003836 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80037fa:	4b22      	ldr	r3, [pc, #136]	; (8003884 <HAL_TIM_MspPostInit+0xac>)
 80037fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fe:	4a21      	ldr	r2, [pc, #132]	; (8003884 <HAL_TIM_MspPostInit+0xac>)
 8003800:	f043 0310 	orr.w	r3, r3, #16
 8003804:	6313      	str	r3, [r2, #48]	; 0x30
 8003806:	4b1f      	ldr	r3, [pc, #124]	; (8003884 <HAL_TIM_MspPostInit+0xac>)
 8003808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380a:	f003 0310 	and.w	r3, r3, #16
 800380e:	613b      	str	r3, [r7, #16]
 8003810:	693b      	ldr	r3, [r7, #16]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = MOTOR1_PWM_Pin|MOTOR2_PWM_Pin|MOTOR3_PWM_Pin|MOTOR4_PWM_Pin;
 8003812:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8003816:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003818:	2302      	movs	r3, #2
 800381a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800381c:	2300      	movs	r3, #0
 800381e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003820:	2300      	movs	r3, #0
 8003822:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003824:	2301      	movs	r3, #1
 8003826:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003828:	f107 0314 	add.w	r3, r7, #20
 800382c:	4619      	mov	r1, r3
 800382e:	4816      	ldr	r0, [pc, #88]	; (8003888 <HAL_TIM_MspPostInit+0xb0>)
 8003830:	f000 ff50 	bl	80046d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8003834:	e020      	b.n	8003878 <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM9)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a14      	ldr	r2, [pc, #80]	; (800388c <HAL_TIM_MspPostInit+0xb4>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d11b      	bne.n	8003878 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003840:	4b10      	ldr	r3, [pc, #64]	; (8003884 <HAL_TIM_MspPostInit+0xac>)
 8003842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003844:	4a0f      	ldr	r2, [pc, #60]	; (8003884 <HAL_TIM_MspPostInit+0xac>)
 8003846:	f043 0310 	orr.w	r3, r3, #16
 800384a:	6313      	str	r3, [r2, #48]	; 0x30
 800384c:	4b0d      	ldr	r3, [pc, #52]	; (8003884 <HAL_TIM_MspPostInit+0xac>)
 800384e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003850:	f003 0310 	and.w	r3, r3, #16
 8003854:	60fb      	str	r3, [r7, #12]
 8003856:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR5_PWM_Pin|MOTOR6_PWM_Pin;
 8003858:	2360      	movs	r3, #96	; 0x60
 800385a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800385c:	2302      	movs	r3, #2
 800385e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003860:	2300      	movs	r3, #0
 8003862:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003864:	2300      	movs	r3, #0
 8003866:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8003868:	2303      	movs	r3, #3
 800386a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800386c:	f107 0314 	add.w	r3, r7, #20
 8003870:	4619      	mov	r1, r3
 8003872:	4805      	ldr	r0, [pc, #20]	; (8003888 <HAL_TIM_MspPostInit+0xb0>)
 8003874:	f000 ff2e 	bl	80046d4 <HAL_GPIO_Init>
}
 8003878:	bf00      	nop
 800387a:	3728      	adds	r7, #40	; 0x28
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}
 8003880:	40010000 	.word	0x40010000
 8003884:	40023800 	.word	0x40023800
 8003888:	40021000 	.word	0x40021000
 800388c:	40014000 	.word	0x40014000

08003890 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003894:	4b14      	ldr	r3, [pc, #80]	; (80038e8 <MX_USART3_UART_Init+0x58>)
 8003896:	4a15      	ldr	r2, [pc, #84]	; (80038ec <MX_USART3_UART_Init+0x5c>)
 8003898:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800389a:	4b13      	ldr	r3, [pc, #76]	; (80038e8 <MX_USART3_UART_Init+0x58>)
 800389c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80038a0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80038a2:	4b11      	ldr	r3, [pc, #68]	; (80038e8 <MX_USART3_UART_Init+0x58>)
 80038a4:	2200      	movs	r2, #0
 80038a6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80038a8:	4b0f      	ldr	r3, [pc, #60]	; (80038e8 <MX_USART3_UART_Init+0x58>)
 80038aa:	2200      	movs	r2, #0
 80038ac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80038ae:	4b0e      	ldr	r3, [pc, #56]	; (80038e8 <MX_USART3_UART_Init+0x58>)
 80038b0:	2200      	movs	r2, #0
 80038b2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80038b4:	4b0c      	ldr	r3, [pc, #48]	; (80038e8 <MX_USART3_UART_Init+0x58>)
 80038b6:	220c      	movs	r2, #12
 80038b8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80038ba:	4b0b      	ldr	r3, [pc, #44]	; (80038e8 <MX_USART3_UART_Init+0x58>)
 80038bc:	2200      	movs	r2, #0
 80038be:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80038c0:	4b09      	ldr	r3, [pc, #36]	; (80038e8 <MX_USART3_UART_Init+0x58>)
 80038c2:	2200      	movs	r2, #0
 80038c4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80038c6:	4b08      	ldr	r3, [pc, #32]	; (80038e8 <MX_USART3_UART_Init+0x58>)
 80038c8:	2200      	movs	r2, #0
 80038ca:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80038cc:	4b06      	ldr	r3, [pc, #24]	; (80038e8 <MX_USART3_UART_Init+0x58>)
 80038ce:	2200      	movs	r2, #0
 80038d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80038d2:	4805      	ldr	r0, [pc, #20]	; (80038e8 <MX_USART3_UART_Init+0x58>)
 80038d4:	f003 fc0e 	bl	80070f4 <HAL_UART_Init>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d001      	beq.n	80038e2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80038de:	f7ff f831 	bl	8002944 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80038e2:	bf00      	nop
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	200068e0 	.word	0x200068e0
 80038ec:	40004800 	.word	0x40004800

080038f0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b0ae      	sub	sp, #184	; 0xb8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038f8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80038fc:	2200      	movs	r2, #0
 80038fe:	601a      	str	r2, [r3, #0]
 8003900:	605a      	str	r2, [r3, #4]
 8003902:	609a      	str	r2, [r3, #8]
 8003904:	60da      	str	r2, [r3, #12]
 8003906:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003908:	f107 0314 	add.w	r3, r7, #20
 800390c:	2290      	movs	r2, #144	; 0x90
 800390e:	2100      	movs	r1, #0
 8003910:	4618      	mov	r0, r3
 8003912:	f018 ff17 	bl	801c744 <memset>
  if(uartHandle->Instance==USART3)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a56      	ldr	r2, [pc, #344]	; (8003a74 <HAL_UART_MspInit+0x184>)
 800391c:	4293      	cmp	r3, r2
 800391e:	f040 80a4 	bne.w	8003a6a <HAL_UART_MspInit+0x17a>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003922:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003926:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003928:	2300      	movs	r3, #0
 800392a:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800392c:	f107 0314 	add.w	r3, r7, #20
 8003930:	4618      	mov	r0, r3
 8003932:	f001 ff5b 	bl	80057ec <HAL_RCCEx_PeriphCLKConfig>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d001      	beq.n	8003940 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 800393c:	f7ff f802 	bl	8002944 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003940:	4b4d      	ldr	r3, [pc, #308]	; (8003a78 <HAL_UART_MspInit+0x188>)
 8003942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003944:	4a4c      	ldr	r2, [pc, #304]	; (8003a78 <HAL_UART_MspInit+0x188>)
 8003946:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800394a:	6413      	str	r3, [r2, #64]	; 0x40
 800394c:	4b4a      	ldr	r3, [pc, #296]	; (8003a78 <HAL_UART_MspInit+0x188>)
 800394e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003950:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003954:	613b      	str	r3, [r7, #16]
 8003956:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003958:	4b47      	ldr	r3, [pc, #284]	; (8003a78 <HAL_UART_MspInit+0x188>)
 800395a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395c:	4a46      	ldr	r2, [pc, #280]	; (8003a78 <HAL_UART_MspInit+0x188>)
 800395e:	f043 0308 	orr.w	r3, r3, #8
 8003962:	6313      	str	r3, [r2, #48]	; 0x30
 8003964:	4b44      	ldr	r3, [pc, #272]	; (8003a78 <HAL_UART_MspInit+0x188>)
 8003966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003968:	f003 0308 	and.w	r3, r3, #8
 800396c:	60fb      	str	r3, [r7, #12]
 800396e:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8003970:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003974:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003978:	2302      	movs	r3, #2
 800397a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800397e:	2300      	movs	r3, #0
 8003980:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003984:	2303      	movs	r3, #3
 8003986:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800398a:	2307      	movs	r3, #7
 800398c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003990:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003994:	4619      	mov	r1, r3
 8003996:	4839      	ldr	r0, [pc, #228]	; (8003a7c <HAL_UART_MspInit+0x18c>)
 8003998:	f000 fe9c 	bl	80046d4 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 800399c:	4b38      	ldr	r3, [pc, #224]	; (8003a80 <HAL_UART_MspInit+0x190>)
 800399e:	4a39      	ldr	r2, [pc, #228]	; (8003a84 <HAL_UART_MspInit+0x194>)
 80039a0:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 80039a2:	4b37      	ldr	r3, [pc, #220]	; (8003a80 <HAL_UART_MspInit+0x190>)
 80039a4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80039a8:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80039aa:	4b35      	ldr	r3, [pc, #212]	; (8003a80 <HAL_UART_MspInit+0x190>)
 80039ac:	2240      	movs	r2, #64	; 0x40
 80039ae:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80039b0:	4b33      	ldr	r3, [pc, #204]	; (8003a80 <HAL_UART_MspInit+0x190>)
 80039b2:	2200      	movs	r2, #0
 80039b4:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80039b6:	4b32      	ldr	r3, [pc, #200]	; (8003a80 <HAL_UART_MspInit+0x190>)
 80039b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80039bc:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80039be:	4b30      	ldr	r3, [pc, #192]	; (8003a80 <HAL_UART_MspInit+0x190>)
 80039c0:	2200      	movs	r2, #0
 80039c2:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80039c4:	4b2e      	ldr	r3, [pc, #184]	; (8003a80 <HAL_UART_MspInit+0x190>)
 80039c6:	2200      	movs	r2, #0
 80039c8:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80039ca:	4b2d      	ldr	r3, [pc, #180]	; (8003a80 <HAL_UART_MspInit+0x190>)
 80039cc:	2200      	movs	r2, #0
 80039ce:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80039d0:	4b2b      	ldr	r3, [pc, #172]	; (8003a80 <HAL_UART_MspInit+0x190>)
 80039d2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80039d6:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80039d8:	4b29      	ldr	r3, [pc, #164]	; (8003a80 <HAL_UART_MspInit+0x190>)
 80039da:	2200      	movs	r2, #0
 80039dc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80039de:	4828      	ldr	r0, [pc, #160]	; (8003a80 <HAL_UART_MspInit+0x190>)
 80039e0:	f000 fa62 	bl	8003ea8 <HAL_DMA_Init>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d001      	beq.n	80039ee <HAL_UART_MspInit+0xfe>
    {
      Error_Handler();
 80039ea:	f7fe ffab 	bl	8002944 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a23      	ldr	r2, [pc, #140]	; (8003a80 <HAL_UART_MspInit+0x190>)
 80039f2:	671a      	str	r2, [r3, #112]	; 0x70
 80039f4:	4a22      	ldr	r2, [pc, #136]	; (8003a80 <HAL_UART_MspInit+0x190>)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80039fa:	4b23      	ldr	r3, [pc, #140]	; (8003a88 <HAL_UART_MspInit+0x198>)
 80039fc:	4a23      	ldr	r2, [pc, #140]	; (8003a8c <HAL_UART_MspInit+0x19c>)
 80039fe:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8003a00:	4b21      	ldr	r3, [pc, #132]	; (8003a88 <HAL_UART_MspInit+0x198>)
 8003a02:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003a06:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003a08:	4b1f      	ldr	r3, [pc, #124]	; (8003a88 <HAL_UART_MspInit+0x198>)
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a0e:	4b1e      	ldr	r3, [pc, #120]	; (8003a88 <HAL_UART_MspInit+0x198>)
 8003a10:	2200      	movs	r2, #0
 8003a12:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003a14:	4b1c      	ldr	r3, [pc, #112]	; (8003a88 <HAL_UART_MspInit+0x198>)
 8003a16:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a1a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a1c:	4b1a      	ldr	r3, [pc, #104]	; (8003a88 <HAL_UART_MspInit+0x198>)
 8003a1e:	2200      	movs	r2, #0
 8003a20:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a22:	4b19      	ldr	r3, [pc, #100]	; (8003a88 <HAL_UART_MspInit+0x198>)
 8003a24:	2200      	movs	r2, #0
 8003a26:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8003a28:	4b17      	ldr	r3, [pc, #92]	; (8003a88 <HAL_UART_MspInit+0x198>)
 8003a2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a2e:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003a30:	4b15      	ldr	r3, [pc, #84]	; (8003a88 <HAL_UART_MspInit+0x198>)
 8003a32:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003a36:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003a38:	4b13      	ldr	r3, [pc, #76]	; (8003a88 <HAL_UART_MspInit+0x198>)
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003a3e:	4812      	ldr	r0, [pc, #72]	; (8003a88 <HAL_UART_MspInit+0x198>)
 8003a40:	f000 fa32 	bl	8003ea8 <HAL_DMA_Init>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d001      	beq.n	8003a4e <HAL_UART_MspInit+0x15e>
    {
      Error_Handler();
 8003a4a:	f7fe ff7b 	bl	8002944 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a0d      	ldr	r2, [pc, #52]	; (8003a88 <HAL_UART_MspInit+0x198>)
 8003a52:	675a      	str	r2, [r3, #116]	; 0x74
 8003a54:	4a0c      	ldr	r2, [pc, #48]	; (8003a88 <HAL_UART_MspInit+0x198>)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	2105      	movs	r1, #5
 8003a5e:	2027      	movs	r0, #39	; 0x27
 8003a60:	f000 f9f8 	bl	8003e54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003a64:	2027      	movs	r0, #39	; 0x27
 8003a66:	f000 fa11 	bl	8003e8c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003a6a:	bf00      	nop
 8003a6c:	37b8      	adds	r7, #184	; 0xb8
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	40004800 	.word	0x40004800
 8003a78:	40023800 	.word	0x40023800
 8003a7c:	40020c00 	.word	0x40020c00
 8003a80:	20006968 	.word	0x20006968
 8003a84:	40026058 	.word	0x40026058
 8003a88:	200069c8 	.word	0x200069c8
 8003a8c:	40026028 	.word	0x40026028

08003a90 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8003a94:	4b14      	ldr	r3, [pc, #80]	; (8003ae8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003a96:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8003a9a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8003a9c:	4b12      	ldr	r3, [pc, #72]	; (8003ae8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003a9e:	2206      	movs	r2, #6
 8003aa0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8003aa2:	4b11      	ldr	r3, [pc, #68]	; (8003ae8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003aa4:	2202      	movs	r2, #2
 8003aa6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8003aa8:	4b0f      	ldr	r3, [pc, #60]	; (8003ae8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003aaa:	2200      	movs	r2, #0
 8003aac:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003aae:	4b0e      	ldr	r3, [pc, #56]	; (8003ae8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003ab0:	2202      	movs	r2, #2
 8003ab2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8003ab4:	4b0c      	ldr	r3, [pc, #48]	; (8003ae8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8003aba:	4b0b      	ldr	r3, [pc, #44]	; (8003ae8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003abc:	2200      	movs	r2, #0
 8003abe:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8003ac0:	4b09      	ldr	r3, [pc, #36]	; (8003ae8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8003ac6:	4b08      	ldr	r3, [pc, #32]	; (8003ae8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003ac8:	2201      	movs	r2, #1
 8003aca:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8003acc:	4b06      	ldr	r3, [pc, #24]	; (8003ae8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003ace:	2200      	movs	r2, #0
 8003ad0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8003ad2:	4805      	ldr	r0, [pc, #20]	; (8003ae8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003ad4:	f000 ffdb 	bl	8004a8e <HAL_PCD_Init>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d001      	beq.n	8003ae2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8003ade:	f7fe ff31 	bl	8002944 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8003ae2:	bf00      	nop
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	20006a28 	.word	0x20006a28

08003aec <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b0ae      	sub	sp, #184	; 0xb8
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003af4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003af8:	2200      	movs	r2, #0
 8003afa:	601a      	str	r2, [r3, #0]
 8003afc:	605a      	str	r2, [r3, #4]
 8003afe:	609a      	str	r2, [r3, #8]
 8003b00:	60da      	str	r2, [r3, #12]
 8003b02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003b04:	f107 0314 	add.w	r3, r7, #20
 8003b08:	2290      	movs	r2, #144	; 0x90
 8003b0a:	2100      	movs	r1, #0
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f018 fe19 	bl	801c744 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b1a:	d159      	bne.n	8003bd0 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8003b1c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003b20:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8003b22:	2300      	movs	r3, #0
 8003b24:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003b28:	f107 0314 	add.w	r3, r7, #20
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f001 fe5d 	bl	80057ec <HAL_RCCEx_PeriphCLKConfig>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d001      	beq.n	8003b3c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8003b38:	f7fe ff04 	bl	8002944 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b3c:	4b26      	ldr	r3, [pc, #152]	; (8003bd8 <HAL_PCD_MspInit+0xec>)
 8003b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b40:	4a25      	ldr	r2, [pc, #148]	; (8003bd8 <HAL_PCD_MspInit+0xec>)
 8003b42:	f043 0301 	orr.w	r3, r3, #1
 8003b46:	6313      	str	r3, [r2, #48]	; 0x30
 8003b48:	4b23      	ldr	r3, [pc, #140]	; (8003bd8 <HAL_PCD_MspInit+0xec>)
 8003b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4c:	f003 0301 	and.w	r3, r3, #1
 8003b50:	613b      	str	r3, [r7, #16]
 8003b52:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8003b54:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8003b58:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b5c:	2302      	movs	r3, #2
 8003b5e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b62:	2300      	movs	r3, #0
 8003b64:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003b6e:	230a      	movs	r3, #10
 8003b70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b74:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003b78:	4619      	mov	r1, r3
 8003b7a:	4818      	ldr	r0, [pc, #96]	; (8003bdc <HAL_PCD_MspInit+0xf0>)
 8003b7c:	f000 fdaa 	bl	80046d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8003b80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b84:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003b94:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003b98:	4619      	mov	r1, r3
 8003b9a:	4810      	ldr	r0, [pc, #64]	; (8003bdc <HAL_PCD_MspInit+0xf0>)
 8003b9c:	f000 fd9a 	bl	80046d4 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003ba0:	4b0d      	ldr	r3, [pc, #52]	; (8003bd8 <HAL_PCD_MspInit+0xec>)
 8003ba2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ba4:	4a0c      	ldr	r2, [pc, #48]	; (8003bd8 <HAL_PCD_MspInit+0xec>)
 8003ba6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003baa:	6353      	str	r3, [r2, #52]	; 0x34
 8003bac:	4b0a      	ldr	r3, [pc, #40]	; (8003bd8 <HAL_PCD_MspInit+0xec>)
 8003bae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bb4:	60fb      	str	r3, [r7, #12]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	4b07      	ldr	r3, [pc, #28]	; (8003bd8 <HAL_PCD_MspInit+0xec>)
 8003bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bbc:	4a06      	ldr	r2, [pc, #24]	; (8003bd8 <HAL_PCD_MspInit+0xec>)
 8003bbe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003bc2:	6453      	str	r3, [r2, #68]	; 0x44
 8003bc4:	4b04      	ldr	r3, [pc, #16]	; (8003bd8 <HAL_PCD_MspInit+0xec>)
 8003bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bcc:	60bb      	str	r3, [r7, #8]
 8003bce:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8003bd0:	bf00      	nop
 8003bd2:	37b8      	adds	r7, #184	; 0xb8
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	40023800 	.word	0x40023800
 8003bdc:	40020000 	.word	0x40020000

08003be0 <_Z14getCurrentTimev>:
}
long remap( long v,  long a1,  long b1,  long a2,  long b2, bool clamp = false){
  return round(remap((float) v, (float) a1, (float) b1, (float) a2, (float) b2, clamp));
}

uint32_t getCurrentTime() {
 8003be0:	b580      	push	{r7, lr}
 8003be2:	af00      	add	r7, sp, #0
    return HAL_GetTick();
 8003be4:	f000 f84e 	bl	8003c84 <HAL_GetTick>
 8003be8:	4603      	mov	r3, r0
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	bd80      	pop	{r7, pc}
	...

08003bf0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003bf0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003c28 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003bf4:	480d      	ldr	r0, [pc, #52]	; (8003c2c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003bf6:	490e      	ldr	r1, [pc, #56]	; (8003c30 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003bf8:	4a0e      	ldr	r2, [pc, #56]	; (8003c34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003bfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003bfc:	e002      	b.n	8003c04 <LoopCopyDataInit>

08003bfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003bfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c02:	3304      	adds	r3, #4

08003c04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c08:	d3f9      	bcc.n	8003bfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c0a:	4a0b      	ldr	r2, [pc, #44]	; (8003c38 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003c0c:	4c0b      	ldr	r4, [pc, #44]	; (8003c3c <LoopFillZerobss+0x26>)
  movs r3, #0
 8003c0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c10:	e001      	b.n	8003c16 <LoopFillZerobss>

08003c12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c14:	3204      	adds	r2, #4

08003c16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c18:	d3fb      	bcc.n	8003c12 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003c1a:	f7ff f9a3 	bl	8002f64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003c1e:	f018 fe93 	bl	801c948 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003c22:	f7fe fdd9 	bl	80027d8 <main>
  bx  lr    
 8003c26:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003c28:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8003c2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c30:	200021dc 	.word	0x200021dc
  ldr r2, =_sidata
 8003c34:	0801f7d8 	.word	0x0801f7d8
  ldr r2, =_sbss
 8003c38:	200021e0 	.word	0x200021e0
  ldr r4, =_ebss
 8003c3c:	20010cec 	.word	0x20010cec

08003c40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c40:	e7fe      	b.n	8003c40 <ADC_IRQHandler>

08003c42 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c42:	b580      	push	{r7, lr}
 8003c44:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c46:	2003      	movs	r0, #3
 8003c48:	f000 f8f9 	bl	8003e3e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c4c:	200f      	movs	r0, #15
 8003c4e:	f7ff f80b 	bl	8002c68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003c52:	f7fe ffe1 	bl	8002c18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c56:	2300      	movs	r3, #0
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	bd80      	pop	{r7, pc}

08003c5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c60:	4b06      	ldr	r3, [pc, #24]	; (8003c7c <HAL_IncTick+0x20>)
 8003c62:	781b      	ldrb	r3, [r3, #0]
 8003c64:	461a      	mov	r2, r3
 8003c66:	4b06      	ldr	r3, [pc, #24]	; (8003c80 <HAL_IncTick+0x24>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4413      	add	r3, r2
 8003c6c:	4a04      	ldr	r2, [pc, #16]	; (8003c80 <HAL_IncTick+0x24>)
 8003c6e:	6013      	str	r3, [r2, #0]
}
 8003c70:	bf00      	nop
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr
 8003c7a:	bf00      	nop
 8003c7c:	2000000c 	.word	0x2000000c
 8003c80:	20006f30 	.word	0x20006f30

08003c84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c84:	b480      	push	{r7}
 8003c86:	af00      	add	r7, sp, #0
  return uwTick;
 8003c88:	4b03      	ldr	r3, [pc, #12]	; (8003c98 <HAL_GetTick+0x14>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop
 8003c98:	20006f30 	.word	0x20006f30

08003c9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b084      	sub	sp, #16
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ca4:	f7ff ffee 	bl	8003c84 <HAL_GetTick>
 8003ca8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cb4:	d005      	beq.n	8003cc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003cb6:	4b0a      	ldr	r3, [pc, #40]	; (8003ce0 <HAL_Delay+0x44>)
 8003cb8:	781b      	ldrb	r3, [r3, #0]
 8003cba:	461a      	mov	r2, r3
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	4413      	add	r3, r2
 8003cc0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003cc2:	bf00      	nop
 8003cc4:	f7ff ffde 	bl	8003c84 <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	68fa      	ldr	r2, [r7, #12]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d8f7      	bhi.n	8003cc4 <HAL_Delay+0x28>
  {
  }
}
 8003cd4:	bf00      	nop
 8003cd6:	bf00      	nop
 8003cd8:	3710      	adds	r7, #16
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	2000000c 	.word	0x2000000c

08003ce4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b085      	sub	sp, #20
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f003 0307 	and.w	r3, r3, #7
 8003cf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003cf4:	4b0b      	ldr	r3, [pc, #44]	; (8003d24 <__NVIC_SetPriorityGrouping+0x40>)
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cfa:	68ba      	ldr	r2, [r7, #8]
 8003cfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d00:	4013      	ands	r3, r2
 8003d02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003d0c:	4b06      	ldr	r3, [pc, #24]	; (8003d28 <__NVIC_SetPriorityGrouping+0x44>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d12:	4a04      	ldr	r2, [pc, #16]	; (8003d24 <__NVIC_SetPriorityGrouping+0x40>)
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	60d3      	str	r3, [r2, #12]
}
 8003d18:	bf00      	nop
 8003d1a:	3714      	adds	r7, #20
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr
 8003d24:	e000ed00 	.word	0xe000ed00
 8003d28:	05fa0000 	.word	0x05fa0000

08003d2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d30:	4b04      	ldr	r3, [pc, #16]	; (8003d44 <__NVIC_GetPriorityGrouping+0x18>)
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	0a1b      	lsrs	r3, r3, #8
 8003d36:	f003 0307 	and.w	r3, r3, #7
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr
 8003d44:	e000ed00 	.word	0xe000ed00

08003d48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	4603      	mov	r3, r0
 8003d50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	db0b      	blt.n	8003d72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d5a:	79fb      	ldrb	r3, [r7, #7]
 8003d5c:	f003 021f 	and.w	r2, r3, #31
 8003d60:	4907      	ldr	r1, [pc, #28]	; (8003d80 <__NVIC_EnableIRQ+0x38>)
 8003d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d66:	095b      	lsrs	r3, r3, #5
 8003d68:	2001      	movs	r0, #1
 8003d6a:	fa00 f202 	lsl.w	r2, r0, r2
 8003d6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003d72:	bf00      	nop
 8003d74:	370c      	adds	r7, #12
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	e000e100 	.word	0xe000e100

08003d84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	6039      	str	r1, [r7, #0]
 8003d8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	db0a      	blt.n	8003dae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	b2da      	uxtb	r2, r3
 8003d9c:	490c      	ldr	r1, [pc, #48]	; (8003dd0 <__NVIC_SetPriority+0x4c>)
 8003d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003da2:	0112      	lsls	r2, r2, #4
 8003da4:	b2d2      	uxtb	r2, r2
 8003da6:	440b      	add	r3, r1
 8003da8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003dac:	e00a      	b.n	8003dc4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	b2da      	uxtb	r2, r3
 8003db2:	4908      	ldr	r1, [pc, #32]	; (8003dd4 <__NVIC_SetPriority+0x50>)
 8003db4:	79fb      	ldrb	r3, [r7, #7]
 8003db6:	f003 030f 	and.w	r3, r3, #15
 8003dba:	3b04      	subs	r3, #4
 8003dbc:	0112      	lsls	r2, r2, #4
 8003dbe:	b2d2      	uxtb	r2, r2
 8003dc0:	440b      	add	r3, r1
 8003dc2:	761a      	strb	r2, [r3, #24]
}
 8003dc4:	bf00      	nop
 8003dc6:	370c      	adds	r7, #12
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr
 8003dd0:	e000e100 	.word	0xe000e100
 8003dd4:	e000ed00 	.word	0xe000ed00

08003dd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b089      	sub	sp, #36	; 0x24
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	60f8      	str	r0, [r7, #12]
 8003de0:	60b9      	str	r1, [r7, #8]
 8003de2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f003 0307 	and.w	r3, r3, #7
 8003dea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003dec:	69fb      	ldr	r3, [r7, #28]
 8003dee:	f1c3 0307 	rsb	r3, r3, #7
 8003df2:	2b04      	cmp	r3, #4
 8003df4:	bf28      	it	cs
 8003df6:	2304      	movcs	r3, #4
 8003df8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	3304      	adds	r3, #4
 8003dfe:	2b06      	cmp	r3, #6
 8003e00:	d902      	bls.n	8003e08 <NVIC_EncodePriority+0x30>
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	3b03      	subs	r3, #3
 8003e06:	e000      	b.n	8003e0a <NVIC_EncodePriority+0x32>
 8003e08:	2300      	movs	r3, #0
 8003e0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	fa02 f303 	lsl.w	r3, r2, r3
 8003e16:	43da      	mvns	r2, r3
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	401a      	ands	r2, r3
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e20:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	fa01 f303 	lsl.w	r3, r1, r3
 8003e2a:	43d9      	mvns	r1, r3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e30:	4313      	orrs	r3, r2
         );
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3724      	adds	r7, #36	; 0x24
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr

08003e3e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e3e:	b580      	push	{r7, lr}
 8003e40:	b082      	sub	sp, #8
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f7ff ff4c 	bl	8003ce4 <__NVIC_SetPriorityGrouping>
}
 8003e4c:	bf00      	nop
 8003e4e:	3708      	adds	r7, #8
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}

08003e54 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b086      	sub	sp, #24
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	60b9      	str	r1, [r7, #8]
 8003e5e:	607a      	str	r2, [r7, #4]
 8003e60:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003e62:	2300      	movs	r3, #0
 8003e64:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e66:	f7ff ff61 	bl	8003d2c <__NVIC_GetPriorityGrouping>
 8003e6a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	68b9      	ldr	r1, [r7, #8]
 8003e70:	6978      	ldr	r0, [r7, #20]
 8003e72:	f7ff ffb1 	bl	8003dd8 <NVIC_EncodePriority>
 8003e76:	4602      	mov	r2, r0
 8003e78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e7c:	4611      	mov	r1, r2
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f7ff ff80 	bl	8003d84 <__NVIC_SetPriority>
}
 8003e84:	bf00      	nop
 8003e86:	3718      	adds	r7, #24
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	4603      	mov	r3, r0
 8003e94:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f7ff ff54 	bl	8003d48 <__NVIC_EnableIRQ>
}
 8003ea0:	bf00      	nop
 8003ea2:	3708      	adds	r7, #8
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b086      	sub	sp, #24
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003eb4:	f7ff fee6 	bl	8003c84 <HAL_GetTick>
 8003eb8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d101      	bne.n	8003ec4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e099      	b.n	8003ff8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2202      	movs	r2, #2
 8003ec8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f022 0201 	bic.w	r2, r2, #1
 8003ee2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ee4:	e00f      	b.n	8003f06 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ee6:	f7ff fecd 	bl	8003c84 <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	2b05      	cmp	r3, #5
 8003ef2:	d908      	bls.n	8003f06 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2220      	movs	r2, #32
 8003ef8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2203      	movs	r2, #3
 8003efe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e078      	b.n	8003ff8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0301 	and.w	r3, r3, #1
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d1e8      	bne.n	8003ee6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003f1c:	697a      	ldr	r2, [r7, #20]
 8003f1e:	4b38      	ldr	r3, [pc, #224]	; (8004000 <HAL_DMA_Init+0x158>)
 8003f20:	4013      	ands	r3, r2
 8003f22:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	685a      	ldr	r2, [r3, #4]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f32:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	691b      	ldr	r3, [r3, #16]
 8003f38:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	699b      	ldr	r3, [r3, #24]
 8003f44:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f4a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a1b      	ldr	r3, [r3, #32]
 8003f50:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f52:	697a      	ldr	r2, [r7, #20]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5c:	2b04      	cmp	r3, #4
 8003f5e:	d107      	bne.n	8003f70 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	697a      	ldr	r2, [r7, #20]
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	697a      	ldr	r2, [r7, #20]
 8003f76:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	695b      	ldr	r3, [r3, #20]
 8003f7e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	f023 0307 	bic.w	r3, r3, #7
 8003f86:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8c:	697a      	ldr	r2, [r7, #20]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f96:	2b04      	cmp	r3, #4
 8003f98:	d117      	bne.n	8003fca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f9e:	697a      	ldr	r2, [r7, #20]
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d00e      	beq.n	8003fca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f000 fb15 	bl	80045dc <DMA_CheckFifoParam>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d008      	beq.n	8003fca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2240      	movs	r2, #64	; 0x40
 8003fbc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e016      	b.n	8003ff8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	697a      	ldr	r2, [r7, #20]
 8003fd0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f000 facc 	bl	8004570 <DMA_CalcBaseAndBitshift>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fe0:	223f      	movs	r2, #63	; 0x3f
 8003fe2:	409a      	lsls	r2, r3
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003ff6:	2300      	movs	r3, #0
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3718      	adds	r7, #24
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	e010803f 	.word	0xe010803f

08004004 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b086      	sub	sp, #24
 8004008:	af00      	add	r7, sp, #0
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	60b9      	str	r1, [r7, #8]
 800400e:	607a      	str	r2, [r7, #4]
 8004010:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004012:	2300      	movs	r3, #0
 8004014:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800401a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004022:	2b01      	cmp	r3, #1
 8004024:	d101      	bne.n	800402a <HAL_DMA_Start_IT+0x26>
 8004026:	2302      	movs	r3, #2
 8004028:	e048      	b.n	80040bc <HAL_DMA_Start_IT+0xb8>
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2201      	movs	r2, #1
 800402e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004038:	b2db      	uxtb	r3, r3
 800403a:	2b01      	cmp	r3, #1
 800403c:	d137      	bne.n	80040ae <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2202      	movs	r2, #2
 8004042:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2200      	movs	r2, #0
 800404a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	68b9      	ldr	r1, [r7, #8]
 8004052:	68f8      	ldr	r0, [r7, #12]
 8004054:	f000 fa5e 	bl	8004514 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800405c:	223f      	movs	r2, #63	; 0x3f
 800405e:	409a      	lsls	r2, r3
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f042 0216 	orr.w	r2, r2, #22
 8004072:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	695a      	ldr	r2, [r3, #20]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004082:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004088:	2b00      	cmp	r3, #0
 800408a:	d007      	beq.n	800409c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f042 0208 	orr.w	r2, r2, #8
 800409a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f042 0201 	orr.w	r2, r2, #1
 80040aa:	601a      	str	r2, [r3, #0]
 80040ac:	e005      	b.n	80040ba <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2200      	movs	r2, #0
 80040b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80040b6:	2302      	movs	r3, #2
 80040b8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80040ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3718      	adds	r7, #24
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040d0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80040d2:	f7ff fdd7 	bl	8003c84 <HAL_GetTick>
 80040d6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d008      	beq.n	80040f6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2280      	movs	r2, #128	; 0x80
 80040e8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e052      	b.n	800419c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f022 0216 	bic.w	r2, r2, #22
 8004104:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	695a      	ldr	r2, [r3, #20]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004114:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411a:	2b00      	cmp	r3, #0
 800411c:	d103      	bne.n	8004126 <HAL_DMA_Abort+0x62>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004122:	2b00      	cmp	r3, #0
 8004124:	d007      	beq.n	8004136 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f022 0208 	bic.w	r2, r2, #8
 8004134:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f022 0201 	bic.w	r2, r2, #1
 8004144:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004146:	e013      	b.n	8004170 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004148:	f7ff fd9c 	bl	8003c84 <HAL_GetTick>
 800414c:	4602      	mov	r2, r0
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	2b05      	cmp	r3, #5
 8004154:	d90c      	bls.n	8004170 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2220      	movs	r2, #32
 800415a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2203      	movs	r2, #3
 8004160:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800416c:	2303      	movs	r3, #3
 800416e:	e015      	b.n	800419c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0301 	and.w	r3, r3, #1
 800417a:	2b00      	cmp	r3, #0
 800417c:	d1e4      	bne.n	8004148 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004182:	223f      	movs	r2, #63	; 0x3f
 8004184:	409a      	lsls	r2, r3
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2201      	movs	r2, #1
 800418e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800419a:	2300      	movs	r3, #0
}
 800419c:	4618      	mov	r0, r3
 800419e:	3710      	adds	r7, #16
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	d004      	beq.n	80041c2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2280      	movs	r2, #128	; 0x80
 80041bc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e00c      	b.n	80041dc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2205      	movs	r2, #5
 80041c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f022 0201 	bic.w	r2, r2, #1
 80041d8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80041da:	2300      	movs	r3, #0
}
 80041dc:	4618      	mov	r0, r3
 80041de:	370c      	adds	r7, #12
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr

080041e8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b086      	sub	sp, #24
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80041f0:	2300      	movs	r3, #0
 80041f2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80041f4:	4b8e      	ldr	r3, [pc, #568]	; (8004430 <HAL_DMA_IRQHandler+0x248>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a8e      	ldr	r2, [pc, #568]	; (8004434 <HAL_DMA_IRQHandler+0x24c>)
 80041fa:	fba2 2303 	umull	r2, r3, r2, r3
 80041fe:	0a9b      	lsrs	r3, r3, #10
 8004200:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004206:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004212:	2208      	movs	r2, #8
 8004214:	409a      	lsls	r2, r3
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	4013      	ands	r3, r2
 800421a:	2b00      	cmp	r3, #0
 800421c:	d01a      	beq.n	8004254 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0304 	and.w	r3, r3, #4
 8004228:	2b00      	cmp	r3, #0
 800422a:	d013      	beq.n	8004254 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f022 0204 	bic.w	r2, r2, #4
 800423a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004240:	2208      	movs	r2, #8
 8004242:	409a      	lsls	r2, r3
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800424c:	f043 0201 	orr.w	r2, r3, #1
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004258:	2201      	movs	r2, #1
 800425a:	409a      	lsls	r2, r3
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	4013      	ands	r3, r2
 8004260:	2b00      	cmp	r3, #0
 8004262:	d012      	beq.n	800428a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	695b      	ldr	r3, [r3, #20]
 800426a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800426e:	2b00      	cmp	r3, #0
 8004270:	d00b      	beq.n	800428a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004276:	2201      	movs	r2, #1
 8004278:	409a      	lsls	r2, r3
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004282:	f043 0202 	orr.w	r2, r3, #2
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800428e:	2204      	movs	r2, #4
 8004290:	409a      	lsls	r2, r3
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	4013      	ands	r3, r2
 8004296:	2b00      	cmp	r3, #0
 8004298:	d012      	beq.n	80042c0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0302 	and.w	r3, r3, #2
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d00b      	beq.n	80042c0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042ac:	2204      	movs	r2, #4
 80042ae:	409a      	lsls	r2, r3
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042b8:	f043 0204 	orr.w	r2, r3, #4
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042c4:	2210      	movs	r2, #16
 80042c6:	409a      	lsls	r2, r3
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	4013      	ands	r3, r2
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d043      	beq.n	8004358 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0308 	and.w	r3, r3, #8
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d03c      	beq.n	8004358 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042e2:	2210      	movs	r2, #16
 80042e4:	409a      	lsls	r2, r3
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d018      	beq.n	800432a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d108      	bne.n	8004318 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430a:	2b00      	cmp	r3, #0
 800430c:	d024      	beq.n	8004358 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	4798      	blx	r3
 8004316:	e01f      	b.n	8004358 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800431c:	2b00      	cmp	r3, #0
 800431e:	d01b      	beq.n	8004358 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	4798      	blx	r3
 8004328:	e016      	b.n	8004358 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004334:	2b00      	cmp	r3, #0
 8004336:	d107      	bne.n	8004348 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f022 0208 	bic.w	r2, r2, #8
 8004346:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434c:	2b00      	cmp	r3, #0
 800434e:	d003      	beq.n	8004358 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800435c:	2220      	movs	r2, #32
 800435e:	409a      	lsls	r2, r3
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	4013      	ands	r3, r2
 8004364:	2b00      	cmp	r3, #0
 8004366:	f000 808f 	beq.w	8004488 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 0310 	and.w	r3, r3, #16
 8004374:	2b00      	cmp	r3, #0
 8004376:	f000 8087 	beq.w	8004488 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800437e:	2220      	movs	r2, #32
 8004380:	409a      	lsls	r2, r3
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800438c:	b2db      	uxtb	r3, r3
 800438e:	2b05      	cmp	r3, #5
 8004390:	d136      	bne.n	8004400 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f022 0216 	bic.w	r2, r2, #22
 80043a0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	695a      	ldr	r2, [r3, #20]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80043b0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d103      	bne.n	80043c2 <HAL_DMA_IRQHandler+0x1da>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d007      	beq.n	80043d2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f022 0208 	bic.w	r2, r2, #8
 80043d0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043d6:	223f      	movs	r2, #63	; 0x3f
 80043d8:	409a      	lsls	r2, r3
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2201      	movs	r2, #1
 80043e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d07e      	beq.n	80044f4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	4798      	blx	r3
        }
        return;
 80043fe:	e079      	b.n	80044f4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d01d      	beq.n	800444a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004418:	2b00      	cmp	r3, #0
 800441a:	d10d      	bne.n	8004438 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004420:	2b00      	cmp	r3, #0
 8004422:	d031      	beq.n	8004488 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	4798      	blx	r3
 800442c:	e02c      	b.n	8004488 <HAL_DMA_IRQHandler+0x2a0>
 800442e:	bf00      	nop
 8004430:	20000004 	.word	0x20000004
 8004434:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800443c:	2b00      	cmp	r3, #0
 800443e:	d023      	beq.n	8004488 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	4798      	blx	r3
 8004448:	e01e      	b.n	8004488 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004454:	2b00      	cmp	r3, #0
 8004456:	d10f      	bne.n	8004478 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f022 0210 	bic.w	r2, r2, #16
 8004466:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800447c:	2b00      	cmp	r3, #0
 800447e:	d003      	beq.n	8004488 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800448c:	2b00      	cmp	r3, #0
 800448e:	d032      	beq.n	80044f6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004494:	f003 0301 	and.w	r3, r3, #1
 8004498:	2b00      	cmp	r3, #0
 800449a:	d022      	beq.n	80044e2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2205      	movs	r2, #5
 80044a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f022 0201 	bic.w	r2, r2, #1
 80044b2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	3301      	adds	r3, #1
 80044b8:	60bb      	str	r3, [r7, #8]
 80044ba:	697a      	ldr	r2, [r7, #20]
 80044bc:	429a      	cmp	r2, r3
 80044be:	d307      	bcc.n	80044d0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0301 	and.w	r3, r3, #1
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d1f2      	bne.n	80044b4 <HAL_DMA_IRQHandler+0x2cc>
 80044ce:	e000      	b.n	80044d2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80044d0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2201      	movs	r2, #1
 80044d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d005      	beq.n	80044f6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	4798      	blx	r3
 80044f2:	e000      	b.n	80044f6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80044f4:	bf00      	nop
    }
  }
}
 80044f6:	3718      	adds	r7, #24
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}

080044fc <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004508:	4618      	mov	r0, r3
 800450a:	370c      	adds	r7, #12
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004514:	b480      	push	{r7}
 8004516:	b085      	sub	sp, #20
 8004518:	af00      	add	r7, sp, #0
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	60b9      	str	r1, [r7, #8]
 800451e:	607a      	str	r2, [r7, #4]
 8004520:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004530:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	683a      	ldr	r2, [r7, #0]
 8004538:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	2b40      	cmp	r3, #64	; 0x40
 8004540:	d108      	bne.n	8004554 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	68ba      	ldr	r2, [r7, #8]
 8004550:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004552:	e007      	b.n	8004564 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	68ba      	ldr	r2, [r7, #8]
 800455a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	60da      	str	r2, [r3, #12]
}
 8004564:	bf00      	nop
 8004566:	3714      	adds	r7, #20
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr

08004570 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004570:	b480      	push	{r7}
 8004572:	b085      	sub	sp, #20
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	b2db      	uxtb	r3, r3
 800457e:	3b10      	subs	r3, #16
 8004580:	4a13      	ldr	r2, [pc, #76]	; (80045d0 <DMA_CalcBaseAndBitshift+0x60>)
 8004582:	fba2 2303 	umull	r2, r3, r2, r3
 8004586:	091b      	lsrs	r3, r3, #4
 8004588:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800458a:	4a12      	ldr	r2, [pc, #72]	; (80045d4 <DMA_CalcBaseAndBitshift+0x64>)
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	4413      	add	r3, r2
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	461a      	mov	r2, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2b03      	cmp	r3, #3
 800459c:	d908      	bls.n	80045b0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	461a      	mov	r2, r3
 80045a4:	4b0c      	ldr	r3, [pc, #48]	; (80045d8 <DMA_CalcBaseAndBitshift+0x68>)
 80045a6:	4013      	ands	r3, r2
 80045a8:	1d1a      	adds	r2, r3, #4
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	659a      	str	r2, [r3, #88]	; 0x58
 80045ae:	e006      	b.n	80045be <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	461a      	mov	r2, r3
 80045b6:	4b08      	ldr	r3, [pc, #32]	; (80045d8 <DMA_CalcBaseAndBitshift+0x68>)
 80045b8:	4013      	ands	r3, r2
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3714      	adds	r7, #20
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr
 80045ce:	bf00      	nop
 80045d0:	aaaaaaab 	.word	0xaaaaaaab
 80045d4:	0801d860 	.word	0x0801d860
 80045d8:	fffffc00 	.word	0xfffffc00

080045dc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80045dc:	b480      	push	{r7}
 80045de:	b085      	sub	sp, #20
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045e4:	2300      	movs	r3, #0
 80045e6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	699b      	ldr	r3, [r3, #24]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d11f      	bne.n	8004636 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	2b03      	cmp	r3, #3
 80045fa:	d856      	bhi.n	80046aa <DMA_CheckFifoParam+0xce>
 80045fc:	a201      	add	r2, pc, #4	; (adr r2, 8004604 <DMA_CheckFifoParam+0x28>)
 80045fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004602:	bf00      	nop
 8004604:	08004615 	.word	0x08004615
 8004608:	08004627 	.word	0x08004627
 800460c:	08004615 	.word	0x08004615
 8004610:	080046ab 	.word	0x080046ab
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004618:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800461c:	2b00      	cmp	r3, #0
 800461e:	d046      	beq.n	80046ae <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004624:	e043      	b.n	80046ae <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800462a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800462e:	d140      	bne.n	80046b2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004634:	e03d      	b.n	80046b2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	699b      	ldr	r3, [r3, #24]
 800463a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800463e:	d121      	bne.n	8004684 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	2b03      	cmp	r3, #3
 8004644:	d837      	bhi.n	80046b6 <DMA_CheckFifoParam+0xda>
 8004646:	a201      	add	r2, pc, #4	; (adr r2, 800464c <DMA_CheckFifoParam+0x70>)
 8004648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800464c:	0800465d 	.word	0x0800465d
 8004650:	08004663 	.word	0x08004663
 8004654:	0800465d 	.word	0x0800465d
 8004658:	08004675 	.word	0x08004675
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	73fb      	strb	r3, [r7, #15]
      break;
 8004660:	e030      	b.n	80046c4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004666:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d025      	beq.n	80046ba <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004672:	e022      	b.n	80046ba <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004678:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800467c:	d11f      	bne.n	80046be <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004682:	e01c      	b.n	80046be <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	2b02      	cmp	r3, #2
 8004688:	d903      	bls.n	8004692 <DMA_CheckFifoParam+0xb6>
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	2b03      	cmp	r3, #3
 800468e:	d003      	beq.n	8004698 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004690:	e018      	b.n	80046c4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	73fb      	strb	r3, [r7, #15]
      break;
 8004696:	e015      	b.n	80046c4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800469c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d00e      	beq.n	80046c2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	73fb      	strb	r3, [r7, #15]
      break;
 80046a8:	e00b      	b.n	80046c2 <DMA_CheckFifoParam+0xe6>
      break;
 80046aa:	bf00      	nop
 80046ac:	e00a      	b.n	80046c4 <DMA_CheckFifoParam+0xe8>
      break;
 80046ae:	bf00      	nop
 80046b0:	e008      	b.n	80046c4 <DMA_CheckFifoParam+0xe8>
      break;
 80046b2:	bf00      	nop
 80046b4:	e006      	b.n	80046c4 <DMA_CheckFifoParam+0xe8>
      break;
 80046b6:	bf00      	nop
 80046b8:	e004      	b.n	80046c4 <DMA_CheckFifoParam+0xe8>
      break;
 80046ba:	bf00      	nop
 80046bc:	e002      	b.n	80046c4 <DMA_CheckFifoParam+0xe8>
      break;   
 80046be:	bf00      	nop
 80046c0:	e000      	b.n	80046c4 <DMA_CheckFifoParam+0xe8>
      break;
 80046c2:	bf00      	nop
    }
  } 
  
  return status; 
 80046c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3714      	adds	r7, #20
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr
 80046d2:	bf00      	nop

080046d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b089      	sub	sp, #36	; 0x24
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80046de:	2300      	movs	r3, #0
 80046e0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80046e2:	2300      	movs	r3, #0
 80046e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80046e6:	2300      	movs	r3, #0
 80046e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80046ea:	2300      	movs	r3, #0
 80046ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80046ee:	2300      	movs	r3, #0
 80046f0:	61fb      	str	r3, [r7, #28]
 80046f2:	e175      	b.n	80049e0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80046f4:	2201      	movs	r2, #1
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	fa02 f303 	lsl.w	r3, r2, r3
 80046fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	697a      	ldr	r2, [r7, #20]
 8004704:	4013      	ands	r3, r2
 8004706:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004708:	693a      	ldr	r2, [r7, #16]
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	429a      	cmp	r2, r3
 800470e:	f040 8164 	bne.w	80049da <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f003 0303 	and.w	r3, r3, #3
 800471a:	2b01      	cmp	r3, #1
 800471c:	d005      	beq.n	800472a <HAL_GPIO_Init+0x56>
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f003 0303 	and.w	r3, r3, #3
 8004726:	2b02      	cmp	r3, #2
 8004728:	d130      	bne.n	800478c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004730:	69fb      	ldr	r3, [r7, #28]
 8004732:	005b      	lsls	r3, r3, #1
 8004734:	2203      	movs	r2, #3
 8004736:	fa02 f303 	lsl.w	r3, r2, r3
 800473a:	43db      	mvns	r3, r3
 800473c:	69ba      	ldr	r2, [r7, #24]
 800473e:	4013      	ands	r3, r2
 8004740:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	68da      	ldr	r2, [r3, #12]
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	005b      	lsls	r3, r3, #1
 800474a:	fa02 f303 	lsl.w	r3, r2, r3
 800474e:	69ba      	ldr	r2, [r7, #24]
 8004750:	4313      	orrs	r3, r2
 8004752:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	69ba      	ldr	r2, [r7, #24]
 8004758:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004760:	2201      	movs	r2, #1
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	fa02 f303 	lsl.w	r3, r2, r3
 8004768:	43db      	mvns	r3, r3
 800476a:	69ba      	ldr	r2, [r7, #24]
 800476c:	4013      	ands	r3, r2
 800476e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	091b      	lsrs	r3, r3, #4
 8004776:	f003 0201 	and.w	r2, r3, #1
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	fa02 f303 	lsl.w	r3, r2, r3
 8004780:	69ba      	ldr	r2, [r7, #24]
 8004782:	4313      	orrs	r3, r2
 8004784:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	69ba      	ldr	r2, [r7, #24]
 800478a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	f003 0303 	and.w	r3, r3, #3
 8004794:	2b03      	cmp	r3, #3
 8004796:	d017      	beq.n	80047c8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800479e:	69fb      	ldr	r3, [r7, #28]
 80047a0:	005b      	lsls	r3, r3, #1
 80047a2:	2203      	movs	r2, #3
 80047a4:	fa02 f303 	lsl.w	r3, r2, r3
 80047a8:	43db      	mvns	r3, r3
 80047aa:	69ba      	ldr	r2, [r7, #24]
 80047ac:	4013      	ands	r3, r2
 80047ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	689a      	ldr	r2, [r3, #8]
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	005b      	lsls	r3, r3, #1
 80047b8:	fa02 f303 	lsl.w	r3, r2, r3
 80047bc:	69ba      	ldr	r2, [r7, #24]
 80047be:	4313      	orrs	r3, r2
 80047c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	69ba      	ldr	r2, [r7, #24]
 80047c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	f003 0303 	and.w	r3, r3, #3
 80047d0:	2b02      	cmp	r3, #2
 80047d2:	d123      	bne.n	800481c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	08da      	lsrs	r2, r3, #3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	3208      	adds	r2, #8
 80047dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	f003 0307 	and.w	r3, r3, #7
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	220f      	movs	r2, #15
 80047ec:	fa02 f303 	lsl.w	r3, r2, r3
 80047f0:	43db      	mvns	r3, r3
 80047f2:	69ba      	ldr	r2, [r7, #24]
 80047f4:	4013      	ands	r3, r2
 80047f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	691a      	ldr	r2, [r3, #16]
 80047fc:	69fb      	ldr	r3, [r7, #28]
 80047fe:	f003 0307 	and.w	r3, r3, #7
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	fa02 f303 	lsl.w	r3, r2, r3
 8004808:	69ba      	ldr	r2, [r7, #24]
 800480a:	4313      	orrs	r3, r2
 800480c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	08da      	lsrs	r2, r3, #3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	3208      	adds	r2, #8
 8004816:	69b9      	ldr	r1, [r7, #24]
 8004818:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	005b      	lsls	r3, r3, #1
 8004826:	2203      	movs	r2, #3
 8004828:	fa02 f303 	lsl.w	r3, r2, r3
 800482c:	43db      	mvns	r3, r3
 800482e:	69ba      	ldr	r2, [r7, #24]
 8004830:	4013      	ands	r3, r2
 8004832:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	f003 0203 	and.w	r2, r3, #3
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	005b      	lsls	r3, r3, #1
 8004840:	fa02 f303 	lsl.w	r3, r2, r3
 8004844:	69ba      	ldr	r2, [r7, #24]
 8004846:	4313      	orrs	r3, r2
 8004848:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	69ba      	ldr	r2, [r7, #24]
 800484e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004858:	2b00      	cmp	r3, #0
 800485a:	f000 80be 	beq.w	80049da <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800485e:	4b66      	ldr	r3, [pc, #408]	; (80049f8 <HAL_GPIO_Init+0x324>)
 8004860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004862:	4a65      	ldr	r2, [pc, #404]	; (80049f8 <HAL_GPIO_Init+0x324>)
 8004864:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004868:	6453      	str	r3, [r2, #68]	; 0x44
 800486a:	4b63      	ldr	r3, [pc, #396]	; (80049f8 <HAL_GPIO_Init+0x324>)
 800486c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800486e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004872:	60fb      	str	r3, [r7, #12]
 8004874:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004876:	4a61      	ldr	r2, [pc, #388]	; (80049fc <HAL_GPIO_Init+0x328>)
 8004878:	69fb      	ldr	r3, [r7, #28]
 800487a:	089b      	lsrs	r3, r3, #2
 800487c:	3302      	adds	r3, #2
 800487e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004882:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004884:	69fb      	ldr	r3, [r7, #28]
 8004886:	f003 0303 	and.w	r3, r3, #3
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	220f      	movs	r2, #15
 800488e:	fa02 f303 	lsl.w	r3, r2, r3
 8004892:	43db      	mvns	r3, r3
 8004894:	69ba      	ldr	r2, [r7, #24]
 8004896:	4013      	ands	r3, r2
 8004898:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a58      	ldr	r2, [pc, #352]	; (8004a00 <HAL_GPIO_Init+0x32c>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d037      	beq.n	8004912 <HAL_GPIO_Init+0x23e>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a57      	ldr	r2, [pc, #348]	; (8004a04 <HAL_GPIO_Init+0x330>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d031      	beq.n	800490e <HAL_GPIO_Init+0x23a>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a56      	ldr	r2, [pc, #344]	; (8004a08 <HAL_GPIO_Init+0x334>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d02b      	beq.n	800490a <HAL_GPIO_Init+0x236>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a55      	ldr	r2, [pc, #340]	; (8004a0c <HAL_GPIO_Init+0x338>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d025      	beq.n	8004906 <HAL_GPIO_Init+0x232>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a54      	ldr	r2, [pc, #336]	; (8004a10 <HAL_GPIO_Init+0x33c>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d01f      	beq.n	8004902 <HAL_GPIO_Init+0x22e>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4a53      	ldr	r2, [pc, #332]	; (8004a14 <HAL_GPIO_Init+0x340>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d019      	beq.n	80048fe <HAL_GPIO_Init+0x22a>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4a52      	ldr	r2, [pc, #328]	; (8004a18 <HAL_GPIO_Init+0x344>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d013      	beq.n	80048fa <HAL_GPIO_Init+0x226>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a51      	ldr	r2, [pc, #324]	; (8004a1c <HAL_GPIO_Init+0x348>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d00d      	beq.n	80048f6 <HAL_GPIO_Init+0x222>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4a50      	ldr	r2, [pc, #320]	; (8004a20 <HAL_GPIO_Init+0x34c>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d007      	beq.n	80048f2 <HAL_GPIO_Init+0x21e>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	4a4f      	ldr	r2, [pc, #316]	; (8004a24 <HAL_GPIO_Init+0x350>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d101      	bne.n	80048ee <HAL_GPIO_Init+0x21a>
 80048ea:	2309      	movs	r3, #9
 80048ec:	e012      	b.n	8004914 <HAL_GPIO_Init+0x240>
 80048ee:	230a      	movs	r3, #10
 80048f0:	e010      	b.n	8004914 <HAL_GPIO_Init+0x240>
 80048f2:	2308      	movs	r3, #8
 80048f4:	e00e      	b.n	8004914 <HAL_GPIO_Init+0x240>
 80048f6:	2307      	movs	r3, #7
 80048f8:	e00c      	b.n	8004914 <HAL_GPIO_Init+0x240>
 80048fa:	2306      	movs	r3, #6
 80048fc:	e00a      	b.n	8004914 <HAL_GPIO_Init+0x240>
 80048fe:	2305      	movs	r3, #5
 8004900:	e008      	b.n	8004914 <HAL_GPIO_Init+0x240>
 8004902:	2304      	movs	r3, #4
 8004904:	e006      	b.n	8004914 <HAL_GPIO_Init+0x240>
 8004906:	2303      	movs	r3, #3
 8004908:	e004      	b.n	8004914 <HAL_GPIO_Init+0x240>
 800490a:	2302      	movs	r3, #2
 800490c:	e002      	b.n	8004914 <HAL_GPIO_Init+0x240>
 800490e:	2301      	movs	r3, #1
 8004910:	e000      	b.n	8004914 <HAL_GPIO_Init+0x240>
 8004912:	2300      	movs	r3, #0
 8004914:	69fa      	ldr	r2, [r7, #28]
 8004916:	f002 0203 	and.w	r2, r2, #3
 800491a:	0092      	lsls	r2, r2, #2
 800491c:	4093      	lsls	r3, r2
 800491e:	69ba      	ldr	r2, [r7, #24]
 8004920:	4313      	orrs	r3, r2
 8004922:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004924:	4935      	ldr	r1, [pc, #212]	; (80049fc <HAL_GPIO_Init+0x328>)
 8004926:	69fb      	ldr	r3, [r7, #28]
 8004928:	089b      	lsrs	r3, r3, #2
 800492a:	3302      	adds	r3, #2
 800492c:	69ba      	ldr	r2, [r7, #24]
 800492e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004932:	4b3d      	ldr	r3, [pc, #244]	; (8004a28 <HAL_GPIO_Init+0x354>)
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	43db      	mvns	r3, r3
 800493c:	69ba      	ldr	r2, [r7, #24]
 800493e:	4013      	ands	r3, r2
 8004940:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800494a:	2b00      	cmp	r3, #0
 800494c:	d003      	beq.n	8004956 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800494e:	69ba      	ldr	r2, [r7, #24]
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	4313      	orrs	r3, r2
 8004954:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004956:	4a34      	ldr	r2, [pc, #208]	; (8004a28 <HAL_GPIO_Init+0x354>)
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800495c:	4b32      	ldr	r3, [pc, #200]	; (8004a28 <HAL_GPIO_Init+0x354>)
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	43db      	mvns	r3, r3
 8004966:	69ba      	ldr	r2, [r7, #24]
 8004968:	4013      	ands	r3, r2
 800496a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004974:	2b00      	cmp	r3, #0
 8004976:	d003      	beq.n	8004980 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004978:	69ba      	ldr	r2, [r7, #24]
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	4313      	orrs	r3, r2
 800497e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004980:	4a29      	ldr	r2, [pc, #164]	; (8004a28 <HAL_GPIO_Init+0x354>)
 8004982:	69bb      	ldr	r3, [r7, #24]
 8004984:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004986:	4b28      	ldr	r3, [pc, #160]	; (8004a28 <HAL_GPIO_Init+0x354>)
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	43db      	mvns	r3, r3
 8004990:	69ba      	ldr	r2, [r7, #24]
 8004992:	4013      	ands	r3, r2
 8004994:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d003      	beq.n	80049aa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80049a2:	69ba      	ldr	r2, [r7, #24]
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	4313      	orrs	r3, r2
 80049a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80049aa:	4a1f      	ldr	r2, [pc, #124]	; (8004a28 <HAL_GPIO_Init+0x354>)
 80049ac:	69bb      	ldr	r3, [r7, #24]
 80049ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80049b0:	4b1d      	ldr	r3, [pc, #116]	; (8004a28 <HAL_GPIO_Init+0x354>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	43db      	mvns	r3, r3
 80049ba:	69ba      	ldr	r2, [r7, #24]
 80049bc:	4013      	ands	r3, r2
 80049be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d003      	beq.n	80049d4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80049cc:	69ba      	ldr	r2, [r7, #24]
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	4313      	orrs	r3, r2
 80049d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80049d4:	4a14      	ldr	r2, [pc, #80]	; (8004a28 <HAL_GPIO_Init+0x354>)
 80049d6:	69bb      	ldr	r3, [r7, #24]
 80049d8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	3301      	adds	r3, #1
 80049de:	61fb      	str	r3, [r7, #28]
 80049e0:	69fb      	ldr	r3, [r7, #28]
 80049e2:	2b0f      	cmp	r3, #15
 80049e4:	f67f ae86 	bls.w	80046f4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80049e8:	bf00      	nop
 80049ea:	bf00      	nop
 80049ec:	3724      	adds	r7, #36	; 0x24
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr
 80049f6:	bf00      	nop
 80049f8:	40023800 	.word	0x40023800
 80049fc:	40013800 	.word	0x40013800
 8004a00:	40020000 	.word	0x40020000
 8004a04:	40020400 	.word	0x40020400
 8004a08:	40020800 	.word	0x40020800
 8004a0c:	40020c00 	.word	0x40020c00
 8004a10:	40021000 	.word	0x40021000
 8004a14:	40021400 	.word	0x40021400
 8004a18:	40021800 	.word	0x40021800
 8004a1c:	40021c00 	.word	0x40021c00
 8004a20:	40022000 	.word	0x40022000
 8004a24:	40022400 	.word	0x40022400
 8004a28:	40013c00 	.word	0x40013c00

08004a2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b085      	sub	sp, #20
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	460b      	mov	r3, r1
 8004a36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	691a      	ldr	r2, [r3, #16]
 8004a3c:	887b      	ldrh	r3, [r7, #2]
 8004a3e:	4013      	ands	r3, r2
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d002      	beq.n	8004a4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004a44:	2301      	movs	r3, #1
 8004a46:	73fb      	strb	r3, [r7, #15]
 8004a48:	e001      	b.n	8004a4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004a4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3714      	adds	r7, #20
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	460b      	mov	r3, r1
 8004a66:	807b      	strh	r3, [r7, #2]
 8004a68:	4613      	mov	r3, r2
 8004a6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a6c:	787b      	ldrb	r3, [r7, #1]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d003      	beq.n	8004a7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a72:	887a      	ldrh	r2, [r7, #2]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004a78:	e003      	b.n	8004a82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004a7a:	887b      	ldrh	r3, [r7, #2]
 8004a7c:	041a      	lsls	r2, r3, #16
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	619a      	str	r2, [r3, #24]
}
 8004a82:	bf00      	nop
 8004a84:	370c      	adds	r7, #12
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr

08004a8e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004a8e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a90:	b08f      	sub	sp, #60	; 0x3c
 8004a92:	af0a      	add	r7, sp, #40	; 0x28
 8004a94:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d101      	bne.n	8004aa0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e116      	b.n	8004cce <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d106      	bne.n	8004ac0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f7ff f816 	bl	8003aec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2203      	movs	r2, #3
 8004ac4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d102      	bne.n	8004ada <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f003 ff00 	bl	80088e4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	603b      	str	r3, [r7, #0]
 8004aea:	687e      	ldr	r6, [r7, #4]
 8004aec:	466d      	mov	r5, sp
 8004aee:	f106 0410 	add.w	r4, r6, #16
 8004af2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004af4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004af6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004af8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004afa:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004afe:	e885 0003 	stmia.w	r5, {r0, r1}
 8004b02:	1d33      	adds	r3, r6, #4
 8004b04:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b06:	6838      	ldr	r0, [r7, #0]
 8004b08:	f003 fe94 	bl	8008834 <USB_CoreInit>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d005      	beq.n	8004b1e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2202      	movs	r2, #2
 8004b16:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e0d7      	b.n	8004cce <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	2100      	movs	r1, #0
 8004b24:	4618      	mov	r0, r3
 8004b26:	f003 feee 	bl	8008906 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	73fb      	strb	r3, [r7, #15]
 8004b2e:	e04a      	b.n	8004bc6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004b30:	7bfa      	ldrb	r2, [r7, #15]
 8004b32:	6879      	ldr	r1, [r7, #4]
 8004b34:	4613      	mov	r3, r2
 8004b36:	00db      	lsls	r3, r3, #3
 8004b38:	4413      	add	r3, r2
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	440b      	add	r3, r1
 8004b3e:	333d      	adds	r3, #61	; 0x3d
 8004b40:	2201      	movs	r2, #1
 8004b42:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004b44:	7bfa      	ldrb	r2, [r7, #15]
 8004b46:	6879      	ldr	r1, [r7, #4]
 8004b48:	4613      	mov	r3, r2
 8004b4a:	00db      	lsls	r3, r3, #3
 8004b4c:	4413      	add	r3, r2
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	440b      	add	r3, r1
 8004b52:	333c      	adds	r3, #60	; 0x3c
 8004b54:	7bfa      	ldrb	r2, [r7, #15]
 8004b56:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004b58:	7bfa      	ldrb	r2, [r7, #15]
 8004b5a:	7bfb      	ldrb	r3, [r7, #15]
 8004b5c:	b298      	uxth	r0, r3
 8004b5e:	6879      	ldr	r1, [r7, #4]
 8004b60:	4613      	mov	r3, r2
 8004b62:	00db      	lsls	r3, r3, #3
 8004b64:	4413      	add	r3, r2
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	440b      	add	r3, r1
 8004b6a:	3344      	adds	r3, #68	; 0x44
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004b70:	7bfa      	ldrb	r2, [r7, #15]
 8004b72:	6879      	ldr	r1, [r7, #4]
 8004b74:	4613      	mov	r3, r2
 8004b76:	00db      	lsls	r3, r3, #3
 8004b78:	4413      	add	r3, r2
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	440b      	add	r3, r1
 8004b7e:	3340      	adds	r3, #64	; 0x40
 8004b80:	2200      	movs	r2, #0
 8004b82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004b84:	7bfa      	ldrb	r2, [r7, #15]
 8004b86:	6879      	ldr	r1, [r7, #4]
 8004b88:	4613      	mov	r3, r2
 8004b8a:	00db      	lsls	r3, r3, #3
 8004b8c:	4413      	add	r3, r2
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	440b      	add	r3, r1
 8004b92:	3348      	adds	r3, #72	; 0x48
 8004b94:	2200      	movs	r2, #0
 8004b96:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004b98:	7bfa      	ldrb	r2, [r7, #15]
 8004b9a:	6879      	ldr	r1, [r7, #4]
 8004b9c:	4613      	mov	r3, r2
 8004b9e:	00db      	lsls	r3, r3, #3
 8004ba0:	4413      	add	r3, r2
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	440b      	add	r3, r1
 8004ba6:	334c      	adds	r3, #76	; 0x4c
 8004ba8:	2200      	movs	r2, #0
 8004baa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004bac:	7bfa      	ldrb	r2, [r7, #15]
 8004bae:	6879      	ldr	r1, [r7, #4]
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	00db      	lsls	r3, r3, #3
 8004bb4:	4413      	add	r3, r2
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	440b      	add	r3, r1
 8004bba:	3354      	adds	r3, #84	; 0x54
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004bc0:	7bfb      	ldrb	r3, [r7, #15]
 8004bc2:	3301      	adds	r3, #1
 8004bc4:	73fb      	strb	r3, [r7, #15]
 8004bc6:	7bfa      	ldrb	r2, [r7, #15]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d3af      	bcc.n	8004b30 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	73fb      	strb	r3, [r7, #15]
 8004bd4:	e044      	b.n	8004c60 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004bd6:	7bfa      	ldrb	r2, [r7, #15]
 8004bd8:	6879      	ldr	r1, [r7, #4]
 8004bda:	4613      	mov	r3, r2
 8004bdc:	00db      	lsls	r3, r3, #3
 8004bde:	4413      	add	r3, r2
 8004be0:	009b      	lsls	r3, r3, #2
 8004be2:	440b      	add	r3, r1
 8004be4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004be8:	2200      	movs	r2, #0
 8004bea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004bec:	7bfa      	ldrb	r2, [r7, #15]
 8004bee:	6879      	ldr	r1, [r7, #4]
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	00db      	lsls	r3, r3, #3
 8004bf4:	4413      	add	r3, r2
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	440b      	add	r3, r1
 8004bfa:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004bfe:	7bfa      	ldrb	r2, [r7, #15]
 8004c00:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004c02:	7bfa      	ldrb	r2, [r7, #15]
 8004c04:	6879      	ldr	r1, [r7, #4]
 8004c06:	4613      	mov	r3, r2
 8004c08:	00db      	lsls	r3, r3, #3
 8004c0a:	4413      	add	r3, r2
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	440b      	add	r3, r1
 8004c10:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004c14:	2200      	movs	r2, #0
 8004c16:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004c18:	7bfa      	ldrb	r2, [r7, #15]
 8004c1a:	6879      	ldr	r1, [r7, #4]
 8004c1c:	4613      	mov	r3, r2
 8004c1e:	00db      	lsls	r3, r3, #3
 8004c20:	4413      	add	r3, r2
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	440b      	add	r3, r1
 8004c26:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004c2e:	7bfa      	ldrb	r2, [r7, #15]
 8004c30:	6879      	ldr	r1, [r7, #4]
 8004c32:	4613      	mov	r3, r2
 8004c34:	00db      	lsls	r3, r3, #3
 8004c36:	4413      	add	r3, r2
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	440b      	add	r3, r1
 8004c3c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004c40:	2200      	movs	r2, #0
 8004c42:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004c44:	7bfa      	ldrb	r2, [r7, #15]
 8004c46:	6879      	ldr	r1, [r7, #4]
 8004c48:	4613      	mov	r3, r2
 8004c4a:	00db      	lsls	r3, r3, #3
 8004c4c:	4413      	add	r3, r2
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	440b      	add	r3, r1
 8004c52:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004c56:	2200      	movs	r2, #0
 8004c58:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c5a:	7bfb      	ldrb	r3, [r7, #15]
 8004c5c:	3301      	adds	r3, #1
 8004c5e:	73fb      	strb	r3, [r7, #15]
 8004c60:	7bfa      	ldrb	r2, [r7, #15]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d3b5      	bcc.n	8004bd6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	603b      	str	r3, [r7, #0]
 8004c70:	687e      	ldr	r6, [r7, #4]
 8004c72:	466d      	mov	r5, sp
 8004c74:	f106 0410 	add.w	r4, r6, #16
 8004c78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c80:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004c84:	e885 0003 	stmia.w	r5, {r0, r1}
 8004c88:	1d33      	adds	r3, r6, #4
 8004c8a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004c8c:	6838      	ldr	r0, [r7, #0]
 8004c8e:	f003 fe87 	bl	80089a0 <USB_DevInit>
 8004c92:	4603      	mov	r3, r0
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d005      	beq.n	8004ca4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2202      	movs	r2, #2
 8004c9c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e014      	b.n	8004cce <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d102      	bne.n	8004cc2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f000 f80b 	bl	8004cd8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f004 f845 	bl	8008d56 <USB_DevDisconnect>

  return HAL_OK;
 8004ccc:	2300      	movs	r3, #0
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3714      	adds	r7, #20
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004cd8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b085      	sub	sp, #20
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2201      	movs	r2, #1
 8004cea:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	699b      	ldr	r3, [r3, #24]
 8004cfa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d06:	4b05      	ldr	r3, [pc, #20]	; (8004d1c <HAL_PCDEx_ActivateLPM+0x44>)
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	68fa      	ldr	r2, [r7, #12]
 8004d0c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004d0e:	2300      	movs	r3, #0
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3714      	adds	r7, #20
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr
 8004d1c:	10000003 	.word	0x10000003

08004d20 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004d20:	b480      	push	{r7}
 8004d22:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d24:	4b05      	ldr	r3, [pc, #20]	; (8004d3c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a04      	ldr	r2, [pc, #16]	; (8004d3c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004d2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d2e:	6013      	str	r3, [r2, #0]
}
 8004d30:	bf00      	nop
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr
 8004d3a:	bf00      	nop
 8004d3c:	40007000 	.word	0x40007000

08004d40 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b082      	sub	sp, #8
 8004d44:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004d46:	2300      	movs	r3, #0
 8004d48:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004d4a:	4b23      	ldr	r3, [pc, #140]	; (8004dd8 <HAL_PWREx_EnableOverDrive+0x98>)
 8004d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4e:	4a22      	ldr	r2, [pc, #136]	; (8004dd8 <HAL_PWREx_EnableOverDrive+0x98>)
 8004d50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d54:	6413      	str	r3, [r2, #64]	; 0x40
 8004d56:	4b20      	ldr	r3, [pc, #128]	; (8004dd8 <HAL_PWREx_EnableOverDrive+0x98>)
 8004d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d5e:	603b      	str	r3, [r7, #0]
 8004d60:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004d62:	4b1e      	ldr	r3, [pc, #120]	; (8004ddc <HAL_PWREx_EnableOverDrive+0x9c>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a1d      	ldr	r2, [pc, #116]	; (8004ddc <HAL_PWREx_EnableOverDrive+0x9c>)
 8004d68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d6c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d6e:	f7fe ff89 	bl	8003c84 <HAL_GetTick>
 8004d72:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004d74:	e009      	b.n	8004d8a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004d76:	f7fe ff85 	bl	8003c84 <HAL_GetTick>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	1ad3      	subs	r3, r2, r3
 8004d80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d84:	d901      	bls.n	8004d8a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	e022      	b.n	8004dd0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004d8a:	4b14      	ldr	r3, [pc, #80]	; (8004ddc <HAL_PWREx_EnableOverDrive+0x9c>)
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d96:	d1ee      	bne.n	8004d76 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004d98:	4b10      	ldr	r3, [pc, #64]	; (8004ddc <HAL_PWREx_EnableOverDrive+0x9c>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a0f      	ldr	r2, [pc, #60]	; (8004ddc <HAL_PWREx_EnableOverDrive+0x9c>)
 8004d9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004da2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004da4:	f7fe ff6e 	bl	8003c84 <HAL_GetTick>
 8004da8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004daa:	e009      	b.n	8004dc0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004dac:	f7fe ff6a 	bl	8003c84 <HAL_GetTick>
 8004db0:	4602      	mov	r2, r0
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	1ad3      	subs	r3, r2, r3
 8004db6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004dba:	d901      	bls.n	8004dc0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004dbc:	2303      	movs	r3, #3
 8004dbe:	e007      	b.n	8004dd0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004dc0:	4b06      	ldr	r3, [pc, #24]	; (8004ddc <HAL_PWREx_EnableOverDrive+0x9c>)
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dc8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004dcc:	d1ee      	bne.n	8004dac <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004dce:	2300      	movs	r3, #0
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3708      	adds	r7, #8
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}
 8004dd8:	40023800 	.word	0x40023800
 8004ddc:	40007000 	.word	0x40007000

08004de0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b086      	sub	sp, #24
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004de8:	2300      	movs	r3, #0
 8004dea:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d101      	bne.n	8004df6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e29b      	b.n	800532e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 0301 	and.w	r3, r3, #1
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	f000 8087 	beq.w	8004f12 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004e04:	4b96      	ldr	r3, [pc, #600]	; (8005060 <HAL_RCC_OscConfig+0x280>)
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	f003 030c 	and.w	r3, r3, #12
 8004e0c:	2b04      	cmp	r3, #4
 8004e0e:	d00c      	beq.n	8004e2a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e10:	4b93      	ldr	r3, [pc, #588]	; (8005060 <HAL_RCC_OscConfig+0x280>)
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	f003 030c 	and.w	r3, r3, #12
 8004e18:	2b08      	cmp	r3, #8
 8004e1a:	d112      	bne.n	8004e42 <HAL_RCC_OscConfig+0x62>
 8004e1c:	4b90      	ldr	r3, [pc, #576]	; (8005060 <HAL_RCC_OscConfig+0x280>)
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e28:	d10b      	bne.n	8004e42 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e2a:	4b8d      	ldr	r3, [pc, #564]	; (8005060 <HAL_RCC_OscConfig+0x280>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d06c      	beq.n	8004f10 <HAL_RCC_OscConfig+0x130>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d168      	bne.n	8004f10 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e275      	b.n	800532e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e4a:	d106      	bne.n	8004e5a <HAL_RCC_OscConfig+0x7a>
 8004e4c:	4b84      	ldr	r3, [pc, #528]	; (8005060 <HAL_RCC_OscConfig+0x280>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a83      	ldr	r2, [pc, #524]	; (8005060 <HAL_RCC_OscConfig+0x280>)
 8004e52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e56:	6013      	str	r3, [r2, #0]
 8004e58:	e02e      	b.n	8004eb8 <HAL_RCC_OscConfig+0xd8>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d10c      	bne.n	8004e7c <HAL_RCC_OscConfig+0x9c>
 8004e62:	4b7f      	ldr	r3, [pc, #508]	; (8005060 <HAL_RCC_OscConfig+0x280>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a7e      	ldr	r2, [pc, #504]	; (8005060 <HAL_RCC_OscConfig+0x280>)
 8004e68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e6c:	6013      	str	r3, [r2, #0]
 8004e6e:	4b7c      	ldr	r3, [pc, #496]	; (8005060 <HAL_RCC_OscConfig+0x280>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a7b      	ldr	r2, [pc, #492]	; (8005060 <HAL_RCC_OscConfig+0x280>)
 8004e74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e78:	6013      	str	r3, [r2, #0]
 8004e7a:	e01d      	b.n	8004eb8 <HAL_RCC_OscConfig+0xd8>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e84:	d10c      	bne.n	8004ea0 <HAL_RCC_OscConfig+0xc0>
 8004e86:	4b76      	ldr	r3, [pc, #472]	; (8005060 <HAL_RCC_OscConfig+0x280>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a75      	ldr	r2, [pc, #468]	; (8005060 <HAL_RCC_OscConfig+0x280>)
 8004e8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e90:	6013      	str	r3, [r2, #0]
 8004e92:	4b73      	ldr	r3, [pc, #460]	; (8005060 <HAL_RCC_OscConfig+0x280>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a72      	ldr	r2, [pc, #456]	; (8005060 <HAL_RCC_OscConfig+0x280>)
 8004e98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e9c:	6013      	str	r3, [r2, #0]
 8004e9e:	e00b      	b.n	8004eb8 <HAL_RCC_OscConfig+0xd8>
 8004ea0:	4b6f      	ldr	r3, [pc, #444]	; (8005060 <HAL_RCC_OscConfig+0x280>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a6e      	ldr	r2, [pc, #440]	; (8005060 <HAL_RCC_OscConfig+0x280>)
 8004ea6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004eaa:	6013      	str	r3, [r2, #0]
 8004eac:	4b6c      	ldr	r3, [pc, #432]	; (8005060 <HAL_RCC_OscConfig+0x280>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a6b      	ldr	r2, [pc, #428]	; (8005060 <HAL_RCC_OscConfig+0x280>)
 8004eb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004eb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d013      	beq.n	8004ee8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ec0:	f7fe fee0 	bl	8003c84 <HAL_GetTick>
 8004ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ec6:	e008      	b.n	8004eda <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ec8:	f7fe fedc 	bl	8003c84 <HAL_GetTick>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	2b64      	cmp	r3, #100	; 0x64
 8004ed4:	d901      	bls.n	8004eda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	e229      	b.n	800532e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eda:	4b61      	ldr	r3, [pc, #388]	; (8005060 <HAL_RCC_OscConfig+0x280>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d0f0      	beq.n	8004ec8 <HAL_RCC_OscConfig+0xe8>
 8004ee6:	e014      	b.n	8004f12 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ee8:	f7fe fecc 	bl	8003c84 <HAL_GetTick>
 8004eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004eee:	e008      	b.n	8004f02 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ef0:	f7fe fec8 	bl	8003c84 <HAL_GetTick>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	2b64      	cmp	r3, #100	; 0x64
 8004efc:	d901      	bls.n	8004f02 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004efe:	2303      	movs	r3, #3
 8004f00:	e215      	b.n	800532e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f02:	4b57      	ldr	r3, [pc, #348]	; (8005060 <HAL_RCC_OscConfig+0x280>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d1f0      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x110>
 8004f0e:	e000      	b.n	8004f12 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 0302 	and.w	r3, r3, #2
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d069      	beq.n	8004ff2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004f1e:	4b50      	ldr	r3, [pc, #320]	; (8005060 <HAL_RCC_OscConfig+0x280>)
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	f003 030c 	and.w	r3, r3, #12
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d00b      	beq.n	8004f42 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f2a:	4b4d      	ldr	r3, [pc, #308]	; (8005060 <HAL_RCC_OscConfig+0x280>)
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	f003 030c 	and.w	r3, r3, #12
 8004f32:	2b08      	cmp	r3, #8
 8004f34:	d11c      	bne.n	8004f70 <HAL_RCC_OscConfig+0x190>
 8004f36:	4b4a      	ldr	r3, [pc, #296]	; (8005060 <HAL_RCC_OscConfig+0x280>)
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d116      	bne.n	8004f70 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f42:	4b47      	ldr	r3, [pc, #284]	; (8005060 <HAL_RCC_OscConfig+0x280>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 0302 	and.w	r3, r3, #2
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d005      	beq.n	8004f5a <HAL_RCC_OscConfig+0x17a>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	68db      	ldr	r3, [r3, #12]
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d001      	beq.n	8004f5a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	e1e9      	b.n	800532e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f5a:	4b41      	ldr	r3, [pc, #260]	; (8005060 <HAL_RCC_OscConfig+0x280>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	691b      	ldr	r3, [r3, #16]
 8004f66:	00db      	lsls	r3, r3, #3
 8004f68:	493d      	ldr	r1, [pc, #244]	; (8005060 <HAL_RCC_OscConfig+0x280>)
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f6e:	e040      	b.n	8004ff2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d023      	beq.n	8004fc0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f78:	4b39      	ldr	r3, [pc, #228]	; (8005060 <HAL_RCC_OscConfig+0x280>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a38      	ldr	r2, [pc, #224]	; (8005060 <HAL_RCC_OscConfig+0x280>)
 8004f7e:	f043 0301 	orr.w	r3, r3, #1
 8004f82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f84:	f7fe fe7e 	bl	8003c84 <HAL_GetTick>
 8004f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f8a:	e008      	b.n	8004f9e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f8c:	f7fe fe7a 	bl	8003c84 <HAL_GetTick>
 8004f90:	4602      	mov	r2, r0
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	2b02      	cmp	r3, #2
 8004f98:	d901      	bls.n	8004f9e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004f9a:	2303      	movs	r3, #3
 8004f9c:	e1c7      	b.n	800532e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f9e:	4b30      	ldr	r3, [pc, #192]	; (8005060 <HAL_RCC_OscConfig+0x280>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 0302 	and.w	r3, r3, #2
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d0f0      	beq.n	8004f8c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004faa:	4b2d      	ldr	r3, [pc, #180]	; (8005060 <HAL_RCC_OscConfig+0x280>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	691b      	ldr	r3, [r3, #16]
 8004fb6:	00db      	lsls	r3, r3, #3
 8004fb8:	4929      	ldr	r1, [pc, #164]	; (8005060 <HAL_RCC_OscConfig+0x280>)
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	600b      	str	r3, [r1, #0]
 8004fbe:	e018      	b.n	8004ff2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fc0:	4b27      	ldr	r3, [pc, #156]	; (8005060 <HAL_RCC_OscConfig+0x280>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a26      	ldr	r2, [pc, #152]	; (8005060 <HAL_RCC_OscConfig+0x280>)
 8004fc6:	f023 0301 	bic.w	r3, r3, #1
 8004fca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fcc:	f7fe fe5a 	bl	8003c84 <HAL_GetTick>
 8004fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fd2:	e008      	b.n	8004fe6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fd4:	f7fe fe56 	bl	8003c84 <HAL_GetTick>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	2b02      	cmp	r3, #2
 8004fe0:	d901      	bls.n	8004fe6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	e1a3      	b.n	800532e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fe6:	4b1e      	ldr	r3, [pc, #120]	; (8005060 <HAL_RCC_OscConfig+0x280>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 0302 	and.w	r3, r3, #2
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d1f0      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 0308 	and.w	r3, r3, #8
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d038      	beq.n	8005070 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	695b      	ldr	r3, [r3, #20]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d019      	beq.n	800503a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005006:	4b16      	ldr	r3, [pc, #88]	; (8005060 <HAL_RCC_OscConfig+0x280>)
 8005008:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800500a:	4a15      	ldr	r2, [pc, #84]	; (8005060 <HAL_RCC_OscConfig+0x280>)
 800500c:	f043 0301 	orr.w	r3, r3, #1
 8005010:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005012:	f7fe fe37 	bl	8003c84 <HAL_GetTick>
 8005016:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005018:	e008      	b.n	800502c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800501a:	f7fe fe33 	bl	8003c84 <HAL_GetTick>
 800501e:	4602      	mov	r2, r0
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	1ad3      	subs	r3, r2, r3
 8005024:	2b02      	cmp	r3, #2
 8005026:	d901      	bls.n	800502c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005028:	2303      	movs	r3, #3
 800502a:	e180      	b.n	800532e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800502c:	4b0c      	ldr	r3, [pc, #48]	; (8005060 <HAL_RCC_OscConfig+0x280>)
 800502e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005030:	f003 0302 	and.w	r3, r3, #2
 8005034:	2b00      	cmp	r3, #0
 8005036:	d0f0      	beq.n	800501a <HAL_RCC_OscConfig+0x23a>
 8005038:	e01a      	b.n	8005070 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800503a:	4b09      	ldr	r3, [pc, #36]	; (8005060 <HAL_RCC_OscConfig+0x280>)
 800503c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800503e:	4a08      	ldr	r2, [pc, #32]	; (8005060 <HAL_RCC_OscConfig+0x280>)
 8005040:	f023 0301 	bic.w	r3, r3, #1
 8005044:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005046:	f7fe fe1d 	bl	8003c84 <HAL_GetTick>
 800504a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800504c:	e00a      	b.n	8005064 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800504e:	f7fe fe19 	bl	8003c84 <HAL_GetTick>
 8005052:	4602      	mov	r2, r0
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	1ad3      	subs	r3, r2, r3
 8005058:	2b02      	cmp	r3, #2
 800505a:	d903      	bls.n	8005064 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800505c:	2303      	movs	r3, #3
 800505e:	e166      	b.n	800532e <HAL_RCC_OscConfig+0x54e>
 8005060:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005064:	4b92      	ldr	r3, [pc, #584]	; (80052b0 <HAL_RCC_OscConfig+0x4d0>)
 8005066:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005068:	f003 0302 	and.w	r3, r3, #2
 800506c:	2b00      	cmp	r3, #0
 800506e:	d1ee      	bne.n	800504e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 0304 	and.w	r3, r3, #4
 8005078:	2b00      	cmp	r3, #0
 800507a:	f000 80a4 	beq.w	80051c6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800507e:	4b8c      	ldr	r3, [pc, #560]	; (80052b0 <HAL_RCC_OscConfig+0x4d0>)
 8005080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005086:	2b00      	cmp	r3, #0
 8005088:	d10d      	bne.n	80050a6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800508a:	4b89      	ldr	r3, [pc, #548]	; (80052b0 <HAL_RCC_OscConfig+0x4d0>)
 800508c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508e:	4a88      	ldr	r2, [pc, #544]	; (80052b0 <HAL_RCC_OscConfig+0x4d0>)
 8005090:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005094:	6413      	str	r3, [r2, #64]	; 0x40
 8005096:	4b86      	ldr	r3, [pc, #536]	; (80052b0 <HAL_RCC_OscConfig+0x4d0>)
 8005098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800509e:	60bb      	str	r3, [r7, #8]
 80050a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050a2:	2301      	movs	r3, #1
 80050a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050a6:	4b83      	ldr	r3, [pc, #524]	; (80052b4 <HAL_RCC_OscConfig+0x4d4>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d118      	bne.n	80050e4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80050b2:	4b80      	ldr	r3, [pc, #512]	; (80052b4 <HAL_RCC_OscConfig+0x4d4>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a7f      	ldr	r2, [pc, #508]	; (80052b4 <HAL_RCC_OscConfig+0x4d4>)
 80050b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050be:	f7fe fde1 	bl	8003c84 <HAL_GetTick>
 80050c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050c4:	e008      	b.n	80050d8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050c6:	f7fe fddd 	bl	8003c84 <HAL_GetTick>
 80050ca:	4602      	mov	r2, r0
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	1ad3      	subs	r3, r2, r3
 80050d0:	2b64      	cmp	r3, #100	; 0x64
 80050d2:	d901      	bls.n	80050d8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80050d4:	2303      	movs	r3, #3
 80050d6:	e12a      	b.n	800532e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050d8:	4b76      	ldr	r3, [pc, #472]	; (80052b4 <HAL_RCC_OscConfig+0x4d4>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d0f0      	beq.n	80050c6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d106      	bne.n	80050fa <HAL_RCC_OscConfig+0x31a>
 80050ec:	4b70      	ldr	r3, [pc, #448]	; (80052b0 <HAL_RCC_OscConfig+0x4d0>)
 80050ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050f0:	4a6f      	ldr	r2, [pc, #444]	; (80052b0 <HAL_RCC_OscConfig+0x4d0>)
 80050f2:	f043 0301 	orr.w	r3, r3, #1
 80050f6:	6713      	str	r3, [r2, #112]	; 0x70
 80050f8:	e02d      	b.n	8005156 <HAL_RCC_OscConfig+0x376>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d10c      	bne.n	800511c <HAL_RCC_OscConfig+0x33c>
 8005102:	4b6b      	ldr	r3, [pc, #428]	; (80052b0 <HAL_RCC_OscConfig+0x4d0>)
 8005104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005106:	4a6a      	ldr	r2, [pc, #424]	; (80052b0 <HAL_RCC_OscConfig+0x4d0>)
 8005108:	f023 0301 	bic.w	r3, r3, #1
 800510c:	6713      	str	r3, [r2, #112]	; 0x70
 800510e:	4b68      	ldr	r3, [pc, #416]	; (80052b0 <HAL_RCC_OscConfig+0x4d0>)
 8005110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005112:	4a67      	ldr	r2, [pc, #412]	; (80052b0 <HAL_RCC_OscConfig+0x4d0>)
 8005114:	f023 0304 	bic.w	r3, r3, #4
 8005118:	6713      	str	r3, [r2, #112]	; 0x70
 800511a:	e01c      	b.n	8005156 <HAL_RCC_OscConfig+0x376>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	2b05      	cmp	r3, #5
 8005122:	d10c      	bne.n	800513e <HAL_RCC_OscConfig+0x35e>
 8005124:	4b62      	ldr	r3, [pc, #392]	; (80052b0 <HAL_RCC_OscConfig+0x4d0>)
 8005126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005128:	4a61      	ldr	r2, [pc, #388]	; (80052b0 <HAL_RCC_OscConfig+0x4d0>)
 800512a:	f043 0304 	orr.w	r3, r3, #4
 800512e:	6713      	str	r3, [r2, #112]	; 0x70
 8005130:	4b5f      	ldr	r3, [pc, #380]	; (80052b0 <HAL_RCC_OscConfig+0x4d0>)
 8005132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005134:	4a5e      	ldr	r2, [pc, #376]	; (80052b0 <HAL_RCC_OscConfig+0x4d0>)
 8005136:	f043 0301 	orr.w	r3, r3, #1
 800513a:	6713      	str	r3, [r2, #112]	; 0x70
 800513c:	e00b      	b.n	8005156 <HAL_RCC_OscConfig+0x376>
 800513e:	4b5c      	ldr	r3, [pc, #368]	; (80052b0 <HAL_RCC_OscConfig+0x4d0>)
 8005140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005142:	4a5b      	ldr	r2, [pc, #364]	; (80052b0 <HAL_RCC_OscConfig+0x4d0>)
 8005144:	f023 0301 	bic.w	r3, r3, #1
 8005148:	6713      	str	r3, [r2, #112]	; 0x70
 800514a:	4b59      	ldr	r3, [pc, #356]	; (80052b0 <HAL_RCC_OscConfig+0x4d0>)
 800514c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800514e:	4a58      	ldr	r2, [pc, #352]	; (80052b0 <HAL_RCC_OscConfig+0x4d0>)
 8005150:	f023 0304 	bic.w	r3, r3, #4
 8005154:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d015      	beq.n	800518a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800515e:	f7fe fd91 	bl	8003c84 <HAL_GetTick>
 8005162:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005164:	e00a      	b.n	800517c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005166:	f7fe fd8d 	bl	8003c84 <HAL_GetTick>
 800516a:	4602      	mov	r2, r0
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	1ad3      	subs	r3, r2, r3
 8005170:	f241 3288 	movw	r2, #5000	; 0x1388
 8005174:	4293      	cmp	r3, r2
 8005176:	d901      	bls.n	800517c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005178:	2303      	movs	r3, #3
 800517a:	e0d8      	b.n	800532e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800517c:	4b4c      	ldr	r3, [pc, #304]	; (80052b0 <HAL_RCC_OscConfig+0x4d0>)
 800517e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005180:	f003 0302 	and.w	r3, r3, #2
 8005184:	2b00      	cmp	r3, #0
 8005186:	d0ee      	beq.n	8005166 <HAL_RCC_OscConfig+0x386>
 8005188:	e014      	b.n	80051b4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800518a:	f7fe fd7b 	bl	8003c84 <HAL_GetTick>
 800518e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005190:	e00a      	b.n	80051a8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005192:	f7fe fd77 	bl	8003c84 <HAL_GetTick>
 8005196:	4602      	mov	r2, r0
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	1ad3      	subs	r3, r2, r3
 800519c:	f241 3288 	movw	r2, #5000	; 0x1388
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d901      	bls.n	80051a8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80051a4:	2303      	movs	r3, #3
 80051a6:	e0c2      	b.n	800532e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051a8:	4b41      	ldr	r3, [pc, #260]	; (80052b0 <HAL_RCC_OscConfig+0x4d0>)
 80051aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ac:	f003 0302 	and.w	r3, r3, #2
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d1ee      	bne.n	8005192 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80051b4:	7dfb      	ldrb	r3, [r7, #23]
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d105      	bne.n	80051c6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051ba:	4b3d      	ldr	r3, [pc, #244]	; (80052b0 <HAL_RCC_OscConfig+0x4d0>)
 80051bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051be:	4a3c      	ldr	r2, [pc, #240]	; (80052b0 <HAL_RCC_OscConfig+0x4d0>)
 80051c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051c4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	699b      	ldr	r3, [r3, #24]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	f000 80ae 	beq.w	800532c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80051d0:	4b37      	ldr	r3, [pc, #220]	; (80052b0 <HAL_RCC_OscConfig+0x4d0>)
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	f003 030c 	and.w	r3, r3, #12
 80051d8:	2b08      	cmp	r3, #8
 80051da:	d06d      	beq.n	80052b8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	699b      	ldr	r3, [r3, #24]
 80051e0:	2b02      	cmp	r3, #2
 80051e2:	d14b      	bne.n	800527c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051e4:	4b32      	ldr	r3, [pc, #200]	; (80052b0 <HAL_RCC_OscConfig+0x4d0>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a31      	ldr	r2, [pc, #196]	; (80052b0 <HAL_RCC_OscConfig+0x4d0>)
 80051ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051f0:	f7fe fd48 	bl	8003c84 <HAL_GetTick>
 80051f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051f6:	e008      	b.n	800520a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051f8:	f7fe fd44 	bl	8003c84 <HAL_GetTick>
 80051fc:	4602      	mov	r2, r0
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	2b02      	cmp	r3, #2
 8005204:	d901      	bls.n	800520a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005206:	2303      	movs	r3, #3
 8005208:	e091      	b.n	800532e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800520a:	4b29      	ldr	r3, [pc, #164]	; (80052b0 <HAL_RCC_OscConfig+0x4d0>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005212:	2b00      	cmp	r3, #0
 8005214:	d1f0      	bne.n	80051f8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	69da      	ldr	r2, [r3, #28]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6a1b      	ldr	r3, [r3, #32]
 800521e:	431a      	orrs	r2, r3
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005224:	019b      	lsls	r3, r3, #6
 8005226:	431a      	orrs	r2, r3
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800522c:	085b      	lsrs	r3, r3, #1
 800522e:	3b01      	subs	r3, #1
 8005230:	041b      	lsls	r3, r3, #16
 8005232:	431a      	orrs	r2, r3
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005238:	061b      	lsls	r3, r3, #24
 800523a:	431a      	orrs	r2, r3
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005240:	071b      	lsls	r3, r3, #28
 8005242:	491b      	ldr	r1, [pc, #108]	; (80052b0 <HAL_RCC_OscConfig+0x4d0>)
 8005244:	4313      	orrs	r3, r2
 8005246:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005248:	4b19      	ldr	r3, [pc, #100]	; (80052b0 <HAL_RCC_OscConfig+0x4d0>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a18      	ldr	r2, [pc, #96]	; (80052b0 <HAL_RCC_OscConfig+0x4d0>)
 800524e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005252:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005254:	f7fe fd16 	bl	8003c84 <HAL_GetTick>
 8005258:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800525a:	e008      	b.n	800526e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800525c:	f7fe fd12 	bl	8003c84 <HAL_GetTick>
 8005260:	4602      	mov	r2, r0
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	1ad3      	subs	r3, r2, r3
 8005266:	2b02      	cmp	r3, #2
 8005268:	d901      	bls.n	800526e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800526a:	2303      	movs	r3, #3
 800526c:	e05f      	b.n	800532e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800526e:	4b10      	ldr	r3, [pc, #64]	; (80052b0 <HAL_RCC_OscConfig+0x4d0>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005276:	2b00      	cmp	r3, #0
 8005278:	d0f0      	beq.n	800525c <HAL_RCC_OscConfig+0x47c>
 800527a:	e057      	b.n	800532c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800527c:	4b0c      	ldr	r3, [pc, #48]	; (80052b0 <HAL_RCC_OscConfig+0x4d0>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a0b      	ldr	r2, [pc, #44]	; (80052b0 <HAL_RCC_OscConfig+0x4d0>)
 8005282:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005286:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005288:	f7fe fcfc 	bl	8003c84 <HAL_GetTick>
 800528c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800528e:	e008      	b.n	80052a2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005290:	f7fe fcf8 	bl	8003c84 <HAL_GetTick>
 8005294:	4602      	mov	r2, r0
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	1ad3      	subs	r3, r2, r3
 800529a:	2b02      	cmp	r3, #2
 800529c:	d901      	bls.n	80052a2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	e045      	b.n	800532e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052a2:	4b03      	ldr	r3, [pc, #12]	; (80052b0 <HAL_RCC_OscConfig+0x4d0>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d1f0      	bne.n	8005290 <HAL_RCC_OscConfig+0x4b0>
 80052ae:	e03d      	b.n	800532c <HAL_RCC_OscConfig+0x54c>
 80052b0:	40023800 	.word	0x40023800
 80052b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80052b8:	4b1f      	ldr	r3, [pc, #124]	; (8005338 <HAL_RCC_OscConfig+0x558>)
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	699b      	ldr	r3, [r3, #24]
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d030      	beq.n	8005328 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d129      	bne.n	8005328 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052de:	429a      	cmp	r2, r3
 80052e0:	d122      	bne.n	8005328 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80052e2:	68fa      	ldr	r2, [r7, #12]
 80052e4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80052e8:	4013      	ands	r3, r2
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80052ee:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d119      	bne.n	8005328 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052fe:	085b      	lsrs	r3, r3, #1
 8005300:	3b01      	subs	r3, #1
 8005302:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005304:	429a      	cmp	r2, r3
 8005306:	d10f      	bne.n	8005328 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005312:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005314:	429a      	cmp	r2, r3
 8005316:	d107      	bne.n	8005328 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005322:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005324:	429a      	cmp	r2, r3
 8005326:	d001      	beq.n	800532c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	e000      	b.n	800532e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800532c:	2300      	movs	r3, #0
}
 800532e:	4618      	mov	r0, r3
 8005330:	3718      	adds	r7, #24
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
 8005336:	bf00      	nop
 8005338:	40023800 	.word	0x40023800

0800533c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b084      	sub	sp, #16
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005346:	2300      	movs	r3, #0
 8005348:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d101      	bne.n	8005354 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	e0d0      	b.n	80054f6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005354:	4b6a      	ldr	r3, [pc, #424]	; (8005500 <HAL_RCC_ClockConfig+0x1c4>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f003 030f 	and.w	r3, r3, #15
 800535c:	683a      	ldr	r2, [r7, #0]
 800535e:	429a      	cmp	r2, r3
 8005360:	d910      	bls.n	8005384 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005362:	4b67      	ldr	r3, [pc, #412]	; (8005500 <HAL_RCC_ClockConfig+0x1c4>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f023 020f 	bic.w	r2, r3, #15
 800536a:	4965      	ldr	r1, [pc, #404]	; (8005500 <HAL_RCC_ClockConfig+0x1c4>)
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	4313      	orrs	r3, r2
 8005370:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005372:	4b63      	ldr	r3, [pc, #396]	; (8005500 <HAL_RCC_ClockConfig+0x1c4>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 030f 	and.w	r3, r3, #15
 800537a:	683a      	ldr	r2, [r7, #0]
 800537c:	429a      	cmp	r2, r3
 800537e:	d001      	beq.n	8005384 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	e0b8      	b.n	80054f6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 0302 	and.w	r3, r3, #2
 800538c:	2b00      	cmp	r3, #0
 800538e:	d020      	beq.n	80053d2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 0304 	and.w	r3, r3, #4
 8005398:	2b00      	cmp	r3, #0
 800539a:	d005      	beq.n	80053a8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800539c:	4b59      	ldr	r3, [pc, #356]	; (8005504 <HAL_RCC_ClockConfig+0x1c8>)
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	4a58      	ldr	r2, [pc, #352]	; (8005504 <HAL_RCC_ClockConfig+0x1c8>)
 80053a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80053a6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 0308 	and.w	r3, r3, #8
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d005      	beq.n	80053c0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80053b4:	4b53      	ldr	r3, [pc, #332]	; (8005504 <HAL_RCC_ClockConfig+0x1c8>)
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	4a52      	ldr	r2, [pc, #328]	; (8005504 <HAL_RCC_ClockConfig+0x1c8>)
 80053ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80053be:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053c0:	4b50      	ldr	r3, [pc, #320]	; (8005504 <HAL_RCC_ClockConfig+0x1c8>)
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	494d      	ldr	r1, [pc, #308]	; (8005504 <HAL_RCC_ClockConfig+0x1c8>)
 80053ce:	4313      	orrs	r3, r2
 80053d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f003 0301 	and.w	r3, r3, #1
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d040      	beq.n	8005460 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d107      	bne.n	80053f6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053e6:	4b47      	ldr	r3, [pc, #284]	; (8005504 <HAL_RCC_ClockConfig+0x1c8>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d115      	bne.n	800541e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	e07f      	b.n	80054f6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	2b02      	cmp	r3, #2
 80053fc:	d107      	bne.n	800540e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053fe:	4b41      	ldr	r3, [pc, #260]	; (8005504 <HAL_RCC_ClockConfig+0x1c8>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005406:	2b00      	cmp	r3, #0
 8005408:	d109      	bne.n	800541e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e073      	b.n	80054f6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800540e:	4b3d      	ldr	r3, [pc, #244]	; (8005504 <HAL_RCC_ClockConfig+0x1c8>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f003 0302 	and.w	r3, r3, #2
 8005416:	2b00      	cmp	r3, #0
 8005418:	d101      	bne.n	800541e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	e06b      	b.n	80054f6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800541e:	4b39      	ldr	r3, [pc, #228]	; (8005504 <HAL_RCC_ClockConfig+0x1c8>)
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	f023 0203 	bic.w	r2, r3, #3
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	4936      	ldr	r1, [pc, #216]	; (8005504 <HAL_RCC_ClockConfig+0x1c8>)
 800542c:	4313      	orrs	r3, r2
 800542e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005430:	f7fe fc28 	bl	8003c84 <HAL_GetTick>
 8005434:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005436:	e00a      	b.n	800544e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005438:	f7fe fc24 	bl	8003c84 <HAL_GetTick>
 800543c:	4602      	mov	r2, r0
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	1ad3      	subs	r3, r2, r3
 8005442:	f241 3288 	movw	r2, #5000	; 0x1388
 8005446:	4293      	cmp	r3, r2
 8005448:	d901      	bls.n	800544e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800544a:	2303      	movs	r3, #3
 800544c:	e053      	b.n	80054f6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800544e:	4b2d      	ldr	r3, [pc, #180]	; (8005504 <HAL_RCC_ClockConfig+0x1c8>)
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	f003 020c 	and.w	r2, r3, #12
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	009b      	lsls	r3, r3, #2
 800545c:	429a      	cmp	r2, r3
 800545e:	d1eb      	bne.n	8005438 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005460:	4b27      	ldr	r3, [pc, #156]	; (8005500 <HAL_RCC_ClockConfig+0x1c4>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 030f 	and.w	r3, r3, #15
 8005468:	683a      	ldr	r2, [r7, #0]
 800546a:	429a      	cmp	r2, r3
 800546c:	d210      	bcs.n	8005490 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800546e:	4b24      	ldr	r3, [pc, #144]	; (8005500 <HAL_RCC_ClockConfig+0x1c4>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f023 020f 	bic.w	r2, r3, #15
 8005476:	4922      	ldr	r1, [pc, #136]	; (8005500 <HAL_RCC_ClockConfig+0x1c4>)
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	4313      	orrs	r3, r2
 800547c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800547e:	4b20      	ldr	r3, [pc, #128]	; (8005500 <HAL_RCC_ClockConfig+0x1c4>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 030f 	and.w	r3, r3, #15
 8005486:	683a      	ldr	r2, [r7, #0]
 8005488:	429a      	cmp	r2, r3
 800548a:	d001      	beq.n	8005490 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	e032      	b.n	80054f6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 0304 	and.w	r3, r3, #4
 8005498:	2b00      	cmp	r3, #0
 800549a:	d008      	beq.n	80054ae <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800549c:	4b19      	ldr	r3, [pc, #100]	; (8005504 <HAL_RCC_ClockConfig+0x1c8>)
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	4916      	ldr	r1, [pc, #88]	; (8005504 <HAL_RCC_ClockConfig+0x1c8>)
 80054aa:	4313      	orrs	r3, r2
 80054ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f003 0308 	and.w	r3, r3, #8
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d009      	beq.n	80054ce <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80054ba:	4b12      	ldr	r3, [pc, #72]	; (8005504 <HAL_RCC_ClockConfig+0x1c8>)
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	691b      	ldr	r3, [r3, #16]
 80054c6:	00db      	lsls	r3, r3, #3
 80054c8:	490e      	ldr	r1, [pc, #56]	; (8005504 <HAL_RCC_ClockConfig+0x1c8>)
 80054ca:	4313      	orrs	r3, r2
 80054cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80054ce:	f000 f821 	bl	8005514 <HAL_RCC_GetSysClockFreq>
 80054d2:	4602      	mov	r2, r0
 80054d4:	4b0b      	ldr	r3, [pc, #44]	; (8005504 <HAL_RCC_ClockConfig+0x1c8>)
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	091b      	lsrs	r3, r3, #4
 80054da:	f003 030f 	and.w	r3, r3, #15
 80054de:	490a      	ldr	r1, [pc, #40]	; (8005508 <HAL_RCC_ClockConfig+0x1cc>)
 80054e0:	5ccb      	ldrb	r3, [r1, r3]
 80054e2:	fa22 f303 	lsr.w	r3, r2, r3
 80054e6:	4a09      	ldr	r2, [pc, #36]	; (800550c <HAL_RCC_ClockConfig+0x1d0>)
 80054e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80054ea:	4b09      	ldr	r3, [pc, #36]	; (8005510 <HAL_RCC_ClockConfig+0x1d4>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4618      	mov	r0, r3
 80054f0:	f7fd fbba 	bl	8002c68 <HAL_InitTick>

  return HAL_OK;
 80054f4:	2300      	movs	r3, #0
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3710      	adds	r7, #16
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}
 80054fe:	bf00      	nop
 8005500:	40023c00 	.word	0x40023c00
 8005504:	40023800 	.word	0x40023800
 8005508:	0801d848 	.word	0x0801d848
 800550c:	20000004 	.word	0x20000004
 8005510:	20000008 	.word	0x20000008

08005514 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005514:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005518:	b094      	sub	sp, #80	; 0x50
 800551a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800551c:	2300      	movs	r3, #0
 800551e:	647b      	str	r3, [r7, #68]	; 0x44
 8005520:	2300      	movs	r3, #0
 8005522:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005524:	2300      	movs	r3, #0
 8005526:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8005528:	2300      	movs	r3, #0
 800552a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800552c:	4b79      	ldr	r3, [pc, #484]	; (8005714 <HAL_RCC_GetSysClockFreq+0x200>)
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	f003 030c 	and.w	r3, r3, #12
 8005534:	2b08      	cmp	r3, #8
 8005536:	d00d      	beq.n	8005554 <HAL_RCC_GetSysClockFreq+0x40>
 8005538:	2b08      	cmp	r3, #8
 800553a:	f200 80e1 	bhi.w	8005700 <HAL_RCC_GetSysClockFreq+0x1ec>
 800553e:	2b00      	cmp	r3, #0
 8005540:	d002      	beq.n	8005548 <HAL_RCC_GetSysClockFreq+0x34>
 8005542:	2b04      	cmp	r3, #4
 8005544:	d003      	beq.n	800554e <HAL_RCC_GetSysClockFreq+0x3a>
 8005546:	e0db      	b.n	8005700 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005548:	4b73      	ldr	r3, [pc, #460]	; (8005718 <HAL_RCC_GetSysClockFreq+0x204>)
 800554a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800554c:	e0db      	b.n	8005706 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800554e:	4b73      	ldr	r3, [pc, #460]	; (800571c <HAL_RCC_GetSysClockFreq+0x208>)
 8005550:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005552:	e0d8      	b.n	8005706 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005554:	4b6f      	ldr	r3, [pc, #444]	; (8005714 <HAL_RCC_GetSysClockFreq+0x200>)
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800555c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800555e:	4b6d      	ldr	r3, [pc, #436]	; (8005714 <HAL_RCC_GetSysClockFreq+0x200>)
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005566:	2b00      	cmp	r3, #0
 8005568:	d063      	beq.n	8005632 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800556a:	4b6a      	ldr	r3, [pc, #424]	; (8005714 <HAL_RCC_GetSysClockFreq+0x200>)
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	099b      	lsrs	r3, r3, #6
 8005570:	2200      	movs	r2, #0
 8005572:	63bb      	str	r3, [r7, #56]	; 0x38
 8005574:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005578:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800557c:	633b      	str	r3, [r7, #48]	; 0x30
 800557e:	2300      	movs	r3, #0
 8005580:	637b      	str	r3, [r7, #52]	; 0x34
 8005582:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005586:	4622      	mov	r2, r4
 8005588:	462b      	mov	r3, r5
 800558a:	f04f 0000 	mov.w	r0, #0
 800558e:	f04f 0100 	mov.w	r1, #0
 8005592:	0159      	lsls	r1, r3, #5
 8005594:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005598:	0150      	lsls	r0, r2, #5
 800559a:	4602      	mov	r2, r0
 800559c:	460b      	mov	r3, r1
 800559e:	4621      	mov	r1, r4
 80055a0:	1a51      	subs	r1, r2, r1
 80055a2:	6139      	str	r1, [r7, #16]
 80055a4:	4629      	mov	r1, r5
 80055a6:	eb63 0301 	sbc.w	r3, r3, r1
 80055aa:	617b      	str	r3, [r7, #20]
 80055ac:	f04f 0200 	mov.w	r2, #0
 80055b0:	f04f 0300 	mov.w	r3, #0
 80055b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80055b8:	4659      	mov	r1, fp
 80055ba:	018b      	lsls	r3, r1, #6
 80055bc:	4651      	mov	r1, sl
 80055be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80055c2:	4651      	mov	r1, sl
 80055c4:	018a      	lsls	r2, r1, #6
 80055c6:	4651      	mov	r1, sl
 80055c8:	ebb2 0801 	subs.w	r8, r2, r1
 80055cc:	4659      	mov	r1, fp
 80055ce:	eb63 0901 	sbc.w	r9, r3, r1
 80055d2:	f04f 0200 	mov.w	r2, #0
 80055d6:	f04f 0300 	mov.w	r3, #0
 80055da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80055de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80055e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80055e6:	4690      	mov	r8, r2
 80055e8:	4699      	mov	r9, r3
 80055ea:	4623      	mov	r3, r4
 80055ec:	eb18 0303 	adds.w	r3, r8, r3
 80055f0:	60bb      	str	r3, [r7, #8]
 80055f2:	462b      	mov	r3, r5
 80055f4:	eb49 0303 	adc.w	r3, r9, r3
 80055f8:	60fb      	str	r3, [r7, #12]
 80055fa:	f04f 0200 	mov.w	r2, #0
 80055fe:	f04f 0300 	mov.w	r3, #0
 8005602:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005606:	4629      	mov	r1, r5
 8005608:	024b      	lsls	r3, r1, #9
 800560a:	4621      	mov	r1, r4
 800560c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005610:	4621      	mov	r1, r4
 8005612:	024a      	lsls	r2, r1, #9
 8005614:	4610      	mov	r0, r2
 8005616:	4619      	mov	r1, r3
 8005618:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800561a:	2200      	movs	r2, #0
 800561c:	62bb      	str	r3, [r7, #40]	; 0x28
 800561e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005620:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005624:	f7fa fec4 	bl	80003b0 <__aeabi_uldivmod>
 8005628:	4602      	mov	r2, r0
 800562a:	460b      	mov	r3, r1
 800562c:	4613      	mov	r3, r2
 800562e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005630:	e058      	b.n	80056e4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005632:	4b38      	ldr	r3, [pc, #224]	; (8005714 <HAL_RCC_GetSysClockFreq+0x200>)
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	099b      	lsrs	r3, r3, #6
 8005638:	2200      	movs	r2, #0
 800563a:	4618      	mov	r0, r3
 800563c:	4611      	mov	r1, r2
 800563e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005642:	623b      	str	r3, [r7, #32]
 8005644:	2300      	movs	r3, #0
 8005646:	627b      	str	r3, [r7, #36]	; 0x24
 8005648:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800564c:	4642      	mov	r2, r8
 800564e:	464b      	mov	r3, r9
 8005650:	f04f 0000 	mov.w	r0, #0
 8005654:	f04f 0100 	mov.w	r1, #0
 8005658:	0159      	lsls	r1, r3, #5
 800565a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800565e:	0150      	lsls	r0, r2, #5
 8005660:	4602      	mov	r2, r0
 8005662:	460b      	mov	r3, r1
 8005664:	4641      	mov	r1, r8
 8005666:	ebb2 0a01 	subs.w	sl, r2, r1
 800566a:	4649      	mov	r1, r9
 800566c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005670:	f04f 0200 	mov.w	r2, #0
 8005674:	f04f 0300 	mov.w	r3, #0
 8005678:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800567c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005680:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005684:	ebb2 040a 	subs.w	r4, r2, sl
 8005688:	eb63 050b 	sbc.w	r5, r3, fp
 800568c:	f04f 0200 	mov.w	r2, #0
 8005690:	f04f 0300 	mov.w	r3, #0
 8005694:	00eb      	lsls	r3, r5, #3
 8005696:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800569a:	00e2      	lsls	r2, r4, #3
 800569c:	4614      	mov	r4, r2
 800569e:	461d      	mov	r5, r3
 80056a0:	4643      	mov	r3, r8
 80056a2:	18e3      	adds	r3, r4, r3
 80056a4:	603b      	str	r3, [r7, #0]
 80056a6:	464b      	mov	r3, r9
 80056a8:	eb45 0303 	adc.w	r3, r5, r3
 80056ac:	607b      	str	r3, [r7, #4]
 80056ae:	f04f 0200 	mov.w	r2, #0
 80056b2:	f04f 0300 	mov.w	r3, #0
 80056b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80056ba:	4629      	mov	r1, r5
 80056bc:	028b      	lsls	r3, r1, #10
 80056be:	4621      	mov	r1, r4
 80056c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80056c4:	4621      	mov	r1, r4
 80056c6:	028a      	lsls	r2, r1, #10
 80056c8:	4610      	mov	r0, r2
 80056ca:	4619      	mov	r1, r3
 80056cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056ce:	2200      	movs	r2, #0
 80056d0:	61bb      	str	r3, [r7, #24]
 80056d2:	61fa      	str	r2, [r7, #28]
 80056d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80056d8:	f7fa fe6a 	bl	80003b0 <__aeabi_uldivmod>
 80056dc:	4602      	mov	r2, r0
 80056de:	460b      	mov	r3, r1
 80056e0:	4613      	mov	r3, r2
 80056e2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80056e4:	4b0b      	ldr	r3, [pc, #44]	; (8005714 <HAL_RCC_GetSysClockFreq+0x200>)
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	0c1b      	lsrs	r3, r3, #16
 80056ea:	f003 0303 	and.w	r3, r3, #3
 80056ee:	3301      	adds	r3, #1
 80056f0:	005b      	lsls	r3, r3, #1
 80056f2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80056f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80056f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80056fc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80056fe:	e002      	b.n	8005706 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005700:	4b05      	ldr	r3, [pc, #20]	; (8005718 <HAL_RCC_GetSysClockFreq+0x204>)
 8005702:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005704:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005706:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005708:	4618      	mov	r0, r3
 800570a:	3750      	adds	r7, #80	; 0x50
 800570c:	46bd      	mov	sp, r7
 800570e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005712:	bf00      	nop
 8005714:	40023800 	.word	0x40023800
 8005718:	00f42400 	.word	0x00f42400
 800571c:	007a1200 	.word	0x007a1200

08005720 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005720:	b480      	push	{r7}
 8005722:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005724:	4b03      	ldr	r3, [pc, #12]	; (8005734 <HAL_RCC_GetHCLKFreq+0x14>)
 8005726:	681b      	ldr	r3, [r3, #0]
}
 8005728:	4618      	mov	r0, r3
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr
 8005732:	bf00      	nop
 8005734:	20000004 	.word	0x20000004

08005738 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800573c:	f7ff fff0 	bl	8005720 <HAL_RCC_GetHCLKFreq>
 8005740:	4602      	mov	r2, r0
 8005742:	4b05      	ldr	r3, [pc, #20]	; (8005758 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	0a9b      	lsrs	r3, r3, #10
 8005748:	f003 0307 	and.w	r3, r3, #7
 800574c:	4903      	ldr	r1, [pc, #12]	; (800575c <HAL_RCC_GetPCLK1Freq+0x24>)
 800574e:	5ccb      	ldrb	r3, [r1, r3]
 8005750:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005754:	4618      	mov	r0, r3
 8005756:	bd80      	pop	{r7, pc}
 8005758:	40023800 	.word	0x40023800
 800575c:	0801d858 	.word	0x0801d858

08005760 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005764:	f7ff ffdc 	bl	8005720 <HAL_RCC_GetHCLKFreq>
 8005768:	4602      	mov	r2, r0
 800576a:	4b05      	ldr	r3, [pc, #20]	; (8005780 <HAL_RCC_GetPCLK2Freq+0x20>)
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	0b5b      	lsrs	r3, r3, #13
 8005770:	f003 0307 	and.w	r3, r3, #7
 8005774:	4903      	ldr	r1, [pc, #12]	; (8005784 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005776:	5ccb      	ldrb	r3, [r1, r3]
 8005778:	fa22 f303 	lsr.w	r3, r2, r3
}
 800577c:	4618      	mov	r0, r3
 800577e:	bd80      	pop	{r7, pc}
 8005780:	40023800 	.word	0x40023800
 8005784:	0801d858 	.word	0x0801d858

08005788 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005788:	b480      	push	{r7}
 800578a:	b083      	sub	sp, #12
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	220f      	movs	r2, #15
 8005796:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005798:	4b12      	ldr	r3, [pc, #72]	; (80057e4 <HAL_RCC_GetClockConfig+0x5c>)
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	f003 0203 	and.w	r2, r3, #3
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80057a4:	4b0f      	ldr	r3, [pc, #60]	; (80057e4 <HAL_RCC_GetClockConfig+0x5c>)
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80057b0:	4b0c      	ldr	r3, [pc, #48]	; (80057e4 <HAL_RCC_GetClockConfig+0x5c>)
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80057bc:	4b09      	ldr	r3, [pc, #36]	; (80057e4 <HAL_RCC_GetClockConfig+0x5c>)
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	08db      	lsrs	r3, r3, #3
 80057c2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80057ca:	4b07      	ldr	r3, [pc, #28]	; (80057e8 <HAL_RCC_GetClockConfig+0x60>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f003 020f 	and.w	r2, r3, #15
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	601a      	str	r2, [r3, #0]
}
 80057d6:	bf00      	nop
 80057d8:	370c      	adds	r7, #12
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr
 80057e2:	bf00      	nop
 80057e4:	40023800 	.word	0x40023800
 80057e8:	40023c00 	.word	0x40023c00

080057ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b088      	sub	sp, #32
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80057f4:	2300      	movs	r3, #0
 80057f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80057f8:	2300      	movs	r3, #0
 80057fa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80057fc:	2300      	movs	r3, #0
 80057fe:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005800:	2300      	movs	r3, #0
 8005802:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005804:	2300      	movs	r3, #0
 8005806:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f003 0301 	and.w	r3, r3, #1
 8005810:	2b00      	cmp	r3, #0
 8005812:	d012      	beq.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005814:	4b69      	ldr	r3, [pc, #420]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	4a68      	ldr	r2, [pc, #416]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800581a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800581e:	6093      	str	r3, [r2, #8]
 8005820:	4b66      	ldr	r3, [pc, #408]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005822:	689a      	ldr	r2, [r3, #8]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005828:	4964      	ldr	r1, [pc, #400]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800582a:	4313      	orrs	r3, r2
 800582c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005832:	2b00      	cmp	r3, #0
 8005834:	d101      	bne.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005836:	2301      	movs	r3, #1
 8005838:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005842:	2b00      	cmp	r3, #0
 8005844:	d017      	beq.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005846:	4b5d      	ldr	r3, [pc, #372]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005848:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800584c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005854:	4959      	ldr	r1, [pc, #356]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005856:	4313      	orrs	r3, r2
 8005858:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005860:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005864:	d101      	bne.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005866:	2301      	movs	r3, #1
 8005868:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800586e:	2b00      	cmp	r3, #0
 8005870:	d101      	bne.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005872:	2301      	movs	r3, #1
 8005874:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800587e:	2b00      	cmp	r3, #0
 8005880:	d017      	beq.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005882:	4b4e      	ldr	r3, [pc, #312]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005884:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005888:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005890:	494a      	ldr	r1, [pc, #296]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005892:	4313      	orrs	r3, r2
 8005894:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800589c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80058a0:	d101      	bne.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80058a2:	2301      	movs	r3, #1
 80058a4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d101      	bne.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80058ae:	2301      	movs	r3, #1
 80058b0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d001      	beq.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80058be:	2301      	movs	r3, #1
 80058c0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f003 0320 	and.w	r3, r3, #32
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	f000 808b 	beq.w	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80058d0:	4b3a      	ldr	r3, [pc, #232]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d4:	4a39      	ldr	r2, [pc, #228]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058da:	6413      	str	r3, [r2, #64]	; 0x40
 80058dc:	4b37      	ldr	r3, [pc, #220]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058e4:	60bb      	str	r3, [r7, #8]
 80058e6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80058e8:	4b35      	ldr	r3, [pc, #212]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a34      	ldr	r2, [pc, #208]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80058ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058f4:	f7fe f9c6 	bl	8003c84 <HAL_GetTick>
 80058f8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80058fa:	e008      	b.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058fc:	f7fe f9c2 	bl	8003c84 <HAL_GetTick>
 8005900:	4602      	mov	r2, r0
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	1ad3      	subs	r3, r2, r3
 8005906:	2b64      	cmp	r3, #100	; 0x64
 8005908:	d901      	bls.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800590a:	2303      	movs	r3, #3
 800590c:	e38f      	b.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800590e:	4b2c      	ldr	r3, [pc, #176]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005916:	2b00      	cmp	r3, #0
 8005918:	d0f0      	beq.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800591a:	4b28      	ldr	r3, [pc, #160]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800591c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800591e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005922:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d035      	beq.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800592e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005932:	693a      	ldr	r2, [r7, #16]
 8005934:	429a      	cmp	r2, r3
 8005936:	d02e      	beq.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005938:	4b20      	ldr	r3, [pc, #128]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800593a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800593c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005940:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005942:	4b1e      	ldr	r3, [pc, #120]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005946:	4a1d      	ldr	r2, [pc, #116]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005948:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800594c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800594e:	4b1b      	ldr	r3, [pc, #108]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005952:	4a1a      	ldr	r2, [pc, #104]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005954:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005958:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800595a:	4a18      	ldr	r2, [pc, #96]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005960:	4b16      	ldr	r3, [pc, #88]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005964:	f003 0301 	and.w	r3, r3, #1
 8005968:	2b01      	cmp	r3, #1
 800596a:	d114      	bne.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800596c:	f7fe f98a 	bl	8003c84 <HAL_GetTick>
 8005970:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005972:	e00a      	b.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005974:	f7fe f986 	bl	8003c84 <HAL_GetTick>
 8005978:	4602      	mov	r2, r0
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	1ad3      	subs	r3, r2, r3
 800597e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005982:	4293      	cmp	r3, r2
 8005984:	d901      	bls.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005986:	2303      	movs	r3, #3
 8005988:	e351      	b.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800598a:	4b0c      	ldr	r3, [pc, #48]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800598c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800598e:	f003 0302 	and.w	r3, r3, #2
 8005992:	2b00      	cmp	r3, #0
 8005994:	d0ee      	beq.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800599a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800599e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059a2:	d111      	bne.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80059a4:	4b05      	ldr	r3, [pc, #20]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80059b0:	4b04      	ldr	r3, [pc, #16]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80059b2:	400b      	ands	r3, r1
 80059b4:	4901      	ldr	r1, [pc, #4]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059b6:	4313      	orrs	r3, r2
 80059b8:	608b      	str	r3, [r1, #8]
 80059ba:	e00b      	b.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80059bc:	40023800 	.word	0x40023800
 80059c0:	40007000 	.word	0x40007000
 80059c4:	0ffffcff 	.word	0x0ffffcff
 80059c8:	4bac      	ldr	r3, [pc, #688]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	4aab      	ldr	r2, [pc, #684]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059ce:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80059d2:	6093      	str	r3, [r2, #8]
 80059d4:	4ba9      	ldr	r3, [pc, #676]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059e0:	49a6      	ldr	r1, [pc, #664]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059e2:	4313      	orrs	r3, r2
 80059e4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f003 0310 	and.w	r3, r3, #16
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d010      	beq.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80059f2:	4ba2      	ldr	r3, [pc, #648]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059f8:	4aa0      	ldr	r2, [pc, #640]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059fe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005a02:	4b9e      	ldr	r3, [pc, #632]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a04:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a0c:	499b      	ldr	r1, [pc, #620]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d00a      	beq.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005a20:	4b96      	ldr	r3, [pc, #600]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a26:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a2e:	4993      	ldr	r1, [pc, #588]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a30:	4313      	orrs	r3, r2
 8005a32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d00a      	beq.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005a42:	4b8e      	ldr	r3, [pc, #568]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a48:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a50:	498a      	ldr	r1, [pc, #552]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a52:	4313      	orrs	r3, r2
 8005a54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d00a      	beq.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005a64:	4b85      	ldr	r3, [pc, #532]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a6a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a72:	4982      	ldr	r1, [pc, #520]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a74:	4313      	orrs	r3, r2
 8005a76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d00a      	beq.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005a86:	4b7d      	ldr	r3, [pc, #500]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a8c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a94:	4979      	ldr	r1, [pc, #484]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a96:	4313      	orrs	r3, r2
 8005a98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d00a      	beq.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005aa8:	4b74      	ldr	r3, [pc, #464]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aae:	f023 0203 	bic.w	r2, r3, #3
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ab6:	4971      	ldr	r1, [pc, #452]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d00a      	beq.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005aca:	4b6c      	ldr	r3, [pc, #432]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ad0:	f023 020c 	bic.w	r2, r3, #12
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ad8:	4968      	ldr	r1, [pc, #416]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ada:	4313      	orrs	r3, r2
 8005adc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d00a      	beq.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005aec:	4b63      	ldr	r3, [pc, #396]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005af2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005afa:	4960      	ldr	r1, [pc, #384]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005afc:	4313      	orrs	r3, r2
 8005afe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d00a      	beq.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005b0e:	4b5b      	ldr	r3, [pc, #364]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b14:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b1c:	4957      	ldr	r1, [pc, #348]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d00a      	beq.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005b30:	4b52      	ldr	r3, [pc, #328]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b36:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b3e:	494f      	ldr	r1, [pc, #316]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b40:	4313      	orrs	r3, r2
 8005b42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d00a      	beq.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005b52:	4b4a      	ldr	r3, [pc, #296]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b58:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b60:	4946      	ldr	r1, [pc, #280]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b62:	4313      	orrs	r3, r2
 8005b64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d00a      	beq.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005b74:	4b41      	ldr	r3, [pc, #260]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b7a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b82:	493e      	ldr	r1, [pc, #248]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b84:	4313      	orrs	r3, r2
 8005b86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d00a      	beq.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005b96:	4b39      	ldr	r3, [pc, #228]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b9c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ba4:	4935      	ldr	r1, [pc, #212]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d00a      	beq.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005bb8:	4b30      	ldr	r3, [pc, #192]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bbe:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005bc6:	492d      	ldr	r1, [pc, #180]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d011      	beq.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005bda:	4b28      	ldr	r3, [pc, #160]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005be0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005be8:	4924      	ldr	r1, [pc, #144]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005bea:	4313      	orrs	r3, r2
 8005bec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005bf4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005bf8:	d101      	bne.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f003 0308 	and.w	r3, r3, #8
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d001      	beq.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d00a      	beq.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005c1a:	4b18      	ldr	r3, [pc, #96]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c20:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c28:	4914      	ldr	r1, [pc, #80]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d00b      	beq.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005c3c:	4b0f      	ldr	r3, [pc, #60]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c42:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c4c:	490b      	ldr	r1, [pc, #44]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d00f      	beq.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005c60:	4b06      	ldr	r3, [pc, #24]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c66:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c70:	4902      	ldr	r1, [pc, #8]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c72:	4313      	orrs	r3, r2
 8005c74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005c78:	e002      	b.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8005c7a:	bf00      	nop
 8005c7c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d00b      	beq.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005c8c:	4b8a      	ldr	r3, [pc, #552]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c92:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c9c:	4986      	ldr	r1, [pc, #536]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d00b      	beq.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005cb0:	4b81      	ldr	r3, [pc, #516]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005cb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005cb6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005cc0:	497d      	ldr	r1, [pc, #500]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005cc8:	69fb      	ldr	r3, [r7, #28]
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d006      	beq.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	f000 80d6 	beq.w	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005cdc:	4b76      	ldr	r3, [pc, #472]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a75      	ldr	r2, [pc, #468]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ce2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005ce6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ce8:	f7fd ffcc 	bl	8003c84 <HAL_GetTick>
 8005cec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005cee:	e008      	b.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005cf0:	f7fd ffc8 	bl	8003c84 <HAL_GetTick>
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	1ad3      	subs	r3, r2, r3
 8005cfa:	2b64      	cmp	r3, #100	; 0x64
 8005cfc:	d901      	bls.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005cfe:	2303      	movs	r3, #3
 8005d00:	e195      	b.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005d02:	4b6d      	ldr	r3, [pc, #436]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d1f0      	bne.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f003 0301 	and.w	r3, r3, #1
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d021      	beq.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x572>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d11d      	bne.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005d22:	4b65      	ldr	r3, [pc, #404]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d28:	0c1b      	lsrs	r3, r3, #16
 8005d2a:	f003 0303 	and.w	r3, r3, #3
 8005d2e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005d30:	4b61      	ldr	r3, [pc, #388]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d36:	0e1b      	lsrs	r3, r3, #24
 8005d38:	f003 030f 	and.w	r3, r3, #15
 8005d3c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	019a      	lsls	r2, r3, #6
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	041b      	lsls	r3, r3, #16
 8005d48:	431a      	orrs	r2, r3
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	061b      	lsls	r3, r3, #24
 8005d4e:	431a      	orrs	r2, r3
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	071b      	lsls	r3, r3, #28
 8005d56:	4958      	ldr	r1, [pc, #352]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d004      	beq.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d72:	d00a      	beq.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d02e      	beq.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d88:	d129      	bne.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005d8a:	4b4b      	ldr	r3, [pc, #300]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d90:	0c1b      	lsrs	r3, r3, #16
 8005d92:	f003 0303 	and.w	r3, r3, #3
 8005d96:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005d98:	4b47      	ldr	r3, [pc, #284]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d9e:	0f1b      	lsrs	r3, r3, #28
 8005da0:	f003 0307 	and.w	r3, r3, #7
 8005da4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	019a      	lsls	r2, r3, #6
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	041b      	lsls	r3, r3, #16
 8005db0:	431a      	orrs	r2, r3
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	68db      	ldr	r3, [r3, #12]
 8005db6:	061b      	lsls	r3, r3, #24
 8005db8:	431a      	orrs	r2, r3
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	071b      	lsls	r3, r3, #28
 8005dbe:	493e      	ldr	r1, [pc, #248]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005dc6:	4b3c      	ldr	r3, [pc, #240]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005dc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005dcc:	f023 021f 	bic.w	r2, r3, #31
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd4:	3b01      	subs	r3, #1
 8005dd6:	4938      	ldr	r1, [pc, #224]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d01d      	beq.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005dea:	4b33      	ldr	r3, [pc, #204]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005dec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005df0:	0e1b      	lsrs	r3, r3, #24
 8005df2:	f003 030f 	and.w	r3, r3, #15
 8005df6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005df8:	4b2f      	ldr	r3, [pc, #188]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005dfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005dfe:	0f1b      	lsrs	r3, r3, #28
 8005e00:	f003 0307 	and.w	r3, r3, #7
 8005e04:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	019a      	lsls	r2, r3, #6
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	691b      	ldr	r3, [r3, #16]
 8005e10:	041b      	lsls	r3, r3, #16
 8005e12:	431a      	orrs	r2, r3
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	061b      	lsls	r3, r3, #24
 8005e18:	431a      	orrs	r2, r3
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	071b      	lsls	r3, r3, #28
 8005e1e:	4926      	ldr	r1, [pc, #152]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e20:	4313      	orrs	r3, r2
 8005e22:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d011      	beq.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	019a      	lsls	r2, r3, #6
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	691b      	ldr	r3, [r3, #16]
 8005e3c:	041b      	lsls	r3, r3, #16
 8005e3e:	431a      	orrs	r2, r3
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	68db      	ldr	r3, [r3, #12]
 8005e44:	061b      	lsls	r3, r3, #24
 8005e46:	431a      	orrs	r2, r3
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	071b      	lsls	r3, r3, #28
 8005e4e:	491a      	ldr	r1, [pc, #104]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e50:	4313      	orrs	r3, r2
 8005e52:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005e56:	4b18      	ldr	r3, [pc, #96]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a17      	ldr	r2, [pc, #92]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e5c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005e60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e62:	f7fd ff0f 	bl	8003c84 <HAL_GetTick>
 8005e66:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e68:	e008      	b.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005e6a:	f7fd ff0b 	bl	8003c84 <HAL_GetTick>
 8005e6e:	4602      	mov	r2, r0
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	1ad3      	subs	r3, r2, r3
 8005e74:	2b64      	cmp	r3, #100	; 0x64
 8005e76:	d901      	bls.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e78:	2303      	movs	r3, #3
 8005e7a:	e0d8      	b.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e7c:	4b0e      	ldr	r3, [pc, #56]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d0f0      	beq.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005e88:	69bb      	ldr	r3, [r7, #24]
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	f040 80ce 	bne.w	800602c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005e90:	4b09      	ldr	r3, [pc, #36]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a08      	ldr	r2, [pc, #32]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e9c:	f7fd fef2 	bl	8003c84 <HAL_GetTick>
 8005ea0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005ea2:	e00b      	b.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005ea4:	f7fd feee 	bl	8003c84 <HAL_GetTick>
 8005ea8:	4602      	mov	r2, r0
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	1ad3      	subs	r3, r2, r3
 8005eae:	2b64      	cmp	r3, #100	; 0x64
 8005eb0:	d904      	bls.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005eb2:	2303      	movs	r3, #3
 8005eb4:	e0bb      	b.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005eb6:	bf00      	nop
 8005eb8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005ebc:	4b5e      	ldr	r3, [pc, #376]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ec4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ec8:	d0ec      	beq.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d003      	beq.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d009      	beq.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d02e      	beq.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d12a      	bne.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005ef2:	4b51      	ldr	r3, [pc, #324]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ef8:	0c1b      	lsrs	r3, r3, #16
 8005efa:	f003 0303 	and.w	r3, r3, #3
 8005efe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005f00:	4b4d      	ldr	r3, [pc, #308]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f06:	0f1b      	lsrs	r3, r3, #28
 8005f08:	f003 0307 	and.w	r3, r3, #7
 8005f0c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	695b      	ldr	r3, [r3, #20]
 8005f12:	019a      	lsls	r2, r3, #6
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	041b      	lsls	r3, r3, #16
 8005f18:	431a      	orrs	r2, r3
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	699b      	ldr	r3, [r3, #24]
 8005f1e:	061b      	lsls	r3, r3, #24
 8005f20:	431a      	orrs	r2, r3
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	071b      	lsls	r3, r3, #28
 8005f26:	4944      	ldr	r1, [pc, #272]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005f2e:	4b42      	ldr	r3, [pc, #264]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f34:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f3c:	3b01      	subs	r3, #1
 8005f3e:	021b      	lsls	r3, r3, #8
 8005f40:	493d      	ldr	r1, [pc, #244]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f42:	4313      	orrs	r3, r2
 8005f44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d022      	beq.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f5c:	d11d      	bne.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005f5e:	4b36      	ldr	r3, [pc, #216]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f64:	0e1b      	lsrs	r3, r3, #24
 8005f66:	f003 030f 	and.w	r3, r3, #15
 8005f6a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005f6c:	4b32      	ldr	r3, [pc, #200]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f72:	0f1b      	lsrs	r3, r3, #28
 8005f74:	f003 0307 	and.w	r3, r3, #7
 8005f78:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	695b      	ldr	r3, [r3, #20]
 8005f7e:	019a      	lsls	r2, r3, #6
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6a1b      	ldr	r3, [r3, #32]
 8005f84:	041b      	lsls	r3, r3, #16
 8005f86:	431a      	orrs	r2, r3
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	061b      	lsls	r3, r3, #24
 8005f8c:	431a      	orrs	r2, r3
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	071b      	lsls	r3, r3, #28
 8005f92:	4929      	ldr	r1, [pc, #164]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f94:	4313      	orrs	r3, r2
 8005f96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f003 0308 	and.w	r3, r3, #8
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d028      	beq.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005fa6:	4b24      	ldr	r3, [pc, #144]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fac:	0e1b      	lsrs	r3, r3, #24
 8005fae:	f003 030f 	and.w	r3, r3, #15
 8005fb2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005fb4:	4b20      	ldr	r3, [pc, #128]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fba:	0c1b      	lsrs	r3, r3, #16
 8005fbc:	f003 0303 	and.w	r3, r3, #3
 8005fc0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	695b      	ldr	r3, [r3, #20]
 8005fc6:	019a      	lsls	r2, r3, #6
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	041b      	lsls	r3, r3, #16
 8005fcc:	431a      	orrs	r2, r3
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	061b      	lsls	r3, r3, #24
 8005fd2:	431a      	orrs	r2, r3
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	69db      	ldr	r3, [r3, #28]
 8005fd8:	071b      	lsls	r3, r3, #28
 8005fda:	4917      	ldr	r1, [pc, #92]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005fe2:	4b15      	ldr	r3, [pc, #84]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005fe4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fe8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff0:	4911      	ldr	r1, [pc, #68]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005ff8:	4b0f      	ldr	r3, [pc, #60]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a0e      	ldr	r2, [pc, #56]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ffe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006002:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006004:	f7fd fe3e 	bl	8003c84 <HAL_GetTick>
 8006008:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800600a:	e008      	b.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800600c:	f7fd fe3a 	bl	8003c84 <HAL_GetTick>
 8006010:	4602      	mov	r2, r0
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	1ad3      	subs	r3, r2, r3
 8006016:	2b64      	cmp	r3, #100	; 0x64
 8006018:	d901      	bls.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800601a:	2303      	movs	r3, #3
 800601c:	e007      	b.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800601e:	4b06      	ldr	r3, [pc, #24]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006026:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800602a:	d1ef      	bne.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800602c:	2300      	movs	r3, #0
}
 800602e:	4618      	mov	r0, r3
 8006030:	3720      	adds	r7, #32
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}
 8006036:	bf00      	nop
 8006038:	40023800 	.word	0x40023800

0800603c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b082      	sub	sp, #8
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d101      	bne.n	800604e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	e049      	b.n	80060e2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006054:	b2db      	uxtb	r3, r3
 8006056:	2b00      	cmp	r3, #0
 8006058:	d106      	bne.n	8006068 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2200      	movs	r2, #0
 800605e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f000 f841 	bl	80060ea <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2202      	movs	r2, #2
 800606c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	3304      	adds	r3, #4
 8006078:	4619      	mov	r1, r3
 800607a:	4610      	mov	r0, r2
 800607c:	f000 fc12 	bl	80068a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2201      	movs	r2, #1
 800608c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2201      	movs	r2, #1
 8006094:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2201      	movs	r2, #1
 800609c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2201      	movs	r2, #1
 80060a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2201      	movs	r2, #1
 80060ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2201      	movs	r2, #1
 80060b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2201      	movs	r2, #1
 80060bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2201      	movs	r2, #1
 80060c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2201      	movs	r2, #1
 80060cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2201      	movs	r2, #1
 80060d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2201      	movs	r2, #1
 80060dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060e0:	2300      	movs	r3, #0
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3708      	adds	r7, #8
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}

080060ea <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80060ea:	b480      	push	{r7}
 80060ec:	b083      	sub	sp, #12
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80060f2:	bf00      	nop
 80060f4:	370c      	adds	r7, #12
 80060f6:	46bd      	mov	sp, r7
 80060f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fc:	4770      	bx	lr
	...

08006100 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006100:	b480      	push	{r7}
 8006102:	b085      	sub	sp, #20
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800610e:	b2db      	uxtb	r3, r3
 8006110:	2b01      	cmp	r3, #1
 8006112:	d001      	beq.n	8006118 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006114:	2301      	movs	r3, #1
 8006116:	e054      	b.n	80061c2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2202      	movs	r2, #2
 800611c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	68da      	ldr	r2, [r3, #12]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f042 0201 	orr.w	r2, r2, #1
 800612e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a26      	ldr	r2, [pc, #152]	; (80061d0 <HAL_TIM_Base_Start_IT+0xd0>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d022      	beq.n	8006180 <HAL_TIM_Base_Start_IT+0x80>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006142:	d01d      	beq.n	8006180 <HAL_TIM_Base_Start_IT+0x80>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a22      	ldr	r2, [pc, #136]	; (80061d4 <HAL_TIM_Base_Start_IT+0xd4>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d018      	beq.n	8006180 <HAL_TIM_Base_Start_IT+0x80>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a21      	ldr	r2, [pc, #132]	; (80061d8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d013      	beq.n	8006180 <HAL_TIM_Base_Start_IT+0x80>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a1f      	ldr	r2, [pc, #124]	; (80061dc <HAL_TIM_Base_Start_IT+0xdc>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d00e      	beq.n	8006180 <HAL_TIM_Base_Start_IT+0x80>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a1e      	ldr	r2, [pc, #120]	; (80061e0 <HAL_TIM_Base_Start_IT+0xe0>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d009      	beq.n	8006180 <HAL_TIM_Base_Start_IT+0x80>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a1c      	ldr	r2, [pc, #112]	; (80061e4 <HAL_TIM_Base_Start_IT+0xe4>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d004      	beq.n	8006180 <HAL_TIM_Base_Start_IT+0x80>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a1b      	ldr	r2, [pc, #108]	; (80061e8 <HAL_TIM_Base_Start_IT+0xe8>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d115      	bne.n	80061ac <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	689a      	ldr	r2, [r3, #8]
 8006186:	4b19      	ldr	r3, [pc, #100]	; (80061ec <HAL_TIM_Base_Start_IT+0xec>)
 8006188:	4013      	ands	r3, r2
 800618a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2b06      	cmp	r3, #6
 8006190:	d015      	beq.n	80061be <HAL_TIM_Base_Start_IT+0xbe>
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006198:	d011      	beq.n	80061be <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f042 0201 	orr.w	r2, r2, #1
 80061a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061aa:	e008      	b.n	80061be <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f042 0201 	orr.w	r2, r2, #1
 80061ba:	601a      	str	r2, [r3, #0]
 80061bc:	e000      	b.n	80061c0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80061c0:	2300      	movs	r3, #0
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3714      	adds	r7, #20
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr
 80061ce:	bf00      	nop
 80061d0:	40010000 	.word	0x40010000
 80061d4:	40000400 	.word	0x40000400
 80061d8:	40000800 	.word	0x40000800
 80061dc:	40000c00 	.word	0x40000c00
 80061e0:	40010400 	.word	0x40010400
 80061e4:	40014000 	.word	0x40014000
 80061e8:	40001800 	.word	0x40001800
 80061ec:	00010007 	.word	0x00010007

080061f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b082      	sub	sp, #8
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d101      	bne.n	8006202 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80061fe:	2301      	movs	r3, #1
 8006200:	e049      	b.n	8006296 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006208:	b2db      	uxtb	r3, r3
 800620a:	2b00      	cmp	r3, #0
 800620c:	d106      	bne.n	800621c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2200      	movs	r2, #0
 8006212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f7fd f96a 	bl	80034f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2202      	movs	r2, #2
 8006220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	3304      	adds	r3, #4
 800622c:	4619      	mov	r1, r3
 800622e:	4610      	mov	r0, r2
 8006230:	f000 fb38 	bl	80068a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2201      	movs	r2, #1
 8006238:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2201      	movs	r2, #1
 8006240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2201      	movs	r2, #1
 8006248:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2201      	movs	r2, #1
 8006250:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2201      	movs	r2, #1
 8006258:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2201      	movs	r2, #1
 8006260:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2201      	movs	r2, #1
 8006268:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2201      	movs	r2, #1
 8006270:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2201      	movs	r2, #1
 8006278:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2201      	movs	r2, #1
 8006280:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2201      	movs	r2, #1
 8006288:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2201      	movs	r2, #1
 8006290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006294:	2300      	movs	r3, #0
}
 8006296:	4618      	mov	r0, r3
 8006298:	3708      	adds	r7, #8
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}
	...

080062a0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b086      	sub	sp, #24
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d101      	bne.n	80062b4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80062b0:	2301      	movs	r3, #1
 80062b2:	e08f      	b.n	80063d4 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062ba:	b2db      	uxtb	r3, r3
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d106      	bne.n	80062ce <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2200      	movs	r2, #0
 80062c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f7fd f945 	bl	8003558 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2202      	movs	r2, #2
 80062d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	6899      	ldr	r1, [r3, #8]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681a      	ldr	r2, [r3, #0]
 80062e0:	4b3e      	ldr	r3, [pc, #248]	; (80063dc <HAL_TIM_Encoder_Init+0x13c>)
 80062e2:	400b      	ands	r3, r1
 80062e4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	3304      	adds	r3, #4
 80062ee:	4619      	mov	r1, r3
 80062f0:	4610      	mov	r0, r2
 80062f2:	f000 fad7 	bl	80068a4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	699b      	ldr	r3, [r3, #24]
 8006304:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	6a1b      	ldr	r3, [r3, #32]
 800630c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	697a      	ldr	r2, [r7, #20]
 8006314:	4313      	orrs	r3, r2
 8006316:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006318:	693a      	ldr	r2, [r7, #16]
 800631a:	4b31      	ldr	r3, [pc, #196]	; (80063e0 <HAL_TIM_Encoder_Init+0x140>)
 800631c:	4013      	ands	r3, r2
 800631e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	689a      	ldr	r2, [r3, #8]
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	699b      	ldr	r3, [r3, #24]
 8006328:	021b      	lsls	r3, r3, #8
 800632a:	4313      	orrs	r3, r2
 800632c:	693a      	ldr	r2, [r7, #16]
 800632e:	4313      	orrs	r3, r2
 8006330:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006332:	693a      	ldr	r2, [r7, #16]
 8006334:	4b2b      	ldr	r3, [pc, #172]	; (80063e4 <HAL_TIM_Encoder_Init+0x144>)
 8006336:	4013      	ands	r3, r2
 8006338:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800633a:	693a      	ldr	r2, [r7, #16]
 800633c:	4b2a      	ldr	r3, [pc, #168]	; (80063e8 <HAL_TIM_Encoder_Init+0x148>)
 800633e:	4013      	ands	r3, r2
 8006340:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	68da      	ldr	r2, [r3, #12]
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	69db      	ldr	r3, [r3, #28]
 800634a:	021b      	lsls	r3, r3, #8
 800634c:	4313      	orrs	r3, r2
 800634e:	693a      	ldr	r2, [r7, #16]
 8006350:	4313      	orrs	r3, r2
 8006352:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	691b      	ldr	r3, [r3, #16]
 8006358:	011a      	lsls	r2, r3, #4
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	6a1b      	ldr	r3, [r3, #32]
 800635e:	031b      	lsls	r3, r3, #12
 8006360:	4313      	orrs	r3, r2
 8006362:	693a      	ldr	r2, [r7, #16]
 8006364:	4313      	orrs	r3, r2
 8006366:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800636e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006376:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	685a      	ldr	r2, [r3, #4]
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	695b      	ldr	r3, [r3, #20]
 8006380:	011b      	lsls	r3, r3, #4
 8006382:	4313      	orrs	r3, r2
 8006384:	68fa      	ldr	r2, [r7, #12]
 8006386:	4313      	orrs	r3, r2
 8006388:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	697a      	ldr	r2, [r7, #20]
 8006390:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	693a      	ldr	r2, [r7, #16]
 8006398:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	68fa      	ldr	r2, [r7, #12]
 80063a0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2201      	movs	r2, #1
 80063a6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2201      	movs	r2, #1
 80063ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2201      	movs	r2, #1
 80063b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2201      	movs	r2, #1
 80063be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2201      	movs	r2, #1
 80063c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2201      	movs	r2, #1
 80063ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063d2:	2300      	movs	r3, #0
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3718      	adds	r7, #24
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}
 80063dc:	fffebff8 	.word	0xfffebff8
 80063e0:	fffffcfc 	.word	0xfffffcfc
 80063e4:	fffff3f3 	.word	0xfffff3f3
 80063e8:	ffff0f0f 	.word	0xffff0f0f

080063ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b082      	sub	sp, #8
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	691b      	ldr	r3, [r3, #16]
 80063fa:	f003 0302 	and.w	r3, r3, #2
 80063fe:	2b02      	cmp	r3, #2
 8006400:	d122      	bne.n	8006448 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	68db      	ldr	r3, [r3, #12]
 8006408:	f003 0302 	and.w	r3, r3, #2
 800640c:	2b02      	cmp	r3, #2
 800640e:	d11b      	bne.n	8006448 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f06f 0202 	mvn.w	r2, #2
 8006418:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2201      	movs	r2, #1
 800641e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	699b      	ldr	r3, [r3, #24]
 8006426:	f003 0303 	and.w	r3, r3, #3
 800642a:	2b00      	cmp	r3, #0
 800642c:	d003      	beq.n	8006436 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f000 fa1a 	bl	8006868 <HAL_TIM_IC_CaptureCallback>
 8006434:	e005      	b.n	8006442 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f000 fa0c 	bl	8006854 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f000 fa1d 	bl	800687c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2200      	movs	r2, #0
 8006446:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	691b      	ldr	r3, [r3, #16]
 800644e:	f003 0304 	and.w	r3, r3, #4
 8006452:	2b04      	cmp	r3, #4
 8006454:	d122      	bne.n	800649c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	68db      	ldr	r3, [r3, #12]
 800645c:	f003 0304 	and.w	r3, r3, #4
 8006460:	2b04      	cmp	r3, #4
 8006462:	d11b      	bne.n	800649c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f06f 0204 	mvn.w	r2, #4
 800646c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2202      	movs	r2, #2
 8006472:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	699b      	ldr	r3, [r3, #24]
 800647a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800647e:	2b00      	cmp	r3, #0
 8006480:	d003      	beq.n	800648a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f000 f9f0 	bl	8006868 <HAL_TIM_IC_CaptureCallback>
 8006488:	e005      	b.n	8006496 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f000 f9e2 	bl	8006854 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f000 f9f3 	bl	800687c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2200      	movs	r2, #0
 800649a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	691b      	ldr	r3, [r3, #16]
 80064a2:	f003 0308 	and.w	r3, r3, #8
 80064a6:	2b08      	cmp	r3, #8
 80064a8:	d122      	bne.n	80064f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	68db      	ldr	r3, [r3, #12]
 80064b0:	f003 0308 	and.w	r3, r3, #8
 80064b4:	2b08      	cmp	r3, #8
 80064b6:	d11b      	bne.n	80064f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f06f 0208 	mvn.w	r2, #8
 80064c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2204      	movs	r2, #4
 80064c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	69db      	ldr	r3, [r3, #28]
 80064ce:	f003 0303 	and.w	r3, r3, #3
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d003      	beq.n	80064de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f000 f9c6 	bl	8006868 <HAL_TIM_IC_CaptureCallback>
 80064dc:	e005      	b.n	80064ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f000 f9b8 	bl	8006854 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f000 f9c9 	bl	800687c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2200      	movs	r2, #0
 80064ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	691b      	ldr	r3, [r3, #16]
 80064f6:	f003 0310 	and.w	r3, r3, #16
 80064fa:	2b10      	cmp	r3, #16
 80064fc:	d122      	bne.n	8006544 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	68db      	ldr	r3, [r3, #12]
 8006504:	f003 0310 	and.w	r3, r3, #16
 8006508:	2b10      	cmp	r3, #16
 800650a:	d11b      	bne.n	8006544 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f06f 0210 	mvn.w	r2, #16
 8006514:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2208      	movs	r2, #8
 800651a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	69db      	ldr	r3, [r3, #28]
 8006522:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006526:	2b00      	cmp	r3, #0
 8006528:	d003      	beq.n	8006532 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f000 f99c 	bl	8006868 <HAL_TIM_IC_CaptureCallback>
 8006530:	e005      	b.n	800653e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f000 f98e 	bl	8006854 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f000 f99f 	bl	800687c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2200      	movs	r2, #0
 8006542:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	691b      	ldr	r3, [r3, #16]
 800654a:	f003 0301 	and.w	r3, r3, #1
 800654e:	2b01      	cmp	r3, #1
 8006550:	d10e      	bne.n	8006570 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	68db      	ldr	r3, [r3, #12]
 8006558:	f003 0301 	and.w	r3, r3, #1
 800655c:	2b01      	cmp	r3, #1
 800655e:	d107      	bne.n	8006570 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f06f 0201 	mvn.w	r2, #1
 8006568:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f7fc f9d8 	bl	8002920 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	691b      	ldr	r3, [r3, #16]
 8006576:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800657a:	2b80      	cmp	r3, #128	; 0x80
 800657c:	d10e      	bne.n	800659c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	68db      	ldr	r3, [r3, #12]
 8006584:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006588:	2b80      	cmp	r3, #128	; 0x80
 800658a:	d107      	bne.n	800659c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006594:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f000 fd98 	bl	80070cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	691b      	ldr	r3, [r3, #16]
 80065a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065aa:	d10e      	bne.n	80065ca <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	68db      	ldr	r3, [r3, #12]
 80065b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065b6:	2b80      	cmp	r3, #128	; 0x80
 80065b8:	d107      	bne.n	80065ca <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80065c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f000 fd8b 	bl	80070e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	691b      	ldr	r3, [r3, #16]
 80065d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065d4:	2b40      	cmp	r3, #64	; 0x40
 80065d6:	d10e      	bne.n	80065f6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	68db      	ldr	r3, [r3, #12]
 80065de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065e2:	2b40      	cmp	r3, #64	; 0x40
 80065e4:	d107      	bne.n	80065f6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80065ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f000 f94d 	bl	8006890 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	691b      	ldr	r3, [r3, #16]
 80065fc:	f003 0320 	and.w	r3, r3, #32
 8006600:	2b20      	cmp	r3, #32
 8006602:	d10e      	bne.n	8006622 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	68db      	ldr	r3, [r3, #12]
 800660a:	f003 0320 	and.w	r3, r3, #32
 800660e:	2b20      	cmp	r3, #32
 8006610:	d107      	bne.n	8006622 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f06f 0220 	mvn.w	r2, #32
 800661a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f000 fd4b 	bl	80070b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006622:	bf00      	nop
 8006624:	3708      	adds	r7, #8
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}
	...

0800662c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b086      	sub	sp, #24
 8006630:	af00      	add	r7, sp, #0
 8006632:	60f8      	str	r0, [r7, #12]
 8006634:	60b9      	str	r1, [r7, #8]
 8006636:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006638:	2300      	movs	r3, #0
 800663a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006642:	2b01      	cmp	r3, #1
 8006644:	d101      	bne.n	800664a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006646:	2302      	movs	r3, #2
 8006648:	e0ff      	b.n	800684a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2201      	movs	r2, #1
 800664e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2b14      	cmp	r3, #20
 8006656:	f200 80f0 	bhi.w	800683a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800665a:	a201      	add	r2, pc, #4	; (adr r2, 8006660 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800665c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006660:	080066b5 	.word	0x080066b5
 8006664:	0800683b 	.word	0x0800683b
 8006668:	0800683b 	.word	0x0800683b
 800666c:	0800683b 	.word	0x0800683b
 8006670:	080066f5 	.word	0x080066f5
 8006674:	0800683b 	.word	0x0800683b
 8006678:	0800683b 	.word	0x0800683b
 800667c:	0800683b 	.word	0x0800683b
 8006680:	08006737 	.word	0x08006737
 8006684:	0800683b 	.word	0x0800683b
 8006688:	0800683b 	.word	0x0800683b
 800668c:	0800683b 	.word	0x0800683b
 8006690:	08006777 	.word	0x08006777
 8006694:	0800683b 	.word	0x0800683b
 8006698:	0800683b 	.word	0x0800683b
 800669c:	0800683b 	.word	0x0800683b
 80066a0:	080067b9 	.word	0x080067b9
 80066a4:	0800683b 	.word	0x0800683b
 80066a8:	0800683b 	.word	0x0800683b
 80066ac:	0800683b 	.word	0x0800683b
 80066b0:	080067f9 	.word	0x080067f9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	68b9      	ldr	r1, [r7, #8]
 80066ba:	4618      	mov	r0, r3
 80066bc:	f000 f992 	bl	80069e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	699a      	ldr	r2, [r3, #24]
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f042 0208 	orr.w	r2, r2, #8
 80066ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	699a      	ldr	r2, [r3, #24]
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f022 0204 	bic.w	r2, r2, #4
 80066de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	6999      	ldr	r1, [r3, #24]
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	691a      	ldr	r2, [r3, #16]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	430a      	orrs	r2, r1
 80066f0:	619a      	str	r2, [r3, #24]
      break;
 80066f2:	e0a5      	b.n	8006840 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	68b9      	ldr	r1, [r7, #8]
 80066fa:	4618      	mov	r0, r3
 80066fc:	f000 f9e4 	bl	8006ac8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	699a      	ldr	r2, [r3, #24]
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800670e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	699a      	ldr	r2, [r3, #24]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800671e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	6999      	ldr	r1, [r3, #24]
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	691b      	ldr	r3, [r3, #16]
 800672a:	021a      	lsls	r2, r3, #8
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	430a      	orrs	r2, r1
 8006732:	619a      	str	r2, [r3, #24]
      break;
 8006734:	e084      	b.n	8006840 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	68b9      	ldr	r1, [r7, #8]
 800673c:	4618      	mov	r0, r3
 800673e:	f000 fa3b 	bl	8006bb8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	69da      	ldr	r2, [r3, #28]
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f042 0208 	orr.w	r2, r2, #8
 8006750:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	69da      	ldr	r2, [r3, #28]
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f022 0204 	bic.w	r2, r2, #4
 8006760:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	69d9      	ldr	r1, [r3, #28]
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	691a      	ldr	r2, [r3, #16]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	430a      	orrs	r2, r1
 8006772:	61da      	str	r2, [r3, #28]
      break;
 8006774:	e064      	b.n	8006840 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	68b9      	ldr	r1, [r7, #8]
 800677c:	4618      	mov	r0, r3
 800677e:	f000 fa91 	bl	8006ca4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	69da      	ldr	r2, [r3, #28]
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006790:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	69da      	ldr	r2, [r3, #28]
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	69d9      	ldr	r1, [r3, #28]
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	691b      	ldr	r3, [r3, #16]
 80067ac:	021a      	lsls	r2, r3, #8
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	430a      	orrs	r2, r1
 80067b4:	61da      	str	r2, [r3, #28]
      break;
 80067b6:	e043      	b.n	8006840 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	68b9      	ldr	r1, [r7, #8]
 80067be:	4618      	mov	r0, r3
 80067c0:	f000 fac8 	bl	8006d54 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f042 0208 	orr.w	r2, r2, #8
 80067d2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f022 0204 	bic.w	r2, r2, #4
 80067e2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	691a      	ldr	r2, [r3, #16]
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	430a      	orrs	r2, r1
 80067f4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80067f6:	e023      	b.n	8006840 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	68b9      	ldr	r1, [r7, #8]
 80067fe:	4618      	mov	r0, r3
 8006800:	f000 fafa 	bl	8006df8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006812:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006822:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	691b      	ldr	r3, [r3, #16]
 800682e:	021a      	lsls	r2, r3, #8
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	430a      	orrs	r2, r1
 8006836:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006838:	e002      	b.n	8006840 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800683a:	2301      	movs	r3, #1
 800683c:	75fb      	strb	r3, [r7, #23]
      break;
 800683e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	2200      	movs	r2, #0
 8006844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006848:	7dfb      	ldrb	r3, [r7, #23]
}
 800684a:	4618      	mov	r0, r3
 800684c:	3718      	adds	r7, #24
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}
 8006852:	bf00      	nop

08006854 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006854:	b480      	push	{r7}
 8006856:	b083      	sub	sp, #12
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800685c:	bf00      	nop
 800685e:	370c      	adds	r7, #12
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr

08006868 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006868:	b480      	push	{r7}
 800686a:	b083      	sub	sp, #12
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006870:	bf00      	nop
 8006872:	370c      	adds	r7, #12
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr

0800687c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800687c:	b480      	push	{r7}
 800687e:	b083      	sub	sp, #12
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006884:	bf00      	nop
 8006886:	370c      	adds	r7, #12
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr

08006890 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006890:	b480      	push	{r7}
 8006892:	b083      	sub	sp, #12
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006898:	bf00      	nop
 800689a:	370c      	adds	r7, #12
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr

080068a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b085      	sub	sp, #20
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	4a40      	ldr	r2, [pc, #256]	; (80069b8 <TIM_Base_SetConfig+0x114>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d013      	beq.n	80068e4 <TIM_Base_SetConfig+0x40>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068c2:	d00f      	beq.n	80068e4 <TIM_Base_SetConfig+0x40>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	4a3d      	ldr	r2, [pc, #244]	; (80069bc <TIM_Base_SetConfig+0x118>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d00b      	beq.n	80068e4 <TIM_Base_SetConfig+0x40>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	4a3c      	ldr	r2, [pc, #240]	; (80069c0 <TIM_Base_SetConfig+0x11c>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d007      	beq.n	80068e4 <TIM_Base_SetConfig+0x40>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	4a3b      	ldr	r2, [pc, #236]	; (80069c4 <TIM_Base_SetConfig+0x120>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d003      	beq.n	80068e4 <TIM_Base_SetConfig+0x40>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	4a3a      	ldr	r2, [pc, #232]	; (80069c8 <TIM_Base_SetConfig+0x124>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d108      	bne.n	80068f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	68fa      	ldr	r2, [r7, #12]
 80068f2:	4313      	orrs	r3, r2
 80068f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	4a2f      	ldr	r2, [pc, #188]	; (80069b8 <TIM_Base_SetConfig+0x114>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d02b      	beq.n	8006956 <TIM_Base_SetConfig+0xb2>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006904:	d027      	beq.n	8006956 <TIM_Base_SetConfig+0xb2>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	4a2c      	ldr	r2, [pc, #176]	; (80069bc <TIM_Base_SetConfig+0x118>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d023      	beq.n	8006956 <TIM_Base_SetConfig+0xb2>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	4a2b      	ldr	r2, [pc, #172]	; (80069c0 <TIM_Base_SetConfig+0x11c>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d01f      	beq.n	8006956 <TIM_Base_SetConfig+0xb2>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	4a2a      	ldr	r2, [pc, #168]	; (80069c4 <TIM_Base_SetConfig+0x120>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d01b      	beq.n	8006956 <TIM_Base_SetConfig+0xb2>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	4a29      	ldr	r2, [pc, #164]	; (80069c8 <TIM_Base_SetConfig+0x124>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d017      	beq.n	8006956 <TIM_Base_SetConfig+0xb2>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	4a28      	ldr	r2, [pc, #160]	; (80069cc <TIM_Base_SetConfig+0x128>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d013      	beq.n	8006956 <TIM_Base_SetConfig+0xb2>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	4a27      	ldr	r2, [pc, #156]	; (80069d0 <TIM_Base_SetConfig+0x12c>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d00f      	beq.n	8006956 <TIM_Base_SetConfig+0xb2>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	4a26      	ldr	r2, [pc, #152]	; (80069d4 <TIM_Base_SetConfig+0x130>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d00b      	beq.n	8006956 <TIM_Base_SetConfig+0xb2>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	4a25      	ldr	r2, [pc, #148]	; (80069d8 <TIM_Base_SetConfig+0x134>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d007      	beq.n	8006956 <TIM_Base_SetConfig+0xb2>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	4a24      	ldr	r2, [pc, #144]	; (80069dc <TIM_Base_SetConfig+0x138>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d003      	beq.n	8006956 <TIM_Base_SetConfig+0xb2>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	4a23      	ldr	r2, [pc, #140]	; (80069e0 <TIM_Base_SetConfig+0x13c>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d108      	bne.n	8006968 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800695c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	68db      	ldr	r3, [r3, #12]
 8006962:	68fa      	ldr	r2, [r7, #12]
 8006964:	4313      	orrs	r3, r2
 8006966:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	695b      	ldr	r3, [r3, #20]
 8006972:	4313      	orrs	r3, r2
 8006974:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	68fa      	ldr	r2, [r7, #12]
 800697a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	689a      	ldr	r2, [r3, #8]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	681a      	ldr	r2, [r3, #0]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	4a0a      	ldr	r2, [pc, #40]	; (80069b8 <TIM_Base_SetConfig+0x114>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d003      	beq.n	800699c <TIM_Base_SetConfig+0xf8>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	4a0c      	ldr	r2, [pc, #48]	; (80069c8 <TIM_Base_SetConfig+0x124>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d103      	bne.n	80069a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	691a      	ldr	r2, [r3, #16]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2201      	movs	r2, #1
 80069a8:	615a      	str	r2, [r3, #20]
}
 80069aa:	bf00      	nop
 80069ac:	3714      	adds	r7, #20
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr
 80069b6:	bf00      	nop
 80069b8:	40010000 	.word	0x40010000
 80069bc:	40000400 	.word	0x40000400
 80069c0:	40000800 	.word	0x40000800
 80069c4:	40000c00 	.word	0x40000c00
 80069c8:	40010400 	.word	0x40010400
 80069cc:	40014000 	.word	0x40014000
 80069d0:	40014400 	.word	0x40014400
 80069d4:	40014800 	.word	0x40014800
 80069d8:	40001800 	.word	0x40001800
 80069dc:	40001c00 	.word	0x40001c00
 80069e0:	40002000 	.word	0x40002000

080069e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b087      	sub	sp, #28
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6a1b      	ldr	r3, [r3, #32]
 80069f2:	f023 0201 	bic.w	r2, r3, #1
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6a1b      	ldr	r3, [r3, #32]
 80069fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	699b      	ldr	r3, [r3, #24]
 8006a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006a0c:	68fa      	ldr	r2, [r7, #12]
 8006a0e:	4b2b      	ldr	r3, [pc, #172]	; (8006abc <TIM_OC1_SetConfig+0xd8>)
 8006a10:	4013      	ands	r3, r2
 8006a12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f023 0303 	bic.w	r3, r3, #3
 8006a1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	68fa      	ldr	r2, [r7, #12]
 8006a22:	4313      	orrs	r3, r2
 8006a24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	f023 0302 	bic.w	r3, r3, #2
 8006a2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	697a      	ldr	r2, [r7, #20]
 8006a34:	4313      	orrs	r3, r2
 8006a36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	4a21      	ldr	r2, [pc, #132]	; (8006ac0 <TIM_OC1_SetConfig+0xdc>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d003      	beq.n	8006a48 <TIM_OC1_SetConfig+0x64>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	4a20      	ldr	r2, [pc, #128]	; (8006ac4 <TIM_OC1_SetConfig+0xe0>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d10c      	bne.n	8006a62 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	f023 0308 	bic.w	r3, r3, #8
 8006a4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	68db      	ldr	r3, [r3, #12]
 8006a54:	697a      	ldr	r2, [r7, #20]
 8006a56:	4313      	orrs	r3, r2
 8006a58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	f023 0304 	bic.w	r3, r3, #4
 8006a60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	4a16      	ldr	r2, [pc, #88]	; (8006ac0 <TIM_OC1_SetConfig+0xdc>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d003      	beq.n	8006a72 <TIM_OC1_SetConfig+0x8e>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	4a15      	ldr	r2, [pc, #84]	; (8006ac4 <TIM_OC1_SetConfig+0xe0>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d111      	bne.n	8006a96 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	695b      	ldr	r3, [r3, #20]
 8006a86:	693a      	ldr	r2, [r7, #16]
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	699b      	ldr	r3, [r3, #24]
 8006a90:	693a      	ldr	r2, [r7, #16]
 8006a92:	4313      	orrs	r3, r2
 8006a94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	693a      	ldr	r2, [r7, #16]
 8006a9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	68fa      	ldr	r2, [r7, #12]
 8006aa0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	685a      	ldr	r2, [r3, #4]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	697a      	ldr	r2, [r7, #20]
 8006aae:	621a      	str	r2, [r3, #32]
}
 8006ab0:	bf00      	nop
 8006ab2:	371c      	adds	r7, #28
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr
 8006abc:	fffeff8f 	.word	0xfffeff8f
 8006ac0:	40010000 	.word	0x40010000
 8006ac4:	40010400 	.word	0x40010400

08006ac8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b087      	sub	sp, #28
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
 8006ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6a1b      	ldr	r3, [r3, #32]
 8006ad6:	f023 0210 	bic.w	r2, r3, #16
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6a1b      	ldr	r3, [r3, #32]
 8006ae2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	699b      	ldr	r3, [r3, #24]
 8006aee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006af0:	68fa      	ldr	r2, [r7, #12]
 8006af2:	4b2e      	ldr	r3, [pc, #184]	; (8006bac <TIM_OC2_SetConfig+0xe4>)
 8006af4:	4013      	ands	r3, r2
 8006af6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006afe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	021b      	lsls	r3, r3, #8
 8006b06:	68fa      	ldr	r2, [r7, #12]
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	f023 0320 	bic.w	r3, r3, #32
 8006b12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	689b      	ldr	r3, [r3, #8]
 8006b18:	011b      	lsls	r3, r3, #4
 8006b1a:	697a      	ldr	r2, [r7, #20]
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	4a23      	ldr	r2, [pc, #140]	; (8006bb0 <TIM_OC2_SetConfig+0xe8>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d003      	beq.n	8006b30 <TIM_OC2_SetConfig+0x68>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	4a22      	ldr	r2, [pc, #136]	; (8006bb4 <TIM_OC2_SetConfig+0xec>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d10d      	bne.n	8006b4c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	68db      	ldr	r3, [r3, #12]
 8006b3c:	011b      	lsls	r3, r3, #4
 8006b3e:	697a      	ldr	r2, [r7, #20]
 8006b40:	4313      	orrs	r3, r2
 8006b42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b4a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	4a18      	ldr	r2, [pc, #96]	; (8006bb0 <TIM_OC2_SetConfig+0xe8>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d003      	beq.n	8006b5c <TIM_OC2_SetConfig+0x94>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	4a17      	ldr	r2, [pc, #92]	; (8006bb4 <TIM_OC2_SetConfig+0xec>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d113      	bne.n	8006b84 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b62:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b6a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	695b      	ldr	r3, [r3, #20]
 8006b70:	009b      	lsls	r3, r3, #2
 8006b72:	693a      	ldr	r2, [r7, #16]
 8006b74:	4313      	orrs	r3, r2
 8006b76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	699b      	ldr	r3, [r3, #24]
 8006b7c:	009b      	lsls	r3, r3, #2
 8006b7e:	693a      	ldr	r2, [r7, #16]
 8006b80:	4313      	orrs	r3, r2
 8006b82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	693a      	ldr	r2, [r7, #16]
 8006b88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	68fa      	ldr	r2, [r7, #12]
 8006b8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	685a      	ldr	r2, [r3, #4]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	697a      	ldr	r2, [r7, #20]
 8006b9c:	621a      	str	r2, [r3, #32]
}
 8006b9e:	bf00      	nop
 8006ba0:	371c      	adds	r7, #28
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba8:	4770      	bx	lr
 8006baa:	bf00      	nop
 8006bac:	feff8fff 	.word	0xfeff8fff
 8006bb0:	40010000 	.word	0x40010000
 8006bb4:	40010400 	.word	0x40010400

08006bb8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b087      	sub	sp, #28
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
 8006bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6a1b      	ldr	r3, [r3, #32]
 8006bc6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6a1b      	ldr	r3, [r3, #32]
 8006bd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	69db      	ldr	r3, [r3, #28]
 8006bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006be0:	68fa      	ldr	r2, [r7, #12]
 8006be2:	4b2d      	ldr	r3, [pc, #180]	; (8006c98 <TIM_OC3_SetConfig+0xe0>)
 8006be4:	4013      	ands	r3, r2
 8006be6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	f023 0303 	bic.w	r3, r3, #3
 8006bee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	68fa      	ldr	r2, [r7, #12]
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	689b      	ldr	r3, [r3, #8]
 8006c06:	021b      	lsls	r3, r3, #8
 8006c08:	697a      	ldr	r2, [r7, #20]
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	4a22      	ldr	r2, [pc, #136]	; (8006c9c <TIM_OC3_SetConfig+0xe4>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d003      	beq.n	8006c1e <TIM_OC3_SetConfig+0x66>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	4a21      	ldr	r2, [pc, #132]	; (8006ca0 <TIM_OC3_SetConfig+0xe8>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d10d      	bne.n	8006c3a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006c1e:	697b      	ldr	r3, [r7, #20]
 8006c20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	68db      	ldr	r3, [r3, #12]
 8006c2a:	021b      	lsls	r3, r3, #8
 8006c2c:	697a      	ldr	r2, [r7, #20]
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	4a17      	ldr	r2, [pc, #92]	; (8006c9c <TIM_OC3_SetConfig+0xe4>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d003      	beq.n	8006c4a <TIM_OC3_SetConfig+0x92>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	4a16      	ldr	r2, [pc, #88]	; (8006ca0 <TIM_OC3_SetConfig+0xe8>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d113      	bne.n	8006c72 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	695b      	ldr	r3, [r3, #20]
 8006c5e:	011b      	lsls	r3, r3, #4
 8006c60:	693a      	ldr	r2, [r7, #16]
 8006c62:	4313      	orrs	r3, r2
 8006c64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	699b      	ldr	r3, [r3, #24]
 8006c6a:	011b      	lsls	r3, r3, #4
 8006c6c:	693a      	ldr	r2, [r7, #16]
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	693a      	ldr	r2, [r7, #16]
 8006c76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	68fa      	ldr	r2, [r7, #12]
 8006c7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	685a      	ldr	r2, [r3, #4]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	697a      	ldr	r2, [r7, #20]
 8006c8a:	621a      	str	r2, [r3, #32]
}
 8006c8c:	bf00      	nop
 8006c8e:	371c      	adds	r7, #28
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr
 8006c98:	fffeff8f 	.word	0xfffeff8f
 8006c9c:	40010000 	.word	0x40010000
 8006ca0:	40010400 	.word	0x40010400

08006ca4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b087      	sub	sp, #28
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6a1b      	ldr	r3, [r3, #32]
 8006cb2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6a1b      	ldr	r3, [r3, #32]
 8006cbe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	69db      	ldr	r3, [r3, #28]
 8006cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006ccc:	68fa      	ldr	r2, [r7, #12]
 8006cce:	4b1e      	ldr	r3, [pc, #120]	; (8006d48 <TIM_OC4_SetConfig+0xa4>)
 8006cd0:	4013      	ands	r3, r2
 8006cd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	021b      	lsls	r3, r3, #8
 8006ce2:	68fa      	ldr	r2, [r7, #12]
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006cee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	689b      	ldr	r3, [r3, #8]
 8006cf4:	031b      	lsls	r3, r3, #12
 8006cf6:	693a      	ldr	r2, [r7, #16]
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	4a13      	ldr	r2, [pc, #76]	; (8006d4c <TIM_OC4_SetConfig+0xa8>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d003      	beq.n	8006d0c <TIM_OC4_SetConfig+0x68>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	4a12      	ldr	r2, [pc, #72]	; (8006d50 <TIM_OC4_SetConfig+0xac>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d109      	bne.n	8006d20 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d12:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	695b      	ldr	r3, [r3, #20]
 8006d18:	019b      	lsls	r3, r3, #6
 8006d1a:	697a      	ldr	r2, [r7, #20]
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	697a      	ldr	r2, [r7, #20]
 8006d24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	68fa      	ldr	r2, [r7, #12]
 8006d2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	685a      	ldr	r2, [r3, #4]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	693a      	ldr	r2, [r7, #16]
 8006d38:	621a      	str	r2, [r3, #32]
}
 8006d3a:	bf00      	nop
 8006d3c:	371c      	adds	r7, #28
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d44:	4770      	bx	lr
 8006d46:	bf00      	nop
 8006d48:	feff8fff 	.word	0xfeff8fff
 8006d4c:	40010000 	.word	0x40010000
 8006d50:	40010400 	.word	0x40010400

08006d54 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b087      	sub	sp, #28
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6a1b      	ldr	r3, [r3, #32]
 8006d62:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6a1b      	ldr	r3, [r3, #32]
 8006d6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006d7c:	68fa      	ldr	r2, [r7, #12]
 8006d7e:	4b1b      	ldr	r3, [pc, #108]	; (8006dec <TIM_OC5_SetConfig+0x98>)
 8006d80:	4013      	ands	r3, r2
 8006d82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	68fa      	ldr	r2, [r7, #12]
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006d94:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	041b      	lsls	r3, r3, #16
 8006d9c:	693a      	ldr	r2, [r7, #16]
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	4a12      	ldr	r2, [pc, #72]	; (8006df0 <TIM_OC5_SetConfig+0x9c>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d003      	beq.n	8006db2 <TIM_OC5_SetConfig+0x5e>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	4a11      	ldr	r2, [pc, #68]	; (8006df4 <TIM_OC5_SetConfig+0xa0>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d109      	bne.n	8006dc6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006db8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	695b      	ldr	r3, [r3, #20]
 8006dbe:	021b      	lsls	r3, r3, #8
 8006dc0:	697a      	ldr	r2, [r7, #20]
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	697a      	ldr	r2, [r7, #20]
 8006dca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	68fa      	ldr	r2, [r7, #12]
 8006dd0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	685a      	ldr	r2, [r3, #4]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	693a      	ldr	r2, [r7, #16]
 8006dde:	621a      	str	r2, [r3, #32]
}
 8006de0:	bf00      	nop
 8006de2:	371c      	adds	r7, #28
 8006de4:	46bd      	mov	sp, r7
 8006de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dea:	4770      	bx	lr
 8006dec:	fffeff8f 	.word	0xfffeff8f
 8006df0:	40010000 	.word	0x40010000
 8006df4:	40010400 	.word	0x40010400

08006df8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b087      	sub	sp, #28
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6a1b      	ldr	r3, [r3, #32]
 8006e06:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6a1b      	ldr	r3, [r3, #32]
 8006e12:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006e20:	68fa      	ldr	r2, [r7, #12]
 8006e22:	4b1c      	ldr	r3, [pc, #112]	; (8006e94 <TIM_OC6_SetConfig+0x9c>)
 8006e24:	4013      	ands	r3, r2
 8006e26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	021b      	lsls	r3, r3, #8
 8006e2e:	68fa      	ldr	r2, [r7, #12]
 8006e30:	4313      	orrs	r3, r2
 8006e32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006e3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	689b      	ldr	r3, [r3, #8]
 8006e40:	051b      	lsls	r3, r3, #20
 8006e42:	693a      	ldr	r2, [r7, #16]
 8006e44:	4313      	orrs	r3, r2
 8006e46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	4a13      	ldr	r2, [pc, #76]	; (8006e98 <TIM_OC6_SetConfig+0xa0>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d003      	beq.n	8006e58 <TIM_OC6_SetConfig+0x60>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	4a12      	ldr	r2, [pc, #72]	; (8006e9c <TIM_OC6_SetConfig+0xa4>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d109      	bne.n	8006e6c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e5e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	695b      	ldr	r3, [r3, #20]
 8006e64:	029b      	lsls	r3, r3, #10
 8006e66:	697a      	ldr	r2, [r7, #20]
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	697a      	ldr	r2, [r7, #20]
 8006e70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	68fa      	ldr	r2, [r7, #12]
 8006e76:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	685a      	ldr	r2, [r3, #4]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	693a      	ldr	r2, [r7, #16]
 8006e84:	621a      	str	r2, [r3, #32]
}
 8006e86:	bf00      	nop
 8006e88:	371c      	adds	r7, #28
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e90:	4770      	bx	lr
 8006e92:	bf00      	nop
 8006e94:	feff8fff 	.word	0xfeff8fff
 8006e98:	40010000 	.word	0x40010000
 8006e9c:	40010400 	.word	0x40010400

08006ea0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b085      	sub	sp, #20
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
 8006ea8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d101      	bne.n	8006eb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006eb4:	2302      	movs	r3, #2
 8006eb6:	e06d      	b.n	8006f94 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2201      	movs	r2, #1
 8006ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2202      	movs	r2, #2
 8006ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	689b      	ldr	r3, [r3, #8]
 8006ed6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a30      	ldr	r2, [pc, #192]	; (8006fa0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d004      	beq.n	8006eec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a2f      	ldr	r2, [pc, #188]	; (8006fa4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d108      	bne.n	8006efe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006ef2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	68fa      	ldr	r2, [r7, #12]
 8006efa:	4313      	orrs	r3, r2
 8006efc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f04:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	68fa      	ldr	r2, [r7, #12]
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	68fa      	ldr	r2, [r7, #12]
 8006f16:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a20      	ldr	r2, [pc, #128]	; (8006fa0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d022      	beq.n	8006f68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f2a:	d01d      	beq.n	8006f68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a1d      	ldr	r2, [pc, #116]	; (8006fa8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d018      	beq.n	8006f68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a1c      	ldr	r2, [pc, #112]	; (8006fac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d013      	beq.n	8006f68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a1a      	ldr	r2, [pc, #104]	; (8006fb0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d00e      	beq.n	8006f68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a15      	ldr	r2, [pc, #84]	; (8006fa4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d009      	beq.n	8006f68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a16      	ldr	r2, [pc, #88]	; (8006fb4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d004      	beq.n	8006f68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a15      	ldr	r2, [pc, #84]	; (8006fb8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d10c      	bne.n	8006f82 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f6e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	689b      	ldr	r3, [r3, #8]
 8006f74:	68ba      	ldr	r2, [r7, #8]
 8006f76:	4313      	orrs	r3, r2
 8006f78:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	68ba      	ldr	r2, [r7, #8]
 8006f80:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2201      	movs	r2, #1
 8006f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f92:	2300      	movs	r3, #0
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3714      	adds	r7, #20
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9e:	4770      	bx	lr
 8006fa0:	40010000 	.word	0x40010000
 8006fa4:	40010400 	.word	0x40010400
 8006fa8:	40000400 	.word	0x40000400
 8006fac:	40000800 	.word	0x40000800
 8006fb0:	40000c00 	.word	0x40000c00
 8006fb4:	40014000 	.word	0x40014000
 8006fb8:	40001800 	.word	0x40001800

08006fbc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b085      	sub	sp, #20
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
 8006fc4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fd0:	2b01      	cmp	r3, #1
 8006fd2:	d101      	bne.n	8006fd8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006fd4:	2302      	movs	r3, #2
 8006fd6:	e065      	b.n	80070a4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2201      	movs	r2, #1
 8006fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	68db      	ldr	r3, [r3, #12]
 8006fea:	4313      	orrs	r3, r2
 8006fec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	689b      	ldr	r3, [r3, #8]
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	4313      	orrs	r3, r2
 8007008:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4313      	orrs	r3, r2
 8007016:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	691b      	ldr	r3, [r3, #16]
 8007022:	4313      	orrs	r3, r2
 8007024:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	695b      	ldr	r3, [r3, #20]
 8007030:	4313      	orrs	r3, r2
 8007032:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800703e:	4313      	orrs	r3, r2
 8007040:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	699b      	ldr	r3, [r3, #24]
 800704c:	041b      	lsls	r3, r3, #16
 800704e:	4313      	orrs	r3, r2
 8007050:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a16      	ldr	r2, [pc, #88]	; (80070b0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d004      	beq.n	8007066 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a14      	ldr	r2, [pc, #80]	; (80070b4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d115      	bne.n	8007092 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007070:	051b      	lsls	r3, r3, #20
 8007072:	4313      	orrs	r3, r2
 8007074:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	69db      	ldr	r3, [r3, #28]
 8007080:	4313      	orrs	r3, r2
 8007082:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	6a1b      	ldr	r3, [r3, #32]
 800708e:	4313      	orrs	r3, r2
 8007090:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	68fa      	ldr	r2, [r7, #12]
 8007098:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2200      	movs	r2, #0
 800709e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80070a2:	2300      	movs	r3, #0
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3714      	adds	r7, #20
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr
 80070b0:	40010000 	.word	0x40010000
 80070b4:	40010400 	.word	0x40010400

080070b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b083      	sub	sp, #12
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80070c0:	bf00      	nop
 80070c2:	370c      	adds	r7, #12
 80070c4:	46bd      	mov	sp, r7
 80070c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ca:	4770      	bx	lr

080070cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b083      	sub	sp, #12
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80070d4:	bf00      	nop
 80070d6:	370c      	adds	r7, #12
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr

080070e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b083      	sub	sp, #12
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80070e8:	bf00      	nop
 80070ea:	370c      	adds	r7, #12
 80070ec:	46bd      	mov	sp, r7
 80070ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f2:	4770      	bx	lr

080070f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b082      	sub	sp, #8
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d101      	bne.n	8007106 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007102:	2301      	movs	r3, #1
 8007104:	e040      	b.n	8007188 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800710a:	2b00      	cmp	r3, #0
 800710c:	d106      	bne.n	800711c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2200      	movs	r2, #0
 8007112:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f7fc fbea 	bl	80038f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2224      	movs	r2, #36	; 0x24
 8007120:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	681a      	ldr	r2, [r3, #0]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f022 0201 	bic.w	r2, r2, #1
 8007130:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f000 fcae 	bl	8007a94 <UART_SetConfig>
 8007138:	4603      	mov	r3, r0
 800713a:	2b01      	cmp	r3, #1
 800713c:	d101      	bne.n	8007142 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800713e:	2301      	movs	r3, #1
 8007140:	e022      	b.n	8007188 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007146:	2b00      	cmp	r3, #0
 8007148:	d002      	beq.n	8007150 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f000 ff06 	bl	8007f5c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	685a      	ldr	r2, [r3, #4]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800715e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	689a      	ldr	r2, [r3, #8]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800716e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	681a      	ldr	r2, [r3, #0]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f042 0201 	orr.w	r2, r2, #1
 800717e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f000 ff8d 	bl	80080a0 <UART_CheckIdleState>
 8007186:	4603      	mov	r3, r0
}
 8007188:	4618      	mov	r0, r3
 800718a:	3708      	adds	r7, #8
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}

08007190 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b08a      	sub	sp, #40	; 0x28
 8007194:	af00      	add	r7, sp, #0
 8007196:	60f8      	str	r0, [r7, #12]
 8007198:	60b9      	str	r1, [r7, #8]
 800719a:	4613      	mov	r3, r2
 800719c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071a2:	2b20      	cmp	r3, #32
 80071a4:	d165      	bne.n	8007272 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d002      	beq.n	80071b2 <HAL_UART_Transmit_DMA+0x22>
 80071ac:	88fb      	ldrh	r3, [r7, #6]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d101      	bne.n	80071b6 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 80071b2:	2301      	movs	r3, #1
 80071b4:	e05e      	b.n	8007274 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	68ba      	ldr	r2, [r7, #8]
 80071ba:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	88fa      	ldrh	r2, [r7, #6]
 80071c0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	88fa      	ldrh	r2, [r7, #6]
 80071c8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	2200      	movs	r2, #0
 80071d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	2221      	movs	r2, #33	; 0x21
 80071d8:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d027      	beq.n	8007232 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071e6:	4a25      	ldr	r2, [pc, #148]	; (800727c <HAL_UART_Transmit_DMA+0xec>)
 80071e8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071ee:	4a24      	ldr	r2, [pc, #144]	; (8007280 <HAL_UART_Transmit_DMA+0xf0>)
 80071f0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071f6:	4a23      	ldr	r2, [pc, #140]	; (8007284 <HAL_UART_Transmit_DMA+0xf4>)
 80071f8:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071fe:	2200      	movs	r2, #0
 8007200:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800720a:	4619      	mov	r1, r3
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	3328      	adds	r3, #40	; 0x28
 8007212:	461a      	mov	r2, r3
 8007214:	88fb      	ldrh	r3, [r7, #6]
 8007216:	f7fc fef5 	bl	8004004 <HAL_DMA_Start_IT>
 800721a:	4603      	mov	r3, r0
 800721c:	2b00      	cmp	r3, #0
 800721e:	d008      	beq.n	8007232 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	2210      	movs	r2, #16
 8007224:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2220      	movs	r2, #32
 800722c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 800722e:	2301      	movs	r3, #1
 8007230:	e020      	b.n	8007274 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	2240      	movs	r2, #64	; 0x40
 8007238:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	3308      	adds	r3, #8
 8007240:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	e853 3f00 	ldrex	r3, [r3]
 8007248:	613b      	str	r3, [r7, #16]
   return(result);
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007250:	627b      	str	r3, [r7, #36]	; 0x24
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	3308      	adds	r3, #8
 8007258:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800725a:	623a      	str	r2, [r7, #32]
 800725c:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800725e:	69f9      	ldr	r1, [r7, #28]
 8007260:	6a3a      	ldr	r2, [r7, #32]
 8007262:	e841 2300 	strex	r3, r2, [r1]
 8007266:	61bb      	str	r3, [r7, #24]
   return(result);
 8007268:	69bb      	ldr	r3, [r7, #24]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d1e5      	bne.n	800723a <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 800726e:	2300      	movs	r3, #0
 8007270:	e000      	b.n	8007274 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8007272:	2302      	movs	r3, #2
  }
}
 8007274:	4618      	mov	r0, r3
 8007276:	3728      	adds	r7, #40	; 0x28
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}
 800727c:	0800851d 	.word	0x0800851d
 8007280:	080085b3 	.word	0x080085b3
 8007284:	08008735 	.word	0x08008735

08007288 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b08a      	sub	sp, #40	; 0x28
 800728c:	af00      	add	r7, sp, #0
 800728e:	60f8      	str	r0, [r7, #12]
 8007290:	60b9      	str	r1, [r7, #8]
 8007292:	4613      	mov	r3, r2
 8007294:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800729c:	2b20      	cmp	r3, #32
 800729e:	d132      	bne.n	8007306 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d002      	beq.n	80072ac <HAL_UART_Receive_DMA+0x24>
 80072a6:	88fb      	ldrh	r3, [r7, #6]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d101      	bne.n	80072b0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80072ac:	2301      	movs	r3, #1
 80072ae:	e02b      	b.n	8007308 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2200      	movs	r2, #0
 80072b4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d018      	beq.n	80072f6 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	e853 3f00 	ldrex	r3, [r3]
 80072d0:	613b      	str	r3, [r7, #16]
   return(result);
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80072d8:	627b      	str	r3, [r7, #36]	; 0x24
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	461a      	mov	r2, r3
 80072e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e2:	623b      	str	r3, [r7, #32]
 80072e4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072e6:	69f9      	ldr	r1, [r7, #28]
 80072e8:	6a3a      	ldr	r2, [r7, #32]
 80072ea:	e841 2300 	strex	r3, r2, [r1]
 80072ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80072f0:	69bb      	ldr	r3, [r7, #24]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d1e6      	bne.n	80072c4 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80072f6:	88fb      	ldrh	r3, [r7, #6]
 80072f8:	461a      	mov	r2, r3
 80072fa:	68b9      	ldr	r1, [r7, #8]
 80072fc:	68f8      	ldr	r0, [r7, #12]
 80072fe:	f000 ffe3 	bl	80082c8 <UART_Start_Receive_DMA>
 8007302:	4603      	mov	r3, r0
 8007304:	e000      	b.n	8007308 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 8007306:	2302      	movs	r3, #2
  }
}
 8007308:	4618      	mov	r0, r3
 800730a:	3728      	adds	r7, #40	; 0x28
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b090      	sub	sp, #64	; 0x40
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800731c:	63fb      	str	r3, [r7, #60]	; 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007324:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	689b      	ldr	r3, [r3, #8]
 800732c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007330:	2b80      	cmp	r3, #128	; 0x80
 8007332:	d139      	bne.n	80073a8 <HAL_UART_DMAStop+0x98>
 8007334:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007336:	2b21      	cmp	r3, #33	; 0x21
 8007338:	d136      	bne.n	80073a8 <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	3308      	adds	r3, #8
 8007340:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007342:	6a3b      	ldr	r3, [r7, #32]
 8007344:	e853 3f00 	ldrex	r3, [r3]
 8007348:	61fb      	str	r3, [r7, #28]
   return(result);
 800734a:	69fb      	ldr	r3, [r7, #28]
 800734c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007350:	637b      	str	r3, [r7, #52]	; 0x34
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	3308      	adds	r3, #8
 8007358:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800735a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800735c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800735e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007360:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007362:	e841 2300 	strex	r3, r2, [r1]
 8007366:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736a:	2b00      	cmp	r3, #0
 800736c:	d1e5      	bne.n	800733a <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007372:	2b00      	cmp	r3, #0
 8007374:	d015      	beq.n	80073a2 <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800737a:	4618      	mov	r0, r3
 800737c:	f7fc fea2 	bl	80040c4 <HAL_DMA_Abort>
 8007380:	4603      	mov	r3, r0
 8007382:	2b00      	cmp	r3, #0
 8007384:	d00d      	beq.n	80073a2 <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800738a:	4618      	mov	r0, r3
 800738c:	f7fd f8b6 	bl	80044fc <HAL_DMA_GetError>
 8007390:	4603      	mov	r3, r0
 8007392:	2b20      	cmp	r3, #32
 8007394:	d105      	bne.n	80073a2 <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2210      	movs	r2, #16
 800739a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800739e:	2303      	movs	r3, #3
 80073a0:	e044      	b.n	800742c <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f001 f830 	bl	8008408 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	689b      	ldr	r3, [r3, #8]
 80073ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073b2:	2b40      	cmp	r3, #64	; 0x40
 80073b4:	d139      	bne.n	800742a <HAL_UART_DMAStop+0x11a>
 80073b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073b8:	2b22      	cmp	r3, #34	; 0x22
 80073ba:	d136      	bne.n	800742a <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	3308      	adds	r3, #8
 80073c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	e853 3f00 	ldrex	r3, [r3]
 80073ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073d2:	633b      	str	r3, [r7, #48]	; 0x30
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	3308      	adds	r3, #8
 80073da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073dc:	61ba      	str	r2, [r7, #24]
 80073de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073e0:	6979      	ldr	r1, [r7, #20]
 80073e2:	69ba      	ldr	r2, [r7, #24]
 80073e4:	e841 2300 	strex	r3, r2, [r1]
 80073e8:	613b      	str	r3, [r7, #16]
   return(result);
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d1e5      	bne.n	80073bc <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d015      	beq.n	8007424 <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073fc:	4618      	mov	r0, r3
 80073fe:	f7fc fe61 	bl	80040c4 <HAL_DMA_Abort>
 8007402:	4603      	mov	r3, r0
 8007404:	2b00      	cmp	r3, #0
 8007406:	d00d      	beq.n	8007424 <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800740c:	4618      	mov	r0, r3
 800740e:	f7fd f875 	bl	80044fc <HAL_DMA_GetError>
 8007412:	4603      	mov	r3, r0
 8007414:	2b20      	cmp	r3, #32
 8007416:	d105      	bne.n	8007424 <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2210      	movs	r2, #16
 800741c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007420:	2303      	movs	r3, #3
 8007422:	e003      	b.n	800742c <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f001 f815 	bl	8008454 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800742a:	2300      	movs	r3, #0
}
 800742c:	4618      	mov	r0, r3
 800742e:	3740      	adds	r7, #64	; 0x40
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}

08007434 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b0ba      	sub	sp, #232	; 0xe8
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	69db      	ldr	r3, [r3, #28]
 8007442:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	689b      	ldr	r3, [r3, #8]
 8007456:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800745a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800745e:	f640 030f 	movw	r3, #2063	; 0x80f
 8007462:	4013      	ands	r3, r2
 8007464:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007468:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800746c:	2b00      	cmp	r3, #0
 800746e:	d115      	bne.n	800749c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007470:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007474:	f003 0320 	and.w	r3, r3, #32
 8007478:	2b00      	cmp	r3, #0
 800747a:	d00f      	beq.n	800749c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800747c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007480:	f003 0320 	and.w	r3, r3, #32
 8007484:	2b00      	cmp	r3, #0
 8007486:	d009      	beq.n	800749c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800748c:	2b00      	cmp	r3, #0
 800748e:	f000 82ac 	beq.w	80079ea <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	4798      	blx	r3
      }
      return;
 800749a:	e2a6      	b.n	80079ea <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800749c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	f000 8117 	beq.w	80076d4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80074a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074aa:	f003 0301 	and.w	r3, r3, #1
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d106      	bne.n	80074c0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80074b2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80074b6:	4b85      	ldr	r3, [pc, #532]	; (80076cc <HAL_UART_IRQHandler+0x298>)
 80074b8:	4013      	ands	r3, r2
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	f000 810a 	beq.w	80076d4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80074c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074c4:	f003 0301 	and.w	r3, r3, #1
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d011      	beq.n	80074f0 <HAL_UART_IRQHandler+0xbc>
 80074cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d00b      	beq.n	80074f0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	2201      	movs	r2, #1
 80074de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074e6:	f043 0201 	orr.w	r2, r3, #1
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80074f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074f4:	f003 0302 	and.w	r3, r3, #2
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d011      	beq.n	8007520 <HAL_UART_IRQHandler+0xec>
 80074fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007500:	f003 0301 	and.w	r3, r3, #1
 8007504:	2b00      	cmp	r3, #0
 8007506:	d00b      	beq.n	8007520 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	2202      	movs	r2, #2
 800750e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007516:	f043 0204 	orr.w	r2, r3, #4
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007520:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007524:	f003 0304 	and.w	r3, r3, #4
 8007528:	2b00      	cmp	r3, #0
 800752a:	d011      	beq.n	8007550 <HAL_UART_IRQHandler+0x11c>
 800752c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007530:	f003 0301 	and.w	r3, r3, #1
 8007534:	2b00      	cmp	r3, #0
 8007536:	d00b      	beq.n	8007550 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	2204      	movs	r2, #4
 800753e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007546:	f043 0202 	orr.w	r2, r3, #2
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007550:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007554:	f003 0308 	and.w	r3, r3, #8
 8007558:	2b00      	cmp	r3, #0
 800755a:	d017      	beq.n	800758c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800755c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007560:	f003 0320 	and.w	r3, r3, #32
 8007564:	2b00      	cmp	r3, #0
 8007566:	d105      	bne.n	8007574 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007568:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800756c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007570:	2b00      	cmp	r3, #0
 8007572:	d00b      	beq.n	800758c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	2208      	movs	r2, #8
 800757a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007582:	f043 0208 	orr.w	r2, r3, #8
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800758c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007590:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007594:	2b00      	cmp	r3, #0
 8007596:	d012      	beq.n	80075be <HAL_UART_IRQHandler+0x18a>
 8007598:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800759c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d00c      	beq.n	80075be <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80075ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075b4:	f043 0220 	orr.w	r2, r3, #32
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	f000 8212 	beq.w	80079ee <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80075ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075ce:	f003 0320 	and.w	r3, r3, #32
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d00d      	beq.n	80075f2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80075d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075da:	f003 0320 	and.w	r3, r3, #32
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d007      	beq.n	80075f2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d003      	beq.n	80075f2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075f8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	689b      	ldr	r3, [r3, #8]
 8007602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007606:	2b40      	cmp	r3, #64	; 0x40
 8007608:	d005      	beq.n	8007616 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800760a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800760e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007612:	2b00      	cmp	r3, #0
 8007614:	d04f      	beq.n	80076b6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 ff1c 	bl	8008454 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	689b      	ldr	r3, [r3, #8]
 8007622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007626:	2b40      	cmp	r3, #64	; 0x40
 8007628:	d141      	bne.n	80076ae <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	3308      	adds	r3, #8
 8007630:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007634:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007638:	e853 3f00 	ldrex	r3, [r3]
 800763c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007640:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007644:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007648:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	3308      	adds	r3, #8
 8007652:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007656:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800765a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800765e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007662:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007666:	e841 2300 	strex	r3, r2, [r1]
 800766a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800766e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007672:	2b00      	cmp	r3, #0
 8007674:	d1d9      	bne.n	800762a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800767a:	2b00      	cmp	r3, #0
 800767c:	d013      	beq.n	80076a6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007682:	4a13      	ldr	r2, [pc, #76]	; (80076d0 <HAL_UART_IRQHandler+0x29c>)
 8007684:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800768a:	4618      	mov	r0, r3
 800768c:	f7fc fd8a 	bl	80041a4 <HAL_DMA_Abort_IT>
 8007690:	4603      	mov	r3, r0
 8007692:	2b00      	cmp	r3, #0
 8007694:	d017      	beq.n	80076c6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800769a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800769c:	687a      	ldr	r2, [r7, #4]
 800769e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80076a0:	4610      	mov	r0, r2
 80076a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076a4:	e00f      	b.n	80076c6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f000 f9d4 	bl	8007a54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076ac:	e00b      	b.n	80076c6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f000 f9d0 	bl	8007a54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076b4:	e007      	b.n	80076c6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f000 f9cc 	bl	8007a54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2200      	movs	r2, #0
 80076c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80076c4:	e193      	b.n	80079ee <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076c6:	bf00      	nop
    return;
 80076c8:	e191      	b.n	80079ee <HAL_UART_IRQHandler+0x5ba>
 80076ca:	bf00      	nop
 80076cc:	04000120 	.word	0x04000120
 80076d0:	080087b3 	.word	0x080087b3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076d8:	2b01      	cmp	r3, #1
 80076da:	f040 814c 	bne.w	8007976 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80076de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076e2:	f003 0310 	and.w	r3, r3, #16
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	f000 8145 	beq.w	8007976 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80076ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076f0:	f003 0310 	and.w	r3, r3, #16
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	f000 813e 	beq.w	8007976 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	2210      	movs	r2, #16
 8007700:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	689b      	ldr	r3, [r3, #8]
 8007708:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800770c:	2b40      	cmp	r3, #64	; 0x40
 800770e:	f040 80b6 	bne.w	800787e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800771e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007722:	2b00      	cmp	r3, #0
 8007724:	f000 8165 	beq.w	80079f2 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800772e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007732:	429a      	cmp	r2, r3
 8007734:	f080 815d 	bcs.w	80079f2 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800773e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007746:	69db      	ldr	r3, [r3, #28]
 8007748:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800774c:	f000 8086 	beq.w	800785c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007758:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800775c:	e853 3f00 	ldrex	r3, [r3]
 8007760:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007764:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007768:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800776c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	461a      	mov	r2, r3
 8007776:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800777a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800777e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007782:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007786:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800778a:	e841 2300 	strex	r3, r2, [r1]
 800778e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007792:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007796:	2b00      	cmp	r3, #0
 8007798:	d1da      	bne.n	8007750 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	3308      	adds	r3, #8
 80077a0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80077a4:	e853 3f00 	ldrex	r3, [r3]
 80077a8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80077aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80077ac:	f023 0301 	bic.w	r3, r3, #1
 80077b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	3308      	adds	r3, #8
 80077ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80077be:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80077c2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077c4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80077c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80077ca:	e841 2300 	strex	r3, r2, [r1]
 80077ce:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80077d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d1e1      	bne.n	800779a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	3308      	adds	r3, #8
 80077dc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80077e0:	e853 3f00 	ldrex	r3, [r3]
 80077e4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80077e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80077e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	3308      	adds	r3, #8
 80077f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80077fa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80077fc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077fe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007800:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007802:	e841 2300 	strex	r3, r2, [r1]
 8007806:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007808:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800780a:	2b00      	cmp	r3, #0
 800780c:	d1e3      	bne.n	80077d6 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2220      	movs	r2, #32
 8007812:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2200      	movs	r2, #0
 800781a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007822:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007824:	e853 3f00 	ldrex	r3, [r3]
 8007828:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800782a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800782c:	f023 0310 	bic.w	r3, r3, #16
 8007830:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	461a      	mov	r2, r3
 800783a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800783e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007840:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007842:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007844:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007846:	e841 2300 	strex	r3, r2, [r1]
 800784a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800784c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800784e:	2b00      	cmp	r3, #0
 8007850:	d1e4      	bne.n	800781c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007856:	4618      	mov	r0, r3
 8007858:	f7fc fc34 	bl	80040c4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2202      	movs	r2, #2
 8007860:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800786e:	b29b      	uxth	r3, r3
 8007870:	1ad3      	subs	r3, r2, r3
 8007872:	b29b      	uxth	r3, r3
 8007874:	4619      	mov	r1, r3
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f000 f8f6 	bl	8007a68 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800787c:	e0b9      	b.n	80079f2 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800788a:	b29b      	uxth	r3, r3
 800788c:	1ad3      	subs	r3, r2, r3
 800788e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007898:	b29b      	uxth	r3, r3
 800789a:	2b00      	cmp	r3, #0
 800789c:	f000 80ab 	beq.w	80079f6 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 80078a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	f000 80a6 	beq.w	80079f6 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078b2:	e853 3f00 	ldrex	r3, [r3]
 80078b6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80078b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80078be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	461a      	mov	r2, r3
 80078c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80078cc:	647b      	str	r3, [r7, #68]	; 0x44
 80078ce:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078d0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80078d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80078d4:	e841 2300 	strex	r3, r2, [r1]
 80078d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80078da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d1e4      	bne.n	80078aa <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	3308      	adds	r3, #8
 80078e6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ea:	e853 3f00 	ldrex	r3, [r3]
 80078ee:	623b      	str	r3, [r7, #32]
   return(result);
 80078f0:	6a3b      	ldr	r3, [r7, #32]
 80078f2:	f023 0301 	bic.w	r3, r3, #1
 80078f6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	3308      	adds	r3, #8
 8007900:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007904:	633a      	str	r2, [r7, #48]	; 0x30
 8007906:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007908:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800790a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800790c:	e841 2300 	strex	r3, r2, [r1]
 8007910:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007914:	2b00      	cmp	r3, #0
 8007916:	d1e3      	bne.n	80078e0 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2220      	movs	r2, #32
 800791c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2200      	movs	r2, #0
 8007924:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2200      	movs	r2, #0
 800792a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007932:	693b      	ldr	r3, [r7, #16]
 8007934:	e853 3f00 	ldrex	r3, [r3]
 8007938:	60fb      	str	r3, [r7, #12]
   return(result);
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	f023 0310 	bic.w	r3, r3, #16
 8007940:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	461a      	mov	r2, r3
 800794a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800794e:	61fb      	str	r3, [r7, #28]
 8007950:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007952:	69b9      	ldr	r1, [r7, #24]
 8007954:	69fa      	ldr	r2, [r7, #28]
 8007956:	e841 2300 	strex	r3, r2, [r1]
 800795a:	617b      	str	r3, [r7, #20]
   return(result);
 800795c:	697b      	ldr	r3, [r7, #20]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d1e4      	bne.n	800792c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2202      	movs	r2, #2
 8007966:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007968:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800796c:	4619      	mov	r1, r3
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f000 f87a 	bl	8007a68 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007974:	e03f      	b.n	80079f6 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007976:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800797a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800797e:	2b00      	cmp	r3, #0
 8007980:	d00e      	beq.n	80079a0 <HAL_UART_IRQHandler+0x56c>
 8007982:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007986:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800798a:	2b00      	cmp	r3, #0
 800798c:	d008      	beq.n	80079a0 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007996:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f000 f871 	bl	8007a80 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800799e:	e02d      	b.n	80079fc <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80079a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d00e      	beq.n	80079ca <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80079ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d008      	beq.n	80079ca <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d01c      	beq.n	80079fa <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	4798      	blx	r3
    }
    return;
 80079c8:	e017      	b.n	80079fa <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80079ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d012      	beq.n	80079fc <HAL_UART_IRQHandler+0x5c8>
 80079d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d00c      	beq.n	80079fc <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f000 fefb 	bl	80087de <UART_EndTransmit_IT>
    return;
 80079e8:	e008      	b.n	80079fc <HAL_UART_IRQHandler+0x5c8>
      return;
 80079ea:	bf00      	nop
 80079ec:	e006      	b.n	80079fc <HAL_UART_IRQHandler+0x5c8>
    return;
 80079ee:	bf00      	nop
 80079f0:	e004      	b.n	80079fc <HAL_UART_IRQHandler+0x5c8>
      return;
 80079f2:	bf00      	nop
 80079f4:	e002      	b.n	80079fc <HAL_UART_IRQHandler+0x5c8>
      return;
 80079f6:	bf00      	nop
 80079f8:	e000      	b.n	80079fc <HAL_UART_IRQHandler+0x5c8>
    return;
 80079fa:	bf00      	nop
  }

}
 80079fc:	37e8      	adds	r7, #232	; 0xe8
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}
 8007a02:	bf00      	nop

08007a04 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b083      	sub	sp, #12
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007a0c:	bf00      	nop
 8007a0e:	370c      	adds	r7, #12
 8007a10:	46bd      	mov	sp, r7
 8007a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a16:	4770      	bx	lr

08007a18 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b083      	sub	sp, #12
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007a20:	bf00      	nop
 8007a22:	370c      	adds	r7, #12
 8007a24:	46bd      	mov	sp, r7
 8007a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2a:	4770      	bx	lr

08007a2c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b083      	sub	sp, #12
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8007a34:	bf00      	nop
 8007a36:	370c      	adds	r7, #12
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3e:	4770      	bx	lr

08007a40 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b083      	sub	sp, #12
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007a48:	bf00      	nop
 8007a4a:	370c      	adds	r7, #12
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a52:	4770      	bx	lr

08007a54 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b083      	sub	sp, #12
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007a5c:	bf00      	nop
 8007a5e:	370c      	adds	r7, #12
 8007a60:	46bd      	mov	sp, r7
 8007a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a66:	4770      	bx	lr

08007a68 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b083      	sub	sp, #12
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
 8007a70:	460b      	mov	r3, r1
 8007a72:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007a74:	bf00      	nop
 8007a76:	370c      	adds	r7, #12
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7e:	4770      	bx	lr

08007a80 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b083      	sub	sp, #12
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007a88:	bf00      	nop
 8007a8a:	370c      	adds	r7, #12
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a92:	4770      	bx	lr

08007a94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b088      	sub	sp, #32
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	689a      	ldr	r2, [r3, #8]
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	691b      	ldr	r3, [r3, #16]
 8007aa8:	431a      	orrs	r2, r3
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	695b      	ldr	r3, [r3, #20]
 8007aae:	431a      	orrs	r2, r3
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	69db      	ldr	r3, [r3, #28]
 8007ab4:	4313      	orrs	r3, r2
 8007ab6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	681a      	ldr	r2, [r3, #0]
 8007abe:	4ba6      	ldr	r3, [pc, #664]	; (8007d58 <UART_SetConfig+0x2c4>)
 8007ac0:	4013      	ands	r3, r2
 8007ac2:	687a      	ldr	r2, [r7, #4]
 8007ac4:	6812      	ldr	r2, [r2, #0]
 8007ac6:	6979      	ldr	r1, [r7, #20]
 8007ac8:	430b      	orrs	r3, r1
 8007aca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	685b      	ldr	r3, [r3, #4]
 8007ad2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	68da      	ldr	r2, [r3, #12]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	430a      	orrs	r2, r1
 8007ae0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	699b      	ldr	r3, [r3, #24]
 8007ae6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6a1b      	ldr	r3, [r3, #32]
 8007aec:	697a      	ldr	r2, [r7, #20]
 8007aee:	4313      	orrs	r3, r2
 8007af0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	689b      	ldr	r3, [r3, #8]
 8007af8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	697a      	ldr	r2, [r7, #20]
 8007b02:	430a      	orrs	r2, r1
 8007b04:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4a94      	ldr	r2, [pc, #592]	; (8007d5c <UART_SetConfig+0x2c8>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d120      	bne.n	8007b52 <UART_SetConfig+0xbe>
 8007b10:	4b93      	ldr	r3, [pc, #588]	; (8007d60 <UART_SetConfig+0x2cc>)
 8007b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b16:	f003 0303 	and.w	r3, r3, #3
 8007b1a:	2b03      	cmp	r3, #3
 8007b1c:	d816      	bhi.n	8007b4c <UART_SetConfig+0xb8>
 8007b1e:	a201      	add	r2, pc, #4	; (adr r2, 8007b24 <UART_SetConfig+0x90>)
 8007b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b24:	08007b35 	.word	0x08007b35
 8007b28:	08007b41 	.word	0x08007b41
 8007b2c:	08007b3b 	.word	0x08007b3b
 8007b30:	08007b47 	.word	0x08007b47
 8007b34:	2301      	movs	r3, #1
 8007b36:	77fb      	strb	r3, [r7, #31]
 8007b38:	e150      	b.n	8007ddc <UART_SetConfig+0x348>
 8007b3a:	2302      	movs	r3, #2
 8007b3c:	77fb      	strb	r3, [r7, #31]
 8007b3e:	e14d      	b.n	8007ddc <UART_SetConfig+0x348>
 8007b40:	2304      	movs	r3, #4
 8007b42:	77fb      	strb	r3, [r7, #31]
 8007b44:	e14a      	b.n	8007ddc <UART_SetConfig+0x348>
 8007b46:	2308      	movs	r3, #8
 8007b48:	77fb      	strb	r3, [r7, #31]
 8007b4a:	e147      	b.n	8007ddc <UART_SetConfig+0x348>
 8007b4c:	2310      	movs	r3, #16
 8007b4e:	77fb      	strb	r3, [r7, #31]
 8007b50:	e144      	b.n	8007ddc <UART_SetConfig+0x348>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4a83      	ldr	r2, [pc, #524]	; (8007d64 <UART_SetConfig+0x2d0>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d132      	bne.n	8007bc2 <UART_SetConfig+0x12e>
 8007b5c:	4b80      	ldr	r3, [pc, #512]	; (8007d60 <UART_SetConfig+0x2cc>)
 8007b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b62:	f003 030c 	and.w	r3, r3, #12
 8007b66:	2b0c      	cmp	r3, #12
 8007b68:	d828      	bhi.n	8007bbc <UART_SetConfig+0x128>
 8007b6a:	a201      	add	r2, pc, #4	; (adr r2, 8007b70 <UART_SetConfig+0xdc>)
 8007b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b70:	08007ba5 	.word	0x08007ba5
 8007b74:	08007bbd 	.word	0x08007bbd
 8007b78:	08007bbd 	.word	0x08007bbd
 8007b7c:	08007bbd 	.word	0x08007bbd
 8007b80:	08007bb1 	.word	0x08007bb1
 8007b84:	08007bbd 	.word	0x08007bbd
 8007b88:	08007bbd 	.word	0x08007bbd
 8007b8c:	08007bbd 	.word	0x08007bbd
 8007b90:	08007bab 	.word	0x08007bab
 8007b94:	08007bbd 	.word	0x08007bbd
 8007b98:	08007bbd 	.word	0x08007bbd
 8007b9c:	08007bbd 	.word	0x08007bbd
 8007ba0:	08007bb7 	.word	0x08007bb7
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	77fb      	strb	r3, [r7, #31]
 8007ba8:	e118      	b.n	8007ddc <UART_SetConfig+0x348>
 8007baa:	2302      	movs	r3, #2
 8007bac:	77fb      	strb	r3, [r7, #31]
 8007bae:	e115      	b.n	8007ddc <UART_SetConfig+0x348>
 8007bb0:	2304      	movs	r3, #4
 8007bb2:	77fb      	strb	r3, [r7, #31]
 8007bb4:	e112      	b.n	8007ddc <UART_SetConfig+0x348>
 8007bb6:	2308      	movs	r3, #8
 8007bb8:	77fb      	strb	r3, [r7, #31]
 8007bba:	e10f      	b.n	8007ddc <UART_SetConfig+0x348>
 8007bbc:	2310      	movs	r3, #16
 8007bbe:	77fb      	strb	r3, [r7, #31]
 8007bc0:	e10c      	b.n	8007ddc <UART_SetConfig+0x348>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	4a68      	ldr	r2, [pc, #416]	; (8007d68 <UART_SetConfig+0x2d4>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d120      	bne.n	8007c0e <UART_SetConfig+0x17a>
 8007bcc:	4b64      	ldr	r3, [pc, #400]	; (8007d60 <UART_SetConfig+0x2cc>)
 8007bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bd2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007bd6:	2b30      	cmp	r3, #48	; 0x30
 8007bd8:	d013      	beq.n	8007c02 <UART_SetConfig+0x16e>
 8007bda:	2b30      	cmp	r3, #48	; 0x30
 8007bdc:	d814      	bhi.n	8007c08 <UART_SetConfig+0x174>
 8007bde:	2b20      	cmp	r3, #32
 8007be0:	d009      	beq.n	8007bf6 <UART_SetConfig+0x162>
 8007be2:	2b20      	cmp	r3, #32
 8007be4:	d810      	bhi.n	8007c08 <UART_SetConfig+0x174>
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d002      	beq.n	8007bf0 <UART_SetConfig+0x15c>
 8007bea:	2b10      	cmp	r3, #16
 8007bec:	d006      	beq.n	8007bfc <UART_SetConfig+0x168>
 8007bee:	e00b      	b.n	8007c08 <UART_SetConfig+0x174>
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	77fb      	strb	r3, [r7, #31]
 8007bf4:	e0f2      	b.n	8007ddc <UART_SetConfig+0x348>
 8007bf6:	2302      	movs	r3, #2
 8007bf8:	77fb      	strb	r3, [r7, #31]
 8007bfa:	e0ef      	b.n	8007ddc <UART_SetConfig+0x348>
 8007bfc:	2304      	movs	r3, #4
 8007bfe:	77fb      	strb	r3, [r7, #31]
 8007c00:	e0ec      	b.n	8007ddc <UART_SetConfig+0x348>
 8007c02:	2308      	movs	r3, #8
 8007c04:	77fb      	strb	r3, [r7, #31]
 8007c06:	e0e9      	b.n	8007ddc <UART_SetConfig+0x348>
 8007c08:	2310      	movs	r3, #16
 8007c0a:	77fb      	strb	r3, [r7, #31]
 8007c0c:	e0e6      	b.n	8007ddc <UART_SetConfig+0x348>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4a56      	ldr	r2, [pc, #344]	; (8007d6c <UART_SetConfig+0x2d8>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d120      	bne.n	8007c5a <UART_SetConfig+0x1c6>
 8007c18:	4b51      	ldr	r3, [pc, #324]	; (8007d60 <UART_SetConfig+0x2cc>)
 8007c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c1e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007c22:	2bc0      	cmp	r3, #192	; 0xc0
 8007c24:	d013      	beq.n	8007c4e <UART_SetConfig+0x1ba>
 8007c26:	2bc0      	cmp	r3, #192	; 0xc0
 8007c28:	d814      	bhi.n	8007c54 <UART_SetConfig+0x1c0>
 8007c2a:	2b80      	cmp	r3, #128	; 0x80
 8007c2c:	d009      	beq.n	8007c42 <UART_SetConfig+0x1ae>
 8007c2e:	2b80      	cmp	r3, #128	; 0x80
 8007c30:	d810      	bhi.n	8007c54 <UART_SetConfig+0x1c0>
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d002      	beq.n	8007c3c <UART_SetConfig+0x1a8>
 8007c36:	2b40      	cmp	r3, #64	; 0x40
 8007c38:	d006      	beq.n	8007c48 <UART_SetConfig+0x1b4>
 8007c3a:	e00b      	b.n	8007c54 <UART_SetConfig+0x1c0>
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	77fb      	strb	r3, [r7, #31]
 8007c40:	e0cc      	b.n	8007ddc <UART_SetConfig+0x348>
 8007c42:	2302      	movs	r3, #2
 8007c44:	77fb      	strb	r3, [r7, #31]
 8007c46:	e0c9      	b.n	8007ddc <UART_SetConfig+0x348>
 8007c48:	2304      	movs	r3, #4
 8007c4a:	77fb      	strb	r3, [r7, #31]
 8007c4c:	e0c6      	b.n	8007ddc <UART_SetConfig+0x348>
 8007c4e:	2308      	movs	r3, #8
 8007c50:	77fb      	strb	r3, [r7, #31]
 8007c52:	e0c3      	b.n	8007ddc <UART_SetConfig+0x348>
 8007c54:	2310      	movs	r3, #16
 8007c56:	77fb      	strb	r3, [r7, #31]
 8007c58:	e0c0      	b.n	8007ddc <UART_SetConfig+0x348>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	4a44      	ldr	r2, [pc, #272]	; (8007d70 <UART_SetConfig+0x2dc>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d125      	bne.n	8007cb0 <UART_SetConfig+0x21c>
 8007c64:	4b3e      	ldr	r3, [pc, #248]	; (8007d60 <UART_SetConfig+0x2cc>)
 8007c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c72:	d017      	beq.n	8007ca4 <UART_SetConfig+0x210>
 8007c74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c78:	d817      	bhi.n	8007caa <UART_SetConfig+0x216>
 8007c7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c7e:	d00b      	beq.n	8007c98 <UART_SetConfig+0x204>
 8007c80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c84:	d811      	bhi.n	8007caa <UART_SetConfig+0x216>
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d003      	beq.n	8007c92 <UART_SetConfig+0x1fe>
 8007c8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c8e:	d006      	beq.n	8007c9e <UART_SetConfig+0x20a>
 8007c90:	e00b      	b.n	8007caa <UART_SetConfig+0x216>
 8007c92:	2300      	movs	r3, #0
 8007c94:	77fb      	strb	r3, [r7, #31]
 8007c96:	e0a1      	b.n	8007ddc <UART_SetConfig+0x348>
 8007c98:	2302      	movs	r3, #2
 8007c9a:	77fb      	strb	r3, [r7, #31]
 8007c9c:	e09e      	b.n	8007ddc <UART_SetConfig+0x348>
 8007c9e:	2304      	movs	r3, #4
 8007ca0:	77fb      	strb	r3, [r7, #31]
 8007ca2:	e09b      	b.n	8007ddc <UART_SetConfig+0x348>
 8007ca4:	2308      	movs	r3, #8
 8007ca6:	77fb      	strb	r3, [r7, #31]
 8007ca8:	e098      	b.n	8007ddc <UART_SetConfig+0x348>
 8007caa:	2310      	movs	r3, #16
 8007cac:	77fb      	strb	r3, [r7, #31]
 8007cae:	e095      	b.n	8007ddc <UART_SetConfig+0x348>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	4a2f      	ldr	r2, [pc, #188]	; (8007d74 <UART_SetConfig+0x2e0>)
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d125      	bne.n	8007d06 <UART_SetConfig+0x272>
 8007cba:	4b29      	ldr	r3, [pc, #164]	; (8007d60 <UART_SetConfig+0x2cc>)
 8007cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cc0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007cc4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007cc8:	d017      	beq.n	8007cfa <UART_SetConfig+0x266>
 8007cca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007cce:	d817      	bhi.n	8007d00 <UART_SetConfig+0x26c>
 8007cd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007cd4:	d00b      	beq.n	8007cee <UART_SetConfig+0x25a>
 8007cd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007cda:	d811      	bhi.n	8007d00 <UART_SetConfig+0x26c>
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d003      	beq.n	8007ce8 <UART_SetConfig+0x254>
 8007ce0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ce4:	d006      	beq.n	8007cf4 <UART_SetConfig+0x260>
 8007ce6:	e00b      	b.n	8007d00 <UART_SetConfig+0x26c>
 8007ce8:	2301      	movs	r3, #1
 8007cea:	77fb      	strb	r3, [r7, #31]
 8007cec:	e076      	b.n	8007ddc <UART_SetConfig+0x348>
 8007cee:	2302      	movs	r3, #2
 8007cf0:	77fb      	strb	r3, [r7, #31]
 8007cf2:	e073      	b.n	8007ddc <UART_SetConfig+0x348>
 8007cf4:	2304      	movs	r3, #4
 8007cf6:	77fb      	strb	r3, [r7, #31]
 8007cf8:	e070      	b.n	8007ddc <UART_SetConfig+0x348>
 8007cfa:	2308      	movs	r3, #8
 8007cfc:	77fb      	strb	r3, [r7, #31]
 8007cfe:	e06d      	b.n	8007ddc <UART_SetConfig+0x348>
 8007d00:	2310      	movs	r3, #16
 8007d02:	77fb      	strb	r3, [r7, #31]
 8007d04:	e06a      	b.n	8007ddc <UART_SetConfig+0x348>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4a1b      	ldr	r2, [pc, #108]	; (8007d78 <UART_SetConfig+0x2e4>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d138      	bne.n	8007d82 <UART_SetConfig+0x2ee>
 8007d10:	4b13      	ldr	r3, [pc, #76]	; (8007d60 <UART_SetConfig+0x2cc>)
 8007d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d16:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007d1a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007d1e:	d017      	beq.n	8007d50 <UART_SetConfig+0x2bc>
 8007d20:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007d24:	d82a      	bhi.n	8007d7c <UART_SetConfig+0x2e8>
 8007d26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d2a:	d00b      	beq.n	8007d44 <UART_SetConfig+0x2b0>
 8007d2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d30:	d824      	bhi.n	8007d7c <UART_SetConfig+0x2e8>
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d003      	beq.n	8007d3e <UART_SetConfig+0x2aa>
 8007d36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d3a:	d006      	beq.n	8007d4a <UART_SetConfig+0x2b6>
 8007d3c:	e01e      	b.n	8007d7c <UART_SetConfig+0x2e8>
 8007d3e:	2300      	movs	r3, #0
 8007d40:	77fb      	strb	r3, [r7, #31]
 8007d42:	e04b      	b.n	8007ddc <UART_SetConfig+0x348>
 8007d44:	2302      	movs	r3, #2
 8007d46:	77fb      	strb	r3, [r7, #31]
 8007d48:	e048      	b.n	8007ddc <UART_SetConfig+0x348>
 8007d4a:	2304      	movs	r3, #4
 8007d4c:	77fb      	strb	r3, [r7, #31]
 8007d4e:	e045      	b.n	8007ddc <UART_SetConfig+0x348>
 8007d50:	2308      	movs	r3, #8
 8007d52:	77fb      	strb	r3, [r7, #31]
 8007d54:	e042      	b.n	8007ddc <UART_SetConfig+0x348>
 8007d56:	bf00      	nop
 8007d58:	efff69f3 	.word	0xefff69f3
 8007d5c:	40011000 	.word	0x40011000
 8007d60:	40023800 	.word	0x40023800
 8007d64:	40004400 	.word	0x40004400
 8007d68:	40004800 	.word	0x40004800
 8007d6c:	40004c00 	.word	0x40004c00
 8007d70:	40005000 	.word	0x40005000
 8007d74:	40011400 	.word	0x40011400
 8007d78:	40007800 	.word	0x40007800
 8007d7c:	2310      	movs	r3, #16
 8007d7e:	77fb      	strb	r3, [r7, #31]
 8007d80:	e02c      	b.n	8007ddc <UART_SetConfig+0x348>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	4a72      	ldr	r2, [pc, #456]	; (8007f50 <UART_SetConfig+0x4bc>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d125      	bne.n	8007dd8 <UART_SetConfig+0x344>
 8007d8c:	4b71      	ldr	r3, [pc, #452]	; (8007f54 <UART_SetConfig+0x4c0>)
 8007d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d92:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007d96:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007d9a:	d017      	beq.n	8007dcc <UART_SetConfig+0x338>
 8007d9c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007da0:	d817      	bhi.n	8007dd2 <UART_SetConfig+0x33e>
 8007da2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007da6:	d00b      	beq.n	8007dc0 <UART_SetConfig+0x32c>
 8007da8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007dac:	d811      	bhi.n	8007dd2 <UART_SetConfig+0x33e>
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d003      	beq.n	8007dba <UART_SetConfig+0x326>
 8007db2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007db6:	d006      	beq.n	8007dc6 <UART_SetConfig+0x332>
 8007db8:	e00b      	b.n	8007dd2 <UART_SetConfig+0x33e>
 8007dba:	2300      	movs	r3, #0
 8007dbc:	77fb      	strb	r3, [r7, #31]
 8007dbe:	e00d      	b.n	8007ddc <UART_SetConfig+0x348>
 8007dc0:	2302      	movs	r3, #2
 8007dc2:	77fb      	strb	r3, [r7, #31]
 8007dc4:	e00a      	b.n	8007ddc <UART_SetConfig+0x348>
 8007dc6:	2304      	movs	r3, #4
 8007dc8:	77fb      	strb	r3, [r7, #31]
 8007dca:	e007      	b.n	8007ddc <UART_SetConfig+0x348>
 8007dcc:	2308      	movs	r3, #8
 8007dce:	77fb      	strb	r3, [r7, #31]
 8007dd0:	e004      	b.n	8007ddc <UART_SetConfig+0x348>
 8007dd2:	2310      	movs	r3, #16
 8007dd4:	77fb      	strb	r3, [r7, #31]
 8007dd6:	e001      	b.n	8007ddc <UART_SetConfig+0x348>
 8007dd8:	2310      	movs	r3, #16
 8007dda:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	69db      	ldr	r3, [r3, #28]
 8007de0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007de4:	d15b      	bne.n	8007e9e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007de6:	7ffb      	ldrb	r3, [r7, #31]
 8007de8:	2b08      	cmp	r3, #8
 8007dea:	d828      	bhi.n	8007e3e <UART_SetConfig+0x3aa>
 8007dec:	a201      	add	r2, pc, #4	; (adr r2, 8007df4 <UART_SetConfig+0x360>)
 8007dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007df2:	bf00      	nop
 8007df4:	08007e19 	.word	0x08007e19
 8007df8:	08007e21 	.word	0x08007e21
 8007dfc:	08007e29 	.word	0x08007e29
 8007e00:	08007e3f 	.word	0x08007e3f
 8007e04:	08007e2f 	.word	0x08007e2f
 8007e08:	08007e3f 	.word	0x08007e3f
 8007e0c:	08007e3f 	.word	0x08007e3f
 8007e10:	08007e3f 	.word	0x08007e3f
 8007e14:	08007e37 	.word	0x08007e37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e18:	f7fd fc8e 	bl	8005738 <HAL_RCC_GetPCLK1Freq>
 8007e1c:	61b8      	str	r0, [r7, #24]
        break;
 8007e1e:	e013      	b.n	8007e48 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e20:	f7fd fc9e 	bl	8005760 <HAL_RCC_GetPCLK2Freq>
 8007e24:	61b8      	str	r0, [r7, #24]
        break;
 8007e26:	e00f      	b.n	8007e48 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e28:	4b4b      	ldr	r3, [pc, #300]	; (8007f58 <UART_SetConfig+0x4c4>)
 8007e2a:	61bb      	str	r3, [r7, #24]
        break;
 8007e2c:	e00c      	b.n	8007e48 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e2e:	f7fd fb71 	bl	8005514 <HAL_RCC_GetSysClockFreq>
 8007e32:	61b8      	str	r0, [r7, #24]
        break;
 8007e34:	e008      	b.n	8007e48 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e3a:	61bb      	str	r3, [r7, #24]
        break;
 8007e3c:	e004      	b.n	8007e48 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007e42:	2301      	movs	r3, #1
 8007e44:	77bb      	strb	r3, [r7, #30]
        break;
 8007e46:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007e48:	69bb      	ldr	r3, [r7, #24]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d074      	beq.n	8007f38 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007e4e:	69bb      	ldr	r3, [r7, #24]
 8007e50:	005a      	lsls	r2, r3, #1
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	685b      	ldr	r3, [r3, #4]
 8007e56:	085b      	lsrs	r3, r3, #1
 8007e58:	441a      	add	r2, r3
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	685b      	ldr	r3, [r3, #4]
 8007e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e62:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	2b0f      	cmp	r3, #15
 8007e68:	d916      	bls.n	8007e98 <UART_SetConfig+0x404>
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e70:	d212      	bcs.n	8007e98 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	b29b      	uxth	r3, r3
 8007e76:	f023 030f 	bic.w	r3, r3, #15
 8007e7a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007e7c:	693b      	ldr	r3, [r7, #16]
 8007e7e:	085b      	lsrs	r3, r3, #1
 8007e80:	b29b      	uxth	r3, r3
 8007e82:	f003 0307 	and.w	r3, r3, #7
 8007e86:	b29a      	uxth	r2, r3
 8007e88:	89fb      	ldrh	r3, [r7, #14]
 8007e8a:	4313      	orrs	r3, r2
 8007e8c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	89fa      	ldrh	r2, [r7, #14]
 8007e94:	60da      	str	r2, [r3, #12]
 8007e96:	e04f      	b.n	8007f38 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007e98:	2301      	movs	r3, #1
 8007e9a:	77bb      	strb	r3, [r7, #30]
 8007e9c:	e04c      	b.n	8007f38 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007e9e:	7ffb      	ldrb	r3, [r7, #31]
 8007ea0:	2b08      	cmp	r3, #8
 8007ea2:	d828      	bhi.n	8007ef6 <UART_SetConfig+0x462>
 8007ea4:	a201      	add	r2, pc, #4	; (adr r2, 8007eac <UART_SetConfig+0x418>)
 8007ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eaa:	bf00      	nop
 8007eac:	08007ed1 	.word	0x08007ed1
 8007eb0:	08007ed9 	.word	0x08007ed9
 8007eb4:	08007ee1 	.word	0x08007ee1
 8007eb8:	08007ef7 	.word	0x08007ef7
 8007ebc:	08007ee7 	.word	0x08007ee7
 8007ec0:	08007ef7 	.word	0x08007ef7
 8007ec4:	08007ef7 	.word	0x08007ef7
 8007ec8:	08007ef7 	.word	0x08007ef7
 8007ecc:	08007eef 	.word	0x08007eef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ed0:	f7fd fc32 	bl	8005738 <HAL_RCC_GetPCLK1Freq>
 8007ed4:	61b8      	str	r0, [r7, #24]
        break;
 8007ed6:	e013      	b.n	8007f00 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ed8:	f7fd fc42 	bl	8005760 <HAL_RCC_GetPCLK2Freq>
 8007edc:	61b8      	str	r0, [r7, #24]
        break;
 8007ede:	e00f      	b.n	8007f00 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ee0:	4b1d      	ldr	r3, [pc, #116]	; (8007f58 <UART_SetConfig+0x4c4>)
 8007ee2:	61bb      	str	r3, [r7, #24]
        break;
 8007ee4:	e00c      	b.n	8007f00 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ee6:	f7fd fb15 	bl	8005514 <HAL_RCC_GetSysClockFreq>
 8007eea:	61b8      	str	r0, [r7, #24]
        break;
 8007eec:	e008      	b.n	8007f00 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007eee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ef2:	61bb      	str	r3, [r7, #24]
        break;
 8007ef4:	e004      	b.n	8007f00 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007efa:	2301      	movs	r3, #1
 8007efc:	77bb      	strb	r3, [r7, #30]
        break;
 8007efe:	bf00      	nop
    }

    if (pclk != 0U)
 8007f00:	69bb      	ldr	r3, [r7, #24]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d018      	beq.n	8007f38 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	685b      	ldr	r3, [r3, #4]
 8007f0a:	085a      	lsrs	r2, r3, #1
 8007f0c:	69bb      	ldr	r3, [r7, #24]
 8007f0e:	441a      	add	r2, r3
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	685b      	ldr	r3, [r3, #4]
 8007f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f18:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f1a:	693b      	ldr	r3, [r7, #16]
 8007f1c:	2b0f      	cmp	r3, #15
 8007f1e:	d909      	bls.n	8007f34 <UART_SetConfig+0x4a0>
 8007f20:	693b      	ldr	r3, [r7, #16]
 8007f22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f26:	d205      	bcs.n	8007f34 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007f28:	693b      	ldr	r3, [r7, #16]
 8007f2a:	b29a      	uxth	r2, r3
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	60da      	str	r2, [r3, #12]
 8007f32:	e001      	b.n	8007f38 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007f34:	2301      	movs	r3, #1
 8007f36:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2200      	movs	r2, #0
 8007f42:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007f44:	7fbb      	ldrb	r3, [r7, #30]
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	3720      	adds	r7, #32
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}
 8007f4e:	bf00      	nop
 8007f50:	40007c00 	.word	0x40007c00
 8007f54:	40023800 	.word	0x40023800
 8007f58:	00f42400 	.word	0x00f42400

08007f5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b083      	sub	sp, #12
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f68:	f003 0301 	and.w	r3, r3, #1
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d00a      	beq.n	8007f86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	685b      	ldr	r3, [r3, #4]
 8007f76:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	430a      	orrs	r2, r1
 8007f84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f8a:	f003 0302 	and.w	r3, r3, #2
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d00a      	beq.n	8007fa8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	685b      	ldr	r3, [r3, #4]
 8007f98:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	430a      	orrs	r2, r1
 8007fa6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fac:	f003 0304 	and.w	r3, r3, #4
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d00a      	beq.n	8007fca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	685b      	ldr	r3, [r3, #4]
 8007fba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	430a      	orrs	r2, r1
 8007fc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fce:	f003 0308 	and.w	r3, r3, #8
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d00a      	beq.n	8007fec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	685b      	ldr	r3, [r3, #4]
 8007fdc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	430a      	orrs	r2, r1
 8007fea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ff0:	f003 0310 	and.w	r3, r3, #16
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d00a      	beq.n	800800e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	689b      	ldr	r3, [r3, #8]
 8007ffe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	430a      	orrs	r2, r1
 800800c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008012:	f003 0320 	and.w	r3, r3, #32
 8008016:	2b00      	cmp	r3, #0
 8008018:	d00a      	beq.n	8008030 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	689b      	ldr	r3, [r3, #8]
 8008020:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	430a      	orrs	r2, r1
 800802e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008038:	2b00      	cmp	r3, #0
 800803a:	d01a      	beq.n	8008072 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	685b      	ldr	r3, [r3, #4]
 8008042:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	430a      	orrs	r2, r1
 8008050:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008056:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800805a:	d10a      	bne.n	8008072 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	685b      	ldr	r3, [r3, #4]
 8008062:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	430a      	orrs	r2, r1
 8008070:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800807a:	2b00      	cmp	r3, #0
 800807c:	d00a      	beq.n	8008094 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	685b      	ldr	r3, [r3, #4]
 8008084:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	430a      	orrs	r2, r1
 8008092:	605a      	str	r2, [r3, #4]
  }
}
 8008094:	bf00      	nop
 8008096:	370c      	adds	r7, #12
 8008098:	46bd      	mov	sp, r7
 800809a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809e:	4770      	bx	lr

080080a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b086      	sub	sp, #24
 80080a4:	af02      	add	r7, sp, #8
 80080a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2200      	movs	r2, #0
 80080ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80080b0:	f7fb fde8 	bl	8003c84 <HAL_GetTick>
 80080b4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f003 0308 	and.w	r3, r3, #8
 80080c0:	2b08      	cmp	r3, #8
 80080c2:	d10e      	bne.n	80080e2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80080c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80080c8:	9300      	str	r3, [sp, #0]
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	2200      	movs	r2, #0
 80080ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f000 f831 	bl	800813a <UART_WaitOnFlagUntilTimeout>
 80080d8:	4603      	mov	r3, r0
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d001      	beq.n	80080e2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80080de:	2303      	movs	r3, #3
 80080e0:	e027      	b.n	8008132 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f003 0304 	and.w	r3, r3, #4
 80080ec:	2b04      	cmp	r3, #4
 80080ee:	d10e      	bne.n	800810e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80080f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80080f4:	9300      	str	r3, [sp, #0]
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	2200      	movs	r2, #0
 80080fa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f000 f81b 	bl	800813a <UART_WaitOnFlagUntilTimeout>
 8008104:	4603      	mov	r3, r0
 8008106:	2b00      	cmp	r3, #0
 8008108:	d001      	beq.n	800810e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800810a:	2303      	movs	r3, #3
 800810c:	e011      	b.n	8008132 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2220      	movs	r2, #32
 8008112:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2220      	movs	r2, #32
 8008118:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2200      	movs	r2, #0
 8008120:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2200      	movs	r2, #0
 8008126:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2200      	movs	r2, #0
 800812c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8008130:	2300      	movs	r3, #0
}
 8008132:	4618      	mov	r0, r3
 8008134:	3710      	adds	r7, #16
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}

0800813a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800813a:	b580      	push	{r7, lr}
 800813c:	b09c      	sub	sp, #112	; 0x70
 800813e:	af00      	add	r7, sp, #0
 8008140:	60f8      	str	r0, [r7, #12]
 8008142:	60b9      	str	r1, [r7, #8]
 8008144:	603b      	str	r3, [r7, #0]
 8008146:	4613      	mov	r3, r2
 8008148:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800814a:	e0a7      	b.n	800829c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800814c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800814e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008152:	f000 80a3 	beq.w	800829c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008156:	f7fb fd95 	bl	8003c84 <HAL_GetTick>
 800815a:	4602      	mov	r2, r0
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	1ad3      	subs	r3, r2, r3
 8008160:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008162:	429a      	cmp	r2, r3
 8008164:	d302      	bcc.n	800816c <UART_WaitOnFlagUntilTimeout+0x32>
 8008166:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008168:	2b00      	cmp	r3, #0
 800816a:	d13f      	bne.n	80081ec <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008172:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008174:	e853 3f00 	ldrex	r3, [r3]
 8008178:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800817a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800817c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008180:	667b      	str	r3, [r7, #100]	; 0x64
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	461a      	mov	r2, r3
 8008188:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800818a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800818c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800818e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008190:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008192:	e841 2300 	strex	r3, r2, [r1]
 8008196:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008198:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800819a:	2b00      	cmp	r3, #0
 800819c:	d1e6      	bne.n	800816c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	3308      	adds	r3, #8
 80081a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081a8:	e853 3f00 	ldrex	r3, [r3]
 80081ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80081ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081b0:	f023 0301 	bic.w	r3, r3, #1
 80081b4:	663b      	str	r3, [r7, #96]	; 0x60
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	3308      	adds	r3, #8
 80081bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80081be:	64ba      	str	r2, [r7, #72]	; 0x48
 80081c0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80081c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80081c6:	e841 2300 	strex	r3, r2, [r1]
 80081ca:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80081cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d1e5      	bne.n	800819e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2220      	movs	r2, #32
 80081d6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	2220      	movs	r2, #32
 80081dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	2200      	movs	r2, #0
 80081e4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80081e8:	2303      	movs	r3, #3
 80081ea:	e068      	b.n	80082be <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f003 0304 	and.w	r3, r3, #4
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d050      	beq.n	800829c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	69db      	ldr	r3, [r3, #28]
 8008200:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008204:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008208:	d148      	bne.n	800829c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008212:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800821a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800821c:	e853 3f00 	ldrex	r3, [r3]
 8008220:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008224:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008228:	66fb      	str	r3, [r7, #108]	; 0x6c
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	461a      	mov	r2, r3
 8008230:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008232:	637b      	str	r3, [r7, #52]	; 0x34
 8008234:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008236:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008238:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800823a:	e841 2300 	strex	r3, r2, [r1]
 800823e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008242:	2b00      	cmp	r3, #0
 8008244:	d1e6      	bne.n	8008214 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	3308      	adds	r3, #8
 800824c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800824e:	697b      	ldr	r3, [r7, #20]
 8008250:	e853 3f00 	ldrex	r3, [r3]
 8008254:	613b      	str	r3, [r7, #16]
   return(result);
 8008256:	693b      	ldr	r3, [r7, #16]
 8008258:	f023 0301 	bic.w	r3, r3, #1
 800825c:	66bb      	str	r3, [r7, #104]	; 0x68
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	3308      	adds	r3, #8
 8008264:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008266:	623a      	str	r2, [r7, #32]
 8008268:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800826a:	69f9      	ldr	r1, [r7, #28]
 800826c:	6a3a      	ldr	r2, [r7, #32]
 800826e:	e841 2300 	strex	r3, r2, [r1]
 8008272:	61bb      	str	r3, [r7, #24]
   return(result);
 8008274:	69bb      	ldr	r3, [r7, #24]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d1e5      	bne.n	8008246 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	2220      	movs	r2, #32
 800827e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	2220      	movs	r2, #32
 8008284:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	2220      	movs	r2, #32
 800828c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	2200      	movs	r2, #0
 8008294:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8008298:	2303      	movs	r3, #3
 800829a:	e010      	b.n	80082be <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	69da      	ldr	r2, [r3, #28]
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	4013      	ands	r3, r2
 80082a6:	68ba      	ldr	r2, [r7, #8]
 80082a8:	429a      	cmp	r2, r3
 80082aa:	bf0c      	ite	eq
 80082ac:	2301      	moveq	r3, #1
 80082ae:	2300      	movne	r3, #0
 80082b0:	b2db      	uxtb	r3, r3
 80082b2:	461a      	mov	r2, r3
 80082b4:	79fb      	ldrb	r3, [r7, #7]
 80082b6:	429a      	cmp	r2, r3
 80082b8:	f43f af48 	beq.w	800814c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80082bc:	2300      	movs	r3, #0
}
 80082be:	4618      	mov	r0, r3
 80082c0:	3770      	adds	r7, #112	; 0x70
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}
	...

080082c8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b096      	sub	sp, #88	; 0x58
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	60f8      	str	r0, [r7, #12]
 80082d0:	60b9      	str	r1, [r7, #8]
 80082d2:	4613      	mov	r3, r2
 80082d4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	68ba      	ldr	r2, [r7, #8]
 80082da:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	88fa      	ldrh	r2, [r7, #6]
 80082e0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	2200      	movs	r2, #0
 80082e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	2222      	movs	r2, #34	; 0x22
 80082f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d028      	beq.n	800834e <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008300:	4a3e      	ldr	r2, [pc, #248]	; (80083fc <UART_Start_Receive_DMA+0x134>)
 8008302:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008308:	4a3d      	ldr	r2, [pc, #244]	; (8008400 <UART_Start_Receive_DMA+0x138>)
 800830a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008310:	4a3c      	ldr	r2, [pc, #240]	; (8008404 <UART_Start_Receive_DMA+0x13c>)
 8008312:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008318:	2200      	movs	r2, #0
 800831a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	3324      	adds	r3, #36	; 0x24
 8008326:	4619      	mov	r1, r3
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800832c:	461a      	mov	r2, r3
 800832e:	88fb      	ldrh	r3, [r7, #6]
 8008330:	f7fb fe68 	bl	8004004 <HAL_DMA_Start_IT>
 8008334:	4603      	mov	r3, r0
 8008336:	2b00      	cmp	r3, #0
 8008338:	d009      	beq.n	800834e <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	2210      	movs	r2, #16
 800833e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	2220      	movs	r2, #32
 8008346:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 800834a:	2301      	movs	r3, #1
 800834c:	e051      	b.n	80083f2 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	691b      	ldr	r3, [r3, #16]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d018      	beq.n	8008388 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800835c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800835e:	e853 3f00 	ldrex	r3, [r3]
 8008362:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008366:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800836a:	657b      	str	r3, [r7, #84]	; 0x54
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	461a      	mov	r2, r3
 8008372:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008374:	64bb      	str	r3, [r7, #72]	; 0x48
 8008376:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008378:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800837a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800837c:	e841 2300 	strex	r3, r2, [r1]
 8008380:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008382:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008384:	2b00      	cmp	r3, #0
 8008386:	d1e6      	bne.n	8008356 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	3308      	adds	r3, #8
 800838e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008392:	e853 3f00 	ldrex	r3, [r3]
 8008396:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800839a:	f043 0301 	orr.w	r3, r3, #1
 800839e:	653b      	str	r3, [r7, #80]	; 0x50
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	3308      	adds	r3, #8
 80083a6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80083a8:	637a      	str	r2, [r7, #52]	; 0x34
 80083aa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80083ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80083b0:	e841 2300 	strex	r3, r2, [r1]
 80083b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80083b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d1e5      	bne.n	8008388 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	3308      	adds	r3, #8
 80083c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083c4:	697b      	ldr	r3, [r7, #20]
 80083c6:	e853 3f00 	ldrex	r3, [r3]
 80083ca:	613b      	str	r3, [r7, #16]
   return(result);
 80083cc:	693b      	ldr	r3, [r7, #16]
 80083ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	3308      	adds	r3, #8
 80083da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80083dc:	623a      	str	r2, [r7, #32]
 80083de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083e0:	69f9      	ldr	r1, [r7, #28]
 80083e2:	6a3a      	ldr	r2, [r7, #32]
 80083e4:	e841 2300 	strex	r3, r2, [r1]
 80083e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80083ea:	69bb      	ldr	r3, [r7, #24]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d1e5      	bne.n	80083bc <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 80083f0:	2300      	movs	r3, #0
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	3758      	adds	r7, #88	; 0x58
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}
 80083fa:	bf00      	nop
 80083fc:	080085cf 	.word	0x080085cf
 8008400:	080086f7 	.word	0x080086f7
 8008404:	08008735 	.word	0x08008735

08008408 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008408:	b480      	push	{r7}
 800840a:	b089      	sub	sp, #36	; 0x24
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	e853 3f00 	ldrex	r3, [r3]
 800841c:	60bb      	str	r3, [r7, #8]
   return(result);
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008424:	61fb      	str	r3, [r7, #28]
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	461a      	mov	r2, r3
 800842c:	69fb      	ldr	r3, [r7, #28]
 800842e:	61bb      	str	r3, [r7, #24]
 8008430:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008432:	6979      	ldr	r1, [r7, #20]
 8008434:	69ba      	ldr	r2, [r7, #24]
 8008436:	e841 2300 	strex	r3, r2, [r1]
 800843a:	613b      	str	r3, [r7, #16]
   return(result);
 800843c:	693b      	ldr	r3, [r7, #16]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d1e6      	bne.n	8008410 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2220      	movs	r2, #32
 8008446:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8008448:	bf00      	nop
 800844a:	3724      	adds	r7, #36	; 0x24
 800844c:	46bd      	mov	sp, r7
 800844e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008452:	4770      	bx	lr

08008454 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008454:	b480      	push	{r7}
 8008456:	b095      	sub	sp, #84	; 0x54
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008464:	e853 3f00 	ldrex	r3, [r3]
 8008468:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800846a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800846c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008470:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	461a      	mov	r2, r3
 8008478:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800847a:	643b      	str	r3, [r7, #64]	; 0x40
 800847c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800847e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008480:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008482:	e841 2300 	strex	r3, r2, [r1]
 8008486:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800848a:	2b00      	cmp	r3, #0
 800848c:	d1e6      	bne.n	800845c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	3308      	adds	r3, #8
 8008494:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008496:	6a3b      	ldr	r3, [r7, #32]
 8008498:	e853 3f00 	ldrex	r3, [r3]
 800849c:	61fb      	str	r3, [r7, #28]
   return(result);
 800849e:	69fb      	ldr	r3, [r7, #28]
 80084a0:	f023 0301 	bic.w	r3, r3, #1
 80084a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	3308      	adds	r3, #8
 80084ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80084ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80084b0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80084b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084b6:	e841 2300 	strex	r3, r2, [r1]
 80084ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80084bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d1e5      	bne.n	800848e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084c6:	2b01      	cmp	r3, #1
 80084c8:	d118      	bne.n	80084fc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	e853 3f00 	ldrex	r3, [r3]
 80084d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	f023 0310 	bic.w	r3, r3, #16
 80084de:	647b      	str	r3, [r7, #68]	; 0x44
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	461a      	mov	r2, r3
 80084e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084e8:	61bb      	str	r3, [r7, #24]
 80084ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ec:	6979      	ldr	r1, [r7, #20]
 80084ee:	69ba      	ldr	r2, [r7, #24]
 80084f0:	e841 2300 	strex	r3, r2, [r1]
 80084f4:	613b      	str	r3, [r7, #16]
   return(result);
 80084f6:	693b      	ldr	r3, [r7, #16]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d1e6      	bne.n	80084ca <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2220      	movs	r2, #32
 8008500:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2200      	movs	r2, #0
 8008508:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2200      	movs	r2, #0
 800850e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008510:	bf00      	nop
 8008512:	3754      	adds	r7, #84	; 0x54
 8008514:	46bd      	mov	sp, r7
 8008516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851a:	4770      	bx	lr

0800851c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b090      	sub	sp, #64	; 0x40
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008528:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	69db      	ldr	r3, [r3, #28]
 800852e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008532:	d037      	beq.n	80085a4 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8008534:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008536:	2200      	movs	r2, #0
 8008538:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800853c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	3308      	adds	r3, #8
 8008542:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008546:	e853 3f00 	ldrex	r3, [r3]
 800854a:	623b      	str	r3, [r7, #32]
   return(result);
 800854c:	6a3b      	ldr	r3, [r7, #32]
 800854e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008552:	63bb      	str	r3, [r7, #56]	; 0x38
 8008554:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	3308      	adds	r3, #8
 800855a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800855c:	633a      	str	r2, [r7, #48]	; 0x30
 800855e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008560:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008562:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008564:	e841 2300 	strex	r3, r2, [r1]
 8008568:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800856a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800856c:	2b00      	cmp	r3, #0
 800856e:	d1e5      	bne.n	800853c <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008570:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008576:	693b      	ldr	r3, [r7, #16]
 8008578:	e853 3f00 	ldrex	r3, [r3]
 800857c:	60fb      	str	r3, [r7, #12]
   return(result);
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008584:	637b      	str	r3, [r7, #52]	; 0x34
 8008586:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	461a      	mov	r2, r3
 800858c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800858e:	61fb      	str	r3, [r7, #28]
 8008590:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008592:	69b9      	ldr	r1, [r7, #24]
 8008594:	69fa      	ldr	r2, [r7, #28]
 8008596:	e841 2300 	strex	r3, r2, [r1]
 800859a:	617b      	str	r3, [r7, #20]
   return(result);
 800859c:	697b      	ldr	r3, [r7, #20]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d1e6      	bne.n	8008570 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80085a2:	e002      	b.n	80085aa <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 80085a4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80085a6:	f7ff fa2d 	bl	8007a04 <HAL_UART_TxCpltCallback>
}
 80085aa:	bf00      	nop
 80085ac:	3740      	adds	r7, #64	; 0x40
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}

080085b2 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80085b2:	b580      	push	{r7, lr}
 80085b4:	b084      	sub	sp, #16
 80085b6:	af00      	add	r7, sp, #0
 80085b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085be:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80085c0:	68f8      	ldr	r0, [r7, #12]
 80085c2:	f7ff fa29 	bl	8007a18 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80085c6:	bf00      	nop
 80085c8:	3710      	adds	r7, #16
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}

080085ce <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80085ce:	b580      	push	{r7, lr}
 80085d0:	b09c      	sub	sp, #112	; 0x70
 80085d2:	af00      	add	r7, sp, #0
 80085d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085da:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	69db      	ldr	r3, [r3, #28]
 80085e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085e4:	d071      	beq.n	80086ca <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 80085e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085e8:	2200      	movs	r2, #0
 80085ea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80085ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085f6:	e853 3f00 	ldrex	r3, [r3]
 80085fa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80085fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008602:	66bb      	str	r3, [r7, #104]	; 0x68
 8008604:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	461a      	mov	r2, r3
 800860a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800860c:	65bb      	str	r3, [r7, #88]	; 0x58
 800860e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008610:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008612:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008614:	e841 2300 	strex	r3, r2, [r1]
 8008618:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800861a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800861c:	2b00      	cmp	r3, #0
 800861e:	d1e6      	bne.n	80085ee <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008620:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	3308      	adds	r3, #8
 8008626:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800862a:	e853 3f00 	ldrex	r3, [r3]
 800862e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008632:	f023 0301 	bic.w	r3, r3, #1
 8008636:	667b      	str	r3, [r7, #100]	; 0x64
 8008638:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	3308      	adds	r3, #8
 800863e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008640:	647a      	str	r2, [r7, #68]	; 0x44
 8008642:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008644:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008646:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008648:	e841 2300 	strex	r3, r2, [r1]
 800864c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800864e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008650:	2b00      	cmp	r3, #0
 8008652:	d1e5      	bne.n	8008620 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008654:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	3308      	adds	r3, #8
 800865a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800865c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800865e:	e853 3f00 	ldrex	r3, [r3]
 8008662:	623b      	str	r3, [r7, #32]
   return(result);
 8008664:	6a3b      	ldr	r3, [r7, #32]
 8008666:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800866a:	663b      	str	r3, [r7, #96]	; 0x60
 800866c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	3308      	adds	r3, #8
 8008672:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008674:	633a      	str	r2, [r7, #48]	; 0x30
 8008676:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008678:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800867a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800867c:	e841 2300 	strex	r3, r2, [r1]
 8008680:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008684:	2b00      	cmp	r3, #0
 8008686:	d1e5      	bne.n	8008654 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008688:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800868a:	2220      	movs	r2, #32
 800868c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008690:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008692:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008694:	2b01      	cmp	r3, #1
 8008696:	d118      	bne.n	80086ca <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008698:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800869e:	693b      	ldr	r3, [r7, #16]
 80086a0:	e853 3f00 	ldrex	r3, [r3]
 80086a4:	60fb      	str	r3, [r7, #12]
   return(result);
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	f023 0310 	bic.w	r3, r3, #16
 80086ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80086ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	461a      	mov	r2, r3
 80086b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80086b6:	61fb      	str	r3, [r7, #28]
 80086b8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ba:	69b9      	ldr	r1, [r7, #24]
 80086bc:	69fa      	ldr	r2, [r7, #28]
 80086be:	e841 2300 	strex	r3, r2, [r1]
 80086c2:	617b      	str	r3, [r7, #20]
   return(result);
 80086c4:	697b      	ldr	r3, [r7, #20]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d1e6      	bne.n	8008698 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80086ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086cc:	2200      	movs	r2, #0
 80086ce:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086d4:	2b01      	cmp	r3, #1
 80086d6:	d107      	bne.n	80086e8 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80086d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086da:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80086de:	4619      	mov	r1, r3
 80086e0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80086e2:	f7ff f9c1 	bl	8007a68 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80086e6:	e002      	b.n	80086ee <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 80086e8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80086ea:	f7ff f99f 	bl	8007a2c <HAL_UART_RxCpltCallback>
}
 80086ee:	bf00      	nop
 80086f0:	3770      	adds	r7, #112	; 0x70
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}

080086f6 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80086f6:	b580      	push	{r7, lr}
 80086f8:	b084      	sub	sp, #16
 80086fa:	af00      	add	r7, sp, #0
 80086fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008702:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	2201      	movs	r2, #1
 8008708:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800870e:	2b01      	cmp	r3, #1
 8008710:	d109      	bne.n	8008726 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008718:	085b      	lsrs	r3, r3, #1
 800871a:	b29b      	uxth	r3, r3
 800871c:	4619      	mov	r1, r3
 800871e:	68f8      	ldr	r0, [r7, #12]
 8008720:	f7ff f9a2 	bl	8007a68 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008724:	e002      	b.n	800872c <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8008726:	68f8      	ldr	r0, [r7, #12]
 8008728:	f7ff f98a 	bl	8007a40 <HAL_UART_RxHalfCpltCallback>
}
 800872c:	bf00      	nop
 800872e:	3710      	adds	r7, #16
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}

08008734 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b086      	sub	sp, #24
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008740:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008746:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800874e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008750:	697b      	ldr	r3, [r7, #20]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	689b      	ldr	r3, [r3, #8]
 8008756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800875a:	2b80      	cmp	r3, #128	; 0x80
 800875c:	d109      	bne.n	8008772 <UART_DMAError+0x3e>
 800875e:	693b      	ldr	r3, [r7, #16]
 8008760:	2b21      	cmp	r3, #33	; 0x21
 8008762:	d106      	bne.n	8008772 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	2200      	movs	r2, #0
 8008768:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800876c:	6978      	ldr	r0, [r7, #20]
 800876e:	f7ff fe4b 	bl	8008408 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	689b      	ldr	r3, [r3, #8]
 8008778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800877c:	2b40      	cmp	r3, #64	; 0x40
 800877e:	d109      	bne.n	8008794 <UART_DMAError+0x60>
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	2b22      	cmp	r3, #34	; 0x22
 8008784:	d106      	bne.n	8008794 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008786:	697b      	ldr	r3, [r7, #20]
 8008788:	2200      	movs	r2, #0
 800878a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800878e:	6978      	ldr	r0, [r7, #20]
 8008790:	f7ff fe60 	bl	8008454 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800879a:	f043 0210 	orr.w	r2, r3, #16
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80087a4:	6978      	ldr	r0, [r7, #20]
 80087a6:	f7ff f955 	bl	8007a54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80087aa:	bf00      	nop
 80087ac:	3718      	adds	r7, #24
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}

080087b2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80087b2:	b580      	push	{r7, lr}
 80087b4:	b084      	sub	sp, #16
 80087b6:	af00      	add	r7, sp, #0
 80087b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087be:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	2200      	movs	r2, #0
 80087c4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	2200      	movs	r2, #0
 80087cc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80087d0:	68f8      	ldr	r0, [r7, #12]
 80087d2:	f7ff f93f 	bl	8007a54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80087d6:	bf00      	nop
 80087d8:	3710      	adds	r7, #16
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}

080087de <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80087de:	b580      	push	{r7, lr}
 80087e0:	b088      	sub	sp, #32
 80087e2:	af00      	add	r7, sp, #0
 80087e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	e853 3f00 	ldrex	r3, [r3]
 80087f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087fa:	61fb      	str	r3, [r7, #28]
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	461a      	mov	r2, r3
 8008802:	69fb      	ldr	r3, [r7, #28]
 8008804:	61bb      	str	r3, [r7, #24]
 8008806:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008808:	6979      	ldr	r1, [r7, #20]
 800880a:	69ba      	ldr	r2, [r7, #24]
 800880c:	e841 2300 	strex	r3, r2, [r1]
 8008810:	613b      	str	r3, [r7, #16]
   return(result);
 8008812:	693b      	ldr	r3, [r7, #16]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d1e6      	bne.n	80087e6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2220      	movs	r2, #32
 800881c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2200      	movs	r2, #0
 8008822:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f7ff f8ed 	bl	8007a04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800882a:	bf00      	nop
 800882c:	3720      	adds	r7, #32
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}
	...

08008834 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008834:	b084      	sub	sp, #16
 8008836:	b580      	push	{r7, lr}
 8008838:	b084      	sub	sp, #16
 800883a:	af00      	add	r7, sp, #0
 800883c:	6078      	str	r0, [r7, #4]
 800883e:	f107 001c 	add.w	r0, r7, #28
 8008842:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008848:	2b01      	cmp	r3, #1
 800884a:	d120      	bne.n	800888e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008850:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	68da      	ldr	r2, [r3, #12]
 800885c:	4b20      	ldr	r3, [pc, #128]	; (80088e0 <USB_CoreInit+0xac>)
 800885e:	4013      	ands	r3, r2
 8008860:	687a      	ldr	r2, [r7, #4]
 8008862:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	68db      	ldr	r3, [r3, #12]
 8008868:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008870:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008872:	2b01      	cmp	r3, #1
 8008874:	d105      	bne.n	8008882 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	68db      	ldr	r3, [r3, #12]
 800887a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f000 fa96 	bl	8008db4 <USB_CoreReset>
 8008888:	4603      	mov	r3, r0
 800888a:	73fb      	strb	r3, [r7, #15]
 800888c:	e010      	b.n	80088b0 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	68db      	ldr	r3, [r3, #12]
 8008892:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f000 fa8a 	bl	8008db4 <USB_CoreReset>
 80088a0:	4603      	mov	r3, r0
 80088a2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088a8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80088b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088b2:	2b01      	cmp	r3, #1
 80088b4:	d10b      	bne.n	80088ce <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	689b      	ldr	r3, [r3, #8]
 80088ba:	f043 0206 	orr.w	r2, r3, #6
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	689b      	ldr	r3, [r3, #8]
 80088c6:	f043 0220 	orr.w	r2, r3, #32
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80088ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80088d0:	4618      	mov	r0, r3
 80088d2:	3710      	adds	r7, #16
 80088d4:	46bd      	mov	sp, r7
 80088d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80088da:	b004      	add	sp, #16
 80088dc:	4770      	bx	lr
 80088de:	bf00      	nop
 80088e0:	ffbdffbf 	.word	0xffbdffbf

080088e4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80088e4:	b480      	push	{r7}
 80088e6:	b083      	sub	sp, #12
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	689b      	ldr	r3, [r3, #8]
 80088f0:	f023 0201 	bic.w	r2, r3, #1
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80088f8:	2300      	movs	r3, #0
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	370c      	adds	r7, #12
 80088fe:	46bd      	mov	sp, r7
 8008900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008904:	4770      	bx	lr

08008906 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008906:	b580      	push	{r7, lr}
 8008908:	b084      	sub	sp, #16
 800890a:	af00      	add	r7, sp, #0
 800890c:	6078      	str	r0, [r7, #4]
 800890e:	460b      	mov	r3, r1
 8008910:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008912:	2300      	movs	r3, #0
 8008914:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	68db      	ldr	r3, [r3, #12]
 800891a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008922:	78fb      	ldrb	r3, [r7, #3]
 8008924:	2b01      	cmp	r3, #1
 8008926:	d115      	bne.n	8008954 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	68db      	ldr	r3, [r3, #12]
 800892c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008934:	2001      	movs	r0, #1
 8008936:	f7fb f9b1 	bl	8003c9c <HAL_Delay>
      ms++;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	3301      	adds	r3, #1
 800893e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f000 fa29 	bl	8008d98 <USB_GetMode>
 8008946:	4603      	mov	r3, r0
 8008948:	2b01      	cmp	r3, #1
 800894a:	d01e      	beq.n	800898a <USB_SetCurrentMode+0x84>
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	2b31      	cmp	r3, #49	; 0x31
 8008950:	d9f0      	bls.n	8008934 <USB_SetCurrentMode+0x2e>
 8008952:	e01a      	b.n	800898a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008954:	78fb      	ldrb	r3, [r7, #3]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d115      	bne.n	8008986 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	68db      	ldr	r3, [r3, #12]
 800895e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008966:	2001      	movs	r0, #1
 8008968:	f7fb f998 	bl	8003c9c <HAL_Delay>
      ms++;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	3301      	adds	r3, #1
 8008970:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f000 fa10 	bl	8008d98 <USB_GetMode>
 8008978:	4603      	mov	r3, r0
 800897a:	2b00      	cmp	r3, #0
 800897c:	d005      	beq.n	800898a <USB_SetCurrentMode+0x84>
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	2b31      	cmp	r3, #49	; 0x31
 8008982:	d9f0      	bls.n	8008966 <USB_SetCurrentMode+0x60>
 8008984:	e001      	b.n	800898a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008986:	2301      	movs	r3, #1
 8008988:	e005      	b.n	8008996 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	2b32      	cmp	r3, #50	; 0x32
 800898e:	d101      	bne.n	8008994 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008990:	2301      	movs	r3, #1
 8008992:	e000      	b.n	8008996 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008994:	2300      	movs	r3, #0
}
 8008996:	4618      	mov	r0, r3
 8008998:	3710      	adds	r7, #16
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}
	...

080089a0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80089a0:	b084      	sub	sp, #16
 80089a2:	b580      	push	{r7, lr}
 80089a4:	b086      	sub	sp, #24
 80089a6:	af00      	add	r7, sp, #0
 80089a8:	6078      	str	r0, [r7, #4]
 80089aa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80089ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80089b2:	2300      	movs	r3, #0
 80089b4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80089ba:	2300      	movs	r3, #0
 80089bc:	613b      	str	r3, [r7, #16]
 80089be:	e009      	b.n	80089d4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80089c0:	687a      	ldr	r2, [r7, #4]
 80089c2:	693b      	ldr	r3, [r7, #16]
 80089c4:	3340      	adds	r3, #64	; 0x40
 80089c6:	009b      	lsls	r3, r3, #2
 80089c8:	4413      	add	r3, r2
 80089ca:	2200      	movs	r2, #0
 80089cc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80089ce:	693b      	ldr	r3, [r7, #16]
 80089d0:	3301      	adds	r3, #1
 80089d2:	613b      	str	r3, [r7, #16]
 80089d4:	693b      	ldr	r3, [r7, #16]
 80089d6:	2b0e      	cmp	r3, #14
 80089d8:	d9f2      	bls.n	80089c0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80089da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d11c      	bne.n	8008a1a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089e6:	685b      	ldr	r3, [r3, #4]
 80089e8:	68fa      	ldr	r2, [r7, #12]
 80089ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80089ee:	f043 0302 	orr.w	r3, r3, #2
 80089f2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089f8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	601a      	str	r2, [r3, #0]
 8008a18:	e005      	b.n	8008a26 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a1e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008a2c:	461a      	mov	r2, r3
 8008a2e:	2300      	movs	r3, #0
 8008a30:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a38:	4619      	mov	r1, r3
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a40:	461a      	mov	r2, r3
 8008a42:	680b      	ldr	r3, [r1, #0]
 8008a44:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a48:	2b01      	cmp	r3, #1
 8008a4a:	d10c      	bne.n	8008a66 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d104      	bne.n	8008a5c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008a52:	2100      	movs	r1, #0
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f000 f965 	bl	8008d24 <USB_SetDevSpeed>
 8008a5a:	e008      	b.n	8008a6e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008a5c:	2101      	movs	r1, #1
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f000 f960 	bl	8008d24 <USB_SetDevSpeed>
 8008a64:	e003      	b.n	8008a6e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008a66:	2103      	movs	r1, #3
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f000 f95b 	bl	8008d24 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008a6e:	2110      	movs	r1, #16
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f000 f8f3 	bl	8008c5c <USB_FlushTxFifo>
 8008a76:	4603      	mov	r3, r0
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d001      	beq.n	8008a80 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f000 f91f 	bl	8008cc4 <USB_FlushRxFifo>
 8008a86:	4603      	mov	r3, r0
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d001      	beq.n	8008a90 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a96:	461a      	mov	r2, r3
 8008a98:	2300      	movs	r3, #0
 8008a9a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008aa2:	461a      	mov	r2, r3
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008aae:	461a      	mov	r2, r3
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	613b      	str	r3, [r7, #16]
 8008ab8:	e043      	b.n	8008b42 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008aba:	693b      	ldr	r3, [r7, #16]
 8008abc:	015a      	lsls	r2, r3, #5
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	4413      	add	r3, r2
 8008ac2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008acc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ad0:	d118      	bne.n	8008b04 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8008ad2:	693b      	ldr	r3, [r7, #16]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d10a      	bne.n	8008aee <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008ad8:	693b      	ldr	r3, [r7, #16]
 8008ada:	015a      	lsls	r2, r3, #5
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	4413      	add	r3, r2
 8008ae0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ae4:	461a      	mov	r2, r3
 8008ae6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008aea:	6013      	str	r3, [r2, #0]
 8008aec:	e013      	b.n	8008b16 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008aee:	693b      	ldr	r3, [r7, #16]
 8008af0:	015a      	lsls	r2, r3, #5
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	4413      	add	r3, r2
 8008af6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008afa:	461a      	mov	r2, r3
 8008afc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008b00:	6013      	str	r3, [r2, #0]
 8008b02:	e008      	b.n	8008b16 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008b04:	693b      	ldr	r3, [r7, #16]
 8008b06:	015a      	lsls	r2, r3, #5
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	4413      	add	r3, r2
 8008b0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b10:	461a      	mov	r2, r3
 8008b12:	2300      	movs	r3, #0
 8008b14:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008b16:	693b      	ldr	r3, [r7, #16]
 8008b18:	015a      	lsls	r2, r3, #5
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	4413      	add	r3, r2
 8008b1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b22:	461a      	mov	r2, r3
 8008b24:	2300      	movs	r3, #0
 8008b26:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008b28:	693b      	ldr	r3, [r7, #16]
 8008b2a:	015a      	lsls	r2, r3, #5
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	4413      	add	r3, r2
 8008b30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b34:	461a      	mov	r2, r3
 8008b36:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008b3a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008b3c:	693b      	ldr	r3, [r7, #16]
 8008b3e:	3301      	adds	r3, #1
 8008b40:	613b      	str	r3, [r7, #16]
 8008b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b44:	693a      	ldr	r2, [r7, #16]
 8008b46:	429a      	cmp	r2, r3
 8008b48:	d3b7      	bcc.n	8008aba <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	613b      	str	r3, [r7, #16]
 8008b4e:	e043      	b.n	8008bd8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008b50:	693b      	ldr	r3, [r7, #16]
 8008b52:	015a      	lsls	r2, r3, #5
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	4413      	add	r3, r2
 8008b58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008b62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008b66:	d118      	bne.n	8008b9a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8008b68:	693b      	ldr	r3, [r7, #16]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d10a      	bne.n	8008b84 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008b6e:	693b      	ldr	r3, [r7, #16]
 8008b70:	015a      	lsls	r2, r3, #5
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	4413      	add	r3, r2
 8008b76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b7a:	461a      	mov	r2, r3
 8008b7c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008b80:	6013      	str	r3, [r2, #0]
 8008b82:	e013      	b.n	8008bac <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008b84:	693b      	ldr	r3, [r7, #16]
 8008b86:	015a      	lsls	r2, r3, #5
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	4413      	add	r3, r2
 8008b8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b90:	461a      	mov	r2, r3
 8008b92:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008b96:	6013      	str	r3, [r2, #0]
 8008b98:	e008      	b.n	8008bac <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008b9a:	693b      	ldr	r3, [r7, #16]
 8008b9c:	015a      	lsls	r2, r3, #5
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	4413      	add	r3, r2
 8008ba2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ba6:	461a      	mov	r2, r3
 8008ba8:	2300      	movs	r3, #0
 8008baa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008bac:	693b      	ldr	r3, [r7, #16]
 8008bae:	015a      	lsls	r2, r3, #5
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	4413      	add	r3, r2
 8008bb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bb8:	461a      	mov	r2, r3
 8008bba:	2300      	movs	r3, #0
 8008bbc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008bbe:	693b      	ldr	r3, [r7, #16]
 8008bc0:	015a      	lsls	r2, r3, #5
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	4413      	add	r3, r2
 8008bc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bca:	461a      	mov	r2, r3
 8008bcc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008bd0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008bd2:	693b      	ldr	r3, [r7, #16]
 8008bd4:	3301      	adds	r3, #1
 8008bd6:	613b      	str	r3, [r7, #16]
 8008bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bda:	693a      	ldr	r2, [r7, #16]
 8008bdc:	429a      	cmp	r2, r3
 8008bde:	d3b7      	bcc.n	8008b50 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008be6:	691b      	ldr	r3, [r3, #16]
 8008be8:	68fa      	ldr	r2, [r7, #12]
 8008bea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008bee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008bf2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008c00:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d105      	bne.n	8008c14 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	699b      	ldr	r3, [r3, #24]
 8008c0c:	f043 0210 	orr.w	r2, r3, #16
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	699a      	ldr	r2, [r3, #24]
 8008c18:	4b0e      	ldr	r3, [pc, #56]	; (8008c54 <USB_DevInit+0x2b4>)
 8008c1a:	4313      	orrs	r3, r2
 8008c1c:	687a      	ldr	r2, [r7, #4]
 8008c1e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008c20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d005      	beq.n	8008c32 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	699b      	ldr	r3, [r3, #24]
 8008c2a:	f043 0208 	orr.w	r2, r3, #8
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008c32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c34:	2b01      	cmp	r3, #1
 8008c36:	d105      	bne.n	8008c44 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	699a      	ldr	r2, [r3, #24]
 8008c3c:	4b06      	ldr	r3, [pc, #24]	; (8008c58 <USB_DevInit+0x2b8>)
 8008c3e:	4313      	orrs	r3, r2
 8008c40:	687a      	ldr	r2, [r7, #4]
 8008c42:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008c44:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	3718      	adds	r7, #24
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008c50:	b004      	add	sp, #16
 8008c52:	4770      	bx	lr
 8008c54:	803c3800 	.word	0x803c3800
 8008c58:	40000004 	.word	0x40000004

08008c5c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b085      	sub	sp, #20
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
 8008c64:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008c66:	2300      	movs	r3, #0
 8008c68:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	3301      	adds	r3, #1
 8008c6e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	4a13      	ldr	r2, [pc, #76]	; (8008cc0 <USB_FlushTxFifo+0x64>)
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d901      	bls.n	8008c7c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008c78:	2303      	movs	r3, #3
 8008c7a:	e01b      	b.n	8008cb4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	691b      	ldr	r3, [r3, #16]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	daf2      	bge.n	8008c6a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008c84:	2300      	movs	r3, #0
 8008c86:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	019b      	lsls	r3, r3, #6
 8008c8c:	f043 0220 	orr.w	r2, r3, #32
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	3301      	adds	r3, #1
 8008c98:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	4a08      	ldr	r2, [pc, #32]	; (8008cc0 <USB_FlushTxFifo+0x64>)
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d901      	bls.n	8008ca6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008ca2:	2303      	movs	r3, #3
 8008ca4:	e006      	b.n	8008cb4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	691b      	ldr	r3, [r3, #16]
 8008caa:	f003 0320 	and.w	r3, r3, #32
 8008cae:	2b20      	cmp	r3, #32
 8008cb0:	d0f0      	beq.n	8008c94 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008cb2:	2300      	movs	r3, #0
}
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	3714      	adds	r7, #20
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbe:	4770      	bx	lr
 8008cc0:	00030d40 	.word	0x00030d40

08008cc4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	b085      	sub	sp, #20
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008ccc:	2300      	movs	r3, #0
 8008cce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	3301      	adds	r3, #1
 8008cd4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	4a11      	ldr	r2, [pc, #68]	; (8008d20 <USB_FlushRxFifo+0x5c>)
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d901      	bls.n	8008ce2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008cde:	2303      	movs	r3, #3
 8008ce0:	e018      	b.n	8008d14 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	691b      	ldr	r3, [r3, #16]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	daf2      	bge.n	8008cd0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008cea:	2300      	movs	r3, #0
 8008cec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2210      	movs	r2, #16
 8008cf2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	3301      	adds	r3, #1
 8008cf8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	4a08      	ldr	r2, [pc, #32]	; (8008d20 <USB_FlushRxFifo+0x5c>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d901      	bls.n	8008d06 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008d02:	2303      	movs	r3, #3
 8008d04:	e006      	b.n	8008d14 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	691b      	ldr	r3, [r3, #16]
 8008d0a:	f003 0310 	and.w	r3, r3, #16
 8008d0e:	2b10      	cmp	r3, #16
 8008d10:	d0f0      	beq.n	8008cf4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008d12:	2300      	movs	r3, #0
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	3714      	adds	r7, #20
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1e:	4770      	bx	lr
 8008d20:	00030d40 	.word	0x00030d40

08008d24 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008d24:	b480      	push	{r7}
 8008d26:	b085      	sub	sp, #20
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
 8008d2c:	460b      	mov	r3, r1
 8008d2e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d3a:	681a      	ldr	r2, [r3, #0]
 8008d3c:	78fb      	ldrb	r3, [r7, #3]
 8008d3e:	68f9      	ldr	r1, [r7, #12]
 8008d40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008d44:	4313      	orrs	r3, r2
 8008d46:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008d48:	2300      	movs	r3, #0
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	3714      	adds	r7, #20
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d54:	4770      	bx	lr

08008d56 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008d56:	b480      	push	{r7}
 8008d58:	b085      	sub	sp, #20
 8008d5a:	af00      	add	r7, sp, #0
 8008d5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	68fa      	ldr	r2, [r7, #12]
 8008d6c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008d70:	f023 0303 	bic.w	r3, r3, #3
 8008d74:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d7c:	685b      	ldr	r3, [r3, #4]
 8008d7e:	68fa      	ldr	r2, [r7, #12]
 8008d80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d84:	f043 0302 	orr.w	r3, r3, #2
 8008d88:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008d8a:	2300      	movs	r3, #0
}
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	3714      	adds	r7, #20
 8008d90:	46bd      	mov	sp, r7
 8008d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d96:	4770      	bx	lr

08008d98 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008d98:	b480      	push	{r7}
 8008d9a:	b083      	sub	sp, #12
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	695b      	ldr	r3, [r3, #20]
 8008da4:	f003 0301 	and.w	r3, r3, #1
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	370c      	adds	r7, #12
 8008dac:	46bd      	mov	sp, r7
 8008dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db2:	4770      	bx	lr

08008db4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008db4:	b480      	push	{r7}
 8008db6:	b085      	sub	sp, #20
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	3301      	adds	r3, #1
 8008dc4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	4a13      	ldr	r2, [pc, #76]	; (8008e18 <USB_CoreReset+0x64>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d901      	bls.n	8008dd2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008dce:	2303      	movs	r3, #3
 8008dd0:	e01b      	b.n	8008e0a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	691b      	ldr	r3, [r3, #16]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	daf2      	bge.n	8008dc0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	691b      	ldr	r3, [r3, #16]
 8008de2:	f043 0201 	orr.w	r2, r3, #1
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	3301      	adds	r3, #1
 8008dee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	4a09      	ldr	r2, [pc, #36]	; (8008e18 <USB_CoreReset+0x64>)
 8008df4:	4293      	cmp	r3, r2
 8008df6:	d901      	bls.n	8008dfc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008df8:	2303      	movs	r3, #3
 8008dfa:	e006      	b.n	8008e0a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	691b      	ldr	r3, [r3, #16]
 8008e00:	f003 0301 	and.w	r3, r3, #1
 8008e04:	2b01      	cmp	r3, #1
 8008e06:	d0f0      	beq.n	8008dea <USB_CoreReset+0x36>

  return HAL_OK;
 8008e08:	2300      	movs	r3, #0
}
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	3714      	adds	r7, #20
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e14:	4770      	bx	lr
 8008e16:	bf00      	nop
 8008e18:	00030d40 	.word	0x00030d40

08008e1c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008e1c:	b480      	push	{r7}
 8008e1e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8008e20:	bf00      	nop
 8008e22:	46bd      	mov	sp, r7
 8008e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e28:	4770      	bx	lr
	...

08008e2c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008e2c:	b480      	push	{r7}
 8008e2e:	b085      	sub	sp, #20
 8008e30:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e32:	f3ef 8305 	mrs	r3, IPSR
 8008e36:	60bb      	str	r3, [r7, #8]
  return(result);
 8008e38:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d10f      	bne.n	8008e5e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e3e:	f3ef 8310 	mrs	r3, PRIMASK
 8008e42:	607b      	str	r3, [r7, #4]
  return(result);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d105      	bne.n	8008e56 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008e4a:	f3ef 8311 	mrs	r3, BASEPRI
 8008e4e:	603b      	str	r3, [r7, #0]
  return(result);
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d007      	beq.n	8008e66 <osKernelInitialize+0x3a>
 8008e56:	4b0e      	ldr	r3, [pc, #56]	; (8008e90 <osKernelInitialize+0x64>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	2b02      	cmp	r3, #2
 8008e5c:	d103      	bne.n	8008e66 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8008e5e:	f06f 0305 	mvn.w	r3, #5
 8008e62:	60fb      	str	r3, [r7, #12]
 8008e64:	e00c      	b.n	8008e80 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008e66:	4b0a      	ldr	r3, [pc, #40]	; (8008e90 <osKernelInitialize+0x64>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d105      	bne.n	8008e7a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008e6e:	4b08      	ldr	r3, [pc, #32]	; (8008e90 <osKernelInitialize+0x64>)
 8008e70:	2201      	movs	r2, #1
 8008e72:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008e74:	2300      	movs	r3, #0
 8008e76:	60fb      	str	r3, [r7, #12]
 8008e78:	e002      	b.n	8008e80 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8008e7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008e7e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008e80:	68fb      	ldr	r3, [r7, #12]
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	3714      	adds	r7, #20
 8008e86:	46bd      	mov	sp, r7
 8008e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8c:	4770      	bx	lr
 8008e8e:	bf00      	nop
 8008e90:	20006f34 	.word	0x20006f34

08008e94 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b084      	sub	sp, #16
 8008e98:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e9a:	f3ef 8305 	mrs	r3, IPSR
 8008e9e:	60bb      	str	r3, [r7, #8]
  return(result);
 8008ea0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d10f      	bne.n	8008ec6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ea6:	f3ef 8310 	mrs	r3, PRIMASK
 8008eaa:	607b      	str	r3, [r7, #4]
  return(result);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d105      	bne.n	8008ebe <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008eb2:	f3ef 8311 	mrs	r3, BASEPRI
 8008eb6:	603b      	str	r3, [r7, #0]
  return(result);
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d007      	beq.n	8008ece <osKernelStart+0x3a>
 8008ebe:	4b0f      	ldr	r3, [pc, #60]	; (8008efc <osKernelStart+0x68>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	2b02      	cmp	r3, #2
 8008ec4:	d103      	bne.n	8008ece <osKernelStart+0x3a>
    stat = osErrorISR;
 8008ec6:	f06f 0305 	mvn.w	r3, #5
 8008eca:	60fb      	str	r3, [r7, #12]
 8008ecc:	e010      	b.n	8008ef0 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008ece:	4b0b      	ldr	r3, [pc, #44]	; (8008efc <osKernelStart+0x68>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	2b01      	cmp	r3, #1
 8008ed4:	d109      	bne.n	8008eea <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008ed6:	f7ff ffa1 	bl	8008e1c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008eda:	4b08      	ldr	r3, [pc, #32]	; (8008efc <osKernelStart+0x68>)
 8008edc:	2202      	movs	r2, #2
 8008ede:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008ee0:	f001 f8ca 	bl	800a078 <vTaskStartScheduler>
      stat = osOK;
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	60fb      	str	r3, [r7, #12]
 8008ee8:	e002      	b.n	8008ef0 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8008eea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008eee:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008ef0:	68fb      	ldr	r3, [r7, #12]
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	3710      	adds	r7, #16
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}
 8008efa:	bf00      	nop
 8008efc:	20006f34 	.word	0x20006f34

08008f00 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b090      	sub	sp, #64	; 0x40
 8008f04:	af04      	add	r7, sp, #16
 8008f06:	60f8      	str	r0, [r7, #12]
 8008f08:	60b9      	str	r1, [r7, #8]
 8008f0a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f10:	f3ef 8305 	mrs	r3, IPSR
 8008f14:	61fb      	str	r3, [r7, #28]
  return(result);
 8008f16:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	f040 808f 	bne.w	800903c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f1e:	f3ef 8310 	mrs	r3, PRIMASK
 8008f22:	61bb      	str	r3, [r7, #24]
  return(result);
 8008f24:	69bb      	ldr	r3, [r7, #24]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d105      	bne.n	8008f36 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008f2a:	f3ef 8311 	mrs	r3, BASEPRI
 8008f2e:	617b      	str	r3, [r7, #20]
  return(result);
 8008f30:	697b      	ldr	r3, [r7, #20]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d003      	beq.n	8008f3e <osThreadNew+0x3e>
 8008f36:	4b44      	ldr	r3, [pc, #272]	; (8009048 <osThreadNew+0x148>)
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	2b02      	cmp	r3, #2
 8008f3c:	d07e      	beq.n	800903c <osThreadNew+0x13c>
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d07b      	beq.n	800903c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8008f44:	2380      	movs	r3, #128	; 0x80
 8008f46:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8008f48:	2318      	movs	r3, #24
 8008f4a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8008f50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008f54:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d045      	beq.n	8008fe8 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d002      	beq.n	8008f6a <osThreadNew+0x6a>
        name = attr->name;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	699b      	ldr	r3, [r3, #24]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d002      	beq.n	8008f78 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	699b      	ldr	r3, [r3, #24]
 8008f76:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d008      	beq.n	8008f90 <osThreadNew+0x90>
 8008f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f80:	2b38      	cmp	r3, #56	; 0x38
 8008f82:	d805      	bhi.n	8008f90 <osThreadNew+0x90>
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	685b      	ldr	r3, [r3, #4]
 8008f88:	f003 0301 	and.w	r3, r3, #1
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d001      	beq.n	8008f94 <osThreadNew+0x94>
        return (NULL);
 8008f90:	2300      	movs	r3, #0
 8008f92:	e054      	b.n	800903e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	695b      	ldr	r3, [r3, #20]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d003      	beq.n	8008fa4 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	695b      	ldr	r3, [r3, #20]
 8008fa0:	089b      	lsrs	r3, r3, #2
 8008fa2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	689b      	ldr	r3, [r3, #8]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d00e      	beq.n	8008fca <osThreadNew+0xca>
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	68db      	ldr	r3, [r3, #12]
 8008fb0:	2ba7      	cmp	r3, #167	; 0xa7
 8008fb2:	d90a      	bls.n	8008fca <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d006      	beq.n	8008fca <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	695b      	ldr	r3, [r3, #20]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d002      	beq.n	8008fca <osThreadNew+0xca>
        mem = 1;
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	623b      	str	r3, [r7, #32]
 8008fc8:	e010      	b.n	8008fec <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	689b      	ldr	r3, [r3, #8]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d10c      	bne.n	8008fec <osThreadNew+0xec>
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	68db      	ldr	r3, [r3, #12]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d108      	bne.n	8008fec <osThreadNew+0xec>
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	691b      	ldr	r3, [r3, #16]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d104      	bne.n	8008fec <osThreadNew+0xec>
          mem = 0;
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	623b      	str	r3, [r7, #32]
 8008fe6:	e001      	b.n	8008fec <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8008fe8:	2300      	movs	r3, #0
 8008fea:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8008fec:	6a3b      	ldr	r3, [r7, #32]
 8008fee:	2b01      	cmp	r3, #1
 8008ff0:	d110      	bne.n	8009014 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8008ff6:	687a      	ldr	r2, [r7, #4]
 8008ff8:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008ffa:	9202      	str	r2, [sp, #8]
 8008ffc:	9301      	str	r3, [sp, #4]
 8008ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009000:	9300      	str	r3, [sp, #0]
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009006:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009008:	68f8      	ldr	r0, [r7, #12]
 800900a:	f000 fe3f 	bl	8009c8c <xTaskCreateStatic>
 800900e:	4603      	mov	r3, r0
 8009010:	613b      	str	r3, [r7, #16]
 8009012:	e013      	b.n	800903c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8009014:	6a3b      	ldr	r3, [r7, #32]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d110      	bne.n	800903c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800901a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800901c:	b29a      	uxth	r2, r3
 800901e:	f107 0310 	add.w	r3, r7, #16
 8009022:	9301      	str	r3, [sp, #4]
 8009024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009026:	9300      	str	r3, [sp, #0]
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800902c:	68f8      	ldr	r0, [r7, #12]
 800902e:	f000 fe90 	bl	8009d52 <xTaskCreate>
 8009032:	4603      	mov	r3, r0
 8009034:	2b01      	cmp	r3, #1
 8009036:	d001      	beq.n	800903c <osThreadNew+0x13c>
          hTask = NULL;
 8009038:	2300      	movs	r3, #0
 800903a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800903c:	693b      	ldr	r3, [r7, #16]
}
 800903e:	4618      	mov	r0, r3
 8009040:	3730      	adds	r7, #48	; 0x30
 8009042:	46bd      	mov	sp, r7
 8009044:	bd80      	pop	{r7, pc}
 8009046:	bf00      	nop
 8009048:	20006f34 	.word	0x20006f34

0800904c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800904c:	b580      	push	{r7, lr}
 800904e:	b086      	sub	sp, #24
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009054:	f3ef 8305 	mrs	r3, IPSR
 8009058:	613b      	str	r3, [r7, #16]
  return(result);
 800905a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800905c:	2b00      	cmp	r3, #0
 800905e:	d10f      	bne.n	8009080 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009060:	f3ef 8310 	mrs	r3, PRIMASK
 8009064:	60fb      	str	r3, [r7, #12]
  return(result);
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d105      	bne.n	8009078 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800906c:	f3ef 8311 	mrs	r3, BASEPRI
 8009070:	60bb      	str	r3, [r7, #8]
  return(result);
 8009072:	68bb      	ldr	r3, [r7, #8]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d007      	beq.n	8009088 <osDelay+0x3c>
 8009078:	4b0a      	ldr	r3, [pc, #40]	; (80090a4 <osDelay+0x58>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	2b02      	cmp	r3, #2
 800907e:	d103      	bne.n	8009088 <osDelay+0x3c>
    stat = osErrorISR;
 8009080:	f06f 0305 	mvn.w	r3, #5
 8009084:	617b      	str	r3, [r7, #20]
 8009086:	e007      	b.n	8009098 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8009088:	2300      	movs	r3, #0
 800908a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d002      	beq.n	8009098 <osDelay+0x4c>
      vTaskDelay(ticks);
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f000 ffba 	bl	800a00c <vTaskDelay>
    }
  }

  return (stat);
 8009098:	697b      	ldr	r3, [r7, #20]
}
 800909a:	4618      	mov	r0, r3
 800909c:	3718      	adds	r7, #24
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}
 80090a2:	bf00      	nop
 80090a4:	20006f34 	.word	0x20006f34

080090a8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80090a8:	b480      	push	{r7}
 80090aa:	b085      	sub	sp, #20
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	60f8      	str	r0, [r7, #12]
 80090b0:	60b9      	str	r1, [r7, #8]
 80090b2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	4a07      	ldr	r2, [pc, #28]	; (80090d4 <vApplicationGetIdleTaskMemory+0x2c>)
 80090b8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	4a06      	ldr	r2, [pc, #24]	; (80090d8 <vApplicationGetIdleTaskMemory+0x30>)
 80090be:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2280      	movs	r2, #128	; 0x80
 80090c4:	601a      	str	r2, [r3, #0]
}
 80090c6:	bf00      	nop
 80090c8:	3714      	adds	r7, #20
 80090ca:	46bd      	mov	sp, r7
 80090cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d0:	4770      	bx	lr
 80090d2:	bf00      	nop
 80090d4:	20006f38 	.word	0x20006f38
 80090d8:	20006fe0 	.word	0x20006fe0

080090dc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80090dc:	b480      	push	{r7}
 80090de:	b085      	sub	sp, #20
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	60f8      	str	r0, [r7, #12]
 80090e4:	60b9      	str	r1, [r7, #8]
 80090e6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	4a07      	ldr	r2, [pc, #28]	; (8009108 <vApplicationGetTimerTaskMemory+0x2c>)
 80090ec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	4a06      	ldr	r2, [pc, #24]	; (800910c <vApplicationGetTimerTaskMemory+0x30>)
 80090f2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80090fa:	601a      	str	r2, [r3, #0]
}
 80090fc:	bf00      	nop
 80090fe:	3714      	adds	r7, #20
 8009100:	46bd      	mov	sp, r7
 8009102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009106:	4770      	bx	lr
 8009108:	200071e0 	.word	0x200071e0
 800910c:	20007288 	.word	0x20007288

08009110 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009110:	b480      	push	{r7}
 8009112:	b083      	sub	sp, #12
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f103 0208 	add.w	r2, r3, #8
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009128:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f103 0208 	add.w	r2, r3, #8
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f103 0208 	add.w	r2, r3, #8
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2200      	movs	r2, #0
 8009142:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009144:	bf00      	nop
 8009146:	370c      	adds	r7, #12
 8009148:	46bd      	mov	sp, r7
 800914a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914e:	4770      	bx	lr

08009150 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009150:	b480      	push	{r7}
 8009152:	b083      	sub	sp, #12
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2200      	movs	r2, #0
 800915c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800915e:	bf00      	nop
 8009160:	370c      	adds	r7, #12
 8009162:	46bd      	mov	sp, r7
 8009164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009168:	4770      	bx	lr

0800916a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800916a:	b480      	push	{r7}
 800916c:	b085      	sub	sp, #20
 800916e:	af00      	add	r7, sp, #0
 8009170:	6078      	str	r0, [r7, #4]
 8009172:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	685b      	ldr	r3, [r3, #4]
 8009178:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	68fa      	ldr	r2, [r7, #12]
 800917e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	689a      	ldr	r2, [r3, #8]
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	689b      	ldr	r3, [r3, #8]
 800918c:	683a      	ldr	r2, [r7, #0]
 800918e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	683a      	ldr	r2, [r7, #0]
 8009194:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	687a      	ldr	r2, [r7, #4]
 800919a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	1c5a      	adds	r2, r3, #1
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	601a      	str	r2, [r3, #0]
}
 80091a6:	bf00      	nop
 80091a8:	3714      	adds	r7, #20
 80091aa:	46bd      	mov	sp, r7
 80091ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b0:	4770      	bx	lr

080091b2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80091b2:	b480      	push	{r7}
 80091b4:	b085      	sub	sp, #20
 80091b6:	af00      	add	r7, sp, #0
 80091b8:	6078      	str	r0, [r7, #4]
 80091ba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80091c8:	d103      	bne.n	80091d2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	691b      	ldr	r3, [r3, #16]
 80091ce:	60fb      	str	r3, [r7, #12]
 80091d0:	e00c      	b.n	80091ec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	3308      	adds	r3, #8
 80091d6:	60fb      	str	r3, [r7, #12]
 80091d8:	e002      	b.n	80091e0 <vListInsert+0x2e>
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	685b      	ldr	r3, [r3, #4]
 80091de:	60fb      	str	r3, [r7, #12]
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	685b      	ldr	r3, [r3, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	68ba      	ldr	r2, [r7, #8]
 80091e8:	429a      	cmp	r2, r3
 80091ea:	d2f6      	bcs.n	80091da <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	685a      	ldr	r2, [r3, #4]
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	685b      	ldr	r3, [r3, #4]
 80091f8:	683a      	ldr	r2, [r7, #0]
 80091fa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	68fa      	ldr	r2, [r7, #12]
 8009200:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	683a      	ldr	r2, [r7, #0]
 8009206:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	687a      	ldr	r2, [r7, #4]
 800920c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	1c5a      	adds	r2, r3, #1
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	601a      	str	r2, [r3, #0]
}
 8009218:	bf00      	nop
 800921a:	3714      	adds	r7, #20
 800921c:	46bd      	mov	sp, r7
 800921e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009222:	4770      	bx	lr

08009224 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009224:	b480      	push	{r7}
 8009226:	b085      	sub	sp, #20
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	691b      	ldr	r3, [r3, #16]
 8009230:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	685b      	ldr	r3, [r3, #4]
 8009236:	687a      	ldr	r2, [r7, #4]
 8009238:	6892      	ldr	r2, [r2, #8]
 800923a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	689b      	ldr	r3, [r3, #8]
 8009240:	687a      	ldr	r2, [r7, #4]
 8009242:	6852      	ldr	r2, [r2, #4]
 8009244:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	685b      	ldr	r3, [r3, #4]
 800924a:	687a      	ldr	r2, [r7, #4]
 800924c:	429a      	cmp	r2, r3
 800924e:	d103      	bne.n	8009258 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	689a      	ldr	r2, [r3, #8]
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2200      	movs	r2, #0
 800925c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	1e5a      	subs	r2, r3, #1
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	681b      	ldr	r3, [r3, #0]
}
 800926c:	4618      	mov	r0, r3
 800926e:	3714      	adds	r7, #20
 8009270:	46bd      	mov	sp, r7
 8009272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009276:	4770      	bx	lr

08009278 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b084      	sub	sp, #16
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
 8009280:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d10c      	bne.n	80092a6 <xQueueGenericReset+0x2e>
	__asm volatile
 800928c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009290:	b672      	cpsid	i
 8009292:	f383 8811 	msr	BASEPRI, r3
 8009296:	f3bf 8f6f 	isb	sy
 800929a:	f3bf 8f4f 	dsb	sy
 800929e:	b662      	cpsie	i
 80092a0:	60bb      	str	r3, [r7, #8]
}
 80092a2:	bf00      	nop
 80092a4:	e7fe      	b.n	80092a4 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80092a6:	f002 f8d1 	bl	800b44c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	681a      	ldr	r2, [r3, #0]
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092b2:	68f9      	ldr	r1, [r7, #12]
 80092b4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80092b6:	fb01 f303 	mul.w	r3, r1, r3
 80092ba:	441a      	add	r2, r3
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	2200      	movs	r2, #0
 80092c4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	681a      	ldr	r2, [r3, #0]
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	681a      	ldr	r2, [r3, #0]
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092d6:	3b01      	subs	r3, #1
 80092d8:	68f9      	ldr	r1, [r7, #12]
 80092da:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80092dc:	fb01 f303 	mul.w	r3, r1, r3
 80092e0:	441a      	add	r2, r3
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	22ff      	movs	r2, #255	; 0xff
 80092ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	22ff      	movs	r2, #255	; 0xff
 80092f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d114      	bne.n	8009326 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	691b      	ldr	r3, [r3, #16]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d01a      	beq.n	800933a <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	3310      	adds	r3, #16
 8009308:	4618      	mov	r0, r3
 800930a:	f001 f95d 	bl	800a5c8 <xTaskRemoveFromEventList>
 800930e:	4603      	mov	r3, r0
 8009310:	2b00      	cmp	r3, #0
 8009312:	d012      	beq.n	800933a <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009314:	4b0c      	ldr	r3, [pc, #48]	; (8009348 <xQueueGenericReset+0xd0>)
 8009316:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800931a:	601a      	str	r2, [r3, #0]
 800931c:	f3bf 8f4f 	dsb	sy
 8009320:	f3bf 8f6f 	isb	sy
 8009324:	e009      	b.n	800933a <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	3310      	adds	r3, #16
 800932a:	4618      	mov	r0, r3
 800932c:	f7ff fef0 	bl	8009110 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	3324      	adds	r3, #36	; 0x24
 8009334:	4618      	mov	r0, r3
 8009336:	f7ff feeb 	bl	8009110 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800933a:	f002 f8bb 	bl	800b4b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800933e:	2301      	movs	r3, #1
}
 8009340:	4618      	mov	r0, r3
 8009342:	3710      	adds	r7, #16
 8009344:	46bd      	mov	sp, r7
 8009346:	bd80      	pop	{r7, pc}
 8009348:	e000ed04 	.word	0xe000ed04

0800934c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800934c:	b580      	push	{r7, lr}
 800934e:	b08e      	sub	sp, #56	; 0x38
 8009350:	af02      	add	r7, sp, #8
 8009352:	60f8      	str	r0, [r7, #12]
 8009354:	60b9      	str	r1, [r7, #8]
 8009356:	607a      	str	r2, [r7, #4]
 8009358:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d10c      	bne.n	800937a <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8009360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009364:	b672      	cpsid	i
 8009366:	f383 8811 	msr	BASEPRI, r3
 800936a:	f3bf 8f6f 	isb	sy
 800936e:	f3bf 8f4f 	dsb	sy
 8009372:	b662      	cpsie	i
 8009374:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009376:	bf00      	nop
 8009378:	e7fe      	b.n	8009378 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d10c      	bne.n	800939a <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8009380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009384:	b672      	cpsid	i
 8009386:	f383 8811 	msr	BASEPRI, r3
 800938a:	f3bf 8f6f 	isb	sy
 800938e:	f3bf 8f4f 	dsb	sy
 8009392:	b662      	cpsie	i
 8009394:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009396:	bf00      	nop
 8009398:	e7fe      	b.n	8009398 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d002      	beq.n	80093a6 <xQueueGenericCreateStatic+0x5a>
 80093a0:	68bb      	ldr	r3, [r7, #8]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d001      	beq.n	80093aa <xQueueGenericCreateStatic+0x5e>
 80093a6:	2301      	movs	r3, #1
 80093a8:	e000      	b.n	80093ac <xQueueGenericCreateStatic+0x60>
 80093aa:	2300      	movs	r3, #0
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d10c      	bne.n	80093ca <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 80093b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093b4:	b672      	cpsid	i
 80093b6:	f383 8811 	msr	BASEPRI, r3
 80093ba:	f3bf 8f6f 	isb	sy
 80093be:	f3bf 8f4f 	dsb	sy
 80093c2:	b662      	cpsie	i
 80093c4:	623b      	str	r3, [r7, #32]
}
 80093c6:	bf00      	nop
 80093c8:	e7fe      	b.n	80093c8 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d102      	bne.n	80093d6 <xQueueGenericCreateStatic+0x8a>
 80093d0:	68bb      	ldr	r3, [r7, #8]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d101      	bne.n	80093da <xQueueGenericCreateStatic+0x8e>
 80093d6:	2301      	movs	r3, #1
 80093d8:	e000      	b.n	80093dc <xQueueGenericCreateStatic+0x90>
 80093da:	2300      	movs	r3, #0
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d10c      	bne.n	80093fa <xQueueGenericCreateStatic+0xae>
	__asm volatile
 80093e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093e4:	b672      	cpsid	i
 80093e6:	f383 8811 	msr	BASEPRI, r3
 80093ea:	f3bf 8f6f 	isb	sy
 80093ee:	f3bf 8f4f 	dsb	sy
 80093f2:	b662      	cpsie	i
 80093f4:	61fb      	str	r3, [r7, #28]
}
 80093f6:	bf00      	nop
 80093f8:	e7fe      	b.n	80093f8 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80093fa:	2350      	movs	r3, #80	; 0x50
 80093fc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80093fe:	697b      	ldr	r3, [r7, #20]
 8009400:	2b50      	cmp	r3, #80	; 0x50
 8009402:	d00c      	beq.n	800941e <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8009404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009408:	b672      	cpsid	i
 800940a:	f383 8811 	msr	BASEPRI, r3
 800940e:	f3bf 8f6f 	isb	sy
 8009412:	f3bf 8f4f 	dsb	sy
 8009416:	b662      	cpsie	i
 8009418:	61bb      	str	r3, [r7, #24]
}
 800941a:	bf00      	nop
 800941c:	e7fe      	b.n	800941c <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800941e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009426:	2b00      	cmp	r3, #0
 8009428:	d00d      	beq.n	8009446 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800942a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800942c:	2201      	movs	r2, #1
 800942e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009432:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009438:	9300      	str	r3, [sp, #0]
 800943a:	4613      	mov	r3, r2
 800943c:	687a      	ldr	r2, [r7, #4]
 800943e:	68b9      	ldr	r1, [r7, #8]
 8009440:	68f8      	ldr	r0, [r7, #12]
 8009442:	f000 f805 	bl	8009450 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009448:	4618      	mov	r0, r3
 800944a:	3730      	adds	r7, #48	; 0x30
 800944c:	46bd      	mov	sp, r7
 800944e:	bd80      	pop	{r7, pc}

08009450 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b084      	sub	sp, #16
 8009454:	af00      	add	r7, sp, #0
 8009456:	60f8      	str	r0, [r7, #12]
 8009458:	60b9      	str	r1, [r7, #8]
 800945a:	607a      	str	r2, [r7, #4]
 800945c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800945e:	68bb      	ldr	r3, [r7, #8]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d103      	bne.n	800946c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009464:	69bb      	ldr	r3, [r7, #24]
 8009466:	69ba      	ldr	r2, [r7, #24]
 8009468:	601a      	str	r2, [r3, #0]
 800946a:	e002      	b.n	8009472 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800946c:	69bb      	ldr	r3, [r7, #24]
 800946e:	687a      	ldr	r2, [r7, #4]
 8009470:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009472:	69bb      	ldr	r3, [r7, #24]
 8009474:	68fa      	ldr	r2, [r7, #12]
 8009476:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009478:	69bb      	ldr	r3, [r7, #24]
 800947a:	68ba      	ldr	r2, [r7, #8]
 800947c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800947e:	2101      	movs	r1, #1
 8009480:	69b8      	ldr	r0, [r7, #24]
 8009482:	f7ff fef9 	bl	8009278 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009486:	69bb      	ldr	r3, [r7, #24]
 8009488:	78fa      	ldrb	r2, [r7, #3]
 800948a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800948e:	bf00      	nop
 8009490:	3710      	adds	r7, #16
 8009492:	46bd      	mov	sp, r7
 8009494:	bd80      	pop	{r7, pc}
	...

08009498 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b08e      	sub	sp, #56	; 0x38
 800949c:	af00      	add	r7, sp, #0
 800949e:	60f8      	str	r0, [r7, #12]
 80094a0:	60b9      	str	r1, [r7, #8]
 80094a2:	607a      	str	r2, [r7, #4]
 80094a4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80094a6:	2300      	movs	r3, #0
 80094a8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80094ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d10c      	bne.n	80094ce <xQueueGenericSend+0x36>
	__asm volatile
 80094b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094b8:	b672      	cpsid	i
 80094ba:	f383 8811 	msr	BASEPRI, r3
 80094be:	f3bf 8f6f 	isb	sy
 80094c2:	f3bf 8f4f 	dsb	sy
 80094c6:	b662      	cpsie	i
 80094c8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80094ca:	bf00      	nop
 80094cc:	e7fe      	b.n	80094cc <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80094ce:	68bb      	ldr	r3, [r7, #8]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d103      	bne.n	80094dc <xQueueGenericSend+0x44>
 80094d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d101      	bne.n	80094e0 <xQueueGenericSend+0x48>
 80094dc:	2301      	movs	r3, #1
 80094de:	e000      	b.n	80094e2 <xQueueGenericSend+0x4a>
 80094e0:	2300      	movs	r3, #0
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d10c      	bne.n	8009500 <xQueueGenericSend+0x68>
	__asm volatile
 80094e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ea:	b672      	cpsid	i
 80094ec:	f383 8811 	msr	BASEPRI, r3
 80094f0:	f3bf 8f6f 	isb	sy
 80094f4:	f3bf 8f4f 	dsb	sy
 80094f8:	b662      	cpsie	i
 80094fa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80094fc:	bf00      	nop
 80094fe:	e7fe      	b.n	80094fe <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	2b02      	cmp	r3, #2
 8009504:	d103      	bne.n	800950e <xQueueGenericSend+0x76>
 8009506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800950a:	2b01      	cmp	r3, #1
 800950c:	d101      	bne.n	8009512 <xQueueGenericSend+0x7a>
 800950e:	2301      	movs	r3, #1
 8009510:	e000      	b.n	8009514 <xQueueGenericSend+0x7c>
 8009512:	2300      	movs	r3, #0
 8009514:	2b00      	cmp	r3, #0
 8009516:	d10c      	bne.n	8009532 <xQueueGenericSend+0x9a>
	__asm volatile
 8009518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800951c:	b672      	cpsid	i
 800951e:	f383 8811 	msr	BASEPRI, r3
 8009522:	f3bf 8f6f 	isb	sy
 8009526:	f3bf 8f4f 	dsb	sy
 800952a:	b662      	cpsie	i
 800952c:	623b      	str	r3, [r7, #32]
}
 800952e:	bf00      	nop
 8009530:	e7fe      	b.n	8009530 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009532:	f001 fa3b 	bl	800a9ac <xTaskGetSchedulerState>
 8009536:	4603      	mov	r3, r0
 8009538:	2b00      	cmp	r3, #0
 800953a:	d102      	bne.n	8009542 <xQueueGenericSend+0xaa>
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d101      	bne.n	8009546 <xQueueGenericSend+0xae>
 8009542:	2301      	movs	r3, #1
 8009544:	e000      	b.n	8009548 <xQueueGenericSend+0xb0>
 8009546:	2300      	movs	r3, #0
 8009548:	2b00      	cmp	r3, #0
 800954a:	d10c      	bne.n	8009566 <xQueueGenericSend+0xce>
	__asm volatile
 800954c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009550:	b672      	cpsid	i
 8009552:	f383 8811 	msr	BASEPRI, r3
 8009556:	f3bf 8f6f 	isb	sy
 800955a:	f3bf 8f4f 	dsb	sy
 800955e:	b662      	cpsie	i
 8009560:	61fb      	str	r3, [r7, #28]
}
 8009562:	bf00      	nop
 8009564:	e7fe      	b.n	8009564 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009566:	f001 ff71 	bl	800b44c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800956a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800956c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800956e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009572:	429a      	cmp	r2, r3
 8009574:	d302      	bcc.n	800957c <xQueueGenericSend+0xe4>
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	2b02      	cmp	r3, #2
 800957a:	d129      	bne.n	80095d0 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800957c:	683a      	ldr	r2, [r7, #0]
 800957e:	68b9      	ldr	r1, [r7, #8]
 8009580:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009582:	f000 fa15 	bl	80099b0 <prvCopyDataToQueue>
 8009586:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800958a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800958c:	2b00      	cmp	r3, #0
 800958e:	d010      	beq.n	80095b2 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009592:	3324      	adds	r3, #36	; 0x24
 8009594:	4618      	mov	r0, r3
 8009596:	f001 f817 	bl	800a5c8 <xTaskRemoveFromEventList>
 800959a:	4603      	mov	r3, r0
 800959c:	2b00      	cmp	r3, #0
 800959e:	d013      	beq.n	80095c8 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80095a0:	4b3f      	ldr	r3, [pc, #252]	; (80096a0 <xQueueGenericSend+0x208>)
 80095a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095a6:	601a      	str	r2, [r3, #0]
 80095a8:	f3bf 8f4f 	dsb	sy
 80095ac:	f3bf 8f6f 	isb	sy
 80095b0:	e00a      	b.n	80095c8 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80095b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d007      	beq.n	80095c8 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80095b8:	4b39      	ldr	r3, [pc, #228]	; (80096a0 <xQueueGenericSend+0x208>)
 80095ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095be:	601a      	str	r2, [r3, #0]
 80095c0:	f3bf 8f4f 	dsb	sy
 80095c4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80095c8:	f001 ff74 	bl	800b4b4 <vPortExitCritical>
				return pdPASS;
 80095cc:	2301      	movs	r3, #1
 80095ce:	e063      	b.n	8009698 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d103      	bne.n	80095de <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80095d6:	f001 ff6d 	bl	800b4b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80095da:	2300      	movs	r3, #0
 80095dc:	e05c      	b.n	8009698 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 80095de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d106      	bne.n	80095f2 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80095e4:	f107 0314 	add.w	r3, r7, #20
 80095e8:	4618      	mov	r0, r3
 80095ea:	f001 f87b 	bl	800a6e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80095ee:	2301      	movs	r3, #1
 80095f0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80095f2:	f001 ff5f 	bl	800b4b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80095f6:	f000 fdb3 	bl	800a160 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80095fa:	f001 ff27 	bl	800b44c <vPortEnterCritical>
 80095fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009600:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009604:	b25b      	sxtb	r3, r3
 8009606:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800960a:	d103      	bne.n	8009614 <xQueueGenericSend+0x17c>
 800960c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800960e:	2200      	movs	r2, #0
 8009610:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009616:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800961a:	b25b      	sxtb	r3, r3
 800961c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009620:	d103      	bne.n	800962a <xQueueGenericSend+0x192>
 8009622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009624:	2200      	movs	r2, #0
 8009626:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800962a:	f001 ff43 	bl	800b4b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800962e:	1d3a      	adds	r2, r7, #4
 8009630:	f107 0314 	add.w	r3, r7, #20
 8009634:	4611      	mov	r1, r2
 8009636:	4618      	mov	r0, r3
 8009638:	f001 f86a 	bl	800a710 <xTaskCheckForTimeOut>
 800963c:	4603      	mov	r3, r0
 800963e:	2b00      	cmp	r3, #0
 8009640:	d124      	bne.n	800968c <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009642:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009644:	f000 faac 	bl	8009ba0 <prvIsQueueFull>
 8009648:	4603      	mov	r3, r0
 800964a:	2b00      	cmp	r3, #0
 800964c:	d018      	beq.n	8009680 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800964e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009650:	3310      	adds	r3, #16
 8009652:	687a      	ldr	r2, [r7, #4]
 8009654:	4611      	mov	r1, r2
 8009656:	4618      	mov	r0, r3
 8009658:	f000 ff62 	bl	800a520 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800965c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800965e:	f000 fa37 	bl	8009ad0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009662:	f000 fd8b 	bl	800a17c <xTaskResumeAll>
 8009666:	4603      	mov	r3, r0
 8009668:	2b00      	cmp	r3, #0
 800966a:	f47f af7c 	bne.w	8009566 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800966e:	4b0c      	ldr	r3, [pc, #48]	; (80096a0 <xQueueGenericSend+0x208>)
 8009670:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009674:	601a      	str	r2, [r3, #0]
 8009676:	f3bf 8f4f 	dsb	sy
 800967a:	f3bf 8f6f 	isb	sy
 800967e:	e772      	b.n	8009566 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009680:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009682:	f000 fa25 	bl	8009ad0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009686:	f000 fd79 	bl	800a17c <xTaskResumeAll>
 800968a:	e76c      	b.n	8009566 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800968c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800968e:	f000 fa1f 	bl	8009ad0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009692:	f000 fd73 	bl	800a17c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009696:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009698:	4618      	mov	r0, r3
 800969a:	3738      	adds	r7, #56	; 0x38
 800969c:	46bd      	mov	sp, r7
 800969e:	bd80      	pop	{r7, pc}
 80096a0:	e000ed04 	.word	0xe000ed04

080096a4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b08e      	sub	sp, #56	; 0x38
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	60f8      	str	r0, [r7, #12]
 80096ac:	60b9      	str	r1, [r7, #8]
 80096ae:	607a      	str	r2, [r7, #4]
 80096b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80096b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d10c      	bne.n	80096d6 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 80096bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096c0:	b672      	cpsid	i
 80096c2:	f383 8811 	msr	BASEPRI, r3
 80096c6:	f3bf 8f6f 	isb	sy
 80096ca:	f3bf 8f4f 	dsb	sy
 80096ce:	b662      	cpsie	i
 80096d0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80096d2:	bf00      	nop
 80096d4:	e7fe      	b.n	80096d4 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80096d6:	68bb      	ldr	r3, [r7, #8]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d103      	bne.n	80096e4 <xQueueGenericSendFromISR+0x40>
 80096dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d101      	bne.n	80096e8 <xQueueGenericSendFromISR+0x44>
 80096e4:	2301      	movs	r3, #1
 80096e6:	e000      	b.n	80096ea <xQueueGenericSendFromISR+0x46>
 80096e8:	2300      	movs	r3, #0
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d10c      	bne.n	8009708 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 80096ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096f2:	b672      	cpsid	i
 80096f4:	f383 8811 	msr	BASEPRI, r3
 80096f8:	f3bf 8f6f 	isb	sy
 80096fc:	f3bf 8f4f 	dsb	sy
 8009700:	b662      	cpsie	i
 8009702:	623b      	str	r3, [r7, #32]
}
 8009704:	bf00      	nop
 8009706:	e7fe      	b.n	8009706 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	2b02      	cmp	r3, #2
 800970c:	d103      	bne.n	8009716 <xQueueGenericSendFromISR+0x72>
 800970e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009712:	2b01      	cmp	r3, #1
 8009714:	d101      	bne.n	800971a <xQueueGenericSendFromISR+0x76>
 8009716:	2301      	movs	r3, #1
 8009718:	e000      	b.n	800971c <xQueueGenericSendFromISR+0x78>
 800971a:	2300      	movs	r3, #0
 800971c:	2b00      	cmp	r3, #0
 800971e:	d10c      	bne.n	800973a <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8009720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009724:	b672      	cpsid	i
 8009726:	f383 8811 	msr	BASEPRI, r3
 800972a:	f3bf 8f6f 	isb	sy
 800972e:	f3bf 8f4f 	dsb	sy
 8009732:	b662      	cpsie	i
 8009734:	61fb      	str	r3, [r7, #28]
}
 8009736:	bf00      	nop
 8009738:	e7fe      	b.n	8009738 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800973a:	f001 ff6f 	bl	800b61c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800973e:	f3ef 8211 	mrs	r2, BASEPRI
 8009742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009746:	b672      	cpsid	i
 8009748:	f383 8811 	msr	BASEPRI, r3
 800974c:	f3bf 8f6f 	isb	sy
 8009750:	f3bf 8f4f 	dsb	sy
 8009754:	b662      	cpsie	i
 8009756:	61ba      	str	r2, [r7, #24]
 8009758:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800975a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800975c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800975e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009760:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009766:	429a      	cmp	r2, r3
 8009768:	d302      	bcc.n	8009770 <xQueueGenericSendFromISR+0xcc>
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	2b02      	cmp	r3, #2
 800976e:	d12c      	bne.n	80097ca <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009772:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009776:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800977a:	683a      	ldr	r2, [r7, #0]
 800977c:	68b9      	ldr	r1, [r7, #8]
 800977e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009780:	f000 f916 	bl	80099b0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009784:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8009788:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800978c:	d112      	bne.n	80097b4 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800978e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009792:	2b00      	cmp	r3, #0
 8009794:	d016      	beq.n	80097c4 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009798:	3324      	adds	r3, #36	; 0x24
 800979a:	4618      	mov	r0, r3
 800979c:	f000 ff14 	bl	800a5c8 <xTaskRemoveFromEventList>
 80097a0:	4603      	mov	r3, r0
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d00e      	beq.n	80097c4 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d00b      	beq.n	80097c4 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2201      	movs	r2, #1
 80097b0:	601a      	str	r2, [r3, #0]
 80097b2:	e007      	b.n	80097c4 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80097b4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80097b8:	3301      	adds	r3, #1
 80097ba:	b2db      	uxtb	r3, r3
 80097bc:	b25a      	sxtb	r2, r3
 80097be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80097c4:	2301      	movs	r3, #1
 80097c6:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80097c8:	e001      	b.n	80097ce <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80097ca:	2300      	movs	r3, #0
 80097cc:	637b      	str	r3, [r7, #52]	; 0x34
 80097ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097d0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80097d2:	693b      	ldr	r3, [r7, #16]
 80097d4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80097d8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80097da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80097dc:	4618      	mov	r0, r3
 80097de:	3738      	adds	r7, #56	; 0x38
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd80      	pop	{r7, pc}

080097e4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b08c      	sub	sp, #48	; 0x30
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	60f8      	str	r0, [r7, #12]
 80097ec:	60b9      	str	r1, [r7, #8]
 80097ee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80097f0:	2300      	movs	r3, #0
 80097f2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80097f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d10c      	bne.n	8009818 <xQueueReceive+0x34>
	__asm volatile
 80097fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009802:	b672      	cpsid	i
 8009804:	f383 8811 	msr	BASEPRI, r3
 8009808:	f3bf 8f6f 	isb	sy
 800980c:	f3bf 8f4f 	dsb	sy
 8009810:	b662      	cpsie	i
 8009812:	623b      	str	r3, [r7, #32]
}
 8009814:	bf00      	nop
 8009816:	e7fe      	b.n	8009816 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d103      	bne.n	8009826 <xQueueReceive+0x42>
 800981e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009822:	2b00      	cmp	r3, #0
 8009824:	d101      	bne.n	800982a <xQueueReceive+0x46>
 8009826:	2301      	movs	r3, #1
 8009828:	e000      	b.n	800982c <xQueueReceive+0x48>
 800982a:	2300      	movs	r3, #0
 800982c:	2b00      	cmp	r3, #0
 800982e:	d10c      	bne.n	800984a <xQueueReceive+0x66>
	__asm volatile
 8009830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009834:	b672      	cpsid	i
 8009836:	f383 8811 	msr	BASEPRI, r3
 800983a:	f3bf 8f6f 	isb	sy
 800983e:	f3bf 8f4f 	dsb	sy
 8009842:	b662      	cpsie	i
 8009844:	61fb      	str	r3, [r7, #28]
}
 8009846:	bf00      	nop
 8009848:	e7fe      	b.n	8009848 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800984a:	f001 f8af 	bl	800a9ac <xTaskGetSchedulerState>
 800984e:	4603      	mov	r3, r0
 8009850:	2b00      	cmp	r3, #0
 8009852:	d102      	bne.n	800985a <xQueueReceive+0x76>
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d101      	bne.n	800985e <xQueueReceive+0x7a>
 800985a:	2301      	movs	r3, #1
 800985c:	e000      	b.n	8009860 <xQueueReceive+0x7c>
 800985e:	2300      	movs	r3, #0
 8009860:	2b00      	cmp	r3, #0
 8009862:	d10c      	bne.n	800987e <xQueueReceive+0x9a>
	__asm volatile
 8009864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009868:	b672      	cpsid	i
 800986a:	f383 8811 	msr	BASEPRI, r3
 800986e:	f3bf 8f6f 	isb	sy
 8009872:	f3bf 8f4f 	dsb	sy
 8009876:	b662      	cpsie	i
 8009878:	61bb      	str	r3, [r7, #24]
}
 800987a:	bf00      	nop
 800987c:	e7fe      	b.n	800987c <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800987e:	f001 fde5 	bl	800b44c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009886:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800988a:	2b00      	cmp	r3, #0
 800988c:	d01f      	beq.n	80098ce <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800988e:	68b9      	ldr	r1, [r7, #8]
 8009890:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009892:	f000 f8f7 	bl	8009a84 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009898:	1e5a      	subs	r2, r3, #1
 800989a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800989c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800989e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098a0:	691b      	ldr	r3, [r3, #16]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d00f      	beq.n	80098c6 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80098a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098a8:	3310      	adds	r3, #16
 80098aa:	4618      	mov	r0, r3
 80098ac:	f000 fe8c 	bl	800a5c8 <xTaskRemoveFromEventList>
 80098b0:	4603      	mov	r3, r0
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d007      	beq.n	80098c6 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80098b6:	4b3d      	ldr	r3, [pc, #244]	; (80099ac <xQueueReceive+0x1c8>)
 80098b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098bc:	601a      	str	r2, [r3, #0]
 80098be:	f3bf 8f4f 	dsb	sy
 80098c2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80098c6:	f001 fdf5 	bl	800b4b4 <vPortExitCritical>
				return pdPASS;
 80098ca:	2301      	movs	r3, #1
 80098cc:	e069      	b.n	80099a2 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d103      	bne.n	80098dc <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80098d4:	f001 fdee 	bl	800b4b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80098d8:	2300      	movs	r3, #0
 80098da:	e062      	b.n	80099a2 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 80098dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d106      	bne.n	80098f0 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80098e2:	f107 0310 	add.w	r3, r7, #16
 80098e6:	4618      	mov	r0, r3
 80098e8:	f000 fefc 	bl	800a6e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80098ec:	2301      	movs	r3, #1
 80098ee:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80098f0:	f001 fde0 	bl	800b4b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80098f4:	f000 fc34 	bl	800a160 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80098f8:	f001 fda8 	bl	800b44c <vPortEnterCritical>
 80098fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009902:	b25b      	sxtb	r3, r3
 8009904:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009908:	d103      	bne.n	8009912 <xQueueReceive+0x12e>
 800990a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800990c:	2200      	movs	r2, #0
 800990e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009914:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009918:	b25b      	sxtb	r3, r3
 800991a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800991e:	d103      	bne.n	8009928 <xQueueReceive+0x144>
 8009920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009922:	2200      	movs	r2, #0
 8009924:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009928:	f001 fdc4 	bl	800b4b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800992c:	1d3a      	adds	r2, r7, #4
 800992e:	f107 0310 	add.w	r3, r7, #16
 8009932:	4611      	mov	r1, r2
 8009934:	4618      	mov	r0, r3
 8009936:	f000 feeb 	bl	800a710 <xTaskCheckForTimeOut>
 800993a:	4603      	mov	r3, r0
 800993c:	2b00      	cmp	r3, #0
 800993e:	d123      	bne.n	8009988 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009940:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009942:	f000 f917 	bl	8009b74 <prvIsQueueEmpty>
 8009946:	4603      	mov	r3, r0
 8009948:	2b00      	cmp	r3, #0
 800994a:	d017      	beq.n	800997c <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800994c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800994e:	3324      	adds	r3, #36	; 0x24
 8009950:	687a      	ldr	r2, [r7, #4]
 8009952:	4611      	mov	r1, r2
 8009954:	4618      	mov	r0, r3
 8009956:	f000 fde3 	bl	800a520 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800995a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800995c:	f000 f8b8 	bl	8009ad0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009960:	f000 fc0c 	bl	800a17c <xTaskResumeAll>
 8009964:	4603      	mov	r3, r0
 8009966:	2b00      	cmp	r3, #0
 8009968:	d189      	bne.n	800987e <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800996a:	4b10      	ldr	r3, [pc, #64]	; (80099ac <xQueueReceive+0x1c8>)
 800996c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009970:	601a      	str	r2, [r3, #0]
 8009972:	f3bf 8f4f 	dsb	sy
 8009976:	f3bf 8f6f 	isb	sy
 800997a:	e780      	b.n	800987e <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800997c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800997e:	f000 f8a7 	bl	8009ad0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009982:	f000 fbfb 	bl	800a17c <xTaskResumeAll>
 8009986:	e77a      	b.n	800987e <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009988:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800998a:	f000 f8a1 	bl	8009ad0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800998e:	f000 fbf5 	bl	800a17c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009992:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009994:	f000 f8ee 	bl	8009b74 <prvIsQueueEmpty>
 8009998:	4603      	mov	r3, r0
 800999a:	2b00      	cmp	r3, #0
 800999c:	f43f af6f 	beq.w	800987e <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80099a0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80099a2:	4618      	mov	r0, r3
 80099a4:	3730      	adds	r7, #48	; 0x30
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bd80      	pop	{r7, pc}
 80099aa:	bf00      	nop
 80099ac:	e000ed04 	.word	0xe000ed04

080099b0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b086      	sub	sp, #24
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	60f8      	str	r0, [r7, #12]
 80099b8:	60b9      	str	r1, [r7, #8]
 80099ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80099bc:	2300      	movs	r3, #0
 80099be:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099c4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d10d      	bne.n	80099ea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d14d      	bne.n	8009a72 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	689b      	ldr	r3, [r3, #8]
 80099da:	4618      	mov	r0, r3
 80099dc:	f001 f804 	bl	800a9e8 <xTaskPriorityDisinherit>
 80099e0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	2200      	movs	r2, #0
 80099e6:	609a      	str	r2, [r3, #8]
 80099e8:	e043      	b.n	8009a72 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d119      	bne.n	8009a24 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	6858      	ldr	r0, [r3, #4]
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099f8:	461a      	mov	r2, r3
 80099fa:	68b9      	ldr	r1, [r7, #8]
 80099fc:	f012 ffd3 	bl	801c9a6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	685a      	ldr	r2, [r3, #4]
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a08:	441a      	add	r2, r3
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	685a      	ldr	r2, [r3, #4]
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	689b      	ldr	r3, [r3, #8]
 8009a16:	429a      	cmp	r2, r3
 8009a18:	d32b      	bcc.n	8009a72 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	681a      	ldr	r2, [r3, #0]
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	605a      	str	r2, [r3, #4]
 8009a22:	e026      	b.n	8009a72 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	68d8      	ldr	r0, [r3, #12]
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a2c:	461a      	mov	r2, r3
 8009a2e:	68b9      	ldr	r1, [r7, #8]
 8009a30:	f012 ffb9 	bl	801c9a6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	68da      	ldr	r2, [r3, #12]
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a3c:	425b      	negs	r3, r3
 8009a3e:	441a      	add	r2, r3
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	68da      	ldr	r2, [r3, #12]
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	429a      	cmp	r2, r3
 8009a4e:	d207      	bcs.n	8009a60 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	689a      	ldr	r2, [r3, #8]
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a58:	425b      	negs	r3, r3
 8009a5a:	441a      	add	r2, r3
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2b02      	cmp	r3, #2
 8009a64:	d105      	bne.n	8009a72 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009a66:	693b      	ldr	r3, [r7, #16]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d002      	beq.n	8009a72 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009a6c:	693b      	ldr	r3, [r7, #16]
 8009a6e:	3b01      	subs	r3, #1
 8009a70:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009a72:	693b      	ldr	r3, [r7, #16]
 8009a74:	1c5a      	adds	r2, r3, #1
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009a7a:	697b      	ldr	r3, [r7, #20]
}
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	3718      	adds	r7, #24
 8009a80:	46bd      	mov	sp, r7
 8009a82:	bd80      	pop	{r7, pc}

08009a84 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b082      	sub	sp, #8
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
 8009a8c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d018      	beq.n	8009ac8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	68da      	ldr	r2, [r3, #12]
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a9e:	441a      	add	r2, r3
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	68da      	ldr	r2, [r3, #12]
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	689b      	ldr	r3, [r3, #8]
 8009aac:	429a      	cmp	r2, r3
 8009aae:	d303      	bcc.n	8009ab8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681a      	ldr	r2, [r3, #0]
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	68d9      	ldr	r1, [r3, #12]
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ac0:	461a      	mov	r2, r3
 8009ac2:	6838      	ldr	r0, [r7, #0]
 8009ac4:	f012 ff6f 	bl	801c9a6 <memcpy>
	}
}
 8009ac8:	bf00      	nop
 8009aca:	3708      	adds	r7, #8
 8009acc:	46bd      	mov	sp, r7
 8009ace:	bd80      	pop	{r7, pc}

08009ad0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b084      	sub	sp, #16
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009ad8:	f001 fcb8 	bl	800b44c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009ae2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009ae4:	e011      	b.n	8009b0a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d012      	beq.n	8009b14 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	3324      	adds	r3, #36	; 0x24
 8009af2:	4618      	mov	r0, r3
 8009af4:	f000 fd68 	bl	800a5c8 <xTaskRemoveFromEventList>
 8009af8:	4603      	mov	r3, r0
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d001      	beq.n	8009b02 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009afe:	f000 fe6d 	bl	800a7dc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009b02:	7bfb      	ldrb	r3, [r7, #15]
 8009b04:	3b01      	subs	r3, #1
 8009b06:	b2db      	uxtb	r3, r3
 8009b08:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009b0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	dce9      	bgt.n	8009ae6 <prvUnlockQueue+0x16>
 8009b12:	e000      	b.n	8009b16 <prvUnlockQueue+0x46>
					break;
 8009b14:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	22ff      	movs	r2, #255	; 0xff
 8009b1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009b1e:	f001 fcc9 	bl	800b4b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009b22:	f001 fc93 	bl	800b44c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009b2c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009b2e:	e011      	b.n	8009b54 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	691b      	ldr	r3, [r3, #16]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d012      	beq.n	8009b5e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	3310      	adds	r3, #16
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	f000 fd43 	bl	800a5c8 <xTaskRemoveFromEventList>
 8009b42:	4603      	mov	r3, r0
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d001      	beq.n	8009b4c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009b48:	f000 fe48 	bl	800a7dc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009b4c:	7bbb      	ldrb	r3, [r7, #14]
 8009b4e:	3b01      	subs	r3, #1
 8009b50:	b2db      	uxtb	r3, r3
 8009b52:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009b54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	dce9      	bgt.n	8009b30 <prvUnlockQueue+0x60>
 8009b5c:	e000      	b.n	8009b60 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009b5e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	22ff      	movs	r2, #255	; 0xff
 8009b64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009b68:	f001 fca4 	bl	800b4b4 <vPortExitCritical>
}
 8009b6c:	bf00      	nop
 8009b6e:	3710      	adds	r7, #16
 8009b70:	46bd      	mov	sp, r7
 8009b72:	bd80      	pop	{r7, pc}

08009b74 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b084      	sub	sp, #16
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009b7c:	f001 fc66 	bl	800b44c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d102      	bne.n	8009b8e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009b88:	2301      	movs	r3, #1
 8009b8a:	60fb      	str	r3, [r7, #12]
 8009b8c:	e001      	b.n	8009b92 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009b8e:	2300      	movs	r3, #0
 8009b90:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009b92:	f001 fc8f 	bl	800b4b4 <vPortExitCritical>

	return xReturn;
 8009b96:	68fb      	ldr	r3, [r7, #12]
}
 8009b98:	4618      	mov	r0, r3
 8009b9a:	3710      	adds	r7, #16
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	bd80      	pop	{r7, pc}

08009ba0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b084      	sub	sp, #16
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009ba8:	f001 fc50 	bl	800b44c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bb4:	429a      	cmp	r2, r3
 8009bb6:	d102      	bne.n	8009bbe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009bb8:	2301      	movs	r3, #1
 8009bba:	60fb      	str	r3, [r7, #12]
 8009bbc:	e001      	b.n	8009bc2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009bc2:	f001 fc77 	bl	800b4b4 <vPortExitCritical>

	return xReturn;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
}
 8009bc8:	4618      	mov	r0, r3
 8009bca:	3710      	adds	r7, #16
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bd80      	pop	{r7, pc}

08009bd0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009bd0:	b480      	push	{r7}
 8009bd2:	b085      	sub	sp, #20
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
 8009bd8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009bda:	2300      	movs	r3, #0
 8009bdc:	60fb      	str	r3, [r7, #12]
 8009bde:	e014      	b.n	8009c0a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009be0:	4a0f      	ldr	r2, [pc, #60]	; (8009c20 <vQueueAddToRegistry+0x50>)
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d10b      	bne.n	8009c04 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009bec:	490c      	ldr	r1, [pc, #48]	; (8009c20 <vQueueAddToRegistry+0x50>)
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	683a      	ldr	r2, [r7, #0]
 8009bf2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009bf6:	4a0a      	ldr	r2, [pc, #40]	; (8009c20 <vQueueAddToRegistry+0x50>)
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	00db      	lsls	r3, r3, #3
 8009bfc:	4413      	add	r3, r2
 8009bfe:	687a      	ldr	r2, [r7, #4]
 8009c00:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009c02:	e006      	b.n	8009c12 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	3301      	adds	r3, #1
 8009c08:	60fb      	str	r3, [r7, #12]
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	2b07      	cmp	r3, #7
 8009c0e:	d9e7      	bls.n	8009be0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009c10:	bf00      	nop
 8009c12:	bf00      	nop
 8009c14:	3714      	adds	r7, #20
 8009c16:	46bd      	mov	sp, r7
 8009c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1c:	4770      	bx	lr
 8009c1e:	bf00      	nop
 8009c20:	20007688 	.word	0x20007688

08009c24 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b086      	sub	sp, #24
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	60f8      	str	r0, [r7, #12]
 8009c2c:	60b9      	str	r1, [r7, #8]
 8009c2e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009c34:	f001 fc0a 	bl	800b44c <vPortEnterCritical>
 8009c38:	697b      	ldr	r3, [r7, #20]
 8009c3a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009c3e:	b25b      	sxtb	r3, r3
 8009c40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c44:	d103      	bne.n	8009c4e <vQueueWaitForMessageRestricted+0x2a>
 8009c46:	697b      	ldr	r3, [r7, #20]
 8009c48:	2200      	movs	r2, #0
 8009c4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009c4e:	697b      	ldr	r3, [r7, #20]
 8009c50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009c54:	b25b      	sxtb	r3, r3
 8009c56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c5a:	d103      	bne.n	8009c64 <vQueueWaitForMessageRestricted+0x40>
 8009c5c:	697b      	ldr	r3, [r7, #20]
 8009c5e:	2200      	movs	r2, #0
 8009c60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009c64:	f001 fc26 	bl	800b4b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009c68:	697b      	ldr	r3, [r7, #20]
 8009c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d106      	bne.n	8009c7e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009c70:	697b      	ldr	r3, [r7, #20]
 8009c72:	3324      	adds	r3, #36	; 0x24
 8009c74:	687a      	ldr	r2, [r7, #4]
 8009c76:	68b9      	ldr	r1, [r7, #8]
 8009c78:	4618      	mov	r0, r3
 8009c7a:	f000 fc77 	bl	800a56c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009c7e:	6978      	ldr	r0, [r7, #20]
 8009c80:	f7ff ff26 	bl	8009ad0 <prvUnlockQueue>
	}
 8009c84:	bf00      	nop
 8009c86:	3718      	adds	r7, #24
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bd80      	pop	{r7, pc}

08009c8c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b08e      	sub	sp, #56	; 0x38
 8009c90:	af04      	add	r7, sp, #16
 8009c92:	60f8      	str	r0, [r7, #12]
 8009c94:	60b9      	str	r1, [r7, #8]
 8009c96:	607a      	str	r2, [r7, #4]
 8009c98:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d10c      	bne.n	8009cba <xTaskCreateStatic+0x2e>
	__asm volatile
 8009ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ca4:	b672      	cpsid	i
 8009ca6:	f383 8811 	msr	BASEPRI, r3
 8009caa:	f3bf 8f6f 	isb	sy
 8009cae:	f3bf 8f4f 	dsb	sy
 8009cb2:	b662      	cpsie	i
 8009cb4:	623b      	str	r3, [r7, #32]
}
 8009cb6:	bf00      	nop
 8009cb8:	e7fe      	b.n	8009cb8 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8009cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d10c      	bne.n	8009cda <xTaskCreateStatic+0x4e>
	__asm volatile
 8009cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cc4:	b672      	cpsid	i
 8009cc6:	f383 8811 	msr	BASEPRI, r3
 8009cca:	f3bf 8f6f 	isb	sy
 8009cce:	f3bf 8f4f 	dsb	sy
 8009cd2:	b662      	cpsie	i
 8009cd4:	61fb      	str	r3, [r7, #28]
}
 8009cd6:	bf00      	nop
 8009cd8:	e7fe      	b.n	8009cd8 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009cda:	23a8      	movs	r3, #168	; 0xa8
 8009cdc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009cde:	693b      	ldr	r3, [r7, #16]
 8009ce0:	2ba8      	cmp	r3, #168	; 0xa8
 8009ce2:	d00c      	beq.n	8009cfe <xTaskCreateStatic+0x72>
	__asm volatile
 8009ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ce8:	b672      	cpsid	i
 8009cea:	f383 8811 	msr	BASEPRI, r3
 8009cee:	f3bf 8f6f 	isb	sy
 8009cf2:	f3bf 8f4f 	dsb	sy
 8009cf6:	b662      	cpsie	i
 8009cf8:	61bb      	str	r3, [r7, #24]
}
 8009cfa:	bf00      	nop
 8009cfc:	e7fe      	b.n	8009cfc <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009cfe:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d01e      	beq.n	8009d44 <xTaskCreateStatic+0xb8>
 8009d06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d01b      	beq.n	8009d44 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d0e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009d14:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d18:	2202      	movs	r2, #2
 8009d1a:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009d1e:	2300      	movs	r3, #0
 8009d20:	9303      	str	r3, [sp, #12]
 8009d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d24:	9302      	str	r3, [sp, #8]
 8009d26:	f107 0314 	add.w	r3, r7, #20
 8009d2a:	9301      	str	r3, [sp, #4]
 8009d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d2e:	9300      	str	r3, [sp, #0]
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	687a      	ldr	r2, [r7, #4]
 8009d34:	68b9      	ldr	r1, [r7, #8]
 8009d36:	68f8      	ldr	r0, [r7, #12]
 8009d38:	f000 f850 	bl	8009ddc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009d3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009d3e:	f000 f8f5 	bl	8009f2c <prvAddNewTaskToReadyList>
 8009d42:	e001      	b.n	8009d48 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8009d44:	2300      	movs	r3, #0
 8009d46:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009d48:	697b      	ldr	r3, [r7, #20]
	}
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	3728      	adds	r7, #40	; 0x28
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}

08009d52 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009d52:	b580      	push	{r7, lr}
 8009d54:	b08c      	sub	sp, #48	; 0x30
 8009d56:	af04      	add	r7, sp, #16
 8009d58:	60f8      	str	r0, [r7, #12]
 8009d5a:	60b9      	str	r1, [r7, #8]
 8009d5c:	603b      	str	r3, [r7, #0]
 8009d5e:	4613      	mov	r3, r2
 8009d60:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009d62:	88fb      	ldrh	r3, [r7, #6]
 8009d64:	009b      	lsls	r3, r3, #2
 8009d66:	4618      	mov	r0, r3
 8009d68:	f001 fc9c 	bl	800b6a4 <pvPortMalloc>
 8009d6c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009d6e:	697b      	ldr	r3, [r7, #20]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d00e      	beq.n	8009d92 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009d74:	20a8      	movs	r0, #168	; 0xa8
 8009d76:	f001 fc95 	bl	800b6a4 <pvPortMalloc>
 8009d7a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009d7c:	69fb      	ldr	r3, [r7, #28]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d003      	beq.n	8009d8a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009d82:	69fb      	ldr	r3, [r7, #28]
 8009d84:	697a      	ldr	r2, [r7, #20]
 8009d86:	631a      	str	r2, [r3, #48]	; 0x30
 8009d88:	e005      	b.n	8009d96 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009d8a:	6978      	ldr	r0, [r7, #20]
 8009d8c:	f001 fd54 	bl	800b838 <vPortFree>
 8009d90:	e001      	b.n	8009d96 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009d92:	2300      	movs	r3, #0
 8009d94:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009d96:	69fb      	ldr	r3, [r7, #28]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d017      	beq.n	8009dcc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009d9c:	69fb      	ldr	r3, [r7, #28]
 8009d9e:	2200      	movs	r2, #0
 8009da0:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009da4:	88fa      	ldrh	r2, [r7, #6]
 8009da6:	2300      	movs	r3, #0
 8009da8:	9303      	str	r3, [sp, #12]
 8009daa:	69fb      	ldr	r3, [r7, #28]
 8009dac:	9302      	str	r3, [sp, #8]
 8009dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009db0:	9301      	str	r3, [sp, #4]
 8009db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009db4:	9300      	str	r3, [sp, #0]
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	68b9      	ldr	r1, [r7, #8]
 8009dba:	68f8      	ldr	r0, [r7, #12]
 8009dbc:	f000 f80e 	bl	8009ddc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009dc0:	69f8      	ldr	r0, [r7, #28]
 8009dc2:	f000 f8b3 	bl	8009f2c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009dc6:	2301      	movs	r3, #1
 8009dc8:	61bb      	str	r3, [r7, #24]
 8009dca:	e002      	b.n	8009dd2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009dcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009dd0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009dd2:	69bb      	ldr	r3, [r7, #24]
	}
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	3720      	adds	r7, #32
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bd80      	pop	{r7, pc}

08009ddc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b088      	sub	sp, #32
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	60f8      	str	r0, [r7, #12]
 8009de4:	60b9      	str	r1, [r7, #8]
 8009de6:	607a      	str	r2, [r7, #4]
 8009de8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dec:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	009b      	lsls	r3, r3, #2
 8009df2:	461a      	mov	r2, r3
 8009df4:	21a5      	movs	r1, #165	; 0xa5
 8009df6:	f012 fca5 	bl	801c744 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009dfe:	6879      	ldr	r1, [r7, #4]
 8009e00:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8009e04:	440b      	add	r3, r1
 8009e06:	009b      	lsls	r3, r3, #2
 8009e08:	4413      	add	r3, r2
 8009e0a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009e0c:	69bb      	ldr	r3, [r7, #24]
 8009e0e:	f023 0307 	bic.w	r3, r3, #7
 8009e12:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009e14:	69bb      	ldr	r3, [r7, #24]
 8009e16:	f003 0307 	and.w	r3, r3, #7
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d00c      	beq.n	8009e38 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8009e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e22:	b672      	cpsid	i
 8009e24:	f383 8811 	msr	BASEPRI, r3
 8009e28:	f3bf 8f6f 	isb	sy
 8009e2c:	f3bf 8f4f 	dsb	sy
 8009e30:	b662      	cpsie	i
 8009e32:	617b      	str	r3, [r7, #20]
}
 8009e34:	bf00      	nop
 8009e36:	e7fe      	b.n	8009e36 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d01f      	beq.n	8009e7e <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009e3e:	2300      	movs	r3, #0
 8009e40:	61fb      	str	r3, [r7, #28]
 8009e42:	e012      	b.n	8009e6a <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009e44:	68ba      	ldr	r2, [r7, #8]
 8009e46:	69fb      	ldr	r3, [r7, #28]
 8009e48:	4413      	add	r3, r2
 8009e4a:	7819      	ldrb	r1, [r3, #0]
 8009e4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e4e:	69fb      	ldr	r3, [r7, #28]
 8009e50:	4413      	add	r3, r2
 8009e52:	3334      	adds	r3, #52	; 0x34
 8009e54:	460a      	mov	r2, r1
 8009e56:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009e58:	68ba      	ldr	r2, [r7, #8]
 8009e5a:	69fb      	ldr	r3, [r7, #28]
 8009e5c:	4413      	add	r3, r2
 8009e5e:	781b      	ldrb	r3, [r3, #0]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d006      	beq.n	8009e72 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009e64:	69fb      	ldr	r3, [r7, #28]
 8009e66:	3301      	adds	r3, #1
 8009e68:	61fb      	str	r3, [r7, #28]
 8009e6a:	69fb      	ldr	r3, [r7, #28]
 8009e6c:	2b0f      	cmp	r3, #15
 8009e6e:	d9e9      	bls.n	8009e44 <prvInitialiseNewTask+0x68>
 8009e70:	e000      	b.n	8009e74 <prvInitialiseNewTask+0x98>
			{
				break;
 8009e72:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e76:	2200      	movs	r2, #0
 8009e78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009e7c:	e003      	b.n	8009e86 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e80:	2200      	movs	r2, #0
 8009e82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e88:	2b37      	cmp	r3, #55	; 0x37
 8009e8a:	d901      	bls.n	8009e90 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009e8c:	2337      	movs	r3, #55	; 0x37
 8009e8e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e94:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e9a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ea4:	3304      	adds	r3, #4
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f7ff f952 	bl	8009150 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eae:	3318      	adds	r3, #24
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	f7ff f94d 	bl	8009150 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009eba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ebe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ec4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ec8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009eca:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ece:	2200      	movs	r2, #0
 8009ed0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ede:	3354      	adds	r3, #84	; 0x54
 8009ee0:	224c      	movs	r2, #76	; 0x4c
 8009ee2:	2100      	movs	r1, #0
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	f012 fc2d 	bl	801c744 <memset>
 8009eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eec:	4a0c      	ldr	r2, [pc, #48]	; (8009f20 <prvInitialiseNewTask+0x144>)
 8009eee:	659a      	str	r2, [r3, #88]	; 0x58
 8009ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ef2:	4a0c      	ldr	r2, [pc, #48]	; (8009f24 <prvInitialiseNewTask+0x148>)
 8009ef4:	65da      	str	r2, [r3, #92]	; 0x5c
 8009ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ef8:	4a0b      	ldr	r2, [pc, #44]	; (8009f28 <prvInitialiseNewTask+0x14c>)
 8009efa:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009efc:	683a      	ldr	r2, [r7, #0]
 8009efe:	68f9      	ldr	r1, [r7, #12]
 8009f00:	69b8      	ldr	r0, [r7, #24]
 8009f02:	f001 f993 	bl	800b22c <pxPortInitialiseStack>
 8009f06:	4602      	mov	r2, r0
 8009f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f0a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d002      	beq.n	8009f18 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f16:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009f18:	bf00      	nop
 8009f1a:	3720      	adds	r7, #32
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bd80      	pop	{r7, pc}
 8009f20:	20010ba8 	.word	0x20010ba8
 8009f24:	20010c10 	.word	0x20010c10
 8009f28:	20010c78 	.word	0x20010c78

08009f2c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b082      	sub	sp, #8
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009f34:	f001 fa8a 	bl	800b44c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009f38:	4b2d      	ldr	r3, [pc, #180]	; (8009ff0 <prvAddNewTaskToReadyList+0xc4>)
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	3301      	adds	r3, #1
 8009f3e:	4a2c      	ldr	r2, [pc, #176]	; (8009ff0 <prvAddNewTaskToReadyList+0xc4>)
 8009f40:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009f42:	4b2c      	ldr	r3, [pc, #176]	; (8009ff4 <prvAddNewTaskToReadyList+0xc8>)
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d109      	bne.n	8009f5e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009f4a:	4a2a      	ldr	r2, [pc, #168]	; (8009ff4 <prvAddNewTaskToReadyList+0xc8>)
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009f50:	4b27      	ldr	r3, [pc, #156]	; (8009ff0 <prvAddNewTaskToReadyList+0xc4>)
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	2b01      	cmp	r3, #1
 8009f56:	d110      	bne.n	8009f7a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009f58:	f000 fc64 	bl	800a824 <prvInitialiseTaskLists>
 8009f5c:	e00d      	b.n	8009f7a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009f5e:	4b26      	ldr	r3, [pc, #152]	; (8009ff8 <prvAddNewTaskToReadyList+0xcc>)
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d109      	bne.n	8009f7a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009f66:	4b23      	ldr	r3, [pc, #140]	; (8009ff4 <prvAddNewTaskToReadyList+0xc8>)
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f70:	429a      	cmp	r2, r3
 8009f72:	d802      	bhi.n	8009f7a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009f74:	4a1f      	ldr	r2, [pc, #124]	; (8009ff4 <prvAddNewTaskToReadyList+0xc8>)
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009f7a:	4b20      	ldr	r3, [pc, #128]	; (8009ffc <prvAddNewTaskToReadyList+0xd0>)
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	3301      	adds	r3, #1
 8009f80:	4a1e      	ldr	r2, [pc, #120]	; (8009ffc <prvAddNewTaskToReadyList+0xd0>)
 8009f82:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009f84:	4b1d      	ldr	r3, [pc, #116]	; (8009ffc <prvAddNewTaskToReadyList+0xd0>)
 8009f86:	681a      	ldr	r2, [r3, #0]
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f90:	4b1b      	ldr	r3, [pc, #108]	; (800a000 <prvAddNewTaskToReadyList+0xd4>)
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	429a      	cmp	r2, r3
 8009f96:	d903      	bls.n	8009fa0 <prvAddNewTaskToReadyList+0x74>
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f9c:	4a18      	ldr	r2, [pc, #96]	; (800a000 <prvAddNewTaskToReadyList+0xd4>)
 8009f9e:	6013      	str	r3, [r2, #0]
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fa4:	4613      	mov	r3, r2
 8009fa6:	009b      	lsls	r3, r3, #2
 8009fa8:	4413      	add	r3, r2
 8009faa:	009b      	lsls	r3, r3, #2
 8009fac:	4a15      	ldr	r2, [pc, #84]	; (800a004 <prvAddNewTaskToReadyList+0xd8>)
 8009fae:	441a      	add	r2, r3
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	3304      	adds	r3, #4
 8009fb4:	4619      	mov	r1, r3
 8009fb6:	4610      	mov	r0, r2
 8009fb8:	f7ff f8d7 	bl	800916a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009fbc:	f001 fa7a 	bl	800b4b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009fc0:	4b0d      	ldr	r3, [pc, #52]	; (8009ff8 <prvAddNewTaskToReadyList+0xcc>)
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d00e      	beq.n	8009fe6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009fc8:	4b0a      	ldr	r3, [pc, #40]	; (8009ff4 <prvAddNewTaskToReadyList+0xc8>)
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fd2:	429a      	cmp	r2, r3
 8009fd4:	d207      	bcs.n	8009fe6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009fd6:	4b0c      	ldr	r3, [pc, #48]	; (800a008 <prvAddNewTaskToReadyList+0xdc>)
 8009fd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fdc:	601a      	str	r2, [r3, #0]
 8009fde:	f3bf 8f4f 	dsb	sy
 8009fe2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009fe6:	bf00      	nop
 8009fe8:	3708      	adds	r7, #8
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bd80      	pop	{r7, pc}
 8009fee:	bf00      	nop
 8009ff0:	20007b9c 	.word	0x20007b9c
 8009ff4:	200076c8 	.word	0x200076c8
 8009ff8:	20007ba8 	.word	0x20007ba8
 8009ffc:	20007bb8 	.word	0x20007bb8
 800a000:	20007ba4 	.word	0x20007ba4
 800a004:	200076cc 	.word	0x200076cc
 800a008:	e000ed04 	.word	0xe000ed04

0800a00c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b084      	sub	sp, #16
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a014:	2300      	movs	r3, #0
 800a016:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d019      	beq.n	800a052 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a01e:	4b14      	ldr	r3, [pc, #80]	; (800a070 <vTaskDelay+0x64>)
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d00c      	beq.n	800a040 <vTaskDelay+0x34>
	__asm volatile
 800a026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a02a:	b672      	cpsid	i
 800a02c:	f383 8811 	msr	BASEPRI, r3
 800a030:	f3bf 8f6f 	isb	sy
 800a034:	f3bf 8f4f 	dsb	sy
 800a038:	b662      	cpsie	i
 800a03a:	60bb      	str	r3, [r7, #8]
}
 800a03c:	bf00      	nop
 800a03e:	e7fe      	b.n	800a03e <vTaskDelay+0x32>
			vTaskSuspendAll();
 800a040:	f000 f88e 	bl	800a160 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a044:	2100      	movs	r1, #0
 800a046:	6878      	ldr	r0, [r7, #4]
 800a048:	f000 fd40 	bl	800aacc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a04c:	f000 f896 	bl	800a17c <xTaskResumeAll>
 800a050:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d107      	bne.n	800a068 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800a058:	4b06      	ldr	r3, [pc, #24]	; (800a074 <vTaskDelay+0x68>)
 800a05a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a05e:	601a      	str	r2, [r3, #0]
 800a060:	f3bf 8f4f 	dsb	sy
 800a064:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a068:	bf00      	nop
 800a06a:	3710      	adds	r7, #16
 800a06c:	46bd      	mov	sp, r7
 800a06e:	bd80      	pop	{r7, pc}
 800a070:	20007bc4 	.word	0x20007bc4
 800a074:	e000ed04 	.word	0xe000ed04

0800a078 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b08a      	sub	sp, #40	; 0x28
 800a07c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a07e:	2300      	movs	r3, #0
 800a080:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a082:	2300      	movs	r3, #0
 800a084:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a086:	463a      	mov	r2, r7
 800a088:	1d39      	adds	r1, r7, #4
 800a08a:	f107 0308 	add.w	r3, r7, #8
 800a08e:	4618      	mov	r0, r3
 800a090:	f7ff f80a 	bl	80090a8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a094:	6839      	ldr	r1, [r7, #0]
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	68ba      	ldr	r2, [r7, #8]
 800a09a:	9202      	str	r2, [sp, #8]
 800a09c:	9301      	str	r3, [sp, #4]
 800a09e:	2300      	movs	r3, #0
 800a0a0:	9300      	str	r3, [sp, #0]
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	460a      	mov	r2, r1
 800a0a6:	4926      	ldr	r1, [pc, #152]	; (800a140 <vTaskStartScheduler+0xc8>)
 800a0a8:	4826      	ldr	r0, [pc, #152]	; (800a144 <vTaskStartScheduler+0xcc>)
 800a0aa:	f7ff fdef 	bl	8009c8c <xTaskCreateStatic>
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	4a25      	ldr	r2, [pc, #148]	; (800a148 <vTaskStartScheduler+0xd0>)
 800a0b2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a0b4:	4b24      	ldr	r3, [pc, #144]	; (800a148 <vTaskStartScheduler+0xd0>)
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d002      	beq.n	800a0c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a0bc:	2301      	movs	r3, #1
 800a0be:	617b      	str	r3, [r7, #20]
 800a0c0:	e001      	b.n	800a0c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a0c6:	697b      	ldr	r3, [r7, #20]
 800a0c8:	2b01      	cmp	r3, #1
 800a0ca:	d102      	bne.n	800a0d2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a0cc:	f000 fd52 	bl	800ab74 <xTimerCreateTimerTask>
 800a0d0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a0d2:	697b      	ldr	r3, [r7, #20]
 800a0d4:	2b01      	cmp	r3, #1
 800a0d6:	d11d      	bne.n	800a114 <vTaskStartScheduler+0x9c>
	__asm volatile
 800a0d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0dc:	b672      	cpsid	i
 800a0de:	f383 8811 	msr	BASEPRI, r3
 800a0e2:	f3bf 8f6f 	isb	sy
 800a0e6:	f3bf 8f4f 	dsb	sy
 800a0ea:	b662      	cpsie	i
 800a0ec:	613b      	str	r3, [r7, #16]
}
 800a0ee:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a0f0:	4b16      	ldr	r3, [pc, #88]	; (800a14c <vTaskStartScheduler+0xd4>)
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	3354      	adds	r3, #84	; 0x54
 800a0f6:	4a16      	ldr	r2, [pc, #88]	; (800a150 <vTaskStartScheduler+0xd8>)
 800a0f8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a0fa:	4b16      	ldr	r3, [pc, #88]	; (800a154 <vTaskStartScheduler+0xdc>)
 800a0fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a100:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a102:	4b15      	ldr	r3, [pc, #84]	; (800a158 <vTaskStartScheduler+0xe0>)
 800a104:	2201      	movs	r2, #1
 800a106:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a108:	4b14      	ldr	r3, [pc, #80]	; (800a15c <vTaskStartScheduler+0xe4>)
 800a10a:	2200      	movs	r2, #0
 800a10c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a10e:	f001 f91f 	bl	800b350 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a112:	e010      	b.n	800a136 <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a114:	697b      	ldr	r3, [r7, #20]
 800a116:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a11a:	d10c      	bne.n	800a136 <vTaskStartScheduler+0xbe>
	__asm volatile
 800a11c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a120:	b672      	cpsid	i
 800a122:	f383 8811 	msr	BASEPRI, r3
 800a126:	f3bf 8f6f 	isb	sy
 800a12a:	f3bf 8f4f 	dsb	sy
 800a12e:	b662      	cpsie	i
 800a130:	60fb      	str	r3, [r7, #12]
}
 800a132:	bf00      	nop
 800a134:	e7fe      	b.n	800a134 <vTaskStartScheduler+0xbc>
}
 800a136:	bf00      	nop
 800a138:	3718      	adds	r7, #24
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bd80      	pop	{r7, pc}
 800a13e:	bf00      	nop
 800a140:	0801d7c8 	.word	0x0801d7c8
 800a144:	0800a7f5 	.word	0x0800a7f5
 800a148:	20007bc0 	.word	0x20007bc0
 800a14c:	200076c8 	.word	0x200076c8
 800a150:	200021d8 	.word	0x200021d8
 800a154:	20007bbc 	.word	0x20007bbc
 800a158:	20007ba8 	.word	0x20007ba8
 800a15c:	20007ba0 	.word	0x20007ba0

0800a160 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a160:	b480      	push	{r7}
 800a162:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a164:	4b04      	ldr	r3, [pc, #16]	; (800a178 <vTaskSuspendAll+0x18>)
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	3301      	adds	r3, #1
 800a16a:	4a03      	ldr	r2, [pc, #12]	; (800a178 <vTaskSuspendAll+0x18>)
 800a16c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800a16e:	bf00      	nop
 800a170:	46bd      	mov	sp, r7
 800a172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a176:	4770      	bx	lr
 800a178:	20007bc4 	.word	0x20007bc4

0800a17c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b084      	sub	sp, #16
 800a180:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a182:	2300      	movs	r3, #0
 800a184:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a186:	2300      	movs	r3, #0
 800a188:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a18a:	4b43      	ldr	r3, [pc, #268]	; (800a298 <xTaskResumeAll+0x11c>)
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d10c      	bne.n	800a1ac <xTaskResumeAll+0x30>
	__asm volatile
 800a192:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a196:	b672      	cpsid	i
 800a198:	f383 8811 	msr	BASEPRI, r3
 800a19c:	f3bf 8f6f 	isb	sy
 800a1a0:	f3bf 8f4f 	dsb	sy
 800a1a4:	b662      	cpsie	i
 800a1a6:	603b      	str	r3, [r7, #0]
}
 800a1a8:	bf00      	nop
 800a1aa:	e7fe      	b.n	800a1aa <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a1ac:	f001 f94e 	bl	800b44c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a1b0:	4b39      	ldr	r3, [pc, #228]	; (800a298 <xTaskResumeAll+0x11c>)
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	3b01      	subs	r3, #1
 800a1b6:	4a38      	ldr	r2, [pc, #224]	; (800a298 <xTaskResumeAll+0x11c>)
 800a1b8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a1ba:	4b37      	ldr	r3, [pc, #220]	; (800a298 <xTaskResumeAll+0x11c>)
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d162      	bne.n	800a288 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a1c2:	4b36      	ldr	r3, [pc, #216]	; (800a29c <xTaskResumeAll+0x120>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d05e      	beq.n	800a288 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a1ca:	e02f      	b.n	800a22c <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a1cc:	4b34      	ldr	r3, [pc, #208]	; (800a2a0 <xTaskResumeAll+0x124>)
 800a1ce:	68db      	ldr	r3, [r3, #12]
 800a1d0:	68db      	ldr	r3, [r3, #12]
 800a1d2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	3318      	adds	r3, #24
 800a1d8:	4618      	mov	r0, r3
 800a1da:	f7ff f823 	bl	8009224 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	3304      	adds	r3, #4
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	f7ff f81e 	bl	8009224 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1ec:	4b2d      	ldr	r3, [pc, #180]	; (800a2a4 <xTaskResumeAll+0x128>)
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	429a      	cmp	r2, r3
 800a1f2:	d903      	bls.n	800a1fc <xTaskResumeAll+0x80>
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1f8:	4a2a      	ldr	r2, [pc, #168]	; (800a2a4 <xTaskResumeAll+0x128>)
 800a1fa:	6013      	str	r3, [r2, #0]
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a200:	4613      	mov	r3, r2
 800a202:	009b      	lsls	r3, r3, #2
 800a204:	4413      	add	r3, r2
 800a206:	009b      	lsls	r3, r3, #2
 800a208:	4a27      	ldr	r2, [pc, #156]	; (800a2a8 <xTaskResumeAll+0x12c>)
 800a20a:	441a      	add	r2, r3
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	3304      	adds	r3, #4
 800a210:	4619      	mov	r1, r3
 800a212:	4610      	mov	r0, r2
 800a214:	f7fe ffa9 	bl	800916a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a21c:	4b23      	ldr	r3, [pc, #140]	; (800a2ac <xTaskResumeAll+0x130>)
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a222:	429a      	cmp	r2, r3
 800a224:	d302      	bcc.n	800a22c <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800a226:	4b22      	ldr	r3, [pc, #136]	; (800a2b0 <xTaskResumeAll+0x134>)
 800a228:	2201      	movs	r2, #1
 800a22a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a22c:	4b1c      	ldr	r3, [pc, #112]	; (800a2a0 <xTaskResumeAll+0x124>)
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d1cb      	bne.n	800a1cc <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d001      	beq.n	800a23e <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a23a:	f000 fb97 	bl	800a96c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a23e:	4b1d      	ldr	r3, [pc, #116]	; (800a2b4 <xTaskResumeAll+0x138>)
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d010      	beq.n	800a26c <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a24a:	f000 f847 	bl	800a2dc <xTaskIncrementTick>
 800a24e:	4603      	mov	r3, r0
 800a250:	2b00      	cmp	r3, #0
 800a252:	d002      	beq.n	800a25a <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800a254:	4b16      	ldr	r3, [pc, #88]	; (800a2b0 <xTaskResumeAll+0x134>)
 800a256:	2201      	movs	r2, #1
 800a258:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	3b01      	subs	r3, #1
 800a25e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d1f1      	bne.n	800a24a <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800a266:	4b13      	ldr	r3, [pc, #76]	; (800a2b4 <xTaskResumeAll+0x138>)
 800a268:	2200      	movs	r2, #0
 800a26a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a26c:	4b10      	ldr	r3, [pc, #64]	; (800a2b0 <xTaskResumeAll+0x134>)
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d009      	beq.n	800a288 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a274:	2301      	movs	r3, #1
 800a276:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a278:	4b0f      	ldr	r3, [pc, #60]	; (800a2b8 <xTaskResumeAll+0x13c>)
 800a27a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a27e:	601a      	str	r2, [r3, #0]
 800a280:	f3bf 8f4f 	dsb	sy
 800a284:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a288:	f001 f914 	bl	800b4b4 <vPortExitCritical>

	return xAlreadyYielded;
 800a28c:	68bb      	ldr	r3, [r7, #8]
}
 800a28e:	4618      	mov	r0, r3
 800a290:	3710      	adds	r7, #16
 800a292:	46bd      	mov	sp, r7
 800a294:	bd80      	pop	{r7, pc}
 800a296:	bf00      	nop
 800a298:	20007bc4 	.word	0x20007bc4
 800a29c:	20007b9c 	.word	0x20007b9c
 800a2a0:	20007b5c 	.word	0x20007b5c
 800a2a4:	20007ba4 	.word	0x20007ba4
 800a2a8:	200076cc 	.word	0x200076cc
 800a2ac:	200076c8 	.word	0x200076c8
 800a2b0:	20007bb0 	.word	0x20007bb0
 800a2b4:	20007bac 	.word	0x20007bac
 800a2b8:	e000ed04 	.word	0xe000ed04

0800a2bc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a2bc:	b480      	push	{r7}
 800a2be:	b083      	sub	sp, #12
 800a2c0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a2c2:	4b05      	ldr	r3, [pc, #20]	; (800a2d8 <xTaskGetTickCount+0x1c>)
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a2c8:	687b      	ldr	r3, [r7, #4]
}
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	370c      	adds	r7, #12
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d4:	4770      	bx	lr
 800a2d6:	bf00      	nop
 800a2d8:	20007ba0 	.word	0x20007ba0

0800a2dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b086      	sub	sp, #24
 800a2e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a2e6:	4b50      	ldr	r3, [pc, #320]	; (800a428 <xTaskIncrementTick+0x14c>)
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	f040 808b 	bne.w	800a406 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a2f0:	4b4e      	ldr	r3, [pc, #312]	; (800a42c <xTaskIncrementTick+0x150>)
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	3301      	adds	r3, #1
 800a2f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a2f8:	4a4c      	ldr	r2, [pc, #304]	; (800a42c <xTaskIncrementTick+0x150>)
 800a2fa:	693b      	ldr	r3, [r7, #16]
 800a2fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a2fe:	693b      	ldr	r3, [r7, #16]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d122      	bne.n	800a34a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800a304:	4b4a      	ldr	r3, [pc, #296]	; (800a430 <xTaskIncrementTick+0x154>)
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d00c      	beq.n	800a328 <xTaskIncrementTick+0x4c>
	__asm volatile
 800a30e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a312:	b672      	cpsid	i
 800a314:	f383 8811 	msr	BASEPRI, r3
 800a318:	f3bf 8f6f 	isb	sy
 800a31c:	f3bf 8f4f 	dsb	sy
 800a320:	b662      	cpsie	i
 800a322:	603b      	str	r3, [r7, #0]
}
 800a324:	bf00      	nop
 800a326:	e7fe      	b.n	800a326 <xTaskIncrementTick+0x4a>
 800a328:	4b41      	ldr	r3, [pc, #260]	; (800a430 <xTaskIncrementTick+0x154>)
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	60fb      	str	r3, [r7, #12]
 800a32e:	4b41      	ldr	r3, [pc, #260]	; (800a434 <xTaskIncrementTick+0x158>)
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	4a3f      	ldr	r2, [pc, #252]	; (800a430 <xTaskIncrementTick+0x154>)
 800a334:	6013      	str	r3, [r2, #0]
 800a336:	4a3f      	ldr	r2, [pc, #252]	; (800a434 <xTaskIncrementTick+0x158>)
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	6013      	str	r3, [r2, #0]
 800a33c:	4b3e      	ldr	r3, [pc, #248]	; (800a438 <xTaskIncrementTick+0x15c>)
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	3301      	adds	r3, #1
 800a342:	4a3d      	ldr	r2, [pc, #244]	; (800a438 <xTaskIncrementTick+0x15c>)
 800a344:	6013      	str	r3, [r2, #0]
 800a346:	f000 fb11 	bl	800a96c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a34a:	4b3c      	ldr	r3, [pc, #240]	; (800a43c <xTaskIncrementTick+0x160>)
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	693a      	ldr	r2, [r7, #16]
 800a350:	429a      	cmp	r2, r3
 800a352:	d349      	bcc.n	800a3e8 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a354:	4b36      	ldr	r3, [pc, #216]	; (800a430 <xTaskIncrementTick+0x154>)
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d104      	bne.n	800a368 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a35e:	4b37      	ldr	r3, [pc, #220]	; (800a43c <xTaskIncrementTick+0x160>)
 800a360:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a364:	601a      	str	r2, [r3, #0]
					break;
 800a366:	e03f      	b.n	800a3e8 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a368:	4b31      	ldr	r3, [pc, #196]	; (800a430 <xTaskIncrementTick+0x154>)
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	68db      	ldr	r3, [r3, #12]
 800a36e:	68db      	ldr	r3, [r3, #12]
 800a370:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a372:	68bb      	ldr	r3, [r7, #8]
 800a374:	685b      	ldr	r3, [r3, #4]
 800a376:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a378:	693a      	ldr	r2, [r7, #16]
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	429a      	cmp	r2, r3
 800a37e:	d203      	bcs.n	800a388 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a380:	4a2e      	ldr	r2, [pc, #184]	; (800a43c <xTaskIncrementTick+0x160>)
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a386:	e02f      	b.n	800a3e8 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a388:	68bb      	ldr	r3, [r7, #8]
 800a38a:	3304      	adds	r3, #4
 800a38c:	4618      	mov	r0, r3
 800a38e:	f7fe ff49 	bl	8009224 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a392:	68bb      	ldr	r3, [r7, #8]
 800a394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a396:	2b00      	cmp	r3, #0
 800a398:	d004      	beq.n	800a3a4 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a39a:	68bb      	ldr	r3, [r7, #8]
 800a39c:	3318      	adds	r3, #24
 800a39e:	4618      	mov	r0, r3
 800a3a0:	f7fe ff40 	bl	8009224 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a3a4:	68bb      	ldr	r3, [r7, #8]
 800a3a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3a8:	4b25      	ldr	r3, [pc, #148]	; (800a440 <xTaskIncrementTick+0x164>)
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	429a      	cmp	r2, r3
 800a3ae:	d903      	bls.n	800a3b8 <xTaskIncrementTick+0xdc>
 800a3b0:	68bb      	ldr	r3, [r7, #8]
 800a3b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3b4:	4a22      	ldr	r2, [pc, #136]	; (800a440 <xTaskIncrementTick+0x164>)
 800a3b6:	6013      	str	r3, [r2, #0]
 800a3b8:	68bb      	ldr	r3, [r7, #8]
 800a3ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3bc:	4613      	mov	r3, r2
 800a3be:	009b      	lsls	r3, r3, #2
 800a3c0:	4413      	add	r3, r2
 800a3c2:	009b      	lsls	r3, r3, #2
 800a3c4:	4a1f      	ldr	r2, [pc, #124]	; (800a444 <xTaskIncrementTick+0x168>)
 800a3c6:	441a      	add	r2, r3
 800a3c8:	68bb      	ldr	r3, [r7, #8]
 800a3ca:	3304      	adds	r3, #4
 800a3cc:	4619      	mov	r1, r3
 800a3ce:	4610      	mov	r0, r2
 800a3d0:	f7fe fecb 	bl	800916a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a3d4:	68bb      	ldr	r3, [r7, #8]
 800a3d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3d8:	4b1b      	ldr	r3, [pc, #108]	; (800a448 <xTaskIncrementTick+0x16c>)
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3de:	429a      	cmp	r2, r3
 800a3e0:	d3b8      	bcc.n	800a354 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800a3e2:	2301      	movs	r3, #1
 800a3e4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a3e6:	e7b5      	b.n	800a354 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a3e8:	4b17      	ldr	r3, [pc, #92]	; (800a448 <xTaskIncrementTick+0x16c>)
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3ee:	4915      	ldr	r1, [pc, #84]	; (800a444 <xTaskIncrementTick+0x168>)
 800a3f0:	4613      	mov	r3, r2
 800a3f2:	009b      	lsls	r3, r3, #2
 800a3f4:	4413      	add	r3, r2
 800a3f6:	009b      	lsls	r3, r3, #2
 800a3f8:	440b      	add	r3, r1
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	2b01      	cmp	r3, #1
 800a3fe:	d907      	bls.n	800a410 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800a400:	2301      	movs	r3, #1
 800a402:	617b      	str	r3, [r7, #20]
 800a404:	e004      	b.n	800a410 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800a406:	4b11      	ldr	r3, [pc, #68]	; (800a44c <xTaskIncrementTick+0x170>)
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	3301      	adds	r3, #1
 800a40c:	4a0f      	ldr	r2, [pc, #60]	; (800a44c <xTaskIncrementTick+0x170>)
 800a40e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800a410:	4b0f      	ldr	r3, [pc, #60]	; (800a450 <xTaskIncrementTick+0x174>)
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d001      	beq.n	800a41c <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800a418:	2301      	movs	r3, #1
 800a41a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800a41c:	697b      	ldr	r3, [r7, #20]
}
 800a41e:	4618      	mov	r0, r3
 800a420:	3718      	adds	r7, #24
 800a422:	46bd      	mov	sp, r7
 800a424:	bd80      	pop	{r7, pc}
 800a426:	bf00      	nop
 800a428:	20007bc4 	.word	0x20007bc4
 800a42c:	20007ba0 	.word	0x20007ba0
 800a430:	20007b54 	.word	0x20007b54
 800a434:	20007b58 	.word	0x20007b58
 800a438:	20007bb4 	.word	0x20007bb4
 800a43c:	20007bbc 	.word	0x20007bbc
 800a440:	20007ba4 	.word	0x20007ba4
 800a444:	200076cc 	.word	0x200076cc
 800a448:	200076c8 	.word	0x200076c8
 800a44c:	20007bac 	.word	0x20007bac
 800a450:	20007bb0 	.word	0x20007bb0

0800a454 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a454:	b480      	push	{r7}
 800a456:	b085      	sub	sp, #20
 800a458:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a45a:	4b2b      	ldr	r3, [pc, #172]	; (800a508 <vTaskSwitchContext+0xb4>)
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d003      	beq.n	800a46a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a462:	4b2a      	ldr	r3, [pc, #168]	; (800a50c <vTaskSwitchContext+0xb8>)
 800a464:	2201      	movs	r2, #1
 800a466:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a468:	e048      	b.n	800a4fc <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 800a46a:	4b28      	ldr	r3, [pc, #160]	; (800a50c <vTaskSwitchContext+0xb8>)
 800a46c:	2200      	movs	r2, #0
 800a46e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a470:	4b27      	ldr	r3, [pc, #156]	; (800a510 <vTaskSwitchContext+0xbc>)
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	60fb      	str	r3, [r7, #12]
 800a476:	e012      	b.n	800a49e <vTaskSwitchContext+0x4a>
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d10c      	bne.n	800a498 <vTaskSwitchContext+0x44>
	__asm volatile
 800a47e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a482:	b672      	cpsid	i
 800a484:	f383 8811 	msr	BASEPRI, r3
 800a488:	f3bf 8f6f 	isb	sy
 800a48c:	f3bf 8f4f 	dsb	sy
 800a490:	b662      	cpsie	i
 800a492:	607b      	str	r3, [r7, #4]
}
 800a494:	bf00      	nop
 800a496:	e7fe      	b.n	800a496 <vTaskSwitchContext+0x42>
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	3b01      	subs	r3, #1
 800a49c:	60fb      	str	r3, [r7, #12]
 800a49e:	491d      	ldr	r1, [pc, #116]	; (800a514 <vTaskSwitchContext+0xc0>)
 800a4a0:	68fa      	ldr	r2, [r7, #12]
 800a4a2:	4613      	mov	r3, r2
 800a4a4:	009b      	lsls	r3, r3, #2
 800a4a6:	4413      	add	r3, r2
 800a4a8:	009b      	lsls	r3, r3, #2
 800a4aa:	440b      	add	r3, r1
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d0e2      	beq.n	800a478 <vTaskSwitchContext+0x24>
 800a4b2:	68fa      	ldr	r2, [r7, #12]
 800a4b4:	4613      	mov	r3, r2
 800a4b6:	009b      	lsls	r3, r3, #2
 800a4b8:	4413      	add	r3, r2
 800a4ba:	009b      	lsls	r3, r3, #2
 800a4bc:	4a15      	ldr	r2, [pc, #84]	; (800a514 <vTaskSwitchContext+0xc0>)
 800a4be:	4413      	add	r3, r2
 800a4c0:	60bb      	str	r3, [r7, #8]
 800a4c2:	68bb      	ldr	r3, [r7, #8]
 800a4c4:	685b      	ldr	r3, [r3, #4]
 800a4c6:	685a      	ldr	r2, [r3, #4]
 800a4c8:	68bb      	ldr	r3, [r7, #8]
 800a4ca:	605a      	str	r2, [r3, #4]
 800a4cc:	68bb      	ldr	r3, [r7, #8]
 800a4ce:	685a      	ldr	r2, [r3, #4]
 800a4d0:	68bb      	ldr	r3, [r7, #8]
 800a4d2:	3308      	adds	r3, #8
 800a4d4:	429a      	cmp	r2, r3
 800a4d6:	d104      	bne.n	800a4e2 <vTaskSwitchContext+0x8e>
 800a4d8:	68bb      	ldr	r3, [r7, #8]
 800a4da:	685b      	ldr	r3, [r3, #4]
 800a4dc:	685a      	ldr	r2, [r3, #4]
 800a4de:	68bb      	ldr	r3, [r7, #8]
 800a4e0:	605a      	str	r2, [r3, #4]
 800a4e2:	68bb      	ldr	r3, [r7, #8]
 800a4e4:	685b      	ldr	r3, [r3, #4]
 800a4e6:	68db      	ldr	r3, [r3, #12]
 800a4e8:	4a0b      	ldr	r2, [pc, #44]	; (800a518 <vTaskSwitchContext+0xc4>)
 800a4ea:	6013      	str	r3, [r2, #0]
 800a4ec:	4a08      	ldr	r2, [pc, #32]	; (800a510 <vTaskSwitchContext+0xbc>)
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a4f2:	4b09      	ldr	r3, [pc, #36]	; (800a518 <vTaskSwitchContext+0xc4>)
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	3354      	adds	r3, #84	; 0x54
 800a4f8:	4a08      	ldr	r2, [pc, #32]	; (800a51c <vTaskSwitchContext+0xc8>)
 800a4fa:	6013      	str	r3, [r2, #0]
}
 800a4fc:	bf00      	nop
 800a4fe:	3714      	adds	r7, #20
 800a500:	46bd      	mov	sp, r7
 800a502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a506:	4770      	bx	lr
 800a508:	20007bc4 	.word	0x20007bc4
 800a50c:	20007bb0 	.word	0x20007bb0
 800a510:	20007ba4 	.word	0x20007ba4
 800a514:	200076cc 	.word	0x200076cc
 800a518:	200076c8 	.word	0x200076c8
 800a51c:	200021d8 	.word	0x200021d8

0800a520 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b084      	sub	sp, #16
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
 800a528:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d10c      	bne.n	800a54a <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800a530:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a534:	b672      	cpsid	i
 800a536:	f383 8811 	msr	BASEPRI, r3
 800a53a:	f3bf 8f6f 	isb	sy
 800a53e:	f3bf 8f4f 	dsb	sy
 800a542:	b662      	cpsie	i
 800a544:	60fb      	str	r3, [r7, #12]
}
 800a546:	bf00      	nop
 800a548:	e7fe      	b.n	800a548 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a54a:	4b07      	ldr	r3, [pc, #28]	; (800a568 <vTaskPlaceOnEventList+0x48>)
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	3318      	adds	r3, #24
 800a550:	4619      	mov	r1, r3
 800a552:	6878      	ldr	r0, [r7, #4]
 800a554:	f7fe fe2d 	bl	80091b2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a558:	2101      	movs	r1, #1
 800a55a:	6838      	ldr	r0, [r7, #0]
 800a55c:	f000 fab6 	bl	800aacc <prvAddCurrentTaskToDelayedList>
}
 800a560:	bf00      	nop
 800a562:	3710      	adds	r7, #16
 800a564:	46bd      	mov	sp, r7
 800a566:	bd80      	pop	{r7, pc}
 800a568:	200076c8 	.word	0x200076c8

0800a56c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b086      	sub	sp, #24
 800a570:	af00      	add	r7, sp, #0
 800a572:	60f8      	str	r0, [r7, #12]
 800a574:	60b9      	str	r1, [r7, #8]
 800a576:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d10c      	bne.n	800a598 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800a57e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a582:	b672      	cpsid	i
 800a584:	f383 8811 	msr	BASEPRI, r3
 800a588:	f3bf 8f6f 	isb	sy
 800a58c:	f3bf 8f4f 	dsb	sy
 800a590:	b662      	cpsie	i
 800a592:	617b      	str	r3, [r7, #20]
}
 800a594:	bf00      	nop
 800a596:	e7fe      	b.n	800a596 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a598:	4b0a      	ldr	r3, [pc, #40]	; (800a5c4 <vTaskPlaceOnEventListRestricted+0x58>)
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	3318      	adds	r3, #24
 800a59e:	4619      	mov	r1, r3
 800a5a0:	68f8      	ldr	r0, [r7, #12]
 800a5a2:	f7fe fde2 	bl	800916a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d002      	beq.n	800a5b2 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800a5ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a5b0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a5b2:	6879      	ldr	r1, [r7, #4]
 800a5b4:	68b8      	ldr	r0, [r7, #8]
 800a5b6:	f000 fa89 	bl	800aacc <prvAddCurrentTaskToDelayedList>
	}
 800a5ba:	bf00      	nop
 800a5bc:	3718      	adds	r7, #24
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	bd80      	pop	{r7, pc}
 800a5c2:	bf00      	nop
 800a5c4:	200076c8 	.word	0x200076c8

0800a5c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b086      	sub	sp, #24
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	68db      	ldr	r3, [r3, #12]
 800a5d4:	68db      	ldr	r3, [r3, #12]
 800a5d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a5d8:	693b      	ldr	r3, [r7, #16]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d10c      	bne.n	800a5f8 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800a5de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5e2:	b672      	cpsid	i
 800a5e4:	f383 8811 	msr	BASEPRI, r3
 800a5e8:	f3bf 8f6f 	isb	sy
 800a5ec:	f3bf 8f4f 	dsb	sy
 800a5f0:	b662      	cpsie	i
 800a5f2:	60fb      	str	r3, [r7, #12]
}
 800a5f4:	bf00      	nop
 800a5f6:	e7fe      	b.n	800a5f6 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a5f8:	693b      	ldr	r3, [r7, #16]
 800a5fa:	3318      	adds	r3, #24
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	f7fe fe11 	bl	8009224 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a602:	4b1e      	ldr	r3, [pc, #120]	; (800a67c <xTaskRemoveFromEventList+0xb4>)
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d11d      	bne.n	800a646 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a60a:	693b      	ldr	r3, [r7, #16]
 800a60c:	3304      	adds	r3, #4
 800a60e:	4618      	mov	r0, r3
 800a610:	f7fe fe08 	bl	8009224 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a614:	693b      	ldr	r3, [r7, #16]
 800a616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a618:	4b19      	ldr	r3, [pc, #100]	; (800a680 <xTaskRemoveFromEventList+0xb8>)
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	429a      	cmp	r2, r3
 800a61e:	d903      	bls.n	800a628 <xTaskRemoveFromEventList+0x60>
 800a620:	693b      	ldr	r3, [r7, #16]
 800a622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a624:	4a16      	ldr	r2, [pc, #88]	; (800a680 <xTaskRemoveFromEventList+0xb8>)
 800a626:	6013      	str	r3, [r2, #0]
 800a628:	693b      	ldr	r3, [r7, #16]
 800a62a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a62c:	4613      	mov	r3, r2
 800a62e:	009b      	lsls	r3, r3, #2
 800a630:	4413      	add	r3, r2
 800a632:	009b      	lsls	r3, r3, #2
 800a634:	4a13      	ldr	r2, [pc, #76]	; (800a684 <xTaskRemoveFromEventList+0xbc>)
 800a636:	441a      	add	r2, r3
 800a638:	693b      	ldr	r3, [r7, #16]
 800a63a:	3304      	adds	r3, #4
 800a63c:	4619      	mov	r1, r3
 800a63e:	4610      	mov	r0, r2
 800a640:	f7fe fd93 	bl	800916a <vListInsertEnd>
 800a644:	e005      	b.n	800a652 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a646:	693b      	ldr	r3, [r7, #16]
 800a648:	3318      	adds	r3, #24
 800a64a:	4619      	mov	r1, r3
 800a64c:	480e      	ldr	r0, [pc, #56]	; (800a688 <xTaskRemoveFromEventList+0xc0>)
 800a64e:	f7fe fd8c 	bl	800916a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a652:	693b      	ldr	r3, [r7, #16]
 800a654:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a656:	4b0d      	ldr	r3, [pc, #52]	; (800a68c <xTaskRemoveFromEventList+0xc4>)
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a65c:	429a      	cmp	r2, r3
 800a65e:	d905      	bls.n	800a66c <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a660:	2301      	movs	r3, #1
 800a662:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a664:	4b0a      	ldr	r3, [pc, #40]	; (800a690 <xTaskRemoveFromEventList+0xc8>)
 800a666:	2201      	movs	r2, #1
 800a668:	601a      	str	r2, [r3, #0]
 800a66a:	e001      	b.n	800a670 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800a66c:	2300      	movs	r3, #0
 800a66e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a670:	697b      	ldr	r3, [r7, #20]
}
 800a672:	4618      	mov	r0, r3
 800a674:	3718      	adds	r7, #24
 800a676:	46bd      	mov	sp, r7
 800a678:	bd80      	pop	{r7, pc}
 800a67a:	bf00      	nop
 800a67c:	20007bc4 	.word	0x20007bc4
 800a680:	20007ba4 	.word	0x20007ba4
 800a684:	200076cc 	.word	0x200076cc
 800a688:	20007b5c 	.word	0x20007b5c
 800a68c:	200076c8 	.word	0x200076c8
 800a690:	20007bb0 	.word	0x20007bb0

0800a694 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b084      	sub	sp, #16
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d10c      	bne.n	800a6bc <vTaskSetTimeOutState+0x28>
	__asm volatile
 800a6a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6a6:	b672      	cpsid	i
 800a6a8:	f383 8811 	msr	BASEPRI, r3
 800a6ac:	f3bf 8f6f 	isb	sy
 800a6b0:	f3bf 8f4f 	dsb	sy
 800a6b4:	b662      	cpsie	i
 800a6b6:	60fb      	str	r3, [r7, #12]
}
 800a6b8:	bf00      	nop
 800a6ba:	e7fe      	b.n	800a6ba <vTaskSetTimeOutState+0x26>
	taskENTER_CRITICAL();
 800a6bc:	f000 fec6 	bl	800b44c <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a6c0:	4b06      	ldr	r3, [pc, #24]	; (800a6dc <vTaskSetTimeOutState+0x48>)
 800a6c2:	681a      	ldr	r2, [r3, #0]
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800a6c8:	4b05      	ldr	r3, [pc, #20]	; (800a6e0 <vTaskSetTimeOutState+0x4c>)
 800a6ca:	681a      	ldr	r2, [r3, #0]
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800a6d0:	f000 fef0 	bl	800b4b4 <vPortExitCritical>
}
 800a6d4:	bf00      	nop
 800a6d6:	3710      	adds	r7, #16
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	bd80      	pop	{r7, pc}
 800a6dc:	20007bb4 	.word	0x20007bb4
 800a6e0:	20007ba0 	.word	0x20007ba0

0800a6e4 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a6e4:	b480      	push	{r7}
 800a6e6:	b083      	sub	sp, #12
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a6ec:	4b06      	ldr	r3, [pc, #24]	; (800a708 <vTaskInternalSetTimeOutState+0x24>)
 800a6ee:	681a      	ldr	r2, [r3, #0]
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a6f4:	4b05      	ldr	r3, [pc, #20]	; (800a70c <vTaskInternalSetTimeOutState+0x28>)
 800a6f6:	681a      	ldr	r2, [r3, #0]
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	605a      	str	r2, [r3, #4]
}
 800a6fc:	bf00      	nop
 800a6fe:	370c      	adds	r7, #12
 800a700:	46bd      	mov	sp, r7
 800a702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a706:	4770      	bx	lr
 800a708:	20007bb4 	.word	0x20007bb4
 800a70c:	20007ba0 	.word	0x20007ba0

0800a710 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b088      	sub	sp, #32
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
 800a718:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d10c      	bne.n	800a73a <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800a720:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a724:	b672      	cpsid	i
 800a726:	f383 8811 	msr	BASEPRI, r3
 800a72a:	f3bf 8f6f 	isb	sy
 800a72e:	f3bf 8f4f 	dsb	sy
 800a732:	b662      	cpsie	i
 800a734:	613b      	str	r3, [r7, #16]
}
 800a736:	bf00      	nop
 800a738:	e7fe      	b.n	800a738 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d10c      	bne.n	800a75a <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800a740:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a744:	b672      	cpsid	i
 800a746:	f383 8811 	msr	BASEPRI, r3
 800a74a:	f3bf 8f6f 	isb	sy
 800a74e:	f3bf 8f4f 	dsb	sy
 800a752:	b662      	cpsie	i
 800a754:	60fb      	str	r3, [r7, #12]
}
 800a756:	bf00      	nop
 800a758:	e7fe      	b.n	800a758 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800a75a:	f000 fe77 	bl	800b44c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a75e:	4b1d      	ldr	r3, [pc, #116]	; (800a7d4 <xTaskCheckForTimeOut+0xc4>)
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	685b      	ldr	r3, [r3, #4]
 800a768:	69ba      	ldr	r2, [r7, #24]
 800a76a:	1ad3      	subs	r3, r2, r3
 800a76c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a776:	d102      	bne.n	800a77e <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a778:	2300      	movs	r3, #0
 800a77a:	61fb      	str	r3, [r7, #28]
 800a77c:	e023      	b.n	800a7c6 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681a      	ldr	r2, [r3, #0]
 800a782:	4b15      	ldr	r3, [pc, #84]	; (800a7d8 <xTaskCheckForTimeOut+0xc8>)
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	429a      	cmp	r2, r3
 800a788:	d007      	beq.n	800a79a <xTaskCheckForTimeOut+0x8a>
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	685b      	ldr	r3, [r3, #4]
 800a78e:	69ba      	ldr	r2, [r7, #24]
 800a790:	429a      	cmp	r2, r3
 800a792:	d302      	bcc.n	800a79a <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a794:	2301      	movs	r3, #1
 800a796:	61fb      	str	r3, [r7, #28]
 800a798:	e015      	b.n	800a7c6 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	697a      	ldr	r2, [r7, #20]
 800a7a0:	429a      	cmp	r2, r3
 800a7a2:	d20b      	bcs.n	800a7bc <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	681a      	ldr	r2, [r3, #0]
 800a7a8:	697b      	ldr	r3, [r7, #20]
 800a7aa:	1ad2      	subs	r2, r2, r3
 800a7ac:	683b      	ldr	r3, [r7, #0]
 800a7ae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a7b0:	6878      	ldr	r0, [r7, #4]
 800a7b2:	f7ff ff97 	bl	800a6e4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	61fb      	str	r3, [r7, #28]
 800a7ba:	e004      	b.n	800a7c6 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	2200      	movs	r2, #0
 800a7c0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a7c2:	2301      	movs	r3, #1
 800a7c4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a7c6:	f000 fe75 	bl	800b4b4 <vPortExitCritical>

	return xReturn;
 800a7ca:	69fb      	ldr	r3, [r7, #28]
}
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	3720      	adds	r7, #32
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	bd80      	pop	{r7, pc}
 800a7d4:	20007ba0 	.word	0x20007ba0
 800a7d8:	20007bb4 	.word	0x20007bb4

0800a7dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a7dc:	b480      	push	{r7}
 800a7de:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a7e0:	4b03      	ldr	r3, [pc, #12]	; (800a7f0 <vTaskMissedYield+0x14>)
 800a7e2:	2201      	movs	r2, #1
 800a7e4:	601a      	str	r2, [r3, #0]
}
 800a7e6:	bf00      	nop
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ee:	4770      	bx	lr
 800a7f0:	20007bb0 	.word	0x20007bb0

0800a7f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b082      	sub	sp, #8
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a7fc:	f000 f852 	bl	800a8a4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a800:	4b06      	ldr	r3, [pc, #24]	; (800a81c <prvIdleTask+0x28>)
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	2b01      	cmp	r3, #1
 800a806:	d9f9      	bls.n	800a7fc <prvIdleTask+0x8>
			{
				taskYIELD();
 800a808:	4b05      	ldr	r3, [pc, #20]	; (800a820 <prvIdleTask+0x2c>)
 800a80a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a80e:	601a      	str	r2, [r3, #0]
 800a810:	f3bf 8f4f 	dsb	sy
 800a814:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a818:	e7f0      	b.n	800a7fc <prvIdleTask+0x8>
 800a81a:	bf00      	nop
 800a81c:	200076cc 	.word	0x200076cc
 800a820:	e000ed04 	.word	0xe000ed04

0800a824 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b082      	sub	sp, #8
 800a828:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a82a:	2300      	movs	r3, #0
 800a82c:	607b      	str	r3, [r7, #4]
 800a82e:	e00c      	b.n	800a84a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a830:	687a      	ldr	r2, [r7, #4]
 800a832:	4613      	mov	r3, r2
 800a834:	009b      	lsls	r3, r3, #2
 800a836:	4413      	add	r3, r2
 800a838:	009b      	lsls	r3, r3, #2
 800a83a:	4a12      	ldr	r2, [pc, #72]	; (800a884 <prvInitialiseTaskLists+0x60>)
 800a83c:	4413      	add	r3, r2
 800a83e:	4618      	mov	r0, r3
 800a840:	f7fe fc66 	bl	8009110 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	3301      	adds	r3, #1
 800a848:	607b      	str	r3, [r7, #4]
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	2b37      	cmp	r3, #55	; 0x37
 800a84e:	d9ef      	bls.n	800a830 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a850:	480d      	ldr	r0, [pc, #52]	; (800a888 <prvInitialiseTaskLists+0x64>)
 800a852:	f7fe fc5d 	bl	8009110 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a856:	480d      	ldr	r0, [pc, #52]	; (800a88c <prvInitialiseTaskLists+0x68>)
 800a858:	f7fe fc5a 	bl	8009110 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a85c:	480c      	ldr	r0, [pc, #48]	; (800a890 <prvInitialiseTaskLists+0x6c>)
 800a85e:	f7fe fc57 	bl	8009110 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a862:	480c      	ldr	r0, [pc, #48]	; (800a894 <prvInitialiseTaskLists+0x70>)
 800a864:	f7fe fc54 	bl	8009110 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a868:	480b      	ldr	r0, [pc, #44]	; (800a898 <prvInitialiseTaskLists+0x74>)
 800a86a:	f7fe fc51 	bl	8009110 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a86e:	4b0b      	ldr	r3, [pc, #44]	; (800a89c <prvInitialiseTaskLists+0x78>)
 800a870:	4a05      	ldr	r2, [pc, #20]	; (800a888 <prvInitialiseTaskLists+0x64>)
 800a872:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a874:	4b0a      	ldr	r3, [pc, #40]	; (800a8a0 <prvInitialiseTaskLists+0x7c>)
 800a876:	4a05      	ldr	r2, [pc, #20]	; (800a88c <prvInitialiseTaskLists+0x68>)
 800a878:	601a      	str	r2, [r3, #0]
}
 800a87a:	bf00      	nop
 800a87c:	3708      	adds	r7, #8
 800a87e:	46bd      	mov	sp, r7
 800a880:	bd80      	pop	{r7, pc}
 800a882:	bf00      	nop
 800a884:	200076cc 	.word	0x200076cc
 800a888:	20007b2c 	.word	0x20007b2c
 800a88c:	20007b40 	.word	0x20007b40
 800a890:	20007b5c 	.word	0x20007b5c
 800a894:	20007b70 	.word	0x20007b70
 800a898:	20007b88 	.word	0x20007b88
 800a89c:	20007b54 	.word	0x20007b54
 800a8a0:	20007b58 	.word	0x20007b58

0800a8a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b082      	sub	sp, #8
 800a8a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a8aa:	e019      	b.n	800a8e0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a8ac:	f000 fdce 	bl	800b44c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8b0:	4b10      	ldr	r3, [pc, #64]	; (800a8f4 <prvCheckTasksWaitingTermination+0x50>)
 800a8b2:	68db      	ldr	r3, [r3, #12]
 800a8b4:	68db      	ldr	r3, [r3, #12]
 800a8b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	3304      	adds	r3, #4
 800a8bc:	4618      	mov	r0, r3
 800a8be:	f7fe fcb1 	bl	8009224 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a8c2:	4b0d      	ldr	r3, [pc, #52]	; (800a8f8 <prvCheckTasksWaitingTermination+0x54>)
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	3b01      	subs	r3, #1
 800a8c8:	4a0b      	ldr	r2, [pc, #44]	; (800a8f8 <prvCheckTasksWaitingTermination+0x54>)
 800a8ca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a8cc:	4b0b      	ldr	r3, [pc, #44]	; (800a8fc <prvCheckTasksWaitingTermination+0x58>)
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	3b01      	subs	r3, #1
 800a8d2:	4a0a      	ldr	r2, [pc, #40]	; (800a8fc <prvCheckTasksWaitingTermination+0x58>)
 800a8d4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a8d6:	f000 fded 	bl	800b4b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a8da:	6878      	ldr	r0, [r7, #4]
 800a8dc:	f000 f810 	bl	800a900 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a8e0:	4b06      	ldr	r3, [pc, #24]	; (800a8fc <prvCheckTasksWaitingTermination+0x58>)
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d1e1      	bne.n	800a8ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a8e8:	bf00      	nop
 800a8ea:	bf00      	nop
 800a8ec:	3708      	adds	r7, #8
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	bd80      	pop	{r7, pc}
 800a8f2:	bf00      	nop
 800a8f4:	20007b70 	.word	0x20007b70
 800a8f8:	20007b9c 	.word	0x20007b9c
 800a8fc:	20007b84 	.word	0x20007b84

0800a900 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a900:	b580      	push	{r7, lr}
 800a902:	b084      	sub	sp, #16
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	3354      	adds	r3, #84	; 0x54
 800a90c:	4618      	mov	r0, r3
 800a90e:	f011 ff79 	bl	801c804 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d108      	bne.n	800a92e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a920:	4618      	mov	r0, r3
 800a922:	f000 ff89 	bl	800b838 <vPortFree>
				vPortFree( pxTCB );
 800a926:	6878      	ldr	r0, [r7, #4]
 800a928:	f000 ff86 	bl	800b838 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a92c:	e01a      	b.n	800a964 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a934:	2b01      	cmp	r3, #1
 800a936:	d103      	bne.n	800a940 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a938:	6878      	ldr	r0, [r7, #4]
 800a93a:	f000 ff7d 	bl	800b838 <vPortFree>
	}
 800a93e:	e011      	b.n	800a964 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a946:	2b02      	cmp	r3, #2
 800a948:	d00c      	beq.n	800a964 <prvDeleteTCB+0x64>
	__asm volatile
 800a94a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a94e:	b672      	cpsid	i
 800a950:	f383 8811 	msr	BASEPRI, r3
 800a954:	f3bf 8f6f 	isb	sy
 800a958:	f3bf 8f4f 	dsb	sy
 800a95c:	b662      	cpsie	i
 800a95e:	60fb      	str	r3, [r7, #12]
}
 800a960:	bf00      	nop
 800a962:	e7fe      	b.n	800a962 <prvDeleteTCB+0x62>
	}
 800a964:	bf00      	nop
 800a966:	3710      	adds	r7, #16
 800a968:	46bd      	mov	sp, r7
 800a96a:	bd80      	pop	{r7, pc}

0800a96c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a96c:	b480      	push	{r7}
 800a96e:	b083      	sub	sp, #12
 800a970:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a972:	4b0c      	ldr	r3, [pc, #48]	; (800a9a4 <prvResetNextTaskUnblockTime+0x38>)
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d104      	bne.n	800a986 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a97c:	4b0a      	ldr	r3, [pc, #40]	; (800a9a8 <prvResetNextTaskUnblockTime+0x3c>)
 800a97e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a982:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a984:	e008      	b.n	800a998 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a986:	4b07      	ldr	r3, [pc, #28]	; (800a9a4 <prvResetNextTaskUnblockTime+0x38>)
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	68db      	ldr	r3, [r3, #12]
 800a98c:	68db      	ldr	r3, [r3, #12]
 800a98e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	685b      	ldr	r3, [r3, #4]
 800a994:	4a04      	ldr	r2, [pc, #16]	; (800a9a8 <prvResetNextTaskUnblockTime+0x3c>)
 800a996:	6013      	str	r3, [r2, #0]
}
 800a998:	bf00      	nop
 800a99a:	370c      	adds	r7, #12
 800a99c:	46bd      	mov	sp, r7
 800a99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a2:	4770      	bx	lr
 800a9a4:	20007b54 	.word	0x20007b54
 800a9a8:	20007bbc 	.word	0x20007bbc

0800a9ac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a9ac:	b480      	push	{r7}
 800a9ae:	b083      	sub	sp, #12
 800a9b0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a9b2:	4b0b      	ldr	r3, [pc, #44]	; (800a9e0 <xTaskGetSchedulerState+0x34>)
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d102      	bne.n	800a9c0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a9ba:	2301      	movs	r3, #1
 800a9bc:	607b      	str	r3, [r7, #4]
 800a9be:	e008      	b.n	800a9d2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a9c0:	4b08      	ldr	r3, [pc, #32]	; (800a9e4 <xTaskGetSchedulerState+0x38>)
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d102      	bne.n	800a9ce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a9c8:	2302      	movs	r3, #2
 800a9ca:	607b      	str	r3, [r7, #4]
 800a9cc:	e001      	b.n	800a9d2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a9d2:	687b      	ldr	r3, [r7, #4]
	}
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	370c      	adds	r7, #12
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9de:	4770      	bx	lr
 800a9e0:	20007ba8 	.word	0x20007ba8
 800a9e4:	20007bc4 	.word	0x20007bc4

0800a9e8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b086      	sub	sp, #24
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d05a      	beq.n	800aab4 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a9fe:	4b30      	ldr	r3, [pc, #192]	; (800aac0 <xTaskPriorityDisinherit+0xd8>)
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	693a      	ldr	r2, [r7, #16]
 800aa04:	429a      	cmp	r2, r3
 800aa06:	d00c      	beq.n	800aa22 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800aa08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa0c:	b672      	cpsid	i
 800aa0e:	f383 8811 	msr	BASEPRI, r3
 800aa12:	f3bf 8f6f 	isb	sy
 800aa16:	f3bf 8f4f 	dsb	sy
 800aa1a:	b662      	cpsie	i
 800aa1c:	60fb      	str	r3, [r7, #12]
}
 800aa1e:	bf00      	nop
 800aa20:	e7fe      	b.n	800aa20 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800aa22:	693b      	ldr	r3, [r7, #16]
 800aa24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d10c      	bne.n	800aa44 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800aa2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa2e:	b672      	cpsid	i
 800aa30:	f383 8811 	msr	BASEPRI, r3
 800aa34:	f3bf 8f6f 	isb	sy
 800aa38:	f3bf 8f4f 	dsb	sy
 800aa3c:	b662      	cpsie	i
 800aa3e:	60bb      	str	r3, [r7, #8]
}
 800aa40:	bf00      	nop
 800aa42:	e7fe      	b.n	800aa42 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800aa44:	693b      	ldr	r3, [r7, #16]
 800aa46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa48:	1e5a      	subs	r2, r3, #1
 800aa4a:	693b      	ldr	r3, [r7, #16]
 800aa4c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800aa4e:	693b      	ldr	r3, [r7, #16]
 800aa50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa52:	693b      	ldr	r3, [r7, #16]
 800aa54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa56:	429a      	cmp	r2, r3
 800aa58:	d02c      	beq.n	800aab4 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800aa5a:	693b      	ldr	r3, [r7, #16]
 800aa5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d128      	bne.n	800aab4 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aa62:	693b      	ldr	r3, [r7, #16]
 800aa64:	3304      	adds	r3, #4
 800aa66:	4618      	mov	r0, r3
 800aa68:	f7fe fbdc 	bl	8009224 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800aa6c:	693b      	ldr	r3, [r7, #16]
 800aa6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aa70:	693b      	ldr	r3, [r7, #16]
 800aa72:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa74:	693b      	ldr	r3, [r7, #16]
 800aa76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa78:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800aa7c:	693b      	ldr	r3, [r7, #16]
 800aa7e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800aa80:	693b      	ldr	r3, [r7, #16]
 800aa82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa84:	4b0f      	ldr	r3, [pc, #60]	; (800aac4 <xTaskPriorityDisinherit+0xdc>)
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	429a      	cmp	r2, r3
 800aa8a:	d903      	bls.n	800aa94 <xTaskPriorityDisinherit+0xac>
 800aa8c:	693b      	ldr	r3, [r7, #16]
 800aa8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa90:	4a0c      	ldr	r2, [pc, #48]	; (800aac4 <xTaskPriorityDisinherit+0xdc>)
 800aa92:	6013      	str	r3, [r2, #0]
 800aa94:	693b      	ldr	r3, [r7, #16]
 800aa96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa98:	4613      	mov	r3, r2
 800aa9a:	009b      	lsls	r3, r3, #2
 800aa9c:	4413      	add	r3, r2
 800aa9e:	009b      	lsls	r3, r3, #2
 800aaa0:	4a09      	ldr	r2, [pc, #36]	; (800aac8 <xTaskPriorityDisinherit+0xe0>)
 800aaa2:	441a      	add	r2, r3
 800aaa4:	693b      	ldr	r3, [r7, #16]
 800aaa6:	3304      	adds	r3, #4
 800aaa8:	4619      	mov	r1, r3
 800aaaa:	4610      	mov	r0, r2
 800aaac:	f7fe fb5d 	bl	800916a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800aab0:	2301      	movs	r3, #1
 800aab2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800aab4:	697b      	ldr	r3, [r7, #20]
	}
 800aab6:	4618      	mov	r0, r3
 800aab8:	3718      	adds	r7, #24
 800aaba:	46bd      	mov	sp, r7
 800aabc:	bd80      	pop	{r7, pc}
 800aabe:	bf00      	nop
 800aac0:	200076c8 	.word	0x200076c8
 800aac4:	20007ba4 	.word	0x20007ba4
 800aac8:	200076cc 	.word	0x200076cc

0800aacc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b084      	sub	sp, #16
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
 800aad4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800aad6:	4b21      	ldr	r3, [pc, #132]	; (800ab5c <prvAddCurrentTaskToDelayedList+0x90>)
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aadc:	4b20      	ldr	r3, [pc, #128]	; (800ab60 <prvAddCurrentTaskToDelayedList+0x94>)
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	3304      	adds	r3, #4
 800aae2:	4618      	mov	r0, r3
 800aae4:	f7fe fb9e 	bl	8009224 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aaee:	d10a      	bne.n	800ab06 <prvAddCurrentTaskToDelayedList+0x3a>
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d007      	beq.n	800ab06 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aaf6:	4b1a      	ldr	r3, [pc, #104]	; (800ab60 <prvAddCurrentTaskToDelayedList+0x94>)
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	3304      	adds	r3, #4
 800aafc:	4619      	mov	r1, r3
 800aafe:	4819      	ldr	r0, [pc, #100]	; (800ab64 <prvAddCurrentTaskToDelayedList+0x98>)
 800ab00:	f7fe fb33 	bl	800916a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ab04:	e026      	b.n	800ab54 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ab06:	68fa      	ldr	r2, [r7, #12]
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	4413      	add	r3, r2
 800ab0c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ab0e:	4b14      	ldr	r3, [pc, #80]	; (800ab60 <prvAddCurrentTaskToDelayedList+0x94>)
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	68ba      	ldr	r2, [r7, #8]
 800ab14:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ab16:	68ba      	ldr	r2, [r7, #8]
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	429a      	cmp	r2, r3
 800ab1c:	d209      	bcs.n	800ab32 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ab1e:	4b12      	ldr	r3, [pc, #72]	; (800ab68 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ab20:	681a      	ldr	r2, [r3, #0]
 800ab22:	4b0f      	ldr	r3, [pc, #60]	; (800ab60 <prvAddCurrentTaskToDelayedList+0x94>)
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	3304      	adds	r3, #4
 800ab28:	4619      	mov	r1, r3
 800ab2a:	4610      	mov	r0, r2
 800ab2c:	f7fe fb41 	bl	80091b2 <vListInsert>
}
 800ab30:	e010      	b.n	800ab54 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ab32:	4b0e      	ldr	r3, [pc, #56]	; (800ab6c <prvAddCurrentTaskToDelayedList+0xa0>)
 800ab34:	681a      	ldr	r2, [r3, #0]
 800ab36:	4b0a      	ldr	r3, [pc, #40]	; (800ab60 <prvAddCurrentTaskToDelayedList+0x94>)
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	3304      	adds	r3, #4
 800ab3c:	4619      	mov	r1, r3
 800ab3e:	4610      	mov	r0, r2
 800ab40:	f7fe fb37 	bl	80091b2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ab44:	4b0a      	ldr	r3, [pc, #40]	; (800ab70 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	68ba      	ldr	r2, [r7, #8]
 800ab4a:	429a      	cmp	r2, r3
 800ab4c:	d202      	bcs.n	800ab54 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ab4e:	4a08      	ldr	r2, [pc, #32]	; (800ab70 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ab50:	68bb      	ldr	r3, [r7, #8]
 800ab52:	6013      	str	r3, [r2, #0]
}
 800ab54:	bf00      	nop
 800ab56:	3710      	adds	r7, #16
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	bd80      	pop	{r7, pc}
 800ab5c:	20007ba0 	.word	0x20007ba0
 800ab60:	200076c8 	.word	0x200076c8
 800ab64:	20007b88 	.word	0x20007b88
 800ab68:	20007b58 	.word	0x20007b58
 800ab6c:	20007b54 	.word	0x20007b54
 800ab70:	20007bbc 	.word	0x20007bbc

0800ab74 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b08a      	sub	sp, #40	; 0x28
 800ab78:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ab7e:	f000 fb15 	bl	800b1ac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ab82:	4b1d      	ldr	r3, [pc, #116]	; (800abf8 <xTimerCreateTimerTask+0x84>)
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d021      	beq.n	800abce <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ab8e:	2300      	movs	r3, #0
 800ab90:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ab92:	1d3a      	adds	r2, r7, #4
 800ab94:	f107 0108 	add.w	r1, r7, #8
 800ab98:	f107 030c 	add.w	r3, r7, #12
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	f7fe fa9d 	bl	80090dc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800aba2:	6879      	ldr	r1, [r7, #4]
 800aba4:	68bb      	ldr	r3, [r7, #8]
 800aba6:	68fa      	ldr	r2, [r7, #12]
 800aba8:	9202      	str	r2, [sp, #8]
 800abaa:	9301      	str	r3, [sp, #4]
 800abac:	2302      	movs	r3, #2
 800abae:	9300      	str	r3, [sp, #0]
 800abb0:	2300      	movs	r3, #0
 800abb2:	460a      	mov	r2, r1
 800abb4:	4911      	ldr	r1, [pc, #68]	; (800abfc <xTimerCreateTimerTask+0x88>)
 800abb6:	4812      	ldr	r0, [pc, #72]	; (800ac00 <xTimerCreateTimerTask+0x8c>)
 800abb8:	f7ff f868 	bl	8009c8c <xTaskCreateStatic>
 800abbc:	4603      	mov	r3, r0
 800abbe:	4a11      	ldr	r2, [pc, #68]	; (800ac04 <xTimerCreateTimerTask+0x90>)
 800abc0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800abc2:	4b10      	ldr	r3, [pc, #64]	; (800ac04 <xTimerCreateTimerTask+0x90>)
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d001      	beq.n	800abce <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800abca:	2301      	movs	r3, #1
 800abcc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800abce:	697b      	ldr	r3, [r7, #20]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d10c      	bne.n	800abee <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800abd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abd8:	b672      	cpsid	i
 800abda:	f383 8811 	msr	BASEPRI, r3
 800abde:	f3bf 8f6f 	isb	sy
 800abe2:	f3bf 8f4f 	dsb	sy
 800abe6:	b662      	cpsie	i
 800abe8:	613b      	str	r3, [r7, #16]
}
 800abea:	bf00      	nop
 800abec:	e7fe      	b.n	800abec <xTimerCreateTimerTask+0x78>
	return xReturn;
 800abee:	697b      	ldr	r3, [r7, #20]
}
 800abf0:	4618      	mov	r0, r3
 800abf2:	3718      	adds	r7, #24
 800abf4:	46bd      	mov	sp, r7
 800abf6:	bd80      	pop	{r7, pc}
 800abf8:	20007bf8 	.word	0x20007bf8
 800abfc:	0801d7d0 	.word	0x0801d7d0
 800ac00:	0800ad45 	.word	0x0800ad45
 800ac04:	20007bfc 	.word	0x20007bfc

0800ac08 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b08a      	sub	sp, #40	; 0x28
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	60f8      	str	r0, [r7, #12]
 800ac10:	60b9      	str	r1, [r7, #8]
 800ac12:	607a      	str	r2, [r7, #4]
 800ac14:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ac16:	2300      	movs	r3, #0
 800ac18:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d10c      	bne.n	800ac3a <xTimerGenericCommand+0x32>
	__asm volatile
 800ac20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac24:	b672      	cpsid	i
 800ac26:	f383 8811 	msr	BASEPRI, r3
 800ac2a:	f3bf 8f6f 	isb	sy
 800ac2e:	f3bf 8f4f 	dsb	sy
 800ac32:	b662      	cpsie	i
 800ac34:	623b      	str	r3, [r7, #32]
}
 800ac36:	bf00      	nop
 800ac38:	e7fe      	b.n	800ac38 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ac3a:	4b1a      	ldr	r3, [pc, #104]	; (800aca4 <xTimerGenericCommand+0x9c>)
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d02a      	beq.n	800ac98 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ac42:	68bb      	ldr	r3, [r7, #8]
 800ac44:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ac4e:	68bb      	ldr	r3, [r7, #8]
 800ac50:	2b05      	cmp	r3, #5
 800ac52:	dc18      	bgt.n	800ac86 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ac54:	f7ff feaa 	bl	800a9ac <xTaskGetSchedulerState>
 800ac58:	4603      	mov	r3, r0
 800ac5a:	2b02      	cmp	r3, #2
 800ac5c:	d109      	bne.n	800ac72 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ac5e:	4b11      	ldr	r3, [pc, #68]	; (800aca4 <xTimerGenericCommand+0x9c>)
 800ac60:	6818      	ldr	r0, [r3, #0]
 800ac62:	f107 0110 	add.w	r1, r7, #16
 800ac66:	2300      	movs	r3, #0
 800ac68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac6a:	f7fe fc15 	bl	8009498 <xQueueGenericSend>
 800ac6e:	6278      	str	r0, [r7, #36]	; 0x24
 800ac70:	e012      	b.n	800ac98 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ac72:	4b0c      	ldr	r3, [pc, #48]	; (800aca4 <xTimerGenericCommand+0x9c>)
 800ac74:	6818      	ldr	r0, [r3, #0]
 800ac76:	f107 0110 	add.w	r1, r7, #16
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	f7fe fc0b 	bl	8009498 <xQueueGenericSend>
 800ac82:	6278      	str	r0, [r7, #36]	; 0x24
 800ac84:	e008      	b.n	800ac98 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ac86:	4b07      	ldr	r3, [pc, #28]	; (800aca4 <xTimerGenericCommand+0x9c>)
 800ac88:	6818      	ldr	r0, [r3, #0]
 800ac8a:	f107 0110 	add.w	r1, r7, #16
 800ac8e:	2300      	movs	r3, #0
 800ac90:	683a      	ldr	r2, [r7, #0]
 800ac92:	f7fe fd07 	bl	80096a4 <xQueueGenericSendFromISR>
 800ac96:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ac98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	3728      	adds	r7, #40	; 0x28
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	bd80      	pop	{r7, pc}
 800aca2:	bf00      	nop
 800aca4:	20007bf8 	.word	0x20007bf8

0800aca8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b088      	sub	sp, #32
 800acac:	af02      	add	r7, sp, #8
 800acae:	6078      	str	r0, [r7, #4]
 800acb0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800acb2:	4b23      	ldr	r3, [pc, #140]	; (800ad40 <prvProcessExpiredTimer+0x98>)
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	68db      	ldr	r3, [r3, #12]
 800acb8:	68db      	ldr	r3, [r3, #12]
 800acba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800acbc:	697b      	ldr	r3, [r7, #20]
 800acbe:	3304      	adds	r3, #4
 800acc0:	4618      	mov	r0, r3
 800acc2:	f7fe faaf 	bl	8009224 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800acc6:	697b      	ldr	r3, [r7, #20]
 800acc8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800accc:	f003 0304 	and.w	r3, r3, #4
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d024      	beq.n	800ad1e <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800acd4:	697b      	ldr	r3, [r7, #20]
 800acd6:	699a      	ldr	r2, [r3, #24]
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	18d1      	adds	r1, r2, r3
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	683a      	ldr	r2, [r7, #0]
 800ace0:	6978      	ldr	r0, [r7, #20]
 800ace2:	f000 f8d3 	bl	800ae8c <prvInsertTimerInActiveList>
 800ace6:	4603      	mov	r3, r0
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d021      	beq.n	800ad30 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800acec:	2300      	movs	r3, #0
 800acee:	9300      	str	r3, [sp, #0]
 800acf0:	2300      	movs	r3, #0
 800acf2:	687a      	ldr	r2, [r7, #4]
 800acf4:	2100      	movs	r1, #0
 800acf6:	6978      	ldr	r0, [r7, #20]
 800acf8:	f7ff ff86 	bl	800ac08 <xTimerGenericCommand>
 800acfc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800acfe:	693b      	ldr	r3, [r7, #16]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d115      	bne.n	800ad30 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800ad04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad08:	b672      	cpsid	i
 800ad0a:	f383 8811 	msr	BASEPRI, r3
 800ad0e:	f3bf 8f6f 	isb	sy
 800ad12:	f3bf 8f4f 	dsb	sy
 800ad16:	b662      	cpsie	i
 800ad18:	60fb      	str	r3, [r7, #12]
}
 800ad1a:	bf00      	nop
 800ad1c:	e7fe      	b.n	800ad1c <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ad1e:	697b      	ldr	r3, [r7, #20]
 800ad20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ad24:	f023 0301 	bic.w	r3, r3, #1
 800ad28:	b2da      	uxtb	r2, r3
 800ad2a:	697b      	ldr	r3, [r7, #20]
 800ad2c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ad30:	697b      	ldr	r3, [r7, #20]
 800ad32:	6a1b      	ldr	r3, [r3, #32]
 800ad34:	6978      	ldr	r0, [r7, #20]
 800ad36:	4798      	blx	r3
}
 800ad38:	bf00      	nop
 800ad3a:	3718      	adds	r7, #24
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	bd80      	pop	{r7, pc}
 800ad40:	20007bf0 	.word	0x20007bf0

0800ad44 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b084      	sub	sp, #16
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ad4c:	f107 0308 	add.w	r3, r7, #8
 800ad50:	4618      	mov	r0, r3
 800ad52:	f000 f857 	bl	800ae04 <prvGetNextExpireTime>
 800ad56:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ad58:	68bb      	ldr	r3, [r7, #8]
 800ad5a:	4619      	mov	r1, r3
 800ad5c:	68f8      	ldr	r0, [r7, #12]
 800ad5e:	f000 f803 	bl	800ad68 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ad62:	f000 f8d5 	bl	800af10 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ad66:	e7f1      	b.n	800ad4c <prvTimerTask+0x8>

0800ad68 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b084      	sub	sp, #16
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
 800ad70:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ad72:	f7ff f9f5 	bl	800a160 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ad76:	f107 0308 	add.w	r3, r7, #8
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	f000 f866 	bl	800ae4c <prvSampleTimeNow>
 800ad80:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ad82:	68bb      	ldr	r3, [r7, #8]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d130      	bne.n	800adea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d10a      	bne.n	800ada4 <prvProcessTimerOrBlockTask+0x3c>
 800ad8e:	687a      	ldr	r2, [r7, #4]
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	429a      	cmp	r2, r3
 800ad94:	d806      	bhi.n	800ada4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ad96:	f7ff f9f1 	bl	800a17c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ad9a:	68f9      	ldr	r1, [r7, #12]
 800ad9c:	6878      	ldr	r0, [r7, #4]
 800ad9e:	f7ff ff83 	bl	800aca8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ada2:	e024      	b.n	800adee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ada4:	683b      	ldr	r3, [r7, #0]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d008      	beq.n	800adbc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800adaa:	4b13      	ldr	r3, [pc, #76]	; (800adf8 <prvProcessTimerOrBlockTask+0x90>)
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d101      	bne.n	800adb8 <prvProcessTimerOrBlockTask+0x50>
 800adb4:	2301      	movs	r3, #1
 800adb6:	e000      	b.n	800adba <prvProcessTimerOrBlockTask+0x52>
 800adb8:	2300      	movs	r3, #0
 800adba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800adbc:	4b0f      	ldr	r3, [pc, #60]	; (800adfc <prvProcessTimerOrBlockTask+0x94>)
 800adbe:	6818      	ldr	r0, [r3, #0]
 800adc0:	687a      	ldr	r2, [r7, #4]
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	1ad3      	subs	r3, r2, r3
 800adc6:	683a      	ldr	r2, [r7, #0]
 800adc8:	4619      	mov	r1, r3
 800adca:	f7fe ff2b 	bl	8009c24 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800adce:	f7ff f9d5 	bl	800a17c <xTaskResumeAll>
 800add2:	4603      	mov	r3, r0
 800add4:	2b00      	cmp	r3, #0
 800add6:	d10a      	bne.n	800adee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800add8:	4b09      	ldr	r3, [pc, #36]	; (800ae00 <prvProcessTimerOrBlockTask+0x98>)
 800adda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800adde:	601a      	str	r2, [r3, #0]
 800ade0:	f3bf 8f4f 	dsb	sy
 800ade4:	f3bf 8f6f 	isb	sy
}
 800ade8:	e001      	b.n	800adee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800adea:	f7ff f9c7 	bl	800a17c <xTaskResumeAll>
}
 800adee:	bf00      	nop
 800adf0:	3710      	adds	r7, #16
 800adf2:	46bd      	mov	sp, r7
 800adf4:	bd80      	pop	{r7, pc}
 800adf6:	bf00      	nop
 800adf8:	20007bf4 	.word	0x20007bf4
 800adfc:	20007bf8 	.word	0x20007bf8
 800ae00:	e000ed04 	.word	0xe000ed04

0800ae04 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ae04:	b480      	push	{r7}
 800ae06:	b085      	sub	sp, #20
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ae0c:	4b0e      	ldr	r3, [pc, #56]	; (800ae48 <prvGetNextExpireTime+0x44>)
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d101      	bne.n	800ae1a <prvGetNextExpireTime+0x16>
 800ae16:	2201      	movs	r2, #1
 800ae18:	e000      	b.n	800ae1c <prvGetNextExpireTime+0x18>
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d105      	bne.n	800ae34 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ae28:	4b07      	ldr	r3, [pc, #28]	; (800ae48 <prvGetNextExpireTime+0x44>)
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	68db      	ldr	r3, [r3, #12]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	60fb      	str	r3, [r7, #12]
 800ae32:	e001      	b.n	800ae38 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ae34:	2300      	movs	r3, #0
 800ae36:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ae38:	68fb      	ldr	r3, [r7, #12]
}
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	3714      	adds	r7, #20
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae44:	4770      	bx	lr
 800ae46:	bf00      	nop
 800ae48:	20007bf0 	.word	0x20007bf0

0800ae4c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b084      	sub	sp, #16
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ae54:	f7ff fa32 	bl	800a2bc <xTaskGetTickCount>
 800ae58:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ae5a:	4b0b      	ldr	r3, [pc, #44]	; (800ae88 <prvSampleTimeNow+0x3c>)
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	68fa      	ldr	r2, [r7, #12]
 800ae60:	429a      	cmp	r2, r3
 800ae62:	d205      	bcs.n	800ae70 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ae64:	f000 f93c 	bl	800b0e0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	2201      	movs	r2, #1
 800ae6c:	601a      	str	r2, [r3, #0]
 800ae6e:	e002      	b.n	800ae76 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	2200      	movs	r2, #0
 800ae74:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ae76:	4a04      	ldr	r2, [pc, #16]	; (800ae88 <prvSampleTimeNow+0x3c>)
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ae7c:	68fb      	ldr	r3, [r7, #12]
}
 800ae7e:	4618      	mov	r0, r3
 800ae80:	3710      	adds	r7, #16
 800ae82:	46bd      	mov	sp, r7
 800ae84:	bd80      	pop	{r7, pc}
 800ae86:	bf00      	nop
 800ae88:	20007c00 	.word	0x20007c00

0800ae8c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b086      	sub	sp, #24
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	60f8      	str	r0, [r7, #12]
 800ae94:	60b9      	str	r1, [r7, #8]
 800ae96:	607a      	str	r2, [r7, #4]
 800ae98:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	68ba      	ldr	r2, [r7, #8]
 800aea2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	68fa      	ldr	r2, [r7, #12]
 800aea8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800aeaa:	68ba      	ldr	r2, [r7, #8]
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	429a      	cmp	r2, r3
 800aeb0:	d812      	bhi.n	800aed8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aeb2:	687a      	ldr	r2, [r7, #4]
 800aeb4:	683b      	ldr	r3, [r7, #0]
 800aeb6:	1ad2      	subs	r2, r2, r3
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	699b      	ldr	r3, [r3, #24]
 800aebc:	429a      	cmp	r2, r3
 800aebe:	d302      	bcc.n	800aec6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800aec0:	2301      	movs	r3, #1
 800aec2:	617b      	str	r3, [r7, #20]
 800aec4:	e01b      	b.n	800aefe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800aec6:	4b10      	ldr	r3, [pc, #64]	; (800af08 <prvInsertTimerInActiveList+0x7c>)
 800aec8:	681a      	ldr	r2, [r3, #0]
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	3304      	adds	r3, #4
 800aece:	4619      	mov	r1, r3
 800aed0:	4610      	mov	r0, r2
 800aed2:	f7fe f96e 	bl	80091b2 <vListInsert>
 800aed6:	e012      	b.n	800aefe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800aed8:	687a      	ldr	r2, [r7, #4]
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	429a      	cmp	r2, r3
 800aede:	d206      	bcs.n	800aeee <prvInsertTimerInActiveList+0x62>
 800aee0:	68ba      	ldr	r2, [r7, #8]
 800aee2:	683b      	ldr	r3, [r7, #0]
 800aee4:	429a      	cmp	r2, r3
 800aee6:	d302      	bcc.n	800aeee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800aee8:	2301      	movs	r3, #1
 800aeea:	617b      	str	r3, [r7, #20]
 800aeec:	e007      	b.n	800aefe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800aeee:	4b07      	ldr	r3, [pc, #28]	; (800af0c <prvInsertTimerInActiveList+0x80>)
 800aef0:	681a      	ldr	r2, [r3, #0]
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	3304      	adds	r3, #4
 800aef6:	4619      	mov	r1, r3
 800aef8:	4610      	mov	r0, r2
 800aefa:	f7fe f95a 	bl	80091b2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800aefe:	697b      	ldr	r3, [r7, #20]
}
 800af00:	4618      	mov	r0, r3
 800af02:	3718      	adds	r7, #24
 800af04:	46bd      	mov	sp, r7
 800af06:	bd80      	pop	{r7, pc}
 800af08:	20007bf4 	.word	0x20007bf4
 800af0c:	20007bf0 	.word	0x20007bf0

0800af10 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800af10:	b580      	push	{r7, lr}
 800af12:	b08e      	sub	sp, #56	; 0x38
 800af14:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800af16:	e0d0      	b.n	800b0ba <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	da1a      	bge.n	800af54 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800af1e:	1d3b      	adds	r3, r7, #4
 800af20:	3304      	adds	r3, #4
 800af22:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800af24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af26:	2b00      	cmp	r3, #0
 800af28:	d10c      	bne.n	800af44 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800af2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af2e:	b672      	cpsid	i
 800af30:	f383 8811 	msr	BASEPRI, r3
 800af34:	f3bf 8f6f 	isb	sy
 800af38:	f3bf 8f4f 	dsb	sy
 800af3c:	b662      	cpsie	i
 800af3e:	61fb      	str	r3, [r7, #28]
}
 800af40:	bf00      	nop
 800af42:	e7fe      	b.n	800af42 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800af44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800af4a:	6850      	ldr	r0, [r2, #4]
 800af4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800af4e:	6892      	ldr	r2, [r2, #8]
 800af50:	4611      	mov	r1, r2
 800af52:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	2b00      	cmp	r3, #0
 800af58:	f2c0 80af 	blt.w	800b0ba <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800af60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af62:	695b      	ldr	r3, [r3, #20]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d004      	beq.n	800af72 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800af68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af6a:	3304      	adds	r3, #4
 800af6c:	4618      	mov	r0, r3
 800af6e:	f7fe f959 	bl	8009224 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800af72:	463b      	mov	r3, r7
 800af74:	4618      	mov	r0, r3
 800af76:	f7ff ff69 	bl	800ae4c <prvSampleTimeNow>
 800af7a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	2b09      	cmp	r3, #9
 800af80:	f200 809a 	bhi.w	800b0b8 <prvProcessReceivedCommands+0x1a8>
 800af84:	a201      	add	r2, pc, #4	; (adr r2, 800af8c <prvProcessReceivedCommands+0x7c>)
 800af86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af8a:	bf00      	nop
 800af8c:	0800afb5 	.word	0x0800afb5
 800af90:	0800afb5 	.word	0x0800afb5
 800af94:	0800afb5 	.word	0x0800afb5
 800af98:	0800b02d 	.word	0x0800b02d
 800af9c:	0800b041 	.word	0x0800b041
 800afa0:	0800b08f 	.word	0x0800b08f
 800afa4:	0800afb5 	.word	0x0800afb5
 800afa8:	0800afb5 	.word	0x0800afb5
 800afac:	0800b02d 	.word	0x0800b02d
 800afb0:	0800b041 	.word	0x0800b041
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800afb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afb6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800afba:	f043 0301 	orr.w	r3, r3, #1
 800afbe:	b2da      	uxtb	r2, r3
 800afc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afc2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800afc6:	68ba      	ldr	r2, [r7, #8]
 800afc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afca:	699b      	ldr	r3, [r3, #24]
 800afcc:	18d1      	adds	r1, r2, r3
 800afce:	68bb      	ldr	r3, [r7, #8]
 800afd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800afd4:	f7ff ff5a 	bl	800ae8c <prvInsertTimerInActiveList>
 800afd8:	4603      	mov	r3, r0
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d06d      	beq.n	800b0ba <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800afde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afe0:	6a1b      	ldr	r3, [r3, #32]
 800afe2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800afe4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800afe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afe8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800afec:	f003 0304 	and.w	r3, r3, #4
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d062      	beq.n	800b0ba <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800aff4:	68ba      	ldr	r2, [r7, #8]
 800aff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aff8:	699b      	ldr	r3, [r3, #24]
 800affa:	441a      	add	r2, r3
 800affc:	2300      	movs	r3, #0
 800affe:	9300      	str	r3, [sp, #0]
 800b000:	2300      	movs	r3, #0
 800b002:	2100      	movs	r1, #0
 800b004:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b006:	f7ff fdff 	bl	800ac08 <xTimerGenericCommand>
 800b00a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b00c:	6a3b      	ldr	r3, [r7, #32]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d153      	bne.n	800b0ba <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800b012:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b016:	b672      	cpsid	i
 800b018:	f383 8811 	msr	BASEPRI, r3
 800b01c:	f3bf 8f6f 	isb	sy
 800b020:	f3bf 8f4f 	dsb	sy
 800b024:	b662      	cpsie	i
 800b026:	61bb      	str	r3, [r7, #24]
}
 800b028:	bf00      	nop
 800b02a:	e7fe      	b.n	800b02a <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b02c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b02e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b032:	f023 0301 	bic.w	r3, r3, #1
 800b036:	b2da      	uxtb	r2, r3
 800b038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b03a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b03e:	e03c      	b.n	800b0ba <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b042:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b046:	f043 0301 	orr.w	r3, r3, #1
 800b04a:	b2da      	uxtb	r2, r3
 800b04c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b04e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b052:	68ba      	ldr	r2, [r7, #8]
 800b054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b056:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b05a:	699b      	ldr	r3, [r3, #24]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d10c      	bne.n	800b07a <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800b060:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b064:	b672      	cpsid	i
 800b066:	f383 8811 	msr	BASEPRI, r3
 800b06a:	f3bf 8f6f 	isb	sy
 800b06e:	f3bf 8f4f 	dsb	sy
 800b072:	b662      	cpsie	i
 800b074:	617b      	str	r3, [r7, #20]
}
 800b076:	bf00      	nop
 800b078:	e7fe      	b.n	800b078 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b07a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b07c:	699a      	ldr	r2, [r3, #24]
 800b07e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b080:	18d1      	adds	r1, r2, r3
 800b082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b084:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b086:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b088:	f7ff ff00 	bl	800ae8c <prvInsertTimerInActiveList>
					break;
 800b08c:	e015      	b.n	800b0ba <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b08e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b090:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b094:	f003 0302 	and.w	r3, r3, #2
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d103      	bne.n	800b0a4 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800b09c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b09e:	f000 fbcb 	bl	800b838 <vPortFree>
 800b0a2:	e00a      	b.n	800b0ba <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b0a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b0aa:	f023 0301 	bic.w	r3, r3, #1
 800b0ae:	b2da      	uxtb	r2, r3
 800b0b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b0b6:	e000      	b.n	800b0ba <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 800b0b8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b0ba:	4b08      	ldr	r3, [pc, #32]	; (800b0dc <prvProcessReceivedCommands+0x1cc>)
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	1d39      	adds	r1, r7, #4
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	f7fe fb8e 	bl	80097e4 <xQueueReceive>
 800b0c8:	4603      	mov	r3, r0
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	f47f af24 	bne.w	800af18 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b0d0:	bf00      	nop
 800b0d2:	bf00      	nop
 800b0d4:	3730      	adds	r7, #48	; 0x30
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	bd80      	pop	{r7, pc}
 800b0da:	bf00      	nop
 800b0dc:	20007bf8 	.word	0x20007bf8

0800b0e0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b088      	sub	sp, #32
 800b0e4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b0e6:	e04a      	b.n	800b17e <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b0e8:	4b2e      	ldr	r3, [pc, #184]	; (800b1a4 <prvSwitchTimerLists+0xc4>)
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	68db      	ldr	r3, [r3, #12]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b0f2:	4b2c      	ldr	r3, [pc, #176]	; (800b1a4 <prvSwitchTimerLists+0xc4>)
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	68db      	ldr	r3, [r3, #12]
 800b0f8:	68db      	ldr	r3, [r3, #12]
 800b0fa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	3304      	adds	r3, #4
 800b100:	4618      	mov	r0, r3
 800b102:	f7fe f88f 	bl	8009224 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	6a1b      	ldr	r3, [r3, #32]
 800b10a:	68f8      	ldr	r0, [r7, #12]
 800b10c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b114:	f003 0304 	and.w	r3, r3, #4
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d030      	beq.n	800b17e <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	699b      	ldr	r3, [r3, #24]
 800b120:	693a      	ldr	r2, [r7, #16]
 800b122:	4413      	add	r3, r2
 800b124:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b126:	68ba      	ldr	r2, [r7, #8]
 800b128:	693b      	ldr	r3, [r7, #16]
 800b12a:	429a      	cmp	r2, r3
 800b12c:	d90e      	bls.n	800b14c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	68ba      	ldr	r2, [r7, #8]
 800b132:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	68fa      	ldr	r2, [r7, #12]
 800b138:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b13a:	4b1a      	ldr	r3, [pc, #104]	; (800b1a4 <prvSwitchTimerLists+0xc4>)
 800b13c:	681a      	ldr	r2, [r3, #0]
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	3304      	adds	r3, #4
 800b142:	4619      	mov	r1, r3
 800b144:	4610      	mov	r0, r2
 800b146:	f7fe f834 	bl	80091b2 <vListInsert>
 800b14a:	e018      	b.n	800b17e <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b14c:	2300      	movs	r3, #0
 800b14e:	9300      	str	r3, [sp, #0]
 800b150:	2300      	movs	r3, #0
 800b152:	693a      	ldr	r2, [r7, #16]
 800b154:	2100      	movs	r1, #0
 800b156:	68f8      	ldr	r0, [r7, #12]
 800b158:	f7ff fd56 	bl	800ac08 <xTimerGenericCommand>
 800b15c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d10c      	bne.n	800b17e <prvSwitchTimerLists+0x9e>
	__asm volatile
 800b164:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b168:	b672      	cpsid	i
 800b16a:	f383 8811 	msr	BASEPRI, r3
 800b16e:	f3bf 8f6f 	isb	sy
 800b172:	f3bf 8f4f 	dsb	sy
 800b176:	b662      	cpsie	i
 800b178:	603b      	str	r3, [r7, #0]
}
 800b17a:	bf00      	nop
 800b17c:	e7fe      	b.n	800b17c <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b17e:	4b09      	ldr	r3, [pc, #36]	; (800b1a4 <prvSwitchTimerLists+0xc4>)
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d1af      	bne.n	800b0e8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b188:	4b06      	ldr	r3, [pc, #24]	; (800b1a4 <prvSwitchTimerLists+0xc4>)
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b18e:	4b06      	ldr	r3, [pc, #24]	; (800b1a8 <prvSwitchTimerLists+0xc8>)
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	4a04      	ldr	r2, [pc, #16]	; (800b1a4 <prvSwitchTimerLists+0xc4>)
 800b194:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b196:	4a04      	ldr	r2, [pc, #16]	; (800b1a8 <prvSwitchTimerLists+0xc8>)
 800b198:	697b      	ldr	r3, [r7, #20]
 800b19a:	6013      	str	r3, [r2, #0]
}
 800b19c:	bf00      	nop
 800b19e:	3718      	adds	r7, #24
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	bd80      	pop	{r7, pc}
 800b1a4:	20007bf0 	.word	0x20007bf0
 800b1a8:	20007bf4 	.word	0x20007bf4

0800b1ac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b082      	sub	sp, #8
 800b1b0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b1b2:	f000 f94b 	bl	800b44c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b1b6:	4b15      	ldr	r3, [pc, #84]	; (800b20c <prvCheckForValidListAndQueue+0x60>)
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d120      	bne.n	800b200 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b1be:	4814      	ldr	r0, [pc, #80]	; (800b210 <prvCheckForValidListAndQueue+0x64>)
 800b1c0:	f7fd ffa6 	bl	8009110 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b1c4:	4813      	ldr	r0, [pc, #76]	; (800b214 <prvCheckForValidListAndQueue+0x68>)
 800b1c6:	f7fd ffa3 	bl	8009110 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b1ca:	4b13      	ldr	r3, [pc, #76]	; (800b218 <prvCheckForValidListAndQueue+0x6c>)
 800b1cc:	4a10      	ldr	r2, [pc, #64]	; (800b210 <prvCheckForValidListAndQueue+0x64>)
 800b1ce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b1d0:	4b12      	ldr	r3, [pc, #72]	; (800b21c <prvCheckForValidListAndQueue+0x70>)
 800b1d2:	4a10      	ldr	r2, [pc, #64]	; (800b214 <prvCheckForValidListAndQueue+0x68>)
 800b1d4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	9300      	str	r3, [sp, #0]
 800b1da:	4b11      	ldr	r3, [pc, #68]	; (800b220 <prvCheckForValidListAndQueue+0x74>)
 800b1dc:	4a11      	ldr	r2, [pc, #68]	; (800b224 <prvCheckForValidListAndQueue+0x78>)
 800b1de:	2110      	movs	r1, #16
 800b1e0:	200a      	movs	r0, #10
 800b1e2:	f7fe f8b3 	bl	800934c <xQueueGenericCreateStatic>
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	4a08      	ldr	r2, [pc, #32]	; (800b20c <prvCheckForValidListAndQueue+0x60>)
 800b1ea:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b1ec:	4b07      	ldr	r3, [pc, #28]	; (800b20c <prvCheckForValidListAndQueue+0x60>)
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d005      	beq.n	800b200 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b1f4:	4b05      	ldr	r3, [pc, #20]	; (800b20c <prvCheckForValidListAndQueue+0x60>)
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	490b      	ldr	r1, [pc, #44]	; (800b228 <prvCheckForValidListAndQueue+0x7c>)
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	f7fe fce8 	bl	8009bd0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b200:	f000 f958 	bl	800b4b4 <vPortExitCritical>
}
 800b204:	bf00      	nop
 800b206:	46bd      	mov	sp, r7
 800b208:	bd80      	pop	{r7, pc}
 800b20a:	bf00      	nop
 800b20c:	20007bf8 	.word	0x20007bf8
 800b210:	20007bc8 	.word	0x20007bc8
 800b214:	20007bdc 	.word	0x20007bdc
 800b218:	20007bf0 	.word	0x20007bf0
 800b21c:	20007bf4 	.word	0x20007bf4
 800b220:	20007ca4 	.word	0x20007ca4
 800b224:	20007c04 	.word	0x20007c04
 800b228:	0801d7d8 	.word	0x0801d7d8

0800b22c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b22c:	b480      	push	{r7}
 800b22e:	b085      	sub	sp, #20
 800b230:	af00      	add	r7, sp, #0
 800b232:	60f8      	str	r0, [r7, #12]
 800b234:	60b9      	str	r1, [r7, #8]
 800b236:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	3b04      	subs	r3, #4
 800b23c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b244:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	3b04      	subs	r3, #4
 800b24a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b24c:	68bb      	ldr	r3, [r7, #8]
 800b24e:	f023 0201 	bic.w	r2, r3, #1
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	3b04      	subs	r3, #4
 800b25a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b25c:	4a0c      	ldr	r2, [pc, #48]	; (800b290 <pxPortInitialiseStack+0x64>)
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	3b14      	subs	r3, #20
 800b266:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b268:	687a      	ldr	r2, [r7, #4]
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	3b04      	subs	r3, #4
 800b272:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	f06f 0202 	mvn.w	r2, #2
 800b27a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	3b20      	subs	r3, #32
 800b280:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b282:	68fb      	ldr	r3, [r7, #12]
}
 800b284:	4618      	mov	r0, r3
 800b286:	3714      	adds	r7, #20
 800b288:	46bd      	mov	sp, r7
 800b28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28e:	4770      	bx	lr
 800b290:	0800b295 	.word	0x0800b295

0800b294 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b294:	b480      	push	{r7}
 800b296:	b085      	sub	sp, #20
 800b298:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b29a:	2300      	movs	r3, #0
 800b29c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b29e:	4b14      	ldr	r3, [pc, #80]	; (800b2f0 <prvTaskExitError+0x5c>)
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b2a6:	d00c      	beq.n	800b2c2 <prvTaskExitError+0x2e>
	__asm volatile
 800b2a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2ac:	b672      	cpsid	i
 800b2ae:	f383 8811 	msr	BASEPRI, r3
 800b2b2:	f3bf 8f6f 	isb	sy
 800b2b6:	f3bf 8f4f 	dsb	sy
 800b2ba:	b662      	cpsie	i
 800b2bc:	60fb      	str	r3, [r7, #12]
}
 800b2be:	bf00      	nop
 800b2c0:	e7fe      	b.n	800b2c0 <prvTaskExitError+0x2c>
	__asm volatile
 800b2c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2c6:	b672      	cpsid	i
 800b2c8:	f383 8811 	msr	BASEPRI, r3
 800b2cc:	f3bf 8f6f 	isb	sy
 800b2d0:	f3bf 8f4f 	dsb	sy
 800b2d4:	b662      	cpsie	i
 800b2d6:	60bb      	str	r3, [r7, #8]
}
 800b2d8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b2da:	bf00      	nop
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d0fc      	beq.n	800b2dc <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b2e2:	bf00      	nop
 800b2e4:	bf00      	nop
 800b2e6:	3714      	adds	r7, #20
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ee:	4770      	bx	lr
 800b2f0:	20000010 	.word	0x20000010
	...

0800b300 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b300:	4b07      	ldr	r3, [pc, #28]	; (800b320 <pxCurrentTCBConst2>)
 800b302:	6819      	ldr	r1, [r3, #0]
 800b304:	6808      	ldr	r0, [r1, #0]
 800b306:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b30a:	f380 8809 	msr	PSP, r0
 800b30e:	f3bf 8f6f 	isb	sy
 800b312:	f04f 0000 	mov.w	r0, #0
 800b316:	f380 8811 	msr	BASEPRI, r0
 800b31a:	4770      	bx	lr
 800b31c:	f3af 8000 	nop.w

0800b320 <pxCurrentTCBConst2>:
 800b320:	200076c8 	.word	0x200076c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b324:	bf00      	nop
 800b326:	bf00      	nop

0800b328 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b328:	4808      	ldr	r0, [pc, #32]	; (800b34c <prvPortStartFirstTask+0x24>)
 800b32a:	6800      	ldr	r0, [r0, #0]
 800b32c:	6800      	ldr	r0, [r0, #0]
 800b32e:	f380 8808 	msr	MSP, r0
 800b332:	f04f 0000 	mov.w	r0, #0
 800b336:	f380 8814 	msr	CONTROL, r0
 800b33a:	b662      	cpsie	i
 800b33c:	b661      	cpsie	f
 800b33e:	f3bf 8f4f 	dsb	sy
 800b342:	f3bf 8f6f 	isb	sy
 800b346:	df00      	svc	0
 800b348:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b34a:	bf00      	nop
 800b34c:	e000ed08 	.word	0xe000ed08

0800b350 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b350:	b580      	push	{r7, lr}
 800b352:	b084      	sub	sp, #16
 800b354:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b356:	4b37      	ldr	r3, [pc, #220]	; (800b434 <xPortStartScheduler+0xe4>)
 800b358:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	781b      	ldrb	r3, [r3, #0]
 800b35e:	b2db      	uxtb	r3, r3
 800b360:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	22ff      	movs	r2, #255	; 0xff
 800b366:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	781b      	ldrb	r3, [r3, #0]
 800b36c:	b2db      	uxtb	r3, r3
 800b36e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b370:	78fb      	ldrb	r3, [r7, #3]
 800b372:	b2db      	uxtb	r3, r3
 800b374:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b378:	b2da      	uxtb	r2, r3
 800b37a:	4b2f      	ldr	r3, [pc, #188]	; (800b438 <xPortStartScheduler+0xe8>)
 800b37c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b37e:	4b2f      	ldr	r3, [pc, #188]	; (800b43c <xPortStartScheduler+0xec>)
 800b380:	2207      	movs	r2, #7
 800b382:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b384:	e009      	b.n	800b39a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800b386:	4b2d      	ldr	r3, [pc, #180]	; (800b43c <xPortStartScheduler+0xec>)
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	3b01      	subs	r3, #1
 800b38c:	4a2b      	ldr	r2, [pc, #172]	; (800b43c <xPortStartScheduler+0xec>)
 800b38e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b390:	78fb      	ldrb	r3, [r7, #3]
 800b392:	b2db      	uxtb	r3, r3
 800b394:	005b      	lsls	r3, r3, #1
 800b396:	b2db      	uxtb	r3, r3
 800b398:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b39a:	78fb      	ldrb	r3, [r7, #3]
 800b39c:	b2db      	uxtb	r3, r3
 800b39e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b3a2:	2b80      	cmp	r3, #128	; 0x80
 800b3a4:	d0ef      	beq.n	800b386 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b3a6:	4b25      	ldr	r3, [pc, #148]	; (800b43c <xPortStartScheduler+0xec>)
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	f1c3 0307 	rsb	r3, r3, #7
 800b3ae:	2b04      	cmp	r3, #4
 800b3b0:	d00c      	beq.n	800b3cc <xPortStartScheduler+0x7c>
	__asm volatile
 800b3b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3b6:	b672      	cpsid	i
 800b3b8:	f383 8811 	msr	BASEPRI, r3
 800b3bc:	f3bf 8f6f 	isb	sy
 800b3c0:	f3bf 8f4f 	dsb	sy
 800b3c4:	b662      	cpsie	i
 800b3c6:	60bb      	str	r3, [r7, #8]
}
 800b3c8:	bf00      	nop
 800b3ca:	e7fe      	b.n	800b3ca <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b3cc:	4b1b      	ldr	r3, [pc, #108]	; (800b43c <xPortStartScheduler+0xec>)
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	021b      	lsls	r3, r3, #8
 800b3d2:	4a1a      	ldr	r2, [pc, #104]	; (800b43c <xPortStartScheduler+0xec>)
 800b3d4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b3d6:	4b19      	ldr	r3, [pc, #100]	; (800b43c <xPortStartScheduler+0xec>)
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b3de:	4a17      	ldr	r2, [pc, #92]	; (800b43c <xPortStartScheduler+0xec>)
 800b3e0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	b2da      	uxtb	r2, r3
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b3ea:	4b15      	ldr	r3, [pc, #84]	; (800b440 <xPortStartScheduler+0xf0>)
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	4a14      	ldr	r2, [pc, #80]	; (800b440 <xPortStartScheduler+0xf0>)
 800b3f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b3f4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b3f6:	4b12      	ldr	r3, [pc, #72]	; (800b440 <xPortStartScheduler+0xf0>)
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	4a11      	ldr	r2, [pc, #68]	; (800b440 <xPortStartScheduler+0xf0>)
 800b3fc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b400:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b402:	f000 f8dd 	bl	800b5c0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b406:	4b0f      	ldr	r3, [pc, #60]	; (800b444 <xPortStartScheduler+0xf4>)
 800b408:	2200      	movs	r2, #0
 800b40a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b40c:	f000 f8fc 	bl	800b608 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b410:	4b0d      	ldr	r3, [pc, #52]	; (800b448 <xPortStartScheduler+0xf8>)
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	4a0c      	ldr	r2, [pc, #48]	; (800b448 <xPortStartScheduler+0xf8>)
 800b416:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b41a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b41c:	f7ff ff84 	bl	800b328 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b420:	f7ff f818 	bl	800a454 <vTaskSwitchContext>
	prvTaskExitError();
 800b424:	f7ff ff36 	bl	800b294 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b428:	2300      	movs	r3, #0
}
 800b42a:	4618      	mov	r0, r3
 800b42c:	3710      	adds	r7, #16
 800b42e:	46bd      	mov	sp, r7
 800b430:	bd80      	pop	{r7, pc}
 800b432:	bf00      	nop
 800b434:	e000e400 	.word	0xe000e400
 800b438:	20007cf4 	.word	0x20007cf4
 800b43c:	20007cf8 	.word	0x20007cf8
 800b440:	e000ed20 	.word	0xe000ed20
 800b444:	20000010 	.word	0x20000010
 800b448:	e000ef34 	.word	0xe000ef34

0800b44c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b44c:	b480      	push	{r7}
 800b44e:	b083      	sub	sp, #12
 800b450:	af00      	add	r7, sp, #0
	__asm volatile
 800b452:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b456:	b672      	cpsid	i
 800b458:	f383 8811 	msr	BASEPRI, r3
 800b45c:	f3bf 8f6f 	isb	sy
 800b460:	f3bf 8f4f 	dsb	sy
 800b464:	b662      	cpsie	i
 800b466:	607b      	str	r3, [r7, #4]
}
 800b468:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b46a:	4b10      	ldr	r3, [pc, #64]	; (800b4ac <vPortEnterCritical+0x60>)
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	3301      	adds	r3, #1
 800b470:	4a0e      	ldr	r2, [pc, #56]	; (800b4ac <vPortEnterCritical+0x60>)
 800b472:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b474:	4b0d      	ldr	r3, [pc, #52]	; (800b4ac <vPortEnterCritical+0x60>)
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	2b01      	cmp	r3, #1
 800b47a:	d111      	bne.n	800b4a0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b47c:	4b0c      	ldr	r3, [pc, #48]	; (800b4b0 <vPortEnterCritical+0x64>)
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	b2db      	uxtb	r3, r3
 800b482:	2b00      	cmp	r3, #0
 800b484:	d00c      	beq.n	800b4a0 <vPortEnterCritical+0x54>
	__asm volatile
 800b486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b48a:	b672      	cpsid	i
 800b48c:	f383 8811 	msr	BASEPRI, r3
 800b490:	f3bf 8f6f 	isb	sy
 800b494:	f3bf 8f4f 	dsb	sy
 800b498:	b662      	cpsie	i
 800b49a:	603b      	str	r3, [r7, #0]
}
 800b49c:	bf00      	nop
 800b49e:	e7fe      	b.n	800b49e <vPortEnterCritical+0x52>
	}
}
 800b4a0:	bf00      	nop
 800b4a2:	370c      	adds	r7, #12
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4aa:	4770      	bx	lr
 800b4ac:	20000010 	.word	0x20000010
 800b4b0:	e000ed04 	.word	0xe000ed04

0800b4b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b4b4:	b480      	push	{r7}
 800b4b6:	b083      	sub	sp, #12
 800b4b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b4ba:	4b13      	ldr	r3, [pc, #76]	; (800b508 <vPortExitCritical+0x54>)
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d10c      	bne.n	800b4dc <vPortExitCritical+0x28>
	__asm volatile
 800b4c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4c6:	b672      	cpsid	i
 800b4c8:	f383 8811 	msr	BASEPRI, r3
 800b4cc:	f3bf 8f6f 	isb	sy
 800b4d0:	f3bf 8f4f 	dsb	sy
 800b4d4:	b662      	cpsie	i
 800b4d6:	607b      	str	r3, [r7, #4]
}
 800b4d8:	bf00      	nop
 800b4da:	e7fe      	b.n	800b4da <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800b4dc:	4b0a      	ldr	r3, [pc, #40]	; (800b508 <vPortExitCritical+0x54>)
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	3b01      	subs	r3, #1
 800b4e2:	4a09      	ldr	r2, [pc, #36]	; (800b508 <vPortExitCritical+0x54>)
 800b4e4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b4e6:	4b08      	ldr	r3, [pc, #32]	; (800b508 <vPortExitCritical+0x54>)
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d105      	bne.n	800b4fa <vPortExitCritical+0x46>
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b4f2:	683b      	ldr	r3, [r7, #0]
 800b4f4:	f383 8811 	msr	BASEPRI, r3
}
 800b4f8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b4fa:	bf00      	nop
 800b4fc:	370c      	adds	r7, #12
 800b4fe:	46bd      	mov	sp, r7
 800b500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b504:	4770      	bx	lr
 800b506:	bf00      	nop
 800b508:	20000010 	.word	0x20000010
 800b50c:	00000000 	.word	0x00000000

0800b510 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b510:	f3ef 8009 	mrs	r0, PSP
 800b514:	f3bf 8f6f 	isb	sy
 800b518:	4b15      	ldr	r3, [pc, #84]	; (800b570 <pxCurrentTCBConst>)
 800b51a:	681a      	ldr	r2, [r3, #0]
 800b51c:	f01e 0f10 	tst.w	lr, #16
 800b520:	bf08      	it	eq
 800b522:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b526:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b52a:	6010      	str	r0, [r2, #0]
 800b52c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b530:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b534:	b672      	cpsid	i
 800b536:	f380 8811 	msr	BASEPRI, r0
 800b53a:	f3bf 8f4f 	dsb	sy
 800b53e:	f3bf 8f6f 	isb	sy
 800b542:	b662      	cpsie	i
 800b544:	f7fe ff86 	bl	800a454 <vTaskSwitchContext>
 800b548:	f04f 0000 	mov.w	r0, #0
 800b54c:	f380 8811 	msr	BASEPRI, r0
 800b550:	bc09      	pop	{r0, r3}
 800b552:	6819      	ldr	r1, [r3, #0]
 800b554:	6808      	ldr	r0, [r1, #0]
 800b556:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b55a:	f01e 0f10 	tst.w	lr, #16
 800b55e:	bf08      	it	eq
 800b560:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b564:	f380 8809 	msr	PSP, r0
 800b568:	f3bf 8f6f 	isb	sy
 800b56c:	4770      	bx	lr
 800b56e:	bf00      	nop

0800b570 <pxCurrentTCBConst>:
 800b570:	200076c8 	.word	0x200076c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b574:	bf00      	nop
 800b576:	bf00      	nop

0800b578 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b082      	sub	sp, #8
 800b57c:	af00      	add	r7, sp, #0
	__asm volatile
 800b57e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b582:	b672      	cpsid	i
 800b584:	f383 8811 	msr	BASEPRI, r3
 800b588:	f3bf 8f6f 	isb	sy
 800b58c:	f3bf 8f4f 	dsb	sy
 800b590:	b662      	cpsie	i
 800b592:	607b      	str	r3, [r7, #4]
}
 800b594:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b596:	f7fe fea1 	bl	800a2dc <xTaskIncrementTick>
 800b59a:	4603      	mov	r3, r0
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d003      	beq.n	800b5a8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b5a0:	4b06      	ldr	r3, [pc, #24]	; (800b5bc <SysTick_Handler+0x44>)
 800b5a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5a6:	601a      	str	r2, [r3, #0]
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b5ac:	683b      	ldr	r3, [r7, #0]
 800b5ae:	f383 8811 	msr	BASEPRI, r3
}
 800b5b2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b5b4:	bf00      	nop
 800b5b6:	3708      	adds	r7, #8
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	bd80      	pop	{r7, pc}
 800b5bc:	e000ed04 	.word	0xe000ed04

0800b5c0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b5c0:	b480      	push	{r7}
 800b5c2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b5c4:	4b0b      	ldr	r3, [pc, #44]	; (800b5f4 <vPortSetupTimerInterrupt+0x34>)
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b5ca:	4b0b      	ldr	r3, [pc, #44]	; (800b5f8 <vPortSetupTimerInterrupt+0x38>)
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b5d0:	4b0a      	ldr	r3, [pc, #40]	; (800b5fc <vPortSetupTimerInterrupt+0x3c>)
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	4a0a      	ldr	r2, [pc, #40]	; (800b600 <vPortSetupTimerInterrupt+0x40>)
 800b5d6:	fba2 2303 	umull	r2, r3, r2, r3
 800b5da:	099b      	lsrs	r3, r3, #6
 800b5dc:	4a09      	ldr	r2, [pc, #36]	; (800b604 <vPortSetupTimerInterrupt+0x44>)
 800b5de:	3b01      	subs	r3, #1
 800b5e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b5e2:	4b04      	ldr	r3, [pc, #16]	; (800b5f4 <vPortSetupTimerInterrupt+0x34>)
 800b5e4:	2207      	movs	r2, #7
 800b5e6:	601a      	str	r2, [r3, #0]
}
 800b5e8:	bf00      	nop
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f0:	4770      	bx	lr
 800b5f2:	bf00      	nop
 800b5f4:	e000e010 	.word	0xe000e010
 800b5f8:	e000e018 	.word	0xe000e018
 800b5fc:	20000004 	.word	0x20000004
 800b600:	10624dd3 	.word	0x10624dd3
 800b604:	e000e014 	.word	0xe000e014

0800b608 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b608:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b618 <vPortEnableVFP+0x10>
 800b60c:	6801      	ldr	r1, [r0, #0]
 800b60e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b612:	6001      	str	r1, [r0, #0]
 800b614:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b616:	bf00      	nop
 800b618:	e000ed88 	.word	0xe000ed88

0800b61c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b61c:	b480      	push	{r7}
 800b61e:	b085      	sub	sp, #20
 800b620:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b622:	f3ef 8305 	mrs	r3, IPSR
 800b626:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	2b0f      	cmp	r3, #15
 800b62c:	d916      	bls.n	800b65c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b62e:	4a19      	ldr	r2, [pc, #100]	; (800b694 <vPortValidateInterruptPriority+0x78>)
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	4413      	add	r3, r2
 800b634:	781b      	ldrb	r3, [r3, #0]
 800b636:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b638:	4b17      	ldr	r3, [pc, #92]	; (800b698 <vPortValidateInterruptPriority+0x7c>)
 800b63a:	781b      	ldrb	r3, [r3, #0]
 800b63c:	7afa      	ldrb	r2, [r7, #11]
 800b63e:	429a      	cmp	r2, r3
 800b640:	d20c      	bcs.n	800b65c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800b642:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b646:	b672      	cpsid	i
 800b648:	f383 8811 	msr	BASEPRI, r3
 800b64c:	f3bf 8f6f 	isb	sy
 800b650:	f3bf 8f4f 	dsb	sy
 800b654:	b662      	cpsie	i
 800b656:	607b      	str	r3, [r7, #4]
}
 800b658:	bf00      	nop
 800b65a:	e7fe      	b.n	800b65a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b65c:	4b0f      	ldr	r3, [pc, #60]	; (800b69c <vPortValidateInterruptPriority+0x80>)
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b664:	4b0e      	ldr	r3, [pc, #56]	; (800b6a0 <vPortValidateInterruptPriority+0x84>)
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	429a      	cmp	r2, r3
 800b66a:	d90c      	bls.n	800b686 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800b66c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b670:	b672      	cpsid	i
 800b672:	f383 8811 	msr	BASEPRI, r3
 800b676:	f3bf 8f6f 	isb	sy
 800b67a:	f3bf 8f4f 	dsb	sy
 800b67e:	b662      	cpsie	i
 800b680:	603b      	str	r3, [r7, #0]
}
 800b682:	bf00      	nop
 800b684:	e7fe      	b.n	800b684 <vPortValidateInterruptPriority+0x68>
	}
 800b686:	bf00      	nop
 800b688:	3714      	adds	r7, #20
 800b68a:	46bd      	mov	sp, r7
 800b68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b690:	4770      	bx	lr
 800b692:	bf00      	nop
 800b694:	e000e3f0 	.word	0xe000e3f0
 800b698:	20007cf4 	.word	0x20007cf4
 800b69c:	e000ed0c 	.word	0xe000ed0c
 800b6a0:	20007cf8 	.word	0x20007cf8

0800b6a4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b6a4:	b580      	push	{r7, lr}
 800b6a6:	b08a      	sub	sp, #40	; 0x28
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b6b0:	f7fe fd56 	bl	800a160 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b6b4:	4b5b      	ldr	r3, [pc, #364]	; (800b824 <pvPortMalloc+0x180>)
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d101      	bne.n	800b6c0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b6bc:	f000 f91a 	bl	800b8f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b6c0:	4b59      	ldr	r3, [pc, #356]	; (800b828 <pvPortMalloc+0x184>)
 800b6c2:	681a      	ldr	r2, [r3, #0]
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	4013      	ands	r3, r2
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	f040 8092 	bne.w	800b7f2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d01f      	beq.n	800b714 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800b6d4:	2208      	movs	r2, #8
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	4413      	add	r3, r2
 800b6da:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	f003 0307 	and.w	r3, r3, #7
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d016      	beq.n	800b714 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	f023 0307 	bic.w	r3, r3, #7
 800b6ec:	3308      	adds	r3, #8
 800b6ee:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	f003 0307 	and.w	r3, r3, #7
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d00c      	beq.n	800b714 <pvPortMalloc+0x70>
	__asm volatile
 800b6fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6fe:	b672      	cpsid	i
 800b700:	f383 8811 	msr	BASEPRI, r3
 800b704:	f3bf 8f6f 	isb	sy
 800b708:	f3bf 8f4f 	dsb	sy
 800b70c:	b662      	cpsie	i
 800b70e:	617b      	str	r3, [r7, #20]
}
 800b710:	bf00      	nop
 800b712:	e7fe      	b.n	800b712 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d06b      	beq.n	800b7f2 <pvPortMalloc+0x14e>
 800b71a:	4b44      	ldr	r3, [pc, #272]	; (800b82c <pvPortMalloc+0x188>)
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	687a      	ldr	r2, [r7, #4]
 800b720:	429a      	cmp	r2, r3
 800b722:	d866      	bhi.n	800b7f2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b724:	4b42      	ldr	r3, [pc, #264]	; (800b830 <pvPortMalloc+0x18c>)
 800b726:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b728:	4b41      	ldr	r3, [pc, #260]	; (800b830 <pvPortMalloc+0x18c>)
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b72e:	e004      	b.n	800b73a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800b730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b732:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b73a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b73c:	685b      	ldr	r3, [r3, #4]
 800b73e:	687a      	ldr	r2, [r7, #4]
 800b740:	429a      	cmp	r2, r3
 800b742:	d903      	bls.n	800b74c <pvPortMalloc+0xa8>
 800b744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d1f1      	bne.n	800b730 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b74c:	4b35      	ldr	r3, [pc, #212]	; (800b824 <pvPortMalloc+0x180>)
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b752:	429a      	cmp	r2, r3
 800b754:	d04d      	beq.n	800b7f2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b756:	6a3b      	ldr	r3, [r7, #32]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	2208      	movs	r2, #8
 800b75c:	4413      	add	r3, r2
 800b75e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b762:	681a      	ldr	r2, [r3, #0]
 800b764:	6a3b      	ldr	r3, [r7, #32]
 800b766:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b76a:	685a      	ldr	r2, [r3, #4]
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	1ad2      	subs	r2, r2, r3
 800b770:	2308      	movs	r3, #8
 800b772:	005b      	lsls	r3, r3, #1
 800b774:	429a      	cmp	r2, r3
 800b776:	d921      	bls.n	800b7bc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	4413      	add	r3, r2
 800b77e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b780:	69bb      	ldr	r3, [r7, #24]
 800b782:	f003 0307 	and.w	r3, r3, #7
 800b786:	2b00      	cmp	r3, #0
 800b788:	d00c      	beq.n	800b7a4 <pvPortMalloc+0x100>
	__asm volatile
 800b78a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b78e:	b672      	cpsid	i
 800b790:	f383 8811 	msr	BASEPRI, r3
 800b794:	f3bf 8f6f 	isb	sy
 800b798:	f3bf 8f4f 	dsb	sy
 800b79c:	b662      	cpsie	i
 800b79e:	613b      	str	r3, [r7, #16]
}
 800b7a0:	bf00      	nop
 800b7a2:	e7fe      	b.n	800b7a2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b7a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7a6:	685a      	ldr	r2, [r3, #4]
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	1ad2      	subs	r2, r2, r3
 800b7ac:	69bb      	ldr	r3, [r7, #24]
 800b7ae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b7b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7b2:	687a      	ldr	r2, [r7, #4]
 800b7b4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b7b6:	69b8      	ldr	r0, [r7, #24]
 800b7b8:	f000 f8fe 	bl	800b9b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b7bc:	4b1b      	ldr	r3, [pc, #108]	; (800b82c <pvPortMalloc+0x188>)
 800b7be:	681a      	ldr	r2, [r3, #0]
 800b7c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7c2:	685b      	ldr	r3, [r3, #4]
 800b7c4:	1ad3      	subs	r3, r2, r3
 800b7c6:	4a19      	ldr	r2, [pc, #100]	; (800b82c <pvPortMalloc+0x188>)
 800b7c8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b7ca:	4b18      	ldr	r3, [pc, #96]	; (800b82c <pvPortMalloc+0x188>)
 800b7cc:	681a      	ldr	r2, [r3, #0]
 800b7ce:	4b19      	ldr	r3, [pc, #100]	; (800b834 <pvPortMalloc+0x190>)
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	429a      	cmp	r2, r3
 800b7d4:	d203      	bcs.n	800b7de <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b7d6:	4b15      	ldr	r3, [pc, #84]	; (800b82c <pvPortMalloc+0x188>)
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	4a16      	ldr	r2, [pc, #88]	; (800b834 <pvPortMalloc+0x190>)
 800b7dc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b7de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7e0:	685a      	ldr	r2, [r3, #4]
 800b7e2:	4b11      	ldr	r3, [pc, #68]	; (800b828 <pvPortMalloc+0x184>)
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	431a      	orrs	r2, r3
 800b7e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7ea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b7ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b7f2:	f7fe fcc3 	bl	800a17c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b7f6:	69fb      	ldr	r3, [r7, #28]
 800b7f8:	f003 0307 	and.w	r3, r3, #7
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d00c      	beq.n	800b81a <pvPortMalloc+0x176>
	__asm volatile
 800b800:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b804:	b672      	cpsid	i
 800b806:	f383 8811 	msr	BASEPRI, r3
 800b80a:	f3bf 8f6f 	isb	sy
 800b80e:	f3bf 8f4f 	dsb	sy
 800b812:	b662      	cpsie	i
 800b814:	60fb      	str	r3, [r7, #12]
}
 800b816:	bf00      	nop
 800b818:	e7fe      	b.n	800b818 <pvPortMalloc+0x174>
	return pvReturn;
 800b81a:	69fb      	ldr	r3, [r7, #28]
}
 800b81c:	4618      	mov	r0, r3
 800b81e:	3728      	adds	r7, #40	; 0x28
 800b820:	46bd      	mov	sp, r7
 800b822:	bd80      	pop	{r7, pc}
 800b824:	2000b904 	.word	0x2000b904
 800b828:	2000b910 	.word	0x2000b910
 800b82c:	2000b908 	.word	0x2000b908
 800b830:	2000b8fc 	.word	0x2000b8fc
 800b834:	2000b90c 	.word	0x2000b90c

0800b838 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b086      	sub	sp, #24
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d04c      	beq.n	800b8e4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b84a:	2308      	movs	r3, #8
 800b84c:	425b      	negs	r3, r3
 800b84e:	697a      	ldr	r2, [r7, #20]
 800b850:	4413      	add	r3, r2
 800b852:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b854:	697b      	ldr	r3, [r7, #20]
 800b856:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b858:	693b      	ldr	r3, [r7, #16]
 800b85a:	685a      	ldr	r2, [r3, #4]
 800b85c:	4b23      	ldr	r3, [pc, #140]	; (800b8ec <vPortFree+0xb4>)
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	4013      	ands	r3, r2
 800b862:	2b00      	cmp	r3, #0
 800b864:	d10c      	bne.n	800b880 <vPortFree+0x48>
	__asm volatile
 800b866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b86a:	b672      	cpsid	i
 800b86c:	f383 8811 	msr	BASEPRI, r3
 800b870:	f3bf 8f6f 	isb	sy
 800b874:	f3bf 8f4f 	dsb	sy
 800b878:	b662      	cpsie	i
 800b87a:	60fb      	str	r3, [r7, #12]
}
 800b87c:	bf00      	nop
 800b87e:	e7fe      	b.n	800b87e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b880:	693b      	ldr	r3, [r7, #16]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d00c      	beq.n	800b8a2 <vPortFree+0x6a>
	__asm volatile
 800b888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b88c:	b672      	cpsid	i
 800b88e:	f383 8811 	msr	BASEPRI, r3
 800b892:	f3bf 8f6f 	isb	sy
 800b896:	f3bf 8f4f 	dsb	sy
 800b89a:	b662      	cpsie	i
 800b89c:	60bb      	str	r3, [r7, #8]
}
 800b89e:	bf00      	nop
 800b8a0:	e7fe      	b.n	800b8a0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b8a2:	693b      	ldr	r3, [r7, #16]
 800b8a4:	685a      	ldr	r2, [r3, #4]
 800b8a6:	4b11      	ldr	r3, [pc, #68]	; (800b8ec <vPortFree+0xb4>)
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	4013      	ands	r3, r2
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d019      	beq.n	800b8e4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b8b0:	693b      	ldr	r3, [r7, #16]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d115      	bne.n	800b8e4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b8b8:	693b      	ldr	r3, [r7, #16]
 800b8ba:	685a      	ldr	r2, [r3, #4]
 800b8bc:	4b0b      	ldr	r3, [pc, #44]	; (800b8ec <vPortFree+0xb4>)
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	43db      	mvns	r3, r3
 800b8c2:	401a      	ands	r2, r3
 800b8c4:	693b      	ldr	r3, [r7, #16]
 800b8c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b8c8:	f7fe fc4a 	bl	800a160 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b8cc:	693b      	ldr	r3, [r7, #16]
 800b8ce:	685a      	ldr	r2, [r3, #4]
 800b8d0:	4b07      	ldr	r3, [pc, #28]	; (800b8f0 <vPortFree+0xb8>)
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	4413      	add	r3, r2
 800b8d6:	4a06      	ldr	r2, [pc, #24]	; (800b8f0 <vPortFree+0xb8>)
 800b8d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b8da:	6938      	ldr	r0, [r7, #16]
 800b8dc:	f000 f86c 	bl	800b9b8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b8e0:	f7fe fc4c 	bl	800a17c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b8e4:	bf00      	nop
 800b8e6:	3718      	adds	r7, #24
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	bd80      	pop	{r7, pc}
 800b8ec:	2000b910 	.word	0x2000b910
 800b8f0:	2000b908 	.word	0x2000b908

0800b8f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b8f4:	b480      	push	{r7}
 800b8f6:	b085      	sub	sp, #20
 800b8f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b8fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b8fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b900:	4b27      	ldr	r3, [pc, #156]	; (800b9a0 <prvHeapInit+0xac>)
 800b902:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	f003 0307 	and.w	r3, r3, #7
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d00c      	beq.n	800b928 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	3307      	adds	r3, #7
 800b912:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	f023 0307 	bic.w	r3, r3, #7
 800b91a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b91c:	68ba      	ldr	r2, [r7, #8]
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	1ad3      	subs	r3, r2, r3
 800b922:	4a1f      	ldr	r2, [pc, #124]	; (800b9a0 <prvHeapInit+0xac>)
 800b924:	4413      	add	r3, r2
 800b926:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b92c:	4a1d      	ldr	r2, [pc, #116]	; (800b9a4 <prvHeapInit+0xb0>)
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b932:	4b1c      	ldr	r3, [pc, #112]	; (800b9a4 <prvHeapInit+0xb0>)
 800b934:	2200      	movs	r2, #0
 800b936:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	68ba      	ldr	r2, [r7, #8]
 800b93c:	4413      	add	r3, r2
 800b93e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b940:	2208      	movs	r2, #8
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	1a9b      	subs	r3, r3, r2
 800b946:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	f023 0307 	bic.w	r3, r3, #7
 800b94e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	4a15      	ldr	r2, [pc, #84]	; (800b9a8 <prvHeapInit+0xb4>)
 800b954:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b956:	4b14      	ldr	r3, [pc, #80]	; (800b9a8 <prvHeapInit+0xb4>)
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	2200      	movs	r2, #0
 800b95c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b95e:	4b12      	ldr	r3, [pc, #72]	; (800b9a8 <prvHeapInit+0xb4>)
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	2200      	movs	r2, #0
 800b964:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b96a:	683b      	ldr	r3, [r7, #0]
 800b96c:	68fa      	ldr	r2, [r7, #12]
 800b96e:	1ad2      	subs	r2, r2, r3
 800b970:	683b      	ldr	r3, [r7, #0]
 800b972:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b974:	4b0c      	ldr	r3, [pc, #48]	; (800b9a8 <prvHeapInit+0xb4>)
 800b976:	681a      	ldr	r2, [r3, #0]
 800b978:	683b      	ldr	r3, [r7, #0]
 800b97a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b97c:	683b      	ldr	r3, [r7, #0]
 800b97e:	685b      	ldr	r3, [r3, #4]
 800b980:	4a0a      	ldr	r2, [pc, #40]	; (800b9ac <prvHeapInit+0xb8>)
 800b982:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b984:	683b      	ldr	r3, [r7, #0]
 800b986:	685b      	ldr	r3, [r3, #4]
 800b988:	4a09      	ldr	r2, [pc, #36]	; (800b9b0 <prvHeapInit+0xbc>)
 800b98a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b98c:	4b09      	ldr	r3, [pc, #36]	; (800b9b4 <prvHeapInit+0xc0>)
 800b98e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b992:	601a      	str	r2, [r3, #0]
}
 800b994:	bf00      	nop
 800b996:	3714      	adds	r7, #20
 800b998:	46bd      	mov	sp, r7
 800b99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99e:	4770      	bx	lr
 800b9a0:	20007cfc 	.word	0x20007cfc
 800b9a4:	2000b8fc 	.word	0x2000b8fc
 800b9a8:	2000b904 	.word	0x2000b904
 800b9ac:	2000b90c 	.word	0x2000b90c
 800b9b0:	2000b908 	.word	0x2000b908
 800b9b4:	2000b910 	.word	0x2000b910

0800b9b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b9b8:	b480      	push	{r7}
 800b9ba:	b085      	sub	sp, #20
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b9c0:	4b28      	ldr	r3, [pc, #160]	; (800ba64 <prvInsertBlockIntoFreeList+0xac>)
 800b9c2:	60fb      	str	r3, [r7, #12]
 800b9c4:	e002      	b.n	800b9cc <prvInsertBlockIntoFreeList+0x14>
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	60fb      	str	r3, [r7, #12]
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	687a      	ldr	r2, [r7, #4]
 800b9d2:	429a      	cmp	r2, r3
 800b9d4:	d8f7      	bhi.n	800b9c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	685b      	ldr	r3, [r3, #4]
 800b9de:	68ba      	ldr	r2, [r7, #8]
 800b9e0:	4413      	add	r3, r2
 800b9e2:	687a      	ldr	r2, [r7, #4]
 800b9e4:	429a      	cmp	r2, r3
 800b9e6:	d108      	bne.n	800b9fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	685a      	ldr	r2, [r3, #4]
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	685b      	ldr	r3, [r3, #4]
 800b9f0:	441a      	add	r2, r3
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	685b      	ldr	r3, [r3, #4]
 800ba02:	68ba      	ldr	r2, [r7, #8]
 800ba04:	441a      	add	r2, r3
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	429a      	cmp	r2, r3
 800ba0c:	d118      	bne.n	800ba40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	681a      	ldr	r2, [r3, #0]
 800ba12:	4b15      	ldr	r3, [pc, #84]	; (800ba68 <prvInsertBlockIntoFreeList+0xb0>)
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	429a      	cmp	r2, r3
 800ba18:	d00d      	beq.n	800ba36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	685a      	ldr	r2, [r3, #4]
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	685b      	ldr	r3, [r3, #4]
 800ba24:	441a      	add	r2, r3
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	681a      	ldr	r2, [r3, #0]
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	601a      	str	r2, [r3, #0]
 800ba34:	e008      	b.n	800ba48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ba36:	4b0c      	ldr	r3, [pc, #48]	; (800ba68 <prvInsertBlockIntoFreeList+0xb0>)
 800ba38:	681a      	ldr	r2, [r3, #0]
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	601a      	str	r2, [r3, #0]
 800ba3e:	e003      	b.n	800ba48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	681a      	ldr	r2, [r3, #0]
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ba48:	68fa      	ldr	r2, [r7, #12]
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	429a      	cmp	r2, r3
 800ba4e:	d002      	beq.n	800ba56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	687a      	ldr	r2, [r7, #4]
 800ba54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ba56:	bf00      	nop
 800ba58:	3714      	adds	r7, #20
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba60:	4770      	bx	lr
 800ba62:	bf00      	nop
 800ba64:	2000b8fc 	.word	0x2000b8fc
 800ba68:	2000b904 	.word	0x2000b904

0800ba6c <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Control>:
 800ba6c:	4b04      	ldr	r3, [pc, #16]	; (800ba80 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Control+0x14>)
 800ba6e:	681a      	ldr	r2, [r3, #0]
 800ba70:	b10a      	cbz	r2, 800ba76 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Control+0xa>
 800ba72:	4803      	ldr	r0, [pc, #12]	; (800ba80 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Control+0x14>)
 800ba74:	4770      	bx	lr
 800ba76:	4a03      	ldr	r2, [pc, #12]	; (800ba84 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Control+0x18>)
 800ba78:	4801      	ldr	r0, [pc, #4]	; (800ba80 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Control+0x14>)
 800ba7a:	6812      	ldr	r2, [r2, #0]
 800ba7c:	601a      	str	r2, [r3, #0]
 800ba7e:	4770      	bx	lr
 800ba80:	2000001c 	.word	0x2000001c
 800ba84:	20000a10 	.word	0x20000a10

0800ba88 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Control_Request>:
 800ba88:	4b06      	ldr	r3, [pc, #24]	; (800baa4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x1c>)
 800ba8a:	4807      	ldr	r0, [pc, #28]	; (800baa8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x20>)
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	4907      	ldr	r1, [pc, #28]	; (800baac <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x24>)
 800ba90:	4a07      	ldr	r2, [pc, #28]	; (800bab0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x28>)
 800ba92:	b410      	push	{r4}
 800ba94:	4c07      	ldr	r4, [pc, #28]	; (800bab4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x2c>)
 800ba96:	6003      	str	r3, [r0, #0]
 800ba98:	6023      	str	r3, [r4, #0]
 800ba9a:	600b      	str	r3, [r1, #0]
 800ba9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800baa0:	6013      	str	r3, [r2, #0]
 800baa2:	4770      	bx	lr
 800baa4:	20000a10 	.word	0x20000a10
 800baa8:	20000090 	.word	0x20000090
 800baac:	20000050 	.word	0x20000050
 800bab0:	2000001c 	.word	0x2000001c
 800bab4:	20000078 	.word	0x20000078

0800bab8 <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__DirectAccess>:
 800bab8:	4b04      	ldr	r3, [pc, #16]	; (800bacc <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__DirectAccess+0x14>)
 800baba:	681a      	ldr	r2, [r3, #0]
 800babc:	b10a      	cbz	r2, 800bac2 <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__DirectAccess+0xa>
 800babe:	4803      	ldr	r0, [pc, #12]	; (800bacc <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__DirectAccess+0x14>)
 800bac0:	4770      	bx	lr
 800bac2:	4a03      	ldr	r2, [pc, #12]	; (800bad0 <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__DirectAccess+0x18>)
 800bac4:	4801      	ldr	r0, [pc, #4]	; (800bacc <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__DirectAccess+0x14>)
 800bac6:	6812      	ldr	r2, [r2, #0]
 800bac8:	601a      	str	r2, [r3, #0]
 800baca:	4770      	bx	lr
 800bacc:	200000b0 	.word	0x200000b0
 800bad0:	20000a10 	.word	0x20000a10

0800bad4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__DirectAccess>:
 800bad4:	4a02      	ldr	r2, [pc, #8]	; (800bae0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__DirectAccess+0xc>)
 800bad6:	4b03      	ldr	r3, [pc, #12]	; (800bae4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__DirectAccess+0x10>)
 800bad8:	6812      	ldr	r2, [r2, #0]
 800bada:	601a      	str	r2, [r3, #0]
 800badc:	4770      	bx	lr
 800bade:	bf00      	nop
 800bae0:	20000a10 	.word	0x20000a10
 800bae4:	200000b0 	.word	0x200000b0

0800bae8 <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Feedback>:
 800bae8:	4b04      	ldr	r3, [pc, #16]	; (800bafc <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Feedback+0x14>)
 800baea:	681a      	ldr	r2, [r3, #0]
 800baec:	b10a      	cbz	r2, 800baf2 <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Feedback+0xa>
 800baee:	4803      	ldr	r0, [pc, #12]	; (800bafc <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Feedback+0x14>)
 800baf0:	4770      	bx	lr
 800baf2:	4a03      	ldr	r2, [pc, #12]	; (800bb00 <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Feedback+0x18>)
 800baf4:	4801      	ldr	r0, [pc, #4]	; (800bafc <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Feedback+0x14>)
 800baf6:	6812      	ldr	r2, [r2, #0]
 800baf8:	601a      	str	r2, [r3, #0]
 800bafa:	4770      	bx	lr
 800bafc:	200000d0 	.word	0x200000d0
 800bb00:	20000a10 	.word	0x20000a10

0800bb04 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Feedback>:
 800bb04:	4a02      	ldr	r2, [pc, #8]	; (800bb10 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Feedback+0xc>)
 800bb06:	4b03      	ldr	r3, [pc, #12]	; (800bb14 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Feedback+0x10>)
 800bb08:	6812      	ldr	r2, [r2, #0]
 800bb0a:	601a      	str	r2, [r3, #0]
 800bb0c:	4770      	bx	lr
 800bb0e:	bf00      	nop
 800bb10:	20000a10 	.word	0x20000a10
 800bb14:	200000d0 	.word	0x200000d0

0800bb18 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Setup>:
 800bb18:	4b04      	ldr	r3, [pc, #16]	; (800bb2c <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Setup+0x14>)
 800bb1a:	681a      	ldr	r2, [r3, #0]
 800bb1c:	b10a      	cbz	r2, 800bb22 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Setup+0xa>
 800bb1e:	4803      	ldr	r0, [pc, #12]	; (800bb2c <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Setup+0x14>)
 800bb20:	4770      	bx	lr
 800bb22:	4a03      	ldr	r2, [pc, #12]	; (800bb30 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Setup+0x18>)
 800bb24:	4801      	ldr	r0, [pc, #4]	; (800bb2c <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Setup+0x14>)
 800bb26:	6812      	ldr	r2, [r2, #0]
 800bb28:	601a      	str	r2, [r3, #0]
 800bb2a:	4770      	bx	lr
 800bb2c:	200000f0 	.word	0x200000f0
 800bb30:	20000a10 	.word	0x20000a10

0800bb34 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Setup_Request>:
 800bb34:	4b06      	ldr	r3, [pc, #24]	; (800bb50 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x1c>)
 800bb36:	4807      	ldr	r0, [pc, #28]	; (800bb54 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x20>)
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	4907      	ldr	r1, [pc, #28]	; (800bb58 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x24>)
 800bb3c:	4a07      	ldr	r2, [pc, #28]	; (800bb5c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x28>)
 800bb3e:	b410      	push	{r4}
 800bb40:	4c07      	ldr	r4, [pc, #28]	; (800bb60 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x2c>)
 800bb42:	6003      	str	r3, [r0, #0]
 800bb44:	6023      	str	r3, [r4, #0]
 800bb46:	600b      	str	r3, [r1, #0]
 800bb48:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb4c:	6013      	str	r3, [r2, #0]
 800bb4e:	4770      	bx	lr
 800bb50:	20000a10 	.word	0x20000a10
 800bb54:	20000164 	.word	0x20000164
 800bb58:	20000124 	.word	0x20000124
 800bb5c:	200000f0 	.word	0x200000f0
 800bb60:	2000014c 	.word	0x2000014c

0800bb64 <racs_services__srv__Control_Request__rosidl_typesupport_introspection_c__size_function__Control_Request__encoders>:
 800bb64:	2006      	movs	r0, #6
 800bb66:	4770      	bx	lr

0800bb68 <racs_services__srv__Control_Request__rosidl_typesupport_introspection_c__get_const_function__Control_Request__encoders>:
 800bb68:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800bb6c:	4770      	bx	lr
 800bb6e:	bf00      	nop

0800bb70 <racs_services__srv__Control_Request__rosidl_typesupport_introspection_c__fetch_function__Control_Request__encoders>:
 800bb70:	f930 3011 	ldrsh.w	r3, [r0, r1, lsl #1]
 800bb74:	8013      	strh	r3, [r2, #0]
 800bb76:	4770      	bx	lr

0800bb78 <racs_services__srv__Control_Request__rosidl_typesupport_introspection_c__assign_function__Control_Request__encoders>:
 800bb78:	f9b2 3000 	ldrsh.w	r3, [r2]
 800bb7c:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 800bb80:	4770      	bx	lr
 800bb82:	bf00      	nop

0800bb84 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__size_function__Control_Event__request>:
 800bb84:	6840      	ldr	r0, [r0, #4]
 800bb86:	4770      	bx	lr

0800bb88 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__get_const_function__Control_Event__request>:
 800bb88:	6800      	ldr	r0, [r0, #0]
 800bb8a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800bb8e:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800bb92:	4770      	bx	lr

0800bb94 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__fetch_function__Control_Event__request>:
 800bb94:	6800      	ldr	r0, [r0, #0]
 800bb96:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800bb9a:	eb00 0341 	add.w	r3, r0, r1, lsl #1
 800bb9e:	f850 c011 	ldr.w	ip, [r0, r1, lsl #1]
 800bba2:	6858      	ldr	r0, [r3, #4]
 800bba4:	6899      	ldr	r1, [r3, #8]
 800bba6:	f8c2 c000 	str.w	ip, [r2]
 800bbaa:	6050      	str	r0, [r2, #4]
 800bbac:	6091      	str	r1, [r2, #8]
 800bbae:	899b      	ldrh	r3, [r3, #12]
 800bbb0:	8193      	strh	r3, [r2, #12]
 800bbb2:	4770      	bx	lr

0800bbb4 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__assign_function__Control_Event__request>:
 800bbb4:	6800      	ldr	r0, [r0, #0]
 800bbb6:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800bbba:	f8d2 c008 	ldr.w	ip, [r2, #8]
 800bbbe:	eb00 0341 	add.w	r3, r0, r1, lsl #1
 800bbc2:	b510      	push	{r4, lr}
 800bbc4:	6814      	ldr	r4, [r2, #0]
 800bbc6:	f8d2 e004 	ldr.w	lr, [r2, #4]
 800bbca:	f840 4011 	str.w	r4, [r0, r1, lsl #1]
 800bbce:	f8c3 e004 	str.w	lr, [r3, #4]
 800bbd2:	f8c3 c008 	str.w	ip, [r3, #8]
 800bbd6:	8992      	ldrh	r2, [r2, #12]
 800bbd8:	819a      	strh	r2, [r3, #12]
 800bbda:	bd10      	pop	{r4, pc}

0800bbdc <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__size_function__Control_Event__response>:
 800bbdc:	6840      	ldr	r0, [r0, #4]
 800bbde:	4770      	bx	lr

0800bbe0 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__get_const_function__Control_Event__response>:
 800bbe0:	6800      	ldr	r0, [r0, #0]
 800bbe2:	4408      	add	r0, r1
 800bbe4:	4770      	bx	lr
 800bbe6:	bf00      	nop

0800bbe8 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__fetch_function__Control_Event__response>:
 800bbe8:	6803      	ldr	r3, [r0, #0]
 800bbea:	5c5b      	ldrb	r3, [r3, r1]
 800bbec:	7013      	strb	r3, [r2, #0]
 800bbee:	4770      	bx	lr

0800bbf0 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__assign_function__Control_Event__response>:
 800bbf0:	6803      	ldr	r3, [r0, #0]
 800bbf2:	7812      	ldrb	r2, [r2, #0]
 800bbf4:	545a      	strb	r2, [r3, r1]
 800bbf6:	4770      	bx	lr

0800bbf8 <racs_services__srv__Control_Request__rosidl_typesupport_introspection_c__Control_Request_init_function>:
 800bbf8:	f007 bf26 	b.w	8013a48 <racs_services__srv__Control_Request__init>

0800bbfc <racs_services__srv__Control_Request__rosidl_typesupport_introspection_c__Control_Request_fini_function>:
 800bbfc:	f007 bf28 	b.w	8013a50 <racs_services__srv__Control_Request__fini>

0800bc00 <racs_services__srv__Control_Response__rosidl_typesupport_introspection_c__Control_Response_init_function>:
 800bc00:	f007 bf68 	b.w	8013ad4 <racs_services__srv__Control_Response__init>

0800bc04 <racs_services__srv__Control_Response__rosidl_typesupport_introspection_c__Control_Response_fini_function>:
 800bc04:	f007 bf6a 	b.w	8013adc <racs_services__srv__Control_Response__fini>

0800bc08 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__Control_Event_init_function>:
 800bc08:	f007 bfa0 	b.w	8013b4c <racs_services__srv__Control_Event__init>

0800bc0c <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__Control_Event_fini_function>:
 800bc0c:	f007 bfc0 	b.w	8013b90 <racs_services__srv__Control_Event__fini>

0800bc10 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__resize_function__Control_Event__request>:
 800bc10:	b510      	push	{r4, lr}
 800bc12:	4604      	mov	r4, r0
 800bc14:	b082      	sub	sp, #8
 800bc16:	9101      	str	r1, [sp, #4]
 800bc18:	f007 ff48 	bl	8013aac <racs_services__srv__Control_Request__Sequence__fini>
 800bc1c:	9901      	ldr	r1, [sp, #4]
 800bc1e:	4620      	mov	r0, r4
 800bc20:	b002      	add	sp, #8
 800bc22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc26:	f007 bf27 	b.w	8013a78 <racs_services__srv__Control_Request__Sequence__init>
 800bc2a:	bf00      	nop

0800bc2c <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__resize_function__Control_Event__response>:
 800bc2c:	b510      	push	{r4, lr}
 800bc2e:	4604      	mov	r4, r0
 800bc30:	b082      	sub	sp, #8
 800bc32:	9101      	str	r1, [sp, #4]
 800bc34:	f007 ff76 	bl	8013b24 <racs_services__srv__Control_Response__Sequence__fini>
 800bc38:	9901      	ldr	r1, [sp, #4]
 800bc3a:	4620      	mov	r0, r4
 800bc3c:	b002      	add	sp, #8
 800bc3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc42:	f007 bf55 	b.w	8013af0 <racs_services__srv__Control_Response__Sequence__init>
 800bc46:	bf00      	nop

0800bc48 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__get_function__Control_Event__response>:
 800bc48:	6800      	ldr	r0, [r0, #0]
 800bc4a:	4408      	add	r0, r1
 800bc4c:	4770      	bx	lr
 800bc4e:	bf00      	nop

0800bc50 <racs_services__srv__Control_Request__rosidl_typesupport_introspection_c__get_function__Control_Request__encoders>:
 800bc50:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800bc54:	4770      	bx	lr
 800bc56:	bf00      	nop

0800bc58 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__get_function__Control_Event__request>:
 800bc58:	6800      	ldr	r0, [r0, #0]
 800bc5a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800bc5e:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800bc62:	4770      	bx	lr

0800bc64 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Request>:
 800bc64:	4b04      	ldr	r3, [pc, #16]	; (800bc78 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x14>)
 800bc66:	681a      	ldr	r2, [r3, #0]
 800bc68:	b10a      	cbz	r2, 800bc6e <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Request+0xa>
 800bc6a:	4803      	ldr	r0, [pc, #12]	; (800bc78 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x14>)
 800bc6c:	4770      	bx	lr
 800bc6e:	4a03      	ldr	r2, [pc, #12]	; (800bc7c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x18>)
 800bc70:	4801      	ldr	r0, [pc, #4]	; (800bc78 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x14>)
 800bc72:	6812      	ldr	r2, [r2, #0]
 800bc74:	601a      	str	r2, [r3, #0]
 800bc76:	4770      	bx	lr
 800bc78:	200002fc 	.word	0x200002fc
 800bc7c:	20000a14 	.word	0x20000a14

0800bc80 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Response>:
 800bc80:	4b04      	ldr	r3, [pc, #16]	; (800bc94 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Response+0x14>)
 800bc82:	681a      	ldr	r2, [r3, #0]
 800bc84:	b10a      	cbz	r2, 800bc8a <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Response+0xa>
 800bc86:	4803      	ldr	r0, [pc, #12]	; (800bc94 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Response+0x14>)
 800bc88:	4770      	bx	lr
 800bc8a:	4a03      	ldr	r2, [pc, #12]	; (800bc98 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Response+0x18>)
 800bc8c:	4801      	ldr	r0, [pc, #4]	; (800bc94 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Response+0x14>)
 800bc8e:	6812      	ldr	r2, [r2, #0]
 800bc90:	601a      	str	r2, [r3, #0]
 800bc92:	4770      	bx	lr
 800bc94:	20000350 	.word	0x20000350
 800bc98:	20000a14 	.word	0x20000a14

0800bc9c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event>:
 800bc9c:	b508      	push	{r3, lr}
 800bc9e:	f002 febf 	bl	800ea20 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800bca2:	4913      	ldr	r1, [pc, #76]	; (800bcf0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x54>)
 800bca4:	4b13      	ldr	r3, [pc, #76]	; (800bcf4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x58>)
 800bca6:	680a      	ldr	r2, [r1, #0]
 800bca8:	60d8      	str	r0, [r3, #12]
 800bcaa:	b152      	cbz	r2, 800bcc2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x26>
 800bcac:	4a12      	ldr	r2, [pc, #72]	; (800bcf8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x5c>)
 800bcae:	6499      	str	r1, [r3, #72]	; 0x48
 800bcb0:	6811      	ldr	r1, [r2, #0]
 800bcb2:	b171      	cbz	r1, 800bcd2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x36>
 800bcb4:	4911      	ldr	r1, [pc, #68]	; (800bcfc <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x60>)
 800bcb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800bcba:	680b      	ldr	r3, [r1, #0]
 800bcbc:	b193      	cbz	r3, 800bce4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x48>
 800bcbe:	480f      	ldr	r0, [pc, #60]	; (800bcfc <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x60>)
 800bcc0:	bd08      	pop	{r3, pc}
 800bcc2:	4a0f      	ldr	r2, [pc, #60]	; (800bd00 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x64>)
 800bcc4:	6499      	str	r1, [r3, #72]	; 0x48
 800bcc6:	6812      	ldr	r2, [r2, #0]
 800bcc8:	600a      	str	r2, [r1, #0]
 800bcca:	4a0b      	ldr	r2, [pc, #44]	; (800bcf8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x5c>)
 800bccc:	6811      	ldr	r1, [r2, #0]
 800bcce:	2900      	cmp	r1, #0
 800bcd0:	d1f0      	bne.n	800bcb4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x18>
 800bcd2:	490b      	ldr	r1, [pc, #44]	; (800bd00 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x64>)
 800bcd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800bcd8:	6809      	ldr	r1, [r1, #0]
 800bcda:	6011      	str	r1, [r2, #0]
 800bcdc:	4907      	ldr	r1, [pc, #28]	; (800bcfc <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x60>)
 800bcde:	680b      	ldr	r3, [r1, #0]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d1ec      	bne.n	800bcbe <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x22>
 800bce4:	4b06      	ldr	r3, [pc, #24]	; (800bd00 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x64>)
 800bce6:	4805      	ldr	r0, [pc, #20]	; (800bcfc <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x60>)
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	600b      	str	r3, [r1, #0]
 800bcec:	bd08      	pop	{r3, pc}
 800bcee:	bf00      	nop
 800bcf0:	200002fc 	.word	0x200002fc
 800bcf4:	2000017c 	.word	0x2000017c
 800bcf8:	20000350 	.word	0x20000350
 800bcfc:	20000230 	.word	0x20000230
 800bd00:	20000a14 	.word	0x20000a14

0800bd04 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control>:
 800bd04:	4b25      	ldr	r3, [pc, #148]	; (800bd9c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x98>)
 800bd06:	681a      	ldr	r2, [r3, #0]
 800bd08:	b510      	push	{r4, lr}
 800bd0a:	b142      	cbz	r2, 800bd1e <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x1a>
 800bd0c:	685c      	ldr	r4, [r3, #4]
 800bd0e:	68a3      	ldr	r3, [r4, #8]
 800bd10:	b163      	cbz	r3, 800bd2c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x28>
 800bd12:	68e3      	ldr	r3, [r4, #12]
 800bd14:	b193      	cbz	r3, 800bd3c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x38>
 800bd16:	6923      	ldr	r3, [r4, #16]
 800bd18:	b1c3      	cbz	r3, 800bd4c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x48>
 800bd1a:	4820      	ldr	r0, [pc, #128]	; (800bd9c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x98>)
 800bd1c:	bd10      	pop	{r4, pc}
 800bd1e:	4a20      	ldr	r2, [pc, #128]	; (800bda0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x9c>)
 800bd20:	685c      	ldr	r4, [r3, #4]
 800bd22:	6812      	ldr	r2, [r2, #0]
 800bd24:	601a      	str	r2, [r3, #0]
 800bd26:	68a3      	ldr	r3, [r4, #8]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d1f2      	bne.n	800bd12 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0xe>
 800bd2c:	4a1d      	ldr	r2, [pc, #116]	; (800bda4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0xa0>)
 800bd2e:	6813      	ldr	r3, [r2, #0]
 800bd30:	b303      	cbz	r3, 800bd74 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x70>
 800bd32:	6853      	ldr	r3, [r2, #4]
 800bd34:	60a3      	str	r3, [r4, #8]
 800bd36:	68e3      	ldr	r3, [r4, #12]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d1ec      	bne.n	800bd16 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x12>
 800bd3c:	4b1a      	ldr	r3, [pc, #104]	; (800bda8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0xa4>)
 800bd3e:	681a      	ldr	r2, [r3, #0]
 800bd40:	b1e2      	cbz	r2, 800bd7c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x78>
 800bd42:	685b      	ldr	r3, [r3, #4]
 800bd44:	60e3      	str	r3, [r4, #12]
 800bd46:	6923      	ldr	r3, [r4, #16]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d1e6      	bne.n	800bd1a <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x16>
 800bd4c:	f002 fe68 	bl	800ea20 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800bd50:	4a14      	ldr	r2, [pc, #80]	; (800bda4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0xa0>)
 800bd52:	4916      	ldr	r1, [pc, #88]	; (800bdac <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0xa8>)
 800bd54:	6813      	ldr	r3, [r2, #0]
 800bd56:	60c8      	str	r0, [r1, #12]
 800bd58:	b1e3      	cbz	r3, 800bd94 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x90>
 800bd5a:	4b13      	ldr	r3, [pc, #76]	; (800bda8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0xa4>)
 800bd5c:	648a      	str	r2, [r1, #72]	; 0x48
 800bd5e:	681a      	ldr	r2, [r3, #0]
 800bd60:	b1a2      	cbz	r2, 800bd8c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x88>
 800bd62:	4a13      	ldr	r2, [pc, #76]	; (800bdb0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0xac>)
 800bd64:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 800bd68:	6813      	ldr	r3, [r2, #0]
 800bd6a:	b15b      	cbz	r3, 800bd84 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x80>
 800bd6c:	6853      	ldr	r3, [r2, #4]
 800bd6e:	480b      	ldr	r0, [pc, #44]	; (800bd9c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x98>)
 800bd70:	6123      	str	r3, [r4, #16]
 800bd72:	bd10      	pop	{r4, pc}
 800bd74:	4b0a      	ldr	r3, [pc, #40]	; (800bda0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x9c>)
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	6013      	str	r3, [r2, #0]
 800bd7a:	e7da      	b.n	800bd32 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x2e>
 800bd7c:	4a08      	ldr	r2, [pc, #32]	; (800bda0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x9c>)
 800bd7e:	6812      	ldr	r2, [r2, #0]
 800bd80:	601a      	str	r2, [r3, #0]
 800bd82:	e7de      	b.n	800bd42 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x3e>
 800bd84:	4b06      	ldr	r3, [pc, #24]	; (800bda0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x9c>)
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	6013      	str	r3, [r2, #0]
 800bd8a:	e7ef      	b.n	800bd6c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x68>
 800bd8c:	4a04      	ldr	r2, [pc, #16]	; (800bda0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x9c>)
 800bd8e:	6812      	ldr	r2, [r2, #0]
 800bd90:	601a      	str	r2, [r3, #0]
 800bd92:	e7e6      	b.n	800bd62 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x5e>
 800bd94:	4b02      	ldr	r3, [pc, #8]	; (800bda0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x9c>)
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	6013      	str	r3, [r2, #0]
 800bd9a:	e7de      	b.n	800bd5a <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x56>
 800bd9c:	2000037c 	.word	0x2000037c
 800bda0:	20000a14 	.word	0x20000a14
 800bda4:	200002fc 	.word	0x200002fc
 800bda8:	20000350 	.word	0x20000350
 800bdac:	2000017c 	.word	0x2000017c
 800bdb0:	20000230 	.word	0x20000230

0800bdb4 <racs_services__msg__DirectAccess__rosidl_typesupport_introspection_c__size_function__DirectAccess__pwms>:
 800bdb4:	2006      	movs	r0, #6
 800bdb6:	4770      	bx	lr

0800bdb8 <racs_services__msg__DirectAccess__rosidl_typesupport_introspection_c__get_const_function__DirectAccess__pwms>:
 800bdb8:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800bdbc:	4770      	bx	lr
 800bdbe:	bf00      	nop

0800bdc0 <racs_services__msg__DirectAccess__rosidl_typesupport_introspection_c__fetch_function__DirectAccess__pwms>:
 800bdc0:	f930 3011 	ldrsh.w	r3, [r0, r1, lsl #1]
 800bdc4:	8013      	strh	r3, [r2, #0]
 800bdc6:	4770      	bx	lr

0800bdc8 <racs_services__msg__DirectAccess__rosidl_typesupport_introspection_c__assign_function__DirectAccess__pwms>:
 800bdc8:	f9b2 3000 	ldrsh.w	r3, [r2]
 800bdcc:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 800bdd0:	4770      	bx	lr
 800bdd2:	bf00      	nop

0800bdd4 <racs_services__msg__DirectAccess__rosidl_typesupport_introspection_c__DirectAccess_init_function>:
 800bdd4:	f007 bf9c 	b.w	8013d10 <racs_services__msg__DirectAccess__init>

0800bdd8 <racs_services__msg__DirectAccess__rosidl_typesupport_introspection_c__DirectAccess_fini_function>:
 800bdd8:	f007 bf9e 	b.w	8013d18 <racs_services__msg__DirectAccess__fini>

0800bddc <racs_services__msg__DirectAccess__rosidl_typesupport_introspection_c__get_function__DirectAccess__pwms>:
 800bddc:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800bde0:	4770      	bx	lr
 800bde2:	bf00      	nop

0800bde4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__DirectAccess>:
 800bde4:	4b04      	ldr	r3, [pc, #16]	; (800bdf8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__DirectAccess+0x14>)
 800bde6:	681a      	ldr	r2, [r3, #0]
 800bde8:	b10a      	cbz	r2, 800bdee <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__DirectAccess+0xa>
 800bdea:	4803      	ldr	r0, [pc, #12]	; (800bdf8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__DirectAccess+0x14>)
 800bdec:	4770      	bx	lr
 800bdee:	4a03      	ldr	r2, [pc, #12]	; (800bdfc <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__DirectAccess+0x18>)
 800bdf0:	4801      	ldr	r0, [pc, #4]	; (800bdf8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__DirectAccess+0x14>)
 800bdf2:	6812      	ldr	r2, [r2, #0]
 800bdf4:	601a      	str	r2, [r3, #0]
 800bdf6:	4770      	bx	lr
 800bdf8:	20000420 	.word	0x20000420
 800bdfc:	20000a14 	.word	0x20000a14

0800be00 <racs_services__msg__Feedback__rosidl_typesupport_introspection_c__size_function__Feedback__encoders>:
 800be00:	2006      	movs	r0, #6
 800be02:	4770      	bx	lr

0800be04 <racs_services__msg__Feedback__rosidl_typesupport_introspection_c__get_const_function__Feedback__encoders>:
 800be04:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800be08:	4770      	bx	lr
 800be0a:	bf00      	nop

0800be0c <racs_services__msg__Feedback__rosidl_typesupport_introspection_c__fetch_function__Feedback__encoders>:
 800be0c:	f930 3011 	ldrsh.w	r3, [r0, r1, lsl #1]
 800be10:	8013      	strh	r3, [r2, #0]
 800be12:	4770      	bx	lr

0800be14 <racs_services__msg__Feedback__rosidl_typesupport_introspection_c__assign_function__Feedback__encoders>:
 800be14:	f9b2 3000 	ldrsh.w	r3, [r2]
 800be18:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 800be1c:	4770      	bx	lr
 800be1e:	bf00      	nop

0800be20 <racs_services__msg__Feedback__rosidl_typesupport_introspection_c__Feedback_init_function>:
 800be20:	f007 bfa8 	b.w	8013d74 <racs_services__msg__Feedback__init>

0800be24 <racs_services__msg__Feedback__rosidl_typesupport_introspection_c__Feedback_fini_function>:
 800be24:	f007 bfaa 	b.w	8013d7c <racs_services__msg__Feedback__fini>

0800be28 <racs_services__msg__Feedback__rosidl_typesupport_introspection_c__get_function__Feedback__encoders>:
 800be28:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800be2c:	4770      	bx	lr
 800be2e:	bf00      	nop

0800be30 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__Feedback>:
 800be30:	4b04      	ldr	r3, [pc, #16]	; (800be44 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__Feedback+0x14>)
 800be32:	681a      	ldr	r2, [r3, #0]
 800be34:	b10a      	cbz	r2, 800be3a <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__Feedback+0xa>
 800be36:	4803      	ldr	r0, [pc, #12]	; (800be44 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__Feedback+0x14>)
 800be38:	4770      	bx	lr
 800be3a:	4a03      	ldr	r2, [pc, #12]	; (800be48 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__Feedback+0x18>)
 800be3c:	4801      	ldr	r0, [pc, #4]	; (800be44 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__Feedback+0x14>)
 800be3e:	6812      	ldr	r2, [r2, #0]
 800be40:	601a      	str	r2, [r3, #0]
 800be42:	4770      	bx	lr
 800be44:	200004b0 	.word	0x200004b0
 800be48:	20000a14 	.word	0x20000a14

0800be4c <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__size_function__Setup_Event__request>:
 800be4c:	6840      	ldr	r0, [r0, #4]
 800be4e:	4770      	bx	lr

0800be50 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__get_const_function__Setup_Event__request>:
 800be50:	6800      	ldr	r0, [r0, #0]
 800be52:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800be56:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800be5a:	4770      	bx	lr

0800be5c <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__fetch_function__Setup_Event__request>:
 800be5c:	6803      	ldr	r3, [r0, #0]
 800be5e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800be62:	4694      	mov	ip, r2
 800be64:	b500      	push	{lr}
 800be66:	eb03 0e81 	add.w	lr, r3, r1, lsl #2
 800be6a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800be6e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800be72:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 800be76:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 800be7a:	f85d fb04 	ldr.w	pc, [sp], #4
 800be7e:	bf00      	nop

0800be80 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__assign_function__Setup_Event__request>:
 800be80:	6803      	ldr	r3, [r0, #0]
 800be82:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800be86:	b500      	push	{lr}
 800be88:	4696      	mov	lr, r2
 800be8a:	eb03 0c81 	add.w	ip, r3, r1, lsl #2
 800be8e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800be92:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800be96:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 800be9a:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 800be9e:	f85d fb04 	ldr.w	pc, [sp], #4
 800bea2:	bf00      	nop

0800bea4 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__size_function__Setup_Event__response>:
 800bea4:	6840      	ldr	r0, [r0, #4]
 800bea6:	4770      	bx	lr

0800bea8 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__get_const_function__Setup_Event__response>:
 800bea8:	6800      	ldr	r0, [r0, #0]
 800beaa:	4408      	add	r0, r1
 800beac:	4770      	bx	lr
 800beae:	bf00      	nop

0800beb0 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__fetch_function__Setup_Event__response>:
 800beb0:	6803      	ldr	r3, [r0, #0]
 800beb2:	5c5b      	ldrb	r3, [r3, r1]
 800beb4:	7013      	strb	r3, [r2, #0]
 800beb6:	4770      	bx	lr

0800beb8 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__assign_function__Setup_Event__response>:
 800beb8:	6803      	ldr	r3, [r0, #0]
 800beba:	7812      	ldrb	r2, [r2, #0]
 800bebc:	545a      	strb	r2, [r3, r1]
 800bebe:	4770      	bx	lr

0800bec0 <racs_services__srv__Setup_Request__rosidl_typesupport_introspection_c__Setup_Request_init_function>:
 800bec0:	f008 b940 	b.w	8014144 <racs_services__srv__Setup_Request__init>

0800bec4 <racs_services__srv__Setup_Request__rosidl_typesupport_introspection_c__Setup_Request_fini_function>:
 800bec4:	f008 b942 	b.w	801414c <racs_services__srv__Setup_Request__fini>

0800bec8 <racs_services__srv__Setup_Response__rosidl_typesupport_introspection_c__Setup_Response_init_function>:
 800bec8:	f008 b98a 	b.w	80141e0 <racs_services__srv__Setup_Response__init>

0800becc <racs_services__srv__Setup_Response__rosidl_typesupport_introspection_c__Setup_Response_fini_function>:
 800becc:	f008 b98c 	b.w	80141e8 <racs_services__srv__Setup_Response__fini>

0800bed0 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__Setup_Event_init_function>:
 800bed0:	f008 b9c2 	b.w	8014258 <racs_services__srv__Setup_Event__init>

0800bed4 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__Setup_Event_fini_function>:
 800bed4:	f008 b9e2 	b.w	801429c <racs_services__srv__Setup_Event__fini>

0800bed8 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__resize_function__Setup_Event__request>:
 800bed8:	b510      	push	{r4, lr}
 800beda:	4604      	mov	r4, r0
 800bedc:	b082      	sub	sp, #8
 800bede:	9101      	str	r1, [sp, #4]
 800bee0:	f008 f96a 	bl	80141b8 <racs_services__srv__Setup_Request__Sequence__fini>
 800bee4:	9901      	ldr	r1, [sp, #4]
 800bee6:	4620      	mov	r0, r4
 800bee8:	b002      	add	sp, #8
 800beea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800beee:	f008 b949 	b.w	8014184 <racs_services__srv__Setup_Request__Sequence__init>
 800bef2:	bf00      	nop

0800bef4 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__resize_function__Setup_Event__response>:
 800bef4:	b510      	push	{r4, lr}
 800bef6:	4604      	mov	r4, r0
 800bef8:	b082      	sub	sp, #8
 800befa:	9101      	str	r1, [sp, #4]
 800befc:	f008 f998 	bl	8014230 <racs_services__srv__Setup_Response__Sequence__fini>
 800bf00:	9901      	ldr	r1, [sp, #4]
 800bf02:	4620      	mov	r0, r4
 800bf04:	b002      	add	sp, #8
 800bf06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf0a:	f008 b977 	b.w	80141fc <racs_services__srv__Setup_Response__Sequence__init>
 800bf0e:	bf00      	nop

0800bf10 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__get_function__Setup_Event__response>:
 800bf10:	6800      	ldr	r0, [r0, #0]
 800bf12:	4408      	add	r0, r1
 800bf14:	4770      	bx	lr
 800bf16:	bf00      	nop

0800bf18 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__get_function__Setup_Event__request>:
 800bf18:	6800      	ldr	r0, [r0, #0]
 800bf1a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800bf1e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800bf22:	4770      	bx	lr

0800bf24 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Request>:
 800bf24:	4b04      	ldr	r3, [pc, #16]	; (800bf38 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x14>)
 800bf26:	681a      	ldr	r2, [r3, #0]
 800bf28:	b10a      	cbz	r2, 800bf2e <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0xa>
 800bf2a:	4803      	ldr	r0, [pc, #12]	; (800bf38 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x14>)
 800bf2c:	4770      	bx	lr
 800bf2e:	4a03      	ldr	r2, [pc, #12]	; (800bf3c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x18>)
 800bf30:	4801      	ldr	r0, [pc, #4]	; (800bf38 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x14>)
 800bf32:	6812      	ldr	r2, [r2, #0]
 800bf34:	601a      	str	r2, [r3, #0]
 800bf36:	4770      	bx	lr
 800bf38:	20000738 	.word	0x20000738
 800bf3c:	20000a14 	.word	0x20000a14

0800bf40 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Response>:
 800bf40:	4b04      	ldr	r3, [pc, #16]	; (800bf54 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Response+0x14>)
 800bf42:	681a      	ldr	r2, [r3, #0]
 800bf44:	b10a      	cbz	r2, 800bf4a <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Response+0xa>
 800bf46:	4803      	ldr	r0, [pc, #12]	; (800bf54 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Response+0x14>)
 800bf48:	4770      	bx	lr
 800bf4a:	4a03      	ldr	r2, [pc, #12]	; (800bf58 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Response+0x18>)
 800bf4c:	4801      	ldr	r0, [pc, #4]	; (800bf54 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Response+0x14>)
 800bf4e:	6812      	ldr	r2, [r2, #0]
 800bf50:	601a      	str	r2, [r3, #0]
 800bf52:	4770      	bx	lr
 800bf54:	2000078c 	.word	0x2000078c
 800bf58:	20000a14 	.word	0x20000a14

0800bf5c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event>:
 800bf5c:	b508      	push	{r3, lr}
 800bf5e:	f002 fd5f 	bl	800ea20 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800bf62:	4913      	ldr	r1, [pc, #76]	; (800bfb0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x54>)
 800bf64:	4b13      	ldr	r3, [pc, #76]	; (800bfb4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x58>)
 800bf66:	680a      	ldr	r2, [r1, #0]
 800bf68:	60d8      	str	r0, [r3, #12]
 800bf6a:	b152      	cbz	r2, 800bf82 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x26>
 800bf6c:	4a12      	ldr	r2, [pc, #72]	; (800bfb8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x5c>)
 800bf6e:	6499      	str	r1, [r3, #72]	; 0x48
 800bf70:	6811      	ldr	r1, [r2, #0]
 800bf72:	b171      	cbz	r1, 800bf92 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x36>
 800bf74:	4911      	ldr	r1, [pc, #68]	; (800bfbc <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x60>)
 800bf76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800bf7a:	680b      	ldr	r3, [r1, #0]
 800bf7c:	b193      	cbz	r3, 800bfa4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x48>
 800bf7e:	480f      	ldr	r0, [pc, #60]	; (800bfbc <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x60>)
 800bf80:	bd08      	pop	{r3, pc}
 800bf82:	4a0f      	ldr	r2, [pc, #60]	; (800bfc0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x64>)
 800bf84:	6499      	str	r1, [r3, #72]	; 0x48
 800bf86:	6812      	ldr	r2, [r2, #0]
 800bf88:	600a      	str	r2, [r1, #0]
 800bf8a:	4a0b      	ldr	r2, [pc, #44]	; (800bfb8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x5c>)
 800bf8c:	6811      	ldr	r1, [r2, #0]
 800bf8e:	2900      	cmp	r1, #0
 800bf90:	d1f0      	bne.n	800bf74 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x18>
 800bf92:	490b      	ldr	r1, [pc, #44]	; (800bfc0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x64>)
 800bf94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800bf98:	6809      	ldr	r1, [r1, #0]
 800bf9a:	6011      	str	r1, [r2, #0]
 800bf9c:	4907      	ldr	r1, [pc, #28]	; (800bfbc <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x60>)
 800bf9e:	680b      	ldr	r3, [r1, #0]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d1ec      	bne.n	800bf7e <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x22>
 800bfa4:	4b06      	ldr	r3, [pc, #24]	; (800bfc0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x64>)
 800bfa6:	4805      	ldr	r0, [pc, #20]	; (800bfbc <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x60>)
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	600b      	str	r3, [r1, #0]
 800bfac:	bd08      	pop	{r3, pc}
 800bfae:	bf00      	nop
 800bfb0:	20000738 	.word	0x20000738
 800bfb4:	200004c8 	.word	0x200004c8
 800bfb8:	2000078c 	.word	0x2000078c
 800bfbc:	2000057c 	.word	0x2000057c
 800bfc0:	20000a14 	.word	0x20000a14

0800bfc4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup>:
 800bfc4:	4b25      	ldr	r3, [pc, #148]	; (800c05c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x98>)
 800bfc6:	681a      	ldr	r2, [r3, #0]
 800bfc8:	b510      	push	{r4, lr}
 800bfca:	b142      	cbz	r2, 800bfde <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x1a>
 800bfcc:	685c      	ldr	r4, [r3, #4]
 800bfce:	68a3      	ldr	r3, [r4, #8]
 800bfd0:	b163      	cbz	r3, 800bfec <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x28>
 800bfd2:	68e3      	ldr	r3, [r4, #12]
 800bfd4:	b193      	cbz	r3, 800bffc <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x38>
 800bfd6:	6923      	ldr	r3, [r4, #16]
 800bfd8:	b1c3      	cbz	r3, 800c00c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x48>
 800bfda:	4820      	ldr	r0, [pc, #128]	; (800c05c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x98>)
 800bfdc:	bd10      	pop	{r4, pc}
 800bfde:	4a20      	ldr	r2, [pc, #128]	; (800c060 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x9c>)
 800bfe0:	685c      	ldr	r4, [r3, #4]
 800bfe2:	6812      	ldr	r2, [r2, #0]
 800bfe4:	601a      	str	r2, [r3, #0]
 800bfe6:	68a3      	ldr	r3, [r4, #8]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d1f2      	bne.n	800bfd2 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0xe>
 800bfec:	4a1d      	ldr	r2, [pc, #116]	; (800c064 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0xa0>)
 800bfee:	6813      	ldr	r3, [r2, #0]
 800bff0:	b303      	cbz	r3, 800c034 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x70>
 800bff2:	6853      	ldr	r3, [r2, #4]
 800bff4:	60a3      	str	r3, [r4, #8]
 800bff6:	68e3      	ldr	r3, [r4, #12]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d1ec      	bne.n	800bfd6 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x12>
 800bffc:	4b1a      	ldr	r3, [pc, #104]	; (800c068 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0xa4>)
 800bffe:	681a      	ldr	r2, [r3, #0]
 800c000:	b1e2      	cbz	r2, 800c03c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x78>
 800c002:	685b      	ldr	r3, [r3, #4]
 800c004:	60e3      	str	r3, [r4, #12]
 800c006:	6923      	ldr	r3, [r4, #16]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d1e6      	bne.n	800bfda <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x16>
 800c00c:	f002 fd08 	bl	800ea20 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800c010:	4a14      	ldr	r2, [pc, #80]	; (800c064 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0xa0>)
 800c012:	4916      	ldr	r1, [pc, #88]	; (800c06c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0xa8>)
 800c014:	6813      	ldr	r3, [r2, #0]
 800c016:	60c8      	str	r0, [r1, #12]
 800c018:	b1e3      	cbz	r3, 800c054 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x90>
 800c01a:	4b13      	ldr	r3, [pc, #76]	; (800c068 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0xa4>)
 800c01c:	648a      	str	r2, [r1, #72]	; 0x48
 800c01e:	681a      	ldr	r2, [r3, #0]
 800c020:	b1a2      	cbz	r2, 800c04c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x88>
 800c022:	4a13      	ldr	r2, [pc, #76]	; (800c070 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0xac>)
 800c024:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 800c028:	6813      	ldr	r3, [r2, #0]
 800c02a:	b15b      	cbz	r3, 800c044 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x80>
 800c02c:	6853      	ldr	r3, [r2, #4]
 800c02e:	480b      	ldr	r0, [pc, #44]	; (800c05c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x98>)
 800c030:	6123      	str	r3, [r4, #16]
 800c032:	bd10      	pop	{r4, pc}
 800c034:	4b0a      	ldr	r3, [pc, #40]	; (800c060 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x9c>)
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	6013      	str	r3, [r2, #0]
 800c03a:	e7da      	b.n	800bff2 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x2e>
 800c03c:	4a08      	ldr	r2, [pc, #32]	; (800c060 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x9c>)
 800c03e:	6812      	ldr	r2, [r2, #0]
 800c040:	601a      	str	r2, [r3, #0]
 800c042:	e7de      	b.n	800c002 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x3e>
 800c044:	4b06      	ldr	r3, [pc, #24]	; (800c060 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x9c>)
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	6013      	str	r3, [r2, #0]
 800c04a:	e7ef      	b.n	800c02c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x68>
 800c04c:	4a04      	ldr	r2, [pc, #16]	; (800c060 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x9c>)
 800c04e:	6812      	ldr	r2, [r2, #0]
 800c050:	601a      	str	r2, [r3, #0]
 800c052:	e7e6      	b.n	800c022 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x5e>
 800c054:	4b02      	ldr	r3, [pc, #8]	; (800c060 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x9c>)
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	6013      	str	r3, [r2, #0]
 800c05a:	e7de      	b.n	800c01a <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x56>
 800c05c:	200007b8 	.word	0x200007b8
 800c060:	20000a14 	.word	0x20000a14
 800c064:	20000738 	.word	0x20000738
 800c068:	2000078c 	.word	0x2000078c
 800c06c:	200004c8 	.word	0x200004c8
 800c070:	2000057c 	.word	0x2000057c

0800c074 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Control_Request>:
 800c074:	4800      	ldr	r0, [pc, #0]	; (800c078 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x4>)
 800c076:	4770      	bx	lr
 800c078:	20000838 	.word	0x20000838

0800c07c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Control_Response>:
 800c07c:	4800      	ldr	r0, [pc, #0]	; (800c080 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Control_Response+0x4>)
 800c07e:	4770      	bx	lr
 800c080:	20000850 	.word	0x20000850

0800c084 <_Control_Response__max_serialized_size>:
 800c084:	2101      	movs	r1, #1
 800c086:	2000      	movs	r0, #0
 800c088:	b508      	push	{r3, lr}
 800c08a:	f004 fb8b 	bl	80107a4 <ucdr_alignment>
 800c08e:	3001      	adds	r0, #1
 800c090:	bd08      	pop	{r3, pc}
 800c092:	bf00      	nop

0800c094 <_Control_Response__cdr_deserialize>:
 800c094:	b109      	cbz	r1, 800c09a <_Control_Response__cdr_deserialize+0x6>
 800c096:	f003 b837 	b.w	800f108 <ucdr_deserialize_uint8_t>
 800c09a:	4608      	mov	r0, r1
 800c09c:	4770      	bx	lr
 800c09e:	bf00      	nop

0800c0a0 <_Control_Event__max_serialized_size>:
 800c0a0:	b500      	push	{lr}
 800c0a2:	b083      	sub	sp, #12
 800c0a4:	2301      	movs	r3, #1
 800c0a6:	2100      	movs	r1, #0
 800c0a8:	f10d 0007 	add.w	r0, sp, #7
 800c0ac:	f88d 3007 	strb.w	r3, [sp, #7]
 800c0b0:	f002 fd66 	bl	800eb80 <max_serialized_size_service_msgs__msg__ServiceEventInfo>
 800c0b4:	b003      	add	sp, #12
 800c0b6:	f85d fb04 	ldr.w	pc, [sp], #4
 800c0ba:	bf00      	nop

0800c0bc <get_serialized_size_racs_services__srv__Control_Request>:
 800c0bc:	b1b0      	cbz	r0, 800c0ec <get_serialized_size_racs_services__srv__Control_Request+0x30>
 800c0be:	b538      	push	{r3, r4, r5, lr}
 800c0c0:	460d      	mov	r5, r1
 800c0c2:	2101      	movs	r1, #1
 800c0c4:	4628      	mov	r0, r5
 800c0c6:	f004 fb6d 	bl	80107a4 <ucdr_alignment>
 800c0ca:	1c6b      	adds	r3, r5, #1
 800c0cc:	2101      	movs	r1, #1
 800c0ce:	f1c5 050c 	rsb	r5, r5, #12
 800c0d2:	181c      	adds	r4, r3, r0
 800c0d4:	4620      	mov	r0, r4
 800c0d6:	f004 fb65 	bl	80107a4 <ucdr_alignment>
 800c0da:	3001      	adds	r0, #1
 800c0dc:	2102      	movs	r1, #2
 800c0de:	4404      	add	r4, r0
 800c0e0:	4620      	mov	r0, r4
 800c0e2:	f004 fb5f 	bl	80107a4 <ucdr_alignment>
 800c0e6:	4428      	add	r0, r5
 800c0e8:	4420      	add	r0, r4
 800c0ea:	bd38      	pop	{r3, r4, r5, pc}
 800c0ec:	4770      	bx	lr
 800c0ee:	bf00      	nop

0800c0f0 <get_serialized_size_racs_services__srv__Control_Response>:
 800c0f0:	b138      	cbz	r0, 800c102 <get_serialized_size_racs_services__srv__Control_Response+0x12>
 800c0f2:	b508      	push	{r3, lr}
 800c0f4:	460b      	mov	r3, r1
 800c0f6:	2101      	movs	r1, #1
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	f004 fb53 	bl	80107a4 <ucdr_alignment>
 800c0fe:	3001      	adds	r0, #1
 800c100:	bd08      	pop	{r3, pc}
 800c102:	4770      	bx	lr

0800c104 <_Control_Request__cdr_deserialize>:
 800c104:	b538      	push	{r3, r4, r5, lr}
 800c106:	460c      	mov	r4, r1
 800c108:	b169      	cbz	r1, 800c126 <_Control_Request__cdr_deserialize+0x22>
 800c10a:	4605      	mov	r5, r0
 800c10c:	f002 fffc 	bl	800f108 <ucdr_deserialize_uint8_t>
 800c110:	1c61      	adds	r1, r4, #1
 800c112:	4628      	mov	r0, r5
 800c114:	f002 fff8 	bl	800f108 <ucdr_deserialize_uint8_t>
 800c118:	1ca1      	adds	r1, r4, #2
 800c11a:	4628      	mov	r0, r5
 800c11c:	2206      	movs	r2, #6
 800c11e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c122:	f002 bf59 	b.w	800efd8 <ucdr_deserialize_array_int16_t>
 800c126:	4608      	mov	r0, r1
 800c128:	bd38      	pop	{r3, r4, r5, pc}
 800c12a:	bf00      	nop

0800c12c <_Control_Response__cdr_serialize>:
 800c12c:	460a      	mov	r2, r1
 800c12e:	b118      	cbz	r0, 800c138 <_Control_Response__cdr_serialize+0xc>
 800c130:	7801      	ldrb	r1, [r0, #0]
 800c132:	4610      	mov	r0, r2
 800c134:	f002 bfd2 	b.w	800f0dc <ucdr_serialize_uint8_t>
 800c138:	4770      	bx	lr
 800c13a:	bf00      	nop

0800c13c <_Control_Request__cdr_serialize>:
 800c13c:	b188      	cbz	r0, 800c162 <_Control_Request__cdr_serialize+0x26>
 800c13e:	b538      	push	{r3, r4, r5, lr}
 800c140:	460d      	mov	r5, r1
 800c142:	4604      	mov	r4, r0
 800c144:	7801      	ldrb	r1, [r0, #0]
 800c146:	4628      	mov	r0, r5
 800c148:	f002 ffc8 	bl	800f0dc <ucdr_serialize_uint8_t>
 800c14c:	7861      	ldrb	r1, [r4, #1]
 800c14e:	4628      	mov	r0, r5
 800c150:	f002 ffc4 	bl	800f0dc <ucdr_serialize_uint8_t>
 800c154:	1ca1      	adds	r1, r4, #2
 800c156:	4628      	mov	r0, r5
 800c158:	2206      	movs	r2, #6
 800c15a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c15e:	f002 bee5 	b.w	800ef2c <ucdr_serialize_array_int16_t>
 800c162:	4770      	bx	lr

0800c164 <get_serialized_size_racs_services__srv__Control_Event.part.0>:
 800c164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c168:	460e      	mov	r6, r1
 800c16a:	4605      	mov	r5, r0
 800c16c:	f002 fc6e 	bl	800ea4c <get_serialized_size_service_msgs__msg__ServiceEventInfo>
 800c170:	2104      	movs	r1, #4
 800c172:	eb06 0800 	add.w	r8, r6, r0
 800c176:	f8d5 902c 	ldr.w	r9, [r5, #44]	; 0x2c
 800c17a:	4640      	mov	r0, r8
 800c17c:	f004 fb12 	bl	80107a4 <ucdr_alignment>
 800c180:	3004      	adds	r0, #4
 800c182:	4480      	add	r8, r0
 800c184:	f1b9 0f00 	cmp.w	r9, #0
 800c188:	d019      	beq.n	800c1be <get_serialized_size_racs_services__srv__Control_Event.part.0+0x5a>
 800c18a:	2700      	movs	r7, #0
 800c18c:	f8df a07c 	ldr.w	sl, [pc, #124]	; 800c20c <get_serialized_size_racs_services__srv__Control_Event.part.0+0xa8>
 800c190:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800c192:	ebc7 00c7 	rsb	r0, r7, r7, lsl #3
 800c196:	f8da 3004 	ldr.w	r3, [sl, #4]
 800c19a:	4641      	mov	r1, r8
 800c19c:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 800c1a0:	3701      	adds	r7, #1
 800c1a2:	695b      	ldr	r3, [r3, #20]
 800c1a4:	4798      	blx	r3
 800c1a6:	4604      	mov	r4, r0
 800c1a8:	4640      	mov	r0, r8
 800c1aa:	2c04      	cmp	r4, #4
 800c1ac:	4621      	mov	r1, r4
 800c1ae:	bf28      	it	cs
 800c1b0:	2104      	movcs	r1, #4
 800c1b2:	f004 faf7 	bl	80107a4 <ucdr_alignment>
 800c1b6:	45b9      	cmp	r9, r7
 800c1b8:	4420      	add	r0, r4
 800c1ba:	4480      	add	r8, r0
 800c1bc:	d1e8      	bne.n	800c190 <get_serialized_size_racs_services__srv__Control_Event.part.0+0x2c>
 800c1be:	4640      	mov	r0, r8
 800c1c0:	2104      	movs	r1, #4
 800c1c2:	6baf      	ldr	r7, [r5, #56]	; 0x38
 800c1c4:	f004 faee 	bl	80107a4 <ucdr_alignment>
 800c1c8:	4480      	add	r8, r0
 800c1ca:	f108 0804 	add.w	r8, r8, #4
 800c1ce:	b1c7      	cbz	r7, 800c202 <get_serialized_size_racs_services__srv__Control_Event.part.0+0x9e>
 800c1d0:	f04f 0900 	mov.w	r9, #0
 800c1d4:	f8df a038 	ldr.w	sl, [pc, #56]	; 800c210 <get_serialized_size_racs_services__srv__Control_Event.part.0+0xac>
 800c1d8:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800c1da:	4641      	mov	r1, r8
 800c1dc:	f8da 3004 	ldr.w	r3, [sl, #4]
 800c1e0:	4448      	add	r0, r9
 800c1e2:	f109 0901 	add.w	r9, r9, #1
 800c1e6:	695b      	ldr	r3, [r3, #20]
 800c1e8:	4798      	blx	r3
 800c1ea:	4604      	mov	r4, r0
 800c1ec:	4640      	mov	r0, r8
 800c1ee:	2c04      	cmp	r4, #4
 800c1f0:	4621      	mov	r1, r4
 800c1f2:	bf28      	it	cs
 800c1f4:	2104      	movcs	r1, #4
 800c1f6:	f004 fad5 	bl	80107a4 <ucdr_alignment>
 800c1fa:	454f      	cmp	r7, r9
 800c1fc:	4420      	add	r0, r4
 800c1fe:	4480      	add	r8, r0
 800c200:	d1ea      	bne.n	800c1d8 <get_serialized_size_racs_services__srv__Control_Event.part.0+0x74>
 800c202:	eba8 0006 	sub.w	r0, r8, r6
 800c206:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c20a:	bf00      	nop
 800c20c:	20000838 	.word	0x20000838
 800c210:	20000850 	.word	0x20000850

0800c214 <get_serialized_size_racs_services__srv__Control_Event>:
 800c214:	b108      	cbz	r0, 800c21a <get_serialized_size_racs_services__srv__Control_Event+0x6>
 800c216:	f7ff bfa5 	b.w	800c164 <get_serialized_size_racs_services__srv__Control_Event.part.0>
 800c21a:	4770      	bx	lr

0800c21c <_Control_Event__get_serialized_size>:
 800c21c:	b110      	cbz	r0, 800c224 <_Control_Event__get_serialized_size+0x8>
 800c21e:	2100      	movs	r1, #0
 800c220:	f7ff bfa0 	b.w	800c164 <get_serialized_size_racs_services__srv__Control_Event.part.0>
 800c224:	4770      	bx	lr
 800c226:	bf00      	nop

0800c228 <_Control_Event__cdr_deserialize>:
 800c228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c22c:	460c      	mov	r4, r1
 800c22e:	b082      	sub	sp, #8
 800c230:	2900      	cmp	r1, #0
 800c232:	d045      	beq.n	800c2c0 <_Control_Event__cdr_deserialize+0x98>
 800c234:	4607      	mov	r7, r0
 800c236:	f002 fcc9 	bl	800ebcc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800c23a:	4603      	mov	r3, r0
 800c23c:	4621      	mov	r1, r4
 800c23e:	4638      	mov	r0, r7
 800c240:	685b      	ldr	r3, [r3, #4]
 800c242:	68db      	ldr	r3, [r3, #12]
 800c244:	4798      	blx	r3
 800c246:	4638      	mov	r0, r7
 800c248:	a901      	add	r1, sp, #4
 800c24a:	f003 fa8d 	bl	800f768 <ucdr_deserialize_uint32_t>
 800c24e:	9b01      	ldr	r3, [sp, #4]
 800c250:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800c252:	429a      	cmp	r2, r3
 800c254:	d330      	bcc.n	800c2b8 <_Control_Event__cdr_deserialize+0x90>
 800c256:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c258:	b193      	cbz	r3, 800c280 <_Control_Event__cdr_deserialize+0x58>
 800c25a:	2500      	movs	r5, #0
 800c25c:	f8df 806c 	ldr.w	r8, [pc, #108]	; 800c2cc <_Control_Event__cdr_deserialize+0xa4>
 800c260:	462e      	mov	r6, r5
 800c262:	e002      	b.n	800c26a <_Control_Event__cdr_deserialize+0x42>
 800c264:	9b01      	ldr	r3, [sp, #4]
 800c266:	429e      	cmp	r6, r3
 800c268:	d20a      	bcs.n	800c280 <_Control_Event__cdr_deserialize+0x58>
 800c26a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800c26c:	4638      	mov	r0, r7
 800c26e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c272:	3601      	adds	r6, #1
 800c274:	4429      	add	r1, r5
 800c276:	350e      	adds	r5, #14
 800c278:	68db      	ldr	r3, [r3, #12]
 800c27a:	4798      	blx	r3
 800c27c:	2800      	cmp	r0, #0
 800c27e:	d1f1      	bne.n	800c264 <_Control_Event__cdr_deserialize+0x3c>
 800c280:	a901      	add	r1, sp, #4
 800c282:	4638      	mov	r0, r7
 800c284:	f003 fa70 	bl	800f768 <ucdr_deserialize_uint32_t>
 800c288:	9b01      	ldr	r3, [sp, #4]
 800c28a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800c28c:	429a      	cmp	r2, r3
 800c28e:	d313      	bcc.n	800c2b8 <_Control_Event__cdr_deserialize+0x90>
 800c290:	63a3      	str	r3, [r4, #56]	; 0x38
 800c292:	b193      	cbz	r3, 800c2ba <_Control_Event__cdr_deserialize+0x92>
 800c294:	2500      	movs	r5, #0
 800c296:	4e0c      	ldr	r6, [pc, #48]	; (800c2c8 <_Control_Event__cdr_deserialize+0xa0>)
 800c298:	e002      	b.n	800c2a0 <_Control_Event__cdr_deserialize+0x78>
 800c29a:	9b01      	ldr	r3, [sp, #4]
 800c29c:	429d      	cmp	r5, r3
 800c29e:	d20c      	bcs.n	800c2ba <_Control_Event__cdr_deserialize+0x92>
 800c2a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c2a2:	4638      	mov	r0, r7
 800c2a4:	6873      	ldr	r3, [r6, #4]
 800c2a6:	4429      	add	r1, r5
 800c2a8:	3501      	adds	r5, #1
 800c2aa:	68db      	ldr	r3, [r3, #12]
 800c2ac:	4798      	blx	r3
 800c2ae:	2800      	cmp	r0, #0
 800c2b0:	d1f3      	bne.n	800c29a <_Control_Event__cdr_deserialize+0x72>
 800c2b2:	b002      	add	sp, #8
 800c2b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2b8:	2000      	movs	r0, #0
 800c2ba:	b002      	add	sp, #8
 800c2bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2c0:	4608      	mov	r0, r1
 800c2c2:	b002      	add	sp, #8
 800c2c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2c8:	20000850 	.word	0x20000850
 800c2cc:	20000838 	.word	0x20000838

0800c2d0 <_Control_Event__cdr_serialize>:
 800c2d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2d4:	2800      	cmp	r0, #0
 800c2d6:	d03b      	beq.n	800c350 <_Control_Event__cdr_serialize+0x80>
 800c2d8:	4605      	mov	r5, r0
 800c2da:	460e      	mov	r6, r1
 800c2dc:	f002 fc76 	bl	800ebcc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800c2e0:	4603      	mov	r3, r0
 800c2e2:	4631      	mov	r1, r6
 800c2e4:	4628      	mov	r0, r5
 800c2e6:	685b      	ldr	r3, [r3, #4]
 800c2e8:	689b      	ldr	r3, [r3, #8]
 800c2ea:	4798      	blx	r3
 800c2ec:	6aef      	ldr	r7, [r5, #44]	; 0x2c
 800c2ee:	4630      	mov	r0, r6
 800c2f0:	4639      	mov	r1, r7
 800c2f2:	f003 f909 	bl	800f508 <ucdr_serialize_uint32_t>
 800c2f6:	b198      	cbz	r0, 800c320 <_Control_Event__cdr_serialize+0x50>
 800c2f8:	b197      	cbz	r7, 800c320 <_Control_Event__cdr_serialize+0x50>
 800c2fa:	2400      	movs	r4, #0
 800c2fc:	f8df 805c 	ldr.w	r8, [pc, #92]	; 800c35c <_Control_Event__cdr_serialize+0x8c>
 800c300:	e001      	b.n	800c306 <_Control_Event__cdr_serialize+0x36>
 800c302:	42a7      	cmp	r7, r4
 800c304:	d00c      	beq.n	800c320 <_Control_Event__cdr_serialize+0x50>
 800c306:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
 800c30a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800c30c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c310:	4631      	mov	r1, r6
 800c312:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 800c316:	3401      	adds	r4, #1
 800c318:	689b      	ldr	r3, [r3, #8]
 800c31a:	4798      	blx	r3
 800c31c:	2800      	cmp	r0, #0
 800c31e:	d1f0      	bne.n	800c302 <_Control_Event__cdr_serialize+0x32>
 800c320:	6baf      	ldr	r7, [r5, #56]	; 0x38
 800c322:	4630      	mov	r0, r6
 800c324:	4639      	mov	r1, r7
 800c326:	f003 f8ef 	bl	800f508 <ucdr_serialize_uint32_t>
 800c32a:	4680      	mov	r8, r0
 800c32c:	b180      	cbz	r0, 800c350 <_Control_Event__cdr_serialize+0x80>
 800c32e:	b18f      	cbz	r7, 800c354 <_Control_Event__cdr_serialize+0x84>
 800c330:	2400      	movs	r4, #0
 800c332:	f8df 902c 	ldr.w	r9, [pc, #44]	; 800c360 <_Control_Event__cdr_serialize+0x90>
 800c336:	e001      	b.n	800c33c <_Control_Event__cdr_serialize+0x6c>
 800c338:	42a7      	cmp	r7, r4
 800c33a:	d00b      	beq.n	800c354 <_Control_Event__cdr_serialize+0x84>
 800c33c:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800c33e:	4631      	mov	r1, r6
 800c340:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800c344:	4420      	add	r0, r4
 800c346:	3401      	adds	r4, #1
 800c348:	689b      	ldr	r3, [r3, #8]
 800c34a:	4798      	blx	r3
 800c34c:	2800      	cmp	r0, #0
 800c34e:	d1f3      	bne.n	800c338 <_Control_Event__cdr_serialize+0x68>
 800c350:	f04f 0800 	mov.w	r8, #0
 800c354:	4640      	mov	r0, r8
 800c356:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c35a:	bf00      	nop
 800c35c:	20000838 	.word	0x20000838
 800c360:	20000850 	.word	0x20000850

0800c364 <_Control_Response__get_serialized_size>:
 800c364:	b130      	cbz	r0, 800c374 <_Control_Response__get_serialized_size+0x10>
 800c366:	2101      	movs	r1, #1
 800c368:	2000      	movs	r0, #0
 800c36a:	b508      	push	{r3, lr}
 800c36c:	f004 fa1a 	bl	80107a4 <ucdr_alignment>
 800c370:	3001      	adds	r0, #1
 800c372:	bd08      	pop	{r3, pc}
 800c374:	4770      	bx	lr
 800c376:	bf00      	nop

0800c378 <_Control_Request__get_serialized_size>:
 800c378:	b190      	cbz	r0, 800c3a0 <_Control_Request__get_serialized_size+0x28>
 800c37a:	2101      	movs	r1, #1
 800c37c:	2000      	movs	r0, #0
 800c37e:	b510      	push	{r4, lr}
 800c380:	f004 fa10 	bl	80107a4 <ucdr_alignment>
 800c384:	2101      	movs	r1, #1
 800c386:	1844      	adds	r4, r0, r1
 800c388:	4620      	mov	r0, r4
 800c38a:	f004 fa0b 	bl	80107a4 <ucdr_alignment>
 800c38e:	3001      	adds	r0, #1
 800c390:	2102      	movs	r1, #2
 800c392:	4404      	add	r4, r0
 800c394:	4620      	mov	r0, r4
 800c396:	f004 fa05 	bl	80107a4 <ucdr_alignment>
 800c39a:	300c      	adds	r0, #12
 800c39c:	4420      	add	r0, r4
 800c39e:	bd10      	pop	{r4, pc}
 800c3a0:	4770      	bx	lr
 800c3a2:	bf00      	nop

0800c3a4 <_Control_Request__max_serialized_size>:
 800c3a4:	b538      	push	{r3, r4, r5, lr}
 800c3a6:	2101      	movs	r1, #1
 800c3a8:	2000      	movs	r0, #0
 800c3aa:	f004 f9fb 	bl	80107a4 <ucdr_alignment>
 800c3ae:	2101      	movs	r1, #1
 800c3b0:	1845      	adds	r5, r0, r1
 800c3b2:	4628      	mov	r0, r5
 800c3b4:	f004 f9f6 	bl	80107a4 <ucdr_alignment>
 800c3b8:	1c44      	adds	r4, r0, #1
 800c3ba:	2102      	movs	r1, #2
 800c3bc:	442c      	add	r4, r5
 800c3be:	4620      	mov	r0, r4
 800c3c0:	f004 f9f0 	bl	80107a4 <ucdr_alignment>
 800c3c4:	300c      	adds	r0, #12
 800c3c6:	4420      	add	r0, r4
 800c3c8:	bd38      	pop	{r3, r4, r5, pc}
 800c3ca:	bf00      	nop

0800c3cc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Control_Event>:
 800c3cc:	4800      	ldr	r0, [pc, #0]	; (800c3d0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x4>)
 800c3ce:	4770      	bx	lr
 800c3d0:	20000820 	.word	0x20000820

0800c3d4 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__racs_services__srv__Control>:
 800c3d4:	4800      	ldr	r0, [pc, #0]	; (800c3d8 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__racs_services__srv__Control+0x4>)
 800c3d6:	4770      	bx	lr
 800c3d8:	200007f4 	.word	0x200007f4

0800c3dc <get_serialized_size_racs_services__msg__DirectAccess>:
 800c3dc:	b180      	cbz	r0, 800c400 <get_serialized_size_racs_services__msg__DirectAccess+0x24>
 800c3de:	b538      	push	{r3, r4, r5, lr}
 800c3e0:	460d      	mov	r5, r1
 800c3e2:	2101      	movs	r1, #1
 800c3e4:	4628      	mov	r0, r5
 800c3e6:	f004 f9dd 	bl	80107a4 <ucdr_alignment>
 800c3ea:	1c6b      	adds	r3, r5, #1
 800c3ec:	f1c5 050c 	rsb	r5, r5, #12
 800c3f0:	2102      	movs	r1, #2
 800c3f2:	181c      	adds	r4, r3, r0
 800c3f4:	4620      	mov	r0, r4
 800c3f6:	f004 f9d5 	bl	80107a4 <ucdr_alignment>
 800c3fa:	4428      	add	r0, r5
 800c3fc:	4420      	add	r0, r4
 800c3fe:	bd38      	pop	{r3, r4, r5, pc}
 800c400:	4770      	bx	lr
 800c402:	bf00      	nop

0800c404 <_DirectAccess__cdr_deserialize>:
 800c404:	b538      	push	{r3, r4, r5, lr}
 800c406:	460c      	mov	r4, r1
 800c408:	b149      	cbz	r1, 800c41e <_DirectAccess__cdr_deserialize+0x1a>
 800c40a:	4605      	mov	r5, r0
 800c40c:	f002 fe7c 	bl	800f108 <ucdr_deserialize_uint8_t>
 800c410:	1ca1      	adds	r1, r4, #2
 800c412:	2206      	movs	r2, #6
 800c414:	4628      	mov	r0, r5
 800c416:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c41a:	f002 bddd 	b.w	800efd8 <ucdr_deserialize_array_int16_t>
 800c41e:	4608      	mov	r0, r1
 800c420:	bd38      	pop	{r3, r4, r5, pc}
 800c422:	bf00      	nop

0800c424 <_DirectAccess__cdr_serialize>:
 800c424:	b170      	cbz	r0, 800c444 <_DirectAccess__cdr_serialize+0x20>
 800c426:	b538      	push	{r3, r4, r5, lr}
 800c428:	4604      	mov	r4, r0
 800c42a:	460d      	mov	r5, r1
 800c42c:	4608      	mov	r0, r1
 800c42e:	f814 1b02 	ldrb.w	r1, [r4], #2
 800c432:	f002 fe53 	bl	800f0dc <ucdr_serialize_uint8_t>
 800c436:	4628      	mov	r0, r5
 800c438:	4621      	mov	r1, r4
 800c43a:	2206      	movs	r2, #6
 800c43c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c440:	f002 bd74 	b.w	800ef2c <ucdr_serialize_array_int16_t>
 800c444:	4770      	bx	lr
 800c446:	bf00      	nop

0800c448 <_DirectAccess__get_serialized_size>:
 800c448:	b160      	cbz	r0, 800c464 <_DirectAccess__get_serialized_size+0x1c>
 800c44a:	2101      	movs	r1, #1
 800c44c:	2000      	movs	r0, #0
 800c44e:	b510      	push	{r4, lr}
 800c450:	f004 f9a8 	bl	80107a4 <ucdr_alignment>
 800c454:	1c44      	adds	r4, r0, #1
 800c456:	2102      	movs	r1, #2
 800c458:	4620      	mov	r0, r4
 800c45a:	f004 f9a3 	bl	80107a4 <ucdr_alignment>
 800c45e:	300c      	adds	r0, #12
 800c460:	4420      	add	r0, r4
 800c462:	bd10      	pop	{r4, pc}
 800c464:	4770      	bx	lr
 800c466:	bf00      	nop

0800c468 <_DirectAccess__max_serialized_size>:
 800c468:	b510      	push	{r4, lr}
 800c46a:	2101      	movs	r1, #1
 800c46c:	2000      	movs	r0, #0
 800c46e:	f004 f999 	bl	80107a4 <ucdr_alignment>
 800c472:	1c44      	adds	r4, r0, #1
 800c474:	2102      	movs	r1, #2
 800c476:	4620      	mov	r0, r4
 800c478:	f004 f994 	bl	80107a4 <ucdr_alignment>
 800c47c:	300c      	adds	r0, #12
 800c47e:	4420      	add	r0, r4
 800c480:	bd10      	pop	{r4, pc}
 800c482:	bf00      	nop

0800c484 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__msg__DirectAccess>:
 800c484:	4800      	ldr	r0, [pc, #0]	; (800c488 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__msg__DirectAccess+0x4>)
 800c486:	4770      	bx	lr
 800c488:	200008bc 	.word	0x200008bc

0800c48c <get_serialized_size_racs_services__msg__Feedback>:
 800c48c:	b180      	cbz	r0, 800c4b0 <get_serialized_size_racs_services__msg__Feedback+0x24>
 800c48e:	b538      	push	{r3, r4, r5, lr}
 800c490:	460d      	mov	r5, r1
 800c492:	2101      	movs	r1, #1
 800c494:	4628      	mov	r0, r5
 800c496:	f004 f985 	bl	80107a4 <ucdr_alignment>
 800c49a:	1c6b      	adds	r3, r5, #1
 800c49c:	f1c5 050c 	rsb	r5, r5, #12
 800c4a0:	2102      	movs	r1, #2
 800c4a2:	181c      	adds	r4, r3, r0
 800c4a4:	4620      	mov	r0, r4
 800c4a6:	f004 f97d 	bl	80107a4 <ucdr_alignment>
 800c4aa:	4428      	add	r0, r5
 800c4ac:	4420      	add	r0, r4
 800c4ae:	bd38      	pop	{r3, r4, r5, pc}
 800c4b0:	4770      	bx	lr
 800c4b2:	bf00      	nop

0800c4b4 <_Feedback__cdr_deserialize>:
 800c4b4:	b538      	push	{r3, r4, r5, lr}
 800c4b6:	460c      	mov	r4, r1
 800c4b8:	b149      	cbz	r1, 800c4ce <_Feedback__cdr_deserialize+0x1a>
 800c4ba:	4605      	mov	r5, r0
 800c4bc:	f002 fe24 	bl	800f108 <ucdr_deserialize_uint8_t>
 800c4c0:	1ca1      	adds	r1, r4, #2
 800c4c2:	2206      	movs	r2, #6
 800c4c4:	4628      	mov	r0, r5
 800c4c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c4ca:	f002 bd85 	b.w	800efd8 <ucdr_deserialize_array_int16_t>
 800c4ce:	4608      	mov	r0, r1
 800c4d0:	bd38      	pop	{r3, r4, r5, pc}
 800c4d2:	bf00      	nop

0800c4d4 <_Feedback__cdr_serialize>:
 800c4d4:	b170      	cbz	r0, 800c4f4 <_Feedback__cdr_serialize+0x20>
 800c4d6:	b538      	push	{r3, r4, r5, lr}
 800c4d8:	4604      	mov	r4, r0
 800c4da:	460d      	mov	r5, r1
 800c4dc:	4608      	mov	r0, r1
 800c4de:	f814 1b02 	ldrb.w	r1, [r4], #2
 800c4e2:	f002 fdfb 	bl	800f0dc <ucdr_serialize_uint8_t>
 800c4e6:	4628      	mov	r0, r5
 800c4e8:	4621      	mov	r1, r4
 800c4ea:	2206      	movs	r2, #6
 800c4ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c4f0:	f002 bd1c 	b.w	800ef2c <ucdr_serialize_array_int16_t>
 800c4f4:	4770      	bx	lr
 800c4f6:	bf00      	nop

0800c4f8 <_Feedback__get_serialized_size>:
 800c4f8:	b160      	cbz	r0, 800c514 <_Feedback__get_serialized_size+0x1c>
 800c4fa:	2101      	movs	r1, #1
 800c4fc:	2000      	movs	r0, #0
 800c4fe:	b510      	push	{r4, lr}
 800c500:	f004 f950 	bl	80107a4 <ucdr_alignment>
 800c504:	1c44      	adds	r4, r0, #1
 800c506:	2102      	movs	r1, #2
 800c508:	4620      	mov	r0, r4
 800c50a:	f004 f94b 	bl	80107a4 <ucdr_alignment>
 800c50e:	300c      	adds	r0, #12
 800c510:	4420      	add	r0, r4
 800c512:	bd10      	pop	{r4, pc}
 800c514:	4770      	bx	lr
 800c516:	bf00      	nop

0800c518 <_Feedback__max_serialized_size>:
 800c518:	b510      	push	{r4, lr}
 800c51a:	2101      	movs	r1, #1
 800c51c:	2000      	movs	r0, #0
 800c51e:	f004 f941 	bl	80107a4 <ucdr_alignment>
 800c522:	1c44      	adds	r4, r0, #1
 800c524:	2102      	movs	r1, #2
 800c526:	4620      	mov	r0, r4
 800c528:	f004 f93c 	bl	80107a4 <ucdr_alignment>
 800c52c:	300c      	adds	r0, #12
 800c52e:	4420      	add	r0, r4
 800c530:	bd10      	pop	{r4, pc}
 800c532:	bf00      	nop

0800c534 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__msg__Feedback>:
 800c534:	4800      	ldr	r0, [pc, #0]	; (800c538 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__msg__Feedback+0x4>)
 800c536:	4770      	bx	lr
 800c538:	200008f0 	.word	0x200008f0

0800c53c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Setup_Request>:
 800c53c:	4800      	ldr	r0, [pc, #0]	; (800c540 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x4>)
 800c53e:	4770      	bx	lr
 800c540:	20000978 	.word	0x20000978

0800c544 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Setup_Response>:
 800c544:	4800      	ldr	r0, [pc, #0]	; (800c548 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Setup_Response+0x4>)
 800c546:	4770      	bx	lr
 800c548:	20000990 	.word	0x20000990

0800c54c <_Setup_Response__max_serialized_size>:
 800c54c:	2101      	movs	r1, #1
 800c54e:	2000      	movs	r0, #0
 800c550:	b508      	push	{r3, lr}
 800c552:	f004 f927 	bl	80107a4 <ucdr_alignment>
 800c556:	3001      	adds	r0, #1
 800c558:	bd08      	pop	{r3, pc}
 800c55a:	bf00      	nop

0800c55c <_Setup_Response__cdr_deserialize>:
 800c55c:	b109      	cbz	r1, 800c562 <_Setup_Response__cdr_deserialize+0x6>
 800c55e:	f002 bdd3 	b.w	800f108 <ucdr_deserialize_uint8_t>
 800c562:	4608      	mov	r0, r1
 800c564:	4770      	bx	lr
 800c566:	bf00      	nop

0800c568 <_Setup_Event__max_serialized_size>:
 800c568:	b500      	push	{lr}
 800c56a:	b083      	sub	sp, #12
 800c56c:	2301      	movs	r3, #1
 800c56e:	2100      	movs	r1, #0
 800c570:	f10d 0007 	add.w	r0, sp, #7
 800c574:	f88d 3007 	strb.w	r3, [sp, #7]
 800c578:	f002 fb02 	bl	800eb80 <max_serialized_size_service_msgs__msg__ServiceEventInfo>
 800c57c:	b003      	add	sp, #12
 800c57e:	f85d fb04 	ldr.w	pc, [sp], #4
 800c582:	bf00      	nop

0800c584 <get_serialized_size_racs_services__srv__Setup_Request.part.0>:
 800c584:	b570      	push	{r4, r5, r6, lr}
 800c586:	4604      	mov	r4, r0
 800c588:	2101      	movs	r1, #1
 800c58a:	f004 f90b 	bl	80107a4 <ucdr_alignment>
 800c58e:	2104      	movs	r1, #4
 800c590:	1c65      	adds	r5, r4, #1
 800c592:	f1c4 0404 	rsb	r4, r4, #4
 800c596:	4405      	add	r5, r0
 800c598:	4628      	mov	r0, r5
 800c59a:	f004 f903 	bl	80107a4 <ucdr_alignment>
 800c59e:	2104      	movs	r1, #4
 800c5a0:	1846      	adds	r6, r0, r1
 800c5a2:	442e      	add	r6, r5
 800c5a4:	4630      	mov	r0, r6
 800c5a6:	f004 f8fd 	bl	80107a4 <ucdr_alignment>
 800c5aa:	2104      	movs	r1, #4
 800c5ac:	1845      	adds	r5, r0, r1
 800c5ae:	442e      	add	r6, r5
 800c5b0:	4630      	mov	r0, r6
 800c5b2:	f004 f8f7 	bl	80107a4 <ucdr_alignment>
 800c5b6:	2104      	movs	r1, #4
 800c5b8:	4408      	add	r0, r1
 800c5ba:	4406      	add	r6, r0
 800c5bc:	4630      	mov	r0, r6
 800c5be:	f004 f8f1 	bl	80107a4 <ucdr_alignment>
 800c5c2:	2104      	movs	r1, #4
 800c5c4:	1845      	adds	r5, r0, r1
 800c5c6:	4435      	add	r5, r6
 800c5c8:	4628      	mov	r0, r5
 800c5ca:	f004 f8eb 	bl	80107a4 <ucdr_alignment>
 800c5ce:	2104      	movs	r1, #4
 800c5d0:	4408      	add	r0, r1
 800c5d2:	4405      	add	r5, r0
 800c5d4:	4628      	mov	r0, r5
 800c5d6:	f004 f8e5 	bl	80107a4 <ucdr_alignment>
 800c5da:	4420      	add	r0, r4
 800c5dc:	4428      	add	r0, r5
 800c5de:	bd70      	pop	{r4, r5, r6, pc}

0800c5e0 <get_serialized_size_racs_services__srv__Setup_Request>:
 800c5e0:	b110      	cbz	r0, 800c5e8 <get_serialized_size_racs_services__srv__Setup_Request+0x8>
 800c5e2:	4608      	mov	r0, r1
 800c5e4:	f7ff bfce 	b.w	800c584 <get_serialized_size_racs_services__srv__Setup_Request.part.0>
 800c5e8:	4770      	bx	lr
 800c5ea:	bf00      	nop

0800c5ec <_Setup_Request__get_serialized_size>:
 800c5ec:	b110      	cbz	r0, 800c5f4 <_Setup_Request__get_serialized_size+0x8>
 800c5ee:	2000      	movs	r0, #0
 800c5f0:	f7ff bfc8 	b.w	800c584 <get_serialized_size_racs_services__srv__Setup_Request.part.0>
 800c5f4:	4770      	bx	lr
 800c5f6:	bf00      	nop

0800c5f8 <get_serialized_size_racs_services__srv__Setup_Response>:
 800c5f8:	b138      	cbz	r0, 800c60a <get_serialized_size_racs_services__srv__Setup_Response+0x12>
 800c5fa:	b508      	push	{r3, lr}
 800c5fc:	460b      	mov	r3, r1
 800c5fe:	2101      	movs	r1, #1
 800c600:	4618      	mov	r0, r3
 800c602:	f004 f8cf 	bl	80107a4 <ucdr_alignment>
 800c606:	3001      	adds	r0, #1
 800c608:	bd08      	pop	{r3, pc}
 800c60a:	4770      	bx	lr

0800c60c <_Setup_Request__cdr_deserialize>:
 800c60c:	b538      	push	{r3, r4, r5, lr}
 800c60e:	460c      	mov	r4, r1
 800c610:	b309      	cbz	r1, 800c656 <_Setup_Request__cdr_deserialize+0x4a>
 800c612:	4605      	mov	r5, r0
 800c614:	f002 fd78 	bl	800f108 <ucdr_deserialize_uint8_t>
 800c618:	1d21      	adds	r1, r4, #4
 800c61a:	4628      	mov	r0, r5
 800c61c:	f003 ffda 	bl	80105d4 <ucdr_deserialize_float>
 800c620:	f104 0108 	add.w	r1, r4, #8
 800c624:	4628      	mov	r0, r5
 800c626:	f003 ffd5 	bl	80105d4 <ucdr_deserialize_float>
 800c62a:	f104 010c 	add.w	r1, r4, #12
 800c62e:	4628      	mov	r0, r5
 800c630:	f003 ffd0 	bl	80105d4 <ucdr_deserialize_float>
 800c634:	f104 0110 	add.w	r1, r4, #16
 800c638:	4628      	mov	r0, r5
 800c63a:	f003 ffcb 	bl	80105d4 <ucdr_deserialize_float>
 800c63e:	f104 0114 	add.w	r1, r4, #20
 800c642:	4628      	mov	r0, r5
 800c644:	f003 ffc6 	bl	80105d4 <ucdr_deserialize_float>
 800c648:	f104 0118 	add.w	r1, r4, #24
 800c64c:	4628      	mov	r0, r5
 800c64e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c652:	f003 bfbf 	b.w	80105d4 <ucdr_deserialize_float>
 800c656:	4608      	mov	r0, r1
 800c658:	bd38      	pop	{r3, r4, r5, pc}
 800c65a:	bf00      	nop

0800c65c <_Setup_Response__cdr_serialize>:
 800c65c:	460a      	mov	r2, r1
 800c65e:	b118      	cbz	r0, 800c668 <_Setup_Response__cdr_serialize+0xc>
 800c660:	7801      	ldrb	r1, [r0, #0]
 800c662:	4610      	mov	r0, r2
 800c664:	f002 bd3a 	b.w	800f0dc <ucdr_serialize_uint8_t>
 800c668:	4770      	bx	lr
 800c66a:	bf00      	nop

0800c66c <_Setup_Request__cdr_serialize>:
 800c66c:	b330      	cbz	r0, 800c6bc <_Setup_Request__cdr_serialize+0x50>
 800c66e:	b538      	push	{r3, r4, r5, lr}
 800c670:	460d      	mov	r5, r1
 800c672:	4604      	mov	r4, r0
 800c674:	7801      	ldrb	r1, [r0, #0]
 800c676:	4628      	mov	r0, r5
 800c678:	f002 fd30 	bl	800f0dc <ucdr_serialize_uint8_t>
 800c67c:	ed94 0a01 	vldr	s0, [r4, #4]
 800c680:	4628      	mov	r0, r5
 800c682:	f003 ff0f 	bl	80104a4 <ucdr_serialize_float>
 800c686:	ed94 0a02 	vldr	s0, [r4, #8]
 800c68a:	4628      	mov	r0, r5
 800c68c:	f003 ff0a 	bl	80104a4 <ucdr_serialize_float>
 800c690:	ed94 0a03 	vldr	s0, [r4, #12]
 800c694:	4628      	mov	r0, r5
 800c696:	f003 ff05 	bl	80104a4 <ucdr_serialize_float>
 800c69a:	ed94 0a04 	vldr	s0, [r4, #16]
 800c69e:	4628      	mov	r0, r5
 800c6a0:	f003 ff00 	bl	80104a4 <ucdr_serialize_float>
 800c6a4:	ed94 0a05 	vldr	s0, [r4, #20]
 800c6a8:	4628      	mov	r0, r5
 800c6aa:	f003 fefb 	bl	80104a4 <ucdr_serialize_float>
 800c6ae:	ed94 0a06 	vldr	s0, [r4, #24]
 800c6b2:	4628      	mov	r0, r5
 800c6b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c6b8:	f003 bef4 	b.w	80104a4 <ucdr_serialize_float>
 800c6bc:	4770      	bx	lr
 800c6be:	bf00      	nop

0800c6c0 <get_serialized_size_racs_services__srv__Setup_Event.part.0>:
 800c6c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c6c4:	460e      	mov	r6, r1
 800c6c6:	4605      	mov	r5, r0
 800c6c8:	f002 f9c0 	bl	800ea4c <get_serialized_size_service_msgs__msg__ServiceEventInfo>
 800c6cc:	2104      	movs	r1, #4
 800c6ce:	eb06 0800 	add.w	r8, r6, r0
 800c6d2:	f8d5 902c 	ldr.w	r9, [r5, #44]	; 0x2c
 800c6d6:	4640      	mov	r0, r8
 800c6d8:	f004 f864 	bl	80107a4 <ucdr_alignment>
 800c6dc:	3004      	adds	r0, #4
 800c6de:	4480      	add	r8, r0
 800c6e0:	f1b9 0f00 	cmp.w	r9, #0
 800c6e4:	d019      	beq.n	800c71a <get_serialized_size_racs_services__srv__Setup_Event.part.0+0x5a>
 800c6e6:	2700      	movs	r7, #0
 800c6e8:	f8df a07c 	ldr.w	sl, [pc, #124]	; 800c768 <get_serialized_size_racs_services__srv__Setup_Event.part.0+0xa8>
 800c6ec:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800c6ee:	ebc7 00c7 	rsb	r0, r7, r7, lsl #3
 800c6f2:	f8da 3004 	ldr.w	r3, [sl, #4]
 800c6f6:	4641      	mov	r1, r8
 800c6f8:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800c6fc:	3701      	adds	r7, #1
 800c6fe:	695b      	ldr	r3, [r3, #20]
 800c700:	4798      	blx	r3
 800c702:	4604      	mov	r4, r0
 800c704:	4640      	mov	r0, r8
 800c706:	2c04      	cmp	r4, #4
 800c708:	4621      	mov	r1, r4
 800c70a:	bf28      	it	cs
 800c70c:	2104      	movcs	r1, #4
 800c70e:	f004 f849 	bl	80107a4 <ucdr_alignment>
 800c712:	45b9      	cmp	r9, r7
 800c714:	4420      	add	r0, r4
 800c716:	4480      	add	r8, r0
 800c718:	d1e8      	bne.n	800c6ec <get_serialized_size_racs_services__srv__Setup_Event.part.0+0x2c>
 800c71a:	4640      	mov	r0, r8
 800c71c:	2104      	movs	r1, #4
 800c71e:	6baf      	ldr	r7, [r5, #56]	; 0x38
 800c720:	f004 f840 	bl	80107a4 <ucdr_alignment>
 800c724:	4480      	add	r8, r0
 800c726:	f108 0804 	add.w	r8, r8, #4
 800c72a:	b1c7      	cbz	r7, 800c75e <get_serialized_size_racs_services__srv__Setup_Event.part.0+0x9e>
 800c72c:	f04f 0900 	mov.w	r9, #0
 800c730:	f8df a038 	ldr.w	sl, [pc, #56]	; 800c76c <get_serialized_size_racs_services__srv__Setup_Event.part.0+0xac>
 800c734:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800c736:	4641      	mov	r1, r8
 800c738:	f8da 3004 	ldr.w	r3, [sl, #4]
 800c73c:	4448      	add	r0, r9
 800c73e:	f109 0901 	add.w	r9, r9, #1
 800c742:	695b      	ldr	r3, [r3, #20]
 800c744:	4798      	blx	r3
 800c746:	4604      	mov	r4, r0
 800c748:	4640      	mov	r0, r8
 800c74a:	2c04      	cmp	r4, #4
 800c74c:	4621      	mov	r1, r4
 800c74e:	bf28      	it	cs
 800c750:	2104      	movcs	r1, #4
 800c752:	f004 f827 	bl	80107a4 <ucdr_alignment>
 800c756:	454f      	cmp	r7, r9
 800c758:	4420      	add	r0, r4
 800c75a:	4480      	add	r8, r0
 800c75c:	d1ea      	bne.n	800c734 <get_serialized_size_racs_services__srv__Setup_Event.part.0+0x74>
 800c75e:	eba8 0006 	sub.w	r0, r8, r6
 800c762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c766:	bf00      	nop
 800c768:	20000978 	.word	0x20000978
 800c76c:	20000990 	.word	0x20000990

0800c770 <get_serialized_size_racs_services__srv__Setup_Event>:
 800c770:	b108      	cbz	r0, 800c776 <get_serialized_size_racs_services__srv__Setup_Event+0x6>
 800c772:	f7ff bfa5 	b.w	800c6c0 <get_serialized_size_racs_services__srv__Setup_Event.part.0>
 800c776:	4770      	bx	lr

0800c778 <_Setup_Event__get_serialized_size>:
 800c778:	b110      	cbz	r0, 800c780 <_Setup_Event__get_serialized_size+0x8>
 800c77a:	2100      	movs	r1, #0
 800c77c:	f7ff bfa0 	b.w	800c6c0 <get_serialized_size_racs_services__srv__Setup_Event.part.0>
 800c780:	4770      	bx	lr
 800c782:	bf00      	nop

0800c784 <_Setup_Event__cdr_deserialize>:
 800c784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c788:	460c      	mov	r4, r1
 800c78a:	b082      	sub	sp, #8
 800c78c:	2900      	cmp	r1, #0
 800c78e:	d045      	beq.n	800c81c <_Setup_Event__cdr_deserialize+0x98>
 800c790:	4607      	mov	r7, r0
 800c792:	f002 fa1b 	bl	800ebcc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800c796:	4603      	mov	r3, r0
 800c798:	4621      	mov	r1, r4
 800c79a:	4638      	mov	r0, r7
 800c79c:	685b      	ldr	r3, [r3, #4]
 800c79e:	68db      	ldr	r3, [r3, #12]
 800c7a0:	4798      	blx	r3
 800c7a2:	4638      	mov	r0, r7
 800c7a4:	a901      	add	r1, sp, #4
 800c7a6:	f002 ffdf 	bl	800f768 <ucdr_deserialize_uint32_t>
 800c7aa:	9b01      	ldr	r3, [sp, #4]
 800c7ac:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800c7ae:	429a      	cmp	r2, r3
 800c7b0:	d330      	bcc.n	800c814 <_Setup_Event__cdr_deserialize+0x90>
 800c7b2:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c7b4:	b193      	cbz	r3, 800c7dc <_Setup_Event__cdr_deserialize+0x58>
 800c7b6:	2500      	movs	r5, #0
 800c7b8:	f8df 806c 	ldr.w	r8, [pc, #108]	; 800c828 <_Setup_Event__cdr_deserialize+0xa4>
 800c7bc:	462e      	mov	r6, r5
 800c7be:	e002      	b.n	800c7c6 <_Setup_Event__cdr_deserialize+0x42>
 800c7c0:	9b01      	ldr	r3, [sp, #4]
 800c7c2:	429e      	cmp	r6, r3
 800c7c4:	d20a      	bcs.n	800c7dc <_Setup_Event__cdr_deserialize+0x58>
 800c7c6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800c7c8:	4638      	mov	r0, r7
 800c7ca:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c7ce:	3601      	adds	r6, #1
 800c7d0:	4429      	add	r1, r5
 800c7d2:	351c      	adds	r5, #28
 800c7d4:	68db      	ldr	r3, [r3, #12]
 800c7d6:	4798      	blx	r3
 800c7d8:	2800      	cmp	r0, #0
 800c7da:	d1f1      	bne.n	800c7c0 <_Setup_Event__cdr_deserialize+0x3c>
 800c7dc:	a901      	add	r1, sp, #4
 800c7de:	4638      	mov	r0, r7
 800c7e0:	f002 ffc2 	bl	800f768 <ucdr_deserialize_uint32_t>
 800c7e4:	9b01      	ldr	r3, [sp, #4]
 800c7e6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800c7e8:	429a      	cmp	r2, r3
 800c7ea:	d313      	bcc.n	800c814 <_Setup_Event__cdr_deserialize+0x90>
 800c7ec:	63a3      	str	r3, [r4, #56]	; 0x38
 800c7ee:	b193      	cbz	r3, 800c816 <_Setup_Event__cdr_deserialize+0x92>
 800c7f0:	2500      	movs	r5, #0
 800c7f2:	4e0c      	ldr	r6, [pc, #48]	; (800c824 <_Setup_Event__cdr_deserialize+0xa0>)
 800c7f4:	e002      	b.n	800c7fc <_Setup_Event__cdr_deserialize+0x78>
 800c7f6:	9b01      	ldr	r3, [sp, #4]
 800c7f8:	429d      	cmp	r5, r3
 800c7fa:	d20c      	bcs.n	800c816 <_Setup_Event__cdr_deserialize+0x92>
 800c7fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c7fe:	4638      	mov	r0, r7
 800c800:	6873      	ldr	r3, [r6, #4]
 800c802:	4429      	add	r1, r5
 800c804:	3501      	adds	r5, #1
 800c806:	68db      	ldr	r3, [r3, #12]
 800c808:	4798      	blx	r3
 800c80a:	2800      	cmp	r0, #0
 800c80c:	d1f3      	bne.n	800c7f6 <_Setup_Event__cdr_deserialize+0x72>
 800c80e:	b002      	add	sp, #8
 800c810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c814:	2000      	movs	r0, #0
 800c816:	b002      	add	sp, #8
 800c818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c81c:	4608      	mov	r0, r1
 800c81e:	b002      	add	sp, #8
 800c820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c824:	20000990 	.word	0x20000990
 800c828:	20000978 	.word	0x20000978

0800c82c <_Setup_Event__cdr_serialize>:
 800c82c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c830:	2800      	cmp	r0, #0
 800c832:	d03b      	beq.n	800c8ac <_Setup_Event__cdr_serialize+0x80>
 800c834:	4605      	mov	r5, r0
 800c836:	460e      	mov	r6, r1
 800c838:	f002 f9c8 	bl	800ebcc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800c83c:	4603      	mov	r3, r0
 800c83e:	4631      	mov	r1, r6
 800c840:	4628      	mov	r0, r5
 800c842:	685b      	ldr	r3, [r3, #4]
 800c844:	689b      	ldr	r3, [r3, #8]
 800c846:	4798      	blx	r3
 800c848:	6aef      	ldr	r7, [r5, #44]	; 0x2c
 800c84a:	4630      	mov	r0, r6
 800c84c:	4639      	mov	r1, r7
 800c84e:	f002 fe5b 	bl	800f508 <ucdr_serialize_uint32_t>
 800c852:	b198      	cbz	r0, 800c87c <_Setup_Event__cdr_serialize+0x50>
 800c854:	b197      	cbz	r7, 800c87c <_Setup_Event__cdr_serialize+0x50>
 800c856:	2400      	movs	r4, #0
 800c858:	f8df 805c 	ldr.w	r8, [pc, #92]	; 800c8b8 <_Setup_Event__cdr_serialize+0x8c>
 800c85c:	e001      	b.n	800c862 <_Setup_Event__cdr_serialize+0x36>
 800c85e:	42a7      	cmp	r7, r4
 800c860:	d00c      	beq.n	800c87c <_Setup_Event__cdr_serialize+0x50>
 800c862:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
 800c866:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800c868:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c86c:	4631      	mov	r1, r6
 800c86e:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800c872:	3401      	adds	r4, #1
 800c874:	689b      	ldr	r3, [r3, #8]
 800c876:	4798      	blx	r3
 800c878:	2800      	cmp	r0, #0
 800c87a:	d1f0      	bne.n	800c85e <_Setup_Event__cdr_serialize+0x32>
 800c87c:	6baf      	ldr	r7, [r5, #56]	; 0x38
 800c87e:	4630      	mov	r0, r6
 800c880:	4639      	mov	r1, r7
 800c882:	f002 fe41 	bl	800f508 <ucdr_serialize_uint32_t>
 800c886:	4680      	mov	r8, r0
 800c888:	b180      	cbz	r0, 800c8ac <_Setup_Event__cdr_serialize+0x80>
 800c88a:	b18f      	cbz	r7, 800c8b0 <_Setup_Event__cdr_serialize+0x84>
 800c88c:	2400      	movs	r4, #0
 800c88e:	f8df 902c 	ldr.w	r9, [pc, #44]	; 800c8bc <_Setup_Event__cdr_serialize+0x90>
 800c892:	e001      	b.n	800c898 <_Setup_Event__cdr_serialize+0x6c>
 800c894:	42a7      	cmp	r7, r4
 800c896:	d00b      	beq.n	800c8b0 <_Setup_Event__cdr_serialize+0x84>
 800c898:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800c89a:	4631      	mov	r1, r6
 800c89c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800c8a0:	4420      	add	r0, r4
 800c8a2:	3401      	adds	r4, #1
 800c8a4:	689b      	ldr	r3, [r3, #8]
 800c8a6:	4798      	blx	r3
 800c8a8:	2800      	cmp	r0, #0
 800c8aa:	d1f3      	bne.n	800c894 <_Setup_Event__cdr_serialize+0x68>
 800c8ac:	f04f 0800 	mov.w	r8, #0
 800c8b0:	4640      	mov	r0, r8
 800c8b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c8b6:	bf00      	nop
 800c8b8:	20000978 	.word	0x20000978
 800c8bc:	20000990 	.word	0x20000990

0800c8c0 <_Setup_Response__get_serialized_size>:
 800c8c0:	b130      	cbz	r0, 800c8d0 <_Setup_Response__get_serialized_size+0x10>
 800c8c2:	2101      	movs	r1, #1
 800c8c4:	2000      	movs	r0, #0
 800c8c6:	b508      	push	{r3, lr}
 800c8c8:	f003 ff6c 	bl	80107a4 <ucdr_alignment>
 800c8cc:	3001      	adds	r0, #1
 800c8ce:	bd08      	pop	{r3, pc}
 800c8d0:	4770      	bx	lr
 800c8d2:	bf00      	nop

0800c8d4 <max_serialized_size_racs_services__srv__Setup_Request>:
 800c8d4:	b570      	push	{r4, r5, r6, lr}
 800c8d6:	460c      	mov	r4, r1
 800c8d8:	2301      	movs	r3, #1
 800c8da:	1c65      	adds	r5, r4, #1
 800c8dc:	4619      	mov	r1, r3
 800c8de:	7003      	strb	r3, [r0, #0]
 800c8e0:	4620      	mov	r0, r4
 800c8e2:	f003 ff5f 	bl	80107a4 <ucdr_alignment>
 800c8e6:	4405      	add	r5, r0
 800c8e8:	2104      	movs	r1, #4
 800c8ea:	f1c4 0404 	rsb	r4, r4, #4
 800c8ee:	4628      	mov	r0, r5
 800c8f0:	f003 ff58 	bl	80107a4 <ucdr_alignment>
 800c8f4:	2104      	movs	r1, #4
 800c8f6:	1846      	adds	r6, r0, r1
 800c8f8:	442e      	add	r6, r5
 800c8fa:	4630      	mov	r0, r6
 800c8fc:	f003 ff52 	bl	80107a4 <ucdr_alignment>
 800c900:	2104      	movs	r1, #4
 800c902:	1845      	adds	r5, r0, r1
 800c904:	442e      	add	r6, r5
 800c906:	4630      	mov	r0, r6
 800c908:	f003 ff4c 	bl	80107a4 <ucdr_alignment>
 800c90c:	2104      	movs	r1, #4
 800c90e:	4408      	add	r0, r1
 800c910:	4406      	add	r6, r0
 800c912:	4630      	mov	r0, r6
 800c914:	f003 ff46 	bl	80107a4 <ucdr_alignment>
 800c918:	2104      	movs	r1, #4
 800c91a:	1845      	adds	r5, r0, r1
 800c91c:	4435      	add	r5, r6
 800c91e:	4628      	mov	r0, r5
 800c920:	f003 ff40 	bl	80107a4 <ucdr_alignment>
 800c924:	2104      	movs	r1, #4
 800c926:	4408      	add	r0, r1
 800c928:	4405      	add	r5, r0
 800c92a:	4628      	mov	r0, r5
 800c92c:	f003 ff3a 	bl	80107a4 <ucdr_alignment>
 800c930:	4420      	add	r0, r4
 800c932:	4428      	add	r0, r5
 800c934:	bd70      	pop	{r4, r5, r6, pc}
 800c936:	bf00      	nop

0800c938 <_Setup_Request__max_serialized_size>:
 800c938:	b500      	push	{lr}
 800c93a:	b083      	sub	sp, #12
 800c93c:	2100      	movs	r1, #0
 800c93e:	f10d 0007 	add.w	r0, sp, #7
 800c942:	f7ff ffc7 	bl	800c8d4 <max_serialized_size_racs_services__srv__Setup_Request>
 800c946:	b003      	add	sp, #12
 800c948:	f85d fb04 	ldr.w	pc, [sp], #4

0800c94c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Setup_Event>:
 800c94c:	4800      	ldr	r0, [pc, #0]	; (800c950 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x4>)
 800c94e:	4770      	bx	lr
 800c950:	20000960 	.word	0x20000960

0800c954 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__racs_services__srv__Setup>:
 800c954:	4800      	ldr	r0, [pc, #0]	; (800c958 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__racs_services__srv__Setup+0x4>)
 800c956:	4770      	bx	lr
 800c958:	20000934 	.word	0x20000934

0800c95c <rcl_get_zero_initialized_publisher>:
 800c95c:	4b01      	ldr	r3, [pc, #4]	; (800c964 <rcl_get_zero_initialized_publisher+0x8>)
 800c95e:	6818      	ldr	r0, [r3, #0]
 800c960:	4770      	bx	lr
 800c962:	bf00      	nop
 800c964:	0801e3c0 	.word	0x0801e3c0

0800c968 <rcl_publisher_init>:
 800c968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c96c:	b088      	sub	sp, #32
 800c96e:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800c970:	2e00      	cmp	r6, #0
 800c972:	d06c      	beq.n	800ca4e <rcl_publisher_init+0xe6>
 800c974:	f106 0a50 	add.w	sl, r6, #80	; 0x50
 800c978:	4605      	mov	r5, r0
 800c97a:	460f      	mov	r7, r1
 800c97c:	4690      	mov	r8, r2
 800c97e:	4650      	mov	r0, sl
 800c980:	4699      	mov	r9, r3
 800c982:	f001 f969 	bl	800dc58 <rcutils_allocator_is_valid>
 800c986:	f080 0401 	eor.w	r4, r0, #1
 800c98a:	b2e4      	uxtb	r4, r4
 800c98c:	2c00      	cmp	r4, #0
 800c98e:	d15e      	bne.n	800ca4e <rcl_publisher_init+0xe6>
 800c990:	2d00      	cmp	r5, #0
 800c992:	d05c      	beq.n	800ca4e <rcl_publisher_init+0xe6>
 800c994:	682b      	ldr	r3, [r5, #0]
 800c996:	b123      	cbz	r3, 800c9a2 <rcl_publisher_init+0x3a>
 800c998:	2464      	movs	r4, #100	; 0x64
 800c99a:	4620      	mov	r0, r4
 800c99c:	b008      	add	sp, #32
 800c99e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9a2:	4638      	mov	r0, r7
 800c9a4:	f008 f9f4 	bl	8014d90 <rcl_node_is_valid>
 800c9a8:	2800      	cmp	r0, #0
 800c9aa:	d055      	beq.n	800ca58 <rcl_publisher_init+0xf0>
 800c9ac:	f1b8 0f00 	cmp.w	r8, #0
 800c9b0:	d04d      	beq.n	800ca4e <rcl_publisher_init+0xe6>
 800c9b2:	fab9 f389 	clz	r3, r9
 800c9b6:	095b      	lsrs	r3, r3, #5
 800c9b8:	f1b9 0f00 	cmp.w	r9, #0
 800c9bc:	d047      	beq.n	800ca4e <rcl_publisher_init+0xe6>
 800c9be:	aa07      	add	r2, sp, #28
 800c9c0:	9307      	str	r3, [sp, #28]
 800c9c2:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800c9c6:	f106 0358 	add.w	r3, r6, #88	; 0x58
 800c9ca:	9205      	str	r2, [sp, #20]
 800c9cc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c9d0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800c9d4:	4649      	mov	r1, r9
 800c9d6:	4638      	mov	r0, r7
 800c9d8:	e89a 000c 	ldmia.w	sl, {r2, r3}
 800c9dc:	f008 fa50 	bl	8014e80 <rcl_node_resolve_name>
 800c9e0:	2800      	cmp	r0, #0
 800c9e2:	d150      	bne.n	800ca86 <rcl_publisher_init+0x11e>
 800c9e4:	21c8      	movs	r1, #200	; 0xc8
 800c9e6:	2001      	movs	r0, #1
 800c9e8:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	; 0x5c
 800c9ec:	4798      	blx	r3
 800c9ee:	6028      	str	r0, [r5, #0]
 800c9f0:	2800      	cmp	r0, #0
 800c9f2:	d050      	beq.n	800ca96 <rcl_publisher_init+0x12e>
 800c9f4:	4638      	mov	r0, r7
 800c9f6:	f008 f9ed 	bl	8014dd4 <rcl_node_get_rmw_handle>
 800c9fa:	f106 0364 	add.w	r3, r6, #100	; 0x64
 800c9fe:	4641      	mov	r1, r8
 800ca00:	9a07      	ldr	r2, [sp, #28]
 800ca02:	9300      	str	r3, [sp, #0]
 800ca04:	4633      	mov	r3, r6
 800ca06:	682c      	ldr	r4, [r5, #0]
 800ca08:	f001 fa34 	bl	800de74 <rmw_create_publisher>
 800ca0c:	682b      	ldr	r3, [r5, #0]
 800ca0e:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
 800ca12:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 800ca16:	b370      	cbz	r0, 800ca76 <rcl_publisher_init+0x10e>
 800ca18:	f103 0170 	add.w	r1, r3, #112	; 0x70
 800ca1c:	f001 fb0e 	bl	800e03c <rmw_publisher_get_actual_qos>
 800ca20:	682b      	ldr	r3, [r5, #0]
 800ca22:	4604      	mov	r4, r0
 800ca24:	b9d0      	cbnz	r0, 800ca5c <rcl_publisher_init+0xf4>
 800ca26:	f896 2048 	ldrb.w	r2, [r6, #72]	; 0x48
 800ca2a:	4631      	mov	r1, r6
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 800ca32:	2270      	movs	r2, #112	; 0x70
 800ca34:	f00f ffb7 	bl	801c9a6 <memcpy>
 800ca38:	683a      	ldr	r2, [r7, #0]
 800ca3a:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
 800ca3e:	9807      	ldr	r0, [sp, #28]
 800ca40:	6d73      	ldr	r3, [r6, #84]	; 0x54
 800ca42:	6e31      	ldr	r1, [r6, #96]	; 0x60
 800ca44:	4798      	blx	r3
 800ca46:	4620      	mov	r0, r4
 800ca48:	b008      	add	sp, #32
 800ca4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca4e:	240b      	movs	r4, #11
 800ca50:	4620      	mov	r0, r4
 800ca52:	b008      	add	sp, #32
 800ca54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca58:	24c8      	movs	r4, #200	; 0xc8
 800ca5a:	e79e      	b.n	800c99a <rcl_publisher_init+0x32>
 800ca5c:	b1cb      	cbz	r3, 800ca92 <rcl_publisher_init+0x12a>
 800ca5e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800ca62:	b142      	cbz	r2, 800ca76 <rcl_publisher_init+0x10e>
 800ca64:	4638      	mov	r0, r7
 800ca66:	f008 f9b5 	bl	8014dd4 <rcl_node_get_rmw_handle>
 800ca6a:	682b      	ldr	r3, [r5, #0]
 800ca6c:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 800ca70:	f001 faf8 	bl	800e064 <rmw_destroy_publisher>
 800ca74:	682b      	ldr	r3, [r5, #0]
 800ca76:	4618      	mov	r0, r3
 800ca78:	6d72      	ldr	r2, [r6, #84]	; 0x54
 800ca7a:	6e31      	ldr	r1, [r6, #96]	; 0x60
 800ca7c:	2401      	movs	r4, #1
 800ca7e:	4790      	blx	r2
 800ca80:	2300      	movs	r3, #0
 800ca82:	602b      	str	r3, [r5, #0]
 800ca84:	e7db      	b.n	800ca3e <rcl_publisher_init+0xd6>
 800ca86:	2867      	cmp	r0, #103	; 0x67
 800ca88:	d007      	beq.n	800ca9a <rcl_publisher_init+0x132>
 800ca8a:	2869      	cmp	r0, #105	; 0x69
 800ca8c:	d005      	beq.n	800ca9a <rcl_publisher_init+0x132>
 800ca8e:	280a      	cmp	r0, #10
 800ca90:	d001      	beq.n	800ca96 <rcl_publisher_init+0x12e>
 800ca92:	2401      	movs	r4, #1
 800ca94:	e7d3      	b.n	800ca3e <rcl_publisher_init+0xd6>
 800ca96:	240a      	movs	r4, #10
 800ca98:	e7d1      	b.n	800ca3e <rcl_publisher_init+0xd6>
 800ca9a:	2467      	movs	r4, #103	; 0x67
 800ca9c:	e7cf      	b.n	800ca3e <rcl_publisher_init+0xd6>
 800ca9e:	bf00      	nop

0800caa0 <rcl_publisher_get_default_options>:
 800caa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800caa2:	4d1d      	ldr	r5, [pc, #116]	; (800cb18 <rcl_publisher_get_default_options+0x78>)
 800caa4:	b08b      	sub	sp, #44	; 0x2c
 800caa6:	2250      	movs	r2, #80	; 0x50
 800caa8:	491c      	ldr	r1, [pc, #112]	; (800cb1c <rcl_publisher_get_default_options+0x7c>)
 800caaa:	4604      	mov	r4, r0
 800caac:	4628      	mov	r0, r5
 800caae:	f00f ff7a 	bl	801c9a6 <memcpy>
 800cab2:	a802      	add	r0, sp, #8
 800cab4:	f001 f8c2 	bl	800dc3c <rcutils_get_default_allocator>
 800cab8:	f10d 0c08 	add.w	ip, sp, #8
 800cabc:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 800cac0:	466e      	mov	r6, sp
 800cac2:	2700      	movs	r7, #0
 800cac4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800cac8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800cacc:	f8dc 3000 	ldr.w	r3, [ip]
 800cad0:	4630      	mov	r0, r6
 800cad2:	f8ce 3000 	str.w	r3, [lr]
 800cad6:	f001 f94f 	bl	800dd78 <rmw_get_default_publisher_options>
 800cada:	f105 0364 	add.w	r3, r5, #100	; 0x64
 800cade:	f88d 7027 	strb.w	r7, [sp, #39]	; 0x27
 800cae2:	e896 0003 	ldmia.w	r6, {r0, r1}
 800cae6:	e883 0003 	stmia.w	r3, {r0, r1}
 800caea:	f10d 0027 	add.w	r0, sp, #39	; 0x27
 800caee:	f008 f977 	bl	8014de0 <rcl_get_disable_loaned_message>
 800caf2:	b958      	cbnz	r0, 800cb0c <rcl_publisher_get_default_options+0x6c>
 800caf4:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 800caf8:	f885 306c 	strb.w	r3, [r5, #108]	; 0x6c
 800cafc:	2270      	movs	r2, #112	; 0x70
 800cafe:	4906      	ldr	r1, [pc, #24]	; (800cb18 <rcl_publisher_get_default_options+0x78>)
 800cb00:	4620      	mov	r0, r4
 800cb02:	f00f ff50 	bl	801c9a6 <memcpy>
 800cb06:	4620      	mov	r0, r4
 800cb08:	b00b      	add	sp, #44	; 0x2c
 800cb0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb0c:	f001 f8c8 	bl	800dca0 <rcutils_reset_error>
 800cb10:	f885 706c 	strb.w	r7, [r5, #108]	; 0x6c
 800cb14:	e7f2      	b.n	800cafc <rcl_publisher_get_default_options+0x5c>
 800cb16:	bf00      	nop
 800cb18:	2000b918 	.word	0x2000b918
 800cb1c:	0801e3c8 	.word	0x0801e3c8

0800cb20 <rcl_publish>:
 800cb20:	b1f8      	cbz	r0, 800cb62 <rcl_publish+0x42>
 800cb22:	6803      	ldr	r3, [r0, #0]
 800cb24:	b570      	push	{r4, r5, r6, lr}
 800cb26:	4604      	mov	r4, r0
 800cb28:	b1b3      	cbz	r3, 800cb58 <rcl_publish+0x38>
 800cb2a:	4616      	mov	r6, r2
 800cb2c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800cb30:	b192      	cbz	r2, 800cb58 <rcl_publish+0x38>
 800cb32:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 800cb36:	460d      	mov	r5, r1
 800cb38:	f007 fd2e 	bl	8014598 <rcl_context_is_valid>
 800cb3c:	b160      	cbz	r0, 800cb58 <rcl_publish+0x38>
 800cb3e:	6823      	ldr	r3, [r4, #0]
 800cb40:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 800cb44:	b140      	cbz	r0, 800cb58 <rcl_publish+0x38>
 800cb46:	b155      	cbz	r5, 800cb5e <rcl_publish+0x3e>
 800cb48:	4632      	mov	r2, r6
 800cb4a:	4629      	mov	r1, r5
 800cb4c:	f001 f932 	bl	800ddb4 <rmw_publish>
 800cb50:	3800      	subs	r0, #0
 800cb52:	bf18      	it	ne
 800cb54:	2001      	movne	r0, #1
 800cb56:	bd70      	pop	{r4, r5, r6, pc}
 800cb58:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800cb5c:	bd70      	pop	{r4, r5, r6, pc}
 800cb5e:	200b      	movs	r0, #11
 800cb60:	bd70      	pop	{r4, r5, r6, pc}
 800cb62:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800cb66:	4770      	bx	lr

0800cb68 <rcl_publisher_is_valid>:
 800cb68:	b1a0      	cbz	r0, 800cb94 <rcl_publisher_is_valid+0x2c>
 800cb6a:	6803      	ldr	r3, [r0, #0]
 800cb6c:	b510      	push	{r4, lr}
 800cb6e:	4604      	mov	r4, r0
 800cb70:	b173      	cbz	r3, 800cb90 <rcl_publisher_is_valid+0x28>
 800cb72:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800cb76:	b15a      	cbz	r2, 800cb90 <rcl_publisher_is_valid+0x28>
 800cb78:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 800cb7c:	f007 fd0c 	bl	8014598 <rcl_context_is_valid>
 800cb80:	b130      	cbz	r0, 800cb90 <rcl_publisher_is_valid+0x28>
 800cb82:	6823      	ldr	r3, [r4, #0]
 800cb84:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 800cb88:	3800      	subs	r0, #0
 800cb8a:	bf18      	it	ne
 800cb8c:	2001      	movne	r0, #1
 800cb8e:	bd10      	pop	{r4, pc}
 800cb90:	2000      	movs	r0, #0
 800cb92:	bd10      	pop	{r4, pc}
 800cb94:	2000      	movs	r0, #0
 800cb96:	4770      	bx	lr

0800cb98 <rcl_publisher_is_valid_except_context>:
 800cb98:	b130      	cbz	r0, 800cba8 <rcl_publisher_is_valid_except_context+0x10>
 800cb9a:	6800      	ldr	r0, [r0, #0]
 800cb9c:	b120      	cbz	r0, 800cba8 <rcl_publisher_is_valid_except_context+0x10>
 800cb9e:	f8d0 00c4 	ldr.w	r0, [r0, #196]	; 0xc4
 800cba2:	3800      	subs	r0, #0
 800cba4:	bf18      	it	ne
 800cba6:	2001      	movne	r0, #1
 800cba8:	4770      	bx	lr
 800cbaa:	bf00      	nop

0800cbac <_rclc_check_for_new_data>:
 800cbac:	2800      	cmp	r0, #0
 800cbae:	d046      	beq.n	800cc3e <_rclc_check_for_new_data+0x92>
 800cbb0:	4603      	mov	r3, r0
 800cbb2:	b530      	push	{r4, r5, lr}
 800cbb4:	7802      	ldrb	r2, [r0, #0]
 800cbb6:	b085      	sub	sp, #20
 800cbb8:	2a0a      	cmp	r2, #10
 800cbba:	d842      	bhi.n	800cc42 <_rclc_check_for_new_data+0x96>
 800cbbc:	e8df f002 	tbb	[pc, r2]
 800cbc0:	14181212 	.word	0x14181212
 800cbc4:	06060614 	.word	0x06060614
 800cbc8:	2e1a      	.short	0x2e1a
 800cbca:	16          	.byte	0x16
 800cbcb:	00          	.byte	0x00
 800cbcc:	6a0a      	ldr	r2, [r1, #32]
 800cbce:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800cbd0:	2000      	movs	r0, #0
 800cbd2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800cbd6:	1a12      	subs	r2, r2, r0
 800cbd8:	bf18      	it	ne
 800cbda:	2201      	movne	r2, #1
 800cbdc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800cbe0:	b005      	add	sp, #20
 800cbe2:	bd30      	pop	{r4, r5, pc}
 800cbe4:	680a      	ldr	r2, [r1, #0]
 800cbe6:	e7f2      	b.n	800cbce <_rclc_check_for_new_data+0x22>
 800cbe8:	698a      	ldr	r2, [r1, #24]
 800cbea:	e7f0      	b.n	800cbce <_rclc_check_for_new_data+0x22>
 800cbec:	688a      	ldr	r2, [r1, #8]
 800cbee:	e7ee      	b.n	800cbce <_rclc_check_for_new_data+0x22>
 800cbf0:	690a      	ldr	r2, [r1, #16]
 800cbf2:	e7ec      	b.n	800cbce <_rclc_check_for_new_data+0x22>
 800cbf4:	685c      	ldr	r4, [r3, #4]
 800cbf6:	4608      	mov	r0, r1
 800cbf8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cbfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cc00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cc04:	f104 0110 	add.w	r1, r4, #16
 800cc08:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800cc0c:	9500      	str	r5, [sp, #0]
 800cc0e:	f104 0341 	add.w	r3, r4, #65	; 0x41
 800cc12:	f104 0240 	add.w	r2, r4, #64	; 0x40
 800cc16:	f00a fa0f 	bl	8017038 <rcl_action_client_wait_set_get_entities_ready>
 800cc1a:	e7e1      	b.n	800cbe0 <_rclc_check_for_new_data+0x34>
 800cc1c:	685c      	ldr	r4, [r3, #4]
 800cc1e:	4608      	mov	r0, r1
 800cc20:	f104 0222 	add.w	r2, r4, #34	; 0x22
 800cc24:	f104 0123 	add.w	r1, r4, #35	; 0x23
 800cc28:	f104 0321 	add.w	r3, r4, #33	; 0x21
 800cc2c:	e9cd 2100 	strd	r2, r1, [sp]
 800cc30:	f104 0220 	add.w	r2, r4, #32
 800cc34:	f104 0110 	add.w	r1, r4, #16
 800cc38:	f00a fc16 	bl	8017468 <rcl_action_server_wait_set_get_entities_ready>
 800cc3c:	e7d0      	b.n	800cbe0 <_rclc_check_for_new_data+0x34>
 800cc3e:	200b      	movs	r0, #11
 800cc40:	4770      	bx	lr
 800cc42:	2001      	movs	r0, #1
 800cc44:	e7cc      	b.n	800cbe0 <_rclc_check_for_new_data+0x34>
 800cc46:	bf00      	nop

0800cc48 <_rclc_take_new_data>:
 800cc48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc4a:	b099      	sub	sp, #100	; 0x64
 800cc4c:	2800      	cmp	r0, #0
 800cc4e:	f000 8088 	beq.w	800cd62 <_rclc_take_new_data+0x11a>
 800cc52:	7803      	ldrb	r3, [r0, #0]
 800cc54:	4604      	mov	r4, r0
 800cc56:	2b0a      	cmp	r3, #10
 800cc58:	f200 8167 	bhi.w	800cf2a <_rclc_take_new_data+0x2e2>
 800cc5c:	e8df f003 	tbb	[pc, r3]
 800cc60:	44152d2d 	.word	0x44152d2d
 800cc64:	19191944 	.word	0x19191944
 800cc68:	065a      	.short	0x065a
 800cc6a:	15          	.byte	0x15
 800cc6b:	00          	.byte	0x00
 800cc6c:	6840      	ldr	r0, [r0, #4]
 800cc6e:	f890 3020 	ldrb.w	r3, [r0, #32]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	f040 80b2 	bne.w	800cddc <_rclc_take_new_data+0x194>
 800cc78:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	f040 80e4 	bne.w	800ce4a <_rclc_take_new_data+0x202>
 800cc82:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d16f      	bne.n	800cd6a <_rclc_take_new_data+0x122>
 800cc8a:	2500      	movs	r5, #0
 800cc8c:	4628      	mov	r0, r5
 800cc8e:	b019      	add	sp, #100	; 0x64
 800cc90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc92:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800cc94:	6a0b      	ldr	r3, [r1, #32]
 800cc96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d0f5      	beq.n	800cc8a <_rclc_take_new_data+0x42>
 800cc9e:	6882      	ldr	r2, [r0, #8]
 800cca0:	f100 0110 	add.w	r1, r0, #16
 800cca4:	6840      	ldr	r0, [r0, #4]
 800cca6:	f008 fb97 	bl	80153d8 <rcl_take_request>
 800ccaa:	4605      	mov	r5, r0
 800ccac:	2800      	cmp	r0, #0
 800ccae:	d0ec      	beq.n	800cc8a <_rclc_take_new_data+0x42>
 800ccb0:	f240 2359 	movw	r3, #601	; 0x259
 800ccb4:	4298      	cmp	r0, r3
 800ccb6:	d013      	beq.n	800cce0 <_rclc_take_new_data+0x98>
 800ccb8:	e029      	b.n	800cd0e <_rclc_take_new_data+0xc6>
 800ccba:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800ccbc:	680b      	ldr	r3, [r1, #0]
 800ccbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d0e1      	beq.n	800cc8a <_rclc_take_new_data+0x42>
 800ccc6:	2300      	movs	r3, #0
 800ccc8:	aa0a      	add	r2, sp, #40	; 0x28
 800ccca:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800ccce:	f008 fd91 	bl	80157f4 <rcl_take>
 800ccd2:	4605      	mov	r5, r0
 800ccd4:	2800      	cmp	r0, #0
 800ccd6:	d0d9      	beq.n	800cc8c <_rclc_take_new_data+0x44>
 800ccd8:	f240 1391 	movw	r3, #401	; 0x191
 800ccdc:	4298      	cmp	r0, r3
 800ccde:	d116      	bne.n	800cd0e <_rclc_take_new_data+0xc6>
 800cce0:	2300      	movs	r3, #0
 800cce2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 800cce6:	e7d1      	b.n	800cc8c <_rclc_take_new_data+0x44>
 800cce8:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800ccea:	698b      	ldr	r3, [r1, #24]
 800ccec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d0ca      	beq.n	800cc8a <_rclc_take_new_data+0x42>
 800ccf4:	6882      	ldr	r2, [r0, #8]
 800ccf6:	f100 0110 	add.w	r1, r0, #16
 800ccfa:	6840      	ldr	r0, [r0, #4]
 800ccfc:	f007 fbbc 	bl	8014478 <rcl_take_response>
 800cd00:	4605      	mov	r5, r0
 800cd02:	2800      	cmp	r0, #0
 800cd04:	d0c1      	beq.n	800cc8a <_rclc_take_new_data+0x42>
 800cd06:	f240 13f5 	movw	r3, #501	; 0x1f5
 800cd0a:	4298      	cmp	r0, r3
 800cd0c:	d0be      	beq.n	800cc8c <_rclc_take_new_data+0x44>
 800cd0e:	f000 ffc7 	bl	800dca0 <rcutils_reset_error>
 800cd12:	e7bb      	b.n	800cc8c <_rclc_take_new_data+0x44>
 800cd14:	6840      	ldr	r0, [r0, #4]
 800cd16:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d17d      	bne.n	800ce1a <_rclc_take_new_data+0x1d2>
 800cd1e:	69c3      	ldr	r3, [r0, #28]
 800cd20:	b11b      	cbz	r3, 800cd2a <_rclc_take_new_data+0xe2>
 800cd22:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d144      	bne.n	800cdb4 <_rclc_take_new_data+0x16c>
 800cd2a:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	f040 80ac 	bne.w	800ce8c <_rclc_take_new_data+0x244>
 800cd34:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d0a6      	beq.n	800cc8a <_rclc_take_new_data+0x42>
 800cd3c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800cd3e:	a90a      	add	r1, sp, #40	; 0x28
 800cd40:	3010      	adds	r0, #16
 800cd42:	f00a f851 	bl	8016de8 <rcl_action_take_result_response>
 800cd46:	4605      	mov	r5, r0
 800cd48:	2800      	cmp	r0, #0
 800cd4a:	d1e0      	bne.n	800cd0e <_rclc_take_new_data+0xc6>
 800cd4c:	6860      	ldr	r0, [r4, #4]
 800cd4e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800cd52:	f00a fcb9 	bl	80176c8 <rclc_action_find_handle_by_result_request_sequence_number>
 800cd56:	2800      	cmp	r0, #0
 800cd58:	d098      	beq.n	800cc8c <_rclc_take_new_data+0x44>
 800cd5a:	2301      	movs	r3, #1
 800cd5c:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
 800cd60:	e794      	b.n	800cc8c <_rclc_take_new_data+0x44>
 800cd62:	250b      	movs	r5, #11
 800cd64:	4628      	mov	r0, r5
 800cd66:	b019      	add	sp, #100	; 0x64
 800cd68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd6a:	ae04      	add	r6, sp, #16
 800cd6c:	3010      	adds	r0, #16
 800cd6e:	aa0a      	add	r2, sp, #40	; 0x28
 800cd70:	4631      	mov	r1, r6
 800cd72:	f00a faad 	bl	80172d0 <rcl_action_take_cancel_request>
 800cd76:	4605      	mov	r5, r0
 800cd78:	2800      	cmp	r0, #0
 800cd7a:	d1c8      	bne.n	800cd0e <_rclc_take_new_data+0xc6>
 800cd7c:	a90a      	add	r1, sp, #40	; 0x28
 800cd7e:	6860      	ldr	r0, [r4, #4]
 800cd80:	f00a fc62 	bl	8017648 <rclc_action_find_goal_handle_by_uuid>
 800cd84:	4607      	mov	r7, r0
 800cd86:	2800      	cmp	r0, #0
 800cd88:	f000 80bb 	beq.w	800cf02 <_rclc_take_new_data+0x2ba>
 800cd8c:	2101      	movs	r1, #1
 800cd8e:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800cd92:	f00a fbe3 	bl	801755c <rcl_action_transition_goal_state>
 800cd96:	2803      	cmp	r0, #3
 800cd98:	4684      	mov	ip, r0
 800cd9a:	f040 80a7 	bne.w	800ceec <_rclc_take_new_data+0x2a4>
 800cd9e:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800cda2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800cda4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cda6:	e896 0003 	ldmia.w	r6, {r0, r1}
 800cdaa:	e884 0003 	stmia.w	r4, {r0, r1}
 800cdae:	f887 c008 	strb.w	ip, [r7, #8]
 800cdb2:	e76b      	b.n	800cc8c <_rclc_take_new_data+0x44>
 800cdb4:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800cdb6:	3010      	adds	r0, #16
 800cdb8:	f00a f896 	bl	8016ee8 <rcl_action_take_feedback>
 800cdbc:	4605      	mov	r5, r0
 800cdbe:	2800      	cmp	r0, #0
 800cdc0:	d1a5      	bne.n	800cd0e <_rclc_take_new_data+0xc6>
 800cdc2:	6860      	ldr	r0, [r4, #4]
 800cdc4:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800cdc6:	f00a fc3f 	bl	8017648 <rclc_action_find_goal_handle_by_uuid>
 800cdca:	4603      	mov	r3, r0
 800cdcc:	2800      	cmp	r0, #0
 800cdce:	f000 80a3 	beq.w	800cf18 <_rclc_take_new_data+0x2d0>
 800cdd2:	2201      	movs	r2, #1
 800cdd4:	6860      	ldr	r0, [r4, #4]
 800cdd6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 800cdda:	e7a6      	b.n	800cd2a <_rclc_take_new_data+0xe2>
 800cddc:	f00a fc0e 	bl	80175fc <rclc_action_take_goal_handle>
 800cde0:	4606      	mov	r6, r0
 800cde2:	6860      	ldr	r0, [r4, #4]
 800cde4:	2e00      	cmp	r6, #0
 800cde6:	f43f af47 	beq.w	800cc78 <_rclc_take_new_data+0x30>
 800cdea:	6070      	str	r0, [r6, #4]
 800cdec:	f106 0128 	add.w	r1, r6, #40	; 0x28
 800cdf0:	69f2      	ldr	r2, [r6, #28]
 800cdf2:	3010      	adds	r0, #16
 800cdf4:	f00a f9b6 	bl	8017164 <rcl_action_take_goal_request>
 800cdf8:	4605      	mov	r5, r0
 800cdfa:	2800      	cmp	r0, #0
 800cdfc:	f040 808e 	bne.w	800cf1c <_rclc_take_new_data+0x2d4>
 800ce00:	69f7      	ldr	r7, [r6, #28]
 800ce02:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800ce04:	7235      	strb	r5, [r6, #8]
 800ce06:	f8c6 0009 	str.w	r0, [r6, #9]
 800ce0a:	f8c6 100d 	str.w	r1, [r6, #13]
 800ce0e:	6860      	ldr	r0, [r4, #4]
 800ce10:	f8c6 2011 	str.w	r2, [r6, #17]
 800ce14:	f8c6 3015 	str.w	r3, [r6, #21]
 800ce18:	e72e      	b.n	800cc78 <_rclc_take_new_data+0x30>
 800ce1a:	aa04      	add	r2, sp, #16
 800ce1c:	a90a      	add	r1, sp, #40	; 0x28
 800ce1e:	3010      	adds	r0, #16
 800ce20:	f009 ff6a 	bl	8016cf8 <rcl_action_take_goal_response>
 800ce24:	4605      	mov	r5, r0
 800ce26:	2800      	cmp	r0, #0
 800ce28:	f47f af71 	bne.w	800cd0e <_rclc_take_new_data+0xc6>
 800ce2c:	6860      	ldr	r0, [r4, #4]
 800ce2e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800ce32:	f00a fc37 	bl	80176a4 <rclc_action_find_handle_by_goal_request_sequence_number>
 800ce36:	b130      	cbz	r0, 800ce46 <_rclc_take_new_data+0x1fe>
 800ce38:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800ce3c:	2201      	movs	r2, #1
 800ce3e:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
 800ce42:	f880 2020 	strb.w	r2, [r0, #32]
 800ce46:	6860      	ldr	r0, [r4, #4]
 800ce48:	e769      	b.n	800cd1e <_rclc_take_new_data+0xd6>
 800ce4a:	3010      	adds	r0, #16
 800ce4c:	aa04      	add	r2, sp, #16
 800ce4e:	a90a      	add	r1, sp, #40	; 0x28
 800ce50:	f00a f9fe 	bl	8017250 <rcl_action_take_result_request>
 800ce54:	4605      	mov	r5, r0
 800ce56:	2800      	cmp	r0, #0
 800ce58:	f47f af59 	bne.w	800cd0e <_rclc_take_new_data+0xc6>
 800ce5c:	a904      	add	r1, sp, #16
 800ce5e:	6860      	ldr	r0, [r4, #4]
 800ce60:	f00a fbf2 	bl	8017648 <rclc_action_find_goal_handle_by_uuid>
 800ce64:	4607      	mov	r7, r0
 800ce66:	b160      	cbz	r0, 800ce82 <_rclc_take_new_data+0x23a>
 800ce68:	ad0a      	add	r5, sp, #40	; 0x28
 800ce6a:	f100 0640 	add.w	r6, r0, #64	; 0x40
 800ce6e:	f04f 0c02 	mov.w	ip, #2
 800ce72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ce74:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800ce76:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ce7a:	e886 0003 	stmia.w	r6, {r0, r1}
 800ce7e:	f887 c008 	strb.w	ip, [r7, #8]
 800ce82:	6860      	ldr	r0, [r4, #4]
 800ce84:	2300      	movs	r3, #0
 800ce86:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
 800ce8a:	e6fa      	b.n	800cc82 <_rclc_take_new_data+0x3a>
 800ce8c:	f100 0230 	add.w	r2, r0, #48	; 0x30
 800ce90:	a90a      	add	r1, sp, #40	; 0x28
 800ce92:	3010      	adds	r0, #16
 800ce94:	f009 ffe8 	bl	8016e68 <rcl_action_take_cancel_response>
 800ce98:	4605      	mov	r5, r0
 800ce9a:	2800      	cmp	r0, #0
 800ce9c:	f47f af37 	bne.w	800cd0e <_rclc_take_new_data+0xc6>
 800cea0:	6860      	ldr	r0, [r4, #4]
 800cea2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800cea6:	f00a fc21 	bl	80176ec <rclc_action_find_handle_by_cancel_request_sequence_number>
 800ceaa:	4606      	mov	r6, r0
 800ceac:	6860      	ldr	r0, [r4, #4]
 800ceae:	2e00      	cmp	r6, #0
 800ceb0:	f43f af40 	beq.w	800cd34 <_rclc_take_new_data+0xec>
 800ceb4:	2701      	movs	r7, #1
 800ceb6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800ceb8:	84b7      	strh	r7, [r6, #36]	; 0x24
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	f43f af3a 	beq.w	800cd34 <_rclc_take_new_data+0xec>
 800cec0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800cec2:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800cec6:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800ceca:	f00a fbbd 	bl	8017648 <rclc_action_find_goal_handle_by_uuid>
 800cece:	b138      	cbz	r0, 800cee0 <_rclc_take_new_data+0x298>
 800ced0:	6860      	ldr	r0, [r4, #4]
 800ced2:	3501      	adds	r5, #1
 800ced4:	f886 7025 	strb.w	r7, [r6, #37]	; 0x25
 800ced8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800ceda:	42ab      	cmp	r3, r5
 800cedc:	d8f0      	bhi.n	800cec0 <_rclc_take_new_data+0x278>
 800cede:	e729      	b.n	800cd34 <_rclc_take_new_data+0xec>
 800cee0:	6860      	ldr	r0, [r4, #4]
 800cee2:	3501      	adds	r5, #1
 800cee4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800cee6:	42ab      	cmp	r3, r5
 800cee8:	d8ea      	bhi.n	800cec0 <_rclc_take_new_data+0x278>
 800ceea:	e723      	b.n	800cd34 <_rclc_take_new_data+0xec>
 800ceec:	ab06      	add	r3, sp, #24
 800ceee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800cef0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800cef4:	2103      	movs	r1, #3
 800cef6:	6860      	ldr	r0, [r4, #4]
 800cef8:	e896 000c 	ldmia.w	r6, {r2, r3}
 800cefc:	f00a fc6c 	bl	80177d8 <rclc_action_server_goal_cancel_reject>
 800cf00:	e6c4      	b.n	800cc8c <_rclc_take_new_data+0x44>
 800cf02:	ab06      	add	r3, sp, #24
 800cf04:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800cf06:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800cf0a:	2102      	movs	r1, #2
 800cf0c:	6860      	ldr	r0, [r4, #4]
 800cf0e:	e896 000c 	ldmia.w	r6, {r2, r3}
 800cf12:	f00a fc61 	bl	80177d8 <rclc_action_server_goal_cancel_reject>
 800cf16:	e6b9      	b.n	800cc8c <_rclc_take_new_data+0x44>
 800cf18:	6860      	ldr	r0, [r4, #4]
 800cf1a:	e706      	b.n	800cd2a <_rclc_take_new_data+0xe2>
 800cf1c:	4631      	mov	r1, r6
 800cf1e:	6860      	ldr	r0, [r4, #4]
 800cf20:	f00a fb7c 	bl	801761c <rclc_action_remove_used_goal_handle>
 800cf24:	f000 febc 	bl	800dca0 <rcutils_reset_error>
 800cf28:	e6b0      	b.n	800cc8c <_rclc_take_new_data+0x44>
 800cf2a:	2501      	movs	r5, #1
 800cf2c:	e6ae      	b.n	800cc8c <_rclc_take_new_data+0x44>
 800cf2e:	bf00      	nop

0800cf30 <_rclc_execute.part.0>:
 800cf30:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf32:	7803      	ldrb	r3, [r0, #0]
 800cf34:	b085      	sub	sp, #20
 800cf36:	4604      	mov	r4, r0
 800cf38:	2b0a      	cmp	r3, #10
 800cf3a:	f200 8139 	bhi.w	800d1b0 <_rclc_execute.part.0+0x280>
 800cf3e:	e8df f003 	tbb	[pc, r3]
 800cf42:	4268      	.short	0x4268
 800cf44:	06a75b4d 	.word	0x06a75b4d
 800cf48:	721d0606 	.word	0x721d0606
 800cf4c:	62          	.byte	0x62
 800cf4d:	00          	.byte	0x00
 800cf4e:	2b06      	cmp	r3, #6
 800cf50:	f000 8126 	beq.w	800d1a0 <_rclc_execute.part.0+0x270>
 800cf54:	2b07      	cmp	r3, #7
 800cf56:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800cf58:	f040 811c 	bne.w	800d194 <_rclc_execute.part.0+0x264>
 800cf5c:	f104 0510 	add.w	r5, r4, #16
 800cf60:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	; 0x28
 800cf64:	6880      	ldr	r0, [r0, #8]
 800cf66:	4798      	blx	r3
 800cf68:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800cf6a:	4629      	mov	r1, r5
 800cf6c:	6860      	ldr	r0, [r4, #4]
 800cf6e:	f008 fa83 	bl	8015478 <rcl_send_response>
 800cf72:	4604      	mov	r4, r0
 800cf74:	b378      	cbz	r0, 800cfd6 <_rclc_execute.part.0+0xa6>
 800cf76:	f000 fe93 	bl	800dca0 <rcutils_reset_error>
 800cf7a:	e02c      	b.n	800cfd6 <_rclc_execute.part.0+0xa6>
 800cf7c:	6840      	ldr	r0, [r0, #4]
 800cf7e:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	f000 808e 	beq.w	800d0a4 <_rclc_execute.part.0+0x174>
 800cf88:	2600      	movs	r6, #0
 800cf8a:	2701      	movs	r7, #1
 800cf8c:	e004      	b.n	800cf98 <_rclc_execute.part.0+0x68>
 800cf8e:	f00a fb0f 	bl	80175b0 <rclc_action_send_result_request>
 800cf92:	b998      	cbnz	r0, 800cfbc <_rclc_execute.part.0+0x8c>
 800cf94:	722f      	strb	r7, [r5, #8]
 800cf96:	6860      	ldr	r0, [r4, #4]
 800cf98:	f00a fbba 	bl	8017710 <rclc_action_find_first_handle_with_goal_response>
 800cf9c:	4605      	mov	r5, r0
 800cf9e:	2800      	cmp	r0, #0
 800cfa0:	d07f      	beq.n	800d0a2 <_rclc_execute.part.0+0x172>
 800cfa2:	6863      	ldr	r3, [r4, #4]
 800cfa4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800cfa6:	699b      	ldr	r3, [r3, #24]
 800cfa8:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
 800cfac:	f885 6020 	strb.w	r6, [r5, #32]
 800cfb0:	4798      	blx	r3
 800cfb2:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 800cfb6:	4628      	mov	r0, r5
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d1e8      	bne.n	800cf8e <_rclc_execute.part.0+0x5e>
 800cfbc:	6860      	ldr	r0, [r4, #4]
 800cfbe:	4629      	mov	r1, r5
 800cfc0:	f00a fb2c 	bl	801761c <rclc_action_remove_used_goal_handle>
 800cfc4:	e7e7      	b.n	800cf96 <_rclc_execute.part.0+0x66>
 800cfc6:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 800cfca:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	; 0x2c
 800cfce:	b100      	cbz	r0, 800cfd2 <_rclc_execute.part.0+0xa2>
 800cfd0:	68a0      	ldr	r0, [r4, #8]
 800cfd2:	2400      	movs	r4, #0
 800cfd4:	4798      	blx	r3
 800cfd6:	4620      	mov	r0, r4
 800cfd8:	b005      	add	sp, #20
 800cfda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cfdc:	6840      	ldr	r0, [r0, #4]
 800cfde:	f008 ff43 	bl	8015e68 <rcl_timer_call>
 800cfe2:	f240 3321 	movw	r3, #801	; 0x321
 800cfe6:	4604      	mov	r4, r0
 800cfe8:	4298      	cmp	r0, r3
 800cfea:	d001      	beq.n	800cff0 <_rclc_execute.part.0+0xc0>
 800cfec:	2800      	cmp	r0, #0
 800cfee:	d1c2      	bne.n	800cf76 <_rclc_execute.part.0+0x46>
 800cff0:	2400      	movs	r4, #0
 800cff2:	4620      	mov	r0, r4
 800cff4:	b005      	add	sp, #20
 800cff6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cff8:	2400      	movs	r4, #0
 800cffa:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800cffc:	6880      	ldr	r0, [r0, #8]
 800cffe:	4798      	blx	r3
 800d000:	4620      	mov	r0, r4
 800d002:	b005      	add	sp, #20
 800d004:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d006:	2400      	movs	r4, #0
 800d008:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800d00a:	4798      	blx	r3
 800d00c:	4620      	mov	r0, r4
 800d00e:	b005      	add	sp, #20
 800d010:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d012:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 800d016:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800d018:	b100      	cbz	r0, 800d01c <_rclc_execute.part.0+0xec>
 800d01a:	68a0      	ldr	r0, [r4, #8]
 800d01c:	2400      	movs	r4, #0
 800d01e:	4798      	blx	r3
 800d020:	4620      	mov	r0, r4
 800d022:	b005      	add	sp, #20
 800d024:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d026:	6840      	ldr	r0, [r0, #4]
 800d028:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800d02c:	bb3b      	cbnz	r3, 800d07e <_rclc_execute.part.0+0x14e>
 800d02e:	f890 3020 	ldrb.w	r3, [r0, #32]
 800d032:	2b00      	cmp	r3, #0
 800d034:	d07d      	beq.n	800d132 <_rclc_execute.part.0+0x202>
 800d036:	f640 0634 	movw	r6, #2100	; 0x834
 800d03a:	2701      	movs	r7, #1
 800d03c:	e007      	b.n	800d04e <_rclc_execute.part.0+0x11e>
 800d03e:	4628      	mov	r0, r5
 800d040:	f00a fb7e 	bl	8017740 <rclc_action_server_response_goal_request>
 800d044:	4629      	mov	r1, r5
 800d046:	6860      	ldr	r0, [r4, #4]
 800d048:	f00a fae8 	bl	801761c <rclc_action_remove_used_goal_handle>
 800d04c:	6860      	ldr	r0, [r4, #4]
 800d04e:	2100      	movs	r1, #0
 800d050:	f00a fb10 	bl	8017674 <rclc_action_find_first_handle_by_status>
 800d054:	4605      	mov	r5, r0
 800d056:	2800      	cmp	r0, #0
 800d058:	d068      	beq.n	800d12c <_rclc_execute.part.0+0x1fc>
 800d05a:	6863      	ldr	r3, [r4, #4]
 800d05c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800d05e:	699b      	ldr	r3, [r3, #24]
 800d060:	4798      	blx	r3
 800d062:	42b0      	cmp	r0, r6
 800d064:	f04f 0100 	mov.w	r1, #0
 800d068:	d1e9      	bne.n	800d03e <_rclc_execute.part.0+0x10e>
 800d06a:	2101      	movs	r1, #1
 800d06c:	4628      	mov	r0, r5
 800d06e:	f00a fb67 	bl	8017740 <rclc_action_server_response_goal_request>
 800d072:	722f      	strb	r7, [r5, #8]
 800d074:	e7ea      	b.n	800d04c <_rclc_execute.part.0+0x11c>
 800d076:	6848      	ldr	r0, [r1, #4]
 800d078:	f00a fad0 	bl	801761c <rclc_action_remove_used_goal_handle>
 800d07c:	6860      	ldr	r0, [r4, #4]
 800d07e:	f00a fb05 	bl	801768c <rclc_action_find_first_terminated_handle>
 800d082:	4601      	mov	r1, r0
 800d084:	2800      	cmp	r0, #0
 800d086:	d1f6      	bne.n	800d076 <_rclc_execute.part.0+0x146>
 800d088:	6860      	ldr	r0, [r4, #4]
 800d08a:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 800d08e:	e7ce      	b.n	800d02e <_rclc_execute.part.0+0xfe>
 800d090:	2400      	movs	r4, #0
 800d092:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800d094:	f100 0110 	add.w	r1, r0, #16
 800d098:	6880      	ldr	r0, [r0, #8]
 800d09a:	4798      	blx	r3
 800d09c:	4620      	mov	r0, r4
 800d09e:	b005      	add	sp, #20
 800d0a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d0a2:	6860      	ldr	r0, [r4, #4]
 800d0a4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800d0a8:	b18b      	cbz	r3, 800d0ce <_rclc_execute.part.0+0x19e>
 800d0aa:	68c5      	ldr	r5, [r0, #12]
 800d0ac:	b32d      	cbz	r5, 800d0fa <_rclc_execute.part.0+0x1ca>
 800d0ae:	2600      	movs	r6, #0
 800d0b0:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 800d0b4:	b143      	cbz	r3, 800d0c8 <_rclc_execute.part.0+0x198>
 800d0b6:	69c3      	ldr	r3, [r0, #28]
 800d0b8:	f885 6022 	strb.w	r6, [r5, #34]	; 0x22
 800d0bc:	b123      	cbz	r3, 800d0c8 <_rclc_execute.part.0+0x198>
 800d0be:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800d0c0:	4628      	mov	r0, r5
 800d0c2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800d0c4:	4798      	blx	r3
 800d0c6:	6860      	ldr	r0, [r4, #4]
 800d0c8:	682d      	ldr	r5, [r5, #0]
 800d0ca:	2d00      	cmp	r5, #0
 800d0cc:	d1f0      	bne.n	800d0b0 <_rclc_execute.part.0+0x180>
 800d0ce:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800d0d2:	b193      	cbz	r3, 800d0fa <_rclc_execute.part.0+0x1ca>
 800d0d4:	68c5      	ldr	r5, [r0, #12]
 800d0d6:	b185      	cbz	r5, 800d0fa <_rclc_execute.part.0+0x1ca>
 800d0d8:	2600      	movs	r6, #0
 800d0da:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 800d0de:	b14b      	cbz	r3, 800d0f4 <_rclc_execute.part.0+0x1c4>
 800d0e0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800d0e2:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
 800d0e6:	b12b      	cbz	r3, 800d0f4 <_rclc_execute.part.0+0x1c4>
 800d0e8:	4628      	mov	r0, r5
 800d0ea:	f895 1025 	ldrb.w	r1, [r5, #37]	; 0x25
 800d0ee:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800d0f0:	4798      	blx	r3
 800d0f2:	6860      	ldr	r0, [r4, #4]
 800d0f4:	682d      	ldr	r5, [r5, #0]
 800d0f6:	2d00      	cmp	r5, #0
 800d0f8:	d1ef      	bne.n	800d0da <_rclc_execute.part.0+0x1aa>
 800d0fa:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	f43f af76 	beq.w	800cff0 <_rclc_execute.part.0+0xc0>
 800d104:	2700      	movs	r7, #0
 800d106:	e00b      	b.n	800d120 <_rclc_execute.part.0+0x1f0>
 800d108:	6863      	ldr	r3, [r4, #4]
 800d10a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800d10c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800d10e:	6a1e      	ldr	r6, [r3, #32]
 800d110:	f885 7023 	strb.w	r7, [r5, #35]	; 0x23
 800d114:	47b0      	blx	r6
 800d116:	6860      	ldr	r0, [r4, #4]
 800d118:	4629      	mov	r1, r5
 800d11a:	f00a fa7f 	bl	801761c <rclc_action_remove_used_goal_handle>
 800d11e:	6860      	ldr	r0, [r4, #4]
 800d120:	f00a fb02 	bl	8017728 <rclc_action_find_first_handle_with_result_response>
 800d124:	4605      	mov	r5, r0
 800d126:	2800      	cmp	r0, #0
 800d128:	d1ee      	bne.n	800d108 <_rclc_execute.part.0+0x1d8>
 800d12a:	e761      	b.n	800cff0 <_rclc_execute.part.0+0xc0>
 800d12c:	6860      	ldr	r0, [r4, #4]
 800d12e:	f880 5020 	strb.w	r5, [r0, #32]
 800d132:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800d136:	2b00      	cmp	r3, #0
 800d138:	f43f af5a 	beq.w	800cff0 <_rclc_execute.part.0+0xc0>
 800d13c:	68c5      	ldr	r5, [r0, #12]
 800d13e:	b1b5      	cbz	r5, 800d16e <_rclc_execute.part.0+0x23e>
 800d140:	2602      	movs	r6, #2
 800d142:	e001      	b.n	800d148 <_rclc_execute.part.0+0x218>
 800d144:	682d      	ldr	r5, [r5, #0]
 800d146:	b195      	cbz	r5, 800d16e <_rclc_execute.part.0+0x23e>
 800d148:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800d14c:	2b03      	cmp	r3, #3
 800d14e:	d1f9      	bne.n	800d144 <_rclc_execute.part.0+0x214>
 800d150:	69c3      	ldr	r3, [r0, #28]
 800d152:	4628      	mov	r0, r5
 800d154:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800d156:	4798      	blx	r3
 800d158:	4603      	mov	r3, r0
 800d15a:	f105 0260 	add.w	r2, r5, #96	; 0x60
 800d15e:	4628      	mov	r0, r5
 800d160:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 800d164:	b143      	cbz	r3, 800d178 <_rclc_execute.part.0+0x248>
 800d166:	f00a fb0b 	bl	8017780 <rclc_action_server_goal_cancel_accept>
 800d16a:	6860      	ldr	r0, [r4, #4]
 800d16c:	e7ea      	b.n	800d144 <_rclc_execute.part.0+0x214>
 800d16e:	2300      	movs	r3, #0
 800d170:	461c      	mov	r4, r3
 800d172:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
 800d176:	e72e      	b.n	800cfd6 <_rclc_execute.part.0+0xa6>
 800d178:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800d17a:	f105 0758 	add.w	r7, r5, #88	; 0x58
 800d17e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800d182:	2101      	movs	r1, #1
 800d184:	6860      	ldr	r0, [r4, #4]
 800d186:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d18a:	f00a fb25 	bl	80177d8 <rclc_action_server_goal_cancel_reject>
 800d18e:	722e      	strb	r6, [r5, #8]
 800d190:	6860      	ldr	r0, [r4, #4]
 800d192:	e7d7      	b.n	800d144 <_rclc_execute.part.0+0x214>
 800d194:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800d196:	f104 0510 	add.w	r5, r4, #16
 800d19a:	6880      	ldr	r0, [r0, #8]
 800d19c:	4798      	blx	r3
 800d19e:	e6e3      	b.n	800cf68 <_rclc_execute.part.0+0x38>
 800d1a0:	f100 0510 	add.w	r5, r0, #16
 800d1a4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800d1a6:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800d1a8:	4629      	mov	r1, r5
 800d1aa:	6880      	ldr	r0, [r0, #8]
 800d1ac:	4798      	blx	r3
 800d1ae:	e6db      	b.n	800cf68 <_rclc_execute.part.0+0x38>
 800d1b0:	2401      	movs	r4, #1
 800d1b2:	e710      	b.n	800cfd6 <_rclc_execute.part.0+0xa6>

0800d1b4 <rclc_executor_trigger_any>:
 800d1b4:	2800      	cmp	r0, #0
 800d1b6:	d03d      	beq.n	800d234 <rclc_executor_trigger_any+0x80>
 800d1b8:	2900      	cmp	r1, #0
 800d1ba:	d03c      	beq.n	800d236 <rclc_executor_trigger_any+0x82>
 800d1bc:	4603      	mov	r3, r0
 800d1be:	f890 0038 	ldrb.w	r0, [r0, #56]	; 0x38
 800d1c2:	2200      	movs	r2, #0
 800d1c4:	2800      	cmp	r0, #0
 800d1c6:	d035      	beq.n	800d234 <rclc_executor_trigger_any+0x80>
 800d1c8:	b430      	push	{r4, r5}
 800d1ca:	f893 c000 	ldrb.w	ip, [r3]
 800d1ce:	f1bc 0f08 	cmp.w	ip, #8
 800d1d2:	d11d      	bne.n	800d210 <rclc_executor_trigger_any+0x5c>
 800d1d4:	685c      	ldr	r4, [r3, #4]
 800d1d6:	6c25      	ldr	r5, [r4, #64]	; 0x40
 800d1d8:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 800d1dc:	d105      	bne.n	800d1ea <rclc_executor_trigger_any+0x36>
 800d1de:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 800d1e2:	b910      	cbnz	r0, 800d1ea <rclc_executor_trigger_any+0x36>
 800d1e4:	f894 0043 	ldrb.w	r0, [r4, #67]	; 0x43
 800d1e8:	b128      	cbz	r0, 800d1f6 <rclc_executor_trigger_any+0x42>
 800d1ea:	bc30      	pop	{r4, r5}
 800d1ec:	4770      	bx	lr
 800d1ee:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
 800d1f2:	2800      	cmp	r0, #0
 800d1f4:	d1f9      	bne.n	800d1ea <rclc_executor_trigger_any+0x36>
 800d1f6:	3201      	adds	r2, #1
 800d1f8:	3340      	adds	r3, #64	; 0x40
 800d1fa:	4291      	cmp	r1, r2
 800d1fc:	d017      	beq.n	800d22e <rclc_executor_trigger_any+0x7a>
 800d1fe:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
 800d202:	2800      	cmp	r0, #0
 800d204:	d0f1      	beq.n	800d1ea <rclc_executor_trigger_any+0x36>
 800d206:	f893 c000 	ldrb.w	ip, [r3]
 800d20a:	f1bc 0f08 	cmp.w	ip, #8
 800d20e:	d0e1      	beq.n	800d1d4 <rclc_executor_trigger_any+0x20>
 800d210:	f1bc 0f09 	cmp.w	ip, #9
 800d214:	d1eb      	bne.n	800d1ee <rclc_executor_trigger_any+0x3a>
 800d216:	685c      	ldr	r4, [r3, #4]
 800d218:	6a25      	ldr	r5, [r4, #32]
 800d21a:	2d00      	cmp	r5, #0
 800d21c:	d1e5      	bne.n	800d1ea <rclc_executor_trigger_any+0x36>
 800d21e:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 800d222:	2800      	cmp	r0, #0
 800d224:	d1e1      	bne.n	800d1ea <rclc_executor_trigger_any+0x36>
 800d226:	3201      	adds	r2, #1
 800d228:	3340      	adds	r3, #64	; 0x40
 800d22a:	4291      	cmp	r1, r2
 800d22c:	d1e7      	bne.n	800d1fe <rclc_executor_trigger_any+0x4a>
 800d22e:	2000      	movs	r0, #0
 800d230:	bc30      	pop	{r4, r5}
 800d232:	4770      	bx	lr
 800d234:	4770      	bx	lr
 800d236:	4608      	mov	r0, r1
 800d238:	4770      	bx	lr
 800d23a:	bf00      	nop

0800d23c <rclc_executor_get_zero_initialized_executor>:
 800d23c:	b510      	push	{r4, lr}
 800d23e:	4604      	mov	r4, r0
 800d240:	2290      	movs	r2, #144	; 0x90
 800d242:	4902      	ldr	r1, [pc, #8]	; (800d24c <rclc_executor_get_zero_initialized_executor+0x10>)
 800d244:	f00f fbaf 	bl	801c9a6 <memcpy>
 800d248:	4620      	mov	r0, r4
 800d24a:	bd10      	pop	{r4, pc}
 800d24c:	0801e418 	.word	0x0801e418

0800d250 <rclc_executor_init>:
 800d250:	2900      	cmp	r1, #0
 800d252:	d06a      	beq.n	800d32a <rclc_executor_init+0xda>
 800d254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d258:	4605      	mov	r5, r0
 800d25a:	b0b2      	sub	sp, #200	; 0xc8
 800d25c:	2800      	cmp	r0, #0
 800d25e:	d05c      	beq.n	800d31a <rclc_executor_init+0xca>
 800d260:	4616      	mov	r6, r2
 800d262:	4618      	mov	r0, r3
 800d264:	4688      	mov	r8, r1
 800d266:	461f      	mov	r7, r3
 800d268:	f000 fcf6 	bl	800dc58 <rcutils_allocator_is_valid>
 800d26c:	2e00      	cmp	r6, #0
 800d26e:	d054      	beq.n	800d31a <rclc_executor_init+0xca>
 800d270:	f080 0401 	eor.w	r4, r0, #1
 800d274:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 800d278:	d14f      	bne.n	800d31a <rclc_executor_init+0xca>
 800d27a:	2290      	movs	r2, #144	; 0x90
 800d27c:	4930      	ldr	r1, [pc, #192]	; (800d340 <rclc_executor_init+0xf0>)
 800d27e:	a80e      	add	r0, sp, #56	; 0x38
 800d280:	f00f fb91 	bl	801c9a6 <memcpy>
 800d284:	a90e      	add	r1, sp, #56	; 0x38
 800d286:	2290      	movs	r2, #144	; 0x90
 800d288:	4628      	mov	r0, r5
 800d28a:	f00f fb8c 	bl	801c9a6 <memcpy>
 800d28e:	4668      	mov	r0, sp
 800d290:	f8c5 8004 	str.w	r8, [r5, #4]
 800d294:	60ee      	str	r6, [r5, #12]
 800d296:	f008 ff5d 	bl	8016154 <rcl_get_zero_initialized_wait_set>
 800d29a:	46ec      	mov	ip, sp
 800d29c:	f105 0e18 	add.w	lr, r5, #24
 800d2a0:	f8d7 8000 	ldr.w	r8, [r7]
 800d2a4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d2a8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d2ac:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d2b0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d2b4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d2b8:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 800d338 <rclc_executor_init+0xe8>
 800d2bc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d2c0:	f8dc 3000 	ldr.w	r3, [ip]
 800d2c4:	01b0      	lsls	r0, r6, #6
 800d2c6:	6939      	ldr	r1, [r7, #16]
 800d2c8:	f8ce 3000 	str.w	r3, [lr]
 800d2cc:	616f      	str	r7, [r5, #20]
 800d2ce:	ed85 7b1c 	vstr	d7, [r5, #112]	; 0x70
 800d2d2:	47c0      	blx	r8
 800d2d4:	60a8      	str	r0, [r5, #8]
 800d2d6:	b908      	cbnz	r0, 800d2dc <rclc_executor_init+0x8c>
 800d2d8:	e029      	b.n	800d32e <rclc_executor_init+0xde>
 800d2da:	68a8      	ldr	r0, [r5, #8]
 800d2dc:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800d2e0:	3401      	adds	r4, #1
 800d2e2:	4631      	mov	r1, r6
 800d2e4:	f000 faf4 	bl	800d8d0 <rclc_executor_handle_init>
 800d2e8:	42a6      	cmp	r6, r4
 800d2ea:	d8f6      	bhi.n	800d2da <rclc_executor_init+0x8a>
 800d2ec:	f105 004c 	add.w	r0, r5, #76	; 0x4c
 800d2f0:	f000 fae4 	bl	800d8bc <rclc_executor_handle_counters_zero_init>
 800d2f4:	4a13      	ldr	r2, [pc, #76]	; (800d344 <rclc_executor_init+0xf4>)
 800d2f6:	2300      	movs	r3, #0
 800d2f8:	68a8      	ldr	r0, [r5, #8]
 800d2fa:	e9c5 2320 	strd	r2, r3, [r5, #128]	; 0x80
 800d2fe:	b168      	cbz	r0, 800d31c <rclc_executor_init+0xcc>
 800d300:	68eb      	ldr	r3, [r5, #12]
 800d302:	b173      	cbz	r3, 800d322 <rclc_executor_init+0xd2>
 800d304:	696a      	ldr	r2, [r5, #20]
 800d306:	fab2 f382 	clz	r3, r2
 800d30a:	095b      	lsrs	r3, r3, #5
 800d30c:	b14a      	cbz	r2, 800d322 <rclc_executor_init+0xd2>
 800d30e:	4618      	mov	r0, r3
 800d310:	f885 3088 	strb.w	r3, [r5, #136]	; 0x88
 800d314:	b032      	add	sp, #200	; 0xc8
 800d316:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d31a:	200b      	movs	r0, #11
 800d31c:	b032      	add	sp, #200	; 0xc8
 800d31e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d322:	2000      	movs	r0, #0
 800d324:	b032      	add	sp, #200	; 0xc8
 800d326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d32a:	200b      	movs	r0, #11
 800d32c:	4770      	bx	lr
 800d32e:	200a      	movs	r0, #10
 800d330:	e7f4      	b.n	800d31c <rclc_executor_init+0xcc>
 800d332:	bf00      	nop
 800d334:	f3af 8000 	nop.w
 800d338:	3b9aca00 	.word	0x3b9aca00
 800d33c:	00000000 	.word	0x00000000
 800d340:	0801e418 	.word	0x0801e418
 800d344:	0800d1b5 	.word	0x0800d1b5

0800d348 <rclc_executor_add_subscription>:
 800d348:	2b00      	cmp	r3, #0
 800d34a:	bf18      	it	ne
 800d34c:	2a00      	cmpne	r2, #0
 800d34e:	b570      	push	{r4, r5, r6, lr}
 800d350:	4604      	mov	r4, r0
 800d352:	bf0c      	ite	eq
 800d354:	2001      	moveq	r0, #1
 800d356:	2000      	movne	r0, #0
 800d358:	f89d c010 	ldrb.w	ip, [sp, #16]
 800d35c:	2900      	cmp	r1, #0
 800d35e:	bf08      	it	eq
 800d360:	f040 0001 	orreq.w	r0, r0, #1
 800d364:	bb28      	cbnz	r0, 800d3b2 <rclc_executor_add_subscription+0x6a>
 800d366:	fab4 f584 	clz	r5, r4
 800d36a:	096d      	lsrs	r5, r5, #5
 800d36c:	b30c      	cbz	r4, 800d3b2 <rclc_executor_add_subscription+0x6a>
 800d36e:	e9d4 0603 	ldrd	r0, r6, [r4, #12]
 800d372:	4286      	cmp	r6, r0
 800d374:	d301      	bcc.n	800d37a <rclc_executor_add_subscription+0x32>
 800d376:	2001      	movs	r0, #1
 800d378:	bd70      	pop	{r4, r5, r6, pc}
 800d37a:	68a0      	ldr	r0, [r4, #8]
 800d37c:	ea4f 1e86 	mov.w	lr, r6, lsl #6
 800d380:	f800 500e 	strb.w	r5, [r0, lr]
 800d384:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 800d388:	3601      	adds	r6, #1
 800d38a:	6303      	str	r3, [r0, #48]	; 0x30
 800d38c:	2301      	movs	r3, #1
 800d38e:	62c5      	str	r5, [r0, #44]	; 0x2c
 800d390:	f104 0518 	add.w	r5, r4, #24
 800d394:	f880 c001 	strb.w	ip, [r0, #1]
 800d398:	8703      	strh	r3, [r0, #56]	; 0x38
 800d39a:	e9c0 1201 	strd	r1, r2, [r0, #4]
 800d39e:	4628      	mov	r0, r5
 800d3a0:	6126      	str	r6, [r4, #16]
 800d3a2:	f008 feeb 	bl	801617c <rcl_wait_set_is_valid>
 800d3a6:	b930      	cbnz	r0, 800d3b6 <rclc_executor_add_subscription+0x6e>
 800d3a8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800d3aa:	2000      	movs	r0, #0
 800d3ac:	3301      	adds	r3, #1
 800d3ae:	64e3      	str	r3, [r4, #76]	; 0x4c
 800d3b0:	bd70      	pop	{r4, r5, r6, pc}
 800d3b2:	200b      	movs	r0, #11
 800d3b4:	bd70      	pop	{r4, r5, r6, pc}
 800d3b6:	4628      	mov	r0, r5
 800d3b8:	f008 fee6 	bl	8016188 <rcl_wait_set_fini>
 800d3bc:	2800      	cmp	r0, #0
 800d3be:	d0f3      	beq.n	800d3a8 <rclc_executor_add_subscription+0x60>
 800d3c0:	bd70      	pop	{r4, r5, r6, pc}
 800d3c2:	bf00      	nop

0800d3c4 <rclc_executor_add_timer>:
 800d3c4:	b351      	cbz	r1, 800d41c <rclc_executor_add_timer+0x58>
 800d3c6:	fab0 f280 	clz	r2, r0
 800d3ca:	b570      	push	{r4, r5, r6, lr}
 800d3cc:	0952      	lsrs	r2, r2, #5
 800d3ce:	4604      	mov	r4, r0
 800d3d0:	b1e0      	cbz	r0, 800d40c <rclc_executor_add_timer+0x48>
 800d3d2:	e9d0 0303 	ldrd	r0, r3, [r0, #12]
 800d3d6:	4283      	cmp	r3, r0
 800d3d8:	d301      	bcc.n	800d3de <rclc_executor_add_timer+0x1a>
 800d3da:	2001      	movs	r0, #1
 800d3dc:	bd70      	pop	{r4, r5, r6, pc}
 800d3de:	68a0      	ldr	r0, [r4, #8]
 800d3e0:	019d      	lsls	r5, r3, #6
 800d3e2:	1c5e      	adds	r6, r3, #1
 800d3e4:	eb00 1383 	add.w	r3, r0, r3, lsl #6
 800d3e8:	6059      	str	r1, [r3, #4]
 800d3ea:	2102      	movs	r1, #2
 800d3ec:	5341      	strh	r1, [r0, r5]
 800d3ee:	2101      	movs	r1, #1
 800d3f0:	f104 0518 	add.w	r5, r4, #24
 800d3f4:	62da      	str	r2, [r3, #44]	; 0x2c
 800d3f6:	8719      	strh	r1, [r3, #56]	; 0x38
 800d3f8:	4628      	mov	r0, r5
 800d3fa:	6126      	str	r6, [r4, #16]
 800d3fc:	f008 febe 	bl	801617c <rcl_wait_set_is_valid>
 800d400:	b930      	cbnz	r0, 800d410 <rclc_executor_add_timer+0x4c>
 800d402:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800d404:	2000      	movs	r0, #0
 800d406:	3301      	adds	r3, #1
 800d408:	6523      	str	r3, [r4, #80]	; 0x50
 800d40a:	bd70      	pop	{r4, r5, r6, pc}
 800d40c:	200b      	movs	r0, #11
 800d40e:	bd70      	pop	{r4, r5, r6, pc}
 800d410:	4628      	mov	r0, r5
 800d412:	f008 feb9 	bl	8016188 <rcl_wait_set_fini>
 800d416:	2800      	cmp	r0, #0
 800d418:	d0f3      	beq.n	800d402 <rclc_executor_add_timer+0x3e>
 800d41a:	bd70      	pop	{r4, r5, r6, pc}
 800d41c:	200b      	movs	r0, #11
 800d41e:	4770      	bx	lr

0800d420 <rclc_executor_add_service>:
 800d420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d422:	9d06      	ldr	r5, [sp, #24]
 800d424:	4604      	mov	r4, r0
 800d426:	2b00      	cmp	r3, #0
 800d428:	bf18      	it	ne
 800d42a:	2d00      	cmpne	r5, #0
 800d42c:	bf0c      	ite	eq
 800d42e:	2001      	moveq	r0, #1
 800d430:	2000      	movne	r0, #0
 800d432:	2a00      	cmp	r2, #0
 800d434:	bf08      	it	eq
 800d436:	f040 0001 	orreq.w	r0, r0, #1
 800d43a:	2900      	cmp	r1, #0
 800d43c:	bf08      	it	eq
 800d43e:	f040 0001 	orreq.w	r0, r0, #1
 800d442:	bb40      	cbnz	r0, 800d496 <rclc_executor_add_service+0x76>
 800d444:	fab4 f684 	clz	r6, r4
 800d448:	0976      	lsrs	r6, r6, #5
 800d44a:	b324      	cbz	r4, 800d496 <rclc_executor_add_service+0x76>
 800d44c:	e9d4 7003 	ldrd	r7, r0, [r4, #12]
 800d450:	42b8      	cmp	r0, r7
 800d452:	d301      	bcc.n	800d458 <rclc_executor_add_service+0x38>
 800d454:	2001      	movs	r0, #1
 800d456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d458:	68a7      	ldr	r7, [r4, #8]
 800d45a:	ea4f 1e80 	mov.w	lr, r0, lsl #6
 800d45e:	f100 0c01 	add.w	ip, r0, #1
 800d462:	eb07 1080 	add.w	r0, r7, r0, lsl #6
 800d466:	6283      	str	r3, [r0, #40]	; 0x28
 800d468:	2305      	movs	r3, #5
 800d46a:	6305      	str	r5, [r0, #48]	; 0x30
 800d46c:	f104 0518 	add.w	r5, r4, #24
 800d470:	e9c0 1201 	strd	r1, r2, [r0, #4]
 800d474:	f827 300e 	strh.w	r3, [r7, lr]
 800d478:	2301      	movs	r3, #1
 800d47a:	62c6      	str	r6, [r0, #44]	; 0x2c
 800d47c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 800d480:	4628      	mov	r0, r5
 800d482:	f8c4 c010 	str.w	ip, [r4, #16]
 800d486:	f008 fe79 	bl	801617c <rcl_wait_set_is_valid>
 800d48a:	b930      	cbnz	r0, 800d49a <rclc_executor_add_service+0x7a>
 800d48c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d48e:	2000      	movs	r0, #0
 800d490:	3301      	adds	r3, #1
 800d492:	65a3      	str	r3, [r4, #88]	; 0x58
 800d494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d496:	200b      	movs	r0, #11
 800d498:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d49a:	4628      	mov	r0, r5
 800d49c:	f008 fe74 	bl	8016188 <rcl_wait_set_fini>
 800d4a0:	2800      	cmp	r0, #0
 800d4a2:	d0f3      	beq.n	800d48c <rclc_executor_add_service+0x6c>
 800d4a4:	e7d7      	b.n	800d456 <rclc_executor_add_service+0x36>
 800d4a6:	bf00      	nop

0800d4a8 <rclc_executor_prepare>:
 800d4a8:	2800      	cmp	r0, #0
 800d4aa:	d044      	beq.n	800d536 <rclc_executor_prepare+0x8e>
 800d4ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d4ae:	f100 0518 	add.w	r5, r0, #24
 800d4b2:	b09b      	sub	sp, #108	; 0x6c
 800d4b4:	4604      	mov	r4, r0
 800d4b6:	4628      	mov	r0, r5
 800d4b8:	f008 fe60 	bl	801617c <rcl_wait_set_is_valid>
 800d4bc:	b110      	cbz	r0, 800d4c4 <rclc_executor_prepare+0x1c>
 800d4be:	2000      	movs	r0, #0
 800d4c0:	b01b      	add	sp, #108	; 0x6c
 800d4c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d4c4:	4628      	mov	r0, r5
 800d4c6:	f008 fe5f 	bl	8016188 <rcl_wait_set_fini>
 800d4ca:	2800      	cmp	r0, #0
 800d4cc:	d130      	bne.n	800d530 <rclc_executor_prepare+0x88>
 800d4ce:	a80c      	add	r0, sp, #48	; 0x30
 800d4d0:	ae04      	add	r6, sp, #16
 800d4d2:	f008 fe3f 	bl	8016154 <rcl_get_zero_initialized_wait_set>
 800d4d6:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 800d4da:	46ae      	mov	lr, r5
 800d4dc:	6967      	ldr	r7, [r4, #20]
 800d4de:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d4e2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d4e6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d4ea:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d4ee:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d4f2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d4f6:	f8dc 3000 	ldr.w	r3, [ip]
 800d4fa:	f8ce 3000 	str.w	r3, [lr]
 800d4fe:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d500:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800d502:	683b      	ldr	r3, [r7, #0]
 800d504:	4628      	mov	r0, r5
 800d506:	6862      	ldr	r2, [r4, #4]
 800d508:	6033      	str	r3, [r6, #0]
 800d50a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800d50c:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800d50e:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800d512:	e9d4 3214 	ldrd	r3, r2, [r4, #80]	; 0x50
 800d516:	e9cd 2100 	strd	r2, r1, [sp]
 800d51a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d51c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800d51e:	f009 f933 	bl	8016788 <rcl_wait_set_init>
 800d522:	2800      	cmp	r0, #0
 800d524:	d0cc      	beq.n	800d4c0 <rclc_executor_prepare+0x18>
 800d526:	900b      	str	r0, [sp, #44]	; 0x2c
 800d528:	f000 fbba 	bl	800dca0 <rcutils_reset_error>
 800d52c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800d52e:	e7c7      	b.n	800d4c0 <rclc_executor_prepare+0x18>
 800d530:	f000 fbb6 	bl	800dca0 <rcutils_reset_error>
 800d534:	e7cb      	b.n	800d4ce <rclc_executor_prepare+0x26>
 800d536:	200b      	movs	r0, #11
 800d538:	4770      	bx	lr
 800d53a:	bf00      	nop

0800d53c <rclc_executor_spin_some.part.0>:
 800d53c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d540:	4605      	mov	r5, r0
 800d542:	4691      	mov	r9, r2
 800d544:	4698      	mov	r8, r3
 800d546:	f7ff ffaf 	bl	800d4a8 <rclc_executor_prepare>
 800d54a:	f105 0618 	add.w	r6, r5, #24
 800d54e:	4630      	mov	r0, r6
 800d550:	f008 fee6 	bl	8016320 <rcl_wait_set_clear>
 800d554:	4607      	mov	r7, r0
 800d556:	2800      	cmp	r0, #0
 800d558:	f040 80a8 	bne.w	800d6ac <rclc_executor_spin_some.part.0+0x170>
 800d55c:	68eb      	ldr	r3, [r5, #12]
 800d55e:	b30b      	cbz	r3, 800d5a4 <rclc_executor_spin_some.part.0+0x68>
 800d560:	4604      	mov	r4, r0
 800d562:	68a9      	ldr	r1, [r5, #8]
 800d564:	01a2      	lsls	r2, r4, #6
 800d566:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800d56a:	f89c 3038 	ldrb.w	r3, [ip, #56]	; 0x38
 800d56e:	b1cb      	cbz	r3, 800d5a4 <rclc_executor_spin_some.part.0+0x68>
 800d570:	5c8b      	ldrb	r3, [r1, r2]
 800d572:	2b0a      	cmp	r3, #10
 800d574:	f200 80de 	bhi.w	800d734 <rclc_executor_spin_some.part.0+0x1f8>
 800d578:	e8df f003 	tbb	[pc, r3]
 800d57c:	8da99d9d 	.word	0x8da99d9d
 800d580:	0606068d 	.word	0x0606068d
 800d584:	c1ce      	.short	0xc1ce
 800d586:	b5          	.byte	0xb5
 800d587:	00          	.byte	0x00
 800d588:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800d58c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d590:	4630      	mov	r0, r6
 800d592:	f009 fa15 	bl	80169c0 <rcl_wait_set_add_service>
 800d596:	2800      	cmp	r0, #0
 800d598:	f040 8087 	bne.w	800d6aa <rclc_executor_spin_some.part.0+0x16e>
 800d59c:	3401      	adds	r4, #1
 800d59e:	68eb      	ldr	r3, [r5, #12]
 800d5a0:	429c      	cmp	r4, r3
 800d5a2:	d3de      	bcc.n	800d562 <rclc_executor_spin_some.part.0+0x26>
 800d5a4:	4643      	mov	r3, r8
 800d5a6:	464a      	mov	r2, r9
 800d5a8:	4630      	mov	r0, r6
 800d5aa:	f009 fa35 	bl	8016a18 <rcl_wait>
 800d5ae:	f895 3088 	ldrb.w	r3, [r5, #136]	; 0x88
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	f000 80c6 	beq.w	800d744 <rclc_executor_spin_some.part.0+0x208>
 800d5b8:	2b01      	cmp	r3, #1
 800d5ba:	f040 80bb 	bne.w	800d734 <rclc_executor_spin_some.part.0+0x1f8>
 800d5be:	68eb      	ldr	r3, [r5, #12]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	f000 8159 	beq.w	800d878 <rclc_executor_spin_some.part.0+0x33c>
 800d5c6:	2400      	movs	r4, #0
 800d5c8:	f240 1991 	movw	r9, #401	; 0x191
 800d5cc:	46a0      	mov	r8, r4
 800d5ce:	e00a      	b.n	800d5e6 <rclc_executor_spin_some.part.0+0xaa>
 800d5d0:	f7ff faec 	bl	800cbac <_rclc_check_for_new_data>
 800d5d4:	4604      	mov	r4, r0
 800d5d6:	b110      	cbz	r0, 800d5de <rclc_executor_spin_some.part.0+0xa2>
 800d5d8:	4548      	cmp	r0, r9
 800d5da:	f040 80b1 	bne.w	800d740 <rclc_executor_spin_some.part.0+0x204>
 800d5de:	68eb      	ldr	r3, [r5, #12]
 800d5e0:	4598      	cmp	r8, r3
 800d5e2:	f080 8126 	bcs.w	800d832 <rclc_executor_spin_some.part.0+0x2f6>
 800d5e6:	68aa      	ldr	r2, [r5, #8]
 800d5e8:	4631      	mov	r1, r6
 800d5ea:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800d5ee:	f108 0801 	add.w	r8, r8, #1
 800d5f2:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 800d5f6:	f1bc 0f00 	cmp.w	ip, #0
 800d5fa:	d1e9      	bne.n	800d5d0 <rclc_executor_spin_some.part.0+0x94>
 800d5fc:	4619      	mov	r1, r3
 800d5fe:	4610      	mov	r0, r2
 800d600:	e9d5 3220 	ldrd	r3, r2, [r5, #128]	; 0x80
 800d604:	4798      	blx	r3
 800d606:	2800      	cmp	r0, #0
 800d608:	f000 809a 	beq.w	800d740 <rclc_executor_spin_some.part.0+0x204>
 800d60c:	68eb      	ldr	r3, [r5, #12]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	f000 8096 	beq.w	800d740 <rclc_executor_spin_some.part.0+0x204>
 800d614:	f04f 0800 	mov.w	r8, #0
 800d618:	f240 1991 	movw	r9, #401	; 0x191
 800d61c:	e009      	b.n	800d632 <rclc_executor_spin_some.part.0+0xf6>
 800d61e:	f7ff fb13 	bl	800cc48 <_rclc_take_new_data>
 800d622:	4604      	mov	r4, r0
 800d624:	b110      	cbz	r0, 800d62c <rclc_executor_spin_some.part.0+0xf0>
 800d626:	4548      	cmp	r0, r9
 800d628:	f040 808a 	bne.w	800d740 <rclc_executor_spin_some.part.0+0x204>
 800d62c:	68eb      	ldr	r3, [r5, #12]
 800d62e:	4598      	cmp	r8, r3
 800d630:	d209      	bcs.n	800d646 <rclc_executor_spin_some.part.0+0x10a>
 800d632:	68a8      	ldr	r0, [r5, #8]
 800d634:	4631      	mov	r1, r6
 800d636:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800d63a:	f108 0801 	add.w	r8, r8, #1
 800d63e:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 800d642:	2a00      	cmp	r2, #0
 800d644:	d1eb      	bne.n	800d61e <rclc_executor_spin_some.part.0+0xe2>
 800d646:	2b00      	cmp	r3, #0
 800d648:	d07a      	beq.n	800d740 <rclc_executor_spin_some.part.0+0x204>
 800d64a:	2600      	movs	r6, #0
 800d64c:	e00e      	b.n	800d66c <rclc_executor_spin_some.part.0+0x130>
 800d64e:	f812 200c 	ldrb.w	r2, [r2, ip]
 800d652:	2a08      	cmp	r2, #8
 800d654:	f000 80fc 	beq.w	800d850 <rclc_executor_spin_some.part.0+0x314>
 800d658:	2a09      	cmp	r2, #9
 800d65a:	f000 80ee 	beq.w	800d83a <rclc_executor_spin_some.part.0+0x2fe>
 800d65e:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
 800d662:	b98a      	cbnz	r2, 800d688 <rclc_executor_spin_some.part.0+0x14c>
 800d664:	3601      	adds	r6, #1
 800d666:	429e      	cmp	r6, r3
 800d668:	d267      	bcs.n	800d73a <rclc_executor_spin_some.part.0+0x1fe>
 800d66a:	2400      	movs	r4, #0
 800d66c:	68aa      	ldr	r2, [r5, #8]
 800d66e:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800d672:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800d676:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
 800d67a:	2900      	cmp	r1, #0
 800d67c:	d060      	beq.n	800d740 <rclc_executor_spin_some.part.0+0x204>
 800d67e:	7841      	ldrb	r1, [r0, #1]
 800d680:	2900      	cmp	r1, #0
 800d682:	d0e4      	beq.n	800d64e <rclc_executor_spin_some.part.0+0x112>
 800d684:	2901      	cmp	r1, #1
 800d686:	d1ed      	bne.n	800d664 <rclc_executor_spin_some.part.0+0x128>
 800d688:	f7ff fc52 	bl	800cf30 <_rclc_execute.part.0>
 800d68c:	2800      	cmp	r0, #0
 800d68e:	f040 80b5 	bne.w	800d7fc <rclc_executor_spin_some.part.0+0x2c0>
 800d692:	68eb      	ldr	r3, [r5, #12]
 800d694:	e7e6      	b.n	800d664 <rclc_executor_spin_some.part.0+0x128>
 800d696:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800d69a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d69e:	4630      	mov	r0, r6
 800d6a0:	f009 f962 	bl	8016968 <rcl_wait_set_add_client>
 800d6a4:	2800      	cmp	r0, #0
 800d6a6:	f43f af79 	beq.w	800d59c <rclc_executor_spin_some.part.0+0x60>
 800d6aa:	4607      	mov	r7, r0
 800d6ac:	f000 faf8 	bl	800dca0 <rcutils_reset_error>
 800d6b0:	4638      	mov	r0, r7
 800d6b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6b6:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800d6ba:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d6be:	4630      	mov	r0, r6
 800d6c0:	f008 fe02 	bl	80162c8 <rcl_wait_set_add_subscription>
 800d6c4:	2800      	cmp	r0, #0
 800d6c6:	f43f af69 	beq.w	800d59c <rclc_executor_spin_some.part.0+0x60>
 800d6ca:	4607      	mov	r7, r0
 800d6cc:	e7ee      	b.n	800d6ac <rclc_executor_spin_some.part.0+0x170>
 800d6ce:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800d6d2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d6d6:	4630      	mov	r0, r6
 800d6d8:	f009 f916 	bl	8016908 <rcl_wait_set_add_timer>
 800d6dc:	2800      	cmp	r0, #0
 800d6de:	f43f af5d 	beq.w	800d59c <rclc_executor_spin_some.part.0+0x60>
 800d6e2:	4607      	mov	r7, r0
 800d6e4:	e7e2      	b.n	800d6ac <rclc_executor_spin_some.part.0+0x170>
 800d6e6:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800d6ea:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d6ee:	4630      	mov	r0, r6
 800d6f0:	f009 f8de 	bl	80168b0 <rcl_wait_set_add_guard_condition>
 800d6f4:	2800      	cmp	r0, #0
 800d6f6:	f43f af51 	beq.w	800d59c <rclc_executor_spin_some.part.0+0x60>
 800d6fa:	4607      	mov	r7, r0
 800d6fc:	e7d6      	b.n	800d6ac <rclc_executor_spin_some.part.0+0x170>
 800d6fe:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d702:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800d706:	4630      	mov	r0, r6
 800d708:	3110      	adds	r1, #16
 800d70a:	f009 fe59 	bl	80173c0 <rcl_action_wait_set_add_action_server>
 800d70e:	2800      	cmp	r0, #0
 800d710:	f43f af44 	beq.w	800d59c <rclc_executor_spin_some.part.0+0x60>
 800d714:	4607      	mov	r7, r0
 800d716:	e7c9      	b.n	800d6ac <rclc_executor_spin_some.part.0+0x170>
 800d718:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d71c:	2300      	movs	r3, #0
 800d71e:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800d722:	4630      	mov	r0, r6
 800d724:	3110      	adds	r1, #16
 800d726:	f009 fc23 	bl	8016f70 <rcl_action_wait_set_add_action_client>
 800d72a:	2800      	cmp	r0, #0
 800d72c:	f43f af36 	beq.w	800d59c <rclc_executor_spin_some.part.0+0x60>
 800d730:	4607      	mov	r7, r0
 800d732:	e7bb      	b.n	800d6ac <rclc_executor_spin_some.part.0+0x170>
 800d734:	2701      	movs	r7, #1
 800d736:	f000 fab3 	bl	800dca0 <rcutils_reset_error>
 800d73a:	4638      	mov	r0, r7
 800d73c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d740:	4627      	mov	r7, r4
 800d742:	e7fa      	b.n	800d73a <rclc_executor_spin_some.part.0+0x1fe>
 800d744:	68eb      	ldr	r3, [r5, #12]
 800d746:	2b00      	cmp	r3, #0
 800d748:	f000 8093 	beq.w	800d872 <rclc_executor_spin_some.part.0+0x336>
 800d74c:	2400      	movs	r4, #0
 800d74e:	f240 1991 	movw	r9, #401	; 0x191
 800d752:	46a0      	mov	r8, r4
 800d754:	e008      	b.n	800d768 <rclc_executor_spin_some.part.0+0x22c>
 800d756:	f7ff fa29 	bl	800cbac <_rclc_check_for_new_data>
 800d75a:	4604      	mov	r4, r0
 800d75c:	b108      	cbz	r0, 800d762 <rclc_executor_spin_some.part.0+0x226>
 800d75e:	4548      	cmp	r0, r9
 800d760:	d1ee      	bne.n	800d740 <rclc_executor_spin_some.part.0+0x204>
 800d762:	68eb      	ldr	r3, [r5, #12]
 800d764:	4598      	cmp	r8, r3
 800d766:	d266      	bcs.n	800d836 <rclc_executor_spin_some.part.0+0x2fa>
 800d768:	68aa      	ldr	r2, [r5, #8]
 800d76a:	4631      	mov	r1, r6
 800d76c:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800d770:	f108 0801 	add.w	r8, r8, #1
 800d774:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 800d778:	f1bc 0f00 	cmp.w	ip, #0
 800d77c:	d1eb      	bne.n	800d756 <rclc_executor_spin_some.part.0+0x21a>
 800d77e:	4619      	mov	r1, r3
 800d780:	4610      	mov	r0, r2
 800d782:	e9d5 3220 	ldrd	r3, r2, [r5, #128]	; 0x80
 800d786:	4798      	blx	r3
 800d788:	2800      	cmp	r0, #0
 800d78a:	d0d9      	beq.n	800d740 <rclc_executor_spin_some.part.0+0x204>
 800d78c:	68eb      	ldr	r3, [r5, #12]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d0d6      	beq.n	800d740 <rclc_executor_spin_some.part.0+0x204>
 800d792:	f04f 0a00 	mov.w	sl, #0
 800d796:	f240 1891 	movw	r8, #401	; 0x191
 800d79a:	f240 2959 	movw	r9, #601	; 0x259
 800d79e:	e00e      	b.n	800d7be <rclc_executor_spin_some.part.0+0x282>
 800d7a0:	f813 300b 	ldrb.w	r3, [r3, fp]
 800d7a4:	2b08      	cmp	r3, #8
 800d7a6:	d034      	beq.n	800d812 <rclc_executor_spin_some.part.0+0x2d6>
 800d7a8:	2b09      	cmp	r3, #9
 800d7aa:	d029      	beq.n	800d800 <rclc_executor_spin_some.part.0+0x2c4>
 800d7ac:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800d7b0:	bb03      	cbnz	r3, 800d7f4 <rclc_executor_spin_some.part.0+0x2b8>
 800d7b2:	f10a 0a01 	add.w	sl, sl, #1
 800d7b6:	68eb      	ldr	r3, [r5, #12]
 800d7b8:	459a      	cmp	sl, r3
 800d7ba:	d2be      	bcs.n	800d73a <rclc_executor_spin_some.part.0+0x1fe>
 800d7bc:	2400      	movs	r4, #0
 800d7be:	68a8      	ldr	r0, [r5, #8]
 800d7c0:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 800d7c4:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 800d7c8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d0b7      	beq.n	800d740 <rclc_executor_spin_some.part.0+0x204>
 800d7d0:	4631      	mov	r1, r6
 800d7d2:	f7ff fa39 	bl	800cc48 <_rclc_take_new_data>
 800d7d6:	2800      	cmp	r0, #0
 800d7d8:	bf18      	it	ne
 800d7da:	4540      	cmpne	r0, r8
 800d7dc:	d001      	beq.n	800d7e2 <rclc_executor_spin_some.part.0+0x2a6>
 800d7de:	4548      	cmp	r0, r9
 800d7e0:	d10c      	bne.n	800d7fc <rclc_executor_spin_some.part.0+0x2c0>
 800d7e2:	68ab      	ldr	r3, [r5, #8]
 800d7e4:	eb13 000b 	adds.w	r0, r3, fp
 800d7e8:	d021      	beq.n	800d82e <rclc_executor_spin_some.part.0+0x2f2>
 800d7ea:	7842      	ldrb	r2, [r0, #1]
 800d7ec:	2a00      	cmp	r2, #0
 800d7ee:	d0d7      	beq.n	800d7a0 <rclc_executor_spin_some.part.0+0x264>
 800d7f0:	2a01      	cmp	r2, #1
 800d7f2:	d1de      	bne.n	800d7b2 <rclc_executor_spin_some.part.0+0x276>
 800d7f4:	f7ff fb9c 	bl	800cf30 <_rclc_execute.part.0>
 800d7f8:	2800      	cmp	r0, #0
 800d7fa:	d0da      	beq.n	800d7b2 <rclc_executor_spin_some.part.0+0x276>
 800d7fc:	4607      	mov	r7, r0
 800d7fe:	e79c      	b.n	800d73a <rclc_executor_spin_some.part.0+0x1fe>
 800d800:	6843      	ldr	r3, [r0, #4]
 800d802:	6a1a      	ldr	r2, [r3, #32]
 800d804:	2a00      	cmp	r2, #0
 800d806:	d1f5      	bne.n	800d7f4 <rclc_executor_spin_some.part.0+0x2b8>
 800d808:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d0d0      	beq.n	800d7b2 <rclc_executor_spin_some.part.0+0x276>
 800d810:	e7f0      	b.n	800d7f4 <rclc_executor_spin_some.part.0+0x2b8>
 800d812:	6843      	ldr	r3, [r0, #4]
 800d814:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d816:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800d81a:	d1eb      	bne.n	800d7f4 <rclc_executor_spin_some.part.0+0x2b8>
 800d81c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800d820:	2a00      	cmp	r2, #0
 800d822:	d1e7      	bne.n	800d7f4 <rclc_executor_spin_some.part.0+0x2b8>
 800d824:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d0c2      	beq.n	800d7b2 <rclc_executor_spin_some.part.0+0x276>
 800d82c:	e7e2      	b.n	800d7f4 <rclc_executor_spin_some.part.0+0x2b8>
 800d82e:	270b      	movs	r7, #11
 800d830:	e783      	b.n	800d73a <rclc_executor_spin_some.part.0+0x1fe>
 800d832:	68aa      	ldr	r2, [r5, #8]
 800d834:	e6e2      	b.n	800d5fc <rclc_executor_spin_some.part.0+0xc0>
 800d836:	68aa      	ldr	r2, [r5, #8]
 800d838:	e7a1      	b.n	800d77e <rclc_executor_spin_some.part.0+0x242>
 800d83a:	6842      	ldr	r2, [r0, #4]
 800d83c:	6a11      	ldr	r1, [r2, #32]
 800d83e:	2900      	cmp	r1, #0
 800d840:	f47f af22 	bne.w	800d688 <rclc_executor_spin_some.part.0+0x14c>
 800d844:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800d848:	2a00      	cmp	r2, #0
 800d84a:	f43f af0b 	beq.w	800d664 <rclc_executor_spin_some.part.0+0x128>
 800d84e:	e71b      	b.n	800d688 <rclc_executor_spin_some.part.0+0x14c>
 800d850:	6842      	ldr	r2, [r0, #4]
 800d852:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800d854:	f031 417f 	bics.w	r1, r1, #4278190080	; 0xff000000
 800d858:	f47f af16 	bne.w	800d688 <rclc_executor_spin_some.part.0+0x14c>
 800d85c:	f892 1044 	ldrb.w	r1, [r2, #68]	; 0x44
 800d860:	2900      	cmp	r1, #0
 800d862:	f47f af11 	bne.w	800d688 <rclc_executor_spin_some.part.0+0x14c>
 800d866:	f892 2043 	ldrb.w	r2, [r2, #67]	; 0x43
 800d86a:	2a00      	cmp	r2, #0
 800d86c:	f43f aefa 	beq.w	800d664 <rclc_executor_spin_some.part.0+0x128>
 800d870:	e70a      	b.n	800d688 <rclc_executor_spin_some.part.0+0x14c>
 800d872:	68aa      	ldr	r2, [r5, #8]
 800d874:	461c      	mov	r4, r3
 800d876:	e782      	b.n	800d77e <rclc_executor_spin_some.part.0+0x242>
 800d878:	68aa      	ldr	r2, [r5, #8]
 800d87a:	461c      	mov	r4, r3
 800d87c:	e6be      	b.n	800d5fc <rclc_executor_spin_some.part.0+0xc0>
 800d87e:	bf00      	nop

0800d880 <rclc_executor_spin>:
 800d880:	b1d0      	cbz	r0, 800d8b8 <rclc_executor_spin+0x38>
 800d882:	b510      	push	{r4, lr}
 800d884:	4604      	mov	r4, r0
 800d886:	b082      	sub	sp, #8
 800d888:	e004      	b.n	800d894 <rclc_executor_spin+0x14>
 800d88a:	f7ff fe57 	bl	800d53c <rclc_executor_spin_some.part.0>
 800d88e:	f030 0302 	bics.w	r3, r0, #2
 800d892:	d10f      	bne.n	800d8b4 <rclc_executor_spin+0x34>
 800d894:	6860      	ldr	r0, [r4, #4]
 800d896:	e9d4 231c 	ldrd	r2, r3, [r4, #112]	; 0x70
 800d89a:	e9cd 2300 	strd	r2, r3, [sp]
 800d89e:	f006 fe7b 	bl	8014598 <rcl_context_is_valid>
 800d8a2:	4601      	mov	r1, r0
 800d8a4:	4620      	mov	r0, r4
 800d8a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d8aa:	2900      	cmp	r1, #0
 800d8ac:	d1ed      	bne.n	800d88a <rclc_executor_spin+0xa>
 800d8ae:	f000 f9f7 	bl	800dca0 <rcutils_reset_error>
 800d8b2:	2001      	movs	r0, #1
 800d8b4:	b002      	add	sp, #8
 800d8b6:	bd10      	pop	{r4, pc}
 800d8b8:	200b      	movs	r0, #11
 800d8ba:	4770      	bx	lr

0800d8bc <rclc_executor_handle_counters_zero_init>:
 800d8bc:	b130      	cbz	r0, 800d8cc <rclc_executor_handle_counters_zero_init+0x10>
 800d8be:	2220      	movs	r2, #32
 800d8c0:	2100      	movs	r1, #0
 800d8c2:	b508      	push	{r3, lr}
 800d8c4:	f00e ff3e 	bl	801c744 <memset>
 800d8c8:	2000      	movs	r0, #0
 800d8ca:	bd08      	pop	{r3, pc}
 800d8cc:	200b      	movs	r0, #11
 800d8ce:	4770      	bx	lr

0800d8d0 <rclc_executor_handle_init>:
 800d8d0:	4603      	mov	r3, r0
 800d8d2:	b178      	cbz	r0, 800d8f4 <rclc_executor_handle_init+0x24>
 800d8d4:	2200      	movs	r2, #0
 800d8d6:	f04f 0c0b 	mov.w	ip, #11
 800d8da:	6341      	str	r1, [r0, #52]	; 0x34
 800d8dc:	4610      	mov	r0, r2
 800d8de:	f8a3 c000 	strh.w	ip, [r3]
 800d8e2:	631a      	str	r2, [r3, #48]	; 0x30
 800d8e4:	871a      	strh	r2, [r3, #56]	; 0x38
 800d8e6:	ed9f 7b04 	vldr	d7, [pc, #16]	; 800d8f8 <rclc_executor_handle_init+0x28>
 800d8ea:	e9c3 2201 	strd	r2, r2, [r3, #4]
 800d8ee:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
 800d8f2:	4770      	bx	lr
 800d8f4:	200b      	movs	r0, #11
 800d8f6:	4770      	bx	lr
	...

0800d900 <rclc_support_init>:
 800d900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d904:	b086      	sub	sp, #24
 800d906:	b3bb      	cbz	r3, 800d978 <rclc_support_init+0x78>
 800d908:	4606      	mov	r6, r0
 800d90a:	b3a8      	cbz	r0, 800d978 <rclc_support_init+0x78>
 800d90c:	461c      	mov	r4, r3
 800d90e:	460f      	mov	r7, r1
 800d910:	4690      	mov	r8, r2
 800d912:	f006 ffe1 	bl	80148d8 <rcl_get_zero_initialized_init_options>
 800d916:	f104 050c 	add.w	r5, r4, #12
 800d91a:	9005      	str	r0, [sp, #20]
 800d91c:	e895 0003 	ldmia.w	r5, {r0, r1}
 800d920:	e88d 0003 	stmia.w	sp, {r0, r1}
 800d924:	a805      	add	r0, sp, #20
 800d926:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800d92a:	f006 ffd7 	bl	80148dc <rcl_init_options_init>
 800d92e:	4605      	mov	r5, r0
 800d930:	b9e0      	cbnz	r0, 800d96c <rclc_support_init+0x6c>
 800d932:	ad02      	add	r5, sp, #8
 800d934:	4628      	mov	r0, r5
 800d936:	f006 fe25 	bl	8014584 <rcl_get_zero_initialized_context>
 800d93a:	4633      	mov	r3, r6
 800d93c:	aa05      	add	r2, sp, #20
 800d93e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800d942:	e886 0003 	stmia.w	r6, {r0, r1}
 800d946:	4641      	mov	r1, r8
 800d948:	4638      	mov	r0, r7
 800d94a:	f006 fe8b 	bl	8014664 <rcl_init>
 800d94e:	4605      	mov	r5, r0
 800d950:	b9b8      	cbnz	r0, 800d982 <rclc_support_init+0x82>
 800d952:	4622      	mov	r2, r4
 800d954:	f106 010c 	add.w	r1, r6, #12
 800d958:	2003      	movs	r0, #3
 800d95a:	60b4      	str	r4, [r6, #8]
 800d95c:	f007 ffd4 	bl	8015908 <rcl_clock_init>
 800d960:	4605      	mov	r5, r0
 800d962:	b970      	cbnz	r0, 800d982 <rclc_support_init+0x82>
 800d964:	a805      	add	r0, sp, #20
 800d966:	f007 f815 	bl	8014994 <rcl_init_options_fini>
 800d96a:	b108      	cbz	r0, 800d970 <rclc_support_init+0x70>
 800d96c:	f000 f998 	bl	800dca0 <rcutils_reset_error>
 800d970:	4628      	mov	r0, r5
 800d972:	b006      	add	sp, #24
 800d974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d978:	250b      	movs	r5, #11
 800d97a:	4628      	mov	r0, r5
 800d97c:	b006      	add	sp, #24
 800d97e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d982:	f000 f98d 	bl	800dca0 <rcutils_reset_error>
 800d986:	a805      	add	r0, sp, #20
 800d988:	f007 f804 	bl	8014994 <rcl_init_options_fini>
 800d98c:	2800      	cmp	r0, #0
 800d98e:	d0ef      	beq.n	800d970 <rclc_support_init+0x70>
 800d990:	e7ec      	b.n	800d96c <rclc_support_init+0x6c>
 800d992:	bf00      	nop

0800d994 <rclc_node_init_default>:
 800d994:	2b00      	cmp	r3, #0
 800d996:	bf18      	it	ne
 800d998:	2a00      	cmpne	r2, #0
 800d99a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d99e:	4616      	mov	r6, r2
 800d9a0:	bf0c      	ite	eq
 800d9a2:	2201      	moveq	r2, #1
 800d9a4:	2200      	movne	r2, #0
 800d9a6:	b0a3      	sub	sp, #140	; 0x8c
 800d9a8:	2900      	cmp	r1, #0
 800d9aa:	bf08      	it	eq
 800d9ac:	f042 0201 	orreq.w	r2, r2, #1
 800d9b0:	bb22      	cbnz	r2, 800d9fc <rclc_node_init_default+0x68>
 800d9b2:	4604      	mov	r4, r0
 800d9b4:	b310      	cbz	r0, 800d9fc <rclc_node_init_default+0x68>
 800d9b6:	f10d 0810 	add.w	r8, sp, #16
 800d9ba:	461f      	mov	r7, r3
 800d9bc:	460d      	mov	r5, r1
 800d9be:	f10d 0918 	add.w	r9, sp, #24
 800d9c2:	4640      	mov	r0, r8
 800d9c4:	f007 f892 	bl	8014aec <rcl_get_zero_initialized_node>
 800d9c8:	e898 0003 	ldmia.w	r8, {r0, r1}
 800d9cc:	e884 0003 	stmia.w	r4, {r0, r1}
 800d9d0:	4648      	mov	r0, r9
 800d9d2:	f007 fa25 	bl	8014e20 <rcl_node_get_default_options>
 800d9d6:	4640      	mov	r0, r8
 800d9d8:	f007 f888 	bl	8014aec <rcl_get_zero_initialized_node>
 800d9dc:	f8cd 9000 	str.w	r9, [sp]
 800d9e0:	463b      	mov	r3, r7
 800d9e2:	4632      	mov	r2, r6
 800d9e4:	e898 0003 	ldmia.w	r8, {r0, r1}
 800d9e8:	e884 0003 	stmia.w	r4, {r0, r1}
 800d9ec:	4629      	mov	r1, r5
 800d9ee:	4620      	mov	r0, r4
 800d9f0:	f007 f886 	bl	8014b00 <rcl_node_init>
 800d9f4:	b930      	cbnz	r0, 800da04 <rclc_node_init_default+0x70>
 800d9f6:	b023      	add	sp, #140	; 0x8c
 800d9f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d9fc:	200b      	movs	r0, #11
 800d9fe:	b023      	add	sp, #140	; 0x8c
 800da00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800da04:	9003      	str	r0, [sp, #12]
 800da06:	f000 f94b 	bl	800dca0 <rcutils_reset_error>
 800da0a:	f000 f949 	bl	800dca0 <rcutils_reset_error>
 800da0e:	9803      	ldr	r0, [sp, #12]
 800da10:	b023      	add	sp, #140	; 0x8c
 800da12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800da16:	bf00      	nop

0800da18 <rclc_publisher_init_best_effort>:
 800da18:	2b00      	cmp	r3, #0
 800da1a:	bf18      	it	ne
 800da1c:	2a00      	cmpne	r2, #0
 800da1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da22:	4616      	mov	r6, r2
 800da24:	bf0c      	ite	eq
 800da26:	2201      	moveq	r2, #1
 800da28:	2200      	movne	r2, #0
 800da2a:	b0a0      	sub	sp, #128	; 0x80
 800da2c:	2900      	cmp	r1, #0
 800da2e:	bf08      	it	eq
 800da30:	f042 0201 	orreq.w	r2, r2, #1
 800da34:	bb1a      	cbnz	r2, 800da7e <rclc_publisher_init_best_effort+0x66>
 800da36:	4604      	mov	r4, r0
 800da38:	b308      	cbz	r0, 800da7e <rclc_publisher_init_best_effort+0x66>
 800da3a:	f10d 0810 	add.w	r8, sp, #16
 800da3e:	461f      	mov	r7, r3
 800da40:	460d      	mov	r5, r1
 800da42:	f7fe ff8b 	bl	800c95c <rcl_get_zero_initialized_publisher>
 800da46:	6020      	str	r0, [r4, #0]
 800da48:	4640      	mov	r0, r8
 800da4a:	f7ff f829 	bl	800caa0 <rcl_publisher_get_default_options>
 800da4e:	2250      	movs	r2, #80	; 0x50
 800da50:	490d      	ldr	r1, [pc, #52]	; (800da88 <rclc_publisher_init_best_effort+0x70>)
 800da52:	4640      	mov	r0, r8
 800da54:	f00e ffa7 	bl	801c9a6 <memcpy>
 800da58:	463b      	mov	r3, r7
 800da5a:	4632      	mov	r2, r6
 800da5c:	4629      	mov	r1, r5
 800da5e:	4620      	mov	r0, r4
 800da60:	f8cd 8000 	str.w	r8, [sp]
 800da64:	f7fe ff80 	bl	800c968 <rcl_publisher_init>
 800da68:	b910      	cbnz	r0, 800da70 <rclc_publisher_init_best_effort+0x58>
 800da6a:	b020      	add	sp, #128	; 0x80
 800da6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da70:	9003      	str	r0, [sp, #12]
 800da72:	f000 f915 	bl	800dca0 <rcutils_reset_error>
 800da76:	9803      	ldr	r0, [sp, #12]
 800da78:	b020      	add	sp, #128	; 0x80
 800da7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da7e:	200b      	movs	r0, #11
 800da80:	b020      	add	sp, #128	; 0x80
 800da82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da86:	bf00      	nop
 800da88:	0801e4a8 	.word	0x0801e4a8

0800da8c <rclc_service_init_default>:
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	bf18      	it	ne
 800da90:	2a00      	cmpne	r2, #0
 800da92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da96:	4616      	mov	r6, r2
 800da98:	bf0c      	ite	eq
 800da9a:	2201      	moveq	r2, #1
 800da9c:	2200      	movne	r2, #0
 800da9e:	b09e      	sub	sp, #120	; 0x78
 800daa0:	2900      	cmp	r1, #0
 800daa2:	bf08      	it	eq
 800daa4:	f042 0201 	orreq.w	r2, r2, #1
 800daa8:	bb1a      	cbnz	r2, 800daf2 <rclc_service_init_default+0x66>
 800daaa:	4604      	mov	r4, r0
 800daac:	b308      	cbz	r0, 800daf2 <rclc_service_init_default+0x66>
 800daae:	f10d 0810 	add.w	r8, sp, #16
 800dab2:	461f      	mov	r7, r3
 800dab4:	460d      	mov	r5, r1
 800dab6:	f007 fbb7 	bl	8015228 <rcl_get_zero_initialized_service>
 800daba:	6020      	str	r0, [r4, #0]
 800dabc:	4640      	mov	r0, r8
 800dabe:	f007 fc61 	bl	8015384 <rcl_service_get_default_options>
 800dac2:	2250      	movs	r2, #80	; 0x50
 800dac4:	490d      	ldr	r1, [pc, #52]	; (800dafc <rclc_service_init_default+0x70>)
 800dac6:	4640      	mov	r0, r8
 800dac8:	f00e ff6d 	bl	801c9a6 <memcpy>
 800dacc:	463b      	mov	r3, r7
 800dace:	4632      	mov	r2, r6
 800dad0:	4629      	mov	r1, r5
 800dad2:	4620      	mov	r0, r4
 800dad4:	f8cd 8000 	str.w	r8, [sp]
 800dad8:	f007 fbac 	bl	8015234 <rcl_service_init>
 800dadc:	b910      	cbnz	r0, 800dae4 <rclc_service_init_default+0x58>
 800dade:	b01e      	add	sp, #120	; 0x78
 800dae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dae4:	9003      	str	r0, [sp, #12]
 800dae6:	f000 f8db 	bl	800dca0 <rcutils_reset_error>
 800daea:	9803      	ldr	r0, [sp, #12]
 800daec:	b01e      	add	sp, #120	; 0x78
 800daee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800daf2:	200b      	movs	r0, #11
 800daf4:	b01e      	add	sp, #120	; 0x78
 800daf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dafa:	bf00      	nop
 800dafc:	0801e4f8 	.word	0x0801e4f8

0800db00 <rclc_subscription_init_best_effort>:
 800db00:	2b00      	cmp	r3, #0
 800db02:	bf18      	it	ne
 800db04:	2a00      	cmpne	r2, #0
 800db06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db0a:	4616      	mov	r6, r2
 800db0c:	bf0c      	ite	eq
 800db0e:	2201      	moveq	r2, #1
 800db10:	2200      	movne	r2, #0
 800db12:	b0a2      	sub	sp, #136	; 0x88
 800db14:	2900      	cmp	r1, #0
 800db16:	bf08      	it	eq
 800db18:	f042 0201 	orreq.w	r2, r2, #1
 800db1c:	bb1a      	cbnz	r2, 800db66 <rclc_subscription_init_best_effort+0x66>
 800db1e:	4604      	mov	r4, r0
 800db20:	b308      	cbz	r0, 800db66 <rclc_subscription_init_best_effort+0x66>
 800db22:	f10d 0810 	add.w	r8, sp, #16
 800db26:	461f      	mov	r7, r3
 800db28:	460d      	mov	r5, r1
 800db2a:	f007 fd7d 	bl	8015628 <rcl_get_zero_initialized_subscription>
 800db2e:	6020      	str	r0, [r4, #0]
 800db30:	4640      	mov	r0, r8
 800db32:	f007 fe2d 	bl	8015790 <rcl_subscription_get_default_options>
 800db36:	2250      	movs	r2, #80	; 0x50
 800db38:	490d      	ldr	r1, [pc, #52]	; (800db70 <rclc_subscription_init_best_effort+0x70>)
 800db3a:	4640      	mov	r0, r8
 800db3c:	f00e ff33 	bl	801c9a6 <memcpy>
 800db40:	463b      	mov	r3, r7
 800db42:	4632      	mov	r2, r6
 800db44:	4629      	mov	r1, r5
 800db46:	4620      	mov	r0, r4
 800db48:	f8cd 8000 	str.w	r8, [sp]
 800db4c:	f007 fd72 	bl	8015634 <rcl_subscription_init>
 800db50:	b910      	cbnz	r0, 800db58 <rclc_subscription_init_best_effort+0x58>
 800db52:	b022      	add	sp, #136	; 0x88
 800db54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db58:	9003      	str	r0, [sp, #12]
 800db5a:	f000 f8a1 	bl	800dca0 <rcutils_reset_error>
 800db5e:	9803      	ldr	r0, [sp, #12]
 800db60:	b022      	add	sp, #136	; 0x88
 800db62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db66:	200b      	movs	r0, #11
 800db68:	b022      	add	sp, #136	; 0x88
 800db6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db6e:	bf00      	nop
 800db70:	0801e548 	.word	0x0801e548

0800db74 <rclc_timer_init_default>:
 800db74:	b361      	cbz	r1, 800dbd0 <rclc_timer_init_default+0x5c>
 800db76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db7a:	4606      	mov	r6, r0
 800db7c:	b08a      	sub	sp, #40	; 0x28
 800db7e:	b318      	cbz	r0, 800dbc8 <rclc_timer_init_default+0x54>
 800db80:	460d      	mov	r5, r1
 800db82:	4690      	mov	r8, r2
 800db84:	461f      	mov	r7, r3
 800db86:	f008 f8b7 	bl	8015cf8 <rcl_get_zero_initialized_timer>
 800db8a:	68ac      	ldr	r4, [r5, #8]
 800db8c:	f10d 0c0c 	add.w	ip, sp, #12
 800db90:	6030      	str	r0, [r6, #0]
 800db92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800db94:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800db98:	6823      	ldr	r3, [r4, #0]
 800db9a:	462a      	mov	r2, r5
 800db9c:	f105 010c 	add.w	r1, r5, #12
 800dba0:	4630      	mov	r0, r6
 800dba2:	f8cc 3000 	str.w	r3, [ip]
 800dba6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dba8:	e9cd 8700 	strd	r8, r7, [sp]
 800dbac:	9302      	str	r3, [sp, #8]
 800dbae:	f008 f8a9 	bl	8015d04 <rcl_timer_init>
 800dbb2:	b910      	cbnz	r0, 800dbba <rclc_timer_init_default+0x46>
 800dbb4:	b00a      	add	sp, #40	; 0x28
 800dbb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbba:	9009      	str	r0, [sp, #36]	; 0x24
 800dbbc:	f000 f870 	bl	800dca0 <rcutils_reset_error>
 800dbc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dbc2:	b00a      	add	sp, #40	; 0x28
 800dbc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbc8:	200b      	movs	r0, #11
 800dbca:	b00a      	add	sp, #40	; 0x28
 800dbcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbd0:	200b      	movs	r0, #11
 800dbd2:	4770      	bx	lr

0800dbd4 <__default_zero_allocate>:
 800dbd4:	f00e b9d8 	b.w	801bf88 <calloc>

0800dbd8 <__default_reallocate>:
 800dbd8:	f00e bb64 	b.w	801c2a4 <realloc>

0800dbdc <__default_deallocate>:
 800dbdc:	f00e ba42 	b.w	801c064 <free>

0800dbe0 <__default_allocate>:
 800dbe0:	f00e ba38 	b.w	801c054 <malloc>

0800dbe4 <rcutils_get_zero_initialized_allocator>:
 800dbe4:	b510      	push	{r4, lr}
 800dbe6:	4c05      	ldr	r4, [pc, #20]	; (800dbfc <rcutils_get_zero_initialized_allocator+0x18>)
 800dbe8:	4686      	mov	lr, r0
 800dbea:	4684      	mov	ip, r0
 800dbec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dbee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800dbf2:	6823      	ldr	r3, [r4, #0]
 800dbf4:	4670      	mov	r0, lr
 800dbf6:	f8cc 3000 	str.w	r3, [ip]
 800dbfa:	bd10      	pop	{r4, pc}
 800dbfc:	0801e598 	.word	0x0801e598

0800dc00 <rcutils_set_default_allocator>:
 800dc00:	b1a8      	cbz	r0, 800dc2e <rcutils_set_default_allocator+0x2e>
 800dc02:	6802      	ldr	r2, [r0, #0]
 800dc04:	b1a2      	cbz	r2, 800dc30 <rcutils_set_default_allocator+0x30>
 800dc06:	6841      	ldr	r1, [r0, #4]
 800dc08:	b1a1      	cbz	r1, 800dc34 <rcutils_set_default_allocator+0x34>
 800dc0a:	b410      	push	{r4}
 800dc0c:	68c4      	ldr	r4, [r0, #12]
 800dc0e:	b164      	cbz	r4, 800dc2a <rcutils_set_default_allocator+0x2a>
 800dc10:	6880      	ldr	r0, [r0, #8]
 800dc12:	b138      	cbz	r0, 800dc24 <rcutils_set_default_allocator+0x24>
 800dc14:	4b08      	ldr	r3, [pc, #32]	; (800dc38 <rcutils_set_default_allocator+0x38>)
 800dc16:	601a      	str	r2, [r3, #0]
 800dc18:	2200      	movs	r2, #0
 800dc1a:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800dc1e:	2001      	movs	r0, #1
 800dc20:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800dc24:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc28:	4770      	bx	lr
 800dc2a:	4620      	mov	r0, r4
 800dc2c:	e7fa      	b.n	800dc24 <rcutils_set_default_allocator+0x24>
 800dc2e:	4770      	bx	lr
 800dc30:	4610      	mov	r0, r2
 800dc32:	4770      	bx	lr
 800dc34:	4608      	mov	r0, r1
 800dc36:	4770      	bx	lr
 800dc38:	200009fc 	.word	0x200009fc

0800dc3c <rcutils_get_default_allocator>:
 800dc3c:	b510      	push	{r4, lr}
 800dc3e:	4c05      	ldr	r4, [pc, #20]	; (800dc54 <rcutils_get_default_allocator+0x18>)
 800dc40:	4686      	mov	lr, r0
 800dc42:	4684      	mov	ip, r0
 800dc44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dc46:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800dc4a:	6823      	ldr	r3, [r4, #0]
 800dc4c:	4670      	mov	r0, lr
 800dc4e:	f8cc 3000 	str.w	r3, [ip]
 800dc52:	bd10      	pop	{r4, pc}
 800dc54:	200009fc 	.word	0x200009fc

0800dc58 <rcutils_allocator_is_valid>:
 800dc58:	b158      	cbz	r0, 800dc72 <rcutils_allocator_is_valid+0x1a>
 800dc5a:	6803      	ldr	r3, [r0, #0]
 800dc5c:	b143      	cbz	r3, 800dc70 <rcutils_allocator_is_valid+0x18>
 800dc5e:	6843      	ldr	r3, [r0, #4]
 800dc60:	b133      	cbz	r3, 800dc70 <rcutils_allocator_is_valid+0x18>
 800dc62:	68c3      	ldr	r3, [r0, #12]
 800dc64:	b123      	cbz	r3, 800dc70 <rcutils_allocator_is_valid+0x18>
 800dc66:	6880      	ldr	r0, [r0, #8]
 800dc68:	3800      	subs	r0, #0
 800dc6a:	bf18      	it	ne
 800dc6c:	2001      	movne	r0, #1
 800dc6e:	4770      	bx	lr
 800dc70:	4618      	mov	r0, r3
 800dc72:	4770      	bx	lr

0800dc74 <rcutils_get_error_string>:
 800dc74:	4b06      	ldr	r3, [pc, #24]	; (800dc90 <rcutils_get_error_string+0x1c>)
 800dc76:	781b      	ldrb	r3, [r3, #0]
 800dc78:	b13b      	cbz	r3, 800dc8a <rcutils_get_error_string+0x16>
 800dc7a:	4b06      	ldr	r3, [pc, #24]	; (800dc94 <rcutils_get_error_string+0x20>)
 800dc7c:	781a      	ldrb	r2, [r3, #0]
 800dc7e:	b90a      	cbnz	r2, 800dc84 <rcutils_get_error_string+0x10>
 800dc80:	2201      	movs	r2, #1
 800dc82:	701a      	strb	r2, [r3, #0]
 800dc84:	4b04      	ldr	r3, [pc, #16]	; (800dc98 <rcutils_get_error_string+0x24>)
 800dc86:	7818      	ldrb	r0, [r3, #0]
 800dc88:	4770      	bx	lr
 800dc8a:	4b04      	ldr	r3, [pc, #16]	; (800dc9c <rcutils_get_error_string+0x28>)
 800dc8c:	7818      	ldrb	r0, [r3, #0]
 800dc8e:	4770      	bx	lr
 800dc90:	2000b988 	.word	0x2000b988
 800dc94:	2000b9a1 	.word	0x2000b9a1
 800dc98:	2000b9a0 	.word	0x2000b9a0
 800dc9c:	0801dabc 	.word	0x0801dabc

0800dca0 <rcutils_reset_error>:
 800dca0:	ed9f 7b07 	vldr	d7, [pc, #28]	; 800dcc0 <rcutils_reset_error+0x20>
 800dca4:	2300      	movs	r3, #0
 800dca6:	4a08      	ldr	r2, [pc, #32]	; (800dcc8 <rcutils_reset_error+0x28>)
 800dca8:	4808      	ldr	r0, [pc, #32]	; (800dccc <rcutils_reset_error+0x2c>)
 800dcaa:	8013      	strh	r3, [r2, #0]
 800dcac:	4908      	ldr	r1, [pc, #32]	; (800dcd0 <rcutils_reset_error+0x30>)
 800dcae:	7003      	strb	r3, [r0, #0]
 800dcb0:	700b      	strb	r3, [r1, #0]
 800dcb2:	ed82 7b02 	vstr	d7, [r2, #8]
 800dcb6:	4a07      	ldr	r2, [pc, #28]	; (800dcd4 <rcutils_reset_error+0x34>)
 800dcb8:	7013      	strb	r3, [r2, #0]
 800dcba:	4770      	bx	lr
 800dcbc:	f3af 8000 	nop.w
	...
 800dcc8:	2000b990 	.word	0x2000b990
 800dccc:	2000b9a1 	.word	0x2000b9a1
 800dcd0:	2000b9a0 	.word	0x2000b9a0
 800dcd4:	2000b988 	.word	0x2000b988

0800dcd8 <rcutils_system_time_now>:
 800dcd8:	b310      	cbz	r0, 800dd20 <rcutils_system_time_now+0x48>
 800dcda:	b570      	push	{r4, r5, r6, lr}
 800dcdc:	b084      	sub	sp, #16
 800dcde:	4604      	mov	r4, r0
 800dce0:	2001      	movs	r0, #1
 800dce2:	4669      	mov	r1, sp
 800dce4:	f7f4 ff20 	bl	8002b28 <clock_gettime>
 800dce8:	2800      	cmp	r0, #0
 800dcea:	db16      	blt.n	800dd1a <rcutils_system_time_now+0x42>
 800dcec:	e9dd 3100 	ldrd	r3, r1, [sp]
 800dcf0:	2900      	cmp	r1, #0
 800dcf2:	db12      	blt.n	800dd1a <rcutils_system_time_now+0x42>
 800dcf4:	ea53 0201 	orrs.w	r2, r3, r1
 800dcf8:	9d02      	ldr	r5, [sp, #8]
 800dcfa:	d101      	bne.n	800dd00 <rcutils_system_time_now+0x28>
 800dcfc:	2d00      	cmp	r5, #0
 800dcfe:	db0c      	blt.n	800dd1a <rcutils_system_time_now+0x42>
 800dd00:	4e08      	ldr	r6, [pc, #32]	; (800dd24 <rcutils_system_time_now+0x4c>)
 800dd02:	2000      	movs	r0, #0
 800dd04:	fba3 3206 	umull	r3, r2, r3, r6
 800dd08:	195b      	adds	r3, r3, r5
 800dd0a:	fb06 2201 	mla	r2, r6, r1, r2
 800dd0e:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 800dd12:	e9c4 3200 	strd	r3, r2, [r4]
 800dd16:	b004      	add	sp, #16
 800dd18:	bd70      	pop	{r4, r5, r6, pc}
 800dd1a:	2002      	movs	r0, #2
 800dd1c:	b004      	add	sp, #16
 800dd1e:	bd70      	pop	{r4, r5, r6, pc}
 800dd20:	200b      	movs	r0, #11
 800dd22:	4770      	bx	lr
 800dd24:	3b9aca00 	.word	0x3b9aca00

0800dd28 <rcutils_steady_time_now>:
 800dd28:	b310      	cbz	r0, 800dd70 <rcutils_steady_time_now+0x48>
 800dd2a:	b570      	push	{r4, r5, r6, lr}
 800dd2c:	b084      	sub	sp, #16
 800dd2e:	4604      	mov	r4, r0
 800dd30:	2000      	movs	r0, #0
 800dd32:	4669      	mov	r1, sp
 800dd34:	f7f4 fef8 	bl	8002b28 <clock_gettime>
 800dd38:	2800      	cmp	r0, #0
 800dd3a:	db16      	blt.n	800dd6a <rcutils_steady_time_now+0x42>
 800dd3c:	e9dd 3100 	ldrd	r3, r1, [sp]
 800dd40:	2900      	cmp	r1, #0
 800dd42:	db12      	blt.n	800dd6a <rcutils_steady_time_now+0x42>
 800dd44:	ea53 0201 	orrs.w	r2, r3, r1
 800dd48:	9d02      	ldr	r5, [sp, #8]
 800dd4a:	d101      	bne.n	800dd50 <rcutils_steady_time_now+0x28>
 800dd4c:	2d00      	cmp	r5, #0
 800dd4e:	db0c      	blt.n	800dd6a <rcutils_steady_time_now+0x42>
 800dd50:	4e08      	ldr	r6, [pc, #32]	; (800dd74 <rcutils_steady_time_now+0x4c>)
 800dd52:	2000      	movs	r0, #0
 800dd54:	fba3 3206 	umull	r3, r2, r3, r6
 800dd58:	195b      	adds	r3, r3, r5
 800dd5a:	fb06 2201 	mla	r2, r6, r1, r2
 800dd5e:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 800dd62:	e9c4 3200 	strd	r3, r2, [r4]
 800dd66:	b004      	add	sp, #16
 800dd68:	bd70      	pop	{r4, r5, r6, pc}
 800dd6a:	2002      	movs	r0, #2
 800dd6c:	b004      	add	sp, #16
 800dd6e:	bd70      	pop	{r4, r5, r6, pc}
 800dd70:	200b      	movs	r0, #11
 800dd72:	4770      	bx	lr
 800dd74:	3b9aca00 	.word	0x3b9aca00

0800dd78 <rmw_get_default_publisher_options>:
 800dd78:	2200      	movs	r2, #0
 800dd7a:	6002      	str	r2, [r0, #0]
 800dd7c:	7102      	strb	r2, [r0, #4]
 800dd7e:	4770      	bx	lr

0800dd80 <rmw_uros_set_custom_transport>:
 800dd80:	b470      	push	{r4, r5, r6}
 800dd82:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800dd86:	b162      	cbz	r2, 800dda2 <rmw_uros_set_custom_transport+0x22>
 800dd88:	b15b      	cbz	r3, 800dda2 <rmw_uros_set_custom_transport+0x22>
 800dd8a:	b155      	cbz	r5, 800dda2 <rmw_uros_set_custom_transport+0x22>
 800dd8c:	b14e      	cbz	r6, 800dda2 <rmw_uros_set_custom_transport+0x22>
 800dd8e:	4c06      	ldr	r4, [pc, #24]	; (800dda8 <rmw_uros_set_custom_transport+0x28>)
 800dd90:	7020      	strb	r0, [r4, #0]
 800dd92:	2000      	movs	r0, #0
 800dd94:	6166      	str	r6, [r4, #20]
 800dd96:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800dd9a:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800dd9e:	bc70      	pop	{r4, r5, r6}
 800dda0:	4770      	bx	lr
 800dda2:	200b      	movs	r0, #11
 800dda4:	bc70      	pop	{r4, r5, r6}
 800dda6:	4770      	bx	lr
 800dda8:	2000b9a4 	.word	0x2000b9a4

0800ddac <flush_session>:
 800ddac:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
 800ddae:	f003 bcaf 	b.w	8011710 <uxr_run_session_until_confirm_delivery>
 800ddb2:	bf00      	nop

0800ddb4 <rmw_publish>:
 800ddb4:	2800      	cmp	r0, #0
 800ddb6:	d053      	beq.n	800de60 <rmw_publish+0xac>
 800ddb8:	b570      	push	{r4, r5, r6, lr}
 800ddba:	460d      	mov	r5, r1
 800ddbc:	b08e      	sub	sp, #56	; 0x38
 800ddbe:	2900      	cmp	r1, #0
 800ddc0:	d04b      	beq.n	800de5a <rmw_publish+0xa6>
 800ddc2:	4604      	mov	r4, r0
 800ddc4:	6800      	ldr	r0, [r0, #0]
 800ddc6:	f000 fd97 	bl	800e8f8 <is_uxrce_rmw_identifier_valid>
 800ddca:	2800      	cmp	r0, #0
 800ddcc:	d045      	beq.n	800de5a <rmw_publish+0xa6>
 800ddce:	6866      	ldr	r6, [r4, #4]
 800ddd0:	2e00      	cmp	r6, #0
 800ddd2:	d042      	beq.n	800de5a <rmw_publish+0xa6>
 800ddd4:	69b4      	ldr	r4, [r6, #24]
 800ddd6:	4628      	mov	r0, r5
 800ddd8:	6923      	ldr	r3, [r4, #16]
 800ddda:	4798      	blx	r3
 800dddc:	69f3      	ldr	r3, [r6, #28]
 800ddde:	9005      	str	r0, [sp, #20]
 800dde0:	b113      	cbz	r3, 800dde8 <rmw_publish+0x34>
 800dde2:	a805      	add	r0, sp, #20
 800dde4:	4798      	blx	r3
 800dde6:	9805      	ldr	r0, [sp, #20]
 800dde8:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800ddec:	691b      	ldr	r3, [r3, #16]
 800ddee:	9000      	str	r0, [sp, #0]
 800ddf0:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800ddf4:	6972      	ldr	r2, [r6, #20]
 800ddf6:	ab06      	add	r3, sp, #24
 800ddf8:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 800ddfa:	f004 fa87 	bl	801230c <uxr_prepare_output_stream>
 800ddfe:	b1d8      	cbz	r0, 800de38 <rmw_publish+0x84>
 800de00:	68a3      	ldr	r3, [r4, #8]
 800de02:	a906      	add	r1, sp, #24
 800de04:	4628      	mov	r0, r5
 800de06:	4798      	blx	r3
 800de08:	6a33      	ldr	r3, [r6, #32]
 800de0a:	4604      	mov	r4, r0
 800de0c:	b10b      	cbz	r3, 800de12 <rmw_publish+0x5e>
 800de0e:	a806      	add	r0, sp, #24
 800de10:	4798      	blx	r3
 800de12:	f896 307a 	ldrb.w	r3, [r6, #122]	; 0x7a
 800de16:	2b01      	cmp	r3, #1
 800de18:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800de1c:	d022      	beq.n	800de64 <rmw_publish+0xb0>
 800de1e:	6918      	ldr	r0, [r3, #16]
 800de20:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
 800de22:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800de26:	f003 fc73 	bl	8011710 <uxr_run_session_until_confirm_delivery>
 800de2a:	4020      	ands	r0, r4
 800de2c:	b2c4      	uxtb	r4, r0
 800de2e:	f084 0001 	eor.w	r0, r4, #1
 800de32:	b2c0      	uxtb	r0, r0
 800de34:	b00e      	add	sp, #56	; 0x38
 800de36:	bd70      	pop	{r4, r5, r6, pc}
 800de38:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800de3c:	6918      	ldr	r0, [r3, #16]
 800de3e:	9b05      	ldr	r3, [sp, #20]
 800de40:	9602      	str	r6, [sp, #8]
 800de42:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800de46:	9300      	str	r3, [sp, #0]
 800de48:	4b09      	ldr	r3, [pc, #36]	; (800de70 <rmw_publish+0xbc>)
 800de4a:	9301      	str	r3, [sp, #4]
 800de4c:	ab06      	add	r3, sp, #24
 800de4e:	6972      	ldr	r2, [r6, #20]
 800de50:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 800de52:	f004 fa8b 	bl	801236c <uxr_prepare_output_stream_fragmented>
 800de56:	2800      	cmp	r0, #0
 800de58:	d1d2      	bne.n	800de00 <rmw_publish+0x4c>
 800de5a:	2001      	movs	r0, #1
 800de5c:	b00e      	add	sp, #56	; 0x38
 800de5e:	bd70      	pop	{r4, r5, r6, pc}
 800de60:	2001      	movs	r0, #1
 800de62:	4770      	bx	lr
 800de64:	6918      	ldr	r0, [r3, #16]
 800de66:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800de6a:	f003 f897 	bl	8010f9c <uxr_flash_output_streams>
 800de6e:	e7de      	b.n	800de2e <rmw_publish+0x7a>
 800de70:	0800ddad 	.word	0x0800ddad

0800de74 <rmw_create_publisher>:
 800de74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de78:	b087      	sub	sp, #28
 800de7a:	2800      	cmp	r0, #0
 800de7c:	f000 80d2 	beq.w	800e024 <rmw_create_publisher+0x1b0>
 800de80:	460e      	mov	r6, r1
 800de82:	2900      	cmp	r1, #0
 800de84:	f000 80ce 	beq.w	800e024 <rmw_create_publisher+0x1b0>
 800de88:	4604      	mov	r4, r0
 800de8a:	6800      	ldr	r0, [r0, #0]
 800de8c:	4615      	mov	r5, r2
 800de8e:	461f      	mov	r7, r3
 800de90:	f000 fd32 	bl	800e8f8 <is_uxrce_rmw_identifier_valid>
 800de94:	f080 0001 	eor.w	r0, r0, #1
 800de98:	b2c0      	uxtb	r0, r0
 800de9a:	2800      	cmp	r0, #0
 800de9c:	f040 80c2 	bne.w	800e024 <rmw_create_publisher+0x1b0>
 800dea0:	2d00      	cmp	r5, #0
 800dea2:	f000 80bf 	beq.w	800e024 <rmw_create_publisher+0x1b0>
 800dea6:	782b      	ldrb	r3, [r5, #0]
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	f000 80bb 	beq.w	800e024 <rmw_create_publisher+0x1b0>
 800deae:	2f00      	cmp	r7, #0
 800deb0:	f000 80b8 	beq.w	800e024 <rmw_create_publisher+0x1b0>
 800deb4:	485e      	ldr	r0, [pc, #376]	; (800e030 <rmw_create_publisher+0x1bc>)
 800deb6:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800deba:	f00a fa2b 	bl	8018314 <get_memory>
 800debe:	2800      	cmp	r0, #0
 800dec0:	f000 80b0 	beq.w	800e024 <rmw_create_publisher+0x1b0>
 800dec4:	6884      	ldr	r4, [r0, #8]
 800dec6:	f104 0a9c 	add.w	sl, r4, #156	; 0x9c
 800deca:	f8c4 4088 	str.w	r4, [r4, #136]	; 0x88
 800dece:	f00a faa7 	bl	8018420 <rmw_get_implementation_identifier>
 800ded2:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 800ded6:	f8c4 a08c 	str.w	sl, [r4, #140]	; 0x8c
 800deda:	4628      	mov	r0, r5
 800dedc:	f7f2 fa10 	bl	8000300 <strlen>
 800dee0:	3001      	adds	r0, #1
 800dee2:	f104 0884 	add.w	r8, r4, #132	; 0x84
 800dee6:	283c      	cmp	r0, #60	; 0x3c
 800dee8:	f200 808f 	bhi.w	800e00a <rmw_create_publisher+0x196>
 800deec:	462b      	mov	r3, r5
 800deee:	4a51      	ldr	r2, [pc, #324]	; (800e034 <rmw_create_publisher+0x1c0>)
 800def0:	213c      	movs	r1, #60	; 0x3c
 800def2:	4650      	mov	r0, sl
 800def4:	f00e fb4c 	bl	801c590 <sniprintf>
 800def8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800defc:	4639      	mov	r1, r7
 800defe:	2250      	movs	r2, #80	; 0x50
 800df00:	67e3      	str	r3, [r4, #124]	; 0x7c
 800df02:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800df06:	f8c4 9080 	str.w	r9, [r4, #128]	; 0x80
 800df0a:	f00e fd4c 	bl	801c9a6 <memcpy>
 800df0e:	7a3b      	ldrb	r3, [r7, #8]
 800df10:	4630      	mov	r0, r6
 800df12:	4949      	ldr	r1, [pc, #292]	; (800e038 <rmw_create_publisher+0x1c4>)
 800df14:	2b02      	cmp	r3, #2
 800df16:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800df1a:	bf0c      	ite	eq
 800df1c:	f8d3 337c 	ldreq.w	r3, [r3, #892]	; 0x37c
 800df20:	f8d3 3378 	ldrne.w	r3, [r3, #888]	; 0x378
 800df24:	67a3      	str	r3, [r4, #120]	; 0x78
 800df26:	2300      	movs	r3, #0
 800df28:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800df2c:	f000 fcf2 	bl	800e914 <get_message_typesupport_handle>
 800df30:	2800      	cmp	r0, #0
 800df32:	d06a      	beq.n	800e00a <rmw_create_publisher+0x196>
 800df34:	6842      	ldr	r2, [r0, #4]
 800df36:	61a2      	str	r2, [r4, #24]
 800df38:	2a00      	cmp	r2, #0
 800df3a:	d066      	beq.n	800e00a <rmw_create_publisher+0x196>
 800df3c:	4629      	mov	r1, r5
 800df3e:	463b      	mov	r3, r7
 800df40:	4648      	mov	r0, r9
 800df42:	f00a fcab 	bl	801889c <create_topic>
 800df46:	6260      	str	r0, [r4, #36]	; 0x24
 800df48:	2800      	cmp	r0, #0
 800df4a:	d062      	beq.n	800e012 <rmw_create_publisher+0x19e>
 800df4c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800df50:	2103      	movs	r1, #3
 800df52:	2506      	movs	r5, #6
 800df54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df58:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	; 0x598
 800df5c:	1c42      	adds	r2, r0, #1
 800df5e:	f8a3 2598 	strh.w	r2, [r3, #1432]	; 0x598
 800df62:	f002 fecb 	bl	8010cfc <uxr_object_id>
 800df66:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800df6a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800df6e:	6120      	str	r0, [r4, #16]
 800df70:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 800df74:	6910      	ldr	r0, [r2, #16]
 800df76:	9500      	str	r5, [sp, #0]
 800df78:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800df7c:	6819      	ldr	r1, [r3, #0]
 800df7e:	6922      	ldr	r2, [r4, #16]
 800df80:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800df84:	f002 fd32 	bl	80109ec <uxr_buffer_create_publisher_bin>
 800df88:	4602      	mov	r2, r0
 800df8a:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800df8e:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800df92:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800df96:	f000 fb9d 	bl	800e6d4 <run_xrce_session>
 800df9a:	b3b0      	cbz	r0, 800e00a <rmw_create_publisher+0x196>
 800df9c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dfa0:	2105      	movs	r1, #5
 800dfa2:	f10d 0a10 	add.w	sl, sp, #16
 800dfa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dfaa:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	; 0x59a
 800dfae:	1c42      	adds	r2, r0, #1
 800dfb0:	f8a3 259a 	strh.w	r2, [r3, #1434]	; 0x59a
 800dfb4:	f002 fea2 	bl	8010cfc <uxr_object_id>
 800dfb8:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800dfbc:	4639      	mov	r1, r7
 800dfbe:	6160      	str	r0, [r4, #20]
 800dfc0:	691e      	ldr	r6, [r3, #16]
 800dfc2:	4650      	mov	r0, sl
 800dfc4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dfc8:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 800dfcc:	f506 7628 	add.w	r6, r6, #672	; 0x2a0
 800dfd0:	f8d3 7384 	ldr.w	r7, [r3, #900]	; 0x384
 800dfd4:	f000 fb9a 	bl	800e70c <convert_qos_profile>
 800dfd8:	9503      	str	r5, [sp, #12]
 800dfda:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800dfde:	9001      	str	r0, [sp, #4]
 800dfe0:	4630      	mov	r0, r6
 800dfe2:	f8ad 1008 	strh.w	r1, [sp, #8]
 800dfe6:	f8db 3010 	ldr.w	r3, [fp, #16]
 800dfea:	9300      	str	r3, [sp, #0]
 800dfec:	6839      	ldr	r1, [r7, #0]
 800dfee:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800dff2:	f002 fd5b 	bl	8010aac <uxr_buffer_create_datawriter_bin>
 800dff6:	4602      	mov	r2, r0
 800dff8:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800dffc:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800e000:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800e004:	f000 fb66 	bl	800e6d4 <run_xrce_session>
 800e008:	b970      	cbnz	r0, 800e028 <rmw_create_publisher+0x1b4>
 800e00a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e00c:	b108      	cbz	r0, 800e012 <rmw_create_publisher+0x19e>
 800e00e:	f000 fa53 	bl	800e4b8 <rmw_uxrce_fini_topic_memory>
 800e012:	4640      	mov	r0, r8
 800e014:	f04f 0800 	mov.w	r8, #0
 800e018:	f000 f9f6 	bl	800e408 <rmw_uxrce_fini_publisher_memory>
 800e01c:	4640      	mov	r0, r8
 800e01e:	b007      	add	sp, #28
 800e020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e024:	f04f 0800 	mov.w	r8, #0
 800e028:	4640      	mov	r0, r8
 800e02a:	b007      	add	sp, #28
 800e02c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e030:	20010364 	.word	0x20010364
 800e034:	0801e5bc 	.word	0x0801e5bc
 800e038:	0801d960 	.word	0x0801d960

0800e03c <rmw_publisher_get_actual_qos>:
 800e03c:	b178      	cbz	r0, 800e05e <rmw_publisher_get_actual_qos+0x22>
 800e03e:	b510      	push	{r4, lr}
 800e040:	fab1 f481 	clz	r4, r1
 800e044:	0964      	lsrs	r4, r4, #5
 800e046:	b141      	cbz	r1, 800e05a <rmw_publisher_get_actual_qos+0x1e>
 800e048:	6843      	ldr	r3, [r0, #4]
 800e04a:	2250      	movs	r2, #80	; 0x50
 800e04c:	4608      	mov	r0, r1
 800e04e:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800e052:	f00e fca8 	bl	801c9a6 <memcpy>
 800e056:	4620      	mov	r0, r4
 800e058:	bd10      	pop	{r4, pc}
 800e05a:	200b      	movs	r0, #11
 800e05c:	bd10      	pop	{r4, pc}
 800e05e:	200b      	movs	r0, #11
 800e060:	4770      	bx	lr
 800e062:	bf00      	nop

0800e064 <rmw_destroy_publisher>:
 800e064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e068:	b128      	cbz	r0, 800e076 <rmw_destroy_publisher+0x12>
 800e06a:	4604      	mov	r4, r0
 800e06c:	6800      	ldr	r0, [r0, #0]
 800e06e:	460d      	mov	r5, r1
 800e070:	f000 fc42 	bl	800e8f8 <is_uxrce_rmw_identifier_valid>
 800e074:	b918      	cbnz	r0, 800e07e <rmw_destroy_publisher+0x1a>
 800e076:	2401      	movs	r4, #1
 800e078:	4620      	mov	r0, r4
 800e07a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e07e:	6863      	ldr	r3, [r4, #4]
 800e080:	2b00      	cmp	r3, #0
 800e082:	d0f8      	beq.n	800e076 <rmw_destroy_publisher+0x12>
 800e084:	fab5 f485 	clz	r4, r5
 800e088:	0964      	lsrs	r4, r4, #5
 800e08a:	2d00      	cmp	r5, #0
 800e08c:	d0f3      	beq.n	800e076 <rmw_destroy_publisher+0x12>
 800e08e:	6828      	ldr	r0, [r5, #0]
 800e090:	f000 fc32 	bl	800e8f8 <is_uxrce_rmw_identifier_valid>
 800e094:	2800      	cmp	r0, #0
 800e096:	d0ee      	beq.n	800e076 <rmw_destroy_publisher+0x12>
 800e098:	686e      	ldr	r6, [r5, #4]
 800e09a:	2e00      	cmp	r6, #0
 800e09c:	d0eb      	beq.n	800e076 <rmw_destroy_publisher+0x12>
 800e09e:	6a70      	ldr	r0, [r6, #36]	; 0x24
 800e0a0:	f8d6 7080 	ldr.w	r7, [r6, #128]	; 0x80
 800e0a4:	f00a fc4a 	bl	801893c <destroy_topic>
 800e0a8:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800e0ac:	6972      	ldr	r2, [r6, #20]
 800e0ae:	6918      	ldr	r0, [r3, #16]
 800e0b0:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800e0b4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e0b8:	6819      	ldr	r1, [r3, #0]
 800e0ba:	f002 fbe3 	bl	8010884 <uxr_buffer_delete_entity>
 800e0be:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800e0c2:	4680      	mov	r8, r0
 800e0c4:	6932      	ldr	r2, [r6, #16]
 800e0c6:	6918      	ldr	r0, [r3, #16]
 800e0c8:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800e0cc:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e0d0:	6819      	ldr	r1, [r3, #0]
 800e0d2:	f002 fbd7 	bl	8010884 <uxr_buffer_delete_entity>
 800e0d6:	4606      	mov	r6, r0
 800e0d8:	6938      	ldr	r0, [r7, #16]
 800e0da:	4642      	mov	r2, r8
 800e0dc:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800e0e0:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800e0e4:	f000 faf6 	bl	800e6d4 <run_xrce_session>
 800e0e8:	693f      	ldr	r7, [r7, #16]
 800e0ea:	4632      	mov	r2, r6
 800e0ec:	4606      	mov	r6, r0
 800e0ee:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 800e0f2:	4638      	mov	r0, r7
 800e0f4:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 800e0f8:	f000 faec 	bl	800e6d4 <run_xrce_session>
 800e0fc:	b126      	cbz	r6, 800e108 <rmw_destroy_publisher+0xa4>
 800e0fe:	b118      	cbz	r0, 800e108 <rmw_destroy_publisher+0xa4>
 800e100:	4628      	mov	r0, r5
 800e102:	f000 f981 	bl	800e408 <rmw_uxrce_fini_publisher_memory>
 800e106:	e7b7      	b.n	800e078 <rmw_destroy_publisher+0x14>
 800e108:	2402      	movs	r4, #2
 800e10a:	e7f9      	b.n	800e100 <rmw_destroy_publisher+0x9c>

0800e10c <rmw_uxrce_init_service_memory>:
 800e10c:	b1e2      	cbz	r2, 800e148 <rmw_uxrce_init_service_memory+0x3c>
 800e10e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e112:	7b05      	ldrb	r5, [r0, #12]
 800e114:	4606      	mov	r6, r0
 800e116:	b9ad      	cbnz	r5, 800e144 <rmw_uxrce_init_service_memory+0x38>
 800e118:	23c8      	movs	r3, #200	; 0xc8
 800e11a:	4617      	mov	r7, r2
 800e11c:	460c      	mov	r4, r1
 800e11e:	46a8      	mov	r8, r5
 800e120:	6083      	str	r3, [r0, #8]
 800e122:	f240 1301 	movw	r3, #257	; 0x101
 800e126:	e9c0 5500 	strd	r5, r5, [r0]
 800e12a:	8183      	strh	r3, [r0, #12]
 800e12c:	3501      	adds	r5, #1
 800e12e:	4621      	mov	r1, r4
 800e130:	4630      	mov	r0, r6
 800e132:	f00a f8ff 	bl	8018334 <put_memory>
 800e136:	42af      	cmp	r7, r5
 800e138:	60a4      	str	r4, [r4, #8]
 800e13a:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 800e13e:	f804 8cbc 	strb.w	r8, [r4, #-188]
 800e142:	d1f3      	bne.n	800e12c <rmw_uxrce_init_service_memory+0x20>
 800e144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e148:	4770      	bx	lr
 800e14a:	bf00      	nop

0800e14c <rmw_uxrce_init_client_memory>:
 800e14c:	b1e2      	cbz	r2, 800e188 <rmw_uxrce_init_client_memory+0x3c>
 800e14e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e152:	7b05      	ldrb	r5, [r0, #12]
 800e154:	4606      	mov	r6, r0
 800e156:	b9ad      	cbnz	r5, 800e184 <rmw_uxrce_init_client_memory+0x38>
 800e158:	23c8      	movs	r3, #200	; 0xc8
 800e15a:	4617      	mov	r7, r2
 800e15c:	460c      	mov	r4, r1
 800e15e:	46a8      	mov	r8, r5
 800e160:	6083      	str	r3, [r0, #8]
 800e162:	f240 1301 	movw	r3, #257	; 0x101
 800e166:	e9c0 5500 	strd	r5, r5, [r0]
 800e16a:	8183      	strh	r3, [r0, #12]
 800e16c:	3501      	adds	r5, #1
 800e16e:	4621      	mov	r1, r4
 800e170:	4630      	mov	r0, r6
 800e172:	f00a f8df 	bl	8018334 <put_memory>
 800e176:	42af      	cmp	r7, r5
 800e178:	60a4      	str	r4, [r4, #8]
 800e17a:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 800e17e:	f804 8cbc 	strb.w	r8, [r4, #-188]
 800e182:	d1f3      	bne.n	800e16c <rmw_uxrce_init_client_memory+0x20>
 800e184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e188:	4770      	bx	lr
 800e18a:	bf00      	nop

0800e18c <rmw_uxrce_init_publisher_memory>:
 800e18c:	b1e2      	cbz	r2, 800e1c8 <rmw_uxrce_init_publisher_memory+0x3c>
 800e18e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e192:	7b05      	ldrb	r5, [r0, #12]
 800e194:	4606      	mov	r6, r0
 800e196:	b9ad      	cbnz	r5, 800e1c4 <rmw_uxrce_init_publisher_memory+0x38>
 800e198:	23d8      	movs	r3, #216	; 0xd8
 800e19a:	4617      	mov	r7, r2
 800e19c:	460c      	mov	r4, r1
 800e19e:	46a8      	mov	r8, r5
 800e1a0:	6083      	str	r3, [r0, #8]
 800e1a2:	f240 1301 	movw	r3, #257	; 0x101
 800e1a6:	e9c0 5500 	strd	r5, r5, [r0]
 800e1aa:	8183      	strh	r3, [r0, #12]
 800e1ac:	3501      	adds	r5, #1
 800e1ae:	4621      	mov	r1, r4
 800e1b0:	4630      	mov	r0, r6
 800e1b2:	f00a f8bf 	bl	8018334 <put_memory>
 800e1b6:	42af      	cmp	r7, r5
 800e1b8:	60a4      	str	r4, [r4, #8]
 800e1ba:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 800e1be:	f804 8ccc 	strb.w	r8, [r4, #-204]
 800e1c2:	d1f3      	bne.n	800e1ac <rmw_uxrce_init_publisher_memory+0x20>
 800e1c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1c8:	4770      	bx	lr
 800e1ca:	bf00      	nop

0800e1cc <rmw_uxrce_init_subscription_memory>:
 800e1cc:	b1e2      	cbz	r2, 800e208 <rmw_uxrce_init_subscription_memory+0x3c>
 800e1ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1d2:	7b05      	ldrb	r5, [r0, #12]
 800e1d4:	4606      	mov	r6, r0
 800e1d6:	b9ad      	cbnz	r5, 800e204 <rmw_uxrce_init_subscription_memory+0x38>
 800e1d8:	23d8      	movs	r3, #216	; 0xd8
 800e1da:	4617      	mov	r7, r2
 800e1dc:	460c      	mov	r4, r1
 800e1de:	46a8      	mov	r8, r5
 800e1e0:	6083      	str	r3, [r0, #8]
 800e1e2:	f240 1301 	movw	r3, #257	; 0x101
 800e1e6:	e9c0 5500 	strd	r5, r5, [r0]
 800e1ea:	8183      	strh	r3, [r0, #12]
 800e1ec:	3501      	adds	r5, #1
 800e1ee:	4621      	mov	r1, r4
 800e1f0:	4630      	mov	r0, r6
 800e1f2:	f00a f89f 	bl	8018334 <put_memory>
 800e1f6:	42af      	cmp	r7, r5
 800e1f8:	60a4      	str	r4, [r4, #8]
 800e1fa:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 800e1fe:	f804 8ccc 	strb.w	r8, [r4, #-204]
 800e202:	d1f3      	bne.n	800e1ec <rmw_uxrce_init_subscription_memory+0x20>
 800e204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e208:	4770      	bx	lr
 800e20a:	bf00      	nop

0800e20c <rmw_uxrce_init_node_memory>:
 800e20c:	b1e2      	cbz	r2, 800e248 <rmw_uxrce_init_node_memory+0x3c>
 800e20e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e212:	7b05      	ldrb	r5, [r0, #12]
 800e214:	4606      	mov	r6, r0
 800e216:	b9ad      	cbnz	r5, 800e244 <rmw_uxrce_init_node_memory+0x38>
 800e218:	23a4      	movs	r3, #164	; 0xa4
 800e21a:	4617      	mov	r7, r2
 800e21c:	460c      	mov	r4, r1
 800e21e:	46a8      	mov	r8, r5
 800e220:	6083      	str	r3, [r0, #8]
 800e222:	f240 1301 	movw	r3, #257	; 0x101
 800e226:	e9c0 5500 	strd	r5, r5, [r0]
 800e22a:	8183      	strh	r3, [r0, #12]
 800e22c:	3501      	adds	r5, #1
 800e22e:	4621      	mov	r1, r4
 800e230:	4630      	mov	r0, r6
 800e232:	f00a f87f 	bl	8018334 <put_memory>
 800e236:	42af      	cmp	r7, r5
 800e238:	60a4      	str	r4, [r4, #8]
 800e23a:	f104 04a4 	add.w	r4, r4, #164	; 0xa4
 800e23e:	f804 8c98 	strb.w	r8, [r4, #-152]
 800e242:	d1f3      	bne.n	800e22c <rmw_uxrce_init_node_memory+0x20>
 800e244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e248:	4770      	bx	lr
 800e24a:	bf00      	nop

0800e24c <rmw_uxrce_init_session_memory>:
 800e24c:	b1ea      	cbz	r2, 800e28a <rmw_uxrce_init_session_memory+0x3e>
 800e24e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e252:	7b05      	ldrb	r5, [r0, #12]
 800e254:	4606      	mov	r6, r0
 800e256:	b9b5      	cbnz	r5, 800e286 <rmw_uxrce_init_session_memory+0x3a>
 800e258:	f241 58a8 	movw	r8, #5544	; 0x15a8
 800e25c:	f240 1301 	movw	r3, #257	; 0x101
 800e260:	4617      	mov	r7, r2
 800e262:	460c      	mov	r4, r1
 800e264:	46a9      	mov	r9, r5
 800e266:	f8c0 8008 	str.w	r8, [r0, #8]
 800e26a:	8183      	strh	r3, [r0, #12]
 800e26c:	e9c0 5500 	strd	r5, r5, [r0]
 800e270:	3501      	adds	r5, #1
 800e272:	4621      	mov	r1, r4
 800e274:	4630      	mov	r0, r6
 800e276:	f00a f85d 	bl	8018334 <put_memory>
 800e27a:	42af      	cmp	r7, r5
 800e27c:	60a4      	str	r4, [r4, #8]
 800e27e:	f884 900c 	strb.w	r9, [r4, #12]
 800e282:	4444      	add	r4, r8
 800e284:	d1f4      	bne.n	800e270 <rmw_uxrce_init_session_memory+0x24>
 800e286:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e28a:	4770      	bx	lr

0800e28c <rmw_uxrce_init_topic_memory>:
 800e28c:	b1e2      	cbz	r2, 800e2c8 <rmw_uxrce_init_topic_memory+0x3c>
 800e28e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e292:	7b05      	ldrb	r5, [r0, #12]
 800e294:	4606      	mov	r6, r0
 800e296:	b9ad      	cbnz	r5, 800e2c4 <rmw_uxrce_init_topic_memory+0x38>
 800e298:	231c      	movs	r3, #28
 800e29a:	4617      	mov	r7, r2
 800e29c:	460c      	mov	r4, r1
 800e29e:	46a8      	mov	r8, r5
 800e2a0:	6083      	str	r3, [r0, #8]
 800e2a2:	f240 1301 	movw	r3, #257	; 0x101
 800e2a6:	e9c0 5500 	strd	r5, r5, [r0]
 800e2aa:	8183      	strh	r3, [r0, #12]
 800e2ac:	3501      	adds	r5, #1
 800e2ae:	4621      	mov	r1, r4
 800e2b0:	4630      	mov	r0, r6
 800e2b2:	f00a f83f 	bl	8018334 <put_memory>
 800e2b6:	42af      	cmp	r7, r5
 800e2b8:	60a4      	str	r4, [r4, #8]
 800e2ba:	f104 041c 	add.w	r4, r4, #28
 800e2be:	f804 8c10 	strb.w	r8, [r4, #-16]
 800e2c2:	d1f3      	bne.n	800e2ac <rmw_uxrce_init_topic_memory+0x20>
 800e2c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2c8:	4770      	bx	lr
 800e2ca:	bf00      	nop

0800e2cc <rmw_uxrce_init_static_input_buffer_memory>:
 800e2cc:	b1ea      	cbz	r2, 800e30a <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800e2ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2d2:	7b05      	ldrb	r5, [r0, #12]
 800e2d4:	4606      	mov	r6, r0
 800e2d6:	b9b5      	cbnz	r5, 800e306 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800e2d8:	f44f 6304 	mov.w	r3, #2112	; 0x840
 800e2dc:	4617      	mov	r7, r2
 800e2de:	460c      	mov	r4, r1
 800e2e0:	46a8      	mov	r8, r5
 800e2e2:	6083      	str	r3, [r0, #8]
 800e2e4:	f240 1301 	movw	r3, #257	; 0x101
 800e2e8:	e9c0 5500 	strd	r5, r5, [r0]
 800e2ec:	8183      	strh	r3, [r0, #12]
 800e2ee:	3501      	adds	r5, #1
 800e2f0:	4621      	mov	r1, r4
 800e2f2:	4630      	mov	r0, r6
 800e2f4:	f00a f81e 	bl	8018334 <put_memory>
 800e2f8:	42af      	cmp	r7, r5
 800e2fa:	60a4      	str	r4, [r4, #8]
 800e2fc:	f884 800c 	strb.w	r8, [r4, #12]
 800e300:	f504 6404 	add.w	r4, r4, #2112	; 0x840
 800e304:	d1f3      	bne.n	800e2ee <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800e306:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e30a:	4770      	bx	lr

0800e30c <rmw_uxrce_init_init_options_impl_memory>:
 800e30c:	b1e2      	cbz	r2, 800e348 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800e30e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e312:	7b05      	ldrb	r5, [r0, #12]
 800e314:	4606      	mov	r6, r0
 800e316:	b9ad      	cbnz	r5, 800e344 <rmw_uxrce_init_init_options_impl_memory+0x38>
 800e318:	232c      	movs	r3, #44	; 0x2c
 800e31a:	4617      	mov	r7, r2
 800e31c:	460c      	mov	r4, r1
 800e31e:	46a8      	mov	r8, r5
 800e320:	6083      	str	r3, [r0, #8]
 800e322:	f240 1301 	movw	r3, #257	; 0x101
 800e326:	e9c0 5500 	strd	r5, r5, [r0]
 800e32a:	8183      	strh	r3, [r0, #12]
 800e32c:	3501      	adds	r5, #1
 800e32e:	4621      	mov	r1, r4
 800e330:	4630      	mov	r0, r6
 800e332:	f009 ffff 	bl	8018334 <put_memory>
 800e336:	42af      	cmp	r7, r5
 800e338:	60a4      	str	r4, [r4, #8]
 800e33a:	f104 042c 	add.w	r4, r4, #44	; 0x2c
 800e33e:	f804 8c20 	strb.w	r8, [r4, #-32]
 800e342:	d1f3      	bne.n	800e32c <rmw_uxrce_init_init_options_impl_memory+0x20>
 800e344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e348:	4770      	bx	lr
 800e34a:	bf00      	nop

0800e34c <rmw_uxrce_init_wait_set_memory>:
 800e34c:	b1e2      	cbz	r2, 800e388 <rmw_uxrce_init_wait_set_memory+0x3c>
 800e34e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e352:	7b05      	ldrb	r5, [r0, #12]
 800e354:	4606      	mov	r6, r0
 800e356:	b9ad      	cbnz	r5, 800e384 <rmw_uxrce_init_wait_set_memory+0x38>
 800e358:	231c      	movs	r3, #28
 800e35a:	4617      	mov	r7, r2
 800e35c:	460c      	mov	r4, r1
 800e35e:	46a8      	mov	r8, r5
 800e360:	6083      	str	r3, [r0, #8]
 800e362:	f240 1301 	movw	r3, #257	; 0x101
 800e366:	e9c0 5500 	strd	r5, r5, [r0]
 800e36a:	8183      	strh	r3, [r0, #12]
 800e36c:	3501      	adds	r5, #1
 800e36e:	4621      	mov	r1, r4
 800e370:	4630      	mov	r0, r6
 800e372:	f009 ffdf 	bl	8018334 <put_memory>
 800e376:	42af      	cmp	r7, r5
 800e378:	60a4      	str	r4, [r4, #8]
 800e37a:	f104 041c 	add.w	r4, r4, #28
 800e37e:	f804 8c10 	strb.w	r8, [r4, #-16]
 800e382:	d1f3      	bne.n	800e36c <rmw_uxrce_init_wait_set_memory+0x20>
 800e384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e388:	4770      	bx	lr
 800e38a:	bf00      	nop

0800e38c <rmw_uxrce_init_guard_condition_memory>:
 800e38c:	b1e2      	cbz	r2, 800e3c8 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800e38e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e392:	7b05      	ldrb	r5, [r0, #12]
 800e394:	4606      	mov	r6, r0
 800e396:	b9ad      	cbnz	r5, 800e3c4 <rmw_uxrce_init_guard_condition_memory+0x38>
 800e398:	2320      	movs	r3, #32
 800e39a:	4617      	mov	r7, r2
 800e39c:	460c      	mov	r4, r1
 800e39e:	46a8      	mov	r8, r5
 800e3a0:	6083      	str	r3, [r0, #8]
 800e3a2:	f240 1301 	movw	r3, #257	; 0x101
 800e3a6:	e9c0 5500 	strd	r5, r5, [r0]
 800e3aa:	8183      	strh	r3, [r0, #12]
 800e3ac:	3501      	adds	r5, #1
 800e3ae:	4621      	mov	r1, r4
 800e3b0:	4630      	mov	r0, r6
 800e3b2:	f009 ffbf 	bl	8018334 <put_memory>
 800e3b6:	42af      	cmp	r7, r5
 800e3b8:	60a4      	str	r4, [r4, #8]
 800e3ba:	f104 0420 	add.w	r4, r4, #32
 800e3be:	f804 8c14 	strb.w	r8, [r4, #-20]
 800e3c2:	d1f3      	bne.n	800e3ac <rmw_uxrce_init_guard_condition_memory+0x20>
 800e3c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3c8:	4770      	bx	lr
 800e3ca:	bf00      	nop

0800e3cc <rmw_uxrce_fini_session_memory>:
 800e3cc:	4601      	mov	r1, r0
 800e3ce:	4801      	ldr	r0, [pc, #4]	; (800e3d4 <rmw_uxrce_fini_session_memory+0x8>)
 800e3d0:	f009 bfb0 	b.w	8018334 <put_memory>
 800e3d4:	20010384 	.word	0x20010384

0800e3d8 <rmw_uxrce_fini_node_memory>:
 800e3d8:	b538      	push	{r3, r4, r5, lr}
 800e3da:	4604      	mov	r4, r0
 800e3dc:	6800      	ldr	r0, [r0, #0]
 800e3de:	b128      	cbz	r0, 800e3ec <rmw_uxrce_fini_node_memory+0x14>
 800e3e0:	4b07      	ldr	r3, [pc, #28]	; (800e400 <rmw_uxrce_fini_node_memory+0x28>)
 800e3e2:	6819      	ldr	r1, [r3, #0]
 800e3e4:	f7f1 ff2c 	bl	8000240 <strcmp>
 800e3e8:	b940      	cbnz	r0, 800e3fc <rmw_uxrce_fini_node_memory+0x24>
 800e3ea:	6020      	str	r0, [r4, #0]
 800e3ec:	6861      	ldr	r1, [r4, #4]
 800e3ee:	b129      	cbz	r1, 800e3fc <rmw_uxrce_fini_node_memory+0x24>
 800e3f0:	2500      	movs	r5, #0
 800e3f2:	4804      	ldr	r0, [pc, #16]	; (800e404 <rmw_uxrce_fini_node_memory+0x2c>)
 800e3f4:	610d      	str	r5, [r1, #16]
 800e3f6:	f009 ff9d 	bl	8018334 <put_memory>
 800e3fa:	6065      	str	r5, [r4, #4]
 800e3fc:	bd38      	pop	{r3, r4, r5, pc}
 800e3fe:	bf00      	nop
 800e400:	0801f060 	.word	0x0801f060
 800e404:	20010354 	.word	0x20010354

0800e408 <rmw_uxrce_fini_publisher_memory>:
 800e408:	b510      	push	{r4, lr}
 800e40a:	4604      	mov	r4, r0
 800e40c:	6800      	ldr	r0, [r0, #0]
 800e40e:	b128      	cbz	r0, 800e41c <rmw_uxrce_fini_publisher_memory+0x14>
 800e410:	4b06      	ldr	r3, [pc, #24]	; (800e42c <rmw_uxrce_fini_publisher_memory+0x24>)
 800e412:	6819      	ldr	r1, [r3, #0]
 800e414:	f7f1 ff14 	bl	8000240 <strcmp>
 800e418:	b938      	cbnz	r0, 800e42a <rmw_uxrce_fini_publisher_memory+0x22>
 800e41a:	6020      	str	r0, [r4, #0]
 800e41c:	6861      	ldr	r1, [r4, #4]
 800e41e:	b121      	cbz	r1, 800e42a <rmw_uxrce_fini_publisher_memory+0x22>
 800e420:	4803      	ldr	r0, [pc, #12]	; (800e430 <rmw_uxrce_fini_publisher_memory+0x28>)
 800e422:	f009 ff87 	bl	8018334 <put_memory>
 800e426:	2300      	movs	r3, #0
 800e428:	6063      	str	r3, [r4, #4]
 800e42a:	bd10      	pop	{r4, pc}
 800e42c:	0801f060 	.word	0x0801f060
 800e430:	20010364 	.word	0x20010364

0800e434 <rmw_uxrce_fini_subscription_memory>:
 800e434:	b510      	push	{r4, lr}
 800e436:	4604      	mov	r4, r0
 800e438:	6800      	ldr	r0, [r0, #0]
 800e43a:	b128      	cbz	r0, 800e448 <rmw_uxrce_fini_subscription_memory+0x14>
 800e43c:	4b06      	ldr	r3, [pc, #24]	; (800e458 <rmw_uxrce_fini_subscription_memory+0x24>)
 800e43e:	6819      	ldr	r1, [r3, #0]
 800e440:	f7f1 fefe 	bl	8000240 <strcmp>
 800e444:	b938      	cbnz	r0, 800e456 <rmw_uxrce_fini_subscription_memory+0x22>
 800e446:	6020      	str	r0, [r4, #0]
 800e448:	6861      	ldr	r1, [r4, #4]
 800e44a:	b121      	cbz	r1, 800e456 <rmw_uxrce_fini_subscription_memory+0x22>
 800e44c:	4803      	ldr	r0, [pc, #12]	; (800e45c <rmw_uxrce_fini_subscription_memory+0x28>)
 800e44e:	f009 ff71 	bl	8018334 <put_memory>
 800e452:	2300      	movs	r3, #0
 800e454:	6063      	str	r3, [r4, #4]
 800e456:	bd10      	pop	{r4, pc}
 800e458:	0801f060 	.word	0x0801f060
 800e45c:	200103a4 	.word	0x200103a4

0800e460 <rmw_uxrce_fini_service_memory>:
 800e460:	b510      	push	{r4, lr}
 800e462:	4604      	mov	r4, r0
 800e464:	6800      	ldr	r0, [r0, #0]
 800e466:	b128      	cbz	r0, 800e474 <rmw_uxrce_fini_service_memory+0x14>
 800e468:	4b06      	ldr	r3, [pc, #24]	; (800e484 <rmw_uxrce_fini_service_memory+0x24>)
 800e46a:	6819      	ldr	r1, [r3, #0]
 800e46c:	f7f1 fee8 	bl	8000240 <strcmp>
 800e470:	b938      	cbnz	r0, 800e482 <rmw_uxrce_fini_service_memory+0x22>
 800e472:	6020      	str	r0, [r4, #0]
 800e474:	6861      	ldr	r1, [r4, #4]
 800e476:	b121      	cbz	r1, 800e482 <rmw_uxrce_fini_service_memory+0x22>
 800e478:	4803      	ldr	r0, [pc, #12]	; (800e488 <rmw_uxrce_fini_service_memory+0x28>)
 800e47a:	f009 ff5b 	bl	8018334 <put_memory>
 800e47e:	2300      	movs	r3, #0
 800e480:	6063      	str	r3, [r4, #4]
 800e482:	bd10      	pop	{r4, pc}
 800e484:	0801f060 	.word	0x0801f060
 800e488:	20010374 	.word	0x20010374

0800e48c <rmw_uxrce_fini_client_memory>:
 800e48c:	b510      	push	{r4, lr}
 800e48e:	4604      	mov	r4, r0
 800e490:	6800      	ldr	r0, [r0, #0]
 800e492:	b128      	cbz	r0, 800e4a0 <rmw_uxrce_fini_client_memory+0x14>
 800e494:	4b06      	ldr	r3, [pc, #24]	; (800e4b0 <rmw_uxrce_fini_client_memory+0x24>)
 800e496:	6819      	ldr	r1, [r3, #0]
 800e498:	f7f1 fed2 	bl	8000240 <strcmp>
 800e49c:	b938      	cbnz	r0, 800e4ae <rmw_uxrce_fini_client_memory+0x22>
 800e49e:	6020      	str	r0, [r4, #0]
 800e4a0:	6861      	ldr	r1, [r4, #4]
 800e4a2:	b121      	cbz	r1, 800e4ae <rmw_uxrce_fini_client_memory+0x22>
 800e4a4:	4803      	ldr	r0, [pc, #12]	; (800e4b4 <rmw_uxrce_fini_client_memory+0x28>)
 800e4a6:	f009 ff45 	bl	8018334 <put_memory>
 800e4aa:	2300      	movs	r3, #0
 800e4ac:	6063      	str	r3, [r4, #4]
 800e4ae:	bd10      	pop	{r4, pc}
 800e4b0:	0801f060 	.word	0x0801f060
 800e4b4:	2000b9c0 	.word	0x2000b9c0

0800e4b8 <rmw_uxrce_fini_topic_memory>:
 800e4b8:	b510      	push	{r4, lr}
 800e4ba:	4604      	mov	r4, r0
 800e4bc:	4803      	ldr	r0, [pc, #12]	; (800e4cc <rmw_uxrce_fini_topic_memory+0x14>)
 800e4be:	4621      	mov	r1, r4
 800e4c0:	f009 ff38 	bl	8018334 <put_memory>
 800e4c4:	2300      	movs	r3, #0
 800e4c6:	61a3      	str	r3, [r4, #24]
 800e4c8:	bd10      	pop	{r4, pc}
 800e4ca:	bf00      	nop
 800e4cc:	200103b4 	.word	0x200103b4

0800e4d0 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800e4d0:	b082      	sub	sp, #8
 800e4d2:	492b      	ldr	r1, [pc, #172]	; (800e580 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 800e4d4:	b530      	push	{r4, r5, lr}
 800e4d6:	680d      	ldr	r5, [r1, #0]
 800e4d8:	ac03      	add	r4, sp, #12
 800e4da:	e884 000c 	stmia.w	r4, {r2, r3}
 800e4de:	461c      	mov	r4, r3
 800e4e0:	2d00      	cmp	r5, #0
 800e4e2:	d04b      	beq.n	800e57c <rmw_uxrce_get_static_input_buffer_for_entity+0xac>
 800e4e4:	462b      	mov	r3, r5
 800e4e6:	2100      	movs	r1, #0
 800e4e8:	689a      	ldr	r2, [r3, #8]
 800e4ea:	685b      	ldr	r3, [r3, #4]
 800e4ec:	f8d2 2814 	ldr.w	r2, [r2, #2068]	; 0x814
 800e4f0:	4290      	cmp	r0, r2
 800e4f2:	bf08      	it	eq
 800e4f4:	3101      	addeq	r1, #1
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d1f6      	bne.n	800e4e8 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800e4fa:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800e4fe:	2b02      	cmp	r3, #2
 800e500:	d029      	beq.n	800e556 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800e502:	d820      	bhi.n	800e546 <rmw_uxrce_get_static_input_buffer_for_entity+0x76>
 800e504:	428c      	cmp	r4, r1
 800e506:	d828      	bhi.n	800e55a <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 800e508:	fab4 f284 	clz	r2, r4
 800e50c:	0952      	lsrs	r2, r2, #5
 800e50e:	b324      	cbz	r4, 800e55a <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 800e510:	b1dd      	cbz	r5, 800e54a <rmw_uxrce_get_static_input_buffer_for_entity+0x7a>
 800e512:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800e516:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 800e51a:	e001      	b.n	800e520 <rmw_uxrce_get_static_input_buffer_for_entity+0x50>
 800e51c:	686d      	ldr	r5, [r5, #4]
 800e51e:	b1ad      	cbz	r5, 800e54c <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 800e520:	68ab      	ldr	r3, [r5, #8]
 800e522:	f8d3 1814 	ldr.w	r1, [r3, #2068]	; 0x814
 800e526:	4288      	cmp	r0, r1
 800e528:	d1f8      	bne.n	800e51c <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 800e52a:	f8d3 1818 	ldr.w	r1, [r3, #2072]	; 0x818
 800e52e:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 800e532:	4561      	cmp	r1, ip
 800e534:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800e538:	eb73 0e04 	sbcs.w	lr, r3, r4
 800e53c:	daee      	bge.n	800e51c <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 800e53e:	468c      	mov	ip, r1
 800e540:	461c      	mov	r4, r3
 800e542:	462a      	mov	r2, r5
 800e544:	e7ea      	b.n	800e51c <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 800e546:	2b03      	cmp	r3, #3
 800e548:	d0dc      	beq.n	800e504 <rmw_uxrce_get_static_input_buffer_for_entity+0x34>
 800e54a:	2200      	movs	r2, #0
 800e54c:	4610      	mov	r0, r2
 800e54e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e552:	b002      	add	sp, #8
 800e554:	4770      	bx	lr
 800e556:	428c      	cmp	r4, r1
 800e558:	d905      	bls.n	800e566 <rmw_uxrce_get_static_input_buffer_for_entity+0x96>
 800e55a:	4809      	ldr	r0, [pc, #36]	; (800e580 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 800e55c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e560:	b002      	add	sp, #8
 800e562:	f009 bed7 	b.w	8018314 <get_memory>
 800e566:	fab4 f284 	clz	r2, r4
 800e56a:	0952      	lsrs	r2, r2, #5
 800e56c:	2c00      	cmp	r4, #0
 800e56e:	d1ed      	bne.n	800e54c <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 800e570:	4803      	ldr	r0, [pc, #12]	; (800e580 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 800e572:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e576:	b002      	add	sp, #8
 800e578:	f009 becc 	b.w	8018314 <get_memory>
 800e57c:	4629      	mov	r1, r5
 800e57e:	e7bc      	b.n	800e4fa <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800e580:	20010394 	.word	0x20010394

0800e584 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800e584:	4b12      	ldr	r3, [pc, #72]	; (800e5d0 <rmw_uxrce_find_static_input_buffer_by_owner+0x4c>)
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	b530      	push	{r4, r5, lr}
 800e58a:	b1f3      	cbz	r3, 800e5ca <rmw_uxrce_find_static_input_buffer_by_owner+0x46>
 800e58c:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800e590:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
 800e594:	2400      	movs	r4, #0
 800e596:	e001      	b.n	800e59c <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800e598:	685b      	ldr	r3, [r3, #4]
 800e59a:	b1a3      	cbz	r3, 800e5c6 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800e59c:	689a      	ldr	r2, [r3, #8]
 800e59e:	f8d2 1814 	ldr.w	r1, [r2, #2068]	; 0x814
 800e5a2:	4288      	cmp	r0, r1
 800e5a4:	d1f8      	bne.n	800e598 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800e5a6:	f8d2 1818 	ldr.w	r1, [r2, #2072]	; 0x818
 800e5aa:	f502 6202 	add.w	r2, r2, #2080	; 0x820
 800e5ae:	4571      	cmp	r1, lr
 800e5b0:	f852 2c04 	ldr.w	r2, [r2, #-4]
 800e5b4:	eb72 050c 	sbcs.w	r5, r2, ip
 800e5b8:	daee      	bge.n	800e598 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800e5ba:	461c      	mov	r4, r3
 800e5bc:	685b      	ldr	r3, [r3, #4]
 800e5be:	468e      	mov	lr, r1
 800e5c0:	4694      	mov	ip, r2
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d1ea      	bne.n	800e59c <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800e5c6:	4620      	mov	r0, r4
 800e5c8:	bd30      	pop	{r4, r5, pc}
 800e5ca:	461c      	mov	r4, r3
 800e5cc:	4620      	mov	r0, r4
 800e5ce:	bd30      	pop	{r4, r5, pc}
 800e5d0:	20010394 	.word	0x20010394
 800e5d4:	00000000 	.word	0x00000000

0800e5d8 <rmw_uxrce_clean_expired_static_input_buffer>:
 800e5d8:	4b3d      	ldr	r3, [pc, #244]	; (800e6d0 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800e5da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5de:	681f      	ldr	r7, [r3, #0]
 800e5e0:	ed2d 8b06 	vpush	{d8-d10}
 800e5e4:	b08d      	sub	sp, #52	; 0x34
 800e5e6:	f00b f8d1 	bl	801978c <rmw_uros_epoch_nanos>
 800e5ea:	2f00      	cmp	r7, #0
 800e5ec:	d05d      	beq.n	800e6aa <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800e5ee:	46b8      	mov	r8, r7
 800e5f0:	4681      	mov	r9, r0
 800e5f2:	468a      	mov	sl, r1
 800e5f4:	ac04      	add	r4, sp, #16
 800e5f6:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800e5fa:	f895 3820 	ldrb.w	r3, [r5, #2080]	; 0x820
 800e5fe:	2b04      	cmp	r3, #4
 800e600:	ed9f 8b2d 	vldr	d8, [pc, #180]	; 800e6b8 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800e604:	ed9f ab2e 	vldr	d10, [pc, #184]	; 800e6c0 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800e608:	ed9f 9b2f 	vldr	d9, [pc, #188]	; 800e6c8 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800e60c:	d03f      	beq.n	800e68e <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800e60e:	2b05      	cmp	r3, #5
 800e610:	d044      	beq.n	800e69c <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800e612:	2b03      	cmp	r3, #3
 800e614:	d03b      	beq.n	800e68e <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800e616:	ed8d 8b04 	vstr	d8, [sp, #16]
 800e61a:	ed8d ab06 	vstr	d10, [sp, #24]
 800e61e:	ab08      	add	r3, sp, #32
 800e620:	ed8d 8b08 	vstr	d8, [sp, #32]
 800e624:	ed8d 8b0a 	vstr	d8, [sp, #40]	; 0x28
 800e628:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e62a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800e62e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800e632:	f009 fc91 	bl	8017f58 <rmw_time_equal>
 800e636:	b118      	cbz	r0, 800e640 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800e638:	ed8d 9b04 	vstr	d9, [sp, #16]
 800e63c:	ed8d 8b06 	vstr	d8, [sp, #24]
 800e640:	f8d5 6818 	ldr.w	r6, [r5, #2072]	; 0x818
 800e644:	f505 6502 	add.w	r5, r5, #2080	; 0x820
 800e648:	f855 7c04 	ldr.w	r7, [r5, #-4]
 800e64c:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800e650:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800e654:	f009 fcd6 	bl	8018004 <rmw_time_total_nsec>
 800e658:	1830      	adds	r0, r6, r0
 800e65a:	eb47 0101 	adc.w	r1, r7, r1
 800e65e:	4548      	cmp	r0, r9
 800e660:	eb71 030a 	sbcs.w	r3, r1, sl
 800e664:	db05      	blt.n	800e672 <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800e666:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800e66a:	4591      	cmp	r9, r2
 800e66c:	eb7a 0303 	sbcs.w	r3, sl, r3
 800e670:	da03      	bge.n	800e67a <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800e672:	4641      	mov	r1, r8
 800e674:	4816      	ldr	r0, [pc, #88]	; (800e6d0 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800e676:	f009 fe5d 	bl	8018334 <put_memory>
 800e67a:	f1bb 0f00 	cmp.w	fp, #0
 800e67e:	d014      	beq.n	800e6aa <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800e680:	46d8      	mov	r8, fp
 800e682:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800e686:	f895 3820 	ldrb.w	r3, [r5, #2080]	; 0x820
 800e68a:	2b04      	cmp	r3, #4
 800e68c:	d1bf      	bne.n	800e60e <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 800e68e:	f8d5 3814 	ldr.w	r3, [r5, #2068]	; 0x814
 800e692:	3340      	adds	r3, #64	; 0x40
 800e694:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e696:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800e69a:	e7c0      	b.n	800e61e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800e69c:	f8d5 3814 	ldr.w	r3, [r5, #2068]	; 0x814
 800e6a0:	3348      	adds	r3, #72	; 0x48
 800e6a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e6a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800e6a8:	e7b9      	b.n	800e61e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800e6aa:	b00d      	add	sp, #52	; 0x34
 800e6ac:	ecbd 8b06 	vpop	{d8-d10}
 800e6b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6b4:	f3af 8000 	nop.w
	...
 800e6c0:	00000001 	.word	0x00000001
 800e6c4:	00000000 	.word	0x00000000
 800e6c8:	0000001e 	.word	0x0000001e
 800e6cc:	00000000 	.word	0x00000000
 800e6d0:	20010394 	.word	0x20010394

0800e6d4 <run_xrce_session>:
 800e6d4:	b510      	push	{r4, lr}
 800e6d6:	788c      	ldrb	r4, [r1, #2]
 800e6d8:	b086      	sub	sp, #24
 800e6da:	2c01      	cmp	r4, #1
 800e6dc:	f8ad 200e 	strh.w	r2, [sp, #14]
 800e6e0:	d00c      	beq.n	800e6fc <run_xrce_session+0x28>
 800e6e2:	2401      	movs	r4, #1
 800e6e4:	4619      	mov	r1, r3
 800e6e6:	f10d 020e 	add.w	r2, sp, #14
 800e6ea:	f10d 0317 	add.w	r3, sp, #23
 800e6ee:	9400      	str	r4, [sp, #0]
 800e6f0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e6f4:	f003 f830 	bl	8011758 <uxr_run_session_until_all_status>
 800e6f8:	b006      	add	sp, #24
 800e6fa:	bd10      	pop	{r4, pc}
 800e6fc:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e700:	f002 fc4c 	bl	8010f9c <uxr_flash_output_streams>
 800e704:	4620      	mov	r0, r4
 800e706:	b006      	add	sp, #24
 800e708:	bd10      	pop	{r4, pc}
 800e70a:	bf00      	nop

0800e70c <convert_qos_profile>:
 800e70c:	7a4a      	ldrb	r2, [r1, #9]
 800e70e:	f891 c008 	ldrb.w	ip, [r1, #8]
 800e712:	2a02      	cmp	r2, #2
 800e714:	bf18      	it	ne
 800e716:	2200      	movne	r2, #0
 800e718:	7002      	strb	r2, [r0, #0]
 800e71a:	f1ac 0202 	sub.w	r2, ip, #2
 800e71e:	fab2 f282 	clz	r2, r2
 800e722:	0952      	lsrs	r2, r2, #5
 800e724:	7042      	strb	r2, [r0, #1]
 800e726:	780a      	ldrb	r2, [r1, #0]
 800e728:	8889      	ldrh	r1, [r1, #4]
 800e72a:	f1a2 0202 	sub.w	r2, r2, #2
 800e72e:	8081      	strh	r1, [r0, #4]
 800e730:	fab2 f282 	clz	r2, r2
 800e734:	0952      	lsrs	r2, r2, #5
 800e736:	7082      	strb	r2, [r0, #2]
 800e738:	4770      	bx	lr
 800e73a:	bf00      	nop

0800e73c <generate_service_topics>:
 800e73c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e73e:	461d      	mov	r5, r3
 800e740:	b083      	sub	sp, #12
 800e742:	4606      	mov	r6, r0
 800e744:	4c11      	ldr	r4, [pc, #68]	; (800e78c <generate_service_topics+0x50>)
 800e746:	4608      	mov	r0, r1
 800e748:	4b11      	ldr	r3, [pc, #68]	; (800e790 <generate_service_topics+0x54>)
 800e74a:	4617      	mov	r7, r2
 800e74c:	4629      	mov	r1, r5
 800e74e:	4a11      	ldr	r2, [pc, #68]	; (800e794 <generate_service_topics+0x58>)
 800e750:	9401      	str	r4, [sp, #4]
 800e752:	9600      	str	r6, [sp, #0]
 800e754:	f00d ff1c 	bl	801c590 <sniprintf>
 800e758:	4a0f      	ldr	r2, [pc, #60]	; (800e798 <generate_service_topics+0x5c>)
 800e75a:	4604      	mov	r4, r0
 800e75c:	4b0f      	ldr	r3, [pc, #60]	; (800e79c <generate_service_topics+0x60>)
 800e75e:	9201      	str	r2, [sp, #4]
 800e760:	4638      	mov	r0, r7
 800e762:	4a0c      	ldr	r2, [pc, #48]	; (800e794 <generate_service_topics+0x58>)
 800e764:	4629      	mov	r1, r5
 800e766:	9600      	str	r6, [sp, #0]
 800e768:	f00d ff12 	bl	801c590 <sniprintf>
 800e76c:	2c00      	cmp	r4, #0
 800e76e:	bfa8      	it	ge
 800e770:	42a5      	cmpge	r5, r4
 800e772:	bfcc      	ite	gt
 800e774:	2401      	movgt	r4, #1
 800e776:	2400      	movle	r4, #0
 800e778:	dd05      	ble.n	800e786 <generate_service_topics+0x4a>
 800e77a:	2800      	cmp	r0, #0
 800e77c:	bfa8      	it	ge
 800e77e:	4285      	cmpge	r5, r0
 800e780:	bfcc      	ite	gt
 800e782:	2401      	movgt	r4, #1
 800e784:	2400      	movle	r4, #0
 800e786:	4620      	mov	r0, r4
 800e788:	b003      	add	sp, #12
 800e78a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e78c:	0801e5e0 	.word	0x0801e5e0
 800e790:	0801e5dc 	.word	0x0801e5dc
 800e794:	0801e5b8 	.word	0x0801e5b8
 800e798:	0801e5d4 	.word	0x0801e5d4
 800e79c:	0801e5d0 	.word	0x0801e5d0

0800e7a0 <generate_service_types>:
 800e7a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7a4:	4606      	mov	r6, r0
 800e7a6:	b087      	sub	sp, #28
 800e7a8:	461c      	mov	r4, r3
 800e7aa:	6883      	ldr	r3, [r0, #8]
 800e7ac:	460d      	mov	r5, r1
 800e7ae:	4617      	mov	r7, r2
 800e7b0:	4798      	blx	r3
 800e7b2:	68f3      	ldr	r3, [r6, #12]
 800e7b4:	4606      	mov	r6, r0
 800e7b6:	4798      	blx	r3
 800e7b8:	2300      	movs	r3, #0
 800e7ba:	f8d0 b004 	ldr.w	fp, [r0, #4]
 800e7be:	6872      	ldr	r2, [r6, #4]
 800e7c0:	702b      	strb	r3, [r5, #0]
 800e7c2:	6813      	ldr	r3, [r2, #0]
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d03f      	beq.n	800e848 <generate_service_types+0xa8>
 800e7c8:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800e85c <generate_service_types+0xbc>
 800e7cc:	4649      	mov	r1, r9
 800e7ce:	f8df 8094 	ldr.w	r8, [pc, #148]	; 800e864 <generate_service_types+0xc4>
 800e7d2:	4628      	mov	r0, r5
 800e7d4:	f8df a090 	ldr.w	sl, [pc, #144]	; 800e868 <generate_service_types+0xc8>
 800e7d8:	f8cd 8014 	str.w	r8, [sp, #20]
 800e7dc:	6852      	ldr	r2, [r2, #4]
 800e7de:	9100      	str	r1, [sp, #0]
 800e7e0:	4621      	mov	r1, r4
 800e7e2:	f8cd 8008 	str.w	r8, [sp, #8]
 800e7e6:	f8cd a004 	str.w	sl, [sp, #4]
 800e7ea:	e9cd 9203 	strd	r9, r2, [sp, #12]
 800e7ee:	4a1a      	ldr	r2, [pc, #104]	; (800e858 <generate_service_types+0xb8>)
 800e7f0:	f00d fece 	bl	801c590 <sniprintf>
 800e7f4:	2300      	movs	r3, #0
 800e7f6:	42a0      	cmp	r0, r4
 800e7f8:	ea6f 0600 	mvn.w	r6, r0
 800e7fc:	703b      	strb	r3, [r7, #0]
 800e7fe:	f8db 3000 	ldr.w	r3, [fp]
 800e802:	ea4f 76d6 	mov.w	r6, r6, lsr #31
 800e806:	bfac      	ite	ge
 800e808:	2500      	movge	r5, #0
 800e80a:	2501      	movlt	r5, #1
 800e80c:	b30b      	cbz	r3, 800e852 <generate_service_types+0xb2>
 800e80e:	4a13      	ldr	r2, [pc, #76]	; (800e85c <generate_service_types+0xbc>)
 800e810:	f8cd 8014 	str.w	r8, [sp, #20]
 800e814:	402e      	ands	r6, r5
 800e816:	f8db 1004 	ldr.w	r1, [fp, #4]
 800e81a:	4638      	mov	r0, r7
 800e81c:	9104      	str	r1, [sp, #16]
 800e81e:	4621      	mov	r1, r4
 800e820:	e9cd 2a00 	strd	r2, sl, [sp]
 800e824:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800e828:	4a0b      	ldr	r2, [pc, #44]	; (800e858 <generate_service_types+0xb8>)
 800e82a:	f00d feb1 	bl	801c590 <sniprintf>
 800e82e:	2800      	cmp	r0, #0
 800e830:	bfb4      	ite	lt
 800e832:	2600      	movlt	r6, #0
 800e834:	f006 0601 	andge.w	r6, r6, #1
 800e838:	42a0      	cmp	r0, r4
 800e83a:	bfac      	ite	ge
 800e83c:	2000      	movge	r0, #0
 800e83e:	f006 0001 	andlt.w	r0, r6, #1
 800e842:	b007      	add	sp, #28
 800e844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e848:	4b05      	ldr	r3, [pc, #20]	; (800e860 <generate_service_types+0xc0>)
 800e84a:	f8df 9010 	ldr.w	r9, [pc, #16]	; 800e85c <generate_service_types+0xbc>
 800e84e:	4619      	mov	r1, r3
 800e850:	e7bd      	b.n	800e7ce <generate_service_types+0x2e>
 800e852:	4b03      	ldr	r3, [pc, #12]	; (800e860 <generate_service_types+0xc0>)
 800e854:	461a      	mov	r2, r3
 800e856:	e7db      	b.n	800e810 <generate_service_types+0x70>
 800e858:	0801e5b0 	.word	0x0801e5b0
 800e85c:	0801e5ac 	.word	0x0801e5ac
 800e860:	0801ee38 	.word	0x0801ee38
 800e864:	0801e5c0 	.word	0x0801e5c0
 800e868:	0801e5c4 	.word	0x0801e5c4

0800e86c <generate_type_name>:
 800e86c:	2300      	movs	r3, #0
 800e86e:	b530      	push	{r4, r5, lr}
 800e870:	700b      	strb	r3, [r1, #0]
 800e872:	b087      	sub	sp, #28
 800e874:	6803      	ldr	r3, [r0, #0]
 800e876:	4614      	mov	r4, r2
 800e878:	b1bb      	cbz	r3, 800e8aa <generate_type_name+0x3e>
 800e87a:	4a0e      	ldr	r2, [pc, #56]	; (800e8b4 <generate_type_name+0x48>)
 800e87c:	4615      	mov	r5, r2
 800e87e:	9500      	str	r5, [sp, #0]
 800e880:	9203      	str	r2, [sp, #12]
 800e882:	4d0d      	ldr	r5, [pc, #52]	; (800e8b8 <generate_type_name+0x4c>)
 800e884:	6842      	ldr	r2, [r0, #4]
 800e886:	4608      	mov	r0, r1
 800e888:	490c      	ldr	r1, [pc, #48]	; (800e8bc <generate_type_name+0x50>)
 800e88a:	9204      	str	r2, [sp, #16]
 800e88c:	9105      	str	r1, [sp, #20]
 800e88e:	9102      	str	r1, [sp, #8]
 800e890:	4621      	mov	r1, r4
 800e892:	4a0b      	ldr	r2, [pc, #44]	; (800e8c0 <generate_type_name+0x54>)
 800e894:	9501      	str	r5, [sp, #4]
 800e896:	f00d fe7b 	bl	801c590 <sniprintf>
 800e89a:	2800      	cmp	r0, #0
 800e89c:	bfa8      	it	ge
 800e89e:	4284      	cmpge	r4, r0
 800e8a0:	bfcc      	ite	gt
 800e8a2:	2001      	movgt	r0, #1
 800e8a4:	2000      	movle	r0, #0
 800e8a6:	b007      	add	sp, #28
 800e8a8:	bd30      	pop	{r4, r5, pc}
 800e8aa:	4b06      	ldr	r3, [pc, #24]	; (800e8c4 <generate_type_name+0x58>)
 800e8ac:	4a01      	ldr	r2, [pc, #4]	; (800e8b4 <generate_type_name+0x48>)
 800e8ae:	461d      	mov	r5, r3
 800e8b0:	e7e5      	b.n	800e87e <generate_type_name+0x12>
 800e8b2:	bf00      	nop
 800e8b4:	0801e5ac 	.word	0x0801e5ac
 800e8b8:	0801e5c4 	.word	0x0801e5c4
 800e8bc:	0801e5c0 	.word	0x0801e5c0
 800e8c0:	0801e5b0 	.word	0x0801e5b0
 800e8c4:	0801ee38 	.word	0x0801ee38

0800e8c8 <generate_topic_name>:
 800e8c8:	b530      	push	{r4, r5, lr}
 800e8ca:	4614      	mov	r4, r2
 800e8cc:	b083      	sub	sp, #12
 800e8ce:	4605      	mov	r5, r0
 800e8d0:	4b07      	ldr	r3, [pc, #28]	; (800e8f0 <generate_topic_name+0x28>)
 800e8d2:	4a08      	ldr	r2, [pc, #32]	; (800e8f4 <generate_topic_name+0x2c>)
 800e8d4:	4608      	mov	r0, r1
 800e8d6:	9500      	str	r5, [sp, #0]
 800e8d8:	4621      	mov	r1, r4
 800e8da:	f00d fe59 	bl	801c590 <sniprintf>
 800e8de:	2800      	cmp	r0, #0
 800e8e0:	bfa8      	it	ge
 800e8e2:	4284      	cmpge	r4, r0
 800e8e4:	bfcc      	ite	gt
 800e8e6:	2001      	movgt	r0, #1
 800e8e8:	2000      	movle	r0, #0
 800e8ea:	b003      	add	sp, #12
 800e8ec:	bd30      	pop	{r4, r5, pc}
 800e8ee:	bf00      	nop
 800e8f0:	0801e5e8 	.word	0x0801e5e8
 800e8f4:	0801e5c8 	.word	0x0801e5c8

0800e8f8 <is_uxrce_rmw_identifier_valid>:
 800e8f8:	b510      	push	{r4, lr}
 800e8fa:	4604      	mov	r4, r0
 800e8fc:	b140      	cbz	r0, 800e910 <is_uxrce_rmw_identifier_valid+0x18>
 800e8fe:	f009 fd8f 	bl	8018420 <rmw_get_implementation_identifier>
 800e902:	4601      	mov	r1, r0
 800e904:	4620      	mov	r0, r4
 800e906:	f7f1 fc9b 	bl	8000240 <strcmp>
 800e90a:	fab0 f080 	clz	r0, r0
 800e90e:	0940      	lsrs	r0, r0, #5
 800e910:	bd10      	pop	{r4, pc}
 800e912:	bf00      	nop

0800e914 <get_message_typesupport_handle>:
 800e914:	6883      	ldr	r3, [r0, #8]
 800e916:	4718      	bx	r3

0800e918 <get_message_typesupport_handle_function>:
 800e918:	b510      	push	{r4, lr}
 800e91a:	4604      	mov	r4, r0
 800e91c:	6800      	ldr	r0, [r0, #0]
 800e91e:	f7f1 fc8f 	bl	8000240 <strcmp>
 800e922:	2800      	cmp	r0, #0
 800e924:	bf0c      	ite	eq
 800e926:	4620      	moveq	r0, r4
 800e928:	2000      	movne	r0, #0
 800e92a:	bd10      	pop	{r4, pc}

0800e92c <get_service_typesupport_handle>:
 800e92c:	6883      	ldr	r3, [r0, #8]
 800e92e:	4718      	bx	r3

0800e930 <get_service_typesupport_handle_function>:
 800e930:	b510      	push	{r4, lr}
 800e932:	4604      	mov	r4, r0
 800e934:	6800      	ldr	r0, [r0, #0]
 800e936:	f7f1 fc83 	bl	8000240 <strcmp>
 800e93a:	2800      	cmp	r0, #0
 800e93c:	bf0c      	ite	eq
 800e93e:	4620      	moveq	r0, r4
 800e940:	2000      	movne	r0, #0
 800e942:	bd10      	pop	{r4, pc}

0800e944 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 800e944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e948:	6805      	ldr	r5, [r0, #0]
 800e94a:	4604      	mov	r4, r0
 800e94c:	460e      	mov	r6, r1
 800e94e:	4628      	mov	r0, r5
 800e950:	f7f1 fc76 	bl	8000240 <strcmp>
 800e954:	b1c8      	cbz	r0, 800e98a <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 800e956:	4b11      	ldr	r3, [pc, #68]	; (800e99c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	429d      	cmp	r5, r3
 800e95c:	d112      	bne.n	800e984 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800e95e:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800e962:	f8d8 4000 	ldr.w	r4, [r8]
 800e966:	b16c      	cbz	r4, 800e984 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800e968:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800e96c:	2700      	movs	r7, #0
 800e96e:	3d04      	subs	r5, #4
 800e970:	4631      	mov	r1, r6
 800e972:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800e976:	f7f1 fc63 	bl	8000240 <strcmp>
 800e97a:	00bb      	lsls	r3, r7, #2
 800e97c:	b140      	cbz	r0, 800e990 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 800e97e:	3701      	adds	r7, #1
 800e980:	42bc      	cmp	r4, r7
 800e982:	d1f5      	bne.n	800e970 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 800e984:	2000      	movs	r0, #0
 800e986:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e98a:	4620      	mov	r0, r4
 800e98c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e990:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e994:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e998:	58d3      	ldr	r3, [r2, r3]
 800e99a:	4718      	bx	r3
 800e99c:	20000a10 	.word	0x20000a10

0800e9a0 <rosidl_typesupport_c__get_service_typesupport_handle_function>:
 800e9a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9a4:	6805      	ldr	r5, [r0, #0]
 800e9a6:	4604      	mov	r4, r0
 800e9a8:	460e      	mov	r6, r1
 800e9aa:	4628      	mov	r0, r5
 800e9ac:	f7f1 fc48 	bl	8000240 <strcmp>
 800e9b0:	b1c8      	cbz	r0, 800e9e6 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x46>
 800e9b2:	4b11      	ldr	r3, [pc, #68]	; (800e9f8 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x58>)
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	429d      	cmp	r5, r3
 800e9b8:	d112      	bne.n	800e9e0 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 800e9ba:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800e9be:	f8d8 4000 	ldr.w	r4, [r8]
 800e9c2:	b16c      	cbz	r4, 800e9e0 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 800e9c4:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800e9c8:	2700      	movs	r7, #0
 800e9ca:	3d04      	subs	r5, #4
 800e9cc:	4631      	mov	r1, r6
 800e9ce:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800e9d2:	f7f1 fc35 	bl	8000240 <strcmp>
 800e9d6:	00bb      	lsls	r3, r7, #2
 800e9d8:	b140      	cbz	r0, 800e9ec <rosidl_typesupport_c__get_service_typesupport_handle_function+0x4c>
 800e9da:	3701      	adds	r7, #1
 800e9dc:	42bc      	cmp	r4, r7
 800e9de:	d1f5      	bne.n	800e9cc <rosidl_typesupport_c__get_service_typesupport_handle_function+0x2c>
 800e9e0:	2000      	movs	r0, #0
 800e9e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9e6:	4620      	mov	r0, r4
 800e9e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9ec:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e9f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e9f4:	58d3      	ldr	r3, [r2, r3]
 800e9f6:	4718      	bx	r3
 800e9f8:	20000a10 	.word	0x20000a10

0800e9fc <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__size_function__ServiceEventInfo__client_gid>:
 800e9fc:	2010      	movs	r0, #16
 800e9fe:	4770      	bx	lr

0800ea00 <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__get_const_function__ServiceEventInfo__client_gid>:
 800ea00:	4408      	add	r0, r1
 800ea02:	4770      	bx	lr

0800ea04 <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__fetch_function__ServiceEventInfo__client_gid>:
 800ea04:	5c43      	ldrb	r3, [r0, r1]
 800ea06:	7013      	strb	r3, [r2, #0]
 800ea08:	4770      	bx	lr
 800ea0a:	bf00      	nop

0800ea0c <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__assign_function__ServiceEventInfo__client_gid>:
 800ea0c:	7813      	ldrb	r3, [r2, #0]
 800ea0e:	5443      	strb	r3, [r0, r1]
 800ea10:	4770      	bx	lr
 800ea12:	bf00      	nop

0800ea14 <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__ServiceEventInfo_init_function>:
 800ea14:	f00a bf10 	b.w	8019838 <service_msgs__msg__ServiceEventInfo__init>

0800ea18 <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__ServiceEventInfo_fini_function>:
 800ea18:	f00a bf20 	b.w	801985c <service_msgs__msg__ServiceEventInfo__fini>

0800ea1c <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__get_function__ServiceEventInfo__client_gid>:
 800ea1c:	4408      	add	r0, r1
 800ea1e:	4770      	bx	lr

0800ea20 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>:
 800ea20:	b508      	push	{r3, lr}
 800ea22:	f000 f8db 	bl	800ebdc <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800ea26:	4b06      	ldr	r3, [pc, #24]	; (800ea40 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x20>)
 800ea28:	4906      	ldr	r1, [pc, #24]	; (800ea44 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x24>)
 800ea2a:	681a      	ldr	r2, [r3, #0]
 800ea2c:	6488      	str	r0, [r1, #72]	; 0x48
 800ea2e:	b10a      	cbz	r2, 800ea34 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x14>
 800ea30:	4803      	ldr	r0, [pc, #12]	; (800ea40 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x20>)
 800ea32:	bd08      	pop	{r3, pc}
 800ea34:	4a04      	ldr	r2, [pc, #16]	; (800ea48 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x28>)
 800ea36:	4802      	ldr	r0, [pc, #8]	; (800ea40 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x20>)
 800ea38:	6812      	ldr	r2, [r2, #0]
 800ea3a:	601a      	str	r2, [r3, #0]
 800ea3c:	bd08      	pop	{r3, pc}
 800ea3e:	bf00      	nop
 800ea40:	20000b08 	.word	0x20000b08
 800ea44:	20000a18 	.word	0x20000a18
 800ea48:	20000a14 	.word	0x20000a14

0800ea4c <get_serialized_size_service_msgs__msg__ServiceEventInfo>:
 800ea4c:	b5b0      	push	{r4, r5, r7, lr}
 800ea4e:	4604      	mov	r4, r0
 800ea50:	b1d8      	cbz	r0, 800ea8a <get_serialized_size_service_msgs__msg__ServiceEventInfo+0x3e>
 800ea52:	460d      	mov	r5, r1
 800ea54:	2101      	movs	r1, #1
 800ea56:	4628      	mov	r0, r5
 800ea58:	f001 fea4 	bl	80107a4 <ucdr_alignment>
 800ea5c:	1c6b      	adds	r3, r5, #1
 800ea5e:	4607      	mov	r7, r0
 800ea60:	1d20      	adds	r0, r4, #4
 800ea62:	f1c5 0508 	rsb	r5, r5, #8
 800ea66:	441f      	add	r7, r3
 800ea68:	4639      	mov	r1, r7
 800ea6a:	f000 f8c5 	bl	800ebf8 <get_serialized_size_builtin_interfaces__msg__Time>
 800ea6e:	4407      	add	r7, r0
 800ea70:	2101      	movs	r1, #1
 800ea72:	4638      	mov	r0, r7
 800ea74:	f001 fe96 	bl	80107a4 <ucdr_alignment>
 800ea78:	f100 0410 	add.w	r4, r0, #16
 800ea7c:	2108      	movs	r1, #8
 800ea7e:	443c      	add	r4, r7
 800ea80:	4620      	mov	r0, r4
 800ea82:	f001 fe8f 	bl	80107a4 <ucdr_alignment>
 800ea86:	4428      	add	r0, r5
 800ea88:	4420      	add	r0, r4
 800ea8a:	bdb0      	pop	{r4, r5, r7, pc}

0800ea8c <_ServiceEventInfo__cdr_deserialize>:
 800ea8c:	b538      	push	{r3, r4, r5, lr}
 800ea8e:	460c      	mov	r4, r1
 800ea90:	b1b9      	cbz	r1, 800eac2 <_ServiceEventInfo__cdr_deserialize+0x36>
 800ea92:	4605      	mov	r5, r0
 800ea94:	f000 fb38 	bl	800f108 <ucdr_deserialize_uint8_t>
 800ea98:	f000 f912 	bl	800ecc0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800ea9c:	4603      	mov	r3, r0
 800ea9e:	1d21      	adds	r1, r4, #4
 800eaa0:	4628      	mov	r0, r5
 800eaa2:	685b      	ldr	r3, [r3, #4]
 800eaa4:	68db      	ldr	r3, [r3, #12]
 800eaa6:	4798      	blx	r3
 800eaa8:	f104 010c 	add.w	r1, r4, #12
 800eaac:	4628      	mov	r0, r5
 800eaae:	2210      	movs	r2, #16
 800eab0:	f000 f9d4 	bl	800ee5c <ucdr_deserialize_array_uint8_t>
 800eab4:	f104 0120 	add.w	r1, r4, #32
 800eab8:	4628      	mov	r0, r5
 800eaba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eabe:	f001 bc2b 	b.w	8010318 <ucdr_deserialize_int64_t>
 800eac2:	4608      	mov	r0, r1
 800eac4:	bd38      	pop	{r3, r4, r5, pc}
 800eac6:	bf00      	nop

0800eac8 <_ServiceEventInfo__cdr_serialize>:
 800eac8:	b1e8      	cbz	r0, 800eb06 <_ServiceEventInfo__cdr_serialize+0x3e>
 800eaca:	b570      	push	{r4, r5, r6, lr}
 800eacc:	4606      	mov	r6, r0
 800eace:	460d      	mov	r5, r1
 800ead0:	4604      	mov	r4, r0
 800ead2:	4608      	mov	r0, r1
 800ead4:	f816 1b04 	ldrb.w	r1, [r6], #4
 800ead8:	f000 fb00 	bl	800f0dc <ucdr_serialize_uint8_t>
 800eadc:	f000 f8f0 	bl	800ecc0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800eae0:	4603      	mov	r3, r0
 800eae2:	4629      	mov	r1, r5
 800eae4:	4630      	mov	r0, r6
 800eae6:	685b      	ldr	r3, [r3, #4]
 800eae8:	689b      	ldr	r3, [r3, #8]
 800eaea:	4798      	blx	r3
 800eaec:	2210      	movs	r2, #16
 800eaee:	f104 010c 	add.w	r1, r4, #12
 800eaf2:	4628      	mov	r0, r5
 800eaf4:	f000 f94e 	bl	800ed94 <ucdr_serialize_array_uint8_t>
 800eaf8:	4628      	mov	r0, r5
 800eafa:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 800eafe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800eb02:	f001 bb39 	b.w	8010178 <ucdr_serialize_int64_t>
 800eb06:	4770      	bx	lr

0800eb08 <_ServiceEventInfo__get_serialized_size>:
 800eb08:	b538      	push	{r3, r4, r5, lr}
 800eb0a:	4604      	mov	r4, r0
 800eb0c:	b1b0      	cbz	r0, 800eb3c <_ServiceEventInfo__get_serialized_size+0x34>
 800eb0e:	2101      	movs	r1, #1
 800eb10:	2000      	movs	r0, #0
 800eb12:	f001 fe47 	bl	80107a4 <ucdr_alignment>
 800eb16:	4605      	mov	r5, r0
 800eb18:	1d20      	adds	r0, r4, #4
 800eb1a:	3501      	adds	r5, #1
 800eb1c:	4629      	mov	r1, r5
 800eb1e:	f000 f86b 	bl	800ebf8 <get_serialized_size_builtin_interfaces__msg__Time>
 800eb22:	4405      	add	r5, r0
 800eb24:	2101      	movs	r1, #1
 800eb26:	4628      	mov	r0, r5
 800eb28:	f001 fe3c 	bl	80107a4 <ucdr_alignment>
 800eb2c:	3010      	adds	r0, #16
 800eb2e:	2108      	movs	r1, #8
 800eb30:	4405      	add	r5, r0
 800eb32:	4628      	mov	r0, r5
 800eb34:	f001 fe36 	bl	80107a4 <ucdr_alignment>
 800eb38:	3008      	adds	r0, #8
 800eb3a:	4428      	add	r0, r5
 800eb3c:	bd38      	pop	{r3, r4, r5, pc}
 800eb3e:	bf00      	nop

0800eb40 <_ServiceEventInfo__max_serialized_size>:
 800eb40:	b550      	push	{r4, r6, lr}
 800eb42:	2601      	movs	r6, #1
 800eb44:	b083      	sub	sp, #12
 800eb46:	2000      	movs	r0, #0
 800eb48:	4631      	mov	r1, r6
 800eb4a:	f88d 6007 	strb.w	r6, [sp, #7]
 800eb4e:	f001 fe29 	bl	80107a4 <ucdr_alignment>
 800eb52:	4604      	mov	r4, r0
 800eb54:	f10d 0007 	add.w	r0, sp, #7
 800eb58:	4434      	add	r4, r6
 800eb5a:	4621      	mov	r1, r4
 800eb5c:	f000 f89c 	bl	800ec98 <max_serialized_size_builtin_interfaces__msg__Time>
 800eb60:	4404      	add	r4, r0
 800eb62:	4631      	mov	r1, r6
 800eb64:	4620      	mov	r0, r4
 800eb66:	f001 fe1d 	bl	80107a4 <ucdr_alignment>
 800eb6a:	3010      	adds	r0, #16
 800eb6c:	2108      	movs	r1, #8
 800eb6e:	4404      	add	r4, r0
 800eb70:	4620      	mov	r0, r4
 800eb72:	f001 fe17 	bl	80107a4 <ucdr_alignment>
 800eb76:	3008      	adds	r0, #8
 800eb78:	4420      	add	r0, r4
 800eb7a:	b003      	add	sp, #12
 800eb7c:	bd50      	pop	{r4, r6, pc}
 800eb7e:	bf00      	nop

0800eb80 <max_serialized_size_service_msgs__msg__ServiceEventInfo>:
 800eb80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb84:	f04f 0801 	mov.w	r8, #1
 800eb88:	460c      	mov	r4, r1
 800eb8a:	4607      	mov	r7, r0
 800eb8c:	4641      	mov	r1, r8
 800eb8e:	4620      	mov	r0, r4
 800eb90:	f887 8000 	strb.w	r8, [r7]
 800eb94:	eb04 0608 	add.w	r6, r4, r8
 800eb98:	f001 fe04 	bl	80107a4 <ucdr_alignment>
 800eb9c:	4605      	mov	r5, r0
 800eb9e:	4638      	mov	r0, r7
 800eba0:	f1c4 0408 	rsb	r4, r4, #8
 800eba4:	4435      	add	r5, r6
 800eba6:	4629      	mov	r1, r5
 800eba8:	f000 f876 	bl	800ec98 <max_serialized_size_builtin_interfaces__msg__Time>
 800ebac:	4405      	add	r5, r0
 800ebae:	4641      	mov	r1, r8
 800ebb0:	4628      	mov	r0, r5
 800ebb2:	f001 fdf7 	bl	80107a4 <ucdr_alignment>
 800ebb6:	3010      	adds	r0, #16
 800ebb8:	2108      	movs	r1, #8
 800ebba:	4405      	add	r5, r0
 800ebbc:	4628      	mov	r0, r5
 800ebbe:	f001 fdf1 	bl	80107a4 <ucdr_alignment>
 800ebc2:	4420      	add	r0, r4
 800ebc4:	4428      	add	r0, r5
 800ebc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ebca:	bf00      	nop

0800ebcc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>:
 800ebcc:	4800      	ldr	r0, [pc, #0]	; (800ebd0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x4>)
 800ebce:	4770      	bx	lr
 800ebd0:	20000b20 	.word	0x20000b20

0800ebd4 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function>:
 800ebd4:	f00a be78 	b.w	80198c8 <builtin_interfaces__msg__Time__init>

0800ebd8 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function>:
 800ebd8:	f00a be7a 	b.w	80198d0 <builtin_interfaces__msg__Time__fini>

0800ebdc <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800ebdc:	4b04      	ldr	r3, [pc, #16]	; (800ebf0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800ebde:	681a      	ldr	r2, [r3, #0]
 800ebe0:	b10a      	cbz	r2, 800ebe6 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0xa>
 800ebe2:	4803      	ldr	r0, [pc, #12]	; (800ebf0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800ebe4:	4770      	bx	lr
 800ebe6:	4a03      	ldr	r2, [pc, #12]	; (800ebf4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x18>)
 800ebe8:	4801      	ldr	r0, [pc, #4]	; (800ebf0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800ebea:	6812      	ldr	r2, [r2, #0]
 800ebec:	601a      	str	r2, [r3, #0]
 800ebee:	4770      	bx	lr
 800ebf0:	20000bcc 	.word	0x20000bcc
 800ebf4:	20000a14 	.word	0x20000a14

0800ebf8 <get_serialized_size_builtin_interfaces__msg__Time>:
 800ebf8:	b180      	cbz	r0, 800ec1c <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 800ebfa:	b538      	push	{r3, r4, r5, lr}
 800ebfc:	460d      	mov	r5, r1
 800ebfe:	2104      	movs	r1, #4
 800ec00:	4628      	mov	r0, r5
 800ec02:	f001 fdcf 	bl	80107a4 <ucdr_alignment>
 800ec06:	1d2b      	adds	r3, r5, #4
 800ec08:	f1c5 0504 	rsb	r5, r5, #4
 800ec0c:	2104      	movs	r1, #4
 800ec0e:	181c      	adds	r4, r3, r0
 800ec10:	4620      	mov	r0, r4
 800ec12:	f001 fdc7 	bl	80107a4 <ucdr_alignment>
 800ec16:	4428      	add	r0, r5
 800ec18:	4420      	add	r0, r4
 800ec1a:	bd38      	pop	{r3, r4, r5, pc}
 800ec1c:	4770      	bx	lr
 800ec1e:	bf00      	nop

0800ec20 <_Time__cdr_deserialize>:
 800ec20:	b538      	push	{r3, r4, r5, lr}
 800ec22:	460c      	mov	r4, r1
 800ec24:	b141      	cbz	r1, 800ec38 <_Time__cdr_deserialize+0x18>
 800ec26:	4605      	mov	r5, r0
 800ec28:	f001 fa16 	bl	8010058 <ucdr_deserialize_int32_t>
 800ec2c:	1d21      	adds	r1, r4, #4
 800ec2e:	4628      	mov	r0, r5
 800ec30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ec34:	f000 bd98 	b.w	800f768 <ucdr_deserialize_uint32_t>
 800ec38:	4608      	mov	r0, r1
 800ec3a:	bd38      	pop	{r3, r4, r5, pc}

0800ec3c <_Time__cdr_serialize>:
 800ec3c:	b160      	cbz	r0, 800ec58 <_Time__cdr_serialize+0x1c>
 800ec3e:	b538      	push	{r3, r4, r5, lr}
 800ec40:	460d      	mov	r5, r1
 800ec42:	4604      	mov	r4, r0
 800ec44:	6801      	ldr	r1, [r0, #0]
 800ec46:	4628      	mov	r0, r5
 800ec48:	f001 f96e 	bl	800ff28 <ucdr_serialize_int32_t>
 800ec4c:	6861      	ldr	r1, [r4, #4]
 800ec4e:	4628      	mov	r0, r5
 800ec50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ec54:	f000 bc58 	b.w	800f508 <ucdr_serialize_uint32_t>
 800ec58:	4770      	bx	lr
 800ec5a:	bf00      	nop

0800ec5c <_Time__get_serialized_size>:
 800ec5c:	b160      	cbz	r0, 800ec78 <_Time__get_serialized_size+0x1c>
 800ec5e:	2104      	movs	r1, #4
 800ec60:	2000      	movs	r0, #0
 800ec62:	b510      	push	{r4, lr}
 800ec64:	f001 fd9e 	bl	80107a4 <ucdr_alignment>
 800ec68:	2104      	movs	r1, #4
 800ec6a:	1844      	adds	r4, r0, r1
 800ec6c:	4620      	mov	r0, r4
 800ec6e:	f001 fd99 	bl	80107a4 <ucdr_alignment>
 800ec72:	3004      	adds	r0, #4
 800ec74:	4420      	add	r0, r4
 800ec76:	bd10      	pop	{r4, pc}
 800ec78:	4770      	bx	lr
 800ec7a:	bf00      	nop

0800ec7c <_Time__max_serialized_size>:
 800ec7c:	b510      	push	{r4, lr}
 800ec7e:	2104      	movs	r1, #4
 800ec80:	2000      	movs	r0, #0
 800ec82:	f001 fd8f 	bl	80107a4 <ucdr_alignment>
 800ec86:	2104      	movs	r1, #4
 800ec88:	1844      	adds	r4, r0, r1
 800ec8a:	4620      	mov	r0, r4
 800ec8c:	f001 fd8a 	bl	80107a4 <ucdr_alignment>
 800ec90:	3004      	adds	r0, #4
 800ec92:	4420      	add	r0, r4
 800ec94:	bd10      	pop	{r4, pc}
 800ec96:	bf00      	nop

0800ec98 <max_serialized_size_builtin_interfaces__msg__Time>:
 800ec98:	b538      	push	{r3, r4, r5, lr}
 800ec9a:	460c      	mov	r4, r1
 800ec9c:	2301      	movs	r3, #1
 800ec9e:	2104      	movs	r1, #4
 800eca0:	1d25      	adds	r5, r4, #4
 800eca2:	7003      	strb	r3, [r0, #0]
 800eca4:	4620      	mov	r0, r4
 800eca6:	f1c4 0404 	rsb	r4, r4, #4
 800ecaa:	f001 fd7b 	bl	80107a4 <ucdr_alignment>
 800ecae:	4405      	add	r5, r0
 800ecb0:	2104      	movs	r1, #4
 800ecb2:	4628      	mov	r0, r5
 800ecb4:	f001 fd76 	bl	80107a4 <ucdr_alignment>
 800ecb8:	4420      	add	r0, r4
 800ecba:	4428      	add	r0, r5
 800ecbc:	bd38      	pop	{r3, r4, r5, pc}
 800ecbe:	bf00      	nop

0800ecc0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800ecc0:	4800      	ldr	r0, [pc, #0]	; (800ecc4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 800ecc2:	4770      	bx	lr
 800ecc4:	20000be4 	.word	0x20000be4

0800ecc8 <ucdr_serialize_endian_array_char>:
 800ecc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eccc:	4619      	mov	r1, r3
 800ecce:	461f      	mov	r7, r3
 800ecd0:	4605      	mov	r5, r0
 800ecd2:	4690      	mov	r8, r2
 800ecd4:	f001 fd0e 	bl	80106f4 <ucdr_check_buffer_available_for>
 800ecd8:	b9e0      	cbnz	r0, 800ed14 <ucdr_serialize_endian_array_char+0x4c>
 800ecda:	463e      	mov	r6, r7
 800ecdc:	e00b      	b.n	800ecf6 <ucdr_serialize_endian_array_char+0x2e>
 800ecde:	4441      	add	r1, r8
 800ece0:	68a8      	ldr	r0, [r5, #8]
 800ece2:	4622      	mov	r2, r4
 800ece4:	1b36      	subs	r6, r6, r4
 800ece6:	f00d fe5e 	bl	801c9a6 <memcpy>
 800ecea:	68ab      	ldr	r3, [r5, #8]
 800ecec:	6928      	ldr	r0, [r5, #16]
 800ecee:	4423      	add	r3, r4
 800ecf0:	4420      	add	r0, r4
 800ecf2:	60ab      	str	r3, [r5, #8]
 800ecf4:	6128      	str	r0, [r5, #16]
 800ecf6:	4631      	mov	r1, r6
 800ecf8:	2201      	movs	r2, #1
 800ecfa:	4628      	mov	r0, r5
 800ecfc:	f001 fd84 	bl	8010808 <ucdr_check_final_buffer_behavior_array>
 800ed00:	1bb9      	subs	r1, r7, r6
 800ed02:	4604      	mov	r4, r0
 800ed04:	2800      	cmp	r0, #0
 800ed06:	d1ea      	bne.n	800ecde <ucdr_serialize_endian_array_char+0x16>
 800ed08:	2301      	movs	r3, #1
 800ed0a:	7da8      	ldrb	r0, [r5, #22]
 800ed0c:	756b      	strb	r3, [r5, #21]
 800ed0e:	4058      	eors	r0, r3
 800ed10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed14:	463a      	mov	r2, r7
 800ed16:	4641      	mov	r1, r8
 800ed18:	68a8      	ldr	r0, [r5, #8]
 800ed1a:	f00d fe44 	bl	801c9a6 <memcpy>
 800ed1e:	68aa      	ldr	r2, [r5, #8]
 800ed20:	692b      	ldr	r3, [r5, #16]
 800ed22:	443a      	add	r2, r7
 800ed24:	443b      	add	r3, r7
 800ed26:	60aa      	str	r2, [r5, #8]
 800ed28:	612b      	str	r3, [r5, #16]
 800ed2a:	e7ed      	b.n	800ed08 <ucdr_serialize_endian_array_char+0x40>

0800ed2c <ucdr_deserialize_endian_array_char>:
 800ed2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed30:	4619      	mov	r1, r3
 800ed32:	461f      	mov	r7, r3
 800ed34:	4605      	mov	r5, r0
 800ed36:	4690      	mov	r8, r2
 800ed38:	f001 fcdc 	bl	80106f4 <ucdr_check_buffer_available_for>
 800ed3c:	b9e8      	cbnz	r0, 800ed7a <ucdr_deserialize_endian_array_char+0x4e>
 800ed3e:	463e      	mov	r6, r7
 800ed40:	e00c      	b.n	800ed5c <ucdr_deserialize_endian_array_char+0x30>
 800ed42:	eb08 0003 	add.w	r0, r8, r3
 800ed46:	68a9      	ldr	r1, [r5, #8]
 800ed48:	4622      	mov	r2, r4
 800ed4a:	1b36      	subs	r6, r6, r4
 800ed4c:	f00d fe2b 	bl	801c9a6 <memcpy>
 800ed50:	68ab      	ldr	r3, [r5, #8]
 800ed52:	6928      	ldr	r0, [r5, #16]
 800ed54:	4423      	add	r3, r4
 800ed56:	4420      	add	r0, r4
 800ed58:	60ab      	str	r3, [r5, #8]
 800ed5a:	6128      	str	r0, [r5, #16]
 800ed5c:	4631      	mov	r1, r6
 800ed5e:	2201      	movs	r2, #1
 800ed60:	4628      	mov	r0, r5
 800ed62:	f001 fd51 	bl	8010808 <ucdr_check_final_buffer_behavior_array>
 800ed66:	1bbb      	subs	r3, r7, r6
 800ed68:	4604      	mov	r4, r0
 800ed6a:	2800      	cmp	r0, #0
 800ed6c:	d1e9      	bne.n	800ed42 <ucdr_deserialize_endian_array_char+0x16>
 800ed6e:	2301      	movs	r3, #1
 800ed70:	7da8      	ldrb	r0, [r5, #22]
 800ed72:	756b      	strb	r3, [r5, #21]
 800ed74:	4058      	eors	r0, r3
 800ed76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed7a:	463a      	mov	r2, r7
 800ed7c:	68a9      	ldr	r1, [r5, #8]
 800ed7e:	4640      	mov	r0, r8
 800ed80:	f00d fe11 	bl	801c9a6 <memcpy>
 800ed84:	68aa      	ldr	r2, [r5, #8]
 800ed86:	692b      	ldr	r3, [r5, #16]
 800ed88:	443a      	add	r2, r7
 800ed8a:	443b      	add	r3, r7
 800ed8c:	60aa      	str	r2, [r5, #8]
 800ed8e:	612b      	str	r3, [r5, #16]
 800ed90:	e7ed      	b.n	800ed6e <ucdr_deserialize_endian_array_char+0x42>
 800ed92:	bf00      	nop

0800ed94 <ucdr_serialize_array_uint8_t>:
 800ed94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed98:	4688      	mov	r8, r1
 800ed9a:	4611      	mov	r1, r2
 800ed9c:	4617      	mov	r7, r2
 800ed9e:	4605      	mov	r5, r0
 800eda0:	f001 fca8 	bl	80106f4 <ucdr_check_buffer_available_for>
 800eda4:	b9e0      	cbnz	r0, 800ede0 <ucdr_serialize_array_uint8_t+0x4c>
 800eda6:	463e      	mov	r6, r7
 800eda8:	e00b      	b.n	800edc2 <ucdr_serialize_array_uint8_t+0x2e>
 800edaa:	4441      	add	r1, r8
 800edac:	68a8      	ldr	r0, [r5, #8]
 800edae:	4622      	mov	r2, r4
 800edb0:	1b36      	subs	r6, r6, r4
 800edb2:	f00d fdf8 	bl	801c9a6 <memcpy>
 800edb6:	68ab      	ldr	r3, [r5, #8]
 800edb8:	6928      	ldr	r0, [r5, #16]
 800edba:	4423      	add	r3, r4
 800edbc:	4420      	add	r0, r4
 800edbe:	60ab      	str	r3, [r5, #8]
 800edc0:	6128      	str	r0, [r5, #16]
 800edc2:	4631      	mov	r1, r6
 800edc4:	2201      	movs	r2, #1
 800edc6:	4628      	mov	r0, r5
 800edc8:	f001 fd1e 	bl	8010808 <ucdr_check_final_buffer_behavior_array>
 800edcc:	1bb9      	subs	r1, r7, r6
 800edce:	4604      	mov	r4, r0
 800edd0:	2800      	cmp	r0, #0
 800edd2:	d1ea      	bne.n	800edaa <ucdr_serialize_array_uint8_t+0x16>
 800edd4:	2301      	movs	r3, #1
 800edd6:	7da8      	ldrb	r0, [r5, #22]
 800edd8:	756b      	strb	r3, [r5, #21]
 800edda:	4058      	eors	r0, r3
 800eddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ede0:	463a      	mov	r2, r7
 800ede2:	4641      	mov	r1, r8
 800ede4:	68a8      	ldr	r0, [r5, #8]
 800ede6:	f00d fdde 	bl	801c9a6 <memcpy>
 800edea:	68aa      	ldr	r2, [r5, #8]
 800edec:	692b      	ldr	r3, [r5, #16]
 800edee:	443a      	add	r2, r7
 800edf0:	443b      	add	r3, r7
 800edf2:	60aa      	str	r2, [r5, #8]
 800edf4:	612b      	str	r3, [r5, #16]
 800edf6:	e7ed      	b.n	800edd4 <ucdr_serialize_array_uint8_t+0x40>

0800edf8 <ucdr_serialize_endian_array_uint8_t>:
 800edf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edfc:	4619      	mov	r1, r3
 800edfe:	461f      	mov	r7, r3
 800ee00:	4605      	mov	r5, r0
 800ee02:	4690      	mov	r8, r2
 800ee04:	f001 fc76 	bl	80106f4 <ucdr_check_buffer_available_for>
 800ee08:	b9e0      	cbnz	r0, 800ee44 <ucdr_serialize_endian_array_uint8_t+0x4c>
 800ee0a:	463e      	mov	r6, r7
 800ee0c:	e00b      	b.n	800ee26 <ucdr_serialize_endian_array_uint8_t+0x2e>
 800ee0e:	4441      	add	r1, r8
 800ee10:	68a8      	ldr	r0, [r5, #8]
 800ee12:	4622      	mov	r2, r4
 800ee14:	1b36      	subs	r6, r6, r4
 800ee16:	f00d fdc6 	bl	801c9a6 <memcpy>
 800ee1a:	68ab      	ldr	r3, [r5, #8]
 800ee1c:	6928      	ldr	r0, [r5, #16]
 800ee1e:	4423      	add	r3, r4
 800ee20:	4420      	add	r0, r4
 800ee22:	60ab      	str	r3, [r5, #8]
 800ee24:	6128      	str	r0, [r5, #16]
 800ee26:	4631      	mov	r1, r6
 800ee28:	2201      	movs	r2, #1
 800ee2a:	4628      	mov	r0, r5
 800ee2c:	f001 fcec 	bl	8010808 <ucdr_check_final_buffer_behavior_array>
 800ee30:	1bb9      	subs	r1, r7, r6
 800ee32:	4604      	mov	r4, r0
 800ee34:	2800      	cmp	r0, #0
 800ee36:	d1ea      	bne.n	800ee0e <ucdr_serialize_endian_array_uint8_t+0x16>
 800ee38:	2301      	movs	r3, #1
 800ee3a:	7da8      	ldrb	r0, [r5, #22]
 800ee3c:	756b      	strb	r3, [r5, #21]
 800ee3e:	4058      	eors	r0, r3
 800ee40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee44:	463a      	mov	r2, r7
 800ee46:	4641      	mov	r1, r8
 800ee48:	68a8      	ldr	r0, [r5, #8]
 800ee4a:	f00d fdac 	bl	801c9a6 <memcpy>
 800ee4e:	68aa      	ldr	r2, [r5, #8]
 800ee50:	692b      	ldr	r3, [r5, #16]
 800ee52:	443a      	add	r2, r7
 800ee54:	443b      	add	r3, r7
 800ee56:	60aa      	str	r2, [r5, #8]
 800ee58:	612b      	str	r3, [r5, #16]
 800ee5a:	e7ed      	b.n	800ee38 <ucdr_serialize_endian_array_uint8_t+0x40>

0800ee5c <ucdr_deserialize_array_uint8_t>:
 800ee5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee60:	4688      	mov	r8, r1
 800ee62:	4611      	mov	r1, r2
 800ee64:	4617      	mov	r7, r2
 800ee66:	4605      	mov	r5, r0
 800ee68:	f001 fc44 	bl	80106f4 <ucdr_check_buffer_available_for>
 800ee6c:	b9e8      	cbnz	r0, 800eeaa <ucdr_deserialize_array_uint8_t+0x4e>
 800ee6e:	463e      	mov	r6, r7
 800ee70:	e00c      	b.n	800ee8c <ucdr_deserialize_array_uint8_t+0x30>
 800ee72:	eb08 0003 	add.w	r0, r8, r3
 800ee76:	68a9      	ldr	r1, [r5, #8]
 800ee78:	4622      	mov	r2, r4
 800ee7a:	1b36      	subs	r6, r6, r4
 800ee7c:	f00d fd93 	bl	801c9a6 <memcpy>
 800ee80:	68ab      	ldr	r3, [r5, #8]
 800ee82:	6928      	ldr	r0, [r5, #16]
 800ee84:	4423      	add	r3, r4
 800ee86:	4420      	add	r0, r4
 800ee88:	60ab      	str	r3, [r5, #8]
 800ee8a:	6128      	str	r0, [r5, #16]
 800ee8c:	4631      	mov	r1, r6
 800ee8e:	2201      	movs	r2, #1
 800ee90:	4628      	mov	r0, r5
 800ee92:	f001 fcb9 	bl	8010808 <ucdr_check_final_buffer_behavior_array>
 800ee96:	1bbb      	subs	r3, r7, r6
 800ee98:	4604      	mov	r4, r0
 800ee9a:	2800      	cmp	r0, #0
 800ee9c:	d1e9      	bne.n	800ee72 <ucdr_deserialize_array_uint8_t+0x16>
 800ee9e:	2301      	movs	r3, #1
 800eea0:	7da8      	ldrb	r0, [r5, #22]
 800eea2:	756b      	strb	r3, [r5, #21]
 800eea4:	4058      	eors	r0, r3
 800eea6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eeaa:	463a      	mov	r2, r7
 800eeac:	68a9      	ldr	r1, [r5, #8]
 800eeae:	4640      	mov	r0, r8
 800eeb0:	f00d fd79 	bl	801c9a6 <memcpy>
 800eeb4:	68aa      	ldr	r2, [r5, #8]
 800eeb6:	692b      	ldr	r3, [r5, #16]
 800eeb8:	443a      	add	r2, r7
 800eeba:	443b      	add	r3, r7
 800eebc:	60aa      	str	r2, [r5, #8]
 800eebe:	612b      	str	r3, [r5, #16]
 800eec0:	e7ed      	b.n	800ee9e <ucdr_deserialize_array_uint8_t+0x42>
 800eec2:	bf00      	nop

0800eec4 <ucdr_deserialize_endian_array_uint8_t>:
 800eec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eec8:	4619      	mov	r1, r3
 800eeca:	461f      	mov	r7, r3
 800eecc:	4605      	mov	r5, r0
 800eece:	4690      	mov	r8, r2
 800eed0:	f001 fc10 	bl	80106f4 <ucdr_check_buffer_available_for>
 800eed4:	b9e8      	cbnz	r0, 800ef12 <ucdr_deserialize_endian_array_uint8_t+0x4e>
 800eed6:	463e      	mov	r6, r7
 800eed8:	e00c      	b.n	800eef4 <ucdr_deserialize_endian_array_uint8_t+0x30>
 800eeda:	eb08 0003 	add.w	r0, r8, r3
 800eede:	68a9      	ldr	r1, [r5, #8]
 800eee0:	4622      	mov	r2, r4
 800eee2:	1b36      	subs	r6, r6, r4
 800eee4:	f00d fd5f 	bl	801c9a6 <memcpy>
 800eee8:	68ab      	ldr	r3, [r5, #8]
 800eeea:	6928      	ldr	r0, [r5, #16]
 800eeec:	4423      	add	r3, r4
 800eeee:	4420      	add	r0, r4
 800eef0:	60ab      	str	r3, [r5, #8]
 800eef2:	6128      	str	r0, [r5, #16]
 800eef4:	4631      	mov	r1, r6
 800eef6:	2201      	movs	r2, #1
 800eef8:	4628      	mov	r0, r5
 800eefa:	f001 fc85 	bl	8010808 <ucdr_check_final_buffer_behavior_array>
 800eefe:	1bbb      	subs	r3, r7, r6
 800ef00:	4604      	mov	r4, r0
 800ef02:	2800      	cmp	r0, #0
 800ef04:	d1e9      	bne.n	800eeda <ucdr_deserialize_endian_array_uint8_t+0x16>
 800ef06:	2301      	movs	r3, #1
 800ef08:	7da8      	ldrb	r0, [r5, #22]
 800ef0a:	756b      	strb	r3, [r5, #21]
 800ef0c:	4058      	eors	r0, r3
 800ef0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef12:	463a      	mov	r2, r7
 800ef14:	68a9      	ldr	r1, [r5, #8]
 800ef16:	4640      	mov	r0, r8
 800ef18:	f00d fd45 	bl	801c9a6 <memcpy>
 800ef1c:	68aa      	ldr	r2, [r5, #8]
 800ef1e:	692b      	ldr	r3, [r5, #16]
 800ef20:	443a      	add	r2, r7
 800ef22:	443b      	add	r3, r7
 800ef24:	60aa      	str	r2, [r5, #8]
 800ef26:	612b      	str	r3, [r5, #16]
 800ef28:	e7ed      	b.n	800ef06 <ucdr_deserialize_endian_array_uint8_t+0x42>
 800ef2a:	bf00      	nop

0800ef2c <ucdr_serialize_array_int16_t>:
 800ef2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef30:	4604      	mov	r4, r0
 800ef32:	460e      	mov	r6, r1
 800ef34:	2102      	movs	r1, #2
 800ef36:	4617      	mov	r7, r2
 800ef38:	f001 fc3c 	bl	80107b4 <ucdr_buffer_alignment>
 800ef3c:	4601      	mov	r1, r0
 800ef3e:	4620      	mov	r0, r4
 800ef40:	7d65      	ldrb	r5, [r4, #21]
 800ef42:	f001 fc7f 	bl	8010844 <ucdr_advance_buffer>
 800ef46:	7d21      	ldrb	r1, [r4, #20]
 800ef48:	7565      	strb	r5, [r4, #21]
 800ef4a:	2901      	cmp	r1, #1
 800ef4c:	d011      	beq.n	800ef72 <ucdr_serialize_array_int16_t+0x46>
 800ef4e:	b15f      	cbz	r7, 800ef68 <ucdr_serialize_array_int16_t+0x3c>
 800ef50:	3e02      	subs	r6, #2
 800ef52:	2500      	movs	r5, #0
 800ef54:	e000      	b.n	800ef58 <ucdr_serialize_array_int16_t+0x2c>
 800ef56:	7d21      	ldrb	r1, [r4, #20]
 800ef58:	3501      	adds	r5, #1
 800ef5a:	f936 2f02 	ldrsh.w	r2, [r6, #2]!
 800ef5e:	4620      	mov	r0, r4
 800ef60:	f000 fe78 	bl	800fc54 <ucdr_serialize_endian_int16_t>
 800ef64:	42af      	cmp	r7, r5
 800ef66:	d1f6      	bne.n	800ef56 <ucdr_serialize_array_int16_t+0x2a>
 800ef68:	7da0      	ldrb	r0, [r4, #22]
 800ef6a:	f080 0001 	eor.w	r0, r0, #1
 800ef6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef72:	007f      	lsls	r7, r7, #1
 800ef74:	4620      	mov	r0, r4
 800ef76:	4639      	mov	r1, r7
 800ef78:	f001 fbbc 	bl	80106f4 <ucdr_check_buffer_available_for>
 800ef7c:	b9f8      	cbnz	r0, 800efbe <ucdr_serialize_array_int16_t+0x92>
 800ef7e:	46b8      	mov	r8, r7
 800ef80:	e00c      	b.n	800ef9c <ucdr_serialize_array_int16_t+0x70>
 800ef82:	462a      	mov	r2, r5
 800ef84:	4431      	add	r1, r6
 800ef86:	68a0      	ldr	r0, [r4, #8]
 800ef88:	eba8 0805 	sub.w	r8, r8, r5
 800ef8c:	f00d fd0b 	bl	801c9a6 <memcpy>
 800ef90:	68a2      	ldr	r2, [r4, #8]
 800ef92:	6923      	ldr	r3, [r4, #16]
 800ef94:	442a      	add	r2, r5
 800ef96:	442b      	add	r3, r5
 800ef98:	60a2      	str	r2, [r4, #8]
 800ef9a:	6123      	str	r3, [r4, #16]
 800ef9c:	4641      	mov	r1, r8
 800ef9e:	2202      	movs	r2, #2
 800efa0:	4620      	mov	r0, r4
 800efa2:	f001 fc31 	bl	8010808 <ucdr_check_final_buffer_behavior_array>
 800efa6:	eba7 0108 	sub.w	r1, r7, r8
 800efaa:	4605      	mov	r5, r0
 800efac:	2800      	cmp	r0, #0
 800efae:	d1e8      	bne.n	800ef82 <ucdr_serialize_array_int16_t+0x56>
 800efb0:	2302      	movs	r3, #2
 800efb2:	7da0      	ldrb	r0, [r4, #22]
 800efb4:	7563      	strb	r3, [r4, #21]
 800efb6:	f080 0001 	eor.w	r0, r0, #1
 800efba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efbe:	463a      	mov	r2, r7
 800efc0:	4631      	mov	r1, r6
 800efc2:	68a0      	ldr	r0, [r4, #8]
 800efc4:	f00d fcef 	bl	801c9a6 <memcpy>
 800efc8:	68a2      	ldr	r2, [r4, #8]
 800efca:	6923      	ldr	r3, [r4, #16]
 800efcc:	443a      	add	r2, r7
 800efce:	441f      	add	r7, r3
 800efd0:	60a2      	str	r2, [r4, #8]
 800efd2:	6127      	str	r7, [r4, #16]
 800efd4:	e7ec      	b.n	800efb0 <ucdr_serialize_array_int16_t+0x84>
 800efd6:	bf00      	nop

0800efd8 <ucdr_deserialize_array_int16_t>:
 800efd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efdc:	4604      	mov	r4, r0
 800efde:	460e      	mov	r6, r1
 800efe0:	2102      	movs	r1, #2
 800efe2:	4617      	mov	r7, r2
 800efe4:	f001 fbe6 	bl	80107b4 <ucdr_buffer_alignment>
 800efe8:	4601      	mov	r1, r0
 800efea:	4620      	mov	r0, r4
 800efec:	7d65      	ldrb	r5, [r4, #21]
 800efee:	f001 fc29 	bl	8010844 <ucdr_advance_buffer>
 800eff2:	7d21      	ldrb	r1, [r4, #20]
 800eff4:	7565      	strb	r5, [r4, #21]
 800eff6:	2901      	cmp	r1, #1
 800eff8:	d010      	beq.n	800f01c <ucdr_deserialize_array_int16_t+0x44>
 800effa:	b157      	cbz	r7, 800f012 <ucdr_deserialize_array_int16_t+0x3a>
 800effc:	2500      	movs	r5, #0
 800effe:	e000      	b.n	800f002 <ucdr_deserialize_array_int16_t+0x2a>
 800f000:	7d21      	ldrb	r1, [r4, #20]
 800f002:	3501      	adds	r5, #1
 800f004:	4632      	mov	r2, r6
 800f006:	4620      	mov	r0, r4
 800f008:	3602      	adds	r6, #2
 800f00a:	f000 ff17 	bl	800fe3c <ucdr_deserialize_endian_int16_t>
 800f00e:	42af      	cmp	r7, r5
 800f010:	d1f6      	bne.n	800f000 <ucdr_deserialize_array_int16_t+0x28>
 800f012:	7da0      	ldrb	r0, [r4, #22]
 800f014:	f080 0001 	eor.w	r0, r0, #1
 800f018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f01c:	007f      	lsls	r7, r7, #1
 800f01e:	4620      	mov	r0, r4
 800f020:	4639      	mov	r1, r7
 800f022:	f001 fb67 	bl	80106f4 <ucdr_check_buffer_available_for>
 800f026:	b9f8      	cbnz	r0, 800f068 <ucdr_deserialize_array_int16_t+0x90>
 800f028:	46b8      	mov	r8, r7
 800f02a:	e00c      	b.n	800f046 <ucdr_deserialize_array_int16_t+0x6e>
 800f02c:	18f0      	adds	r0, r6, r3
 800f02e:	462a      	mov	r2, r5
 800f030:	68a1      	ldr	r1, [r4, #8]
 800f032:	eba8 0805 	sub.w	r8, r8, r5
 800f036:	f00d fcb6 	bl	801c9a6 <memcpy>
 800f03a:	68a2      	ldr	r2, [r4, #8]
 800f03c:	6923      	ldr	r3, [r4, #16]
 800f03e:	442a      	add	r2, r5
 800f040:	442b      	add	r3, r5
 800f042:	60a2      	str	r2, [r4, #8]
 800f044:	6123      	str	r3, [r4, #16]
 800f046:	4641      	mov	r1, r8
 800f048:	2202      	movs	r2, #2
 800f04a:	4620      	mov	r0, r4
 800f04c:	f001 fbdc 	bl	8010808 <ucdr_check_final_buffer_behavior_array>
 800f050:	eba7 0308 	sub.w	r3, r7, r8
 800f054:	4605      	mov	r5, r0
 800f056:	2800      	cmp	r0, #0
 800f058:	d1e8      	bne.n	800f02c <ucdr_deserialize_array_int16_t+0x54>
 800f05a:	2302      	movs	r3, #2
 800f05c:	7da0      	ldrb	r0, [r4, #22]
 800f05e:	7563      	strb	r3, [r4, #21]
 800f060:	f080 0001 	eor.w	r0, r0, #1
 800f064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f068:	463a      	mov	r2, r7
 800f06a:	68a1      	ldr	r1, [r4, #8]
 800f06c:	4630      	mov	r0, r6
 800f06e:	f00d fc9a 	bl	801c9a6 <memcpy>
 800f072:	68a2      	ldr	r2, [r4, #8]
 800f074:	6923      	ldr	r3, [r4, #16]
 800f076:	443a      	add	r2, r7
 800f078:	441f      	add	r7, r3
 800f07a:	60a2      	str	r2, [r4, #8]
 800f07c:	6127      	str	r7, [r4, #16]
 800f07e:	e7ec      	b.n	800f05a <ucdr_deserialize_array_int16_t+0x82>

0800f080 <ucdr_serialize_bool>:
 800f080:	b538      	push	{r3, r4, r5, lr}
 800f082:	460d      	mov	r5, r1
 800f084:	2101      	movs	r1, #1
 800f086:	4604      	mov	r4, r0
 800f088:	f001 fb40 	bl	801070c <ucdr_check_final_buffer_behavior>
 800f08c:	b148      	cbz	r0, 800f0a2 <ucdr_serialize_bool+0x22>
 800f08e:	68a3      	ldr	r3, [r4, #8]
 800f090:	2101      	movs	r1, #1
 800f092:	701d      	strb	r5, [r3, #0]
 800f094:	68a2      	ldr	r2, [r4, #8]
 800f096:	6923      	ldr	r3, [r4, #16]
 800f098:	440a      	add	r2, r1
 800f09a:	7561      	strb	r1, [r4, #21]
 800f09c:	440b      	add	r3, r1
 800f09e:	60a2      	str	r2, [r4, #8]
 800f0a0:	6123      	str	r3, [r4, #16]
 800f0a2:	7da0      	ldrb	r0, [r4, #22]
 800f0a4:	f080 0001 	eor.w	r0, r0, #1
 800f0a8:	bd38      	pop	{r3, r4, r5, pc}
 800f0aa:	bf00      	nop

0800f0ac <ucdr_deserialize_bool>:
 800f0ac:	b538      	push	{r3, r4, r5, lr}
 800f0ae:	460d      	mov	r5, r1
 800f0b0:	2101      	movs	r1, #1
 800f0b2:	4604      	mov	r4, r0
 800f0b4:	f001 fb2a 	bl	801070c <ucdr_check_final_buffer_behavior>
 800f0b8:	b160      	cbz	r0, 800f0d4 <ucdr_deserialize_bool+0x28>
 800f0ba:	68a2      	ldr	r2, [r4, #8]
 800f0bc:	2101      	movs	r1, #1
 800f0be:	6923      	ldr	r3, [r4, #16]
 800f0c0:	f812 0b01 	ldrb.w	r0, [r2], #1
 800f0c4:	440b      	add	r3, r1
 800f0c6:	3800      	subs	r0, #0
 800f0c8:	bf18      	it	ne
 800f0ca:	2001      	movne	r0, #1
 800f0cc:	7028      	strb	r0, [r5, #0]
 800f0ce:	60a2      	str	r2, [r4, #8]
 800f0d0:	6123      	str	r3, [r4, #16]
 800f0d2:	7561      	strb	r1, [r4, #21]
 800f0d4:	7da0      	ldrb	r0, [r4, #22]
 800f0d6:	f080 0001 	eor.w	r0, r0, #1
 800f0da:	bd38      	pop	{r3, r4, r5, pc}

0800f0dc <ucdr_serialize_uint8_t>:
 800f0dc:	b538      	push	{r3, r4, r5, lr}
 800f0de:	460d      	mov	r5, r1
 800f0e0:	2101      	movs	r1, #1
 800f0e2:	4604      	mov	r4, r0
 800f0e4:	f001 fb12 	bl	801070c <ucdr_check_final_buffer_behavior>
 800f0e8:	b148      	cbz	r0, 800f0fe <ucdr_serialize_uint8_t+0x22>
 800f0ea:	68a3      	ldr	r3, [r4, #8]
 800f0ec:	2101      	movs	r1, #1
 800f0ee:	701d      	strb	r5, [r3, #0]
 800f0f0:	68a2      	ldr	r2, [r4, #8]
 800f0f2:	6923      	ldr	r3, [r4, #16]
 800f0f4:	440a      	add	r2, r1
 800f0f6:	7561      	strb	r1, [r4, #21]
 800f0f8:	440b      	add	r3, r1
 800f0fa:	60a2      	str	r2, [r4, #8]
 800f0fc:	6123      	str	r3, [r4, #16]
 800f0fe:	7da0      	ldrb	r0, [r4, #22]
 800f100:	f080 0001 	eor.w	r0, r0, #1
 800f104:	bd38      	pop	{r3, r4, r5, pc}
 800f106:	bf00      	nop

0800f108 <ucdr_deserialize_uint8_t>:
 800f108:	b538      	push	{r3, r4, r5, lr}
 800f10a:	460d      	mov	r5, r1
 800f10c:	2101      	movs	r1, #1
 800f10e:	4604      	mov	r4, r0
 800f110:	f001 fafc 	bl	801070c <ucdr_check_final_buffer_behavior>
 800f114:	b150      	cbz	r0, 800f12c <ucdr_deserialize_uint8_t+0x24>
 800f116:	68a3      	ldr	r3, [r4, #8]
 800f118:	2101      	movs	r1, #1
 800f11a:	781b      	ldrb	r3, [r3, #0]
 800f11c:	702b      	strb	r3, [r5, #0]
 800f11e:	68a2      	ldr	r2, [r4, #8]
 800f120:	6923      	ldr	r3, [r4, #16]
 800f122:	440a      	add	r2, r1
 800f124:	7561      	strb	r1, [r4, #21]
 800f126:	440b      	add	r3, r1
 800f128:	60a2      	str	r2, [r4, #8]
 800f12a:	6123      	str	r3, [r4, #16]
 800f12c:	7da0      	ldrb	r0, [r4, #22]
 800f12e:	f080 0001 	eor.w	r0, r0, #1
 800f132:	bd38      	pop	{r3, r4, r5, pc}

0800f134 <ucdr_serialize_uint16_t>:
 800f134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f138:	460b      	mov	r3, r1
 800f13a:	b082      	sub	sp, #8
 800f13c:	4604      	mov	r4, r0
 800f13e:	2102      	movs	r1, #2
 800f140:	f8ad 3006 	strh.w	r3, [sp, #6]
 800f144:	f001 fb36 	bl	80107b4 <ucdr_buffer_alignment>
 800f148:	4601      	mov	r1, r0
 800f14a:	4620      	mov	r0, r4
 800f14c:	7d67      	ldrb	r7, [r4, #21]
 800f14e:	f001 fb79 	bl	8010844 <ucdr_advance_buffer>
 800f152:	2102      	movs	r1, #2
 800f154:	4620      	mov	r0, r4
 800f156:	f001 facd 	bl	80106f4 <ucdr_check_buffer_available_for>
 800f15a:	bb78      	cbnz	r0, 800f1bc <ucdr_serialize_uint16_t+0x88>
 800f15c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800f160:	42ab      	cmp	r3, r5
 800f162:	d926      	bls.n	800f1b2 <ucdr_serialize_uint16_t+0x7e>
 800f164:	1b5e      	subs	r6, r3, r5
 800f166:	60a3      	str	r3, [r4, #8]
 800f168:	6923      	ldr	r3, [r4, #16]
 800f16a:	4620      	mov	r0, r4
 800f16c:	f1c6 0802 	rsb	r8, r6, #2
 800f170:	4433      	add	r3, r6
 800f172:	4641      	mov	r1, r8
 800f174:	6123      	str	r3, [r4, #16]
 800f176:	f001 fac9 	bl	801070c <ucdr_check_final_buffer_behavior>
 800f17a:	2800      	cmp	r0, #0
 800f17c:	d03b      	beq.n	800f1f6 <ucdr_serialize_uint16_t+0xc2>
 800f17e:	7d23      	ldrb	r3, [r4, #20]
 800f180:	2b01      	cmp	r3, #1
 800f182:	d04a      	beq.n	800f21a <ucdr_serialize_uint16_t+0xe6>
 800f184:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f188:	702b      	strb	r3, [r5, #0]
 800f18a:	2e00      	cmp	r6, #0
 800f18c:	d040      	beq.n	800f210 <ucdr_serialize_uint16_t+0xdc>
 800f18e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f192:	706b      	strb	r3, [r5, #1]
 800f194:	6923      	ldr	r3, [r4, #16]
 800f196:	2102      	movs	r1, #2
 800f198:	68a2      	ldr	r2, [r4, #8]
 800f19a:	3302      	adds	r3, #2
 800f19c:	7da0      	ldrb	r0, [r4, #22]
 800f19e:	4442      	add	r2, r8
 800f1a0:	7561      	strb	r1, [r4, #21]
 800f1a2:	1b9e      	subs	r6, r3, r6
 800f1a4:	f080 0001 	eor.w	r0, r0, #1
 800f1a8:	60a2      	str	r2, [r4, #8]
 800f1aa:	6126      	str	r6, [r4, #16]
 800f1ac:	b002      	add	sp, #8
 800f1ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1b2:	2102      	movs	r1, #2
 800f1b4:	4620      	mov	r0, r4
 800f1b6:	f001 faa9 	bl	801070c <ucdr_check_final_buffer_behavior>
 800f1ba:	b190      	cbz	r0, 800f1e2 <ucdr_serialize_uint16_t+0xae>
 800f1bc:	7d23      	ldrb	r3, [r4, #20]
 800f1be:	2b01      	cmp	r3, #1
 800f1c0:	68a3      	ldr	r3, [r4, #8]
 800f1c2:	d014      	beq.n	800f1ee <ucdr_serialize_uint16_t+0xba>
 800f1c4:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800f1c8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f1cc:	7019      	strb	r1, [r3, #0]
 800f1ce:	68a3      	ldr	r3, [r4, #8]
 800f1d0:	705a      	strb	r2, [r3, #1]
 800f1d2:	2102      	movs	r1, #2
 800f1d4:	68a2      	ldr	r2, [r4, #8]
 800f1d6:	6923      	ldr	r3, [r4, #16]
 800f1d8:	440a      	add	r2, r1
 800f1da:	7561      	strb	r1, [r4, #21]
 800f1dc:	440b      	add	r3, r1
 800f1de:	60a2      	str	r2, [r4, #8]
 800f1e0:	6123      	str	r3, [r4, #16]
 800f1e2:	7da0      	ldrb	r0, [r4, #22]
 800f1e4:	f080 0001 	eor.w	r0, r0, #1
 800f1e8:	b002      	add	sp, #8
 800f1ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1ee:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800f1f2:	801a      	strh	r2, [r3, #0]
 800f1f4:	e7ed      	b.n	800f1d2 <ucdr_serialize_uint16_t+0x9e>
 800f1f6:	68a2      	ldr	r2, [r4, #8]
 800f1f8:	6923      	ldr	r3, [r4, #16]
 800f1fa:	7da0      	ldrb	r0, [r4, #22]
 800f1fc:	1b92      	subs	r2, r2, r6
 800f1fe:	1b9b      	subs	r3, r3, r6
 800f200:	7567      	strb	r7, [r4, #21]
 800f202:	f080 0001 	eor.w	r0, r0, #1
 800f206:	60a2      	str	r2, [r4, #8]
 800f208:	6123      	str	r3, [r4, #16]
 800f20a:	b002      	add	sp, #8
 800f20c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f210:	68a3      	ldr	r3, [r4, #8]
 800f212:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f216:	701a      	strb	r2, [r3, #0]
 800f218:	e7bc      	b.n	800f194 <ucdr_serialize_uint16_t+0x60>
 800f21a:	4628      	mov	r0, r5
 800f21c:	f10d 0506 	add.w	r5, sp, #6
 800f220:	4632      	mov	r2, r6
 800f222:	4629      	mov	r1, r5
 800f224:	f00d fbbf 	bl	801c9a6 <memcpy>
 800f228:	4642      	mov	r2, r8
 800f22a:	19a9      	adds	r1, r5, r6
 800f22c:	68a0      	ldr	r0, [r4, #8]
 800f22e:	f00d fbba 	bl	801c9a6 <memcpy>
 800f232:	e7af      	b.n	800f194 <ucdr_serialize_uint16_t+0x60>

0800f234 <ucdr_serialize_endian_uint16_t>:
 800f234:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f238:	4604      	mov	r4, r0
 800f23a:	b083      	sub	sp, #12
 800f23c:	460d      	mov	r5, r1
 800f23e:	2102      	movs	r1, #2
 800f240:	f8ad 2006 	strh.w	r2, [sp, #6]
 800f244:	f001 fab6 	bl	80107b4 <ucdr_buffer_alignment>
 800f248:	4601      	mov	r1, r0
 800f24a:	4620      	mov	r0, r4
 800f24c:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f250:	f001 faf8 	bl	8010844 <ucdr_advance_buffer>
 800f254:	2102      	movs	r1, #2
 800f256:	4620      	mov	r0, r4
 800f258:	f001 fa4c 	bl	80106f4 <ucdr_check_buffer_available_for>
 800f25c:	bb70      	cbnz	r0, 800f2bc <ucdr_serialize_endian_uint16_t+0x88>
 800f25e:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800f262:	42be      	cmp	r6, r7
 800f264:	d925      	bls.n	800f2b2 <ucdr_serialize_endian_uint16_t+0x7e>
 800f266:	6923      	ldr	r3, [r4, #16]
 800f268:	4620      	mov	r0, r4
 800f26a:	60a6      	str	r6, [r4, #8]
 800f26c:	1bf6      	subs	r6, r6, r7
 800f26e:	4433      	add	r3, r6
 800f270:	f1c6 0902 	rsb	r9, r6, #2
 800f274:	6123      	str	r3, [r4, #16]
 800f276:	4649      	mov	r1, r9
 800f278:	f001 fa48 	bl	801070c <ucdr_check_final_buffer_behavior>
 800f27c:	2800      	cmp	r0, #0
 800f27e:	d039      	beq.n	800f2f4 <ucdr_serialize_endian_uint16_t+0xc0>
 800f280:	2d01      	cmp	r5, #1
 800f282:	d04a      	beq.n	800f31a <ucdr_serialize_endian_uint16_t+0xe6>
 800f284:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f288:	703b      	strb	r3, [r7, #0]
 800f28a:	2e00      	cmp	r6, #0
 800f28c:	d040      	beq.n	800f310 <ucdr_serialize_endian_uint16_t+0xdc>
 800f28e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f292:	707b      	strb	r3, [r7, #1]
 800f294:	6923      	ldr	r3, [r4, #16]
 800f296:	2102      	movs	r1, #2
 800f298:	68a2      	ldr	r2, [r4, #8]
 800f29a:	7da0      	ldrb	r0, [r4, #22]
 800f29c:	3302      	adds	r3, #2
 800f29e:	444a      	add	r2, r9
 800f2a0:	7561      	strb	r1, [r4, #21]
 800f2a2:	1b9b      	subs	r3, r3, r6
 800f2a4:	f080 0001 	eor.w	r0, r0, #1
 800f2a8:	60a2      	str	r2, [r4, #8]
 800f2aa:	6123      	str	r3, [r4, #16]
 800f2ac:	b003      	add	sp, #12
 800f2ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f2b2:	2102      	movs	r1, #2
 800f2b4:	4620      	mov	r0, r4
 800f2b6:	f001 fa29 	bl	801070c <ucdr_check_final_buffer_behavior>
 800f2ba:	b188      	cbz	r0, 800f2e0 <ucdr_serialize_endian_uint16_t+0xac>
 800f2bc:	2d01      	cmp	r5, #1
 800f2be:	68a3      	ldr	r3, [r4, #8]
 800f2c0:	d014      	beq.n	800f2ec <ucdr_serialize_endian_uint16_t+0xb8>
 800f2c2:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800f2c6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f2ca:	7019      	strb	r1, [r3, #0]
 800f2cc:	68a3      	ldr	r3, [r4, #8]
 800f2ce:	705a      	strb	r2, [r3, #1]
 800f2d0:	2102      	movs	r1, #2
 800f2d2:	68a2      	ldr	r2, [r4, #8]
 800f2d4:	6923      	ldr	r3, [r4, #16]
 800f2d6:	440a      	add	r2, r1
 800f2d8:	7561      	strb	r1, [r4, #21]
 800f2da:	440b      	add	r3, r1
 800f2dc:	60a2      	str	r2, [r4, #8]
 800f2de:	6123      	str	r3, [r4, #16]
 800f2e0:	7da0      	ldrb	r0, [r4, #22]
 800f2e2:	f080 0001 	eor.w	r0, r0, #1
 800f2e6:	b003      	add	sp, #12
 800f2e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f2ec:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800f2f0:	801a      	strh	r2, [r3, #0]
 800f2f2:	e7ed      	b.n	800f2d0 <ucdr_serialize_endian_uint16_t+0x9c>
 800f2f4:	68a2      	ldr	r2, [r4, #8]
 800f2f6:	6923      	ldr	r3, [r4, #16]
 800f2f8:	7da0      	ldrb	r0, [r4, #22]
 800f2fa:	1b92      	subs	r2, r2, r6
 800f2fc:	1b9b      	subs	r3, r3, r6
 800f2fe:	f884 8015 	strb.w	r8, [r4, #21]
 800f302:	f080 0001 	eor.w	r0, r0, #1
 800f306:	60a2      	str	r2, [r4, #8]
 800f308:	6123      	str	r3, [r4, #16]
 800f30a:	b003      	add	sp, #12
 800f30c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f310:	68a3      	ldr	r3, [r4, #8]
 800f312:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f316:	701a      	strb	r2, [r3, #0]
 800f318:	e7bc      	b.n	800f294 <ucdr_serialize_endian_uint16_t+0x60>
 800f31a:	f10d 0506 	add.w	r5, sp, #6
 800f31e:	4632      	mov	r2, r6
 800f320:	4638      	mov	r0, r7
 800f322:	4629      	mov	r1, r5
 800f324:	f00d fb3f 	bl	801c9a6 <memcpy>
 800f328:	464a      	mov	r2, r9
 800f32a:	19a9      	adds	r1, r5, r6
 800f32c:	68a0      	ldr	r0, [r4, #8]
 800f32e:	f00d fb3a 	bl	801c9a6 <memcpy>
 800f332:	e7af      	b.n	800f294 <ucdr_serialize_endian_uint16_t+0x60>

0800f334 <ucdr_deserialize_uint16_t>:
 800f334:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f338:	4604      	mov	r4, r0
 800f33a:	460d      	mov	r5, r1
 800f33c:	2102      	movs	r1, #2
 800f33e:	f001 fa39 	bl	80107b4 <ucdr_buffer_alignment>
 800f342:	4601      	mov	r1, r0
 800f344:	4620      	mov	r0, r4
 800f346:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f34a:	f001 fa7b 	bl	8010844 <ucdr_advance_buffer>
 800f34e:	2102      	movs	r1, #2
 800f350:	4620      	mov	r0, r4
 800f352:	f001 f9cf 	bl	80106f4 <ucdr_check_buffer_available_for>
 800f356:	bb60      	cbnz	r0, 800f3b2 <ucdr_deserialize_uint16_t+0x7e>
 800f358:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800f35c:	42be      	cmp	r6, r7
 800f35e:	d923      	bls.n	800f3a8 <ucdr_deserialize_uint16_t+0x74>
 800f360:	6923      	ldr	r3, [r4, #16]
 800f362:	4620      	mov	r0, r4
 800f364:	60a6      	str	r6, [r4, #8]
 800f366:	1bf6      	subs	r6, r6, r7
 800f368:	4433      	add	r3, r6
 800f36a:	f1c6 0902 	rsb	r9, r6, #2
 800f36e:	6123      	str	r3, [r4, #16]
 800f370:	4649      	mov	r1, r9
 800f372:	f001 f9cb 	bl	801070c <ucdr_check_final_buffer_behavior>
 800f376:	2800      	cmp	r0, #0
 800f378:	d034      	beq.n	800f3e4 <ucdr_deserialize_uint16_t+0xb0>
 800f37a:	7d23      	ldrb	r3, [r4, #20]
 800f37c:	2b01      	cmp	r3, #1
 800f37e:	d042      	beq.n	800f406 <ucdr_deserialize_uint16_t+0xd2>
 800f380:	787b      	ldrb	r3, [r7, #1]
 800f382:	702b      	strb	r3, [r5, #0]
 800f384:	2e00      	cmp	r6, #0
 800f386:	d03a      	beq.n	800f3fe <ucdr_deserialize_uint16_t+0xca>
 800f388:	783b      	ldrb	r3, [r7, #0]
 800f38a:	706b      	strb	r3, [r5, #1]
 800f38c:	6923      	ldr	r3, [r4, #16]
 800f38e:	2102      	movs	r1, #2
 800f390:	68a2      	ldr	r2, [r4, #8]
 800f392:	3302      	adds	r3, #2
 800f394:	7da0      	ldrb	r0, [r4, #22]
 800f396:	444a      	add	r2, r9
 800f398:	7561      	strb	r1, [r4, #21]
 800f39a:	1b9b      	subs	r3, r3, r6
 800f39c:	f080 0001 	eor.w	r0, r0, #1
 800f3a0:	60a2      	str	r2, [r4, #8]
 800f3a2:	6123      	str	r3, [r4, #16]
 800f3a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f3a8:	2102      	movs	r1, #2
 800f3aa:	4620      	mov	r0, r4
 800f3ac:	f001 f9ae 	bl	801070c <ucdr_check_final_buffer_behavior>
 800f3b0:	b180      	cbz	r0, 800f3d4 <ucdr_deserialize_uint16_t+0xa0>
 800f3b2:	7d23      	ldrb	r3, [r4, #20]
 800f3b4:	2b01      	cmp	r3, #1
 800f3b6:	68a3      	ldr	r3, [r4, #8]
 800f3b8:	d011      	beq.n	800f3de <ucdr_deserialize_uint16_t+0xaa>
 800f3ba:	785b      	ldrb	r3, [r3, #1]
 800f3bc:	702b      	strb	r3, [r5, #0]
 800f3be:	68a3      	ldr	r3, [r4, #8]
 800f3c0:	781b      	ldrb	r3, [r3, #0]
 800f3c2:	706b      	strb	r3, [r5, #1]
 800f3c4:	2102      	movs	r1, #2
 800f3c6:	68a2      	ldr	r2, [r4, #8]
 800f3c8:	6923      	ldr	r3, [r4, #16]
 800f3ca:	440a      	add	r2, r1
 800f3cc:	7561      	strb	r1, [r4, #21]
 800f3ce:	440b      	add	r3, r1
 800f3d0:	60a2      	str	r2, [r4, #8]
 800f3d2:	6123      	str	r3, [r4, #16]
 800f3d4:	7da0      	ldrb	r0, [r4, #22]
 800f3d6:	f080 0001 	eor.w	r0, r0, #1
 800f3da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f3de:	881b      	ldrh	r3, [r3, #0]
 800f3e0:	802b      	strh	r3, [r5, #0]
 800f3e2:	e7ef      	b.n	800f3c4 <ucdr_deserialize_uint16_t+0x90>
 800f3e4:	68a2      	ldr	r2, [r4, #8]
 800f3e6:	6923      	ldr	r3, [r4, #16]
 800f3e8:	1b92      	subs	r2, r2, r6
 800f3ea:	7da0      	ldrb	r0, [r4, #22]
 800f3ec:	1b9b      	subs	r3, r3, r6
 800f3ee:	f884 8015 	strb.w	r8, [r4, #21]
 800f3f2:	f080 0001 	eor.w	r0, r0, #1
 800f3f6:	60a2      	str	r2, [r4, #8]
 800f3f8:	6123      	str	r3, [r4, #16]
 800f3fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f3fe:	68a3      	ldr	r3, [r4, #8]
 800f400:	781b      	ldrb	r3, [r3, #0]
 800f402:	706b      	strb	r3, [r5, #1]
 800f404:	e7c2      	b.n	800f38c <ucdr_deserialize_uint16_t+0x58>
 800f406:	4639      	mov	r1, r7
 800f408:	4632      	mov	r2, r6
 800f40a:	4628      	mov	r0, r5
 800f40c:	f00d facb 	bl	801c9a6 <memcpy>
 800f410:	464a      	mov	r2, r9
 800f412:	19a8      	adds	r0, r5, r6
 800f414:	68a1      	ldr	r1, [r4, #8]
 800f416:	f00d fac6 	bl	801c9a6 <memcpy>
 800f41a:	e7b7      	b.n	800f38c <ucdr_deserialize_uint16_t+0x58>

0800f41c <ucdr_deserialize_endian_uint16_t>:
 800f41c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f420:	4604      	mov	r4, r0
 800f422:	460e      	mov	r6, r1
 800f424:	2102      	movs	r1, #2
 800f426:	4615      	mov	r5, r2
 800f428:	f001 f9c4 	bl	80107b4 <ucdr_buffer_alignment>
 800f42c:	4601      	mov	r1, r0
 800f42e:	4620      	mov	r0, r4
 800f430:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f434:	f001 fa06 	bl	8010844 <ucdr_advance_buffer>
 800f438:	2102      	movs	r1, #2
 800f43a:	4620      	mov	r0, r4
 800f43c:	f001 f95a 	bl	80106f4 <ucdr_check_buffer_available_for>
 800f440:	bb70      	cbnz	r0, 800f4a0 <ucdr_deserialize_endian_uint16_t+0x84>
 800f442:	e9d4 7901 	ldrd	r7, r9, [r4, #4]
 800f446:	454f      	cmp	r7, r9
 800f448:	d925      	bls.n	800f496 <ucdr_deserialize_endian_uint16_t+0x7a>
 800f44a:	6923      	ldr	r3, [r4, #16]
 800f44c:	4620      	mov	r0, r4
 800f44e:	60a7      	str	r7, [r4, #8]
 800f450:	eba7 0709 	sub.w	r7, r7, r9
 800f454:	443b      	add	r3, r7
 800f456:	f1c7 0a02 	rsb	sl, r7, #2
 800f45a:	6123      	str	r3, [r4, #16]
 800f45c:	4651      	mov	r1, sl
 800f45e:	f001 f955 	bl	801070c <ucdr_check_final_buffer_behavior>
 800f462:	2800      	cmp	r0, #0
 800f464:	d034      	beq.n	800f4d0 <ucdr_deserialize_endian_uint16_t+0xb4>
 800f466:	2e01      	cmp	r6, #1
 800f468:	d043      	beq.n	800f4f2 <ucdr_deserialize_endian_uint16_t+0xd6>
 800f46a:	f899 3001 	ldrb.w	r3, [r9, #1]
 800f46e:	702b      	strb	r3, [r5, #0]
 800f470:	2f00      	cmp	r7, #0
 800f472:	d03a      	beq.n	800f4ea <ucdr_deserialize_endian_uint16_t+0xce>
 800f474:	f899 3000 	ldrb.w	r3, [r9]
 800f478:	706b      	strb	r3, [r5, #1]
 800f47a:	6923      	ldr	r3, [r4, #16]
 800f47c:	2102      	movs	r1, #2
 800f47e:	68a2      	ldr	r2, [r4, #8]
 800f480:	3302      	adds	r3, #2
 800f482:	7da0      	ldrb	r0, [r4, #22]
 800f484:	4452      	add	r2, sl
 800f486:	7561      	strb	r1, [r4, #21]
 800f488:	1bdb      	subs	r3, r3, r7
 800f48a:	f080 0001 	eor.w	r0, r0, #1
 800f48e:	60a2      	str	r2, [r4, #8]
 800f490:	6123      	str	r3, [r4, #16]
 800f492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f496:	2102      	movs	r1, #2
 800f498:	4620      	mov	r0, r4
 800f49a:	f001 f937 	bl	801070c <ucdr_check_final_buffer_behavior>
 800f49e:	b178      	cbz	r0, 800f4c0 <ucdr_deserialize_endian_uint16_t+0xa4>
 800f4a0:	2e01      	cmp	r6, #1
 800f4a2:	68a3      	ldr	r3, [r4, #8]
 800f4a4:	d011      	beq.n	800f4ca <ucdr_deserialize_endian_uint16_t+0xae>
 800f4a6:	785b      	ldrb	r3, [r3, #1]
 800f4a8:	702b      	strb	r3, [r5, #0]
 800f4aa:	68a3      	ldr	r3, [r4, #8]
 800f4ac:	781b      	ldrb	r3, [r3, #0]
 800f4ae:	706b      	strb	r3, [r5, #1]
 800f4b0:	2102      	movs	r1, #2
 800f4b2:	68a2      	ldr	r2, [r4, #8]
 800f4b4:	6923      	ldr	r3, [r4, #16]
 800f4b6:	440a      	add	r2, r1
 800f4b8:	7561      	strb	r1, [r4, #21]
 800f4ba:	440b      	add	r3, r1
 800f4bc:	60a2      	str	r2, [r4, #8]
 800f4be:	6123      	str	r3, [r4, #16]
 800f4c0:	7da0      	ldrb	r0, [r4, #22]
 800f4c2:	f080 0001 	eor.w	r0, r0, #1
 800f4c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4ca:	881b      	ldrh	r3, [r3, #0]
 800f4cc:	802b      	strh	r3, [r5, #0]
 800f4ce:	e7ef      	b.n	800f4b0 <ucdr_deserialize_endian_uint16_t+0x94>
 800f4d0:	68a2      	ldr	r2, [r4, #8]
 800f4d2:	6923      	ldr	r3, [r4, #16]
 800f4d4:	1bd2      	subs	r2, r2, r7
 800f4d6:	7da0      	ldrb	r0, [r4, #22]
 800f4d8:	1bdb      	subs	r3, r3, r7
 800f4da:	f884 8015 	strb.w	r8, [r4, #21]
 800f4de:	f080 0001 	eor.w	r0, r0, #1
 800f4e2:	60a2      	str	r2, [r4, #8]
 800f4e4:	6123      	str	r3, [r4, #16]
 800f4e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4ea:	68a3      	ldr	r3, [r4, #8]
 800f4ec:	781b      	ldrb	r3, [r3, #0]
 800f4ee:	706b      	strb	r3, [r5, #1]
 800f4f0:	e7c3      	b.n	800f47a <ucdr_deserialize_endian_uint16_t+0x5e>
 800f4f2:	4649      	mov	r1, r9
 800f4f4:	463a      	mov	r2, r7
 800f4f6:	4628      	mov	r0, r5
 800f4f8:	f00d fa55 	bl	801c9a6 <memcpy>
 800f4fc:	4652      	mov	r2, sl
 800f4fe:	19e8      	adds	r0, r5, r7
 800f500:	68a1      	ldr	r1, [r4, #8]
 800f502:	f00d fa50 	bl	801c9a6 <memcpy>
 800f506:	e7b8      	b.n	800f47a <ucdr_deserialize_endian_uint16_t+0x5e>

0800f508 <ucdr_serialize_uint32_t>:
 800f508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f50c:	b082      	sub	sp, #8
 800f50e:	4604      	mov	r4, r0
 800f510:	9101      	str	r1, [sp, #4]
 800f512:	2104      	movs	r1, #4
 800f514:	f001 f94e 	bl	80107b4 <ucdr_buffer_alignment>
 800f518:	4601      	mov	r1, r0
 800f51a:	4620      	mov	r0, r4
 800f51c:	7d67      	ldrb	r7, [r4, #21]
 800f51e:	f001 f991 	bl	8010844 <ucdr_advance_buffer>
 800f522:	2104      	movs	r1, #4
 800f524:	4620      	mov	r0, r4
 800f526:	f001 f8e5 	bl	80106f4 <ucdr_check_buffer_available_for>
 800f52a:	2800      	cmp	r0, #0
 800f52c:	d139      	bne.n	800f5a2 <ucdr_serialize_uint32_t+0x9a>
 800f52e:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800f532:	42ab      	cmp	r3, r5
 800f534:	d930      	bls.n	800f598 <ucdr_serialize_uint32_t+0x90>
 800f536:	1b5e      	subs	r6, r3, r5
 800f538:	60a3      	str	r3, [r4, #8]
 800f53a:	6923      	ldr	r3, [r4, #16]
 800f53c:	4620      	mov	r0, r4
 800f53e:	f1c6 0804 	rsb	r8, r6, #4
 800f542:	4433      	add	r3, r6
 800f544:	4641      	mov	r1, r8
 800f546:	6123      	str	r3, [r4, #16]
 800f548:	f001 f8e0 	bl	801070c <ucdr_check_final_buffer_behavior>
 800f54c:	2800      	cmp	r0, #0
 800f54e:	d04c      	beq.n	800f5ea <ucdr_serialize_uint32_t+0xe2>
 800f550:	7d23      	ldrb	r3, [r4, #20]
 800f552:	2b01      	cmp	r3, #1
 800f554:	d063      	beq.n	800f61e <ucdr_serialize_uint32_t+0x116>
 800f556:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f55a:	702b      	strb	r3, [r5, #0]
 800f55c:	2e00      	cmp	r6, #0
 800f55e:	d051      	beq.n	800f604 <ucdr_serialize_uint32_t+0xfc>
 800f560:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f564:	2e01      	cmp	r6, #1
 800f566:	706b      	strb	r3, [r5, #1]
 800f568:	d050      	beq.n	800f60c <ucdr_serialize_uint32_t+0x104>
 800f56a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f56e:	2e02      	cmp	r6, #2
 800f570:	70ab      	strb	r3, [r5, #2]
 800f572:	d04f      	beq.n	800f614 <ucdr_serialize_uint32_t+0x10c>
 800f574:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f578:	70eb      	strb	r3, [r5, #3]
 800f57a:	6923      	ldr	r3, [r4, #16]
 800f57c:	2104      	movs	r1, #4
 800f57e:	68a2      	ldr	r2, [r4, #8]
 800f580:	3304      	adds	r3, #4
 800f582:	7da0      	ldrb	r0, [r4, #22]
 800f584:	4442      	add	r2, r8
 800f586:	7561      	strb	r1, [r4, #21]
 800f588:	1b9e      	subs	r6, r3, r6
 800f58a:	f080 0001 	eor.w	r0, r0, #1
 800f58e:	60a2      	str	r2, [r4, #8]
 800f590:	6126      	str	r6, [r4, #16]
 800f592:	b002      	add	sp, #8
 800f594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f598:	2104      	movs	r1, #4
 800f59a:	4620      	mov	r0, r4
 800f59c:	f001 f8b6 	bl	801070c <ucdr_check_final_buffer_behavior>
 800f5a0:	b1d0      	cbz	r0, 800f5d8 <ucdr_serialize_uint32_t+0xd0>
 800f5a2:	7d23      	ldrb	r3, [r4, #20]
 800f5a4:	2b01      	cmp	r3, #1
 800f5a6:	68a3      	ldr	r3, [r4, #8]
 800f5a8:	d01c      	beq.n	800f5e4 <ucdr_serialize_uint32_t+0xdc>
 800f5aa:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800f5ae:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f5b2:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800f5b6:	7018      	strb	r0, [r3, #0]
 800f5b8:	68a3      	ldr	r3, [r4, #8]
 800f5ba:	705a      	strb	r2, [r3, #1]
 800f5bc:	68a3      	ldr	r3, [r4, #8]
 800f5be:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f5c2:	7099      	strb	r1, [r3, #2]
 800f5c4:	68a3      	ldr	r3, [r4, #8]
 800f5c6:	70da      	strb	r2, [r3, #3]
 800f5c8:	2104      	movs	r1, #4
 800f5ca:	68a2      	ldr	r2, [r4, #8]
 800f5cc:	6923      	ldr	r3, [r4, #16]
 800f5ce:	440a      	add	r2, r1
 800f5d0:	7561      	strb	r1, [r4, #21]
 800f5d2:	440b      	add	r3, r1
 800f5d4:	60a2      	str	r2, [r4, #8]
 800f5d6:	6123      	str	r3, [r4, #16]
 800f5d8:	7da0      	ldrb	r0, [r4, #22]
 800f5da:	f080 0001 	eor.w	r0, r0, #1
 800f5de:	b002      	add	sp, #8
 800f5e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5e4:	9a01      	ldr	r2, [sp, #4]
 800f5e6:	601a      	str	r2, [r3, #0]
 800f5e8:	e7ee      	b.n	800f5c8 <ucdr_serialize_uint32_t+0xc0>
 800f5ea:	68a2      	ldr	r2, [r4, #8]
 800f5ec:	6923      	ldr	r3, [r4, #16]
 800f5ee:	7da0      	ldrb	r0, [r4, #22]
 800f5f0:	1b92      	subs	r2, r2, r6
 800f5f2:	1b9b      	subs	r3, r3, r6
 800f5f4:	7567      	strb	r7, [r4, #21]
 800f5f6:	f080 0001 	eor.w	r0, r0, #1
 800f5fa:	60a2      	str	r2, [r4, #8]
 800f5fc:	6123      	str	r3, [r4, #16]
 800f5fe:	b002      	add	sp, #8
 800f600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f604:	68a3      	ldr	r3, [r4, #8]
 800f606:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f60a:	701a      	strb	r2, [r3, #0]
 800f60c:	68a3      	ldr	r3, [r4, #8]
 800f60e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f612:	701a      	strb	r2, [r3, #0]
 800f614:	68a3      	ldr	r3, [r4, #8]
 800f616:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f61a:	701a      	strb	r2, [r3, #0]
 800f61c:	e7ad      	b.n	800f57a <ucdr_serialize_uint32_t+0x72>
 800f61e:	4628      	mov	r0, r5
 800f620:	ad01      	add	r5, sp, #4
 800f622:	4632      	mov	r2, r6
 800f624:	4629      	mov	r1, r5
 800f626:	f00d f9be 	bl	801c9a6 <memcpy>
 800f62a:	4642      	mov	r2, r8
 800f62c:	19a9      	adds	r1, r5, r6
 800f62e:	68a0      	ldr	r0, [r4, #8]
 800f630:	f00d f9b9 	bl	801c9a6 <memcpy>
 800f634:	e7a1      	b.n	800f57a <ucdr_serialize_uint32_t+0x72>
 800f636:	bf00      	nop

0800f638 <ucdr_serialize_endian_uint32_t>:
 800f638:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f63c:	4604      	mov	r4, r0
 800f63e:	b083      	sub	sp, #12
 800f640:	460d      	mov	r5, r1
 800f642:	2104      	movs	r1, #4
 800f644:	9201      	str	r2, [sp, #4]
 800f646:	f001 f8b5 	bl	80107b4 <ucdr_buffer_alignment>
 800f64a:	4601      	mov	r1, r0
 800f64c:	4620      	mov	r0, r4
 800f64e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f652:	f001 f8f7 	bl	8010844 <ucdr_advance_buffer>
 800f656:	2104      	movs	r1, #4
 800f658:	4620      	mov	r0, r4
 800f65a:	f001 f84b 	bl	80106f4 <ucdr_check_buffer_available_for>
 800f65e:	2800      	cmp	r0, #0
 800f660:	d138      	bne.n	800f6d4 <ucdr_serialize_endian_uint32_t+0x9c>
 800f662:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800f666:	42b7      	cmp	r7, r6
 800f668:	d92f      	bls.n	800f6ca <ucdr_serialize_endian_uint32_t+0x92>
 800f66a:	6923      	ldr	r3, [r4, #16]
 800f66c:	4620      	mov	r0, r4
 800f66e:	60a7      	str	r7, [r4, #8]
 800f670:	1bbf      	subs	r7, r7, r6
 800f672:	443b      	add	r3, r7
 800f674:	f1c7 0904 	rsb	r9, r7, #4
 800f678:	6123      	str	r3, [r4, #16]
 800f67a:	4649      	mov	r1, r9
 800f67c:	f001 f846 	bl	801070c <ucdr_check_final_buffer_behavior>
 800f680:	2800      	cmp	r0, #0
 800f682:	d04a      	beq.n	800f71a <ucdr_serialize_endian_uint32_t+0xe2>
 800f684:	2d01      	cmp	r5, #1
 800f686:	d063      	beq.n	800f750 <ucdr_serialize_endian_uint32_t+0x118>
 800f688:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f68c:	7033      	strb	r3, [r6, #0]
 800f68e:	2f00      	cmp	r7, #0
 800f690:	d051      	beq.n	800f736 <ucdr_serialize_endian_uint32_t+0xfe>
 800f692:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f696:	2f01      	cmp	r7, #1
 800f698:	7073      	strb	r3, [r6, #1]
 800f69a:	d050      	beq.n	800f73e <ucdr_serialize_endian_uint32_t+0x106>
 800f69c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f6a0:	2f02      	cmp	r7, #2
 800f6a2:	70b3      	strb	r3, [r6, #2]
 800f6a4:	d04f      	beq.n	800f746 <ucdr_serialize_endian_uint32_t+0x10e>
 800f6a6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f6aa:	70f3      	strb	r3, [r6, #3]
 800f6ac:	6923      	ldr	r3, [r4, #16]
 800f6ae:	2104      	movs	r1, #4
 800f6b0:	68a2      	ldr	r2, [r4, #8]
 800f6b2:	7da0      	ldrb	r0, [r4, #22]
 800f6b4:	3304      	adds	r3, #4
 800f6b6:	444a      	add	r2, r9
 800f6b8:	7561      	strb	r1, [r4, #21]
 800f6ba:	1bdb      	subs	r3, r3, r7
 800f6bc:	f080 0001 	eor.w	r0, r0, #1
 800f6c0:	60a2      	str	r2, [r4, #8]
 800f6c2:	6123      	str	r3, [r4, #16]
 800f6c4:	b003      	add	sp, #12
 800f6c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f6ca:	2104      	movs	r1, #4
 800f6cc:	4620      	mov	r0, r4
 800f6ce:	f001 f81d 	bl	801070c <ucdr_check_final_buffer_behavior>
 800f6d2:	b1c8      	cbz	r0, 800f708 <ucdr_serialize_endian_uint32_t+0xd0>
 800f6d4:	2d01      	cmp	r5, #1
 800f6d6:	68a3      	ldr	r3, [r4, #8]
 800f6d8:	d01c      	beq.n	800f714 <ucdr_serialize_endian_uint32_t+0xdc>
 800f6da:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800f6de:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f6e2:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800f6e6:	7018      	strb	r0, [r3, #0]
 800f6e8:	68a3      	ldr	r3, [r4, #8]
 800f6ea:	705a      	strb	r2, [r3, #1]
 800f6ec:	68a3      	ldr	r3, [r4, #8]
 800f6ee:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f6f2:	7099      	strb	r1, [r3, #2]
 800f6f4:	68a3      	ldr	r3, [r4, #8]
 800f6f6:	70da      	strb	r2, [r3, #3]
 800f6f8:	2104      	movs	r1, #4
 800f6fa:	68a2      	ldr	r2, [r4, #8]
 800f6fc:	6923      	ldr	r3, [r4, #16]
 800f6fe:	440a      	add	r2, r1
 800f700:	7561      	strb	r1, [r4, #21]
 800f702:	440b      	add	r3, r1
 800f704:	60a2      	str	r2, [r4, #8]
 800f706:	6123      	str	r3, [r4, #16]
 800f708:	7da0      	ldrb	r0, [r4, #22]
 800f70a:	f080 0001 	eor.w	r0, r0, #1
 800f70e:	b003      	add	sp, #12
 800f710:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f714:	9a01      	ldr	r2, [sp, #4]
 800f716:	601a      	str	r2, [r3, #0]
 800f718:	e7ee      	b.n	800f6f8 <ucdr_serialize_endian_uint32_t+0xc0>
 800f71a:	68a2      	ldr	r2, [r4, #8]
 800f71c:	6923      	ldr	r3, [r4, #16]
 800f71e:	7da0      	ldrb	r0, [r4, #22]
 800f720:	1bd2      	subs	r2, r2, r7
 800f722:	1bdb      	subs	r3, r3, r7
 800f724:	f884 8015 	strb.w	r8, [r4, #21]
 800f728:	f080 0001 	eor.w	r0, r0, #1
 800f72c:	60a2      	str	r2, [r4, #8]
 800f72e:	6123      	str	r3, [r4, #16]
 800f730:	b003      	add	sp, #12
 800f732:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f736:	68a3      	ldr	r3, [r4, #8]
 800f738:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f73c:	701a      	strb	r2, [r3, #0]
 800f73e:	68a3      	ldr	r3, [r4, #8]
 800f740:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f744:	701a      	strb	r2, [r3, #0]
 800f746:	68a3      	ldr	r3, [r4, #8]
 800f748:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f74c:	701a      	strb	r2, [r3, #0]
 800f74e:	e7ad      	b.n	800f6ac <ucdr_serialize_endian_uint32_t+0x74>
 800f750:	ad01      	add	r5, sp, #4
 800f752:	463a      	mov	r2, r7
 800f754:	4630      	mov	r0, r6
 800f756:	4629      	mov	r1, r5
 800f758:	f00d f925 	bl	801c9a6 <memcpy>
 800f75c:	464a      	mov	r2, r9
 800f75e:	19e9      	adds	r1, r5, r7
 800f760:	68a0      	ldr	r0, [r4, #8]
 800f762:	f00d f920 	bl	801c9a6 <memcpy>
 800f766:	e7a1      	b.n	800f6ac <ucdr_serialize_endian_uint32_t+0x74>

0800f768 <ucdr_deserialize_uint32_t>:
 800f768:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f76c:	4604      	mov	r4, r0
 800f76e:	460d      	mov	r5, r1
 800f770:	2104      	movs	r1, #4
 800f772:	f001 f81f 	bl	80107b4 <ucdr_buffer_alignment>
 800f776:	4601      	mov	r1, r0
 800f778:	4620      	mov	r0, r4
 800f77a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f77e:	f001 f861 	bl	8010844 <ucdr_advance_buffer>
 800f782:	2104      	movs	r1, #4
 800f784:	4620      	mov	r0, r4
 800f786:	f000 ffb5 	bl	80106f4 <ucdr_check_buffer_available_for>
 800f78a:	2800      	cmp	r0, #0
 800f78c:	d138      	bne.n	800f800 <ucdr_deserialize_uint32_t+0x98>
 800f78e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800f792:	42b7      	cmp	r7, r6
 800f794:	d92f      	bls.n	800f7f6 <ucdr_deserialize_uint32_t+0x8e>
 800f796:	6923      	ldr	r3, [r4, #16]
 800f798:	4620      	mov	r0, r4
 800f79a:	60a7      	str	r7, [r4, #8]
 800f79c:	1bbf      	subs	r7, r7, r6
 800f79e:	443b      	add	r3, r7
 800f7a0:	f1c7 0904 	rsb	r9, r7, #4
 800f7a4:	6123      	str	r3, [r4, #16]
 800f7a6:	4649      	mov	r1, r9
 800f7a8:	f000 ffb0 	bl	801070c <ucdr_check_final_buffer_behavior>
 800f7ac:	2800      	cmp	r0, #0
 800f7ae:	d046      	beq.n	800f83e <ucdr_deserialize_uint32_t+0xd6>
 800f7b0:	7d23      	ldrb	r3, [r4, #20]
 800f7b2:	2b01      	cmp	r3, #1
 800f7b4:	d05c      	beq.n	800f870 <ucdr_deserialize_uint32_t+0x108>
 800f7b6:	78f3      	ldrb	r3, [r6, #3]
 800f7b8:	702b      	strb	r3, [r5, #0]
 800f7ba:	2f00      	cmp	r7, #0
 800f7bc:	d04c      	beq.n	800f858 <ucdr_deserialize_uint32_t+0xf0>
 800f7be:	78b3      	ldrb	r3, [r6, #2]
 800f7c0:	2f01      	cmp	r7, #1
 800f7c2:	706b      	strb	r3, [r5, #1]
 800f7c4:	f105 0302 	add.w	r3, r5, #2
 800f7c8:	d04a      	beq.n	800f860 <ucdr_deserialize_uint32_t+0xf8>
 800f7ca:	7873      	ldrb	r3, [r6, #1]
 800f7cc:	2f02      	cmp	r7, #2
 800f7ce:	70ab      	strb	r3, [r5, #2]
 800f7d0:	f105 0303 	add.w	r3, r5, #3
 800f7d4:	d048      	beq.n	800f868 <ucdr_deserialize_uint32_t+0x100>
 800f7d6:	7833      	ldrb	r3, [r6, #0]
 800f7d8:	70eb      	strb	r3, [r5, #3]
 800f7da:	6923      	ldr	r3, [r4, #16]
 800f7dc:	2104      	movs	r1, #4
 800f7de:	68a2      	ldr	r2, [r4, #8]
 800f7e0:	3304      	adds	r3, #4
 800f7e2:	7da0      	ldrb	r0, [r4, #22]
 800f7e4:	444a      	add	r2, r9
 800f7e6:	7561      	strb	r1, [r4, #21]
 800f7e8:	1bdb      	subs	r3, r3, r7
 800f7ea:	f080 0001 	eor.w	r0, r0, #1
 800f7ee:	60a2      	str	r2, [r4, #8]
 800f7f0:	6123      	str	r3, [r4, #16]
 800f7f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f7f6:	2104      	movs	r1, #4
 800f7f8:	4620      	mov	r0, r4
 800f7fa:	f000 ff87 	bl	801070c <ucdr_check_final_buffer_behavior>
 800f7fe:	b1b0      	cbz	r0, 800f82e <ucdr_deserialize_uint32_t+0xc6>
 800f800:	7d23      	ldrb	r3, [r4, #20]
 800f802:	2b01      	cmp	r3, #1
 800f804:	68a3      	ldr	r3, [r4, #8]
 800f806:	d017      	beq.n	800f838 <ucdr_deserialize_uint32_t+0xd0>
 800f808:	78db      	ldrb	r3, [r3, #3]
 800f80a:	702b      	strb	r3, [r5, #0]
 800f80c:	68a3      	ldr	r3, [r4, #8]
 800f80e:	789b      	ldrb	r3, [r3, #2]
 800f810:	706b      	strb	r3, [r5, #1]
 800f812:	68a3      	ldr	r3, [r4, #8]
 800f814:	785b      	ldrb	r3, [r3, #1]
 800f816:	70ab      	strb	r3, [r5, #2]
 800f818:	68a3      	ldr	r3, [r4, #8]
 800f81a:	781b      	ldrb	r3, [r3, #0]
 800f81c:	70eb      	strb	r3, [r5, #3]
 800f81e:	2104      	movs	r1, #4
 800f820:	68a2      	ldr	r2, [r4, #8]
 800f822:	6923      	ldr	r3, [r4, #16]
 800f824:	440a      	add	r2, r1
 800f826:	7561      	strb	r1, [r4, #21]
 800f828:	440b      	add	r3, r1
 800f82a:	60a2      	str	r2, [r4, #8]
 800f82c:	6123      	str	r3, [r4, #16]
 800f82e:	7da0      	ldrb	r0, [r4, #22]
 800f830:	f080 0001 	eor.w	r0, r0, #1
 800f834:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	602b      	str	r3, [r5, #0]
 800f83c:	e7ef      	b.n	800f81e <ucdr_deserialize_uint32_t+0xb6>
 800f83e:	68a2      	ldr	r2, [r4, #8]
 800f840:	6923      	ldr	r3, [r4, #16]
 800f842:	1bd2      	subs	r2, r2, r7
 800f844:	7da0      	ldrb	r0, [r4, #22]
 800f846:	1bdb      	subs	r3, r3, r7
 800f848:	f884 8015 	strb.w	r8, [r4, #21]
 800f84c:	f080 0001 	eor.w	r0, r0, #1
 800f850:	60a2      	str	r2, [r4, #8]
 800f852:	6123      	str	r3, [r4, #16]
 800f854:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f858:	68a3      	ldr	r3, [r4, #8]
 800f85a:	789b      	ldrb	r3, [r3, #2]
 800f85c:	706b      	strb	r3, [r5, #1]
 800f85e:	1cab      	adds	r3, r5, #2
 800f860:	68a2      	ldr	r2, [r4, #8]
 800f862:	7852      	ldrb	r2, [r2, #1]
 800f864:	f803 2b01 	strb.w	r2, [r3], #1
 800f868:	68a2      	ldr	r2, [r4, #8]
 800f86a:	7812      	ldrb	r2, [r2, #0]
 800f86c:	701a      	strb	r2, [r3, #0]
 800f86e:	e7b4      	b.n	800f7da <ucdr_deserialize_uint32_t+0x72>
 800f870:	4631      	mov	r1, r6
 800f872:	463a      	mov	r2, r7
 800f874:	4628      	mov	r0, r5
 800f876:	f00d f896 	bl	801c9a6 <memcpy>
 800f87a:	464a      	mov	r2, r9
 800f87c:	19e8      	adds	r0, r5, r7
 800f87e:	68a1      	ldr	r1, [r4, #8]
 800f880:	f00d f891 	bl	801c9a6 <memcpy>
 800f884:	e7a9      	b.n	800f7da <ucdr_deserialize_uint32_t+0x72>
 800f886:	bf00      	nop

0800f888 <ucdr_deserialize_endian_uint32_t>:
 800f888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f88c:	4604      	mov	r4, r0
 800f88e:	460e      	mov	r6, r1
 800f890:	2104      	movs	r1, #4
 800f892:	4615      	mov	r5, r2
 800f894:	f000 ff8e 	bl	80107b4 <ucdr_buffer_alignment>
 800f898:	4601      	mov	r1, r0
 800f89a:	4620      	mov	r0, r4
 800f89c:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f8a0:	f000 ffd0 	bl	8010844 <ucdr_advance_buffer>
 800f8a4:	2104      	movs	r1, #4
 800f8a6:	4620      	mov	r0, r4
 800f8a8:	f000 ff24 	bl	80106f4 <ucdr_check_buffer_available_for>
 800f8ac:	2800      	cmp	r0, #0
 800f8ae:	d13c      	bne.n	800f92a <ucdr_deserialize_endian_uint32_t+0xa2>
 800f8b0:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800f8b4:	42bb      	cmp	r3, r7
 800f8b6:	d933      	bls.n	800f920 <ucdr_deserialize_endian_uint32_t+0x98>
 800f8b8:	eba3 0907 	sub.w	r9, r3, r7
 800f8bc:	60a3      	str	r3, [r4, #8]
 800f8be:	6923      	ldr	r3, [r4, #16]
 800f8c0:	4620      	mov	r0, r4
 800f8c2:	f1c9 0a04 	rsb	sl, r9, #4
 800f8c6:	444b      	add	r3, r9
 800f8c8:	4651      	mov	r1, sl
 800f8ca:	6123      	str	r3, [r4, #16]
 800f8cc:	f000 ff1e 	bl	801070c <ucdr_check_final_buffer_behavior>
 800f8d0:	2800      	cmp	r0, #0
 800f8d2:	d048      	beq.n	800f966 <ucdr_deserialize_endian_uint32_t+0xde>
 800f8d4:	2e01      	cmp	r6, #1
 800f8d6:	d061      	beq.n	800f99c <ucdr_deserialize_endian_uint32_t+0x114>
 800f8d8:	78fb      	ldrb	r3, [r7, #3]
 800f8da:	702b      	strb	r3, [r5, #0]
 800f8dc:	f1b9 0f00 	cmp.w	r9, #0
 800f8e0:	d050      	beq.n	800f984 <ucdr_deserialize_endian_uint32_t+0xfc>
 800f8e2:	78bb      	ldrb	r3, [r7, #2]
 800f8e4:	f1b9 0f01 	cmp.w	r9, #1
 800f8e8:	706b      	strb	r3, [r5, #1]
 800f8ea:	f105 0302 	add.w	r3, r5, #2
 800f8ee:	d04d      	beq.n	800f98c <ucdr_deserialize_endian_uint32_t+0x104>
 800f8f0:	787b      	ldrb	r3, [r7, #1]
 800f8f2:	f1b9 0f02 	cmp.w	r9, #2
 800f8f6:	70ab      	strb	r3, [r5, #2]
 800f8f8:	f105 0303 	add.w	r3, r5, #3
 800f8fc:	d04a      	beq.n	800f994 <ucdr_deserialize_endian_uint32_t+0x10c>
 800f8fe:	783b      	ldrb	r3, [r7, #0]
 800f900:	70eb      	strb	r3, [r5, #3]
 800f902:	6923      	ldr	r3, [r4, #16]
 800f904:	2104      	movs	r1, #4
 800f906:	68a2      	ldr	r2, [r4, #8]
 800f908:	3304      	adds	r3, #4
 800f90a:	7da0      	ldrb	r0, [r4, #22]
 800f90c:	4452      	add	r2, sl
 800f90e:	7561      	strb	r1, [r4, #21]
 800f910:	eba3 0309 	sub.w	r3, r3, r9
 800f914:	f080 0001 	eor.w	r0, r0, #1
 800f918:	60a2      	str	r2, [r4, #8]
 800f91a:	6123      	str	r3, [r4, #16]
 800f91c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f920:	2104      	movs	r1, #4
 800f922:	4620      	mov	r0, r4
 800f924:	f000 fef2 	bl	801070c <ucdr_check_final_buffer_behavior>
 800f928:	b1a8      	cbz	r0, 800f956 <ucdr_deserialize_endian_uint32_t+0xce>
 800f92a:	2e01      	cmp	r6, #1
 800f92c:	68a3      	ldr	r3, [r4, #8]
 800f92e:	d017      	beq.n	800f960 <ucdr_deserialize_endian_uint32_t+0xd8>
 800f930:	78db      	ldrb	r3, [r3, #3]
 800f932:	702b      	strb	r3, [r5, #0]
 800f934:	68a3      	ldr	r3, [r4, #8]
 800f936:	789b      	ldrb	r3, [r3, #2]
 800f938:	706b      	strb	r3, [r5, #1]
 800f93a:	68a3      	ldr	r3, [r4, #8]
 800f93c:	785b      	ldrb	r3, [r3, #1]
 800f93e:	70ab      	strb	r3, [r5, #2]
 800f940:	68a3      	ldr	r3, [r4, #8]
 800f942:	781b      	ldrb	r3, [r3, #0]
 800f944:	70eb      	strb	r3, [r5, #3]
 800f946:	2104      	movs	r1, #4
 800f948:	68a2      	ldr	r2, [r4, #8]
 800f94a:	6923      	ldr	r3, [r4, #16]
 800f94c:	440a      	add	r2, r1
 800f94e:	7561      	strb	r1, [r4, #21]
 800f950:	440b      	add	r3, r1
 800f952:	60a2      	str	r2, [r4, #8]
 800f954:	6123      	str	r3, [r4, #16]
 800f956:	7da0      	ldrb	r0, [r4, #22]
 800f958:	f080 0001 	eor.w	r0, r0, #1
 800f95c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	602b      	str	r3, [r5, #0]
 800f964:	e7ef      	b.n	800f946 <ucdr_deserialize_endian_uint32_t+0xbe>
 800f966:	68a2      	ldr	r2, [r4, #8]
 800f968:	6923      	ldr	r3, [r4, #16]
 800f96a:	eba2 0209 	sub.w	r2, r2, r9
 800f96e:	7da0      	ldrb	r0, [r4, #22]
 800f970:	eba3 0309 	sub.w	r3, r3, r9
 800f974:	f884 8015 	strb.w	r8, [r4, #21]
 800f978:	f080 0001 	eor.w	r0, r0, #1
 800f97c:	60a2      	str	r2, [r4, #8]
 800f97e:	6123      	str	r3, [r4, #16]
 800f980:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f984:	68a3      	ldr	r3, [r4, #8]
 800f986:	789b      	ldrb	r3, [r3, #2]
 800f988:	706b      	strb	r3, [r5, #1]
 800f98a:	1cab      	adds	r3, r5, #2
 800f98c:	68a2      	ldr	r2, [r4, #8]
 800f98e:	7852      	ldrb	r2, [r2, #1]
 800f990:	f803 2b01 	strb.w	r2, [r3], #1
 800f994:	68a2      	ldr	r2, [r4, #8]
 800f996:	7812      	ldrb	r2, [r2, #0]
 800f998:	701a      	strb	r2, [r3, #0]
 800f99a:	e7b2      	b.n	800f902 <ucdr_deserialize_endian_uint32_t+0x7a>
 800f99c:	4639      	mov	r1, r7
 800f99e:	464a      	mov	r2, r9
 800f9a0:	4628      	mov	r0, r5
 800f9a2:	f00d f800 	bl	801c9a6 <memcpy>
 800f9a6:	4652      	mov	r2, sl
 800f9a8:	eb05 0009 	add.w	r0, r5, r9
 800f9ac:	68a1      	ldr	r1, [r4, #8]
 800f9ae:	f00c fffa 	bl	801c9a6 <memcpy>
 800f9b2:	e7a6      	b.n	800f902 <ucdr_deserialize_endian_uint32_t+0x7a>

0800f9b4 <ucdr_serialize_uint64_t>:
 800f9b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9b8:	4604      	mov	r4, r0
 800f9ba:	b082      	sub	sp, #8
 800f9bc:	2108      	movs	r1, #8
 800f9be:	e9cd 2300 	strd	r2, r3, [sp]
 800f9c2:	f000 fef7 	bl	80107b4 <ucdr_buffer_alignment>
 800f9c6:	4601      	mov	r1, r0
 800f9c8:	4620      	mov	r0, r4
 800f9ca:	7d67      	ldrb	r7, [r4, #21]
 800f9cc:	f000 ff3a 	bl	8010844 <ucdr_advance_buffer>
 800f9d0:	2108      	movs	r1, #8
 800f9d2:	4620      	mov	r0, r4
 800f9d4:	f000 fe8e 	bl	80106f4 <ucdr_check_buffer_available_for>
 800f9d8:	2800      	cmp	r0, #0
 800f9da:	d14e      	bne.n	800fa7a <ucdr_serialize_uint64_t+0xc6>
 800f9dc:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800f9e0:	42ab      	cmp	r3, r5
 800f9e2:	d945      	bls.n	800fa70 <ucdr_serialize_uint64_t+0xbc>
 800f9e4:	1b5e      	subs	r6, r3, r5
 800f9e6:	60a3      	str	r3, [r4, #8]
 800f9e8:	6923      	ldr	r3, [r4, #16]
 800f9ea:	4620      	mov	r0, r4
 800f9ec:	f1c6 0808 	rsb	r8, r6, #8
 800f9f0:	4433      	add	r3, r6
 800f9f2:	4641      	mov	r1, r8
 800f9f4:	6123      	str	r3, [r4, #16]
 800f9f6:	f000 fe89 	bl	801070c <ucdr_check_final_buffer_behavior>
 800f9fa:	2800      	cmp	r0, #0
 800f9fc:	d074      	beq.n	800fae8 <ucdr_serialize_uint64_t+0x134>
 800f9fe:	7d23      	ldrb	r3, [r4, #20]
 800fa00:	2b01      	cmp	r3, #1
 800fa02:	f000 809b 	beq.w	800fb3c <ucdr_serialize_uint64_t+0x188>
 800fa06:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fa0a:	702b      	strb	r3, [r5, #0]
 800fa0c:	2e00      	cmp	r6, #0
 800fa0e:	d078      	beq.n	800fb02 <ucdr_serialize_uint64_t+0x14e>
 800fa10:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800fa14:	2e01      	cmp	r6, #1
 800fa16:	706b      	strb	r3, [r5, #1]
 800fa18:	d077      	beq.n	800fb0a <ucdr_serialize_uint64_t+0x156>
 800fa1a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800fa1e:	2e02      	cmp	r6, #2
 800fa20:	70ab      	strb	r3, [r5, #2]
 800fa22:	d076      	beq.n	800fb12 <ucdr_serialize_uint64_t+0x15e>
 800fa24:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800fa28:	2e03      	cmp	r6, #3
 800fa2a:	70eb      	strb	r3, [r5, #3]
 800fa2c:	d075      	beq.n	800fb1a <ucdr_serialize_uint64_t+0x166>
 800fa2e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800fa32:	2e04      	cmp	r6, #4
 800fa34:	712b      	strb	r3, [r5, #4]
 800fa36:	d074      	beq.n	800fb22 <ucdr_serialize_uint64_t+0x16e>
 800fa38:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800fa3c:	2e05      	cmp	r6, #5
 800fa3e:	716b      	strb	r3, [r5, #5]
 800fa40:	d073      	beq.n	800fb2a <ucdr_serialize_uint64_t+0x176>
 800fa42:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800fa46:	2e06      	cmp	r6, #6
 800fa48:	71ab      	strb	r3, [r5, #6]
 800fa4a:	d072      	beq.n	800fb32 <ucdr_serialize_uint64_t+0x17e>
 800fa4c:	f89d 3000 	ldrb.w	r3, [sp]
 800fa50:	71eb      	strb	r3, [r5, #7]
 800fa52:	6923      	ldr	r3, [r4, #16]
 800fa54:	2108      	movs	r1, #8
 800fa56:	68a2      	ldr	r2, [r4, #8]
 800fa58:	3308      	adds	r3, #8
 800fa5a:	7da0      	ldrb	r0, [r4, #22]
 800fa5c:	4442      	add	r2, r8
 800fa5e:	7561      	strb	r1, [r4, #21]
 800fa60:	1b9e      	subs	r6, r3, r6
 800fa62:	f080 0001 	eor.w	r0, r0, #1
 800fa66:	60a2      	str	r2, [r4, #8]
 800fa68:	6126      	str	r6, [r4, #16]
 800fa6a:	b002      	add	sp, #8
 800fa6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa70:	2108      	movs	r1, #8
 800fa72:	4620      	mov	r0, r4
 800fa74:	f000 fe4a 	bl	801070c <ucdr_check_final_buffer_behavior>
 800fa78:	b350      	cbz	r0, 800fad0 <ucdr_serialize_uint64_t+0x11c>
 800fa7a:	7d23      	ldrb	r3, [r4, #20]
 800fa7c:	2b01      	cmp	r3, #1
 800fa7e:	d02d      	beq.n	800fadc <ucdr_serialize_uint64_t+0x128>
 800fa80:	68a3      	ldr	r3, [r4, #8]
 800fa82:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800fa86:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fa8a:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800fa8e:	7018      	strb	r0, [r3, #0]
 800fa90:	68a3      	ldr	r3, [r4, #8]
 800fa92:	705a      	strb	r2, [r3, #1]
 800fa94:	68a3      	ldr	r3, [r4, #8]
 800fa96:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800fa9a:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800fa9e:	7099      	strb	r1, [r3, #2]
 800faa0:	68a3      	ldr	r3, [r4, #8]
 800faa2:	70da      	strb	r2, [r3, #3]
 800faa4:	68a3      	ldr	r3, [r4, #8]
 800faa6:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800faaa:	f89d 1001 	ldrb.w	r1, [sp, #1]
 800faae:	7118      	strb	r0, [r3, #4]
 800fab0:	68a3      	ldr	r3, [r4, #8]
 800fab2:	715a      	strb	r2, [r3, #5]
 800fab4:	68a3      	ldr	r3, [r4, #8]
 800fab6:	f89d 2000 	ldrb.w	r2, [sp]
 800faba:	7199      	strb	r1, [r3, #6]
 800fabc:	68a3      	ldr	r3, [r4, #8]
 800fabe:	71da      	strb	r2, [r3, #7]
 800fac0:	2108      	movs	r1, #8
 800fac2:	68a2      	ldr	r2, [r4, #8]
 800fac4:	6923      	ldr	r3, [r4, #16]
 800fac6:	440a      	add	r2, r1
 800fac8:	7561      	strb	r1, [r4, #21]
 800faca:	440b      	add	r3, r1
 800facc:	60a2      	str	r2, [r4, #8]
 800face:	6123      	str	r3, [r4, #16]
 800fad0:	7da0      	ldrb	r0, [r4, #22]
 800fad2:	f080 0001 	eor.w	r0, r0, #1
 800fad6:	b002      	add	sp, #8
 800fad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fadc:	466b      	mov	r3, sp
 800fade:	68a2      	ldr	r2, [r4, #8]
 800fae0:	cb03      	ldmia	r3!, {r0, r1}
 800fae2:	6010      	str	r0, [r2, #0]
 800fae4:	6051      	str	r1, [r2, #4]
 800fae6:	e7eb      	b.n	800fac0 <ucdr_serialize_uint64_t+0x10c>
 800fae8:	68a2      	ldr	r2, [r4, #8]
 800faea:	6923      	ldr	r3, [r4, #16]
 800faec:	7da0      	ldrb	r0, [r4, #22]
 800faee:	1b92      	subs	r2, r2, r6
 800faf0:	1b9b      	subs	r3, r3, r6
 800faf2:	7567      	strb	r7, [r4, #21]
 800faf4:	f080 0001 	eor.w	r0, r0, #1
 800faf8:	60a2      	str	r2, [r4, #8]
 800fafa:	6123      	str	r3, [r4, #16]
 800fafc:	b002      	add	sp, #8
 800fafe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb02:	68a3      	ldr	r3, [r4, #8]
 800fb04:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fb08:	701a      	strb	r2, [r3, #0]
 800fb0a:	68a3      	ldr	r3, [r4, #8]
 800fb0c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800fb10:	701a      	strb	r2, [r3, #0]
 800fb12:	68a3      	ldr	r3, [r4, #8]
 800fb14:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800fb18:	701a      	strb	r2, [r3, #0]
 800fb1a:	68a3      	ldr	r3, [r4, #8]
 800fb1c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800fb20:	701a      	strb	r2, [r3, #0]
 800fb22:	68a3      	ldr	r3, [r4, #8]
 800fb24:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800fb28:	701a      	strb	r2, [r3, #0]
 800fb2a:	68a3      	ldr	r3, [r4, #8]
 800fb2c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800fb30:	701a      	strb	r2, [r3, #0]
 800fb32:	68a3      	ldr	r3, [r4, #8]
 800fb34:	f89d 2000 	ldrb.w	r2, [sp]
 800fb38:	701a      	strb	r2, [r3, #0]
 800fb3a:	e78a      	b.n	800fa52 <ucdr_serialize_uint64_t+0x9e>
 800fb3c:	4628      	mov	r0, r5
 800fb3e:	466d      	mov	r5, sp
 800fb40:	4632      	mov	r2, r6
 800fb42:	4629      	mov	r1, r5
 800fb44:	f00c ff2f 	bl	801c9a6 <memcpy>
 800fb48:	4642      	mov	r2, r8
 800fb4a:	19a9      	adds	r1, r5, r6
 800fb4c:	68a0      	ldr	r0, [r4, #8]
 800fb4e:	f00c ff2a 	bl	801c9a6 <memcpy>
 800fb52:	e77e      	b.n	800fa52 <ucdr_serialize_uint64_t+0x9e>

0800fb54 <ucdr_serialize_int16_t>:
 800fb54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb58:	460b      	mov	r3, r1
 800fb5a:	b082      	sub	sp, #8
 800fb5c:	4604      	mov	r4, r0
 800fb5e:	2102      	movs	r1, #2
 800fb60:	f8ad 3006 	strh.w	r3, [sp, #6]
 800fb64:	f000 fe26 	bl	80107b4 <ucdr_buffer_alignment>
 800fb68:	4601      	mov	r1, r0
 800fb6a:	4620      	mov	r0, r4
 800fb6c:	7d67      	ldrb	r7, [r4, #21]
 800fb6e:	f000 fe69 	bl	8010844 <ucdr_advance_buffer>
 800fb72:	2102      	movs	r1, #2
 800fb74:	4620      	mov	r0, r4
 800fb76:	f000 fdbd 	bl	80106f4 <ucdr_check_buffer_available_for>
 800fb7a:	bb78      	cbnz	r0, 800fbdc <ucdr_serialize_int16_t+0x88>
 800fb7c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800fb80:	42ab      	cmp	r3, r5
 800fb82:	d926      	bls.n	800fbd2 <ucdr_serialize_int16_t+0x7e>
 800fb84:	1b5e      	subs	r6, r3, r5
 800fb86:	60a3      	str	r3, [r4, #8]
 800fb88:	6923      	ldr	r3, [r4, #16]
 800fb8a:	4620      	mov	r0, r4
 800fb8c:	f1c6 0802 	rsb	r8, r6, #2
 800fb90:	4433      	add	r3, r6
 800fb92:	4641      	mov	r1, r8
 800fb94:	6123      	str	r3, [r4, #16]
 800fb96:	f000 fdb9 	bl	801070c <ucdr_check_final_buffer_behavior>
 800fb9a:	2800      	cmp	r0, #0
 800fb9c:	d03b      	beq.n	800fc16 <ucdr_serialize_int16_t+0xc2>
 800fb9e:	7d23      	ldrb	r3, [r4, #20]
 800fba0:	2b01      	cmp	r3, #1
 800fba2:	d04a      	beq.n	800fc3a <ucdr_serialize_int16_t+0xe6>
 800fba4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fba8:	702b      	strb	r3, [r5, #0]
 800fbaa:	2e00      	cmp	r6, #0
 800fbac:	d040      	beq.n	800fc30 <ucdr_serialize_int16_t+0xdc>
 800fbae:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800fbb2:	706b      	strb	r3, [r5, #1]
 800fbb4:	6923      	ldr	r3, [r4, #16]
 800fbb6:	2102      	movs	r1, #2
 800fbb8:	68a2      	ldr	r2, [r4, #8]
 800fbba:	3302      	adds	r3, #2
 800fbbc:	7da0      	ldrb	r0, [r4, #22]
 800fbbe:	4442      	add	r2, r8
 800fbc0:	7561      	strb	r1, [r4, #21]
 800fbc2:	1b9e      	subs	r6, r3, r6
 800fbc4:	f080 0001 	eor.w	r0, r0, #1
 800fbc8:	60a2      	str	r2, [r4, #8]
 800fbca:	6126      	str	r6, [r4, #16]
 800fbcc:	b002      	add	sp, #8
 800fbce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fbd2:	2102      	movs	r1, #2
 800fbd4:	4620      	mov	r0, r4
 800fbd6:	f000 fd99 	bl	801070c <ucdr_check_final_buffer_behavior>
 800fbda:	b190      	cbz	r0, 800fc02 <ucdr_serialize_int16_t+0xae>
 800fbdc:	7d23      	ldrb	r3, [r4, #20]
 800fbde:	2b01      	cmp	r3, #1
 800fbe0:	68a3      	ldr	r3, [r4, #8]
 800fbe2:	d014      	beq.n	800fc0e <ucdr_serialize_int16_t+0xba>
 800fbe4:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800fbe8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fbec:	7019      	strb	r1, [r3, #0]
 800fbee:	68a3      	ldr	r3, [r4, #8]
 800fbf0:	705a      	strb	r2, [r3, #1]
 800fbf2:	2102      	movs	r1, #2
 800fbf4:	68a2      	ldr	r2, [r4, #8]
 800fbf6:	6923      	ldr	r3, [r4, #16]
 800fbf8:	440a      	add	r2, r1
 800fbfa:	7561      	strb	r1, [r4, #21]
 800fbfc:	440b      	add	r3, r1
 800fbfe:	60a2      	str	r2, [r4, #8]
 800fc00:	6123      	str	r3, [r4, #16]
 800fc02:	7da0      	ldrb	r0, [r4, #22]
 800fc04:	f080 0001 	eor.w	r0, r0, #1
 800fc08:	b002      	add	sp, #8
 800fc0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc0e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800fc12:	801a      	strh	r2, [r3, #0]
 800fc14:	e7ed      	b.n	800fbf2 <ucdr_serialize_int16_t+0x9e>
 800fc16:	68a2      	ldr	r2, [r4, #8]
 800fc18:	6923      	ldr	r3, [r4, #16]
 800fc1a:	7da0      	ldrb	r0, [r4, #22]
 800fc1c:	1b92      	subs	r2, r2, r6
 800fc1e:	1b9b      	subs	r3, r3, r6
 800fc20:	7567      	strb	r7, [r4, #21]
 800fc22:	f080 0001 	eor.w	r0, r0, #1
 800fc26:	60a2      	str	r2, [r4, #8]
 800fc28:	6123      	str	r3, [r4, #16]
 800fc2a:	b002      	add	sp, #8
 800fc2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc30:	68a3      	ldr	r3, [r4, #8]
 800fc32:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fc36:	701a      	strb	r2, [r3, #0]
 800fc38:	e7bc      	b.n	800fbb4 <ucdr_serialize_int16_t+0x60>
 800fc3a:	4628      	mov	r0, r5
 800fc3c:	f10d 0506 	add.w	r5, sp, #6
 800fc40:	4632      	mov	r2, r6
 800fc42:	4629      	mov	r1, r5
 800fc44:	f00c feaf 	bl	801c9a6 <memcpy>
 800fc48:	4642      	mov	r2, r8
 800fc4a:	19a9      	adds	r1, r5, r6
 800fc4c:	68a0      	ldr	r0, [r4, #8]
 800fc4e:	f00c feaa 	bl	801c9a6 <memcpy>
 800fc52:	e7af      	b.n	800fbb4 <ucdr_serialize_int16_t+0x60>

0800fc54 <ucdr_serialize_endian_int16_t>:
 800fc54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fc58:	4604      	mov	r4, r0
 800fc5a:	b083      	sub	sp, #12
 800fc5c:	460d      	mov	r5, r1
 800fc5e:	2102      	movs	r1, #2
 800fc60:	f8ad 2006 	strh.w	r2, [sp, #6]
 800fc64:	f000 fda6 	bl	80107b4 <ucdr_buffer_alignment>
 800fc68:	4601      	mov	r1, r0
 800fc6a:	4620      	mov	r0, r4
 800fc6c:	f894 8015 	ldrb.w	r8, [r4, #21]
 800fc70:	f000 fde8 	bl	8010844 <ucdr_advance_buffer>
 800fc74:	2102      	movs	r1, #2
 800fc76:	4620      	mov	r0, r4
 800fc78:	f000 fd3c 	bl	80106f4 <ucdr_check_buffer_available_for>
 800fc7c:	bb70      	cbnz	r0, 800fcdc <ucdr_serialize_endian_int16_t+0x88>
 800fc7e:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800fc82:	42be      	cmp	r6, r7
 800fc84:	d925      	bls.n	800fcd2 <ucdr_serialize_endian_int16_t+0x7e>
 800fc86:	6923      	ldr	r3, [r4, #16]
 800fc88:	4620      	mov	r0, r4
 800fc8a:	60a6      	str	r6, [r4, #8]
 800fc8c:	1bf6      	subs	r6, r6, r7
 800fc8e:	4433      	add	r3, r6
 800fc90:	f1c6 0902 	rsb	r9, r6, #2
 800fc94:	6123      	str	r3, [r4, #16]
 800fc96:	4649      	mov	r1, r9
 800fc98:	f000 fd38 	bl	801070c <ucdr_check_final_buffer_behavior>
 800fc9c:	2800      	cmp	r0, #0
 800fc9e:	d039      	beq.n	800fd14 <ucdr_serialize_endian_int16_t+0xc0>
 800fca0:	2d01      	cmp	r5, #1
 800fca2:	d04a      	beq.n	800fd3a <ucdr_serialize_endian_int16_t+0xe6>
 800fca4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fca8:	703b      	strb	r3, [r7, #0]
 800fcaa:	2e00      	cmp	r6, #0
 800fcac:	d040      	beq.n	800fd30 <ucdr_serialize_endian_int16_t+0xdc>
 800fcae:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800fcb2:	707b      	strb	r3, [r7, #1]
 800fcb4:	6923      	ldr	r3, [r4, #16]
 800fcb6:	2102      	movs	r1, #2
 800fcb8:	68a2      	ldr	r2, [r4, #8]
 800fcba:	7da0      	ldrb	r0, [r4, #22]
 800fcbc:	3302      	adds	r3, #2
 800fcbe:	444a      	add	r2, r9
 800fcc0:	7561      	strb	r1, [r4, #21]
 800fcc2:	1b9b      	subs	r3, r3, r6
 800fcc4:	f080 0001 	eor.w	r0, r0, #1
 800fcc8:	60a2      	str	r2, [r4, #8]
 800fcca:	6123      	str	r3, [r4, #16]
 800fccc:	b003      	add	sp, #12
 800fcce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fcd2:	2102      	movs	r1, #2
 800fcd4:	4620      	mov	r0, r4
 800fcd6:	f000 fd19 	bl	801070c <ucdr_check_final_buffer_behavior>
 800fcda:	b188      	cbz	r0, 800fd00 <ucdr_serialize_endian_int16_t+0xac>
 800fcdc:	2d01      	cmp	r5, #1
 800fcde:	68a3      	ldr	r3, [r4, #8]
 800fce0:	d014      	beq.n	800fd0c <ucdr_serialize_endian_int16_t+0xb8>
 800fce2:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800fce6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fcea:	7019      	strb	r1, [r3, #0]
 800fcec:	68a3      	ldr	r3, [r4, #8]
 800fcee:	705a      	strb	r2, [r3, #1]
 800fcf0:	2102      	movs	r1, #2
 800fcf2:	68a2      	ldr	r2, [r4, #8]
 800fcf4:	6923      	ldr	r3, [r4, #16]
 800fcf6:	440a      	add	r2, r1
 800fcf8:	7561      	strb	r1, [r4, #21]
 800fcfa:	440b      	add	r3, r1
 800fcfc:	60a2      	str	r2, [r4, #8]
 800fcfe:	6123      	str	r3, [r4, #16]
 800fd00:	7da0      	ldrb	r0, [r4, #22]
 800fd02:	f080 0001 	eor.w	r0, r0, #1
 800fd06:	b003      	add	sp, #12
 800fd08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fd0c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800fd10:	801a      	strh	r2, [r3, #0]
 800fd12:	e7ed      	b.n	800fcf0 <ucdr_serialize_endian_int16_t+0x9c>
 800fd14:	68a2      	ldr	r2, [r4, #8]
 800fd16:	6923      	ldr	r3, [r4, #16]
 800fd18:	7da0      	ldrb	r0, [r4, #22]
 800fd1a:	1b92      	subs	r2, r2, r6
 800fd1c:	1b9b      	subs	r3, r3, r6
 800fd1e:	f884 8015 	strb.w	r8, [r4, #21]
 800fd22:	f080 0001 	eor.w	r0, r0, #1
 800fd26:	60a2      	str	r2, [r4, #8]
 800fd28:	6123      	str	r3, [r4, #16]
 800fd2a:	b003      	add	sp, #12
 800fd2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fd30:	68a3      	ldr	r3, [r4, #8]
 800fd32:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fd36:	701a      	strb	r2, [r3, #0]
 800fd38:	e7bc      	b.n	800fcb4 <ucdr_serialize_endian_int16_t+0x60>
 800fd3a:	f10d 0506 	add.w	r5, sp, #6
 800fd3e:	4632      	mov	r2, r6
 800fd40:	4638      	mov	r0, r7
 800fd42:	4629      	mov	r1, r5
 800fd44:	f00c fe2f 	bl	801c9a6 <memcpy>
 800fd48:	464a      	mov	r2, r9
 800fd4a:	19a9      	adds	r1, r5, r6
 800fd4c:	68a0      	ldr	r0, [r4, #8]
 800fd4e:	f00c fe2a 	bl	801c9a6 <memcpy>
 800fd52:	e7af      	b.n	800fcb4 <ucdr_serialize_endian_int16_t+0x60>

0800fd54 <ucdr_deserialize_int16_t>:
 800fd54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fd58:	4604      	mov	r4, r0
 800fd5a:	460d      	mov	r5, r1
 800fd5c:	2102      	movs	r1, #2
 800fd5e:	f000 fd29 	bl	80107b4 <ucdr_buffer_alignment>
 800fd62:	4601      	mov	r1, r0
 800fd64:	4620      	mov	r0, r4
 800fd66:	f894 8015 	ldrb.w	r8, [r4, #21]
 800fd6a:	f000 fd6b 	bl	8010844 <ucdr_advance_buffer>
 800fd6e:	2102      	movs	r1, #2
 800fd70:	4620      	mov	r0, r4
 800fd72:	f000 fcbf 	bl	80106f4 <ucdr_check_buffer_available_for>
 800fd76:	bb60      	cbnz	r0, 800fdd2 <ucdr_deserialize_int16_t+0x7e>
 800fd78:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800fd7c:	42be      	cmp	r6, r7
 800fd7e:	d923      	bls.n	800fdc8 <ucdr_deserialize_int16_t+0x74>
 800fd80:	6923      	ldr	r3, [r4, #16]
 800fd82:	4620      	mov	r0, r4
 800fd84:	60a6      	str	r6, [r4, #8]
 800fd86:	1bf6      	subs	r6, r6, r7
 800fd88:	4433      	add	r3, r6
 800fd8a:	f1c6 0902 	rsb	r9, r6, #2
 800fd8e:	6123      	str	r3, [r4, #16]
 800fd90:	4649      	mov	r1, r9
 800fd92:	f000 fcbb 	bl	801070c <ucdr_check_final_buffer_behavior>
 800fd96:	2800      	cmp	r0, #0
 800fd98:	d034      	beq.n	800fe04 <ucdr_deserialize_int16_t+0xb0>
 800fd9a:	7d23      	ldrb	r3, [r4, #20]
 800fd9c:	2b01      	cmp	r3, #1
 800fd9e:	d042      	beq.n	800fe26 <ucdr_deserialize_int16_t+0xd2>
 800fda0:	787b      	ldrb	r3, [r7, #1]
 800fda2:	702b      	strb	r3, [r5, #0]
 800fda4:	2e00      	cmp	r6, #0
 800fda6:	d03a      	beq.n	800fe1e <ucdr_deserialize_int16_t+0xca>
 800fda8:	783b      	ldrb	r3, [r7, #0]
 800fdaa:	706b      	strb	r3, [r5, #1]
 800fdac:	6923      	ldr	r3, [r4, #16]
 800fdae:	2102      	movs	r1, #2
 800fdb0:	68a2      	ldr	r2, [r4, #8]
 800fdb2:	3302      	adds	r3, #2
 800fdb4:	7da0      	ldrb	r0, [r4, #22]
 800fdb6:	444a      	add	r2, r9
 800fdb8:	7561      	strb	r1, [r4, #21]
 800fdba:	1b9b      	subs	r3, r3, r6
 800fdbc:	f080 0001 	eor.w	r0, r0, #1
 800fdc0:	60a2      	str	r2, [r4, #8]
 800fdc2:	6123      	str	r3, [r4, #16]
 800fdc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fdc8:	2102      	movs	r1, #2
 800fdca:	4620      	mov	r0, r4
 800fdcc:	f000 fc9e 	bl	801070c <ucdr_check_final_buffer_behavior>
 800fdd0:	b180      	cbz	r0, 800fdf4 <ucdr_deserialize_int16_t+0xa0>
 800fdd2:	7d23      	ldrb	r3, [r4, #20]
 800fdd4:	2b01      	cmp	r3, #1
 800fdd6:	68a3      	ldr	r3, [r4, #8]
 800fdd8:	d011      	beq.n	800fdfe <ucdr_deserialize_int16_t+0xaa>
 800fdda:	785b      	ldrb	r3, [r3, #1]
 800fddc:	702b      	strb	r3, [r5, #0]
 800fdde:	68a3      	ldr	r3, [r4, #8]
 800fde0:	781b      	ldrb	r3, [r3, #0]
 800fde2:	706b      	strb	r3, [r5, #1]
 800fde4:	2102      	movs	r1, #2
 800fde6:	68a2      	ldr	r2, [r4, #8]
 800fde8:	6923      	ldr	r3, [r4, #16]
 800fdea:	440a      	add	r2, r1
 800fdec:	7561      	strb	r1, [r4, #21]
 800fdee:	440b      	add	r3, r1
 800fdf0:	60a2      	str	r2, [r4, #8]
 800fdf2:	6123      	str	r3, [r4, #16]
 800fdf4:	7da0      	ldrb	r0, [r4, #22]
 800fdf6:	f080 0001 	eor.w	r0, r0, #1
 800fdfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fdfe:	881b      	ldrh	r3, [r3, #0]
 800fe00:	802b      	strh	r3, [r5, #0]
 800fe02:	e7ef      	b.n	800fde4 <ucdr_deserialize_int16_t+0x90>
 800fe04:	68a2      	ldr	r2, [r4, #8]
 800fe06:	6923      	ldr	r3, [r4, #16]
 800fe08:	1b92      	subs	r2, r2, r6
 800fe0a:	7da0      	ldrb	r0, [r4, #22]
 800fe0c:	1b9b      	subs	r3, r3, r6
 800fe0e:	f884 8015 	strb.w	r8, [r4, #21]
 800fe12:	f080 0001 	eor.w	r0, r0, #1
 800fe16:	60a2      	str	r2, [r4, #8]
 800fe18:	6123      	str	r3, [r4, #16]
 800fe1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fe1e:	68a3      	ldr	r3, [r4, #8]
 800fe20:	781b      	ldrb	r3, [r3, #0]
 800fe22:	706b      	strb	r3, [r5, #1]
 800fe24:	e7c2      	b.n	800fdac <ucdr_deserialize_int16_t+0x58>
 800fe26:	4639      	mov	r1, r7
 800fe28:	4632      	mov	r2, r6
 800fe2a:	4628      	mov	r0, r5
 800fe2c:	f00c fdbb 	bl	801c9a6 <memcpy>
 800fe30:	464a      	mov	r2, r9
 800fe32:	19a8      	adds	r0, r5, r6
 800fe34:	68a1      	ldr	r1, [r4, #8]
 800fe36:	f00c fdb6 	bl	801c9a6 <memcpy>
 800fe3a:	e7b7      	b.n	800fdac <ucdr_deserialize_int16_t+0x58>

0800fe3c <ucdr_deserialize_endian_int16_t>:
 800fe3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fe40:	4604      	mov	r4, r0
 800fe42:	460e      	mov	r6, r1
 800fe44:	2102      	movs	r1, #2
 800fe46:	4615      	mov	r5, r2
 800fe48:	f000 fcb4 	bl	80107b4 <ucdr_buffer_alignment>
 800fe4c:	4601      	mov	r1, r0
 800fe4e:	4620      	mov	r0, r4
 800fe50:	f894 8015 	ldrb.w	r8, [r4, #21]
 800fe54:	f000 fcf6 	bl	8010844 <ucdr_advance_buffer>
 800fe58:	2102      	movs	r1, #2
 800fe5a:	4620      	mov	r0, r4
 800fe5c:	f000 fc4a 	bl	80106f4 <ucdr_check_buffer_available_for>
 800fe60:	bb70      	cbnz	r0, 800fec0 <ucdr_deserialize_endian_int16_t+0x84>
 800fe62:	e9d4 7901 	ldrd	r7, r9, [r4, #4]
 800fe66:	454f      	cmp	r7, r9
 800fe68:	d925      	bls.n	800feb6 <ucdr_deserialize_endian_int16_t+0x7a>
 800fe6a:	6923      	ldr	r3, [r4, #16]
 800fe6c:	4620      	mov	r0, r4
 800fe6e:	60a7      	str	r7, [r4, #8]
 800fe70:	eba7 0709 	sub.w	r7, r7, r9
 800fe74:	443b      	add	r3, r7
 800fe76:	f1c7 0a02 	rsb	sl, r7, #2
 800fe7a:	6123      	str	r3, [r4, #16]
 800fe7c:	4651      	mov	r1, sl
 800fe7e:	f000 fc45 	bl	801070c <ucdr_check_final_buffer_behavior>
 800fe82:	2800      	cmp	r0, #0
 800fe84:	d034      	beq.n	800fef0 <ucdr_deserialize_endian_int16_t+0xb4>
 800fe86:	2e01      	cmp	r6, #1
 800fe88:	d043      	beq.n	800ff12 <ucdr_deserialize_endian_int16_t+0xd6>
 800fe8a:	f899 3001 	ldrb.w	r3, [r9, #1]
 800fe8e:	702b      	strb	r3, [r5, #0]
 800fe90:	2f00      	cmp	r7, #0
 800fe92:	d03a      	beq.n	800ff0a <ucdr_deserialize_endian_int16_t+0xce>
 800fe94:	f899 3000 	ldrb.w	r3, [r9]
 800fe98:	706b      	strb	r3, [r5, #1]
 800fe9a:	6923      	ldr	r3, [r4, #16]
 800fe9c:	2102      	movs	r1, #2
 800fe9e:	68a2      	ldr	r2, [r4, #8]
 800fea0:	3302      	adds	r3, #2
 800fea2:	7da0      	ldrb	r0, [r4, #22]
 800fea4:	4452      	add	r2, sl
 800fea6:	7561      	strb	r1, [r4, #21]
 800fea8:	1bdb      	subs	r3, r3, r7
 800feaa:	f080 0001 	eor.w	r0, r0, #1
 800feae:	60a2      	str	r2, [r4, #8]
 800feb0:	6123      	str	r3, [r4, #16]
 800feb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800feb6:	2102      	movs	r1, #2
 800feb8:	4620      	mov	r0, r4
 800feba:	f000 fc27 	bl	801070c <ucdr_check_final_buffer_behavior>
 800febe:	b178      	cbz	r0, 800fee0 <ucdr_deserialize_endian_int16_t+0xa4>
 800fec0:	2e01      	cmp	r6, #1
 800fec2:	68a3      	ldr	r3, [r4, #8]
 800fec4:	d011      	beq.n	800feea <ucdr_deserialize_endian_int16_t+0xae>
 800fec6:	785b      	ldrb	r3, [r3, #1]
 800fec8:	702b      	strb	r3, [r5, #0]
 800feca:	68a3      	ldr	r3, [r4, #8]
 800fecc:	781b      	ldrb	r3, [r3, #0]
 800fece:	706b      	strb	r3, [r5, #1]
 800fed0:	2102      	movs	r1, #2
 800fed2:	68a2      	ldr	r2, [r4, #8]
 800fed4:	6923      	ldr	r3, [r4, #16]
 800fed6:	440a      	add	r2, r1
 800fed8:	7561      	strb	r1, [r4, #21]
 800feda:	440b      	add	r3, r1
 800fedc:	60a2      	str	r2, [r4, #8]
 800fede:	6123      	str	r3, [r4, #16]
 800fee0:	7da0      	ldrb	r0, [r4, #22]
 800fee2:	f080 0001 	eor.w	r0, r0, #1
 800fee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800feea:	881b      	ldrh	r3, [r3, #0]
 800feec:	802b      	strh	r3, [r5, #0]
 800feee:	e7ef      	b.n	800fed0 <ucdr_deserialize_endian_int16_t+0x94>
 800fef0:	68a2      	ldr	r2, [r4, #8]
 800fef2:	6923      	ldr	r3, [r4, #16]
 800fef4:	1bd2      	subs	r2, r2, r7
 800fef6:	7da0      	ldrb	r0, [r4, #22]
 800fef8:	1bdb      	subs	r3, r3, r7
 800fefa:	f884 8015 	strb.w	r8, [r4, #21]
 800fefe:	f080 0001 	eor.w	r0, r0, #1
 800ff02:	60a2      	str	r2, [r4, #8]
 800ff04:	6123      	str	r3, [r4, #16]
 800ff06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff0a:	68a3      	ldr	r3, [r4, #8]
 800ff0c:	781b      	ldrb	r3, [r3, #0]
 800ff0e:	706b      	strb	r3, [r5, #1]
 800ff10:	e7c3      	b.n	800fe9a <ucdr_deserialize_endian_int16_t+0x5e>
 800ff12:	4649      	mov	r1, r9
 800ff14:	463a      	mov	r2, r7
 800ff16:	4628      	mov	r0, r5
 800ff18:	f00c fd45 	bl	801c9a6 <memcpy>
 800ff1c:	4652      	mov	r2, sl
 800ff1e:	19e8      	adds	r0, r5, r7
 800ff20:	68a1      	ldr	r1, [r4, #8]
 800ff22:	f00c fd40 	bl	801c9a6 <memcpy>
 800ff26:	e7b8      	b.n	800fe9a <ucdr_deserialize_endian_int16_t+0x5e>

0800ff28 <ucdr_serialize_int32_t>:
 800ff28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff2c:	b082      	sub	sp, #8
 800ff2e:	4604      	mov	r4, r0
 800ff30:	9101      	str	r1, [sp, #4]
 800ff32:	2104      	movs	r1, #4
 800ff34:	f000 fc3e 	bl	80107b4 <ucdr_buffer_alignment>
 800ff38:	4601      	mov	r1, r0
 800ff3a:	4620      	mov	r0, r4
 800ff3c:	7d67      	ldrb	r7, [r4, #21]
 800ff3e:	f000 fc81 	bl	8010844 <ucdr_advance_buffer>
 800ff42:	2104      	movs	r1, #4
 800ff44:	4620      	mov	r0, r4
 800ff46:	f000 fbd5 	bl	80106f4 <ucdr_check_buffer_available_for>
 800ff4a:	2800      	cmp	r0, #0
 800ff4c:	d139      	bne.n	800ffc2 <ucdr_serialize_int32_t+0x9a>
 800ff4e:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800ff52:	42ab      	cmp	r3, r5
 800ff54:	d930      	bls.n	800ffb8 <ucdr_serialize_int32_t+0x90>
 800ff56:	1b5e      	subs	r6, r3, r5
 800ff58:	60a3      	str	r3, [r4, #8]
 800ff5a:	6923      	ldr	r3, [r4, #16]
 800ff5c:	4620      	mov	r0, r4
 800ff5e:	f1c6 0804 	rsb	r8, r6, #4
 800ff62:	4433      	add	r3, r6
 800ff64:	4641      	mov	r1, r8
 800ff66:	6123      	str	r3, [r4, #16]
 800ff68:	f000 fbd0 	bl	801070c <ucdr_check_final_buffer_behavior>
 800ff6c:	2800      	cmp	r0, #0
 800ff6e:	d04c      	beq.n	801000a <ucdr_serialize_int32_t+0xe2>
 800ff70:	7d23      	ldrb	r3, [r4, #20]
 800ff72:	2b01      	cmp	r3, #1
 800ff74:	d063      	beq.n	801003e <ucdr_serialize_int32_t+0x116>
 800ff76:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ff7a:	702b      	strb	r3, [r5, #0]
 800ff7c:	2e00      	cmp	r6, #0
 800ff7e:	d051      	beq.n	8010024 <ucdr_serialize_int32_t+0xfc>
 800ff80:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ff84:	2e01      	cmp	r6, #1
 800ff86:	706b      	strb	r3, [r5, #1]
 800ff88:	d050      	beq.n	801002c <ucdr_serialize_int32_t+0x104>
 800ff8a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ff8e:	2e02      	cmp	r6, #2
 800ff90:	70ab      	strb	r3, [r5, #2]
 800ff92:	d04f      	beq.n	8010034 <ucdr_serialize_int32_t+0x10c>
 800ff94:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ff98:	70eb      	strb	r3, [r5, #3]
 800ff9a:	6923      	ldr	r3, [r4, #16]
 800ff9c:	2104      	movs	r1, #4
 800ff9e:	68a2      	ldr	r2, [r4, #8]
 800ffa0:	3304      	adds	r3, #4
 800ffa2:	7da0      	ldrb	r0, [r4, #22]
 800ffa4:	4442      	add	r2, r8
 800ffa6:	7561      	strb	r1, [r4, #21]
 800ffa8:	1b9e      	subs	r6, r3, r6
 800ffaa:	f080 0001 	eor.w	r0, r0, #1
 800ffae:	60a2      	str	r2, [r4, #8]
 800ffb0:	6126      	str	r6, [r4, #16]
 800ffb2:	b002      	add	sp, #8
 800ffb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ffb8:	2104      	movs	r1, #4
 800ffba:	4620      	mov	r0, r4
 800ffbc:	f000 fba6 	bl	801070c <ucdr_check_final_buffer_behavior>
 800ffc0:	b1d0      	cbz	r0, 800fff8 <ucdr_serialize_int32_t+0xd0>
 800ffc2:	7d23      	ldrb	r3, [r4, #20]
 800ffc4:	2b01      	cmp	r3, #1
 800ffc6:	68a3      	ldr	r3, [r4, #8]
 800ffc8:	d01c      	beq.n	8010004 <ucdr_serialize_int32_t+0xdc>
 800ffca:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800ffce:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ffd2:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800ffd6:	7018      	strb	r0, [r3, #0]
 800ffd8:	68a3      	ldr	r3, [r4, #8]
 800ffda:	705a      	strb	r2, [r3, #1]
 800ffdc:	68a3      	ldr	r3, [r4, #8]
 800ffde:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ffe2:	7099      	strb	r1, [r3, #2]
 800ffe4:	68a3      	ldr	r3, [r4, #8]
 800ffe6:	70da      	strb	r2, [r3, #3]
 800ffe8:	2104      	movs	r1, #4
 800ffea:	68a2      	ldr	r2, [r4, #8]
 800ffec:	6923      	ldr	r3, [r4, #16]
 800ffee:	440a      	add	r2, r1
 800fff0:	7561      	strb	r1, [r4, #21]
 800fff2:	440b      	add	r3, r1
 800fff4:	60a2      	str	r2, [r4, #8]
 800fff6:	6123      	str	r3, [r4, #16]
 800fff8:	7da0      	ldrb	r0, [r4, #22]
 800fffa:	f080 0001 	eor.w	r0, r0, #1
 800fffe:	b002      	add	sp, #8
 8010000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010004:	9a01      	ldr	r2, [sp, #4]
 8010006:	601a      	str	r2, [r3, #0]
 8010008:	e7ee      	b.n	800ffe8 <ucdr_serialize_int32_t+0xc0>
 801000a:	68a2      	ldr	r2, [r4, #8]
 801000c:	6923      	ldr	r3, [r4, #16]
 801000e:	7da0      	ldrb	r0, [r4, #22]
 8010010:	1b92      	subs	r2, r2, r6
 8010012:	1b9b      	subs	r3, r3, r6
 8010014:	7567      	strb	r7, [r4, #21]
 8010016:	f080 0001 	eor.w	r0, r0, #1
 801001a:	60a2      	str	r2, [r4, #8]
 801001c:	6123      	str	r3, [r4, #16]
 801001e:	b002      	add	sp, #8
 8010020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010024:	68a3      	ldr	r3, [r4, #8]
 8010026:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801002a:	701a      	strb	r2, [r3, #0]
 801002c:	68a3      	ldr	r3, [r4, #8]
 801002e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8010032:	701a      	strb	r2, [r3, #0]
 8010034:	68a3      	ldr	r3, [r4, #8]
 8010036:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801003a:	701a      	strb	r2, [r3, #0]
 801003c:	e7ad      	b.n	800ff9a <ucdr_serialize_int32_t+0x72>
 801003e:	4628      	mov	r0, r5
 8010040:	ad01      	add	r5, sp, #4
 8010042:	4632      	mov	r2, r6
 8010044:	4629      	mov	r1, r5
 8010046:	f00c fcae 	bl	801c9a6 <memcpy>
 801004a:	4642      	mov	r2, r8
 801004c:	19a9      	adds	r1, r5, r6
 801004e:	68a0      	ldr	r0, [r4, #8]
 8010050:	f00c fca9 	bl	801c9a6 <memcpy>
 8010054:	e7a1      	b.n	800ff9a <ucdr_serialize_int32_t+0x72>
 8010056:	bf00      	nop

08010058 <ucdr_deserialize_int32_t>:
 8010058:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801005c:	4604      	mov	r4, r0
 801005e:	460d      	mov	r5, r1
 8010060:	2104      	movs	r1, #4
 8010062:	f000 fba7 	bl	80107b4 <ucdr_buffer_alignment>
 8010066:	4601      	mov	r1, r0
 8010068:	4620      	mov	r0, r4
 801006a:	f894 8015 	ldrb.w	r8, [r4, #21]
 801006e:	f000 fbe9 	bl	8010844 <ucdr_advance_buffer>
 8010072:	2104      	movs	r1, #4
 8010074:	4620      	mov	r0, r4
 8010076:	f000 fb3d 	bl	80106f4 <ucdr_check_buffer_available_for>
 801007a:	2800      	cmp	r0, #0
 801007c:	d138      	bne.n	80100f0 <ucdr_deserialize_int32_t+0x98>
 801007e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8010082:	42b7      	cmp	r7, r6
 8010084:	d92f      	bls.n	80100e6 <ucdr_deserialize_int32_t+0x8e>
 8010086:	6923      	ldr	r3, [r4, #16]
 8010088:	4620      	mov	r0, r4
 801008a:	60a7      	str	r7, [r4, #8]
 801008c:	1bbf      	subs	r7, r7, r6
 801008e:	443b      	add	r3, r7
 8010090:	f1c7 0904 	rsb	r9, r7, #4
 8010094:	6123      	str	r3, [r4, #16]
 8010096:	4649      	mov	r1, r9
 8010098:	f000 fb38 	bl	801070c <ucdr_check_final_buffer_behavior>
 801009c:	2800      	cmp	r0, #0
 801009e:	d046      	beq.n	801012e <ucdr_deserialize_int32_t+0xd6>
 80100a0:	7d23      	ldrb	r3, [r4, #20]
 80100a2:	2b01      	cmp	r3, #1
 80100a4:	d05c      	beq.n	8010160 <ucdr_deserialize_int32_t+0x108>
 80100a6:	78f3      	ldrb	r3, [r6, #3]
 80100a8:	702b      	strb	r3, [r5, #0]
 80100aa:	2f00      	cmp	r7, #0
 80100ac:	d04c      	beq.n	8010148 <ucdr_deserialize_int32_t+0xf0>
 80100ae:	78b3      	ldrb	r3, [r6, #2]
 80100b0:	2f01      	cmp	r7, #1
 80100b2:	706b      	strb	r3, [r5, #1]
 80100b4:	f105 0302 	add.w	r3, r5, #2
 80100b8:	d04a      	beq.n	8010150 <ucdr_deserialize_int32_t+0xf8>
 80100ba:	7873      	ldrb	r3, [r6, #1]
 80100bc:	2f02      	cmp	r7, #2
 80100be:	70ab      	strb	r3, [r5, #2]
 80100c0:	f105 0303 	add.w	r3, r5, #3
 80100c4:	d048      	beq.n	8010158 <ucdr_deserialize_int32_t+0x100>
 80100c6:	7833      	ldrb	r3, [r6, #0]
 80100c8:	70eb      	strb	r3, [r5, #3]
 80100ca:	6923      	ldr	r3, [r4, #16]
 80100cc:	2104      	movs	r1, #4
 80100ce:	68a2      	ldr	r2, [r4, #8]
 80100d0:	3304      	adds	r3, #4
 80100d2:	7da0      	ldrb	r0, [r4, #22]
 80100d4:	444a      	add	r2, r9
 80100d6:	7561      	strb	r1, [r4, #21]
 80100d8:	1bdb      	subs	r3, r3, r7
 80100da:	f080 0001 	eor.w	r0, r0, #1
 80100de:	60a2      	str	r2, [r4, #8]
 80100e0:	6123      	str	r3, [r4, #16]
 80100e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80100e6:	2104      	movs	r1, #4
 80100e8:	4620      	mov	r0, r4
 80100ea:	f000 fb0f 	bl	801070c <ucdr_check_final_buffer_behavior>
 80100ee:	b1b0      	cbz	r0, 801011e <ucdr_deserialize_int32_t+0xc6>
 80100f0:	7d23      	ldrb	r3, [r4, #20]
 80100f2:	2b01      	cmp	r3, #1
 80100f4:	68a3      	ldr	r3, [r4, #8]
 80100f6:	d017      	beq.n	8010128 <ucdr_deserialize_int32_t+0xd0>
 80100f8:	78db      	ldrb	r3, [r3, #3]
 80100fa:	702b      	strb	r3, [r5, #0]
 80100fc:	68a3      	ldr	r3, [r4, #8]
 80100fe:	789b      	ldrb	r3, [r3, #2]
 8010100:	706b      	strb	r3, [r5, #1]
 8010102:	68a3      	ldr	r3, [r4, #8]
 8010104:	785b      	ldrb	r3, [r3, #1]
 8010106:	70ab      	strb	r3, [r5, #2]
 8010108:	68a3      	ldr	r3, [r4, #8]
 801010a:	781b      	ldrb	r3, [r3, #0]
 801010c:	70eb      	strb	r3, [r5, #3]
 801010e:	2104      	movs	r1, #4
 8010110:	68a2      	ldr	r2, [r4, #8]
 8010112:	6923      	ldr	r3, [r4, #16]
 8010114:	440a      	add	r2, r1
 8010116:	7561      	strb	r1, [r4, #21]
 8010118:	440b      	add	r3, r1
 801011a:	60a2      	str	r2, [r4, #8]
 801011c:	6123      	str	r3, [r4, #16]
 801011e:	7da0      	ldrb	r0, [r4, #22]
 8010120:	f080 0001 	eor.w	r0, r0, #1
 8010124:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	602b      	str	r3, [r5, #0]
 801012c:	e7ef      	b.n	801010e <ucdr_deserialize_int32_t+0xb6>
 801012e:	68a2      	ldr	r2, [r4, #8]
 8010130:	6923      	ldr	r3, [r4, #16]
 8010132:	1bd2      	subs	r2, r2, r7
 8010134:	7da0      	ldrb	r0, [r4, #22]
 8010136:	1bdb      	subs	r3, r3, r7
 8010138:	f884 8015 	strb.w	r8, [r4, #21]
 801013c:	f080 0001 	eor.w	r0, r0, #1
 8010140:	60a2      	str	r2, [r4, #8]
 8010142:	6123      	str	r3, [r4, #16]
 8010144:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010148:	68a3      	ldr	r3, [r4, #8]
 801014a:	789b      	ldrb	r3, [r3, #2]
 801014c:	706b      	strb	r3, [r5, #1]
 801014e:	1cab      	adds	r3, r5, #2
 8010150:	68a2      	ldr	r2, [r4, #8]
 8010152:	7852      	ldrb	r2, [r2, #1]
 8010154:	f803 2b01 	strb.w	r2, [r3], #1
 8010158:	68a2      	ldr	r2, [r4, #8]
 801015a:	7812      	ldrb	r2, [r2, #0]
 801015c:	701a      	strb	r2, [r3, #0]
 801015e:	e7b4      	b.n	80100ca <ucdr_deserialize_int32_t+0x72>
 8010160:	4631      	mov	r1, r6
 8010162:	463a      	mov	r2, r7
 8010164:	4628      	mov	r0, r5
 8010166:	f00c fc1e 	bl	801c9a6 <memcpy>
 801016a:	464a      	mov	r2, r9
 801016c:	19e8      	adds	r0, r5, r7
 801016e:	68a1      	ldr	r1, [r4, #8]
 8010170:	f00c fc19 	bl	801c9a6 <memcpy>
 8010174:	e7a9      	b.n	80100ca <ucdr_deserialize_int32_t+0x72>
 8010176:	bf00      	nop

08010178 <ucdr_serialize_int64_t>:
 8010178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801017c:	4604      	mov	r4, r0
 801017e:	b082      	sub	sp, #8
 8010180:	2108      	movs	r1, #8
 8010182:	e9cd 2300 	strd	r2, r3, [sp]
 8010186:	f000 fb15 	bl	80107b4 <ucdr_buffer_alignment>
 801018a:	4601      	mov	r1, r0
 801018c:	4620      	mov	r0, r4
 801018e:	7d67      	ldrb	r7, [r4, #21]
 8010190:	f000 fb58 	bl	8010844 <ucdr_advance_buffer>
 8010194:	2108      	movs	r1, #8
 8010196:	4620      	mov	r0, r4
 8010198:	f000 faac 	bl	80106f4 <ucdr_check_buffer_available_for>
 801019c:	2800      	cmp	r0, #0
 801019e:	d14e      	bne.n	801023e <ucdr_serialize_int64_t+0xc6>
 80101a0:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80101a4:	42ab      	cmp	r3, r5
 80101a6:	d945      	bls.n	8010234 <ucdr_serialize_int64_t+0xbc>
 80101a8:	1b5e      	subs	r6, r3, r5
 80101aa:	60a3      	str	r3, [r4, #8]
 80101ac:	6923      	ldr	r3, [r4, #16]
 80101ae:	4620      	mov	r0, r4
 80101b0:	f1c6 0808 	rsb	r8, r6, #8
 80101b4:	4433      	add	r3, r6
 80101b6:	4641      	mov	r1, r8
 80101b8:	6123      	str	r3, [r4, #16]
 80101ba:	f000 faa7 	bl	801070c <ucdr_check_final_buffer_behavior>
 80101be:	2800      	cmp	r0, #0
 80101c0:	d074      	beq.n	80102ac <ucdr_serialize_int64_t+0x134>
 80101c2:	7d23      	ldrb	r3, [r4, #20]
 80101c4:	2b01      	cmp	r3, #1
 80101c6:	f000 809b 	beq.w	8010300 <ucdr_serialize_int64_t+0x188>
 80101ca:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80101ce:	702b      	strb	r3, [r5, #0]
 80101d0:	2e00      	cmp	r6, #0
 80101d2:	d078      	beq.n	80102c6 <ucdr_serialize_int64_t+0x14e>
 80101d4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80101d8:	2e01      	cmp	r6, #1
 80101da:	706b      	strb	r3, [r5, #1]
 80101dc:	d077      	beq.n	80102ce <ucdr_serialize_int64_t+0x156>
 80101de:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80101e2:	2e02      	cmp	r6, #2
 80101e4:	70ab      	strb	r3, [r5, #2]
 80101e6:	d076      	beq.n	80102d6 <ucdr_serialize_int64_t+0x15e>
 80101e8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80101ec:	2e03      	cmp	r6, #3
 80101ee:	70eb      	strb	r3, [r5, #3]
 80101f0:	d075      	beq.n	80102de <ucdr_serialize_int64_t+0x166>
 80101f2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80101f6:	2e04      	cmp	r6, #4
 80101f8:	712b      	strb	r3, [r5, #4]
 80101fa:	d074      	beq.n	80102e6 <ucdr_serialize_int64_t+0x16e>
 80101fc:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8010200:	2e05      	cmp	r6, #5
 8010202:	716b      	strb	r3, [r5, #5]
 8010204:	d073      	beq.n	80102ee <ucdr_serialize_int64_t+0x176>
 8010206:	f89d 3001 	ldrb.w	r3, [sp, #1]
 801020a:	2e06      	cmp	r6, #6
 801020c:	71ab      	strb	r3, [r5, #6]
 801020e:	d072      	beq.n	80102f6 <ucdr_serialize_int64_t+0x17e>
 8010210:	f89d 3000 	ldrb.w	r3, [sp]
 8010214:	71eb      	strb	r3, [r5, #7]
 8010216:	6923      	ldr	r3, [r4, #16]
 8010218:	2108      	movs	r1, #8
 801021a:	68a2      	ldr	r2, [r4, #8]
 801021c:	3308      	adds	r3, #8
 801021e:	7da0      	ldrb	r0, [r4, #22]
 8010220:	4442      	add	r2, r8
 8010222:	7561      	strb	r1, [r4, #21]
 8010224:	1b9e      	subs	r6, r3, r6
 8010226:	f080 0001 	eor.w	r0, r0, #1
 801022a:	60a2      	str	r2, [r4, #8]
 801022c:	6126      	str	r6, [r4, #16]
 801022e:	b002      	add	sp, #8
 8010230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010234:	2108      	movs	r1, #8
 8010236:	4620      	mov	r0, r4
 8010238:	f000 fa68 	bl	801070c <ucdr_check_final_buffer_behavior>
 801023c:	b350      	cbz	r0, 8010294 <ucdr_serialize_int64_t+0x11c>
 801023e:	7d23      	ldrb	r3, [r4, #20]
 8010240:	2b01      	cmp	r3, #1
 8010242:	d02d      	beq.n	80102a0 <ucdr_serialize_int64_t+0x128>
 8010244:	68a3      	ldr	r3, [r4, #8]
 8010246:	f89d 0007 	ldrb.w	r0, [sp, #7]
 801024a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801024e:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8010252:	7018      	strb	r0, [r3, #0]
 8010254:	68a3      	ldr	r3, [r4, #8]
 8010256:	705a      	strb	r2, [r3, #1]
 8010258:	68a3      	ldr	r3, [r4, #8]
 801025a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801025e:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8010262:	7099      	strb	r1, [r3, #2]
 8010264:	68a3      	ldr	r3, [r4, #8]
 8010266:	70da      	strb	r2, [r3, #3]
 8010268:	68a3      	ldr	r3, [r4, #8]
 801026a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 801026e:	f89d 1001 	ldrb.w	r1, [sp, #1]
 8010272:	7118      	strb	r0, [r3, #4]
 8010274:	68a3      	ldr	r3, [r4, #8]
 8010276:	715a      	strb	r2, [r3, #5]
 8010278:	68a3      	ldr	r3, [r4, #8]
 801027a:	f89d 2000 	ldrb.w	r2, [sp]
 801027e:	7199      	strb	r1, [r3, #6]
 8010280:	68a3      	ldr	r3, [r4, #8]
 8010282:	71da      	strb	r2, [r3, #7]
 8010284:	2108      	movs	r1, #8
 8010286:	68a2      	ldr	r2, [r4, #8]
 8010288:	6923      	ldr	r3, [r4, #16]
 801028a:	440a      	add	r2, r1
 801028c:	7561      	strb	r1, [r4, #21]
 801028e:	440b      	add	r3, r1
 8010290:	60a2      	str	r2, [r4, #8]
 8010292:	6123      	str	r3, [r4, #16]
 8010294:	7da0      	ldrb	r0, [r4, #22]
 8010296:	f080 0001 	eor.w	r0, r0, #1
 801029a:	b002      	add	sp, #8
 801029c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102a0:	466b      	mov	r3, sp
 80102a2:	68a2      	ldr	r2, [r4, #8]
 80102a4:	cb03      	ldmia	r3!, {r0, r1}
 80102a6:	6010      	str	r0, [r2, #0]
 80102a8:	6051      	str	r1, [r2, #4]
 80102aa:	e7eb      	b.n	8010284 <ucdr_serialize_int64_t+0x10c>
 80102ac:	68a2      	ldr	r2, [r4, #8]
 80102ae:	6923      	ldr	r3, [r4, #16]
 80102b0:	7da0      	ldrb	r0, [r4, #22]
 80102b2:	1b92      	subs	r2, r2, r6
 80102b4:	1b9b      	subs	r3, r3, r6
 80102b6:	7567      	strb	r7, [r4, #21]
 80102b8:	f080 0001 	eor.w	r0, r0, #1
 80102bc:	60a2      	str	r2, [r4, #8]
 80102be:	6123      	str	r3, [r4, #16]
 80102c0:	b002      	add	sp, #8
 80102c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102c6:	68a3      	ldr	r3, [r4, #8]
 80102c8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80102cc:	701a      	strb	r2, [r3, #0]
 80102ce:	68a3      	ldr	r3, [r4, #8]
 80102d0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80102d4:	701a      	strb	r2, [r3, #0]
 80102d6:	68a3      	ldr	r3, [r4, #8]
 80102d8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80102dc:	701a      	strb	r2, [r3, #0]
 80102de:	68a3      	ldr	r3, [r4, #8]
 80102e0:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80102e4:	701a      	strb	r2, [r3, #0]
 80102e6:	68a3      	ldr	r3, [r4, #8]
 80102e8:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80102ec:	701a      	strb	r2, [r3, #0]
 80102ee:	68a3      	ldr	r3, [r4, #8]
 80102f0:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80102f4:	701a      	strb	r2, [r3, #0]
 80102f6:	68a3      	ldr	r3, [r4, #8]
 80102f8:	f89d 2000 	ldrb.w	r2, [sp]
 80102fc:	701a      	strb	r2, [r3, #0]
 80102fe:	e78a      	b.n	8010216 <ucdr_serialize_int64_t+0x9e>
 8010300:	4628      	mov	r0, r5
 8010302:	466d      	mov	r5, sp
 8010304:	4632      	mov	r2, r6
 8010306:	4629      	mov	r1, r5
 8010308:	f00c fb4d 	bl	801c9a6 <memcpy>
 801030c:	4642      	mov	r2, r8
 801030e:	19a9      	adds	r1, r5, r6
 8010310:	68a0      	ldr	r0, [r4, #8]
 8010312:	f00c fb48 	bl	801c9a6 <memcpy>
 8010316:	e77e      	b.n	8010216 <ucdr_serialize_int64_t+0x9e>

08010318 <ucdr_deserialize_int64_t>:
 8010318:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801031c:	4604      	mov	r4, r0
 801031e:	460d      	mov	r5, r1
 8010320:	2108      	movs	r1, #8
 8010322:	f000 fa47 	bl	80107b4 <ucdr_buffer_alignment>
 8010326:	4601      	mov	r1, r0
 8010328:	4620      	mov	r0, r4
 801032a:	f894 8015 	ldrb.w	r8, [r4, #21]
 801032e:	f000 fa89 	bl	8010844 <ucdr_advance_buffer>
 8010332:	2108      	movs	r1, #8
 8010334:	4620      	mov	r0, r4
 8010336:	f000 f9dd 	bl	80106f4 <ucdr_check_buffer_available_for>
 801033a:	2800      	cmp	r0, #0
 801033c:	d151      	bne.n	80103e2 <ucdr_deserialize_int64_t+0xca>
 801033e:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8010342:	42be      	cmp	r6, r7
 8010344:	d948      	bls.n	80103d8 <ucdr_deserialize_int64_t+0xc0>
 8010346:	6923      	ldr	r3, [r4, #16]
 8010348:	4620      	mov	r0, r4
 801034a:	60a6      	str	r6, [r4, #8]
 801034c:	1bf6      	subs	r6, r6, r7
 801034e:	4433      	add	r3, r6
 8010350:	f1c6 0908 	rsb	r9, r6, #8
 8010354:	6123      	str	r3, [r4, #16]
 8010356:	4649      	mov	r1, r9
 8010358:	f000 f9d8 	bl	801070c <ucdr_check_final_buffer_behavior>
 801035c:	2800      	cmp	r0, #0
 801035e:	d06d      	beq.n	801043c <ucdr_deserialize_int64_t+0x124>
 8010360:	7d23      	ldrb	r3, [r4, #20]
 8010362:	2b01      	cmp	r3, #1
 8010364:	f000 8093 	beq.w	801048e <ucdr_deserialize_int64_t+0x176>
 8010368:	79fb      	ldrb	r3, [r7, #7]
 801036a:	702b      	strb	r3, [r5, #0]
 801036c:	2e00      	cmp	r6, #0
 801036e:	d072      	beq.n	8010456 <ucdr_deserialize_int64_t+0x13e>
 8010370:	79bb      	ldrb	r3, [r7, #6]
 8010372:	2e01      	cmp	r6, #1
 8010374:	706b      	strb	r3, [r5, #1]
 8010376:	f105 0302 	add.w	r3, r5, #2
 801037a:	d070      	beq.n	801045e <ucdr_deserialize_int64_t+0x146>
 801037c:	797b      	ldrb	r3, [r7, #5]
 801037e:	2e02      	cmp	r6, #2
 8010380:	70ab      	strb	r3, [r5, #2]
 8010382:	f105 0303 	add.w	r3, r5, #3
 8010386:	d06e      	beq.n	8010466 <ucdr_deserialize_int64_t+0x14e>
 8010388:	793b      	ldrb	r3, [r7, #4]
 801038a:	2e03      	cmp	r6, #3
 801038c:	70eb      	strb	r3, [r5, #3]
 801038e:	f105 0304 	add.w	r3, r5, #4
 8010392:	d06c      	beq.n	801046e <ucdr_deserialize_int64_t+0x156>
 8010394:	78fb      	ldrb	r3, [r7, #3]
 8010396:	2e04      	cmp	r6, #4
 8010398:	712b      	strb	r3, [r5, #4]
 801039a:	f105 0305 	add.w	r3, r5, #5
 801039e:	d06a      	beq.n	8010476 <ucdr_deserialize_int64_t+0x15e>
 80103a0:	78bb      	ldrb	r3, [r7, #2]
 80103a2:	2e05      	cmp	r6, #5
 80103a4:	716b      	strb	r3, [r5, #5]
 80103a6:	f105 0306 	add.w	r3, r5, #6
 80103aa:	d068      	beq.n	801047e <ucdr_deserialize_int64_t+0x166>
 80103ac:	787b      	ldrb	r3, [r7, #1]
 80103ae:	2e06      	cmp	r6, #6
 80103b0:	71ab      	strb	r3, [r5, #6]
 80103b2:	f105 0307 	add.w	r3, r5, #7
 80103b6:	d066      	beq.n	8010486 <ucdr_deserialize_int64_t+0x16e>
 80103b8:	783b      	ldrb	r3, [r7, #0]
 80103ba:	71eb      	strb	r3, [r5, #7]
 80103bc:	6923      	ldr	r3, [r4, #16]
 80103be:	2108      	movs	r1, #8
 80103c0:	68a2      	ldr	r2, [r4, #8]
 80103c2:	3308      	adds	r3, #8
 80103c4:	7da0      	ldrb	r0, [r4, #22]
 80103c6:	444a      	add	r2, r9
 80103c8:	7561      	strb	r1, [r4, #21]
 80103ca:	1b9e      	subs	r6, r3, r6
 80103cc:	f080 0001 	eor.w	r0, r0, #1
 80103d0:	60a2      	str	r2, [r4, #8]
 80103d2:	6126      	str	r6, [r4, #16]
 80103d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80103d8:	2108      	movs	r1, #8
 80103da:	4620      	mov	r0, r4
 80103dc:	f000 f996 	bl	801070c <ucdr_check_final_buffer_behavior>
 80103e0:	b310      	cbz	r0, 8010428 <ucdr_deserialize_int64_t+0x110>
 80103e2:	7d23      	ldrb	r3, [r4, #20]
 80103e4:	2b01      	cmp	r3, #1
 80103e6:	68a3      	ldr	r3, [r4, #8]
 80103e8:	d023      	beq.n	8010432 <ucdr_deserialize_int64_t+0x11a>
 80103ea:	79db      	ldrb	r3, [r3, #7]
 80103ec:	702b      	strb	r3, [r5, #0]
 80103ee:	68a3      	ldr	r3, [r4, #8]
 80103f0:	799b      	ldrb	r3, [r3, #6]
 80103f2:	706b      	strb	r3, [r5, #1]
 80103f4:	68a3      	ldr	r3, [r4, #8]
 80103f6:	795b      	ldrb	r3, [r3, #5]
 80103f8:	70ab      	strb	r3, [r5, #2]
 80103fa:	68a3      	ldr	r3, [r4, #8]
 80103fc:	791b      	ldrb	r3, [r3, #4]
 80103fe:	70eb      	strb	r3, [r5, #3]
 8010400:	68a3      	ldr	r3, [r4, #8]
 8010402:	78db      	ldrb	r3, [r3, #3]
 8010404:	712b      	strb	r3, [r5, #4]
 8010406:	68a3      	ldr	r3, [r4, #8]
 8010408:	789b      	ldrb	r3, [r3, #2]
 801040a:	716b      	strb	r3, [r5, #5]
 801040c:	68a3      	ldr	r3, [r4, #8]
 801040e:	785b      	ldrb	r3, [r3, #1]
 8010410:	71ab      	strb	r3, [r5, #6]
 8010412:	68a3      	ldr	r3, [r4, #8]
 8010414:	781b      	ldrb	r3, [r3, #0]
 8010416:	71eb      	strb	r3, [r5, #7]
 8010418:	2108      	movs	r1, #8
 801041a:	68a2      	ldr	r2, [r4, #8]
 801041c:	6923      	ldr	r3, [r4, #16]
 801041e:	440a      	add	r2, r1
 8010420:	7561      	strb	r1, [r4, #21]
 8010422:	440b      	add	r3, r1
 8010424:	60a2      	str	r2, [r4, #8]
 8010426:	6123      	str	r3, [r4, #16]
 8010428:	7da0      	ldrb	r0, [r4, #22]
 801042a:	f080 0001 	eor.w	r0, r0, #1
 801042e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010432:	681a      	ldr	r2, [r3, #0]
 8010434:	685b      	ldr	r3, [r3, #4]
 8010436:	602a      	str	r2, [r5, #0]
 8010438:	606b      	str	r3, [r5, #4]
 801043a:	e7ed      	b.n	8010418 <ucdr_deserialize_int64_t+0x100>
 801043c:	68a2      	ldr	r2, [r4, #8]
 801043e:	6923      	ldr	r3, [r4, #16]
 8010440:	1b92      	subs	r2, r2, r6
 8010442:	7da0      	ldrb	r0, [r4, #22]
 8010444:	1b9b      	subs	r3, r3, r6
 8010446:	f884 8015 	strb.w	r8, [r4, #21]
 801044a:	f080 0001 	eor.w	r0, r0, #1
 801044e:	60a2      	str	r2, [r4, #8]
 8010450:	6123      	str	r3, [r4, #16]
 8010452:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010456:	68a3      	ldr	r3, [r4, #8]
 8010458:	799b      	ldrb	r3, [r3, #6]
 801045a:	706b      	strb	r3, [r5, #1]
 801045c:	1cab      	adds	r3, r5, #2
 801045e:	68a2      	ldr	r2, [r4, #8]
 8010460:	7952      	ldrb	r2, [r2, #5]
 8010462:	f803 2b01 	strb.w	r2, [r3], #1
 8010466:	68a2      	ldr	r2, [r4, #8]
 8010468:	7912      	ldrb	r2, [r2, #4]
 801046a:	f803 2b01 	strb.w	r2, [r3], #1
 801046e:	68a2      	ldr	r2, [r4, #8]
 8010470:	78d2      	ldrb	r2, [r2, #3]
 8010472:	f803 2b01 	strb.w	r2, [r3], #1
 8010476:	68a2      	ldr	r2, [r4, #8]
 8010478:	7892      	ldrb	r2, [r2, #2]
 801047a:	f803 2b01 	strb.w	r2, [r3], #1
 801047e:	68a2      	ldr	r2, [r4, #8]
 8010480:	7852      	ldrb	r2, [r2, #1]
 8010482:	f803 2b01 	strb.w	r2, [r3], #1
 8010486:	68a2      	ldr	r2, [r4, #8]
 8010488:	7812      	ldrb	r2, [r2, #0]
 801048a:	701a      	strb	r2, [r3, #0]
 801048c:	e796      	b.n	80103bc <ucdr_deserialize_int64_t+0xa4>
 801048e:	4639      	mov	r1, r7
 8010490:	4632      	mov	r2, r6
 8010492:	4628      	mov	r0, r5
 8010494:	f00c fa87 	bl	801c9a6 <memcpy>
 8010498:	464a      	mov	r2, r9
 801049a:	19a8      	adds	r0, r5, r6
 801049c:	68a1      	ldr	r1, [r4, #8]
 801049e:	f00c fa82 	bl	801c9a6 <memcpy>
 80104a2:	e78b      	b.n	80103bc <ucdr_deserialize_int64_t+0xa4>

080104a4 <ucdr_serialize_float>:
 80104a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104a8:	4604      	mov	r4, r0
 80104aa:	b082      	sub	sp, #8
 80104ac:	2104      	movs	r1, #4
 80104ae:	ed8d 0a01 	vstr	s0, [sp, #4]
 80104b2:	f000 f97f 	bl	80107b4 <ucdr_buffer_alignment>
 80104b6:	4601      	mov	r1, r0
 80104b8:	4620      	mov	r0, r4
 80104ba:	7d67      	ldrb	r7, [r4, #21]
 80104bc:	f000 f9c2 	bl	8010844 <ucdr_advance_buffer>
 80104c0:	2104      	movs	r1, #4
 80104c2:	4620      	mov	r0, r4
 80104c4:	f000 f916 	bl	80106f4 <ucdr_check_buffer_available_for>
 80104c8:	2800      	cmp	r0, #0
 80104ca:	d139      	bne.n	8010540 <ucdr_serialize_float+0x9c>
 80104cc:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80104d0:	42ab      	cmp	r3, r5
 80104d2:	d930      	bls.n	8010536 <ucdr_serialize_float+0x92>
 80104d4:	1b5e      	subs	r6, r3, r5
 80104d6:	60a3      	str	r3, [r4, #8]
 80104d8:	6923      	ldr	r3, [r4, #16]
 80104da:	4620      	mov	r0, r4
 80104dc:	f1c6 0804 	rsb	r8, r6, #4
 80104e0:	4433      	add	r3, r6
 80104e2:	4641      	mov	r1, r8
 80104e4:	6123      	str	r3, [r4, #16]
 80104e6:	f000 f911 	bl	801070c <ucdr_check_final_buffer_behavior>
 80104ea:	2800      	cmp	r0, #0
 80104ec:	d04c      	beq.n	8010588 <ucdr_serialize_float+0xe4>
 80104ee:	7d23      	ldrb	r3, [r4, #20]
 80104f0:	2b01      	cmp	r3, #1
 80104f2:	d063      	beq.n	80105bc <ucdr_serialize_float+0x118>
 80104f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80104f8:	702b      	strb	r3, [r5, #0]
 80104fa:	2e00      	cmp	r6, #0
 80104fc:	d051      	beq.n	80105a2 <ucdr_serialize_float+0xfe>
 80104fe:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010502:	2e01      	cmp	r6, #1
 8010504:	706b      	strb	r3, [r5, #1]
 8010506:	d050      	beq.n	80105aa <ucdr_serialize_float+0x106>
 8010508:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801050c:	2e02      	cmp	r6, #2
 801050e:	70ab      	strb	r3, [r5, #2]
 8010510:	d04f      	beq.n	80105b2 <ucdr_serialize_float+0x10e>
 8010512:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010516:	70eb      	strb	r3, [r5, #3]
 8010518:	6923      	ldr	r3, [r4, #16]
 801051a:	2104      	movs	r1, #4
 801051c:	68a2      	ldr	r2, [r4, #8]
 801051e:	3304      	adds	r3, #4
 8010520:	7da0      	ldrb	r0, [r4, #22]
 8010522:	4442      	add	r2, r8
 8010524:	7561      	strb	r1, [r4, #21]
 8010526:	1b9e      	subs	r6, r3, r6
 8010528:	f080 0001 	eor.w	r0, r0, #1
 801052c:	60a2      	str	r2, [r4, #8]
 801052e:	6126      	str	r6, [r4, #16]
 8010530:	b002      	add	sp, #8
 8010532:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010536:	2104      	movs	r1, #4
 8010538:	4620      	mov	r0, r4
 801053a:	f000 f8e7 	bl	801070c <ucdr_check_final_buffer_behavior>
 801053e:	b1d0      	cbz	r0, 8010576 <ucdr_serialize_float+0xd2>
 8010540:	7d23      	ldrb	r3, [r4, #20]
 8010542:	2b01      	cmp	r3, #1
 8010544:	68a3      	ldr	r3, [r4, #8]
 8010546:	d01c      	beq.n	8010582 <ucdr_serialize_float+0xde>
 8010548:	f89d 0007 	ldrb.w	r0, [sp, #7]
 801054c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010550:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8010554:	7018      	strb	r0, [r3, #0]
 8010556:	68a3      	ldr	r3, [r4, #8]
 8010558:	705a      	strb	r2, [r3, #1]
 801055a:	68a3      	ldr	r3, [r4, #8]
 801055c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010560:	7099      	strb	r1, [r3, #2]
 8010562:	68a3      	ldr	r3, [r4, #8]
 8010564:	70da      	strb	r2, [r3, #3]
 8010566:	2104      	movs	r1, #4
 8010568:	68a2      	ldr	r2, [r4, #8]
 801056a:	6923      	ldr	r3, [r4, #16]
 801056c:	440a      	add	r2, r1
 801056e:	7561      	strb	r1, [r4, #21]
 8010570:	440b      	add	r3, r1
 8010572:	60a2      	str	r2, [r4, #8]
 8010574:	6123      	str	r3, [r4, #16]
 8010576:	7da0      	ldrb	r0, [r4, #22]
 8010578:	f080 0001 	eor.w	r0, r0, #1
 801057c:	b002      	add	sp, #8
 801057e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010582:	9a01      	ldr	r2, [sp, #4]
 8010584:	601a      	str	r2, [r3, #0]
 8010586:	e7ee      	b.n	8010566 <ucdr_serialize_float+0xc2>
 8010588:	68a2      	ldr	r2, [r4, #8]
 801058a:	6923      	ldr	r3, [r4, #16]
 801058c:	7da0      	ldrb	r0, [r4, #22]
 801058e:	1b92      	subs	r2, r2, r6
 8010590:	1b9b      	subs	r3, r3, r6
 8010592:	7567      	strb	r7, [r4, #21]
 8010594:	f080 0001 	eor.w	r0, r0, #1
 8010598:	60a2      	str	r2, [r4, #8]
 801059a:	6123      	str	r3, [r4, #16]
 801059c:	b002      	add	sp, #8
 801059e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105a2:	68a3      	ldr	r3, [r4, #8]
 80105a4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80105a8:	701a      	strb	r2, [r3, #0]
 80105aa:	68a3      	ldr	r3, [r4, #8]
 80105ac:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80105b0:	701a      	strb	r2, [r3, #0]
 80105b2:	68a3      	ldr	r3, [r4, #8]
 80105b4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80105b8:	701a      	strb	r2, [r3, #0]
 80105ba:	e7ad      	b.n	8010518 <ucdr_serialize_float+0x74>
 80105bc:	4628      	mov	r0, r5
 80105be:	ad01      	add	r5, sp, #4
 80105c0:	4632      	mov	r2, r6
 80105c2:	4629      	mov	r1, r5
 80105c4:	f00c f9ef 	bl	801c9a6 <memcpy>
 80105c8:	4642      	mov	r2, r8
 80105ca:	19a9      	adds	r1, r5, r6
 80105cc:	68a0      	ldr	r0, [r4, #8]
 80105ce:	f00c f9ea 	bl	801c9a6 <memcpy>
 80105d2:	e7a1      	b.n	8010518 <ucdr_serialize_float+0x74>

080105d4 <ucdr_deserialize_float>:
 80105d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80105d8:	4604      	mov	r4, r0
 80105da:	460d      	mov	r5, r1
 80105dc:	2104      	movs	r1, #4
 80105de:	f000 f8e9 	bl	80107b4 <ucdr_buffer_alignment>
 80105e2:	4601      	mov	r1, r0
 80105e4:	4620      	mov	r0, r4
 80105e6:	f894 8015 	ldrb.w	r8, [r4, #21]
 80105ea:	f000 f92b 	bl	8010844 <ucdr_advance_buffer>
 80105ee:	2104      	movs	r1, #4
 80105f0:	4620      	mov	r0, r4
 80105f2:	f000 f87f 	bl	80106f4 <ucdr_check_buffer_available_for>
 80105f6:	2800      	cmp	r0, #0
 80105f8:	d138      	bne.n	801066c <ucdr_deserialize_float+0x98>
 80105fa:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80105fe:	42b7      	cmp	r7, r6
 8010600:	d92f      	bls.n	8010662 <ucdr_deserialize_float+0x8e>
 8010602:	6923      	ldr	r3, [r4, #16]
 8010604:	4620      	mov	r0, r4
 8010606:	60a7      	str	r7, [r4, #8]
 8010608:	1bbf      	subs	r7, r7, r6
 801060a:	443b      	add	r3, r7
 801060c:	f1c7 0904 	rsb	r9, r7, #4
 8010610:	6123      	str	r3, [r4, #16]
 8010612:	4649      	mov	r1, r9
 8010614:	f000 f87a 	bl	801070c <ucdr_check_final_buffer_behavior>
 8010618:	2800      	cmp	r0, #0
 801061a:	d046      	beq.n	80106aa <ucdr_deserialize_float+0xd6>
 801061c:	7d23      	ldrb	r3, [r4, #20]
 801061e:	2b01      	cmp	r3, #1
 8010620:	d05c      	beq.n	80106dc <ucdr_deserialize_float+0x108>
 8010622:	78f3      	ldrb	r3, [r6, #3]
 8010624:	702b      	strb	r3, [r5, #0]
 8010626:	2f00      	cmp	r7, #0
 8010628:	d04c      	beq.n	80106c4 <ucdr_deserialize_float+0xf0>
 801062a:	78b3      	ldrb	r3, [r6, #2]
 801062c:	2f01      	cmp	r7, #1
 801062e:	706b      	strb	r3, [r5, #1]
 8010630:	f105 0302 	add.w	r3, r5, #2
 8010634:	d04a      	beq.n	80106cc <ucdr_deserialize_float+0xf8>
 8010636:	7873      	ldrb	r3, [r6, #1]
 8010638:	2f02      	cmp	r7, #2
 801063a:	70ab      	strb	r3, [r5, #2]
 801063c:	f105 0303 	add.w	r3, r5, #3
 8010640:	d048      	beq.n	80106d4 <ucdr_deserialize_float+0x100>
 8010642:	7833      	ldrb	r3, [r6, #0]
 8010644:	70eb      	strb	r3, [r5, #3]
 8010646:	6923      	ldr	r3, [r4, #16]
 8010648:	2104      	movs	r1, #4
 801064a:	68a2      	ldr	r2, [r4, #8]
 801064c:	3304      	adds	r3, #4
 801064e:	7da0      	ldrb	r0, [r4, #22]
 8010650:	444a      	add	r2, r9
 8010652:	7561      	strb	r1, [r4, #21]
 8010654:	1bdb      	subs	r3, r3, r7
 8010656:	f080 0001 	eor.w	r0, r0, #1
 801065a:	60a2      	str	r2, [r4, #8]
 801065c:	6123      	str	r3, [r4, #16]
 801065e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010662:	2104      	movs	r1, #4
 8010664:	4620      	mov	r0, r4
 8010666:	f000 f851 	bl	801070c <ucdr_check_final_buffer_behavior>
 801066a:	b1b0      	cbz	r0, 801069a <ucdr_deserialize_float+0xc6>
 801066c:	7d23      	ldrb	r3, [r4, #20]
 801066e:	2b01      	cmp	r3, #1
 8010670:	68a3      	ldr	r3, [r4, #8]
 8010672:	d017      	beq.n	80106a4 <ucdr_deserialize_float+0xd0>
 8010674:	78db      	ldrb	r3, [r3, #3]
 8010676:	702b      	strb	r3, [r5, #0]
 8010678:	68a3      	ldr	r3, [r4, #8]
 801067a:	789b      	ldrb	r3, [r3, #2]
 801067c:	706b      	strb	r3, [r5, #1]
 801067e:	68a3      	ldr	r3, [r4, #8]
 8010680:	785b      	ldrb	r3, [r3, #1]
 8010682:	70ab      	strb	r3, [r5, #2]
 8010684:	68a3      	ldr	r3, [r4, #8]
 8010686:	781b      	ldrb	r3, [r3, #0]
 8010688:	70eb      	strb	r3, [r5, #3]
 801068a:	2104      	movs	r1, #4
 801068c:	68a2      	ldr	r2, [r4, #8]
 801068e:	6923      	ldr	r3, [r4, #16]
 8010690:	440a      	add	r2, r1
 8010692:	7561      	strb	r1, [r4, #21]
 8010694:	440b      	add	r3, r1
 8010696:	60a2      	str	r2, [r4, #8]
 8010698:	6123      	str	r3, [r4, #16]
 801069a:	7da0      	ldrb	r0, [r4, #22]
 801069c:	f080 0001 	eor.w	r0, r0, #1
 80106a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	602b      	str	r3, [r5, #0]
 80106a8:	e7ef      	b.n	801068a <ucdr_deserialize_float+0xb6>
 80106aa:	68a2      	ldr	r2, [r4, #8]
 80106ac:	6923      	ldr	r3, [r4, #16]
 80106ae:	1bd2      	subs	r2, r2, r7
 80106b0:	7da0      	ldrb	r0, [r4, #22]
 80106b2:	1bdb      	subs	r3, r3, r7
 80106b4:	f884 8015 	strb.w	r8, [r4, #21]
 80106b8:	f080 0001 	eor.w	r0, r0, #1
 80106bc:	60a2      	str	r2, [r4, #8]
 80106be:	6123      	str	r3, [r4, #16]
 80106c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80106c4:	68a3      	ldr	r3, [r4, #8]
 80106c6:	789b      	ldrb	r3, [r3, #2]
 80106c8:	706b      	strb	r3, [r5, #1]
 80106ca:	1cab      	adds	r3, r5, #2
 80106cc:	68a2      	ldr	r2, [r4, #8]
 80106ce:	7852      	ldrb	r2, [r2, #1]
 80106d0:	f803 2b01 	strb.w	r2, [r3], #1
 80106d4:	68a2      	ldr	r2, [r4, #8]
 80106d6:	7812      	ldrb	r2, [r2, #0]
 80106d8:	701a      	strb	r2, [r3, #0]
 80106da:	e7b4      	b.n	8010646 <ucdr_deserialize_float+0x72>
 80106dc:	4631      	mov	r1, r6
 80106de:	463a      	mov	r2, r7
 80106e0:	4628      	mov	r0, r5
 80106e2:	f00c f960 	bl	801c9a6 <memcpy>
 80106e6:	464a      	mov	r2, r9
 80106e8:	19e8      	adds	r0, r5, r7
 80106ea:	68a1      	ldr	r1, [r4, #8]
 80106ec:	f00c f95b 	bl	801c9a6 <memcpy>
 80106f0:	e7a9      	b.n	8010646 <ucdr_deserialize_float+0x72>
 80106f2:	bf00      	nop

080106f4 <ucdr_check_buffer_available_for>:
 80106f4:	7d83      	ldrb	r3, [r0, #22]
 80106f6:	b93b      	cbnz	r3, 8010708 <ucdr_check_buffer_available_for+0x14>
 80106f8:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 80106fc:	4419      	add	r1, r3
 80106fe:	4288      	cmp	r0, r1
 8010700:	bf34      	ite	cc
 8010702:	2000      	movcc	r0, #0
 8010704:	2001      	movcs	r0, #1
 8010706:	4770      	bx	lr
 8010708:	2000      	movs	r0, #0
 801070a:	4770      	bx	lr

0801070c <ucdr_check_final_buffer_behavior>:
 801070c:	7d83      	ldrb	r3, [r0, #22]
 801070e:	b943      	cbnz	r3, 8010722 <ucdr_check_final_buffer_behavior+0x16>
 8010710:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 8010714:	b510      	push	{r4, lr}
 8010716:	4291      	cmp	r1, r2
 8010718:	4604      	mov	r4, r0
 801071a:	d205      	bcs.n	8010728 <ucdr_check_final_buffer_behavior+0x1c>
 801071c:	2301      	movs	r3, #1
 801071e:	4618      	mov	r0, r3
 8010720:	bd10      	pop	{r4, pc}
 8010722:	2300      	movs	r3, #0
 8010724:	4618      	mov	r0, r3
 8010726:	4770      	bx	lr
 8010728:	6982      	ldr	r2, [r0, #24]
 801072a:	b13a      	cbz	r2, 801073c <ucdr_check_final_buffer_behavior+0x30>
 801072c:	69c1      	ldr	r1, [r0, #28]
 801072e:	4790      	blx	r2
 8010730:	f080 0301 	eor.w	r3, r0, #1
 8010734:	75a0      	strb	r0, [r4, #22]
 8010736:	b2db      	uxtb	r3, r3
 8010738:	4618      	mov	r0, r3
 801073a:	bd10      	pop	{r4, pc}
 801073c:	2001      	movs	r0, #1
 801073e:	75a0      	strb	r0, [r4, #22]
 8010740:	e7fa      	b.n	8010738 <ucdr_check_final_buffer_behavior+0x2c>
 8010742:	bf00      	nop

08010744 <ucdr_set_on_full_buffer_callback>:
 8010744:	e9c0 1206 	strd	r1, r2, [r0, #24]
 8010748:	4770      	bx	lr
 801074a:	bf00      	nop

0801074c <ucdr_init_buffer_origin_offset_endian>:
 801074c:	b410      	push	{r4}
 801074e:	9c01      	ldr	r4, [sp, #4]
 8010750:	440a      	add	r2, r1
 8010752:	6001      	str	r1, [r0, #0]
 8010754:	6042      	str	r2, [r0, #4]
 8010756:	190a      	adds	r2, r1, r4
 8010758:	441c      	add	r4, r3
 801075a:	6082      	str	r2, [r0, #8]
 801075c:	2200      	movs	r2, #0
 801075e:	e9c0 3403 	strd	r3, r4, [r0, #12]
 8010762:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8010766:	7542      	strb	r2, [r0, #21]
 8010768:	f85d 4b04 	ldr.w	r4, [sp], #4
 801076c:	7582      	strb	r2, [r0, #22]
 801076e:	7503      	strb	r3, [r0, #20]
 8010770:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8010774:	4770      	bx	lr
 8010776:	bf00      	nop

08010778 <ucdr_init_buffer_origin_offset>:
 8010778:	b510      	push	{r4, lr}
 801077a:	b082      	sub	sp, #8
 801077c:	9c04      	ldr	r4, [sp, #16]
 801077e:	9400      	str	r4, [sp, #0]
 8010780:	2401      	movs	r4, #1
 8010782:	9401      	str	r4, [sp, #4]
 8010784:	f7ff ffe2 	bl	801074c <ucdr_init_buffer_origin_offset_endian>
 8010788:	b002      	add	sp, #8
 801078a:	bd10      	pop	{r4, pc}

0801078c <ucdr_init_buffer_origin>:
 801078c:	b510      	push	{r4, lr}
 801078e:	2400      	movs	r4, #0
 8010790:	b082      	sub	sp, #8
 8010792:	9400      	str	r4, [sp, #0]
 8010794:	f7ff fff0 	bl	8010778 <ucdr_init_buffer_origin_offset>
 8010798:	b002      	add	sp, #8
 801079a:	bd10      	pop	{r4, pc}

0801079c <ucdr_init_buffer>:
 801079c:	2300      	movs	r3, #0
 801079e:	f7ff bff5 	b.w	801078c <ucdr_init_buffer_origin>
 80107a2:	bf00      	nop

080107a4 <ucdr_alignment>:
 80107a4:	fbb0 f2f1 	udiv	r2, r0, r1
 80107a8:	fb02 0011 	mls	r0, r2, r1, r0
 80107ac:	1e4b      	subs	r3, r1, #1
 80107ae:	1a08      	subs	r0, r1, r0
 80107b0:	4018      	ands	r0, r3
 80107b2:	4770      	bx	lr

080107b4 <ucdr_buffer_alignment>:
 80107b4:	7d43      	ldrb	r3, [r0, #21]
 80107b6:	428b      	cmp	r3, r1
 80107b8:	d209      	bcs.n	80107ce <ucdr_buffer_alignment+0x1a>
 80107ba:	6903      	ldr	r3, [r0, #16]
 80107bc:	1e4a      	subs	r2, r1, #1
 80107be:	fbb3 f0f1 	udiv	r0, r3, r1
 80107c2:	fb01 3010 	mls	r0, r1, r0, r3
 80107c6:	1a09      	subs	r1, r1, r0
 80107c8:	ea01 0002 	and.w	r0, r1, r2
 80107cc:	4770      	bx	lr
 80107ce:	2000      	movs	r0, #0
 80107d0:	4770      	bx	lr
 80107d2:	bf00      	nop

080107d4 <ucdr_align_to>:
 80107d4:	b538      	push	{r3, r4, r5, lr}
 80107d6:	4604      	mov	r4, r0
 80107d8:	460d      	mov	r5, r1
 80107da:	f7ff ffeb 	bl	80107b4 <ucdr_buffer_alignment>
 80107de:	68a3      	ldr	r3, [r4, #8]
 80107e0:	7565      	strb	r5, [r4, #21]
 80107e2:	181a      	adds	r2, r3, r0
 80107e4:	6923      	ldr	r3, [r4, #16]
 80107e6:	4418      	add	r0, r3
 80107e8:	6863      	ldr	r3, [r4, #4]
 80107ea:	4293      	cmp	r3, r2
 80107ec:	6120      	str	r0, [r4, #16]
 80107ee:	bf28      	it	cs
 80107f0:	4613      	movcs	r3, r2
 80107f2:	60a3      	str	r3, [r4, #8]
 80107f4:	bd38      	pop	{r3, r4, r5, pc}
 80107f6:	bf00      	nop

080107f8 <ucdr_buffer_length>:
 80107f8:	6882      	ldr	r2, [r0, #8]
 80107fa:	6800      	ldr	r0, [r0, #0]
 80107fc:	1a10      	subs	r0, r2, r0
 80107fe:	4770      	bx	lr

08010800 <ucdr_buffer_remaining>:
 8010800:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 8010804:	1a10      	subs	r0, r2, r0
 8010806:	4770      	bx	lr

08010808 <ucdr_check_final_buffer_behavior_array>:
 8010808:	b538      	push	{r3, r4, r5, lr}
 801080a:	7d83      	ldrb	r3, [r0, #22]
 801080c:	b9a3      	cbnz	r3, 8010838 <ucdr_check_final_buffer_behavior_array+0x30>
 801080e:	4604      	mov	r4, r0
 8010810:	460d      	mov	r5, r1
 8010812:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8010816:	429a      	cmp	r2, r3
 8010818:	d300      	bcc.n	801081c <ucdr_check_final_buffer_behavior_array+0x14>
 801081a:	b931      	cbnz	r1, 801082a <ucdr_check_final_buffer_behavior_array+0x22>
 801081c:	4620      	mov	r0, r4
 801081e:	f7ff ffef 	bl	8010800 <ucdr_buffer_remaining>
 8010822:	42a8      	cmp	r0, r5
 8010824:	bf28      	it	cs
 8010826:	4628      	movcs	r0, r5
 8010828:	bd38      	pop	{r3, r4, r5, pc}
 801082a:	6983      	ldr	r3, [r0, #24]
 801082c:	b133      	cbz	r3, 801083c <ucdr_check_final_buffer_behavior_array+0x34>
 801082e:	69c1      	ldr	r1, [r0, #28]
 8010830:	4798      	blx	r3
 8010832:	75a0      	strb	r0, [r4, #22]
 8010834:	2800      	cmp	r0, #0
 8010836:	d0f1      	beq.n	801081c <ucdr_check_final_buffer_behavior_array+0x14>
 8010838:	2000      	movs	r0, #0
 801083a:	bd38      	pop	{r3, r4, r5, pc}
 801083c:	2301      	movs	r3, #1
 801083e:	7583      	strb	r3, [r0, #22]
 8010840:	e7fa      	b.n	8010838 <ucdr_check_final_buffer_behavior_array+0x30>
 8010842:	bf00      	nop

08010844 <ucdr_advance_buffer>:
 8010844:	b538      	push	{r3, r4, r5, lr}
 8010846:	4604      	mov	r4, r0
 8010848:	460d      	mov	r5, r1
 801084a:	f7ff ff53 	bl	80106f4 <ucdr_check_buffer_available_for>
 801084e:	b178      	cbz	r0, 8010870 <ucdr_advance_buffer+0x2c>
 8010850:	6923      	ldr	r3, [r4, #16]
 8010852:	68a2      	ldr	r2, [r4, #8]
 8010854:	442b      	add	r3, r5
 8010856:	442a      	add	r2, r5
 8010858:	6123      	str	r3, [r4, #16]
 801085a:	2301      	movs	r3, #1
 801085c:	60a2      	str	r2, [r4, #8]
 801085e:	7563      	strb	r3, [r4, #21]
 8010860:	bd38      	pop	{r3, r4, r5, pc}
 8010862:	68a2      	ldr	r2, [r4, #8]
 8010864:	1a2d      	subs	r5, r5, r0
 8010866:	6923      	ldr	r3, [r4, #16]
 8010868:	4402      	add	r2, r0
 801086a:	4418      	add	r0, r3
 801086c:	60a2      	str	r2, [r4, #8]
 801086e:	6120      	str	r0, [r4, #16]
 8010870:	4629      	mov	r1, r5
 8010872:	2201      	movs	r2, #1
 8010874:	4620      	mov	r0, r4
 8010876:	f7ff ffc7 	bl	8010808 <ucdr_check_final_buffer_behavior_array>
 801087a:	2800      	cmp	r0, #0
 801087c:	d1f1      	bne.n	8010862 <ucdr_advance_buffer+0x1e>
 801087e:	2301      	movs	r3, #1
 8010880:	7563      	strb	r3, [r4, #21]
 8010882:	bd38      	pop	{r3, r4, r5, pc}

08010884 <uxr_buffer_delete_entity>:
 8010884:	b510      	push	{r4, lr}
 8010886:	2300      	movs	r3, #0
 8010888:	b08e      	sub	sp, #56	; 0x38
 801088a:	4604      	mov	r4, r0
 801088c:	9103      	str	r1, [sp, #12]
 801088e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8010892:	2303      	movs	r3, #3
 8010894:	2204      	movs	r2, #4
 8010896:	9300      	str	r3, [sp, #0]
 8010898:	ab06      	add	r3, sp, #24
 801089a:	f001 f989 	bl	8011bb0 <uxr_prepare_stream_to_write_submessage>
 801089e:	b918      	cbnz	r0, 80108a8 <uxr_buffer_delete_entity+0x24>
 80108a0:	4604      	mov	r4, r0
 80108a2:	4620      	mov	r0, r4
 80108a4:	b00e      	add	sp, #56	; 0x38
 80108a6:	bd10      	pop	{r4, pc}
 80108a8:	9902      	ldr	r1, [sp, #8]
 80108aa:	aa05      	add	r2, sp, #20
 80108ac:	4620      	mov	r0, r4
 80108ae:	f001 fabb 	bl	8011e28 <uxr_init_base_object_request>
 80108b2:	4604      	mov	r4, r0
 80108b4:	a905      	add	r1, sp, #20
 80108b6:	a806      	add	r0, sp, #24
 80108b8:	f002 fd44 	bl	8013344 <uxr_serialize_DELETE_Payload>
 80108bc:	4620      	mov	r0, r4
 80108be:	b00e      	add	sp, #56	; 0x38
 80108c0:	bd10      	pop	{r4, pc}
 80108c2:	bf00      	nop

080108c4 <uxr_common_create_entity>:
 80108c4:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 80108c8:	b510      	push	{r4, lr}
 80108ca:	f1bc 0f01 	cmp.w	ip, #1
 80108ce:	b08c      	sub	sp, #48	; 0x30
 80108d0:	4604      	mov	r4, r0
 80108d2:	9202      	str	r2, [sp, #8]
 80108d4:	bf0c      	ite	eq
 80108d6:	f003 0201 	andeq.w	r2, r3, #1
 80108da:	2200      	movne	r2, #0
 80108dc:	330e      	adds	r3, #14
 80108de:	9103      	str	r1, [sp, #12]
 80108e0:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 80108e4:	441a      	add	r2, r3
 80108e6:	ab04      	add	r3, sp, #16
 80108e8:	9101      	str	r1, [sp, #4]
 80108ea:	2101      	movs	r1, #1
 80108ec:	b292      	uxth	r2, r2
 80108ee:	9100      	str	r1, [sp, #0]
 80108f0:	9903      	ldr	r1, [sp, #12]
 80108f2:	f001 f95d 	bl	8011bb0 <uxr_prepare_stream_to_write_submessage>
 80108f6:	b918      	cbnz	r0, 8010900 <uxr_common_create_entity+0x3c>
 80108f8:	4604      	mov	r4, r0
 80108fa:	4620      	mov	r0, r4
 80108fc:	b00c      	add	sp, #48	; 0x30
 80108fe:	bd10      	pop	{r4, pc}
 8010900:	9902      	ldr	r1, [sp, #8]
 8010902:	4620      	mov	r0, r4
 8010904:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010906:	f001 fa8f 	bl	8011e28 <uxr_init_base_object_request>
 801090a:	4604      	mov	r4, r0
 801090c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801090e:	a804      	add	r0, sp, #16
 8010910:	f002 fc72 	bl	80131f8 <uxr_serialize_CREATE_Payload>
 8010914:	4620      	mov	r0, r4
 8010916:	b00c      	add	sp, #48	; 0x30
 8010918:	bd10      	pop	{r4, pc}
 801091a:	bf00      	nop

0801091c <uxr_buffer_create_participant_bin>:
 801091c:	b570      	push	{r4, r5, r6, lr}
 801091e:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 8010922:	4605      	mov	r5, r0
 8010924:	ac11      	add	r4, sp, #68	; 0x44
 8010926:	f8ad 3254 	strh.w	r3, [sp, #596]	; 0x254
 801092a:	2303      	movs	r3, #3
 801092c:	f89d 626c 	ldrb.w	r6, [sp, #620]	; 0x26c
 8010930:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8010934:	7223      	strb	r3, [r4, #8]
 8010936:	2300      	movs	r3, #0
 8010938:	2201      	movs	r2, #1
 801093a:	f88d 3014 	strb.w	r3, [sp, #20]
 801093e:	9b9a      	ldr	r3, [sp, #616]	; 0x268
 8010940:	7122      	strb	r2, [r4, #4]
 8010942:	b1cb      	cbz	r3, 8010978 <uxr_buffer_create_participant_bin+0x5c>
 8010944:	f88d 201c 	strb.w	r2, [sp, #28]
 8010948:	9308      	str	r3, [sp, #32]
 801094a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801094e:	a915      	add	r1, sp, #84	; 0x54
 8010950:	a809      	add	r0, sp, #36	; 0x24
 8010952:	f7ff ff23 	bl	801079c <ucdr_init_buffer>
 8010956:	a905      	add	r1, sp, #20
 8010958:	a809      	add	r0, sp, #36	; 0x24
 801095a:	f002 f803 	bl	8012964 <uxr_serialize_OBJK_DomainParticipant_Binary>
 801095e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010960:	9600      	str	r6, [sp, #0]
 8010962:	4628      	mov	r0, r5
 8010964:	9401      	str	r4, [sp, #4]
 8010966:	60e3      	str	r3, [r4, #12]
 8010968:	b29b      	uxth	r3, r3
 801096a:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801096e:	f7ff ffa9 	bl	80108c4 <uxr_common_create_entity>
 8010972:	f50d 7d16 	add.w	sp, sp, #600	; 0x258
 8010976:	bd70      	pop	{r4, r5, r6, pc}
 8010978:	f88d 301c 	strb.w	r3, [sp, #28]
 801097c:	e7e5      	b.n	801094a <uxr_buffer_create_participant_bin+0x2e>
 801097e:	bf00      	nop

08010980 <uxr_buffer_create_topic_bin>:
 8010980:	b570      	push	{r4, r5, r6, lr}
 8010982:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
 8010986:	4605      	mov	r5, r0
 8010988:	4618      	mov	r0, r3
 801098a:	9105      	str	r1, [sp, #20]
 801098c:	a997      	add	r1, sp, #604	; 0x25c
 801098e:	f89d 6278 	ldrb.w	r6, [sp, #632]	; 0x278
 8010992:	ac13      	add	r4, sp, #76	; 0x4c
 8010994:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010998:	2302      	movs	r3, #2
 801099a:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
 801099e:	f000 f9cf 	bl	8010d40 <uxr_object_id_to_raw>
 80109a2:	9b9c      	ldr	r3, [sp, #624]	; 0x270
 80109a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80109a8:	a917      	add	r1, sp, #92	; 0x5c
 80109aa:	a80b      	add	r0, sp, #44	; 0x2c
 80109ac:	9306      	str	r3, [sp, #24]
 80109ae:	9b9d      	ldr	r3, [sp, #628]	; 0x274
 80109b0:	930a      	str	r3, [sp, #40]	; 0x28
 80109b2:	2303      	movs	r3, #3
 80109b4:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 80109b8:	2301      	movs	r3, #1
 80109ba:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80109be:	2300      	movs	r3, #0
 80109c0:	f88d 301c 	strb.w	r3, [sp, #28]
 80109c4:	f7ff feea 	bl	801079c <ucdr_init_buffer>
 80109c8:	a906      	add	r1, sp, #24
 80109ca:	a80b      	add	r0, sp, #44	; 0x2c
 80109cc:	f001 ffec 	bl	80129a8 <uxr_serialize_OBJK_Topic_Binary>
 80109d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80109d2:	4628      	mov	r0, r5
 80109d4:	9600      	str	r6, [sp, #0]
 80109d6:	9316      	str	r3, [sp, #88]	; 0x58
 80109d8:	b29b      	uxth	r3, r3
 80109da:	9401      	str	r4, [sp, #4]
 80109dc:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80109e0:	f7ff ff70 	bl	80108c4 <uxr_common_create_entity>
 80109e4:	f50d 7d18 	add.w	sp, sp, #608	; 0x260
 80109e8:	bd70      	pop	{r4, r5, r6, pc}
 80109ea:	bf00      	nop

080109ec <uxr_buffer_create_publisher_bin>:
 80109ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80109ee:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 80109f2:	2603      	movs	r6, #3
 80109f4:	4605      	mov	r5, r0
 80109f6:	4618      	mov	r0, r3
 80109f8:	9105      	str	r1, [sp, #20]
 80109fa:	a992      	add	r1, sp, #584	; 0x248
 80109fc:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 8010a00:	ac0e      	add	r4, sp, #56	; 0x38
 8010a02:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 8010a06:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010a0a:	f000 f999 	bl	8010d40 <uxr_object_id_to_raw>
 8010a0e:	2300      	movs	r3, #0
 8010a10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010a14:	a912      	add	r1, sp, #72	; 0x48
 8010a16:	a806      	add	r0, sp, #24
 8010a18:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 8010a1c:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 8010a20:	f88d 6040 	strb.w	r6, [sp, #64]	; 0x40
 8010a24:	f7ff feba 	bl	801079c <ucdr_init_buffer>
 8010a28:	a993      	add	r1, sp, #588	; 0x24c
 8010a2a:	a806      	add	r0, sp, #24
 8010a2c:	f002 f870 	bl	8012b10 <uxr_serialize_OBJK_Publisher_Binary>
 8010a30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010a32:	4628      	mov	r0, r5
 8010a34:	9700      	str	r7, [sp, #0]
 8010a36:	9311      	str	r3, [sp, #68]	; 0x44
 8010a38:	b29b      	uxth	r3, r3
 8010a3a:	9401      	str	r4, [sp, #4]
 8010a3c:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010a40:	f7ff ff40 	bl	80108c4 <uxr_common_create_entity>
 8010a44:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 8010a48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010a4a:	bf00      	nop

08010a4c <uxr_buffer_create_subscriber_bin>:
 8010a4c:	b570      	push	{r4, r5, r6, lr}
 8010a4e:	f5ad 6d91 	sub.w	sp, sp, #1160	; 0x488
 8010a52:	4605      	mov	r5, r0
 8010a54:	4618      	mov	r0, r3
 8010a56:	9105      	str	r1, [sp, #20]
 8010a58:	a992      	add	r1, sp, #584	; 0x248
 8010a5a:	f89d 6498 	ldrb.w	r6, [sp, #1176]	; 0x498
 8010a5e:	ac0e      	add	r4, sp, #56	; 0x38
 8010a60:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010a64:	2304      	movs	r3, #4
 8010a66:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
 8010a6a:	f000 f969 	bl	8010d40 <uxr_object_id_to_raw>
 8010a6e:	2300      	movs	r3, #0
 8010a70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010a74:	a912      	add	r1, sp, #72	; 0x48
 8010a76:	a806      	add	r0, sp, #24
 8010a78:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 8010a7c:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 8010a80:	2303      	movs	r3, #3
 8010a82:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 8010a86:	f7ff fe89 	bl	801079c <ucdr_init_buffer>
 8010a8a:	a993      	add	r1, sp, #588	; 0x24c
 8010a8c:	a806      	add	r0, sp, #24
 8010a8e:	f002 f8ef 	bl	8012c70 <uxr_serialize_OBJK_Subscriber_Binary>
 8010a92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010a94:	4628      	mov	r0, r5
 8010a96:	9600      	str	r6, [sp, #0]
 8010a98:	9311      	str	r3, [sp, #68]	; 0x44
 8010a9a:	b29b      	uxth	r3, r3
 8010a9c:	9401      	str	r4, [sp, #4]
 8010a9e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010aa2:	f7ff ff0f 	bl	80108c4 <uxr_common_create_entity>
 8010aa6:	f50d 6d91 	add.w	sp, sp, #1160	; 0x488
 8010aaa:	bd70      	pop	{r4, r5, r6, pc}

08010aac <uxr_buffer_create_datawriter_bin>:
 8010aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ab0:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8010ab4:	4606      	mov	r6, r0
 8010ab6:	4618      	mov	r0, r3
 8010ab8:	2703      	movs	r7, #3
 8010aba:	ac1d      	add	r4, sp, #116	; 0x74
 8010abc:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	; 0x2a8
 8010ac0:	9105      	str	r1, [sp, #20]
 8010ac2:	a9a1      	add	r1, sp, #644	; 0x284
 8010ac4:	f89d 82ac 	ldrb.w	r8, [sp, #684]	; 0x2ac
 8010ac8:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010acc:	2305      	movs	r3, #5
 8010ace:	7123      	strb	r3, [r4, #4]
 8010ad0:	f000 f936 	bl	8010d40 <uxr_object_id_to_raw>
 8010ad4:	a90e      	add	r1, sp, #56	; 0x38
 8010ad6:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
 8010ad8:	7227      	strb	r7, [r4, #8]
 8010ada:	f000 f931 	bl	8010d40 <uxr_object_id_to_raw>
 8010ade:	2300      	movs	r3, #0
 8010ae0:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 8010ae4:	3d00      	subs	r5, #0
 8010ae6:	f89d 22a5 	ldrb.w	r2, [sp, #677]	; 0x2a5
 8010aea:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 8010aee:	bf18      	it	ne
 8010af0:	2501      	movne	r5, #1
 8010af2:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 8010af6:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 8010afa:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8010afe:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8010b02:	2301      	movs	r3, #1
 8010b04:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 8010b08:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 8010b0c:	bb8a      	cbnz	r2, 8010b72 <uxr_buffer_create_datawriter_bin+0xc6>
 8010b0e:	f04f 0e23 	mov.w	lr, #35	; 0x23
 8010b12:	f04f 0c13 	mov.w	ip, #19
 8010b16:	250b      	movs	r5, #11
 8010b18:	2221      	movs	r2, #33	; 0x21
 8010b1a:	2111      	movs	r1, #17
 8010b1c:	2009      	movs	r0, #9
 8010b1e:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8010b22:	f89d 32a6 	ldrb.w	r3, [sp, #678]	; 0x2a6
 8010b26:	b923      	cbnz	r3, 8010b32 <uxr_buffer_create_datawriter_bin+0x86>
 8010b28:	4672      	mov	r2, lr
 8010b2a:	4661      	mov	r1, ip
 8010b2c:	4628      	mov	r0, r5
 8010b2e:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 8010b32:	f89d 32a4 	ldrb.w	r3, [sp, #676]	; 0x2a4
 8010b36:	2b01      	cmp	r3, #1
 8010b38:	d025      	beq.n	8010b86 <uxr_buffer_create_datawriter_bin+0xda>
 8010b3a:	2b03      	cmp	r3, #3
 8010b3c:	d029      	beq.n	8010b92 <uxr_buffer_create_datawriter_bin+0xe6>
 8010b3e:	b32b      	cbz	r3, 8010b8c <uxr_buffer_create_datawriter_bin+0xe0>
 8010b40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010b44:	a921      	add	r1, sp, #132	; 0x84
 8010b46:	a806      	add	r0, sp, #24
 8010b48:	f7ff fe28 	bl	801079c <ucdr_init_buffer>
 8010b4c:	a90e      	add	r1, sp, #56	; 0x38
 8010b4e:	a806      	add	r0, sp, #24
 8010b50:	f002 f940 	bl	8012dd4 <uxr_serialize_OBJK_DataWriter_Binary>
 8010b54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010b56:	f8cd 8000 	str.w	r8, [sp]
 8010b5a:	4630      	mov	r0, r6
 8010b5c:	9401      	str	r4, [sp, #4]
 8010b5e:	60e3      	str	r3, [r4, #12]
 8010b60:	b29b      	uxth	r3, r3
 8010b62:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010b66:	f7ff fead 	bl	80108c4 <uxr_common_create_entity>
 8010b6a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8010b6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b72:	f04f 0e22 	mov.w	lr, #34	; 0x22
 8010b76:	f04f 0c12 	mov.w	ip, #18
 8010b7a:	250a      	movs	r5, #10
 8010b7c:	2220      	movs	r2, #32
 8010b7e:	2110      	movs	r1, #16
 8010b80:	2008      	movs	r0, #8
 8010b82:	2702      	movs	r7, #2
 8010b84:	e7cd      	b.n	8010b22 <uxr_buffer_create_datawriter_bin+0x76>
 8010b86:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 8010b8a:	e7d9      	b.n	8010b40 <uxr_buffer_create_datawriter_bin+0x94>
 8010b8c:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 8010b90:	e7d6      	b.n	8010b40 <uxr_buffer_create_datawriter_bin+0x94>
 8010b92:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8010b96:	e7d3      	b.n	8010b40 <uxr_buffer_create_datawriter_bin+0x94>

08010b98 <uxr_buffer_create_datareader_bin>:
 8010b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b9c:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 8010ba0:	4606      	mov	r6, r0
 8010ba2:	4618      	mov	r0, r3
 8010ba4:	2703      	movs	r7, #3
 8010ba6:	ac1f      	add	r4, sp, #124	; 0x7c
 8010ba8:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	; 0x2b0
 8010bac:	9105      	str	r1, [sp, #20]
 8010bae:	a9a3      	add	r1, sp, #652	; 0x28c
 8010bb0:	f89d 82b4 	ldrb.w	r8, [sp, #692]	; 0x2b4
 8010bb4:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010bb8:	2306      	movs	r3, #6
 8010bba:	7123      	strb	r3, [r4, #4]
 8010bbc:	f000 f8c0 	bl	8010d40 <uxr_object_id_to_raw>
 8010bc0:	a90e      	add	r1, sp, #56	; 0x38
 8010bc2:	98aa      	ldr	r0, [sp, #680]	; 0x2a8
 8010bc4:	7227      	strb	r7, [r4, #8]
 8010bc6:	f000 f8bb 	bl	8010d40 <uxr_object_id_to_raw>
 8010bca:	2300      	movs	r3, #0
 8010bcc:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 8010bd0:	3d00      	subs	r5, #0
 8010bd2:	f89d 22ad 	ldrb.w	r2, [sp, #685]	; 0x2ad
 8010bd6:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 8010bda:	bf18      	it	ne
 8010bdc:	2501      	movne	r5, #1
 8010bde:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 8010be2:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 8010be6:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 8010bea:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8010bee:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8010bf2:	2301      	movs	r3, #1
 8010bf4:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 8010bf8:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 8010bfc:	bb8a      	cbnz	r2, 8010c62 <uxr_buffer_create_datareader_bin+0xca>
 8010bfe:	f04f 0e23 	mov.w	lr, #35	; 0x23
 8010c02:	f04f 0c13 	mov.w	ip, #19
 8010c06:	250b      	movs	r5, #11
 8010c08:	2221      	movs	r2, #33	; 0x21
 8010c0a:	2111      	movs	r1, #17
 8010c0c:	2009      	movs	r0, #9
 8010c0e:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8010c12:	f89d 32ae 	ldrb.w	r3, [sp, #686]	; 0x2ae
 8010c16:	b923      	cbnz	r3, 8010c22 <uxr_buffer_create_datareader_bin+0x8a>
 8010c18:	4672      	mov	r2, lr
 8010c1a:	4661      	mov	r1, ip
 8010c1c:	4628      	mov	r0, r5
 8010c1e:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 8010c22:	f89d 32ac 	ldrb.w	r3, [sp, #684]	; 0x2ac
 8010c26:	2b01      	cmp	r3, #1
 8010c28:	d025      	beq.n	8010c76 <uxr_buffer_create_datareader_bin+0xde>
 8010c2a:	2b03      	cmp	r3, #3
 8010c2c:	d029      	beq.n	8010c82 <uxr_buffer_create_datareader_bin+0xea>
 8010c2e:	b32b      	cbz	r3, 8010c7c <uxr_buffer_create_datareader_bin+0xe4>
 8010c30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010c34:	a923      	add	r1, sp, #140	; 0x8c
 8010c36:	a806      	add	r0, sp, #24
 8010c38:	f7ff fdb0 	bl	801079c <ucdr_init_buffer>
 8010c3c:	a90e      	add	r1, sp, #56	; 0x38
 8010c3e:	a806      	add	r0, sp, #24
 8010c40:	f002 f88c 	bl	8012d5c <uxr_serialize_OBJK_DataReader_Binary>
 8010c44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010c46:	f8cd 8000 	str.w	r8, [sp]
 8010c4a:	4630      	mov	r0, r6
 8010c4c:	9401      	str	r4, [sp, #4]
 8010c4e:	60e3      	str	r3, [r4, #12]
 8010c50:	b29b      	uxth	r3, r3
 8010c52:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010c56:	f7ff fe35 	bl	80108c4 <uxr_common_create_entity>
 8010c5a:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 8010c5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c62:	f04f 0e22 	mov.w	lr, #34	; 0x22
 8010c66:	f04f 0c12 	mov.w	ip, #18
 8010c6a:	250a      	movs	r5, #10
 8010c6c:	2220      	movs	r2, #32
 8010c6e:	2110      	movs	r1, #16
 8010c70:	2008      	movs	r0, #8
 8010c72:	2702      	movs	r7, #2
 8010c74:	e7cd      	b.n	8010c12 <uxr_buffer_create_datareader_bin+0x7a>
 8010c76:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 8010c7a:	e7d9      	b.n	8010c30 <uxr_buffer_create_datareader_bin+0x98>
 8010c7c:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 8010c80:	e7d6      	b.n	8010c30 <uxr_buffer_create_datareader_bin+0x98>
 8010c82:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8010c86:	e7d3      	b.n	8010c30 <uxr_buffer_create_datareader_bin+0x98>

08010c88 <uxr_buffer_create_replier_bin>:
 8010c88:	b570      	push	{r4, r5, r6, lr}
 8010c8a:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 8010c8e:	4605      	mov	r5, r0
 8010c90:	4618      	mov	r0, r3
 8010c92:	9105      	str	r1, [sp, #20]
 8010c94:	a999      	add	r1, sp, #612	; 0x264
 8010c96:	f89d 6294 	ldrb.w	r6, [sp, #660]	; 0x294
 8010c9a:	ac15      	add	r4, sp, #84	; 0x54
 8010c9c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010ca0:	2308      	movs	r3, #8
 8010ca2:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
 8010ca6:	f000 f84b 	bl	8010d40 <uxr_object_id_to_raw>
 8010caa:	9b9e      	ldr	r3, [sp, #632]	; 0x278
 8010cac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010cb0:	a919      	add	r1, sp, #100	; 0x64
 8010cb2:	a80d      	add	r0, sp, #52	; 0x34
 8010cb4:	9306      	str	r3, [sp, #24]
 8010cb6:	9b9f      	ldr	r3, [sp, #636]	; 0x27c
 8010cb8:	9307      	str	r3, [sp, #28]
 8010cba:	9ba0      	ldr	r3, [sp, #640]	; 0x280
 8010cbc:	9308      	str	r3, [sp, #32]
 8010cbe:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8010cc0:	930c      	str	r3, [sp, #48]	; 0x30
 8010cc2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8010cc4:	930a      	str	r3, [sp, #40]	; 0x28
 8010cc6:	2301      	movs	r3, #1
 8010cc8:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8010ccc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8010cd0:	2303      	movs	r3, #3
 8010cd2:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
 8010cd6:	f7ff fd61 	bl	801079c <ucdr_init_buffer>
 8010cda:	a906      	add	r1, sp, #24
 8010cdc:	a80d      	add	r0, sp, #52	; 0x34
 8010cde:	f002 f8a5 	bl	8012e2c <uxr_serialize_OBJK_Replier_Binary>
 8010ce2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010ce4:	4628      	mov	r0, r5
 8010ce6:	9600      	str	r6, [sp, #0]
 8010ce8:	9318      	str	r3, [sp, #96]	; 0x60
 8010cea:	b29b      	uxth	r3, r3
 8010cec:	9401      	str	r4, [sp, #4]
 8010cee:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010cf2:	f7ff fde7 	bl	80108c4 <uxr_common_create_entity>
 8010cf6:	f50d 7d1a 	add.w	sp, sp, #616	; 0x268
 8010cfa:	bd70      	pop	{r4, r5, r6, pc}

08010cfc <uxr_object_id>:
 8010cfc:	b082      	sub	sp, #8
 8010cfe:	2300      	movs	r3, #0
 8010d00:	f88d 1006 	strb.w	r1, [sp, #6]
 8010d04:	f360 030f 	bfi	r3, r0, #0, #16
 8010d08:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8010d0c:	f362 431f 	bfi	r3, r2, #16, #16
 8010d10:	4618      	mov	r0, r3
 8010d12:	b002      	add	sp, #8
 8010d14:	4770      	bx	lr
 8010d16:	bf00      	nop

08010d18 <uxr_object_id_from_raw>:
 8010d18:	7843      	ldrb	r3, [r0, #1]
 8010d1a:	b082      	sub	sp, #8
 8010d1c:	7801      	ldrb	r1, [r0, #0]
 8010d1e:	2000      	movs	r0, #0
 8010d20:	091a      	lsrs	r2, r3, #4
 8010d22:	f003 030f 	and.w	r3, r3, #15
 8010d26:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8010d2a:	f88d 3006 	strb.w	r3, [sp, #6]
 8010d2e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8010d32:	f362 000f 	bfi	r0, r2, #0, #16
 8010d36:	f363 401f 	bfi	r0, r3, #16, #16
 8010d3a:	b002      	add	sp, #8
 8010d3c:	4770      	bx	lr
 8010d3e:	bf00      	nop

08010d40 <uxr_object_id_to_raw>:
 8010d40:	4602      	mov	r2, r0
 8010d42:	f3c0 4303 	ubfx	r3, r0, #16, #4
 8010d46:	b082      	sub	sp, #8
 8010d48:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 8010d4c:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 8010d50:	f881 c000 	strb.w	ip, [r1]
 8010d54:	7048      	strb	r0, [r1, #1]
 8010d56:	b002      	add	sp, #8
 8010d58:	4770      	bx	lr
 8010d5a:	bf00      	nop

08010d5c <on_get_fragmentation_info>:
 8010d5c:	b500      	push	{lr}
 8010d5e:	b08b      	sub	sp, #44	; 0x2c
 8010d60:	4601      	mov	r1, r0
 8010d62:	2204      	movs	r2, #4
 8010d64:	a802      	add	r0, sp, #8
 8010d66:	f7ff fd19 	bl	801079c <ucdr_init_buffer>
 8010d6a:	f10d 0305 	add.w	r3, sp, #5
 8010d6e:	f10d 0206 	add.w	r2, sp, #6
 8010d72:	a901      	add	r1, sp, #4
 8010d74:	a802      	add	r0, sp, #8
 8010d76:	f001 f9e1 	bl	801213c <uxr_read_submessage_header>
 8010d7a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010d7e:	2b0d      	cmp	r3, #13
 8010d80:	d003      	beq.n	8010d8a <on_get_fragmentation_info+0x2e>
 8010d82:	2000      	movs	r0, #0
 8010d84:	b00b      	add	sp, #44	; 0x2c
 8010d86:	f85d fb04 	ldr.w	pc, [sp], #4
 8010d8a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010d8e:	f013 0f02 	tst.w	r3, #2
 8010d92:	bf14      	ite	ne
 8010d94:	2002      	movne	r0, #2
 8010d96:	2001      	moveq	r0, #1
 8010d98:	b00b      	add	sp, #44	; 0x2c
 8010d9a:	f85d fb04 	ldr.w	pc, [sp], #4
 8010d9e:	bf00      	nop

08010da0 <read_submessage_get_info>:
 8010da0:	b570      	push	{r4, r5, r6, lr}
 8010da2:	2500      	movs	r5, #0
 8010da4:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
 8010da8:	460e      	mov	r6, r1
 8010daa:	4604      	mov	r4, r0
 8010dac:	f44f 7224 	mov.w	r2, #656	; 0x290
 8010db0:	4629      	mov	r1, r5
 8010db2:	a810      	add	r0, sp, #64	; 0x40
 8010db4:	9503      	str	r5, [sp, #12]
 8010db6:	9504      	str	r5, [sp, #16]
 8010db8:	f00b fcc4 	bl	801c744 <memset>
 8010dbc:	a903      	add	r1, sp, #12
 8010dbe:	4630      	mov	r0, r6
 8010dc0:	f002 faaa 	bl	8013318 <uxr_deserialize_GET_INFO_Payload>
 8010dc4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8010dc8:	4620      	mov	r0, r4
 8010dca:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8010dce:	f001 f823 	bl	8011e18 <uxr_session_header_offset>
 8010dd2:	462b      	mov	r3, r5
 8010dd4:	220c      	movs	r2, #12
 8010dd6:	a905      	add	r1, sp, #20
 8010dd8:	9000      	str	r0, [sp, #0]
 8010dda:	a808      	add	r0, sp, #32
 8010ddc:	f7ff fccc 	bl	8010778 <ucdr_init_buffer_origin_offset>
 8010de0:	a910      	add	r1, sp, #64	; 0x40
 8010de2:	a808      	add	r0, sp, #32
 8010de4:	f002 fb0c 	bl	8013400 <uxr_serialize_INFO_Payload>
 8010de8:	9b08      	ldr	r3, [sp, #32]
 8010dea:	462a      	mov	r2, r5
 8010dec:	4629      	mov	r1, r5
 8010dee:	4620      	mov	r0, r4
 8010df0:	f000 ffbe 	bl	8011d70 <uxr_stamp_session_header>
 8010df4:	a808      	add	r0, sp, #32
 8010df6:	f7ff fcff 	bl	80107f8 <ucdr_buffer_length>
 8010dfa:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8010dfc:	4602      	mov	r2, r0
 8010dfe:	a905      	add	r1, sp, #20
 8010e00:	e9d3 0400 	ldrd	r0, r4, [r3]
 8010e04:	47a0      	blx	r4
 8010e06:	f50d 7d34 	add.w	sp, sp, #720	; 0x2d0
 8010e0a:	bd70      	pop	{r4, r5, r6, pc}

08010e0c <write_submessage_acknack.isra.0>:
 8010e0c:	b570      	push	{r4, r5, r6, lr}
 8010e0e:	b092      	sub	sp, #72	; 0x48
 8010e10:	4605      	mov	r5, r0
 8010e12:	460e      	mov	r6, r1
 8010e14:	4614      	mov	r4, r2
 8010e16:	f000 ffff 	bl	8011e18 <uxr_session_header_offset>
 8010e1a:	a905      	add	r1, sp, #20
 8010e1c:	9000      	str	r0, [sp, #0]
 8010e1e:	2300      	movs	r3, #0
 8010e20:	a80a      	add	r0, sp, #40	; 0x28
 8010e22:	2211      	movs	r2, #17
 8010e24:	f7ff fca8 	bl	8010778 <ucdr_init_buffer_origin_offset>
 8010e28:	2218      	movs	r2, #24
 8010e2a:	2300      	movs	r3, #0
 8010e2c:	210a      	movs	r1, #10
 8010e2e:	fb02 5404 	mla	r4, r2, r4, r5
 8010e32:	a80a      	add	r0, sp, #40	; 0x28
 8010e34:	2205      	movs	r2, #5
 8010e36:	3450      	adds	r4, #80	; 0x50
 8010e38:	f001 f966 	bl	8012108 <uxr_buffer_submessage_header>
 8010e3c:	a903      	add	r1, sp, #12
 8010e3e:	4620      	mov	r0, r4
 8010e40:	f009 f810 	bl	8019e64 <uxr_compute_acknack>
 8010e44:	ba40      	rev16	r0, r0
 8010e46:	a903      	add	r1, sp, #12
 8010e48:	f88d 6010 	strb.w	r6, [sp, #16]
 8010e4c:	f8ad 000e 	strh.w	r0, [sp, #14]
 8010e50:	a80a      	add	r0, sp, #40	; 0x28
 8010e52:	f002 fb47 	bl	80134e4 <uxr_serialize_ACKNACK_Payload>
 8010e56:	2200      	movs	r2, #0
 8010e58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010e5a:	4628      	mov	r0, r5
 8010e5c:	4611      	mov	r1, r2
 8010e5e:	f000 ff87 	bl	8011d70 <uxr_stamp_session_header>
 8010e62:	a80a      	add	r0, sp, #40	; 0x28
 8010e64:	f7ff fcc8 	bl	80107f8 <ucdr_buffer_length>
 8010e68:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8010e6a:	4602      	mov	r2, r0
 8010e6c:	a905      	add	r1, sp, #20
 8010e6e:	e9d3 0400 	ldrd	r0, r4, [r3]
 8010e72:	47a0      	blx	r4
 8010e74:	b012      	add	sp, #72	; 0x48
 8010e76:	bd70      	pop	{r4, r5, r6, pc}

08010e78 <uxr_init_session>:
 8010e78:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 8010eb0 <uxr_init_session+0x38>
 8010e7c:	2300      	movs	r3, #0
 8010e7e:	b510      	push	{r4, lr}
 8010e80:	4604      	mov	r4, r0
 8010e82:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 8010e86:	e9c0 131c 	strd	r1, r3, [r0, #112]	; 0x70
 8010e8a:	e9c0 331e 	strd	r3, r3, [r0, #120]	; 0x78
 8010e8e:	e9c0 3320 	strd	r3, r3, [r0, #128]	; 0x80
 8010e92:	e9c0 3322 	strd	r3, r3, [r0, #136]	; 0x88
 8010e96:	e9c0 3324 	strd	r3, r3, [r0, #144]	; 0x90
 8010e9a:	ed80 7b26 	vstr	d7, [r0, #152]	; 0x98
 8010e9e:	2181      	movs	r1, #129	; 0x81
 8010ea0:	f000 feca 	bl	8011c38 <uxr_init_session_info>
 8010ea4:	f104 0008 	add.w	r0, r4, #8
 8010ea8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010eac:	f001 b848 	b.w	8011f40 <uxr_init_stream_storage>
	...

08010eb8 <uxr_set_status_callback>:
 8010eb8:	e9c0 1220 	strd	r1, r2, [r0, #128]	; 0x80
 8010ebc:	4770      	bx	lr
 8010ebe:	bf00      	nop

08010ec0 <uxr_set_topic_callback>:
 8010ec0:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
 8010ec4:	4770      	bx	lr
 8010ec6:	bf00      	nop

08010ec8 <uxr_set_request_callback>:
 8010ec8:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
 8010ecc:	4770      	bx	lr
 8010ece:	bf00      	nop

08010ed0 <uxr_set_reply_callback>:
 8010ed0:	e9c0 122b 	strd	r1, r2, [r0, #172]	; 0xac
 8010ed4:	4770      	bx	lr
 8010ed6:	bf00      	nop

08010ed8 <uxr_create_output_best_effort_stream>:
 8010ed8:	b510      	push	{r4, lr}
 8010eda:	4604      	mov	r4, r0
 8010edc:	b084      	sub	sp, #16
 8010ede:	e9cd 2100 	strd	r2, r1, [sp]
 8010ee2:	f000 ff99 	bl	8011e18 <uxr_session_header_offset>
 8010ee6:	4603      	mov	r3, r0
 8010ee8:	f104 0008 	add.w	r0, r4, #8
 8010eec:	e9dd 2100 	ldrd	r2, r1, [sp]
 8010ef0:	b004      	add	sp, #16
 8010ef2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010ef6:	f001 b869 	b.w	8011fcc <uxr_add_output_best_effort_buffer>
 8010efa:	bf00      	nop

08010efc <uxr_create_output_reliable_stream>:
 8010efc:	b530      	push	{r4, r5, lr}
 8010efe:	b089      	sub	sp, #36	; 0x24
 8010f00:	4604      	mov	r4, r0
 8010f02:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8010f06:	9303      	str	r3, [sp, #12]
 8010f08:	f000 ff86 	bl	8011e18 <uxr_session_header_offset>
 8010f0c:	4605      	mov	r5, r0
 8010f0e:	9905      	ldr	r1, [sp, #20]
 8010f10:	f104 0008 	add.w	r0, r4, #8
 8010f14:	9500      	str	r5, [sp, #0]
 8010f16:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8010f1a:	f001 f86b 	bl	8011ff4 <uxr_add_output_reliable_buffer>
 8010f1e:	2200      	movs	r2, #0
 8010f20:	fa5f fc80 	uxtb.w	ip, r0
 8010f24:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8010f28:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8010f2c:	0e03      	lsrs	r3, r0, #24
 8010f2e:	f36c 0207 	bfi	r2, ip, #0, #8
 8010f32:	f364 220f 	bfi	r2, r4, #8, #8
 8010f36:	f361 4217 	bfi	r2, r1, #16, #8
 8010f3a:	f363 621f 	bfi	r2, r3, #24, #8
 8010f3e:	4610      	mov	r0, r2
 8010f40:	b009      	add	sp, #36	; 0x24
 8010f42:	bd30      	pop	{r4, r5, pc}

08010f44 <uxr_create_input_best_effort_stream>:
 8010f44:	b082      	sub	sp, #8
 8010f46:	3008      	adds	r0, #8
 8010f48:	b002      	add	sp, #8
 8010f4a:	f001 b86d 	b.w	8012028 <uxr_add_input_best_effort_buffer>
 8010f4e:	bf00      	nop

08010f50 <uxr_create_input_reliable_stream>:
 8010f50:	b510      	push	{r4, lr}
 8010f52:	4c0c      	ldr	r4, [pc, #48]	; (8010f84 <uxr_create_input_reliable_stream+0x34>)
 8010f54:	b084      	sub	sp, #16
 8010f56:	3008      	adds	r0, #8
 8010f58:	9400      	str	r4, [sp, #0]
 8010f5a:	f001 f87b 	bl	8012054 <uxr_add_input_reliable_buffer>
 8010f5e:	2200      	movs	r2, #0
 8010f60:	fa5f fe80 	uxtb.w	lr, r0
 8010f64:	f3c0 2c07 	ubfx	ip, r0, #8, #8
 8010f68:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8010f6c:	0e03      	lsrs	r3, r0, #24
 8010f6e:	f36e 0207 	bfi	r2, lr, #0, #8
 8010f72:	f36c 220f 	bfi	r2, ip, #8, #8
 8010f76:	f361 4217 	bfi	r2, r1, #16, #8
 8010f7a:	f363 621f 	bfi	r2, r3, #24, #8
 8010f7e:	4610      	mov	r0, r2
 8010f80:	b004      	add	sp, #16
 8010f82:	bd10      	pop	{r4, pc}
 8010f84:	08010d5d 	.word	0x08010d5d

08010f88 <uxr_epoch_nanos>:
 8010f88:	b510      	push	{r4, lr}
 8010f8a:	4604      	mov	r4, r0
 8010f8c:	f001 f91e 	bl	80121cc <uxr_nanos>
 8010f90:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 8010f94:	1ac0      	subs	r0, r0, r3
 8010f96:	eb61 0102 	sbc.w	r1, r1, r2
 8010f9a:	bd10      	pop	{r4, pc}

08010f9c <uxr_flash_output_streams>:
 8010f9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010fa0:	7e03      	ldrb	r3, [r0, #24]
 8010fa2:	b084      	sub	sp, #16
 8010fa4:	4604      	mov	r4, r0
 8010fa6:	b1fb      	cbz	r3, 8010fe8 <uxr_flash_output_streams+0x4c>
 8010fa8:	f04f 0900 	mov.w	r9, #0
 8010fac:	f10d 0802 	add.w	r8, sp, #2
 8010fb0:	af03      	add	r7, sp, #12
 8010fb2:	ae02      	add	r6, sp, #8
 8010fb4:	4648      	mov	r0, r9
 8010fb6:	2201      	movs	r2, #1
 8010fb8:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 8010fbc:	4611      	mov	r1, r2
 8010fbe:	3508      	adds	r5, #8
 8010fc0:	f000 ff64 	bl	8011e8c <uxr_stream_id>
 8010fc4:	4684      	mov	ip, r0
 8010fc6:	4643      	mov	r3, r8
 8010fc8:	463a      	mov	r2, r7
 8010fca:	4631      	mov	r1, r6
 8010fcc:	4628      	mov	r0, r5
 8010fce:	f8cd c004 	str.w	ip, [sp, #4]
 8010fd2:	f008 ffd1 	bl	8019f78 <uxr_prepare_best_effort_buffer_to_send>
 8010fd6:	2800      	cmp	r0, #0
 8010fd8:	d13d      	bne.n	8011056 <uxr_flash_output_streams+0xba>
 8010fda:	f109 0901 	add.w	r9, r9, #1
 8010fde:	7e23      	ldrb	r3, [r4, #24]
 8010fe0:	fa5f f089 	uxtb.w	r0, r9
 8010fe4:	4283      	cmp	r3, r0
 8010fe6:	d8e6      	bhi.n	8010fb6 <uxr_flash_output_streams+0x1a>
 8010fe8:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8010fec:	b383      	cbz	r3, 8011050 <uxr_flash_output_streams+0xb4>
 8010fee:	f04f 0900 	mov.w	r9, #0
 8010ff2:	f10d 0802 	add.w	r8, sp, #2
 8010ff6:	af03      	add	r7, sp, #12
 8010ff8:	ae02      	add	r6, sp, #8
 8010ffa:	4648      	mov	r0, r9
 8010ffc:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 8011000:	2201      	movs	r2, #1
 8011002:	2102      	movs	r1, #2
 8011004:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8011008:	f000 ff40 	bl	8011e8c <uxr_stream_id>
 801100c:	9001      	str	r0, [sp, #4]
 801100e:	3520      	adds	r5, #32
 8011010:	e00c      	b.n	801102c <uxr_flash_output_streams+0x90>
 8011012:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8011016:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801101a:	9b02      	ldr	r3, [sp, #8]
 801101c:	f000 fea8 	bl	8011d70 <uxr_stamp_session_header>
 8011020:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8011022:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8011026:	e9d3 0a00 	ldrd	r0, sl, [r3]
 801102a:	47d0      	blx	sl
 801102c:	4643      	mov	r3, r8
 801102e:	463a      	mov	r2, r7
 8011030:	4631      	mov	r1, r6
 8011032:	4628      	mov	r0, r5
 8011034:	f009 f9c4 	bl	801a3c0 <uxr_prepare_next_reliable_buffer_to_send>
 8011038:	4603      	mov	r3, r0
 801103a:	4620      	mov	r0, r4
 801103c:	2b00      	cmp	r3, #0
 801103e:	d1e8      	bne.n	8011012 <uxr_flash_output_streams+0x76>
 8011040:	f109 0901 	add.w	r9, r9, #1
 8011044:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8011048:	fa5f f089 	uxtb.w	r0, r9
 801104c:	4283      	cmp	r3, r0
 801104e:	d8d5      	bhi.n	8010ffc <uxr_flash_output_streams+0x60>
 8011050:	b004      	add	sp, #16
 8011052:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011056:	9b02      	ldr	r3, [sp, #8]
 8011058:	4620      	mov	r0, r4
 801105a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801105e:	f109 0901 	add.w	r9, r9, #1
 8011062:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8011066:	f000 fe83 	bl	8011d70 <uxr_stamp_session_header>
 801106a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801106c:	9a03      	ldr	r2, [sp, #12]
 801106e:	685d      	ldr	r5, [r3, #4]
 8011070:	6818      	ldr	r0, [r3, #0]
 8011072:	9902      	ldr	r1, [sp, #8]
 8011074:	47a8      	blx	r5
 8011076:	7e23      	ldrb	r3, [r4, #24]
 8011078:	fa5f f089 	uxtb.w	r0, r9
 801107c:	4283      	cmp	r3, r0
 801107e:	d89a      	bhi.n	8010fb6 <uxr_flash_output_streams+0x1a>
 8011080:	e7b2      	b.n	8010fe8 <uxr_flash_output_streams+0x4c>
 8011082:	bf00      	nop

08011084 <read_submessage_info>:
 8011084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011088:	460d      	mov	r5, r1
 801108a:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 801108e:	4606      	mov	r6, r0
 8011090:	4669      	mov	r1, sp
 8011092:	4628      	mov	r0, r5
 8011094:	f002 f852 	bl	801313c <uxr_deserialize_BaseObjectReply>
 8011098:	4604      	mov	r4, r0
 801109a:	a902      	add	r1, sp, #8
 801109c:	4628      	mov	r0, r5
 801109e:	f89d 7005 	ldrb.w	r7, [sp, #5]
 80110a2:	f7fe f803 	bl	800f0ac <ucdr_deserialize_bool>
 80110a6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80110aa:	4004      	ands	r4, r0
 80110ac:	b2e4      	uxtb	r4, r4
 80110ae:	b95b      	cbnz	r3, 80110c8 <read_submessage_info+0x44>
 80110b0:	a987      	add	r1, sp, #540	; 0x21c
 80110b2:	4628      	mov	r0, r5
 80110b4:	f7fd fffa 	bl	800f0ac <ucdr_deserialize_bool>
 80110b8:	f89d 321c 	ldrb.w	r3, [sp, #540]	; 0x21c
 80110bc:	4680      	mov	r8, r0
 80110be:	b94b      	cbnz	r3, 80110d4 <read_submessage_info+0x50>
 80110c0:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 80110c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80110c8:	a903      	add	r1, sp, #12
 80110ca:	4628      	mov	r0, r5
 80110cc:	f001 fee2 	bl	8012e94 <uxr_deserialize_ObjectVariant>
 80110d0:	4004      	ands	r4, r0
 80110d2:	e7ed      	b.n	80110b0 <read_submessage_info+0x2c>
 80110d4:	a988      	add	r1, sp, #544	; 0x220
 80110d6:	4628      	mov	r0, r5
 80110d8:	f7fe f816 	bl	800f108 <ucdr_deserialize_uint8_t>
 80110dc:	ea14 0f08 	tst.w	r4, r8
 80110e0:	d0ee      	beq.n	80110c0 <read_submessage_info+0x3c>
 80110e2:	2800      	cmp	r0, #0
 80110e4:	d0ec      	beq.n	80110c0 <read_submessage_info+0x3c>
 80110e6:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
 80110ea:	2b0d      	cmp	r3, #13
 80110ec:	d1e8      	bne.n	80110c0 <read_submessage_info+0x3c>
 80110ee:	a98a      	add	r1, sp, #552	; 0x228
 80110f0:	4628      	mov	r0, r5
 80110f2:	f7fe fe2f 	bl	800fd54 <ucdr_deserialize_int16_t>
 80110f6:	b138      	cbz	r0, 8011108 <read_submessage_info+0x84>
 80110f8:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	; 0x228
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	dd06      	ble.n	801110e <read_submessage_info+0x8a>
 8011100:	2f00      	cmp	r7, #0
 8011102:	bf14      	ite	ne
 8011104:	2001      	movne	r0, #1
 8011106:	2002      	moveq	r0, #2
 8011108:	f886 00b5 	strb.w	r0, [r6, #181]	; 0xb5
 801110c:	e7d8      	b.n	80110c0 <read_submessage_info+0x3c>
 801110e:	2000      	movs	r0, #0
 8011110:	e7fa      	b.n	8011108 <read_submessage_info+0x84>
 8011112:	bf00      	nop

08011114 <read_submessage_list>:
 8011114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011118:	4604      	mov	r4, r0
 801111a:	b097      	sub	sp, #92	; 0x5c
 801111c:	460d      	mov	r5, r1
 801111e:	4ec1      	ldr	r6, [pc, #772]	; (8011424 <read_submessage_list+0x310>)
 8011120:	9209      	str	r2, [sp, #36]	; 0x24
 8011122:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 8011126:	aa0c      	add	r2, sp, #48	; 0x30
 8011128:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 801112c:	4628      	mov	r0, r5
 801112e:	f001 f805 	bl	801213c <uxr_read_submessage_header>
 8011132:	2800      	cmp	r0, #0
 8011134:	f000 8142 	beq.w	80113bc <read_submessage_list+0x2a8>
 8011138:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 801113c:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 8011140:	3b02      	subs	r3, #2
 8011142:	2b0d      	cmp	r3, #13
 8011144:	d8ed      	bhi.n	8011122 <read_submessage_list+0xe>
 8011146:	a101      	add	r1, pc, #4	; (adr r1, 801114c <read_submessage_list+0x38>)
 8011148:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801114c:	080113b3 	.word	0x080113b3
 8011150:	08011123 	.word	0x08011123
 8011154:	080113a3 	.word	0x080113a3
 8011158:	08011341 	.word	0x08011341
 801115c:	08011337 	.word	0x08011337
 8011160:	08011123 	.word	0x08011123
 8011164:	08011123 	.word	0x08011123
 8011168:	0801128d 	.word	0x0801128d
 801116c:	0801121f 	.word	0x0801121f
 8011170:	080111df 	.word	0x080111df
 8011174:	08011123 	.word	0x08011123
 8011178:	08011123 	.word	0x08011123
 801117c:	08011123 	.word	0x08011123
 8011180:	08011185 	.word	0x08011185
 8011184:	a910      	add	r1, sp, #64	; 0x40
 8011186:	4628      	mov	r0, r5
 8011188:	f002 fa00 	bl	801358c <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 801118c:	f8d4 8090 	ldr.w	r8, [r4, #144]	; 0x90
 8011190:	f1b8 0f00 	cmp.w	r8, #0
 8011194:	f000 811a 	beq.w	80113cc <read_submessage_list+0x2b8>
 8011198:	f001 f818 	bl	80121cc <uxr_nanos>
 801119c:	4602      	mov	r2, r0
 801119e:	460b      	mov	r3, r1
 80111a0:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 80111a4:	2100      	movs	r1, #0
 80111a6:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80111a8:	9006      	str	r0, [sp, #24]
 80111aa:	468c      	mov	ip, r1
 80111ac:	9815      	ldr	r0, [sp, #84]	; 0x54
 80111ae:	fbc7 0c06 	smlal	r0, ip, r7, r6
 80111b2:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80111b4:	e9cd 0c04 	strd	r0, ip, [sp, #16]
 80111b8:	468c      	mov	ip, r1
 80111ba:	9811      	ldr	r0, [sp, #68]	; 0x44
 80111bc:	fbc7 0c06 	smlal	r0, ip, r7, r6
 80111c0:	e9cd 0c02 	strd	r0, ip, [sp, #8]
 80111c4:	e9dd 7012 	ldrd	r7, r0, [sp, #72]	; 0x48
 80111c8:	fbc7 0106 	smlal	r0, r1, r7, r6
 80111cc:	e9cd 0100 	strd	r0, r1, [sp]
 80111d0:	4620      	mov	r0, r4
 80111d2:	47c0      	blx	r8
 80111d4:	f04f 0301 	mov.w	r3, #1
 80111d8:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
 80111dc:	e7a1      	b.n	8011122 <read_submessage_list+0xe>
 80111de:	a910      	add	r1, sp, #64	; 0x40
 80111e0:	4628      	mov	r0, r5
 80111e2:	f002 f9bf 	bl	8013564 <uxr_deserialize_HEARTBEAT_Payload>
 80111e6:	2100      	movs	r1, #0
 80111e8:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 80111ec:	f000 fe7c 	bl	8011ee8 <uxr_stream_id_from_raw>
 80111f0:	f3c0 2807 	ubfx	r8, r0, #8, #8
 80111f4:	900f      	str	r0, [sp, #60]	; 0x3c
 80111f6:	f104 0008 	add.w	r0, r4, #8
 80111fa:	4641      	mov	r1, r8
 80111fc:	f000 ff62 	bl	80120c4 <uxr_get_input_reliable_stream>
 8011200:	2800      	cmp	r0, #0
 8011202:	d08e      	beq.n	8011122 <read_submessage_list+0xe>
 8011204:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 8011208:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801120c:	f008 fe1e 	bl	8019e4c <uxr_process_heartbeat>
 8011210:	4642      	mov	r2, r8
 8011212:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 8011216:	4620      	mov	r0, r4
 8011218:	f7ff fdf8 	bl	8010e0c <write_submessage_acknack.isra.0>
 801121c:	e781      	b.n	8011122 <read_submessage_list+0xe>
 801121e:	a910      	add	r1, sp, #64	; 0x40
 8011220:	4628      	mov	r0, r5
 8011222:	f002 f977 	bl	8013514 <uxr_deserialize_ACKNACK_Payload>
 8011226:	2100      	movs	r1, #0
 8011228:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 801122c:	f000 fe5c 	bl	8011ee8 <uxr_stream_id_from_raw>
 8011230:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8011234:	900d      	str	r0, [sp, #52]	; 0x34
 8011236:	f104 0008 	add.w	r0, r4, #8
 801123a:	f000 ff2d 	bl	8012098 <uxr_get_output_reliable_stream>
 801123e:	4680      	mov	r8, r0
 8011240:	2800      	cmp	r0, #0
 8011242:	f43f af6e 	beq.w	8011122 <read_submessage_list+0xe>
 8011246:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 801124a:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 801124e:	f89d 1043 	ldrb.w	r1, [sp, #67]	; 0x43
 8011252:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8011256:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 801125a:	b289      	uxth	r1, r1
 801125c:	f009 f958 	bl	801a510 <uxr_process_acknack>
 8011260:	4640      	mov	r0, r8
 8011262:	f009 f919 	bl	801a498 <uxr_begin_output_nack_buffer_it>
 8011266:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
 801126a:	e005      	b.n	8011278 <read_submessage_list+0x164>
 801126c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801126e:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	; 0x38
 8011272:	e9d3 0900 	ldrd	r0, r9, [r3]
 8011276:	47c8      	blx	r9
 8011278:	f10d 0332 	add.w	r3, sp, #50	; 0x32
 801127c:	aa0f      	add	r2, sp, #60	; 0x3c
 801127e:	4651      	mov	r1, sl
 8011280:	4640      	mov	r0, r8
 8011282:	f009 f90b 	bl	801a49c <uxr_next_reliable_nack_buffer_to_send>
 8011286:	2800      	cmp	r0, #0
 8011288:	d1f0      	bne.n	801126c <read_submessage_list+0x158>
 801128a:	e74a      	b.n	8011122 <read_submessage_list+0xe>
 801128c:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 8011290:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 8011294:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30
 8011298:	4628      	mov	r0, r5
 801129a:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
 801129e:	4651      	mov	r1, sl
 80112a0:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 80112a4:	f1a8 0804 	sub.w	r8, r8, #4
 80112a8:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
 80112ac:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
 80112b0:	fa1f f888 	uxth.w	r8, r8
 80112b4:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80112b8:	f009 090e 	and.w	r9, r9, #14
 80112bc:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
 80112c0:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 80112c4:	f001 fe88 	bl	8012fd8 <uxr_deserialize_BaseObjectRequest>
 80112c8:	4650      	mov	r0, sl
 80112ca:	a90f      	add	r1, sp, #60	; 0x3c
 80112cc:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 80112d0:	f000 fdca 	bl	8011e68 <uxr_parse_base_object_request>
 80112d4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80112d6:	f8d4 b080 	ldr.w	fp, [r4, #128]	; 0x80
 80112da:	f8bd a032 	ldrh.w	sl, [sp, #50]	; 0x32
 80112de:	9110      	str	r1, [sp, #64]	; 0x40
 80112e0:	f1bb 0f00 	cmp.w	fp, #0
 80112e4:	d006      	beq.n	80112f4 <read_submessage_list+0x1e0>
 80112e6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80112ea:	4652      	mov	r2, sl
 80112ec:	4620      	mov	r0, r4
 80112ee:	9300      	str	r3, [sp, #0]
 80112f0:	2300      	movs	r3, #0
 80112f2:	47d8      	blx	fp
 80112f4:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 80112f6:	b182      	cbz	r2, 801131a <read_submessage_list+0x206>
 80112f8:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80112fa:	f04f 0c00 	mov.w	ip, #0
 80112fe:	3902      	subs	r1, #2
 8011300:	e003      	b.n	801130a <read_submessage_list+0x1f6>
 8011302:	f10c 0c01 	add.w	ip, ip, #1
 8011306:	4594      	cmp	ip, r2
 8011308:	d007      	beq.n	801131a <read_submessage_list+0x206>
 801130a:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 801130e:	4553      	cmp	r3, sl
 8011310:	d1f7      	bne.n	8011302 <read_submessage_list+0x1ee>
 8011312:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8011314:	2200      	movs	r2, #0
 8011316:	f803 200c 	strb.w	r2, [r3, ip]
 801131a:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 801131e:	464b      	mov	r3, r9
 8011320:	4642      	mov	r2, r8
 8011322:	4620      	mov	r0, r4
 8011324:	9102      	str	r1, [sp, #8]
 8011326:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8011328:	9101      	str	r1, [sp, #4]
 801132a:	990d      	ldr	r1, [sp, #52]	; 0x34
 801132c:	9100      	str	r1, [sp, #0]
 801132e:	4629      	mov	r1, r5
 8011330:	f009 f9b0 	bl	801a694 <read_submessage_format>
 8011334:	e6f5      	b.n	8011122 <read_submessage_list+0xe>
 8011336:	4629      	mov	r1, r5
 8011338:	4620      	mov	r0, r4
 801133a:	f7ff fea3 	bl	8011084 <read_submessage_info>
 801133e:	e6f0      	b.n	8011122 <read_submessage_list+0xe>
 8011340:	2a00      	cmp	r2, #0
 8011342:	d03e      	beq.n	80113c2 <read_submessage_list+0x2ae>
 8011344:	a910      	add	r1, sp, #64	; 0x40
 8011346:	4628      	mov	r0, r5
 8011348:	f002 f83c 	bl	80133c4 <uxr_deserialize_STATUS_Payload>
 801134c:	a90e      	add	r1, sp, #56	; 0x38
 801134e:	aa0d      	add	r2, sp, #52	; 0x34
 8011350:	a810      	add	r0, sp, #64	; 0x40
 8011352:	f000 fd89 	bl	8011e68 <uxr_parse_base_object_request>
 8011356:	990e      	ldr	r1, [sp, #56]	; 0x38
 8011358:	f8d4 a080 	ldr.w	sl, [r4, #128]	; 0x80
 801135c:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
 8011360:	f8bd 8034 	ldrh.w	r8, [sp, #52]	; 0x34
 8011364:	910f      	str	r1, [sp, #60]	; 0x3c
 8011366:	f1ba 0f00 	cmp.w	sl, #0
 801136a:	d006      	beq.n	801137a <read_submessage_list+0x266>
 801136c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8011370:	4642      	mov	r2, r8
 8011372:	4620      	mov	r0, r4
 8011374:	9300      	str	r3, [sp, #0]
 8011376:	464b      	mov	r3, r9
 8011378:	47d0      	blx	sl
 801137a:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 801137c:	2a00      	cmp	r2, #0
 801137e:	f43f aed0 	beq.w	8011122 <read_submessage_list+0xe>
 8011382:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8011384:	2100      	movs	r1, #0
 8011386:	3802      	subs	r0, #2
 8011388:	e003      	b.n	8011392 <read_submessage_list+0x27e>
 801138a:	3101      	adds	r1, #1
 801138c:	4291      	cmp	r1, r2
 801138e:	f43f aec8 	beq.w	8011122 <read_submessage_list+0xe>
 8011392:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8011396:	4543      	cmp	r3, r8
 8011398:	d1f7      	bne.n	801138a <read_submessage_list+0x276>
 801139a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 801139c:	f803 9001 	strb.w	r9, [r3, r1]
 80113a0:	e6bf      	b.n	8011122 <read_submessage_list+0xe>
 80113a2:	2a00      	cmp	r2, #0
 80113a4:	f47f aebd 	bne.w	8011122 <read_submessage_list+0xe>
 80113a8:	4629      	mov	r1, r5
 80113aa:	4620      	mov	r0, r4
 80113ac:	f000 fca0 	bl	8011cf0 <uxr_read_create_session_status>
 80113b0:	e6b7      	b.n	8011122 <read_submessage_list+0xe>
 80113b2:	4629      	mov	r1, r5
 80113b4:	4620      	mov	r0, r4
 80113b6:	f7ff fcf3 	bl	8010da0 <read_submessage_get_info>
 80113ba:	e6b2      	b.n	8011122 <read_submessage_list+0xe>
 80113bc:	b017      	add	sp, #92	; 0x5c
 80113be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113c2:	4629      	mov	r1, r5
 80113c4:	4620      	mov	r0, r4
 80113c6:	f000 fca1 	bl	8011d0c <uxr_read_delete_session_status>
 80113ca:	e6aa      	b.n	8011122 <read_submessage_list+0xe>
 80113cc:	f000 fefe 	bl	80121cc <uxr_nanos>
 80113d0:	4642      	mov	r2, r8
 80113d2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80113d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80113d6:	fbc7 3206 	smlal	r3, r2, r7, r6
 80113da:	1818      	adds	r0, r3, r0
 80113dc:	9f12      	ldr	r7, [sp, #72]	; 0x48
 80113de:	eb42 0101 	adc.w	r1, r2, r1
 80113e2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80113e4:	4642      	mov	r2, r8
 80113e6:	fbc7 3206 	smlal	r3, r2, r7, r6
 80113ea:	469c      	mov	ip, r3
 80113ec:	e9dd 3710 	ldrd	r3, r7, [sp, #64]	; 0x40
 80113f0:	fbc3 7806 	smlal	r7, r8, r3, r6
 80113f4:	4643      	mov	r3, r8
 80113f6:	eb1c 0c07 	adds.w	ip, ip, r7
 80113fa:	eb42 0203 	adc.w	r2, r2, r3
 80113fe:	ebb0 030c 	subs.w	r3, r0, ip
 8011402:	eb61 0202 	sbc.w	r2, r1, r2
 8011406:	2a00      	cmp	r2, #0
 8011408:	db08      	blt.n	801141c <read_submessage_list+0x308>
 801140a:	085b      	lsrs	r3, r3, #1
 801140c:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 8011410:	1052      	asrs	r2, r2, #1
 8011412:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 8011416:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
 801141a:	e6db      	b.n	80111d4 <read_submessage_list+0xc0>
 801141c:	3301      	adds	r3, #1
 801141e:	f142 0200 	adc.w	r2, r2, #0
 8011422:	e7f2      	b.n	801140a <read_submessage_list+0x2f6>
 8011424:	3b9aca00 	.word	0x3b9aca00

08011428 <listen_message_reliably>:
 8011428:	1e0b      	subs	r3, r1, #0
 801142a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801142e:	bfb8      	it	lt
 8011430:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 8011434:	b09d      	sub	sp, #116	; 0x74
 8011436:	4680      	mov	r8, r0
 8011438:	9305      	str	r3, [sp, #20]
 801143a:	f000 feab 	bl	8012194 <uxr_millis>
 801143e:	f898 2048 	ldrb.w	r2, [r8, #72]	; 0x48
 8011442:	4681      	mov	r9, r0
 8011444:	2a00      	cmp	r2, #0
 8011446:	f000 809a 	beq.w	801157e <listen_message_reliably+0x156>
 801144a:	2600      	movs	r6, #0
 801144c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8011450:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8011454:	460f      	mov	r7, r1
 8011456:	4630      	mov	r0, r6
 8011458:	9303      	str	r3, [sp, #12]
 801145a:	e00e      	b.n	801147a <listen_message_reliably+0x52>
 801145c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801145e:	3601      	adds	r6, #1
 8011460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011462:	455a      	cmp	r2, fp
 8011464:	9903      	ldr	r1, [sp, #12]
 8011466:	b2f0      	uxtb	r0, r6
 8011468:	eb73 0101 	sbcs.w	r1, r3, r1
 801146c:	da01      	bge.n	8011472 <listen_message_reliably+0x4a>
 801146e:	4693      	mov	fp, r2
 8011470:	9303      	str	r3, [sp, #12]
 8011472:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 8011476:	4283      	cmp	r3, r0
 8011478:	d95f      	bls.n	801153a <listen_message_reliably+0x112>
 801147a:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 801147e:	2102      	movs	r1, #2
 8011480:	2201      	movs	r2, #1
 8011482:	00e4      	lsls	r4, r4, #3
 8011484:	f000 fd02 	bl	8011e8c <uxr_stream_id>
 8011488:	4601      	mov	r1, r0
 801148a:	f104 0520 	add.w	r5, r4, #32
 801148e:	463b      	mov	r3, r7
 8011490:	464a      	mov	r2, r9
 8011492:	9109      	str	r1, [sp, #36]	; 0x24
 8011494:	4445      	add	r5, r8
 8011496:	4628      	mov	r0, r5
 8011498:	f008 ffd2 	bl	801a440 <uxr_update_output_stream_heartbeat_timestamp>
 801149c:	eb08 0304 	add.w	r3, r8, r4
 80114a0:	2800      	cmp	r0, #0
 80114a2:	d0db      	beq.n	801145c <listen_message_reliably+0x34>
 80114a4:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
 80114a8:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
 80114ac:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80114b0:	4640      	mov	r0, r8
 80114b2:	3501      	adds	r5, #1
 80114b4:	4444      	add	r4, r8
 80114b6:	9304      	str	r3, [sp, #16]
 80114b8:	f000 fcae 	bl	8011e18 <uxr_session_header_offset>
 80114bc:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80114c0:	2300      	movs	r3, #0
 80114c2:	2211      	movs	r2, #17
 80114c4:	a90c      	add	r1, sp, #48	; 0x30
 80114c6:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 80114ca:	9000      	str	r0, [sp, #0]
 80114cc:	4650      	mov	r0, sl
 80114ce:	3601      	adds	r6, #1
 80114d0:	f7ff f952 	bl	8010778 <ucdr_init_buffer_origin_offset>
 80114d4:	2300      	movs	r3, #0
 80114d6:	2205      	movs	r2, #5
 80114d8:	210b      	movs	r1, #11
 80114da:	4650      	mov	r0, sl
 80114dc:	f000 fe14 	bl	8012108 <uxr_buffer_submessage_header>
 80114e0:	2101      	movs	r1, #1
 80114e2:	8968      	ldrh	r0, [r5, #10]
 80114e4:	f009 f9a0 	bl	801a828 <uxr_seq_num_add>
 80114e8:	892b      	ldrh	r3, [r5, #8]
 80114ea:	4602      	mov	r2, r0
 80114ec:	a90a      	add	r1, sp, #40	; 0x28
 80114ee:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 80114f2:	4650      	mov	r0, sl
 80114f4:	9b04      	ldr	r3, [sp, #16]
 80114f6:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 80114fa:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 80114fe:	f002 f81d 	bl	801353c <uxr_serialize_HEARTBEAT_Payload>
 8011502:	2200      	movs	r2, #0
 8011504:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011506:	4640      	mov	r0, r8
 8011508:	4611      	mov	r1, r2
 801150a:	f000 fc31 	bl	8011d70 <uxr_stamp_session_header>
 801150e:	4650      	mov	r0, sl
 8011510:	f7ff f972 	bl	80107f8 <ucdr_buffer_length>
 8011514:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8011518:	4602      	mov	r2, r0
 801151a:	a90c      	add	r1, sp, #48	; 0x30
 801151c:	e9d3 0500 	ldrd	r0, r5, [r3]
 8011520:	47a8      	blx	r5
 8011522:	9903      	ldr	r1, [sp, #12]
 8011524:	b2f0      	uxtb	r0, r6
 8011526:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 801152a:	455a      	cmp	r2, fp
 801152c:	eb73 0101 	sbcs.w	r1, r3, r1
 8011530:	db9d      	blt.n	801146e <listen_message_reliably+0x46>
 8011532:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 8011536:	4283      	cmp	r3, r0
 8011538:	d89f      	bhi.n	801147a <listen_message_reliably+0x52>
 801153a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801153e:	9a03      	ldr	r2, [sp, #12]
 8011540:	429a      	cmp	r2, r3
 8011542:	bf08      	it	eq
 8011544:	f1bb 3fff 	cmpeq.w	fp, #4294967295	; 0xffffffff
 8011548:	d019      	beq.n	801157e <listen_message_reliably+0x156>
 801154a:	ebab 0309 	sub.w	r3, fp, r9
 801154e:	2b00      	cmp	r3, #0
 8011550:	9d05      	ldr	r5, [sp, #20]
 8011552:	f8d8 0070 	ldr.w	r0, [r8, #112]	; 0x70
 8011556:	aa08      	add	r2, sp, #32
 8011558:	bf08      	it	eq
 801155a:	2301      	moveq	r3, #1
 801155c:	a907      	add	r1, sp, #28
 801155e:	6884      	ldr	r4, [r0, #8]
 8011560:	429d      	cmp	r5, r3
 8011562:	6800      	ldr	r0, [r0, #0]
 8011564:	bfa8      	it	ge
 8011566:	461d      	movge	r5, r3
 8011568:	462b      	mov	r3, r5
 801156a:	47a0      	blx	r4
 801156c:	b948      	cbnz	r0, 8011582 <listen_message_reliably+0x15a>
 801156e:	9b05      	ldr	r3, [sp, #20]
 8011570:	1b5b      	subs	r3, r3, r5
 8011572:	2b00      	cmp	r3, #0
 8011574:	9305      	str	r3, [sp, #20]
 8011576:	f73f af60 	bgt.w	801143a <listen_message_reliably+0x12>
 801157a:	4604      	mov	r4, r0
 801157c:	e012      	b.n	80115a4 <listen_message_reliably+0x17c>
 801157e:	9b05      	ldr	r3, [sp, #20]
 8011580:	e7e5      	b.n	801154e <listen_message_reliably+0x126>
 8011582:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8011586:	4604      	mov	r4, r0
 8011588:	2500      	movs	r5, #0
 801158a:	a80c      	add	r0, sp, #48	; 0x30
 801158c:	f7ff f906 	bl	801079c <ucdr_init_buffer>
 8011590:	f10d 031a 	add.w	r3, sp, #26
 8011594:	aa06      	add	r2, sp, #24
 8011596:	a90c      	add	r1, sp, #48	; 0x30
 8011598:	4640      	mov	r0, r8
 801159a:	f88d 5018 	strb.w	r5, [sp, #24]
 801159e:	f000 fbfb 	bl	8011d98 <uxr_read_session_header>
 80115a2:	b918      	cbnz	r0, 80115ac <listen_message_reliably+0x184>
 80115a4:	4620      	mov	r0, r4
 80115a6:	b01d      	add	sp, #116	; 0x74
 80115a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115ac:	4629      	mov	r1, r5
 80115ae:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80115b2:	f000 fc99 	bl	8011ee8 <uxr_stream_id_from_raw>
 80115b6:	f3c0 4607 	ubfx	r6, r0, #16, #8
 80115ba:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 80115be:	f3c0 2507 	ubfx	r5, r0, #8, #8
 80115c2:	2e01      	cmp	r6, #1
 80115c4:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 80115c8:	d04b      	beq.n	8011662 <listen_message_reliably+0x23a>
 80115ca:	2e02      	cmp	r6, #2
 80115cc:	d00f      	beq.n	80115ee <listen_message_reliably+0x1c6>
 80115ce:	2e00      	cmp	r6, #0
 80115d0:	d1e8      	bne.n	80115a4 <listen_message_reliably+0x17c>
 80115d2:	4631      	mov	r1, r6
 80115d4:	4630      	mov	r0, r6
 80115d6:	f000 fc87 	bl	8011ee8 <uxr_stream_id_from_raw>
 80115da:	4602      	mov	r2, r0
 80115dc:	a90c      	add	r1, sp, #48	; 0x30
 80115de:	4640      	mov	r0, r8
 80115e0:	920a      	str	r2, [sp, #40]	; 0x28
 80115e2:	f7ff fd97 	bl	8011114 <read_submessage_list>
 80115e6:	4620      	mov	r0, r4
 80115e8:	b01d      	add	sp, #116	; 0x74
 80115ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115ee:	4629      	mov	r1, r5
 80115f0:	f108 0008 	add.w	r0, r8, #8
 80115f4:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 80115f8:	f000 fd64 	bl	80120c4 <uxr_get_input_reliable_stream>
 80115fc:	4607      	mov	r7, r0
 80115fe:	b338      	cbz	r0, 8011650 <listen_message_reliably+0x228>
 8011600:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011602:	a80c      	add	r0, sp, #48	; 0x30
 8011604:	9203      	str	r2, [sp, #12]
 8011606:	f7ff f8fb 	bl	8010800 <ucdr_buffer_remaining>
 801160a:	4603      	mov	r3, r0
 801160c:	f10d 0019 	add.w	r0, sp, #25
 8011610:	9a03      	ldr	r2, [sp, #12]
 8011612:	4651      	mov	r1, sl
 8011614:	9000      	str	r0, [sp, #0]
 8011616:	4638      	mov	r0, r7
 8011618:	f008 fb1c 	bl	8019c54 <uxr_receive_reliable_message>
 801161c:	b1c0      	cbz	r0, 8011650 <listen_message_reliably+0x228>
 801161e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8011622:	b393      	cbz	r3, 801168a <listen_message_reliably+0x262>
 8011624:	ae14      	add	r6, sp, #80	; 0x50
 8011626:	f04f 0a02 	mov.w	sl, #2
 801162a:	e00a      	b.n	8011642 <listen_message_reliably+0x21a>
 801162c:	f88d 9028 	strb.w	r9, [sp, #40]	; 0x28
 8011630:	4631      	mov	r1, r6
 8011632:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 8011636:	4640      	mov	r0, r8
 8011638:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 801163c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801163e:	f7ff fd69 	bl	8011114 <read_submessage_list>
 8011642:	2204      	movs	r2, #4
 8011644:	4631      	mov	r1, r6
 8011646:	4638      	mov	r0, r7
 8011648:	f008 fb86 	bl	8019d58 <uxr_next_input_reliable_buffer_available>
 801164c:	2800      	cmp	r0, #0
 801164e:	d1ed      	bne.n	801162c <listen_message_reliably+0x204>
 8011650:	4640      	mov	r0, r8
 8011652:	462a      	mov	r2, r5
 8011654:	4649      	mov	r1, r9
 8011656:	f7ff fbd9 	bl	8010e0c <write_submessage_acknack.isra.0>
 801165a:	4620      	mov	r0, r4
 801165c:	b01d      	add	sp, #116	; 0x74
 801165e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011662:	4629      	mov	r1, r5
 8011664:	f108 0008 	add.w	r0, r8, #8
 8011668:	f000 fd22 	bl	80120b0 <uxr_get_input_best_effort_stream>
 801166c:	2800      	cmp	r0, #0
 801166e:	d099      	beq.n	80115a4 <listen_message_reliably+0x17c>
 8011670:	4651      	mov	r1, sl
 8011672:	f008 fa65 	bl	8019b40 <uxr_receive_best_effort_message>
 8011676:	2800      	cmp	r0, #0
 8011678:	d094      	beq.n	80115a4 <listen_message_reliably+0x17c>
 801167a:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 801167e:	a90c      	add	r1, sp, #48	; 0x30
 8011680:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011682:	4640      	mov	r0, r8
 8011684:	f7ff fd46 	bl	8011114 <read_submessage_list>
 8011688:	e78c      	b.n	80115a4 <listen_message_reliably+0x17c>
 801168a:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 801168e:	a90c      	add	r1, sp, #48	; 0x30
 8011690:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011692:	4640      	mov	r0, r8
 8011694:	f7ff fd3e 	bl	8011114 <read_submessage_list>
 8011698:	e7c4      	b.n	8011624 <listen_message_reliably+0x1fc>
 801169a:	bf00      	nop

0801169c <uxr_run_session_timeout>:
 801169c:	b570      	push	{r4, r5, r6, lr}
 801169e:	4604      	mov	r4, r0
 80116a0:	460d      	mov	r5, r1
 80116a2:	f000 fd77 	bl	8012194 <uxr_millis>
 80116a6:	4606      	mov	r6, r0
 80116a8:	4620      	mov	r0, r4
 80116aa:	f7ff fc77 	bl	8010f9c <uxr_flash_output_streams>
 80116ae:	4629      	mov	r1, r5
 80116b0:	4620      	mov	r0, r4
 80116b2:	f7ff feb9 	bl	8011428 <listen_message_reliably>
 80116b6:	f000 fd6d 	bl	8012194 <uxr_millis>
 80116ba:	1b83      	subs	r3, r0, r6
 80116bc:	1ae9      	subs	r1, r5, r3
 80116be:	2900      	cmp	r1, #0
 80116c0:	dcf6      	bgt.n	80116b0 <uxr_run_session_timeout+0x14>
 80116c2:	f104 0008 	add.w	r0, r4, #8
 80116c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80116ca:	f000 bd07 	b.w	80120dc <uxr_output_streams_confirmed>
 80116ce:	bf00      	nop

080116d0 <uxr_run_session_until_data>:
 80116d0:	b570      	push	{r4, r5, r6, lr}
 80116d2:	4604      	mov	r4, r0
 80116d4:	460d      	mov	r5, r1
 80116d6:	f000 fd5d 	bl	8012194 <uxr_millis>
 80116da:	4606      	mov	r6, r0
 80116dc:	4620      	mov	r0, r4
 80116de:	f7ff fc5d 	bl	8010f9c <uxr_flash_output_streams>
 80116e2:	2300      	movs	r3, #0
 80116e4:	4629      	mov	r1, r5
 80116e6:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 80116ea:	e005      	b.n	80116f8 <uxr_run_session_until_data+0x28>
 80116ec:	f000 fd52 	bl	8012194 <uxr_millis>
 80116f0:	1b83      	subs	r3, r0, r6
 80116f2:	1ae9      	subs	r1, r5, r3
 80116f4:	2900      	cmp	r1, #0
 80116f6:	dd07      	ble.n	8011708 <uxr_run_session_until_data+0x38>
 80116f8:	4620      	mov	r0, r4
 80116fa:	f7ff fe95 	bl	8011428 <listen_message_reliably>
 80116fe:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 8011702:	2800      	cmp	r0, #0
 8011704:	d0f2      	beq.n	80116ec <uxr_run_session_until_data+0x1c>
 8011706:	bd70      	pop	{r4, r5, r6, pc}
 8011708:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 801170c:	bd70      	pop	{r4, r5, r6, pc}
 801170e:	bf00      	nop

08011710 <uxr_run_session_until_confirm_delivery>:
 8011710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011714:	4606      	mov	r6, r0
 8011716:	460d      	mov	r5, r1
 8011718:	f000 fd3c 	bl	8012194 <uxr_millis>
 801171c:	4607      	mov	r7, r0
 801171e:	4630      	mov	r0, r6
 8011720:	f106 0808 	add.w	r8, r6, #8
 8011724:	f7ff fc3a 	bl	8010f9c <uxr_flash_output_streams>
 8011728:	2d00      	cmp	r5, #0
 801172a:	db10      	blt.n	801174e <uxr_run_session_until_confirm_delivery+0x3e>
 801172c:	462c      	mov	r4, r5
 801172e:	e006      	b.n	801173e <uxr_run_session_until_confirm_delivery+0x2e>
 8011730:	f7ff fe7a 	bl	8011428 <listen_message_reliably>
 8011734:	f000 fd2e 	bl	8012194 <uxr_millis>
 8011738:	1bc3      	subs	r3, r0, r7
 801173a:	1aec      	subs	r4, r5, r3
 801173c:	d407      	bmi.n	801174e <uxr_run_session_until_confirm_delivery+0x3e>
 801173e:	4640      	mov	r0, r8
 8011740:	f000 fccc 	bl	80120dc <uxr_output_streams_confirmed>
 8011744:	4603      	mov	r3, r0
 8011746:	4621      	mov	r1, r4
 8011748:	4630      	mov	r0, r6
 801174a:	2b00      	cmp	r3, #0
 801174c:	d0f0      	beq.n	8011730 <uxr_run_session_until_confirm_delivery+0x20>
 801174e:	4640      	mov	r0, r8
 8011750:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011754:	f000 bcc2 	b.w	80120dc <uxr_output_streams_confirmed>

08011758 <uxr_run_session_until_all_status>:
 8011758:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801175c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8011760:	4606      	mov	r6, r0
 8011762:	4688      	mov	r8, r1
 8011764:	4692      	mov	sl, r2
 8011766:	461f      	mov	r7, r3
 8011768:	f7ff fc18 	bl	8010f9c <uxr_flash_output_streams>
 801176c:	f1bb 0f00 	cmp.w	fp, #0
 8011770:	d004      	beq.n	801177c <uxr_run_session_until_all_status+0x24>
 8011772:	465a      	mov	r2, fp
 8011774:	21ff      	movs	r1, #255	; 0xff
 8011776:	4638      	mov	r0, r7
 8011778:	f00a ffe4 	bl	801c744 <memset>
 801177c:	f8c6 b07c 	str.w	fp, [r6, #124]	; 0x7c
 8011780:	1e7d      	subs	r5, r7, #1
 8011782:	e9c6 a71d 	strd	sl, r7, [r6, #116]	; 0x74
 8011786:	f000 fd05 	bl	8012194 <uxr_millis>
 801178a:	4641      	mov	r1, r8
 801178c:	4681      	mov	r9, r0
 801178e:	4630      	mov	r0, r6
 8011790:	f7ff fe4a 	bl	8011428 <listen_message_reliably>
 8011794:	f000 fcfe 	bl	8012194 <uxr_millis>
 8011798:	eba0 0009 	sub.w	r0, r0, r9
 801179c:	eba8 0100 	sub.w	r1, r8, r0
 80117a0:	f1bb 0f00 	cmp.w	fp, #0
 80117a4:	d029      	beq.n	80117fa <uxr_run_session_until_all_status+0xa2>
 80117a6:	46ae      	mov	lr, r5
 80117a8:	f04f 0c00 	mov.w	ip, #0
 80117ac:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 80117b0:	2cff      	cmp	r4, #255	; 0xff
 80117b2:	d015      	beq.n	80117e0 <uxr_run_session_until_all_status+0x88>
 80117b4:	f10c 0c01 	add.w	ip, ip, #1
 80117b8:	45e3      	cmp	fp, ip
 80117ba:	d8f7      	bhi.n	80117ac <uxr_run_session_until_all_status+0x54>
 80117bc:	2300      	movs	r3, #0
 80117be:	67f3      	str	r3, [r6, #124]	; 0x7c
 80117c0:	e000      	b.n	80117c4 <uxr_run_session_until_all_status+0x6c>
 80117c2:	b158      	cbz	r0, 80117dc <uxr_run_session_until_all_status+0x84>
 80117c4:	462b      	mov	r3, r5
 80117c6:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 80117ca:	3302      	adds	r3, #2
 80117cc:	2801      	cmp	r0, #1
 80117ce:	eba3 0307 	sub.w	r3, r3, r7
 80117d2:	bf8c      	ite	hi
 80117d4:	2000      	movhi	r0, #0
 80117d6:	2001      	movls	r0, #1
 80117d8:	459b      	cmp	fp, r3
 80117da:	d8f2      	bhi.n	80117c2 <uxr_run_session_until_all_status+0x6a>
 80117dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117e0:	f83a 301c 	ldrh.w	r3, [sl, ip, lsl #1]
 80117e4:	f10c 0c01 	add.w	ip, ip, #1
 80117e8:	45dc      	cmp	ip, fp
 80117ea:	d201      	bcs.n	80117f0 <uxr_run_session_until_all_status+0x98>
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	d0dd      	beq.n	80117ac <uxr_run_session_until_all_status+0x54>
 80117f0:	2900      	cmp	r1, #0
 80117f2:	dde3      	ble.n	80117bc <uxr_run_session_until_all_status+0x64>
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	d1ca      	bne.n	801178e <uxr_run_session_until_all_status+0x36>
 80117f8:	e7e0      	b.n	80117bc <uxr_run_session_until_all_status+0x64>
 80117fa:	2001      	movs	r0, #1
 80117fc:	f8c6 b07c 	str.w	fp, [r6, #124]	; 0x7c
 8011800:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011804 <wait_session_status>:
 8011804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011808:	4604      	mov	r4, r0
 801180a:	b09d      	sub	sp, #116	; 0x74
 801180c:	20ff      	movs	r0, #255	; 0xff
 801180e:	9303      	str	r3, [sp, #12]
 8011810:	7160      	strb	r0, [r4, #5]
 8011812:	2b00      	cmp	r3, #0
 8011814:	f000 80b6 	beq.w	8011984 <wait_session_status+0x180>
 8011818:	4689      	mov	r9, r1
 801181a:	4692      	mov	sl, r2
 801181c:	f04f 0b00 	mov.w	fp, #0
 8011820:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8011822:	4652      	mov	r2, sl
 8011824:	4649      	mov	r1, r9
 8011826:	e9d3 0500 	ldrd	r0, r5, [r3]
 801182a:	47a8      	blx	r5
 801182c:	f000 fcb2 	bl	8012194 <uxr_millis>
 8011830:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8011834:	4605      	mov	r5, r0
 8011836:	e009      	b.n	801184c <wait_session_status+0x48>
 8011838:	f000 fcac 	bl	8012194 <uxr_millis>
 801183c:	1b40      	subs	r0, r0, r5
 801183e:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8011842:	2b00      	cmp	r3, #0
 8011844:	dd40      	ble.n	80118c8 <wait_session_status+0xc4>
 8011846:	7960      	ldrb	r0, [r4, #5]
 8011848:	28ff      	cmp	r0, #255	; 0xff
 801184a:	d145      	bne.n	80118d8 <wait_session_status+0xd4>
 801184c:	6f22      	ldr	r2, [r4, #112]	; 0x70
 801184e:	a908      	add	r1, sp, #32
 8011850:	6896      	ldr	r6, [r2, #8]
 8011852:	6810      	ldr	r0, [r2, #0]
 8011854:	aa09      	add	r2, sp, #36	; 0x24
 8011856:	47b0      	blx	r6
 8011858:	2800      	cmp	r0, #0
 801185a:	d0ed      	beq.n	8011838 <wait_session_status+0x34>
 801185c:	a80c      	add	r0, sp, #48	; 0x30
 801185e:	2600      	movs	r6, #0
 8011860:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8011864:	f7fe ff9a 	bl	801079c <ucdr_init_buffer>
 8011868:	f10d 031e 	add.w	r3, sp, #30
 801186c:	aa07      	add	r2, sp, #28
 801186e:	a90c      	add	r1, sp, #48	; 0x30
 8011870:	4620      	mov	r0, r4
 8011872:	f88d 601c 	strb.w	r6, [sp, #28]
 8011876:	f000 fa8f 	bl	8011d98 <uxr_read_session_header>
 801187a:	2800      	cmp	r0, #0
 801187c:	d0dc      	beq.n	8011838 <wait_session_status+0x34>
 801187e:	4631      	mov	r1, r6
 8011880:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8011884:	f000 fb30 	bl	8011ee8 <uxr_stream_id_from_raw>
 8011888:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801188c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8011890:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8011894:	2f01      	cmp	r7, #1
 8011896:	9302      	str	r3, [sp, #8]
 8011898:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 801189c:	d05c      	beq.n	8011958 <wait_session_status+0x154>
 801189e:	2f02      	cmp	r7, #2
 80118a0:	d020      	beq.n	80118e4 <wait_session_status+0xe0>
 80118a2:	2f00      	cmp	r7, #0
 80118a4:	d1c8      	bne.n	8011838 <wait_session_status+0x34>
 80118a6:	4639      	mov	r1, r7
 80118a8:	4638      	mov	r0, r7
 80118aa:	f000 fb1d 	bl	8011ee8 <uxr_stream_id_from_raw>
 80118ae:	a90c      	add	r1, sp, #48	; 0x30
 80118b0:	4602      	mov	r2, r0
 80118b2:	900b      	str	r0, [sp, #44]	; 0x2c
 80118b4:	4620      	mov	r0, r4
 80118b6:	f7ff fc2d 	bl	8011114 <read_submessage_list>
 80118ba:	f000 fc6b 	bl	8012194 <uxr_millis>
 80118be:	1b40      	subs	r0, r0, r5
 80118c0:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	dcbe      	bgt.n	8011846 <wait_session_status+0x42>
 80118c8:	f10b 0b01 	add.w	fp, fp, #1
 80118cc:	9b03      	ldr	r3, [sp, #12]
 80118ce:	7960      	ldrb	r0, [r4, #5]
 80118d0:	455b      	cmp	r3, fp
 80118d2:	d001      	beq.n	80118d8 <wait_session_status+0xd4>
 80118d4:	28ff      	cmp	r0, #255	; 0xff
 80118d6:	d0a3      	beq.n	8011820 <wait_session_status+0x1c>
 80118d8:	38ff      	subs	r0, #255	; 0xff
 80118da:	bf18      	it	ne
 80118dc:	2001      	movne	r0, #1
 80118de:	b01d      	add	sp, #116	; 0x74
 80118e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118e4:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 80118e8:	4631      	mov	r1, r6
 80118ea:	f104 0008 	add.w	r0, r4, #8
 80118ee:	9304      	str	r3, [sp, #16]
 80118f0:	f000 fbe8 	bl	80120c4 <uxr_get_input_reliable_stream>
 80118f4:	4680      	mov	r8, r0
 80118f6:	b348      	cbz	r0, 801194c <wait_session_status+0x148>
 80118f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80118fa:	a80c      	add	r0, sp, #48	; 0x30
 80118fc:	9205      	str	r2, [sp, #20]
 80118fe:	f7fe ff7f 	bl	8010800 <ucdr_buffer_remaining>
 8011902:	4603      	mov	r3, r0
 8011904:	f10d 001d 	add.w	r0, sp, #29
 8011908:	9a05      	ldr	r2, [sp, #20]
 801190a:	9000      	str	r0, [sp, #0]
 801190c:	4640      	mov	r0, r8
 801190e:	9902      	ldr	r1, [sp, #8]
 8011910:	f008 f9a0 	bl	8019c54 <uxr_receive_reliable_message>
 8011914:	b1d0      	cbz	r0, 801194c <wait_session_status+0x148>
 8011916:	f89d 301d 	ldrb.w	r3, [sp, #29]
 801191a:	2b00      	cmp	r3, #0
 801191c:	d03a      	beq.n	8011994 <wait_session_status+0x190>
 801191e:	9f04      	ldr	r7, [sp, #16]
 8011920:	e00a      	b.n	8011938 <wait_session_status+0x134>
 8011922:	f04f 0302 	mov.w	r3, #2
 8011926:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
 801192a:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 801192e:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 8011932:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011934:	f7ff fbee 	bl	8011114 <read_submessage_list>
 8011938:	a914      	add	r1, sp, #80	; 0x50
 801193a:	2204      	movs	r2, #4
 801193c:	4640      	mov	r0, r8
 801193e:	f008 fa0b 	bl	8019d58 <uxr_next_input_reliable_buffer_available>
 8011942:	4603      	mov	r3, r0
 8011944:	a914      	add	r1, sp, #80	; 0x50
 8011946:	4620      	mov	r0, r4
 8011948:	2b00      	cmp	r3, #0
 801194a:	d1ea      	bne.n	8011922 <wait_session_status+0x11e>
 801194c:	4632      	mov	r2, r6
 801194e:	9904      	ldr	r1, [sp, #16]
 8011950:	4620      	mov	r0, r4
 8011952:	f7ff fa5b 	bl	8010e0c <write_submessage_acknack.isra.0>
 8011956:	e76f      	b.n	8011838 <wait_session_status+0x34>
 8011958:	4631      	mov	r1, r6
 801195a:	f104 0008 	add.w	r0, r4, #8
 801195e:	f000 fba7 	bl	80120b0 <uxr_get_input_best_effort_stream>
 8011962:	2800      	cmp	r0, #0
 8011964:	f43f af68 	beq.w	8011838 <wait_session_status+0x34>
 8011968:	9902      	ldr	r1, [sp, #8]
 801196a:	f008 f8e9 	bl	8019b40 <uxr_receive_best_effort_message>
 801196e:	2800      	cmp	r0, #0
 8011970:	f43f af62 	beq.w	8011838 <wait_session_status+0x34>
 8011974:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 8011978:	a90c      	add	r1, sp, #48	; 0x30
 801197a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801197c:	4620      	mov	r0, r4
 801197e:	f7ff fbc9 	bl	8011114 <read_submessage_list>
 8011982:	e759      	b.n	8011838 <wait_session_status+0x34>
 8011984:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8011986:	e9d3 0400 	ldrd	r0, r4, [r3]
 801198a:	47a0      	blx	r4
 801198c:	2001      	movs	r0, #1
 801198e:	b01d      	add	sp, #116	; 0x74
 8011990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011994:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 8011998:	a90c      	add	r1, sp, #48	; 0x30
 801199a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801199c:	4620      	mov	r0, r4
 801199e:	f7ff fbb9 	bl	8011114 <read_submessage_list>
 80119a2:	e7bc      	b.n	801191e <wait_session_status+0x11a>

080119a4 <uxr_delete_session_retries>:
 80119a4:	b530      	push	{r4, r5, lr}
 80119a6:	b08f      	sub	sp, #60	; 0x3c
 80119a8:	4604      	mov	r4, r0
 80119aa:	460d      	mov	r5, r1
 80119ac:	f000 fa34 	bl	8011e18 <uxr_session_header_offset>
 80119b0:	2300      	movs	r3, #0
 80119b2:	2210      	movs	r2, #16
 80119b4:	a902      	add	r1, sp, #8
 80119b6:	9000      	str	r0, [sp, #0]
 80119b8:	a806      	add	r0, sp, #24
 80119ba:	f7fe fedd 	bl	8010778 <ucdr_init_buffer_origin_offset>
 80119be:	a906      	add	r1, sp, #24
 80119c0:	4620      	mov	r0, r4
 80119c2:	f000 f979 	bl	8011cb8 <uxr_buffer_delete_session>
 80119c6:	2200      	movs	r2, #0
 80119c8:	9b06      	ldr	r3, [sp, #24]
 80119ca:	4620      	mov	r0, r4
 80119cc:	4611      	mov	r1, r2
 80119ce:	f000 f9cf 	bl	8011d70 <uxr_stamp_session_header>
 80119d2:	a806      	add	r0, sp, #24
 80119d4:	f7fe ff10 	bl	80107f8 <ucdr_buffer_length>
 80119d8:	462b      	mov	r3, r5
 80119da:	4602      	mov	r2, r0
 80119dc:	a902      	add	r1, sp, #8
 80119de:	4620      	mov	r0, r4
 80119e0:	f7ff ff10 	bl	8011804 <wait_session_status>
 80119e4:	b118      	cbz	r0, 80119ee <uxr_delete_session_retries+0x4a>
 80119e6:	7960      	ldrb	r0, [r4, #5]
 80119e8:	fab0 f080 	clz	r0, r0
 80119ec:	0940      	lsrs	r0, r0, #5
 80119ee:	b00f      	add	sp, #60	; 0x3c
 80119f0:	bd30      	pop	{r4, r5, pc}
 80119f2:	bf00      	nop

080119f4 <uxr_create_session>:
 80119f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119f8:	f100 0b08 	add.w	fp, r0, #8
 80119fc:	4604      	mov	r4, r0
 80119fe:	b0ab      	sub	sp, #172	; 0xac
 8011a00:	4658      	mov	r0, fp
 8011a02:	465e      	mov	r6, fp
 8011a04:	f000 faa6 	bl	8011f54 <uxr_reset_stream_storage>
 8011a08:	4620      	mov	r0, r4
 8011a0a:	f000 fa05 	bl	8011e18 <uxr_session_header_offset>
 8011a0e:	2300      	movs	r3, #0
 8011a10:	221c      	movs	r2, #28
 8011a12:	a90b      	add	r1, sp, #44	; 0x2c
 8011a14:	9000      	str	r0, [sp, #0]
 8011a16:	a812      	add	r0, sp, #72	; 0x48
 8011a18:	f7fe feae 	bl	8010778 <ucdr_init_buffer_origin_offset>
 8011a1c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8011a1e:	a912      	add	r1, sp, #72	; 0x48
 8011a20:	4620      	mov	r0, r4
 8011a22:	8a1a      	ldrh	r2, [r3, #16]
 8011a24:	3a04      	subs	r2, #4
 8011a26:	b292      	uxth	r2, r2
 8011a28:	f000 f91c 	bl	8011c64 <uxr_buffer_create_session>
 8011a2c:	9912      	ldr	r1, [sp, #72]	; 0x48
 8011a2e:	4620      	mov	r0, r4
 8011a30:	f000 f98a 	bl	8011d48 <uxr_stamp_create_session_header>
 8011a34:	a812      	add	r0, sp, #72	; 0x48
 8011a36:	f7fe fedf 	bl	80107f8 <ucdr_buffer_length>
 8011a3a:	23ff      	movs	r3, #255	; 0xff
 8011a3c:	4681      	mov	r9, r0
 8011a3e:	7163      	strb	r3, [r4, #5]
 8011a40:	230a      	movs	r3, #10
 8011a42:	9303      	str	r3, [sp, #12]
 8011a44:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8011a46:	464a      	mov	r2, r9
 8011a48:	a90b      	add	r1, sp, #44	; 0x2c
 8011a4a:	e9d3 0500 	ldrd	r0, r5, [r3]
 8011a4e:	47a8      	blx	r5
 8011a50:	f000 fba0 	bl	8012194 <uxr_millis>
 8011a54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8011a58:	4605      	mov	r5, r0
 8011a5a:	e009      	b.n	8011a70 <uxr_create_session+0x7c>
 8011a5c:	f000 fb9a 	bl	8012194 <uxr_millis>
 8011a60:	1b40      	subs	r0, r0, r5
 8011a62:	7962      	ldrb	r2, [r4, #5]
 8011a64:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	dd38      	ble.n	8011ade <uxr_create_session+0xea>
 8011a6c:	2aff      	cmp	r2, #255	; 0xff
 8011a6e:	d13c      	bne.n	8011aea <uxr_create_session+0xf6>
 8011a70:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8011a72:	a907      	add	r1, sp, #28
 8011a74:	6897      	ldr	r7, [r2, #8]
 8011a76:	6810      	ldr	r0, [r2, #0]
 8011a78:	aa08      	add	r2, sp, #32
 8011a7a:	47b8      	blx	r7
 8011a7c:	2800      	cmp	r0, #0
 8011a7e:	d0ed      	beq.n	8011a5c <uxr_create_session+0x68>
 8011a80:	a81a      	add	r0, sp, #104	; 0x68
 8011a82:	2700      	movs	r7, #0
 8011a84:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8011a88:	f7fe fe88 	bl	801079c <ucdr_init_buffer>
 8011a8c:	f10d 031a 	add.w	r3, sp, #26
 8011a90:	aa06      	add	r2, sp, #24
 8011a92:	a91a      	add	r1, sp, #104	; 0x68
 8011a94:	4620      	mov	r0, r4
 8011a96:	f88d 7018 	strb.w	r7, [sp, #24]
 8011a9a:	f000 f97d 	bl	8011d98 <uxr_read_session_header>
 8011a9e:	2800      	cmp	r0, #0
 8011aa0:	d0dc      	beq.n	8011a5c <uxr_create_session+0x68>
 8011aa2:	4639      	mov	r1, r7
 8011aa4:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8011aa8:	f000 fa1e 	bl	8011ee8 <uxr_stream_id_from_raw>
 8011aac:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8011ab0:	f8bd b01a 	ldrh.w	fp, [sp, #26]
 8011ab4:	f3c0 2807 	ubfx	r8, r0, #8, #8
 8011ab8:	2f01      	cmp	r7, #1
 8011aba:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 8011abe:	d053      	beq.n	8011b68 <uxr_create_session+0x174>
 8011ac0:	2f02      	cmp	r7, #2
 8011ac2:	d018      	beq.n	8011af6 <uxr_create_session+0x102>
 8011ac4:	2f00      	cmp	r7, #0
 8011ac6:	d1c9      	bne.n	8011a5c <uxr_create_session+0x68>
 8011ac8:	4639      	mov	r1, r7
 8011aca:	4638      	mov	r0, r7
 8011acc:	f000 fa0c 	bl	8011ee8 <uxr_stream_id_from_raw>
 8011ad0:	a91a      	add	r1, sp, #104	; 0x68
 8011ad2:	4602      	mov	r2, r0
 8011ad4:	900a      	str	r0, [sp, #40]	; 0x28
 8011ad6:	4620      	mov	r0, r4
 8011ad8:	f7ff fb1c 	bl	8011114 <read_submessage_list>
 8011adc:	e7be      	b.n	8011a5c <uxr_create_session+0x68>
 8011ade:	9b03      	ldr	r3, [sp, #12]
 8011ae0:	3b01      	subs	r3, #1
 8011ae2:	9303      	str	r3, [sp, #12]
 8011ae4:	d001      	beq.n	8011aea <uxr_create_session+0xf6>
 8011ae6:	2aff      	cmp	r2, #255	; 0xff
 8011ae8:	d0ac      	beq.n	8011a44 <uxr_create_session+0x50>
 8011aea:	2a00      	cmp	r2, #0
 8011aec:	d051      	beq.n	8011b92 <uxr_create_session+0x19e>
 8011aee:	2000      	movs	r0, #0
 8011af0:	b02b      	add	sp, #172	; 0xac
 8011af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011af6:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8011afa:	4641      	mov	r1, r8
 8011afc:	4630      	mov	r0, r6
 8011afe:	9304      	str	r3, [sp, #16]
 8011b00:	f000 fae0 	bl	80120c4 <uxr_get_input_reliable_stream>
 8011b04:	4682      	mov	sl, r0
 8011b06:	b348      	cbz	r0, 8011b5c <uxr_create_session+0x168>
 8011b08:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8011b0a:	a81a      	add	r0, sp, #104	; 0x68
 8011b0c:	9205      	str	r2, [sp, #20]
 8011b0e:	f7fe fe77 	bl	8010800 <ucdr_buffer_remaining>
 8011b12:	4603      	mov	r3, r0
 8011b14:	f10d 0019 	add.w	r0, sp, #25
 8011b18:	9a05      	ldr	r2, [sp, #20]
 8011b1a:	4659      	mov	r1, fp
 8011b1c:	9000      	str	r0, [sp, #0]
 8011b1e:	4650      	mov	r0, sl
 8011b20:	f008 f898 	bl	8019c54 <uxr_receive_reliable_message>
 8011b24:	b1d0      	cbz	r0, 8011b5c <uxr_create_session+0x168>
 8011b26:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d038      	beq.n	8011ba0 <uxr_create_session+0x1ac>
 8011b2e:	9f04      	ldr	r7, [sp, #16]
 8011b30:	e00a      	b.n	8011b48 <uxr_create_session+0x154>
 8011b32:	f04f 0302 	mov.w	r3, #2
 8011b36:	f88d 7028 	strb.w	r7, [sp, #40]	; 0x28
 8011b3a:	f88d 8029 	strb.w	r8, [sp, #41]	; 0x29
 8011b3e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011b42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011b44:	f7ff fae6 	bl	8011114 <read_submessage_list>
 8011b48:	a922      	add	r1, sp, #136	; 0x88
 8011b4a:	2204      	movs	r2, #4
 8011b4c:	4650      	mov	r0, sl
 8011b4e:	f008 f903 	bl	8019d58 <uxr_next_input_reliable_buffer_available>
 8011b52:	4603      	mov	r3, r0
 8011b54:	a922      	add	r1, sp, #136	; 0x88
 8011b56:	4620      	mov	r0, r4
 8011b58:	2b00      	cmp	r3, #0
 8011b5a:	d1ea      	bne.n	8011b32 <uxr_create_session+0x13e>
 8011b5c:	4642      	mov	r2, r8
 8011b5e:	9904      	ldr	r1, [sp, #16]
 8011b60:	4620      	mov	r0, r4
 8011b62:	f7ff f953 	bl	8010e0c <write_submessage_acknack.isra.0>
 8011b66:	e779      	b.n	8011a5c <uxr_create_session+0x68>
 8011b68:	4641      	mov	r1, r8
 8011b6a:	4630      	mov	r0, r6
 8011b6c:	f000 faa0 	bl	80120b0 <uxr_get_input_best_effort_stream>
 8011b70:	2800      	cmp	r0, #0
 8011b72:	f43f af73 	beq.w	8011a5c <uxr_create_session+0x68>
 8011b76:	4659      	mov	r1, fp
 8011b78:	f007 ffe2 	bl	8019b40 <uxr_receive_best_effort_message>
 8011b7c:	2800      	cmp	r0, #0
 8011b7e:	f43f af6d 	beq.w	8011a5c <uxr_create_session+0x68>
 8011b82:	f88d 702a 	strb.w	r7, [sp, #42]	; 0x2a
 8011b86:	a91a      	add	r1, sp, #104	; 0x68
 8011b88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011b8a:	4620      	mov	r0, r4
 8011b8c:	f7ff fac2 	bl	8011114 <read_submessage_list>
 8011b90:	e764      	b.n	8011a5c <uxr_create_session+0x68>
 8011b92:	4630      	mov	r0, r6
 8011b94:	f000 f9de 	bl	8011f54 <uxr_reset_stream_storage>
 8011b98:	2001      	movs	r0, #1
 8011b9a:	b02b      	add	sp, #172	; 0xac
 8011b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ba0:	f88d 702a 	strb.w	r7, [sp, #42]	; 0x2a
 8011ba4:	a91a      	add	r1, sp, #104	; 0x68
 8011ba6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011ba8:	4620      	mov	r0, r4
 8011baa:	f7ff fab3 	bl	8011114 <read_submessage_list>
 8011bae:	e7be      	b.n	8011b2e <uxr_create_session+0x13a>

08011bb0 <uxr_prepare_stream_to_write_submessage>:
 8011bb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011bb4:	b082      	sub	sp, #8
 8011bb6:	4604      	mov	r4, r0
 8011bb8:	4610      	mov	r0, r2
 8011bba:	4615      	mov	r5, r2
 8011bbc:	461e      	mov	r6, r3
 8011bbe:	f3c1 2a07 	ubfx	sl, r1, #8, #8
 8011bc2:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 8011bc6:	f105 0904 	add.w	r9, r5, #4
 8011bca:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 8011bce:	9101      	str	r1, [sp, #4]
 8011bd0:	f000 fada 	bl	8012188 <uxr_submessage_padding>
 8011bd4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011bd8:	4481      	add	r9, r0
 8011bda:	2b01      	cmp	r3, #1
 8011bdc:	d01d      	beq.n	8011c1a <uxr_prepare_stream_to_write_submessage+0x6a>
 8011bde:	2b02      	cmp	r3, #2
 8011be0:	d116      	bne.n	8011c10 <uxr_prepare_stream_to_write_submessage+0x60>
 8011be2:	f104 0008 	add.w	r0, r4, #8
 8011be6:	4651      	mov	r1, sl
 8011be8:	f000 fa56 	bl	8012098 <uxr_get_output_reliable_stream>
 8011bec:	4604      	mov	r4, r0
 8011bee:	b158      	cbz	r0, 8011c08 <uxr_prepare_stream_to_write_submessage+0x58>
 8011bf0:	4649      	mov	r1, r9
 8011bf2:	4632      	mov	r2, r6
 8011bf4:	f008 fa76 	bl	801a0e4 <uxr_prepare_reliable_buffer_to_write>
 8011bf8:	4604      	mov	r4, r0
 8011bfa:	b12c      	cbz	r4, 8011c08 <uxr_prepare_stream_to_write_submessage+0x58>
 8011bfc:	4643      	mov	r3, r8
 8011bfe:	b2aa      	uxth	r2, r5
 8011c00:	4639      	mov	r1, r7
 8011c02:	4630      	mov	r0, r6
 8011c04:	f000 fa80 	bl	8012108 <uxr_buffer_submessage_header>
 8011c08:	4620      	mov	r0, r4
 8011c0a:	b002      	add	sp, #8
 8011c0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011c10:	2400      	movs	r4, #0
 8011c12:	4620      	mov	r0, r4
 8011c14:	b002      	add	sp, #8
 8011c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011c1a:	f104 0008 	add.w	r0, r4, #8
 8011c1e:	4651      	mov	r1, sl
 8011c20:	f000 fa32 	bl	8012088 <uxr_get_output_best_effort_stream>
 8011c24:	4604      	mov	r4, r0
 8011c26:	2800      	cmp	r0, #0
 8011c28:	d0ee      	beq.n	8011c08 <uxr_prepare_stream_to_write_submessage+0x58>
 8011c2a:	4649      	mov	r1, r9
 8011c2c:	4632      	mov	r2, r6
 8011c2e:	f008 f983 	bl	8019f38 <uxr_prepare_best_effort_buffer_to_write>
 8011c32:	4604      	mov	r4, r0
 8011c34:	e7e1      	b.n	8011bfa <uxr_prepare_stream_to_write_submessage+0x4a>
 8011c36:	bf00      	nop

08011c38 <uxr_init_session_info>:
 8011c38:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8011c3c:	23ff      	movs	r3, #255	; 0xff
 8011c3e:	7102      	strb	r2, [r0, #4]
 8011c40:	f880 c001 	strb.w	ip, [r0, #1]
 8011c44:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8011c48:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8011c4c:	7001      	strb	r1, [r0, #0]
 8011c4e:	f880 c002 	strb.w	ip, [r0, #2]
 8011c52:	7143      	strb	r3, [r0, #5]
 8011c54:	70c2      	strb	r2, [r0, #3]
 8011c56:	b500      	push	{lr}
 8011c58:	f04f 0e09 	mov.w	lr, #9
 8011c5c:	f8a0 e006 	strh.w	lr, [r0, #6]
 8011c60:	f85d fb04 	ldr.w	pc, [sp], #4

08011c64 <uxr_buffer_create_session>:
 8011c64:	b530      	push	{r4, r5, lr}
 8011c66:	2300      	movs	r3, #0
 8011c68:	b089      	sub	sp, #36	; 0x24
 8011c6a:	4d12      	ldr	r5, [pc, #72]	; (8011cb4 <uxr_buffer_create_session+0x50>)
 8011c6c:	460c      	mov	r4, r1
 8011c6e:	9307      	str	r3, [sp, #28]
 8011c70:	4619      	mov	r1, r3
 8011c72:	f8ad 201c 	strh.w	r2, [sp, #28]
 8011c76:	2201      	movs	r2, #1
 8011c78:	9301      	str	r3, [sp, #4]
 8011c7a:	80c2      	strh	r2, [r0, #6]
 8011c7c:	f88d 2004 	strb.w	r2, [sp, #4]
 8011c80:	682a      	ldr	r2, [r5, #0]
 8011c82:	9303      	str	r3, [sp, #12]
 8011c84:	9200      	str	r2, [sp, #0]
 8011c86:	88aa      	ldrh	r2, [r5, #4]
 8011c88:	9306      	str	r3, [sp, #24]
 8011c8a:	f8ad 2006 	strh.w	r2, [sp, #6]
 8011c8e:	f8d0 2001 	ldr.w	r2, [r0, #1]
 8011c92:	9202      	str	r2, [sp, #8]
 8011c94:	7802      	ldrb	r2, [r0, #0]
 8011c96:	4620      	mov	r0, r4
 8011c98:	f88d 200c 	strb.w	r2, [sp, #12]
 8011c9c:	2210      	movs	r2, #16
 8011c9e:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8011ca2:	f000 fa31 	bl	8012108 <uxr_buffer_submessage_header>
 8011ca6:	4669      	mov	r1, sp
 8011ca8:	4620      	mov	r0, r4
 8011caa:	f001 faa3 	bl	80131f4 <uxr_serialize_CREATE_CLIENT_Payload>
 8011cae:	b009      	add	sp, #36	; 0x24
 8011cb0:	bd30      	pop	{r4, r5, pc}
 8011cb2:	bf00      	nop
 8011cb4:	0801d7e0 	.word	0x0801d7e0

08011cb8 <uxr_buffer_delete_session>:
 8011cb8:	4a0c      	ldr	r2, [pc, #48]	; (8011cec <uxr_buffer_delete_session+0x34>)
 8011cba:	2302      	movs	r3, #2
 8011cbc:	f44f 7c00 	mov.w	ip, #512	; 0x200
 8011cc0:	b510      	push	{r4, lr}
 8011cc2:	460c      	mov	r4, r1
 8011cc4:	b082      	sub	sp, #8
 8011cc6:	8911      	ldrh	r1, [r2, #8]
 8011cc8:	2204      	movs	r2, #4
 8011cca:	80c3      	strh	r3, [r0, #6]
 8011ccc:	2300      	movs	r3, #0
 8011cce:	f8ad 1006 	strh.w	r1, [sp, #6]
 8011cd2:	4620      	mov	r0, r4
 8011cd4:	2103      	movs	r1, #3
 8011cd6:	f8ad c004 	strh.w	ip, [sp, #4]
 8011cda:	f000 fa15 	bl	8012108 <uxr_buffer_submessage_header>
 8011cde:	a901      	add	r1, sp, #4
 8011ce0:	4620      	mov	r0, r4
 8011ce2:	f001 fb2f 	bl	8013344 <uxr_serialize_DELETE_Payload>
 8011ce6:	b002      	add	sp, #8
 8011ce8:	bd10      	pop	{r4, pc}
 8011cea:	bf00      	nop
 8011cec:	0801d7e0 	.word	0x0801d7e0

08011cf0 <uxr_read_create_session_status>:
 8011cf0:	b510      	push	{r4, lr}
 8011cf2:	460b      	mov	r3, r1
 8011cf4:	b088      	sub	sp, #32
 8011cf6:	4604      	mov	r4, r0
 8011cf8:	a901      	add	r1, sp, #4
 8011cfa:	4618      	mov	r0, r3
 8011cfc:	f001 fb32 	bl	8013364 <uxr_deserialize_STATUS_AGENT_Payload>
 8011d00:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011d04:	7163      	strb	r3, [r4, #5]
 8011d06:	b008      	add	sp, #32
 8011d08:	bd10      	pop	{r4, pc}
 8011d0a:	bf00      	nop

08011d0c <uxr_read_delete_session_status>:
 8011d0c:	b510      	push	{r4, lr}
 8011d0e:	b084      	sub	sp, #16
 8011d10:	4604      	mov	r4, r0
 8011d12:	4608      	mov	r0, r1
 8011d14:	a902      	add	r1, sp, #8
 8011d16:	f001 fb55 	bl	80133c4 <uxr_deserialize_STATUS_Payload>
 8011d1a:	88e3      	ldrh	r3, [r4, #6]
 8011d1c:	2b02      	cmp	r3, #2
 8011d1e:	d001      	beq.n	8011d24 <uxr_read_delete_session_status+0x18>
 8011d20:	b004      	add	sp, #16
 8011d22:	bd10      	pop	{r4, pc}
 8011d24:	f10d 000a 	add.w	r0, sp, #10
 8011d28:	f7fe fff6 	bl	8010d18 <uxr_object_id_from_raw>
 8011d2c:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8011d30:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8011d34:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8011d38:	b29b      	uxth	r3, r3
 8011d3a:	2b02      	cmp	r3, #2
 8011d3c:	d1f0      	bne.n	8011d20 <uxr_read_delete_session_status+0x14>
 8011d3e:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8011d42:	7163      	strb	r3, [r4, #5]
 8011d44:	e7ec      	b.n	8011d20 <uxr_read_delete_session_status+0x14>
 8011d46:	bf00      	nop

08011d48 <uxr_stamp_create_session_header>:
 8011d48:	b510      	push	{r4, lr}
 8011d4a:	2208      	movs	r2, #8
 8011d4c:	b08a      	sub	sp, #40	; 0x28
 8011d4e:	4604      	mov	r4, r0
 8011d50:	eb0d 0002 	add.w	r0, sp, r2
 8011d54:	f7fe fd22 	bl	801079c <ucdr_init_buffer>
 8011d58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d5c:	2300      	movs	r3, #0
 8011d5e:	a802      	add	r0, sp, #8
 8011d60:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8011d64:	9400      	str	r4, [sp, #0]
 8011d66:	461a      	mov	r2, r3
 8011d68:	f000 fbca 	bl	8012500 <uxr_serialize_message_header>
 8011d6c:	b00a      	add	sp, #40	; 0x28
 8011d6e:	bd10      	pop	{r4, pc}

08011d70 <uxr_stamp_session_header>:
 8011d70:	b530      	push	{r4, r5, lr}
 8011d72:	b08d      	sub	sp, #52	; 0x34
 8011d74:	4604      	mov	r4, r0
 8011d76:	460d      	mov	r5, r1
 8011d78:	4619      	mov	r1, r3
 8011d7a:	a804      	add	r0, sp, #16
 8011d7c:	9203      	str	r2, [sp, #12]
 8011d7e:	2208      	movs	r2, #8
 8011d80:	f7fe fd0c 	bl	801079c <ucdr_init_buffer>
 8011d84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d88:	9b03      	ldr	r3, [sp, #12]
 8011d8a:	462a      	mov	r2, r5
 8011d8c:	a804      	add	r0, sp, #16
 8011d8e:	9400      	str	r4, [sp, #0]
 8011d90:	f000 fbb6 	bl	8012500 <uxr_serialize_message_header>
 8011d94:	b00d      	add	sp, #52	; 0x34
 8011d96:	bd30      	pop	{r4, r5, pc}

08011d98 <uxr_read_session_header>:
 8011d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d9c:	4607      	mov	r7, r0
 8011d9e:	b084      	sub	sp, #16
 8011da0:	4608      	mov	r0, r1
 8011da2:	460c      	mov	r4, r1
 8011da4:	4615      	mov	r5, r2
 8011da6:	461e      	mov	r6, r3
 8011da8:	f7fe fd2a 	bl	8010800 <ucdr_buffer_remaining>
 8011dac:	2808      	cmp	r0, #8
 8011dae:	d803      	bhi.n	8011db8 <uxr_read_session_header+0x20>
 8011db0:	2000      	movs	r0, #0
 8011db2:	b004      	add	sp, #16
 8011db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011db8:	f10d 080c 	add.w	r8, sp, #12
 8011dbc:	4633      	mov	r3, r6
 8011dbe:	462a      	mov	r2, r5
 8011dc0:	4620      	mov	r0, r4
 8011dc2:	f10d 010b 	add.w	r1, sp, #11
 8011dc6:	f8cd 8000 	str.w	r8, [sp]
 8011dca:	f000 fbb7 	bl	801253c <uxr_deserialize_message_header>
 8011dce:	783a      	ldrb	r2, [r7, #0]
 8011dd0:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8011dd4:	4293      	cmp	r3, r2
 8011dd6:	d1eb      	bne.n	8011db0 <uxr_read_session_header+0x18>
 8011dd8:	061b      	lsls	r3, r3, #24
 8011dda:	d41b      	bmi.n	8011e14 <uxr_read_session_header+0x7c>
 8011ddc:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8011de0:	787b      	ldrb	r3, [r7, #1]
 8011de2:	429a      	cmp	r2, r3
 8011de4:	d003      	beq.n	8011dee <uxr_read_session_header+0x56>
 8011de6:	2001      	movs	r0, #1
 8011de8:	f080 0001 	eor.w	r0, r0, #1
 8011dec:	e7e1      	b.n	8011db2 <uxr_read_session_header+0x1a>
 8011dee:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8011df2:	1cb8      	adds	r0, r7, #2
 8011df4:	78bb      	ldrb	r3, [r7, #2]
 8011df6:	429a      	cmp	r2, r3
 8011df8:	d1f5      	bne.n	8011de6 <uxr_read_session_header+0x4e>
 8011dfa:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8011dfe:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8011e02:	429a      	cmp	r2, r3
 8011e04:	d1ef      	bne.n	8011de6 <uxr_read_session_header+0x4e>
 8011e06:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8011e0a:	7843      	ldrb	r3, [r0, #1]
 8011e0c:	429a      	cmp	r2, r3
 8011e0e:	d1ea      	bne.n	8011de6 <uxr_read_session_header+0x4e>
 8011e10:	2000      	movs	r0, #0
 8011e12:	e7e9      	b.n	8011de8 <uxr_read_session_header+0x50>
 8011e14:	2001      	movs	r0, #1
 8011e16:	e7cc      	b.n	8011db2 <uxr_read_session_header+0x1a>

08011e18 <uxr_session_header_offset>:
 8011e18:	f990 3000 	ldrsb.w	r3, [r0]
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	bfac      	ite	ge
 8011e20:	2008      	movge	r0, #8
 8011e22:	2004      	movlt	r0, #4
 8011e24:	4770      	bx	lr
 8011e26:	bf00      	nop

08011e28 <uxr_init_base_object_request>:
 8011e28:	b510      	push	{r4, lr}
 8011e2a:	b082      	sub	sp, #8
 8011e2c:	f64f 74f4 	movw	r4, #65524	; 0xfff4
 8011e30:	9101      	str	r1, [sp, #4]
 8011e32:	88c3      	ldrh	r3, [r0, #6]
 8011e34:	f1a3 010a 	sub.w	r1, r3, #10
 8011e38:	b289      	uxth	r1, r1
 8011e3a:	42a1      	cmp	r1, r4
 8011e3c:	d80f      	bhi.n	8011e5e <uxr_init_base_object_request+0x36>
 8011e3e:	3301      	adds	r3, #1
 8011e40:	b29c      	uxth	r4, r3
 8011e42:	f3c3 2c07 	ubfx	ip, r3, #8, #8
 8011e46:	b2db      	uxtb	r3, r3
 8011e48:	80c4      	strh	r4, [r0, #6]
 8011e4a:	1c91      	adds	r1, r2, #2
 8011e4c:	9801      	ldr	r0, [sp, #4]
 8011e4e:	f882 c000 	strb.w	ip, [r2]
 8011e52:	7053      	strb	r3, [r2, #1]
 8011e54:	f7fe ff74 	bl	8010d40 <uxr_object_id_to_raw>
 8011e58:	4620      	mov	r0, r4
 8011e5a:	b002      	add	sp, #8
 8011e5c:	bd10      	pop	{r4, pc}
 8011e5e:	230a      	movs	r3, #10
 8011e60:	f04f 0c00 	mov.w	ip, #0
 8011e64:	461c      	mov	r4, r3
 8011e66:	e7ef      	b.n	8011e48 <uxr_init_base_object_request+0x20>

08011e68 <uxr_parse_base_object_request>:
 8011e68:	b570      	push	{r4, r5, r6, lr}
 8011e6a:	4604      	mov	r4, r0
 8011e6c:	3002      	adds	r0, #2
 8011e6e:	460d      	mov	r5, r1
 8011e70:	4616      	mov	r6, r2
 8011e72:	f7fe ff51 	bl	8010d18 <uxr_object_id_from_raw>
 8011e76:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8011e7a:	8028      	strh	r0, [r5, #0]
 8011e7c:	806b      	strh	r3, [r5, #2]
 8011e7e:	7822      	ldrb	r2, [r4, #0]
 8011e80:	7863      	ldrb	r3, [r4, #1]
 8011e82:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8011e86:	8033      	strh	r3, [r6, #0]
 8011e88:	bd70      	pop	{r4, r5, r6, pc}
 8011e8a:	bf00      	nop

08011e8c <uxr_stream_id>:
 8011e8c:	2901      	cmp	r1, #1
 8011e8e:	4684      	mov	ip, r0
 8011e90:	b500      	push	{lr}
 8011e92:	b083      	sub	sp, #12
 8011e94:	d01f      	beq.n	8011ed6 <uxr_stream_id+0x4a>
 8011e96:	2902      	cmp	r1, #2
 8011e98:	f04f 0e00 	mov.w	lr, #0
 8011e9c:	d020      	beq.n	8011ee0 <uxr_stream_id+0x54>
 8011e9e:	2300      	movs	r3, #0
 8011ea0:	2000      	movs	r0, #0
 8011ea2:	f36e 0307 	bfi	r3, lr, #0, #8
 8011ea6:	f36c 230f 	bfi	r3, ip, #8, #8
 8011eaa:	f361 4317 	bfi	r3, r1, #16, #8
 8011eae:	f362 631f 	bfi	r3, r2, #24, #8
 8011eb2:	fa5f fc83 	uxtb.w	ip, r3
 8011eb6:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8011eba:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8011ebe:	0e1b      	lsrs	r3, r3, #24
 8011ec0:	f36c 0007 	bfi	r0, ip, #0, #8
 8011ec4:	f361 200f 	bfi	r0, r1, #8, #8
 8011ec8:	f362 4017 	bfi	r0, r2, #16, #8
 8011ecc:	f363 601f 	bfi	r0, r3, #24, #8
 8011ed0:	b003      	add	sp, #12
 8011ed2:	f85d fb04 	ldr.w	pc, [sp], #4
 8011ed6:	f100 0e01 	add.w	lr, r0, #1
 8011eda:	fa5f fe8e 	uxtb.w	lr, lr
 8011ede:	e7de      	b.n	8011e9e <uxr_stream_id+0x12>
 8011ee0:	f080 0e80 	eor.w	lr, r0, #128	; 0x80
 8011ee4:	e7db      	b.n	8011e9e <uxr_stream_id+0x12>
 8011ee6:	bf00      	nop

08011ee8 <uxr_stream_id_from_raw>:
 8011ee8:	b082      	sub	sp, #8
 8011eea:	b130      	cbz	r0, 8011efa <uxr_stream_id_from_raw+0x12>
 8011eec:	0603      	lsls	r3, r0, #24
 8011eee:	d421      	bmi.n	8011f34 <uxr_stream_id_from_raw+0x4c>
 8011ef0:	1e42      	subs	r2, r0, #1
 8011ef2:	f04f 0c01 	mov.w	ip, #1
 8011ef6:	b2d2      	uxtb	r2, r2
 8011ef8:	e001      	b.n	8011efe <uxr_stream_id_from_raw+0x16>
 8011efa:	4684      	mov	ip, r0
 8011efc:	4602      	mov	r2, r0
 8011efe:	2300      	movs	r3, #0
 8011f00:	f360 0307 	bfi	r3, r0, #0, #8
 8011f04:	2000      	movs	r0, #0
 8011f06:	f362 230f 	bfi	r3, r2, #8, #8
 8011f0a:	f36c 4317 	bfi	r3, ip, #16, #8
 8011f0e:	f361 631f 	bfi	r3, r1, #24, #8
 8011f12:	fa5f fc83 	uxtb.w	ip, r3
 8011f16:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8011f1a:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8011f1e:	0e1b      	lsrs	r3, r3, #24
 8011f20:	f36c 0007 	bfi	r0, ip, #0, #8
 8011f24:	f361 200f 	bfi	r0, r1, #8, #8
 8011f28:	f362 4017 	bfi	r0, r2, #16, #8
 8011f2c:	f363 601f 	bfi	r0, r3, #24, #8
 8011f30:	b002      	add	sp, #8
 8011f32:	4770      	bx	lr
 8011f34:	f080 0280 	eor.w	r2, r0, #128	; 0x80
 8011f38:	f04f 0c02 	mov.w	ip, #2
 8011f3c:	e7df      	b.n	8011efe <uxr_stream_id_from_raw+0x16>
 8011f3e:	bf00      	nop

08011f40 <uxr_init_stream_storage>:
 8011f40:	2300      	movs	r3, #0
 8011f42:	7403      	strb	r3, [r0, #16]
 8011f44:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8011f48:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 8011f4c:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 8011f50:	4770      	bx	lr
 8011f52:	bf00      	nop

08011f54 <uxr_reset_stream_storage>:
 8011f54:	b570      	push	{r4, r5, r6, lr}
 8011f56:	7c03      	ldrb	r3, [r0, #16]
 8011f58:	4604      	mov	r4, r0
 8011f5a:	b14b      	cbz	r3, 8011f70 <uxr_reset_stream_storage+0x1c>
 8011f5c:	4606      	mov	r6, r0
 8011f5e:	2500      	movs	r5, #0
 8011f60:	4630      	mov	r0, r6
 8011f62:	3501      	adds	r5, #1
 8011f64:	f007 ffe2 	bl	8019f2c <uxr_reset_output_best_effort_stream>
 8011f68:	7c23      	ldrb	r3, [r4, #16]
 8011f6a:	3610      	adds	r6, #16
 8011f6c:	42ab      	cmp	r3, r5
 8011f6e:	d8f7      	bhi.n	8011f60 <uxr_reset_stream_storage+0xc>
 8011f70:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8011f74:	b15b      	cbz	r3, 8011f8e <uxr_reset_stream_storage+0x3a>
 8011f76:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011f7a:	2500      	movs	r5, #0
 8011f7c:	4630      	mov	r0, r6
 8011f7e:	3501      	adds	r5, #1
 8011f80:	f007 fdda 	bl	8019b38 <uxr_reset_input_best_effort_stream>
 8011f84:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8011f88:	3602      	adds	r6, #2
 8011f8a:	42ab      	cmp	r3, r5
 8011f8c:	d8f6      	bhi.n	8011f7c <uxr_reset_stream_storage+0x28>
 8011f8e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8011f92:	b15b      	cbz	r3, 8011fac <uxr_reset_stream_storage+0x58>
 8011f94:	f104 0618 	add.w	r6, r4, #24
 8011f98:	2500      	movs	r5, #0
 8011f9a:	4630      	mov	r0, r6
 8011f9c:	3501      	adds	r5, #1
 8011f9e:	f008 f873 	bl	801a088 <uxr_reset_output_reliable_stream>
 8011fa2:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8011fa6:	3628      	adds	r6, #40	; 0x28
 8011fa8:	42ab      	cmp	r3, r5
 8011faa:	d8f6      	bhi.n	8011f9a <uxr_reset_stream_storage+0x46>
 8011fac:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8011fb0:	b15b      	cbz	r3, 8011fca <uxr_reset_stream_storage+0x76>
 8011fb2:	f104 0648 	add.w	r6, r4, #72	; 0x48
 8011fb6:	2500      	movs	r5, #0
 8011fb8:	4630      	mov	r0, r6
 8011fba:	3501      	adds	r5, #1
 8011fbc:	f007 fe28 	bl	8019c10 <uxr_reset_input_reliable_stream>
 8011fc0:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8011fc4:	3618      	adds	r6, #24
 8011fc6:	42ab      	cmp	r3, r5
 8011fc8:	d8f6      	bhi.n	8011fb8 <uxr_reset_stream_storage+0x64>
 8011fca:	bd70      	pop	{r4, r5, r6, pc}

08011fcc <uxr_add_output_best_effort_buffer>:
 8011fcc:	b510      	push	{r4, lr}
 8011fce:	7c04      	ldrb	r4, [r0, #16]
 8011fd0:	b082      	sub	sp, #8
 8011fd2:	f104 0c01 	add.w	ip, r4, #1
 8011fd6:	f880 c010 	strb.w	ip, [r0, #16]
 8011fda:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8011fde:	f007 ff9b 	bl	8019f18 <uxr_init_output_best_effort_stream>
 8011fe2:	2201      	movs	r2, #1
 8011fe4:	4620      	mov	r0, r4
 8011fe6:	4611      	mov	r1, r2
 8011fe8:	b002      	add	sp, #8
 8011fea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011fee:	f7ff bf4d 	b.w	8011e8c <uxr_stream_id>
 8011ff2:	bf00      	nop

08011ff4 <uxr_add_output_reliable_buffer>:
 8011ff4:	b510      	push	{r4, lr}
 8011ff6:	b084      	sub	sp, #16
 8011ff8:	4684      	mov	ip, r0
 8011ffa:	2028      	movs	r0, #40	; 0x28
 8011ffc:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8012000:	9400      	str	r4, [sp, #0]
 8012002:	f89c 4040 	ldrb.w	r4, [ip, #64]	; 0x40
 8012006:	fb00 c004 	mla	r0, r0, r4, ip
 801200a:	f104 0e01 	add.w	lr, r4, #1
 801200e:	3018      	adds	r0, #24
 8012010:	f88c e040 	strb.w	lr, [ip, #64]	; 0x40
 8012014:	f008 f800 	bl	801a018 <uxr_init_output_reliable_stream>
 8012018:	2201      	movs	r2, #1
 801201a:	2102      	movs	r1, #2
 801201c:	4620      	mov	r0, r4
 801201e:	b004      	add	sp, #16
 8012020:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012024:	f7ff bf32 	b.w	8011e8c <uxr_stream_id>

08012028 <uxr_add_input_best_effort_buffer>:
 8012028:	b510      	push	{r4, lr}
 801202a:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 801202e:	b082      	sub	sp, #8
 8012030:	1c62      	adds	r2, r4, #1
 8012032:	f104 0321 	add.w	r3, r4, #33	; 0x21
 8012036:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 801203a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801203e:	f007 fd77 	bl	8019b30 <uxr_init_input_best_effort_stream>
 8012042:	2200      	movs	r2, #0
 8012044:	2101      	movs	r1, #1
 8012046:	4620      	mov	r0, r4
 8012048:	b002      	add	sp, #8
 801204a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801204e:	f7ff bf1d 	b.w	8011e8c <uxr_stream_id>
 8012052:	bf00      	nop

08012054 <uxr_add_input_reliable_buffer>:
 8012054:	b510      	push	{r4, lr}
 8012056:	b084      	sub	sp, #16
 8012058:	4684      	mov	ip, r0
 801205a:	2018      	movs	r0, #24
 801205c:	9c06      	ldr	r4, [sp, #24]
 801205e:	9400      	str	r4, [sp, #0]
 8012060:	f89c 4060 	ldrb.w	r4, [ip, #96]	; 0x60
 8012064:	fb00 c004 	mla	r0, r0, r4, ip
 8012068:	f104 0e01 	add.w	lr, r4, #1
 801206c:	3048      	adds	r0, #72	; 0x48
 801206e:	f88c e060 	strb.w	lr, [ip, #96]	; 0x60
 8012072:	f007 fda7 	bl	8019bc4 <uxr_init_input_reliable_stream>
 8012076:	2200      	movs	r2, #0
 8012078:	2102      	movs	r1, #2
 801207a:	4620      	mov	r0, r4
 801207c:	b004      	add	sp, #16
 801207e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012082:	f7ff bf03 	b.w	8011e8c <uxr_stream_id>
 8012086:	bf00      	nop

08012088 <uxr_get_output_best_effort_stream>:
 8012088:	7c03      	ldrb	r3, [r0, #16]
 801208a:	428b      	cmp	r3, r1
 801208c:	bf8c      	ite	hi
 801208e:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 8012092:	2000      	movls	r0, #0
 8012094:	4770      	bx	lr
 8012096:	bf00      	nop

08012098 <uxr_get_output_reliable_stream>:
 8012098:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 801209c:	428b      	cmp	r3, r1
 801209e:	d904      	bls.n	80120aa <uxr_get_output_reliable_stream+0x12>
 80120a0:	2328      	movs	r3, #40	; 0x28
 80120a2:	fb03 0001 	mla	r0, r3, r1, r0
 80120a6:	3018      	adds	r0, #24
 80120a8:	4770      	bx	lr
 80120aa:	2000      	movs	r0, #0
 80120ac:	4770      	bx	lr
 80120ae:	bf00      	nop

080120b0 <uxr_get_input_best_effort_stream>:
 80120b0:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 80120b4:	428b      	cmp	r3, r1
 80120b6:	d903      	bls.n	80120c0 <uxr_get_input_best_effort_stream+0x10>
 80120b8:	3121      	adds	r1, #33	; 0x21
 80120ba:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 80120be:	4770      	bx	lr
 80120c0:	2000      	movs	r0, #0
 80120c2:	4770      	bx	lr

080120c4 <uxr_get_input_reliable_stream>:
 80120c4:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 80120c8:	428b      	cmp	r3, r1
 80120ca:	d904      	bls.n	80120d6 <uxr_get_input_reliable_stream+0x12>
 80120cc:	2318      	movs	r3, #24
 80120ce:	fb03 0001 	mla	r0, r3, r1, r0
 80120d2:	3048      	adds	r0, #72	; 0x48
 80120d4:	4770      	bx	lr
 80120d6:	2000      	movs	r0, #0
 80120d8:	4770      	bx	lr
 80120da:	bf00      	nop

080120dc <uxr_output_streams_confirmed>:
 80120dc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80120e0:	b183      	cbz	r3, 8012104 <uxr_output_streams_confirmed+0x28>
 80120e2:	b570      	push	{r4, r5, r6, lr}
 80120e4:	4606      	mov	r6, r0
 80120e6:	f100 0518 	add.w	r5, r0, #24
 80120ea:	2400      	movs	r4, #0
 80120ec:	e000      	b.n	80120f0 <uxr_output_streams_confirmed+0x14>
 80120ee:	b140      	cbz	r0, 8012102 <uxr_output_streams_confirmed+0x26>
 80120f0:	4628      	mov	r0, r5
 80120f2:	3401      	adds	r4, #1
 80120f4:	f008 fa3c 	bl	801a570 <uxr_is_output_up_to_date>
 80120f8:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 80120fc:	3528      	adds	r5, #40	; 0x28
 80120fe:	42a3      	cmp	r3, r4
 8012100:	d8f5      	bhi.n	80120ee <uxr_output_streams_confirmed+0x12>
 8012102:	bd70      	pop	{r4, r5, r6, pc}
 8012104:	2001      	movs	r0, #1
 8012106:	4770      	bx	lr

08012108 <uxr_buffer_submessage_header>:
 8012108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801210a:	460e      	mov	r6, r1
 801210c:	2104      	movs	r1, #4
 801210e:	4604      	mov	r4, r0
 8012110:	4615      	mov	r5, r2
 8012112:	461f      	mov	r7, r3
 8012114:	f7fe fb5e 	bl	80107d4 <ucdr_align_to>
 8012118:	2301      	movs	r3, #1
 801211a:	4631      	mov	r1, r6
 801211c:	4620      	mov	r0, r4
 801211e:	ea47 0203 	orr.w	r2, r7, r3
 8012122:	7523      	strb	r3, [r4, #20]
 8012124:	462b      	mov	r3, r5
 8012126:	f000 fa29 	bl	801257c <uxr_serialize_submessage_header>
 801212a:	4620      	mov	r0, r4
 801212c:	f7fe fb68 	bl	8010800 <ucdr_buffer_remaining>
 8012130:	42a8      	cmp	r0, r5
 8012132:	bf34      	ite	cc
 8012134:	2000      	movcc	r0, #0
 8012136:	2001      	movcs	r0, #1
 8012138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801213a:	bf00      	nop

0801213c <uxr_read_submessage_header>:
 801213c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012140:	4604      	mov	r4, r0
 8012142:	460d      	mov	r5, r1
 8012144:	2104      	movs	r1, #4
 8012146:	4616      	mov	r6, r2
 8012148:	4698      	mov	r8, r3
 801214a:	f7fe fb43 	bl	80107d4 <ucdr_align_to>
 801214e:	4620      	mov	r0, r4
 8012150:	f7fe fb56 	bl	8010800 <ucdr_buffer_remaining>
 8012154:	2803      	cmp	r0, #3
 8012156:	bf8c      	ite	hi
 8012158:	2701      	movhi	r7, #1
 801215a:	2700      	movls	r7, #0
 801215c:	d802      	bhi.n	8012164 <uxr_read_submessage_header+0x28>
 801215e:	4638      	mov	r0, r7
 8012160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012164:	4633      	mov	r3, r6
 8012166:	4642      	mov	r2, r8
 8012168:	4620      	mov	r0, r4
 801216a:	4629      	mov	r1, r5
 801216c:	f000 fa1a 	bl	80125a4 <uxr_deserialize_submessage_header>
 8012170:	f898 3000 	ldrb.w	r3, [r8]
 8012174:	4638      	mov	r0, r7
 8012176:	f003 0201 	and.w	r2, r3, #1
 801217a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 801217e:	f888 3000 	strb.w	r3, [r8]
 8012182:	7522      	strb	r2, [r4, #20]
 8012184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012188 <uxr_submessage_padding>:
 8012188:	f010 0003 	ands.w	r0, r0, #3
 801218c:	bf18      	it	ne
 801218e:	f1c0 0004 	rsbne	r0, r0, #4
 8012192:	4770      	bx	lr

08012194 <uxr_millis>:
 8012194:	b510      	push	{r4, lr}
 8012196:	b084      	sub	sp, #16
 8012198:	2001      	movs	r0, #1
 801219a:	4669      	mov	r1, sp
 801219c:	f7f0 fcc4 	bl	8002b28 <clock_gettime>
 80121a0:	4908      	ldr	r1, [pc, #32]	; (80121c4 <uxr_millis+0x30>)
 80121a2:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 80121a6:	fba0 0301 	umull	r0, r3, r0, r1
 80121aa:	1900      	adds	r0, r0, r4
 80121ac:	fb01 3102 	mla	r1, r1, r2, r3
 80121b0:	4a05      	ldr	r2, [pc, #20]	; (80121c8 <uxr_millis+0x34>)
 80121b2:	f04f 0300 	mov.w	r3, #0
 80121b6:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 80121ba:	f7ee f8a9 	bl	8000310 <__aeabi_ldivmod>
 80121be:	b004      	add	sp, #16
 80121c0:	bd10      	pop	{r4, pc}
 80121c2:	bf00      	nop
 80121c4:	3b9aca00 	.word	0x3b9aca00
 80121c8:	000f4240 	.word	0x000f4240

080121cc <uxr_nanos>:
 80121cc:	b510      	push	{r4, lr}
 80121ce:	b084      	sub	sp, #16
 80121d0:	2001      	movs	r0, #1
 80121d2:	4669      	mov	r1, sp
 80121d4:	f7f0 fca8 	bl	8002b28 <clock_gettime>
 80121d8:	4a06      	ldr	r2, [pc, #24]	; (80121f4 <uxr_nanos+0x28>)
 80121da:	9800      	ldr	r0, [sp, #0]
 80121dc:	9902      	ldr	r1, [sp, #8]
 80121de:	fba0 0302 	umull	r0, r3, r0, r2
 80121e2:	9c01      	ldr	r4, [sp, #4]
 80121e4:	1840      	adds	r0, r0, r1
 80121e6:	fb02 3304 	mla	r3, r2, r4, r3
 80121ea:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 80121ee:	b004      	add	sp, #16
 80121f0:	bd10      	pop	{r4, pc}
 80121f2:	bf00      	nop
 80121f4:	3b9aca00 	.word	0x3b9aca00

080121f8 <on_full_output_buffer_fragmented>:
 80121f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80121fc:	460c      	mov	r4, r1
 80121fe:	b08a      	sub	sp, #40	; 0x28
 8012200:	4606      	mov	r6, r0
 8012202:	f891 10c1 	ldrb.w	r1, [r1, #193]	; 0xc1
 8012206:	f104 0008 	add.w	r0, r4, #8
 801220a:	f7ff ff45 	bl	8012098 <uxr_get_output_reliable_stream>
 801220e:	4605      	mov	r5, r0
 8012210:	f008 f9b8 	bl	801a584 <get_available_free_slots>
 8012214:	b968      	cbnz	r0, 8012232 <on_full_output_buffer_fragmented+0x3a>
 8012216:	4620      	mov	r0, r4
 8012218:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	; 0xb8
 801221c:	4798      	blx	r3
 801221e:	b918      	cbnz	r0, 8012228 <on_full_output_buffer_fragmented+0x30>
 8012220:	2001      	movs	r0, #1
 8012222:	b00a      	add	sp, #40	; 0x28
 8012224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012228:	4628      	mov	r0, r5
 801222a:	f008 f9ab 	bl	801a584 <get_available_free_slots>
 801222e:	2800      	cmp	r0, #0
 8012230:	d0f6      	beq.n	8012220 <on_full_output_buffer_fragmented+0x28>
 8012232:	8929      	ldrh	r1, [r5, #8]
 8012234:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8012238:	89eb      	ldrh	r3, [r5, #14]
 801223a:	7b28      	ldrb	r0, [r5, #12]
 801223c:	686f      	ldr	r7, [r5, #4]
 801223e:	1a12      	subs	r2, r2, r0
 8012240:	fbb3 f0f1 	udiv	r0, r3, r1
 8012244:	fbb7 f7f1 	udiv	r7, r7, r1
 8012248:	fb01 3110 	mls	r1, r1, r0, r3
 801224c:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 8012250:	b289      	uxth	r1, r1
 8012252:	fb07 f101 	mul.w	r1, r7, r1
 8012256:	3f04      	subs	r7, #4
 8012258:	443a      	add	r2, r7
 801225a:	3104      	adds	r1, #4
 801225c:	fa1f f882 	uxth.w	r8, r2
 8012260:	463a      	mov	r2, r7
 8012262:	eba3 0308 	sub.w	r3, r3, r8
 8012266:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
 801226a:	682b      	ldr	r3, [r5, #0]
 801226c:	4419      	add	r1, r3
 801226e:	2300      	movs	r3, #0
 8012270:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8012274:	9000      	str	r0, [sp, #0]
 8012276:	a802      	add	r0, sp, #8
 8012278:	f7fe fa7e 	bl	8010778 <ucdr_init_buffer_origin_offset>
 801227c:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 8012280:	f102 0308 	add.w	r3, r2, #8
 8012284:	42bb      	cmp	r3, r7
 8012286:	d927      	bls.n	80122d8 <on_full_output_buffer_fragmented+0xe0>
 8012288:	4642      	mov	r2, r8
 801228a:	2300      	movs	r3, #0
 801228c:	210d      	movs	r1, #13
 801228e:	a802      	add	r0, sp, #8
 8012290:	f7ff ff3a 	bl	8012108 <uxr_buffer_submessage_header>
 8012294:	8929      	ldrh	r1, [r5, #8]
 8012296:	89eb      	ldrh	r3, [r5, #14]
 8012298:	686a      	ldr	r2, [r5, #4]
 801229a:	fbb3 f0f1 	udiv	r0, r3, r1
 801229e:	fbb2 f2f1 	udiv	r2, r2, r1
 80122a2:	fb01 3310 	mls	r3, r1, r0, r3
 80122a6:	b29b      	uxth	r3, r3
 80122a8:	fb02 f303 	mul.w	r3, r2, r3
 80122ac:	682a      	ldr	r2, [r5, #0]
 80122ae:	50d7      	str	r7, [r2, r3]
 80122b0:	2101      	movs	r1, #1
 80122b2:	89e8      	ldrh	r0, [r5, #14]
 80122b4:	f008 fab8 	bl	801a828 <uxr_seq_num_add>
 80122b8:	9904      	ldr	r1, [sp, #16]
 80122ba:	9a03      	ldr	r2, [sp, #12]
 80122bc:	81e8      	strh	r0, [r5, #14]
 80122be:	4630      	mov	r0, r6
 80122c0:	1a52      	subs	r2, r2, r1
 80122c2:	f7fe fa6b 	bl	801079c <ucdr_init_buffer>
 80122c6:	4630      	mov	r0, r6
 80122c8:	4622      	mov	r2, r4
 80122ca:	490f      	ldr	r1, [pc, #60]	; (8012308 <on_full_output_buffer_fragmented+0x110>)
 80122cc:	f7fe fa3a 	bl	8010744 <ucdr_set_on_full_buffer_callback>
 80122d0:	2000      	movs	r0, #0
 80122d2:	b00a      	add	sp, #40	; 0x28
 80122d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80122d8:	b292      	uxth	r2, r2
 80122da:	2302      	movs	r3, #2
 80122dc:	210d      	movs	r1, #13
 80122de:	a802      	add	r0, sp, #8
 80122e0:	f7ff ff12 	bl	8012108 <uxr_buffer_submessage_header>
 80122e4:	8928      	ldrh	r0, [r5, #8]
 80122e6:	89eb      	ldrh	r3, [r5, #14]
 80122e8:	6869      	ldr	r1, [r5, #4]
 80122ea:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 80122ee:	fbb3 f7f0 	udiv	r7, r3, r0
 80122f2:	fbb1 f1f0 	udiv	r1, r1, r0
 80122f6:	fb00 3317 	mls	r3, r0, r7, r3
 80122fa:	3208      	adds	r2, #8
 80122fc:	b29b      	uxth	r3, r3
 80122fe:	fb01 f303 	mul.w	r3, r1, r3
 8012302:	6829      	ldr	r1, [r5, #0]
 8012304:	50ca      	str	r2, [r1, r3]
 8012306:	e7d3      	b.n	80122b0 <on_full_output_buffer_fragmented+0xb8>
 8012308:	080121f9 	.word	0x080121f9

0801230c <uxr_prepare_output_stream>:
 801230c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801230e:	b087      	sub	sp, #28
 8012310:	2707      	movs	r7, #7
 8012312:	2500      	movs	r5, #0
 8012314:	461c      	mov	r4, r3
 8012316:	4606      	mov	r6, r0
 8012318:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801231c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801231e:	e9cd 7500 	strd	r7, r5, [sp]
 8012322:	3204      	adds	r2, #4
 8012324:	f7ff fc44 	bl	8011bb0 <uxr_prepare_stream_to_write_submessage>
 8012328:	f080 0201 	eor.w	r2, r0, #1
 801232c:	b2d2      	uxtb	r2, r2
 801232e:	75a2      	strb	r2, [r4, #22]
 8012330:	b112      	cbz	r2, 8012338 <uxr_prepare_output_stream+0x2c>
 8012332:	4628      	mov	r0, r5
 8012334:	b007      	add	sp, #28
 8012336:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012338:	aa05      	add	r2, sp, #20
 801233a:	9902      	ldr	r1, [sp, #8]
 801233c:	4630      	mov	r0, r6
 801233e:	f7ff fd73 	bl	8011e28 <uxr_init_base_object_request>
 8012342:	a905      	add	r1, sp, #20
 8012344:	4605      	mov	r5, r0
 8012346:	4620      	mov	r0, r4
 8012348:	f001 f8bc 	bl	80134c4 <uxr_serialize_WRITE_DATA_Payload_Data>
 801234c:	69a6      	ldr	r6, [r4, #24]
 801234e:	69e7      	ldr	r7, [r4, #28]
 8012350:	4620      	mov	r0, r4
 8012352:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8012356:	1a52      	subs	r2, r2, r1
 8012358:	f7fe fa20 	bl	801079c <ucdr_init_buffer>
 801235c:	4620      	mov	r0, r4
 801235e:	463a      	mov	r2, r7
 8012360:	4631      	mov	r1, r6
 8012362:	f7fe f9ef 	bl	8010744 <ucdr_set_on_full_buffer_callback>
 8012366:	4628      	mov	r0, r5
 8012368:	b007      	add	sp, #28
 801236a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801236c <uxr_prepare_output_stream_fragmented>:
 801236c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012370:	b091      	sub	sp, #68	; 0x44
 8012372:	4605      	mov	r5, r0
 8012374:	3008      	adds	r0, #8
 8012376:	461e      	mov	r6, r3
 8012378:	9105      	str	r1, [sp, #20]
 801237a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801237e:	9204      	str	r2, [sp, #16]
 8012380:	f7ff fe8a 	bl	8012098 <uxr_get_output_reliable_stream>
 8012384:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8012388:	2b01      	cmp	r3, #1
 801238a:	f000 8093 	beq.w	80124b4 <uxr_prepare_output_stream_fragmented+0x148>
 801238e:	4604      	mov	r4, r0
 8012390:	2800      	cmp	r0, #0
 8012392:	f000 808f 	beq.w	80124b4 <uxr_prepare_output_stream_fragmented+0x148>
 8012396:	f008 f8f5 	bl	801a584 <get_available_free_slots>
 801239a:	2800      	cmp	r0, #0
 801239c:	f000 8085 	beq.w	80124aa <uxr_prepare_output_stream_fragmented+0x13e>
 80123a0:	8923      	ldrh	r3, [r4, #8]
 80123a2:	89e7      	ldrh	r7, [r4, #14]
 80123a4:	6862      	ldr	r2, [r4, #4]
 80123a6:	fbb7 f9f3 	udiv	r9, r7, r3
 80123aa:	fbb2 f2f3 	udiv	r2, r2, r3
 80123ae:	fb03 7919 	mls	r9, r3, r9, r7
 80123b2:	6823      	ldr	r3, [r4, #0]
 80123b4:	f1a2 0b04 	sub.w	fp, r2, #4
 80123b8:	9203      	str	r2, [sp, #12]
 80123ba:	fa1f f989 	uxth.w	r9, r9
 80123be:	fb02 f909 	mul.w	r9, r2, r9
 80123c2:	f109 0904 	add.w	r9, r9, #4
 80123c6:	4499      	add	r9, r3
 80123c8:	7b23      	ldrb	r3, [r4, #12]
 80123ca:	f859 8c04 	ldr.w	r8, [r9, #-4]
 80123ce:	4543      	cmp	r3, r8
 80123d0:	d37c      	bcc.n	80124cc <uxr_prepare_output_stream_fragmented+0x160>
 80123d2:	f1ab 0a04 	sub.w	sl, fp, #4
 80123d6:	465a      	mov	r2, fp
 80123d8:	4649      	mov	r1, r9
 80123da:	a808      	add	r0, sp, #32
 80123dc:	ebaa 0a03 	sub.w	sl, sl, r3
 80123e0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80123e2:	f8cd 8000 	str.w	r8, [sp]
 80123e6:	3308      	adds	r3, #8
 80123e8:	fa1f fa8a 	uxth.w	sl, sl
 80123ec:	9302      	str	r3, [sp, #8]
 80123ee:	2300      	movs	r3, #0
 80123f0:	f7fe f9c2 	bl	8010778 <ucdr_init_buffer_origin_offset>
 80123f4:	9b02      	ldr	r3, [sp, #8]
 80123f6:	4652      	mov	r2, sl
 80123f8:	210d      	movs	r1, #13
 80123fa:	455b      	cmp	r3, fp
 80123fc:	bf34      	ite	cc
 80123fe:	2302      	movcc	r3, #2
 8012400:	2300      	movcs	r3, #0
 8012402:	a808      	add	r0, sp, #32
 8012404:	f7ff fe80 	bl	8012108 <uxr_buffer_submessage_header>
 8012408:	8921      	ldrh	r1, [r4, #8]
 801240a:	6863      	ldr	r3, [r4, #4]
 801240c:	4638      	mov	r0, r7
 801240e:	fbb7 f2f1 	udiv	r2, r7, r1
 8012412:	fbb3 f3f1 	udiv	r3, r3, r1
 8012416:	fb01 7212 	mls	r2, r1, r2, r7
 801241a:	2101      	movs	r1, #1
 801241c:	b292      	uxth	r2, r2
 801241e:	fb02 f303 	mul.w	r3, r2, r3
 8012422:	6822      	ldr	r2, [r4, #0]
 8012424:	f842 b003 	str.w	fp, [r2, r3]
 8012428:	f008 f9fe 	bl	801a828 <uxr_seq_num_add>
 801242c:	9b03      	ldr	r3, [sp, #12]
 801242e:	f108 0104 	add.w	r1, r8, #4
 8012432:	4607      	mov	r7, r0
 8012434:	f1a3 0208 	sub.w	r2, r3, #8
 8012438:	4630      	mov	r0, r6
 801243a:	4449      	add	r1, r9
 801243c:	eba2 0208 	sub.w	r2, r2, r8
 8012440:	f7fe f9ac 	bl	801079c <ucdr_init_buffer>
 8012444:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8012446:	2107      	movs	r1, #7
 8012448:	81e7      	strh	r7, [r4, #14]
 801244a:	1d1a      	adds	r2, r3, #4
 801244c:	2300      	movs	r3, #0
 801244e:	4630      	mov	r0, r6
 8012450:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8012454:	bf28      	it	cs
 8012456:	461a      	movcs	r2, r3
 8012458:	b292      	uxth	r2, r2
 801245a:	f7ff fe55 	bl	8012108 <uxr_buffer_submessage_header>
 801245e:	aa07      	add	r2, sp, #28
 8012460:	9904      	ldr	r1, [sp, #16]
 8012462:	4628      	mov	r0, r5
 8012464:	f7ff fce0 	bl	8011e28 <uxr_init_base_object_request>
 8012468:	4604      	mov	r4, r0
 801246a:	b320      	cbz	r0, 80124b6 <uxr_prepare_output_stream_fragmented+0x14a>
 801246c:	a907      	add	r1, sp, #28
 801246e:	4630      	mov	r0, r6
 8012470:	f001 f828 	bl	80134c4 <uxr_serialize_WRITE_DATA_Payload_Data>
 8012474:	4630      	mov	r0, r6
 8012476:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 801247a:	1a52      	subs	r2, r2, r1
 801247c:	f7fe f98e 	bl	801079c <ucdr_init_buffer>
 8012480:	9b05      	ldr	r3, [sp, #20]
 8012482:	9a02      	ldr	r2, [sp, #8]
 8012484:	4630      	mov	r0, r6
 8012486:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
 801248a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801248c:	f8c5 20c4 	str.w	r2, [r5, #196]	; 0xc4
 8012490:	462a      	mov	r2, r5
 8012492:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
 8012496:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8012498:	4918      	ldr	r1, [pc, #96]	; (80124fc <uxr_prepare_output_stream_fragmented+0x190>)
 801249a:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
 801249e:	f7fe f951 	bl	8010744 <ucdr_set_on_full_buffer_callback>
 80124a2:	4620      	mov	r0, r4
 80124a4:	b011      	add	sp, #68	; 0x44
 80124a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124aa:	991c      	ldr	r1, [sp, #112]	; 0x70
 80124ac:	4628      	mov	r0, r5
 80124ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80124b0:	4798      	blx	r3
 80124b2:	b920      	cbnz	r0, 80124be <uxr_prepare_output_stream_fragmented+0x152>
 80124b4:	2400      	movs	r4, #0
 80124b6:	4620      	mov	r0, r4
 80124b8:	b011      	add	sp, #68	; 0x44
 80124ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124be:	4620      	mov	r0, r4
 80124c0:	f008 f860 	bl	801a584 <get_available_free_slots>
 80124c4:	2800      	cmp	r0, #0
 80124c6:	f47f af6b 	bne.w	80123a0 <uxr_prepare_output_stream_fragmented+0x34>
 80124ca:	e7f3      	b.n	80124b4 <uxr_prepare_output_stream_fragmented+0x148>
 80124cc:	4638      	mov	r0, r7
 80124ce:	2101      	movs	r1, #1
 80124d0:	f008 f9aa 	bl	801a828 <uxr_seq_num_add>
 80124d4:	8922      	ldrh	r2, [r4, #8]
 80124d6:	6863      	ldr	r3, [r4, #4]
 80124d8:	4607      	mov	r7, r0
 80124da:	fbb3 f9f2 	udiv	r9, r3, r2
 80124de:	fbb0 f3f2 	udiv	r3, r0, r2
 80124e2:	fb02 0313 	mls	r3, r2, r3, r0
 80124e6:	b29b      	uxth	r3, r3
 80124e8:	fb03 f909 	mul.w	r9, r3, r9
 80124ec:	6823      	ldr	r3, [r4, #0]
 80124ee:	f109 0904 	add.w	r9, r9, #4
 80124f2:	4499      	add	r9, r3
 80124f4:	7b23      	ldrb	r3, [r4, #12]
 80124f6:	f859 8c04 	ldr.w	r8, [r9, #-4]
 80124fa:	e76a      	b.n	80123d2 <uxr_prepare_output_stream_fragmented+0x66>
 80124fc:	080121f9 	.word	0x080121f9

08012500 <uxr_serialize_message_header>:
 8012500:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012502:	4616      	mov	r6, r2
 8012504:	b083      	sub	sp, #12
 8012506:	4604      	mov	r4, r0
 8012508:	460d      	mov	r5, r1
 801250a:	9301      	str	r3, [sp, #4]
 801250c:	9f08      	ldr	r7, [sp, #32]
 801250e:	f7fc fde5 	bl	800f0dc <ucdr_serialize_uint8_t>
 8012512:	4631      	mov	r1, r6
 8012514:	4620      	mov	r0, r4
 8012516:	f7fc fde1 	bl	800f0dc <ucdr_serialize_uint8_t>
 801251a:	9a01      	ldr	r2, [sp, #4]
 801251c:	2101      	movs	r1, #1
 801251e:	4620      	mov	r0, r4
 8012520:	f7fc fe88 	bl	800f234 <ucdr_serialize_endian_uint16_t>
 8012524:	062b      	lsls	r3, r5, #24
 8012526:	d501      	bpl.n	801252c <uxr_serialize_message_header+0x2c>
 8012528:	b003      	add	sp, #12
 801252a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801252c:	2204      	movs	r2, #4
 801252e:	4639      	mov	r1, r7
 8012530:	4620      	mov	r0, r4
 8012532:	b003      	add	sp, #12
 8012534:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012538:	f7fc bc2c 	b.w	800ed94 <ucdr_serialize_array_uint8_t>

0801253c <uxr_deserialize_message_header>:
 801253c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801253e:	4616      	mov	r6, r2
 8012540:	b083      	sub	sp, #12
 8012542:	4604      	mov	r4, r0
 8012544:	460d      	mov	r5, r1
 8012546:	9301      	str	r3, [sp, #4]
 8012548:	9f08      	ldr	r7, [sp, #32]
 801254a:	f7fc fddd 	bl	800f108 <ucdr_deserialize_uint8_t>
 801254e:	4631      	mov	r1, r6
 8012550:	4620      	mov	r0, r4
 8012552:	f7fc fdd9 	bl	800f108 <ucdr_deserialize_uint8_t>
 8012556:	9a01      	ldr	r2, [sp, #4]
 8012558:	2101      	movs	r1, #1
 801255a:	4620      	mov	r0, r4
 801255c:	f7fc ff5e 	bl	800f41c <ucdr_deserialize_endian_uint16_t>
 8012560:	f995 3000 	ldrsb.w	r3, [r5]
 8012564:	2b00      	cmp	r3, #0
 8012566:	da01      	bge.n	801256c <uxr_deserialize_message_header+0x30>
 8012568:	b003      	add	sp, #12
 801256a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801256c:	2204      	movs	r2, #4
 801256e:	4639      	mov	r1, r7
 8012570:	4620      	mov	r0, r4
 8012572:	b003      	add	sp, #12
 8012574:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012578:	f7fc bc70 	b.w	800ee5c <ucdr_deserialize_array_uint8_t>

0801257c <uxr_serialize_submessage_header>:
 801257c:	b530      	push	{r4, r5, lr}
 801257e:	4615      	mov	r5, r2
 8012580:	b083      	sub	sp, #12
 8012582:	4604      	mov	r4, r0
 8012584:	9301      	str	r3, [sp, #4]
 8012586:	f7fc fda9 	bl	800f0dc <ucdr_serialize_uint8_t>
 801258a:	4629      	mov	r1, r5
 801258c:	4620      	mov	r0, r4
 801258e:	f7fc fda5 	bl	800f0dc <ucdr_serialize_uint8_t>
 8012592:	9a01      	ldr	r2, [sp, #4]
 8012594:	2101      	movs	r1, #1
 8012596:	4620      	mov	r0, r4
 8012598:	b003      	add	sp, #12
 801259a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801259e:	f7fc be49 	b.w	800f234 <ucdr_serialize_endian_uint16_t>
 80125a2:	bf00      	nop

080125a4 <uxr_deserialize_submessage_header>:
 80125a4:	b530      	push	{r4, r5, lr}
 80125a6:	4615      	mov	r5, r2
 80125a8:	b083      	sub	sp, #12
 80125aa:	4604      	mov	r4, r0
 80125ac:	9301      	str	r3, [sp, #4]
 80125ae:	f7fc fdab 	bl	800f108 <ucdr_deserialize_uint8_t>
 80125b2:	4629      	mov	r1, r5
 80125b4:	4620      	mov	r0, r4
 80125b6:	f7fc fda7 	bl	800f108 <ucdr_deserialize_uint8_t>
 80125ba:	9a01      	ldr	r2, [sp, #4]
 80125bc:	2101      	movs	r1, #1
 80125be:	4620      	mov	r0, r4
 80125c0:	b003      	add	sp, #12
 80125c2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80125c6:	f7fc bf29 	b.w	800f41c <ucdr_deserialize_endian_uint16_t>
 80125ca:	bf00      	nop

080125cc <uxr_serialize_CLIENT_Representation>:
 80125cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80125d0:	2204      	movs	r2, #4
 80125d2:	460e      	mov	r6, r1
 80125d4:	4605      	mov	r5, r0
 80125d6:	f7fc fbdd 	bl	800ed94 <ucdr_serialize_array_uint8_t>
 80125da:	4607      	mov	r7, r0
 80125dc:	2202      	movs	r2, #2
 80125de:	1d31      	adds	r1, r6, #4
 80125e0:	4628      	mov	r0, r5
 80125e2:	f7fc fbd7 	bl	800ed94 <ucdr_serialize_array_uint8_t>
 80125e6:	4038      	ands	r0, r7
 80125e8:	2202      	movs	r2, #2
 80125ea:	1db1      	adds	r1, r6, #6
 80125ec:	b2c7      	uxtb	r7, r0
 80125ee:	4628      	mov	r0, r5
 80125f0:	f7fc fbd0 	bl	800ed94 <ucdr_serialize_array_uint8_t>
 80125f4:	2204      	movs	r2, #4
 80125f6:	4007      	ands	r7, r0
 80125f8:	f106 0108 	add.w	r1, r6, #8
 80125fc:	4628      	mov	r0, r5
 80125fe:	f7fc fbc9 	bl	800ed94 <ucdr_serialize_array_uint8_t>
 8012602:	4007      	ands	r7, r0
 8012604:	7b31      	ldrb	r1, [r6, #12]
 8012606:	4628      	mov	r0, r5
 8012608:	f7fc fd68 	bl	800f0dc <ucdr_serialize_uint8_t>
 801260c:	7b71      	ldrb	r1, [r6, #13]
 801260e:	4007      	ands	r7, r0
 8012610:	4628      	mov	r0, r5
 8012612:	f7fc fd35 	bl	800f080 <ucdr_serialize_bool>
 8012616:	7b73      	ldrb	r3, [r6, #13]
 8012618:	ea07 0800 	and.w	r8, r7, r0
 801261c:	b93b      	cbnz	r3, 801262e <uxr_serialize_CLIENT_Representation+0x62>
 801261e:	8bb1      	ldrh	r1, [r6, #28]
 8012620:	4628      	mov	r0, r5
 8012622:	f7fc fd87 	bl	800f134 <ucdr_serialize_uint16_t>
 8012626:	ea08 0000 	and.w	r0, r8, r0
 801262a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801262e:	6931      	ldr	r1, [r6, #16]
 8012630:	4628      	mov	r0, r5
 8012632:	f7fc ff69 	bl	800f508 <ucdr_serialize_uint32_t>
 8012636:	6933      	ldr	r3, [r6, #16]
 8012638:	b1e3      	cbz	r3, 8012674 <uxr_serialize_CLIENT_Representation+0xa8>
 801263a:	b1c0      	cbz	r0, 801266e <uxr_serialize_CLIENT_Representation+0xa2>
 801263c:	4637      	mov	r7, r6
 801263e:	f04f 0900 	mov.w	r9, #0
 8012642:	e000      	b.n	8012646 <uxr_serialize_CLIENT_Representation+0x7a>
 8012644:	b19c      	cbz	r4, 801266e <uxr_serialize_CLIENT_Representation+0xa2>
 8012646:	6979      	ldr	r1, [r7, #20]
 8012648:	4628      	mov	r0, r5
 801264a:	f007 f99b 	bl	8019984 <ucdr_serialize_string>
 801264e:	69b9      	ldr	r1, [r7, #24]
 8012650:	4604      	mov	r4, r0
 8012652:	4628      	mov	r0, r5
 8012654:	f007 f996 	bl	8019984 <ucdr_serialize_string>
 8012658:	f109 0901 	add.w	r9, r9, #1
 801265c:	6933      	ldr	r3, [r6, #16]
 801265e:	4004      	ands	r4, r0
 8012660:	3708      	adds	r7, #8
 8012662:	4599      	cmp	r9, r3
 8012664:	b2e4      	uxtb	r4, r4
 8012666:	d3ed      	bcc.n	8012644 <uxr_serialize_CLIENT_Representation+0x78>
 8012668:	ea08 0804 	and.w	r8, r8, r4
 801266c:	e7d7      	b.n	801261e <uxr_serialize_CLIENT_Representation+0x52>
 801266e:	f04f 0800 	mov.w	r8, #0
 8012672:	e7d4      	b.n	801261e <uxr_serialize_CLIENT_Representation+0x52>
 8012674:	ea08 0800 	and.w	r8, r8, r0
 8012678:	e7d1      	b.n	801261e <uxr_serialize_CLIENT_Representation+0x52>
 801267a:	bf00      	nop

0801267c <uxr_deserialize_CLIENT_Representation>:
 801267c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012680:	2204      	movs	r2, #4
 8012682:	460c      	mov	r4, r1
 8012684:	4605      	mov	r5, r0
 8012686:	f7fc fbe9 	bl	800ee5c <ucdr_deserialize_array_uint8_t>
 801268a:	4607      	mov	r7, r0
 801268c:	2202      	movs	r2, #2
 801268e:	1d21      	adds	r1, r4, #4
 8012690:	4628      	mov	r0, r5
 8012692:	f7fc fbe3 	bl	800ee5c <ucdr_deserialize_array_uint8_t>
 8012696:	4038      	ands	r0, r7
 8012698:	2202      	movs	r2, #2
 801269a:	1da1      	adds	r1, r4, #6
 801269c:	b2c6      	uxtb	r6, r0
 801269e:	4628      	mov	r0, r5
 80126a0:	f7fc fbdc 	bl	800ee5c <ucdr_deserialize_array_uint8_t>
 80126a4:	2204      	movs	r2, #4
 80126a6:	4006      	ands	r6, r0
 80126a8:	f104 0108 	add.w	r1, r4, #8
 80126ac:	4628      	mov	r0, r5
 80126ae:	f7fc fbd5 	bl	800ee5c <ucdr_deserialize_array_uint8_t>
 80126b2:	4006      	ands	r6, r0
 80126b4:	f104 010c 	add.w	r1, r4, #12
 80126b8:	4628      	mov	r0, r5
 80126ba:	f7fc fd25 	bl	800f108 <ucdr_deserialize_uint8_t>
 80126be:	f104 010d 	add.w	r1, r4, #13
 80126c2:	ea06 0700 	and.w	r7, r6, r0
 80126c6:	4628      	mov	r0, r5
 80126c8:	f7fc fcf0 	bl	800f0ac <ucdr_deserialize_bool>
 80126cc:	7b63      	ldrb	r3, [r4, #13]
 80126ce:	4007      	ands	r7, r0
 80126d0:	b93b      	cbnz	r3, 80126e2 <uxr_deserialize_CLIENT_Representation+0x66>
 80126d2:	f104 011c 	add.w	r1, r4, #28
 80126d6:	4628      	mov	r0, r5
 80126d8:	f7fc fe2c 	bl	800f334 <ucdr_deserialize_uint16_t>
 80126dc:	4038      	ands	r0, r7
 80126de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80126e2:	f104 0110 	add.w	r1, r4, #16
 80126e6:	4628      	mov	r0, r5
 80126e8:	f7fd f83e 	bl	800f768 <ucdr_deserialize_uint32_t>
 80126ec:	6923      	ldr	r3, [r4, #16]
 80126ee:	2b01      	cmp	r3, #1
 80126f0:	d903      	bls.n	80126fa <uxr_deserialize_CLIENT_Representation+0x7e>
 80126f2:	2301      	movs	r3, #1
 80126f4:	2700      	movs	r7, #0
 80126f6:	75ab      	strb	r3, [r5, #22]
 80126f8:	e7eb      	b.n	80126d2 <uxr_deserialize_CLIENT_Representation+0x56>
 80126fa:	b30b      	cbz	r3, 8012740 <uxr_deserialize_CLIENT_Representation+0xc4>
 80126fc:	b1f0      	cbz	r0, 801273c <uxr_deserialize_CLIENT_Representation+0xc0>
 80126fe:	46a0      	mov	r8, r4
 8012700:	f04f 0900 	mov.w	r9, #0
 8012704:	e000      	b.n	8012708 <uxr_deserialize_CLIENT_Representation+0x8c>
 8012706:	b1ce      	cbz	r6, 801273c <uxr_deserialize_CLIENT_Representation+0xc0>
 8012708:	f8d8 1014 	ldr.w	r1, [r8, #20]
 801270c:	f108 0808 	add.w	r8, r8, #8
 8012710:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012714:	4628      	mov	r0, r5
 8012716:	f007 f945 	bl	80199a4 <ucdr_deserialize_string>
 801271a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801271e:	4606      	mov	r6, r0
 8012720:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012724:	4628      	mov	r0, r5
 8012726:	f109 0901 	add.w	r9, r9, #1
 801272a:	f007 f93b 	bl	80199a4 <ucdr_deserialize_string>
 801272e:	6923      	ldr	r3, [r4, #16]
 8012730:	4006      	ands	r6, r0
 8012732:	4599      	cmp	r9, r3
 8012734:	b2f6      	uxtb	r6, r6
 8012736:	d3e6      	bcc.n	8012706 <uxr_deserialize_CLIENT_Representation+0x8a>
 8012738:	4037      	ands	r7, r6
 801273a:	e7ca      	b.n	80126d2 <uxr_deserialize_CLIENT_Representation+0x56>
 801273c:	2700      	movs	r7, #0
 801273e:	e7c8      	b.n	80126d2 <uxr_deserialize_CLIENT_Representation+0x56>
 8012740:	4007      	ands	r7, r0
 8012742:	e7c6      	b.n	80126d2 <uxr_deserialize_CLIENT_Representation+0x56>

08012744 <uxr_serialize_AGENT_Representation>:
 8012744:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012748:	2204      	movs	r2, #4
 801274a:	460f      	mov	r7, r1
 801274c:	4605      	mov	r5, r0
 801274e:	f7fc fb21 	bl	800ed94 <ucdr_serialize_array_uint8_t>
 8012752:	4604      	mov	r4, r0
 8012754:	2202      	movs	r2, #2
 8012756:	1d39      	adds	r1, r7, #4
 8012758:	4628      	mov	r0, r5
 801275a:	f7fc fb1b 	bl	800ed94 <ucdr_serialize_array_uint8_t>
 801275e:	4020      	ands	r0, r4
 8012760:	2202      	movs	r2, #2
 8012762:	1db9      	adds	r1, r7, #6
 8012764:	b2c4      	uxtb	r4, r0
 8012766:	4628      	mov	r0, r5
 8012768:	f7fc fb14 	bl	800ed94 <ucdr_serialize_array_uint8_t>
 801276c:	7a39      	ldrb	r1, [r7, #8]
 801276e:	4004      	ands	r4, r0
 8012770:	4628      	mov	r0, r5
 8012772:	f7fc fc85 	bl	800f080 <ucdr_serialize_bool>
 8012776:	7a3b      	ldrb	r3, [r7, #8]
 8012778:	ea00 0804 	and.w	r8, r0, r4
 801277c:	b913      	cbnz	r3, 8012784 <uxr_serialize_AGENT_Representation+0x40>
 801277e:	4640      	mov	r0, r8
 8012780:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012784:	68f9      	ldr	r1, [r7, #12]
 8012786:	4628      	mov	r0, r5
 8012788:	f7fc febe 	bl	800f508 <ucdr_serialize_uint32_t>
 801278c:	68fb      	ldr	r3, [r7, #12]
 801278e:	b303      	cbz	r3, 80127d2 <uxr_serialize_AGENT_Representation+0x8e>
 8012790:	b1d0      	cbz	r0, 80127c8 <uxr_serialize_AGENT_Representation+0x84>
 8012792:	463e      	mov	r6, r7
 8012794:	f04f 0900 	mov.w	r9, #0
 8012798:	e000      	b.n	801279c <uxr_serialize_AGENT_Representation+0x58>
 801279a:	b1ac      	cbz	r4, 80127c8 <uxr_serialize_AGENT_Representation+0x84>
 801279c:	6931      	ldr	r1, [r6, #16]
 801279e:	4628      	mov	r0, r5
 80127a0:	f007 f8f0 	bl	8019984 <ucdr_serialize_string>
 80127a4:	6971      	ldr	r1, [r6, #20]
 80127a6:	4604      	mov	r4, r0
 80127a8:	4628      	mov	r0, r5
 80127aa:	f007 f8eb 	bl	8019984 <ucdr_serialize_string>
 80127ae:	f109 0901 	add.w	r9, r9, #1
 80127b2:	68fb      	ldr	r3, [r7, #12]
 80127b4:	4004      	ands	r4, r0
 80127b6:	3608      	adds	r6, #8
 80127b8:	4599      	cmp	r9, r3
 80127ba:	b2e4      	uxtb	r4, r4
 80127bc:	d3ed      	bcc.n	801279a <uxr_serialize_AGENT_Representation+0x56>
 80127be:	ea08 0804 	and.w	r8, r8, r4
 80127c2:	4640      	mov	r0, r8
 80127c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80127c8:	f04f 0800 	mov.w	r8, #0
 80127cc:	4640      	mov	r0, r8
 80127ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80127d2:	ea08 0800 	and.w	r8, r8, r0
 80127d6:	e7d2      	b.n	801277e <uxr_serialize_AGENT_Representation+0x3a>

080127d8 <uxr_serialize_DATAWRITER_Representation>:
 80127d8:	b570      	push	{r4, r5, r6, lr}
 80127da:	460d      	mov	r5, r1
 80127dc:	7809      	ldrb	r1, [r1, #0]
 80127de:	4606      	mov	r6, r0
 80127e0:	f7fc fc7c 	bl	800f0dc <ucdr_serialize_uint8_t>
 80127e4:	4604      	mov	r4, r0
 80127e6:	b130      	cbz	r0, 80127f6 <uxr_serialize_DATAWRITER_Representation+0x1e>
 80127e8:	782b      	ldrb	r3, [r5, #0]
 80127ea:	2b02      	cmp	r3, #2
 80127ec:	d00c      	beq.n	8012808 <uxr_serialize_DATAWRITER_Representation+0x30>
 80127ee:	2b03      	cmp	r3, #3
 80127f0:	d010      	beq.n	8012814 <uxr_serialize_DATAWRITER_Representation+0x3c>
 80127f2:	2b01      	cmp	r3, #1
 80127f4:	d008      	beq.n	8012808 <uxr_serialize_DATAWRITER_Representation+0x30>
 80127f6:	2202      	movs	r2, #2
 80127f8:	f505 7102 	add.w	r1, r5, #520	; 0x208
 80127fc:	4630      	mov	r0, r6
 80127fe:	f7fc fac9 	bl	800ed94 <ucdr_serialize_array_uint8_t>
 8012802:	4020      	ands	r0, r4
 8012804:	b2c0      	uxtb	r0, r0
 8012806:	bd70      	pop	{r4, r5, r6, pc}
 8012808:	6869      	ldr	r1, [r5, #4]
 801280a:	4630      	mov	r0, r6
 801280c:	f007 f8ba 	bl	8019984 <ucdr_serialize_string>
 8012810:	4604      	mov	r4, r0
 8012812:	e7f0      	b.n	80127f6 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8012814:	4629      	mov	r1, r5
 8012816:	4630      	mov	r0, r6
 8012818:	f851 2f04 	ldr.w	r2, [r1, #4]!
 801281c:	3104      	adds	r1, #4
 801281e:	f007 f885 	bl	801992c <ucdr_serialize_sequence_uint8_t>
 8012822:	4604      	mov	r4, r0
 8012824:	e7e7      	b.n	80127f6 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8012826:	bf00      	nop

08012828 <uxr_serialize_ObjectVariant.part.0>:
 8012828:	b570      	push	{r4, r5, r6, lr}
 801282a:	780b      	ldrb	r3, [r1, #0]
 801282c:	460c      	mov	r4, r1
 801282e:	4605      	mov	r5, r0
 8012830:	3b01      	subs	r3, #1
 8012832:	2b0d      	cmp	r3, #13
 8012834:	d854      	bhi.n	80128e0 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8012836:	e8df f003 	tbb	[pc, r3]
 801283a:	0730      	.short	0x0730
 801283c:	07071b1b 	.word	0x07071b1b
 8012840:	0c530707 	.word	0x0c530707
 8012844:	494e0c0c 	.word	0x494e0c0c
 8012848:	3104      	adds	r1, #4
 801284a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801284e:	f7ff bfc3 	b.w	80127d8 <uxr_serialize_DATAWRITER_Representation>
 8012852:	7909      	ldrb	r1, [r1, #4]
 8012854:	f7fc fc42 	bl	800f0dc <ucdr_serialize_uint8_t>
 8012858:	b1e8      	cbz	r0, 8012896 <uxr_serialize_ObjectVariant.part.0+0x6e>
 801285a:	7923      	ldrb	r3, [r4, #4]
 801285c:	2b01      	cmp	r3, #1
 801285e:	d001      	beq.n	8012864 <uxr_serialize_ObjectVariant.part.0+0x3c>
 8012860:	2b02      	cmp	r3, #2
 8012862:	d13d      	bne.n	80128e0 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8012864:	68a1      	ldr	r1, [r4, #8]
 8012866:	4628      	mov	r0, r5
 8012868:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801286c:	f007 b88a 	b.w	8019984 <ucdr_serialize_string>
 8012870:	7909      	ldrb	r1, [r1, #4]
 8012872:	f7fc fc33 	bl	800f0dc <ucdr_serialize_uint8_t>
 8012876:	4606      	mov	r6, r0
 8012878:	b120      	cbz	r0, 8012884 <uxr_serialize_ObjectVariant.part.0+0x5c>
 801287a:	7923      	ldrb	r3, [r4, #4]
 801287c:	2b02      	cmp	r3, #2
 801287e:	d039      	beq.n	80128f4 <uxr_serialize_ObjectVariant.part.0+0xcc>
 8012880:	2b03      	cmp	r3, #3
 8012882:	d02f      	beq.n	80128e4 <uxr_serialize_ObjectVariant.part.0+0xbc>
 8012884:	2202      	movs	r2, #2
 8012886:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 801288a:	4628      	mov	r0, r5
 801288c:	f7fc fa82 	bl	800ed94 <ucdr_serialize_array_uint8_t>
 8012890:	4030      	ands	r0, r6
 8012892:	b2c0      	uxtb	r0, r0
 8012894:	bd70      	pop	{r4, r5, r6, pc}
 8012896:	2000      	movs	r0, #0
 8012898:	bd70      	pop	{r4, r5, r6, pc}
 801289a:	7909      	ldrb	r1, [r1, #4]
 801289c:	f7fc fc1e 	bl	800f0dc <ucdr_serialize_uint8_t>
 80128a0:	4606      	mov	r6, r0
 80128a2:	b158      	cbz	r0, 80128bc <uxr_serialize_ObjectVariant.part.0+0x94>
 80128a4:	7923      	ldrb	r3, [r4, #4]
 80128a6:	2b02      	cmp	r3, #2
 80128a8:	d003      	beq.n	80128b2 <uxr_serialize_ObjectVariant.part.0+0x8a>
 80128aa:	2b03      	cmp	r3, #3
 80128ac:	d028      	beq.n	8012900 <uxr_serialize_ObjectVariant.part.0+0xd8>
 80128ae:	2b01      	cmp	r3, #1
 80128b0:	d104      	bne.n	80128bc <uxr_serialize_ObjectVariant.part.0+0x94>
 80128b2:	68a1      	ldr	r1, [r4, #8]
 80128b4:	4628      	mov	r0, r5
 80128b6:	f007 f865 	bl	8019984 <ucdr_serialize_string>
 80128ba:	4606      	mov	r6, r0
 80128bc:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	; 0x20c
 80128c0:	4628      	mov	r0, r5
 80128c2:	f7fd f947 	bl	800fb54 <ucdr_serialize_int16_t>
 80128c6:	4030      	ands	r0, r6
 80128c8:	b2c0      	uxtb	r0, r0
 80128ca:	bd70      	pop	{r4, r5, r6, pc}
 80128cc:	3104      	adds	r1, #4
 80128ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80128d2:	f7ff be7b 	b.w	80125cc <uxr_serialize_CLIENT_Representation>
 80128d6:	3104      	adds	r1, #4
 80128d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80128dc:	f7ff bf32 	b.w	8012744 <uxr_serialize_AGENT_Representation>
 80128e0:	2001      	movs	r0, #1
 80128e2:	bd70      	pop	{r4, r5, r6, pc}
 80128e4:	68a2      	ldr	r2, [r4, #8]
 80128e6:	f104 010c 	add.w	r1, r4, #12
 80128ea:	4628      	mov	r0, r5
 80128ec:	f007 f81e 	bl	801992c <ucdr_serialize_sequence_uint8_t>
 80128f0:	4606      	mov	r6, r0
 80128f2:	e7c7      	b.n	8012884 <uxr_serialize_ObjectVariant.part.0+0x5c>
 80128f4:	68a1      	ldr	r1, [r4, #8]
 80128f6:	4628      	mov	r0, r5
 80128f8:	f007 f844 	bl	8019984 <ucdr_serialize_string>
 80128fc:	4606      	mov	r6, r0
 80128fe:	e7c1      	b.n	8012884 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8012900:	68a2      	ldr	r2, [r4, #8]
 8012902:	f104 010c 	add.w	r1, r4, #12
 8012906:	4628      	mov	r0, r5
 8012908:	f007 f810 	bl	801992c <ucdr_serialize_sequence_uint8_t>
 801290c:	4606      	mov	r6, r0
 801290e:	e7d5      	b.n	80128bc <uxr_serialize_ObjectVariant.part.0+0x94>

08012910 <uxr_deserialize_DATAWRITER_Representation>:
 8012910:	b570      	push	{r4, r5, r6, lr}
 8012912:	4606      	mov	r6, r0
 8012914:	460d      	mov	r5, r1
 8012916:	f7fc fbf7 	bl	800f108 <ucdr_deserialize_uint8_t>
 801291a:	4604      	mov	r4, r0
 801291c:	b130      	cbz	r0, 801292c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801291e:	782b      	ldrb	r3, [r5, #0]
 8012920:	2b02      	cmp	r3, #2
 8012922:	d00c      	beq.n	801293e <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8012924:	2b03      	cmp	r3, #3
 8012926:	d012      	beq.n	801294e <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8012928:	2b01      	cmp	r3, #1
 801292a:	d008      	beq.n	801293e <uxr_deserialize_DATAWRITER_Representation+0x2e>
 801292c:	2202      	movs	r2, #2
 801292e:	f505 7102 	add.w	r1, r5, #520	; 0x208
 8012932:	4630      	mov	r0, r6
 8012934:	f7fc fa92 	bl	800ee5c <ucdr_deserialize_array_uint8_t>
 8012938:	4020      	ands	r0, r4
 801293a:	b2c0      	uxtb	r0, r0
 801293c:	bd70      	pop	{r4, r5, r6, pc}
 801293e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012942:	6869      	ldr	r1, [r5, #4]
 8012944:	4630      	mov	r0, r6
 8012946:	f007 f82d 	bl	80199a4 <ucdr_deserialize_string>
 801294a:	4604      	mov	r4, r0
 801294c:	e7ee      	b.n	801292c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801294e:	1d2b      	adds	r3, r5, #4
 8012950:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012954:	f105 0108 	add.w	r1, r5, #8
 8012958:	4630      	mov	r0, r6
 801295a:	f006 fff9 	bl	8019950 <ucdr_deserialize_sequence_uint8_t>
 801295e:	4604      	mov	r4, r0
 8012960:	e7e4      	b.n	801292c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8012962:	bf00      	nop

08012964 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8012964:	b570      	push	{r4, r5, r6, lr}
 8012966:	460d      	mov	r5, r1
 8012968:	7809      	ldrb	r1, [r1, #0]
 801296a:	4606      	mov	r6, r0
 801296c:	f7fc fb88 	bl	800f080 <ucdr_serialize_bool>
 8012970:	782b      	ldrb	r3, [r5, #0]
 8012972:	4604      	mov	r4, r0
 8012974:	b94b      	cbnz	r3, 801298a <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8012976:	7a29      	ldrb	r1, [r5, #8]
 8012978:	4630      	mov	r0, r6
 801297a:	f7fc fb81 	bl	800f080 <ucdr_serialize_bool>
 801297e:	7a2b      	ldrb	r3, [r5, #8]
 8012980:	4004      	ands	r4, r0
 8012982:	b2e4      	uxtb	r4, r4
 8012984:	b943      	cbnz	r3, 8012998 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8012986:	4620      	mov	r0, r4
 8012988:	bd70      	pop	{r4, r5, r6, pc}
 801298a:	6869      	ldr	r1, [r5, #4]
 801298c:	4630      	mov	r0, r6
 801298e:	f006 fff9 	bl	8019984 <ucdr_serialize_string>
 8012992:	4004      	ands	r4, r0
 8012994:	b2e4      	uxtb	r4, r4
 8012996:	e7ee      	b.n	8012976 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8012998:	68e9      	ldr	r1, [r5, #12]
 801299a:	4630      	mov	r0, r6
 801299c:	f006 fff2 	bl	8019984 <ucdr_serialize_string>
 80129a0:	4004      	ands	r4, r0
 80129a2:	4620      	mov	r0, r4
 80129a4:	bd70      	pop	{r4, r5, r6, pc}
 80129a6:	bf00      	nop

080129a8 <uxr_serialize_OBJK_Topic_Binary>:
 80129a8:	b570      	push	{r4, r5, r6, lr}
 80129aa:	460d      	mov	r5, r1
 80129ac:	4606      	mov	r6, r0
 80129ae:	6809      	ldr	r1, [r1, #0]
 80129b0:	f006 ffe8 	bl	8019984 <ucdr_serialize_string>
 80129b4:	4604      	mov	r4, r0
 80129b6:	7929      	ldrb	r1, [r5, #4]
 80129b8:	4630      	mov	r0, r6
 80129ba:	f7fc fb61 	bl	800f080 <ucdr_serialize_bool>
 80129be:	792b      	ldrb	r3, [r5, #4]
 80129c0:	4004      	ands	r4, r0
 80129c2:	b2e4      	uxtb	r4, r4
 80129c4:	b943      	cbnz	r3, 80129d8 <uxr_serialize_OBJK_Topic_Binary+0x30>
 80129c6:	7b29      	ldrb	r1, [r5, #12]
 80129c8:	4630      	mov	r0, r6
 80129ca:	f7fc fb59 	bl	800f080 <ucdr_serialize_bool>
 80129ce:	7b2b      	ldrb	r3, [r5, #12]
 80129d0:	4004      	ands	r4, r0
 80129d2:	b93b      	cbnz	r3, 80129e4 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 80129d4:	4620      	mov	r0, r4
 80129d6:	bd70      	pop	{r4, r5, r6, pc}
 80129d8:	68a9      	ldr	r1, [r5, #8]
 80129da:	4630      	mov	r0, r6
 80129dc:	f006 ffd2 	bl	8019984 <ucdr_serialize_string>
 80129e0:	4004      	ands	r4, r0
 80129e2:	e7f0      	b.n	80129c6 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 80129e4:	6929      	ldr	r1, [r5, #16]
 80129e6:	4630      	mov	r0, r6
 80129e8:	f006 ffcc 	bl	8019984 <ucdr_serialize_string>
 80129ec:	4004      	ands	r4, r0
 80129ee:	b2e4      	uxtb	r4, r4
 80129f0:	4620      	mov	r0, r4
 80129f2:	bd70      	pop	{r4, r5, r6, pc}

080129f4 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 80129f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80129f8:	460c      	mov	r4, r1
 80129fa:	7809      	ldrb	r1, [r1, #0]
 80129fc:	4606      	mov	r6, r0
 80129fe:	f7fc fb3f 	bl	800f080 <ucdr_serialize_bool>
 8012a02:	7823      	ldrb	r3, [r4, #0]
 8012a04:	4605      	mov	r5, r0
 8012a06:	b96b      	cbnz	r3, 8012a24 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8012a08:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8012a0c:	4630      	mov	r0, r6
 8012a0e:	f7fc fb37 	bl	800f080 <ucdr_serialize_bool>
 8012a12:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8012a16:	4005      	ands	r5, r0
 8012a18:	b2ed      	uxtb	r5, r5
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	d169      	bne.n	8012af2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 8012a1e:	4628      	mov	r0, r5
 8012a20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a24:	6861      	ldr	r1, [r4, #4]
 8012a26:	4630      	mov	r0, r6
 8012a28:	f7fc fd6e 	bl	800f508 <ucdr_serialize_uint32_t>
 8012a2c:	6863      	ldr	r3, [r4, #4]
 8012a2e:	2b00      	cmp	r3, #0
 8012a30:	d06b      	beq.n	8012b0a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 8012a32:	2800      	cmp	r0, #0
 8012a34:	d067      	beq.n	8012b06 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012a36:	68a1      	ldr	r1, [r4, #8]
 8012a38:	4630      	mov	r0, r6
 8012a3a:	f006 ffa3 	bl	8019984 <ucdr_serialize_string>
 8012a3e:	6863      	ldr	r3, [r4, #4]
 8012a40:	2b01      	cmp	r3, #1
 8012a42:	d953      	bls.n	8012aec <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012a44:	2800      	cmp	r0, #0
 8012a46:	d05e      	beq.n	8012b06 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012a48:	68e1      	ldr	r1, [r4, #12]
 8012a4a:	4630      	mov	r0, r6
 8012a4c:	f006 ff9a 	bl	8019984 <ucdr_serialize_string>
 8012a50:	6863      	ldr	r3, [r4, #4]
 8012a52:	2b02      	cmp	r3, #2
 8012a54:	d94a      	bls.n	8012aec <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012a56:	2800      	cmp	r0, #0
 8012a58:	d055      	beq.n	8012b06 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012a5a:	6921      	ldr	r1, [r4, #16]
 8012a5c:	4630      	mov	r0, r6
 8012a5e:	f006 ff91 	bl	8019984 <ucdr_serialize_string>
 8012a62:	6863      	ldr	r3, [r4, #4]
 8012a64:	2b03      	cmp	r3, #3
 8012a66:	d941      	bls.n	8012aec <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012a68:	2800      	cmp	r0, #0
 8012a6a:	d04c      	beq.n	8012b06 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012a6c:	6961      	ldr	r1, [r4, #20]
 8012a6e:	4630      	mov	r0, r6
 8012a70:	f006 ff88 	bl	8019984 <ucdr_serialize_string>
 8012a74:	6863      	ldr	r3, [r4, #4]
 8012a76:	2b04      	cmp	r3, #4
 8012a78:	d938      	bls.n	8012aec <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012a7a:	2800      	cmp	r0, #0
 8012a7c:	d043      	beq.n	8012b06 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012a7e:	69a1      	ldr	r1, [r4, #24]
 8012a80:	4630      	mov	r0, r6
 8012a82:	f006 ff7f 	bl	8019984 <ucdr_serialize_string>
 8012a86:	6863      	ldr	r3, [r4, #4]
 8012a88:	2b05      	cmp	r3, #5
 8012a8a:	d92f      	bls.n	8012aec <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012a8c:	2800      	cmp	r0, #0
 8012a8e:	d03a      	beq.n	8012b06 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012a90:	69e1      	ldr	r1, [r4, #28]
 8012a92:	4630      	mov	r0, r6
 8012a94:	f006 ff76 	bl	8019984 <ucdr_serialize_string>
 8012a98:	6863      	ldr	r3, [r4, #4]
 8012a9a:	2b06      	cmp	r3, #6
 8012a9c:	d926      	bls.n	8012aec <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012a9e:	b390      	cbz	r0, 8012b06 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012aa0:	6a21      	ldr	r1, [r4, #32]
 8012aa2:	4630      	mov	r0, r6
 8012aa4:	f006 ff6e 	bl	8019984 <ucdr_serialize_string>
 8012aa8:	6863      	ldr	r3, [r4, #4]
 8012aaa:	2b07      	cmp	r3, #7
 8012aac:	d91e      	bls.n	8012aec <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012aae:	b350      	cbz	r0, 8012b06 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012ab0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8012ab2:	4630      	mov	r0, r6
 8012ab4:	f006 ff66 	bl	8019984 <ucdr_serialize_string>
 8012ab8:	6863      	ldr	r3, [r4, #4]
 8012aba:	2b08      	cmp	r3, #8
 8012abc:	d916      	bls.n	8012aec <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012abe:	b310      	cbz	r0, 8012b06 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012ac0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8012ac2:	4630      	mov	r0, r6
 8012ac4:	f006 ff5e 	bl	8019984 <ucdr_serialize_string>
 8012ac8:	6863      	ldr	r3, [r4, #4]
 8012aca:	2b09      	cmp	r3, #9
 8012acc:	d90e      	bls.n	8012aec <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012ace:	b1d0      	cbz	r0, 8012b06 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012ad0:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8012ad4:	2709      	movs	r7, #9
 8012ad6:	e000      	b.n	8012ada <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8012ad8:	b1a8      	cbz	r0, 8012b06 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012ada:	f858 1b04 	ldr.w	r1, [r8], #4
 8012ade:	4630      	mov	r0, r6
 8012ae0:	f006 ff50 	bl	8019984 <ucdr_serialize_string>
 8012ae4:	3701      	adds	r7, #1
 8012ae6:	6862      	ldr	r2, [r4, #4]
 8012ae8:	4297      	cmp	r7, r2
 8012aea:	d3f5      	bcc.n	8012ad8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8012aec:	4005      	ands	r5, r0
 8012aee:	b2ed      	uxtb	r5, r5
 8012af0:	e78a      	b.n	8012a08 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8012af2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8012af4:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8012af8:	4630      	mov	r0, r6
 8012afa:	f006 ff17 	bl	801992c <ucdr_serialize_sequence_uint8_t>
 8012afe:	4005      	ands	r5, r0
 8012b00:	4628      	mov	r0, r5
 8012b02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b06:	2500      	movs	r5, #0
 8012b08:	e77e      	b.n	8012a08 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8012b0a:	4028      	ands	r0, r5
 8012b0c:	b2c5      	uxtb	r5, r0
 8012b0e:	e77b      	b.n	8012a08 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08012b10 <uxr_serialize_OBJK_Publisher_Binary>:
 8012b10:	b570      	push	{r4, r5, r6, lr}
 8012b12:	460d      	mov	r5, r1
 8012b14:	7809      	ldrb	r1, [r1, #0]
 8012b16:	4606      	mov	r6, r0
 8012b18:	f7fc fab2 	bl	800f080 <ucdr_serialize_bool>
 8012b1c:	782b      	ldrb	r3, [r5, #0]
 8012b1e:	4604      	mov	r4, r0
 8012b20:	b94b      	cbnz	r3, 8012b36 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8012b22:	7a29      	ldrb	r1, [r5, #8]
 8012b24:	4630      	mov	r0, r6
 8012b26:	f7fc faab 	bl	800f080 <ucdr_serialize_bool>
 8012b2a:	7a2b      	ldrb	r3, [r5, #8]
 8012b2c:	4004      	ands	r4, r0
 8012b2e:	b2e4      	uxtb	r4, r4
 8012b30:	b943      	cbnz	r3, 8012b44 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8012b32:	4620      	mov	r0, r4
 8012b34:	bd70      	pop	{r4, r5, r6, pc}
 8012b36:	6869      	ldr	r1, [r5, #4]
 8012b38:	4630      	mov	r0, r6
 8012b3a:	f006 ff23 	bl	8019984 <ucdr_serialize_string>
 8012b3e:	4004      	ands	r4, r0
 8012b40:	b2e4      	uxtb	r4, r4
 8012b42:	e7ee      	b.n	8012b22 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8012b44:	f105 010c 	add.w	r1, r5, #12
 8012b48:	4630      	mov	r0, r6
 8012b4a:	f7ff ff53 	bl	80129f4 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 8012b4e:	4004      	ands	r4, r0
 8012b50:	4620      	mov	r0, r4
 8012b52:	bd70      	pop	{r4, r5, r6, pc}

08012b54 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 8012b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b58:	460c      	mov	r4, r1
 8012b5a:	7809      	ldrb	r1, [r1, #0]
 8012b5c:	4606      	mov	r6, r0
 8012b5e:	f7fc fa8f 	bl	800f080 <ucdr_serialize_bool>
 8012b62:	7823      	ldrb	r3, [r4, #0]
 8012b64:	4605      	mov	r5, r0
 8012b66:	b96b      	cbnz	r3, 8012b84 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 8012b68:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8012b6c:	4630      	mov	r0, r6
 8012b6e:	f7fc fa87 	bl	800f080 <ucdr_serialize_bool>
 8012b72:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8012b76:	4005      	ands	r5, r0
 8012b78:	b2ed      	uxtb	r5, r5
 8012b7a:	2b00      	cmp	r3, #0
 8012b7c:	d169      	bne.n	8012c52 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 8012b7e:	4628      	mov	r0, r5
 8012b80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b84:	6861      	ldr	r1, [r4, #4]
 8012b86:	4630      	mov	r0, r6
 8012b88:	f7fc fcbe 	bl	800f508 <ucdr_serialize_uint32_t>
 8012b8c:	6863      	ldr	r3, [r4, #4]
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	d06b      	beq.n	8012c6a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 8012b92:	2800      	cmp	r0, #0
 8012b94:	d067      	beq.n	8012c66 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012b96:	68a1      	ldr	r1, [r4, #8]
 8012b98:	4630      	mov	r0, r6
 8012b9a:	f006 fef3 	bl	8019984 <ucdr_serialize_string>
 8012b9e:	6863      	ldr	r3, [r4, #4]
 8012ba0:	2b01      	cmp	r3, #1
 8012ba2:	d953      	bls.n	8012c4c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012ba4:	2800      	cmp	r0, #0
 8012ba6:	d05e      	beq.n	8012c66 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012ba8:	68e1      	ldr	r1, [r4, #12]
 8012baa:	4630      	mov	r0, r6
 8012bac:	f006 feea 	bl	8019984 <ucdr_serialize_string>
 8012bb0:	6863      	ldr	r3, [r4, #4]
 8012bb2:	2b02      	cmp	r3, #2
 8012bb4:	d94a      	bls.n	8012c4c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012bb6:	2800      	cmp	r0, #0
 8012bb8:	d055      	beq.n	8012c66 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012bba:	6921      	ldr	r1, [r4, #16]
 8012bbc:	4630      	mov	r0, r6
 8012bbe:	f006 fee1 	bl	8019984 <ucdr_serialize_string>
 8012bc2:	6863      	ldr	r3, [r4, #4]
 8012bc4:	2b03      	cmp	r3, #3
 8012bc6:	d941      	bls.n	8012c4c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012bc8:	2800      	cmp	r0, #0
 8012bca:	d04c      	beq.n	8012c66 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012bcc:	6961      	ldr	r1, [r4, #20]
 8012bce:	4630      	mov	r0, r6
 8012bd0:	f006 fed8 	bl	8019984 <ucdr_serialize_string>
 8012bd4:	6863      	ldr	r3, [r4, #4]
 8012bd6:	2b04      	cmp	r3, #4
 8012bd8:	d938      	bls.n	8012c4c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012bda:	2800      	cmp	r0, #0
 8012bdc:	d043      	beq.n	8012c66 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012bde:	69a1      	ldr	r1, [r4, #24]
 8012be0:	4630      	mov	r0, r6
 8012be2:	f006 fecf 	bl	8019984 <ucdr_serialize_string>
 8012be6:	6863      	ldr	r3, [r4, #4]
 8012be8:	2b05      	cmp	r3, #5
 8012bea:	d92f      	bls.n	8012c4c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012bec:	2800      	cmp	r0, #0
 8012bee:	d03a      	beq.n	8012c66 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012bf0:	69e1      	ldr	r1, [r4, #28]
 8012bf2:	4630      	mov	r0, r6
 8012bf4:	f006 fec6 	bl	8019984 <ucdr_serialize_string>
 8012bf8:	6863      	ldr	r3, [r4, #4]
 8012bfa:	2b06      	cmp	r3, #6
 8012bfc:	d926      	bls.n	8012c4c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012bfe:	b390      	cbz	r0, 8012c66 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012c00:	6a21      	ldr	r1, [r4, #32]
 8012c02:	4630      	mov	r0, r6
 8012c04:	f006 febe 	bl	8019984 <ucdr_serialize_string>
 8012c08:	6863      	ldr	r3, [r4, #4]
 8012c0a:	2b07      	cmp	r3, #7
 8012c0c:	d91e      	bls.n	8012c4c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012c0e:	b350      	cbz	r0, 8012c66 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012c10:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8012c12:	4630      	mov	r0, r6
 8012c14:	f006 feb6 	bl	8019984 <ucdr_serialize_string>
 8012c18:	6863      	ldr	r3, [r4, #4]
 8012c1a:	2b08      	cmp	r3, #8
 8012c1c:	d916      	bls.n	8012c4c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012c1e:	b310      	cbz	r0, 8012c66 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012c20:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8012c22:	4630      	mov	r0, r6
 8012c24:	f006 feae 	bl	8019984 <ucdr_serialize_string>
 8012c28:	6863      	ldr	r3, [r4, #4]
 8012c2a:	2b09      	cmp	r3, #9
 8012c2c:	d90e      	bls.n	8012c4c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012c2e:	b1d0      	cbz	r0, 8012c66 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012c30:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8012c34:	2709      	movs	r7, #9
 8012c36:	e000      	b.n	8012c3a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 8012c38:	b1a8      	cbz	r0, 8012c66 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012c3a:	f858 1b04 	ldr.w	r1, [r8], #4
 8012c3e:	4630      	mov	r0, r6
 8012c40:	f006 fea0 	bl	8019984 <ucdr_serialize_string>
 8012c44:	3701      	adds	r7, #1
 8012c46:	6862      	ldr	r2, [r4, #4]
 8012c48:	4297      	cmp	r7, r2
 8012c4a:	d3f5      	bcc.n	8012c38 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 8012c4c:	4005      	ands	r5, r0
 8012c4e:	b2ed      	uxtb	r5, r5
 8012c50:	e78a      	b.n	8012b68 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8012c52:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8012c54:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8012c58:	4630      	mov	r0, r6
 8012c5a:	f006 fe67 	bl	801992c <ucdr_serialize_sequence_uint8_t>
 8012c5e:	4005      	ands	r5, r0
 8012c60:	4628      	mov	r0, r5
 8012c62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c66:	2500      	movs	r5, #0
 8012c68:	e77e      	b.n	8012b68 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8012c6a:	4028      	ands	r0, r5
 8012c6c:	b2c5      	uxtb	r5, r0
 8012c6e:	e77b      	b.n	8012b68 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

08012c70 <uxr_serialize_OBJK_Subscriber_Binary>:
 8012c70:	b570      	push	{r4, r5, r6, lr}
 8012c72:	460d      	mov	r5, r1
 8012c74:	7809      	ldrb	r1, [r1, #0]
 8012c76:	4606      	mov	r6, r0
 8012c78:	f7fc fa02 	bl	800f080 <ucdr_serialize_bool>
 8012c7c:	782b      	ldrb	r3, [r5, #0]
 8012c7e:	4604      	mov	r4, r0
 8012c80:	b94b      	cbnz	r3, 8012c96 <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 8012c82:	7a29      	ldrb	r1, [r5, #8]
 8012c84:	4630      	mov	r0, r6
 8012c86:	f7fc f9fb 	bl	800f080 <ucdr_serialize_bool>
 8012c8a:	7a2b      	ldrb	r3, [r5, #8]
 8012c8c:	4004      	ands	r4, r0
 8012c8e:	b2e4      	uxtb	r4, r4
 8012c90:	b943      	cbnz	r3, 8012ca4 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 8012c92:	4620      	mov	r0, r4
 8012c94:	bd70      	pop	{r4, r5, r6, pc}
 8012c96:	6869      	ldr	r1, [r5, #4]
 8012c98:	4630      	mov	r0, r6
 8012c9a:	f006 fe73 	bl	8019984 <ucdr_serialize_string>
 8012c9e:	4004      	ands	r4, r0
 8012ca0:	b2e4      	uxtb	r4, r4
 8012ca2:	e7ee      	b.n	8012c82 <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 8012ca4:	f105 010c 	add.w	r1, r5, #12
 8012ca8:	4630      	mov	r0, r6
 8012caa:	f7ff ff53 	bl	8012b54 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 8012cae:	4004      	ands	r4, r0
 8012cb0:	4620      	mov	r0, r4
 8012cb2:	bd70      	pop	{r4, r5, r6, pc}

08012cb4 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8012cb4:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8012cb8:	4688      	mov	r8, r1
 8012cba:	4681      	mov	r9, r0
 8012cbc:	8809      	ldrh	r1, [r1, #0]
 8012cbe:	f7fc fa39 	bl	800f134 <ucdr_serialize_uint16_t>
 8012cc2:	4606      	mov	r6, r0
 8012cc4:	f898 1002 	ldrb.w	r1, [r8, #2]
 8012cc8:	4648      	mov	r0, r9
 8012cca:	f7fc f9d9 	bl	800f080 <ucdr_serialize_bool>
 8012cce:	f898 3002 	ldrb.w	r3, [r8, #2]
 8012cd2:	4006      	ands	r6, r0
 8012cd4:	b2f5      	uxtb	r5, r6
 8012cd6:	b9eb      	cbnz	r3, 8012d14 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8012cd8:	f898 1006 	ldrb.w	r1, [r8, #6]
 8012cdc:	4648      	mov	r0, r9
 8012cde:	f7fc f9cf 	bl	800f080 <ucdr_serialize_bool>
 8012ce2:	f898 3006 	ldrb.w	r3, [r8, #6]
 8012ce6:	4005      	ands	r5, r0
 8012ce8:	bb7b      	cbnz	r3, 8012d4a <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 8012cea:	f898 100c 	ldrb.w	r1, [r8, #12]
 8012cee:	4648      	mov	r0, r9
 8012cf0:	f7fc f9c6 	bl	800f080 <ucdr_serialize_bool>
 8012cf4:	f898 300c 	ldrb.w	r3, [r8, #12]
 8012cf8:	4005      	ands	r5, r0
 8012cfa:	b9f3      	cbnz	r3, 8012d3a <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 8012cfc:	f898 1014 	ldrb.w	r1, [r8, #20]
 8012d00:	4648      	mov	r0, r9
 8012d02:	f7fc f9bd 	bl	800f080 <ucdr_serialize_bool>
 8012d06:	f898 3014 	ldrb.w	r3, [r8, #20]
 8012d0a:	4005      	ands	r5, r0
 8012d0c:	b94b      	cbnz	r3, 8012d22 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 8012d0e:	4628      	mov	r0, r5
 8012d10:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8012d14:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8012d18:	4648      	mov	r0, r9
 8012d1a:	f7fc fa0b 	bl	800f134 <ucdr_serialize_uint16_t>
 8012d1e:	4005      	ands	r5, r0
 8012d20:	e7da      	b.n	8012cd8 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 8012d22:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8012d26:	f108 011c 	add.w	r1, r8, #28
 8012d2a:	4648      	mov	r0, r9
 8012d2c:	f006 fdfe 	bl	801992c <ucdr_serialize_sequence_uint8_t>
 8012d30:	4028      	ands	r0, r5
 8012d32:	b2c5      	uxtb	r5, r0
 8012d34:	4628      	mov	r0, r5
 8012d36:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8012d3a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8012d3e:	4648      	mov	r0, r9
 8012d40:	f7fc fbe2 	bl	800f508 <ucdr_serialize_uint32_t>
 8012d44:	4028      	ands	r0, r5
 8012d46:	b2c5      	uxtb	r5, r0
 8012d48:	e7d8      	b.n	8012cfc <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 8012d4a:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8012d4e:	4648      	mov	r0, r9
 8012d50:	f7fc fbda 	bl	800f508 <ucdr_serialize_uint32_t>
 8012d54:	4028      	ands	r0, r5
 8012d56:	b2c5      	uxtb	r5, r0
 8012d58:	e7c7      	b.n	8012cea <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 8012d5a:	bf00      	nop

08012d5c <uxr_serialize_OBJK_DataReader_Binary>:
 8012d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d5e:	2202      	movs	r2, #2
 8012d60:	460c      	mov	r4, r1
 8012d62:	4606      	mov	r6, r0
 8012d64:	f7fc f816 	bl	800ed94 <ucdr_serialize_array_uint8_t>
 8012d68:	4605      	mov	r5, r0
 8012d6a:	78a1      	ldrb	r1, [r4, #2]
 8012d6c:	4630      	mov	r0, r6
 8012d6e:	f7fc f987 	bl	800f080 <ucdr_serialize_bool>
 8012d72:	78a3      	ldrb	r3, [r4, #2]
 8012d74:	4005      	ands	r5, r0
 8012d76:	b2ed      	uxtb	r5, r5
 8012d78:	b90b      	cbnz	r3, 8012d7e <uxr_serialize_OBJK_DataReader_Binary+0x22>
 8012d7a:	4628      	mov	r0, r5
 8012d7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012d7e:	f104 0108 	add.w	r1, r4, #8
 8012d82:	4630      	mov	r0, r6
 8012d84:	f7ff ff96 	bl	8012cb4 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8012d88:	4607      	mov	r7, r0
 8012d8a:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8012d8e:	4630      	mov	r0, r6
 8012d90:	f7fc f976 	bl	800f080 <ucdr_serialize_bool>
 8012d94:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8012d98:	4038      	ands	r0, r7
 8012d9a:	b2c7      	uxtb	r7, r0
 8012d9c:	b95b      	cbnz	r3, 8012db6 <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 8012d9e:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 8012da2:	4630      	mov	r0, r6
 8012da4:	f7fc f96c 	bl	800f080 <ucdr_serialize_bool>
 8012da8:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8012dac:	4007      	ands	r7, r0
 8012dae:	b94b      	cbnz	r3, 8012dc4 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 8012db0:	403d      	ands	r5, r7
 8012db2:	4628      	mov	r0, r5
 8012db4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012db6:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 8012dba:	4630      	mov	r0, r6
 8012dbc:	f7fc fdfa 	bl	800f9b4 <ucdr_serialize_uint64_t>
 8012dc0:	4007      	ands	r7, r0
 8012dc2:	e7ec      	b.n	8012d9e <uxr_serialize_OBJK_DataReader_Binary+0x42>
 8012dc4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8012dc6:	4630      	mov	r0, r6
 8012dc8:	f006 fddc 	bl	8019984 <ucdr_serialize_string>
 8012dcc:	4007      	ands	r7, r0
 8012dce:	b2ff      	uxtb	r7, r7
 8012dd0:	e7ee      	b.n	8012db0 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 8012dd2:	bf00      	nop

08012dd4 <uxr_serialize_OBJK_DataWriter_Binary>:
 8012dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012dd6:	2202      	movs	r2, #2
 8012dd8:	460d      	mov	r5, r1
 8012dda:	4606      	mov	r6, r0
 8012ddc:	f7fb ffda 	bl	800ed94 <ucdr_serialize_array_uint8_t>
 8012de0:	4604      	mov	r4, r0
 8012de2:	78a9      	ldrb	r1, [r5, #2]
 8012de4:	4630      	mov	r0, r6
 8012de6:	f7fc f94b 	bl	800f080 <ucdr_serialize_bool>
 8012dea:	78ab      	ldrb	r3, [r5, #2]
 8012dec:	4004      	ands	r4, r0
 8012dee:	b2e4      	uxtb	r4, r4
 8012df0:	b90b      	cbnz	r3, 8012df6 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 8012df2:	4620      	mov	r0, r4
 8012df4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012df6:	f105 0108 	add.w	r1, r5, #8
 8012dfa:	4630      	mov	r0, r6
 8012dfc:	f7ff ff5a 	bl	8012cb4 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8012e00:	4607      	mov	r7, r0
 8012e02:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
 8012e06:	4630      	mov	r0, r6
 8012e08:	f7fc f93a 	bl	800f080 <ucdr_serialize_bool>
 8012e0c:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 8012e10:	4038      	ands	r0, r7
 8012e12:	b2c7      	uxtb	r7, r0
 8012e14:	b913      	cbnz	r3, 8012e1c <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 8012e16:	403c      	ands	r4, r7
 8012e18:	4620      	mov	r0, r4
 8012e1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012e1c:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
 8012e20:	4630      	mov	r0, r6
 8012e22:	f7fc fdc7 	bl	800f9b4 <ucdr_serialize_uint64_t>
 8012e26:	4007      	ands	r7, r0
 8012e28:	e7f5      	b.n	8012e16 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 8012e2a:	bf00      	nop

08012e2c <uxr_serialize_OBJK_Replier_Binary>:
 8012e2c:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 8012e30:	460f      	mov	r7, r1
 8012e32:	4680      	mov	r8, r0
 8012e34:	6809      	ldr	r1, [r1, #0]
 8012e36:	f006 fda5 	bl	8019984 <ucdr_serialize_string>
 8012e3a:	4605      	mov	r5, r0
 8012e3c:	6879      	ldr	r1, [r7, #4]
 8012e3e:	4640      	mov	r0, r8
 8012e40:	f006 fda0 	bl	8019984 <ucdr_serialize_string>
 8012e44:	4005      	ands	r5, r0
 8012e46:	68b9      	ldr	r1, [r7, #8]
 8012e48:	4640      	mov	r0, r8
 8012e4a:	b2ec      	uxtb	r4, r5
 8012e4c:	f006 fd9a 	bl	8019984 <ucdr_serialize_string>
 8012e50:	7b39      	ldrb	r1, [r7, #12]
 8012e52:	4004      	ands	r4, r0
 8012e54:	4640      	mov	r0, r8
 8012e56:	f7fc f913 	bl	800f080 <ucdr_serialize_bool>
 8012e5a:	7b3b      	ldrb	r3, [r7, #12]
 8012e5c:	4004      	ands	r4, r0
 8012e5e:	b94b      	cbnz	r3, 8012e74 <uxr_serialize_OBJK_Replier_Binary+0x48>
 8012e60:	7d39      	ldrb	r1, [r7, #20]
 8012e62:	4640      	mov	r0, r8
 8012e64:	f7fc f90c 	bl	800f080 <ucdr_serialize_bool>
 8012e68:	7d3b      	ldrb	r3, [r7, #20]
 8012e6a:	4004      	ands	r4, r0
 8012e6c:	b943      	cbnz	r3, 8012e80 <uxr_serialize_OBJK_Replier_Binary+0x54>
 8012e6e:	4620      	mov	r0, r4
 8012e70:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 8012e74:	6939      	ldr	r1, [r7, #16]
 8012e76:	4640      	mov	r0, r8
 8012e78:	f006 fd84 	bl	8019984 <ucdr_serialize_string>
 8012e7c:	4004      	ands	r4, r0
 8012e7e:	e7ef      	b.n	8012e60 <uxr_serialize_OBJK_Replier_Binary+0x34>
 8012e80:	69b9      	ldr	r1, [r7, #24]
 8012e82:	4640      	mov	r0, r8
 8012e84:	f006 fd7e 	bl	8019984 <ucdr_serialize_string>
 8012e88:	4004      	ands	r4, r0
 8012e8a:	b2e4      	uxtb	r4, r4
 8012e8c:	4620      	mov	r0, r4
 8012e8e:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 8012e92:	bf00      	nop

08012e94 <uxr_deserialize_ObjectVariant>:
 8012e94:	b570      	push	{r4, r5, r6, lr}
 8012e96:	4605      	mov	r5, r0
 8012e98:	460e      	mov	r6, r1
 8012e9a:	f7fc f935 	bl	800f108 <ucdr_deserialize_uint8_t>
 8012e9e:	b168      	cbz	r0, 8012ebc <uxr_deserialize_ObjectVariant+0x28>
 8012ea0:	7833      	ldrb	r3, [r6, #0]
 8012ea2:	4604      	mov	r4, r0
 8012ea4:	3b01      	subs	r3, #1
 8012ea6:	2b0d      	cmp	r3, #13
 8012ea8:	d809      	bhi.n	8012ebe <uxr_deserialize_ObjectVariant+0x2a>
 8012eaa:	e8df f003 	tbb	[pc, r3]
 8012eae:	0a41      	.short	0x0a41
 8012eb0:	0a0a2323 	.word	0x0a0a2323
 8012eb4:	10080a0a 	.word	0x10080a0a
 8012eb8:	565c1010 	.word	0x565c1010
 8012ebc:	2400      	movs	r4, #0
 8012ebe:	4620      	mov	r0, r4
 8012ec0:	bd70      	pop	{r4, r5, r6, pc}
 8012ec2:	1d31      	adds	r1, r6, #4
 8012ec4:	4628      	mov	r0, r5
 8012ec6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012eca:	f7ff bd21 	b.w	8012910 <uxr_deserialize_DATAWRITER_Representation>
 8012ece:	1d31      	adds	r1, r6, #4
 8012ed0:	4628      	mov	r0, r5
 8012ed2:	f7fc f919 	bl	800f108 <ucdr_deserialize_uint8_t>
 8012ed6:	2800      	cmp	r0, #0
 8012ed8:	d0f0      	beq.n	8012ebc <uxr_deserialize_ObjectVariant+0x28>
 8012eda:	7933      	ldrb	r3, [r6, #4]
 8012edc:	2b01      	cmp	r3, #1
 8012ede:	d001      	beq.n	8012ee4 <uxr_deserialize_ObjectVariant+0x50>
 8012ee0:	2b02      	cmp	r3, #2
 8012ee2:	d1ec      	bne.n	8012ebe <uxr_deserialize_ObjectVariant+0x2a>
 8012ee4:	68b1      	ldr	r1, [r6, #8]
 8012ee6:	4628      	mov	r0, r5
 8012ee8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012eec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012ef0:	f006 bd58 	b.w	80199a4 <ucdr_deserialize_string>
 8012ef4:	1d31      	adds	r1, r6, #4
 8012ef6:	4628      	mov	r0, r5
 8012ef8:	f7fc f906 	bl	800f108 <ucdr_deserialize_uint8_t>
 8012efc:	4604      	mov	r4, r0
 8012efe:	b170      	cbz	r0, 8012f1e <uxr_deserialize_ObjectVariant+0x8a>
 8012f00:	7933      	ldrb	r3, [r6, #4]
 8012f02:	2b02      	cmp	r3, #2
 8012f04:	d04c      	beq.n	8012fa0 <uxr_deserialize_ObjectVariant+0x10c>
 8012f06:	2b03      	cmp	r3, #3
 8012f08:	d109      	bne.n	8012f1e <uxr_deserialize_ObjectVariant+0x8a>
 8012f0a:	f106 0308 	add.w	r3, r6, #8
 8012f0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012f12:	f106 010c 	add.w	r1, r6, #12
 8012f16:	4628      	mov	r0, r5
 8012f18:	f006 fd1a 	bl	8019950 <ucdr_deserialize_sequence_uint8_t>
 8012f1c:	4604      	mov	r4, r0
 8012f1e:	2202      	movs	r2, #2
 8012f20:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 8012f24:	4628      	mov	r0, r5
 8012f26:	f7fb ff99 	bl	800ee5c <ucdr_deserialize_array_uint8_t>
 8012f2a:	4020      	ands	r0, r4
 8012f2c:	b2c4      	uxtb	r4, r0
 8012f2e:	e7c6      	b.n	8012ebe <uxr_deserialize_ObjectVariant+0x2a>
 8012f30:	1d31      	adds	r1, r6, #4
 8012f32:	4628      	mov	r0, r5
 8012f34:	f7fc f8e8 	bl	800f108 <ucdr_deserialize_uint8_t>
 8012f38:	4604      	mov	r4, r0
 8012f3a:	b130      	cbz	r0, 8012f4a <uxr_deserialize_ObjectVariant+0xb6>
 8012f3c:	7933      	ldrb	r3, [r6, #4]
 8012f3e:	2b02      	cmp	r3, #2
 8012f40:	d036      	beq.n	8012fb0 <uxr_deserialize_ObjectVariant+0x11c>
 8012f42:	2b03      	cmp	r3, #3
 8012f44:	d03c      	beq.n	8012fc0 <uxr_deserialize_ObjectVariant+0x12c>
 8012f46:	2b01      	cmp	r3, #1
 8012f48:	d032      	beq.n	8012fb0 <uxr_deserialize_ObjectVariant+0x11c>
 8012f4a:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 8012f4e:	4628      	mov	r0, r5
 8012f50:	f7fc ff00 	bl	800fd54 <ucdr_deserialize_int16_t>
 8012f54:	4020      	ands	r0, r4
 8012f56:	b2c4      	uxtb	r4, r0
 8012f58:	e7b1      	b.n	8012ebe <uxr_deserialize_ObjectVariant+0x2a>
 8012f5a:	1d31      	adds	r1, r6, #4
 8012f5c:	4628      	mov	r0, r5
 8012f5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012f62:	f7ff bb8b 	b.w	801267c <uxr_deserialize_CLIENT_Representation>
 8012f66:	2204      	movs	r2, #4
 8012f68:	4628      	mov	r0, r5
 8012f6a:	18b1      	adds	r1, r6, r2
 8012f6c:	f7fb ff76 	bl	800ee5c <ucdr_deserialize_array_uint8_t>
 8012f70:	4604      	mov	r4, r0
 8012f72:	2202      	movs	r2, #2
 8012f74:	f106 0108 	add.w	r1, r6, #8
 8012f78:	4628      	mov	r0, r5
 8012f7a:	f7fb ff6f 	bl	800ee5c <ucdr_deserialize_array_uint8_t>
 8012f7e:	4004      	ands	r4, r0
 8012f80:	2202      	movs	r2, #2
 8012f82:	f106 010a 	add.w	r1, r6, #10
 8012f86:	4628      	mov	r0, r5
 8012f88:	b2e4      	uxtb	r4, r4
 8012f8a:	f7fb ff67 	bl	800ee5c <ucdr_deserialize_array_uint8_t>
 8012f8e:	4603      	mov	r3, r0
 8012f90:	f106 010c 	add.w	r1, r6, #12
 8012f94:	4628      	mov	r0, r5
 8012f96:	401c      	ands	r4, r3
 8012f98:	f7fc f888 	bl	800f0ac <ucdr_deserialize_bool>
 8012f9c:	4004      	ands	r4, r0
 8012f9e:	e78e      	b.n	8012ebe <uxr_deserialize_ObjectVariant+0x2a>
 8012fa0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012fa4:	68b1      	ldr	r1, [r6, #8]
 8012fa6:	4628      	mov	r0, r5
 8012fa8:	f006 fcfc 	bl	80199a4 <ucdr_deserialize_string>
 8012fac:	4604      	mov	r4, r0
 8012fae:	e7b6      	b.n	8012f1e <uxr_deserialize_ObjectVariant+0x8a>
 8012fb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012fb4:	68b1      	ldr	r1, [r6, #8]
 8012fb6:	4628      	mov	r0, r5
 8012fb8:	f006 fcf4 	bl	80199a4 <ucdr_deserialize_string>
 8012fbc:	4604      	mov	r4, r0
 8012fbe:	e7c4      	b.n	8012f4a <uxr_deserialize_ObjectVariant+0xb6>
 8012fc0:	f106 0308 	add.w	r3, r6, #8
 8012fc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012fc8:	f106 010c 	add.w	r1, r6, #12
 8012fcc:	4628      	mov	r0, r5
 8012fce:	f006 fcbf 	bl	8019950 <ucdr_deserialize_sequence_uint8_t>
 8012fd2:	4604      	mov	r4, r0
 8012fd4:	e7b9      	b.n	8012f4a <uxr_deserialize_ObjectVariant+0xb6>
 8012fd6:	bf00      	nop

08012fd8 <uxr_deserialize_BaseObjectRequest>:
 8012fd8:	b570      	push	{r4, r5, r6, lr}
 8012fda:	2202      	movs	r2, #2
 8012fdc:	4605      	mov	r5, r0
 8012fde:	460e      	mov	r6, r1
 8012fe0:	f7fb ff3c 	bl	800ee5c <ucdr_deserialize_array_uint8_t>
 8012fe4:	2202      	movs	r2, #2
 8012fe6:	4604      	mov	r4, r0
 8012fe8:	4628      	mov	r0, r5
 8012fea:	18b1      	adds	r1, r6, r2
 8012fec:	f7fb ff36 	bl	800ee5c <ucdr_deserialize_array_uint8_t>
 8012ff0:	4020      	ands	r0, r4
 8012ff2:	b2c0      	uxtb	r0, r0
 8012ff4:	bd70      	pop	{r4, r5, r6, pc}
 8012ff6:	bf00      	nop

08012ff8 <uxr_serialize_ActivityInfoVariant>:
 8012ff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012ffc:	460e      	mov	r6, r1
 8012ffe:	7809      	ldrb	r1, [r1, #0]
 8013000:	4680      	mov	r8, r0
 8013002:	f7fc f86b 	bl	800f0dc <ucdr_serialize_uint8_t>
 8013006:	4607      	mov	r7, r0
 8013008:	b138      	cbz	r0, 801301a <uxr_serialize_ActivityInfoVariant+0x22>
 801300a:	7833      	ldrb	r3, [r6, #0]
 801300c:	2b06      	cmp	r3, #6
 801300e:	f000 8081 	beq.w	8013114 <uxr_serialize_ActivityInfoVariant+0x11c>
 8013012:	2b0d      	cmp	r3, #13
 8013014:	d014      	beq.n	8013040 <uxr_serialize_ActivityInfoVariant+0x48>
 8013016:	2b05      	cmp	r3, #5
 8013018:	d002      	beq.n	8013020 <uxr_serialize_ActivityInfoVariant+0x28>
 801301a:	4638      	mov	r0, r7
 801301c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013020:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8013024:	4640      	mov	r0, r8
 8013026:	f7fc fd95 	bl	800fb54 <ucdr_serialize_int16_t>
 801302a:	4607      	mov	r7, r0
 801302c:	4640      	mov	r0, r8
 801302e:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 8013032:	f7fc fcbf 	bl	800f9b4 <ucdr_serialize_uint64_t>
 8013036:	4038      	ands	r0, r7
 8013038:	b2c7      	uxtb	r7, r0
 801303a:	4638      	mov	r0, r7
 801303c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013040:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8013044:	4640      	mov	r0, r8
 8013046:	f7fc fd85 	bl	800fb54 <ucdr_serialize_int16_t>
 801304a:	68f1      	ldr	r1, [r6, #12]
 801304c:	4607      	mov	r7, r0
 801304e:	4640      	mov	r0, r8
 8013050:	f7fc fa5a 	bl	800f508 <ucdr_serialize_uint32_t>
 8013054:	68f3      	ldr	r3, [r6, #12]
 8013056:	2b00      	cmp	r3, #0
 8013058:	d0ed      	beq.n	8013036 <uxr_serialize_ActivityInfoVariant+0x3e>
 801305a:	b318      	cbz	r0, 80130a4 <uxr_serialize_ActivityInfoVariant+0xac>
 801305c:	f106 090c 	add.w	r9, r6, #12
 8013060:	2400      	movs	r4, #0
 8013062:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8013066:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
 801306a:	7c29      	ldrb	r1, [r5, #16]
 801306c:	4640      	mov	r0, r8
 801306e:	f7fc f835 	bl	800f0dc <ucdr_serialize_uint8_t>
 8013072:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 8013076:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 801307a:	2800      	cmp	r0, #0
 801307c:	d051      	beq.n	8013122 <uxr_serialize_ActivityInfoVariant+0x12a>
 801307e:	7c2b      	ldrb	r3, [r5, #16]
 8013080:	00c9      	lsls	r1, r1, #3
 8013082:	2b03      	cmp	r3, #3
 8013084:	d854      	bhi.n	8013130 <uxr_serialize_ActivityInfoVariant+0x138>
 8013086:	e8df f003 	tbb	[pc, r3]
 801308a:	2133      	.short	0x2133
 801308c:	020f      	.short	0x020f
 801308e:	4449      	add	r1, r9
 8013090:	4640      	mov	r0, r8
 8013092:	6889      	ldr	r1, [r1, #8]
 8013094:	f006 fc76 	bl	8019984 <ucdr_serialize_string>
 8013098:	3401      	adds	r4, #1
 801309a:	68f2      	ldr	r2, [r6, #12]
 801309c:	4294      	cmp	r4, r2
 801309e:	d244      	bcs.n	801312a <uxr_serialize_ActivityInfoVariant+0x132>
 80130a0:	2800      	cmp	r0, #0
 80130a2:	d1de      	bne.n	8013062 <uxr_serialize_ActivityInfoVariant+0x6a>
 80130a4:	2700      	movs	r7, #0
 80130a6:	e7b8      	b.n	801301a <uxr_serialize_ActivityInfoVariant+0x22>
 80130a8:	3108      	adds	r1, #8
 80130aa:	44a2      	add	sl, r4
 80130ac:	2210      	movs	r2, #16
 80130ae:	4640      	mov	r0, r8
 80130b0:	4449      	add	r1, r9
 80130b2:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 80130b6:	f7fb fe6d 	bl	800ed94 <ucdr_serialize_array_uint8_t>
 80130ba:	4605      	mov	r5, r0
 80130bc:	f8da 1024 	ldr.w	r1, [sl, #36]	; 0x24
 80130c0:	4640      	mov	r0, r8
 80130c2:	f7fc fa21 	bl	800f508 <ucdr_serialize_uint32_t>
 80130c6:	4028      	ands	r0, r5
 80130c8:	b2c0      	uxtb	r0, r0
 80130ca:	e7e5      	b.n	8013098 <uxr_serialize_ActivityInfoVariant+0xa0>
 80130cc:	3108      	adds	r1, #8
 80130ce:	44a2      	add	sl, r4
 80130d0:	2204      	movs	r2, #4
 80130d2:	4640      	mov	r0, r8
 80130d4:	4449      	add	r1, r9
 80130d6:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 80130da:	f7fb fe5b 	bl	800ed94 <ucdr_serialize_array_uint8_t>
 80130de:	4605      	mov	r5, r0
 80130e0:	f8ba 1018 	ldrh.w	r1, [sl, #24]
 80130e4:	4640      	mov	r0, r8
 80130e6:	f7fc f825 	bl	800f134 <ucdr_serialize_uint16_t>
 80130ea:	4028      	ands	r0, r5
 80130ec:	b2c0      	uxtb	r0, r0
 80130ee:	e7d3      	b.n	8013098 <uxr_serialize_ActivityInfoVariant+0xa0>
 80130f0:	3108      	adds	r1, #8
 80130f2:	44a2      	add	sl, r4
 80130f4:	2202      	movs	r2, #2
 80130f6:	4640      	mov	r0, r8
 80130f8:	4449      	add	r1, r9
 80130fa:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 80130fe:	f7fb fe49 	bl	800ed94 <ucdr_serialize_array_uint8_t>
 8013102:	4605      	mov	r5, r0
 8013104:	f89a 1016 	ldrb.w	r1, [sl, #22]
 8013108:	4640      	mov	r0, r8
 801310a:	f7fb ffe7 	bl	800f0dc <ucdr_serialize_uint8_t>
 801310e:	4028      	ands	r0, r5
 8013110:	b2c0      	uxtb	r0, r0
 8013112:	e7c1      	b.n	8013098 <uxr_serialize_ActivityInfoVariant+0xa0>
 8013114:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8013118:	4640      	mov	r0, r8
 801311a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801311e:	f7fc bd19 	b.w	800fb54 <ucdr_serialize_int16_t>
 8013122:	3401      	adds	r4, #1
 8013124:	68f2      	ldr	r2, [r6, #12]
 8013126:	42a2      	cmp	r2, r4
 8013128:	d8bc      	bhi.n	80130a4 <uxr_serialize_ActivityInfoVariant+0xac>
 801312a:	4007      	ands	r7, r0
 801312c:	b2ff      	uxtb	r7, r7
 801312e:	e774      	b.n	801301a <uxr_serialize_ActivityInfoVariant+0x22>
 8013130:	3401      	adds	r4, #1
 8013132:	68f3      	ldr	r3, [r6, #12]
 8013134:	3518      	adds	r5, #24
 8013136:	429c      	cmp	r4, r3
 8013138:	d397      	bcc.n	801306a <uxr_serialize_ActivityInfoVariant+0x72>
 801313a:	e76e      	b.n	801301a <uxr_serialize_ActivityInfoVariant+0x22>

0801313c <uxr_deserialize_BaseObjectReply>:
 801313c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013140:	2202      	movs	r2, #2
 8013142:	4606      	mov	r6, r0
 8013144:	460f      	mov	r7, r1
 8013146:	f7fb fe89 	bl	800ee5c <ucdr_deserialize_array_uint8_t>
 801314a:	2202      	movs	r2, #2
 801314c:	4605      	mov	r5, r0
 801314e:	4630      	mov	r0, r6
 8013150:	18b9      	adds	r1, r7, r2
 8013152:	f7fb fe83 	bl	800ee5c <ucdr_deserialize_array_uint8_t>
 8013156:	4680      	mov	r8, r0
 8013158:	1d39      	adds	r1, r7, #4
 801315a:	4630      	mov	r0, r6
 801315c:	f7fb ffd4 	bl	800f108 <ucdr_deserialize_uint8_t>
 8013160:	ea05 0508 	and.w	r5, r5, r8
 8013164:	4604      	mov	r4, r0
 8013166:	1d79      	adds	r1, r7, #5
 8013168:	4630      	mov	r0, r6
 801316a:	402c      	ands	r4, r5
 801316c:	f7fb ffcc 	bl	800f108 <ucdr_deserialize_uint8_t>
 8013170:	4020      	ands	r0, r4
 8013172:	b2c0      	uxtb	r0, r0
 8013174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013178 <uxr_serialize_ReadSpecification>:
 8013178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801317a:	460e      	mov	r6, r1
 801317c:	4607      	mov	r7, r0
 801317e:	7809      	ldrb	r1, [r1, #0]
 8013180:	f7fb ffac 	bl	800f0dc <ucdr_serialize_uint8_t>
 8013184:	4604      	mov	r4, r0
 8013186:	7871      	ldrb	r1, [r6, #1]
 8013188:	4638      	mov	r0, r7
 801318a:	f7fb ffa7 	bl	800f0dc <ucdr_serialize_uint8_t>
 801318e:	4004      	ands	r4, r0
 8013190:	78b1      	ldrb	r1, [r6, #2]
 8013192:	4638      	mov	r0, r7
 8013194:	f7fb ff74 	bl	800f080 <ucdr_serialize_bool>
 8013198:	78b3      	ldrb	r3, [r6, #2]
 801319a:	b2e4      	uxtb	r4, r4
 801319c:	4004      	ands	r4, r0
 801319e:	b943      	cbnz	r3, 80131b2 <uxr_serialize_ReadSpecification+0x3a>
 80131a0:	7a31      	ldrb	r1, [r6, #8]
 80131a2:	4638      	mov	r0, r7
 80131a4:	f7fb ff6c 	bl	800f080 <ucdr_serialize_bool>
 80131a8:	7a33      	ldrb	r3, [r6, #8]
 80131aa:	4004      	ands	r4, r0
 80131ac:	b93b      	cbnz	r3, 80131be <uxr_serialize_ReadSpecification+0x46>
 80131ae:	4620      	mov	r0, r4
 80131b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80131b2:	6871      	ldr	r1, [r6, #4]
 80131b4:	4638      	mov	r0, r7
 80131b6:	f006 fbe5 	bl	8019984 <ucdr_serialize_string>
 80131ba:	4004      	ands	r4, r0
 80131bc:	e7f0      	b.n	80131a0 <uxr_serialize_ReadSpecification+0x28>
 80131be:	8971      	ldrh	r1, [r6, #10]
 80131c0:	4638      	mov	r0, r7
 80131c2:	f7fb ffb7 	bl	800f134 <ucdr_serialize_uint16_t>
 80131c6:	4605      	mov	r5, r0
 80131c8:	89b1      	ldrh	r1, [r6, #12]
 80131ca:	4638      	mov	r0, r7
 80131cc:	f7fb ffb2 	bl	800f134 <ucdr_serialize_uint16_t>
 80131d0:	4005      	ands	r5, r0
 80131d2:	89f1      	ldrh	r1, [r6, #14]
 80131d4:	4638      	mov	r0, r7
 80131d6:	b2ed      	uxtb	r5, r5
 80131d8:	f7fb ffac 	bl	800f134 <ucdr_serialize_uint16_t>
 80131dc:	8a31      	ldrh	r1, [r6, #16]
 80131de:	4025      	ands	r5, r4
 80131e0:	4604      	mov	r4, r0
 80131e2:	4638      	mov	r0, r7
 80131e4:	4025      	ands	r5, r4
 80131e6:	f7fb ffa5 	bl	800f134 <ucdr_serialize_uint16_t>
 80131ea:	ea00 0405 	and.w	r4, r0, r5
 80131ee:	4620      	mov	r0, r4
 80131f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80131f2:	bf00      	nop

080131f4 <uxr_serialize_CREATE_CLIENT_Payload>:
 80131f4:	f7ff b9ea 	b.w	80125cc <uxr_serialize_CLIENT_Representation>

080131f8 <uxr_serialize_CREATE_Payload>:
 80131f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80131fa:	2202      	movs	r2, #2
 80131fc:	4607      	mov	r7, r0
 80131fe:	460e      	mov	r6, r1
 8013200:	f7fb fdc8 	bl	800ed94 <ucdr_serialize_array_uint8_t>
 8013204:	2202      	movs	r2, #2
 8013206:	4605      	mov	r5, r0
 8013208:	4638      	mov	r0, r7
 801320a:	18b1      	adds	r1, r6, r2
 801320c:	f7fb fdc2 	bl	800ed94 <ucdr_serialize_array_uint8_t>
 8013210:	7931      	ldrb	r1, [r6, #4]
 8013212:	4604      	mov	r4, r0
 8013214:	4638      	mov	r0, r7
 8013216:	f7fb ff61 	bl	800f0dc <ucdr_serialize_uint8_t>
 801321a:	b170      	cbz	r0, 801323a <uxr_serialize_CREATE_Payload+0x42>
 801321c:	7933      	ldrb	r3, [r6, #4]
 801321e:	402c      	ands	r4, r5
 8013220:	3b01      	subs	r3, #1
 8013222:	b2e4      	uxtb	r4, r4
 8013224:	2b0d      	cmp	r3, #13
 8013226:	d809      	bhi.n	801323c <uxr_serialize_CREATE_Payload+0x44>
 8013228:	e8df f003 	tbb	[pc, r3]
 801322c:	23230a4c 	.word	0x23230a4c
 8013230:	0a0a0a0a 	.word	0x0a0a0a0a
 8013234:	12121208 	.word	0x12121208
 8013238:	3e45      	.short	0x3e45
 801323a:	2400      	movs	r4, #0
 801323c:	4620      	mov	r0, r4
 801323e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013240:	f106 0108 	add.w	r1, r6, #8
 8013244:	4638      	mov	r0, r7
 8013246:	f7ff fac7 	bl	80127d8 <uxr_serialize_DATAWRITER_Representation>
 801324a:	4004      	ands	r4, r0
 801324c:	4620      	mov	r0, r4
 801324e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013250:	7a31      	ldrb	r1, [r6, #8]
 8013252:	4638      	mov	r0, r7
 8013254:	f7fb ff42 	bl	800f0dc <ucdr_serialize_uint8_t>
 8013258:	2800      	cmp	r0, #0
 801325a:	d0ee      	beq.n	801323a <uxr_serialize_CREATE_Payload+0x42>
 801325c:	7a33      	ldrb	r3, [r6, #8]
 801325e:	2b01      	cmp	r3, #1
 8013260:	d001      	beq.n	8013266 <uxr_serialize_CREATE_Payload+0x6e>
 8013262:	2b02      	cmp	r3, #2
 8013264:	d1ea      	bne.n	801323c <uxr_serialize_CREATE_Payload+0x44>
 8013266:	68f1      	ldr	r1, [r6, #12]
 8013268:	4638      	mov	r0, r7
 801326a:	f006 fb8b 	bl	8019984 <ucdr_serialize_string>
 801326e:	4004      	ands	r4, r0
 8013270:	e7e4      	b.n	801323c <uxr_serialize_CREATE_Payload+0x44>
 8013272:	7a31      	ldrb	r1, [r6, #8]
 8013274:	4638      	mov	r0, r7
 8013276:	f7fb ff31 	bl	800f0dc <ucdr_serialize_uint8_t>
 801327a:	4605      	mov	r5, r0
 801327c:	b158      	cbz	r0, 8013296 <uxr_serialize_CREATE_Payload+0x9e>
 801327e:	7a33      	ldrb	r3, [r6, #8]
 8013280:	2b02      	cmp	r3, #2
 8013282:	d034      	beq.n	80132ee <uxr_serialize_CREATE_Payload+0xf6>
 8013284:	2b03      	cmp	r3, #3
 8013286:	d106      	bne.n	8013296 <uxr_serialize_CREATE_Payload+0x9e>
 8013288:	68f2      	ldr	r2, [r6, #12]
 801328a:	f106 0110 	add.w	r1, r6, #16
 801328e:	4638      	mov	r0, r7
 8013290:	f006 fb4c 	bl	801992c <ucdr_serialize_sequence_uint8_t>
 8013294:	4605      	mov	r5, r0
 8013296:	2202      	movs	r2, #2
 8013298:	f506 7104 	add.w	r1, r6, #528	; 0x210
 801329c:	4638      	mov	r0, r7
 801329e:	f7fb fd79 	bl	800ed94 <ucdr_serialize_array_uint8_t>
 80132a2:	4028      	ands	r0, r5
 80132a4:	4004      	ands	r4, r0
 80132a6:	e7c9      	b.n	801323c <uxr_serialize_CREATE_Payload+0x44>
 80132a8:	f106 0108 	add.w	r1, r6, #8
 80132ac:	4638      	mov	r0, r7
 80132ae:	f7ff f98d 	bl	80125cc <uxr_serialize_CLIENT_Representation>
 80132b2:	4004      	ands	r4, r0
 80132b4:	e7c2      	b.n	801323c <uxr_serialize_CREATE_Payload+0x44>
 80132b6:	f106 0108 	add.w	r1, r6, #8
 80132ba:	4638      	mov	r0, r7
 80132bc:	f7ff fa42 	bl	8012744 <uxr_serialize_AGENT_Representation>
 80132c0:	4004      	ands	r4, r0
 80132c2:	e7bb      	b.n	801323c <uxr_serialize_CREATE_Payload+0x44>
 80132c4:	7a31      	ldrb	r1, [r6, #8]
 80132c6:	4638      	mov	r0, r7
 80132c8:	f7fb ff08 	bl	800f0dc <ucdr_serialize_uint8_t>
 80132cc:	4605      	mov	r5, r0
 80132ce:	b130      	cbz	r0, 80132de <uxr_serialize_CREATE_Payload+0xe6>
 80132d0:	7a33      	ldrb	r3, [r6, #8]
 80132d2:	2b02      	cmp	r3, #2
 80132d4:	d011      	beq.n	80132fa <uxr_serialize_CREATE_Payload+0x102>
 80132d6:	2b03      	cmp	r3, #3
 80132d8:	d015      	beq.n	8013306 <uxr_serialize_CREATE_Payload+0x10e>
 80132da:	2b01      	cmp	r3, #1
 80132dc:	d00d      	beq.n	80132fa <uxr_serialize_CREATE_Payload+0x102>
 80132de:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	; 0x210
 80132e2:	4638      	mov	r0, r7
 80132e4:	f7fc fc36 	bl	800fb54 <ucdr_serialize_int16_t>
 80132e8:	4028      	ands	r0, r5
 80132ea:	4004      	ands	r4, r0
 80132ec:	e7a6      	b.n	801323c <uxr_serialize_CREATE_Payload+0x44>
 80132ee:	68f1      	ldr	r1, [r6, #12]
 80132f0:	4638      	mov	r0, r7
 80132f2:	f006 fb47 	bl	8019984 <ucdr_serialize_string>
 80132f6:	4605      	mov	r5, r0
 80132f8:	e7cd      	b.n	8013296 <uxr_serialize_CREATE_Payload+0x9e>
 80132fa:	68f1      	ldr	r1, [r6, #12]
 80132fc:	4638      	mov	r0, r7
 80132fe:	f006 fb41 	bl	8019984 <ucdr_serialize_string>
 8013302:	4605      	mov	r5, r0
 8013304:	e7eb      	b.n	80132de <uxr_serialize_CREATE_Payload+0xe6>
 8013306:	68f2      	ldr	r2, [r6, #12]
 8013308:	f106 0110 	add.w	r1, r6, #16
 801330c:	4638      	mov	r0, r7
 801330e:	f006 fb0d 	bl	801992c <ucdr_serialize_sequence_uint8_t>
 8013312:	4605      	mov	r5, r0
 8013314:	e7e3      	b.n	80132de <uxr_serialize_CREATE_Payload+0xe6>
 8013316:	bf00      	nop

08013318 <uxr_deserialize_GET_INFO_Payload>:
 8013318:	b570      	push	{r4, r5, r6, lr}
 801331a:	2202      	movs	r2, #2
 801331c:	4605      	mov	r5, r0
 801331e:	460e      	mov	r6, r1
 8013320:	f7fb fd9c 	bl	800ee5c <ucdr_deserialize_array_uint8_t>
 8013324:	2202      	movs	r2, #2
 8013326:	4604      	mov	r4, r0
 8013328:	4628      	mov	r0, r5
 801332a:	18b1      	adds	r1, r6, r2
 801332c:	f7fb fd96 	bl	800ee5c <ucdr_deserialize_array_uint8_t>
 8013330:	4603      	mov	r3, r0
 8013332:	1d31      	adds	r1, r6, #4
 8013334:	4628      	mov	r0, r5
 8013336:	401c      	ands	r4, r3
 8013338:	f7fc fa16 	bl	800f768 <ucdr_deserialize_uint32_t>
 801333c:	b2e4      	uxtb	r4, r4
 801333e:	4020      	ands	r0, r4
 8013340:	bd70      	pop	{r4, r5, r6, pc}
 8013342:	bf00      	nop

08013344 <uxr_serialize_DELETE_Payload>:
 8013344:	b570      	push	{r4, r5, r6, lr}
 8013346:	2202      	movs	r2, #2
 8013348:	4605      	mov	r5, r0
 801334a:	460e      	mov	r6, r1
 801334c:	f7fb fd22 	bl	800ed94 <ucdr_serialize_array_uint8_t>
 8013350:	2202      	movs	r2, #2
 8013352:	4604      	mov	r4, r0
 8013354:	4628      	mov	r0, r5
 8013356:	18b1      	adds	r1, r6, r2
 8013358:	f7fb fd1c 	bl	800ed94 <ucdr_serialize_array_uint8_t>
 801335c:	4020      	ands	r0, r4
 801335e:	b2c0      	uxtb	r0, r0
 8013360:	bd70      	pop	{r4, r5, r6, pc}
 8013362:	bf00      	nop

08013364 <uxr_deserialize_STATUS_AGENT_Payload>:
 8013364:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013368:	460e      	mov	r6, r1
 801336a:	4605      	mov	r5, r0
 801336c:	f7fb fecc 	bl	800f108 <ucdr_deserialize_uint8_t>
 8013370:	4604      	mov	r4, r0
 8013372:	1c71      	adds	r1, r6, #1
 8013374:	4628      	mov	r0, r5
 8013376:	f7fb fec7 	bl	800f108 <ucdr_deserialize_uint8_t>
 801337a:	2204      	movs	r2, #4
 801337c:	4681      	mov	r9, r0
 801337e:	4628      	mov	r0, r5
 8013380:	18b1      	adds	r1, r6, r2
 8013382:	f7fb fd6b 	bl	800ee5c <ucdr_deserialize_array_uint8_t>
 8013386:	f106 0108 	add.w	r1, r6, #8
 801338a:	4680      	mov	r8, r0
 801338c:	2202      	movs	r2, #2
 801338e:	4628      	mov	r0, r5
 8013390:	f7fb fd64 	bl	800ee5c <ucdr_deserialize_array_uint8_t>
 8013394:	ea04 0309 	and.w	r3, r4, r9
 8013398:	4607      	mov	r7, r0
 801339a:	2202      	movs	r2, #2
 801339c:	b2db      	uxtb	r3, r3
 801339e:	f106 010a 	add.w	r1, r6, #10
 80133a2:	4628      	mov	r0, r5
 80133a4:	ea03 0408 	and.w	r4, r3, r8
 80133a8:	f7fb fd58 	bl	800ee5c <ucdr_deserialize_array_uint8_t>
 80133ac:	4603      	mov	r3, r0
 80133ae:	4628      	mov	r0, r5
 80133b0:	403c      	ands	r4, r7
 80133b2:	f106 010c 	add.w	r1, r6, #12
 80133b6:	461d      	mov	r5, r3
 80133b8:	f7fb fe78 	bl	800f0ac <ucdr_deserialize_bool>
 80133bc:	4025      	ands	r5, r4
 80133be:	4028      	ands	r0, r5
 80133c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080133c4 <uxr_deserialize_STATUS_Payload>:
 80133c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80133c8:	2202      	movs	r2, #2
 80133ca:	4606      	mov	r6, r0
 80133cc:	460f      	mov	r7, r1
 80133ce:	f7fb fd45 	bl	800ee5c <ucdr_deserialize_array_uint8_t>
 80133d2:	2202      	movs	r2, #2
 80133d4:	4605      	mov	r5, r0
 80133d6:	4630      	mov	r0, r6
 80133d8:	18b9      	adds	r1, r7, r2
 80133da:	f7fb fd3f 	bl	800ee5c <ucdr_deserialize_array_uint8_t>
 80133de:	4680      	mov	r8, r0
 80133e0:	1d39      	adds	r1, r7, #4
 80133e2:	4630      	mov	r0, r6
 80133e4:	f7fb fe90 	bl	800f108 <ucdr_deserialize_uint8_t>
 80133e8:	ea05 0508 	and.w	r5, r5, r8
 80133ec:	4604      	mov	r4, r0
 80133ee:	1d79      	adds	r1, r7, #5
 80133f0:	4630      	mov	r0, r6
 80133f2:	402c      	ands	r4, r5
 80133f4:	f7fb fe88 	bl	800f108 <ucdr_deserialize_uint8_t>
 80133f8:	4020      	ands	r0, r4
 80133fa:	b2c0      	uxtb	r0, r0
 80133fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013400 <uxr_serialize_INFO_Payload>:
 8013400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013404:	2202      	movs	r2, #2
 8013406:	460c      	mov	r4, r1
 8013408:	4605      	mov	r5, r0
 801340a:	f7fb fcc3 	bl	800ed94 <ucdr_serialize_array_uint8_t>
 801340e:	2202      	movs	r2, #2
 8013410:	4680      	mov	r8, r0
 8013412:	4628      	mov	r0, r5
 8013414:	18a1      	adds	r1, r4, r2
 8013416:	f7fb fcbd 	bl	800ed94 <ucdr_serialize_array_uint8_t>
 801341a:	4607      	mov	r7, r0
 801341c:	7921      	ldrb	r1, [r4, #4]
 801341e:	4628      	mov	r0, r5
 8013420:	f7fb fe5c 	bl	800f0dc <ucdr_serialize_uint8_t>
 8013424:	ea08 0807 	and.w	r8, r8, r7
 8013428:	4606      	mov	r6, r0
 801342a:	7961      	ldrb	r1, [r4, #5]
 801342c:	4628      	mov	r0, r5
 801342e:	ea06 0608 	and.w	r6, r6, r8
 8013432:	f7fb fe53 	bl	800f0dc <ucdr_serialize_uint8_t>
 8013436:	7a21      	ldrb	r1, [r4, #8]
 8013438:	4030      	ands	r0, r6
 801343a:	b2c7      	uxtb	r7, r0
 801343c:	4628      	mov	r0, r5
 801343e:	f7fb fe1f 	bl	800f080 <ucdr_serialize_bool>
 8013442:	7a23      	ldrb	r3, [r4, #8]
 8013444:	4606      	mov	r6, r0
 8013446:	b96b      	cbnz	r3, 8013464 <uxr_serialize_INFO_Payload+0x64>
 8013448:	f894 121c 	ldrb.w	r1, [r4, #540]	; 0x21c
 801344c:	4628      	mov	r0, r5
 801344e:	f7fb fe17 	bl	800f080 <ucdr_serialize_bool>
 8013452:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
 8013456:	4030      	ands	r0, r6
 8013458:	b2c6      	uxtb	r6, r0
 801345a:	b983      	cbnz	r3, 801347e <uxr_serialize_INFO_Payload+0x7e>
 801345c:	ea06 0007 	and.w	r0, r6, r7
 8013460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013464:	7b21      	ldrb	r1, [r4, #12]
 8013466:	4628      	mov	r0, r5
 8013468:	f7fb fe38 	bl	800f0dc <ucdr_serialize_uint8_t>
 801346c:	b188      	cbz	r0, 8013492 <uxr_serialize_INFO_Payload+0x92>
 801346e:	f104 010c 	add.w	r1, r4, #12
 8013472:	4628      	mov	r0, r5
 8013474:	f7ff f9d8 	bl	8012828 <uxr_serialize_ObjectVariant.part.0>
 8013478:	4030      	ands	r0, r6
 801347a:	b2c6      	uxtb	r6, r0
 801347c:	e7e4      	b.n	8013448 <uxr_serialize_INFO_Payload+0x48>
 801347e:	f504 7108 	add.w	r1, r4, #544	; 0x220
 8013482:	4628      	mov	r0, r5
 8013484:	f7ff fdb8 	bl	8012ff8 <uxr_serialize_ActivityInfoVariant>
 8013488:	4006      	ands	r6, r0
 801348a:	ea06 0007 	and.w	r0, r6, r7
 801348e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013492:	4606      	mov	r6, r0
 8013494:	e7d8      	b.n	8013448 <uxr_serialize_INFO_Payload+0x48>
 8013496:	bf00      	nop

08013498 <uxr_serialize_READ_DATA_Payload>:
 8013498:	b570      	push	{r4, r5, r6, lr}
 801349a:	2202      	movs	r2, #2
 801349c:	4605      	mov	r5, r0
 801349e:	460e      	mov	r6, r1
 80134a0:	f7fb fc78 	bl	800ed94 <ucdr_serialize_array_uint8_t>
 80134a4:	2202      	movs	r2, #2
 80134a6:	4604      	mov	r4, r0
 80134a8:	4628      	mov	r0, r5
 80134aa:	18b1      	adds	r1, r6, r2
 80134ac:	f7fb fc72 	bl	800ed94 <ucdr_serialize_array_uint8_t>
 80134b0:	4603      	mov	r3, r0
 80134b2:	1d31      	adds	r1, r6, #4
 80134b4:	4628      	mov	r0, r5
 80134b6:	401c      	ands	r4, r3
 80134b8:	f7ff fe5e 	bl	8013178 <uxr_serialize_ReadSpecification>
 80134bc:	b2e4      	uxtb	r4, r4
 80134be:	4020      	ands	r0, r4
 80134c0:	bd70      	pop	{r4, r5, r6, pc}
 80134c2:	bf00      	nop

080134c4 <uxr_serialize_WRITE_DATA_Payload_Data>:
 80134c4:	b570      	push	{r4, r5, r6, lr}
 80134c6:	2202      	movs	r2, #2
 80134c8:	4605      	mov	r5, r0
 80134ca:	460e      	mov	r6, r1
 80134cc:	f7fb fc62 	bl	800ed94 <ucdr_serialize_array_uint8_t>
 80134d0:	2202      	movs	r2, #2
 80134d2:	4604      	mov	r4, r0
 80134d4:	4628      	mov	r0, r5
 80134d6:	18b1      	adds	r1, r6, r2
 80134d8:	f7fb fc5c 	bl	800ed94 <ucdr_serialize_array_uint8_t>
 80134dc:	4020      	ands	r0, r4
 80134de:	b2c0      	uxtb	r0, r0
 80134e0:	bd70      	pop	{r4, r5, r6, pc}
 80134e2:	bf00      	nop

080134e4 <uxr_serialize_ACKNACK_Payload>:
 80134e4:	b570      	push	{r4, r5, r6, lr}
 80134e6:	460c      	mov	r4, r1
 80134e8:	4605      	mov	r5, r0
 80134ea:	460e      	mov	r6, r1
 80134ec:	f834 1b02 	ldrh.w	r1, [r4], #2
 80134f0:	f7fb fe20 	bl	800f134 <ucdr_serialize_uint16_t>
 80134f4:	2202      	movs	r2, #2
 80134f6:	4621      	mov	r1, r4
 80134f8:	4604      	mov	r4, r0
 80134fa:	4628      	mov	r0, r5
 80134fc:	f7fb fc4a 	bl	800ed94 <ucdr_serialize_array_uint8_t>
 8013500:	4603      	mov	r3, r0
 8013502:	7931      	ldrb	r1, [r6, #4]
 8013504:	4628      	mov	r0, r5
 8013506:	401c      	ands	r4, r3
 8013508:	f7fb fde8 	bl	800f0dc <ucdr_serialize_uint8_t>
 801350c:	b2e4      	uxtb	r4, r4
 801350e:	4020      	ands	r0, r4
 8013510:	bd70      	pop	{r4, r5, r6, pc}
 8013512:	bf00      	nop

08013514 <uxr_deserialize_ACKNACK_Payload>:
 8013514:	b570      	push	{r4, r5, r6, lr}
 8013516:	460e      	mov	r6, r1
 8013518:	4605      	mov	r5, r0
 801351a:	f7fb ff0b 	bl	800f334 <ucdr_deserialize_uint16_t>
 801351e:	2202      	movs	r2, #2
 8013520:	4604      	mov	r4, r0
 8013522:	4628      	mov	r0, r5
 8013524:	18b1      	adds	r1, r6, r2
 8013526:	f7fb fc99 	bl	800ee5c <ucdr_deserialize_array_uint8_t>
 801352a:	4603      	mov	r3, r0
 801352c:	1d31      	adds	r1, r6, #4
 801352e:	4628      	mov	r0, r5
 8013530:	401c      	ands	r4, r3
 8013532:	f7fb fde9 	bl	800f108 <ucdr_deserialize_uint8_t>
 8013536:	b2e4      	uxtb	r4, r4
 8013538:	4020      	ands	r0, r4
 801353a:	bd70      	pop	{r4, r5, r6, pc}

0801353c <uxr_serialize_HEARTBEAT_Payload>:
 801353c:	b570      	push	{r4, r5, r6, lr}
 801353e:	460d      	mov	r5, r1
 8013540:	4606      	mov	r6, r0
 8013542:	8809      	ldrh	r1, [r1, #0]
 8013544:	f7fb fdf6 	bl	800f134 <ucdr_serialize_uint16_t>
 8013548:	8869      	ldrh	r1, [r5, #2]
 801354a:	4604      	mov	r4, r0
 801354c:	4630      	mov	r0, r6
 801354e:	f7fb fdf1 	bl	800f134 <ucdr_serialize_uint16_t>
 8013552:	4603      	mov	r3, r0
 8013554:	7929      	ldrb	r1, [r5, #4]
 8013556:	4630      	mov	r0, r6
 8013558:	401c      	ands	r4, r3
 801355a:	f7fb fdbf 	bl	800f0dc <ucdr_serialize_uint8_t>
 801355e:	b2e4      	uxtb	r4, r4
 8013560:	4020      	ands	r0, r4
 8013562:	bd70      	pop	{r4, r5, r6, pc}

08013564 <uxr_deserialize_HEARTBEAT_Payload>:
 8013564:	b570      	push	{r4, r5, r6, lr}
 8013566:	460e      	mov	r6, r1
 8013568:	4605      	mov	r5, r0
 801356a:	f7fb fee3 	bl	800f334 <ucdr_deserialize_uint16_t>
 801356e:	4604      	mov	r4, r0
 8013570:	1cb1      	adds	r1, r6, #2
 8013572:	4628      	mov	r0, r5
 8013574:	f7fb fede 	bl	800f334 <ucdr_deserialize_uint16_t>
 8013578:	4603      	mov	r3, r0
 801357a:	1d31      	adds	r1, r6, #4
 801357c:	4628      	mov	r0, r5
 801357e:	401c      	ands	r4, r3
 8013580:	f7fb fdc2 	bl	800f108 <ucdr_deserialize_uint8_t>
 8013584:	b2e4      	uxtb	r4, r4
 8013586:	4020      	ands	r0, r4
 8013588:	bd70      	pop	{r4, r5, r6, pc}
 801358a:	bf00      	nop

0801358c <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 801358c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013590:	460e      	mov	r6, r1
 8013592:	4605      	mov	r5, r0
 8013594:	f7fc fd60 	bl	8010058 <ucdr_deserialize_int32_t>
 8013598:	4607      	mov	r7, r0
 801359a:	1d31      	adds	r1, r6, #4
 801359c:	4628      	mov	r0, r5
 801359e:	f7fc f8e3 	bl	800f768 <ucdr_deserialize_uint32_t>
 80135a2:	4680      	mov	r8, r0
 80135a4:	f106 0108 	add.w	r1, r6, #8
 80135a8:	4628      	mov	r0, r5
 80135aa:	f7fc fd55 	bl	8010058 <ucdr_deserialize_int32_t>
 80135ae:	ea07 0708 	and.w	r7, r7, r8
 80135b2:	4604      	mov	r4, r0
 80135b4:	f106 010c 	add.w	r1, r6, #12
 80135b8:	4628      	mov	r0, r5
 80135ba:	403c      	ands	r4, r7
 80135bc:	f7fc f8d4 	bl	800f768 <ucdr_deserialize_uint32_t>
 80135c0:	f106 0110 	add.w	r1, r6, #16
 80135c4:	4004      	ands	r4, r0
 80135c6:	4628      	mov	r0, r5
 80135c8:	f7fc fd46 	bl	8010058 <ucdr_deserialize_int32_t>
 80135cc:	4603      	mov	r3, r0
 80135ce:	b2e4      	uxtb	r4, r4
 80135d0:	4628      	mov	r0, r5
 80135d2:	461d      	mov	r5, r3
 80135d4:	f106 0114 	add.w	r1, r6, #20
 80135d8:	f7fc f8c6 	bl	800f768 <ucdr_deserialize_uint32_t>
 80135dc:	402c      	ands	r4, r5
 80135de:	4020      	ands	r0, r4
 80135e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080135e4 <uxr_serialize_SampleIdentity>:
 80135e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80135e8:	4604      	mov	r4, r0
 80135ea:	460d      	mov	r5, r1
 80135ec:	220c      	movs	r2, #12
 80135ee:	f7fb fbd1 	bl	800ed94 <ucdr_serialize_array_uint8_t>
 80135f2:	2203      	movs	r2, #3
 80135f4:	f105 010c 	add.w	r1, r5, #12
 80135f8:	4607      	mov	r7, r0
 80135fa:	4620      	mov	r0, r4
 80135fc:	f7fb fbca 	bl	800ed94 <ucdr_serialize_array_uint8_t>
 8013600:	7be9      	ldrb	r1, [r5, #15]
 8013602:	4680      	mov	r8, r0
 8013604:	4620      	mov	r0, r4
 8013606:	f7fb fd69 	bl	800f0dc <ucdr_serialize_uint8_t>
 801360a:	6929      	ldr	r1, [r5, #16]
 801360c:	4606      	mov	r6, r0
 801360e:	4620      	mov	r0, r4
 8013610:	f7fc fc8a 	bl	800ff28 <ucdr_serialize_int32_t>
 8013614:	ea07 0708 	and.w	r7, r7, r8
 8013618:	4603      	mov	r3, r0
 801361a:	4620      	mov	r0, r4
 801361c:	403e      	ands	r6, r7
 801361e:	6969      	ldr	r1, [r5, #20]
 8013620:	461c      	mov	r4, r3
 8013622:	f7fb ff71 	bl	800f508 <ucdr_serialize_uint32_t>
 8013626:	4034      	ands	r4, r6
 8013628:	4020      	ands	r0, r4
 801362a:	b2c0      	uxtb	r0, r0
 801362c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013630 <uxr_deserialize_SampleIdentity>:
 8013630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013634:	4604      	mov	r4, r0
 8013636:	460d      	mov	r5, r1
 8013638:	220c      	movs	r2, #12
 801363a:	f7fb fc0f 	bl	800ee5c <ucdr_deserialize_array_uint8_t>
 801363e:	2203      	movs	r2, #3
 8013640:	f105 010c 	add.w	r1, r5, #12
 8013644:	4607      	mov	r7, r0
 8013646:	4620      	mov	r0, r4
 8013648:	f7fb fc08 	bl	800ee5c <ucdr_deserialize_array_uint8_t>
 801364c:	f105 010f 	add.w	r1, r5, #15
 8013650:	4680      	mov	r8, r0
 8013652:	4620      	mov	r0, r4
 8013654:	f7fb fd58 	bl	800f108 <ucdr_deserialize_uint8_t>
 8013658:	f105 0110 	add.w	r1, r5, #16
 801365c:	4606      	mov	r6, r0
 801365e:	4620      	mov	r0, r4
 8013660:	f7fc fcfa 	bl	8010058 <ucdr_deserialize_int32_t>
 8013664:	ea07 0708 	and.w	r7, r7, r8
 8013668:	4603      	mov	r3, r0
 801366a:	4620      	mov	r0, r4
 801366c:	403e      	ands	r6, r7
 801366e:	f105 0114 	add.w	r1, r5, #20
 8013672:	461c      	mov	r4, r3
 8013674:	f7fc f878 	bl	800f768 <ucdr_deserialize_uint32_t>
 8013678:	4034      	ands	r4, r6
 801367a:	4020      	ands	r0, r4
 801367c:	b2c0      	uxtb	r0, r0
 801367e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013682:	bf00      	nop

08013684 <racs_services__srv__Control_Event__get_type_description.part.0>:
 8013684:	b510      	push	{r4, lr}
 8013686:	2000      	movs	r0, #0
 8013688:	4c13      	ldr	r4, [pc, #76]	; (80136d8 <racs_services__srv__Control_Event__get_type_description.part.0+0x54>)
 801368a:	f006 f8f1 	bl	8019870 <builtin_interfaces__msg__Time__get_type_description>
 801368e:	300c      	adds	r0, #12
 8013690:	4b12      	ldr	r3, [pc, #72]	; (80136dc <racs_services__srv__Control_Event__get_type_description.part.0+0x58>)
 8013692:	c807      	ldmia	r0, {r0, r1, r2}
 8013694:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8013698:	7823      	ldrb	r3, [r4, #0]
 801369a:	b90b      	cbnz	r3, 80136a0 <racs_services__srv__Control_Event__get_type_description.part.0+0x1c>
 801369c:	2301      	movs	r3, #1
 801369e:	7023      	strb	r3, [r4, #0]
 80136a0:	4a0f      	ldr	r2, [pc, #60]	; (80136e0 <racs_services__srv__Control_Event__get_type_description.part.0+0x5c>)
 80136a2:	4b10      	ldr	r3, [pc, #64]	; (80136e4 <racs_services__srv__Control_Event__get_type_description.part.0+0x60>)
 80136a4:	4c10      	ldr	r4, [pc, #64]	; (80136e8 <racs_services__srv__Control_Event__get_type_description.part.0+0x64>)
 80136a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80136a8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80136ac:	7823      	ldrb	r3, [r4, #0]
 80136ae:	b90b      	cbnz	r3, 80136b4 <racs_services__srv__Control_Event__get_type_description.part.0+0x30>
 80136b0:	2301      	movs	r3, #1
 80136b2:	7023      	strb	r3, [r4, #0]
 80136b4:	4b0d      	ldr	r3, [pc, #52]	; (80136ec <racs_services__srv__Control_Event__get_type_description.part.0+0x68>)
 80136b6:	4c0e      	ldr	r4, [pc, #56]	; (80136f0 <racs_services__srv__Control_Event__get_type_description.part.0+0x6c>)
 80136b8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80136bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80136c0:	2000      	movs	r0, #0
 80136c2:	3418      	adds	r4, #24
 80136c4:	f006 f874 	bl	80197b0 <service_msgs__msg__ServiceEventInfo__get_type_description>
 80136c8:	300c      	adds	r0, #12
 80136ca:	4b0a      	ldr	r3, [pc, #40]	; (80136f4 <racs_services__srv__Control_Event__get_type_description.part.0+0x70>)
 80136cc:	c807      	ldmia	r0, {r0, r1, r2}
 80136ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80136d2:	2201      	movs	r2, #1
 80136d4:	701a      	strb	r2, [r3, #0]
 80136d6:	bd10      	pop	{r4, pc}
 80136d8:	200103d8 	.word	0x200103d8
 80136dc:	20000dd0 	.word	0x20000dd0
 80136e0:	0801e73c 	.word	0x0801e73c
 80136e4:	20000de8 	.word	0x20000de8
 80136e8:	200103d6 	.word	0x200103d6
 80136ec:	0801e718 	.word	0x0801e718
 80136f0:	20000e00 	.word	0x20000e00
 80136f4:	200103d5 	.word	0x200103d5

080136f8 <racs_services__srv__Control__get_type_hash>:
 80136f8:	4800      	ldr	r0, [pc, #0]	; (80136fc <racs_services__srv__Control__get_type_hash+0x4>)
 80136fa:	4770      	bx	lr
 80136fc:	20000ca0 	.word	0x20000ca0

08013700 <racs_services__srv__Control_Request__get_type_hash>:
 8013700:	4800      	ldr	r0, [pc, #0]	; (8013704 <racs_services__srv__Control_Request__get_type_hash+0x4>)
 8013702:	4770      	bx	lr
 8013704:	20000c7c 	.word	0x20000c7c

08013708 <racs_services__srv__Control_Response__get_type_hash>:
 8013708:	4800      	ldr	r0, [pc, #0]	; (801370c <racs_services__srv__Control_Response__get_type_hash+0x4>)
 801370a:	4770      	bx	lr
 801370c:	20000c58 	.word	0x20000c58

08013710 <racs_services__srv__Control_Event__get_type_hash>:
 8013710:	4800      	ldr	r0, [pc, #0]	; (8013714 <racs_services__srv__Control_Event__get_type_hash+0x4>)
 8013712:	4770      	bx	lr
 8013714:	20000c34 	.word	0x20000c34

08013718 <racs_services__srv__Control__get_type_description>:
 8013718:	b538      	push	{r3, r4, r5, lr}
 801371a:	4d1c      	ldr	r5, [pc, #112]	; (801378c <racs_services__srv__Control__get_type_description+0x74>)
 801371c:	7828      	ldrb	r0, [r5, #0]
 801371e:	b108      	cbz	r0, 8013724 <racs_services__srv__Control__get_type_description+0xc>
 8013720:	481b      	ldr	r0, [pc, #108]	; (8013790 <racs_services__srv__Control__get_type_description+0x78>)
 8013722:	bd38      	pop	{r3, r4, r5, pc}
 8013724:	f006 f8a4 	bl	8019870 <builtin_interfaces__msg__Time__get_type_description>
 8013728:	300c      	adds	r0, #12
 801372a:	4b1a      	ldr	r3, [pc, #104]	; (8013794 <racs_services__srv__Control__get_type_description+0x7c>)
 801372c:	c807      	ldmia	r0, {r0, r1, r2}
 801372e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8013732:	4b19      	ldr	r3, [pc, #100]	; (8013798 <racs_services__srv__Control__get_type_description+0x80>)
 8013734:	781b      	ldrb	r3, [r3, #0]
 8013736:	b32b      	cbz	r3, 8013784 <racs_services__srv__Control__get_type_description+0x6c>
 8013738:	4a18      	ldr	r2, [pc, #96]	; (801379c <racs_services__srv__Control__get_type_description+0x84>)
 801373a:	4b19      	ldr	r3, [pc, #100]	; (80137a0 <racs_services__srv__Control__get_type_description+0x88>)
 801373c:	4c19      	ldr	r4, [pc, #100]	; (80137a4 <racs_services__srv__Control__get_type_description+0x8c>)
 801373e:	ca07      	ldmia	r2, {r0, r1, r2}
 8013740:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8013744:	7823      	ldrb	r3, [r4, #0]
 8013746:	b90b      	cbnz	r3, 801374c <racs_services__srv__Control__get_type_description+0x34>
 8013748:	2301      	movs	r3, #1
 801374a:	7023      	strb	r3, [r4, #0]
 801374c:	4a16      	ldr	r2, [pc, #88]	; (80137a8 <racs_services__srv__Control__get_type_description+0x90>)
 801374e:	4b17      	ldr	r3, [pc, #92]	; (80137ac <racs_services__srv__Control__get_type_description+0x94>)
 8013750:	4c17      	ldr	r4, [pc, #92]	; (80137b0 <racs_services__srv__Control__get_type_description+0x98>)
 8013752:	ca07      	ldmia	r2, {r0, r1, r2}
 8013754:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8013758:	7823      	ldrb	r3, [r4, #0]
 801375a:	b90b      	cbnz	r3, 8013760 <racs_services__srv__Control__get_type_description+0x48>
 801375c:	2301      	movs	r3, #1
 801375e:	7023      	strb	r3, [r4, #0]
 8013760:	4b14      	ldr	r3, [pc, #80]	; (80137b4 <racs_services__srv__Control__get_type_description+0x9c>)
 8013762:	4c15      	ldr	r4, [pc, #84]	; (80137b8 <racs_services__srv__Control__get_type_description+0xa0>)
 8013764:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8013768:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801376c:	2000      	movs	r0, #0
 801376e:	3418      	adds	r4, #24
 8013770:	f006 f81e 	bl	80197b0 <service_msgs__msg__ServiceEventInfo__get_type_description>
 8013774:	300c      	adds	r0, #12
 8013776:	2301      	movs	r3, #1
 8013778:	c807      	ldmia	r0, {r0, r1, r2}
 801377a:	702b      	strb	r3, [r5, #0]
 801377c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8013780:	4803      	ldr	r0, [pc, #12]	; (8013790 <racs_services__srv__Control__get_type_description+0x78>)
 8013782:	bd38      	pop	{r3, r4, r5, pc}
 8013784:	f7ff ff7e 	bl	8013684 <racs_services__srv__Control_Event__get_type_description.part.0>
 8013788:	e7d6      	b.n	8013738 <racs_services__srv__Control__get_type_description+0x20>
 801378a:	bf00      	nop
 801378c:	200103d9 	.word	0x200103d9
 8013790:	0801e754 	.word	0x0801e754
 8013794:	200010f8 	.word	0x200010f8
 8013798:	200103d5 	.word	0x200103d5
 801379c:	0801e6f4 	.word	0x0801e6f4
 80137a0:	20001110 	.word	0x20001110
 80137a4:	200103d8 	.word	0x200103d8
 80137a8:	0801e73c 	.word	0x0801e73c
 80137ac:	20001128 	.word	0x20001128
 80137b0:	200103d6 	.word	0x200103d6
 80137b4:	0801e718 	.word	0x0801e718
 80137b8:	20001140 	.word	0x20001140

080137bc <racs_services__srv__Control_Request__get_type_description>:
 80137bc:	4b03      	ldr	r3, [pc, #12]	; (80137cc <racs_services__srv__Control_Request__get_type_description+0x10>)
 80137be:	781a      	ldrb	r2, [r3, #0]
 80137c0:	b90a      	cbnz	r2, 80137c6 <racs_services__srv__Control_Request__get_type_description+0xa>
 80137c2:	2201      	movs	r2, #1
 80137c4:	701a      	strb	r2, [r3, #0]
 80137c6:	4802      	ldr	r0, [pc, #8]	; (80137d0 <racs_services__srv__Control_Request__get_type_description+0x14>)
 80137c8:	4770      	bx	lr
 80137ca:	bf00      	nop
 80137cc:	200103d8 	.word	0x200103d8
 80137d0:	0801e730 	.word	0x0801e730

080137d4 <racs_services__srv__Control_Response__get_type_description>:
 80137d4:	4b03      	ldr	r3, [pc, #12]	; (80137e4 <racs_services__srv__Control_Response__get_type_description+0x10>)
 80137d6:	781a      	ldrb	r2, [r3, #0]
 80137d8:	b90a      	cbnz	r2, 80137de <racs_services__srv__Control_Response__get_type_description+0xa>
 80137da:	2201      	movs	r2, #1
 80137dc:	701a      	strb	r2, [r3, #0]
 80137de:	4802      	ldr	r0, [pc, #8]	; (80137e8 <racs_services__srv__Control_Response__get_type_description+0x14>)
 80137e0:	4770      	bx	lr
 80137e2:	bf00      	nop
 80137e4:	200103d6 	.word	0x200103d6
 80137e8:	0801e70c 	.word	0x0801e70c

080137ec <racs_services__srv__Control_Event__get_type_description>:
 80137ec:	b508      	push	{r3, lr}
 80137ee:	4b04      	ldr	r3, [pc, #16]	; (8013800 <racs_services__srv__Control_Event__get_type_description+0x14>)
 80137f0:	781b      	ldrb	r3, [r3, #0]
 80137f2:	b10b      	cbz	r3, 80137f8 <racs_services__srv__Control_Event__get_type_description+0xc>
 80137f4:	4803      	ldr	r0, [pc, #12]	; (8013804 <racs_services__srv__Control_Event__get_type_description+0x18>)
 80137f6:	bd08      	pop	{r3, pc}
 80137f8:	f7ff ff44 	bl	8013684 <racs_services__srv__Control_Event__get_type_description.part.0>
 80137fc:	4801      	ldr	r0, [pc, #4]	; (8013804 <racs_services__srv__Control_Event__get_type_description+0x18>)
 80137fe:	bd08      	pop	{r3, pc}
 8013800:	200103d5 	.word	0x200103d5
 8013804:	0801e6e8 	.word	0x0801e6e8

08013808 <racs_services__srv__Control__get_type_description_sources>:
 8013808:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801380c:	4b2c      	ldr	r3, [pc, #176]	; (80138c0 <racs_services__srv__Control__get_type_description_sources+0xb8>)
 801380e:	f893 9000 	ldrb.w	r9, [r3]
 8013812:	f1b9 0f00 	cmp.w	r9, #0
 8013816:	d002      	beq.n	801381e <racs_services__srv__Control__get_type_description_sources+0x16>
 8013818:	482a      	ldr	r0, [pc, #168]	; (80138c4 <racs_services__srv__Control__get_type_description_sources+0xbc>)
 801381a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801381e:	4d2a      	ldr	r5, [pc, #168]	; (80138c8 <racs_services__srv__Control__get_type_description_sources+0xc0>)
 8013820:	4c2a      	ldr	r4, [pc, #168]	; (80138cc <racs_services__srv__Control__get_type_description_sources+0xc4>)
 8013822:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 80138d4 <racs_services__srv__Control__get_type_description_sources+0xcc>
 8013826:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 80138d8 <racs_services__srv__Control__get_type_description_sources+0xd0>
 801382a:	4e29      	ldr	r6, [pc, #164]	; (80138d0 <racs_services__srv__Control__get_type_description_sources+0xc8>)
 801382c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801382e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013830:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013832:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013834:	682b      	ldr	r3, [r5, #0]
 8013836:	4625      	mov	r5, r4
 8013838:	4648      	mov	r0, r9
 801383a:	f104 0a28 	add.w	sl, r4, #40	; 0x28
 801383e:	f845 3b04 	str.w	r3, [r5], #4
 8013842:	f104 074c 	add.w	r7, r4, #76	; 0x4c
 8013846:	f006 f81f 	bl	8019888 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 801384a:	4684      	mov	ip, r0
 801384c:	f104 0e70 	add.w	lr, r4, #112	; 0x70
 8013850:	3494      	adds	r4, #148	; 0x94
 8013852:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013856:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013858:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801385c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801385e:	f8dc 3000 	ldr.w	r3, [ip]
 8013862:	602b      	str	r3, [r5, #0]
 8013864:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 8013868:	e8aa 000f 	stmia.w	sl!, {r0, r1, r2, r3}
 801386c:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 8013870:	e8aa 000f 	stmia.w	sl!, {r0, r1, r2, r3}
 8013874:	f8db 3000 	ldr.w	r3, [fp]
 8013878:	f8ca 3000 	str.w	r3, [sl]
 801387c:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 8013880:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8013882:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 8013886:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8013888:	f8d8 3000 	ldr.w	r3, [r8]
 801388c:	603b      	str	r3, [r7, #0]
 801388e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8013890:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013894:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8013896:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801389a:	6833      	ldr	r3, [r6, #0]
 801389c:	4648      	mov	r0, r9
 801389e:	f8ce 3000 	str.w	r3, [lr]
 80138a2:	f005 ff9d 	bl	80197e0 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source>
 80138a6:	2301      	movs	r3, #1
 80138a8:	4a05      	ldr	r2, [pc, #20]	; (80138c0 <racs_services__srv__Control__get_type_description_sources+0xb8>)
 80138aa:	4605      	mov	r5, r0
 80138ac:	7013      	strb	r3, [r2, #0]
 80138ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80138b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80138b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80138b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80138b6:	682b      	ldr	r3, [r5, #0]
 80138b8:	4802      	ldr	r0, [pc, #8]	; (80138c4 <racs_services__srv__Control__get_type_description_sources+0xbc>)
 80138ba:	6023      	str	r3, [r4, #0]
 80138bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138c0:	200103d4 	.word	0x200103d4
 80138c4:	0801e82c 	.word	0x0801e82c
 80138c8:	0801e7e4 	.word	0x0801e7e4
 80138cc:	20010490 	.word	0x20010490
 80138d0:	0801e79c 	.word	0x0801e79c
 80138d4:	0801e778 	.word	0x0801e778
 80138d8:	0801e7c0 	.word	0x0801e7c0

080138dc <racs_services__srv__Control_Request__get_type_description_sources>:
 80138dc:	4b09      	ldr	r3, [pc, #36]	; (8013904 <racs_services__srv__Control_Request__get_type_description_sources+0x28>)
 80138de:	781a      	ldrb	r2, [r3, #0]
 80138e0:	b96a      	cbnz	r2, 80138fe <racs_services__srv__Control_Request__get_type_description_sources+0x22>
 80138e2:	2201      	movs	r2, #1
 80138e4:	b430      	push	{r4, r5}
 80138e6:	4d08      	ldr	r5, [pc, #32]	; (8013908 <racs_services__srv__Control_Request__get_type_description_sources+0x2c>)
 80138e8:	4c08      	ldr	r4, [pc, #32]	; (801390c <racs_services__srv__Control_Request__get_type_description_sources+0x30>)
 80138ea:	701a      	strb	r2, [r3, #0]
 80138ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80138ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80138f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80138f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80138f4:	682b      	ldr	r3, [r5, #0]
 80138f6:	4806      	ldr	r0, [pc, #24]	; (8013910 <racs_services__srv__Control_Request__get_type_description_sources+0x34>)
 80138f8:	6023      	str	r3, [r4, #0]
 80138fa:	bc30      	pop	{r4, r5}
 80138fc:	4770      	bx	lr
 80138fe:	4804      	ldr	r0, [pc, #16]	; (8013910 <racs_services__srv__Control_Request__get_type_description_sources+0x34>)
 8013900:	4770      	bx	lr
 8013902:	bf00      	nop
 8013904:	200103db 	.word	0x200103db
 8013908:	0801e7c0 	.word	0x0801e7c0
 801390c:	2001058c 	.word	0x2001058c
 8013910:	0801e820 	.word	0x0801e820

08013914 <racs_services__srv__Control_Response__get_type_description_sources>:
 8013914:	4b09      	ldr	r3, [pc, #36]	; (801393c <racs_services__srv__Control_Response__get_type_description_sources+0x28>)
 8013916:	781a      	ldrb	r2, [r3, #0]
 8013918:	b96a      	cbnz	r2, 8013936 <racs_services__srv__Control_Response__get_type_description_sources+0x22>
 801391a:	2201      	movs	r2, #1
 801391c:	b430      	push	{r4, r5}
 801391e:	4d08      	ldr	r5, [pc, #32]	; (8013940 <racs_services__srv__Control_Response__get_type_description_sources+0x2c>)
 8013920:	4c08      	ldr	r4, [pc, #32]	; (8013944 <racs_services__srv__Control_Response__get_type_description_sources+0x30>)
 8013922:	701a      	strb	r2, [r3, #0]
 8013924:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013926:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013928:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801392a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801392c:	682b      	ldr	r3, [r5, #0]
 801392e:	4806      	ldr	r0, [pc, #24]	; (8013948 <racs_services__srv__Control_Response__get_type_description_sources+0x34>)
 8013930:	6023      	str	r3, [r4, #0]
 8013932:	bc30      	pop	{r4, r5}
 8013934:	4770      	bx	lr
 8013936:	4804      	ldr	r0, [pc, #16]	; (8013948 <racs_services__srv__Control_Response__get_type_description_sources+0x34>)
 8013938:	4770      	bx	lr
 801393a:	bf00      	nop
 801393c:	200103da 	.word	0x200103da
 8013940:	0801e79c 	.word	0x0801e79c
 8013944:	20010568 	.word	0x20010568
 8013948:	0801e814 	.word	0x0801e814

0801394c <racs_services__srv__Control_Event__get_type_description_sources>:
 801394c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013950:	4e27      	ldr	r6, [pc, #156]	; (80139f0 <racs_services__srv__Control_Event__get_type_description_sources+0xa4>)
 8013952:	f896 8000 	ldrb.w	r8, [r6]
 8013956:	f1b8 0f00 	cmp.w	r8, #0
 801395a:	d002      	beq.n	8013962 <racs_services__srv__Control_Event__get_type_description_sources+0x16>
 801395c:	4825      	ldr	r0, [pc, #148]	; (80139f4 <racs_services__srv__Control_Event__get_type_description_sources+0xa8>)
 801395e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013962:	4d25      	ldr	r5, [pc, #148]	; (80139f8 <racs_services__srv__Control_Event__get_type_description_sources+0xac>)
 8013964:	4c25      	ldr	r4, [pc, #148]	; (80139fc <racs_services__srv__Control_Event__get_type_description_sources+0xb0>)
 8013966:	f8df a09c 	ldr.w	sl, [pc, #156]	; 8013a04 <racs_services__srv__Control_Event__get_type_description_sources+0xb8>
 801396a:	4f25      	ldr	r7, [pc, #148]	; (8013a00 <racs_services__srv__Control_Event__get_type_description_sources+0xb4>)
 801396c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801396e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013970:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013972:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013974:	682b      	ldr	r3, [r5, #0]
 8013976:	4625      	mov	r5, r4
 8013978:	4640      	mov	r0, r8
 801397a:	f104 0928 	add.w	r9, r4, #40	; 0x28
 801397e:	f845 3b04 	str.w	r3, [r5], #4
 8013982:	f005 ff81 	bl	8019888 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 8013986:	4684      	mov	ip, r0
 8013988:	f104 0e4c 	add.w	lr, r4, #76	; 0x4c
 801398c:	3470      	adds	r4, #112	; 0x70
 801398e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013992:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013994:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013998:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801399a:	f8dc 3000 	ldr.w	r3, [ip]
 801399e:	602b      	str	r3, [r5, #0]
 80139a0:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
 80139a4:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 80139a8:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
 80139ac:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 80139b0:	f8da 3000 	ldr.w	r3, [sl]
 80139b4:	f8c9 3000 	str.w	r3, [r9]
 80139b8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80139ba:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80139be:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80139c0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80139c4:	683b      	ldr	r3, [r7, #0]
 80139c6:	4640      	mov	r0, r8
 80139c8:	f8ce 3000 	str.w	r3, [lr]
 80139cc:	f005 ff08 	bl	80197e0 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source>
 80139d0:	2301      	movs	r3, #1
 80139d2:	4684      	mov	ip, r0
 80139d4:	7033      	strb	r3, [r6, #0]
 80139d6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80139da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80139dc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80139e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80139e2:	f8dc 3000 	ldr.w	r3, [ip]
 80139e6:	4803      	ldr	r0, [pc, #12]	; (80139f4 <racs_services__srv__Control_Event__get_type_description_sources+0xa8>)
 80139e8:	6023      	str	r3, [r4, #0]
 80139ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80139ee:	bf00      	nop
 80139f0:	200103d7 	.word	0x200103d7
 80139f4:	0801e808 	.word	0x0801e808
 80139f8:	0801e778 	.word	0x0801e778
 80139fc:	200103dc 	.word	0x200103dc
 8013a00:	0801e79c 	.word	0x0801e79c
 8013a04:	0801e7c0 	.word	0x0801e7c0

08013a08 <racs_services__srv__Control_Event__fini.part.0>:
 8013a08:	b510      	push	{r4, lr}
 8013a0a:	b086      	sub	sp, #24
 8013a0c:	4604      	mov	r4, r0
 8013a0e:	f005 ff25 	bl	801985c <service_msgs__msg__ServiceEventInfo__fini>
 8013a12:	a801      	add	r0, sp, #4
 8013a14:	f7fa f912 	bl	800dc3c <rcutils_get_default_allocator>
 8013a18:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8013a1a:	b130      	cbz	r0, 8013a2a <racs_services__srv__Control_Event__fini.part.0+0x22>
 8013a1c:	9b02      	ldr	r3, [sp, #8]
 8013a1e:	9905      	ldr	r1, [sp, #20]
 8013a20:	4798      	blx	r3
 8013a22:	2300      	movs	r3, #0
 8013a24:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 8013a28:	6323      	str	r3, [r4, #48]	; 0x30
 8013a2a:	a801      	add	r0, sp, #4
 8013a2c:	f7fa f906 	bl	800dc3c <rcutils_get_default_allocator>
 8013a30:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8013a32:	b130      	cbz	r0, 8013a42 <racs_services__srv__Control_Event__fini.part.0+0x3a>
 8013a34:	9b02      	ldr	r3, [sp, #8]
 8013a36:	9905      	ldr	r1, [sp, #20]
 8013a38:	4798      	blx	r3
 8013a3a:	2300      	movs	r3, #0
 8013a3c:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 8013a40:	63e3      	str	r3, [r4, #60]	; 0x3c
 8013a42:	b006      	add	sp, #24
 8013a44:	bd10      	pop	{r4, pc}
 8013a46:	bf00      	nop

08013a48 <racs_services__srv__Control_Request__init>:
 8013a48:	3800      	subs	r0, #0
 8013a4a:	bf18      	it	ne
 8013a4c:	2001      	movne	r0, #1
 8013a4e:	4770      	bx	lr

08013a50 <racs_services__srv__Control_Request__fini>:
 8013a50:	4770      	bx	lr
 8013a52:	bf00      	nop

08013a54 <racs_services__srv__Control_Request__copy>:
 8013a54:	b168      	cbz	r0, 8013a72 <racs_services__srv__Control_Request__copy+0x1e>
 8013a56:	b161      	cbz	r1, 8013a72 <racs_services__srv__Control_Request__copy+0x1e>
 8013a58:	220c      	movs	r2, #12
 8013a5a:	b508      	push	{r3, lr}
 8013a5c:	4603      	mov	r3, r0
 8013a5e:	4608      	mov	r0, r1
 8013a60:	f833 1b02 	ldrh.w	r1, [r3], #2
 8013a64:	f820 1b02 	strh.w	r1, [r0], #2
 8013a68:	4619      	mov	r1, r3
 8013a6a:	f008 fe51 	bl	801c710 <memmove>
 8013a6e:	2001      	movs	r0, #1
 8013a70:	bd08      	pop	{r3, pc}
 8013a72:	2000      	movs	r0, #0
 8013a74:	4770      	bx	lr
 8013a76:	bf00      	nop

08013a78 <racs_services__srv__Control_Request__Sequence__init>:
 8013a78:	b530      	push	{r4, r5, lr}
 8013a7a:	4604      	mov	r4, r0
 8013a7c:	b087      	sub	sp, #28
 8013a7e:	b148      	cbz	r0, 8013a94 <racs_services__srv__Control_Request__Sequence__init+0x1c>
 8013a80:	460d      	mov	r5, r1
 8013a82:	a801      	add	r0, sp, #4
 8013a84:	f7fa f8da 	bl	800dc3c <rcutils_get_default_allocator>
 8013a88:	b935      	cbnz	r5, 8013a98 <racs_services__srv__Control_Request__Sequence__init+0x20>
 8013a8a:	462b      	mov	r3, r5
 8013a8c:	2001      	movs	r0, #1
 8013a8e:	60a5      	str	r5, [r4, #8]
 8013a90:	e9c4 3500 	strd	r3, r5, [r4]
 8013a94:	b007      	add	sp, #28
 8013a96:	bd30      	pop	{r4, r5, pc}
 8013a98:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8013a9c:	210e      	movs	r1, #14
 8013a9e:	4628      	mov	r0, r5
 8013aa0:	4798      	blx	r3
 8013aa2:	4603      	mov	r3, r0
 8013aa4:	2800      	cmp	r0, #0
 8013aa6:	d1f1      	bne.n	8013a8c <racs_services__srv__Control_Request__Sequence__init+0x14>
 8013aa8:	e7f4      	b.n	8013a94 <racs_services__srv__Control_Request__Sequence__init+0x1c>
 8013aaa:	bf00      	nop

08013aac <racs_services__srv__Control_Request__Sequence__fini>:
 8013aac:	b180      	cbz	r0, 8013ad0 <racs_services__srv__Control_Request__Sequence__fini+0x24>
 8013aae:	b510      	push	{r4, lr}
 8013ab0:	b086      	sub	sp, #24
 8013ab2:	4604      	mov	r4, r0
 8013ab4:	a801      	add	r0, sp, #4
 8013ab6:	f7fa f8c1 	bl	800dc3c <rcutils_get_default_allocator>
 8013aba:	6820      	ldr	r0, [r4, #0]
 8013abc:	b130      	cbz	r0, 8013acc <racs_services__srv__Control_Request__Sequence__fini+0x20>
 8013abe:	9b02      	ldr	r3, [sp, #8]
 8013ac0:	9905      	ldr	r1, [sp, #20]
 8013ac2:	4798      	blx	r3
 8013ac4:	2300      	movs	r3, #0
 8013ac6:	e9c4 3300 	strd	r3, r3, [r4]
 8013aca:	60a3      	str	r3, [r4, #8]
 8013acc:	b006      	add	sp, #24
 8013ace:	bd10      	pop	{r4, pc}
 8013ad0:	4770      	bx	lr
 8013ad2:	bf00      	nop

08013ad4 <racs_services__srv__Control_Response__init>:
 8013ad4:	3800      	subs	r0, #0
 8013ad6:	bf18      	it	ne
 8013ad8:	2001      	movne	r0, #1
 8013ada:	4770      	bx	lr

08013adc <racs_services__srv__Control_Response__fini>:
 8013adc:	4770      	bx	lr
 8013ade:	bf00      	nop

08013ae0 <racs_services__srv__Control_Response__copy>:
 8013ae0:	b120      	cbz	r0, 8013aec <racs_services__srv__Control_Response__copy+0xc>
 8013ae2:	b119      	cbz	r1, 8013aec <racs_services__srv__Control_Response__copy+0xc>
 8013ae4:	7803      	ldrb	r3, [r0, #0]
 8013ae6:	2001      	movs	r0, #1
 8013ae8:	700b      	strb	r3, [r1, #0]
 8013aea:	4770      	bx	lr
 8013aec:	2000      	movs	r0, #0
 8013aee:	4770      	bx	lr

08013af0 <racs_services__srv__Control_Response__Sequence__init>:
 8013af0:	b530      	push	{r4, r5, lr}
 8013af2:	4604      	mov	r4, r0
 8013af4:	b087      	sub	sp, #28
 8013af6:	b148      	cbz	r0, 8013b0c <racs_services__srv__Control_Response__Sequence__init+0x1c>
 8013af8:	460d      	mov	r5, r1
 8013afa:	a801      	add	r0, sp, #4
 8013afc:	f7fa f89e 	bl	800dc3c <rcutils_get_default_allocator>
 8013b00:	b935      	cbnz	r5, 8013b10 <racs_services__srv__Control_Response__Sequence__init+0x20>
 8013b02:	462b      	mov	r3, r5
 8013b04:	2001      	movs	r0, #1
 8013b06:	60a5      	str	r5, [r4, #8]
 8013b08:	e9c4 3500 	strd	r3, r5, [r4]
 8013b0c:	b007      	add	sp, #28
 8013b0e:	bd30      	pop	{r4, r5, pc}
 8013b10:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8013b14:	2101      	movs	r1, #1
 8013b16:	4628      	mov	r0, r5
 8013b18:	4798      	blx	r3
 8013b1a:	4603      	mov	r3, r0
 8013b1c:	2800      	cmp	r0, #0
 8013b1e:	d1f1      	bne.n	8013b04 <racs_services__srv__Control_Response__Sequence__init+0x14>
 8013b20:	e7f4      	b.n	8013b0c <racs_services__srv__Control_Response__Sequence__init+0x1c>
 8013b22:	bf00      	nop

08013b24 <racs_services__srv__Control_Response__Sequence__fini>:
 8013b24:	b180      	cbz	r0, 8013b48 <racs_services__srv__Control_Response__Sequence__fini+0x24>
 8013b26:	b510      	push	{r4, lr}
 8013b28:	b086      	sub	sp, #24
 8013b2a:	4604      	mov	r4, r0
 8013b2c:	a801      	add	r0, sp, #4
 8013b2e:	f7fa f885 	bl	800dc3c <rcutils_get_default_allocator>
 8013b32:	6820      	ldr	r0, [r4, #0]
 8013b34:	b130      	cbz	r0, 8013b44 <racs_services__srv__Control_Response__Sequence__fini+0x20>
 8013b36:	9b02      	ldr	r3, [sp, #8]
 8013b38:	9905      	ldr	r1, [sp, #20]
 8013b3a:	4798      	blx	r3
 8013b3c:	2300      	movs	r3, #0
 8013b3e:	e9c4 3300 	strd	r3, r3, [r4]
 8013b42:	60a3      	str	r3, [r4, #8]
 8013b44:	b006      	add	sp, #24
 8013b46:	bd10      	pop	{r4, pc}
 8013b48:	4770      	bx	lr
 8013b4a:	bf00      	nop

08013b4c <racs_services__srv__Control_Event__init>:
 8013b4c:	b570      	push	{r4, r5, r6, lr}
 8013b4e:	4604      	mov	r4, r0
 8013b50:	b086      	sub	sp, #24
 8013b52:	b1c8      	cbz	r0, 8013b88 <racs_services__srv__Control_Event__init+0x3c>
 8013b54:	f005 fe70 	bl	8019838 <service_msgs__msg__ServiceEventInfo__init>
 8013b58:	4605      	mov	r5, r0
 8013b5a:	b178      	cbz	r0, 8013b7c <racs_services__srv__Control_Event__init+0x30>
 8013b5c:	2600      	movs	r6, #0
 8013b5e:	a801      	add	r0, sp, #4
 8013b60:	f7fa f86c 	bl	800dc3c <rcutils_get_default_allocator>
 8013b64:	a801      	add	r0, sp, #4
 8013b66:	6326      	str	r6, [r4, #48]	; 0x30
 8013b68:	e9c4 660a 	strd	r6, r6, [r4, #40]	; 0x28
 8013b6c:	f7fa f866 	bl	800dc3c <rcutils_get_default_allocator>
 8013b70:	4628      	mov	r0, r5
 8013b72:	63e6      	str	r6, [r4, #60]	; 0x3c
 8013b74:	e9c4 660d 	strd	r6, r6, [r4, #52]	; 0x34
 8013b78:	b006      	add	sp, #24
 8013b7a:	bd70      	pop	{r4, r5, r6, pc}
 8013b7c:	4620      	mov	r0, r4
 8013b7e:	f7ff ff43 	bl	8013a08 <racs_services__srv__Control_Event__fini.part.0>
 8013b82:	4628      	mov	r0, r5
 8013b84:	b006      	add	sp, #24
 8013b86:	bd70      	pop	{r4, r5, r6, pc}
 8013b88:	4605      	mov	r5, r0
 8013b8a:	4628      	mov	r0, r5
 8013b8c:	b006      	add	sp, #24
 8013b8e:	bd70      	pop	{r4, r5, r6, pc}

08013b90 <racs_services__srv__Control_Event__fini>:
 8013b90:	b1f0      	cbz	r0, 8013bd0 <racs_services__srv__Control_Event__fini+0x40>
 8013b92:	b510      	push	{r4, lr}
 8013b94:	b086      	sub	sp, #24
 8013b96:	4604      	mov	r4, r0
 8013b98:	f005 fe60 	bl	801985c <service_msgs__msg__ServiceEventInfo__fini>
 8013b9c:	a801      	add	r0, sp, #4
 8013b9e:	f7fa f84d 	bl	800dc3c <rcutils_get_default_allocator>
 8013ba2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8013ba4:	b130      	cbz	r0, 8013bb4 <racs_services__srv__Control_Event__fini+0x24>
 8013ba6:	9b02      	ldr	r3, [sp, #8]
 8013ba8:	9905      	ldr	r1, [sp, #20]
 8013baa:	4798      	blx	r3
 8013bac:	2300      	movs	r3, #0
 8013bae:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 8013bb2:	6323      	str	r3, [r4, #48]	; 0x30
 8013bb4:	a801      	add	r0, sp, #4
 8013bb6:	f7fa f841 	bl	800dc3c <rcutils_get_default_allocator>
 8013bba:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8013bbc:	b130      	cbz	r0, 8013bcc <racs_services__srv__Control_Event__fini+0x3c>
 8013bbe:	9b02      	ldr	r3, [sp, #8]
 8013bc0:	9905      	ldr	r1, [sp, #20]
 8013bc2:	4798      	blx	r3
 8013bc4:	2300      	movs	r3, #0
 8013bc6:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 8013bca:	63e3      	str	r3, [r4, #60]	; 0x3c
 8013bcc:	b006      	add	sp, #24
 8013bce:	bd10      	pop	{r4, pc}
 8013bd0:	4770      	bx	lr
 8013bd2:	bf00      	nop

08013bd4 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control>:
 8013bd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013bd8:	2900      	cmp	r1, #0
 8013bda:	d04d      	beq.n	8013c78 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control+0xa4>
 8013bdc:	4605      	mov	r5, r0
 8013bde:	2800      	cmp	r0, #0
 8013be0:	d04a      	beq.n	8013c78 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control+0xa4>
 8013be2:	460e      	mov	r6, r1
 8013be4:	4698      	mov	r8, r3
 8013be6:	2040      	movs	r0, #64	; 0x40
 8013be8:	680b      	ldr	r3, [r1, #0]
 8013bea:	6909      	ldr	r1, [r1, #16]
 8013bec:	4617      	mov	r7, r2
 8013bee:	4798      	blx	r3
 8013bf0:	4604      	mov	r4, r0
 8013bf2:	f7ff ffab 	bl	8013b4c <racs_services__srv__Control_Event__init>
 8013bf6:	4684      	mov	ip, r0
 8013bf8:	b370      	cbz	r0, 8013c58 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control+0x84>
 8013bfa:	782b      	ldrb	r3, [r5, #0]
 8013bfc:	7023      	strb	r3, [r4, #0]
 8013bfe:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
 8013c02:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 8013c06:	e9c4 2301 	strd	r2, r3, [r4, #4]
 8013c0a:	e9c4 0108 	strd	r0, r1, [r4, #32]
 8013c0e:	68e8      	ldr	r0, [r5, #12]
 8013c10:	6929      	ldr	r1, [r5, #16]
 8013c12:	696a      	ldr	r2, [r5, #20]
 8013c14:	69ab      	ldr	r3, [r5, #24]
 8013c16:	60e0      	str	r0, [r4, #12]
 8013c18:	6121      	str	r1, [r4, #16]
 8013c1a:	6162      	str	r2, [r4, #20]
 8013c1c:	61a3      	str	r3, [r4, #24]
 8013c1e:	b157      	cbz	r7, 8013c36 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control+0x62>
 8013c20:	2101      	movs	r1, #1
 8013c22:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8013c26:	f7ff ff27 	bl	8013a78 <racs_services__srv__Control_Request__Sequence__init>
 8013c2a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8013c2c:	4638      	mov	r0, r7
 8013c2e:	f7ff ff11 	bl	8013a54 <racs_services__srv__Control_Request__copy>
 8013c32:	4603      	mov	r3, r0
 8013c34:	b1c0      	cbz	r0, 8013c68 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control+0x94>
 8013c36:	f1b8 0f00 	cmp.w	r8, #0
 8013c3a:	d00a      	beq.n	8013c52 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control+0x7e>
 8013c3c:	2101      	movs	r1, #1
 8013c3e:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8013c42:	f7ff ff55 	bl	8013af0 <racs_services__srv__Control_Response__Sequence__init>
 8013c46:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013c48:	4640      	mov	r0, r8
 8013c4a:	f7ff ff49 	bl	8013ae0 <racs_services__srv__Control_Response__copy>
 8013c4e:	4603      	mov	r3, r0
 8013c50:	b150      	cbz	r0, 8013c68 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control+0x94>
 8013c52:	4620      	mov	r0, r4
 8013c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c58:	4620      	mov	r0, r4
 8013c5a:	4664      	mov	r4, ip
 8013c5c:	6873      	ldr	r3, [r6, #4]
 8013c5e:	6931      	ldr	r1, [r6, #16]
 8013c60:	4798      	blx	r3
 8013c62:	4620      	mov	r0, r4
 8013c64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c68:	4620      	mov	r0, r4
 8013c6a:	461c      	mov	r4, r3
 8013c6c:	6872      	ldr	r2, [r6, #4]
 8013c6e:	6931      	ldr	r1, [r6, #16]
 8013c70:	4790      	blx	r2
 8013c72:	4620      	mov	r0, r4
 8013c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c78:	2400      	movs	r4, #0
 8013c7a:	4620      	mov	r0, r4
 8013c7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013c80 <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Control>:
 8013c80:	b1b9      	cbz	r1, 8013cb2 <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Control+0x32>
 8013c82:	b538      	push	{r3, r4, r5, lr}
 8013c84:	4605      	mov	r5, r0
 8013c86:	b190      	cbz	r0, 8013cae <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Control+0x2e>
 8013c88:	460c      	mov	r4, r1
 8013c8a:	f7ff ff81 	bl	8013b90 <racs_services__srv__Control_Event__fini>
 8013c8e:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8013c90:	b110      	cbz	r0, 8013c98 <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Control+0x18>
 8013c92:	6863      	ldr	r3, [r4, #4]
 8013c94:	6921      	ldr	r1, [r4, #16]
 8013c96:	4798      	blx	r3
 8013c98:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8013c9a:	b110      	cbz	r0, 8013ca2 <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Control+0x22>
 8013c9c:	6863      	ldr	r3, [r4, #4]
 8013c9e:	6921      	ldr	r1, [r4, #16]
 8013ca0:	4798      	blx	r3
 8013ca2:	4628      	mov	r0, r5
 8013ca4:	6863      	ldr	r3, [r4, #4]
 8013ca6:	6921      	ldr	r1, [r4, #16]
 8013ca8:	4798      	blx	r3
 8013caa:	2001      	movs	r0, #1
 8013cac:	bd38      	pop	{r3, r4, r5, pc}
 8013cae:	2000      	movs	r0, #0
 8013cb0:	bd38      	pop	{r3, r4, r5, pc}
 8013cb2:	2000      	movs	r0, #0
 8013cb4:	4770      	bx	lr
 8013cb6:	bf00      	nop

08013cb8 <racs_services__msg__DirectAccess__get_type_hash>:
 8013cb8:	4800      	ldr	r0, [pc, #0]	; (8013cbc <racs_services__msg__DirectAccess__get_type_hash+0x4>)
 8013cba:	4770      	bx	lr
 8013cbc:	200011ec 	.word	0x200011ec

08013cc0 <racs_services__msg__DirectAccess__get_type_description>:
 8013cc0:	4b03      	ldr	r3, [pc, #12]	; (8013cd0 <racs_services__msg__DirectAccess__get_type_description+0x10>)
 8013cc2:	781a      	ldrb	r2, [r3, #0]
 8013cc4:	b90a      	cbnz	r2, 8013cca <racs_services__msg__DirectAccess__get_type_description+0xa>
 8013cc6:	2201      	movs	r2, #1
 8013cc8:	701a      	strb	r2, [r3, #0]
 8013cca:	4802      	ldr	r0, [pc, #8]	; (8013cd4 <racs_services__msg__DirectAccess__get_type_description+0x14>)
 8013ccc:	4770      	bx	lr
 8013cce:	bf00      	nop
 8013cd0:	200105b1 	.word	0x200105b1
 8013cd4:	0801e838 	.word	0x0801e838

08013cd8 <racs_services__msg__DirectAccess__get_type_description_sources>:
 8013cd8:	4b09      	ldr	r3, [pc, #36]	; (8013d00 <racs_services__msg__DirectAccess__get_type_description_sources+0x28>)
 8013cda:	781a      	ldrb	r2, [r3, #0]
 8013cdc:	b96a      	cbnz	r2, 8013cfa <racs_services__msg__DirectAccess__get_type_description_sources+0x22>
 8013cde:	2201      	movs	r2, #1
 8013ce0:	b430      	push	{r4, r5}
 8013ce2:	4d08      	ldr	r5, [pc, #32]	; (8013d04 <racs_services__msg__DirectAccess__get_type_description_sources+0x2c>)
 8013ce4:	4c08      	ldr	r4, [pc, #32]	; (8013d08 <racs_services__msg__DirectAccess__get_type_description_sources+0x30>)
 8013ce6:	701a      	strb	r2, [r3, #0]
 8013ce8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013cea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013cec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013cee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013cf0:	682b      	ldr	r3, [r5, #0]
 8013cf2:	4806      	ldr	r0, [pc, #24]	; (8013d0c <racs_services__msg__DirectAccess__get_type_description_sources+0x34>)
 8013cf4:	6023      	str	r3, [r4, #0]
 8013cf6:	bc30      	pop	{r4, r5}
 8013cf8:	4770      	bx	lr
 8013cfa:	4804      	ldr	r0, [pc, #16]	; (8013d0c <racs_services__msg__DirectAccess__get_type_description_sources+0x34>)
 8013cfc:	4770      	bx	lr
 8013cfe:	bf00      	nop
 8013d00:	200105b0 	.word	0x200105b0
 8013d04:	0801e85c 	.word	0x0801e85c
 8013d08:	200105b4 	.word	0x200105b4
 8013d0c:	0801e880 	.word	0x0801e880

08013d10 <racs_services__msg__DirectAccess__init>:
 8013d10:	3800      	subs	r0, #0
 8013d12:	bf18      	it	ne
 8013d14:	2001      	movne	r0, #1
 8013d16:	4770      	bx	lr

08013d18 <racs_services__msg__DirectAccess__fini>:
 8013d18:	4770      	bx	lr
 8013d1a:	bf00      	nop

08013d1c <racs_services__msg__Feedback__get_type_hash>:
 8013d1c:	4800      	ldr	r0, [pc, #0]	; (8013d20 <racs_services__msg__Feedback__get_type_hash+0x4>)
 8013d1e:	4770      	bx	lr
 8013d20:	200012fc 	.word	0x200012fc

08013d24 <racs_services__msg__Feedback__get_type_description>:
 8013d24:	4b03      	ldr	r3, [pc, #12]	; (8013d34 <racs_services__msg__Feedback__get_type_description+0x10>)
 8013d26:	781a      	ldrb	r2, [r3, #0]
 8013d28:	b90a      	cbnz	r2, 8013d2e <racs_services__msg__Feedback__get_type_description+0xa>
 8013d2a:	2201      	movs	r2, #1
 8013d2c:	701a      	strb	r2, [r3, #0]
 8013d2e:	4802      	ldr	r0, [pc, #8]	; (8013d38 <racs_services__msg__Feedback__get_type_description+0x14>)
 8013d30:	4770      	bx	lr
 8013d32:	bf00      	nop
 8013d34:	200105d9 	.word	0x200105d9
 8013d38:	0801e88c 	.word	0x0801e88c

08013d3c <racs_services__msg__Feedback__get_type_description_sources>:
 8013d3c:	4b09      	ldr	r3, [pc, #36]	; (8013d64 <racs_services__msg__Feedback__get_type_description_sources+0x28>)
 8013d3e:	781a      	ldrb	r2, [r3, #0]
 8013d40:	b96a      	cbnz	r2, 8013d5e <racs_services__msg__Feedback__get_type_description_sources+0x22>
 8013d42:	2201      	movs	r2, #1
 8013d44:	b430      	push	{r4, r5}
 8013d46:	4d08      	ldr	r5, [pc, #32]	; (8013d68 <racs_services__msg__Feedback__get_type_description_sources+0x2c>)
 8013d48:	4c08      	ldr	r4, [pc, #32]	; (8013d6c <racs_services__msg__Feedback__get_type_description_sources+0x30>)
 8013d4a:	701a      	strb	r2, [r3, #0]
 8013d4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013d4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013d50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013d52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013d54:	682b      	ldr	r3, [r5, #0]
 8013d56:	4806      	ldr	r0, [pc, #24]	; (8013d70 <racs_services__msg__Feedback__get_type_description_sources+0x34>)
 8013d58:	6023      	str	r3, [r4, #0]
 8013d5a:	bc30      	pop	{r4, r5}
 8013d5c:	4770      	bx	lr
 8013d5e:	4804      	ldr	r0, [pc, #16]	; (8013d70 <racs_services__msg__Feedback__get_type_description_sources+0x34>)
 8013d60:	4770      	bx	lr
 8013d62:	bf00      	nop
 8013d64:	200105d8 	.word	0x200105d8
 8013d68:	0801e8b0 	.word	0x0801e8b0
 8013d6c:	200105dc 	.word	0x200105dc
 8013d70:	0801e8d4 	.word	0x0801e8d4

08013d74 <racs_services__msg__Feedback__init>:
 8013d74:	3800      	subs	r0, #0
 8013d76:	bf18      	it	ne
 8013d78:	2001      	movne	r0, #1
 8013d7a:	4770      	bx	lr

08013d7c <racs_services__msg__Feedback__fini>:
 8013d7c:	4770      	bx	lr
 8013d7e:	bf00      	nop

08013d80 <racs_services__srv__Setup_Event__get_type_description.part.0>:
 8013d80:	b510      	push	{r4, lr}
 8013d82:	2000      	movs	r0, #0
 8013d84:	4c13      	ldr	r4, [pc, #76]	; (8013dd4 <racs_services__srv__Setup_Event__get_type_description.part.0+0x54>)
 8013d86:	f005 fd73 	bl	8019870 <builtin_interfaces__msg__Time__get_type_description>
 8013d8a:	300c      	adds	r0, #12
 8013d8c:	4b12      	ldr	r3, [pc, #72]	; (8013dd8 <racs_services__srv__Setup_Event__get_type_description.part.0+0x58>)
 8013d8e:	c807      	ldmia	r0, {r0, r1, r2}
 8013d90:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8013d94:	7823      	ldrb	r3, [r4, #0]
 8013d96:	b90b      	cbnz	r3, 8013d9c <racs_services__srv__Setup_Event__get_type_description.part.0+0x1c>
 8013d98:	2301      	movs	r3, #1
 8013d9a:	7023      	strb	r3, [r4, #0]
 8013d9c:	4a0f      	ldr	r2, [pc, #60]	; (8013ddc <racs_services__srv__Setup_Event__get_type_description.part.0+0x5c>)
 8013d9e:	4b10      	ldr	r3, [pc, #64]	; (8013de0 <racs_services__srv__Setup_Event__get_type_description.part.0+0x60>)
 8013da0:	4c10      	ldr	r4, [pc, #64]	; (8013de4 <racs_services__srv__Setup_Event__get_type_description.part.0+0x64>)
 8013da2:	ca07      	ldmia	r2, {r0, r1, r2}
 8013da4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8013da8:	7823      	ldrb	r3, [r4, #0]
 8013daa:	b90b      	cbnz	r3, 8013db0 <racs_services__srv__Setup_Event__get_type_description.part.0+0x30>
 8013dac:	2301      	movs	r3, #1
 8013dae:	7023      	strb	r3, [r4, #0]
 8013db0:	4b0d      	ldr	r3, [pc, #52]	; (8013de8 <racs_services__srv__Setup_Event__get_type_description.part.0+0x68>)
 8013db2:	4c0e      	ldr	r4, [pc, #56]	; (8013dec <racs_services__srv__Setup_Event__get_type_description.part.0+0x6c>)
 8013db4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8013db8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8013dbc:	2000      	movs	r0, #0
 8013dbe:	3418      	adds	r4, #24
 8013dc0:	f005 fcf6 	bl	80197b0 <service_msgs__msg__ServiceEventInfo__get_type_description>
 8013dc4:	300c      	adds	r0, #12
 8013dc6:	4b0a      	ldr	r3, [pc, #40]	; (8013df0 <racs_services__srv__Setup_Event__get_type_description.part.0+0x70>)
 8013dc8:	c807      	ldmia	r0, {r0, r1, r2}
 8013dca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8013dce:	2201      	movs	r2, #1
 8013dd0:	701a      	strb	r2, [r3, #0]
 8013dd2:	bd10      	pop	{r4, pc}
 8013dd4:	20010604 	.word	0x20010604
 8013dd8:	200015c8 	.word	0x200015c8
 8013ddc:	0801e934 	.word	0x0801e934
 8013de0:	200015e0 	.word	0x200015e0
 8013de4:	20010602 	.word	0x20010602
 8013de8:	0801e910 	.word	0x0801e910
 8013dec:	200015f8 	.word	0x200015f8
 8013df0:	20010601 	.word	0x20010601

08013df4 <racs_services__srv__Setup__get_type_hash>:
 8013df4:	4800      	ldr	r0, [pc, #0]	; (8013df8 <racs_services__srv__Setup__get_type_hash+0x4>)
 8013df6:	4770      	bx	lr
 8013df8:	20001498 	.word	0x20001498

08013dfc <racs_services__srv__Setup_Request__get_type_hash>:
 8013dfc:	4800      	ldr	r0, [pc, #0]	; (8013e00 <racs_services__srv__Setup_Request__get_type_hash+0x4>)
 8013dfe:	4770      	bx	lr
 8013e00:	20001474 	.word	0x20001474

08013e04 <racs_services__srv__Setup_Response__get_type_hash>:
 8013e04:	4800      	ldr	r0, [pc, #0]	; (8013e08 <racs_services__srv__Setup_Response__get_type_hash+0x4>)
 8013e06:	4770      	bx	lr
 8013e08:	20001450 	.word	0x20001450

08013e0c <racs_services__srv__Setup_Event__get_type_hash>:
 8013e0c:	4800      	ldr	r0, [pc, #0]	; (8013e10 <racs_services__srv__Setup_Event__get_type_hash+0x4>)
 8013e0e:	4770      	bx	lr
 8013e10:	2000142c 	.word	0x2000142c

08013e14 <racs_services__srv__Setup__get_type_description>:
 8013e14:	b538      	push	{r3, r4, r5, lr}
 8013e16:	4d1c      	ldr	r5, [pc, #112]	; (8013e88 <racs_services__srv__Setup__get_type_description+0x74>)
 8013e18:	7828      	ldrb	r0, [r5, #0]
 8013e1a:	b108      	cbz	r0, 8013e20 <racs_services__srv__Setup__get_type_description+0xc>
 8013e1c:	481b      	ldr	r0, [pc, #108]	; (8013e8c <racs_services__srv__Setup__get_type_description+0x78>)
 8013e1e:	bd38      	pop	{r3, r4, r5, pc}
 8013e20:	f005 fd26 	bl	8019870 <builtin_interfaces__msg__Time__get_type_description>
 8013e24:	300c      	adds	r0, #12
 8013e26:	4b1a      	ldr	r3, [pc, #104]	; (8013e90 <racs_services__srv__Setup__get_type_description+0x7c>)
 8013e28:	c807      	ldmia	r0, {r0, r1, r2}
 8013e2a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8013e2e:	4b19      	ldr	r3, [pc, #100]	; (8013e94 <racs_services__srv__Setup__get_type_description+0x80>)
 8013e30:	781b      	ldrb	r3, [r3, #0]
 8013e32:	b32b      	cbz	r3, 8013e80 <racs_services__srv__Setup__get_type_description+0x6c>
 8013e34:	4a18      	ldr	r2, [pc, #96]	; (8013e98 <racs_services__srv__Setup__get_type_description+0x84>)
 8013e36:	4b19      	ldr	r3, [pc, #100]	; (8013e9c <racs_services__srv__Setup__get_type_description+0x88>)
 8013e38:	4c19      	ldr	r4, [pc, #100]	; (8013ea0 <racs_services__srv__Setup__get_type_description+0x8c>)
 8013e3a:	ca07      	ldmia	r2, {r0, r1, r2}
 8013e3c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8013e40:	7823      	ldrb	r3, [r4, #0]
 8013e42:	b90b      	cbnz	r3, 8013e48 <racs_services__srv__Setup__get_type_description+0x34>
 8013e44:	2301      	movs	r3, #1
 8013e46:	7023      	strb	r3, [r4, #0]
 8013e48:	4a16      	ldr	r2, [pc, #88]	; (8013ea4 <racs_services__srv__Setup__get_type_description+0x90>)
 8013e4a:	4b17      	ldr	r3, [pc, #92]	; (8013ea8 <racs_services__srv__Setup__get_type_description+0x94>)
 8013e4c:	4c17      	ldr	r4, [pc, #92]	; (8013eac <racs_services__srv__Setup__get_type_description+0x98>)
 8013e4e:	ca07      	ldmia	r2, {r0, r1, r2}
 8013e50:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8013e54:	7823      	ldrb	r3, [r4, #0]
 8013e56:	b90b      	cbnz	r3, 8013e5c <racs_services__srv__Setup__get_type_description+0x48>
 8013e58:	2301      	movs	r3, #1
 8013e5a:	7023      	strb	r3, [r4, #0]
 8013e5c:	4b14      	ldr	r3, [pc, #80]	; (8013eb0 <racs_services__srv__Setup__get_type_description+0x9c>)
 8013e5e:	4c15      	ldr	r4, [pc, #84]	; (8013eb4 <racs_services__srv__Setup__get_type_description+0xa0>)
 8013e60:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8013e64:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8013e68:	2000      	movs	r0, #0
 8013e6a:	3418      	adds	r4, #24
 8013e6c:	f005 fca0 	bl	80197b0 <service_msgs__msg__ServiceEventInfo__get_type_description>
 8013e70:	300c      	adds	r0, #12
 8013e72:	2301      	movs	r3, #1
 8013e74:	c807      	ldmia	r0, {r0, r1, r2}
 8013e76:	702b      	strb	r3, [r5, #0]
 8013e78:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8013e7c:	4803      	ldr	r0, [pc, #12]	; (8013e8c <racs_services__srv__Setup__get_type_description+0x78>)
 8013e7e:	bd38      	pop	{r3, r4, r5, pc}
 8013e80:	f7ff ff7e 	bl	8013d80 <racs_services__srv__Setup_Event__get_type_description.part.0>
 8013e84:	e7d6      	b.n	8013e34 <racs_services__srv__Setup__get_type_description+0x20>
 8013e86:	bf00      	nop
 8013e88:	20010605 	.word	0x20010605
 8013e8c:	0801e94c 	.word	0x0801e94c
 8013e90:	20001a10 	.word	0x20001a10
 8013e94:	20010601 	.word	0x20010601
 8013e98:	0801e8ec 	.word	0x0801e8ec
 8013e9c:	20001a28 	.word	0x20001a28
 8013ea0:	20010604 	.word	0x20010604
 8013ea4:	0801e934 	.word	0x0801e934
 8013ea8:	20001a40 	.word	0x20001a40
 8013eac:	20010602 	.word	0x20010602
 8013eb0:	0801e910 	.word	0x0801e910
 8013eb4:	20001a58 	.word	0x20001a58

08013eb8 <racs_services__srv__Setup_Request__get_type_description>:
 8013eb8:	4b03      	ldr	r3, [pc, #12]	; (8013ec8 <racs_services__srv__Setup_Request__get_type_description+0x10>)
 8013eba:	781a      	ldrb	r2, [r3, #0]
 8013ebc:	b90a      	cbnz	r2, 8013ec2 <racs_services__srv__Setup_Request__get_type_description+0xa>
 8013ebe:	2201      	movs	r2, #1
 8013ec0:	701a      	strb	r2, [r3, #0]
 8013ec2:	4802      	ldr	r0, [pc, #8]	; (8013ecc <racs_services__srv__Setup_Request__get_type_description+0x14>)
 8013ec4:	4770      	bx	lr
 8013ec6:	bf00      	nop
 8013ec8:	20010604 	.word	0x20010604
 8013ecc:	0801e928 	.word	0x0801e928

08013ed0 <racs_services__srv__Setup_Response__get_type_description>:
 8013ed0:	4b03      	ldr	r3, [pc, #12]	; (8013ee0 <racs_services__srv__Setup_Response__get_type_description+0x10>)
 8013ed2:	781a      	ldrb	r2, [r3, #0]
 8013ed4:	b90a      	cbnz	r2, 8013eda <racs_services__srv__Setup_Response__get_type_description+0xa>
 8013ed6:	2201      	movs	r2, #1
 8013ed8:	701a      	strb	r2, [r3, #0]
 8013eda:	4802      	ldr	r0, [pc, #8]	; (8013ee4 <racs_services__srv__Setup_Response__get_type_description+0x14>)
 8013edc:	4770      	bx	lr
 8013ede:	bf00      	nop
 8013ee0:	20010602 	.word	0x20010602
 8013ee4:	0801e904 	.word	0x0801e904

08013ee8 <racs_services__srv__Setup_Event__get_type_description>:
 8013ee8:	b508      	push	{r3, lr}
 8013eea:	4b04      	ldr	r3, [pc, #16]	; (8013efc <racs_services__srv__Setup_Event__get_type_description+0x14>)
 8013eec:	781b      	ldrb	r3, [r3, #0]
 8013eee:	b10b      	cbz	r3, 8013ef4 <racs_services__srv__Setup_Event__get_type_description+0xc>
 8013ef0:	4803      	ldr	r0, [pc, #12]	; (8013f00 <racs_services__srv__Setup_Event__get_type_description+0x18>)
 8013ef2:	bd08      	pop	{r3, pc}
 8013ef4:	f7ff ff44 	bl	8013d80 <racs_services__srv__Setup_Event__get_type_description.part.0>
 8013ef8:	4801      	ldr	r0, [pc, #4]	; (8013f00 <racs_services__srv__Setup_Event__get_type_description+0x18>)
 8013efa:	bd08      	pop	{r3, pc}
 8013efc:	20010601 	.word	0x20010601
 8013f00:	0801e8e0 	.word	0x0801e8e0

08013f04 <racs_services__srv__Setup__get_type_description_sources>:
 8013f04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f08:	4b2c      	ldr	r3, [pc, #176]	; (8013fbc <racs_services__srv__Setup__get_type_description_sources+0xb8>)
 8013f0a:	f893 9000 	ldrb.w	r9, [r3]
 8013f0e:	f1b9 0f00 	cmp.w	r9, #0
 8013f12:	d002      	beq.n	8013f1a <racs_services__srv__Setup__get_type_description_sources+0x16>
 8013f14:	482a      	ldr	r0, [pc, #168]	; (8013fc0 <racs_services__srv__Setup__get_type_description_sources+0xbc>)
 8013f16:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f1a:	4d2a      	ldr	r5, [pc, #168]	; (8013fc4 <racs_services__srv__Setup__get_type_description_sources+0xc0>)
 8013f1c:	4c2a      	ldr	r4, [pc, #168]	; (8013fc8 <racs_services__srv__Setup__get_type_description_sources+0xc4>)
 8013f1e:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 8013fd0 <racs_services__srv__Setup__get_type_description_sources+0xcc>
 8013f22:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8013fd4 <racs_services__srv__Setup__get_type_description_sources+0xd0>
 8013f26:	4e29      	ldr	r6, [pc, #164]	; (8013fcc <racs_services__srv__Setup__get_type_description_sources+0xc8>)
 8013f28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013f2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013f2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013f2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013f30:	682b      	ldr	r3, [r5, #0]
 8013f32:	4625      	mov	r5, r4
 8013f34:	4648      	mov	r0, r9
 8013f36:	f104 0a28 	add.w	sl, r4, #40	; 0x28
 8013f3a:	f845 3b04 	str.w	r3, [r5], #4
 8013f3e:	f104 074c 	add.w	r7, r4, #76	; 0x4c
 8013f42:	f005 fca1 	bl	8019888 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 8013f46:	4684      	mov	ip, r0
 8013f48:	f104 0e70 	add.w	lr, r4, #112	; 0x70
 8013f4c:	3494      	adds	r4, #148	; 0x94
 8013f4e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013f52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013f54:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013f58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013f5a:	f8dc 3000 	ldr.w	r3, [ip]
 8013f5e:	602b      	str	r3, [r5, #0]
 8013f60:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 8013f64:	e8aa 000f 	stmia.w	sl!, {r0, r1, r2, r3}
 8013f68:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 8013f6c:	e8aa 000f 	stmia.w	sl!, {r0, r1, r2, r3}
 8013f70:	f8db 3000 	ldr.w	r3, [fp]
 8013f74:	f8ca 3000 	str.w	r3, [sl]
 8013f78:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 8013f7c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8013f7e:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 8013f82:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8013f84:	f8d8 3000 	ldr.w	r3, [r8]
 8013f88:	603b      	str	r3, [r7, #0]
 8013f8a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8013f8c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013f90:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8013f92:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013f96:	6833      	ldr	r3, [r6, #0]
 8013f98:	4648      	mov	r0, r9
 8013f9a:	f8ce 3000 	str.w	r3, [lr]
 8013f9e:	f005 fc1f 	bl	80197e0 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source>
 8013fa2:	2301      	movs	r3, #1
 8013fa4:	4a05      	ldr	r2, [pc, #20]	; (8013fbc <racs_services__srv__Setup__get_type_description_sources+0xb8>)
 8013fa6:	4605      	mov	r5, r0
 8013fa8:	7013      	strb	r3, [r2, #0]
 8013faa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013fac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013fae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013fb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013fb2:	682b      	ldr	r3, [r5, #0]
 8013fb4:	4802      	ldr	r0, [pc, #8]	; (8013fc0 <racs_services__srv__Setup__get_type_description_sources+0xbc>)
 8013fb6:	6023      	str	r3, [r4, #0]
 8013fb8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013fbc:	20010600 	.word	0x20010600
 8013fc0:	0801ea24 	.word	0x0801ea24
 8013fc4:	0801e9dc 	.word	0x0801e9dc
 8013fc8:	200106bc 	.word	0x200106bc
 8013fcc:	0801e994 	.word	0x0801e994
 8013fd0:	0801e970 	.word	0x0801e970
 8013fd4:	0801e9b8 	.word	0x0801e9b8

08013fd8 <racs_services__srv__Setup_Request__get_type_description_sources>:
 8013fd8:	4b09      	ldr	r3, [pc, #36]	; (8014000 <racs_services__srv__Setup_Request__get_type_description_sources+0x28>)
 8013fda:	781a      	ldrb	r2, [r3, #0]
 8013fdc:	b96a      	cbnz	r2, 8013ffa <racs_services__srv__Setup_Request__get_type_description_sources+0x22>
 8013fde:	2201      	movs	r2, #1
 8013fe0:	b430      	push	{r4, r5}
 8013fe2:	4d08      	ldr	r5, [pc, #32]	; (8014004 <racs_services__srv__Setup_Request__get_type_description_sources+0x2c>)
 8013fe4:	4c08      	ldr	r4, [pc, #32]	; (8014008 <racs_services__srv__Setup_Request__get_type_description_sources+0x30>)
 8013fe6:	701a      	strb	r2, [r3, #0]
 8013fe8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013fea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013fec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013fee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013ff0:	682b      	ldr	r3, [r5, #0]
 8013ff2:	4806      	ldr	r0, [pc, #24]	; (801400c <racs_services__srv__Setup_Request__get_type_description_sources+0x34>)
 8013ff4:	6023      	str	r3, [r4, #0]
 8013ff6:	bc30      	pop	{r4, r5}
 8013ff8:	4770      	bx	lr
 8013ffa:	4804      	ldr	r0, [pc, #16]	; (801400c <racs_services__srv__Setup_Request__get_type_description_sources+0x34>)
 8013ffc:	4770      	bx	lr
 8013ffe:	bf00      	nop
 8014000:	20010607 	.word	0x20010607
 8014004:	0801e9b8 	.word	0x0801e9b8
 8014008:	200107b8 	.word	0x200107b8
 801400c:	0801ea18 	.word	0x0801ea18

08014010 <racs_services__srv__Setup_Response__get_type_description_sources>:
 8014010:	4b09      	ldr	r3, [pc, #36]	; (8014038 <racs_services__srv__Setup_Response__get_type_description_sources+0x28>)
 8014012:	781a      	ldrb	r2, [r3, #0]
 8014014:	b96a      	cbnz	r2, 8014032 <racs_services__srv__Setup_Response__get_type_description_sources+0x22>
 8014016:	2201      	movs	r2, #1
 8014018:	b430      	push	{r4, r5}
 801401a:	4d08      	ldr	r5, [pc, #32]	; (801403c <racs_services__srv__Setup_Response__get_type_description_sources+0x2c>)
 801401c:	4c08      	ldr	r4, [pc, #32]	; (8014040 <racs_services__srv__Setup_Response__get_type_description_sources+0x30>)
 801401e:	701a      	strb	r2, [r3, #0]
 8014020:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014022:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014024:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014026:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014028:	682b      	ldr	r3, [r5, #0]
 801402a:	4806      	ldr	r0, [pc, #24]	; (8014044 <racs_services__srv__Setup_Response__get_type_description_sources+0x34>)
 801402c:	6023      	str	r3, [r4, #0]
 801402e:	bc30      	pop	{r4, r5}
 8014030:	4770      	bx	lr
 8014032:	4804      	ldr	r0, [pc, #16]	; (8014044 <racs_services__srv__Setup_Response__get_type_description_sources+0x34>)
 8014034:	4770      	bx	lr
 8014036:	bf00      	nop
 8014038:	20010606 	.word	0x20010606
 801403c:	0801e994 	.word	0x0801e994
 8014040:	20010794 	.word	0x20010794
 8014044:	0801ea0c 	.word	0x0801ea0c

08014048 <racs_services__srv__Setup_Event__get_type_description_sources>:
 8014048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801404c:	4e27      	ldr	r6, [pc, #156]	; (80140ec <racs_services__srv__Setup_Event__get_type_description_sources+0xa4>)
 801404e:	f896 8000 	ldrb.w	r8, [r6]
 8014052:	f1b8 0f00 	cmp.w	r8, #0
 8014056:	d002      	beq.n	801405e <racs_services__srv__Setup_Event__get_type_description_sources+0x16>
 8014058:	4825      	ldr	r0, [pc, #148]	; (80140f0 <racs_services__srv__Setup_Event__get_type_description_sources+0xa8>)
 801405a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801405e:	4d25      	ldr	r5, [pc, #148]	; (80140f4 <racs_services__srv__Setup_Event__get_type_description_sources+0xac>)
 8014060:	4c25      	ldr	r4, [pc, #148]	; (80140f8 <racs_services__srv__Setup_Event__get_type_description_sources+0xb0>)
 8014062:	f8df a09c 	ldr.w	sl, [pc, #156]	; 8014100 <racs_services__srv__Setup_Event__get_type_description_sources+0xb8>
 8014066:	4f25      	ldr	r7, [pc, #148]	; (80140fc <racs_services__srv__Setup_Event__get_type_description_sources+0xb4>)
 8014068:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801406a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801406c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801406e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014070:	682b      	ldr	r3, [r5, #0]
 8014072:	4625      	mov	r5, r4
 8014074:	4640      	mov	r0, r8
 8014076:	f104 0928 	add.w	r9, r4, #40	; 0x28
 801407a:	f845 3b04 	str.w	r3, [r5], #4
 801407e:	f005 fc03 	bl	8019888 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 8014082:	4684      	mov	ip, r0
 8014084:	f104 0e4c 	add.w	lr, r4, #76	; 0x4c
 8014088:	3470      	adds	r4, #112	; 0x70
 801408a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801408e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014090:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014094:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014096:	f8dc 3000 	ldr.w	r3, [ip]
 801409a:	602b      	str	r3, [r5, #0]
 801409c:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
 80140a0:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 80140a4:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
 80140a8:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 80140ac:	f8da 3000 	ldr.w	r3, [sl]
 80140b0:	f8c9 3000 	str.w	r3, [r9]
 80140b4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80140b6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80140ba:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80140bc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80140c0:	683b      	ldr	r3, [r7, #0]
 80140c2:	4640      	mov	r0, r8
 80140c4:	f8ce 3000 	str.w	r3, [lr]
 80140c8:	f005 fb8a 	bl	80197e0 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source>
 80140cc:	2301      	movs	r3, #1
 80140ce:	4684      	mov	ip, r0
 80140d0:	7033      	strb	r3, [r6, #0]
 80140d2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80140d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80140d8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80140dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80140de:	f8dc 3000 	ldr.w	r3, [ip]
 80140e2:	4803      	ldr	r0, [pc, #12]	; (80140f0 <racs_services__srv__Setup_Event__get_type_description_sources+0xa8>)
 80140e4:	6023      	str	r3, [r4, #0]
 80140e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80140ea:	bf00      	nop
 80140ec:	20010603 	.word	0x20010603
 80140f0:	0801ea00 	.word	0x0801ea00
 80140f4:	0801e970 	.word	0x0801e970
 80140f8:	20010608 	.word	0x20010608
 80140fc:	0801e994 	.word	0x0801e994
 8014100:	0801e9b8 	.word	0x0801e9b8

08014104 <racs_services__srv__Setup_Event__fini.part.0>:
 8014104:	b510      	push	{r4, lr}
 8014106:	b086      	sub	sp, #24
 8014108:	4604      	mov	r4, r0
 801410a:	f005 fba7 	bl	801985c <service_msgs__msg__ServiceEventInfo__fini>
 801410e:	a801      	add	r0, sp, #4
 8014110:	f7f9 fd94 	bl	800dc3c <rcutils_get_default_allocator>
 8014114:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8014116:	b130      	cbz	r0, 8014126 <racs_services__srv__Setup_Event__fini.part.0+0x22>
 8014118:	9b02      	ldr	r3, [sp, #8]
 801411a:	9905      	ldr	r1, [sp, #20]
 801411c:	4798      	blx	r3
 801411e:	2300      	movs	r3, #0
 8014120:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 8014124:	6323      	str	r3, [r4, #48]	; 0x30
 8014126:	a801      	add	r0, sp, #4
 8014128:	f7f9 fd88 	bl	800dc3c <rcutils_get_default_allocator>
 801412c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801412e:	b130      	cbz	r0, 801413e <racs_services__srv__Setup_Event__fini.part.0+0x3a>
 8014130:	9b02      	ldr	r3, [sp, #8]
 8014132:	9905      	ldr	r1, [sp, #20]
 8014134:	4798      	blx	r3
 8014136:	2300      	movs	r3, #0
 8014138:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 801413c:	63e3      	str	r3, [r4, #60]	; 0x3c
 801413e:	b006      	add	sp, #24
 8014140:	bd10      	pop	{r4, pc}
 8014142:	bf00      	nop

08014144 <racs_services__srv__Setup_Request__init>:
 8014144:	3800      	subs	r0, #0
 8014146:	bf18      	it	ne
 8014148:	2001      	movne	r0, #1
 801414a:	4770      	bx	lr

0801414c <racs_services__srv__Setup_Request__fini>:
 801414c:	4770      	bx	lr
 801414e:	bf00      	nop

08014150 <racs_services__srv__Setup_Request__copy>:
 8014150:	4603      	mov	r3, r0
 8014152:	b1a0      	cbz	r0, 801417e <racs_services__srv__Setup_Request__copy+0x2e>
 8014154:	b199      	cbz	r1, 801417e <racs_services__srv__Setup_Request__copy+0x2e>
 8014156:	7802      	ldrb	r2, [r0, #0]
 8014158:	2001      	movs	r0, #1
 801415a:	700a      	strb	r2, [r1, #0]
 801415c:	689a      	ldr	r2, [r3, #8]
 801415e:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8014162:	608a      	str	r2, [r1, #8]
 8014164:	691a      	ldr	r2, [r3, #16]
 8014166:	f8c1 c004 	str.w	ip, [r1, #4]
 801416a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 801416e:	610a      	str	r2, [r1, #16]
 8014170:	695a      	ldr	r2, [r3, #20]
 8014172:	699b      	ldr	r3, [r3, #24]
 8014174:	f8c1 c00c 	str.w	ip, [r1, #12]
 8014178:	614a      	str	r2, [r1, #20]
 801417a:	618b      	str	r3, [r1, #24]
 801417c:	4770      	bx	lr
 801417e:	2000      	movs	r0, #0
 8014180:	4770      	bx	lr
 8014182:	bf00      	nop

08014184 <racs_services__srv__Setup_Request__Sequence__init>:
 8014184:	b530      	push	{r4, r5, lr}
 8014186:	4604      	mov	r4, r0
 8014188:	b087      	sub	sp, #28
 801418a:	b148      	cbz	r0, 80141a0 <racs_services__srv__Setup_Request__Sequence__init+0x1c>
 801418c:	460d      	mov	r5, r1
 801418e:	a801      	add	r0, sp, #4
 8014190:	f7f9 fd54 	bl	800dc3c <rcutils_get_default_allocator>
 8014194:	b935      	cbnz	r5, 80141a4 <racs_services__srv__Setup_Request__Sequence__init+0x20>
 8014196:	462b      	mov	r3, r5
 8014198:	2001      	movs	r0, #1
 801419a:	60a5      	str	r5, [r4, #8]
 801419c:	e9c4 3500 	strd	r3, r5, [r4]
 80141a0:	b007      	add	sp, #28
 80141a2:	bd30      	pop	{r4, r5, pc}
 80141a4:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 80141a8:	211c      	movs	r1, #28
 80141aa:	4628      	mov	r0, r5
 80141ac:	4798      	blx	r3
 80141ae:	4603      	mov	r3, r0
 80141b0:	2800      	cmp	r0, #0
 80141b2:	d1f1      	bne.n	8014198 <racs_services__srv__Setup_Request__Sequence__init+0x14>
 80141b4:	e7f4      	b.n	80141a0 <racs_services__srv__Setup_Request__Sequence__init+0x1c>
 80141b6:	bf00      	nop

080141b8 <racs_services__srv__Setup_Request__Sequence__fini>:
 80141b8:	b180      	cbz	r0, 80141dc <racs_services__srv__Setup_Request__Sequence__fini+0x24>
 80141ba:	b510      	push	{r4, lr}
 80141bc:	b086      	sub	sp, #24
 80141be:	4604      	mov	r4, r0
 80141c0:	a801      	add	r0, sp, #4
 80141c2:	f7f9 fd3b 	bl	800dc3c <rcutils_get_default_allocator>
 80141c6:	6820      	ldr	r0, [r4, #0]
 80141c8:	b130      	cbz	r0, 80141d8 <racs_services__srv__Setup_Request__Sequence__fini+0x20>
 80141ca:	9b02      	ldr	r3, [sp, #8]
 80141cc:	9905      	ldr	r1, [sp, #20]
 80141ce:	4798      	blx	r3
 80141d0:	2300      	movs	r3, #0
 80141d2:	e9c4 3300 	strd	r3, r3, [r4]
 80141d6:	60a3      	str	r3, [r4, #8]
 80141d8:	b006      	add	sp, #24
 80141da:	bd10      	pop	{r4, pc}
 80141dc:	4770      	bx	lr
 80141de:	bf00      	nop

080141e0 <racs_services__srv__Setup_Response__init>:
 80141e0:	3800      	subs	r0, #0
 80141e2:	bf18      	it	ne
 80141e4:	2001      	movne	r0, #1
 80141e6:	4770      	bx	lr

080141e8 <racs_services__srv__Setup_Response__fini>:
 80141e8:	4770      	bx	lr
 80141ea:	bf00      	nop

080141ec <racs_services__srv__Setup_Response__copy>:
 80141ec:	b120      	cbz	r0, 80141f8 <racs_services__srv__Setup_Response__copy+0xc>
 80141ee:	b119      	cbz	r1, 80141f8 <racs_services__srv__Setup_Response__copy+0xc>
 80141f0:	7803      	ldrb	r3, [r0, #0]
 80141f2:	2001      	movs	r0, #1
 80141f4:	700b      	strb	r3, [r1, #0]
 80141f6:	4770      	bx	lr
 80141f8:	2000      	movs	r0, #0
 80141fa:	4770      	bx	lr

080141fc <racs_services__srv__Setup_Response__Sequence__init>:
 80141fc:	b530      	push	{r4, r5, lr}
 80141fe:	4604      	mov	r4, r0
 8014200:	b087      	sub	sp, #28
 8014202:	b148      	cbz	r0, 8014218 <racs_services__srv__Setup_Response__Sequence__init+0x1c>
 8014204:	460d      	mov	r5, r1
 8014206:	a801      	add	r0, sp, #4
 8014208:	f7f9 fd18 	bl	800dc3c <rcutils_get_default_allocator>
 801420c:	b935      	cbnz	r5, 801421c <racs_services__srv__Setup_Response__Sequence__init+0x20>
 801420e:	462b      	mov	r3, r5
 8014210:	2001      	movs	r0, #1
 8014212:	60a5      	str	r5, [r4, #8]
 8014214:	e9c4 3500 	strd	r3, r5, [r4]
 8014218:	b007      	add	sp, #28
 801421a:	bd30      	pop	{r4, r5, pc}
 801421c:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8014220:	2101      	movs	r1, #1
 8014222:	4628      	mov	r0, r5
 8014224:	4798      	blx	r3
 8014226:	4603      	mov	r3, r0
 8014228:	2800      	cmp	r0, #0
 801422a:	d1f1      	bne.n	8014210 <racs_services__srv__Setup_Response__Sequence__init+0x14>
 801422c:	e7f4      	b.n	8014218 <racs_services__srv__Setup_Response__Sequence__init+0x1c>
 801422e:	bf00      	nop

08014230 <racs_services__srv__Setup_Response__Sequence__fini>:
 8014230:	b180      	cbz	r0, 8014254 <racs_services__srv__Setup_Response__Sequence__fini+0x24>
 8014232:	b510      	push	{r4, lr}
 8014234:	b086      	sub	sp, #24
 8014236:	4604      	mov	r4, r0
 8014238:	a801      	add	r0, sp, #4
 801423a:	f7f9 fcff 	bl	800dc3c <rcutils_get_default_allocator>
 801423e:	6820      	ldr	r0, [r4, #0]
 8014240:	b130      	cbz	r0, 8014250 <racs_services__srv__Setup_Response__Sequence__fini+0x20>
 8014242:	9b02      	ldr	r3, [sp, #8]
 8014244:	9905      	ldr	r1, [sp, #20]
 8014246:	4798      	blx	r3
 8014248:	2300      	movs	r3, #0
 801424a:	e9c4 3300 	strd	r3, r3, [r4]
 801424e:	60a3      	str	r3, [r4, #8]
 8014250:	b006      	add	sp, #24
 8014252:	bd10      	pop	{r4, pc}
 8014254:	4770      	bx	lr
 8014256:	bf00      	nop

08014258 <racs_services__srv__Setup_Event__init>:
 8014258:	b570      	push	{r4, r5, r6, lr}
 801425a:	4604      	mov	r4, r0
 801425c:	b086      	sub	sp, #24
 801425e:	b1c8      	cbz	r0, 8014294 <racs_services__srv__Setup_Event__init+0x3c>
 8014260:	f005 faea 	bl	8019838 <service_msgs__msg__ServiceEventInfo__init>
 8014264:	4605      	mov	r5, r0
 8014266:	b178      	cbz	r0, 8014288 <racs_services__srv__Setup_Event__init+0x30>
 8014268:	2600      	movs	r6, #0
 801426a:	a801      	add	r0, sp, #4
 801426c:	f7f9 fce6 	bl	800dc3c <rcutils_get_default_allocator>
 8014270:	a801      	add	r0, sp, #4
 8014272:	6326      	str	r6, [r4, #48]	; 0x30
 8014274:	e9c4 660a 	strd	r6, r6, [r4, #40]	; 0x28
 8014278:	f7f9 fce0 	bl	800dc3c <rcutils_get_default_allocator>
 801427c:	4628      	mov	r0, r5
 801427e:	63e6      	str	r6, [r4, #60]	; 0x3c
 8014280:	e9c4 660d 	strd	r6, r6, [r4, #52]	; 0x34
 8014284:	b006      	add	sp, #24
 8014286:	bd70      	pop	{r4, r5, r6, pc}
 8014288:	4620      	mov	r0, r4
 801428a:	f7ff ff3b 	bl	8014104 <racs_services__srv__Setup_Event__fini.part.0>
 801428e:	4628      	mov	r0, r5
 8014290:	b006      	add	sp, #24
 8014292:	bd70      	pop	{r4, r5, r6, pc}
 8014294:	4605      	mov	r5, r0
 8014296:	4628      	mov	r0, r5
 8014298:	b006      	add	sp, #24
 801429a:	bd70      	pop	{r4, r5, r6, pc}

0801429c <racs_services__srv__Setup_Event__fini>:
 801429c:	b1f0      	cbz	r0, 80142dc <racs_services__srv__Setup_Event__fini+0x40>
 801429e:	b510      	push	{r4, lr}
 80142a0:	b086      	sub	sp, #24
 80142a2:	4604      	mov	r4, r0
 80142a4:	f005 fada 	bl	801985c <service_msgs__msg__ServiceEventInfo__fini>
 80142a8:	a801      	add	r0, sp, #4
 80142aa:	f7f9 fcc7 	bl	800dc3c <rcutils_get_default_allocator>
 80142ae:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80142b0:	b130      	cbz	r0, 80142c0 <racs_services__srv__Setup_Event__fini+0x24>
 80142b2:	9b02      	ldr	r3, [sp, #8]
 80142b4:	9905      	ldr	r1, [sp, #20]
 80142b6:	4798      	blx	r3
 80142b8:	2300      	movs	r3, #0
 80142ba:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 80142be:	6323      	str	r3, [r4, #48]	; 0x30
 80142c0:	a801      	add	r0, sp, #4
 80142c2:	f7f9 fcbb 	bl	800dc3c <rcutils_get_default_allocator>
 80142c6:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80142c8:	b130      	cbz	r0, 80142d8 <racs_services__srv__Setup_Event__fini+0x3c>
 80142ca:	9b02      	ldr	r3, [sp, #8]
 80142cc:	9905      	ldr	r1, [sp, #20]
 80142ce:	4798      	blx	r3
 80142d0:	2300      	movs	r3, #0
 80142d2:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 80142d6:	63e3      	str	r3, [r4, #60]	; 0x3c
 80142d8:	b006      	add	sp, #24
 80142da:	bd10      	pop	{r4, pc}
 80142dc:	4770      	bx	lr
 80142de:	bf00      	nop

080142e0 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup>:
 80142e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80142e4:	2900      	cmp	r1, #0
 80142e6:	d04d      	beq.n	8014384 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup+0xa4>
 80142e8:	4605      	mov	r5, r0
 80142ea:	2800      	cmp	r0, #0
 80142ec:	d04a      	beq.n	8014384 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup+0xa4>
 80142ee:	460e      	mov	r6, r1
 80142f0:	4698      	mov	r8, r3
 80142f2:	2040      	movs	r0, #64	; 0x40
 80142f4:	680b      	ldr	r3, [r1, #0]
 80142f6:	6909      	ldr	r1, [r1, #16]
 80142f8:	4617      	mov	r7, r2
 80142fa:	4798      	blx	r3
 80142fc:	4604      	mov	r4, r0
 80142fe:	f7ff ffab 	bl	8014258 <racs_services__srv__Setup_Event__init>
 8014302:	4684      	mov	ip, r0
 8014304:	b370      	cbz	r0, 8014364 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup+0x84>
 8014306:	782b      	ldrb	r3, [r5, #0]
 8014308:	7023      	strb	r3, [r4, #0]
 801430a:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
 801430e:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 8014312:	e9c4 2301 	strd	r2, r3, [r4, #4]
 8014316:	e9c4 0108 	strd	r0, r1, [r4, #32]
 801431a:	68e8      	ldr	r0, [r5, #12]
 801431c:	6929      	ldr	r1, [r5, #16]
 801431e:	696a      	ldr	r2, [r5, #20]
 8014320:	69ab      	ldr	r3, [r5, #24]
 8014322:	60e0      	str	r0, [r4, #12]
 8014324:	6121      	str	r1, [r4, #16]
 8014326:	6162      	str	r2, [r4, #20]
 8014328:	61a3      	str	r3, [r4, #24]
 801432a:	b157      	cbz	r7, 8014342 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup+0x62>
 801432c:	2101      	movs	r1, #1
 801432e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8014332:	f7ff ff27 	bl	8014184 <racs_services__srv__Setup_Request__Sequence__init>
 8014336:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8014338:	4638      	mov	r0, r7
 801433a:	f7ff ff09 	bl	8014150 <racs_services__srv__Setup_Request__copy>
 801433e:	4603      	mov	r3, r0
 8014340:	b1c0      	cbz	r0, 8014374 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup+0x94>
 8014342:	f1b8 0f00 	cmp.w	r8, #0
 8014346:	d00a      	beq.n	801435e <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup+0x7e>
 8014348:	2101      	movs	r1, #1
 801434a:	f104 0034 	add.w	r0, r4, #52	; 0x34
 801434e:	f7ff ff55 	bl	80141fc <racs_services__srv__Setup_Response__Sequence__init>
 8014352:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014354:	4640      	mov	r0, r8
 8014356:	f7ff ff49 	bl	80141ec <racs_services__srv__Setup_Response__copy>
 801435a:	4603      	mov	r3, r0
 801435c:	b150      	cbz	r0, 8014374 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup+0x94>
 801435e:	4620      	mov	r0, r4
 8014360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014364:	4620      	mov	r0, r4
 8014366:	4664      	mov	r4, ip
 8014368:	6873      	ldr	r3, [r6, #4]
 801436a:	6931      	ldr	r1, [r6, #16]
 801436c:	4798      	blx	r3
 801436e:	4620      	mov	r0, r4
 8014370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014374:	4620      	mov	r0, r4
 8014376:	461c      	mov	r4, r3
 8014378:	6872      	ldr	r2, [r6, #4]
 801437a:	6931      	ldr	r1, [r6, #16]
 801437c:	4790      	blx	r2
 801437e:	4620      	mov	r0, r4
 8014380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014384:	2400      	movs	r4, #0
 8014386:	4620      	mov	r0, r4
 8014388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801438c <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Setup>:
 801438c:	b1b9      	cbz	r1, 80143be <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Setup+0x32>
 801438e:	b538      	push	{r3, r4, r5, lr}
 8014390:	4605      	mov	r5, r0
 8014392:	b190      	cbz	r0, 80143ba <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Setup+0x2e>
 8014394:	460c      	mov	r4, r1
 8014396:	f7ff ff81 	bl	801429c <racs_services__srv__Setup_Event__fini>
 801439a:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 801439c:	b110      	cbz	r0, 80143a4 <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Setup+0x18>
 801439e:	6863      	ldr	r3, [r4, #4]
 80143a0:	6921      	ldr	r1, [r4, #16]
 80143a2:	4798      	blx	r3
 80143a4:	6b68      	ldr	r0, [r5, #52]	; 0x34
 80143a6:	b110      	cbz	r0, 80143ae <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Setup+0x22>
 80143a8:	6863      	ldr	r3, [r4, #4]
 80143aa:	6921      	ldr	r1, [r4, #16]
 80143ac:	4798      	blx	r3
 80143ae:	4628      	mov	r0, r5
 80143b0:	6863      	ldr	r3, [r4, #4]
 80143b2:	6921      	ldr	r1, [r4, #16]
 80143b4:	4798      	blx	r3
 80143b6:	2001      	movs	r0, #1
 80143b8:	bd38      	pop	{r3, r4, r5, pc}
 80143ba:	2000      	movs	r0, #0
 80143bc:	bd38      	pop	{r3, r4, r5, pc}
 80143be:	2000      	movs	r0, #0
 80143c0:	4770      	bx	lr
 80143c2:	bf00      	nop

080143c4 <rcl_client_get_rmw_handle>:
 80143c4:	b118      	cbz	r0, 80143ce <rcl_client_get_rmw_handle+0xa>
 80143c6:	6800      	ldr	r0, [r0, #0]
 80143c8:	b108      	cbz	r0, 80143ce <rcl_client_get_rmw_handle+0xa>
 80143ca:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 80143ce:	4770      	bx	lr

080143d0 <rcl_send_request>:
 80143d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80143d2:	b08b      	sub	sp, #44	; 0x2c
 80143d4:	b1e8      	cbz	r0, 8014412 <rcl_send_request+0x42>
 80143d6:	4604      	mov	r4, r0
 80143d8:	6800      	ldr	r0, [r0, #0]
 80143da:	b1d0      	cbz	r0, 8014412 <rcl_send_request+0x42>
 80143dc:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 80143e0:	b1bb      	cbz	r3, 8014412 <rcl_send_request+0x42>
 80143e2:	460f      	mov	r7, r1
 80143e4:	b1d1      	cbz	r1, 801441c <rcl_send_request+0x4c>
 80143e6:	4615      	mov	r5, r2
 80143e8:	b1c2      	cbz	r2, 801441c <rcl_send_request+0x4c>
 80143ea:	2105      	movs	r1, #5
 80143ec:	f500 7088 	add.w	r0, r0, #272	; 0x110
 80143f0:	f003 fa12 	bl	8017818 <__atomic_load_8>
 80143f4:	6823      	ldr	r3, [r4, #0]
 80143f6:	462a      	mov	r2, r5
 80143f8:	e9c5 0100 	strd	r0, r1, [r5]
 80143fc:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 8014400:	4639      	mov	r1, r7
 8014402:	f004 fbd3 	bl	8018bac <rmw_send_request>
 8014406:	4606      	mov	r6, r0
 8014408:	b160      	cbz	r0, 8014424 <rcl_send_request+0x54>
 801440a:	2601      	movs	r6, #1
 801440c:	4630      	mov	r0, r6
 801440e:	b00b      	add	sp, #44	; 0x2c
 8014410:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014412:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
 8014416:	4630      	mov	r0, r6
 8014418:	b00b      	add	sp, #44	; 0x2c
 801441a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801441c:	260b      	movs	r6, #11
 801441e:	4630      	mov	r0, r6
 8014420:	b00b      	add	sp, #44	; 0x2c
 8014422:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014424:	6820      	ldr	r0, [r4, #0]
 8014426:	2305      	movs	r3, #5
 8014428:	f500 7088 	add.w	r0, r0, #272	; 0x110
 801442c:	9300      	str	r3, [sp, #0]
 801442e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014432:	f003 fa5d 	bl	80178f0 <__atomic_exchange_8>
 8014436:	6823      	ldr	r3, [r4, #0]
 8014438:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 801443c:	2a00      	cmp	r2, #0
 801443e:	d0e5      	beq.n	801440c <rcl_send_request+0x3c>
 8014440:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 8014444:	a905      	add	r1, sp, #20
 8014446:	f003 ffcd 	bl	80183e4 <rmw_get_gid_for_client>
 801444a:	b970      	cbnz	r0, 801446a <rcl_send_request+0x9a>
 801444c:	6820      	ldr	r0, [r4, #0]
 801444e:	ab06      	add	r3, sp, #24
 8014450:	4631      	mov	r1, r6
 8014452:	463a      	mov	r2, r7
 8014454:	f8d0 0118 	ldr.w	r0, [r0, #280]	; 0x118
 8014458:	9302      	str	r3, [sp, #8]
 801445a:	e9d5 4500 	ldrd	r4, r5, [r5]
 801445e:	e9cd 4500 	strd	r4, r5, [sp]
 8014462:	f001 f845 	bl	80154f0 <rcl_send_service_event_message>
 8014466:	4606      	mov	r6, r0
 8014468:	e7d0      	b.n	801440c <rcl_send_request+0x3c>
 801446a:	f000 f877 	bl	801455c <rcl_convert_rmw_ret_to_rcl_ret>
 801446e:	4606      	mov	r6, r0
 8014470:	e7cc      	b.n	801440c <rcl_send_request+0x3c>
 8014472:	bf00      	nop
 8014474:	0000      	movs	r0, r0
	...

08014478 <rcl_take_response>:
 8014478:	b5f0      	push	{r4, r5, r6, r7, lr}
 801447a:	468e      	mov	lr, r1
 801447c:	b095      	sub	sp, #84	; 0x54
 801447e:	460c      	mov	r4, r1
 8014480:	4616      	mov	r6, r2
 8014482:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
 8014486:	4605      	mov	r5, r0
 8014488:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801448c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014490:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8014494:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014498:	2d00      	cmp	r5, #0
 801449a:	d042      	beq.n	8014522 <rcl_take_response+0xaa>
 801449c:	682b      	ldr	r3, [r5, #0]
 801449e:	2b00      	cmp	r3, #0
 80144a0:	d03f      	beq.n	8014522 <rcl_take_response+0xaa>
 80144a2:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 80144a6:	2800      	cmp	r0, #0
 80144a8:	d03b      	beq.n	8014522 <rcl_take_response+0xaa>
 80144aa:	2e00      	cmp	r6, #0
 80144ac:	d03c      	beq.n	8014528 <rcl_take_response+0xb0>
 80144ae:	2300      	movs	r3, #0
 80144b0:	4632      	mov	r2, r6
 80144b2:	a90a      	add	r1, sp, #40	; 0x28
 80144b4:	f88d 3013 	strb.w	r3, [sp, #19]
 80144b8:	f10d 0313 	add.w	r3, sp, #19
 80144bc:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8014540 <rcl_take_response+0xc8>
 80144c0:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80144c4:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80144c8:	f004 fc78 	bl	8018dbc <rmw_take_response>
 80144cc:	4607      	mov	r7, r0
 80144ce:	bb68      	cbnz	r0, 801452c <rcl_take_response+0xb4>
 80144d0:	f89d 3013 	ldrb.w	r3, [sp, #19]
 80144d4:	b363      	cbz	r3, 8014530 <rcl_take_response+0xb8>
 80144d6:	682b      	ldr	r3, [r5, #0]
 80144d8:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 80144dc:	b19a      	cbz	r2, 8014506 <rcl_take_response+0x8e>
 80144de:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 80144e2:	a905      	add	r1, sp, #20
 80144e4:	f003 ff7e 	bl	80183e4 <rmw_get_gid_for_client>
 80144e8:	bb28      	cbnz	r0, 8014536 <rcl_take_response+0xbe>
 80144ea:	6829      	ldr	r1, [r5, #0]
 80144ec:	ab06      	add	r3, sp, #24
 80144ee:	4632      	mov	r2, r6
 80144f0:	f8d1 0118 	ldr.w	r0, [r1, #280]	; 0x118
 80144f4:	2103      	movs	r1, #3
 80144f6:	9302      	str	r3, [sp, #8]
 80144f8:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80144fc:	e9cd 6700 	strd	r6, r7, [sp]
 8014500:	f000 fff6 	bl	80154f0 <rcl_send_service_event_message>
 8014504:	4607      	mov	r7, r0
 8014506:	f10d 0e38 	add.w	lr, sp, #56	; 0x38
 801450a:	46a4      	mov	ip, r4
 801450c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014510:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014514:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8014518:	e88c 0003 	stmia.w	ip, {r0, r1}
 801451c:	4638      	mov	r0, r7
 801451e:	b015      	add	sp, #84	; 0x54
 8014520:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014522:	f44f 77fa 	mov.w	r7, #500	; 0x1f4
 8014526:	e7ee      	b.n	8014506 <rcl_take_response+0x8e>
 8014528:	270b      	movs	r7, #11
 801452a:	e7ec      	b.n	8014506 <rcl_take_response+0x8e>
 801452c:	2701      	movs	r7, #1
 801452e:	e7ea      	b.n	8014506 <rcl_take_response+0x8e>
 8014530:	f240 17f5 	movw	r7, #501	; 0x1f5
 8014534:	e7e7      	b.n	8014506 <rcl_take_response+0x8e>
 8014536:	f000 f811 	bl	801455c <rcl_convert_rmw_ret_to_rcl_ret>
 801453a:	4607      	mov	r7, r0
 801453c:	e7e3      	b.n	8014506 <rcl_take_response+0x8e>
 801453e:	bf00      	nop
	...

08014548 <rcl_client_is_valid>:
 8014548:	b130      	cbz	r0, 8014558 <rcl_client_is_valid+0x10>
 801454a:	6800      	ldr	r0, [r0, #0]
 801454c:	b120      	cbz	r0, 8014558 <rcl_client_is_valid+0x10>
 801454e:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 8014552:	3800      	subs	r0, #0
 8014554:	bf18      	it	ne
 8014556:	2001      	movne	r0, #1
 8014558:	4770      	bx	lr
 801455a:	bf00      	nop

0801455c <rcl_convert_rmw_ret_to_rcl_ret>:
 801455c:	280b      	cmp	r0, #11
 801455e:	dc0d      	bgt.n	801457c <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8014560:	2800      	cmp	r0, #0
 8014562:	db09      	blt.n	8014578 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8014564:	280b      	cmp	r0, #11
 8014566:	d807      	bhi.n	8014578 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8014568:	e8df f000 	tbb	[pc, r0]
 801456c:	07060607 	.word	0x07060607
 8014570:	06060606 	.word	0x06060606
 8014574:	07070606 	.word	0x07070606
 8014578:	2001      	movs	r0, #1
 801457a:	4770      	bx	lr
 801457c:	28cb      	cmp	r0, #203	; 0xcb
 801457e:	bf18      	it	ne
 8014580:	2001      	movne	r0, #1
 8014582:	4770      	bx	lr

08014584 <rcl_get_zero_initialized_context>:
 8014584:	4a03      	ldr	r2, [pc, #12]	; (8014594 <rcl_get_zero_initialized_context+0x10>)
 8014586:	4603      	mov	r3, r0
 8014588:	e892 0003 	ldmia.w	r2, {r0, r1}
 801458c:	e883 0003 	stmia.w	r3, {r0, r1}
 8014590:	4618      	mov	r0, r3
 8014592:	4770      	bx	lr
 8014594:	0801ea30 	.word	0x0801ea30

08014598 <rcl_context_is_valid>:
 8014598:	b118      	cbz	r0, 80145a2 <rcl_context_is_valid+0xa>
 801459a:	6840      	ldr	r0, [r0, #4]
 801459c:	3800      	subs	r0, #0
 801459e:	bf18      	it	ne
 80145a0:	2001      	movne	r0, #1
 80145a2:	4770      	bx	lr

080145a4 <__cleanup_context>:
 80145a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80145a8:	4606      	mov	r6, r0
 80145aa:	2300      	movs	r3, #0
 80145ac:	6800      	ldr	r0, [r0, #0]
 80145ae:	6073      	str	r3, [r6, #4]
 80145b0:	2800      	cmp	r0, #0
 80145b2:	d049      	beq.n	8014648 <__cleanup_context+0xa4>
 80145b4:	6947      	ldr	r7, [r0, #20]
 80145b6:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80145ba:	f8d0 9010 	ldr.w	r9, [r0, #16]
 80145be:	b137      	cbz	r7, 80145ce <__cleanup_context+0x2a>
 80145c0:	3014      	adds	r0, #20
 80145c2:	f000 f9e7 	bl	8014994 <rcl_init_options_fini>
 80145c6:	4607      	mov	r7, r0
 80145c8:	2800      	cmp	r0, #0
 80145ca:	d144      	bne.n	8014656 <__cleanup_context+0xb2>
 80145cc:	6830      	ldr	r0, [r6, #0]
 80145ce:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80145d0:	b143      	cbz	r3, 80145e4 <__cleanup_context+0x40>
 80145d2:	3028      	adds	r0, #40	; 0x28
 80145d4:	f004 f930 	bl	8018838 <rmw_context_fini>
 80145d8:	b118      	cbz	r0, 80145e2 <__cleanup_context+0x3e>
 80145da:	2f00      	cmp	r7, #0
 80145dc:	d03e      	beq.n	801465c <__cleanup_context+0xb8>
 80145de:	f7f9 fb5f 	bl	800dca0 <rcutils_reset_error>
 80145e2:	6830      	ldr	r0, [r6, #0]
 80145e4:	6a03      	ldr	r3, [r0, #32]
 80145e6:	b1db      	cbz	r3, 8014620 <__cleanup_context+0x7c>
 80145e8:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 80145ec:	2a01      	cmp	r2, #1
 80145ee:	f17c 0100 	sbcs.w	r1, ip, #0
 80145f2:	db11      	blt.n	8014618 <__cleanup_context+0x74>
 80145f4:	2400      	movs	r4, #0
 80145f6:	4625      	mov	r5, r4
 80145f8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80145fc:	4649      	mov	r1, r9
 80145fe:	b1b8      	cbz	r0, 8014630 <__cleanup_context+0x8c>
 8014600:	47c0      	blx	r8
 8014602:	6833      	ldr	r3, [r6, #0]
 8014604:	3401      	adds	r4, #1
 8014606:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 801460a:	f145 0500 	adc.w	r5, r5, #0
 801460e:	6a1b      	ldr	r3, [r3, #32]
 8014610:	4294      	cmp	r4, r2
 8014612:	eb75 010c 	sbcs.w	r1, r5, ip
 8014616:	dbef      	blt.n	80145f8 <__cleanup_context+0x54>
 8014618:	4618      	mov	r0, r3
 801461a:	4649      	mov	r1, r9
 801461c:	47c0      	blx	r8
 801461e:	6830      	ldr	r0, [r6, #0]
 8014620:	4649      	mov	r1, r9
 8014622:	47c0      	blx	r8
 8014624:	2300      	movs	r3, #0
 8014626:	4638      	mov	r0, r7
 8014628:	e9c6 3300 	strd	r3, r3, [r6]
 801462c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014630:	3401      	adds	r4, #1
 8014632:	f145 0500 	adc.w	r5, r5, #0
 8014636:	4294      	cmp	r4, r2
 8014638:	eb75 010c 	sbcs.w	r1, r5, ip
 801463c:	dbdc      	blt.n	80145f8 <__cleanup_context+0x54>
 801463e:	4618      	mov	r0, r3
 8014640:	4649      	mov	r1, r9
 8014642:	47c0      	blx	r8
 8014644:	6830      	ldr	r0, [r6, #0]
 8014646:	e7eb      	b.n	8014620 <__cleanup_context+0x7c>
 8014648:	4607      	mov	r7, r0
 801464a:	2300      	movs	r3, #0
 801464c:	4638      	mov	r0, r7
 801464e:	e9c6 3300 	strd	r3, r3, [r6]
 8014652:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014656:	f7f9 fb23 	bl	800dca0 <rcutils_reset_error>
 801465a:	e7b7      	b.n	80145cc <__cleanup_context+0x28>
 801465c:	f7ff ff7e 	bl	801455c <rcl_convert_rmw_ret_to_rcl_ret>
 8014660:	4607      	mov	r7, r0
 8014662:	e7bc      	b.n	80145de <__cleanup_context+0x3a>

08014664 <rcl_init>:
 8014664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014668:	1e05      	subs	r5, r0, #0
 801466a:	b0a7      	sub	sp, #156	; 0x9c
 801466c:	460e      	mov	r6, r1
 801466e:	4690      	mov	r8, r2
 8014670:	461f      	mov	r7, r3
 8014672:	f340 80a0 	ble.w	80147b6 <rcl_init+0x152>
 8014676:	2900      	cmp	r1, #0
 8014678:	f000 80a0 	beq.w	80147bc <rcl_init+0x158>
 801467c:	f1a1 0e04 	sub.w	lr, r1, #4
 8014680:	f04f 0c00 	mov.w	ip, #0
 8014684:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 8014688:	f10c 0c01 	add.w	ip, ip, #1
 801468c:	2c00      	cmp	r4, #0
 801468e:	f000 8095 	beq.w	80147bc <rcl_init+0x158>
 8014692:	4565      	cmp	r5, ip
 8014694:	d1f6      	bne.n	8014684 <rcl_init+0x20>
 8014696:	f1b8 0f00 	cmp.w	r8, #0
 801469a:	f000 808f 	beq.w	80147bc <rcl_init+0x158>
 801469e:	f8d8 4000 	ldr.w	r4, [r8]
 80146a2:	2c00      	cmp	r4, #0
 80146a4:	f000 808a 	beq.w	80147bc <rcl_init+0x158>
 80146a8:	f10d 0c84 	add.w	ip, sp, #132	; 0x84
 80146ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80146ae:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80146b2:	6823      	ldr	r3, [r4, #0]
 80146b4:	a821      	add	r0, sp, #132	; 0x84
 80146b6:	f8cc 3000 	str.w	r3, [ip]
 80146ba:	f7f9 facd 	bl	800dc58 <rcutils_allocator_is_valid>
 80146be:	f080 0001 	eor.w	r0, r0, #1
 80146c2:	b2c0      	uxtb	r0, r0
 80146c4:	2800      	cmp	r0, #0
 80146c6:	d179      	bne.n	80147bc <rcl_init+0x158>
 80146c8:	2f00      	cmp	r7, #0
 80146ca:	d077      	beq.n	80147bc <rcl_init+0x158>
 80146cc:	683b      	ldr	r3, [r7, #0]
 80146ce:	2b00      	cmp	r3, #0
 80146d0:	d179      	bne.n	80147c6 <rcl_init+0x162>
 80146d2:	2198      	movs	r1, #152	; 0x98
 80146d4:	2001      	movs	r0, #1
 80146d6:	e9dd 3224 	ldrd	r3, r2, [sp, #144]	; 0x90
 80146da:	4798      	blx	r3
 80146dc:	4604      	mov	r4, r0
 80146de:	6038      	str	r0, [r7, #0]
 80146e0:	2800      	cmp	r0, #0
 80146e2:	f000 80cd 	beq.w	8014880 <rcl_init+0x21c>
 80146e6:	a802      	add	r0, sp, #8
 80146e8:	f003 fbea 	bl	8017ec0 <rmw_get_zero_initialized_context>
 80146ec:	a902      	add	r1, sp, #8
 80146ee:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80146f2:	2270      	movs	r2, #112	; 0x70
 80146f4:	f008 f957 	bl	801c9a6 <memcpy>
 80146f8:	f8d7 e000 	ldr.w	lr, [r7]
 80146fc:	f10d 0c84 	add.w	ip, sp, #132	; 0x84
 8014700:	4674      	mov	r4, lr
 8014702:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014706:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014708:	f8dc 3000 	ldr.w	r3, [ip]
 801470c:	f10e 0114 	add.w	r1, lr, #20
 8014710:	4640      	mov	r0, r8
 8014712:	6023      	str	r3, [r4, #0]
 8014714:	f000 f968 	bl	80149e8 <rcl_init_options_copy>
 8014718:	4604      	mov	r4, r0
 801471a:	2800      	cmp	r0, #0
 801471c:	d144      	bne.n	80147a8 <rcl_init+0x144>
 801471e:	f8d7 9000 	ldr.w	r9, [r7]
 8014722:	ea4f 7ae5 	mov.w	sl, r5, asr #31
 8014726:	f8c9 0020 	str.w	r0, [r9, #32]
 801472a:	f8c9 5018 	str.w	r5, [r9, #24]
 801472e:	f8c9 a01c 	str.w	sl, [r9, #28]
 8014732:	2d00      	cmp	r5, #0
 8014734:	d04e      	beq.n	80147d4 <rcl_init+0x170>
 8014736:	2e00      	cmp	r6, #0
 8014738:	d04c      	beq.n	80147d4 <rcl_init+0x170>
 801473a:	2104      	movs	r1, #4
 801473c:	4628      	mov	r0, r5
 801473e:	e9dd 3224 	ldrd	r3, r2, [sp, #144]	; 0x90
 8014742:	4798      	blx	r3
 8014744:	f8c9 0020 	str.w	r0, [r9, #32]
 8014748:	f8d7 9000 	ldr.w	r9, [r7]
 801474c:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8014750:	46cb      	mov	fp, r9
 8014752:	b343      	cbz	r3, 80147a6 <rcl_init+0x142>
 8014754:	2d01      	cmp	r5, #1
 8014756:	f17a 0300 	sbcs.w	r3, sl, #0
 801475a:	db3b      	blt.n	80147d4 <rcl_init+0x170>
 801475c:	2400      	movs	r4, #0
 801475e:	3e04      	subs	r6, #4
 8014760:	46a1      	mov	r9, r4
 8014762:	e00b      	b.n	801477c <rcl_init+0x118>
 8014764:	6831      	ldr	r1, [r6, #0]
 8014766:	f008 f91e 	bl	801c9a6 <memcpy>
 801476a:	3401      	adds	r4, #1
 801476c:	f149 0900 	adc.w	r9, r9, #0
 8014770:	45ca      	cmp	sl, r9
 8014772:	bf08      	it	eq
 8014774:	42a5      	cmpeq	r5, r4
 8014776:	d02b      	beq.n	80147d0 <rcl_init+0x16c>
 8014778:	f8d7 b000 	ldr.w	fp, [r7]
 801477c:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8014780:	f7eb fdbe 	bl	8000300 <strlen>
 8014784:	1c42      	adds	r2, r0, #1
 8014786:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014788:	4610      	mov	r0, r2
 801478a:	9925      	ldr	r1, [sp, #148]	; 0x94
 801478c:	f8db b020 	ldr.w	fp, [fp, #32]
 8014790:	9201      	str	r2, [sp, #4]
 8014792:	4798      	blx	r3
 8014794:	683b      	ldr	r3, [r7, #0]
 8014796:	f84b 0024 	str.w	r0, [fp, r4, lsl #2]
 801479a:	6a1b      	ldr	r3, [r3, #32]
 801479c:	9a01      	ldr	r2, [sp, #4]
 801479e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80147a2:	2800      	cmp	r0, #0
 80147a4:	d1de      	bne.n	8014764 <rcl_init+0x100>
 80147a6:	240a      	movs	r4, #10
 80147a8:	4638      	mov	r0, r7
 80147aa:	f7ff fefb 	bl	80145a4 <__cleanup_context>
 80147ae:	4620      	mov	r0, r4
 80147b0:	b027      	add	sp, #156	; 0x9c
 80147b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80147b6:	2900      	cmp	r1, #0
 80147b8:	f43f af6d 	beq.w	8014696 <rcl_init+0x32>
 80147bc:	240b      	movs	r4, #11
 80147be:	4620      	mov	r0, r4
 80147c0:	b027      	add	sp, #156	; 0x9c
 80147c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80147c6:	2464      	movs	r4, #100	; 0x64
 80147c8:	4620      	mov	r0, r4
 80147ca:	b027      	add	sp, #156	; 0x9c
 80147cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80147d0:	f8d7 9000 	ldr.w	r9, [r7]
 80147d4:	493f      	ldr	r1, [pc, #252]	; (80148d4 <rcl_init+0x270>)
 80147d6:	680b      	ldr	r3, [r1, #0]
 80147d8:	3301      	adds	r3, #1
 80147da:	d04c      	beq.n	8014876 <rcl_init+0x212>
 80147dc:	461a      	mov	r2, r3
 80147de:	2000      	movs	r0, #0
 80147e0:	600b      	str	r3, [r1, #0]
 80147e2:	f8d9 5014 	ldr.w	r5, [r9, #20]
 80147e6:	607b      	str	r3, [r7, #4]
 80147e8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80147ea:	3301      	adds	r3, #1
 80147ec:	e9c5 2006 	strd	r2, r0, [r5, #24]
 80147f0:	d05d      	beq.n	80148ae <rcl_init+0x24a>
 80147f2:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 80147f6:	2b00      	cmp	r3, #0
 80147f8:	d044      	beq.n	8014884 <rcl_init+0x220>
 80147fa:	2b01      	cmp	r3, #1
 80147fc:	d04e      	beq.n	801489c <rcl_init+0x238>
 80147fe:	f8d8 3000 	ldr.w	r3, [r8]
 8014802:	f105 0634 	add.w	r6, r5, #52	; 0x34
 8014806:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801480a:	2b00      	cmp	r3, #0
 801480c:	d05a      	beq.n	80148c4 <rcl_init+0x260>
 801480e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8014810:	b953      	cbnz	r3, 8014828 <rcl_init+0x1c4>
 8014812:	f895 0034 	ldrb.w	r0, [r5, #52]	; 0x34
 8014816:	2801      	cmp	r0, #1
 8014818:	d008      	beq.n	801482c <rcl_init+0x1c8>
 801481a:	a921      	add	r1, sp, #132	; 0x84
 801481c:	4630      	mov	r0, r6
 801481e:	f006 fceb 	bl	801b1f8 <rcl_get_discovery_static_peers>
 8014822:	4604      	mov	r4, r0
 8014824:	2800      	cmp	r0, #0
 8014826:	d1bf      	bne.n	80147a8 <rcl_init+0x144>
 8014828:	f895 0034 	ldrb.w	r0, [r5, #52]	; 0x34
 801482c:	f006 fcda 	bl	801b1e4 <rcl_automatic_discovery_range_to_string>
 8014830:	683b      	ldr	r3, [r7, #0]
 8014832:	aa20      	add	r2, sp, #128	; 0x80
 8014834:	a91f      	add	r1, sp, #124	; 0x7c
 8014836:	695b      	ldr	r3, [r3, #20]
 8014838:	6d58      	ldr	r0, [r3, #84]	; 0x54
 801483a:	f001 fc79 	bl	8016130 <rcl_validate_enclave_name>
 801483e:	4604      	mov	r4, r0
 8014840:	2800      	cmp	r0, #0
 8014842:	d1b1      	bne.n	80147a8 <rcl_init+0x144>
 8014844:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8014846:	bb83      	cbnz	r3, 80148aa <rcl_init+0x246>
 8014848:	6839      	ldr	r1, [r7, #0]
 801484a:	694b      	ldr	r3, [r1, #20]
 801484c:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8014850:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8014852:	f000 fc97 	bl	8015184 <rcl_get_security_options_from_environment>
 8014856:	4604      	mov	r4, r0
 8014858:	2800      	cmp	r0, #0
 801485a:	d1a5      	bne.n	80147a8 <rcl_init+0x144>
 801485c:	6839      	ldr	r1, [r7, #0]
 801485e:	6948      	ldr	r0, [r1, #20]
 8014860:	3128      	adds	r1, #40	; 0x28
 8014862:	3018      	adds	r0, #24
 8014864:	f003 feb2 	bl	80185cc <rmw_init>
 8014868:	4604      	mov	r4, r0
 801486a:	2800      	cmp	r0, #0
 801486c:	d0a7      	beq.n	80147be <rcl_init+0x15a>
 801486e:	f7ff fe75 	bl	801455c <rcl_convert_rmw_ret_to_rcl_ret>
 8014872:	4604      	mov	r4, r0
 8014874:	e798      	b.n	80147a8 <rcl_init+0x144>
 8014876:	2201      	movs	r2, #1
 8014878:	4618      	mov	r0, r3
 801487a:	600a      	str	r2, [r1, #0]
 801487c:	4613      	mov	r3, r2
 801487e:	e7b0      	b.n	80147e2 <rcl_init+0x17e>
 8014880:	240a      	movs	r4, #10
 8014882:	e79c      	b.n	80147be <rcl_init+0x15a>
 8014884:	f105 0030 	add.w	r0, r5, #48	; 0x30
 8014888:	f000 f90c 	bl	8014aa4 <rcl_get_localhost_only>
 801488c:	4604      	mov	r4, r0
 801488e:	2800      	cmp	r0, #0
 8014890:	d18a      	bne.n	80147a8 <rcl_init+0x144>
 8014892:	683a      	ldr	r2, [r7, #0]
 8014894:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8014898:	6955      	ldr	r5, [r2, #20]
 801489a:	e7ae      	b.n	80147fa <rcl_init+0x196>
 801489c:	2302      	movs	r3, #2
 801489e:	2200      	movs	r2, #0
 80148a0:	4618      	mov	r0, r3
 80148a2:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
 80148a6:	63ea      	str	r2, [r5, #60]	; 0x3c
 80148a8:	e7c0      	b.n	801482c <rcl_init+0x1c8>
 80148aa:	2401      	movs	r4, #1
 80148ac:	e77c      	b.n	80147a8 <rcl_init+0x144>
 80148ae:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80148b2:	f006 fd07 	bl	801b2c4 <rcl_get_default_domain_id>
 80148b6:	4604      	mov	r4, r0
 80148b8:	2800      	cmp	r0, #0
 80148ba:	f47f af75 	bne.w	80147a8 <rcl_init+0x144>
 80148be:	683b      	ldr	r3, [r7, #0]
 80148c0:	695d      	ldr	r5, [r3, #20]
 80148c2:	e796      	b.n	80147f2 <rcl_init+0x18e>
 80148c4:	4630      	mov	r0, r6
 80148c6:	f006 fc4b 	bl	801b160 <rcl_get_automatic_discovery_range>
 80148ca:	4604      	mov	r4, r0
 80148cc:	2800      	cmp	r0, #0
 80148ce:	d09e      	beq.n	801480e <rcl_init+0x1aa>
 80148d0:	e76a      	b.n	80147a8 <rcl_init+0x144>
 80148d2:	bf00      	nop
 80148d4:	200107dc 	.word	0x200107dc

080148d8 <rcl_get_zero_initialized_init_options>:
 80148d8:	2000      	movs	r0, #0
 80148da:	4770      	bx	lr

080148dc <rcl_init_options_init>:
 80148dc:	b084      	sub	sp, #16
 80148de:	b570      	push	{r4, r5, r6, lr}
 80148e0:	b09e      	sub	sp, #120	; 0x78
 80148e2:	ad23      	add	r5, sp, #140	; 0x8c
 80148e4:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 80148e8:	2800      	cmp	r0, #0
 80148ea:	d046      	beq.n	801497a <rcl_init_options_init+0x9e>
 80148ec:	6803      	ldr	r3, [r0, #0]
 80148ee:	4604      	mov	r4, r0
 80148f0:	b133      	cbz	r3, 8014900 <rcl_init_options_init+0x24>
 80148f2:	2564      	movs	r5, #100	; 0x64
 80148f4:	4628      	mov	r0, r5
 80148f6:	b01e      	add	sp, #120	; 0x78
 80148f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80148fc:	b004      	add	sp, #16
 80148fe:	4770      	bx	lr
 8014900:	4628      	mov	r0, r5
 8014902:	f7f9 f9a9 	bl	800dc58 <rcutils_allocator_is_valid>
 8014906:	2800      	cmp	r0, #0
 8014908:	d037      	beq.n	801497a <rcl_init_options_init+0x9e>
 801490a:	46ae      	mov	lr, r5
 801490c:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
 8014910:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014914:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014918:	f8de 3000 	ldr.w	r3, [lr]
 801491c:	2070      	movs	r0, #112	; 0x70
 801491e:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8014920:	f8cc 3000 	str.w	r3, [ip]
 8014924:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014926:	4798      	blx	r3
 8014928:	4606      	mov	r6, r0
 801492a:	6020      	str	r0, [r4, #0]
 801492c:	b338      	cbz	r0, 801497e <rcl_init_options_init+0xa2>
 801492e:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
 8014932:	4686      	mov	lr, r0
 8014934:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014938:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801493c:	f8dc 3000 	ldr.w	r3, [ip]
 8014940:	a802      	add	r0, sp, #8
 8014942:	f8ce 3000 	str.w	r3, [lr]
 8014946:	f003 facf 	bl	8017ee8 <rmw_get_zero_initialized_init_options>
 801494a:	2258      	movs	r2, #88	; 0x58
 801494c:	a902      	add	r1, sp, #8
 801494e:	f106 0018 	add.w	r0, r6, #24
 8014952:	f008 f828 	bl	801c9a6 <memcpy>
 8014956:	ab26      	add	r3, sp, #152	; 0x98
 8014958:	6826      	ldr	r6, [r4, #0]
 801495a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801495e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8014962:	f106 0018 	add.w	r0, r6, #24
 8014966:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 801496a:	f003 fd5f 	bl	801842c <rmw_init_options_init>
 801496e:	4605      	mov	r5, r0
 8014970:	b938      	cbnz	r0, 8014982 <rcl_init_options_init+0xa6>
 8014972:	6823      	ldr	r3, [r4, #0]
 8014974:	f883 0034 	strb.w	r0, [r3, #52]	; 0x34
 8014978:	e7bc      	b.n	80148f4 <rcl_init_options_init+0x18>
 801497a:	250b      	movs	r5, #11
 801497c:	e7ba      	b.n	80148f4 <rcl_init_options_init+0x18>
 801497e:	250a      	movs	r5, #10
 8014980:	e7b8      	b.n	80148f4 <rcl_init_options_init+0x18>
 8014982:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8014984:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8014986:	6820      	ldr	r0, [r4, #0]
 8014988:	4798      	blx	r3
 801498a:	4628      	mov	r0, r5
 801498c:	f7ff fde6 	bl	801455c <rcl_convert_rmw_ret_to_rcl_ret>
 8014990:	4605      	mov	r5, r0
 8014992:	e7af      	b.n	80148f4 <rcl_init_options_init+0x18>

08014994 <rcl_init_options_fini>:
 8014994:	b530      	push	{r4, r5, lr}
 8014996:	b087      	sub	sp, #28
 8014998:	b1f0      	cbz	r0, 80149d8 <rcl_init_options_fini+0x44>
 801499a:	6803      	ldr	r3, [r0, #0]
 801499c:	4604      	mov	r4, r0
 801499e:	b1db      	cbz	r3, 80149d8 <rcl_init_options_fini+0x44>
 80149a0:	469c      	mov	ip, r3
 80149a2:	f10d 0e04 	add.w	lr, sp, #4
 80149a6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80149aa:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80149ae:	f8dc 3000 	ldr.w	r3, [ip]
 80149b2:	a801      	add	r0, sp, #4
 80149b4:	f8ce 3000 	str.w	r3, [lr]
 80149b8:	f7f9 f94e 	bl	800dc58 <rcutils_allocator_is_valid>
 80149bc:	b160      	cbz	r0, 80149d8 <rcl_init_options_fini+0x44>
 80149be:	6820      	ldr	r0, [r4, #0]
 80149c0:	3018      	adds	r0, #24
 80149c2:	f003 fdcd 	bl	8018560 <rmw_init_options_fini>
 80149c6:	4605      	mov	r5, r0
 80149c8:	b950      	cbnz	r0, 80149e0 <rcl_init_options_fini+0x4c>
 80149ca:	6820      	ldr	r0, [r4, #0]
 80149cc:	9b02      	ldr	r3, [sp, #8]
 80149ce:	9905      	ldr	r1, [sp, #20]
 80149d0:	4798      	blx	r3
 80149d2:	4628      	mov	r0, r5
 80149d4:	b007      	add	sp, #28
 80149d6:	bd30      	pop	{r4, r5, pc}
 80149d8:	250b      	movs	r5, #11
 80149da:	4628      	mov	r0, r5
 80149dc:	b007      	add	sp, #28
 80149de:	bd30      	pop	{r4, r5, pc}
 80149e0:	f7ff fdbc 	bl	801455c <rcl_convert_rmw_ret_to_rcl_ret>
 80149e4:	4605      	mov	r5, r0
 80149e6:	e7f8      	b.n	80149da <rcl_init_options_fini+0x46>

080149e8 <rcl_init_options_copy>:
 80149e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80149ea:	b09d      	sub	sp, #116	; 0x74
 80149ec:	2800      	cmp	r0, #0
 80149ee:	d04d      	beq.n	8014a8c <rcl_init_options_copy+0xa4>
 80149f0:	4604      	mov	r4, r0
 80149f2:	6800      	ldr	r0, [r0, #0]
 80149f4:	2800      	cmp	r0, #0
 80149f6:	d049      	beq.n	8014a8c <rcl_init_options_copy+0xa4>
 80149f8:	460d      	mov	r5, r1
 80149fa:	f7f9 f92d 	bl	800dc58 <rcutils_allocator_is_valid>
 80149fe:	2d00      	cmp	r5, #0
 8014a00:	d044      	beq.n	8014a8c <rcl_init_options_copy+0xa4>
 8014a02:	f080 0001 	eor.w	r0, r0, #1
 8014a06:	b2c0      	uxtb	r0, r0
 8014a08:	2800      	cmp	r0, #0
 8014a0a:	d13f      	bne.n	8014a8c <rcl_init_options_copy+0xa4>
 8014a0c:	682b      	ldr	r3, [r5, #0]
 8014a0e:	b11b      	cbz	r3, 8014a18 <rcl_init_options_copy+0x30>
 8014a10:	2464      	movs	r4, #100	; 0x64
 8014a12:	4620      	mov	r0, r4
 8014a14:	b01d      	add	sp, #116	; 0x74
 8014a16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014a18:	6826      	ldr	r6, [r4, #0]
 8014a1a:	f10d 0c5c 	add.w	ip, sp, #92	; 0x5c
 8014a1e:	46b6      	mov	lr, r6
 8014a20:	6837      	ldr	r7, [r6, #0]
 8014a22:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014a26:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014a2a:	f8de 3000 	ldr.w	r3, [lr]
 8014a2e:	2070      	movs	r0, #112	; 0x70
 8014a30:	4619      	mov	r1, r3
 8014a32:	f8cc 3000 	str.w	r3, [ip]
 8014a36:	47b8      	blx	r7
 8014a38:	4606      	mov	r6, r0
 8014a3a:	6028      	str	r0, [r5, #0]
 8014a3c:	b350      	cbz	r0, 8014a94 <rcl_init_options_copy+0xac>
 8014a3e:	f10d 0c5c 	add.w	ip, sp, #92	; 0x5c
 8014a42:	4686      	mov	lr, r0
 8014a44:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014a48:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014a4c:	f8dc 3000 	ldr.w	r3, [ip]
 8014a50:	4668      	mov	r0, sp
 8014a52:	f8ce 3000 	str.w	r3, [lr]
 8014a56:	f003 fa47 	bl	8017ee8 <rmw_get_zero_initialized_init_options>
 8014a5a:	2258      	movs	r2, #88	; 0x58
 8014a5c:	4669      	mov	r1, sp
 8014a5e:	f106 0018 	add.w	r0, r6, #24
 8014a62:	f007 ffa0 	bl	801c9a6 <memcpy>
 8014a66:	6820      	ldr	r0, [r4, #0]
 8014a68:	6829      	ldr	r1, [r5, #0]
 8014a6a:	3018      	adds	r0, #24
 8014a6c:	3118      	adds	r1, #24
 8014a6e:	f003 fd45 	bl	80184fc <rmw_init_options_copy>
 8014a72:	4604      	mov	r4, r0
 8014a74:	2800      	cmp	r0, #0
 8014a76:	d0cc      	beq.n	8014a12 <rcl_init_options_copy+0x2a>
 8014a78:	f7f9 f8fc 	bl	800dc74 <rcutils_get_error_string>
 8014a7c:	f7f9 f910 	bl	800dca0 <rcutils_reset_error>
 8014a80:	4628      	mov	r0, r5
 8014a82:	f7ff ff87 	bl	8014994 <rcl_init_options_fini>
 8014a86:	b138      	cbz	r0, 8014a98 <rcl_init_options_copy+0xb0>
 8014a88:	4604      	mov	r4, r0
 8014a8a:	e7c2      	b.n	8014a12 <rcl_init_options_copy+0x2a>
 8014a8c:	240b      	movs	r4, #11
 8014a8e:	4620      	mov	r0, r4
 8014a90:	b01d      	add	sp, #116	; 0x74
 8014a92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014a94:	240a      	movs	r4, #10
 8014a96:	e7bc      	b.n	8014a12 <rcl_init_options_copy+0x2a>
 8014a98:	4620      	mov	r0, r4
 8014a9a:	b01d      	add	sp, #116	; 0x74
 8014a9c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014aa0:	f7ff bd5c 	b.w	801455c <rcl_convert_rmw_ret_to_rcl_ret>

08014aa4 <rcl_get_localhost_only>:
 8014aa4:	b510      	push	{r4, lr}
 8014aa6:	2300      	movs	r3, #0
 8014aa8:	b082      	sub	sp, #8
 8014aaa:	9301      	str	r3, [sp, #4]
 8014aac:	b1c0      	cbz	r0, 8014ae0 <rcl_get_localhost_only+0x3c>
 8014aae:	4604      	mov	r4, r0
 8014ab0:	a901      	add	r1, sp, #4
 8014ab2:	480d      	ldr	r0, [pc, #52]	; (8014ae8 <rcl_get_localhost_only+0x44>)
 8014ab4:	f002 ff54 	bl	8017960 <rcutils_get_env>
 8014ab8:	b110      	cbz	r0, 8014ac0 <rcl_get_localhost_only+0x1c>
 8014aba:	2001      	movs	r0, #1
 8014abc:	b002      	add	sp, #8
 8014abe:	bd10      	pop	{r4, pc}
 8014ac0:	9b01      	ldr	r3, [sp, #4]
 8014ac2:	b10b      	cbz	r3, 8014ac8 <rcl_get_localhost_only+0x24>
 8014ac4:	781b      	ldrb	r3, [r3, #0]
 8014ac6:	b923      	cbnz	r3, 8014ad2 <rcl_get_localhost_only+0x2e>
 8014ac8:	2300      	movs	r3, #0
 8014aca:	4618      	mov	r0, r3
 8014acc:	7023      	strb	r3, [r4, #0]
 8014ace:	b002      	add	sp, #8
 8014ad0:	bd10      	pop	{r4, pc}
 8014ad2:	2b31      	cmp	r3, #49	; 0x31
 8014ad4:	bf0c      	ite	eq
 8014ad6:	2301      	moveq	r3, #1
 8014ad8:	2302      	movne	r3, #2
 8014ada:	7023      	strb	r3, [r4, #0]
 8014adc:	b002      	add	sp, #8
 8014ade:	bd10      	pop	{r4, pc}
 8014ae0:	200b      	movs	r0, #11
 8014ae2:	b002      	add	sp, #8
 8014ae4:	bd10      	pop	{r4, pc}
 8014ae6:	bf00      	nop
 8014ae8:	0801ea38 	.word	0x0801ea38

08014aec <rcl_get_zero_initialized_node>:
 8014aec:	4a03      	ldr	r2, [pc, #12]	; (8014afc <rcl_get_zero_initialized_node+0x10>)
 8014aee:	4603      	mov	r3, r0
 8014af0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014af4:	e883 0003 	stmia.w	r3, {r0, r1}
 8014af8:	4618      	mov	r0, r3
 8014afa:	4770      	bx	lr
 8014afc:	0801ea7c 	.word	0x0801ea7c

08014b00 <rcl_node_init>:
 8014b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b04:	b0ab      	sub	sp, #172	; 0xac
 8014b06:	4604      	mov	r4, r0
 8014b08:	460e      	mov	r6, r1
 8014b0a:	4615      	mov	r5, r2
 8014b0c:	f8dd 80d0 	ldr.w	r8, [sp, #208]	; 0xd0
 8014b10:	a825      	add	r0, sp, #148	; 0x94
 8014b12:	461f      	mov	r7, r3
 8014b14:	f006 fe4a 	bl	801b7ac <rcl_guard_condition_get_default_options>
 8014b18:	f1b8 0f00 	cmp.w	r8, #0
 8014b1c:	f000 80f3 	beq.w	8014d06 <rcl_node_init+0x206>
 8014b20:	4640      	mov	r0, r8
 8014b22:	f7f9 f899 	bl	800dc58 <rcutils_allocator_is_valid>
 8014b26:	2d00      	cmp	r5, #0
 8014b28:	bf18      	it	ne
 8014b2a:	2c00      	cmpne	r4, #0
 8014b2c:	f080 0001 	eor.w	r0, r0, #1
 8014b30:	bf0c      	ite	eq
 8014b32:	f04f 0c01 	moveq.w	ip, #1
 8014b36:	f04f 0c00 	movne.w	ip, #0
 8014b3a:	2e00      	cmp	r6, #0
 8014b3c:	bf08      	it	eq
 8014b3e:	f04c 0c01 	orreq.w	ip, ip, #1
 8014b42:	ea4c 0c00 	orr.w	ip, ip, r0
 8014b46:	f01c 09ff 	ands.w	r9, ip, #255	; 0xff
 8014b4a:	f040 80dc 	bne.w	8014d06 <rcl_node_init+0x206>
 8014b4e:	f8d4 a004 	ldr.w	sl, [r4, #4]
 8014b52:	f1ba 0f00 	cmp.w	sl, #0
 8014b56:	f040 80fc 	bne.w	8014d52 <rcl_node_init+0x252>
 8014b5a:	2f00      	cmp	r7, #0
 8014b5c:	f000 80d3 	beq.w	8014d06 <rcl_node_init+0x206>
 8014b60:	4638      	mov	r0, r7
 8014b62:	f7ff fd19 	bl	8014598 <rcl_context_is_valid>
 8014b66:	4683      	mov	fp, r0
 8014b68:	2800      	cmp	r0, #0
 8014b6a:	f000 80d2 	beq.w	8014d12 <rcl_node_init+0x212>
 8014b6e:	4652      	mov	r2, sl
 8014b70:	4630      	mov	r0, r6
 8014b72:	a924      	add	r1, sp, #144	; 0x90
 8014b74:	f8cd a090 	str.w	sl, [sp, #144]	; 0x90
 8014b78:	f003 fb6c 	bl	8018254 <rmw_validate_node_name>
 8014b7c:	4682      	mov	sl, r0
 8014b7e:	2800      	cmp	r0, #0
 8014b80:	f040 80c3 	bne.w	8014d0a <rcl_node_init+0x20a>
 8014b84:	9824      	ldr	r0, [sp, #144]	; 0x90
 8014b86:	2800      	cmp	r0, #0
 8014b88:	f040 80f1 	bne.w	8014d6e <rcl_node_init+0x26e>
 8014b8c:	4628      	mov	r0, r5
 8014b8e:	f7eb fbb7 	bl	8000300 <strlen>
 8014b92:	2800      	cmp	r0, #0
 8014b94:	f040 80c0 	bne.w	8014d18 <rcl_node_init+0x218>
 8014b98:	4d79      	ldr	r5, [pc, #484]	; (8014d80 <rcl_node_init+0x280>)
 8014b9a:	a924      	add	r1, sp, #144	; 0x90
 8014b9c:	2200      	movs	r2, #0
 8014b9e:	4628      	mov	r0, r5
 8014ba0:	f003 fb3a 	bl	8018218 <rmw_validate_namespace>
 8014ba4:	4682      	mov	sl, r0
 8014ba6:	2800      	cmp	r0, #0
 8014ba8:	f040 80af 	bne.w	8014d0a <rcl_node_init+0x20a>
 8014bac:	9824      	ldr	r0, [sp, #144]	; 0x90
 8014bae:	2800      	cmp	r0, #0
 8014bb0:	f040 80d5 	bne.w	8014d5e <rcl_node_init+0x25e>
 8014bb4:	f8d8 3000 	ldr.w	r3, [r8]
 8014bb8:	2080      	movs	r0, #128	; 0x80
 8014bba:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8014bbe:	4798      	blx	r3
 8014bc0:	4682      	mov	sl, r0
 8014bc2:	6060      	str	r0, [r4, #4]
 8014bc4:	2800      	cmp	r0, #0
 8014bc6:	f000 80cf 	beq.w	8014d68 <rcl_node_init+0x268>
 8014bca:	2200      	movs	r2, #0
 8014bcc:	2300      	movs	r3, #0
 8014bce:	a808      	add	r0, sp, #32
 8014bd0:	e9ca 231c 	strd	r2, r3, [sl, #112]	; 0x70
 8014bd4:	e9ca 231e 	strd	r2, r3, [sl, #120]	; 0x78
 8014bd8:	f000 f922 	bl	8014e20 <rcl_node_get_default_options>
 8014bdc:	a908      	add	r1, sp, #32
 8014bde:	4650      	mov	r0, sl
 8014be0:	2270      	movs	r2, #112	; 0x70
 8014be2:	f007 fee0 	bl	801c9a6 <memcpy>
 8014be6:	6861      	ldr	r1, [r4, #4]
 8014be8:	4640      	mov	r0, r8
 8014bea:	6027      	str	r7, [r4, #0]
 8014bec:	f000 f926 	bl	8014e3c <rcl_node_options_copy>
 8014bf0:	2800      	cmp	r0, #0
 8014bf2:	d158      	bne.n	8014ca6 <rcl_node_init+0x1a6>
 8014bf4:	4628      	mov	r0, r5
 8014bf6:	f7eb fb83 	bl	8000300 <strlen>
 8014bfa:	4428      	add	r0, r5
 8014bfc:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8014c00:	e9cd 5603 	strd	r5, r6, [sp, #12]
 8014c04:	2b2f      	cmp	r3, #47	; 0x2f
 8014c06:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8014c0a:	9300      	str	r3, [sp, #0]
 8014c0c:	bf0c      	ite	eq
 8014c0e:	4b5d      	ldreq	r3, [pc, #372]	; (8014d84 <rcl_node_init+0x284>)
 8014c10:	4b5d      	ldrne	r3, [pc, #372]	; (8014d88 <rcl_node_init+0x288>)
 8014c12:	9302      	str	r3, [sp, #8]
 8014c14:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014c18:	9301      	str	r3, [sp, #4]
 8014c1a:	f8d4 a004 	ldr.w	sl, [r4, #4]
 8014c1e:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8014c22:	f002 fec5 	bl	80179b0 <rcutils_format_string_limit>
 8014c26:	6823      	ldr	r3, [r4, #0]
 8014c28:	f8ca 007c 	str.w	r0, [sl, #124]	; 0x7c
 8014c2c:	4631      	mov	r1, r6
 8014c2e:	6818      	ldr	r0, [r3, #0]
 8014c30:	462a      	mov	r2, r5
 8014c32:	6866      	ldr	r6, [r4, #4]
 8014c34:	3028      	adds	r0, #40	; 0x28
 8014c36:	f003 ff23 	bl	8018a80 <rmw_create_node>
 8014c3a:	6863      	ldr	r3, [r4, #4]
 8014c3c:	6730      	str	r0, [r6, #112]	; 0x70
 8014c3e:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8014c40:	2800      	cmp	r0, #0
 8014c42:	d032      	beq.n	8014caa <rcl_node_init+0x1aa>
 8014c44:	f003 ffac 	bl	8018ba0 <rmw_node_get_graph_guard_condition>
 8014c48:	4682      	mov	sl, r0
 8014c4a:	b360      	cbz	r0, 8014ca6 <rcl_node_init+0x1a6>
 8014c4c:	f8d8 3000 	ldr.w	r3, [r8]
 8014c50:	2008      	movs	r0, #8
 8014c52:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8014c56:	6866      	ldr	r6, [r4, #4]
 8014c58:	4798      	blx	r3
 8014c5a:	6863      	ldr	r3, [r4, #4]
 8014c5c:	6770      	str	r0, [r6, #116]	; 0x74
 8014c5e:	f8d3 b074 	ldr.w	fp, [r3, #116]	; 0x74
 8014c62:	f1bb 0f00 	cmp.w	fp, #0
 8014c66:	d020      	beq.n	8014caa <rcl_node_init+0x1aa>
 8014c68:	a806      	add	r0, sp, #24
 8014c6a:	ae25      	add	r6, sp, #148	; 0x94
 8014c6c:	f006 fcc4 	bl	801b5f8 <rcl_get_zero_initialized_guard_condition>
 8014c70:	a806      	add	r0, sp, #24
 8014c72:	6863      	ldr	r3, [r4, #4]
 8014c74:	46c4      	mov	ip, r8
 8014c76:	c803      	ldmia	r0, {r0, r1}
 8014c78:	f8d3 e074 	ldr.w	lr, [r3, #116]	; 0x74
 8014c7c:	e88b 0003 	stmia.w	fp, {r0, r1}
 8014c80:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014c84:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8014c86:	f8dc 3000 	ldr.w	r3, [ip]
 8014c8a:	6033      	str	r3, [r6, #0]
 8014c8c:	ab2a      	add	r3, sp, #168	; 0xa8
 8014c8e:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8014c92:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8014c96:	4651      	mov	r1, sl
 8014c98:	463a      	mov	r2, r7
 8014c9a:	4670      	mov	r0, lr
 8014c9c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8014c9e:	f006 fd03 	bl	801b6a8 <rcl_guard_condition_init_from_rmw>
 8014ca2:	4682      	mov	sl, r0
 8014ca4:	b328      	cbz	r0, 8014cf2 <rcl_node_init+0x1f2>
 8014ca6:	6863      	ldr	r3, [r4, #4]
 8014ca8:	b1f3      	cbz	r3, 8014ce8 <rcl_node_init+0x1e8>
 8014caa:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8014cac:	b128      	cbz	r0, 8014cba <rcl_node_init+0x1ba>
 8014cae:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014cb2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8014cb6:	4798      	blx	r3
 8014cb8:	6863      	ldr	r3, [r4, #4]
 8014cba:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8014cbc:	b110      	cbz	r0, 8014cc4 <rcl_node_init+0x1c4>
 8014cbe:	f003 fef1 	bl	8018aa4 <rmw_destroy_node>
 8014cc2:	6863      	ldr	r3, [r4, #4]
 8014cc4:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8014cc6:	b148      	cbz	r0, 8014cdc <rcl_node_init+0x1dc>
 8014cc8:	f006 fd4a 	bl	801b760 <rcl_guard_condition_fini>
 8014ccc:	6863      	ldr	r3, [r4, #4]
 8014cce:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8014cd2:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8014cd4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014cd8:	4798      	blx	r3
 8014cda:	6863      	ldr	r3, [r4, #4]
 8014cdc:	4618      	mov	r0, r3
 8014cde:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8014ce2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014ce6:	4798      	blx	r3
 8014ce8:	2300      	movs	r3, #0
 8014cea:	f04f 0a01 	mov.w	sl, #1
 8014cee:	e9c4 3300 	strd	r3, r3, [r4]
 8014cf2:	f1b9 0f00 	cmp.w	r9, #0
 8014cf6:	d008      	beq.n	8014d0a <rcl_node_init+0x20a>
 8014cf8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014cfc:	4628      	mov	r0, r5
 8014cfe:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8014d02:	4798      	blx	r3
 8014d04:	e001      	b.n	8014d0a <rcl_node_init+0x20a>
 8014d06:	f04f 0a0b 	mov.w	sl, #11
 8014d0a:	4650      	mov	r0, sl
 8014d0c:	b02b      	add	sp, #172	; 0xac
 8014d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d12:	f04f 0a65 	mov.w	sl, #101	; 0x65
 8014d16:	e7f8      	b.n	8014d0a <rcl_node_init+0x20a>
 8014d18:	782b      	ldrb	r3, [r5, #0]
 8014d1a:	2b2f      	cmp	r3, #47	; 0x2f
 8014d1c:	f43f af3d 	beq.w	8014b9a <rcl_node_init+0x9a>
 8014d20:	9503      	str	r5, [sp, #12]
 8014d22:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8014d26:	9300      	str	r3, [sp, #0]
 8014d28:	4b18      	ldr	r3, [pc, #96]	; (8014d8c <rcl_node_init+0x28c>)
 8014d2a:	9302      	str	r3, [sp, #8]
 8014d2c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014d30:	9301      	str	r3, [sp, #4]
 8014d32:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8014d36:	f002 fe3b 	bl	80179b0 <rcutils_format_string_limit>
 8014d3a:	4605      	mov	r5, r0
 8014d3c:	b1e0      	cbz	r0, 8014d78 <rcl_node_init+0x278>
 8014d3e:	2200      	movs	r2, #0
 8014d40:	a924      	add	r1, sp, #144	; 0x90
 8014d42:	9224      	str	r2, [sp, #144]	; 0x90
 8014d44:	f003 fa68 	bl	8018218 <rmw_validate_namespace>
 8014d48:	4682      	mov	sl, r0
 8014d4a:	2800      	cmp	r0, #0
 8014d4c:	d1d4      	bne.n	8014cf8 <rcl_node_init+0x1f8>
 8014d4e:	46d9      	mov	r9, fp
 8014d50:	e72c      	b.n	8014bac <rcl_node_init+0xac>
 8014d52:	f04f 0a64 	mov.w	sl, #100	; 0x64
 8014d56:	4650      	mov	r0, sl
 8014d58:	b02b      	add	sp, #172	; 0xac
 8014d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d5e:	f04f 0aca 	mov.w	sl, #202	; 0xca
 8014d62:	f003 fa6b 	bl	801823c <rmw_namespace_validation_result_string>
 8014d66:	e7c4      	b.n	8014cf2 <rcl_node_init+0x1f2>
 8014d68:	f04f 0a0a 	mov.w	sl, #10
 8014d6c:	e7c1      	b.n	8014cf2 <rcl_node_init+0x1f2>
 8014d6e:	f04f 0ac9 	mov.w	sl, #201	; 0xc9
 8014d72:	f003 fac3 	bl	80182fc <rmw_node_name_validation_result_string>
 8014d76:	e7c8      	b.n	8014d0a <rcl_node_init+0x20a>
 8014d78:	f04f 0a0a 	mov.w	sl, #10
 8014d7c:	e7c5      	b.n	8014d0a <rcl_node_init+0x20a>
 8014d7e:	bf00      	nop
 8014d80:	0801ea50 	.word	0x0801ea50
 8014d84:	0801e5c8 	.word	0x0801e5c8
 8014d88:	0801ea58 	.word	0x0801ea58
 8014d8c:	0801ea54 	.word	0x0801ea54

08014d90 <rcl_node_is_valid>:
 8014d90:	b130      	cbz	r0, 8014da0 <rcl_node_is_valid+0x10>
 8014d92:	6843      	ldr	r3, [r0, #4]
 8014d94:	b123      	cbz	r3, 8014da0 <rcl_node_is_valid+0x10>
 8014d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014d98:	b113      	cbz	r3, 8014da0 <rcl_node_is_valid+0x10>
 8014d9a:	6800      	ldr	r0, [r0, #0]
 8014d9c:	f7ff bbfc 	b.w	8014598 <rcl_context_is_valid>
 8014da0:	2000      	movs	r0, #0
 8014da2:	4770      	bx	lr

08014da4 <rcl_node_get_name>:
 8014da4:	b120      	cbz	r0, 8014db0 <rcl_node_get_name+0xc>
 8014da6:	6840      	ldr	r0, [r0, #4]
 8014da8:	b110      	cbz	r0, 8014db0 <rcl_node_get_name+0xc>
 8014daa:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8014dac:	b100      	cbz	r0, 8014db0 <rcl_node_get_name+0xc>
 8014dae:	6880      	ldr	r0, [r0, #8]
 8014db0:	4770      	bx	lr
 8014db2:	bf00      	nop

08014db4 <rcl_node_get_namespace>:
 8014db4:	b120      	cbz	r0, 8014dc0 <rcl_node_get_namespace+0xc>
 8014db6:	6840      	ldr	r0, [r0, #4]
 8014db8:	b110      	cbz	r0, 8014dc0 <rcl_node_get_namespace+0xc>
 8014dba:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8014dbc:	b100      	cbz	r0, 8014dc0 <rcl_node_get_namespace+0xc>
 8014dbe:	68c0      	ldr	r0, [r0, #12]
 8014dc0:	4770      	bx	lr
 8014dc2:	bf00      	nop

08014dc4 <rcl_node_get_options>:
 8014dc4:	b128      	cbz	r0, 8014dd2 <rcl_node_get_options+0xe>
 8014dc6:	6840      	ldr	r0, [r0, #4]
 8014dc8:	b118      	cbz	r0, 8014dd2 <rcl_node_get_options+0xe>
 8014dca:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8014dcc:	2b00      	cmp	r3, #0
 8014dce:	bf08      	it	eq
 8014dd0:	2000      	moveq	r0, #0
 8014dd2:	4770      	bx	lr

08014dd4 <rcl_node_get_rmw_handle>:
 8014dd4:	b110      	cbz	r0, 8014ddc <rcl_node_get_rmw_handle+0x8>
 8014dd6:	6840      	ldr	r0, [r0, #4]
 8014dd8:	b100      	cbz	r0, 8014ddc <rcl_node_get_rmw_handle+0x8>
 8014dda:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8014ddc:	4770      	bx	lr
 8014dde:	bf00      	nop

08014de0 <rcl_get_disable_loaned_message>:
 8014de0:	b510      	push	{r4, lr}
 8014de2:	2300      	movs	r3, #0
 8014de4:	b082      	sub	sp, #8
 8014de6:	9301      	str	r3, [sp, #4]
 8014de8:	b1a0      	cbz	r0, 8014e14 <rcl_get_disable_loaned_message+0x34>
 8014dea:	4604      	mov	r4, r0
 8014dec:	a901      	add	r1, sp, #4
 8014dee:	480b      	ldr	r0, [pc, #44]	; (8014e1c <rcl_get_disable_loaned_message+0x3c>)
 8014df0:	f002 fdb6 	bl	8017960 <rcutils_get_env>
 8014df4:	b110      	cbz	r0, 8014dfc <rcl_get_disable_loaned_message+0x1c>
 8014df6:	2001      	movs	r0, #1
 8014df8:	b002      	add	sp, #8
 8014dfa:	bd10      	pop	{r4, pc}
 8014dfc:	9a01      	ldr	r2, [sp, #4]
 8014dfe:	2000      	movs	r0, #0
 8014e00:	7813      	ldrb	r3, [r2, #0]
 8014e02:	3b31      	subs	r3, #49	; 0x31
 8014e04:	bf08      	it	eq
 8014e06:	7853      	ldrbeq	r3, [r2, #1]
 8014e08:	fab3 f383 	clz	r3, r3
 8014e0c:	095b      	lsrs	r3, r3, #5
 8014e0e:	7023      	strb	r3, [r4, #0]
 8014e10:	b002      	add	sp, #8
 8014e12:	bd10      	pop	{r4, pc}
 8014e14:	200b      	movs	r0, #11
 8014e16:	b002      	add	sp, #8
 8014e18:	bd10      	pop	{r4, pc}
 8014e1a:	bf00      	nop
 8014e1c:	0801ea60 	.word	0x0801ea60

08014e20 <rcl_node_get_default_options>:
 8014e20:	b510      	push	{r4, lr}
 8014e22:	4604      	mov	r4, r0
 8014e24:	2270      	movs	r2, #112	; 0x70
 8014e26:	2100      	movs	r1, #0
 8014e28:	f007 fc8c 	bl	801c744 <memset>
 8014e2c:	4620      	mov	r0, r4
 8014e2e:	f7f8 ff05 	bl	800dc3c <rcutils_get_default_allocator>
 8014e32:	2301      	movs	r3, #1
 8014e34:	4620      	mov	r0, r4
 8014e36:	7523      	strb	r3, [r4, #20]
 8014e38:	bd10      	pop	{r4, pc}
 8014e3a:	bf00      	nop

08014e3c <rcl_node_options_copy>:
 8014e3c:	2800      	cmp	r0, #0
 8014e3e:	bf18      	it	ne
 8014e40:	4288      	cmpne	r0, r1
 8014e42:	d01b      	beq.n	8014e7c <rcl_node_options_copy+0x40>
 8014e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e46:	fab1 f681 	clz	r6, r1
 8014e4a:	460c      	mov	r4, r1
 8014e4c:	0976      	lsrs	r6, r6, #5
 8014e4e:	b199      	cbz	r1, 8014e78 <rcl_node_options_copy+0x3c>
 8014e50:	4605      	mov	r5, r0
 8014e52:	8a87      	ldrh	r7, [r0, #20]
 8014e54:	4684      	mov	ip, r0
 8014e56:	468e      	mov	lr, r1
 8014e58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014e5a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014e5e:	682b      	ldr	r3, [r5, #0]
 8014e60:	2250      	movs	r2, #80	; 0x50
 8014e62:	f10c 0118 	add.w	r1, ip, #24
 8014e66:	f104 0018 	add.w	r0, r4, #24
 8014e6a:	f8ce 3000 	str.w	r3, [lr]
 8014e6e:	82a7      	strh	r7, [r4, #20]
 8014e70:	f007 fd99 	bl	801c9a6 <memcpy>
 8014e74:	4630      	mov	r0, r6
 8014e76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014e78:	200b      	movs	r0, #11
 8014e7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014e7c:	200b      	movs	r0, #11
 8014e7e:	4770      	bx	lr

08014e80 <rcl_node_resolve_name>:
 8014e80:	b082      	sub	sp, #8
 8014e82:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e86:	b091      	sub	sp, #68	; 0x44
 8014e88:	ac1a      	add	r4, sp, #104	; 0x68
 8014e8a:	f89d 807c 	ldrb.w	r8, [sp, #124]	; 0x7c
 8014e8e:	e884 000c 	stmia.w	r4, {r2, r3}
 8014e92:	2800      	cmp	r0, #0
 8014e94:	d03d      	beq.n	8014f12 <rcl_node_resolve_name+0x92>
 8014e96:	460c      	mov	r4, r1
 8014e98:	4605      	mov	r5, r0
 8014e9a:	f7ff ff93 	bl	8014dc4 <rcl_node_get_options>
 8014e9e:	2800      	cmp	r0, #0
 8014ea0:	d03a      	beq.n	8014f18 <rcl_node_resolve_name+0x98>
 8014ea2:	4628      	mov	r0, r5
 8014ea4:	f7ff ff7e 	bl	8014da4 <rcl_node_get_name>
 8014ea8:	4606      	mov	r6, r0
 8014eaa:	4628      	mov	r0, r5
 8014eac:	ad0b      	add	r5, sp, #44	; 0x2c
 8014eae:	f7ff ff81 	bl	8014db4 <rcl_node_get_namespace>
 8014eb2:	f10d 0e68 	add.w	lr, sp, #104	; 0x68
 8014eb6:	4607      	mov	r7, r0
 8014eb8:	46ac      	mov	ip, r5
 8014eba:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014ebe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014ec2:	f8de 3000 	ldr.w	r3, [lr]
 8014ec6:	f8cc 3000 	str.w	r3, [ip]
 8014eca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014ecc:	b30b      	cbz	r3, 8014f12 <rcl_node_resolve_name+0x92>
 8014ece:	4689      	mov	r9, r1
 8014ed0:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8014ed4:	f002 feee 	bl	8017cb4 <rcutils_get_zero_initialized_string_map>
 8014ed8:	ab10      	add	r3, sp, #64	; 0x40
 8014eda:	9008      	str	r0, [sp, #32]
 8014edc:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8014ee0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014ee4:	2100      	movs	r1, #0
 8014ee6:	a808      	add	r0, sp, #32
 8014ee8:	e895 000c 	ldmia.w	r5, {r2, r3}
 8014eec:	f002 ff34 	bl	8017d58 <rcutils_string_map_init>
 8014ef0:	4683      	mov	fp, r0
 8014ef2:	b1a0      	cbz	r0, 8014f1e <rcl_node_resolve_name+0x9e>
 8014ef4:	f7f8 febe 	bl	800dc74 <rcutils_get_error_string>
 8014ef8:	f7f8 fed2 	bl	800dca0 <rcutils_reset_error>
 8014efc:	f1bb 0f0a 	cmp.w	fp, #10
 8014f00:	bf18      	it	ne
 8014f02:	f04f 0b01 	movne.w	fp, #1
 8014f06:	4658      	mov	r0, fp
 8014f08:	b011      	add	sp, #68	; 0x44
 8014f0a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f0e:	b002      	add	sp, #8
 8014f10:	4770      	bx	lr
 8014f12:	f04f 0b0b 	mov.w	fp, #11
 8014f16:	e7f6      	b.n	8014f06 <rcl_node_resolve_name+0x86>
 8014f18:	f04f 0b01 	mov.w	fp, #1
 8014f1c:	e7f3      	b.n	8014f06 <rcl_node_resolve_name+0x86>
 8014f1e:	9009      	str	r0, [sp, #36]	; 0x24
 8014f20:	9007      	str	r0, [sp, #28]
 8014f22:	a808      	add	r0, sp, #32
 8014f24:	f006 fb62 	bl	801b5ec <rcl_get_default_topic_name_substitutions>
 8014f28:	4683      	mov	fp, r0
 8014f2a:	b180      	cbz	r0, 8014f4e <rcl_node_resolve_name+0xce>
 8014f2c:	280a      	cmp	r0, #10
 8014f2e:	a808      	add	r0, sp, #32
 8014f30:	bf18      	it	ne
 8014f32:	f04f 0b01 	movne.w	fp, #1
 8014f36:	f002 ff4d 	bl	8017dd4 <rcutils_string_map_fini>
 8014f3a:	4604      	mov	r4, r0
 8014f3c:	2800      	cmp	r0, #0
 8014f3e:	d15b      	bne.n	8014ff8 <rcl_node_resolve_name+0x178>
 8014f40:	4651      	mov	r1, sl
 8014f42:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014f44:	47c8      	blx	r9
 8014f46:	4651      	mov	r1, sl
 8014f48:	4620      	mov	r0, r4
 8014f4a:	47c8      	blx	r9
 8014f4c:	e7db      	b.n	8014f06 <rcl_node_resolve_name+0x86>
 8014f4e:	ab09      	add	r3, sp, #36	; 0x24
 8014f50:	46ec      	mov	ip, sp
 8014f52:	9305      	str	r3, [sp, #20]
 8014f54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014f56:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014f5a:	682b      	ldr	r3, [r5, #0]
 8014f5c:	463a      	mov	r2, r7
 8014f5e:	4631      	mov	r1, r6
 8014f60:	4620      	mov	r0, r4
 8014f62:	f8cc 3000 	str.w	r3, [ip]
 8014f66:	ab08      	add	r3, sp, #32
 8014f68:	f006 f9e0 	bl	801b32c <rcl_expand_topic_name>
 8014f6c:	4683      	mov	fp, r0
 8014f6e:	b9d8      	cbnz	r0, 8014fa8 <rcl_node_resolve_name+0x128>
 8014f70:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8014f72:	4602      	mov	r2, r0
 8014f74:	9009      	str	r0, [sp, #36]	; 0x24
 8014f76:	a90a      	add	r1, sp, #40	; 0x28
 8014f78:	4620      	mov	r0, r4
 8014f7a:	f003 f87d 	bl	8018078 <rmw_validate_full_topic_name>
 8014f7e:	bb50      	cbnz	r0, 8014fd6 <rcl_node_resolve_name+0x156>
 8014f80:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8014f82:	2d00      	cmp	r5, #0
 8014f84:	d140      	bne.n	8015008 <rcl_node_resolve_name+0x188>
 8014f86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014f88:	a808      	add	r0, sp, #32
 8014f8a:	601c      	str	r4, [r3, #0]
 8014f8c:	f002 ff22 	bl	8017dd4 <rcutils_string_map_fini>
 8014f90:	4683      	mov	fp, r0
 8014f92:	2800      	cmp	r0, #0
 8014f94:	d043      	beq.n	801501e <rcl_node_resolve_name+0x19e>
 8014f96:	f7f8 fe6d 	bl	800dc74 <rcutils_get_error_string>
 8014f9a:	46a8      	mov	r8, r5
 8014f9c:	f04f 0b01 	mov.w	fp, #1
 8014fa0:	462c      	mov	r4, r5
 8014fa2:	f7f8 fe7d 	bl	800dca0 <rcutils_reset_error>
 8014fa6:	e00a      	b.n	8014fbe <rcl_node_resolve_name+0x13e>
 8014fa8:	2867      	cmp	r0, #103	; 0x67
 8014faa:	bf14      	ite	ne
 8014fac:	f04f 0800 	movne.w	r8, #0
 8014fb0:	f008 0801 	andeq.w	r8, r8, #1
 8014fb4:	9c07      	ldr	r4, [sp, #28]
 8014fb6:	a808      	add	r0, sp, #32
 8014fb8:	f002 ff0c 	bl	8017dd4 <rcutils_string_map_fini>
 8014fbc:	bb50      	cbnz	r0, 8015014 <rcl_node_resolve_name+0x194>
 8014fbe:	4651      	mov	r1, sl
 8014fc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014fc2:	47c8      	blx	r9
 8014fc4:	4651      	mov	r1, sl
 8014fc6:	4620      	mov	r0, r4
 8014fc8:	47c8      	blx	r9
 8014fca:	f1b8 0f00 	cmp.w	r8, #0
 8014fce:	bf18      	it	ne
 8014fd0:	f04f 0b68 	movne.w	fp, #104	; 0x68
 8014fd4:	e797      	b.n	8014f06 <rcl_node_resolve_name+0x86>
 8014fd6:	f7f8 fe4d 	bl	800dc74 <rcutils_get_error_string>
 8014fda:	f7f8 fe61 	bl	800dca0 <rcutils_reset_error>
 8014fde:	a808      	add	r0, sp, #32
 8014fe0:	f002 fef8 	bl	8017dd4 <rcutils_string_map_fini>
 8014fe4:	b998      	cbnz	r0, 801500e <rcl_node_resolve_name+0x18e>
 8014fe6:	4651      	mov	r1, sl
 8014fe8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014fea:	47c8      	blx	r9
 8014fec:	4651      	mov	r1, sl
 8014fee:	4620      	mov	r0, r4
 8014ff0:	f04f 0b01 	mov.w	fp, #1
 8014ff4:	47c8      	blx	r9
 8014ff6:	e786      	b.n	8014f06 <rcl_node_resolve_name+0x86>
 8014ff8:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8014ffc:	f7f8 fe3a 	bl	800dc74 <rcutils_get_error_string>
 8015000:	f7f8 fe4e 	bl	800dca0 <rcutils_reset_error>
 8015004:	4644      	mov	r4, r8
 8015006:	e7da      	b.n	8014fbe <rcl_node_resolve_name+0x13e>
 8015008:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801500c:	e7d3      	b.n	8014fb6 <rcl_node_resolve_name+0x136>
 801500e:	46d8      	mov	r8, fp
 8015010:	f04f 0b01 	mov.w	fp, #1
 8015014:	f7f8 fe2e 	bl	800dc74 <rcutils_get_error_string>
 8015018:	f7f8 fe42 	bl	800dca0 <rcutils_reset_error>
 801501c:	e7cf      	b.n	8014fbe <rcl_node_resolve_name+0x13e>
 801501e:	4651      	mov	r1, sl
 8015020:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015022:	47c8      	blx	r9
 8015024:	4651      	mov	r1, sl
 8015026:	4658      	mov	r0, fp
 8015028:	47c8      	blx	r9
 801502a:	e76c      	b.n	8014f06 <rcl_node_resolve_name+0x86>

0801502c <exact_match_lookup>:
 801502c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801502e:	f102 0708 	add.w	r7, r2, #8
 8015032:	460b      	mov	r3, r1
 8015034:	b085      	sub	sp, #20
 8015036:	4614      	mov	r4, r2
 8015038:	4606      	mov	r6, r0
 801503a:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801503e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8015042:	4618      	mov	r0, r3
 8015044:	4919      	ldr	r1, [pc, #100]	; (80150ac <exact_match_lookup+0x80>)
 8015046:	e894 000c 	ldmia.w	r4, {r2, r3}
 801504a:	f002 fca3 	bl	8017994 <rcutils_join_path>
 801504e:	7833      	ldrb	r3, [r6, #0]
 8015050:	4605      	mov	r5, r0
 8015052:	2b2f      	cmp	r3, #47	; 0x2f
 8015054:	d023      	beq.n	801509e <exact_match_lookup+0x72>
 8015056:	f104 030c 	add.w	r3, r4, #12
 801505a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801505e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8015062:	1c70      	adds	r0, r6, #1
 8015064:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8015068:	f002 fc9a 	bl	80179a0 <rcutils_to_native_path>
 801506c:	4606      	mov	r6, r0
 801506e:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8015072:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8015076:	4631      	mov	r1, r6
 8015078:	4628      	mov	r0, r5
 801507a:	e894 000c 	ldmia.w	r4, {r2, r3}
 801507e:	f002 fc89 	bl	8017994 <rcutils_join_path>
 8015082:	4603      	mov	r3, r0
 8015084:	4630      	mov	r0, r6
 8015086:	6862      	ldr	r2, [r4, #4]
 8015088:	461e      	mov	r6, r3
 801508a:	6921      	ldr	r1, [r4, #16]
 801508c:	4790      	blx	r2
 801508e:	4628      	mov	r0, r5
 8015090:	4635      	mov	r5, r6
 8015092:	6863      	ldr	r3, [r4, #4]
 8015094:	6921      	ldr	r1, [r4, #16]
 8015096:	4798      	blx	r3
 8015098:	4628      	mov	r0, r5
 801509a:	b005      	add	sp, #20
 801509c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801509e:	7873      	ldrb	r3, [r6, #1]
 80150a0:	2b00      	cmp	r3, #0
 80150a2:	d1d8      	bne.n	8015056 <exact_match_lookup+0x2a>
 80150a4:	4628      	mov	r0, r5
 80150a6:	b005      	add	sp, #20
 80150a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80150aa:	bf00      	nop
 80150ac:	0801eac0 	.word	0x0801eac0

080150b0 <rcl_get_secure_root>:
 80150b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80150b4:	b085      	sub	sp, #20
 80150b6:	b168      	cbz	r0, 80150d4 <rcl_get_secure_root+0x24>
 80150b8:	4607      	mov	r7, r0
 80150ba:	4608      	mov	r0, r1
 80150bc:	460c      	mov	r4, r1
 80150be:	f7f8 fdcb 	bl	800dc58 <rcutils_allocator_is_valid>
 80150c2:	b138      	cbz	r0, 80150d4 <rcl_get_secure_root+0x24>
 80150c4:	2300      	movs	r3, #0
 80150c6:	482d      	ldr	r0, [pc, #180]	; (801517c <rcl_get_secure_root+0xcc>)
 80150c8:	a903      	add	r1, sp, #12
 80150ca:	9303      	str	r3, [sp, #12]
 80150cc:	f002 fc48 	bl	8017960 <rcutils_get_env>
 80150d0:	4605      	mov	r5, r0
 80150d2:	b120      	cbz	r0, 80150de <rcl_get_secure_root+0x2e>
 80150d4:	2500      	movs	r5, #0
 80150d6:	4628      	mov	r0, r5
 80150d8:	b005      	add	sp, #20
 80150da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80150de:	9b03      	ldr	r3, [sp, #12]
 80150e0:	781a      	ldrb	r2, [r3, #0]
 80150e2:	2a00      	cmp	r2, #0
 80150e4:	d0f6      	beq.n	80150d4 <rcl_get_secure_root+0x24>
 80150e6:	f104 090c 	add.w	r9, r4, #12
 80150ea:	e899 0003 	ldmia.w	r9, {r0, r1}
 80150ee:	e88d 0003 	stmia.w	sp, {r0, r1}
 80150f2:	4618      	mov	r0, r3
 80150f4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80150f8:	f002 fd94 	bl	8017c24 <rcutils_strdup>
 80150fc:	4680      	mov	r8, r0
 80150fe:	2800      	cmp	r0, #0
 8015100:	d0e8      	beq.n	80150d4 <rcl_get_secure_root+0x24>
 8015102:	a903      	add	r1, sp, #12
 8015104:	481e      	ldr	r0, [pc, #120]	; (8015180 <rcl_get_secure_root+0xd0>)
 8015106:	9503      	str	r5, [sp, #12]
 8015108:	f002 fc2a 	bl	8017960 <rcutils_get_env>
 801510c:	b160      	cbz	r0, 8015128 <rcl_get_secure_root+0x78>
 801510e:	2600      	movs	r6, #0
 8015110:	4630      	mov	r0, r6
 8015112:	6863      	ldr	r3, [r4, #4]
 8015114:	6921      	ldr	r1, [r4, #16]
 8015116:	4798      	blx	r3
 8015118:	4640      	mov	r0, r8
 801511a:	6863      	ldr	r3, [r4, #4]
 801511c:	6921      	ldr	r1, [r4, #16]
 801511e:	4798      	blx	r3
 8015120:	4628      	mov	r0, r5
 8015122:	b005      	add	sp, #20
 8015124:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015128:	9b03      	ldr	r3, [sp, #12]
 801512a:	781e      	ldrb	r6, [r3, #0]
 801512c:	b1f6      	cbz	r6, 801516c <rcl_get_secure_root+0xbc>
 801512e:	e899 0003 	ldmia.w	r9, {r0, r1}
 8015132:	e88d 0003 	stmia.w	sp, {r0, r1}
 8015136:	4618      	mov	r0, r3
 8015138:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801513c:	f002 fd72 	bl	8017c24 <rcutils_strdup>
 8015140:	4606      	mov	r6, r0
 8015142:	2800      	cmp	r0, #0
 8015144:	d0e3      	beq.n	801510e <rcl_get_secure_root+0x5e>
 8015146:	4622      	mov	r2, r4
 8015148:	4641      	mov	r1, r8
 801514a:	f7ff ff6f 	bl	801502c <exact_match_lookup>
 801514e:	4605      	mov	r5, r0
 8015150:	2d00      	cmp	r5, #0
 8015152:	d0dd      	beq.n	8015110 <rcl_get_secure_root+0x60>
 8015154:	4628      	mov	r0, r5
 8015156:	f002 fc1b 	bl	8017990 <rcutils_is_directory>
 801515a:	4603      	mov	r3, r0
 801515c:	2800      	cmp	r0, #0
 801515e:	d1d7      	bne.n	8015110 <rcl_get_secure_root+0x60>
 8015160:	4628      	mov	r0, r5
 8015162:	6921      	ldr	r1, [r4, #16]
 8015164:	461d      	mov	r5, r3
 8015166:	6863      	ldr	r3, [r4, #4]
 8015168:	4798      	blx	r3
 801516a:	e7d1      	b.n	8015110 <rcl_get_secure_root+0x60>
 801516c:	4622      	mov	r2, r4
 801516e:	4638      	mov	r0, r7
 8015170:	4641      	mov	r1, r8
 8015172:	f7ff ff5b 	bl	801502c <exact_match_lookup>
 8015176:	4605      	mov	r5, r0
 8015178:	e7ea      	b.n	8015150 <rcl_get_secure_root+0xa0>
 801517a:	bf00      	nop
 801517c:	0801eacc 	.word	0x0801eacc
 8015180:	0801eae4 	.word	0x0801eae4

08015184 <rcl_get_security_options_from_environment>:
 8015184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015188:	b082      	sub	sp, #8
 801518a:	2300      	movs	r3, #0
 801518c:	4606      	mov	r6, r0
 801518e:	460f      	mov	r7, r1
 8015190:	4821      	ldr	r0, [pc, #132]	; (8015218 <rcl_get_security_options_from_environment+0x94>)
 8015192:	a901      	add	r1, sp, #4
 8015194:	4690      	mov	r8, r2
 8015196:	9301      	str	r3, [sp, #4]
 8015198:	f002 fbe2 	bl	8017960 <rcutils_get_env>
 801519c:	b120      	cbz	r0, 80151a8 <rcl_get_security_options_from_environment+0x24>
 801519e:	2501      	movs	r5, #1
 80151a0:	4628      	mov	r0, r5
 80151a2:	b002      	add	sp, #8
 80151a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80151a8:	4604      	mov	r4, r0
 80151aa:	491c      	ldr	r1, [pc, #112]	; (801521c <rcl_get_security_options_from_environment+0x98>)
 80151ac:	9801      	ldr	r0, [sp, #4]
 80151ae:	f7eb f847 	bl	8000240 <strcmp>
 80151b2:	4605      	mov	r5, r0
 80151b4:	b9f0      	cbnz	r0, 80151f4 <rcl_get_security_options_from_environment+0x70>
 80151b6:	9001      	str	r0, [sp, #4]
 80151b8:	f1b8 0f00 	cmp.w	r8, #0
 80151bc:	d021      	beq.n	8015202 <rcl_get_security_options_from_environment+0x7e>
 80151be:	a901      	add	r1, sp, #4
 80151c0:	4817      	ldr	r0, [pc, #92]	; (8015220 <rcl_get_security_options_from_environment+0x9c>)
 80151c2:	f002 fbcd 	bl	8017960 <rcutils_get_env>
 80151c6:	2800      	cmp	r0, #0
 80151c8:	d1e9      	bne.n	801519e <rcl_get_security_options_from_environment+0x1a>
 80151ca:	4916      	ldr	r1, [pc, #88]	; (8015224 <rcl_get_security_options_from_environment+0xa0>)
 80151cc:	9801      	ldr	r0, [sp, #4]
 80151ce:	f7eb f837 	bl	8000240 <strcmp>
 80151d2:	4603      	mov	r3, r0
 80151d4:	4639      	mov	r1, r7
 80151d6:	4630      	mov	r0, r6
 80151d8:	fab3 f383 	clz	r3, r3
 80151dc:	095b      	lsrs	r3, r3, #5
 80151de:	f888 3000 	strb.w	r3, [r8]
 80151e2:	f7ff ff65 	bl	80150b0 <rcl_get_secure_root>
 80151e6:	b170      	cbz	r0, 8015206 <rcl_get_security_options_from_environment+0x82>
 80151e8:	f8c8 0004 	str.w	r0, [r8, #4]
 80151ec:	4628      	mov	r0, r5
 80151ee:	b002      	add	sp, #8
 80151f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80151f4:	4625      	mov	r5, r4
 80151f6:	f888 4000 	strb.w	r4, [r8]
 80151fa:	4628      	mov	r0, r5
 80151fc:	b002      	add	sp, #8
 80151fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015202:	250b      	movs	r5, #11
 8015204:	e7cc      	b.n	80151a0 <rcl_get_security_options_from_environment+0x1c>
 8015206:	f898 5000 	ldrb.w	r5, [r8]
 801520a:	f1a5 0501 	sub.w	r5, r5, #1
 801520e:	fab5 f585 	clz	r5, r5
 8015212:	096d      	lsrs	r5, r5, #5
 8015214:	e7c4      	b.n	80151a0 <rcl_get_security_options_from_environment+0x1c>
 8015216:	bf00      	nop
 8015218:	0801ea84 	.word	0x0801ea84
 801521c:	0801ea98 	.word	0x0801ea98
 8015220:	0801eaa0 	.word	0x0801eaa0
 8015224:	0801eab8 	.word	0x0801eab8

08015228 <rcl_get_zero_initialized_service>:
 8015228:	4b01      	ldr	r3, [pc, #4]	; (8015230 <rcl_get_zero_initialized_service+0x8>)
 801522a:	6818      	ldr	r0, [r3, #0]
 801522c:	4770      	bx	lr
 801522e:	bf00      	nop
 8015230:	0801eb04 	.word	0x0801eb04

08015234 <rcl_service_init>:
 8015234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015238:	b086      	sub	sp, #24
 801523a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801523c:	2d00      	cmp	r5, #0
 801523e:	d04d      	beq.n	80152dc <rcl_service_init+0xa8>
 8015240:	f105 0950 	add.w	r9, r5, #80	; 0x50
 8015244:	4604      	mov	r4, r0
 8015246:	460e      	mov	r6, r1
 8015248:	4690      	mov	r8, r2
 801524a:	4648      	mov	r0, r9
 801524c:	461f      	mov	r7, r3
 801524e:	f7f8 fd03 	bl	800dc58 <rcutils_allocator_is_valid>
 8015252:	2c00      	cmp	r4, #0
 8015254:	d042      	beq.n	80152dc <rcl_service_init+0xa8>
 8015256:	f080 0001 	eor.w	r0, r0, #1
 801525a:	b2c0      	uxtb	r0, r0
 801525c:	2800      	cmp	r0, #0
 801525e:	d13d      	bne.n	80152dc <rcl_service_init+0xa8>
 8015260:	4630      	mov	r0, r6
 8015262:	f7ff fd95 	bl	8014d90 <rcl_node_is_valid>
 8015266:	2800      	cmp	r0, #0
 8015268:	d042      	beq.n	80152f0 <rcl_service_init+0xbc>
 801526a:	2f00      	cmp	r7, #0
 801526c:	d036      	beq.n	80152dc <rcl_service_init+0xa8>
 801526e:	f1b8 0f00 	cmp.w	r8, #0
 8015272:	d033      	beq.n	80152dc <rcl_service_init+0xa8>
 8015274:	f8d4 a000 	ldr.w	sl, [r4]
 8015278:	f1ba 0f00 	cmp.w	sl, #0
 801527c:	d133      	bne.n	80152e6 <rcl_service_init+0xb2>
 801527e:	f44f 718c 	mov.w	r1, #280	; 0x118
 8015282:	2001      	movs	r0, #1
 8015284:	e9d5 3217 	ldrd	r3, r2, [r5, #92]	; 0x5c
 8015288:	4798      	blx	r3
 801528a:	6020      	str	r0, [r4, #0]
 801528c:	2800      	cmp	r0, #0
 801528e:	d075      	beq.n	801537c <rcl_service_init+0x148>
 8015290:	f500 7088 	add.w	r0, r0, #272	; 0x110
 8015294:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8015298:	2201      	movs	r2, #1
 801529a:	f8cd a010 	str.w	sl, [sp, #16]
 801529e:	9005      	str	r0, [sp, #20]
 80152a0:	9203      	str	r2, [sp, #12]
 80152a2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80152a6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80152aa:	4639      	mov	r1, r7
 80152ac:	4630      	mov	r0, r6
 80152ae:	e899 000c 	ldmia.w	r9, {r2, r3}
 80152b2:	f7ff fde5 	bl	8014e80 <rcl_node_resolve_name>
 80152b6:	4607      	mov	r7, r0
 80152b8:	b1f8      	cbz	r0, 80152fa <rcl_service_init+0xc6>
 80152ba:	f1a0 0368 	sub.w	r3, r0, #104	; 0x68
 80152be:	6820      	ldr	r0, [r4, #0]
 80152c0:	2b01      	cmp	r3, #1
 80152c2:	d943      	bls.n	801534c <rcl_service_init+0x118>
 80152c4:	2f0a      	cmp	r7, #10
 80152c6:	d000      	beq.n	80152ca <rcl_service_init+0x96>
 80152c8:	2701      	movs	r7, #1
 80152ca:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 80152cc:	6e29      	ldr	r1, [r5, #96]	; 0x60
 80152ce:	4798      	blx	r3
 80152d0:	2300      	movs	r3, #0
 80152d2:	4638      	mov	r0, r7
 80152d4:	6023      	str	r3, [r4, #0]
 80152d6:	b006      	add	sp, #24
 80152d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80152dc:	270b      	movs	r7, #11
 80152de:	4638      	mov	r0, r7
 80152e0:	b006      	add	sp, #24
 80152e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80152e6:	2764      	movs	r7, #100	; 0x64
 80152e8:	4638      	mov	r0, r7
 80152ea:	b006      	add	sp, #24
 80152ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80152f0:	27c8      	movs	r7, #200	; 0xc8
 80152f2:	4638      	mov	r0, r7
 80152f4:	b006      	add	sp, #24
 80152f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80152fa:	4630      	mov	r0, r6
 80152fc:	f7ff fd6a 	bl	8014dd4 <rcl_node_get_rmw_handle>
 8015300:	6827      	ldr	r7, [r4, #0]
 8015302:	4641      	mov	r1, r8
 8015304:	462b      	mov	r3, r5
 8015306:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 801530a:	f003 fd9f 	bl	8018e4c <rmw_create_service>
 801530e:	6821      	ldr	r1, [r4, #0]
 8015310:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
 8015314:	f8d1 0108 	ldr.w	r0, [r1, #264]	; 0x108
 8015318:	b390      	cbz	r0, 8015380 <rcl_service_init+0x14c>
 801531a:	3168      	adds	r1, #104	; 0x68
 801531c:	f003 fec8 	bl	80190b0 <rmw_service_request_subscription_get_actual_qos>
 8015320:	b9b0      	cbnz	r0, 8015350 <rcl_service_init+0x11c>
 8015322:	6823      	ldr	r3, [r4, #0]
 8015324:	f103 01b8 	add.w	r1, r3, #184	; 0xb8
 8015328:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 801532c:	f003 feac 	bl	8019088 <rmw_service_response_publisher_get_actual_qos>
 8015330:	4607      	mov	r7, r0
 8015332:	b968      	cbnz	r0, 8015350 <rcl_service_init+0x11c>
 8015334:	6820      	ldr	r0, [r4, #0]
 8015336:	2268      	movs	r2, #104	; 0x68
 8015338:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
 801533c:	4629      	mov	r1, r5
 801533e:	f880 30b0 	strb.w	r3, [r0, #176]	; 0xb0
 8015342:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
 8015346:	f007 fb2e 	bl	801c9a6 <memcpy>
 801534a:	e7c8      	b.n	80152de <rcl_service_init+0xaa>
 801534c:	2768      	movs	r7, #104	; 0x68
 801534e:	e7bc      	b.n	80152ca <rcl_service_init+0x96>
 8015350:	f7ff f904 	bl	801455c <rcl_convert_rmw_ret_to_rcl_ret>
 8015354:	4607      	mov	r7, r0
 8015356:	4630      	mov	r0, r6
 8015358:	f7ff fd3c 	bl	8014dd4 <rcl_node_get_rmw_handle>
 801535c:	6823      	ldr	r3, [r4, #0]
 801535e:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 8015362:	f003 fe4d 	bl	8019000 <rmw_destroy_service>
 8015366:	6821      	ldr	r1, [r4, #0]
 8015368:	f8d1 0110 	ldr.w	r0, [r1, #272]	; 0x110
 801536c:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 801536e:	6e29      	ldr	r1, [r5, #96]	; 0x60
 8015370:	4798      	blx	r3
 8015372:	6820      	ldr	r0, [r4, #0]
 8015374:	2300      	movs	r3, #0
 8015376:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
 801537a:	e7a6      	b.n	80152ca <rcl_service_init+0x96>
 801537c:	270a      	movs	r7, #10
 801537e:	e7ae      	b.n	80152de <rcl_service_init+0xaa>
 8015380:	2701      	movs	r7, #1
 8015382:	e7f1      	b.n	8015368 <rcl_service_init+0x134>

08015384 <rcl_service_get_default_options>:
 8015384:	b530      	push	{r4, r5, lr}
 8015386:	4d0f      	ldr	r5, [pc, #60]	; (80153c4 <rcl_service_get_default_options+0x40>)
 8015388:	b087      	sub	sp, #28
 801538a:	4604      	mov	r4, r0
 801538c:	2250      	movs	r2, #80	; 0x50
 801538e:	490e      	ldr	r1, [pc, #56]	; (80153c8 <rcl_service_get_default_options+0x44>)
 8015390:	4628      	mov	r0, r5
 8015392:	f007 fb08 	bl	801c9a6 <memcpy>
 8015396:	4668      	mov	r0, sp
 8015398:	f7f8 fc50 	bl	800dc3c <rcutils_get_default_allocator>
 801539c:	46ec      	mov	ip, sp
 801539e:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 80153a2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80153a6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80153aa:	f8dc 3000 	ldr.w	r3, [ip]
 80153ae:	2268      	movs	r2, #104	; 0x68
 80153b0:	4629      	mov	r1, r5
 80153b2:	4620      	mov	r0, r4
 80153b4:	f8ce 3000 	str.w	r3, [lr]
 80153b8:	f007 faf5 	bl	801c9a6 <memcpy>
 80153bc:	4620      	mov	r0, r4
 80153be:	b007      	add	sp, #28
 80153c0:	bd30      	pop	{r4, r5, pc}
 80153c2:	bf00      	nop
 80153c4:	200107e0 	.word	0x200107e0
 80153c8:	0801eb08 	.word	0x0801eb08

080153cc <rcl_service_get_rmw_handle>:
 80153cc:	b118      	cbz	r0, 80153d6 <rcl_service_get_rmw_handle+0xa>
 80153ce:	6800      	ldr	r0, [r0, #0]
 80153d0:	b108      	cbz	r0, 80153d6 <rcl_service_get_rmw_handle+0xa>
 80153d2:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 80153d6:	4770      	bx	lr

080153d8 <rcl_take_request>:
 80153d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80153da:	468e      	mov	lr, r1
 80153dc:	b091      	sub	sp, #68	; 0x44
 80153de:	460c      	mov	r4, r1
 80153e0:	4617      	mov	r7, r2
 80153e2:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 80153e6:	4605      	mov	r5, r0
 80153e8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80153ec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80153f0:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80153f4:	e88c 0003 	stmia.w	ip, {r0, r1}
 80153f8:	b30d      	cbz	r5, 801543e <rcl_take_request+0x66>
 80153fa:	682b      	ldr	r3, [r5, #0]
 80153fc:	b1fb      	cbz	r3, 801543e <rcl_take_request+0x66>
 80153fe:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 8015402:	b1e0      	cbz	r0, 801543e <rcl_take_request+0x66>
 8015404:	b397      	cbz	r7, 801546c <rcl_take_request+0x94>
 8015406:	2300      	movs	r3, #0
 8015408:	463a      	mov	r2, r7
 801540a:	a906      	add	r1, sp, #24
 801540c:	f88d 3017 	strb.w	r3, [sp, #23]
 8015410:	f10d 0317 	add.w	r3, sp, #23
 8015414:	f003 fc18 	bl	8018c48 <rmw_take_request>
 8015418:	4606      	mov	r6, r0
 801541a:	b198      	cbz	r0, 8015444 <rcl_take_request+0x6c>
 801541c:	280a      	cmp	r0, #10
 801541e:	bf18      	it	ne
 8015420:	2601      	movne	r6, #1
 8015422:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 8015426:	46a6      	mov	lr, r4
 8015428:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801542c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015430:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8015434:	e88e 0003 	stmia.w	lr, {r0, r1}
 8015438:	4630      	mov	r0, r6
 801543a:	b011      	add	sp, #68	; 0x44
 801543c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801543e:	f44f 7616 	mov.w	r6, #600	; 0x258
 8015442:	e7ee      	b.n	8015422 <rcl_take_request+0x4a>
 8015444:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8015448:	b193      	cbz	r3, 8015470 <rcl_take_request+0x98>
 801544a:	682b      	ldr	r3, [r5, #0]
 801544c:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
 8015450:	2800      	cmp	r0, #0
 8015452:	d0e6      	beq.n	8015422 <rcl_take_request+0x4a>
 8015454:	463a      	mov	r2, r7
 8015456:	ab0a      	add	r3, sp, #40	; 0x28
 8015458:	2101      	movs	r1, #1
 801545a:	9302      	str	r3, [sp, #8]
 801545c:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 8015460:	e9cd 6700 	strd	r6, r7, [sp]
 8015464:	f000 f844 	bl	80154f0 <rcl_send_service_event_message>
 8015468:	4606      	mov	r6, r0
 801546a:	e7da      	b.n	8015422 <rcl_take_request+0x4a>
 801546c:	260b      	movs	r6, #11
 801546e:	e7d8      	b.n	8015422 <rcl_take_request+0x4a>
 8015470:	f240 2659 	movw	r6, #601	; 0x259
 8015474:	e7d5      	b.n	8015422 <rcl_take_request+0x4a>
 8015476:	bf00      	nop

08015478 <rcl_send_response>:
 8015478:	b350      	cbz	r0, 80154d0 <rcl_send_response+0x58>
 801547a:	6803      	ldr	r3, [r0, #0]
 801547c:	b570      	push	{r4, r5, r6, lr}
 801547e:	4604      	mov	r4, r0
 8015480:	b084      	sub	sp, #16
 8015482:	b1cb      	cbz	r3, 80154b8 <rcl_send_response+0x40>
 8015484:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 8015488:	b1b0      	cbz	r0, 80154b8 <rcl_send_response+0x40>
 801548a:	4615      	mov	r5, r2
 801548c:	b1ea      	cbz	r2, 80154ca <rcl_send_response+0x52>
 801548e:	460e      	mov	r6, r1
 8015490:	b1d9      	cbz	r1, 80154ca <rcl_send_response+0x52>
 8015492:	f003 fc37 	bl	8018d04 <rmw_send_response>
 8015496:	b998      	cbnz	r0, 80154c0 <rcl_send_response+0x48>
 8015498:	6823      	ldr	r3, [r4, #0]
 801549a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 801549e:	b16b      	cbz	r3, 80154bc <rcl_send_response+0x44>
 80154a0:	462a      	mov	r2, r5
 80154a2:	2102      	movs	r1, #2
 80154a4:	4618      	mov	r0, r3
 80154a6:	ed96 7b04 	vldr	d7, [r6, #16]
 80154aa:	9602      	str	r6, [sp, #8]
 80154ac:	ed8d 7b00 	vstr	d7, [sp]
 80154b0:	f000 f81e 	bl	80154f0 <rcl_send_service_event_message>
 80154b4:	b004      	add	sp, #16
 80154b6:	bd70      	pop	{r4, r5, r6, pc}
 80154b8:	f44f 7016 	mov.w	r0, #600	; 0x258
 80154bc:	b004      	add	sp, #16
 80154be:	bd70      	pop	{r4, r5, r6, pc}
 80154c0:	2802      	cmp	r0, #2
 80154c2:	bf18      	it	ne
 80154c4:	2001      	movne	r0, #1
 80154c6:	b004      	add	sp, #16
 80154c8:	bd70      	pop	{r4, r5, r6, pc}
 80154ca:	200b      	movs	r0, #11
 80154cc:	b004      	add	sp, #16
 80154ce:	bd70      	pop	{r4, r5, r6, pc}
 80154d0:	f44f 7016 	mov.w	r0, #600	; 0x258
 80154d4:	4770      	bx	lr
 80154d6:	bf00      	nop

080154d8 <rcl_service_is_valid>:
 80154d8:	b130      	cbz	r0, 80154e8 <rcl_service_is_valid+0x10>
 80154da:	6800      	ldr	r0, [r0, #0]
 80154dc:	b120      	cbz	r0, 80154e8 <rcl_service_is_valid+0x10>
 80154de:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 80154e2:	3800      	subs	r0, #0
 80154e4:	bf18      	it	ne
 80154e6:	2001      	movne	r0, #1
 80154e8:	4770      	bx	lr
 80154ea:	bf00      	nop
 80154ec:	0000      	movs	r0, r0
	...

080154f0 <rcl_send_service_event_message>:
 80154f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80154f4:	b093      	sub	sp, #76	; 0x4c
 80154f6:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 80154f8:	b196      	cbz	r6, 8015520 <rcl_send_service_event_message+0x30>
 80154fa:	4615      	mov	r5, r2
 80154fc:	b182      	cbz	r2, 8015520 <rcl_send_service_event_message+0x30>
 80154fe:	4604      	mov	r4, r0
 8015500:	b148      	cbz	r0, 8015516 <rcl_send_service_event_message+0x26>
 8015502:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8015506:	b133      	cbz	r3, 8015516 <rcl_send_service_event_message+0x26>
 8015508:	68c0      	ldr	r0, [r0, #12]
 801550a:	460f      	mov	r7, r1
 801550c:	f000 f9f2 	bl	80158f4 <rcl_clock_valid>
 8015510:	b108      	cbz	r0, 8015516 <rcl_send_service_event_message+0x26>
 8015512:	7a23      	ldrb	r3, [r4, #8]
 8015514:	b94b      	cbnz	r3, 801552a <rcl_send_service_event_message+0x3a>
 8015516:	2401      	movs	r4, #1
 8015518:	4620      	mov	r0, r4
 801551a:	b013      	add	sp, #76	; 0x4c
 801551c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015520:	240b      	movs	r4, #11
 8015522:	4620      	mov	r0, r4
 8015524:	b013      	add	sp, #76	; 0x4c
 8015526:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801552a:	f104 0e60 	add.w	lr, r4, #96	; 0x60
 801552e:	f10d 0c0c 	add.w	ip, sp, #12
 8015532:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015536:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801553a:	f8de 3000 	ldr.w	r3, [lr]
 801553e:	a803      	add	r0, sp, #12
 8015540:	f8cc 3000 	str.w	r3, [ip]
 8015544:	f7f8 fb88 	bl	800dc58 <rcutils_allocator_is_valid>
 8015548:	2800      	cmp	r0, #0
 801554a:	d0e9      	beq.n	8015520 <rcl_send_service_event_message+0x30>
 801554c:	6820      	ldr	r0, [r4, #0]
 801554e:	f7f7 fb0b 	bl	800cb68 <rcl_publisher_is_valid>
 8015552:	2800      	cmp	r0, #0
 8015554:	d05e      	beq.n	8015614 <rcl_send_service_event_message+0x124>
 8015556:	4669      	mov	r1, sp
 8015558:	68e0      	ldr	r0, [r4, #12]
 801555a:	f000 fa5d 	bl	8015a18 <rcl_clock_get_now>
 801555e:	4601      	mov	r1, r0
 8015560:	2800      	cmp	r0, #0
 8015562:	d146      	bne.n	80155f2 <rcl_send_service_event_message+0x102>
 8015564:	2220      	movs	r2, #32
 8015566:	eb0d 0002 	add.w	r0, sp, r2
 801556a:	f007 f8eb 	bl	801c744 <memset>
 801556e:	f88d 7020 	strb.w	r7, [sp, #32]
 8015572:	e9dd 8900 	ldrd	r8, r9, [sp]
 8015576:	a32a      	add	r3, pc, #168	; (adr r3, 8015620 <rcl_send_service_event_message+0x130>)
 8015578:	e9d3 2300 	ldrd	r2, r3, [r3]
 801557c:	4640      	mov	r0, r8
 801557e:	4649      	mov	r1, r9
 8015580:	f7ea fec6 	bl	8000310 <__aeabi_ldivmod>
 8015584:	4649      	mov	r1, r9
 8015586:	9009      	str	r0, [sp, #36]	; 0x24
 8015588:	4640      	mov	r0, r8
 801558a:	a325      	add	r3, pc, #148	; (adr r3, 8015620 <rcl_send_service_event_message+0x130>)
 801558c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015590:	f7ea febe 	bl	8000310 <__aeabi_ldivmod>
 8015594:	920a      	str	r2, [sp, #40]	; 0x28
 8015596:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
 801559a:	6830      	ldr	r0, [r6, #0]
 801559c:	6871      	ldr	r1, [r6, #4]
 801559e:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 80155a2:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80155a6:	7a23      	ldrb	r3, [r4, #8]
 80155a8:	68b2      	ldr	r2, [r6, #8]
 80155aa:	2b01      	cmp	r3, #1
 80155ac:	68f3      	ldr	r3, [r6, #12]
 80155ae:	bf08      	it	eq
 80155b0:	2500      	moveq	r5, #0
 80155b2:	2f01      	cmp	r7, #1
 80155b4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80155b8:	d81f      	bhi.n	80155fa <rcl_send_service_event_message+0x10a>
 80155ba:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80155be:	462a      	mov	r2, r5
 80155c0:	a808      	add	r0, sp, #32
 80155c2:	a903      	add	r1, sp, #12
 80155c4:	699d      	ldr	r5, [r3, #24]
 80155c6:	2300      	movs	r3, #0
 80155c8:	47a8      	blx	r5
 80155ca:	4605      	mov	r5, r0
 80155cc:	2d00      	cmp	r5, #0
 80155ce:	d0a2      	beq.n	8015516 <rcl_send_service_event_message+0x26>
 80155d0:	4629      	mov	r1, r5
 80155d2:	6820      	ldr	r0, [r4, #0]
 80155d4:	2200      	movs	r2, #0
 80155d6:	f7f7 faa3 	bl	800cb20 <rcl_publish>
 80155da:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80155de:	4604      	mov	r4, r0
 80155e0:	a903      	add	r1, sp, #12
 80155e2:	4628      	mov	r0, r5
 80155e4:	69db      	ldr	r3, [r3, #28]
 80155e6:	4798      	blx	r3
 80155e8:	2c00      	cmp	r4, #0
 80155ea:	d095      	beq.n	8015518 <rcl_send_service_event_message+0x28>
 80155ec:	f7f8 fb58 	bl	800dca0 <rcutils_reset_error>
 80155f0:	e792      	b.n	8015518 <rcl_send_service_event_message+0x28>
 80155f2:	2401      	movs	r4, #1
 80155f4:	f7f8 fb54 	bl	800dca0 <rcutils_reset_error>
 80155f8:	e78e      	b.n	8015518 <rcl_send_service_event_message+0x28>
 80155fa:	1eb9      	subs	r1, r7, #2
 80155fc:	2901      	cmp	r1, #1
 80155fe:	d8f8      	bhi.n	80155f2 <rcl_send_service_event_message+0x102>
 8015600:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8015604:	462b      	mov	r3, r5
 8015606:	a808      	add	r0, sp, #32
 8015608:	a903      	add	r1, sp, #12
 801560a:	6995      	ldr	r5, [r2, #24]
 801560c:	2200      	movs	r2, #0
 801560e:	47a8      	blx	r5
 8015610:	4605      	mov	r5, r0
 8015612:	e7db      	b.n	80155cc <rcl_send_service_event_message+0xdc>
 8015614:	f44f 7496 	mov.w	r4, #300	; 0x12c
 8015618:	e77e      	b.n	8015518 <rcl_send_service_event_message+0x28>
 801561a:	bf00      	nop
 801561c:	f3af 8000 	nop.w
 8015620:	3b9aca00 	.word	0x3b9aca00
 8015624:	00000000 	.word	0x00000000

08015628 <rcl_get_zero_initialized_subscription>:
 8015628:	4b01      	ldr	r3, [pc, #4]	; (8015630 <rcl_get_zero_initialized_subscription+0x8>)
 801562a:	6818      	ldr	r0, [r3, #0]
 801562c:	4770      	bx	lr
 801562e:	bf00      	nop
 8015630:	0801eb58 	.word	0x0801eb58

08015634 <rcl_subscription_init>:
 8015634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015638:	b088      	sub	sp, #32
 801563a:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801563c:	b1ff      	cbz	r7, 801567e <rcl_subscription_init+0x4a>
 801563e:	f107 0a50 	add.w	sl, r7, #80	; 0x50
 8015642:	4605      	mov	r5, r0
 8015644:	460e      	mov	r6, r1
 8015646:	4691      	mov	r9, r2
 8015648:	4650      	mov	r0, sl
 801564a:	4698      	mov	r8, r3
 801564c:	f7f8 fb04 	bl	800dc58 <rcutils_allocator_is_valid>
 8015650:	f080 0401 	eor.w	r4, r0, #1
 8015654:	b2e4      	uxtb	r4, r4
 8015656:	b994      	cbnz	r4, 801567e <rcl_subscription_init+0x4a>
 8015658:	b18d      	cbz	r5, 801567e <rcl_subscription_init+0x4a>
 801565a:	4630      	mov	r0, r6
 801565c:	f7ff fb98 	bl	8014d90 <rcl_node_is_valid>
 8015660:	2800      	cmp	r0, #0
 8015662:	d055      	beq.n	8015710 <rcl_subscription_init+0xdc>
 8015664:	f1b9 0f00 	cmp.w	r9, #0
 8015668:	d009      	beq.n	801567e <rcl_subscription_init+0x4a>
 801566a:	f1b8 0f00 	cmp.w	r8, #0
 801566e:	d006      	beq.n	801567e <rcl_subscription_init+0x4a>
 8015670:	682b      	ldr	r3, [r5, #0]
 8015672:	b14b      	cbz	r3, 8015688 <rcl_subscription_init+0x54>
 8015674:	2464      	movs	r4, #100	; 0x64
 8015676:	4620      	mov	r0, r4
 8015678:	b008      	add	sp, #32
 801567a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801567e:	240b      	movs	r4, #11
 8015680:	4620      	mov	r0, r4
 8015682:	b008      	add	sp, #32
 8015684:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015688:	e9cd 3303 	strd	r3, r3, [sp, #12]
 801568c:	aa07      	add	r2, sp, #28
 801568e:	9307      	str	r3, [sp, #28]
 8015690:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8015694:	9205      	str	r2, [sp, #20]
 8015696:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801569a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801569e:	4641      	mov	r1, r8
 80156a0:	4630      	mov	r0, r6
 80156a2:	e89a 000c 	ldmia.w	sl, {r2, r3}
 80156a6:	f7ff fbeb 	bl	8014e80 <rcl_node_resolve_name>
 80156aa:	2800      	cmp	r0, #0
 80156ac:	d15f      	bne.n	801576e <rcl_subscription_init+0x13a>
 80156ae:	21d0      	movs	r1, #208	; 0xd0
 80156b0:	2001      	movs	r0, #1
 80156b2:	e9d7 3217 	ldrd	r3, r2, [r7, #92]	; 0x5c
 80156b6:	4798      	blx	r3
 80156b8:	6028      	str	r0, [r5, #0]
 80156ba:	2800      	cmp	r0, #0
 80156bc:	d05f      	beq.n	801577e <rcl_subscription_init+0x14a>
 80156be:	4630      	mov	r0, r6
 80156c0:	f7ff fb88 	bl	8014dd4 <rcl_node_get_rmw_handle>
 80156c4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80156c8:	4649      	mov	r1, r9
 80156ca:	9a07      	ldr	r2, [sp, #28]
 80156cc:	9300      	str	r3, [sp, #0]
 80156ce:	463b      	mov	r3, r7
 80156d0:	682c      	ldr	r4, [r5, #0]
 80156d2:	f003 fd01 	bl	80190d8 <rmw_create_subscription>
 80156d6:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
 80156da:	682c      	ldr	r4, [r5, #0]
 80156dc:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
 80156e0:	b348      	cbz	r0, 8015736 <rcl_subscription_init+0x102>
 80156e2:	f104 0178 	add.w	r1, r4, #120	; 0x78
 80156e6:	f003 fded 	bl	80192c4 <rmw_subscription_get_actual_qos>
 80156ea:	4604      	mov	r4, r0
 80156ec:	b9a8      	cbnz	r0, 801571a <rcl_subscription_init+0xe6>
 80156ee:	6828      	ldr	r0, [r5, #0]
 80156f0:	2278      	movs	r2, #120	; 0x78
 80156f2:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80156f6:	4639      	mov	r1, r7
 80156f8:	f880 30c0 	strb.w	r3, [r0, #192]	; 0xc0
 80156fc:	f007 f953 	bl	801c9a6 <memcpy>
 8015700:	9807      	ldr	r0, [sp, #28]
 8015702:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015704:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8015706:	4798      	blx	r3
 8015708:	4620      	mov	r0, r4
 801570a:	b008      	add	sp, #32
 801570c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015710:	24c8      	movs	r4, #200	; 0xc8
 8015712:	4620      	mov	r0, r4
 8015714:	b008      	add	sp, #32
 8015716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801571a:	682c      	ldr	r4, [r5, #0]
 801571c:	b36c      	cbz	r4, 801577a <rcl_subscription_init+0x146>
 801571e:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
 8015722:	b14b      	cbz	r3, 8015738 <rcl_subscription_init+0x104>
 8015724:	4630      	mov	r0, r6
 8015726:	f7ff fb55 	bl	8014dd4 <rcl_node_get_rmw_handle>
 801572a:	682b      	ldr	r3, [r5, #0]
 801572c:	f8d3 10c8 	ldr.w	r1, [r3, #200]	; 0xc8
 8015730:	f003 fddc 	bl	80192ec <rmw_destroy_subscription>
 8015734:	682c      	ldr	r4, [r5, #0]
 8015736:	b194      	cbz	r4, 801575e <rcl_subscription_init+0x12a>
 8015738:	f104 0650 	add.w	r6, r4, #80	; 0x50
 801573c:	4630      	mov	r0, r6
 801573e:	f7f8 fa8b 	bl	800dc58 <rcutils_allocator_is_valid>
 8015742:	b158      	cbz	r0, 801575c <rcl_subscription_init+0x128>
 8015744:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8015746:	b148      	cbz	r0, 801575c <rcl_subscription_init+0x128>
 8015748:	4631      	mov	r1, r6
 801574a:	f002 fbe5 	bl	8017f18 <rmw_subscription_content_filter_options_fini>
 801574e:	4606      	mov	r6, r0
 8015750:	b9c8      	cbnz	r0, 8015786 <rcl_subscription_init+0x152>
 8015752:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8015754:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8015756:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8015758:	4798      	blx	r3
 801575a:	66e6      	str	r6, [r4, #108]	; 0x6c
 801575c:	682c      	ldr	r4, [r5, #0]
 801575e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015760:	4620      	mov	r0, r4
 8015762:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8015764:	2401      	movs	r4, #1
 8015766:	4798      	blx	r3
 8015768:	2300      	movs	r3, #0
 801576a:	602b      	str	r3, [r5, #0]
 801576c:	e7c8      	b.n	8015700 <rcl_subscription_init+0xcc>
 801576e:	2867      	cmp	r0, #103	; 0x67
 8015770:	d007      	beq.n	8015782 <rcl_subscription_init+0x14e>
 8015772:	2869      	cmp	r0, #105	; 0x69
 8015774:	d005      	beq.n	8015782 <rcl_subscription_init+0x14e>
 8015776:	280a      	cmp	r0, #10
 8015778:	d001      	beq.n	801577e <rcl_subscription_init+0x14a>
 801577a:	2401      	movs	r4, #1
 801577c:	e7c0      	b.n	8015700 <rcl_subscription_init+0xcc>
 801577e:	240a      	movs	r4, #10
 8015780:	e7be      	b.n	8015700 <rcl_subscription_init+0xcc>
 8015782:	2467      	movs	r4, #103	; 0x67
 8015784:	e7bc      	b.n	8015700 <rcl_subscription_init+0xcc>
 8015786:	f7fe fee9 	bl	801455c <rcl_convert_rmw_ret_to_rcl_ret>
 801578a:	682c      	ldr	r4, [r5, #0]
 801578c:	e7e7      	b.n	801575e <rcl_subscription_init+0x12a>
 801578e:	bf00      	nop

08015790 <rcl_subscription_get_default_options>:
 8015790:	b570      	push	{r4, r5, r6, lr}
 8015792:	4c16      	ldr	r4, [pc, #88]	; (80157ec <rcl_subscription_get_default_options+0x5c>)
 8015794:	b08a      	sub	sp, #40	; 0x28
 8015796:	4605      	mov	r5, r0
 8015798:	2250      	movs	r2, #80	; 0x50
 801579a:	4915      	ldr	r1, [pc, #84]	; (80157f0 <rcl_subscription_get_default_options+0x60>)
 801579c:	4620      	mov	r0, r4
 801579e:	f007 f902 	bl	801c9a6 <memcpy>
 80157a2:	a804      	add	r0, sp, #16
 80157a4:	f7f8 fa4a 	bl	800dc3c <rcutils_get_default_allocator>
 80157a8:	f10d 0c10 	add.w	ip, sp, #16
 80157ac:	f104 0e50 	add.w	lr, r4, #80	; 0x50
 80157b0:	466e      	mov	r6, sp
 80157b2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80157b6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80157ba:	f8dc 3000 	ldr.w	r3, [ip]
 80157be:	4630      	mov	r0, r6
 80157c0:	f8ce 3000 	str.w	r3, [lr]
 80157c4:	f002 fbc2 	bl	8017f4c <rmw_get_default_subscription_options>
 80157c8:	f104 0364 	add.w	r3, r4, #100	; 0x64
 80157cc:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80157d0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80157d4:	2301      	movs	r3, #1
 80157d6:	2278      	movs	r2, #120	; 0x78
 80157d8:	4621      	mov	r1, r4
 80157da:	4628      	mov	r0, r5
 80157dc:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 80157e0:	f007 f8e1 	bl	801c9a6 <memcpy>
 80157e4:	4628      	mov	r0, r5
 80157e6:	b00a      	add	sp, #40	; 0x28
 80157e8:	bd70      	pop	{r4, r5, r6, pc}
 80157ea:	bf00      	nop
 80157ec:	20010848 	.word	0x20010848
 80157f0:	0801eb60 	.word	0x0801eb60

080157f4 <rcl_take>:
 80157f4:	2800      	cmp	r0, #0
 80157f6:	d049      	beq.n	801588c <rcl_take+0x98>
 80157f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80157fc:	4615      	mov	r5, r2
 80157fe:	6802      	ldr	r2, [r0, #0]
 8015800:	b0a0      	sub	sp, #128	; 0x80
 8015802:	4604      	mov	r4, r0
 8015804:	2a00      	cmp	r2, #0
 8015806:	d039      	beq.n	801587c <rcl_take+0x88>
 8015808:	461f      	mov	r7, r3
 801580a:	f8d2 30c8 	ldr.w	r3, [r2, #200]	; 0xc8
 801580e:	b3ab      	cbz	r3, 801587c <rcl_take+0x88>
 8015810:	460e      	mov	r6, r1
 8015812:	2900      	cmp	r1, #0
 8015814:	d038      	beq.n	8015888 <rcl_take+0x94>
 8015816:	2d00      	cmp	r5, #0
 8015818:	d03c      	beq.n	8015894 <rcl_take+0xa0>
 801581a:	a802      	add	r0, sp, #8
 801581c:	f002 fc24 	bl	8018068 <rmw_get_zero_initialized_message_info>
 8015820:	6823      	ldr	r3, [r4, #0]
 8015822:	f10d 0c08 	add.w	ip, sp, #8
 8015826:	46ae      	mov	lr, r5
 8015828:	f8d3 80c8 	ldr.w	r8, [r3, #200]	; 0xc8
 801582c:	2400      	movs	r4, #0
 801582e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015832:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015836:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801583a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801583e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015842:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015846:	e89c 0003 	ldmia.w	ip, {r0, r1}
 801584a:	462b      	mov	r3, r5
 801584c:	f10d 0247 	add.w	r2, sp, #71	; 0x47
 8015850:	f88d 4047 	strb.w	r4, [sp, #71]	; 0x47
 8015854:	e88e 0003 	stmia.w	lr, {r0, r1}
 8015858:	4631      	mov	r1, r6
 801585a:	4640      	mov	r0, r8
 801585c:	9700      	str	r7, [sp, #0]
 801585e:	f003 fda7 	bl	80193b0 <rmw_take_with_info>
 8015862:	4603      	mov	r3, r0
 8015864:	b9c0      	cbnz	r0, 8015898 <rcl_take+0xa4>
 8015866:	f89d 1047 	ldrb.w	r1, [sp, #71]	; 0x47
 801586a:	f240 1291 	movw	r2, #401	; 0x191
 801586e:	2900      	cmp	r1, #0
 8015870:	bf08      	it	eq
 8015872:	4613      	moveq	r3, r2
 8015874:	4618      	mov	r0, r3
 8015876:	b020      	add	sp, #128	; 0x80
 8015878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801587c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8015880:	4618      	mov	r0, r3
 8015882:	b020      	add	sp, #128	; 0x80
 8015884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015888:	230b      	movs	r3, #11
 801588a:	e7f3      	b.n	8015874 <rcl_take+0x80>
 801588c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8015890:	4618      	mov	r0, r3
 8015892:	4770      	bx	lr
 8015894:	ad12      	add	r5, sp, #72	; 0x48
 8015896:	e7c0      	b.n	801581a <rcl_take+0x26>
 8015898:	f7fe fe60 	bl	801455c <rcl_convert_rmw_ret_to_rcl_ret>
 801589c:	4603      	mov	r3, r0
 801589e:	e7e9      	b.n	8015874 <rcl_take+0x80>

080158a0 <rcl_subscription_get_rmw_handle>:
 80158a0:	b118      	cbz	r0, 80158aa <rcl_subscription_get_rmw_handle+0xa>
 80158a2:	6800      	ldr	r0, [r0, #0]
 80158a4:	b108      	cbz	r0, 80158aa <rcl_subscription_get_rmw_handle+0xa>
 80158a6:	f8d0 00c8 	ldr.w	r0, [r0, #200]	; 0xc8
 80158aa:	4770      	bx	lr

080158ac <rcl_subscription_is_valid>:
 80158ac:	b130      	cbz	r0, 80158bc <rcl_subscription_is_valid+0x10>
 80158ae:	6800      	ldr	r0, [r0, #0]
 80158b0:	b120      	cbz	r0, 80158bc <rcl_subscription_is_valid+0x10>
 80158b2:	f8d0 00c8 	ldr.w	r0, [r0, #200]	; 0xc8
 80158b6:	3800      	subs	r0, #0
 80158b8:	bf18      	it	ne
 80158ba:	2001      	movne	r0, #1
 80158bc:	4770      	bx	lr
 80158be:	bf00      	nop

080158c0 <rcl_get_system_time>:
 80158c0:	4608      	mov	r0, r1
 80158c2:	f7f8 ba09 	b.w	800dcd8 <rcutils_system_time_now>
 80158c6:	bf00      	nop

080158c8 <rcl_get_steady_time>:
 80158c8:	4608      	mov	r0, r1
 80158ca:	f7f8 ba2d 	b.w	800dd28 <rcutils_steady_time_now>
 80158ce:	bf00      	nop

080158d0 <rcl_get_ros_time>:
 80158d0:	7a03      	ldrb	r3, [r0, #8]
 80158d2:	b510      	push	{r4, lr}
 80158d4:	460c      	mov	r4, r1
 80158d6:	b143      	cbz	r3, 80158ea <rcl_get_ros_time+0x1a>
 80158d8:	2105      	movs	r1, #5
 80158da:	f001 ff9d 	bl	8017818 <__atomic_load_8>
 80158de:	4602      	mov	r2, r0
 80158e0:	460b      	mov	r3, r1
 80158e2:	2000      	movs	r0, #0
 80158e4:	e9c4 2300 	strd	r2, r3, [r4]
 80158e8:	bd10      	pop	{r4, pc}
 80158ea:	4608      	mov	r0, r1
 80158ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80158f0:	f7f8 b9f2 	b.w	800dcd8 <rcutils_system_time_now>

080158f4 <rcl_clock_valid>:
 80158f4:	b138      	cbz	r0, 8015906 <rcl_clock_valid+0x12>
 80158f6:	7803      	ldrb	r3, [r0, #0]
 80158f8:	b123      	cbz	r3, 8015904 <rcl_clock_valid+0x10>
 80158fa:	68c0      	ldr	r0, [r0, #12]
 80158fc:	3800      	subs	r0, #0
 80158fe:	bf18      	it	ne
 8015900:	2001      	movne	r0, #1
 8015902:	4770      	bx	lr
 8015904:	4618      	mov	r0, r3
 8015906:	4770      	bx	lr

08015908 <rcl_clock_init>:
 8015908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801590a:	4605      	mov	r5, r0
 801590c:	4610      	mov	r0, r2
 801590e:	4614      	mov	r4, r2
 8015910:	460e      	mov	r6, r1
 8015912:	f7f8 f9a1 	bl	800dc58 <rcutils_allocator_is_valid>
 8015916:	b128      	cbz	r0, 8015924 <rcl_clock_init+0x1c>
 8015918:	2d03      	cmp	r5, #3
 801591a:	d803      	bhi.n	8015924 <rcl_clock_init+0x1c>
 801591c:	e8df f005 	tbb	[pc, r5]
 8015920:	0659301f 	.word	0x0659301f
 8015924:	f04f 0c0b 	mov.w	ip, #11
 8015928:	4660      	mov	r0, ip
 801592a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801592c:	2c00      	cmp	r4, #0
 801592e:	d0f9      	beq.n	8015924 <rcl_clock_init+0x1c>
 8015930:	fab6 f386 	clz	r3, r6
 8015934:	095b      	lsrs	r3, r3, #5
 8015936:	2e00      	cmp	r6, #0
 8015938:	d0f4      	beq.n	8015924 <rcl_clock_init+0x1c>
 801593a:	6133      	str	r3, [r6, #16]
 801593c:	469c      	mov	ip, r3
 801593e:	f106 0514 	add.w	r5, r6, #20
 8015942:	4f32      	ldr	r7, [pc, #200]	; (8015a0c <rcl_clock_init+0x104>)
 8015944:	f04f 0e03 	mov.w	lr, #3
 8015948:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801594c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801594e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015950:	6823      	ldr	r3, [r4, #0]
 8015952:	4660      	mov	r0, ip
 8015954:	602b      	str	r3, [r5, #0]
 8015956:	60f7      	str	r7, [r6, #12]
 8015958:	f886 e000 	strb.w	lr, [r6]
 801595c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801595e:	2e00      	cmp	r6, #0
 8015960:	d0e0      	beq.n	8015924 <rcl_clock_init+0x1c>
 8015962:	2300      	movs	r3, #0
 8015964:	f106 0514 	add.w	r5, r6, #20
 8015968:	7033      	strb	r3, [r6, #0]
 801596a:	469c      	mov	ip, r3
 801596c:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8015970:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8015974:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015976:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015978:	6823      	ldr	r3, [r4, #0]
 801597a:	4660      	mov	r0, ip
 801597c:	602b      	str	r3, [r5, #0]
 801597e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015980:	2c00      	cmp	r4, #0
 8015982:	d0cf      	beq.n	8015924 <rcl_clock_init+0x1c>
 8015984:	fab6 f586 	clz	r5, r6
 8015988:	096d      	lsrs	r5, r5, #5
 801598a:	2e00      	cmp	r6, #0
 801598c:	d0ca      	beq.n	8015924 <rcl_clock_init+0x1c>
 801598e:	46a6      	mov	lr, r4
 8015990:	7035      	strb	r5, [r6, #0]
 8015992:	f106 0c14 	add.w	ip, r6, #20
 8015996:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801599a:	e9c6 5501 	strd	r5, r5, [r6, #4]
 801599e:	e9c6 5503 	strd	r5, r5, [r6, #12]
 80159a2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80159a6:	f8de 3000 	ldr.w	r3, [lr]
 80159aa:	2010      	movs	r0, #16
 80159ac:	f8cc 3000 	str.w	r3, [ip]
 80159b0:	6823      	ldr	r3, [r4, #0]
 80159b2:	6921      	ldr	r1, [r4, #16]
 80159b4:	4798      	blx	r3
 80159b6:	6130      	str	r0, [r6, #16]
 80159b8:	b320      	cbz	r0, 8015a04 <rcl_clock_init+0xfc>
 80159ba:	2200      	movs	r2, #0
 80159bc:	2300      	movs	r3, #0
 80159be:	46ac      	mov	ip, r5
 80159c0:	7205      	strb	r5, [r0, #8]
 80159c2:	e9c0 2300 	strd	r2, r3, [r0]
 80159c6:	4a12      	ldr	r2, [pc, #72]	; (8015a10 <rcl_clock_init+0x108>)
 80159c8:	2301      	movs	r3, #1
 80159ca:	4660      	mov	r0, ip
 80159cc:	60f2      	str	r2, [r6, #12]
 80159ce:	7033      	strb	r3, [r6, #0]
 80159d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80159d2:	2c00      	cmp	r4, #0
 80159d4:	d0a6      	beq.n	8015924 <rcl_clock_init+0x1c>
 80159d6:	fab6 f386 	clz	r3, r6
 80159da:	095b      	lsrs	r3, r3, #5
 80159dc:	2e00      	cmp	r6, #0
 80159de:	d0a1      	beq.n	8015924 <rcl_clock_init+0x1c>
 80159e0:	6133      	str	r3, [r6, #16]
 80159e2:	469c      	mov	ip, r3
 80159e4:	f106 0514 	add.w	r5, r6, #20
 80159e8:	f8df e028 	ldr.w	lr, [pc, #40]	; 8015a14 <rcl_clock_init+0x10c>
 80159ec:	2702      	movs	r7, #2
 80159ee:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80159f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80159f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80159f6:	6823      	ldr	r3, [r4, #0]
 80159f8:	4660      	mov	r0, ip
 80159fa:	602b      	str	r3, [r5, #0]
 80159fc:	f8c6 e00c 	str.w	lr, [r6, #12]
 8015a00:	7037      	strb	r7, [r6, #0]
 8015a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015a04:	f04f 0c0a 	mov.w	ip, #10
 8015a08:	e78e      	b.n	8015928 <rcl_clock_init+0x20>
 8015a0a:	bf00      	nop
 8015a0c:	080158c9 	.word	0x080158c9
 8015a10:	080158d1 	.word	0x080158d1
 8015a14:	080158c1 	.word	0x080158c1

08015a18 <rcl_clock_get_now>:
 8015a18:	b140      	cbz	r0, 8015a2c <rcl_clock_get_now+0x14>
 8015a1a:	b139      	cbz	r1, 8015a2c <rcl_clock_get_now+0x14>
 8015a1c:	7803      	ldrb	r3, [r0, #0]
 8015a1e:	b11b      	cbz	r3, 8015a28 <rcl_clock_get_now+0x10>
 8015a20:	68c3      	ldr	r3, [r0, #12]
 8015a22:	b10b      	cbz	r3, 8015a28 <rcl_clock_get_now+0x10>
 8015a24:	6900      	ldr	r0, [r0, #16]
 8015a26:	4718      	bx	r3
 8015a28:	2001      	movs	r0, #1
 8015a2a:	4770      	bx	lr
 8015a2c:	200b      	movs	r0, #11
 8015a2e:	4770      	bx	lr

08015a30 <rcl_clock_add_jump_callback>:
 8015a30:	b082      	sub	sp, #8
 8015a32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a36:	a906      	add	r1, sp, #24
 8015a38:	e9dd 560c 	ldrd	r5, r6, [sp, #48]	; 0x30
 8015a3c:	e881 000c 	stmia.w	r1, {r2, r3}
 8015a40:	b330      	cbz	r0, 8015a90 <rcl_clock_add_jump_callback+0x60>
 8015a42:	4604      	mov	r4, r0
 8015a44:	3014      	adds	r0, #20
 8015a46:	f7f8 f907 	bl	800dc58 <rcutils_allocator_is_valid>
 8015a4a:	b30d      	cbz	r5, 8015a90 <rcl_clock_add_jump_callback+0x60>
 8015a4c:	f080 0301 	eor.w	r3, r0, #1
 8015a50:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8015a54:	d11c      	bne.n	8015a90 <rcl_clock_add_jump_callback+0x60>
 8015a56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015a58:	2a00      	cmp	r2, #0
 8015a5a:	db19      	blt.n	8015a90 <rcl_clock_add_jump_callback+0x60>
 8015a5c:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8015a60:	2901      	cmp	r1, #1
 8015a62:	f172 0200 	sbcs.w	r2, r2, #0
 8015a66:	da13      	bge.n	8015a90 <rcl_clock_add_jump_callback+0x60>
 8015a68:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 8015a6c:	2f00      	cmp	r7, #0
 8015a6e:	d040      	beq.n	8015af2 <rcl_clock_add_jump_callback+0xc2>
 8015a70:	4602      	mov	r2, r0
 8015a72:	e003      	b.n	8015a7c <rcl_clock_add_jump_callback+0x4c>
 8015a74:	42bb      	cmp	r3, r7
 8015a76:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8015a7a:	d010      	beq.n	8015a9e <rcl_clock_add_jump_callback+0x6e>
 8015a7c:	6811      	ldr	r1, [r2, #0]
 8015a7e:	3301      	adds	r3, #1
 8015a80:	42a9      	cmp	r1, r5
 8015a82:	d1f7      	bne.n	8015a74 <rcl_clock_add_jump_callback+0x44>
 8015a84:	6a11      	ldr	r1, [r2, #32]
 8015a86:	42b1      	cmp	r1, r6
 8015a88:	d1f4      	bne.n	8015a74 <rcl_clock_add_jump_callback+0x44>
 8015a8a:	f04f 0e01 	mov.w	lr, #1
 8015a8e:	e001      	b.n	8015a94 <rcl_clock_add_jump_callback+0x64>
 8015a90:	f04f 0e0b 	mov.w	lr, #11
 8015a94:	4670      	mov	r0, lr
 8015a96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015a9a:	b002      	add	sp, #8
 8015a9c:	4770      	bx	lr
 8015a9e:	3301      	adds	r3, #1
 8015aa0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8015aa4:	00d9      	lsls	r1, r3, #3
 8015aa6:	69e3      	ldr	r3, [r4, #28]
 8015aa8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8015aaa:	4798      	blx	r3
 8015aac:	b1f0      	cbz	r0, 8015aec <rcl_clock_add_jump_callback+0xbc>
 8015aae:	68a3      	ldr	r3, [r4, #8]
 8015ab0:	f10d 0c18 	add.w	ip, sp, #24
 8015ab4:	6060      	str	r0, [r4, #4]
 8015ab6:	f04f 0e00 	mov.w	lr, #0
 8015aba:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8015abe:	f103 0801 	add.w	r8, r3, #1
 8015ac2:	f840 5032 	str.w	r5, [r0, r2, lsl #3]
 8015ac6:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 8015aca:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015ace:	f105 0708 	add.w	r7, r5, #8
 8015ad2:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8015ad4:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8015ad8:	e887 0003 	stmia.w	r7, {r0, r1}
 8015adc:	4670      	mov	r0, lr
 8015ade:	622e      	str	r6, [r5, #32]
 8015ae0:	f8c4 8008 	str.w	r8, [r4, #8]
 8015ae4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015ae8:	b002      	add	sp, #8
 8015aea:	4770      	bx	lr
 8015aec:	f04f 0e0a 	mov.w	lr, #10
 8015af0:	e7d0      	b.n	8015a94 <rcl_clock_add_jump_callback+0x64>
 8015af2:	2128      	movs	r1, #40	; 0x28
 8015af4:	e7d7      	b.n	8015aa6 <rcl_clock_add_jump_callback+0x76>
 8015af6:	bf00      	nop

08015af8 <rcl_clock_remove_jump_callback>:
 8015af8:	2800      	cmp	r0, #0
 8015afa:	d05f      	beq.n	8015bbc <rcl_clock_remove_jump_callback+0xc4>
 8015afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015b00:	4605      	mov	r5, r0
 8015b02:	3014      	adds	r0, #20
 8015b04:	460f      	mov	r7, r1
 8015b06:	4692      	mov	sl, r2
 8015b08:	f7f8 f8a6 	bl	800dc58 <rcutils_allocator_is_valid>
 8015b0c:	f080 0001 	eor.w	r0, r0, #1
 8015b10:	b2c0      	uxtb	r0, r0
 8015b12:	2800      	cmp	r0, #0
 8015b14:	d13f      	bne.n	8015b96 <rcl_clock_remove_jump_callback+0x9e>
 8015b16:	2f00      	cmp	r7, #0
 8015b18:	d03d      	beq.n	8015b96 <rcl_clock_remove_jump_callback+0x9e>
 8015b1a:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8015b1e:	f1b8 0f00 	cmp.w	r8, #0
 8015b22:	d00c      	beq.n	8015b3e <rcl_clock_remove_jump_callback+0x46>
 8015b24:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8015b28:	eb08 0688 	add.w	r6, r8, r8, lsl #2
 8015b2c:	464c      	mov	r4, r9
 8015b2e:	eb09 06c6 	add.w	r6, r9, r6, lsl #3
 8015b32:	6823      	ldr	r3, [r4, #0]
 8015b34:	42bb      	cmp	r3, r7
 8015b36:	d005      	beq.n	8015b44 <rcl_clock_remove_jump_callback+0x4c>
 8015b38:	3428      	adds	r4, #40	; 0x28
 8015b3a:	42a6      	cmp	r6, r4
 8015b3c:	d1f9      	bne.n	8015b32 <rcl_clock_remove_jump_callback+0x3a>
 8015b3e:	2001      	movs	r0, #1
 8015b40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015b44:	6a23      	ldr	r3, [r4, #32]
 8015b46:	3428      	adds	r4, #40	; 0x28
 8015b48:	42a6      	cmp	r6, r4
 8015b4a:	d02f      	beq.n	8015bac <rcl_clock_remove_jump_callback+0xb4>
 8015b4c:	4553      	cmp	r3, sl
 8015b4e:	d1f0      	bne.n	8015b32 <rcl_clock_remove_jump_callback+0x3a>
 8015b50:	46a6      	mov	lr, r4
 8015b52:	f1a4 0c28 	sub.w	ip, r4, #40	; 0x28
 8015b56:	3428      	adds	r4, #40	; 0x28
 8015b58:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015b5c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015b60:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015b64:	42a6      	cmp	r6, r4
 8015b66:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015b6a:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8015b6e:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015b72:	d1ed      	bne.n	8015b50 <rcl_clock_remove_jump_callback+0x58>
 8015b74:	f108 34ff 	add.w	r4, r8, #4294967295	; 0xffffffff
 8015b78:	60ac      	str	r4, [r5, #8]
 8015b7a:	b17c      	cbz	r4, 8015b9c <rcl_clock_remove_jump_callback+0xa4>
 8015b7c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8015b80:	69eb      	ldr	r3, [r5, #28]
 8015b82:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8015b84:	4648      	mov	r0, r9
 8015b86:	00e1      	lsls	r1, r4, #3
 8015b88:	4798      	blx	r3
 8015b8a:	4603      	mov	r3, r0
 8015b8c:	b1c0      	cbz	r0, 8015bc0 <rcl_clock_remove_jump_callback+0xc8>
 8015b8e:	2000      	movs	r0, #0
 8015b90:	606b      	str	r3, [r5, #4]
 8015b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015b96:	200b      	movs	r0, #11
 8015b98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015b9c:	4648      	mov	r0, r9
 8015b9e:	69ab      	ldr	r3, [r5, #24]
 8015ba0:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8015ba2:	4798      	blx	r3
 8015ba4:	4620      	mov	r0, r4
 8015ba6:	606c      	str	r4, [r5, #4]
 8015ba8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015bac:	4553      	cmp	r3, sl
 8015bae:	d1c6      	bne.n	8015b3e <rcl_clock_remove_jump_callback+0x46>
 8015bb0:	f108 34ff 	add.w	r4, r8, #4294967295	; 0xffffffff
 8015bb4:	60ac      	str	r4, [r5, #8]
 8015bb6:	2c00      	cmp	r4, #0
 8015bb8:	d1e0      	bne.n	8015b7c <rcl_clock_remove_jump_callback+0x84>
 8015bba:	e7ef      	b.n	8015b9c <rcl_clock_remove_jump_callback+0xa4>
 8015bbc:	200b      	movs	r0, #11
 8015bbe:	4770      	bx	lr
 8015bc0:	200a      	movs	r0, #10
 8015bc2:	e7e9      	b.n	8015b98 <rcl_clock_remove_jump_callback+0xa0>

08015bc4 <_rcl_timer_time_jump>:
 8015bc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015bc8:	4605      	mov	r5, r0
 8015bca:	b084      	sub	sp, #16
 8015bcc:	4614      	mov	r4, r2
 8015bce:	b131      	cbz	r1, 8015bde <_rcl_timer_time_jump+0x1a>
 8015bd0:	7803      	ldrb	r3, [r0, #0]
 8015bd2:	3b02      	subs	r3, #2
 8015bd4:	2b01      	cmp	r3, #1
 8015bd6:	d93f      	bls.n	8015c58 <_rcl_timer_time_jump+0x94>
 8015bd8:	b004      	add	sp, #16
 8015bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015bde:	6813      	ldr	r3, [r2, #0]
 8015be0:	a902      	add	r1, sp, #8
 8015be2:	6818      	ldr	r0, [r3, #0]
 8015be4:	f7ff ff18 	bl	8015a18 <rcl_clock_get_now>
 8015be8:	2800      	cmp	r0, #0
 8015bea:	d1f5      	bne.n	8015bd8 <_rcl_timer_time_jump+0x14>
 8015bec:	6820      	ldr	r0, [r4, #0]
 8015bee:	2105      	movs	r1, #5
 8015bf0:	3020      	adds	r0, #32
 8015bf2:	f001 fe11 	bl	8017818 <__atomic_load_8>
 8015bf6:	6823      	ldr	r3, [r4, #0]
 8015bf8:	4681      	mov	r9, r0
 8015bfa:	4688      	mov	r8, r1
 8015bfc:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8015c00:	2105      	movs	r1, #5
 8015c02:	f001 fe09 	bl	8017818 <__atomic_load_8>
 8015c06:	4607      	mov	r7, r0
 8015c08:	6820      	ldr	r0, [r4, #0]
 8015c0a:	460e      	mov	r6, r1
 8015c0c:	2105      	movs	r1, #5
 8015c0e:	3018      	adds	r0, #24
 8015c10:	f001 fe02 	bl	8017818 <__atomic_load_8>
 8015c14:	782b      	ldrb	r3, [r5, #0]
 8015c16:	4682      	mov	sl, r0
 8015c18:	460d      	mov	r5, r1
 8015c1a:	3b02      	subs	r3, #2
 8015c1c:	9a02      	ldr	r2, [sp, #8]
 8015c1e:	2b01      	cmp	r3, #1
 8015c20:	9b03      	ldr	r3, [sp, #12]
 8015c22:	d937      	bls.n	8015c94 <_rcl_timer_time_jump+0xd0>
 8015c24:	42ba      	cmp	r2, r7
 8015c26:	eb73 0106 	sbcs.w	r1, r3, r6
 8015c2a:	da60      	bge.n	8015cee <_rcl_timer_time_jump+0x12a>
 8015c2c:	454a      	cmp	r2, r9
 8015c2e:	eb73 0108 	sbcs.w	r1, r3, r8
 8015c32:	dad1      	bge.n	8015bd8 <_rcl_timer_time_jump+0x14>
 8015c34:	eb1a 0202 	adds.w	r2, sl, r2
 8015c38:	6820      	ldr	r0, [r4, #0]
 8015c3a:	eb43 0305 	adc.w	r3, r3, r5
 8015c3e:	2505      	movs	r5, #5
 8015c40:	3028      	adds	r0, #40	; 0x28
 8015c42:	9500      	str	r5, [sp, #0]
 8015c44:	f001 fe1e 	bl	8017884 <__atomic_store_8>
 8015c48:	6820      	ldr	r0, [r4, #0]
 8015c4a:	9500      	str	r5, [sp, #0]
 8015c4c:	3020      	adds	r0, #32
 8015c4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015c52:	f001 fe17 	bl	8017884 <__atomic_store_8>
 8015c56:	e7bf      	b.n	8015bd8 <_rcl_timer_time_jump+0x14>
 8015c58:	6813      	ldr	r3, [r2, #0]
 8015c5a:	a902      	add	r1, sp, #8
 8015c5c:	6818      	ldr	r0, [r3, #0]
 8015c5e:	f7ff fedb 	bl	8015a18 <rcl_clock_get_now>
 8015c62:	2800      	cmp	r0, #0
 8015c64:	d1b8      	bne.n	8015bd8 <_rcl_timer_time_jump+0x14>
 8015c66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015c6a:	4313      	orrs	r3, r2
 8015c6c:	d0b4      	beq.n	8015bd8 <_rcl_timer_time_jump+0x14>
 8015c6e:	6820      	ldr	r0, [r4, #0]
 8015c70:	2105      	movs	r1, #5
 8015c72:	3028      	adds	r0, #40	; 0x28
 8015c74:	f001 fdd0 	bl	8017818 <__atomic_load_8>
 8015c78:	9d02      	ldr	r5, [sp, #8]
 8015c7a:	4602      	mov	r2, r0
 8015c7c:	9b03      	ldr	r3, [sp, #12]
 8015c7e:	6820      	ldr	r0, [r4, #0]
 8015c80:	1b52      	subs	r2, r2, r5
 8015c82:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8015c86:	eb61 0303 	sbc.w	r3, r1, r3
 8015c8a:	2105      	movs	r1, #5
 8015c8c:	9100      	str	r1, [sp, #0]
 8015c8e:	f001 fdf9 	bl	8017884 <__atomic_store_8>
 8015c92:	e7a1      	b.n	8015bd8 <_rcl_timer_time_jump+0x14>
 8015c94:	4313      	orrs	r3, r2
 8015c96:	d09f      	beq.n	8015bd8 <_rcl_timer_time_jump+0x14>
 8015c98:	6820      	ldr	r0, [r4, #0]
 8015c9a:	f04f 0805 	mov.w	r8, #5
 8015c9e:	2300      	movs	r3, #0
 8015ca0:	2200      	movs	r2, #0
 8015ca2:	3030      	adds	r0, #48	; 0x30
 8015ca4:	f8cd 8000 	str.w	r8, [sp]
 8015ca8:	f001 fe22 	bl	80178f0 <__atomic_exchange_8>
 8015cac:	ea51 0300 	orrs.w	r3, r1, r0
 8015cb0:	4606      	mov	r6, r0
 8015cb2:	460f      	mov	r7, r1
 8015cb4:	d090      	beq.n	8015bd8 <_rcl_timer_time_jump+0x14>
 8015cb6:	9a02      	ldr	r2, [sp, #8]
 8015cb8:	9b03      	ldr	r3, [sp, #12]
 8015cba:	1a12      	subs	r2, r2, r0
 8015cbc:	f8cd 8000 	str.w	r8, [sp]
 8015cc0:	6820      	ldr	r0, [r4, #0]
 8015cc2:	eb63 0301 	sbc.w	r3, r3, r1
 8015cc6:	eb12 020a 	adds.w	r2, r2, sl
 8015cca:	f100 0028 	add.w	r0, r0, #40	; 0x28
 8015cce:	eb43 0305 	adc.w	r3, r3, r5
 8015cd2:	f001 fdd7 	bl	8017884 <__atomic_store_8>
 8015cd6:	f8cd 8000 	str.w	r8, [sp]
 8015cda:	6820      	ldr	r0, [r4, #0]
 8015cdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015ce0:	3020      	adds	r0, #32
 8015ce2:	1b92      	subs	r2, r2, r6
 8015ce4:	eb63 0307 	sbc.w	r3, r3, r7
 8015ce8:	f001 fdcc 	bl	8017884 <__atomic_store_8>
 8015cec:	e774      	b.n	8015bd8 <_rcl_timer_time_jump+0x14>
 8015cee:	6820      	ldr	r0, [r4, #0]
 8015cf0:	3008      	adds	r0, #8
 8015cf2:	f005 fd77 	bl	801b7e4 <rcl_trigger_guard_condition>
 8015cf6:	e76f      	b.n	8015bd8 <_rcl_timer_time_jump+0x14>

08015cf8 <rcl_get_zero_initialized_timer>:
 8015cf8:	4b01      	ldr	r3, [pc, #4]	; (8015d00 <rcl_get_zero_initialized_timer+0x8>)
 8015cfa:	6818      	ldr	r0, [r3, #0]
 8015cfc:	4770      	bx	lr
 8015cfe:	bf00      	nop
 8015d00:	0801ebb0 	.word	0x0801ebb0

08015d04 <rcl_timer_init>:
 8015d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d08:	b0af      	sub	sp, #188	; 0xbc
 8015d0a:	460d      	mov	r5, r1
 8015d0c:	4604      	mov	r4, r0
 8015d0e:	4692      	mov	sl, r2
 8015d10:	a83b      	add	r0, sp, #236	; 0xec
 8015d12:	e9dd 8938 	ldrd	r8, r9, [sp, #224]	; 0xe0
 8015d16:	f7f7 ff9f 	bl	800dc58 <rcutils_allocator_is_valid>
 8015d1a:	fab5 f385 	clz	r3, r5
 8015d1e:	095b      	lsrs	r3, r3, #5
 8015d20:	ea43 73d9 	orr.w	r3, r3, r9, lsr #31
 8015d24:	2c00      	cmp	r4, #0
 8015d26:	bf08      	it	eq
 8015d28:	f043 0301 	orreq.w	r3, r3, #1
 8015d2c:	2b00      	cmp	r3, #0
 8015d2e:	d167      	bne.n	8015e00 <rcl_timer_init+0xfc>
 8015d30:	f080 0001 	eor.w	r0, r0, #1
 8015d34:	b2c0      	uxtb	r0, r0
 8015d36:	2800      	cmp	r0, #0
 8015d38:	d162      	bne.n	8015e00 <rcl_timer_init+0xfc>
 8015d3a:	6823      	ldr	r3, [r4, #0]
 8015d3c:	b123      	cbz	r3, 8015d48 <rcl_timer_init+0x44>
 8015d3e:	2664      	movs	r6, #100	; 0x64
 8015d40:	4630      	mov	r0, r6
 8015d42:	b02f      	add	sp, #188	; 0xbc
 8015d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d48:	a908      	add	r1, sp, #32
 8015d4a:	4628      	mov	r0, r5
 8015d4c:	f7ff fe64 	bl	8015a18 <rcl_clock_get_now>
 8015d50:	4606      	mov	r6, r0
 8015d52:	2800      	cmp	r0, #0
 8015d54:	d1f4      	bne.n	8015d40 <rcl_timer_init+0x3c>
 8015d56:	f10d 0b18 	add.w	fp, sp, #24
 8015d5a:	ae0b      	add	r6, sp, #44	; 0x2c
 8015d5c:	af18      	add	r7, sp, #96	; 0x60
 8015d5e:	4658      	mov	r0, fp
 8015d60:	e9cd 5a16 	strd	r5, sl, [sp, #88]	; 0x58
 8015d64:	f005 fc48 	bl	801b5f8 <rcl_get_zero_initialized_guard_condition>
 8015d68:	e89b 0003 	ldmia.w	fp, {r0, r1}
 8015d6c:	e887 0003 	stmia.w	r7, {r0, r1}
 8015d70:	4630      	mov	r0, r6
 8015d72:	f005 fd1b 	bl	801b7ac <rcl_guard_condition_get_default_options>
 8015d76:	ab0d      	add	r3, sp, #52	; 0x34
 8015d78:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015d7c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8015d80:	4651      	mov	r1, sl
 8015d82:	4638      	mov	r0, r7
 8015d84:	e896 000c 	ldmia.w	r6, {r2, r3}
 8015d88:	f005 fc40 	bl	801b60c <rcl_guard_condition_init>
 8015d8c:	4606      	mov	r6, r0
 8015d8e:	2800      	cmp	r0, #0
 8015d90:	d1d6      	bne.n	8015d40 <rcl_timer_init+0x3c>
 8015d92:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8015d94:	781b      	ldrb	r3, [r3, #0]
 8015d96:	2b01      	cmp	r3, #1
 8015d98:	d037      	beq.n	8015e0a <rcl_timer_init+0x106>
 8015d9a:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8015d9c:	f10d 0cec 	add.w	ip, sp, #236	; 0xec
 8015da0:	f10d 0e94 	add.w	lr, sp, #148	; 0x94
 8015da4:	f04f 0a00 	mov.w	sl, #0
 8015da8:	931a      	str	r3, [sp, #104]	; 0x68
 8015daa:	f8cd a0b0 	str.w	sl, [sp, #176]	; 0xb0
 8015dae:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8015db2:	e9cd 891c 	strd	r8, r9, [sp, #112]	; 0x70
 8015db6:	eb12 0008 	adds.w	r0, r2, r8
 8015dba:	f04f 0800 	mov.w	r8, #0
 8015dbe:	eb43 0109 	adc.w	r1, r3, r9
 8015dc2:	f04f 0900 	mov.w	r9, #0
 8015dc6:	e9cd 8922 	strd	r8, r9, [sp, #136]	; 0x88
 8015dca:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
 8015dce:	e9cd 0120 	strd	r0, r1, [sp, #128]	; 0x80
 8015dd2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015dd6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015dda:	f8dc 3000 	ldr.w	r3, [ip]
 8015dde:	2060      	movs	r0, #96	; 0x60
 8015de0:	f88d a090 	strb.w	sl, [sp, #144]	; 0x90
 8015de4:	4619      	mov	r1, r3
 8015de6:	f8ce 3000 	str.w	r3, [lr]
 8015dea:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 8015dec:	e9cd aa2a 	strd	sl, sl, [sp, #168]	; 0xa8
 8015df0:	4798      	blx	r3
 8015df2:	6020      	str	r0, [r4, #0]
 8015df4:	b358      	cbz	r0, 8015e4e <rcl_timer_init+0x14a>
 8015df6:	2260      	movs	r2, #96	; 0x60
 8015df8:	a916      	add	r1, sp, #88	; 0x58
 8015dfa:	f006 fdd4 	bl	801c9a6 <memcpy>
 8015dfe:	e79f      	b.n	8015d40 <rcl_timer_init+0x3c>
 8015e00:	260b      	movs	r6, #11
 8015e02:	4630      	mov	r0, r6
 8015e04:	b02f      	add	sp, #188	; 0xbc
 8015e06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e0a:	2001      	movs	r0, #1
 8015e0c:	2100      	movs	r1, #0
 8015e0e:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 8015e12:	ab12      	add	r3, sp, #72	; 0x48
 8015e14:	4a13      	ldr	r2, [pc, #76]	; (8015e64 <rcl_timer_init+0x160>)
 8015e16:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
 8015e1a:	9405      	str	r4, [sp, #20]
 8015e1c:	9204      	str	r2, [sp, #16]
 8015e1e:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8015e22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015e26:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8015e2a:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
 8015e2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015e30:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8015e34:	4628      	mov	r0, r5
 8015e36:	e89c 000c 	ldmia.w	ip, {r2, r3}
 8015e3a:	f7ff fdf9 	bl	8015a30 <rcl_clock_add_jump_callback>
 8015e3e:	4603      	mov	r3, r0
 8015e40:	2800      	cmp	r0, #0
 8015e42:	d0aa      	beq.n	8015d9a <rcl_timer_init+0x96>
 8015e44:	4638      	mov	r0, r7
 8015e46:	461e      	mov	r6, r3
 8015e48:	f005 fc8a 	bl	801b760 <rcl_guard_condition_fini>
 8015e4c:	e778      	b.n	8015d40 <rcl_timer_init+0x3c>
 8015e4e:	4638      	mov	r0, r7
 8015e50:	260a      	movs	r6, #10
 8015e52:	f005 fc85 	bl	801b760 <rcl_guard_condition_fini>
 8015e56:	4622      	mov	r2, r4
 8015e58:	4902      	ldr	r1, [pc, #8]	; (8015e64 <rcl_timer_init+0x160>)
 8015e5a:	4628      	mov	r0, r5
 8015e5c:	f7ff fe4c 	bl	8015af8 <rcl_clock_remove_jump_callback>
 8015e60:	e76e      	b.n	8015d40 <rcl_timer_init+0x3c>
 8015e62:	bf00      	nop
 8015e64:	08015bc5 	.word	0x08015bc5

08015e68 <rcl_timer_call>:
 8015e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e6c:	b087      	sub	sp, #28
 8015e6e:	2800      	cmp	r0, #0
 8015e70:	d06c      	beq.n	8015f4c <rcl_timer_call+0xe4>
 8015e72:	6803      	ldr	r3, [r0, #0]
 8015e74:	4604      	mov	r4, r0
 8015e76:	2b00      	cmp	r3, #0
 8015e78:	d062      	beq.n	8015f40 <rcl_timer_call+0xd8>
 8015e7a:	f3bf 8f5b 	dmb	ish
 8015e7e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8015e82:	f3bf 8f5b 	dmb	ish
 8015e86:	2b00      	cmp	r3, #0
 8015e88:	d14f      	bne.n	8015f2a <rcl_timer_call+0xc2>
 8015e8a:	6803      	ldr	r3, [r0, #0]
 8015e8c:	a904      	add	r1, sp, #16
 8015e8e:	6818      	ldr	r0, [r3, #0]
 8015e90:	f7ff fdc2 	bl	8015a18 <rcl_clock_get_now>
 8015e94:	4605      	mov	r5, r0
 8015e96:	2800      	cmp	r0, #0
 8015e98:	d149      	bne.n	8015f2e <rcl_timer_call+0xc6>
 8015e9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015e9e:	2b00      	cmp	r3, #0
 8015ea0:	db49      	blt.n	8015f36 <rcl_timer_call+0xce>
 8015ea2:	2605      	movs	r6, #5
 8015ea4:	6820      	ldr	r0, [r4, #0]
 8015ea6:	9600      	str	r6, [sp, #0]
 8015ea8:	3020      	adds	r0, #32
 8015eaa:	f001 fd21 	bl	80178f0 <__atomic_exchange_8>
 8015eae:	6823      	ldr	r3, [r4, #0]
 8015eb0:	4680      	mov	r8, r0
 8015eb2:	f3bf 8f5b 	dmb	ish
 8015eb6:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8015eba:	f3bf 8f5b 	dmb	ish
 8015ebe:	6820      	ldr	r0, [r4, #0]
 8015ec0:	4689      	mov	r9, r1
 8015ec2:	4631      	mov	r1, r6
 8015ec4:	3028      	adds	r0, #40	; 0x28
 8015ec6:	f001 fca7 	bl	8017818 <__atomic_load_8>
 8015eca:	460f      	mov	r7, r1
 8015ecc:	4631      	mov	r1, r6
 8015ece:	4606      	mov	r6, r0
 8015ed0:	6820      	ldr	r0, [r4, #0]
 8015ed2:	3018      	adds	r0, #24
 8015ed4:	f001 fca0 	bl	8017818 <__atomic_load_8>
 8015ed8:	4602      	mov	r2, r0
 8015eda:	9804      	ldr	r0, [sp, #16]
 8015edc:	460b      	mov	r3, r1
 8015ede:	18b6      	adds	r6, r6, r2
 8015ee0:	f8dd c014 	ldr.w	ip, [sp, #20]
 8015ee4:	4692      	mov	sl, r2
 8015ee6:	eb47 0701 	adc.w	r7, r7, r1
 8015eea:	4286      	cmp	r6, r0
 8015eec:	eb77 010c 	sbcs.w	r1, r7, ip
 8015ef0:	da04      	bge.n	8015efc <rcl_timer_call+0x94>
 8015ef2:	ea53 0102 	orrs.w	r1, r3, r2
 8015ef6:	d12e      	bne.n	8015f56 <rcl_timer_call+0xee>
 8015ef8:	4606      	mov	r6, r0
 8015efa:	4667      	mov	r7, ip
 8015efc:	6820      	ldr	r0, [r4, #0]
 8015efe:	2105      	movs	r1, #5
 8015f00:	4632      	mov	r2, r6
 8015f02:	463b      	mov	r3, r7
 8015f04:	3028      	adds	r0, #40	; 0x28
 8015f06:	9100      	str	r1, [sp, #0]
 8015f08:	f001 fcbc 	bl	8017884 <__atomic_store_8>
 8015f0c:	f1bb 0f00 	cmp.w	fp, #0
 8015f10:	d00d      	beq.n	8015f2e <rcl_timer_call+0xc6>
 8015f12:	9a04      	ldr	r2, [sp, #16]
 8015f14:	4620      	mov	r0, r4
 8015f16:	9b05      	ldr	r3, [sp, #20]
 8015f18:	ebb2 0208 	subs.w	r2, r2, r8
 8015f1c:	eb63 0309 	sbc.w	r3, r3, r9
 8015f20:	47d8      	blx	fp
 8015f22:	4628      	mov	r0, r5
 8015f24:	b007      	add	sp, #28
 8015f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f2a:	f240 3521 	movw	r5, #801	; 0x321
 8015f2e:	4628      	mov	r0, r5
 8015f30:	b007      	add	sp, #28
 8015f32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f36:	2501      	movs	r5, #1
 8015f38:	4628      	mov	r0, r5
 8015f3a:	b007      	add	sp, #28
 8015f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f40:	f44f 7548 	mov.w	r5, #800	; 0x320
 8015f44:	4628      	mov	r0, r5
 8015f46:	b007      	add	sp, #28
 8015f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f4c:	250b      	movs	r5, #11
 8015f4e:	4628      	mov	r0, r5
 8015f50:	b007      	add	sp, #28
 8015f52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f56:	1b80      	subs	r0, r0, r6
 8015f58:	eb6c 0107 	sbc.w	r1, ip, r7
 8015f5c:	3801      	subs	r0, #1
 8015f5e:	f161 0100 	sbc.w	r1, r1, #0
 8015f62:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8015f66:	f7ea f9d3 	bl	8000310 <__aeabi_ldivmod>
 8015f6a:	9b02      	ldr	r3, [sp, #8]
 8015f6c:	3001      	adds	r0, #1
 8015f6e:	f141 0100 	adc.w	r1, r1, #0
 8015f72:	fb00 f303 	mul.w	r3, r0, r3
 8015f76:	fb01 330a 	mla	r3, r1, sl, r3
 8015f7a:	fba0 0a0a 	umull	r0, sl, r0, sl
 8015f7e:	1986      	adds	r6, r0, r6
 8015f80:	4453      	add	r3, sl
 8015f82:	eb43 0707 	adc.w	r7, r3, r7
 8015f86:	e7b9      	b.n	8015efc <rcl_timer_call+0x94>

08015f88 <rcl_timer_is_ready>:
 8015f88:	b570      	push	{r4, r5, r6, lr}
 8015f8a:	b082      	sub	sp, #8
 8015f8c:	b380      	cbz	r0, 8015ff0 <rcl_timer_is_ready+0x68>
 8015f8e:	6803      	ldr	r3, [r0, #0]
 8015f90:	4604      	mov	r4, r0
 8015f92:	b38b      	cbz	r3, 8015ff8 <rcl_timer_is_ready+0x70>
 8015f94:	460d      	mov	r5, r1
 8015f96:	b359      	cbz	r1, 8015ff0 <rcl_timer_is_ready+0x68>
 8015f98:	f3bf 8f5b 	dmb	ish
 8015f9c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8015fa0:	f3bf 8f5b 	dmb	ish
 8015fa4:	b953      	cbnz	r3, 8015fbc <rcl_timer_is_ready+0x34>
 8015fa6:	6803      	ldr	r3, [r0, #0]
 8015fa8:	4669      	mov	r1, sp
 8015faa:	6818      	ldr	r0, [r3, #0]
 8015fac:	f7ff fd34 	bl	8015a18 <rcl_clock_get_now>
 8015fb0:	4606      	mov	r6, r0
 8015fb2:	b148      	cbz	r0, 8015fc8 <rcl_timer_is_ready+0x40>
 8015fb4:	f240 3321 	movw	r3, #801	; 0x321
 8015fb8:	4298      	cmp	r0, r3
 8015fba:	d102      	bne.n	8015fc2 <rcl_timer_is_ready+0x3a>
 8015fbc:	2300      	movs	r3, #0
 8015fbe:	461e      	mov	r6, r3
 8015fc0:	702b      	strb	r3, [r5, #0]
 8015fc2:	4630      	mov	r0, r6
 8015fc4:	b002      	add	sp, #8
 8015fc6:	bd70      	pop	{r4, r5, r6, pc}
 8015fc8:	6820      	ldr	r0, [r4, #0]
 8015fca:	2105      	movs	r1, #5
 8015fcc:	3028      	adds	r0, #40	; 0x28
 8015fce:	f001 fc23 	bl	8017818 <__atomic_load_8>
 8015fd2:	9b00      	ldr	r3, [sp, #0]
 8015fd4:	1ac0      	subs	r0, r0, r3
 8015fd6:	9b01      	ldr	r3, [sp, #4]
 8015fd8:	eb61 0103 	sbc.w	r1, r1, r3
 8015fdc:	2801      	cmp	r0, #1
 8015fde:	4630      	mov	r0, r6
 8015fe0:	f171 0300 	sbcs.w	r3, r1, #0
 8015fe4:	bfb4      	ite	lt
 8015fe6:	2301      	movlt	r3, #1
 8015fe8:	2300      	movge	r3, #0
 8015fea:	702b      	strb	r3, [r5, #0]
 8015fec:	b002      	add	sp, #8
 8015fee:	bd70      	pop	{r4, r5, r6, pc}
 8015ff0:	260b      	movs	r6, #11
 8015ff2:	4630      	mov	r0, r6
 8015ff4:	b002      	add	sp, #8
 8015ff6:	bd70      	pop	{r4, r5, r6, pc}
 8015ff8:	f44f 7648 	mov.w	r6, #800	; 0x320
 8015ffc:	e7e1      	b.n	8015fc2 <rcl_timer_is_ready+0x3a>
 8015ffe:	bf00      	nop

08016000 <rcl_timer_get_time_until_next_call>:
 8016000:	b570      	push	{r4, r5, r6, lr}
 8016002:	b082      	sub	sp, #8
 8016004:	b330      	cbz	r0, 8016054 <rcl_timer_get_time_until_next_call+0x54>
 8016006:	6803      	ldr	r3, [r0, #0]
 8016008:	4604      	mov	r4, r0
 801600a:	b33b      	cbz	r3, 801605c <rcl_timer_get_time_until_next_call+0x5c>
 801600c:	460d      	mov	r5, r1
 801600e:	b309      	cbz	r1, 8016054 <rcl_timer_get_time_until_next_call+0x54>
 8016010:	f3bf 8f5b 	dmb	ish
 8016014:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8016018:	f3bf 8f5b 	dmb	ish
 801601c:	b9ab      	cbnz	r3, 801604a <rcl_timer_get_time_until_next_call+0x4a>
 801601e:	6803      	ldr	r3, [r0, #0]
 8016020:	4669      	mov	r1, sp
 8016022:	6818      	ldr	r0, [r3, #0]
 8016024:	f7ff fcf8 	bl	8015a18 <rcl_clock_get_now>
 8016028:	4606      	mov	r6, r0
 801602a:	b958      	cbnz	r0, 8016044 <rcl_timer_get_time_until_next_call+0x44>
 801602c:	6820      	ldr	r0, [r4, #0]
 801602e:	2105      	movs	r1, #5
 8016030:	3028      	adds	r0, #40	; 0x28
 8016032:	f001 fbf1 	bl	8017818 <__atomic_load_8>
 8016036:	9b00      	ldr	r3, [sp, #0]
 8016038:	1ac0      	subs	r0, r0, r3
 801603a:	9b01      	ldr	r3, [sp, #4]
 801603c:	eb61 0103 	sbc.w	r1, r1, r3
 8016040:	6028      	str	r0, [r5, #0]
 8016042:	6069      	str	r1, [r5, #4]
 8016044:	4630      	mov	r0, r6
 8016046:	b002      	add	sp, #8
 8016048:	bd70      	pop	{r4, r5, r6, pc}
 801604a:	f240 3621 	movw	r6, #801	; 0x321
 801604e:	4630      	mov	r0, r6
 8016050:	b002      	add	sp, #8
 8016052:	bd70      	pop	{r4, r5, r6, pc}
 8016054:	260b      	movs	r6, #11
 8016056:	4630      	mov	r0, r6
 8016058:	b002      	add	sp, #8
 801605a:	bd70      	pop	{r4, r5, r6, pc}
 801605c:	f44f 7648 	mov.w	r6, #800	; 0x320
 8016060:	e7f0      	b.n	8016044 <rcl_timer_get_time_until_next_call+0x44>
 8016062:	bf00      	nop

08016064 <rcl_timer_get_guard_condition>:
 8016064:	b130      	cbz	r0, 8016074 <rcl_timer_get_guard_condition+0x10>
 8016066:	6800      	ldr	r0, [r0, #0]
 8016068:	b120      	cbz	r0, 8016074 <rcl_timer_get_guard_condition+0x10>
 801606a:	68c3      	ldr	r3, [r0, #12]
 801606c:	b10b      	cbz	r3, 8016072 <rcl_timer_get_guard_condition+0xe>
 801606e:	3008      	adds	r0, #8
 8016070:	4770      	bx	lr
 8016072:	4618      	mov	r0, r3
 8016074:	4770      	bx	lr
 8016076:	bf00      	nop

08016078 <rcl_validate_enclave_name_with_size>:
 8016078:	2800      	cmp	r0, #0
 801607a:	d049      	beq.n	8016110 <rcl_validate_enclave_name_with_size+0x98>
 801607c:	b570      	push	{r4, r5, r6, lr}
 801607e:	4615      	mov	r5, r2
 8016080:	b0c2      	sub	sp, #264	; 0x108
 8016082:	b19a      	cbz	r2, 80160ac <rcl_validate_enclave_name_with_size+0x34>
 8016084:	461e      	mov	r6, r3
 8016086:	466a      	mov	r2, sp
 8016088:	ab01      	add	r3, sp, #4
 801608a:	460c      	mov	r4, r1
 801608c:	f002 f870 	bl	8018170 <rmw_validate_namespace_with_size>
 8016090:	4684      	mov	ip, r0
 8016092:	b9b8      	cbnz	r0, 80160c4 <rcl_validate_enclave_name_with_size+0x4c>
 8016094:	9900      	ldr	r1, [sp, #0]
 8016096:	b171      	cbz	r1, 80160b6 <rcl_validate_enclave_name_with_size+0x3e>
 8016098:	2907      	cmp	r1, #7
 801609a:	d019      	beq.n	80160d0 <rcl_validate_enclave_name_with_size+0x58>
 801609c:	1e4b      	subs	r3, r1, #1
 801609e:	2b05      	cmp	r3, #5
 80160a0:	d83a      	bhi.n	8016118 <rcl_validate_enclave_name_with_size+0xa0>
 80160a2:	e8df f003 	tbb	[pc, r3]
 80160a6:	2926      	.short	0x2926
 80160a8:	1d322f2c 	.word	0x1d322f2c
 80160ac:	f04f 0c0b 	mov.w	ip, #11
 80160b0:	4660      	mov	r0, ip
 80160b2:	b042      	add	sp, #264	; 0x108
 80160b4:	bd70      	pop	{r4, r5, r6, pc}
 80160b6:	2907      	cmp	r1, #7
 80160b8:	d00a      	beq.n	80160d0 <rcl_validate_enclave_name_with_size+0x58>
 80160ba:	2300      	movs	r3, #0
 80160bc:	4660      	mov	r0, ip
 80160be:	602b      	str	r3, [r5, #0]
 80160c0:	b042      	add	sp, #264	; 0x108
 80160c2:	bd70      	pop	{r4, r5, r6, pc}
 80160c4:	f7fe fa4a 	bl	801455c <rcl_convert_rmw_ret_to_rcl_ret>
 80160c8:	4684      	mov	ip, r0
 80160ca:	4660      	mov	r0, ip
 80160cc:	b042      	add	sp, #264	; 0x108
 80160ce:	bd70      	pop	{r4, r5, r6, pc}
 80160d0:	2cff      	cmp	r4, #255	; 0xff
 80160d2:	d9f2      	bls.n	80160ba <rcl_validate_enclave_name_with_size+0x42>
 80160d4:	6029      	str	r1, [r5, #0]
 80160d6:	2e00      	cmp	r6, #0
 80160d8:	d0ea      	beq.n	80160b0 <rcl_validate_enclave_name_with_size+0x38>
 80160da:	23fe      	movs	r3, #254	; 0xfe
 80160dc:	6033      	str	r3, [r6, #0]
 80160de:	e7e7      	b.n	80160b0 <rcl_validate_enclave_name_with_size+0x38>
 80160e0:	2306      	movs	r3, #6
 80160e2:	602b      	str	r3, [r5, #0]
 80160e4:	2e00      	cmp	r6, #0
 80160e6:	d0e3      	beq.n	80160b0 <rcl_validate_enclave_name_with_size+0x38>
 80160e8:	9b01      	ldr	r3, [sp, #4]
 80160ea:	4660      	mov	r0, ip
 80160ec:	6033      	str	r3, [r6, #0]
 80160ee:	b042      	add	sp, #264	; 0x108
 80160f0:	bd70      	pop	{r4, r5, r6, pc}
 80160f2:	2301      	movs	r3, #1
 80160f4:	602b      	str	r3, [r5, #0]
 80160f6:	e7f5      	b.n	80160e4 <rcl_validate_enclave_name_with_size+0x6c>
 80160f8:	2302      	movs	r3, #2
 80160fa:	602b      	str	r3, [r5, #0]
 80160fc:	e7f2      	b.n	80160e4 <rcl_validate_enclave_name_with_size+0x6c>
 80160fe:	2303      	movs	r3, #3
 8016100:	602b      	str	r3, [r5, #0]
 8016102:	e7ef      	b.n	80160e4 <rcl_validate_enclave_name_with_size+0x6c>
 8016104:	2304      	movs	r3, #4
 8016106:	602b      	str	r3, [r5, #0]
 8016108:	e7ec      	b.n	80160e4 <rcl_validate_enclave_name_with_size+0x6c>
 801610a:	2305      	movs	r3, #5
 801610c:	602b      	str	r3, [r5, #0]
 801610e:	e7e9      	b.n	80160e4 <rcl_validate_enclave_name_with_size+0x6c>
 8016110:	f04f 0c0b 	mov.w	ip, #11
 8016114:	4660      	mov	r0, ip
 8016116:	4770      	bx	lr
 8016118:	460b      	mov	r3, r1
 801611a:	4a04      	ldr	r2, [pc, #16]	; (801612c <rcl_validate_enclave_name_with_size+0xb4>)
 801611c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8016120:	a802      	add	r0, sp, #8
 8016122:	f001 fd31 	bl	8017b88 <rcutils_snprintf>
 8016126:	f04f 0c01 	mov.w	ip, #1
 801612a:	e7c1      	b.n	80160b0 <rcl_validate_enclave_name_with_size+0x38>
 801612c:	0801ebb4 	.word	0x0801ebb4

08016130 <rcl_validate_enclave_name>:
 8016130:	b168      	cbz	r0, 801614e <rcl_validate_enclave_name+0x1e>
 8016132:	b570      	push	{r4, r5, r6, lr}
 8016134:	460d      	mov	r5, r1
 8016136:	4616      	mov	r6, r2
 8016138:	4604      	mov	r4, r0
 801613a:	f7ea f8e1 	bl	8000300 <strlen>
 801613e:	4633      	mov	r3, r6
 8016140:	4601      	mov	r1, r0
 8016142:	462a      	mov	r2, r5
 8016144:	4620      	mov	r0, r4
 8016146:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801614a:	f7ff bf95 	b.w	8016078 <rcl_validate_enclave_name_with_size>
 801614e:	200b      	movs	r0, #11
 8016150:	4770      	bx	lr
 8016152:	bf00      	nop

08016154 <rcl_get_zero_initialized_wait_set>:
 8016154:	b510      	push	{r4, lr}
 8016156:	4c08      	ldr	r4, [pc, #32]	; (8016178 <rcl_get_zero_initialized_wait_set+0x24>)
 8016158:	4686      	mov	lr, r0
 801615a:	4684      	mov	ip, r0
 801615c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801615e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016162:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016164:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016168:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801616a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801616e:	6823      	ldr	r3, [r4, #0]
 8016170:	4670      	mov	r0, lr
 8016172:	f8cc 3000 	str.w	r3, [ip]
 8016176:	bd10      	pop	{r4, pc}
 8016178:	0801ec14 	.word	0x0801ec14

0801617c <rcl_wait_set_is_valid>:
 801617c:	b118      	cbz	r0, 8016186 <rcl_wait_set_is_valid+0xa>
 801617e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8016180:	3800      	subs	r0, #0
 8016182:	bf18      	it	ne
 8016184:	2001      	movne	r0, #1
 8016186:	4770      	bx	lr

08016188 <rcl_wait_set_fini>:
 8016188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801618c:	b082      	sub	sp, #8
 801618e:	2800      	cmp	r0, #0
 8016190:	f000 8095 	beq.w	80162be <rcl_wait_set_fini+0x136>
 8016194:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8016196:	4604      	mov	r4, r0
 8016198:	2e00      	cmp	r6, #0
 801619a:	f000 808c 	beq.w	80162b6 <rcl_wait_set_fini+0x12e>
 801619e:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 80161a0:	f003 fae0 	bl	8019764 <rmw_destroy_wait_set>
 80161a4:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80161a6:	1e06      	subs	r6, r0, #0
 80161a8:	bf18      	it	ne
 80161aa:	f44f 7661 	movne.w	r6, #900	; 0x384
 80161ae:	2d00      	cmp	r5, #0
 80161b0:	f000 8081 	beq.w	80162b6 <rcl_wait_set_fini+0x12e>
 80161b4:	2700      	movs	r7, #0
 80161b6:	6820      	ldr	r0, [r4, #0]
 80161b8:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 80161bc:	6da9      	ldr	r1, [r5, #88]	; 0x58
 80161be:	6067      	str	r7, [r4, #4]
 80161c0:	602f      	str	r7, [r5, #0]
 80161c2:	b120      	cbz	r0, 80161ce <rcl_wait_set_fini+0x46>
 80161c4:	9101      	str	r1, [sp, #4]
 80161c6:	47c0      	blx	r8
 80161c8:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80161ca:	9901      	ldr	r1, [sp, #4]
 80161cc:	6027      	str	r7, [r4, #0]
 80161ce:	68a8      	ldr	r0, [r5, #8]
 80161d0:	b120      	cbz	r0, 80161dc <rcl_wait_set_fini+0x54>
 80161d2:	47c0      	blx	r8
 80161d4:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80161d6:	2300      	movs	r3, #0
 80161d8:	e9c5 3301 	strd	r3, r3, [r5, #4]
 80161dc:	f04f 0800 	mov.w	r8, #0
 80161e0:	68a0      	ldr	r0, [r4, #8]
 80161e2:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 80161e4:	6da9      	ldr	r1, [r5, #88]	; 0x58
 80161e6:	f8c4 800c 	str.w	r8, [r4, #12]
 80161ea:	f8c5 800c 	str.w	r8, [r5, #12]
 80161ee:	b128      	cbz	r0, 80161fc <rcl_wait_set_fini+0x74>
 80161f0:	47b8      	blx	r7
 80161f2:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80161f4:	f8c4 8008 	str.w	r8, [r4, #8]
 80161f8:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 80161fa:	6da9      	ldr	r1, [r5, #88]	; 0x58
 80161fc:	f04f 0800 	mov.w	r8, #0
 8016200:	6968      	ldr	r0, [r5, #20]
 8016202:	f8c5 8010 	str.w	r8, [r5, #16]
 8016206:	b128      	cbz	r0, 8016214 <rcl_wait_set_fini+0x8c>
 8016208:	47b8      	blx	r7
 801620a:	f8c5 8014 	str.w	r8, [r5, #20]
 801620e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8016210:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8016212:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8016214:	f04f 0800 	mov.w	r8, #0
 8016218:	6920      	ldr	r0, [r4, #16]
 801621a:	f8c4 8014 	str.w	r8, [r4, #20]
 801621e:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40
 8016222:	b128      	cbz	r0, 8016230 <rcl_wait_set_fini+0xa8>
 8016224:	47b8      	blx	r7
 8016226:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8016228:	f8c4 8010 	str.w	r8, [r4, #16]
 801622c:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 801622e:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8016230:	f04f 0800 	mov.w	r8, #0
 8016234:	69a0      	ldr	r0, [r4, #24]
 8016236:	f8c4 801c 	str.w	r8, [r4, #28]
 801623a:	f8c5 8018 	str.w	r8, [r5, #24]
 801623e:	b128      	cbz	r0, 801624c <rcl_wait_set_fini+0xc4>
 8016240:	9101      	str	r1, [sp, #4]
 8016242:	47b8      	blx	r7
 8016244:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8016246:	9901      	ldr	r1, [sp, #4]
 8016248:	f8c4 8018 	str.w	r8, [r4, #24]
 801624c:	6a28      	ldr	r0, [r5, #32]
 801624e:	b120      	cbz	r0, 801625a <rcl_wait_set_fini+0xd2>
 8016250:	47b8      	blx	r7
 8016252:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8016254:	2300      	movs	r3, #0
 8016256:	e9c5 3307 	strd	r3, r3, [r5, #28]
 801625a:	2700      	movs	r7, #0
 801625c:	6a20      	ldr	r0, [r4, #32]
 801625e:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 8016262:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8016264:	6267      	str	r7, [r4, #36]	; 0x24
 8016266:	626f      	str	r7, [r5, #36]	; 0x24
 8016268:	b120      	cbz	r0, 8016274 <rcl_wait_set_fini+0xec>
 801626a:	9101      	str	r1, [sp, #4]
 801626c:	47c0      	blx	r8
 801626e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8016270:	9901      	ldr	r1, [sp, #4]
 8016272:	6227      	str	r7, [r4, #32]
 8016274:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8016276:	b120      	cbz	r0, 8016282 <rcl_wait_set_fini+0xfa>
 8016278:	47c0      	blx	r8
 801627a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801627c:	2300      	movs	r3, #0
 801627e:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 8016282:	2700      	movs	r7, #0
 8016284:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8016286:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 801628a:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801628c:	62e7      	str	r7, [r4, #44]	; 0x2c
 801628e:	632f      	str	r7, [r5, #48]	; 0x30
 8016290:	b120      	cbz	r0, 801629c <rcl_wait_set_fini+0x114>
 8016292:	9101      	str	r1, [sp, #4]
 8016294:	47c0      	blx	r8
 8016296:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8016298:	9901      	ldr	r1, [sp, #4]
 801629a:	62a7      	str	r7, [r4, #40]	; 0x28
 801629c:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 801629e:	b120      	cbz	r0, 80162aa <rcl_wait_set_fini+0x122>
 80162a0:	47c0      	blx	r8
 80162a2:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80162a4:	2300      	movs	r3, #0
 80162a6:	e9c5 330d 	strd	r3, r3, [r5, #52]	; 0x34
 80162aa:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80162ac:	4628      	mov	r0, r5
 80162ae:	6da9      	ldr	r1, [r5, #88]	; 0x58
 80162b0:	4798      	blx	r3
 80162b2:	2300      	movs	r3, #0
 80162b4:	6323      	str	r3, [r4, #48]	; 0x30
 80162b6:	4630      	mov	r0, r6
 80162b8:	b002      	add	sp, #8
 80162ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80162be:	260b      	movs	r6, #11
 80162c0:	4630      	mov	r0, r6
 80162c2:	b002      	add	sp, #8
 80162c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080162c8 <rcl_wait_set_add_subscription>:
 80162c8:	b318      	cbz	r0, 8016312 <rcl_wait_set_add_subscription+0x4a>
 80162ca:	b538      	push	{r3, r4, r5, lr}
 80162cc:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80162ce:	4604      	mov	r4, r0
 80162d0:	b30b      	cbz	r3, 8016316 <rcl_wait_set_add_subscription+0x4e>
 80162d2:	b319      	cbz	r1, 801631c <rcl_wait_set_add_subscription+0x54>
 80162d4:	681d      	ldr	r5, [r3, #0]
 80162d6:	6840      	ldr	r0, [r0, #4]
 80162d8:	4285      	cmp	r5, r0
 80162da:	d217      	bcs.n	801630c <rcl_wait_set_add_subscription+0x44>
 80162dc:	1c68      	adds	r0, r5, #1
 80162de:	6018      	str	r0, [r3, #0]
 80162e0:	6823      	ldr	r3, [r4, #0]
 80162e2:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 80162e6:	b102      	cbz	r2, 80162ea <rcl_wait_set_add_subscription+0x22>
 80162e8:	6015      	str	r5, [r2, #0]
 80162ea:	4608      	mov	r0, r1
 80162ec:	f7ff fad8 	bl	80158a0 <rcl_subscription_get_rmw_handle>
 80162f0:	b150      	cbz	r0, 8016308 <rcl_wait_set_add_subscription+0x40>
 80162f2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80162f4:	6842      	ldr	r2, [r0, #4]
 80162f6:	2000      	movs	r0, #0
 80162f8:	689b      	ldr	r3, [r3, #8]
 80162fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80162fe:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8016300:	6853      	ldr	r3, [r2, #4]
 8016302:	3301      	adds	r3, #1
 8016304:	6053      	str	r3, [r2, #4]
 8016306:	bd38      	pop	{r3, r4, r5, pc}
 8016308:	2001      	movs	r0, #1
 801630a:	bd38      	pop	{r3, r4, r5, pc}
 801630c:	f240 3086 	movw	r0, #902	; 0x386
 8016310:	bd38      	pop	{r3, r4, r5, pc}
 8016312:	200b      	movs	r0, #11
 8016314:	4770      	bx	lr
 8016316:	f44f 7061 	mov.w	r0, #900	; 0x384
 801631a:	bd38      	pop	{r3, r4, r5, pc}
 801631c:	200b      	movs	r0, #11
 801631e:	bd38      	pop	{r3, r4, r5, pc}

08016320 <rcl_wait_set_clear>:
 8016320:	2800      	cmp	r0, #0
 8016322:	d074      	beq.n	801640e <rcl_wait_set_clear+0xee>
 8016324:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8016326:	b510      	push	{r4, lr}
 8016328:	4604      	mov	r4, r0
 801632a:	2b00      	cmp	r3, #0
 801632c:	d071      	beq.n	8016412 <rcl_wait_set_clear+0xf2>
 801632e:	6800      	ldr	r0, [r0, #0]
 8016330:	b138      	cbz	r0, 8016342 <rcl_wait_set_clear+0x22>
 8016332:	6862      	ldr	r2, [r4, #4]
 8016334:	2100      	movs	r1, #0
 8016336:	0092      	lsls	r2, r2, #2
 8016338:	f006 fa04 	bl	801c744 <memset>
 801633c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801633e:	2200      	movs	r2, #0
 8016340:	601a      	str	r2, [r3, #0]
 8016342:	68a0      	ldr	r0, [r4, #8]
 8016344:	b138      	cbz	r0, 8016356 <rcl_wait_set_clear+0x36>
 8016346:	68e2      	ldr	r2, [r4, #12]
 8016348:	2100      	movs	r1, #0
 801634a:	0092      	lsls	r2, r2, #2
 801634c:	f006 f9fa 	bl	801c744 <memset>
 8016350:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016352:	2200      	movs	r2, #0
 8016354:	60da      	str	r2, [r3, #12]
 8016356:	69a0      	ldr	r0, [r4, #24]
 8016358:	b138      	cbz	r0, 801636a <rcl_wait_set_clear+0x4a>
 801635a:	69e2      	ldr	r2, [r4, #28]
 801635c:	2100      	movs	r1, #0
 801635e:	0092      	lsls	r2, r2, #2
 8016360:	f006 f9f0 	bl	801c744 <memset>
 8016364:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016366:	2200      	movs	r2, #0
 8016368:	619a      	str	r2, [r3, #24]
 801636a:	6a20      	ldr	r0, [r4, #32]
 801636c:	b138      	cbz	r0, 801637e <rcl_wait_set_clear+0x5e>
 801636e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8016370:	2100      	movs	r1, #0
 8016372:	0092      	lsls	r2, r2, #2
 8016374:	f006 f9e6 	bl	801c744 <memset>
 8016378:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801637a:	2200      	movs	r2, #0
 801637c:	625a      	str	r2, [r3, #36]	; 0x24
 801637e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8016380:	b138      	cbz	r0, 8016392 <rcl_wait_set_clear+0x72>
 8016382:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8016384:	2100      	movs	r1, #0
 8016386:	0092      	lsls	r2, r2, #2
 8016388:	f006 f9dc 	bl	801c744 <memset>
 801638c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801638e:	2200      	movs	r2, #0
 8016390:	631a      	str	r2, [r3, #48]	; 0x30
 8016392:	6920      	ldr	r0, [r4, #16]
 8016394:	b138      	cbz	r0, 80163a6 <rcl_wait_set_clear+0x86>
 8016396:	6962      	ldr	r2, [r4, #20]
 8016398:	2100      	movs	r1, #0
 801639a:	0092      	lsls	r2, r2, #2
 801639c:	f006 f9d2 	bl	801c744 <memset>
 80163a0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80163a2:	2200      	movs	r2, #0
 80163a4:	641a      	str	r2, [r3, #64]	; 0x40
 80163a6:	6898      	ldr	r0, [r3, #8]
 80163a8:	b138      	cbz	r0, 80163ba <rcl_wait_set_clear+0x9a>
 80163aa:	685a      	ldr	r2, [r3, #4]
 80163ac:	2100      	movs	r1, #0
 80163ae:	0092      	lsls	r2, r2, #2
 80163b0:	f006 f9c8 	bl	801c744 <memset>
 80163b4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80163b6:	2200      	movs	r2, #0
 80163b8:	605a      	str	r2, [r3, #4]
 80163ba:	6958      	ldr	r0, [r3, #20]
 80163bc:	b138      	cbz	r0, 80163ce <rcl_wait_set_clear+0xae>
 80163be:	691a      	ldr	r2, [r3, #16]
 80163c0:	2100      	movs	r1, #0
 80163c2:	0092      	lsls	r2, r2, #2
 80163c4:	f006 f9be 	bl	801c744 <memset>
 80163c8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80163ca:	2200      	movs	r2, #0
 80163cc:	611a      	str	r2, [r3, #16]
 80163ce:	6a18      	ldr	r0, [r3, #32]
 80163d0:	b138      	cbz	r0, 80163e2 <rcl_wait_set_clear+0xc2>
 80163d2:	69da      	ldr	r2, [r3, #28]
 80163d4:	2100      	movs	r1, #0
 80163d6:	0092      	lsls	r2, r2, #2
 80163d8:	f006 f9b4 	bl	801c744 <memset>
 80163dc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80163de:	2200      	movs	r2, #0
 80163e0:	61da      	str	r2, [r3, #28]
 80163e2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80163e4:	b138      	cbz	r0, 80163f6 <rcl_wait_set_clear+0xd6>
 80163e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80163e8:	2100      	movs	r1, #0
 80163ea:	0092      	lsls	r2, r2, #2
 80163ec:	f006 f9aa 	bl	801c744 <memset>
 80163f0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80163f2:	2200      	movs	r2, #0
 80163f4:	629a      	str	r2, [r3, #40]	; 0x28
 80163f6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80163f8:	b140      	cbz	r0, 801640c <rcl_wait_set_clear+0xec>
 80163fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80163fc:	2100      	movs	r1, #0
 80163fe:	0092      	lsls	r2, r2, #2
 8016400:	f006 f9a0 	bl	801c744 <memset>
 8016404:	2300      	movs	r3, #0
 8016406:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8016408:	4618      	mov	r0, r3
 801640a:	6353      	str	r3, [r2, #52]	; 0x34
 801640c:	bd10      	pop	{r4, pc}
 801640e:	200b      	movs	r0, #11
 8016410:	4770      	bx	lr
 8016412:	f44f 7061 	mov.w	r0, #900	; 0x384
 8016416:	bd10      	pop	{r4, pc}

08016418 <rcl_wait_set_resize>:
 8016418:	2800      	cmp	r0, #0
 801641a:	f000 8180 	beq.w	801671e <rcl_wait_set_resize+0x306>
 801641e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016422:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8016424:	b083      	sub	sp, #12
 8016426:	4605      	mov	r5, r0
 8016428:	2c00      	cmp	r4, #0
 801642a:	f000 817a 	beq.w	8016722 <rcl_wait_set_resize+0x30a>
 801642e:	f04f 0900 	mov.w	r9, #0
 8016432:	461f      	mov	r7, r3
 8016434:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8016438:	4688      	mov	r8, r1
 801643a:	4616      	mov	r6, r2
 801643c:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	; 0x4c
 8016440:	f8c0 9004 	str.w	r9, [r0, #4]
 8016444:	f8c4 9000 	str.w	r9, [r4]
 8016448:	2900      	cmp	r1, #0
 801644a:	f000 80bf 	beq.w	80165cc <rcl_wait_set_resize+0x1b4>
 801644e:	008c      	lsls	r4, r1, #2
 8016450:	4652      	mov	r2, sl
 8016452:	6800      	ldr	r0, [r0, #0]
 8016454:	4621      	mov	r1, r4
 8016456:	9301      	str	r3, [sp, #4]
 8016458:	4798      	blx	r3
 801645a:	9b01      	ldr	r3, [sp, #4]
 801645c:	6028      	str	r0, [r5, #0]
 801645e:	2800      	cmp	r0, #0
 8016460:	f000 80f6 	beq.w	8016650 <rcl_wait_set_resize+0x238>
 8016464:	4622      	mov	r2, r4
 8016466:	4649      	mov	r1, r9
 8016468:	9301      	str	r3, [sp, #4]
 801646a:	f006 f96b 	bl	801c744 <memset>
 801646e:	f8c5 8004 	str.w	r8, [r5, #4]
 8016472:	4652      	mov	r2, sl
 8016474:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 8016478:	4621      	mov	r1, r4
 801647a:	9b01      	ldr	r3, [sp, #4]
 801647c:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8016480:	f8c8 9004 	str.w	r9, [r8, #4]
 8016484:	4798      	blx	r3
 8016486:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8016488:	f8c8 0008 	str.w	r0, [r8, #8]
 801648c:	689b      	ldr	r3, [r3, #8]
 801648e:	2b00      	cmp	r3, #0
 8016490:	f000 814a 	beq.w	8016728 <rcl_wait_set_resize+0x310>
 8016494:	4622      	mov	r2, r4
 8016496:	4649      	mov	r1, r9
 8016498:	4618      	mov	r0, r3
 801649a:	f006 f953 	bl	801c744 <memset>
 801649e:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80164a0:	f04f 0800 	mov.w	r8, #0
 80164a4:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80164a8:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	; 0x4c
 80164ac:	f8c5 800c 	str.w	r8, [r5, #12]
 80164b0:	f8c4 800c 	str.w	r8, [r4, #12]
 80164b4:	2e00      	cmp	r6, #0
 80164b6:	f040 809b 	bne.w	80165f0 <rcl_wait_set_resize+0x1d8>
 80164ba:	68a8      	ldr	r0, [r5, #8]
 80164bc:	b128      	cbz	r0, 80164ca <rcl_wait_set_resize+0xb2>
 80164be:	4649      	mov	r1, r9
 80164c0:	4790      	blx	r2
 80164c2:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80164c4:	60ae      	str	r6, [r5, #8]
 80164c6:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80164ca:	f04f 0800 	mov.w	r8, #0
 80164ce:	19f6      	adds	r6, r6, r7
 80164d0:	f8c4 8010 	str.w	r8, [r4, #16]
 80164d4:	f040 80a2 	bne.w	801661c <rcl_wait_set_resize+0x204>
 80164d8:	6960      	ldr	r0, [r4, #20]
 80164da:	b130      	cbz	r0, 80164ea <rcl_wait_set_resize+0xd2>
 80164dc:	4649      	mov	r1, r9
 80164de:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80164e0:	4798      	blx	r3
 80164e2:	6166      	str	r6, [r4, #20]
 80164e4:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80164e6:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80164ea:	2600      	movs	r6, #0
 80164ec:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 80164f0:	616e      	str	r6, [r5, #20]
 80164f2:	6426      	str	r6, [r4, #64]	; 0x40
 80164f4:	2f00      	cmp	r7, #0
 80164f6:	f040 80af 	bne.w	8016658 <rcl_wait_set_resize+0x240>
 80164fa:	6928      	ldr	r0, [r5, #16]
 80164fc:	b138      	cbz	r0, 801650e <rcl_wait_set_resize+0xf6>
 80164fe:	4649      	mov	r1, r9
 8016500:	47d0      	blx	sl
 8016502:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8016504:	612f      	str	r7, [r5, #16]
 8016506:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801650a:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 801650e:	2600      	movs	r6, #0
 8016510:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016512:	61ee      	str	r6, [r5, #28]
 8016514:	61a6      	str	r6, [r4, #24]
 8016516:	2b00      	cmp	r3, #0
 8016518:	f040 8093 	bne.w	8016642 <rcl_wait_set_resize+0x22a>
 801651c:	69a8      	ldr	r0, [r5, #24]
 801651e:	b120      	cbz	r0, 801652a <rcl_wait_set_resize+0x112>
 8016520:	4649      	mov	r1, r9
 8016522:	47d0      	blx	sl
 8016524:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016526:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8016528:	61ab      	str	r3, [r5, #24]
 801652a:	6a20      	ldr	r0, [r4, #32]
 801652c:	b128      	cbz	r0, 801653a <rcl_wait_set_resize+0x122>
 801652e:	4649      	mov	r1, r9
 8016530:	47d0      	blx	sl
 8016532:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8016534:	2300      	movs	r3, #0
 8016536:	e9c4 3307 	strd	r3, r3, [r4, #28]
 801653a:	2600      	movs	r6, #0
 801653c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801653e:	6da7      	ldr	r7, [r4, #88]	; 0x58
 8016540:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	; 0x4c
 8016544:	626e      	str	r6, [r5, #36]	; 0x24
 8016546:	6266      	str	r6, [r4, #36]	; 0x24
 8016548:	2b00      	cmp	r3, #0
 801654a:	f000 8098 	beq.w	801667e <rcl_wait_set_resize+0x266>
 801654e:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8016552:	463a      	mov	r2, r7
 8016554:	6a28      	ldr	r0, [r5, #32]
 8016556:	4651      	mov	r1, sl
 8016558:	47c8      	blx	r9
 801655a:	6228      	str	r0, [r5, #32]
 801655c:	2800      	cmp	r0, #0
 801655e:	d077      	beq.n	8016650 <rcl_wait_set_resize+0x238>
 8016560:	4652      	mov	r2, sl
 8016562:	4631      	mov	r1, r6
 8016564:	f006 f8ee 	bl	801c744 <memset>
 8016568:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801656a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801656c:	463a      	mov	r2, r7
 801656e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8016570:	4651      	mov	r1, sl
 8016572:	626b      	str	r3, [r5, #36]	; 0x24
 8016574:	62a6      	str	r6, [r4, #40]	; 0x28
 8016576:	47c8      	blx	r9
 8016578:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801657a:	62e0      	str	r0, [r4, #44]	; 0x2c
 801657c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 801657e:	2c00      	cmp	r4, #0
 8016580:	f000 80f2 	beq.w	8016768 <rcl_wait_set_resize+0x350>
 8016584:	4620      	mov	r0, r4
 8016586:	4652      	mov	r2, sl
 8016588:	4631      	mov	r1, r6
 801658a:	f006 f8db 	bl	801c744 <memset>
 801658e:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8016590:	2600      	movs	r6, #0
 8016592:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016594:	6da7      	ldr	r7, [r4, #88]	; 0x58
 8016596:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	; 0x4c
 801659a:	62ee      	str	r6, [r5, #44]	; 0x2c
 801659c:	6326      	str	r6, [r4, #48]	; 0x30
 801659e:	2b00      	cmp	r3, #0
 80165a0:	f040 8097 	bne.w	80166d2 <rcl_wait_set_resize+0x2ba>
 80165a4:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 80165a6:	b120      	cbz	r0, 80165b2 <rcl_wait_set_resize+0x19a>
 80165a8:	4639      	mov	r1, r7
 80165aa:	47c0      	blx	r8
 80165ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80165ae:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80165b0:	62ab      	str	r3, [r5, #40]	; 0x28
 80165b2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80165b4:	2800      	cmp	r0, #0
 80165b6:	d04c      	beq.n	8016652 <rcl_wait_set_resize+0x23a>
 80165b8:	4639      	mov	r1, r7
 80165ba:	47c0      	blx	r8
 80165bc:	2300      	movs	r3, #0
 80165be:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80165c0:	4618      	mov	r0, r3
 80165c2:	e9c2 330d 	strd	r3, r3, [r2, #52]	; 0x34
 80165c6:	b003      	add	sp, #12
 80165c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80165cc:	6800      	ldr	r0, [r0, #0]
 80165ce:	b120      	cbz	r0, 80165da <rcl_wait_set_resize+0x1c2>
 80165d0:	4651      	mov	r1, sl
 80165d2:	47d8      	blx	fp
 80165d4:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80165d6:	f8c5 8000 	str.w	r8, [r5]
 80165da:	68a0      	ldr	r0, [r4, #8]
 80165dc:	2800      	cmp	r0, #0
 80165de:	f43f af5f 	beq.w	80164a0 <rcl_wait_set_resize+0x88>
 80165e2:	4651      	mov	r1, sl
 80165e4:	47d8      	blx	fp
 80165e6:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80165e8:	2300      	movs	r3, #0
 80165ea:	e9c4 3301 	strd	r3, r3, [r4, #4]
 80165ee:	e757      	b.n	80164a0 <rcl_wait_set_resize+0x88>
 80165f0:	00b4      	lsls	r4, r6, #2
 80165f2:	464a      	mov	r2, r9
 80165f4:	68a8      	ldr	r0, [r5, #8]
 80165f6:	4621      	mov	r1, r4
 80165f8:	4798      	blx	r3
 80165fa:	60a8      	str	r0, [r5, #8]
 80165fc:	b340      	cbz	r0, 8016650 <rcl_wait_set_resize+0x238>
 80165fe:	4622      	mov	r2, r4
 8016600:	4641      	mov	r1, r8
 8016602:	f006 f89f 	bl	801c744 <memset>
 8016606:	f04f 0800 	mov.w	r8, #0
 801660a:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801660c:	60ee      	str	r6, [r5, #12]
 801660e:	19f6      	adds	r6, r6, r7
 8016610:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8016614:	f8c4 8010 	str.w	r8, [r4, #16]
 8016618:	f43f af5e 	beq.w	80164d8 <rcl_wait_set_resize+0xc0>
 801661c:	00b6      	lsls	r6, r6, #2
 801661e:	464a      	mov	r2, r9
 8016620:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8016622:	6960      	ldr	r0, [r4, #20]
 8016624:	4631      	mov	r1, r6
 8016626:	4798      	blx	r3
 8016628:	4681      	mov	r9, r0
 801662a:	6160      	str	r0, [r4, #20]
 801662c:	2800      	cmp	r0, #0
 801662e:	f000 8084 	beq.w	801673a <rcl_wait_set_resize+0x322>
 8016632:	4632      	mov	r2, r6
 8016634:	4641      	mov	r1, r8
 8016636:	f006 f885 	bl	801c744 <memset>
 801663a:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801663c:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8016640:	e753      	b.n	80164ea <rcl_wait_set_resize+0xd2>
 8016642:	009c      	lsls	r4, r3, #2
 8016644:	464a      	mov	r2, r9
 8016646:	69a8      	ldr	r0, [r5, #24]
 8016648:	4621      	mov	r1, r4
 801664a:	47c0      	blx	r8
 801664c:	61a8      	str	r0, [r5, #24]
 801664e:	bb40      	cbnz	r0, 80166a2 <rcl_wait_set_resize+0x28a>
 8016650:	200a      	movs	r0, #10
 8016652:	b003      	add	sp, #12
 8016654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016658:	00bc      	lsls	r4, r7, #2
 801665a:	464a      	mov	r2, r9
 801665c:	6928      	ldr	r0, [r5, #16]
 801665e:	4621      	mov	r1, r4
 8016660:	47c0      	blx	r8
 8016662:	6128      	str	r0, [r5, #16]
 8016664:	2800      	cmp	r0, #0
 8016666:	d0f3      	beq.n	8016650 <rcl_wait_set_resize+0x238>
 8016668:	4622      	mov	r2, r4
 801666a:	4631      	mov	r1, r6
 801666c:	f006 f86a 	bl	801c744 <memset>
 8016670:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8016672:	616f      	str	r7, [r5, #20]
 8016674:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8016678:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 801667c:	e747      	b.n	801650e <rcl_wait_set_resize+0xf6>
 801667e:	6a28      	ldr	r0, [r5, #32]
 8016680:	b120      	cbz	r0, 801668c <rcl_wait_set_resize+0x274>
 8016682:	4639      	mov	r1, r7
 8016684:	47c0      	blx	r8
 8016686:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016688:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801668a:	622b      	str	r3, [r5, #32]
 801668c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801668e:	2800      	cmp	r0, #0
 8016690:	f43f af7e 	beq.w	8016590 <rcl_wait_set_resize+0x178>
 8016694:	4639      	mov	r1, r7
 8016696:	47c0      	blx	r8
 8016698:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801669a:	2300      	movs	r3, #0
 801669c:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 80166a0:	e776      	b.n	8016590 <rcl_wait_set_resize+0x178>
 80166a2:	4622      	mov	r2, r4
 80166a4:	4631      	mov	r1, r6
 80166a6:	f006 f84d 	bl	801c744 <memset>
 80166aa:	6b2f      	ldr	r7, [r5, #48]	; 0x30
 80166ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80166ae:	464a      	mov	r2, r9
 80166b0:	6a38      	ldr	r0, [r7, #32]
 80166b2:	4621      	mov	r1, r4
 80166b4:	61eb      	str	r3, [r5, #28]
 80166b6:	61fe      	str	r6, [r7, #28]
 80166b8:	47c0      	blx	r8
 80166ba:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80166bc:	6238      	str	r0, [r7, #32]
 80166be:	6a1f      	ldr	r7, [r3, #32]
 80166c0:	2f00      	cmp	r7, #0
 80166c2:	d04a      	beq.n	801675a <rcl_wait_set_resize+0x342>
 80166c4:	4622      	mov	r2, r4
 80166c6:	4631      	mov	r1, r6
 80166c8:	4638      	mov	r0, r7
 80166ca:	f006 f83b 	bl	801c744 <memset>
 80166ce:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80166d0:	e733      	b.n	801653a <rcl_wait_set_resize+0x122>
 80166d2:	009c      	lsls	r4, r3, #2
 80166d4:	463a      	mov	r2, r7
 80166d6:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 80166d8:	4621      	mov	r1, r4
 80166da:	47c8      	blx	r9
 80166dc:	62a8      	str	r0, [r5, #40]	; 0x28
 80166de:	2800      	cmp	r0, #0
 80166e0:	d0b6      	beq.n	8016650 <rcl_wait_set_resize+0x238>
 80166e2:	4622      	mov	r2, r4
 80166e4:	4631      	mov	r1, r6
 80166e6:	f006 f82d 	bl	801c744 <memset>
 80166ea:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 80166ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80166f0:	463a      	mov	r2, r7
 80166f2:	4621      	mov	r1, r4
 80166f4:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 80166f8:	62eb      	str	r3, [r5, #44]	; 0x2c
 80166fa:	f8ca 6034 	str.w	r6, [sl, #52]	; 0x34
 80166fe:	47c8      	blx	r9
 8016700:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8016702:	f8ca 0038 	str.w	r0, [sl, #56]	; 0x38
 8016706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016708:	2b00      	cmp	r3, #0
 801670a:	d034      	beq.n	8016776 <rcl_wait_set_resize+0x35e>
 801670c:	4622      	mov	r2, r4
 801670e:	4631      	mov	r1, r6
 8016710:	4618      	mov	r0, r3
 8016712:	f006 f817 	bl	801c744 <memset>
 8016716:	4630      	mov	r0, r6
 8016718:	b003      	add	sp, #12
 801671a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801671e:	200b      	movs	r0, #11
 8016720:	4770      	bx	lr
 8016722:	f44f 7061 	mov.w	r0, #900	; 0x384
 8016726:	e794      	b.n	8016652 <rcl_wait_set_resize+0x23a>
 8016728:	6828      	ldr	r0, [r5, #0]
 801672a:	4651      	mov	r1, sl
 801672c:	9301      	str	r3, [sp, #4]
 801672e:	47d8      	blx	fp
 8016730:	9b01      	ldr	r3, [sp, #4]
 8016732:	200a      	movs	r0, #10
 8016734:	e9c5 3300 	strd	r3, r3, [r5]
 8016738:	e78b      	b.n	8016652 <rcl_wait_set_resize+0x23a>
 801673a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801673c:	68a8      	ldr	r0, [r5, #8]
 801673e:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8016740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016742:	4798      	blx	r3
 8016744:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8016746:	6928      	ldr	r0, [r5, #16]
 8016748:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801674a:	6d99      	ldr	r1, [r3, #88]	; 0x58
 801674c:	e9c5 9902 	strd	r9, r9, [r5, #8]
 8016750:	4790      	blx	r2
 8016752:	200a      	movs	r0, #10
 8016754:	e9c5 9904 	strd	r9, r9, [r5, #16]
 8016758:	e77b      	b.n	8016652 <rcl_wait_set_resize+0x23a>
 801675a:	69a8      	ldr	r0, [r5, #24]
 801675c:	4649      	mov	r1, r9
 801675e:	47d0      	blx	sl
 8016760:	200a      	movs	r0, #10
 8016762:	e9c5 7706 	strd	r7, r7, [r5, #24]
 8016766:	e774      	b.n	8016652 <rcl_wait_set_resize+0x23a>
 8016768:	6a28      	ldr	r0, [r5, #32]
 801676a:	4639      	mov	r1, r7
 801676c:	47c0      	blx	r8
 801676e:	200a      	movs	r0, #10
 8016770:	e9c5 4408 	strd	r4, r4, [r5, #32]
 8016774:	e76d      	b.n	8016652 <rcl_wait_set_resize+0x23a>
 8016776:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8016778:	4639      	mov	r1, r7
 801677a:	9301      	str	r3, [sp, #4]
 801677c:	47c0      	blx	r8
 801677e:	9b01      	ldr	r3, [sp, #4]
 8016780:	200a      	movs	r0, #10
 8016782:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 8016786:	e764      	b.n	8016652 <rcl_wait_set_resize+0x23a>

08016788 <rcl_wait_set_init>:
 8016788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801678c:	b085      	sub	sp, #20
 801678e:	4605      	mov	r5, r0
 8016790:	460e      	mov	r6, r1
 8016792:	4617      	mov	r7, r2
 8016794:	a812      	add	r0, sp, #72	; 0x48
 8016796:	4698      	mov	r8, r3
 8016798:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
 801679c:	f7f7 fa5c 	bl	800dc58 <rcutils_allocator_is_valid>
 80167a0:	2d00      	cmp	r5, #0
 80167a2:	d072      	beq.n	801688a <rcl_wait_set_init+0x102>
 80167a4:	f080 0001 	eor.w	r0, r0, #1
 80167a8:	b2c0      	uxtb	r0, r0
 80167aa:	2800      	cmp	r0, #0
 80167ac:	d16d      	bne.n	801688a <rcl_wait_set_init+0x102>
 80167ae:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 80167b2:	f1ba 0f00 	cmp.w	sl, #0
 80167b6:	d004      	beq.n	80167c2 <rcl_wait_set_init+0x3a>
 80167b8:	2464      	movs	r4, #100	; 0x64
 80167ba:	4620      	mov	r0, r4
 80167bc:	b005      	add	sp, #20
 80167be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80167c2:	f1b9 0f00 	cmp.w	r9, #0
 80167c6:	d060      	beq.n	801688a <rcl_wait_set_init+0x102>
 80167c8:	4648      	mov	r0, r9
 80167ca:	f7fd fee5 	bl	8014598 <rcl_context_is_valid>
 80167ce:	2800      	cmp	r0, #0
 80167d0:	d068      	beq.n	80168a4 <rcl_wait_set_init+0x11c>
 80167d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80167d4:	205c      	movs	r0, #92	; 0x5c
 80167d6:	9916      	ldr	r1, [sp, #88]	; 0x58
 80167d8:	4798      	blx	r3
 80167da:	6328      	str	r0, [r5, #48]	; 0x30
 80167dc:	2800      	cmp	r0, #0
 80167de:	d063      	beq.n	80168a8 <rcl_wait_set_init+0x120>
 80167e0:	225c      	movs	r2, #92	; 0x5c
 80167e2:	4651      	mov	r1, sl
 80167e4:	f005 ffae 	bl	801c744 <memset>
 80167e8:	ac12      	add	r4, sp, #72	; 0x48
 80167ea:	f8d5 b030 	ldr.w	fp, [r5, #48]	; 0x30
 80167ee:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 80167f2:	f10b 0c48 	add.w	ip, fp, #72	; 0x48
 80167f6:	f8cb 9044 	str.w	r9, [fp, #68]	; 0x44
 80167fa:	eb03 0e02 	add.w	lr, r3, r2
 80167fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016800:	f8d9 9000 	ldr.w	r9, [r9]
 8016804:	449e      	add	lr, r3
 8016806:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016808:	e9cb aa01 	strd	sl, sl, [fp, #4]
 801680c:	e9cb aa04 	strd	sl, sl, [fp, #16]
 8016810:	e9cb aa07 	strd	sl, sl, [fp, #28]
 8016814:	e9cb aa0a 	strd	sl, sl, [fp, #40]	; 0x28
 8016818:	e9cb aa0d 	strd	sl, sl, [fp, #52]	; 0x34
 801681c:	44be      	add	lr, r7
 801681e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016822:	6823      	ldr	r3, [r4, #0]
 8016824:	eb0e 0146 	add.w	r1, lr, r6, lsl #1
 8016828:	f109 0028 	add.w	r0, r9, #40	; 0x28
 801682c:	f8cc 3000 	str.w	r3, [ip]
 8016830:	f002 ff8e 	bl	8019750 <rmw_create_wait_set>
 8016834:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8016836:	f8cb 003c 	str.w	r0, [fp, #60]	; 0x3c
 801683a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 801683c:	b350      	cbz	r0, 8016894 <rcl_wait_set_init+0x10c>
 801683e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8016840:	4643      	mov	r3, r8
 8016842:	463a      	mov	r2, r7
 8016844:	4631      	mov	r1, r6
 8016846:	9402      	str	r4, [sp, #8]
 8016848:	4628      	mov	r0, r5
 801684a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801684c:	9401      	str	r4, [sp, #4]
 801684e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8016850:	9400      	str	r4, [sp, #0]
 8016852:	f7ff fde1 	bl	8016418 <rcl_wait_set_resize>
 8016856:	4604      	mov	r4, r0
 8016858:	2800      	cmp	r0, #0
 801685a:	d0ae      	beq.n	80167ba <rcl_wait_set_init+0x32>
 801685c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801685e:	bb2b      	cbnz	r3, 80168ac <rcl_wait_set_init+0x124>
 8016860:	2600      	movs	r6, #0
 8016862:	4628      	mov	r0, r5
 8016864:	4633      	mov	r3, r6
 8016866:	4632      	mov	r2, r6
 8016868:	4631      	mov	r1, r6
 801686a:	9600      	str	r6, [sp, #0]
 801686c:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8016870:	f7ff fdd2 	bl	8016418 <rcl_wait_set_resize>
 8016874:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8016876:	2800      	cmp	r0, #0
 8016878:	d09f      	beq.n	80167ba <rcl_wait_set_init+0x32>
 801687a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 801687c:	6d81      	ldr	r1, [r0, #88]	; 0x58
 801687e:	4798      	blx	r3
 8016880:	4620      	mov	r0, r4
 8016882:	632e      	str	r6, [r5, #48]	; 0x30
 8016884:	b005      	add	sp, #20
 8016886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801688a:	240b      	movs	r4, #11
 801688c:	4620      	mov	r0, r4
 801688e:	b005      	add	sp, #20
 8016890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016894:	2401      	movs	r4, #1
 8016896:	f002 ff65 	bl	8019764 <rmw_destroy_wait_set>
 801689a:	2800      	cmp	r0, #0
 801689c:	bf18      	it	ne
 801689e:	f44f 7461 	movne.w	r4, #900	; 0x384
 80168a2:	e7dd      	b.n	8016860 <rcl_wait_set_init+0xd8>
 80168a4:	2465      	movs	r4, #101	; 0x65
 80168a6:	e788      	b.n	80167ba <rcl_wait_set_init+0x32>
 80168a8:	240a      	movs	r4, #10
 80168aa:	e786      	b.n	80167ba <rcl_wait_set_init+0x32>
 80168ac:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80168ae:	e7f2      	b.n	8016896 <rcl_wait_set_init+0x10e>

080168b0 <rcl_wait_set_add_guard_condition>:
 80168b0:	b318      	cbz	r0, 80168fa <rcl_wait_set_add_guard_condition+0x4a>
 80168b2:	b538      	push	{r3, r4, r5, lr}
 80168b4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80168b6:	4604      	mov	r4, r0
 80168b8:	b30b      	cbz	r3, 80168fe <rcl_wait_set_add_guard_condition+0x4e>
 80168ba:	b319      	cbz	r1, 8016904 <rcl_wait_set_add_guard_condition+0x54>
 80168bc:	68dd      	ldr	r5, [r3, #12]
 80168be:	68c0      	ldr	r0, [r0, #12]
 80168c0:	4285      	cmp	r5, r0
 80168c2:	d217      	bcs.n	80168f4 <rcl_wait_set_add_guard_condition+0x44>
 80168c4:	1c68      	adds	r0, r5, #1
 80168c6:	60d8      	str	r0, [r3, #12]
 80168c8:	68a3      	ldr	r3, [r4, #8]
 80168ca:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 80168ce:	b102      	cbz	r2, 80168d2 <rcl_wait_set_add_guard_condition+0x22>
 80168d0:	6015      	str	r5, [r2, #0]
 80168d2:	4608      	mov	r0, r1
 80168d4:	f004 ff96 	bl	801b804 <rcl_guard_condition_get_rmw_handle>
 80168d8:	b150      	cbz	r0, 80168f0 <rcl_wait_set_add_guard_condition+0x40>
 80168da:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80168dc:	6842      	ldr	r2, [r0, #4]
 80168de:	2000      	movs	r0, #0
 80168e0:	695b      	ldr	r3, [r3, #20]
 80168e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80168e6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80168e8:	6913      	ldr	r3, [r2, #16]
 80168ea:	3301      	adds	r3, #1
 80168ec:	6113      	str	r3, [r2, #16]
 80168ee:	bd38      	pop	{r3, r4, r5, pc}
 80168f0:	2001      	movs	r0, #1
 80168f2:	bd38      	pop	{r3, r4, r5, pc}
 80168f4:	f240 3086 	movw	r0, #902	; 0x386
 80168f8:	bd38      	pop	{r3, r4, r5, pc}
 80168fa:	200b      	movs	r0, #11
 80168fc:	4770      	bx	lr
 80168fe:	f44f 7061 	mov.w	r0, #900	; 0x384
 8016902:	bd38      	pop	{r3, r4, r5, pc}
 8016904:	200b      	movs	r0, #11
 8016906:	bd38      	pop	{r3, r4, r5, pc}

08016908 <rcl_wait_set_add_timer>:
 8016908:	b328      	cbz	r0, 8016956 <rcl_wait_set_add_timer+0x4e>
 801690a:	b538      	push	{r3, r4, r5, lr}
 801690c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801690e:	4604      	mov	r4, r0
 8016910:	b31b      	cbz	r3, 801695a <rcl_wait_set_add_timer+0x52>
 8016912:	b329      	cbz	r1, 8016960 <rcl_wait_set_add_timer+0x58>
 8016914:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8016916:	6965      	ldr	r5, [r4, #20]
 8016918:	42a8      	cmp	r0, r5
 801691a:	d219      	bcs.n	8016950 <rcl_wait_set_add_timer+0x48>
 801691c:	1c45      	adds	r5, r0, #1
 801691e:	641d      	str	r5, [r3, #64]	; 0x40
 8016920:	6923      	ldr	r3, [r4, #16]
 8016922:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 8016926:	b102      	cbz	r2, 801692a <rcl_wait_set_add_timer+0x22>
 8016928:	6010      	str	r0, [r2, #0]
 801692a:	4608      	mov	r0, r1
 801692c:	f7ff fb9a 	bl	8016064 <rcl_timer_get_guard_condition>
 8016930:	b168      	cbz	r0, 801694e <rcl_wait_set_add_timer+0x46>
 8016932:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8016934:	68e3      	ldr	r3, [r4, #12]
 8016936:	6c15      	ldr	r5, [r2, #64]	; 0x40
 8016938:	3b01      	subs	r3, #1
 801693a:	441d      	add	r5, r3
 801693c:	f004 ff62 	bl	801b804 <rcl_guard_condition_get_rmw_handle>
 8016940:	b180      	cbz	r0, 8016964 <rcl_wait_set_add_timer+0x5c>
 8016942:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016944:	6842      	ldr	r2, [r0, #4]
 8016946:	2000      	movs	r0, #0
 8016948:	695b      	ldr	r3, [r3, #20]
 801694a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801694e:	bd38      	pop	{r3, r4, r5, pc}
 8016950:	f240 3086 	movw	r0, #902	; 0x386
 8016954:	bd38      	pop	{r3, r4, r5, pc}
 8016956:	200b      	movs	r0, #11
 8016958:	4770      	bx	lr
 801695a:	f44f 7061 	mov.w	r0, #900	; 0x384
 801695e:	bd38      	pop	{r3, r4, r5, pc}
 8016960:	200b      	movs	r0, #11
 8016962:	bd38      	pop	{r3, r4, r5, pc}
 8016964:	2001      	movs	r0, #1
 8016966:	bd38      	pop	{r3, r4, r5, pc}

08016968 <rcl_wait_set_add_client>:
 8016968:	b318      	cbz	r0, 80169b2 <rcl_wait_set_add_client+0x4a>
 801696a:	b538      	push	{r3, r4, r5, lr}
 801696c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801696e:	4604      	mov	r4, r0
 8016970:	b30b      	cbz	r3, 80169b6 <rcl_wait_set_add_client+0x4e>
 8016972:	b319      	cbz	r1, 80169bc <rcl_wait_set_add_client+0x54>
 8016974:	699d      	ldr	r5, [r3, #24]
 8016976:	69c0      	ldr	r0, [r0, #28]
 8016978:	4285      	cmp	r5, r0
 801697a:	d217      	bcs.n	80169ac <rcl_wait_set_add_client+0x44>
 801697c:	1c68      	adds	r0, r5, #1
 801697e:	6198      	str	r0, [r3, #24]
 8016980:	69a3      	ldr	r3, [r4, #24]
 8016982:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8016986:	b102      	cbz	r2, 801698a <rcl_wait_set_add_client+0x22>
 8016988:	6015      	str	r5, [r2, #0]
 801698a:	4608      	mov	r0, r1
 801698c:	f7fd fd1a 	bl	80143c4 <rcl_client_get_rmw_handle>
 8016990:	b150      	cbz	r0, 80169a8 <rcl_wait_set_add_client+0x40>
 8016992:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016994:	6842      	ldr	r2, [r0, #4]
 8016996:	2000      	movs	r0, #0
 8016998:	6a1b      	ldr	r3, [r3, #32]
 801699a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801699e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80169a0:	69d3      	ldr	r3, [r2, #28]
 80169a2:	3301      	adds	r3, #1
 80169a4:	61d3      	str	r3, [r2, #28]
 80169a6:	bd38      	pop	{r3, r4, r5, pc}
 80169a8:	2001      	movs	r0, #1
 80169aa:	bd38      	pop	{r3, r4, r5, pc}
 80169ac:	f240 3086 	movw	r0, #902	; 0x386
 80169b0:	bd38      	pop	{r3, r4, r5, pc}
 80169b2:	200b      	movs	r0, #11
 80169b4:	4770      	bx	lr
 80169b6:	f44f 7061 	mov.w	r0, #900	; 0x384
 80169ba:	bd38      	pop	{r3, r4, r5, pc}
 80169bc:	200b      	movs	r0, #11
 80169be:	bd38      	pop	{r3, r4, r5, pc}

080169c0 <rcl_wait_set_add_service>:
 80169c0:	b318      	cbz	r0, 8016a0a <rcl_wait_set_add_service+0x4a>
 80169c2:	b538      	push	{r3, r4, r5, lr}
 80169c4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80169c6:	4604      	mov	r4, r0
 80169c8:	b30b      	cbz	r3, 8016a0e <rcl_wait_set_add_service+0x4e>
 80169ca:	b319      	cbz	r1, 8016a14 <rcl_wait_set_add_service+0x54>
 80169cc:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 80169ce:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80169d0:	4285      	cmp	r5, r0
 80169d2:	d217      	bcs.n	8016a04 <rcl_wait_set_add_service+0x44>
 80169d4:	1c68      	adds	r0, r5, #1
 80169d6:	6258      	str	r0, [r3, #36]	; 0x24
 80169d8:	6a23      	ldr	r3, [r4, #32]
 80169da:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 80169de:	b102      	cbz	r2, 80169e2 <rcl_wait_set_add_service+0x22>
 80169e0:	6015      	str	r5, [r2, #0]
 80169e2:	4608      	mov	r0, r1
 80169e4:	f7fe fcf2 	bl	80153cc <rcl_service_get_rmw_handle>
 80169e8:	b150      	cbz	r0, 8016a00 <rcl_wait_set_add_service+0x40>
 80169ea:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80169ec:	6842      	ldr	r2, [r0, #4]
 80169ee:	2000      	movs	r0, #0
 80169f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80169f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80169f6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80169f8:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80169fa:	3301      	adds	r3, #1
 80169fc:	6293      	str	r3, [r2, #40]	; 0x28
 80169fe:	bd38      	pop	{r3, r4, r5, pc}
 8016a00:	2001      	movs	r0, #1
 8016a02:	bd38      	pop	{r3, r4, r5, pc}
 8016a04:	f240 3086 	movw	r0, #902	; 0x386
 8016a08:	bd38      	pop	{r3, r4, r5, pc}
 8016a0a:	200b      	movs	r0, #11
 8016a0c:	4770      	bx	lr
 8016a0e:	f44f 7061 	mov.w	r0, #900	; 0x384
 8016a12:	bd38      	pop	{r3, r4, r5, pc}
 8016a14:	200b      	movs	r0, #11
 8016a16:	bd38      	pop	{r3, r4, r5, pc}

08016a18 <rcl_wait>:
 8016a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a1c:	ed2d 8b02 	vpush	{d8}
 8016a20:	b08d      	sub	sp, #52	; 0x34
 8016a22:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8016a26:	2800      	cmp	r0, #0
 8016a28:	f000 814f 	beq.w	8016cca <rcl_wait+0x2b2>
 8016a2c:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8016a2e:	4605      	mov	r5, r0
 8016a30:	2e00      	cmp	r6, #0
 8016a32:	f000 811a 	beq.w	8016c6a <rcl_wait+0x252>
 8016a36:	6843      	ldr	r3, [r0, #4]
 8016a38:	b983      	cbnz	r3, 8016a5c <rcl_wait+0x44>
 8016a3a:	68eb      	ldr	r3, [r5, #12]
 8016a3c:	b973      	cbnz	r3, 8016a5c <rcl_wait+0x44>
 8016a3e:	696b      	ldr	r3, [r5, #20]
 8016a40:	b963      	cbnz	r3, 8016a5c <rcl_wait+0x44>
 8016a42:	69eb      	ldr	r3, [r5, #28]
 8016a44:	b953      	cbnz	r3, 8016a5c <rcl_wait+0x44>
 8016a46:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8016a48:	b943      	cbnz	r3, 8016a5c <rcl_wait+0x44>
 8016a4a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8016a4c:	b933      	cbnz	r3, 8016a5c <rcl_wait+0x44>
 8016a4e:	f240 3085 	movw	r0, #901	; 0x385
 8016a52:	b00d      	add	sp, #52	; 0x34
 8016a54:	ecbd 8b02 	vpop	{d8}
 8016a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a5c:	9b04      	ldr	r3, [sp, #16]
 8016a5e:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8016a60:	2b01      	cmp	r3, #1
 8016a62:	9b05      	ldr	r3, [sp, #20]
 8016a64:	f173 0300 	sbcs.w	r3, r3, #0
 8016a68:	f2c0 80f8 	blt.w	8016c5c <rcl_wait+0x244>
 8016a6c:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8016a70:	2a00      	cmp	r2, #0
 8016a72:	f000 810f 	beq.w	8016c94 <rcl_wait+0x27c>
 8016a76:	2400      	movs	r4, #0
 8016a78:	4613      	mov	r3, r2
 8016a7a:	f240 3921 	movw	r9, #801	; 0x321
 8016a7e:	4632      	mov	r2, r6
 8016a80:	46a2      	mov	sl, r4
 8016a82:	46a3      	mov	fp, r4
 8016a84:	ed9f 8b98 	vldr	d8, [pc, #608]	; 8016ce8 <rcl_wait+0x2d0>
 8016a88:	e014      	b.n	8016ab4 <rcl_wait+0x9c>
 8016a8a:	2800      	cmp	r0, #0
 8016a8c:	d1e1      	bne.n	8016a52 <rcl_wait+0x3a>
 8016a8e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016a92:	4542      	cmp	r2, r8
 8016a94:	eb73 0107 	sbcs.w	r1, r3, r7
 8016a98:	da03      	bge.n	8016aa2 <rcl_wait+0x8a>
 8016a9a:	4690      	mov	r8, r2
 8016a9c:	461f      	mov	r7, r3
 8016a9e:	f04f 0b01 	mov.w	fp, #1
 8016aa2:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8016aa4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8016aa6:	3401      	adds	r4, #1
 8016aa8:	f14a 0a00 	adc.w	sl, sl, #0
 8016aac:	429c      	cmp	r4, r3
 8016aae:	f17a 0100 	sbcs.w	r1, sl, #0
 8016ab2:	d228      	bcs.n	8016b06 <rcl_wait+0xee>
 8016ab4:	6928      	ldr	r0, [r5, #16]
 8016ab6:	a908      	add	r1, sp, #32
 8016ab8:	00a6      	lsls	r6, r4, #2
 8016aba:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8016abe:	2800      	cmp	r0, #0
 8016ac0:	d0f1      	beq.n	8016aa6 <rcl_wait+0x8e>
 8016ac2:	68eb      	ldr	r3, [r5, #12]
 8016ac4:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8016ac8:	4423      	add	r3, r4
 8016aca:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8016ace:	f1be 0f00 	cmp.w	lr, #0
 8016ad2:	d006      	beq.n	8016ae2 <rcl_wait+0xca>
 8016ad4:	6913      	ldr	r3, [r2, #16]
 8016ad6:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 8016ada:	3301      	adds	r3, #1
 8016adc:	6113      	str	r3, [r2, #16]
 8016ade:	692b      	ldr	r3, [r5, #16]
 8016ae0:	5998      	ldr	r0, [r3, r6]
 8016ae2:	ed8d 8b08 	vstr	d8, [sp, #32]
 8016ae6:	f7ff fa8b 	bl	8016000 <rcl_timer_get_time_until_next_call>
 8016aea:	4548      	cmp	r0, r9
 8016aec:	d1cd      	bne.n	8016a8a <rcl_wait+0x72>
 8016aee:	692b      	ldr	r3, [r5, #16]
 8016af0:	2200      	movs	r2, #0
 8016af2:	3401      	adds	r4, #1
 8016af4:	519a      	str	r2, [r3, r6]
 8016af6:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8016af8:	f14a 0a00 	adc.w	sl, sl, #0
 8016afc:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8016afe:	429c      	cmp	r4, r3
 8016b00:	f17a 0100 	sbcs.w	r1, sl, #0
 8016b04:	d3d6      	bcc.n	8016ab4 <rcl_wait+0x9c>
 8016b06:	4659      	mov	r1, fp
 8016b08:	4616      	mov	r6, r2
 8016b0a:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8016b0e:	4313      	orrs	r3, r2
 8016b10:	f040 80b4 	bne.w	8016c7c <rcl_wait+0x264>
 8016b14:	2300      	movs	r3, #0
 8016b16:	2200      	movs	r2, #0
 8016b18:	460c      	mov	r4, r1
 8016b1a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8016b1e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8016b22:	ab08      	add	r3, sp, #32
 8016b24:	9302      	str	r3, [sp, #8]
 8016b26:	f106 0334 	add.w	r3, r6, #52	; 0x34
 8016b2a:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 8016b2c:	f106 0110 	add.w	r1, r6, #16
 8016b30:	9300      	str	r3, [sp, #0]
 8016b32:	1d30      	adds	r0, r6, #4
 8016b34:	f106 031c 	add.w	r3, r6, #28
 8016b38:	9201      	str	r2, [sp, #4]
 8016b3a:	f106 0228 	add.w	r2, r6, #40	; 0x28
 8016b3e:	f002 fca3 	bl	8019488 <rmw_wait>
 8016b42:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8016b44:	4680      	mov	r8, r0
 8016b46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8016b48:	b1e2      	cbz	r2, 8016b84 <rcl_wait+0x16c>
 8016b4a:	f04f 0900 	mov.w	r9, #0
 8016b4e:	464f      	mov	r7, r9
 8016b50:	692a      	ldr	r2, [r5, #16]
 8016b52:	f10d 011f 	add.w	r1, sp, #31
 8016b56:	ea4f 0689 	mov.w	r6, r9, lsl #2
 8016b5a:	f852 0029 	ldr.w	r0, [r2, r9, lsl #2]
 8016b5e:	b160      	cbz	r0, 8016b7a <rcl_wait+0x162>
 8016b60:	f88d 701f 	strb.w	r7, [sp, #31]
 8016b64:	f7ff fa10 	bl	8015f88 <rcl_timer_is_ready>
 8016b68:	2800      	cmp	r0, #0
 8016b6a:	f47f af72 	bne.w	8016a52 <rcl_wait+0x3a>
 8016b6e:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8016b72:	b90b      	cbnz	r3, 8016b78 <rcl_wait+0x160>
 8016b74:	692a      	ldr	r2, [r5, #16]
 8016b76:	5193      	str	r3, [r2, r6]
 8016b78:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8016b7a:	f109 0901 	add.w	r9, r9, #1
 8016b7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8016b80:	454a      	cmp	r2, r9
 8016b82:	d8e5      	bhi.n	8016b50 <rcl_wait+0x138>
 8016b84:	f038 0002 	bics.w	r0, r8, #2
 8016b88:	d176      	bne.n	8016c78 <rcl_wait+0x260>
 8016b8a:	686f      	ldr	r7, [r5, #4]
 8016b8c:	b17f      	cbz	r7, 8016bae <rcl_wait+0x196>
 8016b8e:	4602      	mov	r2, r0
 8016b90:	e002      	b.n	8016b98 <rcl_wait+0x180>
 8016b92:	3201      	adds	r2, #1
 8016b94:	42ba      	cmp	r2, r7
 8016b96:	d00a      	beq.n	8016bae <rcl_wait+0x196>
 8016b98:	6899      	ldr	r1, [r3, #8]
 8016b9a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8016b9e:	2900      	cmp	r1, #0
 8016ba0:	d1f7      	bne.n	8016b92 <rcl_wait+0x17a>
 8016ba2:	682e      	ldr	r6, [r5, #0]
 8016ba4:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8016ba8:	3201      	adds	r2, #1
 8016baa:	42ba      	cmp	r2, r7
 8016bac:	d1f4      	bne.n	8016b98 <rcl_wait+0x180>
 8016bae:	68ef      	ldr	r7, [r5, #12]
 8016bb0:	b17f      	cbz	r7, 8016bd2 <rcl_wait+0x1ba>
 8016bb2:	2200      	movs	r2, #0
 8016bb4:	e002      	b.n	8016bbc <rcl_wait+0x1a4>
 8016bb6:	3201      	adds	r2, #1
 8016bb8:	42ba      	cmp	r2, r7
 8016bba:	d00a      	beq.n	8016bd2 <rcl_wait+0x1ba>
 8016bbc:	6959      	ldr	r1, [r3, #20]
 8016bbe:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8016bc2:	2900      	cmp	r1, #0
 8016bc4:	d1f7      	bne.n	8016bb6 <rcl_wait+0x19e>
 8016bc6:	68ae      	ldr	r6, [r5, #8]
 8016bc8:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8016bcc:	3201      	adds	r2, #1
 8016bce:	42ba      	cmp	r2, r7
 8016bd0:	d1f4      	bne.n	8016bbc <rcl_wait+0x1a4>
 8016bd2:	69ef      	ldr	r7, [r5, #28]
 8016bd4:	b17f      	cbz	r7, 8016bf6 <rcl_wait+0x1de>
 8016bd6:	2200      	movs	r2, #0
 8016bd8:	e002      	b.n	8016be0 <rcl_wait+0x1c8>
 8016bda:	3201      	adds	r2, #1
 8016bdc:	42ba      	cmp	r2, r7
 8016bde:	d00a      	beq.n	8016bf6 <rcl_wait+0x1de>
 8016be0:	6a19      	ldr	r1, [r3, #32]
 8016be2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8016be6:	2900      	cmp	r1, #0
 8016be8:	d1f7      	bne.n	8016bda <rcl_wait+0x1c2>
 8016bea:	69ae      	ldr	r6, [r5, #24]
 8016bec:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8016bf0:	3201      	adds	r2, #1
 8016bf2:	42ba      	cmp	r2, r7
 8016bf4:	d1f4      	bne.n	8016be0 <rcl_wait+0x1c8>
 8016bf6:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 8016bf8:	b17f      	cbz	r7, 8016c1a <rcl_wait+0x202>
 8016bfa:	2200      	movs	r2, #0
 8016bfc:	e002      	b.n	8016c04 <rcl_wait+0x1ec>
 8016bfe:	3201      	adds	r2, #1
 8016c00:	42ba      	cmp	r2, r7
 8016c02:	d00a      	beq.n	8016c1a <rcl_wait+0x202>
 8016c04:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8016c06:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8016c0a:	2900      	cmp	r1, #0
 8016c0c:	d1f7      	bne.n	8016bfe <rcl_wait+0x1e6>
 8016c0e:	6a2e      	ldr	r6, [r5, #32]
 8016c10:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8016c14:	3201      	adds	r2, #1
 8016c16:	42ba      	cmp	r2, r7
 8016c18:	d1f4      	bne.n	8016c04 <rcl_wait+0x1ec>
 8016c1a:	6aef      	ldr	r7, [r5, #44]	; 0x2c
 8016c1c:	b17f      	cbz	r7, 8016c3e <rcl_wait+0x226>
 8016c1e:	2200      	movs	r2, #0
 8016c20:	e002      	b.n	8016c28 <rcl_wait+0x210>
 8016c22:	3201      	adds	r2, #1
 8016c24:	42ba      	cmp	r2, r7
 8016c26:	d00a      	beq.n	8016c3e <rcl_wait+0x226>
 8016c28:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8016c2a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8016c2e:	2900      	cmp	r1, #0
 8016c30:	d1f7      	bne.n	8016c22 <rcl_wait+0x20a>
 8016c32:	6aae      	ldr	r6, [r5, #40]	; 0x28
 8016c34:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8016c38:	3201      	adds	r2, #1
 8016c3a:	42ba      	cmp	r2, r7
 8016c3c:	d1f4      	bne.n	8016c28 <rcl_wait+0x210>
 8016c3e:	f1b8 0f02 	cmp.w	r8, #2
 8016c42:	f47f af06 	bne.w	8016a52 <rcl_wait+0x3a>
 8016c46:	f084 0301 	eor.w	r3, r4, #1
 8016c4a:	b2db      	uxtb	r3, r3
 8016c4c:	2b00      	cmp	r3, #0
 8016c4e:	bf18      	it	ne
 8016c50:	2002      	movne	r0, #2
 8016c52:	b00d      	add	sp, #52	; 0x34
 8016c54:	ecbd 8b02 	vpop	{d8}
 8016c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c5c:	2a00      	cmp	r2, #0
 8016c5e:	d03a      	beq.n	8016cd6 <rcl_wait+0x2be>
 8016c60:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8016c64:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 8016c68:	e705      	b.n	8016a76 <rcl_wait+0x5e>
 8016c6a:	f44f 7061 	mov.w	r0, #900	; 0x384
 8016c6e:	b00d      	add	sp, #52	; 0x34
 8016c70:	ecbd 8b02 	vpop	{d8}
 8016c74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c78:	2001      	movs	r0, #1
 8016c7a:	e6ea      	b.n	8016a52 <rcl_wait+0x3a>
 8016c7c:	9b04      	ldr	r3, [sp, #16]
 8016c7e:	460c      	mov	r4, r1
 8016c80:	2b01      	cmp	r3, #1
 8016c82:	9b05      	ldr	r3, [sp, #20]
 8016c84:	f173 0300 	sbcs.w	r3, r3, #0
 8016c88:	bfa8      	it	ge
 8016c8a:	f044 0401 	orrge.w	r4, r4, #1
 8016c8e:	b914      	cbnz	r4, 8016c96 <rcl_wait+0x27e>
 8016c90:	4623      	mov	r3, r4
 8016c92:	e747      	b.n	8016b24 <rcl_wait+0x10c>
 8016c94:	4611      	mov	r1, r2
 8016c96:	2f00      	cmp	r7, #0
 8016c98:	da02      	bge.n	8016ca0 <rcl_wait+0x288>
 8016c9a:	f04f 0800 	mov.w	r8, #0
 8016c9e:	4647      	mov	r7, r8
 8016ca0:	460c      	mov	r4, r1
 8016ca2:	4640      	mov	r0, r8
 8016ca4:	4639      	mov	r1, r7
 8016ca6:	a312      	add	r3, pc, #72	; (adr r3, 8016cf0 <rcl_wait+0x2d8>)
 8016ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016cac:	f7e9 fb30 	bl	8000310 <__aeabi_ldivmod>
 8016cb0:	a30f      	add	r3, pc, #60	; (adr r3, 8016cf0 <rcl_wait+0x2d8>)
 8016cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016cb6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8016cba:	4640      	mov	r0, r8
 8016cbc:	4639      	mov	r1, r7
 8016cbe:	f7e9 fb27 	bl	8000310 <__aeabi_ldivmod>
 8016cc2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8016cc6:	ab08      	add	r3, sp, #32
 8016cc8:	e72c      	b.n	8016b24 <rcl_wait+0x10c>
 8016cca:	200b      	movs	r0, #11
 8016ccc:	b00d      	add	sp, #52	; 0x34
 8016cce:	ecbd 8b02 	vpop	{d8}
 8016cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016cd6:	4611      	mov	r1, r2
 8016cd8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8016cdc:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 8016ce0:	e713      	b.n	8016b0a <rcl_wait+0xf2>
 8016ce2:	bf00      	nop
 8016ce4:	f3af 8000 	nop.w
 8016ce8:	ffffffff 	.word	0xffffffff
 8016cec:	7fffffff 	.word	0x7fffffff
 8016cf0:	3b9aca00 	.word	0x3b9aca00
 8016cf4:	00000000 	.word	0x00000000

08016cf8 <rcl_action_take_goal_response>:
 8016cf8:	2800      	cmp	r0, #0
 8016cfa:	d039      	beq.n	8016d70 <rcl_action_take_goal_response+0x78>
 8016cfc:	b570      	push	{r4, r5, r6, lr}
 8016cfe:	4604      	mov	r4, r0
 8016d00:	6800      	ldr	r0, [r0, #0]
 8016d02:	b380      	cbz	r0, 8016d66 <rcl_action_take_goal_response+0x6e>
 8016d04:	460e      	mov	r6, r1
 8016d06:	4615      	mov	r5, r2
 8016d08:	f7fd fc1e 	bl	8014548 <rcl_client_is_valid>
 8016d0c:	b330      	cbz	r0, 8016d5c <rcl_action_take_goal_response+0x64>
 8016d0e:	6820      	ldr	r0, [r4, #0]
 8016d10:	3004      	adds	r0, #4
 8016d12:	f7fd fc19 	bl	8014548 <rcl_client_is_valid>
 8016d16:	b308      	cbz	r0, 8016d5c <rcl_action_take_goal_response+0x64>
 8016d18:	6820      	ldr	r0, [r4, #0]
 8016d1a:	3008      	adds	r0, #8
 8016d1c:	f7fd fc14 	bl	8014548 <rcl_client_is_valid>
 8016d20:	b1e0      	cbz	r0, 8016d5c <rcl_action_take_goal_response+0x64>
 8016d22:	6820      	ldr	r0, [r4, #0]
 8016d24:	300c      	adds	r0, #12
 8016d26:	f7fe fdc1 	bl	80158ac <rcl_subscription_is_valid>
 8016d2a:	b1b8      	cbz	r0, 8016d5c <rcl_action_take_goal_response+0x64>
 8016d2c:	6820      	ldr	r0, [r4, #0]
 8016d2e:	3010      	adds	r0, #16
 8016d30:	f7fe fdbc 	bl	80158ac <rcl_subscription_is_valid>
 8016d34:	b190      	cbz	r0, 8016d5c <rcl_action_take_goal_response+0x64>
 8016d36:	b1cd      	cbz	r5, 8016d6c <rcl_action_take_goal_response+0x74>
 8016d38:	b1c6      	cbz	r6, 8016d6c <rcl_action_take_goal_response+0x74>
 8016d3a:	462a      	mov	r2, r5
 8016d3c:	4631      	mov	r1, r6
 8016d3e:	6820      	ldr	r0, [r4, #0]
 8016d40:	f7fd fb9a 	bl	8014478 <rcl_take_response>
 8016d44:	b148      	cbz	r0, 8016d5a <rcl_action_take_goal_response+0x62>
 8016d46:	280a      	cmp	r0, #10
 8016d48:	d007      	beq.n	8016d5a <rcl_action_take_goal_response+0x62>
 8016d4a:	f240 12f5 	movw	r2, #501	; 0x1f5
 8016d4e:	f640 0337 	movw	r3, #2103	; 0x837
 8016d52:	4290      	cmp	r0, r2
 8016d54:	bf0c      	ite	eq
 8016d56:	4618      	moveq	r0, r3
 8016d58:	2001      	movne	r0, #1
 8016d5a:	bd70      	pop	{r4, r5, r6, pc}
 8016d5c:	f7f6 ffa0 	bl	800dca0 <rcutils_reset_error>
 8016d60:	f640 0036 	movw	r0, #2102	; 0x836
 8016d64:	bd70      	pop	{r4, r5, r6, pc}
 8016d66:	f640 0036 	movw	r0, #2102	; 0x836
 8016d6a:	bd70      	pop	{r4, r5, r6, pc}
 8016d6c:	200b      	movs	r0, #11
 8016d6e:	bd70      	pop	{r4, r5, r6, pc}
 8016d70:	f640 0036 	movw	r0, #2102	; 0x836
 8016d74:	4770      	bx	lr
 8016d76:	bf00      	nop

08016d78 <rcl_action_send_result_request>:
 8016d78:	b390      	cbz	r0, 8016de0 <rcl_action_send_result_request+0x68>
 8016d7a:	b570      	push	{r4, r5, r6, lr}
 8016d7c:	4604      	mov	r4, r0
 8016d7e:	6800      	ldr	r0, [r0, #0]
 8016d80:	b348      	cbz	r0, 8016dd6 <rcl_action_send_result_request+0x5e>
 8016d82:	460e      	mov	r6, r1
 8016d84:	4615      	mov	r5, r2
 8016d86:	f7fd fbdf 	bl	8014548 <rcl_client_is_valid>
 8016d8a:	b1f8      	cbz	r0, 8016dcc <rcl_action_send_result_request+0x54>
 8016d8c:	6820      	ldr	r0, [r4, #0]
 8016d8e:	3004      	adds	r0, #4
 8016d90:	f7fd fbda 	bl	8014548 <rcl_client_is_valid>
 8016d94:	b1d0      	cbz	r0, 8016dcc <rcl_action_send_result_request+0x54>
 8016d96:	6820      	ldr	r0, [r4, #0]
 8016d98:	3008      	adds	r0, #8
 8016d9a:	f7fd fbd5 	bl	8014548 <rcl_client_is_valid>
 8016d9e:	b1a8      	cbz	r0, 8016dcc <rcl_action_send_result_request+0x54>
 8016da0:	6820      	ldr	r0, [r4, #0]
 8016da2:	300c      	adds	r0, #12
 8016da4:	f7fe fd82 	bl	80158ac <rcl_subscription_is_valid>
 8016da8:	b180      	cbz	r0, 8016dcc <rcl_action_send_result_request+0x54>
 8016daa:	6820      	ldr	r0, [r4, #0]
 8016dac:	3010      	adds	r0, #16
 8016dae:	f7fe fd7d 	bl	80158ac <rcl_subscription_is_valid>
 8016db2:	b158      	cbz	r0, 8016dcc <rcl_action_send_result_request+0x54>
 8016db4:	b195      	cbz	r5, 8016ddc <rcl_action_send_result_request+0x64>
 8016db6:	b18e      	cbz	r6, 8016ddc <rcl_action_send_result_request+0x64>
 8016db8:	6820      	ldr	r0, [r4, #0]
 8016dba:	462a      	mov	r2, r5
 8016dbc:	4631      	mov	r1, r6
 8016dbe:	3008      	adds	r0, #8
 8016dc0:	f7fd fb06 	bl	80143d0 <rcl_send_request>
 8016dc4:	3800      	subs	r0, #0
 8016dc6:	bf18      	it	ne
 8016dc8:	2001      	movne	r0, #1
 8016dca:	bd70      	pop	{r4, r5, r6, pc}
 8016dcc:	f7f6 ff68 	bl	800dca0 <rcutils_reset_error>
 8016dd0:	f640 0036 	movw	r0, #2102	; 0x836
 8016dd4:	bd70      	pop	{r4, r5, r6, pc}
 8016dd6:	f640 0036 	movw	r0, #2102	; 0x836
 8016dda:	bd70      	pop	{r4, r5, r6, pc}
 8016ddc:	200b      	movs	r0, #11
 8016dde:	bd70      	pop	{r4, r5, r6, pc}
 8016de0:	f640 0036 	movw	r0, #2102	; 0x836
 8016de4:	4770      	bx	lr
 8016de6:	bf00      	nop

08016de8 <rcl_action_take_result_response>:
 8016de8:	2800      	cmp	r0, #0
 8016dea:	d03a      	beq.n	8016e62 <rcl_action_take_result_response+0x7a>
 8016dec:	b570      	push	{r4, r5, r6, lr}
 8016dee:	4604      	mov	r4, r0
 8016df0:	6800      	ldr	r0, [r0, #0]
 8016df2:	b388      	cbz	r0, 8016e58 <rcl_action_take_result_response+0x70>
 8016df4:	460e      	mov	r6, r1
 8016df6:	4615      	mov	r5, r2
 8016df8:	f7fd fba6 	bl	8014548 <rcl_client_is_valid>
 8016dfc:	b338      	cbz	r0, 8016e4e <rcl_action_take_result_response+0x66>
 8016dfe:	6820      	ldr	r0, [r4, #0]
 8016e00:	3004      	adds	r0, #4
 8016e02:	f7fd fba1 	bl	8014548 <rcl_client_is_valid>
 8016e06:	b310      	cbz	r0, 8016e4e <rcl_action_take_result_response+0x66>
 8016e08:	6820      	ldr	r0, [r4, #0]
 8016e0a:	3008      	adds	r0, #8
 8016e0c:	f7fd fb9c 	bl	8014548 <rcl_client_is_valid>
 8016e10:	b1e8      	cbz	r0, 8016e4e <rcl_action_take_result_response+0x66>
 8016e12:	6820      	ldr	r0, [r4, #0]
 8016e14:	300c      	adds	r0, #12
 8016e16:	f7fe fd49 	bl	80158ac <rcl_subscription_is_valid>
 8016e1a:	b1c0      	cbz	r0, 8016e4e <rcl_action_take_result_response+0x66>
 8016e1c:	6820      	ldr	r0, [r4, #0]
 8016e1e:	3010      	adds	r0, #16
 8016e20:	f7fe fd44 	bl	80158ac <rcl_subscription_is_valid>
 8016e24:	b198      	cbz	r0, 8016e4e <rcl_action_take_result_response+0x66>
 8016e26:	b1d5      	cbz	r5, 8016e5e <rcl_action_take_result_response+0x76>
 8016e28:	b1ce      	cbz	r6, 8016e5e <rcl_action_take_result_response+0x76>
 8016e2a:	6820      	ldr	r0, [r4, #0]
 8016e2c:	462a      	mov	r2, r5
 8016e2e:	4631      	mov	r1, r6
 8016e30:	3008      	adds	r0, #8
 8016e32:	f7fd fb21 	bl	8014478 <rcl_take_response>
 8016e36:	b148      	cbz	r0, 8016e4c <rcl_action_take_result_response+0x64>
 8016e38:	280a      	cmp	r0, #10
 8016e3a:	d007      	beq.n	8016e4c <rcl_action_take_result_response+0x64>
 8016e3c:	f240 12f5 	movw	r2, #501	; 0x1f5
 8016e40:	f640 0337 	movw	r3, #2103	; 0x837
 8016e44:	4290      	cmp	r0, r2
 8016e46:	bf0c      	ite	eq
 8016e48:	4618      	moveq	r0, r3
 8016e4a:	2001      	movne	r0, #1
 8016e4c:	bd70      	pop	{r4, r5, r6, pc}
 8016e4e:	f7f6 ff27 	bl	800dca0 <rcutils_reset_error>
 8016e52:	f640 0036 	movw	r0, #2102	; 0x836
 8016e56:	bd70      	pop	{r4, r5, r6, pc}
 8016e58:	f640 0036 	movw	r0, #2102	; 0x836
 8016e5c:	bd70      	pop	{r4, r5, r6, pc}
 8016e5e:	200b      	movs	r0, #11
 8016e60:	bd70      	pop	{r4, r5, r6, pc}
 8016e62:	f640 0036 	movw	r0, #2102	; 0x836
 8016e66:	4770      	bx	lr

08016e68 <rcl_action_take_cancel_response>:
 8016e68:	2800      	cmp	r0, #0
 8016e6a:	d03a      	beq.n	8016ee2 <rcl_action_take_cancel_response+0x7a>
 8016e6c:	b570      	push	{r4, r5, r6, lr}
 8016e6e:	4604      	mov	r4, r0
 8016e70:	6800      	ldr	r0, [r0, #0]
 8016e72:	b388      	cbz	r0, 8016ed8 <rcl_action_take_cancel_response+0x70>
 8016e74:	460e      	mov	r6, r1
 8016e76:	4615      	mov	r5, r2
 8016e78:	f7fd fb66 	bl	8014548 <rcl_client_is_valid>
 8016e7c:	b338      	cbz	r0, 8016ece <rcl_action_take_cancel_response+0x66>
 8016e7e:	6820      	ldr	r0, [r4, #0]
 8016e80:	3004      	adds	r0, #4
 8016e82:	f7fd fb61 	bl	8014548 <rcl_client_is_valid>
 8016e86:	b310      	cbz	r0, 8016ece <rcl_action_take_cancel_response+0x66>
 8016e88:	6820      	ldr	r0, [r4, #0]
 8016e8a:	3008      	adds	r0, #8
 8016e8c:	f7fd fb5c 	bl	8014548 <rcl_client_is_valid>
 8016e90:	b1e8      	cbz	r0, 8016ece <rcl_action_take_cancel_response+0x66>
 8016e92:	6820      	ldr	r0, [r4, #0]
 8016e94:	300c      	adds	r0, #12
 8016e96:	f7fe fd09 	bl	80158ac <rcl_subscription_is_valid>
 8016e9a:	b1c0      	cbz	r0, 8016ece <rcl_action_take_cancel_response+0x66>
 8016e9c:	6820      	ldr	r0, [r4, #0]
 8016e9e:	3010      	adds	r0, #16
 8016ea0:	f7fe fd04 	bl	80158ac <rcl_subscription_is_valid>
 8016ea4:	b198      	cbz	r0, 8016ece <rcl_action_take_cancel_response+0x66>
 8016ea6:	b1d5      	cbz	r5, 8016ede <rcl_action_take_cancel_response+0x76>
 8016ea8:	b1ce      	cbz	r6, 8016ede <rcl_action_take_cancel_response+0x76>
 8016eaa:	6820      	ldr	r0, [r4, #0]
 8016eac:	462a      	mov	r2, r5
 8016eae:	4631      	mov	r1, r6
 8016eb0:	3004      	adds	r0, #4
 8016eb2:	f7fd fae1 	bl	8014478 <rcl_take_response>
 8016eb6:	b148      	cbz	r0, 8016ecc <rcl_action_take_cancel_response+0x64>
 8016eb8:	280a      	cmp	r0, #10
 8016eba:	d007      	beq.n	8016ecc <rcl_action_take_cancel_response+0x64>
 8016ebc:	f240 12f5 	movw	r2, #501	; 0x1f5
 8016ec0:	f640 0337 	movw	r3, #2103	; 0x837
 8016ec4:	4290      	cmp	r0, r2
 8016ec6:	bf0c      	ite	eq
 8016ec8:	4618      	moveq	r0, r3
 8016eca:	2001      	movne	r0, #1
 8016ecc:	bd70      	pop	{r4, r5, r6, pc}
 8016ece:	f7f6 fee7 	bl	800dca0 <rcutils_reset_error>
 8016ed2:	f640 0036 	movw	r0, #2102	; 0x836
 8016ed6:	bd70      	pop	{r4, r5, r6, pc}
 8016ed8:	f640 0036 	movw	r0, #2102	; 0x836
 8016edc:	bd70      	pop	{r4, r5, r6, pc}
 8016ede:	200b      	movs	r0, #11
 8016ee0:	bd70      	pop	{r4, r5, r6, pc}
 8016ee2:	f640 0036 	movw	r0, #2102	; 0x836
 8016ee6:	4770      	bx	lr

08016ee8 <rcl_action_take_feedback>:
 8016ee8:	2800      	cmp	r0, #0
 8016eea:	d038      	beq.n	8016f5e <rcl_action_take_feedback+0x76>
 8016eec:	b530      	push	{r4, r5, lr}
 8016eee:	4604      	mov	r4, r0
 8016ef0:	6800      	ldr	r0, [r0, #0]
 8016ef2:	b08f      	sub	sp, #60	; 0x3c
 8016ef4:	b378      	cbz	r0, 8016f56 <rcl_action_take_feedback+0x6e>
 8016ef6:	460d      	mov	r5, r1
 8016ef8:	f7fd fb26 	bl	8014548 <rcl_client_is_valid>
 8016efc:	b328      	cbz	r0, 8016f4a <rcl_action_take_feedback+0x62>
 8016efe:	6820      	ldr	r0, [r4, #0]
 8016f00:	3004      	adds	r0, #4
 8016f02:	f7fd fb21 	bl	8014548 <rcl_client_is_valid>
 8016f06:	b300      	cbz	r0, 8016f4a <rcl_action_take_feedback+0x62>
 8016f08:	6820      	ldr	r0, [r4, #0]
 8016f0a:	3008      	adds	r0, #8
 8016f0c:	f7fd fb1c 	bl	8014548 <rcl_client_is_valid>
 8016f10:	b1d8      	cbz	r0, 8016f4a <rcl_action_take_feedback+0x62>
 8016f12:	6820      	ldr	r0, [r4, #0]
 8016f14:	300c      	adds	r0, #12
 8016f16:	f7fe fcc9 	bl	80158ac <rcl_subscription_is_valid>
 8016f1a:	b1b0      	cbz	r0, 8016f4a <rcl_action_take_feedback+0x62>
 8016f1c:	6820      	ldr	r0, [r4, #0]
 8016f1e:	3010      	adds	r0, #16
 8016f20:	f7fe fcc4 	bl	80158ac <rcl_subscription_is_valid>
 8016f24:	b188      	cbz	r0, 8016f4a <rcl_action_take_feedback+0x62>
 8016f26:	b1ed      	cbz	r5, 8016f64 <rcl_action_take_feedback+0x7c>
 8016f28:	6820      	ldr	r0, [r4, #0]
 8016f2a:	2300      	movs	r3, #0
 8016f2c:	466a      	mov	r2, sp
 8016f2e:	4629      	mov	r1, r5
 8016f30:	300c      	adds	r0, #12
 8016f32:	f7fe fc5f 	bl	80157f4 <rcl_take>
 8016f36:	b160      	cbz	r0, 8016f52 <rcl_action_take_feedback+0x6a>
 8016f38:	f240 1391 	movw	r3, #401	; 0x191
 8016f3c:	4298      	cmp	r0, r3
 8016f3e:	d014      	beq.n	8016f6a <rcl_action_take_feedback+0x82>
 8016f40:	280a      	cmp	r0, #10
 8016f42:	bf18      	it	ne
 8016f44:	2001      	movne	r0, #1
 8016f46:	b00f      	add	sp, #60	; 0x3c
 8016f48:	bd30      	pop	{r4, r5, pc}
 8016f4a:	f7f6 fea9 	bl	800dca0 <rcutils_reset_error>
 8016f4e:	f640 0036 	movw	r0, #2102	; 0x836
 8016f52:	b00f      	add	sp, #60	; 0x3c
 8016f54:	bd30      	pop	{r4, r5, pc}
 8016f56:	f640 0036 	movw	r0, #2102	; 0x836
 8016f5a:	b00f      	add	sp, #60	; 0x3c
 8016f5c:	bd30      	pop	{r4, r5, pc}
 8016f5e:	f640 0036 	movw	r0, #2102	; 0x836
 8016f62:	4770      	bx	lr
 8016f64:	200b      	movs	r0, #11
 8016f66:	b00f      	add	sp, #60	; 0x3c
 8016f68:	bd30      	pop	{r4, r5, pc}
 8016f6a:	f640 0037 	movw	r0, #2103	; 0x837
 8016f6e:	e7f0      	b.n	8016f52 <rcl_action_take_feedback+0x6a>

08016f70 <rcl_action_wait_set_add_action_client>:
 8016f70:	2800      	cmp	r0, #0
 8016f72:	d048      	beq.n	8017006 <rcl_action_wait_set_add_action_client+0x96>
 8016f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016f76:	460c      	mov	r4, r1
 8016f78:	2900      	cmp	r1, #0
 8016f7a:	d03c      	beq.n	8016ff6 <rcl_action_wait_set_add_action_client+0x86>
 8016f7c:	4605      	mov	r5, r0
 8016f7e:	6808      	ldr	r0, [r1, #0]
 8016f80:	2800      	cmp	r0, #0
 8016f82:	d038      	beq.n	8016ff6 <rcl_action_wait_set_add_action_client+0x86>
 8016f84:	4617      	mov	r7, r2
 8016f86:	461e      	mov	r6, r3
 8016f88:	f7fd fade 	bl	8014548 <rcl_client_is_valid>
 8016f8c:	b3b0      	cbz	r0, 8016ffc <rcl_action_wait_set_add_action_client+0x8c>
 8016f8e:	6820      	ldr	r0, [r4, #0]
 8016f90:	3004      	adds	r0, #4
 8016f92:	f7fd fad9 	bl	8014548 <rcl_client_is_valid>
 8016f96:	b388      	cbz	r0, 8016ffc <rcl_action_wait_set_add_action_client+0x8c>
 8016f98:	6820      	ldr	r0, [r4, #0]
 8016f9a:	3008      	adds	r0, #8
 8016f9c:	f7fd fad4 	bl	8014548 <rcl_client_is_valid>
 8016fa0:	b360      	cbz	r0, 8016ffc <rcl_action_wait_set_add_action_client+0x8c>
 8016fa2:	6820      	ldr	r0, [r4, #0]
 8016fa4:	300c      	adds	r0, #12
 8016fa6:	f7fe fc81 	bl	80158ac <rcl_subscription_is_valid>
 8016faa:	b338      	cbz	r0, 8016ffc <rcl_action_wait_set_add_action_client+0x8c>
 8016fac:	6820      	ldr	r0, [r4, #0]
 8016fae:	3010      	adds	r0, #16
 8016fb0:	f7fe fc7c 	bl	80158ac <rcl_subscription_is_valid>
 8016fb4:	b310      	cbz	r0, 8016ffc <rcl_action_wait_set_add_action_client+0x8c>
 8016fb6:	6821      	ldr	r1, [r4, #0]
 8016fb8:	4628      	mov	r0, r5
 8016fba:	f501 72e2 	add.w	r2, r1, #452	; 0x1c4
 8016fbe:	f7ff fcd3 	bl	8016968 <rcl_wait_set_add_client>
 8016fc2:	b9b8      	cbnz	r0, 8016ff4 <rcl_action_wait_set_add_action_client+0x84>
 8016fc4:	6821      	ldr	r1, [r4, #0]
 8016fc6:	4628      	mov	r0, r5
 8016fc8:	f501 72e4 	add.w	r2, r1, #456	; 0x1c8
 8016fcc:	3104      	adds	r1, #4
 8016fce:	f7ff fccb 	bl	8016968 <rcl_wait_set_add_client>
 8016fd2:	b978      	cbnz	r0, 8016ff4 <rcl_action_wait_set_add_action_client+0x84>
 8016fd4:	6821      	ldr	r1, [r4, #0]
 8016fd6:	4628      	mov	r0, r5
 8016fd8:	f501 72e6 	add.w	r2, r1, #460	; 0x1cc
 8016fdc:	3108      	adds	r1, #8
 8016fde:	f7ff fcc3 	bl	8016968 <rcl_wait_set_add_client>
 8016fe2:	b938      	cbnz	r0, 8016ff4 <rcl_action_wait_set_add_action_client+0x84>
 8016fe4:	6821      	ldr	r1, [r4, #0]
 8016fe6:	4628      	mov	r0, r5
 8016fe8:	f501 72e8 	add.w	r2, r1, #464	; 0x1d0
 8016fec:	310c      	adds	r1, #12
 8016fee:	f7ff f96b 	bl	80162c8 <rcl_wait_set_add_subscription>
 8016ff2:	b158      	cbz	r0, 801700c <rcl_action_wait_set_add_action_client+0x9c>
 8016ff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016ff6:	f640 0036 	movw	r0, #2102	; 0x836
 8016ffa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016ffc:	f7f6 fe50 	bl	800dca0 <rcutils_reset_error>
 8017000:	f640 0036 	movw	r0, #2102	; 0x836
 8017004:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017006:	f44f 7061 	mov.w	r0, #900	; 0x384
 801700a:	4770      	bx	lr
 801700c:	6821      	ldr	r1, [r4, #0]
 801700e:	4628      	mov	r0, r5
 8017010:	f501 72ea 	add.w	r2, r1, #468	; 0x1d4
 8017014:	3110      	adds	r1, #16
 8017016:	f7ff f957 	bl	80162c8 <rcl_wait_set_add_subscription>
 801701a:	2800      	cmp	r0, #0
 801701c:	d1ea      	bne.n	8016ff4 <rcl_action_wait_set_add_action_client+0x84>
 801701e:	b11f      	cbz	r7, 8017028 <rcl_action_wait_set_add_action_client+0xb8>
 8017020:	6823      	ldr	r3, [r4, #0]
 8017022:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 8017026:	603b      	str	r3, [r7, #0]
 8017028:	2e00      	cmp	r6, #0
 801702a:	d0e3      	beq.n	8016ff4 <rcl_action_wait_set_add_action_client+0x84>
 801702c:	6823      	ldr	r3, [r4, #0]
 801702e:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 8017032:	6033      	str	r3, [r6, #0]
 8017034:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017036:	bf00      	nop

08017038 <rcl_action_client_wait_set_get_entities_ready>:
 8017038:	2800      	cmp	r0, #0
 801703a:	d050      	beq.n	80170de <rcl_action_client_wait_set_get_entities_ready+0xa6>
 801703c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017040:	460c      	mov	r4, r1
 8017042:	2900      	cmp	r1, #0
 8017044:	d03e      	beq.n	80170c4 <rcl_action_client_wait_set_get_entities_ready+0x8c>
 8017046:	4605      	mov	r5, r0
 8017048:	6808      	ldr	r0, [r1, #0]
 801704a:	2800      	cmp	r0, #0
 801704c:	d03a      	beq.n	80170c4 <rcl_action_client_wait_set_get_entities_ready+0x8c>
 801704e:	4616      	mov	r6, r2
 8017050:	461f      	mov	r7, r3
 8017052:	f7fd fa79 	bl	8014548 <rcl_client_is_valid>
 8017056:	2800      	cmp	r0, #0
 8017058:	d038      	beq.n	80170cc <rcl_action_client_wait_set_get_entities_ready+0x94>
 801705a:	6820      	ldr	r0, [r4, #0]
 801705c:	3004      	adds	r0, #4
 801705e:	f7fd fa73 	bl	8014548 <rcl_client_is_valid>
 8017062:	2800      	cmp	r0, #0
 8017064:	d032      	beq.n	80170cc <rcl_action_client_wait_set_get_entities_ready+0x94>
 8017066:	6820      	ldr	r0, [r4, #0]
 8017068:	3008      	adds	r0, #8
 801706a:	f7fd fa6d 	bl	8014548 <rcl_client_is_valid>
 801706e:	b368      	cbz	r0, 80170cc <rcl_action_client_wait_set_get_entities_ready+0x94>
 8017070:	6820      	ldr	r0, [r4, #0]
 8017072:	300c      	adds	r0, #12
 8017074:	f7fe fc1a 	bl	80158ac <rcl_subscription_is_valid>
 8017078:	b340      	cbz	r0, 80170cc <rcl_action_client_wait_set_get_entities_ready+0x94>
 801707a:	6820      	ldr	r0, [r4, #0]
 801707c:	3010      	adds	r0, #16
 801707e:	f7fe fc15 	bl	80158ac <rcl_subscription_is_valid>
 8017082:	b318      	cbz	r0, 80170cc <rcl_action_client_wait_set_get_entities_ready+0x94>
 8017084:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8017088:	2a00      	cmp	r2, #0
 801708a:	bf18      	it	ne
 801708c:	2b00      	cmpne	r3, #0
 801708e:	9b08      	ldr	r3, [sp, #32]
 8017090:	bf0c      	ite	eq
 8017092:	2101      	moveq	r1, #1
 8017094:	2100      	movne	r1, #0
 8017096:	2b00      	cmp	r3, #0
 8017098:	bf08      	it	eq
 801709a:	f041 0101 	orreq.w	r1, r1, #1
 801709e:	2f00      	cmp	r7, #0
 80170a0:	bf08      	it	eq
 80170a2:	f041 0101 	orreq.w	r1, r1, #1
 80170a6:	b9b9      	cbnz	r1, 80170d8 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 80170a8:	b1b6      	cbz	r6, 80170d8 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 80170aa:	6823      	ldr	r3, [r4, #0]
 80170ac:	686c      	ldr	r4, [r5, #4]
 80170ae:	e9d3 2174 	ldrd	r2, r1, [r3, #464]	; 0x1d0
 80170b2:	428a      	cmp	r2, r1
 80170b4:	4610      	mov	r0, r2
 80170b6:	bf38      	it	cc
 80170b8:	4608      	movcc	r0, r1
 80170ba:	4284      	cmp	r4, r0
 80170bc:	d812      	bhi.n	80170e4 <rcl_action_client_wait_set_get_entities_ready+0xac>
 80170be:	2001      	movs	r0, #1
 80170c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80170c4:	f640 0036 	movw	r0, #2102	; 0x836
 80170c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80170cc:	f7f6 fde8 	bl	800dca0 <rcutils_reset_error>
 80170d0:	f640 0036 	movw	r0, #2102	; 0x836
 80170d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80170d8:	200b      	movs	r0, #11
 80170da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80170de:	f44f 7061 	mov.w	r0, #900	; 0x384
 80170e2:	4770      	bx	lr
 80170e4:	e9d3 8e71 	ldrd	r8, lr, [r3, #452]	; 0x1c4
 80170e8:	f8d3 c1cc 	ldr.w	ip, [r3, #460]	; 0x1cc
 80170ec:	45f0      	cmp	r8, lr
 80170ee:	4640      	mov	r0, r8
 80170f0:	69ec      	ldr	r4, [r5, #28]
 80170f2:	bf38      	it	cc
 80170f4:	4670      	movcc	r0, lr
 80170f6:	4560      	cmp	r0, ip
 80170f8:	bf38      	it	cc
 80170fa:	4660      	movcc	r0, ip
 80170fc:	4284      	cmp	r4, r0
 80170fe:	d9de      	bls.n	80170be <rcl_action_client_wait_set_get_entities_ready+0x86>
 8017100:	f8d5 9018 	ldr.w	r9, [r5, #24]
 8017104:	682d      	ldr	r5, [r5, #0]
 8017106:	f859 0028 	ldr.w	r0, [r9, r8, lsl #2]
 801710a:	f855 4021 	ldr.w	r4, [r5, r1, lsl #2]
 801710e:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 8017112:	1a18      	subs	r0, r3, r0
 8017114:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 8017118:	f103 0c0c 	add.w	ip, r3, #12
 801711c:	f859 102e 	ldr.w	r1, [r9, lr, lsl #2]
 8017120:	fab0 f080 	clz	r0, r0
 8017124:	eba5 050c 	sub.w	r5, r5, ip
 8017128:	0940      	lsrs	r0, r0, #5
 801712a:	fab5 f585 	clz	r5, r5
 801712e:	096d      	lsrs	r5, r5, #5
 8017130:	7035      	strb	r5, [r6, #0]
 8017132:	f103 0510 	add.w	r5, r3, #16
 8017136:	1b64      	subs	r4, r4, r5
 8017138:	9d08      	ldr	r5, [sp, #32]
 801713a:	fab4 f484 	clz	r4, r4
 801713e:	0964      	lsrs	r4, r4, #5
 8017140:	703c      	strb	r4, [r7, #0]
 8017142:	1d1c      	adds	r4, r3, #4
 8017144:	3308      	adds	r3, #8
 8017146:	7028      	strb	r0, [r5, #0]
 8017148:	1b09      	subs	r1, r1, r4
 801714a:	2000      	movs	r0, #0
 801714c:	1ad3      	subs	r3, r2, r3
 801714e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017150:	fab1 f181 	clz	r1, r1
 8017154:	fab3 f383 	clz	r3, r3
 8017158:	0949      	lsrs	r1, r1, #5
 801715a:	095b      	lsrs	r3, r3, #5
 801715c:	7011      	strb	r1, [r2, #0]
 801715e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017160:	7013      	strb	r3, [r2, #0]
 8017162:	e7b1      	b.n	80170c8 <rcl_action_client_wait_set_get_entities_ready+0x90>

08017164 <rcl_action_take_goal_request>:
 8017164:	2800      	cmp	r0, #0
 8017166:	d039      	beq.n	80171dc <rcl_action_take_goal_request+0x78>
 8017168:	b570      	push	{r4, r5, r6, lr}
 801716a:	4604      	mov	r4, r0
 801716c:	6800      	ldr	r0, [r0, #0]
 801716e:	b380      	cbz	r0, 80171d2 <rcl_action_take_goal_request+0x6e>
 8017170:	460e      	mov	r6, r1
 8017172:	4615      	mov	r5, r2
 8017174:	f7fe f9b0 	bl	80154d8 <rcl_service_is_valid>
 8017178:	b330      	cbz	r0, 80171c8 <rcl_action_take_goal_request+0x64>
 801717a:	6820      	ldr	r0, [r4, #0]
 801717c:	3004      	adds	r0, #4
 801717e:	f7fe f9ab 	bl	80154d8 <rcl_service_is_valid>
 8017182:	b308      	cbz	r0, 80171c8 <rcl_action_take_goal_request+0x64>
 8017184:	6820      	ldr	r0, [r4, #0]
 8017186:	3008      	adds	r0, #8
 8017188:	f7fe f9a6 	bl	80154d8 <rcl_service_is_valid>
 801718c:	b1e0      	cbz	r0, 80171c8 <rcl_action_take_goal_request+0x64>
 801718e:	6820      	ldr	r0, [r4, #0]
 8017190:	300c      	adds	r0, #12
 8017192:	f7f5 fce9 	bl	800cb68 <rcl_publisher_is_valid>
 8017196:	b1b8      	cbz	r0, 80171c8 <rcl_action_take_goal_request+0x64>
 8017198:	6820      	ldr	r0, [r4, #0]
 801719a:	3010      	adds	r0, #16
 801719c:	f7f5 fce4 	bl	800cb68 <rcl_publisher_is_valid>
 80171a0:	b190      	cbz	r0, 80171c8 <rcl_action_take_goal_request+0x64>
 80171a2:	b1cd      	cbz	r5, 80171d8 <rcl_action_take_goal_request+0x74>
 80171a4:	b1c6      	cbz	r6, 80171d8 <rcl_action_take_goal_request+0x74>
 80171a6:	462a      	mov	r2, r5
 80171a8:	4631      	mov	r1, r6
 80171aa:	6820      	ldr	r0, [r4, #0]
 80171ac:	f7fe f914 	bl	80153d8 <rcl_take_request>
 80171b0:	b148      	cbz	r0, 80171c6 <rcl_action_take_goal_request+0x62>
 80171b2:	280a      	cmp	r0, #10
 80171b4:	d007      	beq.n	80171c6 <rcl_action_take_goal_request+0x62>
 80171b6:	f240 2259 	movw	r2, #601	; 0x259
 80171ba:	f640 0399 	movw	r3, #2201	; 0x899
 80171be:	4290      	cmp	r0, r2
 80171c0:	bf0c      	ite	eq
 80171c2:	4618      	moveq	r0, r3
 80171c4:	2001      	movne	r0, #1
 80171c6:	bd70      	pop	{r4, r5, r6, pc}
 80171c8:	f7f6 fd6a 	bl	800dca0 <rcutils_reset_error>
 80171cc:	f640 0098 	movw	r0, #2200	; 0x898
 80171d0:	bd70      	pop	{r4, r5, r6, pc}
 80171d2:	f640 0098 	movw	r0, #2200	; 0x898
 80171d6:	bd70      	pop	{r4, r5, r6, pc}
 80171d8:	200b      	movs	r0, #11
 80171da:	bd70      	pop	{r4, r5, r6, pc}
 80171dc:	f640 0098 	movw	r0, #2200	; 0x898
 80171e0:	4770      	bx	lr
 80171e2:	bf00      	nop

080171e4 <rcl_action_send_goal_response>:
 80171e4:	b388      	cbz	r0, 801724a <rcl_action_send_goal_response+0x66>
 80171e6:	b570      	push	{r4, r5, r6, lr}
 80171e8:	4604      	mov	r4, r0
 80171ea:	6800      	ldr	r0, [r0, #0]
 80171ec:	b340      	cbz	r0, 8017240 <rcl_action_send_goal_response+0x5c>
 80171ee:	460e      	mov	r6, r1
 80171f0:	4615      	mov	r5, r2
 80171f2:	f7fe f971 	bl	80154d8 <rcl_service_is_valid>
 80171f6:	b1f0      	cbz	r0, 8017236 <rcl_action_send_goal_response+0x52>
 80171f8:	6820      	ldr	r0, [r4, #0]
 80171fa:	3004      	adds	r0, #4
 80171fc:	f7fe f96c 	bl	80154d8 <rcl_service_is_valid>
 8017200:	b1c8      	cbz	r0, 8017236 <rcl_action_send_goal_response+0x52>
 8017202:	6820      	ldr	r0, [r4, #0]
 8017204:	3008      	adds	r0, #8
 8017206:	f7fe f967 	bl	80154d8 <rcl_service_is_valid>
 801720a:	b1a0      	cbz	r0, 8017236 <rcl_action_send_goal_response+0x52>
 801720c:	6820      	ldr	r0, [r4, #0]
 801720e:	300c      	adds	r0, #12
 8017210:	f7f5 fcaa 	bl	800cb68 <rcl_publisher_is_valid>
 8017214:	b178      	cbz	r0, 8017236 <rcl_action_send_goal_response+0x52>
 8017216:	6820      	ldr	r0, [r4, #0]
 8017218:	3010      	adds	r0, #16
 801721a:	f7f5 fca5 	bl	800cb68 <rcl_publisher_is_valid>
 801721e:	b150      	cbz	r0, 8017236 <rcl_action_send_goal_response+0x52>
 8017220:	b18d      	cbz	r5, 8017246 <rcl_action_send_goal_response+0x62>
 8017222:	b186      	cbz	r6, 8017246 <rcl_action_send_goal_response+0x62>
 8017224:	462a      	mov	r2, r5
 8017226:	4631      	mov	r1, r6
 8017228:	6820      	ldr	r0, [r4, #0]
 801722a:	f7fe f925 	bl	8015478 <rcl_send_response>
 801722e:	3800      	subs	r0, #0
 8017230:	bf18      	it	ne
 8017232:	2001      	movne	r0, #1
 8017234:	bd70      	pop	{r4, r5, r6, pc}
 8017236:	f7f6 fd33 	bl	800dca0 <rcutils_reset_error>
 801723a:	f640 0098 	movw	r0, #2200	; 0x898
 801723e:	bd70      	pop	{r4, r5, r6, pc}
 8017240:	f640 0098 	movw	r0, #2200	; 0x898
 8017244:	bd70      	pop	{r4, r5, r6, pc}
 8017246:	200b      	movs	r0, #11
 8017248:	bd70      	pop	{r4, r5, r6, pc}
 801724a:	f640 0098 	movw	r0, #2200	; 0x898
 801724e:	4770      	bx	lr

08017250 <rcl_action_take_result_request>:
 8017250:	2800      	cmp	r0, #0
 8017252:	d03a      	beq.n	80172ca <rcl_action_take_result_request+0x7a>
 8017254:	b570      	push	{r4, r5, r6, lr}
 8017256:	4604      	mov	r4, r0
 8017258:	6800      	ldr	r0, [r0, #0]
 801725a:	b388      	cbz	r0, 80172c0 <rcl_action_take_result_request+0x70>
 801725c:	460e      	mov	r6, r1
 801725e:	4615      	mov	r5, r2
 8017260:	f7fe f93a 	bl	80154d8 <rcl_service_is_valid>
 8017264:	b338      	cbz	r0, 80172b6 <rcl_action_take_result_request+0x66>
 8017266:	6820      	ldr	r0, [r4, #0]
 8017268:	3004      	adds	r0, #4
 801726a:	f7fe f935 	bl	80154d8 <rcl_service_is_valid>
 801726e:	b310      	cbz	r0, 80172b6 <rcl_action_take_result_request+0x66>
 8017270:	6820      	ldr	r0, [r4, #0]
 8017272:	3008      	adds	r0, #8
 8017274:	f7fe f930 	bl	80154d8 <rcl_service_is_valid>
 8017278:	b1e8      	cbz	r0, 80172b6 <rcl_action_take_result_request+0x66>
 801727a:	6820      	ldr	r0, [r4, #0]
 801727c:	300c      	adds	r0, #12
 801727e:	f7f5 fc73 	bl	800cb68 <rcl_publisher_is_valid>
 8017282:	b1c0      	cbz	r0, 80172b6 <rcl_action_take_result_request+0x66>
 8017284:	6820      	ldr	r0, [r4, #0]
 8017286:	3010      	adds	r0, #16
 8017288:	f7f5 fc6e 	bl	800cb68 <rcl_publisher_is_valid>
 801728c:	b198      	cbz	r0, 80172b6 <rcl_action_take_result_request+0x66>
 801728e:	b1d5      	cbz	r5, 80172c6 <rcl_action_take_result_request+0x76>
 8017290:	b1ce      	cbz	r6, 80172c6 <rcl_action_take_result_request+0x76>
 8017292:	6820      	ldr	r0, [r4, #0]
 8017294:	462a      	mov	r2, r5
 8017296:	4631      	mov	r1, r6
 8017298:	3008      	adds	r0, #8
 801729a:	f7fe f89d 	bl	80153d8 <rcl_take_request>
 801729e:	b148      	cbz	r0, 80172b4 <rcl_action_take_result_request+0x64>
 80172a0:	280a      	cmp	r0, #10
 80172a2:	d007      	beq.n	80172b4 <rcl_action_take_result_request+0x64>
 80172a4:	f240 2259 	movw	r2, #601	; 0x259
 80172a8:	f640 0399 	movw	r3, #2201	; 0x899
 80172ac:	4290      	cmp	r0, r2
 80172ae:	bf0c      	ite	eq
 80172b0:	4618      	moveq	r0, r3
 80172b2:	2001      	movne	r0, #1
 80172b4:	bd70      	pop	{r4, r5, r6, pc}
 80172b6:	f7f6 fcf3 	bl	800dca0 <rcutils_reset_error>
 80172ba:	f640 0098 	movw	r0, #2200	; 0x898
 80172be:	bd70      	pop	{r4, r5, r6, pc}
 80172c0:	f640 0098 	movw	r0, #2200	; 0x898
 80172c4:	bd70      	pop	{r4, r5, r6, pc}
 80172c6:	200b      	movs	r0, #11
 80172c8:	bd70      	pop	{r4, r5, r6, pc}
 80172ca:	f640 0098 	movw	r0, #2200	; 0x898
 80172ce:	4770      	bx	lr

080172d0 <rcl_action_take_cancel_request>:
 80172d0:	2800      	cmp	r0, #0
 80172d2:	d03a      	beq.n	801734a <rcl_action_take_cancel_request+0x7a>
 80172d4:	b570      	push	{r4, r5, r6, lr}
 80172d6:	4604      	mov	r4, r0
 80172d8:	6800      	ldr	r0, [r0, #0]
 80172da:	b388      	cbz	r0, 8017340 <rcl_action_take_cancel_request+0x70>
 80172dc:	460e      	mov	r6, r1
 80172de:	4615      	mov	r5, r2
 80172e0:	f7fe f8fa 	bl	80154d8 <rcl_service_is_valid>
 80172e4:	b338      	cbz	r0, 8017336 <rcl_action_take_cancel_request+0x66>
 80172e6:	6820      	ldr	r0, [r4, #0]
 80172e8:	3004      	adds	r0, #4
 80172ea:	f7fe f8f5 	bl	80154d8 <rcl_service_is_valid>
 80172ee:	b310      	cbz	r0, 8017336 <rcl_action_take_cancel_request+0x66>
 80172f0:	6820      	ldr	r0, [r4, #0]
 80172f2:	3008      	adds	r0, #8
 80172f4:	f7fe f8f0 	bl	80154d8 <rcl_service_is_valid>
 80172f8:	b1e8      	cbz	r0, 8017336 <rcl_action_take_cancel_request+0x66>
 80172fa:	6820      	ldr	r0, [r4, #0]
 80172fc:	300c      	adds	r0, #12
 80172fe:	f7f5 fc33 	bl	800cb68 <rcl_publisher_is_valid>
 8017302:	b1c0      	cbz	r0, 8017336 <rcl_action_take_cancel_request+0x66>
 8017304:	6820      	ldr	r0, [r4, #0]
 8017306:	3010      	adds	r0, #16
 8017308:	f7f5 fc2e 	bl	800cb68 <rcl_publisher_is_valid>
 801730c:	b198      	cbz	r0, 8017336 <rcl_action_take_cancel_request+0x66>
 801730e:	b1d5      	cbz	r5, 8017346 <rcl_action_take_cancel_request+0x76>
 8017310:	b1ce      	cbz	r6, 8017346 <rcl_action_take_cancel_request+0x76>
 8017312:	6820      	ldr	r0, [r4, #0]
 8017314:	462a      	mov	r2, r5
 8017316:	4631      	mov	r1, r6
 8017318:	3004      	adds	r0, #4
 801731a:	f7fe f85d 	bl	80153d8 <rcl_take_request>
 801731e:	b148      	cbz	r0, 8017334 <rcl_action_take_cancel_request+0x64>
 8017320:	280a      	cmp	r0, #10
 8017322:	d007      	beq.n	8017334 <rcl_action_take_cancel_request+0x64>
 8017324:	f240 2259 	movw	r2, #601	; 0x259
 8017328:	f640 0399 	movw	r3, #2201	; 0x899
 801732c:	4290      	cmp	r0, r2
 801732e:	bf0c      	ite	eq
 8017330:	4618      	moveq	r0, r3
 8017332:	2001      	movne	r0, #1
 8017334:	bd70      	pop	{r4, r5, r6, pc}
 8017336:	f7f6 fcb3 	bl	800dca0 <rcutils_reset_error>
 801733a:	f640 0098 	movw	r0, #2200	; 0x898
 801733e:	bd70      	pop	{r4, r5, r6, pc}
 8017340:	f640 0098 	movw	r0, #2200	; 0x898
 8017344:	bd70      	pop	{r4, r5, r6, pc}
 8017346:	200b      	movs	r0, #11
 8017348:	bd70      	pop	{r4, r5, r6, pc}
 801734a:	f640 0098 	movw	r0, #2200	; 0x898
 801734e:	4770      	bx	lr

08017350 <rcl_action_send_cancel_response>:
 8017350:	b390      	cbz	r0, 80173b8 <rcl_action_send_cancel_response+0x68>
 8017352:	b570      	push	{r4, r5, r6, lr}
 8017354:	4604      	mov	r4, r0
 8017356:	6800      	ldr	r0, [r0, #0]
 8017358:	b348      	cbz	r0, 80173ae <rcl_action_send_cancel_response+0x5e>
 801735a:	460e      	mov	r6, r1
 801735c:	4615      	mov	r5, r2
 801735e:	f7fe f8bb 	bl	80154d8 <rcl_service_is_valid>
 8017362:	b1f8      	cbz	r0, 80173a4 <rcl_action_send_cancel_response+0x54>
 8017364:	6820      	ldr	r0, [r4, #0]
 8017366:	3004      	adds	r0, #4
 8017368:	f7fe f8b6 	bl	80154d8 <rcl_service_is_valid>
 801736c:	b1d0      	cbz	r0, 80173a4 <rcl_action_send_cancel_response+0x54>
 801736e:	6820      	ldr	r0, [r4, #0]
 8017370:	3008      	adds	r0, #8
 8017372:	f7fe f8b1 	bl	80154d8 <rcl_service_is_valid>
 8017376:	b1a8      	cbz	r0, 80173a4 <rcl_action_send_cancel_response+0x54>
 8017378:	6820      	ldr	r0, [r4, #0]
 801737a:	300c      	adds	r0, #12
 801737c:	f7f5 fbf4 	bl	800cb68 <rcl_publisher_is_valid>
 8017380:	b180      	cbz	r0, 80173a4 <rcl_action_send_cancel_response+0x54>
 8017382:	6820      	ldr	r0, [r4, #0]
 8017384:	3010      	adds	r0, #16
 8017386:	f7f5 fbef 	bl	800cb68 <rcl_publisher_is_valid>
 801738a:	b158      	cbz	r0, 80173a4 <rcl_action_send_cancel_response+0x54>
 801738c:	b195      	cbz	r5, 80173b4 <rcl_action_send_cancel_response+0x64>
 801738e:	b18e      	cbz	r6, 80173b4 <rcl_action_send_cancel_response+0x64>
 8017390:	6820      	ldr	r0, [r4, #0]
 8017392:	462a      	mov	r2, r5
 8017394:	4631      	mov	r1, r6
 8017396:	3004      	adds	r0, #4
 8017398:	f7fe f86e 	bl	8015478 <rcl_send_response>
 801739c:	3800      	subs	r0, #0
 801739e:	bf18      	it	ne
 80173a0:	2001      	movne	r0, #1
 80173a2:	bd70      	pop	{r4, r5, r6, pc}
 80173a4:	f7f6 fc7c 	bl	800dca0 <rcutils_reset_error>
 80173a8:	f640 0098 	movw	r0, #2200	; 0x898
 80173ac:	bd70      	pop	{r4, r5, r6, pc}
 80173ae:	f640 0098 	movw	r0, #2200	; 0x898
 80173b2:	bd70      	pop	{r4, r5, r6, pc}
 80173b4:	200b      	movs	r0, #11
 80173b6:	bd70      	pop	{r4, r5, r6, pc}
 80173b8:	f640 0098 	movw	r0, #2200	; 0x898
 80173bc:	4770      	bx	lr
 80173be:	bf00      	nop

080173c0 <rcl_action_wait_set_add_action_server>:
 80173c0:	2800      	cmp	r0, #0
 80173c2:	d04d      	beq.n	8017460 <rcl_action_wait_set_add_action_server+0xa0>
 80173c4:	b570      	push	{r4, r5, r6, lr}
 80173c6:	460c      	mov	r4, r1
 80173c8:	b159      	cbz	r1, 80173e2 <rcl_action_wait_set_add_action_server+0x22>
 80173ca:	4605      	mov	r5, r0
 80173cc:	6808      	ldr	r0, [r1, #0]
 80173ce:	b140      	cbz	r0, 80173e2 <rcl_action_wait_set_add_action_server+0x22>
 80173d0:	4616      	mov	r6, r2
 80173d2:	f7fe f881 	bl	80154d8 <rcl_service_is_valid>
 80173d6:	b120      	cbz	r0, 80173e2 <rcl_action_wait_set_add_action_server+0x22>
 80173d8:	6820      	ldr	r0, [r4, #0]
 80173da:	3004      	adds	r0, #4
 80173dc:	f7fe f87c 	bl	80154d8 <rcl_service_is_valid>
 80173e0:	b910      	cbnz	r0, 80173e8 <rcl_action_wait_set_add_action_server+0x28>
 80173e2:	f640 0098 	movw	r0, #2200	; 0x898
 80173e6:	bd70      	pop	{r4, r5, r6, pc}
 80173e8:	6820      	ldr	r0, [r4, #0]
 80173ea:	3008      	adds	r0, #8
 80173ec:	f7fe f874 	bl	80154d8 <rcl_service_is_valid>
 80173f0:	2800      	cmp	r0, #0
 80173f2:	d0f6      	beq.n	80173e2 <rcl_action_wait_set_add_action_server+0x22>
 80173f4:	6820      	ldr	r0, [r4, #0]
 80173f6:	300c      	adds	r0, #12
 80173f8:	f7f5 fbce 	bl	800cb98 <rcl_publisher_is_valid_except_context>
 80173fc:	2800      	cmp	r0, #0
 80173fe:	d0f0      	beq.n	80173e2 <rcl_action_wait_set_add_action_server+0x22>
 8017400:	6820      	ldr	r0, [r4, #0]
 8017402:	3010      	adds	r0, #16
 8017404:	f7f5 fbc8 	bl	800cb98 <rcl_publisher_is_valid_except_context>
 8017408:	2800      	cmp	r0, #0
 801740a:	d0ea      	beq.n	80173e2 <rcl_action_wait_set_add_action_server+0x22>
 801740c:	6821      	ldr	r1, [r4, #0]
 801740e:	4628      	mov	r0, r5
 8017410:	f501 72ee 	add.w	r2, r1, #476	; 0x1dc
 8017414:	f7ff fad4 	bl	80169c0 <rcl_wait_set_add_service>
 8017418:	2800      	cmp	r0, #0
 801741a:	d1e4      	bne.n	80173e6 <rcl_action_wait_set_add_action_server+0x26>
 801741c:	6821      	ldr	r1, [r4, #0]
 801741e:	4628      	mov	r0, r5
 8017420:	f501 72f0 	add.w	r2, r1, #480	; 0x1e0
 8017424:	3104      	adds	r1, #4
 8017426:	f7ff facb 	bl	80169c0 <rcl_wait_set_add_service>
 801742a:	2800      	cmp	r0, #0
 801742c:	d1db      	bne.n	80173e6 <rcl_action_wait_set_add_action_server+0x26>
 801742e:	6821      	ldr	r1, [r4, #0]
 8017430:	4628      	mov	r0, r5
 8017432:	f501 72f2 	add.w	r2, r1, #484	; 0x1e4
 8017436:	3108      	adds	r1, #8
 8017438:	f7ff fac2 	bl	80169c0 <rcl_wait_set_add_service>
 801743c:	2800      	cmp	r0, #0
 801743e:	d1d2      	bne.n	80173e6 <rcl_action_wait_set_add_action_server+0x26>
 8017440:	6821      	ldr	r1, [r4, #0]
 8017442:	4628      	mov	r0, r5
 8017444:	f501 72f4 	add.w	r2, r1, #488	; 0x1e8
 8017448:	3114      	adds	r1, #20
 801744a:	f7ff fa5d 	bl	8016908 <rcl_wait_set_add_timer>
 801744e:	2800      	cmp	r0, #0
 8017450:	d1c9      	bne.n	80173e6 <rcl_action_wait_set_add_action_server+0x26>
 8017452:	2e00      	cmp	r6, #0
 8017454:	d0c7      	beq.n	80173e6 <rcl_action_wait_set_add_action_server+0x26>
 8017456:	6823      	ldr	r3, [r4, #0]
 8017458:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 801745c:	6033      	str	r3, [r6, #0]
 801745e:	bd70      	pop	{r4, r5, r6, pc}
 8017460:	f44f 7061 	mov.w	r0, #900	; 0x384
 8017464:	4770      	bx	lr
 8017466:	bf00      	nop

08017468 <rcl_action_server_wait_set_get_entities_ready>:
 8017468:	2800      	cmp	r0, #0
 801746a:	d067      	beq.n	801753c <rcl_action_server_wait_set_get_entities_ready+0xd4>
 801746c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017470:	460c      	mov	r4, r1
 8017472:	b161      	cbz	r1, 801748e <rcl_action_server_wait_set_get_entities_ready+0x26>
 8017474:	4605      	mov	r5, r0
 8017476:	6808      	ldr	r0, [r1, #0]
 8017478:	b148      	cbz	r0, 801748e <rcl_action_server_wait_set_get_entities_ready+0x26>
 801747a:	4616      	mov	r6, r2
 801747c:	4698      	mov	r8, r3
 801747e:	f7fe f82b 	bl	80154d8 <rcl_service_is_valid>
 8017482:	b120      	cbz	r0, 801748e <rcl_action_server_wait_set_get_entities_ready+0x26>
 8017484:	6820      	ldr	r0, [r4, #0]
 8017486:	3004      	adds	r0, #4
 8017488:	f7fe f826 	bl	80154d8 <rcl_service_is_valid>
 801748c:	b918      	cbnz	r0, 8017496 <rcl_action_server_wait_set_get_entities_ready+0x2e>
 801748e:	f640 0098 	movw	r0, #2200	; 0x898
 8017492:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017496:	6820      	ldr	r0, [r4, #0]
 8017498:	3008      	adds	r0, #8
 801749a:	f7fe f81d 	bl	80154d8 <rcl_service_is_valid>
 801749e:	2800      	cmp	r0, #0
 80174a0:	d0f5      	beq.n	801748e <rcl_action_server_wait_set_get_entities_ready+0x26>
 80174a2:	6820      	ldr	r0, [r4, #0]
 80174a4:	300c      	adds	r0, #12
 80174a6:	f7f5 fb77 	bl	800cb98 <rcl_publisher_is_valid_except_context>
 80174aa:	2800      	cmp	r0, #0
 80174ac:	d0ef      	beq.n	801748e <rcl_action_server_wait_set_get_entities_ready+0x26>
 80174ae:	6820      	ldr	r0, [r4, #0]
 80174b0:	3010      	adds	r0, #16
 80174b2:	f7f5 fb71 	bl	800cb98 <rcl_publisher_is_valid_except_context>
 80174b6:	2800      	cmp	r0, #0
 80174b8:	d0e9      	beq.n	801748e <rcl_action_server_wait_set_get_entities_ready+0x26>
 80174ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80174be:	2a00      	cmp	r2, #0
 80174c0:	bf18      	it	ne
 80174c2:	2b00      	cmpne	r3, #0
 80174c4:	bf0c      	ite	eq
 80174c6:	2101      	moveq	r1, #1
 80174c8:	2100      	movne	r1, #0
 80174ca:	f1b8 0f00 	cmp.w	r8, #0
 80174ce:	bf08      	it	eq
 80174d0:	f041 0101 	orreq.w	r1, r1, #1
 80174d4:	bba9      	cbnz	r1, 8017542 <rcl_action_server_wait_set_get_entities_ready+0xda>
 80174d6:	b3a6      	cbz	r6, 8017542 <rcl_action_server_wait_set_get_entities_ready+0xda>
 80174d8:	6821      	ldr	r1, [r4, #0]
 80174da:	2000      	movs	r0, #0
 80174dc:	692c      	ldr	r4, [r5, #16]
 80174de:	f8d1 21e8 	ldr.w	r2, [r1, #488]	; 0x1e8
 80174e2:	6a2f      	ldr	r7, [r5, #32]
 80174e4:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80174e8:	f8d1 41dc 	ldr.w	r4, [r1, #476]	; 0x1dc
 80174ec:	f8d1 31e0 	ldr.w	r3, [r1, #480]	; 0x1e0
 80174f0:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
 80174f4:	f857 5023 	ldr.w	r5, [r7, r3, lsl #2]
 80174f8:	1a64      	subs	r4, r4, r1
 80174fa:	f8d1 31e4 	ldr.w	r3, [r1, #484]	; 0x1e4
 80174fe:	fab4 f484 	clz	r4, r4
 8017502:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8017506:	0964      	lsrs	r4, r4, #5
 8017508:	7034      	strb	r4, [r6, #0]
 801750a:	1d0c      	adds	r4, r1, #4
 801750c:	1b2c      	subs	r4, r5, r4
 801750e:	fab4 f484 	clz	r4, r4
 8017512:	0964      	lsrs	r4, r4, #5
 8017514:	f888 4000 	strb.w	r4, [r8]
 8017518:	f101 0408 	add.w	r4, r1, #8
 801751c:	1b1b      	subs	r3, r3, r4
 801751e:	9c06      	ldr	r4, [sp, #24]
 8017520:	fab3 f383 	clz	r3, r3
 8017524:	095b      	lsrs	r3, r3, #5
 8017526:	7023      	strb	r3, [r4, #0]
 8017528:	f101 0314 	add.w	r3, r1, #20
 801752c:	1ad3      	subs	r3, r2, r3
 801752e:	9a07      	ldr	r2, [sp, #28]
 8017530:	fab3 f383 	clz	r3, r3
 8017534:	095b      	lsrs	r3, r3, #5
 8017536:	7013      	strb	r3, [r2, #0]
 8017538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801753c:	f44f 7061 	mov.w	r0, #900	; 0x384
 8017540:	4770      	bx	lr
 8017542:	200b      	movs	r0, #11
 8017544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017548 <_execute_event_handler>:
 8017548:	2002      	movs	r0, #2
 801754a:	4770      	bx	lr

0801754c <_cancel_goal_event_handler>:
 801754c:	2003      	movs	r0, #3
 801754e:	4770      	bx	lr

08017550 <_succeed_event_handler>:
 8017550:	2004      	movs	r0, #4
 8017552:	4770      	bx	lr

08017554 <_abort_event_handler>:
 8017554:	2006      	movs	r0, #6
 8017556:	4770      	bx	lr

08017558 <_canceled_event_handler>:
 8017558:	2005      	movs	r0, #5
 801755a:	4770      	bx	lr

0801755c <rcl_action_transition_goal_state>:
 801755c:	b2c2      	uxtb	r2, r0
 801755e:	2a06      	cmp	r2, #6
 8017560:	d810      	bhi.n	8017584 <rcl_action_transition_goal_state+0x28>
 8017562:	2904      	cmp	r1, #4
 8017564:	d80e      	bhi.n	8017584 <rcl_action_transition_goal_state+0x28>
 8017566:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 801756a:	b410      	push	{r4}
 801756c:	1853      	adds	r3, r2, r1
 801756e:	4c06      	ldr	r4, [pc, #24]	; (8017588 <rcl_action_transition_goal_state+0x2c>)
 8017570:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8017574:	b113      	cbz	r3, 801757c <rcl_action_transition_goal_state+0x20>
 8017576:	f85d 4b04 	ldr.w	r4, [sp], #4
 801757a:	4718      	bx	r3
 801757c:	2000      	movs	r0, #0
 801757e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017582:	4770      	bx	lr
 8017584:	2000      	movs	r0, #0
 8017586:	4770      	bx	lr
 8017588:	0801ec48 	.word	0x0801ec48

0801758c <rcl_action_get_zero_initialized_cancel_response>:
 801758c:	b510      	push	{r4, lr}
 801758e:	4c07      	ldr	r4, [pc, #28]	; (80175ac <rcl_action_get_zero_initialized_cancel_response+0x20>)
 8017590:	4686      	mov	lr, r0
 8017592:	4684      	mov	ip, r0
 8017594:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017596:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801759a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801759c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80175a0:	6823      	ldr	r3, [r4, #0]
 80175a2:	4670      	mov	r0, lr
 80175a4:	f8cc 3000 	str.w	r3, [ip]
 80175a8:	bd10      	pop	{r4, pc}
 80175aa:	bf00      	nop
 80175ac:	0801ecd4 	.word	0x0801ecd4

080175b0 <rclc_action_send_result_request>:
 80175b0:	b1d0      	cbz	r0, 80175e8 <rclc_action_send_result_request+0x38>
 80175b2:	4684      	mov	ip, r0
 80175b4:	f8d0 0009 	ldr.w	r0, [r0, #9]
 80175b8:	b500      	push	{lr}
 80175ba:	b087      	sub	sp, #28
 80175bc:	f8dc 100d 	ldr.w	r1, [ip, #13]
 80175c0:	f8dc 2011 	ldr.w	r2, [ip, #17]
 80175c4:	f8dc 3015 	ldr.w	r3, [ip, #21]
 80175c8:	f10d 0e08 	add.w	lr, sp, #8
 80175cc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80175d0:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80175d4:	f10c 0240 	add.w	r2, ip, #64	; 0x40
 80175d8:	a902      	add	r1, sp, #8
 80175da:	3010      	adds	r0, #16
 80175dc:	f7ff fbcc 	bl	8016d78 <rcl_action_send_result_request>
 80175e0:	b920      	cbnz	r0, 80175ec <rclc_action_send_result_request+0x3c>
 80175e2:	b007      	add	sp, #28
 80175e4:	f85d fb04 	ldr.w	pc, [sp], #4
 80175e8:	200b      	movs	r0, #11
 80175ea:	4770      	bx	lr
 80175ec:	9001      	str	r0, [sp, #4]
 80175ee:	f7f6 fb57 	bl	800dca0 <rcutils_reset_error>
 80175f2:	9801      	ldr	r0, [sp, #4]
 80175f4:	b007      	add	sp, #28
 80175f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80175fa:	bf00      	nop

080175fc <rclc_action_take_goal_handle>:
 80175fc:	b160      	cbz	r0, 8017618 <rclc_action_take_goal_handle+0x1c>
 80175fe:	6883      	ldr	r3, [r0, #8]
 8017600:	b143      	cbz	r3, 8017614 <rclc_action_take_goal_handle+0x18>
 8017602:	6819      	ldr	r1, [r3, #0]
 8017604:	2200      	movs	r2, #0
 8017606:	6081      	str	r1, [r0, #8]
 8017608:	721a      	strb	r2, [r3, #8]
 801760a:	68c1      	ldr	r1, [r0, #12]
 801760c:	621a      	str	r2, [r3, #32]
 801760e:	849a      	strh	r2, [r3, #36]	; 0x24
 8017610:	6019      	str	r1, [r3, #0]
 8017612:	60c3      	str	r3, [r0, #12]
 8017614:	4618      	mov	r0, r3
 8017616:	4770      	bx	lr
 8017618:	4603      	mov	r3, r0
 801761a:	e7fb      	b.n	8017614 <rclc_action_take_goal_handle+0x18>

0801761c <rclc_action_remove_used_goal_handle>:
 801761c:	b180      	cbz	r0, 8017640 <rclc_action_remove_used_goal_handle+0x24>
 801761e:	b179      	cbz	r1, 8017640 <rclc_action_remove_used_goal_handle+0x24>
 8017620:	68c3      	ldr	r3, [r0, #12]
 8017622:	4299      	cmp	r1, r3
 8017624:	d00d      	beq.n	8017642 <rclc_action_remove_used_goal_handle+0x26>
 8017626:	b12b      	cbz	r3, 8017634 <rclc_action_remove_used_goal_handle+0x18>
 8017628:	681a      	ldr	r2, [r3, #0]
 801762a:	4291      	cmp	r1, r2
 801762c:	d003      	beq.n	8017636 <rclc_action_remove_used_goal_handle+0x1a>
 801762e:	4613      	mov	r3, r2
 8017630:	2b00      	cmp	r3, #0
 8017632:	d1f9      	bne.n	8017628 <rclc_action_remove_used_goal_handle+0xc>
 8017634:	4770      	bx	lr
 8017636:	680a      	ldr	r2, [r1, #0]
 8017638:	601a      	str	r2, [r3, #0]
 801763a:	6883      	ldr	r3, [r0, #8]
 801763c:	600b      	str	r3, [r1, #0]
 801763e:	6081      	str	r1, [r0, #8]
 8017640:	4770      	bx	lr
 8017642:	680b      	ldr	r3, [r1, #0]
 8017644:	60c3      	str	r3, [r0, #12]
 8017646:	e7f8      	b.n	801763a <rclc_action_remove_used_goal_handle+0x1e>

08017648 <rclc_action_find_goal_handle_by_uuid>:
 8017648:	b538      	push	{r3, r4, r5, lr}
 801764a:	b181      	cbz	r1, 801766e <rclc_action_find_goal_handle_by_uuid+0x26>
 801764c:	b178      	cbz	r0, 801766e <rclc_action_find_goal_handle_by_uuid+0x26>
 801764e:	68c4      	ldr	r4, [r0, #12]
 8017650:	460d      	mov	r5, r1
 8017652:	b914      	cbnz	r4, 801765a <rclc_action_find_goal_handle_by_uuid+0x12>
 8017654:	e009      	b.n	801766a <rclc_action_find_goal_handle_by_uuid+0x22>
 8017656:	6824      	ldr	r4, [r4, #0]
 8017658:	b13c      	cbz	r4, 801766a <rclc_action_find_goal_handle_by_uuid+0x22>
 801765a:	f104 0009 	add.w	r0, r4, #9
 801765e:	2210      	movs	r2, #16
 8017660:	4629      	mov	r1, r5
 8017662:	f005 f845 	bl	801c6f0 <memcmp>
 8017666:	2800      	cmp	r0, #0
 8017668:	d1f5      	bne.n	8017656 <rclc_action_find_goal_handle_by_uuid+0xe>
 801766a:	4620      	mov	r0, r4
 801766c:	bd38      	pop	{r3, r4, r5, pc}
 801766e:	2400      	movs	r4, #0
 8017670:	4620      	mov	r0, r4
 8017672:	bd38      	pop	{r3, r4, r5, pc}

08017674 <rclc_action_find_first_handle_by_status>:
 8017674:	b140      	cbz	r0, 8017688 <rclc_action_find_first_handle_by_status+0x14>
 8017676:	68c0      	ldr	r0, [r0, #12]
 8017678:	b910      	cbnz	r0, 8017680 <rclc_action_find_first_handle_by_status+0xc>
 801767a:	e005      	b.n	8017688 <rclc_action_find_first_handle_by_status+0x14>
 801767c:	6800      	ldr	r0, [r0, #0]
 801767e:	b118      	cbz	r0, 8017688 <rclc_action_find_first_handle_by_status+0x14>
 8017680:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8017684:	428b      	cmp	r3, r1
 8017686:	d1f9      	bne.n	801767c <rclc_action_find_first_handle_by_status+0x8>
 8017688:	4770      	bx	lr
 801768a:	bf00      	nop

0801768c <rclc_action_find_first_terminated_handle>:
 801768c:	b140      	cbz	r0, 80176a0 <rclc_action_find_first_terminated_handle+0x14>
 801768e:	68c0      	ldr	r0, [r0, #12]
 8017690:	b910      	cbnz	r0, 8017698 <rclc_action_find_first_terminated_handle+0xc>
 8017692:	e005      	b.n	80176a0 <rclc_action_find_first_terminated_handle+0x14>
 8017694:	6800      	ldr	r0, [r0, #0]
 8017696:	b118      	cbz	r0, 80176a0 <rclc_action_find_first_terminated_handle+0x14>
 8017698:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801769c:	2b03      	cmp	r3, #3
 801769e:	ddf9      	ble.n	8017694 <rclc_action_find_first_terminated_handle+0x8>
 80176a0:	4770      	bx	lr
 80176a2:	bf00      	nop

080176a4 <rclc_action_find_handle_by_goal_request_sequence_number>:
 80176a4:	b170      	cbz	r0, 80176c4 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 80176a6:	68c0      	ldr	r0, [r0, #12]
 80176a8:	b160      	cbz	r0, 80176c4 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 80176aa:	b410      	push	{r4}
 80176ac:	e001      	b.n	80176b2 <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 80176ae:	6800      	ldr	r0, [r0, #0]
 80176b0:	b128      	cbz	r0, 80176be <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 80176b2:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	; 0x28
 80176b6:	4299      	cmp	r1, r3
 80176b8:	bf08      	it	eq
 80176ba:	4294      	cmpeq	r4, r2
 80176bc:	d1f7      	bne.n	80176ae <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 80176be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80176c2:	4770      	bx	lr
 80176c4:	4770      	bx	lr
 80176c6:	bf00      	nop

080176c8 <rclc_action_find_handle_by_result_request_sequence_number>:
 80176c8:	b170      	cbz	r0, 80176e8 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 80176ca:	68c0      	ldr	r0, [r0, #12]
 80176cc:	b160      	cbz	r0, 80176e8 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 80176ce:	b410      	push	{r4}
 80176d0:	e001      	b.n	80176d6 <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 80176d2:	6800      	ldr	r0, [r0, #0]
 80176d4:	b128      	cbz	r0, 80176e2 <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 80176d6:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	; 0x40
 80176da:	4299      	cmp	r1, r3
 80176dc:	bf08      	it	eq
 80176de:	4294      	cmpeq	r4, r2
 80176e0:	d1f7      	bne.n	80176d2 <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 80176e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80176e6:	4770      	bx	lr
 80176e8:	4770      	bx	lr
 80176ea:	bf00      	nop

080176ec <rclc_action_find_handle_by_cancel_request_sequence_number>:
 80176ec:	b170      	cbz	r0, 801770c <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 80176ee:	68c0      	ldr	r0, [r0, #12]
 80176f0:	b160      	cbz	r0, 801770c <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 80176f2:	b410      	push	{r4}
 80176f4:	e001      	b.n	80176fa <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 80176f6:	6800      	ldr	r0, [r0, #0]
 80176f8:	b128      	cbz	r0, 8017706 <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 80176fa:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	; 0x58
 80176fe:	4299      	cmp	r1, r3
 8017700:	bf08      	it	eq
 8017702:	4294      	cmpeq	r4, r2
 8017704:	d1f7      	bne.n	80176f6 <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 8017706:	f85d 4b04 	ldr.w	r4, [sp], #4
 801770a:	4770      	bx	lr
 801770c:	4770      	bx	lr
 801770e:	bf00      	nop

08017710 <rclc_action_find_first_handle_with_goal_response>:
 8017710:	b140      	cbz	r0, 8017724 <rclc_action_find_first_handle_with_goal_response+0x14>
 8017712:	68c0      	ldr	r0, [r0, #12]
 8017714:	b910      	cbnz	r0, 801771c <rclc_action_find_first_handle_with_goal_response+0xc>
 8017716:	e005      	b.n	8017724 <rclc_action_find_first_handle_with_goal_response+0x14>
 8017718:	6800      	ldr	r0, [r0, #0]
 801771a:	b118      	cbz	r0, 8017724 <rclc_action_find_first_handle_with_goal_response+0x14>
 801771c:	f890 3020 	ldrb.w	r3, [r0, #32]
 8017720:	2b00      	cmp	r3, #0
 8017722:	d0f9      	beq.n	8017718 <rclc_action_find_first_handle_with_goal_response+0x8>
 8017724:	4770      	bx	lr
 8017726:	bf00      	nop

08017728 <rclc_action_find_first_handle_with_result_response>:
 8017728:	b140      	cbz	r0, 801773c <rclc_action_find_first_handle_with_result_response+0x14>
 801772a:	68c0      	ldr	r0, [r0, #12]
 801772c:	b910      	cbnz	r0, 8017734 <rclc_action_find_first_handle_with_result_response+0xc>
 801772e:	e005      	b.n	801773c <rclc_action_find_first_handle_with_result_response+0x14>
 8017730:	6800      	ldr	r0, [r0, #0]
 8017732:	b118      	cbz	r0, 801773c <rclc_action_find_first_handle_with_result_response+0x14>
 8017734:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 8017738:	2b00      	cmp	r3, #0
 801773a:	d0f9      	beq.n	8017730 <rclc_action_find_first_handle_with_result_response+0x8>
 801773c:	4770      	bx	lr
 801773e:	bf00      	nop

08017740 <rclc_action_server_response_goal_request>:
 8017740:	b198      	cbz	r0, 801776a <rclc_action_server_response_goal_request+0x2a>
 8017742:	2200      	movs	r2, #0
 8017744:	460b      	mov	r3, r1
 8017746:	f100 0128 	add.w	r1, r0, #40	; 0x28
 801774a:	b510      	push	{r4, lr}
 801774c:	6844      	ldr	r4, [r0, #4]
 801774e:	b086      	sub	sp, #24
 8017750:	f104 0010 	add.w	r0, r4, #16
 8017754:	9205      	str	r2, [sp, #20]
 8017756:	e9cd 2203 	strd	r2, r2, [sp, #12]
 801775a:	aa03      	add	r2, sp, #12
 801775c:	f88d 300c 	strb.w	r3, [sp, #12]
 8017760:	f7ff fd40 	bl	80171e4 <rcl_action_send_goal_response>
 8017764:	b918      	cbnz	r0, 801776e <rclc_action_server_response_goal_request+0x2e>
 8017766:	b006      	add	sp, #24
 8017768:	bd10      	pop	{r4, pc}
 801776a:	200b      	movs	r0, #11
 801776c:	4770      	bx	lr
 801776e:	9001      	str	r0, [sp, #4]
 8017770:	f7f6 fa96 	bl	800dca0 <rcutils_reset_error>
 8017774:	9801      	ldr	r0, [sp, #4]
 8017776:	b006      	add	sp, #24
 8017778:	bd10      	pop	{r4, pc}
 801777a:	bf00      	nop
 801777c:	0000      	movs	r0, r0
	...

08017780 <rclc_action_server_goal_cancel_accept>:
 8017780:	b310      	cbz	r0, 80177c8 <rclc_action_server_goal_cancel_accept+0x48>
 8017782:	b510      	push	{r4, lr}
 8017784:	b090      	sub	sp, #64	; 0x40
 8017786:	4604      	mov	r4, r0
 8017788:	a806      	add	r0, sp, #24
 801778a:	f7ff feff 	bl	801758c <rcl_action_get_zero_initialized_cancel_response>
 801778e:	2300      	movs	r3, #0
 8017790:	f8d4 0009 	ldr.w	r0, [r4, #9]
 8017794:	46ec      	mov	ip, sp
 8017796:	f8d4 100d 	ldr.w	r1, [r4, #13]
 801779a:	f8d4 2011 	ldr.w	r2, [r4, #17]
 801779e:	f88d 3018 	strb.w	r3, [sp, #24]
 80177a2:	f8d4 3015 	ldr.w	r3, [r4, #21]
 80177a6:	f8cd d01c 	str.w	sp, [sp, #28]
 80177aa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80177ae:	ed9f 7b08 	vldr	d7, [pc, #32]	; 80177d0 <rclc_action_server_goal_cancel_accept+0x50>
 80177b2:	6860      	ldr	r0, [r4, #4]
 80177b4:	aa06      	add	r2, sp, #24
 80177b6:	f104 0158 	add.w	r1, r4, #88	; 0x58
 80177ba:	3010      	adds	r0, #16
 80177bc:	ed8d 7b08 	vstr	d7, [sp, #32]
 80177c0:	f7ff fdc6 	bl	8017350 <rcl_action_send_cancel_response>
 80177c4:	b010      	add	sp, #64	; 0x40
 80177c6:	bd10      	pop	{r4, pc}
 80177c8:	200b      	movs	r0, #11
 80177ca:	4770      	bx	lr
 80177cc:	f3af 8000 	nop.w
 80177d0:	00000001 	.word	0x00000001
 80177d4:	00000001 	.word	0x00000001

080177d8 <rclc_action_server_goal_cancel_reject>:
 80177d8:	b082      	sub	sp, #8
 80177da:	b530      	push	{r4, r5, lr}
 80177dc:	b08b      	sub	sp, #44	; 0x2c
 80177de:	ac0e      	add	r4, sp, #56	; 0x38
 80177e0:	e884 000c 	stmia.w	r4, {r2, r3}
 80177e4:	b188      	cbz	r0, 801780a <rclc_action_server_goal_cancel_reject+0x32>
 80177e6:	4604      	mov	r4, r0
 80177e8:	a801      	add	r0, sp, #4
 80177ea:	460d      	mov	r5, r1
 80177ec:	f7ff fece 	bl	801758c <rcl_action_get_zero_initialized_cancel_response>
 80177f0:	aa01      	add	r2, sp, #4
 80177f2:	a90e      	add	r1, sp, #56	; 0x38
 80177f4:	f104 0010 	add.w	r0, r4, #16
 80177f8:	f88d 5004 	strb.w	r5, [sp, #4]
 80177fc:	f7ff fda8 	bl	8017350 <rcl_action_send_cancel_response>
 8017800:	b00b      	add	sp, #44	; 0x2c
 8017802:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017806:	b002      	add	sp, #8
 8017808:	4770      	bx	lr
 801780a:	200b      	movs	r0, #11
 801780c:	b00b      	add	sp, #44	; 0x2c
 801780e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017812:	b002      	add	sp, #8
 8017814:	4770      	bx	lr
 8017816:	bf00      	nop

08017818 <__atomic_load_8>:
 8017818:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 801781c:	4a16      	ldr	r2, [pc, #88]	; (8017878 <__atomic_load_8+0x60>)
 801781e:	4b17      	ldr	r3, [pc, #92]	; (801787c <__atomic_load_8+0x64>)
 8017820:	f04f 0c01 	mov.w	ip, #1
 8017824:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 8017828:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 801782c:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8017830:	fb02 f101 	mul.w	r1, r2, r1
 8017834:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8017838:	fba3 2301 	umull	r2, r3, r3, r1
 801783c:	091b      	lsrs	r3, r3, #4
 801783e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8017842:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 8017846:	b4d0      	push	{r4, r6, r7}
 8017848:	1ac9      	subs	r1, r1, r3
 801784a:	4c0d      	ldr	r4, [pc, #52]	; (8017880 <__atomic_load_8+0x68>)
 801784c:	1862      	adds	r2, r4, r1
 801784e:	e8d2 3f4f 	ldrexb	r3, [r2]
 8017852:	e8c2 cf46 	strexb	r6, ip, [r2]
 8017856:	2e00      	cmp	r6, #0
 8017858:	d1f9      	bne.n	801784e <__atomic_load_8+0x36>
 801785a:	b2db      	uxtb	r3, r3
 801785c:	f3bf 8f5b 	dmb	ish
 8017860:	2b00      	cmp	r3, #0
 8017862:	d1f4      	bne.n	801784e <__atomic_load_8+0x36>
 8017864:	e9d0 6700 	ldrd	r6, r7, [r0]
 8017868:	f3bf 8f5b 	dmb	ish
 801786c:	5463      	strb	r3, [r4, r1]
 801786e:	4630      	mov	r0, r6
 8017870:	4639      	mov	r1, r7
 8017872:	bcd0      	pop	{r4, r6, r7}
 8017874:	4770      	bx	lr
 8017876:	bf00      	nop
 8017878:	27d4eb2d 	.word	0x27d4eb2d
 801787c:	b21642c9 	.word	0xb21642c9
 8017880:	200108c0 	.word	0x200108c0

08017884 <__atomic_store_8>:
 8017884:	b570      	push	{r4, r5, r6, lr}
 8017886:	ea80 4e10 	eor.w	lr, r0, r0, lsr #16
 801788a:	4916      	ldr	r1, [pc, #88]	; (80178e4 <__atomic_store_8+0x60>)
 801788c:	4c16      	ldr	r4, [pc, #88]	; (80178e8 <__atomic_store_8+0x64>)
 801788e:	f08e 0e3d 	eor.w	lr, lr, #61	; 0x3d
 8017892:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 8017896:	ea8e 1e1e 	eor.w	lr, lr, lr, lsr #4
 801789a:	fb01 fe0e 	mul.w	lr, r1, lr
 801789e:	4913      	ldr	r1, [pc, #76]	; (80178ec <__atomic_store_8+0x68>)
 80178a0:	ea8e 3ede 	eor.w	lr, lr, lr, lsr #15
 80178a4:	fba1 510e 	umull	r5, r1, r1, lr
 80178a8:	f04f 0501 	mov.w	r5, #1
 80178ac:	0909      	lsrs	r1, r1, #4
 80178ae:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
 80178b2:	ebc1 01cc 	rsb	r1, r1, ip, lsl #3
 80178b6:	ebae 0e01 	sub.w	lr, lr, r1
 80178ba:	eb04 0c0e 	add.w	ip, r4, lr
 80178be:	e8dc 1f4f 	ldrexb	r1, [ip]
 80178c2:	e8cc 5f46 	strexb	r6, r5, [ip]
 80178c6:	2e00      	cmp	r6, #0
 80178c8:	d1f9      	bne.n	80178be <__atomic_store_8+0x3a>
 80178ca:	b2c9      	uxtb	r1, r1
 80178cc:	f3bf 8f5b 	dmb	ish
 80178d0:	2900      	cmp	r1, #0
 80178d2:	d1f4      	bne.n	80178be <__atomic_store_8+0x3a>
 80178d4:	e9c0 2300 	strd	r2, r3, [r0]
 80178d8:	f3bf 8f5b 	dmb	ish
 80178dc:	f804 100e 	strb.w	r1, [r4, lr]
 80178e0:	bd70      	pop	{r4, r5, r6, pc}
 80178e2:	bf00      	nop
 80178e4:	27d4eb2d 	.word	0x27d4eb2d
 80178e8:	200108c0 	.word	0x200108c0
 80178ec:	b21642c9 	.word	0xb21642c9

080178f0 <__atomic_exchange_8>:
 80178f0:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 80178f4:	4917      	ldr	r1, [pc, #92]	; (8017954 <__atomic_exchange_8+0x64>)
 80178f6:	f08c 0c3d 	eor.w	ip, ip, #61	; 0x3d
 80178fa:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 80178fe:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 8017902:	fb01 fc0c 	mul.w	ip, r1, ip
 8017906:	4914      	ldr	r1, [pc, #80]	; (8017958 <__atomic_exchange_8+0x68>)
 8017908:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 801790c:	b570      	push	{r4, r5, r6, lr}
 801790e:	4686      	mov	lr, r0
 8017910:	fba1 010c 	umull	r0, r1, r1, ip
 8017914:	4d11      	ldr	r5, [pc, #68]	; (801795c <__atomic_exchange_8+0x6c>)
 8017916:	f04f 0001 	mov.w	r0, #1
 801791a:	0909      	lsrs	r1, r1, #4
 801791c:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 8017920:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 8017924:	ebac 0c01 	sub.w	ip, ip, r1
 8017928:	eb05 010c 	add.w	r1, r5, ip
 801792c:	e8d1 4f4f 	ldrexb	r4, [r1]
 8017930:	e8c1 0f46 	strexb	r6, r0, [r1]
 8017934:	2e00      	cmp	r6, #0
 8017936:	d1f9      	bne.n	801792c <__atomic_exchange_8+0x3c>
 8017938:	b2e4      	uxtb	r4, r4
 801793a:	f3bf 8f5b 	dmb	ish
 801793e:	2c00      	cmp	r4, #0
 8017940:	d1f4      	bne.n	801792c <__atomic_exchange_8+0x3c>
 8017942:	e9de 0100 	ldrd	r0, r1, [lr]
 8017946:	e9ce 2300 	strd	r2, r3, [lr]
 801794a:	f3bf 8f5b 	dmb	ish
 801794e:	f805 400c 	strb.w	r4, [r5, ip]
 8017952:	bd70      	pop	{r4, r5, r6, pc}
 8017954:	27d4eb2d 	.word	0x27d4eb2d
 8017958:	b21642c9 	.word	0xb21642c9
 801795c:	200108c0 	.word	0x200108c0

08017960 <rcutils_get_env>:
 8017960:	b168      	cbz	r0, 801797e <rcutils_get_env+0x1e>
 8017962:	b510      	push	{r4, lr}
 8017964:	460c      	mov	r4, r1
 8017966:	b129      	cbz	r1, 8017974 <rcutils_get_env+0x14>
 8017968:	f004 fb2c 	bl	801bfc4 <getenv>
 801796c:	b120      	cbz	r0, 8017978 <rcutils_get_env+0x18>
 801796e:	6020      	str	r0, [r4, #0]
 8017970:	2000      	movs	r0, #0
 8017972:	bd10      	pop	{r4, pc}
 8017974:	4803      	ldr	r0, [pc, #12]	; (8017984 <rcutils_get_env+0x24>)
 8017976:	bd10      	pop	{r4, pc}
 8017978:	4b03      	ldr	r3, [pc, #12]	; (8017988 <rcutils_get_env+0x28>)
 801797a:	6023      	str	r3, [r4, #0]
 801797c:	bd10      	pop	{r4, pc}
 801797e:	4803      	ldr	r0, [pc, #12]	; (801798c <rcutils_get_env+0x2c>)
 8017980:	4770      	bx	lr
 8017982:	bf00      	nop
 8017984:	0801ed14 	.word	0x0801ed14
 8017988:	0801ee38 	.word	0x0801ee38
 801798c:	0801ecf8 	.word	0x0801ecf8

08017990 <rcutils_is_directory>:
 8017990:	2000      	movs	r0, #0
 8017992:	4770      	bx	lr

08017994 <rcutils_join_path>:
 8017994:	b082      	sub	sp, #8
 8017996:	2000      	movs	r0, #0
 8017998:	e88d 000c 	stmia.w	sp, {r2, r3}
 801799c:	b002      	add	sp, #8
 801799e:	4770      	bx	lr

080179a0 <rcutils_to_native_path>:
 80179a0:	b084      	sub	sp, #16
 80179a2:	2000      	movs	r0, #0
 80179a4:	f10d 0c04 	add.w	ip, sp, #4
 80179a8:	b004      	add	sp, #16
 80179aa:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 80179ae:	4770      	bx	lr

080179b0 <rcutils_format_string_limit>:
 80179b0:	b40f      	push	{r0, r1, r2, r3}
 80179b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80179b4:	b083      	sub	sp, #12
 80179b6:	ac08      	add	r4, sp, #32
 80179b8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80179ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80179be:	b326      	cbz	r6, 8017a0a <rcutils_format_string_limit+0x5a>
 80179c0:	a808      	add	r0, sp, #32
 80179c2:	f7f6 f949 	bl	800dc58 <rcutils_allocator_is_valid>
 80179c6:	b300      	cbz	r0, 8017a0a <rcutils_format_string_limit+0x5a>
 80179c8:	2100      	movs	r1, #0
 80179ca:	ab0f      	add	r3, sp, #60	; 0x3c
 80179cc:	4632      	mov	r2, r6
 80179ce:	4608      	mov	r0, r1
 80179d0:	e9cd 3300 	strd	r3, r3, [sp]
 80179d4:	f000 f906 	bl	8017be4 <rcutils_vsnprintf>
 80179d8:	1c43      	adds	r3, r0, #1
 80179da:	4605      	mov	r5, r0
 80179dc:	d015      	beq.n	8017a0a <rcutils_format_string_limit+0x5a>
 80179de:	1c47      	adds	r7, r0, #1
 80179e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80179e2:	429f      	cmp	r7, r3
 80179e4:	d901      	bls.n	80179ea <rcutils_format_string_limit+0x3a>
 80179e6:	1e5d      	subs	r5, r3, #1
 80179e8:	461f      	mov	r7, r3
 80179ea:	9b08      	ldr	r3, [sp, #32]
 80179ec:	4638      	mov	r0, r7
 80179ee:	990c      	ldr	r1, [sp, #48]	; 0x30
 80179f0:	4798      	blx	r3
 80179f2:	4604      	mov	r4, r0
 80179f4:	b148      	cbz	r0, 8017a0a <rcutils_format_string_limit+0x5a>
 80179f6:	4632      	mov	r2, r6
 80179f8:	4639      	mov	r1, r7
 80179fa:	9b01      	ldr	r3, [sp, #4]
 80179fc:	f000 f8f2 	bl	8017be4 <rcutils_vsnprintf>
 8017a00:	2800      	cmp	r0, #0
 8017a02:	db09      	blt.n	8017a18 <rcutils_format_string_limit+0x68>
 8017a04:	2300      	movs	r3, #0
 8017a06:	5563      	strb	r3, [r4, r5]
 8017a08:	e000      	b.n	8017a0c <rcutils_format_string_limit+0x5c>
 8017a0a:	2400      	movs	r4, #0
 8017a0c:	4620      	mov	r0, r4
 8017a0e:	b003      	add	sp, #12
 8017a10:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8017a14:	b004      	add	sp, #16
 8017a16:	4770      	bx	lr
 8017a18:	4620      	mov	r0, r4
 8017a1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017a1c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017a1e:	2400      	movs	r4, #0
 8017a20:	4798      	blx	r3
 8017a22:	e7f3      	b.n	8017a0c <rcutils_format_string_limit+0x5c>

08017a24 <rcutils_repl_str>:
 8017a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a28:	ed2d 8b02 	vpush	{d8}
 8017a2c:	b087      	sub	sp, #28
 8017a2e:	2600      	movs	r6, #0
 8017a30:	4680      	mov	r8, r0
 8017a32:	468a      	mov	sl, r1
 8017a34:	9000      	str	r0, [sp, #0]
 8017a36:	4608      	mov	r0, r1
 8017a38:	ee08 2a10 	vmov	s16, r2
 8017a3c:	4699      	mov	r9, r3
 8017a3e:	2510      	movs	r5, #16
 8017a40:	f7e8 fc5e 	bl	8000300 <strlen>
 8017a44:	4637      	mov	r7, r6
 8017a46:	46b3      	mov	fp, r6
 8017a48:	9001      	str	r0, [sp, #4]
 8017a4a:	e01e      	b.n	8017a8a <rcutils_repl_str+0x66>
 8017a4c:	f10b 0b01 	add.w	fp, fp, #1
 8017a50:	9b01      	ldr	r3, [sp, #4]
 8017a52:	455e      	cmp	r6, fp
 8017a54:	eb04 0803 	add.w	r8, r4, r3
 8017a58:	d211      	bcs.n	8017a7e <rcutils_repl_str+0x5a>
 8017a5a:	442e      	add	r6, r5
 8017a5c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8017a60:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8017a64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017a68:	00b1      	lsls	r1, r6, #2
 8017a6a:	4798      	blx	r3
 8017a6c:	2800      	cmp	r0, #0
 8017a6e:	f000 8088 	beq.w	8017b82 <rcutils_repl_str+0x15e>
 8017a72:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 8017a76:	4607      	mov	r7, r0
 8017a78:	bf28      	it	cs
 8017a7a:	f44f 1580 	movcs.w	r5, #1048576	; 0x100000
 8017a7e:	9a00      	ldr	r2, [sp, #0]
 8017a80:	eb07 038b 	add.w	r3, r7, fp, lsl #2
 8017a84:	1aa4      	subs	r4, r4, r2
 8017a86:	f843 4c04 	str.w	r4, [r3, #-4]
 8017a8a:	4651      	mov	r1, sl
 8017a8c:	4640      	mov	r0, r8
 8017a8e:	f004 fe93 	bl	801c7b8 <strstr>
 8017a92:	4604      	mov	r4, r0
 8017a94:	4638      	mov	r0, r7
 8017a96:	2c00      	cmp	r4, #0
 8017a98:	d1d8      	bne.n	8017a4c <rcutils_repl_str+0x28>
 8017a9a:	4640      	mov	r0, r8
 8017a9c:	f7e8 fc30 	bl	8000300 <strlen>
 8017aa0:	9b00      	ldr	r3, [sp, #0]
 8017aa2:	eba8 0803 	sub.w	r8, r8, r3
 8017aa6:	eb08 0400 	add.w	r4, r8, r0
 8017aaa:	9402      	str	r4, [sp, #8]
 8017aac:	f1bb 0f00 	cmp.w	fp, #0
 8017ab0:	d045      	beq.n	8017b3e <rcutils_repl_str+0x11a>
 8017ab2:	ee18 0a10 	vmov	r0, s16
 8017ab6:	f7e8 fc23 	bl	8000300 <strlen>
 8017aba:	9a01      	ldr	r2, [sp, #4]
 8017abc:	4606      	mov	r6, r0
 8017abe:	f8d9 3000 	ldr.w	r3, [r9]
 8017ac2:	1a82      	subs	r2, r0, r2
 8017ac4:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8017ac8:	fb0b 4202 	mla	r2, fp, r2, r4
 8017acc:	1c50      	adds	r0, r2, #1
 8017ace:	9205      	str	r2, [sp, #20]
 8017ad0:	4798      	blx	r3
 8017ad2:	4682      	mov	sl, r0
 8017ad4:	2800      	cmp	r0, #0
 8017ad6:	d054      	beq.n	8017b82 <rcutils_repl_str+0x15e>
 8017ad8:	683a      	ldr	r2, [r7, #0]
 8017ada:	463d      	mov	r5, r7
 8017adc:	9900      	ldr	r1, [sp, #0]
 8017ade:	2401      	movs	r4, #1
 8017ae0:	f004 ff61 	bl	801c9a6 <memcpy>
 8017ae4:	683b      	ldr	r3, [r7, #0]
 8017ae6:	e9cd 7a03 	strd	r7, sl, [sp, #12]
 8017aea:	eb0a 0803 	add.w	r8, sl, r3
 8017aee:	ee18 7a10 	vmov	r7, s16
 8017af2:	f8dd a000 	ldr.w	sl, [sp]
 8017af6:	f8cd 9000 	str.w	r9, [sp]
 8017afa:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8017afe:	4632      	mov	r2, r6
 8017b00:	4639      	mov	r1, r7
 8017b02:	4640      	mov	r0, r8
 8017b04:	44b0      	add	r8, r6
 8017b06:	f004 ff4e 	bl	801c9a6 <memcpy>
 8017b0a:	f855 2b04 	ldr.w	r2, [r5], #4
 8017b0e:	45a3      	cmp	fp, r4
 8017b10:	444a      	add	r2, r9
 8017b12:	eb0a 0102 	add.w	r1, sl, r2
 8017b16:	d02a      	beq.n	8017b6e <rcutils_repl_str+0x14a>
 8017b18:	6828      	ldr	r0, [r5, #0]
 8017b1a:	1a82      	subs	r2, r0, r2
 8017b1c:	4640      	mov	r0, r8
 8017b1e:	4490      	add	r8, r2
 8017b20:	f004 ff41 	bl	801c9a6 <memcpy>
 8017b24:	1c62      	adds	r2, r4, #1
 8017b26:	45a3      	cmp	fp, r4
 8017b28:	4614      	mov	r4, r2
 8017b2a:	d8e8      	bhi.n	8017afe <rcutils_repl_str+0xda>
 8017b2c:	f8dd 9000 	ldr.w	r9, [sp]
 8017b30:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 8017b34:	2300      	movs	r3, #0
 8017b36:	9a05      	ldr	r2, [sp, #20]
 8017b38:	f80a 3002 	strb.w	r3, [sl, r2]
 8017b3c:	e00b      	b.n	8017b56 <rcutils_repl_str+0x132>
 8017b3e:	4620      	mov	r0, r4
 8017b40:	f8d9 3000 	ldr.w	r3, [r9]
 8017b44:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8017b48:	3001      	adds	r0, #1
 8017b4a:	4798      	blx	r3
 8017b4c:	4682      	mov	sl, r0
 8017b4e:	b110      	cbz	r0, 8017b56 <rcutils_repl_str+0x132>
 8017b50:	9900      	ldr	r1, [sp, #0]
 8017b52:	f004 ff20 	bl	801c996 <strcpy>
 8017b56:	4638      	mov	r0, r7
 8017b58:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8017b5c:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8017b60:	4798      	blx	r3
 8017b62:	4650      	mov	r0, sl
 8017b64:	b007      	add	sp, #28
 8017b66:	ecbd 8b02 	vpop	{d8}
 8017b6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b6e:	9b02      	ldr	r3, [sp, #8]
 8017b70:	4640      	mov	r0, r8
 8017b72:	f8dd 9000 	ldr.w	r9, [sp]
 8017b76:	1a9a      	subs	r2, r3, r2
 8017b78:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 8017b7c:	f004 ff13 	bl	801c9a6 <memcpy>
 8017b80:	e7d8      	b.n	8017b34 <rcutils_repl_str+0x110>
 8017b82:	f04f 0a00 	mov.w	sl, #0
 8017b86:	e7e6      	b.n	8017b56 <rcutils_repl_str+0x132>

08017b88 <rcutils_snprintf>:
 8017b88:	b40c      	push	{r2, r3}
 8017b8a:	b530      	push	{r4, r5, lr}
 8017b8c:	b083      	sub	sp, #12
 8017b8e:	ab06      	add	r3, sp, #24
 8017b90:	f853 2b04 	ldr.w	r2, [r3], #4
 8017b94:	9301      	str	r3, [sp, #4]
 8017b96:	b1e2      	cbz	r2, 8017bd2 <rcutils_snprintf+0x4a>
 8017b98:	fab0 f480 	clz	r4, r0
 8017b9c:	fab1 f581 	clz	r5, r1
 8017ba0:	ea50 0c01 	orrs.w	ip, r0, r1
 8017ba4:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8017ba8:	ea4f 1555 	mov.w	r5, r5, lsr #5
 8017bac:	d008      	beq.n	8017bc0 <rcutils_snprintf+0x38>
 8017bae:	b984      	cbnz	r4, 8017bd2 <rcutils_snprintf+0x4a>
 8017bb0:	b97d      	cbnz	r5, 8017bd2 <rcutils_snprintf+0x4a>
 8017bb2:	f004 fd8f 	bl	801c6d4 <vsniprintf>
 8017bb6:	b003      	add	sp, #12
 8017bb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017bbc:	b002      	add	sp, #8
 8017bbe:	4770      	bx	lr
 8017bc0:	4661      	mov	r1, ip
 8017bc2:	4660      	mov	r0, ip
 8017bc4:	f004 fd86 	bl	801c6d4 <vsniprintf>
 8017bc8:	b003      	add	sp, #12
 8017bca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017bce:	b002      	add	sp, #8
 8017bd0:	4770      	bx	lr
 8017bd2:	f004 feb3 	bl	801c93c <__errno>
 8017bd6:	2216      	movs	r2, #22
 8017bd8:	4603      	mov	r3, r0
 8017bda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017bde:	601a      	str	r2, [r3, #0]
 8017be0:	e7e9      	b.n	8017bb6 <rcutils_snprintf+0x2e>
 8017be2:	bf00      	nop

08017be4 <rcutils_vsnprintf>:
 8017be4:	b570      	push	{r4, r5, r6, lr}
 8017be6:	b1b2      	cbz	r2, 8017c16 <rcutils_vsnprintf+0x32>
 8017be8:	fab0 f480 	clz	r4, r0
 8017bec:	fab1 f581 	clz	r5, r1
 8017bf0:	ea50 0c01 	orrs.w	ip, r0, r1
 8017bf4:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8017bf8:	ea4f 1555 	mov.w	r5, r5, lsr #5
 8017bfc:	d005      	beq.n	8017c0a <rcutils_vsnprintf+0x26>
 8017bfe:	b954      	cbnz	r4, 8017c16 <rcutils_vsnprintf+0x32>
 8017c00:	b94d      	cbnz	r5, 8017c16 <rcutils_vsnprintf+0x32>
 8017c02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017c06:	f004 bd65 	b.w	801c6d4 <vsniprintf>
 8017c0a:	4661      	mov	r1, ip
 8017c0c:	4660      	mov	r0, ip
 8017c0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017c12:	f004 bd5f 	b.w	801c6d4 <vsniprintf>
 8017c16:	f004 fe91 	bl	801c93c <__errno>
 8017c1a:	2316      	movs	r3, #22
 8017c1c:	6003      	str	r3, [r0, #0]
 8017c1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017c22:	bd70      	pop	{r4, r5, r6, pc}

08017c24 <rcutils_strdup>:
 8017c24:	b084      	sub	sp, #16
 8017c26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017c28:	ac07      	add	r4, sp, #28
 8017c2a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8017c2c:	4605      	mov	r5, r0
 8017c2e:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8017c32:	b1d0      	cbz	r0, 8017c6a <rcutils_strdup+0x46>
 8017c34:	460c      	mov	r4, r1
 8017c36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017c3a:	2100      	movs	r1, #0
 8017c3c:	f7e8 fb10 	bl	8000260 <memchr>
 8017c40:	b180      	cbz	r0, 8017c64 <rcutils_strdup+0x40>
 8017c42:	1b46      	subs	r6, r0, r5
 8017c44:	1c70      	adds	r0, r6, #1
 8017c46:	4639      	mov	r1, r7
 8017c48:	47a0      	blx	r4
 8017c4a:	4604      	mov	r4, r0
 8017c4c:	b128      	cbz	r0, 8017c5a <rcutils_strdup+0x36>
 8017c4e:	4632      	mov	r2, r6
 8017c50:	4629      	mov	r1, r5
 8017c52:	f004 fea8 	bl	801c9a6 <memcpy>
 8017c56:	2300      	movs	r3, #0
 8017c58:	55a3      	strb	r3, [r4, r6]
 8017c5a:	4620      	mov	r0, r4
 8017c5c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8017c60:	b004      	add	sp, #16
 8017c62:	4770      	bx	lr
 8017c64:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8017c68:	e7ed      	b.n	8017c46 <rcutils_strdup+0x22>
 8017c6a:	4604      	mov	r4, r0
 8017c6c:	e7f5      	b.n	8017c5a <rcutils_strdup+0x36>
 8017c6e:	bf00      	nop

08017c70 <rcutils_strndup>:
 8017c70:	b082      	sub	sp, #8
 8017c72:	b570      	push	{r4, r5, r6, lr}
 8017c74:	ac04      	add	r4, sp, #16
 8017c76:	4606      	mov	r6, r0
 8017c78:	e884 000c 	stmia.w	r4, {r2, r3}
 8017c7c:	b1b8      	cbz	r0, 8017cae <rcutils_strndup+0x3e>
 8017c7e:	460c      	mov	r4, r1
 8017c80:	460a      	mov	r2, r1
 8017c82:	2100      	movs	r1, #0
 8017c84:	f7e8 faec 	bl	8000260 <memchr>
 8017c88:	b100      	cbz	r0, 8017c8c <rcutils_strndup+0x1c>
 8017c8a:	1b84      	subs	r4, r0, r6
 8017c8c:	9b04      	ldr	r3, [sp, #16]
 8017c8e:	1c60      	adds	r0, r4, #1
 8017c90:	9908      	ldr	r1, [sp, #32]
 8017c92:	4798      	blx	r3
 8017c94:	4605      	mov	r5, r0
 8017c96:	b128      	cbz	r0, 8017ca4 <rcutils_strndup+0x34>
 8017c98:	4622      	mov	r2, r4
 8017c9a:	4631      	mov	r1, r6
 8017c9c:	f004 fe83 	bl	801c9a6 <memcpy>
 8017ca0:	2300      	movs	r3, #0
 8017ca2:	552b      	strb	r3, [r5, r4]
 8017ca4:	4628      	mov	r0, r5
 8017ca6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017caa:	b002      	add	sp, #8
 8017cac:	4770      	bx	lr
 8017cae:	4605      	mov	r5, r0
 8017cb0:	e7f8      	b.n	8017ca4 <rcutils_strndup+0x34>
 8017cb2:	bf00      	nop

08017cb4 <rcutils_get_zero_initialized_string_map>:
 8017cb4:	2000      	movs	r0, #0
 8017cb6:	4b01      	ldr	r3, [pc, #4]	; (8017cbc <rcutils_get_zero_initialized_string_map+0x8>)
 8017cb8:	6018      	str	r0, [r3, #0]
 8017cba:	4770      	bx	lr
 8017cbc:	200108d8 	.word	0x200108d8

08017cc0 <rcutils_string_map_reserve>:
 8017cc0:	2800      	cmp	r0, #0
 8017cc2:	d03e      	beq.n	8017d42 <rcutils_string_map_reserve+0x82>
 8017cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017cc6:	6805      	ldr	r5, [r0, #0]
 8017cc8:	4606      	mov	r6, r0
 8017cca:	460c      	mov	r4, r1
 8017ccc:	b12d      	cbz	r5, 8017cda <rcutils_string_map_reserve+0x1a>
 8017cce:	68ab      	ldr	r3, [r5, #8]
 8017cd0:	42a3      	cmp	r3, r4
 8017cd2:	d904      	bls.n	8017cde <rcutils_string_map_reserve+0x1e>
 8017cd4:	461c      	mov	r4, r3
 8017cd6:	2d00      	cmp	r5, #0
 8017cd8:	d1f9      	bne.n	8017cce <rcutils_string_map_reserve+0xe>
 8017cda:	201f      	movs	r0, #31
 8017cdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017cde:	686b      	ldr	r3, [r5, #4]
 8017ce0:	42a3      	cmp	r3, r4
 8017ce2:	d02a      	beq.n	8017d3a <rcutils_string_map_reserve+0x7a>
 8017ce4:	69e9      	ldr	r1, [r5, #28]
 8017ce6:	b304      	cbz	r4, 8017d2a <rcutils_string_map_reserve+0x6a>
 8017ce8:	f1b4 5f00 	cmp.w	r4, #536870912	; 0x20000000
 8017cec:	d227      	bcs.n	8017d3e <rcutils_string_map_reserve+0x7e>
 8017cee:	00e7      	lsls	r7, r4, #3
 8017cf0:	460a      	mov	r2, r1
 8017cf2:	696b      	ldr	r3, [r5, #20]
 8017cf4:	6828      	ldr	r0, [r5, #0]
 8017cf6:	4639      	mov	r1, r7
 8017cf8:	4798      	blx	r3
 8017cfa:	b300      	cbz	r0, 8017d3e <rcutils_string_map_reserve+0x7e>
 8017cfc:	6835      	ldr	r5, [r6, #0]
 8017cfe:	686a      	ldr	r2, [r5, #4]
 8017d00:	6028      	str	r0, [r5, #0]
 8017d02:	42a2      	cmp	r2, r4
 8017d04:	d216      	bcs.n	8017d34 <rcutils_string_map_reserve+0x74>
 8017d06:	43d1      	mvns	r1, r2
 8017d08:	eb00 03c2 	add.w	r3, r0, r2, lsl #3
 8017d0c:	4421      	add	r1, r4
 8017d0e:	2909      	cmp	r1, #9
 8017d10:	d919      	bls.n	8017d46 <rcutils_string_map_reserve+0x86>
 8017d12:	0759      	lsls	r1, r3, #29
 8017d14:	d117      	bne.n	8017d46 <rcutils_string_map_reserve+0x86>
 8017d16:	1aa1      	subs	r1, r4, r2
 8017d18:	2600      	movs	r6, #0
 8017d1a:	2200      	movs	r2, #0
 8017d1c:	2700      	movs	r7, #0
 8017d1e:	3201      	adds	r2, #1
 8017d20:	4291      	cmp	r1, r2
 8017d22:	e8e3 6702 	strd	r6, r7, [r3], #8
 8017d26:	d8fa      	bhi.n	8017d1e <rcutils_string_map_reserve+0x5e>
 8017d28:	e004      	b.n	8017d34 <rcutils_string_map_reserve+0x74>
 8017d2a:	692b      	ldr	r3, [r5, #16]
 8017d2c:	6828      	ldr	r0, [r5, #0]
 8017d2e:	4798      	blx	r3
 8017d30:	6835      	ldr	r5, [r6, #0]
 8017d32:	602c      	str	r4, [r5, #0]
 8017d34:	2000      	movs	r0, #0
 8017d36:	606c      	str	r4, [r5, #4]
 8017d38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017d3a:	2000      	movs	r0, #0
 8017d3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017d3e:	200a      	movs	r0, #10
 8017d40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017d42:	200b      	movs	r0, #11
 8017d44:	4770      	bx	lr
 8017d46:	4438      	add	r0, r7
 8017d48:	2200      	movs	r2, #0
 8017d4a:	e9c3 2200 	strd	r2, r2, [r3]
 8017d4e:	3308      	adds	r3, #8
 8017d50:	4283      	cmp	r3, r0
 8017d52:	d1fa      	bne.n	8017d4a <rcutils_string_map_reserve+0x8a>
 8017d54:	e7ee      	b.n	8017d34 <rcutils_string_map_reserve+0x74>
 8017d56:	bf00      	nop

08017d58 <rcutils_string_map_init>:
 8017d58:	b082      	sub	sp, #8
 8017d5a:	b570      	push	{r4, r5, r6, lr}
 8017d5c:	ac04      	add	r4, sp, #16
 8017d5e:	e884 000c 	stmia.w	r4, {r2, r3}
 8017d62:	b378      	cbz	r0, 8017dc4 <rcutils_string_map_init+0x6c>
 8017d64:	6806      	ldr	r6, [r0, #0]
 8017d66:	4604      	mov	r4, r0
 8017d68:	b12e      	cbz	r6, 8017d76 <rcutils_string_map_init+0x1e>
 8017d6a:	251e      	movs	r5, #30
 8017d6c:	4628      	mov	r0, r5
 8017d6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017d72:	b002      	add	sp, #8
 8017d74:	4770      	bx	lr
 8017d76:	a804      	add	r0, sp, #16
 8017d78:	460d      	mov	r5, r1
 8017d7a:	f7f5 ff6d 	bl	800dc58 <rcutils_allocator_is_valid>
 8017d7e:	b308      	cbz	r0, 8017dc4 <rcutils_string_map_init+0x6c>
 8017d80:	9b04      	ldr	r3, [sp, #16]
 8017d82:	2020      	movs	r0, #32
 8017d84:	9908      	ldr	r1, [sp, #32]
 8017d86:	4798      	blx	r3
 8017d88:	6020      	str	r0, [r4, #0]
 8017d8a:	b308      	cbz	r0, 8017dd0 <rcutils_string_map_init+0x78>
 8017d8c:	f10d 0e10 	add.w	lr, sp, #16
 8017d90:	6086      	str	r6, [r0, #8]
 8017d92:	f100 0c0c 	add.w	ip, r0, #12
 8017d96:	e9c0 6600 	strd	r6, r6, [r0]
 8017d9a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017d9e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017da2:	f8de 3000 	ldr.w	r3, [lr]
 8017da6:	4629      	mov	r1, r5
 8017da8:	4620      	mov	r0, r4
 8017daa:	f8cc 3000 	str.w	r3, [ip]
 8017dae:	f7ff ff87 	bl	8017cc0 <rcutils_string_map_reserve>
 8017db2:	4605      	mov	r5, r0
 8017db4:	2800      	cmp	r0, #0
 8017db6:	d0d9      	beq.n	8017d6c <rcutils_string_map_init+0x14>
 8017db8:	9b05      	ldr	r3, [sp, #20]
 8017dba:	9908      	ldr	r1, [sp, #32]
 8017dbc:	6820      	ldr	r0, [r4, #0]
 8017dbe:	4798      	blx	r3
 8017dc0:	6026      	str	r6, [r4, #0]
 8017dc2:	e7d3      	b.n	8017d6c <rcutils_string_map_init+0x14>
 8017dc4:	250b      	movs	r5, #11
 8017dc6:	4628      	mov	r0, r5
 8017dc8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017dcc:	b002      	add	sp, #8
 8017dce:	4770      	bx	lr
 8017dd0:	250a      	movs	r5, #10
 8017dd2:	e7cb      	b.n	8017d6c <rcutils_string_map_init+0x14>

08017dd4 <rcutils_string_map_fini>:
 8017dd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017dd8:	b083      	sub	sp, #12
 8017dda:	2800      	cmp	r0, #0
 8017ddc:	d03e      	beq.n	8017e5c <rcutils_string_map_fini+0x88>
 8017dde:	6804      	ldr	r4, [r0, #0]
 8017de0:	4606      	mov	r6, r0
 8017de2:	2c00      	cmp	r4, #0
 8017de4:	d036      	beq.n	8017e54 <rcutils_string_map_fini+0x80>
 8017de6:	6863      	ldr	r3, [r4, #4]
 8017de8:	b34b      	cbz	r3, 8017e3e <rcutils_string_map_fini+0x6a>
 8017dea:	2500      	movs	r5, #0
 8017dec:	6822      	ldr	r2, [r4, #0]
 8017dee:	462f      	mov	r7, r5
 8017df0:	f852 0035 	ldr.w	r0, [r2, r5, lsl #3]
 8017df4:	ea4f 08c5 	mov.w	r8, r5, lsl #3
 8017df8:	b1f0      	cbz	r0, 8017e38 <rcutils_string_map_fini+0x64>
 8017dfa:	69e1      	ldr	r1, [r4, #28]
 8017dfc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8017e00:	9101      	str	r1, [sp, #4]
 8017e02:	47c8      	blx	r9
 8017e04:	6823      	ldr	r3, [r4, #0]
 8017e06:	9901      	ldr	r1, [sp, #4]
 8017e08:	eb03 0208 	add.w	r2, r3, r8
 8017e0c:	f843 7035 	str.w	r7, [r3, r5, lsl #3]
 8017e10:	3501      	adds	r5, #1
 8017e12:	6850      	ldr	r0, [r2, #4]
 8017e14:	47c8      	blx	r9
 8017e16:	68a3      	ldr	r3, [r4, #8]
 8017e18:	6822      	ldr	r2, [r4, #0]
 8017e1a:	3b01      	subs	r3, #1
 8017e1c:	4442      	add	r2, r8
 8017e1e:	6057      	str	r7, [r2, #4]
 8017e20:	60a3      	str	r3, [r4, #8]
 8017e22:	6834      	ldr	r4, [r6, #0]
 8017e24:	6863      	ldr	r3, [r4, #4]
 8017e26:	429d      	cmp	r5, r3
 8017e28:	d209      	bcs.n	8017e3e <rcutils_string_map_fini+0x6a>
 8017e2a:	6822      	ldr	r2, [r4, #0]
 8017e2c:	ea4f 08c5 	mov.w	r8, r5, lsl #3
 8017e30:	f852 0035 	ldr.w	r0, [r2, r5, lsl #3]
 8017e34:	2800      	cmp	r0, #0
 8017e36:	d1e0      	bne.n	8017dfa <rcutils_string_map_fini+0x26>
 8017e38:	3501      	adds	r5, #1
 8017e3a:	429d      	cmp	r5, r3
 8017e3c:	d3d8      	bcc.n	8017df0 <rcutils_string_map_fini+0x1c>
 8017e3e:	2100      	movs	r1, #0
 8017e40:	4630      	mov	r0, r6
 8017e42:	f7ff ff3d 	bl	8017cc0 <rcutils_string_map_reserve>
 8017e46:	4604      	mov	r4, r0
 8017e48:	b920      	cbnz	r0, 8017e54 <rcutils_string_map_fini+0x80>
 8017e4a:	6830      	ldr	r0, [r6, #0]
 8017e4c:	6903      	ldr	r3, [r0, #16]
 8017e4e:	69c1      	ldr	r1, [r0, #28]
 8017e50:	4798      	blx	r3
 8017e52:	6034      	str	r4, [r6, #0]
 8017e54:	4620      	mov	r0, r4
 8017e56:	b003      	add	sp, #12
 8017e58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017e5c:	240b      	movs	r4, #11
 8017e5e:	4620      	mov	r0, r4
 8017e60:	b003      	add	sp, #12
 8017e62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017e66:	bf00      	nop

08017e68 <rcutils_string_map_getn>:
 8017e68:	b338      	cbz	r0, 8017eba <rcutils_string_map_getn+0x52>
 8017e6a:	6803      	ldr	r3, [r0, #0]
 8017e6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017e70:	4688      	mov	r8, r1
 8017e72:	b1d9      	cbz	r1, 8017eac <rcutils_string_map_getn+0x44>
 8017e74:	fab3 f483 	clz	r4, r3
 8017e78:	0964      	lsrs	r4, r4, #5
 8017e7a:	b1bb      	cbz	r3, 8017eac <rcutils_string_map_getn+0x44>
 8017e7c:	4691      	mov	r9, r2
 8017e7e:	e9d3 7600 	ldrd	r7, r6, [r3]
 8017e82:	b19e      	cbz	r6, 8017eac <rcutils_string_map_getn+0x44>
 8017e84:	f857 5034 	ldr.w	r5, [r7, r4, lsl #3]
 8017e88:	eb07 0ac4 	add.w	sl, r7, r4, lsl #3
 8017e8c:	3401      	adds	r4, #1
 8017e8e:	4628      	mov	r0, r5
 8017e90:	b155      	cbz	r5, 8017ea8 <rcutils_string_map_getn+0x40>
 8017e92:	f7e8 fa35 	bl	8000300 <strlen>
 8017e96:	4602      	mov	r2, r0
 8017e98:	4629      	mov	r1, r5
 8017e9a:	4640      	mov	r0, r8
 8017e9c:	454a      	cmp	r2, r9
 8017e9e:	bf38      	it	cc
 8017ea0:	464a      	movcc	r2, r9
 8017ea2:	f004 fc64 	bl	801c76e <strncmp>
 8017ea6:	b120      	cbz	r0, 8017eb2 <rcutils_string_map_getn+0x4a>
 8017ea8:	42a6      	cmp	r6, r4
 8017eaa:	d1eb      	bne.n	8017e84 <rcutils_string_map_getn+0x1c>
 8017eac:	2000      	movs	r0, #0
 8017eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017eb2:	f8da 0004 	ldr.w	r0, [sl, #4]
 8017eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017eba:	4770      	bx	lr
 8017ebc:	0000      	movs	r0, r0
	...

08017ec0 <rmw_get_zero_initialized_context>:
 8017ec0:	b510      	push	{r4, lr}
 8017ec2:	4604      	mov	r4, r0
 8017ec4:	3010      	adds	r0, #16
 8017ec6:	f000 f80f 	bl	8017ee8 <rmw_get_zero_initialized_init_options>
 8017eca:	2300      	movs	r3, #0
 8017ecc:	4620      	mov	r0, r4
 8017ece:	60a3      	str	r3, [r4, #8]
 8017ed0:	66a3      	str	r3, [r4, #104]	; 0x68
 8017ed2:	66e3      	str	r3, [r4, #108]	; 0x6c
 8017ed4:	ed9f 7b02 	vldr	d7, [pc, #8]	; 8017ee0 <rmw_get_zero_initialized_context+0x20>
 8017ed8:	ed84 7b00 	vstr	d7, [r4]
 8017edc:	bd10      	pop	{r4, pc}
 8017ede:	bf00      	nop
	...

08017ee8 <rmw_get_zero_initialized_init_options>:
 8017ee8:	b510      	push	{r4, lr}
 8017eea:	4604      	mov	r4, r0
 8017eec:	2258      	movs	r2, #88	; 0x58
 8017eee:	2100      	movs	r1, #0
 8017ef0:	f004 fc28 	bl	801c744 <memset>
 8017ef4:	f104 0010 	add.w	r0, r4, #16
 8017ef8:	f000 f80a 	bl	8017f10 <rmw_get_default_security_options>
 8017efc:	f104 001c 	add.w	r0, r4, #28
 8017f00:	f003 fe50 	bl	801bba4 <rmw_get_zero_initialized_discovery_options>
 8017f04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017f08:	4620      	mov	r0, r4
 8017f0a:	60e3      	str	r3, [r4, #12]
 8017f0c:	bd10      	pop	{r4, pc}
 8017f0e:	bf00      	nop

08017f10 <rmw_get_default_security_options>:
 8017f10:	2200      	movs	r2, #0
 8017f12:	7002      	strb	r2, [r0, #0]
 8017f14:	6042      	str	r2, [r0, #4]
 8017f16:	4770      	bx	lr

08017f18 <rmw_subscription_content_filter_options_fini>:
 8017f18:	b1b0      	cbz	r0, 8017f48 <rmw_subscription_content_filter_options_fini+0x30>
 8017f1a:	b538      	push	{r3, r4, r5, lr}
 8017f1c:	4604      	mov	r4, r0
 8017f1e:	4608      	mov	r0, r1
 8017f20:	460d      	mov	r5, r1
 8017f22:	f7f5 fe99 	bl	800dc58 <rcutils_allocator_is_valid>
 8017f26:	b168      	cbz	r0, 8017f44 <rmw_subscription_content_filter_options_fini+0x2c>
 8017f28:	6820      	ldr	r0, [r4, #0]
 8017f2a:	b120      	cbz	r0, 8017f36 <rmw_subscription_content_filter_options_fini+0x1e>
 8017f2c:	686b      	ldr	r3, [r5, #4]
 8017f2e:	6929      	ldr	r1, [r5, #16]
 8017f30:	4798      	blx	r3
 8017f32:	2300      	movs	r3, #0
 8017f34:	6023      	str	r3, [r4, #0]
 8017f36:	1d20      	adds	r0, r4, #4
 8017f38:	f003 fe0a 	bl	801bb50 <rcutils_string_array_fini>
 8017f3c:	3800      	subs	r0, #0
 8017f3e:	bf18      	it	ne
 8017f40:	2001      	movne	r0, #1
 8017f42:	bd38      	pop	{r3, r4, r5, pc}
 8017f44:	200b      	movs	r0, #11
 8017f46:	bd38      	pop	{r3, r4, r5, pc}
 8017f48:	200b      	movs	r0, #11
 8017f4a:	4770      	bx	lr

08017f4c <rmw_get_default_subscription_options>:
 8017f4c:	2200      	movs	r2, #0
 8017f4e:	e9c0 2200 	strd	r2, r2, [r0]
 8017f52:	6082      	str	r2, [r0, #8]
 8017f54:	4770      	bx	lr
 8017f56:	bf00      	nop

08017f58 <rmw_time_equal>:
 8017f58:	b4f0      	push	{r4, r5, r6, r7}
 8017f5a:	b084      	sub	sp, #16
 8017f5c:	ac04      	add	r4, sp, #16
 8017f5e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8017f62:	4603      	mov	r3, r0
 8017f64:	4925      	ldr	r1, [pc, #148]	; (8017ffc <rmw_time_equal+0xa4>)
 8017f66:	9d01      	ldr	r5, [sp, #4]
 8017f68:	4610      	mov	r0, r2
 8017f6a:	4299      	cmp	r1, r3
 8017f6c:	f04f 0202 	mov.w	r2, #2
 8017f70:	9e03      	ldr	r6, [sp, #12]
 8017f72:	41aa      	sbcs	r2, r5
 8017f74:	d330      	bcc.n	8017fd8 <rmw_time_equal+0x80>
 8017f76:	4c22      	ldr	r4, [pc, #136]	; (8018000 <rmw_time_equal+0xa8>)
 8017f78:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017f7c:	fba3 3204 	umull	r3, r2, r3, r4
 8017f80:	fb04 2205 	mla	r2, r4, r5, r2
 8017f84:	43dd      	mvns	r5, r3
 8017f86:	1a8c      	subs	r4, r1, r2
 8017f88:	4285      	cmp	r5, r0
 8017f8a:	41b4      	sbcs	r4, r6
 8017f8c:	d332      	bcc.n	8017ff4 <rmw_time_equal+0x9c>
 8017f8e:	eb10 0c03 	adds.w	ip, r0, r3
 8017f92:	eb42 0106 	adc.w	r1, r2, r6
 8017f96:	4819      	ldr	r0, [pc, #100]	; (8017ffc <rmw_time_equal+0xa4>)
 8017f98:	2202      	movs	r2, #2
 8017f9a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8017f9c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8017f9e:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 8017fa2:	4298      	cmp	r0, r3
 8017fa4:	41b2      	sbcs	r2, r6
 8017fa6:	d31c      	bcc.n	8017fe2 <rmw_time_equal+0x8a>
 8017fa8:	4c15      	ldr	r4, [pc, #84]	; (8018000 <rmw_time_equal+0xa8>)
 8017faa:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8017fae:	fba3 3204 	umull	r3, r2, r3, r4
 8017fb2:	fb04 2206 	mla	r2, r4, r6, r2
 8017fb6:	43de      	mvns	r6, r3
 8017fb8:	1a84      	subs	r4, r0, r2
 8017fba:	42ae      	cmp	r6, r5
 8017fbc:	41bc      	sbcs	r4, r7
 8017fbe:	d315      	bcc.n	8017fec <rmw_time_equal+0x94>
 8017fc0:	195b      	adds	r3, r3, r5
 8017fc2:	eb42 0207 	adc.w	r2, r2, r7
 8017fc6:	428a      	cmp	r2, r1
 8017fc8:	bf08      	it	eq
 8017fca:	4563      	cmpeq	r3, ip
 8017fcc:	bf0c      	ite	eq
 8017fce:	2001      	moveq	r0, #1
 8017fd0:	2000      	movne	r0, #0
 8017fd2:	b004      	add	sp, #16
 8017fd4:	bcf0      	pop	{r4, r5, r6, r7}
 8017fd6:	4770      	bx	lr
 8017fd8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8017fdc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017fe0:	e7d9      	b.n	8017f96 <rmw_time_equal+0x3e>
 8017fe2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017fe6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8017fea:	e7ec      	b.n	8017fc6 <rmw_time_equal+0x6e>
 8017fec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017ff0:	4602      	mov	r2, r0
 8017ff2:	e7e8      	b.n	8017fc6 <rmw_time_equal+0x6e>
 8017ff4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8017ff8:	e7cd      	b.n	8017f96 <rmw_time_equal+0x3e>
 8017ffa:	bf00      	nop
 8017ffc:	25c17d04 	.word	0x25c17d04
 8018000:	3b9aca00 	.word	0x3b9aca00

08018004 <rmw_time_total_nsec>:
 8018004:	b470      	push	{r4, r5, r6}
 8018006:	b085      	sub	sp, #20
 8018008:	ac04      	add	r4, sp, #16
 801800a:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801800e:	4603      	mov	r3, r0
 8018010:	4913      	ldr	r1, [pc, #76]	; (8018060 <rmw_time_total_nsec+0x5c>)
 8018012:	9d01      	ldr	r5, [sp, #4]
 8018014:	4610      	mov	r0, r2
 8018016:	4299      	cmp	r1, r3
 8018018:	f04f 0202 	mov.w	r2, #2
 801801c:	9e03      	ldr	r6, [sp, #12]
 801801e:	41aa      	sbcs	r2, r5
 8018020:	d311      	bcc.n	8018046 <rmw_time_total_nsec+0x42>
 8018022:	4c10      	ldr	r4, [pc, #64]	; (8018064 <rmw_time_total_nsec+0x60>)
 8018024:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8018028:	fba3 3204 	umull	r3, r2, r3, r4
 801802c:	fb04 2205 	mla	r2, r4, r5, r2
 8018030:	43dd      	mvns	r5, r3
 8018032:	1a8c      	subs	r4, r1, r2
 8018034:	4285      	cmp	r5, r0
 8018036:	41b4      	sbcs	r4, r6
 8018038:	d30c      	bcc.n	8018054 <rmw_time_total_nsec+0x50>
 801803a:	1818      	adds	r0, r3, r0
 801803c:	eb42 0106 	adc.w	r1, r2, r6
 8018040:	b005      	add	sp, #20
 8018042:	bc70      	pop	{r4, r5, r6}
 8018044:	4770      	bx	lr
 8018046:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801804a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801804e:	b005      	add	sp, #20
 8018050:	bc70      	pop	{r4, r5, r6}
 8018052:	4770      	bx	lr
 8018054:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018058:	b005      	add	sp, #20
 801805a:	bc70      	pop	{r4, r5, r6}
 801805c:	4770      	bx	lr
 801805e:	bf00      	nop
 8018060:	25c17d04 	.word	0x25c17d04
 8018064:	3b9aca00 	.word	0x3b9aca00

08018068 <rmw_get_zero_initialized_message_info>:
 8018068:	b510      	push	{r4, lr}
 801806a:	4604      	mov	r4, r0
 801806c:	2238      	movs	r2, #56	; 0x38
 801806e:	2100      	movs	r1, #0
 8018070:	f004 fb68 	bl	801c744 <memset>
 8018074:	4620      	mov	r0, r4
 8018076:	bd10      	pop	{r4, pc}

08018078 <rmw_validate_full_topic_name>:
 8018078:	2800      	cmp	r0, #0
 801807a:	d05d      	beq.n	8018138 <rmw_validate_full_topic_name+0xc0>
 801807c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018080:	460d      	mov	r5, r1
 8018082:	2900      	cmp	r1, #0
 8018084:	d05a      	beq.n	801813c <rmw_validate_full_topic_name+0xc4>
 8018086:	4604      	mov	r4, r0
 8018088:	4616      	mov	r6, r2
 801808a:	f7e8 f939 	bl	8000300 <strlen>
 801808e:	b150      	cbz	r0, 80180a6 <rmw_validate_full_topic_name+0x2e>
 8018090:	7823      	ldrb	r3, [r4, #0]
 8018092:	2b2f      	cmp	r3, #47	; 0x2f
 8018094:	d00e      	beq.n	80180b4 <rmw_validate_full_topic_name+0x3c>
 8018096:	2302      	movs	r3, #2
 8018098:	602b      	str	r3, [r5, #0]
 801809a:	b146      	cbz	r6, 80180ae <rmw_validate_full_topic_name+0x36>
 801809c:	2300      	movs	r3, #0
 801809e:	4618      	mov	r0, r3
 80180a0:	6033      	str	r3, [r6, #0]
 80180a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80180a6:	2301      	movs	r3, #1
 80180a8:	602b      	str	r3, [r5, #0]
 80180aa:	2e00      	cmp	r6, #0
 80180ac:	d1f6      	bne.n	801809c <rmw_validate_full_topic_name+0x24>
 80180ae:	2000      	movs	r0, #0
 80180b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80180b4:	1e43      	subs	r3, r0, #1
 80180b6:	5ce2      	ldrb	r2, [r4, r3]
 80180b8:	2a2f      	cmp	r2, #47	; 0x2f
 80180ba:	d041      	beq.n	8018140 <rmw_validate_full_topic_name+0xc8>
 80180bc:	1e62      	subs	r2, r4, #1
 80180be:	f1c4 0e01 	rsb	lr, r4, #1
 80180c2:	eb02 0800 	add.w	r8, r2, r0
 80180c6:	eb0e 0702 	add.w	r7, lr, r2
 80180ca:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80180ce:	f023 0120 	bic.w	r1, r3, #32
 80180d2:	f1a3 0c2f 	sub.w	ip, r3, #47	; 0x2f
 80180d6:	3941      	subs	r1, #65	; 0x41
 80180d8:	2919      	cmp	r1, #25
 80180da:	d90f      	bls.n	80180fc <rmw_validate_full_topic_name+0x84>
 80180dc:	f1bc 0f0a 	cmp.w	ip, #10
 80180e0:	d90c      	bls.n	80180fc <rmw_validate_full_topic_name+0x84>
 80180e2:	f1a3 035f 	sub.w	r3, r3, #95	; 0x5f
 80180e6:	fab3 f383 	clz	r3, r3
 80180ea:	095b      	lsrs	r3, r3, #5
 80180ec:	b933      	cbnz	r3, 80180fc <rmw_validate_full_topic_name+0x84>
 80180ee:	2204      	movs	r2, #4
 80180f0:	602a      	str	r2, [r5, #0]
 80180f2:	2e00      	cmp	r6, #0
 80180f4:	d0db      	beq.n	80180ae <rmw_validate_full_topic_name+0x36>
 80180f6:	4618      	mov	r0, r3
 80180f8:	6037      	str	r7, [r6, #0]
 80180fa:	e7d2      	b.n	80180a2 <rmw_validate_full_topic_name+0x2a>
 80180fc:	4542      	cmp	r2, r8
 80180fe:	d1e2      	bne.n	80180c6 <rmw_validate_full_topic_name+0x4e>
 8018100:	2301      	movs	r3, #1
 8018102:	4f1a      	ldr	r7, [pc, #104]	; (801816c <rmw_validate_full_topic_name+0xf4>)
 8018104:	e004      	b.n	8018110 <rmw_validate_full_topic_name+0x98>
 8018106:	4298      	cmp	r0, r3
 8018108:	f104 0401 	add.w	r4, r4, #1
 801810c:	4613      	mov	r3, r2
 801810e:	d91c      	bls.n	801814a <rmw_validate_full_topic_name+0xd2>
 8018110:	4298      	cmp	r0, r3
 8018112:	f103 0201 	add.w	r2, r3, #1
 8018116:	d0f6      	beq.n	8018106 <rmw_validate_full_topic_name+0x8e>
 8018118:	7821      	ldrb	r1, [r4, #0]
 801811a:	292f      	cmp	r1, #47	; 0x2f
 801811c:	d1f3      	bne.n	8018106 <rmw_validate_full_topic_name+0x8e>
 801811e:	7861      	ldrb	r1, [r4, #1]
 8018120:	292f      	cmp	r1, #47	; 0x2f
 8018122:	d01e      	beq.n	8018162 <rmw_validate_full_topic_name+0xea>
 8018124:	5dc9      	ldrb	r1, [r1, r7]
 8018126:	0749      	lsls	r1, r1, #29
 8018128:	d5ed      	bpl.n	8018106 <rmw_validate_full_topic_name+0x8e>
 801812a:	2206      	movs	r2, #6
 801812c:	602a      	str	r2, [r5, #0]
 801812e:	2e00      	cmp	r6, #0
 8018130:	d0bd      	beq.n	80180ae <rmw_validate_full_topic_name+0x36>
 8018132:	2000      	movs	r0, #0
 8018134:	6033      	str	r3, [r6, #0]
 8018136:	e7b4      	b.n	80180a2 <rmw_validate_full_topic_name+0x2a>
 8018138:	200b      	movs	r0, #11
 801813a:	4770      	bx	lr
 801813c:	200b      	movs	r0, #11
 801813e:	e7b0      	b.n	80180a2 <rmw_validate_full_topic_name+0x2a>
 8018140:	2203      	movs	r2, #3
 8018142:	602a      	str	r2, [r5, #0]
 8018144:	2e00      	cmp	r6, #0
 8018146:	d1f4      	bne.n	8018132 <rmw_validate_full_topic_name+0xba>
 8018148:	e7b1      	b.n	80180ae <rmw_validate_full_topic_name+0x36>
 801814a:	28f7      	cmp	r0, #247	; 0xf7
 801814c:	d803      	bhi.n	8018156 <rmw_validate_full_topic_name+0xde>
 801814e:	2300      	movs	r3, #0
 8018150:	4618      	mov	r0, r3
 8018152:	602b      	str	r3, [r5, #0]
 8018154:	e7a5      	b.n	80180a2 <rmw_validate_full_topic_name+0x2a>
 8018156:	2307      	movs	r3, #7
 8018158:	602b      	str	r3, [r5, #0]
 801815a:	2e00      	cmp	r6, #0
 801815c:	d0a7      	beq.n	80180ae <rmw_validate_full_topic_name+0x36>
 801815e:	23f6      	movs	r3, #246	; 0xf6
 8018160:	e7e7      	b.n	8018132 <rmw_validate_full_topic_name+0xba>
 8018162:	2205      	movs	r2, #5
 8018164:	602a      	str	r2, [r5, #0]
 8018166:	2e00      	cmp	r6, #0
 8018168:	d1e3      	bne.n	8018132 <rmw_validate_full_topic_name+0xba>
 801816a:	e7a0      	b.n	80180ae <rmw_validate_full_topic_name+0x36>
 801816c:	0801f640 	.word	0x0801f640

08018170 <rmw_validate_namespace_with_size>:
 8018170:	2800      	cmp	r0, #0
 8018172:	d043      	beq.n	80181fc <rmw_validate_namespace_with_size+0x8c>
 8018174:	b570      	push	{r4, r5, r6, lr}
 8018176:	4614      	mov	r4, r2
 8018178:	b0c2      	sub	sp, #264	; 0x108
 801817a:	b32a      	cbz	r2, 80181c8 <rmw_validate_namespace_with_size+0x58>
 801817c:	2901      	cmp	r1, #1
 801817e:	460d      	mov	r5, r1
 8018180:	461e      	mov	r6, r3
 8018182:	d102      	bne.n	801818a <rmw_validate_namespace_with_size+0x1a>
 8018184:	7803      	ldrb	r3, [r0, #0]
 8018186:	2b2f      	cmp	r3, #47	; 0x2f
 8018188:	d012      	beq.n	80181b0 <rmw_validate_namespace_with_size+0x40>
 801818a:	aa01      	add	r2, sp, #4
 801818c:	4669      	mov	r1, sp
 801818e:	f7ff ff73 	bl	8018078 <rmw_validate_full_topic_name>
 8018192:	b980      	cbnz	r0, 80181b6 <rmw_validate_namespace_with_size+0x46>
 8018194:	9a00      	ldr	r2, [sp, #0]
 8018196:	b14a      	cbz	r2, 80181ac <rmw_validate_namespace_with_size+0x3c>
 8018198:	2a07      	cmp	r2, #7
 801819a:	d007      	beq.n	80181ac <rmw_validate_namespace_with_size+0x3c>
 801819c:	1e53      	subs	r3, r2, #1
 801819e:	2b05      	cmp	r3, #5
 80181a0:	d82e      	bhi.n	8018200 <rmw_validate_namespace_with_size+0x90>
 80181a2:	e8df f003 	tbb	[pc, r3]
 80181a6:	1f1c      	.short	0x1f1c
 80181a8:	14282522 	.word	0x14282522
 80181ac:	2df5      	cmp	r5, #245	; 0xf5
 80181ae:	d804      	bhi.n	80181ba <rmw_validate_namespace_with_size+0x4a>
 80181b0:	2300      	movs	r3, #0
 80181b2:	4618      	mov	r0, r3
 80181b4:	6023      	str	r3, [r4, #0]
 80181b6:	b042      	add	sp, #264	; 0x108
 80181b8:	bd70      	pop	{r4, r5, r6, pc}
 80181ba:	2307      	movs	r3, #7
 80181bc:	6023      	str	r3, [r4, #0]
 80181be:	2e00      	cmp	r6, #0
 80181c0:	d0f9      	beq.n	80181b6 <rmw_validate_namespace_with_size+0x46>
 80181c2:	23f4      	movs	r3, #244	; 0xf4
 80181c4:	6033      	str	r3, [r6, #0]
 80181c6:	e7f6      	b.n	80181b6 <rmw_validate_namespace_with_size+0x46>
 80181c8:	200b      	movs	r0, #11
 80181ca:	b042      	add	sp, #264	; 0x108
 80181cc:	bd70      	pop	{r4, r5, r6, pc}
 80181ce:	2306      	movs	r3, #6
 80181d0:	6023      	str	r3, [r4, #0]
 80181d2:	2e00      	cmp	r6, #0
 80181d4:	d0ef      	beq.n	80181b6 <rmw_validate_namespace_with_size+0x46>
 80181d6:	9b01      	ldr	r3, [sp, #4]
 80181d8:	6033      	str	r3, [r6, #0]
 80181da:	b042      	add	sp, #264	; 0x108
 80181dc:	bd70      	pop	{r4, r5, r6, pc}
 80181de:	2301      	movs	r3, #1
 80181e0:	6023      	str	r3, [r4, #0]
 80181e2:	e7f6      	b.n	80181d2 <rmw_validate_namespace_with_size+0x62>
 80181e4:	2302      	movs	r3, #2
 80181e6:	6023      	str	r3, [r4, #0]
 80181e8:	e7f3      	b.n	80181d2 <rmw_validate_namespace_with_size+0x62>
 80181ea:	2303      	movs	r3, #3
 80181ec:	6023      	str	r3, [r4, #0]
 80181ee:	e7f0      	b.n	80181d2 <rmw_validate_namespace_with_size+0x62>
 80181f0:	2304      	movs	r3, #4
 80181f2:	6023      	str	r3, [r4, #0]
 80181f4:	e7ed      	b.n	80181d2 <rmw_validate_namespace_with_size+0x62>
 80181f6:	2305      	movs	r3, #5
 80181f8:	6023      	str	r3, [r4, #0]
 80181fa:	e7ea      	b.n	80181d2 <rmw_validate_namespace_with_size+0x62>
 80181fc:	200b      	movs	r0, #11
 80181fe:	4770      	bx	lr
 8018200:	4613      	mov	r3, r2
 8018202:	f44f 7180 	mov.w	r1, #256	; 0x100
 8018206:	4a03      	ldr	r2, [pc, #12]	; (8018214 <rmw_validate_namespace_with_size+0xa4>)
 8018208:	a802      	add	r0, sp, #8
 801820a:	f7ff fcbd 	bl	8017b88 <rcutils_snprintf>
 801820e:	2001      	movs	r0, #1
 8018210:	e7d1      	b.n	80181b6 <rmw_validate_namespace_with_size+0x46>
 8018212:	bf00      	nop
 8018214:	0801ed30 	.word	0x0801ed30

08018218 <rmw_validate_namespace>:
 8018218:	b168      	cbz	r0, 8018236 <rmw_validate_namespace+0x1e>
 801821a:	b570      	push	{r4, r5, r6, lr}
 801821c:	460d      	mov	r5, r1
 801821e:	4616      	mov	r6, r2
 8018220:	4604      	mov	r4, r0
 8018222:	f7e8 f86d 	bl	8000300 <strlen>
 8018226:	4633      	mov	r3, r6
 8018228:	4601      	mov	r1, r0
 801822a:	462a      	mov	r2, r5
 801822c:	4620      	mov	r0, r4
 801822e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018232:	f7ff bf9d 	b.w	8018170 <rmw_validate_namespace_with_size>
 8018236:	200b      	movs	r0, #11
 8018238:	4770      	bx	lr
 801823a:	bf00      	nop

0801823c <rmw_namespace_validation_result_string>:
 801823c:	2807      	cmp	r0, #7
 801823e:	d803      	bhi.n	8018248 <rmw_namespace_validation_result_string+0xc>
 8018240:	4b02      	ldr	r3, [pc, #8]	; (801824c <rmw_namespace_validation_result_string+0x10>)
 8018242:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8018246:	4770      	bx	lr
 8018248:	4801      	ldr	r0, [pc, #4]	; (8018250 <rmw_namespace_validation_result_string+0x14>)
 801824a:	4770      	bx	lr
 801824c:	0801ef28 	.word	0x0801ef28
 8018250:	0801ed80 	.word	0x0801ed80

08018254 <rmw_validate_node_name>:
 8018254:	2800      	cmp	r0, #0
 8018256:	d042      	beq.n	80182de <rmw_validate_node_name+0x8a>
 8018258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801825c:	460d      	mov	r5, r1
 801825e:	2900      	cmp	r1, #0
 8018260:	d03f      	beq.n	80182e2 <rmw_validate_node_name+0x8e>
 8018262:	4604      	mov	r4, r0
 8018264:	4616      	mov	r6, r2
 8018266:	f7e8 f84b 	bl	8000300 <strlen>
 801826a:	b310      	cbz	r0, 80182b2 <rmw_validate_node_name+0x5e>
 801826c:	1e63      	subs	r3, r4, #1
 801826e:	f1c4 0101 	rsb	r1, r4, #1
 8018272:	eb03 0800 	add.w	r8, r3, r0
 8018276:	18cf      	adds	r7, r1, r3
 8018278:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 801827c:	f1ae 0230 	sub.w	r2, lr, #48	; 0x30
 8018280:	f02e 0c20 	bic.w	ip, lr, #32
 8018284:	2a09      	cmp	r2, #9
 8018286:	f1ac 0c41 	sub.w	ip, ip, #65	; 0x41
 801828a:	d905      	bls.n	8018298 <rmw_validate_node_name+0x44>
 801828c:	f1bc 0f19 	cmp.w	ip, #25
 8018290:	d902      	bls.n	8018298 <rmw_validate_node_name+0x44>
 8018292:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
 8018296:	d114      	bne.n	80182c2 <rmw_validate_node_name+0x6e>
 8018298:	4598      	cmp	r8, r3
 801829a:	d1ec      	bne.n	8018276 <rmw_validate_node_name+0x22>
 801829c:	7822      	ldrb	r2, [r4, #0]
 801829e:	4b16      	ldr	r3, [pc, #88]	; (80182f8 <rmw_validate_node_name+0xa4>)
 80182a0:	5cd3      	ldrb	r3, [r2, r3]
 80182a2:	f013 0304 	ands.w	r3, r3, #4
 80182a6:	d113      	bne.n	80182d0 <rmw_validate_node_name+0x7c>
 80182a8:	28ff      	cmp	r0, #255	; 0xff
 80182aa:	d81c      	bhi.n	80182e6 <rmw_validate_node_name+0x92>
 80182ac:	4618      	mov	r0, r3
 80182ae:	602b      	str	r3, [r5, #0]
 80182b0:	e00c      	b.n	80182cc <rmw_validate_node_name+0x78>
 80182b2:	2301      	movs	r3, #1
 80182b4:	602b      	str	r3, [r5, #0]
 80182b6:	b17e      	cbz	r6, 80182d8 <rmw_validate_node_name+0x84>
 80182b8:	2300      	movs	r3, #0
 80182ba:	4618      	mov	r0, r3
 80182bc:	6033      	str	r3, [r6, #0]
 80182be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80182c2:	2302      	movs	r3, #2
 80182c4:	602b      	str	r3, [r5, #0]
 80182c6:	b13e      	cbz	r6, 80182d8 <rmw_validate_node_name+0x84>
 80182c8:	2000      	movs	r0, #0
 80182ca:	6037      	str	r7, [r6, #0]
 80182cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80182d0:	2303      	movs	r3, #3
 80182d2:	602b      	str	r3, [r5, #0]
 80182d4:	2e00      	cmp	r6, #0
 80182d6:	d1ef      	bne.n	80182b8 <rmw_validate_node_name+0x64>
 80182d8:	2000      	movs	r0, #0
 80182da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80182de:	200b      	movs	r0, #11
 80182e0:	4770      	bx	lr
 80182e2:	200b      	movs	r0, #11
 80182e4:	e7f2      	b.n	80182cc <rmw_validate_node_name+0x78>
 80182e6:	2204      	movs	r2, #4
 80182e8:	602a      	str	r2, [r5, #0]
 80182ea:	2e00      	cmp	r6, #0
 80182ec:	d0f4      	beq.n	80182d8 <rmw_validate_node_name+0x84>
 80182ee:	22fe      	movs	r2, #254	; 0xfe
 80182f0:	4618      	mov	r0, r3
 80182f2:	6032      	str	r2, [r6, #0]
 80182f4:	e7ea      	b.n	80182cc <rmw_validate_node_name+0x78>
 80182f6:	bf00      	nop
 80182f8:	0801f640 	.word	0x0801f640

080182fc <rmw_node_name_validation_result_string>:
 80182fc:	2804      	cmp	r0, #4
 80182fe:	d803      	bhi.n	8018308 <rmw_node_name_validation_result_string+0xc>
 8018300:	4b02      	ldr	r3, [pc, #8]	; (801830c <rmw_node_name_validation_result_string+0x10>)
 8018302:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8018306:	4770      	bx	lr
 8018308:	4801      	ldr	r0, [pc, #4]	; (8018310 <rmw_node_name_validation_result_string+0x14>)
 801830a:	4770      	bx	lr
 801830c:	0801f034 	.word	0x0801f034
 8018310:	0801ef48 	.word	0x0801ef48

08018314 <get_memory>:
 8018314:	4603      	mov	r3, r0
 8018316:	6840      	ldr	r0, [r0, #4]
 8018318:	b158      	cbz	r0, 8018332 <get_memory+0x1e>
 801831a:	6842      	ldr	r2, [r0, #4]
 801831c:	605a      	str	r2, [r3, #4]
 801831e:	b10a      	cbz	r2, 8018324 <get_memory+0x10>
 8018320:	2100      	movs	r1, #0
 8018322:	6011      	str	r1, [r2, #0]
 8018324:	681a      	ldr	r2, [r3, #0]
 8018326:	6042      	str	r2, [r0, #4]
 8018328:	b102      	cbz	r2, 801832c <get_memory+0x18>
 801832a:	6010      	str	r0, [r2, #0]
 801832c:	2200      	movs	r2, #0
 801832e:	6002      	str	r2, [r0, #0]
 8018330:	6018      	str	r0, [r3, #0]
 8018332:	4770      	bx	lr

08018334 <put_memory>:
 8018334:	680b      	ldr	r3, [r1, #0]
 8018336:	b10b      	cbz	r3, 801833c <put_memory+0x8>
 8018338:	684a      	ldr	r2, [r1, #4]
 801833a:	605a      	str	r2, [r3, #4]
 801833c:	684a      	ldr	r2, [r1, #4]
 801833e:	b102      	cbz	r2, 8018342 <put_memory+0xe>
 8018340:	6013      	str	r3, [r2, #0]
 8018342:	6803      	ldr	r3, [r0, #0]
 8018344:	428b      	cmp	r3, r1
 8018346:	6843      	ldr	r3, [r0, #4]
 8018348:	bf08      	it	eq
 801834a:	6002      	streq	r2, [r0, #0]
 801834c:	604b      	str	r3, [r1, #4]
 801834e:	b103      	cbz	r3, 8018352 <put_memory+0x1e>
 8018350:	6019      	str	r1, [r3, #0]
 8018352:	2300      	movs	r3, #0
 8018354:	600b      	str	r3, [r1, #0]
 8018356:	6041      	str	r1, [r0, #4]
 8018358:	4770      	bx	lr
 801835a:	bf00      	nop

0801835c <rmw_destroy_client>:
 801835c:	b570      	push	{r4, r5, r6, lr}
 801835e:	b128      	cbz	r0, 801836c <rmw_destroy_client+0x10>
 8018360:	4604      	mov	r4, r0
 8018362:	6800      	ldr	r0, [r0, #0]
 8018364:	460d      	mov	r5, r1
 8018366:	f7f6 fac7 	bl	800e8f8 <is_uxrce_rmw_identifier_valid>
 801836a:	b910      	cbnz	r0, 8018372 <rmw_destroy_client+0x16>
 801836c:	2401      	movs	r4, #1
 801836e:	4620      	mov	r0, r4
 8018370:	bd70      	pop	{r4, r5, r6, pc}
 8018372:	6863      	ldr	r3, [r4, #4]
 8018374:	2b00      	cmp	r3, #0
 8018376:	d0f9      	beq.n	801836c <rmw_destroy_client+0x10>
 8018378:	2d00      	cmp	r5, #0
 801837a:	d0f7      	beq.n	801836c <rmw_destroy_client+0x10>
 801837c:	6828      	ldr	r0, [r5, #0]
 801837e:	f7f6 fabb 	bl	800e8f8 <is_uxrce_rmw_identifier_valid>
 8018382:	2800      	cmp	r0, #0
 8018384:	d0f2      	beq.n	801836c <rmw_destroy_client+0x10>
 8018386:	686e      	ldr	r6, [r5, #4]
 8018388:	2e00      	cmp	r6, #0
 801838a:	d0ef      	beq.n	801836c <rmw_destroy_client+0x10>
 801838c:	6864      	ldr	r4, [r4, #4]
 801838e:	6932      	ldr	r2, [r6, #16]
 8018390:	6920      	ldr	r0, [r4, #16]
 8018392:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8018396:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801839a:	6819      	ldr	r1, [r3, #0]
 801839c:	f002 f94e 	bl	801a63c <uxr_buffer_cancel_data>
 80183a0:	4602      	mov	r2, r0
 80183a2:	6920      	ldr	r0, [r4, #16]
 80183a4:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80183a8:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80183ac:	f7f6 f992 	bl	800e6d4 <run_xrce_session>
 80183b0:	6920      	ldr	r0, [r4, #16]
 80183b2:	6932      	ldr	r2, [r6, #16]
 80183b4:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80183b8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80183bc:	6819      	ldr	r1, [r3, #0]
 80183be:	f7f8 fa61 	bl	8010884 <uxr_buffer_delete_entity>
 80183c2:	4602      	mov	r2, r0
 80183c4:	6920      	ldr	r0, [r4, #16]
 80183c6:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80183ca:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80183ce:	f7f6 f981 	bl	800e6d4 <run_xrce_session>
 80183d2:	4603      	mov	r3, r0
 80183d4:	4628      	mov	r0, r5
 80183d6:	2b00      	cmp	r3, #0
 80183d8:	bf14      	ite	ne
 80183da:	2400      	movne	r4, #0
 80183dc:	2402      	moveq	r4, #2
 80183de:	f7f6 f855 	bl	800e48c <rmw_uxrce_fini_client_memory>
 80183e2:	e7c4      	b.n	801836e <rmw_destroy_client+0x12>

080183e4 <rmw_get_gid_for_client>:
 80183e4:	b1b9      	cbz	r1, 8018416 <rmw_get_gid_for_client+0x32>
 80183e6:	b538      	push	{r3, r4, r5, lr}
 80183e8:	4605      	mov	r5, r0
 80183ea:	b180      	cbz	r0, 801840e <rmw_get_gid_for_client+0x2a>
 80183ec:	6800      	ldr	r0, [r0, #0]
 80183ee:	460c      	mov	r4, r1
 80183f0:	b120      	cbz	r0, 80183fc <rmw_get_gid_for_client+0x18>
 80183f2:	4b0a      	ldr	r3, [pc, #40]	; (801841c <rmw_get_gid_for_client+0x38>)
 80183f4:	6819      	ldr	r1, [r3, #0]
 80183f6:	f7e7 ff23 	bl	8000240 <strcmp>
 80183fa:	b950      	cbnz	r0, 8018412 <rmw_get_gid_for_client+0x2e>
 80183fc:	686b      	ldr	r3, [r5, #4]
 80183fe:	2000      	movs	r0, #0
 8018400:	6060      	str	r0, [r4, #4]
 8018402:	60a0      	str	r0, [r4, #8]
 8018404:	60e0      	str	r0, [r4, #12]
 8018406:	6120      	str	r0, [r4, #16]
 8018408:	691b      	ldr	r3, [r3, #16]
 801840a:	6063      	str	r3, [r4, #4]
 801840c:	bd38      	pop	{r3, r4, r5, pc}
 801840e:	200b      	movs	r0, #11
 8018410:	bd38      	pop	{r3, r4, r5, pc}
 8018412:	200c      	movs	r0, #12
 8018414:	bd38      	pop	{r3, r4, r5, pc}
 8018416:	200b      	movs	r0, #11
 8018418:	4770      	bx	lr
 801841a:	bf00      	nop
 801841c:	0801f060 	.word	0x0801f060

08018420 <rmw_get_implementation_identifier>:
 8018420:	4b01      	ldr	r3, [pc, #4]	; (8018428 <rmw_get_implementation_identifier+0x8>)
 8018422:	6818      	ldr	r0, [r3, #0]
 8018424:	4770      	bx	lr
 8018426:	bf00      	nop
 8018428:	0801f060 	.word	0x0801f060

0801842c <rmw_init_options_init>:
 801842c:	b084      	sub	sp, #16
 801842e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018430:	b083      	sub	sp, #12
 8018432:	ad09      	add	r5, sp, #36	; 0x24
 8018434:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8018438:	b130      	cbz	r0, 8018448 <rmw_init_options_init+0x1c>
 801843a:	4604      	mov	r4, r0
 801843c:	4628      	mov	r0, r5
 801843e:	f7f5 fc0b 	bl	800dc58 <rcutils_allocator_is_valid>
 8018442:	b108      	cbz	r0, 8018448 <rmw_init_options_init+0x1c>
 8018444:	68a6      	ldr	r6, [r4, #8]
 8018446:	b12e      	cbz	r6, 8018454 <rmw_init_options_init+0x28>
 8018448:	200b      	movs	r0, #11
 801844a:	b003      	add	sp, #12
 801844c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8018450:	b004      	add	sp, #16
 8018452:	4770      	bx	lr
 8018454:	2200      	movs	r2, #0
 8018456:	2300      	movs	r3, #0
 8018458:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 801845c:	f8df e098 	ldr.w	lr, [pc, #152]	; 80184f8 <rmw_init_options_init+0xcc>
 8018460:	466f      	mov	r7, sp
 8018462:	e9c4 2300 	strd	r2, r3, [r4]
 8018466:	4b20      	ldr	r3, [pc, #128]	; (80184e8 <rmw_init_options_init+0xbc>)
 8018468:	681b      	ldr	r3, [r3, #0]
 801846a:	60a3      	str	r3, [r4, #8]
 801846c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801846e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018472:	682b      	ldr	r3, [r5, #0]
 8018474:	4638      	mov	r0, r7
 8018476:	f8cc 3000 	str.w	r3, [ip]
 801847a:	f8c4 e03c 	str.w	lr, [r4, #60]	; 0x3c
 801847e:	60e6      	str	r6, [r4, #12]
 8018480:	f7ff fd46 	bl	8017f10 <rmw_get_default_security_options>
 8018484:	f104 0310 	add.w	r3, r4, #16
 8018488:	2203      	movs	r2, #3
 801848a:	e897 0003 	ldmia.w	r7, {r0, r1}
 801848e:	e883 0003 	stmia.w	r3, {r0, r1}
 8018492:	4816      	ldr	r0, [pc, #88]	; (80184ec <rmw_init_options_init+0xc0>)
 8018494:	4916      	ldr	r1, [pc, #88]	; (80184f0 <rmw_init_options_init+0xc4>)
 8018496:	7626      	strb	r6, [r4, #24]
 8018498:	f7f5 ff38 	bl	800e30c <rmw_uxrce_init_init_options_impl_memory>
 801849c:	4813      	ldr	r0, [pc, #76]	; (80184ec <rmw_init_options_init+0xc0>)
 801849e:	f7ff ff39 	bl	8018314 <get_memory>
 80184a2:	b1f0      	cbz	r0, 80184e2 <rmw_init_options_init+0xb6>
 80184a4:	4a13      	ldr	r2, [pc, #76]	; (80184f4 <rmw_init_options_init+0xc8>)
 80184a6:	6883      	ldr	r3, [r0, #8]
 80184a8:	6851      	ldr	r1, [r2, #4]
 80184aa:	6563      	str	r3, [r4, #84]	; 0x54
 80184ac:	7810      	ldrb	r0, [r2, #0]
 80184ae:	6159      	str	r1, [r3, #20]
 80184b0:	68d1      	ldr	r1, [r2, #12]
 80184b2:	7418      	strb	r0, [r3, #16]
 80184b4:	61d9      	str	r1, [r3, #28]
 80184b6:	6911      	ldr	r1, [r2, #16]
 80184b8:	6219      	str	r1, [r3, #32]
 80184ba:	6951      	ldr	r1, [r2, #20]
 80184bc:	6892      	ldr	r2, [r2, #8]
 80184be:	6259      	str	r1, [r3, #36]	; 0x24
 80184c0:	619a      	str	r2, [r3, #24]
 80184c2:	f7f9 fe83 	bl	80121cc <uxr_nanos>
 80184c6:	f003 fe81 	bl	801c1cc <srand>
 80184ca:	f003 fead 	bl	801c228 <rand>
 80184ce:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80184d0:	6298      	str	r0, [r3, #40]	; 0x28
 80184d2:	2800      	cmp	r0, #0
 80184d4:	d0f9      	beq.n	80184ca <rmw_init_options_init+0x9e>
 80184d6:	2000      	movs	r0, #0
 80184d8:	b003      	add	sp, #12
 80184da:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80184de:	b004      	add	sp, #16
 80184e0:	4770      	bx	lr
 80184e2:	2001      	movs	r0, #1
 80184e4:	e7b1      	b.n	801844a <rmw_init_options_init+0x1e>
 80184e6:	bf00      	nop
 80184e8:	0801f060 	.word	0x0801f060
 80184ec:	20010344 	.word	0x20010344
 80184f0:	2000bb18 	.word	0x2000bb18
 80184f4:	2000b9a4 	.word	0x2000b9a4
 80184f8:	0801ea50 	.word	0x0801ea50

080184fc <rmw_init_options_copy>:
 80184fc:	b570      	push	{r4, r5, r6, lr}
 80184fe:	b158      	cbz	r0, 8018518 <rmw_init_options_copy+0x1c>
 8018500:	460d      	mov	r5, r1
 8018502:	b149      	cbz	r1, 8018518 <rmw_init_options_copy+0x1c>
 8018504:	4604      	mov	r4, r0
 8018506:	6880      	ldr	r0, [r0, #8]
 8018508:	b120      	cbz	r0, 8018514 <rmw_init_options_copy+0x18>
 801850a:	4b13      	ldr	r3, [pc, #76]	; (8018558 <rmw_init_options_copy+0x5c>)
 801850c:	6819      	ldr	r1, [r3, #0]
 801850e:	f7e7 fe97 	bl	8000240 <strcmp>
 8018512:	b9d8      	cbnz	r0, 801854c <rmw_init_options_copy+0x50>
 8018514:	68ae      	ldr	r6, [r5, #8]
 8018516:	b116      	cbz	r6, 801851e <rmw_init_options_copy+0x22>
 8018518:	260b      	movs	r6, #11
 801851a:	4630      	mov	r0, r6
 801851c:	bd70      	pop	{r4, r5, r6, pc}
 801851e:	2258      	movs	r2, #88	; 0x58
 8018520:	4621      	mov	r1, r4
 8018522:	4628      	mov	r0, r5
 8018524:	f004 fa3f 	bl	801c9a6 <memcpy>
 8018528:	480c      	ldr	r0, [pc, #48]	; (801855c <rmw_init_options_copy+0x60>)
 801852a:	f7ff fef3 	bl	8018314 <get_memory>
 801852e:	b180      	cbz	r0, 8018552 <rmw_init_options_copy+0x56>
 8018530:	6883      	ldr	r3, [r0, #8]
 8018532:	656b      	str	r3, [r5, #84]	; 0x54
 8018534:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8018536:	f103 0410 	add.w	r4, r3, #16
 801853a:	3510      	adds	r5, #16
 801853c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801853e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018540:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8018544:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8018548:	4630      	mov	r0, r6
 801854a:	bd70      	pop	{r4, r5, r6, pc}
 801854c:	260c      	movs	r6, #12
 801854e:	4630      	mov	r0, r6
 8018550:	bd70      	pop	{r4, r5, r6, pc}
 8018552:	2601      	movs	r6, #1
 8018554:	e7e1      	b.n	801851a <rmw_init_options_copy+0x1e>
 8018556:	bf00      	nop
 8018558:	0801f060 	.word	0x0801f060
 801855c:	20010344 	.word	0x20010344

08018560 <rmw_init_options_fini>:
 8018560:	b368      	cbz	r0, 80185be <rmw_init_options_fini+0x5e>
 8018562:	b510      	push	{r4, lr}
 8018564:	4604      	mov	r4, r0
 8018566:	b096      	sub	sp, #88	; 0x58
 8018568:	3040      	adds	r0, #64	; 0x40
 801856a:	f7f5 fb75 	bl	800dc58 <rcutils_allocator_is_valid>
 801856e:	b1f0      	cbz	r0, 80185ae <rmw_init_options_fini+0x4e>
 8018570:	68a0      	ldr	r0, [r4, #8]
 8018572:	b120      	cbz	r0, 801857e <rmw_init_options_fini+0x1e>
 8018574:	4b13      	ldr	r3, [pc, #76]	; (80185c4 <rmw_init_options_fini+0x64>)
 8018576:	6819      	ldr	r1, [r3, #0]
 8018578:	f7e7 fe62 	bl	8000240 <strcmp>
 801857c:	b9e8      	cbnz	r0, 80185ba <rmw_init_options_fini+0x5a>
 801857e:	4b12      	ldr	r3, [pc, #72]	; (80185c8 <rmw_init_options_fini+0x68>)
 8018580:	6819      	ldr	r1, [r3, #0]
 8018582:	b1b9      	cbz	r1, 80185b4 <rmw_init_options_fini+0x54>
 8018584:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8018586:	e001      	b.n	801858c <rmw_init_options_fini+0x2c>
 8018588:	6849      	ldr	r1, [r1, #4]
 801858a:	b199      	cbz	r1, 80185b4 <rmw_init_options_fini+0x54>
 801858c:	688b      	ldr	r3, [r1, #8]
 801858e:	429a      	cmp	r2, r3
 8018590:	d1fa      	bne.n	8018588 <rmw_init_options_fini+0x28>
 8018592:	480d      	ldr	r0, [pc, #52]	; (80185c8 <rmw_init_options_fini+0x68>)
 8018594:	f7ff fece 	bl	8018334 <put_memory>
 8018598:	4668      	mov	r0, sp
 801859a:	f7ff fca5 	bl	8017ee8 <rmw_get_zero_initialized_init_options>
 801859e:	2258      	movs	r2, #88	; 0x58
 80185a0:	4669      	mov	r1, sp
 80185a2:	4620      	mov	r0, r4
 80185a4:	f004 f9ff 	bl	801c9a6 <memcpy>
 80185a8:	2000      	movs	r0, #0
 80185aa:	b016      	add	sp, #88	; 0x58
 80185ac:	bd10      	pop	{r4, pc}
 80185ae:	200b      	movs	r0, #11
 80185b0:	b016      	add	sp, #88	; 0x58
 80185b2:	bd10      	pop	{r4, pc}
 80185b4:	2001      	movs	r0, #1
 80185b6:	b016      	add	sp, #88	; 0x58
 80185b8:	bd10      	pop	{r4, pc}
 80185ba:	200c      	movs	r0, #12
 80185bc:	e7f5      	b.n	80185aa <rmw_init_options_fini+0x4a>
 80185be:	200b      	movs	r0, #11
 80185c0:	4770      	bx	lr
 80185c2:	bf00      	nop
 80185c4:	0801f060 	.word	0x0801f060
 80185c8:	20010344 	.word	0x20010344

080185cc <rmw_init>:
 80185cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80185d0:	b083      	sub	sp, #12
 80185d2:	2800      	cmp	r0, #0
 80185d4:	f000 80d3 	beq.w	801877e <rmw_init+0x1b2>
 80185d8:	460e      	mov	r6, r1
 80185da:	2900      	cmp	r1, #0
 80185dc:	f000 80cf 	beq.w	801877e <rmw_init+0x1b2>
 80185e0:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80185e2:	4605      	mov	r5, r0
 80185e4:	2b00      	cmp	r3, #0
 80185e6:	f000 80ca 	beq.w	801877e <rmw_init+0x1b2>
 80185ea:	4b78      	ldr	r3, [pc, #480]	; (80187cc <rmw_init+0x200>)
 80185ec:	6880      	ldr	r0, [r0, #8]
 80185ee:	681f      	ldr	r7, [r3, #0]
 80185f0:	b128      	cbz	r0, 80185fe <rmw_init+0x32>
 80185f2:	4639      	mov	r1, r7
 80185f4:	f7e7 fe24 	bl	8000240 <strcmp>
 80185f8:	2800      	cmp	r0, #0
 80185fa:	f040 80ca 	bne.w	8018792 <rmw_init+0x1c6>
 80185fe:	4c74      	ldr	r4, [pc, #464]	; (80187d0 <rmw_init+0x204>)
 8018600:	f04f 0800 	mov.w	r8, #0
 8018604:	4973      	ldr	r1, [pc, #460]	; (80187d4 <rmw_init+0x208>)
 8018606:	4874      	ldr	r0, [pc, #464]	; (80187d8 <rmw_init+0x20c>)
 8018608:	e9d5 2300 	ldrd	r2, r3, [r5]
 801860c:	60b7      	str	r7, [r6, #8]
 801860e:	e9c6 2300 	strd	r2, r3, [r6]
 8018612:	68eb      	ldr	r3, [r5, #12]
 8018614:	2201      	movs	r2, #1
 8018616:	66b3      	str	r3, [r6, #104]	; 0x68
 8018618:	f7f5 fe18 	bl	800e24c <rmw_uxrce_init_session_memory>
 801861c:	4620      	mov	r0, r4
 801861e:	2204      	movs	r2, #4
 8018620:	496e      	ldr	r1, [pc, #440]	; (80187dc <rmw_init+0x210>)
 8018622:	f7f5 fe53 	bl	800e2cc <rmw_uxrce_init_static_input_buffer_memory>
 8018626:	486c      	ldr	r0, [pc, #432]	; (80187d8 <rmw_init+0x20c>)
 8018628:	f884 800d 	strb.w	r8, [r4, #13]
 801862c:	f7ff fe72 	bl	8018314 <get_memory>
 8018630:	2800      	cmp	r0, #0
 8018632:	f000 80a9 	beq.w	8018788 <rmw_init+0x1bc>
 8018636:	6884      	ldr	r4, [r0, #8]
 8018638:	6d68      	ldr	r0, [r5, #84]	; 0x54
 801863a:	f104 0910 	add.w	r9, r4, #16
 801863e:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8018640:	f890 c010 	ldrb.w	ip, [r0, #16]
 8018644:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8018648:	9101      	str	r1, [sp, #4]
 801864a:	4661      	mov	r1, ip
 801864c:	6a00      	ldr	r0, [r0, #32]
 801864e:	9000      	str	r0, [sp, #0]
 8018650:	4648      	mov	r0, r9
 8018652:	f001 fa2b 	bl	8019aac <uxr_set_custom_transport_callbacks>
 8018656:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801865a:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 801865e:	4960      	ldr	r1, [pc, #384]	; (80187e0 <rmw_init+0x214>)
 8018660:	4860      	ldr	r0, [pc, #384]	; (80187e4 <rmw_init+0x218>)
 8018662:	e9c4 22e3 	strd	r2, r2, [r4, #908]	; 0x38c
 8018666:	f504 725e 	add.w	r2, r4, #888	; 0x378
 801866a:	e9c4 22e1 	strd	r2, r2, [r4, #900]	; 0x384
 801866e:	f8c3 8594 	str.w	r8, [r3, #1428]	; 0x594
 8018672:	2201      	movs	r2, #1
 8018674:	f8c3 8598 	str.w	r8, [r3, #1432]	; 0x598
 8018678:	f8c3 859c 	str.w	r8, [r3, #1436]	; 0x59c
 801867c:	f8c3 85a0 	str.w	r8, [r3, #1440]	; 0x5a0
 8018680:	e9c4 78da 	strd	r7, r8, [r4, #872]	; 0x368
 8018684:	66f4      	str	r4, [r6, #108]	; 0x6c
 8018686:	f7f5 fdc1 	bl	800e20c <rmw_uxrce_init_node_memory>
 801868a:	2205      	movs	r2, #5
 801868c:	4956      	ldr	r1, [pc, #344]	; (80187e8 <rmw_init+0x21c>)
 801868e:	4857      	ldr	r0, [pc, #348]	; (80187ec <rmw_init+0x220>)
 8018690:	f7f5 fd9c 	bl	800e1cc <rmw_uxrce_init_subscription_memory>
 8018694:	220a      	movs	r2, #10
 8018696:	4956      	ldr	r1, [pc, #344]	; (80187f0 <rmw_init+0x224>)
 8018698:	4856      	ldr	r0, [pc, #344]	; (80187f4 <rmw_init+0x228>)
 801869a:	f7f5 fd77 	bl	800e18c <rmw_uxrce_init_publisher_memory>
 801869e:	2202      	movs	r2, #2
 80186a0:	4955      	ldr	r1, [pc, #340]	; (80187f8 <rmw_init+0x22c>)
 80186a2:	4856      	ldr	r0, [pc, #344]	; (80187fc <rmw_init+0x230>)
 80186a4:	f7f5 fd32 	bl	800e10c <rmw_uxrce_init_service_memory>
 80186a8:	2201      	movs	r2, #1
 80186aa:	4955      	ldr	r1, [pc, #340]	; (8018800 <rmw_init+0x234>)
 80186ac:	4855      	ldr	r0, [pc, #340]	; (8018804 <rmw_init+0x238>)
 80186ae:	f7f5 fd4d 	bl	800e14c <rmw_uxrce_init_client_memory>
 80186b2:	220f      	movs	r2, #15
 80186b4:	4954      	ldr	r1, [pc, #336]	; (8018808 <rmw_init+0x23c>)
 80186b6:	4855      	ldr	r0, [pc, #340]	; (801880c <rmw_init+0x240>)
 80186b8:	f7f5 fde8 	bl	800e28c <rmw_uxrce_init_topic_memory>
 80186bc:	2203      	movs	r2, #3
 80186be:	4954      	ldr	r1, [pc, #336]	; (8018810 <rmw_init+0x244>)
 80186c0:	4854      	ldr	r0, [pc, #336]	; (8018814 <rmw_init+0x248>)
 80186c2:	f7f5 fe23 	bl	800e30c <rmw_uxrce_init_init_options_impl_memory>
 80186c6:	2204      	movs	r2, #4
 80186c8:	4953      	ldr	r1, [pc, #332]	; (8018818 <rmw_init+0x24c>)
 80186ca:	4854      	ldr	r0, [pc, #336]	; (801881c <rmw_init+0x250>)
 80186cc:	f7f5 fe3e 	bl	800e34c <rmw_uxrce_init_wait_set_memory>
 80186d0:	4953      	ldr	r1, [pc, #332]	; (8018820 <rmw_init+0x254>)
 80186d2:	4854      	ldr	r0, [pc, #336]	; (8018824 <rmw_init+0x258>)
 80186d4:	2204      	movs	r2, #4
 80186d6:	f7f5 fe59 	bl	800e38c <rmw_uxrce_init_guard_condition_memory>
 80186da:	4642      	mov	r2, r8
 80186dc:	6d69      	ldr	r1, [r5, #84]	; 0x54
 80186de:	6ef0      	ldr	r0, [r6, #108]	; 0x6c
 80186e0:	f000 feba 	bl	8019458 <rmw_uxrce_transport_init>
 80186e4:	4607      	mov	r7, r0
 80186e6:	2800      	cmp	r0, #0
 80186e8:	d158      	bne.n	801879c <rmw_init+0x1d0>
 80186ea:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 80186ec:	f504 7528 	add.w	r5, r4, #672	; 0x2a0
 80186f0:	f504 7122 	add.w	r1, r4, #648	; 0x288
 80186f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80186f6:	4628      	mov	r0, r5
 80186f8:	f7f8 fbbe 	bl	8010e78 <uxr_init_session>
 80186fc:	4622      	mov	r2, r4
 80186fe:	494a      	ldr	r1, [pc, #296]	; (8018828 <rmw_init+0x25c>)
 8018700:	4628      	mov	r0, r5
 8018702:	f7f8 fbdd 	bl	8010ec0 <uxr_set_topic_callback>
 8018706:	463a      	mov	r2, r7
 8018708:	4948      	ldr	r1, [pc, #288]	; (801882c <rmw_init+0x260>)
 801870a:	4628      	mov	r0, r5
 801870c:	f7f8 fbd4 	bl	8010eb8 <uxr_set_status_callback>
 8018710:	463a      	mov	r2, r7
 8018712:	4947      	ldr	r1, [pc, #284]	; (8018830 <rmw_init+0x264>)
 8018714:	4628      	mov	r0, r5
 8018716:	f7f8 fbd7 	bl	8010ec8 <uxr_set_request_callback>
 801871a:	463a      	mov	r2, r7
 801871c:	4945      	ldr	r1, [pc, #276]	; (8018834 <rmw_init+0x268>)
 801871e:	4628      	mov	r0, r5
 8018720:	f7f8 fbd6 	bl	8010ed0 <uxr_set_reply_callback>
 8018724:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8018728:	2304      	movs	r3, #4
 801872a:	f504 7165 	add.w	r1, r4, #916	; 0x394
 801872e:	0092      	lsls	r2, r2, #2
 8018730:	4628      	mov	r0, r5
 8018732:	f7f8 fc0d 	bl	8010f50 <uxr_create_input_reliable_stream>
 8018736:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 801873a:	2304      	movs	r3, #4
 801873c:	f604 3194 	addw	r1, r4, #2964	; 0xb94
 8018740:	0092      	lsls	r2, r2, #2
 8018742:	f8c4 0374 	str.w	r0, [r4, #884]	; 0x374
 8018746:	4628      	mov	r0, r5
 8018748:	f7f8 fbd8 	bl	8010efc <uxr_create_output_reliable_stream>
 801874c:	f8c4 0378 	str.w	r0, [r4, #888]	; 0x378
 8018750:	4628      	mov	r0, r5
 8018752:	f7f8 fbf7 	bl	8010f44 <uxr_create_input_best_effort_stream>
 8018756:	f241 3194 	movw	r1, #5012	; 0x1394
 801875a:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
 801875e:	4628      	mov	r0, r5
 8018760:	4421      	add	r1, r4
 8018762:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8018766:	f7f8 fbb7 	bl	8010ed8 <uxr_create_output_best_effort_stream>
 801876a:	f8c4 037c 	str.w	r0, [r4, #892]	; 0x37c
 801876e:	4628      	mov	r0, r5
 8018770:	f7f9 f940 	bl	80119f4 <uxr_create_session>
 8018774:	b1f8      	cbz	r0, 80187b6 <rmw_init+0x1ea>
 8018776:	4638      	mov	r0, r7
 8018778:	b003      	add	sp, #12
 801877a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801877e:	270b      	movs	r7, #11
 8018780:	4638      	mov	r0, r7
 8018782:	b003      	add	sp, #12
 8018784:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018788:	2701      	movs	r7, #1
 801878a:	4638      	mov	r0, r7
 801878c:	b003      	add	sp, #12
 801878e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018792:	270c      	movs	r7, #12
 8018794:	4638      	mov	r0, r7
 8018796:	b003      	add	sp, #12
 8018798:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801879c:	4648      	mov	r0, r9
 801879e:	f001 f9c3 	bl	8019b28 <uxr_close_custom_transport>
 80187a2:	4621      	mov	r1, r4
 80187a4:	480c      	ldr	r0, [pc, #48]	; (80187d8 <rmw_init+0x20c>)
 80187a6:	f7ff fdc5 	bl	8018334 <put_memory>
 80187aa:	4638      	mov	r0, r7
 80187ac:	f8c6 806c 	str.w	r8, [r6, #108]	; 0x6c
 80187b0:	b003      	add	sp, #12
 80187b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80187b6:	4648      	mov	r0, r9
 80187b8:	f001 f9b6 	bl	8019b28 <uxr_close_custom_transport>
 80187bc:	4621      	mov	r1, r4
 80187be:	4806      	ldr	r0, [pc, #24]	; (80187d8 <rmw_init+0x20c>)
 80187c0:	f7ff fdb8 	bl	8018334 <put_memory>
 80187c4:	66f7      	str	r7, [r6, #108]	; 0x6c
 80187c6:	2701      	movs	r7, #1
 80187c8:	e7d5      	b.n	8018776 <rmw_init+0x1aa>
 80187ca:	bf00      	nop
 80187cc:	0801f060 	.word	0x0801f060
 80187d0:	20010394 	.word	0x20010394
 80187d4:	2000c640 	.word	0x2000c640
 80187d8:	20010384 	.word	0x20010384
 80187dc:	2000dbe8 	.word	0x2000dbe8
 80187e0:	2000bb9c 	.word	0x2000bb9c
 80187e4:	20010354 	.word	0x20010354
 80187e8:	2000fce8 	.word	0x2000fce8
 80187ec:	200103a4 	.word	0x200103a4
 80187f0:	2000bc40 	.word	0x2000bc40
 80187f4:	20010364 	.word	0x20010364
 80187f8:	2000c4b0 	.word	0x2000c4b0
 80187fc:	20010374 	.word	0x20010374
 8018800:	2000b9d0 	.word	0x2000b9d0
 8018804:	2000b9c0 	.word	0x2000b9c0
 8018808:	20010120 	.word	0x20010120
 801880c:	200103b4 	.word	0x200103b4
 8018810:	2000bb18 	.word	0x2000bb18
 8018814:	20010344 	.word	0x20010344
 8018818:	200102c4 	.word	0x200102c4
 801881c:	200103c4 	.word	0x200103c4
 8018820:	2000ba98 	.word	0x2000ba98
 8018824:	20010334 	.word	0x20010334
 8018828:	0801bc15 	.word	0x0801bc15
 801882c:	0801bc0d 	.word	0x0801bc0d
 8018830:	0801bcad 	.word	0x0801bcad
 8018834:	0801bd49 	.word	0x0801bd49

08018838 <rmw_context_fini>:
 8018838:	4b17      	ldr	r3, [pc, #92]	; (8018898 <rmw_context_fini+0x60>)
 801883a:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 801883c:	b570      	push	{r4, r5, r6, lr}
 801883e:	681c      	ldr	r4, [r3, #0]
 8018840:	4605      	mov	r5, r0
 8018842:	b334      	cbz	r4, 8018892 <rmw_context_fini+0x5a>
 8018844:	2600      	movs	r6, #0
 8018846:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 801884a:	6902      	ldr	r2, [r0, #16]
 801884c:	428a      	cmp	r2, r1
 801884e:	d018      	beq.n	8018882 <rmw_context_fini+0x4a>
 8018850:	2c00      	cmp	r4, #0
 8018852:	d1f8      	bne.n	8018846 <rmw_context_fini+0xe>
 8018854:	b189      	cbz	r1, 801887a <rmw_context_fini+0x42>
 8018856:	f8d1 3388 	ldr.w	r3, [r1, #904]	; 0x388
 801885a:	f501 7028 	add.w	r0, r1, #672	; 0x2a0
 801885e:	789b      	ldrb	r3, [r3, #2]
 8018860:	2b01      	cmp	r3, #1
 8018862:	bf14      	ite	ne
 8018864:	210a      	movne	r1, #10
 8018866:	2100      	moveq	r1, #0
 8018868:	f7f9 f89c 	bl	80119a4 <uxr_delete_session_retries>
 801886c:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 801886e:	f7f5 fdad 	bl	800e3cc <rmw_uxrce_fini_session_memory>
 8018872:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 8018874:	3010      	adds	r0, #16
 8018876:	f001 f957 	bl	8019b28 <uxr_close_custom_transport>
 801887a:	2300      	movs	r3, #0
 801887c:	4630      	mov	r0, r6
 801887e:	66eb      	str	r3, [r5, #108]	; 0x6c
 8018880:	bd70      	pop	{r4, r5, r6, pc}
 8018882:	3018      	adds	r0, #24
 8018884:	f000 f90e 	bl	8018aa4 <rmw_destroy_node>
 8018888:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
 801888a:	4606      	mov	r6, r0
 801888c:	2c00      	cmp	r4, #0
 801888e:	d1da      	bne.n	8018846 <rmw_context_fini+0xe>
 8018890:	e7e0      	b.n	8018854 <rmw_context_fini+0x1c>
 8018892:	4626      	mov	r6, r4
 8018894:	e7de      	b.n	8018854 <rmw_context_fini+0x1c>
 8018896:	bf00      	nop
 8018898:	20010354 	.word	0x20010354

0801889c <create_topic>:
 801889c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80188a0:	4605      	mov	r5, r0
 80188a2:	b084      	sub	sp, #16
 80188a4:	4822      	ldr	r0, [pc, #136]	; (8018930 <create_topic+0x94>)
 80188a6:	460f      	mov	r7, r1
 80188a8:	4616      	mov	r6, r2
 80188aa:	f7ff fd33 	bl	8018314 <get_memory>
 80188ae:	4604      	mov	r4, r0
 80188b0:	2800      	cmp	r0, #0
 80188b2:	d039      	beq.n	8018928 <create_topic+0x8c>
 80188b4:	692b      	ldr	r3, [r5, #16]
 80188b6:	2102      	movs	r1, #2
 80188b8:	6884      	ldr	r4, [r0, #8]
 80188ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80188be:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8018938 <create_topic+0x9c>
 80188c2:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	; 0x596
 80188c6:	1c42      	adds	r2, r0, #1
 80188c8:	e9c4 6505 	strd	r6, r5, [r4, #20]
 80188cc:	f8a3 2596 	strh.w	r2, [r3, #1430]	; 0x596
 80188d0:	f7f8 fa14 	bl	8010cfc <uxr_object_id>
 80188d4:	223c      	movs	r2, #60	; 0x3c
 80188d6:	6120      	str	r0, [r4, #16]
 80188d8:	4641      	mov	r1, r8
 80188da:	4638      	mov	r0, r7
 80188dc:	f7f5 fff4 	bl	800e8c8 <generate_topic_name>
 80188e0:	b1f0      	cbz	r0, 8018920 <create_topic+0x84>
 80188e2:	4f14      	ldr	r7, [pc, #80]	; (8018934 <create_topic+0x98>)
 80188e4:	4630      	mov	r0, r6
 80188e6:	2264      	movs	r2, #100	; 0x64
 80188e8:	4639      	mov	r1, r7
 80188ea:	f7f5 ffbf 	bl	800e86c <generate_type_name>
 80188ee:	b1b8      	cbz	r0, 8018920 <create_topic+0x84>
 80188f0:	6928      	ldr	r0, [r5, #16]
 80188f2:	2106      	movs	r1, #6
 80188f4:	696b      	ldr	r3, [r5, #20]
 80188f6:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 80188fa:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80188fe:	f8cd 8000 	str.w	r8, [sp]
 8018902:	e9cd 7101 	strd	r7, r1, [sp, #4]
 8018906:	6811      	ldr	r1, [r2, #0]
 8018908:	6922      	ldr	r2, [r4, #16]
 801890a:	f7f8 f839 	bl	8010980 <uxr_buffer_create_topic_bin>
 801890e:	4602      	mov	r2, r0
 8018910:	6928      	ldr	r0, [r5, #16]
 8018912:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8018916:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 801891a:	f7f5 fedb 	bl	800e6d4 <run_xrce_session>
 801891e:	b918      	cbnz	r0, 8018928 <create_topic+0x8c>
 8018920:	4620      	mov	r0, r4
 8018922:	2400      	movs	r4, #0
 8018924:	f7f5 fdc8 	bl	800e4b8 <rmw_uxrce_fini_topic_memory>
 8018928:	4620      	mov	r0, r4
 801892a:	b004      	add	sp, #16
 801892c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018930:	200103b4 	.word	0x200103b4
 8018934:	20010918 	.word	0x20010918
 8018938:	200108dc 	.word	0x200108dc

0801893c <destroy_topic>:
 801893c:	b538      	push	{r3, r4, r5, lr}
 801893e:	6985      	ldr	r5, [r0, #24]
 8018940:	b1dd      	cbz	r5, 801897a <destroy_topic+0x3e>
 8018942:	4604      	mov	r4, r0
 8018944:	6928      	ldr	r0, [r5, #16]
 8018946:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801894a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801894e:	6922      	ldr	r2, [r4, #16]
 8018950:	6819      	ldr	r1, [r3, #0]
 8018952:	f7f7 ff97 	bl	8010884 <uxr_buffer_delete_entity>
 8018956:	4602      	mov	r2, r0
 8018958:	6928      	ldr	r0, [r5, #16]
 801895a:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801895e:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8018962:	f7f5 feb7 	bl	800e6d4 <run_xrce_session>
 8018966:	4603      	mov	r3, r0
 8018968:	4620      	mov	r0, r4
 801896a:	2b00      	cmp	r3, #0
 801896c:	bf14      	ite	ne
 801896e:	2400      	movne	r4, #0
 8018970:	2402      	moveq	r4, #2
 8018972:	f7f5 fda1 	bl	800e4b8 <rmw_uxrce_fini_topic_memory>
 8018976:	4620      	mov	r0, r4
 8018978:	bd38      	pop	{r3, r4, r5, pc}
 801897a:	2401      	movs	r4, #1
 801897c:	4620      	mov	r0, r4
 801897e:	bd38      	pop	{r3, r4, r5, pc}

08018980 <create_node>:
 8018980:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018984:	b083      	sub	sp, #12
 8018986:	2b00      	cmp	r3, #0
 8018988:	d064      	beq.n	8018a54 <create_node+0xd4>
 801898a:	4606      	mov	r6, r0
 801898c:	4838      	ldr	r0, [pc, #224]	; (8018a70 <create_node+0xf0>)
 801898e:	460f      	mov	r7, r1
 8018990:	4690      	mov	r8, r2
 8018992:	461d      	mov	r5, r3
 8018994:	f7ff fcbe 	bl	8018314 <get_memory>
 8018998:	2800      	cmp	r0, #0
 801899a:	d05b      	beq.n	8018a54 <create_node+0xd4>
 801899c:	6884      	ldr	r4, [r0, #8]
 801899e:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 80189a0:	f104 092c 	add.w	r9, r4, #44	; 0x2c
 80189a4:	f104 0518 	add.w	r5, r4, #24
 80189a8:	6123      	str	r3, [r4, #16]
 80189aa:	f7ff fd39 	bl	8018420 <rmw_get_implementation_identifier>
 80189ae:	f8c4 9020 	str.w	r9, [r4, #32]
 80189b2:	e9c4 0406 	strd	r0, r4, [r4, #24]
 80189b6:	4630      	mov	r0, r6
 80189b8:	f7e7 fca2 	bl	8000300 <strlen>
 80189bc:	1c42      	adds	r2, r0, #1
 80189be:	2a3c      	cmp	r2, #60	; 0x3c
 80189c0:	d840      	bhi.n	8018a44 <create_node+0xc4>
 80189c2:	4648      	mov	r0, r9
 80189c4:	f104 0968 	add.w	r9, r4, #104	; 0x68
 80189c8:	4631      	mov	r1, r6
 80189ca:	f003 ffec 	bl	801c9a6 <memcpy>
 80189ce:	4638      	mov	r0, r7
 80189d0:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 80189d4:	f7e7 fc94 	bl	8000300 <strlen>
 80189d8:	1c42      	adds	r2, r0, #1
 80189da:	2a3c      	cmp	r2, #60	; 0x3c
 80189dc:	d832      	bhi.n	8018a44 <create_node+0xc4>
 80189de:	4639      	mov	r1, r7
 80189e0:	4648      	mov	r0, r9
 80189e2:	f003 ffe0 	bl	801c9a6 <memcpy>
 80189e6:	6923      	ldr	r3, [r4, #16]
 80189e8:	2101      	movs	r1, #1
 80189ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80189ee:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	; 0x594
 80189f2:	1842      	adds	r2, r0, r1
 80189f4:	f8a3 2594 	strh.w	r2, [r3, #1428]	; 0x594
 80189f8:	f7f8 f980 	bl	8010cfc <uxr_object_id>
 80189fc:	6160      	str	r0, [r4, #20]
 80189fe:	783b      	ldrb	r3, [r7, #0]
 8018a00:	2b2f      	cmp	r3, #47	; 0x2f
 8018a02:	d12c      	bne.n	8018a5e <create_node+0xde>
 8018a04:	787b      	ldrb	r3, [r7, #1]
 8018a06:	bb53      	cbnz	r3, 8018a5e <create_node+0xde>
 8018a08:	4633      	mov	r3, r6
 8018a0a:	4a1a      	ldr	r2, [pc, #104]	; (8018a74 <create_node+0xf4>)
 8018a0c:	213c      	movs	r1, #60	; 0x3c
 8018a0e:	481a      	ldr	r0, [pc, #104]	; (8018a78 <create_node+0xf8>)
 8018a10:	f003 fdbe 	bl	801c590 <sniprintf>
 8018a14:	6920      	ldr	r0, [r4, #16]
 8018a16:	2106      	movs	r1, #6
 8018a18:	fa1f f388 	uxth.w	r3, r8
 8018a1c:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 8018a20:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8018a24:	9101      	str	r1, [sp, #4]
 8018a26:	4914      	ldr	r1, [pc, #80]	; (8018a78 <create_node+0xf8>)
 8018a28:	9100      	str	r1, [sp, #0]
 8018a2a:	6811      	ldr	r1, [r2, #0]
 8018a2c:	6962      	ldr	r2, [r4, #20]
 8018a2e:	f7f7 ff75 	bl	801091c <uxr_buffer_create_participant_bin>
 8018a32:	4602      	mov	r2, r0
 8018a34:	6920      	ldr	r0, [r4, #16]
 8018a36:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8018a3a:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8018a3e:	f7f5 fe49 	bl	800e6d4 <run_xrce_session>
 8018a42:	b918      	cbnz	r0, 8018a4c <create_node+0xcc>
 8018a44:	4628      	mov	r0, r5
 8018a46:	2500      	movs	r5, #0
 8018a48:	f7f5 fcc6 	bl	800e3d8 <rmw_uxrce_fini_node_memory>
 8018a4c:	4628      	mov	r0, r5
 8018a4e:	b003      	add	sp, #12
 8018a50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018a54:	2500      	movs	r5, #0
 8018a56:	4628      	mov	r0, r5
 8018a58:	b003      	add	sp, #12
 8018a5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018a5e:	463b      	mov	r3, r7
 8018a60:	4a06      	ldr	r2, [pc, #24]	; (8018a7c <create_node+0xfc>)
 8018a62:	213c      	movs	r1, #60	; 0x3c
 8018a64:	9600      	str	r6, [sp, #0]
 8018a66:	4804      	ldr	r0, [pc, #16]	; (8018a78 <create_node+0xf8>)
 8018a68:	f003 fd92 	bl	801c590 <sniprintf>
 8018a6c:	e7d2      	b.n	8018a14 <create_node+0x94>
 8018a6e:	bf00      	nop
 8018a70:	20010354 	.word	0x20010354
 8018a74:	0801e5bc 	.word	0x0801e5bc
 8018a78:	2001097c 	.word	0x2001097c
 8018a7c:	0801ea58 	.word	0x0801ea58

08018a80 <rmw_create_node>:
 8018a80:	468c      	mov	ip, r1
 8018a82:	4611      	mov	r1, r2
 8018a84:	f1bc 0f00 	cmp.w	ip, #0
 8018a88:	d00a      	beq.n	8018aa0 <rmw_create_node+0x20>
 8018a8a:	f89c 3000 	ldrb.w	r3, [ip]
 8018a8e:	b13b      	cbz	r3, 8018aa0 <rmw_create_node+0x20>
 8018a90:	b132      	cbz	r2, 8018aa0 <rmw_create_node+0x20>
 8018a92:	7813      	ldrb	r3, [r2, #0]
 8018a94:	b123      	cbz	r3, 8018aa0 <rmw_create_node+0x20>
 8018a96:	4603      	mov	r3, r0
 8018a98:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8018a9a:	4660      	mov	r0, ip
 8018a9c:	f7ff bf70 	b.w	8018980 <create_node>
 8018aa0:	2000      	movs	r0, #0
 8018aa2:	4770      	bx	lr

08018aa4 <rmw_destroy_node>:
 8018aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018aa6:	b328      	cbz	r0, 8018af4 <rmw_destroy_node+0x50>
 8018aa8:	4607      	mov	r7, r0
 8018aaa:	6800      	ldr	r0, [r0, #0]
 8018aac:	b120      	cbz	r0, 8018ab8 <rmw_destroy_node+0x14>
 8018aae:	4b37      	ldr	r3, [pc, #220]	; (8018b8c <rmw_destroy_node+0xe8>)
 8018ab0:	6819      	ldr	r1, [r3, #0]
 8018ab2:	f7e7 fbc5 	bl	8000240 <strcmp>
 8018ab6:	b9e8      	cbnz	r0, 8018af4 <rmw_destroy_node+0x50>
 8018ab8:	687d      	ldr	r5, [r7, #4]
 8018aba:	b1dd      	cbz	r5, 8018af4 <rmw_destroy_node+0x50>
 8018abc:	4b34      	ldr	r3, [pc, #208]	; (8018b90 <rmw_destroy_node+0xec>)
 8018abe:	681c      	ldr	r4, [r3, #0]
 8018ac0:	2c00      	cmp	r4, #0
 8018ac2:	d060      	beq.n	8018b86 <rmw_destroy_node+0xe2>
 8018ac4:	2600      	movs	r6, #0
 8018ac6:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8018aca:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 8018ace:	429d      	cmp	r5, r3
 8018ad0:	d013      	beq.n	8018afa <rmw_destroy_node+0x56>
 8018ad2:	2c00      	cmp	r4, #0
 8018ad4:	d1f7      	bne.n	8018ac6 <rmw_destroy_node+0x22>
 8018ad6:	4b2f      	ldr	r3, [pc, #188]	; (8018b94 <rmw_destroy_node+0xf0>)
 8018ad8:	681c      	ldr	r4, [r3, #0]
 8018ada:	b1c4      	cbz	r4, 8018b0e <rmw_destroy_node+0x6a>
 8018adc:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8018ae0:	6a0b      	ldr	r3, [r1, #32]
 8018ae2:	429d      	cmp	r5, r3
 8018ae4:	d1f9      	bne.n	8018ada <rmw_destroy_node+0x36>
 8018ae6:	317c      	adds	r1, #124	; 0x7c
 8018ae8:	4638      	mov	r0, r7
 8018aea:	f000 fbff 	bl	80192ec <rmw_destroy_subscription>
 8018aee:	2801      	cmp	r0, #1
 8018af0:	4606      	mov	r6, r0
 8018af2:	d1f2      	bne.n	8018ada <rmw_destroy_node+0x36>
 8018af4:	2601      	movs	r6, #1
 8018af6:	4630      	mov	r0, r6
 8018af8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018afa:	3184      	adds	r1, #132	; 0x84
 8018afc:	4638      	mov	r0, r7
 8018afe:	f7f5 fab1 	bl	800e064 <rmw_destroy_publisher>
 8018b02:	2801      	cmp	r0, #1
 8018b04:	4606      	mov	r6, r0
 8018b06:	d0f5      	beq.n	8018af4 <rmw_destroy_node+0x50>
 8018b08:	2c00      	cmp	r4, #0
 8018b0a:	d1dc      	bne.n	8018ac6 <rmw_destroy_node+0x22>
 8018b0c:	e7e3      	b.n	8018ad6 <rmw_destroy_node+0x32>
 8018b0e:	4b22      	ldr	r3, [pc, #136]	; (8018b98 <rmw_destroy_node+0xf4>)
 8018b10:	681c      	ldr	r4, [r3, #0]
 8018b12:	b16c      	cbz	r4, 8018b30 <rmw_destroy_node+0x8c>
 8018b14:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8018b18:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 8018b1a:	429d      	cmp	r5, r3
 8018b1c:	d1f9      	bne.n	8018b12 <rmw_destroy_node+0x6e>
 8018b1e:	317c      	adds	r1, #124	; 0x7c
 8018b20:	4638      	mov	r0, r7
 8018b22:	f000 fa6d 	bl	8019000 <rmw_destroy_service>
 8018b26:	2801      	cmp	r0, #1
 8018b28:	4606      	mov	r6, r0
 8018b2a:	d0e3      	beq.n	8018af4 <rmw_destroy_node+0x50>
 8018b2c:	2c00      	cmp	r4, #0
 8018b2e:	d1f1      	bne.n	8018b14 <rmw_destroy_node+0x70>
 8018b30:	4b1a      	ldr	r3, [pc, #104]	; (8018b9c <rmw_destroy_node+0xf8>)
 8018b32:	681c      	ldr	r4, [r3, #0]
 8018b34:	b16c      	cbz	r4, 8018b52 <rmw_destroy_node+0xae>
 8018b36:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8018b3a:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 8018b3c:	429d      	cmp	r5, r3
 8018b3e:	d1f9      	bne.n	8018b34 <rmw_destroy_node+0x90>
 8018b40:	317c      	adds	r1, #124	; 0x7c
 8018b42:	4638      	mov	r0, r7
 8018b44:	f7ff fc0a 	bl	801835c <rmw_destroy_client>
 8018b48:	2801      	cmp	r0, #1
 8018b4a:	4606      	mov	r6, r0
 8018b4c:	d0d2      	beq.n	8018af4 <rmw_destroy_node+0x50>
 8018b4e:	2c00      	cmp	r4, #0
 8018b50:	d1f1      	bne.n	8018b36 <rmw_destroy_node+0x92>
 8018b52:	6928      	ldr	r0, [r5, #16]
 8018b54:	696a      	ldr	r2, [r5, #20]
 8018b56:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8018b5a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8018b5e:	6819      	ldr	r1, [r3, #0]
 8018b60:	f7f7 fe90 	bl	8010884 <uxr_buffer_delete_entity>
 8018b64:	4602      	mov	r2, r0
 8018b66:	6928      	ldr	r0, [r5, #16]
 8018b68:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8018b6c:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8018b70:	f7f5 fdb0 	bl	800e6d4 <run_xrce_session>
 8018b74:	4603      	mov	r3, r0
 8018b76:	4638      	mov	r0, r7
 8018b78:	2b00      	cmp	r3, #0
 8018b7a:	bf08      	it	eq
 8018b7c:	2602      	moveq	r6, #2
 8018b7e:	f7f5 fc2b 	bl	800e3d8 <rmw_uxrce_fini_node_memory>
 8018b82:	4630      	mov	r0, r6
 8018b84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018b86:	4626      	mov	r6, r4
 8018b88:	e7a5      	b.n	8018ad6 <rmw_destroy_node+0x32>
 8018b8a:	bf00      	nop
 8018b8c:	0801f060 	.word	0x0801f060
 8018b90:	20010364 	.word	0x20010364
 8018b94:	200103a4 	.word	0x200103a4
 8018b98:	20010374 	.word	0x20010374
 8018b9c:	2000b9c0 	.word	0x2000b9c0

08018ba0 <rmw_node_get_graph_guard_condition>:
 8018ba0:	6843      	ldr	r3, [r0, #4]
 8018ba2:	6918      	ldr	r0, [r3, #16]
 8018ba4:	f500 705a 	add.w	r0, r0, #872	; 0x368
 8018ba8:	4770      	bx	lr
 8018baa:	bf00      	nop

08018bac <rmw_send_request>:
 8018bac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018bb0:	4604      	mov	r4, r0
 8018bb2:	6800      	ldr	r0, [r0, #0]
 8018bb4:	b08b      	sub	sp, #44	; 0x2c
 8018bb6:	460e      	mov	r6, r1
 8018bb8:	4615      	mov	r5, r2
 8018bba:	b128      	cbz	r0, 8018bc8 <rmw_send_request+0x1c>
 8018bbc:	4b21      	ldr	r3, [pc, #132]	; (8018c44 <rmw_send_request+0x98>)
 8018bbe:	6819      	ldr	r1, [r3, #0]
 8018bc0:	f7e7 fb3e 	bl	8000240 <strcmp>
 8018bc4:	2800      	cmp	r0, #0
 8018bc6:	d139      	bne.n	8018c3c <rmw_send_request+0x90>
 8018bc8:	6864      	ldr	r4, [r4, #4]
 8018bca:	2700      	movs	r7, #0
 8018bcc:	6963      	ldr	r3, [r4, #20]
 8018bce:	f8d4 8078 	ldr.w	r8, [r4, #120]	; 0x78
 8018bd2:	689b      	ldr	r3, [r3, #8]
 8018bd4:	4798      	blx	r3
 8018bd6:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8018bda:	4630      	mov	r0, r6
 8018bdc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018be0:	4798      	blx	r3
 8018be2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8018be6:	9000      	str	r0, [sp, #0]
 8018be8:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8018bec:	6922      	ldr	r2, [r4, #16]
 8018bee:	ab02      	add	r3, sp, #8
 8018bf0:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8018bf2:	f7f9 fb8b 	bl	801230c <uxr_prepare_output_stream>
 8018bf6:	e9c5 0700 	strd	r0, r7, [r5]
 8018bfa:	b198      	cbz	r0, 8018c24 <rmw_send_request+0x78>
 8018bfc:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8018c00:	a902      	add	r1, sp, #8
 8018c02:	4630      	mov	r0, r6
 8018c04:	4798      	blx	r3
 8018c06:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
 8018c0a:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8018c0e:	2b01      	cmp	r3, #1
 8018c10:	d00c      	beq.n	8018c2c <rmw_send_request+0x80>
 8018c12:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8018c14:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8018c18:	f7f8 fd7a 	bl	8011710 <uxr_run_session_until_confirm_delivery>
 8018c1c:	4638      	mov	r0, r7
 8018c1e:	b00b      	add	sp, #44	; 0x2c
 8018c20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018c24:	2001      	movs	r0, #1
 8018c26:	b00b      	add	sp, #44	; 0x2c
 8018c28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018c2c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8018c30:	f7f8 f9b4 	bl	8010f9c <uxr_flash_output_streams>
 8018c34:	4638      	mov	r0, r7
 8018c36:	b00b      	add	sp, #44	; 0x2c
 8018c38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018c3c:	200c      	movs	r0, #12
 8018c3e:	b00b      	add	sp, #44	; 0x2c
 8018c40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018c44:	0801f060 	.word	0x0801f060

08018c48 <rmw_take_request>:
 8018c48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018c4c:	4605      	mov	r5, r0
 8018c4e:	6800      	ldr	r0, [r0, #0]
 8018c50:	b089      	sub	sp, #36	; 0x24
 8018c52:	460c      	mov	r4, r1
 8018c54:	4690      	mov	r8, r2
 8018c56:	461e      	mov	r6, r3
 8018c58:	b128      	cbz	r0, 8018c66 <rmw_take_request+0x1e>
 8018c5a:	4b28      	ldr	r3, [pc, #160]	; (8018cfc <rmw_take_request+0xb4>)
 8018c5c:	6819      	ldr	r1, [r3, #0]
 8018c5e:	f7e7 faef 	bl	8000240 <strcmp>
 8018c62:	2800      	cmp	r0, #0
 8018c64:	d146      	bne.n	8018cf4 <rmw_take_request+0xac>
 8018c66:	b10e      	cbz	r6, 8018c6c <rmw_take_request+0x24>
 8018c68:	2300      	movs	r3, #0
 8018c6a:	7033      	strb	r3, [r6, #0]
 8018c6c:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8018c70:	f7f5 fcb2 	bl	800e5d8 <rmw_uxrce_clean_expired_static_input_buffer>
 8018c74:	4648      	mov	r0, r9
 8018c76:	f7f5 fc85 	bl	800e584 <rmw_uxrce_find_static_input_buffer_by_owner>
 8018c7a:	4607      	mov	r7, r0
 8018c7c:	b3b0      	cbz	r0, 8018cec <rmw_take_request+0xa4>
 8018c7e:	6885      	ldr	r5, [r0, #8]
 8018c80:	f8d5 2838 	ldr.w	r2, [r5, #2104]	; 0x838
 8018c84:	f8d5 383c 	ldr.w	r3, [r5, #2108]	; 0x83c
 8018c88:	e9c4 3208 	strd	r3, r2, [r4, #32]
 8018c8c:	f895 3837 	ldrb.w	r3, [r5, #2103]	; 0x837
 8018c90:	7423      	strb	r3, [r4, #16]
 8018c92:	f8b5 2834 	ldrh.w	r2, [r5, #2100]	; 0x834
 8018c96:	f895 3836 	ldrb.w	r3, [r5, #2102]	; 0x836
 8018c9a:	f8a4 2011 	strh.w	r2, [r4, #17]
 8018c9e:	74e3      	strb	r3, [r4, #19]
 8018ca0:	f8d5 1828 	ldr.w	r1, [r5, #2088]	; 0x828
 8018ca4:	f8d5 282c 	ldr.w	r2, [r5, #2092]	; 0x82c
 8018ca8:	f8d5 3830 	ldr.w	r3, [r5, #2096]	; 0x830
 8018cac:	6161      	str	r1, [r4, #20]
 8018cae:	61a2      	str	r2, [r4, #24]
 8018cb0:	61e3      	str	r3, [r4, #28]
 8018cb2:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8018cb6:	689b      	ldr	r3, [r3, #8]
 8018cb8:	4798      	blx	r3
 8018cba:	6844      	ldr	r4, [r0, #4]
 8018cbc:	f8d5 2810 	ldr.w	r2, [r5, #2064]	; 0x810
 8018cc0:	f105 0110 	add.w	r1, r5, #16
 8018cc4:	4668      	mov	r0, sp
 8018cc6:	f7f7 fd69 	bl	801079c <ucdr_init_buffer>
 8018cca:	4641      	mov	r1, r8
 8018ccc:	68e3      	ldr	r3, [r4, #12]
 8018cce:	4668      	mov	r0, sp
 8018cd0:	4798      	blx	r3
 8018cd2:	4639      	mov	r1, r7
 8018cd4:	4604      	mov	r4, r0
 8018cd6:	480a      	ldr	r0, [pc, #40]	; (8018d00 <rmw_take_request+0xb8>)
 8018cd8:	f7ff fb2c 	bl	8018334 <put_memory>
 8018cdc:	b106      	cbz	r6, 8018ce0 <rmw_take_request+0x98>
 8018cde:	7034      	strb	r4, [r6, #0]
 8018ce0:	f084 0001 	eor.w	r0, r4, #1
 8018ce4:	b2c0      	uxtb	r0, r0
 8018ce6:	b009      	add	sp, #36	; 0x24
 8018ce8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018cec:	2001      	movs	r0, #1
 8018cee:	b009      	add	sp, #36	; 0x24
 8018cf0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018cf4:	200c      	movs	r0, #12
 8018cf6:	b009      	add	sp, #36	; 0x24
 8018cf8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018cfc:	0801f060 	.word	0x0801f060
 8018d00:	20010394 	.word	0x20010394

08018d04 <rmw_send_response>:
 8018d04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018d06:	4605      	mov	r5, r0
 8018d08:	6800      	ldr	r0, [r0, #0]
 8018d0a:	b091      	sub	sp, #68	; 0x44
 8018d0c:	460c      	mov	r4, r1
 8018d0e:	4616      	mov	r6, r2
 8018d10:	b128      	cbz	r0, 8018d1e <rmw_send_response+0x1a>
 8018d12:	4b29      	ldr	r3, [pc, #164]	; (8018db8 <rmw_send_response+0xb4>)
 8018d14:	6819      	ldr	r1, [r3, #0]
 8018d16:	f7e7 fa93 	bl	8000240 <strcmp>
 8018d1a:	2800      	cmp	r0, #0
 8018d1c:	d141      	bne.n	8018da2 <rmw_send_response+0x9e>
 8018d1e:	686d      	ldr	r5, [r5, #4]
 8018d20:	68a1      	ldr	r1, [r4, #8]
 8018d22:	6860      	ldr	r0, [r4, #4]
 8018d24:	6faf      	ldr	r7, [r5, #120]	; 0x78
 8018d26:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8018d2a:	9307      	str	r3, [sp, #28]
 8018d2c:	4623      	mov	r3, r4
 8018d2e:	9206      	str	r2, [sp, #24]
 8018d30:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018d34:	789b      	ldrb	r3, [r3, #2]
 8018d36:	f88d 2017 	strb.w	r2, [sp, #23]
 8018d3a:	f88d 3016 	strb.w	r3, [sp, #22]
 8018d3e:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 8018d42:	68e2      	ldr	r2, [r4, #12]
 8018d44:	f8ad 3014 	strh.w	r3, [sp, #20]
 8018d48:	ab02      	add	r3, sp, #8
 8018d4a:	696c      	ldr	r4, [r5, #20]
 8018d4c:	c307      	stmia	r3!, {r0, r1, r2}
 8018d4e:	68e3      	ldr	r3, [r4, #12]
 8018d50:	4798      	blx	r3
 8018d52:	6844      	ldr	r4, [r0, #4]
 8018d54:	4630      	mov	r0, r6
 8018d56:	6923      	ldr	r3, [r4, #16]
 8018d58:	4798      	blx	r3
 8018d5a:	f100 0318 	add.w	r3, r0, #24
 8018d5e:	6938      	ldr	r0, [r7, #16]
 8018d60:	9300      	str	r3, [sp, #0]
 8018d62:	ab08      	add	r3, sp, #32
 8018d64:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8018d68:	692a      	ldr	r2, [r5, #16]
 8018d6a:	6f29      	ldr	r1, [r5, #112]	; 0x70
 8018d6c:	f7f9 face 	bl	801230c <uxr_prepare_output_stream>
 8018d70:	b910      	cbnz	r0, 8018d78 <rmw_send_response+0x74>
 8018d72:	2001      	movs	r0, #1
 8018d74:	b011      	add	sp, #68	; 0x44
 8018d76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018d78:	a902      	add	r1, sp, #8
 8018d7a:	a808      	add	r0, sp, #32
 8018d7c:	f7fa fc32 	bl	80135e4 <uxr_serialize_SampleIdentity>
 8018d80:	68a3      	ldr	r3, [r4, #8]
 8018d82:	a908      	add	r1, sp, #32
 8018d84:	4630      	mov	r0, r6
 8018d86:	4798      	blx	r3
 8018d88:	f895 3072 	ldrb.w	r3, [r5, #114]	; 0x72
 8018d8c:	6938      	ldr	r0, [r7, #16]
 8018d8e:	2b01      	cmp	r3, #1
 8018d90:	d00a      	beq.n	8018da8 <rmw_send_response+0xa4>
 8018d92:	6f69      	ldr	r1, [r5, #116]	; 0x74
 8018d94:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8018d98:	f7f8 fcba 	bl	8011710 <uxr_run_session_until_confirm_delivery>
 8018d9c:	2000      	movs	r0, #0
 8018d9e:	b011      	add	sp, #68	; 0x44
 8018da0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018da2:	200c      	movs	r0, #12
 8018da4:	b011      	add	sp, #68	; 0x44
 8018da6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018da8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8018dac:	f7f8 f8f6 	bl	8010f9c <uxr_flash_output_streams>
 8018db0:	2000      	movs	r0, #0
 8018db2:	b011      	add	sp, #68	; 0x44
 8018db4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018db6:	bf00      	nop
 8018db8:	0801f060 	.word	0x0801f060

08018dbc <rmw_take_response>:
 8018dbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018dc0:	4604      	mov	r4, r0
 8018dc2:	6800      	ldr	r0, [r0, #0]
 8018dc4:	b088      	sub	sp, #32
 8018dc6:	460f      	mov	r7, r1
 8018dc8:	4690      	mov	r8, r2
 8018dca:	461d      	mov	r5, r3
 8018dcc:	b120      	cbz	r0, 8018dd8 <rmw_take_response+0x1c>
 8018dce:	4b1d      	ldr	r3, [pc, #116]	; (8018e44 <rmw_take_response+0x88>)
 8018dd0:	6819      	ldr	r1, [r3, #0]
 8018dd2:	f7e7 fa35 	bl	8000240 <strcmp>
 8018dd6:	bb68      	cbnz	r0, 8018e34 <rmw_take_response+0x78>
 8018dd8:	b10d      	cbz	r5, 8018dde <rmw_take_response+0x22>
 8018dda:	2300      	movs	r3, #0
 8018ddc:	702b      	strb	r3, [r5, #0]
 8018dde:	6864      	ldr	r4, [r4, #4]
 8018de0:	f7f5 fbfa 	bl	800e5d8 <rmw_uxrce_clean_expired_static_input_buffer>
 8018de4:	4620      	mov	r0, r4
 8018de6:	f7f5 fbcd 	bl	800e584 <rmw_uxrce_find_static_input_buffer_by_owner>
 8018dea:	4606      	mov	r6, r0
 8018dec:	b330      	cbz	r0, 8018e3c <rmw_take_response+0x80>
 8018dee:	6963      	ldr	r3, [r4, #20]
 8018df0:	6884      	ldr	r4, [r0, #8]
 8018df2:	68db      	ldr	r3, [r3, #12]
 8018df4:	f504 6203 	add.w	r2, r4, #2096	; 0x830
 8018df8:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8018dfc:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8018e00:	4798      	blx	r3
 8018e02:	6847      	ldr	r7, [r0, #4]
 8018e04:	f8d4 2810 	ldr.w	r2, [r4, #2064]	; 0x810
 8018e08:	f104 0110 	add.w	r1, r4, #16
 8018e0c:	4668      	mov	r0, sp
 8018e0e:	f7f7 fcc5 	bl	801079c <ucdr_init_buffer>
 8018e12:	4641      	mov	r1, r8
 8018e14:	68fb      	ldr	r3, [r7, #12]
 8018e16:	4668      	mov	r0, sp
 8018e18:	4798      	blx	r3
 8018e1a:	4631      	mov	r1, r6
 8018e1c:	4604      	mov	r4, r0
 8018e1e:	480a      	ldr	r0, [pc, #40]	; (8018e48 <rmw_take_response+0x8c>)
 8018e20:	f7ff fa88 	bl	8018334 <put_memory>
 8018e24:	b105      	cbz	r5, 8018e28 <rmw_take_response+0x6c>
 8018e26:	702c      	strb	r4, [r5, #0]
 8018e28:	f084 0001 	eor.w	r0, r4, #1
 8018e2c:	b2c0      	uxtb	r0, r0
 8018e2e:	b008      	add	sp, #32
 8018e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018e34:	200c      	movs	r0, #12
 8018e36:	b008      	add	sp, #32
 8018e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018e3c:	2001      	movs	r0, #1
 8018e3e:	b008      	add	sp, #32
 8018e40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018e44:	0801f060 	.word	0x0801f060
 8018e48:	20010394 	.word	0x20010394

08018e4c <rmw_create_service>:
 8018e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e50:	b091      	sub	sp, #68	; 0x44
 8018e52:	2900      	cmp	r1, #0
 8018e54:	f000 80bb 	beq.w	8018fce <rmw_create_service+0x182>
 8018e58:	4606      	mov	r6, r0
 8018e5a:	2800      	cmp	r0, #0
 8018e5c:	f000 80b7 	beq.w	8018fce <rmw_create_service+0x182>
 8018e60:	4614      	mov	r4, r2
 8018e62:	6800      	ldr	r0, [r0, #0]
 8018e64:	4689      	mov	r9, r1
 8018e66:	461d      	mov	r5, r3
 8018e68:	f7f5 fd46 	bl	800e8f8 <is_uxrce_rmw_identifier_valid>
 8018e6c:	2c00      	cmp	r4, #0
 8018e6e:	f000 80ae 	beq.w	8018fce <rmw_create_service+0x182>
 8018e72:	f080 0001 	eor.w	r0, r0, #1
 8018e76:	b2c0      	uxtb	r0, r0
 8018e78:	2800      	cmp	r0, #0
 8018e7a:	f040 80a8 	bne.w	8018fce <rmw_create_service+0x182>
 8018e7e:	7823      	ldrb	r3, [r4, #0]
 8018e80:	2b00      	cmp	r3, #0
 8018e82:	f000 80a4 	beq.w	8018fce <rmw_create_service+0x182>
 8018e86:	2d00      	cmp	r5, #0
 8018e88:	f000 80a1 	beq.w	8018fce <rmw_create_service+0x182>
 8018e8c:	4856      	ldr	r0, [pc, #344]	; (8018fe8 <rmw_create_service+0x19c>)
 8018e8e:	f8d6 8004 	ldr.w	r8, [r6, #4]
 8018e92:	f7ff fa3f 	bl	8018314 <get_memory>
 8018e96:	4606      	mov	r6, r0
 8018e98:	2800      	cmp	r0, #0
 8018e9a:	f000 8099 	beq.w	8018fd0 <rmw_create_service+0x184>
 8018e9e:	6887      	ldr	r7, [r0, #8]
 8018ea0:	f107 0a88 	add.w	sl, r7, #136	; 0x88
 8018ea4:	f8c7 7080 	str.w	r7, [r7, #128]	; 0x80
 8018ea8:	f7ff faba 	bl	8018420 <rmw_get_implementation_identifier>
 8018eac:	67f8      	str	r0, [r7, #124]	; 0x7c
 8018eae:	f8c7 a084 	str.w	sl, [r7, #132]	; 0x84
 8018eb2:	4620      	mov	r0, r4
 8018eb4:	f7e7 fa24 	bl	8000300 <strlen>
 8018eb8:	1c42      	adds	r2, r0, #1
 8018eba:	f107 067c 	add.w	r6, r7, #124	; 0x7c
 8018ebe:	2a3c      	cmp	r2, #60	; 0x3c
 8018ec0:	f200 808a 	bhi.w	8018fd8 <rmw_create_service+0x18c>
 8018ec4:	4621      	mov	r1, r4
 8018ec6:	4650      	mov	r0, sl
 8018ec8:	f003 fd6d 	bl	801c9a6 <memcpy>
 8018ecc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8018ed0:	4629      	mov	r1, r5
 8018ed2:	2250      	movs	r2, #80	; 0x50
 8018ed4:	f107 0020 	add.w	r0, r7, #32
 8018ed8:	f8c7 8078 	str.w	r8, [r7, #120]	; 0x78
 8018edc:	677b      	str	r3, [r7, #116]	; 0x74
 8018ede:	f003 fd62 	bl	801c9a6 <memcpy>
 8018ee2:	4648      	mov	r0, r9
 8018ee4:	4941      	ldr	r1, [pc, #260]	; (8018fec <rmw_create_service+0x1a0>)
 8018ee6:	f7f5 fd21 	bl	800e92c <get_service_typesupport_handle>
 8018eea:	2800      	cmp	r0, #0
 8018eec:	d074      	beq.n	8018fd8 <rmw_create_service+0x18c>
 8018eee:	6843      	ldr	r3, [r0, #4]
 8018ef0:	617b      	str	r3, [r7, #20]
 8018ef2:	2b00      	cmp	r3, #0
 8018ef4:	d070      	beq.n	8018fd8 <rmw_create_service+0x18c>
 8018ef6:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8018efa:	2108      	movs	r1, #8
 8018efc:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 8018ff4 <rmw_create_service+0x1a8>
 8018f00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8018f04:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 8018ff8 <rmw_create_service+0x1ac>
 8018f08:	f8b3 05a2 	ldrh.w	r0, [r3, #1442]	; 0x5a2
 8018f0c:	1c42      	adds	r2, r0, #1
 8018f0e:	f8a3 25a2 	strh.w	r2, [r3, #1442]	; 0x5a2
 8018f12:	f7f7 fef3 	bl	8010cfc <uxr_object_id>
 8018f16:	2364      	movs	r3, #100	; 0x64
 8018f18:	6138      	str	r0, [r7, #16]
 8018f1a:	4652      	mov	r2, sl
 8018f1c:	4649      	mov	r1, r9
 8018f1e:	6978      	ldr	r0, [r7, #20]
 8018f20:	f7f5 fc3e 	bl	800e7a0 <generate_service_types>
 8018f24:	2800      	cmp	r0, #0
 8018f26:	d057      	beq.n	8018fd8 <rmw_create_service+0x18c>
 8018f28:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 8018ffc <rmw_create_service+0x1b0>
 8018f2c:	233c      	movs	r3, #60	; 0x3c
 8018f2e:	4a30      	ldr	r2, [pc, #192]	; (8018ff0 <rmw_create_service+0x1a4>)
 8018f30:	4620      	mov	r0, r4
 8018f32:	4659      	mov	r1, fp
 8018f34:	f7f5 fc02 	bl	800e73c <generate_service_topics>
 8018f38:	2800      	cmp	r0, #0
 8018f3a:	d04d      	beq.n	8018fd8 <rmw_create_service+0x18c>
 8018f3c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8018f40:	a80c      	add	r0, sp, #48	; 0x30
 8018f42:	4629      	mov	r1, r5
 8018f44:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8018f48:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8018f4c:	f7f5 fbde 	bl	800e70c <convert_qos_profile>
 8018f50:	4a27      	ldr	r2, [pc, #156]	; (8018ff0 <rmw_create_service+0x1a4>)
 8018f52:	a80c      	add	r0, sp, #48	; 0x30
 8018f54:	9400      	str	r4, [sp, #0]
 8018f56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018f58:	e9cd b203 	strd	fp, r2, [sp, #12]
 8018f5c:	e9cd 9a01 	strd	r9, sl, [sp, #4]
 8018f60:	c803      	ldmia	r0, {r0, r1}
 8018f62:	9a08      	ldr	r2, [sp, #32]
 8018f64:	9005      	str	r0, [sp, #20]
 8018f66:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8018f6a:	2306      	movs	r3, #6
 8018f6c:	f8ad 1018 	strh.w	r1, [sp, #24]
 8018f70:	9307      	str	r3, [sp, #28]
 8018f72:	6811      	ldr	r1, [r2, #0]
 8018f74:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8018f78:	693a      	ldr	r2, [r7, #16]
 8018f7a:	f7f7 fe85 	bl	8010c88 <uxr_buffer_create_replier_bin>
 8018f7e:	4602      	mov	r2, r0
 8018f80:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8018f84:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8018f88:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8018f8c:	f7f5 fba2 	bl	800e6d4 <run_xrce_session>
 8018f90:	b310      	cbz	r0, 8018fd8 <rmw_create_service+0x18c>
 8018f92:	7a2b      	ldrb	r3, [r5, #8]
 8018f94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018f98:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8018f9c:	2b02      	cmp	r3, #2
 8018f9e:	920e      	str	r2, [sp, #56]	; 0x38
 8018fa0:	f04f 0200 	mov.w	r2, #0
 8018fa4:	920f      	str	r2, [sp, #60]	; 0x3c
 8018fa6:	bf0c      	ite	eq
 8018fa8:	e9d0 23df 	ldrdeq	r2, r3, [r0, #892]	; 0x37c
 8018fac:	e9d0 32dd 	ldrdne	r3, r2, [r0, #884]	; 0x374
 8018fb0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8018fb4:	930b      	str	r3, [sp, #44]	; 0x2c
 8018fb6:	ab0e      	add	r3, sp, #56	; 0x38
 8018fb8:	673a      	str	r2, [r7, #112]	; 0x70
 8018fba:	f8d0 20e4 	ldr.w	r2, [r0, #228]	; 0xe4
 8018fbe:	9300      	str	r3, [sp, #0]
 8018fc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018fc2:	6811      	ldr	r1, [r2, #0]
 8018fc4:	693a      	ldr	r2, [r7, #16]
 8018fc6:	f001 faff 	bl	801a5c8 <uxr_buffer_request_data>
 8018fca:	8338      	strh	r0, [r7, #24]
 8018fcc:	e000      	b.n	8018fd0 <rmw_create_service+0x184>
 8018fce:	2600      	movs	r6, #0
 8018fd0:	4630      	mov	r0, r6
 8018fd2:	b011      	add	sp, #68	; 0x44
 8018fd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018fd8:	4630      	mov	r0, r6
 8018fda:	2600      	movs	r6, #0
 8018fdc:	f7f5 fa40 	bl	800e460 <rmw_uxrce_fini_service_memory>
 8018fe0:	4630      	mov	r0, r6
 8018fe2:	b011      	add	sp, #68	; 0x44
 8018fe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018fe8:	20010374 	.word	0x20010374
 8018fec:	0801d960 	.word	0x0801d960
 8018ff0:	20010a58 	.word	0x20010a58
 8018ff4:	20010a94 	.word	0x20010a94
 8018ff8:	200109f4 	.word	0x200109f4
 8018ffc:	200109b8 	.word	0x200109b8

08019000 <rmw_destroy_service>:
 8019000:	b570      	push	{r4, r5, r6, lr}
 8019002:	b128      	cbz	r0, 8019010 <rmw_destroy_service+0x10>
 8019004:	4604      	mov	r4, r0
 8019006:	6800      	ldr	r0, [r0, #0]
 8019008:	460d      	mov	r5, r1
 801900a:	f7f5 fc75 	bl	800e8f8 <is_uxrce_rmw_identifier_valid>
 801900e:	b910      	cbnz	r0, 8019016 <rmw_destroy_service+0x16>
 8019010:	2401      	movs	r4, #1
 8019012:	4620      	mov	r0, r4
 8019014:	bd70      	pop	{r4, r5, r6, pc}
 8019016:	6863      	ldr	r3, [r4, #4]
 8019018:	2b00      	cmp	r3, #0
 801901a:	d0f9      	beq.n	8019010 <rmw_destroy_service+0x10>
 801901c:	2d00      	cmp	r5, #0
 801901e:	d0f7      	beq.n	8019010 <rmw_destroy_service+0x10>
 8019020:	6828      	ldr	r0, [r5, #0]
 8019022:	f7f5 fc69 	bl	800e8f8 <is_uxrce_rmw_identifier_valid>
 8019026:	2800      	cmp	r0, #0
 8019028:	d0f2      	beq.n	8019010 <rmw_destroy_service+0x10>
 801902a:	686e      	ldr	r6, [r5, #4]
 801902c:	2e00      	cmp	r6, #0
 801902e:	d0ef      	beq.n	8019010 <rmw_destroy_service+0x10>
 8019030:	6864      	ldr	r4, [r4, #4]
 8019032:	6932      	ldr	r2, [r6, #16]
 8019034:	6920      	ldr	r0, [r4, #16]
 8019036:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801903a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801903e:	6819      	ldr	r1, [r3, #0]
 8019040:	f001 fafc 	bl	801a63c <uxr_buffer_cancel_data>
 8019044:	4602      	mov	r2, r0
 8019046:	6920      	ldr	r0, [r4, #16]
 8019048:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801904c:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8019050:	f7f5 fb40 	bl	800e6d4 <run_xrce_session>
 8019054:	6920      	ldr	r0, [r4, #16]
 8019056:	6932      	ldr	r2, [r6, #16]
 8019058:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801905c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8019060:	6819      	ldr	r1, [r3, #0]
 8019062:	f7f7 fc0f 	bl	8010884 <uxr_buffer_delete_entity>
 8019066:	4602      	mov	r2, r0
 8019068:	6920      	ldr	r0, [r4, #16]
 801906a:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801906e:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8019072:	f7f5 fb2f 	bl	800e6d4 <run_xrce_session>
 8019076:	4603      	mov	r3, r0
 8019078:	4628      	mov	r0, r5
 801907a:	2b00      	cmp	r3, #0
 801907c:	bf14      	ite	ne
 801907e:	2400      	movne	r4, #0
 8019080:	2402      	moveq	r4, #2
 8019082:	f7f5 f9ed 	bl	800e460 <rmw_uxrce_fini_service_memory>
 8019086:	e7c4      	b.n	8019012 <rmw_destroy_service+0x12>

08019088 <rmw_service_response_publisher_get_actual_qos>:
 8019088:	b181      	cbz	r1, 80190ac <rmw_service_response_publisher_get_actual_qos+0x24>
 801908a:	4603      	mov	r3, r0
 801908c:	b510      	push	{r4, lr}
 801908e:	fab0 f480 	clz	r4, r0
 8019092:	0964      	lsrs	r4, r4, #5
 8019094:	b140      	cbz	r0, 80190a8 <rmw_service_response_publisher_get_actual_qos+0x20>
 8019096:	685b      	ldr	r3, [r3, #4]
 8019098:	4608      	mov	r0, r1
 801909a:	2250      	movs	r2, #80	; 0x50
 801909c:	f103 0120 	add.w	r1, r3, #32
 80190a0:	f003 fc81 	bl	801c9a6 <memcpy>
 80190a4:	4620      	mov	r0, r4
 80190a6:	bd10      	pop	{r4, pc}
 80190a8:	200b      	movs	r0, #11
 80190aa:	bd10      	pop	{r4, pc}
 80190ac:	200b      	movs	r0, #11
 80190ae:	4770      	bx	lr

080190b0 <rmw_service_request_subscription_get_actual_qos>:
 80190b0:	b178      	cbz	r0, 80190d2 <rmw_service_request_subscription_get_actual_qos+0x22>
 80190b2:	b510      	push	{r4, lr}
 80190b4:	fab1 f481 	clz	r4, r1
 80190b8:	0964      	lsrs	r4, r4, #5
 80190ba:	b141      	cbz	r1, 80190ce <rmw_service_request_subscription_get_actual_qos+0x1e>
 80190bc:	6843      	ldr	r3, [r0, #4]
 80190be:	2250      	movs	r2, #80	; 0x50
 80190c0:	4608      	mov	r0, r1
 80190c2:	f103 0120 	add.w	r1, r3, #32
 80190c6:	f003 fc6e 	bl	801c9a6 <memcpy>
 80190ca:	4620      	mov	r0, r4
 80190cc:	bd10      	pop	{r4, pc}
 80190ce:	200b      	movs	r0, #11
 80190d0:	bd10      	pop	{r4, pc}
 80190d2:	200b      	movs	r0, #11
 80190d4:	4770      	bx	lr
 80190d6:	bf00      	nop

080190d8 <rmw_create_subscription>:
 80190d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80190dc:	b08d      	sub	sp, #52	; 0x34
 80190de:	2900      	cmp	r1, #0
 80190e0:	f000 80d8 	beq.w	8019294 <rmw_create_subscription+0x1bc>
 80190e4:	4604      	mov	r4, r0
 80190e6:	2800      	cmp	r0, #0
 80190e8:	f000 80d4 	beq.w	8019294 <rmw_create_subscription+0x1bc>
 80190ec:	6800      	ldr	r0, [r0, #0]
 80190ee:	460e      	mov	r6, r1
 80190f0:	4615      	mov	r5, r2
 80190f2:	461f      	mov	r7, r3
 80190f4:	f7f5 fc00 	bl	800e8f8 <is_uxrce_rmw_identifier_valid>
 80190f8:	f080 0001 	eor.w	r0, r0, #1
 80190fc:	b2c0      	uxtb	r0, r0
 80190fe:	2800      	cmp	r0, #0
 8019100:	f040 80c8 	bne.w	8019294 <rmw_create_subscription+0x1bc>
 8019104:	2d00      	cmp	r5, #0
 8019106:	f000 80c5 	beq.w	8019294 <rmw_create_subscription+0x1bc>
 801910a:	782b      	ldrb	r3, [r5, #0]
 801910c:	2b00      	cmp	r3, #0
 801910e:	f000 80c1 	beq.w	8019294 <rmw_create_subscription+0x1bc>
 8019112:	2f00      	cmp	r7, #0
 8019114:	f000 80be 	beq.w	8019294 <rmw_create_subscription+0x1bc>
 8019118:	4867      	ldr	r0, [pc, #412]	; (80192b8 <rmw_create_subscription+0x1e0>)
 801911a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801911e:	f7ff f8f9 	bl	8018314 <get_memory>
 8019122:	4604      	mov	r4, r0
 8019124:	2800      	cmp	r0, #0
 8019126:	f000 80b6 	beq.w	8019296 <rmw_create_subscription+0x1be>
 801912a:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801912e:	f108 0a98 	add.w	sl, r8, #152	; 0x98
 8019132:	f8c8 8080 	str.w	r8, [r8, #128]	; 0x80
 8019136:	f7ff f973 	bl	8018420 <rmw_get_implementation_identifier>
 801913a:	f8c8 007c 	str.w	r0, [r8, #124]	; 0x7c
 801913e:	f8c8 a084 	str.w	sl, [r8, #132]	; 0x84
 8019142:	4628      	mov	r0, r5
 8019144:	f7e7 f8dc 	bl	8000300 <strlen>
 8019148:	3001      	adds	r0, #1
 801914a:	f108 047c 	add.w	r4, r8, #124	; 0x7c
 801914e:	283c      	cmp	r0, #60	; 0x3c
 8019150:	f200 80a5 	bhi.w	801929e <rmw_create_subscription+0x1c6>
 8019154:	462b      	mov	r3, r5
 8019156:	4a59      	ldr	r2, [pc, #356]	; (80192bc <rmw_create_subscription+0x1e4>)
 8019158:	213c      	movs	r1, #60	; 0x3c
 801915a:	4650      	mov	r0, sl
 801915c:	f003 fa18 	bl	801c590 <sniprintf>
 8019160:	4639      	mov	r1, r7
 8019162:	2250      	movs	r2, #80	; 0x50
 8019164:	f108 0028 	add.w	r0, r8, #40	; 0x28
 8019168:	f8c8 9020 	str.w	r9, [r8, #32]
 801916c:	f003 fc1b 	bl	801c9a6 <memcpy>
 8019170:	4630      	mov	r0, r6
 8019172:	4953      	ldr	r1, [pc, #332]	; (80192c0 <rmw_create_subscription+0x1e8>)
 8019174:	f7f5 fbce 	bl	800e914 <get_message_typesupport_handle>
 8019178:	2800      	cmp	r0, #0
 801917a:	f000 8090 	beq.w	801929e <rmw_create_subscription+0x1c6>
 801917e:	6842      	ldr	r2, [r0, #4]
 8019180:	f8c8 2018 	str.w	r2, [r8, #24]
 8019184:	2a00      	cmp	r2, #0
 8019186:	f000 808a 	beq.w	801929e <rmw_create_subscription+0x1c6>
 801918a:	4629      	mov	r1, r5
 801918c:	463b      	mov	r3, r7
 801918e:	4648      	mov	r0, r9
 8019190:	f7ff fb84 	bl	801889c <create_topic>
 8019194:	f8c8 001c 	str.w	r0, [r8, #28]
 8019198:	2800      	cmp	r0, #0
 801919a:	f000 8085 	beq.w	80192a8 <rmw_create_subscription+0x1d0>
 801919e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80191a2:	2104      	movs	r1, #4
 80191a4:	2506      	movs	r5, #6
 80191a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80191aa:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	; 0x59c
 80191ae:	1c42      	adds	r2, r0, #1
 80191b0:	f8a3 259c 	strh.w	r2, [r3, #1436]	; 0x59c
 80191b4:	f7f7 fda2 	bl	8010cfc <uxr_object_id>
 80191b8:	f8c8 0010 	str.w	r0, [r8, #16]
 80191bc:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80191c0:	f8d0 3384 	ldr.w	r3, [r0, #900]	; 0x384
 80191c4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80191c8:	9500      	str	r5, [sp, #0]
 80191ca:	6819      	ldr	r1, [r3, #0]
 80191cc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80191d0:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80191d4:	f7f7 fc3a 	bl	8010a4c <uxr_buffer_create_subscriber_bin>
 80191d8:	4602      	mov	r2, r0
 80191da:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80191de:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 80191e2:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 80191e6:	f7f5 fa75 	bl	800e6d4 <run_xrce_session>
 80191ea:	2800      	cmp	r0, #0
 80191ec:	d057      	beq.n	801929e <rmw_create_subscription+0x1c6>
 80191ee:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80191f2:	4629      	mov	r1, r5
 80191f4:	ae08      	add	r6, sp, #32
 80191f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80191fa:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	; 0x59e
 80191fe:	1c42      	adds	r2, r0, #1
 8019200:	f8a3 259e 	strh.w	r2, [r3, #1438]	; 0x59e
 8019204:	f7f7 fd7a 	bl	8010cfc <uxr_object_id>
 8019208:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801920c:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8019210:	4639      	mov	r1, r7
 8019212:	f8c8 0014 	str.w	r0, [r8, #20]
 8019216:	4630      	mov	r0, r6
 8019218:	f8da b384 	ldr.w	fp, [sl, #900]	; 0x384
 801921c:	9305      	str	r3, [sp, #20]
 801921e:	f7f5 fa75 	bl	800e70c <convert_qos_profile>
 8019222:	9503      	str	r5, [sp, #12]
 8019224:	9b05      	ldr	r3, [sp, #20]
 8019226:	e896 0003 	ldmia.w	r6, {r0, r1}
 801922a:	9001      	str	r0, [sp, #4]
 801922c:	f50a 7028 	add.w	r0, sl, #672	; 0x2a0
 8019230:	f8ad 1008 	strh.w	r1, [sp, #8]
 8019234:	691b      	ldr	r3, [r3, #16]
 8019236:	9300      	str	r3, [sp, #0]
 8019238:	f8db 1000 	ldr.w	r1, [fp]
 801923c:	e9d8 3204 	ldrd	r3, r2, [r8, #16]
 8019240:	f7f7 fcaa 	bl	8010b98 <uxr_buffer_create_datareader_bin>
 8019244:	4602      	mov	r2, r0
 8019246:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801924a:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 801924e:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8019252:	f7f5 fa3f 	bl	800e6d4 <run_xrce_session>
 8019256:	b310      	cbz	r0, 801929e <rmw_create_subscription+0x1c6>
 8019258:	7a3b      	ldrb	r3, [r7, #8]
 801925a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801925e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8019262:	2b02      	cmp	r3, #2
 8019264:	920a      	str	r2, [sp, #40]	; 0x28
 8019266:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 801926a:	f04f 0200 	mov.w	r2, #0
 801926e:	bf08      	it	eq
 8019270:	f8d0 3380 	ldreq.w	r3, [r0, #896]	; 0x380
 8019274:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8019278:	bf18      	it	ne
 801927a:	f8d0 30d4 	ldrne.w	r3, [r0, #212]	; 0xd4
 801927e:	920b      	str	r2, [sp, #44]	; 0x2c
 8019280:	9307      	str	r3, [sp, #28]
 8019282:	ab0a      	add	r3, sp, #40	; 0x28
 8019284:	9300      	str	r3, [sp, #0]
 8019286:	9b07      	ldr	r3, [sp, #28]
 8019288:	f8d8 2014 	ldr.w	r2, [r8, #20]
 801928c:	6809      	ldr	r1, [r1, #0]
 801928e:	f001 f99b 	bl	801a5c8 <uxr_buffer_request_data>
 8019292:	e000      	b.n	8019296 <rmw_create_subscription+0x1be>
 8019294:	2400      	movs	r4, #0
 8019296:	4620      	mov	r0, r4
 8019298:	b00d      	add	sp, #52	; 0x34
 801929a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801929e:	f8d8 001c 	ldr.w	r0, [r8, #28]
 80192a2:	b108      	cbz	r0, 80192a8 <rmw_create_subscription+0x1d0>
 80192a4:	f7f5 f908 	bl	800e4b8 <rmw_uxrce_fini_topic_memory>
 80192a8:	4620      	mov	r0, r4
 80192aa:	2400      	movs	r4, #0
 80192ac:	f7f5 f8c2 	bl	800e434 <rmw_uxrce_fini_subscription_memory>
 80192b0:	4620      	mov	r0, r4
 80192b2:	b00d      	add	sp, #52	; 0x34
 80192b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80192b8:	200103a4 	.word	0x200103a4
 80192bc:	0801e5bc 	.word	0x0801e5bc
 80192c0:	0801d960 	.word	0x0801d960

080192c4 <rmw_subscription_get_actual_qos>:
 80192c4:	b178      	cbz	r0, 80192e6 <rmw_subscription_get_actual_qos+0x22>
 80192c6:	b510      	push	{r4, lr}
 80192c8:	fab1 f481 	clz	r4, r1
 80192cc:	0964      	lsrs	r4, r4, #5
 80192ce:	b141      	cbz	r1, 80192e2 <rmw_subscription_get_actual_qos+0x1e>
 80192d0:	6843      	ldr	r3, [r0, #4]
 80192d2:	2250      	movs	r2, #80	; 0x50
 80192d4:	4608      	mov	r0, r1
 80192d6:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80192da:	f003 fb64 	bl	801c9a6 <memcpy>
 80192de:	4620      	mov	r0, r4
 80192e0:	bd10      	pop	{r4, pc}
 80192e2:	200b      	movs	r0, #11
 80192e4:	bd10      	pop	{r4, pc}
 80192e6:	200b      	movs	r0, #11
 80192e8:	4770      	bx	lr
 80192ea:	bf00      	nop

080192ec <rmw_destroy_subscription>:
 80192ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80192f0:	b128      	cbz	r0, 80192fe <rmw_destroy_subscription+0x12>
 80192f2:	4604      	mov	r4, r0
 80192f4:	6800      	ldr	r0, [r0, #0]
 80192f6:	460d      	mov	r5, r1
 80192f8:	f7f5 fafe 	bl	800e8f8 <is_uxrce_rmw_identifier_valid>
 80192fc:	b918      	cbnz	r0, 8019306 <rmw_destroy_subscription+0x1a>
 80192fe:	2401      	movs	r4, #1
 8019300:	4620      	mov	r0, r4
 8019302:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019306:	6863      	ldr	r3, [r4, #4]
 8019308:	2b00      	cmp	r3, #0
 801930a:	d0f8      	beq.n	80192fe <rmw_destroy_subscription+0x12>
 801930c:	fab5 f485 	clz	r4, r5
 8019310:	0964      	lsrs	r4, r4, #5
 8019312:	2d00      	cmp	r5, #0
 8019314:	d0f3      	beq.n	80192fe <rmw_destroy_subscription+0x12>
 8019316:	6828      	ldr	r0, [r5, #0]
 8019318:	f7f5 faee 	bl	800e8f8 <is_uxrce_rmw_identifier_valid>
 801931c:	2800      	cmp	r0, #0
 801931e:	d0ee      	beq.n	80192fe <rmw_destroy_subscription+0x12>
 8019320:	686e      	ldr	r6, [r5, #4]
 8019322:	2e00      	cmp	r6, #0
 8019324:	d0eb      	beq.n	80192fe <rmw_destroy_subscription+0x12>
 8019326:	6a37      	ldr	r7, [r6, #32]
 8019328:	6972      	ldr	r2, [r6, #20]
 801932a:	6938      	ldr	r0, [r7, #16]
 801932c:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8019330:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8019334:	6819      	ldr	r1, [r3, #0]
 8019336:	f001 f981 	bl	801a63c <uxr_buffer_cancel_data>
 801933a:	4602      	mov	r2, r0
 801933c:	6938      	ldr	r0, [r7, #16]
 801933e:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8019342:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8019346:	f7f5 f9c5 	bl	800e6d4 <run_xrce_session>
 801934a:	69f0      	ldr	r0, [r6, #28]
 801934c:	f7ff faf6 	bl	801893c <destroy_topic>
 8019350:	6a33      	ldr	r3, [r6, #32]
 8019352:	6972      	ldr	r2, [r6, #20]
 8019354:	6918      	ldr	r0, [r3, #16]
 8019356:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801935a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801935e:	6819      	ldr	r1, [r3, #0]
 8019360:	f7f7 fa90 	bl	8010884 <uxr_buffer_delete_entity>
 8019364:	6a33      	ldr	r3, [r6, #32]
 8019366:	4680      	mov	r8, r0
 8019368:	6932      	ldr	r2, [r6, #16]
 801936a:	6918      	ldr	r0, [r3, #16]
 801936c:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8019370:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8019374:	6819      	ldr	r1, [r3, #0]
 8019376:	f7f7 fa85 	bl	8010884 <uxr_buffer_delete_entity>
 801937a:	4606      	mov	r6, r0
 801937c:	6938      	ldr	r0, [r7, #16]
 801937e:	4642      	mov	r2, r8
 8019380:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8019384:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8019388:	f7f5 f9a4 	bl	800e6d4 <run_xrce_session>
 801938c:	693f      	ldr	r7, [r7, #16]
 801938e:	4632      	mov	r2, r6
 8019390:	4606      	mov	r6, r0
 8019392:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 8019396:	4638      	mov	r0, r7
 8019398:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 801939c:	f7f5 f99a 	bl	800e6d4 <run_xrce_session>
 80193a0:	b126      	cbz	r6, 80193ac <rmw_destroy_subscription+0xc0>
 80193a2:	b118      	cbz	r0, 80193ac <rmw_destroy_subscription+0xc0>
 80193a4:	4628      	mov	r0, r5
 80193a6:	f7f5 f845 	bl	800e434 <rmw_uxrce_fini_subscription_memory>
 80193aa:	e7a9      	b.n	8019300 <rmw_destroy_subscription+0x14>
 80193ac:	2402      	movs	r4, #2
 80193ae:	e7f9      	b.n	80193a4 <rmw_destroy_subscription+0xb8>

080193b0 <rmw_take_with_info>:
 80193b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80193b2:	4604      	mov	r4, r0
 80193b4:	6800      	ldr	r0, [r0, #0]
 80193b6:	b089      	sub	sp, #36	; 0x24
 80193b8:	460f      	mov	r7, r1
 80193ba:	4615      	mov	r5, r2
 80193bc:	b128      	cbz	r0, 80193ca <rmw_take_with_info+0x1a>
 80193be:	4b24      	ldr	r3, [pc, #144]	; (8019450 <rmw_take_with_info+0xa0>)
 80193c0:	6819      	ldr	r1, [r3, #0]
 80193c2:	f7e6 ff3d 	bl	8000240 <strcmp>
 80193c6:	2800      	cmp	r0, #0
 80193c8:	d13e      	bne.n	8019448 <rmw_take_with_info+0x98>
 80193ca:	b305      	cbz	r5, 801940e <rmw_take_with_info+0x5e>
 80193cc:	2300      	movs	r3, #0
 80193ce:	6864      	ldr	r4, [r4, #4]
 80193d0:	702b      	strb	r3, [r5, #0]
 80193d2:	f7f5 f901 	bl	800e5d8 <rmw_uxrce_clean_expired_static_input_buffer>
 80193d6:	4620      	mov	r0, r4
 80193d8:	f7f5 f8d4 	bl	800e584 <rmw_uxrce_find_static_input_buffer_by_owner>
 80193dc:	4606      	mov	r6, r0
 80193de:	b1f0      	cbz	r0, 801941e <rmw_take_with_info+0x6e>
 80193e0:	6881      	ldr	r1, [r0, #8]
 80193e2:	4668      	mov	r0, sp
 80193e4:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 80193e8:	3110      	adds	r1, #16
 80193ea:	f7f7 f9d7 	bl	801079c <ucdr_init_buffer>
 80193ee:	69a3      	ldr	r3, [r4, #24]
 80193f0:	4639      	mov	r1, r7
 80193f2:	4668      	mov	r0, sp
 80193f4:	68db      	ldr	r3, [r3, #12]
 80193f6:	4798      	blx	r3
 80193f8:	4604      	mov	r4, r0
 80193fa:	4631      	mov	r1, r6
 80193fc:	4815      	ldr	r0, [pc, #84]	; (8019454 <rmw_take_with_info+0xa4>)
 80193fe:	f7fe ff99 	bl	8018334 <put_memory>
 8019402:	702c      	strb	r4, [r5, #0]
 8019404:	f084 0001 	eor.w	r0, r4, #1
 8019408:	b2c0      	uxtb	r0, r0
 801940a:	b009      	add	sp, #36	; 0x24
 801940c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801940e:	6864      	ldr	r4, [r4, #4]
 8019410:	f7f5 f8e2 	bl	800e5d8 <rmw_uxrce_clean_expired_static_input_buffer>
 8019414:	4620      	mov	r0, r4
 8019416:	f7f5 f8b5 	bl	800e584 <rmw_uxrce_find_static_input_buffer_by_owner>
 801941a:	4605      	mov	r5, r0
 801941c:	b910      	cbnz	r0, 8019424 <rmw_take_with_info+0x74>
 801941e:	2001      	movs	r0, #1
 8019420:	b009      	add	sp, #36	; 0x24
 8019422:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019424:	68a9      	ldr	r1, [r5, #8]
 8019426:	4668      	mov	r0, sp
 8019428:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 801942c:	3110      	adds	r1, #16
 801942e:	f7f7 f9b5 	bl	801079c <ucdr_init_buffer>
 8019432:	69a3      	ldr	r3, [r4, #24]
 8019434:	4639      	mov	r1, r7
 8019436:	4668      	mov	r0, sp
 8019438:	68db      	ldr	r3, [r3, #12]
 801943a:	4798      	blx	r3
 801943c:	4629      	mov	r1, r5
 801943e:	4604      	mov	r4, r0
 8019440:	4804      	ldr	r0, [pc, #16]	; (8019454 <rmw_take_with_info+0xa4>)
 8019442:	f7fe ff77 	bl	8018334 <put_memory>
 8019446:	e7dd      	b.n	8019404 <rmw_take_with_info+0x54>
 8019448:	200c      	movs	r0, #12
 801944a:	b009      	add	sp, #36	; 0x24
 801944c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801944e:	bf00      	nop
 8019450:	0801f060 	.word	0x0801f060
 8019454:	20010394 	.word	0x20010394

08019458 <rmw_uxrce_transport_init>:
 8019458:	b508      	push	{r3, lr}
 801945a:	b108      	cbz	r0, 8019460 <rmw_uxrce_transport_init+0x8>
 801945c:	f100 0210 	add.w	r2, r0, #16
 8019460:	b139      	cbz	r1, 8019472 <rmw_uxrce_transport_init+0x1a>
 8019462:	6949      	ldr	r1, [r1, #20]
 8019464:	4610      	mov	r0, r2
 8019466:	f000 fb2b 	bl	8019ac0 <uxr_init_custom_transport>
 801946a:	f080 0001 	eor.w	r0, r0, #1
 801946e:	b2c0      	uxtb	r0, r0
 8019470:	bd08      	pop	{r3, pc}
 8019472:	4b04      	ldr	r3, [pc, #16]	; (8019484 <rmw_uxrce_transport_init+0x2c>)
 8019474:	4610      	mov	r0, r2
 8019476:	6859      	ldr	r1, [r3, #4]
 8019478:	f000 fb22 	bl	8019ac0 <uxr_init_custom_transport>
 801947c:	f080 0001 	eor.w	r0, r0, #1
 8019480:	b2c0      	uxtb	r0, r0
 8019482:	bd08      	pop	{r3, pc}
 8019484:	2000b9a4 	.word	0x2000b9a4

08019488 <rmw_wait>:
 8019488:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801948c:	4698      	mov	r8, r3
 801948e:	ea40 0301 	orr.w	r3, r0, r1
 8019492:	b089      	sub	sp, #36	; 0x24
 8019494:	ea48 0303 	orr.w	r3, r8, r3
 8019498:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801949a:	4313      	orrs	r3, r2
 801949c:	f000 8106 	beq.w	80196ac <rmw_wait+0x224>
 80194a0:	4605      	mov	r5, r0
 80194a2:	460e      	mov	r6, r1
 80194a4:	4691      	mov	r9, r2
 80194a6:	b16c      	cbz	r4, 80194c4 <rmw_wait+0x3c>
 80194a8:	4ba6      	ldr	r3, [pc, #664]	; (8019744 <rmw_wait+0x2bc>)
 80194aa:	af04      	add	r7, sp, #16
 80194ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80194ae:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 80194b2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80194b6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80194ba:	f7fe fd4d 	bl	8017f58 <rmw_time_equal>
 80194be:	2800      	cmp	r0, #0
 80194c0:	f000 810b 	beq.w	80196da <rmw_wait+0x252>
 80194c4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80194c8:	f7f5 f886 	bl	800e5d8 <rmw_uxrce_clean_expired_static_input_buffer>
 80194cc:	4b9e      	ldr	r3, [pc, #632]	; (8019748 <rmw_wait+0x2c0>)
 80194ce:	681c      	ldr	r4, [r3, #0]
 80194d0:	b14c      	cbz	r4, 80194e6 <rmw_wait+0x5e>
 80194d2:	4623      	mov	r3, r4
 80194d4:	2100      	movs	r1, #0
 80194d6:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 80194da:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80194de:	f882 15a4 	strb.w	r1, [r2, #1444]	; 0x5a4
 80194e2:	2b00      	cmp	r3, #0
 80194e4:	d1f7      	bne.n	80194d6 <rmw_wait+0x4e>
 80194e6:	f1b9 0f00 	cmp.w	r9, #0
 80194ea:	d011      	beq.n	8019510 <rmw_wait+0x88>
 80194ec:	f8d9 1000 	ldr.w	r1, [r9]
 80194f0:	b171      	cbz	r1, 8019510 <rmw_wait+0x88>
 80194f2:	f8d9 c004 	ldr.w	ip, [r9, #4]
 80194f6:	2300      	movs	r3, #0
 80194f8:	2001      	movs	r0, #1
 80194fa:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80194fe:	3301      	adds	r3, #1
 8019500:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8019502:	4299      	cmp	r1, r3
 8019504:	6912      	ldr	r2, [r2, #16]
 8019506:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801950a:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 801950e:	d1f4      	bne.n	80194fa <rmw_wait+0x72>
 8019510:	f1b8 0f00 	cmp.w	r8, #0
 8019514:	d011      	beq.n	801953a <rmw_wait+0xb2>
 8019516:	f8d8 1000 	ldr.w	r1, [r8]
 801951a:	b171      	cbz	r1, 801953a <rmw_wait+0xb2>
 801951c:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8019520:	2300      	movs	r3, #0
 8019522:	2001      	movs	r0, #1
 8019524:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8019528:	3301      	adds	r3, #1
 801952a:	6f92      	ldr	r2, [r2, #120]	; 0x78
 801952c:	4299      	cmp	r1, r3
 801952e:	6912      	ldr	r2, [r2, #16]
 8019530:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8019534:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 8019538:	d1f4      	bne.n	8019524 <rmw_wait+0x9c>
 801953a:	b185      	cbz	r5, 801955e <rmw_wait+0xd6>
 801953c:	6829      	ldr	r1, [r5, #0]
 801953e:	b171      	cbz	r1, 801955e <rmw_wait+0xd6>
 8019540:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8019544:	2300      	movs	r3, #0
 8019546:	2001      	movs	r0, #1
 8019548:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801954c:	3301      	adds	r3, #1
 801954e:	6a12      	ldr	r2, [r2, #32]
 8019550:	4299      	cmp	r1, r3
 8019552:	6912      	ldr	r2, [r2, #16]
 8019554:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8019558:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 801955c:	d1f4      	bne.n	8019548 <rmw_wait+0xc0>
 801955e:	b344      	cbz	r4, 80195b2 <rmw_wait+0x12a>
 8019560:	4622      	mov	r2, r4
 8019562:	2300      	movs	r3, #0
 8019564:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8019568:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 801956c:	f891 15a4 	ldrb.w	r1, [r1, #1444]	; 0x5a4
 8019570:	440b      	add	r3, r1
 8019572:	b2db      	uxtb	r3, r3
 8019574:	2a00      	cmp	r2, #0
 8019576:	d1f5      	bne.n	8019564 <rmw_wait+0xdc>
 8019578:	2b00      	cmp	r3, #0
 801957a:	d05f      	beq.n	801963c <rmw_wait+0x1b4>
 801957c:	1c7a      	adds	r2, r7, #1
 801957e:	d00d      	beq.n	801959c <rmw_wait+0x114>
 8019580:	ee07 7a90 	vmov	s15, r7
 8019584:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8019588:	ee07 3a90 	vmov	s15, r3
 801958c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8019590:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8019594:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8019598:	ee17 7a90 	vmov	r7, s15
 801959c:	68a0      	ldr	r0, [r4, #8]
 801959e:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 80195a2:	f893 35a4 	ldrb.w	r3, [r3, #1444]	; 0x5a4
 80195a6:	2b00      	cmp	r3, #0
 80195a8:	f040 808d 	bne.w	80196c6 <rmw_wait+0x23e>
 80195ac:	6864      	ldr	r4, [r4, #4]
 80195ae:	2c00      	cmp	r4, #0
 80195b0:	d1f4      	bne.n	801959c <rmw_wait+0x114>
 80195b2:	f1b9 0f00 	cmp.w	r9, #0
 80195b6:	f000 80a1 	beq.w	80196fc <rmw_wait+0x274>
 80195ba:	f8d9 7000 	ldr.w	r7, [r9]
 80195be:	2f00      	cmp	r7, #0
 80195c0:	f000 80a4 	beq.w	801970c <rmw_wait+0x284>
 80195c4:	2400      	movs	r4, #0
 80195c6:	4627      	mov	r7, r4
 80195c8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80195cc:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80195d0:	f7f4 ffd8 	bl	800e584 <rmw_uxrce_find_static_input_buffer_by_owner>
 80195d4:	2800      	cmp	r0, #0
 80195d6:	d03b      	beq.n	8019650 <rmw_wait+0x1c8>
 80195d8:	3401      	adds	r4, #1
 80195da:	f8d9 3000 	ldr.w	r3, [r9]
 80195de:	2701      	movs	r7, #1
 80195e0:	42a3      	cmp	r3, r4
 80195e2:	d8f1      	bhi.n	80195c8 <rmw_wait+0x140>
 80195e4:	2701      	movs	r7, #1
 80195e6:	f1b8 0f00 	cmp.w	r8, #0
 80195ea:	d010      	beq.n	801960e <rmw_wait+0x186>
 80195ec:	f8d8 3000 	ldr.w	r3, [r8]
 80195f0:	b16b      	cbz	r3, 801960e <rmw_wait+0x186>
 80195f2:	2400      	movs	r4, #0
 80195f4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80195f8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80195fc:	f7f4 ffc2 	bl	800e584 <rmw_uxrce_find_static_input_buffer_by_owner>
 8019600:	b370      	cbz	r0, 8019660 <rmw_wait+0x1d8>
 8019602:	3401      	adds	r4, #1
 8019604:	f8d8 3000 	ldr.w	r3, [r8]
 8019608:	2701      	movs	r7, #1
 801960a:	42a3      	cmp	r3, r4
 801960c:	d8f2      	bhi.n	80195f4 <rmw_wait+0x16c>
 801960e:	2d00      	cmp	r5, #0
 8019610:	d035      	beq.n	801967e <rmw_wait+0x1f6>
 8019612:	682b      	ldr	r3, [r5, #0]
 8019614:	b39b      	cbz	r3, 801967e <rmw_wait+0x1f6>
 8019616:	2400      	movs	r4, #0
 8019618:	686b      	ldr	r3, [r5, #4]
 801961a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801961e:	f7f4 ffb1 	bl	800e584 <rmw_uxrce_find_static_input_buffer_by_owner>
 8019622:	b328      	cbz	r0, 8019670 <rmw_wait+0x1e8>
 8019624:	3401      	adds	r4, #1
 8019626:	682b      	ldr	r3, [r5, #0]
 8019628:	2701      	movs	r7, #1
 801962a:	42a3      	cmp	r3, r4
 801962c:	d8f4      	bhi.n	8019618 <rmw_wait+0x190>
 801962e:	2e00      	cmp	r6, #0
 8019630:	d03c      	beq.n	80196ac <rmw_wait+0x224>
 8019632:	6834      	ldr	r4, [r6, #0]
 8019634:	2c00      	cmp	r4, #0
 8019636:	d039      	beq.n	80196ac <rmw_wait+0x224>
 8019638:	2701      	movs	r7, #1
 801963a:	e023      	b.n	8019684 <rmw_wait+0x1fc>
 801963c:	68a0      	ldr	r0, [r4, #8]
 801963e:	2100      	movs	r1, #0
 8019640:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8019644:	f7f8 f82a 	bl	801169c <uxr_run_session_timeout>
 8019648:	6864      	ldr	r4, [r4, #4]
 801964a:	2c00      	cmp	r4, #0
 801964c:	d1f6      	bne.n	801963c <rmw_wait+0x1b4>
 801964e:	e7b0      	b.n	80195b2 <rmw_wait+0x12a>
 8019650:	e9d9 3200 	ldrd	r3, r2, [r9]
 8019654:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8019658:	3401      	adds	r4, #1
 801965a:	42a3      	cmp	r3, r4
 801965c:	d8b4      	bhi.n	80195c8 <rmw_wait+0x140>
 801965e:	e7c2      	b.n	80195e6 <rmw_wait+0x15e>
 8019660:	e9d8 3200 	ldrd	r3, r2, [r8]
 8019664:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8019668:	3401      	adds	r4, #1
 801966a:	429c      	cmp	r4, r3
 801966c:	d3c2      	bcc.n	80195f4 <rmw_wait+0x16c>
 801966e:	e7ce      	b.n	801960e <rmw_wait+0x186>
 8019670:	e9d5 3200 	ldrd	r3, r2, [r5]
 8019674:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8019678:	3401      	adds	r4, #1
 801967a:	42a3      	cmp	r3, r4
 801967c:	d8cc      	bhi.n	8019618 <rmw_wait+0x190>
 801967e:	b1a6      	cbz	r6, 80196aa <rmw_wait+0x222>
 8019680:	6834      	ldr	r4, [r6, #0]
 8019682:	b194      	cbz	r4, 80196aa <rmw_wait+0x222>
 8019684:	2300      	movs	r3, #0
 8019686:	461d      	mov	r5, r3
 8019688:	e004      	b.n	8019694 <rmw_wait+0x20c>
 801968a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 801968e:	3301      	adds	r3, #1
 8019690:	42a3      	cmp	r3, r4
 8019692:	d00a      	beq.n	80196aa <rmw_wait+0x222>
 8019694:	6870      	ldr	r0, [r6, #4]
 8019696:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 801969a:	7c0a      	ldrb	r2, [r1, #16]
 801969c:	2a00      	cmp	r2, #0
 801969e:	d0f4      	beq.n	801968a <rmw_wait+0x202>
 80196a0:	3301      	adds	r3, #1
 80196a2:	4617      	mov	r7, r2
 80196a4:	740d      	strb	r5, [r1, #16]
 80196a6:	42a3      	cmp	r3, r4
 80196a8:	d1f4      	bne.n	8019694 <rmw_wait+0x20c>
 80196aa:	b147      	cbz	r7, 80196be <rmw_wait+0x236>
 80196ac:	2000      	movs	r0, #0
 80196ae:	b009      	add	sp, #36	; 0x24
 80196b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80196b4:	b11e      	cbz	r6, 80196be <rmw_wait+0x236>
 80196b6:	6834      	ldr	r4, [r6, #0]
 80196b8:	462f      	mov	r7, r5
 80196ba:	2c00      	cmp	r4, #0
 80196bc:	d1e2      	bne.n	8019684 <rmw_wait+0x1fc>
 80196be:	2002      	movs	r0, #2
 80196c0:	b009      	add	sp, #36	; 0x24
 80196c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80196c6:	4639      	mov	r1, r7
 80196c8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80196cc:	f7f8 f800 	bl	80116d0 <uxr_run_session_until_data>
 80196d0:	6864      	ldr	r4, [r4, #4]
 80196d2:	2c00      	cmp	r4, #0
 80196d4:	f47f af62 	bne.w	801959c <rmw_wait+0x114>
 80196d8:	e76b      	b.n	80195b2 <rmw_wait+0x12a>
 80196da:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80196de:	f7fe fc91 	bl	8018004 <rmw_time_total_nsec>
 80196e2:	2300      	movs	r3, #0
 80196e4:	4a19      	ldr	r2, [pc, #100]	; (801974c <rmw_wait+0x2c4>)
 80196e6:	f7e6 fe63 	bl	80003b0 <__aeabi_uldivmod>
 80196ea:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 80196ee:	4607      	mov	r7, r0
 80196f0:	f171 0300 	sbcs.w	r3, r1, #0
 80196f4:	bfa8      	it	ge
 80196f6:	f06f 4700 	mvnge.w	r7, #2147483648	; 0x80000000
 80196fa:	e6e5      	b.n	80194c8 <rmw_wait+0x40>
 80196fc:	f1b8 0f00 	cmp.w	r8, #0
 8019700:	d00f      	beq.n	8019722 <rmw_wait+0x29a>
 8019702:	f8d8 3000 	ldr.w	r3, [r8]
 8019706:	b193      	cbz	r3, 801972e <rmw_wait+0x2a6>
 8019708:	464f      	mov	r7, r9
 801970a:	e772      	b.n	80195f2 <rmw_wait+0x16a>
 801970c:	f1b8 0f00 	cmp.w	r8, #0
 8019710:	d007      	beq.n	8019722 <rmw_wait+0x29a>
 8019712:	f8d8 3000 	ldr.w	r3, [r8]
 8019716:	2b00      	cmp	r3, #0
 8019718:	f47f af6b 	bne.w	80195f2 <rmw_wait+0x16a>
 801971c:	b155      	cbz	r5, 8019734 <rmw_wait+0x2ac>
 801971e:	461f      	mov	r7, r3
 8019720:	e777      	b.n	8019612 <rmw_wait+0x18a>
 8019722:	2d00      	cmp	r5, #0
 8019724:	d0c6      	beq.n	80196b4 <rmw_wait+0x22c>
 8019726:	682b      	ldr	r3, [r5, #0]
 8019728:	b143      	cbz	r3, 801973c <rmw_wait+0x2b4>
 801972a:	4647      	mov	r7, r8
 801972c:	e773      	b.n	8019616 <rmw_wait+0x18e>
 801972e:	b10d      	cbz	r5, 8019734 <rmw_wait+0x2ac>
 8019730:	464f      	mov	r7, r9
 8019732:	e76e      	b.n	8019612 <rmw_wait+0x18a>
 8019734:	462f      	mov	r7, r5
 8019736:	2e00      	cmp	r6, #0
 8019738:	d1a2      	bne.n	8019680 <rmw_wait+0x1f8>
 801973a:	e7c0      	b.n	80196be <rmw_wait+0x236>
 801973c:	4647      	mov	r7, r8
 801973e:	2e00      	cmp	r6, #0
 8019740:	d19e      	bne.n	8019680 <rmw_wait+0x1f8>
 8019742:	e7bc      	b.n	80196be <rmw_wait+0x236>
 8019744:	0801d7f0 	.word	0x0801d7f0
 8019748:	20010384 	.word	0x20010384
 801974c:	000f4240 	.word	0x000f4240

08019750 <rmw_create_wait_set>:
 8019750:	b508      	push	{r3, lr}
 8019752:	4803      	ldr	r0, [pc, #12]	; (8019760 <rmw_create_wait_set+0x10>)
 8019754:	f7fe fdde 	bl	8018314 <get_memory>
 8019758:	b108      	cbz	r0, 801975e <rmw_create_wait_set+0xe>
 801975a:	6880      	ldr	r0, [r0, #8]
 801975c:	3010      	adds	r0, #16
 801975e:	bd08      	pop	{r3, pc}
 8019760:	200103c4 	.word	0x200103c4

08019764 <rmw_destroy_wait_set>:
 8019764:	b508      	push	{r3, lr}
 8019766:	4b08      	ldr	r3, [pc, #32]	; (8019788 <rmw_destroy_wait_set+0x24>)
 8019768:	6819      	ldr	r1, [r3, #0]
 801976a:	b911      	cbnz	r1, 8019772 <rmw_destroy_wait_set+0xe>
 801976c:	e00a      	b.n	8019784 <rmw_destroy_wait_set+0x20>
 801976e:	6849      	ldr	r1, [r1, #4]
 8019770:	b141      	cbz	r1, 8019784 <rmw_destroy_wait_set+0x20>
 8019772:	688b      	ldr	r3, [r1, #8]
 8019774:	3310      	adds	r3, #16
 8019776:	4298      	cmp	r0, r3
 8019778:	d1f9      	bne.n	801976e <rmw_destroy_wait_set+0xa>
 801977a:	4803      	ldr	r0, [pc, #12]	; (8019788 <rmw_destroy_wait_set+0x24>)
 801977c:	f7fe fdda 	bl	8018334 <put_memory>
 8019780:	2000      	movs	r0, #0
 8019782:	bd08      	pop	{r3, pc}
 8019784:	2001      	movs	r0, #1
 8019786:	bd08      	pop	{r3, pc}
 8019788:	200103c4 	.word	0x200103c4

0801978c <rmw_uros_epoch_nanos>:
 801978c:	4b05      	ldr	r3, [pc, #20]	; (80197a4 <rmw_uros_epoch_nanos+0x18>)
 801978e:	681b      	ldr	r3, [r3, #0]
 8019790:	b123      	cbz	r3, 801979c <rmw_uros_epoch_nanos+0x10>
 8019792:	6898      	ldr	r0, [r3, #8]
 8019794:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8019798:	f7f7 bbf6 	b.w	8010f88 <uxr_epoch_nanos>
 801979c:	2000      	movs	r0, #0
 801979e:	2100      	movs	r1, #0
 80197a0:	4770      	bx	lr
 80197a2:	bf00      	nop
 80197a4:	20010384 	.word	0x20010384

080197a8 <service_msgs__msg__ServiceEventInfo__get_type_hash>:
 80197a8:	4800      	ldr	r0, [pc, #0]	; (80197ac <service_msgs__msg__ServiceEventInfo__get_type_hash+0x4>)
 80197aa:	4770      	bx	lr
 80197ac:	20001b40 	.word	0x20001b40

080197b0 <service_msgs__msg__ServiceEventInfo__get_type_description>:
 80197b0:	b510      	push	{r4, lr}
 80197b2:	4c08      	ldr	r4, [pc, #32]	; (80197d4 <service_msgs__msg__ServiceEventInfo__get_type_description+0x24>)
 80197b4:	7820      	ldrb	r0, [r4, #0]
 80197b6:	b108      	cbz	r0, 80197bc <service_msgs__msg__ServiceEventInfo__get_type_description+0xc>
 80197b8:	4807      	ldr	r0, [pc, #28]	; (80197d8 <service_msgs__msg__ServiceEventInfo__get_type_description+0x28>)
 80197ba:	bd10      	pop	{r4, pc}
 80197bc:	f000 f858 	bl	8019870 <builtin_interfaces__msg__Time__get_type_description>
 80197c0:	300c      	adds	r0, #12
 80197c2:	4b06      	ldr	r3, [pc, #24]	; (80197dc <service_msgs__msg__ServiceEventInfo__get_type_description+0x2c>)
 80197c4:	c807      	ldmia	r0, {r0, r1, r2}
 80197c6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80197ca:	2301      	movs	r3, #1
 80197cc:	4802      	ldr	r0, [pc, #8]	; (80197d8 <service_msgs__msg__ServiceEventInfo__get_type_description+0x28>)
 80197ce:	7023      	strb	r3, [r4, #0]
 80197d0:	bd10      	pop	{r4, pc}
 80197d2:	bf00      	nop
 80197d4:	20010af9 	.word	0x20010af9
 80197d8:	0801f064 	.word	0x0801f064
 80197dc:	20001cc4 	.word	0x20001cc4

080197e0 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source>:
 80197e0:	4800      	ldr	r0, [pc, #0]	; (80197e4 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source+0x4>)
 80197e2:	4770      	bx	lr
 80197e4:	0801f088 	.word	0x0801f088

080197e8 <service_msgs__msg__ServiceEventInfo__get_type_description_sources>:
 80197e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80197ea:	4e0f      	ldr	r6, [pc, #60]	; (8019828 <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0x40>)
 80197ec:	7837      	ldrb	r7, [r6, #0]
 80197ee:	b10f      	cbz	r7, 80197f4 <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0xc>
 80197f0:	480e      	ldr	r0, [pc, #56]	; (801982c <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0x44>)
 80197f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80197f4:	4d0e      	ldr	r5, [pc, #56]	; (8019830 <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0x48>)
 80197f6:	4c0f      	ldr	r4, [pc, #60]	; (8019834 <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0x4c>)
 80197f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80197fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80197fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80197fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019800:	682b      	ldr	r3, [r5, #0]
 8019802:	4638      	mov	r0, r7
 8019804:	f844 3b04 	str.w	r3, [r4], #4
 8019808:	f000 f83e 	bl	8019888 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 801980c:	2301      	movs	r3, #1
 801980e:	4684      	mov	ip, r0
 8019810:	7033      	strb	r3, [r6, #0]
 8019812:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8019816:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019818:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801981c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801981e:	f8dc 3000 	ldr.w	r3, [ip]
 8019822:	4802      	ldr	r0, [pc, #8]	; (801982c <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0x44>)
 8019824:	6023      	str	r3, [r4, #0]
 8019826:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019828:	20010af8 	.word	0x20010af8
 801982c:	0801f0ac 	.word	0x0801f0ac
 8019830:	0801f088 	.word	0x0801f088
 8019834:	20010afc 	.word	0x20010afc

08019838 <service_msgs__msg__ServiceEventInfo__init>:
 8019838:	b538      	push	{r3, r4, r5, lr}
 801983a:	b138      	cbz	r0, 801984c <service_msgs__msg__ServiceEventInfo__init+0x14>
 801983c:	1d05      	adds	r5, r0, #4
 801983e:	4628      	mov	r0, r5
 8019840:	f000 f842 	bl	80198c8 <builtin_interfaces__msg__Time__init>
 8019844:	4604      	mov	r4, r0
 8019846:	b120      	cbz	r0, 8019852 <service_msgs__msg__ServiceEventInfo__init+0x1a>
 8019848:	4620      	mov	r0, r4
 801984a:	bd38      	pop	{r3, r4, r5, pc}
 801984c:	4604      	mov	r4, r0
 801984e:	4620      	mov	r0, r4
 8019850:	bd38      	pop	{r3, r4, r5, pc}
 8019852:	4628      	mov	r0, r5
 8019854:	f000 f83c 	bl	80198d0 <builtin_interfaces__msg__Time__fini>
 8019858:	4620      	mov	r0, r4
 801985a:	bd38      	pop	{r3, r4, r5, pc}

0801985c <service_msgs__msg__ServiceEventInfo__fini>:
 801985c:	b110      	cbz	r0, 8019864 <service_msgs__msg__ServiceEventInfo__fini+0x8>
 801985e:	3004      	adds	r0, #4
 8019860:	f000 b836 	b.w	80198d0 <builtin_interfaces__msg__Time__fini>
 8019864:	4770      	bx	lr
 8019866:	bf00      	nop

08019868 <builtin_interfaces__msg__Time__get_type_hash>:
 8019868:	4800      	ldr	r0, [pc, #0]	; (801986c <builtin_interfaces__msg__Time__get_type_hash+0x4>)
 801986a:	4770      	bx	lr
 801986c:	20002060 	.word	0x20002060

08019870 <builtin_interfaces__msg__Time__get_type_description>:
 8019870:	4b03      	ldr	r3, [pc, #12]	; (8019880 <builtin_interfaces__msg__Time__get_type_description+0x10>)
 8019872:	781a      	ldrb	r2, [r3, #0]
 8019874:	b90a      	cbnz	r2, 801987a <builtin_interfaces__msg__Time__get_type_description+0xa>
 8019876:	2201      	movs	r2, #1
 8019878:	701a      	strb	r2, [r3, #0]
 801987a:	4802      	ldr	r0, [pc, #8]	; (8019884 <builtin_interfaces__msg__Time__get_type_description+0x14>)
 801987c:	4770      	bx	lr
 801987e:	bf00      	nop
 8019880:	20010b45 	.word	0x20010b45
 8019884:	0801f0b8 	.word	0x0801f0b8

08019888 <builtin_interfaces__msg__Time__get_individual_type_description_source>:
 8019888:	4800      	ldr	r0, [pc, #0]	; (801988c <builtin_interfaces__msg__Time__get_individual_type_description_source+0x4>)
 801988a:	4770      	bx	lr
 801988c:	0801f0dc 	.word	0x0801f0dc

08019890 <builtin_interfaces__msg__Time__get_type_description_sources>:
 8019890:	4b09      	ldr	r3, [pc, #36]	; (80198b8 <builtin_interfaces__msg__Time__get_type_description_sources+0x28>)
 8019892:	781a      	ldrb	r2, [r3, #0]
 8019894:	b96a      	cbnz	r2, 80198b2 <builtin_interfaces__msg__Time__get_type_description_sources+0x22>
 8019896:	2201      	movs	r2, #1
 8019898:	b430      	push	{r4, r5}
 801989a:	4d08      	ldr	r5, [pc, #32]	; (80198bc <builtin_interfaces__msg__Time__get_type_description_sources+0x2c>)
 801989c:	4c08      	ldr	r4, [pc, #32]	; (80198c0 <builtin_interfaces__msg__Time__get_type_description_sources+0x30>)
 801989e:	701a      	strb	r2, [r3, #0]
 80198a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80198a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80198a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80198a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80198a8:	682b      	ldr	r3, [r5, #0]
 80198aa:	4806      	ldr	r0, [pc, #24]	; (80198c4 <builtin_interfaces__msg__Time__get_type_description_sources+0x34>)
 80198ac:	6023      	str	r3, [r4, #0]
 80198ae:	bc30      	pop	{r4, r5}
 80198b0:	4770      	bx	lr
 80198b2:	4804      	ldr	r0, [pc, #16]	; (80198c4 <builtin_interfaces__msg__Time__get_type_description_sources+0x34>)
 80198b4:	4770      	bx	lr
 80198b6:	bf00      	nop
 80198b8:	20010b44 	.word	0x20010b44
 80198bc:	0801f0dc 	.word	0x0801f0dc
 80198c0:	20010b48 	.word	0x20010b48
 80198c4:	0801f100 	.word	0x0801f100

080198c8 <builtin_interfaces__msg__Time__init>:
 80198c8:	3800      	subs	r0, #0
 80198ca:	bf18      	it	ne
 80198cc:	2001      	movne	r0, #1
 80198ce:	4770      	bx	lr

080198d0 <builtin_interfaces__msg__Time__fini>:
 80198d0:	4770      	bx	lr
 80198d2:	bf00      	nop

080198d4 <ucdr_serialize_sequence_char>:
 80198d4:	b570      	push	{r4, r5, r6, lr}
 80198d6:	4615      	mov	r5, r2
 80198d8:	460e      	mov	r6, r1
 80198da:	7d01      	ldrb	r1, [r0, #20]
 80198dc:	4604      	mov	r4, r0
 80198de:	f7f5 feab 	bl	800f638 <ucdr_serialize_endian_uint32_t>
 80198e2:	b90d      	cbnz	r5, 80198e8 <ucdr_serialize_sequence_char+0x14>
 80198e4:	2001      	movs	r0, #1
 80198e6:	bd70      	pop	{r4, r5, r6, pc}
 80198e8:	462b      	mov	r3, r5
 80198ea:	4632      	mov	r2, r6
 80198ec:	7d21      	ldrb	r1, [r4, #20]
 80198ee:	4620      	mov	r0, r4
 80198f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80198f4:	f7f5 b9e8 	b.w	800ecc8 <ucdr_serialize_endian_array_char>

080198f8 <ucdr_deserialize_sequence_char>:
 80198f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80198fc:	461d      	mov	r5, r3
 80198fe:	4616      	mov	r6, r2
 8019900:	460f      	mov	r7, r1
 8019902:	461a      	mov	r2, r3
 8019904:	7d01      	ldrb	r1, [r0, #20]
 8019906:	4604      	mov	r4, r0
 8019908:	f7f5 ffbe 	bl	800f888 <ucdr_deserialize_endian_uint32_t>
 801990c:	682b      	ldr	r3, [r5, #0]
 801990e:	429e      	cmp	r6, r3
 8019910:	d201      	bcs.n	8019916 <ucdr_deserialize_sequence_char+0x1e>
 8019912:	2201      	movs	r2, #1
 8019914:	75a2      	strb	r2, [r4, #22]
 8019916:	b913      	cbnz	r3, 801991e <ucdr_deserialize_sequence_char+0x26>
 8019918:	2001      	movs	r0, #1
 801991a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801991e:	463a      	mov	r2, r7
 8019920:	7d21      	ldrb	r1, [r4, #20]
 8019922:	4620      	mov	r0, r4
 8019924:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019928:	f7f5 ba00 	b.w	800ed2c <ucdr_deserialize_endian_array_char>

0801992c <ucdr_serialize_sequence_uint8_t>:
 801992c:	b570      	push	{r4, r5, r6, lr}
 801992e:	4615      	mov	r5, r2
 8019930:	460e      	mov	r6, r1
 8019932:	7d01      	ldrb	r1, [r0, #20]
 8019934:	4604      	mov	r4, r0
 8019936:	f7f5 fe7f 	bl	800f638 <ucdr_serialize_endian_uint32_t>
 801993a:	b90d      	cbnz	r5, 8019940 <ucdr_serialize_sequence_uint8_t+0x14>
 801993c:	2001      	movs	r0, #1
 801993e:	bd70      	pop	{r4, r5, r6, pc}
 8019940:	462b      	mov	r3, r5
 8019942:	4632      	mov	r2, r6
 8019944:	7d21      	ldrb	r1, [r4, #20]
 8019946:	4620      	mov	r0, r4
 8019948:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801994c:	f7f5 ba54 	b.w	800edf8 <ucdr_serialize_endian_array_uint8_t>

08019950 <ucdr_deserialize_sequence_uint8_t>:
 8019950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019954:	461d      	mov	r5, r3
 8019956:	4616      	mov	r6, r2
 8019958:	460f      	mov	r7, r1
 801995a:	461a      	mov	r2, r3
 801995c:	7d01      	ldrb	r1, [r0, #20]
 801995e:	4604      	mov	r4, r0
 8019960:	f7f5 ff92 	bl	800f888 <ucdr_deserialize_endian_uint32_t>
 8019964:	682b      	ldr	r3, [r5, #0]
 8019966:	429e      	cmp	r6, r3
 8019968:	d201      	bcs.n	801996e <ucdr_deserialize_sequence_uint8_t+0x1e>
 801996a:	2201      	movs	r2, #1
 801996c:	75a2      	strb	r2, [r4, #22]
 801996e:	b913      	cbnz	r3, 8019976 <ucdr_deserialize_sequence_uint8_t+0x26>
 8019970:	2001      	movs	r0, #1
 8019972:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019976:	463a      	mov	r2, r7
 8019978:	7d21      	ldrb	r1, [r4, #20]
 801997a:	4620      	mov	r0, r4
 801997c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019980:	f7f5 baa0 	b.w	800eec4 <ucdr_deserialize_endian_array_uint8_t>

08019984 <ucdr_serialize_string>:
 8019984:	b510      	push	{r4, lr}
 8019986:	b082      	sub	sp, #8
 8019988:	4604      	mov	r4, r0
 801998a:	4608      	mov	r0, r1
 801998c:	9101      	str	r1, [sp, #4]
 801998e:	f7e6 fcb7 	bl	8000300 <strlen>
 8019992:	4602      	mov	r2, r0
 8019994:	9901      	ldr	r1, [sp, #4]
 8019996:	4620      	mov	r0, r4
 8019998:	3201      	adds	r2, #1
 801999a:	b002      	add	sp, #8
 801999c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80199a0:	f7ff bf98 	b.w	80198d4 <ucdr_serialize_sequence_char>

080199a4 <ucdr_deserialize_string>:
 80199a4:	b500      	push	{lr}
 80199a6:	b083      	sub	sp, #12
 80199a8:	ab01      	add	r3, sp, #4
 80199aa:	f7ff ffa5 	bl	80198f8 <ucdr_deserialize_sequence_char>
 80199ae:	b003      	add	sp, #12
 80199b0:	f85d fb04 	ldr.w	pc, [sp], #4

080199b4 <get_custom_error>:
 80199b4:	4b01      	ldr	r3, [pc, #4]	; (80199bc <get_custom_error+0x8>)
 80199b6:	7818      	ldrb	r0, [r3, #0]
 80199b8:	4770      	bx	lr
 80199ba:	bf00      	nop
 80199bc:	20010b6c 	.word	0x20010b6c

080199c0 <recv_custom_msg>:
 80199c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80199c4:	4693      	mov	fp, r2
 80199c6:	b089      	sub	sp, #36	; 0x24
 80199c8:	2200      	movs	r2, #0
 80199ca:	4604      	mov	r4, r0
 80199cc:	468a      	mov	sl, r1
 80199ce:	9305      	str	r3, [sp, #20]
 80199d0:	f88d 201e 	strb.w	r2, [sp, #30]
 80199d4:	f890 2200 	ldrb.w	r2, [r0, #512]	; 0x200
 80199d8:	b322      	cbz	r2, 8019a24 <recv_custom_msg+0x64>
 80199da:	f200 2902 	addw	r9, r0, #514	; 0x202
 80199de:	f10d 081f 	add.w	r8, sp, #31
 80199e2:	af05      	add	r7, sp, #20
 80199e4:	f10d 061e 	add.w	r6, sp, #30
 80199e8:	f44f 7500 	mov.w	r5, #512	; 0x200
 80199ec:	e002      	b.n	80199f4 <recv_custom_msg+0x34>
 80199ee:	9b05      	ldr	r3, [sp, #20]
 80199f0:	2b00      	cmp	r3, #0
 80199f2:	dd0f      	ble.n	8019a14 <recv_custom_msg+0x54>
 80199f4:	f8d4 1274 	ldr.w	r1, [r4, #628]	; 0x274
 80199f8:	4623      	mov	r3, r4
 80199fa:	4622      	mov	r2, r4
 80199fc:	4648      	mov	r0, r9
 80199fe:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8019a02:	e9cd 5600 	strd	r5, r6, [sp]
 8019a06:	f001 f913 	bl	801ac30 <uxr_read_framed_msg>
 8019a0a:	2800      	cmp	r0, #0
 8019a0c:	d0ef      	beq.n	80199ee <recv_custom_msg+0x2e>
 8019a0e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8019a12:	b1b3      	cbz	r3, 8019a42 <recv_custom_msg+0x82>
 8019a14:	4b0f      	ldr	r3, [pc, #60]	; (8019a54 <recv_custom_msg+0x94>)
 8019a16:	2000      	movs	r0, #0
 8019a18:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8019a1c:	701a      	strb	r2, [r3, #0]
 8019a1e:	b009      	add	sp, #36	; 0x24
 8019a20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a24:	f10d 021f 	add.w	r2, sp, #31
 8019a28:	4601      	mov	r1, r0
 8019a2a:	9200      	str	r2, [sp, #0]
 8019a2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8019a30:	f8d0 5274 	ldr.w	r5, [r0, #628]	; 0x274
 8019a34:	47a8      	blx	r5
 8019a36:	2800      	cmp	r0, #0
 8019a38:	d0ec      	beq.n	8019a14 <recv_custom_msg+0x54>
 8019a3a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8019a3e:	2b00      	cmp	r3, #0
 8019a40:	d1e8      	bne.n	8019a14 <recv_custom_msg+0x54>
 8019a42:	f8cb 0000 	str.w	r0, [fp]
 8019a46:	2001      	movs	r0, #1
 8019a48:	f8ca 4000 	str.w	r4, [sl]
 8019a4c:	b009      	add	sp, #36	; 0x24
 8019a4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a52:	bf00      	nop
 8019a54:	20010b6c 	.word	0x20010b6c

08019a58 <send_custom_msg>:
 8019a58:	b530      	push	{r4, r5, lr}
 8019a5a:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 8019a5e:	b087      	sub	sp, #28
 8019a60:	4614      	mov	r4, r2
 8019a62:	b995      	cbnz	r5, 8019a8a <send_custom_msg+0x32>
 8019a64:	f8d0 5270 	ldr.w	r5, [r0, #624]	; 0x270
 8019a68:	f10d 0317 	add.w	r3, sp, #23
 8019a6c:	47a8      	blx	r5
 8019a6e:	1e03      	subs	r3, r0, #0
 8019a70:	bf18      	it	ne
 8019a72:	2301      	movne	r3, #1
 8019a74:	42a0      	cmp	r0, r4
 8019a76:	bf18      	it	ne
 8019a78:	2300      	movne	r3, #0
 8019a7a:	b91b      	cbnz	r3, 8019a84 <send_custom_msg+0x2c>
 8019a7c:	4a0a      	ldr	r2, [pc, #40]	; (8019aa8 <send_custom_msg+0x50>)
 8019a7e:	f89d 1017 	ldrb.w	r1, [sp, #23]
 8019a82:	7011      	strb	r1, [r2, #0]
 8019a84:	4618      	mov	r0, r3
 8019a86:	b007      	add	sp, #28
 8019a88:	bd30      	pop	{r4, r5, pc}
 8019a8a:	460b      	mov	r3, r1
 8019a8c:	2200      	movs	r2, #0
 8019a8e:	f10d 0117 	add.w	r1, sp, #23
 8019a92:	9400      	str	r4, [sp, #0]
 8019a94:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8019a98:	4602      	mov	r2, r0
 8019a9a:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
 8019a9e:	f200 2002 	addw	r0, r0, #514	; 0x202
 8019aa2:	f000 fee7 	bl	801a874 <uxr_write_framed_msg>
 8019aa6:	e7e2      	b.n	8019a6e <send_custom_msg+0x16>
 8019aa8:	20010b6c 	.word	0x20010b6c

08019aac <uxr_set_custom_transport_callbacks>:
 8019aac:	f880 1200 	strb.w	r1, [r0, #512]	; 0x200
 8019ab0:	9901      	ldr	r1, [sp, #4]
 8019ab2:	e9c0 239a 	strd	r2, r3, [r0, #616]	; 0x268
 8019ab6:	9b00      	ldr	r3, [sp, #0]
 8019ab8:	e9c0 319c 	strd	r3, r1, [r0, #624]	; 0x270
 8019abc:	4770      	bx	lr
 8019abe:	bf00      	nop

08019ac0 <uxr_init_custom_transport>:
 8019ac0:	b538      	push	{r3, r4, r5, lr}
 8019ac2:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
 8019ac6:	b303      	cbz	r3, 8019b0a <uxr_init_custom_transport+0x4a>
 8019ac8:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 8019acc:	4604      	mov	r4, r0
 8019ace:	b1e2      	cbz	r2, 8019b0a <uxr_init_custom_transport+0x4a>
 8019ad0:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 8019ad4:	b1ca      	cbz	r2, 8019b0a <uxr_init_custom_transport+0x4a>
 8019ad6:	f8d0 2274 	ldr.w	r2, [r0, #628]	; 0x274
 8019ada:	b1b2      	cbz	r2, 8019b0a <uxr_init_custom_transport+0x4a>
 8019adc:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
 8019ae0:	4798      	blx	r3
 8019ae2:	4605      	mov	r5, r0
 8019ae4:	b188      	cbz	r0, 8019b0a <uxr_init_custom_transport+0x4a>
 8019ae6:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8019aea:	b98b      	cbnz	r3, 8019b10 <uxr_init_custom_transport+0x50>
 8019aec:	4b0b      	ldr	r3, [pc, #44]	; (8019b1c <uxr_init_custom_transport+0x5c>)
 8019aee:	4628      	mov	r0, r5
 8019af0:	490b      	ldr	r1, [pc, #44]	; (8019b20 <uxr_init_custom_transport+0x60>)
 8019af2:	4a0c      	ldr	r2, [pc, #48]	; (8019b24 <uxr_init_custom_transport+0x64>)
 8019af4:	f8c4 3280 	str.w	r3, [r4, #640]	; 0x280
 8019af8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8019afc:	f8c4 2284 	str.w	r2, [r4, #644]	; 0x284
 8019b00:	f8a4 3288 	strh.w	r3, [r4, #648]	; 0x288
 8019b04:	e9c4 419e 	strd	r4, r1, [r4, #632]	; 0x278
 8019b08:	bd38      	pop	{r3, r4, r5, pc}
 8019b0a:	2500      	movs	r5, #0
 8019b0c:	4628      	mov	r0, r5
 8019b0e:	bd38      	pop	{r3, r4, r5, pc}
 8019b10:	2100      	movs	r1, #0
 8019b12:	f204 2002 	addw	r0, r4, #514	; 0x202
 8019b16:	f000 fea7 	bl	801a868 <uxr_init_framing_io>
 8019b1a:	e7e7      	b.n	8019aec <uxr_init_custom_transport+0x2c>
 8019b1c:	080199c1 	.word	0x080199c1
 8019b20:	08019a59 	.word	0x08019a59
 8019b24:	080199b5 	.word	0x080199b5

08019b28 <uxr_close_custom_transport>:
 8019b28:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 8019b2c:	4718      	bx	r3
 8019b2e:	bf00      	nop

08019b30 <uxr_init_input_best_effort_stream>:
 8019b30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019b34:	8003      	strh	r3, [r0, #0]
 8019b36:	4770      	bx	lr

08019b38 <uxr_reset_input_best_effort_stream>:
 8019b38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019b3c:	8003      	strh	r3, [r0, #0]
 8019b3e:	4770      	bx	lr

08019b40 <uxr_receive_best_effort_message>:
 8019b40:	b538      	push	{r3, r4, r5, lr}
 8019b42:	4604      	mov	r4, r0
 8019b44:	8800      	ldrh	r0, [r0, #0]
 8019b46:	460d      	mov	r5, r1
 8019b48:	f000 fe76 	bl	801a838 <uxr_seq_num_cmp>
 8019b4c:	4603      	mov	r3, r0
 8019b4e:	0fc0      	lsrs	r0, r0, #31
 8019b50:	2b00      	cmp	r3, #0
 8019b52:	bfb8      	it	lt
 8019b54:	8025      	strhlt	r5, [r4, #0]
 8019b56:	bd38      	pop	{r3, r4, r5, pc}

08019b58 <on_full_input_buffer>:
 8019b58:	b570      	push	{r4, r5, r6, lr}
 8019b5a:	460c      	mov	r4, r1
 8019b5c:	4605      	mov	r5, r0
 8019b5e:	8908      	ldrh	r0, [r1, #8]
 8019b60:	682b      	ldr	r3, [r5, #0]
 8019b62:	7d26      	ldrb	r6, [r4, #20]
 8019b64:	e9d1 1200 	ldrd	r1, r2, [r1]
 8019b68:	fbb2 f2f0 	udiv	r2, r2, r0
 8019b6c:	eba3 0c01 	sub.w	ip, r3, r1
 8019b70:	fbbc fcf2 	udiv	ip, ip, r2
 8019b74:	f10c 0c01 	add.w	ip, ip, #1
 8019b78:	fa1f f38c 	uxth.w	r3, ip
 8019b7c:	fbb3 fcf0 	udiv	ip, r3, r0
 8019b80:	fb00 331c 	mls	r3, r0, ip, r3
 8019b84:	b29b      	uxth	r3, r3
 8019b86:	fb02 f303 	mul.w	r3, r2, r3
 8019b8a:	1d18      	adds	r0, r3, #4
 8019b8c:	4408      	add	r0, r1
 8019b8e:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8019b92:	b116      	cbz	r6, 8019b9a <on_full_input_buffer+0x42>
 8019b94:	2600      	movs	r6, #0
 8019b96:	f840 6c04 	str.w	r6, [r0, #-4]
 8019b9a:	2a03      	cmp	r2, #3
 8019b9c:	d801      	bhi.n	8019ba2 <on_full_input_buffer+0x4a>
 8019b9e:	2001      	movs	r0, #1
 8019ba0:	bd70      	pop	{r4, r5, r6, pc}
 8019ba2:	3308      	adds	r3, #8
 8019ba4:	4628      	mov	r0, r5
 8019ba6:	3a04      	subs	r2, #4
 8019ba8:	4419      	add	r1, r3
 8019baa:	692b      	ldr	r3, [r5, #16]
 8019bac:	f7f6 fdee 	bl	801078c <ucdr_init_buffer_origin>
 8019bb0:	4628      	mov	r0, r5
 8019bb2:	4622      	mov	r2, r4
 8019bb4:	4902      	ldr	r1, [pc, #8]	; (8019bc0 <on_full_input_buffer+0x68>)
 8019bb6:	f7f6 fdc5 	bl	8010744 <ucdr_set_on_full_buffer_callback>
 8019bba:	2000      	movs	r0, #0
 8019bbc:	bd70      	pop	{r4, r5, r6, pc}
 8019bbe:	bf00      	nop
 8019bc0:	08019b59 	.word	0x08019b59

08019bc4 <uxr_init_input_reliable_stream>:
 8019bc4:	b510      	push	{r4, lr}
 8019bc6:	e9c0 1200 	strd	r1, r2, [r0]
 8019bca:	2400      	movs	r4, #0
 8019bcc:	9a02      	ldr	r2, [sp, #8]
 8019bce:	8103      	strh	r3, [r0, #8]
 8019bd0:	6102      	str	r2, [r0, #16]
 8019bd2:	7504      	strb	r4, [r0, #20]
 8019bd4:	b1c3      	cbz	r3, 8019c08 <uxr_init_input_reliable_stream+0x44>
 8019bd6:	600c      	str	r4, [r1, #0]
 8019bd8:	8901      	ldrh	r1, [r0, #8]
 8019bda:	2901      	cmp	r1, #1
 8019bdc:	d914      	bls.n	8019c08 <uxr_init_input_reliable_stream+0x44>
 8019bde:	f04f 0c01 	mov.w	ip, #1
 8019be2:	6843      	ldr	r3, [r0, #4]
 8019be4:	f10c 0e01 	add.w	lr, ip, #1
 8019be8:	fbbc f2f1 	udiv	r2, ip, r1
 8019bec:	fbb3 f3f1 	udiv	r3, r3, r1
 8019bf0:	fb01 c212 	mls	r2, r1, r2, ip
 8019bf4:	fa1f fc8e 	uxth.w	ip, lr
 8019bf8:	b292      	uxth	r2, r2
 8019bfa:	fb02 f303 	mul.w	r3, r2, r3
 8019bfe:	6802      	ldr	r2, [r0, #0]
 8019c00:	50d4      	str	r4, [r2, r3]
 8019c02:	8901      	ldrh	r1, [r0, #8]
 8019c04:	4561      	cmp	r1, ip
 8019c06:	d8ec      	bhi.n	8019be2 <uxr_init_input_reliable_stream+0x1e>
 8019c08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019c0c:	60c3      	str	r3, [r0, #12]
 8019c0e:	bd10      	pop	{r4, pc}

08019c10 <uxr_reset_input_reliable_stream>:
 8019c10:	8901      	ldrh	r1, [r0, #8]
 8019c12:	b1d9      	cbz	r1, 8019c4c <uxr_reset_input_reliable_stream+0x3c>
 8019c14:	b510      	push	{r4, lr}
 8019c16:	f04f 0e00 	mov.w	lr, #0
 8019c1a:	46f4      	mov	ip, lr
 8019c1c:	4674      	mov	r4, lr
 8019c1e:	6843      	ldr	r3, [r0, #4]
 8019c20:	f10e 0e01 	add.w	lr, lr, #1
 8019c24:	fbbc f2f1 	udiv	r2, ip, r1
 8019c28:	fbb3 f3f1 	udiv	r3, r3, r1
 8019c2c:	fb01 c212 	mls	r2, r1, r2, ip
 8019c30:	fa1f fc8e 	uxth.w	ip, lr
 8019c34:	b292      	uxth	r2, r2
 8019c36:	fb02 f303 	mul.w	r3, r2, r3
 8019c3a:	6802      	ldr	r2, [r0, #0]
 8019c3c:	50d4      	str	r4, [r2, r3]
 8019c3e:	8901      	ldrh	r1, [r0, #8]
 8019c40:	4561      	cmp	r1, ip
 8019c42:	d8ec      	bhi.n	8019c1e <uxr_reset_input_reliable_stream+0xe>
 8019c44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019c48:	60c3      	str	r3, [r0, #12]
 8019c4a:	bd10      	pop	{r4, pc}
 8019c4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019c50:	60c3      	str	r3, [r0, #12]
 8019c52:	4770      	bx	lr

08019c54 <uxr_receive_reliable_message>:
 8019c54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019c58:	4604      	mov	r4, r0
 8019c5a:	460d      	mov	r5, r1
 8019c5c:	8901      	ldrh	r1, [r0, #8]
 8019c5e:	4617      	mov	r7, r2
 8019c60:	8980      	ldrh	r0, [r0, #12]
 8019c62:	4698      	mov	r8, r3
 8019c64:	f000 fde0 	bl	801a828 <uxr_seq_num_add>
 8019c68:	4629      	mov	r1, r5
 8019c6a:	4606      	mov	r6, r0
 8019c6c:	89a0      	ldrh	r0, [r4, #12]
 8019c6e:	f000 fde3 	bl	801a838 <uxr_seq_num_cmp>
 8019c72:	2800      	cmp	r0, #0
 8019c74:	db0a      	blt.n	8019c8c <uxr_receive_reliable_message+0x38>
 8019c76:	2600      	movs	r6, #0
 8019c78:	4629      	mov	r1, r5
 8019c7a:	89e0      	ldrh	r0, [r4, #14]
 8019c7c:	f000 fddc 	bl	801a838 <uxr_seq_num_cmp>
 8019c80:	2800      	cmp	r0, #0
 8019c82:	da00      	bge.n	8019c86 <uxr_receive_reliable_message+0x32>
 8019c84:	81e5      	strh	r5, [r4, #14]
 8019c86:	4630      	mov	r0, r6
 8019c88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019c8c:	4630      	mov	r0, r6
 8019c8e:	4629      	mov	r1, r5
 8019c90:	f000 fdd2 	bl	801a838 <uxr_seq_num_cmp>
 8019c94:	2800      	cmp	r0, #0
 8019c96:	dbee      	blt.n	8019c76 <uxr_receive_reliable_message+0x22>
 8019c98:	6923      	ldr	r3, [r4, #16]
 8019c9a:	4638      	mov	r0, r7
 8019c9c:	4798      	blx	r3
 8019c9e:	4681      	mov	r9, r0
 8019ca0:	2101      	movs	r1, #1
 8019ca2:	89a0      	ldrh	r0, [r4, #12]
 8019ca4:	f000 fdc0 	bl	801a828 <uxr_seq_num_add>
 8019ca8:	f1b9 0f00 	cmp.w	r9, #0
 8019cac:	bf08      	it	eq
 8019cae:	4285      	cmpeq	r5, r0
 8019cb0:	bf0c      	ite	eq
 8019cb2:	2601      	moveq	r6, #1
 8019cb4:	2600      	movne	r6, #0
 8019cb6:	d104      	bne.n	8019cc2 <uxr_receive_reliable_message+0x6e>
 8019cb8:	2300      	movs	r3, #0
 8019cba:	9a08      	ldr	r2, [sp, #32]
 8019cbc:	81a0      	strh	r0, [r4, #12]
 8019cbe:	7013      	strb	r3, [r2, #0]
 8019cc0:	e7da      	b.n	8019c78 <uxr_receive_reliable_message+0x24>
 8019cc2:	8922      	ldrh	r2, [r4, #8]
 8019cc4:	6863      	ldr	r3, [r4, #4]
 8019cc6:	fbb5 f0f2 	udiv	r0, r5, r2
 8019cca:	fbb3 f3f2 	udiv	r3, r3, r2
 8019cce:	fb02 5010 	mls	r0, r2, r0, r5
 8019cd2:	b280      	uxth	r0, r0
 8019cd4:	fb03 f000 	mul.w	r0, r3, r0
 8019cd8:	6823      	ldr	r3, [r4, #0]
 8019cda:	3004      	adds	r0, #4
 8019cdc:	4418      	add	r0, r3
 8019cde:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8019ce2:	2b00      	cmp	r3, #0
 8019ce4:	d1c7      	bne.n	8019c76 <uxr_receive_reliable_message+0x22>
 8019ce6:	4639      	mov	r1, r7
 8019ce8:	4642      	mov	r2, r8
 8019cea:	f002 fe5c 	bl	801c9a6 <memcpy>
 8019cee:	8921      	ldrh	r1, [r4, #8]
 8019cf0:	6863      	ldr	r3, [r4, #4]
 8019cf2:	fbb5 f2f1 	udiv	r2, r5, r1
 8019cf6:	fbb3 f3f1 	udiv	r3, r3, r1
 8019cfa:	fb01 5212 	mls	r2, r1, r2, r5
 8019cfe:	b292      	uxth	r2, r2
 8019d00:	fb02 f303 	mul.w	r3, r2, r3
 8019d04:	6822      	ldr	r2, [r4, #0]
 8019d06:	f842 8003 	str.w	r8, [r2, r3]
 8019d0a:	2301      	movs	r3, #1
 8019d0c:	9a08      	ldr	r2, [sp, #32]
 8019d0e:	7013      	strb	r3, [r2, #0]
 8019d10:	f1b9 0f00 	cmp.w	r9, #0
 8019d14:	d0af      	beq.n	8019c76 <uxr_receive_reliable_message+0x22>
 8019d16:	89a6      	ldrh	r6, [r4, #12]
 8019d18:	2101      	movs	r1, #1
 8019d1a:	4630      	mov	r0, r6
 8019d1c:	f000 fd84 	bl	801a828 <uxr_seq_num_add>
 8019d20:	8921      	ldrh	r1, [r4, #8]
 8019d22:	6863      	ldr	r3, [r4, #4]
 8019d24:	4606      	mov	r6, r0
 8019d26:	fbb0 f2f1 	udiv	r2, r0, r1
 8019d2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8019d2e:	fb01 0212 	mls	r2, r1, r2, r0
 8019d32:	6820      	ldr	r0, [r4, #0]
 8019d34:	b292      	uxth	r2, r2
 8019d36:	fb02 f303 	mul.w	r3, r2, r3
 8019d3a:	3304      	adds	r3, #4
 8019d3c:	4418      	add	r0, r3
 8019d3e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8019d42:	2b00      	cmp	r3, #0
 8019d44:	d097      	beq.n	8019c76 <uxr_receive_reliable_message+0x22>
 8019d46:	6923      	ldr	r3, [r4, #16]
 8019d48:	4798      	blx	r3
 8019d4a:	2802      	cmp	r0, #2
 8019d4c:	d002      	beq.n	8019d54 <uxr_receive_reliable_message+0x100>
 8019d4e:	2801      	cmp	r0, #1
 8019d50:	d0e2      	beq.n	8019d18 <uxr_receive_reliable_message+0xc4>
 8019d52:	e790      	b.n	8019c76 <uxr_receive_reliable_message+0x22>
 8019d54:	2601      	movs	r6, #1
 8019d56:	e78f      	b.n	8019c78 <uxr_receive_reliable_message+0x24>

08019d58 <uxr_next_input_reliable_buffer_available>:
 8019d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019d5c:	4604      	mov	r4, r0
 8019d5e:	460f      	mov	r7, r1
 8019d60:	8980      	ldrh	r0, [r0, #12]
 8019d62:	2101      	movs	r1, #1
 8019d64:	4690      	mov	r8, r2
 8019d66:	f000 fd5f 	bl	801a828 <uxr_seq_num_add>
 8019d6a:	8922      	ldrh	r2, [r4, #8]
 8019d6c:	6866      	ldr	r6, [r4, #4]
 8019d6e:	fbb0 f3f2 	udiv	r3, r0, r2
 8019d72:	fbb6 f6f2 	udiv	r6, r6, r2
 8019d76:	fb02 0313 	mls	r3, r2, r3, r0
 8019d7a:	b29b      	uxth	r3, r3
 8019d7c:	fb03 f606 	mul.w	r6, r3, r6
 8019d80:	6823      	ldr	r3, [r4, #0]
 8019d82:	3604      	adds	r6, #4
 8019d84:	441e      	add	r6, r3
 8019d86:	f856 9c04 	ldr.w	r9, [r6, #-4]
 8019d8a:	f1b9 0f00 	cmp.w	r9, #0
 8019d8e:	d023      	beq.n	8019dd8 <uxr_next_input_reliable_buffer_available+0x80>
 8019d90:	4605      	mov	r5, r0
 8019d92:	6923      	ldr	r3, [r4, #16]
 8019d94:	4630      	mov	r0, r6
 8019d96:	4798      	blx	r3
 8019d98:	4682      	mov	sl, r0
 8019d9a:	b300      	cbz	r0, 8019dde <uxr_next_input_reliable_buffer_available+0x86>
 8019d9c:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8019da0:	2101      	movs	r1, #1
 8019da2:	4650      	mov	r0, sl
 8019da4:	f000 fd40 	bl	801a828 <uxr_seq_num_add>
 8019da8:	8921      	ldrh	r1, [r4, #8]
 8019daa:	4682      	mov	sl, r0
 8019dac:	6863      	ldr	r3, [r4, #4]
 8019dae:	6820      	ldr	r0, [r4, #0]
 8019db0:	fbba f2f1 	udiv	r2, sl, r1
 8019db4:	fbb3 f3f1 	udiv	r3, r3, r1
 8019db8:	fb01 a212 	mls	r2, r1, r2, sl
 8019dbc:	b292      	uxth	r2, r2
 8019dbe:	fb02 f303 	mul.w	r3, r2, r3
 8019dc2:	3304      	adds	r3, #4
 8019dc4:	4418      	add	r0, r3
 8019dc6:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8019dca:	b12b      	cbz	r3, 8019dd8 <uxr_next_input_reliable_buffer_available+0x80>
 8019dcc:	6923      	ldr	r3, [r4, #16]
 8019dce:	4798      	blx	r3
 8019dd0:	2802      	cmp	r0, #2
 8019dd2:	d01b      	beq.n	8019e0c <uxr_next_input_reliable_buffer_available+0xb4>
 8019dd4:	2801      	cmp	r0, #1
 8019dd6:	d0e3      	beq.n	8019da0 <uxr_next_input_reliable_buffer_available+0x48>
 8019dd8:	2000      	movs	r0, #0
 8019dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019dde:	464a      	mov	r2, r9
 8019de0:	4631      	mov	r1, r6
 8019de2:	4638      	mov	r0, r7
 8019de4:	f7f6 fcda 	bl	801079c <ucdr_init_buffer>
 8019de8:	8921      	ldrh	r1, [r4, #8]
 8019dea:	6863      	ldr	r3, [r4, #4]
 8019dec:	2001      	movs	r0, #1
 8019dee:	fbb5 f2f1 	udiv	r2, r5, r1
 8019df2:	fbb3 f3f1 	udiv	r3, r3, r1
 8019df6:	fb01 5212 	mls	r2, r1, r2, r5
 8019dfa:	b292      	uxth	r2, r2
 8019dfc:	fb02 f303 	mul.w	r3, r2, r3
 8019e00:	6822      	ldr	r2, [r4, #0]
 8019e02:	f842 a003 	str.w	sl, [r2, r3]
 8019e06:	81a5      	strh	r5, [r4, #12]
 8019e08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019e0c:	8920      	ldrh	r0, [r4, #8]
 8019e0e:	eb06 0108 	add.w	r1, r6, r8
 8019e12:	6863      	ldr	r3, [r4, #4]
 8019e14:	eba9 0208 	sub.w	r2, r9, r8
 8019e18:	fbb5 f6f0 	udiv	r6, r5, r0
 8019e1c:	fbb3 f3f0 	udiv	r3, r3, r0
 8019e20:	fb00 5516 	mls	r5, r0, r6, r5
 8019e24:	2000      	movs	r0, #0
 8019e26:	b2ad      	uxth	r5, r5
 8019e28:	fb03 f505 	mul.w	r5, r3, r5
 8019e2c:	6823      	ldr	r3, [r4, #0]
 8019e2e:	5158      	str	r0, [r3, r5]
 8019e30:	4638      	mov	r0, r7
 8019e32:	f7f6 fcb3 	bl	801079c <ucdr_init_buffer>
 8019e36:	4638      	mov	r0, r7
 8019e38:	4622      	mov	r2, r4
 8019e3a:	4903      	ldr	r1, [pc, #12]	; (8019e48 <uxr_next_input_reliable_buffer_available+0xf0>)
 8019e3c:	f7f6 fc82 	bl	8010744 <ucdr_set_on_full_buffer_callback>
 8019e40:	2001      	movs	r0, #1
 8019e42:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8019e46:	e7c8      	b.n	8019dda <uxr_next_input_reliable_buffer_available+0x82>
 8019e48:	08019b59 	.word	0x08019b59

08019e4c <uxr_process_heartbeat>:
 8019e4c:	b538      	push	{r3, r4, r5, lr}
 8019e4e:	4611      	mov	r1, r2
 8019e50:	4604      	mov	r4, r0
 8019e52:	89c0      	ldrh	r0, [r0, #14]
 8019e54:	4615      	mov	r5, r2
 8019e56:	f000 fcef 	bl	801a838 <uxr_seq_num_cmp>
 8019e5a:	2800      	cmp	r0, #0
 8019e5c:	bfb8      	it	lt
 8019e5e:	81e5      	strhlt	r5, [r4, #14]
 8019e60:	bd38      	pop	{r3, r4, r5, pc}
 8019e62:	bf00      	nop

08019e64 <uxr_compute_acknack>:
 8019e64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019e68:	8903      	ldrh	r3, [r0, #8]
 8019e6a:	4604      	mov	r4, r0
 8019e6c:	460f      	mov	r7, r1
 8019e6e:	8985      	ldrh	r5, [r0, #12]
 8019e70:	b1db      	cbz	r3, 8019eaa <uxr_compute_acknack+0x46>
 8019e72:	4628      	mov	r0, r5
 8019e74:	2601      	movs	r6, #1
 8019e76:	e004      	b.n	8019e82 <uxr_compute_acknack+0x1e>
 8019e78:	4566      	cmp	r6, ip
 8019e7a:	f106 0601 	add.w	r6, r6, #1
 8019e7e:	d214      	bcs.n	8019eaa <uxr_compute_acknack+0x46>
 8019e80:	89a0      	ldrh	r0, [r4, #12]
 8019e82:	b2b1      	uxth	r1, r6
 8019e84:	f000 fcd0 	bl	801a828 <uxr_seq_num_add>
 8019e88:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8019e8c:	fbb0 f2fc 	udiv	r2, r0, ip
 8019e90:	e9d4 1300 	ldrd	r1, r3, [r4]
 8019e94:	fb0c 0212 	mls	r2, ip, r2, r0
 8019e98:	fbb3 f3fc 	udiv	r3, r3, ip
 8019e9c:	b292      	uxth	r2, r2
 8019e9e:	fb02 f303 	mul.w	r3, r2, r3
 8019ea2:	58cb      	ldr	r3, [r1, r3]
 8019ea4:	2b00      	cmp	r3, #0
 8019ea6:	d1e7      	bne.n	8019e78 <uxr_compute_acknack+0x14>
 8019ea8:	4605      	mov	r5, r0
 8019eaa:	803d      	strh	r5, [r7, #0]
 8019eac:	2101      	movs	r1, #1
 8019eae:	89e6      	ldrh	r6, [r4, #14]
 8019eb0:	4628      	mov	r0, r5
 8019eb2:	f000 fcbd 	bl	801a830 <uxr_seq_num_sub>
 8019eb6:	4601      	mov	r1, r0
 8019eb8:	4630      	mov	r0, r6
 8019eba:	f000 fcb9 	bl	801a830 <uxr_seq_num_sub>
 8019ebe:	4606      	mov	r6, r0
 8019ec0:	b328      	cbz	r0, 8019f0e <uxr_compute_acknack+0xaa>
 8019ec2:	f04f 0900 	mov.w	r9, #0
 8019ec6:	f04f 0801 	mov.w	r8, #1
 8019eca:	464d      	mov	r5, r9
 8019ecc:	fa1f f189 	uxth.w	r1, r9
 8019ed0:	8838      	ldrh	r0, [r7, #0]
 8019ed2:	f000 fca9 	bl	801a828 <uxr_seq_num_add>
 8019ed6:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8019eda:	6861      	ldr	r1, [r4, #4]
 8019edc:	fa08 fe09 	lsl.w	lr, r8, r9
 8019ee0:	6822      	ldr	r2, [r4, #0]
 8019ee2:	f109 0901 	add.w	r9, r9, #1
 8019ee6:	ea4e 0e05 	orr.w	lr, lr, r5
 8019eea:	fbb0 f3fc 	udiv	r3, r0, ip
 8019eee:	fbb1 f1fc 	udiv	r1, r1, ip
 8019ef2:	fb03 001c 	mls	r0, r3, ip, r0
 8019ef6:	b283      	uxth	r3, r0
 8019ef8:	fb01 f303 	mul.w	r3, r1, r3
 8019efc:	58d3      	ldr	r3, [r2, r3]
 8019efe:	b90b      	cbnz	r3, 8019f04 <uxr_compute_acknack+0xa0>
 8019f00:	fa1f f58e 	uxth.w	r5, lr
 8019f04:	454e      	cmp	r6, r9
 8019f06:	d1e1      	bne.n	8019ecc <uxr_compute_acknack+0x68>
 8019f08:	4628      	mov	r0, r5
 8019f0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019f0e:	4605      	mov	r5, r0
 8019f10:	4628      	mov	r0, r5
 8019f12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019f16:	bf00      	nop

08019f18 <uxr_init_output_best_effort_stream>:
 8019f18:	f64f 7cff 	movw	ip, #65535	; 0xffff
 8019f1c:	6001      	str	r1, [r0, #0]
 8019f1e:	7303      	strb	r3, [r0, #12]
 8019f20:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8019f24:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8019f28:	4770      	bx	lr
 8019f2a:	bf00      	nop

08019f2c <uxr_reset_output_best_effort_stream>:
 8019f2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019f30:	7b03      	ldrb	r3, [r0, #12]
 8019f32:	81c2      	strh	r2, [r0, #14]
 8019f34:	6043      	str	r3, [r0, #4]
 8019f36:	4770      	bx	lr

08019f38 <uxr_prepare_best_effort_buffer_to_write>:
 8019f38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019f3a:	4604      	mov	r4, r0
 8019f3c:	b083      	sub	sp, #12
 8019f3e:	6840      	ldr	r0, [r0, #4]
 8019f40:	460d      	mov	r5, r1
 8019f42:	4616      	mov	r6, r2
 8019f44:	f7f8 f920 	bl	8012188 <uxr_submessage_padding>
 8019f48:	6863      	ldr	r3, [r4, #4]
 8019f4a:	4418      	add	r0, r3
 8019f4c:	68a3      	ldr	r3, [r4, #8]
 8019f4e:	1942      	adds	r2, r0, r5
 8019f50:	4293      	cmp	r3, r2
 8019f52:	bf2c      	ite	cs
 8019f54:	2701      	movcs	r7, #1
 8019f56:	2700      	movcc	r7, #0
 8019f58:	d202      	bcs.n	8019f60 <uxr_prepare_best_effort_buffer_to_write+0x28>
 8019f5a:	4638      	mov	r0, r7
 8019f5c:	b003      	add	sp, #12
 8019f5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019f60:	9000      	str	r0, [sp, #0]
 8019f62:	2300      	movs	r3, #0
 8019f64:	4630      	mov	r0, r6
 8019f66:	6821      	ldr	r1, [r4, #0]
 8019f68:	f7f6 fc06 	bl	8010778 <ucdr_init_buffer_origin_offset>
 8019f6c:	6861      	ldr	r1, [r4, #4]
 8019f6e:	4638      	mov	r0, r7
 8019f70:	4429      	add	r1, r5
 8019f72:	6061      	str	r1, [r4, #4]
 8019f74:	b003      	add	sp, #12
 8019f76:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019f78 <uxr_prepare_best_effort_buffer_to_send>:
 8019f78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019f7c:	4604      	mov	r4, r0
 8019f7e:	461d      	mov	r5, r3
 8019f80:	6840      	ldr	r0, [r0, #4]
 8019f82:	7b23      	ldrb	r3, [r4, #12]
 8019f84:	4298      	cmp	r0, r3
 8019f86:	bf8c      	ite	hi
 8019f88:	2601      	movhi	r6, #1
 8019f8a:	2600      	movls	r6, #0
 8019f8c:	d802      	bhi.n	8019f94 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 8019f8e:	4630      	mov	r0, r6
 8019f90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019f94:	4688      	mov	r8, r1
 8019f96:	89e0      	ldrh	r0, [r4, #14]
 8019f98:	2101      	movs	r1, #1
 8019f9a:	4617      	mov	r7, r2
 8019f9c:	f000 fc44 	bl	801a828 <uxr_seq_num_add>
 8019fa0:	6823      	ldr	r3, [r4, #0]
 8019fa2:	81e0      	strh	r0, [r4, #14]
 8019fa4:	8028      	strh	r0, [r5, #0]
 8019fa6:	4630      	mov	r0, r6
 8019fa8:	f8c8 3000 	str.w	r3, [r8]
 8019fac:	6863      	ldr	r3, [r4, #4]
 8019fae:	603b      	str	r3, [r7, #0]
 8019fb0:	7b23      	ldrb	r3, [r4, #12]
 8019fb2:	6063      	str	r3, [r4, #4]
 8019fb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019fb8 <on_full_output_buffer>:
 8019fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019fba:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 8019fbe:	460c      	mov	r4, r1
 8019fc0:	6803      	ldr	r3, [r0, #0]
 8019fc2:	4605      	mov	r5, r0
 8019fc4:	7b26      	ldrb	r6, [r4, #12]
 8019fc6:	e9d1 1200 	ldrd	r1, r2, [r1]
 8019fca:	fbb2 f2fc 	udiv	r2, r2, ip
 8019fce:	eba3 0e01 	sub.w	lr, r3, r1
 8019fd2:	6903      	ldr	r3, [r0, #16]
 8019fd4:	fbbe fef2 	udiv	lr, lr, r2
 8019fd8:	f10e 0e01 	add.w	lr, lr, #1
 8019fdc:	fa1f fe8e 	uxth.w	lr, lr
 8019fe0:	fbbe f7fc 	udiv	r7, lr, ip
 8019fe4:	fb0c ec17 	mls	ip, ip, r7, lr
 8019fe8:	fa1f fc8c 	uxth.w	ip, ip
 8019fec:	fb02 fc0c 	mul.w	ip, r2, ip
 8019ff0:	f851 200c 	ldr.w	r2, [r1, ip]
 8019ff4:	44b4      	add	ip, r6
 8019ff6:	1b92      	subs	r2, r2, r6
 8019ff8:	f10c 0c08 	add.w	ip, ip, #8
 8019ffc:	3a04      	subs	r2, #4
 8019ffe:	4461      	add	r1, ip
 801a000:	f7f6 fbc4 	bl	801078c <ucdr_init_buffer_origin>
 801a004:	4628      	mov	r0, r5
 801a006:	4622      	mov	r2, r4
 801a008:	4902      	ldr	r1, [pc, #8]	; (801a014 <on_full_output_buffer+0x5c>)
 801a00a:	f7f6 fb9b 	bl	8010744 <ucdr_set_on_full_buffer_callback>
 801a00e:	2000      	movs	r0, #0
 801a010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a012:	bf00      	nop
 801a014:	08019fb9 	.word	0x08019fb9

0801a018 <uxr_init_output_reliable_stream>:
 801a018:	b530      	push	{r4, r5, lr}
 801a01a:	f89d 400c 	ldrb.w	r4, [sp, #12]
 801a01e:	8103      	strh	r3, [r0, #8]
 801a020:	7304      	strb	r4, [r0, #12]
 801a022:	e9c0 1200 	strd	r1, r2, [r0]
 801a026:	b1e3      	cbz	r3, 801a062 <uxr_init_output_reliable_stream+0x4a>
 801a028:	600c      	str	r4, [r1, #0]
 801a02a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801a02e:	f1bc 0f01 	cmp.w	ip, #1
 801a032:	d916      	bls.n	801a062 <uxr_init_output_reliable_stream+0x4a>
 801a034:	f04f 0e01 	mov.w	lr, #1
 801a038:	6843      	ldr	r3, [r0, #4]
 801a03a:	f10e 0501 	add.w	r5, lr, #1
 801a03e:	7b04      	ldrb	r4, [r0, #12]
 801a040:	6801      	ldr	r1, [r0, #0]
 801a042:	fbbe f2fc 	udiv	r2, lr, ip
 801a046:	fbb3 f3fc 	udiv	r3, r3, ip
 801a04a:	fb0c e212 	mls	r2, ip, r2, lr
 801a04e:	fa1f fe85 	uxth.w	lr, r5
 801a052:	b292      	uxth	r2, r2
 801a054:	fb02 f303 	mul.w	r3, r2, r3
 801a058:	50cc      	str	r4, [r1, r3]
 801a05a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801a05e:	45f4      	cmp	ip, lr
 801a060:	d8ea      	bhi.n	801a038 <uxr_init_output_reliable_stream+0x20>
 801a062:	4b07      	ldr	r3, [pc, #28]	; (801a080 <uxr_init_output_reliable_stream+0x68>)
 801a064:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a068:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801a06c:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 801a070:	f8c0 300e 	str.w	r3, [r0, #14]
 801a074:	2300      	movs	r3, #0
 801a076:	8242      	strh	r2, [r0, #18]
 801a078:	8403      	strh	r3, [r0, #32]
 801a07a:	e9c0 4506 	strd	r4, r5, [r0, #24]
 801a07e:	bd30      	pop	{r4, r5, pc}
 801a080:	ffff0000 	.word	0xffff0000
 801a084:	00000000 	.word	0x00000000

0801a088 <uxr_reset_output_reliable_stream>:
 801a088:	8901      	ldrh	r1, [r0, #8]
 801a08a:	b510      	push	{r4, lr}
 801a08c:	b1b1      	cbz	r1, 801a0bc <uxr_reset_output_reliable_stream+0x34>
 801a08e:	f04f 0e00 	mov.w	lr, #0
 801a092:	46f4      	mov	ip, lr
 801a094:	6843      	ldr	r3, [r0, #4]
 801a096:	f10e 0e01 	add.w	lr, lr, #1
 801a09a:	7b04      	ldrb	r4, [r0, #12]
 801a09c:	fbbc f2f1 	udiv	r2, ip, r1
 801a0a0:	fbb3 f3f1 	udiv	r3, r3, r1
 801a0a4:	fb01 c212 	mls	r2, r1, r2, ip
 801a0a8:	fa1f fc8e 	uxth.w	ip, lr
 801a0ac:	b292      	uxth	r2, r2
 801a0ae:	fb02 f303 	mul.w	r3, r2, r3
 801a0b2:	6802      	ldr	r2, [r0, #0]
 801a0b4:	50d4      	str	r4, [r2, r3]
 801a0b6:	8901      	ldrh	r1, [r0, #8]
 801a0b8:	4561      	cmp	r1, ip
 801a0ba:	d8eb      	bhi.n	801a094 <uxr_reset_output_reliable_stream+0xc>
 801a0bc:	4b08      	ldr	r3, [pc, #32]	; (801a0e0 <uxr_reset_output_reliable_stream+0x58>)
 801a0be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a0c2:	ed9f 7b05 	vldr	d7, [pc, #20]	; 801a0d8 <uxr_reset_output_reliable_stream+0x50>
 801a0c6:	f8c0 300e 	str.w	r3, [r0, #14]
 801a0ca:	2300      	movs	r3, #0
 801a0cc:	8242      	strh	r2, [r0, #18]
 801a0ce:	8403      	strh	r3, [r0, #32]
 801a0d0:	ed80 7b06 	vstr	d7, [r0, #24]
 801a0d4:	bd10      	pop	{r4, pc}
 801a0d6:	bf00      	nop
 801a0d8:	ffffffff 	.word	0xffffffff
 801a0dc:	7fffffff 	.word	0x7fffffff
 801a0e0:	ffff0000 	.word	0xffff0000

0801a0e4 <uxr_prepare_reliable_buffer_to_write>:
 801a0e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a0e8:	4604      	mov	r4, r0
 801a0ea:	b091      	sub	sp, #68	; 0x44
 801a0ec:	8900      	ldrh	r0, [r0, #8]
 801a0ee:	468b      	mov	fp, r1
 801a0f0:	89e6      	ldrh	r6, [r4, #14]
 801a0f2:	9204      	str	r2, [sp, #16]
 801a0f4:	6865      	ldr	r5, [r4, #4]
 801a0f6:	6823      	ldr	r3, [r4, #0]
 801a0f8:	f894 900c 	ldrb.w	r9, [r4, #12]
 801a0fc:	fbb6 f2f0 	udiv	r2, r6, r0
 801a100:	fbb5 f5f0 	udiv	r5, r5, r0
 801a104:	fb00 6212 	mls	r2, r0, r2, r6
 801a108:	1f2f      	subs	r7, r5, #4
 801a10a:	b292      	uxth	r2, r2
 801a10c:	fb05 3202 	mla	r2, r5, r2, r3
 801a110:	1d11      	adds	r1, r2, #4
 801a112:	f8d2 8000 	ldr.w	r8, [r2]
 801a116:	9103      	str	r1, [sp, #12]
 801a118:	2800      	cmp	r0, #0
 801a11a:	f000 814a 	beq.w	801a3b2 <uxr_prepare_reliable_buffer_to_write+0x2ce>
 801a11e:	f04f 0c00 	mov.w	ip, #0
 801a122:	46e2      	mov	sl, ip
 801a124:	4661      	mov	r1, ip
 801a126:	f10c 0c01 	add.w	ip, ip, #1
 801a12a:	fbb1 f2f0 	udiv	r2, r1, r0
 801a12e:	fb00 1212 	mls	r2, r0, r2, r1
 801a132:	fa1f f18c 	uxth.w	r1, ip
 801a136:	b292      	uxth	r2, r2
 801a138:	fb05 f202 	mul.w	r2, r5, r2
 801a13c:	589a      	ldr	r2, [r3, r2]
 801a13e:	454a      	cmp	r2, r9
 801a140:	d103      	bne.n	801a14a <uxr_prepare_reliable_buffer_to_write+0x66>
 801a142:	f10a 0a01 	add.w	sl, sl, #1
 801a146:	fa1f fa8a 	uxth.w	sl, sl
 801a14a:	4281      	cmp	r1, r0
 801a14c:	d3eb      	bcc.n	801a126 <uxr_prepare_reliable_buffer_to_write+0x42>
 801a14e:	4640      	mov	r0, r8
 801a150:	2104      	movs	r1, #4
 801a152:	f8cd a014 	str.w	sl, [sp, #20]
 801a156:	f7f6 fb25 	bl	80107a4 <ucdr_alignment>
 801a15a:	4480      	add	r8, r0
 801a15c:	eb08 020b 	add.w	r2, r8, fp
 801a160:	42ba      	cmp	r2, r7
 801a162:	f240 80ca 	bls.w	801a2fa <uxr_prepare_reliable_buffer_to_write+0x216>
 801a166:	7b22      	ldrb	r2, [r4, #12]
 801a168:	445a      	add	r2, fp
 801a16a:	42ba      	cmp	r2, r7
 801a16c:	f240 80b2 	bls.w	801a2d4 <uxr_prepare_reliable_buffer_to_write+0x1f0>
 801a170:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 801a174:	b2bb      	uxth	r3, r7
 801a176:	eba2 0209 	sub.w	r2, r2, r9
 801a17a:	441a      	add	r2, r3
 801a17c:	b292      	uxth	r2, r2
 801a17e:	fb0a f902 	mul.w	r9, sl, r2
 801a182:	9205      	str	r2, [sp, #20]
 801a184:	45d9      	cmp	r9, fp
 801a186:	9206      	str	r2, [sp, #24]
 801a188:	f0c0 80b3 	bcc.w	801a2f2 <uxr_prepare_reliable_buffer_to_write+0x20e>
 801a18c:	f108 0204 	add.w	r2, r8, #4
 801a190:	42ba      	cmp	r2, r7
 801a192:	f080 80da 	bcs.w	801a34a <uxr_prepare_reliable_buffer_to_write+0x266>
 801a196:	f1a3 0904 	sub.w	r9, r3, #4
 801a19a:	9b05      	ldr	r3, [sp, #20]
 801a19c:	eba9 0908 	sub.w	r9, r9, r8
 801a1a0:	fa1f f989 	uxth.w	r9, r9
 801a1a4:	ebab 0b09 	sub.w	fp, fp, r9
 801a1a8:	fbbb f2f3 	udiv	r2, fp, r3
 801a1ac:	fb03 b312 	mls	r3, r3, r2, fp
 801a1b0:	2b00      	cmp	r3, #0
 801a1b2:	f040 80c4 	bne.w	801a33e <uxr_prepare_reliable_buffer_to_write+0x25a>
 801a1b6:	b293      	uxth	r3, r2
 801a1b8:	4553      	cmp	r3, sl
 801a1ba:	f200 809a 	bhi.w	801a2f2 <uxr_prepare_reliable_buffer_to_write+0x20e>
 801a1be:	2b00      	cmp	r3, #0
 801a1c0:	f000 80f9 	beq.w	801a3b6 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 801a1c4:	f8cd 801c 	str.w	r8, [sp, #28]
 801a1c8:	f04f 0a00 	mov.w	sl, #0
 801a1cc:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801a1d0:	f10d 0b20 	add.w	fp, sp, #32
 801a1d4:	9505      	str	r5, [sp, #20]
 801a1d6:	461d      	mov	r5, r3
 801a1d8:	e000      	b.n	801a1dc <uxr_prepare_reliable_buffer_to_write+0xf8>
 801a1da:	46c1      	mov	r9, r8
 801a1dc:	8922      	ldrh	r2, [r4, #8]
 801a1de:	4658      	mov	r0, fp
 801a1e0:	6863      	ldr	r3, [r4, #4]
 801a1e2:	f10a 0a01 	add.w	sl, sl, #1
 801a1e6:	fbb6 f1f2 	udiv	r1, r6, r2
 801a1ea:	fbb3 f3f2 	udiv	r3, r3, r2
 801a1ee:	fb02 6111 	mls	r1, r2, r1, r6
 801a1f2:	463a      	mov	r2, r7
 801a1f4:	b289      	uxth	r1, r1
 801a1f6:	fb03 f101 	mul.w	r1, r3, r1
 801a1fa:	6823      	ldr	r3, [r4, #0]
 801a1fc:	3104      	adds	r1, #4
 801a1fe:	4419      	add	r1, r3
 801a200:	2300      	movs	r3, #0
 801a202:	f851 cc04 	ldr.w	ip, [r1, #-4]
 801a206:	f8cd c000 	str.w	ip, [sp]
 801a20a:	f7f6 fab5 	bl	8010778 <ucdr_init_buffer_origin_offset>
 801a20e:	464a      	mov	r2, r9
 801a210:	2300      	movs	r3, #0
 801a212:	210d      	movs	r1, #13
 801a214:	4658      	mov	r0, fp
 801a216:	f7f7 ff77 	bl	8012108 <uxr_buffer_submessage_header>
 801a21a:	8921      	ldrh	r1, [r4, #8]
 801a21c:	6863      	ldr	r3, [r4, #4]
 801a21e:	4630      	mov	r0, r6
 801a220:	fbb6 f2f1 	udiv	r2, r6, r1
 801a224:	fbb3 f3f1 	udiv	r3, r3, r1
 801a228:	fb01 6212 	mls	r2, r1, r2, r6
 801a22c:	2101      	movs	r1, #1
 801a22e:	b292      	uxth	r2, r2
 801a230:	fb02 f303 	mul.w	r3, r2, r3
 801a234:	6822      	ldr	r2, [r4, #0]
 801a236:	50d7      	str	r7, [r2, r3]
 801a238:	f000 faf6 	bl	801a828 <uxr_seq_num_add>
 801a23c:	4606      	mov	r6, r0
 801a23e:	fa1f f38a 	uxth.w	r3, sl
 801a242:	429d      	cmp	r5, r3
 801a244:	d8c9      	bhi.n	801a1da <uxr_prepare_reliable_buffer_to_write+0xf6>
 801a246:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801a24a:	9d05      	ldr	r5, [sp, #20]
 801a24c:	8920      	ldrh	r0, [r4, #8]
 801a24e:	463a      	mov	r2, r7
 801a250:	6863      	ldr	r3, [r4, #4]
 801a252:	fbb6 f1f0 	udiv	r1, r6, r0
 801a256:	fbb3 f3f0 	udiv	r3, r3, r0
 801a25a:	fb00 6111 	mls	r1, r0, r1, r6
 801a25e:	4658      	mov	r0, fp
 801a260:	b289      	uxth	r1, r1
 801a262:	fb01 f303 	mul.w	r3, r1, r3
 801a266:	6821      	ldr	r1, [r4, #0]
 801a268:	3304      	adds	r3, #4
 801a26a:	4419      	add	r1, r3
 801a26c:	2300      	movs	r3, #0
 801a26e:	f851 7c04 	ldr.w	r7, [r1, #-4]
 801a272:	9700      	str	r7, [sp, #0]
 801a274:	f7f6 fa80 	bl	8010778 <ucdr_init_buffer_origin_offset>
 801a278:	9f06      	ldr	r7, [sp, #24]
 801a27a:	4658      	mov	r0, fp
 801a27c:	2302      	movs	r3, #2
 801a27e:	b2ba      	uxth	r2, r7
 801a280:	210d      	movs	r1, #13
 801a282:	f7f7 ff41 	bl	8012108 <uxr_buffer_submessage_header>
 801a286:	f108 0104 	add.w	r1, r8, #4
 801a28a:	9b03      	ldr	r3, [sp, #12]
 801a28c:	f1a5 0208 	sub.w	r2, r5, #8
 801a290:	8925      	ldrh	r5, [r4, #8]
 801a292:	440b      	add	r3, r1
 801a294:	eba2 0208 	sub.w	r2, r2, r8
 801a298:	fbb6 f0f5 	udiv	r0, r6, r5
 801a29c:	4619      	mov	r1, r3
 801a29e:	6863      	ldr	r3, [r4, #4]
 801a2a0:	fb05 6010 	mls	r0, r5, r0, r6
 801a2a4:	fbb3 f3f5 	udiv	r3, r3, r5
 801a2a8:	b280      	uxth	r0, r0
 801a2aa:	6825      	ldr	r5, [r4, #0]
 801a2ac:	fb00 f303 	mul.w	r3, r0, r3
 801a2b0:	7b20      	ldrb	r0, [r4, #12]
 801a2b2:	3004      	adds	r0, #4
 801a2b4:	4438      	add	r0, r7
 801a2b6:	50e8      	str	r0, [r5, r3]
 801a2b8:	9d04      	ldr	r5, [sp, #16]
 801a2ba:	4628      	mov	r0, r5
 801a2bc:	f7f6 fa6e 	bl	801079c <ucdr_init_buffer>
 801a2c0:	4628      	mov	r0, r5
 801a2c2:	4622      	mov	r2, r4
 801a2c4:	493d      	ldr	r1, [pc, #244]	; (801a3bc <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 801a2c6:	f7f6 fa3d 	bl	8010744 <ucdr_set_on_full_buffer_callback>
 801a2ca:	2001      	movs	r0, #1
 801a2cc:	81e6      	strh	r6, [r4, #14]
 801a2ce:	b011      	add	sp, #68	; 0x44
 801a2d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a2d4:	2101      	movs	r1, #1
 801a2d6:	89e0      	ldrh	r0, [r4, #14]
 801a2d8:	f000 faa6 	bl	801a828 <uxr_seq_num_add>
 801a2dc:	4605      	mov	r5, r0
 801a2de:	8921      	ldrh	r1, [r4, #8]
 801a2e0:	8a60      	ldrh	r0, [r4, #18]
 801a2e2:	f000 faa1 	bl	801a828 <uxr_seq_num_add>
 801a2e6:	4601      	mov	r1, r0
 801a2e8:	4628      	mov	r0, r5
 801a2ea:	f000 faa5 	bl	801a838 <uxr_seq_num_cmp>
 801a2ee:	2800      	cmp	r0, #0
 801a2f0:	dd44      	ble.n	801a37c <uxr_prepare_reliable_buffer_to_write+0x298>
 801a2f2:	2000      	movs	r0, #0
 801a2f4:	b011      	add	sp, #68	; 0x44
 801a2f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a2fa:	8921      	ldrh	r1, [r4, #8]
 801a2fc:	8a60      	ldrh	r0, [r4, #18]
 801a2fe:	9205      	str	r2, [sp, #20]
 801a300:	f000 fa92 	bl	801a828 <uxr_seq_num_add>
 801a304:	4601      	mov	r1, r0
 801a306:	4630      	mov	r0, r6
 801a308:	f000 fa96 	bl	801a838 <uxr_seq_num_cmp>
 801a30c:	2800      	cmp	r0, #0
 801a30e:	9a05      	ldr	r2, [sp, #20]
 801a310:	dcef      	bgt.n	801a2f2 <uxr_prepare_reliable_buffer_to_write+0x20e>
 801a312:	8925      	ldrh	r5, [r4, #8]
 801a314:	e9d4 7300 	ldrd	r7, r3, [r4]
 801a318:	fbb6 f4f5 	udiv	r4, r6, r5
 801a31c:	fbb3 f3f5 	udiv	r3, r3, r5
 801a320:	fb05 6414 	mls	r4, r5, r4, r6
 801a324:	b2a4      	uxth	r4, r4
 801a326:	fb04 f303 	mul.w	r3, r4, r3
 801a32a:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 801a32e:	50fa      	str	r2, [r7, r3]
 801a330:	2300      	movs	r3, #0
 801a332:	f8cd 8000 	str.w	r8, [sp]
 801a336:	f7f6 fa1f 	bl	8010778 <ucdr_init_buffer_origin_offset>
 801a33a:	2001      	movs	r0, #1
 801a33c:	e7da      	b.n	801a2f4 <uxr_prepare_reliable_buffer_to_write+0x210>
 801a33e:	3201      	adds	r2, #1
 801a340:	9306      	str	r3, [sp, #24]
 801a342:	b293      	uxth	r3, r2
 801a344:	4553      	cmp	r3, sl
 801a346:	d8d4      	bhi.n	801a2f2 <uxr_prepare_reliable_buffer_to_write+0x20e>
 801a348:	e739      	b.n	801a1be <uxr_prepare_reliable_buffer_to_write+0xda>
 801a34a:	4630      	mov	r0, r6
 801a34c:	2101      	movs	r1, #1
 801a34e:	9307      	str	r3, [sp, #28]
 801a350:	f000 fa6a 	bl	801a828 <uxr_seq_num_add>
 801a354:	4606      	mov	r6, r0
 801a356:	8920      	ldrh	r0, [r4, #8]
 801a358:	6862      	ldr	r2, [r4, #4]
 801a35a:	fbb6 f1f0 	udiv	r1, r6, r0
 801a35e:	fbb2 f2f0 	udiv	r2, r2, r0
 801a362:	fb00 6111 	mls	r1, r0, r1, r6
 801a366:	b289      	uxth	r1, r1
 801a368:	fb01 f202 	mul.w	r2, r1, r2
 801a36c:	6821      	ldr	r1, [r4, #0]
 801a36e:	3204      	adds	r2, #4
 801a370:	188b      	adds	r3, r1, r2
 801a372:	f853 8c04 	ldr.w	r8, [r3, #-4]
 801a376:	9303      	str	r3, [sp, #12]
 801a378:	9b07      	ldr	r3, [sp, #28]
 801a37a:	e70c      	b.n	801a196 <uxr_prepare_reliable_buffer_to_write+0xb2>
 801a37c:	8921      	ldrh	r1, [r4, #8]
 801a37e:	6863      	ldr	r3, [r4, #4]
 801a380:	9804      	ldr	r0, [sp, #16]
 801a382:	fbb5 f2f1 	udiv	r2, r5, r1
 801a386:	fbb3 f3f1 	udiv	r3, r3, r1
 801a38a:	fb01 5212 	mls	r2, r1, r2, r5
 801a38e:	6821      	ldr	r1, [r4, #0]
 801a390:	b292      	uxth	r2, r2
 801a392:	fb02 f303 	mul.w	r3, r2, r3
 801a396:	7b22      	ldrb	r2, [r4, #12]
 801a398:	3304      	adds	r3, #4
 801a39a:	445a      	add	r2, fp
 801a39c:	4419      	add	r1, r3
 801a39e:	f841 2c04 	str.w	r2, [r1, #-4]
 801a3a2:	7b23      	ldrb	r3, [r4, #12]
 801a3a4:	9300      	str	r3, [sp, #0]
 801a3a6:	2300      	movs	r3, #0
 801a3a8:	f7f6 f9e6 	bl	8010778 <ucdr_init_buffer_origin_offset>
 801a3ac:	2001      	movs	r0, #1
 801a3ae:	81e5      	strh	r5, [r4, #14]
 801a3b0:	e7a0      	b.n	801a2f4 <uxr_prepare_reliable_buffer_to_write+0x210>
 801a3b2:	4682      	mov	sl, r0
 801a3b4:	e6cb      	b.n	801a14e <uxr_prepare_reliable_buffer_to_write+0x6a>
 801a3b6:	f10d 0b20 	add.w	fp, sp, #32
 801a3ba:	e747      	b.n	801a24c <uxr_prepare_reliable_buffer_to_write+0x168>
 801a3bc:	08019fb9 	.word	0x08019fb9

0801a3c0 <uxr_prepare_next_reliable_buffer_to_send>:
 801a3c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a3c2:	4604      	mov	r4, r0
 801a3c4:	461d      	mov	r5, r3
 801a3c6:	460f      	mov	r7, r1
 801a3c8:	8a00      	ldrh	r0, [r0, #16]
 801a3ca:	2101      	movs	r1, #1
 801a3cc:	4616      	mov	r6, r2
 801a3ce:	f000 fa2b 	bl	801a828 <uxr_seq_num_add>
 801a3d2:	8028      	strh	r0, [r5, #0]
 801a3d4:	8922      	ldrh	r2, [r4, #8]
 801a3d6:	6863      	ldr	r3, [r4, #4]
 801a3d8:	fbb0 f1f2 	udiv	r1, r0, r2
 801a3dc:	fbb3 f3f2 	udiv	r3, r3, r2
 801a3e0:	fb02 0c11 	mls	ip, r2, r1, r0
 801a3e4:	89e1      	ldrh	r1, [r4, #14]
 801a3e6:	fa1f fc8c 	uxth.w	ip, ip
 801a3ea:	fb0c fc03 	mul.w	ip, ip, r3
 801a3ee:	6823      	ldr	r3, [r4, #0]
 801a3f0:	f10c 0c04 	add.w	ip, ip, #4
 801a3f4:	4463      	add	r3, ip
 801a3f6:	603b      	str	r3, [r7, #0]
 801a3f8:	6823      	ldr	r3, [r4, #0]
 801a3fa:	449c      	add	ip, r3
 801a3fc:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 801a400:	6033      	str	r3, [r6, #0]
 801a402:	f000 fa19 	bl	801a838 <uxr_seq_num_cmp>
 801a406:	2800      	cmp	r0, #0
 801a408:	dd01      	ble.n	801a40e <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 801a40a:	2000      	movs	r0, #0
 801a40c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a40e:	7b23      	ldrb	r3, [r4, #12]
 801a410:	6832      	ldr	r2, [r6, #0]
 801a412:	429a      	cmp	r2, r3
 801a414:	d9f9      	bls.n	801a40a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801a416:	8a61      	ldrh	r1, [r4, #18]
 801a418:	8a20      	ldrh	r0, [r4, #16]
 801a41a:	f000 fa09 	bl	801a830 <uxr_seq_num_sub>
 801a41e:	8923      	ldrh	r3, [r4, #8]
 801a420:	4283      	cmp	r3, r0
 801a422:	d0f2      	beq.n	801a40a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801a424:	8828      	ldrh	r0, [r5, #0]
 801a426:	89e3      	ldrh	r3, [r4, #14]
 801a428:	8220      	strh	r0, [r4, #16]
 801a42a:	4298      	cmp	r0, r3
 801a42c:	d001      	beq.n	801a432 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 801a42e:	2001      	movs	r0, #1
 801a430:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a432:	2101      	movs	r1, #1
 801a434:	f000 f9f8 	bl	801a828 <uxr_seq_num_add>
 801a438:	4603      	mov	r3, r0
 801a43a:	2001      	movs	r0, #1
 801a43c:	81e3      	strh	r3, [r4, #14]
 801a43e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801a440 <uxr_update_output_stream_heartbeat_timestamp>:
 801a440:	b570      	push	{r4, r5, r6, lr}
 801a442:	8a01      	ldrh	r1, [r0, #16]
 801a444:	4604      	mov	r4, r0
 801a446:	8a40      	ldrh	r0, [r0, #18]
 801a448:	4615      	mov	r5, r2
 801a44a:	461e      	mov	r6, r3
 801a44c:	f000 f9f4 	bl	801a838 <uxr_seq_num_cmp>
 801a450:	2800      	cmp	r0, #0
 801a452:	db07      	blt.n	801a464 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 801a454:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a458:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801a45c:	2000      	movs	r0, #0
 801a45e:	e9c4 2306 	strd	r2, r3, [r4, #24]
 801a462:	bd70      	pop	{r4, r5, r6, pc}
 801a464:	f894 0020 	ldrb.w	r0, [r4, #32]
 801a468:	b940      	cbnz	r0, 801a47c <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 801a46a:	2301      	movs	r3, #1
 801a46c:	f884 3020 	strb.w	r3, [r4, #32]
 801a470:	3564      	adds	r5, #100	; 0x64
 801a472:	f146 0600 	adc.w	r6, r6, #0
 801a476:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801a47a:	bd70      	pop	{r4, r5, r6, pc}
 801a47c:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 801a480:	4295      	cmp	r5, r2
 801a482:	eb76 0303 	sbcs.w	r3, r6, r3
 801a486:	db04      	blt.n	801a492 <uxr_update_output_stream_heartbeat_timestamp+0x52>
 801a488:	1c43      	adds	r3, r0, #1
 801a48a:	2001      	movs	r0, #1
 801a48c:	f884 3020 	strb.w	r3, [r4, #32]
 801a490:	e7ee      	b.n	801a470 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 801a492:	2000      	movs	r0, #0
 801a494:	e7ec      	b.n	801a470 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 801a496:	bf00      	nop

0801a498 <uxr_begin_output_nack_buffer_it>:
 801a498:	8a40      	ldrh	r0, [r0, #18]
 801a49a:	4770      	bx	lr

0801a49c <uxr_next_reliable_nack_buffer_to_send>:
 801a49c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a4a0:	f890 7021 	ldrb.w	r7, [r0, #33]	; 0x21
 801a4a4:	b197      	cbz	r7, 801a4cc <uxr_next_reliable_nack_buffer_to_send+0x30>
 801a4a6:	4680      	mov	r8, r0
 801a4a8:	460d      	mov	r5, r1
 801a4aa:	4616      	mov	r6, r2
 801a4ac:	461c      	mov	r4, r3
 801a4ae:	8818      	ldrh	r0, [r3, #0]
 801a4b0:	2101      	movs	r1, #1
 801a4b2:	f000 f9b9 	bl	801a828 <uxr_seq_num_add>
 801a4b6:	8020      	strh	r0, [r4, #0]
 801a4b8:	f8b8 1010 	ldrh.w	r1, [r8, #16]
 801a4bc:	f000 f9bc 	bl	801a838 <uxr_seq_num_cmp>
 801a4c0:	2800      	cmp	r0, #0
 801a4c2:	dd06      	ble.n	801a4d2 <uxr_next_reliable_nack_buffer_to_send+0x36>
 801a4c4:	2300      	movs	r3, #0
 801a4c6:	461f      	mov	r7, r3
 801a4c8:	f888 3021 	strb.w	r3, [r8, #33]	; 0x21
 801a4cc:	4638      	mov	r0, r7
 801a4ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a4d2:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 801a4d6:	8820      	ldrh	r0, [r4, #0]
 801a4d8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801a4dc:	fbb0 f3f2 	udiv	r3, r0, r2
 801a4e0:	fbb1 fcf2 	udiv	ip, r1, r2
 801a4e4:	fb02 0313 	mls	r3, r2, r3, r0
 801a4e8:	b29b      	uxth	r3, r3
 801a4ea:	fb03 fc0c 	mul.w	ip, r3, ip
 801a4ee:	f8d8 3000 	ldr.w	r3, [r8]
 801a4f2:	f10c 0c04 	add.w	ip, ip, #4
 801a4f6:	4463      	add	r3, ip
 801a4f8:	602b      	str	r3, [r5, #0]
 801a4fa:	f8d8 3000 	ldr.w	r3, [r8]
 801a4fe:	4463      	add	r3, ip
 801a500:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801a504:	6033      	str	r3, [r6, #0]
 801a506:	f898 200c 	ldrb.w	r2, [r8, #12]
 801a50a:	429a      	cmp	r2, r3
 801a50c:	d0d0      	beq.n	801a4b0 <uxr_next_reliable_nack_buffer_to_send+0x14>
 801a50e:	e7dd      	b.n	801a4cc <uxr_next_reliable_nack_buffer_to_send+0x30>

0801a510 <uxr_process_acknack>:
 801a510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a512:	4604      	mov	r4, r0
 801a514:	460e      	mov	r6, r1
 801a516:	4610      	mov	r0, r2
 801a518:	2101      	movs	r1, #1
 801a51a:	f000 f989 	bl	801a830 <uxr_seq_num_sub>
 801a51e:	8a61      	ldrh	r1, [r4, #18]
 801a520:	f000 f986 	bl	801a830 <uxr_seq_num_sub>
 801a524:	b1c8      	cbz	r0, 801a55a <uxr_process_acknack+0x4a>
 801a526:	4605      	mov	r5, r0
 801a528:	2700      	movs	r7, #0
 801a52a:	2101      	movs	r1, #1
 801a52c:	8a60      	ldrh	r0, [r4, #18]
 801a52e:	f000 f97b 	bl	801a828 <uxr_seq_num_add>
 801a532:	8923      	ldrh	r3, [r4, #8]
 801a534:	6862      	ldr	r2, [r4, #4]
 801a536:	3701      	adds	r7, #1
 801a538:	f894 c00c 	ldrb.w	ip, [r4, #12]
 801a53c:	6821      	ldr	r1, [r4, #0]
 801a53e:	42bd      	cmp	r5, r7
 801a540:	8260      	strh	r0, [r4, #18]
 801a542:	fbb0 fef3 	udiv	lr, r0, r3
 801a546:	fbb2 f2f3 	udiv	r2, r2, r3
 801a54a:	fb03 031e 	mls	r3, r3, lr, r0
 801a54e:	b29b      	uxth	r3, r3
 801a550:	fb02 f303 	mul.w	r3, r2, r3
 801a554:	f841 c003 	str.w	ip, [r1, r3]
 801a558:	d1e7      	bne.n	801a52a <uxr_process_acknack+0x1a>
 801a55a:	3e00      	subs	r6, #0
 801a55c:	f04f 0300 	mov.w	r3, #0
 801a560:	bf18      	it	ne
 801a562:	2601      	movne	r6, #1
 801a564:	f884 3020 	strb.w	r3, [r4, #32]
 801a568:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
 801a56c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a56e:	bf00      	nop

0801a570 <uxr_is_output_up_to_date>:
 801a570:	8a01      	ldrh	r1, [r0, #16]
 801a572:	8a40      	ldrh	r0, [r0, #18]
 801a574:	b508      	push	{r3, lr}
 801a576:	f000 f95f 	bl	801a838 <uxr_seq_num_cmp>
 801a57a:	fab0 f080 	clz	r0, r0
 801a57e:	0940      	lsrs	r0, r0, #5
 801a580:	bd08      	pop	{r3, pc}
 801a582:	bf00      	nop

0801a584 <get_available_free_slots>:
 801a584:	8901      	ldrh	r1, [r0, #8]
 801a586:	b1e1      	cbz	r1, 801a5c2 <get_available_free_slots+0x3e>
 801a588:	6843      	ldr	r3, [r0, #4]
 801a58a:	f04f 0c00 	mov.w	ip, #0
 801a58e:	b530      	push	{r4, r5, lr}
 801a590:	fbb3 fef1 	udiv	lr, r3, r1
 801a594:	6805      	ldr	r5, [r0, #0]
 801a596:	4662      	mov	r2, ip
 801a598:	7b04      	ldrb	r4, [r0, #12]
 801a59a:	4660      	mov	r0, ip
 801a59c:	f10c 0c01 	add.w	ip, ip, #1
 801a5a0:	fbb2 f3f1 	udiv	r3, r2, r1
 801a5a4:	fb01 2313 	mls	r3, r1, r3, r2
 801a5a8:	fa1f f28c 	uxth.w	r2, ip
 801a5ac:	b29b      	uxth	r3, r3
 801a5ae:	fb0e f303 	mul.w	r3, lr, r3
 801a5b2:	58eb      	ldr	r3, [r5, r3]
 801a5b4:	429c      	cmp	r4, r3
 801a5b6:	d101      	bne.n	801a5bc <get_available_free_slots+0x38>
 801a5b8:	3001      	adds	r0, #1
 801a5ba:	b280      	uxth	r0, r0
 801a5bc:	428a      	cmp	r2, r1
 801a5be:	d3ed      	bcc.n	801a59c <get_available_free_slots+0x18>
 801a5c0:	bd30      	pop	{r4, r5, pc}
 801a5c2:	4608      	mov	r0, r1
 801a5c4:	4770      	bx	lr
 801a5c6:	bf00      	nop

0801a5c8 <uxr_buffer_request_data>:
 801a5c8:	b530      	push	{r4, r5, lr}
 801a5ca:	b095      	sub	sp, #84	; 0x54
 801a5cc:	4604      	mov	r4, r0
 801a5ce:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801a5d0:	9303      	str	r3, [sp, #12]
 801a5d2:	2d00      	cmp	r5, #0
 801a5d4:	f88d 301c 	strb.w	r3, [sp, #28]
 801a5d8:	e9cd 2104 	strd	r2, r1, [sp, #16]
 801a5dc:	f04f 0200 	mov.w	r2, #0
 801a5e0:	bf14      	ite	ne
 801a5e2:	2101      	movne	r1, #1
 801a5e4:	4611      	moveq	r1, r2
 801a5e6:	f88d 201d 	strb.w	r2, [sp, #29]
 801a5ea:	f88d 201e 	strb.w	r2, [sp, #30]
 801a5ee:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801a5f2:	d021      	beq.n	801a638 <uxr_buffer_request_data+0x70>
 801a5f4:	686b      	ldr	r3, [r5, #4]
 801a5f6:	2210      	movs	r2, #16
 801a5f8:	6829      	ldr	r1, [r5, #0]
 801a5fa:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 801a5fe:	f8cd 1026 	str.w	r1, [sp, #38]	; 0x26
 801a602:	2308      	movs	r3, #8
 801a604:	2100      	movs	r1, #0
 801a606:	4620      	mov	r0, r4
 801a608:	e9cd 3100 	strd	r3, r1, [sp]
 801a60c:	ab0c      	add	r3, sp, #48	; 0x30
 801a60e:	9905      	ldr	r1, [sp, #20]
 801a610:	f7f7 face 	bl	8011bb0 <uxr_prepare_stream_to_write_submessage>
 801a614:	b918      	cbnz	r0, 801a61e <uxr_buffer_request_data+0x56>
 801a616:	4604      	mov	r4, r0
 801a618:	4620      	mov	r0, r4
 801a61a:	b015      	add	sp, #84	; 0x54
 801a61c:	bd30      	pop	{r4, r5, pc}
 801a61e:	9904      	ldr	r1, [sp, #16]
 801a620:	aa06      	add	r2, sp, #24
 801a622:	4620      	mov	r0, r4
 801a624:	f7f7 fc00 	bl	8011e28 <uxr_init_base_object_request>
 801a628:	4604      	mov	r4, r0
 801a62a:	a906      	add	r1, sp, #24
 801a62c:	a80c      	add	r0, sp, #48	; 0x30
 801a62e:	f7f8 ff33 	bl	8013498 <uxr_serialize_READ_DATA_Payload>
 801a632:	4620      	mov	r0, r4
 801a634:	b015      	add	sp, #84	; 0x54
 801a636:	bd30      	pop	{r4, r5, pc}
 801a638:	2208      	movs	r2, #8
 801a63a:	e7e2      	b.n	801a602 <uxr_buffer_request_data+0x3a>

0801a63c <uxr_buffer_cancel_data>:
 801a63c:	b510      	push	{r4, lr}
 801a63e:	2300      	movs	r3, #0
 801a640:	b094      	sub	sp, #80	; 0x50
 801a642:	4604      	mov	r4, r0
 801a644:	9205      	str	r2, [sp, #20]
 801a646:	9301      	str	r3, [sp, #4]
 801a648:	f8ad 301c 	strh.w	r3, [sp, #28]
 801a64c:	f88d 301e 	strb.w	r3, [sp, #30]
 801a650:	f8cd 3026 	str.w	r3, [sp, #38]	; 0x26
 801a654:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 801a658:	2308      	movs	r3, #8
 801a65a:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801a65e:	2201      	movs	r2, #1
 801a660:	9300      	str	r3, [sp, #0]
 801a662:	ab0c      	add	r3, sp, #48	; 0x30
 801a664:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 801a668:	2210      	movs	r2, #16
 801a66a:	f7f7 faa1 	bl	8011bb0 <uxr_prepare_stream_to_write_submessage>
 801a66e:	b918      	cbnz	r0, 801a678 <uxr_buffer_cancel_data+0x3c>
 801a670:	4604      	mov	r4, r0
 801a672:	4620      	mov	r0, r4
 801a674:	b014      	add	sp, #80	; 0x50
 801a676:	bd10      	pop	{r4, pc}
 801a678:	9905      	ldr	r1, [sp, #20]
 801a67a:	aa06      	add	r2, sp, #24
 801a67c:	4620      	mov	r0, r4
 801a67e:	f7f7 fbd3 	bl	8011e28 <uxr_init_base_object_request>
 801a682:	4604      	mov	r4, r0
 801a684:	a906      	add	r1, sp, #24
 801a686:	a80c      	add	r0, sp, #48	; 0x30
 801a688:	f7f8 ff06 	bl	8013498 <uxr_serialize_READ_DATA_Payload>
 801a68c:	4620      	mov	r0, r4
 801a68e:	b014      	add	sp, #80	; 0x50
 801a690:	bd10      	pop	{r4, pc}
 801a692:	bf00      	nop

0801a694 <read_submessage_format>:
 801a694:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a698:	b095      	sub	sp, #84	; 0x54
 801a69a:	f8bd 7078 	ldrh.w	r7, [sp, #120]	; 0x78
 801a69e:	b113      	cbz	r3, 801a6a6 <read_submessage_format+0x12>
 801a6a0:	b015      	add	sp, #84	; 0x54
 801a6a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a6a6:	4606      	mov	r6, r0
 801a6a8:	981c      	ldr	r0, [sp, #112]	; 0x70
 801a6aa:	460c      	mov	r4, r1
 801a6ac:	4615      	mov	r5, r2
 801a6ae:	9004      	str	r0, [sp, #16]
 801a6b0:	4699      	mov	r9, r3
 801a6b2:	981d      	ldr	r0, [sp, #116]	; 0x74
 801a6b4:	f89d 8076 	ldrb.w	r8, [sp, #118]	; 0x76
 801a6b8:	9005      	str	r0, [sp, #20]
 801a6ba:	a80c      	add	r0, sp, #48	; 0x30
 801a6bc:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 801a6c0:	1a52      	subs	r2, r2, r1
 801a6c2:	f7f6 f86b 	bl	801079c <ucdr_init_buffer>
 801a6c6:	a80c      	add	r0, sp, #48	; 0x30
 801a6c8:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801a6cc:	f7f6 f83a 	bl	8010744 <ucdr_set_on_full_buffer_callback>
 801a6d0:	69e2      	ldr	r2, [r4, #28]
 801a6d2:	b19a      	cbz	r2, 801a6fc <read_submessage_format+0x68>
 801a6d4:	f1b8 0f07 	cmp.w	r8, #7
 801a6d8:	f882 9014 	strb.w	r9, [r2, #20]
 801a6dc:	d040      	beq.n	801a760 <read_submessage_format+0xcc>
 801a6de:	f1b8 0f08 	cmp.w	r8, #8
 801a6e2:	d02e      	beq.n	801a742 <read_submessage_format+0xae>
 801a6e4:	f1b8 0f06 	cmp.w	r8, #6
 801a6e8:	d011      	beq.n	801a70e <read_submessage_format+0x7a>
 801a6ea:	2301      	movs	r3, #1
 801a6ec:	7513      	strb	r3, [r2, #20]
 801a6ee:	4629      	mov	r1, r5
 801a6f0:	4620      	mov	r0, r4
 801a6f2:	f7f6 f8a7 	bl	8010844 <ucdr_advance_buffer>
 801a6f6:	b015      	add	sp, #84	; 0x54
 801a6f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a6fc:	f1b8 0f07 	cmp.w	r8, #7
 801a700:	d02e      	beq.n	801a760 <read_submessage_format+0xcc>
 801a702:	f1b8 0f08 	cmp.w	r8, #8
 801a706:	d01c      	beq.n	801a742 <read_submessage_format+0xae>
 801a708:	f1b8 0f06 	cmp.w	r8, #6
 801a70c:	d1ef      	bne.n	801a6ee <read_submessage_format+0x5a>
 801a70e:	f8d6 8088 	ldr.w	r8, [r6, #136]	; 0x88
 801a712:	f1b8 0f00 	cmp.w	r8, #0
 801a716:	d011      	beq.n	801a73c <read_submessage_format+0xa8>
 801a718:	ab0c      	add	r3, sp, #48	; 0x30
 801a71a:	9501      	str	r5, [sp, #4]
 801a71c:	463a      	mov	r2, r7
 801a71e:	4630      	mov	r0, r6
 801a720:	9300      	str	r3, [sp, #0]
 801a722:	2306      	movs	r3, #6
 801a724:	f88d 3016 	strb.w	r3, [sp, #22]
 801a728:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 801a72c:	9302      	str	r3, [sp, #8]
 801a72e:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 801a732:	47c0      	blx	r8
 801a734:	2301      	movs	r3, #1
 801a736:	69e2      	ldr	r2, [r4, #28]
 801a738:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 801a73c:	2a00      	cmp	r2, #0
 801a73e:	d1d4      	bne.n	801a6ea <read_submessage_format+0x56>
 801a740:	e7d5      	b.n	801a6ee <read_submessage_format+0x5a>
 801a742:	f8d6 30a4 	ldr.w	r3, [r6, #164]	; 0xa4
 801a746:	2b00      	cmp	r3, #0
 801a748:	d0f8      	beq.n	801a73c <read_submessage_format+0xa8>
 801a74a:	a80c      	add	r0, sp, #48	; 0x30
 801a74c:	a906      	add	r1, sp, #24
 801a74e:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 801a752:	f7f8 ff6d 	bl	8013630 <uxr_deserialize_SampleIdentity>
 801a756:	b9a0      	cbnz	r0, 801a782 <read_submessage_format+0xee>
 801a758:	69e2      	ldr	r2, [r4, #28]
 801a75a:	2a00      	cmp	r2, #0
 801a75c:	d1c5      	bne.n	801a6ea <read_submessage_format+0x56>
 801a75e:	e7c6      	b.n	801a6ee <read_submessage_format+0x5a>
 801a760:	f8d6 30ac 	ldr.w	r3, [r6, #172]	; 0xac
 801a764:	b13b      	cbz	r3, 801a776 <read_submessage_format+0xe2>
 801a766:	a906      	add	r1, sp, #24
 801a768:	a80c      	add	r0, sp, #48	; 0x30
 801a76a:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 801a76e:	f7f8 fc33 	bl	8012fd8 <uxr_deserialize_BaseObjectRequest>
 801a772:	bb60      	cbnz	r0, 801a7ce <read_submessage_format+0x13a>
 801a774:	69e2      	ldr	r2, [r4, #28]
 801a776:	68a3      	ldr	r3, [r4, #8]
 801a778:	442b      	add	r3, r5
 801a77a:	60a3      	str	r3, [r4, #8]
 801a77c:	2a00      	cmp	r2, #0
 801a77e:	d1b4      	bne.n	801a6ea <read_submessage_format+0x56>
 801a780:	e7b5      	b.n	801a6ee <read_submessage_format+0x5a>
 801a782:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a784:	a80c      	add	r0, sp, #48	; 0x30
 801a786:	eba8 0803 	sub.w	r8, r8, r3
 801a78a:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 801a78e:	44a8      	add	r8, r5
 801a790:	1a52      	subs	r2, r2, r1
 801a792:	f7f6 f803 	bl	801079c <ucdr_init_buffer>
 801a796:	a80c      	add	r0, sp, #48	; 0x30
 801a798:	fa1f f888 	uxth.w	r8, r8
 801a79c:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801a7a0:	f7f5 ffd0 	bl	8010744 <ucdr_set_on_full_buffer_callback>
 801a7a4:	ab0c      	add	r3, sp, #48	; 0x30
 801a7a6:	2108      	movs	r1, #8
 801a7a8:	f8cd 8004 	str.w	r8, [sp, #4]
 801a7ac:	9300      	str	r3, [sp, #0]
 801a7ae:	463a      	mov	r2, r7
 801a7b0:	f88d 1016 	strb.w	r1, [sp, #22]
 801a7b4:	ab06      	add	r3, sp, #24
 801a7b6:	f8d6 10a8 	ldr.w	r1, [r6, #168]	; 0xa8
 801a7ba:	4630      	mov	r0, r6
 801a7bc:	9102      	str	r1, [sp, #8]
 801a7be:	9905      	ldr	r1, [sp, #20]
 801a7c0:	f8d6 70a4 	ldr.w	r7, [r6, #164]	; 0xa4
 801a7c4:	47b8      	blx	r7
 801a7c6:	2301      	movs	r3, #1
 801a7c8:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 801a7cc:	e7c4      	b.n	801a758 <read_submessage_format+0xc4>
 801a7ce:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 801a7d2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a7d4:	a80c      	add	r0, sp, #48	; 0x30
 801a7d6:	1a52      	subs	r2, r2, r1
 801a7d8:	eba8 0803 	sub.w	r8, r8, r3
 801a7dc:	f7f5 ffde 	bl	801079c <ucdr_init_buffer>
 801a7e0:	a80c      	add	r0, sp, #48	; 0x30
 801a7e2:	44a8      	add	r8, r5
 801a7e4:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801a7e8:	f7f5 ffac 	bl	8010744 <ucdr_set_on_full_buffer_callback>
 801a7ec:	ab0c      	add	r3, sp, #48	; 0x30
 801a7ee:	f89d 1018 	ldrb.w	r1, [sp, #24]
 801a7f2:	fa1f f888 	uxth.w	r8, r8
 801a7f6:	9300      	str	r3, [sp, #0]
 801a7f8:	463a      	mov	r2, r7
 801a7fa:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801a7fe:	4630      	mov	r0, r6
 801a800:	f8cd 8004 	str.w	r8, [sp, #4]
 801a804:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 801a808:	2107      	movs	r1, #7
 801a80a:	f88d 1016 	strb.w	r1, [sp, #22]
 801a80e:	b29b      	uxth	r3, r3
 801a810:	f8d6 10b0 	ldr.w	r1, [r6, #176]	; 0xb0
 801a814:	9102      	str	r1, [sp, #8]
 801a816:	9905      	ldr	r1, [sp, #20]
 801a818:	f8d6 70ac 	ldr.w	r7, [r6, #172]	; 0xac
 801a81c:	47b8      	blx	r7
 801a81e:	2301      	movs	r3, #1
 801a820:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 801a824:	e7a6      	b.n	801a774 <read_submessage_format+0xe0>
 801a826:	bf00      	nop

0801a828 <uxr_seq_num_add>:
 801a828:	4408      	add	r0, r1
 801a82a:	b280      	uxth	r0, r0
 801a82c:	4770      	bx	lr
 801a82e:	bf00      	nop

0801a830 <uxr_seq_num_sub>:
 801a830:	1a40      	subs	r0, r0, r1
 801a832:	b280      	uxth	r0, r0
 801a834:	4770      	bx	lr
 801a836:	bf00      	nop

0801a838 <uxr_seq_num_cmp>:
 801a838:	4288      	cmp	r0, r1
 801a83a:	d011      	beq.n	801a860 <uxr_seq_num_cmp+0x28>
 801a83c:	d309      	bcc.n	801a852 <uxr_seq_num_cmp+0x1a>
 801a83e:	4288      	cmp	r0, r1
 801a840:	d910      	bls.n	801a864 <uxr_seq_num_cmp+0x2c>
 801a842:	1a40      	subs	r0, r0, r1
 801a844:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 801a848:	bfd4      	ite	le
 801a84a:	2001      	movle	r0, #1
 801a84c:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
 801a850:	4770      	bx	lr
 801a852:	1a0b      	subs	r3, r1, r0
 801a854:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801a858:	daf1      	bge.n	801a83e <uxr_seq_num_cmp+0x6>
 801a85a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a85e:	4770      	bx	lr
 801a860:	2000      	movs	r0, #0
 801a862:	4770      	bx	lr
 801a864:	2001      	movs	r0, #1
 801a866:	4770      	bx	lr

0801a868 <uxr_init_framing_io>:
 801a868:	2300      	movs	r3, #0
 801a86a:	7041      	strb	r1, [r0, #1]
 801a86c:	7003      	strb	r3, [r0, #0]
 801a86e:	8583      	strh	r3, [r0, #44]	; 0x2c
 801a870:	4770      	bx	lr
 801a872:	bf00      	nop

0801a874 <uxr_write_framed_msg>:
 801a874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a878:	4617      	mov	r7, r2
 801a87a:	7842      	ldrb	r2, [r0, #1]
 801a87c:	460e      	mov	r6, r1
 801a87e:	b083      	sub	sp, #12
 801a880:	f1a2 017d 	sub.w	r1, r2, #125	; 0x7d
 801a884:	469b      	mov	fp, r3
 801a886:	237e      	movs	r3, #126	; 0x7e
 801a888:	4604      	mov	r4, r0
 801a88a:	2901      	cmp	r1, #1
 801a88c:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 801a890:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 801a894:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 801a898:	f240 8115 	bls.w	801aac6 <uxr_write_framed_msg+0x252>
 801a89c:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 801a8a0:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
 801a8a4:	2202      	movs	r2, #2
 801a8a6:	2901      	cmp	r1, #1
 801a8a8:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801a8ac:	d952      	bls.n	801a954 <uxr_write_framed_msg+0xe0>
 801a8ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a8b0:	2103      	movs	r1, #3
 801a8b2:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 801a8b6:	b2dd      	uxtb	r5, r3
 801a8b8:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 801a8bc:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 801a8c0:	2a01      	cmp	r2, #1
 801a8c2:	d95c      	bls.n	801a97e <uxr_write_framed_msg+0x10a>
 801a8c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a8c6:	1862      	adds	r2, r4, r1
 801a8c8:	3101      	adds	r1, #1
 801a8ca:	f3c3 2007 	ubfx	r0, r3, #8, #8
 801a8ce:	f882 5038 	strb.w	r5, [r2, #56]	; 0x38
 801a8d2:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 801a8d6:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 801a8da:	2a01      	cmp	r2, #1
 801a8dc:	d961      	bls.n	801a9a2 <uxr_write_framed_msg+0x12e>
 801a8de:	1c4a      	adds	r2, r1, #1
 801a8e0:	4421      	add	r1, r4
 801a8e2:	b2d2      	uxtb	r2, r2
 801a8e4:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
 801a8e8:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801a8ec:	2b00      	cmp	r3, #0
 801a8ee:	d06a      	beq.n	801a9c6 <uxr_write_framed_msg+0x152>
 801a8f0:	f04f 0800 	mov.w	r8, #0
 801a8f4:	46c1      	mov	r9, r8
 801a8f6:	e016      	b.n	801a926 <uxr_write_framed_msg+0xb2>
 801a8f8:	2a29      	cmp	r2, #41	; 0x29
 801a8fa:	d868      	bhi.n	801a9ce <uxr_write_framed_msg+0x15a>
 801a8fc:	18a0      	adds	r0, r4, r2
 801a8fe:	3201      	adds	r2, #1
 801a900:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 801a904:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801a908:	ea88 0101 	eor.w	r1, r8, r1
 801a90c:	4b7d      	ldr	r3, [pc, #500]	; (801ab04 <uxr_write_framed_msg+0x290>)
 801a90e:	f109 0901 	add.w	r9, r9, #1
 801a912:	b2c9      	uxtb	r1, r1
 801a914:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 801a918:	ea82 2818 	eor.w	r8, r2, r8, lsr #8
 801a91c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a91e:	454b      	cmp	r3, r9
 801a920:	d969      	bls.n	801a9f6 <uxr_write_framed_msg+0x182>
 801a922:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801a926:	f81b 1009 	ldrb.w	r1, [fp, r9]
 801a92a:	f1a1 007d 	sub.w	r0, r1, #125	; 0x7d
 801a92e:	2801      	cmp	r0, #1
 801a930:	d8e2      	bhi.n	801a8f8 <uxr_write_framed_msg+0x84>
 801a932:	1c50      	adds	r0, r2, #1
 801a934:	b2c0      	uxtb	r0, r0
 801a936:	2829      	cmp	r0, #41	; 0x29
 801a938:	d849      	bhi.n	801a9ce <uxr_write_framed_msg+0x15a>
 801a93a:	18a0      	adds	r0, r4, r2
 801a93c:	f04f 037d 	mov.w	r3, #125	; 0x7d
 801a940:	3202      	adds	r2, #2
 801a942:	f081 0520 	eor.w	r5, r1, #32
 801a946:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 801a94a:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
 801a94e:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801a952:	e7d9      	b.n	801a908 <uxr_write_framed_msg+0x94>
 801a954:	2104      	movs	r1, #4
 801a956:	f04f 0c03 	mov.w	ip, #3
 801a95a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a95c:	4422      	add	r2, r4
 801a95e:	f04f 0e7d 	mov.w	lr, #125	; 0x7d
 801a962:	44a4      	add	ip, r4
 801a964:	b2dd      	uxtb	r5, r3
 801a966:	f080 0020 	eor.w	r0, r0, #32
 801a96a:	f882 e038 	strb.w	lr, [r2, #56]	; 0x38
 801a96e:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 801a972:	f88c 0038 	strb.w	r0, [ip, #56]	; 0x38
 801a976:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 801a97a:	2a01      	cmp	r2, #1
 801a97c:	d8a2      	bhi.n	801a8c4 <uxr_write_framed_msg+0x50>
 801a97e:	1862      	adds	r2, r4, r1
 801a980:	207d      	movs	r0, #125	; 0x7d
 801a982:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a984:	f085 0520 	eor.w	r5, r5, #32
 801a988:	f882 0038 	strb.w	r0, [r2, #56]	; 0x38
 801a98c:	3102      	adds	r1, #2
 801a98e:	f3c3 2007 	ubfx	r0, r3, #8, #8
 801a992:	f882 5039 	strb.w	r5, [r2, #57]	; 0x39
 801a996:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 801a99a:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 801a99e:	2a01      	cmp	r2, #1
 801a9a0:	d89d      	bhi.n	801a8de <uxr_write_framed_msg+0x6a>
 801a9a2:	1c4d      	adds	r5, r1, #1
 801a9a4:	1c8a      	adds	r2, r1, #2
 801a9a6:	f080 0020 	eor.w	r0, r0, #32
 801a9aa:	4421      	add	r1, r4
 801a9ac:	fa54 f585 	uxtab	r5, r4, r5
 801a9b0:	b2d2      	uxtb	r2, r2
 801a9b2:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 801a9b6:	f881 c038 	strb.w	ip, [r1, #56]	; 0x38
 801a9ba:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
 801a9be:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801a9c2:	2b00      	cmp	r3, #0
 801a9c4:	d194      	bne.n	801a8f0 <uxr_write_framed_msg+0x7c>
 801a9c6:	4619      	mov	r1, r3
 801a9c8:	f8ad 3004 	strh.w	r3, [sp, #4]
 801a9cc:	e019      	b.n	801aa02 <uxr_write_framed_msg+0x18e>
 801a9ce:	2500      	movs	r5, #0
 801a9d0:	e000      	b.n	801a9d4 <uxr_write_framed_msg+0x160>
 801a9d2:	b160      	cbz	r0, 801a9ee <uxr_write_framed_msg+0x17a>
 801a9d4:	f105 0138 	add.w	r1, r5, #56	; 0x38
 801a9d8:	1b52      	subs	r2, r2, r5
 801a9da:	4653      	mov	r3, sl
 801a9dc:	4638      	mov	r0, r7
 801a9de:	4421      	add	r1, r4
 801a9e0:	47b0      	blx	r6
 801a9e2:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801a9e6:	4405      	add	r5, r0
 801a9e8:	4295      	cmp	r5, r2
 801a9ea:	d3f2      	bcc.n	801a9d2 <uxr_write_framed_msg+0x15e>
 801a9ec:	d066      	beq.n	801aabc <uxr_write_framed_msg+0x248>
 801a9ee:	2000      	movs	r0, #0
 801a9f0:	b003      	add	sp, #12
 801a9f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a9f6:	fa5f f188 	uxtb.w	r1, r8
 801a9fa:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801a9fe:	f8ad 8004 	strh.w	r8, [sp, #4]
 801aa02:	f04f 0900 	mov.w	r9, #0
 801aa06:	f04f 0b7d 	mov.w	fp, #125	; 0x7d
 801aa0a:	46c8      	mov	r8, r9
 801aa0c:	e013      	b.n	801aa36 <uxr_write_framed_msg+0x1c2>
 801aa0e:	2a29      	cmp	r2, #41	; 0x29
 801aa10:	d824      	bhi.n	801aa5c <uxr_write_framed_msg+0x1e8>
 801aa12:	18a3      	adds	r3, r4, r2
 801aa14:	3201      	adds	r2, #1
 801aa16:	f883 1038 	strb.w	r1, [r3, #56]	; 0x38
 801aa1a:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801aa1e:	f109 0901 	add.w	r9, r9, #1
 801aa22:	f1b9 0f02 	cmp.w	r9, #2
 801aa26:	d02d      	beq.n	801aa84 <uxr_write_framed_msg+0x210>
 801aa28:	f109 0308 	add.w	r3, r9, #8
 801aa2c:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801aa30:	446b      	add	r3, sp
 801aa32:	f813 1c04 	ldrb.w	r1, [r3, #-4]
 801aa36:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 801aa3a:	2b01      	cmp	r3, #1
 801aa3c:	d8e7      	bhi.n	801aa0e <uxr_write_framed_msg+0x19a>
 801aa3e:	1c53      	adds	r3, r2, #1
 801aa40:	b2db      	uxtb	r3, r3
 801aa42:	2b29      	cmp	r3, #41	; 0x29
 801aa44:	d80a      	bhi.n	801aa5c <uxr_write_framed_msg+0x1e8>
 801aa46:	18a3      	adds	r3, r4, r2
 801aa48:	f081 0120 	eor.w	r1, r1, #32
 801aa4c:	3202      	adds	r2, #2
 801aa4e:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
 801aa52:	f883 b038 	strb.w	fp, [r3, #56]	; 0x38
 801aa56:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801aa5a:	e7e0      	b.n	801aa1e <uxr_write_framed_msg+0x1aa>
 801aa5c:	2500      	movs	r5, #0
 801aa5e:	e001      	b.n	801aa64 <uxr_write_framed_msg+0x1f0>
 801aa60:	2800      	cmp	r0, #0
 801aa62:	d0c4      	beq.n	801a9ee <uxr_write_framed_msg+0x17a>
 801aa64:	f105 0138 	add.w	r1, r5, #56	; 0x38
 801aa68:	1b52      	subs	r2, r2, r5
 801aa6a:	4653      	mov	r3, sl
 801aa6c:	4638      	mov	r0, r7
 801aa6e:	4421      	add	r1, r4
 801aa70:	47b0      	blx	r6
 801aa72:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801aa76:	4405      	add	r5, r0
 801aa78:	4295      	cmp	r5, r2
 801aa7a:	d3f1      	bcc.n	801aa60 <uxr_write_framed_msg+0x1ec>
 801aa7c:	d1b7      	bne.n	801a9ee <uxr_write_framed_msg+0x17a>
 801aa7e:	f884 8062 	strb.w	r8, [r4, #98]	; 0x62
 801aa82:	e7d1      	b.n	801aa28 <uxr_write_framed_msg+0x1b4>
 801aa84:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801aa88:	b19a      	cbz	r2, 801aab2 <uxr_write_framed_msg+0x23e>
 801aa8a:	2500      	movs	r5, #0
 801aa8c:	e001      	b.n	801aa92 <uxr_write_framed_msg+0x21e>
 801aa8e:	2800      	cmp	r0, #0
 801aa90:	d0ad      	beq.n	801a9ee <uxr_write_framed_msg+0x17a>
 801aa92:	f105 0138 	add.w	r1, r5, #56	; 0x38
 801aa96:	1b52      	subs	r2, r2, r5
 801aa98:	4653      	mov	r3, sl
 801aa9a:	4638      	mov	r0, r7
 801aa9c:	4421      	add	r1, r4
 801aa9e:	47b0      	blx	r6
 801aaa0:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801aaa4:	4405      	add	r5, r0
 801aaa6:	4295      	cmp	r5, r2
 801aaa8:	d3f1      	bcc.n	801aa8e <uxr_write_framed_msg+0x21a>
 801aaaa:	d1a0      	bne.n	801a9ee <uxr_write_framed_msg+0x17a>
 801aaac:	2300      	movs	r3, #0
 801aaae:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 801aab2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801aab4:	b298      	uxth	r0, r3
 801aab6:	b003      	add	sp, #12
 801aab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aabc:	f04f 0300 	mov.w	r3, #0
 801aac0:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 801aac4:	e72a      	b.n	801a91c <uxr_write_framed_msg+0xa8>
 801aac6:	217d      	movs	r1, #125	; 0x7d
 801aac8:	f082 0220 	eor.w	r2, r2, #32
 801aacc:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
 801aad0:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 801aad4:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
 801aad8:	2203      	movs	r2, #3
 801aada:	2901      	cmp	r1, #1
 801aadc:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801aae0:	d803      	bhi.n	801aaea <uxr_write_framed_msg+0x276>
 801aae2:	2105      	movs	r1, #5
 801aae4:	f04f 0c04 	mov.w	ip, #4
 801aae8:	e737      	b.n	801a95a <uxr_write_framed_msg+0xe6>
 801aaea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801aaec:	2104      	movs	r1, #4
 801aaee:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
 801aaf2:	b2dd      	uxtb	r5, r3
 801aaf4:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 801aaf8:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 801aafc:	2a01      	cmp	r2, #1
 801aafe:	f63f aee1 	bhi.w	801a8c4 <uxr_write_framed_msg+0x50>
 801ab02:	e73c      	b.n	801a97e <uxr_write_framed_msg+0x10a>
 801ab04:	0801f10c 	.word	0x0801f10c

0801ab08 <uxr_framing_read_transport>:
 801ab08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ab0c:	4604      	mov	r4, r0
 801ab0e:	b085      	sub	sp, #20
 801ab10:	4692      	mov	sl, r2
 801ab12:	4689      	mov	r9, r1
 801ab14:	461d      	mov	r5, r3
 801ab16:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801ab18:	f7f7 fb3c 	bl	8012194 <uxr_millis>
 801ab1c:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 801ab20:	f894 702d 	ldrb.w	r7, [r4, #45]	; 0x2d
 801ab24:	4680      	mov	r8, r0
 801ab26:	42ba      	cmp	r2, r7
 801ab28:	d05f      	beq.n	801abea <uxr_framing_read_transport+0xe2>
 801ab2a:	d817      	bhi.n	801ab5c <uxr_framing_read_transport+0x54>
 801ab2c:	3f01      	subs	r7, #1
 801ab2e:	1aba      	subs	r2, r7, r2
 801ab30:	2700      	movs	r7, #0
 801ab32:	b2d2      	uxtb	r2, r2
 801ab34:	42b2      	cmp	r2, r6
 801ab36:	d81a      	bhi.n	801ab6e <uxr_framing_read_transport+0x66>
 801ab38:	19d3      	adds	r3, r2, r7
 801ab3a:	42b3      	cmp	r3, r6
 801ab3c:	d852      	bhi.n	801abe4 <uxr_framing_read_transport+0xdc>
 801ab3e:	b9d2      	cbnz	r2, 801ab76 <uxr_framing_read_transport+0x6e>
 801ab40:	2600      	movs	r6, #0
 801ab42:	f7f7 fb27 	bl	8012194 <uxr_millis>
 801ab46:	682b      	ldr	r3, [r5, #0]
 801ab48:	eba0 0008 	sub.w	r0, r0, r8
 801ab4c:	1a1b      	subs	r3, r3, r0
 801ab4e:	4630      	mov	r0, r6
 801ab50:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ab54:	602b      	str	r3, [r5, #0]
 801ab56:	b005      	add	sp, #20
 801ab58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ab5c:	2f00      	cmp	r7, #0
 801ab5e:	d060      	beq.n	801ac22 <uxr_framing_read_transport+0x11a>
 801ab60:	f1c2 022a 	rsb	r2, r2, #42	; 0x2a
 801ab64:	3f01      	subs	r7, #1
 801ab66:	b2d2      	uxtb	r2, r2
 801ab68:	b2ff      	uxtb	r7, r7
 801ab6a:	42b2      	cmp	r2, r6
 801ab6c:	d9e4      	bls.n	801ab38 <uxr_framing_read_transport+0x30>
 801ab6e:	b2f2      	uxtb	r2, r6
 801ab70:	2700      	movs	r7, #0
 801ab72:	2a00      	cmp	r2, #0
 801ab74:	d0e4      	beq.n	801ab40 <uxr_framing_read_transport+0x38>
 801ab76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ab78:	4650      	mov	r0, sl
 801ab7a:	9203      	str	r2, [sp, #12]
 801ab7c:	9300      	str	r3, [sp, #0]
 801ab7e:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 801ab82:	682b      	ldr	r3, [r5, #0]
 801ab84:	3102      	adds	r1, #2
 801ab86:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 801ac2c <uxr_framing_read_transport+0x124>
 801ab8a:	4421      	add	r1, r4
 801ab8c:	47c8      	blx	r9
 801ab8e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801ab92:	4606      	mov	r6, r0
 801ab94:	4403      	add	r3, r0
 801ab96:	0859      	lsrs	r1, r3, #1
 801ab98:	fbab 2101 	umull	r2, r1, fp, r1
 801ab9c:	222a      	movs	r2, #42	; 0x2a
 801ab9e:	0889      	lsrs	r1, r1, #2
 801aba0:	fb02 3111 	mls	r1, r2, r1, r3
 801aba4:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
 801aba8:	2800      	cmp	r0, #0
 801abaa:	d0c9      	beq.n	801ab40 <uxr_framing_read_transport+0x38>
 801abac:	9a03      	ldr	r2, [sp, #12]
 801abae:	4290      	cmp	r0, r2
 801abb0:	d1c7      	bne.n	801ab42 <uxr_framing_read_transport+0x3a>
 801abb2:	2f00      	cmp	r7, #0
 801abb4:	d0c5      	beq.n	801ab42 <uxr_framing_read_transport+0x3a>
 801abb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801abb8:	3102      	adds	r1, #2
 801abba:	463a      	mov	r2, r7
 801abbc:	4650      	mov	r0, sl
 801abbe:	4421      	add	r1, r4
 801abc0:	9300      	str	r3, [sp, #0]
 801abc2:	2300      	movs	r3, #0
 801abc4:	47c8      	blx	r9
 801abc6:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 801abca:	4406      	add	r6, r0
 801abcc:	1813      	adds	r3, r2, r0
 801abce:	085a      	lsrs	r2, r3, #1
 801abd0:	fbab 1b02 	umull	r1, fp, fp, r2
 801abd4:	222a      	movs	r2, #42	; 0x2a
 801abd6:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
 801abda:	fb02 331b 	mls	r3, r2, fp, r3
 801abde:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 801abe2:	e7ae      	b.n	801ab42 <uxr_framing_read_transport+0x3a>
 801abe4:	1ab6      	subs	r6, r6, r2
 801abe6:	b2f7      	uxtb	r7, r6
 801abe8:	e7a9      	b.n	801ab3e <uxr_framing_read_transport+0x36>
 801abea:	2300      	movs	r3, #0
 801abec:	2e28      	cmp	r6, #40	; 0x28
 801abee:	85a3      	strh	r3, [r4, #44]	; 0x2c
 801abf0:	d9bd      	bls.n	801ab6e <uxr_framing_read_transport+0x66>
 801abf2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801abf4:	2229      	movs	r2, #41	; 0x29
 801abf6:	1ca1      	adds	r1, r4, #2
 801abf8:	4650      	mov	r0, sl
 801abfa:	9300      	str	r3, [sp, #0]
 801abfc:	682b      	ldr	r3, [r5, #0]
 801abfe:	47c8      	blx	r9
 801ac00:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801ac04:	4606      	mov	r6, r0
 801ac06:	212a      	movs	r1, #42	; 0x2a
 801ac08:	4403      	add	r3, r0
 801ac0a:	4808      	ldr	r0, [pc, #32]	; (801ac2c <uxr_framing_read_transport+0x124>)
 801ac0c:	085a      	lsrs	r2, r3, #1
 801ac0e:	fba0 0202 	umull	r0, r2, r0, r2
 801ac12:	0892      	lsrs	r2, r2, #2
 801ac14:	fb01 3312 	mls	r3, r1, r2, r3
 801ac18:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 801ac1c:	2e00      	cmp	r6, #0
 801ac1e:	d08f      	beq.n	801ab40 <uxr_framing_read_transport+0x38>
 801ac20:	e78f      	b.n	801ab42 <uxr_framing_read_transport+0x3a>
 801ac22:	f1c2 0229 	rsb	r2, r2, #41	; 0x29
 801ac26:	b2d2      	uxtb	r2, r2
 801ac28:	e784      	b.n	801ab34 <uxr_framing_read_transport+0x2c>
 801ac2a:	bf00      	nop
 801ac2c:	30c30c31 	.word	0x30c30c31

0801ac30 <uxr_read_framed_msg>:
 801ac30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac34:	461e      	mov	r6, r3
 801ac36:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 801ac3a:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 801ac3e:	b083      	sub	sp, #12
 801ac40:	4604      	mov	r4, r0
 801ac42:	4688      	mov	r8, r1
 801ac44:	429d      	cmp	r5, r3
 801ac46:	4691      	mov	r9, r2
 801ac48:	f000 818c 	beq.w	801af64 <uxr_read_framed_msg+0x334>
 801ac4c:	7823      	ldrb	r3, [r4, #0]
 801ac4e:	4dc3      	ldr	r5, [pc, #780]	; (801af5c <uxr_read_framed_msg+0x32c>)
 801ac50:	4fc3      	ldr	r7, [pc, #780]	; (801af60 <uxr_read_framed_msg+0x330>)
 801ac52:	2b07      	cmp	r3, #7
 801ac54:	d8fd      	bhi.n	801ac52 <uxr_read_framed_msg+0x22>
 801ac56:	e8df f013 	tbh	[pc, r3, lsl #1]
 801ac5a:	011c      	.short	0x011c
 801ac5c:	00d900fb 	.word	0x00d900fb
 801ac60:	008f00ba 	.word	0x008f00ba
 801ac64:	00320051 	.word	0x00320051
 801ac68:	0008      	.short	0x0008
 801ac6a:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 801ac6e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801ac72:	4299      	cmp	r1, r3
 801ac74:	f000 814d 	beq.w	801af12 <uxr_read_framed_msg+0x2e2>
 801ac78:	18e2      	adds	r2, r4, r3
 801ac7a:	7892      	ldrb	r2, [r2, #2]
 801ac7c:	2a7d      	cmp	r2, #125	; 0x7d
 801ac7e:	f000 81b8 	beq.w	801aff2 <uxr_read_framed_msg+0x3c2>
 801ac82:	3301      	adds	r3, #1
 801ac84:	212a      	movs	r1, #42	; 0x2a
 801ac86:	2a7e      	cmp	r2, #126	; 0x7e
 801ac88:	ea4f 0053 	mov.w	r0, r3, lsr #1
 801ac8c:	fba5 c000 	umull	ip, r0, r5, r0
 801ac90:	ea4f 0090 	mov.w	r0, r0, lsr #2
 801ac94:	fb01 3310 	mls	r3, r1, r0, r3
 801ac98:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801ac9c:	f000 8257 	beq.w	801b14e <uxr_read_framed_msg+0x51e>
 801aca0:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801aca2:	2000      	movs	r0, #0
 801aca4:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 801aca6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801acaa:	7020      	strb	r0, [r4, #0]
 801acac:	b29b      	uxth	r3, r3
 801acae:	4299      	cmp	r1, r3
 801acb0:	86a3      	strh	r3, [r4, #52]	; 0x34
 801acb2:	f000 8178 	beq.w	801afa6 <uxr_read_framed_msg+0x376>
 801acb6:	2000      	movs	r0, #0
 801acb8:	b003      	add	sp, #12
 801acba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801acbe:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 801acc2:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801acc6:	4298      	cmp	r0, r3
 801acc8:	f000 8132 	beq.w	801af30 <uxr_read_framed_msg+0x300>
 801accc:	18e2      	adds	r2, r4, r3
 801acce:	7891      	ldrb	r1, [r2, #2]
 801acd0:	297d      	cmp	r1, #125	; 0x7d
 801acd2:	f000 8170 	beq.w	801afb6 <uxr_read_framed_msg+0x386>
 801acd6:	3301      	adds	r3, #1
 801acd8:	202a      	movs	r0, #42	; 0x2a
 801acda:	297e      	cmp	r1, #126	; 0x7e
 801acdc:	ea4f 0253 	mov.w	r2, r3, lsr #1
 801ace0:	fba5 c202 	umull	ip, r2, r5, r2
 801ace4:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801ace8:	fb00 3312 	mls	r3, r0, r2, r3
 801acec:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801acf0:	f000 821d 	beq.w	801b12e <uxr_read_framed_msg+0x4fe>
 801acf4:	2307      	movs	r3, #7
 801acf6:	86a1      	strh	r1, [r4, #52]	; 0x34
 801acf8:	7023      	strb	r3, [r4, #0]
 801acfa:	e7aa      	b.n	801ac52 <uxr_read_framed_msg+0x22>
 801acfc:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 801acfe:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 801ad02:	459e      	cmp	lr, r3
 801ad04:	d827      	bhi.n	801ad56 <uxr_read_framed_msg+0x126>
 801ad06:	e032      	b.n	801ad6e <uxr_read_framed_msg+0x13e>
 801ad08:	fba5 b101 	umull	fp, r1, r5, r1
 801ad0c:	f89c c002 	ldrb.w	ip, [ip, #2]
 801ad10:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
 801ad14:	0889      	lsrs	r1, r1, #2
 801ad16:	f1bc 0f7d 	cmp.w	ip, #125	; 0x7d
 801ad1a:	fb0b 0111 	mls	r1, fp, r1, r0
 801ad1e:	f000 80d4 	beq.w	801aeca <uxr_read_framed_msg+0x29a>
 801ad22:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 801ad26:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
 801ad2a:	f000 80cb 	beq.w	801aec4 <uxr_read_framed_msg+0x294>
 801ad2e:	f806 c003 	strb.w	ip, [r6, r3]
 801ad32:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 801ad34:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 801ad36:	ea80 010c 	eor.w	r1, r0, ip
 801ad3a:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 801ad3e:	3301      	adds	r3, #1
 801ad40:	b2c9      	uxtb	r1, r1
 801ad42:	b29b      	uxth	r3, r3
 801ad44:	f837 2011 	ldrh.w	r2, [r7, r1, lsl #1]
 801ad48:	4573      	cmp	r3, lr
 801ad4a:	8663      	strh	r3, [r4, #50]	; 0x32
 801ad4c:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 801ad50:	86e2      	strh	r2, [r4, #54]	; 0x36
 801ad52:	f080 811d 	bcs.w	801af90 <uxr_read_framed_msg+0x360>
 801ad56:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 801ad5a:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
 801ad5e:	1c50      	adds	r0, r2, #1
 801ad60:	eb04 0c02 	add.w	ip, r4, r2
 801ad64:	4592      	cmp	sl, r2
 801ad66:	ea4f 0150 	mov.w	r1, r0, lsr #1
 801ad6a:	d1cd      	bne.n	801ad08 <uxr_read_framed_msg+0xd8>
 801ad6c:	459e      	cmp	lr, r3
 801ad6e:	f040 8114 	bne.w	801af9a <uxr_read_framed_msg+0x36a>
 801ad72:	2306      	movs	r3, #6
 801ad74:	7023      	strb	r3, [r4, #0]
 801ad76:	e76c      	b.n	801ac52 <uxr_read_framed_msg+0x22>
 801ad78:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 801ad7c:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801ad80:	4298      	cmp	r0, r3
 801ad82:	f000 80c6 	beq.w	801af12 <uxr_read_framed_msg+0x2e2>
 801ad86:	18e2      	adds	r2, r4, r3
 801ad88:	7891      	ldrb	r1, [r2, #2]
 801ad8a:	297d      	cmp	r1, #125	; 0x7d
 801ad8c:	f000 8193 	beq.w	801b0b6 <uxr_read_framed_msg+0x486>
 801ad90:	3301      	adds	r3, #1
 801ad92:	202a      	movs	r0, #42	; 0x2a
 801ad94:	297e      	cmp	r1, #126	; 0x7e
 801ad96:	ea4f 0253 	mov.w	r2, r3, lsr #1
 801ad9a:	fba5 c202 	umull	ip, r2, r5, r2
 801ad9e:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801ada2:	fb00 3312 	mls	r3, r0, r2, r3
 801ada6:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801adaa:	f000 81d0 	beq.w	801b14e <uxr_read_framed_msg+0x51e>
 801adae:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801adb0:	2000      	movs	r0, #0
 801adb2:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 801adb6:	990c      	ldr	r1, [sp, #48]	; 0x30
 801adb8:	8660      	strh	r0, [r4, #50]	; 0x32
 801adba:	b29b      	uxth	r3, r3
 801adbc:	86e0      	strh	r0, [r4, #54]	; 0x36
 801adbe:	428b      	cmp	r3, r1
 801adc0:	8623      	strh	r3, [r4, #48]	; 0x30
 801adc2:	f240 80e2 	bls.w	801af8a <uxr_read_framed_msg+0x35a>
 801adc6:	7020      	strb	r0, [r4, #0]
 801adc8:	b003      	add	sp, #12
 801adca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801adce:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 801add2:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801add6:	4298      	cmp	r0, r3
 801add8:	f000 80aa 	beq.w	801af30 <uxr_read_framed_msg+0x300>
 801addc:	18e2      	adds	r2, r4, r3
 801adde:	7891      	ldrb	r1, [r2, #2]
 801ade0:	297d      	cmp	r1, #125	; 0x7d
 801ade2:	f000 8186 	beq.w	801b0f2 <uxr_read_framed_msg+0x4c2>
 801ade6:	3301      	adds	r3, #1
 801ade8:	202a      	movs	r0, #42	; 0x2a
 801adea:	297e      	cmp	r1, #126	; 0x7e
 801adec:	ea4f 0253 	mov.w	r2, r3, lsr #1
 801adf0:	fba5 c202 	umull	ip, r2, r5, r2
 801adf4:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801adf8:	fb00 3312 	mls	r3, r0, r2, r3
 801adfc:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801ae00:	f000 8195 	beq.w	801b12e <uxr_read_framed_msg+0x4fe>
 801ae04:	2304      	movs	r3, #4
 801ae06:	8621      	strh	r1, [r4, #48]	; 0x30
 801ae08:	7023      	strb	r3, [r4, #0]
 801ae0a:	e722      	b.n	801ac52 <uxr_read_framed_msg+0x22>
 801ae0c:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 801ae10:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 801ae14:	4290      	cmp	r0, r2
 801ae16:	f000 80b4 	beq.w	801af82 <uxr_read_framed_msg+0x352>
 801ae1a:	18a3      	adds	r3, r4, r2
 801ae1c:	7899      	ldrb	r1, [r3, #2]
 801ae1e:	297d      	cmp	r1, #125	; 0x7d
 801ae20:	f000 8107 	beq.w	801b032 <uxr_read_framed_msg+0x402>
 801ae24:	3201      	adds	r2, #1
 801ae26:	232a      	movs	r3, #42	; 0x2a
 801ae28:	297e      	cmp	r1, #126	; 0x7e
 801ae2a:	ea4f 0052 	mov.w	r0, r2, lsr #1
 801ae2e:	fba5 c000 	umull	ip, r0, r5, r0
 801ae32:	ea4f 0090 	mov.w	r0, r0, lsr #2
 801ae36:	fb03 2210 	mls	r2, r3, r0, r2
 801ae3a:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 801ae3e:	f000 818a 	beq.w	801b156 <uxr_read_framed_msg+0x526>
 801ae42:	7863      	ldrb	r3, [r4, #1]
 801ae44:	428b      	cmp	r3, r1
 801ae46:	bf0c      	ite	eq
 801ae48:	2303      	moveq	r3, #3
 801ae4a:	2300      	movne	r3, #0
 801ae4c:	7023      	strb	r3, [r4, #0]
 801ae4e:	e700      	b.n	801ac52 <uxr_read_framed_msg+0x22>
 801ae50:	2300      	movs	r3, #0
 801ae52:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 801ae56:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
 801ae5a:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801ae5e:	4299      	cmp	r1, r3
 801ae60:	d06a      	beq.n	801af38 <uxr_read_framed_msg+0x308>
 801ae62:	18e2      	adds	r2, r4, r3
 801ae64:	7890      	ldrb	r0, [r2, #2]
 801ae66:	287d      	cmp	r0, #125	; 0x7d
 801ae68:	f000 8100 	beq.w	801b06c <uxr_read_framed_msg+0x43c>
 801ae6c:	3301      	adds	r3, #1
 801ae6e:	212a      	movs	r1, #42	; 0x2a
 801ae70:	287e      	cmp	r0, #126	; 0x7e
 801ae72:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
 801ae76:	ea4f 0253 	mov.w	r2, r3, lsr #1
 801ae7a:	fba5 c202 	umull	ip, r2, r5, r2
 801ae7e:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801ae82:	fb01 3312 	mls	r3, r1, r2, r3
 801ae86:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801ae8a:	d055      	beq.n	801af38 <uxr_read_framed_msg+0x308>
 801ae8c:	2302      	movs	r3, #2
 801ae8e:	7023      	strb	r3, [r4, #0]
 801ae90:	e6df      	b.n	801ac52 <uxr_read_framed_msg+0x22>
 801ae92:	f894 c02c 	ldrb.w	ip, [r4, #44]	; 0x2c
 801ae96:	f04f 0e2a 	mov.w	lr, #42	; 0x2a
 801ae9a:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801ae9e:	1c5a      	adds	r2, r3, #1
 801aea0:	459c      	cmp	ip, r3
 801aea2:	eb04 0103 	add.w	r1, r4, r3
 801aea6:	ea4f 0352 	mov.w	r3, r2, lsr #1
 801aeaa:	f43f af04 	beq.w	801acb6 <uxr_read_framed_msg+0x86>
 801aeae:	fba5 0303 	umull	r0, r3, r5, r3
 801aeb2:	7889      	ldrb	r1, [r1, #2]
 801aeb4:	089b      	lsrs	r3, r3, #2
 801aeb6:	297e      	cmp	r1, #126	; 0x7e
 801aeb8:	fb0e 2313 	mls	r3, lr, r3, r2
 801aebc:	b2db      	uxtb	r3, r3
 801aebe:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801aec2:	d1ec      	bne.n	801ae9e <uxr_read_framed_msg+0x26e>
 801aec4:	2301      	movs	r3, #1
 801aec6:	7023      	strb	r3, [r4, #0]
 801aec8:	e6c3      	b.n	801ac52 <uxr_read_framed_msg+0x22>
 801aeca:	1c50      	adds	r0, r2, #1
 801aecc:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
 801aed0:	3202      	adds	r2, #2
 801aed2:	0841      	lsrs	r1, r0, #1
 801aed4:	fba5 c101 	umull	ip, r1, r5, r1
 801aed8:	0889      	lsrs	r1, r1, #2
 801aeda:	fb0b 0111 	mls	r1, fp, r1, r0
 801aede:	1860      	adds	r0, r4, r1
 801aee0:	b2c9      	uxtb	r1, r1
 801aee2:	458a      	cmp	sl, r1
 801aee4:	f43f af42 	beq.w	801ad6c <uxr_read_framed_msg+0x13c>
 801aee8:	0851      	lsrs	r1, r2, #1
 801aeea:	7880      	ldrb	r0, [r0, #2]
 801aeec:	fba5 a101 	umull	sl, r1, r5, r1
 801aef0:	287e      	cmp	r0, #126	; 0x7e
 801aef2:	f080 0c20 	eor.w	ip, r0, #32
 801aef6:	ea4f 0191 	mov.w	r1, r1, lsr #2
 801aefa:	fb0b 2211 	mls	r2, fp, r1, r2
 801aefe:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 801af02:	f47f af14 	bne.w	801ad2e <uxr_read_framed_msg+0xfe>
 801af06:	459e      	cmp	lr, r3
 801af08:	f43f af33 	beq.w	801ad72 <uxr_read_framed_msg+0x142>
 801af0c:	2301      	movs	r3, #1
 801af0e:	7023      	strb	r3, [r4, #0]
 801af10:	e69f      	b.n	801ac52 <uxr_read_framed_msg+0x22>
 801af12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801af14:	9300      	str	r3, [sp, #0]
 801af16:	2301      	movs	r3, #1
 801af18:	9301      	str	r3, [sp, #4]
 801af1a:	464a      	mov	r2, r9
 801af1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801af1e:	4641      	mov	r1, r8
 801af20:	4620      	mov	r0, r4
 801af22:	f7ff fdf1 	bl	801ab08 <uxr_framing_read_transport>
 801af26:	2800      	cmp	r0, #0
 801af28:	f43f aec5 	beq.w	801acb6 <uxr_read_framed_msg+0x86>
 801af2c:	7823      	ldrb	r3, [r4, #0]
 801af2e:	e690      	b.n	801ac52 <uxr_read_framed_msg+0x22>
 801af30:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801af32:	9300      	str	r3, [sp, #0]
 801af34:	2302      	movs	r3, #2
 801af36:	e7ef      	b.n	801af18 <uxr_read_framed_msg+0x2e8>
 801af38:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801af3a:	464a      	mov	r2, r9
 801af3c:	4641      	mov	r1, r8
 801af3e:	4620      	mov	r0, r4
 801af40:	9300      	str	r3, [sp, #0]
 801af42:	2304      	movs	r3, #4
 801af44:	9301      	str	r3, [sp, #4]
 801af46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801af48:	f7ff fdde 	bl	801ab08 <uxr_framing_read_transport>
 801af4c:	2800      	cmp	r0, #0
 801af4e:	d1ed      	bne.n	801af2c <uxr_read_framed_msg+0x2fc>
 801af50:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 801af54:	2b7e      	cmp	r3, #126	; 0x7e
 801af56:	d0e9      	beq.n	801af2c <uxr_read_framed_msg+0x2fc>
 801af58:	e6ad      	b.n	801acb6 <uxr_read_framed_msg+0x86>
 801af5a:	bf00      	nop
 801af5c:	30c30c31 	.word	0x30c30c31
 801af60:	0801f10c 	.word	0x0801f10c
 801af64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801af66:	9300      	str	r3, [sp, #0]
 801af68:	2305      	movs	r3, #5
 801af6a:	9301      	str	r3, [sp, #4]
 801af6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801af6e:	f7ff fdcb 	bl	801ab08 <uxr_framing_read_transport>
 801af72:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 801af76:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801af7a:	429a      	cmp	r2, r3
 801af7c:	f43f ae9b 	beq.w	801acb6 <uxr_read_framed_msg+0x86>
 801af80:	e664      	b.n	801ac4c <uxr_read_framed_msg+0x1c>
 801af82:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801af84:	9300      	str	r3, [sp, #0]
 801af86:	2303      	movs	r3, #3
 801af88:	e7c6      	b.n	801af18 <uxr_read_framed_msg+0x2e8>
 801af8a:	2305      	movs	r3, #5
 801af8c:	7023      	strb	r3, [r4, #0]
 801af8e:	e660      	b.n	801ac52 <uxr_read_framed_msg+0x22>
 801af90:	f43f aeef 	beq.w	801ad72 <uxr_read_framed_msg+0x142>
 801af94:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 801af98:	d094      	beq.n	801aec4 <uxr_read_framed_msg+0x294>
 801af9a:	ebae 0303 	sub.w	r3, lr, r3
 801af9e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801afa0:	3302      	adds	r3, #2
 801afa2:	9200      	str	r2, [sp, #0]
 801afa4:	e7b8      	b.n	801af18 <uxr_read_framed_msg+0x2e8>
 801afa6:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 801afaa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801afac:	7013      	strb	r3, [r2, #0]
 801afae:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 801afb0:	b003      	add	sp, #12
 801afb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801afb6:	1c59      	adds	r1, r3, #1
 801afb8:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 801afbc:	084a      	lsrs	r2, r1, #1
 801afbe:	fba5 e202 	umull	lr, r2, r5, r2
 801afc2:	0892      	lsrs	r2, r2, #2
 801afc4:	fb0c 1212 	mls	r2, ip, r2, r1
 801afc8:	b2d1      	uxtb	r1, r2
 801afca:	4288      	cmp	r0, r1
 801afcc:	d0b0      	beq.n	801af30 <uxr_read_framed_msg+0x300>
 801afce:	3302      	adds	r3, #2
 801afd0:	4422      	add	r2, r4
 801afd2:	7891      	ldrb	r1, [r2, #2]
 801afd4:	085a      	lsrs	r2, r3, #1
 801afd6:	fba5 0202 	umull	r0, r2, r5, r2
 801afda:	297e      	cmp	r1, #126	; 0x7e
 801afdc:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801afe0:	fb0c 3312 	mls	r3, ip, r2, r3
 801afe4:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801afe8:	f000 80a1 	beq.w	801b12e <uxr_read_framed_msg+0x4fe>
 801afec:	f081 0120 	eor.w	r1, r1, #32
 801aff0:	e680      	b.n	801acf4 <uxr_read_framed_msg+0xc4>
 801aff2:	f103 0c01 	add.w	ip, r3, #1
 801aff6:	202a      	movs	r0, #42	; 0x2a
 801aff8:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801affc:	fba5 e202 	umull	lr, r2, r5, r2
 801b000:	0892      	lsrs	r2, r2, #2
 801b002:	fb00 c212 	mls	r2, r0, r2, ip
 801b006:	fa5f fc82 	uxtb.w	ip, r2
 801b00a:	4561      	cmp	r1, ip
 801b00c:	d081      	beq.n	801af12 <uxr_read_framed_msg+0x2e2>
 801b00e:	3302      	adds	r3, #2
 801b010:	4422      	add	r2, r4
 801b012:	0859      	lsrs	r1, r3, #1
 801b014:	7892      	ldrb	r2, [r2, #2]
 801b016:	fba5 c101 	umull	ip, r1, r5, r1
 801b01a:	2a7e      	cmp	r2, #126	; 0x7e
 801b01c:	ea4f 0191 	mov.w	r1, r1, lsr #2
 801b020:	fb00 3311 	mls	r3, r0, r1, r3
 801b024:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801b028:	f000 8091 	beq.w	801b14e <uxr_read_framed_msg+0x51e>
 801b02c:	f082 0220 	eor.w	r2, r2, #32
 801b030:	e636      	b.n	801aca0 <uxr_read_framed_msg+0x70>
 801b032:	1c51      	adds	r1, r2, #1
 801b034:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 801b038:	084b      	lsrs	r3, r1, #1
 801b03a:	fba5 e303 	umull	lr, r3, r5, r3
 801b03e:	089b      	lsrs	r3, r3, #2
 801b040:	fb0c 1313 	mls	r3, ip, r3, r1
 801b044:	b2d9      	uxtb	r1, r3
 801b046:	4288      	cmp	r0, r1
 801b048:	d09b      	beq.n	801af82 <uxr_read_framed_msg+0x352>
 801b04a:	3202      	adds	r2, #2
 801b04c:	4423      	add	r3, r4
 801b04e:	0850      	lsrs	r0, r2, #1
 801b050:	789b      	ldrb	r3, [r3, #2]
 801b052:	fba5 1000 	umull	r1, r0, r5, r0
 801b056:	2b7e      	cmp	r3, #126	; 0x7e
 801b058:	ea4f 0090 	mov.w	r0, r0, lsr #2
 801b05c:	fb0c 2210 	mls	r2, ip, r0, r2
 801b060:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 801b064:	d077      	beq.n	801b156 <uxr_read_framed_msg+0x526>
 801b066:	f083 0120 	eor.w	r1, r3, #32
 801b06a:	e6ea      	b.n	801ae42 <uxr_read_framed_msg+0x212>
 801b06c:	f103 0c01 	add.w	ip, r3, #1
 801b070:	202a      	movs	r0, #42	; 0x2a
 801b072:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801b076:	fba5 e202 	umull	lr, r2, r5, r2
 801b07a:	0892      	lsrs	r2, r2, #2
 801b07c:	fb00 c212 	mls	r2, r0, r2, ip
 801b080:	fa5f fc82 	uxtb.w	ip, r2
 801b084:	4561      	cmp	r1, ip
 801b086:	f43f af57 	beq.w	801af38 <uxr_read_framed_msg+0x308>
 801b08a:	3302      	adds	r3, #2
 801b08c:	4422      	add	r2, r4
 801b08e:	7891      	ldrb	r1, [r2, #2]
 801b090:	085a      	lsrs	r2, r3, #1
 801b092:	fba5 c202 	umull	ip, r2, r5, r2
 801b096:	297e      	cmp	r1, #126	; 0x7e
 801b098:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 801b09c:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801b0a0:	fb00 3312 	mls	r3, r0, r2, r3
 801b0a4:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801b0a8:	f43f af46 	beq.w	801af38 <uxr_read_framed_msg+0x308>
 801b0ac:	f081 0120 	eor.w	r1, r1, #32
 801b0b0:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 801b0b4:	e6ea      	b.n	801ae8c <uxr_read_framed_msg+0x25c>
 801b0b6:	1c59      	adds	r1, r3, #1
 801b0b8:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 801b0bc:	084a      	lsrs	r2, r1, #1
 801b0be:	fba5 e202 	umull	lr, r2, r5, r2
 801b0c2:	0892      	lsrs	r2, r2, #2
 801b0c4:	fb0c 1212 	mls	r2, ip, r2, r1
 801b0c8:	b2d1      	uxtb	r1, r2
 801b0ca:	4288      	cmp	r0, r1
 801b0cc:	f43f af21 	beq.w	801af12 <uxr_read_framed_msg+0x2e2>
 801b0d0:	3302      	adds	r3, #2
 801b0d2:	4422      	add	r2, r4
 801b0d4:	7891      	ldrb	r1, [r2, #2]
 801b0d6:	085a      	lsrs	r2, r3, #1
 801b0d8:	fba5 0202 	umull	r0, r2, r5, r2
 801b0dc:	297e      	cmp	r1, #126	; 0x7e
 801b0de:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801b0e2:	fb0c 3312 	mls	r3, ip, r2, r3
 801b0e6:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801b0ea:	d030      	beq.n	801b14e <uxr_read_framed_msg+0x51e>
 801b0ec:	f081 0120 	eor.w	r1, r1, #32
 801b0f0:	e65d      	b.n	801adae <uxr_read_framed_msg+0x17e>
 801b0f2:	1c59      	adds	r1, r3, #1
 801b0f4:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 801b0f8:	084a      	lsrs	r2, r1, #1
 801b0fa:	fba5 e202 	umull	lr, r2, r5, r2
 801b0fe:	0892      	lsrs	r2, r2, #2
 801b100:	fb0c 1212 	mls	r2, ip, r2, r1
 801b104:	b2d1      	uxtb	r1, r2
 801b106:	4288      	cmp	r0, r1
 801b108:	f43f af12 	beq.w	801af30 <uxr_read_framed_msg+0x300>
 801b10c:	3302      	adds	r3, #2
 801b10e:	4422      	add	r2, r4
 801b110:	7891      	ldrb	r1, [r2, #2]
 801b112:	085a      	lsrs	r2, r3, #1
 801b114:	fba5 0202 	umull	r0, r2, r5, r2
 801b118:	297e      	cmp	r1, #126	; 0x7e
 801b11a:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801b11e:	fb0c 3312 	mls	r3, ip, r2, r3
 801b122:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801b126:	d002      	beq.n	801b12e <uxr_read_framed_msg+0x4fe>
 801b128:	f081 0120 	eor.w	r1, r1, #32
 801b12c:	e66a      	b.n	801ae04 <uxr_read_framed_msg+0x1d4>
 801b12e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b130:	9300      	str	r3, [sp, #0]
 801b132:	2302      	movs	r3, #2
 801b134:	9301      	str	r3, [sp, #4]
 801b136:	464a      	mov	r2, r9
 801b138:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b13a:	4641      	mov	r1, r8
 801b13c:	4620      	mov	r0, r4
 801b13e:	f7ff fce3 	bl	801ab08 <uxr_framing_read_transport>
 801b142:	2800      	cmp	r0, #0
 801b144:	f47f aef2 	bne.w	801af2c <uxr_read_framed_msg+0x2fc>
 801b148:	2301      	movs	r3, #1
 801b14a:	7023      	strb	r3, [r4, #0]
 801b14c:	e581      	b.n	801ac52 <uxr_read_framed_msg+0x22>
 801b14e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b150:	9300      	str	r3, [sp, #0]
 801b152:	2301      	movs	r3, #1
 801b154:	e7ee      	b.n	801b134 <uxr_read_framed_msg+0x504>
 801b156:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b158:	9300      	str	r3, [sp, #0]
 801b15a:	2303      	movs	r3, #3
 801b15c:	e7ea      	b.n	801b134 <uxr_read_framed_msg+0x504>
 801b15e:	bf00      	nop

0801b160 <rcl_get_automatic_discovery_range>:
 801b160:	b530      	push	{r4, r5, lr}
 801b162:	2300      	movs	r3, #0
 801b164:	b083      	sub	sp, #12
 801b166:	9301      	str	r3, [sp, #4]
 801b168:	b1c0      	cbz	r0, 801b19c <rcl_get_automatic_discovery_range+0x3c>
 801b16a:	4604      	mov	r4, r0
 801b16c:	a901      	add	r1, sp, #4
 801b16e:	4818      	ldr	r0, [pc, #96]	; (801b1d0 <rcl_get_automatic_discovery_range+0x70>)
 801b170:	f7fc fbf6 	bl	8017960 <rcutils_get_env>
 801b174:	b110      	cbz	r0, 801b17c <rcl_get_automatic_discovery_range+0x1c>
 801b176:	2001      	movs	r0, #1
 801b178:	b003      	add	sp, #12
 801b17a:	bd30      	pop	{r4, r5, pc}
 801b17c:	9d01      	ldr	r5, [sp, #4]
 801b17e:	782b      	ldrb	r3, [r5, #0]
 801b180:	b13b      	cbz	r3, 801b192 <rcl_get_automatic_discovery_range+0x32>
 801b182:	4914      	ldr	r1, [pc, #80]	; (801b1d4 <rcl_get_automatic_discovery_range+0x74>)
 801b184:	4628      	mov	r0, r5
 801b186:	f7e5 f85b 	bl	8000240 <strcmp>
 801b18a:	b950      	cbnz	r0, 801b1a2 <rcl_get_automatic_discovery_range+0x42>
 801b18c:	2301      	movs	r3, #1
 801b18e:	7023      	strb	r3, [r4, #0]
 801b190:	e7f2      	b.n	801b178 <rcl_get_automatic_discovery_range+0x18>
 801b192:	2303      	movs	r3, #3
 801b194:	2000      	movs	r0, #0
 801b196:	7023      	strb	r3, [r4, #0]
 801b198:	b003      	add	sp, #12
 801b19a:	bd30      	pop	{r4, r5, pc}
 801b19c:	200b      	movs	r0, #11
 801b19e:	b003      	add	sp, #12
 801b1a0:	bd30      	pop	{r4, r5, pc}
 801b1a2:	490d      	ldr	r1, [pc, #52]	; (801b1d8 <rcl_get_automatic_discovery_range+0x78>)
 801b1a4:	4628      	mov	r0, r5
 801b1a6:	f7e5 f84b 	bl	8000240 <strcmp>
 801b1aa:	b168      	cbz	r0, 801b1c8 <rcl_get_automatic_discovery_range+0x68>
 801b1ac:	490b      	ldr	r1, [pc, #44]	; (801b1dc <rcl_get_automatic_discovery_range+0x7c>)
 801b1ae:	4628      	mov	r0, r5
 801b1b0:	f7e5 f846 	bl	8000240 <strcmp>
 801b1b4:	2800      	cmp	r0, #0
 801b1b6:	d0ec      	beq.n	801b192 <rcl_get_automatic_discovery_range+0x32>
 801b1b8:	4909      	ldr	r1, [pc, #36]	; (801b1e0 <rcl_get_automatic_discovery_range+0x80>)
 801b1ba:	4628      	mov	r0, r5
 801b1bc:	f7e5 f840 	bl	8000240 <strcmp>
 801b1c0:	b910      	cbnz	r0, 801b1c8 <rcl_get_automatic_discovery_range+0x68>
 801b1c2:	2304      	movs	r3, #4
 801b1c4:	7023      	strb	r3, [r4, #0]
 801b1c6:	e7d7      	b.n	801b178 <rcl_get_automatic_discovery_range+0x18>
 801b1c8:	2302      	movs	r3, #2
 801b1ca:	2000      	movs	r0, #0
 801b1cc:	7023      	strb	r3, [r4, #0]
 801b1ce:	e7d3      	b.n	801b178 <rcl_get_automatic_discovery_range+0x18>
 801b1d0:	0801f30c 	.word	0x0801f30c
 801b1d4:	0801f32c 	.word	0x0801f32c
 801b1d8:	0801f330 	.word	0x0801f330
 801b1dc:	0801f33c 	.word	0x0801f33c
 801b1e0:	0801f344 	.word	0x0801f344

0801b1e4 <rcl_automatic_discovery_range_to_string>:
 801b1e4:	2804      	cmp	r0, #4
 801b1e6:	d803      	bhi.n	801b1f0 <rcl_automatic_discovery_range_to_string+0xc>
 801b1e8:	4b02      	ldr	r3, [pc, #8]	; (801b1f4 <rcl_automatic_discovery_range_to_string+0x10>)
 801b1ea:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801b1ee:	4770      	bx	lr
 801b1f0:	2000      	movs	r0, #0
 801b1f2:	4770      	bx	lr
 801b1f4:	0801f434 	.word	0x0801f434

0801b1f8 <rcl_get_discovery_static_peers>:
 801b1f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b1fc:	2300      	movs	r3, #0
 801b1fe:	b08e      	sub	sp, #56	; 0x38
 801b200:	9306      	str	r3, [sp, #24]
 801b202:	2900      	cmp	r1, #0
 801b204:	d04b      	beq.n	801b29e <rcl_get_discovery_static_peers+0xa6>
 801b206:	4605      	mov	r5, r0
 801b208:	2800      	cmp	r0, #0
 801b20a:	d048      	beq.n	801b29e <rcl_get_discovery_static_peers+0xa6>
 801b20c:	460c      	mov	r4, r1
 801b20e:	482c      	ldr	r0, [pc, #176]	; (801b2c0 <rcl_get_discovery_static_peers+0xc8>)
 801b210:	a906      	add	r1, sp, #24
 801b212:	f7fc fba5 	bl	8017960 <rcutils_get_env>
 801b216:	b118      	cbz	r0, 801b220 <rcl_get_discovery_static_peers+0x28>
 801b218:	2001      	movs	r0, #1
 801b21a:	b00e      	add	sp, #56	; 0x38
 801b21c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b220:	9b06      	ldr	r3, [sp, #24]
 801b222:	2b00      	cmp	r3, #0
 801b224:	d0f8      	beq.n	801b218 <rcl_get_discovery_static_peers+0x20>
 801b226:	af07      	add	r7, sp, #28
 801b228:	4638      	mov	r0, r7
 801b22a:	f000 fc73 	bl	801bb14 <rcutils_get_zero_initialized_string_array>
 801b22e:	f104 0308 	add.w	r3, r4, #8
 801b232:	9703      	str	r7, [sp, #12]
 801b234:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801b238:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801b23c:	213b      	movs	r1, #59	; 0x3b
 801b23e:	9806      	ldr	r0, [sp, #24]
 801b240:	e894 000c 	ldmia.w	r4, {r2, r3}
 801b244:	f000 fba8 	bl	801b998 <rcutils_split>
 801b248:	2800      	cmp	r0, #0
 801b24a:	d1e5      	bne.n	801b218 <rcl_get_discovery_static_peers+0x20>
 801b24c:	4622      	mov	r2, r4
 801b24e:	9907      	ldr	r1, [sp, #28]
 801b250:	4628      	mov	r0, r5
 801b252:	f000 fcaf 	bl	801bbb4 <rmw_discovery_options_init>
 801b256:	4604      	mov	r4, r0
 801b258:	bb78      	cbnz	r0, 801b2ba <rcl_get_discovery_static_peers+0xc2>
 801b25a:	9e07      	ldr	r6, [sp, #28]
 801b25c:	b336      	cbz	r6, 801b2ac <rcl_get_discovery_static_peers+0xb4>
 801b25e:	f8dd a020 	ldr.w	sl, [sp, #32]
 801b262:	4680      	mov	r8, r0
 801b264:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
 801b268:	ea4f 2904 	mov.w	r9, r4, lsl #8
 801b26c:	4608      	mov	r0, r1
 801b26e:	9105      	str	r1, [sp, #20]
 801b270:	f7e5 f846 	bl	8000300 <strlen>
 801b274:	28ff      	cmp	r0, #255	; 0xff
 801b276:	9905      	ldr	r1, [sp, #20]
 801b278:	d815      	bhi.n	801b2a6 <rcl_get_discovery_static_peers+0xae>
 801b27a:	6868      	ldr	r0, [r5, #4]
 801b27c:	f44f 7280 	mov.w	r2, #256	; 0x100
 801b280:	eb00 2004 	add.w	r0, r0, r4, lsl #8
 801b284:	3401      	adds	r4, #1
 801b286:	f001 fa84 	bl	801c792 <strncpy>
 801b28a:	686b      	ldr	r3, [r5, #4]
 801b28c:	9e07      	ldr	r6, [sp, #28]
 801b28e:	444b      	add	r3, r9
 801b290:	42b4      	cmp	r4, r6
 801b292:	f883 80ff 	strb.w	r8, [r3, #255]	; 0xff
 801b296:	d209      	bcs.n	801b2ac <rcl_get_discovery_static_peers+0xb4>
 801b298:	f8dd a020 	ldr.w	sl, [sp, #32]
 801b29c:	e7e2      	b.n	801b264 <rcl_get_discovery_static_peers+0x6c>
 801b29e:	200b      	movs	r0, #11
 801b2a0:	b00e      	add	sp, #56	; 0x38
 801b2a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b2a6:	3401      	adds	r4, #1
 801b2a8:	42b4      	cmp	r4, r6
 801b2aa:	d3db      	bcc.n	801b264 <rcl_get_discovery_static_peers+0x6c>
 801b2ac:	4638      	mov	r0, r7
 801b2ae:	f000 fc4f 	bl	801bb50 <rcutils_string_array_fini>
 801b2b2:	3800      	subs	r0, #0
 801b2b4:	bf18      	it	ne
 801b2b6:	2001      	movne	r0, #1
 801b2b8:	e7af      	b.n	801b21a <rcl_get_discovery_static_peers+0x22>
 801b2ba:	f7f9 f94f 	bl	801455c <rcl_convert_rmw_ret_to_rcl_ret>
 801b2be:	e7ac      	b.n	801b21a <rcl_get_discovery_static_peers+0x22>
 801b2c0:	0801f354 	.word	0x0801f354

0801b2c4 <rcl_get_default_domain_id>:
 801b2c4:	b530      	push	{r4, r5, lr}
 801b2c6:	2300      	movs	r3, #0
 801b2c8:	b083      	sub	sp, #12
 801b2ca:	9300      	str	r3, [sp, #0]
 801b2cc:	b1d0      	cbz	r0, 801b304 <rcl_get_default_domain_id+0x40>
 801b2ce:	4604      	mov	r4, r0
 801b2d0:	4669      	mov	r1, sp
 801b2d2:	4815      	ldr	r0, [pc, #84]	; (801b328 <rcl_get_default_domain_id+0x64>)
 801b2d4:	f7fc fb44 	bl	8017960 <rcutils_get_env>
 801b2d8:	4602      	mov	r2, r0
 801b2da:	b110      	cbz	r0, 801b2e2 <rcl_get_default_domain_id+0x1e>
 801b2dc:	2001      	movs	r0, #1
 801b2de:	b003      	add	sp, #12
 801b2e0:	bd30      	pop	{r4, r5, pc}
 801b2e2:	9b00      	ldr	r3, [sp, #0]
 801b2e4:	b18b      	cbz	r3, 801b30a <rcl_get_default_domain_id+0x46>
 801b2e6:	7818      	ldrb	r0, [r3, #0]
 801b2e8:	2800      	cmp	r0, #0
 801b2ea:	d0f8      	beq.n	801b2de <rcl_get_default_domain_id+0x1a>
 801b2ec:	a901      	add	r1, sp, #4
 801b2ee:	4618      	mov	r0, r3
 801b2f0:	9201      	str	r2, [sp, #4]
 801b2f2:	f001 f881 	bl	801c3f8 <strtoul>
 801b2f6:	4605      	mov	r5, r0
 801b2f8:	b150      	cbz	r0, 801b310 <rcl_get_default_domain_id+0x4c>
 801b2fa:	1c43      	adds	r3, r0, #1
 801b2fc:	d00d      	beq.n	801b31a <rcl_get_default_domain_id+0x56>
 801b2fe:	2000      	movs	r0, #0
 801b300:	6025      	str	r5, [r4, #0]
 801b302:	e7ec      	b.n	801b2de <rcl_get_default_domain_id+0x1a>
 801b304:	200b      	movs	r0, #11
 801b306:	b003      	add	sp, #12
 801b308:	bd30      	pop	{r4, r5, pc}
 801b30a:	4618      	mov	r0, r3
 801b30c:	b003      	add	sp, #12
 801b30e:	bd30      	pop	{r4, r5, pc}
 801b310:	9b01      	ldr	r3, [sp, #4]
 801b312:	781b      	ldrb	r3, [r3, #0]
 801b314:	2b00      	cmp	r3, #0
 801b316:	d0f2      	beq.n	801b2fe <rcl_get_default_domain_id+0x3a>
 801b318:	e7e0      	b.n	801b2dc <rcl_get_default_domain_id+0x18>
 801b31a:	f001 fb0f 	bl	801c93c <__errno>
 801b31e:	6803      	ldr	r3, [r0, #0]
 801b320:	2b22      	cmp	r3, #34	; 0x22
 801b322:	d1ec      	bne.n	801b2fe <rcl_get_default_domain_id+0x3a>
 801b324:	e7da      	b.n	801b2dc <rcl_get_default_domain_id+0x18>
 801b326:	bf00      	nop
 801b328:	0801f448 	.word	0x0801f448

0801b32c <rcl_expand_topic_name>:
 801b32c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b330:	b08d      	sub	sp, #52	; 0x34
 801b332:	4698      	mov	r8, r3
 801b334:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801b336:	9207      	str	r2, [sp, #28]
 801b338:	2b00      	cmp	r3, #0
 801b33a:	bf18      	it	ne
 801b33c:	f1b8 0f00 	cmpne.w	r8, #0
 801b340:	bf0c      	ite	eq
 801b342:	2301      	moveq	r3, #1
 801b344:	2300      	movne	r3, #0
 801b346:	2a00      	cmp	r2, #0
 801b348:	bf08      	it	eq
 801b34a:	f043 0301 	orreq.w	r3, r3, #1
 801b34e:	2900      	cmp	r1, #0
 801b350:	bf08      	it	eq
 801b352:	f043 0301 	orreq.w	r3, r3, #1
 801b356:	2b00      	cmp	r3, #0
 801b358:	d13d      	bne.n	801b3d6 <rcl_expand_topic_name+0xaa>
 801b35a:	fab0 f280 	clz	r2, r0
 801b35e:	4604      	mov	r4, r0
 801b360:	0952      	lsrs	r2, r2, #5
 801b362:	2800      	cmp	r0, #0
 801b364:	d037      	beq.n	801b3d6 <rcl_expand_topic_name+0xaa>
 801b366:	460f      	mov	r7, r1
 801b368:	a90b      	add	r1, sp, #44	; 0x2c
 801b36a:	f000 fa51 	bl	801b810 <rcl_validate_topic_name>
 801b36e:	4605      	mov	r5, r0
 801b370:	bb68      	cbnz	r0, 801b3ce <rcl_expand_topic_name+0xa2>
 801b372:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b374:	2b00      	cmp	r3, #0
 801b376:	d137      	bne.n	801b3e8 <rcl_expand_topic_name+0xbc>
 801b378:	4602      	mov	r2, r0
 801b37a:	a90b      	add	r1, sp, #44	; 0x2c
 801b37c:	4638      	mov	r0, r7
 801b37e:	f7fc ff69 	bl	8018254 <rmw_validate_node_name>
 801b382:	bb68      	cbnz	r0, 801b3e0 <rcl_expand_topic_name+0xb4>
 801b384:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b386:	2b00      	cmp	r3, #0
 801b388:	d133      	bne.n	801b3f2 <rcl_expand_topic_name+0xc6>
 801b38a:	462a      	mov	r2, r5
 801b38c:	a90b      	add	r1, sp, #44	; 0x2c
 801b38e:	9807      	ldr	r0, [sp, #28]
 801b390:	f7fc ff42 	bl	8018218 <rmw_validate_namespace>
 801b394:	bb20      	cbnz	r0, 801b3e0 <rcl_expand_topic_name+0xb4>
 801b396:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801b398:	2d00      	cmp	r5, #0
 801b39a:	f040 80a2 	bne.w	801b4e2 <rcl_expand_topic_name+0x1b6>
 801b39e:	217b      	movs	r1, #123	; 0x7b
 801b3a0:	4620      	mov	r0, r4
 801b3a2:	f001 f9d7 	bl	801c754 <strchr>
 801b3a6:	7823      	ldrb	r3, [r4, #0]
 801b3a8:	4681      	mov	r9, r0
 801b3aa:	bb20      	cbnz	r0, 801b3f6 <rcl_expand_topic_name+0xca>
 801b3ac:	2b2f      	cmp	r3, #47	; 0x2f
 801b3ae:	d122      	bne.n	801b3f6 <rcl_expand_topic_name+0xca>
 801b3b0:	ab19      	add	r3, sp, #100	; 0x64
 801b3b2:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b3b6:	ab16      	add	r3, sp, #88	; 0x58
 801b3b8:	e88d 0003 	stmia.w	sp, {r0, r1}
 801b3bc:	4620      	mov	r0, r4
 801b3be:	cb0e      	ldmia	r3, {r1, r2, r3}
 801b3c0:	f7fc fc30 	bl	8017c24 <rcutils_strdup>
 801b3c4:	2800      	cmp	r0, #0
 801b3c6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801b3c8:	bf08      	it	eq
 801b3ca:	250a      	moveq	r5, #10
 801b3cc:	6018      	str	r0, [r3, #0]
 801b3ce:	4628      	mov	r0, r5
 801b3d0:	b00d      	add	sp, #52	; 0x34
 801b3d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b3d6:	250b      	movs	r5, #11
 801b3d8:	4628      	mov	r0, r5
 801b3da:	b00d      	add	sp, #52	; 0x34
 801b3dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b3e0:	f7f9 f8bc 	bl	801455c <rcl_convert_rmw_ret_to_rcl_ret>
 801b3e4:	4605      	mov	r5, r0
 801b3e6:	e7f2      	b.n	801b3ce <rcl_expand_topic_name+0xa2>
 801b3e8:	2567      	movs	r5, #103	; 0x67
 801b3ea:	4628      	mov	r0, r5
 801b3ec:	b00d      	add	sp, #52	; 0x34
 801b3ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b3f2:	25c9      	movs	r5, #201	; 0xc9
 801b3f4:	e7eb      	b.n	801b3ce <rcl_expand_topic_name+0xa2>
 801b3f6:	2b7e      	cmp	r3, #126	; 0x7e
 801b3f8:	d075      	beq.n	801b4e6 <rcl_expand_topic_name+0x1ba>
 801b3fa:	f1b9 0f00 	cmp.w	r9, #0
 801b3fe:	f000 80c2 	beq.w	801b586 <rcl_expand_topic_name+0x25a>
 801b402:	2300      	movs	r3, #0
 801b404:	46a2      	mov	sl, r4
 801b406:	461e      	mov	r6, r3
 801b408:	9508      	str	r5, [sp, #32]
 801b40a:	4655      	mov	r5, sl
 801b40c:	9409      	str	r4, [sp, #36]	; 0x24
 801b40e:	46b2      	mov	sl, r6
 801b410:	464c      	mov	r4, r9
 801b412:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801b416:	2c00      	cmp	r4, #0
 801b418:	f000 80ae 	beq.w	801b578 <rcl_expand_topic_name+0x24c>
 801b41c:	217d      	movs	r1, #125	; 0x7d
 801b41e:	4628      	mov	r0, r5
 801b420:	f001 f998 	bl	801c754 <strchr>
 801b424:	eba0 0904 	sub.w	r9, r0, r4
 801b428:	4621      	mov	r1, r4
 801b42a:	4869      	ldr	r0, [pc, #420]	; (801b5d0 <rcl_expand_topic_name+0x2a4>)
 801b42c:	f109 0601 	add.w	r6, r9, #1
 801b430:	4632      	mov	r2, r6
 801b432:	f001 f99c 	bl	801c76e <strncmp>
 801b436:	2800      	cmp	r0, #0
 801b438:	d051      	beq.n	801b4de <rcl_expand_topic_name+0x1b2>
 801b43a:	4632      	mov	r2, r6
 801b43c:	4621      	mov	r1, r4
 801b43e:	4865      	ldr	r0, [pc, #404]	; (801b5d4 <rcl_expand_topic_name+0x2a8>)
 801b440:	f001 f995 	bl	801c76e <strncmp>
 801b444:	b128      	cbz	r0, 801b452 <rcl_expand_topic_name+0x126>
 801b446:	4632      	mov	r2, r6
 801b448:	4621      	mov	r1, r4
 801b44a:	4863      	ldr	r0, [pc, #396]	; (801b5d8 <rcl_expand_topic_name+0x2ac>)
 801b44c:	f001 f98f 	bl	801c76e <strncmp>
 801b450:	bb38      	cbnz	r0, 801b4a2 <rcl_expand_topic_name+0x176>
 801b452:	46d9      	mov	r9, fp
 801b454:	ab18      	add	r3, sp, #96	; 0x60
 801b456:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801b45a:	ab16      	add	r3, sp, #88	; 0x58
 801b45c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801b460:	4620      	mov	r0, r4
 801b462:	4631      	mov	r1, r6
 801b464:	cb0c      	ldmia	r3, {r2, r3}
 801b466:	f7fc fc03 	bl	8017c70 <rcutils_strndup>
 801b46a:	4604      	mov	r4, r0
 801b46c:	2800      	cmp	r0, #0
 801b46e:	f000 80a3 	beq.w	801b5b8 <rcl_expand_topic_name+0x28c>
 801b472:	464a      	mov	r2, r9
 801b474:	4628      	mov	r0, r5
 801b476:	ab16      	add	r3, sp, #88	; 0x58
 801b478:	4621      	mov	r1, r4
 801b47a:	f7fc fad3 	bl	8017a24 <rcutils_repl_str>
 801b47e:	991a      	ldr	r1, [sp, #104]	; 0x68
 801b480:	4605      	mov	r5, r0
 801b482:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b484:	4620      	mov	r0, r4
 801b486:	4798      	blx	r3
 801b488:	4650      	mov	r0, sl
 801b48a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b48c:	991a      	ldr	r1, [sp, #104]	; 0x68
 801b48e:	4798      	blx	r3
 801b490:	2d00      	cmp	r5, #0
 801b492:	d06c      	beq.n	801b56e <rcl_expand_topic_name+0x242>
 801b494:	217b      	movs	r1, #123	; 0x7b
 801b496:	4628      	mov	r0, r5
 801b498:	f001 f95c 	bl	801c754 <strchr>
 801b49c:	46aa      	mov	sl, r5
 801b49e:	4604      	mov	r4, r0
 801b4a0:	e7b9      	b.n	801b416 <rcl_expand_topic_name+0xea>
 801b4a2:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 801b4a6:	1c61      	adds	r1, r4, #1
 801b4a8:	4640      	mov	r0, r8
 801b4aa:	f7fc fcdd 	bl	8017e68 <rcutils_string_map_getn>
 801b4ae:	4681      	mov	r9, r0
 801b4b0:	2800      	cmp	r0, #0
 801b4b2:	d1cf      	bne.n	801b454 <rcl_expand_topic_name+0x128>
 801b4b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801b4b6:	aa18      	add	r2, sp, #96	; 0x60
 801b4b8:	2569      	movs	r5, #105	; 0x69
 801b4ba:	6018      	str	r0, [r3, #0]
 801b4bc:	ab16      	add	r3, sp, #88	; 0x58
 801b4be:	ca07      	ldmia	r2, {r0, r1, r2}
 801b4c0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801b4c4:	4631      	mov	r1, r6
 801b4c6:	4620      	mov	r0, r4
 801b4c8:	cb0c      	ldmia	r3, {r2, r3}
 801b4ca:	f7fc fbd1 	bl	8017c70 <rcutils_strndup>
 801b4ce:	991a      	ldr	r1, [sp, #104]	; 0x68
 801b4d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b4d2:	4798      	blx	r3
 801b4d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b4d6:	991a      	ldr	r1, [sp, #104]	; 0x68
 801b4d8:	4650      	mov	r0, sl
 801b4da:	4798      	blx	r3
 801b4dc:	e777      	b.n	801b3ce <rcl_expand_topic_name+0xa2>
 801b4de:	46b9      	mov	r9, r7
 801b4e0:	e7b8      	b.n	801b454 <rcl_expand_topic_name+0x128>
 801b4e2:	25ca      	movs	r5, #202	; 0xca
 801b4e4:	e773      	b.n	801b3ce <rcl_expand_topic_name+0xa2>
 801b4e6:	9e07      	ldr	r6, [sp, #28]
 801b4e8:	4630      	mov	r0, r6
 801b4ea:	f7e4 ff09 	bl	8000300 <strlen>
 801b4ee:	4a3b      	ldr	r2, [pc, #236]	; (801b5dc <rcl_expand_topic_name+0x2b0>)
 801b4f0:	4b3b      	ldr	r3, [pc, #236]	; (801b5e0 <rcl_expand_topic_name+0x2b4>)
 801b4f2:	9603      	str	r6, [sp, #12]
 801b4f4:	2801      	cmp	r0, #1
 801b4f6:	bf18      	it	ne
 801b4f8:	4613      	movne	r3, r2
 801b4fa:	9704      	str	r7, [sp, #16]
 801b4fc:	9302      	str	r3, [sp, #8]
 801b4fe:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801b500:	9300      	str	r3, [sp, #0]
 801b502:	1c63      	adds	r3, r4, #1
 801b504:	9305      	str	r3, [sp, #20]
 801b506:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801b50a:	9301      	str	r3, [sp, #4]
 801b50c:	ab16      	add	r3, sp, #88	; 0x58
 801b50e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801b510:	f7fc fa4e 	bl	80179b0 <rcutils_format_string_limit>
 801b514:	4606      	mov	r6, r0
 801b516:	b350      	cbz	r0, 801b56e <rcl_expand_topic_name+0x242>
 801b518:	f1b9 0f00 	cmp.w	r9, #0
 801b51c:	d005      	beq.n	801b52a <rcl_expand_topic_name+0x1fe>
 801b51e:	217b      	movs	r1, #123	; 0x7b
 801b520:	46b2      	mov	sl, r6
 801b522:	f001 f917 	bl	801c754 <strchr>
 801b526:	4681      	mov	r9, r0
 801b528:	e76e      	b.n	801b408 <rcl_expand_topic_name+0xdc>
 801b52a:	7833      	ldrb	r3, [r6, #0]
 801b52c:	2b2f      	cmp	r3, #47	; 0x2f
 801b52e:	d01b      	beq.n	801b568 <rcl_expand_topic_name+0x23c>
 801b530:	9c07      	ldr	r4, [sp, #28]
 801b532:	4620      	mov	r0, r4
 801b534:	f7e4 fee4 	bl	8000300 <strlen>
 801b538:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801b53c:	4a29      	ldr	r2, [pc, #164]	; (801b5e4 <rcl_expand_topic_name+0x2b8>)
 801b53e:	9301      	str	r3, [sp, #4]
 801b540:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801b542:	9604      	str	r6, [sp, #16]
 801b544:	9300      	str	r3, [sp, #0]
 801b546:	4b28      	ldr	r3, [pc, #160]	; (801b5e8 <rcl_expand_topic_name+0x2bc>)
 801b548:	9403      	str	r4, [sp, #12]
 801b54a:	2801      	cmp	r0, #1
 801b54c:	bf18      	it	ne
 801b54e:	4613      	movne	r3, r2
 801b550:	9302      	str	r3, [sp, #8]
 801b552:	ab16      	add	r3, sp, #88	; 0x58
 801b554:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801b556:	f7fc fa2b 	bl	80179b0 <rcutils_format_string_limit>
 801b55a:	4603      	mov	r3, r0
 801b55c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801b55e:	4630      	mov	r0, r6
 801b560:	991a      	ldr	r1, [sp, #104]	; 0x68
 801b562:	461e      	mov	r6, r3
 801b564:	4790      	blx	r2
 801b566:	b116      	cbz	r6, 801b56e <rcl_expand_topic_name+0x242>
 801b568:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801b56a:	601e      	str	r6, [r3, #0]
 801b56c:	e72f      	b.n	801b3ce <rcl_expand_topic_name+0xa2>
 801b56e:	2300      	movs	r3, #0
 801b570:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801b572:	250a      	movs	r5, #10
 801b574:	6013      	str	r3, [r2, #0]
 801b576:	e72a      	b.n	801b3ce <rcl_expand_topic_name+0xa2>
 801b578:	4653      	mov	r3, sl
 801b57a:	4656      	mov	r6, sl
 801b57c:	e9dd 5408 	ldrd	r5, r4, [sp, #32]
 801b580:	2b00      	cmp	r3, #0
 801b582:	d1d2      	bne.n	801b52a <rcl_expand_topic_name+0x1fe>
 801b584:	7823      	ldrb	r3, [r4, #0]
 801b586:	2b2f      	cmp	r3, #47	; 0x2f
 801b588:	d01e      	beq.n	801b5c8 <rcl_expand_topic_name+0x29c>
 801b58a:	9e07      	ldr	r6, [sp, #28]
 801b58c:	4630      	mov	r0, r6
 801b58e:	f7e4 feb7 	bl	8000300 <strlen>
 801b592:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801b594:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801b598:	9603      	str	r6, [sp, #12]
 801b59a:	9404      	str	r4, [sp, #16]
 801b59c:	e9cd 2300 	strd	r2, r3, [sp]
 801b5a0:	4a10      	ldr	r2, [pc, #64]	; (801b5e4 <rcl_expand_topic_name+0x2b8>)
 801b5a2:	4b11      	ldr	r3, [pc, #68]	; (801b5e8 <rcl_expand_topic_name+0x2bc>)
 801b5a4:	2801      	cmp	r0, #1
 801b5a6:	bf18      	it	ne
 801b5a8:	4613      	movne	r3, r2
 801b5aa:	9302      	str	r3, [sp, #8]
 801b5ac:	ab16      	add	r3, sp, #88	; 0x58
 801b5ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801b5b0:	f7fc f9fe 	bl	80179b0 <rcutils_format_string_limit>
 801b5b4:	4606      	mov	r6, r0
 801b5b6:	e7d6      	b.n	801b566 <rcl_expand_topic_name+0x23a>
 801b5b8:	e9dd 121a 	ldrd	r1, r2, [sp, #104]	; 0x68
 801b5bc:	4650      	mov	r0, sl
 801b5be:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b5c0:	6014      	str	r4, [r2, #0]
 801b5c2:	250a      	movs	r5, #10
 801b5c4:	4798      	blx	r3
 801b5c6:	e702      	b.n	801b3ce <rcl_expand_topic_name+0xa2>
 801b5c8:	2300      	movs	r3, #0
 801b5ca:	461e      	mov	r6, r3
 801b5cc:	e7cc      	b.n	801b568 <rcl_expand_topic_name+0x23c>
 801b5ce:	bf00      	nop
 801b5d0:	0801f460 	.word	0x0801f460
 801b5d4:	0801f468 	.word	0x0801f468
 801b5d8:	0801f470 	.word	0x0801f470
 801b5dc:	0801f458 	.word	0x0801f458
 801b5e0:	0801e5b8 	.word	0x0801e5b8
 801b5e4:	0801ea58 	.word	0x0801ea58
 801b5e8:	0801e5c8 	.word	0x0801e5c8

0801b5ec <rcl_get_default_topic_name_substitutions>:
 801b5ec:	2800      	cmp	r0, #0
 801b5ee:	bf0c      	ite	eq
 801b5f0:	200b      	moveq	r0, #11
 801b5f2:	2000      	movne	r0, #0
 801b5f4:	4770      	bx	lr
 801b5f6:	bf00      	nop

0801b5f8 <rcl_get_zero_initialized_guard_condition>:
 801b5f8:	4a03      	ldr	r2, [pc, #12]	; (801b608 <rcl_get_zero_initialized_guard_condition+0x10>)
 801b5fa:	4603      	mov	r3, r0
 801b5fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b600:	e883 0003 	stmia.w	r3, {r0, r1}
 801b604:	4618      	mov	r0, r3
 801b606:	4770      	bx	lr
 801b608:	0801f47c 	.word	0x0801f47c

0801b60c <rcl_guard_condition_init>:
 801b60c:	b082      	sub	sp, #8
 801b60e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b610:	b087      	sub	sp, #28
 801b612:	4604      	mov	r4, r0
 801b614:	460d      	mov	r5, r1
 801b616:	f10d 0e30 	add.w	lr, sp, #48	; 0x30
 801b61a:	f10d 0c04 	add.w	ip, sp, #4
 801b61e:	e9ce 2300 	strd	r2, r3, [lr]
 801b622:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b626:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b62a:	f8de 3000 	ldr.w	r3, [lr]
 801b62e:	a801      	add	r0, sp, #4
 801b630:	f8cc 3000 	str.w	r3, [ip]
 801b634:	f7f2 fb10 	bl	800dc58 <rcutils_allocator_is_valid>
 801b638:	b354      	cbz	r4, 801b690 <rcl_guard_condition_init+0x84>
 801b63a:	f080 0301 	eor.w	r3, r0, #1
 801b63e:	b2db      	uxtb	r3, r3
 801b640:	bb33      	cbnz	r3, 801b690 <rcl_guard_condition_init+0x84>
 801b642:	6866      	ldr	r6, [r4, #4]
 801b644:	b9ee      	cbnz	r6, 801b682 <rcl_guard_condition_init+0x76>
 801b646:	b31d      	cbz	r5, 801b690 <rcl_guard_condition_init+0x84>
 801b648:	4628      	mov	r0, r5
 801b64a:	f7f8 ffa5 	bl	8014598 <rcl_context_is_valid>
 801b64e:	b308      	cbz	r0, 801b694 <rcl_guard_condition_init+0x88>
 801b650:	9b01      	ldr	r3, [sp, #4]
 801b652:	201c      	movs	r0, #28
 801b654:	9905      	ldr	r1, [sp, #20]
 801b656:	4798      	blx	r3
 801b658:	4607      	mov	r7, r0
 801b65a:	6060      	str	r0, [r4, #4]
 801b65c:	b310      	cbz	r0, 801b6a4 <rcl_guard_condition_init+0x98>
 801b65e:	6828      	ldr	r0, [r5, #0]
 801b660:	3028      	adds	r0, #40	; 0x28
 801b662:	f000 fbbb 	bl	801bddc <rmw_create_guard_condition>
 801b666:	6038      	str	r0, [r7, #0]
 801b668:	6860      	ldr	r0, [r4, #4]
 801b66a:	6807      	ldr	r7, [r0, #0]
 801b66c:	b1a7      	cbz	r7, 801b698 <rcl_guard_condition_init+0x8c>
 801b66e:	2301      	movs	r3, #1
 801b670:	ac01      	add	r4, sp, #4
 801b672:	f100 0708 	add.w	r7, r0, #8
 801b676:	7103      	strb	r3, [r0, #4]
 801b678:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b67a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801b67c:	6823      	ldr	r3, [r4, #0]
 801b67e:	603b      	str	r3, [r7, #0]
 801b680:	e000      	b.n	801b684 <rcl_guard_condition_init+0x78>
 801b682:	2664      	movs	r6, #100	; 0x64
 801b684:	4630      	mov	r0, r6
 801b686:	b007      	add	sp, #28
 801b688:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801b68c:	b002      	add	sp, #8
 801b68e:	4770      	bx	lr
 801b690:	260b      	movs	r6, #11
 801b692:	e7f7      	b.n	801b684 <rcl_guard_condition_init+0x78>
 801b694:	2665      	movs	r6, #101	; 0x65
 801b696:	e7f5      	b.n	801b684 <rcl_guard_condition_init+0x78>
 801b698:	9b02      	ldr	r3, [sp, #8]
 801b69a:	2601      	movs	r6, #1
 801b69c:	9905      	ldr	r1, [sp, #20]
 801b69e:	4798      	blx	r3
 801b6a0:	6067      	str	r7, [r4, #4]
 801b6a2:	e7ef      	b.n	801b684 <rcl_guard_condition_init+0x78>
 801b6a4:	260a      	movs	r6, #10
 801b6a6:	e7ed      	b.n	801b684 <rcl_guard_condition_init+0x78>

0801b6a8 <rcl_guard_condition_init_from_rmw>:
 801b6a8:	b082      	sub	sp, #8
 801b6aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b6ae:	b086      	sub	sp, #24
 801b6b0:	4604      	mov	r4, r0
 801b6b2:	460e      	mov	r6, r1
 801b6b4:	4615      	mov	r5, r2
 801b6b6:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801b6ba:	f10d 0e04 	add.w	lr, sp, #4
 801b6be:	f84c 3f04 	str.w	r3, [ip, #4]!
 801b6c2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801b6c6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801b6ca:	f8dc 3000 	ldr.w	r3, [ip]
 801b6ce:	a801      	add	r0, sp, #4
 801b6d0:	f8ce 3000 	str.w	r3, [lr]
 801b6d4:	f7f2 fac0 	bl	800dc58 <rcutils_allocator_is_valid>
 801b6d8:	f080 0301 	eor.w	r3, r0, #1
 801b6dc:	b2db      	uxtb	r3, r3
 801b6de:	bb3b      	cbnz	r3, 801b730 <rcl_guard_condition_init_from_rmw+0x88>
 801b6e0:	b334      	cbz	r4, 801b730 <rcl_guard_condition_init_from_rmw+0x88>
 801b6e2:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801b6e6:	f1b8 0f00 	cmp.w	r8, #0
 801b6ea:	d11a      	bne.n	801b722 <rcl_guard_condition_init_from_rmw+0x7a>
 801b6ec:	b305      	cbz	r5, 801b730 <rcl_guard_condition_init_from_rmw+0x88>
 801b6ee:	4628      	mov	r0, r5
 801b6f0:	f7f8 ff52 	bl	8014598 <rcl_context_is_valid>
 801b6f4:	b1f0      	cbz	r0, 801b734 <rcl_guard_condition_init_from_rmw+0x8c>
 801b6f6:	9b01      	ldr	r3, [sp, #4]
 801b6f8:	201c      	movs	r0, #28
 801b6fa:	9905      	ldr	r1, [sp, #20]
 801b6fc:	4798      	blx	r3
 801b6fe:	4607      	mov	r7, r0
 801b700:	6060      	str	r0, [r4, #4]
 801b702:	b320      	cbz	r0, 801b74e <rcl_guard_condition_init_from_rmw+0xa6>
 801b704:	b1c6      	cbz	r6, 801b738 <rcl_guard_condition_init_from_rmw+0x90>
 801b706:	6006      	str	r6, [r0, #0]
 801b708:	f880 8004 	strb.w	r8, [r0, #4]
 801b70c:	ac01      	add	r4, sp, #4
 801b70e:	f107 0c08 	add.w	ip, r7, #8
 801b712:	2500      	movs	r5, #0
 801b714:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b716:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b71a:	6823      	ldr	r3, [r4, #0]
 801b71c:	f8cc 3000 	str.w	r3, [ip]
 801b720:	e000      	b.n	801b724 <rcl_guard_condition_init_from_rmw+0x7c>
 801b722:	2564      	movs	r5, #100	; 0x64
 801b724:	4628      	mov	r0, r5
 801b726:	b006      	add	sp, #24
 801b728:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b72c:	b002      	add	sp, #8
 801b72e:	4770      	bx	lr
 801b730:	250b      	movs	r5, #11
 801b732:	e7f7      	b.n	801b724 <rcl_guard_condition_init_from_rmw+0x7c>
 801b734:	2565      	movs	r5, #101	; 0x65
 801b736:	e7f5      	b.n	801b724 <rcl_guard_condition_init_from_rmw+0x7c>
 801b738:	6828      	ldr	r0, [r5, #0]
 801b73a:	3028      	adds	r0, #40	; 0x28
 801b73c:	f000 fb4e 	bl	801bddc <rmw_create_guard_condition>
 801b740:	6038      	str	r0, [r7, #0]
 801b742:	6867      	ldr	r7, [r4, #4]
 801b744:	683e      	ldr	r6, [r7, #0]
 801b746:	b126      	cbz	r6, 801b752 <rcl_guard_condition_init_from_rmw+0xaa>
 801b748:	2301      	movs	r3, #1
 801b74a:	713b      	strb	r3, [r7, #4]
 801b74c:	e7de      	b.n	801b70c <rcl_guard_condition_init_from_rmw+0x64>
 801b74e:	250a      	movs	r5, #10
 801b750:	e7e8      	b.n	801b724 <rcl_guard_condition_init_from_rmw+0x7c>
 801b752:	9b02      	ldr	r3, [sp, #8]
 801b754:	4638      	mov	r0, r7
 801b756:	9905      	ldr	r1, [sp, #20]
 801b758:	2501      	movs	r5, #1
 801b75a:	4798      	blx	r3
 801b75c:	6066      	str	r6, [r4, #4]
 801b75e:	e7e1      	b.n	801b724 <rcl_guard_condition_init_from_rmw+0x7c>

0801b760 <rcl_guard_condition_fini>:
 801b760:	b570      	push	{r4, r5, r6, lr}
 801b762:	b082      	sub	sp, #8
 801b764:	b1f0      	cbz	r0, 801b7a4 <rcl_guard_condition_fini+0x44>
 801b766:	6843      	ldr	r3, [r0, #4]
 801b768:	4604      	mov	r4, r0
 801b76a:	b163      	cbz	r3, 801b786 <rcl_guard_condition_fini+0x26>
 801b76c:	6818      	ldr	r0, [r3, #0]
 801b76e:	68de      	ldr	r6, [r3, #12]
 801b770:	6999      	ldr	r1, [r3, #24]
 801b772:	b160      	cbz	r0, 801b78e <rcl_guard_condition_fini+0x2e>
 801b774:	791d      	ldrb	r5, [r3, #4]
 801b776:	b965      	cbnz	r5, 801b792 <rcl_guard_condition_fini+0x32>
 801b778:	4618      	mov	r0, r3
 801b77a:	47b0      	blx	r6
 801b77c:	2300      	movs	r3, #0
 801b77e:	4628      	mov	r0, r5
 801b780:	6063      	str	r3, [r4, #4]
 801b782:	b002      	add	sp, #8
 801b784:	bd70      	pop	{r4, r5, r6, pc}
 801b786:	461d      	mov	r5, r3
 801b788:	4628      	mov	r0, r5
 801b78a:	b002      	add	sp, #8
 801b78c:	bd70      	pop	{r4, r5, r6, pc}
 801b78e:	4605      	mov	r5, r0
 801b790:	e7f2      	b.n	801b778 <rcl_guard_condition_fini+0x18>
 801b792:	9101      	str	r1, [sp, #4]
 801b794:	f000 fb38 	bl	801be08 <rmw_destroy_guard_condition>
 801b798:	1e05      	subs	r5, r0, #0
 801b79a:	6863      	ldr	r3, [r4, #4]
 801b79c:	9901      	ldr	r1, [sp, #4]
 801b79e:	bf18      	it	ne
 801b7a0:	2501      	movne	r5, #1
 801b7a2:	e7e9      	b.n	801b778 <rcl_guard_condition_fini+0x18>
 801b7a4:	250b      	movs	r5, #11
 801b7a6:	4628      	mov	r0, r5
 801b7a8:	b002      	add	sp, #8
 801b7aa:	bd70      	pop	{r4, r5, r6, pc}

0801b7ac <rcl_guard_condition_get_default_options>:
 801b7ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b7ae:	b087      	sub	sp, #28
 801b7b0:	4606      	mov	r6, r0
 801b7b2:	4c0b      	ldr	r4, [pc, #44]	; (801b7e0 <rcl_guard_condition_get_default_options+0x34>)
 801b7b4:	4668      	mov	r0, sp
 801b7b6:	f7f2 fa41 	bl	800dc3c <rcutils_get_default_allocator>
 801b7ba:	46ee      	mov	lr, sp
 801b7bc:	46a4      	mov	ip, r4
 801b7be:	4625      	mov	r5, r4
 801b7c0:	4634      	mov	r4, r6
 801b7c2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b7c6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b7ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b7cc:	f8de 7000 	ldr.w	r7, [lr]
 801b7d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801b7d2:	4630      	mov	r0, r6
 801b7d4:	f8cc 7000 	str.w	r7, [ip]
 801b7d8:	6027      	str	r7, [r4, #0]
 801b7da:	b007      	add	sp, #28
 801b7dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b7de:	bf00      	nop
 801b7e0:	20010b70 	.word	0x20010b70

0801b7e4 <rcl_trigger_guard_condition>:
 801b7e4:	b148      	cbz	r0, 801b7fa <rcl_trigger_guard_condition+0x16>
 801b7e6:	b508      	push	{r3, lr}
 801b7e8:	6843      	ldr	r3, [r0, #4]
 801b7ea:	b143      	cbz	r3, 801b7fe <rcl_trigger_guard_condition+0x1a>
 801b7ec:	6818      	ldr	r0, [r3, #0]
 801b7ee:	f000 fb1f 	bl	801be30 <rmw_trigger_guard_condition>
 801b7f2:	3800      	subs	r0, #0
 801b7f4:	bf18      	it	ne
 801b7f6:	2001      	movne	r0, #1
 801b7f8:	bd08      	pop	{r3, pc}
 801b7fa:	200b      	movs	r0, #11
 801b7fc:	4770      	bx	lr
 801b7fe:	200b      	movs	r0, #11
 801b800:	bd08      	pop	{r3, pc}
 801b802:	bf00      	nop

0801b804 <rcl_guard_condition_get_rmw_handle>:
 801b804:	b110      	cbz	r0, 801b80c <rcl_guard_condition_get_rmw_handle+0x8>
 801b806:	6840      	ldr	r0, [r0, #4]
 801b808:	b100      	cbz	r0, 801b80c <rcl_guard_condition_get_rmw_handle+0x8>
 801b80a:	6800      	ldr	r0, [r0, #0]
 801b80c:	4770      	bx	lr
 801b80e:	bf00      	nop

0801b810 <rcl_validate_topic_name>:
 801b810:	2800      	cmp	r0, #0
 801b812:	f000 8089 	beq.w	801b928 <rcl_validate_topic_name+0x118>
 801b816:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b81a:	460e      	mov	r6, r1
 801b81c:	2900      	cmp	r1, #0
 801b81e:	f000 8085 	beq.w	801b92c <rcl_validate_topic_name+0x11c>
 801b822:	4604      	mov	r4, r0
 801b824:	4617      	mov	r7, r2
 801b826:	f7e4 fd6b 	bl	8000300 <strlen>
 801b82a:	b1b0      	cbz	r0, 801b85a <rcl_validate_topic_name+0x4a>
 801b82c:	f894 e000 	ldrb.w	lr, [r4]
 801b830:	f8df c160 	ldr.w	ip, [pc, #352]	; 801b994 <rcl_validate_topic_name+0x184>
 801b834:	f81c 300e 	ldrb.w	r3, [ip, lr]
 801b838:	f013 0304 	ands.w	r3, r3, #4
 801b83c:	d139      	bne.n	801b8b2 <rcl_validate_topic_name+0xa2>
 801b83e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 801b842:	f814 2008 	ldrb.w	r2, [r4, r8]
 801b846:	2a2f      	cmp	r2, #47	; 0x2f
 801b848:	d10f      	bne.n	801b86a <rcl_validate_topic_name+0x5a>
 801b84a:	2202      	movs	r2, #2
 801b84c:	6032      	str	r2, [r6, #0]
 801b84e:	b3a7      	cbz	r7, 801b8ba <rcl_validate_topic_name+0xaa>
 801b850:	4618      	mov	r0, r3
 801b852:	f8c7 8000 	str.w	r8, [r7]
 801b856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b85a:	2301      	movs	r3, #1
 801b85c:	6033      	str	r3, [r6, #0]
 801b85e:	b367      	cbz	r7, 801b8ba <rcl_validate_topic_name+0xaa>
 801b860:	2300      	movs	r3, #0
 801b862:	4618      	mov	r0, r3
 801b864:	603b      	str	r3, [r7, #0]
 801b866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b86a:	f104 3aff 	add.w	sl, r4, #4294967295	; 0xffffffff
 801b86e:	461d      	mov	r5, r3
 801b870:	4619      	mov	r1, r3
 801b872:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 801b876:	f1a2 0930 	sub.w	r9, r2, #48	; 0x30
 801b87a:	f1b9 0f09 	cmp.w	r9, #9
 801b87e:	d91f      	bls.n	801b8c0 <rcl_validate_topic_name+0xb0>
 801b880:	f022 0920 	bic.w	r9, r2, #32
 801b884:	f1a9 0941 	sub.w	r9, r9, #65	; 0x41
 801b888:	f1b9 0f19 	cmp.w	r9, #25
 801b88c:	d918      	bls.n	801b8c0 <rcl_validate_topic_name+0xb0>
 801b88e:	2a5f      	cmp	r2, #95	; 0x5f
 801b890:	d024      	beq.n	801b8dc <rcl_validate_topic_name+0xcc>
 801b892:	2a2f      	cmp	r2, #47	; 0x2f
 801b894:	d058      	beq.n	801b948 <rcl_validate_topic_name+0x138>
 801b896:	2a7e      	cmp	r2, #126	; 0x7e
 801b898:	d04a      	beq.n	801b930 <rcl_validate_topic_name+0x120>
 801b89a:	2a7b      	cmp	r2, #123	; 0x7b
 801b89c:	d05b      	beq.n	801b956 <rcl_validate_topic_name+0x146>
 801b89e:	2a7d      	cmp	r2, #125	; 0x7d
 801b8a0:	d169      	bne.n	801b976 <rcl_validate_topic_name+0x166>
 801b8a2:	2d00      	cmp	r5, #0
 801b8a4:	d15c      	bne.n	801b960 <rcl_validate_topic_name+0x150>
 801b8a6:	2305      	movs	r3, #5
 801b8a8:	6033      	str	r3, [r6, #0]
 801b8aa:	b137      	cbz	r7, 801b8ba <rcl_validate_topic_name+0xaa>
 801b8ac:	2000      	movs	r0, #0
 801b8ae:	6039      	str	r1, [r7, #0]
 801b8b0:	e7d9      	b.n	801b866 <rcl_validate_topic_name+0x56>
 801b8b2:	2304      	movs	r3, #4
 801b8b4:	6033      	str	r3, [r6, #0]
 801b8b6:	2f00      	cmp	r7, #0
 801b8b8:	d1d2      	bne.n	801b860 <rcl_validate_topic_name+0x50>
 801b8ba:	2000      	movs	r0, #0
 801b8bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b8c0:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801b8c4:	0752      	lsls	r2, r2, #29
 801b8c6:	d509      	bpl.n	801b8dc <rcl_validate_topic_name+0xcc>
 801b8c8:	2900      	cmp	r1, #0
 801b8ca:	bf0c      	ite	eq
 801b8cc:	2200      	moveq	r2, #0
 801b8ce:	f005 0201 	andne.w	r2, r5, #1
 801b8d2:	b11a      	cbz	r2, 801b8dc <rcl_validate_topic_name+0xcc>
 801b8d4:	1e4d      	subs	r5, r1, #1
 801b8d6:	429d      	cmp	r5, r3
 801b8d8:	d031      	beq.n	801b93e <rcl_validate_topic_name+0x12e>
 801b8da:	4615      	mov	r5, r2
 801b8dc:	3101      	adds	r1, #1
 801b8de:	4288      	cmp	r0, r1
 801b8e0:	d1c7      	bne.n	801b872 <rcl_validate_topic_name+0x62>
 801b8e2:	2d00      	cmp	r5, #0
 801b8e4:	d142      	bne.n	801b96c <rcl_validate_topic_name+0x15c>
 801b8e6:	4628      	mov	r0, r5
 801b8e8:	2301      	movs	r3, #1
 801b8ea:	e00c      	b.n	801b906 <rcl_validate_topic_name+0xf6>
 801b8ec:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 801b8f0:	d101      	bne.n	801b8f6 <rcl_validate_topic_name+0xe6>
 801b8f2:	2801      	cmp	r0, #1
 801b8f4:	d047      	beq.n	801b986 <rcl_validate_topic_name+0x176>
 801b8f6:	1c5a      	adds	r2, r3, #1
 801b8f8:	428b      	cmp	r3, r1
 801b8fa:	f100 0001 	add.w	r0, r0, #1
 801b8fe:	f104 0401 	add.w	r4, r4, #1
 801b902:	4613      	mov	r3, r2
 801b904:	d22e      	bcs.n	801b964 <rcl_validate_topic_name+0x154>
 801b906:	4580      	cmp	r8, r0
 801b908:	d0f5      	beq.n	801b8f6 <rcl_validate_topic_name+0xe6>
 801b90a:	7822      	ldrb	r2, [r4, #0]
 801b90c:	2a2f      	cmp	r2, #47	; 0x2f
 801b90e:	d1ed      	bne.n	801b8ec <rcl_validate_topic_name+0xdc>
 801b910:	7862      	ldrb	r2, [r4, #1]
 801b912:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801b916:	0752      	lsls	r2, r2, #29
 801b918:	d5ed      	bpl.n	801b8f6 <rcl_validate_topic_name+0xe6>
 801b91a:	2204      	movs	r2, #4
 801b91c:	6032      	str	r2, [r6, #0]
 801b91e:	2f00      	cmp	r7, #0
 801b920:	d0cb      	beq.n	801b8ba <rcl_validate_topic_name+0xaa>
 801b922:	2000      	movs	r0, #0
 801b924:	603b      	str	r3, [r7, #0]
 801b926:	e79e      	b.n	801b866 <rcl_validate_topic_name+0x56>
 801b928:	200b      	movs	r0, #11
 801b92a:	4770      	bx	lr
 801b92c:	200b      	movs	r0, #11
 801b92e:	e79a      	b.n	801b866 <rcl_validate_topic_name+0x56>
 801b930:	2900      	cmp	r1, #0
 801b932:	d0d3      	beq.n	801b8dc <rcl_validate_topic_name+0xcc>
 801b934:	2306      	movs	r3, #6
 801b936:	6033      	str	r3, [r6, #0]
 801b938:	2f00      	cmp	r7, #0
 801b93a:	d1b7      	bne.n	801b8ac <rcl_validate_topic_name+0x9c>
 801b93c:	e7bd      	b.n	801b8ba <rcl_validate_topic_name+0xaa>
 801b93e:	2309      	movs	r3, #9
 801b940:	6033      	str	r3, [r6, #0]
 801b942:	2f00      	cmp	r7, #0
 801b944:	d1b2      	bne.n	801b8ac <rcl_validate_topic_name+0x9c>
 801b946:	e7b8      	b.n	801b8ba <rcl_validate_topic_name+0xaa>
 801b948:	2d00      	cmp	r5, #0
 801b94a:	d0c7      	beq.n	801b8dc <rcl_validate_topic_name+0xcc>
 801b94c:	2308      	movs	r3, #8
 801b94e:	6033      	str	r3, [r6, #0]
 801b950:	2f00      	cmp	r7, #0
 801b952:	d1ab      	bne.n	801b8ac <rcl_validate_topic_name+0x9c>
 801b954:	e7b1      	b.n	801b8ba <rcl_validate_topic_name+0xaa>
 801b956:	2d00      	cmp	r5, #0
 801b958:	d1f8      	bne.n	801b94c <rcl_validate_topic_name+0x13c>
 801b95a:	460b      	mov	r3, r1
 801b95c:	2501      	movs	r5, #1
 801b95e:	e7bd      	b.n	801b8dc <rcl_validate_topic_name+0xcc>
 801b960:	2500      	movs	r5, #0
 801b962:	e7bb      	b.n	801b8dc <rcl_validate_topic_name+0xcc>
 801b964:	2300      	movs	r3, #0
 801b966:	4618      	mov	r0, r3
 801b968:	6033      	str	r3, [r6, #0]
 801b96a:	e77c      	b.n	801b866 <rcl_validate_topic_name+0x56>
 801b96c:	2205      	movs	r2, #5
 801b96e:	6032      	str	r2, [r6, #0]
 801b970:	2f00      	cmp	r7, #0
 801b972:	d1d6      	bne.n	801b922 <rcl_validate_topic_name+0x112>
 801b974:	e7a1      	b.n	801b8ba <rcl_validate_topic_name+0xaa>
 801b976:	2d00      	cmp	r5, #0
 801b978:	bf14      	ite	ne
 801b97a:	2308      	movne	r3, #8
 801b97c:	2303      	moveq	r3, #3
 801b97e:	6033      	str	r3, [r6, #0]
 801b980:	2f00      	cmp	r7, #0
 801b982:	d193      	bne.n	801b8ac <rcl_validate_topic_name+0x9c>
 801b984:	e799      	b.n	801b8ba <rcl_validate_topic_name+0xaa>
 801b986:	2307      	movs	r3, #7
 801b988:	6033      	str	r3, [r6, #0]
 801b98a:	2f00      	cmp	r7, #0
 801b98c:	d095      	beq.n	801b8ba <rcl_validate_topic_name+0xaa>
 801b98e:	2301      	movs	r3, #1
 801b990:	e7c7      	b.n	801b922 <rcl_validate_topic_name+0x112>
 801b992:	bf00      	nop
 801b994:	0801f640 	.word	0x0801f640

0801b998 <rcutils_split>:
 801b998:	b082      	sub	sp, #8
 801b99a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b99e:	b08d      	sub	sp, #52	; 0x34
 801b9a0:	ac16      	add	r4, sp, #88	; 0x58
 801b9a2:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 801b9a4:	e884 000c 	stmia.w	r4, {r2, r3}
 801b9a8:	2f00      	cmp	r7, #0
 801b9aa:	f000 80a8 	beq.w	801bafe <rcutils_split+0x166>
 801b9ae:	4605      	mov	r5, r0
 801b9b0:	2800      	cmp	r0, #0
 801b9b2:	d07e      	beq.n	801bab2 <rcutils_split+0x11a>
 801b9b4:	7803      	ldrb	r3, [r0, #0]
 801b9b6:	2b00      	cmp	r3, #0
 801b9b8:	d07b      	beq.n	801bab2 <rcutils_split+0x11a>
 801b9ba:	f10d 0c58 	add.w	ip, sp, #88	; 0x58
 801b9be:	460e      	mov	r6, r1
 801b9c0:	9203      	str	r2, [sp, #12]
 801b9c2:	f107 0408 	add.w	r4, r7, #8
 801b9c6:	f8dd b068 	ldr.w	fp, [sp, #104]	; 0x68
 801b9ca:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801b9ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801b9d0:	4628      	mov	r0, r5
 801b9d2:	f8c4 b000 	str.w	fp, [r4]
 801b9d6:	f7e4 fc93 	bl	8000300 <strlen>
 801b9da:	782c      	ldrb	r4, [r5, #0]
 801b9dc:	182b      	adds	r3, r5, r0
 801b9de:	1ba4      	subs	r4, r4, r6
 801b9e0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801b9e4:	fab4 f484 	clz	r4, r4
 801b9e8:	42b3      	cmp	r3, r6
 801b9ea:	bf14      	ite	ne
 801b9ec:	4680      	movne	r8, r0
 801b9ee:	f1a0 0801 	subeq.w	r8, r0, #1
 801b9f2:	2001      	movs	r0, #1
 801b9f4:	0964      	lsrs	r4, r4, #5
 801b9f6:	6038      	str	r0, [r7, #0]
 801b9f8:	4544      	cmp	r4, r8
 801b9fa:	d26b      	bcs.n	801bad4 <rcutils_split+0x13c>
 801b9fc:	192b      	adds	r3, r5, r4
 801b9fe:	eb05 0108 	add.w	r1, r5, r8
 801ba02:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ba06:	42b2      	cmp	r2, r6
 801ba08:	d101      	bne.n	801ba0e <rcutils_split+0x76>
 801ba0a:	3001      	adds	r0, #1
 801ba0c:	6038      	str	r0, [r7, #0]
 801ba0e:	4299      	cmp	r1, r3
 801ba10:	d1f7      	bne.n	801ba02 <rcutils_split+0x6a>
 801ba12:	9b03      	ldr	r3, [sp, #12]
 801ba14:	0080      	lsls	r0, r0, #2
 801ba16:	4659      	mov	r1, fp
 801ba18:	4798      	blx	r3
 801ba1a:	4603      	mov	r3, r0
 801ba1c:	6078      	str	r0, [r7, #4]
 801ba1e:	2800      	cmp	r0, #0
 801ba20:	d05f      	beq.n	801bae2 <rcutils_split+0x14a>
 801ba22:	f04f 0a00 	mov.w	sl, #0
 801ba26:	46a1      	mov	r9, r4
 801ba28:	e002      	b.n	801ba30 <rcutils_split+0x98>
 801ba2a:	3401      	adds	r4, #1
 801ba2c:	45a0      	cmp	r8, r4
 801ba2e:	d922      	bls.n	801ba76 <rcutils_split+0xde>
 801ba30:	5d2a      	ldrb	r2, [r5, r4]
 801ba32:	42b2      	cmp	r2, r6
 801ba34:	d1f9      	bne.n	801ba2a <rcutils_split+0x92>
 801ba36:	45a1      	cmp	r9, r4
 801ba38:	eba4 0209 	sub.w	r2, r4, r9
 801ba3c:	d032      	beq.n	801baa4 <rcutils_split+0x10c>
 801ba3e:	4659      	mov	r1, fp
 801ba40:	1c90      	adds	r0, r2, #2
 801ba42:	9302      	str	r3, [sp, #8]
 801ba44:	9b03      	ldr	r3, [sp, #12]
 801ba46:	9201      	str	r2, [sp, #4]
 801ba48:	4798      	blx	r3
 801ba4a:	9a01      	ldr	r2, [sp, #4]
 801ba4c:	9b02      	ldr	r3, [sp, #8]
 801ba4e:	1c51      	adds	r1, r2, #1
 801ba50:	687a      	ldr	r2, [r7, #4]
 801ba52:	f843 002a 	str.w	r0, [r3, sl, lsl #2]
 801ba56:	eb05 0309 	add.w	r3, r5, r9
 801ba5a:	f852 002a 	ldr.w	r0, [r2, sl, lsl #2]
 801ba5e:	2800      	cmp	r0, #0
 801ba60:	d04f      	beq.n	801bb02 <rcutils_split+0x16a>
 801ba62:	4a2b      	ldr	r2, [pc, #172]	; (801bb10 <rcutils_split+0x178>)
 801ba64:	f10a 0a01 	add.w	sl, sl, #1
 801ba68:	f000 fd92 	bl	801c590 <sniprintf>
 801ba6c:	687b      	ldr	r3, [r7, #4]
 801ba6e:	3401      	adds	r4, #1
 801ba70:	45a0      	cmp	r8, r4
 801ba72:	46a1      	mov	r9, r4
 801ba74:	d8dc      	bhi.n	801ba30 <rcutils_split+0x98>
 801ba76:	45a1      	cmp	r9, r4
 801ba78:	d039      	beq.n	801baee <rcutils_split+0x156>
 801ba7a:	eba4 0409 	sub.w	r4, r4, r9
 801ba7e:	4659      	mov	r1, fp
 801ba80:	9301      	str	r3, [sp, #4]
 801ba82:	1ca0      	adds	r0, r4, #2
 801ba84:	9b03      	ldr	r3, [sp, #12]
 801ba86:	4798      	blx	r3
 801ba88:	9b01      	ldr	r3, [sp, #4]
 801ba8a:	4a21      	ldr	r2, [pc, #132]	; (801bb10 <rcutils_split+0x178>)
 801ba8c:	1c61      	adds	r1, r4, #1
 801ba8e:	f843 002a 	str.w	r0, [r3, sl, lsl #2]
 801ba92:	eb05 0309 	add.w	r3, r5, r9
 801ba96:	6878      	ldr	r0, [r7, #4]
 801ba98:	2500      	movs	r5, #0
 801ba9a:	f850 002a 	ldr.w	r0, [r0, sl, lsl #2]
 801ba9e:	f000 fd77 	bl	801c590 <sniprintf>
 801baa2:	e011      	b.n	801bac8 <rcutils_split+0x130>
 801baa4:	683a      	ldr	r2, [r7, #0]
 801baa6:	2100      	movs	r1, #0
 801baa8:	3a01      	subs	r2, #1
 801baaa:	603a      	str	r2, [r7, #0]
 801baac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 801bab0:	e7dd      	b.n	801ba6e <rcutils_split+0xd6>
 801bab2:	ac04      	add	r4, sp, #16
 801bab4:	a804      	add	r0, sp, #16
 801bab6:	f000 f82d 	bl	801bb14 <rcutils_get_zero_initialized_string_array>
 801baba:	2500      	movs	r5, #0
 801babc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801babe:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801bac0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801bac4:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 801bac8:	4628      	mov	r0, r5
 801baca:	b00d      	add	sp, #52	; 0x34
 801bacc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bad0:	b002      	add	sp, #8
 801bad2:	4770      	bx	lr
 801bad4:	9b03      	ldr	r3, [sp, #12]
 801bad6:	4659      	mov	r1, fp
 801bad8:	2004      	movs	r0, #4
 801bada:	4798      	blx	r3
 801badc:	4603      	mov	r3, r0
 801bade:	6078      	str	r0, [r7, #4]
 801bae0:	b928      	cbnz	r0, 801baee <rcutils_split+0x156>
 801bae2:	4638      	mov	r0, r7
 801bae4:	f000 f834 	bl	801bb50 <rcutils_string_array_fini>
 801bae8:	b970      	cbnz	r0, 801bb08 <rcutils_split+0x170>
 801baea:	2502      	movs	r5, #2
 801baec:	e7ec      	b.n	801bac8 <rcutils_split+0x130>
 801baee:	683a      	ldr	r2, [r7, #0]
 801baf0:	2100      	movs	r1, #0
 801baf2:	3a01      	subs	r2, #1
 801baf4:	460d      	mov	r5, r1
 801baf6:	603a      	str	r2, [r7, #0]
 801baf8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 801bafc:	e7e4      	b.n	801bac8 <rcutils_split+0x130>
 801bafe:	250b      	movs	r5, #11
 801bb00:	e7e2      	b.n	801bac8 <rcutils_split+0x130>
 801bb02:	f8c7 a000 	str.w	sl, [r7]
 801bb06:	e7ec      	b.n	801bae2 <rcutils_split+0x14a>
 801bb08:	2502      	movs	r5, #2
 801bb0a:	f7f2 f8c9 	bl	800dca0 <rcutils_reset_error>
 801bb0e:	e7db      	b.n	801bac8 <rcutils_split+0x130>
 801bb10:	0801e5bc 	.word	0x0801e5bc

0801bb14 <rcutils_get_zero_initialized_string_array>:
 801bb14:	b570      	push	{r4, r5, r6, lr}
 801bb16:	b086      	sub	sp, #24
 801bb18:	4606      	mov	r6, r0
 801bb1a:	4c0c      	ldr	r4, [pc, #48]	; (801bb4c <rcutils_get_zero_initialized_string_array+0x38>)
 801bb1c:	4668      	mov	r0, sp
 801bb1e:	f7f2 f861 	bl	800dbe4 <rcutils_get_zero_initialized_allocator>
 801bb22:	46ee      	mov	lr, sp
 801bb24:	f104 0508 	add.w	r5, r4, #8
 801bb28:	46a4      	mov	ip, r4
 801bb2a:	4634      	mov	r4, r6
 801bb2c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801bb30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801bb32:	f8de 3000 	ldr.w	r3, [lr]
 801bb36:	602b      	str	r3, [r5, #0]
 801bb38:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801bb3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801bb3e:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 801bb42:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801bb46:	4630      	mov	r0, r6
 801bb48:	b006      	add	sp, #24
 801bb4a:	bd70      	pop	{r4, r5, r6, pc}
 801bb4c:	20010b84 	.word	0x20010b84

0801bb50 <rcutils_string_array_fini>:
 801bb50:	b328      	cbz	r0, 801bb9e <rcutils_string_array_fini+0x4e>
 801bb52:	b570      	push	{r4, r5, r6, lr}
 801bb54:	4604      	mov	r4, r0
 801bb56:	6840      	ldr	r0, [r0, #4]
 801bb58:	b1e0      	cbz	r0, 801bb94 <rcutils_string_array_fini+0x44>
 801bb5a:	f104 0008 	add.w	r0, r4, #8
 801bb5e:	f7f2 f87b 	bl	800dc58 <rcutils_allocator_is_valid>
 801bb62:	b1c0      	cbz	r0, 801bb96 <rcutils_string_array_fini+0x46>
 801bb64:	6823      	ldr	r3, [r4, #0]
 801bb66:	b1c3      	cbz	r3, 801bb9a <rcutils_string_array_fini+0x4a>
 801bb68:	2500      	movs	r5, #0
 801bb6a:	6860      	ldr	r0, [r4, #4]
 801bb6c:	462e      	mov	r6, r5
 801bb6e:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801bb72:	68e3      	ldr	r3, [r4, #12]
 801bb74:	69a1      	ldr	r1, [r4, #24]
 801bb76:	4798      	blx	r3
 801bb78:	e9d4 3000 	ldrd	r3, r0, [r4]
 801bb7c:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 801bb80:	3501      	adds	r5, #1
 801bb82:	429d      	cmp	r5, r3
 801bb84:	d3f3      	bcc.n	801bb6e <rcutils_string_array_fini+0x1e>
 801bb86:	68e3      	ldr	r3, [r4, #12]
 801bb88:	69a1      	ldr	r1, [r4, #24]
 801bb8a:	4798      	blx	r3
 801bb8c:	2300      	movs	r3, #0
 801bb8e:	4618      	mov	r0, r3
 801bb90:	e9c4 3300 	strd	r3, r3, [r4]
 801bb94:	bd70      	pop	{r4, r5, r6, pc}
 801bb96:	200b      	movs	r0, #11
 801bb98:	bd70      	pop	{r4, r5, r6, pc}
 801bb9a:	6860      	ldr	r0, [r4, #4]
 801bb9c:	e7f3      	b.n	801bb86 <rcutils_string_array_fini+0x36>
 801bb9e:	200b      	movs	r0, #11
 801bba0:	4770      	bx	lr
 801bba2:	bf00      	nop

0801bba4 <rmw_get_zero_initialized_discovery_options>:
 801bba4:	b510      	push	{r4, lr}
 801bba6:	4604      	mov	r4, r0
 801bba8:	2220      	movs	r2, #32
 801bbaa:	2100      	movs	r1, #0
 801bbac:	f000 fdca 	bl	801c744 <memset>
 801bbb0:	4620      	mov	r0, r4
 801bbb2:	bd10      	pop	{r4, pc}

0801bbb4 <rmw_discovery_options_init>:
 801bbb4:	b570      	push	{r4, r5, r6, lr}
 801bbb6:	b318      	cbz	r0, 801bc00 <rmw_discovery_options_init+0x4c>
 801bbb8:	4604      	mov	r4, r0
 801bbba:	4610      	mov	r0, r2
 801bbbc:	460e      	mov	r6, r1
 801bbbe:	4615      	mov	r5, r2
 801bbc0:	f7f2 f84a 	bl	800dc58 <rcutils_allocator_is_valid>
 801bbc4:	b1e0      	cbz	r0, 801bc00 <rmw_discovery_options_init+0x4c>
 801bbc6:	68a3      	ldr	r3, [r4, #8]
 801bbc8:	b9d3      	cbnz	r3, 801bc00 <rmw_discovery_options_init+0x4c>
 801bbca:	6863      	ldr	r3, [r4, #4]
 801bbcc:	b9c3      	cbnz	r3, 801bc00 <rmw_discovery_options_init+0x4c>
 801bbce:	7823      	ldrb	r3, [r4, #0]
 801bbd0:	b90b      	cbnz	r3, 801bbd6 <rmw_discovery_options_init+0x22>
 801bbd2:	2302      	movs	r3, #2
 801bbd4:	7023      	strb	r3, [r4, #0]
 801bbd6:	b1a6      	cbz	r6, 801bc02 <rmw_discovery_options_init+0x4e>
 801bbd8:	f44f 7180 	mov.w	r1, #256	; 0x100
 801bbdc:	4630      	mov	r0, r6
 801bbde:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
 801bbe2:	4798      	blx	r3
 801bbe4:	6060      	str	r0, [r4, #4]
 801bbe6:	b170      	cbz	r0, 801bc06 <rmw_discovery_options_init+0x52>
 801bbe8:	f104 0c0c 	add.w	ip, r4, #12
 801bbec:	60a6      	str	r6, [r4, #8]
 801bbee:	2600      	movs	r6, #0
 801bbf0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801bbf2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801bbf6:	682b      	ldr	r3, [r5, #0]
 801bbf8:	4630      	mov	r0, r6
 801bbfa:	f8cc 3000 	str.w	r3, [ip]
 801bbfe:	bd70      	pop	{r4, r5, r6, pc}
 801bc00:	260b      	movs	r6, #11
 801bc02:	4630      	mov	r0, r6
 801bc04:	bd70      	pop	{r4, r5, r6, pc}
 801bc06:	260a      	movs	r6, #10
 801bc08:	e7fb      	b.n	801bc02 <rmw_discovery_options_init+0x4e>
 801bc0a:	bf00      	nop

0801bc0c <on_status>:
 801bc0c:	b082      	sub	sp, #8
 801bc0e:	b002      	add	sp, #8
 801bc10:	4770      	bx	lr
 801bc12:	bf00      	nop

0801bc14 <on_topic>:
 801bc14:	4a23      	ldr	r2, [pc, #140]	; (801bca4 <on_topic+0x90>)
 801bc16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bc1a:	6812      	ldr	r2, [r2, #0]
 801bc1c:	b094      	sub	sp, #80	; 0x50
 801bc1e:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 801bc20:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
 801bc24:	9113      	str	r1, [sp, #76]	; 0x4c
 801bc26:	9312      	str	r3, [sp, #72]	; 0x48
 801bc28:	b3c2      	cbz	r2, 801bc9c <on_topic+0x88>
 801bc2a:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 801bc2e:	f89d 004e 	ldrb.w	r0, [sp, #78]	; 0x4e
 801bc32:	e001      	b.n	801bc38 <on_topic+0x24>
 801bc34:	6852      	ldr	r2, [r2, #4]
 801bc36:	b38a      	cbz	r2, 801bc9c <on_topic+0x88>
 801bc38:	6894      	ldr	r4, [r2, #8]
 801bc3a:	8aa3      	ldrh	r3, [r4, #20]
 801bc3c:	428b      	cmp	r3, r1
 801bc3e:	d1f9      	bne.n	801bc34 <on_topic+0x20>
 801bc40:	7da3      	ldrb	r3, [r4, #22]
 801bc42:	4283      	cmp	r3, r0
 801bc44:	d1f6      	bne.n	801bc34 <on_topic+0x20>
 801bc46:	2248      	movs	r2, #72	; 0x48
 801bc48:	f104 0130 	add.w	r1, r4, #48	; 0x30
 801bc4c:	4668      	mov	r0, sp
 801bc4e:	f000 feaa 	bl	801c9a6 <memcpy>
 801bc52:	f104 0328 	add.w	r3, r4, #40	; 0x28
 801bc56:	4620      	mov	r0, r4
 801bc58:	cb0c      	ldmia	r3, {r2, r3}
 801bc5a:	f7f2 fc39 	bl	800e4d0 <rmw_uxrce_get_static_input_buffer_for_entity>
 801bc5e:	4607      	mov	r7, r0
 801bc60:	b1e0      	cbz	r0, 801bc9c <on_topic+0x88>
 801bc62:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801bc66:	462a      	mov	r2, r5
 801bc68:	4630      	mov	r0, r6
 801bc6a:	f108 0110 	add.w	r1, r8, #16
 801bc6e:	f7f3 f8f5 	bl	800ee5c <ucdr_deserialize_array_uint8_t>
 801bc72:	b930      	cbnz	r0, 801bc82 <on_topic+0x6e>
 801bc74:	4639      	mov	r1, r7
 801bc76:	480c      	ldr	r0, [pc, #48]	; (801bca8 <on_topic+0x94>)
 801bc78:	b014      	add	sp, #80	; 0x50
 801bc7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bc7e:	f7fc bb59 	b.w	8018334 <put_memory>
 801bc82:	f8c8 4814 	str.w	r4, [r8, #2068]	; 0x814
 801bc86:	f8c8 5810 	str.w	r5, [r8, #2064]	; 0x810
 801bc8a:	f7fd fd7f 	bl	801978c <rmw_uros_epoch_nanos>
 801bc8e:	f508 6202 	add.w	r2, r8, #2080	; 0x820
 801bc92:	2305      	movs	r3, #5
 801bc94:	e942 0102 	strd	r0, r1, [r2, #-8]
 801bc98:	f888 3820 	strb.w	r3, [r8, #2080]	; 0x820
 801bc9c:	b014      	add	sp, #80	; 0x50
 801bc9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bca2:	bf00      	nop
 801bca4:	200103a4 	.word	0x200103a4
 801bca8:	20010394 	.word	0x20010394

0801bcac <on_request>:
 801bcac:	4824      	ldr	r0, [pc, #144]	; (801bd40 <on_request+0x94>)
 801bcae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bcb2:	6800      	ldr	r0, [r0, #0]
 801bcb4:	b094      	sub	sp, #80	; 0x50
 801bcb6:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 801bcb8:	f8bd 706c 	ldrh.w	r7, [sp, #108]	; 0x6c
 801bcbc:	9113      	str	r1, [sp, #76]	; 0x4c
 801bcbe:	2800      	cmp	r0, #0
 801bcc0:	d03b      	beq.n	801bd3a <on_request+0x8e>
 801bcc2:	461d      	mov	r5, r3
 801bcc4:	e001      	b.n	801bcca <on_request+0x1e>
 801bcc6:	6840      	ldr	r0, [r0, #4]
 801bcc8:	b3b8      	cbz	r0, 801bd3a <on_request+0x8e>
 801bcca:	6884      	ldr	r4, [r0, #8]
 801bccc:	8b21      	ldrh	r1, [r4, #24]
 801bcce:	4291      	cmp	r1, r2
 801bcd0:	d1f9      	bne.n	801bcc6 <on_request+0x1a>
 801bcd2:	2248      	movs	r2, #72	; 0x48
 801bcd4:	f104 0128 	add.w	r1, r4, #40	; 0x28
 801bcd8:	4668      	mov	r0, sp
 801bcda:	f000 fe64 	bl	801c9a6 <memcpy>
 801bcde:	f104 0320 	add.w	r3, r4, #32
 801bce2:	4620      	mov	r0, r4
 801bce4:	cb0c      	ldmia	r3, {r2, r3}
 801bce6:	f7f2 fbf3 	bl	800e4d0 <rmw_uxrce_get_static_input_buffer_for_entity>
 801bcea:	4680      	mov	r8, r0
 801bcec:	b328      	cbz	r0, 801bd3a <on_request+0x8e>
 801bcee:	4630      	mov	r0, r6
 801bcf0:	f8d8 6008 	ldr.w	r6, [r8, #8]
 801bcf4:	463a      	mov	r2, r7
 801bcf6:	f106 0110 	add.w	r1, r6, #16
 801bcfa:	f7f3 f8af 	bl	800ee5c <ucdr_deserialize_array_uint8_t>
 801bcfe:	b930      	cbnz	r0, 801bd0e <on_request+0x62>
 801bd00:	4641      	mov	r1, r8
 801bd02:	4810      	ldr	r0, [pc, #64]	; (801bd44 <on_request+0x98>)
 801bd04:	b014      	add	sp, #80	; 0x50
 801bd06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bd0a:	f7fc bb13 	b.w	8018334 <put_memory>
 801bd0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801bd10:	f606 0c28 	addw	ip, r6, #2088	; 0x828
 801bd14:	f8c6 4814 	str.w	r4, [r6, #2068]	; 0x814
 801bd18:	f8c6 7810 	str.w	r7, [r6, #2064]	; 0x810
 801bd1c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801bd20:	e895 0003 	ldmia.w	r5, {r0, r1}
 801bd24:	e88c 0003 	stmia.w	ip, {r0, r1}
 801bd28:	f7fd fd30 	bl	801978c <rmw_uros_epoch_nanos>
 801bd2c:	f506 6202 	add.w	r2, r6, #2080	; 0x820
 801bd30:	2303      	movs	r3, #3
 801bd32:	e942 0102 	strd	r0, r1, [r2, #-8]
 801bd36:	f886 3820 	strb.w	r3, [r6, #2080]	; 0x820
 801bd3a:	b014      	add	sp, #80	; 0x50
 801bd3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bd40:	20010374 	.word	0x20010374
 801bd44:	20010394 	.word	0x20010394

0801bd48 <on_reply>:
 801bd48:	4822      	ldr	r0, [pc, #136]	; (801bdd4 <on_reply+0x8c>)
 801bd4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bd4e:	6800      	ldr	r0, [r0, #0]
 801bd50:	b094      	sub	sp, #80	; 0x50
 801bd52:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 801bd54:	f8bd 706c 	ldrh.w	r7, [sp, #108]	; 0x6c
 801bd58:	9113      	str	r1, [sp, #76]	; 0x4c
 801bd5a:	b3b8      	cbz	r0, 801bdcc <on_reply+0x84>
 801bd5c:	461d      	mov	r5, r3
 801bd5e:	e001      	b.n	801bd64 <on_reply+0x1c>
 801bd60:	6840      	ldr	r0, [r0, #4]
 801bd62:	b398      	cbz	r0, 801bdcc <on_reply+0x84>
 801bd64:	6884      	ldr	r4, [r0, #8]
 801bd66:	8b21      	ldrh	r1, [r4, #24]
 801bd68:	4291      	cmp	r1, r2
 801bd6a:	d1f9      	bne.n	801bd60 <on_reply+0x18>
 801bd6c:	2248      	movs	r2, #72	; 0x48
 801bd6e:	f104 0128 	add.w	r1, r4, #40	; 0x28
 801bd72:	4668      	mov	r0, sp
 801bd74:	f000 fe17 	bl	801c9a6 <memcpy>
 801bd78:	f104 0320 	add.w	r3, r4, #32
 801bd7c:	4620      	mov	r0, r4
 801bd7e:	cb0c      	ldmia	r3, {r2, r3}
 801bd80:	f7f2 fba6 	bl	800e4d0 <rmw_uxrce_get_static_input_buffer_for_entity>
 801bd84:	4680      	mov	r8, r0
 801bd86:	b308      	cbz	r0, 801bdcc <on_reply+0x84>
 801bd88:	4630      	mov	r0, r6
 801bd8a:	f8d8 6008 	ldr.w	r6, [r8, #8]
 801bd8e:	463a      	mov	r2, r7
 801bd90:	f106 0110 	add.w	r1, r6, #16
 801bd94:	f7f3 f862 	bl	800ee5c <ucdr_deserialize_array_uint8_t>
 801bd98:	b930      	cbnz	r0, 801bda8 <on_reply+0x60>
 801bd9a:	4641      	mov	r1, r8
 801bd9c:	480e      	ldr	r0, [pc, #56]	; (801bdd8 <on_reply+0x90>)
 801bd9e:	b014      	add	sp, #80	; 0x50
 801bda0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bda4:	f7fc bac6 	b.w	8018334 <put_memory>
 801bda8:	2200      	movs	r2, #0
 801bdaa:	f8c6 4814 	str.w	r4, [r6, #2068]	; 0x814
 801bdae:	f8c6 7810 	str.w	r7, [r6, #2064]	; 0x810
 801bdb2:	f8c6 282c 	str.w	r2, [r6, #2092]	; 0x82c
 801bdb6:	f8c6 5828 	str.w	r5, [r6, #2088]	; 0x828
 801bdba:	f7fd fce7 	bl	801978c <rmw_uros_epoch_nanos>
 801bdbe:	f506 6202 	add.w	r2, r6, #2080	; 0x820
 801bdc2:	2304      	movs	r3, #4
 801bdc4:	e942 0102 	strd	r0, r1, [r2, #-8]
 801bdc8:	f886 3820 	strb.w	r3, [r6, #2080]	; 0x820
 801bdcc:	b014      	add	sp, #80	; 0x50
 801bdce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bdd2:	bf00      	nop
 801bdd4:	2000b9c0 	.word	0x2000b9c0
 801bdd8:	20010394 	.word	0x20010394

0801bddc <rmw_create_guard_condition>:
 801bddc:	b538      	push	{r3, r4, r5, lr}
 801bdde:	4605      	mov	r5, r0
 801bde0:	4808      	ldr	r0, [pc, #32]	; (801be04 <rmw_create_guard_condition+0x28>)
 801bde2:	f7fc fa97 	bl	8018314 <get_memory>
 801bde6:	4603      	mov	r3, r0
 801bde8:	b148      	cbz	r0, 801bdfe <rmw_create_guard_condition+0x22>
 801bdea:	6884      	ldr	r4, [r0, #8]
 801bdec:	2300      	movs	r3, #0
 801bdee:	61e5      	str	r5, [r4, #28]
 801bdf0:	7423      	strb	r3, [r4, #16]
 801bdf2:	f7fc fb15 	bl	8018420 <rmw_get_implementation_identifier>
 801bdf6:	f104 0314 	add.w	r3, r4, #20
 801bdfa:	e9c4 0405 	strd	r0, r4, [r4, #20]
 801bdfe:	4618      	mov	r0, r3
 801be00:	bd38      	pop	{r3, r4, r5, pc}
 801be02:	bf00      	nop
 801be04:	20010334 	.word	0x20010334

0801be08 <rmw_destroy_guard_condition>:
 801be08:	b508      	push	{r3, lr}
 801be0a:	4b08      	ldr	r3, [pc, #32]	; (801be2c <rmw_destroy_guard_condition+0x24>)
 801be0c:	6819      	ldr	r1, [r3, #0]
 801be0e:	b911      	cbnz	r1, 801be16 <rmw_destroy_guard_condition+0xe>
 801be10:	e00a      	b.n	801be28 <rmw_destroy_guard_condition+0x20>
 801be12:	6849      	ldr	r1, [r1, #4]
 801be14:	b141      	cbz	r1, 801be28 <rmw_destroy_guard_condition+0x20>
 801be16:	688b      	ldr	r3, [r1, #8]
 801be18:	3314      	adds	r3, #20
 801be1a:	4298      	cmp	r0, r3
 801be1c:	d1f9      	bne.n	801be12 <rmw_destroy_guard_condition+0xa>
 801be1e:	4803      	ldr	r0, [pc, #12]	; (801be2c <rmw_destroy_guard_condition+0x24>)
 801be20:	f7fc fa88 	bl	8018334 <put_memory>
 801be24:	2000      	movs	r0, #0
 801be26:	bd08      	pop	{r3, pc}
 801be28:	2001      	movs	r0, #1
 801be2a:	bd08      	pop	{r3, pc}
 801be2c:	20010334 	.word	0x20010334

0801be30 <rmw_trigger_guard_condition>:
 801be30:	b160      	cbz	r0, 801be4c <rmw_trigger_guard_condition+0x1c>
 801be32:	b510      	push	{r4, lr}
 801be34:	4604      	mov	r4, r0
 801be36:	6800      	ldr	r0, [r0, #0]
 801be38:	f7f2 fd5e 	bl	800e8f8 <is_uxrce_rmw_identifier_valid>
 801be3c:	b908      	cbnz	r0, 801be42 <rmw_trigger_guard_condition+0x12>
 801be3e:	2001      	movs	r0, #1
 801be40:	bd10      	pop	{r4, pc}
 801be42:	6863      	ldr	r3, [r4, #4]
 801be44:	2201      	movs	r2, #1
 801be46:	2000      	movs	r0, #0
 801be48:	741a      	strb	r2, [r3, #16]
 801be4a:	bd10      	pop	{r4, pc}
 801be4c:	2001      	movs	r0, #1
 801be4e:	4770      	bx	lr

0801be50 <expf>:
 801be50:	ee10 2a10 	vmov	r2, s0
 801be54:	f240 412a 	movw	r1, #1066	; 0x42a
 801be58:	f3c2 530a 	ubfx	r3, r2, #20, #11
 801be5c:	428b      	cmp	r3, r1
 801be5e:	b430      	push	{r4, r5}
 801be60:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 801be64:	d92a      	bls.n	801bebc <expf+0x6c>
 801be66:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
 801be6a:	d058      	beq.n	801bf1e <expf+0xce>
 801be6c:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 801be70:	d303      	bcc.n	801be7a <expf+0x2a>
 801be72:	ee30 0a00 	vadd.f32	s0, s0, s0
 801be76:	bc30      	pop	{r4, r5}
 801be78:	4770      	bx	lr
 801be7a:	eddf 7a2a 	vldr	s15, [pc, #168]	; 801bf24 <expf+0xd4>
 801be7e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801be82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801be86:	dd03      	ble.n	801be90 <expf+0x40>
 801be88:	bc30      	pop	{r4, r5}
 801be8a:	2000      	movs	r0, #0
 801be8c:	f000 b876 	b.w	801bf7c <__math_oflowf>
 801be90:	eddf 7a25 	vldr	s15, [pc, #148]	; 801bf28 <expf+0xd8>
 801be94:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801be98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801be9c:	d503      	bpl.n	801bea6 <expf+0x56>
 801be9e:	bc30      	pop	{r4, r5}
 801bea0:	2000      	movs	r0, #0
 801bea2:	f000 b85f 	b.w	801bf64 <__math_uflowf>
 801bea6:	eddf 7a21 	vldr	s15, [pc, #132]	; 801bf2c <expf+0xdc>
 801beaa:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801beae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801beb2:	d503      	bpl.n	801bebc <expf+0x6c>
 801beb4:	bc30      	pop	{r4, r5}
 801beb6:	2000      	movs	r0, #0
 801beb8:	f000 b85a 	b.w	801bf70 <__math_may_uflowf>
 801bebc:	4b1c      	ldr	r3, [pc, #112]	; (801bf30 <expf+0xe0>)
 801bebe:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801bec2:	ed93 5b4a 	vldr	d5, [r3, #296]	; 0x128
 801bec6:	ed93 4b48 	vldr	d4, [r3, #288]	; 0x120
 801beca:	eeb0 7b44 	vmov.f64	d7, d4
 801bece:	eea5 7b06 	vfma.f64	d7, d5, d6
 801bed2:	ee17 0a10 	vmov	r0, s14
 801bed6:	ee37 7b44 	vsub.f64	d7, d7, d4
 801beda:	f000 021f 	and.w	r2, r0, #31
 801bede:	ee95 7b06 	vfnms.f64	d7, d5, d6
 801bee2:	ed93 5b4c 	vldr	d5, [r3, #304]	; 0x130
 801bee6:	ee27 4b07 	vmul.f64	d4, d7, d7
 801beea:	ed93 6b4e 	vldr	d6, [r3, #312]	; 0x138
 801beee:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 801bef2:	eea5 6b07 	vfma.f64	d6, d5, d7
 801bef6:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
 801befa:	684d      	ldr	r5, [r1, #4]
 801befc:	ed93 5b50 	vldr	d5, [r3, #320]	; 0x140
 801bf00:	2100      	movs	r1, #0
 801bf02:	190a      	adds	r2, r1, r4
 801bf04:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 801bf08:	eea5 0b07 	vfma.f64	d0, d5, d7
 801bf0c:	ec43 2b17 	vmov	d7, r2, r3
 801bf10:	eea6 0b04 	vfma.f64	d0, d6, d4
 801bf14:	ee20 0b07 	vmul.f64	d0, d0, d7
 801bf18:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801bf1c:	e7ab      	b.n	801be76 <expf+0x26>
 801bf1e:	ed9f 0a05 	vldr	s0, [pc, #20]	; 801bf34 <expf+0xe4>
 801bf22:	e7a8      	b.n	801be76 <expf+0x26>
 801bf24:	42b17217 	.word	0x42b17217
 801bf28:	c2cff1b4 	.word	0xc2cff1b4
 801bf2c:	c2ce8ecf 	.word	0xc2ce8ecf
 801bf30:	0801f488 	.word	0x0801f488
 801bf34:	00000000 	.word	0x00000000

0801bf38 <with_errnof>:
 801bf38:	b513      	push	{r0, r1, r4, lr}
 801bf3a:	4604      	mov	r4, r0
 801bf3c:	ed8d 0a01 	vstr	s0, [sp, #4]
 801bf40:	f000 fcfc 	bl	801c93c <__errno>
 801bf44:	ed9d 0a01 	vldr	s0, [sp, #4]
 801bf48:	6004      	str	r4, [r0, #0]
 801bf4a:	b002      	add	sp, #8
 801bf4c:	bd10      	pop	{r4, pc}

0801bf4e <xflowf>:
 801bf4e:	b130      	cbz	r0, 801bf5e <xflowf+0x10>
 801bf50:	eef1 7a40 	vneg.f32	s15, s0
 801bf54:	ee27 0a80 	vmul.f32	s0, s15, s0
 801bf58:	2022      	movs	r0, #34	; 0x22
 801bf5a:	f7ff bfed 	b.w	801bf38 <with_errnof>
 801bf5e:	eef0 7a40 	vmov.f32	s15, s0
 801bf62:	e7f7      	b.n	801bf54 <xflowf+0x6>

0801bf64 <__math_uflowf>:
 801bf64:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801bf6c <__math_uflowf+0x8>
 801bf68:	f7ff bff1 	b.w	801bf4e <xflowf>
 801bf6c:	10000000 	.word	0x10000000

0801bf70 <__math_may_uflowf>:
 801bf70:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801bf78 <__math_may_uflowf+0x8>
 801bf74:	f7ff bfeb 	b.w	801bf4e <xflowf>
 801bf78:	1a200000 	.word	0x1a200000

0801bf7c <__math_oflowf>:
 801bf7c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801bf84 <__math_oflowf+0x8>
 801bf80:	f7ff bfe5 	b.w	801bf4e <xflowf>
 801bf84:	70000000 	.word	0x70000000

0801bf88 <calloc>:
 801bf88:	4b02      	ldr	r3, [pc, #8]	; (801bf94 <calloc+0xc>)
 801bf8a:	460a      	mov	r2, r1
 801bf8c:	4601      	mov	r1, r0
 801bf8e:	6818      	ldr	r0, [r3, #0]
 801bf90:	f000 b802 	b.w	801bf98 <_calloc_r>
 801bf94:	200021d8 	.word	0x200021d8

0801bf98 <_calloc_r>:
 801bf98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801bf9a:	fba1 2402 	umull	r2, r4, r1, r2
 801bf9e:	b94c      	cbnz	r4, 801bfb4 <_calloc_r+0x1c>
 801bfa0:	4611      	mov	r1, r2
 801bfa2:	9201      	str	r2, [sp, #4]
 801bfa4:	f000 f886 	bl	801c0b4 <_malloc_r>
 801bfa8:	9a01      	ldr	r2, [sp, #4]
 801bfaa:	4605      	mov	r5, r0
 801bfac:	b930      	cbnz	r0, 801bfbc <_calloc_r+0x24>
 801bfae:	4628      	mov	r0, r5
 801bfb0:	b003      	add	sp, #12
 801bfb2:	bd30      	pop	{r4, r5, pc}
 801bfb4:	220c      	movs	r2, #12
 801bfb6:	6002      	str	r2, [r0, #0]
 801bfb8:	2500      	movs	r5, #0
 801bfba:	e7f8      	b.n	801bfae <_calloc_r+0x16>
 801bfbc:	4621      	mov	r1, r4
 801bfbe:	f000 fbc1 	bl	801c744 <memset>
 801bfc2:	e7f4      	b.n	801bfae <_calloc_r+0x16>

0801bfc4 <getenv>:
 801bfc4:	b507      	push	{r0, r1, r2, lr}
 801bfc6:	4b04      	ldr	r3, [pc, #16]	; (801bfd8 <getenv+0x14>)
 801bfc8:	4601      	mov	r1, r0
 801bfca:	aa01      	add	r2, sp, #4
 801bfcc:	6818      	ldr	r0, [r3, #0]
 801bfce:	f000 f805 	bl	801bfdc <_findenv_r>
 801bfd2:	b003      	add	sp, #12
 801bfd4:	f85d fb04 	ldr.w	pc, [sp], #4
 801bfd8:	200021d8 	.word	0x200021d8

0801bfdc <_findenv_r>:
 801bfdc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bfe0:	f8df a06c 	ldr.w	sl, [pc, #108]	; 801c050 <_findenv_r+0x74>
 801bfe4:	4607      	mov	r7, r0
 801bfe6:	4689      	mov	r9, r1
 801bfe8:	4616      	mov	r6, r2
 801bfea:	f000 fd09 	bl	801ca00 <__env_lock>
 801bfee:	f8da 4000 	ldr.w	r4, [sl]
 801bff2:	b134      	cbz	r4, 801c002 <_findenv_r+0x26>
 801bff4:	464b      	mov	r3, r9
 801bff6:	4698      	mov	r8, r3
 801bff8:	f813 2b01 	ldrb.w	r2, [r3], #1
 801bffc:	b13a      	cbz	r2, 801c00e <_findenv_r+0x32>
 801bffe:	2a3d      	cmp	r2, #61	; 0x3d
 801c000:	d1f9      	bne.n	801bff6 <_findenv_r+0x1a>
 801c002:	4638      	mov	r0, r7
 801c004:	f000 fd02 	bl	801ca0c <__env_unlock>
 801c008:	2000      	movs	r0, #0
 801c00a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c00e:	eba8 0809 	sub.w	r8, r8, r9
 801c012:	46a3      	mov	fp, r4
 801c014:	f854 0b04 	ldr.w	r0, [r4], #4
 801c018:	2800      	cmp	r0, #0
 801c01a:	d0f2      	beq.n	801c002 <_findenv_r+0x26>
 801c01c:	4642      	mov	r2, r8
 801c01e:	4649      	mov	r1, r9
 801c020:	f000 fba5 	bl	801c76e <strncmp>
 801c024:	2800      	cmp	r0, #0
 801c026:	d1f4      	bne.n	801c012 <_findenv_r+0x36>
 801c028:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801c02c:	eb03 0508 	add.w	r5, r3, r8
 801c030:	f813 3008 	ldrb.w	r3, [r3, r8]
 801c034:	2b3d      	cmp	r3, #61	; 0x3d
 801c036:	d1ec      	bne.n	801c012 <_findenv_r+0x36>
 801c038:	f8da 3000 	ldr.w	r3, [sl]
 801c03c:	ebab 0303 	sub.w	r3, fp, r3
 801c040:	109b      	asrs	r3, r3, #2
 801c042:	4638      	mov	r0, r7
 801c044:	6033      	str	r3, [r6, #0]
 801c046:	f000 fce1 	bl	801ca0c <__env_unlock>
 801c04a:	1c68      	adds	r0, r5, #1
 801c04c:	e7dd      	b.n	801c00a <_findenv_r+0x2e>
 801c04e:	bf00      	nop
 801c050:	20000000 	.word	0x20000000

0801c054 <malloc>:
 801c054:	4b02      	ldr	r3, [pc, #8]	; (801c060 <malloc+0xc>)
 801c056:	4601      	mov	r1, r0
 801c058:	6818      	ldr	r0, [r3, #0]
 801c05a:	f000 b82b 	b.w	801c0b4 <_malloc_r>
 801c05e:	bf00      	nop
 801c060:	200021d8 	.word	0x200021d8

0801c064 <free>:
 801c064:	4b02      	ldr	r3, [pc, #8]	; (801c070 <free+0xc>)
 801c066:	4601      	mov	r1, r0
 801c068:	6818      	ldr	r0, [r3, #0]
 801c06a:	f000 bcd5 	b.w	801ca18 <_free_r>
 801c06e:	bf00      	nop
 801c070:	200021d8 	.word	0x200021d8

0801c074 <sbrk_aligned>:
 801c074:	b570      	push	{r4, r5, r6, lr}
 801c076:	4e0e      	ldr	r6, [pc, #56]	; (801c0b0 <sbrk_aligned+0x3c>)
 801c078:	460c      	mov	r4, r1
 801c07a:	6831      	ldr	r1, [r6, #0]
 801c07c:	4605      	mov	r5, r0
 801c07e:	b911      	cbnz	r1, 801c086 <sbrk_aligned+0x12>
 801c080:	f000 fc3a 	bl	801c8f8 <_sbrk_r>
 801c084:	6030      	str	r0, [r6, #0]
 801c086:	4621      	mov	r1, r4
 801c088:	4628      	mov	r0, r5
 801c08a:	f000 fc35 	bl	801c8f8 <_sbrk_r>
 801c08e:	1c43      	adds	r3, r0, #1
 801c090:	d00a      	beq.n	801c0a8 <sbrk_aligned+0x34>
 801c092:	1cc4      	adds	r4, r0, #3
 801c094:	f024 0403 	bic.w	r4, r4, #3
 801c098:	42a0      	cmp	r0, r4
 801c09a:	d007      	beq.n	801c0ac <sbrk_aligned+0x38>
 801c09c:	1a21      	subs	r1, r4, r0
 801c09e:	4628      	mov	r0, r5
 801c0a0:	f000 fc2a 	bl	801c8f8 <_sbrk_r>
 801c0a4:	3001      	adds	r0, #1
 801c0a6:	d101      	bne.n	801c0ac <sbrk_aligned+0x38>
 801c0a8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801c0ac:	4620      	mov	r0, r4
 801c0ae:	bd70      	pop	{r4, r5, r6, pc}
 801c0b0:	20010ba4 	.word	0x20010ba4

0801c0b4 <_malloc_r>:
 801c0b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c0b8:	1ccd      	adds	r5, r1, #3
 801c0ba:	f025 0503 	bic.w	r5, r5, #3
 801c0be:	3508      	adds	r5, #8
 801c0c0:	2d0c      	cmp	r5, #12
 801c0c2:	bf38      	it	cc
 801c0c4:	250c      	movcc	r5, #12
 801c0c6:	2d00      	cmp	r5, #0
 801c0c8:	4607      	mov	r7, r0
 801c0ca:	db01      	blt.n	801c0d0 <_malloc_r+0x1c>
 801c0cc:	42a9      	cmp	r1, r5
 801c0ce:	d905      	bls.n	801c0dc <_malloc_r+0x28>
 801c0d0:	230c      	movs	r3, #12
 801c0d2:	603b      	str	r3, [r7, #0]
 801c0d4:	2600      	movs	r6, #0
 801c0d6:	4630      	mov	r0, r6
 801c0d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c0dc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801c1b0 <_malloc_r+0xfc>
 801c0e0:	f000 f868 	bl	801c1b4 <__malloc_lock>
 801c0e4:	f8d8 3000 	ldr.w	r3, [r8]
 801c0e8:	461c      	mov	r4, r3
 801c0ea:	bb5c      	cbnz	r4, 801c144 <_malloc_r+0x90>
 801c0ec:	4629      	mov	r1, r5
 801c0ee:	4638      	mov	r0, r7
 801c0f0:	f7ff ffc0 	bl	801c074 <sbrk_aligned>
 801c0f4:	1c43      	adds	r3, r0, #1
 801c0f6:	4604      	mov	r4, r0
 801c0f8:	d155      	bne.n	801c1a6 <_malloc_r+0xf2>
 801c0fa:	f8d8 4000 	ldr.w	r4, [r8]
 801c0fe:	4626      	mov	r6, r4
 801c100:	2e00      	cmp	r6, #0
 801c102:	d145      	bne.n	801c190 <_malloc_r+0xdc>
 801c104:	2c00      	cmp	r4, #0
 801c106:	d048      	beq.n	801c19a <_malloc_r+0xe6>
 801c108:	6823      	ldr	r3, [r4, #0]
 801c10a:	4631      	mov	r1, r6
 801c10c:	4638      	mov	r0, r7
 801c10e:	eb04 0903 	add.w	r9, r4, r3
 801c112:	f000 fbf1 	bl	801c8f8 <_sbrk_r>
 801c116:	4581      	cmp	r9, r0
 801c118:	d13f      	bne.n	801c19a <_malloc_r+0xe6>
 801c11a:	6821      	ldr	r1, [r4, #0]
 801c11c:	1a6d      	subs	r5, r5, r1
 801c11e:	4629      	mov	r1, r5
 801c120:	4638      	mov	r0, r7
 801c122:	f7ff ffa7 	bl	801c074 <sbrk_aligned>
 801c126:	3001      	adds	r0, #1
 801c128:	d037      	beq.n	801c19a <_malloc_r+0xe6>
 801c12a:	6823      	ldr	r3, [r4, #0]
 801c12c:	442b      	add	r3, r5
 801c12e:	6023      	str	r3, [r4, #0]
 801c130:	f8d8 3000 	ldr.w	r3, [r8]
 801c134:	2b00      	cmp	r3, #0
 801c136:	d038      	beq.n	801c1aa <_malloc_r+0xf6>
 801c138:	685a      	ldr	r2, [r3, #4]
 801c13a:	42a2      	cmp	r2, r4
 801c13c:	d12b      	bne.n	801c196 <_malloc_r+0xe2>
 801c13e:	2200      	movs	r2, #0
 801c140:	605a      	str	r2, [r3, #4]
 801c142:	e00f      	b.n	801c164 <_malloc_r+0xb0>
 801c144:	6822      	ldr	r2, [r4, #0]
 801c146:	1b52      	subs	r2, r2, r5
 801c148:	d41f      	bmi.n	801c18a <_malloc_r+0xd6>
 801c14a:	2a0b      	cmp	r2, #11
 801c14c:	d917      	bls.n	801c17e <_malloc_r+0xca>
 801c14e:	1961      	adds	r1, r4, r5
 801c150:	42a3      	cmp	r3, r4
 801c152:	6025      	str	r5, [r4, #0]
 801c154:	bf18      	it	ne
 801c156:	6059      	strne	r1, [r3, #4]
 801c158:	6863      	ldr	r3, [r4, #4]
 801c15a:	bf08      	it	eq
 801c15c:	f8c8 1000 	streq.w	r1, [r8]
 801c160:	5162      	str	r2, [r4, r5]
 801c162:	604b      	str	r3, [r1, #4]
 801c164:	4638      	mov	r0, r7
 801c166:	f104 060b 	add.w	r6, r4, #11
 801c16a:	f000 f829 	bl	801c1c0 <__malloc_unlock>
 801c16e:	f026 0607 	bic.w	r6, r6, #7
 801c172:	1d23      	adds	r3, r4, #4
 801c174:	1af2      	subs	r2, r6, r3
 801c176:	d0ae      	beq.n	801c0d6 <_malloc_r+0x22>
 801c178:	1b9b      	subs	r3, r3, r6
 801c17a:	50a3      	str	r3, [r4, r2]
 801c17c:	e7ab      	b.n	801c0d6 <_malloc_r+0x22>
 801c17e:	42a3      	cmp	r3, r4
 801c180:	6862      	ldr	r2, [r4, #4]
 801c182:	d1dd      	bne.n	801c140 <_malloc_r+0x8c>
 801c184:	f8c8 2000 	str.w	r2, [r8]
 801c188:	e7ec      	b.n	801c164 <_malloc_r+0xb0>
 801c18a:	4623      	mov	r3, r4
 801c18c:	6864      	ldr	r4, [r4, #4]
 801c18e:	e7ac      	b.n	801c0ea <_malloc_r+0x36>
 801c190:	4634      	mov	r4, r6
 801c192:	6876      	ldr	r6, [r6, #4]
 801c194:	e7b4      	b.n	801c100 <_malloc_r+0x4c>
 801c196:	4613      	mov	r3, r2
 801c198:	e7cc      	b.n	801c134 <_malloc_r+0x80>
 801c19a:	230c      	movs	r3, #12
 801c19c:	603b      	str	r3, [r7, #0]
 801c19e:	4638      	mov	r0, r7
 801c1a0:	f000 f80e 	bl	801c1c0 <__malloc_unlock>
 801c1a4:	e797      	b.n	801c0d6 <_malloc_r+0x22>
 801c1a6:	6025      	str	r5, [r4, #0]
 801c1a8:	e7dc      	b.n	801c164 <_malloc_r+0xb0>
 801c1aa:	605b      	str	r3, [r3, #4]
 801c1ac:	deff      	udf	#255	; 0xff
 801c1ae:	bf00      	nop
 801c1b0:	20010ba0 	.word	0x20010ba0

0801c1b4 <__malloc_lock>:
 801c1b4:	4801      	ldr	r0, [pc, #4]	; (801c1bc <__malloc_lock+0x8>)
 801c1b6:	f000 bbec 	b.w	801c992 <__retarget_lock_acquire_recursive>
 801c1ba:	bf00      	nop
 801c1bc:	20010ce9 	.word	0x20010ce9

0801c1c0 <__malloc_unlock>:
 801c1c0:	4801      	ldr	r0, [pc, #4]	; (801c1c8 <__malloc_unlock+0x8>)
 801c1c2:	f000 bbe7 	b.w	801c994 <__retarget_lock_release_recursive>
 801c1c6:	bf00      	nop
 801c1c8:	20010ce9 	.word	0x20010ce9

0801c1cc <srand>:
 801c1cc:	b538      	push	{r3, r4, r5, lr}
 801c1ce:	4b10      	ldr	r3, [pc, #64]	; (801c210 <srand+0x44>)
 801c1d0:	681d      	ldr	r5, [r3, #0]
 801c1d2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801c1d4:	4604      	mov	r4, r0
 801c1d6:	b9b3      	cbnz	r3, 801c206 <srand+0x3a>
 801c1d8:	2018      	movs	r0, #24
 801c1da:	f7ff ff3b 	bl	801c054 <malloc>
 801c1de:	4602      	mov	r2, r0
 801c1e0:	6328      	str	r0, [r5, #48]	; 0x30
 801c1e2:	b920      	cbnz	r0, 801c1ee <srand+0x22>
 801c1e4:	4b0b      	ldr	r3, [pc, #44]	; (801c214 <srand+0x48>)
 801c1e6:	480c      	ldr	r0, [pc, #48]	; (801c218 <srand+0x4c>)
 801c1e8:	2146      	movs	r1, #70	; 0x46
 801c1ea:	f000 fbeb 	bl	801c9c4 <__assert_func>
 801c1ee:	490b      	ldr	r1, [pc, #44]	; (801c21c <srand+0x50>)
 801c1f0:	4b0b      	ldr	r3, [pc, #44]	; (801c220 <srand+0x54>)
 801c1f2:	e9c0 1300 	strd	r1, r3, [r0]
 801c1f6:	4b0b      	ldr	r3, [pc, #44]	; (801c224 <srand+0x58>)
 801c1f8:	6083      	str	r3, [r0, #8]
 801c1fa:	230b      	movs	r3, #11
 801c1fc:	8183      	strh	r3, [r0, #12]
 801c1fe:	2100      	movs	r1, #0
 801c200:	2001      	movs	r0, #1
 801c202:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801c206:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801c208:	2200      	movs	r2, #0
 801c20a:	611c      	str	r4, [r3, #16]
 801c20c:	615a      	str	r2, [r3, #20]
 801c20e:	bd38      	pop	{r3, r4, r5, pc}
 801c210:	200021d8 	.word	0x200021d8
 801c214:	0801f5d0 	.word	0x0801f5d0
 801c218:	0801f5e7 	.word	0x0801f5e7
 801c21c:	abcd330e 	.word	0xabcd330e
 801c220:	e66d1234 	.word	0xe66d1234
 801c224:	0005deec 	.word	0x0005deec

0801c228 <rand>:
 801c228:	4b16      	ldr	r3, [pc, #88]	; (801c284 <rand+0x5c>)
 801c22a:	b510      	push	{r4, lr}
 801c22c:	681c      	ldr	r4, [r3, #0]
 801c22e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c230:	b9b3      	cbnz	r3, 801c260 <rand+0x38>
 801c232:	2018      	movs	r0, #24
 801c234:	f7ff ff0e 	bl	801c054 <malloc>
 801c238:	4602      	mov	r2, r0
 801c23a:	6320      	str	r0, [r4, #48]	; 0x30
 801c23c:	b920      	cbnz	r0, 801c248 <rand+0x20>
 801c23e:	4b12      	ldr	r3, [pc, #72]	; (801c288 <rand+0x60>)
 801c240:	4812      	ldr	r0, [pc, #72]	; (801c28c <rand+0x64>)
 801c242:	2152      	movs	r1, #82	; 0x52
 801c244:	f000 fbbe 	bl	801c9c4 <__assert_func>
 801c248:	4911      	ldr	r1, [pc, #68]	; (801c290 <rand+0x68>)
 801c24a:	4b12      	ldr	r3, [pc, #72]	; (801c294 <rand+0x6c>)
 801c24c:	e9c0 1300 	strd	r1, r3, [r0]
 801c250:	4b11      	ldr	r3, [pc, #68]	; (801c298 <rand+0x70>)
 801c252:	6083      	str	r3, [r0, #8]
 801c254:	230b      	movs	r3, #11
 801c256:	8183      	strh	r3, [r0, #12]
 801c258:	2100      	movs	r1, #0
 801c25a:	2001      	movs	r0, #1
 801c25c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801c260:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801c262:	480e      	ldr	r0, [pc, #56]	; (801c29c <rand+0x74>)
 801c264:	690b      	ldr	r3, [r1, #16]
 801c266:	694c      	ldr	r4, [r1, #20]
 801c268:	4a0d      	ldr	r2, [pc, #52]	; (801c2a0 <rand+0x78>)
 801c26a:	4358      	muls	r0, r3
 801c26c:	fb02 0004 	mla	r0, r2, r4, r0
 801c270:	fba3 3202 	umull	r3, r2, r3, r2
 801c274:	3301      	adds	r3, #1
 801c276:	eb40 0002 	adc.w	r0, r0, r2
 801c27a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801c27e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801c282:	bd10      	pop	{r4, pc}
 801c284:	200021d8 	.word	0x200021d8
 801c288:	0801f5d0 	.word	0x0801f5d0
 801c28c:	0801f5e7 	.word	0x0801f5e7
 801c290:	abcd330e 	.word	0xabcd330e
 801c294:	e66d1234 	.word	0xe66d1234
 801c298:	0005deec 	.word	0x0005deec
 801c29c:	5851f42d 	.word	0x5851f42d
 801c2a0:	4c957f2d 	.word	0x4c957f2d

0801c2a4 <realloc>:
 801c2a4:	4b02      	ldr	r3, [pc, #8]	; (801c2b0 <realloc+0xc>)
 801c2a6:	460a      	mov	r2, r1
 801c2a8:	4601      	mov	r1, r0
 801c2aa:	6818      	ldr	r0, [r3, #0]
 801c2ac:	f000 b802 	b.w	801c2b4 <_realloc_r>
 801c2b0:	200021d8 	.word	0x200021d8

0801c2b4 <_realloc_r>:
 801c2b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c2b8:	4680      	mov	r8, r0
 801c2ba:	4614      	mov	r4, r2
 801c2bc:	460e      	mov	r6, r1
 801c2be:	b921      	cbnz	r1, 801c2ca <_realloc_r+0x16>
 801c2c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c2c4:	4611      	mov	r1, r2
 801c2c6:	f7ff bef5 	b.w	801c0b4 <_malloc_r>
 801c2ca:	b92a      	cbnz	r2, 801c2d8 <_realloc_r+0x24>
 801c2cc:	f000 fba4 	bl	801ca18 <_free_r>
 801c2d0:	4625      	mov	r5, r4
 801c2d2:	4628      	mov	r0, r5
 801c2d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c2d8:	f000 fbea 	bl	801cab0 <_malloc_usable_size_r>
 801c2dc:	4284      	cmp	r4, r0
 801c2de:	4607      	mov	r7, r0
 801c2e0:	d802      	bhi.n	801c2e8 <_realloc_r+0x34>
 801c2e2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801c2e6:	d812      	bhi.n	801c30e <_realloc_r+0x5a>
 801c2e8:	4621      	mov	r1, r4
 801c2ea:	4640      	mov	r0, r8
 801c2ec:	f7ff fee2 	bl	801c0b4 <_malloc_r>
 801c2f0:	4605      	mov	r5, r0
 801c2f2:	2800      	cmp	r0, #0
 801c2f4:	d0ed      	beq.n	801c2d2 <_realloc_r+0x1e>
 801c2f6:	42bc      	cmp	r4, r7
 801c2f8:	4622      	mov	r2, r4
 801c2fa:	4631      	mov	r1, r6
 801c2fc:	bf28      	it	cs
 801c2fe:	463a      	movcs	r2, r7
 801c300:	f000 fb51 	bl	801c9a6 <memcpy>
 801c304:	4631      	mov	r1, r6
 801c306:	4640      	mov	r0, r8
 801c308:	f000 fb86 	bl	801ca18 <_free_r>
 801c30c:	e7e1      	b.n	801c2d2 <_realloc_r+0x1e>
 801c30e:	4635      	mov	r5, r6
 801c310:	e7df      	b.n	801c2d2 <_realloc_r+0x1e>
	...

0801c314 <_strtoul_l.constprop.0>:
 801c314:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c318:	4f36      	ldr	r7, [pc, #216]	; (801c3f4 <_strtoul_l.constprop.0+0xe0>)
 801c31a:	4686      	mov	lr, r0
 801c31c:	460d      	mov	r5, r1
 801c31e:	4628      	mov	r0, r5
 801c320:	f815 4b01 	ldrb.w	r4, [r5], #1
 801c324:	5d3e      	ldrb	r6, [r7, r4]
 801c326:	f016 0608 	ands.w	r6, r6, #8
 801c32a:	d1f8      	bne.n	801c31e <_strtoul_l.constprop.0+0xa>
 801c32c:	2c2d      	cmp	r4, #45	; 0x2d
 801c32e:	d130      	bne.n	801c392 <_strtoul_l.constprop.0+0x7e>
 801c330:	782c      	ldrb	r4, [r5, #0]
 801c332:	2601      	movs	r6, #1
 801c334:	1c85      	adds	r5, r0, #2
 801c336:	2b00      	cmp	r3, #0
 801c338:	d057      	beq.n	801c3ea <_strtoul_l.constprop.0+0xd6>
 801c33a:	2b10      	cmp	r3, #16
 801c33c:	d109      	bne.n	801c352 <_strtoul_l.constprop.0+0x3e>
 801c33e:	2c30      	cmp	r4, #48	; 0x30
 801c340:	d107      	bne.n	801c352 <_strtoul_l.constprop.0+0x3e>
 801c342:	7828      	ldrb	r0, [r5, #0]
 801c344:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801c348:	2858      	cmp	r0, #88	; 0x58
 801c34a:	d149      	bne.n	801c3e0 <_strtoul_l.constprop.0+0xcc>
 801c34c:	786c      	ldrb	r4, [r5, #1]
 801c34e:	2310      	movs	r3, #16
 801c350:	3502      	adds	r5, #2
 801c352:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801c356:	2700      	movs	r7, #0
 801c358:	fbb8 f8f3 	udiv	r8, r8, r3
 801c35c:	fb03 f908 	mul.w	r9, r3, r8
 801c360:	ea6f 0909 	mvn.w	r9, r9
 801c364:	4638      	mov	r0, r7
 801c366:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801c36a:	f1bc 0f09 	cmp.w	ip, #9
 801c36e:	d815      	bhi.n	801c39c <_strtoul_l.constprop.0+0x88>
 801c370:	4664      	mov	r4, ip
 801c372:	42a3      	cmp	r3, r4
 801c374:	dd23      	ble.n	801c3be <_strtoul_l.constprop.0+0xaa>
 801c376:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 801c37a:	d007      	beq.n	801c38c <_strtoul_l.constprop.0+0x78>
 801c37c:	4580      	cmp	r8, r0
 801c37e:	d31b      	bcc.n	801c3b8 <_strtoul_l.constprop.0+0xa4>
 801c380:	d101      	bne.n	801c386 <_strtoul_l.constprop.0+0x72>
 801c382:	45a1      	cmp	r9, r4
 801c384:	db18      	blt.n	801c3b8 <_strtoul_l.constprop.0+0xa4>
 801c386:	fb00 4003 	mla	r0, r0, r3, r4
 801c38a:	2701      	movs	r7, #1
 801c38c:	f815 4b01 	ldrb.w	r4, [r5], #1
 801c390:	e7e9      	b.n	801c366 <_strtoul_l.constprop.0+0x52>
 801c392:	2c2b      	cmp	r4, #43	; 0x2b
 801c394:	bf04      	itt	eq
 801c396:	782c      	ldrbeq	r4, [r5, #0]
 801c398:	1c85      	addeq	r5, r0, #2
 801c39a:	e7cc      	b.n	801c336 <_strtoul_l.constprop.0+0x22>
 801c39c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801c3a0:	f1bc 0f19 	cmp.w	ip, #25
 801c3a4:	d801      	bhi.n	801c3aa <_strtoul_l.constprop.0+0x96>
 801c3a6:	3c37      	subs	r4, #55	; 0x37
 801c3a8:	e7e3      	b.n	801c372 <_strtoul_l.constprop.0+0x5e>
 801c3aa:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801c3ae:	f1bc 0f19 	cmp.w	ip, #25
 801c3b2:	d804      	bhi.n	801c3be <_strtoul_l.constprop.0+0xaa>
 801c3b4:	3c57      	subs	r4, #87	; 0x57
 801c3b6:	e7dc      	b.n	801c372 <_strtoul_l.constprop.0+0x5e>
 801c3b8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801c3bc:	e7e6      	b.n	801c38c <_strtoul_l.constprop.0+0x78>
 801c3be:	1c7b      	adds	r3, r7, #1
 801c3c0:	d106      	bne.n	801c3d0 <_strtoul_l.constprop.0+0xbc>
 801c3c2:	2322      	movs	r3, #34	; 0x22
 801c3c4:	f8ce 3000 	str.w	r3, [lr]
 801c3c8:	4638      	mov	r0, r7
 801c3ca:	b932      	cbnz	r2, 801c3da <_strtoul_l.constprop.0+0xc6>
 801c3cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c3d0:	b106      	cbz	r6, 801c3d4 <_strtoul_l.constprop.0+0xc0>
 801c3d2:	4240      	negs	r0, r0
 801c3d4:	2a00      	cmp	r2, #0
 801c3d6:	d0f9      	beq.n	801c3cc <_strtoul_l.constprop.0+0xb8>
 801c3d8:	b107      	cbz	r7, 801c3dc <_strtoul_l.constprop.0+0xc8>
 801c3da:	1e69      	subs	r1, r5, #1
 801c3dc:	6011      	str	r1, [r2, #0]
 801c3de:	e7f5      	b.n	801c3cc <_strtoul_l.constprop.0+0xb8>
 801c3e0:	2430      	movs	r4, #48	; 0x30
 801c3e2:	2b00      	cmp	r3, #0
 801c3e4:	d1b5      	bne.n	801c352 <_strtoul_l.constprop.0+0x3e>
 801c3e6:	2308      	movs	r3, #8
 801c3e8:	e7b3      	b.n	801c352 <_strtoul_l.constprop.0+0x3e>
 801c3ea:	2c30      	cmp	r4, #48	; 0x30
 801c3ec:	d0a9      	beq.n	801c342 <_strtoul_l.constprop.0+0x2e>
 801c3ee:	230a      	movs	r3, #10
 801c3f0:	e7af      	b.n	801c352 <_strtoul_l.constprop.0+0x3e>
 801c3f2:	bf00      	nop
 801c3f4:	0801f640 	.word	0x0801f640

0801c3f8 <strtoul>:
 801c3f8:	4613      	mov	r3, r2
 801c3fa:	460a      	mov	r2, r1
 801c3fc:	4601      	mov	r1, r0
 801c3fe:	4802      	ldr	r0, [pc, #8]	; (801c408 <strtoul+0x10>)
 801c400:	6800      	ldr	r0, [r0, #0]
 801c402:	f7ff bf87 	b.w	801c314 <_strtoul_l.constprop.0>
 801c406:	bf00      	nop
 801c408:	200021d8 	.word	0x200021d8

0801c40c <std>:
 801c40c:	2300      	movs	r3, #0
 801c40e:	b510      	push	{r4, lr}
 801c410:	4604      	mov	r4, r0
 801c412:	e9c0 3300 	strd	r3, r3, [r0]
 801c416:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801c41a:	6083      	str	r3, [r0, #8]
 801c41c:	8181      	strh	r1, [r0, #12]
 801c41e:	6643      	str	r3, [r0, #100]	; 0x64
 801c420:	81c2      	strh	r2, [r0, #14]
 801c422:	6183      	str	r3, [r0, #24]
 801c424:	4619      	mov	r1, r3
 801c426:	2208      	movs	r2, #8
 801c428:	305c      	adds	r0, #92	; 0x5c
 801c42a:	f000 f98b 	bl	801c744 <memset>
 801c42e:	4b0d      	ldr	r3, [pc, #52]	; (801c464 <std+0x58>)
 801c430:	6263      	str	r3, [r4, #36]	; 0x24
 801c432:	4b0d      	ldr	r3, [pc, #52]	; (801c468 <std+0x5c>)
 801c434:	62a3      	str	r3, [r4, #40]	; 0x28
 801c436:	4b0d      	ldr	r3, [pc, #52]	; (801c46c <std+0x60>)
 801c438:	62e3      	str	r3, [r4, #44]	; 0x2c
 801c43a:	4b0d      	ldr	r3, [pc, #52]	; (801c470 <std+0x64>)
 801c43c:	6323      	str	r3, [r4, #48]	; 0x30
 801c43e:	4b0d      	ldr	r3, [pc, #52]	; (801c474 <std+0x68>)
 801c440:	6224      	str	r4, [r4, #32]
 801c442:	429c      	cmp	r4, r3
 801c444:	d006      	beq.n	801c454 <std+0x48>
 801c446:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801c44a:	4294      	cmp	r4, r2
 801c44c:	d002      	beq.n	801c454 <std+0x48>
 801c44e:	33d0      	adds	r3, #208	; 0xd0
 801c450:	429c      	cmp	r4, r3
 801c452:	d105      	bne.n	801c460 <std+0x54>
 801c454:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801c458:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c45c:	f000 ba98 	b.w	801c990 <__retarget_lock_init_recursive>
 801c460:	bd10      	pop	{r4, pc}
 801c462:	bf00      	nop
 801c464:	0801c5f9 	.word	0x0801c5f9
 801c468:	0801c61b 	.word	0x0801c61b
 801c46c:	0801c653 	.word	0x0801c653
 801c470:	0801c677 	.word	0x0801c677
 801c474:	20010ba8 	.word	0x20010ba8

0801c478 <stdio_exit_handler>:
 801c478:	4a02      	ldr	r2, [pc, #8]	; (801c484 <stdio_exit_handler+0xc>)
 801c47a:	4903      	ldr	r1, [pc, #12]	; (801c488 <stdio_exit_handler+0x10>)
 801c47c:	4803      	ldr	r0, [pc, #12]	; (801c48c <stdio_exit_handler+0x14>)
 801c47e:	f000 b869 	b.w	801c554 <_fwalk_sglue>
 801c482:	bf00      	nop
 801c484:	20002180 	.word	0x20002180
 801c488:	0801d19d 	.word	0x0801d19d
 801c48c:	2000218c 	.word	0x2000218c

0801c490 <cleanup_stdio>:
 801c490:	6841      	ldr	r1, [r0, #4]
 801c492:	4b0c      	ldr	r3, [pc, #48]	; (801c4c4 <cleanup_stdio+0x34>)
 801c494:	4299      	cmp	r1, r3
 801c496:	b510      	push	{r4, lr}
 801c498:	4604      	mov	r4, r0
 801c49a:	d001      	beq.n	801c4a0 <cleanup_stdio+0x10>
 801c49c:	f000 fe7e 	bl	801d19c <_fflush_r>
 801c4a0:	68a1      	ldr	r1, [r4, #8]
 801c4a2:	4b09      	ldr	r3, [pc, #36]	; (801c4c8 <cleanup_stdio+0x38>)
 801c4a4:	4299      	cmp	r1, r3
 801c4a6:	d002      	beq.n	801c4ae <cleanup_stdio+0x1e>
 801c4a8:	4620      	mov	r0, r4
 801c4aa:	f000 fe77 	bl	801d19c <_fflush_r>
 801c4ae:	68e1      	ldr	r1, [r4, #12]
 801c4b0:	4b06      	ldr	r3, [pc, #24]	; (801c4cc <cleanup_stdio+0x3c>)
 801c4b2:	4299      	cmp	r1, r3
 801c4b4:	d004      	beq.n	801c4c0 <cleanup_stdio+0x30>
 801c4b6:	4620      	mov	r0, r4
 801c4b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c4bc:	f000 be6e 	b.w	801d19c <_fflush_r>
 801c4c0:	bd10      	pop	{r4, pc}
 801c4c2:	bf00      	nop
 801c4c4:	20010ba8 	.word	0x20010ba8
 801c4c8:	20010c10 	.word	0x20010c10
 801c4cc:	20010c78 	.word	0x20010c78

0801c4d0 <global_stdio_init.part.0>:
 801c4d0:	b510      	push	{r4, lr}
 801c4d2:	4b0b      	ldr	r3, [pc, #44]	; (801c500 <global_stdio_init.part.0+0x30>)
 801c4d4:	4c0b      	ldr	r4, [pc, #44]	; (801c504 <global_stdio_init.part.0+0x34>)
 801c4d6:	4a0c      	ldr	r2, [pc, #48]	; (801c508 <global_stdio_init.part.0+0x38>)
 801c4d8:	601a      	str	r2, [r3, #0]
 801c4da:	4620      	mov	r0, r4
 801c4dc:	2200      	movs	r2, #0
 801c4de:	2104      	movs	r1, #4
 801c4e0:	f7ff ff94 	bl	801c40c <std>
 801c4e4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801c4e8:	2201      	movs	r2, #1
 801c4ea:	2109      	movs	r1, #9
 801c4ec:	f7ff ff8e 	bl	801c40c <std>
 801c4f0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801c4f4:	2202      	movs	r2, #2
 801c4f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c4fa:	2112      	movs	r1, #18
 801c4fc:	f7ff bf86 	b.w	801c40c <std>
 801c500:	20010ce0 	.word	0x20010ce0
 801c504:	20010ba8 	.word	0x20010ba8
 801c508:	0801c479 	.word	0x0801c479

0801c50c <__sfp_lock_acquire>:
 801c50c:	4801      	ldr	r0, [pc, #4]	; (801c514 <__sfp_lock_acquire+0x8>)
 801c50e:	f000 ba40 	b.w	801c992 <__retarget_lock_acquire_recursive>
 801c512:	bf00      	nop
 801c514:	20010cea 	.word	0x20010cea

0801c518 <__sfp_lock_release>:
 801c518:	4801      	ldr	r0, [pc, #4]	; (801c520 <__sfp_lock_release+0x8>)
 801c51a:	f000 ba3b 	b.w	801c994 <__retarget_lock_release_recursive>
 801c51e:	bf00      	nop
 801c520:	20010cea 	.word	0x20010cea

0801c524 <__sinit>:
 801c524:	b510      	push	{r4, lr}
 801c526:	4604      	mov	r4, r0
 801c528:	f7ff fff0 	bl	801c50c <__sfp_lock_acquire>
 801c52c:	6a23      	ldr	r3, [r4, #32]
 801c52e:	b11b      	cbz	r3, 801c538 <__sinit+0x14>
 801c530:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c534:	f7ff bff0 	b.w	801c518 <__sfp_lock_release>
 801c538:	4b04      	ldr	r3, [pc, #16]	; (801c54c <__sinit+0x28>)
 801c53a:	6223      	str	r3, [r4, #32]
 801c53c:	4b04      	ldr	r3, [pc, #16]	; (801c550 <__sinit+0x2c>)
 801c53e:	681b      	ldr	r3, [r3, #0]
 801c540:	2b00      	cmp	r3, #0
 801c542:	d1f5      	bne.n	801c530 <__sinit+0xc>
 801c544:	f7ff ffc4 	bl	801c4d0 <global_stdio_init.part.0>
 801c548:	e7f2      	b.n	801c530 <__sinit+0xc>
 801c54a:	bf00      	nop
 801c54c:	0801c491 	.word	0x0801c491
 801c550:	20010ce0 	.word	0x20010ce0

0801c554 <_fwalk_sglue>:
 801c554:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c558:	4607      	mov	r7, r0
 801c55a:	4688      	mov	r8, r1
 801c55c:	4614      	mov	r4, r2
 801c55e:	2600      	movs	r6, #0
 801c560:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801c564:	f1b9 0901 	subs.w	r9, r9, #1
 801c568:	d505      	bpl.n	801c576 <_fwalk_sglue+0x22>
 801c56a:	6824      	ldr	r4, [r4, #0]
 801c56c:	2c00      	cmp	r4, #0
 801c56e:	d1f7      	bne.n	801c560 <_fwalk_sglue+0xc>
 801c570:	4630      	mov	r0, r6
 801c572:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c576:	89ab      	ldrh	r3, [r5, #12]
 801c578:	2b01      	cmp	r3, #1
 801c57a:	d907      	bls.n	801c58c <_fwalk_sglue+0x38>
 801c57c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801c580:	3301      	adds	r3, #1
 801c582:	d003      	beq.n	801c58c <_fwalk_sglue+0x38>
 801c584:	4629      	mov	r1, r5
 801c586:	4638      	mov	r0, r7
 801c588:	47c0      	blx	r8
 801c58a:	4306      	orrs	r6, r0
 801c58c:	3568      	adds	r5, #104	; 0x68
 801c58e:	e7e9      	b.n	801c564 <_fwalk_sglue+0x10>

0801c590 <sniprintf>:
 801c590:	b40c      	push	{r2, r3}
 801c592:	b530      	push	{r4, r5, lr}
 801c594:	4b17      	ldr	r3, [pc, #92]	; (801c5f4 <sniprintf+0x64>)
 801c596:	1e0c      	subs	r4, r1, #0
 801c598:	681d      	ldr	r5, [r3, #0]
 801c59a:	b09d      	sub	sp, #116	; 0x74
 801c59c:	da08      	bge.n	801c5b0 <sniprintf+0x20>
 801c59e:	238b      	movs	r3, #139	; 0x8b
 801c5a0:	602b      	str	r3, [r5, #0]
 801c5a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c5a6:	b01d      	add	sp, #116	; 0x74
 801c5a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c5ac:	b002      	add	sp, #8
 801c5ae:	4770      	bx	lr
 801c5b0:	f44f 7302 	mov.w	r3, #520	; 0x208
 801c5b4:	f8ad 3014 	strh.w	r3, [sp, #20]
 801c5b8:	bf14      	ite	ne
 801c5ba:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801c5be:	4623      	moveq	r3, r4
 801c5c0:	9304      	str	r3, [sp, #16]
 801c5c2:	9307      	str	r3, [sp, #28]
 801c5c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801c5c8:	9002      	str	r0, [sp, #8]
 801c5ca:	9006      	str	r0, [sp, #24]
 801c5cc:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c5d0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801c5d2:	ab21      	add	r3, sp, #132	; 0x84
 801c5d4:	a902      	add	r1, sp, #8
 801c5d6:	4628      	mov	r0, r5
 801c5d8:	9301      	str	r3, [sp, #4]
 801c5da:	f000 facb 	bl	801cb74 <_svfiprintf_r>
 801c5de:	1c43      	adds	r3, r0, #1
 801c5e0:	bfbc      	itt	lt
 801c5e2:	238b      	movlt	r3, #139	; 0x8b
 801c5e4:	602b      	strlt	r3, [r5, #0]
 801c5e6:	2c00      	cmp	r4, #0
 801c5e8:	d0dd      	beq.n	801c5a6 <sniprintf+0x16>
 801c5ea:	9b02      	ldr	r3, [sp, #8]
 801c5ec:	2200      	movs	r2, #0
 801c5ee:	701a      	strb	r2, [r3, #0]
 801c5f0:	e7d9      	b.n	801c5a6 <sniprintf+0x16>
 801c5f2:	bf00      	nop
 801c5f4:	200021d8 	.word	0x200021d8

0801c5f8 <__sread>:
 801c5f8:	b510      	push	{r4, lr}
 801c5fa:	460c      	mov	r4, r1
 801c5fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c600:	f000 f968 	bl	801c8d4 <_read_r>
 801c604:	2800      	cmp	r0, #0
 801c606:	bfab      	itete	ge
 801c608:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801c60a:	89a3      	ldrhlt	r3, [r4, #12]
 801c60c:	181b      	addge	r3, r3, r0
 801c60e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801c612:	bfac      	ite	ge
 801c614:	6563      	strge	r3, [r4, #84]	; 0x54
 801c616:	81a3      	strhlt	r3, [r4, #12]
 801c618:	bd10      	pop	{r4, pc}

0801c61a <__swrite>:
 801c61a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c61e:	461f      	mov	r7, r3
 801c620:	898b      	ldrh	r3, [r1, #12]
 801c622:	05db      	lsls	r3, r3, #23
 801c624:	4605      	mov	r5, r0
 801c626:	460c      	mov	r4, r1
 801c628:	4616      	mov	r6, r2
 801c62a:	d505      	bpl.n	801c638 <__swrite+0x1e>
 801c62c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c630:	2302      	movs	r3, #2
 801c632:	2200      	movs	r2, #0
 801c634:	f000 f93c 	bl	801c8b0 <_lseek_r>
 801c638:	89a3      	ldrh	r3, [r4, #12]
 801c63a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c63e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801c642:	81a3      	strh	r3, [r4, #12]
 801c644:	4632      	mov	r2, r6
 801c646:	463b      	mov	r3, r7
 801c648:	4628      	mov	r0, r5
 801c64a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c64e:	f000 b963 	b.w	801c918 <_write_r>

0801c652 <__sseek>:
 801c652:	b510      	push	{r4, lr}
 801c654:	460c      	mov	r4, r1
 801c656:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c65a:	f000 f929 	bl	801c8b0 <_lseek_r>
 801c65e:	1c43      	adds	r3, r0, #1
 801c660:	89a3      	ldrh	r3, [r4, #12]
 801c662:	bf15      	itete	ne
 801c664:	6560      	strne	r0, [r4, #84]	; 0x54
 801c666:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801c66a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801c66e:	81a3      	strheq	r3, [r4, #12]
 801c670:	bf18      	it	ne
 801c672:	81a3      	strhne	r3, [r4, #12]
 801c674:	bd10      	pop	{r4, pc}

0801c676 <__sclose>:
 801c676:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c67a:	f000 b8b3 	b.w	801c7e4 <_close_r>

0801c67e <_vsniprintf_r>:
 801c67e:	b530      	push	{r4, r5, lr}
 801c680:	4614      	mov	r4, r2
 801c682:	2c00      	cmp	r4, #0
 801c684:	b09b      	sub	sp, #108	; 0x6c
 801c686:	4605      	mov	r5, r0
 801c688:	461a      	mov	r2, r3
 801c68a:	da05      	bge.n	801c698 <_vsniprintf_r+0x1a>
 801c68c:	238b      	movs	r3, #139	; 0x8b
 801c68e:	6003      	str	r3, [r0, #0]
 801c690:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c694:	b01b      	add	sp, #108	; 0x6c
 801c696:	bd30      	pop	{r4, r5, pc}
 801c698:	f44f 7302 	mov.w	r3, #520	; 0x208
 801c69c:	f8ad 300c 	strh.w	r3, [sp, #12]
 801c6a0:	bf14      	ite	ne
 801c6a2:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801c6a6:	4623      	moveq	r3, r4
 801c6a8:	9302      	str	r3, [sp, #8]
 801c6aa:	9305      	str	r3, [sp, #20]
 801c6ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801c6b0:	9100      	str	r1, [sp, #0]
 801c6b2:	9104      	str	r1, [sp, #16]
 801c6b4:	f8ad 300e 	strh.w	r3, [sp, #14]
 801c6b8:	4669      	mov	r1, sp
 801c6ba:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801c6bc:	f000 fa5a 	bl	801cb74 <_svfiprintf_r>
 801c6c0:	1c43      	adds	r3, r0, #1
 801c6c2:	bfbc      	itt	lt
 801c6c4:	238b      	movlt	r3, #139	; 0x8b
 801c6c6:	602b      	strlt	r3, [r5, #0]
 801c6c8:	2c00      	cmp	r4, #0
 801c6ca:	d0e3      	beq.n	801c694 <_vsniprintf_r+0x16>
 801c6cc:	9b00      	ldr	r3, [sp, #0]
 801c6ce:	2200      	movs	r2, #0
 801c6d0:	701a      	strb	r2, [r3, #0]
 801c6d2:	e7df      	b.n	801c694 <_vsniprintf_r+0x16>

0801c6d4 <vsniprintf>:
 801c6d4:	b507      	push	{r0, r1, r2, lr}
 801c6d6:	9300      	str	r3, [sp, #0]
 801c6d8:	4613      	mov	r3, r2
 801c6da:	460a      	mov	r2, r1
 801c6dc:	4601      	mov	r1, r0
 801c6de:	4803      	ldr	r0, [pc, #12]	; (801c6ec <vsniprintf+0x18>)
 801c6e0:	6800      	ldr	r0, [r0, #0]
 801c6e2:	f7ff ffcc 	bl	801c67e <_vsniprintf_r>
 801c6e6:	b003      	add	sp, #12
 801c6e8:	f85d fb04 	ldr.w	pc, [sp], #4
 801c6ec:	200021d8 	.word	0x200021d8

0801c6f0 <memcmp>:
 801c6f0:	b510      	push	{r4, lr}
 801c6f2:	3901      	subs	r1, #1
 801c6f4:	4402      	add	r2, r0
 801c6f6:	4290      	cmp	r0, r2
 801c6f8:	d101      	bne.n	801c6fe <memcmp+0xe>
 801c6fa:	2000      	movs	r0, #0
 801c6fc:	e005      	b.n	801c70a <memcmp+0x1a>
 801c6fe:	7803      	ldrb	r3, [r0, #0]
 801c700:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801c704:	42a3      	cmp	r3, r4
 801c706:	d001      	beq.n	801c70c <memcmp+0x1c>
 801c708:	1b18      	subs	r0, r3, r4
 801c70a:	bd10      	pop	{r4, pc}
 801c70c:	3001      	adds	r0, #1
 801c70e:	e7f2      	b.n	801c6f6 <memcmp+0x6>

0801c710 <memmove>:
 801c710:	4288      	cmp	r0, r1
 801c712:	b510      	push	{r4, lr}
 801c714:	eb01 0402 	add.w	r4, r1, r2
 801c718:	d902      	bls.n	801c720 <memmove+0x10>
 801c71a:	4284      	cmp	r4, r0
 801c71c:	4623      	mov	r3, r4
 801c71e:	d807      	bhi.n	801c730 <memmove+0x20>
 801c720:	1e43      	subs	r3, r0, #1
 801c722:	42a1      	cmp	r1, r4
 801c724:	d008      	beq.n	801c738 <memmove+0x28>
 801c726:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c72a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801c72e:	e7f8      	b.n	801c722 <memmove+0x12>
 801c730:	4402      	add	r2, r0
 801c732:	4601      	mov	r1, r0
 801c734:	428a      	cmp	r2, r1
 801c736:	d100      	bne.n	801c73a <memmove+0x2a>
 801c738:	bd10      	pop	{r4, pc}
 801c73a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801c73e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801c742:	e7f7      	b.n	801c734 <memmove+0x24>

0801c744 <memset>:
 801c744:	4402      	add	r2, r0
 801c746:	4603      	mov	r3, r0
 801c748:	4293      	cmp	r3, r2
 801c74a:	d100      	bne.n	801c74e <memset+0xa>
 801c74c:	4770      	bx	lr
 801c74e:	f803 1b01 	strb.w	r1, [r3], #1
 801c752:	e7f9      	b.n	801c748 <memset+0x4>

0801c754 <strchr>:
 801c754:	b2c9      	uxtb	r1, r1
 801c756:	4603      	mov	r3, r0
 801c758:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c75c:	b11a      	cbz	r2, 801c766 <strchr+0x12>
 801c75e:	428a      	cmp	r2, r1
 801c760:	d1f9      	bne.n	801c756 <strchr+0x2>
 801c762:	4618      	mov	r0, r3
 801c764:	4770      	bx	lr
 801c766:	2900      	cmp	r1, #0
 801c768:	bf18      	it	ne
 801c76a:	2300      	movne	r3, #0
 801c76c:	e7f9      	b.n	801c762 <strchr+0xe>

0801c76e <strncmp>:
 801c76e:	b510      	push	{r4, lr}
 801c770:	b16a      	cbz	r2, 801c78e <strncmp+0x20>
 801c772:	3901      	subs	r1, #1
 801c774:	1884      	adds	r4, r0, r2
 801c776:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c77a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801c77e:	429a      	cmp	r2, r3
 801c780:	d103      	bne.n	801c78a <strncmp+0x1c>
 801c782:	42a0      	cmp	r0, r4
 801c784:	d001      	beq.n	801c78a <strncmp+0x1c>
 801c786:	2a00      	cmp	r2, #0
 801c788:	d1f5      	bne.n	801c776 <strncmp+0x8>
 801c78a:	1ad0      	subs	r0, r2, r3
 801c78c:	bd10      	pop	{r4, pc}
 801c78e:	4610      	mov	r0, r2
 801c790:	e7fc      	b.n	801c78c <strncmp+0x1e>

0801c792 <strncpy>:
 801c792:	b510      	push	{r4, lr}
 801c794:	3901      	subs	r1, #1
 801c796:	4603      	mov	r3, r0
 801c798:	b132      	cbz	r2, 801c7a8 <strncpy+0x16>
 801c79a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801c79e:	f803 4b01 	strb.w	r4, [r3], #1
 801c7a2:	3a01      	subs	r2, #1
 801c7a4:	2c00      	cmp	r4, #0
 801c7a6:	d1f7      	bne.n	801c798 <strncpy+0x6>
 801c7a8:	441a      	add	r2, r3
 801c7aa:	2100      	movs	r1, #0
 801c7ac:	4293      	cmp	r3, r2
 801c7ae:	d100      	bne.n	801c7b2 <strncpy+0x20>
 801c7b0:	bd10      	pop	{r4, pc}
 801c7b2:	f803 1b01 	strb.w	r1, [r3], #1
 801c7b6:	e7f9      	b.n	801c7ac <strncpy+0x1a>

0801c7b8 <strstr>:
 801c7b8:	780a      	ldrb	r2, [r1, #0]
 801c7ba:	b570      	push	{r4, r5, r6, lr}
 801c7bc:	b96a      	cbnz	r2, 801c7da <strstr+0x22>
 801c7be:	bd70      	pop	{r4, r5, r6, pc}
 801c7c0:	429a      	cmp	r2, r3
 801c7c2:	d109      	bne.n	801c7d8 <strstr+0x20>
 801c7c4:	460c      	mov	r4, r1
 801c7c6:	4605      	mov	r5, r0
 801c7c8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801c7cc:	2b00      	cmp	r3, #0
 801c7ce:	d0f6      	beq.n	801c7be <strstr+0x6>
 801c7d0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801c7d4:	429e      	cmp	r6, r3
 801c7d6:	d0f7      	beq.n	801c7c8 <strstr+0x10>
 801c7d8:	3001      	adds	r0, #1
 801c7da:	7803      	ldrb	r3, [r0, #0]
 801c7dc:	2b00      	cmp	r3, #0
 801c7de:	d1ef      	bne.n	801c7c0 <strstr+0x8>
 801c7e0:	4618      	mov	r0, r3
 801c7e2:	e7ec      	b.n	801c7be <strstr+0x6>

0801c7e4 <_close_r>:
 801c7e4:	b538      	push	{r3, r4, r5, lr}
 801c7e6:	4d06      	ldr	r5, [pc, #24]	; (801c800 <_close_r+0x1c>)
 801c7e8:	2300      	movs	r3, #0
 801c7ea:	4604      	mov	r4, r0
 801c7ec:	4608      	mov	r0, r1
 801c7ee:	602b      	str	r3, [r5, #0]
 801c7f0:	f7e6 fb4d 	bl	8002e8e <_close>
 801c7f4:	1c43      	adds	r3, r0, #1
 801c7f6:	d102      	bne.n	801c7fe <_close_r+0x1a>
 801c7f8:	682b      	ldr	r3, [r5, #0]
 801c7fa:	b103      	cbz	r3, 801c7fe <_close_r+0x1a>
 801c7fc:	6023      	str	r3, [r4, #0]
 801c7fe:	bd38      	pop	{r3, r4, r5, pc}
 801c800:	20010ce4 	.word	0x20010ce4

0801c804 <_reclaim_reent>:
 801c804:	4b29      	ldr	r3, [pc, #164]	; (801c8ac <_reclaim_reent+0xa8>)
 801c806:	681b      	ldr	r3, [r3, #0]
 801c808:	4283      	cmp	r3, r0
 801c80a:	b570      	push	{r4, r5, r6, lr}
 801c80c:	4604      	mov	r4, r0
 801c80e:	d04b      	beq.n	801c8a8 <_reclaim_reent+0xa4>
 801c810:	69c3      	ldr	r3, [r0, #28]
 801c812:	b143      	cbz	r3, 801c826 <_reclaim_reent+0x22>
 801c814:	68db      	ldr	r3, [r3, #12]
 801c816:	2b00      	cmp	r3, #0
 801c818:	d144      	bne.n	801c8a4 <_reclaim_reent+0xa0>
 801c81a:	69e3      	ldr	r3, [r4, #28]
 801c81c:	6819      	ldr	r1, [r3, #0]
 801c81e:	b111      	cbz	r1, 801c826 <_reclaim_reent+0x22>
 801c820:	4620      	mov	r0, r4
 801c822:	f000 f8f9 	bl	801ca18 <_free_r>
 801c826:	6961      	ldr	r1, [r4, #20]
 801c828:	b111      	cbz	r1, 801c830 <_reclaim_reent+0x2c>
 801c82a:	4620      	mov	r0, r4
 801c82c:	f000 f8f4 	bl	801ca18 <_free_r>
 801c830:	69e1      	ldr	r1, [r4, #28]
 801c832:	b111      	cbz	r1, 801c83a <_reclaim_reent+0x36>
 801c834:	4620      	mov	r0, r4
 801c836:	f000 f8ef 	bl	801ca18 <_free_r>
 801c83a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801c83c:	b111      	cbz	r1, 801c844 <_reclaim_reent+0x40>
 801c83e:	4620      	mov	r0, r4
 801c840:	f000 f8ea 	bl	801ca18 <_free_r>
 801c844:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c846:	b111      	cbz	r1, 801c84e <_reclaim_reent+0x4a>
 801c848:	4620      	mov	r0, r4
 801c84a:	f000 f8e5 	bl	801ca18 <_free_r>
 801c84e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801c850:	b111      	cbz	r1, 801c858 <_reclaim_reent+0x54>
 801c852:	4620      	mov	r0, r4
 801c854:	f000 f8e0 	bl	801ca18 <_free_r>
 801c858:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801c85a:	b111      	cbz	r1, 801c862 <_reclaim_reent+0x5e>
 801c85c:	4620      	mov	r0, r4
 801c85e:	f000 f8db 	bl	801ca18 <_free_r>
 801c862:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801c864:	b111      	cbz	r1, 801c86c <_reclaim_reent+0x68>
 801c866:	4620      	mov	r0, r4
 801c868:	f000 f8d6 	bl	801ca18 <_free_r>
 801c86c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801c86e:	b111      	cbz	r1, 801c876 <_reclaim_reent+0x72>
 801c870:	4620      	mov	r0, r4
 801c872:	f000 f8d1 	bl	801ca18 <_free_r>
 801c876:	6a23      	ldr	r3, [r4, #32]
 801c878:	b1b3      	cbz	r3, 801c8a8 <_reclaim_reent+0xa4>
 801c87a:	4620      	mov	r0, r4
 801c87c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c880:	4718      	bx	r3
 801c882:	5949      	ldr	r1, [r1, r5]
 801c884:	b941      	cbnz	r1, 801c898 <_reclaim_reent+0x94>
 801c886:	3504      	adds	r5, #4
 801c888:	69e3      	ldr	r3, [r4, #28]
 801c88a:	2d80      	cmp	r5, #128	; 0x80
 801c88c:	68d9      	ldr	r1, [r3, #12]
 801c88e:	d1f8      	bne.n	801c882 <_reclaim_reent+0x7e>
 801c890:	4620      	mov	r0, r4
 801c892:	f000 f8c1 	bl	801ca18 <_free_r>
 801c896:	e7c0      	b.n	801c81a <_reclaim_reent+0x16>
 801c898:	680e      	ldr	r6, [r1, #0]
 801c89a:	4620      	mov	r0, r4
 801c89c:	f000 f8bc 	bl	801ca18 <_free_r>
 801c8a0:	4631      	mov	r1, r6
 801c8a2:	e7ef      	b.n	801c884 <_reclaim_reent+0x80>
 801c8a4:	2500      	movs	r5, #0
 801c8a6:	e7ef      	b.n	801c888 <_reclaim_reent+0x84>
 801c8a8:	bd70      	pop	{r4, r5, r6, pc}
 801c8aa:	bf00      	nop
 801c8ac:	200021d8 	.word	0x200021d8

0801c8b0 <_lseek_r>:
 801c8b0:	b538      	push	{r3, r4, r5, lr}
 801c8b2:	4d07      	ldr	r5, [pc, #28]	; (801c8d0 <_lseek_r+0x20>)
 801c8b4:	4604      	mov	r4, r0
 801c8b6:	4608      	mov	r0, r1
 801c8b8:	4611      	mov	r1, r2
 801c8ba:	2200      	movs	r2, #0
 801c8bc:	602a      	str	r2, [r5, #0]
 801c8be:	461a      	mov	r2, r3
 801c8c0:	f7e6 fb0c 	bl	8002edc <_lseek>
 801c8c4:	1c43      	adds	r3, r0, #1
 801c8c6:	d102      	bne.n	801c8ce <_lseek_r+0x1e>
 801c8c8:	682b      	ldr	r3, [r5, #0]
 801c8ca:	b103      	cbz	r3, 801c8ce <_lseek_r+0x1e>
 801c8cc:	6023      	str	r3, [r4, #0]
 801c8ce:	bd38      	pop	{r3, r4, r5, pc}
 801c8d0:	20010ce4 	.word	0x20010ce4

0801c8d4 <_read_r>:
 801c8d4:	b538      	push	{r3, r4, r5, lr}
 801c8d6:	4d07      	ldr	r5, [pc, #28]	; (801c8f4 <_read_r+0x20>)
 801c8d8:	4604      	mov	r4, r0
 801c8da:	4608      	mov	r0, r1
 801c8dc:	4611      	mov	r1, r2
 801c8de:	2200      	movs	r2, #0
 801c8e0:	602a      	str	r2, [r5, #0]
 801c8e2:	461a      	mov	r2, r3
 801c8e4:	f7e6 fa9a 	bl	8002e1c <_read>
 801c8e8:	1c43      	adds	r3, r0, #1
 801c8ea:	d102      	bne.n	801c8f2 <_read_r+0x1e>
 801c8ec:	682b      	ldr	r3, [r5, #0]
 801c8ee:	b103      	cbz	r3, 801c8f2 <_read_r+0x1e>
 801c8f0:	6023      	str	r3, [r4, #0]
 801c8f2:	bd38      	pop	{r3, r4, r5, pc}
 801c8f4:	20010ce4 	.word	0x20010ce4

0801c8f8 <_sbrk_r>:
 801c8f8:	b538      	push	{r3, r4, r5, lr}
 801c8fa:	4d06      	ldr	r5, [pc, #24]	; (801c914 <_sbrk_r+0x1c>)
 801c8fc:	2300      	movs	r3, #0
 801c8fe:	4604      	mov	r4, r0
 801c900:	4608      	mov	r0, r1
 801c902:	602b      	str	r3, [r5, #0]
 801c904:	f7e6 faf8 	bl	8002ef8 <_sbrk>
 801c908:	1c43      	adds	r3, r0, #1
 801c90a:	d102      	bne.n	801c912 <_sbrk_r+0x1a>
 801c90c:	682b      	ldr	r3, [r5, #0]
 801c90e:	b103      	cbz	r3, 801c912 <_sbrk_r+0x1a>
 801c910:	6023      	str	r3, [r4, #0]
 801c912:	bd38      	pop	{r3, r4, r5, pc}
 801c914:	20010ce4 	.word	0x20010ce4

0801c918 <_write_r>:
 801c918:	b538      	push	{r3, r4, r5, lr}
 801c91a:	4d07      	ldr	r5, [pc, #28]	; (801c938 <_write_r+0x20>)
 801c91c:	4604      	mov	r4, r0
 801c91e:	4608      	mov	r0, r1
 801c920:	4611      	mov	r1, r2
 801c922:	2200      	movs	r2, #0
 801c924:	602a      	str	r2, [r5, #0]
 801c926:	461a      	mov	r2, r3
 801c928:	f7e6 fa95 	bl	8002e56 <_write>
 801c92c:	1c43      	adds	r3, r0, #1
 801c92e:	d102      	bne.n	801c936 <_write_r+0x1e>
 801c930:	682b      	ldr	r3, [r5, #0]
 801c932:	b103      	cbz	r3, 801c936 <_write_r+0x1e>
 801c934:	6023      	str	r3, [r4, #0]
 801c936:	bd38      	pop	{r3, r4, r5, pc}
 801c938:	20010ce4 	.word	0x20010ce4

0801c93c <__errno>:
 801c93c:	4b01      	ldr	r3, [pc, #4]	; (801c944 <__errno+0x8>)
 801c93e:	6818      	ldr	r0, [r3, #0]
 801c940:	4770      	bx	lr
 801c942:	bf00      	nop
 801c944:	200021d8 	.word	0x200021d8

0801c948 <__libc_init_array>:
 801c948:	b570      	push	{r4, r5, r6, lr}
 801c94a:	4d0d      	ldr	r5, [pc, #52]	; (801c980 <__libc_init_array+0x38>)
 801c94c:	4c0d      	ldr	r4, [pc, #52]	; (801c984 <__libc_init_array+0x3c>)
 801c94e:	1b64      	subs	r4, r4, r5
 801c950:	10a4      	asrs	r4, r4, #2
 801c952:	2600      	movs	r6, #0
 801c954:	42a6      	cmp	r6, r4
 801c956:	d109      	bne.n	801c96c <__libc_init_array+0x24>
 801c958:	4d0b      	ldr	r5, [pc, #44]	; (801c988 <__libc_init_array+0x40>)
 801c95a:	4c0c      	ldr	r4, [pc, #48]	; (801c98c <__libc_init_array+0x44>)
 801c95c:	f000 ff00 	bl	801d760 <_init>
 801c960:	1b64      	subs	r4, r4, r5
 801c962:	10a4      	asrs	r4, r4, #2
 801c964:	2600      	movs	r6, #0
 801c966:	42a6      	cmp	r6, r4
 801c968:	d105      	bne.n	801c976 <__libc_init_array+0x2e>
 801c96a:	bd70      	pop	{r4, r5, r6, pc}
 801c96c:	f855 3b04 	ldr.w	r3, [r5], #4
 801c970:	4798      	blx	r3
 801c972:	3601      	adds	r6, #1
 801c974:	e7ee      	b.n	801c954 <__libc_init_array+0xc>
 801c976:	f855 3b04 	ldr.w	r3, [r5], #4
 801c97a:	4798      	blx	r3
 801c97c:	3601      	adds	r6, #1
 801c97e:	e7f2      	b.n	801c966 <__libc_init_array+0x1e>
 801c980:	0801f7b8 	.word	0x0801f7b8
 801c984:	0801f7b8 	.word	0x0801f7b8
 801c988:	0801f7b8 	.word	0x0801f7b8
 801c98c:	0801f7d0 	.word	0x0801f7d0

0801c990 <__retarget_lock_init_recursive>:
 801c990:	4770      	bx	lr

0801c992 <__retarget_lock_acquire_recursive>:
 801c992:	4770      	bx	lr

0801c994 <__retarget_lock_release_recursive>:
 801c994:	4770      	bx	lr

0801c996 <strcpy>:
 801c996:	4603      	mov	r3, r0
 801c998:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c99c:	f803 2b01 	strb.w	r2, [r3], #1
 801c9a0:	2a00      	cmp	r2, #0
 801c9a2:	d1f9      	bne.n	801c998 <strcpy+0x2>
 801c9a4:	4770      	bx	lr

0801c9a6 <memcpy>:
 801c9a6:	440a      	add	r2, r1
 801c9a8:	4291      	cmp	r1, r2
 801c9aa:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801c9ae:	d100      	bne.n	801c9b2 <memcpy+0xc>
 801c9b0:	4770      	bx	lr
 801c9b2:	b510      	push	{r4, lr}
 801c9b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c9b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 801c9bc:	4291      	cmp	r1, r2
 801c9be:	d1f9      	bne.n	801c9b4 <memcpy+0xe>
 801c9c0:	bd10      	pop	{r4, pc}
	...

0801c9c4 <__assert_func>:
 801c9c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801c9c6:	4614      	mov	r4, r2
 801c9c8:	461a      	mov	r2, r3
 801c9ca:	4b09      	ldr	r3, [pc, #36]	; (801c9f0 <__assert_func+0x2c>)
 801c9cc:	681b      	ldr	r3, [r3, #0]
 801c9ce:	4605      	mov	r5, r0
 801c9d0:	68d8      	ldr	r0, [r3, #12]
 801c9d2:	b14c      	cbz	r4, 801c9e8 <__assert_func+0x24>
 801c9d4:	4b07      	ldr	r3, [pc, #28]	; (801c9f4 <__assert_func+0x30>)
 801c9d6:	9100      	str	r1, [sp, #0]
 801c9d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801c9dc:	4906      	ldr	r1, [pc, #24]	; (801c9f8 <__assert_func+0x34>)
 801c9de:	462b      	mov	r3, r5
 801c9e0:	f000 fc04 	bl	801d1ec <fiprintf>
 801c9e4:	f000 fc14 	bl	801d210 <abort>
 801c9e8:	4b04      	ldr	r3, [pc, #16]	; (801c9fc <__assert_func+0x38>)
 801c9ea:	461c      	mov	r4, r3
 801c9ec:	e7f3      	b.n	801c9d6 <__assert_func+0x12>
 801c9ee:	bf00      	nop
 801c9f0:	200021d8 	.word	0x200021d8
 801c9f4:	0801f740 	.word	0x0801f740
 801c9f8:	0801f74d 	.word	0x0801f74d
 801c9fc:	0801f77b 	.word	0x0801f77b

0801ca00 <__env_lock>:
 801ca00:	4801      	ldr	r0, [pc, #4]	; (801ca08 <__env_lock+0x8>)
 801ca02:	f7ff bfc6 	b.w	801c992 <__retarget_lock_acquire_recursive>
 801ca06:	bf00      	nop
 801ca08:	20010ce8 	.word	0x20010ce8

0801ca0c <__env_unlock>:
 801ca0c:	4801      	ldr	r0, [pc, #4]	; (801ca14 <__env_unlock+0x8>)
 801ca0e:	f7ff bfc1 	b.w	801c994 <__retarget_lock_release_recursive>
 801ca12:	bf00      	nop
 801ca14:	20010ce8 	.word	0x20010ce8

0801ca18 <_free_r>:
 801ca18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ca1a:	2900      	cmp	r1, #0
 801ca1c:	d044      	beq.n	801caa8 <_free_r+0x90>
 801ca1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ca22:	9001      	str	r0, [sp, #4]
 801ca24:	2b00      	cmp	r3, #0
 801ca26:	f1a1 0404 	sub.w	r4, r1, #4
 801ca2a:	bfb8      	it	lt
 801ca2c:	18e4      	addlt	r4, r4, r3
 801ca2e:	f7ff fbc1 	bl	801c1b4 <__malloc_lock>
 801ca32:	4a1e      	ldr	r2, [pc, #120]	; (801caac <_free_r+0x94>)
 801ca34:	9801      	ldr	r0, [sp, #4]
 801ca36:	6813      	ldr	r3, [r2, #0]
 801ca38:	b933      	cbnz	r3, 801ca48 <_free_r+0x30>
 801ca3a:	6063      	str	r3, [r4, #4]
 801ca3c:	6014      	str	r4, [r2, #0]
 801ca3e:	b003      	add	sp, #12
 801ca40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ca44:	f7ff bbbc 	b.w	801c1c0 <__malloc_unlock>
 801ca48:	42a3      	cmp	r3, r4
 801ca4a:	d908      	bls.n	801ca5e <_free_r+0x46>
 801ca4c:	6825      	ldr	r5, [r4, #0]
 801ca4e:	1961      	adds	r1, r4, r5
 801ca50:	428b      	cmp	r3, r1
 801ca52:	bf01      	itttt	eq
 801ca54:	6819      	ldreq	r1, [r3, #0]
 801ca56:	685b      	ldreq	r3, [r3, #4]
 801ca58:	1949      	addeq	r1, r1, r5
 801ca5a:	6021      	streq	r1, [r4, #0]
 801ca5c:	e7ed      	b.n	801ca3a <_free_r+0x22>
 801ca5e:	461a      	mov	r2, r3
 801ca60:	685b      	ldr	r3, [r3, #4]
 801ca62:	b10b      	cbz	r3, 801ca68 <_free_r+0x50>
 801ca64:	42a3      	cmp	r3, r4
 801ca66:	d9fa      	bls.n	801ca5e <_free_r+0x46>
 801ca68:	6811      	ldr	r1, [r2, #0]
 801ca6a:	1855      	adds	r5, r2, r1
 801ca6c:	42a5      	cmp	r5, r4
 801ca6e:	d10b      	bne.n	801ca88 <_free_r+0x70>
 801ca70:	6824      	ldr	r4, [r4, #0]
 801ca72:	4421      	add	r1, r4
 801ca74:	1854      	adds	r4, r2, r1
 801ca76:	42a3      	cmp	r3, r4
 801ca78:	6011      	str	r1, [r2, #0]
 801ca7a:	d1e0      	bne.n	801ca3e <_free_r+0x26>
 801ca7c:	681c      	ldr	r4, [r3, #0]
 801ca7e:	685b      	ldr	r3, [r3, #4]
 801ca80:	6053      	str	r3, [r2, #4]
 801ca82:	440c      	add	r4, r1
 801ca84:	6014      	str	r4, [r2, #0]
 801ca86:	e7da      	b.n	801ca3e <_free_r+0x26>
 801ca88:	d902      	bls.n	801ca90 <_free_r+0x78>
 801ca8a:	230c      	movs	r3, #12
 801ca8c:	6003      	str	r3, [r0, #0]
 801ca8e:	e7d6      	b.n	801ca3e <_free_r+0x26>
 801ca90:	6825      	ldr	r5, [r4, #0]
 801ca92:	1961      	adds	r1, r4, r5
 801ca94:	428b      	cmp	r3, r1
 801ca96:	bf04      	itt	eq
 801ca98:	6819      	ldreq	r1, [r3, #0]
 801ca9a:	685b      	ldreq	r3, [r3, #4]
 801ca9c:	6063      	str	r3, [r4, #4]
 801ca9e:	bf04      	itt	eq
 801caa0:	1949      	addeq	r1, r1, r5
 801caa2:	6021      	streq	r1, [r4, #0]
 801caa4:	6054      	str	r4, [r2, #4]
 801caa6:	e7ca      	b.n	801ca3e <_free_r+0x26>
 801caa8:	b003      	add	sp, #12
 801caaa:	bd30      	pop	{r4, r5, pc}
 801caac:	20010ba0 	.word	0x20010ba0

0801cab0 <_malloc_usable_size_r>:
 801cab0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801cab4:	1f18      	subs	r0, r3, #4
 801cab6:	2b00      	cmp	r3, #0
 801cab8:	bfbc      	itt	lt
 801caba:	580b      	ldrlt	r3, [r1, r0]
 801cabc:	18c0      	addlt	r0, r0, r3
 801cabe:	4770      	bx	lr

0801cac0 <__ssputs_r>:
 801cac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cac4:	688e      	ldr	r6, [r1, #8]
 801cac6:	461f      	mov	r7, r3
 801cac8:	42be      	cmp	r6, r7
 801caca:	680b      	ldr	r3, [r1, #0]
 801cacc:	4682      	mov	sl, r0
 801cace:	460c      	mov	r4, r1
 801cad0:	4690      	mov	r8, r2
 801cad2:	d82c      	bhi.n	801cb2e <__ssputs_r+0x6e>
 801cad4:	898a      	ldrh	r2, [r1, #12]
 801cad6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801cada:	d026      	beq.n	801cb2a <__ssputs_r+0x6a>
 801cadc:	6965      	ldr	r5, [r4, #20]
 801cade:	6909      	ldr	r1, [r1, #16]
 801cae0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801cae4:	eba3 0901 	sub.w	r9, r3, r1
 801cae8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801caec:	1c7b      	adds	r3, r7, #1
 801caee:	444b      	add	r3, r9
 801caf0:	106d      	asrs	r5, r5, #1
 801caf2:	429d      	cmp	r5, r3
 801caf4:	bf38      	it	cc
 801caf6:	461d      	movcc	r5, r3
 801caf8:	0553      	lsls	r3, r2, #21
 801cafa:	d527      	bpl.n	801cb4c <__ssputs_r+0x8c>
 801cafc:	4629      	mov	r1, r5
 801cafe:	f7ff fad9 	bl	801c0b4 <_malloc_r>
 801cb02:	4606      	mov	r6, r0
 801cb04:	b360      	cbz	r0, 801cb60 <__ssputs_r+0xa0>
 801cb06:	6921      	ldr	r1, [r4, #16]
 801cb08:	464a      	mov	r2, r9
 801cb0a:	f7ff ff4c 	bl	801c9a6 <memcpy>
 801cb0e:	89a3      	ldrh	r3, [r4, #12]
 801cb10:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801cb14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801cb18:	81a3      	strh	r3, [r4, #12]
 801cb1a:	6126      	str	r6, [r4, #16]
 801cb1c:	6165      	str	r5, [r4, #20]
 801cb1e:	444e      	add	r6, r9
 801cb20:	eba5 0509 	sub.w	r5, r5, r9
 801cb24:	6026      	str	r6, [r4, #0]
 801cb26:	60a5      	str	r5, [r4, #8]
 801cb28:	463e      	mov	r6, r7
 801cb2a:	42be      	cmp	r6, r7
 801cb2c:	d900      	bls.n	801cb30 <__ssputs_r+0x70>
 801cb2e:	463e      	mov	r6, r7
 801cb30:	6820      	ldr	r0, [r4, #0]
 801cb32:	4632      	mov	r2, r6
 801cb34:	4641      	mov	r1, r8
 801cb36:	f7ff fdeb 	bl	801c710 <memmove>
 801cb3a:	68a3      	ldr	r3, [r4, #8]
 801cb3c:	1b9b      	subs	r3, r3, r6
 801cb3e:	60a3      	str	r3, [r4, #8]
 801cb40:	6823      	ldr	r3, [r4, #0]
 801cb42:	4433      	add	r3, r6
 801cb44:	6023      	str	r3, [r4, #0]
 801cb46:	2000      	movs	r0, #0
 801cb48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cb4c:	462a      	mov	r2, r5
 801cb4e:	f7ff fbb1 	bl	801c2b4 <_realloc_r>
 801cb52:	4606      	mov	r6, r0
 801cb54:	2800      	cmp	r0, #0
 801cb56:	d1e0      	bne.n	801cb1a <__ssputs_r+0x5a>
 801cb58:	6921      	ldr	r1, [r4, #16]
 801cb5a:	4650      	mov	r0, sl
 801cb5c:	f7ff ff5c 	bl	801ca18 <_free_r>
 801cb60:	230c      	movs	r3, #12
 801cb62:	f8ca 3000 	str.w	r3, [sl]
 801cb66:	89a3      	ldrh	r3, [r4, #12]
 801cb68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801cb6c:	81a3      	strh	r3, [r4, #12]
 801cb6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801cb72:	e7e9      	b.n	801cb48 <__ssputs_r+0x88>

0801cb74 <_svfiprintf_r>:
 801cb74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cb78:	4698      	mov	r8, r3
 801cb7a:	898b      	ldrh	r3, [r1, #12]
 801cb7c:	061b      	lsls	r3, r3, #24
 801cb7e:	b09d      	sub	sp, #116	; 0x74
 801cb80:	4607      	mov	r7, r0
 801cb82:	460d      	mov	r5, r1
 801cb84:	4614      	mov	r4, r2
 801cb86:	d50e      	bpl.n	801cba6 <_svfiprintf_r+0x32>
 801cb88:	690b      	ldr	r3, [r1, #16]
 801cb8a:	b963      	cbnz	r3, 801cba6 <_svfiprintf_r+0x32>
 801cb8c:	2140      	movs	r1, #64	; 0x40
 801cb8e:	f7ff fa91 	bl	801c0b4 <_malloc_r>
 801cb92:	6028      	str	r0, [r5, #0]
 801cb94:	6128      	str	r0, [r5, #16]
 801cb96:	b920      	cbnz	r0, 801cba2 <_svfiprintf_r+0x2e>
 801cb98:	230c      	movs	r3, #12
 801cb9a:	603b      	str	r3, [r7, #0]
 801cb9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801cba0:	e0d0      	b.n	801cd44 <_svfiprintf_r+0x1d0>
 801cba2:	2340      	movs	r3, #64	; 0x40
 801cba4:	616b      	str	r3, [r5, #20]
 801cba6:	2300      	movs	r3, #0
 801cba8:	9309      	str	r3, [sp, #36]	; 0x24
 801cbaa:	2320      	movs	r3, #32
 801cbac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801cbb0:	f8cd 800c 	str.w	r8, [sp, #12]
 801cbb4:	2330      	movs	r3, #48	; 0x30
 801cbb6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801cd5c <_svfiprintf_r+0x1e8>
 801cbba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801cbbe:	f04f 0901 	mov.w	r9, #1
 801cbc2:	4623      	mov	r3, r4
 801cbc4:	469a      	mov	sl, r3
 801cbc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 801cbca:	b10a      	cbz	r2, 801cbd0 <_svfiprintf_r+0x5c>
 801cbcc:	2a25      	cmp	r2, #37	; 0x25
 801cbce:	d1f9      	bne.n	801cbc4 <_svfiprintf_r+0x50>
 801cbd0:	ebba 0b04 	subs.w	fp, sl, r4
 801cbd4:	d00b      	beq.n	801cbee <_svfiprintf_r+0x7a>
 801cbd6:	465b      	mov	r3, fp
 801cbd8:	4622      	mov	r2, r4
 801cbda:	4629      	mov	r1, r5
 801cbdc:	4638      	mov	r0, r7
 801cbde:	f7ff ff6f 	bl	801cac0 <__ssputs_r>
 801cbe2:	3001      	adds	r0, #1
 801cbe4:	f000 80a9 	beq.w	801cd3a <_svfiprintf_r+0x1c6>
 801cbe8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801cbea:	445a      	add	r2, fp
 801cbec:	9209      	str	r2, [sp, #36]	; 0x24
 801cbee:	f89a 3000 	ldrb.w	r3, [sl]
 801cbf2:	2b00      	cmp	r3, #0
 801cbf4:	f000 80a1 	beq.w	801cd3a <_svfiprintf_r+0x1c6>
 801cbf8:	2300      	movs	r3, #0
 801cbfa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801cbfe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801cc02:	f10a 0a01 	add.w	sl, sl, #1
 801cc06:	9304      	str	r3, [sp, #16]
 801cc08:	9307      	str	r3, [sp, #28]
 801cc0a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801cc0e:	931a      	str	r3, [sp, #104]	; 0x68
 801cc10:	4654      	mov	r4, sl
 801cc12:	2205      	movs	r2, #5
 801cc14:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cc18:	4850      	ldr	r0, [pc, #320]	; (801cd5c <_svfiprintf_r+0x1e8>)
 801cc1a:	f7e3 fb21 	bl	8000260 <memchr>
 801cc1e:	9a04      	ldr	r2, [sp, #16]
 801cc20:	b9d8      	cbnz	r0, 801cc5a <_svfiprintf_r+0xe6>
 801cc22:	06d0      	lsls	r0, r2, #27
 801cc24:	bf44      	itt	mi
 801cc26:	2320      	movmi	r3, #32
 801cc28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801cc2c:	0711      	lsls	r1, r2, #28
 801cc2e:	bf44      	itt	mi
 801cc30:	232b      	movmi	r3, #43	; 0x2b
 801cc32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801cc36:	f89a 3000 	ldrb.w	r3, [sl]
 801cc3a:	2b2a      	cmp	r3, #42	; 0x2a
 801cc3c:	d015      	beq.n	801cc6a <_svfiprintf_r+0xf6>
 801cc3e:	9a07      	ldr	r2, [sp, #28]
 801cc40:	4654      	mov	r4, sl
 801cc42:	2000      	movs	r0, #0
 801cc44:	f04f 0c0a 	mov.w	ip, #10
 801cc48:	4621      	mov	r1, r4
 801cc4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801cc4e:	3b30      	subs	r3, #48	; 0x30
 801cc50:	2b09      	cmp	r3, #9
 801cc52:	d94d      	bls.n	801ccf0 <_svfiprintf_r+0x17c>
 801cc54:	b1b0      	cbz	r0, 801cc84 <_svfiprintf_r+0x110>
 801cc56:	9207      	str	r2, [sp, #28]
 801cc58:	e014      	b.n	801cc84 <_svfiprintf_r+0x110>
 801cc5a:	eba0 0308 	sub.w	r3, r0, r8
 801cc5e:	fa09 f303 	lsl.w	r3, r9, r3
 801cc62:	4313      	orrs	r3, r2
 801cc64:	9304      	str	r3, [sp, #16]
 801cc66:	46a2      	mov	sl, r4
 801cc68:	e7d2      	b.n	801cc10 <_svfiprintf_r+0x9c>
 801cc6a:	9b03      	ldr	r3, [sp, #12]
 801cc6c:	1d19      	adds	r1, r3, #4
 801cc6e:	681b      	ldr	r3, [r3, #0]
 801cc70:	9103      	str	r1, [sp, #12]
 801cc72:	2b00      	cmp	r3, #0
 801cc74:	bfbb      	ittet	lt
 801cc76:	425b      	neglt	r3, r3
 801cc78:	f042 0202 	orrlt.w	r2, r2, #2
 801cc7c:	9307      	strge	r3, [sp, #28]
 801cc7e:	9307      	strlt	r3, [sp, #28]
 801cc80:	bfb8      	it	lt
 801cc82:	9204      	strlt	r2, [sp, #16]
 801cc84:	7823      	ldrb	r3, [r4, #0]
 801cc86:	2b2e      	cmp	r3, #46	; 0x2e
 801cc88:	d10c      	bne.n	801cca4 <_svfiprintf_r+0x130>
 801cc8a:	7863      	ldrb	r3, [r4, #1]
 801cc8c:	2b2a      	cmp	r3, #42	; 0x2a
 801cc8e:	d134      	bne.n	801ccfa <_svfiprintf_r+0x186>
 801cc90:	9b03      	ldr	r3, [sp, #12]
 801cc92:	1d1a      	adds	r2, r3, #4
 801cc94:	681b      	ldr	r3, [r3, #0]
 801cc96:	9203      	str	r2, [sp, #12]
 801cc98:	2b00      	cmp	r3, #0
 801cc9a:	bfb8      	it	lt
 801cc9c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801cca0:	3402      	adds	r4, #2
 801cca2:	9305      	str	r3, [sp, #20]
 801cca4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801cd6c <_svfiprintf_r+0x1f8>
 801cca8:	7821      	ldrb	r1, [r4, #0]
 801ccaa:	2203      	movs	r2, #3
 801ccac:	4650      	mov	r0, sl
 801ccae:	f7e3 fad7 	bl	8000260 <memchr>
 801ccb2:	b138      	cbz	r0, 801ccc4 <_svfiprintf_r+0x150>
 801ccb4:	9b04      	ldr	r3, [sp, #16]
 801ccb6:	eba0 000a 	sub.w	r0, r0, sl
 801ccba:	2240      	movs	r2, #64	; 0x40
 801ccbc:	4082      	lsls	r2, r0
 801ccbe:	4313      	orrs	r3, r2
 801ccc0:	3401      	adds	r4, #1
 801ccc2:	9304      	str	r3, [sp, #16]
 801ccc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ccc8:	4825      	ldr	r0, [pc, #148]	; (801cd60 <_svfiprintf_r+0x1ec>)
 801ccca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801ccce:	2206      	movs	r2, #6
 801ccd0:	f7e3 fac6 	bl	8000260 <memchr>
 801ccd4:	2800      	cmp	r0, #0
 801ccd6:	d038      	beq.n	801cd4a <_svfiprintf_r+0x1d6>
 801ccd8:	4b22      	ldr	r3, [pc, #136]	; (801cd64 <_svfiprintf_r+0x1f0>)
 801ccda:	bb1b      	cbnz	r3, 801cd24 <_svfiprintf_r+0x1b0>
 801ccdc:	9b03      	ldr	r3, [sp, #12]
 801ccde:	3307      	adds	r3, #7
 801cce0:	f023 0307 	bic.w	r3, r3, #7
 801cce4:	3308      	adds	r3, #8
 801cce6:	9303      	str	r3, [sp, #12]
 801cce8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ccea:	4433      	add	r3, r6
 801ccec:	9309      	str	r3, [sp, #36]	; 0x24
 801ccee:	e768      	b.n	801cbc2 <_svfiprintf_r+0x4e>
 801ccf0:	fb0c 3202 	mla	r2, ip, r2, r3
 801ccf4:	460c      	mov	r4, r1
 801ccf6:	2001      	movs	r0, #1
 801ccf8:	e7a6      	b.n	801cc48 <_svfiprintf_r+0xd4>
 801ccfa:	2300      	movs	r3, #0
 801ccfc:	3401      	adds	r4, #1
 801ccfe:	9305      	str	r3, [sp, #20]
 801cd00:	4619      	mov	r1, r3
 801cd02:	f04f 0c0a 	mov.w	ip, #10
 801cd06:	4620      	mov	r0, r4
 801cd08:	f810 2b01 	ldrb.w	r2, [r0], #1
 801cd0c:	3a30      	subs	r2, #48	; 0x30
 801cd0e:	2a09      	cmp	r2, #9
 801cd10:	d903      	bls.n	801cd1a <_svfiprintf_r+0x1a6>
 801cd12:	2b00      	cmp	r3, #0
 801cd14:	d0c6      	beq.n	801cca4 <_svfiprintf_r+0x130>
 801cd16:	9105      	str	r1, [sp, #20]
 801cd18:	e7c4      	b.n	801cca4 <_svfiprintf_r+0x130>
 801cd1a:	fb0c 2101 	mla	r1, ip, r1, r2
 801cd1e:	4604      	mov	r4, r0
 801cd20:	2301      	movs	r3, #1
 801cd22:	e7f0      	b.n	801cd06 <_svfiprintf_r+0x192>
 801cd24:	ab03      	add	r3, sp, #12
 801cd26:	9300      	str	r3, [sp, #0]
 801cd28:	462a      	mov	r2, r5
 801cd2a:	4b0f      	ldr	r3, [pc, #60]	; (801cd68 <_svfiprintf_r+0x1f4>)
 801cd2c:	a904      	add	r1, sp, #16
 801cd2e:	4638      	mov	r0, r7
 801cd30:	f3af 8000 	nop.w
 801cd34:	1c42      	adds	r2, r0, #1
 801cd36:	4606      	mov	r6, r0
 801cd38:	d1d6      	bne.n	801cce8 <_svfiprintf_r+0x174>
 801cd3a:	89ab      	ldrh	r3, [r5, #12]
 801cd3c:	065b      	lsls	r3, r3, #25
 801cd3e:	f53f af2d 	bmi.w	801cb9c <_svfiprintf_r+0x28>
 801cd42:	9809      	ldr	r0, [sp, #36]	; 0x24
 801cd44:	b01d      	add	sp, #116	; 0x74
 801cd46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cd4a:	ab03      	add	r3, sp, #12
 801cd4c:	9300      	str	r3, [sp, #0]
 801cd4e:	462a      	mov	r2, r5
 801cd50:	4b05      	ldr	r3, [pc, #20]	; (801cd68 <_svfiprintf_r+0x1f4>)
 801cd52:	a904      	add	r1, sp, #16
 801cd54:	4638      	mov	r0, r7
 801cd56:	f000 f879 	bl	801ce4c <_printf_i>
 801cd5a:	e7eb      	b.n	801cd34 <_svfiprintf_r+0x1c0>
 801cd5c:	0801f77c 	.word	0x0801f77c
 801cd60:	0801f786 	.word	0x0801f786
 801cd64:	00000000 	.word	0x00000000
 801cd68:	0801cac1 	.word	0x0801cac1
 801cd6c:	0801f782 	.word	0x0801f782

0801cd70 <_printf_common>:
 801cd70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cd74:	4616      	mov	r6, r2
 801cd76:	4699      	mov	r9, r3
 801cd78:	688a      	ldr	r2, [r1, #8]
 801cd7a:	690b      	ldr	r3, [r1, #16]
 801cd7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801cd80:	4293      	cmp	r3, r2
 801cd82:	bfb8      	it	lt
 801cd84:	4613      	movlt	r3, r2
 801cd86:	6033      	str	r3, [r6, #0]
 801cd88:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801cd8c:	4607      	mov	r7, r0
 801cd8e:	460c      	mov	r4, r1
 801cd90:	b10a      	cbz	r2, 801cd96 <_printf_common+0x26>
 801cd92:	3301      	adds	r3, #1
 801cd94:	6033      	str	r3, [r6, #0]
 801cd96:	6823      	ldr	r3, [r4, #0]
 801cd98:	0699      	lsls	r1, r3, #26
 801cd9a:	bf42      	ittt	mi
 801cd9c:	6833      	ldrmi	r3, [r6, #0]
 801cd9e:	3302      	addmi	r3, #2
 801cda0:	6033      	strmi	r3, [r6, #0]
 801cda2:	6825      	ldr	r5, [r4, #0]
 801cda4:	f015 0506 	ands.w	r5, r5, #6
 801cda8:	d106      	bne.n	801cdb8 <_printf_common+0x48>
 801cdaa:	f104 0a19 	add.w	sl, r4, #25
 801cdae:	68e3      	ldr	r3, [r4, #12]
 801cdb0:	6832      	ldr	r2, [r6, #0]
 801cdb2:	1a9b      	subs	r3, r3, r2
 801cdb4:	42ab      	cmp	r3, r5
 801cdb6:	dc26      	bgt.n	801ce06 <_printf_common+0x96>
 801cdb8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801cdbc:	1e13      	subs	r3, r2, #0
 801cdbe:	6822      	ldr	r2, [r4, #0]
 801cdc0:	bf18      	it	ne
 801cdc2:	2301      	movne	r3, #1
 801cdc4:	0692      	lsls	r2, r2, #26
 801cdc6:	d42b      	bmi.n	801ce20 <_printf_common+0xb0>
 801cdc8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801cdcc:	4649      	mov	r1, r9
 801cdce:	4638      	mov	r0, r7
 801cdd0:	47c0      	blx	r8
 801cdd2:	3001      	adds	r0, #1
 801cdd4:	d01e      	beq.n	801ce14 <_printf_common+0xa4>
 801cdd6:	6823      	ldr	r3, [r4, #0]
 801cdd8:	6922      	ldr	r2, [r4, #16]
 801cdda:	f003 0306 	and.w	r3, r3, #6
 801cdde:	2b04      	cmp	r3, #4
 801cde0:	bf02      	ittt	eq
 801cde2:	68e5      	ldreq	r5, [r4, #12]
 801cde4:	6833      	ldreq	r3, [r6, #0]
 801cde6:	1aed      	subeq	r5, r5, r3
 801cde8:	68a3      	ldr	r3, [r4, #8]
 801cdea:	bf0c      	ite	eq
 801cdec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801cdf0:	2500      	movne	r5, #0
 801cdf2:	4293      	cmp	r3, r2
 801cdf4:	bfc4      	itt	gt
 801cdf6:	1a9b      	subgt	r3, r3, r2
 801cdf8:	18ed      	addgt	r5, r5, r3
 801cdfa:	2600      	movs	r6, #0
 801cdfc:	341a      	adds	r4, #26
 801cdfe:	42b5      	cmp	r5, r6
 801ce00:	d11a      	bne.n	801ce38 <_printf_common+0xc8>
 801ce02:	2000      	movs	r0, #0
 801ce04:	e008      	b.n	801ce18 <_printf_common+0xa8>
 801ce06:	2301      	movs	r3, #1
 801ce08:	4652      	mov	r2, sl
 801ce0a:	4649      	mov	r1, r9
 801ce0c:	4638      	mov	r0, r7
 801ce0e:	47c0      	blx	r8
 801ce10:	3001      	adds	r0, #1
 801ce12:	d103      	bne.n	801ce1c <_printf_common+0xac>
 801ce14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ce18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ce1c:	3501      	adds	r5, #1
 801ce1e:	e7c6      	b.n	801cdae <_printf_common+0x3e>
 801ce20:	18e1      	adds	r1, r4, r3
 801ce22:	1c5a      	adds	r2, r3, #1
 801ce24:	2030      	movs	r0, #48	; 0x30
 801ce26:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801ce2a:	4422      	add	r2, r4
 801ce2c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801ce30:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801ce34:	3302      	adds	r3, #2
 801ce36:	e7c7      	b.n	801cdc8 <_printf_common+0x58>
 801ce38:	2301      	movs	r3, #1
 801ce3a:	4622      	mov	r2, r4
 801ce3c:	4649      	mov	r1, r9
 801ce3e:	4638      	mov	r0, r7
 801ce40:	47c0      	blx	r8
 801ce42:	3001      	adds	r0, #1
 801ce44:	d0e6      	beq.n	801ce14 <_printf_common+0xa4>
 801ce46:	3601      	adds	r6, #1
 801ce48:	e7d9      	b.n	801cdfe <_printf_common+0x8e>
	...

0801ce4c <_printf_i>:
 801ce4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801ce50:	7e0f      	ldrb	r7, [r1, #24]
 801ce52:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801ce54:	2f78      	cmp	r7, #120	; 0x78
 801ce56:	4691      	mov	r9, r2
 801ce58:	4680      	mov	r8, r0
 801ce5a:	460c      	mov	r4, r1
 801ce5c:	469a      	mov	sl, r3
 801ce5e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801ce62:	d807      	bhi.n	801ce74 <_printf_i+0x28>
 801ce64:	2f62      	cmp	r7, #98	; 0x62
 801ce66:	d80a      	bhi.n	801ce7e <_printf_i+0x32>
 801ce68:	2f00      	cmp	r7, #0
 801ce6a:	f000 80d4 	beq.w	801d016 <_printf_i+0x1ca>
 801ce6e:	2f58      	cmp	r7, #88	; 0x58
 801ce70:	f000 80c0 	beq.w	801cff4 <_printf_i+0x1a8>
 801ce74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801ce78:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801ce7c:	e03a      	b.n	801cef4 <_printf_i+0xa8>
 801ce7e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801ce82:	2b15      	cmp	r3, #21
 801ce84:	d8f6      	bhi.n	801ce74 <_printf_i+0x28>
 801ce86:	a101      	add	r1, pc, #4	; (adr r1, 801ce8c <_printf_i+0x40>)
 801ce88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801ce8c:	0801cee5 	.word	0x0801cee5
 801ce90:	0801cef9 	.word	0x0801cef9
 801ce94:	0801ce75 	.word	0x0801ce75
 801ce98:	0801ce75 	.word	0x0801ce75
 801ce9c:	0801ce75 	.word	0x0801ce75
 801cea0:	0801ce75 	.word	0x0801ce75
 801cea4:	0801cef9 	.word	0x0801cef9
 801cea8:	0801ce75 	.word	0x0801ce75
 801ceac:	0801ce75 	.word	0x0801ce75
 801ceb0:	0801ce75 	.word	0x0801ce75
 801ceb4:	0801ce75 	.word	0x0801ce75
 801ceb8:	0801cffd 	.word	0x0801cffd
 801cebc:	0801cf25 	.word	0x0801cf25
 801cec0:	0801cfb7 	.word	0x0801cfb7
 801cec4:	0801ce75 	.word	0x0801ce75
 801cec8:	0801ce75 	.word	0x0801ce75
 801cecc:	0801d01f 	.word	0x0801d01f
 801ced0:	0801ce75 	.word	0x0801ce75
 801ced4:	0801cf25 	.word	0x0801cf25
 801ced8:	0801ce75 	.word	0x0801ce75
 801cedc:	0801ce75 	.word	0x0801ce75
 801cee0:	0801cfbf 	.word	0x0801cfbf
 801cee4:	682b      	ldr	r3, [r5, #0]
 801cee6:	1d1a      	adds	r2, r3, #4
 801cee8:	681b      	ldr	r3, [r3, #0]
 801ceea:	602a      	str	r2, [r5, #0]
 801ceec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801cef0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801cef4:	2301      	movs	r3, #1
 801cef6:	e09f      	b.n	801d038 <_printf_i+0x1ec>
 801cef8:	6820      	ldr	r0, [r4, #0]
 801cefa:	682b      	ldr	r3, [r5, #0]
 801cefc:	0607      	lsls	r7, r0, #24
 801cefe:	f103 0104 	add.w	r1, r3, #4
 801cf02:	6029      	str	r1, [r5, #0]
 801cf04:	d501      	bpl.n	801cf0a <_printf_i+0xbe>
 801cf06:	681e      	ldr	r6, [r3, #0]
 801cf08:	e003      	b.n	801cf12 <_printf_i+0xc6>
 801cf0a:	0646      	lsls	r6, r0, #25
 801cf0c:	d5fb      	bpl.n	801cf06 <_printf_i+0xba>
 801cf0e:	f9b3 6000 	ldrsh.w	r6, [r3]
 801cf12:	2e00      	cmp	r6, #0
 801cf14:	da03      	bge.n	801cf1e <_printf_i+0xd2>
 801cf16:	232d      	movs	r3, #45	; 0x2d
 801cf18:	4276      	negs	r6, r6
 801cf1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801cf1e:	485a      	ldr	r0, [pc, #360]	; (801d088 <_printf_i+0x23c>)
 801cf20:	230a      	movs	r3, #10
 801cf22:	e012      	b.n	801cf4a <_printf_i+0xfe>
 801cf24:	682b      	ldr	r3, [r5, #0]
 801cf26:	6820      	ldr	r0, [r4, #0]
 801cf28:	1d19      	adds	r1, r3, #4
 801cf2a:	6029      	str	r1, [r5, #0]
 801cf2c:	0605      	lsls	r5, r0, #24
 801cf2e:	d501      	bpl.n	801cf34 <_printf_i+0xe8>
 801cf30:	681e      	ldr	r6, [r3, #0]
 801cf32:	e002      	b.n	801cf3a <_printf_i+0xee>
 801cf34:	0641      	lsls	r1, r0, #25
 801cf36:	d5fb      	bpl.n	801cf30 <_printf_i+0xe4>
 801cf38:	881e      	ldrh	r6, [r3, #0]
 801cf3a:	4853      	ldr	r0, [pc, #332]	; (801d088 <_printf_i+0x23c>)
 801cf3c:	2f6f      	cmp	r7, #111	; 0x6f
 801cf3e:	bf0c      	ite	eq
 801cf40:	2308      	moveq	r3, #8
 801cf42:	230a      	movne	r3, #10
 801cf44:	2100      	movs	r1, #0
 801cf46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801cf4a:	6865      	ldr	r5, [r4, #4]
 801cf4c:	60a5      	str	r5, [r4, #8]
 801cf4e:	2d00      	cmp	r5, #0
 801cf50:	bfa2      	ittt	ge
 801cf52:	6821      	ldrge	r1, [r4, #0]
 801cf54:	f021 0104 	bicge.w	r1, r1, #4
 801cf58:	6021      	strge	r1, [r4, #0]
 801cf5a:	b90e      	cbnz	r6, 801cf60 <_printf_i+0x114>
 801cf5c:	2d00      	cmp	r5, #0
 801cf5e:	d04b      	beq.n	801cff8 <_printf_i+0x1ac>
 801cf60:	4615      	mov	r5, r2
 801cf62:	fbb6 f1f3 	udiv	r1, r6, r3
 801cf66:	fb03 6711 	mls	r7, r3, r1, r6
 801cf6a:	5dc7      	ldrb	r7, [r0, r7]
 801cf6c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801cf70:	4637      	mov	r7, r6
 801cf72:	42bb      	cmp	r3, r7
 801cf74:	460e      	mov	r6, r1
 801cf76:	d9f4      	bls.n	801cf62 <_printf_i+0x116>
 801cf78:	2b08      	cmp	r3, #8
 801cf7a:	d10b      	bne.n	801cf94 <_printf_i+0x148>
 801cf7c:	6823      	ldr	r3, [r4, #0]
 801cf7e:	07de      	lsls	r6, r3, #31
 801cf80:	d508      	bpl.n	801cf94 <_printf_i+0x148>
 801cf82:	6923      	ldr	r3, [r4, #16]
 801cf84:	6861      	ldr	r1, [r4, #4]
 801cf86:	4299      	cmp	r1, r3
 801cf88:	bfde      	ittt	le
 801cf8a:	2330      	movle	r3, #48	; 0x30
 801cf8c:	f805 3c01 	strble.w	r3, [r5, #-1]
 801cf90:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801cf94:	1b52      	subs	r2, r2, r5
 801cf96:	6122      	str	r2, [r4, #16]
 801cf98:	f8cd a000 	str.w	sl, [sp]
 801cf9c:	464b      	mov	r3, r9
 801cf9e:	aa03      	add	r2, sp, #12
 801cfa0:	4621      	mov	r1, r4
 801cfa2:	4640      	mov	r0, r8
 801cfa4:	f7ff fee4 	bl	801cd70 <_printf_common>
 801cfa8:	3001      	adds	r0, #1
 801cfaa:	d14a      	bne.n	801d042 <_printf_i+0x1f6>
 801cfac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801cfb0:	b004      	add	sp, #16
 801cfb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cfb6:	6823      	ldr	r3, [r4, #0]
 801cfb8:	f043 0320 	orr.w	r3, r3, #32
 801cfbc:	6023      	str	r3, [r4, #0]
 801cfbe:	4833      	ldr	r0, [pc, #204]	; (801d08c <_printf_i+0x240>)
 801cfc0:	2778      	movs	r7, #120	; 0x78
 801cfc2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801cfc6:	6823      	ldr	r3, [r4, #0]
 801cfc8:	6829      	ldr	r1, [r5, #0]
 801cfca:	061f      	lsls	r7, r3, #24
 801cfcc:	f851 6b04 	ldr.w	r6, [r1], #4
 801cfd0:	d402      	bmi.n	801cfd8 <_printf_i+0x18c>
 801cfd2:	065f      	lsls	r7, r3, #25
 801cfd4:	bf48      	it	mi
 801cfd6:	b2b6      	uxthmi	r6, r6
 801cfd8:	07df      	lsls	r7, r3, #31
 801cfda:	bf48      	it	mi
 801cfdc:	f043 0320 	orrmi.w	r3, r3, #32
 801cfe0:	6029      	str	r1, [r5, #0]
 801cfe2:	bf48      	it	mi
 801cfe4:	6023      	strmi	r3, [r4, #0]
 801cfe6:	b91e      	cbnz	r6, 801cff0 <_printf_i+0x1a4>
 801cfe8:	6823      	ldr	r3, [r4, #0]
 801cfea:	f023 0320 	bic.w	r3, r3, #32
 801cfee:	6023      	str	r3, [r4, #0]
 801cff0:	2310      	movs	r3, #16
 801cff2:	e7a7      	b.n	801cf44 <_printf_i+0xf8>
 801cff4:	4824      	ldr	r0, [pc, #144]	; (801d088 <_printf_i+0x23c>)
 801cff6:	e7e4      	b.n	801cfc2 <_printf_i+0x176>
 801cff8:	4615      	mov	r5, r2
 801cffa:	e7bd      	b.n	801cf78 <_printf_i+0x12c>
 801cffc:	682b      	ldr	r3, [r5, #0]
 801cffe:	6826      	ldr	r6, [r4, #0]
 801d000:	6961      	ldr	r1, [r4, #20]
 801d002:	1d18      	adds	r0, r3, #4
 801d004:	6028      	str	r0, [r5, #0]
 801d006:	0635      	lsls	r5, r6, #24
 801d008:	681b      	ldr	r3, [r3, #0]
 801d00a:	d501      	bpl.n	801d010 <_printf_i+0x1c4>
 801d00c:	6019      	str	r1, [r3, #0]
 801d00e:	e002      	b.n	801d016 <_printf_i+0x1ca>
 801d010:	0670      	lsls	r0, r6, #25
 801d012:	d5fb      	bpl.n	801d00c <_printf_i+0x1c0>
 801d014:	8019      	strh	r1, [r3, #0]
 801d016:	2300      	movs	r3, #0
 801d018:	6123      	str	r3, [r4, #16]
 801d01a:	4615      	mov	r5, r2
 801d01c:	e7bc      	b.n	801cf98 <_printf_i+0x14c>
 801d01e:	682b      	ldr	r3, [r5, #0]
 801d020:	1d1a      	adds	r2, r3, #4
 801d022:	602a      	str	r2, [r5, #0]
 801d024:	681d      	ldr	r5, [r3, #0]
 801d026:	6862      	ldr	r2, [r4, #4]
 801d028:	2100      	movs	r1, #0
 801d02a:	4628      	mov	r0, r5
 801d02c:	f7e3 f918 	bl	8000260 <memchr>
 801d030:	b108      	cbz	r0, 801d036 <_printf_i+0x1ea>
 801d032:	1b40      	subs	r0, r0, r5
 801d034:	6060      	str	r0, [r4, #4]
 801d036:	6863      	ldr	r3, [r4, #4]
 801d038:	6123      	str	r3, [r4, #16]
 801d03a:	2300      	movs	r3, #0
 801d03c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d040:	e7aa      	b.n	801cf98 <_printf_i+0x14c>
 801d042:	6923      	ldr	r3, [r4, #16]
 801d044:	462a      	mov	r2, r5
 801d046:	4649      	mov	r1, r9
 801d048:	4640      	mov	r0, r8
 801d04a:	47d0      	blx	sl
 801d04c:	3001      	adds	r0, #1
 801d04e:	d0ad      	beq.n	801cfac <_printf_i+0x160>
 801d050:	6823      	ldr	r3, [r4, #0]
 801d052:	079b      	lsls	r3, r3, #30
 801d054:	d413      	bmi.n	801d07e <_printf_i+0x232>
 801d056:	68e0      	ldr	r0, [r4, #12]
 801d058:	9b03      	ldr	r3, [sp, #12]
 801d05a:	4298      	cmp	r0, r3
 801d05c:	bfb8      	it	lt
 801d05e:	4618      	movlt	r0, r3
 801d060:	e7a6      	b.n	801cfb0 <_printf_i+0x164>
 801d062:	2301      	movs	r3, #1
 801d064:	4632      	mov	r2, r6
 801d066:	4649      	mov	r1, r9
 801d068:	4640      	mov	r0, r8
 801d06a:	47d0      	blx	sl
 801d06c:	3001      	adds	r0, #1
 801d06e:	d09d      	beq.n	801cfac <_printf_i+0x160>
 801d070:	3501      	adds	r5, #1
 801d072:	68e3      	ldr	r3, [r4, #12]
 801d074:	9903      	ldr	r1, [sp, #12]
 801d076:	1a5b      	subs	r3, r3, r1
 801d078:	42ab      	cmp	r3, r5
 801d07a:	dcf2      	bgt.n	801d062 <_printf_i+0x216>
 801d07c:	e7eb      	b.n	801d056 <_printf_i+0x20a>
 801d07e:	2500      	movs	r5, #0
 801d080:	f104 0619 	add.w	r6, r4, #25
 801d084:	e7f5      	b.n	801d072 <_printf_i+0x226>
 801d086:	bf00      	nop
 801d088:	0801f78d 	.word	0x0801f78d
 801d08c:	0801f79e 	.word	0x0801f79e

0801d090 <__sflush_r>:
 801d090:	898a      	ldrh	r2, [r1, #12]
 801d092:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d096:	4605      	mov	r5, r0
 801d098:	0710      	lsls	r0, r2, #28
 801d09a:	460c      	mov	r4, r1
 801d09c:	d458      	bmi.n	801d150 <__sflush_r+0xc0>
 801d09e:	684b      	ldr	r3, [r1, #4]
 801d0a0:	2b00      	cmp	r3, #0
 801d0a2:	dc05      	bgt.n	801d0b0 <__sflush_r+0x20>
 801d0a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801d0a6:	2b00      	cmp	r3, #0
 801d0a8:	dc02      	bgt.n	801d0b0 <__sflush_r+0x20>
 801d0aa:	2000      	movs	r0, #0
 801d0ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d0b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d0b2:	2e00      	cmp	r6, #0
 801d0b4:	d0f9      	beq.n	801d0aa <__sflush_r+0x1a>
 801d0b6:	2300      	movs	r3, #0
 801d0b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801d0bc:	682f      	ldr	r7, [r5, #0]
 801d0be:	6a21      	ldr	r1, [r4, #32]
 801d0c0:	602b      	str	r3, [r5, #0]
 801d0c2:	d032      	beq.n	801d12a <__sflush_r+0x9a>
 801d0c4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801d0c6:	89a3      	ldrh	r3, [r4, #12]
 801d0c8:	075a      	lsls	r2, r3, #29
 801d0ca:	d505      	bpl.n	801d0d8 <__sflush_r+0x48>
 801d0cc:	6863      	ldr	r3, [r4, #4]
 801d0ce:	1ac0      	subs	r0, r0, r3
 801d0d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801d0d2:	b10b      	cbz	r3, 801d0d8 <__sflush_r+0x48>
 801d0d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801d0d6:	1ac0      	subs	r0, r0, r3
 801d0d8:	2300      	movs	r3, #0
 801d0da:	4602      	mov	r2, r0
 801d0dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d0de:	6a21      	ldr	r1, [r4, #32]
 801d0e0:	4628      	mov	r0, r5
 801d0e2:	47b0      	blx	r6
 801d0e4:	1c43      	adds	r3, r0, #1
 801d0e6:	89a3      	ldrh	r3, [r4, #12]
 801d0e8:	d106      	bne.n	801d0f8 <__sflush_r+0x68>
 801d0ea:	6829      	ldr	r1, [r5, #0]
 801d0ec:	291d      	cmp	r1, #29
 801d0ee:	d82b      	bhi.n	801d148 <__sflush_r+0xb8>
 801d0f0:	4a29      	ldr	r2, [pc, #164]	; (801d198 <__sflush_r+0x108>)
 801d0f2:	410a      	asrs	r2, r1
 801d0f4:	07d6      	lsls	r6, r2, #31
 801d0f6:	d427      	bmi.n	801d148 <__sflush_r+0xb8>
 801d0f8:	2200      	movs	r2, #0
 801d0fa:	6062      	str	r2, [r4, #4]
 801d0fc:	04d9      	lsls	r1, r3, #19
 801d0fe:	6922      	ldr	r2, [r4, #16]
 801d100:	6022      	str	r2, [r4, #0]
 801d102:	d504      	bpl.n	801d10e <__sflush_r+0x7e>
 801d104:	1c42      	adds	r2, r0, #1
 801d106:	d101      	bne.n	801d10c <__sflush_r+0x7c>
 801d108:	682b      	ldr	r3, [r5, #0]
 801d10a:	b903      	cbnz	r3, 801d10e <__sflush_r+0x7e>
 801d10c:	6560      	str	r0, [r4, #84]	; 0x54
 801d10e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d110:	602f      	str	r7, [r5, #0]
 801d112:	2900      	cmp	r1, #0
 801d114:	d0c9      	beq.n	801d0aa <__sflush_r+0x1a>
 801d116:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d11a:	4299      	cmp	r1, r3
 801d11c:	d002      	beq.n	801d124 <__sflush_r+0x94>
 801d11e:	4628      	mov	r0, r5
 801d120:	f7ff fc7a 	bl	801ca18 <_free_r>
 801d124:	2000      	movs	r0, #0
 801d126:	6360      	str	r0, [r4, #52]	; 0x34
 801d128:	e7c0      	b.n	801d0ac <__sflush_r+0x1c>
 801d12a:	2301      	movs	r3, #1
 801d12c:	4628      	mov	r0, r5
 801d12e:	47b0      	blx	r6
 801d130:	1c41      	adds	r1, r0, #1
 801d132:	d1c8      	bne.n	801d0c6 <__sflush_r+0x36>
 801d134:	682b      	ldr	r3, [r5, #0]
 801d136:	2b00      	cmp	r3, #0
 801d138:	d0c5      	beq.n	801d0c6 <__sflush_r+0x36>
 801d13a:	2b1d      	cmp	r3, #29
 801d13c:	d001      	beq.n	801d142 <__sflush_r+0xb2>
 801d13e:	2b16      	cmp	r3, #22
 801d140:	d101      	bne.n	801d146 <__sflush_r+0xb6>
 801d142:	602f      	str	r7, [r5, #0]
 801d144:	e7b1      	b.n	801d0aa <__sflush_r+0x1a>
 801d146:	89a3      	ldrh	r3, [r4, #12]
 801d148:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d14c:	81a3      	strh	r3, [r4, #12]
 801d14e:	e7ad      	b.n	801d0ac <__sflush_r+0x1c>
 801d150:	690f      	ldr	r7, [r1, #16]
 801d152:	2f00      	cmp	r7, #0
 801d154:	d0a9      	beq.n	801d0aa <__sflush_r+0x1a>
 801d156:	0793      	lsls	r3, r2, #30
 801d158:	680e      	ldr	r6, [r1, #0]
 801d15a:	bf08      	it	eq
 801d15c:	694b      	ldreq	r3, [r1, #20]
 801d15e:	600f      	str	r7, [r1, #0]
 801d160:	bf18      	it	ne
 801d162:	2300      	movne	r3, #0
 801d164:	eba6 0807 	sub.w	r8, r6, r7
 801d168:	608b      	str	r3, [r1, #8]
 801d16a:	f1b8 0f00 	cmp.w	r8, #0
 801d16e:	dd9c      	ble.n	801d0aa <__sflush_r+0x1a>
 801d170:	6a21      	ldr	r1, [r4, #32]
 801d172:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801d174:	4643      	mov	r3, r8
 801d176:	463a      	mov	r2, r7
 801d178:	4628      	mov	r0, r5
 801d17a:	47b0      	blx	r6
 801d17c:	2800      	cmp	r0, #0
 801d17e:	dc06      	bgt.n	801d18e <__sflush_r+0xfe>
 801d180:	89a3      	ldrh	r3, [r4, #12]
 801d182:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d186:	81a3      	strh	r3, [r4, #12]
 801d188:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d18c:	e78e      	b.n	801d0ac <__sflush_r+0x1c>
 801d18e:	4407      	add	r7, r0
 801d190:	eba8 0800 	sub.w	r8, r8, r0
 801d194:	e7e9      	b.n	801d16a <__sflush_r+0xda>
 801d196:	bf00      	nop
 801d198:	dfbffffe 	.word	0xdfbffffe

0801d19c <_fflush_r>:
 801d19c:	b538      	push	{r3, r4, r5, lr}
 801d19e:	690b      	ldr	r3, [r1, #16]
 801d1a0:	4605      	mov	r5, r0
 801d1a2:	460c      	mov	r4, r1
 801d1a4:	b913      	cbnz	r3, 801d1ac <_fflush_r+0x10>
 801d1a6:	2500      	movs	r5, #0
 801d1a8:	4628      	mov	r0, r5
 801d1aa:	bd38      	pop	{r3, r4, r5, pc}
 801d1ac:	b118      	cbz	r0, 801d1b6 <_fflush_r+0x1a>
 801d1ae:	6a03      	ldr	r3, [r0, #32]
 801d1b0:	b90b      	cbnz	r3, 801d1b6 <_fflush_r+0x1a>
 801d1b2:	f7ff f9b7 	bl	801c524 <__sinit>
 801d1b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d1ba:	2b00      	cmp	r3, #0
 801d1bc:	d0f3      	beq.n	801d1a6 <_fflush_r+0xa>
 801d1be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801d1c0:	07d0      	lsls	r0, r2, #31
 801d1c2:	d404      	bmi.n	801d1ce <_fflush_r+0x32>
 801d1c4:	0599      	lsls	r1, r3, #22
 801d1c6:	d402      	bmi.n	801d1ce <_fflush_r+0x32>
 801d1c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d1ca:	f7ff fbe2 	bl	801c992 <__retarget_lock_acquire_recursive>
 801d1ce:	4628      	mov	r0, r5
 801d1d0:	4621      	mov	r1, r4
 801d1d2:	f7ff ff5d 	bl	801d090 <__sflush_r>
 801d1d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d1d8:	07da      	lsls	r2, r3, #31
 801d1da:	4605      	mov	r5, r0
 801d1dc:	d4e4      	bmi.n	801d1a8 <_fflush_r+0xc>
 801d1de:	89a3      	ldrh	r3, [r4, #12]
 801d1e0:	059b      	lsls	r3, r3, #22
 801d1e2:	d4e1      	bmi.n	801d1a8 <_fflush_r+0xc>
 801d1e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d1e6:	f7ff fbd5 	bl	801c994 <__retarget_lock_release_recursive>
 801d1ea:	e7dd      	b.n	801d1a8 <_fflush_r+0xc>

0801d1ec <fiprintf>:
 801d1ec:	b40e      	push	{r1, r2, r3}
 801d1ee:	b503      	push	{r0, r1, lr}
 801d1f0:	4601      	mov	r1, r0
 801d1f2:	ab03      	add	r3, sp, #12
 801d1f4:	4805      	ldr	r0, [pc, #20]	; (801d20c <fiprintf+0x20>)
 801d1f6:	f853 2b04 	ldr.w	r2, [r3], #4
 801d1fa:	6800      	ldr	r0, [r0, #0]
 801d1fc:	9301      	str	r3, [sp, #4]
 801d1fe:	f000 f837 	bl	801d270 <_vfiprintf_r>
 801d202:	b002      	add	sp, #8
 801d204:	f85d eb04 	ldr.w	lr, [sp], #4
 801d208:	b003      	add	sp, #12
 801d20a:	4770      	bx	lr
 801d20c:	200021d8 	.word	0x200021d8

0801d210 <abort>:
 801d210:	b508      	push	{r3, lr}
 801d212:	2006      	movs	r0, #6
 801d214:	f000 fa04 	bl	801d620 <raise>
 801d218:	2001      	movs	r0, #1
 801d21a:	f7e5 fdf5 	bl	8002e08 <_exit>

0801d21e <__sfputc_r>:
 801d21e:	6893      	ldr	r3, [r2, #8]
 801d220:	3b01      	subs	r3, #1
 801d222:	2b00      	cmp	r3, #0
 801d224:	b410      	push	{r4}
 801d226:	6093      	str	r3, [r2, #8]
 801d228:	da08      	bge.n	801d23c <__sfputc_r+0x1e>
 801d22a:	6994      	ldr	r4, [r2, #24]
 801d22c:	42a3      	cmp	r3, r4
 801d22e:	db01      	blt.n	801d234 <__sfputc_r+0x16>
 801d230:	290a      	cmp	r1, #10
 801d232:	d103      	bne.n	801d23c <__sfputc_r+0x1e>
 801d234:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d238:	f000 b934 	b.w	801d4a4 <__swbuf_r>
 801d23c:	6813      	ldr	r3, [r2, #0]
 801d23e:	1c58      	adds	r0, r3, #1
 801d240:	6010      	str	r0, [r2, #0]
 801d242:	7019      	strb	r1, [r3, #0]
 801d244:	4608      	mov	r0, r1
 801d246:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d24a:	4770      	bx	lr

0801d24c <__sfputs_r>:
 801d24c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d24e:	4606      	mov	r6, r0
 801d250:	460f      	mov	r7, r1
 801d252:	4614      	mov	r4, r2
 801d254:	18d5      	adds	r5, r2, r3
 801d256:	42ac      	cmp	r4, r5
 801d258:	d101      	bne.n	801d25e <__sfputs_r+0x12>
 801d25a:	2000      	movs	r0, #0
 801d25c:	e007      	b.n	801d26e <__sfputs_r+0x22>
 801d25e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d262:	463a      	mov	r2, r7
 801d264:	4630      	mov	r0, r6
 801d266:	f7ff ffda 	bl	801d21e <__sfputc_r>
 801d26a:	1c43      	adds	r3, r0, #1
 801d26c:	d1f3      	bne.n	801d256 <__sfputs_r+0xa>
 801d26e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801d270 <_vfiprintf_r>:
 801d270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d274:	460d      	mov	r5, r1
 801d276:	b09d      	sub	sp, #116	; 0x74
 801d278:	4614      	mov	r4, r2
 801d27a:	4698      	mov	r8, r3
 801d27c:	4606      	mov	r6, r0
 801d27e:	b118      	cbz	r0, 801d288 <_vfiprintf_r+0x18>
 801d280:	6a03      	ldr	r3, [r0, #32]
 801d282:	b90b      	cbnz	r3, 801d288 <_vfiprintf_r+0x18>
 801d284:	f7ff f94e 	bl	801c524 <__sinit>
 801d288:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d28a:	07d9      	lsls	r1, r3, #31
 801d28c:	d405      	bmi.n	801d29a <_vfiprintf_r+0x2a>
 801d28e:	89ab      	ldrh	r3, [r5, #12]
 801d290:	059a      	lsls	r2, r3, #22
 801d292:	d402      	bmi.n	801d29a <_vfiprintf_r+0x2a>
 801d294:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d296:	f7ff fb7c 	bl	801c992 <__retarget_lock_acquire_recursive>
 801d29a:	89ab      	ldrh	r3, [r5, #12]
 801d29c:	071b      	lsls	r3, r3, #28
 801d29e:	d501      	bpl.n	801d2a4 <_vfiprintf_r+0x34>
 801d2a0:	692b      	ldr	r3, [r5, #16]
 801d2a2:	b99b      	cbnz	r3, 801d2cc <_vfiprintf_r+0x5c>
 801d2a4:	4629      	mov	r1, r5
 801d2a6:	4630      	mov	r0, r6
 801d2a8:	f000 f93a 	bl	801d520 <__swsetup_r>
 801d2ac:	b170      	cbz	r0, 801d2cc <_vfiprintf_r+0x5c>
 801d2ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d2b0:	07dc      	lsls	r4, r3, #31
 801d2b2:	d504      	bpl.n	801d2be <_vfiprintf_r+0x4e>
 801d2b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d2b8:	b01d      	add	sp, #116	; 0x74
 801d2ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d2be:	89ab      	ldrh	r3, [r5, #12]
 801d2c0:	0598      	lsls	r0, r3, #22
 801d2c2:	d4f7      	bmi.n	801d2b4 <_vfiprintf_r+0x44>
 801d2c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d2c6:	f7ff fb65 	bl	801c994 <__retarget_lock_release_recursive>
 801d2ca:	e7f3      	b.n	801d2b4 <_vfiprintf_r+0x44>
 801d2cc:	2300      	movs	r3, #0
 801d2ce:	9309      	str	r3, [sp, #36]	; 0x24
 801d2d0:	2320      	movs	r3, #32
 801d2d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801d2d6:	f8cd 800c 	str.w	r8, [sp, #12]
 801d2da:	2330      	movs	r3, #48	; 0x30
 801d2dc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801d490 <_vfiprintf_r+0x220>
 801d2e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801d2e4:	f04f 0901 	mov.w	r9, #1
 801d2e8:	4623      	mov	r3, r4
 801d2ea:	469a      	mov	sl, r3
 801d2ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d2f0:	b10a      	cbz	r2, 801d2f6 <_vfiprintf_r+0x86>
 801d2f2:	2a25      	cmp	r2, #37	; 0x25
 801d2f4:	d1f9      	bne.n	801d2ea <_vfiprintf_r+0x7a>
 801d2f6:	ebba 0b04 	subs.w	fp, sl, r4
 801d2fa:	d00b      	beq.n	801d314 <_vfiprintf_r+0xa4>
 801d2fc:	465b      	mov	r3, fp
 801d2fe:	4622      	mov	r2, r4
 801d300:	4629      	mov	r1, r5
 801d302:	4630      	mov	r0, r6
 801d304:	f7ff ffa2 	bl	801d24c <__sfputs_r>
 801d308:	3001      	adds	r0, #1
 801d30a:	f000 80a9 	beq.w	801d460 <_vfiprintf_r+0x1f0>
 801d30e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d310:	445a      	add	r2, fp
 801d312:	9209      	str	r2, [sp, #36]	; 0x24
 801d314:	f89a 3000 	ldrb.w	r3, [sl]
 801d318:	2b00      	cmp	r3, #0
 801d31a:	f000 80a1 	beq.w	801d460 <_vfiprintf_r+0x1f0>
 801d31e:	2300      	movs	r3, #0
 801d320:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801d324:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d328:	f10a 0a01 	add.w	sl, sl, #1
 801d32c:	9304      	str	r3, [sp, #16]
 801d32e:	9307      	str	r3, [sp, #28]
 801d330:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801d334:	931a      	str	r3, [sp, #104]	; 0x68
 801d336:	4654      	mov	r4, sl
 801d338:	2205      	movs	r2, #5
 801d33a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d33e:	4854      	ldr	r0, [pc, #336]	; (801d490 <_vfiprintf_r+0x220>)
 801d340:	f7e2 ff8e 	bl	8000260 <memchr>
 801d344:	9a04      	ldr	r2, [sp, #16]
 801d346:	b9d8      	cbnz	r0, 801d380 <_vfiprintf_r+0x110>
 801d348:	06d1      	lsls	r1, r2, #27
 801d34a:	bf44      	itt	mi
 801d34c:	2320      	movmi	r3, #32
 801d34e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d352:	0713      	lsls	r3, r2, #28
 801d354:	bf44      	itt	mi
 801d356:	232b      	movmi	r3, #43	; 0x2b
 801d358:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d35c:	f89a 3000 	ldrb.w	r3, [sl]
 801d360:	2b2a      	cmp	r3, #42	; 0x2a
 801d362:	d015      	beq.n	801d390 <_vfiprintf_r+0x120>
 801d364:	9a07      	ldr	r2, [sp, #28]
 801d366:	4654      	mov	r4, sl
 801d368:	2000      	movs	r0, #0
 801d36a:	f04f 0c0a 	mov.w	ip, #10
 801d36e:	4621      	mov	r1, r4
 801d370:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d374:	3b30      	subs	r3, #48	; 0x30
 801d376:	2b09      	cmp	r3, #9
 801d378:	d94d      	bls.n	801d416 <_vfiprintf_r+0x1a6>
 801d37a:	b1b0      	cbz	r0, 801d3aa <_vfiprintf_r+0x13a>
 801d37c:	9207      	str	r2, [sp, #28]
 801d37e:	e014      	b.n	801d3aa <_vfiprintf_r+0x13a>
 801d380:	eba0 0308 	sub.w	r3, r0, r8
 801d384:	fa09 f303 	lsl.w	r3, r9, r3
 801d388:	4313      	orrs	r3, r2
 801d38a:	9304      	str	r3, [sp, #16]
 801d38c:	46a2      	mov	sl, r4
 801d38e:	e7d2      	b.n	801d336 <_vfiprintf_r+0xc6>
 801d390:	9b03      	ldr	r3, [sp, #12]
 801d392:	1d19      	adds	r1, r3, #4
 801d394:	681b      	ldr	r3, [r3, #0]
 801d396:	9103      	str	r1, [sp, #12]
 801d398:	2b00      	cmp	r3, #0
 801d39a:	bfbb      	ittet	lt
 801d39c:	425b      	neglt	r3, r3
 801d39e:	f042 0202 	orrlt.w	r2, r2, #2
 801d3a2:	9307      	strge	r3, [sp, #28]
 801d3a4:	9307      	strlt	r3, [sp, #28]
 801d3a6:	bfb8      	it	lt
 801d3a8:	9204      	strlt	r2, [sp, #16]
 801d3aa:	7823      	ldrb	r3, [r4, #0]
 801d3ac:	2b2e      	cmp	r3, #46	; 0x2e
 801d3ae:	d10c      	bne.n	801d3ca <_vfiprintf_r+0x15a>
 801d3b0:	7863      	ldrb	r3, [r4, #1]
 801d3b2:	2b2a      	cmp	r3, #42	; 0x2a
 801d3b4:	d134      	bne.n	801d420 <_vfiprintf_r+0x1b0>
 801d3b6:	9b03      	ldr	r3, [sp, #12]
 801d3b8:	1d1a      	adds	r2, r3, #4
 801d3ba:	681b      	ldr	r3, [r3, #0]
 801d3bc:	9203      	str	r2, [sp, #12]
 801d3be:	2b00      	cmp	r3, #0
 801d3c0:	bfb8      	it	lt
 801d3c2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801d3c6:	3402      	adds	r4, #2
 801d3c8:	9305      	str	r3, [sp, #20]
 801d3ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801d4a0 <_vfiprintf_r+0x230>
 801d3ce:	7821      	ldrb	r1, [r4, #0]
 801d3d0:	2203      	movs	r2, #3
 801d3d2:	4650      	mov	r0, sl
 801d3d4:	f7e2 ff44 	bl	8000260 <memchr>
 801d3d8:	b138      	cbz	r0, 801d3ea <_vfiprintf_r+0x17a>
 801d3da:	9b04      	ldr	r3, [sp, #16]
 801d3dc:	eba0 000a 	sub.w	r0, r0, sl
 801d3e0:	2240      	movs	r2, #64	; 0x40
 801d3e2:	4082      	lsls	r2, r0
 801d3e4:	4313      	orrs	r3, r2
 801d3e6:	3401      	adds	r4, #1
 801d3e8:	9304      	str	r3, [sp, #16]
 801d3ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d3ee:	4829      	ldr	r0, [pc, #164]	; (801d494 <_vfiprintf_r+0x224>)
 801d3f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801d3f4:	2206      	movs	r2, #6
 801d3f6:	f7e2 ff33 	bl	8000260 <memchr>
 801d3fa:	2800      	cmp	r0, #0
 801d3fc:	d03f      	beq.n	801d47e <_vfiprintf_r+0x20e>
 801d3fe:	4b26      	ldr	r3, [pc, #152]	; (801d498 <_vfiprintf_r+0x228>)
 801d400:	bb1b      	cbnz	r3, 801d44a <_vfiprintf_r+0x1da>
 801d402:	9b03      	ldr	r3, [sp, #12]
 801d404:	3307      	adds	r3, #7
 801d406:	f023 0307 	bic.w	r3, r3, #7
 801d40a:	3308      	adds	r3, #8
 801d40c:	9303      	str	r3, [sp, #12]
 801d40e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d410:	443b      	add	r3, r7
 801d412:	9309      	str	r3, [sp, #36]	; 0x24
 801d414:	e768      	b.n	801d2e8 <_vfiprintf_r+0x78>
 801d416:	fb0c 3202 	mla	r2, ip, r2, r3
 801d41a:	460c      	mov	r4, r1
 801d41c:	2001      	movs	r0, #1
 801d41e:	e7a6      	b.n	801d36e <_vfiprintf_r+0xfe>
 801d420:	2300      	movs	r3, #0
 801d422:	3401      	adds	r4, #1
 801d424:	9305      	str	r3, [sp, #20]
 801d426:	4619      	mov	r1, r3
 801d428:	f04f 0c0a 	mov.w	ip, #10
 801d42c:	4620      	mov	r0, r4
 801d42e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d432:	3a30      	subs	r2, #48	; 0x30
 801d434:	2a09      	cmp	r2, #9
 801d436:	d903      	bls.n	801d440 <_vfiprintf_r+0x1d0>
 801d438:	2b00      	cmp	r3, #0
 801d43a:	d0c6      	beq.n	801d3ca <_vfiprintf_r+0x15a>
 801d43c:	9105      	str	r1, [sp, #20]
 801d43e:	e7c4      	b.n	801d3ca <_vfiprintf_r+0x15a>
 801d440:	fb0c 2101 	mla	r1, ip, r1, r2
 801d444:	4604      	mov	r4, r0
 801d446:	2301      	movs	r3, #1
 801d448:	e7f0      	b.n	801d42c <_vfiprintf_r+0x1bc>
 801d44a:	ab03      	add	r3, sp, #12
 801d44c:	9300      	str	r3, [sp, #0]
 801d44e:	462a      	mov	r2, r5
 801d450:	4b12      	ldr	r3, [pc, #72]	; (801d49c <_vfiprintf_r+0x22c>)
 801d452:	a904      	add	r1, sp, #16
 801d454:	4630      	mov	r0, r6
 801d456:	f3af 8000 	nop.w
 801d45a:	4607      	mov	r7, r0
 801d45c:	1c78      	adds	r0, r7, #1
 801d45e:	d1d6      	bne.n	801d40e <_vfiprintf_r+0x19e>
 801d460:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d462:	07d9      	lsls	r1, r3, #31
 801d464:	d405      	bmi.n	801d472 <_vfiprintf_r+0x202>
 801d466:	89ab      	ldrh	r3, [r5, #12]
 801d468:	059a      	lsls	r2, r3, #22
 801d46a:	d402      	bmi.n	801d472 <_vfiprintf_r+0x202>
 801d46c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d46e:	f7ff fa91 	bl	801c994 <__retarget_lock_release_recursive>
 801d472:	89ab      	ldrh	r3, [r5, #12]
 801d474:	065b      	lsls	r3, r3, #25
 801d476:	f53f af1d 	bmi.w	801d2b4 <_vfiprintf_r+0x44>
 801d47a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d47c:	e71c      	b.n	801d2b8 <_vfiprintf_r+0x48>
 801d47e:	ab03      	add	r3, sp, #12
 801d480:	9300      	str	r3, [sp, #0]
 801d482:	462a      	mov	r2, r5
 801d484:	4b05      	ldr	r3, [pc, #20]	; (801d49c <_vfiprintf_r+0x22c>)
 801d486:	a904      	add	r1, sp, #16
 801d488:	4630      	mov	r0, r6
 801d48a:	f7ff fcdf 	bl	801ce4c <_printf_i>
 801d48e:	e7e4      	b.n	801d45a <_vfiprintf_r+0x1ea>
 801d490:	0801f77c 	.word	0x0801f77c
 801d494:	0801f786 	.word	0x0801f786
 801d498:	00000000 	.word	0x00000000
 801d49c:	0801d24d 	.word	0x0801d24d
 801d4a0:	0801f782 	.word	0x0801f782

0801d4a4 <__swbuf_r>:
 801d4a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d4a6:	460e      	mov	r6, r1
 801d4a8:	4614      	mov	r4, r2
 801d4aa:	4605      	mov	r5, r0
 801d4ac:	b118      	cbz	r0, 801d4b6 <__swbuf_r+0x12>
 801d4ae:	6a03      	ldr	r3, [r0, #32]
 801d4b0:	b90b      	cbnz	r3, 801d4b6 <__swbuf_r+0x12>
 801d4b2:	f7ff f837 	bl	801c524 <__sinit>
 801d4b6:	69a3      	ldr	r3, [r4, #24]
 801d4b8:	60a3      	str	r3, [r4, #8]
 801d4ba:	89a3      	ldrh	r3, [r4, #12]
 801d4bc:	071a      	lsls	r2, r3, #28
 801d4be:	d525      	bpl.n	801d50c <__swbuf_r+0x68>
 801d4c0:	6923      	ldr	r3, [r4, #16]
 801d4c2:	b31b      	cbz	r3, 801d50c <__swbuf_r+0x68>
 801d4c4:	6823      	ldr	r3, [r4, #0]
 801d4c6:	6922      	ldr	r2, [r4, #16]
 801d4c8:	1a98      	subs	r0, r3, r2
 801d4ca:	6963      	ldr	r3, [r4, #20]
 801d4cc:	b2f6      	uxtb	r6, r6
 801d4ce:	4283      	cmp	r3, r0
 801d4d0:	4637      	mov	r7, r6
 801d4d2:	dc04      	bgt.n	801d4de <__swbuf_r+0x3a>
 801d4d4:	4621      	mov	r1, r4
 801d4d6:	4628      	mov	r0, r5
 801d4d8:	f7ff fe60 	bl	801d19c <_fflush_r>
 801d4dc:	b9e0      	cbnz	r0, 801d518 <__swbuf_r+0x74>
 801d4de:	68a3      	ldr	r3, [r4, #8]
 801d4e0:	3b01      	subs	r3, #1
 801d4e2:	60a3      	str	r3, [r4, #8]
 801d4e4:	6823      	ldr	r3, [r4, #0]
 801d4e6:	1c5a      	adds	r2, r3, #1
 801d4e8:	6022      	str	r2, [r4, #0]
 801d4ea:	701e      	strb	r6, [r3, #0]
 801d4ec:	6962      	ldr	r2, [r4, #20]
 801d4ee:	1c43      	adds	r3, r0, #1
 801d4f0:	429a      	cmp	r2, r3
 801d4f2:	d004      	beq.n	801d4fe <__swbuf_r+0x5a>
 801d4f4:	89a3      	ldrh	r3, [r4, #12]
 801d4f6:	07db      	lsls	r3, r3, #31
 801d4f8:	d506      	bpl.n	801d508 <__swbuf_r+0x64>
 801d4fa:	2e0a      	cmp	r6, #10
 801d4fc:	d104      	bne.n	801d508 <__swbuf_r+0x64>
 801d4fe:	4621      	mov	r1, r4
 801d500:	4628      	mov	r0, r5
 801d502:	f7ff fe4b 	bl	801d19c <_fflush_r>
 801d506:	b938      	cbnz	r0, 801d518 <__swbuf_r+0x74>
 801d508:	4638      	mov	r0, r7
 801d50a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d50c:	4621      	mov	r1, r4
 801d50e:	4628      	mov	r0, r5
 801d510:	f000 f806 	bl	801d520 <__swsetup_r>
 801d514:	2800      	cmp	r0, #0
 801d516:	d0d5      	beq.n	801d4c4 <__swbuf_r+0x20>
 801d518:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801d51c:	e7f4      	b.n	801d508 <__swbuf_r+0x64>
	...

0801d520 <__swsetup_r>:
 801d520:	b538      	push	{r3, r4, r5, lr}
 801d522:	4b2a      	ldr	r3, [pc, #168]	; (801d5cc <__swsetup_r+0xac>)
 801d524:	4605      	mov	r5, r0
 801d526:	6818      	ldr	r0, [r3, #0]
 801d528:	460c      	mov	r4, r1
 801d52a:	b118      	cbz	r0, 801d534 <__swsetup_r+0x14>
 801d52c:	6a03      	ldr	r3, [r0, #32]
 801d52e:	b90b      	cbnz	r3, 801d534 <__swsetup_r+0x14>
 801d530:	f7fe fff8 	bl	801c524 <__sinit>
 801d534:	89a3      	ldrh	r3, [r4, #12]
 801d536:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801d53a:	0718      	lsls	r0, r3, #28
 801d53c:	d422      	bmi.n	801d584 <__swsetup_r+0x64>
 801d53e:	06d9      	lsls	r1, r3, #27
 801d540:	d407      	bmi.n	801d552 <__swsetup_r+0x32>
 801d542:	2309      	movs	r3, #9
 801d544:	602b      	str	r3, [r5, #0]
 801d546:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801d54a:	81a3      	strh	r3, [r4, #12]
 801d54c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d550:	e034      	b.n	801d5bc <__swsetup_r+0x9c>
 801d552:	0758      	lsls	r0, r3, #29
 801d554:	d512      	bpl.n	801d57c <__swsetup_r+0x5c>
 801d556:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d558:	b141      	cbz	r1, 801d56c <__swsetup_r+0x4c>
 801d55a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d55e:	4299      	cmp	r1, r3
 801d560:	d002      	beq.n	801d568 <__swsetup_r+0x48>
 801d562:	4628      	mov	r0, r5
 801d564:	f7ff fa58 	bl	801ca18 <_free_r>
 801d568:	2300      	movs	r3, #0
 801d56a:	6363      	str	r3, [r4, #52]	; 0x34
 801d56c:	89a3      	ldrh	r3, [r4, #12]
 801d56e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801d572:	81a3      	strh	r3, [r4, #12]
 801d574:	2300      	movs	r3, #0
 801d576:	6063      	str	r3, [r4, #4]
 801d578:	6923      	ldr	r3, [r4, #16]
 801d57a:	6023      	str	r3, [r4, #0]
 801d57c:	89a3      	ldrh	r3, [r4, #12]
 801d57e:	f043 0308 	orr.w	r3, r3, #8
 801d582:	81a3      	strh	r3, [r4, #12]
 801d584:	6923      	ldr	r3, [r4, #16]
 801d586:	b94b      	cbnz	r3, 801d59c <__swsetup_r+0x7c>
 801d588:	89a3      	ldrh	r3, [r4, #12]
 801d58a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801d58e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801d592:	d003      	beq.n	801d59c <__swsetup_r+0x7c>
 801d594:	4621      	mov	r1, r4
 801d596:	4628      	mov	r0, r5
 801d598:	f000 f884 	bl	801d6a4 <__smakebuf_r>
 801d59c:	89a0      	ldrh	r0, [r4, #12]
 801d59e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801d5a2:	f010 0301 	ands.w	r3, r0, #1
 801d5a6:	d00a      	beq.n	801d5be <__swsetup_r+0x9e>
 801d5a8:	2300      	movs	r3, #0
 801d5aa:	60a3      	str	r3, [r4, #8]
 801d5ac:	6963      	ldr	r3, [r4, #20]
 801d5ae:	425b      	negs	r3, r3
 801d5b0:	61a3      	str	r3, [r4, #24]
 801d5b2:	6923      	ldr	r3, [r4, #16]
 801d5b4:	b943      	cbnz	r3, 801d5c8 <__swsetup_r+0xa8>
 801d5b6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801d5ba:	d1c4      	bne.n	801d546 <__swsetup_r+0x26>
 801d5bc:	bd38      	pop	{r3, r4, r5, pc}
 801d5be:	0781      	lsls	r1, r0, #30
 801d5c0:	bf58      	it	pl
 801d5c2:	6963      	ldrpl	r3, [r4, #20]
 801d5c4:	60a3      	str	r3, [r4, #8]
 801d5c6:	e7f4      	b.n	801d5b2 <__swsetup_r+0x92>
 801d5c8:	2000      	movs	r0, #0
 801d5ca:	e7f7      	b.n	801d5bc <__swsetup_r+0x9c>
 801d5cc:	200021d8 	.word	0x200021d8

0801d5d0 <_raise_r>:
 801d5d0:	291f      	cmp	r1, #31
 801d5d2:	b538      	push	{r3, r4, r5, lr}
 801d5d4:	4604      	mov	r4, r0
 801d5d6:	460d      	mov	r5, r1
 801d5d8:	d904      	bls.n	801d5e4 <_raise_r+0x14>
 801d5da:	2316      	movs	r3, #22
 801d5dc:	6003      	str	r3, [r0, #0]
 801d5de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d5e2:	bd38      	pop	{r3, r4, r5, pc}
 801d5e4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801d5e6:	b112      	cbz	r2, 801d5ee <_raise_r+0x1e>
 801d5e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801d5ec:	b94b      	cbnz	r3, 801d602 <_raise_r+0x32>
 801d5ee:	4620      	mov	r0, r4
 801d5f0:	f000 f830 	bl	801d654 <_getpid_r>
 801d5f4:	462a      	mov	r2, r5
 801d5f6:	4601      	mov	r1, r0
 801d5f8:	4620      	mov	r0, r4
 801d5fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d5fe:	f000 b817 	b.w	801d630 <_kill_r>
 801d602:	2b01      	cmp	r3, #1
 801d604:	d00a      	beq.n	801d61c <_raise_r+0x4c>
 801d606:	1c59      	adds	r1, r3, #1
 801d608:	d103      	bne.n	801d612 <_raise_r+0x42>
 801d60a:	2316      	movs	r3, #22
 801d60c:	6003      	str	r3, [r0, #0]
 801d60e:	2001      	movs	r0, #1
 801d610:	e7e7      	b.n	801d5e2 <_raise_r+0x12>
 801d612:	2400      	movs	r4, #0
 801d614:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801d618:	4628      	mov	r0, r5
 801d61a:	4798      	blx	r3
 801d61c:	2000      	movs	r0, #0
 801d61e:	e7e0      	b.n	801d5e2 <_raise_r+0x12>

0801d620 <raise>:
 801d620:	4b02      	ldr	r3, [pc, #8]	; (801d62c <raise+0xc>)
 801d622:	4601      	mov	r1, r0
 801d624:	6818      	ldr	r0, [r3, #0]
 801d626:	f7ff bfd3 	b.w	801d5d0 <_raise_r>
 801d62a:	bf00      	nop
 801d62c:	200021d8 	.word	0x200021d8

0801d630 <_kill_r>:
 801d630:	b538      	push	{r3, r4, r5, lr}
 801d632:	4d07      	ldr	r5, [pc, #28]	; (801d650 <_kill_r+0x20>)
 801d634:	2300      	movs	r3, #0
 801d636:	4604      	mov	r4, r0
 801d638:	4608      	mov	r0, r1
 801d63a:	4611      	mov	r1, r2
 801d63c:	602b      	str	r3, [r5, #0]
 801d63e:	f7e5 fbd3 	bl	8002de8 <_kill>
 801d642:	1c43      	adds	r3, r0, #1
 801d644:	d102      	bne.n	801d64c <_kill_r+0x1c>
 801d646:	682b      	ldr	r3, [r5, #0]
 801d648:	b103      	cbz	r3, 801d64c <_kill_r+0x1c>
 801d64a:	6023      	str	r3, [r4, #0]
 801d64c:	bd38      	pop	{r3, r4, r5, pc}
 801d64e:	bf00      	nop
 801d650:	20010ce4 	.word	0x20010ce4

0801d654 <_getpid_r>:
 801d654:	f7e5 bbc0 	b.w	8002dd8 <_getpid>

0801d658 <__swhatbuf_r>:
 801d658:	b570      	push	{r4, r5, r6, lr}
 801d65a:	460c      	mov	r4, r1
 801d65c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d660:	2900      	cmp	r1, #0
 801d662:	b096      	sub	sp, #88	; 0x58
 801d664:	4615      	mov	r5, r2
 801d666:	461e      	mov	r6, r3
 801d668:	da0d      	bge.n	801d686 <__swhatbuf_r+0x2e>
 801d66a:	89a3      	ldrh	r3, [r4, #12]
 801d66c:	f013 0f80 	tst.w	r3, #128	; 0x80
 801d670:	f04f 0100 	mov.w	r1, #0
 801d674:	bf0c      	ite	eq
 801d676:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801d67a:	2340      	movne	r3, #64	; 0x40
 801d67c:	2000      	movs	r0, #0
 801d67e:	6031      	str	r1, [r6, #0]
 801d680:	602b      	str	r3, [r5, #0]
 801d682:	b016      	add	sp, #88	; 0x58
 801d684:	bd70      	pop	{r4, r5, r6, pc}
 801d686:	466a      	mov	r2, sp
 801d688:	f000 f848 	bl	801d71c <_fstat_r>
 801d68c:	2800      	cmp	r0, #0
 801d68e:	dbec      	blt.n	801d66a <__swhatbuf_r+0x12>
 801d690:	9901      	ldr	r1, [sp, #4]
 801d692:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801d696:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801d69a:	4259      	negs	r1, r3
 801d69c:	4159      	adcs	r1, r3
 801d69e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801d6a2:	e7eb      	b.n	801d67c <__swhatbuf_r+0x24>

0801d6a4 <__smakebuf_r>:
 801d6a4:	898b      	ldrh	r3, [r1, #12]
 801d6a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801d6a8:	079d      	lsls	r5, r3, #30
 801d6aa:	4606      	mov	r6, r0
 801d6ac:	460c      	mov	r4, r1
 801d6ae:	d507      	bpl.n	801d6c0 <__smakebuf_r+0x1c>
 801d6b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801d6b4:	6023      	str	r3, [r4, #0]
 801d6b6:	6123      	str	r3, [r4, #16]
 801d6b8:	2301      	movs	r3, #1
 801d6ba:	6163      	str	r3, [r4, #20]
 801d6bc:	b002      	add	sp, #8
 801d6be:	bd70      	pop	{r4, r5, r6, pc}
 801d6c0:	ab01      	add	r3, sp, #4
 801d6c2:	466a      	mov	r2, sp
 801d6c4:	f7ff ffc8 	bl	801d658 <__swhatbuf_r>
 801d6c8:	9900      	ldr	r1, [sp, #0]
 801d6ca:	4605      	mov	r5, r0
 801d6cc:	4630      	mov	r0, r6
 801d6ce:	f7fe fcf1 	bl	801c0b4 <_malloc_r>
 801d6d2:	b948      	cbnz	r0, 801d6e8 <__smakebuf_r+0x44>
 801d6d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d6d8:	059a      	lsls	r2, r3, #22
 801d6da:	d4ef      	bmi.n	801d6bc <__smakebuf_r+0x18>
 801d6dc:	f023 0303 	bic.w	r3, r3, #3
 801d6e0:	f043 0302 	orr.w	r3, r3, #2
 801d6e4:	81a3      	strh	r3, [r4, #12]
 801d6e6:	e7e3      	b.n	801d6b0 <__smakebuf_r+0xc>
 801d6e8:	89a3      	ldrh	r3, [r4, #12]
 801d6ea:	6020      	str	r0, [r4, #0]
 801d6ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d6f0:	81a3      	strh	r3, [r4, #12]
 801d6f2:	9b00      	ldr	r3, [sp, #0]
 801d6f4:	6163      	str	r3, [r4, #20]
 801d6f6:	9b01      	ldr	r3, [sp, #4]
 801d6f8:	6120      	str	r0, [r4, #16]
 801d6fa:	b15b      	cbz	r3, 801d714 <__smakebuf_r+0x70>
 801d6fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d700:	4630      	mov	r0, r6
 801d702:	f000 f81d 	bl	801d740 <_isatty_r>
 801d706:	b128      	cbz	r0, 801d714 <__smakebuf_r+0x70>
 801d708:	89a3      	ldrh	r3, [r4, #12]
 801d70a:	f023 0303 	bic.w	r3, r3, #3
 801d70e:	f043 0301 	orr.w	r3, r3, #1
 801d712:	81a3      	strh	r3, [r4, #12]
 801d714:	89a3      	ldrh	r3, [r4, #12]
 801d716:	431d      	orrs	r5, r3
 801d718:	81a5      	strh	r5, [r4, #12]
 801d71a:	e7cf      	b.n	801d6bc <__smakebuf_r+0x18>

0801d71c <_fstat_r>:
 801d71c:	b538      	push	{r3, r4, r5, lr}
 801d71e:	4d07      	ldr	r5, [pc, #28]	; (801d73c <_fstat_r+0x20>)
 801d720:	2300      	movs	r3, #0
 801d722:	4604      	mov	r4, r0
 801d724:	4608      	mov	r0, r1
 801d726:	4611      	mov	r1, r2
 801d728:	602b      	str	r3, [r5, #0]
 801d72a:	f7e5 fbbc 	bl	8002ea6 <_fstat>
 801d72e:	1c43      	adds	r3, r0, #1
 801d730:	d102      	bne.n	801d738 <_fstat_r+0x1c>
 801d732:	682b      	ldr	r3, [r5, #0]
 801d734:	b103      	cbz	r3, 801d738 <_fstat_r+0x1c>
 801d736:	6023      	str	r3, [r4, #0]
 801d738:	bd38      	pop	{r3, r4, r5, pc}
 801d73a:	bf00      	nop
 801d73c:	20010ce4 	.word	0x20010ce4

0801d740 <_isatty_r>:
 801d740:	b538      	push	{r3, r4, r5, lr}
 801d742:	4d06      	ldr	r5, [pc, #24]	; (801d75c <_isatty_r+0x1c>)
 801d744:	2300      	movs	r3, #0
 801d746:	4604      	mov	r4, r0
 801d748:	4608      	mov	r0, r1
 801d74a:	602b      	str	r3, [r5, #0]
 801d74c:	f7e5 fbbb 	bl	8002ec6 <_isatty>
 801d750:	1c43      	adds	r3, r0, #1
 801d752:	d102      	bne.n	801d75a <_isatty_r+0x1a>
 801d754:	682b      	ldr	r3, [r5, #0]
 801d756:	b103      	cbz	r3, 801d75a <_isatty_r+0x1a>
 801d758:	6023      	str	r3, [r4, #0]
 801d75a:	bd38      	pop	{r3, r4, r5, pc}
 801d75c:	20010ce4 	.word	0x20010ce4

0801d760 <_init>:
 801d760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d762:	bf00      	nop
 801d764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d766:	bc08      	pop	{r3}
 801d768:	469e      	mov	lr, r3
 801d76a:	4770      	bx	lr

0801d76c <_fini>:
 801d76c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d76e:	bf00      	nop
 801d770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d772:	bc08      	pop	{r3}
 801d774:	469e      	mov	lr, r3
 801d776:	4770      	bx	lr
