
scorbot_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a42c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a84  0801a630  0801a630  0002a630  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c0b4  0801c0b4  0003213c  2**0
                  CONTENTS
  4 .ARM          00000008  0801c0b4  0801c0b4  0002c0b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c0bc  0801c0bc  0003213c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  0801c0bc  0801c0bc  0002c0bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c0cc  0801c0cc  0002c0cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000213c  20000000  0801c0d0  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000e9f0  20002140  0801e20c  00032140  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20010b30  0801e20c  00040b30  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0003213c  2**0
                  CONTENTS, READONLY
 12 .comment      00000076  00000000  00000000  0003216a  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002d28c  00000000  00000000  000321e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005807  00000000  00000000  0005f46c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001cc0  00000000  00000000  00064c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001639  00000000  00000000  00066938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003040b  00000000  00000000  00067f71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025ec4  00000000  00000000  0009837c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0012092b  00000000  00000000  000be240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000086b8  00000000  00000000  001deb6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  001e7224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20002140 	.word	0x20002140
 800021c:	00000000 	.word	0x00000000
 8000220:	0801a614 	.word	0x0801a614

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20002144 	.word	0x20002144
 800023c:	0801a614 	.word	0x0801a614

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr
	...

08000260 <memchr>:
 8000260:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000264:	2a10      	cmp	r2, #16
 8000266:	db2b      	blt.n	80002c0 <memchr+0x60>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	d008      	beq.n	8000280 <memchr+0x20>
 800026e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000272:	3a01      	subs	r2, #1
 8000274:	428b      	cmp	r3, r1
 8000276:	d02d      	beq.n	80002d4 <memchr+0x74>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	b342      	cbz	r2, 80002d0 <memchr+0x70>
 800027e:	d1f6      	bne.n	800026e <memchr+0xe>
 8000280:	b4f0      	push	{r4, r5, r6, r7}
 8000282:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000286:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800028a:	f022 0407 	bic.w	r4, r2, #7
 800028e:	f07f 0700 	mvns.w	r7, #0
 8000292:	2300      	movs	r3, #0
 8000294:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000298:	3c08      	subs	r4, #8
 800029a:	ea85 0501 	eor.w	r5, r5, r1
 800029e:	ea86 0601 	eor.w	r6, r6, r1
 80002a2:	fa85 f547 	uadd8	r5, r5, r7
 80002a6:	faa3 f587 	sel	r5, r3, r7
 80002aa:	fa86 f647 	uadd8	r6, r6, r7
 80002ae:	faa5 f687 	sel	r6, r5, r7
 80002b2:	b98e      	cbnz	r6, 80002d8 <memchr+0x78>
 80002b4:	d1ee      	bne.n	8000294 <memchr+0x34>
 80002b6:	bcf0      	pop	{r4, r5, r6, r7}
 80002b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002bc:	f002 0207 	and.w	r2, r2, #7
 80002c0:	b132      	cbz	r2, 80002d0 <memchr+0x70>
 80002c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c6:	3a01      	subs	r2, #1
 80002c8:	ea83 0301 	eor.w	r3, r3, r1
 80002cc:	b113      	cbz	r3, 80002d4 <memchr+0x74>
 80002ce:	d1f8      	bne.n	80002c2 <memchr+0x62>
 80002d0:	2000      	movs	r0, #0
 80002d2:	4770      	bx	lr
 80002d4:	3801      	subs	r0, #1
 80002d6:	4770      	bx	lr
 80002d8:	2d00      	cmp	r5, #0
 80002da:	bf06      	itte	eq
 80002dc:	4635      	moveq	r5, r6
 80002de:	3803      	subeq	r0, #3
 80002e0:	3807      	subne	r0, #7
 80002e2:	f015 0f01 	tst.w	r5, #1
 80002e6:	d107      	bne.n	80002f8 <memchr+0x98>
 80002e8:	3001      	adds	r0, #1
 80002ea:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ee:	bf02      	ittt	eq
 80002f0:	3001      	addeq	r0, #1
 80002f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002f6:	3001      	addeq	r0, #1
 80002f8:	bcf0      	pop	{r4, r5, r6, r7}
 80002fa:	3801      	subs	r0, #1
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop

08000300 <strlen>:
 8000300:	4603      	mov	r3, r0
 8000302:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000306:	2a00      	cmp	r2, #0
 8000308:	d1fb      	bne.n	8000302 <strlen+0x2>
 800030a:	1a18      	subs	r0, r3, r0
 800030c:	3801      	subs	r0, #1
 800030e:	4770      	bx	lr

08000310 <__aeabi_ldivmod>:
 8000310:	b97b      	cbnz	r3, 8000332 <__aeabi_ldivmod+0x22>
 8000312:	b972      	cbnz	r2, 8000332 <__aeabi_ldivmod+0x22>
 8000314:	2900      	cmp	r1, #0
 8000316:	bfbe      	ittt	lt
 8000318:	2000      	movlt	r0, #0
 800031a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800031e:	e006      	blt.n	800032e <__aeabi_ldivmod+0x1e>
 8000320:	bf08      	it	eq
 8000322:	2800      	cmpeq	r0, #0
 8000324:	bf1c      	itt	ne
 8000326:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800032a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800032e:	f000 b9bb 	b.w	80006a8 <__aeabi_idiv0>
 8000332:	f1ad 0c08 	sub.w	ip, sp, #8
 8000336:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800033a:	2900      	cmp	r1, #0
 800033c:	db09      	blt.n	8000352 <__aeabi_ldivmod+0x42>
 800033e:	2b00      	cmp	r3, #0
 8000340:	db1a      	blt.n	8000378 <__aeabi_ldivmod+0x68>
 8000342:	f000 f84d 	bl	80003e0 <__udivmoddi4>
 8000346:	f8dd e004 	ldr.w	lr, [sp, #4]
 800034a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034e:	b004      	add	sp, #16
 8000350:	4770      	bx	lr
 8000352:	4240      	negs	r0, r0
 8000354:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000358:	2b00      	cmp	r3, #0
 800035a:	db1b      	blt.n	8000394 <__aeabi_ldivmod+0x84>
 800035c:	f000 f840 	bl	80003e0 <__udivmoddi4>
 8000360:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000364:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000368:	b004      	add	sp, #16
 800036a:	4240      	negs	r0, r0
 800036c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000370:	4252      	negs	r2, r2
 8000372:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000376:	4770      	bx	lr
 8000378:	4252      	negs	r2, r2
 800037a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037e:	f000 f82f 	bl	80003e0 <__udivmoddi4>
 8000382:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000386:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800038a:	b004      	add	sp, #16
 800038c:	4240      	negs	r0, r0
 800038e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000392:	4770      	bx	lr
 8000394:	4252      	negs	r2, r2
 8000396:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800039a:	f000 f821 	bl	80003e0 <__udivmoddi4>
 800039e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003a6:	b004      	add	sp, #16
 80003a8:	4252      	negs	r2, r2
 80003aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003c4:	f000 b970 	b.w	80006a8 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9e08      	ldr	r6, [sp, #32]
 80003e6:	460d      	mov	r5, r1
 80003e8:	4604      	mov	r4, r0
 80003ea:	460f      	mov	r7, r1
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d14a      	bne.n	8000486 <__udivmoddi4+0xa6>
 80003f0:	428a      	cmp	r2, r1
 80003f2:	4694      	mov	ip, r2
 80003f4:	d965      	bls.n	80004c2 <__udivmoddi4+0xe2>
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	b143      	cbz	r3, 800040e <__udivmoddi4+0x2e>
 80003fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000400:	f1c3 0220 	rsb	r2, r3, #32
 8000404:	409f      	lsls	r7, r3
 8000406:	fa20 f202 	lsr.w	r2, r0, r2
 800040a:	4317      	orrs	r7, r2
 800040c:	409c      	lsls	r4, r3
 800040e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000412:	fa1f f58c 	uxth.w	r5, ip
 8000416:	fbb7 f1fe 	udiv	r1, r7, lr
 800041a:	0c22      	lsrs	r2, r4, #16
 800041c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000420:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000424:	fb01 f005 	mul.w	r0, r1, r5
 8000428:	4290      	cmp	r0, r2
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x62>
 800042c:	eb1c 0202 	adds.w	r2, ip, r2
 8000430:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000434:	f080 811c 	bcs.w	8000670 <__udivmoddi4+0x290>
 8000438:	4290      	cmp	r0, r2
 800043a:	f240 8119 	bls.w	8000670 <__udivmoddi4+0x290>
 800043e:	3902      	subs	r1, #2
 8000440:	4462      	add	r2, ip
 8000442:	1a12      	subs	r2, r2, r0
 8000444:	b2a4      	uxth	r4, r4
 8000446:	fbb2 f0fe 	udiv	r0, r2, lr
 800044a:	fb0e 2210 	mls	r2, lr, r0, r2
 800044e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000452:	fb00 f505 	mul.w	r5, r0, r5
 8000456:	42a5      	cmp	r5, r4
 8000458:	d90a      	bls.n	8000470 <__udivmoddi4+0x90>
 800045a:	eb1c 0404 	adds.w	r4, ip, r4
 800045e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000462:	f080 8107 	bcs.w	8000674 <__udivmoddi4+0x294>
 8000466:	42a5      	cmp	r5, r4
 8000468:	f240 8104 	bls.w	8000674 <__udivmoddi4+0x294>
 800046c:	4464      	add	r4, ip
 800046e:	3802      	subs	r0, #2
 8000470:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000474:	1b64      	subs	r4, r4, r5
 8000476:	2100      	movs	r1, #0
 8000478:	b11e      	cbz	r6, 8000482 <__udivmoddi4+0xa2>
 800047a:	40dc      	lsrs	r4, r3
 800047c:	2300      	movs	r3, #0
 800047e:	e9c6 4300 	strd	r4, r3, [r6]
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	428b      	cmp	r3, r1
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0xbc>
 800048a:	2e00      	cmp	r6, #0
 800048c:	f000 80ed 	beq.w	800066a <__udivmoddi4+0x28a>
 8000490:	2100      	movs	r1, #0
 8000492:	e9c6 0500 	strd	r0, r5, [r6]
 8000496:	4608      	mov	r0, r1
 8000498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049c:	fab3 f183 	clz	r1, r3
 80004a0:	2900      	cmp	r1, #0
 80004a2:	d149      	bne.n	8000538 <__udivmoddi4+0x158>
 80004a4:	42ab      	cmp	r3, r5
 80004a6:	d302      	bcc.n	80004ae <__udivmoddi4+0xce>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	f200 80f8 	bhi.w	800069e <__udivmoddi4+0x2be>
 80004ae:	1a84      	subs	r4, r0, r2
 80004b0:	eb65 0203 	sbc.w	r2, r5, r3
 80004b4:	2001      	movs	r0, #1
 80004b6:	4617      	mov	r7, r2
 80004b8:	2e00      	cmp	r6, #0
 80004ba:	d0e2      	beq.n	8000482 <__udivmoddi4+0xa2>
 80004bc:	e9c6 4700 	strd	r4, r7, [r6]
 80004c0:	e7df      	b.n	8000482 <__udivmoddi4+0xa2>
 80004c2:	b902      	cbnz	r2, 80004c6 <__udivmoddi4+0xe6>
 80004c4:	deff      	udf	#255	; 0xff
 80004c6:	fab2 f382 	clz	r3, r2
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	f040 8090 	bne.w	80005f0 <__udivmoddi4+0x210>
 80004d0:	1a8a      	subs	r2, r1, r2
 80004d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d6:	fa1f fe8c 	uxth.w	lr, ip
 80004da:	2101      	movs	r1, #1
 80004dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004e0:	fb07 2015 	mls	r0, r7, r5, r2
 80004e4:	0c22      	lsrs	r2, r4, #16
 80004e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ea:	fb0e f005 	mul.w	r0, lr, r5
 80004ee:	4290      	cmp	r0, r2
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x124>
 80004f2:	eb1c 0202 	adds.w	r2, ip, r2
 80004f6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x122>
 80004fc:	4290      	cmp	r0, r2
 80004fe:	f200 80cb 	bhi.w	8000698 <__udivmoddi4+0x2b8>
 8000502:	4645      	mov	r5, r8
 8000504:	1a12      	subs	r2, r2, r0
 8000506:	b2a4      	uxth	r4, r4
 8000508:	fbb2 f0f7 	udiv	r0, r2, r7
 800050c:	fb07 2210 	mls	r2, r7, r0, r2
 8000510:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000514:	fb0e fe00 	mul.w	lr, lr, r0
 8000518:	45a6      	cmp	lr, r4
 800051a:	d908      	bls.n	800052e <__udivmoddi4+0x14e>
 800051c:	eb1c 0404 	adds.w	r4, ip, r4
 8000520:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000524:	d202      	bcs.n	800052c <__udivmoddi4+0x14c>
 8000526:	45a6      	cmp	lr, r4
 8000528:	f200 80bb 	bhi.w	80006a2 <__udivmoddi4+0x2c2>
 800052c:	4610      	mov	r0, r2
 800052e:	eba4 040e 	sub.w	r4, r4, lr
 8000532:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000536:	e79f      	b.n	8000478 <__udivmoddi4+0x98>
 8000538:	f1c1 0720 	rsb	r7, r1, #32
 800053c:	408b      	lsls	r3, r1
 800053e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000542:	ea4c 0c03 	orr.w	ip, ip, r3
 8000546:	fa05 f401 	lsl.w	r4, r5, r1
 800054a:	fa20 f307 	lsr.w	r3, r0, r7
 800054e:	40fd      	lsrs	r5, r7
 8000550:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000554:	4323      	orrs	r3, r4
 8000556:	fbb5 f8f9 	udiv	r8, r5, r9
 800055a:	fa1f fe8c 	uxth.w	lr, ip
 800055e:	fb09 5518 	mls	r5, r9, r8, r5
 8000562:	0c1c      	lsrs	r4, r3, #16
 8000564:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000568:	fb08 f50e 	mul.w	r5, r8, lr
 800056c:	42a5      	cmp	r5, r4
 800056e:	fa02 f201 	lsl.w	r2, r2, r1
 8000572:	fa00 f001 	lsl.w	r0, r0, r1
 8000576:	d90b      	bls.n	8000590 <__udivmoddi4+0x1b0>
 8000578:	eb1c 0404 	adds.w	r4, ip, r4
 800057c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000580:	f080 8088 	bcs.w	8000694 <__udivmoddi4+0x2b4>
 8000584:	42a5      	cmp	r5, r4
 8000586:	f240 8085 	bls.w	8000694 <__udivmoddi4+0x2b4>
 800058a:	f1a8 0802 	sub.w	r8, r8, #2
 800058e:	4464      	add	r4, ip
 8000590:	1b64      	subs	r4, r4, r5
 8000592:	b29d      	uxth	r5, r3
 8000594:	fbb4 f3f9 	udiv	r3, r4, r9
 8000598:	fb09 4413 	mls	r4, r9, r3, r4
 800059c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80005a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80005a4:	45a6      	cmp	lr, r4
 80005a6:	d908      	bls.n	80005ba <__udivmoddi4+0x1da>
 80005a8:	eb1c 0404 	adds.w	r4, ip, r4
 80005ac:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80005b0:	d26c      	bcs.n	800068c <__udivmoddi4+0x2ac>
 80005b2:	45a6      	cmp	lr, r4
 80005b4:	d96a      	bls.n	800068c <__udivmoddi4+0x2ac>
 80005b6:	3b02      	subs	r3, #2
 80005b8:	4464      	add	r4, ip
 80005ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005be:	fba3 9502 	umull	r9, r5, r3, r2
 80005c2:	eba4 040e 	sub.w	r4, r4, lr
 80005c6:	42ac      	cmp	r4, r5
 80005c8:	46c8      	mov	r8, r9
 80005ca:	46ae      	mov	lr, r5
 80005cc:	d356      	bcc.n	800067c <__udivmoddi4+0x29c>
 80005ce:	d053      	beq.n	8000678 <__udivmoddi4+0x298>
 80005d0:	b156      	cbz	r6, 80005e8 <__udivmoddi4+0x208>
 80005d2:	ebb0 0208 	subs.w	r2, r0, r8
 80005d6:	eb64 040e 	sbc.w	r4, r4, lr
 80005da:	fa04 f707 	lsl.w	r7, r4, r7
 80005de:	40ca      	lsrs	r2, r1
 80005e0:	40cc      	lsrs	r4, r1
 80005e2:	4317      	orrs	r7, r2
 80005e4:	e9c6 7400 	strd	r7, r4, [r6]
 80005e8:	4618      	mov	r0, r3
 80005ea:	2100      	movs	r1, #0
 80005ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005f0:	f1c3 0120 	rsb	r1, r3, #32
 80005f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005f8:	fa20 f201 	lsr.w	r2, r0, r1
 80005fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000600:	409d      	lsls	r5, r3
 8000602:	432a      	orrs	r2, r5
 8000604:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000608:	fa1f fe8c 	uxth.w	lr, ip
 800060c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000610:	fb07 1510 	mls	r5, r7, r0, r1
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800061a:	fb00 f50e 	mul.w	r5, r0, lr
 800061e:	428d      	cmp	r5, r1
 8000620:	fa04 f403 	lsl.w	r4, r4, r3
 8000624:	d908      	bls.n	8000638 <__udivmoddi4+0x258>
 8000626:	eb1c 0101 	adds.w	r1, ip, r1
 800062a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800062e:	d22f      	bcs.n	8000690 <__udivmoddi4+0x2b0>
 8000630:	428d      	cmp	r5, r1
 8000632:	d92d      	bls.n	8000690 <__udivmoddi4+0x2b0>
 8000634:	3802      	subs	r0, #2
 8000636:	4461      	add	r1, ip
 8000638:	1b49      	subs	r1, r1, r5
 800063a:	b292      	uxth	r2, r2
 800063c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000640:	fb07 1115 	mls	r1, r7, r5, r1
 8000644:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000648:	fb05 f10e 	mul.w	r1, r5, lr
 800064c:	4291      	cmp	r1, r2
 800064e:	d908      	bls.n	8000662 <__udivmoddi4+0x282>
 8000650:	eb1c 0202 	adds.w	r2, ip, r2
 8000654:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000658:	d216      	bcs.n	8000688 <__udivmoddi4+0x2a8>
 800065a:	4291      	cmp	r1, r2
 800065c:	d914      	bls.n	8000688 <__udivmoddi4+0x2a8>
 800065e:	3d02      	subs	r5, #2
 8000660:	4462      	add	r2, ip
 8000662:	1a52      	subs	r2, r2, r1
 8000664:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000668:	e738      	b.n	80004dc <__udivmoddi4+0xfc>
 800066a:	4631      	mov	r1, r6
 800066c:	4630      	mov	r0, r6
 800066e:	e708      	b.n	8000482 <__udivmoddi4+0xa2>
 8000670:	4639      	mov	r1, r7
 8000672:	e6e6      	b.n	8000442 <__udivmoddi4+0x62>
 8000674:	4610      	mov	r0, r2
 8000676:	e6fb      	b.n	8000470 <__udivmoddi4+0x90>
 8000678:	4548      	cmp	r0, r9
 800067a:	d2a9      	bcs.n	80005d0 <__udivmoddi4+0x1f0>
 800067c:	ebb9 0802 	subs.w	r8, r9, r2
 8000680:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000684:	3b01      	subs	r3, #1
 8000686:	e7a3      	b.n	80005d0 <__udivmoddi4+0x1f0>
 8000688:	4645      	mov	r5, r8
 800068a:	e7ea      	b.n	8000662 <__udivmoddi4+0x282>
 800068c:	462b      	mov	r3, r5
 800068e:	e794      	b.n	80005ba <__udivmoddi4+0x1da>
 8000690:	4640      	mov	r0, r8
 8000692:	e7d1      	b.n	8000638 <__udivmoddi4+0x258>
 8000694:	46d0      	mov	r8, sl
 8000696:	e77b      	b.n	8000590 <__udivmoddi4+0x1b0>
 8000698:	3d02      	subs	r5, #2
 800069a:	4462      	add	r2, ip
 800069c:	e732      	b.n	8000504 <__udivmoddi4+0x124>
 800069e:	4608      	mov	r0, r1
 80006a0:	e70a      	b.n	80004b8 <__udivmoddi4+0xd8>
 80006a2:	4464      	add	r4, ip
 80006a4:	3802      	subs	r0, #2
 80006a6:	e742      	b.n	800052e <__udivmoddi4+0x14e>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <_ZN10PinControlC1Ev>:
// ==================================================
// ==================================================
// PinControl
// ==================================================

PinControl::PinControl() {
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]

}
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	4618      	mov	r0, r3
 80006b8:	370c      	adds	r7, #12
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr

080006c2 <_ZN10PinMeasureC1Ev>:

// ==================================================
// PinMeasure
// ==================================================

PinMeasure::PinMeasure() {
 80006c2:	b480      	push	{r7}
 80006c4:	b083      	sub	sp, #12
 80006c6:	af00      	add	r7, sp, #0
 80006c8:	6078      	str	r0, [r7, #4]

}
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	4618      	mov	r0, r3
 80006ce:	370c      	adds	r7, #12
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr

080006d8 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b08a      	sub	sp, #40	; 0x28
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80006e0:	2300      	movs	r3, #0
 80006e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80006e4:	f008 fa48 	bl	8008b78 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80006e8:	4b5b      	ldr	r3, [pc, #364]	; (8000858 <pvPortMallocMicroROS+0x180>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d101      	bne.n	80006f4 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 80006f0:	f000 f98a 	bl	8000a08 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80006f4:	4b59      	ldr	r3, [pc, #356]	; (800085c <pvPortMallocMicroROS+0x184>)
 80006f6:	681a      	ldr	r2, [r3, #0]
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	4013      	ands	r3, r2
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	f040 8092 	bne.w	8000826 <pvPortMallocMicroROS+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d01f      	beq.n	8000748 <pvPortMallocMicroROS+0x70>
			{
				xWantedSize += xHeapStructSize;
 8000708:	2208      	movs	r2, #8
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	4413      	add	r3, r2
 800070e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	f003 0307 	and.w	r3, r3, #7
 8000716:	2b00      	cmp	r3, #0
 8000718:	d016      	beq.n	8000748 <pvPortMallocMicroROS+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	f023 0307 	bic.w	r3, r3, #7
 8000720:	3308      	adds	r3, #8
 8000722:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	f003 0307 	and.w	r3, r3, #7
 800072a:	2b00      	cmp	r3, #0
 800072c:	d00c      	beq.n	8000748 <pvPortMallocMicroROS+0x70>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800072e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000732:	b672      	cpsid	i
 8000734:	f383 8811 	msr	BASEPRI, r3
 8000738:	f3bf 8f6f 	isb	sy
 800073c:	f3bf 8f4f 	dsb	sy
 8000740:	b662      	cpsie	i
 8000742:	617b      	str	r3, [r7, #20]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000744:	bf00      	nop
 8000746:	e7fe      	b.n	8000746 <pvPortMallocMicroROS+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	2b00      	cmp	r3, #0
 800074c:	d06b      	beq.n	8000826 <pvPortMallocMicroROS+0x14e>
 800074e:	4b44      	ldr	r3, [pc, #272]	; (8000860 <pvPortMallocMicroROS+0x188>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	687a      	ldr	r2, [r7, #4]
 8000754:	429a      	cmp	r2, r3
 8000756:	d866      	bhi.n	8000826 <pvPortMallocMicroROS+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000758:	4b42      	ldr	r3, [pc, #264]	; (8000864 <pvPortMallocMicroROS+0x18c>)
 800075a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800075c:	4b41      	ldr	r3, [pc, #260]	; (8000864 <pvPortMallocMicroROS+0x18c>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000762:	e004      	b.n	800076e <pvPortMallocMicroROS+0x96>
				{
					pxPreviousBlock = pxBlock;
 8000764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000766:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8000768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800076e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000770:	685b      	ldr	r3, [r3, #4]
 8000772:	687a      	ldr	r2, [r7, #4]
 8000774:	429a      	cmp	r2, r3
 8000776:	d903      	bls.n	8000780 <pvPortMallocMicroROS+0xa8>
 8000778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d1f1      	bne.n	8000764 <pvPortMallocMicroROS+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000780:	4b35      	ldr	r3, [pc, #212]	; (8000858 <pvPortMallocMicroROS+0x180>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000786:	429a      	cmp	r2, r3
 8000788:	d04d      	beq.n	8000826 <pvPortMallocMicroROS+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800078a:	6a3b      	ldr	r3, [r7, #32]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	2208      	movs	r2, #8
 8000790:	4413      	add	r3, r2
 8000792:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000796:	681a      	ldr	r2, [r3, #0]
 8000798:	6a3b      	ldr	r3, [r7, #32]
 800079a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800079c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800079e:	685a      	ldr	r2, [r3, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	1ad2      	subs	r2, r2, r3
 80007a4:	2308      	movs	r3, #8
 80007a6:	005b      	lsls	r3, r3, #1
 80007a8:	429a      	cmp	r2, r3
 80007aa:	d921      	bls.n	80007f0 <pvPortMallocMicroROS+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80007ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	4413      	add	r3, r2
 80007b2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80007b4:	69bb      	ldr	r3, [r7, #24]
 80007b6:	f003 0307 	and.w	r3, r3, #7
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d00c      	beq.n	80007d8 <pvPortMallocMicroROS+0x100>
	__asm volatile
 80007be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007c2:	b672      	cpsid	i
 80007c4:	f383 8811 	msr	BASEPRI, r3
 80007c8:	f3bf 8f6f 	isb	sy
 80007cc:	f3bf 8f4f 	dsb	sy
 80007d0:	b662      	cpsie	i
 80007d2:	613b      	str	r3, [r7, #16]
}
 80007d4:	bf00      	nop
 80007d6:	e7fe      	b.n	80007d6 <pvPortMallocMicroROS+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80007d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007da:	685a      	ldr	r2, [r3, #4]
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	1ad2      	subs	r2, r2, r3
 80007e0:	69bb      	ldr	r3, [r7, #24]
 80007e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80007e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007e6:	687a      	ldr	r2, [r7, #4]
 80007e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80007ea:	69b8      	ldr	r0, [r7, #24]
 80007ec:	f000 f96e 	bl	8000acc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80007f0:	4b1b      	ldr	r3, [pc, #108]	; (8000860 <pvPortMallocMicroROS+0x188>)
 80007f2:	681a      	ldr	r2, [r3, #0]
 80007f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007f6:	685b      	ldr	r3, [r3, #4]
 80007f8:	1ad3      	subs	r3, r2, r3
 80007fa:	4a19      	ldr	r2, [pc, #100]	; (8000860 <pvPortMallocMicroROS+0x188>)
 80007fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80007fe:	4b18      	ldr	r3, [pc, #96]	; (8000860 <pvPortMallocMicroROS+0x188>)
 8000800:	681a      	ldr	r2, [r3, #0]
 8000802:	4b19      	ldr	r3, [pc, #100]	; (8000868 <pvPortMallocMicroROS+0x190>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	429a      	cmp	r2, r3
 8000808:	d203      	bcs.n	8000812 <pvPortMallocMicroROS+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800080a:	4b15      	ldr	r3, [pc, #84]	; (8000860 <pvPortMallocMicroROS+0x188>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	4a16      	ldr	r2, [pc, #88]	; (8000868 <pvPortMallocMicroROS+0x190>)
 8000810:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000814:	685a      	ldr	r2, [r3, #4]
 8000816:	4b11      	ldr	r3, [pc, #68]	; (800085c <pvPortMallocMicroROS+0x184>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	431a      	orrs	r2, r3
 800081c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800081e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000826:	f008 f9b5 	bl	8008b94 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800082a:	69fb      	ldr	r3, [r7, #28]
 800082c:	f003 0307 	and.w	r3, r3, #7
 8000830:	2b00      	cmp	r3, #0
 8000832:	d00c      	beq.n	800084e <pvPortMallocMicroROS+0x176>
	__asm volatile
 8000834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000838:	b672      	cpsid	i
 800083a:	f383 8811 	msr	BASEPRI, r3
 800083e:	f3bf 8f6f 	isb	sy
 8000842:	f3bf 8f4f 	dsb	sy
 8000846:	b662      	cpsie	i
 8000848:	60fb      	str	r3, [r7, #12]
}
 800084a:	bf00      	nop
 800084c:	e7fe      	b.n	800084c <pvPortMallocMicroROS+0x174>
	return pvReturn;
 800084e:	69fb      	ldr	r3, [r7, #28]
}
 8000850:	4618      	mov	r0, r3
 8000852:	3728      	adds	r7, #40	; 0x28
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	20005d64 	.word	0x20005d64
 800085c:	20005d70 	.word	0x20005d70
 8000860:	20005d68 	.word	0x20005d68
 8000864:	20005d5c 	.word	0x20005d5c
 8000868:	20005d6c 	.word	0x20005d6c

0800086c <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b086      	sub	sp, #24
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d04c      	beq.n	8000918 <vPortFreeMicroROS+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800087e:	2308      	movs	r3, #8
 8000880:	425b      	negs	r3, r3
 8000882:	697a      	ldr	r2, [r7, #20]
 8000884:	4413      	add	r3, r2
 8000886:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800088c:	693b      	ldr	r3, [r7, #16]
 800088e:	685a      	ldr	r2, [r3, #4]
 8000890:	4b23      	ldr	r3, [pc, #140]	; (8000920 <vPortFreeMicroROS+0xb4>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4013      	ands	r3, r2
 8000896:	2b00      	cmp	r3, #0
 8000898:	d10c      	bne.n	80008b4 <vPortFreeMicroROS+0x48>
	__asm volatile
 800089a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800089e:	b672      	cpsid	i
 80008a0:	f383 8811 	msr	BASEPRI, r3
 80008a4:	f3bf 8f6f 	isb	sy
 80008a8:	f3bf 8f4f 	dsb	sy
 80008ac:	b662      	cpsie	i
 80008ae:	60fb      	str	r3, [r7, #12]
}
 80008b0:	bf00      	nop
 80008b2:	e7fe      	b.n	80008b2 <vPortFreeMicroROS+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80008b4:	693b      	ldr	r3, [r7, #16]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d00c      	beq.n	80008d6 <vPortFreeMicroROS+0x6a>
	__asm volatile
 80008bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008c0:	b672      	cpsid	i
 80008c2:	f383 8811 	msr	BASEPRI, r3
 80008c6:	f3bf 8f6f 	isb	sy
 80008ca:	f3bf 8f4f 	dsb	sy
 80008ce:	b662      	cpsie	i
 80008d0:	60bb      	str	r3, [r7, #8]
}
 80008d2:	bf00      	nop
 80008d4:	e7fe      	b.n	80008d4 <vPortFreeMicroROS+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80008d6:	693b      	ldr	r3, [r7, #16]
 80008d8:	685a      	ldr	r2, [r3, #4]
 80008da:	4b11      	ldr	r3, [pc, #68]	; (8000920 <vPortFreeMicroROS+0xb4>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4013      	ands	r3, r2
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d019      	beq.n	8000918 <vPortFreeMicroROS+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80008e4:	693b      	ldr	r3, [r7, #16]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d115      	bne.n	8000918 <vPortFreeMicroROS+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80008ec:	693b      	ldr	r3, [r7, #16]
 80008ee:	685a      	ldr	r2, [r3, #4]
 80008f0:	4b0b      	ldr	r3, [pc, #44]	; (8000920 <vPortFreeMicroROS+0xb4>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	43db      	mvns	r3, r3
 80008f6:	401a      	ands	r2, r3
 80008f8:	693b      	ldr	r3, [r7, #16]
 80008fa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80008fc:	f008 f93c 	bl	8008b78 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000900:	693b      	ldr	r3, [r7, #16]
 8000902:	685a      	ldr	r2, [r3, #4]
 8000904:	4b07      	ldr	r3, [pc, #28]	; (8000924 <vPortFreeMicroROS+0xb8>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4413      	add	r3, r2
 800090a:	4a06      	ldr	r2, [pc, #24]	; (8000924 <vPortFreeMicroROS+0xb8>)
 800090c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800090e:	6938      	ldr	r0, [r7, #16]
 8000910:	f000 f8dc 	bl	8000acc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000914:	f008 f93e 	bl	8008b94 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000918:	bf00      	nop
 800091a:	3718      	adds	r7, #24
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	20005d70 	.word	0x20005d70
 8000924:	20005d68 	.word	0x20005d68

08000928 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8000928:	b480      	push	{r7}
 800092a:	b087      	sub	sp, #28
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000934:	2308      	movs	r3, #8
 8000936:	425b      	negs	r3, r3
 8000938:	697a      	ldr	r2, [r7, #20]
 800093a:	4413      	add	r3, r2
 800093c:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 800093e:	697b      	ldr	r3, [r7, #20]
 8000940:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8000942:	693b      	ldr	r3, [r7, #16]
 8000944:	685a      	ldr	r2, [r3, #4]
 8000946:	4b06      	ldr	r3, [pc, #24]	; (8000960 <getBlockSize+0x38>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	43db      	mvns	r3, r3
 800094c:	4013      	ands	r3, r2
 800094e:	60fb      	str	r3, [r7, #12]

	return count;
 8000950:	68fb      	ldr	r3, [r7, #12]
}
 8000952:	4618      	mov	r0, r3
 8000954:	371c      	adds	r7, #28
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	20005d70 	.word	0x20005d70

08000964 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
 800096c:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 800096e:	f008 f903 	bl	8008b78 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8000972:	6838      	ldr	r0, [r7, #0]
 8000974:	f7ff feb0 	bl	80006d8 <pvPortMallocMicroROS>
 8000978:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 800097a:	68bb      	ldr	r3, [r7, #8]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d017      	beq.n	80009b0 <pvPortReallocMicroROS+0x4c>
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d014      	beq.n	80009b0 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8000986:	6878      	ldr	r0, [r7, #4]
 8000988:	f7ff ffce 	bl	8000928 <getBlockSize>
 800098c:	4603      	mov	r3, r0
 800098e:	2208      	movs	r2, #8
 8000990:	1a9b      	subs	r3, r3, r2
 8000992:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8000994:	683a      	ldr	r2, [r7, #0]
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	429a      	cmp	r2, r3
 800099a:	d201      	bcs.n	80009a0 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 80009a0:	68fa      	ldr	r2, [r7, #12]
 80009a2:	6879      	ldr	r1, [r7, #4]
 80009a4:	68b8      	ldr	r0, [r7, #8]
 80009a6:	f018 ffa2 	bl	80198ee <memcpy>

		vPortFreeMicroROS(pv);
 80009aa:	6878      	ldr	r0, [r7, #4]
 80009ac:	f7ff ff5e 	bl	800086c <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 80009b0:	f008 f8f0 	bl	8008b94 <xTaskResumeAll>

	return newmem;
 80009b4:	68bb      	ldr	r3, [r7, #8]
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	3710      	adds	r7, #16
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}

080009be <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 80009be:	b580      	push	{r7, lr}
 80009c0:	b086      	sub	sp, #24
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	6078      	str	r0, [r7, #4]
 80009c6:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80009c8:	f008 f8d6 	bl	8008b78 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	687a      	ldr	r2, [r7, #4]
 80009d0:	fb02 f303 	mul.w	r3, r2, r3
 80009d4:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 80009d6:	6978      	ldr	r0, [r7, #20]
 80009d8:	f7ff fe7e 	bl	80006d8 <pvPortMallocMicroROS>
 80009dc:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	613b      	str	r3, [r7, #16]

  	while(count--)
 80009e2:	e004      	b.n	80009ee <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 80009e4:	693b      	ldr	r3, [r7, #16]
 80009e6:	1c5a      	adds	r2, r3, #1
 80009e8:	613a      	str	r2, [r7, #16]
 80009ea:	2200      	movs	r2, #0
 80009ec:	701a      	strb	r2, [r3, #0]
  	while(count--)
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	1e5a      	subs	r2, r3, #1
 80009f2:	617a      	str	r2, [r7, #20]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d1f5      	bne.n	80009e4 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 80009f8:	f008 f8cc 	bl	8008b94 <xTaskResumeAll>
  	return mem;
 80009fc:	68fb      	ldr	r3, [r7, #12]
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3718      	adds	r7, #24
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
	...

08000a08 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b085      	sub	sp, #20
 8000a0c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000a0e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8000a12:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000a14:	4b27      	ldr	r3, [pc, #156]	; (8000ab4 <prvHeapInit+0xac>)
 8000a16:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	f003 0307 	and.w	r3, r3, #7
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d00c      	beq.n	8000a3c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	3307      	adds	r3, #7
 8000a26:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	f023 0307 	bic.w	r3, r3, #7
 8000a2e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000a30:	68ba      	ldr	r2, [r7, #8]
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	1ad3      	subs	r3, r2, r3
 8000a36:	4a1f      	ldr	r2, [pc, #124]	; (8000ab4 <prvHeapInit+0xac>)
 8000a38:	4413      	add	r3, r2
 8000a3a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000a40:	4a1d      	ldr	r2, [pc, #116]	; (8000ab8 <prvHeapInit+0xb0>)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000a46:	4b1c      	ldr	r3, [pc, #112]	; (8000ab8 <prvHeapInit+0xb0>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	68ba      	ldr	r2, [r7, #8]
 8000a50:	4413      	add	r3, r2
 8000a52:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8000a54:	2208      	movs	r2, #8
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	1a9b      	subs	r3, r3, r2
 8000a5a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	f023 0307 	bic.w	r3, r3, #7
 8000a62:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	4a15      	ldr	r2, [pc, #84]	; (8000abc <prvHeapInit+0xb4>)
 8000a68:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000a6a:	4b14      	ldr	r3, [pc, #80]	; (8000abc <prvHeapInit+0xb4>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	2200      	movs	r2, #0
 8000a70:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000a72:	4b12      	ldr	r3, [pc, #72]	; (8000abc <prvHeapInit+0xb4>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	68fa      	ldr	r2, [r7, #12]
 8000a82:	1ad2      	subs	r2, r2, r3
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000a88:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <prvHeapInit+0xb4>)
 8000a8a:	681a      	ldr	r2, [r3, #0]
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	4a0a      	ldr	r2, [pc, #40]	; (8000ac0 <prvHeapInit+0xb8>)
 8000a96:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	685b      	ldr	r3, [r3, #4]
 8000a9c:	4a09      	ldr	r2, [pc, #36]	; (8000ac4 <prvHeapInit+0xbc>)
 8000a9e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000aa0:	4b09      	ldr	r3, [pc, #36]	; (8000ac8 <prvHeapInit+0xc0>)
 8000aa2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000aa6:	601a      	str	r2, [r3, #0]
}
 8000aa8:	bf00      	nop
 8000aaa:	3714      	adds	r7, #20
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr
 8000ab4:	2000215c 	.word	0x2000215c
 8000ab8:	20005d5c 	.word	0x20005d5c
 8000abc:	20005d64 	.word	0x20005d64
 8000ac0:	20005d6c 	.word	0x20005d6c
 8000ac4:	20005d68 	.word	0x20005d68
 8000ac8:	20005d70 	.word	0x20005d70

08000acc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000acc:	b480      	push	{r7}
 8000ace:	b085      	sub	sp, #20
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000ad4:	4b28      	ldr	r3, [pc, #160]	; (8000b78 <prvInsertBlockIntoFreeList+0xac>)
 8000ad6:	60fb      	str	r3, [r7, #12]
 8000ad8:	e002      	b.n	8000ae0 <prvInsertBlockIntoFreeList+0x14>
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	687a      	ldr	r2, [r7, #4]
 8000ae6:	429a      	cmp	r2, r3
 8000ae8:	d8f7      	bhi.n	8000ada <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	68ba      	ldr	r2, [r7, #8]
 8000af4:	4413      	add	r3, r2
 8000af6:	687a      	ldr	r2, [r7, #4]
 8000af8:	429a      	cmp	r2, r3
 8000afa:	d108      	bne.n	8000b0e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	685a      	ldr	r2, [r3, #4]
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	441a      	add	r2, r3
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	68ba      	ldr	r2, [r7, #8]
 8000b18:	441a      	add	r2, r3
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	429a      	cmp	r2, r3
 8000b20:	d118      	bne.n	8000b54 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	681a      	ldr	r2, [r3, #0]
 8000b26:	4b15      	ldr	r3, [pc, #84]	; (8000b7c <prvInsertBlockIntoFreeList+0xb0>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	429a      	cmp	r2, r3
 8000b2c:	d00d      	beq.n	8000b4a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	685a      	ldr	r2, [r3, #4]
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	441a      	add	r2, r3
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	681a      	ldr	r2, [r3, #0]
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	e008      	b.n	8000b5c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000b4a:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <prvInsertBlockIntoFreeList+0xb0>)
 8000b4c:	681a      	ldr	r2, [r3, #0]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	601a      	str	r2, [r3, #0]
 8000b52:	e003      	b.n	8000b5c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000b5c:	68fa      	ldr	r2, [r7, #12]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	d002      	beq.n	8000b6a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	687a      	ldr	r2, [r7, #4]
 8000b68:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000b6a:	bf00      	nop
 8000b6c:	3714      	adds	r7, #20
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	20005d5c 	.word	0x20005d5c
 8000b7c:	20005d64 	.word	0x20005d64

08000b80 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8000b8e:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8000b90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b94:	4904      	ldr	r1, [pc, #16]	; (8000ba8 <cubemx_transport_open+0x28>)
 8000b96:	68f8      	ldr	r0, [r7, #12]
 8000b98:	f005 f882 	bl	8005ca0 <HAL_UART_Receive_DMA>
    return true;
 8000b9c:	2301      	movs	r3, #1
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3710      	adds	r7, #16
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	20005d74 	.word	0x20005d74

08000bac <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8000bba:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8000bbc:	68f8      	ldr	r0, [r7, #12]
 8000bbe:	f005 f8b3 	bl	8005d28 <HAL_UART_DMAStop>
    return true;
 8000bc2:	2301      	movs	r3, #1
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3710      	adds	r7, #16
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, const uint8_t * buf, size_t len, uint8_t * err){
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b086      	sub	sp, #24
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	60f8      	str	r0, [r7, #12]
 8000bd4:	60b9      	str	r1, [r7, #8]
 8000bd6:	607a      	str	r2, [r7, #4]
 8000bd8:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8000be0:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000be6:	2b20      	cmp	r3, #32
 8000be8:	d11a      	bne.n	8000c20 <cubemx_transport_write+0x54>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	b29b      	uxth	r3, r3
 8000bee:	461a      	mov	r2, r3
 8000bf0:	68b9      	ldr	r1, [r7, #8]
 8000bf2:	6978      	ldr	r0, [r7, #20]
 8000bf4:	f004 ffd8 	bl	8005ba8 <HAL_UART_Transmit_DMA>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000bfc:	e002      	b.n	8000c04 <cubemx_transport_write+0x38>
            osDelay(1);
 8000bfe:	2001      	movs	r0, #1
 8000c00:	f006 ff30 	bl	8007a64 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000c04:	7cfb      	ldrb	r3, [r7, #19]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d103      	bne.n	8000c12 <cubemx_transport_write+0x46>
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000c0e:	2b20      	cmp	r3, #32
 8000c10:	d1f5      	bne.n	8000bfe <cubemx_transport_write+0x32>
        }

        return (ret == HAL_OK) ? len : 0;
 8000c12:	7cfb      	ldrb	r3, [r7, #19]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d101      	bne.n	8000c1c <cubemx_transport_write+0x50>
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	e002      	b.n	8000c22 <cubemx_transport_write+0x56>
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	e000      	b.n	8000c22 <cubemx_transport_write+0x56>
    }else{
        return 0;
 8000c20:	2300      	movs	r3, #0
    }
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3718      	adds	r7, #24
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
	...

08000c2c <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b088      	sub	sp, #32
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	60f8      	str	r0, [r7, #12]
 8000c34:	60b9      	str	r1, [r7, #8]
 8000c36:	607a      	str	r2, [r7, #4]
 8000c38:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8000c40:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8000c42:	2300      	movs	r3, #0
 8000c44:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c46:	b672      	cpsid	i
}
 8000c48:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8000c56:	4a1c      	ldr	r2, [pc, #112]	; (8000cc8 <cubemx_transport_read+0x9c>)
 8000c58:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000c5a:	b662      	cpsie	i
}
 8000c5c:	bf00      	nop
        __enable_irq();
        ms_used++;
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	3301      	adds	r3, #1
 8000c62:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8000c64:	2001      	movs	r0, #1
 8000c66:	f006 fefd 	bl	8007a64 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8000c6a:	4b18      	ldr	r3, [pc, #96]	; (8000ccc <cubemx_transport_read+0xa0>)
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	4b16      	ldr	r3, [pc, #88]	; (8000cc8 <cubemx_transport_read+0x9c>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	429a      	cmp	r2, r3
 8000c74:	d103      	bne.n	8000c7e <cubemx_transport_read+0x52>
 8000c76:	69fa      	ldr	r2, [r7, #28]
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	429a      	cmp	r2, r3
 8000c7c:	dbe3      	blt.n	8000c46 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8000c82:	e011      	b.n	8000ca8 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8000c84:	4b11      	ldr	r3, [pc, #68]	; (8000ccc <cubemx_transport_read+0xa0>)
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	68b9      	ldr	r1, [r7, #8]
 8000c8a:	69bb      	ldr	r3, [r7, #24]
 8000c8c:	440b      	add	r3, r1
 8000c8e:	4910      	ldr	r1, [pc, #64]	; (8000cd0 <cubemx_transport_read+0xa4>)
 8000c90:	5c8a      	ldrb	r2, [r1, r2]
 8000c92:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8000c94:	4b0d      	ldr	r3, [pc, #52]	; (8000ccc <cubemx_transport_read+0xa0>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	3301      	adds	r3, #1
 8000c9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000c9e:	4a0b      	ldr	r2, [pc, #44]	; (8000ccc <cubemx_transport_read+0xa0>)
 8000ca0:	6013      	str	r3, [r2, #0]
        wrote++;
 8000ca2:	69bb      	ldr	r3, [r7, #24]
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8000ca8:	4b08      	ldr	r3, [pc, #32]	; (8000ccc <cubemx_transport_read+0xa0>)
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <cubemx_transport_read+0x9c>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	d003      	beq.n	8000cbc <cubemx_transport_read+0x90>
 8000cb4:	69ba      	ldr	r2, [r7, #24]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	d3e3      	bcc.n	8000c84 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8000cbc:	69bb      	ldr	r3, [r7, #24]
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3720      	adds	r7, #32
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	20006578 	.word	0x20006578
 8000ccc:	20006574 	.word	0x20006574
 8000cd0:	20005d74 	.word	0x20005d74

08000cd4 <control_callback>:

int _gettimeofday(struct timeval *tv, void *tzvp) {					//WORKAROUND
	return 0;
}

void control_callback(const void* request_msg, void* response_msg){
 8000cd4:	b480      	push	{r7}
 8000cd6:	b085      	sub	sp, #20
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	6039      	str	r1, [r7, #0]
		racs_services__srv__Control_Request* req_in =
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	60fb      	str	r3, [r7, #12]
				(racs_services__srv__Control_Request*) request_msg;
		racs_services__srv__Control_Response* res_in =
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	60bb      	str	r3, [r7, #8]
				(racs_services__srv__Control_Response*) response_msg;
		//logica
	}
 8000ce6:	bf00      	nop
 8000ce8:	3714      	adds	r7, #20
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr

08000cf2 <setup_callback>:

void setup_callback(const void* request_msg, void* response_msg){
 8000cf2:	b480      	push	{r7}
 8000cf4:	b085      	sub	sp, #20
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	6078      	str	r0, [r7, #4]
 8000cfa:	6039      	str	r1, [r7, #0]
		racs_services__srv__Setup_Request* req_in =
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	60fb      	str	r3, [r7, #12]
				(racs_services__srv__Setup_Request*) request_msg;
		racs_services__srv__Setup_Response* res_in =
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	60bb      	str	r3, [r7, #8]
				(racs_services__srv__Setup_Response*) response_msg;
		res_in->response = 18;
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	2212      	movs	r2, #18
 8000d08:	701a      	strb	r2, [r3, #0]
	}
 8000d0a:	bf00      	nop
 8000d0c:	3714      	adds	r7, #20
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
	...

08000d18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d1c:	f001 fcb5 	bl	800268a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d20:	f000 f82a 	bl	8000d78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d24:	f000 fbd2 	bl	80014cc <MX_GPIO_Init>
  MX_DMA_Init();
 8000d28:	f000 fbaa 	bl	8001480 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000d2c:	f000 fb4a 	bl	80013c4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000d30:	f000 fb78 	bl	8001424 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM1_Init();
 8000d34:	f000 f892 	bl	8000e5c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000d38:	f000 f944 	bl	8000fc4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000d3c:	f000 f996 	bl	800106c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000d40:	f000 f9ea 	bl	8001118 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000d44:	f000 fa3e 	bl	80011c4 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000d48:	f000 fa92 	bl	8001270 <MX_TIM8_Init>
  MX_TIM9_Init();
 8000d4c:	f000 faea 	bl	8001324 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000d50:	f006 fd78 	bl	8007844 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000d54:	4a05      	ldr	r2, [pc, #20]	; (8000d6c <main+0x54>)
 8000d56:	2100      	movs	r1, #0
 8000d58:	4805      	ldr	r0, [pc, #20]	; (8000d70 <main+0x58>)
 8000d5a:	f006 fddd 	bl	8007918 <osThreadNew>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	4a04      	ldr	r2, [pc, #16]	; (8000d74 <main+0x5c>)
 8000d62:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000d64:	f006 fda2 	bl	80078ac <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d68:	e7fe      	b.n	8000d68 <main+0x50>
 8000d6a:	bf00      	nop
 8000d6c:	0801a694 	.word	0x0801a694
 8000d70:	080016b1 	.word	0x080016b1
 8000d74:	20006de0 	.word	0x20006de0

08000d78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b094      	sub	sp, #80	; 0x50
 8000d7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d7e:	f107 031c 	add.w	r3, r7, #28
 8000d82:	2234      	movs	r2, #52	; 0x34
 8000d84:	2100      	movs	r1, #0
 8000d86:	4618      	mov	r0, r3
 8000d88:	f018 fc3c 	bl	8019604 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d8c:	f107 0308 	add.w	r3, r7, #8
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	60da      	str	r2, [r3, #12]
 8000d9a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000d9c:	f002 fccc 	bl	8003738 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000da0:	4b2c      	ldr	r3, [pc, #176]	; (8000e54 <SystemClock_Config+0xdc>)
 8000da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da4:	4a2b      	ldr	r2, [pc, #172]	; (8000e54 <SystemClock_Config+0xdc>)
 8000da6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000daa:	6413      	str	r3, [r2, #64]	; 0x40
 8000dac:	4b29      	ldr	r3, [pc, #164]	; (8000e54 <SystemClock_Config+0xdc>)
 8000dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000db4:	607b      	str	r3, [r7, #4]
 8000db6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000db8:	4b27      	ldr	r3, [pc, #156]	; (8000e58 <SystemClock_Config+0xe0>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000dc0:	4a25      	ldr	r2, [pc, #148]	; (8000e58 <SystemClock_Config+0xe0>)
 8000dc2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dc6:	6013      	str	r3, [r2, #0]
 8000dc8:	4b23      	ldr	r3, [pc, #140]	; (8000e58 <SystemClock_Config+0xe0>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000dd0:	603b      	str	r3, [r7, #0]
 8000dd2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000dd8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000ddc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dde:	2302      	movs	r3, #2
 8000de0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000de2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000de6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000de8:	2304      	movs	r3, #4
 8000dea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000dec:	2360      	movs	r3, #96	; 0x60
 8000dee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000df0:	2302      	movs	r3, #2
 8000df2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000df4:	2304      	movs	r3, #4
 8000df6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000df8:	2302      	movs	r3, #2
 8000dfa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dfc:	f107 031c 	add.w	r3, r7, #28
 8000e00:	4618      	mov	r0, r3
 8000e02:	f002 fcf9 	bl	80037f8 <HAL_RCC_OscConfig>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000e0c:	f000 fd68 	bl	80018e0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000e10:	f002 fca2 	bl	8003758 <HAL_PWREx_EnableOverDrive>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000e1a:	f000 fd61 	bl	80018e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e1e:	230f      	movs	r3, #15
 8000e20:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e22:	2302      	movs	r3, #2
 8000e24:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e26:	2300      	movs	r3, #0
 8000e28:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e2e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e30:	2300      	movs	r3, #0
 8000e32:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000e34:	f107 0308 	add.w	r3, r7, #8
 8000e38:	2103      	movs	r1, #3
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f002 ff8a 	bl	8003d54 <HAL_RCC_ClockConfig>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000e46:	f000 fd4b 	bl	80018e0 <Error_Handler>
  }
}
 8000e4a:	bf00      	nop
 8000e4c:	3750      	adds	r7, #80	; 0x50
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40023800 	.word	0x40023800
 8000e58:	40007000 	.word	0x40007000

08000e5c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b096      	sub	sp, #88	; 0x58
 8000e60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e62:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
 8000e6a:	605a      	str	r2, [r3, #4]
 8000e6c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e6e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	605a      	str	r2, [r3, #4]
 8000e78:	609a      	str	r2, [r3, #8]
 8000e7a:	60da      	str	r2, [r3, #12]
 8000e7c:	611a      	str	r2, [r3, #16]
 8000e7e:	615a      	str	r2, [r3, #20]
 8000e80:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e82:	1d3b      	adds	r3, r7, #4
 8000e84:	222c      	movs	r2, #44	; 0x2c
 8000e86:	2100      	movs	r1, #0
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f018 fbbb 	bl	8019604 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e8e:	4b4b      	ldr	r3, [pc, #300]	; (8000fbc <MX_TIM1_Init+0x160>)
 8000e90:	4a4b      	ldr	r2, [pc, #300]	; (8000fc0 <MX_TIM1_Init+0x164>)
 8000e92:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000e94:	4b49      	ldr	r3, [pc, #292]	; (8000fbc <MX_TIM1_Init+0x160>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e9a:	4b48      	ldr	r3, [pc, #288]	; (8000fbc <MX_TIM1_Init+0x160>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000ea0:	4b46      	ldr	r3, [pc, #280]	; (8000fbc <MX_TIM1_Init+0x160>)
 8000ea2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ea6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ea8:	4b44      	ldr	r3, [pc, #272]	; (8000fbc <MX_TIM1_Init+0x160>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000eae:	4b43      	ldr	r3, [pc, #268]	; (8000fbc <MX_TIM1_Init+0x160>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eb4:	4b41      	ldr	r3, [pc, #260]	; (8000fbc <MX_TIM1_Init+0x160>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000eba:	4840      	ldr	r0, [pc, #256]	; (8000fbc <MX_TIM1_Init+0x160>)
 8000ebc:	f003 fea4 	bl	8004c08 <HAL_TIM_PWM_Init>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000ec6:	f000 fd0b 	bl	80018e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ed6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000eda:	4619      	mov	r1, r3
 8000edc:	4837      	ldr	r0, [pc, #220]	; (8000fbc <MX_TIM1_Init+0x160>)
 8000ede:	f004 fceb 	bl	80058b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000ee8:	f000 fcfa 	bl	80018e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000eec:	2360      	movs	r3, #96	; 0x60
 8000eee:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000efc:	2300      	movs	r3, #0
 8000efe:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f00:	2300      	movs	r3, #0
 8000f02:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f04:	2300      	movs	r3, #0
 8000f06:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f08:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	4619      	mov	r1, r3
 8000f10:	482a      	ldr	r0, [pc, #168]	; (8000fbc <MX_TIM1_Init+0x160>)
 8000f12:	f004 f897 	bl	8005044 <HAL_TIM_PWM_ConfigChannel>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000f1c:	f000 fce0 	bl	80018e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f20:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f24:	2204      	movs	r2, #4
 8000f26:	4619      	mov	r1, r3
 8000f28:	4824      	ldr	r0, [pc, #144]	; (8000fbc <MX_TIM1_Init+0x160>)
 8000f2a:	f004 f88b 	bl	8005044 <HAL_TIM_PWM_ConfigChannel>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8000f34:	f000 fcd4 	bl	80018e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f38:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f3c:	2208      	movs	r2, #8
 8000f3e:	4619      	mov	r1, r3
 8000f40:	481e      	ldr	r0, [pc, #120]	; (8000fbc <MX_TIM1_Init+0x160>)
 8000f42:	f004 f87f 	bl	8005044 <HAL_TIM_PWM_ConfigChannel>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8000f4c:	f000 fcc8 	bl	80018e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f50:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f54:	220c      	movs	r2, #12
 8000f56:	4619      	mov	r1, r3
 8000f58:	4818      	ldr	r0, [pc, #96]	; (8000fbc <MX_TIM1_Init+0x160>)
 8000f5a:	f004 f873 	bl	8005044 <HAL_TIM_PWM_ConfigChannel>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8000f64:	f000 fcbc 	bl	80018e0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f70:	2300      	movs	r3, #0
 8000f72:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f74:	2300      	movs	r3, #0
 8000f76:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f80:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000f86:	2300      	movs	r3, #0
 8000f88:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000f8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f8e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000f90:	2300      	movs	r3, #0
 8000f92:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f94:	2300      	movs	r3, #0
 8000f96:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f98:	1d3b      	adds	r3, r7, #4
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4807      	ldr	r0, [pc, #28]	; (8000fbc <MX_TIM1_Init+0x160>)
 8000f9e:	f004 fd19 	bl	80059d4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_TIM1_Init+0x150>
  {
    Error_Handler();
 8000fa8:	f000 fc9a 	bl	80018e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000fac:	4803      	ldr	r0, [pc, #12]	; (8000fbc <MX_TIM1_Init+0x160>)
 8000fae:	f001 f80d 	bl	8001fcc <HAL_TIM_MspPostInit>

}
 8000fb2:	bf00      	nop
 8000fb4:	3758      	adds	r7, #88	; 0x58
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	2000657c 	.word	0x2000657c
 8000fc0:	40010000 	.word	0x40010000

08000fc4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b08c      	sub	sp, #48	; 0x30
 8000fc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000fca:	f107 030c 	add.w	r3, r7, #12
 8000fce:	2224      	movs	r2, #36	; 0x24
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f018 fb16 	bl	8019604 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fd8:	463b      	mov	r3, r7
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	605a      	str	r2, [r3, #4]
 8000fe0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fe2:	4b21      	ldr	r3, [pc, #132]	; (8001068 <MX_TIM2_Init+0xa4>)
 8000fe4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fe8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000fea:	4b1f      	ldr	r3, [pc, #124]	; (8001068 <MX_TIM2_Init+0xa4>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ff0:	4b1d      	ldr	r3, [pc, #116]	; (8001068 <MX_TIM2_Init+0xa4>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000ff6:	4b1c      	ldr	r3, [pc, #112]	; (8001068 <MX_TIM2_Init+0xa4>)
 8000ff8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ffc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ffe:	4b1a      	ldr	r3, [pc, #104]	; (8001068 <MX_TIM2_Init+0xa4>)
 8001000:	2200      	movs	r2, #0
 8001002:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001004:	4b18      	ldr	r3, [pc, #96]	; (8001068 <MX_TIM2_Init+0xa4>)
 8001006:	2200      	movs	r2, #0
 8001008:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800100a:	2301      	movs	r3, #1
 800100c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800100e:	2300      	movs	r3, #0
 8001010:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001012:	2301      	movs	r3, #1
 8001014:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001016:	2300      	movs	r3, #0
 8001018:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800101a:	2300      	movs	r3, #0
 800101c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800101e:	2300      	movs	r3, #0
 8001020:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001022:	2301      	movs	r3, #1
 8001024:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001026:	2300      	movs	r3, #0
 8001028:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800102a:	2300      	movs	r3, #0
 800102c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800102e:	f107 030c 	add.w	r3, r7, #12
 8001032:	4619      	mov	r1, r3
 8001034:	480c      	ldr	r0, [pc, #48]	; (8001068 <MX_TIM2_Init+0xa4>)
 8001036:	f003 fe3f 	bl	8004cb8 <HAL_TIM_Encoder_Init>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001040:	f000 fc4e 	bl	80018e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001044:	2300      	movs	r3, #0
 8001046:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001048:	2300      	movs	r3, #0
 800104a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800104c:	463b      	mov	r3, r7
 800104e:	4619      	mov	r1, r3
 8001050:	4805      	ldr	r0, [pc, #20]	; (8001068 <MX_TIM2_Init+0xa4>)
 8001052:	f004 fc31 	bl	80058b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 800105c:	f000 fc40 	bl	80018e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001060:	bf00      	nop
 8001062:	3730      	adds	r7, #48	; 0x30
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	200065c8 	.word	0x200065c8

0800106c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b08c      	sub	sp, #48	; 0x30
 8001070:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001072:	f107 030c 	add.w	r3, r7, #12
 8001076:	2224      	movs	r2, #36	; 0x24
 8001078:	2100      	movs	r1, #0
 800107a:	4618      	mov	r0, r3
 800107c:	f018 fac2 	bl	8019604 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001080:	463b      	mov	r3, r7
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	605a      	str	r2, [r3, #4]
 8001088:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800108a:	4b21      	ldr	r3, [pc, #132]	; (8001110 <MX_TIM3_Init+0xa4>)
 800108c:	4a21      	ldr	r2, [pc, #132]	; (8001114 <MX_TIM3_Init+0xa8>)
 800108e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001090:	4b1f      	ldr	r3, [pc, #124]	; (8001110 <MX_TIM3_Init+0xa4>)
 8001092:	2200      	movs	r2, #0
 8001094:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001096:	4b1e      	ldr	r3, [pc, #120]	; (8001110 <MX_TIM3_Init+0xa4>)
 8001098:	2200      	movs	r2, #0
 800109a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800109c:	4b1c      	ldr	r3, [pc, #112]	; (8001110 <MX_TIM3_Init+0xa4>)
 800109e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010a2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010a4:	4b1a      	ldr	r3, [pc, #104]	; (8001110 <MX_TIM3_Init+0xa4>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010aa:	4b19      	ldr	r3, [pc, #100]	; (8001110 <MX_TIM3_Init+0xa4>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80010b0:	2301      	movs	r3, #1
 80010b2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80010b4:	2300      	movs	r3, #0
 80010b6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80010b8:	2301      	movs	r3, #1
 80010ba:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80010bc:	2300      	movs	r3, #0
 80010be:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80010c0:	2300      	movs	r3, #0
 80010c2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80010c4:	2300      	movs	r3, #0
 80010c6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80010c8:	2301      	movs	r3, #1
 80010ca:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80010cc:	2300      	movs	r3, #0
 80010ce:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80010d0:	2300      	movs	r3, #0
 80010d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80010d4:	f107 030c 	add.w	r3, r7, #12
 80010d8:	4619      	mov	r1, r3
 80010da:	480d      	ldr	r0, [pc, #52]	; (8001110 <MX_TIM3_Init+0xa4>)
 80010dc:	f003 fdec 	bl	8004cb8 <HAL_TIM_Encoder_Init>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80010e6:	f000 fbfb 	bl	80018e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010ea:	2300      	movs	r3, #0
 80010ec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010ee:	2300      	movs	r3, #0
 80010f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010f2:	463b      	mov	r3, r7
 80010f4:	4619      	mov	r1, r3
 80010f6:	4806      	ldr	r0, [pc, #24]	; (8001110 <MX_TIM3_Init+0xa4>)
 80010f8:	f004 fbde 	bl	80058b8 <HAL_TIMEx_MasterConfigSynchronization>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001102:	f000 fbed 	bl	80018e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001106:	bf00      	nop
 8001108:	3730      	adds	r7, #48	; 0x30
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	20006614 	.word	0x20006614
 8001114:	40000400 	.word	0x40000400

08001118 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b08c      	sub	sp, #48	; 0x30
 800111c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800111e:	f107 030c 	add.w	r3, r7, #12
 8001122:	2224      	movs	r2, #36	; 0x24
 8001124:	2100      	movs	r1, #0
 8001126:	4618      	mov	r0, r3
 8001128:	f018 fa6c 	bl	8019604 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800112c:	463b      	mov	r3, r7
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	605a      	str	r2, [r3, #4]
 8001134:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001136:	4b21      	ldr	r3, [pc, #132]	; (80011bc <MX_TIM4_Init+0xa4>)
 8001138:	4a21      	ldr	r2, [pc, #132]	; (80011c0 <MX_TIM4_Init+0xa8>)
 800113a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800113c:	4b1f      	ldr	r3, [pc, #124]	; (80011bc <MX_TIM4_Init+0xa4>)
 800113e:	2200      	movs	r2, #0
 8001140:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001142:	4b1e      	ldr	r3, [pc, #120]	; (80011bc <MX_TIM4_Init+0xa4>)
 8001144:	2200      	movs	r2, #0
 8001146:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001148:	4b1c      	ldr	r3, [pc, #112]	; (80011bc <MX_TIM4_Init+0xa4>)
 800114a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800114e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001150:	4b1a      	ldr	r3, [pc, #104]	; (80011bc <MX_TIM4_Init+0xa4>)
 8001152:	2200      	movs	r2, #0
 8001154:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001156:	4b19      	ldr	r3, [pc, #100]	; (80011bc <MX_TIM4_Init+0xa4>)
 8001158:	2200      	movs	r2, #0
 800115a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800115c:	2301      	movs	r3, #1
 800115e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001160:	2300      	movs	r3, #0
 8001162:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001164:	2301      	movs	r3, #1
 8001166:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001168:	2300      	movs	r3, #0
 800116a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800116c:	2300      	movs	r3, #0
 800116e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001170:	2300      	movs	r3, #0
 8001172:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001174:	2301      	movs	r3, #1
 8001176:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001178:	2300      	movs	r3, #0
 800117a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800117c:	2300      	movs	r3, #0
 800117e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001180:	f107 030c 	add.w	r3, r7, #12
 8001184:	4619      	mov	r1, r3
 8001186:	480d      	ldr	r0, [pc, #52]	; (80011bc <MX_TIM4_Init+0xa4>)
 8001188:	f003 fd96 	bl	8004cb8 <HAL_TIM_Encoder_Init>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001192:	f000 fba5 	bl	80018e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001196:	2300      	movs	r3, #0
 8001198:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800119a:	2300      	movs	r3, #0
 800119c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800119e:	463b      	mov	r3, r7
 80011a0:	4619      	mov	r1, r3
 80011a2:	4806      	ldr	r0, [pc, #24]	; (80011bc <MX_TIM4_Init+0xa4>)
 80011a4:	f004 fb88 	bl	80058b8 <HAL_TIMEx_MasterConfigSynchronization>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80011ae:	f000 fb97 	bl	80018e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80011b2:	bf00      	nop
 80011b4:	3730      	adds	r7, #48	; 0x30
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	20006660 	.word	0x20006660
 80011c0:	40000800 	.word	0x40000800

080011c4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b08c      	sub	sp, #48	; 0x30
 80011c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80011ca:	f107 030c 	add.w	r3, r7, #12
 80011ce:	2224      	movs	r2, #36	; 0x24
 80011d0:	2100      	movs	r1, #0
 80011d2:	4618      	mov	r0, r3
 80011d4:	f018 fa16 	bl	8019604 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011d8:	463b      	mov	r3, r7
 80011da:	2200      	movs	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	605a      	str	r2, [r3, #4]
 80011e0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80011e2:	4b21      	ldr	r3, [pc, #132]	; (8001268 <MX_TIM5_Init+0xa4>)
 80011e4:	4a21      	ldr	r2, [pc, #132]	; (800126c <MX_TIM5_Init+0xa8>)
 80011e6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80011e8:	4b1f      	ldr	r3, [pc, #124]	; (8001268 <MX_TIM5_Init+0xa4>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ee:	4b1e      	ldr	r3, [pc, #120]	; (8001268 <MX_TIM5_Init+0xa4>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80011f4:	4b1c      	ldr	r3, [pc, #112]	; (8001268 <MX_TIM5_Init+0xa4>)
 80011f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011fa:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011fc:	4b1a      	ldr	r3, [pc, #104]	; (8001268 <MX_TIM5_Init+0xa4>)
 80011fe:	2200      	movs	r2, #0
 8001200:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001202:	4b19      	ldr	r3, [pc, #100]	; (8001268 <MX_TIM5_Init+0xa4>)
 8001204:	2200      	movs	r2, #0
 8001206:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001208:	2301      	movs	r3, #1
 800120a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800120c:	2300      	movs	r3, #0
 800120e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001210:	2301      	movs	r3, #1
 8001212:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001214:	2300      	movs	r3, #0
 8001216:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001218:	2300      	movs	r3, #0
 800121a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800121c:	2300      	movs	r3, #0
 800121e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001220:	2301      	movs	r3, #1
 8001222:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001224:	2300      	movs	r3, #0
 8001226:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001228:	2300      	movs	r3, #0
 800122a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800122c:	f107 030c 	add.w	r3, r7, #12
 8001230:	4619      	mov	r1, r3
 8001232:	480d      	ldr	r0, [pc, #52]	; (8001268 <MX_TIM5_Init+0xa4>)
 8001234:	f003 fd40 	bl	8004cb8 <HAL_TIM_Encoder_Init>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 800123e:	f000 fb4f 	bl	80018e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001242:	2300      	movs	r3, #0
 8001244:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001246:	2300      	movs	r3, #0
 8001248:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800124a:	463b      	mov	r3, r7
 800124c:	4619      	mov	r1, r3
 800124e:	4806      	ldr	r0, [pc, #24]	; (8001268 <MX_TIM5_Init+0xa4>)
 8001250:	f004 fb32 	bl	80058b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 800125a:	f000 fb41 	bl	80018e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800125e:	bf00      	nop
 8001260:	3730      	adds	r7, #48	; 0x30
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	200066ac 	.word	0x200066ac
 800126c:	40000c00 	.word	0x40000c00

08001270 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b08c      	sub	sp, #48	; 0x30
 8001274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001276:	f107 030c 	add.w	r3, r7, #12
 800127a:	2224      	movs	r2, #36	; 0x24
 800127c:	2100      	movs	r1, #0
 800127e:	4618      	mov	r0, r3
 8001280:	f018 f9c0 	bl	8019604 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001284:	463b      	mov	r3, r7
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	605a      	str	r2, [r3, #4]
 800128c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800128e:	4b23      	ldr	r3, [pc, #140]	; (800131c <MX_TIM8_Init+0xac>)
 8001290:	4a23      	ldr	r2, [pc, #140]	; (8001320 <MX_TIM8_Init+0xb0>)
 8001292:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001294:	4b21      	ldr	r3, [pc, #132]	; (800131c <MX_TIM8_Init+0xac>)
 8001296:	2200      	movs	r2, #0
 8001298:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800129a:	4b20      	ldr	r3, [pc, #128]	; (800131c <MX_TIM8_Init+0xac>)
 800129c:	2200      	movs	r2, #0
 800129e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80012a0:	4b1e      	ldr	r3, [pc, #120]	; (800131c <MX_TIM8_Init+0xac>)
 80012a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012a6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012a8:	4b1c      	ldr	r3, [pc, #112]	; (800131c <MX_TIM8_Init+0xac>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80012ae:	4b1b      	ldr	r3, [pc, #108]	; (800131c <MX_TIM8_Init+0xac>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012b4:	4b19      	ldr	r3, [pc, #100]	; (800131c <MX_TIM8_Init+0xac>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80012ba:	2301      	movs	r3, #1
 80012bc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80012be:	2300      	movs	r3, #0
 80012c0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012c2:	2301      	movs	r3, #1
 80012c4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80012c6:	2300      	movs	r3, #0
 80012c8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80012ca:	2300      	movs	r3, #0
 80012cc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80012ce:	2300      	movs	r3, #0
 80012d0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80012d2:	2301      	movs	r3, #1
 80012d4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80012d6:	2300      	movs	r3, #0
 80012d8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80012da:	2300      	movs	r3, #0
 80012dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80012de:	f107 030c 	add.w	r3, r7, #12
 80012e2:	4619      	mov	r1, r3
 80012e4:	480d      	ldr	r0, [pc, #52]	; (800131c <MX_TIM8_Init+0xac>)
 80012e6:	f003 fce7 	bl	8004cb8 <HAL_TIM_Encoder_Init>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 80012f0:	f000 faf6 	bl	80018e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012f4:	2300      	movs	r3, #0
 80012f6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80012f8:	2300      	movs	r3, #0
 80012fa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012fc:	2300      	movs	r3, #0
 80012fe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001300:	463b      	mov	r3, r7
 8001302:	4619      	mov	r1, r3
 8001304:	4805      	ldr	r0, [pc, #20]	; (800131c <MX_TIM8_Init+0xac>)
 8001306:	f004 fad7 	bl	80058b8 <HAL_TIMEx_MasterConfigSynchronization>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001310:	f000 fae6 	bl	80018e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001314:	bf00      	nop
 8001316:	3730      	adds	r7, #48	; 0x30
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	200066f8 	.word	0x200066f8
 8001320:	40010400 	.word	0x40010400

08001324 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b088      	sub	sp, #32
 8001328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800132a:	1d3b      	adds	r3, r7, #4
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]
 8001336:	611a      	str	r2, [r3, #16]
 8001338:	615a      	str	r2, [r3, #20]
 800133a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800133c:	4b1f      	ldr	r3, [pc, #124]	; (80013bc <MX_TIM9_Init+0x98>)
 800133e:	4a20      	ldr	r2, [pc, #128]	; (80013c0 <MX_TIM9_Init+0x9c>)
 8001340:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8001342:	4b1e      	ldr	r3, [pc, #120]	; (80013bc <MX_TIM9_Init+0x98>)
 8001344:	2200      	movs	r2, #0
 8001346:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001348:	4b1c      	ldr	r3, [pc, #112]	; (80013bc <MX_TIM9_Init+0x98>)
 800134a:	2200      	movs	r2, #0
 800134c:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 800134e:	4b1b      	ldr	r3, [pc, #108]	; (80013bc <MX_TIM9_Init+0x98>)
 8001350:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001354:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001356:	4b19      	ldr	r3, [pc, #100]	; (80013bc <MX_TIM9_Init+0x98>)
 8001358:	2200      	movs	r2, #0
 800135a:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800135c:	4b17      	ldr	r3, [pc, #92]	; (80013bc <MX_TIM9_Init+0x98>)
 800135e:	2200      	movs	r2, #0
 8001360:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001362:	4816      	ldr	r0, [pc, #88]	; (80013bc <MX_TIM9_Init+0x98>)
 8001364:	f003 fc50 	bl	8004c08 <HAL_TIM_PWM_Init>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 800136e:	f000 fab7 	bl	80018e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001372:	2360      	movs	r3, #96	; 0x60
 8001374:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001376:	2300      	movs	r3, #0
 8001378:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800137a:	2300      	movs	r3, #0
 800137c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800137e:	2300      	movs	r3, #0
 8001380:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001382:	1d3b      	adds	r3, r7, #4
 8001384:	2200      	movs	r2, #0
 8001386:	4619      	mov	r1, r3
 8001388:	480c      	ldr	r0, [pc, #48]	; (80013bc <MX_TIM9_Init+0x98>)
 800138a:	f003 fe5b 	bl	8005044 <HAL_TIM_PWM_ConfigChannel>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 8001394:	f000 faa4 	bl	80018e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001398:	1d3b      	adds	r3, r7, #4
 800139a:	2204      	movs	r2, #4
 800139c:	4619      	mov	r1, r3
 800139e:	4807      	ldr	r0, [pc, #28]	; (80013bc <MX_TIM9_Init+0x98>)
 80013a0:	f003 fe50 	bl	8005044 <HAL_TIM_PWM_ConfigChannel>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 80013aa:	f000 fa99 	bl	80018e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 80013ae:	4803      	ldr	r0, [pc, #12]	; (80013bc <MX_TIM9_Init+0x98>)
 80013b0:	f000 fe0c 	bl	8001fcc <HAL_TIM_MspPostInit>

}
 80013b4:	bf00      	nop
 80013b6:	3720      	adds	r7, #32
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	20006744 	.word	0x20006744
 80013c0:	40014000 	.word	0x40014000

080013c4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80013c8:	4b14      	ldr	r3, [pc, #80]	; (800141c <MX_USART3_UART_Init+0x58>)
 80013ca:	4a15      	ldr	r2, [pc, #84]	; (8001420 <MX_USART3_UART_Init+0x5c>)
 80013cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80013ce:	4b13      	ldr	r3, [pc, #76]	; (800141c <MX_USART3_UART_Init+0x58>)
 80013d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80013d6:	4b11      	ldr	r3, [pc, #68]	; (800141c <MX_USART3_UART_Init+0x58>)
 80013d8:	2200      	movs	r2, #0
 80013da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80013dc:	4b0f      	ldr	r3, [pc, #60]	; (800141c <MX_USART3_UART_Init+0x58>)
 80013de:	2200      	movs	r2, #0
 80013e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80013e2:	4b0e      	ldr	r3, [pc, #56]	; (800141c <MX_USART3_UART_Init+0x58>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80013e8:	4b0c      	ldr	r3, [pc, #48]	; (800141c <MX_USART3_UART_Init+0x58>)
 80013ea:	220c      	movs	r2, #12
 80013ec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ee:	4b0b      	ldr	r3, [pc, #44]	; (800141c <MX_USART3_UART_Init+0x58>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80013f4:	4b09      	ldr	r3, [pc, #36]	; (800141c <MX_USART3_UART_Init+0x58>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013fa:	4b08      	ldr	r3, [pc, #32]	; (800141c <MX_USART3_UART_Init+0x58>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001400:	4b06      	ldr	r3, [pc, #24]	; (800141c <MX_USART3_UART_Init+0x58>)
 8001402:	2200      	movs	r2, #0
 8001404:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001406:	4805      	ldr	r0, [pc, #20]	; (800141c <MX_USART3_UART_Init+0x58>)
 8001408:	f004 fb80 	bl	8005b0c <HAL_UART_Init>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001412:	f000 fa65 	bl	80018e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001416:	bf00      	nop
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	20006790 	.word	0x20006790
 8001420:	40004800 	.word	0x40004800

08001424 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001428:	4b14      	ldr	r3, [pc, #80]	; (800147c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800142a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800142e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001430:	4b12      	ldr	r3, [pc, #72]	; (800147c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001432:	2206      	movs	r2, #6
 8001434:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001436:	4b11      	ldr	r3, [pc, #68]	; (800147c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001438:	2202      	movs	r2, #2
 800143a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800143c:	4b0f      	ldr	r3, [pc, #60]	; (800147c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800143e:	2200      	movs	r2, #0
 8001440:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001442:	4b0e      	ldr	r3, [pc, #56]	; (800147c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001444:	2202      	movs	r2, #2
 8001446:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001448:	4b0c      	ldr	r3, [pc, #48]	; (800147c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800144a:	2201      	movs	r2, #1
 800144c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800144e:	4b0b      	ldr	r3, [pc, #44]	; (800147c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001450:	2200      	movs	r2, #0
 8001452:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001454:	4b09      	ldr	r3, [pc, #36]	; (800147c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001456:	2200      	movs	r2, #0
 8001458:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800145a:	4b08      	ldr	r3, [pc, #32]	; (800147c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800145c:	2201      	movs	r2, #1
 800145e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001460:	4b06      	ldr	r3, [pc, #24]	; (800147c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001462:	2200      	movs	r2, #0
 8001464:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001466:	4805      	ldr	r0, [pc, #20]	; (800147c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001468:	f002 f81d 	bl	80034a6 <HAL_PCD_Init>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001472:	f000 fa35 	bl	80018e0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	200068d8 	.word	0x200068d8

08001480 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001486:	4b10      	ldr	r3, [pc, #64]	; (80014c8 <MX_DMA_Init+0x48>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	4a0f      	ldr	r2, [pc, #60]	; (80014c8 <MX_DMA_Init+0x48>)
 800148c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001490:	6313      	str	r3, [r2, #48]	; 0x30
 8001492:	4b0d      	ldr	r3, [pc, #52]	; (80014c8 <MX_DMA_Init+0x48>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800149a:	607b      	str	r3, [r7, #4]
 800149c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 800149e:	2200      	movs	r2, #0
 80014a0:	2105      	movs	r1, #5
 80014a2:	200c      	movs	r0, #12
 80014a4:	f001 f9fa 	bl	800289c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80014a8:	200c      	movs	r0, #12
 80014aa:	f001 fa13 	bl	80028d4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 80014ae:	2200      	movs	r2, #0
 80014b0:	2105      	movs	r1, #5
 80014b2:	200e      	movs	r0, #14
 80014b4:	f001 f9f2 	bl	800289c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80014b8:	200e      	movs	r0, #14
 80014ba:	f001 fa0b 	bl	80028d4 <HAL_NVIC_EnableIRQ>

}
 80014be:	bf00      	nop
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	40023800 	.word	0x40023800

080014cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b08c      	sub	sp, #48	; 0x30
 80014d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d2:	f107 031c 	add.w	r3, r7, #28
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	605a      	str	r2, [r3, #4]
 80014dc:	609a      	str	r2, [r3, #8]
 80014de:	60da      	str	r2, [r3, #12]
 80014e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014e2:	4b6e      	ldr	r3, [pc, #440]	; (800169c <MX_GPIO_Init+0x1d0>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	4a6d      	ldr	r2, [pc, #436]	; (800169c <MX_GPIO_Init+0x1d0>)
 80014e8:	f043 0310 	orr.w	r3, r3, #16
 80014ec:	6313      	str	r3, [r2, #48]	; 0x30
 80014ee:	4b6b      	ldr	r3, [pc, #428]	; (800169c <MX_GPIO_Init+0x1d0>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	f003 0310 	and.w	r3, r3, #16
 80014f6:	61bb      	str	r3, [r7, #24]
 80014f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014fa:	4b68      	ldr	r3, [pc, #416]	; (800169c <MX_GPIO_Init+0x1d0>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	4a67      	ldr	r2, [pc, #412]	; (800169c <MX_GPIO_Init+0x1d0>)
 8001500:	f043 0304 	orr.w	r3, r3, #4
 8001504:	6313      	str	r3, [r2, #48]	; 0x30
 8001506:	4b65      	ldr	r3, [pc, #404]	; (800169c <MX_GPIO_Init+0x1d0>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	f003 0304 	and.w	r3, r3, #4
 800150e:	617b      	str	r3, [r7, #20]
 8001510:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001512:	4b62      	ldr	r3, [pc, #392]	; (800169c <MX_GPIO_Init+0x1d0>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	4a61      	ldr	r2, [pc, #388]	; (800169c <MX_GPIO_Init+0x1d0>)
 8001518:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800151c:	6313      	str	r3, [r2, #48]	; 0x30
 800151e:	4b5f      	ldr	r3, [pc, #380]	; (800169c <MX_GPIO_Init+0x1d0>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001526:	613b      	str	r3, [r7, #16]
 8001528:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800152a:	4b5c      	ldr	r3, [pc, #368]	; (800169c <MX_GPIO_Init+0x1d0>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	4a5b      	ldr	r2, [pc, #364]	; (800169c <MX_GPIO_Init+0x1d0>)
 8001530:	f043 0301 	orr.w	r3, r3, #1
 8001534:	6313      	str	r3, [r2, #48]	; 0x30
 8001536:	4b59      	ldr	r3, [pc, #356]	; (800169c <MX_GPIO_Init+0x1d0>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001542:	4b56      	ldr	r3, [pc, #344]	; (800169c <MX_GPIO_Init+0x1d0>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	4a55      	ldr	r2, [pc, #340]	; (800169c <MX_GPIO_Init+0x1d0>)
 8001548:	f043 0302 	orr.w	r3, r3, #2
 800154c:	6313      	str	r3, [r2, #48]	; 0x30
 800154e:	4b53      	ldr	r3, [pc, #332]	; (800169c <MX_GPIO_Init+0x1d0>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	60bb      	str	r3, [r7, #8]
 8001558:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800155a:	4b50      	ldr	r3, [pc, #320]	; (800169c <MX_GPIO_Init+0x1d0>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	4a4f      	ldr	r2, [pc, #316]	; (800169c <MX_GPIO_Init+0x1d0>)
 8001560:	f043 0308 	orr.w	r3, r3, #8
 8001564:	6313      	str	r3, [r2, #48]	; 0x30
 8001566:	4b4d      	ldr	r3, [pc, #308]	; (800169c <MX_GPIO_Init+0x1d0>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	f003 0308 	and.w	r3, r3, #8
 800156e:	607b      	str	r3, [r7, #4]
 8001570:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001572:	4b4a      	ldr	r3, [pc, #296]	; (800169c <MX_GPIO_Init+0x1d0>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	4a49      	ldr	r2, [pc, #292]	; (800169c <MX_GPIO_Init+0x1d0>)
 8001578:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800157c:	6313      	str	r3, [r2, #48]	; 0x30
 800157e:	4b47      	ldr	r3, [pc, #284]	; (800169c <MX_GPIO_Init+0x1d0>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001586:	603b      	str	r3, [r7, #0]
 8001588:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800158a:	2200      	movs	r2, #0
 800158c:	f244 0181 	movw	r1, #16513	; 0x4081
 8001590:	4843      	ldr	r0, [pc, #268]	; (80016a0 <MX_GPIO_Init+0x1d4>)
 8001592:	f001 ff6f 	bl	8003474 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8001596:	2200      	movs	r2, #0
 8001598:	2140      	movs	r1, #64	; 0x40
 800159a:	4842      	ldr	r0, [pc, #264]	; (80016a4 <MX_GPIO_Init+0x1d8>)
 800159c:	f001 ff6a 	bl	8003474 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80015a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015a6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80015aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ac:	2300      	movs	r3, #0
 80015ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80015b0:	f107 031c 	add.w	r3, r7, #28
 80015b4:	4619      	mov	r1, r3
 80015b6:	483c      	ldr	r0, [pc, #240]	; (80016a8 <MX_GPIO_Init+0x1dc>)
 80015b8:	f001 fdb0 	bl	800311c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80015bc:	2332      	movs	r3, #50	; 0x32
 80015be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c0:	2302      	movs	r3, #2
 80015c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c4:	2300      	movs	r3, #0
 80015c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c8:	2303      	movs	r3, #3
 80015ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015cc:	230b      	movs	r3, #11
 80015ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015d0:	f107 031c 	add.w	r3, r7, #28
 80015d4:	4619      	mov	r1, r3
 80015d6:	4834      	ldr	r0, [pc, #208]	; (80016a8 <MX_GPIO_Init+0x1dc>)
 80015d8:	f001 fda0 	bl	800311c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_CRS_DV_Pin;
 80015dc:	2380      	movs	r3, #128	; 0x80
 80015de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e0:	2302      	movs	r3, #2
 80015e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e4:	2300      	movs	r3, #0
 80015e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e8:	2303      	movs	r3, #3
 80015ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015ec:	230b      	movs	r3, #11
 80015ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_CRS_DV_GPIO_Port, &GPIO_InitStruct);
 80015f0:	f107 031c 	add.w	r3, r7, #28
 80015f4:	4619      	mov	r1, r3
 80015f6:	482d      	ldr	r0, [pc, #180]	; (80016ac <MX_GPIO_Init+0x1e0>)
 80015f8:	f001 fd90 	bl	800311c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80015fc:	f244 0381 	movw	r3, #16513	; 0x4081
 8001600:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001602:	2301      	movs	r3, #1
 8001604:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001606:	2300      	movs	r3, #0
 8001608:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160a:	2300      	movs	r3, #0
 800160c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800160e:	f107 031c 	add.w	r3, r7, #28
 8001612:	4619      	mov	r1, r3
 8001614:	4822      	ldr	r0, [pc, #136]	; (80016a0 <MX_GPIO_Init+0x1d4>)
 8001616:	f001 fd81 	bl	800311c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800161a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800161e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001620:	2302      	movs	r3, #2
 8001622:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001624:	2300      	movs	r3, #0
 8001626:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001628:	2303      	movs	r3, #3
 800162a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800162c:	230b      	movs	r3, #11
 800162e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001630:	f107 031c 	add.w	r3, r7, #28
 8001634:	4619      	mov	r1, r3
 8001636:	481a      	ldr	r0, [pc, #104]	; (80016a0 <MX_GPIO_Init+0x1d4>)
 8001638:	f001 fd70 	bl	800311c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800163c:	2340      	movs	r3, #64	; 0x40
 800163e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001640:	2301      	movs	r3, #1
 8001642:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001644:	2300      	movs	r3, #0
 8001646:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001648:	2300      	movs	r3, #0
 800164a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800164c:	f107 031c 	add.w	r3, r7, #28
 8001650:	4619      	mov	r1, r3
 8001652:	4814      	ldr	r0, [pc, #80]	; (80016a4 <MX_GPIO_Init+0x1d8>)
 8001654:	f001 fd62 	bl	800311c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001658:	2380      	movs	r3, #128	; 0x80
 800165a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800165c:	2300      	movs	r3, #0
 800165e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001660:	2300      	movs	r3, #0
 8001662:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001664:	f107 031c 	add.w	r3, r7, #28
 8001668:	4619      	mov	r1, r3
 800166a:	480e      	ldr	r0, [pc, #56]	; (80016a4 <MX_GPIO_Init+0x1d8>)
 800166c:	f001 fd56 	bl	800311c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001670:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001674:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001676:	2302      	movs	r3, #2
 8001678:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167a:	2300      	movs	r3, #0
 800167c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800167e:	2303      	movs	r3, #3
 8001680:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001682:	230b      	movs	r3, #11
 8001684:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001686:	f107 031c 	add.w	r3, r7, #28
 800168a:	4619      	mov	r1, r3
 800168c:	4805      	ldr	r0, [pc, #20]	; (80016a4 <MX_GPIO_Init+0x1d8>)
 800168e:	f001 fd45 	bl	800311c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001692:	bf00      	nop
 8001694:	3730      	adds	r7, #48	; 0x30
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	40023800 	.word	0x40023800
 80016a0:	40020400 	.word	0x40020400
 80016a4:	40021800 	.word	0x40021800
 80016a8:	40020800 	.word	0x40020800
 80016ac:	40020000 	.word	0x40020000

080016b0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80016b0:	b5b0      	push	{r4, r5, r7, lr}
 80016b2:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 80016b6:	af02      	add	r7, sp, #8
 80016b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016bc:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80016c0:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN 5 */
	rmw_uros_set_custom_transport(
 80016c2:	4b6f      	ldr	r3, [pc, #444]	; (8001880 <StartDefaultTask+0x1d0>)
 80016c4:	9301      	str	r3, [sp, #4]
 80016c6:	4b6f      	ldr	r3, [pc, #444]	; (8001884 <StartDefaultTask+0x1d4>)
 80016c8:	9300      	str	r3, [sp, #0]
 80016ca:	4b6f      	ldr	r3, [pc, #444]	; (8001888 <StartDefaultTask+0x1d8>)
 80016cc:	4a6f      	ldr	r2, [pc, #444]	; (800188c <StartDefaultTask+0x1dc>)
 80016ce:	4970      	ldr	r1, [pc, #448]	; (8001890 <StartDefaultTask+0x1e0>)
 80016d0:	2001      	movs	r0, #1
 80016d2:	f00a fdc9 	bl	800c268 <rmw_uros_set_custom_transport>
	      cubemx_transport_open,
	      cubemx_transport_close,
	      cubemx_transport_write,
	      cubemx_transport_read);

	rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 80016d6:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 80016da:	4618      	mov	r0, r3
 80016dc:	f00a fcfa 	bl	800c0d4 <rcutils_get_zero_initialized_allocator>
	freeRTOS_allocator.allocate = microros_allocate;
 80016e0:	4b6c      	ldr	r3, [pc, #432]	; (8001894 <StartDefaultTask+0x1e4>)
 80016e2:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
	freeRTOS_allocator.deallocate = microros_deallocate;
 80016e6:	4b6c      	ldr	r3, [pc, #432]	; (8001898 <StartDefaultTask+0x1e8>)
 80016e8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
	freeRTOS_allocator.reallocate = microros_reallocate;
 80016ec:	4b6b      	ldr	r3, [pc, #428]	; (800189c <StartDefaultTask+0x1ec>)
 80016ee:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
	freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 80016f2:	4b6b      	ldr	r3, [pc, #428]	; (80018a0 <StartDefaultTask+0x1f0>)
 80016f4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8

	if (!rcutils_set_default_allocator(&freeRTOS_allocator)) return;
 80016f8:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 80016fc:	4618      	mov	r0, r3
 80016fe:	f00a fcf7 	bl	800c0f0 <rcutils_set_default_allocator>
 8001702:	4603      	mov	r3, r0
 8001704:	f083 0301 	eor.w	r3, r3, #1
 8001708:	b2db      	uxtb	r3, r3
 800170a:	2b00      	cmp	r3, #0
 800170c:	f040 80a6 	bne.w	800185c <StartDefaultTask+0x1ac>

	rcl_ret_t rc;
	rcl_node_t node; // nodo;
	rcl_service_t setup_service, control_service; //servizi
	const char* setup_service_name = "/setup";
 8001710:	4b64      	ldr	r3, [pc, #400]	; (80018a4 <StartDefaultTask+0x1f4>)
 8001712:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
	const char* control_service_name = "/control"; //nomi dei servizi
 8001716:	4b64      	ldr	r3, [pc, #400]	; (80018a8 <StartDefaultTask+0x1f8>)
 8001718:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
	const rosidl_service_type_support_t* setup_type_support =
			ROSIDL_GET_SRV_TYPE_SUPPORT(racs_services, srv, Setup);
 800171c:	f008 fed4 	bl	800a4c8 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Setup>
 8001720:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
	const rosidl_service_type_support_t* control_type_support =
			ROSIDL_GET_SRV_TYPE_SUPPORT(racs_services, srv, Control);
 8001724:	f008 feaa 	bl	800a47c <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Control>
 8001728:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
	racs_services__srv__Setup_Request req_setup;
	racs_services__srv__Setup_Response res_setup;
	racs_services__srv__Control_Request req_control;
	racs_services__srv__Control_Response res_control;

	allocator = rcl_get_default_allocator();
 800172c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001730:	4618      	mov	r0, r3
 8001732:	f00a fcfb 	bl	800c12c <rcutils_get_default_allocator>
 8001736:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800173a:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800173e:	f507 74c2 	add.w	r4, r7, #388	; 0x184
 8001742:	461d      	mov	r5, r3
 8001744:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001746:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001748:	682b      	ldr	r3, [r5, #0]
 800174a:	6023      	str	r3, [r4, #0]

	rc = rclc_support_init(&support, 0, NULL, &allocator);
 800174c:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8001750:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 8001754:	2200      	movs	r2, #0
 8001756:	2100      	movs	r1, #0
 8001758:	f00a fbee 	bl	800bf38 <rclc_support_init>
 800175c:	f8c7 01f4 	str.w	r0, [r7, #500]	; 0x1f4
	if (rc != RCL_RET_OK) return;
 8001760:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001764:	2b00      	cmp	r3, #0
 8001766:	d17b      	bne.n	8001860 <StartDefaultTask+0x1b0>

	rc = rclc_node_init_default(&node, "STM32_node", "", &support);
 8001768:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800176c:	f507 70ea 	add.w	r0, r7, #468	; 0x1d4
 8001770:	4a4e      	ldr	r2, [pc, #312]	; (80018ac <StartDefaultTask+0x1fc>)
 8001772:	494f      	ldr	r1, [pc, #316]	; (80018b0 <StartDefaultTask+0x200>)
 8001774:	f00a fc2a 	bl	800bfcc <rclc_node_init_default>
 8001778:	f8c7 01f4 	str.w	r0, [r7, #500]	; 0x1f4
	if (rc != RCL_RET_OK) return;
 800177c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001780:	2b00      	cmp	r3, #0
 8001782:	d16f      	bne.n	8001864 <StartDefaultTask+0x1b4>

	rc = rclc_service_init_default(
 8001784:	f507 71ea 	add.w	r1, r7, #468	; 0x1d4
 8001788:	f507 70e8 	add.w	r0, r7, #464	; 0x1d0
 800178c:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8001790:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 8001794:	f00a fc5c 	bl	800c050 <rclc_service_init_default>
 8001798:	f8c7 01f4 	str.w	r0, [r7, #500]	; 0x1f4
				&setup_service, &node, setup_type_support, setup_service_name);

	if (rc != RCL_RET_OK) return;
 800179c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d161      	bne.n	8001868 <StartDefaultTask+0x1b8>

	rc = rclc_service_init_default(
 80017a4:	f507 71ea 	add.w	r1, r7, #468	; 0x1d4
 80017a8:	f507 70e6 	add.w	r0, r7, #460	; 0x1cc
 80017ac:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80017b0:	f8d7 21f8 	ldr.w	r2, [r7, #504]	; 0x1f8
 80017b4:	f00a fc4c 	bl	800c050 <rclc_service_init_default>
 80017b8:	f8c7 01f4 	str.w	r0, [r7, #500]	; 0x1f4
			&control_service, &node, control_type_support, control_service_name);

	if (rc != RCL_RET_OK) return;
 80017bc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d153      	bne.n	800186c <StartDefaultTask+0x1bc>

	rclc_executor_t executor;
	executor = rclc_executor_get_zero_initialized_executor();
 80017c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017c8:	f5a3 74ac 	sub.w	r4, r3, #344	; 0x158
 80017cc:	463b      	mov	r3, r7
 80017ce:	4618      	mov	r0, r3
 80017d0:	f00a f8ba 	bl	800b948 <rclc_executor_get_zero_initialized_executor>
 80017d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017d8:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 80017dc:	4620      	mov	r0, r4
 80017de:	4619      	mov	r1, r3
 80017e0:	2390      	movs	r3, #144	; 0x90
 80017e2:	461a      	mov	r2, r3
 80017e4:	f018 f883 	bl	80198ee <memcpy>
	unsigned int num_handles = 2;
 80017e8:	2302      	movs	r3, #2
 80017ea:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
	rclc_executor_init(&executor, &support.context, num_handles, &allocator);
 80017ee:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 80017f2:	f507 71cc 	add.w	r1, r7, #408	; 0x198
 80017f6:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 80017fa:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 80017fe:	f00a f8af 	bl	800b960 <rclc_executor_init>

	rc = rclc_executor_add_service(
 8001802:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8001806:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 800180a:	f507 71e8 	add.w	r1, r7, #464	; 0x1d0
 800180e:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8001812:	4c28      	ldr	r4, [pc, #160]	; (80018b4 <StartDefaultTask+0x204>)
 8001814:	9400      	str	r4, [sp, #0]
 8001816:	f00a f91f 	bl	800ba58 <rclc_executor_add_service>
 800181a:	f8c7 01f4 	str.w	r0, [r7, #500]	; 0x1f4
		&executor, &setup_service, &req_setup,
		&res_setup, setup_callback);
	if (rc != RCL_RET_OK) return;
 800181e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001822:	2b00      	cmp	r3, #0
 8001824:	d124      	bne.n	8001870 <StartDefaultTask+0x1c0>

	rc = rclc_executor_add_service(
 8001826:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 800182a:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 800182e:	f507 71e6 	add.w	r1, r7, #460	; 0x1cc
 8001832:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8001836:	4c20      	ldr	r4, [pc, #128]	; (80018b8 <StartDefaultTask+0x208>)
 8001838:	9400      	str	r4, [sp, #0]
 800183a:	f00a f90d 	bl	800ba58 <rclc_executor_add_service>
 800183e:	f8c7 01f4 	str.w	r0, [r7, #500]	; 0x1f4
		&executor, &control_service, &req_control,
		&res_control, control_callback);
	if (rc != RCL_RET_OK) return;
 8001842:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001846:	2b00      	cmp	r3, #0
 8001848:	d114      	bne.n	8001874 <StartDefaultTask+0x1c4>

	rclc_executor_spin(&executor);
 800184a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800184e:	4618      	mov	r0, r3
 8001850:	f00a fb32 	bl	800beb8 <rclc_executor_spin>

  /* Infinite loop */
	for(;;)
	{
		osDelay(1);
 8001854:	2001      	movs	r0, #1
 8001856:	f006 f905 	bl	8007a64 <osDelay>
 800185a:	e7fb      	b.n	8001854 <StartDefaultTask+0x1a4>
	if (!rcutils_set_default_allocator(&freeRTOS_allocator)) return;
 800185c:	bf00      	nop
 800185e:	e00a      	b.n	8001876 <StartDefaultTask+0x1c6>
	if (rc != RCL_RET_OK) return;
 8001860:	bf00      	nop
 8001862:	e008      	b.n	8001876 <StartDefaultTask+0x1c6>
	if (rc != RCL_RET_OK) return;
 8001864:	bf00      	nop
 8001866:	e006      	b.n	8001876 <StartDefaultTask+0x1c6>
	if (rc != RCL_RET_OK) return;
 8001868:	bf00      	nop
 800186a:	e004      	b.n	8001876 <StartDefaultTask+0x1c6>
	if (rc != RCL_RET_OK) return;
 800186c:	bf00      	nop
 800186e:	e002      	b.n	8001876 <StartDefaultTask+0x1c6>
	if (rc != RCL_RET_OK) return;
 8001870:	bf00      	nop
 8001872:	e000      	b.n	8001876 <StartDefaultTask+0x1c6>
	if (rc != RCL_RET_OK) return;
 8001874:	bf00      	nop
	}
  /* USER CODE END 5 */
}
 8001876:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800187a:	46bd      	mov	sp, r7
 800187c:	bdb0      	pop	{r4, r5, r7, pc}
 800187e:	bf00      	nop
 8001880:	08000c2d 	.word	0x08000c2d
 8001884:	08000bcd 	.word	0x08000bcd
 8001888:	08000bad 	.word	0x08000bad
 800188c:	08000b81 	.word	0x08000b81
 8001890:	20006790 	.word	0x20006790
 8001894:	080018ed 	.word	0x080018ed
 8001898:	08001931 	.word	0x08001931
 800189c:	08001969 	.word	0x08001969
 80018a0:	080019d5 	.word	0x080019d5
 80018a4:	0801a63c 	.word	0x0801a63c
 80018a8:	0801a644 	.word	0x0801a644
 80018ac:	0801a650 	.word	0x0801a650
 80018b0:	0801a654 	.word	0x0801a654
 80018b4:	08000cf3 	.word	0x08000cf3
 80018b8:	08000cd5 	.word	0x08000cd5

080018bc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a04      	ldr	r2, [pc, #16]	; (80018dc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d101      	bne.n	80018d2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80018ce:	f000 fee9 	bl	80026a4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80018d2:	bf00      	nop
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40001000 	.word	0x40001000

080018e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80018e4:	b672      	cpsid	i
}
 80018e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018e8:	e7fe      	b.n	80018e8 <Error_Handler+0x8>
	...

080018ec <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80018f6:	4b0c      	ldr	r3, [pc, #48]	; (8001928 <microros_allocate+0x3c>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	461a      	mov	r2, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	4413      	add	r3, r2
 8001900:	461a      	mov	r2, r3
 8001902:	4b09      	ldr	r3, [pc, #36]	; (8001928 <microros_allocate+0x3c>)
 8001904:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001906:	4b09      	ldr	r3, [pc, #36]	; (800192c <microros_allocate+0x40>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	461a      	mov	r2, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4413      	add	r3, r2
 8001910:	461a      	mov	r2, r3
 8001912:	4b06      	ldr	r3, [pc, #24]	; (800192c <microros_allocate+0x40>)
 8001914:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f7fe fede 	bl	80006d8 <pvPortMallocMicroROS>
 800191c:	4603      	mov	r3, r0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	20006de4 	.word	0x20006de4
 800192c:	20006de8 	.word	0x20006de8

08001930 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d00c      	beq.n	800195a <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f7fe fff1 	bl	8000928 <getBlockSize>
 8001946:	4603      	mov	r3, r0
 8001948:	4a06      	ldr	r2, [pc, #24]	; (8001964 <microros_deallocate+0x34>)
 800194a:	6812      	ldr	r2, [r2, #0]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	461a      	mov	r2, r3
 8001950:	4b04      	ldr	r3, [pc, #16]	; (8001964 <microros_deallocate+0x34>)
 8001952:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f7fe ff89 	bl	800086c <vPortFreeMicroROS>
  }
}
 800195a:	bf00      	nop
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	20006de8 	.word	0x20006de8

08001968 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	60b9      	str	r1, [r7, #8]
 8001972:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001974:	4b15      	ldr	r3, [pc, #84]	; (80019cc <microros_reallocate+0x64>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	461a      	mov	r2, r3
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	4413      	add	r3, r2
 800197e:	461a      	mov	r2, r3
 8001980:	4b12      	ldr	r3, [pc, #72]	; (80019cc <microros_reallocate+0x64>)
 8001982:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001984:	4b12      	ldr	r3, [pc, #72]	; (80019d0 <microros_reallocate+0x68>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	461a      	mov	r2, r3
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	4413      	add	r3, r2
 800198e:	461a      	mov	r2, r3
 8001990:	4b0f      	ldr	r3, [pc, #60]	; (80019d0 <microros_reallocate+0x68>)
 8001992:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d104      	bne.n	80019a4 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 800199a:	68b8      	ldr	r0, [r7, #8]
 800199c:	f7fe fe9c 	bl	80006d8 <pvPortMallocMicroROS>
 80019a0:	4603      	mov	r3, r0
 80019a2:	e00e      	b.n	80019c2 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 80019a4:	68f8      	ldr	r0, [r7, #12]
 80019a6:	f7fe ffbf 	bl	8000928 <getBlockSize>
 80019aa:	4603      	mov	r3, r0
 80019ac:	4a08      	ldr	r2, [pc, #32]	; (80019d0 <microros_reallocate+0x68>)
 80019ae:	6812      	ldr	r2, [r2, #0]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	461a      	mov	r2, r3
 80019b4:	4b06      	ldr	r3, [pc, #24]	; (80019d0 <microros_reallocate+0x68>)
 80019b6:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 80019b8:	68b9      	ldr	r1, [r7, #8]
 80019ba:	68f8      	ldr	r0, [r7, #12]
 80019bc:	f7fe ffd2 	bl	8000964 <pvPortReallocMicroROS>
 80019c0:	4603      	mov	r3, r0
  }
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3710      	adds	r7, #16
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	20006de4 	.word	0x20006de4
 80019d0:	20006de8 	.word	0x20006de8

080019d4 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	68ba      	ldr	r2, [r7, #8]
 80019e4:	fb02 f303 	mul.w	r3, r2, r3
 80019e8:	4a0c      	ldr	r2, [pc, #48]	; (8001a1c <microros_zero_allocate+0x48>)
 80019ea:	6812      	ldr	r2, [r2, #0]
 80019ec:	4413      	add	r3, r2
 80019ee:	461a      	mov	r2, r3
 80019f0:	4b0a      	ldr	r3, [pc, #40]	; (8001a1c <microros_zero_allocate+0x48>)
 80019f2:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	68ba      	ldr	r2, [r7, #8]
 80019f8:	fb02 f303 	mul.w	r3, r2, r3
 80019fc:	4a08      	ldr	r2, [pc, #32]	; (8001a20 <microros_zero_allocate+0x4c>)
 80019fe:	6812      	ldr	r2, [r2, #0]
 8001a00:	4413      	add	r3, r2
 8001a02:	461a      	mov	r2, r3
 8001a04:	4b06      	ldr	r3, [pc, #24]	; (8001a20 <microros_zero_allocate+0x4c>)
 8001a06:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8001a08:	68b9      	ldr	r1, [r7, #8]
 8001a0a:	68f8      	ldr	r0, [r7, #12]
 8001a0c:	f7fe ffd7 	bl	80009be <pvPortCallocMicroROS>
 8001a10:	4603      	mov	r3, r0
 8001a12:	4618      	mov	r0, r3
 8001a14:	3710      	adds	r7, #16
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	20006de4 	.word	0x20006de4
 8001a20:	20006de8 	.word	0x20006de8
 8001a24:	00000000 	.word	0x00000000

08001a28 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001a28:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a2c:	b086      	sub	sp, #24
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001a34:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8001a36:	2300      	movs	r3, #0
 8001a38:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8001a3a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001a3e:	a320      	add	r3, pc, #128	; (adr r3, 8001ac0 <UTILS_NanosecondsToTimespec+0x98>)
 8001a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a44:	f7fe fc64 	bl	8000310 <__aeabi_ldivmod>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	6879      	ldr	r1, [r7, #4]
 8001a4e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8001a52:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001a56:	a31a      	add	r3, pc, #104	; (adr r3, 8001ac0 <UTILS_NanosecondsToTimespec+0x98>)
 8001a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a5c:	f7fe fc58 	bl	8000310 <__aeabi_ldivmod>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	da20      	bge.n	8001aae <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	4a11      	ldr	r2, [pc, #68]	; (8001ab8 <UTILS_NanosecondsToTimespec+0x90>)
 8001a72:	fb82 1203 	smull	r1, r2, r2, r3
 8001a76:	1712      	asrs	r2, r2, #28
 8001a78:	17db      	asrs	r3, r3, #31
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a86:	6979      	ldr	r1, [r7, #20]
 8001a88:	17c8      	asrs	r0, r1, #31
 8001a8a:	460c      	mov	r4, r1
 8001a8c:	4605      	mov	r5, r0
 8001a8e:	ebb2 0804 	subs.w	r8, r2, r4
 8001a92:	eb63 0905 	sbc.w	r9, r3, r5
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	689a      	ldr	r2, [r3, #8]
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	4906      	ldr	r1, [pc, #24]	; (8001abc <UTILS_NanosecondsToTimespec+0x94>)
 8001aa4:	fb01 f303 	mul.w	r3, r1, r3
 8001aa8:	441a      	add	r2, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	609a      	str	r2, [r3, #8]
    }
}
 8001aae:	bf00      	nop
 8001ab0:	3718      	adds	r7, #24
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001ab8:	44b82fa1 	.word	0x44b82fa1
 8001abc:	3b9aca00 	.word	0x3b9aca00
 8001ac0:	3b9aca00 	.word	0x3b9aca00
 8001ac4:	00000000 	.word	0x00000000

08001ac8 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8001ac8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001acc:	b08e      	sub	sp, #56	; 0x38
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6278      	str	r0, [r7, #36]	; 0x24
 8001ad2:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8001ad4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001ad8:	2300      	movs	r3, #0
 8001ada:	6013      	str	r3, [r2, #0]
 8001adc:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8001ade:	f04f 0200 	mov.w	r2, #0
 8001ae2:	f04f 0300 	mov.w	r3, #0
 8001ae6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8001aea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001aee:	4618      	mov	r0, r3
 8001af0:	f007 fadc 	bl	80090ac <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8001af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001af6:	17da      	asrs	r2, r3, #31
 8001af8:	61bb      	str	r3, [r7, #24]
 8001afa:	61fa      	str	r2, [r7, #28]
 8001afc:	f04f 0200 	mov.w	r2, #0
 8001b00:	f04f 0300 	mov.w	r3, #0
 8001b04:	69b9      	ldr	r1, [r7, #24]
 8001b06:	000b      	movs	r3, r1
 8001b08:	2200      	movs	r2, #0
 8001b0a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8001b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b10:	2200      	movs	r2, #0
 8001b12:	461c      	mov	r4, r3
 8001b14:	4615      	mov	r5, r2
 8001b16:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001b1a:	1911      	adds	r1, r2, r4
 8001b1c:	60b9      	str	r1, [r7, #8]
 8001b1e:	416b      	adcs	r3, r5
 8001b20:	60fb      	str	r3, [r7, #12]
 8001b22:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001b26:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8001b2a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001b2e:	4602      	mov	r2, r0
 8001b30:	460b      	mov	r3, r1
 8001b32:	f04f 0400 	mov.w	r4, #0
 8001b36:	f04f 0500 	mov.w	r5, #0
 8001b3a:	015d      	lsls	r5, r3, #5
 8001b3c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001b40:	0154      	lsls	r4, r2, #5
 8001b42:	4622      	mov	r2, r4
 8001b44:	462b      	mov	r3, r5
 8001b46:	ebb2 0800 	subs.w	r8, r2, r0
 8001b4a:	eb63 0901 	sbc.w	r9, r3, r1
 8001b4e:	f04f 0200 	mov.w	r2, #0
 8001b52:	f04f 0300 	mov.w	r3, #0
 8001b56:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001b5a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8001b5e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8001b62:	4690      	mov	r8, r2
 8001b64:	4699      	mov	r9, r3
 8001b66:	eb18 0a00 	adds.w	sl, r8, r0
 8001b6a:	eb49 0b01 	adc.w	fp, r9, r1
 8001b6e:	f04f 0200 	mov.w	r2, #0
 8001b72:	f04f 0300 	mov.w	r3, #0
 8001b76:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001b7a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001b7e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001b82:	ebb2 040a 	subs.w	r4, r2, sl
 8001b86:	603c      	str	r4, [r7, #0]
 8001b88:	eb63 030b 	sbc.w	r3, r3, fp
 8001b8c:	607b      	str	r3, [r7, #4]
 8001b8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b92:	4623      	mov	r3, r4
 8001b94:	181b      	adds	r3, r3, r0
 8001b96:	613b      	str	r3, [r7, #16]
 8001b98:	462b      	mov	r3, r5
 8001b9a:	eb41 0303 	adc.w	r3, r1, r3
 8001b9e:	617b      	str	r3, [r7, #20]
 8001ba0:	6a3a      	ldr	r2, [r7, #32]
 8001ba2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001ba6:	f7ff ff3f 	bl	8001a28 <UTILS_NanosecondsToTimespec>

    return 0;
 8001baa:	2300      	movs	r3, #0
 8001bac:	4618      	mov	r0, r3
 8001bae:	3738      	adds	r7, #56	; 0x38
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001bb8 <_Z41__static_initialization_and_destruction_0ii>:

GPIO_TypeDef* Port1A, Port2A, Port3A, Port4A, Port5A, Port6A;
GPIO_TypeDef* Port1B, Port2B, Port3B, Port4B, Port5B, Port6B;

uint16_t Pin1A, Pin2A, Pin3A, Pin4A, Pin5A, Pin6A;
uint16_t Pin1B, Pin2B, Pin3B, Pin4B, Pin5B, Pin6B;
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d137      	bne.n	8001c38 <_Z41__static_initialization_and_destruction_0ii+0x80>
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d132      	bne.n	8001c38 <_Z41__static_initialization_and_destruction_0ii+0x80>
PinControl INA1;
 8001bd2:	481b      	ldr	r0, [pc, #108]	; (8001c40 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8001bd4:	f7fe fd6a 	bl	80006ac <_ZN10PinControlC1Ev>
PinControl INA2, INA3, INA4, INA5, INA6;
 8001bd8:	481a      	ldr	r0, [pc, #104]	; (8001c44 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8001bda:	f7fe fd67 	bl	80006ac <_ZN10PinControlC1Ev>
 8001bde:	481a      	ldr	r0, [pc, #104]	; (8001c48 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8001be0:	f7fe fd64 	bl	80006ac <_ZN10PinControlC1Ev>
 8001be4:	4819      	ldr	r0, [pc, #100]	; (8001c4c <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8001be6:	f7fe fd61 	bl	80006ac <_ZN10PinControlC1Ev>
 8001bea:	4819      	ldr	r0, [pc, #100]	; (8001c50 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8001bec:	f7fe fd5e 	bl	80006ac <_ZN10PinControlC1Ev>
 8001bf0:	4818      	ldr	r0, [pc, #96]	; (8001c54 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8001bf2:	f7fe fd5b 	bl	80006ac <_ZN10PinControlC1Ev>
PinControl INB1, INB2, INB3, INB4, INB5, INB6;
 8001bf6:	4818      	ldr	r0, [pc, #96]	; (8001c58 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8001bf8:	f7fe fd58 	bl	80006ac <_ZN10PinControlC1Ev>
 8001bfc:	4817      	ldr	r0, [pc, #92]	; (8001c5c <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8001bfe:	f7fe fd55 	bl	80006ac <_ZN10PinControlC1Ev>
 8001c02:	4817      	ldr	r0, [pc, #92]	; (8001c60 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8001c04:	f7fe fd52 	bl	80006ac <_ZN10PinControlC1Ev>
 8001c08:	4816      	ldr	r0, [pc, #88]	; (8001c64 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8001c0a:	f7fe fd4f 	bl	80006ac <_ZN10PinControlC1Ev>
 8001c0e:	4816      	ldr	r0, [pc, #88]	; (8001c68 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8001c10:	f7fe fd4c 	bl	80006ac <_ZN10PinControlC1Ev>
 8001c14:	4815      	ldr	r0, [pc, #84]	; (8001c6c <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8001c16:	f7fe fd49 	bl	80006ac <_ZN10PinControlC1Ev>
PinMeasure END1, END2, END3, END4, END5;
 8001c1a:	4815      	ldr	r0, [pc, #84]	; (8001c70 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8001c1c:	f7fe fd51 	bl	80006c2 <_ZN10PinMeasureC1Ev>
 8001c20:	4814      	ldr	r0, [pc, #80]	; (8001c74 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8001c22:	f7fe fd4e 	bl	80006c2 <_ZN10PinMeasureC1Ev>
 8001c26:	4814      	ldr	r0, [pc, #80]	; (8001c78 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8001c28:	f7fe fd4b 	bl	80006c2 <_ZN10PinMeasureC1Ev>
 8001c2c:	4813      	ldr	r0, [pc, #76]	; (8001c7c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8001c2e:	f7fe fd48 	bl	80006c2 <_ZN10PinMeasureC1Ev>
 8001c32:	4813      	ldr	r0, [pc, #76]	; (8001c80 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8001c34:	f7fe fd45 	bl	80006c2 <_ZN10PinMeasureC1Ev>
uint16_t Pin1B, Pin2B, Pin3B, Pin4B, Pin5B, Pin6B;
 8001c38:	bf00      	nop
 8001c3a:	3708      	adds	r7, #8
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	20006dec 	.word	0x20006dec
 8001c44:	20006dfc 	.word	0x20006dfc
 8001c48:	20006e0c 	.word	0x20006e0c
 8001c4c:	20006e1c 	.word	0x20006e1c
 8001c50:	20006e2c 	.word	0x20006e2c
 8001c54:	20006e3c 	.word	0x20006e3c
 8001c58:	20006e4c 	.word	0x20006e4c
 8001c5c:	20006e5c 	.word	0x20006e5c
 8001c60:	20006e6c 	.word	0x20006e6c
 8001c64:	20006e7c 	.word	0x20006e7c
 8001c68:	20006e8c 	.word	0x20006e8c
 8001c6c:	20006e9c 	.word	0x20006e9c
 8001c70:	20006eac 	.word	0x20006eac
 8001c74:	20006ebc 	.word	0x20006ebc
 8001c78:	20006ecc 	.word	0x20006ecc
 8001c7c:	20006edc 	.word	0x20006edc
 8001c80:	20006eec 	.word	0x20006eec

08001c84 <_GLOBAL__sub_I_INA1>:
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001c8c:	2001      	movs	r0, #1
 8001c8e:	f7ff ff93 	bl	8001bb8 <_Z41__static_initialization_and_destruction_0ii>
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001c9a:	4b11      	ldr	r3, [pc, #68]	; (8001ce0 <HAL_MspInit+0x4c>)
 8001c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9e:	4a10      	ldr	r2, [pc, #64]	; (8001ce0 <HAL_MspInit+0x4c>)
 8001ca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ca4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ca6:	4b0e      	ldr	r3, [pc, #56]	; (8001ce0 <HAL_MspInit+0x4c>)
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cae:	607b      	str	r3, [r7, #4]
 8001cb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cb2:	4b0b      	ldr	r3, [pc, #44]	; (8001ce0 <HAL_MspInit+0x4c>)
 8001cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb6:	4a0a      	ldr	r2, [pc, #40]	; (8001ce0 <HAL_MspInit+0x4c>)
 8001cb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cbc:	6453      	str	r3, [r2, #68]	; 0x44
 8001cbe:	4b08      	ldr	r3, [pc, #32]	; (8001ce0 <HAL_MspInit+0x4c>)
 8001cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cc6:	603b      	str	r3, [r7, #0]
 8001cc8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001cca:	2200      	movs	r2, #0
 8001ccc:	210f      	movs	r1, #15
 8001cce:	f06f 0001 	mvn.w	r0, #1
 8001cd2:	f000 fde3 	bl	800289c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cd6:	bf00      	nop
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	40023800 	.word	0x40023800

08001ce4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b085      	sub	sp, #20
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a13      	ldr	r2, [pc, #76]	; (8001d40 <HAL_TIM_PWM_MspInit+0x5c>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d10c      	bne.n	8001d10 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001cf6:	4b13      	ldr	r3, [pc, #76]	; (8001d44 <HAL_TIM_PWM_MspInit+0x60>)
 8001cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfa:	4a12      	ldr	r2, [pc, #72]	; (8001d44 <HAL_TIM_PWM_MspInit+0x60>)
 8001cfc:	f043 0301 	orr.w	r3, r3, #1
 8001d00:	6453      	str	r3, [r2, #68]	; 0x44
 8001d02:	4b10      	ldr	r3, [pc, #64]	; (8001d44 <HAL_TIM_PWM_MspInit+0x60>)
 8001d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	60fb      	str	r3, [r7, #12]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8001d0e:	e010      	b.n	8001d32 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM9)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a0c      	ldr	r2, [pc, #48]	; (8001d48 <HAL_TIM_PWM_MspInit+0x64>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d10b      	bne.n	8001d32 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001d1a:	4b0a      	ldr	r3, [pc, #40]	; (8001d44 <HAL_TIM_PWM_MspInit+0x60>)
 8001d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d1e:	4a09      	ldr	r2, [pc, #36]	; (8001d44 <HAL_TIM_PWM_MspInit+0x60>)
 8001d20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d24:	6453      	str	r3, [r2, #68]	; 0x44
 8001d26:	4b07      	ldr	r3, [pc, #28]	; (8001d44 <HAL_TIM_PWM_MspInit+0x60>)
 8001d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d2e:	60bb      	str	r3, [r7, #8]
 8001d30:	68bb      	ldr	r3, [r7, #8]
}
 8001d32:	bf00      	nop
 8001d34:	3714      	adds	r7, #20
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	40010000 	.word	0x40010000
 8001d44:	40023800 	.word	0x40023800
 8001d48:	40014000 	.word	0x40014000

08001d4c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b094      	sub	sp, #80	; 0x50
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d54:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	605a      	str	r2, [r3, #4]
 8001d5e:	609a      	str	r2, [r3, #8]
 8001d60:	60da      	str	r2, [r3, #12]
 8001d62:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d6c:	d144      	bne.n	8001df8 <HAL_TIM_Encoder_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d6e:	4b8e      	ldr	r3, [pc, #568]	; (8001fa8 <HAL_TIM_Encoder_MspInit+0x25c>)
 8001d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d72:	4a8d      	ldr	r2, [pc, #564]	; (8001fa8 <HAL_TIM_Encoder_MspInit+0x25c>)
 8001d74:	f043 0301 	orr.w	r3, r3, #1
 8001d78:	6413      	str	r3, [r2, #64]	; 0x40
 8001d7a:	4b8b      	ldr	r3, [pc, #556]	; (8001fa8 <HAL_TIM_Encoder_MspInit+0x25c>)
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	63bb      	str	r3, [r7, #56]	; 0x38
 8001d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d86:	4b88      	ldr	r3, [pc, #544]	; (8001fa8 <HAL_TIM_Encoder_MspInit+0x25c>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8a:	4a87      	ldr	r2, [pc, #540]	; (8001fa8 <HAL_TIM_Encoder_MspInit+0x25c>)
 8001d8c:	f043 0301 	orr.w	r3, r3, #1
 8001d90:	6313      	str	r3, [r2, #48]	; 0x30
 8001d92:	4b85      	ldr	r3, [pc, #532]	; (8001fa8 <HAL_TIM_Encoder_MspInit+0x25c>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	637b      	str	r3, [r7, #52]	; 0x34
 8001d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d9e:	4b82      	ldr	r3, [pc, #520]	; (8001fa8 <HAL_TIM_Encoder_MspInit+0x25c>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	4a81      	ldr	r2, [pc, #516]	; (8001fa8 <HAL_TIM_Encoder_MspInit+0x25c>)
 8001da4:	f043 0302 	orr.w	r3, r3, #2
 8001da8:	6313      	str	r3, [r2, #48]	; 0x30
 8001daa:	4b7f      	ldr	r3, [pc, #508]	; (8001fa8 <HAL_TIM_Encoder_MspInit+0x25c>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	633b      	str	r3, [r7, #48]	; 0x30
 8001db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001db6:	2320      	movs	r3, #32
 8001db8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dba:	2302      	movs	r3, #2
 8001dbc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001dce:	4619      	mov	r1, r3
 8001dd0:	4876      	ldr	r0, [pc, #472]	; (8001fac <HAL_TIM_Encoder_MspInit+0x260>)
 8001dd2:	f001 f9a3 	bl	800311c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001dd6:	2308      	movs	r3, #8
 8001dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dda:	2302      	movs	r3, #2
 8001ddc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dde:	2300      	movs	r3, #0
 8001de0:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de2:	2300      	movs	r3, #0
 8001de4:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001de6:	2301      	movs	r3, #1
 8001de8:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dea:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001dee:	4619      	mov	r1, r3
 8001df0:	486f      	ldr	r0, [pc, #444]	; (8001fb0 <HAL_TIM_Encoder_MspInit+0x264>)
 8001df2:	f001 f993 	bl	800311c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001df6:	e0d3      	b.n	8001fa0 <HAL_TIM_Encoder_MspInit+0x254>
  else if(htim_encoder->Instance==TIM3)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a6d      	ldr	r2, [pc, #436]	; (8001fb4 <HAL_TIM_Encoder_MspInit+0x268>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d144      	bne.n	8001e8c <HAL_TIM_Encoder_MspInit+0x140>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e02:	4b69      	ldr	r3, [pc, #420]	; (8001fa8 <HAL_TIM_Encoder_MspInit+0x25c>)
 8001e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e06:	4a68      	ldr	r2, [pc, #416]	; (8001fa8 <HAL_TIM_Encoder_MspInit+0x25c>)
 8001e08:	f043 0302 	orr.w	r3, r3, #2
 8001e0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e0e:	4b66      	ldr	r3, [pc, #408]	; (8001fa8 <HAL_TIM_Encoder_MspInit+0x25c>)
 8001e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e1a:	4b63      	ldr	r3, [pc, #396]	; (8001fa8 <HAL_TIM_Encoder_MspInit+0x25c>)
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1e:	4a62      	ldr	r2, [pc, #392]	; (8001fa8 <HAL_TIM_Encoder_MspInit+0x25c>)
 8001e20:	f043 0301 	orr.w	r3, r3, #1
 8001e24:	6313      	str	r3, [r2, #48]	; 0x30
 8001e26:	4b60      	ldr	r3, [pc, #384]	; (8001fa8 <HAL_TIM_Encoder_MspInit+0x25c>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e32:	4b5d      	ldr	r3, [pc, #372]	; (8001fa8 <HAL_TIM_Encoder_MspInit+0x25c>)
 8001e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e36:	4a5c      	ldr	r2, [pc, #368]	; (8001fa8 <HAL_TIM_Encoder_MspInit+0x25c>)
 8001e38:	f043 0302 	orr.w	r3, r3, #2
 8001e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e3e:	4b5a      	ldr	r3, [pc, #360]	; (8001fa8 <HAL_TIM_Encoder_MspInit+0x25c>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	627b      	str	r3, [r7, #36]	; 0x24
 8001e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001e4a:	2340      	movs	r3, #64	; 0x40
 8001e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e4e:	2302      	movs	r3, #2
 8001e50:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e52:	2300      	movs	r3, #0
 8001e54:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e56:	2300      	movs	r3, #0
 8001e58:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e5e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001e62:	4619      	mov	r1, r3
 8001e64:	4851      	ldr	r0, [pc, #324]	; (8001fac <HAL_TIM_Encoder_MspInit+0x260>)
 8001e66:	f001 f959 	bl	800311c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001e6a:	2320      	movs	r3, #32
 8001e6c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e6e:	2302      	movs	r3, #2
 8001e70:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e72:	2300      	movs	r3, #0
 8001e74:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e76:	2300      	movs	r3, #0
 8001e78:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e7e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001e82:	4619      	mov	r1, r3
 8001e84:	484a      	ldr	r0, [pc, #296]	; (8001fb0 <HAL_TIM_Encoder_MspInit+0x264>)
 8001e86:	f001 f949 	bl	800311c <HAL_GPIO_Init>
}
 8001e8a:	e089      	b.n	8001fa0 <HAL_TIM_Encoder_MspInit+0x254>
  else if(htim_encoder->Instance==TIM4)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a49      	ldr	r2, [pc, #292]	; (8001fb8 <HAL_TIM_Encoder_MspInit+0x26c>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d129      	bne.n	8001eea <HAL_TIM_Encoder_MspInit+0x19e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001e96:	4b44      	ldr	r3, [pc, #272]	; (8001fa8 <HAL_TIM_Encoder_MspInit+0x25c>)
 8001e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9a:	4a43      	ldr	r2, [pc, #268]	; (8001fa8 <HAL_TIM_Encoder_MspInit+0x25c>)
 8001e9c:	f043 0304 	orr.w	r3, r3, #4
 8001ea0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ea2:	4b41      	ldr	r3, [pc, #260]	; (8001fa8 <HAL_TIM_Encoder_MspInit+0x25c>)
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea6:	f003 0304 	and.w	r3, r3, #4
 8001eaa:	623b      	str	r3, [r7, #32]
 8001eac:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001eae:	4b3e      	ldr	r3, [pc, #248]	; (8001fa8 <HAL_TIM_Encoder_MspInit+0x25c>)
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb2:	4a3d      	ldr	r2, [pc, #244]	; (8001fa8 <HAL_TIM_Encoder_MspInit+0x25c>)
 8001eb4:	f043 0308 	orr.w	r3, r3, #8
 8001eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eba:	4b3b      	ldr	r3, [pc, #236]	; (8001fa8 <HAL_TIM_Encoder_MspInit+0x25c>)
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ebe:	f003 0308 	and.w	r3, r3, #8
 8001ec2:	61fb      	str	r3, [r7, #28]
 8001ec4:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001ec6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001eca:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ecc:	2302      	movs	r3, #2
 8001ece:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001ed8:	2302      	movs	r3, #2
 8001eda:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001edc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	4836      	ldr	r0, [pc, #216]	; (8001fbc <HAL_TIM_Encoder_MspInit+0x270>)
 8001ee4:	f001 f91a 	bl	800311c <HAL_GPIO_Init>
}
 8001ee8:	e05a      	b.n	8001fa0 <HAL_TIM_Encoder_MspInit+0x254>
  else if(htim_encoder->Instance==TIM5)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a34      	ldr	r2, [pc, #208]	; (8001fc0 <HAL_TIM_Encoder_MspInit+0x274>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d128      	bne.n	8001f46 <HAL_TIM_Encoder_MspInit+0x1fa>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001ef4:	4b2c      	ldr	r3, [pc, #176]	; (8001fa8 <HAL_TIM_Encoder_MspInit+0x25c>)
 8001ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef8:	4a2b      	ldr	r2, [pc, #172]	; (8001fa8 <HAL_TIM_Encoder_MspInit+0x25c>)
 8001efa:	f043 0308 	orr.w	r3, r3, #8
 8001efe:	6413      	str	r3, [r2, #64]	; 0x40
 8001f00:	4b29      	ldr	r3, [pc, #164]	; (8001fa8 <HAL_TIM_Encoder_MspInit+0x25c>)
 8001f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f04:	f003 0308 	and.w	r3, r3, #8
 8001f08:	61bb      	str	r3, [r7, #24]
 8001f0a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f0c:	4b26      	ldr	r3, [pc, #152]	; (8001fa8 <HAL_TIM_Encoder_MspInit+0x25c>)
 8001f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f10:	4a25      	ldr	r2, [pc, #148]	; (8001fa8 <HAL_TIM_Encoder_MspInit+0x25c>)
 8001f12:	f043 0301 	orr.w	r3, r3, #1
 8001f16:	6313      	str	r3, [r2, #48]	; 0x30
 8001f18:	4b23      	ldr	r3, [pc, #140]	; (8001fa8 <HAL_TIM_Encoder_MspInit+0x25c>)
 8001f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1c:	f003 0301 	and.w	r3, r3, #1
 8001f20:	617b      	str	r3, [r7, #20]
 8001f22:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001f24:	2303      	movs	r3, #3
 8001f26:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f28:	2302      	movs	r3, #2
 8001f2a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f30:	2300      	movs	r3, #0
 8001f32:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001f34:	2302      	movs	r3, #2
 8001f36:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f38:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	481b      	ldr	r0, [pc, #108]	; (8001fac <HAL_TIM_Encoder_MspInit+0x260>)
 8001f40:	f001 f8ec 	bl	800311c <HAL_GPIO_Init>
}
 8001f44:	e02c      	b.n	8001fa0 <HAL_TIM_Encoder_MspInit+0x254>
  else if(htim_encoder->Instance==TIM8)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a1e      	ldr	r2, [pc, #120]	; (8001fc4 <HAL_TIM_Encoder_MspInit+0x278>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d127      	bne.n	8001fa0 <HAL_TIM_Encoder_MspInit+0x254>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001f50:	4b15      	ldr	r3, [pc, #84]	; (8001fa8 <HAL_TIM_Encoder_MspInit+0x25c>)
 8001f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f54:	4a14      	ldr	r2, [pc, #80]	; (8001fa8 <HAL_TIM_Encoder_MspInit+0x25c>)
 8001f56:	f043 0302 	orr.w	r3, r3, #2
 8001f5a:	6453      	str	r3, [r2, #68]	; 0x44
 8001f5c:	4b12      	ldr	r3, [pc, #72]	; (8001fa8 <HAL_TIM_Encoder_MspInit+0x25c>)
 8001f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f60:	f003 0302 	and.w	r3, r3, #2
 8001f64:	613b      	str	r3, [r7, #16]
 8001f66:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f68:	4b0f      	ldr	r3, [pc, #60]	; (8001fa8 <HAL_TIM_Encoder_MspInit+0x25c>)
 8001f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6c:	4a0e      	ldr	r2, [pc, #56]	; (8001fa8 <HAL_TIM_Encoder_MspInit+0x25c>)
 8001f6e:	f043 0304 	orr.w	r3, r3, #4
 8001f72:	6313      	str	r3, [r2, #48]	; 0x30
 8001f74:	4b0c      	ldr	r3, [pc, #48]	; (8001fa8 <HAL_TIM_Encoder_MspInit+0x25c>)
 8001f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f78:	f003 0304 	and.w	r3, r3, #4
 8001f7c:	60fb      	str	r3, [r7, #12]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f80:	23c0      	movs	r3, #192	; 0xc0
 8001f82:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f84:	2302      	movs	r3, #2
 8001f86:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001f90:	2303      	movs	r3, #3
 8001f92:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f94:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001f98:	4619      	mov	r1, r3
 8001f9a:	480b      	ldr	r0, [pc, #44]	; (8001fc8 <HAL_TIM_Encoder_MspInit+0x27c>)
 8001f9c:	f001 f8be 	bl	800311c <HAL_GPIO_Init>
}
 8001fa0:	bf00      	nop
 8001fa2:	3750      	adds	r7, #80	; 0x50
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	40023800 	.word	0x40023800
 8001fac:	40020000 	.word	0x40020000
 8001fb0:	40020400 	.word	0x40020400
 8001fb4:	40000400 	.word	0x40000400
 8001fb8:	40000800 	.word	0x40000800
 8001fbc:	40020c00 	.word	0x40020c00
 8001fc0:	40000c00 	.word	0x40000c00
 8001fc4:	40010400 	.word	0x40010400
 8001fc8:	40020800 	.word	0x40020800

08001fcc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b08a      	sub	sp, #40	; 0x28
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd4:	f107 0314 	add.w	r3, r7, #20
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]
 8001fdc:	605a      	str	r2, [r3, #4]
 8001fde:	609a      	str	r2, [r3, #8]
 8001fe0:	60da      	str	r2, [r3, #12]
 8001fe2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a22      	ldr	r2, [pc, #136]	; (8002074 <HAL_TIM_MspPostInit+0xa8>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d11d      	bne.n	800202a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fee:	4b22      	ldr	r3, [pc, #136]	; (8002078 <HAL_TIM_MspPostInit+0xac>)
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff2:	4a21      	ldr	r2, [pc, #132]	; (8002078 <HAL_TIM_MspPostInit+0xac>)
 8001ff4:	f043 0310 	orr.w	r3, r3, #16
 8001ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8001ffa:	4b1f      	ldr	r3, [pc, #124]	; (8002078 <HAL_TIM_MspPostInit+0xac>)
 8001ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffe:	f003 0310 	and.w	r3, r3, #16
 8002002:	613b      	str	r3, [r7, #16]
 8002004:	693b      	ldr	r3, [r7, #16]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8002006:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 800200a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800200c:	2302      	movs	r3, #2
 800200e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002010:	2300      	movs	r3, #0
 8002012:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002014:	2300      	movs	r3, #0
 8002016:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002018:	2301      	movs	r3, #1
 800201a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800201c:	f107 0314 	add.w	r3, r7, #20
 8002020:	4619      	mov	r1, r3
 8002022:	4816      	ldr	r0, [pc, #88]	; (800207c <HAL_TIM_MspPostInit+0xb0>)
 8002024:	f001 f87a 	bl	800311c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8002028:	e020      	b.n	800206c <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM9)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a14      	ldr	r2, [pc, #80]	; (8002080 <HAL_TIM_MspPostInit+0xb4>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d11b      	bne.n	800206c <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002034:	4b10      	ldr	r3, [pc, #64]	; (8002078 <HAL_TIM_MspPostInit+0xac>)
 8002036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002038:	4a0f      	ldr	r2, [pc, #60]	; (8002078 <HAL_TIM_MspPostInit+0xac>)
 800203a:	f043 0310 	orr.w	r3, r3, #16
 800203e:	6313      	str	r3, [r2, #48]	; 0x30
 8002040:	4b0d      	ldr	r3, [pc, #52]	; (8002078 <HAL_TIM_MspPostInit+0xac>)
 8002042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002044:	f003 0310 	and.w	r3, r3, #16
 8002048:	60fb      	str	r3, [r7, #12]
 800204a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800204c:	2360      	movs	r3, #96	; 0x60
 800204e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002050:	2302      	movs	r3, #2
 8002052:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002054:	2300      	movs	r3, #0
 8002056:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002058:	2300      	movs	r3, #0
 800205a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800205c:	2303      	movs	r3, #3
 800205e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002060:	f107 0314 	add.w	r3, r7, #20
 8002064:	4619      	mov	r1, r3
 8002066:	4805      	ldr	r0, [pc, #20]	; (800207c <HAL_TIM_MspPostInit+0xb0>)
 8002068:	f001 f858 	bl	800311c <HAL_GPIO_Init>
}
 800206c:	bf00      	nop
 800206e:	3728      	adds	r7, #40	; 0x28
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	40010000 	.word	0x40010000
 8002078:	40023800 	.word	0x40023800
 800207c:	40021000 	.word	0x40021000
 8002080:	40014000 	.word	0x40014000

08002084 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b0ae      	sub	sp, #184	; 0xb8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800208c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	605a      	str	r2, [r3, #4]
 8002096:	609a      	str	r2, [r3, #8]
 8002098:	60da      	str	r2, [r3, #12]
 800209a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800209c:	f107 0314 	add.w	r3, r7, #20
 80020a0:	2290      	movs	r2, #144	; 0x90
 80020a2:	2100      	movs	r1, #0
 80020a4:	4618      	mov	r0, r3
 80020a6:	f017 faad 	bl	8019604 <memset>
  if(huart->Instance==USART3)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a56      	ldr	r2, [pc, #344]	; (8002208 <HAL_UART_MspInit+0x184>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	f040 80a4 	bne.w	80021fe <HAL_UART_MspInit+0x17a>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80020b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020ba:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80020bc:	2300      	movs	r3, #0
 80020be:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020c0:	f107 0314 	add.w	r3, r7, #20
 80020c4:	4618      	mov	r0, r3
 80020c6:	f002 f89d 	bl	8004204 <HAL_RCCEx_PeriphCLKConfig>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80020d0:	f7ff fc06 	bl	80018e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80020d4:	4b4d      	ldr	r3, [pc, #308]	; (800220c <HAL_UART_MspInit+0x188>)
 80020d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d8:	4a4c      	ldr	r2, [pc, #304]	; (800220c <HAL_UART_MspInit+0x188>)
 80020da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020de:	6413      	str	r3, [r2, #64]	; 0x40
 80020e0:	4b4a      	ldr	r3, [pc, #296]	; (800220c <HAL_UART_MspInit+0x188>)
 80020e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020e8:	613b      	str	r3, [r7, #16]
 80020ea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020ec:	4b47      	ldr	r3, [pc, #284]	; (800220c <HAL_UART_MspInit+0x188>)
 80020ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f0:	4a46      	ldr	r2, [pc, #280]	; (800220c <HAL_UART_MspInit+0x188>)
 80020f2:	f043 0308 	orr.w	r3, r3, #8
 80020f6:	6313      	str	r3, [r2, #48]	; 0x30
 80020f8:	4b44      	ldr	r3, [pc, #272]	; (800220c <HAL_UART_MspInit+0x188>)
 80020fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fc:	f003 0308 	and.w	r3, r3, #8
 8002100:	60fb      	str	r3, [r7, #12]
 8002102:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002104:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002108:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210c:	2302      	movs	r3, #2
 800210e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002112:	2300      	movs	r3, #0
 8002114:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002118:	2303      	movs	r3, #3
 800211a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800211e:	2307      	movs	r3, #7
 8002120:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002124:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002128:	4619      	mov	r1, r3
 800212a:	4839      	ldr	r0, [pc, #228]	; (8002210 <HAL_UART_MspInit+0x18c>)
 800212c:	f000 fff6 	bl	800311c <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8002130:	4b38      	ldr	r3, [pc, #224]	; (8002214 <HAL_UART_MspInit+0x190>)
 8002132:	4a39      	ldr	r2, [pc, #228]	; (8002218 <HAL_UART_MspInit+0x194>)
 8002134:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8002136:	4b37      	ldr	r3, [pc, #220]	; (8002214 <HAL_UART_MspInit+0x190>)
 8002138:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800213c:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800213e:	4b35      	ldr	r3, [pc, #212]	; (8002214 <HAL_UART_MspInit+0x190>)
 8002140:	2240      	movs	r2, #64	; 0x40
 8002142:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002144:	4b33      	ldr	r3, [pc, #204]	; (8002214 <HAL_UART_MspInit+0x190>)
 8002146:	2200      	movs	r2, #0
 8002148:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800214a:	4b32      	ldr	r3, [pc, #200]	; (8002214 <HAL_UART_MspInit+0x190>)
 800214c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002150:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002152:	4b30      	ldr	r3, [pc, #192]	; (8002214 <HAL_UART_MspInit+0x190>)
 8002154:	2200      	movs	r2, #0
 8002156:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002158:	4b2e      	ldr	r3, [pc, #184]	; (8002214 <HAL_UART_MspInit+0x190>)
 800215a:	2200      	movs	r2, #0
 800215c:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800215e:	4b2d      	ldr	r3, [pc, #180]	; (8002214 <HAL_UART_MspInit+0x190>)
 8002160:	2200      	movs	r2, #0
 8002162:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002164:	4b2b      	ldr	r3, [pc, #172]	; (8002214 <HAL_UART_MspInit+0x190>)
 8002166:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800216a:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800216c:	4b29      	ldr	r3, [pc, #164]	; (8002214 <HAL_UART_MspInit+0x190>)
 800216e:	2200      	movs	r2, #0
 8002170:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002172:	4828      	ldr	r0, [pc, #160]	; (8002214 <HAL_UART_MspInit+0x190>)
 8002174:	f000 fbbc 	bl	80028f0 <HAL_DMA_Init>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <HAL_UART_MspInit+0xfe>
    {
      Error_Handler();
 800217e:	f7ff fbaf 	bl	80018e0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a23      	ldr	r2, [pc, #140]	; (8002214 <HAL_UART_MspInit+0x190>)
 8002186:	671a      	str	r2, [r3, #112]	; 0x70
 8002188:	4a22      	ldr	r2, [pc, #136]	; (8002214 <HAL_UART_MspInit+0x190>)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800218e:	4b23      	ldr	r3, [pc, #140]	; (800221c <HAL_UART_MspInit+0x198>)
 8002190:	4a23      	ldr	r2, [pc, #140]	; (8002220 <HAL_UART_MspInit+0x19c>)
 8002192:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8002194:	4b21      	ldr	r3, [pc, #132]	; (800221c <HAL_UART_MspInit+0x198>)
 8002196:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800219a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800219c:	4b1f      	ldr	r3, [pc, #124]	; (800221c <HAL_UART_MspInit+0x198>)
 800219e:	2200      	movs	r2, #0
 80021a0:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021a2:	4b1e      	ldr	r3, [pc, #120]	; (800221c <HAL_UART_MspInit+0x198>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80021a8:	4b1c      	ldr	r3, [pc, #112]	; (800221c <HAL_UART_MspInit+0x198>)
 80021aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021ae:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021b0:	4b1a      	ldr	r3, [pc, #104]	; (800221c <HAL_UART_MspInit+0x198>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021b6:	4b19      	ldr	r3, [pc, #100]	; (800221c <HAL_UART_MspInit+0x198>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80021bc:	4b17      	ldr	r3, [pc, #92]	; (800221c <HAL_UART_MspInit+0x198>)
 80021be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021c2:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80021c4:	4b15      	ldr	r3, [pc, #84]	; (800221c <HAL_UART_MspInit+0x198>)
 80021c6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80021ca:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021cc:	4b13      	ldr	r3, [pc, #76]	; (800221c <HAL_UART_MspInit+0x198>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80021d2:	4812      	ldr	r0, [pc, #72]	; (800221c <HAL_UART_MspInit+0x198>)
 80021d4:	f000 fb8c 	bl	80028f0 <HAL_DMA_Init>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <HAL_UART_MspInit+0x15e>
    {
      Error_Handler();
 80021de:	f7ff fb7f 	bl	80018e0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a0d      	ldr	r2, [pc, #52]	; (800221c <HAL_UART_MspInit+0x198>)
 80021e6:	675a      	str	r2, [r3, #116]	; 0x74
 80021e8:	4a0c      	ldr	r2, [pc, #48]	; (800221c <HAL_UART_MspInit+0x198>)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80021ee:	2200      	movs	r2, #0
 80021f0:	2105      	movs	r1, #5
 80021f2:	2027      	movs	r0, #39	; 0x27
 80021f4:	f000 fb52 	bl	800289c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80021f8:	2027      	movs	r0, #39	; 0x27
 80021fa:	f000 fb6b 	bl	80028d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80021fe:	bf00      	nop
 8002200:	37b8      	adds	r7, #184	; 0xb8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	40004800 	.word	0x40004800
 800220c:	40023800 	.word	0x40023800
 8002210:	40020c00 	.word	0x40020c00
 8002214:	20006818 	.word	0x20006818
 8002218:	40026058 	.word	0x40026058
 800221c:	20006878 	.word	0x20006878
 8002220:	40026028 	.word	0x40026028

08002224 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b0ae      	sub	sp, #184	; 0xb8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800222c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002230:	2200      	movs	r2, #0
 8002232:	601a      	str	r2, [r3, #0]
 8002234:	605a      	str	r2, [r3, #4]
 8002236:	609a      	str	r2, [r3, #8]
 8002238:	60da      	str	r2, [r3, #12]
 800223a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800223c:	f107 0314 	add.w	r3, r7, #20
 8002240:	2290      	movs	r2, #144	; 0x90
 8002242:	2100      	movs	r1, #0
 8002244:	4618      	mov	r0, r3
 8002246:	f017 f9dd 	bl	8019604 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002252:	d159      	bne.n	8002308 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002254:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002258:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800225a:	2300      	movs	r3, #0
 800225c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002260:	f107 0314 	add.w	r3, r7, #20
 8002264:	4618      	mov	r0, r3
 8002266:	f001 ffcd 	bl	8004204 <HAL_RCCEx_PeriphCLKConfig>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8002270:	f7ff fb36 	bl	80018e0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002274:	4b26      	ldr	r3, [pc, #152]	; (8002310 <HAL_PCD_MspInit+0xec>)
 8002276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002278:	4a25      	ldr	r2, [pc, #148]	; (8002310 <HAL_PCD_MspInit+0xec>)
 800227a:	f043 0301 	orr.w	r3, r3, #1
 800227e:	6313      	str	r3, [r2, #48]	; 0x30
 8002280:	4b23      	ldr	r3, [pc, #140]	; (8002310 <HAL_PCD_MspInit+0xec>)
 8002282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002284:	f003 0301 	and.w	r3, r3, #1
 8002288:	613b      	str	r3, [r7, #16]
 800228a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800228c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002290:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002294:	2302      	movs	r3, #2
 8002296:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229a:	2300      	movs	r3, #0
 800229c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022a0:	2303      	movs	r3, #3
 80022a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80022a6:	230a      	movs	r3, #10
 80022a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022ac:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80022b0:	4619      	mov	r1, r3
 80022b2:	4818      	ldr	r0, [pc, #96]	; (8002314 <HAL_PCD_MspInit+0xf0>)
 80022b4:	f000 ff32 	bl	800311c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80022b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022c0:	2300      	movs	r3, #0
 80022c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c6:	2300      	movs	r3, #0
 80022c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80022cc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80022d0:	4619      	mov	r1, r3
 80022d2:	4810      	ldr	r0, [pc, #64]	; (8002314 <HAL_PCD_MspInit+0xf0>)
 80022d4:	f000 ff22 	bl	800311c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80022d8:	4b0d      	ldr	r3, [pc, #52]	; (8002310 <HAL_PCD_MspInit+0xec>)
 80022da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022dc:	4a0c      	ldr	r2, [pc, #48]	; (8002310 <HAL_PCD_MspInit+0xec>)
 80022de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022e2:	6353      	str	r3, [r2, #52]	; 0x34
 80022e4:	4b0a      	ldr	r3, [pc, #40]	; (8002310 <HAL_PCD_MspInit+0xec>)
 80022e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022ec:	60fb      	str	r3, [r7, #12]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	4b07      	ldr	r3, [pc, #28]	; (8002310 <HAL_PCD_MspInit+0xec>)
 80022f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f4:	4a06      	ldr	r2, [pc, #24]	; (8002310 <HAL_PCD_MspInit+0xec>)
 80022f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022fa:	6453      	str	r3, [r2, #68]	; 0x44
 80022fc:	4b04      	ldr	r3, [pc, #16]	; (8002310 <HAL_PCD_MspInit+0xec>)
 80022fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002300:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002304:	60bb      	str	r3, [r7, #8]
 8002306:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002308:	bf00      	nop
 800230a:	37b8      	adds	r7, #184	; 0xb8
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	40023800 	.word	0x40023800
 8002314:	40020000 	.word	0x40020000

08002318 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b08e      	sub	sp, #56	; 0x38
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002320:	2300      	movs	r3, #0
 8002322:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002324:	2300      	movs	r3, #0
 8002326:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002328:	4b33      	ldr	r3, [pc, #204]	; (80023f8 <HAL_InitTick+0xe0>)
 800232a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232c:	4a32      	ldr	r2, [pc, #200]	; (80023f8 <HAL_InitTick+0xe0>)
 800232e:	f043 0310 	orr.w	r3, r3, #16
 8002332:	6413      	str	r3, [r2, #64]	; 0x40
 8002334:	4b30      	ldr	r3, [pc, #192]	; (80023f8 <HAL_InitTick+0xe0>)
 8002336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002338:	f003 0310 	and.w	r3, r3, #16
 800233c:	60fb      	str	r3, [r7, #12]
 800233e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002340:	f107 0210 	add.w	r2, r7, #16
 8002344:	f107 0314 	add.w	r3, r7, #20
 8002348:	4611      	mov	r1, r2
 800234a:	4618      	mov	r0, r3
 800234c:	f001 ff28 	bl	80041a0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002350:	6a3b      	ldr	r3, [r7, #32]
 8002352:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002356:	2b00      	cmp	r3, #0
 8002358:	d103      	bne.n	8002362 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800235a:	f001 fef9 	bl	8004150 <HAL_RCC_GetPCLK1Freq>
 800235e:	6378      	str	r0, [r7, #52]	; 0x34
 8002360:	e004      	b.n	800236c <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002362:	f001 fef5 	bl	8004150 <HAL_RCC_GetPCLK1Freq>
 8002366:	4603      	mov	r3, r0
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800236c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800236e:	4a23      	ldr	r2, [pc, #140]	; (80023fc <HAL_InitTick+0xe4>)
 8002370:	fba2 2303 	umull	r2, r3, r2, r3
 8002374:	0c9b      	lsrs	r3, r3, #18
 8002376:	3b01      	subs	r3, #1
 8002378:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800237a:	4b21      	ldr	r3, [pc, #132]	; (8002400 <HAL_InitTick+0xe8>)
 800237c:	4a21      	ldr	r2, [pc, #132]	; (8002404 <HAL_InitTick+0xec>)
 800237e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002380:	4b1f      	ldr	r3, [pc, #124]	; (8002400 <HAL_InitTick+0xe8>)
 8002382:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002386:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002388:	4a1d      	ldr	r2, [pc, #116]	; (8002400 <HAL_InitTick+0xe8>)
 800238a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800238c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800238e:	4b1c      	ldr	r3, [pc, #112]	; (8002400 <HAL_InitTick+0xe8>)
 8002390:	2200      	movs	r2, #0
 8002392:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002394:	4b1a      	ldr	r3, [pc, #104]	; (8002400 <HAL_InitTick+0xe8>)
 8002396:	2200      	movs	r2, #0
 8002398:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800239a:	4b19      	ldr	r3, [pc, #100]	; (8002400 <HAL_InitTick+0xe8>)
 800239c:	2200      	movs	r2, #0
 800239e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80023a0:	4817      	ldr	r0, [pc, #92]	; (8002400 <HAL_InitTick+0xe8>)
 80023a2:	f002 fb57 	bl	8004a54 <HAL_TIM_Base_Init>
 80023a6:	4603      	mov	r3, r0
 80023a8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80023ac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d11b      	bne.n	80023ec <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80023b4:	4812      	ldr	r0, [pc, #72]	; (8002400 <HAL_InitTick+0xe8>)
 80023b6:	f002 fbaf 	bl	8004b18 <HAL_TIM_Base_Start_IT>
 80023ba:	4603      	mov	r3, r0
 80023bc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80023c0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d111      	bne.n	80023ec <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80023c8:	2036      	movs	r0, #54	; 0x36
 80023ca:	f000 fa83 	bl	80028d4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2b0f      	cmp	r3, #15
 80023d2:	d808      	bhi.n	80023e6 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80023d4:	2200      	movs	r2, #0
 80023d6:	6879      	ldr	r1, [r7, #4]
 80023d8:	2036      	movs	r0, #54	; 0x36
 80023da:	f000 fa5f 	bl	800289c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80023de:	4a0a      	ldr	r2, [pc, #40]	; (8002408 <HAL_InitTick+0xf0>)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6013      	str	r3, [r2, #0]
 80023e4:	e002      	b.n	80023ec <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80023ec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3738      	adds	r7, #56	; 0x38
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	40023800 	.word	0x40023800
 80023fc:	431bde83 	.word	0x431bde83
 8002400:	20006efc 	.word	0x20006efc
 8002404:	40001000 	.word	0x40001000
 8002408:	20000008 	.word	0x20000008

0800240c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002410:	e7fe      	b.n	8002410 <NMI_Handler+0x4>

08002412 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002412:	b480      	push	{r7}
 8002414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002416:	e7fe      	b.n	8002416 <HardFault_Handler+0x4>

08002418 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800241c:	e7fe      	b.n	800241c <MemManage_Handler+0x4>

0800241e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800241e:	b480      	push	{r7}
 8002420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002422:	e7fe      	b.n	8002422 <BusFault_Handler+0x4>

08002424 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002428:	e7fe      	b.n	8002428 <UsageFault_Handler+0x4>

0800242a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800242a:	b480      	push	{r7}
 800242c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800242e:	bf00      	nop
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800243c:	4802      	ldr	r0, [pc, #8]	; (8002448 <DMA1_Stream1_IRQHandler+0x10>)
 800243e:	f000 fbf7 	bl	8002c30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002442:	bf00      	nop
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	20006878 	.word	0x20006878

0800244c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002450:	4802      	ldr	r0, [pc, #8]	; (800245c <DMA1_Stream3_IRQHandler+0x10>)
 8002452:	f000 fbed 	bl	8002c30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002456:	bf00      	nop
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	20006818 	.word	0x20006818

08002460 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002464:	4802      	ldr	r0, [pc, #8]	; (8002470 <USART3_IRQHandler+0x10>)
 8002466:	f003 fcf1 	bl	8005e4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800246a:	bf00      	nop
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	20006790 	.word	0x20006790

08002474 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002478:	4802      	ldr	r0, [pc, #8]	; (8002484 <TIM6_DAC_IRQHandler+0x10>)
 800247a:	f002 fcc3 	bl	8004e04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800247e:	bf00      	nop
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	20006efc 	.word	0x20006efc

08002488 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  return 1;
 800248c:	2301      	movs	r3, #1
}
 800248e:	4618      	mov	r0, r3
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <_kill>:

int _kill(int pid, int sig)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80024a2:	f017 f9ef 	bl	8019884 <__errno>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2216      	movs	r2, #22
 80024aa:	601a      	str	r2, [r3, #0]
  return -1;
 80024ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3708      	adds	r7, #8
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <_exit>:

void _exit (int status)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80024c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f7ff ffe7 	bl	8002498 <_kill>
  while (1) {}    /* Make sure we hang here */
 80024ca:	e7fe      	b.n	80024ca <_exit+0x12>

080024cc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b086      	sub	sp, #24
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024d8:	2300      	movs	r3, #0
 80024da:	617b      	str	r3, [r7, #20]
 80024dc:	e00a      	b.n	80024f4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80024de:	f3af 8000 	nop.w
 80024e2:	4601      	mov	r1, r0
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	1c5a      	adds	r2, r3, #1
 80024e8:	60ba      	str	r2, [r7, #8]
 80024ea:	b2ca      	uxtb	r2, r1
 80024ec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	3301      	adds	r3, #1
 80024f2:	617b      	str	r3, [r7, #20]
 80024f4:	697a      	ldr	r2, [r7, #20]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	dbf0      	blt.n	80024de <_read+0x12>
  }

  return len;
 80024fc:	687b      	ldr	r3, [r7, #4]
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3718      	adds	r7, #24
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002506:	b580      	push	{r7, lr}
 8002508:	b086      	sub	sp, #24
 800250a:	af00      	add	r7, sp, #0
 800250c:	60f8      	str	r0, [r7, #12]
 800250e:	60b9      	str	r1, [r7, #8]
 8002510:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002512:	2300      	movs	r3, #0
 8002514:	617b      	str	r3, [r7, #20]
 8002516:	e009      	b.n	800252c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	1c5a      	adds	r2, r3, #1
 800251c:	60ba      	str	r2, [r7, #8]
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	4618      	mov	r0, r3
 8002522:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	3301      	adds	r3, #1
 800252a:	617b      	str	r3, [r7, #20]
 800252c:	697a      	ldr	r2, [r7, #20]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	429a      	cmp	r2, r3
 8002532:	dbf1      	blt.n	8002518 <_write+0x12>
  }
  return len;
 8002534:	687b      	ldr	r3, [r7, #4]
}
 8002536:	4618      	mov	r0, r3
 8002538:	3718      	adds	r7, #24
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}

0800253e <_close>:

int _close(int file)
{
 800253e:	b480      	push	{r7}
 8002540:	b083      	sub	sp, #12
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002546:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800254a:	4618      	mov	r0, r3
 800254c:	370c      	adds	r7, #12
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr

08002556 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002556:	b480      	push	{r7}
 8002558:	b083      	sub	sp, #12
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
 800255e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002566:	605a      	str	r2, [r3, #4]
  return 0;
 8002568:	2300      	movs	r3, #0
}
 800256a:	4618      	mov	r0, r3
 800256c:	370c      	adds	r7, #12
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr

08002576 <_isatty>:

int _isatty(int file)
{
 8002576:	b480      	push	{r7}
 8002578:	b083      	sub	sp, #12
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800257e:	2301      	movs	r3, #1
}
 8002580:	4618      	mov	r0, r3
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800258c:	b480      	push	{r7}
 800258e:	b085      	sub	sp, #20
 8002590:	af00      	add	r7, sp, #0
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3714      	adds	r7, #20
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
	...

080025a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b086      	sub	sp, #24
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025b0:	4a14      	ldr	r2, [pc, #80]	; (8002604 <_sbrk+0x5c>)
 80025b2:	4b15      	ldr	r3, [pc, #84]	; (8002608 <_sbrk+0x60>)
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025bc:	4b13      	ldr	r3, [pc, #76]	; (800260c <_sbrk+0x64>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d102      	bne.n	80025ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025c4:	4b11      	ldr	r3, [pc, #68]	; (800260c <_sbrk+0x64>)
 80025c6:	4a12      	ldr	r2, [pc, #72]	; (8002610 <_sbrk+0x68>)
 80025c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025ca:	4b10      	ldr	r3, [pc, #64]	; (800260c <_sbrk+0x64>)
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4413      	add	r3, r2
 80025d2:	693a      	ldr	r2, [r7, #16]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d207      	bcs.n	80025e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025d8:	f017 f954 	bl	8019884 <__errno>
 80025dc:	4603      	mov	r3, r0
 80025de:	220c      	movs	r2, #12
 80025e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025e6:	e009      	b.n	80025fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025e8:	4b08      	ldr	r3, [pc, #32]	; (800260c <_sbrk+0x64>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025ee:	4b07      	ldr	r3, [pc, #28]	; (800260c <_sbrk+0x64>)
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4413      	add	r3, r2
 80025f6:	4a05      	ldr	r2, [pc, #20]	; (800260c <_sbrk+0x64>)
 80025f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025fa:	68fb      	ldr	r3, [r7, #12]
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3718      	adds	r7, #24
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	20080000 	.word	0x20080000
 8002608:	00000400 	.word	0x00000400
 800260c:	20006f4c 	.word	0x20006f4c
 8002610:	20010b30 	.word	0x20010b30

08002614 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002618:	4b06      	ldr	r3, [pc, #24]	; (8002634 <SystemInit+0x20>)
 800261a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800261e:	4a05      	ldr	r2, [pc, #20]	; (8002634 <SystemInit+0x20>)
 8002620:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002624:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002628:	bf00      	nop
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	e000ed00 	.word	0xe000ed00

08002638 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002638:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002670 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800263c:	480d      	ldr	r0, [pc, #52]	; (8002674 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800263e:	490e      	ldr	r1, [pc, #56]	; (8002678 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002640:	4a0e      	ldr	r2, [pc, #56]	; (800267c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002642:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002644:	e002      	b.n	800264c <LoopCopyDataInit>

08002646 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002646:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002648:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800264a:	3304      	adds	r3, #4

0800264c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800264c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800264e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002650:	d3f9      	bcc.n	8002646 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002652:	4a0b      	ldr	r2, [pc, #44]	; (8002680 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002654:	4c0b      	ldr	r4, [pc, #44]	; (8002684 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002656:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002658:	e001      	b.n	800265e <LoopFillZerobss>

0800265a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800265a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800265c:	3204      	adds	r2, #4

0800265e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800265e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002660:	d3fb      	bcc.n	800265a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002662:	f7ff ffd7 	bl	8002614 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002666:	f017 f913 	bl	8019890 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800266a:	f7fe fb55 	bl	8000d18 <main>
  bx  lr    
 800266e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002670:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002674:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002678:	2000213c 	.word	0x2000213c
  ldr r2, =_sidata
 800267c:	0801c0d0 	.word	0x0801c0d0
  ldr r2, =_sbss
 8002680:	20002140 	.word	0x20002140
  ldr r4, =_ebss
 8002684:	20010b30 	.word	0x20010b30

08002688 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002688:	e7fe      	b.n	8002688 <ADC_IRQHandler>

0800268a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800268a:	b580      	push	{r7, lr}
 800268c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800268e:	2003      	movs	r0, #3
 8002690:	f000 f8f9 	bl	8002886 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002694:	200f      	movs	r0, #15
 8002696:	f7ff fe3f 	bl	8002318 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800269a:	f7ff fafb 	bl	8001c94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800269e:	2300      	movs	r3, #0
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026a8:	4b06      	ldr	r3, [pc, #24]	; (80026c4 <HAL_IncTick+0x20>)
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	461a      	mov	r2, r3
 80026ae:	4b06      	ldr	r3, [pc, #24]	; (80026c8 <HAL_IncTick+0x24>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4413      	add	r3, r2
 80026b4:	4a04      	ldr	r2, [pc, #16]	; (80026c8 <HAL_IncTick+0x24>)
 80026b6:	6013      	str	r3, [r2, #0]
}
 80026b8:	bf00      	nop
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	2000000c 	.word	0x2000000c
 80026c8:	20006f50 	.word	0x20006f50

080026cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0
  return uwTick;
 80026d0:	4b03      	ldr	r3, [pc, #12]	; (80026e0 <HAL_GetTick+0x14>)
 80026d2:	681b      	ldr	r3, [r3, #0]
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	20006f50 	.word	0x20006f50

080026e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026ec:	f7ff ffee 	bl	80026cc <HAL_GetTick>
 80026f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026fc:	d005      	beq.n	800270a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026fe:	4b0a      	ldr	r3, [pc, #40]	; (8002728 <HAL_Delay+0x44>)
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	461a      	mov	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	4413      	add	r3, r2
 8002708:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800270a:	bf00      	nop
 800270c:	f7ff ffde 	bl	80026cc <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	68fa      	ldr	r2, [r7, #12]
 8002718:	429a      	cmp	r2, r3
 800271a:	d8f7      	bhi.n	800270c <HAL_Delay+0x28>
  {
  }
}
 800271c:	bf00      	nop
 800271e:	bf00      	nop
 8002720:	3710      	adds	r7, #16
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	2000000c 	.word	0x2000000c

0800272c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800272c:	b480      	push	{r7}
 800272e:	b085      	sub	sp, #20
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f003 0307 	and.w	r3, r3, #7
 800273a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800273c:	4b0b      	ldr	r3, [pc, #44]	; (800276c <__NVIC_SetPriorityGrouping+0x40>)
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002742:	68ba      	ldr	r2, [r7, #8]
 8002744:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002748:	4013      	ands	r3, r2
 800274a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002754:	4b06      	ldr	r3, [pc, #24]	; (8002770 <__NVIC_SetPriorityGrouping+0x44>)
 8002756:	4313      	orrs	r3, r2
 8002758:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800275a:	4a04      	ldr	r2, [pc, #16]	; (800276c <__NVIC_SetPriorityGrouping+0x40>)
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	60d3      	str	r3, [r2, #12]
}
 8002760:	bf00      	nop
 8002762:	3714      	adds	r7, #20
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr
 800276c:	e000ed00 	.word	0xe000ed00
 8002770:	05fa0000 	.word	0x05fa0000

08002774 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002778:	4b04      	ldr	r3, [pc, #16]	; (800278c <__NVIC_GetPriorityGrouping+0x18>)
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	0a1b      	lsrs	r3, r3, #8
 800277e:	f003 0307 	and.w	r3, r3, #7
}
 8002782:	4618      	mov	r0, r3
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr
 800278c:	e000ed00 	.word	0xe000ed00

08002790 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	4603      	mov	r3, r0
 8002798:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800279a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	db0b      	blt.n	80027ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027a2:	79fb      	ldrb	r3, [r7, #7]
 80027a4:	f003 021f 	and.w	r2, r3, #31
 80027a8:	4907      	ldr	r1, [pc, #28]	; (80027c8 <__NVIC_EnableIRQ+0x38>)
 80027aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ae:	095b      	lsrs	r3, r3, #5
 80027b0:	2001      	movs	r0, #1
 80027b2:	fa00 f202 	lsl.w	r2, r0, r2
 80027b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027ba:	bf00      	nop
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	e000e100 	.word	0xe000e100

080027cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	4603      	mov	r3, r0
 80027d4:	6039      	str	r1, [r7, #0]
 80027d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	db0a      	blt.n	80027f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	b2da      	uxtb	r2, r3
 80027e4:	490c      	ldr	r1, [pc, #48]	; (8002818 <__NVIC_SetPriority+0x4c>)
 80027e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ea:	0112      	lsls	r2, r2, #4
 80027ec:	b2d2      	uxtb	r2, r2
 80027ee:	440b      	add	r3, r1
 80027f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027f4:	e00a      	b.n	800280c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	b2da      	uxtb	r2, r3
 80027fa:	4908      	ldr	r1, [pc, #32]	; (800281c <__NVIC_SetPriority+0x50>)
 80027fc:	79fb      	ldrb	r3, [r7, #7]
 80027fe:	f003 030f 	and.w	r3, r3, #15
 8002802:	3b04      	subs	r3, #4
 8002804:	0112      	lsls	r2, r2, #4
 8002806:	b2d2      	uxtb	r2, r2
 8002808:	440b      	add	r3, r1
 800280a:	761a      	strb	r2, [r3, #24]
}
 800280c:	bf00      	nop
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr
 8002818:	e000e100 	.word	0xe000e100
 800281c:	e000ed00 	.word	0xe000ed00

08002820 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002820:	b480      	push	{r7}
 8002822:	b089      	sub	sp, #36	; 0x24
 8002824:	af00      	add	r7, sp, #0
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f003 0307 	and.w	r3, r3, #7
 8002832:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	f1c3 0307 	rsb	r3, r3, #7
 800283a:	2b04      	cmp	r3, #4
 800283c:	bf28      	it	cs
 800283e:	2304      	movcs	r3, #4
 8002840:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	3304      	adds	r3, #4
 8002846:	2b06      	cmp	r3, #6
 8002848:	d902      	bls.n	8002850 <NVIC_EncodePriority+0x30>
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	3b03      	subs	r3, #3
 800284e:	e000      	b.n	8002852 <NVIC_EncodePriority+0x32>
 8002850:	2300      	movs	r3, #0
 8002852:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002854:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	fa02 f303 	lsl.w	r3, r2, r3
 800285e:	43da      	mvns	r2, r3
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	401a      	ands	r2, r3
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002868:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	fa01 f303 	lsl.w	r3, r1, r3
 8002872:	43d9      	mvns	r1, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002878:	4313      	orrs	r3, r2
         );
}
 800287a:	4618      	mov	r0, r3
 800287c:	3724      	adds	r7, #36	; 0x24
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr

08002886 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002886:	b580      	push	{r7, lr}
 8002888:	b082      	sub	sp, #8
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f7ff ff4c 	bl	800272c <__NVIC_SetPriorityGrouping>
}
 8002894:	bf00      	nop
 8002896:	3708      	adds	r7, #8
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800289c:	b580      	push	{r7, lr}
 800289e:	b086      	sub	sp, #24
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	4603      	mov	r3, r0
 80028a4:	60b9      	str	r1, [r7, #8]
 80028a6:	607a      	str	r2, [r7, #4]
 80028a8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80028aa:	2300      	movs	r3, #0
 80028ac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028ae:	f7ff ff61 	bl	8002774 <__NVIC_GetPriorityGrouping>
 80028b2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	68b9      	ldr	r1, [r7, #8]
 80028b8:	6978      	ldr	r0, [r7, #20]
 80028ba:	f7ff ffb1 	bl	8002820 <NVIC_EncodePriority>
 80028be:	4602      	mov	r2, r0
 80028c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028c4:	4611      	mov	r1, r2
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7ff ff80 	bl	80027cc <__NVIC_SetPriority>
}
 80028cc:	bf00      	nop
 80028ce:	3718      	adds	r7, #24
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	4603      	mov	r3, r0
 80028dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7ff ff54 	bl	8002790 <__NVIC_EnableIRQ>
}
 80028e8:	bf00      	nop
 80028ea:	3708      	adds	r7, #8
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b086      	sub	sp, #24
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80028f8:	2300      	movs	r3, #0
 80028fa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80028fc:	f7ff fee6 	bl	80026cc <HAL_GetTick>
 8002900:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d101      	bne.n	800290c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e099      	b.n	8002a40 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2202      	movs	r2, #2
 8002910:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f022 0201 	bic.w	r2, r2, #1
 800292a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800292c:	e00f      	b.n	800294e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800292e:	f7ff fecd 	bl	80026cc <HAL_GetTick>
 8002932:	4602      	mov	r2, r0
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	2b05      	cmp	r3, #5
 800293a:	d908      	bls.n	800294e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2220      	movs	r2, #32
 8002940:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2203      	movs	r2, #3
 8002946:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e078      	b.n	8002a40 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0301 	and.w	r3, r3, #1
 8002958:	2b00      	cmp	r3, #0
 800295a:	d1e8      	bne.n	800292e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002964:	697a      	ldr	r2, [r7, #20]
 8002966:	4b38      	ldr	r3, [pc, #224]	; (8002a48 <HAL_DMA_Init+0x158>)
 8002968:	4013      	ands	r3, r2
 800296a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	685a      	ldr	r2, [r3, #4]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800297a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	691b      	ldr	r3, [r3, #16]
 8002980:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002986:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	699b      	ldr	r3, [r3, #24]
 800298c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002992:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a1b      	ldr	r3, [r3, #32]
 8002998:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800299a:	697a      	ldr	r2, [r7, #20]
 800299c:	4313      	orrs	r3, r2
 800299e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a4:	2b04      	cmp	r3, #4
 80029a6:	d107      	bne.n	80029b8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b0:	4313      	orrs	r3, r2
 80029b2:	697a      	ldr	r2, [r7, #20]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	697a      	ldr	r2, [r7, #20]
 80029be:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	695b      	ldr	r3, [r3, #20]
 80029c6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	f023 0307 	bic.w	r3, r3, #7
 80029ce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d4:	697a      	ldr	r2, [r7, #20]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029de:	2b04      	cmp	r3, #4
 80029e0:	d117      	bne.n	8002a12 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e6:	697a      	ldr	r2, [r7, #20]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d00e      	beq.n	8002a12 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f000 fb15 	bl	8003024 <DMA_CheckFifoParam>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d008      	beq.n	8002a12 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2240      	movs	r2, #64	; 0x40
 8002a04:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e016      	b.n	8002a40 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	697a      	ldr	r2, [r7, #20]
 8002a18:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 facc 	bl	8002fb8 <DMA_CalcBaseAndBitshift>
 8002a20:	4603      	mov	r3, r0
 8002a22:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a28:	223f      	movs	r2, #63	; 0x3f
 8002a2a:	409a      	lsls	r2, r3
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002a3e:	2300      	movs	r3, #0
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3718      	adds	r7, #24
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	e010803f 	.word	0xe010803f

08002a4c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b086      	sub	sp, #24
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	607a      	str	r2, [r7, #4]
 8002a58:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a62:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d101      	bne.n	8002a72 <HAL_DMA_Start_IT+0x26>
 8002a6e:	2302      	movs	r3, #2
 8002a70:	e048      	b.n	8002b04 <HAL_DMA_Start_IT+0xb8>
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2201      	movs	r2, #1
 8002a76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d137      	bne.n	8002af6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2202      	movs	r2, #2
 8002a8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2200      	movs	r2, #0
 8002a92:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	68b9      	ldr	r1, [r7, #8]
 8002a9a:	68f8      	ldr	r0, [r7, #12]
 8002a9c:	f000 fa5e 	bl	8002f5c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aa4:	223f      	movs	r2, #63	; 0x3f
 8002aa6:	409a      	lsls	r2, r3
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f042 0216 	orr.w	r2, r2, #22
 8002aba:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	695a      	ldr	r2, [r3, #20]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002aca:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d007      	beq.n	8002ae4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f042 0208 	orr.w	r2, r2, #8
 8002ae2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f042 0201 	orr.w	r2, r2, #1
 8002af2:	601a      	str	r2, [r3, #0]
 8002af4:	e005      	b.n	8002b02 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2200      	movs	r2, #0
 8002afa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002afe:	2302      	movs	r3, #2
 8002b00:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002b02:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3718      	adds	r7, #24
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b18:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002b1a:	f7ff fdd7 	bl	80026cc <HAL_GetTick>
 8002b1e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d008      	beq.n	8002b3e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2280      	movs	r2, #128	; 0x80
 8002b30:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e052      	b.n	8002be4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f022 0216 	bic.w	r2, r2, #22
 8002b4c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	695a      	ldr	r2, [r3, #20]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b5c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d103      	bne.n	8002b6e <HAL_DMA_Abort+0x62>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d007      	beq.n	8002b7e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f022 0208 	bic.w	r2, r2, #8
 8002b7c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f022 0201 	bic.w	r2, r2, #1
 8002b8c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b8e:	e013      	b.n	8002bb8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b90:	f7ff fd9c 	bl	80026cc <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2b05      	cmp	r3, #5
 8002b9c:	d90c      	bls.n	8002bb8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2220      	movs	r2, #32
 8002ba2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2203      	movs	r2, #3
 8002ba8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e015      	b.n	8002be4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0301 	and.w	r3, r3, #1
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1e4      	bne.n	8002b90 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bca:	223f      	movs	r2, #63	; 0x3f
 8002bcc:	409a      	lsls	r2, r3
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002be2:	2300      	movs	r3, #0
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3710      	adds	r7, #16
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	d004      	beq.n	8002c0a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2280      	movs	r2, #128	; 0x80
 8002c04:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e00c      	b.n	8002c24 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2205      	movs	r2, #5
 8002c0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f022 0201 	bic.w	r2, r2, #1
 8002c20:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002c22:	2300      	movs	r3, #0
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b086      	sub	sp, #24
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002c3c:	4b8e      	ldr	r3, [pc, #568]	; (8002e78 <HAL_DMA_IRQHandler+0x248>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a8e      	ldr	r2, [pc, #568]	; (8002e7c <HAL_DMA_IRQHandler+0x24c>)
 8002c42:	fba2 2303 	umull	r2, r3, r2, r3
 8002c46:	0a9b      	lsrs	r3, r3, #10
 8002c48:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c4e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c5a:	2208      	movs	r2, #8
 8002c5c:	409a      	lsls	r2, r3
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	4013      	ands	r3, r2
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d01a      	beq.n	8002c9c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0304 	and.w	r3, r3, #4
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d013      	beq.n	8002c9c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f022 0204 	bic.w	r2, r2, #4
 8002c82:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c88:	2208      	movs	r2, #8
 8002c8a:	409a      	lsls	r2, r3
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c94:	f043 0201 	orr.w	r2, r3, #1
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	409a      	lsls	r2, r3
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d012      	beq.n	8002cd2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	695b      	ldr	r3, [r3, #20]
 8002cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d00b      	beq.n	8002cd2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	409a      	lsls	r2, r3
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cca:	f043 0202 	orr.w	r2, r3, #2
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cd6:	2204      	movs	r2, #4
 8002cd8:	409a      	lsls	r2, r3
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	4013      	ands	r3, r2
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d012      	beq.n	8002d08 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0302 	and.w	r3, r3, #2
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d00b      	beq.n	8002d08 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cf4:	2204      	movs	r2, #4
 8002cf6:	409a      	lsls	r2, r3
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d00:	f043 0204 	orr.w	r2, r3, #4
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d0c:	2210      	movs	r2, #16
 8002d0e:	409a      	lsls	r2, r3
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	4013      	ands	r3, r2
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d043      	beq.n	8002da0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0308 	and.w	r3, r3, #8
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d03c      	beq.n	8002da0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d2a:	2210      	movs	r2, #16
 8002d2c:	409a      	lsls	r2, r3
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d018      	beq.n	8002d72 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d108      	bne.n	8002d60 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d024      	beq.n	8002da0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	4798      	blx	r3
 8002d5e:	e01f      	b.n	8002da0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d01b      	beq.n	8002da0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	4798      	blx	r3
 8002d70:	e016      	b.n	8002da0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d107      	bne.n	8002d90 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f022 0208 	bic.w	r2, r2, #8
 8002d8e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d003      	beq.n	8002da0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002da4:	2220      	movs	r2, #32
 8002da6:	409a      	lsls	r2, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	4013      	ands	r3, r2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	f000 808f 	beq.w	8002ed0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0310 	and.w	r3, r3, #16
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	f000 8087 	beq.w	8002ed0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dc6:	2220      	movs	r2, #32
 8002dc8:	409a      	lsls	r2, r3
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	2b05      	cmp	r3, #5
 8002dd8:	d136      	bne.n	8002e48 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f022 0216 	bic.w	r2, r2, #22
 8002de8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	695a      	ldr	r2, [r3, #20]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002df8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d103      	bne.n	8002e0a <HAL_DMA_IRQHandler+0x1da>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d007      	beq.n	8002e1a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f022 0208 	bic.w	r2, r2, #8
 8002e18:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e1e:	223f      	movs	r2, #63	; 0x3f
 8002e20:	409a      	lsls	r2, r3
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d07e      	beq.n	8002f3c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	4798      	blx	r3
        }
        return;
 8002e46:	e079      	b.n	8002f3c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d01d      	beq.n	8002e92 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d10d      	bne.n	8002e80 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d031      	beq.n	8002ed0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	4798      	blx	r3
 8002e74:	e02c      	b.n	8002ed0 <HAL_DMA_IRQHandler+0x2a0>
 8002e76:	bf00      	nop
 8002e78:	20000004 	.word	0x20000004
 8002e7c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d023      	beq.n	8002ed0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	4798      	blx	r3
 8002e90:	e01e      	b.n	8002ed0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d10f      	bne.n	8002ec0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f022 0210 	bic.w	r2, r2, #16
 8002eae:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d003      	beq.n	8002ed0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d032      	beq.n	8002f3e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002edc:	f003 0301 	and.w	r3, r3, #1
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d022      	beq.n	8002f2a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2205      	movs	r2, #5
 8002ee8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f022 0201 	bic.w	r2, r2, #1
 8002efa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	3301      	adds	r3, #1
 8002f00:	60bb      	str	r3, [r7, #8]
 8002f02:	697a      	ldr	r2, [r7, #20]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d307      	bcc.n	8002f18 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0301 	and.w	r3, r3, #1
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d1f2      	bne.n	8002efc <HAL_DMA_IRQHandler+0x2cc>
 8002f16:	e000      	b.n	8002f1a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002f18:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d005      	beq.n	8002f3e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	4798      	blx	r3
 8002f3a:	e000      	b.n	8002f3e <HAL_DMA_IRQHandler+0x30e>
        return;
 8002f3c:	bf00      	nop
    }
  }
}
 8002f3e:	3718      	adds	r7, #24
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	370c      	adds	r7, #12
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b085      	sub	sp, #20
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	60b9      	str	r1, [r7, #8]
 8002f66:	607a      	str	r2, [r7, #4]
 8002f68:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f78:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	683a      	ldr	r2, [r7, #0]
 8002f80:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	2b40      	cmp	r3, #64	; 0x40
 8002f88:	d108      	bne.n	8002f9c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	68ba      	ldr	r2, [r7, #8]
 8002f98:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002f9a:	e007      	b.n	8002fac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	68ba      	ldr	r2, [r7, #8]
 8002fa2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	60da      	str	r2, [r3, #12]
}
 8002fac:	bf00      	nop
 8002fae:	3714      	adds	r7, #20
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr

08002fb8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b085      	sub	sp, #20
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	3b10      	subs	r3, #16
 8002fc8:	4a13      	ldr	r2, [pc, #76]	; (8003018 <DMA_CalcBaseAndBitshift+0x60>)
 8002fca:	fba2 2303 	umull	r2, r3, r2, r3
 8002fce:	091b      	lsrs	r3, r3, #4
 8002fd0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002fd2:	4a12      	ldr	r2, [pc, #72]	; (800301c <DMA_CalcBaseAndBitshift+0x64>)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	461a      	mov	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2b03      	cmp	r3, #3
 8002fe4:	d908      	bls.n	8002ff8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	461a      	mov	r2, r3
 8002fec:	4b0c      	ldr	r3, [pc, #48]	; (8003020 <DMA_CalcBaseAndBitshift+0x68>)
 8002fee:	4013      	ands	r3, r2
 8002ff0:	1d1a      	adds	r2, r3, #4
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	659a      	str	r2, [r3, #88]	; 0x58
 8002ff6:	e006      	b.n	8003006 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	4b08      	ldr	r3, [pc, #32]	; (8003020 <DMA_CalcBaseAndBitshift+0x68>)
 8003000:	4013      	ands	r3, r2
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800300a:	4618      	mov	r0, r3
 800300c:	3714      	adds	r7, #20
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	aaaaaaab 	.word	0xaaaaaaab
 800301c:	0801a6d0 	.word	0x0801a6d0
 8003020:	fffffc00 	.word	0xfffffc00

08003024 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003024:	b480      	push	{r7}
 8003026:	b085      	sub	sp, #20
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800302c:	2300      	movs	r3, #0
 800302e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003034:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	699b      	ldr	r3, [r3, #24]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d11f      	bne.n	800307e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	2b03      	cmp	r3, #3
 8003042:	d856      	bhi.n	80030f2 <DMA_CheckFifoParam+0xce>
 8003044:	a201      	add	r2, pc, #4	; (adr r2, 800304c <DMA_CheckFifoParam+0x28>)
 8003046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800304a:	bf00      	nop
 800304c:	0800305d 	.word	0x0800305d
 8003050:	0800306f 	.word	0x0800306f
 8003054:	0800305d 	.word	0x0800305d
 8003058:	080030f3 	.word	0x080030f3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003060:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d046      	beq.n	80030f6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800306c:	e043      	b.n	80030f6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003072:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003076:	d140      	bne.n	80030fa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800307c:	e03d      	b.n	80030fa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	699b      	ldr	r3, [r3, #24]
 8003082:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003086:	d121      	bne.n	80030cc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	2b03      	cmp	r3, #3
 800308c:	d837      	bhi.n	80030fe <DMA_CheckFifoParam+0xda>
 800308e:	a201      	add	r2, pc, #4	; (adr r2, 8003094 <DMA_CheckFifoParam+0x70>)
 8003090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003094:	080030a5 	.word	0x080030a5
 8003098:	080030ab 	.word	0x080030ab
 800309c:	080030a5 	.word	0x080030a5
 80030a0:	080030bd 	.word	0x080030bd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	73fb      	strb	r3, [r7, #15]
      break;
 80030a8:	e030      	b.n	800310c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d025      	beq.n	8003102 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030ba:	e022      	b.n	8003102 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80030c4:	d11f      	bne.n	8003106 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80030ca:	e01c      	b.n	8003106 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d903      	bls.n	80030da <DMA_CheckFifoParam+0xb6>
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	2b03      	cmp	r3, #3
 80030d6:	d003      	beq.n	80030e0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80030d8:	e018      	b.n	800310c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	73fb      	strb	r3, [r7, #15]
      break;
 80030de:	e015      	b.n	800310c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d00e      	beq.n	800310a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	73fb      	strb	r3, [r7, #15]
      break;
 80030f0:	e00b      	b.n	800310a <DMA_CheckFifoParam+0xe6>
      break;
 80030f2:	bf00      	nop
 80030f4:	e00a      	b.n	800310c <DMA_CheckFifoParam+0xe8>
      break;
 80030f6:	bf00      	nop
 80030f8:	e008      	b.n	800310c <DMA_CheckFifoParam+0xe8>
      break;
 80030fa:	bf00      	nop
 80030fc:	e006      	b.n	800310c <DMA_CheckFifoParam+0xe8>
      break;
 80030fe:	bf00      	nop
 8003100:	e004      	b.n	800310c <DMA_CheckFifoParam+0xe8>
      break;
 8003102:	bf00      	nop
 8003104:	e002      	b.n	800310c <DMA_CheckFifoParam+0xe8>
      break;   
 8003106:	bf00      	nop
 8003108:	e000      	b.n	800310c <DMA_CheckFifoParam+0xe8>
      break;
 800310a:	bf00      	nop
    }
  } 
  
  return status; 
 800310c:	7bfb      	ldrb	r3, [r7, #15]
}
 800310e:	4618      	mov	r0, r3
 8003110:	3714      	adds	r7, #20
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop

0800311c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800311c:	b480      	push	{r7}
 800311e:	b089      	sub	sp, #36	; 0x24
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003126:	2300      	movs	r3, #0
 8003128:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800312a:	2300      	movs	r3, #0
 800312c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800312e:	2300      	movs	r3, #0
 8003130:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003132:	2300      	movs	r3, #0
 8003134:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003136:	2300      	movs	r3, #0
 8003138:	61fb      	str	r3, [r7, #28]
 800313a:	e175      	b.n	8003428 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800313c:	2201      	movs	r2, #1
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	fa02 f303 	lsl.w	r3, r2, r3
 8003144:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	697a      	ldr	r2, [r7, #20]
 800314c:	4013      	ands	r3, r2
 800314e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003150:	693a      	ldr	r2, [r7, #16]
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	429a      	cmp	r2, r3
 8003156:	f040 8164 	bne.w	8003422 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	f003 0303 	and.w	r3, r3, #3
 8003162:	2b01      	cmp	r3, #1
 8003164:	d005      	beq.n	8003172 <HAL_GPIO_Init+0x56>
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f003 0303 	and.w	r3, r3, #3
 800316e:	2b02      	cmp	r3, #2
 8003170:	d130      	bne.n	80031d4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	005b      	lsls	r3, r3, #1
 800317c:	2203      	movs	r2, #3
 800317e:	fa02 f303 	lsl.w	r3, r2, r3
 8003182:	43db      	mvns	r3, r3
 8003184:	69ba      	ldr	r2, [r7, #24]
 8003186:	4013      	ands	r3, r2
 8003188:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	68da      	ldr	r2, [r3, #12]
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	005b      	lsls	r3, r3, #1
 8003192:	fa02 f303 	lsl.w	r3, r2, r3
 8003196:	69ba      	ldr	r2, [r7, #24]
 8003198:	4313      	orrs	r3, r2
 800319a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	69ba      	ldr	r2, [r7, #24]
 80031a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031a8:	2201      	movs	r2, #1
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	fa02 f303 	lsl.w	r3, r2, r3
 80031b0:	43db      	mvns	r3, r3
 80031b2:	69ba      	ldr	r2, [r7, #24]
 80031b4:	4013      	ands	r3, r2
 80031b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	091b      	lsrs	r3, r3, #4
 80031be:	f003 0201 	and.w	r2, r3, #1
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	fa02 f303 	lsl.w	r3, r2, r3
 80031c8:	69ba      	ldr	r2, [r7, #24]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	69ba      	ldr	r2, [r7, #24]
 80031d2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f003 0303 	and.w	r3, r3, #3
 80031dc:	2b03      	cmp	r3, #3
 80031de:	d017      	beq.n	8003210 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	005b      	lsls	r3, r3, #1
 80031ea:	2203      	movs	r2, #3
 80031ec:	fa02 f303 	lsl.w	r3, r2, r3
 80031f0:	43db      	mvns	r3, r3
 80031f2:	69ba      	ldr	r2, [r7, #24]
 80031f4:	4013      	ands	r3, r2
 80031f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	689a      	ldr	r2, [r3, #8]
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	005b      	lsls	r3, r3, #1
 8003200:	fa02 f303 	lsl.w	r3, r2, r3
 8003204:	69ba      	ldr	r2, [r7, #24]
 8003206:	4313      	orrs	r3, r2
 8003208:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f003 0303 	and.w	r3, r3, #3
 8003218:	2b02      	cmp	r3, #2
 800321a:	d123      	bne.n	8003264 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	08da      	lsrs	r2, r3, #3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	3208      	adds	r2, #8
 8003224:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003228:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	f003 0307 	and.w	r3, r3, #7
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	220f      	movs	r2, #15
 8003234:	fa02 f303 	lsl.w	r3, r2, r3
 8003238:	43db      	mvns	r3, r3
 800323a:	69ba      	ldr	r2, [r7, #24]
 800323c:	4013      	ands	r3, r2
 800323e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	691a      	ldr	r2, [r3, #16]
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	f003 0307 	and.w	r3, r3, #7
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	fa02 f303 	lsl.w	r3, r2, r3
 8003250:	69ba      	ldr	r2, [r7, #24]
 8003252:	4313      	orrs	r3, r2
 8003254:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	08da      	lsrs	r2, r3, #3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	3208      	adds	r2, #8
 800325e:	69b9      	ldr	r1, [r7, #24]
 8003260:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	005b      	lsls	r3, r3, #1
 800326e:	2203      	movs	r2, #3
 8003270:	fa02 f303 	lsl.w	r3, r2, r3
 8003274:	43db      	mvns	r3, r3
 8003276:	69ba      	ldr	r2, [r7, #24]
 8003278:	4013      	ands	r3, r2
 800327a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f003 0203 	and.w	r2, r3, #3
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	005b      	lsls	r3, r3, #1
 8003288:	fa02 f303 	lsl.w	r3, r2, r3
 800328c:	69ba      	ldr	r2, [r7, #24]
 800328e:	4313      	orrs	r3, r2
 8003290:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	69ba      	ldr	r2, [r7, #24]
 8003296:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	f000 80be 	beq.w	8003422 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032a6:	4b66      	ldr	r3, [pc, #408]	; (8003440 <HAL_GPIO_Init+0x324>)
 80032a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032aa:	4a65      	ldr	r2, [pc, #404]	; (8003440 <HAL_GPIO_Init+0x324>)
 80032ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032b0:	6453      	str	r3, [r2, #68]	; 0x44
 80032b2:	4b63      	ldr	r3, [pc, #396]	; (8003440 <HAL_GPIO_Init+0x324>)
 80032b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032ba:	60fb      	str	r3, [r7, #12]
 80032bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80032be:	4a61      	ldr	r2, [pc, #388]	; (8003444 <HAL_GPIO_Init+0x328>)
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	089b      	lsrs	r3, r3, #2
 80032c4:	3302      	adds	r3, #2
 80032c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	f003 0303 	and.w	r3, r3, #3
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	220f      	movs	r2, #15
 80032d6:	fa02 f303 	lsl.w	r3, r2, r3
 80032da:	43db      	mvns	r3, r3
 80032dc:	69ba      	ldr	r2, [r7, #24]
 80032de:	4013      	ands	r3, r2
 80032e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a58      	ldr	r2, [pc, #352]	; (8003448 <HAL_GPIO_Init+0x32c>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d037      	beq.n	800335a <HAL_GPIO_Init+0x23e>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a57      	ldr	r2, [pc, #348]	; (800344c <HAL_GPIO_Init+0x330>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d031      	beq.n	8003356 <HAL_GPIO_Init+0x23a>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a56      	ldr	r2, [pc, #344]	; (8003450 <HAL_GPIO_Init+0x334>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d02b      	beq.n	8003352 <HAL_GPIO_Init+0x236>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a55      	ldr	r2, [pc, #340]	; (8003454 <HAL_GPIO_Init+0x338>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d025      	beq.n	800334e <HAL_GPIO_Init+0x232>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a54      	ldr	r2, [pc, #336]	; (8003458 <HAL_GPIO_Init+0x33c>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d01f      	beq.n	800334a <HAL_GPIO_Init+0x22e>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a53      	ldr	r2, [pc, #332]	; (800345c <HAL_GPIO_Init+0x340>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d019      	beq.n	8003346 <HAL_GPIO_Init+0x22a>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a52      	ldr	r2, [pc, #328]	; (8003460 <HAL_GPIO_Init+0x344>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d013      	beq.n	8003342 <HAL_GPIO_Init+0x226>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a51      	ldr	r2, [pc, #324]	; (8003464 <HAL_GPIO_Init+0x348>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d00d      	beq.n	800333e <HAL_GPIO_Init+0x222>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a50      	ldr	r2, [pc, #320]	; (8003468 <HAL_GPIO_Init+0x34c>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d007      	beq.n	800333a <HAL_GPIO_Init+0x21e>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a4f      	ldr	r2, [pc, #316]	; (800346c <HAL_GPIO_Init+0x350>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d101      	bne.n	8003336 <HAL_GPIO_Init+0x21a>
 8003332:	2309      	movs	r3, #9
 8003334:	e012      	b.n	800335c <HAL_GPIO_Init+0x240>
 8003336:	230a      	movs	r3, #10
 8003338:	e010      	b.n	800335c <HAL_GPIO_Init+0x240>
 800333a:	2308      	movs	r3, #8
 800333c:	e00e      	b.n	800335c <HAL_GPIO_Init+0x240>
 800333e:	2307      	movs	r3, #7
 8003340:	e00c      	b.n	800335c <HAL_GPIO_Init+0x240>
 8003342:	2306      	movs	r3, #6
 8003344:	e00a      	b.n	800335c <HAL_GPIO_Init+0x240>
 8003346:	2305      	movs	r3, #5
 8003348:	e008      	b.n	800335c <HAL_GPIO_Init+0x240>
 800334a:	2304      	movs	r3, #4
 800334c:	e006      	b.n	800335c <HAL_GPIO_Init+0x240>
 800334e:	2303      	movs	r3, #3
 8003350:	e004      	b.n	800335c <HAL_GPIO_Init+0x240>
 8003352:	2302      	movs	r3, #2
 8003354:	e002      	b.n	800335c <HAL_GPIO_Init+0x240>
 8003356:	2301      	movs	r3, #1
 8003358:	e000      	b.n	800335c <HAL_GPIO_Init+0x240>
 800335a:	2300      	movs	r3, #0
 800335c:	69fa      	ldr	r2, [r7, #28]
 800335e:	f002 0203 	and.w	r2, r2, #3
 8003362:	0092      	lsls	r2, r2, #2
 8003364:	4093      	lsls	r3, r2
 8003366:	69ba      	ldr	r2, [r7, #24]
 8003368:	4313      	orrs	r3, r2
 800336a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800336c:	4935      	ldr	r1, [pc, #212]	; (8003444 <HAL_GPIO_Init+0x328>)
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	089b      	lsrs	r3, r3, #2
 8003372:	3302      	adds	r3, #2
 8003374:	69ba      	ldr	r2, [r7, #24]
 8003376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800337a:	4b3d      	ldr	r3, [pc, #244]	; (8003470 <HAL_GPIO_Init+0x354>)
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	43db      	mvns	r3, r3
 8003384:	69ba      	ldr	r2, [r7, #24]
 8003386:	4013      	ands	r3, r2
 8003388:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d003      	beq.n	800339e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003396:	69ba      	ldr	r2, [r7, #24]
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	4313      	orrs	r3, r2
 800339c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800339e:	4a34      	ldr	r2, [pc, #208]	; (8003470 <HAL_GPIO_Init+0x354>)
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033a4:	4b32      	ldr	r3, [pc, #200]	; (8003470 <HAL_GPIO_Init+0x354>)
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	43db      	mvns	r3, r3
 80033ae:	69ba      	ldr	r2, [r7, #24]
 80033b0:	4013      	ands	r3, r2
 80033b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d003      	beq.n	80033c8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80033c0:	69ba      	ldr	r2, [r7, #24]
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033c8:	4a29      	ldr	r2, [pc, #164]	; (8003470 <HAL_GPIO_Init+0x354>)
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80033ce:	4b28      	ldr	r3, [pc, #160]	; (8003470 <HAL_GPIO_Init+0x354>)
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	43db      	mvns	r3, r3
 80033d8:	69ba      	ldr	r2, [r7, #24]
 80033da:	4013      	ands	r3, r2
 80033dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d003      	beq.n	80033f2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80033ea:	69ba      	ldr	r2, [r7, #24]
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80033f2:	4a1f      	ldr	r2, [pc, #124]	; (8003470 <HAL_GPIO_Init+0x354>)
 80033f4:	69bb      	ldr	r3, [r7, #24]
 80033f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033f8:	4b1d      	ldr	r3, [pc, #116]	; (8003470 <HAL_GPIO_Init+0x354>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	43db      	mvns	r3, r3
 8003402:	69ba      	ldr	r2, [r7, #24]
 8003404:	4013      	ands	r3, r2
 8003406:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d003      	beq.n	800341c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003414:	69ba      	ldr	r2, [r7, #24]
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	4313      	orrs	r3, r2
 800341a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800341c:	4a14      	ldr	r2, [pc, #80]	; (8003470 <HAL_GPIO_Init+0x354>)
 800341e:	69bb      	ldr	r3, [r7, #24]
 8003420:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	3301      	adds	r3, #1
 8003426:	61fb      	str	r3, [r7, #28]
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	2b0f      	cmp	r3, #15
 800342c:	f67f ae86 	bls.w	800313c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003430:	bf00      	nop
 8003432:	bf00      	nop
 8003434:	3724      	adds	r7, #36	; 0x24
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	40023800 	.word	0x40023800
 8003444:	40013800 	.word	0x40013800
 8003448:	40020000 	.word	0x40020000
 800344c:	40020400 	.word	0x40020400
 8003450:	40020800 	.word	0x40020800
 8003454:	40020c00 	.word	0x40020c00
 8003458:	40021000 	.word	0x40021000
 800345c:	40021400 	.word	0x40021400
 8003460:	40021800 	.word	0x40021800
 8003464:	40021c00 	.word	0x40021c00
 8003468:	40022000 	.word	0x40022000
 800346c:	40022400 	.word	0x40022400
 8003470:	40013c00 	.word	0x40013c00

08003474 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	460b      	mov	r3, r1
 800347e:	807b      	strh	r3, [r7, #2]
 8003480:	4613      	mov	r3, r2
 8003482:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003484:	787b      	ldrb	r3, [r7, #1]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d003      	beq.n	8003492 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800348a:	887a      	ldrh	r2, [r7, #2]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003490:	e003      	b.n	800349a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003492:	887b      	ldrh	r3, [r7, #2]
 8003494:	041a      	lsls	r2, r3, #16
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	619a      	str	r2, [r3, #24]
}
 800349a:	bf00      	nop
 800349c:	370c      	adds	r7, #12
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr

080034a6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80034a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034a8:	b08f      	sub	sp, #60	; 0x3c
 80034aa:	af0a      	add	r7, sp, #40	; 0x28
 80034ac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d101      	bne.n	80034b8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e116      	b.n	80036e6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d106      	bne.n	80034d8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f7fe fea6 	bl	8002224 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2203      	movs	r2, #3
 80034dc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d102      	bne.n	80034f2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4618      	mov	r0, r3
 80034f8:	f003 ff00 	bl	80072fc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	603b      	str	r3, [r7, #0]
 8003502:	687e      	ldr	r6, [r7, #4]
 8003504:	466d      	mov	r5, sp
 8003506:	f106 0410 	add.w	r4, r6, #16
 800350a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800350c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800350e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003510:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003512:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003516:	e885 0003 	stmia.w	r5, {r0, r1}
 800351a:	1d33      	adds	r3, r6, #4
 800351c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800351e:	6838      	ldr	r0, [r7, #0]
 8003520:	f003 fe94 	bl	800724c <USB_CoreInit>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d005      	beq.n	8003536 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2202      	movs	r2, #2
 800352e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e0d7      	b.n	80036e6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2100      	movs	r1, #0
 800353c:	4618      	mov	r0, r3
 800353e:	f003 feee 	bl	800731e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003542:	2300      	movs	r3, #0
 8003544:	73fb      	strb	r3, [r7, #15]
 8003546:	e04a      	b.n	80035de <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003548:	7bfa      	ldrb	r2, [r7, #15]
 800354a:	6879      	ldr	r1, [r7, #4]
 800354c:	4613      	mov	r3, r2
 800354e:	00db      	lsls	r3, r3, #3
 8003550:	4413      	add	r3, r2
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	440b      	add	r3, r1
 8003556:	333d      	adds	r3, #61	; 0x3d
 8003558:	2201      	movs	r2, #1
 800355a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800355c:	7bfa      	ldrb	r2, [r7, #15]
 800355e:	6879      	ldr	r1, [r7, #4]
 8003560:	4613      	mov	r3, r2
 8003562:	00db      	lsls	r3, r3, #3
 8003564:	4413      	add	r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	440b      	add	r3, r1
 800356a:	333c      	adds	r3, #60	; 0x3c
 800356c:	7bfa      	ldrb	r2, [r7, #15]
 800356e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003570:	7bfa      	ldrb	r2, [r7, #15]
 8003572:	7bfb      	ldrb	r3, [r7, #15]
 8003574:	b298      	uxth	r0, r3
 8003576:	6879      	ldr	r1, [r7, #4]
 8003578:	4613      	mov	r3, r2
 800357a:	00db      	lsls	r3, r3, #3
 800357c:	4413      	add	r3, r2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	440b      	add	r3, r1
 8003582:	3344      	adds	r3, #68	; 0x44
 8003584:	4602      	mov	r2, r0
 8003586:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003588:	7bfa      	ldrb	r2, [r7, #15]
 800358a:	6879      	ldr	r1, [r7, #4]
 800358c:	4613      	mov	r3, r2
 800358e:	00db      	lsls	r3, r3, #3
 8003590:	4413      	add	r3, r2
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	440b      	add	r3, r1
 8003596:	3340      	adds	r3, #64	; 0x40
 8003598:	2200      	movs	r2, #0
 800359a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800359c:	7bfa      	ldrb	r2, [r7, #15]
 800359e:	6879      	ldr	r1, [r7, #4]
 80035a0:	4613      	mov	r3, r2
 80035a2:	00db      	lsls	r3, r3, #3
 80035a4:	4413      	add	r3, r2
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	440b      	add	r3, r1
 80035aa:	3348      	adds	r3, #72	; 0x48
 80035ac:	2200      	movs	r2, #0
 80035ae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80035b0:	7bfa      	ldrb	r2, [r7, #15]
 80035b2:	6879      	ldr	r1, [r7, #4]
 80035b4:	4613      	mov	r3, r2
 80035b6:	00db      	lsls	r3, r3, #3
 80035b8:	4413      	add	r3, r2
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	440b      	add	r3, r1
 80035be:	334c      	adds	r3, #76	; 0x4c
 80035c0:	2200      	movs	r2, #0
 80035c2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80035c4:	7bfa      	ldrb	r2, [r7, #15]
 80035c6:	6879      	ldr	r1, [r7, #4]
 80035c8:	4613      	mov	r3, r2
 80035ca:	00db      	lsls	r3, r3, #3
 80035cc:	4413      	add	r3, r2
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	440b      	add	r3, r1
 80035d2:	3354      	adds	r3, #84	; 0x54
 80035d4:	2200      	movs	r2, #0
 80035d6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035d8:	7bfb      	ldrb	r3, [r7, #15]
 80035da:	3301      	adds	r3, #1
 80035dc:	73fb      	strb	r3, [r7, #15]
 80035de:	7bfa      	ldrb	r2, [r7, #15]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d3af      	bcc.n	8003548 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035e8:	2300      	movs	r3, #0
 80035ea:	73fb      	strb	r3, [r7, #15]
 80035ec:	e044      	b.n	8003678 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80035ee:	7bfa      	ldrb	r2, [r7, #15]
 80035f0:	6879      	ldr	r1, [r7, #4]
 80035f2:	4613      	mov	r3, r2
 80035f4:	00db      	lsls	r3, r3, #3
 80035f6:	4413      	add	r3, r2
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	440b      	add	r3, r1
 80035fc:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003600:	2200      	movs	r2, #0
 8003602:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003604:	7bfa      	ldrb	r2, [r7, #15]
 8003606:	6879      	ldr	r1, [r7, #4]
 8003608:	4613      	mov	r3, r2
 800360a:	00db      	lsls	r3, r3, #3
 800360c:	4413      	add	r3, r2
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	440b      	add	r3, r1
 8003612:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003616:	7bfa      	ldrb	r2, [r7, #15]
 8003618:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800361a:	7bfa      	ldrb	r2, [r7, #15]
 800361c:	6879      	ldr	r1, [r7, #4]
 800361e:	4613      	mov	r3, r2
 8003620:	00db      	lsls	r3, r3, #3
 8003622:	4413      	add	r3, r2
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	440b      	add	r3, r1
 8003628:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800362c:	2200      	movs	r2, #0
 800362e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003630:	7bfa      	ldrb	r2, [r7, #15]
 8003632:	6879      	ldr	r1, [r7, #4]
 8003634:	4613      	mov	r3, r2
 8003636:	00db      	lsls	r3, r3, #3
 8003638:	4413      	add	r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	440b      	add	r3, r1
 800363e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003642:	2200      	movs	r2, #0
 8003644:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003646:	7bfa      	ldrb	r2, [r7, #15]
 8003648:	6879      	ldr	r1, [r7, #4]
 800364a:	4613      	mov	r3, r2
 800364c:	00db      	lsls	r3, r3, #3
 800364e:	4413      	add	r3, r2
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	440b      	add	r3, r1
 8003654:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003658:	2200      	movs	r2, #0
 800365a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800365c:	7bfa      	ldrb	r2, [r7, #15]
 800365e:	6879      	ldr	r1, [r7, #4]
 8003660:	4613      	mov	r3, r2
 8003662:	00db      	lsls	r3, r3, #3
 8003664:	4413      	add	r3, r2
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	440b      	add	r3, r1
 800366a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800366e:	2200      	movs	r2, #0
 8003670:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003672:	7bfb      	ldrb	r3, [r7, #15]
 8003674:	3301      	adds	r3, #1
 8003676:	73fb      	strb	r3, [r7, #15]
 8003678:	7bfa      	ldrb	r2, [r7, #15]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	429a      	cmp	r2, r3
 8003680:	d3b5      	bcc.n	80035ee <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	603b      	str	r3, [r7, #0]
 8003688:	687e      	ldr	r6, [r7, #4]
 800368a:	466d      	mov	r5, sp
 800368c:	f106 0410 	add.w	r4, r6, #16
 8003690:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003692:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003694:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003696:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003698:	e894 0003 	ldmia.w	r4, {r0, r1}
 800369c:	e885 0003 	stmia.w	r5, {r0, r1}
 80036a0:	1d33      	adds	r3, r6, #4
 80036a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036a4:	6838      	ldr	r0, [r7, #0]
 80036a6:	f003 fe87 	bl	80073b8 <USB_DevInit>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d005      	beq.n	80036bc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2202      	movs	r2, #2
 80036b4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e014      	b.n	80036e6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d102      	bne.n	80036da <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f000 f80b 	bl	80036f0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4618      	mov	r0, r3
 80036e0:	f004 f845 	bl	800776e <USB_DevDisconnect>

  return HAL_OK;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3714      	adds	r7, #20
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080036f0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b085      	sub	sp, #20
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2201      	movs	r2, #1
 8003702:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	699b      	ldr	r3, [r3, #24]
 8003712:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800371e:	4b05      	ldr	r3, [pc, #20]	; (8003734 <HAL_PCDEx_ActivateLPM+0x44>)
 8003720:	4313      	orrs	r3, r2
 8003722:	68fa      	ldr	r2, [r7, #12]
 8003724:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003726:	2300      	movs	r3, #0
}
 8003728:	4618      	mov	r0, r3
 800372a:	3714      	adds	r7, #20
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr
 8003734:	10000003 	.word	0x10000003

08003738 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003738:	b480      	push	{r7}
 800373a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800373c:	4b05      	ldr	r3, [pc, #20]	; (8003754 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a04      	ldr	r2, [pc, #16]	; (8003754 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003742:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003746:	6013      	str	r3, [r2, #0]
}
 8003748:	bf00      	nop
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr
 8003752:	bf00      	nop
 8003754:	40007000 	.word	0x40007000

08003758 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800375e:	2300      	movs	r3, #0
 8003760:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003762:	4b23      	ldr	r3, [pc, #140]	; (80037f0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003766:	4a22      	ldr	r2, [pc, #136]	; (80037f0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003768:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800376c:	6413      	str	r3, [r2, #64]	; 0x40
 800376e:	4b20      	ldr	r3, [pc, #128]	; (80037f0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003776:	603b      	str	r3, [r7, #0]
 8003778:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800377a:	4b1e      	ldr	r3, [pc, #120]	; (80037f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a1d      	ldr	r2, [pc, #116]	; (80037f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003780:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003784:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003786:	f7fe ffa1 	bl	80026cc <HAL_GetTick>
 800378a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800378c:	e009      	b.n	80037a2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800378e:	f7fe ff9d 	bl	80026cc <HAL_GetTick>
 8003792:	4602      	mov	r2, r0
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800379c:	d901      	bls.n	80037a2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e022      	b.n	80037e8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80037a2:	4b14      	ldr	r3, [pc, #80]	; (80037f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037ae:	d1ee      	bne.n	800378e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80037b0:	4b10      	ldr	r3, [pc, #64]	; (80037f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a0f      	ldr	r2, [pc, #60]	; (80037f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80037b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037ba:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80037bc:	f7fe ff86 	bl	80026cc <HAL_GetTick>
 80037c0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80037c2:	e009      	b.n	80037d8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80037c4:	f7fe ff82 	bl	80026cc <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80037d2:	d901      	bls.n	80037d8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80037d4:	2303      	movs	r3, #3
 80037d6:	e007      	b.n	80037e8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80037d8:	4b06      	ldr	r3, [pc, #24]	; (80037f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80037e4:	d1ee      	bne.n	80037c4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80037e6:	2300      	movs	r3, #0
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3708      	adds	r7, #8
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	40023800 	.word	0x40023800
 80037f4:	40007000 	.word	0x40007000

080037f8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b086      	sub	sp, #24
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003800:	2300      	movs	r3, #0
 8003802:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d101      	bne.n	800380e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e29b      	b.n	8003d46 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0301 	and.w	r3, r3, #1
 8003816:	2b00      	cmp	r3, #0
 8003818:	f000 8087 	beq.w	800392a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800381c:	4b96      	ldr	r3, [pc, #600]	; (8003a78 <HAL_RCC_OscConfig+0x280>)
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	f003 030c 	and.w	r3, r3, #12
 8003824:	2b04      	cmp	r3, #4
 8003826:	d00c      	beq.n	8003842 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003828:	4b93      	ldr	r3, [pc, #588]	; (8003a78 <HAL_RCC_OscConfig+0x280>)
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	f003 030c 	and.w	r3, r3, #12
 8003830:	2b08      	cmp	r3, #8
 8003832:	d112      	bne.n	800385a <HAL_RCC_OscConfig+0x62>
 8003834:	4b90      	ldr	r3, [pc, #576]	; (8003a78 <HAL_RCC_OscConfig+0x280>)
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800383c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003840:	d10b      	bne.n	800385a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003842:	4b8d      	ldr	r3, [pc, #564]	; (8003a78 <HAL_RCC_OscConfig+0x280>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d06c      	beq.n	8003928 <HAL_RCC_OscConfig+0x130>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d168      	bne.n	8003928 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e275      	b.n	8003d46 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003862:	d106      	bne.n	8003872 <HAL_RCC_OscConfig+0x7a>
 8003864:	4b84      	ldr	r3, [pc, #528]	; (8003a78 <HAL_RCC_OscConfig+0x280>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a83      	ldr	r2, [pc, #524]	; (8003a78 <HAL_RCC_OscConfig+0x280>)
 800386a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800386e:	6013      	str	r3, [r2, #0]
 8003870:	e02e      	b.n	80038d0 <HAL_RCC_OscConfig+0xd8>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d10c      	bne.n	8003894 <HAL_RCC_OscConfig+0x9c>
 800387a:	4b7f      	ldr	r3, [pc, #508]	; (8003a78 <HAL_RCC_OscConfig+0x280>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a7e      	ldr	r2, [pc, #504]	; (8003a78 <HAL_RCC_OscConfig+0x280>)
 8003880:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003884:	6013      	str	r3, [r2, #0]
 8003886:	4b7c      	ldr	r3, [pc, #496]	; (8003a78 <HAL_RCC_OscConfig+0x280>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a7b      	ldr	r2, [pc, #492]	; (8003a78 <HAL_RCC_OscConfig+0x280>)
 800388c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003890:	6013      	str	r3, [r2, #0]
 8003892:	e01d      	b.n	80038d0 <HAL_RCC_OscConfig+0xd8>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800389c:	d10c      	bne.n	80038b8 <HAL_RCC_OscConfig+0xc0>
 800389e:	4b76      	ldr	r3, [pc, #472]	; (8003a78 <HAL_RCC_OscConfig+0x280>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a75      	ldr	r2, [pc, #468]	; (8003a78 <HAL_RCC_OscConfig+0x280>)
 80038a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038a8:	6013      	str	r3, [r2, #0]
 80038aa:	4b73      	ldr	r3, [pc, #460]	; (8003a78 <HAL_RCC_OscConfig+0x280>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a72      	ldr	r2, [pc, #456]	; (8003a78 <HAL_RCC_OscConfig+0x280>)
 80038b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038b4:	6013      	str	r3, [r2, #0]
 80038b6:	e00b      	b.n	80038d0 <HAL_RCC_OscConfig+0xd8>
 80038b8:	4b6f      	ldr	r3, [pc, #444]	; (8003a78 <HAL_RCC_OscConfig+0x280>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a6e      	ldr	r2, [pc, #440]	; (8003a78 <HAL_RCC_OscConfig+0x280>)
 80038be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038c2:	6013      	str	r3, [r2, #0]
 80038c4:	4b6c      	ldr	r3, [pc, #432]	; (8003a78 <HAL_RCC_OscConfig+0x280>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a6b      	ldr	r2, [pc, #428]	; (8003a78 <HAL_RCC_OscConfig+0x280>)
 80038ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d013      	beq.n	8003900 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d8:	f7fe fef8 	bl	80026cc <HAL_GetTick>
 80038dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038de:	e008      	b.n	80038f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038e0:	f7fe fef4 	bl	80026cc <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	2b64      	cmp	r3, #100	; 0x64
 80038ec:	d901      	bls.n	80038f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e229      	b.n	8003d46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038f2:	4b61      	ldr	r3, [pc, #388]	; (8003a78 <HAL_RCC_OscConfig+0x280>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d0f0      	beq.n	80038e0 <HAL_RCC_OscConfig+0xe8>
 80038fe:	e014      	b.n	800392a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003900:	f7fe fee4 	bl	80026cc <HAL_GetTick>
 8003904:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003906:	e008      	b.n	800391a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003908:	f7fe fee0 	bl	80026cc <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	2b64      	cmp	r3, #100	; 0x64
 8003914:	d901      	bls.n	800391a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e215      	b.n	8003d46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800391a:	4b57      	ldr	r3, [pc, #348]	; (8003a78 <HAL_RCC_OscConfig+0x280>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d1f0      	bne.n	8003908 <HAL_RCC_OscConfig+0x110>
 8003926:	e000      	b.n	800392a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003928:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0302 	and.w	r3, r3, #2
 8003932:	2b00      	cmp	r3, #0
 8003934:	d069      	beq.n	8003a0a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003936:	4b50      	ldr	r3, [pc, #320]	; (8003a78 <HAL_RCC_OscConfig+0x280>)
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f003 030c 	and.w	r3, r3, #12
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00b      	beq.n	800395a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003942:	4b4d      	ldr	r3, [pc, #308]	; (8003a78 <HAL_RCC_OscConfig+0x280>)
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	f003 030c 	and.w	r3, r3, #12
 800394a:	2b08      	cmp	r3, #8
 800394c:	d11c      	bne.n	8003988 <HAL_RCC_OscConfig+0x190>
 800394e:	4b4a      	ldr	r3, [pc, #296]	; (8003a78 <HAL_RCC_OscConfig+0x280>)
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d116      	bne.n	8003988 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800395a:	4b47      	ldr	r3, [pc, #284]	; (8003a78 <HAL_RCC_OscConfig+0x280>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0302 	and.w	r3, r3, #2
 8003962:	2b00      	cmp	r3, #0
 8003964:	d005      	beq.n	8003972 <HAL_RCC_OscConfig+0x17a>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	2b01      	cmp	r3, #1
 800396c:	d001      	beq.n	8003972 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e1e9      	b.n	8003d46 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003972:	4b41      	ldr	r3, [pc, #260]	; (8003a78 <HAL_RCC_OscConfig+0x280>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	00db      	lsls	r3, r3, #3
 8003980:	493d      	ldr	r1, [pc, #244]	; (8003a78 <HAL_RCC_OscConfig+0x280>)
 8003982:	4313      	orrs	r3, r2
 8003984:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003986:	e040      	b.n	8003a0a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d023      	beq.n	80039d8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003990:	4b39      	ldr	r3, [pc, #228]	; (8003a78 <HAL_RCC_OscConfig+0x280>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a38      	ldr	r2, [pc, #224]	; (8003a78 <HAL_RCC_OscConfig+0x280>)
 8003996:	f043 0301 	orr.w	r3, r3, #1
 800399a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800399c:	f7fe fe96 	bl	80026cc <HAL_GetTick>
 80039a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039a2:	e008      	b.n	80039b6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039a4:	f7fe fe92 	bl	80026cc <HAL_GetTick>
 80039a8:	4602      	mov	r2, r0
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d901      	bls.n	80039b6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e1c7      	b.n	8003d46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039b6:	4b30      	ldr	r3, [pc, #192]	; (8003a78 <HAL_RCC_OscConfig+0x280>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0302 	and.w	r3, r3, #2
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d0f0      	beq.n	80039a4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039c2:	4b2d      	ldr	r3, [pc, #180]	; (8003a78 <HAL_RCC_OscConfig+0x280>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	691b      	ldr	r3, [r3, #16]
 80039ce:	00db      	lsls	r3, r3, #3
 80039d0:	4929      	ldr	r1, [pc, #164]	; (8003a78 <HAL_RCC_OscConfig+0x280>)
 80039d2:	4313      	orrs	r3, r2
 80039d4:	600b      	str	r3, [r1, #0]
 80039d6:	e018      	b.n	8003a0a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039d8:	4b27      	ldr	r3, [pc, #156]	; (8003a78 <HAL_RCC_OscConfig+0x280>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a26      	ldr	r2, [pc, #152]	; (8003a78 <HAL_RCC_OscConfig+0x280>)
 80039de:	f023 0301 	bic.w	r3, r3, #1
 80039e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e4:	f7fe fe72 	bl	80026cc <HAL_GetTick>
 80039e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039ea:	e008      	b.n	80039fe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039ec:	f7fe fe6e 	bl	80026cc <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d901      	bls.n	80039fe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e1a3      	b.n	8003d46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039fe:	4b1e      	ldr	r3, [pc, #120]	; (8003a78 <HAL_RCC_OscConfig+0x280>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0302 	and.w	r3, r3, #2
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d1f0      	bne.n	80039ec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0308 	and.w	r3, r3, #8
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d038      	beq.n	8003a88 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	695b      	ldr	r3, [r3, #20]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d019      	beq.n	8003a52 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a1e:	4b16      	ldr	r3, [pc, #88]	; (8003a78 <HAL_RCC_OscConfig+0x280>)
 8003a20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a22:	4a15      	ldr	r2, [pc, #84]	; (8003a78 <HAL_RCC_OscConfig+0x280>)
 8003a24:	f043 0301 	orr.w	r3, r3, #1
 8003a28:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a2a:	f7fe fe4f 	bl	80026cc <HAL_GetTick>
 8003a2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a30:	e008      	b.n	8003a44 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a32:	f7fe fe4b 	bl	80026cc <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d901      	bls.n	8003a44 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	e180      	b.n	8003d46 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a44:	4b0c      	ldr	r3, [pc, #48]	; (8003a78 <HAL_RCC_OscConfig+0x280>)
 8003a46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a48:	f003 0302 	and.w	r3, r3, #2
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d0f0      	beq.n	8003a32 <HAL_RCC_OscConfig+0x23a>
 8003a50:	e01a      	b.n	8003a88 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a52:	4b09      	ldr	r3, [pc, #36]	; (8003a78 <HAL_RCC_OscConfig+0x280>)
 8003a54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a56:	4a08      	ldr	r2, [pc, #32]	; (8003a78 <HAL_RCC_OscConfig+0x280>)
 8003a58:	f023 0301 	bic.w	r3, r3, #1
 8003a5c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a5e:	f7fe fe35 	bl	80026cc <HAL_GetTick>
 8003a62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a64:	e00a      	b.n	8003a7c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a66:	f7fe fe31 	bl	80026cc <HAL_GetTick>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	d903      	bls.n	8003a7c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	e166      	b.n	8003d46 <HAL_RCC_OscConfig+0x54e>
 8003a78:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a7c:	4b92      	ldr	r3, [pc, #584]	; (8003cc8 <HAL_RCC_OscConfig+0x4d0>)
 8003a7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a80:	f003 0302 	and.w	r3, r3, #2
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d1ee      	bne.n	8003a66 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0304 	and.w	r3, r3, #4
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	f000 80a4 	beq.w	8003bde <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a96:	4b8c      	ldr	r3, [pc, #560]	; (8003cc8 <HAL_RCC_OscConfig+0x4d0>)
 8003a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d10d      	bne.n	8003abe <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003aa2:	4b89      	ldr	r3, [pc, #548]	; (8003cc8 <HAL_RCC_OscConfig+0x4d0>)
 8003aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa6:	4a88      	ldr	r2, [pc, #544]	; (8003cc8 <HAL_RCC_OscConfig+0x4d0>)
 8003aa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aac:	6413      	str	r3, [r2, #64]	; 0x40
 8003aae:	4b86      	ldr	r3, [pc, #536]	; (8003cc8 <HAL_RCC_OscConfig+0x4d0>)
 8003ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ab6:	60bb      	str	r3, [r7, #8]
 8003ab8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003aba:	2301      	movs	r3, #1
 8003abc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003abe:	4b83      	ldr	r3, [pc, #524]	; (8003ccc <HAL_RCC_OscConfig+0x4d4>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d118      	bne.n	8003afc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003aca:	4b80      	ldr	r3, [pc, #512]	; (8003ccc <HAL_RCC_OscConfig+0x4d4>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a7f      	ldr	r2, [pc, #508]	; (8003ccc <HAL_RCC_OscConfig+0x4d4>)
 8003ad0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ad4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ad6:	f7fe fdf9 	bl	80026cc <HAL_GetTick>
 8003ada:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003adc:	e008      	b.n	8003af0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ade:	f7fe fdf5 	bl	80026cc <HAL_GetTick>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	2b64      	cmp	r3, #100	; 0x64
 8003aea:	d901      	bls.n	8003af0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003aec:	2303      	movs	r3, #3
 8003aee:	e12a      	b.n	8003d46 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003af0:	4b76      	ldr	r3, [pc, #472]	; (8003ccc <HAL_RCC_OscConfig+0x4d4>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d0f0      	beq.n	8003ade <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d106      	bne.n	8003b12 <HAL_RCC_OscConfig+0x31a>
 8003b04:	4b70      	ldr	r3, [pc, #448]	; (8003cc8 <HAL_RCC_OscConfig+0x4d0>)
 8003b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b08:	4a6f      	ldr	r2, [pc, #444]	; (8003cc8 <HAL_RCC_OscConfig+0x4d0>)
 8003b0a:	f043 0301 	orr.w	r3, r3, #1
 8003b0e:	6713      	str	r3, [r2, #112]	; 0x70
 8003b10:	e02d      	b.n	8003b6e <HAL_RCC_OscConfig+0x376>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d10c      	bne.n	8003b34 <HAL_RCC_OscConfig+0x33c>
 8003b1a:	4b6b      	ldr	r3, [pc, #428]	; (8003cc8 <HAL_RCC_OscConfig+0x4d0>)
 8003b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b1e:	4a6a      	ldr	r2, [pc, #424]	; (8003cc8 <HAL_RCC_OscConfig+0x4d0>)
 8003b20:	f023 0301 	bic.w	r3, r3, #1
 8003b24:	6713      	str	r3, [r2, #112]	; 0x70
 8003b26:	4b68      	ldr	r3, [pc, #416]	; (8003cc8 <HAL_RCC_OscConfig+0x4d0>)
 8003b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b2a:	4a67      	ldr	r2, [pc, #412]	; (8003cc8 <HAL_RCC_OscConfig+0x4d0>)
 8003b2c:	f023 0304 	bic.w	r3, r3, #4
 8003b30:	6713      	str	r3, [r2, #112]	; 0x70
 8003b32:	e01c      	b.n	8003b6e <HAL_RCC_OscConfig+0x376>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	2b05      	cmp	r3, #5
 8003b3a:	d10c      	bne.n	8003b56 <HAL_RCC_OscConfig+0x35e>
 8003b3c:	4b62      	ldr	r3, [pc, #392]	; (8003cc8 <HAL_RCC_OscConfig+0x4d0>)
 8003b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b40:	4a61      	ldr	r2, [pc, #388]	; (8003cc8 <HAL_RCC_OscConfig+0x4d0>)
 8003b42:	f043 0304 	orr.w	r3, r3, #4
 8003b46:	6713      	str	r3, [r2, #112]	; 0x70
 8003b48:	4b5f      	ldr	r3, [pc, #380]	; (8003cc8 <HAL_RCC_OscConfig+0x4d0>)
 8003b4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b4c:	4a5e      	ldr	r2, [pc, #376]	; (8003cc8 <HAL_RCC_OscConfig+0x4d0>)
 8003b4e:	f043 0301 	orr.w	r3, r3, #1
 8003b52:	6713      	str	r3, [r2, #112]	; 0x70
 8003b54:	e00b      	b.n	8003b6e <HAL_RCC_OscConfig+0x376>
 8003b56:	4b5c      	ldr	r3, [pc, #368]	; (8003cc8 <HAL_RCC_OscConfig+0x4d0>)
 8003b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b5a:	4a5b      	ldr	r2, [pc, #364]	; (8003cc8 <HAL_RCC_OscConfig+0x4d0>)
 8003b5c:	f023 0301 	bic.w	r3, r3, #1
 8003b60:	6713      	str	r3, [r2, #112]	; 0x70
 8003b62:	4b59      	ldr	r3, [pc, #356]	; (8003cc8 <HAL_RCC_OscConfig+0x4d0>)
 8003b64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b66:	4a58      	ldr	r2, [pc, #352]	; (8003cc8 <HAL_RCC_OscConfig+0x4d0>)
 8003b68:	f023 0304 	bic.w	r3, r3, #4
 8003b6c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d015      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b76:	f7fe fda9 	bl	80026cc <HAL_GetTick>
 8003b7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b7c:	e00a      	b.n	8003b94 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b7e:	f7fe fda5 	bl	80026cc <HAL_GetTick>
 8003b82:	4602      	mov	r2, r0
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d901      	bls.n	8003b94 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e0d8      	b.n	8003d46 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b94:	4b4c      	ldr	r3, [pc, #304]	; (8003cc8 <HAL_RCC_OscConfig+0x4d0>)
 8003b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b98:	f003 0302 	and.w	r3, r3, #2
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d0ee      	beq.n	8003b7e <HAL_RCC_OscConfig+0x386>
 8003ba0:	e014      	b.n	8003bcc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ba2:	f7fe fd93 	bl	80026cc <HAL_GetTick>
 8003ba6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ba8:	e00a      	b.n	8003bc0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003baa:	f7fe fd8f 	bl	80026cc <HAL_GetTick>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d901      	bls.n	8003bc0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	e0c2      	b.n	8003d46 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bc0:	4b41      	ldr	r3, [pc, #260]	; (8003cc8 <HAL_RCC_OscConfig+0x4d0>)
 8003bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bc4:	f003 0302 	and.w	r3, r3, #2
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d1ee      	bne.n	8003baa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003bcc:	7dfb      	ldrb	r3, [r7, #23]
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d105      	bne.n	8003bde <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bd2:	4b3d      	ldr	r3, [pc, #244]	; (8003cc8 <HAL_RCC_OscConfig+0x4d0>)
 8003bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd6:	4a3c      	ldr	r2, [pc, #240]	; (8003cc8 <HAL_RCC_OscConfig+0x4d0>)
 8003bd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bdc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	699b      	ldr	r3, [r3, #24]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	f000 80ae 	beq.w	8003d44 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003be8:	4b37      	ldr	r3, [pc, #220]	; (8003cc8 <HAL_RCC_OscConfig+0x4d0>)
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	f003 030c 	and.w	r3, r3, #12
 8003bf0:	2b08      	cmp	r3, #8
 8003bf2:	d06d      	beq.n	8003cd0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	699b      	ldr	r3, [r3, #24]
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	d14b      	bne.n	8003c94 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bfc:	4b32      	ldr	r3, [pc, #200]	; (8003cc8 <HAL_RCC_OscConfig+0x4d0>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a31      	ldr	r2, [pc, #196]	; (8003cc8 <HAL_RCC_OscConfig+0x4d0>)
 8003c02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c08:	f7fe fd60 	bl	80026cc <HAL_GetTick>
 8003c0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c0e:	e008      	b.n	8003c22 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c10:	f7fe fd5c 	bl	80026cc <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	d901      	bls.n	8003c22 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e091      	b.n	8003d46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c22:	4b29      	ldr	r3, [pc, #164]	; (8003cc8 <HAL_RCC_OscConfig+0x4d0>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d1f0      	bne.n	8003c10 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	69da      	ldr	r2, [r3, #28]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a1b      	ldr	r3, [r3, #32]
 8003c36:	431a      	orrs	r2, r3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3c:	019b      	lsls	r3, r3, #6
 8003c3e:	431a      	orrs	r2, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c44:	085b      	lsrs	r3, r3, #1
 8003c46:	3b01      	subs	r3, #1
 8003c48:	041b      	lsls	r3, r3, #16
 8003c4a:	431a      	orrs	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c50:	061b      	lsls	r3, r3, #24
 8003c52:	431a      	orrs	r2, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c58:	071b      	lsls	r3, r3, #28
 8003c5a:	491b      	ldr	r1, [pc, #108]	; (8003cc8 <HAL_RCC_OscConfig+0x4d0>)
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c60:	4b19      	ldr	r3, [pc, #100]	; (8003cc8 <HAL_RCC_OscConfig+0x4d0>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a18      	ldr	r2, [pc, #96]	; (8003cc8 <HAL_RCC_OscConfig+0x4d0>)
 8003c66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c6c:	f7fe fd2e 	bl	80026cc <HAL_GetTick>
 8003c70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c72:	e008      	b.n	8003c86 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c74:	f7fe fd2a 	bl	80026cc <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d901      	bls.n	8003c86 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e05f      	b.n	8003d46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c86:	4b10      	ldr	r3, [pc, #64]	; (8003cc8 <HAL_RCC_OscConfig+0x4d0>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d0f0      	beq.n	8003c74 <HAL_RCC_OscConfig+0x47c>
 8003c92:	e057      	b.n	8003d44 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c94:	4b0c      	ldr	r3, [pc, #48]	; (8003cc8 <HAL_RCC_OscConfig+0x4d0>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a0b      	ldr	r2, [pc, #44]	; (8003cc8 <HAL_RCC_OscConfig+0x4d0>)
 8003c9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca0:	f7fe fd14 	bl	80026cc <HAL_GetTick>
 8003ca4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ca6:	e008      	b.n	8003cba <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ca8:	f7fe fd10 	bl	80026cc <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d901      	bls.n	8003cba <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e045      	b.n	8003d46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cba:	4b03      	ldr	r3, [pc, #12]	; (8003cc8 <HAL_RCC_OscConfig+0x4d0>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d1f0      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x4b0>
 8003cc6:	e03d      	b.n	8003d44 <HAL_RCC_OscConfig+0x54c>
 8003cc8:	40023800 	.word	0x40023800
 8003ccc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003cd0:	4b1f      	ldr	r3, [pc, #124]	; (8003d50 <HAL_RCC_OscConfig+0x558>)
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	699b      	ldr	r3, [r3, #24]
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d030      	beq.n	8003d40 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d129      	bne.n	8003d40 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d122      	bne.n	8003d40 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003cfa:	68fa      	ldr	r2, [r7, #12]
 8003cfc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d00:	4013      	ands	r3, r2
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d06:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d119      	bne.n	8003d40 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d16:	085b      	lsrs	r3, r3, #1
 8003d18:	3b01      	subs	r3, #1
 8003d1a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d10f      	bne.n	8003d40 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d2a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d107      	bne.n	8003d40 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d001      	beq.n	8003d44 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e000      	b.n	8003d46 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003d44:	2300      	movs	r3, #0
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3718      	adds	r7, #24
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	40023800 	.word	0x40023800

08003d54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d101      	bne.n	8003d6c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e0d0      	b.n	8003f0e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d6c:	4b6a      	ldr	r3, [pc, #424]	; (8003f18 <HAL_RCC_ClockConfig+0x1c4>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 030f 	and.w	r3, r3, #15
 8003d74:	683a      	ldr	r2, [r7, #0]
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d910      	bls.n	8003d9c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d7a:	4b67      	ldr	r3, [pc, #412]	; (8003f18 <HAL_RCC_ClockConfig+0x1c4>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f023 020f 	bic.w	r2, r3, #15
 8003d82:	4965      	ldr	r1, [pc, #404]	; (8003f18 <HAL_RCC_ClockConfig+0x1c4>)
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d8a:	4b63      	ldr	r3, [pc, #396]	; (8003f18 <HAL_RCC_ClockConfig+0x1c4>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 030f 	and.w	r3, r3, #15
 8003d92:	683a      	ldr	r2, [r7, #0]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d001      	beq.n	8003d9c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e0b8      	b.n	8003f0e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0302 	and.w	r3, r3, #2
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d020      	beq.n	8003dea <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0304 	and.w	r3, r3, #4
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d005      	beq.n	8003dc0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003db4:	4b59      	ldr	r3, [pc, #356]	; (8003f1c <HAL_RCC_ClockConfig+0x1c8>)
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	4a58      	ldr	r2, [pc, #352]	; (8003f1c <HAL_RCC_ClockConfig+0x1c8>)
 8003dba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003dbe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0308 	and.w	r3, r3, #8
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d005      	beq.n	8003dd8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003dcc:	4b53      	ldr	r3, [pc, #332]	; (8003f1c <HAL_RCC_ClockConfig+0x1c8>)
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	4a52      	ldr	r2, [pc, #328]	; (8003f1c <HAL_RCC_ClockConfig+0x1c8>)
 8003dd2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003dd6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dd8:	4b50      	ldr	r3, [pc, #320]	; (8003f1c <HAL_RCC_ClockConfig+0x1c8>)
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	494d      	ldr	r1, [pc, #308]	; (8003f1c <HAL_RCC_ClockConfig+0x1c8>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0301 	and.w	r3, r3, #1
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d040      	beq.n	8003e78 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d107      	bne.n	8003e0e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dfe:	4b47      	ldr	r3, [pc, #284]	; (8003f1c <HAL_RCC_ClockConfig+0x1c8>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d115      	bne.n	8003e36 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e07f      	b.n	8003f0e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d107      	bne.n	8003e26 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e16:	4b41      	ldr	r3, [pc, #260]	; (8003f1c <HAL_RCC_ClockConfig+0x1c8>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d109      	bne.n	8003e36 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e073      	b.n	8003f0e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e26:	4b3d      	ldr	r3, [pc, #244]	; (8003f1c <HAL_RCC_ClockConfig+0x1c8>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0302 	and.w	r3, r3, #2
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d101      	bne.n	8003e36 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e06b      	b.n	8003f0e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e36:	4b39      	ldr	r3, [pc, #228]	; (8003f1c <HAL_RCC_ClockConfig+0x1c8>)
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	f023 0203 	bic.w	r2, r3, #3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	4936      	ldr	r1, [pc, #216]	; (8003f1c <HAL_RCC_ClockConfig+0x1c8>)
 8003e44:	4313      	orrs	r3, r2
 8003e46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e48:	f7fe fc40 	bl	80026cc <HAL_GetTick>
 8003e4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e4e:	e00a      	b.n	8003e66 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e50:	f7fe fc3c 	bl	80026cc <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d901      	bls.n	8003e66 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e053      	b.n	8003f0e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e66:	4b2d      	ldr	r3, [pc, #180]	; (8003f1c <HAL_RCC_ClockConfig+0x1c8>)
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	f003 020c 	and.w	r2, r3, #12
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d1eb      	bne.n	8003e50 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e78:	4b27      	ldr	r3, [pc, #156]	; (8003f18 <HAL_RCC_ClockConfig+0x1c4>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 030f 	and.w	r3, r3, #15
 8003e80:	683a      	ldr	r2, [r7, #0]
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d210      	bcs.n	8003ea8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e86:	4b24      	ldr	r3, [pc, #144]	; (8003f18 <HAL_RCC_ClockConfig+0x1c4>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f023 020f 	bic.w	r2, r3, #15
 8003e8e:	4922      	ldr	r1, [pc, #136]	; (8003f18 <HAL_RCC_ClockConfig+0x1c4>)
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e96:	4b20      	ldr	r3, [pc, #128]	; (8003f18 <HAL_RCC_ClockConfig+0x1c4>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 030f 	and.w	r3, r3, #15
 8003e9e:	683a      	ldr	r2, [r7, #0]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d001      	beq.n	8003ea8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e032      	b.n	8003f0e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0304 	and.w	r3, r3, #4
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d008      	beq.n	8003ec6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003eb4:	4b19      	ldr	r3, [pc, #100]	; (8003f1c <HAL_RCC_ClockConfig+0x1c8>)
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	4916      	ldr	r1, [pc, #88]	; (8003f1c <HAL_RCC_ClockConfig+0x1c8>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0308 	and.w	r3, r3, #8
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d009      	beq.n	8003ee6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003ed2:	4b12      	ldr	r3, [pc, #72]	; (8003f1c <HAL_RCC_ClockConfig+0x1c8>)
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	00db      	lsls	r3, r3, #3
 8003ee0:	490e      	ldr	r1, [pc, #56]	; (8003f1c <HAL_RCC_ClockConfig+0x1c8>)
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ee6:	f000 f821 	bl	8003f2c <HAL_RCC_GetSysClockFreq>
 8003eea:	4602      	mov	r2, r0
 8003eec:	4b0b      	ldr	r3, [pc, #44]	; (8003f1c <HAL_RCC_ClockConfig+0x1c8>)
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	091b      	lsrs	r3, r3, #4
 8003ef2:	f003 030f 	and.w	r3, r3, #15
 8003ef6:	490a      	ldr	r1, [pc, #40]	; (8003f20 <HAL_RCC_ClockConfig+0x1cc>)
 8003ef8:	5ccb      	ldrb	r3, [r1, r3]
 8003efa:	fa22 f303 	lsr.w	r3, r2, r3
 8003efe:	4a09      	ldr	r2, [pc, #36]	; (8003f24 <HAL_RCC_ClockConfig+0x1d0>)
 8003f00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003f02:	4b09      	ldr	r3, [pc, #36]	; (8003f28 <HAL_RCC_ClockConfig+0x1d4>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4618      	mov	r0, r3
 8003f08:	f7fe fa06 	bl	8002318 <HAL_InitTick>

  return HAL_OK;
 8003f0c:	2300      	movs	r3, #0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3710      	adds	r7, #16
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	40023c00 	.word	0x40023c00
 8003f1c:	40023800 	.word	0x40023800
 8003f20:	0801a6b8 	.word	0x0801a6b8
 8003f24:	20000004 	.word	0x20000004
 8003f28:	20000008 	.word	0x20000008

08003f2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f30:	b094      	sub	sp, #80	; 0x50
 8003f32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003f34:	2300      	movs	r3, #0
 8003f36:	647b      	str	r3, [r7, #68]	; 0x44
 8003f38:	2300      	movs	r3, #0
 8003f3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003f40:	2300      	movs	r3, #0
 8003f42:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f44:	4b79      	ldr	r3, [pc, #484]	; (800412c <HAL_RCC_GetSysClockFreq+0x200>)
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	f003 030c 	and.w	r3, r3, #12
 8003f4c:	2b08      	cmp	r3, #8
 8003f4e:	d00d      	beq.n	8003f6c <HAL_RCC_GetSysClockFreq+0x40>
 8003f50:	2b08      	cmp	r3, #8
 8003f52:	f200 80e1 	bhi.w	8004118 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d002      	beq.n	8003f60 <HAL_RCC_GetSysClockFreq+0x34>
 8003f5a:	2b04      	cmp	r3, #4
 8003f5c:	d003      	beq.n	8003f66 <HAL_RCC_GetSysClockFreq+0x3a>
 8003f5e:	e0db      	b.n	8004118 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f60:	4b73      	ldr	r3, [pc, #460]	; (8004130 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f62:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f64:	e0db      	b.n	800411e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f66:	4b73      	ldr	r3, [pc, #460]	; (8004134 <HAL_RCC_GetSysClockFreq+0x208>)
 8003f68:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f6a:	e0d8      	b.n	800411e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f6c:	4b6f      	ldr	r3, [pc, #444]	; (800412c <HAL_RCC_GetSysClockFreq+0x200>)
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f74:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003f76:	4b6d      	ldr	r3, [pc, #436]	; (800412c <HAL_RCC_GetSysClockFreq+0x200>)
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d063      	beq.n	800404a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f82:	4b6a      	ldr	r3, [pc, #424]	; (800412c <HAL_RCC_GetSysClockFreq+0x200>)
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	099b      	lsrs	r3, r3, #6
 8003f88:	2200      	movs	r2, #0
 8003f8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f8c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f94:	633b      	str	r3, [r7, #48]	; 0x30
 8003f96:	2300      	movs	r3, #0
 8003f98:	637b      	str	r3, [r7, #52]	; 0x34
 8003f9a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003f9e:	4622      	mov	r2, r4
 8003fa0:	462b      	mov	r3, r5
 8003fa2:	f04f 0000 	mov.w	r0, #0
 8003fa6:	f04f 0100 	mov.w	r1, #0
 8003faa:	0159      	lsls	r1, r3, #5
 8003fac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fb0:	0150      	lsls	r0, r2, #5
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	460b      	mov	r3, r1
 8003fb6:	4621      	mov	r1, r4
 8003fb8:	1a51      	subs	r1, r2, r1
 8003fba:	6139      	str	r1, [r7, #16]
 8003fbc:	4629      	mov	r1, r5
 8003fbe:	eb63 0301 	sbc.w	r3, r3, r1
 8003fc2:	617b      	str	r3, [r7, #20]
 8003fc4:	f04f 0200 	mov.w	r2, #0
 8003fc8:	f04f 0300 	mov.w	r3, #0
 8003fcc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003fd0:	4659      	mov	r1, fp
 8003fd2:	018b      	lsls	r3, r1, #6
 8003fd4:	4651      	mov	r1, sl
 8003fd6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003fda:	4651      	mov	r1, sl
 8003fdc:	018a      	lsls	r2, r1, #6
 8003fde:	4651      	mov	r1, sl
 8003fe0:	ebb2 0801 	subs.w	r8, r2, r1
 8003fe4:	4659      	mov	r1, fp
 8003fe6:	eb63 0901 	sbc.w	r9, r3, r1
 8003fea:	f04f 0200 	mov.w	r2, #0
 8003fee:	f04f 0300 	mov.w	r3, #0
 8003ff2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ff6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ffa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ffe:	4690      	mov	r8, r2
 8004000:	4699      	mov	r9, r3
 8004002:	4623      	mov	r3, r4
 8004004:	eb18 0303 	adds.w	r3, r8, r3
 8004008:	60bb      	str	r3, [r7, #8]
 800400a:	462b      	mov	r3, r5
 800400c:	eb49 0303 	adc.w	r3, r9, r3
 8004010:	60fb      	str	r3, [r7, #12]
 8004012:	f04f 0200 	mov.w	r2, #0
 8004016:	f04f 0300 	mov.w	r3, #0
 800401a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800401e:	4629      	mov	r1, r5
 8004020:	024b      	lsls	r3, r1, #9
 8004022:	4621      	mov	r1, r4
 8004024:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004028:	4621      	mov	r1, r4
 800402a:	024a      	lsls	r2, r1, #9
 800402c:	4610      	mov	r0, r2
 800402e:	4619      	mov	r1, r3
 8004030:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004032:	2200      	movs	r2, #0
 8004034:	62bb      	str	r3, [r7, #40]	; 0x28
 8004036:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004038:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800403c:	f7fc f9b8 	bl	80003b0 <__aeabi_uldivmod>
 8004040:	4602      	mov	r2, r0
 8004042:	460b      	mov	r3, r1
 8004044:	4613      	mov	r3, r2
 8004046:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004048:	e058      	b.n	80040fc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800404a:	4b38      	ldr	r3, [pc, #224]	; (800412c <HAL_RCC_GetSysClockFreq+0x200>)
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	099b      	lsrs	r3, r3, #6
 8004050:	2200      	movs	r2, #0
 8004052:	4618      	mov	r0, r3
 8004054:	4611      	mov	r1, r2
 8004056:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800405a:	623b      	str	r3, [r7, #32]
 800405c:	2300      	movs	r3, #0
 800405e:	627b      	str	r3, [r7, #36]	; 0x24
 8004060:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004064:	4642      	mov	r2, r8
 8004066:	464b      	mov	r3, r9
 8004068:	f04f 0000 	mov.w	r0, #0
 800406c:	f04f 0100 	mov.w	r1, #0
 8004070:	0159      	lsls	r1, r3, #5
 8004072:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004076:	0150      	lsls	r0, r2, #5
 8004078:	4602      	mov	r2, r0
 800407a:	460b      	mov	r3, r1
 800407c:	4641      	mov	r1, r8
 800407e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004082:	4649      	mov	r1, r9
 8004084:	eb63 0b01 	sbc.w	fp, r3, r1
 8004088:	f04f 0200 	mov.w	r2, #0
 800408c:	f04f 0300 	mov.w	r3, #0
 8004090:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004094:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004098:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800409c:	ebb2 040a 	subs.w	r4, r2, sl
 80040a0:	eb63 050b 	sbc.w	r5, r3, fp
 80040a4:	f04f 0200 	mov.w	r2, #0
 80040a8:	f04f 0300 	mov.w	r3, #0
 80040ac:	00eb      	lsls	r3, r5, #3
 80040ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040b2:	00e2      	lsls	r2, r4, #3
 80040b4:	4614      	mov	r4, r2
 80040b6:	461d      	mov	r5, r3
 80040b8:	4643      	mov	r3, r8
 80040ba:	18e3      	adds	r3, r4, r3
 80040bc:	603b      	str	r3, [r7, #0]
 80040be:	464b      	mov	r3, r9
 80040c0:	eb45 0303 	adc.w	r3, r5, r3
 80040c4:	607b      	str	r3, [r7, #4]
 80040c6:	f04f 0200 	mov.w	r2, #0
 80040ca:	f04f 0300 	mov.w	r3, #0
 80040ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80040d2:	4629      	mov	r1, r5
 80040d4:	028b      	lsls	r3, r1, #10
 80040d6:	4621      	mov	r1, r4
 80040d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040dc:	4621      	mov	r1, r4
 80040de:	028a      	lsls	r2, r1, #10
 80040e0:	4610      	mov	r0, r2
 80040e2:	4619      	mov	r1, r3
 80040e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040e6:	2200      	movs	r2, #0
 80040e8:	61bb      	str	r3, [r7, #24]
 80040ea:	61fa      	str	r2, [r7, #28]
 80040ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040f0:	f7fc f95e 	bl	80003b0 <__aeabi_uldivmod>
 80040f4:	4602      	mov	r2, r0
 80040f6:	460b      	mov	r3, r1
 80040f8:	4613      	mov	r3, r2
 80040fa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80040fc:	4b0b      	ldr	r3, [pc, #44]	; (800412c <HAL_RCC_GetSysClockFreq+0x200>)
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	0c1b      	lsrs	r3, r3, #16
 8004102:	f003 0303 	and.w	r3, r3, #3
 8004106:	3301      	adds	r3, #1
 8004108:	005b      	lsls	r3, r3, #1
 800410a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800410c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800410e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004110:	fbb2 f3f3 	udiv	r3, r2, r3
 8004114:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004116:	e002      	b.n	800411e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004118:	4b05      	ldr	r3, [pc, #20]	; (8004130 <HAL_RCC_GetSysClockFreq+0x204>)
 800411a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800411c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800411e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004120:	4618      	mov	r0, r3
 8004122:	3750      	adds	r7, #80	; 0x50
 8004124:	46bd      	mov	sp, r7
 8004126:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800412a:	bf00      	nop
 800412c:	40023800 	.word	0x40023800
 8004130:	00f42400 	.word	0x00f42400
 8004134:	007a1200 	.word	0x007a1200

08004138 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004138:	b480      	push	{r7}
 800413a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800413c:	4b03      	ldr	r3, [pc, #12]	; (800414c <HAL_RCC_GetHCLKFreq+0x14>)
 800413e:	681b      	ldr	r3, [r3, #0]
}
 8004140:	4618      	mov	r0, r3
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	20000004 	.word	0x20000004

08004150 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004154:	f7ff fff0 	bl	8004138 <HAL_RCC_GetHCLKFreq>
 8004158:	4602      	mov	r2, r0
 800415a:	4b05      	ldr	r3, [pc, #20]	; (8004170 <HAL_RCC_GetPCLK1Freq+0x20>)
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	0a9b      	lsrs	r3, r3, #10
 8004160:	f003 0307 	and.w	r3, r3, #7
 8004164:	4903      	ldr	r1, [pc, #12]	; (8004174 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004166:	5ccb      	ldrb	r3, [r1, r3]
 8004168:	fa22 f303 	lsr.w	r3, r2, r3
}
 800416c:	4618      	mov	r0, r3
 800416e:	bd80      	pop	{r7, pc}
 8004170:	40023800 	.word	0x40023800
 8004174:	0801a6c8 	.word	0x0801a6c8

08004178 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800417c:	f7ff ffdc 	bl	8004138 <HAL_RCC_GetHCLKFreq>
 8004180:	4602      	mov	r2, r0
 8004182:	4b05      	ldr	r3, [pc, #20]	; (8004198 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	0b5b      	lsrs	r3, r3, #13
 8004188:	f003 0307 	and.w	r3, r3, #7
 800418c:	4903      	ldr	r1, [pc, #12]	; (800419c <HAL_RCC_GetPCLK2Freq+0x24>)
 800418e:	5ccb      	ldrb	r3, [r1, r3]
 8004190:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004194:	4618      	mov	r0, r3
 8004196:	bd80      	pop	{r7, pc}
 8004198:	40023800 	.word	0x40023800
 800419c:	0801a6c8 	.word	0x0801a6c8

080041a0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	220f      	movs	r2, #15
 80041ae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80041b0:	4b12      	ldr	r3, [pc, #72]	; (80041fc <HAL_RCC_GetClockConfig+0x5c>)
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	f003 0203 	and.w	r2, r3, #3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80041bc:	4b0f      	ldr	r3, [pc, #60]	; (80041fc <HAL_RCC_GetClockConfig+0x5c>)
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80041c8:	4b0c      	ldr	r3, [pc, #48]	; (80041fc <HAL_RCC_GetClockConfig+0x5c>)
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80041d4:	4b09      	ldr	r3, [pc, #36]	; (80041fc <HAL_RCC_GetClockConfig+0x5c>)
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	08db      	lsrs	r3, r3, #3
 80041da:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80041e2:	4b07      	ldr	r3, [pc, #28]	; (8004200 <HAL_RCC_GetClockConfig+0x60>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 020f 	and.w	r2, r3, #15
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	601a      	str	r2, [r3, #0]
}
 80041ee:	bf00      	nop
 80041f0:	370c      	adds	r7, #12
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr
 80041fa:	bf00      	nop
 80041fc:	40023800 	.word	0x40023800
 8004200:	40023c00 	.word	0x40023c00

08004204 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b088      	sub	sp, #32
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800420c:	2300      	movs	r3, #0
 800420e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004210:	2300      	movs	r3, #0
 8004212:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004214:	2300      	movs	r3, #0
 8004216:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004218:	2300      	movs	r3, #0
 800421a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800421c:	2300      	movs	r3, #0
 800421e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0301 	and.w	r3, r3, #1
 8004228:	2b00      	cmp	r3, #0
 800422a:	d012      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800422c:	4b69      	ldr	r3, [pc, #420]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	4a68      	ldr	r2, [pc, #416]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004232:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004236:	6093      	str	r3, [r2, #8]
 8004238:	4b66      	ldr	r3, [pc, #408]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800423a:	689a      	ldr	r2, [r3, #8]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004240:	4964      	ldr	r1, [pc, #400]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004242:	4313      	orrs	r3, r2
 8004244:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800424a:	2b00      	cmp	r3, #0
 800424c:	d101      	bne.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800424e:	2301      	movs	r3, #1
 8004250:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800425a:	2b00      	cmp	r3, #0
 800425c:	d017      	beq.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800425e:	4b5d      	ldr	r3, [pc, #372]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004260:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004264:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800426c:	4959      	ldr	r1, [pc, #356]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800426e:	4313      	orrs	r3, r2
 8004270:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004278:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800427c:	d101      	bne.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800427e:	2301      	movs	r3, #1
 8004280:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004286:	2b00      	cmp	r3, #0
 8004288:	d101      	bne.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800428a:	2301      	movs	r3, #1
 800428c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004296:	2b00      	cmp	r3, #0
 8004298:	d017      	beq.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800429a:	4b4e      	ldr	r3, [pc, #312]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800429c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042a0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a8:	494a      	ldr	r1, [pc, #296]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042aa:	4313      	orrs	r3, r2
 80042ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042b8:	d101      	bne.n	80042be <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80042ba:	2301      	movs	r3, #1
 80042bc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d101      	bne.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80042c6:	2301      	movs	r3, #1
 80042c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d001      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80042d6:	2301      	movs	r3, #1
 80042d8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0320 	and.w	r3, r3, #32
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	f000 808b 	beq.w	80043fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80042e8:	4b3a      	ldr	r3, [pc, #232]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ec:	4a39      	ldr	r2, [pc, #228]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042f2:	6413      	str	r3, [r2, #64]	; 0x40
 80042f4:	4b37      	ldr	r3, [pc, #220]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042fc:	60bb      	str	r3, [r7, #8]
 80042fe:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004300:	4b35      	ldr	r3, [pc, #212]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a34      	ldr	r2, [pc, #208]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004306:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800430a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800430c:	f7fe f9de 	bl	80026cc <HAL_GetTick>
 8004310:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004312:	e008      	b.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004314:	f7fe f9da 	bl	80026cc <HAL_GetTick>
 8004318:	4602      	mov	r2, r0
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	2b64      	cmp	r3, #100	; 0x64
 8004320:	d901      	bls.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e38f      	b.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004326:	4b2c      	ldr	r3, [pc, #176]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800432e:	2b00      	cmp	r3, #0
 8004330:	d0f0      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004332:	4b28      	ldr	r3, [pc, #160]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004336:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800433a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d035      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004346:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800434a:	693a      	ldr	r2, [r7, #16]
 800434c:	429a      	cmp	r2, r3
 800434e:	d02e      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004350:	4b20      	ldr	r3, [pc, #128]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004354:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004358:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800435a:	4b1e      	ldr	r3, [pc, #120]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800435c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800435e:	4a1d      	ldr	r2, [pc, #116]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004360:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004364:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004366:	4b1b      	ldr	r3, [pc, #108]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800436a:	4a1a      	ldr	r2, [pc, #104]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800436c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004370:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004372:	4a18      	ldr	r2, [pc, #96]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004378:	4b16      	ldr	r3, [pc, #88]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800437a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800437c:	f003 0301 	and.w	r3, r3, #1
 8004380:	2b01      	cmp	r3, #1
 8004382:	d114      	bne.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004384:	f7fe f9a2 	bl	80026cc <HAL_GetTick>
 8004388:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800438a:	e00a      	b.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800438c:	f7fe f99e 	bl	80026cc <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	f241 3288 	movw	r2, #5000	; 0x1388
 800439a:	4293      	cmp	r3, r2
 800439c:	d901      	bls.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800439e:	2303      	movs	r3, #3
 80043a0:	e351      	b.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043a2:	4b0c      	ldr	r3, [pc, #48]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043a6:	f003 0302 	and.w	r3, r3, #2
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d0ee      	beq.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043ba:	d111      	bne.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80043bc:	4b05      	ldr	r3, [pc, #20]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80043c8:	4b04      	ldr	r3, [pc, #16]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80043ca:	400b      	ands	r3, r1
 80043cc:	4901      	ldr	r1, [pc, #4]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	608b      	str	r3, [r1, #8]
 80043d2:	e00b      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80043d4:	40023800 	.word	0x40023800
 80043d8:	40007000 	.word	0x40007000
 80043dc:	0ffffcff 	.word	0x0ffffcff
 80043e0:	4bac      	ldr	r3, [pc, #688]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	4aab      	ldr	r2, [pc, #684]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043e6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80043ea:	6093      	str	r3, [r2, #8]
 80043ec:	4ba9      	ldr	r3, [pc, #676]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043f8:	49a6      	ldr	r1, [pc, #664]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0310 	and.w	r3, r3, #16
 8004406:	2b00      	cmp	r3, #0
 8004408:	d010      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800440a:	4ba2      	ldr	r3, [pc, #648]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800440c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004410:	4aa0      	ldr	r2, [pc, #640]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004412:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004416:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800441a:	4b9e      	ldr	r3, [pc, #632]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800441c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004424:	499b      	ldr	r1, [pc, #620]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004426:	4313      	orrs	r3, r2
 8004428:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004434:	2b00      	cmp	r3, #0
 8004436:	d00a      	beq.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004438:	4b96      	ldr	r3, [pc, #600]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800443a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800443e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004446:	4993      	ldr	r1, [pc, #588]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004448:	4313      	orrs	r3, r2
 800444a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d00a      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800445a:	4b8e      	ldr	r3, [pc, #568]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800445c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004460:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004468:	498a      	ldr	r1, [pc, #552]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800446a:	4313      	orrs	r3, r2
 800446c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d00a      	beq.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800447c:	4b85      	ldr	r3, [pc, #532]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800447e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004482:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800448a:	4982      	ldr	r1, [pc, #520]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800448c:	4313      	orrs	r3, r2
 800448e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d00a      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800449e:	4b7d      	ldr	r3, [pc, #500]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044a4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ac:	4979      	ldr	r1, [pc, #484]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044ae:	4313      	orrs	r3, r2
 80044b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d00a      	beq.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80044c0:	4b74      	ldr	r3, [pc, #464]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044c6:	f023 0203 	bic.w	r2, r3, #3
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ce:	4971      	ldr	r1, [pc, #452]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044d0:	4313      	orrs	r3, r2
 80044d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d00a      	beq.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80044e2:	4b6c      	ldr	r3, [pc, #432]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044e8:	f023 020c 	bic.w	r2, r3, #12
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044f0:	4968      	ldr	r1, [pc, #416]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044f2:	4313      	orrs	r3, r2
 80044f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004500:	2b00      	cmp	r3, #0
 8004502:	d00a      	beq.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004504:	4b63      	ldr	r3, [pc, #396]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800450a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004512:	4960      	ldr	r1, [pc, #384]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004514:	4313      	orrs	r3, r2
 8004516:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004522:	2b00      	cmp	r3, #0
 8004524:	d00a      	beq.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004526:	4b5b      	ldr	r3, [pc, #364]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800452c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004534:	4957      	ldr	r1, [pc, #348]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004536:	4313      	orrs	r3, r2
 8004538:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004544:	2b00      	cmp	r3, #0
 8004546:	d00a      	beq.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004548:	4b52      	ldr	r3, [pc, #328]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800454a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800454e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004556:	494f      	ldr	r1, [pc, #316]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004558:	4313      	orrs	r3, r2
 800455a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004566:	2b00      	cmp	r3, #0
 8004568:	d00a      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800456a:	4b4a      	ldr	r3, [pc, #296]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800456c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004570:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004578:	4946      	ldr	r1, [pc, #280]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800457a:	4313      	orrs	r3, r2
 800457c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004588:	2b00      	cmp	r3, #0
 800458a:	d00a      	beq.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800458c:	4b41      	ldr	r3, [pc, #260]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800458e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004592:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800459a:	493e      	ldr	r1, [pc, #248]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800459c:	4313      	orrs	r3, r2
 800459e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d00a      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80045ae:	4b39      	ldr	r3, [pc, #228]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045b4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045bc:	4935      	ldr	r1, [pc, #212]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045be:	4313      	orrs	r3, r2
 80045c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d00a      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80045d0:	4b30      	ldr	r3, [pc, #192]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045d6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045de:	492d      	ldr	r1, [pc, #180]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045e0:	4313      	orrs	r3, r2
 80045e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d011      	beq.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80045f2:	4b28      	ldr	r3, [pc, #160]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045f8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004600:	4924      	ldr	r1, [pc, #144]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004602:	4313      	orrs	r3, r2
 8004604:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800460c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004610:	d101      	bne.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004612:	2301      	movs	r3, #1
 8004614:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 0308 	and.w	r3, r3, #8
 800461e:	2b00      	cmp	r3, #0
 8004620:	d001      	beq.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004622:	2301      	movs	r3, #1
 8004624:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d00a      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004632:	4b18      	ldr	r3, [pc, #96]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004634:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004638:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004640:	4914      	ldr	r1, [pc, #80]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004642:	4313      	orrs	r3, r2
 8004644:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004650:	2b00      	cmp	r3, #0
 8004652:	d00b      	beq.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004654:	4b0f      	ldr	r3, [pc, #60]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800465a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004664:	490b      	ldr	r1, [pc, #44]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004666:	4313      	orrs	r3, r2
 8004668:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004674:	2b00      	cmp	r3, #0
 8004676:	d00f      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004678:	4b06      	ldr	r3, [pc, #24]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800467a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800467e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004688:	4902      	ldr	r1, [pc, #8]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800468a:	4313      	orrs	r3, r2
 800468c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004690:	e002      	b.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004692:	bf00      	nop
 8004694:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d00b      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80046a4:	4b8a      	ldr	r3, [pc, #552]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046aa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046b4:	4986      	ldr	r1, [pc, #536]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046b6:	4313      	orrs	r3, r2
 80046b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d00b      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80046c8:	4b81      	ldr	r3, [pc, #516]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046ce:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046d8:	497d      	ldr	r1, [pc, #500]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046da:	4313      	orrs	r3, r2
 80046dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d006      	beq.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	f000 80d6 	beq.w	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80046f4:	4b76      	ldr	r3, [pc, #472]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a75      	ldr	r2, [pc, #468]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046fa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80046fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004700:	f7fd ffe4 	bl	80026cc <HAL_GetTick>
 8004704:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004706:	e008      	b.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004708:	f7fd ffe0 	bl	80026cc <HAL_GetTick>
 800470c:	4602      	mov	r2, r0
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	2b64      	cmp	r3, #100	; 0x64
 8004714:	d901      	bls.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e195      	b.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800471a:	4b6d      	ldr	r3, [pc, #436]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d1f0      	bne.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0301 	and.w	r3, r3, #1
 800472e:	2b00      	cmp	r3, #0
 8004730:	d021      	beq.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004736:	2b00      	cmp	r3, #0
 8004738:	d11d      	bne.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800473a:	4b65      	ldr	r3, [pc, #404]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800473c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004740:	0c1b      	lsrs	r3, r3, #16
 8004742:	f003 0303 	and.w	r3, r3, #3
 8004746:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004748:	4b61      	ldr	r3, [pc, #388]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800474a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800474e:	0e1b      	lsrs	r3, r3, #24
 8004750:	f003 030f 	and.w	r3, r3, #15
 8004754:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	019a      	lsls	r2, r3, #6
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	041b      	lsls	r3, r3, #16
 8004760:	431a      	orrs	r2, r3
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	061b      	lsls	r3, r3, #24
 8004766:	431a      	orrs	r2, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	071b      	lsls	r3, r3, #28
 800476e:	4958      	ldr	r1, [pc, #352]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004770:	4313      	orrs	r3, r2
 8004772:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d004      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004786:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800478a:	d00a      	beq.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004794:	2b00      	cmp	r3, #0
 8004796:	d02e      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047a0:	d129      	bne.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80047a2:	4b4b      	ldr	r3, [pc, #300]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047a8:	0c1b      	lsrs	r3, r3, #16
 80047aa:	f003 0303 	and.w	r3, r3, #3
 80047ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80047b0:	4b47      	ldr	r3, [pc, #284]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047b6:	0f1b      	lsrs	r3, r3, #28
 80047b8:	f003 0307 	and.w	r3, r3, #7
 80047bc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	019a      	lsls	r2, r3, #6
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	041b      	lsls	r3, r3, #16
 80047c8:	431a      	orrs	r2, r3
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	68db      	ldr	r3, [r3, #12]
 80047ce:	061b      	lsls	r3, r3, #24
 80047d0:	431a      	orrs	r2, r3
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	071b      	lsls	r3, r3, #28
 80047d6:	493e      	ldr	r1, [pc, #248]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047d8:	4313      	orrs	r3, r2
 80047da:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80047de:	4b3c      	ldr	r3, [pc, #240]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047e4:	f023 021f 	bic.w	r2, r3, #31
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ec:	3b01      	subs	r3, #1
 80047ee:	4938      	ldr	r1, [pc, #224]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047f0:	4313      	orrs	r3, r2
 80047f2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d01d      	beq.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004802:	4b33      	ldr	r3, [pc, #204]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004804:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004808:	0e1b      	lsrs	r3, r3, #24
 800480a:	f003 030f 	and.w	r3, r3, #15
 800480e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004810:	4b2f      	ldr	r3, [pc, #188]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004812:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004816:	0f1b      	lsrs	r3, r3, #28
 8004818:	f003 0307 	and.w	r3, r3, #7
 800481c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	019a      	lsls	r2, r3, #6
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	691b      	ldr	r3, [r3, #16]
 8004828:	041b      	lsls	r3, r3, #16
 800482a:	431a      	orrs	r2, r3
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	061b      	lsls	r3, r3, #24
 8004830:	431a      	orrs	r2, r3
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	071b      	lsls	r3, r3, #28
 8004836:	4926      	ldr	r1, [pc, #152]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004838:	4313      	orrs	r3, r2
 800483a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004846:	2b00      	cmp	r3, #0
 8004848:	d011      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	019a      	lsls	r2, r3, #6
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	691b      	ldr	r3, [r3, #16]
 8004854:	041b      	lsls	r3, r3, #16
 8004856:	431a      	orrs	r2, r3
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	061b      	lsls	r3, r3, #24
 800485e:	431a      	orrs	r2, r3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	071b      	lsls	r3, r3, #28
 8004866:	491a      	ldr	r1, [pc, #104]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004868:	4313      	orrs	r3, r2
 800486a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800486e:	4b18      	ldr	r3, [pc, #96]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a17      	ldr	r2, [pc, #92]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004874:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004878:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800487a:	f7fd ff27 	bl	80026cc <HAL_GetTick>
 800487e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004880:	e008      	b.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004882:	f7fd ff23 	bl	80026cc <HAL_GetTick>
 8004886:	4602      	mov	r2, r0
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	1ad3      	subs	r3, r2, r3
 800488c:	2b64      	cmp	r3, #100	; 0x64
 800488e:	d901      	bls.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004890:	2303      	movs	r3, #3
 8004892:	e0d8      	b.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004894:	4b0e      	ldr	r3, [pc, #56]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d0f0      	beq.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80048a0:	69bb      	ldr	r3, [r7, #24]
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	f040 80ce 	bne.w	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80048a8:	4b09      	ldr	r3, [pc, #36]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a08      	ldr	r2, [pc, #32]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048b4:	f7fd ff0a 	bl	80026cc <HAL_GetTick>
 80048b8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80048ba:	e00b      	b.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80048bc:	f7fd ff06 	bl	80026cc <HAL_GetTick>
 80048c0:	4602      	mov	r2, r0
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	2b64      	cmp	r3, #100	; 0x64
 80048c8:	d904      	bls.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e0bb      	b.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80048ce:	bf00      	nop
 80048d0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80048d4:	4b5e      	ldr	r3, [pc, #376]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048e0:	d0ec      	beq.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d003      	beq.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d009      	beq.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d02e      	beq.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004906:	2b00      	cmp	r3, #0
 8004908:	d12a      	bne.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800490a:	4b51      	ldr	r3, [pc, #324]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800490c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004910:	0c1b      	lsrs	r3, r3, #16
 8004912:	f003 0303 	and.w	r3, r3, #3
 8004916:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004918:	4b4d      	ldr	r3, [pc, #308]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800491a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800491e:	0f1b      	lsrs	r3, r3, #28
 8004920:	f003 0307 	and.w	r3, r3, #7
 8004924:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	695b      	ldr	r3, [r3, #20]
 800492a:	019a      	lsls	r2, r3, #6
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	041b      	lsls	r3, r3, #16
 8004930:	431a      	orrs	r2, r3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	699b      	ldr	r3, [r3, #24]
 8004936:	061b      	lsls	r3, r3, #24
 8004938:	431a      	orrs	r2, r3
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	071b      	lsls	r3, r3, #28
 800493e:	4944      	ldr	r1, [pc, #272]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004940:	4313      	orrs	r3, r2
 8004942:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004946:	4b42      	ldr	r3, [pc, #264]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004948:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800494c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004954:	3b01      	subs	r3, #1
 8004956:	021b      	lsls	r3, r3, #8
 8004958:	493d      	ldr	r1, [pc, #244]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800495a:	4313      	orrs	r3, r2
 800495c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004968:	2b00      	cmp	r3, #0
 800496a:	d022      	beq.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004970:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004974:	d11d      	bne.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004976:	4b36      	ldr	r3, [pc, #216]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004978:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800497c:	0e1b      	lsrs	r3, r3, #24
 800497e:	f003 030f 	and.w	r3, r3, #15
 8004982:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004984:	4b32      	ldr	r3, [pc, #200]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800498a:	0f1b      	lsrs	r3, r3, #28
 800498c:	f003 0307 	and.w	r3, r3, #7
 8004990:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	695b      	ldr	r3, [r3, #20]
 8004996:	019a      	lsls	r2, r3, #6
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6a1b      	ldr	r3, [r3, #32]
 800499c:	041b      	lsls	r3, r3, #16
 800499e:	431a      	orrs	r2, r3
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	061b      	lsls	r3, r3, #24
 80049a4:	431a      	orrs	r2, r3
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	071b      	lsls	r3, r3, #28
 80049aa:	4929      	ldr	r1, [pc, #164]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049ac:	4313      	orrs	r3, r2
 80049ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 0308 	and.w	r3, r3, #8
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d028      	beq.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80049be:	4b24      	ldr	r3, [pc, #144]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049c4:	0e1b      	lsrs	r3, r3, #24
 80049c6:	f003 030f 	and.w	r3, r3, #15
 80049ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80049cc:	4b20      	ldr	r3, [pc, #128]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049d2:	0c1b      	lsrs	r3, r3, #16
 80049d4:	f003 0303 	and.w	r3, r3, #3
 80049d8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	695b      	ldr	r3, [r3, #20]
 80049de:	019a      	lsls	r2, r3, #6
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	041b      	lsls	r3, r3, #16
 80049e4:	431a      	orrs	r2, r3
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	061b      	lsls	r3, r3, #24
 80049ea:	431a      	orrs	r2, r3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	69db      	ldr	r3, [r3, #28]
 80049f0:	071b      	lsls	r3, r3, #28
 80049f2:	4917      	ldr	r1, [pc, #92]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049f4:	4313      	orrs	r3, r2
 80049f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80049fa:	4b15      	ldr	r3, [pc, #84]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a00:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a08:	4911      	ldr	r1, [pc, #68]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004a10:	4b0f      	ldr	r3, [pc, #60]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a0e      	ldr	r2, [pc, #56]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a1c:	f7fd fe56 	bl	80026cc <HAL_GetTick>
 8004a20:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004a22:	e008      	b.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004a24:	f7fd fe52 	bl	80026cc <HAL_GetTick>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	2b64      	cmp	r3, #100	; 0x64
 8004a30:	d901      	bls.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e007      	b.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004a36:	4b06      	ldr	r3, [pc, #24]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a42:	d1ef      	bne.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004a44:	2300      	movs	r3, #0
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3720      	adds	r7, #32
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	40023800 	.word	0x40023800

08004a54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b082      	sub	sp, #8
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d101      	bne.n	8004a66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e049      	b.n	8004afa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d106      	bne.n	8004a80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f000 f841 	bl	8004b02 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2202      	movs	r2, #2
 8004a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	3304      	adds	r3, #4
 8004a90:	4619      	mov	r1, r3
 8004a92:	4610      	mov	r0, r2
 8004a94:	f000 fc12 	bl	80052bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004af8:	2300      	movs	r3, #0
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3708      	adds	r7, #8
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}

08004b02 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004b02:	b480      	push	{r7}
 8004b04:	b083      	sub	sp, #12
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004b0a:	bf00      	nop
 8004b0c:	370c      	adds	r7, #12
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr
	...

08004b18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b085      	sub	sp, #20
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d001      	beq.n	8004b30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e054      	b.n	8004bda <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2202      	movs	r2, #2
 8004b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	68da      	ldr	r2, [r3, #12]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f042 0201 	orr.w	r2, r2, #1
 8004b46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a26      	ldr	r2, [pc, #152]	; (8004be8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d022      	beq.n	8004b98 <HAL_TIM_Base_Start_IT+0x80>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b5a:	d01d      	beq.n	8004b98 <HAL_TIM_Base_Start_IT+0x80>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a22      	ldr	r2, [pc, #136]	; (8004bec <HAL_TIM_Base_Start_IT+0xd4>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d018      	beq.n	8004b98 <HAL_TIM_Base_Start_IT+0x80>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a21      	ldr	r2, [pc, #132]	; (8004bf0 <HAL_TIM_Base_Start_IT+0xd8>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d013      	beq.n	8004b98 <HAL_TIM_Base_Start_IT+0x80>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a1f      	ldr	r2, [pc, #124]	; (8004bf4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d00e      	beq.n	8004b98 <HAL_TIM_Base_Start_IT+0x80>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a1e      	ldr	r2, [pc, #120]	; (8004bf8 <HAL_TIM_Base_Start_IT+0xe0>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d009      	beq.n	8004b98 <HAL_TIM_Base_Start_IT+0x80>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a1c      	ldr	r2, [pc, #112]	; (8004bfc <HAL_TIM_Base_Start_IT+0xe4>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d004      	beq.n	8004b98 <HAL_TIM_Base_Start_IT+0x80>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a1b      	ldr	r2, [pc, #108]	; (8004c00 <HAL_TIM_Base_Start_IT+0xe8>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d115      	bne.n	8004bc4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	689a      	ldr	r2, [r3, #8]
 8004b9e:	4b19      	ldr	r3, [pc, #100]	; (8004c04 <HAL_TIM_Base_Start_IT+0xec>)
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2b06      	cmp	r3, #6
 8004ba8:	d015      	beq.n	8004bd6 <HAL_TIM_Base_Start_IT+0xbe>
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bb0:	d011      	beq.n	8004bd6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f042 0201 	orr.w	r2, r2, #1
 8004bc0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bc2:	e008      	b.n	8004bd6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f042 0201 	orr.w	r2, r2, #1
 8004bd2:	601a      	str	r2, [r3, #0]
 8004bd4:	e000      	b.n	8004bd8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bd6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3714      	adds	r7, #20
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr
 8004be6:	bf00      	nop
 8004be8:	40010000 	.word	0x40010000
 8004bec:	40000400 	.word	0x40000400
 8004bf0:	40000800 	.word	0x40000800
 8004bf4:	40000c00 	.word	0x40000c00
 8004bf8:	40010400 	.word	0x40010400
 8004bfc:	40014000 	.word	0x40014000
 8004c00:	40001800 	.word	0x40001800
 8004c04:	00010007 	.word	0x00010007

08004c08 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b082      	sub	sp, #8
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d101      	bne.n	8004c1a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e049      	b.n	8004cae <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d106      	bne.n	8004c34 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f7fd f858 	bl	8001ce4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2202      	movs	r2, #2
 8004c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	3304      	adds	r3, #4
 8004c44:	4619      	mov	r1, r3
 8004c46:	4610      	mov	r0, r2
 8004c48:	f000 fb38 	bl	80052bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2201      	movs	r2, #1
 8004c78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2201      	movs	r2, #1
 8004c98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cac:	2300      	movs	r3, #0
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3708      	adds	r7, #8
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
	...

08004cb8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b086      	sub	sp, #24
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d101      	bne.n	8004ccc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e08f      	b.n	8004dec <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d106      	bne.n	8004ce6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f7fd f833 	bl	8001d4c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2202      	movs	r2, #2
 8004cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	6899      	ldr	r1, [r3, #8]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	4b3e      	ldr	r3, [pc, #248]	; (8004df4 <HAL_TIM_Encoder_Init+0x13c>)
 8004cfa:	400b      	ands	r3, r1
 8004cfc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	3304      	adds	r3, #4
 8004d06:	4619      	mov	r1, r3
 8004d08:	4610      	mov	r0, r2
 8004d0a:	f000 fad7 	bl	80052bc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	699b      	ldr	r3, [r3, #24]
 8004d1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	6a1b      	ldr	r3, [r3, #32]
 8004d24:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	697a      	ldr	r2, [r7, #20]
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004d30:	693a      	ldr	r2, [r7, #16]
 8004d32:	4b31      	ldr	r3, [pc, #196]	; (8004df8 <HAL_TIM_Encoder_Init+0x140>)
 8004d34:	4013      	ands	r3, r2
 8004d36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	689a      	ldr	r2, [r3, #8]
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	699b      	ldr	r3, [r3, #24]
 8004d40:	021b      	lsls	r3, r3, #8
 8004d42:	4313      	orrs	r3, r2
 8004d44:	693a      	ldr	r2, [r7, #16]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004d4a:	693a      	ldr	r2, [r7, #16]
 8004d4c:	4b2b      	ldr	r3, [pc, #172]	; (8004dfc <HAL_TIM_Encoder_Init+0x144>)
 8004d4e:	4013      	ands	r3, r2
 8004d50:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004d52:	693a      	ldr	r2, [r7, #16]
 8004d54:	4b2a      	ldr	r3, [pc, #168]	; (8004e00 <HAL_TIM_Encoder_Init+0x148>)
 8004d56:	4013      	ands	r3, r2
 8004d58:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	68da      	ldr	r2, [r3, #12]
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	69db      	ldr	r3, [r3, #28]
 8004d62:	021b      	lsls	r3, r3, #8
 8004d64:	4313      	orrs	r3, r2
 8004d66:	693a      	ldr	r2, [r7, #16]
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	691b      	ldr	r3, [r3, #16]
 8004d70:	011a      	lsls	r2, r3, #4
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	6a1b      	ldr	r3, [r3, #32]
 8004d76:	031b      	lsls	r3, r3, #12
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	693a      	ldr	r2, [r7, #16]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004d86:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004d8e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	685a      	ldr	r2, [r3, #4]
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	695b      	ldr	r3, [r3, #20]
 8004d98:	011b      	lsls	r3, r3, #4
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	68fa      	ldr	r2, [r7, #12]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	697a      	ldr	r2, [r7, #20]
 8004da8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	693a      	ldr	r2, [r7, #16]
 8004db0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	68fa      	ldr	r2, [r7, #12]
 8004db8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2201      	movs	r2, #1
 8004dce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2201      	movs	r2, #1
 8004dde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2201      	movs	r2, #1
 8004de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004dea:	2300      	movs	r3, #0
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3718      	adds	r7, #24
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}
 8004df4:	fffebff8 	.word	0xfffebff8
 8004df8:	fffffcfc 	.word	0xfffffcfc
 8004dfc:	fffff3f3 	.word	0xfffff3f3
 8004e00:	ffff0f0f 	.word	0xffff0f0f

08004e04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b082      	sub	sp, #8
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	691b      	ldr	r3, [r3, #16]
 8004e12:	f003 0302 	and.w	r3, r3, #2
 8004e16:	2b02      	cmp	r3, #2
 8004e18:	d122      	bne.n	8004e60 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	f003 0302 	and.w	r3, r3, #2
 8004e24:	2b02      	cmp	r3, #2
 8004e26:	d11b      	bne.n	8004e60 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f06f 0202 	mvn.w	r2, #2
 8004e30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2201      	movs	r2, #1
 8004e36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	699b      	ldr	r3, [r3, #24]
 8004e3e:	f003 0303 	and.w	r3, r3, #3
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d003      	beq.n	8004e4e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f000 fa1a 	bl	8005280 <HAL_TIM_IC_CaptureCallback>
 8004e4c:	e005      	b.n	8004e5a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 fa0c 	bl	800526c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f000 fa1d 	bl	8005294 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	f003 0304 	and.w	r3, r3, #4
 8004e6a:	2b04      	cmp	r3, #4
 8004e6c:	d122      	bne.n	8004eb4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	f003 0304 	and.w	r3, r3, #4
 8004e78:	2b04      	cmp	r3, #4
 8004e7a:	d11b      	bne.n	8004eb4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f06f 0204 	mvn.w	r2, #4
 8004e84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2202      	movs	r2, #2
 8004e8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	699b      	ldr	r3, [r3, #24]
 8004e92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d003      	beq.n	8004ea2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f000 f9f0 	bl	8005280 <HAL_TIM_IC_CaptureCallback>
 8004ea0:	e005      	b.n	8004eae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 f9e2 	bl	800526c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f000 f9f3 	bl	8005294 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	f003 0308 	and.w	r3, r3, #8
 8004ebe:	2b08      	cmp	r3, #8
 8004ec0:	d122      	bne.n	8004f08 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	f003 0308 	and.w	r3, r3, #8
 8004ecc:	2b08      	cmp	r3, #8
 8004ece:	d11b      	bne.n	8004f08 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f06f 0208 	mvn.w	r2, #8
 8004ed8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2204      	movs	r2, #4
 8004ede:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	69db      	ldr	r3, [r3, #28]
 8004ee6:	f003 0303 	and.w	r3, r3, #3
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d003      	beq.n	8004ef6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f000 f9c6 	bl	8005280 <HAL_TIM_IC_CaptureCallback>
 8004ef4:	e005      	b.n	8004f02 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f000 f9b8 	bl	800526c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f000 f9c9 	bl	8005294 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	691b      	ldr	r3, [r3, #16]
 8004f0e:	f003 0310 	and.w	r3, r3, #16
 8004f12:	2b10      	cmp	r3, #16
 8004f14:	d122      	bne.n	8004f5c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	f003 0310 	and.w	r3, r3, #16
 8004f20:	2b10      	cmp	r3, #16
 8004f22:	d11b      	bne.n	8004f5c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f06f 0210 	mvn.w	r2, #16
 8004f2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2208      	movs	r2, #8
 8004f32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	69db      	ldr	r3, [r3, #28]
 8004f3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d003      	beq.n	8004f4a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f000 f99c 	bl	8005280 <HAL_TIM_IC_CaptureCallback>
 8004f48:	e005      	b.n	8004f56 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f000 f98e 	bl	800526c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f000 f99f 	bl	8005294 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	691b      	ldr	r3, [r3, #16]
 8004f62:	f003 0301 	and.w	r3, r3, #1
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d10e      	bne.n	8004f88 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	f003 0301 	and.w	r3, r3, #1
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d107      	bne.n	8004f88 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f06f 0201 	mvn.w	r2, #1
 8004f80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f7fc fc9a 	bl	80018bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f92:	2b80      	cmp	r3, #128	; 0x80
 8004f94:	d10e      	bne.n	8004fb4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fa0:	2b80      	cmp	r3, #128	; 0x80
 8004fa2:	d107      	bne.n	8004fb4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004fac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f000 fd98 	bl	8005ae4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	691b      	ldr	r3, [r3, #16]
 8004fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fc2:	d10e      	bne.n	8004fe2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fce:	2b80      	cmp	r3, #128	; 0x80
 8004fd0:	d107      	bne.n	8004fe2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004fda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f000 fd8b 	bl	8005af8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	691b      	ldr	r3, [r3, #16]
 8004fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fec:	2b40      	cmp	r3, #64	; 0x40
 8004fee:	d10e      	bne.n	800500e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	68db      	ldr	r3, [r3, #12]
 8004ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ffa:	2b40      	cmp	r3, #64	; 0x40
 8004ffc:	d107      	bne.n	800500e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005006:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f000 f94d 	bl	80052a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	691b      	ldr	r3, [r3, #16]
 8005014:	f003 0320 	and.w	r3, r3, #32
 8005018:	2b20      	cmp	r3, #32
 800501a:	d10e      	bne.n	800503a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	f003 0320 	and.w	r3, r3, #32
 8005026:	2b20      	cmp	r3, #32
 8005028:	d107      	bne.n	800503a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f06f 0220 	mvn.w	r2, #32
 8005032:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f000 fd4b 	bl	8005ad0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800503a:	bf00      	nop
 800503c:	3708      	adds	r7, #8
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}
	...

08005044 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b086      	sub	sp, #24
 8005048:	af00      	add	r7, sp, #0
 800504a:	60f8      	str	r0, [r7, #12]
 800504c:	60b9      	str	r1, [r7, #8]
 800504e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005050:	2300      	movs	r3, #0
 8005052:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800505a:	2b01      	cmp	r3, #1
 800505c:	d101      	bne.n	8005062 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800505e:	2302      	movs	r3, #2
 8005060:	e0ff      	b.n	8005262 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2201      	movs	r2, #1
 8005066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2b14      	cmp	r3, #20
 800506e:	f200 80f0 	bhi.w	8005252 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005072:	a201      	add	r2, pc, #4	; (adr r2, 8005078 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005078:	080050cd 	.word	0x080050cd
 800507c:	08005253 	.word	0x08005253
 8005080:	08005253 	.word	0x08005253
 8005084:	08005253 	.word	0x08005253
 8005088:	0800510d 	.word	0x0800510d
 800508c:	08005253 	.word	0x08005253
 8005090:	08005253 	.word	0x08005253
 8005094:	08005253 	.word	0x08005253
 8005098:	0800514f 	.word	0x0800514f
 800509c:	08005253 	.word	0x08005253
 80050a0:	08005253 	.word	0x08005253
 80050a4:	08005253 	.word	0x08005253
 80050a8:	0800518f 	.word	0x0800518f
 80050ac:	08005253 	.word	0x08005253
 80050b0:	08005253 	.word	0x08005253
 80050b4:	08005253 	.word	0x08005253
 80050b8:	080051d1 	.word	0x080051d1
 80050bc:	08005253 	.word	0x08005253
 80050c0:	08005253 	.word	0x08005253
 80050c4:	08005253 	.word	0x08005253
 80050c8:	08005211 	.word	0x08005211
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	68b9      	ldr	r1, [r7, #8]
 80050d2:	4618      	mov	r0, r3
 80050d4:	f000 f992 	bl	80053fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	699a      	ldr	r2, [r3, #24]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f042 0208 	orr.w	r2, r2, #8
 80050e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	699a      	ldr	r2, [r3, #24]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f022 0204 	bic.w	r2, r2, #4
 80050f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	6999      	ldr	r1, [r3, #24]
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	691a      	ldr	r2, [r3, #16]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	430a      	orrs	r2, r1
 8005108:	619a      	str	r2, [r3, #24]
      break;
 800510a:	e0a5      	b.n	8005258 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	68b9      	ldr	r1, [r7, #8]
 8005112:	4618      	mov	r0, r3
 8005114:	f000 f9e4 	bl	80054e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	699a      	ldr	r2, [r3, #24]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005126:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	699a      	ldr	r2, [r3, #24]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005136:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	6999      	ldr	r1, [r3, #24]
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	691b      	ldr	r3, [r3, #16]
 8005142:	021a      	lsls	r2, r3, #8
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	430a      	orrs	r2, r1
 800514a:	619a      	str	r2, [r3, #24]
      break;
 800514c:	e084      	b.n	8005258 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	68b9      	ldr	r1, [r7, #8]
 8005154:	4618      	mov	r0, r3
 8005156:	f000 fa3b 	bl	80055d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	69da      	ldr	r2, [r3, #28]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f042 0208 	orr.w	r2, r2, #8
 8005168:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	69da      	ldr	r2, [r3, #28]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f022 0204 	bic.w	r2, r2, #4
 8005178:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	69d9      	ldr	r1, [r3, #28]
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	691a      	ldr	r2, [r3, #16]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	430a      	orrs	r2, r1
 800518a:	61da      	str	r2, [r3, #28]
      break;
 800518c:	e064      	b.n	8005258 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	68b9      	ldr	r1, [r7, #8]
 8005194:	4618      	mov	r0, r3
 8005196:	f000 fa91 	bl	80056bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	69da      	ldr	r2, [r3, #28]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	69da      	ldr	r2, [r3, #28]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	69d9      	ldr	r1, [r3, #28]
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	691b      	ldr	r3, [r3, #16]
 80051c4:	021a      	lsls	r2, r3, #8
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	430a      	orrs	r2, r1
 80051cc:	61da      	str	r2, [r3, #28]
      break;
 80051ce:	e043      	b.n	8005258 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	68b9      	ldr	r1, [r7, #8]
 80051d6:	4618      	mov	r0, r3
 80051d8:	f000 fac8 	bl	800576c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f042 0208 	orr.w	r2, r2, #8
 80051ea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f022 0204 	bic.w	r2, r2, #4
 80051fa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	691a      	ldr	r2, [r3, #16]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	430a      	orrs	r2, r1
 800520c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800520e:	e023      	b.n	8005258 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	68b9      	ldr	r1, [r7, #8]
 8005216:	4618      	mov	r0, r3
 8005218:	f000 fafa 	bl	8005810 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800522a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800523a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	691b      	ldr	r3, [r3, #16]
 8005246:	021a      	lsls	r2, r3, #8
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	430a      	orrs	r2, r1
 800524e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005250:	e002      	b.n	8005258 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	75fb      	strb	r3, [r7, #23]
      break;
 8005256:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2200      	movs	r2, #0
 800525c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005260:	7dfb      	ldrb	r3, [r7, #23]
}
 8005262:	4618      	mov	r0, r3
 8005264:	3718      	adds	r7, #24
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
 800526a:	bf00      	nop

0800526c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800526c:	b480      	push	{r7}
 800526e:	b083      	sub	sp, #12
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005274:	bf00      	nop
 8005276:	370c      	adds	r7, #12
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr

08005280 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005280:	b480      	push	{r7}
 8005282:	b083      	sub	sp, #12
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005288:	bf00      	nop
 800528a:	370c      	adds	r7, #12
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr

08005294 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005294:	b480      	push	{r7}
 8005296:	b083      	sub	sp, #12
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800529c:	bf00      	nop
 800529e:	370c      	adds	r7, #12
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr

080052a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80052b0:	bf00      	nop
 80052b2:	370c      	adds	r7, #12
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr

080052bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80052bc:	b480      	push	{r7}
 80052be:	b085      	sub	sp, #20
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	4a40      	ldr	r2, [pc, #256]	; (80053d0 <TIM_Base_SetConfig+0x114>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d013      	beq.n	80052fc <TIM_Base_SetConfig+0x40>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052da:	d00f      	beq.n	80052fc <TIM_Base_SetConfig+0x40>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	4a3d      	ldr	r2, [pc, #244]	; (80053d4 <TIM_Base_SetConfig+0x118>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d00b      	beq.n	80052fc <TIM_Base_SetConfig+0x40>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	4a3c      	ldr	r2, [pc, #240]	; (80053d8 <TIM_Base_SetConfig+0x11c>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d007      	beq.n	80052fc <TIM_Base_SetConfig+0x40>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4a3b      	ldr	r2, [pc, #236]	; (80053dc <TIM_Base_SetConfig+0x120>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d003      	beq.n	80052fc <TIM_Base_SetConfig+0x40>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	4a3a      	ldr	r2, [pc, #232]	; (80053e0 <TIM_Base_SetConfig+0x124>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d108      	bne.n	800530e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005302:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	68fa      	ldr	r2, [r7, #12]
 800530a:	4313      	orrs	r3, r2
 800530c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a2f      	ldr	r2, [pc, #188]	; (80053d0 <TIM_Base_SetConfig+0x114>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d02b      	beq.n	800536e <TIM_Base_SetConfig+0xb2>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800531c:	d027      	beq.n	800536e <TIM_Base_SetConfig+0xb2>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a2c      	ldr	r2, [pc, #176]	; (80053d4 <TIM_Base_SetConfig+0x118>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d023      	beq.n	800536e <TIM_Base_SetConfig+0xb2>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4a2b      	ldr	r2, [pc, #172]	; (80053d8 <TIM_Base_SetConfig+0x11c>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d01f      	beq.n	800536e <TIM_Base_SetConfig+0xb2>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a2a      	ldr	r2, [pc, #168]	; (80053dc <TIM_Base_SetConfig+0x120>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d01b      	beq.n	800536e <TIM_Base_SetConfig+0xb2>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a29      	ldr	r2, [pc, #164]	; (80053e0 <TIM_Base_SetConfig+0x124>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d017      	beq.n	800536e <TIM_Base_SetConfig+0xb2>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a28      	ldr	r2, [pc, #160]	; (80053e4 <TIM_Base_SetConfig+0x128>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d013      	beq.n	800536e <TIM_Base_SetConfig+0xb2>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4a27      	ldr	r2, [pc, #156]	; (80053e8 <TIM_Base_SetConfig+0x12c>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d00f      	beq.n	800536e <TIM_Base_SetConfig+0xb2>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a26      	ldr	r2, [pc, #152]	; (80053ec <TIM_Base_SetConfig+0x130>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d00b      	beq.n	800536e <TIM_Base_SetConfig+0xb2>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a25      	ldr	r2, [pc, #148]	; (80053f0 <TIM_Base_SetConfig+0x134>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d007      	beq.n	800536e <TIM_Base_SetConfig+0xb2>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4a24      	ldr	r2, [pc, #144]	; (80053f4 <TIM_Base_SetConfig+0x138>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d003      	beq.n	800536e <TIM_Base_SetConfig+0xb2>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a23      	ldr	r2, [pc, #140]	; (80053f8 <TIM_Base_SetConfig+0x13c>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d108      	bne.n	8005380 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005374:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	68db      	ldr	r3, [r3, #12]
 800537a:	68fa      	ldr	r2, [r7, #12]
 800537c:	4313      	orrs	r3, r2
 800537e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	695b      	ldr	r3, [r3, #20]
 800538a:	4313      	orrs	r3, r2
 800538c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	68fa      	ldr	r2, [r7, #12]
 8005392:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	689a      	ldr	r2, [r3, #8]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	4a0a      	ldr	r2, [pc, #40]	; (80053d0 <TIM_Base_SetConfig+0x114>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d003      	beq.n	80053b4 <TIM_Base_SetConfig+0xf8>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	4a0c      	ldr	r2, [pc, #48]	; (80053e0 <TIM_Base_SetConfig+0x124>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d103      	bne.n	80053bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	691a      	ldr	r2, [r3, #16]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	615a      	str	r2, [r3, #20]
}
 80053c2:	bf00      	nop
 80053c4:	3714      	adds	r7, #20
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr
 80053ce:	bf00      	nop
 80053d0:	40010000 	.word	0x40010000
 80053d4:	40000400 	.word	0x40000400
 80053d8:	40000800 	.word	0x40000800
 80053dc:	40000c00 	.word	0x40000c00
 80053e0:	40010400 	.word	0x40010400
 80053e4:	40014000 	.word	0x40014000
 80053e8:	40014400 	.word	0x40014400
 80053ec:	40014800 	.word	0x40014800
 80053f0:	40001800 	.word	0x40001800
 80053f4:	40001c00 	.word	0x40001c00
 80053f8:	40002000 	.word	0x40002000

080053fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b087      	sub	sp, #28
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6a1b      	ldr	r3, [r3, #32]
 800540a:	f023 0201 	bic.w	r2, r3, #1
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6a1b      	ldr	r3, [r3, #32]
 8005416:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	699b      	ldr	r3, [r3, #24]
 8005422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005424:	68fa      	ldr	r2, [r7, #12]
 8005426:	4b2b      	ldr	r3, [pc, #172]	; (80054d4 <TIM_OC1_SetConfig+0xd8>)
 8005428:	4013      	ands	r3, r2
 800542a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f023 0303 	bic.w	r3, r3, #3
 8005432:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	68fa      	ldr	r2, [r7, #12]
 800543a:	4313      	orrs	r3, r2
 800543c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	f023 0302 	bic.w	r3, r3, #2
 8005444:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	697a      	ldr	r2, [r7, #20]
 800544c:	4313      	orrs	r3, r2
 800544e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	4a21      	ldr	r2, [pc, #132]	; (80054d8 <TIM_OC1_SetConfig+0xdc>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d003      	beq.n	8005460 <TIM_OC1_SetConfig+0x64>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	4a20      	ldr	r2, [pc, #128]	; (80054dc <TIM_OC1_SetConfig+0xe0>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d10c      	bne.n	800547a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	f023 0308 	bic.w	r3, r3, #8
 8005466:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	68db      	ldr	r3, [r3, #12]
 800546c:	697a      	ldr	r2, [r7, #20]
 800546e:	4313      	orrs	r3, r2
 8005470:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	f023 0304 	bic.w	r3, r3, #4
 8005478:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	4a16      	ldr	r2, [pc, #88]	; (80054d8 <TIM_OC1_SetConfig+0xdc>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d003      	beq.n	800548a <TIM_OC1_SetConfig+0x8e>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a15      	ldr	r2, [pc, #84]	; (80054dc <TIM_OC1_SetConfig+0xe0>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d111      	bne.n	80054ae <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005490:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005498:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	695b      	ldr	r3, [r3, #20]
 800549e:	693a      	ldr	r2, [r7, #16]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	699b      	ldr	r3, [r3, #24]
 80054a8:	693a      	ldr	r2, [r7, #16]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	693a      	ldr	r2, [r7, #16]
 80054b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	68fa      	ldr	r2, [r7, #12]
 80054b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	685a      	ldr	r2, [r3, #4]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	697a      	ldr	r2, [r7, #20]
 80054c6:	621a      	str	r2, [r3, #32]
}
 80054c8:	bf00      	nop
 80054ca:	371c      	adds	r7, #28
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr
 80054d4:	fffeff8f 	.word	0xfffeff8f
 80054d8:	40010000 	.word	0x40010000
 80054dc:	40010400 	.word	0x40010400

080054e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b087      	sub	sp, #28
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6a1b      	ldr	r3, [r3, #32]
 80054ee:	f023 0210 	bic.w	r2, r3, #16
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6a1b      	ldr	r3, [r3, #32]
 80054fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	699b      	ldr	r3, [r3, #24]
 8005506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005508:	68fa      	ldr	r2, [r7, #12]
 800550a:	4b2e      	ldr	r3, [pc, #184]	; (80055c4 <TIM_OC2_SetConfig+0xe4>)
 800550c:	4013      	ands	r3, r2
 800550e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005516:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	021b      	lsls	r3, r3, #8
 800551e:	68fa      	ldr	r2, [r7, #12]
 8005520:	4313      	orrs	r3, r2
 8005522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	f023 0320 	bic.w	r3, r3, #32
 800552a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	011b      	lsls	r3, r3, #4
 8005532:	697a      	ldr	r2, [r7, #20]
 8005534:	4313      	orrs	r3, r2
 8005536:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	4a23      	ldr	r2, [pc, #140]	; (80055c8 <TIM_OC2_SetConfig+0xe8>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d003      	beq.n	8005548 <TIM_OC2_SetConfig+0x68>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	4a22      	ldr	r2, [pc, #136]	; (80055cc <TIM_OC2_SetConfig+0xec>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d10d      	bne.n	8005564 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800554e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	68db      	ldr	r3, [r3, #12]
 8005554:	011b      	lsls	r3, r3, #4
 8005556:	697a      	ldr	r2, [r7, #20]
 8005558:	4313      	orrs	r3, r2
 800555a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005562:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	4a18      	ldr	r2, [pc, #96]	; (80055c8 <TIM_OC2_SetConfig+0xe8>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d003      	beq.n	8005574 <TIM_OC2_SetConfig+0x94>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	4a17      	ldr	r2, [pc, #92]	; (80055cc <TIM_OC2_SetConfig+0xec>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d113      	bne.n	800559c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800557a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005582:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	695b      	ldr	r3, [r3, #20]
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	693a      	ldr	r2, [r7, #16]
 800558c:	4313      	orrs	r3, r2
 800558e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	699b      	ldr	r3, [r3, #24]
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	693a      	ldr	r2, [r7, #16]
 8005598:	4313      	orrs	r3, r2
 800559a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	693a      	ldr	r2, [r7, #16]
 80055a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	68fa      	ldr	r2, [r7, #12]
 80055a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	685a      	ldr	r2, [r3, #4]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	697a      	ldr	r2, [r7, #20]
 80055b4:	621a      	str	r2, [r3, #32]
}
 80055b6:	bf00      	nop
 80055b8:	371c      	adds	r7, #28
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr
 80055c2:	bf00      	nop
 80055c4:	feff8fff 	.word	0xfeff8fff
 80055c8:	40010000 	.word	0x40010000
 80055cc:	40010400 	.word	0x40010400

080055d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b087      	sub	sp, #28
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a1b      	ldr	r3, [r3, #32]
 80055de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a1b      	ldr	r3, [r3, #32]
 80055ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	69db      	ldr	r3, [r3, #28]
 80055f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80055f8:	68fa      	ldr	r2, [r7, #12]
 80055fa:	4b2d      	ldr	r3, [pc, #180]	; (80056b0 <TIM_OC3_SetConfig+0xe0>)
 80055fc:	4013      	ands	r3, r2
 80055fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f023 0303 	bic.w	r3, r3, #3
 8005606:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	68fa      	ldr	r2, [r7, #12]
 800560e:	4313      	orrs	r3, r2
 8005610:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005618:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	021b      	lsls	r3, r3, #8
 8005620:	697a      	ldr	r2, [r7, #20]
 8005622:	4313      	orrs	r3, r2
 8005624:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	4a22      	ldr	r2, [pc, #136]	; (80056b4 <TIM_OC3_SetConfig+0xe4>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d003      	beq.n	8005636 <TIM_OC3_SetConfig+0x66>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	4a21      	ldr	r2, [pc, #132]	; (80056b8 <TIM_OC3_SetConfig+0xe8>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d10d      	bne.n	8005652 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800563c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	68db      	ldr	r3, [r3, #12]
 8005642:	021b      	lsls	r3, r3, #8
 8005644:	697a      	ldr	r2, [r7, #20]
 8005646:	4313      	orrs	r3, r2
 8005648:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005650:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	4a17      	ldr	r2, [pc, #92]	; (80056b4 <TIM_OC3_SetConfig+0xe4>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d003      	beq.n	8005662 <TIM_OC3_SetConfig+0x92>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4a16      	ldr	r2, [pc, #88]	; (80056b8 <TIM_OC3_SetConfig+0xe8>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d113      	bne.n	800568a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005668:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005670:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	695b      	ldr	r3, [r3, #20]
 8005676:	011b      	lsls	r3, r3, #4
 8005678:	693a      	ldr	r2, [r7, #16]
 800567a:	4313      	orrs	r3, r2
 800567c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	699b      	ldr	r3, [r3, #24]
 8005682:	011b      	lsls	r3, r3, #4
 8005684:	693a      	ldr	r2, [r7, #16]
 8005686:	4313      	orrs	r3, r2
 8005688:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	693a      	ldr	r2, [r7, #16]
 800568e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	68fa      	ldr	r2, [r7, #12]
 8005694:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	685a      	ldr	r2, [r3, #4]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	697a      	ldr	r2, [r7, #20]
 80056a2:	621a      	str	r2, [r3, #32]
}
 80056a4:	bf00      	nop
 80056a6:	371c      	adds	r7, #28
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr
 80056b0:	fffeff8f 	.word	0xfffeff8f
 80056b4:	40010000 	.word	0x40010000
 80056b8:	40010400 	.word	0x40010400

080056bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056bc:	b480      	push	{r7}
 80056be:	b087      	sub	sp, #28
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6a1b      	ldr	r3, [r3, #32]
 80056ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6a1b      	ldr	r3, [r3, #32]
 80056d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	69db      	ldr	r3, [r3, #28]
 80056e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80056e4:	68fa      	ldr	r2, [r7, #12]
 80056e6:	4b1e      	ldr	r3, [pc, #120]	; (8005760 <TIM_OC4_SetConfig+0xa4>)
 80056e8:	4013      	ands	r3, r2
 80056ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	021b      	lsls	r3, r3, #8
 80056fa:	68fa      	ldr	r2, [r7, #12]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005706:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	031b      	lsls	r3, r3, #12
 800570e:	693a      	ldr	r2, [r7, #16]
 8005710:	4313      	orrs	r3, r2
 8005712:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	4a13      	ldr	r2, [pc, #76]	; (8005764 <TIM_OC4_SetConfig+0xa8>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d003      	beq.n	8005724 <TIM_OC4_SetConfig+0x68>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4a12      	ldr	r2, [pc, #72]	; (8005768 <TIM_OC4_SetConfig+0xac>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d109      	bne.n	8005738 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800572a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	695b      	ldr	r3, [r3, #20]
 8005730:	019b      	lsls	r3, r3, #6
 8005732:	697a      	ldr	r2, [r7, #20]
 8005734:	4313      	orrs	r3, r2
 8005736:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	697a      	ldr	r2, [r7, #20]
 800573c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	685a      	ldr	r2, [r3, #4]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	693a      	ldr	r2, [r7, #16]
 8005750:	621a      	str	r2, [r3, #32]
}
 8005752:	bf00      	nop
 8005754:	371c      	adds	r7, #28
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr
 800575e:	bf00      	nop
 8005760:	feff8fff 	.word	0xfeff8fff
 8005764:	40010000 	.word	0x40010000
 8005768:	40010400 	.word	0x40010400

0800576c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800576c:	b480      	push	{r7}
 800576e:	b087      	sub	sp, #28
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6a1b      	ldr	r3, [r3, #32]
 800577a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6a1b      	ldr	r3, [r3, #32]
 8005786:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005794:	68fa      	ldr	r2, [r7, #12]
 8005796:	4b1b      	ldr	r3, [pc, #108]	; (8005804 <TIM_OC5_SetConfig+0x98>)
 8005798:	4013      	ands	r3, r2
 800579a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	68fa      	ldr	r2, [r7, #12]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80057ac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	041b      	lsls	r3, r3, #16
 80057b4:	693a      	ldr	r2, [r7, #16]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4a12      	ldr	r2, [pc, #72]	; (8005808 <TIM_OC5_SetConfig+0x9c>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d003      	beq.n	80057ca <TIM_OC5_SetConfig+0x5e>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4a11      	ldr	r2, [pc, #68]	; (800580c <TIM_OC5_SetConfig+0xa0>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d109      	bne.n	80057de <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057d0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	695b      	ldr	r3, [r3, #20]
 80057d6:	021b      	lsls	r3, r3, #8
 80057d8:	697a      	ldr	r2, [r7, #20]
 80057da:	4313      	orrs	r3, r2
 80057dc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	697a      	ldr	r2, [r7, #20]
 80057e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	68fa      	ldr	r2, [r7, #12]
 80057e8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	685a      	ldr	r2, [r3, #4]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	693a      	ldr	r2, [r7, #16]
 80057f6:	621a      	str	r2, [r3, #32]
}
 80057f8:	bf00      	nop
 80057fa:	371c      	adds	r7, #28
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr
 8005804:	fffeff8f 	.word	0xfffeff8f
 8005808:	40010000 	.word	0x40010000
 800580c:	40010400 	.word	0x40010400

08005810 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005810:	b480      	push	{r7}
 8005812:	b087      	sub	sp, #28
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6a1b      	ldr	r3, [r3, #32]
 800581e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6a1b      	ldr	r3, [r3, #32]
 800582a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005838:	68fa      	ldr	r2, [r7, #12]
 800583a:	4b1c      	ldr	r3, [pc, #112]	; (80058ac <TIM_OC6_SetConfig+0x9c>)
 800583c:	4013      	ands	r3, r2
 800583e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	021b      	lsls	r3, r3, #8
 8005846:	68fa      	ldr	r2, [r7, #12]
 8005848:	4313      	orrs	r3, r2
 800584a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005852:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	051b      	lsls	r3, r3, #20
 800585a:	693a      	ldr	r2, [r7, #16]
 800585c:	4313      	orrs	r3, r2
 800585e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	4a13      	ldr	r2, [pc, #76]	; (80058b0 <TIM_OC6_SetConfig+0xa0>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d003      	beq.n	8005870 <TIM_OC6_SetConfig+0x60>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4a12      	ldr	r2, [pc, #72]	; (80058b4 <TIM_OC6_SetConfig+0xa4>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d109      	bne.n	8005884 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005876:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	695b      	ldr	r3, [r3, #20]
 800587c:	029b      	lsls	r3, r3, #10
 800587e:	697a      	ldr	r2, [r7, #20]
 8005880:	4313      	orrs	r3, r2
 8005882:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	697a      	ldr	r2, [r7, #20]
 8005888:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	68fa      	ldr	r2, [r7, #12]
 800588e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	685a      	ldr	r2, [r3, #4]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	693a      	ldr	r2, [r7, #16]
 800589c:	621a      	str	r2, [r3, #32]
}
 800589e:	bf00      	nop
 80058a0:	371c      	adds	r7, #28
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr
 80058aa:	bf00      	nop
 80058ac:	feff8fff 	.word	0xfeff8fff
 80058b0:	40010000 	.word	0x40010000
 80058b4:	40010400 	.word	0x40010400

080058b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b085      	sub	sp, #20
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d101      	bne.n	80058d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058cc:	2302      	movs	r3, #2
 80058ce:	e06d      	b.n	80059ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2202      	movs	r2, #2
 80058dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a30      	ldr	r2, [pc, #192]	; (80059b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d004      	beq.n	8005904 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a2f      	ldr	r2, [pc, #188]	; (80059bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d108      	bne.n	8005916 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800590a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	68fa      	ldr	r2, [r7, #12]
 8005912:	4313      	orrs	r3, r2
 8005914:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800591c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	68fa      	ldr	r2, [r7, #12]
 8005924:	4313      	orrs	r3, r2
 8005926:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	68fa      	ldr	r2, [r7, #12]
 800592e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a20      	ldr	r2, [pc, #128]	; (80059b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d022      	beq.n	8005980 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005942:	d01d      	beq.n	8005980 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a1d      	ldr	r2, [pc, #116]	; (80059c0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d018      	beq.n	8005980 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a1c      	ldr	r2, [pc, #112]	; (80059c4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d013      	beq.n	8005980 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a1a      	ldr	r2, [pc, #104]	; (80059c8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d00e      	beq.n	8005980 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a15      	ldr	r2, [pc, #84]	; (80059bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d009      	beq.n	8005980 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a16      	ldr	r2, [pc, #88]	; (80059cc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d004      	beq.n	8005980 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a15      	ldr	r2, [pc, #84]	; (80059d0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d10c      	bne.n	800599a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005986:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	68ba      	ldr	r2, [r7, #8]
 800598e:	4313      	orrs	r3, r2
 8005990:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	68ba      	ldr	r2, [r7, #8]
 8005998:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2201      	movs	r2, #1
 800599e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059aa:	2300      	movs	r3, #0
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3714      	adds	r7, #20
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr
 80059b8:	40010000 	.word	0x40010000
 80059bc:	40010400 	.word	0x40010400
 80059c0:	40000400 	.word	0x40000400
 80059c4:	40000800 	.word	0x40000800
 80059c8:	40000c00 	.word	0x40000c00
 80059cc:	40014000 	.word	0x40014000
 80059d0:	40001800 	.word	0x40001800

080059d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b085      	sub	sp, #20
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80059de:	2300      	movs	r3, #0
 80059e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d101      	bne.n	80059f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80059ec:	2302      	movs	r3, #2
 80059ee:	e065      	b.n	8005abc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2201      	movs	r2, #1
 80059f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	68db      	ldr	r3, [r3, #12]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	4313      	orrs	r3, r2
 8005a12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	691b      	ldr	r3, [r3, #16]
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	695b      	ldr	r3, [r3, #20]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a56:	4313      	orrs	r3, r2
 8005a58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	699b      	ldr	r3, [r3, #24]
 8005a64:	041b      	lsls	r3, r3, #16
 8005a66:	4313      	orrs	r3, r2
 8005a68:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a16      	ldr	r2, [pc, #88]	; (8005ac8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d004      	beq.n	8005a7e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a14      	ldr	r2, [pc, #80]	; (8005acc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d115      	bne.n	8005aaa <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a88:	051b      	lsls	r3, r3, #20
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	69db      	ldr	r3, [r3, #28]
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	6a1b      	ldr	r3, [r3, #32]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	68fa      	ldr	r2, [r7, #12]
 8005ab0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005aba:	2300      	movs	r3, #0
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3714      	adds	r7, #20
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr
 8005ac8:	40010000 	.word	0x40010000
 8005acc:	40010400 	.word	0x40010400

08005ad0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b083      	sub	sp, #12
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ad8:	bf00      	nop
 8005ada:	370c      	adds	r7, #12
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr

08005ae4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b083      	sub	sp, #12
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005aec:	bf00      	nop
 8005aee:	370c      	adds	r7, #12
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr

08005af8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b083      	sub	sp, #12
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005b00:	bf00      	nop
 8005b02:	370c      	adds	r7, #12
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr

08005b0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b082      	sub	sp, #8
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d101      	bne.n	8005b1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e040      	b.n	8005ba0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d106      	bne.n	8005b34 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f7fc faa8 	bl	8002084 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2224      	movs	r2, #36	; 0x24
 8005b38:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f022 0201 	bic.w	r2, r2, #1
 8005b48:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 fcae 	bl	80064ac <UART_SetConfig>
 8005b50:	4603      	mov	r3, r0
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d101      	bne.n	8005b5a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	e022      	b.n	8005ba0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d002      	beq.n	8005b68 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f000 ff06 	bl	8006974 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	685a      	ldr	r2, [r3, #4]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	689a      	ldr	r2, [r3, #8]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f042 0201 	orr.w	r2, r2, #1
 8005b96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f000 ff8d 	bl	8006ab8 <UART_CheckIdleState>
 8005b9e:	4603      	mov	r3, r0
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3708      	adds	r7, #8
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}

08005ba8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b08a      	sub	sp, #40	; 0x28
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	60f8      	str	r0, [r7, #12]
 8005bb0:	60b9      	str	r1, [r7, #8]
 8005bb2:	4613      	mov	r3, r2
 8005bb4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005bba:	2b20      	cmp	r3, #32
 8005bbc:	d165      	bne.n	8005c8a <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d002      	beq.n	8005bca <HAL_UART_Transmit_DMA+0x22>
 8005bc4:	88fb      	ldrh	r3, [r7, #6]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d101      	bne.n	8005bce <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	e05e      	b.n	8005c8c <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	68ba      	ldr	r2, [r7, #8]
 8005bd2:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	88fa      	ldrh	r2, [r7, #6]
 8005bd8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	88fa      	ldrh	r2, [r7, #6]
 8005be0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2200      	movs	r2, #0
 8005be8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2221      	movs	r2, #33	; 0x21
 8005bf0:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d027      	beq.n	8005c4a <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bfe:	4a25      	ldr	r2, [pc, #148]	; (8005c94 <HAL_UART_Transmit_DMA+0xec>)
 8005c00:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c06:	4a24      	ldr	r2, [pc, #144]	; (8005c98 <HAL_UART_Transmit_DMA+0xf0>)
 8005c08:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c0e:	4a23      	ldr	r2, [pc, #140]	; (8005c9c <HAL_UART_Transmit_DMA+0xf4>)
 8005c10:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c16:	2200      	movs	r2, #0
 8005c18:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c22:	4619      	mov	r1, r3
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	3328      	adds	r3, #40	; 0x28
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	88fb      	ldrh	r3, [r7, #6]
 8005c2e:	f7fc ff0d 	bl	8002a4c <HAL_DMA_Start_IT>
 8005c32:	4603      	mov	r3, r0
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d008      	beq.n	8005c4a <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2210      	movs	r2, #16
 8005c3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2220      	movs	r2, #32
 8005c44:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	e020      	b.n	8005c8c <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	2240      	movs	r2, #64	; 0x40
 8005c50:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	3308      	adds	r3, #8
 8005c58:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	e853 3f00 	ldrex	r3, [r3]
 8005c60:	613b      	str	r3, [r7, #16]
   return(result);
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c68:	627b      	str	r3, [r7, #36]	; 0x24
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	3308      	adds	r3, #8
 8005c70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c72:	623a      	str	r2, [r7, #32]
 8005c74:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c76:	69f9      	ldr	r1, [r7, #28]
 8005c78:	6a3a      	ldr	r2, [r7, #32]
 8005c7a:	e841 2300 	strex	r3, r2, [r1]
 8005c7e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c80:	69bb      	ldr	r3, [r7, #24]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d1e5      	bne.n	8005c52 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8005c86:	2300      	movs	r3, #0
 8005c88:	e000      	b.n	8005c8c <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8005c8a:	2302      	movs	r3, #2
  }
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3728      	adds	r7, #40	; 0x28
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}
 8005c94:	08006f35 	.word	0x08006f35
 8005c98:	08006fcb 	.word	0x08006fcb
 8005c9c:	0800714d 	.word	0x0800714d

08005ca0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b08a      	sub	sp, #40	; 0x28
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	60f8      	str	r0, [r7, #12]
 8005ca8:	60b9      	str	r1, [r7, #8]
 8005caa:	4613      	mov	r3, r2
 8005cac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005cb4:	2b20      	cmp	r3, #32
 8005cb6:	d132      	bne.n	8005d1e <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d002      	beq.n	8005cc4 <HAL_UART_Receive_DMA+0x24>
 8005cbe:	88fb      	ldrh	r3, [r7, #6]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d101      	bne.n	8005cc8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e02b      	b.n	8005d20 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d018      	beq.n	8005d0e <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	e853 3f00 	ldrex	r3, [r3]
 8005ce8:	613b      	str	r3, [r7, #16]
   return(result);
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005cf0:	627b      	str	r3, [r7, #36]	; 0x24
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfa:	623b      	str	r3, [r7, #32]
 8005cfc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cfe:	69f9      	ldr	r1, [r7, #28]
 8005d00:	6a3a      	ldr	r2, [r7, #32]
 8005d02:	e841 2300 	strex	r3, r2, [r1]
 8005d06:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d08:	69bb      	ldr	r3, [r7, #24]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d1e6      	bne.n	8005cdc <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005d0e:	88fb      	ldrh	r3, [r7, #6]
 8005d10:	461a      	mov	r2, r3
 8005d12:	68b9      	ldr	r1, [r7, #8]
 8005d14:	68f8      	ldr	r0, [r7, #12]
 8005d16:	f000 ffe3 	bl	8006ce0 <UART_Start_Receive_DMA>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	e000      	b.n	8005d20 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 8005d1e:	2302      	movs	r3, #2
  }
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3728      	adds	r7, #40	; 0x28
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}

08005d28 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b090      	sub	sp, #64	; 0x40
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d34:	63fb      	str	r3, [r7, #60]	; 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d3c:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d48:	2b80      	cmp	r3, #128	; 0x80
 8005d4a:	d139      	bne.n	8005dc0 <HAL_UART_DMAStop+0x98>
 8005d4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d4e:	2b21      	cmp	r3, #33	; 0x21
 8005d50:	d136      	bne.n	8005dc0 <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	3308      	adds	r3, #8
 8005d58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d5a:	6a3b      	ldr	r3, [r7, #32]
 8005d5c:	e853 3f00 	ldrex	r3, [r3]
 8005d60:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d62:	69fb      	ldr	r3, [r7, #28]
 8005d64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d68:	637b      	str	r3, [r7, #52]	; 0x34
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	3308      	adds	r3, #8
 8005d70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d72:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d74:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d76:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d7a:	e841 2300 	strex	r3, r2, [r1]
 8005d7e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d1e5      	bne.n	8005d52 <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d015      	beq.n	8005dba <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d92:	4618      	mov	r0, r3
 8005d94:	f7fc feba 	bl	8002b0c <HAL_DMA_Abort>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d00d      	beq.n	8005dba <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005da2:	4618      	mov	r0, r3
 8005da4:	f7fd f8ce 	bl	8002f44 <HAL_DMA_GetError>
 8005da8:	4603      	mov	r3, r0
 8005daa:	2b20      	cmp	r3, #32
 8005dac:	d105      	bne.n	8005dba <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2210      	movs	r2, #16
 8005db2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005db6:	2303      	movs	r3, #3
 8005db8:	e044      	b.n	8005e44 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f001 f830 	bl	8006e20 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dca:	2b40      	cmp	r3, #64	; 0x40
 8005dcc:	d139      	bne.n	8005e42 <HAL_UART_DMAStop+0x11a>
 8005dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd0:	2b22      	cmp	r3, #34	; 0x22
 8005dd2:	d136      	bne.n	8005e42 <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	3308      	adds	r3, #8
 8005dda:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	e853 3f00 	ldrex	r3, [r3]
 8005de2:	60bb      	str	r3, [r7, #8]
   return(result);
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dea:	633b      	str	r3, [r7, #48]	; 0x30
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	3308      	adds	r3, #8
 8005df2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005df4:	61ba      	str	r2, [r7, #24]
 8005df6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005df8:	6979      	ldr	r1, [r7, #20]
 8005dfa:	69ba      	ldr	r2, [r7, #24]
 8005dfc:	e841 2300 	strex	r3, r2, [r1]
 8005e00:	613b      	str	r3, [r7, #16]
   return(result);
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d1e5      	bne.n	8005dd4 <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d015      	beq.n	8005e3c <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e14:	4618      	mov	r0, r3
 8005e16:	f7fc fe79 	bl	8002b0c <HAL_DMA_Abort>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d00d      	beq.n	8005e3c <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e24:	4618      	mov	r0, r3
 8005e26:	f7fd f88d 	bl	8002f44 <HAL_DMA_GetError>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	2b20      	cmp	r3, #32
 8005e2e:	d105      	bne.n	8005e3c <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2210      	movs	r2, #16
 8005e34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005e38:	2303      	movs	r3, #3
 8005e3a:	e003      	b.n	8005e44 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f001 f815 	bl	8006e6c <UART_EndRxTransfer>
  }

  return HAL_OK;
 8005e42:	2300      	movs	r3, #0
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3740      	adds	r7, #64	; 0x40
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b0ba      	sub	sp, #232	; 0xe8
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	69db      	ldr	r3, [r3, #28]
 8005e5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005e72:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005e76:	f640 030f 	movw	r3, #2063	; 0x80f
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005e80:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d115      	bne.n	8005eb4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005e88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e8c:	f003 0320 	and.w	r3, r3, #32
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d00f      	beq.n	8005eb4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005e94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e98:	f003 0320 	and.w	r3, r3, #32
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d009      	beq.n	8005eb4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	f000 82ac 	beq.w	8006402 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	4798      	blx	r3
      }
      return;
 8005eb2:	e2a6      	b.n	8006402 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005eb4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	f000 8117 	beq.w	80060ec <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005ebe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ec2:	f003 0301 	and.w	r3, r3, #1
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d106      	bne.n	8005ed8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005eca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005ece:	4b85      	ldr	r3, [pc, #532]	; (80060e4 <HAL_UART_IRQHandler+0x298>)
 8005ed0:	4013      	ands	r3, r2
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	f000 810a 	beq.w	80060ec <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005ed8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005edc:	f003 0301 	and.w	r3, r3, #1
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d011      	beq.n	8005f08 <HAL_UART_IRQHandler+0xbc>
 8005ee4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d00b      	beq.n	8005f08 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005efe:	f043 0201 	orr.w	r2, r3, #1
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f0c:	f003 0302 	and.w	r3, r3, #2
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d011      	beq.n	8005f38 <HAL_UART_IRQHandler+0xec>
 8005f14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f18:	f003 0301 	and.w	r3, r3, #1
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d00b      	beq.n	8005f38 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	2202      	movs	r2, #2
 8005f26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f2e:	f043 0204 	orr.w	r2, r3, #4
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f3c:	f003 0304 	and.w	r3, r3, #4
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d011      	beq.n	8005f68 <HAL_UART_IRQHandler+0x11c>
 8005f44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f48:	f003 0301 	and.w	r3, r3, #1
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d00b      	beq.n	8005f68 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	2204      	movs	r2, #4
 8005f56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f5e:	f043 0202 	orr.w	r2, r3, #2
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005f68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f6c:	f003 0308 	and.w	r3, r3, #8
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d017      	beq.n	8005fa4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005f74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f78:	f003 0320 	and.w	r3, r3, #32
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d105      	bne.n	8005f8c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005f80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f84:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d00b      	beq.n	8005fa4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	2208      	movs	r2, #8
 8005f92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f9a:	f043 0208 	orr.w	r2, r3, #8
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005fa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fa8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d012      	beq.n	8005fd6 <HAL_UART_IRQHandler+0x18a>
 8005fb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fb4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d00c      	beq.n	8005fd6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005fc4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fcc:	f043 0220 	orr.w	r2, r3, #32
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	f000 8212 	beq.w	8006406 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005fe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fe6:	f003 0320 	and.w	r3, r3, #32
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d00d      	beq.n	800600a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005fee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ff2:	f003 0320 	and.w	r3, r3, #32
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d007      	beq.n	800600a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d003      	beq.n	800600a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006010:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800601e:	2b40      	cmp	r3, #64	; 0x40
 8006020:	d005      	beq.n	800602e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006022:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006026:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800602a:	2b00      	cmp	r3, #0
 800602c:	d04f      	beq.n	80060ce <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f000 ff1c 	bl	8006e6c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800603e:	2b40      	cmp	r3, #64	; 0x40
 8006040:	d141      	bne.n	80060c6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	3308      	adds	r3, #8
 8006048:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800604c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006050:	e853 3f00 	ldrex	r3, [r3]
 8006054:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006058:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800605c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006060:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	3308      	adds	r3, #8
 800606a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800606e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006072:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006076:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800607a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800607e:	e841 2300 	strex	r3, r2, [r1]
 8006082:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006086:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800608a:	2b00      	cmp	r3, #0
 800608c:	d1d9      	bne.n	8006042 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006092:	2b00      	cmp	r3, #0
 8006094:	d013      	beq.n	80060be <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800609a:	4a13      	ldr	r2, [pc, #76]	; (80060e8 <HAL_UART_IRQHandler+0x29c>)
 800609c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060a2:	4618      	mov	r0, r3
 80060a4:	f7fc fda2 	bl	8002bec <HAL_DMA_Abort_IT>
 80060a8:	4603      	mov	r3, r0
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d017      	beq.n	80060de <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060b4:	687a      	ldr	r2, [r7, #4]
 80060b6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80060b8:	4610      	mov	r0, r2
 80060ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060bc:	e00f      	b.n	80060de <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f000 f9d4 	bl	800646c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060c4:	e00b      	b.n	80060de <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f000 f9d0 	bl	800646c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060cc:	e007      	b.n	80060de <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f000 f9cc 	bl	800646c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2200      	movs	r2, #0
 80060d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80060dc:	e193      	b.n	8006406 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060de:	bf00      	nop
    return;
 80060e0:	e191      	b.n	8006406 <HAL_UART_IRQHandler+0x5ba>
 80060e2:	bf00      	nop
 80060e4:	04000120 	.word	0x04000120
 80060e8:	080071cb 	.word	0x080071cb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	f040 814c 	bne.w	800638e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80060f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060fa:	f003 0310 	and.w	r3, r3, #16
 80060fe:	2b00      	cmp	r3, #0
 8006100:	f000 8145 	beq.w	800638e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006104:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006108:	f003 0310 	and.w	r3, r3, #16
 800610c:	2b00      	cmp	r3, #0
 800610e:	f000 813e 	beq.w	800638e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	2210      	movs	r2, #16
 8006118:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006124:	2b40      	cmp	r3, #64	; 0x40
 8006126:	f040 80b6 	bne.w	8006296 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006136:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800613a:	2b00      	cmp	r3, #0
 800613c:	f000 8165 	beq.w	800640a <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006146:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800614a:	429a      	cmp	r2, r3
 800614c:	f080 815d 	bcs.w	800640a <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006156:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800615e:	69db      	ldr	r3, [r3, #28]
 8006160:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006164:	f000 8086 	beq.w	8006274 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006170:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006174:	e853 3f00 	ldrex	r3, [r3]
 8006178:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800617c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006180:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006184:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	461a      	mov	r2, r3
 800618e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006192:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006196:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800619a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800619e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80061a2:	e841 2300 	strex	r3, r2, [r1]
 80061a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80061aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d1da      	bne.n	8006168 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	3308      	adds	r3, #8
 80061b8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061bc:	e853 3f00 	ldrex	r3, [r3]
 80061c0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80061c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80061c4:	f023 0301 	bic.w	r3, r3, #1
 80061c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	3308      	adds	r3, #8
 80061d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80061d6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80061da:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061dc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80061de:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80061e2:	e841 2300 	strex	r3, r2, [r1]
 80061e6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80061e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d1e1      	bne.n	80061b2 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	3308      	adds	r3, #8
 80061f4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061f8:	e853 3f00 	ldrex	r3, [r3]
 80061fc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80061fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006200:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006204:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	3308      	adds	r3, #8
 800620e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006212:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006214:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006216:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006218:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800621a:	e841 2300 	strex	r3, r2, [r1]
 800621e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006220:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006222:	2b00      	cmp	r3, #0
 8006224:	d1e3      	bne.n	80061ee <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2220      	movs	r2, #32
 800622a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2200      	movs	r2, #0
 8006232:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800623a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800623c:	e853 3f00 	ldrex	r3, [r3]
 8006240:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006242:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006244:	f023 0310 	bic.w	r3, r3, #16
 8006248:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	461a      	mov	r2, r3
 8006252:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006256:	65bb      	str	r3, [r7, #88]	; 0x58
 8006258:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800625a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800625c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800625e:	e841 2300 	strex	r3, r2, [r1]
 8006262:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006264:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006266:	2b00      	cmp	r3, #0
 8006268:	d1e4      	bne.n	8006234 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800626e:	4618      	mov	r0, r3
 8006270:	f7fc fc4c 	bl	8002b0c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2202      	movs	r2, #2
 8006278:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006286:	b29b      	uxth	r3, r3
 8006288:	1ad3      	subs	r3, r2, r3
 800628a:	b29b      	uxth	r3, r3
 800628c:	4619      	mov	r1, r3
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f000 f8f6 	bl	8006480 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006294:	e0b9      	b.n	800640a <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80062a2:	b29b      	uxth	r3, r3
 80062a4:	1ad3      	subs	r3, r2, r3
 80062a6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80062b0:	b29b      	uxth	r3, r3
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	f000 80ab 	beq.w	800640e <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 80062b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80062bc:	2b00      	cmp	r3, #0
 80062be:	f000 80a6 	beq.w	800640e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ca:	e853 3f00 	ldrex	r3, [r3]
 80062ce:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80062d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062d2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80062d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	461a      	mov	r2, r3
 80062e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80062e4:	647b      	str	r3, [r7, #68]	; 0x44
 80062e6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062e8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80062ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80062ec:	e841 2300 	strex	r3, r2, [r1]
 80062f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80062f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d1e4      	bne.n	80062c2 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	3308      	adds	r3, #8
 80062fe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006302:	e853 3f00 	ldrex	r3, [r3]
 8006306:	623b      	str	r3, [r7, #32]
   return(result);
 8006308:	6a3b      	ldr	r3, [r7, #32]
 800630a:	f023 0301 	bic.w	r3, r3, #1
 800630e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	3308      	adds	r3, #8
 8006318:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800631c:	633a      	str	r2, [r7, #48]	; 0x30
 800631e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006320:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006322:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006324:	e841 2300 	strex	r3, r2, [r1]
 8006328:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800632a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800632c:	2b00      	cmp	r3, #0
 800632e:	d1e3      	bne.n	80062f8 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2220      	movs	r2, #32
 8006334:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2200      	movs	r2, #0
 800633c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2200      	movs	r2, #0
 8006342:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	e853 3f00 	ldrex	r3, [r3]
 8006350:	60fb      	str	r3, [r7, #12]
   return(result);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	f023 0310 	bic.w	r3, r3, #16
 8006358:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	461a      	mov	r2, r3
 8006362:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006366:	61fb      	str	r3, [r7, #28]
 8006368:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800636a:	69b9      	ldr	r1, [r7, #24]
 800636c:	69fa      	ldr	r2, [r7, #28]
 800636e:	e841 2300 	strex	r3, r2, [r1]
 8006372:	617b      	str	r3, [r7, #20]
   return(result);
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d1e4      	bne.n	8006344 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2202      	movs	r2, #2
 800637e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006380:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006384:	4619      	mov	r1, r3
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f000 f87a 	bl	8006480 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800638c:	e03f      	b.n	800640e <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800638e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006392:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006396:	2b00      	cmp	r3, #0
 8006398:	d00e      	beq.n	80063b8 <HAL_UART_IRQHandler+0x56c>
 800639a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800639e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d008      	beq.n	80063b8 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80063ae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f000 f871 	bl	8006498 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80063b6:	e02d      	b.n	8006414 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80063b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d00e      	beq.n	80063e2 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80063c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d008      	beq.n	80063e2 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d01c      	beq.n	8006412 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	4798      	blx	r3
    }
    return;
 80063e0:	e017      	b.n	8006412 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80063e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d012      	beq.n	8006414 <HAL_UART_IRQHandler+0x5c8>
 80063ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d00c      	beq.n	8006414 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 fefb 	bl	80071f6 <UART_EndTransmit_IT>
    return;
 8006400:	e008      	b.n	8006414 <HAL_UART_IRQHandler+0x5c8>
      return;
 8006402:	bf00      	nop
 8006404:	e006      	b.n	8006414 <HAL_UART_IRQHandler+0x5c8>
    return;
 8006406:	bf00      	nop
 8006408:	e004      	b.n	8006414 <HAL_UART_IRQHandler+0x5c8>
      return;
 800640a:	bf00      	nop
 800640c:	e002      	b.n	8006414 <HAL_UART_IRQHandler+0x5c8>
      return;
 800640e:	bf00      	nop
 8006410:	e000      	b.n	8006414 <HAL_UART_IRQHandler+0x5c8>
    return;
 8006412:	bf00      	nop
  }

}
 8006414:	37e8      	adds	r7, #232	; 0xe8
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}
 800641a:	bf00      	nop

0800641c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800641c:	b480      	push	{r7}
 800641e:	b083      	sub	sp, #12
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006424:	bf00      	nop
 8006426:	370c      	adds	r7, #12
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr

08006430 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006430:	b480      	push	{r7}
 8006432:	b083      	sub	sp, #12
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006438:	bf00      	nop
 800643a:	370c      	adds	r7, #12
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr

08006444 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006444:	b480      	push	{r7}
 8006446:	b083      	sub	sp, #12
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800644c:	bf00      	nop
 800644e:	370c      	adds	r7, #12
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr

08006458 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006458:	b480      	push	{r7}
 800645a:	b083      	sub	sp, #12
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006460:	bf00      	nop
 8006462:	370c      	adds	r7, #12
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr

0800646c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800646c:	b480      	push	{r7}
 800646e:	b083      	sub	sp, #12
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006474:	bf00      	nop
 8006476:	370c      	adds	r7, #12
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr

08006480 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006480:	b480      	push	{r7}
 8006482:	b083      	sub	sp, #12
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	460b      	mov	r3, r1
 800648a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800648c:	bf00      	nop
 800648e:	370c      	adds	r7, #12
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr

08006498 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006498:	b480      	push	{r7}
 800649a:	b083      	sub	sp, #12
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80064a0:	bf00      	nop
 80064a2:	370c      	adds	r7, #12
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr

080064ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b088      	sub	sp, #32
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80064b4:	2300      	movs	r3, #0
 80064b6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	689a      	ldr	r2, [r3, #8]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	691b      	ldr	r3, [r3, #16]
 80064c0:	431a      	orrs	r2, r3
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	695b      	ldr	r3, [r3, #20]
 80064c6:	431a      	orrs	r2, r3
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	69db      	ldr	r3, [r3, #28]
 80064cc:	4313      	orrs	r3, r2
 80064ce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	681a      	ldr	r2, [r3, #0]
 80064d6:	4ba6      	ldr	r3, [pc, #664]	; (8006770 <UART_SetConfig+0x2c4>)
 80064d8:	4013      	ands	r3, r2
 80064da:	687a      	ldr	r2, [r7, #4]
 80064dc:	6812      	ldr	r2, [r2, #0]
 80064de:	6979      	ldr	r1, [r7, #20]
 80064e0:	430b      	orrs	r3, r1
 80064e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	68da      	ldr	r2, [r3, #12]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	430a      	orrs	r2, r1
 80064f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	699b      	ldr	r3, [r3, #24]
 80064fe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6a1b      	ldr	r3, [r3, #32]
 8006504:	697a      	ldr	r2, [r7, #20]
 8006506:	4313      	orrs	r3, r2
 8006508:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	689b      	ldr	r3, [r3, #8]
 8006510:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	697a      	ldr	r2, [r7, #20]
 800651a:	430a      	orrs	r2, r1
 800651c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a94      	ldr	r2, [pc, #592]	; (8006774 <UART_SetConfig+0x2c8>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d120      	bne.n	800656a <UART_SetConfig+0xbe>
 8006528:	4b93      	ldr	r3, [pc, #588]	; (8006778 <UART_SetConfig+0x2cc>)
 800652a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800652e:	f003 0303 	and.w	r3, r3, #3
 8006532:	2b03      	cmp	r3, #3
 8006534:	d816      	bhi.n	8006564 <UART_SetConfig+0xb8>
 8006536:	a201      	add	r2, pc, #4	; (adr r2, 800653c <UART_SetConfig+0x90>)
 8006538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800653c:	0800654d 	.word	0x0800654d
 8006540:	08006559 	.word	0x08006559
 8006544:	08006553 	.word	0x08006553
 8006548:	0800655f 	.word	0x0800655f
 800654c:	2301      	movs	r3, #1
 800654e:	77fb      	strb	r3, [r7, #31]
 8006550:	e150      	b.n	80067f4 <UART_SetConfig+0x348>
 8006552:	2302      	movs	r3, #2
 8006554:	77fb      	strb	r3, [r7, #31]
 8006556:	e14d      	b.n	80067f4 <UART_SetConfig+0x348>
 8006558:	2304      	movs	r3, #4
 800655a:	77fb      	strb	r3, [r7, #31]
 800655c:	e14a      	b.n	80067f4 <UART_SetConfig+0x348>
 800655e:	2308      	movs	r3, #8
 8006560:	77fb      	strb	r3, [r7, #31]
 8006562:	e147      	b.n	80067f4 <UART_SetConfig+0x348>
 8006564:	2310      	movs	r3, #16
 8006566:	77fb      	strb	r3, [r7, #31]
 8006568:	e144      	b.n	80067f4 <UART_SetConfig+0x348>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a83      	ldr	r2, [pc, #524]	; (800677c <UART_SetConfig+0x2d0>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d132      	bne.n	80065da <UART_SetConfig+0x12e>
 8006574:	4b80      	ldr	r3, [pc, #512]	; (8006778 <UART_SetConfig+0x2cc>)
 8006576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800657a:	f003 030c 	and.w	r3, r3, #12
 800657e:	2b0c      	cmp	r3, #12
 8006580:	d828      	bhi.n	80065d4 <UART_SetConfig+0x128>
 8006582:	a201      	add	r2, pc, #4	; (adr r2, 8006588 <UART_SetConfig+0xdc>)
 8006584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006588:	080065bd 	.word	0x080065bd
 800658c:	080065d5 	.word	0x080065d5
 8006590:	080065d5 	.word	0x080065d5
 8006594:	080065d5 	.word	0x080065d5
 8006598:	080065c9 	.word	0x080065c9
 800659c:	080065d5 	.word	0x080065d5
 80065a0:	080065d5 	.word	0x080065d5
 80065a4:	080065d5 	.word	0x080065d5
 80065a8:	080065c3 	.word	0x080065c3
 80065ac:	080065d5 	.word	0x080065d5
 80065b0:	080065d5 	.word	0x080065d5
 80065b4:	080065d5 	.word	0x080065d5
 80065b8:	080065cf 	.word	0x080065cf
 80065bc:	2300      	movs	r3, #0
 80065be:	77fb      	strb	r3, [r7, #31]
 80065c0:	e118      	b.n	80067f4 <UART_SetConfig+0x348>
 80065c2:	2302      	movs	r3, #2
 80065c4:	77fb      	strb	r3, [r7, #31]
 80065c6:	e115      	b.n	80067f4 <UART_SetConfig+0x348>
 80065c8:	2304      	movs	r3, #4
 80065ca:	77fb      	strb	r3, [r7, #31]
 80065cc:	e112      	b.n	80067f4 <UART_SetConfig+0x348>
 80065ce:	2308      	movs	r3, #8
 80065d0:	77fb      	strb	r3, [r7, #31]
 80065d2:	e10f      	b.n	80067f4 <UART_SetConfig+0x348>
 80065d4:	2310      	movs	r3, #16
 80065d6:	77fb      	strb	r3, [r7, #31]
 80065d8:	e10c      	b.n	80067f4 <UART_SetConfig+0x348>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a68      	ldr	r2, [pc, #416]	; (8006780 <UART_SetConfig+0x2d4>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d120      	bne.n	8006626 <UART_SetConfig+0x17a>
 80065e4:	4b64      	ldr	r3, [pc, #400]	; (8006778 <UART_SetConfig+0x2cc>)
 80065e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065ea:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80065ee:	2b30      	cmp	r3, #48	; 0x30
 80065f0:	d013      	beq.n	800661a <UART_SetConfig+0x16e>
 80065f2:	2b30      	cmp	r3, #48	; 0x30
 80065f4:	d814      	bhi.n	8006620 <UART_SetConfig+0x174>
 80065f6:	2b20      	cmp	r3, #32
 80065f8:	d009      	beq.n	800660e <UART_SetConfig+0x162>
 80065fa:	2b20      	cmp	r3, #32
 80065fc:	d810      	bhi.n	8006620 <UART_SetConfig+0x174>
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d002      	beq.n	8006608 <UART_SetConfig+0x15c>
 8006602:	2b10      	cmp	r3, #16
 8006604:	d006      	beq.n	8006614 <UART_SetConfig+0x168>
 8006606:	e00b      	b.n	8006620 <UART_SetConfig+0x174>
 8006608:	2300      	movs	r3, #0
 800660a:	77fb      	strb	r3, [r7, #31]
 800660c:	e0f2      	b.n	80067f4 <UART_SetConfig+0x348>
 800660e:	2302      	movs	r3, #2
 8006610:	77fb      	strb	r3, [r7, #31]
 8006612:	e0ef      	b.n	80067f4 <UART_SetConfig+0x348>
 8006614:	2304      	movs	r3, #4
 8006616:	77fb      	strb	r3, [r7, #31]
 8006618:	e0ec      	b.n	80067f4 <UART_SetConfig+0x348>
 800661a:	2308      	movs	r3, #8
 800661c:	77fb      	strb	r3, [r7, #31]
 800661e:	e0e9      	b.n	80067f4 <UART_SetConfig+0x348>
 8006620:	2310      	movs	r3, #16
 8006622:	77fb      	strb	r3, [r7, #31]
 8006624:	e0e6      	b.n	80067f4 <UART_SetConfig+0x348>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a56      	ldr	r2, [pc, #344]	; (8006784 <UART_SetConfig+0x2d8>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d120      	bne.n	8006672 <UART_SetConfig+0x1c6>
 8006630:	4b51      	ldr	r3, [pc, #324]	; (8006778 <UART_SetConfig+0x2cc>)
 8006632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006636:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800663a:	2bc0      	cmp	r3, #192	; 0xc0
 800663c:	d013      	beq.n	8006666 <UART_SetConfig+0x1ba>
 800663e:	2bc0      	cmp	r3, #192	; 0xc0
 8006640:	d814      	bhi.n	800666c <UART_SetConfig+0x1c0>
 8006642:	2b80      	cmp	r3, #128	; 0x80
 8006644:	d009      	beq.n	800665a <UART_SetConfig+0x1ae>
 8006646:	2b80      	cmp	r3, #128	; 0x80
 8006648:	d810      	bhi.n	800666c <UART_SetConfig+0x1c0>
 800664a:	2b00      	cmp	r3, #0
 800664c:	d002      	beq.n	8006654 <UART_SetConfig+0x1a8>
 800664e:	2b40      	cmp	r3, #64	; 0x40
 8006650:	d006      	beq.n	8006660 <UART_SetConfig+0x1b4>
 8006652:	e00b      	b.n	800666c <UART_SetConfig+0x1c0>
 8006654:	2300      	movs	r3, #0
 8006656:	77fb      	strb	r3, [r7, #31]
 8006658:	e0cc      	b.n	80067f4 <UART_SetConfig+0x348>
 800665a:	2302      	movs	r3, #2
 800665c:	77fb      	strb	r3, [r7, #31]
 800665e:	e0c9      	b.n	80067f4 <UART_SetConfig+0x348>
 8006660:	2304      	movs	r3, #4
 8006662:	77fb      	strb	r3, [r7, #31]
 8006664:	e0c6      	b.n	80067f4 <UART_SetConfig+0x348>
 8006666:	2308      	movs	r3, #8
 8006668:	77fb      	strb	r3, [r7, #31]
 800666a:	e0c3      	b.n	80067f4 <UART_SetConfig+0x348>
 800666c:	2310      	movs	r3, #16
 800666e:	77fb      	strb	r3, [r7, #31]
 8006670:	e0c0      	b.n	80067f4 <UART_SetConfig+0x348>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a44      	ldr	r2, [pc, #272]	; (8006788 <UART_SetConfig+0x2dc>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d125      	bne.n	80066c8 <UART_SetConfig+0x21c>
 800667c:	4b3e      	ldr	r3, [pc, #248]	; (8006778 <UART_SetConfig+0x2cc>)
 800667e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006682:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006686:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800668a:	d017      	beq.n	80066bc <UART_SetConfig+0x210>
 800668c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006690:	d817      	bhi.n	80066c2 <UART_SetConfig+0x216>
 8006692:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006696:	d00b      	beq.n	80066b0 <UART_SetConfig+0x204>
 8006698:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800669c:	d811      	bhi.n	80066c2 <UART_SetConfig+0x216>
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d003      	beq.n	80066aa <UART_SetConfig+0x1fe>
 80066a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066a6:	d006      	beq.n	80066b6 <UART_SetConfig+0x20a>
 80066a8:	e00b      	b.n	80066c2 <UART_SetConfig+0x216>
 80066aa:	2300      	movs	r3, #0
 80066ac:	77fb      	strb	r3, [r7, #31]
 80066ae:	e0a1      	b.n	80067f4 <UART_SetConfig+0x348>
 80066b0:	2302      	movs	r3, #2
 80066b2:	77fb      	strb	r3, [r7, #31]
 80066b4:	e09e      	b.n	80067f4 <UART_SetConfig+0x348>
 80066b6:	2304      	movs	r3, #4
 80066b8:	77fb      	strb	r3, [r7, #31]
 80066ba:	e09b      	b.n	80067f4 <UART_SetConfig+0x348>
 80066bc:	2308      	movs	r3, #8
 80066be:	77fb      	strb	r3, [r7, #31]
 80066c0:	e098      	b.n	80067f4 <UART_SetConfig+0x348>
 80066c2:	2310      	movs	r3, #16
 80066c4:	77fb      	strb	r3, [r7, #31]
 80066c6:	e095      	b.n	80067f4 <UART_SetConfig+0x348>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a2f      	ldr	r2, [pc, #188]	; (800678c <UART_SetConfig+0x2e0>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d125      	bne.n	800671e <UART_SetConfig+0x272>
 80066d2:	4b29      	ldr	r3, [pc, #164]	; (8006778 <UART_SetConfig+0x2cc>)
 80066d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066d8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80066dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80066e0:	d017      	beq.n	8006712 <UART_SetConfig+0x266>
 80066e2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80066e6:	d817      	bhi.n	8006718 <UART_SetConfig+0x26c>
 80066e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066ec:	d00b      	beq.n	8006706 <UART_SetConfig+0x25a>
 80066ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066f2:	d811      	bhi.n	8006718 <UART_SetConfig+0x26c>
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d003      	beq.n	8006700 <UART_SetConfig+0x254>
 80066f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066fc:	d006      	beq.n	800670c <UART_SetConfig+0x260>
 80066fe:	e00b      	b.n	8006718 <UART_SetConfig+0x26c>
 8006700:	2301      	movs	r3, #1
 8006702:	77fb      	strb	r3, [r7, #31]
 8006704:	e076      	b.n	80067f4 <UART_SetConfig+0x348>
 8006706:	2302      	movs	r3, #2
 8006708:	77fb      	strb	r3, [r7, #31]
 800670a:	e073      	b.n	80067f4 <UART_SetConfig+0x348>
 800670c:	2304      	movs	r3, #4
 800670e:	77fb      	strb	r3, [r7, #31]
 8006710:	e070      	b.n	80067f4 <UART_SetConfig+0x348>
 8006712:	2308      	movs	r3, #8
 8006714:	77fb      	strb	r3, [r7, #31]
 8006716:	e06d      	b.n	80067f4 <UART_SetConfig+0x348>
 8006718:	2310      	movs	r3, #16
 800671a:	77fb      	strb	r3, [r7, #31]
 800671c:	e06a      	b.n	80067f4 <UART_SetConfig+0x348>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a1b      	ldr	r2, [pc, #108]	; (8006790 <UART_SetConfig+0x2e4>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d138      	bne.n	800679a <UART_SetConfig+0x2ee>
 8006728:	4b13      	ldr	r3, [pc, #76]	; (8006778 <UART_SetConfig+0x2cc>)
 800672a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800672e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006732:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006736:	d017      	beq.n	8006768 <UART_SetConfig+0x2bc>
 8006738:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800673c:	d82a      	bhi.n	8006794 <UART_SetConfig+0x2e8>
 800673e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006742:	d00b      	beq.n	800675c <UART_SetConfig+0x2b0>
 8006744:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006748:	d824      	bhi.n	8006794 <UART_SetConfig+0x2e8>
 800674a:	2b00      	cmp	r3, #0
 800674c:	d003      	beq.n	8006756 <UART_SetConfig+0x2aa>
 800674e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006752:	d006      	beq.n	8006762 <UART_SetConfig+0x2b6>
 8006754:	e01e      	b.n	8006794 <UART_SetConfig+0x2e8>
 8006756:	2300      	movs	r3, #0
 8006758:	77fb      	strb	r3, [r7, #31]
 800675a:	e04b      	b.n	80067f4 <UART_SetConfig+0x348>
 800675c:	2302      	movs	r3, #2
 800675e:	77fb      	strb	r3, [r7, #31]
 8006760:	e048      	b.n	80067f4 <UART_SetConfig+0x348>
 8006762:	2304      	movs	r3, #4
 8006764:	77fb      	strb	r3, [r7, #31]
 8006766:	e045      	b.n	80067f4 <UART_SetConfig+0x348>
 8006768:	2308      	movs	r3, #8
 800676a:	77fb      	strb	r3, [r7, #31]
 800676c:	e042      	b.n	80067f4 <UART_SetConfig+0x348>
 800676e:	bf00      	nop
 8006770:	efff69f3 	.word	0xefff69f3
 8006774:	40011000 	.word	0x40011000
 8006778:	40023800 	.word	0x40023800
 800677c:	40004400 	.word	0x40004400
 8006780:	40004800 	.word	0x40004800
 8006784:	40004c00 	.word	0x40004c00
 8006788:	40005000 	.word	0x40005000
 800678c:	40011400 	.word	0x40011400
 8006790:	40007800 	.word	0x40007800
 8006794:	2310      	movs	r3, #16
 8006796:	77fb      	strb	r3, [r7, #31]
 8006798:	e02c      	b.n	80067f4 <UART_SetConfig+0x348>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a72      	ldr	r2, [pc, #456]	; (8006968 <UART_SetConfig+0x4bc>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d125      	bne.n	80067f0 <UART_SetConfig+0x344>
 80067a4:	4b71      	ldr	r3, [pc, #452]	; (800696c <UART_SetConfig+0x4c0>)
 80067a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067aa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80067ae:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80067b2:	d017      	beq.n	80067e4 <UART_SetConfig+0x338>
 80067b4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80067b8:	d817      	bhi.n	80067ea <UART_SetConfig+0x33e>
 80067ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067be:	d00b      	beq.n	80067d8 <UART_SetConfig+0x32c>
 80067c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067c4:	d811      	bhi.n	80067ea <UART_SetConfig+0x33e>
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d003      	beq.n	80067d2 <UART_SetConfig+0x326>
 80067ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80067ce:	d006      	beq.n	80067de <UART_SetConfig+0x332>
 80067d0:	e00b      	b.n	80067ea <UART_SetConfig+0x33e>
 80067d2:	2300      	movs	r3, #0
 80067d4:	77fb      	strb	r3, [r7, #31]
 80067d6:	e00d      	b.n	80067f4 <UART_SetConfig+0x348>
 80067d8:	2302      	movs	r3, #2
 80067da:	77fb      	strb	r3, [r7, #31]
 80067dc:	e00a      	b.n	80067f4 <UART_SetConfig+0x348>
 80067de:	2304      	movs	r3, #4
 80067e0:	77fb      	strb	r3, [r7, #31]
 80067e2:	e007      	b.n	80067f4 <UART_SetConfig+0x348>
 80067e4:	2308      	movs	r3, #8
 80067e6:	77fb      	strb	r3, [r7, #31]
 80067e8:	e004      	b.n	80067f4 <UART_SetConfig+0x348>
 80067ea:	2310      	movs	r3, #16
 80067ec:	77fb      	strb	r3, [r7, #31]
 80067ee:	e001      	b.n	80067f4 <UART_SetConfig+0x348>
 80067f0:	2310      	movs	r3, #16
 80067f2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	69db      	ldr	r3, [r3, #28]
 80067f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067fc:	d15b      	bne.n	80068b6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80067fe:	7ffb      	ldrb	r3, [r7, #31]
 8006800:	2b08      	cmp	r3, #8
 8006802:	d828      	bhi.n	8006856 <UART_SetConfig+0x3aa>
 8006804:	a201      	add	r2, pc, #4	; (adr r2, 800680c <UART_SetConfig+0x360>)
 8006806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800680a:	bf00      	nop
 800680c:	08006831 	.word	0x08006831
 8006810:	08006839 	.word	0x08006839
 8006814:	08006841 	.word	0x08006841
 8006818:	08006857 	.word	0x08006857
 800681c:	08006847 	.word	0x08006847
 8006820:	08006857 	.word	0x08006857
 8006824:	08006857 	.word	0x08006857
 8006828:	08006857 	.word	0x08006857
 800682c:	0800684f 	.word	0x0800684f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006830:	f7fd fc8e 	bl	8004150 <HAL_RCC_GetPCLK1Freq>
 8006834:	61b8      	str	r0, [r7, #24]
        break;
 8006836:	e013      	b.n	8006860 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006838:	f7fd fc9e 	bl	8004178 <HAL_RCC_GetPCLK2Freq>
 800683c:	61b8      	str	r0, [r7, #24]
        break;
 800683e:	e00f      	b.n	8006860 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006840:	4b4b      	ldr	r3, [pc, #300]	; (8006970 <UART_SetConfig+0x4c4>)
 8006842:	61bb      	str	r3, [r7, #24]
        break;
 8006844:	e00c      	b.n	8006860 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006846:	f7fd fb71 	bl	8003f2c <HAL_RCC_GetSysClockFreq>
 800684a:	61b8      	str	r0, [r7, #24]
        break;
 800684c:	e008      	b.n	8006860 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800684e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006852:	61bb      	str	r3, [r7, #24]
        break;
 8006854:	e004      	b.n	8006860 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006856:	2300      	movs	r3, #0
 8006858:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800685a:	2301      	movs	r3, #1
 800685c:	77bb      	strb	r3, [r7, #30]
        break;
 800685e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006860:	69bb      	ldr	r3, [r7, #24]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d074      	beq.n	8006950 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006866:	69bb      	ldr	r3, [r7, #24]
 8006868:	005a      	lsls	r2, r3, #1
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	085b      	lsrs	r3, r3, #1
 8006870:	441a      	add	r2, r3
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	fbb2 f3f3 	udiv	r3, r2, r3
 800687a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	2b0f      	cmp	r3, #15
 8006880:	d916      	bls.n	80068b0 <UART_SetConfig+0x404>
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006888:	d212      	bcs.n	80068b0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	b29b      	uxth	r3, r3
 800688e:	f023 030f 	bic.w	r3, r3, #15
 8006892:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	085b      	lsrs	r3, r3, #1
 8006898:	b29b      	uxth	r3, r3
 800689a:	f003 0307 	and.w	r3, r3, #7
 800689e:	b29a      	uxth	r2, r3
 80068a0:	89fb      	ldrh	r3, [r7, #14]
 80068a2:	4313      	orrs	r3, r2
 80068a4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	89fa      	ldrh	r2, [r7, #14]
 80068ac:	60da      	str	r2, [r3, #12]
 80068ae:	e04f      	b.n	8006950 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80068b0:	2301      	movs	r3, #1
 80068b2:	77bb      	strb	r3, [r7, #30]
 80068b4:	e04c      	b.n	8006950 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80068b6:	7ffb      	ldrb	r3, [r7, #31]
 80068b8:	2b08      	cmp	r3, #8
 80068ba:	d828      	bhi.n	800690e <UART_SetConfig+0x462>
 80068bc:	a201      	add	r2, pc, #4	; (adr r2, 80068c4 <UART_SetConfig+0x418>)
 80068be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068c2:	bf00      	nop
 80068c4:	080068e9 	.word	0x080068e9
 80068c8:	080068f1 	.word	0x080068f1
 80068cc:	080068f9 	.word	0x080068f9
 80068d0:	0800690f 	.word	0x0800690f
 80068d4:	080068ff 	.word	0x080068ff
 80068d8:	0800690f 	.word	0x0800690f
 80068dc:	0800690f 	.word	0x0800690f
 80068e0:	0800690f 	.word	0x0800690f
 80068e4:	08006907 	.word	0x08006907
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068e8:	f7fd fc32 	bl	8004150 <HAL_RCC_GetPCLK1Freq>
 80068ec:	61b8      	str	r0, [r7, #24]
        break;
 80068ee:	e013      	b.n	8006918 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80068f0:	f7fd fc42 	bl	8004178 <HAL_RCC_GetPCLK2Freq>
 80068f4:	61b8      	str	r0, [r7, #24]
        break;
 80068f6:	e00f      	b.n	8006918 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068f8:	4b1d      	ldr	r3, [pc, #116]	; (8006970 <UART_SetConfig+0x4c4>)
 80068fa:	61bb      	str	r3, [r7, #24]
        break;
 80068fc:	e00c      	b.n	8006918 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068fe:	f7fd fb15 	bl	8003f2c <HAL_RCC_GetSysClockFreq>
 8006902:	61b8      	str	r0, [r7, #24]
        break;
 8006904:	e008      	b.n	8006918 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006906:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800690a:	61bb      	str	r3, [r7, #24]
        break;
 800690c:	e004      	b.n	8006918 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800690e:	2300      	movs	r3, #0
 8006910:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006912:	2301      	movs	r3, #1
 8006914:	77bb      	strb	r3, [r7, #30]
        break;
 8006916:	bf00      	nop
    }

    if (pclk != 0U)
 8006918:	69bb      	ldr	r3, [r7, #24]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d018      	beq.n	8006950 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	085a      	lsrs	r2, r3, #1
 8006924:	69bb      	ldr	r3, [r7, #24]
 8006926:	441a      	add	r2, r3
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006930:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	2b0f      	cmp	r3, #15
 8006936:	d909      	bls.n	800694c <UART_SetConfig+0x4a0>
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800693e:	d205      	bcs.n	800694c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	b29a      	uxth	r2, r3
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	60da      	str	r2, [r3, #12]
 800694a:	e001      	b.n	8006950 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800694c:	2301      	movs	r3, #1
 800694e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2200      	movs	r2, #0
 8006954:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2200      	movs	r2, #0
 800695a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800695c:	7fbb      	ldrb	r3, [r7, #30]
}
 800695e:	4618      	mov	r0, r3
 8006960:	3720      	adds	r7, #32
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}
 8006966:	bf00      	nop
 8006968:	40007c00 	.word	0x40007c00
 800696c:	40023800 	.word	0x40023800
 8006970:	00f42400 	.word	0x00f42400

08006974 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006974:	b480      	push	{r7}
 8006976:	b083      	sub	sp, #12
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006980:	f003 0301 	and.w	r3, r3, #1
 8006984:	2b00      	cmp	r3, #0
 8006986:	d00a      	beq.n	800699e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	430a      	orrs	r2, r1
 800699c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a2:	f003 0302 	and.w	r3, r3, #2
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d00a      	beq.n	80069c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	430a      	orrs	r2, r1
 80069be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c4:	f003 0304 	and.w	r3, r3, #4
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d00a      	beq.n	80069e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	430a      	orrs	r2, r1
 80069e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e6:	f003 0308 	and.w	r3, r3, #8
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d00a      	beq.n	8006a04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	430a      	orrs	r2, r1
 8006a02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a08:	f003 0310 	and.w	r3, r3, #16
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d00a      	beq.n	8006a26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	430a      	orrs	r2, r1
 8006a24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a2a:	f003 0320 	and.w	r3, r3, #32
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d00a      	beq.n	8006a48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	689b      	ldr	r3, [r3, #8]
 8006a38:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	430a      	orrs	r2, r1
 8006a46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d01a      	beq.n	8006a8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	430a      	orrs	r2, r1
 8006a68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a72:	d10a      	bne.n	8006a8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	430a      	orrs	r2, r1
 8006a88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d00a      	beq.n	8006aac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	430a      	orrs	r2, r1
 8006aaa:	605a      	str	r2, [r3, #4]
  }
}
 8006aac:	bf00      	nop
 8006aae:	370c      	adds	r7, #12
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab6:	4770      	bx	lr

08006ab8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b086      	sub	sp, #24
 8006abc:	af02      	add	r7, sp, #8
 8006abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006ac8:	f7fb fe00 	bl	80026cc <HAL_GetTick>
 8006acc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f003 0308 	and.w	r3, r3, #8
 8006ad8:	2b08      	cmp	r3, #8
 8006ada:	d10e      	bne.n	8006afa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006adc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ae0:	9300      	str	r3, [sp, #0]
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f000 f831 	bl	8006b52 <UART_WaitOnFlagUntilTimeout>
 8006af0:	4603      	mov	r3, r0
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d001      	beq.n	8006afa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006af6:	2303      	movs	r3, #3
 8006af8:	e027      	b.n	8006b4a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f003 0304 	and.w	r3, r3, #4
 8006b04:	2b04      	cmp	r3, #4
 8006b06:	d10e      	bne.n	8006b26 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b0c:	9300      	str	r3, [sp, #0]
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2200      	movs	r2, #0
 8006b12:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f000 f81b 	bl	8006b52 <UART_WaitOnFlagUntilTimeout>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d001      	beq.n	8006b26 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b22:	2303      	movs	r3, #3
 8006b24:	e011      	b.n	8006b4a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2220      	movs	r2, #32
 8006b2a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2220      	movs	r2, #32
 8006b30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2200      	movs	r2, #0
 8006b38:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2200      	movs	r2, #0
 8006b44:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006b48:	2300      	movs	r3, #0
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3710      	adds	r7, #16
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}

08006b52 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b52:	b580      	push	{r7, lr}
 8006b54:	b09c      	sub	sp, #112	; 0x70
 8006b56:	af00      	add	r7, sp, #0
 8006b58:	60f8      	str	r0, [r7, #12]
 8006b5a:	60b9      	str	r1, [r7, #8]
 8006b5c:	603b      	str	r3, [r7, #0]
 8006b5e:	4613      	mov	r3, r2
 8006b60:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b62:	e0a7      	b.n	8006cb4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b6a:	f000 80a3 	beq.w	8006cb4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b6e:	f7fb fdad 	bl	80026cc <HAL_GetTick>
 8006b72:	4602      	mov	r2, r0
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	1ad3      	subs	r3, r2, r3
 8006b78:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d302      	bcc.n	8006b84 <UART_WaitOnFlagUntilTimeout+0x32>
 8006b7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d13f      	bne.n	8006c04 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b8c:	e853 3f00 	ldrex	r3, [r3]
 8006b90:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006b92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b94:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006b98:	667b      	str	r3, [r7, #100]	; 0x64
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ba2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ba4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006ba8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006baa:	e841 2300 	strex	r3, r2, [r1]
 8006bae:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006bb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d1e6      	bne.n	8006b84 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	3308      	adds	r3, #8
 8006bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bc0:	e853 3f00 	ldrex	r3, [r3]
 8006bc4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bc8:	f023 0301 	bic.w	r3, r3, #1
 8006bcc:	663b      	str	r3, [r7, #96]	; 0x60
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	3308      	adds	r3, #8
 8006bd4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006bd6:	64ba      	str	r2, [r7, #72]	; 0x48
 8006bd8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bda:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006bdc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006bde:	e841 2300 	strex	r3, r2, [r1]
 8006be2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006be4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d1e5      	bne.n	8006bb6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2220      	movs	r2, #32
 8006bee:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2220      	movs	r2, #32
 8006bf4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006c00:	2303      	movs	r3, #3
 8006c02:	e068      	b.n	8006cd6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f003 0304 	and.w	r3, r3, #4
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d050      	beq.n	8006cb4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	69db      	ldr	r3, [r3, #28]
 8006c18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c20:	d148      	bne.n	8006cb4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c2a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c34:	e853 3f00 	ldrex	r3, [r3]
 8006c38:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006c40:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	461a      	mov	r2, r3
 8006c48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c4a:	637b      	str	r3, [r7, #52]	; 0x34
 8006c4c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c4e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006c50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c52:	e841 2300 	strex	r3, r2, [r1]
 8006c56:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d1e6      	bne.n	8006c2c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	3308      	adds	r3, #8
 8006c64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	e853 3f00 	ldrex	r3, [r3]
 8006c6c:	613b      	str	r3, [r7, #16]
   return(result);
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	f023 0301 	bic.w	r3, r3, #1
 8006c74:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	3308      	adds	r3, #8
 8006c7c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006c7e:	623a      	str	r2, [r7, #32]
 8006c80:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c82:	69f9      	ldr	r1, [r7, #28]
 8006c84:	6a3a      	ldr	r2, [r7, #32]
 8006c86:	e841 2300 	strex	r3, r2, [r1]
 8006c8a:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c8c:	69bb      	ldr	r3, [r7, #24]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d1e5      	bne.n	8006c5e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2220      	movs	r2, #32
 8006c96:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2220      	movs	r2, #32
 8006c9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	2220      	movs	r2, #32
 8006ca4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2200      	movs	r2, #0
 8006cac:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006cb0:	2303      	movs	r3, #3
 8006cb2:	e010      	b.n	8006cd6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	69da      	ldr	r2, [r3, #28]
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	4013      	ands	r3, r2
 8006cbe:	68ba      	ldr	r2, [r7, #8]
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	bf0c      	ite	eq
 8006cc4:	2301      	moveq	r3, #1
 8006cc6:	2300      	movne	r3, #0
 8006cc8:	b2db      	uxtb	r3, r3
 8006cca:	461a      	mov	r2, r3
 8006ccc:	79fb      	ldrb	r3, [r7, #7]
 8006cce:	429a      	cmp	r2, r3
 8006cd0:	f43f af48 	beq.w	8006b64 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006cd4:	2300      	movs	r3, #0
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3770      	adds	r7, #112	; 0x70
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd80      	pop	{r7, pc}
	...

08006ce0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b096      	sub	sp, #88	; 0x58
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	60f8      	str	r0, [r7, #12]
 8006ce8:	60b9      	str	r1, [r7, #8]
 8006cea:	4613      	mov	r3, r2
 8006cec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	68ba      	ldr	r2, [r7, #8]
 8006cf2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	88fa      	ldrh	r2, [r7, #6]
 8006cf8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2222      	movs	r2, #34	; 0x22
 8006d08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d028      	beq.n	8006d66 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d18:	4a3e      	ldr	r2, [pc, #248]	; (8006e14 <UART_Start_Receive_DMA+0x134>)
 8006d1a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d20:	4a3d      	ldr	r2, [pc, #244]	; (8006e18 <UART_Start_Receive_DMA+0x138>)
 8006d22:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d28:	4a3c      	ldr	r2, [pc, #240]	; (8006e1c <UART_Start_Receive_DMA+0x13c>)
 8006d2a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d30:	2200      	movs	r2, #0
 8006d32:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	3324      	adds	r3, #36	; 0x24
 8006d3e:	4619      	mov	r1, r3
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d44:	461a      	mov	r2, r3
 8006d46:	88fb      	ldrh	r3, [r7, #6]
 8006d48:	f7fb fe80 	bl	8002a4c <HAL_DMA_Start_IT>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d009      	beq.n	8006d66 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2210      	movs	r2, #16
 8006d56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2220      	movs	r2, #32
 8006d5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 8006d62:	2301      	movs	r3, #1
 8006d64:	e051      	b.n	8006e0a <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	691b      	ldr	r3, [r3, #16]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d018      	beq.n	8006da0 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d76:	e853 3f00 	ldrex	r3, [r3]
 8006d7a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d82:	657b      	str	r3, [r7, #84]	; 0x54
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	461a      	mov	r2, r3
 8006d8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d8c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d8e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d90:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006d92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d94:	e841 2300 	strex	r3, r2, [r1]
 8006d98:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006d9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d1e6      	bne.n	8006d6e <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	3308      	adds	r3, #8
 8006da6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006daa:	e853 3f00 	ldrex	r3, [r3]
 8006dae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db2:	f043 0301 	orr.w	r3, r3, #1
 8006db6:	653b      	str	r3, [r7, #80]	; 0x50
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	3308      	adds	r3, #8
 8006dbe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006dc0:	637a      	str	r2, [r7, #52]	; 0x34
 8006dc2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dc4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006dc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006dc8:	e841 2300 	strex	r3, r2, [r1]
 8006dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d1e5      	bne.n	8006da0 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	3308      	adds	r3, #8
 8006dda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	e853 3f00 	ldrex	r3, [r3]
 8006de2:	613b      	str	r3, [r7, #16]
   return(result);
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006dea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	3308      	adds	r3, #8
 8006df2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006df4:	623a      	str	r2, [r7, #32]
 8006df6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006df8:	69f9      	ldr	r1, [r7, #28]
 8006dfa:	6a3a      	ldr	r2, [r7, #32]
 8006dfc:	e841 2300 	strex	r3, r2, [r1]
 8006e00:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e02:	69bb      	ldr	r3, [r7, #24]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d1e5      	bne.n	8006dd4 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8006e08:	2300      	movs	r3, #0
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3758      	adds	r7, #88	; 0x58
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}
 8006e12:	bf00      	nop
 8006e14:	08006fe7 	.word	0x08006fe7
 8006e18:	0800710f 	.word	0x0800710f
 8006e1c:	0800714d 	.word	0x0800714d

08006e20 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b089      	sub	sp, #36	; 0x24
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	e853 3f00 	ldrex	r3, [r3]
 8006e34:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006e3c:	61fb      	str	r3, [r7, #28]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	461a      	mov	r2, r3
 8006e44:	69fb      	ldr	r3, [r7, #28]
 8006e46:	61bb      	str	r3, [r7, #24]
 8006e48:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e4a:	6979      	ldr	r1, [r7, #20]
 8006e4c:	69ba      	ldr	r2, [r7, #24]
 8006e4e:	e841 2300 	strex	r3, r2, [r1]
 8006e52:	613b      	str	r3, [r7, #16]
   return(result);
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d1e6      	bne.n	8006e28 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2220      	movs	r2, #32
 8006e5e:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8006e60:	bf00      	nop
 8006e62:	3724      	adds	r7, #36	; 0x24
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr

08006e6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b095      	sub	sp, #84	; 0x54
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e7c:	e853 3f00 	ldrex	r3, [r3]
 8006e80:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e88:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	461a      	mov	r2, r3
 8006e90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e92:	643b      	str	r3, [r7, #64]	; 0x40
 8006e94:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e96:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006e98:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006e9a:	e841 2300 	strex	r3, r2, [r1]
 8006e9e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d1e6      	bne.n	8006e74 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	3308      	adds	r3, #8
 8006eac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eae:	6a3b      	ldr	r3, [r7, #32]
 8006eb0:	e853 3f00 	ldrex	r3, [r3]
 8006eb4:	61fb      	str	r3, [r7, #28]
   return(result);
 8006eb6:	69fb      	ldr	r3, [r7, #28]
 8006eb8:	f023 0301 	bic.w	r3, r3, #1
 8006ebc:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	3308      	adds	r3, #8
 8006ec4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ec6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ec8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ecc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ece:	e841 2300 	strex	r3, r2, [r1]
 8006ed2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d1e5      	bne.n	8006ea6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ede:	2b01      	cmp	r3, #1
 8006ee0:	d118      	bne.n	8006f14 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	e853 3f00 	ldrex	r3, [r3]
 8006eee:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	f023 0310 	bic.w	r3, r3, #16
 8006ef6:	647b      	str	r3, [r7, #68]	; 0x44
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	461a      	mov	r2, r3
 8006efe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f00:	61bb      	str	r3, [r7, #24]
 8006f02:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f04:	6979      	ldr	r1, [r7, #20]
 8006f06:	69ba      	ldr	r2, [r7, #24]
 8006f08:	e841 2300 	strex	r3, r2, [r1]
 8006f0c:	613b      	str	r3, [r7, #16]
   return(result);
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d1e6      	bne.n	8006ee2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2220      	movs	r2, #32
 8006f18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2200      	movs	r2, #0
 8006f26:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006f28:	bf00      	nop
 8006f2a:	3754      	adds	r7, #84	; 0x54
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr

08006f34 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b090      	sub	sp, #64	; 0x40
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f40:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	69db      	ldr	r3, [r3, #28]
 8006f46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f4a:	d037      	beq.n	8006fbc <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8006f4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f4e:	2200      	movs	r2, #0
 8006f50:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006f54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	3308      	adds	r3, #8
 8006f5a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f5e:	e853 3f00 	ldrex	r3, [r3]
 8006f62:	623b      	str	r3, [r7, #32]
   return(result);
 8006f64:	6a3b      	ldr	r3, [r7, #32]
 8006f66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f6a:	63bb      	str	r3, [r7, #56]	; 0x38
 8006f6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	3308      	adds	r3, #8
 8006f72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f74:	633a      	str	r2, [r7, #48]	; 0x30
 8006f76:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f78:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f7c:	e841 2300 	strex	r3, r2, [r1]
 8006f80:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d1e5      	bne.n	8006f54 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006f88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	e853 3f00 	ldrex	r3, [r3]
 8006f94:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f9c:	637b      	str	r3, [r7, #52]	; 0x34
 8006f9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	461a      	mov	r2, r3
 8006fa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fa6:	61fb      	str	r3, [r7, #28]
 8006fa8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006faa:	69b9      	ldr	r1, [r7, #24]
 8006fac:	69fa      	ldr	r2, [r7, #28]
 8006fae:	e841 2300 	strex	r3, r2, [r1]
 8006fb2:	617b      	str	r3, [r7, #20]
   return(result);
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d1e6      	bne.n	8006f88 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006fba:	e002      	b.n	8006fc2 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8006fbc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006fbe:	f7ff fa2d 	bl	800641c <HAL_UART_TxCpltCallback>
}
 8006fc2:	bf00      	nop
 8006fc4:	3740      	adds	r7, #64	; 0x40
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}

08006fca <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006fca:	b580      	push	{r7, lr}
 8006fcc:	b084      	sub	sp, #16
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fd6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006fd8:	68f8      	ldr	r0, [r7, #12]
 8006fda:	f7ff fa29 	bl	8006430 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006fde:	bf00      	nop
 8006fe0:	3710      	adds	r7, #16
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}

08006fe6 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006fe6:	b580      	push	{r7, lr}
 8006fe8:	b09c      	sub	sp, #112	; 0x70
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ff2:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	69db      	ldr	r3, [r3, #28]
 8006ff8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ffc:	d071      	beq.n	80070e2 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8006ffe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007000:	2200      	movs	r2, #0
 8007002:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007006:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800700c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800700e:	e853 3f00 	ldrex	r3, [r3]
 8007012:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007014:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007016:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800701a:	66bb      	str	r3, [r7, #104]	; 0x68
 800701c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	461a      	mov	r2, r3
 8007022:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007024:	65bb      	str	r3, [r7, #88]	; 0x58
 8007026:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007028:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800702a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800702c:	e841 2300 	strex	r3, r2, [r1]
 8007030:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007032:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007034:	2b00      	cmp	r3, #0
 8007036:	d1e6      	bne.n	8007006 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007038:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	3308      	adds	r3, #8
 800703e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007042:	e853 3f00 	ldrex	r3, [r3]
 8007046:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800704a:	f023 0301 	bic.w	r3, r3, #1
 800704e:	667b      	str	r3, [r7, #100]	; 0x64
 8007050:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	3308      	adds	r3, #8
 8007056:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007058:	647a      	str	r2, [r7, #68]	; 0x44
 800705a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800705c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800705e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007060:	e841 2300 	strex	r3, r2, [r1]
 8007064:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007066:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007068:	2b00      	cmp	r3, #0
 800706a:	d1e5      	bne.n	8007038 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800706c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	3308      	adds	r3, #8
 8007072:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007076:	e853 3f00 	ldrex	r3, [r3]
 800707a:	623b      	str	r3, [r7, #32]
   return(result);
 800707c:	6a3b      	ldr	r3, [r7, #32]
 800707e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007082:	663b      	str	r3, [r7, #96]	; 0x60
 8007084:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	3308      	adds	r3, #8
 800708a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800708c:	633a      	str	r2, [r7, #48]	; 0x30
 800708e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007090:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007092:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007094:	e841 2300 	strex	r3, r2, [r1]
 8007098:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800709a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800709c:	2b00      	cmp	r3, #0
 800709e:	d1e5      	bne.n	800706c <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80070a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070a2:	2220      	movs	r2, #32
 80070a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070ac:	2b01      	cmp	r3, #1
 80070ae:	d118      	bne.n	80070e2 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	e853 3f00 	ldrex	r3, [r3]
 80070bc:	60fb      	str	r3, [r7, #12]
   return(result);
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	f023 0310 	bic.w	r3, r3, #16
 80070c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80070c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	461a      	mov	r2, r3
 80070cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80070ce:	61fb      	str	r3, [r7, #28]
 80070d0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070d2:	69b9      	ldr	r1, [r7, #24]
 80070d4:	69fa      	ldr	r2, [r7, #28]
 80070d6:	e841 2300 	strex	r3, r2, [r1]
 80070da:	617b      	str	r3, [r7, #20]
   return(result);
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d1e6      	bne.n	80070b0 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070e4:	2200      	movs	r2, #0
 80070e6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d107      	bne.n	8007100 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80070f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070f2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80070f6:	4619      	mov	r1, r3
 80070f8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80070fa:	f7ff f9c1 	bl	8006480 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80070fe:	e002      	b.n	8007106 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8007100:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007102:	f7ff f99f 	bl	8006444 <HAL_UART_RxCpltCallback>
}
 8007106:	bf00      	nop
 8007108:	3770      	adds	r7, #112	; 0x70
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}

0800710e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800710e:	b580      	push	{r7, lr}
 8007110:	b084      	sub	sp, #16
 8007112:	af00      	add	r7, sp, #0
 8007114:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800711a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2201      	movs	r2, #1
 8007120:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007126:	2b01      	cmp	r3, #1
 8007128:	d109      	bne.n	800713e <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007130:	085b      	lsrs	r3, r3, #1
 8007132:	b29b      	uxth	r3, r3
 8007134:	4619      	mov	r1, r3
 8007136:	68f8      	ldr	r0, [r7, #12]
 8007138:	f7ff f9a2 	bl	8006480 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800713c:	e002      	b.n	8007144 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800713e:	68f8      	ldr	r0, [r7, #12]
 8007140:	f7ff f98a 	bl	8006458 <HAL_UART_RxHalfCpltCallback>
}
 8007144:	bf00      	nop
 8007146:	3710      	adds	r7, #16
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}

0800714c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b086      	sub	sp, #24
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007158:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800715e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007166:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	689b      	ldr	r3, [r3, #8]
 800716e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007172:	2b80      	cmp	r3, #128	; 0x80
 8007174:	d109      	bne.n	800718a <UART_DMAError+0x3e>
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	2b21      	cmp	r3, #33	; 0x21
 800717a:	d106      	bne.n	800718a <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	2200      	movs	r2, #0
 8007180:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8007184:	6978      	ldr	r0, [r7, #20]
 8007186:	f7ff fe4b 	bl	8006e20 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	689b      	ldr	r3, [r3, #8]
 8007190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007194:	2b40      	cmp	r3, #64	; 0x40
 8007196:	d109      	bne.n	80071ac <UART_DMAError+0x60>
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	2b22      	cmp	r3, #34	; 0x22
 800719c:	d106      	bne.n	80071ac <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	2200      	movs	r2, #0
 80071a2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80071a6:	6978      	ldr	r0, [r7, #20]
 80071a8:	f7ff fe60 	bl	8006e6c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071b2:	f043 0210 	orr.w	r2, r3, #16
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80071bc:	6978      	ldr	r0, [r7, #20]
 80071be:	f7ff f955 	bl	800646c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071c2:	bf00      	nop
 80071c4:	3718      	adds	r7, #24
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}

080071ca <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80071ca:	b580      	push	{r7, lr}
 80071cc:	b084      	sub	sp, #16
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	2200      	movs	r2, #0
 80071dc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2200      	movs	r2, #0
 80071e4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80071e8:	68f8      	ldr	r0, [r7, #12]
 80071ea:	f7ff f93f 	bl	800646c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071ee:	bf00      	nop
 80071f0:	3710      	adds	r7, #16
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}

080071f6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80071f6:	b580      	push	{r7, lr}
 80071f8:	b088      	sub	sp, #32
 80071fa:	af00      	add	r7, sp, #0
 80071fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	e853 3f00 	ldrex	r3, [r3]
 800720a:	60bb      	str	r3, [r7, #8]
   return(result);
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007212:	61fb      	str	r3, [r7, #28]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	461a      	mov	r2, r3
 800721a:	69fb      	ldr	r3, [r7, #28]
 800721c:	61bb      	str	r3, [r7, #24]
 800721e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007220:	6979      	ldr	r1, [r7, #20]
 8007222:	69ba      	ldr	r2, [r7, #24]
 8007224:	e841 2300 	strex	r3, r2, [r1]
 8007228:	613b      	str	r3, [r7, #16]
   return(result);
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d1e6      	bne.n	80071fe <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2220      	movs	r2, #32
 8007234:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2200      	movs	r2, #0
 800723a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f7ff f8ed 	bl	800641c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007242:	bf00      	nop
 8007244:	3720      	adds	r7, #32
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}
	...

0800724c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800724c:	b084      	sub	sp, #16
 800724e:	b580      	push	{r7, lr}
 8007250:	b084      	sub	sp, #16
 8007252:	af00      	add	r7, sp, #0
 8007254:	6078      	str	r0, [r7, #4]
 8007256:	f107 001c 	add.w	r0, r7, #28
 800725a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800725e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007260:	2b01      	cmp	r3, #1
 8007262:	d120      	bne.n	80072a6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007268:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	68da      	ldr	r2, [r3, #12]
 8007274:	4b20      	ldr	r3, [pc, #128]	; (80072f8 <USB_CoreInit+0xac>)
 8007276:	4013      	ands	r3, r2
 8007278:	687a      	ldr	r2, [r7, #4]
 800727a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	68db      	ldr	r3, [r3, #12]
 8007280:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007288:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800728a:	2b01      	cmp	r3, #1
 800728c:	d105      	bne.n	800729a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	68db      	ldr	r3, [r3, #12]
 8007292:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f000 fa96 	bl	80077cc <USB_CoreReset>
 80072a0:	4603      	mov	r3, r0
 80072a2:	73fb      	strb	r3, [r7, #15]
 80072a4:	e010      	b.n	80072c8 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	68db      	ldr	r3, [r3, #12]
 80072aa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f000 fa8a 	bl	80077cc <USB_CoreReset>
 80072b8:	4603      	mov	r3, r0
 80072ba:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072c0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80072c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ca:	2b01      	cmp	r3, #1
 80072cc:	d10b      	bne.n	80072e6 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	689b      	ldr	r3, [r3, #8]
 80072d2:	f043 0206 	orr.w	r2, r3, #6
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	689b      	ldr	r3, [r3, #8]
 80072de:	f043 0220 	orr.w	r2, r3, #32
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80072e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3710      	adds	r7, #16
 80072ec:	46bd      	mov	sp, r7
 80072ee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80072f2:	b004      	add	sp, #16
 80072f4:	4770      	bx	lr
 80072f6:	bf00      	nop
 80072f8:	ffbdffbf 	.word	0xffbdffbf

080072fc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b083      	sub	sp, #12
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	689b      	ldr	r3, [r3, #8]
 8007308:	f023 0201 	bic.w	r2, r3, #1
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007310:	2300      	movs	r3, #0
}
 8007312:	4618      	mov	r0, r3
 8007314:	370c      	adds	r7, #12
 8007316:	46bd      	mov	sp, r7
 8007318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731c:	4770      	bx	lr

0800731e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800731e:	b580      	push	{r7, lr}
 8007320:	b084      	sub	sp, #16
 8007322:	af00      	add	r7, sp, #0
 8007324:	6078      	str	r0, [r7, #4]
 8007326:	460b      	mov	r3, r1
 8007328:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800732a:	2300      	movs	r3, #0
 800732c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	68db      	ldr	r3, [r3, #12]
 8007332:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800733a:	78fb      	ldrb	r3, [r7, #3]
 800733c:	2b01      	cmp	r3, #1
 800733e:	d115      	bne.n	800736c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	68db      	ldr	r3, [r3, #12]
 8007344:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800734c:	2001      	movs	r0, #1
 800734e:	f7fb f9c9 	bl	80026e4 <HAL_Delay>
      ms++;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	3301      	adds	r3, #1
 8007356:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f000 fa29 	bl	80077b0 <USB_GetMode>
 800735e:	4603      	mov	r3, r0
 8007360:	2b01      	cmp	r3, #1
 8007362:	d01e      	beq.n	80073a2 <USB_SetCurrentMode+0x84>
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	2b31      	cmp	r3, #49	; 0x31
 8007368:	d9f0      	bls.n	800734c <USB_SetCurrentMode+0x2e>
 800736a:	e01a      	b.n	80073a2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800736c:	78fb      	ldrb	r3, [r7, #3]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d115      	bne.n	800739e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	68db      	ldr	r3, [r3, #12]
 8007376:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800737e:	2001      	movs	r0, #1
 8007380:	f7fb f9b0 	bl	80026e4 <HAL_Delay>
      ms++;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	3301      	adds	r3, #1
 8007388:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f000 fa10 	bl	80077b0 <USB_GetMode>
 8007390:	4603      	mov	r3, r0
 8007392:	2b00      	cmp	r3, #0
 8007394:	d005      	beq.n	80073a2 <USB_SetCurrentMode+0x84>
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	2b31      	cmp	r3, #49	; 0x31
 800739a:	d9f0      	bls.n	800737e <USB_SetCurrentMode+0x60>
 800739c:	e001      	b.n	80073a2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800739e:	2301      	movs	r3, #1
 80073a0:	e005      	b.n	80073ae <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	2b32      	cmp	r3, #50	; 0x32
 80073a6:	d101      	bne.n	80073ac <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80073a8:	2301      	movs	r3, #1
 80073aa:	e000      	b.n	80073ae <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80073ac:	2300      	movs	r3, #0
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3710      	adds	r7, #16
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}
	...

080073b8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80073b8:	b084      	sub	sp, #16
 80073ba:	b580      	push	{r7, lr}
 80073bc:	b086      	sub	sp, #24
 80073be:	af00      	add	r7, sp, #0
 80073c0:	6078      	str	r0, [r7, #4]
 80073c2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80073c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80073ca:	2300      	movs	r3, #0
 80073cc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80073d2:	2300      	movs	r3, #0
 80073d4:	613b      	str	r3, [r7, #16]
 80073d6:	e009      	b.n	80073ec <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80073d8:	687a      	ldr	r2, [r7, #4]
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	3340      	adds	r3, #64	; 0x40
 80073de:	009b      	lsls	r3, r3, #2
 80073e0:	4413      	add	r3, r2
 80073e2:	2200      	movs	r2, #0
 80073e4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	3301      	adds	r3, #1
 80073ea:	613b      	str	r3, [r7, #16]
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	2b0e      	cmp	r3, #14
 80073f0:	d9f2      	bls.n	80073d8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80073f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d11c      	bne.n	8007432 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	68fa      	ldr	r2, [r7, #12]
 8007402:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007406:	f043 0302 	orr.w	r3, r3, #2
 800740a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007410:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	601a      	str	r2, [r3, #0]
 8007430:	e005      	b.n	800743e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007436:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007444:	461a      	mov	r2, r3
 8007446:	2300      	movs	r3, #0
 8007448:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007450:	4619      	mov	r1, r3
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007458:	461a      	mov	r2, r3
 800745a:	680b      	ldr	r3, [r1, #0]
 800745c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800745e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007460:	2b01      	cmp	r3, #1
 8007462:	d10c      	bne.n	800747e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007466:	2b00      	cmp	r3, #0
 8007468:	d104      	bne.n	8007474 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800746a:	2100      	movs	r1, #0
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f000 f965 	bl	800773c <USB_SetDevSpeed>
 8007472:	e008      	b.n	8007486 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007474:	2101      	movs	r1, #1
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f000 f960 	bl	800773c <USB_SetDevSpeed>
 800747c:	e003      	b.n	8007486 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800747e:	2103      	movs	r1, #3
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f000 f95b 	bl	800773c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007486:	2110      	movs	r1, #16
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f000 f8f3 	bl	8007674 <USB_FlushTxFifo>
 800748e:	4603      	mov	r3, r0
 8007490:	2b00      	cmp	r3, #0
 8007492:	d001      	beq.n	8007498 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007494:	2301      	movs	r3, #1
 8007496:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f000 f91f 	bl	80076dc <USB_FlushRxFifo>
 800749e:	4603      	mov	r3, r0
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d001      	beq.n	80074a8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80074a4:	2301      	movs	r3, #1
 80074a6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074ae:	461a      	mov	r2, r3
 80074b0:	2300      	movs	r3, #0
 80074b2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074ba:	461a      	mov	r2, r3
 80074bc:	2300      	movs	r3, #0
 80074be:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074c6:	461a      	mov	r2, r3
 80074c8:	2300      	movs	r3, #0
 80074ca:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80074cc:	2300      	movs	r3, #0
 80074ce:	613b      	str	r3, [r7, #16]
 80074d0:	e043      	b.n	800755a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	015a      	lsls	r2, r3, #5
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	4413      	add	r3, r2
 80074da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80074e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80074e8:	d118      	bne.n	800751c <USB_DevInit+0x164>
    {
      if (i == 0U)
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d10a      	bne.n	8007506 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	015a      	lsls	r2, r3, #5
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	4413      	add	r3, r2
 80074f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074fc:	461a      	mov	r2, r3
 80074fe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007502:	6013      	str	r3, [r2, #0]
 8007504:	e013      	b.n	800752e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	015a      	lsls	r2, r3, #5
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	4413      	add	r3, r2
 800750e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007512:	461a      	mov	r2, r3
 8007514:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007518:	6013      	str	r3, [r2, #0]
 800751a:	e008      	b.n	800752e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	015a      	lsls	r2, r3, #5
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	4413      	add	r3, r2
 8007524:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007528:	461a      	mov	r2, r3
 800752a:	2300      	movs	r3, #0
 800752c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	015a      	lsls	r2, r3, #5
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	4413      	add	r3, r2
 8007536:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800753a:	461a      	mov	r2, r3
 800753c:	2300      	movs	r3, #0
 800753e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	015a      	lsls	r2, r3, #5
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	4413      	add	r3, r2
 8007548:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800754c:	461a      	mov	r2, r3
 800754e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007552:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	3301      	adds	r3, #1
 8007558:	613b      	str	r3, [r7, #16]
 800755a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800755c:	693a      	ldr	r2, [r7, #16]
 800755e:	429a      	cmp	r2, r3
 8007560:	d3b7      	bcc.n	80074d2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007562:	2300      	movs	r3, #0
 8007564:	613b      	str	r3, [r7, #16]
 8007566:	e043      	b.n	80075f0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	015a      	lsls	r2, r3, #5
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	4413      	add	r3, r2
 8007570:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800757a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800757e:	d118      	bne.n	80075b2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d10a      	bne.n	800759c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	015a      	lsls	r2, r3, #5
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	4413      	add	r3, r2
 800758e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007592:	461a      	mov	r2, r3
 8007594:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007598:	6013      	str	r3, [r2, #0]
 800759a:	e013      	b.n	80075c4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800759c:	693b      	ldr	r3, [r7, #16]
 800759e:	015a      	lsls	r2, r3, #5
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	4413      	add	r3, r2
 80075a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075a8:	461a      	mov	r2, r3
 80075aa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80075ae:	6013      	str	r3, [r2, #0]
 80075b0:	e008      	b.n	80075c4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80075b2:	693b      	ldr	r3, [r7, #16]
 80075b4:	015a      	lsls	r2, r3, #5
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	4413      	add	r3, r2
 80075ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075be:	461a      	mov	r2, r3
 80075c0:	2300      	movs	r3, #0
 80075c2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	015a      	lsls	r2, r3, #5
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	4413      	add	r3, r2
 80075cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075d0:	461a      	mov	r2, r3
 80075d2:	2300      	movs	r3, #0
 80075d4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	015a      	lsls	r2, r3, #5
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	4413      	add	r3, r2
 80075de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075e2:	461a      	mov	r2, r3
 80075e4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80075e8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80075ea:	693b      	ldr	r3, [r7, #16]
 80075ec:	3301      	adds	r3, #1
 80075ee:	613b      	str	r3, [r7, #16]
 80075f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f2:	693a      	ldr	r2, [r7, #16]
 80075f4:	429a      	cmp	r2, r3
 80075f6:	d3b7      	bcc.n	8007568 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075fe:	691b      	ldr	r3, [r3, #16]
 8007600:	68fa      	ldr	r2, [r7, #12]
 8007602:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007606:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800760a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2200      	movs	r2, #0
 8007610:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007618:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800761a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800761c:	2b00      	cmp	r3, #0
 800761e:	d105      	bne.n	800762c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	699b      	ldr	r3, [r3, #24]
 8007624:	f043 0210 	orr.w	r2, r3, #16
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	699a      	ldr	r2, [r3, #24]
 8007630:	4b0e      	ldr	r3, [pc, #56]	; (800766c <USB_DevInit+0x2b4>)
 8007632:	4313      	orrs	r3, r2
 8007634:	687a      	ldr	r2, [r7, #4]
 8007636:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007638:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800763a:	2b00      	cmp	r3, #0
 800763c:	d005      	beq.n	800764a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	699b      	ldr	r3, [r3, #24]
 8007642:	f043 0208 	orr.w	r2, r3, #8
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800764a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800764c:	2b01      	cmp	r3, #1
 800764e:	d105      	bne.n	800765c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	699a      	ldr	r2, [r3, #24]
 8007654:	4b06      	ldr	r3, [pc, #24]	; (8007670 <USB_DevInit+0x2b8>)
 8007656:	4313      	orrs	r3, r2
 8007658:	687a      	ldr	r2, [r7, #4]
 800765a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800765c:	7dfb      	ldrb	r3, [r7, #23]
}
 800765e:	4618      	mov	r0, r3
 8007660:	3718      	adds	r7, #24
 8007662:	46bd      	mov	sp, r7
 8007664:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007668:	b004      	add	sp, #16
 800766a:	4770      	bx	lr
 800766c:	803c3800 	.word	0x803c3800
 8007670:	40000004 	.word	0x40000004

08007674 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007674:	b480      	push	{r7}
 8007676:	b085      	sub	sp, #20
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
 800767c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800767e:	2300      	movs	r3, #0
 8007680:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	3301      	adds	r3, #1
 8007686:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	4a13      	ldr	r2, [pc, #76]	; (80076d8 <USB_FlushTxFifo+0x64>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d901      	bls.n	8007694 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007690:	2303      	movs	r3, #3
 8007692:	e01b      	b.n	80076cc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	691b      	ldr	r3, [r3, #16]
 8007698:	2b00      	cmp	r3, #0
 800769a:	daf2      	bge.n	8007682 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800769c:	2300      	movs	r3, #0
 800769e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	019b      	lsls	r3, r3, #6
 80076a4:	f043 0220 	orr.w	r2, r3, #32
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	3301      	adds	r3, #1
 80076b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	4a08      	ldr	r2, [pc, #32]	; (80076d8 <USB_FlushTxFifo+0x64>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d901      	bls.n	80076be <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80076ba:	2303      	movs	r3, #3
 80076bc:	e006      	b.n	80076cc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	691b      	ldr	r3, [r3, #16]
 80076c2:	f003 0320 	and.w	r3, r3, #32
 80076c6:	2b20      	cmp	r3, #32
 80076c8:	d0f0      	beq.n	80076ac <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80076ca:	2300      	movs	r3, #0
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	3714      	adds	r7, #20
 80076d0:	46bd      	mov	sp, r7
 80076d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d6:	4770      	bx	lr
 80076d8:	00030d40 	.word	0x00030d40

080076dc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80076dc:	b480      	push	{r7}
 80076de:	b085      	sub	sp, #20
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80076e4:	2300      	movs	r3, #0
 80076e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	3301      	adds	r3, #1
 80076ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	4a11      	ldr	r2, [pc, #68]	; (8007738 <USB_FlushRxFifo+0x5c>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d901      	bls.n	80076fa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80076f6:	2303      	movs	r3, #3
 80076f8:	e018      	b.n	800772c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	691b      	ldr	r3, [r3, #16]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	daf2      	bge.n	80076e8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007702:	2300      	movs	r3, #0
 8007704:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2210      	movs	r2, #16
 800770a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	3301      	adds	r3, #1
 8007710:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	4a08      	ldr	r2, [pc, #32]	; (8007738 <USB_FlushRxFifo+0x5c>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d901      	bls.n	800771e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800771a:	2303      	movs	r3, #3
 800771c:	e006      	b.n	800772c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	691b      	ldr	r3, [r3, #16]
 8007722:	f003 0310 	and.w	r3, r3, #16
 8007726:	2b10      	cmp	r3, #16
 8007728:	d0f0      	beq.n	800770c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800772a:	2300      	movs	r3, #0
}
 800772c:	4618      	mov	r0, r3
 800772e:	3714      	adds	r7, #20
 8007730:	46bd      	mov	sp, r7
 8007732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007736:	4770      	bx	lr
 8007738:	00030d40 	.word	0x00030d40

0800773c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800773c:	b480      	push	{r7}
 800773e:	b085      	sub	sp, #20
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
 8007744:	460b      	mov	r3, r1
 8007746:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007752:	681a      	ldr	r2, [r3, #0]
 8007754:	78fb      	ldrb	r3, [r7, #3]
 8007756:	68f9      	ldr	r1, [r7, #12]
 8007758:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800775c:	4313      	orrs	r3, r2
 800775e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007760:	2300      	movs	r3, #0
}
 8007762:	4618      	mov	r0, r3
 8007764:	3714      	adds	r7, #20
 8007766:	46bd      	mov	sp, r7
 8007768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776c:	4770      	bx	lr

0800776e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800776e:	b480      	push	{r7}
 8007770:	b085      	sub	sp, #20
 8007772:	af00      	add	r7, sp, #0
 8007774:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	68fa      	ldr	r2, [r7, #12]
 8007784:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007788:	f023 0303 	bic.w	r3, r3, #3
 800778c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	68fa      	ldr	r2, [r7, #12]
 8007798:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800779c:	f043 0302 	orr.w	r3, r3, #2
 80077a0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80077a2:	2300      	movs	r3, #0
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3714      	adds	r7, #20
 80077a8:	46bd      	mov	sp, r7
 80077aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ae:	4770      	bx	lr

080077b0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80077b0:	b480      	push	{r7}
 80077b2:	b083      	sub	sp, #12
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	695b      	ldr	r3, [r3, #20]
 80077bc:	f003 0301 	and.w	r3, r3, #1
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	370c      	adds	r7, #12
 80077c4:	46bd      	mov	sp, r7
 80077c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ca:	4770      	bx	lr

080077cc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b085      	sub	sp, #20
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80077d4:	2300      	movs	r3, #0
 80077d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	3301      	adds	r3, #1
 80077dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	4a13      	ldr	r2, [pc, #76]	; (8007830 <USB_CoreReset+0x64>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d901      	bls.n	80077ea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80077e6:	2303      	movs	r3, #3
 80077e8:	e01b      	b.n	8007822 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	691b      	ldr	r3, [r3, #16]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	daf2      	bge.n	80077d8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80077f2:	2300      	movs	r3, #0
 80077f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	691b      	ldr	r3, [r3, #16]
 80077fa:	f043 0201 	orr.w	r2, r3, #1
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	3301      	adds	r3, #1
 8007806:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	4a09      	ldr	r2, [pc, #36]	; (8007830 <USB_CoreReset+0x64>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d901      	bls.n	8007814 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007810:	2303      	movs	r3, #3
 8007812:	e006      	b.n	8007822 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	691b      	ldr	r3, [r3, #16]
 8007818:	f003 0301 	and.w	r3, r3, #1
 800781c:	2b01      	cmp	r3, #1
 800781e:	d0f0      	beq.n	8007802 <USB_CoreReset+0x36>

  return HAL_OK;
 8007820:	2300      	movs	r3, #0
}
 8007822:	4618      	mov	r0, r3
 8007824:	3714      	adds	r7, #20
 8007826:	46bd      	mov	sp, r7
 8007828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782c:	4770      	bx	lr
 800782e:	bf00      	nop
 8007830:	00030d40 	.word	0x00030d40

08007834 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007834:	b480      	push	{r7}
 8007836:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8007838:	bf00      	nop
 800783a:	46bd      	mov	sp, r7
 800783c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007840:	4770      	bx	lr
	...

08007844 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007844:	b480      	push	{r7}
 8007846:	b085      	sub	sp, #20
 8007848:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800784a:	f3ef 8305 	mrs	r3, IPSR
 800784e:	60bb      	str	r3, [r7, #8]
  return(result);
 8007850:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007852:	2b00      	cmp	r3, #0
 8007854:	d10f      	bne.n	8007876 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007856:	f3ef 8310 	mrs	r3, PRIMASK
 800785a:	607b      	str	r3, [r7, #4]
  return(result);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d105      	bne.n	800786e <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007862:	f3ef 8311 	mrs	r3, BASEPRI
 8007866:	603b      	str	r3, [r7, #0]
  return(result);
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d007      	beq.n	800787e <osKernelInitialize+0x3a>
 800786e:	4b0e      	ldr	r3, [pc, #56]	; (80078a8 <osKernelInitialize+0x64>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	2b02      	cmp	r3, #2
 8007874:	d103      	bne.n	800787e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8007876:	f06f 0305 	mvn.w	r3, #5
 800787a:	60fb      	str	r3, [r7, #12]
 800787c:	e00c      	b.n	8007898 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800787e:	4b0a      	ldr	r3, [pc, #40]	; (80078a8 <osKernelInitialize+0x64>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d105      	bne.n	8007892 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007886:	4b08      	ldr	r3, [pc, #32]	; (80078a8 <osKernelInitialize+0x64>)
 8007888:	2201      	movs	r2, #1
 800788a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800788c:	2300      	movs	r3, #0
 800788e:	60fb      	str	r3, [r7, #12]
 8007890:	e002      	b.n	8007898 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8007892:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007896:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007898:	68fb      	ldr	r3, [r7, #12]
}
 800789a:	4618      	mov	r0, r3
 800789c:	3714      	adds	r7, #20
 800789e:	46bd      	mov	sp, r7
 80078a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a4:	4770      	bx	lr
 80078a6:	bf00      	nop
 80078a8:	20006f54 	.word	0x20006f54

080078ac <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b084      	sub	sp, #16
 80078b0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80078b2:	f3ef 8305 	mrs	r3, IPSR
 80078b6:	60bb      	str	r3, [r7, #8]
  return(result);
 80078b8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d10f      	bne.n	80078de <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078be:	f3ef 8310 	mrs	r3, PRIMASK
 80078c2:	607b      	str	r3, [r7, #4]
  return(result);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d105      	bne.n	80078d6 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80078ca:	f3ef 8311 	mrs	r3, BASEPRI
 80078ce:	603b      	str	r3, [r7, #0]
  return(result);
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d007      	beq.n	80078e6 <osKernelStart+0x3a>
 80078d6:	4b0f      	ldr	r3, [pc, #60]	; (8007914 <osKernelStart+0x68>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	2b02      	cmp	r3, #2
 80078dc:	d103      	bne.n	80078e6 <osKernelStart+0x3a>
    stat = osErrorISR;
 80078de:	f06f 0305 	mvn.w	r3, #5
 80078e2:	60fb      	str	r3, [r7, #12]
 80078e4:	e010      	b.n	8007908 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80078e6:	4b0b      	ldr	r3, [pc, #44]	; (8007914 <osKernelStart+0x68>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	2b01      	cmp	r3, #1
 80078ec:	d109      	bne.n	8007902 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80078ee:	f7ff ffa1 	bl	8007834 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80078f2:	4b08      	ldr	r3, [pc, #32]	; (8007914 <osKernelStart+0x68>)
 80078f4:	2202      	movs	r2, #2
 80078f6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80078f8:	f001 f8ca 	bl	8008a90 <vTaskStartScheduler>
      stat = osOK;
 80078fc:	2300      	movs	r3, #0
 80078fe:	60fb      	str	r3, [r7, #12]
 8007900:	e002      	b.n	8007908 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8007902:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007906:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007908:	68fb      	ldr	r3, [r7, #12]
}
 800790a:	4618      	mov	r0, r3
 800790c:	3710      	adds	r7, #16
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}
 8007912:	bf00      	nop
 8007914:	20006f54 	.word	0x20006f54

08007918 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007918:	b580      	push	{r7, lr}
 800791a:	b090      	sub	sp, #64	; 0x40
 800791c:	af04      	add	r7, sp, #16
 800791e:	60f8      	str	r0, [r7, #12]
 8007920:	60b9      	str	r1, [r7, #8]
 8007922:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007924:	2300      	movs	r3, #0
 8007926:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007928:	f3ef 8305 	mrs	r3, IPSR
 800792c:	61fb      	str	r3, [r7, #28]
  return(result);
 800792e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8007930:	2b00      	cmp	r3, #0
 8007932:	f040 808f 	bne.w	8007a54 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007936:	f3ef 8310 	mrs	r3, PRIMASK
 800793a:	61bb      	str	r3, [r7, #24]
  return(result);
 800793c:	69bb      	ldr	r3, [r7, #24]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d105      	bne.n	800794e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007942:	f3ef 8311 	mrs	r3, BASEPRI
 8007946:	617b      	str	r3, [r7, #20]
  return(result);
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d003      	beq.n	8007956 <osThreadNew+0x3e>
 800794e:	4b44      	ldr	r3, [pc, #272]	; (8007a60 <osThreadNew+0x148>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	2b02      	cmp	r3, #2
 8007954:	d07e      	beq.n	8007a54 <osThreadNew+0x13c>
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d07b      	beq.n	8007a54 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800795c:	2380      	movs	r3, #128	; 0x80
 800795e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8007960:	2318      	movs	r3, #24
 8007962:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8007964:	2300      	movs	r3, #0
 8007966:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8007968:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800796c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d045      	beq.n	8007a00 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d002      	beq.n	8007982 <osThreadNew+0x6a>
        name = attr->name;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	699b      	ldr	r3, [r3, #24]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d002      	beq.n	8007990 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	699b      	ldr	r3, [r3, #24]
 800798e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007992:	2b00      	cmp	r3, #0
 8007994:	d008      	beq.n	80079a8 <osThreadNew+0x90>
 8007996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007998:	2b38      	cmp	r3, #56	; 0x38
 800799a:	d805      	bhi.n	80079a8 <osThreadNew+0x90>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	f003 0301 	and.w	r3, r3, #1
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d001      	beq.n	80079ac <osThreadNew+0x94>
        return (NULL);
 80079a8:	2300      	movs	r3, #0
 80079aa:	e054      	b.n	8007a56 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	695b      	ldr	r3, [r3, #20]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d003      	beq.n	80079bc <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	695b      	ldr	r3, [r3, #20]
 80079b8:	089b      	lsrs	r3, r3, #2
 80079ba:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	689b      	ldr	r3, [r3, #8]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d00e      	beq.n	80079e2 <osThreadNew+0xca>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	68db      	ldr	r3, [r3, #12]
 80079c8:	2ba7      	cmp	r3, #167	; 0xa7
 80079ca:	d90a      	bls.n	80079e2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d006      	beq.n	80079e2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	695b      	ldr	r3, [r3, #20]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d002      	beq.n	80079e2 <osThreadNew+0xca>
        mem = 1;
 80079dc:	2301      	movs	r3, #1
 80079de:	623b      	str	r3, [r7, #32]
 80079e0:	e010      	b.n	8007a04 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	689b      	ldr	r3, [r3, #8]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d10c      	bne.n	8007a04 <osThreadNew+0xec>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	68db      	ldr	r3, [r3, #12]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d108      	bne.n	8007a04 <osThreadNew+0xec>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	691b      	ldr	r3, [r3, #16]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d104      	bne.n	8007a04 <osThreadNew+0xec>
          mem = 0;
 80079fa:	2300      	movs	r3, #0
 80079fc:	623b      	str	r3, [r7, #32]
 80079fe:	e001      	b.n	8007a04 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8007a00:	2300      	movs	r3, #0
 8007a02:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8007a04:	6a3b      	ldr	r3, [r7, #32]
 8007a06:	2b01      	cmp	r3, #1
 8007a08:	d110      	bne.n	8007a2c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8007a0e:	687a      	ldr	r2, [r7, #4]
 8007a10:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007a12:	9202      	str	r2, [sp, #8]
 8007a14:	9301      	str	r3, [sp, #4]
 8007a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a18:	9300      	str	r3, [sp, #0]
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a20:	68f8      	ldr	r0, [r7, #12]
 8007a22:	f000 fe3f 	bl	80086a4 <xTaskCreateStatic>
 8007a26:	4603      	mov	r3, r0
 8007a28:	613b      	str	r3, [r7, #16]
 8007a2a:	e013      	b.n	8007a54 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8007a2c:	6a3b      	ldr	r3, [r7, #32]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d110      	bne.n	8007a54 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a34:	b29a      	uxth	r2, r3
 8007a36:	f107 0310 	add.w	r3, r7, #16
 8007a3a:	9301      	str	r3, [sp, #4]
 8007a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a3e:	9300      	str	r3, [sp, #0]
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a44:	68f8      	ldr	r0, [r7, #12]
 8007a46:	f000 fe90 	bl	800876a <xTaskCreate>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	2b01      	cmp	r3, #1
 8007a4e:	d001      	beq.n	8007a54 <osThreadNew+0x13c>
          hTask = NULL;
 8007a50:	2300      	movs	r3, #0
 8007a52:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007a54:	693b      	ldr	r3, [r7, #16]
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3730      	adds	r7, #48	; 0x30
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}
 8007a5e:	bf00      	nop
 8007a60:	20006f54 	.word	0x20006f54

08007a64 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b086      	sub	sp, #24
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a6c:	f3ef 8305 	mrs	r3, IPSR
 8007a70:	613b      	str	r3, [r7, #16]
  return(result);
 8007a72:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d10f      	bne.n	8007a98 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a78:	f3ef 8310 	mrs	r3, PRIMASK
 8007a7c:	60fb      	str	r3, [r7, #12]
  return(result);
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d105      	bne.n	8007a90 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007a84:	f3ef 8311 	mrs	r3, BASEPRI
 8007a88:	60bb      	str	r3, [r7, #8]
  return(result);
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d007      	beq.n	8007aa0 <osDelay+0x3c>
 8007a90:	4b0a      	ldr	r3, [pc, #40]	; (8007abc <osDelay+0x58>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	2b02      	cmp	r3, #2
 8007a96:	d103      	bne.n	8007aa0 <osDelay+0x3c>
    stat = osErrorISR;
 8007a98:	f06f 0305 	mvn.w	r3, #5
 8007a9c:	617b      	str	r3, [r7, #20]
 8007a9e:	e007      	b.n	8007ab0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d002      	beq.n	8007ab0 <osDelay+0x4c>
      vTaskDelay(ticks);
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f000 ffba 	bl	8008a24 <vTaskDelay>
    }
  }

  return (stat);
 8007ab0:	697b      	ldr	r3, [r7, #20]
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3718      	adds	r7, #24
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}
 8007aba:	bf00      	nop
 8007abc:	20006f54 	.word	0x20006f54

08007ac0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007ac0:	b480      	push	{r7}
 8007ac2:	b085      	sub	sp, #20
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	60f8      	str	r0, [r7, #12]
 8007ac8:	60b9      	str	r1, [r7, #8]
 8007aca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	4a07      	ldr	r2, [pc, #28]	; (8007aec <vApplicationGetIdleTaskMemory+0x2c>)
 8007ad0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	4a06      	ldr	r2, [pc, #24]	; (8007af0 <vApplicationGetIdleTaskMemory+0x30>)
 8007ad6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2280      	movs	r2, #128	; 0x80
 8007adc:	601a      	str	r2, [r3, #0]
}
 8007ade:	bf00      	nop
 8007ae0:	3714      	adds	r7, #20
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae8:	4770      	bx	lr
 8007aea:	bf00      	nop
 8007aec:	20006f58 	.word	0x20006f58
 8007af0:	20007000 	.word	0x20007000

08007af4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007af4:	b480      	push	{r7}
 8007af6:	b085      	sub	sp, #20
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	60f8      	str	r0, [r7, #12]
 8007afc:	60b9      	str	r1, [r7, #8]
 8007afe:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	4a07      	ldr	r2, [pc, #28]	; (8007b20 <vApplicationGetTimerTaskMemory+0x2c>)
 8007b04:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	4a06      	ldr	r2, [pc, #24]	; (8007b24 <vApplicationGetTimerTaskMemory+0x30>)
 8007b0a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007b12:	601a      	str	r2, [r3, #0]
}
 8007b14:	bf00      	nop
 8007b16:	3714      	adds	r7, #20
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1e:	4770      	bx	lr
 8007b20:	20007200 	.word	0x20007200
 8007b24:	200072a8 	.word	0x200072a8

08007b28 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b083      	sub	sp, #12
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f103 0208 	add.w	r2, r3, #8
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007b40:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f103 0208 	add.w	r2, r3, #8
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f103 0208 	add.w	r2, r3, #8
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007b5c:	bf00      	nop
 8007b5e:	370c      	adds	r7, #12
 8007b60:	46bd      	mov	sp, r7
 8007b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b66:	4770      	bx	lr

08007b68 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b083      	sub	sp, #12
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2200      	movs	r2, #0
 8007b74:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007b76:	bf00      	nop
 8007b78:	370c      	adds	r7, #12
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b80:	4770      	bx	lr

08007b82 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007b82:	b480      	push	{r7}
 8007b84:	b085      	sub	sp, #20
 8007b86:	af00      	add	r7, sp, #0
 8007b88:	6078      	str	r0, [r7, #4]
 8007b8a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	68fa      	ldr	r2, [r7, #12]
 8007b96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	689a      	ldr	r2, [r3, #8]
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	689b      	ldr	r3, [r3, #8]
 8007ba4:	683a      	ldr	r2, [r7, #0]
 8007ba6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	683a      	ldr	r2, [r7, #0]
 8007bac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	687a      	ldr	r2, [r7, #4]
 8007bb2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	1c5a      	adds	r2, r3, #1
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	601a      	str	r2, [r3, #0]
}
 8007bbe:	bf00      	nop
 8007bc0:	3714      	adds	r7, #20
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc8:	4770      	bx	lr

08007bca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007bca:	b480      	push	{r7}
 8007bcc:	b085      	sub	sp, #20
 8007bce:	af00      	add	r7, sp, #0
 8007bd0:	6078      	str	r0, [r7, #4]
 8007bd2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007be0:	d103      	bne.n	8007bea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	691b      	ldr	r3, [r3, #16]
 8007be6:	60fb      	str	r3, [r7, #12]
 8007be8:	e00c      	b.n	8007c04 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	3308      	adds	r3, #8
 8007bee:	60fb      	str	r3, [r7, #12]
 8007bf0:	e002      	b.n	8007bf8 <vListInsert+0x2e>
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	685b      	ldr	r3, [r3, #4]
 8007bf6:	60fb      	str	r3, [r7, #12]
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	685b      	ldr	r3, [r3, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	68ba      	ldr	r2, [r7, #8]
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d2f6      	bcs.n	8007bf2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	685a      	ldr	r2, [r3, #4]
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	685b      	ldr	r3, [r3, #4]
 8007c10:	683a      	ldr	r2, [r7, #0]
 8007c12:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	68fa      	ldr	r2, [r7, #12]
 8007c18:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	683a      	ldr	r2, [r7, #0]
 8007c1e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	687a      	ldr	r2, [r7, #4]
 8007c24:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	1c5a      	adds	r2, r3, #1
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	601a      	str	r2, [r3, #0]
}
 8007c30:	bf00      	nop
 8007c32:	3714      	adds	r7, #20
 8007c34:	46bd      	mov	sp, r7
 8007c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3a:	4770      	bx	lr

08007c3c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b085      	sub	sp, #20
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	691b      	ldr	r3, [r3, #16]
 8007c48:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	687a      	ldr	r2, [r7, #4]
 8007c50:	6892      	ldr	r2, [r2, #8]
 8007c52:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	689b      	ldr	r3, [r3, #8]
 8007c58:	687a      	ldr	r2, [r7, #4]
 8007c5a:	6852      	ldr	r2, [r2, #4]
 8007c5c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	687a      	ldr	r2, [r7, #4]
 8007c64:	429a      	cmp	r2, r3
 8007c66:	d103      	bne.n	8007c70 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	689a      	ldr	r2, [r3, #8]
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2200      	movs	r2, #0
 8007c74:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	1e5a      	subs	r2, r3, #1
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	3714      	adds	r7, #20
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8e:	4770      	bx	lr

08007c90 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b084      	sub	sp, #16
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
 8007c98:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d10c      	bne.n	8007cbe <xQueueGenericReset+0x2e>
	__asm volatile
 8007ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ca8:	b672      	cpsid	i
 8007caa:	f383 8811 	msr	BASEPRI, r3
 8007cae:	f3bf 8f6f 	isb	sy
 8007cb2:	f3bf 8f4f 	dsb	sy
 8007cb6:	b662      	cpsie	i
 8007cb8:	60bb      	str	r3, [r7, #8]
}
 8007cba:	bf00      	nop
 8007cbc:	e7fe      	b.n	8007cbc <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8007cbe:	f002 f8cd 	bl	8009e5c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681a      	ldr	r2, [r3, #0]
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cca:	68f9      	ldr	r1, [r7, #12]
 8007ccc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007cce:	fb01 f303 	mul.w	r3, r1, r3
 8007cd2:	441a      	add	r2, r3
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681a      	ldr	r2, [r3, #0]
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681a      	ldr	r2, [r3, #0]
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cee:	3b01      	subs	r3, #1
 8007cf0:	68f9      	ldr	r1, [r7, #12]
 8007cf2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007cf4:	fb01 f303 	mul.w	r3, r1, r3
 8007cf8:	441a      	add	r2, r3
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	22ff      	movs	r2, #255	; 0xff
 8007d02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	22ff      	movs	r2, #255	; 0xff
 8007d0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d114      	bne.n	8007d3e <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	691b      	ldr	r3, [r3, #16]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d01a      	beq.n	8007d52 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	3310      	adds	r3, #16
 8007d20:	4618      	mov	r0, r3
 8007d22:	f001 f95d 	bl	8008fe0 <xTaskRemoveFromEventList>
 8007d26:	4603      	mov	r3, r0
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d012      	beq.n	8007d52 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007d2c:	4b0c      	ldr	r3, [pc, #48]	; (8007d60 <xQueueGenericReset+0xd0>)
 8007d2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d32:	601a      	str	r2, [r3, #0]
 8007d34:	f3bf 8f4f 	dsb	sy
 8007d38:	f3bf 8f6f 	isb	sy
 8007d3c:	e009      	b.n	8007d52 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	3310      	adds	r3, #16
 8007d42:	4618      	mov	r0, r3
 8007d44:	f7ff fef0 	bl	8007b28 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	3324      	adds	r3, #36	; 0x24
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f7ff feeb 	bl	8007b28 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007d52:	f002 f8b7 	bl	8009ec4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007d56:	2301      	movs	r3, #1
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	3710      	adds	r7, #16
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bd80      	pop	{r7, pc}
 8007d60:	e000ed04 	.word	0xe000ed04

08007d64 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b08e      	sub	sp, #56	; 0x38
 8007d68:	af02      	add	r7, sp, #8
 8007d6a:	60f8      	str	r0, [r7, #12]
 8007d6c:	60b9      	str	r1, [r7, #8]
 8007d6e:	607a      	str	r2, [r7, #4]
 8007d70:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d10c      	bne.n	8007d92 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8007d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d7c:	b672      	cpsid	i
 8007d7e:	f383 8811 	msr	BASEPRI, r3
 8007d82:	f3bf 8f6f 	isb	sy
 8007d86:	f3bf 8f4f 	dsb	sy
 8007d8a:	b662      	cpsie	i
 8007d8c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007d8e:	bf00      	nop
 8007d90:	e7fe      	b.n	8007d90 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d10c      	bne.n	8007db2 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8007d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d9c:	b672      	cpsid	i
 8007d9e:	f383 8811 	msr	BASEPRI, r3
 8007da2:	f3bf 8f6f 	isb	sy
 8007da6:	f3bf 8f4f 	dsb	sy
 8007daa:	b662      	cpsie	i
 8007dac:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007dae:	bf00      	nop
 8007db0:	e7fe      	b.n	8007db0 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d002      	beq.n	8007dbe <xQueueGenericCreateStatic+0x5a>
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d001      	beq.n	8007dc2 <xQueueGenericCreateStatic+0x5e>
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	e000      	b.n	8007dc4 <xQueueGenericCreateStatic+0x60>
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d10c      	bne.n	8007de2 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8007dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dcc:	b672      	cpsid	i
 8007dce:	f383 8811 	msr	BASEPRI, r3
 8007dd2:	f3bf 8f6f 	isb	sy
 8007dd6:	f3bf 8f4f 	dsb	sy
 8007dda:	b662      	cpsie	i
 8007ddc:	623b      	str	r3, [r7, #32]
}
 8007dde:	bf00      	nop
 8007de0:	e7fe      	b.n	8007de0 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d102      	bne.n	8007dee <xQueueGenericCreateStatic+0x8a>
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d101      	bne.n	8007df2 <xQueueGenericCreateStatic+0x8e>
 8007dee:	2301      	movs	r3, #1
 8007df0:	e000      	b.n	8007df4 <xQueueGenericCreateStatic+0x90>
 8007df2:	2300      	movs	r3, #0
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d10c      	bne.n	8007e12 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8007df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dfc:	b672      	cpsid	i
 8007dfe:	f383 8811 	msr	BASEPRI, r3
 8007e02:	f3bf 8f6f 	isb	sy
 8007e06:	f3bf 8f4f 	dsb	sy
 8007e0a:	b662      	cpsie	i
 8007e0c:	61fb      	str	r3, [r7, #28]
}
 8007e0e:	bf00      	nop
 8007e10:	e7fe      	b.n	8007e10 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007e12:	2350      	movs	r3, #80	; 0x50
 8007e14:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007e16:	697b      	ldr	r3, [r7, #20]
 8007e18:	2b50      	cmp	r3, #80	; 0x50
 8007e1a:	d00c      	beq.n	8007e36 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8007e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e20:	b672      	cpsid	i
 8007e22:	f383 8811 	msr	BASEPRI, r3
 8007e26:	f3bf 8f6f 	isb	sy
 8007e2a:	f3bf 8f4f 	dsb	sy
 8007e2e:	b662      	cpsie	i
 8007e30:	61bb      	str	r3, [r7, #24]
}
 8007e32:	bf00      	nop
 8007e34:	e7fe      	b.n	8007e34 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007e36:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d00d      	beq.n	8007e5e <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e44:	2201      	movs	r2, #1
 8007e46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007e4a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e50:	9300      	str	r3, [sp, #0]
 8007e52:	4613      	mov	r3, r2
 8007e54:	687a      	ldr	r2, [r7, #4]
 8007e56:	68b9      	ldr	r1, [r7, #8]
 8007e58:	68f8      	ldr	r0, [r7, #12]
 8007e5a:	f000 f805 	bl	8007e68 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007e60:	4618      	mov	r0, r3
 8007e62:	3730      	adds	r7, #48	; 0x30
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}

08007e68 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b084      	sub	sp, #16
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	60f8      	str	r0, [r7, #12]
 8007e70:	60b9      	str	r1, [r7, #8]
 8007e72:	607a      	str	r2, [r7, #4]
 8007e74:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d103      	bne.n	8007e84 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007e7c:	69bb      	ldr	r3, [r7, #24]
 8007e7e:	69ba      	ldr	r2, [r7, #24]
 8007e80:	601a      	str	r2, [r3, #0]
 8007e82:	e002      	b.n	8007e8a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007e84:	69bb      	ldr	r3, [r7, #24]
 8007e86:	687a      	ldr	r2, [r7, #4]
 8007e88:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007e8a:	69bb      	ldr	r3, [r7, #24]
 8007e8c:	68fa      	ldr	r2, [r7, #12]
 8007e8e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007e90:	69bb      	ldr	r3, [r7, #24]
 8007e92:	68ba      	ldr	r2, [r7, #8]
 8007e94:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007e96:	2101      	movs	r1, #1
 8007e98:	69b8      	ldr	r0, [r7, #24]
 8007e9a:	f7ff fef9 	bl	8007c90 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007e9e:	69bb      	ldr	r3, [r7, #24]
 8007ea0:	78fa      	ldrb	r2, [r7, #3]
 8007ea2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007ea6:	bf00      	nop
 8007ea8:	3710      	adds	r7, #16
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}
	...

08007eb0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b08e      	sub	sp, #56	; 0x38
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	60f8      	str	r0, [r7, #12]
 8007eb8:	60b9      	str	r1, [r7, #8]
 8007eba:	607a      	str	r2, [r7, #4]
 8007ebc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d10c      	bne.n	8007ee6 <xQueueGenericSend+0x36>
	__asm volatile
 8007ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ed0:	b672      	cpsid	i
 8007ed2:	f383 8811 	msr	BASEPRI, r3
 8007ed6:	f3bf 8f6f 	isb	sy
 8007eda:	f3bf 8f4f 	dsb	sy
 8007ede:	b662      	cpsie	i
 8007ee0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007ee2:	bf00      	nop
 8007ee4:	e7fe      	b.n	8007ee4 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d103      	bne.n	8007ef4 <xQueueGenericSend+0x44>
 8007eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d101      	bne.n	8007ef8 <xQueueGenericSend+0x48>
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	e000      	b.n	8007efa <xQueueGenericSend+0x4a>
 8007ef8:	2300      	movs	r3, #0
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d10c      	bne.n	8007f18 <xQueueGenericSend+0x68>
	__asm volatile
 8007efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f02:	b672      	cpsid	i
 8007f04:	f383 8811 	msr	BASEPRI, r3
 8007f08:	f3bf 8f6f 	isb	sy
 8007f0c:	f3bf 8f4f 	dsb	sy
 8007f10:	b662      	cpsie	i
 8007f12:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007f14:	bf00      	nop
 8007f16:	e7fe      	b.n	8007f16 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	2b02      	cmp	r3, #2
 8007f1c:	d103      	bne.n	8007f26 <xQueueGenericSend+0x76>
 8007f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f22:	2b01      	cmp	r3, #1
 8007f24:	d101      	bne.n	8007f2a <xQueueGenericSend+0x7a>
 8007f26:	2301      	movs	r3, #1
 8007f28:	e000      	b.n	8007f2c <xQueueGenericSend+0x7c>
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d10c      	bne.n	8007f4a <xQueueGenericSend+0x9a>
	__asm volatile
 8007f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f34:	b672      	cpsid	i
 8007f36:	f383 8811 	msr	BASEPRI, r3
 8007f3a:	f3bf 8f6f 	isb	sy
 8007f3e:	f3bf 8f4f 	dsb	sy
 8007f42:	b662      	cpsie	i
 8007f44:	623b      	str	r3, [r7, #32]
}
 8007f46:	bf00      	nop
 8007f48:	e7fe      	b.n	8007f48 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007f4a:	f001 fa3b 	bl	80093c4 <xTaskGetSchedulerState>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d102      	bne.n	8007f5a <xQueueGenericSend+0xaa>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d101      	bne.n	8007f5e <xQueueGenericSend+0xae>
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	e000      	b.n	8007f60 <xQueueGenericSend+0xb0>
 8007f5e:	2300      	movs	r3, #0
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d10c      	bne.n	8007f7e <xQueueGenericSend+0xce>
	__asm volatile
 8007f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f68:	b672      	cpsid	i
 8007f6a:	f383 8811 	msr	BASEPRI, r3
 8007f6e:	f3bf 8f6f 	isb	sy
 8007f72:	f3bf 8f4f 	dsb	sy
 8007f76:	b662      	cpsie	i
 8007f78:	61fb      	str	r3, [r7, #28]
}
 8007f7a:	bf00      	nop
 8007f7c:	e7fe      	b.n	8007f7c <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007f7e:	f001 ff6d 	bl	8009e5c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f8a:	429a      	cmp	r2, r3
 8007f8c:	d302      	bcc.n	8007f94 <xQueueGenericSend+0xe4>
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	2b02      	cmp	r3, #2
 8007f92:	d129      	bne.n	8007fe8 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007f94:	683a      	ldr	r2, [r7, #0]
 8007f96:	68b9      	ldr	r1, [r7, #8]
 8007f98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f9a:	f000 fa15 	bl	80083c8 <prvCopyDataToQueue>
 8007f9e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d010      	beq.n	8007fca <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007faa:	3324      	adds	r3, #36	; 0x24
 8007fac:	4618      	mov	r0, r3
 8007fae:	f001 f817 	bl	8008fe0 <xTaskRemoveFromEventList>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d013      	beq.n	8007fe0 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007fb8:	4b3f      	ldr	r3, [pc, #252]	; (80080b8 <xQueueGenericSend+0x208>)
 8007fba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fbe:	601a      	str	r2, [r3, #0]
 8007fc0:	f3bf 8f4f 	dsb	sy
 8007fc4:	f3bf 8f6f 	isb	sy
 8007fc8:	e00a      	b.n	8007fe0 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d007      	beq.n	8007fe0 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007fd0:	4b39      	ldr	r3, [pc, #228]	; (80080b8 <xQueueGenericSend+0x208>)
 8007fd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fd6:	601a      	str	r2, [r3, #0]
 8007fd8:	f3bf 8f4f 	dsb	sy
 8007fdc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007fe0:	f001 ff70 	bl	8009ec4 <vPortExitCritical>
				return pdPASS;
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	e063      	b.n	80080b0 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d103      	bne.n	8007ff6 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007fee:	f001 ff69 	bl	8009ec4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	e05c      	b.n	80080b0 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007ff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d106      	bne.n	800800a <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007ffc:	f107 0314 	add.w	r3, r7, #20
 8008000:	4618      	mov	r0, r3
 8008002:	f001 f87b 	bl	80090fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008006:	2301      	movs	r3, #1
 8008008:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800800a:	f001 ff5b 	bl	8009ec4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800800e:	f000 fdb3 	bl	8008b78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008012:	f001 ff23 	bl	8009e5c <vPortEnterCritical>
 8008016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008018:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800801c:	b25b      	sxtb	r3, r3
 800801e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008022:	d103      	bne.n	800802c <xQueueGenericSend+0x17c>
 8008024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008026:	2200      	movs	r2, #0
 8008028:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800802c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800802e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008032:	b25b      	sxtb	r3, r3
 8008034:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008038:	d103      	bne.n	8008042 <xQueueGenericSend+0x192>
 800803a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800803c:	2200      	movs	r2, #0
 800803e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008042:	f001 ff3f 	bl	8009ec4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008046:	1d3a      	adds	r2, r7, #4
 8008048:	f107 0314 	add.w	r3, r7, #20
 800804c:	4611      	mov	r1, r2
 800804e:	4618      	mov	r0, r3
 8008050:	f001 f86a 	bl	8009128 <xTaskCheckForTimeOut>
 8008054:	4603      	mov	r3, r0
 8008056:	2b00      	cmp	r3, #0
 8008058:	d124      	bne.n	80080a4 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800805a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800805c:	f000 faac 	bl	80085b8 <prvIsQueueFull>
 8008060:	4603      	mov	r3, r0
 8008062:	2b00      	cmp	r3, #0
 8008064:	d018      	beq.n	8008098 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008068:	3310      	adds	r3, #16
 800806a:	687a      	ldr	r2, [r7, #4]
 800806c:	4611      	mov	r1, r2
 800806e:	4618      	mov	r0, r3
 8008070:	f000 ff62 	bl	8008f38 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008074:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008076:	f000 fa37 	bl	80084e8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800807a:	f000 fd8b 	bl	8008b94 <xTaskResumeAll>
 800807e:	4603      	mov	r3, r0
 8008080:	2b00      	cmp	r3, #0
 8008082:	f47f af7c 	bne.w	8007f7e <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8008086:	4b0c      	ldr	r3, [pc, #48]	; (80080b8 <xQueueGenericSend+0x208>)
 8008088:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800808c:	601a      	str	r2, [r3, #0]
 800808e:	f3bf 8f4f 	dsb	sy
 8008092:	f3bf 8f6f 	isb	sy
 8008096:	e772      	b.n	8007f7e <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008098:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800809a:	f000 fa25 	bl	80084e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800809e:	f000 fd79 	bl	8008b94 <xTaskResumeAll>
 80080a2:	e76c      	b.n	8007f7e <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80080a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80080a6:	f000 fa1f 	bl	80084e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80080aa:	f000 fd73 	bl	8008b94 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80080ae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	3738      	adds	r7, #56	; 0x38
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}
 80080b8:	e000ed04 	.word	0xe000ed04

080080bc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b08e      	sub	sp, #56	; 0x38
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	60f8      	str	r0, [r7, #12]
 80080c4:	60b9      	str	r1, [r7, #8]
 80080c6:	607a      	str	r2, [r7, #4]
 80080c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80080ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d10c      	bne.n	80080ee <xQueueGenericSendFromISR+0x32>
	__asm volatile
 80080d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d8:	b672      	cpsid	i
 80080da:	f383 8811 	msr	BASEPRI, r3
 80080de:	f3bf 8f6f 	isb	sy
 80080e2:	f3bf 8f4f 	dsb	sy
 80080e6:	b662      	cpsie	i
 80080e8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80080ea:	bf00      	nop
 80080ec:	e7fe      	b.n	80080ec <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d103      	bne.n	80080fc <xQueueGenericSendFromISR+0x40>
 80080f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d101      	bne.n	8008100 <xQueueGenericSendFromISR+0x44>
 80080fc:	2301      	movs	r3, #1
 80080fe:	e000      	b.n	8008102 <xQueueGenericSendFromISR+0x46>
 8008100:	2300      	movs	r3, #0
 8008102:	2b00      	cmp	r3, #0
 8008104:	d10c      	bne.n	8008120 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8008106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800810a:	b672      	cpsid	i
 800810c:	f383 8811 	msr	BASEPRI, r3
 8008110:	f3bf 8f6f 	isb	sy
 8008114:	f3bf 8f4f 	dsb	sy
 8008118:	b662      	cpsie	i
 800811a:	623b      	str	r3, [r7, #32]
}
 800811c:	bf00      	nop
 800811e:	e7fe      	b.n	800811e <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	2b02      	cmp	r3, #2
 8008124:	d103      	bne.n	800812e <xQueueGenericSendFromISR+0x72>
 8008126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800812a:	2b01      	cmp	r3, #1
 800812c:	d101      	bne.n	8008132 <xQueueGenericSendFromISR+0x76>
 800812e:	2301      	movs	r3, #1
 8008130:	e000      	b.n	8008134 <xQueueGenericSendFromISR+0x78>
 8008132:	2300      	movs	r3, #0
 8008134:	2b00      	cmp	r3, #0
 8008136:	d10c      	bne.n	8008152 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8008138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800813c:	b672      	cpsid	i
 800813e:	f383 8811 	msr	BASEPRI, r3
 8008142:	f3bf 8f6f 	isb	sy
 8008146:	f3bf 8f4f 	dsb	sy
 800814a:	b662      	cpsie	i
 800814c:	61fb      	str	r3, [r7, #28]
}
 800814e:	bf00      	nop
 8008150:	e7fe      	b.n	8008150 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008152:	f001 ff6b 	bl	800a02c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008156:	f3ef 8211 	mrs	r2, BASEPRI
 800815a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800815e:	b672      	cpsid	i
 8008160:	f383 8811 	msr	BASEPRI, r3
 8008164:	f3bf 8f6f 	isb	sy
 8008168:	f3bf 8f4f 	dsb	sy
 800816c:	b662      	cpsie	i
 800816e:	61ba      	str	r2, [r7, #24]
 8008170:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008172:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008174:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008178:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800817a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800817c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800817e:	429a      	cmp	r2, r3
 8008180:	d302      	bcc.n	8008188 <xQueueGenericSendFromISR+0xcc>
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	2b02      	cmp	r3, #2
 8008186:	d12c      	bne.n	80081e2 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800818a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800818e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008192:	683a      	ldr	r2, [r7, #0]
 8008194:	68b9      	ldr	r1, [r7, #8]
 8008196:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008198:	f000 f916 	bl	80083c8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800819c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80081a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80081a4:	d112      	bne.n	80081cc <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80081a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d016      	beq.n	80081dc <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80081ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b0:	3324      	adds	r3, #36	; 0x24
 80081b2:	4618      	mov	r0, r3
 80081b4:	f000 ff14 	bl	8008fe0 <xTaskRemoveFromEventList>
 80081b8:	4603      	mov	r3, r0
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d00e      	beq.n	80081dc <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d00b      	beq.n	80081dc <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2201      	movs	r2, #1
 80081c8:	601a      	str	r2, [r3, #0]
 80081ca:	e007      	b.n	80081dc <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80081cc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80081d0:	3301      	adds	r3, #1
 80081d2:	b2db      	uxtb	r3, r3
 80081d4:	b25a      	sxtb	r2, r3
 80081d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80081dc:	2301      	movs	r3, #1
 80081de:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80081e0:	e001      	b.n	80081e6 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80081e2:	2300      	movs	r3, #0
 80081e4:	637b      	str	r3, [r7, #52]	; 0x34
 80081e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081e8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80081f0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80081f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3738      	adds	r7, #56	; 0x38
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}

080081fc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b08c      	sub	sp, #48	; 0x30
 8008200:	af00      	add	r7, sp, #0
 8008202:	60f8      	str	r0, [r7, #12]
 8008204:	60b9      	str	r1, [r7, #8]
 8008206:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008208:	2300      	movs	r3, #0
 800820a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008212:	2b00      	cmp	r3, #0
 8008214:	d10c      	bne.n	8008230 <xQueueReceive+0x34>
	__asm volatile
 8008216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800821a:	b672      	cpsid	i
 800821c:	f383 8811 	msr	BASEPRI, r3
 8008220:	f3bf 8f6f 	isb	sy
 8008224:	f3bf 8f4f 	dsb	sy
 8008228:	b662      	cpsie	i
 800822a:	623b      	str	r3, [r7, #32]
}
 800822c:	bf00      	nop
 800822e:	e7fe      	b.n	800822e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d103      	bne.n	800823e <xQueueReceive+0x42>
 8008236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800823a:	2b00      	cmp	r3, #0
 800823c:	d101      	bne.n	8008242 <xQueueReceive+0x46>
 800823e:	2301      	movs	r3, #1
 8008240:	e000      	b.n	8008244 <xQueueReceive+0x48>
 8008242:	2300      	movs	r3, #0
 8008244:	2b00      	cmp	r3, #0
 8008246:	d10c      	bne.n	8008262 <xQueueReceive+0x66>
	__asm volatile
 8008248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800824c:	b672      	cpsid	i
 800824e:	f383 8811 	msr	BASEPRI, r3
 8008252:	f3bf 8f6f 	isb	sy
 8008256:	f3bf 8f4f 	dsb	sy
 800825a:	b662      	cpsie	i
 800825c:	61fb      	str	r3, [r7, #28]
}
 800825e:	bf00      	nop
 8008260:	e7fe      	b.n	8008260 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008262:	f001 f8af 	bl	80093c4 <xTaskGetSchedulerState>
 8008266:	4603      	mov	r3, r0
 8008268:	2b00      	cmp	r3, #0
 800826a:	d102      	bne.n	8008272 <xQueueReceive+0x76>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d101      	bne.n	8008276 <xQueueReceive+0x7a>
 8008272:	2301      	movs	r3, #1
 8008274:	e000      	b.n	8008278 <xQueueReceive+0x7c>
 8008276:	2300      	movs	r3, #0
 8008278:	2b00      	cmp	r3, #0
 800827a:	d10c      	bne.n	8008296 <xQueueReceive+0x9a>
	__asm volatile
 800827c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008280:	b672      	cpsid	i
 8008282:	f383 8811 	msr	BASEPRI, r3
 8008286:	f3bf 8f6f 	isb	sy
 800828a:	f3bf 8f4f 	dsb	sy
 800828e:	b662      	cpsie	i
 8008290:	61bb      	str	r3, [r7, #24]
}
 8008292:	bf00      	nop
 8008294:	e7fe      	b.n	8008294 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008296:	f001 fde1 	bl	8009e5c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800829a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800829c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800829e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80082a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d01f      	beq.n	80082e6 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80082a6:	68b9      	ldr	r1, [r7, #8]
 80082a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082aa:	f000 f8f7 	bl	800849c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80082ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b0:	1e5a      	subs	r2, r3, #1
 80082b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082b4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80082b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082b8:	691b      	ldr	r3, [r3, #16]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d00f      	beq.n	80082de <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80082be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082c0:	3310      	adds	r3, #16
 80082c2:	4618      	mov	r0, r3
 80082c4:	f000 fe8c 	bl	8008fe0 <xTaskRemoveFromEventList>
 80082c8:	4603      	mov	r3, r0
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d007      	beq.n	80082de <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80082ce:	4b3d      	ldr	r3, [pc, #244]	; (80083c4 <xQueueReceive+0x1c8>)
 80082d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082d4:	601a      	str	r2, [r3, #0]
 80082d6:	f3bf 8f4f 	dsb	sy
 80082da:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80082de:	f001 fdf1 	bl	8009ec4 <vPortExitCritical>
				return pdPASS;
 80082e2:	2301      	movs	r3, #1
 80082e4:	e069      	b.n	80083ba <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d103      	bne.n	80082f4 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80082ec:	f001 fdea 	bl	8009ec4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80082f0:	2300      	movs	r3, #0
 80082f2:	e062      	b.n	80083ba <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 80082f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d106      	bne.n	8008308 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80082fa:	f107 0310 	add.w	r3, r7, #16
 80082fe:	4618      	mov	r0, r3
 8008300:	f000 fefc 	bl	80090fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008304:	2301      	movs	r3, #1
 8008306:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008308:	f001 fddc 	bl	8009ec4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800830c:	f000 fc34 	bl	8008b78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008310:	f001 fda4 	bl	8009e5c <vPortEnterCritical>
 8008314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008316:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800831a:	b25b      	sxtb	r3, r3
 800831c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008320:	d103      	bne.n	800832a <xQueueReceive+0x12e>
 8008322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008324:	2200      	movs	r2, #0
 8008326:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800832a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800832c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008330:	b25b      	sxtb	r3, r3
 8008332:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008336:	d103      	bne.n	8008340 <xQueueReceive+0x144>
 8008338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800833a:	2200      	movs	r2, #0
 800833c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008340:	f001 fdc0 	bl	8009ec4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008344:	1d3a      	adds	r2, r7, #4
 8008346:	f107 0310 	add.w	r3, r7, #16
 800834a:	4611      	mov	r1, r2
 800834c:	4618      	mov	r0, r3
 800834e:	f000 feeb 	bl	8009128 <xTaskCheckForTimeOut>
 8008352:	4603      	mov	r3, r0
 8008354:	2b00      	cmp	r3, #0
 8008356:	d123      	bne.n	80083a0 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008358:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800835a:	f000 f917 	bl	800858c <prvIsQueueEmpty>
 800835e:	4603      	mov	r3, r0
 8008360:	2b00      	cmp	r3, #0
 8008362:	d017      	beq.n	8008394 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008366:	3324      	adds	r3, #36	; 0x24
 8008368:	687a      	ldr	r2, [r7, #4]
 800836a:	4611      	mov	r1, r2
 800836c:	4618      	mov	r0, r3
 800836e:	f000 fde3 	bl	8008f38 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008372:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008374:	f000 f8b8 	bl	80084e8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008378:	f000 fc0c 	bl	8008b94 <xTaskResumeAll>
 800837c:	4603      	mov	r3, r0
 800837e:	2b00      	cmp	r3, #0
 8008380:	d189      	bne.n	8008296 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8008382:	4b10      	ldr	r3, [pc, #64]	; (80083c4 <xQueueReceive+0x1c8>)
 8008384:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008388:	601a      	str	r2, [r3, #0]
 800838a:	f3bf 8f4f 	dsb	sy
 800838e:	f3bf 8f6f 	isb	sy
 8008392:	e780      	b.n	8008296 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008394:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008396:	f000 f8a7 	bl	80084e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800839a:	f000 fbfb 	bl	8008b94 <xTaskResumeAll>
 800839e:	e77a      	b.n	8008296 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80083a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083a2:	f000 f8a1 	bl	80084e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80083a6:	f000 fbf5 	bl	8008b94 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80083aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083ac:	f000 f8ee 	bl	800858c <prvIsQueueEmpty>
 80083b0:	4603      	mov	r3, r0
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	f43f af6f 	beq.w	8008296 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80083b8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	3730      	adds	r7, #48	; 0x30
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}
 80083c2:	bf00      	nop
 80083c4:	e000ed04 	.word	0xe000ed04

080083c8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b086      	sub	sp, #24
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	60f8      	str	r0, [r7, #12]
 80083d0:	60b9      	str	r1, [r7, #8]
 80083d2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80083d4:	2300      	movs	r3, #0
 80083d6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083dc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d10d      	bne.n	8008402 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d14d      	bne.n	800848a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	689b      	ldr	r3, [r3, #8]
 80083f2:	4618      	mov	r0, r3
 80083f4:	f001 f804 	bl	8009400 <xTaskPriorityDisinherit>
 80083f8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	2200      	movs	r2, #0
 80083fe:	609a      	str	r2, [r3, #8]
 8008400:	e043      	b.n	800848a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d119      	bne.n	800843c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	6858      	ldr	r0, [r3, #4]
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008410:	461a      	mov	r2, r3
 8008412:	68b9      	ldr	r1, [r7, #8]
 8008414:	f011 fa6b 	bl	80198ee <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	685a      	ldr	r2, [r3, #4]
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008420:	441a      	add	r2, r3
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	685a      	ldr	r2, [r3, #4]
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	689b      	ldr	r3, [r3, #8]
 800842e:	429a      	cmp	r2, r3
 8008430:	d32b      	bcc.n	800848a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681a      	ldr	r2, [r3, #0]
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	605a      	str	r2, [r3, #4]
 800843a:	e026      	b.n	800848a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	68d8      	ldr	r0, [r3, #12]
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008444:	461a      	mov	r2, r3
 8008446:	68b9      	ldr	r1, [r7, #8]
 8008448:	f011 fa51 	bl	80198ee <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	68da      	ldr	r2, [r3, #12]
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008454:	425b      	negs	r3, r3
 8008456:	441a      	add	r2, r3
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	68da      	ldr	r2, [r3, #12]
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	429a      	cmp	r2, r3
 8008466:	d207      	bcs.n	8008478 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	689a      	ldr	r2, [r3, #8]
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008470:	425b      	negs	r3, r3
 8008472:	441a      	add	r2, r3
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2b02      	cmp	r3, #2
 800847c:	d105      	bne.n	800848a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800847e:	693b      	ldr	r3, [r7, #16]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d002      	beq.n	800848a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	3b01      	subs	r3, #1
 8008488:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800848a:	693b      	ldr	r3, [r7, #16]
 800848c:	1c5a      	adds	r2, r3, #1
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008492:	697b      	ldr	r3, [r7, #20]
}
 8008494:	4618      	mov	r0, r3
 8008496:	3718      	adds	r7, #24
 8008498:	46bd      	mov	sp, r7
 800849a:	bd80      	pop	{r7, pc}

0800849c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b082      	sub	sp, #8
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
 80084a4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d018      	beq.n	80084e0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	68da      	ldr	r2, [r3, #12]
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084b6:	441a      	add	r2, r3
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	68da      	ldr	r2, [r3, #12]
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	689b      	ldr	r3, [r3, #8]
 80084c4:	429a      	cmp	r2, r3
 80084c6:	d303      	bcc.n	80084d0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681a      	ldr	r2, [r3, #0]
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	68d9      	ldr	r1, [r3, #12]
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084d8:	461a      	mov	r2, r3
 80084da:	6838      	ldr	r0, [r7, #0]
 80084dc:	f011 fa07 	bl	80198ee <memcpy>
	}
}
 80084e0:	bf00      	nop
 80084e2:	3708      	adds	r7, #8
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bd80      	pop	{r7, pc}

080084e8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b084      	sub	sp, #16
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80084f0:	f001 fcb4 	bl	8009e5c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80084fa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80084fc:	e011      	b.n	8008522 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008502:	2b00      	cmp	r3, #0
 8008504:	d012      	beq.n	800852c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	3324      	adds	r3, #36	; 0x24
 800850a:	4618      	mov	r0, r3
 800850c:	f000 fd68 	bl	8008fe0 <xTaskRemoveFromEventList>
 8008510:	4603      	mov	r3, r0
 8008512:	2b00      	cmp	r3, #0
 8008514:	d001      	beq.n	800851a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008516:	f000 fe6d 	bl	80091f4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800851a:	7bfb      	ldrb	r3, [r7, #15]
 800851c:	3b01      	subs	r3, #1
 800851e:	b2db      	uxtb	r3, r3
 8008520:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008522:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008526:	2b00      	cmp	r3, #0
 8008528:	dce9      	bgt.n	80084fe <prvUnlockQueue+0x16>
 800852a:	e000      	b.n	800852e <prvUnlockQueue+0x46>
					break;
 800852c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	22ff      	movs	r2, #255	; 0xff
 8008532:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008536:	f001 fcc5 	bl	8009ec4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800853a:	f001 fc8f 	bl	8009e5c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008544:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008546:	e011      	b.n	800856c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	691b      	ldr	r3, [r3, #16]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d012      	beq.n	8008576 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	3310      	adds	r3, #16
 8008554:	4618      	mov	r0, r3
 8008556:	f000 fd43 	bl	8008fe0 <xTaskRemoveFromEventList>
 800855a:	4603      	mov	r3, r0
 800855c:	2b00      	cmp	r3, #0
 800855e:	d001      	beq.n	8008564 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008560:	f000 fe48 	bl	80091f4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008564:	7bbb      	ldrb	r3, [r7, #14]
 8008566:	3b01      	subs	r3, #1
 8008568:	b2db      	uxtb	r3, r3
 800856a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800856c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008570:	2b00      	cmp	r3, #0
 8008572:	dce9      	bgt.n	8008548 <prvUnlockQueue+0x60>
 8008574:	e000      	b.n	8008578 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008576:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	22ff      	movs	r2, #255	; 0xff
 800857c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008580:	f001 fca0 	bl	8009ec4 <vPortExitCritical>
}
 8008584:	bf00      	nop
 8008586:	3710      	adds	r7, #16
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}

0800858c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b084      	sub	sp, #16
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008594:	f001 fc62 	bl	8009e5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800859c:	2b00      	cmp	r3, #0
 800859e:	d102      	bne.n	80085a6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80085a0:	2301      	movs	r3, #1
 80085a2:	60fb      	str	r3, [r7, #12]
 80085a4:	e001      	b.n	80085aa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80085a6:	2300      	movs	r3, #0
 80085a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80085aa:	f001 fc8b 	bl	8009ec4 <vPortExitCritical>

	return xReturn;
 80085ae:	68fb      	ldr	r3, [r7, #12]
}
 80085b0:	4618      	mov	r0, r3
 80085b2:	3710      	adds	r7, #16
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}

080085b8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b084      	sub	sp, #16
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80085c0:	f001 fc4c 	bl	8009e5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085cc:	429a      	cmp	r2, r3
 80085ce:	d102      	bne.n	80085d6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80085d0:	2301      	movs	r3, #1
 80085d2:	60fb      	str	r3, [r7, #12]
 80085d4:	e001      	b.n	80085da <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80085d6:	2300      	movs	r3, #0
 80085d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80085da:	f001 fc73 	bl	8009ec4 <vPortExitCritical>

	return xReturn;
 80085de:	68fb      	ldr	r3, [r7, #12]
}
 80085e0:	4618      	mov	r0, r3
 80085e2:	3710      	adds	r7, #16
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}

080085e8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80085e8:	b480      	push	{r7}
 80085ea:	b085      	sub	sp, #20
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
 80085f0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80085f2:	2300      	movs	r3, #0
 80085f4:	60fb      	str	r3, [r7, #12]
 80085f6:	e014      	b.n	8008622 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80085f8:	4a0f      	ldr	r2, [pc, #60]	; (8008638 <vQueueAddToRegistry+0x50>)
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d10b      	bne.n	800861c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008604:	490c      	ldr	r1, [pc, #48]	; (8008638 <vQueueAddToRegistry+0x50>)
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	683a      	ldr	r2, [r7, #0]
 800860a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800860e:	4a0a      	ldr	r2, [pc, #40]	; (8008638 <vQueueAddToRegistry+0x50>)
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	00db      	lsls	r3, r3, #3
 8008614:	4413      	add	r3, r2
 8008616:	687a      	ldr	r2, [r7, #4]
 8008618:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800861a:	e006      	b.n	800862a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	3301      	adds	r3, #1
 8008620:	60fb      	str	r3, [r7, #12]
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	2b07      	cmp	r3, #7
 8008626:	d9e7      	bls.n	80085f8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008628:	bf00      	nop
 800862a:	bf00      	nop
 800862c:	3714      	adds	r7, #20
 800862e:	46bd      	mov	sp, r7
 8008630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008634:	4770      	bx	lr
 8008636:	bf00      	nop
 8008638:	200076a8 	.word	0x200076a8

0800863c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800863c:	b580      	push	{r7, lr}
 800863e:	b086      	sub	sp, #24
 8008640:	af00      	add	r7, sp, #0
 8008642:	60f8      	str	r0, [r7, #12]
 8008644:	60b9      	str	r1, [r7, #8]
 8008646:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800864c:	f001 fc06 	bl	8009e5c <vPortEnterCritical>
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008656:	b25b      	sxtb	r3, r3
 8008658:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800865c:	d103      	bne.n	8008666 <vQueueWaitForMessageRestricted+0x2a>
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	2200      	movs	r2, #0
 8008662:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008666:	697b      	ldr	r3, [r7, #20]
 8008668:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800866c:	b25b      	sxtb	r3, r3
 800866e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008672:	d103      	bne.n	800867c <vQueueWaitForMessageRestricted+0x40>
 8008674:	697b      	ldr	r3, [r7, #20]
 8008676:	2200      	movs	r2, #0
 8008678:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800867c:	f001 fc22 	bl	8009ec4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008684:	2b00      	cmp	r3, #0
 8008686:	d106      	bne.n	8008696 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	3324      	adds	r3, #36	; 0x24
 800868c:	687a      	ldr	r2, [r7, #4]
 800868e:	68b9      	ldr	r1, [r7, #8]
 8008690:	4618      	mov	r0, r3
 8008692:	f000 fc77 	bl	8008f84 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008696:	6978      	ldr	r0, [r7, #20]
 8008698:	f7ff ff26 	bl	80084e8 <prvUnlockQueue>
	}
 800869c:	bf00      	nop
 800869e:	3718      	adds	r7, #24
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}

080086a4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b08e      	sub	sp, #56	; 0x38
 80086a8:	af04      	add	r7, sp, #16
 80086aa:	60f8      	str	r0, [r7, #12]
 80086ac:	60b9      	str	r1, [r7, #8]
 80086ae:	607a      	str	r2, [r7, #4]
 80086b0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80086b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d10c      	bne.n	80086d2 <xTaskCreateStatic+0x2e>
	__asm volatile
 80086b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086bc:	b672      	cpsid	i
 80086be:	f383 8811 	msr	BASEPRI, r3
 80086c2:	f3bf 8f6f 	isb	sy
 80086c6:	f3bf 8f4f 	dsb	sy
 80086ca:	b662      	cpsie	i
 80086cc:	623b      	str	r3, [r7, #32]
}
 80086ce:	bf00      	nop
 80086d0:	e7fe      	b.n	80086d0 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80086d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d10c      	bne.n	80086f2 <xTaskCreateStatic+0x4e>
	__asm volatile
 80086d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086dc:	b672      	cpsid	i
 80086de:	f383 8811 	msr	BASEPRI, r3
 80086e2:	f3bf 8f6f 	isb	sy
 80086e6:	f3bf 8f4f 	dsb	sy
 80086ea:	b662      	cpsie	i
 80086ec:	61fb      	str	r3, [r7, #28]
}
 80086ee:	bf00      	nop
 80086f0:	e7fe      	b.n	80086f0 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80086f2:	23a8      	movs	r3, #168	; 0xa8
 80086f4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80086f6:	693b      	ldr	r3, [r7, #16]
 80086f8:	2ba8      	cmp	r3, #168	; 0xa8
 80086fa:	d00c      	beq.n	8008716 <xTaskCreateStatic+0x72>
	__asm volatile
 80086fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008700:	b672      	cpsid	i
 8008702:	f383 8811 	msr	BASEPRI, r3
 8008706:	f3bf 8f6f 	isb	sy
 800870a:	f3bf 8f4f 	dsb	sy
 800870e:	b662      	cpsie	i
 8008710:	61bb      	str	r3, [r7, #24]
}
 8008712:	bf00      	nop
 8008714:	e7fe      	b.n	8008714 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008716:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800871a:	2b00      	cmp	r3, #0
 800871c:	d01e      	beq.n	800875c <xTaskCreateStatic+0xb8>
 800871e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008720:	2b00      	cmp	r3, #0
 8008722:	d01b      	beq.n	800875c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008726:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800872a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800872c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800872e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008730:	2202      	movs	r2, #2
 8008732:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008736:	2300      	movs	r3, #0
 8008738:	9303      	str	r3, [sp, #12]
 800873a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800873c:	9302      	str	r3, [sp, #8]
 800873e:	f107 0314 	add.w	r3, r7, #20
 8008742:	9301      	str	r3, [sp, #4]
 8008744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008746:	9300      	str	r3, [sp, #0]
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	687a      	ldr	r2, [r7, #4]
 800874c:	68b9      	ldr	r1, [r7, #8]
 800874e:	68f8      	ldr	r0, [r7, #12]
 8008750:	f000 f850 	bl	80087f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008754:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008756:	f000 f8f5 	bl	8008944 <prvAddNewTaskToReadyList>
 800875a:	e001      	b.n	8008760 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800875c:	2300      	movs	r3, #0
 800875e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008760:	697b      	ldr	r3, [r7, #20]
	}
 8008762:	4618      	mov	r0, r3
 8008764:	3728      	adds	r7, #40	; 0x28
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}

0800876a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800876a:	b580      	push	{r7, lr}
 800876c:	b08c      	sub	sp, #48	; 0x30
 800876e:	af04      	add	r7, sp, #16
 8008770:	60f8      	str	r0, [r7, #12]
 8008772:	60b9      	str	r1, [r7, #8]
 8008774:	603b      	str	r3, [r7, #0]
 8008776:	4613      	mov	r3, r2
 8008778:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800877a:	88fb      	ldrh	r3, [r7, #6]
 800877c:	009b      	lsls	r3, r3, #2
 800877e:	4618      	mov	r0, r3
 8008780:	f001 fc98 	bl	800a0b4 <pvPortMalloc>
 8008784:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008786:	697b      	ldr	r3, [r7, #20]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d00e      	beq.n	80087aa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800878c:	20a8      	movs	r0, #168	; 0xa8
 800878e:	f001 fc91 	bl	800a0b4 <pvPortMalloc>
 8008792:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008794:	69fb      	ldr	r3, [r7, #28]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d003      	beq.n	80087a2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800879a:	69fb      	ldr	r3, [r7, #28]
 800879c:	697a      	ldr	r2, [r7, #20]
 800879e:	631a      	str	r2, [r3, #48]	; 0x30
 80087a0:	e005      	b.n	80087ae <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80087a2:	6978      	ldr	r0, [r7, #20]
 80087a4:	f001 fd50 	bl	800a248 <vPortFree>
 80087a8:	e001      	b.n	80087ae <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80087aa:	2300      	movs	r3, #0
 80087ac:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80087ae:	69fb      	ldr	r3, [r7, #28]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d017      	beq.n	80087e4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80087b4:	69fb      	ldr	r3, [r7, #28]
 80087b6:	2200      	movs	r2, #0
 80087b8:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80087bc:	88fa      	ldrh	r2, [r7, #6]
 80087be:	2300      	movs	r3, #0
 80087c0:	9303      	str	r3, [sp, #12]
 80087c2:	69fb      	ldr	r3, [r7, #28]
 80087c4:	9302      	str	r3, [sp, #8]
 80087c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087c8:	9301      	str	r3, [sp, #4]
 80087ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087cc:	9300      	str	r3, [sp, #0]
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	68b9      	ldr	r1, [r7, #8]
 80087d2:	68f8      	ldr	r0, [r7, #12]
 80087d4:	f000 f80e 	bl	80087f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80087d8:	69f8      	ldr	r0, [r7, #28]
 80087da:	f000 f8b3 	bl	8008944 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80087de:	2301      	movs	r3, #1
 80087e0:	61bb      	str	r3, [r7, #24]
 80087e2:	e002      	b.n	80087ea <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80087e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80087e8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80087ea:	69bb      	ldr	r3, [r7, #24]
	}
 80087ec:	4618      	mov	r0, r3
 80087ee:	3720      	adds	r7, #32
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bd80      	pop	{r7, pc}

080087f4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b088      	sub	sp, #32
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	60f8      	str	r0, [r7, #12]
 80087fc:	60b9      	str	r1, [r7, #8]
 80087fe:	607a      	str	r2, [r7, #4]
 8008800:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008804:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	009b      	lsls	r3, r3, #2
 800880a:	461a      	mov	r2, r3
 800880c:	21a5      	movs	r1, #165	; 0xa5
 800880e:	f010 fef9 	bl	8019604 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008814:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008816:	6879      	ldr	r1, [r7, #4]
 8008818:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800881c:	440b      	add	r3, r1
 800881e:	009b      	lsls	r3, r3, #2
 8008820:	4413      	add	r3, r2
 8008822:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008824:	69bb      	ldr	r3, [r7, #24]
 8008826:	f023 0307 	bic.w	r3, r3, #7
 800882a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800882c:	69bb      	ldr	r3, [r7, #24]
 800882e:	f003 0307 	and.w	r3, r3, #7
 8008832:	2b00      	cmp	r3, #0
 8008834:	d00c      	beq.n	8008850 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8008836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800883a:	b672      	cpsid	i
 800883c:	f383 8811 	msr	BASEPRI, r3
 8008840:	f3bf 8f6f 	isb	sy
 8008844:	f3bf 8f4f 	dsb	sy
 8008848:	b662      	cpsie	i
 800884a:	617b      	str	r3, [r7, #20]
}
 800884c:	bf00      	nop
 800884e:	e7fe      	b.n	800884e <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d01f      	beq.n	8008896 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008856:	2300      	movs	r3, #0
 8008858:	61fb      	str	r3, [r7, #28]
 800885a:	e012      	b.n	8008882 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800885c:	68ba      	ldr	r2, [r7, #8]
 800885e:	69fb      	ldr	r3, [r7, #28]
 8008860:	4413      	add	r3, r2
 8008862:	7819      	ldrb	r1, [r3, #0]
 8008864:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008866:	69fb      	ldr	r3, [r7, #28]
 8008868:	4413      	add	r3, r2
 800886a:	3334      	adds	r3, #52	; 0x34
 800886c:	460a      	mov	r2, r1
 800886e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008870:	68ba      	ldr	r2, [r7, #8]
 8008872:	69fb      	ldr	r3, [r7, #28]
 8008874:	4413      	add	r3, r2
 8008876:	781b      	ldrb	r3, [r3, #0]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d006      	beq.n	800888a <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800887c:	69fb      	ldr	r3, [r7, #28]
 800887e:	3301      	adds	r3, #1
 8008880:	61fb      	str	r3, [r7, #28]
 8008882:	69fb      	ldr	r3, [r7, #28]
 8008884:	2b0f      	cmp	r3, #15
 8008886:	d9e9      	bls.n	800885c <prvInitialiseNewTask+0x68>
 8008888:	e000      	b.n	800888c <prvInitialiseNewTask+0x98>
			{
				break;
 800888a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800888c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800888e:	2200      	movs	r2, #0
 8008890:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008894:	e003      	b.n	800889e <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008898:	2200      	movs	r2, #0
 800889a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800889e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088a0:	2b37      	cmp	r3, #55	; 0x37
 80088a2:	d901      	bls.n	80088a8 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80088a4:	2337      	movs	r3, #55	; 0x37
 80088a6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80088a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80088ac:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80088ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80088b2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80088b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088b6:	2200      	movs	r2, #0
 80088b8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80088ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088bc:	3304      	adds	r3, #4
 80088be:	4618      	mov	r0, r3
 80088c0:	f7ff f952 	bl	8007b68 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80088c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088c6:	3318      	adds	r3, #24
 80088c8:	4618      	mov	r0, r3
 80088ca:	f7ff f94d 	bl	8007b68 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80088ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088d2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088d6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80088da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088dc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80088de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088e2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80088e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088e6:	2200      	movs	r2, #0
 80088e8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80088ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ee:	2200      	movs	r2, #0
 80088f0:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80088f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088f6:	3354      	adds	r3, #84	; 0x54
 80088f8:	224c      	movs	r2, #76	; 0x4c
 80088fa:	2100      	movs	r1, #0
 80088fc:	4618      	mov	r0, r3
 80088fe:	f010 fe81 	bl	8019604 <memset>
 8008902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008904:	4a0c      	ldr	r2, [pc, #48]	; (8008938 <prvInitialiseNewTask+0x144>)
 8008906:	659a      	str	r2, [r3, #88]	; 0x58
 8008908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800890a:	4a0c      	ldr	r2, [pc, #48]	; (800893c <prvInitialiseNewTask+0x148>)
 800890c:	65da      	str	r2, [r3, #92]	; 0x5c
 800890e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008910:	4a0b      	ldr	r2, [pc, #44]	; (8008940 <prvInitialiseNewTask+0x14c>)
 8008912:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008914:	683a      	ldr	r2, [r7, #0]
 8008916:	68f9      	ldr	r1, [r7, #12]
 8008918:	69b8      	ldr	r0, [r7, #24]
 800891a:	f001 f993 	bl	8009c44 <pxPortInitialiseStack>
 800891e:	4602      	mov	r2, r0
 8008920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008922:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008926:	2b00      	cmp	r3, #0
 8008928:	d002      	beq.n	8008930 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800892a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800892c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800892e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008930:	bf00      	nop
 8008932:	3720      	adds	r7, #32
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}
 8008938:	200109ec 	.word	0x200109ec
 800893c:	20010a54 	.word	0x20010a54
 8008940:	20010abc 	.word	0x20010abc

08008944 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b082      	sub	sp, #8
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800894c:	f001 fa86 	bl	8009e5c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008950:	4b2d      	ldr	r3, [pc, #180]	; (8008a08 <prvAddNewTaskToReadyList+0xc4>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	3301      	adds	r3, #1
 8008956:	4a2c      	ldr	r2, [pc, #176]	; (8008a08 <prvAddNewTaskToReadyList+0xc4>)
 8008958:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800895a:	4b2c      	ldr	r3, [pc, #176]	; (8008a0c <prvAddNewTaskToReadyList+0xc8>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d109      	bne.n	8008976 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008962:	4a2a      	ldr	r2, [pc, #168]	; (8008a0c <prvAddNewTaskToReadyList+0xc8>)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008968:	4b27      	ldr	r3, [pc, #156]	; (8008a08 <prvAddNewTaskToReadyList+0xc4>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	2b01      	cmp	r3, #1
 800896e:	d110      	bne.n	8008992 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008970:	f000 fc64 	bl	800923c <prvInitialiseTaskLists>
 8008974:	e00d      	b.n	8008992 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008976:	4b26      	ldr	r3, [pc, #152]	; (8008a10 <prvAddNewTaskToReadyList+0xcc>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d109      	bne.n	8008992 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800897e:	4b23      	ldr	r3, [pc, #140]	; (8008a0c <prvAddNewTaskToReadyList+0xc8>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008988:	429a      	cmp	r2, r3
 800898a:	d802      	bhi.n	8008992 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800898c:	4a1f      	ldr	r2, [pc, #124]	; (8008a0c <prvAddNewTaskToReadyList+0xc8>)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008992:	4b20      	ldr	r3, [pc, #128]	; (8008a14 <prvAddNewTaskToReadyList+0xd0>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	3301      	adds	r3, #1
 8008998:	4a1e      	ldr	r2, [pc, #120]	; (8008a14 <prvAddNewTaskToReadyList+0xd0>)
 800899a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800899c:	4b1d      	ldr	r3, [pc, #116]	; (8008a14 <prvAddNewTaskToReadyList+0xd0>)
 800899e:	681a      	ldr	r2, [r3, #0]
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089a8:	4b1b      	ldr	r3, [pc, #108]	; (8008a18 <prvAddNewTaskToReadyList+0xd4>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	429a      	cmp	r2, r3
 80089ae:	d903      	bls.n	80089b8 <prvAddNewTaskToReadyList+0x74>
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089b4:	4a18      	ldr	r2, [pc, #96]	; (8008a18 <prvAddNewTaskToReadyList+0xd4>)
 80089b6:	6013      	str	r3, [r2, #0]
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089bc:	4613      	mov	r3, r2
 80089be:	009b      	lsls	r3, r3, #2
 80089c0:	4413      	add	r3, r2
 80089c2:	009b      	lsls	r3, r3, #2
 80089c4:	4a15      	ldr	r2, [pc, #84]	; (8008a1c <prvAddNewTaskToReadyList+0xd8>)
 80089c6:	441a      	add	r2, r3
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	3304      	adds	r3, #4
 80089cc:	4619      	mov	r1, r3
 80089ce:	4610      	mov	r0, r2
 80089d0:	f7ff f8d7 	bl	8007b82 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80089d4:	f001 fa76 	bl	8009ec4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80089d8:	4b0d      	ldr	r3, [pc, #52]	; (8008a10 <prvAddNewTaskToReadyList+0xcc>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d00e      	beq.n	80089fe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80089e0:	4b0a      	ldr	r3, [pc, #40]	; (8008a0c <prvAddNewTaskToReadyList+0xc8>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ea:	429a      	cmp	r2, r3
 80089ec:	d207      	bcs.n	80089fe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80089ee:	4b0c      	ldr	r3, [pc, #48]	; (8008a20 <prvAddNewTaskToReadyList+0xdc>)
 80089f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089f4:	601a      	str	r2, [r3, #0]
 80089f6:	f3bf 8f4f 	dsb	sy
 80089fa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80089fe:	bf00      	nop
 8008a00:	3708      	adds	r7, #8
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}
 8008a06:	bf00      	nop
 8008a08:	20007bbc 	.word	0x20007bbc
 8008a0c:	200076e8 	.word	0x200076e8
 8008a10:	20007bc8 	.word	0x20007bc8
 8008a14:	20007bd8 	.word	0x20007bd8
 8008a18:	20007bc4 	.word	0x20007bc4
 8008a1c:	200076ec 	.word	0x200076ec
 8008a20:	e000ed04 	.word	0xe000ed04

08008a24 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b084      	sub	sp, #16
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d019      	beq.n	8008a6a <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008a36:	4b14      	ldr	r3, [pc, #80]	; (8008a88 <vTaskDelay+0x64>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d00c      	beq.n	8008a58 <vTaskDelay+0x34>
	__asm volatile
 8008a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a42:	b672      	cpsid	i
 8008a44:	f383 8811 	msr	BASEPRI, r3
 8008a48:	f3bf 8f6f 	isb	sy
 8008a4c:	f3bf 8f4f 	dsb	sy
 8008a50:	b662      	cpsie	i
 8008a52:	60bb      	str	r3, [r7, #8]
}
 8008a54:	bf00      	nop
 8008a56:	e7fe      	b.n	8008a56 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8008a58:	f000 f88e 	bl	8008b78 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008a5c:	2100      	movs	r1, #0
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f000 fd40 	bl	80094e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008a64:	f000 f896 	bl	8008b94 <xTaskResumeAll>
 8008a68:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d107      	bne.n	8008a80 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8008a70:	4b06      	ldr	r3, [pc, #24]	; (8008a8c <vTaskDelay+0x68>)
 8008a72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a76:	601a      	str	r2, [r3, #0]
 8008a78:	f3bf 8f4f 	dsb	sy
 8008a7c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008a80:	bf00      	nop
 8008a82:	3710      	adds	r7, #16
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}
 8008a88:	20007be4 	.word	0x20007be4
 8008a8c:	e000ed04 	.word	0xe000ed04

08008a90 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b08a      	sub	sp, #40	; 0x28
 8008a94:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008a96:	2300      	movs	r3, #0
 8008a98:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008a9e:	463a      	mov	r2, r7
 8008aa0:	1d39      	adds	r1, r7, #4
 8008aa2:	f107 0308 	add.w	r3, r7, #8
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f7ff f80a 	bl	8007ac0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008aac:	6839      	ldr	r1, [r7, #0]
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	68ba      	ldr	r2, [r7, #8]
 8008ab2:	9202      	str	r2, [sp, #8]
 8008ab4:	9301      	str	r3, [sp, #4]
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	9300      	str	r3, [sp, #0]
 8008aba:	2300      	movs	r3, #0
 8008abc:	460a      	mov	r2, r1
 8008abe:	4926      	ldr	r1, [pc, #152]	; (8008b58 <vTaskStartScheduler+0xc8>)
 8008ac0:	4826      	ldr	r0, [pc, #152]	; (8008b5c <vTaskStartScheduler+0xcc>)
 8008ac2:	f7ff fdef 	bl	80086a4 <xTaskCreateStatic>
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	4a25      	ldr	r2, [pc, #148]	; (8008b60 <vTaskStartScheduler+0xd0>)
 8008aca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008acc:	4b24      	ldr	r3, [pc, #144]	; (8008b60 <vTaskStartScheduler+0xd0>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d002      	beq.n	8008ada <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	617b      	str	r3, [r7, #20]
 8008ad8:	e001      	b.n	8008ade <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008ada:	2300      	movs	r3, #0
 8008adc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	2b01      	cmp	r3, #1
 8008ae2:	d102      	bne.n	8008aea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008ae4:	f000 fd52 	bl	800958c <xTimerCreateTimerTask>
 8008ae8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	2b01      	cmp	r3, #1
 8008aee:	d11d      	bne.n	8008b2c <vTaskStartScheduler+0x9c>
	__asm volatile
 8008af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008af4:	b672      	cpsid	i
 8008af6:	f383 8811 	msr	BASEPRI, r3
 8008afa:	f3bf 8f6f 	isb	sy
 8008afe:	f3bf 8f4f 	dsb	sy
 8008b02:	b662      	cpsie	i
 8008b04:	613b      	str	r3, [r7, #16]
}
 8008b06:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008b08:	4b16      	ldr	r3, [pc, #88]	; (8008b64 <vTaskStartScheduler+0xd4>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	3354      	adds	r3, #84	; 0x54
 8008b0e:	4a16      	ldr	r2, [pc, #88]	; (8008b68 <vTaskStartScheduler+0xd8>)
 8008b10:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008b12:	4b16      	ldr	r3, [pc, #88]	; (8008b6c <vTaskStartScheduler+0xdc>)
 8008b14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008b18:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008b1a:	4b15      	ldr	r3, [pc, #84]	; (8008b70 <vTaskStartScheduler+0xe0>)
 8008b1c:	2201      	movs	r2, #1
 8008b1e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008b20:	4b14      	ldr	r3, [pc, #80]	; (8008b74 <vTaskStartScheduler+0xe4>)
 8008b22:	2200      	movs	r2, #0
 8008b24:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008b26:	f001 f91b 	bl	8009d60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008b2a:	e010      	b.n	8008b4e <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008b2c:	697b      	ldr	r3, [r7, #20]
 8008b2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b32:	d10c      	bne.n	8008b4e <vTaskStartScheduler+0xbe>
	__asm volatile
 8008b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b38:	b672      	cpsid	i
 8008b3a:	f383 8811 	msr	BASEPRI, r3
 8008b3e:	f3bf 8f6f 	isb	sy
 8008b42:	f3bf 8f4f 	dsb	sy
 8008b46:	b662      	cpsie	i
 8008b48:	60fb      	str	r3, [r7, #12]
}
 8008b4a:	bf00      	nop
 8008b4c:	e7fe      	b.n	8008b4c <vTaskStartScheduler+0xbc>
}
 8008b4e:	bf00      	nop
 8008b50:	3718      	adds	r7, #24
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}
 8008b56:	bf00      	nop
 8008b58:	0801a660 	.word	0x0801a660
 8008b5c:	0800920d 	.word	0x0800920d
 8008b60:	20007be0 	.word	0x20007be0
 8008b64:	200076e8 	.word	0x200076e8
 8008b68:	20002138 	.word	0x20002138
 8008b6c:	20007bdc 	.word	0x20007bdc
 8008b70:	20007bc8 	.word	0x20007bc8
 8008b74:	20007bc0 	.word	0x20007bc0

08008b78 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008b78:	b480      	push	{r7}
 8008b7a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008b7c:	4b04      	ldr	r3, [pc, #16]	; (8008b90 <vTaskSuspendAll+0x18>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	3301      	adds	r3, #1
 8008b82:	4a03      	ldr	r2, [pc, #12]	; (8008b90 <vTaskSuspendAll+0x18>)
 8008b84:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8008b86:	bf00      	nop
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8e:	4770      	bx	lr
 8008b90:	20007be4 	.word	0x20007be4

08008b94 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b084      	sub	sp, #16
 8008b98:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008ba2:	4b43      	ldr	r3, [pc, #268]	; (8008cb0 <xTaskResumeAll+0x11c>)
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d10c      	bne.n	8008bc4 <xTaskResumeAll+0x30>
	__asm volatile
 8008baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bae:	b672      	cpsid	i
 8008bb0:	f383 8811 	msr	BASEPRI, r3
 8008bb4:	f3bf 8f6f 	isb	sy
 8008bb8:	f3bf 8f4f 	dsb	sy
 8008bbc:	b662      	cpsie	i
 8008bbe:	603b      	str	r3, [r7, #0]
}
 8008bc0:	bf00      	nop
 8008bc2:	e7fe      	b.n	8008bc2 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008bc4:	f001 f94a 	bl	8009e5c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008bc8:	4b39      	ldr	r3, [pc, #228]	; (8008cb0 <xTaskResumeAll+0x11c>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	3b01      	subs	r3, #1
 8008bce:	4a38      	ldr	r2, [pc, #224]	; (8008cb0 <xTaskResumeAll+0x11c>)
 8008bd0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008bd2:	4b37      	ldr	r3, [pc, #220]	; (8008cb0 <xTaskResumeAll+0x11c>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d162      	bne.n	8008ca0 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008bda:	4b36      	ldr	r3, [pc, #216]	; (8008cb4 <xTaskResumeAll+0x120>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d05e      	beq.n	8008ca0 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008be2:	e02f      	b.n	8008c44 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008be4:	4b34      	ldr	r3, [pc, #208]	; (8008cb8 <xTaskResumeAll+0x124>)
 8008be6:	68db      	ldr	r3, [r3, #12]
 8008be8:	68db      	ldr	r3, [r3, #12]
 8008bea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	3318      	adds	r3, #24
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	f7ff f823 	bl	8007c3c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	3304      	adds	r3, #4
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f7ff f81e 	bl	8007c3c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c04:	4b2d      	ldr	r3, [pc, #180]	; (8008cbc <xTaskResumeAll+0x128>)
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	429a      	cmp	r2, r3
 8008c0a:	d903      	bls.n	8008c14 <xTaskResumeAll+0x80>
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c10:	4a2a      	ldr	r2, [pc, #168]	; (8008cbc <xTaskResumeAll+0x128>)
 8008c12:	6013      	str	r3, [r2, #0]
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c18:	4613      	mov	r3, r2
 8008c1a:	009b      	lsls	r3, r3, #2
 8008c1c:	4413      	add	r3, r2
 8008c1e:	009b      	lsls	r3, r3, #2
 8008c20:	4a27      	ldr	r2, [pc, #156]	; (8008cc0 <xTaskResumeAll+0x12c>)
 8008c22:	441a      	add	r2, r3
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	3304      	adds	r3, #4
 8008c28:	4619      	mov	r1, r3
 8008c2a:	4610      	mov	r0, r2
 8008c2c:	f7fe ffa9 	bl	8007b82 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c34:	4b23      	ldr	r3, [pc, #140]	; (8008cc4 <xTaskResumeAll+0x130>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c3a:	429a      	cmp	r2, r3
 8008c3c:	d302      	bcc.n	8008c44 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8008c3e:	4b22      	ldr	r3, [pc, #136]	; (8008cc8 <xTaskResumeAll+0x134>)
 8008c40:	2201      	movs	r2, #1
 8008c42:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008c44:	4b1c      	ldr	r3, [pc, #112]	; (8008cb8 <xTaskResumeAll+0x124>)
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d1cb      	bne.n	8008be4 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d001      	beq.n	8008c56 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008c52:	f000 fb97 	bl	8009384 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008c56:	4b1d      	ldr	r3, [pc, #116]	; (8008ccc <xTaskResumeAll+0x138>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d010      	beq.n	8008c84 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008c62:	f000 f847 	bl	8008cf4 <xTaskIncrementTick>
 8008c66:	4603      	mov	r3, r0
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d002      	beq.n	8008c72 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8008c6c:	4b16      	ldr	r3, [pc, #88]	; (8008cc8 <xTaskResumeAll+0x134>)
 8008c6e:	2201      	movs	r2, #1
 8008c70:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	3b01      	subs	r3, #1
 8008c76:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d1f1      	bne.n	8008c62 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8008c7e:	4b13      	ldr	r3, [pc, #76]	; (8008ccc <xTaskResumeAll+0x138>)
 8008c80:	2200      	movs	r2, #0
 8008c82:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008c84:	4b10      	ldr	r3, [pc, #64]	; (8008cc8 <xTaskResumeAll+0x134>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d009      	beq.n	8008ca0 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008c8c:	2301      	movs	r3, #1
 8008c8e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008c90:	4b0f      	ldr	r3, [pc, #60]	; (8008cd0 <xTaskResumeAll+0x13c>)
 8008c92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c96:	601a      	str	r2, [r3, #0]
 8008c98:	f3bf 8f4f 	dsb	sy
 8008c9c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008ca0:	f001 f910 	bl	8009ec4 <vPortExitCritical>

	return xAlreadyYielded;
 8008ca4:	68bb      	ldr	r3, [r7, #8]
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3710      	adds	r7, #16
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}
 8008cae:	bf00      	nop
 8008cb0:	20007be4 	.word	0x20007be4
 8008cb4:	20007bbc 	.word	0x20007bbc
 8008cb8:	20007b7c 	.word	0x20007b7c
 8008cbc:	20007bc4 	.word	0x20007bc4
 8008cc0:	200076ec 	.word	0x200076ec
 8008cc4:	200076e8 	.word	0x200076e8
 8008cc8:	20007bd0 	.word	0x20007bd0
 8008ccc:	20007bcc 	.word	0x20007bcc
 8008cd0:	e000ed04 	.word	0xe000ed04

08008cd4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b083      	sub	sp, #12
 8008cd8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008cda:	4b05      	ldr	r3, [pc, #20]	; (8008cf0 <xTaskGetTickCount+0x1c>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008ce0:	687b      	ldr	r3, [r7, #4]
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	370c      	adds	r7, #12
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cec:	4770      	bx	lr
 8008cee:	bf00      	nop
 8008cf0:	20007bc0 	.word	0x20007bc0

08008cf4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b086      	sub	sp, #24
 8008cf8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008cfe:	4b50      	ldr	r3, [pc, #320]	; (8008e40 <xTaskIncrementTick+0x14c>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	f040 808b 	bne.w	8008e1e <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008d08:	4b4e      	ldr	r3, [pc, #312]	; (8008e44 <xTaskIncrementTick+0x150>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	3301      	adds	r3, #1
 8008d0e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008d10:	4a4c      	ldr	r2, [pc, #304]	; (8008e44 <xTaskIncrementTick+0x150>)
 8008d12:	693b      	ldr	r3, [r7, #16]
 8008d14:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008d16:	693b      	ldr	r3, [r7, #16]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d122      	bne.n	8008d62 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8008d1c:	4b4a      	ldr	r3, [pc, #296]	; (8008e48 <xTaskIncrementTick+0x154>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d00c      	beq.n	8008d40 <xTaskIncrementTick+0x4c>
	__asm volatile
 8008d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d2a:	b672      	cpsid	i
 8008d2c:	f383 8811 	msr	BASEPRI, r3
 8008d30:	f3bf 8f6f 	isb	sy
 8008d34:	f3bf 8f4f 	dsb	sy
 8008d38:	b662      	cpsie	i
 8008d3a:	603b      	str	r3, [r7, #0]
}
 8008d3c:	bf00      	nop
 8008d3e:	e7fe      	b.n	8008d3e <xTaskIncrementTick+0x4a>
 8008d40:	4b41      	ldr	r3, [pc, #260]	; (8008e48 <xTaskIncrementTick+0x154>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	60fb      	str	r3, [r7, #12]
 8008d46:	4b41      	ldr	r3, [pc, #260]	; (8008e4c <xTaskIncrementTick+0x158>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	4a3f      	ldr	r2, [pc, #252]	; (8008e48 <xTaskIncrementTick+0x154>)
 8008d4c:	6013      	str	r3, [r2, #0]
 8008d4e:	4a3f      	ldr	r2, [pc, #252]	; (8008e4c <xTaskIncrementTick+0x158>)
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	6013      	str	r3, [r2, #0]
 8008d54:	4b3e      	ldr	r3, [pc, #248]	; (8008e50 <xTaskIncrementTick+0x15c>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	3301      	adds	r3, #1
 8008d5a:	4a3d      	ldr	r2, [pc, #244]	; (8008e50 <xTaskIncrementTick+0x15c>)
 8008d5c:	6013      	str	r3, [r2, #0]
 8008d5e:	f000 fb11 	bl	8009384 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008d62:	4b3c      	ldr	r3, [pc, #240]	; (8008e54 <xTaskIncrementTick+0x160>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	693a      	ldr	r2, [r7, #16]
 8008d68:	429a      	cmp	r2, r3
 8008d6a:	d349      	bcc.n	8008e00 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d6c:	4b36      	ldr	r3, [pc, #216]	; (8008e48 <xTaskIncrementTick+0x154>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d104      	bne.n	8008d80 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d76:	4b37      	ldr	r3, [pc, #220]	; (8008e54 <xTaskIncrementTick+0x160>)
 8008d78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008d7c:	601a      	str	r2, [r3, #0]
					break;
 8008d7e:	e03f      	b.n	8008e00 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d80:	4b31      	ldr	r3, [pc, #196]	; (8008e48 <xTaskIncrementTick+0x154>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	68db      	ldr	r3, [r3, #12]
 8008d86:	68db      	ldr	r3, [r3, #12]
 8008d88:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008d8a:	68bb      	ldr	r3, [r7, #8]
 8008d8c:	685b      	ldr	r3, [r3, #4]
 8008d8e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008d90:	693a      	ldr	r2, [r7, #16]
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	429a      	cmp	r2, r3
 8008d96:	d203      	bcs.n	8008da0 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008d98:	4a2e      	ldr	r2, [pc, #184]	; (8008e54 <xTaskIncrementTick+0x160>)
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008d9e:	e02f      	b.n	8008e00 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	3304      	adds	r3, #4
 8008da4:	4618      	mov	r0, r3
 8008da6:	f7fe ff49 	bl	8007c3c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d004      	beq.n	8008dbc <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008db2:	68bb      	ldr	r3, [r7, #8]
 8008db4:	3318      	adds	r3, #24
 8008db6:	4618      	mov	r0, r3
 8008db8:	f7fe ff40 	bl	8007c3c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dc0:	4b25      	ldr	r3, [pc, #148]	; (8008e58 <xTaskIncrementTick+0x164>)
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	429a      	cmp	r2, r3
 8008dc6:	d903      	bls.n	8008dd0 <xTaskIncrementTick+0xdc>
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dcc:	4a22      	ldr	r2, [pc, #136]	; (8008e58 <xTaskIncrementTick+0x164>)
 8008dce:	6013      	str	r3, [r2, #0]
 8008dd0:	68bb      	ldr	r3, [r7, #8]
 8008dd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dd4:	4613      	mov	r3, r2
 8008dd6:	009b      	lsls	r3, r3, #2
 8008dd8:	4413      	add	r3, r2
 8008dda:	009b      	lsls	r3, r3, #2
 8008ddc:	4a1f      	ldr	r2, [pc, #124]	; (8008e5c <xTaskIncrementTick+0x168>)
 8008dde:	441a      	add	r2, r3
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	3304      	adds	r3, #4
 8008de4:	4619      	mov	r1, r3
 8008de6:	4610      	mov	r0, r2
 8008de8:	f7fe fecb 	bl	8007b82 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008dec:	68bb      	ldr	r3, [r7, #8]
 8008dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008df0:	4b1b      	ldr	r3, [pc, #108]	; (8008e60 <xTaskIncrementTick+0x16c>)
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008df6:	429a      	cmp	r2, r3
 8008df8:	d3b8      	bcc.n	8008d6c <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008dfe:	e7b5      	b.n	8008d6c <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008e00:	4b17      	ldr	r3, [pc, #92]	; (8008e60 <xTaskIncrementTick+0x16c>)
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e06:	4915      	ldr	r1, [pc, #84]	; (8008e5c <xTaskIncrementTick+0x168>)
 8008e08:	4613      	mov	r3, r2
 8008e0a:	009b      	lsls	r3, r3, #2
 8008e0c:	4413      	add	r3, r2
 8008e0e:	009b      	lsls	r3, r3, #2
 8008e10:	440b      	add	r3, r1
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	2b01      	cmp	r3, #1
 8008e16:	d907      	bls.n	8008e28 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8008e18:	2301      	movs	r3, #1
 8008e1a:	617b      	str	r3, [r7, #20]
 8008e1c:	e004      	b.n	8008e28 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008e1e:	4b11      	ldr	r3, [pc, #68]	; (8008e64 <xTaskIncrementTick+0x170>)
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	3301      	adds	r3, #1
 8008e24:	4a0f      	ldr	r2, [pc, #60]	; (8008e64 <xTaskIncrementTick+0x170>)
 8008e26:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008e28:	4b0f      	ldr	r3, [pc, #60]	; (8008e68 <xTaskIncrementTick+0x174>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d001      	beq.n	8008e34 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8008e30:	2301      	movs	r3, #1
 8008e32:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008e34:	697b      	ldr	r3, [r7, #20]
}
 8008e36:	4618      	mov	r0, r3
 8008e38:	3718      	adds	r7, #24
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}
 8008e3e:	bf00      	nop
 8008e40:	20007be4 	.word	0x20007be4
 8008e44:	20007bc0 	.word	0x20007bc0
 8008e48:	20007b74 	.word	0x20007b74
 8008e4c:	20007b78 	.word	0x20007b78
 8008e50:	20007bd4 	.word	0x20007bd4
 8008e54:	20007bdc 	.word	0x20007bdc
 8008e58:	20007bc4 	.word	0x20007bc4
 8008e5c:	200076ec 	.word	0x200076ec
 8008e60:	200076e8 	.word	0x200076e8
 8008e64:	20007bcc 	.word	0x20007bcc
 8008e68:	20007bd0 	.word	0x20007bd0

08008e6c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b085      	sub	sp, #20
 8008e70:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008e72:	4b2b      	ldr	r3, [pc, #172]	; (8008f20 <vTaskSwitchContext+0xb4>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d003      	beq.n	8008e82 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008e7a:	4b2a      	ldr	r3, [pc, #168]	; (8008f24 <vTaskSwitchContext+0xb8>)
 8008e7c:	2201      	movs	r2, #1
 8008e7e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008e80:	e048      	b.n	8008f14 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 8008e82:	4b28      	ldr	r3, [pc, #160]	; (8008f24 <vTaskSwitchContext+0xb8>)
 8008e84:	2200      	movs	r2, #0
 8008e86:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e88:	4b27      	ldr	r3, [pc, #156]	; (8008f28 <vTaskSwitchContext+0xbc>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	60fb      	str	r3, [r7, #12]
 8008e8e:	e012      	b.n	8008eb6 <vTaskSwitchContext+0x4a>
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d10c      	bne.n	8008eb0 <vTaskSwitchContext+0x44>
	__asm volatile
 8008e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e9a:	b672      	cpsid	i
 8008e9c:	f383 8811 	msr	BASEPRI, r3
 8008ea0:	f3bf 8f6f 	isb	sy
 8008ea4:	f3bf 8f4f 	dsb	sy
 8008ea8:	b662      	cpsie	i
 8008eaa:	607b      	str	r3, [r7, #4]
}
 8008eac:	bf00      	nop
 8008eae:	e7fe      	b.n	8008eae <vTaskSwitchContext+0x42>
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	3b01      	subs	r3, #1
 8008eb4:	60fb      	str	r3, [r7, #12]
 8008eb6:	491d      	ldr	r1, [pc, #116]	; (8008f2c <vTaskSwitchContext+0xc0>)
 8008eb8:	68fa      	ldr	r2, [r7, #12]
 8008eba:	4613      	mov	r3, r2
 8008ebc:	009b      	lsls	r3, r3, #2
 8008ebe:	4413      	add	r3, r2
 8008ec0:	009b      	lsls	r3, r3, #2
 8008ec2:	440b      	add	r3, r1
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d0e2      	beq.n	8008e90 <vTaskSwitchContext+0x24>
 8008eca:	68fa      	ldr	r2, [r7, #12]
 8008ecc:	4613      	mov	r3, r2
 8008ece:	009b      	lsls	r3, r3, #2
 8008ed0:	4413      	add	r3, r2
 8008ed2:	009b      	lsls	r3, r3, #2
 8008ed4:	4a15      	ldr	r2, [pc, #84]	; (8008f2c <vTaskSwitchContext+0xc0>)
 8008ed6:	4413      	add	r3, r2
 8008ed8:	60bb      	str	r3, [r7, #8]
 8008eda:	68bb      	ldr	r3, [r7, #8]
 8008edc:	685b      	ldr	r3, [r3, #4]
 8008ede:	685a      	ldr	r2, [r3, #4]
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	605a      	str	r2, [r3, #4]
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	685a      	ldr	r2, [r3, #4]
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	3308      	adds	r3, #8
 8008eec:	429a      	cmp	r2, r3
 8008eee:	d104      	bne.n	8008efa <vTaskSwitchContext+0x8e>
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	685b      	ldr	r3, [r3, #4]
 8008ef4:	685a      	ldr	r2, [r3, #4]
 8008ef6:	68bb      	ldr	r3, [r7, #8]
 8008ef8:	605a      	str	r2, [r3, #4]
 8008efa:	68bb      	ldr	r3, [r7, #8]
 8008efc:	685b      	ldr	r3, [r3, #4]
 8008efe:	68db      	ldr	r3, [r3, #12]
 8008f00:	4a0b      	ldr	r2, [pc, #44]	; (8008f30 <vTaskSwitchContext+0xc4>)
 8008f02:	6013      	str	r3, [r2, #0]
 8008f04:	4a08      	ldr	r2, [pc, #32]	; (8008f28 <vTaskSwitchContext+0xbc>)
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008f0a:	4b09      	ldr	r3, [pc, #36]	; (8008f30 <vTaskSwitchContext+0xc4>)
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	3354      	adds	r3, #84	; 0x54
 8008f10:	4a08      	ldr	r2, [pc, #32]	; (8008f34 <vTaskSwitchContext+0xc8>)
 8008f12:	6013      	str	r3, [r2, #0]
}
 8008f14:	bf00      	nop
 8008f16:	3714      	adds	r7, #20
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1e:	4770      	bx	lr
 8008f20:	20007be4 	.word	0x20007be4
 8008f24:	20007bd0 	.word	0x20007bd0
 8008f28:	20007bc4 	.word	0x20007bc4
 8008f2c:	200076ec 	.word	0x200076ec
 8008f30:	200076e8 	.word	0x200076e8
 8008f34:	20002138 	.word	0x20002138

08008f38 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b084      	sub	sp, #16
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
 8008f40:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d10c      	bne.n	8008f62 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8008f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f4c:	b672      	cpsid	i
 8008f4e:	f383 8811 	msr	BASEPRI, r3
 8008f52:	f3bf 8f6f 	isb	sy
 8008f56:	f3bf 8f4f 	dsb	sy
 8008f5a:	b662      	cpsie	i
 8008f5c:	60fb      	str	r3, [r7, #12]
}
 8008f5e:	bf00      	nop
 8008f60:	e7fe      	b.n	8008f60 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008f62:	4b07      	ldr	r3, [pc, #28]	; (8008f80 <vTaskPlaceOnEventList+0x48>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	3318      	adds	r3, #24
 8008f68:	4619      	mov	r1, r3
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f7fe fe2d 	bl	8007bca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008f70:	2101      	movs	r1, #1
 8008f72:	6838      	ldr	r0, [r7, #0]
 8008f74:	f000 fab6 	bl	80094e4 <prvAddCurrentTaskToDelayedList>
}
 8008f78:	bf00      	nop
 8008f7a:	3710      	adds	r7, #16
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}
 8008f80:	200076e8 	.word	0x200076e8

08008f84 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b086      	sub	sp, #24
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	60f8      	str	r0, [r7, #12]
 8008f8c:	60b9      	str	r1, [r7, #8]
 8008f8e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d10c      	bne.n	8008fb0 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8008f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f9a:	b672      	cpsid	i
 8008f9c:	f383 8811 	msr	BASEPRI, r3
 8008fa0:	f3bf 8f6f 	isb	sy
 8008fa4:	f3bf 8f4f 	dsb	sy
 8008fa8:	b662      	cpsie	i
 8008faa:	617b      	str	r3, [r7, #20]
}
 8008fac:	bf00      	nop
 8008fae:	e7fe      	b.n	8008fae <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008fb0:	4b0a      	ldr	r3, [pc, #40]	; (8008fdc <vTaskPlaceOnEventListRestricted+0x58>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	3318      	adds	r3, #24
 8008fb6:	4619      	mov	r1, r3
 8008fb8:	68f8      	ldr	r0, [r7, #12]
 8008fba:	f7fe fde2 	bl	8007b82 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d002      	beq.n	8008fca <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8008fc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008fc8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008fca:	6879      	ldr	r1, [r7, #4]
 8008fcc:	68b8      	ldr	r0, [r7, #8]
 8008fce:	f000 fa89 	bl	80094e4 <prvAddCurrentTaskToDelayedList>
	}
 8008fd2:	bf00      	nop
 8008fd4:	3718      	adds	r7, #24
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}
 8008fda:	bf00      	nop
 8008fdc:	200076e8 	.word	0x200076e8

08008fe0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b086      	sub	sp, #24
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	68db      	ldr	r3, [r3, #12]
 8008fec:	68db      	ldr	r3, [r3, #12]
 8008fee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008ff0:	693b      	ldr	r3, [r7, #16]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d10c      	bne.n	8009010 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8008ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ffa:	b672      	cpsid	i
 8008ffc:	f383 8811 	msr	BASEPRI, r3
 8009000:	f3bf 8f6f 	isb	sy
 8009004:	f3bf 8f4f 	dsb	sy
 8009008:	b662      	cpsie	i
 800900a:	60fb      	str	r3, [r7, #12]
}
 800900c:	bf00      	nop
 800900e:	e7fe      	b.n	800900e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009010:	693b      	ldr	r3, [r7, #16]
 8009012:	3318      	adds	r3, #24
 8009014:	4618      	mov	r0, r3
 8009016:	f7fe fe11 	bl	8007c3c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800901a:	4b1e      	ldr	r3, [pc, #120]	; (8009094 <xTaskRemoveFromEventList+0xb4>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d11d      	bne.n	800905e <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009022:	693b      	ldr	r3, [r7, #16]
 8009024:	3304      	adds	r3, #4
 8009026:	4618      	mov	r0, r3
 8009028:	f7fe fe08 	bl	8007c3c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800902c:	693b      	ldr	r3, [r7, #16]
 800902e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009030:	4b19      	ldr	r3, [pc, #100]	; (8009098 <xTaskRemoveFromEventList+0xb8>)
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	429a      	cmp	r2, r3
 8009036:	d903      	bls.n	8009040 <xTaskRemoveFromEventList+0x60>
 8009038:	693b      	ldr	r3, [r7, #16]
 800903a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800903c:	4a16      	ldr	r2, [pc, #88]	; (8009098 <xTaskRemoveFromEventList+0xb8>)
 800903e:	6013      	str	r3, [r2, #0]
 8009040:	693b      	ldr	r3, [r7, #16]
 8009042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009044:	4613      	mov	r3, r2
 8009046:	009b      	lsls	r3, r3, #2
 8009048:	4413      	add	r3, r2
 800904a:	009b      	lsls	r3, r3, #2
 800904c:	4a13      	ldr	r2, [pc, #76]	; (800909c <xTaskRemoveFromEventList+0xbc>)
 800904e:	441a      	add	r2, r3
 8009050:	693b      	ldr	r3, [r7, #16]
 8009052:	3304      	adds	r3, #4
 8009054:	4619      	mov	r1, r3
 8009056:	4610      	mov	r0, r2
 8009058:	f7fe fd93 	bl	8007b82 <vListInsertEnd>
 800905c:	e005      	b.n	800906a <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800905e:	693b      	ldr	r3, [r7, #16]
 8009060:	3318      	adds	r3, #24
 8009062:	4619      	mov	r1, r3
 8009064:	480e      	ldr	r0, [pc, #56]	; (80090a0 <xTaskRemoveFromEventList+0xc0>)
 8009066:	f7fe fd8c 	bl	8007b82 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800906a:	693b      	ldr	r3, [r7, #16]
 800906c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800906e:	4b0d      	ldr	r3, [pc, #52]	; (80090a4 <xTaskRemoveFromEventList+0xc4>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009074:	429a      	cmp	r2, r3
 8009076:	d905      	bls.n	8009084 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009078:	2301      	movs	r3, #1
 800907a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800907c:	4b0a      	ldr	r3, [pc, #40]	; (80090a8 <xTaskRemoveFromEventList+0xc8>)
 800907e:	2201      	movs	r2, #1
 8009080:	601a      	str	r2, [r3, #0]
 8009082:	e001      	b.n	8009088 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8009084:	2300      	movs	r3, #0
 8009086:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009088:	697b      	ldr	r3, [r7, #20]
}
 800908a:	4618      	mov	r0, r3
 800908c:	3718      	adds	r7, #24
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}
 8009092:	bf00      	nop
 8009094:	20007be4 	.word	0x20007be4
 8009098:	20007bc4 	.word	0x20007bc4
 800909c:	200076ec 	.word	0x200076ec
 80090a0:	20007b7c 	.word	0x20007b7c
 80090a4:	200076e8 	.word	0x200076e8
 80090a8:	20007bd0 	.word	0x20007bd0

080090ac <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b084      	sub	sp, #16
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d10c      	bne.n	80090d4 <vTaskSetTimeOutState+0x28>
	__asm volatile
 80090ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090be:	b672      	cpsid	i
 80090c0:	f383 8811 	msr	BASEPRI, r3
 80090c4:	f3bf 8f6f 	isb	sy
 80090c8:	f3bf 8f4f 	dsb	sy
 80090cc:	b662      	cpsie	i
 80090ce:	60fb      	str	r3, [r7, #12]
}
 80090d0:	bf00      	nop
 80090d2:	e7fe      	b.n	80090d2 <vTaskSetTimeOutState+0x26>
	taskENTER_CRITICAL();
 80090d4:	f000 fec2 	bl	8009e5c <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 80090d8:	4b06      	ldr	r3, [pc, #24]	; (80090f4 <vTaskSetTimeOutState+0x48>)
 80090da:	681a      	ldr	r2, [r3, #0]
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 80090e0:	4b05      	ldr	r3, [pc, #20]	; (80090f8 <vTaskSetTimeOutState+0x4c>)
 80090e2:	681a      	ldr	r2, [r3, #0]
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 80090e8:	f000 feec 	bl	8009ec4 <vPortExitCritical>
}
 80090ec:	bf00      	nop
 80090ee:	3710      	adds	r7, #16
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd80      	pop	{r7, pc}
 80090f4:	20007bd4 	.word	0x20007bd4
 80090f8:	20007bc0 	.word	0x20007bc0

080090fc <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80090fc:	b480      	push	{r7}
 80090fe:	b083      	sub	sp, #12
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009104:	4b06      	ldr	r3, [pc, #24]	; (8009120 <vTaskInternalSetTimeOutState+0x24>)
 8009106:	681a      	ldr	r2, [r3, #0]
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800910c:	4b05      	ldr	r3, [pc, #20]	; (8009124 <vTaskInternalSetTimeOutState+0x28>)
 800910e:	681a      	ldr	r2, [r3, #0]
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	605a      	str	r2, [r3, #4]
}
 8009114:	bf00      	nop
 8009116:	370c      	adds	r7, #12
 8009118:	46bd      	mov	sp, r7
 800911a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911e:	4770      	bx	lr
 8009120:	20007bd4 	.word	0x20007bd4
 8009124:	20007bc0 	.word	0x20007bc0

08009128 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b088      	sub	sp, #32
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
 8009130:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d10c      	bne.n	8009152 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8009138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800913c:	b672      	cpsid	i
 800913e:	f383 8811 	msr	BASEPRI, r3
 8009142:	f3bf 8f6f 	isb	sy
 8009146:	f3bf 8f4f 	dsb	sy
 800914a:	b662      	cpsie	i
 800914c:	613b      	str	r3, [r7, #16]
}
 800914e:	bf00      	nop
 8009150:	e7fe      	b.n	8009150 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d10c      	bne.n	8009172 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8009158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800915c:	b672      	cpsid	i
 800915e:	f383 8811 	msr	BASEPRI, r3
 8009162:	f3bf 8f6f 	isb	sy
 8009166:	f3bf 8f4f 	dsb	sy
 800916a:	b662      	cpsie	i
 800916c:	60fb      	str	r3, [r7, #12]
}
 800916e:	bf00      	nop
 8009170:	e7fe      	b.n	8009170 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8009172:	f000 fe73 	bl	8009e5c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009176:	4b1d      	ldr	r3, [pc, #116]	; (80091ec <xTaskCheckForTimeOut+0xc4>)
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	685b      	ldr	r3, [r3, #4]
 8009180:	69ba      	ldr	r2, [r7, #24]
 8009182:	1ad3      	subs	r3, r2, r3
 8009184:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800918e:	d102      	bne.n	8009196 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009190:	2300      	movs	r3, #0
 8009192:	61fb      	str	r3, [r7, #28]
 8009194:	e023      	b.n	80091de <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681a      	ldr	r2, [r3, #0]
 800919a:	4b15      	ldr	r3, [pc, #84]	; (80091f0 <xTaskCheckForTimeOut+0xc8>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	429a      	cmp	r2, r3
 80091a0:	d007      	beq.n	80091b2 <xTaskCheckForTimeOut+0x8a>
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	685b      	ldr	r3, [r3, #4]
 80091a6:	69ba      	ldr	r2, [r7, #24]
 80091a8:	429a      	cmp	r2, r3
 80091aa:	d302      	bcc.n	80091b2 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80091ac:	2301      	movs	r3, #1
 80091ae:	61fb      	str	r3, [r7, #28]
 80091b0:	e015      	b.n	80091de <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	697a      	ldr	r2, [r7, #20]
 80091b8:	429a      	cmp	r2, r3
 80091ba:	d20b      	bcs.n	80091d4 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	681a      	ldr	r2, [r3, #0]
 80091c0:	697b      	ldr	r3, [r7, #20]
 80091c2:	1ad2      	subs	r2, r2, r3
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	f7ff ff97 	bl	80090fc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80091ce:	2300      	movs	r3, #0
 80091d0:	61fb      	str	r3, [r7, #28]
 80091d2:	e004      	b.n	80091de <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	2200      	movs	r2, #0
 80091d8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80091da:	2301      	movs	r3, #1
 80091dc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80091de:	f000 fe71 	bl	8009ec4 <vPortExitCritical>

	return xReturn;
 80091e2:	69fb      	ldr	r3, [r7, #28]
}
 80091e4:	4618      	mov	r0, r3
 80091e6:	3720      	adds	r7, #32
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd80      	pop	{r7, pc}
 80091ec:	20007bc0 	.word	0x20007bc0
 80091f0:	20007bd4 	.word	0x20007bd4

080091f4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80091f4:	b480      	push	{r7}
 80091f6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80091f8:	4b03      	ldr	r3, [pc, #12]	; (8009208 <vTaskMissedYield+0x14>)
 80091fa:	2201      	movs	r2, #1
 80091fc:	601a      	str	r2, [r3, #0]
}
 80091fe:	bf00      	nop
 8009200:	46bd      	mov	sp, r7
 8009202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009206:	4770      	bx	lr
 8009208:	20007bd0 	.word	0x20007bd0

0800920c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b082      	sub	sp, #8
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009214:	f000 f852 	bl	80092bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009218:	4b06      	ldr	r3, [pc, #24]	; (8009234 <prvIdleTask+0x28>)
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	2b01      	cmp	r3, #1
 800921e:	d9f9      	bls.n	8009214 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009220:	4b05      	ldr	r3, [pc, #20]	; (8009238 <prvIdleTask+0x2c>)
 8009222:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009226:	601a      	str	r2, [r3, #0]
 8009228:	f3bf 8f4f 	dsb	sy
 800922c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009230:	e7f0      	b.n	8009214 <prvIdleTask+0x8>
 8009232:	bf00      	nop
 8009234:	200076ec 	.word	0x200076ec
 8009238:	e000ed04 	.word	0xe000ed04

0800923c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b082      	sub	sp, #8
 8009240:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009242:	2300      	movs	r3, #0
 8009244:	607b      	str	r3, [r7, #4]
 8009246:	e00c      	b.n	8009262 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009248:	687a      	ldr	r2, [r7, #4]
 800924a:	4613      	mov	r3, r2
 800924c:	009b      	lsls	r3, r3, #2
 800924e:	4413      	add	r3, r2
 8009250:	009b      	lsls	r3, r3, #2
 8009252:	4a12      	ldr	r2, [pc, #72]	; (800929c <prvInitialiseTaskLists+0x60>)
 8009254:	4413      	add	r3, r2
 8009256:	4618      	mov	r0, r3
 8009258:	f7fe fc66 	bl	8007b28 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	3301      	adds	r3, #1
 8009260:	607b      	str	r3, [r7, #4]
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2b37      	cmp	r3, #55	; 0x37
 8009266:	d9ef      	bls.n	8009248 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009268:	480d      	ldr	r0, [pc, #52]	; (80092a0 <prvInitialiseTaskLists+0x64>)
 800926a:	f7fe fc5d 	bl	8007b28 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800926e:	480d      	ldr	r0, [pc, #52]	; (80092a4 <prvInitialiseTaskLists+0x68>)
 8009270:	f7fe fc5a 	bl	8007b28 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009274:	480c      	ldr	r0, [pc, #48]	; (80092a8 <prvInitialiseTaskLists+0x6c>)
 8009276:	f7fe fc57 	bl	8007b28 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800927a:	480c      	ldr	r0, [pc, #48]	; (80092ac <prvInitialiseTaskLists+0x70>)
 800927c:	f7fe fc54 	bl	8007b28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009280:	480b      	ldr	r0, [pc, #44]	; (80092b0 <prvInitialiseTaskLists+0x74>)
 8009282:	f7fe fc51 	bl	8007b28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009286:	4b0b      	ldr	r3, [pc, #44]	; (80092b4 <prvInitialiseTaskLists+0x78>)
 8009288:	4a05      	ldr	r2, [pc, #20]	; (80092a0 <prvInitialiseTaskLists+0x64>)
 800928a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800928c:	4b0a      	ldr	r3, [pc, #40]	; (80092b8 <prvInitialiseTaskLists+0x7c>)
 800928e:	4a05      	ldr	r2, [pc, #20]	; (80092a4 <prvInitialiseTaskLists+0x68>)
 8009290:	601a      	str	r2, [r3, #0]
}
 8009292:	bf00      	nop
 8009294:	3708      	adds	r7, #8
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}
 800929a:	bf00      	nop
 800929c:	200076ec 	.word	0x200076ec
 80092a0:	20007b4c 	.word	0x20007b4c
 80092a4:	20007b60 	.word	0x20007b60
 80092a8:	20007b7c 	.word	0x20007b7c
 80092ac:	20007b90 	.word	0x20007b90
 80092b0:	20007ba8 	.word	0x20007ba8
 80092b4:	20007b74 	.word	0x20007b74
 80092b8:	20007b78 	.word	0x20007b78

080092bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b082      	sub	sp, #8
 80092c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80092c2:	e019      	b.n	80092f8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80092c4:	f000 fdca 	bl	8009e5c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092c8:	4b10      	ldr	r3, [pc, #64]	; (800930c <prvCheckTasksWaitingTermination+0x50>)
 80092ca:	68db      	ldr	r3, [r3, #12]
 80092cc:	68db      	ldr	r3, [r3, #12]
 80092ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	3304      	adds	r3, #4
 80092d4:	4618      	mov	r0, r3
 80092d6:	f7fe fcb1 	bl	8007c3c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80092da:	4b0d      	ldr	r3, [pc, #52]	; (8009310 <prvCheckTasksWaitingTermination+0x54>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	3b01      	subs	r3, #1
 80092e0:	4a0b      	ldr	r2, [pc, #44]	; (8009310 <prvCheckTasksWaitingTermination+0x54>)
 80092e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80092e4:	4b0b      	ldr	r3, [pc, #44]	; (8009314 <prvCheckTasksWaitingTermination+0x58>)
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	3b01      	subs	r3, #1
 80092ea:	4a0a      	ldr	r2, [pc, #40]	; (8009314 <prvCheckTasksWaitingTermination+0x58>)
 80092ec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80092ee:	f000 fde9 	bl	8009ec4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f000 f810 	bl	8009318 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80092f8:	4b06      	ldr	r3, [pc, #24]	; (8009314 <prvCheckTasksWaitingTermination+0x58>)
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d1e1      	bne.n	80092c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009300:	bf00      	nop
 8009302:	bf00      	nop
 8009304:	3708      	adds	r7, #8
 8009306:	46bd      	mov	sp, r7
 8009308:	bd80      	pop	{r7, pc}
 800930a:	bf00      	nop
 800930c:	20007b90 	.word	0x20007b90
 8009310:	20007bbc 	.word	0x20007bbc
 8009314:	20007ba4 	.word	0x20007ba4

08009318 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009318:	b580      	push	{r7, lr}
 800931a:	b084      	sub	sp, #16
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	3354      	adds	r3, #84	; 0x54
 8009324:	4618      	mov	r0, r3
 8009326:	f010 f9fd 	bl	8019724 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8009330:	2b00      	cmp	r3, #0
 8009332:	d108      	bne.n	8009346 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009338:	4618      	mov	r0, r3
 800933a:	f000 ff85 	bl	800a248 <vPortFree>
				vPortFree( pxTCB );
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	f000 ff82 	bl	800a248 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009344:	e01a      	b.n	800937c <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800934c:	2b01      	cmp	r3, #1
 800934e:	d103      	bne.n	8009358 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f000 ff79 	bl	800a248 <vPortFree>
	}
 8009356:	e011      	b.n	800937c <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800935e:	2b02      	cmp	r3, #2
 8009360:	d00c      	beq.n	800937c <prvDeleteTCB+0x64>
	__asm volatile
 8009362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009366:	b672      	cpsid	i
 8009368:	f383 8811 	msr	BASEPRI, r3
 800936c:	f3bf 8f6f 	isb	sy
 8009370:	f3bf 8f4f 	dsb	sy
 8009374:	b662      	cpsie	i
 8009376:	60fb      	str	r3, [r7, #12]
}
 8009378:	bf00      	nop
 800937a:	e7fe      	b.n	800937a <prvDeleteTCB+0x62>
	}
 800937c:	bf00      	nop
 800937e:	3710      	adds	r7, #16
 8009380:	46bd      	mov	sp, r7
 8009382:	bd80      	pop	{r7, pc}

08009384 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009384:	b480      	push	{r7}
 8009386:	b083      	sub	sp, #12
 8009388:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800938a:	4b0c      	ldr	r3, [pc, #48]	; (80093bc <prvResetNextTaskUnblockTime+0x38>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d104      	bne.n	800939e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009394:	4b0a      	ldr	r3, [pc, #40]	; (80093c0 <prvResetNextTaskUnblockTime+0x3c>)
 8009396:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800939a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800939c:	e008      	b.n	80093b0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800939e:	4b07      	ldr	r3, [pc, #28]	; (80093bc <prvResetNextTaskUnblockTime+0x38>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	68db      	ldr	r3, [r3, #12]
 80093a4:	68db      	ldr	r3, [r3, #12]
 80093a6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	685b      	ldr	r3, [r3, #4]
 80093ac:	4a04      	ldr	r2, [pc, #16]	; (80093c0 <prvResetNextTaskUnblockTime+0x3c>)
 80093ae:	6013      	str	r3, [r2, #0]
}
 80093b0:	bf00      	nop
 80093b2:	370c      	adds	r7, #12
 80093b4:	46bd      	mov	sp, r7
 80093b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ba:	4770      	bx	lr
 80093bc:	20007b74 	.word	0x20007b74
 80093c0:	20007bdc 	.word	0x20007bdc

080093c4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80093c4:	b480      	push	{r7}
 80093c6:	b083      	sub	sp, #12
 80093c8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80093ca:	4b0b      	ldr	r3, [pc, #44]	; (80093f8 <xTaskGetSchedulerState+0x34>)
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d102      	bne.n	80093d8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80093d2:	2301      	movs	r3, #1
 80093d4:	607b      	str	r3, [r7, #4]
 80093d6:	e008      	b.n	80093ea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80093d8:	4b08      	ldr	r3, [pc, #32]	; (80093fc <xTaskGetSchedulerState+0x38>)
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d102      	bne.n	80093e6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80093e0:	2302      	movs	r3, #2
 80093e2:	607b      	str	r3, [r7, #4]
 80093e4:	e001      	b.n	80093ea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80093e6:	2300      	movs	r3, #0
 80093e8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80093ea:	687b      	ldr	r3, [r7, #4]
	}
 80093ec:	4618      	mov	r0, r3
 80093ee:	370c      	adds	r7, #12
 80093f0:	46bd      	mov	sp, r7
 80093f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f6:	4770      	bx	lr
 80093f8:	20007bc8 	.word	0x20007bc8
 80093fc:	20007be4 	.word	0x20007be4

08009400 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009400:	b580      	push	{r7, lr}
 8009402:	b086      	sub	sp, #24
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800940c:	2300      	movs	r3, #0
 800940e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d05a      	beq.n	80094cc <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009416:	4b30      	ldr	r3, [pc, #192]	; (80094d8 <xTaskPriorityDisinherit+0xd8>)
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	693a      	ldr	r2, [r7, #16]
 800941c:	429a      	cmp	r2, r3
 800941e:	d00c      	beq.n	800943a <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8009420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009424:	b672      	cpsid	i
 8009426:	f383 8811 	msr	BASEPRI, r3
 800942a:	f3bf 8f6f 	isb	sy
 800942e:	f3bf 8f4f 	dsb	sy
 8009432:	b662      	cpsie	i
 8009434:	60fb      	str	r3, [r7, #12]
}
 8009436:	bf00      	nop
 8009438:	e7fe      	b.n	8009438 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800943a:	693b      	ldr	r3, [r7, #16]
 800943c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800943e:	2b00      	cmp	r3, #0
 8009440:	d10c      	bne.n	800945c <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8009442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009446:	b672      	cpsid	i
 8009448:	f383 8811 	msr	BASEPRI, r3
 800944c:	f3bf 8f6f 	isb	sy
 8009450:	f3bf 8f4f 	dsb	sy
 8009454:	b662      	cpsie	i
 8009456:	60bb      	str	r3, [r7, #8]
}
 8009458:	bf00      	nop
 800945a:	e7fe      	b.n	800945a <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800945c:	693b      	ldr	r3, [r7, #16]
 800945e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009460:	1e5a      	subs	r2, r3, #1
 8009462:	693b      	ldr	r3, [r7, #16]
 8009464:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009466:	693b      	ldr	r3, [r7, #16]
 8009468:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800946a:	693b      	ldr	r3, [r7, #16]
 800946c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800946e:	429a      	cmp	r2, r3
 8009470:	d02c      	beq.n	80094cc <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009472:	693b      	ldr	r3, [r7, #16]
 8009474:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009476:	2b00      	cmp	r3, #0
 8009478:	d128      	bne.n	80094cc <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800947a:	693b      	ldr	r3, [r7, #16]
 800947c:	3304      	adds	r3, #4
 800947e:	4618      	mov	r0, r3
 8009480:	f7fe fbdc 	bl	8007c3c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009484:	693b      	ldr	r3, [r7, #16]
 8009486:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009488:	693b      	ldr	r3, [r7, #16]
 800948a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800948c:	693b      	ldr	r3, [r7, #16]
 800948e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009490:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009494:	693b      	ldr	r3, [r7, #16]
 8009496:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009498:	693b      	ldr	r3, [r7, #16]
 800949a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800949c:	4b0f      	ldr	r3, [pc, #60]	; (80094dc <xTaskPriorityDisinherit+0xdc>)
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	429a      	cmp	r2, r3
 80094a2:	d903      	bls.n	80094ac <xTaskPriorityDisinherit+0xac>
 80094a4:	693b      	ldr	r3, [r7, #16]
 80094a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094a8:	4a0c      	ldr	r2, [pc, #48]	; (80094dc <xTaskPriorityDisinherit+0xdc>)
 80094aa:	6013      	str	r3, [r2, #0]
 80094ac:	693b      	ldr	r3, [r7, #16]
 80094ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094b0:	4613      	mov	r3, r2
 80094b2:	009b      	lsls	r3, r3, #2
 80094b4:	4413      	add	r3, r2
 80094b6:	009b      	lsls	r3, r3, #2
 80094b8:	4a09      	ldr	r2, [pc, #36]	; (80094e0 <xTaskPriorityDisinherit+0xe0>)
 80094ba:	441a      	add	r2, r3
 80094bc:	693b      	ldr	r3, [r7, #16]
 80094be:	3304      	adds	r3, #4
 80094c0:	4619      	mov	r1, r3
 80094c2:	4610      	mov	r0, r2
 80094c4:	f7fe fb5d 	bl	8007b82 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80094c8:	2301      	movs	r3, #1
 80094ca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80094cc:	697b      	ldr	r3, [r7, #20]
	}
 80094ce:	4618      	mov	r0, r3
 80094d0:	3718      	adds	r7, #24
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}
 80094d6:	bf00      	nop
 80094d8:	200076e8 	.word	0x200076e8
 80094dc:	20007bc4 	.word	0x20007bc4
 80094e0:	200076ec 	.word	0x200076ec

080094e4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b084      	sub	sp, #16
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
 80094ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80094ee:	4b21      	ldr	r3, [pc, #132]	; (8009574 <prvAddCurrentTaskToDelayedList+0x90>)
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80094f4:	4b20      	ldr	r3, [pc, #128]	; (8009578 <prvAddCurrentTaskToDelayedList+0x94>)
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	3304      	adds	r3, #4
 80094fa:	4618      	mov	r0, r3
 80094fc:	f7fe fb9e 	bl	8007c3c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009506:	d10a      	bne.n	800951e <prvAddCurrentTaskToDelayedList+0x3a>
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d007      	beq.n	800951e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800950e:	4b1a      	ldr	r3, [pc, #104]	; (8009578 <prvAddCurrentTaskToDelayedList+0x94>)
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	3304      	adds	r3, #4
 8009514:	4619      	mov	r1, r3
 8009516:	4819      	ldr	r0, [pc, #100]	; (800957c <prvAddCurrentTaskToDelayedList+0x98>)
 8009518:	f7fe fb33 	bl	8007b82 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800951c:	e026      	b.n	800956c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800951e:	68fa      	ldr	r2, [r7, #12]
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	4413      	add	r3, r2
 8009524:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009526:	4b14      	ldr	r3, [pc, #80]	; (8009578 <prvAddCurrentTaskToDelayedList+0x94>)
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	68ba      	ldr	r2, [r7, #8]
 800952c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800952e:	68ba      	ldr	r2, [r7, #8]
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	429a      	cmp	r2, r3
 8009534:	d209      	bcs.n	800954a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009536:	4b12      	ldr	r3, [pc, #72]	; (8009580 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009538:	681a      	ldr	r2, [r3, #0]
 800953a:	4b0f      	ldr	r3, [pc, #60]	; (8009578 <prvAddCurrentTaskToDelayedList+0x94>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	3304      	adds	r3, #4
 8009540:	4619      	mov	r1, r3
 8009542:	4610      	mov	r0, r2
 8009544:	f7fe fb41 	bl	8007bca <vListInsert>
}
 8009548:	e010      	b.n	800956c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800954a:	4b0e      	ldr	r3, [pc, #56]	; (8009584 <prvAddCurrentTaskToDelayedList+0xa0>)
 800954c:	681a      	ldr	r2, [r3, #0]
 800954e:	4b0a      	ldr	r3, [pc, #40]	; (8009578 <prvAddCurrentTaskToDelayedList+0x94>)
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	3304      	adds	r3, #4
 8009554:	4619      	mov	r1, r3
 8009556:	4610      	mov	r0, r2
 8009558:	f7fe fb37 	bl	8007bca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800955c:	4b0a      	ldr	r3, [pc, #40]	; (8009588 <prvAddCurrentTaskToDelayedList+0xa4>)
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	68ba      	ldr	r2, [r7, #8]
 8009562:	429a      	cmp	r2, r3
 8009564:	d202      	bcs.n	800956c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009566:	4a08      	ldr	r2, [pc, #32]	; (8009588 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009568:	68bb      	ldr	r3, [r7, #8]
 800956a:	6013      	str	r3, [r2, #0]
}
 800956c:	bf00      	nop
 800956e:	3710      	adds	r7, #16
 8009570:	46bd      	mov	sp, r7
 8009572:	bd80      	pop	{r7, pc}
 8009574:	20007bc0 	.word	0x20007bc0
 8009578:	200076e8 	.word	0x200076e8
 800957c:	20007ba8 	.word	0x20007ba8
 8009580:	20007b78 	.word	0x20007b78
 8009584:	20007b74 	.word	0x20007b74
 8009588:	20007bdc 	.word	0x20007bdc

0800958c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b08a      	sub	sp, #40	; 0x28
 8009590:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009592:	2300      	movs	r3, #0
 8009594:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009596:	f000 fb15 	bl	8009bc4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800959a:	4b1d      	ldr	r3, [pc, #116]	; (8009610 <xTimerCreateTimerTask+0x84>)
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d021      	beq.n	80095e6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80095a2:	2300      	movs	r3, #0
 80095a4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80095a6:	2300      	movs	r3, #0
 80095a8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80095aa:	1d3a      	adds	r2, r7, #4
 80095ac:	f107 0108 	add.w	r1, r7, #8
 80095b0:	f107 030c 	add.w	r3, r7, #12
 80095b4:	4618      	mov	r0, r3
 80095b6:	f7fe fa9d 	bl	8007af4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80095ba:	6879      	ldr	r1, [r7, #4]
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	68fa      	ldr	r2, [r7, #12]
 80095c0:	9202      	str	r2, [sp, #8]
 80095c2:	9301      	str	r3, [sp, #4]
 80095c4:	2302      	movs	r3, #2
 80095c6:	9300      	str	r3, [sp, #0]
 80095c8:	2300      	movs	r3, #0
 80095ca:	460a      	mov	r2, r1
 80095cc:	4911      	ldr	r1, [pc, #68]	; (8009614 <xTimerCreateTimerTask+0x88>)
 80095ce:	4812      	ldr	r0, [pc, #72]	; (8009618 <xTimerCreateTimerTask+0x8c>)
 80095d0:	f7ff f868 	bl	80086a4 <xTaskCreateStatic>
 80095d4:	4603      	mov	r3, r0
 80095d6:	4a11      	ldr	r2, [pc, #68]	; (800961c <xTimerCreateTimerTask+0x90>)
 80095d8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80095da:	4b10      	ldr	r3, [pc, #64]	; (800961c <xTimerCreateTimerTask+0x90>)
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d001      	beq.n	80095e6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80095e2:	2301      	movs	r3, #1
 80095e4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80095e6:	697b      	ldr	r3, [r7, #20]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d10c      	bne.n	8009606 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 80095ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095f0:	b672      	cpsid	i
 80095f2:	f383 8811 	msr	BASEPRI, r3
 80095f6:	f3bf 8f6f 	isb	sy
 80095fa:	f3bf 8f4f 	dsb	sy
 80095fe:	b662      	cpsie	i
 8009600:	613b      	str	r3, [r7, #16]
}
 8009602:	bf00      	nop
 8009604:	e7fe      	b.n	8009604 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8009606:	697b      	ldr	r3, [r7, #20]
}
 8009608:	4618      	mov	r0, r3
 800960a:	3718      	adds	r7, #24
 800960c:	46bd      	mov	sp, r7
 800960e:	bd80      	pop	{r7, pc}
 8009610:	20007c18 	.word	0x20007c18
 8009614:	0801a668 	.word	0x0801a668
 8009618:	0800975d 	.word	0x0800975d
 800961c:	20007c1c 	.word	0x20007c1c

08009620 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b08a      	sub	sp, #40	; 0x28
 8009624:	af00      	add	r7, sp, #0
 8009626:	60f8      	str	r0, [r7, #12]
 8009628:	60b9      	str	r1, [r7, #8]
 800962a:	607a      	str	r2, [r7, #4]
 800962c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800962e:	2300      	movs	r3, #0
 8009630:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d10c      	bne.n	8009652 <xTimerGenericCommand+0x32>
	__asm volatile
 8009638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800963c:	b672      	cpsid	i
 800963e:	f383 8811 	msr	BASEPRI, r3
 8009642:	f3bf 8f6f 	isb	sy
 8009646:	f3bf 8f4f 	dsb	sy
 800964a:	b662      	cpsie	i
 800964c:	623b      	str	r3, [r7, #32]
}
 800964e:	bf00      	nop
 8009650:	e7fe      	b.n	8009650 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009652:	4b1a      	ldr	r3, [pc, #104]	; (80096bc <xTimerGenericCommand+0x9c>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d02a      	beq.n	80096b0 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800965a:	68bb      	ldr	r3, [r7, #8]
 800965c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009666:	68bb      	ldr	r3, [r7, #8]
 8009668:	2b05      	cmp	r3, #5
 800966a:	dc18      	bgt.n	800969e <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800966c:	f7ff feaa 	bl	80093c4 <xTaskGetSchedulerState>
 8009670:	4603      	mov	r3, r0
 8009672:	2b02      	cmp	r3, #2
 8009674:	d109      	bne.n	800968a <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009676:	4b11      	ldr	r3, [pc, #68]	; (80096bc <xTimerGenericCommand+0x9c>)
 8009678:	6818      	ldr	r0, [r3, #0]
 800967a:	f107 0110 	add.w	r1, r7, #16
 800967e:	2300      	movs	r3, #0
 8009680:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009682:	f7fe fc15 	bl	8007eb0 <xQueueGenericSend>
 8009686:	6278      	str	r0, [r7, #36]	; 0x24
 8009688:	e012      	b.n	80096b0 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800968a:	4b0c      	ldr	r3, [pc, #48]	; (80096bc <xTimerGenericCommand+0x9c>)
 800968c:	6818      	ldr	r0, [r3, #0]
 800968e:	f107 0110 	add.w	r1, r7, #16
 8009692:	2300      	movs	r3, #0
 8009694:	2200      	movs	r2, #0
 8009696:	f7fe fc0b 	bl	8007eb0 <xQueueGenericSend>
 800969a:	6278      	str	r0, [r7, #36]	; 0x24
 800969c:	e008      	b.n	80096b0 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800969e:	4b07      	ldr	r3, [pc, #28]	; (80096bc <xTimerGenericCommand+0x9c>)
 80096a0:	6818      	ldr	r0, [r3, #0]
 80096a2:	f107 0110 	add.w	r1, r7, #16
 80096a6:	2300      	movs	r3, #0
 80096a8:	683a      	ldr	r2, [r7, #0]
 80096aa:	f7fe fd07 	bl	80080bc <xQueueGenericSendFromISR>
 80096ae:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80096b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80096b2:	4618      	mov	r0, r3
 80096b4:	3728      	adds	r7, #40	; 0x28
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}
 80096ba:	bf00      	nop
 80096bc:	20007c18 	.word	0x20007c18

080096c0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b088      	sub	sp, #32
 80096c4:	af02      	add	r7, sp, #8
 80096c6:	6078      	str	r0, [r7, #4]
 80096c8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096ca:	4b23      	ldr	r3, [pc, #140]	; (8009758 <prvProcessExpiredTimer+0x98>)
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	68db      	ldr	r3, [r3, #12]
 80096d0:	68db      	ldr	r3, [r3, #12]
 80096d2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80096d4:	697b      	ldr	r3, [r7, #20]
 80096d6:	3304      	adds	r3, #4
 80096d8:	4618      	mov	r0, r3
 80096da:	f7fe faaf 	bl	8007c3c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80096de:	697b      	ldr	r3, [r7, #20]
 80096e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80096e4:	f003 0304 	and.w	r3, r3, #4
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d024      	beq.n	8009736 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80096ec:	697b      	ldr	r3, [r7, #20]
 80096ee:	699a      	ldr	r2, [r3, #24]
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	18d1      	adds	r1, r2, r3
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	683a      	ldr	r2, [r7, #0]
 80096f8:	6978      	ldr	r0, [r7, #20]
 80096fa:	f000 f8d3 	bl	80098a4 <prvInsertTimerInActiveList>
 80096fe:	4603      	mov	r3, r0
 8009700:	2b00      	cmp	r3, #0
 8009702:	d021      	beq.n	8009748 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009704:	2300      	movs	r3, #0
 8009706:	9300      	str	r3, [sp, #0]
 8009708:	2300      	movs	r3, #0
 800970a:	687a      	ldr	r2, [r7, #4]
 800970c:	2100      	movs	r1, #0
 800970e:	6978      	ldr	r0, [r7, #20]
 8009710:	f7ff ff86 	bl	8009620 <xTimerGenericCommand>
 8009714:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009716:	693b      	ldr	r3, [r7, #16]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d115      	bne.n	8009748 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800971c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009720:	b672      	cpsid	i
 8009722:	f383 8811 	msr	BASEPRI, r3
 8009726:	f3bf 8f6f 	isb	sy
 800972a:	f3bf 8f4f 	dsb	sy
 800972e:	b662      	cpsie	i
 8009730:	60fb      	str	r3, [r7, #12]
}
 8009732:	bf00      	nop
 8009734:	e7fe      	b.n	8009734 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009736:	697b      	ldr	r3, [r7, #20]
 8009738:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800973c:	f023 0301 	bic.w	r3, r3, #1
 8009740:	b2da      	uxtb	r2, r3
 8009742:	697b      	ldr	r3, [r7, #20]
 8009744:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009748:	697b      	ldr	r3, [r7, #20]
 800974a:	6a1b      	ldr	r3, [r3, #32]
 800974c:	6978      	ldr	r0, [r7, #20]
 800974e:	4798      	blx	r3
}
 8009750:	bf00      	nop
 8009752:	3718      	adds	r7, #24
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}
 8009758:	20007c10 	.word	0x20007c10

0800975c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b084      	sub	sp, #16
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009764:	f107 0308 	add.w	r3, r7, #8
 8009768:	4618      	mov	r0, r3
 800976a:	f000 f857 	bl	800981c <prvGetNextExpireTime>
 800976e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009770:	68bb      	ldr	r3, [r7, #8]
 8009772:	4619      	mov	r1, r3
 8009774:	68f8      	ldr	r0, [r7, #12]
 8009776:	f000 f803 	bl	8009780 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800977a:	f000 f8d5 	bl	8009928 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800977e:	e7f1      	b.n	8009764 <prvTimerTask+0x8>

08009780 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b084      	sub	sp, #16
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
 8009788:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800978a:	f7ff f9f5 	bl	8008b78 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800978e:	f107 0308 	add.w	r3, r7, #8
 8009792:	4618      	mov	r0, r3
 8009794:	f000 f866 	bl	8009864 <prvSampleTimeNow>
 8009798:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800979a:	68bb      	ldr	r3, [r7, #8]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d130      	bne.n	8009802 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d10a      	bne.n	80097bc <prvProcessTimerOrBlockTask+0x3c>
 80097a6:	687a      	ldr	r2, [r7, #4]
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	429a      	cmp	r2, r3
 80097ac:	d806      	bhi.n	80097bc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80097ae:	f7ff f9f1 	bl	8008b94 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80097b2:	68f9      	ldr	r1, [r7, #12]
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f7ff ff83 	bl	80096c0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80097ba:	e024      	b.n	8009806 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d008      	beq.n	80097d4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80097c2:	4b13      	ldr	r3, [pc, #76]	; (8009810 <prvProcessTimerOrBlockTask+0x90>)
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d101      	bne.n	80097d0 <prvProcessTimerOrBlockTask+0x50>
 80097cc:	2301      	movs	r3, #1
 80097ce:	e000      	b.n	80097d2 <prvProcessTimerOrBlockTask+0x52>
 80097d0:	2300      	movs	r3, #0
 80097d2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80097d4:	4b0f      	ldr	r3, [pc, #60]	; (8009814 <prvProcessTimerOrBlockTask+0x94>)
 80097d6:	6818      	ldr	r0, [r3, #0]
 80097d8:	687a      	ldr	r2, [r7, #4]
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	1ad3      	subs	r3, r2, r3
 80097de:	683a      	ldr	r2, [r7, #0]
 80097e0:	4619      	mov	r1, r3
 80097e2:	f7fe ff2b 	bl	800863c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80097e6:	f7ff f9d5 	bl	8008b94 <xTaskResumeAll>
 80097ea:	4603      	mov	r3, r0
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d10a      	bne.n	8009806 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80097f0:	4b09      	ldr	r3, [pc, #36]	; (8009818 <prvProcessTimerOrBlockTask+0x98>)
 80097f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097f6:	601a      	str	r2, [r3, #0]
 80097f8:	f3bf 8f4f 	dsb	sy
 80097fc:	f3bf 8f6f 	isb	sy
}
 8009800:	e001      	b.n	8009806 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009802:	f7ff f9c7 	bl	8008b94 <xTaskResumeAll>
}
 8009806:	bf00      	nop
 8009808:	3710      	adds	r7, #16
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}
 800980e:	bf00      	nop
 8009810:	20007c14 	.word	0x20007c14
 8009814:	20007c18 	.word	0x20007c18
 8009818:	e000ed04 	.word	0xe000ed04

0800981c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800981c:	b480      	push	{r7}
 800981e:	b085      	sub	sp, #20
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009824:	4b0e      	ldr	r3, [pc, #56]	; (8009860 <prvGetNextExpireTime+0x44>)
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d101      	bne.n	8009832 <prvGetNextExpireTime+0x16>
 800982e:	2201      	movs	r2, #1
 8009830:	e000      	b.n	8009834 <prvGetNextExpireTime+0x18>
 8009832:	2200      	movs	r2, #0
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d105      	bne.n	800984c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009840:	4b07      	ldr	r3, [pc, #28]	; (8009860 <prvGetNextExpireTime+0x44>)
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	68db      	ldr	r3, [r3, #12]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	60fb      	str	r3, [r7, #12]
 800984a:	e001      	b.n	8009850 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800984c:	2300      	movs	r3, #0
 800984e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009850:	68fb      	ldr	r3, [r7, #12]
}
 8009852:	4618      	mov	r0, r3
 8009854:	3714      	adds	r7, #20
 8009856:	46bd      	mov	sp, r7
 8009858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985c:	4770      	bx	lr
 800985e:	bf00      	nop
 8009860:	20007c10 	.word	0x20007c10

08009864 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b084      	sub	sp, #16
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800986c:	f7ff fa32 	bl	8008cd4 <xTaskGetTickCount>
 8009870:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009872:	4b0b      	ldr	r3, [pc, #44]	; (80098a0 <prvSampleTimeNow+0x3c>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	68fa      	ldr	r2, [r7, #12]
 8009878:	429a      	cmp	r2, r3
 800987a:	d205      	bcs.n	8009888 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800987c:	f000 f93c 	bl	8009af8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2201      	movs	r2, #1
 8009884:	601a      	str	r2, [r3, #0]
 8009886:	e002      	b.n	800988e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2200      	movs	r2, #0
 800988c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800988e:	4a04      	ldr	r2, [pc, #16]	; (80098a0 <prvSampleTimeNow+0x3c>)
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009894:	68fb      	ldr	r3, [r7, #12]
}
 8009896:	4618      	mov	r0, r3
 8009898:	3710      	adds	r7, #16
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}
 800989e:	bf00      	nop
 80098a0:	20007c20 	.word	0x20007c20

080098a4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b086      	sub	sp, #24
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	60f8      	str	r0, [r7, #12]
 80098ac:	60b9      	str	r1, [r7, #8]
 80098ae:	607a      	str	r2, [r7, #4]
 80098b0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80098b2:	2300      	movs	r3, #0
 80098b4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	68ba      	ldr	r2, [r7, #8]
 80098ba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	68fa      	ldr	r2, [r7, #12]
 80098c0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80098c2:	68ba      	ldr	r2, [r7, #8]
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	429a      	cmp	r2, r3
 80098c8:	d812      	bhi.n	80098f0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80098ca:	687a      	ldr	r2, [r7, #4]
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	1ad2      	subs	r2, r2, r3
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	699b      	ldr	r3, [r3, #24]
 80098d4:	429a      	cmp	r2, r3
 80098d6:	d302      	bcc.n	80098de <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80098d8:	2301      	movs	r3, #1
 80098da:	617b      	str	r3, [r7, #20]
 80098dc:	e01b      	b.n	8009916 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80098de:	4b10      	ldr	r3, [pc, #64]	; (8009920 <prvInsertTimerInActiveList+0x7c>)
 80098e0:	681a      	ldr	r2, [r3, #0]
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	3304      	adds	r3, #4
 80098e6:	4619      	mov	r1, r3
 80098e8:	4610      	mov	r0, r2
 80098ea:	f7fe f96e 	bl	8007bca <vListInsert>
 80098ee:	e012      	b.n	8009916 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80098f0:	687a      	ldr	r2, [r7, #4]
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	429a      	cmp	r2, r3
 80098f6:	d206      	bcs.n	8009906 <prvInsertTimerInActiveList+0x62>
 80098f8:	68ba      	ldr	r2, [r7, #8]
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	429a      	cmp	r2, r3
 80098fe:	d302      	bcc.n	8009906 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009900:	2301      	movs	r3, #1
 8009902:	617b      	str	r3, [r7, #20]
 8009904:	e007      	b.n	8009916 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009906:	4b07      	ldr	r3, [pc, #28]	; (8009924 <prvInsertTimerInActiveList+0x80>)
 8009908:	681a      	ldr	r2, [r3, #0]
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	3304      	adds	r3, #4
 800990e:	4619      	mov	r1, r3
 8009910:	4610      	mov	r0, r2
 8009912:	f7fe f95a 	bl	8007bca <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009916:	697b      	ldr	r3, [r7, #20]
}
 8009918:	4618      	mov	r0, r3
 800991a:	3718      	adds	r7, #24
 800991c:	46bd      	mov	sp, r7
 800991e:	bd80      	pop	{r7, pc}
 8009920:	20007c14 	.word	0x20007c14
 8009924:	20007c10 	.word	0x20007c10

08009928 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b08e      	sub	sp, #56	; 0x38
 800992c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800992e:	e0d0      	b.n	8009ad2 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2b00      	cmp	r3, #0
 8009934:	da1a      	bge.n	800996c <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009936:	1d3b      	adds	r3, r7, #4
 8009938:	3304      	adds	r3, #4
 800993a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800993c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800993e:	2b00      	cmp	r3, #0
 8009940:	d10c      	bne.n	800995c <prvProcessReceivedCommands+0x34>
	__asm volatile
 8009942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009946:	b672      	cpsid	i
 8009948:	f383 8811 	msr	BASEPRI, r3
 800994c:	f3bf 8f6f 	isb	sy
 8009950:	f3bf 8f4f 	dsb	sy
 8009954:	b662      	cpsie	i
 8009956:	61fb      	str	r3, [r7, #28]
}
 8009958:	bf00      	nop
 800995a:	e7fe      	b.n	800995a <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800995c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009962:	6850      	ldr	r0, [r2, #4]
 8009964:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009966:	6892      	ldr	r2, [r2, #8]
 8009968:	4611      	mov	r1, r2
 800996a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	2b00      	cmp	r3, #0
 8009970:	f2c0 80af 	blt.w	8009ad2 <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800997a:	695b      	ldr	r3, [r3, #20]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d004      	beq.n	800998a <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009982:	3304      	adds	r3, #4
 8009984:	4618      	mov	r0, r3
 8009986:	f7fe f959 	bl	8007c3c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800998a:	463b      	mov	r3, r7
 800998c:	4618      	mov	r0, r3
 800998e:	f7ff ff69 	bl	8009864 <prvSampleTimeNow>
 8009992:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2b09      	cmp	r3, #9
 8009998:	f200 809a 	bhi.w	8009ad0 <prvProcessReceivedCommands+0x1a8>
 800999c:	a201      	add	r2, pc, #4	; (adr r2, 80099a4 <prvProcessReceivedCommands+0x7c>)
 800999e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099a2:	bf00      	nop
 80099a4:	080099cd 	.word	0x080099cd
 80099a8:	080099cd 	.word	0x080099cd
 80099ac:	080099cd 	.word	0x080099cd
 80099b0:	08009a45 	.word	0x08009a45
 80099b4:	08009a59 	.word	0x08009a59
 80099b8:	08009aa7 	.word	0x08009aa7
 80099bc:	080099cd 	.word	0x080099cd
 80099c0:	080099cd 	.word	0x080099cd
 80099c4:	08009a45 	.word	0x08009a45
 80099c8:	08009a59 	.word	0x08009a59
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80099cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80099d2:	f043 0301 	orr.w	r3, r3, #1
 80099d6:	b2da      	uxtb	r2, r3
 80099d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80099de:	68ba      	ldr	r2, [r7, #8]
 80099e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099e2:	699b      	ldr	r3, [r3, #24]
 80099e4:	18d1      	adds	r1, r2, r3
 80099e6:	68bb      	ldr	r3, [r7, #8]
 80099e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099ec:	f7ff ff5a 	bl	80098a4 <prvInsertTimerInActiveList>
 80099f0:	4603      	mov	r3, r0
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d06d      	beq.n	8009ad2 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80099f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099f8:	6a1b      	ldr	r3, [r3, #32]
 80099fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099fc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80099fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a04:	f003 0304 	and.w	r3, r3, #4
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d062      	beq.n	8009ad2 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009a0c:	68ba      	ldr	r2, [r7, #8]
 8009a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a10:	699b      	ldr	r3, [r3, #24]
 8009a12:	441a      	add	r2, r3
 8009a14:	2300      	movs	r3, #0
 8009a16:	9300      	str	r3, [sp, #0]
 8009a18:	2300      	movs	r3, #0
 8009a1a:	2100      	movs	r1, #0
 8009a1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a1e:	f7ff fdff 	bl	8009620 <xTimerGenericCommand>
 8009a22:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009a24:	6a3b      	ldr	r3, [r7, #32]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d153      	bne.n	8009ad2 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8009a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a2e:	b672      	cpsid	i
 8009a30:	f383 8811 	msr	BASEPRI, r3
 8009a34:	f3bf 8f6f 	isb	sy
 8009a38:	f3bf 8f4f 	dsb	sy
 8009a3c:	b662      	cpsie	i
 8009a3e:	61bb      	str	r3, [r7, #24]
}
 8009a40:	bf00      	nop
 8009a42:	e7fe      	b.n	8009a42 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a4a:	f023 0301 	bic.w	r3, r3, #1
 8009a4e:	b2da      	uxtb	r2, r3
 8009a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009a56:	e03c      	b.n	8009ad2 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a5e:	f043 0301 	orr.w	r3, r3, #1
 8009a62:	b2da      	uxtb	r2, r3
 8009a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009a6a:	68ba      	ldr	r2, [r7, #8]
 8009a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a6e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a72:	699b      	ldr	r3, [r3, #24]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d10c      	bne.n	8009a92 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8009a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a7c:	b672      	cpsid	i
 8009a7e:	f383 8811 	msr	BASEPRI, r3
 8009a82:	f3bf 8f6f 	isb	sy
 8009a86:	f3bf 8f4f 	dsb	sy
 8009a8a:	b662      	cpsie	i
 8009a8c:	617b      	str	r3, [r7, #20]
}
 8009a8e:	bf00      	nop
 8009a90:	e7fe      	b.n	8009a90 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a94:	699a      	ldr	r2, [r3, #24]
 8009a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a98:	18d1      	adds	r1, r2, r3
 8009a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009aa0:	f7ff ff00 	bl	80098a4 <prvInsertTimerInActiveList>
					break;
 8009aa4:	e015      	b.n	8009ad2 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aa8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009aac:	f003 0302 	and.w	r3, r3, #2
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d103      	bne.n	8009abc <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8009ab4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ab6:	f000 fbc7 	bl	800a248 <vPortFree>
 8009aba:	e00a      	b.n	8009ad2 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009abe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ac2:	f023 0301 	bic.w	r3, r3, #1
 8009ac6:	b2da      	uxtb	r2, r3
 8009ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009ace:	e000      	b.n	8009ad2 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 8009ad0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009ad2:	4b08      	ldr	r3, [pc, #32]	; (8009af4 <prvProcessReceivedCommands+0x1cc>)
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	1d39      	adds	r1, r7, #4
 8009ad8:	2200      	movs	r2, #0
 8009ada:	4618      	mov	r0, r3
 8009adc:	f7fe fb8e 	bl	80081fc <xQueueReceive>
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	f47f af24 	bne.w	8009930 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009ae8:	bf00      	nop
 8009aea:	bf00      	nop
 8009aec:	3730      	adds	r7, #48	; 0x30
 8009aee:	46bd      	mov	sp, r7
 8009af0:	bd80      	pop	{r7, pc}
 8009af2:	bf00      	nop
 8009af4:	20007c18 	.word	0x20007c18

08009af8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b088      	sub	sp, #32
 8009afc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009afe:	e04a      	b.n	8009b96 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009b00:	4b2e      	ldr	r3, [pc, #184]	; (8009bbc <prvSwitchTimerLists+0xc4>)
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	68db      	ldr	r3, [r3, #12]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b0a:	4b2c      	ldr	r3, [pc, #176]	; (8009bbc <prvSwitchTimerLists+0xc4>)
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	68db      	ldr	r3, [r3, #12]
 8009b10:	68db      	ldr	r3, [r3, #12]
 8009b12:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	3304      	adds	r3, #4
 8009b18:	4618      	mov	r0, r3
 8009b1a:	f7fe f88f 	bl	8007c3c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	6a1b      	ldr	r3, [r3, #32]
 8009b22:	68f8      	ldr	r0, [r7, #12]
 8009b24:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b2c:	f003 0304 	and.w	r3, r3, #4
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d030      	beq.n	8009b96 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	699b      	ldr	r3, [r3, #24]
 8009b38:	693a      	ldr	r2, [r7, #16]
 8009b3a:	4413      	add	r3, r2
 8009b3c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009b3e:	68ba      	ldr	r2, [r7, #8]
 8009b40:	693b      	ldr	r3, [r7, #16]
 8009b42:	429a      	cmp	r2, r3
 8009b44:	d90e      	bls.n	8009b64 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	68ba      	ldr	r2, [r7, #8]
 8009b4a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	68fa      	ldr	r2, [r7, #12]
 8009b50:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009b52:	4b1a      	ldr	r3, [pc, #104]	; (8009bbc <prvSwitchTimerLists+0xc4>)
 8009b54:	681a      	ldr	r2, [r3, #0]
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	3304      	adds	r3, #4
 8009b5a:	4619      	mov	r1, r3
 8009b5c:	4610      	mov	r0, r2
 8009b5e:	f7fe f834 	bl	8007bca <vListInsert>
 8009b62:	e018      	b.n	8009b96 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009b64:	2300      	movs	r3, #0
 8009b66:	9300      	str	r3, [sp, #0]
 8009b68:	2300      	movs	r3, #0
 8009b6a:	693a      	ldr	r2, [r7, #16]
 8009b6c:	2100      	movs	r1, #0
 8009b6e:	68f8      	ldr	r0, [r7, #12]
 8009b70:	f7ff fd56 	bl	8009620 <xTimerGenericCommand>
 8009b74:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d10c      	bne.n	8009b96 <prvSwitchTimerLists+0x9e>
	__asm volatile
 8009b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b80:	b672      	cpsid	i
 8009b82:	f383 8811 	msr	BASEPRI, r3
 8009b86:	f3bf 8f6f 	isb	sy
 8009b8a:	f3bf 8f4f 	dsb	sy
 8009b8e:	b662      	cpsie	i
 8009b90:	603b      	str	r3, [r7, #0]
}
 8009b92:	bf00      	nop
 8009b94:	e7fe      	b.n	8009b94 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009b96:	4b09      	ldr	r3, [pc, #36]	; (8009bbc <prvSwitchTimerLists+0xc4>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d1af      	bne.n	8009b00 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009ba0:	4b06      	ldr	r3, [pc, #24]	; (8009bbc <prvSwitchTimerLists+0xc4>)
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009ba6:	4b06      	ldr	r3, [pc, #24]	; (8009bc0 <prvSwitchTimerLists+0xc8>)
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	4a04      	ldr	r2, [pc, #16]	; (8009bbc <prvSwitchTimerLists+0xc4>)
 8009bac:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009bae:	4a04      	ldr	r2, [pc, #16]	; (8009bc0 <prvSwitchTimerLists+0xc8>)
 8009bb0:	697b      	ldr	r3, [r7, #20]
 8009bb2:	6013      	str	r3, [r2, #0]
}
 8009bb4:	bf00      	nop
 8009bb6:	3718      	adds	r7, #24
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	bd80      	pop	{r7, pc}
 8009bbc:	20007c10 	.word	0x20007c10
 8009bc0:	20007c14 	.word	0x20007c14

08009bc4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b082      	sub	sp, #8
 8009bc8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009bca:	f000 f947 	bl	8009e5c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009bce:	4b15      	ldr	r3, [pc, #84]	; (8009c24 <prvCheckForValidListAndQueue+0x60>)
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d120      	bne.n	8009c18 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009bd6:	4814      	ldr	r0, [pc, #80]	; (8009c28 <prvCheckForValidListAndQueue+0x64>)
 8009bd8:	f7fd ffa6 	bl	8007b28 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009bdc:	4813      	ldr	r0, [pc, #76]	; (8009c2c <prvCheckForValidListAndQueue+0x68>)
 8009bde:	f7fd ffa3 	bl	8007b28 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009be2:	4b13      	ldr	r3, [pc, #76]	; (8009c30 <prvCheckForValidListAndQueue+0x6c>)
 8009be4:	4a10      	ldr	r2, [pc, #64]	; (8009c28 <prvCheckForValidListAndQueue+0x64>)
 8009be6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009be8:	4b12      	ldr	r3, [pc, #72]	; (8009c34 <prvCheckForValidListAndQueue+0x70>)
 8009bea:	4a10      	ldr	r2, [pc, #64]	; (8009c2c <prvCheckForValidListAndQueue+0x68>)
 8009bec:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009bee:	2300      	movs	r3, #0
 8009bf0:	9300      	str	r3, [sp, #0]
 8009bf2:	4b11      	ldr	r3, [pc, #68]	; (8009c38 <prvCheckForValidListAndQueue+0x74>)
 8009bf4:	4a11      	ldr	r2, [pc, #68]	; (8009c3c <prvCheckForValidListAndQueue+0x78>)
 8009bf6:	2110      	movs	r1, #16
 8009bf8:	200a      	movs	r0, #10
 8009bfa:	f7fe f8b3 	bl	8007d64 <xQueueGenericCreateStatic>
 8009bfe:	4603      	mov	r3, r0
 8009c00:	4a08      	ldr	r2, [pc, #32]	; (8009c24 <prvCheckForValidListAndQueue+0x60>)
 8009c02:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009c04:	4b07      	ldr	r3, [pc, #28]	; (8009c24 <prvCheckForValidListAndQueue+0x60>)
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d005      	beq.n	8009c18 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009c0c:	4b05      	ldr	r3, [pc, #20]	; (8009c24 <prvCheckForValidListAndQueue+0x60>)
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	490b      	ldr	r1, [pc, #44]	; (8009c40 <prvCheckForValidListAndQueue+0x7c>)
 8009c12:	4618      	mov	r0, r3
 8009c14:	f7fe fce8 	bl	80085e8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009c18:	f000 f954 	bl	8009ec4 <vPortExitCritical>
}
 8009c1c:	bf00      	nop
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}
 8009c22:	bf00      	nop
 8009c24:	20007c18 	.word	0x20007c18
 8009c28:	20007be8 	.word	0x20007be8
 8009c2c:	20007bfc 	.word	0x20007bfc
 8009c30:	20007c10 	.word	0x20007c10
 8009c34:	20007c14 	.word	0x20007c14
 8009c38:	20007cc4 	.word	0x20007cc4
 8009c3c:	20007c24 	.word	0x20007c24
 8009c40:	0801a670 	.word	0x0801a670

08009c44 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009c44:	b480      	push	{r7}
 8009c46:	b085      	sub	sp, #20
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	60f8      	str	r0, [r7, #12]
 8009c4c:	60b9      	str	r1, [r7, #8]
 8009c4e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	3b04      	subs	r3, #4
 8009c54:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009c5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	3b04      	subs	r3, #4
 8009c62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009c64:	68bb      	ldr	r3, [r7, #8]
 8009c66:	f023 0201 	bic.w	r2, r3, #1
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	3b04      	subs	r3, #4
 8009c72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009c74:	4a0c      	ldr	r2, [pc, #48]	; (8009ca8 <pxPortInitialiseStack+0x64>)
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	3b14      	subs	r3, #20
 8009c7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009c80:	687a      	ldr	r2, [r7, #4]
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	3b04      	subs	r3, #4
 8009c8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	f06f 0202 	mvn.w	r2, #2
 8009c92:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	3b20      	subs	r3, #32
 8009c98:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
}
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	3714      	adds	r7, #20
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca6:	4770      	bx	lr
 8009ca8:	08009cad 	.word	0x08009cad

08009cac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009cac:	b480      	push	{r7}
 8009cae:	b085      	sub	sp, #20
 8009cb0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009cb6:	4b14      	ldr	r3, [pc, #80]	; (8009d08 <prvTaskExitError+0x5c>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009cbe:	d00c      	beq.n	8009cda <prvTaskExitError+0x2e>
	__asm volatile
 8009cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cc4:	b672      	cpsid	i
 8009cc6:	f383 8811 	msr	BASEPRI, r3
 8009cca:	f3bf 8f6f 	isb	sy
 8009cce:	f3bf 8f4f 	dsb	sy
 8009cd2:	b662      	cpsie	i
 8009cd4:	60fb      	str	r3, [r7, #12]
}
 8009cd6:	bf00      	nop
 8009cd8:	e7fe      	b.n	8009cd8 <prvTaskExitError+0x2c>
	__asm volatile
 8009cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cde:	b672      	cpsid	i
 8009ce0:	f383 8811 	msr	BASEPRI, r3
 8009ce4:	f3bf 8f6f 	isb	sy
 8009ce8:	f3bf 8f4f 	dsb	sy
 8009cec:	b662      	cpsie	i
 8009cee:	60bb      	str	r3, [r7, #8]
}
 8009cf0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009cf2:	bf00      	nop
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d0fc      	beq.n	8009cf4 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009cfa:	bf00      	nop
 8009cfc:	bf00      	nop
 8009cfe:	3714      	adds	r7, #20
 8009d00:	46bd      	mov	sp, r7
 8009d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d06:	4770      	bx	lr
 8009d08:	20000010 	.word	0x20000010
 8009d0c:	00000000 	.word	0x00000000

08009d10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009d10:	4b07      	ldr	r3, [pc, #28]	; (8009d30 <pxCurrentTCBConst2>)
 8009d12:	6819      	ldr	r1, [r3, #0]
 8009d14:	6808      	ldr	r0, [r1, #0]
 8009d16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d1a:	f380 8809 	msr	PSP, r0
 8009d1e:	f3bf 8f6f 	isb	sy
 8009d22:	f04f 0000 	mov.w	r0, #0
 8009d26:	f380 8811 	msr	BASEPRI, r0
 8009d2a:	4770      	bx	lr
 8009d2c:	f3af 8000 	nop.w

08009d30 <pxCurrentTCBConst2>:
 8009d30:	200076e8 	.word	0x200076e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009d34:	bf00      	nop
 8009d36:	bf00      	nop

08009d38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009d38:	4808      	ldr	r0, [pc, #32]	; (8009d5c <prvPortStartFirstTask+0x24>)
 8009d3a:	6800      	ldr	r0, [r0, #0]
 8009d3c:	6800      	ldr	r0, [r0, #0]
 8009d3e:	f380 8808 	msr	MSP, r0
 8009d42:	f04f 0000 	mov.w	r0, #0
 8009d46:	f380 8814 	msr	CONTROL, r0
 8009d4a:	b662      	cpsie	i
 8009d4c:	b661      	cpsie	f
 8009d4e:	f3bf 8f4f 	dsb	sy
 8009d52:	f3bf 8f6f 	isb	sy
 8009d56:	df00      	svc	0
 8009d58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009d5a:	bf00      	nop
 8009d5c:	e000ed08 	.word	0xe000ed08

08009d60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b084      	sub	sp, #16
 8009d64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009d66:	4b37      	ldr	r3, [pc, #220]	; (8009e44 <xPortStartScheduler+0xe4>)
 8009d68:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	781b      	ldrb	r3, [r3, #0]
 8009d6e:	b2db      	uxtb	r3, r3
 8009d70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	22ff      	movs	r2, #255	; 0xff
 8009d76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	781b      	ldrb	r3, [r3, #0]
 8009d7c:	b2db      	uxtb	r3, r3
 8009d7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009d80:	78fb      	ldrb	r3, [r7, #3]
 8009d82:	b2db      	uxtb	r3, r3
 8009d84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009d88:	b2da      	uxtb	r2, r3
 8009d8a:	4b2f      	ldr	r3, [pc, #188]	; (8009e48 <xPortStartScheduler+0xe8>)
 8009d8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009d8e:	4b2f      	ldr	r3, [pc, #188]	; (8009e4c <xPortStartScheduler+0xec>)
 8009d90:	2207      	movs	r2, #7
 8009d92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009d94:	e009      	b.n	8009daa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8009d96:	4b2d      	ldr	r3, [pc, #180]	; (8009e4c <xPortStartScheduler+0xec>)
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	3b01      	subs	r3, #1
 8009d9c:	4a2b      	ldr	r2, [pc, #172]	; (8009e4c <xPortStartScheduler+0xec>)
 8009d9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009da0:	78fb      	ldrb	r3, [r7, #3]
 8009da2:	b2db      	uxtb	r3, r3
 8009da4:	005b      	lsls	r3, r3, #1
 8009da6:	b2db      	uxtb	r3, r3
 8009da8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009daa:	78fb      	ldrb	r3, [r7, #3]
 8009dac:	b2db      	uxtb	r3, r3
 8009dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009db2:	2b80      	cmp	r3, #128	; 0x80
 8009db4:	d0ef      	beq.n	8009d96 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009db6:	4b25      	ldr	r3, [pc, #148]	; (8009e4c <xPortStartScheduler+0xec>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	f1c3 0307 	rsb	r3, r3, #7
 8009dbe:	2b04      	cmp	r3, #4
 8009dc0:	d00c      	beq.n	8009ddc <xPortStartScheduler+0x7c>
	__asm volatile
 8009dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dc6:	b672      	cpsid	i
 8009dc8:	f383 8811 	msr	BASEPRI, r3
 8009dcc:	f3bf 8f6f 	isb	sy
 8009dd0:	f3bf 8f4f 	dsb	sy
 8009dd4:	b662      	cpsie	i
 8009dd6:	60bb      	str	r3, [r7, #8]
}
 8009dd8:	bf00      	nop
 8009dda:	e7fe      	b.n	8009dda <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009ddc:	4b1b      	ldr	r3, [pc, #108]	; (8009e4c <xPortStartScheduler+0xec>)
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	021b      	lsls	r3, r3, #8
 8009de2:	4a1a      	ldr	r2, [pc, #104]	; (8009e4c <xPortStartScheduler+0xec>)
 8009de4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009de6:	4b19      	ldr	r3, [pc, #100]	; (8009e4c <xPortStartScheduler+0xec>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009dee:	4a17      	ldr	r2, [pc, #92]	; (8009e4c <xPortStartScheduler+0xec>)
 8009df0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	b2da      	uxtb	r2, r3
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009dfa:	4b15      	ldr	r3, [pc, #84]	; (8009e50 <xPortStartScheduler+0xf0>)
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	4a14      	ldr	r2, [pc, #80]	; (8009e50 <xPortStartScheduler+0xf0>)
 8009e00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009e04:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009e06:	4b12      	ldr	r3, [pc, #72]	; (8009e50 <xPortStartScheduler+0xf0>)
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	4a11      	ldr	r2, [pc, #68]	; (8009e50 <xPortStartScheduler+0xf0>)
 8009e0c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009e10:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009e12:	f000 f8dd 	bl	8009fd0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009e16:	4b0f      	ldr	r3, [pc, #60]	; (8009e54 <xPortStartScheduler+0xf4>)
 8009e18:	2200      	movs	r2, #0
 8009e1a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009e1c:	f000 f8fc 	bl	800a018 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009e20:	4b0d      	ldr	r3, [pc, #52]	; (8009e58 <xPortStartScheduler+0xf8>)
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	4a0c      	ldr	r2, [pc, #48]	; (8009e58 <xPortStartScheduler+0xf8>)
 8009e26:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009e2a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009e2c:	f7ff ff84 	bl	8009d38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009e30:	f7ff f81c 	bl	8008e6c <vTaskSwitchContext>
	prvTaskExitError();
 8009e34:	f7ff ff3a 	bl	8009cac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009e38:	2300      	movs	r3, #0
}
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	3710      	adds	r7, #16
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	bd80      	pop	{r7, pc}
 8009e42:	bf00      	nop
 8009e44:	e000e400 	.word	0xe000e400
 8009e48:	20007d14 	.word	0x20007d14
 8009e4c:	20007d18 	.word	0x20007d18
 8009e50:	e000ed20 	.word	0xe000ed20
 8009e54:	20000010 	.word	0x20000010
 8009e58:	e000ef34 	.word	0xe000ef34

08009e5c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009e5c:	b480      	push	{r7}
 8009e5e:	b083      	sub	sp, #12
 8009e60:	af00      	add	r7, sp, #0
	__asm volatile
 8009e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e66:	b672      	cpsid	i
 8009e68:	f383 8811 	msr	BASEPRI, r3
 8009e6c:	f3bf 8f6f 	isb	sy
 8009e70:	f3bf 8f4f 	dsb	sy
 8009e74:	b662      	cpsie	i
 8009e76:	607b      	str	r3, [r7, #4]
}
 8009e78:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009e7a:	4b10      	ldr	r3, [pc, #64]	; (8009ebc <vPortEnterCritical+0x60>)
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	3301      	adds	r3, #1
 8009e80:	4a0e      	ldr	r2, [pc, #56]	; (8009ebc <vPortEnterCritical+0x60>)
 8009e82:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009e84:	4b0d      	ldr	r3, [pc, #52]	; (8009ebc <vPortEnterCritical+0x60>)
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	2b01      	cmp	r3, #1
 8009e8a:	d111      	bne.n	8009eb0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009e8c:	4b0c      	ldr	r3, [pc, #48]	; (8009ec0 <vPortEnterCritical+0x64>)
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	b2db      	uxtb	r3, r3
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d00c      	beq.n	8009eb0 <vPortEnterCritical+0x54>
	__asm volatile
 8009e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e9a:	b672      	cpsid	i
 8009e9c:	f383 8811 	msr	BASEPRI, r3
 8009ea0:	f3bf 8f6f 	isb	sy
 8009ea4:	f3bf 8f4f 	dsb	sy
 8009ea8:	b662      	cpsie	i
 8009eaa:	603b      	str	r3, [r7, #0]
}
 8009eac:	bf00      	nop
 8009eae:	e7fe      	b.n	8009eae <vPortEnterCritical+0x52>
	}
}
 8009eb0:	bf00      	nop
 8009eb2:	370c      	adds	r7, #12
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eba:	4770      	bx	lr
 8009ebc:	20000010 	.word	0x20000010
 8009ec0:	e000ed04 	.word	0xe000ed04

08009ec4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009ec4:	b480      	push	{r7}
 8009ec6:	b083      	sub	sp, #12
 8009ec8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009eca:	4b13      	ldr	r3, [pc, #76]	; (8009f18 <vPortExitCritical+0x54>)
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d10c      	bne.n	8009eec <vPortExitCritical+0x28>
	__asm volatile
 8009ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ed6:	b672      	cpsid	i
 8009ed8:	f383 8811 	msr	BASEPRI, r3
 8009edc:	f3bf 8f6f 	isb	sy
 8009ee0:	f3bf 8f4f 	dsb	sy
 8009ee4:	b662      	cpsie	i
 8009ee6:	607b      	str	r3, [r7, #4]
}
 8009ee8:	bf00      	nop
 8009eea:	e7fe      	b.n	8009eea <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8009eec:	4b0a      	ldr	r3, [pc, #40]	; (8009f18 <vPortExitCritical+0x54>)
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	3b01      	subs	r3, #1
 8009ef2:	4a09      	ldr	r2, [pc, #36]	; (8009f18 <vPortExitCritical+0x54>)
 8009ef4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009ef6:	4b08      	ldr	r3, [pc, #32]	; (8009f18 <vPortExitCritical+0x54>)
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d105      	bne.n	8009f0a <vPortExitCritical+0x46>
 8009efe:	2300      	movs	r3, #0
 8009f00:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	f383 8811 	msr	BASEPRI, r3
}
 8009f08:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009f0a:	bf00      	nop
 8009f0c:	370c      	adds	r7, #12
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f14:	4770      	bx	lr
 8009f16:	bf00      	nop
 8009f18:	20000010 	.word	0x20000010
 8009f1c:	00000000 	.word	0x00000000

08009f20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009f20:	f3ef 8009 	mrs	r0, PSP
 8009f24:	f3bf 8f6f 	isb	sy
 8009f28:	4b15      	ldr	r3, [pc, #84]	; (8009f80 <pxCurrentTCBConst>)
 8009f2a:	681a      	ldr	r2, [r3, #0]
 8009f2c:	f01e 0f10 	tst.w	lr, #16
 8009f30:	bf08      	it	eq
 8009f32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009f36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f3a:	6010      	str	r0, [r2, #0]
 8009f3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009f40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009f44:	b672      	cpsid	i
 8009f46:	f380 8811 	msr	BASEPRI, r0
 8009f4a:	f3bf 8f4f 	dsb	sy
 8009f4e:	f3bf 8f6f 	isb	sy
 8009f52:	b662      	cpsie	i
 8009f54:	f7fe ff8a 	bl	8008e6c <vTaskSwitchContext>
 8009f58:	f04f 0000 	mov.w	r0, #0
 8009f5c:	f380 8811 	msr	BASEPRI, r0
 8009f60:	bc09      	pop	{r0, r3}
 8009f62:	6819      	ldr	r1, [r3, #0]
 8009f64:	6808      	ldr	r0, [r1, #0]
 8009f66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f6a:	f01e 0f10 	tst.w	lr, #16
 8009f6e:	bf08      	it	eq
 8009f70:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009f74:	f380 8809 	msr	PSP, r0
 8009f78:	f3bf 8f6f 	isb	sy
 8009f7c:	4770      	bx	lr
 8009f7e:	bf00      	nop

08009f80 <pxCurrentTCBConst>:
 8009f80:	200076e8 	.word	0x200076e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009f84:	bf00      	nop
 8009f86:	bf00      	nop

08009f88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b082      	sub	sp, #8
 8009f8c:	af00      	add	r7, sp, #0
	__asm volatile
 8009f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f92:	b672      	cpsid	i
 8009f94:	f383 8811 	msr	BASEPRI, r3
 8009f98:	f3bf 8f6f 	isb	sy
 8009f9c:	f3bf 8f4f 	dsb	sy
 8009fa0:	b662      	cpsie	i
 8009fa2:	607b      	str	r3, [r7, #4]
}
 8009fa4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009fa6:	f7fe fea5 	bl	8008cf4 <xTaskIncrementTick>
 8009faa:	4603      	mov	r3, r0
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d003      	beq.n	8009fb8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009fb0:	4b06      	ldr	r3, [pc, #24]	; (8009fcc <SysTick_Handler+0x44>)
 8009fb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fb6:	601a      	str	r2, [r3, #0]
 8009fb8:	2300      	movs	r3, #0
 8009fba:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009fbc:	683b      	ldr	r3, [r7, #0]
 8009fbe:	f383 8811 	msr	BASEPRI, r3
}
 8009fc2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009fc4:	bf00      	nop
 8009fc6:	3708      	adds	r7, #8
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	bd80      	pop	{r7, pc}
 8009fcc:	e000ed04 	.word	0xe000ed04

08009fd0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009fd0:	b480      	push	{r7}
 8009fd2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009fd4:	4b0b      	ldr	r3, [pc, #44]	; (800a004 <vPortSetupTimerInterrupt+0x34>)
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009fda:	4b0b      	ldr	r3, [pc, #44]	; (800a008 <vPortSetupTimerInterrupt+0x38>)
 8009fdc:	2200      	movs	r2, #0
 8009fde:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009fe0:	4b0a      	ldr	r3, [pc, #40]	; (800a00c <vPortSetupTimerInterrupt+0x3c>)
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	4a0a      	ldr	r2, [pc, #40]	; (800a010 <vPortSetupTimerInterrupt+0x40>)
 8009fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8009fea:	099b      	lsrs	r3, r3, #6
 8009fec:	4a09      	ldr	r2, [pc, #36]	; (800a014 <vPortSetupTimerInterrupt+0x44>)
 8009fee:	3b01      	subs	r3, #1
 8009ff0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009ff2:	4b04      	ldr	r3, [pc, #16]	; (800a004 <vPortSetupTimerInterrupt+0x34>)
 8009ff4:	2207      	movs	r2, #7
 8009ff6:	601a      	str	r2, [r3, #0]
}
 8009ff8:	bf00      	nop
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a000:	4770      	bx	lr
 800a002:	bf00      	nop
 800a004:	e000e010 	.word	0xe000e010
 800a008:	e000e018 	.word	0xe000e018
 800a00c:	20000004 	.word	0x20000004
 800a010:	10624dd3 	.word	0x10624dd3
 800a014:	e000e014 	.word	0xe000e014

0800a018 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a018:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a028 <vPortEnableVFP+0x10>
 800a01c:	6801      	ldr	r1, [r0, #0]
 800a01e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a022:	6001      	str	r1, [r0, #0]
 800a024:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a026:	bf00      	nop
 800a028:	e000ed88 	.word	0xe000ed88

0800a02c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a02c:	b480      	push	{r7}
 800a02e:	b085      	sub	sp, #20
 800a030:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a032:	f3ef 8305 	mrs	r3, IPSR
 800a036:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	2b0f      	cmp	r3, #15
 800a03c:	d916      	bls.n	800a06c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a03e:	4a19      	ldr	r2, [pc, #100]	; (800a0a4 <vPortValidateInterruptPriority+0x78>)
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	4413      	add	r3, r2
 800a044:	781b      	ldrb	r3, [r3, #0]
 800a046:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a048:	4b17      	ldr	r3, [pc, #92]	; (800a0a8 <vPortValidateInterruptPriority+0x7c>)
 800a04a:	781b      	ldrb	r3, [r3, #0]
 800a04c:	7afa      	ldrb	r2, [r7, #11]
 800a04e:	429a      	cmp	r2, r3
 800a050:	d20c      	bcs.n	800a06c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800a052:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a056:	b672      	cpsid	i
 800a058:	f383 8811 	msr	BASEPRI, r3
 800a05c:	f3bf 8f6f 	isb	sy
 800a060:	f3bf 8f4f 	dsb	sy
 800a064:	b662      	cpsie	i
 800a066:	607b      	str	r3, [r7, #4]
}
 800a068:	bf00      	nop
 800a06a:	e7fe      	b.n	800a06a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a06c:	4b0f      	ldr	r3, [pc, #60]	; (800a0ac <vPortValidateInterruptPriority+0x80>)
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a074:	4b0e      	ldr	r3, [pc, #56]	; (800a0b0 <vPortValidateInterruptPriority+0x84>)
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	429a      	cmp	r2, r3
 800a07a:	d90c      	bls.n	800a096 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800a07c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a080:	b672      	cpsid	i
 800a082:	f383 8811 	msr	BASEPRI, r3
 800a086:	f3bf 8f6f 	isb	sy
 800a08a:	f3bf 8f4f 	dsb	sy
 800a08e:	b662      	cpsie	i
 800a090:	603b      	str	r3, [r7, #0]
}
 800a092:	bf00      	nop
 800a094:	e7fe      	b.n	800a094 <vPortValidateInterruptPriority+0x68>
	}
 800a096:	bf00      	nop
 800a098:	3714      	adds	r7, #20
 800a09a:	46bd      	mov	sp, r7
 800a09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a0:	4770      	bx	lr
 800a0a2:	bf00      	nop
 800a0a4:	e000e3f0 	.word	0xe000e3f0
 800a0a8:	20007d14 	.word	0x20007d14
 800a0ac:	e000ed0c 	.word	0xe000ed0c
 800a0b0:	20007d18 	.word	0x20007d18

0800a0b4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b08a      	sub	sp, #40	; 0x28
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a0bc:	2300      	movs	r3, #0
 800a0be:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a0c0:	f7fe fd5a 	bl	8008b78 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a0c4:	4b5b      	ldr	r3, [pc, #364]	; (800a234 <pvPortMalloc+0x180>)
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d101      	bne.n	800a0d0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a0cc:	f000 f91a 	bl	800a304 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a0d0:	4b59      	ldr	r3, [pc, #356]	; (800a238 <pvPortMalloc+0x184>)
 800a0d2:	681a      	ldr	r2, [r3, #0]
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	4013      	ands	r3, r2
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	f040 8092 	bne.w	800a202 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d01f      	beq.n	800a124 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800a0e4:	2208      	movs	r2, #8
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	4413      	add	r3, r2
 800a0ea:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	f003 0307 	and.w	r3, r3, #7
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d016      	beq.n	800a124 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	f023 0307 	bic.w	r3, r3, #7
 800a0fc:	3308      	adds	r3, #8
 800a0fe:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	f003 0307 	and.w	r3, r3, #7
 800a106:	2b00      	cmp	r3, #0
 800a108:	d00c      	beq.n	800a124 <pvPortMalloc+0x70>
	__asm volatile
 800a10a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a10e:	b672      	cpsid	i
 800a110:	f383 8811 	msr	BASEPRI, r3
 800a114:	f3bf 8f6f 	isb	sy
 800a118:	f3bf 8f4f 	dsb	sy
 800a11c:	b662      	cpsie	i
 800a11e:	617b      	str	r3, [r7, #20]
}
 800a120:	bf00      	nop
 800a122:	e7fe      	b.n	800a122 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d06b      	beq.n	800a202 <pvPortMalloc+0x14e>
 800a12a:	4b44      	ldr	r3, [pc, #272]	; (800a23c <pvPortMalloc+0x188>)
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	687a      	ldr	r2, [r7, #4]
 800a130:	429a      	cmp	r2, r3
 800a132:	d866      	bhi.n	800a202 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a134:	4b42      	ldr	r3, [pc, #264]	; (800a240 <pvPortMalloc+0x18c>)
 800a136:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a138:	4b41      	ldr	r3, [pc, #260]	; (800a240 <pvPortMalloc+0x18c>)
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a13e:	e004      	b.n	800a14a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800a140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a142:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a14a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a14c:	685b      	ldr	r3, [r3, #4]
 800a14e:	687a      	ldr	r2, [r7, #4]
 800a150:	429a      	cmp	r2, r3
 800a152:	d903      	bls.n	800a15c <pvPortMalloc+0xa8>
 800a154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d1f1      	bne.n	800a140 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a15c:	4b35      	ldr	r3, [pc, #212]	; (800a234 <pvPortMalloc+0x180>)
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a162:	429a      	cmp	r2, r3
 800a164:	d04d      	beq.n	800a202 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a166:	6a3b      	ldr	r3, [r7, #32]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	2208      	movs	r2, #8
 800a16c:	4413      	add	r3, r2
 800a16e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a172:	681a      	ldr	r2, [r3, #0]
 800a174:	6a3b      	ldr	r3, [r7, #32]
 800a176:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a17a:	685a      	ldr	r2, [r3, #4]
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	1ad2      	subs	r2, r2, r3
 800a180:	2308      	movs	r3, #8
 800a182:	005b      	lsls	r3, r3, #1
 800a184:	429a      	cmp	r2, r3
 800a186:	d921      	bls.n	800a1cc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a188:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	4413      	add	r3, r2
 800a18e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a190:	69bb      	ldr	r3, [r7, #24]
 800a192:	f003 0307 	and.w	r3, r3, #7
 800a196:	2b00      	cmp	r3, #0
 800a198:	d00c      	beq.n	800a1b4 <pvPortMalloc+0x100>
	__asm volatile
 800a19a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a19e:	b672      	cpsid	i
 800a1a0:	f383 8811 	msr	BASEPRI, r3
 800a1a4:	f3bf 8f6f 	isb	sy
 800a1a8:	f3bf 8f4f 	dsb	sy
 800a1ac:	b662      	cpsie	i
 800a1ae:	613b      	str	r3, [r7, #16]
}
 800a1b0:	bf00      	nop
 800a1b2:	e7fe      	b.n	800a1b2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1b6:	685a      	ldr	r2, [r3, #4]
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	1ad2      	subs	r2, r2, r3
 800a1bc:	69bb      	ldr	r3, [r7, #24]
 800a1be:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a1c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c2:	687a      	ldr	r2, [r7, #4]
 800a1c4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a1c6:	69b8      	ldr	r0, [r7, #24]
 800a1c8:	f000 f8fe 	bl	800a3c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a1cc:	4b1b      	ldr	r3, [pc, #108]	; (800a23c <pvPortMalloc+0x188>)
 800a1ce:	681a      	ldr	r2, [r3, #0]
 800a1d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1d2:	685b      	ldr	r3, [r3, #4]
 800a1d4:	1ad3      	subs	r3, r2, r3
 800a1d6:	4a19      	ldr	r2, [pc, #100]	; (800a23c <pvPortMalloc+0x188>)
 800a1d8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a1da:	4b18      	ldr	r3, [pc, #96]	; (800a23c <pvPortMalloc+0x188>)
 800a1dc:	681a      	ldr	r2, [r3, #0]
 800a1de:	4b19      	ldr	r3, [pc, #100]	; (800a244 <pvPortMalloc+0x190>)
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	429a      	cmp	r2, r3
 800a1e4:	d203      	bcs.n	800a1ee <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a1e6:	4b15      	ldr	r3, [pc, #84]	; (800a23c <pvPortMalloc+0x188>)
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	4a16      	ldr	r2, [pc, #88]	; (800a244 <pvPortMalloc+0x190>)
 800a1ec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a1ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1f0:	685a      	ldr	r2, [r3, #4]
 800a1f2:	4b11      	ldr	r3, [pc, #68]	; (800a238 <pvPortMalloc+0x184>)
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	431a      	orrs	r2, r3
 800a1f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1fa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a1fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1fe:	2200      	movs	r2, #0
 800a200:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a202:	f7fe fcc7 	bl	8008b94 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a206:	69fb      	ldr	r3, [r7, #28]
 800a208:	f003 0307 	and.w	r3, r3, #7
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d00c      	beq.n	800a22a <pvPortMalloc+0x176>
	__asm volatile
 800a210:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a214:	b672      	cpsid	i
 800a216:	f383 8811 	msr	BASEPRI, r3
 800a21a:	f3bf 8f6f 	isb	sy
 800a21e:	f3bf 8f4f 	dsb	sy
 800a222:	b662      	cpsie	i
 800a224:	60fb      	str	r3, [r7, #12]
}
 800a226:	bf00      	nop
 800a228:	e7fe      	b.n	800a228 <pvPortMalloc+0x174>
	return pvReturn;
 800a22a:	69fb      	ldr	r3, [r7, #28]
}
 800a22c:	4618      	mov	r0, r3
 800a22e:	3728      	adds	r7, #40	; 0x28
 800a230:	46bd      	mov	sp, r7
 800a232:	bd80      	pop	{r7, pc}
 800a234:	2000b924 	.word	0x2000b924
 800a238:	2000b930 	.word	0x2000b930
 800a23c:	2000b928 	.word	0x2000b928
 800a240:	2000b91c 	.word	0x2000b91c
 800a244:	2000b92c 	.word	0x2000b92c

0800a248 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b086      	sub	sp, #24
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d04c      	beq.n	800a2f4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a25a:	2308      	movs	r3, #8
 800a25c:	425b      	negs	r3, r3
 800a25e:	697a      	ldr	r2, [r7, #20]
 800a260:	4413      	add	r3, r2
 800a262:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a264:	697b      	ldr	r3, [r7, #20]
 800a266:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a268:	693b      	ldr	r3, [r7, #16]
 800a26a:	685a      	ldr	r2, [r3, #4]
 800a26c:	4b23      	ldr	r3, [pc, #140]	; (800a2fc <vPortFree+0xb4>)
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	4013      	ands	r3, r2
 800a272:	2b00      	cmp	r3, #0
 800a274:	d10c      	bne.n	800a290 <vPortFree+0x48>
	__asm volatile
 800a276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a27a:	b672      	cpsid	i
 800a27c:	f383 8811 	msr	BASEPRI, r3
 800a280:	f3bf 8f6f 	isb	sy
 800a284:	f3bf 8f4f 	dsb	sy
 800a288:	b662      	cpsie	i
 800a28a:	60fb      	str	r3, [r7, #12]
}
 800a28c:	bf00      	nop
 800a28e:	e7fe      	b.n	800a28e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a290:	693b      	ldr	r3, [r7, #16]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d00c      	beq.n	800a2b2 <vPortFree+0x6a>
	__asm volatile
 800a298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a29c:	b672      	cpsid	i
 800a29e:	f383 8811 	msr	BASEPRI, r3
 800a2a2:	f3bf 8f6f 	isb	sy
 800a2a6:	f3bf 8f4f 	dsb	sy
 800a2aa:	b662      	cpsie	i
 800a2ac:	60bb      	str	r3, [r7, #8]
}
 800a2ae:	bf00      	nop
 800a2b0:	e7fe      	b.n	800a2b0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a2b2:	693b      	ldr	r3, [r7, #16]
 800a2b4:	685a      	ldr	r2, [r3, #4]
 800a2b6:	4b11      	ldr	r3, [pc, #68]	; (800a2fc <vPortFree+0xb4>)
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	4013      	ands	r3, r2
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d019      	beq.n	800a2f4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a2c0:	693b      	ldr	r3, [r7, #16]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d115      	bne.n	800a2f4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a2c8:	693b      	ldr	r3, [r7, #16]
 800a2ca:	685a      	ldr	r2, [r3, #4]
 800a2cc:	4b0b      	ldr	r3, [pc, #44]	; (800a2fc <vPortFree+0xb4>)
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	43db      	mvns	r3, r3
 800a2d2:	401a      	ands	r2, r3
 800a2d4:	693b      	ldr	r3, [r7, #16]
 800a2d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a2d8:	f7fe fc4e 	bl	8008b78 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a2dc:	693b      	ldr	r3, [r7, #16]
 800a2de:	685a      	ldr	r2, [r3, #4]
 800a2e0:	4b07      	ldr	r3, [pc, #28]	; (800a300 <vPortFree+0xb8>)
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	4413      	add	r3, r2
 800a2e6:	4a06      	ldr	r2, [pc, #24]	; (800a300 <vPortFree+0xb8>)
 800a2e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a2ea:	6938      	ldr	r0, [r7, #16]
 800a2ec:	f000 f86c 	bl	800a3c8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a2f0:	f7fe fc50 	bl	8008b94 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a2f4:	bf00      	nop
 800a2f6:	3718      	adds	r7, #24
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	bd80      	pop	{r7, pc}
 800a2fc:	2000b930 	.word	0x2000b930
 800a300:	2000b928 	.word	0x2000b928

0800a304 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a304:	b480      	push	{r7}
 800a306:	b085      	sub	sp, #20
 800a308:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a30a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a30e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a310:	4b27      	ldr	r3, [pc, #156]	; (800a3b0 <prvHeapInit+0xac>)
 800a312:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	f003 0307 	and.w	r3, r3, #7
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d00c      	beq.n	800a338 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	3307      	adds	r3, #7
 800a322:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	f023 0307 	bic.w	r3, r3, #7
 800a32a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a32c:	68ba      	ldr	r2, [r7, #8]
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	1ad3      	subs	r3, r2, r3
 800a332:	4a1f      	ldr	r2, [pc, #124]	; (800a3b0 <prvHeapInit+0xac>)
 800a334:	4413      	add	r3, r2
 800a336:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a33c:	4a1d      	ldr	r2, [pc, #116]	; (800a3b4 <prvHeapInit+0xb0>)
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a342:	4b1c      	ldr	r3, [pc, #112]	; (800a3b4 <prvHeapInit+0xb0>)
 800a344:	2200      	movs	r2, #0
 800a346:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	68ba      	ldr	r2, [r7, #8]
 800a34c:	4413      	add	r3, r2
 800a34e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a350:	2208      	movs	r2, #8
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	1a9b      	subs	r3, r3, r2
 800a356:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	f023 0307 	bic.w	r3, r3, #7
 800a35e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	4a15      	ldr	r2, [pc, #84]	; (800a3b8 <prvHeapInit+0xb4>)
 800a364:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a366:	4b14      	ldr	r3, [pc, #80]	; (800a3b8 <prvHeapInit+0xb4>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	2200      	movs	r2, #0
 800a36c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a36e:	4b12      	ldr	r3, [pc, #72]	; (800a3b8 <prvHeapInit+0xb4>)
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	2200      	movs	r2, #0
 800a374:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	68fa      	ldr	r2, [r7, #12]
 800a37e:	1ad2      	subs	r2, r2, r3
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a384:	4b0c      	ldr	r3, [pc, #48]	; (800a3b8 <prvHeapInit+0xb4>)
 800a386:	681a      	ldr	r2, [r3, #0]
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	685b      	ldr	r3, [r3, #4]
 800a390:	4a0a      	ldr	r2, [pc, #40]	; (800a3bc <prvHeapInit+0xb8>)
 800a392:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	685b      	ldr	r3, [r3, #4]
 800a398:	4a09      	ldr	r2, [pc, #36]	; (800a3c0 <prvHeapInit+0xbc>)
 800a39a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a39c:	4b09      	ldr	r3, [pc, #36]	; (800a3c4 <prvHeapInit+0xc0>)
 800a39e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a3a2:	601a      	str	r2, [r3, #0]
}
 800a3a4:	bf00      	nop
 800a3a6:	3714      	adds	r7, #20
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ae:	4770      	bx	lr
 800a3b0:	20007d1c 	.word	0x20007d1c
 800a3b4:	2000b91c 	.word	0x2000b91c
 800a3b8:	2000b924 	.word	0x2000b924
 800a3bc:	2000b92c 	.word	0x2000b92c
 800a3c0:	2000b928 	.word	0x2000b928
 800a3c4:	2000b930 	.word	0x2000b930

0800a3c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a3c8:	b480      	push	{r7}
 800a3ca:	b085      	sub	sp, #20
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a3d0:	4b28      	ldr	r3, [pc, #160]	; (800a474 <prvInsertBlockIntoFreeList+0xac>)
 800a3d2:	60fb      	str	r3, [r7, #12]
 800a3d4:	e002      	b.n	800a3dc <prvInsertBlockIntoFreeList+0x14>
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	60fb      	str	r3, [r7, #12]
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	687a      	ldr	r2, [r7, #4]
 800a3e2:	429a      	cmp	r2, r3
 800a3e4:	d8f7      	bhi.n	800a3d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	685b      	ldr	r3, [r3, #4]
 800a3ee:	68ba      	ldr	r2, [r7, #8]
 800a3f0:	4413      	add	r3, r2
 800a3f2:	687a      	ldr	r2, [r7, #4]
 800a3f4:	429a      	cmp	r2, r3
 800a3f6:	d108      	bne.n	800a40a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	685a      	ldr	r2, [r3, #4]
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	685b      	ldr	r3, [r3, #4]
 800a400:	441a      	add	r2, r3
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	685b      	ldr	r3, [r3, #4]
 800a412:	68ba      	ldr	r2, [r7, #8]
 800a414:	441a      	add	r2, r3
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	429a      	cmp	r2, r3
 800a41c:	d118      	bne.n	800a450 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	681a      	ldr	r2, [r3, #0]
 800a422:	4b15      	ldr	r3, [pc, #84]	; (800a478 <prvInsertBlockIntoFreeList+0xb0>)
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	429a      	cmp	r2, r3
 800a428:	d00d      	beq.n	800a446 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	685a      	ldr	r2, [r3, #4]
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	685b      	ldr	r3, [r3, #4]
 800a434:	441a      	add	r2, r3
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	681a      	ldr	r2, [r3, #0]
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	601a      	str	r2, [r3, #0]
 800a444:	e008      	b.n	800a458 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a446:	4b0c      	ldr	r3, [pc, #48]	; (800a478 <prvInsertBlockIntoFreeList+0xb0>)
 800a448:	681a      	ldr	r2, [r3, #0]
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	601a      	str	r2, [r3, #0]
 800a44e:	e003      	b.n	800a458 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	681a      	ldr	r2, [r3, #0]
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a458:	68fa      	ldr	r2, [r7, #12]
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	429a      	cmp	r2, r3
 800a45e:	d002      	beq.n	800a466 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	687a      	ldr	r2, [r7, #4]
 800a464:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a466:	bf00      	nop
 800a468:	3714      	adds	r7, #20
 800a46a:	46bd      	mov	sp, r7
 800a46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a470:	4770      	bx	lr
 800a472:	bf00      	nop
 800a474:	2000b91c 	.word	0x2000b91c
 800a478:	2000b924 	.word	0x2000b924

0800a47c <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Control>:
 800a47c:	4b04      	ldr	r3, [pc, #16]	; (800a490 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Control+0x14>)
 800a47e:	681a      	ldr	r2, [r3, #0]
 800a480:	b10a      	cbz	r2, 800a486 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Control+0xa>
 800a482:	4803      	ldr	r0, [pc, #12]	; (800a490 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Control+0x14>)
 800a484:	4770      	bx	lr
 800a486:	4a03      	ldr	r2, [pc, #12]	; (800a494 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Control+0x18>)
 800a488:	4801      	ldr	r0, [pc, #4]	; (800a490 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Control+0x14>)
 800a48a:	6812      	ldr	r2, [r2, #0]
 800a48c:	601a      	str	r2, [r3, #0]
 800a48e:	4770      	bx	lr
 800a490:	2000001c 	.word	0x2000001c
 800a494:	20000974 	.word	0x20000974

0800a498 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Control_Request>:
 800a498:	4b06      	ldr	r3, [pc, #24]	; (800a4b4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x1c>)
 800a49a:	4807      	ldr	r0, [pc, #28]	; (800a4b8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x20>)
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	4907      	ldr	r1, [pc, #28]	; (800a4bc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x24>)
 800a4a0:	4a07      	ldr	r2, [pc, #28]	; (800a4c0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x28>)
 800a4a2:	b410      	push	{r4}
 800a4a4:	4c07      	ldr	r4, [pc, #28]	; (800a4c4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x2c>)
 800a4a6:	6003      	str	r3, [r0, #0]
 800a4a8:	6023      	str	r3, [r4, #0]
 800a4aa:	600b      	str	r3, [r1, #0]
 800a4ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a4b0:	6013      	str	r3, [r2, #0]
 800a4b2:	4770      	bx	lr
 800a4b4:	20000974 	.word	0x20000974
 800a4b8:	20000090 	.word	0x20000090
 800a4bc:	20000050 	.word	0x20000050
 800a4c0:	2000001c 	.word	0x2000001c
 800a4c4:	20000078 	.word	0x20000078

0800a4c8 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Setup>:
 800a4c8:	4b04      	ldr	r3, [pc, #16]	; (800a4dc <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Setup+0x14>)
 800a4ca:	681a      	ldr	r2, [r3, #0]
 800a4cc:	b10a      	cbz	r2, 800a4d2 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Setup+0xa>
 800a4ce:	4803      	ldr	r0, [pc, #12]	; (800a4dc <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Setup+0x14>)
 800a4d0:	4770      	bx	lr
 800a4d2:	4a03      	ldr	r2, [pc, #12]	; (800a4e0 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Setup+0x18>)
 800a4d4:	4801      	ldr	r0, [pc, #4]	; (800a4dc <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Setup+0x14>)
 800a4d6:	6812      	ldr	r2, [r2, #0]
 800a4d8:	601a      	str	r2, [r3, #0]
 800a4da:	4770      	bx	lr
 800a4dc:	200000b0 	.word	0x200000b0
 800a4e0:	20000974 	.word	0x20000974

0800a4e4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Setup_Request>:
 800a4e4:	4b06      	ldr	r3, [pc, #24]	; (800a500 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x1c>)
 800a4e6:	4807      	ldr	r0, [pc, #28]	; (800a504 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x20>)
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	4907      	ldr	r1, [pc, #28]	; (800a508 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x24>)
 800a4ec:	4a07      	ldr	r2, [pc, #28]	; (800a50c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x28>)
 800a4ee:	b410      	push	{r4}
 800a4f0:	4c07      	ldr	r4, [pc, #28]	; (800a510 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x2c>)
 800a4f2:	6003      	str	r3, [r0, #0]
 800a4f4:	6023      	str	r3, [r4, #0]
 800a4f6:	600b      	str	r3, [r1, #0]
 800a4f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a4fc:	6013      	str	r3, [r2, #0]
 800a4fe:	4770      	bx	lr
 800a500:	20000974 	.word	0x20000974
 800a504:	20000124 	.word	0x20000124
 800a508:	200000e4 	.word	0x200000e4
 800a50c:	200000b0 	.word	0x200000b0
 800a510:	2000010c 	.word	0x2000010c

0800a514 <racs_services__srv__Control_Request__rosidl_typesupport_introspection_c__size_function__Control_Request__values>:
 800a514:	6840      	ldr	r0, [r0, #4]
 800a516:	4770      	bx	lr

0800a518 <racs_services__srv__Control_Request__rosidl_typesupport_introspection_c__get_const_function__Control_Request__values>:
 800a518:	6800      	ldr	r0, [r0, #0]
 800a51a:	4408      	add	r0, r1
 800a51c:	4770      	bx	lr
 800a51e:	bf00      	nop

0800a520 <racs_services__srv__Control_Request__rosidl_typesupport_introspection_c__fetch_function__Control_Request__values>:
 800a520:	6803      	ldr	r3, [r0, #0]
 800a522:	5c5b      	ldrb	r3, [r3, r1]
 800a524:	7013      	strb	r3, [r2, #0]
 800a526:	4770      	bx	lr

0800a528 <racs_services__srv__Control_Request__rosidl_typesupport_introspection_c__assign_function__Control_Request__values>:
 800a528:	7812      	ldrb	r2, [r2, #0]
 800a52a:	6803      	ldr	r3, [r0, #0]
 800a52c:	545a      	strb	r2, [r3, r1]
 800a52e:	4770      	bx	lr

0800a530 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__size_function__Control_Event__request>:
 800a530:	6840      	ldr	r0, [r0, #4]
 800a532:	4770      	bx	lr

0800a534 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__get_const_function__Control_Event__request>:
 800a534:	6800      	ldr	r0, [r0, #0]
 800a536:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 800a53a:	4770      	bx	lr

0800a53c <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__fetch_function__Control_Event__request>:
 800a53c:	6803      	ldr	r3, [r0, #0]
 800a53e:	4694      	mov	ip, r2
 800a540:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 800a544:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 800a546:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 800a54a:	4770      	bx	lr

0800a54c <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__assign_function__Control_Event__request>:
 800a54c:	6803      	ldr	r3, [r0, #0]
 800a54e:	eb03 1c01 	add.w	ip, r3, r1, lsl #4
 800a552:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800a554:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 800a558:	4770      	bx	lr
 800a55a:	bf00      	nop

0800a55c <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__size_function__Control_Event__response>:
 800a55c:	6840      	ldr	r0, [r0, #4]
 800a55e:	4770      	bx	lr

0800a560 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__get_const_function__Control_Event__response>:
 800a560:	6800      	ldr	r0, [r0, #0]
 800a562:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 800a566:	4770      	bx	lr

0800a568 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__fetch_function__Control_Event__response>:
 800a568:	6803      	ldr	r3, [r0, #0]
 800a56a:	4694      	mov	ip, r2
 800a56c:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 800a570:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 800a572:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 800a576:	4770      	bx	lr

0800a578 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__assign_function__Control_Event__response>:
 800a578:	6803      	ldr	r3, [r0, #0]
 800a57a:	eb03 1c01 	add.w	ip, r3, r1, lsl #4
 800a57e:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800a580:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 800a584:	4770      	bx	lr
 800a586:	bf00      	nop

0800a588 <racs_services__srv__Control_Request__rosidl_typesupport_introspection_c__Control_Request_init_function>:
 800a588:	f003 bf90 	b.w	800e4ac <racs_services__srv__Control_Request__init>

0800a58c <racs_services__srv__Control_Request__rosidl_typesupport_introspection_c__Control_Request_fini_function>:
 800a58c:	f003 bfa2 	b.w	800e4d4 <racs_services__srv__Control_Request__fini>

0800a590 <racs_services__srv__Control_Request__rosidl_typesupport_introspection_c__resize_function__Control_Request__values>:
 800a590:	b510      	push	{r4, lr}
 800a592:	4604      	mov	r4, r0
 800a594:	b082      	sub	sp, #8
 800a596:	9101      	str	r1, [sp, #4]
 800a598:	f001 fe9e 	bl	800c2d8 <rosidl_runtime_c__uint8__Sequence__fini>
 800a59c:	9901      	ldr	r1, [sp, #4]
 800a59e:	4620      	mov	r0, r4
 800a5a0:	b002      	add	sp, #8
 800a5a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5a6:	f001 be7f 	b.w	800c2a8 <rosidl_runtime_c__uint8__Sequence__init>
 800a5aa:	bf00      	nop

0800a5ac <racs_services__srv__Control_Response__rosidl_typesupport_introspection_c__Control_Response_init_function>:
 800a5ac:	f003 bfd4 	b.w	800e558 <racs_services__srv__Control_Response__init>

0800a5b0 <racs_services__srv__Control_Response__rosidl_typesupport_introspection_c__Control_Response_fini_function>:
 800a5b0:	f003 bfe6 	b.w	800e580 <racs_services__srv__Control_Response__fini>

0800a5b4 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__Control_Event_init_function>:
 800a5b4:	f004 b820 	b.w	800e5f8 <racs_services__srv__Control_Event__init>

0800a5b8 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__Control_Event_fini_function>:
 800a5b8:	f004 b882 	b.w	800e6c0 <racs_services__srv__Control_Event__fini>

0800a5bc <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__resize_function__Control_Event__request>:
 800a5bc:	b510      	push	{r4, lr}
 800a5be:	4604      	mov	r4, r0
 800a5c0:	b082      	sub	sp, #8
 800a5c2:	9101      	str	r1, [sp, #4]
 800a5c4:	f003 ffa0 	bl	800e508 <racs_services__srv__Control_Request__Sequence__fini>
 800a5c8:	9901      	ldr	r1, [sp, #4]
 800a5ca:	4620      	mov	r0, r4
 800a5cc:	b002      	add	sp, #8
 800a5ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5d2:	f003 bf95 	b.w	800e500 <racs_services__srv__Control_Request__Sequence__init>
 800a5d6:	bf00      	nop

0800a5d8 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__resize_function__Control_Event__response>:
 800a5d8:	b510      	push	{r4, lr}
 800a5da:	4604      	mov	r4, r0
 800a5dc:	b082      	sub	sp, #8
 800a5de:	9101      	str	r1, [sp, #4]
 800a5e0:	f003 ffe2 	bl	800e5a8 <racs_services__srv__Control_Response__Sequence__fini>
 800a5e4:	9901      	ldr	r1, [sp, #4]
 800a5e6:	4620      	mov	r0, r4
 800a5e8:	b002      	add	sp, #8
 800a5ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5ee:	f003 bfd7 	b.w	800e5a0 <racs_services__srv__Control_Response__Sequence__init>
 800a5f2:	bf00      	nop

0800a5f4 <racs_services__srv__Control_Response__rosidl_typesupport_introspection_c__get_function__Control_Response__encoders>:
 800a5f4:	6800      	ldr	r0, [r0, #0]
 800a5f6:	4408      	add	r0, r1
 800a5f8:	4770      	bx	lr
 800a5fa:	bf00      	nop

0800a5fc <racs_services__srv__Control_Request__rosidl_typesupport_introspection_c__get_function__Control_Request__values>:
 800a5fc:	6800      	ldr	r0, [r0, #0]
 800a5fe:	4408      	add	r0, r1
 800a600:	4770      	bx	lr
 800a602:	bf00      	nop

0800a604 <racs_services__srv__Control_Response__rosidl_typesupport_introspection_c__size_function__Control_Response__encoders>:
 800a604:	6840      	ldr	r0, [r0, #4]
 800a606:	4770      	bx	lr

0800a608 <racs_services__srv__Control_Response__rosidl_typesupport_introspection_c__get_const_function__Control_Response__encoders>:
 800a608:	6800      	ldr	r0, [r0, #0]
 800a60a:	4408      	add	r0, r1
 800a60c:	4770      	bx	lr
 800a60e:	bf00      	nop

0800a610 <racs_services__srv__Control_Response__rosidl_typesupport_introspection_c__fetch_function__Control_Response__encoders>:
 800a610:	6803      	ldr	r3, [r0, #0]
 800a612:	5c5b      	ldrb	r3, [r3, r1]
 800a614:	7013      	strb	r3, [r2, #0]
 800a616:	4770      	bx	lr

0800a618 <racs_services__srv__Control_Response__rosidl_typesupport_introspection_c__assign_function__Control_Response__encoders>:
 800a618:	7812      	ldrb	r2, [r2, #0]
 800a61a:	6803      	ldr	r3, [r0, #0]
 800a61c:	545a      	strb	r2, [r3, r1]
 800a61e:	4770      	bx	lr

0800a620 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__get_function__Control_Event__request>:
 800a620:	6800      	ldr	r0, [r0, #0]
 800a622:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 800a626:	4770      	bx	lr

0800a628 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__get_function__Control_Event__response>:
 800a628:	6800      	ldr	r0, [r0, #0]
 800a62a:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 800a62e:	4770      	bx	lr

0800a630 <racs_services__srv__Control_Response__rosidl_typesupport_introspection_c__resize_function__Control_Response__encoders>:
 800a630:	b510      	push	{r4, lr}
 800a632:	4604      	mov	r4, r0
 800a634:	b082      	sub	sp, #8
 800a636:	9101      	str	r1, [sp, #4]
 800a638:	f001 fe4e 	bl	800c2d8 <rosidl_runtime_c__uint8__Sequence__fini>
 800a63c:	9901      	ldr	r1, [sp, #4]
 800a63e:	4620      	mov	r0, r4
 800a640:	b002      	add	sp, #8
 800a642:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a646:	f001 be2f 	b.w	800c2a8 <rosidl_runtime_c__uint8__Sequence__init>
 800a64a:	bf00      	nop

0800a64c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Request>:
 800a64c:	4b04      	ldr	r3, [pc, #16]	; (800a660 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x14>)
 800a64e:	681a      	ldr	r2, [r3, #0]
 800a650:	b10a      	cbz	r2, 800a656 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Request+0xa>
 800a652:	4803      	ldr	r0, [pc, #12]	; (800a660 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x14>)
 800a654:	4770      	bx	lr
 800a656:	4a03      	ldr	r2, [pc, #12]	; (800a664 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x18>)
 800a658:	4801      	ldr	r0, [pc, #4]	; (800a660 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x14>)
 800a65a:	6812      	ldr	r2, [r2, #0]
 800a65c:	601a      	str	r2, [r3, #0]
 800a65e:	4770      	bx	lr
 800a660:	200002f8 	.word	0x200002f8
 800a664:	20000978 	.word	0x20000978

0800a668 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Response>:
 800a668:	4b04      	ldr	r3, [pc, #16]	; (800a67c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Response+0x14>)
 800a66a:	681a      	ldr	r2, [r3, #0]
 800a66c:	b10a      	cbz	r2, 800a672 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Response+0xa>
 800a66e:	4803      	ldr	r0, [pc, #12]	; (800a67c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Response+0x14>)
 800a670:	4770      	bx	lr
 800a672:	4a03      	ldr	r2, [pc, #12]	; (800a680 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Response+0x18>)
 800a674:	4801      	ldr	r0, [pc, #4]	; (800a67c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Response+0x14>)
 800a676:	6812      	ldr	r2, [r2, #0]
 800a678:	601a      	str	r2, [r3, #0]
 800a67a:	4770      	bx	lr
 800a67c:	2000043c 	.word	0x2000043c
 800a680:	20000978 	.word	0x20000978

0800a684 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event>:
 800a684:	b508      	push	{r3, lr}
 800a686:	f001 fee1 	bl	800c44c <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800a68a:	4913      	ldr	r1, [pc, #76]	; (800a6d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x54>)
 800a68c:	4b13      	ldr	r3, [pc, #76]	; (800a6dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x58>)
 800a68e:	680a      	ldr	r2, [r1, #0]
 800a690:	60d8      	str	r0, [r3, #12]
 800a692:	b152      	cbz	r2, 800a6aa <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x26>
 800a694:	4a12      	ldr	r2, [pc, #72]	; (800a6e0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x5c>)
 800a696:	6499      	str	r1, [r3, #72]	; 0x48
 800a698:	6811      	ldr	r1, [r2, #0]
 800a69a:	b171      	cbz	r1, 800a6ba <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x36>
 800a69c:	4911      	ldr	r1, [pc, #68]	; (800a6e4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x60>)
 800a69e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800a6a2:	680b      	ldr	r3, [r1, #0]
 800a6a4:	b193      	cbz	r3, 800a6cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x48>
 800a6a6:	480f      	ldr	r0, [pc, #60]	; (800a6e4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x60>)
 800a6a8:	bd08      	pop	{r3, pc}
 800a6aa:	4a0f      	ldr	r2, [pc, #60]	; (800a6e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x64>)
 800a6ac:	6499      	str	r1, [r3, #72]	; 0x48
 800a6ae:	6812      	ldr	r2, [r2, #0]
 800a6b0:	600a      	str	r2, [r1, #0]
 800a6b2:	4a0b      	ldr	r2, [pc, #44]	; (800a6e0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x5c>)
 800a6b4:	6811      	ldr	r1, [r2, #0]
 800a6b6:	2900      	cmp	r1, #0
 800a6b8:	d1f0      	bne.n	800a69c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x18>
 800a6ba:	490b      	ldr	r1, [pc, #44]	; (800a6e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x64>)
 800a6bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800a6c0:	6809      	ldr	r1, [r1, #0]
 800a6c2:	6011      	str	r1, [r2, #0]
 800a6c4:	4907      	ldr	r1, [pc, #28]	; (800a6e4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x60>)
 800a6c6:	680b      	ldr	r3, [r1, #0]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d1ec      	bne.n	800a6a6 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x22>
 800a6cc:	4b06      	ldr	r3, [pc, #24]	; (800a6e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x64>)
 800a6ce:	4805      	ldr	r0, [pc, #20]	; (800a6e4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x60>)
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	600b      	str	r3, [r1, #0]
 800a6d4:	bd08      	pop	{r3, pc}
 800a6d6:	bf00      	nop
 800a6d8:	200002f8 	.word	0x200002f8
 800a6dc:	2000013c 	.word	0x2000013c
 800a6e0:	2000043c 	.word	0x2000043c
 800a6e4:	200001f0 	.word	0x200001f0
 800a6e8:	20000978 	.word	0x20000978

0800a6ec <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control>:
 800a6ec:	4b25      	ldr	r3, [pc, #148]	; (800a784 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x98>)
 800a6ee:	681a      	ldr	r2, [r3, #0]
 800a6f0:	b510      	push	{r4, lr}
 800a6f2:	b142      	cbz	r2, 800a706 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x1a>
 800a6f4:	685c      	ldr	r4, [r3, #4]
 800a6f6:	68a3      	ldr	r3, [r4, #8]
 800a6f8:	b163      	cbz	r3, 800a714 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x28>
 800a6fa:	68e3      	ldr	r3, [r4, #12]
 800a6fc:	b193      	cbz	r3, 800a724 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x38>
 800a6fe:	6923      	ldr	r3, [r4, #16]
 800a700:	b1c3      	cbz	r3, 800a734 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x48>
 800a702:	4820      	ldr	r0, [pc, #128]	; (800a784 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x98>)
 800a704:	bd10      	pop	{r4, pc}
 800a706:	4a20      	ldr	r2, [pc, #128]	; (800a788 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x9c>)
 800a708:	685c      	ldr	r4, [r3, #4]
 800a70a:	6812      	ldr	r2, [r2, #0]
 800a70c:	601a      	str	r2, [r3, #0]
 800a70e:	68a3      	ldr	r3, [r4, #8]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d1f2      	bne.n	800a6fa <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0xe>
 800a714:	4a1d      	ldr	r2, [pc, #116]	; (800a78c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0xa0>)
 800a716:	6813      	ldr	r3, [r2, #0]
 800a718:	b303      	cbz	r3, 800a75c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x70>
 800a71a:	6853      	ldr	r3, [r2, #4]
 800a71c:	60a3      	str	r3, [r4, #8]
 800a71e:	68e3      	ldr	r3, [r4, #12]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d1ec      	bne.n	800a6fe <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x12>
 800a724:	4b1a      	ldr	r3, [pc, #104]	; (800a790 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0xa4>)
 800a726:	681a      	ldr	r2, [r3, #0]
 800a728:	b1e2      	cbz	r2, 800a764 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x78>
 800a72a:	685b      	ldr	r3, [r3, #4]
 800a72c:	60e3      	str	r3, [r4, #12]
 800a72e:	6923      	ldr	r3, [r4, #16]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d1e6      	bne.n	800a702 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x16>
 800a734:	f001 fe8a 	bl	800c44c <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800a738:	4a14      	ldr	r2, [pc, #80]	; (800a78c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0xa0>)
 800a73a:	4916      	ldr	r1, [pc, #88]	; (800a794 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0xa8>)
 800a73c:	6813      	ldr	r3, [r2, #0]
 800a73e:	60c8      	str	r0, [r1, #12]
 800a740:	b1e3      	cbz	r3, 800a77c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x90>
 800a742:	4b13      	ldr	r3, [pc, #76]	; (800a790 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0xa4>)
 800a744:	648a      	str	r2, [r1, #72]	; 0x48
 800a746:	681a      	ldr	r2, [r3, #0]
 800a748:	b1a2      	cbz	r2, 800a774 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x88>
 800a74a:	4a13      	ldr	r2, [pc, #76]	; (800a798 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0xac>)
 800a74c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 800a750:	6813      	ldr	r3, [r2, #0]
 800a752:	b15b      	cbz	r3, 800a76c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x80>
 800a754:	6853      	ldr	r3, [r2, #4]
 800a756:	480b      	ldr	r0, [pc, #44]	; (800a784 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x98>)
 800a758:	6123      	str	r3, [r4, #16]
 800a75a:	bd10      	pop	{r4, pc}
 800a75c:	4b0a      	ldr	r3, [pc, #40]	; (800a788 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x9c>)
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	6013      	str	r3, [r2, #0]
 800a762:	e7da      	b.n	800a71a <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x2e>
 800a764:	4a08      	ldr	r2, [pc, #32]	; (800a788 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x9c>)
 800a766:	6812      	ldr	r2, [r2, #0]
 800a768:	601a      	str	r2, [r3, #0]
 800a76a:	e7de      	b.n	800a72a <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x3e>
 800a76c:	4b06      	ldr	r3, [pc, #24]	; (800a788 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x9c>)
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	6013      	str	r3, [r2, #0]
 800a772:	e7ef      	b.n	800a754 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x68>
 800a774:	4a04      	ldr	r2, [pc, #16]	; (800a788 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x9c>)
 800a776:	6812      	ldr	r2, [r2, #0]
 800a778:	601a      	str	r2, [r3, #0]
 800a77a:	e7e6      	b.n	800a74a <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x5e>
 800a77c:	4b02      	ldr	r3, [pc, #8]	; (800a788 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x9c>)
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	6013      	str	r3, [r2, #0]
 800a782:	e7de      	b.n	800a742 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x56>
 800a784:	20000468 	.word	0x20000468
 800a788:	20000978 	.word	0x20000978
 800a78c:	200002f8 	.word	0x200002f8
 800a790:	2000043c 	.word	0x2000043c
 800a794:	2000013c 	.word	0x2000013c
 800a798:	200001f0 	.word	0x200001f0

0800a79c <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__size_function__Setup_Event__request>:
 800a79c:	6840      	ldr	r0, [r0, #4]
 800a79e:	4770      	bx	lr

0800a7a0 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__get_const_function__Setup_Event__request>:
 800a7a0:	6800      	ldr	r0, [r0, #0]
 800a7a2:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800a7a6:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800a7aa:	4770      	bx	lr

0800a7ac <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__fetch_function__Setup_Event__request>:
 800a7ac:	6803      	ldr	r3, [r0, #0]
 800a7ae:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800a7b2:	4694      	mov	ip, r2
 800a7b4:	b500      	push	{lr}
 800a7b6:	eb03 0e81 	add.w	lr, r3, r1, lsl #2
 800a7ba:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800a7be:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a7c2:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 800a7c6:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 800a7ca:	f85d fb04 	ldr.w	pc, [sp], #4
 800a7ce:	bf00      	nop

0800a7d0 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__assign_function__Setup_Event__request>:
 800a7d0:	6803      	ldr	r3, [r0, #0]
 800a7d2:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800a7d6:	b500      	push	{lr}
 800a7d8:	4696      	mov	lr, r2
 800a7da:	eb03 0c81 	add.w	ip, r3, r1, lsl #2
 800a7de:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800a7e2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a7e6:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 800a7ea:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 800a7ee:	f85d fb04 	ldr.w	pc, [sp], #4
 800a7f2:	bf00      	nop

0800a7f4 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__size_function__Setup_Event__response>:
 800a7f4:	6840      	ldr	r0, [r0, #4]
 800a7f6:	4770      	bx	lr

0800a7f8 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__get_const_function__Setup_Event__response>:
 800a7f8:	6800      	ldr	r0, [r0, #0]
 800a7fa:	4408      	add	r0, r1
 800a7fc:	4770      	bx	lr
 800a7fe:	bf00      	nop

0800a800 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__fetch_function__Setup_Event__response>:
 800a800:	6803      	ldr	r3, [r0, #0]
 800a802:	5c5b      	ldrb	r3, [r3, r1]
 800a804:	7013      	strb	r3, [r2, #0]
 800a806:	4770      	bx	lr

0800a808 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__assign_function__Setup_Event__response>:
 800a808:	6803      	ldr	r3, [r0, #0]
 800a80a:	7812      	ldrb	r2, [r2, #0]
 800a80c:	545a      	strb	r2, [r3, r1]
 800a80e:	4770      	bx	lr

0800a810 <racs_services__srv__Setup_Request__rosidl_typesupport_introspection_c__Setup_Request_init_function>:
 800a810:	f004 b9f4 	b.w	800ebfc <racs_services__srv__Setup_Request__init>

0800a814 <racs_services__srv__Setup_Request__rosidl_typesupport_introspection_c__Setup_Request_fini_function>:
 800a814:	f004 b9f6 	b.w	800ec04 <racs_services__srv__Setup_Request__fini>

0800a818 <racs_services__srv__Setup_Response__rosidl_typesupport_introspection_c__Setup_Response_init_function>:
 800a818:	f004 ba3e 	b.w	800ec98 <racs_services__srv__Setup_Response__init>

0800a81c <racs_services__srv__Setup_Response__rosidl_typesupport_introspection_c__Setup_Response_fini_function>:
 800a81c:	f004 ba40 	b.w	800eca0 <racs_services__srv__Setup_Response__fini>

0800a820 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__Setup_Event_init_function>:
 800a820:	f004 ba76 	b.w	800ed10 <racs_services__srv__Setup_Event__init>

0800a824 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__Setup_Event_fini_function>:
 800a824:	f004 ba96 	b.w	800ed54 <racs_services__srv__Setup_Event__fini>

0800a828 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__resize_function__Setup_Event__request>:
 800a828:	b510      	push	{r4, lr}
 800a82a:	4604      	mov	r4, r0
 800a82c:	b082      	sub	sp, #8
 800a82e:	9101      	str	r1, [sp, #4]
 800a830:	f004 fa1e 	bl	800ec70 <racs_services__srv__Setup_Request__Sequence__fini>
 800a834:	9901      	ldr	r1, [sp, #4]
 800a836:	4620      	mov	r0, r4
 800a838:	b002      	add	sp, #8
 800a83a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a83e:	f004 b9fd 	b.w	800ec3c <racs_services__srv__Setup_Request__Sequence__init>
 800a842:	bf00      	nop

0800a844 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__resize_function__Setup_Event__response>:
 800a844:	b510      	push	{r4, lr}
 800a846:	4604      	mov	r4, r0
 800a848:	b082      	sub	sp, #8
 800a84a:	9101      	str	r1, [sp, #4]
 800a84c:	f004 fa4c 	bl	800ece8 <racs_services__srv__Setup_Response__Sequence__fini>
 800a850:	9901      	ldr	r1, [sp, #4]
 800a852:	4620      	mov	r0, r4
 800a854:	b002      	add	sp, #8
 800a856:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a85a:	f004 ba2b 	b.w	800ecb4 <racs_services__srv__Setup_Response__Sequence__init>
 800a85e:	bf00      	nop

0800a860 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__get_function__Setup_Event__response>:
 800a860:	6800      	ldr	r0, [r0, #0]
 800a862:	4408      	add	r0, r1
 800a864:	4770      	bx	lr
 800a866:	bf00      	nop

0800a868 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__get_function__Setup_Event__request>:
 800a868:	6800      	ldr	r0, [r0, #0]
 800a86a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800a86e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800a872:	4770      	bx	lr

0800a874 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Request>:
 800a874:	4b04      	ldr	r3, [pc, #16]	; (800a888 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x14>)
 800a876:	681a      	ldr	r2, [r3, #0]
 800a878:	b10a      	cbz	r2, 800a87e <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0xa>
 800a87a:	4803      	ldr	r0, [pc, #12]	; (800a888 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x14>)
 800a87c:	4770      	bx	lr
 800a87e:	4a03      	ldr	r2, [pc, #12]	; (800a88c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x18>)
 800a880:	4801      	ldr	r0, [pc, #4]	; (800a888 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x14>)
 800a882:	6812      	ldr	r2, [r2, #0]
 800a884:	601a      	str	r2, [r3, #0]
 800a886:	4770      	bx	lr
 800a888:	20000704 	.word	0x20000704
 800a88c:	20000978 	.word	0x20000978

0800a890 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Response>:
 800a890:	4b04      	ldr	r3, [pc, #16]	; (800a8a4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Response+0x14>)
 800a892:	681a      	ldr	r2, [r3, #0]
 800a894:	b10a      	cbz	r2, 800a89a <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Response+0xa>
 800a896:	4803      	ldr	r0, [pc, #12]	; (800a8a4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Response+0x14>)
 800a898:	4770      	bx	lr
 800a89a:	4a03      	ldr	r2, [pc, #12]	; (800a8a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Response+0x18>)
 800a89c:	4801      	ldr	r0, [pc, #4]	; (800a8a4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Response+0x14>)
 800a89e:	6812      	ldr	r2, [r2, #0]
 800a8a0:	601a      	str	r2, [r3, #0]
 800a8a2:	4770      	bx	lr
 800a8a4:	20000758 	.word	0x20000758
 800a8a8:	20000978 	.word	0x20000978

0800a8ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event>:
 800a8ac:	b508      	push	{r3, lr}
 800a8ae:	f001 fdcd 	bl	800c44c <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800a8b2:	4913      	ldr	r1, [pc, #76]	; (800a900 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x54>)
 800a8b4:	4b13      	ldr	r3, [pc, #76]	; (800a904 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x58>)
 800a8b6:	680a      	ldr	r2, [r1, #0]
 800a8b8:	60d8      	str	r0, [r3, #12]
 800a8ba:	b152      	cbz	r2, 800a8d2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x26>
 800a8bc:	4a12      	ldr	r2, [pc, #72]	; (800a908 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x5c>)
 800a8be:	6499      	str	r1, [r3, #72]	; 0x48
 800a8c0:	6811      	ldr	r1, [r2, #0]
 800a8c2:	b171      	cbz	r1, 800a8e2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x36>
 800a8c4:	4911      	ldr	r1, [pc, #68]	; (800a90c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x60>)
 800a8c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800a8ca:	680b      	ldr	r3, [r1, #0]
 800a8cc:	b193      	cbz	r3, 800a8f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x48>
 800a8ce:	480f      	ldr	r0, [pc, #60]	; (800a90c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x60>)
 800a8d0:	bd08      	pop	{r3, pc}
 800a8d2:	4a0f      	ldr	r2, [pc, #60]	; (800a910 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x64>)
 800a8d4:	6499      	str	r1, [r3, #72]	; 0x48
 800a8d6:	6812      	ldr	r2, [r2, #0]
 800a8d8:	600a      	str	r2, [r1, #0]
 800a8da:	4a0b      	ldr	r2, [pc, #44]	; (800a908 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x5c>)
 800a8dc:	6811      	ldr	r1, [r2, #0]
 800a8de:	2900      	cmp	r1, #0
 800a8e0:	d1f0      	bne.n	800a8c4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x18>
 800a8e2:	490b      	ldr	r1, [pc, #44]	; (800a910 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x64>)
 800a8e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800a8e8:	6809      	ldr	r1, [r1, #0]
 800a8ea:	6011      	str	r1, [r2, #0]
 800a8ec:	4907      	ldr	r1, [pc, #28]	; (800a90c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x60>)
 800a8ee:	680b      	ldr	r3, [r1, #0]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d1ec      	bne.n	800a8ce <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x22>
 800a8f4:	4b06      	ldr	r3, [pc, #24]	; (800a910 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x64>)
 800a8f6:	4805      	ldr	r0, [pc, #20]	; (800a90c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x60>)
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	600b      	str	r3, [r1, #0]
 800a8fc:	bd08      	pop	{r3, pc}
 800a8fe:	bf00      	nop
 800a900:	20000704 	.word	0x20000704
 800a904:	20000494 	.word	0x20000494
 800a908:	20000758 	.word	0x20000758
 800a90c:	20000548 	.word	0x20000548
 800a910:	20000978 	.word	0x20000978

0800a914 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup>:
 800a914:	4b25      	ldr	r3, [pc, #148]	; (800a9ac <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x98>)
 800a916:	681a      	ldr	r2, [r3, #0]
 800a918:	b510      	push	{r4, lr}
 800a91a:	b142      	cbz	r2, 800a92e <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x1a>
 800a91c:	685c      	ldr	r4, [r3, #4]
 800a91e:	68a3      	ldr	r3, [r4, #8]
 800a920:	b163      	cbz	r3, 800a93c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x28>
 800a922:	68e3      	ldr	r3, [r4, #12]
 800a924:	b193      	cbz	r3, 800a94c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x38>
 800a926:	6923      	ldr	r3, [r4, #16]
 800a928:	b1c3      	cbz	r3, 800a95c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x48>
 800a92a:	4820      	ldr	r0, [pc, #128]	; (800a9ac <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x98>)
 800a92c:	bd10      	pop	{r4, pc}
 800a92e:	4a20      	ldr	r2, [pc, #128]	; (800a9b0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x9c>)
 800a930:	685c      	ldr	r4, [r3, #4]
 800a932:	6812      	ldr	r2, [r2, #0]
 800a934:	601a      	str	r2, [r3, #0]
 800a936:	68a3      	ldr	r3, [r4, #8]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d1f2      	bne.n	800a922 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0xe>
 800a93c:	4a1d      	ldr	r2, [pc, #116]	; (800a9b4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0xa0>)
 800a93e:	6813      	ldr	r3, [r2, #0]
 800a940:	b303      	cbz	r3, 800a984 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x70>
 800a942:	6853      	ldr	r3, [r2, #4]
 800a944:	60a3      	str	r3, [r4, #8]
 800a946:	68e3      	ldr	r3, [r4, #12]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d1ec      	bne.n	800a926 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x12>
 800a94c:	4b1a      	ldr	r3, [pc, #104]	; (800a9b8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0xa4>)
 800a94e:	681a      	ldr	r2, [r3, #0]
 800a950:	b1e2      	cbz	r2, 800a98c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x78>
 800a952:	685b      	ldr	r3, [r3, #4]
 800a954:	60e3      	str	r3, [r4, #12]
 800a956:	6923      	ldr	r3, [r4, #16]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d1e6      	bne.n	800a92a <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x16>
 800a95c:	f001 fd76 	bl	800c44c <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800a960:	4a14      	ldr	r2, [pc, #80]	; (800a9b4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0xa0>)
 800a962:	4916      	ldr	r1, [pc, #88]	; (800a9bc <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0xa8>)
 800a964:	6813      	ldr	r3, [r2, #0]
 800a966:	60c8      	str	r0, [r1, #12]
 800a968:	b1e3      	cbz	r3, 800a9a4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x90>
 800a96a:	4b13      	ldr	r3, [pc, #76]	; (800a9b8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0xa4>)
 800a96c:	648a      	str	r2, [r1, #72]	; 0x48
 800a96e:	681a      	ldr	r2, [r3, #0]
 800a970:	b1a2      	cbz	r2, 800a99c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x88>
 800a972:	4a13      	ldr	r2, [pc, #76]	; (800a9c0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0xac>)
 800a974:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 800a978:	6813      	ldr	r3, [r2, #0]
 800a97a:	b15b      	cbz	r3, 800a994 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x80>
 800a97c:	6853      	ldr	r3, [r2, #4]
 800a97e:	480b      	ldr	r0, [pc, #44]	; (800a9ac <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x98>)
 800a980:	6123      	str	r3, [r4, #16]
 800a982:	bd10      	pop	{r4, pc}
 800a984:	4b0a      	ldr	r3, [pc, #40]	; (800a9b0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x9c>)
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	6013      	str	r3, [r2, #0]
 800a98a:	e7da      	b.n	800a942 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x2e>
 800a98c:	4a08      	ldr	r2, [pc, #32]	; (800a9b0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x9c>)
 800a98e:	6812      	ldr	r2, [r2, #0]
 800a990:	601a      	str	r2, [r3, #0]
 800a992:	e7de      	b.n	800a952 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x3e>
 800a994:	4b06      	ldr	r3, [pc, #24]	; (800a9b0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x9c>)
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	6013      	str	r3, [r2, #0]
 800a99a:	e7ef      	b.n	800a97c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x68>
 800a99c:	4a04      	ldr	r2, [pc, #16]	; (800a9b0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x9c>)
 800a99e:	6812      	ldr	r2, [r2, #0]
 800a9a0:	601a      	str	r2, [r3, #0]
 800a9a2:	e7e6      	b.n	800a972 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x5e>
 800a9a4:	4b02      	ldr	r3, [pc, #8]	; (800a9b0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x9c>)
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	6013      	str	r3, [r2, #0]
 800a9aa:	e7de      	b.n	800a96a <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x56>
 800a9ac:	20000784 	.word	0x20000784
 800a9b0:	20000978 	.word	0x20000978
 800a9b4:	20000704 	.word	0x20000704
 800a9b8:	20000758 	.word	0x20000758
 800a9bc:	20000494 	.word	0x20000494
 800a9c0:	20000548 	.word	0x20000548

0800a9c4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Control_Request>:
 800a9c4:	4800      	ldr	r0, [pc, #0]	; (800a9c8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x4>)
 800a9c6:	4770      	bx	lr
 800a9c8:	20000804 	.word	0x20000804

0800a9cc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Control_Response>:
 800a9cc:	4800      	ldr	r0, [pc, #0]	; (800a9d0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Control_Response+0x4>)
 800a9ce:	4770      	bx	lr
 800a9d0:	2000081c 	.word	0x2000081c

0800a9d4 <_Control_Event__max_serialized_size>:
 800a9d4:	b500      	push	{lr}
 800a9d6:	b083      	sub	sp, #12
 800a9d8:	2301      	movs	r3, #1
 800a9da:	2100      	movs	r1, #0
 800a9dc:	f10d 0007 	add.w	r0, sp, #7
 800a9e0:	f88d 3007 	strb.w	r3, [sp, #7]
 800a9e4:	f001 fde2 	bl	800c5ac <max_serialized_size_service_msgs__msg__ServiceEventInfo>
 800a9e8:	b003      	add	sp, #12
 800a9ea:	f85d fb04 	ldr.w	pc, [sp], #4
 800a9ee:	bf00      	nop

0800a9f0 <get_serialized_size_racs_services__srv__Control_Request>:
 800a9f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9f2:	4604      	mov	r4, r0
 800a9f4:	b1d8      	cbz	r0, 800aa2e <get_serialized_size_racs_services__srv__Control_Request+0x3e>
 800a9f6:	460d      	mov	r5, r1
 800a9f8:	2101      	movs	r1, #1
 800a9fa:	1c6e      	adds	r6, r5, #1
 800a9fc:	4628      	mov	r0, r5
 800a9fe:	f003 fa47 	bl	800de90 <ucdr_alignment>
 800aa02:	2101      	movs	r1, #1
 800aa04:	4406      	add	r6, r0
 800aa06:	4630      	mov	r0, r6
 800aa08:	f003 fa42 	bl	800de90 <ucdr_alignment>
 800aa0c:	2101      	movs	r1, #1
 800aa0e:	1847      	adds	r7, r0, r1
 800aa10:	4437      	add	r7, r6
 800aa12:	4638      	mov	r0, r7
 800aa14:	f003 fa3c 	bl	800de90 <ucdr_alignment>
 800aa18:	68a6      	ldr	r6, [r4, #8]
 800aa1a:	1c44      	adds	r4, r0, #1
 800aa1c:	2104      	movs	r1, #4
 800aa1e:	443c      	add	r4, r7
 800aa20:	4620      	mov	r0, r4
 800aa22:	f003 fa35 	bl	800de90 <ucdr_alignment>
 800aa26:	1d03      	adds	r3, r0, #4
 800aa28:	441c      	add	r4, r3
 800aa2a:	b90e      	cbnz	r6, 800aa30 <get_serialized_size_racs_services__srv__Control_Request+0x40>
 800aa2c:	1b60      	subs	r0, r4, r5
 800aa2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa30:	4620      	mov	r0, r4
 800aa32:	2101      	movs	r1, #1
 800aa34:	f003 fa2c 	bl	800de90 <ucdr_alignment>
 800aa38:	1933      	adds	r3, r6, r4
 800aa3a:	181c      	adds	r4, r3, r0
 800aa3c:	1b60      	subs	r0, r4, r5
 800aa3e:	e7f6      	b.n	800aa2e <get_serialized_size_racs_services__srv__Control_Request+0x3e>

0800aa40 <get_serialized_size_racs_services__srv__Control_Response.part.0>:
 800aa40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa42:	460e      	mov	r6, r1
 800aa44:	4607      	mov	r7, r0
 800aa46:	2101      	movs	r1, #1
 800aa48:	1c75      	adds	r5, r6, #1
 800aa4a:	4630      	mov	r0, r6
 800aa4c:	f003 fa20 	bl	800de90 <ucdr_alignment>
 800aa50:	2101      	movs	r1, #1
 800aa52:	4405      	add	r5, r0
 800aa54:	4628      	mov	r0, r5
 800aa56:	f003 fa1b 	bl	800de90 <ucdr_alignment>
 800aa5a:	2101      	movs	r1, #1
 800aa5c:	1844      	adds	r4, r0, r1
 800aa5e:	4425      	add	r5, r4
 800aa60:	4628      	mov	r0, r5
 800aa62:	f003 fa15 	bl	800de90 <ucdr_alignment>
 800aa66:	2101      	movs	r1, #1
 800aa68:	1844      	adds	r4, r0, r1
 800aa6a:	442c      	add	r4, r5
 800aa6c:	4620      	mov	r0, r4
 800aa6e:	f003 fa0f 	bl	800de90 <ucdr_alignment>
 800aa72:	3001      	adds	r0, #1
 800aa74:	2104      	movs	r1, #4
 800aa76:	68bd      	ldr	r5, [r7, #8]
 800aa78:	4404      	add	r4, r0
 800aa7a:	4620      	mov	r0, r4
 800aa7c:	f003 fa08 	bl	800de90 <ucdr_alignment>
 800aa80:	3004      	adds	r0, #4
 800aa82:	4404      	add	r4, r0
 800aa84:	b90d      	cbnz	r5, 800aa8a <get_serialized_size_racs_services__srv__Control_Response.part.0+0x4a>
 800aa86:	1ba0      	subs	r0, r4, r6
 800aa88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa8a:	4620      	mov	r0, r4
 800aa8c:	442c      	add	r4, r5
 800aa8e:	2101      	movs	r1, #1
 800aa90:	f003 f9fe 	bl	800de90 <ucdr_alignment>
 800aa94:	4404      	add	r4, r0
 800aa96:	1ba0      	subs	r0, r4, r6
 800aa98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa9a:	bf00      	nop

0800aa9c <get_serialized_size_racs_services__srv__Control_Response>:
 800aa9c:	b108      	cbz	r0, 800aaa2 <get_serialized_size_racs_services__srv__Control_Response+0x6>
 800aa9e:	f7ff bfcf 	b.w	800aa40 <get_serialized_size_racs_services__srv__Control_Response.part.0>
 800aaa2:	4770      	bx	lr

0800aaa4 <_Control_Response__get_serialized_size>:
 800aaa4:	b110      	cbz	r0, 800aaac <_Control_Response__get_serialized_size+0x8>
 800aaa6:	2100      	movs	r1, #0
 800aaa8:	f7ff bfca 	b.w	800aa40 <get_serialized_size_racs_services__srv__Control_Response.part.0>
 800aaac:	4770      	bx	lr
 800aaae:	bf00      	nop

0800aab0 <_Control_Request__cdr_deserialize>:
 800aab0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aab2:	460c      	mov	r4, r1
 800aab4:	b083      	sub	sp, #12
 800aab6:	b1e9      	cbz	r1, 800aaf4 <_Control_Request__cdr_deserialize+0x44>
 800aab8:	4605      	mov	r5, r0
 800aaba:	f001 ff91 	bl	800c9e0 <ucdr_deserialize_uint8_t>
 800aabe:	1c61      	adds	r1, r4, #1
 800aac0:	4628      	mov	r0, r5
 800aac2:	f001 ff8d 	bl	800c9e0 <ucdr_deserialize_uint8_t>
 800aac6:	1ca1      	adds	r1, r4, #2
 800aac8:	4628      	mov	r0, r5
 800aaca:	f001 ff89 	bl	800c9e0 <ucdr_deserialize_uint8_t>
 800aace:	68e7      	ldr	r7, [r4, #12]
 800aad0:	ab01      	add	r3, sp, #4
 800aad2:	6861      	ldr	r1, [r4, #4]
 800aad4:	463a      	mov	r2, r7
 800aad6:	4628      	mov	r0, r5
 800aad8:	f003 fa88 	bl	800dfec <ucdr_deserialize_sequence_uint8_t>
 800aadc:	9b01      	ldr	r3, [sp, #4]
 800aade:	4606      	mov	r6, r0
 800aae0:	b920      	cbnz	r0, 800aaec <_Control_Request__cdr_deserialize+0x3c>
 800aae2:	429f      	cmp	r7, r3
 800aae4:	d30a      	bcc.n	800aafc <_Control_Request__cdr_deserialize+0x4c>
 800aae6:	4630      	mov	r0, r6
 800aae8:	b003      	add	sp, #12
 800aaea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aaec:	4630      	mov	r0, r6
 800aaee:	60a3      	str	r3, [r4, #8]
 800aaf0:	b003      	add	sp, #12
 800aaf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aaf4:	460e      	mov	r6, r1
 800aaf6:	4630      	mov	r0, r6
 800aaf8:	b003      	add	sp, #12
 800aafa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aafc:	2101      	movs	r1, #1
 800aafe:	4628      	mov	r0, r5
 800ab00:	75ae      	strb	r6, [r5, #22]
 800ab02:	7569      	strb	r1, [r5, #21]
 800ab04:	60a6      	str	r6, [r4, #8]
 800ab06:	f003 f9db 	bl	800dec0 <ucdr_align_to>
 800ab0a:	4628      	mov	r0, r5
 800ab0c:	9901      	ldr	r1, [sp, #4]
 800ab0e:	f003 fa0f 	bl	800df30 <ucdr_advance_buffer>
 800ab12:	4630      	mov	r0, r6
 800ab14:	b003      	add	sp, #12
 800ab16:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ab18 <_Control_Response__cdr_deserialize>:
 800ab18:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab1a:	460c      	mov	r4, r1
 800ab1c:	b083      	sub	sp, #12
 800ab1e:	b309      	cbz	r1, 800ab64 <_Control_Response__cdr_deserialize+0x4c>
 800ab20:	4605      	mov	r5, r0
 800ab22:	f001 ff5d 	bl	800c9e0 <ucdr_deserialize_uint8_t>
 800ab26:	1c61      	adds	r1, r4, #1
 800ab28:	4628      	mov	r0, r5
 800ab2a:	f001 ff59 	bl	800c9e0 <ucdr_deserialize_uint8_t>
 800ab2e:	1ca1      	adds	r1, r4, #2
 800ab30:	4628      	mov	r0, r5
 800ab32:	f001 ff55 	bl	800c9e0 <ucdr_deserialize_uint8_t>
 800ab36:	1ce1      	adds	r1, r4, #3
 800ab38:	4628      	mov	r0, r5
 800ab3a:	f001 ff51 	bl	800c9e0 <ucdr_deserialize_uint8_t>
 800ab3e:	68e7      	ldr	r7, [r4, #12]
 800ab40:	ab01      	add	r3, sp, #4
 800ab42:	6861      	ldr	r1, [r4, #4]
 800ab44:	463a      	mov	r2, r7
 800ab46:	4628      	mov	r0, r5
 800ab48:	f003 fa50 	bl	800dfec <ucdr_deserialize_sequence_uint8_t>
 800ab4c:	9b01      	ldr	r3, [sp, #4]
 800ab4e:	4606      	mov	r6, r0
 800ab50:	b920      	cbnz	r0, 800ab5c <_Control_Response__cdr_deserialize+0x44>
 800ab52:	429f      	cmp	r7, r3
 800ab54:	d30a      	bcc.n	800ab6c <_Control_Response__cdr_deserialize+0x54>
 800ab56:	4630      	mov	r0, r6
 800ab58:	b003      	add	sp, #12
 800ab5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab5c:	4630      	mov	r0, r6
 800ab5e:	60a3      	str	r3, [r4, #8]
 800ab60:	b003      	add	sp, #12
 800ab62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab64:	460e      	mov	r6, r1
 800ab66:	4630      	mov	r0, r6
 800ab68:	b003      	add	sp, #12
 800ab6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab6c:	2101      	movs	r1, #1
 800ab6e:	4628      	mov	r0, r5
 800ab70:	75ae      	strb	r6, [r5, #22]
 800ab72:	7569      	strb	r1, [r5, #21]
 800ab74:	60a6      	str	r6, [r4, #8]
 800ab76:	f003 f9a3 	bl	800dec0 <ucdr_align_to>
 800ab7a:	4628      	mov	r0, r5
 800ab7c:	9901      	ldr	r1, [sp, #4]
 800ab7e:	f003 f9d7 	bl	800df30 <ucdr_advance_buffer>
 800ab82:	4630      	mov	r0, r6
 800ab84:	b003      	add	sp, #12
 800ab86:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ab88 <_Control_Request__cdr_serialize>:
 800ab88:	b1a8      	cbz	r0, 800abb6 <_Control_Request__cdr_serialize+0x2e>
 800ab8a:	b538      	push	{r3, r4, r5, lr}
 800ab8c:	460d      	mov	r5, r1
 800ab8e:	4604      	mov	r4, r0
 800ab90:	7801      	ldrb	r1, [r0, #0]
 800ab92:	4628      	mov	r0, r5
 800ab94:	f001 ff0e 	bl	800c9b4 <ucdr_serialize_uint8_t>
 800ab98:	7861      	ldrb	r1, [r4, #1]
 800ab9a:	4628      	mov	r0, r5
 800ab9c:	f001 ff0a 	bl	800c9b4 <ucdr_serialize_uint8_t>
 800aba0:	78a1      	ldrb	r1, [r4, #2]
 800aba2:	4628      	mov	r0, r5
 800aba4:	f001 ff06 	bl	800c9b4 <ucdr_serialize_uint8_t>
 800aba8:	4628      	mov	r0, r5
 800abaa:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 800abae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800abb2:	f003 ba09 	b.w	800dfc8 <ucdr_serialize_sequence_uint8_t>
 800abb6:	4770      	bx	lr

0800abb8 <_Control_Response__cdr_serialize>:
 800abb8:	b1c8      	cbz	r0, 800abee <_Control_Response__cdr_serialize+0x36>
 800abba:	b538      	push	{r3, r4, r5, lr}
 800abbc:	460d      	mov	r5, r1
 800abbe:	4604      	mov	r4, r0
 800abc0:	7801      	ldrb	r1, [r0, #0]
 800abc2:	4628      	mov	r0, r5
 800abc4:	f001 fef6 	bl	800c9b4 <ucdr_serialize_uint8_t>
 800abc8:	7861      	ldrb	r1, [r4, #1]
 800abca:	4628      	mov	r0, r5
 800abcc:	f001 fef2 	bl	800c9b4 <ucdr_serialize_uint8_t>
 800abd0:	78a1      	ldrb	r1, [r4, #2]
 800abd2:	4628      	mov	r0, r5
 800abd4:	f001 feee 	bl	800c9b4 <ucdr_serialize_uint8_t>
 800abd8:	78e1      	ldrb	r1, [r4, #3]
 800abda:	4628      	mov	r0, r5
 800abdc:	f001 feea 	bl	800c9b4 <ucdr_serialize_uint8_t>
 800abe0:	4628      	mov	r0, r5
 800abe2:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 800abe6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800abea:	f003 b9ed 	b.w	800dfc8 <ucdr_serialize_sequence_uint8_t>
 800abee:	4770      	bx	lr

0800abf0 <get_serialized_size_racs_services__srv__Control_Event.part.0>:
 800abf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abf4:	460e      	mov	r6, r1
 800abf6:	4605      	mov	r5, r0
 800abf8:	f001 fc3e 	bl	800c478 <get_serialized_size_service_msgs__msg__ServiceEventInfo>
 800abfc:	2104      	movs	r1, #4
 800abfe:	1837      	adds	r7, r6, r0
 800ac00:	f8d5 902c 	ldr.w	r9, [r5, #44]	; 0x2c
 800ac04:	4638      	mov	r0, r7
 800ac06:	f003 f943 	bl	800de90 <ucdr_alignment>
 800ac0a:	3004      	adds	r0, #4
 800ac0c:	4407      	add	r7, r0
 800ac0e:	f1b9 0f00 	cmp.w	r9, #0
 800ac12:	d019      	beq.n	800ac48 <get_serialized_size_racs_services__srv__Control_Event.part.0+0x58>
 800ac14:	f04f 0800 	mov.w	r8, #0
 800ac18:	f8df a07c 	ldr.w	sl, [pc, #124]	; 800ac98 <get_serialized_size_racs_services__srv__Control_Event.part.0+0xa8>
 800ac1c:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 800ac1e:	4639      	mov	r1, r7
 800ac20:	f8da 3004 	ldr.w	r3, [sl, #4]
 800ac24:	eb00 1008 	add.w	r0, r0, r8, lsl #4
 800ac28:	f108 0801 	add.w	r8, r8, #1
 800ac2c:	695b      	ldr	r3, [r3, #20]
 800ac2e:	4798      	blx	r3
 800ac30:	4604      	mov	r4, r0
 800ac32:	4638      	mov	r0, r7
 800ac34:	2c04      	cmp	r4, #4
 800ac36:	4621      	mov	r1, r4
 800ac38:	bf28      	it	cs
 800ac3a:	2104      	movcs	r1, #4
 800ac3c:	f003 f928 	bl	800de90 <ucdr_alignment>
 800ac40:	45c1      	cmp	r9, r8
 800ac42:	4420      	add	r0, r4
 800ac44:	4407      	add	r7, r0
 800ac46:	d1e9      	bne.n	800ac1c <get_serialized_size_racs_services__srv__Control_Event.part.0+0x2c>
 800ac48:	4638      	mov	r0, r7
 800ac4a:	2104      	movs	r1, #4
 800ac4c:	f8d5 8038 	ldr.w	r8, [r5, #56]	; 0x38
 800ac50:	f003 f91e 	bl	800de90 <ucdr_alignment>
 800ac54:	4407      	add	r7, r0
 800ac56:	3704      	adds	r7, #4
 800ac58:	f1b8 0f00 	cmp.w	r8, #0
 800ac5c:	d019      	beq.n	800ac92 <get_serialized_size_racs_services__srv__Control_Event.part.0+0xa2>
 800ac5e:	f04f 0900 	mov.w	r9, #0
 800ac62:	f8df a038 	ldr.w	sl, [pc, #56]	; 800ac9c <get_serialized_size_racs_services__srv__Control_Event.part.0+0xac>
 800ac66:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800ac68:	4639      	mov	r1, r7
 800ac6a:	f8da 3004 	ldr.w	r3, [sl, #4]
 800ac6e:	eb00 1009 	add.w	r0, r0, r9, lsl #4
 800ac72:	f109 0901 	add.w	r9, r9, #1
 800ac76:	695b      	ldr	r3, [r3, #20]
 800ac78:	4798      	blx	r3
 800ac7a:	4604      	mov	r4, r0
 800ac7c:	4638      	mov	r0, r7
 800ac7e:	2c04      	cmp	r4, #4
 800ac80:	4621      	mov	r1, r4
 800ac82:	bf28      	it	cs
 800ac84:	2104      	movcs	r1, #4
 800ac86:	f003 f903 	bl	800de90 <ucdr_alignment>
 800ac8a:	45c8      	cmp	r8, r9
 800ac8c:	4420      	add	r0, r4
 800ac8e:	4407      	add	r7, r0
 800ac90:	d1e9      	bne.n	800ac66 <get_serialized_size_racs_services__srv__Control_Event.part.0+0x76>
 800ac92:	1bb8      	subs	r0, r7, r6
 800ac94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac98:	20000804 	.word	0x20000804
 800ac9c:	2000081c 	.word	0x2000081c

0800aca0 <get_serialized_size_racs_services__srv__Control_Event>:
 800aca0:	b108      	cbz	r0, 800aca6 <get_serialized_size_racs_services__srv__Control_Event+0x6>
 800aca2:	f7ff bfa5 	b.w	800abf0 <get_serialized_size_racs_services__srv__Control_Event.part.0>
 800aca6:	4770      	bx	lr

0800aca8 <_Control_Event__get_serialized_size>:
 800aca8:	b110      	cbz	r0, 800acb0 <_Control_Event__get_serialized_size+0x8>
 800acaa:	2100      	movs	r1, #0
 800acac:	f7ff bfa0 	b.w	800abf0 <get_serialized_size_racs_services__srv__Control_Event.part.0>
 800acb0:	4770      	bx	lr
 800acb2:	bf00      	nop

0800acb4 <_Control_Event__cdr_deserialize>:
 800acb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800acb6:	460d      	mov	r5, r1
 800acb8:	b083      	sub	sp, #12
 800acba:	2900      	cmp	r1, #0
 800acbc:	d041      	beq.n	800ad42 <_Control_Event__cdr_deserialize+0x8e>
 800acbe:	4606      	mov	r6, r0
 800acc0:	f001 fc9a 	bl	800c5f8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800acc4:	4603      	mov	r3, r0
 800acc6:	4629      	mov	r1, r5
 800acc8:	4630      	mov	r0, r6
 800acca:	685b      	ldr	r3, [r3, #4]
 800accc:	68db      	ldr	r3, [r3, #12]
 800acce:	4798      	blx	r3
 800acd0:	4630      	mov	r0, r6
 800acd2:	a901      	add	r1, sp, #4
 800acd4:	f002 f9b4 	bl	800d040 <ucdr_deserialize_uint32_t>
 800acd8:	9b01      	ldr	r3, [sp, #4]
 800acda:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800acdc:	429a      	cmp	r2, r3
 800acde:	d32d      	bcc.n	800ad3c <_Control_Event__cdr_deserialize+0x88>
 800ace0:	62eb      	str	r3, [r5, #44]	; 0x2c
 800ace2:	b17b      	cbz	r3, 800ad04 <_Control_Event__cdr_deserialize+0x50>
 800ace4:	2400      	movs	r4, #0
 800ace6:	4f18      	ldr	r7, [pc, #96]	; (800ad48 <_Control_Event__cdr_deserialize+0x94>)
 800ace8:	e002      	b.n	800acf0 <_Control_Event__cdr_deserialize+0x3c>
 800acea:	9b01      	ldr	r3, [sp, #4]
 800acec:	429c      	cmp	r4, r3
 800acee:	d209      	bcs.n	800ad04 <_Control_Event__cdr_deserialize+0x50>
 800acf0:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800acf2:	4630      	mov	r0, r6
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 800acfa:	3401      	adds	r4, #1
 800acfc:	68db      	ldr	r3, [r3, #12]
 800acfe:	4798      	blx	r3
 800ad00:	2800      	cmp	r0, #0
 800ad02:	d1f2      	bne.n	800acea <_Control_Event__cdr_deserialize+0x36>
 800ad04:	a901      	add	r1, sp, #4
 800ad06:	4630      	mov	r0, r6
 800ad08:	f002 f99a 	bl	800d040 <ucdr_deserialize_uint32_t>
 800ad0c:	9b01      	ldr	r3, [sp, #4]
 800ad0e:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 800ad10:	429a      	cmp	r2, r3
 800ad12:	d313      	bcc.n	800ad3c <_Control_Event__cdr_deserialize+0x88>
 800ad14:	63ab      	str	r3, [r5, #56]	; 0x38
 800ad16:	b193      	cbz	r3, 800ad3e <_Control_Event__cdr_deserialize+0x8a>
 800ad18:	2400      	movs	r4, #0
 800ad1a:	4f0c      	ldr	r7, [pc, #48]	; (800ad4c <_Control_Event__cdr_deserialize+0x98>)
 800ad1c:	e002      	b.n	800ad24 <_Control_Event__cdr_deserialize+0x70>
 800ad1e:	9b01      	ldr	r3, [sp, #4]
 800ad20:	429c      	cmp	r4, r3
 800ad22:	d20c      	bcs.n	800ad3e <_Control_Event__cdr_deserialize+0x8a>
 800ad24:	6b69      	ldr	r1, [r5, #52]	; 0x34
 800ad26:	4630      	mov	r0, r6
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 800ad2e:	3401      	adds	r4, #1
 800ad30:	68db      	ldr	r3, [r3, #12]
 800ad32:	4798      	blx	r3
 800ad34:	2800      	cmp	r0, #0
 800ad36:	d1f2      	bne.n	800ad1e <_Control_Event__cdr_deserialize+0x6a>
 800ad38:	b003      	add	sp, #12
 800ad3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad3c:	2000      	movs	r0, #0
 800ad3e:	b003      	add	sp, #12
 800ad40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad42:	4608      	mov	r0, r1
 800ad44:	b003      	add	sp, #12
 800ad46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad48:	20000804 	.word	0x20000804
 800ad4c:	2000081c 	.word	0x2000081c

0800ad50 <_Control_Event__cdr_serialize>:
 800ad50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad54:	2800      	cmp	r0, #0
 800ad56:	d03a      	beq.n	800adce <_Control_Event__cdr_serialize+0x7e>
 800ad58:	4605      	mov	r5, r0
 800ad5a:	460e      	mov	r6, r1
 800ad5c:	f001 fc4c 	bl	800c5f8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800ad60:	4603      	mov	r3, r0
 800ad62:	4631      	mov	r1, r6
 800ad64:	4628      	mov	r0, r5
 800ad66:	685b      	ldr	r3, [r3, #4]
 800ad68:	689b      	ldr	r3, [r3, #8]
 800ad6a:	4798      	blx	r3
 800ad6c:	6aef      	ldr	r7, [r5, #44]	; 0x2c
 800ad6e:	4630      	mov	r0, r6
 800ad70:	4639      	mov	r1, r7
 800ad72:	f002 f835 	bl	800cde0 <ucdr_serialize_uint32_t>
 800ad76:	b188      	cbz	r0, 800ad9c <_Control_Event__cdr_serialize+0x4c>
 800ad78:	b187      	cbz	r7, 800ad9c <_Control_Event__cdr_serialize+0x4c>
 800ad7a:	2400      	movs	r4, #0
 800ad7c:	f8df 8058 	ldr.w	r8, [pc, #88]	; 800add8 <_Control_Event__cdr_serialize+0x88>
 800ad80:	e001      	b.n	800ad86 <_Control_Event__cdr_serialize+0x36>
 800ad82:	42a7      	cmp	r7, r4
 800ad84:	d00a      	beq.n	800ad9c <_Control_Event__cdr_serialize+0x4c>
 800ad86:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 800ad88:	4631      	mov	r1, r6
 800ad8a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ad8e:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800ad92:	3401      	adds	r4, #1
 800ad94:	689b      	ldr	r3, [r3, #8]
 800ad96:	4798      	blx	r3
 800ad98:	2800      	cmp	r0, #0
 800ad9a:	d1f2      	bne.n	800ad82 <_Control_Event__cdr_serialize+0x32>
 800ad9c:	6baf      	ldr	r7, [r5, #56]	; 0x38
 800ad9e:	4630      	mov	r0, r6
 800ada0:	4639      	mov	r1, r7
 800ada2:	f002 f81d 	bl	800cde0 <ucdr_serialize_uint32_t>
 800ada6:	4680      	mov	r8, r0
 800ada8:	b188      	cbz	r0, 800adce <_Control_Event__cdr_serialize+0x7e>
 800adaa:	b197      	cbz	r7, 800add2 <_Control_Event__cdr_serialize+0x82>
 800adac:	2400      	movs	r4, #0
 800adae:	f8df 902c 	ldr.w	r9, [pc, #44]	; 800addc <_Control_Event__cdr_serialize+0x8c>
 800adb2:	e001      	b.n	800adb8 <_Control_Event__cdr_serialize+0x68>
 800adb4:	42a7      	cmp	r7, r4
 800adb6:	d00c      	beq.n	800add2 <_Control_Event__cdr_serialize+0x82>
 800adb8:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800adba:	4631      	mov	r1, r6
 800adbc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800adc0:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800adc4:	3401      	adds	r4, #1
 800adc6:	689b      	ldr	r3, [r3, #8]
 800adc8:	4798      	blx	r3
 800adca:	2800      	cmp	r0, #0
 800adcc:	d1f2      	bne.n	800adb4 <_Control_Event__cdr_serialize+0x64>
 800adce:	f04f 0800 	mov.w	r8, #0
 800add2:	4640      	mov	r0, r8
 800add4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800add8:	20000804 	.word	0x20000804
 800addc:	2000081c 	.word	0x2000081c

0800ade0 <_Control_Request__max_serialized_size>:
 800ade0:	b538      	push	{r3, r4, r5, lr}
 800ade2:	2101      	movs	r1, #1
 800ade4:	2000      	movs	r0, #0
 800ade6:	f003 f853 	bl	800de90 <ucdr_alignment>
 800adea:	2101      	movs	r1, #1
 800adec:	1845      	adds	r5, r0, r1
 800adee:	4628      	mov	r0, r5
 800adf0:	f003 f84e 	bl	800de90 <ucdr_alignment>
 800adf4:	2101      	movs	r1, #1
 800adf6:	1844      	adds	r4, r0, r1
 800adf8:	442c      	add	r4, r5
 800adfa:	4620      	mov	r0, r4
 800adfc:	f003 f848 	bl	800de90 <ucdr_alignment>
 800ae00:	3001      	adds	r0, #1
 800ae02:	4420      	add	r0, r4
 800ae04:	bd38      	pop	{r3, r4, r5, pc}
 800ae06:	bf00      	nop

0800ae08 <_Control_Response__max_serialized_size>:
 800ae08:	b538      	push	{r3, r4, r5, lr}
 800ae0a:	2101      	movs	r1, #1
 800ae0c:	2000      	movs	r0, #0
 800ae0e:	f003 f83f 	bl	800de90 <ucdr_alignment>
 800ae12:	2101      	movs	r1, #1
 800ae14:	1845      	adds	r5, r0, r1
 800ae16:	4628      	mov	r0, r5
 800ae18:	f003 f83a 	bl	800de90 <ucdr_alignment>
 800ae1c:	2101      	movs	r1, #1
 800ae1e:	1844      	adds	r4, r0, r1
 800ae20:	442c      	add	r4, r5
 800ae22:	4620      	mov	r0, r4
 800ae24:	f003 f834 	bl	800de90 <ucdr_alignment>
 800ae28:	2101      	movs	r1, #1
 800ae2a:	4408      	add	r0, r1
 800ae2c:	4404      	add	r4, r0
 800ae2e:	4620      	mov	r0, r4
 800ae30:	f003 f82e 	bl	800de90 <ucdr_alignment>
 800ae34:	3001      	adds	r0, #1
 800ae36:	4420      	add	r0, r4
 800ae38:	bd38      	pop	{r3, r4, r5, pc}
 800ae3a:	bf00      	nop

0800ae3c <_Control_Request__get_serialized_size>:
 800ae3c:	b570      	push	{r4, r5, r6, lr}
 800ae3e:	4604      	mov	r4, r0
 800ae40:	b1c0      	cbz	r0, 800ae74 <_Control_Request__get_serialized_size+0x38>
 800ae42:	2101      	movs	r1, #1
 800ae44:	2000      	movs	r0, #0
 800ae46:	f003 f823 	bl	800de90 <ucdr_alignment>
 800ae4a:	2101      	movs	r1, #1
 800ae4c:	1846      	adds	r6, r0, r1
 800ae4e:	4630      	mov	r0, r6
 800ae50:	f003 f81e 	bl	800de90 <ucdr_alignment>
 800ae54:	2101      	movs	r1, #1
 800ae56:	1845      	adds	r5, r0, r1
 800ae58:	4435      	add	r5, r6
 800ae5a:	4628      	mov	r0, r5
 800ae5c:	f003 f818 	bl	800de90 <ucdr_alignment>
 800ae60:	3001      	adds	r0, #1
 800ae62:	2104      	movs	r1, #4
 800ae64:	68a6      	ldr	r6, [r4, #8]
 800ae66:	4405      	add	r5, r0
 800ae68:	4628      	mov	r0, r5
 800ae6a:	f003 f811 	bl	800de90 <ucdr_alignment>
 800ae6e:	1d04      	adds	r4, r0, #4
 800ae70:	442c      	add	r4, r5
 800ae72:	b90e      	cbnz	r6, 800ae78 <_Control_Request__get_serialized_size+0x3c>
 800ae74:	4620      	mov	r0, r4
 800ae76:	bd70      	pop	{r4, r5, r6, pc}
 800ae78:	4620      	mov	r0, r4
 800ae7a:	4434      	add	r4, r6
 800ae7c:	2101      	movs	r1, #1
 800ae7e:	f003 f807 	bl	800de90 <ucdr_alignment>
 800ae82:	4404      	add	r4, r0
 800ae84:	4620      	mov	r0, r4
 800ae86:	bd70      	pop	{r4, r5, r6, pc}

0800ae88 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Control_Event>:
 800ae88:	4800      	ldr	r0, [pc, #0]	; (800ae8c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x4>)
 800ae8a:	4770      	bx	lr
 800ae8c:	200007ec 	.word	0x200007ec

0800ae90 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__racs_services__srv__Control>:
 800ae90:	4800      	ldr	r0, [pc, #0]	; (800ae94 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__racs_services__srv__Control+0x4>)
 800ae92:	4770      	bx	lr
 800ae94:	200007c0 	.word	0x200007c0

0800ae98 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Setup_Request>:
 800ae98:	4800      	ldr	r0, [pc, #0]	; (800ae9c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x4>)
 800ae9a:	4770      	bx	lr
 800ae9c:	200008dc 	.word	0x200008dc

0800aea0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Setup_Response>:
 800aea0:	4800      	ldr	r0, [pc, #0]	; (800aea4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Setup_Response+0x4>)
 800aea2:	4770      	bx	lr
 800aea4:	200008f4 	.word	0x200008f4

0800aea8 <_Setup_Response__max_serialized_size>:
 800aea8:	2101      	movs	r1, #1
 800aeaa:	2000      	movs	r0, #0
 800aeac:	b508      	push	{r3, lr}
 800aeae:	f002 ffef 	bl	800de90 <ucdr_alignment>
 800aeb2:	3001      	adds	r0, #1
 800aeb4:	bd08      	pop	{r3, pc}
 800aeb6:	bf00      	nop

0800aeb8 <_Setup_Response__cdr_deserialize>:
 800aeb8:	b109      	cbz	r1, 800aebe <_Setup_Response__cdr_deserialize+0x6>
 800aeba:	f001 bd91 	b.w	800c9e0 <ucdr_deserialize_uint8_t>
 800aebe:	4608      	mov	r0, r1
 800aec0:	4770      	bx	lr
 800aec2:	bf00      	nop

0800aec4 <_Setup_Event__max_serialized_size>:
 800aec4:	b500      	push	{lr}
 800aec6:	b083      	sub	sp, #12
 800aec8:	2301      	movs	r3, #1
 800aeca:	2100      	movs	r1, #0
 800aecc:	f10d 0007 	add.w	r0, sp, #7
 800aed0:	f88d 3007 	strb.w	r3, [sp, #7]
 800aed4:	f001 fb6a 	bl	800c5ac <max_serialized_size_service_msgs__msg__ServiceEventInfo>
 800aed8:	b003      	add	sp, #12
 800aeda:	f85d fb04 	ldr.w	pc, [sp], #4
 800aede:	bf00      	nop

0800aee0 <get_serialized_size_racs_services__srv__Setup_Request.part.0>:
 800aee0:	b570      	push	{r4, r5, r6, lr}
 800aee2:	4604      	mov	r4, r0
 800aee4:	2101      	movs	r1, #1
 800aee6:	f002 ffd3 	bl	800de90 <ucdr_alignment>
 800aeea:	2104      	movs	r1, #4
 800aeec:	1c65      	adds	r5, r4, #1
 800aeee:	f1c4 0404 	rsb	r4, r4, #4
 800aef2:	4405      	add	r5, r0
 800aef4:	4628      	mov	r0, r5
 800aef6:	f002 ffcb 	bl	800de90 <ucdr_alignment>
 800aefa:	2104      	movs	r1, #4
 800aefc:	1846      	adds	r6, r0, r1
 800aefe:	442e      	add	r6, r5
 800af00:	4630      	mov	r0, r6
 800af02:	f002 ffc5 	bl	800de90 <ucdr_alignment>
 800af06:	2104      	movs	r1, #4
 800af08:	1845      	adds	r5, r0, r1
 800af0a:	442e      	add	r6, r5
 800af0c:	4630      	mov	r0, r6
 800af0e:	f002 ffbf 	bl	800de90 <ucdr_alignment>
 800af12:	2104      	movs	r1, #4
 800af14:	4408      	add	r0, r1
 800af16:	4406      	add	r6, r0
 800af18:	4630      	mov	r0, r6
 800af1a:	f002 ffb9 	bl	800de90 <ucdr_alignment>
 800af1e:	2104      	movs	r1, #4
 800af20:	1845      	adds	r5, r0, r1
 800af22:	4435      	add	r5, r6
 800af24:	4628      	mov	r0, r5
 800af26:	f002 ffb3 	bl	800de90 <ucdr_alignment>
 800af2a:	2104      	movs	r1, #4
 800af2c:	4408      	add	r0, r1
 800af2e:	4405      	add	r5, r0
 800af30:	4628      	mov	r0, r5
 800af32:	f002 ffad 	bl	800de90 <ucdr_alignment>
 800af36:	4420      	add	r0, r4
 800af38:	4428      	add	r0, r5
 800af3a:	bd70      	pop	{r4, r5, r6, pc}

0800af3c <get_serialized_size_racs_services__srv__Setup_Request>:
 800af3c:	b110      	cbz	r0, 800af44 <get_serialized_size_racs_services__srv__Setup_Request+0x8>
 800af3e:	4608      	mov	r0, r1
 800af40:	f7ff bfce 	b.w	800aee0 <get_serialized_size_racs_services__srv__Setup_Request.part.0>
 800af44:	4770      	bx	lr
 800af46:	bf00      	nop

0800af48 <_Setup_Request__get_serialized_size>:
 800af48:	b110      	cbz	r0, 800af50 <_Setup_Request__get_serialized_size+0x8>
 800af4a:	2000      	movs	r0, #0
 800af4c:	f7ff bfc8 	b.w	800aee0 <get_serialized_size_racs_services__srv__Setup_Request.part.0>
 800af50:	4770      	bx	lr
 800af52:	bf00      	nop

0800af54 <get_serialized_size_racs_services__srv__Setup_Response>:
 800af54:	b138      	cbz	r0, 800af66 <get_serialized_size_racs_services__srv__Setup_Response+0x12>
 800af56:	b508      	push	{r3, lr}
 800af58:	460b      	mov	r3, r1
 800af5a:	2101      	movs	r1, #1
 800af5c:	4618      	mov	r0, r3
 800af5e:	f002 ff97 	bl	800de90 <ucdr_alignment>
 800af62:	3001      	adds	r0, #1
 800af64:	bd08      	pop	{r3, pc}
 800af66:	4770      	bx	lr

0800af68 <_Setup_Request__cdr_deserialize>:
 800af68:	b538      	push	{r3, r4, r5, lr}
 800af6a:	460c      	mov	r4, r1
 800af6c:	b309      	cbz	r1, 800afb2 <_Setup_Request__cdr_deserialize+0x4a>
 800af6e:	4605      	mov	r5, r0
 800af70:	f001 fd36 	bl	800c9e0 <ucdr_deserialize_uint8_t>
 800af74:	1d21      	adds	r1, r4, #4
 800af76:	4628      	mov	r0, r5
 800af78:	f002 fea2 	bl	800dcc0 <ucdr_deserialize_float>
 800af7c:	f104 0108 	add.w	r1, r4, #8
 800af80:	4628      	mov	r0, r5
 800af82:	f002 fe9d 	bl	800dcc0 <ucdr_deserialize_float>
 800af86:	f104 010c 	add.w	r1, r4, #12
 800af8a:	4628      	mov	r0, r5
 800af8c:	f002 fe98 	bl	800dcc0 <ucdr_deserialize_float>
 800af90:	f104 0110 	add.w	r1, r4, #16
 800af94:	4628      	mov	r0, r5
 800af96:	f002 fe93 	bl	800dcc0 <ucdr_deserialize_float>
 800af9a:	f104 0114 	add.w	r1, r4, #20
 800af9e:	4628      	mov	r0, r5
 800afa0:	f002 fe8e 	bl	800dcc0 <ucdr_deserialize_float>
 800afa4:	f104 0118 	add.w	r1, r4, #24
 800afa8:	4628      	mov	r0, r5
 800afaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800afae:	f002 be87 	b.w	800dcc0 <ucdr_deserialize_float>
 800afb2:	4608      	mov	r0, r1
 800afb4:	bd38      	pop	{r3, r4, r5, pc}
 800afb6:	bf00      	nop

0800afb8 <_Setup_Response__cdr_serialize>:
 800afb8:	460a      	mov	r2, r1
 800afba:	b118      	cbz	r0, 800afc4 <_Setup_Response__cdr_serialize+0xc>
 800afbc:	7801      	ldrb	r1, [r0, #0]
 800afbe:	4610      	mov	r0, r2
 800afc0:	f001 bcf8 	b.w	800c9b4 <ucdr_serialize_uint8_t>
 800afc4:	4770      	bx	lr
 800afc6:	bf00      	nop

0800afc8 <_Setup_Request__cdr_serialize>:
 800afc8:	b330      	cbz	r0, 800b018 <_Setup_Request__cdr_serialize+0x50>
 800afca:	b538      	push	{r3, r4, r5, lr}
 800afcc:	460d      	mov	r5, r1
 800afce:	4604      	mov	r4, r0
 800afd0:	7801      	ldrb	r1, [r0, #0]
 800afd2:	4628      	mov	r0, r5
 800afd4:	f001 fcee 	bl	800c9b4 <ucdr_serialize_uint8_t>
 800afd8:	ed94 0a01 	vldr	s0, [r4, #4]
 800afdc:	4628      	mov	r0, r5
 800afde:	f002 fdd7 	bl	800db90 <ucdr_serialize_float>
 800afe2:	ed94 0a02 	vldr	s0, [r4, #8]
 800afe6:	4628      	mov	r0, r5
 800afe8:	f002 fdd2 	bl	800db90 <ucdr_serialize_float>
 800afec:	ed94 0a03 	vldr	s0, [r4, #12]
 800aff0:	4628      	mov	r0, r5
 800aff2:	f002 fdcd 	bl	800db90 <ucdr_serialize_float>
 800aff6:	ed94 0a04 	vldr	s0, [r4, #16]
 800affa:	4628      	mov	r0, r5
 800affc:	f002 fdc8 	bl	800db90 <ucdr_serialize_float>
 800b000:	ed94 0a05 	vldr	s0, [r4, #20]
 800b004:	4628      	mov	r0, r5
 800b006:	f002 fdc3 	bl	800db90 <ucdr_serialize_float>
 800b00a:	ed94 0a06 	vldr	s0, [r4, #24]
 800b00e:	4628      	mov	r0, r5
 800b010:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b014:	f002 bdbc 	b.w	800db90 <ucdr_serialize_float>
 800b018:	4770      	bx	lr
 800b01a:	bf00      	nop

0800b01c <get_serialized_size_racs_services__srv__Setup_Event.part.0>:
 800b01c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b020:	460e      	mov	r6, r1
 800b022:	4605      	mov	r5, r0
 800b024:	f001 fa28 	bl	800c478 <get_serialized_size_service_msgs__msg__ServiceEventInfo>
 800b028:	2104      	movs	r1, #4
 800b02a:	eb06 0800 	add.w	r8, r6, r0
 800b02e:	f8d5 902c 	ldr.w	r9, [r5, #44]	; 0x2c
 800b032:	4640      	mov	r0, r8
 800b034:	f002 ff2c 	bl	800de90 <ucdr_alignment>
 800b038:	3004      	adds	r0, #4
 800b03a:	4480      	add	r8, r0
 800b03c:	f1b9 0f00 	cmp.w	r9, #0
 800b040:	d019      	beq.n	800b076 <get_serialized_size_racs_services__srv__Setup_Event.part.0+0x5a>
 800b042:	2700      	movs	r7, #0
 800b044:	f8df a07c 	ldr.w	sl, [pc, #124]	; 800b0c4 <get_serialized_size_racs_services__srv__Setup_Event.part.0+0xa8>
 800b048:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800b04a:	ebc7 00c7 	rsb	r0, r7, r7, lsl #3
 800b04e:	f8da 3004 	ldr.w	r3, [sl, #4]
 800b052:	4641      	mov	r1, r8
 800b054:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800b058:	3701      	adds	r7, #1
 800b05a:	695b      	ldr	r3, [r3, #20]
 800b05c:	4798      	blx	r3
 800b05e:	4604      	mov	r4, r0
 800b060:	4640      	mov	r0, r8
 800b062:	2c04      	cmp	r4, #4
 800b064:	4621      	mov	r1, r4
 800b066:	bf28      	it	cs
 800b068:	2104      	movcs	r1, #4
 800b06a:	f002 ff11 	bl	800de90 <ucdr_alignment>
 800b06e:	45b9      	cmp	r9, r7
 800b070:	4420      	add	r0, r4
 800b072:	4480      	add	r8, r0
 800b074:	d1e8      	bne.n	800b048 <get_serialized_size_racs_services__srv__Setup_Event.part.0+0x2c>
 800b076:	4640      	mov	r0, r8
 800b078:	2104      	movs	r1, #4
 800b07a:	6baf      	ldr	r7, [r5, #56]	; 0x38
 800b07c:	f002 ff08 	bl	800de90 <ucdr_alignment>
 800b080:	4480      	add	r8, r0
 800b082:	f108 0804 	add.w	r8, r8, #4
 800b086:	b1c7      	cbz	r7, 800b0ba <get_serialized_size_racs_services__srv__Setup_Event.part.0+0x9e>
 800b088:	f04f 0900 	mov.w	r9, #0
 800b08c:	f8df a038 	ldr.w	sl, [pc, #56]	; 800b0c8 <get_serialized_size_racs_services__srv__Setup_Event.part.0+0xac>
 800b090:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800b092:	4641      	mov	r1, r8
 800b094:	f8da 3004 	ldr.w	r3, [sl, #4]
 800b098:	4448      	add	r0, r9
 800b09a:	f109 0901 	add.w	r9, r9, #1
 800b09e:	695b      	ldr	r3, [r3, #20]
 800b0a0:	4798      	blx	r3
 800b0a2:	4604      	mov	r4, r0
 800b0a4:	4640      	mov	r0, r8
 800b0a6:	2c04      	cmp	r4, #4
 800b0a8:	4621      	mov	r1, r4
 800b0aa:	bf28      	it	cs
 800b0ac:	2104      	movcs	r1, #4
 800b0ae:	f002 feef 	bl	800de90 <ucdr_alignment>
 800b0b2:	454f      	cmp	r7, r9
 800b0b4:	4420      	add	r0, r4
 800b0b6:	4480      	add	r8, r0
 800b0b8:	d1ea      	bne.n	800b090 <get_serialized_size_racs_services__srv__Setup_Event.part.0+0x74>
 800b0ba:	eba8 0006 	sub.w	r0, r8, r6
 800b0be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0c2:	bf00      	nop
 800b0c4:	200008dc 	.word	0x200008dc
 800b0c8:	200008f4 	.word	0x200008f4

0800b0cc <get_serialized_size_racs_services__srv__Setup_Event>:
 800b0cc:	b108      	cbz	r0, 800b0d2 <get_serialized_size_racs_services__srv__Setup_Event+0x6>
 800b0ce:	f7ff bfa5 	b.w	800b01c <get_serialized_size_racs_services__srv__Setup_Event.part.0>
 800b0d2:	4770      	bx	lr

0800b0d4 <_Setup_Event__get_serialized_size>:
 800b0d4:	b110      	cbz	r0, 800b0dc <_Setup_Event__get_serialized_size+0x8>
 800b0d6:	2100      	movs	r1, #0
 800b0d8:	f7ff bfa0 	b.w	800b01c <get_serialized_size_racs_services__srv__Setup_Event.part.0>
 800b0dc:	4770      	bx	lr
 800b0de:	bf00      	nop

0800b0e0 <_Setup_Event__cdr_deserialize>:
 800b0e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0e4:	460c      	mov	r4, r1
 800b0e6:	b082      	sub	sp, #8
 800b0e8:	2900      	cmp	r1, #0
 800b0ea:	d045      	beq.n	800b178 <_Setup_Event__cdr_deserialize+0x98>
 800b0ec:	4607      	mov	r7, r0
 800b0ee:	f001 fa83 	bl	800c5f8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	4621      	mov	r1, r4
 800b0f6:	4638      	mov	r0, r7
 800b0f8:	685b      	ldr	r3, [r3, #4]
 800b0fa:	68db      	ldr	r3, [r3, #12]
 800b0fc:	4798      	blx	r3
 800b0fe:	4638      	mov	r0, r7
 800b100:	a901      	add	r1, sp, #4
 800b102:	f001 ff9d 	bl	800d040 <ucdr_deserialize_uint32_t>
 800b106:	9b01      	ldr	r3, [sp, #4]
 800b108:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800b10a:	429a      	cmp	r2, r3
 800b10c:	d330      	bcc.n	800b170 <_Setup_Event__cdr_deserialize+0x90>
 800b10e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b110:	b193      	cbz	r3, 800b138 <_Setup_Event__cdr_deserialize+0x58>
 800b112:	2500      	movs	r5, #0
 800b114:	f8df 806c 	ldr.w	r8, [pc, #108]	; 800b184 <_Setup_Event__cdr_deserialize+0xa4>
 800b118:	462e      	mov	r6, r5
 800b11a:	e002      	b.n	800b122 <_Setup_Event__cdr_deserialize+0x42>
 800b11c:	9b01      	ldr	r3, [sp, #4]
 800b11e:	429e      	cmp	r6, r3
 800b120:	d20a      	bcs.n	800b138 <_Setup_Event__cdr_deserialize+0x58>
 800b122:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800b124:	4638      	mov	r0, r7
 800b126:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b12a:	3601      	adds	r6, #1
 800b12c:	4429      	add	r1, r5
 800b12e:	351c      	adds	r5, #28
 800b130:	68db      	ldr	r3, [r3, #12]
 800b132:	4798      	blx	r3
 800b134:	2800      	cmp	r0, #0
 800b136:	d1f1      	bne.n	800b11c <_Setup_Event__cdr_deserialize+0x3c>
 800b138:	a901      	add	r1, sp, #4
 800b13a:	4638      	mov	r0, r7
 800b13c:	f001 ff80 	bl	800d040 <ucdr_deserialize_uint32_t>
 800b140:	9b01      	ldr	r3, [sp, #4]
 800b142:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800b144:	429a      	cmp	r2, r3
 800b146:	d313      	bcc.n	800b170 <_Setup_Event__cdr_deserialize+0x90>
 800b148:	63a3      	str	r3, [r4, #56]	; 0x38
 800b14a:	b193      	cbz	r3, 800b172 <_Setup_Event__cdr_deserialize+0x92>
 800b14c:	2500      	movs	r5, #0
 800b14e:	4e0c      	ldr	r6, [pc, #48]	; (800b180 <_Setup_Event__cdr_deserialize+0xa0>)
 800b150:	e002      	b.n	800b158 <_Setup_Event__cdr_deserialize+0x78>
 800b152:	9b01      	ldr	r3, [sp, #4]
 800b154:	429d      	cmp	r5, r3
 800b156:	d20c      	bcs.n	800b172 <_Setup_Event__cdr_deserialize+0x92>
 800b158:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b15a:	4638      	mov	r0, r7
 800b15c:	6873      	ldr	r3, [r6, #4]
 800b15e:	4429      	add	r1, r5
 800b160:	3501      	adds	r5, #1
 800b162:	68db      	ldr	r3, [r3, #12]
 800b164:	4798      	blx	r3
 800b166:	2800      	cmp	r0, #0
 800b168:	d1f3      	bne.n	800b152 <_Setup_Event__cdr_deserialize+0x72>
 800b16a:	b002      	add	sp, #8
 800b16c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b170:	2000      	movs	r0, #0
 800b172:	b002      	add	sp, #8
 800b174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b178:	4608      	mov	r0, r1
 800b17a:	b002      	add	sp, #8
 800b17c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b180:	200008f4 	.word	0x200008f4
 800b184:	200008dc 	.word	0x200008dc

0800b188 <_Setup_Event__cdr_serialize>:
 800b188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b18c:	2800      	cmp	r0, #0
 800b18e:	d03b      	beq.n	800b208 <_Setup_Event__cdr_serialize+0x80>
 800b190:	4605      	mov	r5, r0
 800b192:	460e      	mov	r6, r1
 800b194:	f001 fa30 	bl	800c5f8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800b198:	4603      	mov	r3, r0
 800b19a:	4631      	mov	r1, r6
 800b19c:	4628      	mov	r0, r5
 800b19e:	685b      	ldr	r3, [r3, #4]
 800b1a0:	689b      	ldr	r3, [r3, #8]
 800b1a2:	4798      	blx	r3
 800b1a4:	6aef      	ldr	r7, [r5, #44]	; 0x2c
 800b1a6:	4630      	mov	r0, r6
 800b1a8:	4639      	mov	r1, r7
 800b1aa:	f001 fe19 	bl	800cde0 <ucdr_serialize_uint32_t>
 800b1ae:	b198      	cbz	r0, 800b1d8 <_Setup_Event__cdr_serialize+0x50>
 800b1b0:	b197      	cbz	r7, 800b1d8 <_Setup_Event__cdr_serialize+0x50>
 800b1b2:	2400      	movs	r4, #0
 800b1b4:	f8df 805c 	ldr.w	r8, [pc, #92]	; 800b214 <_Setup_Event__cdr_serialize+0x8c>
 800b1b8:	e001      	b.n	800b1be <_Setup_Event__cdr_serialize+0x36>
 800b1ba:	42a7      	cmp	r7, r4
 800b1bc:	d00c      	beq.n	800b1d8 <_Setup_Event__cdr_serialize+0x50>
 800b1be:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
 800b1c2:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800b1c4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b1c8:	4631      	mov	r1, r6
 800b1ca:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800b1ce:	3401      	adds	r4, #1
 800b1d0:	689b      	ldr	r3, [r3, #8]
 800b1d2:	4798      	blx	r3
 800b1d4:	2800      	cmp	r0, #0
 800b1d6:	d1f0      	bne.n	800b1ba <_Setup_Event__cdr_serialize+0x32>
 800b1d8:	6baf      	ldr	r7, [r5, #56]	; 0x38
 800b1da:	4630      	mov	r0, r6
 800b1dc:	4639      	mov	r1, r7
 800b1de:	f001 fdff 	bl	800cde0 <ucdr_serialize_uint32_t>
 800b1e2:	4680      	mov	r8, r0
 800b1e4:	b180      	cbz	r0, 800b208 <_Setup_Event__cdr_serialize+0x80>
 800b1e6:	b18f      	cbz	r7, 800b20c <_Setup_Event__cdr_serialize+0x84>
 800b1e8:	2400      	movs	r4, #0
 800b1ea:	f8df 902c 	ldr.w	r9, [pc, #44]	; 800b218 <_Setup_Event__cdr_serialize+0x90>
 800b1ee:	e001      	b.n	800b1f4 <_Setup_Event__cdr_serialize+0x6c>
 800b1f0:	42a7      	cmp	r7, r4
 800b1f2:	d00b      	beq.n	800b20c <_Setup_Event__cdr_serialize+0x84>
 800b1f4:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800b1f6:	4631      	mov	r1, r6
 800b1f8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800b1fc:	4420      	add	r0, r4
 800b1fe:	3401      	adds	r4, #1
 800b200:	689b      	ldr	r3, [r3, #8]
 800b202:	4798      	blx	r3
 800b204:	2800      	cmp	r0, #0
 800b206:	d1f3      	bne.n	800b1f0 <_Setup_Event__cdr_serialize+0x68>
 800b208:	f04f 0800 	mov.w	r8, #0
 800b20c:	4640      	mov	r0, r8
 800b20e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b212:	bf00      	nop
 800b214:	200008dc 	.word	0x200008dc
 800b218:	200008f4 	.word	0x200008f4

0800b21c <_Setup_Response__get_serialized_size>:
 800b21c:	b130      	cbz	r0, 800b22c <_Setup_Response__get_serialized_size+0x10>
 800b21e:	2101      	movs	r1, #1
 800b220:	2000      	movs	r0, #0
 800b222:	b508      	push	{r3, lr}
 800b224:	f002 fe34 	bl	800de90 <ucdr_alignment>
 800b228:	3001      	adds	r0, #1
 800b22a:	bd08      	pop	{r3, pc}
 800b22c:	4770      	bx	lr
 800b22e:	bf00      	nop

0800b230 <max_serialized_size_racs_services__srv__Setup_Request>:
 800b230:	b570      	push	{r4, r5, r6, lr}
 800b232:	460c      	mov	r4, r1
 800b234:	2301      	movs	r3, #1
 800b236:	1c65      	adds	r5, r4, #1
 800b238:	4619      	mov	r1, r3
 800b23a:	7003      	strb	r3, [r0, #0]
 800b23c:	4620      	mov	r0, r4
 800b23e:	f002 fe27 	bl	800de90 <ucdr_alignment>
 800b242:	4405      	add	r5, r0
 800b244:	2104      	movs	r1, #4
 800b246:	f1c4 0404 	rsb	r4, r4, #4
 800b24a:	4628      	mov	r0, r5
 800b24c:	f002 fe20 	bl	800de90 <ucdr_alignment>
 800b250:	2104      	movs	r1, #4
 800b252:	1846      	adds	r6, r0, r1
 800b254:	442e      	add	r6, r5
 800b256:	4630      	mov	r0, r6
 800b258:	f002 fe1a 	bl	800de90 <ucdr_alignment>
 800b25c:	2104      	movs	r1, #4
 800b25e:	1845      	adds	r5, r0, r1
 800b260:	442e      	add	r6, r5
 800b262:	4630      	mov	r0, r6
 800b264:	f002 fe14 	bl	800de90 <ucdr_alignment>
 800b268:	2104      	movs	r1, #4
 800b26a:	4408      	add	r0, r1
 800b26c:	4406      	add	r6, r0
 800b26e:	4630      	mov	r0, r6
 800b270:	f002 fe0e 	bl	800de90 <ucdr_alignment>
 800b274:	2104      	movs	r1, #4
 800b276:	1845      	adds	r5, r0, r1
 800b278:	4435      	add	r5, r6
 800b27a:	4628      	mov	r0, r5
 800b27c:	f002 fe08 	bl	800de90 <ucdr_alignment>
 800b280:	2104      	movs	r1, #4
 800b282:	4408      	add	r0, r1
 800b284:	4405      	add	r5, r0
 800b286:	4628      	mov	r0, r5
 800b288:	f002 fe02 	bl	800de90 <ucdr_alignment>
 800b28c:	4420      	add	r0, r4
 800b28e:	4428      	add	r0, r5
 800b290:	bd70      	pop	{r4, r5, r6, pc}
 800b292:	bf00      	nop

0800b294 <_Setup_Request__max_serialized_size>:
 800b294:	b500      	push	{lr}
 800b296:	b083      	sub	sp, #12
 800b298:	2100      	movs	r1, #0
 800b29a:	f10d 0007 	add.w	r0, sp, #7
 800b29e:	f7ff ffc7 	bl	800b230 <max_serialized_size_racs_services__srv__Setup_Request>
 800b2a2:	b003      	add	sp, #12
 800b2a4:	f85d fb04 	ldr.w	pc, [sp], #4

0800b2a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Setup_Event>:
 800b2a8:	4800      	ldr	r0, [pc, #0]	; (800b2ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x4>)
 800b2aa:	4770      	bx	lr
 800b2ac:	200008c4 	.word	0x200008c4

0800b2b0 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__racs_services__srv__Setup>:
 800b2b0:	4800      	ldr	r0, [pc, #0]	; (800b2b4 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__racs_services__srv__Setup+0x4>)
 800b2b2:	4770      	bx	lr
 800b2b4:	20000898 	.word	0x20000898

0800b2b8 <_rclc_check_for_new_data>:
 800b2b8:	2800      	cmp	r0, #0
 800b2ba:	d046      	beq.n	800b34a <_rclc_check_for_new_data+0x92>
 800b2bc:	4603      	mov	r3, r0
 800b2be:	b530      	push	{r4, r5, lr}
 800b2c0:	7802      	ldrb	r2, [r0, #0]
 800b2c2:	b085      	sub	sp, #20
 800b2c4:	2a0a      	cmp	r2, #10
 800b2c6:	d842      	bhi.n	800b34e <_rclc_check_for_new_data+0x96>
 800b2c8:	e8df f002 	tbb	[pc, r2]
 800b2cc:	14181212 	.word	0x14181212
 800b2d0:	06060614 	.word	0x06060614
 800b2d4:	2e1a      	.short	0x2e1a
 800b2d6:	16          	.byte	0x16
 800b2d7:	00          	.byte	0x00
 800b2d8:	6a0a      	ldr	r2, [r1, #32]
 800b2da:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800b2dc:	2000      	movs	r0, #0
 800b2de:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800b2e2:	1a12      	subs	r2, r2, r0
 800b2e4:	bf18      	it	ne
 800b2e6:	2201      	movne	r2, #1
 800b2e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800b2ec:	b005      	add	sp, #20
 800b2ee:	bd30      	pop	{r4, r5, pc}
 800b2f0:	680a      	ldr	r2, [r1, #0]
 800b2f2:	e7f2      	b.n	800b2da <_rclc_check_for_new_data+0x22>
 800b2f4:	698a      	ldr	r2, [r1, #24]
 800b2f6:	e7f0      	b.n	800b2da <_rclc_check_for_new_data+0x22>
 800b2f8:	688a      	ldr	r2, [r1, #8]
 800b2fa:	e7ee      	b.n	800b2da <_rclc_check_for_new_data+0x22>
 800b2fc:	690a      	ldr	r2, [r1, #16]
 800b2fe:	e7ec      	b.n	800b2da <_rclc_check_for_new_data+0x22>
 800b300:	685c      	ldr	r4, [r3, #4]
 800b302:	4608      	mov	r0, r1
 800b304:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b308:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b30c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b310:	f104 0110 	add.w	r1, r4, #16
 800b314:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800b318:	9500      	str	r5, [sp, #0]
 800b31a:	f104 0341 	add.w	r3, r4, #65	; 0x41
 800b31e:	f104 0240 	add.w	r2, r4, #64	; 0x40
 800b322:	f006 f8c5 	bl	80114b0 <rcl_action_client_wait_set_get_entities_ready>
 800b326:	e7e1      	b.n	800b2ec <_rclc_check_for_new_data+0x34>
 800b328:	685c      	ldr	r4, [r3, #4]
 800b32a:	4608      	mov	r0, r1
 800b32c:	f104 0222 	add.w	r2, r4, #34	; 0x22
 800b330:	f104 0123 	add.w	r1, r4, #35	; 0x23
 800b334:	f104 0321 	add.w	r3, r4, #33	; 0x21
 800b338:	e9cd 2100 	strd	r2, r1, [sp]
 800b33c:	f104 0220 	add.w	r2, r4, #32
 800b340:	f104 0110 	add.w	r1, r4, #16
 800b344:	f006 facc 	bl	80118e0 <rcl_action_server_wait_set_get_entities_ready>
 800b348:	e7d0      	b.n	800b2ec <_rclc_check_for_new_data+0x34>
 800b34a:	200b      	movs	r0, #11
 800b34c:	4770      	bx	lr
 800b34e:	2001      	movs	r0, #1
 800b350:	e7cc      	b.n	800b2ec <_rclc_check_for_new_data+0x34>
 800b352:	bf00      	nop

0800b354 <_rclc_take_new_data>:
 800b354:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b356:	b099      	sub	sp, #100	; 0x64
 800b358:	2800      	cmp	r0, #0
 800b35a:	f000 8088 	beq.w	800b46e <_rclc_take_new_data+0x11a>
 800b35e:	7803      	ldrb	r3, [r0, #0]
 800b360:	4604      	mov	r4, r0
 800b362:	2b0a      	cmp	r3, #10
 800b364:	f200 8167 	bhi.w	800b636 <_rclc_take_new_data+0x2e2>
 800b368:	e8df f003 	tbb	[pc, r3]
 800b36c:	44152d2d 	.word	0x44152d2d
 800b370:	19191944 	.word	0x19191944
 800b374:	065a      	.short	0x065a
 800b376:	15          	.byte	0x15
 800b377:	00          	.byte	0x00
 800b378:	6840      	ldr	r0, [r0, #4]
 800b37a:	f890 3020 	ldrb.w	r3, [r0, #32]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	f040 80b2 	bne.w	800b4e8 <_rclc_take_new_data+0x194>
 800b384:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 800b388:	2b00      	cmp	r3, #0
 800b38a:	f040 80e4 	bne.w	800b556 <_rclc_take_new_data+0x202>
 800b38e:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800b392:	2b00      	cmp	r3, #0
 800b394:	d16f      	bne.n	800b476 <_rclc_take_new_data+0x122>
 800b396:	2500      	movs	r5, #0
 800b398:	4628      	mov	r0, r5
 800b39a:	b019      	add	sp, #100	; 0x64
 800b39c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b39e:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800b3a0:	6a0b      	ldr	r3, [r1, #32]
 800b3a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d0f5      	beq.n	800b396 <_rclc_take_new_data+0x42>
 800b3aa:	6882      	ldr	r2, [r0, #8]
 800b3ac:	f100 0110 	add.w	r1, r0, #16
 800b3b0:	6840      	ldr	r0, [r0, #4]
 800b3b2:	f004 fd4d 	bl	800fe50 <rcl_take_request>
 800b3b6:	4605      	mov	r5, r0
 800b3b8:	2800      	cmp	r0, #0
 800b3ba:	d0ec      	beq.n	800b396 <_rclc_take_new_data+0x42>
 800b3bc:	f240 2359 	movw	r3, #601	; 0x259
 800b3c0:	4298      	cmp	r0, r3
 800b3c2:	d013      	beq.n	800b3ec <_rclc_take_new_data+0x98>
 800b3c4:	e029      	b.n	800b41a <_rclc_take_new_data+0xc6>
 800b3c6:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800b3c8:	680b      	ldr	r3, [r1, #0]
 800b3ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d0e1      	beq.n	800b396 <_rclc_take_new_data+0x42>
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	aa0a      	add	r2, sp, #40	; 0x28
 800b3d6:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800b3da:	f004 fe61 	bl	80100a0 <rcl_take>
 800b3de:	4605      	mov	r5, r0
 800b3e0:	2800      	cmp	r0, #0
 800b3e2:	d0d9      	beq.n	800b398 <_rclc_take_new_data+0x44>
 800b3e4:	f240 1391 	movw	r3, #401	; 0x191
 800b3e8:	4298      	cmp	r0, r3
 800b3ea:	d116      	bne.n	800b41a <_rclc_take_new_data+0xc6>
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 800b3f2:	e7d1      	b.n	800b398 <_rclc_take_new_data+0x44>
 800b3f4:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800b3f6:	698b      	ldr	r3, [r1, #24]
 800b3f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d0ca      	beq.n	800b396 <_rclc_take_new_data+0x42>
 800b400:	6882      	ldr	r2, [r0, #8]
 800b402:	f100 0110 	add.w	r1, r0, #16
 800b406:	6840      	ldr	r0, [r0, #4]
 800b408:	f003 fd92 	bl	800ef30 <rcl_take_response>
 800b40c:	4605      	mov	r5, r0
 800b40e:	2800      	cmp	r0, #0
 800b410:	d0c1      	beq.n	800b396 <_rclc_take_new_data+0x42>
 800b412:	f240 13f5 	movw	r3, #501	; 0x1f5
 800b416:	4298      	cmp	r0, r3
 800b418:	d0be      	beq.n	800b398 <_rclc_take_new_data+0x44>
 800b41a:	f000 feb9 	bl	800c190 <rcutils_reset_error>
 800b41e:	e7bb      	b.n	800b398 <_rclc_take_new_data+0x44>
 800b420:	6840      	ldr	r0, [r0, #4]
 800b422:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 800b426:	2b00      	cmp	r3, #0
 800b428:	d17d      	bne.n	800b526 <_rclc_take_new_data+0x1d2>
 800b42a:	69c3      	ldr	r3, [r0, #28]
 800b42c:	b11b      	cbz	r3, 800b436 <_rclc_take_new_data+0xe2>
 800b42e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800b432:	2b00      	cmp	r3, #0
 800b434:	d144      	bne.n	800b4c0 <_rclc_take_new_data+0x16c>
 800b436:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	f040 80ac 	bne.w	800b598 <_rclc_take_new_data+0x244>
 800b440:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 800b444:	2b00      	cmp	r3, #0
 800b446:	d0a6      	beq.n	800b396 <_rclc_take_new_data+0x42>
 800b448:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800b44a:	a90a      	add	r1, sp, #40	; 0x28
 800b44c:	3010      	adds	r0, #16
 800b44e:	f005 ff07 	bl	8011260 <rcl_action_take_result_response>
 800b452:	4605      	mov	r5, r0
 800b454:	2800      	cmp	r0, #0
 800b456:	d1e0      	bne.n	800b41a <_rclc_take_new_data+0xc6>
 800b458:	6860      	ldr	r0, [r4, #4]
 800b45a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800b45e:	f006 fb6f 	bl	8011b40 <rclc_action_find_handle_by_result_request_sequence_number>
 800b462:	2800      	cmp	r0, #0
 800b464:	d098      	beq.n	800b398 <_rclc_take_new_data+0x44>
 800b466:	2301      	movs	r3, #1
 800b468:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
 800b46c:	e794      	b.n	800b398 <_rclc_take_new_data+0x44>
 800b46e:	250b      	movs	r5, #11
 800b470:	4628      	mov	r0, r5
 800b472:	b019      	add	sp, #100	; 0x64
 800b474:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b476:	ae04      	add	r6, sp, #16
 800b478:	3010      	adds	r0, #16
 800b47a:	aa0a      	add	r2, sp, #40	; 0x28
 800b47c:	4631      	mov	r1, r6
 800b47e:	f006 f963 	bl	8011748 <rcl_action_take_cancel_request>
 800b482:	4605      	mov	r5, r0
 800b484:	2800      	cmp	r0, #0
 800b486:	d1c8      	bne.n	800b41a <_rclc_take_new_data+0xc6>
 800b488:	a90a      	add	r1, sp, #40	; 0x28
 800b48a:	6860      	ldr	r0, [r4, #4]
 800b48c:	f006 fb18 	bl	8011ac0 <rclc_action_find_goal_handle_by_uuid>
 800b490:	4607      	mov	r7, r0
 800b492:	2800      	cmp	r0, #0
 800b494:	f000 80bb 	beq.w	800b60e <_rclc_take_new_data+0x2ba>
 800b498:	2101      	movs	r1, #1
 800b49a:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800b49e:	f006 fa99 	bl	80119d4 <rcl_action_transition_goal_state>
 800b4a2:	2803      	cmp	r0, #3
 800b4a4:	4684      	mov	ip, r0
 800b4a6:	f040 80a7 	bne.w	800b5f8 <_rclc_take_new_data+0x2a4>
 800b4aa:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800b4ae:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800b4b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b4b2:	e896 0003 	ldmia.w	r6, {r0, r1}
 800b4b6:	e884 0003 	stmia.w	r4, {r0, r1}
 800b4ba:	f887 c008 	strb.w	ip, [r7, #8]
 800b4be:	e76b      	b.n	800b398 <_rclc_take_new_data+0x44>
 800b4c0:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800b4c2:	3010      	adds	r0, #16
 800b4c4:	f005 ff4c 	bl	8011360 <rcl_action_take_feedback>
 800b4c8:	4605      	mov	r5, r0
 800b4ca:	2800      	cmp	r0, #0
 800b4cc:	d1a5      	bne.n	800b41a <_rclc_take_new_data+0xc6>
 800b4ce:	6860      	ldr	r0, [r4, #4]
 800b4d0:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800b4d2:	f006 faf5 	bl	8011ac0 <rclc_action_find_goal_handle_by_uuid>
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	2800      	cmp	r0, #0
 800b4da:	f000 80a3 	beq.w	800b624 <_rclc_take_new_data+0x2d0>
 800b4de:	2201      	movs	r2, #1
 800b4e0:	6860      	ldr	r0, [r4, #4]
 800b4e2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 800b4e6:	e7a6      	b.n	800b436 <_rclc_take_new_data+0xe2>
 800b4e8:	f006 fac4 	bl	8011a74 <rclc_action_take_goal_handle>
 800b4ec:	4606      	mov	r6, r0
 800b4ee:	6860      	ldr	r0, [r4, #4]
 800b4f0:	2e00      	cmp	r6, #0
 800b4f2:	f43f af47 	beq.w	800b384 <_rclc_take_new_data+0x30>
 800b4f6:	6070      	str	r0, [r6, #4]
 800b4f8:	f106 0128 	add.w	r1, r6, #40	; 0x28
 800b4fc:	69f2      	ldr	r2, [r6, #28]
 800b4fe:	3010      	adds	r0, #16
 800b500:	f006 f86c 	bl	80115dc <rcl_action_take_goal_request>
 800b504:	4605      	mov	r5, r0
 800b506:	2800      	cmp	r0, #0
 800b508:	f040 808e 	bne.w	800b628 <_rclc_take_new_data+0x2d4>
 800b50c:	69f7      	ldr	r7, [r6, #28]
 800b50e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800b510:	7235      	strb	r5, [r6, #8]
 800b512:	f8c6 0009 	str.w	r0, [r6, #9]
 800b516:	f8c6 100d 	str.w	r1, [r6, #13]
 800b51a:	6860      	ldr	r0, [r4, #4]
 800b51c:	f8c6 2011 	str.w	r2, [r6, #17]
 800b520:	f8c6 3015 	str.w	r3, [r6, #21]
 800b524:	e72e      	b.n	800b384 <_rclc_take_new_data+0x30>
 800b526:	aa04      	add	r2, sp, #16
 800b528:	a90a      	add	r1, sp, #40	; 0x28
 800b52a:	3010      	adds	r0, #16
 800b52c:	f005 fe20 	bl	8011170 <rcl_action_take_goal_response>
 800b530:	4605      	mov	r5, r0
 800b532:	2800      	cmp	r0, #0
 800b534:	f47f af71 	bne.w	800b41a <_rclc_take_new_data+0xc6>
 800b538:	6860      	ldr	r0, [r4, #4]
 800b53a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800b53e:	f006 faed 	bl	8011b1c <rclc_action_find_handle_by_goal_request_sequence_number>
 800b542:	b130      	cbz	r0, 800b552 <_rclc_take_new_data+0x1fe>
 800b544:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800b548:	2201      	movs	r2, #1
 800b54a:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
 800b54e:	f880 2020 	strb.w	r2, [r0, #32]
 800b552:	6860      	ldr	r0, [r4, #4]
 800b554:	e769      	b.n	800b42a <_rclc_take_new_data+0xd6>
 800b556:	3010      	adds	r0, #16
 800b558:	aa04      	add	r2, sp, #16
 800b55a:	a90a      	add	r1, sp, #40	; 0x28
 800b55c:	f006 f8b4 	bl	80116c8 <rcl_action_take_result_request>
 800b560:	4605      	mov	r5, r0
 800b562:	2800      	cmp	r0, #0
 800b564:	f47f af59 	bne.w	800b41a <_rclc_take_new_data+0xc6>
 800b568:	a904      	add	r1, sp, #16
 800b56a:	6860      	ldr	r0, [r4, #4]
 800b56c:	f006 faa8 	bl	8011ac0 <rclc_action_find_goal_handle_by_uuid>
 800b570:	4607      	mov	r7, r0
 800b572:	b160      	cbz	r0, 800b58e <_rclc_take_new_data+0x23a>
 800b574:	ad0a      	add	r5, sp, #40	; 0x28
 800b576:	f100 0640 	add.w	r6, r0, #64	; 0x40
 800b57a:	f04f 0c02 	mov.w	ip, #2
 800b57e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b580:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800b582:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b586:	e886 0003 	stmia.w	r6, {r0, r1}
 800b58a:	f887 c008 	strb.w	ip, [r7, #8]
 800b58e:	6860      	ldr	r0, [r4, #4]
 800b590:	2300      	movs	r3, #0
 800b592:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
 800b596:	e6fa      	b.n	800b38e <_rclc_take_new_data+0x3a>
 800b598:	f100 0230 	add.w	r2, r0, #48	; 0x30
 800b59c:	a90a      	add	r1, sp, #40	; 0x28
 800b59e:	3010      	adds	r0, #16
 800b5a0:	f005 fe9e 	bl	80112e0 <rcl_action_take_cancel_response>
 800b5a4:	4605      	mov	r5, r0
 800b5a6:	2800      	cmp	r0, #0
 800b5a8:	f47f af37 	bne.w	800b41a <_rclc_take_new_data+0xc6>
 800b5ac:	6860      	ldr	r0, [r4, #4]
 800b5ae:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800b5b2:	f006 fad7 	bl	8011b64 <rclc_action_find_handle_by_cancel_request_sequence_number>
 800b5b6:	4606      	mov	r6, r0
 800b5b8:	6860      	ldr	r0, [r4, #4]
 800b5ba:	2e00      	cmp	r6, #0
 800b5bc:	f43f af40 	beq.w	800b440 <_rclc_take_new_data+0xec>
 800b5c0:	2701      	movs	r7, #1
 800b5c2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800b5c4:	84b7      	strh	r7, [r6, #36]	; 0x24
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	f43f af3a 	beq.w	800b440 <_rclc_take_new_data+0xec>
 800b5cc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800b5ce:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800b5d2:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800b5d6:	f006 fa73 	bl	8011ac0 <rclc_action_find_goal_handle_by_uuid>
 800b5da:	b138      	cbz	r0, 800b5ec <_rclc_take_new_data+0x298>
 800b5dc:	6860      	ldr	r0, [r4, #4]
 800b5de:	3501      	adds	r5, #1
 800b5e0:	f886 7025 	strb.w	r7, [r6, #37]	; 0x25
 800b5e4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800b5e6:	42ab      	cmp	r3, r5
 800b5e8:	d8f0      	bhi.n	800b5cc <_rclc_take_new_data+0x278>
 800b5ea:	e729      	b.n	800b440 <_rclc_take_new_data+0xec>
 800b5ec:	6860      	ldr	r0, [r4, #4]
 800b5ee:	3501      	adds	r5, #1
 800b5f0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800b5f2:	42ab      	cmp	r3, r5
 800b5f4:	d8ea      	bhi.n	800b5cc <_rclc_take_new_data+0x278>
 800b5f6:	e723      	b.n	800b440 <_rclc_take_new_data+0xec>
 800b5f8:	ab06      	add	r3, sp, #24
 800b5fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b5fc:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800b600:	2103      	movs	r1, #3
 800b602:	6860      	ldr	r0, [r4, #4]
 800b604:	e896 000c 	ldmia.w	r6, {r2, r3}
 800b608:	f006 fb22 	bl	8011c50 <rclc_action_server_goal_cancel_reject>
 800b60c:	e6c4      	b.n	800b398 <_rclc_take_new_data+0x44>
 800b60e:	ab06      	add	r3, sp, #24
 800b610:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b612:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800b616:	2102      	movs	r1, #2
 800b618:	6860      	ldr	r0, [r4, #4]
 800b61a:	e896 000c 	ldmia.w	r6, {r2, r3}
 800b61e:	f006 fb17 	bl	8011c50 <rclc_action_server_goal_cancel_reject>
 800b622:	e6b9      	b.n	800b398 <_rclc_take_new_data+0x44>
 800b624:	6860      	ldr	r0, [r4, #4]
 800b626:	e706      	b.n	800b436 <_rclc_take_new_data+0xe2>
 800b628:	4631      	mov	r1, r6
 800b62a:	6860      	ldr	r0, [r4, #4]
 800b62c:	f006 fa32 	bl	8011a94 <rclc_action_remove_used_goal_handle>
 800b630:	f000 fdae 	bl	800c190 <rcutils_reset_error>
 800b634:	e6b0      	b.n	800b398 <_rclc_take_new_data+0x44>
 800b636:	2501      	movs	r5, #1
 800b638:	e6ae      	b.n	800b398 <_rclc_take_new_data+0x44>
 800b63a:	bf00      	nop

0800b63c <_rclc_execute.part.0>:
 800b63c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b63e:	7803      	ldrb	r3, [r0, #0]
 800b640:	b085      	sub	sp, #20
 800b642:	4604      	mov	r4, r0
 800b644:	2b0a      	cmp	r3, #10
 800b646:	f200 8139 	bhi.w	800b8bc <_rclc_execute.part.0+0x280>
 800b64a:	e8df f003 	tbb	[pc, r3]
 800b64e:	4268      	.short	0x4268
 800b650:	06a75b4d 	.word	0x06a75b4d
 800b654:	721d0606 	.word	0x721d0606
 800b658:	62          	.byte	0x62
 800b659:	00          	.byte	0x00
 800b65a:	2b06      	cmp	r3, #6
 800b65c:	f000 8126 	beq.w	800b8ac <_rclc_execute.part.0+0x270>
 800b660:	2b07      	cmp	r3, #7
 800b662:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800b664:	f040 811c 	bne.w	800b8a0 <_rclc_execute.part.0+0x264>
 800b668:	f104 0510 	add.w	r5, r4, #16
 800b66c:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	; 0x28
 800b670:	6880      	ldr	r0, [r0, #8]
 800b672:	4798      	blx	r3
 800b674:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800b676:	4629      	mov	r1, r5
 800b678:	6860      	ldr	r0, [r4, #4]
 800b67a:	f004 fc39 	bl	800fef0 <rcl_send_response>
 800b67e:	4604      	mov	r4, r0
 800b680:	b378      	cbz	r0, 800b6e2 <_rclc_execute.part.0+0xa6>
 800b682:	f000 fd85 	bl	800c190 <rcutils_reset_error>
 800b686:	e02c      	b.n	800b6e2 <_rclc_execute.part.0+0xa6>
 800b688:	6840      	ldr	r0, [r0, #4]
 800b68a:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 800b68e:	2b00      	cmp	r3, #0
 800b690:	f000 808e 	beq.w	800b7b0 <_rclc_execute.part.0+0x174>
 800b694:	2600      	movs	r6, #0
 800b696:	2701      	movs	r7, #1
 800b698:	e004      	b.n	800b6a4 <_rclc_execute.part.0+0x68>
 800b69a:	f006 f9c5 	bl	8011a28 <rclc_action_send_result_request>
 800b69e:	b998      	cbnz	r0, 800b6c8 <_rclc_execute.part.0+0x8c>
 800b6a0:	722f      	strb	r7, [r5, #8]
 800b6a2:	6860      	ldr	r0, [r4, #4]
 800b6a4:	f006 fa70 	bl	8011b88 <rclc_action_find_first_handle_with_goal_response>
 800b6a8:	4605      	mov	r5, r0
 800b6aa:	2800      	cmp	r0, #0
 800b6ac:	d07f      	beq.n	800b7ae <_rclc_execute.part.0+0x172>
 800b6ae:	6863      	ldr	r3, [r4, #4]
 800b6b0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800b6b2:	699b      	ldr	r3, [r3, #24]
 800b6b4:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
 800b6b8:	f885 6020 	strb.w	r6, [r5, #32]
 800b6bc:	4798      	blx	r3
 800b6be:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 800b6c2:	4628      	mov	r0, r5
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d1e8      	bne.n	800b69a <_rclc_execute.part.0+0x5e>
 800b6c8:	6860      	ldr	r0, [r4, #4]
 800b6ca:	4629      	mov	r1, r5
 800b6cc:	f006 f9e2 	bl	8011a94 <rclc_action_remove_used_goal_handle>
 800b6d0:	e7e7      	b.n	800b6a2 <_rclc_execute.part.0+0x66>
 800b6d2:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 800b6d6:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	; 0x2c
 800b6da:	b100      	cbz	r0, 800b6de <_rclc_execute.part.0+0xa2>
 800b6dc:	68a0      	ldr	r0, [r4, #8]
 800b6de:	2400      	movs	r4, #0
 800b6e0:	4798      	blx	r3
 800b6e2:	4620      	mov	r0, r4
 800b6e4:	b005      	add	sp, #20
 800b6e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b6e8:	6840      	ldr	r0, [r0, #4]
 800b6ea:	f004 fdf7 	bl	80102dc <rcl_timer_call>
 800b6ee:	f240 3321 	movw	r3, #801	; 0x321
 800b6f2:	4604      	mov	r4, r0
 800b6f4:	4298      	cmp	r0, r3
 800b6f6:	d001      	beq.n	800b6fc <_rclc_execute.part.0+0xc0>
 800b6f8:	2800      	cmp	r0, #0
 800b6fa:	d1c2      	bne.n	800b682 <_rclc_execute.part.0+0x46>
 800b6fc:	2400      	movs	r4, #0
 800b6fe:	4620      	mov	r0, r4
 800b700:	b005      	add	sp, #20
 800b702:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b704:	2400      	movs	r4, #0
 800b706:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800b708:	6880      	ldr	r0, [r0, #8]
 800b70a:	4798      	blx	r3
 800b70c:	4620      	mov	r0, r4
 800b70e:	b005      	add	sp, #20
 800b710:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b712:	2400      	movs	r4, #0
 800b714:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800b716:	4798      	blx	r3
 800b718:	4620      	mov	r0, r4
 800b71a:	b005      	add	sp, #20
 800b71c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b71e:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 800b722:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b724:	b100      	cbz	r0, 800b728 <_rclc_execute.part.0+0xec>
 800b726:	68a0      	ldr	r0, [r4, #8]
 800b728:	2400      	movs	r4, #0
 800b72a:	4798      	blx	r3
 800b72c:	4620      	mov	r0, r4
 800b72e:	b005      	add	sp, #20
 800b730:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b732:	6840      	ldr	r0, [r0, #4]
 800b734:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800b738:	bb3b      	cbnz	r3, 800b78a <_rclc_execute.part.0+0x14e>
 800b73a:	f890 3020 	ldrb.w	r3, [r0, #32]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d07d      	beq.n	800b83e <_rclc_execute.part.0+0x202>
 800b742:	f640 0634 	movw	r6, #2100	; 0x834
 800b746:	2701      	movs	r7, #1
 800b748:	e007      	b.n	800b75a <_rclc_execute.part.0+0x11e>
 800b74a:	4628      	mov	r0, r5
 800b74c:	f006 fa34 	bl	8011bb8 <rclc_action_server_response_goal_request>
 800b750:	4629      	mov	r1, r5
 800b752:	6860      	ldr	r0, [r4, #4]
 800b754:	f006 f99e 	bl	8011a94 <rclc_action_remove_used_goal_handle>
 800b758:	6860      	ldr	r0, [r4, #4]
 800b75a:	2100      	movs	r1, #0
 800b75c:	f006 f9c6 	bl	8011aec <rclc_action_find_first_handle_by_status>
 800b760:	4605      	mov	r5, r0
 800b762:	2800      	cmp	r0, #0
 800b764:	d068      	beq.n	800b838 <_rclc_execute.part.0+0x1fc>
 800b766:	6863      	ldr	r3, [r4, #4]
 800b768:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800b76a:	699b      	ldr	r3, [r3, #24]
 800b76c:	4798      	blx	r3
 800b76e:	42b0      	cmp	r0, r6
 800b770:	f04f 0100 	mov.w	r1, #0
 800b774:	d1e9      	bne.n	800b74a <_rclc_execute.part.0+0x10e>
 800b776:	2101      	movs	r1, #1
 800b778:	4628      	mov	r0, r5
 800b77a:	f006 fa1d 	bl	8011bb8 <rclc_action_server_response_goal_request>
 800b77e:	722f      	strb	r7, [r5, #8]
 800b780:	e7ea      	b.n	800b758 <_rclc_execute.part.0+0x11c>
 800b782:	6848      	ldr	r0, [r1, #4]
 800b784:	f006 f986 	bl	8011a94 <rclc_action_remove_used_goal_handle>
 800b788:	6860      	ldr	r0, [r4, #4]
 800b78a:	f006 f9bb 	bl	8011b04 <rclc_action_find_first_terminated_handle>
 800b78e:	4601      	mov	r1, r0
 800b790:	2800      	cmp	r0, #0
 800b792:	d1f6      	bne.n	800b782 <_rclc_execute.part.0+0x146>
 800b794:	6860      	ldr	r0, [r4, #4]
 800b796:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 800b79a:	e7ce      	b.n	800b73a <_rclc_execute.part.0+0xfe>
 800b79c:	2400      	movs	r4, #0
 800b79e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800b7a0:	f100 0110 	add.w	r1, r0, #16
 800b7a4:	6880      	ldr	r0, [r0, #8]
 800b7a6:	4798      	blx	r3
 800b7a8:	4620      	mov	r0, r4
 800b7aa:	b005      	add	sp, #20
 800b7ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b7ae:	6860      	ldr	r0, [r4, #4]
 800b7b0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800b7b4:	b18b      	cbz	r3, 800b7da <_rclc_execute.part.0+0x19e>
 800b7b6:	68c5      	ldr	r5, [r0, #12]
 800b7b8:	b32d      	cbz	r5, 800b806 <_rclc_execute.part.0+0x1ca>
 800b7ba:	2600      	movs	r6, #0
 800b7bc:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 800b7c0:	b143      	cbz	r3, 800b7d4 <_rclc_execute.part.0+0x198>
 800b7c2:	69c3      	ldr	r3, [r0, #28]
 800b7c4:	f885 6022 	strb.w	r6, [r5, #34]	; 0x22
 800b7c8:	b123      	cbz	r3, 800b7d4 <_rclc_execute.part.0+0x198>
 800b7ca:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800b7cc:	4628      	mov	r0, r5
 800b7ce:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800b7d0:	4798      	blx	r3
 800b7d2:	6860      	ldr	r0, [r4, #4]
 800b7d4:	682d      	ldr	r5, [r5, #0]
 800b7d6:	2d00      	cmp	r5, #0
 800b7d8:	d1f0      	bne.n	800b7bc <_rclc_execute.part.0+0x180>
 800b7da:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800b7de:	b193      	cbz	r3, 800b806 <_rclc_execute.part.0+0x1ca>
 800b7e0:	68c5      	ldr	r5, [r0, #12]
 800b7e2:	b185      	cbz	r5, 800b806 <_rclc_execute.part.0+0x1ca>
 800b7e4:	2600      	movs	r6, #0
 800b7e6:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 800b7ea:	b14b      	cbz	r3, 800b800 <_rclc_execute.part.0+0x1c4>
 800b7ec:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b7ee:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
 800b7f2:	b12b      	cbz	r3, 800b800 <_rclc_execute.part.0+0x1c4>
 800b7f4:	4628      	mov	r0, r5
 800b7f6:	f895 1025 	ldrb.w	r1, [r5, #37]	; 0x25
 800b7fa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800b7fc:	4798      	blx	r3
 800b7fe:	6860      	ldr	r0, [r4, #4]
 800b800:	682d      	ldr	r5, [r5, #0]
 800b802:	2d00      	cmp	r5, #0
 800b804:	d1ef      	bne.n	800b7e6 <_rclc_execute.part.0+0x1aa>
 800b806:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	f43f af76 	beq.w	800b6fc <_rclc_execute.part.0+0xc0>
 800b810:	2700      	movs	r7, #0
 800b812:	e00b      	b.n	800b82c <_rclc_execute.part.0+0x1f0>
 800b814:	6863      	ldr	r3, [r4, #4]
 800b816:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800b818:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800b81a:	6a1e      	ldr	r6, [r3, #32]
 800b81c:	f885 7023 	strb.w	r7, [r5, #35]	; 0x23
 800b820:	47b0      	blx	r6
 800b822:	6860      	ldr	r0, [r4, #4]
 800b824:	4629      	mov	r1, r5
 800b826:	f006 f935 	bl	8011a94 <rclc_action_remove_used_goal_handle>
 800b82a:	6860      	ldr	r0, [r4, #4]
 800b82c:	f006 f9b8 	bl	8011ba0 <rclc_action_find_first_handle_with_result_response>
 800b830:	4605      	mov	r5, r0
 800b832:	2800      	cmp	r0, #0
 800b834:	d1ee      	bne.n	800b814 <_rclc_execute.part.0+0x1d8>
 800b836:	e761      	b.n	800b6fc <_rclc_execute.part.0+0xc0>
 800b838:	6860      	ldr	r0, [r4, #4]
 800b83a:	f880 5020 	strb.w	r5, [r0, #32]
 800b83e:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800b842:	2b00      	cmp	r3, #0
 800b844:	f43f af5a 	beq.w	800b6fc <_rclc_execute.part.0+0xc0>
 800b848:	68c5      	ldr	r5, [r0, #12]
 800b84a:	b1b5      	cbz	r5, 800b87a <_rclc_execute.part.0+0x23e>
 800b84c:	2602      	movs	r6, #2
 800b84e:	e001      	b.n	800b854 <_rclc_execute.part.0+0x218>
 800b850:	682d      	ldr	r5, [r5, #0]
 800b852:	b195      	cbz	r5, 800b87a <_rclc_execute.part.0+0x23e>
 800b854:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800b858:	2b03      	cmp	r3, #3
 800b85a:	d1f9      	bne.n	800b850 <_rclc_execute.part.0+0x214>
 800b85c:	69c3      	ldr	r3, [r0, #28]
 800b85e:	4628      	mov	r0, r5
 800b860:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800b862:	4798      	blx	r3
 800b864:	4603      	mov	r3, r0
 800b866:	f105 0260 	add.w	r2, r5, #96	; 0x60
 800b86a:	4628      	mov	r0, r5
 800b86c:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 800b870:	b143      	cbz	r3, 800b884 <_rclc_execute.part.0+0x248>
 800b872:	f006 f9c1 	bl	8011bf8 <rclc_action_server_goal_cancel_accept>
 800b876:	6860      	ldr	r0, [r4, #4]
 800b878:	e7ea      	b.n	800b850 <_rclc_execute.part.0+0x214>
 800b87a:	2300      	movs	r3, #0
 800b87c:	461c      	mov	r4, r3
 800b87e:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
 800b882:	e72e      	b.n	800b6e2 <_rclc_execute.part.0+0xa6>
 800b884:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800b886:	f105 0758 	add.w	r7, r5, #88	; 0x58
 800b88a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800b88e:	2101      	movs	r1, #1
 800b890:	6860      	ldr	r0, [r4, #4]
 800b892:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b896:	f006 f9db 	bl	8011c50 <rclc_action_server_goal_cancel_reject>
 800b89a:	722e      	strb	r6, [r5, #8]
 800b89c:	6860      	ldr	r0, [r4, #4]
 800b89e:	e7d7      	b.n	800b850 <_rclc_execute.part.0+0x214>
 800b8a0:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800b8a2:	f104 0510 	add.w	r5, r4, #16
 800b8a6:	6880      	ldr	r0, [r0, #8]
 800b8a8:	4798      	blx	r3
 800b8aa:	e6e3      	b.n	800b674 <_rclc_execute.part.0+0x38>
 800b8ac:	f100 0510 	add.w	r5, r0, #16
 800b8b0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800b8b2:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800b8b4:	4629      	mov	r1, r5
 800b8b6:	6880      	ldr	r0, [r0, #8]
 800b8b8:	4798      	blx	r3
 800b8ba:	e6db      	b.n	800b674 <_rclc_execute.part.0+0x38>
 800b8bc:	2401      	movs	r4, #1
 800b8be:	e710      	b.n	800b6e2 <_rclc_execute.part.0+0xa6>

0800b8c0 <rclc_executor_trigger_any>:
 800b8c0:	2800      	cmp	r0, #0
 800b8c2:	d03d      	beq.n	800b940 <rclc_executor_trigger_any+0x80>
 800b8c4:	2900      	cmp	r1, #0
 800b8c6:	d03c      	beq.n	800b942 <rclc_executor_trigger_any+0x82>
 800b8c8:	4603      	mov	r3, r0
 800b8ca:	f890 0038 	ldrb.w	r0, [r0, #56]	; 0x38
 800b8ce:	2200      	movs	r2, #0
 800b8d0:	2800      	cmp	r0, #0
 800b8d2:	d035      	beq.n	800b940 <rclc_executor_trigger_any+0x80>
 800b8d4:	b430      	push	{r4, r5}
 800b8d6:	f893 c000 	ldrb.w	ip, [r3]
 800b8da:	f1bc 0f08 	cmp.w	ip, #8
 800b8de:	d11d      	bne.n	800b91c <rclc_executor_trigger_any+0x5c>
 800b8e0:	685c      	ldr	r4, [r3, #4]
 800b8e2:	6c25      	ldr	r5, [r4, #64]	; 0x40
 800b8e4:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 800b8e8:	d105      	bne.n	800b8f6 <rclc_executor_trigger_any+0x36>
 800b8ea:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 800b8ee:	b910      	cbnz	r0, 800b8f6 <rclc_executor_trigger_any+0x36>
 800b8f0:	f894 0043 	ldrb.w	r0, [r4, #67]	; 0x43
 800b8f4:	b128      	cbz	r0, 800b902 <rclc_executor_trigger_any+0x42>
 800b8f6:	bc30      	pop	{r4, r5}
 800b8f8:	4770      	bx	lr
 800b8fa:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
 800b8fe:	2800      	cmp	r0, #0
 800b900:	d1f9      	bne.n	800b8f6 <rclc_executor_trigger_any+0x36>
 800b902:	3201      	adds	r2, #1
 800b904:	3340      	adds	r3, #64	; 0x40
 800b906:	4291      	cmp	r1, r2
 800b908:	d017      	beq.n	800b93a <rclc_executor_trigger_any+0x7a>
 800b90a:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
 800b90e:	2800      	cmp	r0, #0
 800b910:	d0f1      	beq.n	800b8f6 <rclc_executor_trigger_any+0x36>
 800b912:	f893 c000 	ldrb.w	ip, [r3]
 800b916:	f1bc 0f08 	cmp.w	ip, #8
 800b91a:	d0e1      	beq.n	800b8e0 <rclc_executor_trigger_any+0x20>
 800b91c:	f1bc 0f09 	cmp.w	ip, #9
 800b920:	d1eb      	bne.n	800b8fa <rclc_executor_trigger_any+0x3a>
 800b922:	685c      	ldr	r4, [r3, #4]
 800b924:	6a25      	ldr	r5, [r4, #32]
 800b926:	2d00      	cmp	r5, #0
 800b928:	d1e5      	bne.n	800b8f6 <rclc_executor_trigger_any+0x36>
 800b92a:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 800b92e:	2800      	cmp	r0, #0
 800b930:	d1e1      	bne.n	800b8f6 <rclc_executor_trigger_any+0x36>
 800b932:	3201      	adds	r2, #1
 800b934:	3340      	adds	r3, #64	; 0x40
 800b936:	4291      	cmp	r1, r2
 800b938:	d1e7      	bne.n	800b90a <rclc_executor_trigger_any+0x4a>
 800b93a:	2000      	movs	r0, #0
 800b93c:	bc30      	pop	{r4, r5}
 800b93e:	4770      	bx	lr
 800b940:	4770      	bx	lr
 800b942:	4608      	mov	r0, r1
 800b944:	4770      	bx	lr
 800b946:	bf00      	nop

0800b948 <rclc_executor_get_zero_initialized_executor>:
 800b948:	b510      	push	{r4, lr}
 800b94a:	4604      	mov	r4, r0
 800b94c:	2290      	movs	r2, #144	; 0x90
 800b94e:	4902      	ldr	r1, [pc, #8]	; (800b958 <rclc_executor_get_zero_initialized_executor+0x10>)
 800b950:	f00d ffcd 	bl	80198ee <memcpy>
 800b954:	4620      	mov	r0, r4
 800b956:	bd10      	pop	{r4, pc}
 800b958:	0801b028 	.word	0x0801b028
 800b95c:	00000000 	.word	0x00000000

0800b960 <rclc_executor_init>:
 800b960:	2900      	cmp	r1, #0
 800b962:	d06a      	beq.n	800ba3a <rclc_executor_init+0xda>
 800b964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b968:	4605      	mov	r5, r0
 800b96a:	b0b2      	sub	sp, #200	; 0xc8
 800b96c:	2800      	cmp	r0, #0
 800b96e:	d05c      	beq.n	800ba2a <rclc_executor_init+0xca>
 800b970:	4616      	mov	r6, r2
 800b972:	4618      	mov	r0, r3
 800b974:	4688      	mov	r8, r1
 800b976:	461f      	mov	r7, r3
 800b978:	f000 fbe6 	bl	800c148 <rcutils_allocator_is_valid>
 800b97c:	2e00      	cmp	r6, #0
 800b97e:	d054      	beq.n	800ba2a <rclc_executor_init+0xca>
 800b980:	f080 0401 	eor.w	r4, r0, #1
 800b984:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 800b988:	d14f      	bne.n	800ba2a <rclc_executor_init+0xca>
 800b98a:	2290      	movs	r2, #144	; 0x90
 800b98c:	4930      	ldr	r1, [pc, #192]	; (800ba50 <rclc_executor_init+0xf0>)
 800b98e:	a80e      	add	r0, sp, #56	; 0x38
 800b990:	f00d ffad 	bl	80198ee <memcpy>
 800b994:	a90e      	add	r1, sp, #56	; 0x38
 800b996:	2290      	movs	r2, #144	; 0x90
 800b998:	4628      	mov	r0, r5
 800b99a:	f00d ffa8 	bl	80198ee <memcpy>
 800b99e:	4668      	mov	r0, sp
 800b9a0:	f8c5 8004 	str.w	r8, [r5, #4]
 800b9a4:	60ee      	str	r6, [r5, #12]
 800b9a6:	f004 fe0f 	bl	80105c8 <rcl_get_zero_initialized_wait_set>
 800b9aa:	46ec      	mov	ip, sp
 800b9ac:	f105 0e18 	add.w	lr, r5, #24
 800b9b0:	f8d7 8000 	ldr.w	r8, [r7]
 800b9b4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b9b8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800b9bc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b9c0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800b9c4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b9c8:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 800ba48 <rclc_executor_init+0xe8>
 800b9cc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800b9d0:	f8dc 3000 	ldr.w	r3, [ip]
 800b9d4:	01b0      	lsls	r0, r6, #6
 800b9d6:	6939      	ldr	r1, [r7, #16]
 800b9d8:	f8ce 3000 	str.w	r3, [lr]
 800b9dc:	616f      	str	r7, [r5, #20]
 800b9de:	ed85 7b1c 	vstr	d7, [r5, #112]	; 0x70
 800b9e2:	47c0      	blx	r8
 800b9e4:	60a8      	str	r0, [r5, #8]
 800b9e6:	b908      	cbnz	r0, 800b9ec <rclc_executor_init+0x8c>
 800b9e8:	e029      	b.n	800ba3e <rclc_executor_init+0xde>
 800b9ea:	68a8      	ldr	r0, [r5, #8]
 800b9ec:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800b9f0:	3401      	adds	r4, #1
 800b9f2:	4631      	mov	r1, r6
 800b9f4:	f000 fa88 	bl	800bf08 <rclc_executor_handle_init>
 800b9f8:	42a6      	cmp	r6, r4
 800b9fa:	d8f6      	bhi.n	800b9ea <rclc_executor_init+0x8a>
 800b9fc:	f105 004c 	add.w	r0, r5, #76	; 0x4c
 800ba00:	f000 fa78 	bl	800bef4 <rclc_executor_handle_counters_zero_init>
 800ba04:	4a13      	ldr	r2, [pc, #76]	; (800ba54 <rclc_executor_init+0xf4>)
 800ba06:	2300      	movs	r3, #0
 800ba08:	68a8      	ldr	r0, [r5, #8]
 800ba0a:	e9c5 2320 	strd	r2, r3, [r5, #128]	; 0x80
 800ba0e:	b168      	cbz	r0, 800ba2c <rclc_executor_init+0xcc>
 800ba10:	68eb      	ldr	r3, [r5, #12]
 800ba12:	b173      	cbz	r3, 800ba32 <rclc_executor_init+0xd2>
 800ba14:	696a      	ldr	r2, [r5, #20]
 800ba16:	fab2 f382 	clz	r3, r2
 800ba1a:	095b      	lsrs	r3, r3, #5
 800ba1c:	b14a      	cbz	r2, 800ba32 <rclc_executor_init+0xd2>
 800ba1e:	4618      	mov	r0, r3
 800ba20:	f885 3088 	strb.w	r3, [r5, #136]	; 0x88
 800ba24:	b032      	add	sp, #200	; 0xc8
 800ba26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba2a:	200b      	movs	r0, #11
 800ba2c:	b032      	add	sp, #200	; 0xc8
 800ba2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba32:	2000      	movs	r0, #0
 800ba34:	b032      	add	sp, #200	; 0xc8
 800ba36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba3a:	200b      	movs	r0, #11
 800ba3c:	4770      	bx	lr
 800ba3e:	200a      	movs	r0, #10
 800ba40:	e7f4      	b.n	800ba2c <rclc_executor_init+0xcc>
 800ba42:	bf00      	nop
 800ba44:	f3af 8000 	nop.w
 800ba48:	3b9aca00 	.word	0x3b9aca00
 800ba4c:	00000000 	.word	0x00000000
 800ba50:	0801b028 	.word	0x0801b028
 800ba54:	0800b8c1 	.word	0x0800b8c1

0800ba58 <rclc_executor_add_service>:
 800ba58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba5a:	9d06      	ldr	r5, [sp, #24]
 800ba5c:	4604      	mov	r4, r0
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	bf18      	it	ne
 800ba62:	2d00      	cmpne	r5, #0
 800ba64:	bf0c      	ite	eq
 800ba66:	2001      	moveq	r0, #1
 800ba68:	2000      	movne	r0, #0
 800ba6a:	2a00      	cmp	r2, #0
 800ba6c:	bf08      	it	eq
 800ba6e:	f040 0001 	orreq.w	r0, r0, #1
 800ba72:	2900      	cmp	r1, #0
 800ba74:	bf08      	it	eq
 800ba76:	f040 0001 	orreq.w	r0, r0, #1
 800ba7a:	bb40      	cbnz	r0, 800bace <rclc_executor_add_service+0x76>
 800ba7c:	fab4 f684 	clz	r6, r4
 800ba80:	0976      	lsrs	r6, r6, #5
 800ba82:	b324      	cbz	r4, 800bace <rclc_executor_add_service+0x76>
 800ba84:	e9d4 7003 	ldrd	r7, r0, [r4, #12]
 800ba88:	42b8      	cmp	r0, r7
 800ba8a:	d301      	bcc.n	800ba90 <rclc_executor_add_service+0x38>
 800ba8c:	2001      	movs	r0, #1
 800ba8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba90:	68a7      	ldr	r7, [r4, #8]
 800ba92:	ea4f 1e80 	mov.w	lr, r0, lsl #6
 800ba96:	f100 0c01 	add.w	ip, r0, #1
 800ba9a:	eb07 1080 	add.w	r0, r7, r0, lsl #6
 800ba9e:	6283      	str	r3, [r0, #40]	; 0x28
 800baa0:	2305      	movs	r3, #5
 800baa2:	6305      	str	r5, [r0, #48]	; 0x30
 800baa4:	f104 0518 	add.w	r5, r4, #24
 800baa8:	e9c0 1201 	strd	r1, r2, [r0, #4]
 800baac:	f827 300e 	strh.w	r3, [r7, lr]
 800bab0:	2301      	movs	r3, #1
 800bab2:	62c6      	str	r6, [r0, #44]	; 0x2c
 800bab4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 800bab8:	4628      	mov	r0, r5
 800baba:	f8c4 c010 	str.w	ip, [r4, #16]
 800babe:	f004 fd97 	bl	80105f0 <rcl_wait_set_is_valid>
 800bac2:	b930      	cbnz	r0, 800bad2 <rclc_executor_add_service+0x7a>
 800bac4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bac6:	2000      	movs	r0, #0
 800bac8:	3301      	adds	r3, #1
 800baca:	65a3      	str	r3, [r4, #88]	; 0x58
 800bacc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bace:	200b      	movs	r0, #11
 800bad0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bad2:	4628      	mov	r0, r5
 800bad4:	f004 fd92 	bl	80105fc <rcl_wait_set_fini>
 800bad8:	2800      	cmp	r0, #0
 800bada:	d0f3      	beq.n	800bac4 <rclc_executor_add_service+0x6c>
 800badc:	e7d7      	b.n	800ba8e <rclc_executor_add_service+0x36>
 800bade:	bf00      	nop

0800bae0 <rclc_executor_prepare>:
 800bae0:	2800      	cmp	r0, #0
 800bae2:	d044      	beq.n	800bb6e <rclc_executor_prepare+0x8e>
 800bae4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bae6:	f100 0518 	add.w	r5, r0, #24
 800baea:	b09b      	sub	sp, #108	; 0x6c
 800baec:	4604      	mov	r4, r0
 800baee:	4628      	mov	r0, r5
 800baf0:	f004 fd7e 	bl	80105f0 <rcl_wait_set_is_valid>
 800baf4:	b110      	cbz	r0, 800bafc <rclc_executor_prepare+0x1c>
 800baf6:	2000      	movs	r0, #0
 800baf8:	b01b      	add	sp, #108	; 0x6c
 800bafa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bafc:	4628      	mov	r0, r5
 800bafe:	f004 fd7d 	bl	80105fc <rcl_wait_set_fini>
 800bb02:	2800      	cmp	r0, #0
 800bb04:	d130      	bne.n	800bb68 <rclc_executor_prepare+0x88>
 800bb06:	a80c      	add	r0, sp, #48	; 0x30
 800bb08:	ae04      	add	r6, sp, #16
 800bb0a:	f004 fd5d 	bl	80105c8 <rcl_get_zero_initialized_wait_set>
 800bb0e:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 800bb12:	46ae      	mov	lr, r5
 800bb14:	6967      	ldr	r7, [r4, #20]
 800bb16:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800bb1a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800bb1e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800bb22:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800bb26:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800bb2a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800bb2e:	f8dc 3000 	ldr.w	r3, [ip]
 800bb32:	f8ce 3000 	str.w	r3, [lr]
 800bb36:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800bb38:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800bb3a:	683b      	ldr	r3, [r7, #0]
 800bb3c:	4628      	mov	r0, r5
 800bb3e:	6862      	ldr	r2, [r4, #4]
 800bb40:	6033      	str	r3, [r6, #0]
 800bb42:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800bb44:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800bb46:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800bb4a:	e9d4 3214 	ldrd	r3, r2, [r4, #80]	; 0x50
 800bb4e:	e9cd 2100 	strd	r2, r1, [sp]
 800bb52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bb54:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800bb56:	f005 f851 	bl	8010bfc <rcl_wait_set_init>
 800bb5a:	2800      	cmp	r0, #0
 800bb5c:	d0cc      	beq.n	800baf8 <rclc_executor_prepare+0x18>
 800bb5e:	900b      	str	r0, [sp, #44]	; 0x2c
 800bb60:	f000 fb16 	bl	800c190 <rcutils_reset_error>
 800bb64:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800bb66:	e7c7      	b.n	800baf8 <rclc_executor_prepare+0x18>
 800bb68:	f000 fb12 	bl	800c190 <rcutils_reset_error>
 800bb6c:	e7cb      	b.n	800bb06 <rclc_executor_prepare+0x26>
 800bb6e:	200b      	movs	r0, #11
 800bb70:	4770      	bx	lr
 800bb72:	bf00      	nop

0800bb74 <rclc_executor_spin_some.part.0>:
 800bb74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb78:	4605      	mov	r5, r0
 800bb7a:	4691      	mov	r9, r2
 800bb7c:	4698      	mov	r8, r3
 800bb7e:	f7ff ffaf 	bl	800bae0 <rclc_executor_prepare>
 800bb82:	f105 0618 	add.w	r6, r5, #24
 800bb86:	4630      	mov	r0, r6
 800bb88:	f004 fe04 	bl	8010794 <rcl_wait_set_clear>
 800bb8c:	4607      	mov	r7, r0
 800bb8e:	2800      	cmp	r0, #0
 800bb90:	f040 80a8 	bne.w	800bce4 <rclc_executor_spin_some.part.0+0x170>
 800bb94:	68eb      	ldr	r3, [r5, #12]
 800bb96:	b30b      	cbz	r3, 800bbdc <rclc_executor_spin_some.part.0+0x68>
 800bb98:	4604      	mov	r4, r0
 800bb9a:	68a9      	ldr	r1, [r5, #8]
 800bb9c:	01a2      	lsls	r2, r4, #6
 800bb9e:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800bba2:	f89c 3038 	ldrb.w	r3, [ip, #56]	; 0x38
 800bba6:	b1cb      	cbz	r3, 800bbdc <rclc_executor_spin_some.part.0+0x68>
 800bba8:	5c8b      	ldrb	r3, [r1, r2]
 800bbaa:	2b0a      	cmp	r3, #10
 800bbac:	f200 80de 	bhi.w	800bd6c <rclc_executor_spin_some.part.0+0x1f8>
 800bbb0:	e8df f003 	tbb	[pc, r3]
 800bbb4:	8da99d9d 	.word	0x8da99d9d
 800bbb8:	0606068d 	.word	0x0606068d
 800bbbc:	c1ce      	.short	0xc1ce
 800bbbe:	b5          	.byte	0xb5
 800bbbf:	00          	.byte	0x00
 800bbc0:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800bbc4:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800bbc8:	4630      	mov	r0, r6
 800bbca:	f005 f933 	bl	8010e34 <rcl_wait_set_add_service>
 800bbce:	2800      	cmp	r0, #0
 800bbd0:	f040 8087 	bne.w	800bce2 <rclc_executor_spin_some.part.0+0x16e>
 800bbd4:	3401      	adds	r4, #1
 800bbd6:	68eb      	ldr	r3, [r5, #12]
 800bbd8:	429c      	cmp	r4, r3
 800bbda:	d3de      	bcc.n	800bb9a <rclc_executor_spin_some.part.0+0x26>
 800bbdc:	4643      	mov	r3, r8
 800bbde:	464a      	mov	r2, r9
 800bbe0:	4630      	mov	r0, r6
 800bbe2:	f005 f955 	bl	8010e90 <rcl_wait>
 800bbe6:	f895 3088 	ldrb.w	r3, [r5, #136]	; 0x88
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	f000 80c6 	beq.w	800bd7c <rclc_executor_spin_some.part.0+0x208>
 800bbf0:	2b01      	cmp	r3, #1
 800bbf2:	f040 80bb 	bne.w	800bd6c <rclc_executor_spin_some.part.0+0x1f8>
 800bbf6:	68eb      	ldr	r3, [r5, #12]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	f000 8159 	beq.w	800beb0 <rclc_executor_spin_some.part.0+0x33c>
 800bbfe:	2400      	movs	r4, #0
 800bc00:	f240 1991 	movw	r9, #401	; 0x191
 800bc04:	46a0      	mov	r8, r4
 800bc06:	e00a      	b.n	800bc1e <rclc_executor_spin_some.part.0+0xaa>
 800bc08:	f7ff fb56 	bl	800b2b8 <_rclc_check_for_new_data>
 800bc0c:	4604      	mov	r4, r0
 800bc0e:	b110      	cbz	r0, 800bc16 <rclc_executor_spin_some.part.0+0xa2>
 800bc10:	4548      	cmp	r0, r9
 800bc12:	f040 80b1 	bne.w	800bd78 <rclc_executor_spin_some.part.0+0x204>
 800bc16:	68eb      	ldr	r3, [r5, #12]
 800bc18:	4598      	cmp	r8, r3
 800bc1a:	f080 8126 	bcs.w	800be6a <rclc_executor_spin_some.part.0+0x2f6>
 800bc1e:	68aa      	ldr	r2, [r5, #8]
 800bc20:	4631      	mov	r1, r6
 800bc22:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800bc26:	f108 0801 	add.w	r8, r8, #1
 800bc2a:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 800bc2e:	f1bc 0f00 	cmp.w	ip, #0
 800bc32:	d1e9      	bne.n	800bc08 <rclc_executor_spin_some.part.0+0x94>
 800bc34:	4619      	mov	r1, r3
 800bc36:	4610      	mov	r0, r2
 800bc38:	e9d5 3220 	ldrd	r3, r2, [r5, #128]	; 0x80
 800bc3c:	4798      	blx	r3
 800bc3e:	2800      	cmp	r0, #0
 800bc40:	f000 809a 	beq.w	800bd78 <rclc_executor_spin_some.part.0+0x204>
 800bc44:	68eb      	ldr	r3, [r5, #12]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	f000 8096 	beq.w	800bd78 <rclc_executor_spin_some.part.0+0x204>
 800bc4c:	f04f 0800 	mov.w	r8, #0
 800bc50:	f240 1991 	movw	r9, #401	; 0x191
 800bc54:	e009      	b.n	800bc6a <rclc_executor_spin_some.part.0+0xf6>
 800bc56:	f7ff fb7d 	bl	800b354 <_rclc_take_new_data>
 800bc5a:	4604      	mov	r4, r0
 800bc5c:	b110      	cbz	r0, 800bc64 <rclc_executor_spin_some.part.0+0xf0>
 800bc5e:	4548      	cmp	r0, r9
 800bc60:	f040 808a 	bne.w	800bd78 <rclc_executor_spin_some.part.0+0x204>
 800bc64:	68eb      	ldr	r3, [r5, #12]
 800bc66:	4598      	cmp	r8, r3
 800bc68:	d209      	bcs.n	800bc7e <rclc_executor_spin_some.part.0+0x10a>
 800bc6a:	68a8      	ldr	r0, [r5, #8]
 800bc6c:	4631      	mov	r1, r6
 800bc6e:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800bc72:	f108 0801 	add.w	r8, r8, #1
 800bc76:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 800bc7a:	2a00      	cmp	r2, #0
 800bc7c:	d1eb      	bne.n	800bc56 <rclc_executor_spin_some.part.0+0xe2>
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d07a      	beq.n	800bd78 <rclc_executor_spin_some.part.0+0x204>
 800bc82:	2600      	movs	r6, #0
 800bc84:	e00e      	b.n	800bca4 <rclc_executor_spin_some.part.0+0x130>
 800bc86:	f812 200c 	ldrb.w	r2, [r2, ip]
 800bc8a:	2a08      	cmp	r2, #8
 800bc8c:	f000 80fc 	beq.w	800be88 <rclc_executor_spin_some.part.0+0x314>
 800bc90:	2a09      	cmp	r2, #9
 800bc92:	f000 80ee 	beq.w	800be72 <rclc_executor_spin_some.part.0+0x2fe>
 800bc96:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
 800bc9a:	b98a      	cbnz	r2, 800bcc0 <rclc_executor_spin_some.part.0+0x14c>
 800bc9c:	3601      	adds	r6, #1
 800bc9e:	429e      	cmp	r6, r3
 800bca0:	d267      	bcs.n	800bd72 <rclc_executor_spin_some.part.0+0x1fe>
 800bca2:	2400      	movs	r4, #0
 800bca4:	68aa      	ldr	r2, [r5, #8]
 800bca6:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800bcaa:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800bcae:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
 800bcb2:	2900      	cmp	r1, #0
 800bcb4:	d060      	beq.n	800bd78 <rclc_executor_spin_some.part.0+0x204>
 800bcb6:	7841      	ldrb	r1, [r0, #1]
 800bcb8:	2900      	cmp	r1, #0
 800bcba:	d0e4      	beq.n	800bc86 <rclc_executor_spin_some.part.0+0x112>
 800bcbc:	2901      	cmp	r1, #1
 800bcbe:	d1ed      	bne.n	800bc9c <rclc_executor_spin_some.part.0+0x128>
 800bcc0:	f7ff fcbc 	bl	800b63c <_rclc_execute.part.0>
 800bcc4:	2800      	cmp	r0, #0
 800bcc6:	f040 80b5 	bne.w	800be34 <rclc_executor_spin_some.part.0+0x2c0>
 800bcca:	68eb      	ldr	r3, [r5, #12]
 800bccc:	e7e6      	b.n	800bc9c <rclc_executor_spin_some.part.0+0x128>
 800bcce:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800bcd2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800bcd6:	4630      	mov	r0, r6
 800bcd8:	f005 f880 	bl	8010ddc <rcl_wait_set_add_client>
 800bcdc:	2800      	cmp	r0, #0
 800bcde:	f43f af79 	beq.w	800bbd4 <rclc_executor_spin_some.part.0+0x60>
 800bce2:	4607      	mov	r7, r0
 800bce4:	f000 fa54 	bl	800c190 <rcutils_reset_error>
 800bce8:	4638      	mov	r0, r7
 800bcea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcee:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800bcf2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800bcf6:	4630      	mov	r0, r6
 800bcf8:	f004 fd20 	bl	801073c <rcl_wait_set_add_subscription>
 800bcfc:	2800      	cmp	r0, #0
 800bcfe:	f43f af69 	beq.w	800bbd4 <rclc_executor_spin_some.part.0+0x60>
 800bd02:	4607      	mov	r7, r0
 800bd04:	e7ee      	b.n	800bce4 <rclc_executor_spin_some.part.0+0x170>
 800bd06:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800bd0a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800bd0e:	4630      	mov	r0, r6
 800bd10:	f005 f834 	bl	8010d7c <rcl_wait_set_add_timer>
 800bd14:	2800      	cmp	r0, #0
 800bd16:	f43f af5d 	beq.w	800bbd4 <rclc_executor_spin_some.part.0+0x60>
 800bd1a:	4607      	mov	r7, r0
 800bd1c:	e7e2      	b.n	800bce4 <rclc_executor_spin_some.part.0+0x170>
 800bd1e:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800bd22:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800bd26:	4630      	mov	r0, r6
 800bd28:	f004 fffc 	bl	8010d24 <rcl_wait_set_add_guard_condition>
 800bd2c:	2800      	cmp	r0, #0
 800bd2e:	f43f af51 	beq.w	800bbd4 <rclc_executor_spin_some.part.0+0x60>
 800bd32:	4607      	mov	r7, r0
 800bd34:	e7d6      	b.n	800bce4 <rclc_executor_spin_some.part.0+0x170>
 800bd36:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800bd3a:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800bd3e:	4630      	mov	r0, r6
 800bd40:	3110      	adds	r1, #16
 800bd42:	f005 fd79 	bl	8011838 <rcl_action_wait_set_add_action_server>
 800bd46:	2800      	cmp	r0, #0
 800bd48:	f43f af44 	beq.w	800bbd4 <rclc_executor_spin_some.part.0+0x60>
 800bd4c:	4607      	mov	r7, r0
 800bd4e:	e7c9      	b.n	800bce4 <rclc_executor_spin_some.part.0+0x170>
 800bd50:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800bd54:	2300      	movs	r3, #0
 800bd56:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800bd5a:	4630      	mov	r0, r6
 800bd5c:	3110      	adds	r1, #16
 800bd5e:	f005 fb43 	bl	80113e8 <rcl_action_wait_set_add_action_client>
 800bd62:	2800      	cmp	r0, #0
 800bd64:	f43f af36 	beq.w	800bbd4 <rclc_executor_spin_some.part.0+0x60>
 800bd68:	4607      	mov	r7, r0
 800bd6a:	e7bb      	b.n	800bce4 <rclc_executor_spin_some.part.0+0x170>
 800bd6c:	2701      	movs	r7, #1
 800bd6e:	f000 fa0f 	bl	800c190 <rcutils_reset_error>
 800bd72:	4638      	mov	r0, r7
 800bd74:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd78:	4627      	mov	r7, r4
 800bd7a:	e7fa      	b.n	800bd72 <rclc_executor_spin_some.part.0+0x1fe>
 800bd7c:	68eb      	ldr	r3, [r5, #12]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	f000 8093 	beq.w	800beaa <rclc_executor_spin_some.part.0+0x336>
 800bd84:	2400      	movs	r4, #0
 800bd86:	f240 1991 	movw	r9, #401	; 0x191
 800bd8a:	46a0      	mov	r8, r4
 800bd8c:	e008      	b.n	800bda0 <rclc_executor_spin_some.part.0+0x22c>
 800bd8e:	f7ff fa93 	bl	800b2b8 <_rclc_check_for_new_data>
 800bd92:	4604      	mov	r4, r0
 800bd94:	b108      	cbz	r0, 800bd9a <rclc_executor_spin_some.part.0+0x226>
 800bd96:	4548      	cmp	r0, r9
 800bd98:	d1ee      	bne.n	800bd78 <rclc_executor_spin_some.part.0+0x204>
 800bd9a:	68eb      	ldr	r3, [r5, #12]
 800bd9c:	4598      	cmp	r8, r3
 800bd9e:	d266      	bcs.n	800be6e <rclc_executor_spin_some.part.0+0x2fa>
 800bda0:	68aa      	ldr	r2, [r5, #8]
 800bda2:	4631      	mov	r1, r6
 800bda4:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800bda8:	f108 0801 	add.w	r8, r8, #1
 800bdac:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 800bdb0:	f1bc 0f00 	cmp.w	ip, #0
 800bdb4:	d1eb      	bne.n	800bd8e <rclc_executor_spin_some.part.0+0x21a>
 800bdb6:	4619      	mov	r1, r3
 800bdb8:	4610      	mov	r0, r2
 800bdba:	e9d5 3220 	ldrd	r3, r2, [r5, #128]	; 0x80
 800bdbe:	4798      	blx	r3
 800bdc0:	2800      	cmp	r0, #0
 800bdc2:	d0d9      	beq.n	800bd78 <rclc_executor_spin_some.part.0+0x204>
 800bdc4:	68eb      	ldr	r3, [r5, #12]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d0d6      	beq.n	800bd78 <rclc_executor_spin_some.part.0+0x204>
 800bdca:	f04f 0a00 	mov.w	sl, #0
 800bdce:	f240 1891 	movw	r8, #401	; 0x191
 800bdd2:	f240 2959 	movw	r9, #601	; 0x259
 800bdd6:	e00e      	b.n	800bdf6 <rclc_executor_spin_some.part.0+0x282>
 800bdd8:	f813 300b 	ldrb.w	r3, [r3, fp]
 800bddc:	2b08      	cmp	r3, #8
 800bdde:	d034      	beq.n	800be4a <rclc_executor_spin_some.part.0+0x2d6>
 800bde0:	2b09      	cmp	r3, #9
 800bde2:	d029      	beq.n	800be38 <rclc_executor_spin_some.part.0+0x2c4>
 800bde4:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800bde8:	bb03      	cbnz	r3, 800be2c <rclc_executor_spin_some.part.0+0x2b8>
 800bdea:	f10a 0a01 	add.w	sl, sl, #1
 800bdee:	68eb      	ldr	r3, [r5, #12]
 800bdf0:	459a      	cmp	sl, r3
 800bdf2:	d2be      	bcs.n	800bd72 <rclc_executor_spin_some.part.0+0x1fe>
 800bdf4:	2400      	movs	r4, #0
 800bdf6:	68a8      	ldr	r0, [r5, #8]
 800bdf8:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 800bdfc:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 800be00:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800be04:	2b00      	cmp	r3, #0
 800be06:	d0b7      	beq.n	800bd78 <rclc_executor_spin_some.part.0+0x204>
 800be08:	4631      	mov	r1, r6
 800be0a:	f7ff faa3 	bl	800b354 <_rclc_take_new_data>
 800be0e:	2800      	cmp	r0, #0
 800be10:	bf18      	it	ne
 800be12:	4540      	cmpne	r0, r8
 800be14:	d001      	beq.n	800be1a <rclc_executor_spin_some.part.0+0x2a6>
 800be16:	4548      	cmp	r0, r9
 800be18:	d10c      	bne.n	800be34 <rclc_executor_spin_some.part.0+0x2c0>
 800be1a:	68ab      	ldr	r3, [r5, #8]
 800be1c:	eb13 000b 	adds.w	r0, r3, fp
 800be20:	d021      	beq.n	800be66 <rclc_executor_spin_some.part.0+0x2f2>
 800be22:	7842      	ldrb	r2, [r0, #1]
 800be24:	2a00      	cmp	r2, #0
 800be26:	d0d7      	beq.n	800bdd8 <rclc_executor_spin_some.part.0+0x264>
 800be28:	2a01      	cmp	r2, #1
 800be2a:	d1de      	bne.n	800bdea <rclc_executor_spin_some.part.0+0x276>
 800be2c:	f7ff fc06 	bl	800b63c <_rclc_execute.part.0>
 800be30:	2800      	cmp	r0, #0
 800be32:	d0da      	beq.n	800bdea <rclc_executor_spin_some.part.0+0x276>
 800be34:	4607      	mov	r7, r0
 800be36:	e79c      	b.n	800bd72 <rclc_executor_spin_some.part.0+0x1fe>
 800be38:	6843      	ldr	r3, [r0, #4]
 800be3a:	6a1a      	ldr	r2, [r3, #32]
 800be3c:	2a00      	cmp	r2, #0
 800be3e:	d1f5      	bne.n	800be2c <rclc_executor_spin_some.part.0+0x2b8>
 800be40:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800be44:	2b00      	cmp	r3, #0
 800be46:	d0d0      	beq.n	800bdea <rclc_executor_spin_some.part.0+0x276>
 800be48:	e7f0      	b.n	800be2c <rclc_executor_spin_some.part.0+0x2b8>
 800be4a:	6843      	ldr	r3, [r0, #4]
 800be4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800be4e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800be52:	d1eb      	bne.n	800be2c <rclc_executor_spin_some.part.0+0x2b8>
 800be54:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800be58:	2a00      	cmp	r2, #0
 800be5a:	d1e7      	bne.n	800be2c <rclc_executor_spin_some.part.0+0x2b8>
 800be5c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800be60:	2b00      	cmp	r3, #0
 800be62:	d0c2      	beq.n	800bdea <rclc_executor_spin_some.part.0+0x276>
 800be64:	e7e2      	b.n	800be2c <rclc_executor_spin_some.part.0+0x2b8>
 800be66:	270b      	movs	r7, #11
 800be68:	e783      	b.n	800bd72 <rclc_executor_spin_some.part.0+0x1fe>
 800be6a:	68aa      	ldr	r2, [r5, #8]
 800be6c:	e6e2      	b.n	800bc34 <rclc_executor_spin_some.part.0+0xc0>
 800be6e:	68aa      	ldr	r2, [r5, #8]
 800be70:	e7a1      	b.n	800bdb6 <rclc_executor_spin_some.part.0+0x242>
 800be72:	6842      	ldr	r2, [r0, #4]
 800be74:	6a11      	ldr	r1, [r2, #32]
 800be76:	2900      	cmp	r1, #0
 800be78:	f47f af22 	bne.w	800bcc0 <rclc_executor_spin_some.part.0+0x14c>
 800be7c:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800be80:	2a00      	cmp	r2, #0
 800be82:	f43f af0b 	beq.w	800bc9c <rclc_executor_spin_some.part.0+0x128>
 800be86:	e71b      	b.n	800bcc0 <rclc_executor_spin_some.part.0+0x14c>
 800be88:	6842      	ldr	r2, [r0, #4]
 800be8a:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800be8c:	f031 417f 	bics.w	r1, r1, #4278190080	; 0xff000000
 800be90:	f47f af16 	bne.w	800bcc0 <rclc_executor_spin_some.part.0+0x14c>
 800be94:	f892 1044 	ldrb.w	r1, [r2, #68]	; 0x44
 800be98:	2900      	cmp	r1, #0
 800be9a:	f47f af11 	bne.w	800bcc0 <rclc_executor_spin_some.part.0+0x14c>
 800be9e:	f892 2043 	ldrb.w	r2, [r2, #67]	; 0x43
 800bea2:	2a00      	cmp	r2, #0
 800bea4:	f43f aefa 	beq.w	800bc9c <rclc_executor_spin_some.part.0+0x128>
 800bea8:	e70a      	b.n	800bcc0 <rclc_executor_spin_some.part.0+0x14c>
 800beaa:	68aa      	ldr	r2, [r5, #8]
 800beac:	461c      	mov	r4, r3
 800beae:	e782      	b.n	800bdb6 <rclc_executor_spin_some.part.0+0x242>
 800beb0:	68aa      	ldr	r2, [r5, #8]
 800beb2:	461c      	mov	r4, r3
 800beb4:	e6be      	b.n	800bc34 <rclc_executor_spin_some.part.0+0xc0>
 800beb6:	bf00      	nop

0800beb8 <rclc_executor_spin>:
 800beb8:	b1d0      	cbz	r0, 800bef0 <rclc_executor_spin+0x38>
 800beba:	b510      	push	{r4, lr}
 800bebc:	4604      	mov	r4, r0
 800bebe:	b082      	sub	sp, #8
 800bec0:	e004      	b.n	800becc <rclc_executor_spin+0x14>
 800bec2:	f7ff fe57 	bl	800bb74 <rclc_executor_spin_some.part.0>
 800bec6:	f030 0302 	bics.w	r3, r0, #2
 800beca:	d10f      	bne.n	800beec <rclc_executor_spin+0x34>
 800becc:	6860      	ldr	r0, [r4, #4]
 800bece:	e9d4 231c 	ldrd	r2, r3, [r4, #112]	; 0x70
 800bed2:	e9cd 2300 	strd	r2, r3, [sp]
 800bed6:	f003 f8bb 	bl	800f050 <rcl_context_is_valid>
 800beda:	4601      	mov	r1, r0
 800bedc:	4620      	mov	r0, r4
 800bede:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bee2:	2900      	cmp	r1, #0
 800bee4:	d1ed      	bne.n	800bec2 <rclc_executor_spin+0xa>
 800bee6:	f000 f953 	bl	800c190 <rcutils_reset_error>
 800beea:	2001      	movs	r0, #1
 800beec:	b002      	add	sp, #8
 800beee:	bd10      	pop	{r4, pc}
 800bef0:	200b      	movs	r0, #11
 800bef2:	4770      	bx	lr

0800bef4 <rclc_executor_handle_counters_zero_init>:
 800bef4:	b130      	cbz	r0, 800bf04 <rclc_executor_handle_counters_zero_init+0x10>
 800bef6:	2220      	movs	r2, #32
 800bef8:	2100      	movs	r1, #0
 800befa:	b508      	push	{r3, lr}
 800befc:	f00d fb82 	bl	8019604 <memset>
 800bf00:	2000      	movs	r0, #0
 800bf02:	bd08      	pop	{r3, pc}
 800bf04:	200b      	movs	r0, #11
 800bf06:	4770      	bx	lr

0800bf08 <rclc_executor_handle_init>:
 800bf08:	4603      	mov	r3, r0
 800bf0a:	b178      	cbz	r0, 800bf2c <rclc_executor_handle_init+0x24>
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	f04f 0c0b 	mov.w	ip, #11
 800bf12:	6341      	str	r1, [r0, #52]	; 0x34
 800bf14:	4610      	mov	r0, r2
 800bf16:	f8a3 c000 	strh.w	ip, [r3]
 800bf1a:	631a      	str	r2, [r3, #48]	; 0x30
 800bf1c:	871a      	strh	r2, [r3, #56]	; 0x38
 800bf1e:	ed9f 7b04 	vldr	d7, [pc, #16]	; 800bf30 <rclc_executor_handle_init+0x28>
 800bf22:	e9c3 2201 	strd	r2, r2, [r3, #4]
 800bf26:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
 800bf2a:	4770      	bx	lr
 800bf2c:	200b      	movs	r0, #11
 800bf2e:	4770      	bx	lr
	...

0800bf38 <rclc_support_init>:
 800bf38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf3c:	b086      	sub	sp, #24
 800bf3e:	b3bb      	cbz	r3, 800bfb0 <rclc_support_init+0x78>
 800bf40:	4606      	mov	r6, r0
 800bf42:	b3a8      	cbz	r0, 800bfb0 <rclc_support_init+0x78>
 800bf44:	461c      	mov	r4, r3
 800bf46:	460f      	mov	r7, r1
 800bf48:	4690      	mov	r8, r2
 800bf4a:	f003 fa21 	bl	800f390 <rcl_get_zero_initialized_init_options>
 800bf4e:	f104 050c 	add.w	r5, r4, #12
 800bf52:	9005      	str	r0, [sp, #20]
 800bf54:	e895 0003 	ldmia.w	r5, {r0, r1}
 800bf58:	e88d 0003 	stmia.w	sp, {r0, r1}
 800bf5c:	a805      	add	r0, sp, #20
 800bf5e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800bf62:	f003 fa17 	bl	800f394 <rcl_init_options_init>
 800bf66:	4605      	mov	r5, r0
 800bf68:	b9e0      	cbnz	r0, 800bfa4 <rclc_support_init+0x6c>
 800bf6a:	ad02      	add	r5, sp, #8
 800bf6c:	4628      	mov	r0, r5
 800bf6e:	f003 f865 	bl	800f03c <rcl_get_zero_initialized_context>
 800bf72:	4633      	mov	r3, r6
 800bf74:	aa05      	add	r2, sp, #20
 800bf76:	e895 0003 	ldmia.w	r5, {r0, r1}
 800bf7a:	e886 0003 	stmia.w	r6, {r0, r1}
 800bf7e:	4641      	mov	r1, r8
 800bf80:	4638      	mov	r0, r7
 800bf82:	f003 f8cb 	bl	800f11c <rcl_init>
 800bf86:	4605      	mov	r5, r0
 800bf88:	b9b8      	cbnz	r0, 800bfba <rclc_support_init+0x82>
 800bf8a:	4622      	mov	r2, r4
 800bf8c:	f106 010c 	add.w	r1, r6, #12
 800bf90:	2003      	movs	r0, #3
 800bf92:	60b4      	str	r4, [r6, #8]
 800bf94:	f004 f90e 	bl	80101b4 <rcl_clock_init>
 800bf98:	4605      	mov	r5, r0
 800bf9a:	b970      	cbnz	r0, 800bfba <rclc_support_init+0x82>
 800bf9c:	a805      	add	r0, sp, #20
 800bf9e:	f003 fa55 	bl	800f44c <rcl_init_options_fini>
 800bfa2:	b108      	cbz	r0, 800bfa8 <rclc_support_init+0x70>
 800bfa4:	f000 f8f4 	bl	800c190 <rcutils_reset_error>
 800bfa8:	4628      	mov	r0, r5
 800bfaa:	b006      	add	sp, #24
 800bfac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfb0:	250b      	movs	r5, #11
 800bfb2:	4628      	mov	r0, r5
 800bfb4:	b006      	add	sp, #24
 800bfb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfba:	f000 f8e9 	bl	800c190 <rcutils_reset_error>
 800bfbe:	a805      	add	r0, sp, #20
 800bfc0:	f003 fa44 	bl	800f44c <rcl_init_options_fini>
 800bfc4:	2800      	cmp	r0, #0
 800bfc6:	d0ef      	beq.n	800bfa8 <rclc_support_init+0x70>
 800bfc8:	e7ec      	b.n	800bfa4 <rclc_support_init+0x6c>
 800bfca:	bf00      	nop

0800bfcc <rclc_node_init_default>:
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	bf18      	it	ne
 800bfd0:	2a00      	cmpne	r2, #0
 800bfd2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bfd6:	4616      	mov	r6, r2
 800bfd8:	bf0c      	ite	eq
 800bfda:	2201      	moveq	r2, #1
 800bfdc:	2200      	movne	r2, #0
 800bfde:	b0a3      	sub	sp, #140	; 0x8c
 800bfe0:	2900      	cmp	r1, #0
 800bfe2:	bf08      	it	eq
 800bfe4:	f042 0201 	orreq.w	r2, r2, #1
 800bfe8:	bb22      	cbnz	r2, 800c034 <rclc_node_init_default+0x68>
 800bfea:	4604      	mov	r4, r0
 800bfec:	b310      	cbz	r0, 800c034 <rclc_node_init_default+0x68>
 800bfee:	f10d 0810 	add.w	r8, sp, #16
 800bff2:	461f      	mov	r7, r3
 800bff4:	460d      	mov	r5, r1
 800bff6:	f10d 0918 	add.w	r9, sp, #24
 800bffa:	4640      	mov	r0, r8
 800bffc:	f003 fad2 	bl	800f5a4 <rcl_get_zero_initialized_node>
 800c000:	e898 0003 	ldmia.w	r8, {r0, r1}
 800c004:	e884 0003 	stmia.w	r4, {r0, r1}
 800c008:	4648      	mov	r0, r9
 800c00a:	f003 fc45 	bl	800f898 <rcl_node_get_default_options>
 800c00e:	4640      	mov	r0, r8
 800c010:	f003 fac8 	bl	800f5a4 <rcl_get_zero_initialized_node>
 800c014:	f8cd 9000 	str.w	r9, [sp]
 800c018:	463b      	mov	r3, r7
 800c01a:	4632      	mov	r2, r6
 800c01c:	e898 0003 	ldmia.w	r8, {r0, r1}
 800c020:	e884 0003 	stmia.w	r4, {r0, r1}
 800c024:	4629      	mov	r1, r5
 800c026:	4620      	mov	r0, r4
 800c028:	f003 fac6 	bl	800f5b8 <rcl_node_init>
 800c02c:	b930      	cbnz	r0, 800c03c <rclc_node_init_default+0x70>
 800c02e:	b023      	add	sp, #140	; 0x8c
 800c030:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c034:	200b      	movs	r0, #11
 800c036:	b023      	add	sp, #140	; 0x8c
 800c038:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c03c:	9003      	str	r0, [sp, #12]
 800c03e:	f000 f8a7 	bl	800c190 <rcutils_reset_error>
 800c042:	f000 f8a5 	bl	800c190 <rcutils_reset_error>
 800c046:	9803      	ldr	r0, [sp, #12]
 800c048:	b023      	add	sp, #140	; 0x8c
 800c04a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c04e:	bf00      	nop

0800c050 <rclc_service_init_default>:
 800c050:	2b00      	cmp	r3, #0
 800c052:	bf18      	it	ne
 800c054:	2a00      	cmpne	r2, #0
 800c056:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c05a:	4616      	mov	r6, r2
 800c05c:	bf0c      	ite	eq
 800c05e:	2201      	moveq	r2, #1
 800c060:	2200      	movne	r2, #0
 800c062:	b09e      	sub	sp, #120	; 0x78
 800c064:	2900      	cmp	r1, #0
 800c066:	bf08      	it	eq
 800c068:	f042 0201 	orreq.w	r2, r2, #1
 800c06c:	bb1a      	cbnz	r2, 800c0b6 <rclc_service_init_default+0x66>
 800c06e:	4604      	mov	r4, r0
 800c070:	b308      	cbz	r0, 800c0b6 <rclc_service_init_default+0x66>
 800c072:	f10d 0810 	add.w	r8, sp, #16
 800c076:	461f      	mov	r7, r3
 800c078:	460d      	mov	r5, r1
 800c07a:	f003 fe11 	bl	800fca0 <rcl_get_zero_initialized_service>
 800c07e:	6020      	str	r0, [r4, #0]
 800c080:	4640      	mov	r0, r8
 800c082:	f003 febb 	bl	800fdfc <rcl_service_get_default_options>
 800c086:	2250      	movs	r2, #80	; 0x50
 800c088:	490d      	ldr	r1, [pc, #52]	; (800c0c0 <rclc_service_init_default+0x70>)
 800c08a:	4640      	mov	r0, r8
 800c08c:	f00d fc2f 	bl	80198ee <memcpy>
 800c090:	463b      	mov	r3, r7
 800c092:	4632      	mov	r2, r6
 800c094:	4629      	mov	r1, r5
 800c096:	4620      	mov	r0, r4
 800c098:	f8cd 8000 	str.w	r8, [sp]
 800c09c:	f003 fe06 	bl	800fcac <rcl_service_init>
 800c0a0:	b910      	cbnz	r0, 800c0a8 <rclc_service_init_default+0x58>
 800c0a2:	b01e      	add	sp, #120	; 0x78
 800c0a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0a8:	9003      	str	r0, [sp, #12]
 800c0aa:	f000 f871 	bl	800c190 <rcutils_reset_error>
 800c0ae:	9803      	ldr	r0, [sp, #12]
 800c0b0:	b01e      	add	sp, #120	; 0x78
 800c0b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0b6:	200b      	movs	r0, #11
 800c0b8:	b01e      	add	sp, #120	; 0x78
 800c0ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0be:	bf00      	nop
 800c0c0:	0801b0b8 	.word	0x0801b0b8

0800c0c4 <__default_zero_allocate>:
 800c0c4:	f00c bec0 	b.w	8018e48 <calloc>

0800c0c8 <__default_reallocate>:
 800c0c8:	f00d b84c 	b.w	8019164 <realloc>

0800c0cc <__default_deallocate>:
 800c0cc:	f00c bf2a 	b.w	8018f24 <free>

0800c0d0 <__default_allocate>:
 800c0d0:	f00c bf20 	b.w	8018f14 <malloc>

0800c0d4 <rcutils_get_zero_initialized_allocator>:
 800c0d4:	b510      	push	{r4, lr}
 800c0d6:	4c05      	ldr	r4, [pc, #20]	; (800c0ec <rcutils_get_zero_initialized_allocator+0x18>)
 800c0d8:	4686      	mov	lr, r0
 800c0da:	4684      	mov	ip, r0
 800c0dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c0de:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c0e2:	6823      	ldr	r3, [r4, #0]
 800c0e4:	4670      	mov	r0, lr
 800c0e6:	f8cc 3000 	str.w	r3, [ip]
 800c0ea:	bd10      	pop	{r4, pc}
 800c0ec:	0801b108 	.word	0x0801b108

0800c0f0 <rcutils_set_default_allocator>:
 800c0f0:	b1a8      	cbz	r0, 800c11e <rcutils_set_default_allocator+0x2e>
 800c0f2:	6802      	ldr	r2, [r0, #0]
 800c0f4:	b1a2      	cbz	r2, 800c120 <rcutils_set_default_allocator+0x30>
 800c0f6:	6841      	ldr	r1, [r0, #4]
 800c0f8:	b1a1      	cbz	r1, 800c124 <rcutils_set_default_allocator+0x34>
 800c0fa:	b410      	push	{r4}
 800c0fc:	68c4      	ldr	r4, [r0, #12]
 800c0fe:	b164      	cbz	r4, 800c11a <rcutils_set_default_allocator+0x2a>
 800c100:	6880      	ldr	r0, [r0, #8]
 800c102:	b138      	cbz	r0, 800c114 <rcutils_set_default_allocator+0x24>
 800c104:	4b08      	ldr	r3, [pc, #32]	; (800c128 <rcutils_set_default_allocator+0x38>)
 800c106:	601a      	str	r2, [r3, #0]
 800c108:	2200      	movs	r2, #0
 800c10a:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800c10e:	2001      	movs	r0, #1
 800c110:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800c114:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c118:	4770      	bx	lr
 800c11a:	4620      	mov	r0, r4
 800c11c:	e7fa      	b.n	800c114 <rcutils_set_default_allocator+0x24>
 800c11e:	4770      	bx	lr
 800c120:	4610      	mov	r0, r2
 800c122:	4770      	bx	lr
 800c124:	4608      	mov	r0, r1
 800c126:	4770      	bx	lr
 800c128:	20000960 	.word	0x20000960

0800c12c <rcutils_get_default_allocator>:
 800c12c:	b510      	push	{r4, lr}
 800c12e:	4c05      	ldr	r4, [pc, #20]	; (800c144 <rcutils_get_default_allocator+0x18>)
 800c130:	4686      	mov	lr, r0
 800c132:	4684      	mov	ip, r0
 800c134:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c136:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c13a:	6823      	ldr	r3, [r4, #0]
 800c13c:	4670      	mov	r0, lr
 800c13e:	f8cc 3000 	str.w	r3, [ip]
 800c142:	bd10      	pop	{r4, pc}
 800c144:	20000960 	.word	0x20000960

0800c148 <rcutils_allocator_is_valid>:
 800c148:	b158      	cbz	r0, 800c162 <rcutils_allocator_is_valid+0x1a>
 800c14a:	6803      	ldr	r3, [r0, #0]
 800c14c:	b143      	cbz	r3, 800c160 <rcutils_allocator_is_valid+0x18>
 800c14e:	6843      	ldr	r3, [r0, #4]
 800c150:	b133      	cbz	r3, 800c160 <rcutils_allocator_is_valid+0x18>
 800c152:	68c3      	ldr	r3, [r0, #12]
 800c154:	b123      	cbz	r3, 800c160 <rcutils_allocator_is_valid+0x18>
 800c156:	6880      	ldr	r0, [r0, #8]
 800c158:	3800      	subs	r0, #0
 800c15a:	bf18      	it	ne
 800c15c:	2001      	movne	r0, #1
 800c15e:	4770      	bx	lr
 800c160:	4618      	mov	r0, r3
 800c162:	4770      	bx	lr

0800c164 <rcutils_get_error_string>:
 800c164:	4b06      	ldr	r3, [pc, #24]	; (800c180 <rcutils_get_error_string+0x1c>)
 800c166:	781b      	ldrb	r3, [r3, #0]
 800c168:	b13b      	cbz	r3, 800c17a <rcutils_get_error_string+0x16>
 800c16a:	4b06      	ldr	r3, [pc, #24]	; (800c184 <rcutils_get_error_string+0x20>)
 800c16c:	781a      	ldrb	r2, [r3, #0]
 800c16e:	b90a      	cbnz	r2, 800c174 <rcutils_get_error_string+0x10>
 800c170:	2201      	movs	r2, #1
 800c172:	701a      	strb	r2, [r3, #0]
 800c174:	4b04      	ldr	r3, [pc, #16]	; (800c188 <rcutils_get_error_string+0x24>)
 800c176:	7818      	ldrb	r0, [r3, #0]
 800c178:	4770      	bx	lr
 800c17a:	4b04      	ldr	r3, [pc, #16]	; (800c18c <rcutils_get_error_string+0x28>)
 800c17c:	7818      	ldrb	r0, [r3, #0]
 800c17e:	4770      	bx	lr
 800c180:	2000b934 	.word	0x2000b934
 800c184:	2000b949 	.word	0x2000b949
 800c188:	2000b948 	.word	0x2000b948
 800c18c:	0801a92c 	.word	0x0801a92c

0800c190 <rcutils_reset_error>:
 800c190:	ed9f 7b07 	vldr	d7, [pc, #28]	; 800c1b0 <rcutils_reset_error+0x20>
 800c194:	2300      	movs	r3, #0
 800c196:	4a08      	ldr	r2, [pc, #32]	; (800c1b8 <rcutils_reset_error+0x28>)
 800c198:	4808      	ldr	r0, [pc, #32]	; (800c1bc <rcutils_reset_error+0x2c>)
 800c19a:	8013      	strh	r3, [r2, #0]
 800c19c:	4908      	ldr	r1, [pc, #32]	; (800c1c0 <rcutils_reset_error+0x30>)
 800c19e:	7003      	strb	r3, [r0, #0]
 800c1a0:	700b      	strb	r3, [r1, #0]
 800c1a2:	ed82 7b02 	vstr	d7, [r2, #8]
 800c1a6:	4a07      	ldr	r2, [pc, #28]	; (800c1c4 <rcutils_reset_error+0x34>)
 800c1a8:	7013      	strb	r3, [r2, #0]
 800c1aa:	4770      	bx	lr
 800c1ac:	f3af 8000 	nop.w
	...
 800c1b8:	2000b938 	.word	0x2000b938
 800c1bc:	2000b949 	.word	0x2000b949
 800c1c0:	2000b948 	.word	0x2000b948
 800c1c4:	2000b934 	.word	0x2000b934

0800c1c8 <rcutils_system_time_now>:
 800c1c8:	b310      	cbz	r0, 800c210 <rcutils_system_time_now+0x48>
 800c1ca:	b570      	push	{r4, r5, r6, lr}
 800c1cc:	b084      	sub	sp, #16
 800c1ce:	4604      	mov	r4, r0
 800c1d0:	2001      	movs	r0, #1
 800c1d2:	4669      	mov	r1, sp
 800c1d4:	f7f5 fc78 	bl	8001ac8 <clock_gettime>
 800c1d8:	2800      	cmp	r0, #0
 800c1da:	db16      	blt.n	800c20a <rcutils_system_time_now+0x42>
 800c1dc:	e9dd 3100 	ldrd	r3, r1, [sp]
 800c1e0:	2900      	cmp	r1, #0
 800c1e2:	db12      	blt.n	800c20a <rcutils_system_time_now+0x42>
 800c1e4:	ea53 0201 	orrs.w	r2, r3, r1
 800c1e8:	9d02      	ldr	r5, [sp, #8]
 800c1ea:	d101      	bne.n	800c1f0 <rcutils_system_time_now+0x28>
 800c1ec:	2d00      	cmp	r5, #0
 800c1ee:	db0c      	blt.n	800c20a <rcutils_system_time_now+0x42>
 800c1f0:	4e08      	ldr	r6, [pc, #32]	; (800c214 <rcutils_system_time_now+0x4c>)
 800c1f2:	2000      	movs	r0, #0
 800c1f4:	fba3 3206 	umull	r3, r2, r3, r6
 800c1f8:	195b      	adds	r3, r3, r5
 800c1fa:	fb06 2201 	mla	r2, r6, r1, r2
 800c1fe:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 800c202:	e9c4 3200 	strd	r3, r2, [r4]
 800c206:	b004      	add	sp, #16
 800c208:	bd70      	pop	{r4, r5, r6, pc}
 800c20a:	2002      	movs	r0, #2
 800c20c:	b004      	add	sp, #16
 800c20e:	bd70      	pop	{r4, r5, r6, pc}
 800c210:	200b      	movs	r0, #11
 800c212:	4770      	bx	lr
 800c214:	3b9aca00 	.word	0x3b9aca00

0800c218 <rcutils_steady_time_now>:
 800c218:	b310      	cbz	r0, 800c260 <rcutils_steady_time_now+0x48>
 800c21a:	b570      	push	{r4, r5, r6, lr}
 800c21c:	b084      	sub	sp, #16
 800c21e:	4604      	mov	r4, r0
 800c220:	2000      	movs	r0, #0
 800c222:	4669      	mov	r1, sp
 800c224:	f7f5 fc50 	bl	8001ac8 <clock_gettime>
 800c228:	2800      	cmp	r0, #0
 800c22a:	db16      	blt.n	800c25a <rcutils_steady_time_now+0x42>
 800c22c:	e9dd 3100 	ldrd	r3, r1, [sp]
 800c230:	2900      	cmp	r1, #0
 800c232:	db12      	blt.n	800c25a <rcutils_steady_time_now+0x42>
 800c234:	ea53 0201 	orrs.w	r2, r3, r1
 800c238:	9d02      	ldr	r5, [sp, #8]
 800c23a:	d101      	bne.n	800c240 <rcutils_steady_time_now+0x28>
 800c23c:	2d00      	cmp	r5, #0
 800c23e:	db0c      	blt.n	800c25a <rcutils_steady_time_now+0x42>
 800c240:	4e08      	ldr	r6, [pc, #32]	; (800c264 <rcutils_steady_time_now+0x4c>)
 800c242:	2000      	movs	r0, #0
 800c244:	fba3 3206 	umull	r3, r2, r3, r6
 800c248:	195b      	adds	r3, r3, r5
 800c24a:	fb06 2201 	mla	r2, r6, r1, r2
 800c24e:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 800c252:	e9c4 3200 	strd	r3, r2, [r4]
 800c256:	b004      	add	sp, #16
 800c258:	bd70      	pop	{r4, r5, r6, pc}
 800c25a:	2002      	movs	r0, #2
 800c25c:	b004      	add	sp, #16
 800c25e:	bd70      	pop	{r4, r5, r6, pc}
 800c260:	200b      	movs	r0, #11
 800c262:	4770      	bx	lr
 800c264:	3b9aca00 	.word	0x3b9aca00

0800c268 <rmw_uros_set_custom_transport>:
 800c268:	b470      	push	{r4, r5, r6}
 800c26a:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800c26e:	b162      	cbz	r2, 800c28a <rmw_uros_set_custom_transport+0x22>
 800c270:	b15b      	cbz	r3, 800c28a <rmw_uros_set_custom_transport+0x22>
 800c272:	b155      	cbz	r5, 800c28a <rmw_uros_set_custom_transport+0x22>
 800c274:	b14e      	cbz	r6, 800c28a <rmw_uros_set_custom_transport+0x22>
 800c276:	4c06      	ldr	r4, [pc, #24]	; (800c290 <rmw_uros_set_custom_transport+0x28>)
 800c278:	7020      	strb	r0, [r4, #0]
 800c27a:	2000      	movs	r0, #0
 800c27c:	6166      	str	r6, [r4, #20]
 800c27e:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800c282:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800c286:	bc70      	pop	{r4, r5, r6}
 800c288:	4770      	bx	lr
 800c28a:	200b      	movs	r0, #11
 800c28c:	bc70      	pop	{r4, r5, r6}
 800c28e:	4770      	bx	lr
 800c290:	2000b94c 	.word	0x2000b94c

0800c294 <get_message_typesupport_handle_function>:
 800c294:	b510      	push	{r4, lr}
 800c296:	4604      	mov	r4, r0
 800c298:	6800      	ldr	r0, [r0, #0]
 800c29a:	f7f3 ffd1 	bl	8000240 <strcmp>
 800c29e:	2800      	cmp	r0, #0
 800c2a0:	bf0c      	ite	eq
 800c2a2:	4620      	moveq	r0, r4
 800c2a4:	2000      	movne	r0, #0
 800c2a6:	bd10      	pop	{r4, pc}

0800c2a8 <rosidl_runtime_c__uint8__Sequence__init>:
 800c2a8:	b530      	push	{r4, r5, lr}
 800c2aa:	4604      	mov	r4, r0
 800c2ac:	b087      	sub	sp, #28
 800c2ae:	b130      	cbz	r0, 800c2be <rosidl_runtime_c__uint8__Sequence__init+0x16>
 800c2b0:	460d      	mov	r5, r1
 800c2b2:	b931      	cbnz	r1, 800c2c2 <rosidl_runtime_c__uint8__Sequence__init+0x1a>
 800c2b4:	460b      	mov	r3, r1
 800c2b6:	2001      	movs	r0, #1
 800c2b8:	60a5      	str	r5, [r4, #8]
 800c2ba:	e9c4 3500 	strd	r3, r5, [r4]
 800c2be:	b007      	add	sp, #28
 800c2c0:	bd30      	pop	{r4, r5, pc}
 800c2c2:	a801      	add	r0, sp, #4
 800c2c4:	f7ff ff32 	bl	800c12c <rcutils_get_default_allocator>
 800c2c8:	9b01      	ldr	r3, [sp, #4]
 800c2ca:	9905      	ldr	r1, [sp, #20]
 800c2cc:	4628      	mov	r0, r5
 800c2ce:	4798      	blx	r3
 800c2d0:	4603      	mov	r3, r0
 800c2d2:	2800      	cmp	r0, #0
 800c2d4:	d1ef      	bne.n	800c2b6 <rosidl_runtime_c__uint8__Sequence__init+0xe>
 800c2d6:	e7f2      	b.n	800c2be <rosidl_runtime_c__uint8__Sequence__init+0x16>

0800c2d8 <rosidl_runtime_c__uint8__Sequence__fini>:
 800c2d8:	b188      	cbz	r0, 800c2fe <rosidl_runtime_c__uint8__Sequence__fini+0x26>
 800c2da:	6803      	ldr	r3, [r0, #0]
 800c2dc:	b510      	push	{r4, lr}
 800c2de:	4604      	mov	r4, r0
 800c2e0:	b086      	sub	sp, #24
 800c2e2:	b153      	cbz	r3, 800c2fa <rosidl_runtime_c__uint8__Sequence__fini+0x22>
 800c2e4:	a801      	add	r0, sp, #4
 800c2e6:	f7ff ff21 	bl	800c12c <rcutils_get_default_allocator>
 800c2ea:	9b02      	ldr	r3, [sp, #8]
 800c2ec:	9905      	ldr	r1, [sp, #20]
 800c2ee:	6820      	ldr	r0, [r4, #0]
 800c2f0:	4798      	blx	r3
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	e9c4 3300 	strd	r3, r3, [r4]
 800c2f8:	60a3      	str	r3, [r4, #8]
 800c2fa:	b006      	add	sp, #24
 800c2fc:	bd10      	pop	{r4, pc}
 800c2fe:	4770      	bx	lr

0800c300 <rosidl_runtime_c__uint8__Sequence__copy>:
 800c300:	2900      	cmp	r1, #0
 800c302:	bf18      	it	ne
 800c304:	2800      	cmpne	r0, #0
 800c306:	b570      	push	{r4, r5, r6, lr}
 800c308:	bf08      	it	eq
 800c30a:	2601      	moveq	r6, #1
 800c30c:	b086      	sub	sp, #24
 800c30e:	bf18      	it	ne
 800c310:	2600      	movne	r6, #0
 800c312:	d01d      	beq.n	800c350 <rosidl_runtime_c__uint8__Sequence__copy+0x50>
 800c314:	6842      	ldr	r2, [r0, #4]
 800c316:	4605      	mov	r5, r0
 800c318:	688b      	ldr	r3, [r1, #8]
 800c31a:	460c      	mov	r4, r1
 800c31c:	4293      	cmp	r3, r2
 800c31e:	d309      	bcc.n	800c334 <rosidl_runtime_c__uint8__Sequence__copy+0x34>
 800c320:	6808      	ldr	r0, [r1, #0]
 800c322:	6829      	ldr	r1, [r5, #0]
 800c324:	2601      	movs	r6, #1
 800c326:	f00d fae2 	bl	80198ee <memcpy>
 800c32a:	686b      	ldr	r3, [r5, #4]
 800c32c:	6063      	str	r3, [r4, #4]
 800c32e:	4630      	mov	r0, r6
 800c330:	b006      	add	sp, #24
 800c332:	bd70      	pop	{r4, r5, r6, pc}
 800c334:	a801      	add	r0, sp, #4
 800c336:	f7ff fef9 	bl	800c12c <rcutils_get_default_allocator>
 800c33a:	9b03      	ldr	r3, [sp, #12]
 800c33c:	9a05      	ldr	r2, [sp, #20]
 800c33e:	6869      	ldr	r1, [r5, #4]
 800c340:	6820      	ldr	r0, [r4, #0]
 800c342:	4798      	blx	r3
 800c344:	2800      	cmp	r0, #0
 800c346:	d0f2      	beq.n	800c32e <rosidl_runtime_c__uint8__Sequence__copy+0x2e>
 800c348:	686a      	ldr	r2, [r5, #4]
 800c34a:	6020      	str	r0, [r4, #0]
 800c34c:	60a2      	str	r2, [r4, #8]
 800c34e:	e7e8      	b.n	800c322 <rosidl_runtime_c__uint8__Sequence__copy+0x22>
 800c350:	2600      	movs	r6, #0
 800c352:	4630      	mov	r0, r6
 800c354:	b006      	add	sp, #24
 800c356:	bd70      	pop	{r4, r5, r6, pc}

0800c358 <get_service_typesupport_handle>:
 800c358:	6883      	ldr	r3, [r0, #8]
 800c35a:	4718      	bx	r3

0800c35c <get_service_typesupport_handle_function>:
 800c35c:	b510      	push	{r4, lr}
 800c35e:	4604      	mov	r4, r0
 800c360:	6800      	ldr	r0, [r0, #0]
 800c362:	f7f3 ff6d 	bl	8000240 <strcmp>
 800c366:	2800      	cmp	r0, #0
 800c368:	bf0c      	ite	eq
 800c36a:	4620      	moveq	r0, r4
 800c36c:	2000      	movne	r0, #0
 800c36e:	bd10      	pop	{r4, pc}

0800c370 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 800c370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c374:	6805      	ldr	r5, [r0, #0]
 800c376:	4604      	mov	r4, r0
 800c378:	460e      	mov	r6, r1
 800c37a:	4628      	mov	r0, r5
 800c37c:	f7f3 ff60 	bl	8000240 <strcmp>
 800c380:	b1c8      	cbz	r0, 800c3b6 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 800c382:	4b11      	ldr	r3, [pc, #68]	; (800c3c8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	429d      	cmp	r5, r3
 800c388:	d112      	bne.n	800c3b0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800c38a:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800c38e:	f8d8 4000 	ldr.w	r4, [r8]
 800c392:	b16c      	cbz	r4, 800c3b0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800c394:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800c398:	2700      	movs	r7, #0
 800c39a:	3d04      	subs	r5, #4
 800c39c:	4631      	mov	r1, r6
 800c39e:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800c3a2:	f7f3 ff4d 	bl	8000240 <strcmp>
 800c3a6:	00bb      	lsls	r3, r7, #2
 800c3a8:	b140      	cbz	r0, 800c3bc <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 800c3aa:	3701      	adds	r7, #1
 800c3ac:	42bc      	cmp	r4, r7
 800c3ae:	d1f5      	bne.n	800c39c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 800c3b0:	2000      	movs	r0, #0
 800c3b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3b6:	4620      	mov	r0, r4
 800c3b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3bc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c3c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c3c4:	58d3      	ldr	r3, [r2, r3]
 800c3c6:	4718      	bx	r3
 800c3c8:	20000974 	.word	0x20000974

0800c3cc <rosidl_typesupport_c__get_service_typesupport_handle_function>:
 800c3cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3d0:	6805      	ldr	r5, [r0, #0]
 800c3d2:	4604      	mov	r4, r0
 800c3d4:	460e      	mov	r6, r1
 800c3d6:	4628      	mov	r0, r5
 800c3d8:	f7f3 ff32 	bl	8000240 <strcmp>
 800c3dc:	b1c8      	cbz	r0, 800c412 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x46>
 800c3de:	4b11      	ldr	r3, [pc, #68]	; (800c424 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x58>)
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	429d      	cmp	r5, r3
 800c3e4:	d112      	bne.n	800c40c <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 800c3e6:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800c3ea:	f8d8 4000 	ldr.w	r4, [r8]
 800c3ee:	b16c      	cbz	r4, 800c40c <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 800c3f0:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800c3f4:	2700      	movs	r7, #0
 800c3f6:	3d04      	subs	r5, #4
 800c3f8:	4631      	mov	r1, r6
 800c3fa:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800c3fe:	f7f3 ff1f 	bl	8000240 <strcmp>
 800c402:	00bb      	lsls	r3, r7, #2
 800c404:	b140      	cbz	r0, 800c418 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x4c>
 800c406:	3701      	adds	r7, #1
 800c408:	42bc      	cmp	r4, r7
 800c40a:	d1f5      	bne.n	800c3f8 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x2c>
 800c40c:	2000      	movs	r0, #0
 800c40e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c412:	4620      	mov	r0, r4
 800c414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c418:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c41c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c420:	58d3      	ldr	r3, [r2, r3]
 800c422:	4718      	bx	r3
 800c424:	20000974 	.word	0x20000974

0800c428 <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__size_function__ServiceEventInfo__client_gid>:
 800c428:	2010      	movs	r0, #16
 800c42a:	4770      	bx	lr

0800c42c <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__get_const_function__ServiceEventInfo__client_gid>:
 800c42c:	4408      	add	r0, r1
 800c42e:	4770      	bx	lr

0800c430 <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__fetch_function__ServiceEventInfo__client_gid>:
 800c430:	5c43      	ldrb	r3, [r0, r1]
 800c432:	7013      	strb	r3, [r2, #0]
 800c434:	4770      	bx	lr
 800c436:	bf00      	nop

0800c438 <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__assign_function__ServiceEventInfo__client_gid>:
 800c438:	7813      	ldrb	r3, [r2, #0]
 800c43a:	5443      	strb	r3, [r0, r1]
 800c43c:	4770      	bx	lr
 800c43e:	bf00      	nop

0800c440 <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__ServiceEventInfo_init_function>:
 800c440:	f007 bdf2 	b.w	8014028 <service_msgs__msg__ServiceEventInfo__init>

0800c444 <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__ServiceEventInfo_fini_function>:
 800c444:	f007 be02 	b.w	801404c <service_msgs__msg__ServiceEventInfo__fini>

0800c448 <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__get_function__ServiceEventInfo__client_gid>:
 800c448:	4408      	add	r0, r1
 800c44a:	4770      	bx	lr

0800c44c <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>:
 800c44c:	b508      	push	{r3, lr}
 800c44e:	f000 f8db 	bl	800c608 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800c452:	4b06      	ldr	r3, [pc, #24]	; (800c46c <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x20>)
 800c454:	4906      	ldr	r1, [pc, #24]	; (800c470 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x24>)
 800c456:	681a      	ldr	r2, [r3, #0]
 800c458:	6488      	str	r0, [r1, #72]	; 0x48
 800c45a:	b10a      	cbz	r2, 800c460 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x14>
 800c45c:	4803      	ldr	r0, [pc, #12]	; (800c46c <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x20>)
 800c45e:	bd08      	pop	{r3, pc}
 800c460:	4a04      	ldr	r2, [pc, #16]	; (800c474 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x28>)
 800c462:	4802      	ldr	r0, [pc, #8]	; (800c46c <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x20>)
 800c464:	6812      	ldr	r2, [r2, #0]
 800c466:	601a      	str	r2, [r3, #0]
 800c468:	bd08      	pop	{r3, pc}
 800c46a:	bf00      	nop
 800c46c:	20000a6c 	.word	0x20000a6c
 800c470:	2000097c 	.word	0x2000097c
 800c474:	20000978 	.word	0x20000978

0800c478 <get_serialized_size_service_msgs__msg__ServiceEventInfo>:
 800c478:	b5b0      	push	{r4, r5, r7, lr}
 800c47a:	4604      	mov	r4, r0
 800c47c:	b1d8      	cbz	r0, 800c4b6 <get_serialized_size_service_msgs__msg__ServiceEventInfo+0x3e>
 800c47e:	460d      	mov	r5, r1
 800c480:	2101      	movs	r1, #1
 800c482:	4628      	mov	r0, r5
 800c484:	f001 fd04 	bl	800de90 <ucdr_alignment>
 800c488:	1c6b      	adds	r3, r5, #1
 800c48a:	4607      	mov	r7, r0
 800c48c:	1d20      	adds	r0, r4, #4
 800c48e:	f1c5 0508 	rsb	r5, r5, #8
 800c492:	441f      	add	r7, r3
 800c494:	4639      	mov	r1, r7
 800c496:	f000 f8c5 	bl	800c624 <get_serialized_size_builtin_interfaces__msg__Time>
 800c49a:	4407      	add	r7, r0
 800c49c:	2101      	movs	r1, #1
 800c49e:	4638      	mov	r0, r7
 800c4a0:	f001 fcf6 	bl	800de90 <ucdr_alignment>
 800c4a4:	f100 0410 	add.w	r4, r0, #16
 800c4a8:	2108      	movs	r1, #8
 800c4aa:	443c      	add	r4, r7
 800c4ac:	4620      	mov	r0, r4
 800c4ae:	f001 fcef 	bl	800de90 <ucdr_alignment>
 800c4b2:	4428      	add	r0, r5
 800c4b4:	4420      	add	r0, r4
 800c4b6:	bdb0      	pop	{r4, r5, r7, pc}

0800c4b8 <_ServiceEventInfo__cdr_deserialize>:
 800c4b8:	b538      	push	{r3, r4, r5, lr}
 800c4ba:	460c      	mov	r4, r1
 800c4bc:	b1b9      	cbz	r1, 800c4ee <_ServiceEventInfo__cdr_deserialize+0x36>
 800c4be:	4605      	mov	r5, r0
 800c4c0:	f000 fa8e 	bl	800c9e0 <ucdr_deserialize_uint8_t>
 800c4c4:	f000 f912 	bl	800c6ec <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800c4c8:	4603      	mov	r3, r0
 800c4ca:	1d21      	adds	r1, r4, #4
 800c4cc:	4628      	mov	r0, r5
 800c4ce:	685b      	ldr	r3, [r3, #4]
 800c4d0:	68db      	ldr	r3, [r3, #12]
 800c4d2:	4798      	blx	r3
 800c4d4:	f104 010c 	add.w	r1, r4, #12
 800c4d8:	4628      	mov	r0, r5
 800c4da:	2210      	movs	r2, #16
 800c4dc:	f000 f9d4 	bl	800c888 <ucdr_deserialize_array_uint8_t>
 800c4e0:	f104 0120 	add.w	r1, r4, #32
 800c4e4:	4628      	mov	r0, r5
 800c4e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c4ea:	f001 ba8b 	b.w	800da04 <ucdr_deserialize_int64_t>
 800c4ee:	4608      	mov	r0, r1
 800c4f0:	bd38      	pop	{r3, r4, r5, pc}
 800c4f2:	bf00      	nop

0800c4f4 <_ServiceEventInfo__cdr_serialize>:
 800c4f4:	b1e8      	cbz	r0, 800c532 <_ServiceEventInfo__cdr_serialize+0x3e>
 800c4f6:	b570      	push	{r4, r5, r6, lr}
 800c4f8:	4606      	mov	r6, r0
 800c4fa:	460d      	mov	r5, r1
 800c4fc:	4604      	mov	r4, r0
 800c4fe:	4608      	mov	r0, r1
 800c500:	f816 1b04 	ldrb.w	r1, [r6], #4
 800c504:	f000 fa56 	bl	800c9b4 <ucdr_serialize_uint8_t>
 800c508:	f000 f8f0 	bl	800c6ec <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800c50c:	4603      	mov	r3, r0
 800c50e:	4629      	mov	r1, r5
 800c510:	4630      	mov	r0, r6
 800c512:	685b      	ldr	r3, [r3, #4]
 800c514:	689b      	ldr	r3, [r3, #8]
 800c516:	4798      	blx	r3
 800c518:	2210      	movs	r2, #16
 800c51a:	f104 010c 	add.w	r1, r4, #12
 800c51e:	4628      	mov	r0, r5
 800c520:	f000 f94e 	bl	800c7c0 <ucdr_serialize_array_uint8_t>
 800c524:	4628      	mov	r0, r5
 800c526:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 800c52a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c52e:	f001 b999 	b.w	800d864 <ucdr_serialize_int64_t>
 800c532:	4770      	bx	lr

0800c534 <_ServiceEventInfo__get_serialized_size>:
 800c534:	b538      	push	{r3, r4, r5, lr}
 800c536:	4604      	mov	r4, r0
 800c538:	b1b0      	cbz	r0, 800c568 <_ServiceEventInfo__get_serialized_size+0x34>
 800c53a:	2101      	movs	r1, #1
 800c53c:	2000      	movs	r0, #0
 800c53e:	f001 fca7 	bl	800de90 <ucdr_alignment>
 800c542:	4605      	mov	r5, r0
 800c544:	1d20      	adds	r0, r4, #4
 800c546:	3501      	adds	r5, #1
 800c548:	4629      	mov	r1, r5
 800c54a:	f000 f86b 	bl	800c624 <get_serialized_size_builtin_interfaces__msg__Time>
 800c54e:	4405      	add	r5, r0
 800c550:	2101      	movs	r1, #1
 800c552:	4628      	mov	r0, r5
 800c554:	f001 fc9c 	bl	800de90 <ucdr_alignment>
 800c558:	3010      	adds	r0, #16
 800c55a:	2108      	movs	r1, #8
 800c55c:	4405      	add	r5, r0
 800c55e:	4628      	mov	r0, r5
 800c560:	f001 fc96 	bl	800de90 <ucdr_alignment>
 800c564:	3008      	adds	r0, #8
 800c566:	4428      	add	r0, r5
 800c568:	bd38      	pop	{r3, r4, r5, pc}
 800c56a:	bf00      	nop

0800c56c <_ServiceEventInfo__max_serialized_size>:
 800c56c:	b550      	push	{r4, r6, lr}
 800c56e:	2601      	movs	r6, #1
 800c570:	b083      	sub	sp, #12
 800c572:	2000      	movs	r0, #0
 800c574:	4631      	mov	r1, r6
 800c576:	f88d 6007 	strb.w	r6, [sp, #7]
 800c57a:	f001 fc89 	bl	800de90 <ucdr_alignment>
 800c57e:	4604      	mov	r4, r0
 800c580:	f10d 0007 	add.w	r0, sp, #7
 800c584:	4434      	add	r4, r6
 800c586:	4621      	mov	r1, r4
 800c588:	f000 f89c 	bl	800c6c4 <max_serialized_size_builtin_interfaces__msg__Time>
 800c58c:	4404      	add	r4, r0
 800c58e:	4631      	mov	r1, r6
 800c590:	4620      	mov	r0, r4
 800c592:	f001 fc7d 	bl	800de90 <ucdr_alignment>
 800c596:	3010      	adds	r0, #16
 800c598:	2108      	movs	r1, #8
 800c59a:	4404      	add	r4, r0
 800c59c:	4620      	mov	r0, r4
 800c59e:	f001 fc77 	bl	800de90 <ucdr_alignment>
 800c5a2:	3008      	adds	r0, #8
 800c5a4:	4420      	add	r0, r4
 800c5a6:	b003      	add	sp, #12
 800c5a8:	bd50      	pop	{r4, r6, pc}
 800c5aa:	bf00      	nop

0800c5ac <max_serialized_size_service_msgs__msg__ServiceEventInfo>:
 800c5ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5b0:	f04f 0801 	mov.w	r8, #1
 800c5b4:	460c      	mov	r4, r1
 800c5b6:	4607      	mov	r7, r0
 800c5b8:	4641      	mov	r1, r8
 800c5ba:	4620      	mov	r0, r4
 800c5bc:	f887 8000 	strb.w	r8, [r7]
 800c5c0:	eb04 0608 	add.w	r6, r4, r8
 800c5c4:	f001 fc64 	bl	800de90 <ucdr_alignment>
 800c5c8:	4605      	mov	r5, r0
 800c5ca:	4638      	mov	r0, r7
 800c5cc:	f1c4 0408 	rsb	r4, r4, #8
 800c5d0:	4435      	add	r5, r6
 800c5d2:	4629      	mov	r1, r5
 800c5d4:	f000 f876 	bl	800c6c4 <max_serialized_size_builtin_interfaces__msg__Time>
 800c5d8:	4405      	add	r5, r0
 800c5da:	4641      	mov	r1, r8
 800c5dc:	4628      	mov	r0, r5
 800c5de:	f001 fc57 	bl	800de90 <ucdr_alignment>
 800c5e2:	3010      	adds	r0, #16
 800c5e4:	2108      	movs	r1, #8
 800c5e6:	4405      	add	r5, r0
 800c5e8:	4628      	mov	r0, r5
 800c5ea:	f001 fc51 	bl	800de90 <ucdr_alignment>
 800c5ee:	4420      	add	r0, r4
 800c5f0:	4428      	add	r0, r5
 800c5f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5f6:	bf00      	nop

0800c5f8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>:
 800c5f8:	4800      	ldr	r0, [pc, #0]	; (800c5fc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x4>)
 800c5fa:	4770      	bx	lr
 800c5fc:	20000a84 	.word	0x20000a84

0800c600 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function>:
 800c600:	f007 bd5a 	b.w	80140b8 <builtin_interfaces__msg__Time__init>

0800c604 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function>:
 800c604:	f007 bd5c 	b.w	80140c0 <builtin_interfaces__msg__Time__fini>

0800c608 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800c608:	4b04      	ldr	r3, [pc, #16]	; (800c61c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800c60a:	681a      	ldr	r2, [r3, #0]
 800c60c:	b10a      	cbz	r2, 800c612 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0xa>
 800c60e:	4803      	ldr	r0, [pc, #12]	; (800c61c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800c610:	4770      	bx	lr
 800c612:	4a03      	ldr	r2, [pc, #12]	; (800c620 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x18>)
 800c614:	4801      	ldr	r0, [pc, #4]	; (800c61c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800c616:	6812      	ldr	r2, [r2, #0]
 800c618:	601a      	str	r2, [r3, #0]
 800c61a:	4770      	bx	lr
 800c61c:	20000b30 	.word	0x20000b30
 800c620:	20000978 	.word	0x20000978

0800c624 <get_serialized_size_builtin_interfaces__msg__Time>:
 800c624:	b180      	cbz	r0, 800c648 <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 800c626:	b538      	push	{r3, r4, r5, lr}
 800c628:	460d      	mov	r5, r1
 800c62a:	2104      	movs	r1, #4
 800c62c:	4628      	mov	r0, r5
 800c62e:	f001 fc2f 	bl	800de90 <ucdr_alignment>
 800c632:	1d2b      	adds	r3, r5, #4
 800c634:	f1c5 0504 	rsb	r5, r5, #4
 800c638:	2104      	movs	r1, #4
 800c63a:	181c      	adds	r4, r3, r0
 800c63c:	4620      	mov	r0, r4
 800c63e:	f001 fc27 	bl	800de90 <ucdr_alignment>
 800c642:	4428      	add	r0, r5
 800c644:	4420      	add	r0, r4
 800c646:	bd38      	pop	{r3, r4, r5, pc}
 800c648:	4770      	bx	lr
 800c64a:	bf00      	nop

0800c64c <_Time__cdr_deserialize>:
 800c64c:	b538      	push	{r3, r4, r5, lr}
 800c64e:	460c      	mov	r4, r1
 800c650:	b141      	cbz	r1, 800c664 <_Time__cdr_deserialize+0x18>
 800c652:	4605      	mov	r5, r0
 800c654:	f001 f876 	bl	800d744 <ucdr_deserialize_int32_t>
 800c658:	1d21      	adds	r1, r4, #4
 800c65a:	4628      	mov	r0, r5
 800c65c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c660:	f000 bcee 	b.w	800d040 <ucdr_deserialize_uint32_t>
 800c664:	4608      	mov	r0, r1
 800c666:	bd38      	pop	{r3, r4, r5, pc}

0800c668 <_Time__cdr_serialize>:
 800c668:	b160      	cbz	r0, 800c684 <_Time__cdr_serialize+0x1c>
 800c66a:	b538      	push	{r3, r4, r5, lr}
 800c66c:	460d      	mov	r5, r1
 800c66e:	4604      	mov	r4, r0
 800c670:	6801      	ldr	r1, [r0, #0]
 800c672:	4628      	mov	r0, r5
 800c674:	f000 ffce 	bl	800d614 <ucdr_serialize_int32_t>
 800c678:	6861      	ldr	r1, [r4, #4]
 800c67a:	4628      	mov	r0, r5
 800c67c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c680:	f000 bbae 	b.w	800cde0 <ucdr_serialize_uint32_t>
 800c684:	4770      	bx	lr
 800c686:	bf00      	nop

0800c688 <_Time__get_serialized_size>:
 800c688:	b160      	cbz	r0, 800c6a4 <_Time__get_serialized_size+0x1c>
 800c68a:	2104      	movs	r1, #4
 800c68c:	2000      	movs	r0, #0
 800c68e:	b510      	push	{r4, lr}
 800c690:	f001 fbfe 	bl	800de90 <ucdr_alignment>
 800c694:	2104      	movs	r1, #4
 800c696:	1844      	adds	r4, r0, r1
 800c698:	4620      	mov	r0, r4
 800c69a:	f001 fbf9 	bl	800de90 <ucdr_alignment>
 800c69e:	3004      	adds	r0, #4
 800c6a0:	4420      	add	r0, r4
 800c6a2:	bd10      	pop	{r4, pc}
 800c6a4:	4770      	bx	lr
 800c6a6:	bf00      	nop

0800c6a8 <_Time__max_serialized_size>:
 800c6a8:	b510      	push	{r4, lr}
 800c6aa:	2104      	movs	r1, #4
 800c6ac:	2000      	movs	r0, #0
 800c6ae:	f001 fbef 	bl	800de90 <ucdr_alignment>
 800c6b2:	2104      	movs	r1, #4
 800c6b4:	1844      	adds	r4, r0, r1
 800c6b6:	4620      	mov	r0, r4
 800c6b8:	f001 fbea 	bl	800de90 <ucdr_alignment>
 800c6bc:	3004      	adds	r0, #4
 800c6be:	4420      	add	r0, r4
 800c6c0:	bd10      	pop	{r4, pc}
 800c6c2:	bf00      	nop

0800c6c4 <max_serialized_size_builtin_interfaces__msg__Time>:
 800c6c4:	b538      	push	{r3, r4, r5, lr}
 800c6c6:	460c      	mov	r4, r1
 800c6c8:	2301      	movs	r3, #1
 800c6ca:	2104      	movs	r1, #4
 800c6cc:	1d25      	adds	r5, r4, #4
 800c6ce:	7003      	strb	r3, [r0, #0]
 800c6d0:	4620      	mov	r0, r4
 800c6d2:	f1c4 0404 	rsb	r4, r4, #4
 800c6d6:	f001 fbdb 	bl	800de90 <ucdr_alignment>
 800c6da:	4405      	add	r5, r0
 800c6dc:	2104      	movs	r1, #4
 800c6de:	4628      	mov	r0, r5
 800c6e0:	f001 fbd6 	bl	800de90 <ucdr_alignment>
 800c6e4:	4420      	add	r0, r4
 800c6e6:	4428      	add	r0, r5
 800c6e8:	bd38      	pop	{r3, r4, r5, pc}
 800c6ea:	bf00      	nop

0800c6ec <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800c6ec:	4800      	ldr	r0, [pc, #0]	; (800c6f0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 800c6ee:	4770      	bx	lr
 800c6f0:	20000b48 	.word	0x20000b48

0800c6f4 <ucdr_serialize_endian_array_char>:
 800c6f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6f8:	4619      	mov	r1, r3
 800c6fa:	461f      	mov	r7, r3
 800c6fc:	4605      	mov	r5, r0
 800c6fe:	4690      	mov	r8, r2
 800c700:	f001 fb6e 	bl	800dde0 <ucdr_check_buffer_available_for>
 800c704:	b9e0      	cbnz	r0, 800c740 <ucdr_serialize_endian_array_char+0x4c>
 800c706:	463e      	mov	r6, r7
 800c708:	e00b      	b.n	800c722 <ucdr_serialize_endian_array_char+0x2e>
 800c70a:	4441      	add	r1, r8
 800c70c:	68a8      	ldr	r0, [r5, #8]
 800c70e:	4622      	mov	r2, r4
 800c710:	1b36      	subs	r6, r6, r4
 800c712:	f00d f8ec 	bl	80198ee <memcpy>
 800c716:	68ab      	ldr	r3, [r5, #8]
 800c718:	6928      	ldr	r0, [r5, #16]
 800c71a:	4423      	add	r3, r4
 800c71c:	4420      	add	r0, r4
 800c71e:	60ab      	str	r3, [r5, #8]
 800c720:	6128      	str	r0, [r5, #16]
 800c722:	4631      	mov	r1, r6
 800c724:	2201      	movs	r2, #1
 800c726:	4628      	mov	r0, r5
 800c728:	f001 fbe4 	bl	800def4 <ucdr_check_final_buffer_behavior_array>
 800c72c:	1bb9      	subs	r1, r7, r6
 800c72e:	4604      	mov	r4, r0
 800c730:	2800      	cmp	r0, #0
 800c732:	d1ea      	bne.n	800c70a <ucdr_serialize_endian_array_char+0x16>
 800c734:	2301      	movs	r3, #1
 800c736:	7da8      	ldrb	r0, [r5, #22]
 800c738:	756b      	strb	r3, [r5, #21]
 800c73a:	4058      	eors	r0, r3
 800c73c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c740:	463a      	mov	r2, r7
 800c742:	4641      	mov	r1, r8
 800c744:	68a8      	ldr	r0, [r5, #8]
 800c746:	f00d f8d2 	bl	80198ee <memcpy>
 800c74a:	68aa      	ldr	r2, [r5, #8]
 800c74c:	692b      	ldr	r3, [r5, #16]
 800c74e:	443a      	add	r2, r7
 800c750:	443b      	add	r3, r7
 800c752:	60aa      	str	r2, [r5, #8]
 800c754:	612b      	str	r3, [r5, #16]
 800c756:	e7ed      	b.n	800c734 <ucdr_serialize_endian_array_char+0x40>

0800c758 <ucdr_deserialize_endian_array_char>:
 800c758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c75c:	4619      	mov	r1, r3
 800c75e:	461f      	mov	r7, r3
 800c760:	4605      	mov	r5, r0
 800c762:	4690      	mov	r8, r2
 800c764:	f001 fb3c 	bl	800dde0 <ucdr_check_buffer_available_for>
 800c768:	b9e8      	cbnz	r0, 800c7a6 <ucdr_deserialize_endian_array_char+0x4e>
 800c76a:	463e      	mov	r6, r7
 800c76c:	e00c      	b.n	800c788 <ucdr_deserialize_endian_array_char+0x30>
 800c76e:	eb08 0003 	add.w	r0, r8, r3
 800c772:	68a9      	ldr	r1, [r5, #8]
 800c774:	4622      	mov	r2, r4
 800c776:	1b36      	subs	r6, r6, r4
 800c778:	f00d f8b9 	bl	80198ee <memcpy>
 800c77c:	68ab      	ldr	r3, [r5, #8]
 800c77e:	6928      	ldr	r0, [r5, #16]
 800c780:	4423      	add	r3, r4
 800c782:	4420      	add	r0, r4
 800c784:	60ab      	str	r3, [r5, #8]
 800c786:	6128      	str	r0, [r5, #16]
 800c788:	4631      	mov	r1, r6
 800c78a:	2201      	movs	r2, #1
 800c78c:	4628      	mov	r0, r5
 800c78e:	f001 fbb1 	bl	800def4 <ucdr_check_final_buffer_behavior_array>
 800c792:	1bbb      	subs	r3, r7, r6
 800c794:	4604      	mov	r4, r0
 800c796:	2800      	cmp	r0, #0
 800c798:	d1e9      	bne.n	800c76e <ucdr_deserialize_endian_array_char+0x16>
 800c79a:	2301      	movs	r3, #1
 800c79c:	7da8      	ldrb	r0, [r5, #22]
 800c79e:	756b      	strb	r3, [r5, #21]
 800c7a0:	4058      	eors	r0, r3
 800c7a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7a6:	463a      	mov	r2, r7
 800c7a8:	68a9      	ldr	r1, [r5, #8]
 800c7aa:	4640      	mov	r0, r8
 800c7ac:	f00d f89f 	bl	80198ee <memcpy>
 800c7b0:	68aa      	ldr	r2, [r5, #8]
 800c7b2:	692b      	ldr	r3, [r5, #16]
 800c7b4:	443a      	add	r2, r7
 800c7b6:	443b      	add	r3, r7
 800c7b8:	60aa      	str	r2, [r5, #8]
 800c7ba:	612b      	str	r3, [r5, #16]
 800c7bc:	e7ed      	b.n	800c79a <ucdr_deserialize_endian_array_char+0x42>
 800c7be:	bf00      	nop

0800c7c0 <ucdr_serialize_array_uint8_t>:
 800c7c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7c4:	4688      	mov	r8, r1
 800c7c6:	4611      	mov	r1, r2
 800c7c8:	4617      	mov	r7, r2
 800c7ca:	4605      	mov	r5, r0
 800c7cc:	f001 fb08 	bl	800dde0 <ucdr_check_buffer_available_for>
 800c7d0:	b9e0      	cbnz	r0, 800c80c <ucdr_serialize_array_uint8_t+0x4c>
 800c7d2:	463e      	mov	r6, r7
 800c7d4:	e00b      	b.n	800c7ee <ucdr_serialize_array_uint8_t+0x2e>
 800c7d6:	4441      	add	r1, r8
 800c7d8:	68a8      	ldr	r0, [r5, #8]
 800c7da:	4622      	mov	r2, r4
 800c7dc:	1b36      	subs	r6, r6, r4
 800c7de:	f00d f886 	bl	80198ee <memcpy>
 800c7e2:	68ab      	ldr	r3, [r5, #8]
 800c7e4:	6928      	ldr	r0, [r5, #16]
 800c7e6:	4423      	add	r3, r4
 800c7e8:	4420      	add	r0, r4
 800c7ea:	60ab      	str	r3, [r5, #8]
 800c7ec:	6128      	str	r0, [r5, #16]
 800c7ee:	4631      	mov	r1, r6
 800c7f0:	2201      	movs	r2, #1
 800c7f2:	4628      	mov	r0, r5
 800c7f4:	f001 fb7e 	bl	800def4 <ucdr_check_final_buffer_behavior_array>
 800c7f8:	1bb9      	subs	r1, r7, r6
 800c7fa:	4604      	mov	r4, r0
 800c7fc:	2800      	cmp	r0, #0
 800c7fe:	d1ea      	bne.n	800c7d6 <ucdr_serialize_array_uint8_t+0x16>
 800c800:	2301      	movs	r3, #1
 800c802:	7da8      	ldrb	r0, [r5, #22]
 800c804:	756b      	strb	r3, [r5, #21]
 800c806:	4058      	eors	r0, r3
 800c808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c80c:	463a      	mov	r2, r7
 800c80e:	4641      	mov	r1, r8
 800c810:	68a8      	ldr	r0, [r5, #8]
 800c812:	f00d f86c 	bl	80198ee <memcpy>
 800c816:	68aa      	ldr	r2, [r5, #8]
 800c818:	692b      	ldr	r3, [r5, #16]
 800c81a:	443a      	add	r2, r7
 800c81c:	443b      	add	r3, r7
 800c81e:	60aa      	str	r2, [r5, #8]
 800c820:	612b      	str	r3, [r5, #16]
 800c822:	e7ed      	b.n	800c800 <ucdr_serialize_array_uint8_t+0x40>

0800c824 <ucdr_serialize_endian_array_uint8_t>:
 800c824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c828:	4619      	mov	r1, r3
 800c82a:	461f      	mov	r7, r3
 800c82c:	4605      	mov	r5, r0
 800c82e:	4690      	mov	r8, r2
 800c830:	f001 fad6 	bl	800dde0 <ucdr_check_buffer_available_for>
 800c834:	b9e0      	cbnz	r0, 800c870 <ucdr_serialize_endian_array_uint8_t+0x4c>
 800c836:	463e      	mov	r6, r7
 800c838:	e00b      	b.n	800c852 <ucdr_serialize_endian_array_uint8_t+0x2e>
 800c83a:	4441      	add	r1, r8
 800c83c:	68a8      	ldr	r0, [r5, #8]
 800c83e:	4622      	mov	r2, r4
 800c840:	1b36      	subs	r6, r6, r4
 800c842:	f00d f854 	bl	80198ee <memcpy>
 800c846:	68ab      	ldr	r3, [r5, #8]
 800c848:	6928      	ldr	r0, [r5, #16]
 800c84a:	4423      	add	r3, r4
 800c84c:	4420      	add	r0, r4
 800c84e:	60ab      	str	r3, [r5, #8]
 800c850:	6128      	str	r0, [r5, #16]
 800c852:	4631      	mov	r1, r6
 800c854:	2201      	movs	r2, #1
 800c856:	4628      	mov	r0, r5
 800c858:	f001 fb4c 	bl	800def4 <ucdr_check_final_buffer_behavior_array>
 800c85c:	1bb9      	subs	r1, r7, r6
 800c85e:	4604      	mov	r4, r0
 800c860:	2800      	cmp	r0, #0
 800c862:	d1ea      	bne.n	800c83a <ucdr_serialize_endian_array_uint8_t+0x16>
 800c864:	2301      	movs	r3, #1
 800c866:	7da8      	ldrb	r0, [r5, #22]
 800c868:	756b      	strb	r3, [r5, #21]
 800c86a:	4058      	eors	r0, r3
 800c86c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c870:	463a      	mov	r2, r7
 800c872:	4641      	mov	r1, r8
 800c874:	68a8      	ldr	r0, [r5, #8]
 800c876:	f00d f83a 	bl	80198ee <memcpy>
 800c87a:	68aa      	ldr	r2, [r5, #8]
 800c87c:	692b      	ldr	r3, [r5, #16]
 800c87e:	443a      	add	r2, r7
 800c880:	443b      	add	r3, r7
 800c882:	60aa      	str	r2, [r5, #8]
 800c884:	612b      	str	r3, [r5, #16]
 800c886:	e7ed      	b.n	800c864 <ucdr_serialize_endian_array_uint8_t+0x40>

0800c888 <ucdr_deserialize_array_uint8_t>:
 800c888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c88c:	4688      	mov	r8, r1
 800c88e:	4611      	mov	r1, r2
 800c890:	4617      	mov	r7, r2
 800c892:	4605      	mov	r5, r0
 800c894:	f001 faa4 	bl	800dde0 <ucdr_check_buffer_available_for>
 800c898:	b9e8      	cbnz	r0, 800c8d6 <ucdr_deserialize_array_uint8_t+0x4e>
 800c89a:	463e      	mov	r6, r7
 800c89c:	e00c      	b.n	800c8b8 <ucdr_deserialize_array_uint8_t+0x30>
 800c89e:	eb08 0003 	add.w	r0, r8, r3
 800c8a2:	68a9      	ldr	r1, [r5, #8]
 800c8a4:	4622      	mov	r2, r4
 800c8a6:	1b36      	subs	r6, r6, r4
 800c8a8:	f00d f821 	bl	80198ee <memcpy>
 800c8ac:	68ab      	ldr	r3, [r5, #8]
 800c8ae:	6928      	ldr	r0, [r5, #16]
 800c8b0:	4423      	add	r3, r4
 800c8b2:	4420      	add	r0, r4
 800c8b4:	60ab      	str	r3, [r5, #8]
 800c8b6:	6128      	str	r0, [r5, #16]
 800c8b8:	4631      	mov	r1, r6
 800c8ba:	2201      	movs	r2, #1
 800c8bc:	4628      	mov	r0, r5
 800c8be:	f001 fb19 	bl	800def4 <ucdr_check_final_buffer_behavior_array>
 800c8c2:	1bbb      	subs	r3, r7, r6
 800c8c4:	4604      	mov	r4, r0
 800c8c6:	2800      	cmp	r0, #0
 800c8c8:	d1e9      	bne.n	800c89e <ucdr_deserialize_array_uint8_t+0x16>
 800c8ca:	2301      	movs	r3, #1
 800c8cc:	7da8      	ldrb	r0, [r5, #22]
 800c8ce:	756b      	strb	r3, [r5, #21]
 800c8d0:	4058      	eors	r0, r3
 800c8d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8d6:	463a      	mov	r2, r7
 800c8d8:	68a9      	ldr	r1, [r5, #8]
 800c8da:	4640      	mov	r0, r8
 800c8dc:	f00d f807 	bl	80198ee <memcpy>
 800c8e0:	68aa      	ldr	r2, [r5, #8]
 800c8e2:	692b      	ldr	r3, [r5, #16]
 800c8e4:	443a      	add	r2, r7
 800c8e6:	443b      	add	r3, r7
 800c8e8:	60aa      	str	r2, [r5, #8]
 800c8ea:	612b      	str	r3, [r5, #16]
 800c8ec:	e7ed      	b.n	800c8ca <ucdr_deserialize_array_uint8_t+0x42>
 800c8ee:	bf00      	nop

0800c8f0 <ucdr_deserialize_endian_array_uint8_t>:
 800c8f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8f4:	4619      	mov	r1, r3
 800c8f6:	461f      	mov	r7, r3
 800c8f8:	4605      	mov	r5, r0
 800c8fa:	4690      	mov	r8, r2
 800c8fc:	f001 fa70 	bl	800dde0 <ucdr_check_buffer_available_for>
 800c900:	b9e8      	cbnz	r0, 800c93e <ucdr_deserialize_endian_array_uint8_t+0x4e>
 800c902:	463e      	mov	r6, r7
 800c904:	e00c      	b.n	800c920 <ucdr_deserialize_endian_array_uint8_t+0x30>
 800c906:	eb08 0003 	add.w	r0, r8, r3
 800c90a:	68a9      	ldr	r1, [r5, #8]
 800c90c:	4622      	mov	r2, r4
 800c90e:	1b36      	subs	r6, r6, r4
 800c910:	f00c ffed 	bl	80198ee <memcpy>
 800c914:	68ab      	ldr	r3, [r5, #8]
 800c916:	6928      	ldr	r0, [r5, #16]
 800c918:	4423      	add	r3, r4
 800c91a:	4420      	add	r0, r4
 800c91c:	60ab      	str	r3, [r5, #8]
 800c91e:	6128      	str	r0, [r5, #16]
 800c920:	4631      	mov	r1, r6
 800c922:	2201      	movs	r2, #1
 800c924:	4628      	mov	r0, r5
 800c926:	f001 fae5 	bl	800def4 <ucdr_check_final_buffer_behavior_array>
 800c92a:	1bbb      	subs	r3, r7, r6
 800c92c:	4604      	mov	r4, r0
 800c92e:	2800      	cmp	r0, #0
 800c930:	d1e9      	bne.n	800c906 <ucdr_deserialize_endian_array_uint8_t+0x16>
 800c932:	2301      	movs	r3, #1
 800c934:	7da8      	ldrb	r0, [r5, #22]
 800c936:	756b      	strb	r3, [r5, #21]
 800c938:	4058      	eors	r0, r3
 800c93a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c93e:	463a      	mov	r2, r7
 800c940:	68a9      	ldr	r1, [r5, #8]
 800c942:	4640      	mov	r0, r8
 800c944:	f00c ffd3 	bl	80198ee <memcpy>
 800c948:	68aa      	ldr	r2, [r5, #8]
 800c94a:	692b      	ldr	r3, [r5, #16]
 800c94c:	443a      	add	r2, r7
 800c94e:	443b      	add	r3, r7
 800c950:	60aa      	str	r2, [r5, #8]
 800c952:	612b      	str	r3, [r5, #16]
 800c954:	e7ed      	b.n	800c932 <ucdr_deserialize_endian_array_uint8_t+0x42>
 800c956:	bf00      	nop

0800c958 <ucdr_serialize_bool>:
 800c958:	b538      	push	{r3, r4, r5, lr}
 800c95a:	460d      	mov	r5, r1
 800c95c:	2101      	movs	r1, #1
 800c95e:	4604      	mov	r4, r0
 800c960:	f001 fa4a 	bl	800ddf8 <ucdr_check_final_buffer_behavior>
 800c964:	b148      	cbz	r0, 800c97a <ucdr_serialize_bool+0x22>
 800c966:	68a3      	ldr	r3, [r4, #8]
 800c968:	2101      	movs	r1, #1
 800c96a:	701d      	strb	r5, [r3, #0]
 800c96c:	68a2      	ldr	r2, [r4, #8]
 800c96e:	6923      	ldr	r3, [r4, #16]
 800c970:	440a      	add	r2, r1
 800c972:	7561      	strb	r1, [r4, #21]
 800c974:	440b      	add	r3, r1
 800c976:	60a2      	str	r2, [r4, #8]
 800c978:	6123      	str	r3, [r4, #16]
 800c97a:	7da0      	ldrb	r0, [r4, #22]
 800c97c:	f080 0001 	eor.w	r0, r0, #1
 800c980:	bd38      	pop	{r3, r4, r5, pc}
 800c982:	bf00      	nop

0800c984 <ucdr_deserialize_bool>:
 800c984:	b538      	push	{r3, r4, r5, lr}
 800c986:	460d      	mov	r5, r1
 800c988:	2101      	movs	r1, #1
 800c98a:	4604      	mov	r4, r0
 800c98c:	f001 fa34 	bl	800ddf8 <ucdr_check_final_buffer_behavior>
 800c990:	b160      	cbz	r0, 800c9ac <ucdr_deserialize_bool+0x28>
 800c992:	68a2      	ldr	r2, [r4, #8]
 800c994:	2101      	movs	r1, #1
 800c996:	6923      	ldr	r3, [r4, #16]
 800c998:	f812 0b01 	ldrb.w	r0, [r2], #1
 800c99c:	440b      	add	r3, r1
 800c99e:	3800      	subs	r0, #0
 800c9a0:	bf18      	it	ne
 800c9a2:	2001      	movne	r0, #1
 800c9a4:	7028      	strb	r0, [r5, #0]
 800c9a6:	60a2      	str	r2, [r4, #8]
 800c9a8:	6123      	str	r3, [r4, #16]
 800c9aa:	7561      	strb	r1, [r4, #21]
 800c9ac:	7da0      	ldrb	r0, [r4, #22]
 800c9ae:	f080 0001 	eor.w	r0, r0, #1
 800c9b2:	bd38      	pop	{r3, r4, r5, pc}

0800c9b4 <ucdr_serialize_uint8_t>:
 800c9b4:	b538      	push	{r3, r4, r5, lr}
 800c9b6:	460d      	mov	r5, r1
 800c9b8:	2101      	movs	r1, #1
 800c9ba:	4604      	mov	r4, r0
 800c9bc:	f001 fa1c 	bl	800ddf8 <ucdr_check_final_buffer_behavior>
 800c9c0:	b148      	cbz	r0, 800c9d6 <ucdr_serialize_uint8_t+0x22>
 800c9c2:	68a3      	ldr	r3, [r4, #8]
 800c9c4:	2101      	movs	r1, #1
 800c9c6:	701d      	strb	r5, [r3, #0]
 800c9c8:	68a2      	ldr	r2, [r4, #8]
 800c9ca:	6923      	ldr	r3, [r4, #16]
 800c9cc:	440a      	add	r2, r1
 800c9ce:	7561      	strb	r1, [r4, #21]
 800c9d0:	440b      	add	r3, r1
 800c9d2:	60a2      	str	r2, [r4, #8]
 800c9d4:	6123      	str	r3, [r4, #16]
 800c9d6:	7da0      	ldrb	r0, [r4, #22]
 800c9d8:	f080 0001 	eor.w	r0, r0, #1
 800c9dc:	bd38      	pop	{r3, r4, r5, pc}
 800c9de:	bf00      	nop

0800c9e0 <ucdr_deserialize_uint8_t>:
 800c9e0:	b538      	push	{r3, r4, r5, lr}
 800c9e2:	460d      	mov	r5, r1
 800c9e4:	2101      	movs	r1, #1
 800c9e6:	4604      	mov	r4, r0
 800c9e8:	f001 fa06 	bl	800ddf8 <ucdr_check_final_buffer_behavior>
 800c9ec:	b150      	cbz	r0, 800ca04 <ucdr_deserialize_uint8_t+0x24>
 800c9ee:	68a3      	ldr	r3, [r4, #8]
 800c9f0:	2101      	movs	r1, #1
 800c9f2:	781b      	ldrb	r3, [r3, #0]
 800c9f4:	702b      	strb	r3, [r5, #0]
 800c9f6:	68a2      	ldr	r2, [r4, #8]
 800c9f8:	6923      	ldr	r3, [r4, #16]
 800c9fa:	440a      	add	r2, r1
 800c9fc:	7561      	strb	r1, [r4, #21]
 800c9fe:	440b      	add	r3, r1
 800ca00:	60a2      	str	r2, [r4, #8]
 800ca02:	6123      	str	r3, [r4, #16]
 800ca04:	7da0      	ldrb	r0, [r4, #22]
 800ca06:	f080 0001 	eor.w	r0, r0, #1
 800ca0a:	bd38      	pop	{r3, r4, r5, pc}

0800ca0c <ucdr_serialize_uint16_t>:
 800ca0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca10:	460b      	mov	r3, r1
 800ca12:	b082      	sub	sp, #8
 800ca14:	4604      	mov	r4, r0
 800ca16:	2102      	movs	r1, #2
 800ca18:	f8ad 3006 	strh.w	r3, [sp, #6]
 800ca1c:	f001 fa40 	bl	800dea0 <ucdr_buffer_alignment>
 800ca20:	4601      	mov	r1, r0
 800ca22:	4620      	mov	r0, r4
 800ca24:	7d67      	ldrb	r7, [r4, #21]
 800ca26:	f001 fa83 	bl	800df30 <ucdr_advance_buffer>
 800ca2a:	2102      	movs	r1, #2
 800ca2c:	4620      	mov	r0, r4
 800ca2e:	f001 f9d7 	bl	800dde0 <ucdr_check_buffer_available_for>
 800ca32:	bb78      	cbnz	r0, 800ca94 <ucdr_serialize_uint16_t+0x88>
 800ca34:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800ca38:	42ab      	cmp	r3, r5
 800ca3a:	d926      	bls.n	800ca8a <ucdr_serialize_uint16_t+0x7e>
 800ca3c:	1b5e      	subs	r6, r3, r5
 800ca3e:	60a3      	str	r3, [r4, #8]
 800ca40:	6923      	ldr	r3, [r4, #16]
 800ca42:	4620      	mov	r0, r4
 800ca44:	f1c6 0802 	rsb	r8, r6, #2
 800ca48:	4433      	add	r3, r6
 800ca4a:	4641      	mov	r1, r8
 800ca4c:	6123      	str	r3, [r4, #16]
 800ca4e:	f001 f9d3 	bl	800ddf8 <ucdr_check_final_buffer_behavior>
 800ca52:	2800      	cmp	r0, #0
 800ca54:	d03b      	beq.n	800cace <ucdr_serialize_uint16_t+0xc2>
 800ca56:	7d23      	ldrb	r3, [r4, #20]
 800ca58:	2b01      	cmp	r3, #1
 800ca5a:	d04a      	beq.n	800caf2 <ucdr_serialize_uint16_t+0xe6>
 800ca5c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ca60:	702b      	strb	r3, [r5, #0]
 800ca62:	2e00      	cmp	r6, #0
 800ca64:	d040      	beq.n	800cae8 <ucdr_serialize_uint16_t+0xdc>
 800ca66:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ca6a:	706b      	strb	r3, [r5, #1]
 800ca6c:	6923      	ldr	r3, [r4, #16]
 800ca6e:	2102      	movs	r1, #2
 800ca70:	68a2      	ldr	r2, [r4, #8]
 800ca72:	3302      	adds	r3, #2
 800ca74:	7da0      	ldrb	r0, [r4, #22]
 800ca76:	4442      	add	r2, r8
 800ca78:	7561      	strb	r1, [r4, #21]
 800ca7a:	1b9e      	subs	r6, r3, r6
 800ca7c:	f080 0001 	eor.w	r0, r0, #1
 800ca80:	60a2      	str	r2, [r4, #8]
 800ca82:	6126      	str	r6, [r4, #16]
 800ca84:	b002      	add	sp, #8
 800ca86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca8a:	2102      	movs	r1, #2
 800ca8c:	4620      	mov	r0, r4
 800ca8e:	f001 f9b3 	bl	800ddf8 <ucdr_check_final_buffer_behavior>
 800ca92:	b190      	cbz	r0, 800caba <ucdr_serialize_uint16_t+0xae>
 800ca94:	7d23      	ldrb	r3, [r4, #20]
 800ca96:	2b01      	cmp	r3, #1
 800ca98:	68a3      	ldr	r3, [r4, #8]
 800ca9a:	d014      	beq.n	800cac6 <ucdr_serialize_uint16_t+0xba>
 800ca9c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800caa0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800caa4:	7019      	strb	r1, [r3, #0]
 800caa6:	68a3      	ldr	r3, [r4, #8]
 800caa8:	705a      	strb	r2, [r3, #1]
 800caaa:	2102      	movs	r1, #2
 800caac:	68a2      	ldr	r2, [r4, #8]
 800caae:	6923      	ldr	r3, [r4, #16]
 800cab0:	440a      	add	r2, r1
 800cab2:	7561      	strb	r1, [r4, #21]
 800cab4:	440b      	add	r3, r1
 800cab6:	60a2      	str	r2, [r4, #8]
 800cab8:	6123      	str	r3, [r4, #16]
 800caba:	7da0      	ldrb	r0, [r4, #22]
 800cabc:	f080 0001 	eor.w	r0, r0, #1
 800cac0:	b002      	add	sp, #8
 800cac2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cac6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800caca:	801a      	strh	r2, [r3, #0]
 800cacc:	e7ed      	b.n	800caaa <ucdr_serialize_uint16_t+0x9e>
 800cace:	68a2      	ldr	r2, [r4, #8]
 800cad0:	6923      	ldr	r3, [r4, #16]
 800cad2:	7da0      	ldrb	r0, [r4, #22]
 800cad4:	1b92      	subs	r2, r2, r6
 800cad6:	1b9b      	subs	r3, r3, r6
 800cad8:	7567      	strb	r7, [r4, #21]
 800cada:	f080 0001 	eor.w	r0, r0, #1
 800cade:	60a2      	str	r2, [r4, #8]
 800cae0:	6123      	str	r3, [r4, #16]
 800cae2:	b002      	add	sp, #8
 800cae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cae8:	68a3      	ldr	r3, [r4, #8]
 800caea:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800caee:	701a      	strb	r2, [r3, #0]
 800caf0:	e7bc      	b.n	800ca6c <ucdr_serialize_uint16_t+0x60>
 800caf2:	4628      	mov	r0, r5
 800caf4:	f10d 0506 	add.w	r5, sp, #6
 800caf8:	4632      	mov	r2, r6
 800cafa:	4629      	mov	r1, r5
 800cafc:	f00c fef7 	bl	80198ee <memcpy>
 800cb00:	4642      	mov	r2, r8
 800cb02:	19a9      	adds	r1, r5, r6
 800cb04:	68a0      	ldr	r0, [r4, #8]
 800cb06:	f00c fef2 	bl	80198ee <memcpy>
 800cb0a:	e7af      	b.n	800ca6c <ucdr_serialize_uint16_t+0x60>

0800cb0c <ucdr_serialize_endian_uint16_t>:
 800cb0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cb10:	4604      	mov	r4, r0
 800cb12:	b083      	sub	sp, #12
 800cb14:	460d      	mov	r5, r1
 800cb16:	2102      	movs	r1, #2
 800cb18:	f8ad 2006 	strh.w	r2, [sp, #6]
 800cb1c:	f001 f9c0 	bl	800dea0 <ucdr_buffer_alignment>
 800cb20:	4601      	mov	r1, r0
 800cb22:	4620      	mov	r0, r4
 800cb24:	f894 8015 	ldrb.w	r8, [r4, #21]
 800cb28:	f001 fa02 	bl	800df30 <ucdr_advance_buffer>
 800cb2c:	2102      	movs	r1, #2
 800cb2e:	4620      	mov	r0, r4
 800cb30:	f001 f956 	bl	800dde0 <ucdr_check_buffer_available_for>
 800cb34:	bb70      	cbnz	r0, 800cb94 <ucdr_serialize_endian_uint16_t+0x88>
 800cb36:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800cb3a:	42be      	cmp	r6, r7
 800cb3c:	d925      	bls.n	800cb8a <ucdr_serialize_endian_uint16_t+0x7e>
 800cb3e:	6923      	ldr	r3, [r4, #16]
 800cb40:	4620      	mov	r0, r4
 800cb42:	60a6      	str	r6, [r4, #8]
 800cb44:	1bf6      	subs	r6, r6, r7
 800cb46:	4433      	add	r3, r6
 800cb48:	f1c6 0902 	rsb	r9, r6, #2
 800cb4c:	6123      	str	r3, [r4, #16]
 800cb4e:	4649      	mov	r1, r9
 800cb50:	f001 f952 	bl	800ddf8 <ucdr_check_final_buffer_behavior>
 800cb54:	2800      	cmp	r0, #0
 800cb56:	d039      	beq.n	800cbcc <ucdr_serialize_endian_uint16_t+0xc0>
 800cb58:	2d01      	cmp	r5, #1
 800cb5a:	d04a      	beq.n	800cbf2 <ucdr_serialize_endian_uint16_t+0xe6>
 800cb5c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800cb60:	703b      	strb	r3, [r7, #0]
 800cb62:	2e00      	cmp	r6, #0
 800cb64:	d040      	beq.n	800cbe8 <ucdr_serialize_endian_uint16_t+0xdc>
 800cb66:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800cb6a:	707b      	strb	r3, [r7, #1]
 800cb6c:	6923      	ldr	r3, [r4, #16]
 800cb6e:	2102      	movs	r1, #2
 800cb70:	68a2      	ldr	r2, [r4, #8]
 800cb72:	7da0      	ldrb	r0, [r4, #22]
 800cb74:	3302      	adds	r3, #2
 800cb76:	444a      	add	r2, r9
 800cb78:	7561      	strb	r1, [r4, #21]
 800cb7a:	1b9b      	subs	r3, r3, r6
 800cb7c:	f080 0001 	eor.w	r0, r0, #1
 800cb80:	60a2      	str	r2, [r4, #8]
 800cb82:	6123      	str	r3, [r4, #16]
 800cb84:	b003      	add	sp, #12
 800cb86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cb8a:	2102      	movs	r1, #2
 800cb8c:	4620      	mov	r0, r4
 800cb8e:	f001 f933 	bl	800ddf8 <ucdr_check_final_buffer_behavior>
 800cb92:	b188      	cbz	r0, 800cbb8 <ucdr_serialize_endian_uint16_t+0xac>
 800cb94:	2d01      	cmp	r5, #1
 800cb96:	68a3      	ldr	r3, [r4, #8]
 800cb98:	d014      	beq.n	800cbc4 <ucdr_serialize_endian_uint16_t+0xb8>
 800cb9a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800cb9e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800cba2:	7019      	strb	r1, [r3, #0]
 800cba4:	68a3      	ldr	r3, [r4, #8]
 800cba6:	705a      	strb	r2, [r3, #1]
 800cba8:	2102      	movs	r1, #2
 800cbaa:	68a2      	ldr	r2, [r4, #8]
 800cbac:	6923      	ldr	r3, [r4, #16]
 800cbae:	440a      	add	r2, r1
 800cbb0:	7561      	strb	r1, [r4, #21]
 800cbb2:	440b      	add	r3, r1
 800cbb4:	60a2      	str	r2, [r4, #8]
 800cbb6:	6123      	str	r3, [r4, #16]
 800cbb8:	7da0      	ldrb	r0, [r4, #22]
 800cbba:	f080 0001 	eor.w	r0, r0, #1
 800cbbe:	b003      	add	sp, #12
 800cbc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cbc4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800cbc8:	801a      	strh	r2, [r3, #0]
 800cbca:	e7ed      	b.n	800cba8 <ucdr_serialize_endian_uint16_t+0x9c>
 800cbcc:	68a2      	ldr	r2, [r4, #8]
 800cbce:	6923      	ldr	r3, [r4, #16]
 800cbd0:	7da0      	ldrb	r0, [r4, #22]
 800cbd2:	1b92      	subs	r2, r2, r6
 800cbd4:	1b9b      	subs	r3, r3, r6
 800cbd6:	f884 8015 	strb.w	r8, [r4, #21]
 800cbda:	f080 0001 	eor.w	r0, r0, #1
 800cbde:	60a2      	str	r2, [r4, #8]
 800cbe0:	6123      	str	r3, [r4, #16]
 800cbe2:	b003      	add	sp, #12
 800cbe4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cbe8:	68a3      	ldr	r3, [r4, #8]
 800cbea:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800cbee:	701a      	strb	r2, [r3, #0]
 800cbf0:	e7bc      	b.n	800cb6c <ucdr_serialize_endian_uint16_t+0x60>
 800cbf2:	f10d 0506 	add.w	r5, sp, #6
 800cbf6:	4632      	mov	r2, r6
 800cbf8:	4638      	mov	r0, r7
 800cbfa:	4629      	mov	r1, r5
 800cbfc:	f00c fe77 	bl	80198ee <memcpy>
 800cc00:	464a      	mov	r2, r9
 800cc02:	19a9      	adds	r1, r5, r6
 800cc04:	68a0      	ldr	r0, [r4, #8]
 800cc06:	f00c fe72 	bl	80198ee <memcpy>
 800cc0a:	e7af      	b.n	800cb6c <ucdr_serialize_endian_uint16_t+0x60>

0800cc0c <ucdr_deserialize_uint16_t>:
 800cc0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc10:	4604      	mov	r4, r0
 800cc12:	460d      	mov	r5, r1
 800cc14:	2102      	movs	r1, #2
 800cc16:	f001 f943 	bl	800dea0 <ucdr_buffer_alignment>
 800cc1a:	4601      	mov	r1, r0
 800cc1c:	4620      	mov	r0, r4
 800cc1e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800cc22:	f001 f985 	bl	800df30 <ucdr_advance_buffer>
 800cc26:	2102      	movs	r1, #2
 800cc28:	4620      	mov	r0, r4
 800cc2a:	f001 f8d9 	bl	800dde0 <ucdr_check_buffer_available_for>
 800cc2e:	bb60      	cbnz	r0, 800cc8a <ucdr_deserialize_uint16_t+0x7e>
 800cc30:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800cc34:	42be      	cmp	r6, r7
 800cc36:	d923      	bls.n	800cc80 <ucdr_deserialize_uint16_t+0x74>
 800cc38:	6923      	ldr	r3, [r4, #16]
 800cc3a:	4620      	mov	r0, r4
 800cc3c:	60a6      	str	r6, [r4, #8]
 800cc3e:	1bf6      	subs	r6, r6, r7
 800cc40:	4433      	add	r3, r6
 800cc42:	f1c6 0902 	rsb	r9, r6, #2
 800cc46:	6123      	str	r3, [r4, #16]
 800cc48:	4649      	mov	r1, r9
 800cc4a:	f001 f8d5 	bl	800ddf8 <ucdr_check_final_buffer_behavior>
 800cc4e:	2800      	cmp	r0, #0
 800cc50:	d034      	beq.n	800ccbc <ucdr_deserialize_uint16_t+0xb0>
 800cc52:	7d23      	ldrb	r3, [r4, #20]
 800cc54:	2b01      	cmp	r3, #1
 800cc56:	d042      	beq.n	800ccde <ucdr_deserialize_uint16_t+0xd2>
 800cc58:	787b      	ldrb	r3, [r7, #1]
 800cc5a:	702b      	strb	r3, [r5, #0]
 800cc5c:	2e00      	cmp	r6, #0
 800cc5e:	d03a      	beq.n	800ccd6 <ucdr_deserialize_uint16_t+0xca>
 800cc60:	783b      	ldrb	r3, [r7, #0]
 800cc62:	706b      	strb	r3, [r5, #1]
 800cc64:	6923      	ldr	r3, [r4, #16]
 800cc66:	2102      	movs	r1, #2
 800cc68:	68a2      	ldr	r2, [r4, #8]
 800cc6a:	3302      	adds	r3, #2
 800cc6c:	7da0      	ldrb	r0, [r4, #22]
 800cc6e:	444a      	add	r2, r9
 800cc70:	7561      	strb	r1, [r4, #21]
 800cc72:	1b9b      	subs	r3, r3, r6
 800cc74:	f080 0001 	eor.w	r0, r0, #1
 800cc78:	60a2      	str	r2, [r4, #8]
 800cc7a:	6123      	str	r3, [r4, #16]
 800cc7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc80:	2102      	movs	r1, #2
 800cc82:	4620      	mov	r0, r4
 800cc84:	f001 f8b8 	bl	800ddf8 <ucdr_check_final_buffer_behavior>
 800cc88:	b180      	cbz	r0, 800ccac <ucdr_deserialize_uint16_t+0xa0>
 800cc8a:	7d23      	ldrb	r3, [r4, #20]
 800cc8c:	2b01      	cmp	r3, #1
 800cc8e:	68a3      	ldr	r3, [r4, #8]
 800cc90:	d011      	beq.n	800ccb6 <ucdr_deserialize_uint16_t+0xaa>
 800cc92:	785b      	ldrb	r3, [r3, #1]
 800cc94:	702b      	strb	r3, [r5, #0]
 800cc96:	68a3      	ldr	r3, [r4, #8]
 800cc98:	781b      	ldrb	r3, [r3, #0]
 800cc9a:	706b      	strb	r3, [r5, #1]
 800cc9c:	2102      	movs	r1, #2
 800cc9e:	68a2      	ldr	r2, [r4, #8]
 800cca0:	6923      	ldr	r3, [r4, #16]
 800cca2:	440a      	add	r2, r1
 800cca4:	7561      	strb	r1, [r4, #21]
 800cca6:	440b      	add	r3, r1
 800cca8:	60a2      	str	r2, [r4, #8]
 800ccaa:	6123      	str	r3, [r4, #16]
 800ccac:	7da0      	ldrb	r0, [r4, #22]
 800ccae:	f080 0001 	eor.w	r0, r0, #1
 800ccb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ccb6:	881b      	ldrh	r3, [r3, #0]
 800ccb8:	802b      	strh	r3, [r5, #0]
 800ccba:	e7ef      	b.n	800cc9c <ucdr_deserialize_uint16_t+0x90>
 800ccbc:	68a2      	ldr	r2, [r4, #8]
 800ccbe:	6923      	ldr	r3, [r4, #16]
 800ccc0:	1b92      	subs	r2, r2, r6
 800ccc2:	7da0      	ldrb	r0, [r4, #22]
 800ccc4:	1b9b      	subs	r3, r3, r6
 800ccc6:	f884 8015 	strb.w	r8, [r4, #21]
 800ccca:	f080 0001 	eor.w	r0, r0, #1
 800ccce:	60a2      	str	r2, [r4, #8]
 800ccd0:	6123      	str	r3, [r4, #16]
 800ccd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ccd6:	68a3      	ldr	r3, [r4, #8]
 800ccd8:	781b      	ldrb	r3, [r3, #0]
 800ccda:	706b      	strb	r3, [r5, #1]
 800ccdc:	e7c2      	b.n	800cc64 <ucdr_deserialize_uint16_t+0x58>
 800ccde:	4639      	mov	r1, r7
 800cce0:	4632      	mov	r2, r6
 800cce2:	4628      	mov	r0, r5
 800cce4:	f00c fe03 	bl	80198ee <memcpy>
 800cce8:	464a      	mov	r2, r9
 800ccea:	19a8      	adds	r0, r5, r6
 800ccec:	68a1      	ldr	r1, [r4, #8]
 800ccee:	f00c fdfe 	bl	80198ee <memcpy>
 800ccf2:	e7b7      	b.n	800cc64 <ucdr_deserialize_uint16_t+0x58>

0800ccf4 <ucdr_deserialize_endian_uint16_t>:
 800ccf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ccf8:	4604      	mov	r4, r0
 800ccfa:	460e      	mov	r6, r1
 800ccfc:	2102      	movs	r1, #2
 800ccfe:	4615      	mov	r5, r2
 800cd00:	f001 f8ce 	bl	800dea0 <ucdr_buffer_alignment>
 800cd04:	4601      	mov	r1, r0
 800cd06:	4620      	mov	r0, r4
 800cd08:	f894 8015 	ldrb.w	r8, [r4, #21]
 800cd0c:	f001 f910 	bl	800df30 <ucdr_advance_buffer>
 800cd10:	2102      	movs	r1, #2
 800cd12:	4620      	mov	r0, r4
 800cd14:	f001 f864 	bl	800dde0 <ucdr_check_buffer_available_for>
 800cd18:	bb70      	cbnz	r0, 800cd78 <ucdr_deserialize_endian_uint16_t+0x84>
 800cd1a:	e9d4 7901 	ldrd	r7, r9, [r4, #4]
 800cd1e:	454f      	cmp	r7, r9
 800cd20:	d925      	bls.n	800cd6e <ucdr_deserialize_endian_uint16_t+0x7a>
 800cd22:	6923      	ldr	r3, [r4, #16]
 800cd24:	4620      	mov	r0, r4
 800cd26:	60a7      	str	r7, [r4, #8]
 800cd28:	eba7 0709 	sub.w	r7, r7, r9
 800cd2c:	443b      	add	r3, r7
 800cd2e:	f1c7 0a02 	rsb	sl, r7, #2
 800cd32:	6123      	str	r3, [r4, #16]
 800cd34:	4651      	mov	r1, sl
 800cd36:	f001 f85f 	bl	800ddf8 <ucdr_check_final_buffer_behavior>
 800cd3a:	2800      	cmp	r0, #0
 800cd3c:	d034      	beq.n	800cda8 <ucdr_deserialize_endian_uint16_t+0xb4>
 800cd3e:	2e01      	cmp	r6, #1
 800cd40:	d043      	beq.n	800cdca <ucdr_deserialize_endian_uint16_t+0xd6>
 800cd42:	f899 3001 	ldrb.w	r3, [r9, #1]
 800cd46:	702b      	strb	r3, [r5, #0]
 800cd48:	2f00      	cmp	r7, #0
 800cd4a:	d03a      	beq.n	800cdc2 <ucdr_deserialize_endian_uint16_t+0xce>
 800cd4c:	f899 3000 	ldrb.w	r3, [r9]
 800cd50:	706b      	strb	r3, [r5, #1]
 800cd52:	6923      	ldr	r3, [r4, #16]
 800cd54:	2102      	movs	r1, #2
 800cd56:	68a2      	ldr	r2, [r4, #8]
 800cd58:	3302      	adds	r3, #2
 800cd5a:	7da0      	ldrb	r0, [r4, #22]
 800cd5c:	4452      	add	r2, sl
 800cd5e:	7561      	strb	r1, [r4, #21]
 800cd60:	1bdb      	subs	r3, r3, r7
 800cd62:	f080 0001 	eor.w	r0, r0, #1
 800cd66:	60a2      	str	r2, [r4, #8]
 800cd68:	6123      	str	r3, [r4, #16]
 800cd6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd6e:	2102      	movs	r1, #2
 800cd70:	4620      	mov	r0, r4
 800cd72:	f001 f841 	bl	800ddf8 <ucdr_check_final_buffer_behavior>
 800cd76:	b178      	cbz	r0, 800cd98 <ucdr_deserialize_endian_uint16_t+0xa4>
 800cd78:	2e01      	cmp	r6, #1
 800cd7a:	68a3      	ldr	r3, [r4, #8]
 800cd7c:	d011      	beq.n	800cda2 <ucdr_deserialize_endian_uint16_t+0xae>
 800cd7e:	785b      	ldrb	r3, [r3, #1]
 800cd80:	702b      	strb	r3, [r5, #0]
 800cd82:	68a3      	ldr	r3, [r4, #8]
 800cd84:	781b      	ldrb	r3, [r3, #0]
 800cd86:	706b      	strb	r3, [r5, #1]
 800cd88:	2102      	movs	r1, #2
 800cd8a:	68a2      	ldr	r2, [r4, #8]
 800cd8c:	6923      	ldr	r3, [r4, #16]
 800cd8e:	440a      	add	r2, r1
 800cd90:	7561      	strb	r1, [r4, #21]
 800cd92:	440b      	add	r3, r1
 800cd94:	60a2      	str	r2, [r4, #8]
 800cd96:	6123      	str	r3, [r4, #16]
 800cd98:	7da0      	ldrb	r0, [r4, #22]
 800cd9a:	f080 0001 	eor.w	r0, r0, #1
 800cd9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cda2:	881b      	ldrh	r3, [r3, #0]
 800cda4:	802b      	strh	r3, [r5, #0]
 800cda6:	e7ef      	b.n	800cd88 <ucdr_deserialize_endian_uint16_t+0x94>
 800cda8:	68a2      	ldr	r2, [r4, #8]
 800cdaa:	6923      	ldr	r3, [r4, #16]
 800cdac:	1bd2      	subs	r2, r2, r7
 800cdae:	7da0      	ldrb	r0, [r4, #22]
 800cdb0:	1bdb      	subs	r3, r3, r7
 800cdb2:	f884 8015 	strb.w	r8, [r4, #21]
 800cdb6:	f080 0001 	eor.w	r0, r0, #1
 800cdba:	60a2      	str	r2, [r4, #8]
 800cdbc:	6123      	str	r3, [r4, #16]
 800cdbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cdc2:	68a3      	ldr	r3, [r4, #8]
 800cdc4:	781b      	ldrb	r3, [r3, #0]
 800cdc6:	706b      	strb	r3, [r5, #1]
 800cdc8:	e7c3      	b.n	800cd52 <ucdr_deserialize_endian_uint16_t+0x5e>
 800cdca:	4649      	mov	r1, r9
 800cdcc:	463a      	mov	r2, r7
 800cdce:	4628      	mov	r0, r5
 800cdd0:	f00c fd8d 	bl	80198ee <memcpy>
 800cdd4:	4652      	mov	r2, sl
 800cdd6:	19e8      	adds	r0, r5, r7
 800cdd8:	68a1      	ldr	r1, [r4, #8]
 800cdda:	f00c fd88 	bl	80198ee <memcpy>
 800cdde:	e7b8      	b.n	800cd52 <ucdr_deserialize_endian_uint16_t+0x5e>

0800cde0 <ucdr_serialize_uint32_t>:
 800cde0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cde4:	b082      	sub	sp, #8
 800cde6:	4604      	mov	r4, r0
 800cde8:	9101      	str	r1, [sp, #4]
 800cdea:	2104      	movs	r1, #4
 800cdec:	f001 f858 	bl	800dea0 <ucdr_buffer_alignment>
 800cdf0:	4601      	mov	r1, r0
 800cdf2:	4620      	mov	r0, r4
 800cdf4:	7d67      	ldrb	r7, [r4, #21]
 800cdf6:	f001 f89b 	bl	800df30 <ucdr_advance_buffer>
 800cdfa:	2104      	movs	r1, #4
 800cdfc:	4620      	mov	r0, r4
 800cdfe:	f000 ffef 	bl	800dde0 <ucdr_check_buffer_available_for>
 800ce02:	2800      	cmp	r0, #0
 800ce04:	d139      	bne.n	800ce7a <ucdr_serialize_uint32_t+0x9a>
 800ce06:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800ce0a:	42ab      	cmp	r3, r5
 800ce0c:	d930      	bls.n	800ce70 <ucdr_serialize_uint32_t+0x90>
 800ce0e:	1b5e      	subs	r6, r3, r5
 800ce10:	60a3      	str	r3, [r4, #8]
 800ce12:	6923      	ldr	r3, [r4, #16]
 800ce14:	4620      	mov	r0, r4
 800ce16:	f1c6 0804 	rsb	r8, r6, #4
 800ce1a:	4433      	add	r3, r6
 800ce1c:	4641      	mov	r1, r8
 800ce1e:	6123      	str	r3, [r4, #16]
 800ce20:	f000 ffea 	bl	800ddf8 <ucdr_check_final_buffer_behavior>
 800ce24:	2800      	cmp	r0, #0
 800ce26:	d04c      	beq.n	800cec2 <ucdr_serialize_uint32_t+0xe2>
 800ce28:	7d23      	ldrb	r3, [r4, #20]
 800ce2a:	2b01      	cmp	r3, #1
 800ce2c:	d063      	beq.n	800cef6 <ucdr_serialize_uint32_t+0x116>
 800ce2e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ce32:	702b      	strb	r3, [r5, #0]
 800ce34:	2e00      	cmp	r6, #0
 800ce36:	d051      	beq.n	800cedc <ucdr_serialize_uint32_t+0xfc>
 800ce38:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ce3c:	2e01      	cmp	r6, #1
 800ce3e:	706b      	strb	r3, [r5, #1]
 800ce40:	d050      	beq.n	800cee4 <ucdr_serialize_uint32_t+0x104>
 800ce42:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ce46:	2e02      	cmp	r6, #2
 800ce48:	70ab      	strb	r3, [r5, #2]
 800ce4a:	d04f      	beq.n	800ceec <ucdr_serialize_uint32_t+0x10c>
 800ce4c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ce50:	70eb      	strb	r3, [r5, #3]
 800ce52:	6923      	ldr	r3, [r4, #16]
 800ce54:	2104      	movs	r1, #4
 800ce56:	68a2      	ldr	r2, [r4, #8]
 800ce58:	3304      	adds	r3, #4
 800ce5a:	7da0      	ldrb	r0, [r4, #22]
 800ce5c:	4442      	add	r2, r8
 800ce5e:	7561      	strb	r1, [r4, #21]
 800ce60:	1b9e      	subs	r6, r3, r6
 800ce62:	f080 0001 	eor.w	r0, r0, #1
 800ce66:	60a2      	str	r2, [r4, #8]
 800ce68:	6126      	str	r6, [r4, #16]
 800ce6a:	b002      	add	sp, #8
 800ce6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce70:	2104      	movs	r1, #4
 800ce72:	4620      	mov	r0, r4
 800ce74:	f000 ffc0 	bl	800ddf8 <ucdr_check_final_buffer_behavior>
 800ce78:	b1d0      	cbz	r0, 800ceb0 <ucdr_serialize_uint32_t+0xd0>
 800ce7a:	7d23      	ldrb	r3, [r4, #20]
 800ce7c:	2b01      	cmp	r3, #1
 800ce7e:	68a3      	ldr	r3, [r4, #8]
 800ce80:	d01c      	beq.n	800cebc <ucdr_serialize_uint32_t+0xdc>
 800ce82:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800ce86:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ce8a:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800ce8e:	7018      	strb	r0, [r3, #0]
 800ce90:	68a3      	ldr	r3, [r4, #8]
 800ce92:	705a      	strb	r2, [r3, #1]
 800ce94:	68a3      	ldr	r3, [r4, #8]
 800ce96:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ce9a:	7099      	strb	r1, [r3, #2]
 800ce9c:	68a3      	ldr	r3, [r4, #8]
 800ce9e:	70da      	strb	r2, [r3, #3]
 800cea0:	2104      	movs	r1, #4
 800cea2:	68a2      	ldr	r2, [r4, #8]
 800cea4:	6923      	ldr	r3, [r4, #16]
 800cea6:	440a      	add	r2, r1
 800cea8:	7561      	strb	r1, [r4, #21]
 800ceaa:	440b      	add	r3, r1
 800ceac:	60a2      	str	r2, [r4, #8]
 800ceae:	6123      	str	r3, [r4, #16]
 800ceb0:	7da0      	ldrb	r0, [r4, #22]
 800ceb2:	f080 0001 	eor.w	r0, r0, #1
 800ceb6:	b002      	add	sp, #8
 800ceb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cebc:	9a01      	ldr	r2, [sp, #4]
 800cebe:	601a      	str	r2, [r3, #0]
 800cec0:	e7ee      	b.n	800cea0 <ucdr_serialize_uint32_t+0xc0>
 800cec2:	68a2      	ldr	r2, [r4, #8]
 800cec4:	6923      	ldr	r3, [r4, #16]
 800cec6:	7da0      	ldrb	r0, [r4, #22]
 800cec8:	1b92      	subs	r2, r2, r6
 800ceca:	1b9b      	subs	r3, r3, r6
 800cecc:	7567      	strb	r7, [r4, #21]
 800cece:	f080 0001 	eor.w	r0, r0, #1
 800ced2:	60a2      	str	r2, [r4, #8]
 800ced4:	6123      	str	r3, [r4, #16]
 800ced6:	b002      	add	sp, #8
 800ced8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cedc:	68a3      	ldr	r3, [r4, #8]
 800cede:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800cee2:	701a      	strb	r2, [r3, #0]
 800cee4:	68a3      	ldr	r3, [r4, #8]
 800cee6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ceea:	701a      	strb	r2, [r3, #0]
 800ceec:	68a3      	ldr	r3, [r4, #8]
 800ceee:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800cef2:	701a      	strb	r2, [r3, #0]
 800cef4:	e7ad      	b.n	800ce52 <ucdr_serialize_uint32_t+0x72>
 800cef6:	4628      	mov	r0, r5
 800cef8:	ad01      	add	r5, sp, #4
 800cefa:	4632      	mov	r2, r6
 800cefc:	4629      	mov	r1, r5
 800cefe:	f00c fcf6 	bl	80198ee <memcpy>
 800cf02:	4642      	mov	r2, r8
 800cf04:	19a9      	adds	r1, r5, r6
 800cf06:	68a0      	ldr	r0, [r4, #8]
 800cf08:	f00c fcf1 	bl	80198ee <memcpy>
 800cf0c:	e7a1      	b.n	800ce52 <ucdr_serialize_uint32_t+0x72>
 800cf0e:	bf00      	nop

0800cf10 <ucdr_serialize_endian_uint32_t>:
 800cf10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cf14:	4604      	mov	r4, r0
 800cf16:	b083      	sub	sp, #12
 800cf18:	460d      	mov	r5, r1
 800cf1a:	2104      	movs	r1, #4
 800cf1c:	9201      	str	r2, [sp, #4]
 800cf1e:	f000 ffbf 	bl	800dea0 <ucdr_buffer_alignment>
 800cf22:	4601      	mov	r1, r0
 800cf24:	4620      	mov	r0, r4
 800cf26:	f894 8015 	ldrb.w	r8, [r4, #21]
 800cf2a:	f001 f801 	bl	800df30 <ucdr_advance_buffer>
 800cf2e:	2104      	movs	r1, #4
 800cf30:	4620      	mov	r0, r4
 800cf32:	f000 ff55 	bl	800dde0 <ucdr_check_buffer_available_for>
 800cf36:	2800      	cmp	r0, #0
 800cf38:	d138      	bne.n	800cfac <ucdr_serialize_endian_uint32_t+0x9c>
 800cf3a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800cf3e:	42b7      	cmp	r7, r6
 800cf40:	d92f      	bls.n	800cfa2 <ucdr_serialize_endian_uint32_t+0x92>
 800cf42:	6923      	ldr	r3, [r4, #16]
 800cf44:	4620      	mov	r0, r4
 800cf46:	60a7      	str	r7, [r4, #8]
 800cf48:	1bbf      	subs	r7, r7, r6
 800cf4a:	443b      	add	r3, r7
 800cf4c:	f1c7 0904 	rsb	r9, r7, #4
 800cf50:	6123      	str	r3, [r4, #16]
 800cf52:	4649      	mov	r1, r9
 800cf54:	f000 ff50 	bl	800ddf8 <ucdr_check_final_buffer_behavior>
 800cf58:	2800      	cmp	r0, #0
 800cf5a:	d04a      	beq.n	800cff2 <ucdr_serialize_endian_uint32_t+0xe2>
 800cf5c:	2d01      	cmp	r5, #1
 800cf5e:	d063      	beq.n	800d028 <ucdr_serialize_endian_uint32_t+0x118>
 800cf60:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800cf64:	7033      	strb	r3, [r6, #0]
 800cf66:	2f00      	cmp	r7, #0
 800cf68:	d051      	beq.n	800d00e <ucdr_serialize_endian_uint32_t+0xfe>
 800cf6a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800cf6e:	2f01      	cmp	r7, #1
 800cf70:	7073      	strb	r3, [r6, #1]
 800cf72:	d050      	beq.n	800d016 <ucdr_serialize_endian_uint32_t+0x106>
 800cf74:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800cf78:	2f02      	cmp	r7, #2
 800cf7a:	70b3      	strb	r3, [r6, #2]
 800cf7c:	d04f      	beq.n	800d01e <ucdr_serialize_endian_uint32_t+0x10e>
 800cf7e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800cf82:	70f3      	strb	r3, [r6, #3]
 800cf84:	6923      	ldr	r3, [r4, #16]
 800cf86:	2104      	movs	r1, #4
 800cf88:	68a2      	ldr	r2, [r4, #8]
 800cf8a:	7da0      	ldrb	r0, [r4, #22]
 800cf8c:	3304      	adds	r3, #4
 800cf8e:	444a      	add	r2, r9
 800cf90:	7561      	strb	r1, [r4, #21]
 800cf92:	1bdb      	subs	r3, r3, r7
 800cf94:	f080 0001 	eor.w	r0, r0, #1
 800cf98:	60a2      	str	r2, [r4, #8]
 800cf9a:	6123      	str	r3, [r4, #16]
 800cf9c:	b003      	add	sp, #12
 800cf9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cfa2:	2104      	movs	r1, #4
 800cfa4:	4620      	mov	r0, r4
 800cfa6:	f000 ff27 	bl	800ddf8 <ucdr_check_final_buffer_behavior>
 800cfaa:	b1c8      	cbz	r0, 800cfe0 <ucdr_serialize_endian_uint32_t+0xd0>
 800cfac:	2d01      	cmp	r5, #1
 800cfae:	68a3      	ldr	r3, [r4, #8]
 800cfb0:	d01c      	beq.n	800cfec <ucdr_serialize_endian_uint32_t+0xdc>
 800cfb2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800cfb6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800cfba:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800cfbe:	7018      	strb	r0, [r3, #0]
 800cfc0:	68a3      	ldr	r3, [r4, #8]
 800cfc2:	705a      	strb	r2, [r3, #1]
 800cfc4:	68a3      	ldr	r3, [r4, #8]
 800cfc6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800cfca:	7099      	strb	r1, [r3, #2]
 800cfcc:	68a3      	ldr	r3, [r4, #8]
 800cfce:	70da      	strb	r2, [r3, #3]
 800cfd0:	2104      	movs	r1, #4
 800cfd2:	68a2      	ldr	r2, [r4, #8]
 800cfd4:	6923      	ldr	r3, [r4, #16]
 800cfd6:	440a      	add	r2, r1
 800cfd8:	7561      	strb	r1, [r4, #21]
 800cfda:	440b      	add	r3, r1
 800cfdc:	60a2      	str	r2, [r4, #8]
 800cfde:	6123      	str	r3, [r4, #16]
 800cfe0:	7da0      	ldrb	r0, [r4, #22]
 800cfe2:	f080 0001 	eor.w	r0, r0, #1
 800cfe6:	b003      	add	sp, #12
 800cfe8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cfec:	9a01      	ldr	r2, [sp, #4]
 800cfee:	601a      	str	r2, [r3, #0]
 800cff0:	e7ee      	b.n	800cfd0 <ucdr_serialize_endian_uint32_t+0xc0>
 800cff2:	68a2      	ldr	r2, [r4, #8]
 800cff4:	6923      	ldr	r3, [r4, #16]
 800cff6:	7da0      	ldrb	r0, [r4, #22]
 800cff8:	1bd2      	subs	r2, r2, r7
 800cffa:	1bdb      	subs	r3, r3, r7
 800cffc:	f884 8015 	strb.w	r8, [r4, #21]
 800d000:	f080 0001 	eor.w	r0, r0, #1
 800d004:	60a2      	str	r2, [r4, #8]
 800d006:	6123      	str	r3, [r4, #16]
 800d008:	b003      	add	sp, #12
 800d00a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d00e:	68a3      	ldr	r3, [r4, #8]
 800d010:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d014:	701a      	strb	r2, [r3, #0]
 800d016:	68a3      	ldr	r3, [r4, #8]
 800d018:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d01c:	701a      	strb	r2, [r3, #0]
 800d01e:	68a3      	ldr	r3, [r4, #8]
 800d020:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d024:	701a      	strb	r2, [r3, #0]
 800d026:	e7ad      	b.n	800cf84 <ucdr_serialize_endian_uint32_t+0x74>
 800d028:	ad01      	add	r5, sp, #4
 800d02a:	463a      	mov	r2, r7
 800d02c:	4630      	mov	r0, r6
 800d02e:	4629      	mov	r1, r5
 800d030:	f00c fc5d 	bl	80198ee <memcpy>
 800d034:	464a      	mov	r2, r9
 800d036:	19e9      	adds	r1, r5, r7
 800d038:	68a0      	ldr	r0, [r4, #8]
 800d03a:	f00c fc58 	bl	80198ee <memcpy>
 800d03e:	e7a1      	b.n	800cf84 <ucdr_serialize_endian_uint32_t+0x74>

0800d040 <ucdr_deserialize_uint32_t>:
 800d040:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d044:	4604      	mov	r4, r0
 800d046:	460d      	mov	r5, r1
 800d048:	2104      	movs	r1, #4
 800d04a:	f000 ff29 	bl	800dea0 <ucdr_buffer_alignment>
 800d04e:	4601      	mov	r1, r0
 800d050:	4620      	mov	r0, r4
 800d052:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d056:	f000 ff6b 	bl	800df30 <ucdr_advance_buffer>
 800d05a:	2104      	movs	r1, #4
 800d05c:	4620      	mov	r0, r4
 800d05e:	f000 febf 	bl	800dde0 <ucdr_check_buffer_available_for>
 800d062:	2800      	cmp	r0, #0
 800d064:	d138      	bne.n	800d0d8 <ucdr_deserialize_uint32_t+0x98>
 800d066:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800d06a:	42b7      	cmp	r7, r6
 800d06c:	d92f      	bls.n	800d0ce <ucdr_deserialize_uint32_t+0x8e>
 800d06e:	6923      	ldr	r3, [r4, #16]
 800d070:	4620      	mov	r0, r4
 800d072:	60a7      	str	r7, [r4, #8]
 800d074:	1bbf      	subs	r7, r7, r6
 800d076:	443b      	add	r3, r7
 800d078:	f1c7 0904 	rsb	r9, r7, #4
 800d07c:	6123      	str	r3, [r4, #16]
 800d07e:	4649      	mov	r1, r9
 800d080:	f000 feba 	bl	800ddf8 <ucdr_check_final_buffer_behavior>
 800d084:	2800      	cmp	r0, #0
 800d086:	d046      	beq.n	800d116 <ucdr_deserialize_uint32_t+0xd6>
 800d088:	7d23      	ldrb	r3, [r4, #20]
 800d08a:	2b01      	cmp	r3, #1
 800d08c:	d05c      	beq.n	800d148 <ucdr_deserialize_uint32_t+0x108>
 800d08e:	78f3      	ldrb	r3, [r6, #3]
 800d090:	702b      	strb	r3, [r5, #0]
 800d092:	2f00      	cmp	r7, #0
 800d094:	d04c      	beq.n	800d130 <ucdr_deserialize_uint32_t+0xf0>
 800d096:	78b3      	ldrb	r3, [r6, #2]
 800d098:	2f01      	cmp	r7, #1
 800d09a:	706b      	strb	r3, [r5, #1]
 800d09c:	f105 0302 	add.w	r3, r5, #2
 800d0a0:	d04a      	beq.n	800d138 <ucdr_deserialize_uint32_t+0xf8>
 800d0a2:	7873      	ldrb	r3, [r6, #1]
 800d0a4:	2f02      	cmp	r7, #2
 800d0a6:	70ab      	strb	r3, [r5, #2]
 800d0a8:	f105 0303 	add.w	r3, r5, #3
 800d0ac:	d048      	beq.n	800d140 <ucdr_deserialize_uint32_t+0x100>
 800d0ae:	7833      	ldrb	r3, [r6, #0]
 800d0b0:	70eb      	strb	r3, [r5, #3]
 800d0b2:	6923      	ldr	r3, [r4, #16]
 800d0b4:	2104      	movs	r1, #4
 800d0b6:	68a2      	ldr	r2, [r4, #8]
 800d0b8:	3304      	adds	r3, #4
 800d0ba:	7da0      	ldrb	r0, [r4, #22]
 800d0bc:	444a      	add	r2, r9
 800d0be:	7561      	strb	r1, [r4, #21]
 800d0c0:	1bdb      	subs	r3, r3, r7
 800d0c2:	f080 0001 	eor.w	r0, r0, #1
 800d0c6:	60a2      	str	r2, [r4, #8]
 800d0c8:	6123      	str	r3, [r4, #16]
 800d0ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0ce:	2104      	movs	r1, #4
 800d0d0:	4620      	mov	r0, r4
 800d0d2:	f000 fe91 	bl	800ddf8 <ucdr_check_final_buffer_behavior>
 800d0d6:	b1b0      	cbz	r0, 800d106 <ucdr_deserialize_uint32_t+0xc6>
 800d0d8:	7d23      	ldrb	r3, [r4, #20]
 800d0da:	2b01      	cmp	r3, #1
 800d0dc:	68a3      	ldr	r3, [r4, #8]
 800d0de:	d017      	beq.n	800d110 <ucdr_deserialize_uint32_t+0xd0>
 800d0e0:	78db      	ldrb	r3, [r3, #3]
 800d0e2:	702b      	strb	r3, [r5, #0]
 800d0e4:	68a3      	ldr	r3, [r4, #8]
 800d0e6:	789b      	ldrb	r3, [r3, #2]
 800d0e8:	706b      	strb	r3, [r5, #1]
 800d0ea:	68a3      	ldr	r3, [r4, #8]
 800d0ec:	785b      	ldrb	r3, [r3, #1]
 800d0ee:	70ab      	strb	r3, [r5, #2]
 800d0f0:	68a3      	ldr	r3, [r4, #8]
 800d0f2:	781b      	ldrb	r3, [r3, #0]
 800d0f4:	70eb      	strb	r3, [r5, #3]
 800d0f6:	2104      	movs	r1, #4
 800d0f8:	68a2      	ldr	r2, [r4, #8]
 800d0fa:	6923      	ldr	r3, [r4, #16]
 800d0fc:	440a      	add	r2, r1
 800d0fe:	7561      	strb	r1, [r4, #21]
 800d100:	440b      	add	r3, r1
 800d102:	60a2      	str	r2, [r4, #8]
 800d104:	6123      	str	r3, [r4, #16]
 800d106:	7da0      	ldrb	r0, [r4, #22]
 800d108:	f080 0001 	eor.w	r0, r0, #1
 800d10c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	602b      	str	r3, [r5, #0]
 800d114:	e7ef      	b.n	800d0f6 <ucdr_deserialize_uint32_t+0xb6>
 800d116:	68a2      	ldr	r2, [r4, #8]
 800d118:	6923      	ldr	r3, [r4, #16]
 800d11a:	1bd2      	subs	r2, r2, r7
 800d11c:	7da0      	ldrb	r0, [r4, #22]
 800d11e:	1bdb      	subs	r3, r3, r7
 800d120:	f884 8015 	strb.w	r8, [r4, #21]
 800d124:	f080 0001 	eor.w	r0, r0, #1
 800d128:	60a2      	str	r2, [r4, #8]
 800d12a:	6123      	str	r3, [r4, #16]
 800d12c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d130:	68a3      	ldr	r3, [r4, #8]
 800d132:	789b      	ldrb	r3, [r3, #2]
 800d134:	706b      	strb	r3, [r5, #1]
 800d136:	1cab      	adds	r3, r5, #2
 800d138:	68a2      	ldr	r2, [r4, #8]
 800d13a:	7852      	ldrb	r2, [r2, #1]
 800d13c:	f803 2b01 	strb.w	r2, [r3], #1
 800d140:	68a2      	ldr	r2, [r4, #8]
 800d142:	7812      	ldrb	r2, [r2, #0]
 800d144:	701a      	strb	r2, [r3, #0]
 800d146:	e7b4      	b.n	800d0b2 <ucdr_deserialize_uint32_t+0x72>
 800d148:	4631      	mov	r1, r6
 800d14a:	463a      	mov	r2, r7
 800d14c:	4628      	mov	r0, r5
 800d14e:	f00c fbce 	bl	80198ee <memcpy>
 800d152:	464a      	mov	r2, r9
 800d154:	19e8      	adds	r0, r5, r7
 800d156:	68a1      	ldr	r1, [r4, #8]
 800d158:	f00c fbc9 	bl	80198ee <memcpy>
 800d15c:	e7a9      	b.n	800d0b2 <ucdr_deserialize_uint32_t+0x72>
 800d15e:	bf00      	nop

0800d160 <ucdr_deserialize_endian_uint32_t>:
 800d160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d164:	4604      	mov	r4, r0
 800d166:	460e      	mov	r6, r1
 800d168:	2104      	movs	r1, #4
 800d16a:	4615      	mov	r5, r2
 800d16c:	f000 fe98 	bl	800dea0 <ucdr_buffer_alignment>
 800d170:	4601      	mov	r1, r0
 800d172:	4620      	mov	r0, r4
 800d174:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d178:	f000 feda 	bl	800df30 <ucdr_advance_buffer>
 800d17c:	2104      	movs	r1, #4
 800d17e:	4620      	mov	r0, r4
 800d180:	f000 fe2e 	bl	800dde0 <ucdr_check_buffer_available_for>
 800d184:	2800      	cmp	r0, #0
 800d186:	d13c      	bne.n	800d202 <ucdr_deserialize_endian_uint32_t+0xa2>
 800d188:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800d18c:	42bb      	cmp	r3, r7
 800d18e:	d933      	bls.n	800d1f8 <ucdr_deserialize_endian_uint32_t+0x98>
 800d190:	eba3 0907 	sub.w	r9, r3, r7
 800d194:	60a3      	str	r3, [r4, #8]
 800d196:	6923      	ldr	r3, [r4, #16]
 800d198:	4620      	mov	r0, r4
 800d19a:	f1c9 0a04 	rsb	sl, r9, #4
 800d19e:	444b      	add	r3, r9
 800d1a0:	4651      	mov	r1, sl
 800d1a2:	6123      	str	r3, [r4, #16]
 800d1a4:	f000 fe28 	bl	800ddf8 <ucdr_check_final_buffer_behavior>
 800d1a8:	2800      	cmp	r0, #0
 800d1aa:	d048      	beq.n	800d23e <ucdr_deserialize_endian_uint32_t+0xde>
 800d1ac:	2e01      	cmp	r6, #1
 800d1ae:	d061      	beq.n	800d274 <ucdr_deserialize_endian_uint32_t+0x114>
 800d1b0:	78fb      	ldrb	r3, [r7, #3]
 800d1b2:	702b      	strb	r3, [r5, #0]
 800d1b4:	f1b9 0f00 	cmp.w	r9, #0
 800d1b8:	d050      	beq.n	800d25c <ucdr_deserialize_endian_uint32_t+0xfc>
 800d1ba:	78bb      	ldrb	r3, [r7, #2]
 800d1bc:	f1b9 0f01 	cmp.w	r9, #1
 800d1c0:	706b      	strb	r3, [r5, #1]
 800d1c2:	f105 0302 	add.w	r3, r5, #2
 800d1c6:	d04d      	beq.n	800d264 <ucdr_deserialize_endian_uint32_t+0x104>
 800d1c8:	787b      	ldrb	r3, [r7, #1]
 800d1ca:	f1b9 0f02 	cmp.w	r9, #2
 800d1ce:	70ab      	strb	r3, [r5, #2]
 800d1d0:	f105 0303 	add.w	r3, r5, #3
 800d1d4:	d04a      	beq.n	800d26c <ucdr_deserialize_endian_uint32_t+0x10c>
 800d1d6:	783b      	ldrb	r3, [r7, #0]
 800d1d8:	70eb      	strb	r3, [r5, #3]
 800d1da:	6923      	ldr	r3, [r4, #16]
 800d1dc:	2104      	movs	r1, #4
 800d1de:	68a2      	ldr	r2, [r4, #8]
 800d1e0:	3304      	adds	r3, #4
 800d1e2:	7da0      	ldrb	r0, [r4, #22]
 800d1e4:	4452      	add	r2, sl
 800d1e6:	7561      	strb	r1, [r4, #21]
 800d1e8:	eba3 0309 	sub.w	r3, r3, r9
 800d1ec:	f080 0001 	eor.w	r0, r0, #1
 800d1f0:	60a2      	str	r2, [r4, #8]
 800d1f2:	6123      	str	r3, [r4, #16]
 800d1f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1f8:	2104      	movs	r1, #4
 800d1fa:	4620      	mov	r0, r4
 800d1fc:	f000 fdfc 	bl	800ddf8 <ucdr_check_final_buffer_behavior>
 800d200:	b1a8      	cbz	r0, 800d22e <ucdr_deserialize_endian_uint32_t+0xce>
 800d202:	2e01      	cmp	r6, #1
 800d204:	68a3      	ldr	r3, [r4, #8]
 800d206:	d017      	beq.n	800d238 <ucdr_deserialize_endian_uint32_t+0xd8>
 800d208:	78db      	ldrb	r3, [r3, #3]
 800d20a:	702b      	strb	r3, [r5, #0]
 800d20c:	68a3      	ldr	r3, [r4, #8]
 800d20e:	789b      	ldrb	r3, [r3, #2]
 800d210:	706b      	strb	r3, [r5, #1]
 800d212:	68a3      	ldr	r3, [r4, #8]
 800d214:	785b      	ldrb	r3, [r3, #1]
 800d216:	70ab      	strb	r3, [r5, #2]
 800d218:	68a3      	ldr	r3, [r4, #8]
 800d21a:	781b      	ldrb	r3, [r3, #0]
 800d21c:	70eb      	strb	r3, [r5, #3]
 800d21e:	2104      	movs	r1, #4
 800d220:	68a2      	ldr	r2, [r4, #8]
 800d222:	6923      	ldr	r3, [r4, #16]
 800d224:	440a      	add	r2, r1
 800d226:	7561      	strb	r1, [r4, #21]
 800d228:	440b      	add	r3, r1
 800d22a:	60a2      	str	r2, [r4, #8]
 800d22c:	6123      	str	r3, [r4, #16]
 800d22e:	7da0      	ldrb	r0, [r4, #22]
 800d230:	f080 0001 	eor.w	r0, r0, #1
 800d234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	602b      	str	r3, [r5, #0]
 800d23c:	e7ef      	b.n	800d21e <ucdr_deserialize_endian_uint32_t+0xbe>
 800d23e:	68a2      	ldr	r2, [r4, #8]
 800d240:	6923      	ldr	r3, [r4, #16]
 800d242:	eba2 0209 	sub.w	r2, r2, r9
 800d246:	7da0      	ldrb	r0, [r4, #22]
 800d248:	eba3 0309 	sub.w	r3, r3, r9
 800d24c:	f884 8015 	strb.w	r8, [r4, #21]
 800d250:	f080 0001 	eor.w	r0, r0, #1
 800d254:	60a2      	str	r2, [r4, #8]
 800d256:	6123      	str	r3, [r4, #16]
 800d258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d25c:	68a3      	ldr	r3, [r4, #8]
 800d25e:	789b      	ldrb	r3, [r3, #2]
 800d260:	706b      	strb	r3, [r5, #1]
 800d262:	1cab      	adds	r3, r5, #2
 800d264:	68a2      	ldr	r2, [r4, #8]
 800d266:	7852      	ldrb	r2, [r2, #1]
 800d268:	f803 2b01 	strb.w	r2, [r3], #1
 800d26c:	68a2      	ldr	r2, [r4, #8]
 800d26e:	7812      	ldrb	r2, [r2, #0]
 800d270:	701a      	strb	r2, [r3, #0]
 800d272:	e7b2      	b.n	800d1da <ucdr_deserialize_endian_uint32_t+0x7a>
 800d274:	4639      	mov	r1, r7
 800d276:	464a      	mov	r2, r9
 800d278:	4628      	mov	r0, r5
 800d27a:	f00c fb38 	bl	80198ee <memcpy>
 800d27e:	4652      	mov	r2, sl
 800d280:	eb05 0009 	add.w	r0, r5, r9
 800d284:	68a1      	ldr	r1, [r4, #8]
 800d286:	f00c fb32 	bl	80198ee <memcpy>
 800d28a:	e7a6      	b.n	800d1da <ucdr_deserialize_endian_uint32_t+0x7a>

0800d28c <ucdr_serialize_uint64_t>:
 800d28c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d290:	4604      	mov	r4, r0
 800d292:	b082      	sub	sp, #8
 800d294:	2108      	movs	r1, #8
 800d296:	e9cd 2300 	strd	r2, r3, [sp]
 800d29a:	f000 fe01 	bl	800dea0 <ucdr_buffer_alignment>
 800d29e:	4601      	mov	r1, r0
 800d2a0:	4620      	mov	r0, r4
 800d2a2:	7d67      	ldrb	r7, [r4, #21]
 800d2a4:	f000 fe44 	bl	800df30 <ucdr_advance_buffer>
 800d2a8:	2108      	movs	r1, #8
 800d2aa:	4620      	mov	r0, r4
 800d2ac:	f000 fd98 	bl	800dde0 <ucdr_check_buffer_available_for>
 800d2b0:	2800      	cmp	r0, #0
 800d2b2:	d14e      	bne.n	800d352 <ucdr_serialize_uint64_t+0xc6>
 800d2b4:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d2b8:	42ab      	cmp	r3, r5
 800d2ba:	d945      	bls.n	800d348 <ucdr_serialize_uint64_t+0xbc>
 800d2bc:	1b5e      	subs	r6, r3, r5
 800d2be:	60a3      	str	r3, [r4, #8]
 800d2c0:	6923      	ldr	r3, [r4, #16]
 800d2c2:	4620      	mov	r0, r4
 800d2c4:	f1c6 0808 	rsb	r8, r6, #8
 800d2c8:	4433      	add	r3, r6
 800d2ca:	4641      	mov	r1, r8
 800d2cc:	6123      	str	r3, [r4, #16]
 800d2ce:	f000 fd93 	bl	800ddf8 <ucdr_check_final_buffer_behavior>
 800d2d2:	2800      	cmp	r0, #0
 800d2d4:	d074      	beq.n	800d3c0 <ucdr_serialize_uint64_t+0x134>
 800d2d6:	7d23      	ldrb	r3, [r4, #20]
 800d2d8:	2b01      	cmp	r3, #1
 800d2da:	f000 809b 	beq.w	800d414 <ucdr_serialize_uint64_t+0x188>
 800d2de:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d2e2:	702b      	strb	r3, [r5, #0]
 800d2e4:	2e00      	cmp	r6, #0
 800d2e6:	d078      	beq.n	800d3da <ucdr_serialize_uint64_t+0x14e>
 800d2e8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d2ec:	2e01      	cmp	r6, #1
 800d2ee:	706b      	strb	r3, [r5, #1]
 800d2f0:	d077      	beq.n	800d3e2 <ucdr_serialize_uint64_t+0x156>
 800d2f2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d2f6:	2e02      	cmp	r6, #2
 800d2f8:	70ab      	strb	r3, [r5, #2]
 800d2fa:	d076      	beq.n	800d3ea <ucdr_serialize_uint64_t+0x15e>
 800d2fc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d300:	2e03      	cmp	r6, #3
 800d302:	70eb      	strb	r3, [r5, #3]
 800d304:	d075      	beq.n	800d3f2 <ucdr_serialize_uint64_t+0x166>
 800d306:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800d30a:	2e04      	cmp	r6, #4
 800d30c:	712b      	strb	r3, [r5, #4]
 800d30e:	d074      	beq.n	800d3fa <ucdr_serialize_uint64_t+0x16e>
 800d310:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800d314:	2e05      	cmp	r6, #5
 800d316:	716b      	strb	r3, [r5, #5]
 800d318:	d073      	beq.n	800d402 <ucdr_serialize_uint64_t+0x176>
 800d31a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800d31e:	2e06      	cmp	r6, #6
 800d320:	71ab      	strb	r3, [r5, #6]
 800d322:	d072      	beq.n	800d40a <ucdr_serialize_uint64_t+0x17e>
 800d324:	f89d 3000 	ldrb.w	r3, [sp]
 800d328:	71eb      	strb	r3, [r5, #7]
 800d32a:	6923      	ldr	r3, [r4, #16]
 800d32c:	2108      	movs	r1, #8
 800d32e:	68a2      	ldr	r2, [r4, #8]
 800d330:	3308      	adds	r3, #8
 800d332:	7da0      	ldrb	r0, [r4, #22]
 800d334:	4442      	add	r2, r8
 800d336:	7561      	strb	r1, [r4, #21]
 800d338:	1b9e      	subs	r6, r3, r6
 800d33a:	f080 0001 	eor.w	r0, r0, #1
 800d33e:	60a2      	str	r2, [r4, #8]
 800d340:	6126      	str	r6, [r4, #16]
 800d342:	b002      	add	sp, #8
 800d344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d348:	2108      	movs	r1, #8
 800d34a:	4620      	mov	r0, r4
 800d34c:	f000 fd54 	bl	800ddf8 <ucdr_check_final_buffer_behavior>
 800d350:	b350      	cbz	r0, 800d3a8 <ucdr_serialize_uint64_t+0x11c>
 800d352:	7d23      	ldrb	r3, [r4, #20]
 800d354:	2b01      	cmp	r3, #1
 800d356:	d02d      	beq.n	800d3b4 <ucdr_serialize_uint64_t+0x128>
 800d358:	68a3      	ldr	r3, [r4, #8]
 800d35a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800d35e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d362:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800d366:	7018      	strb	r0, [r3, #0]
 800d368:	68a3      	ldr	r3, [r4, #8]
 800d36a:	705a      	strb	r2, [r3, #1]
 800d36c:	68a3      	ldr	r3, [r4, #8]
 800d36e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d372:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800d376:	7099      	strb	r1, [r3, #2]
 800d378:	68a3      	ldr	r3, [r4, #8]
 800d37a:	70da      	strb	r2, [r3, #3]
 800d37c:	68a3      	ldr	r3, [r4, #8]
 800d37e:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800d382:	f89d 1001 	ldrb.w	r1, [sp, #1]
 800d386:	7118      	strb	r0, [r3, #4]
 800d388:	68a3      	ldr	r3, [r4, #8]
 800d38a:	715a      	strb	r2, [r3, #5]
 800d38c:	68a3      	ldr	r3, [r4, #8]
 800d38e:	f89d 2000 	ldrb.w	r2, [sp]
 800d392:	7199      	strb	r1, [r3, #6]
 800d394:	68a3      	ldr	r3, [r4, #8]
 800d396:	71da      	strb	r2, [r3, #7]
 800d398:	2108      	movs	r1, #8
 800d39a:	68a2      	ldr	r2, [r4, #8]
 800d39c:	6923      	ldr	r3, [r4, #16]
 800d39e:	440a      	add	r2, r1
 800d3a0:	7561      	strb	r1, [r4, #21]
 800d3a2:	440b      	add	r3, r1
 800d3a4:	60a2      	str	r2, [r4, #8]
 800d3a6:	6123      	str	r3, [r4, #16]
 800d3a8:	7da0      	ldrb	r0, [r4, #22]
 800d3aa:	f080 0001 	eor.w	r0, r0, #1
 800d3ae:	b002      	add	sp, #8
 800d3b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3b4:	466b      	mov	r3, sp
 800d3b6:	68a2      	ldr	r2, [r4, #8]
 800d3b8:	cb03      	ldmia	r3!, {r0, r1}
 800d3ba:	6010      	str	r0, [r2, #0]
 800d3bc:	6051      	str	r1, [r2, #4]
 800d3be:	e7eb      	b.n	800d398 <ucdr_serialize_uint64_t+0x10c>
 800d3c0:	68a2      	ldr	r2, [r4, #8]
 800d3c2:	6923      	ldr	r3, [r4, #16]
 800d3c4:	7da0      	ldrb	r0, [r4, #22]
 800d3c6:	1b92      	subs	r2, r2, r6
 800d3c8:	1b9b      	subs	r3, r3, r6
 800d3ca:	7567      	strb	r7, [r4, #21]
 800d3cc:	f080 0001 	eor.w	r0, r0, #1
 800d3d0:	60a2      	str	r2, [r4, #8]
 800d3d2:	6123      	str	r3, [r4, #16]
 800d3d4:	b002      	add	sp, #8
 800d3d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3da:	68a3      	ldr	r3, [r4, #8]
 800d3dc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d3e0:	701a      	strb	r2, [r3, #0]
 800d3e2:	68a3      	ldr	r3, [r4, #8]
 800d3e4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d3e8:	701a      	strb	r2, [r3, #0]
 800d3ea:	68a3      	ldr	r3, [r4, #8]
 800d3ec:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d3f0:	701a      	strb	r2, [r3, #0]
 800d3f2:	68a3      	ldr	r3, [r4, #8]
 800d3f4:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800d3f8:	701a      	strb	r2, [r3, #0]
 800d3fa:	68a3      	ldr	r3, [r4, #8]
 800d3fc:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800d400:	701a      	strb	r2, [r3, #0]
 800d402:	68a3      	ldr	r3, [r4, #8]
 800d404:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800d408:	701a      	strb	r2, [r3, #0]
 800d40a:	68a3      	ldr	r3, [r4, #8]
 800d40c:	f89d 2000 	ldrb.w	r2, [sp]
 800d410:	701a      	strb	r2, [r3, #0]
 800d412:	e78a      	b.n	800d32a <ucdr_serialize_uint64_t+0x9e>
 800d414:	4628      	mov	r0, r5
 800d416:	466d      	mov	r5, sp
 800d418:	4632      	mov	r2, r6
 800d41a:	4629      	mov	r1, r5
 800d41c:	f00c fa67 	bl	80198ee <memcpy>
 800d420:	4642      	mov	r2, r8
 800d422:	19a9      	adds	r1, r5, r6
 800d424:	68a0      	ldr	r0, [r4, #8]
 800d426:	f00c fa62 	bl	80198ee <memcpy>
 800d42a:	e77e      	b.n	800d32a <ucdr_serialize_uint64_t+0x9e>

0800d42c <ucdr_serialize_int16_t>:
 800d42c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d430:	460b      	mov	r3, r1
 800d432:	b082      	sub	sp, #8
 800d434:	4604      	mov	r4, r0
 800d436:	2102      	movs	r1, #2
 800d438:	f8ad 3006 	strh.w	r3, [sp, #6]
 800d43c:	f000 fd30 	bl	800dea0 <ucdr_buffer_alignment>
 800d440:	4601      	mov	r1, r0
 800d442:	4620      	mov	r0, r4
 800d444:	7d67      	ldrb	r7, [r4, #21]
 800d446:	f000 fd73 	bl	800df30 <ucdr_advance_buffer>
 800d44a:	2102      	movs	r1, #2
 800d44c:	4620      	mov	r0, r4
 800d44e:	f000 fcc7 	bl	800dde0 <ucdr_check_buffer_available_for>
 800d452:	bb78      	cbnz	r0, 800d4b4 <ucdr_serialize_int16_t+0x88>
 800d454:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d458:	42ab      	cmp	r3, r5
 800d45a:	d926      	bls.n	800d4aa <ucdr_serialize_int16_t+0x7e>
 800d45c:	1b5e      	subs	r6, r3, r5
 800d45e:	60a3      	str	r3, [r4, #8]
 800d460:	6923      	ldr	r3, [r4, #16]
 800d462:	4620      	mov	r0, r4
 800d464:	f1c6 0802 	rsb	r8, r6, #2
 800d468:	4433      	add	r3, r6
 800d46a:	4641      	mov	r1, r8
 800d46c:	6123      	str	r3, [r4, #16]
 800d46e:	f000 fcc3 	bl	800ddf8 <ucdr_check_final_buffer_behavior>
 800d472:	2800      	cmp	r0, #0
 800d474:	d03b      	beq.n	800d4ee <ucdr_serialize_int16_t+0xc2>
 800d476:	7d23      	ldrb	r3, [r4, #20]
 800d478:	2b01      	cmp	r3, #1
 800d47a:	d04a      	beq.n	800d512 <ucdr_serialize_int16_t+0xe6>
 800d47c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d480:	702b      	strb	r3, [r5, #0]
 800d482:	2e00      	cmp	r6, #0
 800d484:	d040      	beq.n	800d508 <ucdr_serialize_int16_t+0xdc>
 800d486:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d48a:	706b      	strb	r3, [r5, #1]
 800d48c:	6923      	ldr	r3, [r4, #16]
 800d48e:	2102      	movs	r1, #2
 800d490:	68a2      	ldr	r2, [r4, #8]
 800d492:	3302      	adds	r3, #2
 800d494:	7da0      	ldrb	r0, [r4, #22]
 800d496:	4442      	add	r2, r8
 800d498:	7561      	strb	r1, [r4, #21]
 800d49a:	1b9e      	subs	r6, r3, r6
 800d49c:	f080 0001 	eor.w	r0, r0, #1
 800d4a0:	60a2      	str	r2, [r4, #8]
 800d4a2:	6126      	str	r6, [r4, #16]
 800d4a4:	b002      	add	sp, #8
 800d4a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4aa:	2102      	movs	r1, #2
 800d4ac:	4620      	mov	r0, r4
 800d4ae:	f000 fca3 	bl	800ddf8 <ucdr_check_final_buffer_behavior>
 800d4b2:	b190      	cbz	r0, 800d4da <ucdr_serialize_int16_t+0xae>
 800d4b4:	7d23      	ldrb	r3, [r4, #20]
 800d4b6:	2b01      	cmp	r3, #1
 800d4b8:	68a3      	ldr	r3, [r4, #8]
 800d4ba:	d014      	beq.n	800d4e6 <ucdr_serialize_int16_t+0xba>
 800d4bc:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800d4c0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d4c4:	7019      	strb	r1, [r3, #0]
 800d4c6:	68a3      	ldr	r3, [r4, #8]
 800d4c8:	705a      	strb	r2, [r3, #1]
 800d4ca:	2102      	movs	r1, #2
 800d4cc:	68a2      	ldr	r2, [r4, #8]
 800d4ce:	6923      	ldr	r3, [r4, #16]
 800d4d0:	440a      	add	r2, r1
 800d4d2:	7561      	strb	r1, [r4, #21]
 800d4d4:	440b      	add	r3, r1
 800d4d6:	60a2      	str	r2, [r4, #8]
 800d4d8:	6123      	str	r3, [r4, #16]
 800d4da:	7da0      	ldrb	r0, [r4, #22]
 800d4dc:	f080 0001 	eor.w	r0, r0, #1
 800d4e0:	b002      	add	sp, #8
 800d4e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4e6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d4ea:	801a      	strh	r2, [r3, #0]
 800d4ec:	e7ed      	b.n	800d4ca <ucdr_serialize_int16_t+0x9e>
 800d4ee:	68a2      	ldr	r2, [r4, #8]
 800d4f0:	6923      	ldr	r3, [r4, #16]
 800d4f2:	7da0      	ldrb	r0, [r4, #22]
 800d4f4:	1b92      	subs	r2, r2, r6
 800d4f6:	1b9b      	subs	r3, r3, r6
 800d4f8:	7567      	strb	r7, [r4, #21]
 800d4fa:	f080 0001 	eor.w	r0, r0, #1
 800d4fe:	60a2      	str	r2, [r4, #8]
 800d500:	6123      	str	r3, [r4, #16]
 800d502:	b002      	add	sp, #8
 800d504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d508:	68a3      	ldr	r3, [r4, #8]
 800d50a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d50e:	701a      	strb	r2, [r3, #0]
 800d510:	e7bc      	b.n	800d48c <ucdr_serialize_int16_t+0x60>
 800d512:	4628      	mov	r0, r5
 800d514:	f10d 0506 	add.w	r5, sp, #6
 800d518:	4632      	mov	r2, r6
 800d51a:	4629      	mov	r1, r5
 800d51c:	f00c f9e7 	bl	80198ee <memcpy>
 800d520:	4642      	mov	r2, r8
 800d522:	19a9      	adds	r1, r5, r6
 800d524:	68a0      	ldr	r0, [r4, #8]
 800d526:	f00c f9e2 	bl	80198ee <memcpy>
 800d52a:	e7af      	b.n	800d48c <ucdr_serialize_int16_t+0x60>

0800d52c <ucdr_deserialize_int16_t>:
 800d52c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d530:	4604      	mov	r4, r0
 800d532:	460d      	mov	r5, r1
 800d534:	2102      	movs	r1, #2
 800d536:	f000 fcb3 	bl	800dea0 <ucdr_buffer_alignment>
 800d53a:	4601      	mov	r1, r0
 800d53c:	4620      	mov	r0, r4
 800d53e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d542:	f000 fcf5 	bl	800df30 <ucdr_advance_buffer>
 800d546:	2102      	movs	r1, #2
 800d548:	4620      	mov	r0, r4
 800d54a:	f000 fc49 	bl	800dde0 <ucdr_check_buffer_available_for>
 800d54e:	bb60      	cbnz	r0, 800d5aa <ucdr_deserialize_int16_t+0x7e>
 800d550:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800d554:	42be      	cmp	r6, r7
 800d556:	d923      	bls.n	800d5a0 <ucdr_deserialize_int16_t+0x74>
 800d558:	6923      	ldr	r3, [r4, #16]
 800d55a:	4620      	mov	r0, r4
 800d55c:	60a6      	str	r6, [r4, #8]
 800d55e:	1bf6      	subs	r6, r6, r7
 800d560:	4433      	add	r3, r6
 800d562:	f1c6 0902 	rsb	r9, r6, #2
 800d566:	6123      	str	r3, [r4, #16]
 800d568:	4649      	mov	r1, r9
 800d56a:	f000 fc45 	bl	800ddf8 <ucdr_check_final_buffer_behavior>
 800d56e:	2800      	cmp	r0, #0
 800d570:	d034      	beq.n	800d5dc <ucdr_deserialize_int16_t+0xb0>
 800d572:	7d23      	ldrb	r3, [r4, #20]
 800d574:	2b01      	cmp	r3, #1
 800d576:	d042      	beq.n	800d5fe <ucdr_deserialize_int16_t+0xd2>
 800d578:	787b      	ldrb	r3, [r7, #1]
 800d57a:	702b      	strb	r3, [r5, #0]
 800d57c:	2e00      	cmp	r6, #0
 800d57e:	d03a      	beq.n	800d5f6 <ucdr_deserialize_int16_t+0xca>
 800d580:	783b      	ldrb	r3, [r7, #0]
 800d582:	706b      	strb	r3, [r5, #1]
 800d584:	6923      	ldr	r3, [r4, #16]
 800d586:	2102      	movs	r1, #2
 800d588:	68a2      	ldr	r2, [r4, #8]
 800d58a:	3302      	adds	r3, #2
 800d58c:	7da0      	ldrb	r0, [r4, #22]
 800d58e:	444a      	add	r2, r9
 800d590:	7561      	strb	r1, [r4, #21]
 800d592:	1b9b      	subs	r3, r3, r6
 800d594:	f080 0001 	eor.w	r0, r0, #1
 800d598:	60a2      	str	r2, [r4, #8]
 800d59a:	6123      	str	r3, [r4, #16]
 800d59c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d5a0:	2102      	movs	r1, #2
 800d5a2:	4620      	mov	r0, r4
 800d5a4:	f000 fc28 	bl	800ddf8 <ucdr_check_final_buffer_behavior>
 800d5a8:	b180      	cbz	r0, 800d5cc <ucdr_deserialize_int16_t+0xa0>
 800d5aa:	7d23      	ldrb	r3, [r4, #20]
 800d5ac:	2b01      	cmp	r3, #1
 800d5ae:	68a3      	ldr	r3, [r4, #8]
 800d5b0:	d011      	beq.n	800d5d6 <ucdr_deserialize_int16_t+0xaa>
 800d5b2:	785b      	ldrb	r3, [r3, #1]
 800d5b4:	702b      	strb	r3, [r5, #0]
 800d5b6:	68a3      	ldr	r3, [r4, #8]
 800d5b8:	781b      	ldrb	r3, [r3, #0]
 800d5ba:	706b      	strb	r3, [r5, #1]
 800d5bc:	2102      	movs	r1, #2
 800d5be:	68a2      	ldr	r2, [r4, #8]
 800d5c0:	6923      	ldr	r3, [r4, #16]
 800d5c2:	440a      	add	r2, r1
 800d5c4:	7561      	strb	r1, [r4, #21]
 800d5c6:	440b      	add	r3, r1
 800d5c8:	60a2      	str	r2, [r4, #8]
 800d5ca:	6123      	str	r3, [r4, #16]
 800d5cc:	7da0      	ldrb	r0, [r4, #22]
 800d5ce:	f080 0001 	eor.w	r0, r0, #1
 800d5d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d5d6:	881b      	ldrh	r3, [r3, #0]
 800d5d8:	802b      	strh	r3, [r5, #0]
 800d5da:	e7ef      	b.n	800d5bc <ucdr_deserialize_int16_t+0x90>
 800d5dc:	68a2      	ldr	r2, [r4, #8]
 800d5de:	6923      	ldr	r3, [r4, #16]
 800d5e0:	1b92      	subs	r2, r2, r6
 800d5e2:	7da0      	ldrb	r0, [r4, #22]
 800d5e4:	1b9b      	subs	r3, r3, r6
 800d5e6:	f884 8015 	strb.w	r8, [r4, #21]
 800d5ea:	f080 0001 	eor.w	r0, r0, #1
 800d5ee:	60a2      	str	r2, [r4, #8]
 800d5f0:	6123      	str	r3, [r4, #16]
 800d5f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d5f6:	68a3      	ldr	r3, [r4, #8]
 800d5f8:	781b      	ldrb	r3, [r3, #0]
 800d5fa:	706b      	strb	r3, [r5, #1]
 800d5fc:	e7c2      	b.n	800d584 <ucdr_deserialize_int16_t+0x58>
 800d5fe:	4639      	mov	r1, r7
 800d600:	4632      	mov	r2, r6
 800d602:	4628      	mov	r0, r5
 800d604:	f00c f973 	bl	80198ee <memcpy>
 800d608:	464a      	mov	r2, r9
 800d60a:	19a8      	adds	r0, r5, r6
 800d60c:	68a1      	ldr	r1, [r4, #8]
 800d60e:	f00c f96e 	bl	80198ee <memcpy>
 800d612:	e7b7      	b.n	800d584 <ucdr_deserialize_int16_t+0x58>

0800d614 <ucdr_serialize_int32_t>:
 800d614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d618:	b082      	sub	sp, #8
 800d61a:	4604      	mov	r4, r0
 800d61c:	9101      	str	r1, [sp, #4]
 800d61e:	2104      	movs	r1, #4
 800d620:	f000 fc3e 	bl	800dea0 <ucdr_buffer_alignment>
 800d624:	4601      	mov	r1, r0
 800d626:	4620      	mov	r0, r4
 800d628:	7d67      	ldrb	r7, [r4, #21]
 800d62a:	f000 fc81 	bl	800df30 <ucdr_advance_buffer>
 800d62e:	2104      	movs	r1, #4
 800d630:	4620      	mov	r0, r4
 800d632:	f000 fbd5 	bl	800dde0 <ucdr_check_buffer_available_for>
 800d636:	2800      	cmp	r0, #0
 800d638:	d139      	bne.n	800d6ae <ucdr_serialize_int32_t+0x9a>
 800d63a:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d63e:	42ab      	cmp	r3, r5
 800d640:	d930      	bls.n	800d6a4 <ucdr_serialize_int32_t+0x90>
 800d642:	1b5e      	subs	r6, r3, r5
 800d644:	60a3      	str	r3, [r4, #8]
 800d646:	6923      	ldr	r3, [r4, #16]
 800d648:	4620      	mov	r0, r4
 800d64a:	f1c6 0804 	rsb	r8, r6, #4
 800d64e:	4433      	add	r3, r6
 800d650:	4641      	mov	r1, r8
 800d652:	6123      	str	r3, [r4, #16]
 800d654:	f000 fbd0 	bl	800ddf8 <ucdr_check_final_buffer_behavior>
 800d658:	2800      	cmp	r0, #0
 800d65a:	d04c      	beq.n	800d6f6 <ucdr_serialize_int32_t+0xe2>
 800d65c:	7d23      	ldrb	r3, [r4, #20]
 800d65e:	2b01      	cmp	r3, #1
 800d660:	d063      	beq.n	800d72a <ucdr_serialize_int32_t+0x116>
 800d662:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d666:	702b      	strb	r3, [r5, #0]
 800d668:	2e00      	cmp	r6, #0
 800d66a:	d051      	beq.n	800d710 <ucdr_serialize_int32_t+0xfc>
 800d66c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d670:	2e01      	cmp	r6, #1
 800d672:	706b      	strb	r3, [r5, #1]
 800d674:	d050      	beq.n	800d718 <ucdr_serialize_int32_t+0x104>
 800d676:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d67a:	2e02      	cmp	r6, #2
 800d67c:	70ab      	strb	r3, [r5, #2]
 800d67e:	d04f      	beq.n	800d720 <ucdr_serialize_int32_t+0x10c>
 800d680:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d684:	70eb      	strb	r3, [r5, #3]
 800d686:	6923      	ldr	r3, [r4, #16]
 800d688:	2104      	movs	r1, #4
 800d68a:	68a2      	ldr	r2, [r4, #8]
 800d68c:	3304      	adds	r3, #4
 800d68e:	7da0      	ldrb	r0, [r4, #22]
 800d690:	4442      	add	r2, r8
 800d692:	7561      	strb	r1, [r4, #21]
 800d694:	1b9e      	subs	r6, r3, r6
 800d696:	f080 0001 	eor.w	r0, r0, #1
 800d69a:	60a2      	str	r2, [r4, #8]
 800d69c:	6126      	str	r6, [r4, #16]
 800d69e:	b002      	add	sp, #8
 800d6a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6a4:	2104      	movs	r1, #4
 800d6a6:	4620      	mov	r0, r4
 800d6a8:	f000 fba6 	bl	800ddf8 <ucdr_check_final_buffer_behavior>
 800d6ac:	b1d0      	cbz	r0, 800d6e4 <ucdr_serialize_int32_t+0xd0>
 800d6ae:	7d23      	ldrb	r3, [r4, #20]
 800d6b0:	2b01      	cmp	r3, #1
 800d6b2:	68a3      	ldr	r3, [r4, #8]
 800d6b4:	d01c      	beq.n	800d6f0 <ucdr_serialize_int32_t+0xdc>
 800d6b6:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800d6ba:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d6be:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800d6c2:	7018      	strb	r0, [r3, #0]
 800d6c4:	68a3      	ldr	r3, [r4, #8]
 800d6c6:	705a      	strb	r2, [r3, #1]
 800d6c8:	68a3      	ldr	r3, [r4, #8]
 800d6ca:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d6ce:	7099      	strb	r1, [r3, #2]
 800d6d0:	68a3      	ldr	r3, [r4, #8]
 800d6d2:	70da      	strb	r2, [r3, #3]
 800d6d4:	2104      	movs	r1, #4
 800d6d6:	68a2      	ldr	r2, [r4, #8]
 800d6d8:	6923      	ldr	r3, [r4, #16]
 800d6da:	440a      	add	r2, r1
 800d6dc:	7561      	strb	r1, [r4, #21]
 800d6de:	440b      	add	r3, r1
 800d6e0:	60a2      	str	r2, [r4, #8]
 800d6e2:	6123      	str	r3, [r4, #16]
 800d6e4:	7da0      	ldrb	r0, [r4, #22]
 800d6e6:	f080 0001 	eor.w	r0, r0, #1
 800d6ea:	b002      	add	sp, #8
 800d6ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6f0:	9a01      	ldr	r2, [sp, #4]
 800d6f2:	601a      	str	r2, [r3, #0]
 800d6f4:	e7ee      	b.n	800d6d4 <ucdr_serialize_int32_t+0xc0>
 800d6f6:	68a2      	ldr	r2, [r4, #8]
 800d6f8:	6923      	ldr	r3, [r4, #16]
 800d6fa:	7da0      	ldrb	r0, [r4, #22]
 800d6fc:	1b92      	subs	r2, r2, r6
 800d6fe:	1b9b      	subs	r3, r3, r6
 800d700:	7567      	strb	r7, [r4, #21]
 800d702:	f080 0001 	eor.w	r0, r0, #1
 800d706:	60a2      	str	r2, [r4, #8]
 800d708:	6123      	str	r3, [r4, #16]
 800d70a:	b002      	add	sp, #8
 800d70c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d710:	68a3      	ldr	r3, [r4, #8]
 800d712:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d716:	701a      	strb	r2, [r3, #0]
 800d718:	68a3      	ldr	r3, [r4, #8]
 800d71a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d71e:	701a      	strb	r2, [r3, #0]
 800d720:	68a3      	ldr	r3, [r4, #8]
 800d722:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d726:	701a      	strb	r2, [r3, #0]
 800d728:	e7ad      	b.n	800d686 <ucdr_serialize_int32_t+0x72>
 800d72a:	4628      	mov	r0, r5
 800d72c:	ad01      	add	r5, sp, #4
 800d72e:	4632      	mov	r2, r6
 800d730:	4629      	mov	r1, r5
 800d732:	f00c f8dc 	bl	80198ee <memcpy>
 800d736:	4642      	mov	r2, r8
 800d738:	19a9      	adds	r1, r5, r6
 800d73a:	68a0      	ldr	r0, [r4, #8]
 800d73c:	f00c f8d7 	bl	80198ee <memcpy>
 800d740:	e7a1      	b.n	800d686 <ucdr_serialize_int32_t+0x72>
 800d742:	bf00      	nop

0800d744 <ucdr_deserialize_int32_t>:
 800d744:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d748:	4604      	mov	r4, r0
 800d74a:	460d      	mov	r5, r1
 800d74c:	2104      	movs	r1, #4
 800d74e:	f000 fba7 	bl	800dea0 <ucdr_buffer_alignment>
 800d752:	4601      	mov	r1, r0
 800d754:	4620      	mov	r0, r4
 800d756:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d75a:	f000 fbe9 	bl	800df30 <ucdr_advance_buffer>
 800d75e:	2104      	movs	r1, #4
 800d760:	4620      	mov	r0, r4
 800d762:	f000 fb3d 	bl	800dde0 <ucdr_check_buffer_available_for>
 800d766:	2800      	cmp	r0, #0
 800d768:	d138      	bne.n	800d7dc <ucdr_deserialize_int32_t+0x98>
 800d76a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800d76e:	42b7      	cmp	r7, r6
 800d770:	d92f      	bls.n	800d7d2 <ucdr_deserialize_int32_t+0x8e>
 800d772:	6923      	ldr	r3, [r4, #16]
 800d774:	4620      	mov	r0, r4
 800d776:	60a7      	str	r7, [r4, #8]
 800d778:	1bbf      	subs	r7, r7, r6
 800d77a:	443b      	add	r3, r7
 800d77c:	f1c7 0904 	rsb	r9, r7, #4
 800d780:	6123      	str	r3, [r4, #16]
 800d782:	4649      	mov	r1, r9
 800d784:	f000 fb38 	bl	800ddf8 <ucdr_check_final_buffer_behavior>
 800d788:	2800      	cmp	r0, #0
 800d78a:	d046      	beq.n	800d81a <ucdr_deserialize_int32_t+0xd6>
 800d78c:	7d23      	ldrb	r3, [r4, #20]
 800d78e:	2b01      	cmp	r3, #1
 800d790:	d05c      	beq.n	800d84c <ucdr_deserialize_int32_t+0x108>
 800d792:	78f3      	ldrb	r3, [r6, #3]
 800d794:	702b      	strb	r3, [r5, #0]
 800d796:	2f00      	cmp	r7, #0
 800d798:	d04c      	beq.n	800d834 <ucdr_deserialize_int32_t+0xf0>
 800d79a:	78b3      	ldrb	r3, [r6, #2]
 800d79c:	2f01      	cmp	r7, #1
 800d79e:	706b      	strb	r3, [r5, #1]
 800d7a0:	f105 0302 	add.w	r3, r5, #2
 800d7a4:	d04a      	beq.n	800d83c <ucdr_deserialize_int32_t+0xf8>
 800d7a6:	7873      	ldrb	r3, [r6, #1]
 800d7a8:	2f02      	cmp	r7, #2
 800d7aa:	70ab      	strb	r3, [r5, #2]
 800d7ac:	f105 0303 	add.w	r3, r5, #3
 800d7b0:	d048      	beq.n	800d844 <ucdr_deserialize_int32_t+0x100>
 800d7b2:	7833      	ldrb	r3, [r6, #0]
 800d7b4:	70eb      	strb	r3, [r5, #3]
 800d7b6:	6923      	ldr	r3, [r4, #16]
 800d7b8:	2104      	movs	r1, #4
 800d7ba:	68a2      	ldr	r2, [r4, #8]
 800d7bc:	3304      	adds	r3, #4
 800d7be:	7da0      	ldrb	r0, [r4, #22]
 800d7c0:	444a      	add	r2, r9
 800d7c2:	7561      	strb	r1, [r4, #21]
 800d7c4:	1bdb      	subs	r3, r3, r7
 800d7c6:	f080 0001 	eor.w	r0, r0, #1
 800d7ca:	60a2      	str	r2, [r4, #8]
 800d7cc:	6123      	str	r3, [r4, #16]
 800d7ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d7d2:	2104      	movs	r1, #4
 800d7d4:	4620      	mov	r0, r4
 800d7d6:	f000 fb0f 	bl	800ddf8 <ucdr_check_final_buffer_behavior>
 800d7da:	b1b0      	cbz	r0, 800d80a <ucdr_deserialize_int32_t+0xc6>
 800d7dc:	7d23      	ldrb	r3, [r4, #20]
 800d7de:	2b01      	cmp	r3, #1
 800d7e0:	68a3      	ldr	r3, [r4, #8]
 800d7e2:	d017      	beq.n	800d814 <ucdr_deserialize_int32_t+0xd0>
 800d7e4:	78db      	ldrb	r3, [r3, #3]
 800d7e6:	702b      	strb	r3, [r5, #0]
 800d7e8:	68a3      	ldr	r3, [r4, #8]
 800d7ea:	789b      	ldrb	r3, [r3, #2]
 800d7ec:	706b      	strb	r3, [r5, #1]
 800d7ee:	68a3      	ldr	r3, [r4, #8]
 800d7f0:	785b      	ldrb	r3, [r3, #1]
 800d7f2:	70ab      	strb	r3, [r5, #2]
 800d7f4:	68a3      	ldr	r3, [r4, #8]
 800d7f6:	781b      	ldrb	r3, [r3, #0]
 800d7f8:	70eb      	strb	r3, [r5, #3]
 800d7fa:	2104      	movs	r1, #4
 800d7fc:	68a2      	ldr	r2, [r4, #8]
 800d7fe:	6923      	ldr	r3, [r4, #16]
 800d800:	440a      	add	r2, r1
 800d802:	7561      	strb	r1, [r4, #21]
 800d804:	440b      	add	r3, r1
 800d806:	60a2      	str	r2, [r4, #8]
 800d808:	6123      	str	r3, [r4, #16]
 800d80a:	7da0      	ldrb	r0, [r4, #22]
 800d80c:	f080 0001 	eor.w	r0, r0, #1
 800d810:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	602b      	str	r3, [r5, #0]
 800d818:	e7ef      	b.n	800d7fa <ucdr_deserialize_int32_t+0xb6>
 800d81a:	68a2      	ldr	r2, [r4, #8]
 800d81c:	6923      	ldr	r3, [r4, #16]
 800d81e:	1bd2      	subs	r2, r2, r7
 800d820:	7da0      	ldrb	r0, [r4, #22]
 800d822:	1bdb      	subs	r3, r3, r7
 800d824:	f884 8015 	strb.w	r8, [r4, #21]
 800d828:	f080 0001 	eor.w	r0, r0, #1
 800d82c:	60a2      	str	r2, [r4, #8]
 800d82e:	6123      	str	r3, [r4, #16]
 800d830:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d834:	68a3      	ldr	r3, [r4, #8]
 800d836:	789b      	ldrb	r3, [r3, #2]
 800d838:	706b      	strb	r3, [r5, #1]
 800d83a:	1cab      	adds	r3, r5, #2
 800d83c:	68a2      	ldr	r2, [r4, #8]
 800d83e:	7852      	ldrb	r2, [r2, #1]
 800d840:	f803 2b01 	strb.w	r2, [r3], #1
 800d844:	68a2      	ldr	r2, [r4, #8]
 800d846:	7812      	ldrb	r2, [r2, #0]
 800d848:	701a      	strb	r2, [r3, #0]
 800d84a:	e7b4      	b.n	800d7b6 <ucdr_deserialize_int32_t+0x72>
 800d84c:	4631      	mov	r1, r6
 800d84e:	463a      	mov	r2, r7
 800d850:	4628      	mov	r0, r5
 800d852:	f00c f84c 	bl	80198ee <memcpy>
 800d856:	464a      	mov	r2, r9
 800d858:	19e8      	adds	r0, r5, r7
 800d85a:	68a1      	ldr	r1, [r4, #8]
 800d85c:	f00c f847 	bl	80198ee <memcpy>
 800d860:	e7a9      	b.n	800d7b6 <ucdr_deserialize_int32_t+0x72>
 800d862:	bf00      	nop

0800d864 <ucdr_serialize_int64_t>:
 800d864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d868:	4604      	mov	r4, r0
 800d86a:	b082      	sub	sp, #8
 800d86c:	2108      	movs	r1, #8
 800d86e:	e9cd 2300 	strd	r2, r3, [sp]
 800d872:	f000 fb15 	bl	800dea0 <ucdr_buffer_alignment>
 800d876:	4601      	mov	r1, r0
 800d878:	4620      	mov	r0, r4
 800d87a:	7d67      	ldrb	r7, [r4, #21]
 800d87c:	f000 fb58 	bl	800df30 <ucdr_advance_buffer>
 800d880:	2108      	movs	r1, #8
 800d882:	4620      	mov	r0, r4
 800d884:	f000 faac 	bl	800dde0 <ucdr_check_buffer_available_for>
 800d888:	2800      	cmp	r0, #0
 800d88a:	d14e      	bne.n	800d92a <ucdr_serialize_int64_t+0xc6>
 800d88c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d890:	42ab      	cmp	r3, r5
 800d892:	d945      	bls.n	800d920 <ucdr_serialize_int64_t+0xbc>
 800d894:	1b5e      	subs	r6, r3, r5
 800d896:	60a3      	str	r3, [r4, #8]
 800d898:	6923      	ldr	r3, [r4, #16]
 800d89a:	4620      	mov	r0, r4
 800d89c:	f1c6 0808 	rsb	r8, r6, #8
 800d8a0:	4433      	add	r3, r6
 800d8a2:	4641      	mov	r1, r8
 800d8a4:	6123      	str	r3, [r4, #16]
 800d8a6:	f000 faa7 	bl	800ddf8 <ucdr_check_final_buffer_behavior>
 800d8aa:	2800      	cmp	r0, #0
 800d8ac:	d074      	beq.n	800d998 <ucdr_serialize_int64_t+0x134>
 800d8ae:	7d23      	ldrb	r3, [r4, #20]
 800d8b0:	2b01      	cmp	r3, #1
 800d8b2:	f000 809b 	beq.w	800d9ec <ucdr_serialize_int64_t+0x188>
 800d8b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d8ba:	702b      	strb	r3, [r5, #0]
 800d8bc:	2e00      	cmp	r6, #0
 800d8be:	d078      	beq.n	800d9b2 <ucdr_serialize_int64_t+0x14e>
 800d8c0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d8c4:	2e01      	cmp	r6, #1
 800d8c6:	706b      	strb	r3, [r5, #1]
 800d8c8:	d077      	beq.n	800d9ba <ucdr_serialize_int64_t+0x156>
 800d8ca:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d8ce:	2e02      	cmp	r6, #2
 800d8d0:	70ab      	strb	r3, [r5, #2]
 800d8d2:	d076      	beq.n	800d9c2 <ucdr_serialize_int64_t+0x15e>
 800d8d4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d8d8:	2e03      	cmp	r6, #3
 800d8da:	70eb      	strb	r3, [r5, #3]
 800d8dc:	d075      	beq.n	800d9ca <ucdr_serialize_int64_t+0x166>
 800d8de:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800d8e2:	2e04      	cmp	r6, #4
 800d8e4:	712b      	strb	r3, [r5, #4]
 800d8e6:	d074      	beq.n	800d9d2 <ucdr_serialize_int64_t+0x16e>
 800d8e8:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800d8ec:	2e05      	cmp	r6, #5
 800d8ee:	716b      	strb	r3, [r5, #5]
 800d8f0:	d073      	beq.n	800d9da <ucdr_serialize_int64_t+0x176>
 800d8f2:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800d8f6:	2e06      	cmp	r6, #6
 800d8f8:	71ab      	strb	r3, [r5, #6]
 800d8fa:	d072      	beq.n	800d9e2 <ucdr_serialize_int64_t+0x17e>
 800d8fc:	f89d 3000 	ldrb.w	r3, [sp]
 800d900:	71eb      	strb	r3, [r5, #7]
 800d902:	6923      	ldr	r3, [r4, #16]
 800d904:	2108      	movs	r1, #8
 800d906:	68a2      	ldr	r2, [r4, #8]
 800d908:	3308      	adds	r3, #8
 800d90a:	7da0      	ldrb	r0, [r4, #22]
 800d90c:	4442      	add	r2, r8
 800d90e:	7561      	strb	r1, [r4, #21]
 800d910:	1b9e      	subs	r6, r3, r6
 800d912:	f080 0001 	eor.w	r0, r0, #1
 800d916:	60a2      	str	r2, [r4, #8]
 800d918:	6126      	str	r6, [r4, #16]
 800d91a:	b002      	add	sp, #8
 800d91c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d920:	2108      	movs	r1, #8
 800d922:	4620      	mov	r0, r4
 800d924:	f000 fa68 	bl	800ddf8 <ucdr_check_final_buffer_behavior>
 800d928:	b350      	cbz	r0, 800d980 <ucdr_serialize_int64_t+0x11c>
 800d92a:	7d23      	ldrb	r3, [r4, #20]
 800d92c:	2b01      	cmp	r3, #1
 800d92e:	d02d      	beq.n	800d98c <ucdr_serialize_int64_t+0x128>
 800d930:	68a3      	ldr	r3, [r4, #8]
 800d932:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800d936:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d93a:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800d93e:	7018      	strb	r0, [r3, #0]
 800d940:	68a3      	ldr	r3, [r4, #8]
 800d942:	705a      	strb	r2, [r3, #1]
 800d944:	68a3      	ldr	r3, [r4, #8]
 800d946:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d94a:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800d94e:	7099      	strb	r1, [r3, #2]
 800d950:	68a3      	ldr	r3, [r4, #8]
 800d952:	70da      	strb	r2, [r3, #3]
 800d954:	68a3      	ldr	r3, [r4, #8]
 800d956:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800d95a:	f89d 1001 	ldrb.w	r1, [sp, #1]
 800d95e:	7118      	strb	r0, [r3, #4]
 800d960:	68a3      	ldr	r3, [r4, #8]
 800d962:	715a      	strb	r2, [r3, #5]
 800d964:	68a3      	ldr	r3, [r4, #8]
 800d966:	f89d 2000 	ldrb.w	r2, [sp]
 800d96a:	7199      	strb	r1, [r3, #6]
 800d96c:	68a3      	ldr	r3, [r4, #8]
 800d96e:	71da      	strb	r2, [r3, #7]
 800d970:	2108      	movs	r1, #8
 800d972:	68a2      	ldr	r2, [r4, #8]
 800d974:	6923      	ldr	r3, [r4, #16]
 800d976:	440a      	add	r2, r1
 800d978:	7561      	strb	r1, [r4, #21]
 800d97a:	440b      	add	r3, r1
 800d97c:	60a2      	str	r2, [r4, #8]
 800d97e:	6123      	str	r3, [r4, #16]
 800d980:	7da0      	ldrb	r0, [r4, #22]
 800d982:	f080 0001 	eor.w	r0, r0, #1
 800d986:	b002      	add	sp, #8
 800d988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d98c:	466b      	mov	r3, sp
 800d98e:	68a2      	ldr	r2, [r4, #8]
 800d990:	cb03      	ldmia	r3!, {r0, r1}
 800d992:	6010      	str	r0, [r2, #0]
 800d994:	6051      	str	r1, [r2, #4]
 800d996:	e7eb      	b.n	800d970 <ucdr_serialize_int64_t+0x10c>
 800d998:	68a2      	ldr	r2, [r4, #8]
 800d99a:	6923      	ldr	r3, [r4, #16]
 800d99c:	7da0      	ldrb	r0, [r4, #22]
 800d99e:	1b92      	subs	r2, r2, r6
 800d9a0:	1b9b      	subs	r3, r3, r6
 800d9a2:	7567      	strb	r7, [r4, #21]
 800d9a4:	f080 0001 	eor.w	r0, r0, #1
 800d9a8:	60a2      	str	r2, [r4, #8]
 800d9aa:	6123      	str	r3, [r4, #16]
 800d9ac:	b002      	add	sp, #8
 800d9ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9b2:	68a3      	ldr	r3, [r4, #8]
 800d9b4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d9b8:	701a      	strb	r2, [r3, #0]
 800d9ba:	68a3      	ldr	r3, [r4, #8]
 800d9bc:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d9c0:	701a      	strb	r2, [r3, #0]
 800d9c2:	68a3      	ldr	r3, [r4, #8]
 800d9c4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d9c8:	701a      	strb	r2, [r3, #0]
 800d9ca:	68a3      	ldr	r3, [r4, #8]
 800d9cc:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800d9d0:	701a      	strb	r2, [r3, #0]
 800d9d2:	68a3      	ldr	r3, [r4, #8]
 800d9d4:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800d9d8:	701a      	strb	r2, [r3, #0]
 800d9da:	68a3      	ldr	r3, [r4, #8]
 800d9dc:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800d9e0:	701a      	strb	r2, [r3, #0]
 800d9e2:	68a3      	ldr	r3, [r4, #8]
 800d9e4:	f89d 2000 	ldrb.w	r2, [sp]
 800d9e8:	701a      	strb	r2, [r3, #0]
 800d9ea:	e78a      	b.n	800d902 <ucdr_serialize_int64_t+0x9e>
 800d9ec:	4628      	mov	r0, r5
 800d9ee:	466d      	mov	r5, sp
 800d9f0:	4632      	mov	r2, r6
 800d9f2:	4629      	mov	r1, r5
 800d9f4:	f00b ff7b 	bl	80198ee <memcpy>
 800d9f8:	4642      	mov	r2, r8
 800d9fa:	19a9      	adds	r1, r5, r6
 800d9fc:	68a0      	ldr	r0, [r4, #8]
 800d9fe:	f00b ff76 	bl	80198ee <memcpy>
 800da02:	e77e      	b.n	800d902 <ucdr_serialize_int64_t+0x9e>

0800da04 <ucdr_deserialize_int64_t>:
 800da04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da08:	4604      	mov	r4, r0
 800da0a:	460d      	mov	r5, r1
 800da0c:	2108      	movs	r1, #8
 800da0e:	f000 fa47 	bl	800dea0 <ucdr_buffer_alignment>
 800da12:	4601      	mov	r1, r0
 800da14:	4620      	mov	r0, r4
 800da16:	f894 8015 	ldrb.w	r8, [r4, #21]
 800da1a:	f000 fa89 	bl	800df30 <ucdr_advance_buffer>
 800da1e:	2108      	movs	r1, #8
 800da20:	4620      	mov	r0, r4
 800da22:	f000 f9dd 	bl	800dde0 <ucdr_check_buffer_available_for>
 800da26:	2800      	cmp	r0, #0
 800da28:	d151      	bne.n	800dace <ucdr_deserialize_int64_t+0xca>
 800da2a:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800da2e:	42be      	cmp	r6, r7
 800da30:	d948      	bls.n	800dac4 <ucdr_deserialize_int64_t+0xc0>
 800da32:	6923      	ldr	r3, [r4, #16]
 800da34:	4620      	mov	r0, r4
 800da36:	60a6      	str	r6, [r4, #8]
 800da38:	1bf6      	subs	r6, r6, r7
 800da3a:	4433      	add	r3, r6
 800da3c:	f1c6 0908 	rsb	r9, r6, #8
 800da40:	6123      	str	r3, [r4, #16]
 800da42:	4649      	mov	r1, r9
 800da44:	f000 f9d8 	bl	800ddf8 <ucdr_check_final_buffer_behavior>
 800da48:	2800      	cmp	r0, #0
 800da4a:	d06d      	beq.n	800db28 <ucdr_deserialize_int64_t+0x124>
 800da4c:	7d23      	ldrb	r3, [r4, #20]
 800da4e:	2b01      	cmp	r3, #1
 800da50:	f000 8093 	beq.w	800db7a <ucdr_deserialize_int64_t+0x176>
 800da54:	79fb      	ldrb	r3, [r7, #7]
 800da56:	702b      	strb	r3, [r5, #0]
 800da58:	2e00      	cmp	r6, #0
 800da5a:	d072      	beq.n	800db42 <ucdr_deserialize_int64_t+0x13e>
 800da5c:	79bb      	ldrb	r3, [r7, #6]
 800da5e:	2e01      	cmp	r6, #1
 800da60:	706b      	strb	r3, [r5, #1]
 800da62:	f105 0302 	add.w	r3, r5, #2
 800da66:	d070      	beq.n	800db4a <ucdr_deserialize_int64_t+0x146>
 800da68:	797b      	ldrb	r3, [r7, #5]
 800da6a:	2e02      	cmp	r6, #2
 800da6c:	70ab      	strb	r3, [r5, #2]
 800da6e:	f105 0303 	add.w	r3, r5, #3
 800da72:	d06e      	beq.n	800db52 <ucdr_deserialize_int64_t+0x14e>
 800da74:	793b      	ldrb	r3, [r7, #4]
 800da76:	2e03      	cmp	r6, #3
 800da78:	70eb      	strb	r3, [r5, #3]
 800da7a:	f105 0304 	add.w	r3, r5, #4
 800da7e:	d06c      	beq.n	800db5a <ucdr_deserialize_int64_t+0x156>
 800da80:	78fb      	ldrb	r3, [r7, #3]
 800da82:	2e04      	cmp	r6, #4
 800da84:	712b      	strb	r3, [r5, #4]
 800da86:	f105 0305 	add.w	r3, r5, #5
 800da8a:	d06a      	beq.n	800db62 <ucdr_deserialize_int64_t+0x15e>
 800da8c:	78bb      	ldrb	r3, [r7, #2]
 800da8e:	2e05      	cmp	r6, #5
 800da90:	716b      	strb	r3, [r5, #5]
 800da92:	f105 0306 	add.w	r3, r5, #6
 800da96:	d068      	beq.n	800db6a <ucdr_deserialize_int64_t+0x166>
 800da98:	787b      	ldrb	r3, [r7, #1]
 800da9a:	2e06      	cmp	r6, #6
 800da9c:	71ab      	strb	r3, [r5, #6]
 800da9e:	f105 0307 	add.w	r3, r5, #7
 800daa2:	d066      	beq.n	800db72 <ucdr_deserialize_int64_t+0x16e>
 800daa4:	783b      	ldrb	r3, [r7, #0]
 800daa6:	71eb      	strb	r3, [r5, #7]
 800daa8:	6923      	ldr	r3, [r4, #16]
 800daaa:	2108      	movs	r1, #8
 800daac:	68a2      	ldr	r2, [r4, #8]
 800daae:	3308      	adds	r3, #8
 800dab0:	7da0      	ldrb	r0, [r4, #22]
 800dab2:	444a      	add	r2, r9
 800dab4:	7561      	strb	r1, [r4, #21]
 800dab6:	1b9e      	subs	r6, r3, r6
 800dab8:	f080 0001 	eor.w	r0, r0, #1
 800dabc:	60a2      	str	r2, [r4, #8]
 800dabe:	6126      	str	r6, [r4, #16]
 800dac0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dac4:	2108      	movs	r1, #8
 800dac6:	4620      	mov	r0, r4
 800dac8:	f000 f996 	bl	800ddf8 <ucdr_check_final_buffer_behavior>
 800dacc:	b310      	cbz	r0, 800db14 <ucdr_deserialize_int64_t+0x110>
 800dace:	7d23      	ldrb	r3, [r4, #20]
 800dad0:	2b01      	cmp	r3, #1
 800dad2:	68a3      	ldr	r3, [r4, #8]
 800dad4:	d023      	beq.n	800db1e <ucdr_deserialize_int64_t+0x11a>
 800dad6:	79db      	ldrb	r3, [r3, #7]
 800dad8:	702b      	strb	r3, [r5, #0]
 800dada:	68a3      	ldr	r3, [r4, #8]
 800dadc:	799b      	ldrb	r3, [r3, #6]
 800dade:	706b      	strb	r3, [r5, #1]
 800dae0:	68a3      	ldr	r3, [r4, #8]
 800dae2:	795b      	ldrb	r3, [r3, #5]
 800dae4:	70ab      	strb	r3, [r5, #2]
 800dae6:	68a3      	ldr	r3, [r4, #8]
 800dae8:	791b      	ldrb	r3, [r3, #4]
 800daea:	70eb      	strb	r3, [r5, #3]
 800daec:	68a3      	ldr	r3, [r4, #8]
 800daee:	78db      	ldrb	r3, [r3, #3]
 800daf0:	712b      	strb	r3, [r5, #4]
 800daf2:	68a3      	ldr	r3, [r4, #8]
 800daf4:	789b      	ldrb	r3, [r3, #2]
 800daf6:	716b      	strb	r3, [r5, #5]
 800daf8:	68a3      	ldr	r3, [r4, #8]
 800dafa:	785b      	ldrb	r3, [r3, #1]
 800dafc:	71ab      	strb	r3, [r5, #6]
 800dafe:	68a3      	ldr	r3, [r4, #8]
 800db00:	781b      	ldrb	r3, [r3, #0]
 800db02:	71eb      	strb	r3, [r5, #7]
 800db04:	2108      	movs	r1, #8
 800db06:	68a2      	ldr	r2, [r4, #8]
 800db08:	6923      	ldr	r3, [r4, #16]
 800db0a:	440a      	add	r2, r1
 800db0c:	7561      	strb	r1, [r4, #21]
 800db0e:	440b      	add	r3, r1
 800db10:	60a2      	str	r2, [r4, #8]
 800db12:	6123      	str	r3, [r4, #16]
 800db14:	7da0      	ldrb	r0, [r4, #22]
 800db16:	f080 0001 	eor.w	r0, r0, #1
 800db1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db1e:	681a      	ldr	r2, [r3, #0]
 800db20:	685b      	ldr	r3, [r3, #4]
 800db22:	602a      	str	r2, [r5, #0]
 800db24:	606b      	str	r3, [r5, #4]
 800db26:	e7ed      	b.n	800db04 <ucdr_deserialize_int64_t+0x100>
 800db28:	68a2      	ldr	r2, [r4, #8]
 800db2a:	6923      	ldr	r3, [r4, #16]
 800db2c:	1b92      	subs	r2, r2, r6
 800db2e:	7da0      	ldrb	r0, [r4, #22]
 800db30:	1b9b      	subs	r3, r3, r6
 800db32:	f884 8015 	strb.w	r8, [r4, #21]
 800db36:	f080 0001 	eor.w	r0, r0, #1
 800db3a:	60a2      	str	r2, [r4, #8]
 800db3c:	6123      	str	r3, [r4, #16]
 800db3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db42:	68a3      	ldr	r3, [r4, #8]
 800db44:	799b      	ldrb	r3, [r3, #6]
 800db46:	706b      	strb	r3, [r5, #1]
 800db48:	1cab      	adds	r3, r5, #2
 800db4a:	68a2      	ldr	r2, [r4, #8]
 800db4c:	7952      	ldrb	r2, [r2, #5]
 800db4e:	f803 2b01 	strb.w	r2, [r3], #1
 800db52:	68a2      	ldr	r2, [r4, #8]
 800db54:	7912      	ldrb	r2, [r2, #4]
 800db56:	f803 2b01 	strb.w	r2, [r3], #1
 800db5a:	68a2      	ldr	r2, [r4, #8]
 800db5c:	78d2      	ldrb	r2, [r2, #3]
 800db5e:	f803 2b01 	strb.w	r2, [r3], #1
 800db62:	68a2      	ldr	r2, [r4, #8]
 800db64:	7892      	ldrb	r2, [r2, #2]
 800db66:	f803 2b01 	strb.w	r2, [r3], #1
 800db6a:	68a2      	ldr	r2, [r4, #8]
 800db6c:	7852      	ldrb	r2, [r2, #1]
 800db6e:	f803 2b01 	strb.w	r2, [r3], #1
 800db72:	68a2      	ldr	r2, [r4, #8]
 800db74:	7812      	ldrb	r2, [r2, #0]
 800db76:	701a      	strb	r2, [r3, #0]
 800db78:	e796      	b.n	800daa8 <ucdr_deserialize_int64_t+0xa4>
 800db7a:	4639      	mov	r1, r7
 800db7c:	4632      	mov	r2, r6
 800db7e:	4628      	mov	r0, r5
 800db80:	f00b feb5 	bl	80198ee <memcpy>
 800db84:	464a      	mov	r2, r9
 800db86:	19a8      	adds	r0, r5, r6
 800db88:	68a1      	ldr	r1, [r4, #8]
 800db8a:	f00b feb0 	bl	80198ee <memcpy>
 800db8e:	e78b      	b.n	800daa8 <ucdr_deserialize_int64_t+0xa4>

0800db90 <ucdr_serialize_float>:
 800db90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db94:	4604      	mov	r4, r0
 800db96:	b082      	sub	sp, #8
 800db98:	2104      	movs	r1, #4
 800db9a:	ed8d 0a01 	vstr	s0, [sp, #4]
 800db9e:	f000 f97f 	bl	800dea0 <ucdr_buffer_alignment>
 800dba2:	4601      	mov	r1, r0
 800dba4:	4620      	mov	r0, r4
 800dba6:	7d67      	ldrb	r7, [r4, #21]
 800dba8:	f000 f9c2 	bl	800df30 <ucdr_advance_buffer>
 800dbac:	2104      	movs	r1, #4
 800dbae:	4620      	mov	r0, r4
 800dbb0:	f000 f916 	bl	800dde0 <ucdr_check_buffer_available_for>
 800dbb4:	2800      	cmp	r0, #0
 800dbb6:	d139      	bne.n	800dc2c <ucdr_serialize_float+0x9c>
 800dbb8:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800dbbc:	42ab      	cmp	r3, r5
 800dbbe:	d930      	bls.n	800dc22 <ucdr_serialize_float+0x92>
 800dbc0:	1b5e      	subs	r6, r3, r5
 800dbc2:	60a3      	str	r3, [r4, #8]
 800dbc4:	6923      	ldr	r3, [r4, #16]
 800dbc6:	4620      	mov	r0, r4
 800dbc8:	f1c6 0804 	rsb	r8, r6, #4
 800dbcc:	4433      	add	r3, r6
 800dbce:	4641      	mov	r1, r8
 800dbd0:	6123      	str	r3, [r4, #16]
 800dbd2:	f000 f911 	bl	800ddf8 <ucdr_check_final_buffer_behavior>
 800dbd6:	2800      	cmp	r0, #0
 800dbd8:	d04c      	beq.n	800dc74 <ucdr_serialize_float+0xe4>
 800dbda:	7d23      	ldrb	r3, [r4, #20]
 800dbdc:	2b01      	cmp	r3, #1
 800dbde:	d063      	beq.n	800dca8 <ucdr_serialize_float+0x118>
 800dbe0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800dbe4:	702b      	strb	r3, [r5, #0]
 800dbe6:	2e00      	cmp	r6, #0
 800dbe8:	d051      	beq.n	800dc8e <ucdr_serialize_float+0xfe>
 800dbea:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800dbee:	2e01      	cmp	r6, #1
 800dbf0:	706b      	strb	r3, [r5, #1]
 800dbf2:	d050      	beq.n	800dc96 <ucdr_serialize_float+0x106>
 800dbf4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800dbf8:	2e02      	cmp	r6, #2
 800dbfa:	70ab      	strb	r3, [r5, #2]
 800dbfc:	d04f      	beq.n	800dc9e <ucdr_serialize_float+0x10e>
 800dbfe:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800dc02:	70eb      	strb	r3, [r5, #3]
 800dc04:	6923      	ldr	r3, [r4, #16]
 800dc06:	2104      	movs	r1, #4
 800dc08:	68a2      	ldr	r2, [r4, #8]
 800dc0a:	3304      	adds	r3, #4
 800dc0c:	7da0      	ldrb	r0, [r4, #22]
 800dc0e:	4442      	add	r2, r8
 800dc10:	7561      	strb	r1, [r4, #21]
 800dc12:	1b9e      	subs	r6, r3, r6
 800dc14:	f080 0001 	eor.w	r0, r0, #1
 800dc18:	60a2      	str	r2, [r4, #8]
 800dc1a:	6126      	str	r6, [r4, #16]
 800dc1c:	b002      	add	sp, #8
 800dc1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc22:	2104      	movs	r1, #4
 800dc24:	4620      	mov	r0, r4
 800dc26:	f000 f8e7 	bl	800ddf8 <ucdr_check_final_buffer_behavior>
 800dc2a:	b1d0      	cbz	r0, 800dc62 <ucdr_serialize_float+0xd2>
 800dc2c:	7d23      	ldrb	r3, [r4, #20]
 800dc2e:	2b01      	cmp	r3, #1
 800dc30:	68a3      	ldr	r3, [r4, #8]
 800dc32:	d01c      	beq.n	800dc6e <ucdr_serialize_float+0xde>
 800dc34:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800dc38:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800dc3c:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800dc40:	7018      	strb	r0, [r3, #0]
 800dc42:	68a3      	ldr	r3, [r4, #8]
 800dc44:	705a      	strb	r2, [r3, #1]
 800dc46:	68a3      	ldr	r3, [r4, #8]
 800dc48:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800dc4c:	7099      	strb	r1, [r3, #2]
 800dc4e:	68a3      	ldr	r3, [r4, #8]
 800dc50:	70da      	strb	r2, [r3, #3]
 800dc52:	2104      	movs	r1, #4
 800dc54:	68a2      	ldr	r2, [r4, #8]
 800dc56:	6923      	ldr	r3, [r4, #16]
 800dc58:	440a      	add	r2, r1
 800dc5a:	7561      	strb	r1, [r4, #21]
 800dc5c:	440b      	add	r3, r1
 800dc5e:	60a2      	str	r2, [r4, #8]
 800dc60:	6123      	str	r3, [r4, #16]
 800dc62:	7da0      	ldrb	r0, [r4, #22]
 800dc64:	f080 0001 	eor.w	r0, r0, #1
 800dc68:	b002      	add	sp, #8
 800dc6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc6e:	9a01      	ldr	r2, [sp, #4]
 800dc70:	601a      	str	r2, [r3, #0]
 800dc72:	e7ee      	b.n	800dc52 <ucdr_serialize_float+0xc2>
 800dc74:	68a2      	ldr	r2, [r4, #8]
 800dc76:	6923      	ldr	r3, [r4, #16]
 800dc78:	7da0      	ldrb	r0, [r4, #22]
 800dc7a:	1b92      	subs	r2, r2, r6
 800dc7c:	1b9b      	subs	r3, r3, r6
 800dc7e:	7567      	strb	r7, [r4, #21]
 800dc80:	f080 0001 	eor.w	r0, r0, #1
 800dc84:	60a2      	str	r2, [r4, #8]
 800dc86:	6123      	str	r3, [r4, #16]
 800dc88:	b002      	add	sp, #8
 800dc8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc8e:	68a3      	ldr	r3, [r4, #8]
 800dc90:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800dc94:	701a      	strb	r2, [r3, #0]
 800dc96:	68a3      	ldr	r3, [r4, #8]
 800dc98:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800dc9c:	701a      	strb	r2, [r3, #0]
 800dc9e:	68a3      	ldr	r3, [r4, #8]
 800dca0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800dca4:	701a      	strb	r2, [r3, #0]
 800dca6:	e7ad      	b.n	800dc04 <ucdr_serialize_float+0x74>
 800dca8:	4628      	mov	r0, r5
 800dcaa:	ad01      	add	r5, sp, #4
 800dcac:	4632      	mov	r2, r6
 800dcae:	4629      	mov	r1, r5
 800dcb0:	f00b fe1d 	bl	80198ee <memcpy>
 800dcb4:	4642      	mov	r2, r8
 800dcb6:	19a9      	adds	r1, r5, r6
 800dcb8:	68a0      	ldr	r0, [r4, #8]
 800dcba:	f00b fe18 	bl	80198ee <memcpy>
 800dcbe:	e7a1      	b.n	800dc04 <ucdr_serialize_float+0x74>

0800dcc0 <ucdr_deserialize_float>:
 800dcc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dcc4:	4604      	mov	r4, r0
 800dcc6:	460d      	mov	r5, r1
 800dcc8:	2104      	movs	r1, #4
 800dcca:	f000 f8e9 	bl	800dea0 <ucdr_buffer_alignment>
 800dcce:	4601      	mov	r1, r0
 800dcd0:	4620      	mov	r0, r4
 800dcd2:	f894 8015 	ldrb.w	r8, [r4, #21]
 800dcd6:	f000 f92b 	bl	800df30 <ucdr_advance_buffer>
 800dcda:	2104      	movs	r1, #4
 800dcdc:	4620      	mov	r0, r4
 800dcde:	f000 f87f 	bl	800dde0 <ucdr_check_buffer_available_for>
 800dce2:	2800      	cmp	r0, #0
 800dce4:	d138      	bne.n	800dd58 <ucdr_deserialize_float+0x98>
 800dce6:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800dcea:	42b7      	cmp	r7, r6
 800dcec:	d92f      	bls.n	800dd4e <ucdr_deserialize_float+0x8e>
 800dcee:	6923      	ldr	r3, [r4, #16]
 800dcf0:	4620      	mov	r0, r4
 800dcf2:	60a7      	str	r7, [r4, #8]
 800dcf4:	1bbf      	subs	r7, r7, r6
 800dcf6:	443b      	add	r3, r7
 800dcf8:	f1c7 0904 	rsb	r9, r7, #4
 800dcfc:	6123      	str	r3, [r4, #16]
 800dcfe:	4649      	mov	r1, r9
 800dd00:	f000 f87a 	bl	800ddf8 <ucdr_check_final_buffer_behavior>
 800dd04:	2800      	cmp	r0, #0
 800dd06:	d046      	beq.n	800dd96 <ucdr_deserialize_float+0xd6>
 800dd08:	7d23      	ldrb	r3, [r4, #20]
 800dd0a:	2b01      	cmp	r3, #1
 800dd0c:	d05c      	beq.n	800ddc8 <ucdr_deserialize_float+0x108>
 800dd0e:	78f3      	ldrb	r3, [r6, #3]
 800dd10:	702b      	strb	r3, [r5, #0]
 800dd12:	2f00      	cmp	r7, #0
 800dd14:	d04c      	beq.n	800ddb0 <ucdr_deserialize_float+0xf0>
 800dd16:	78b3      	ldrb	r3, [r6, #2]
 800dd18:	2f01      	cmp	r7, #1
 800dd1a:	706b      	strb	r3, [r5, #1]
 800dd1c:	f105 0302 	add.w	r3, r5, #2
 800dd20:	d04a      	beq.n	800ddb8 <ucdr_deserialize_float+0xf8>
 800dd22:	7873      	ldrb	r3, [r6, #1]
 800dd24:	2f02      	cmp	r7, #2
 800dd26:	70ab      	strb	r3, [r5, #2]
 800dd28:	f105 0303 	add.w	r3, r5, #3
 800dd2c:	d048      	beq.n	800ddc0 <ucdr_deserialize_float+0x100>
 800dd2e:	7833      	ldrb	r3, [r6, #0]
 800dd30:	70eb      	strb	r3, [r5, #3]
 800dd32:	6923      	ldr	r3, [r4, #16]
 800dd34:	2104      	movs	r1, #4
 800dd36:	68a2      	ldr	r2, [r4, #8]
 800dd38:	3304      	adds	r3, #4
 800dd3a:	7da0      	ldrb	r0, [r4, #22]
 800dd3c:	444a      	add	r2, r9
 800dd3e:	7561      	strb	r1, [r4, #21]
 800dd40:	1bdb      	subs	r3, r3, r7
 800dd42:	f080 0001 	eor.w	r0, r0, #1
 800dd46:	60a2      	str	r2, [r4, #8]
 800dd48:	6123      	str	r3, [r4, #16]
 800dd4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd4e:	2104      	movs	r1, #4
 800dd50:	4620      	mov	r0, r4
 800dd52:	f000 f851 	bl	800ddf8 <ucdr_check_final_buffer_behavior>
 800dd56:	b1b0      	cbz	r0, 800dd86 <ucdr_deserialize_float+0xc6>
 800dd58:	7d23      	ldrb	r3, [r4, #20]
 800dd5a:	2b01      	cmp	r3, #1
 800dd5c:	68a3      	ldr	r3, [r4, #8]
 800dd5e:	d017      	beq.n	800dd90 <ucdr_deserialize_float+0xd0>
 800dd60:	78db      	ldrb	r3, [r3, #3]
 800dd62:	702b      	strb	r3, [r5, #0]
 800dd64:	68a3      	ldr	r3, [r4, #8]
 800dd66:	789b      	ldrb	r3, [r3, #2]
 800dd68:	706b      	strb	r3, [r5, #1]
 800dd6a:	68a3      	ldr	r3, [r4, #8]
 800dd6c:	785b      	ldrb	r3, [r3, #1]
 800dd6e:	70ab      	strb	r3, [r5, #2]
 800dd70:	68a3      	ldr	r3, [r4, #8]
 800dd72:	781b      	ldrb	r3, [r3, #0]
 800dd74:	70eb      	strb	r3, [r5, #3]
 800dd76:	2104      	movs	r1, #4
 800dd78:	68a2      	ldr	r2, [r4, #8]
 800dd7a:	6923      	ldr	r3, [r4, #16]
 800dd7c:	440a      	add	r2, r1
 800dd7e:	7561      	strb	r1, [r4, #21]
 800dd80:	440b      	add	r3, r1
 800dd82:	60a2      	str	r2, [r4, #8]
 800dd84:	6123      	str	r3, [r4, #16]
 800dd86:	7da0      	ldrb	r0, [r4, #22]
 800dd88:	f080 0001 	eor.w	r0, r0, #1
 800dd8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	602b      	str	r3, [r5, #0]
 800dd94:	e7ef      	b.n	800dd76 <ucdr_deserialize_float+0xb6>
 800dd96:	68a2      	ldr	r2, [r4, #8]
 800dd98:	6923      	ldr	r3, [r4, #16]
 800dd9a:	1bd2      	subs	r2, r2, r7
 800dd9c:	7da0      	ldrb	r0, [r4, #22]
 800dd9e:	1bdb      	subs	r3, r3, r7
 800dda0:	f884 8015 	strb.w	r8, [r4, #21]
 800dda4:	f080 0001 	eor.w	r0, r0, #1
 800dda8:	60a2      	str	r2, [r4, #8]
 800ddaa:	6123      	str	r3, [r4, #16]
 800ddac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ddb0:	68a3      	ldr	r3, [r4, #8]
 800ddb2:	789b      	ldrb	r3, [r3, #2]
 800ddb4:	706b      	strb	r3, [r5, #1]
 800ddb6:	1cab      	adds	r3, r5, #2
 800ddb8:	68a2      	ldr	r2, [r4, #8]
 800ddba:	7852      	ldrb	r2, [r2, #1]
 800ddbc:	f803 2b01 	strb.w	r2, [r3], #1
 800ddc0:	68a2      	ldr	r2, [r4, #8]
 800ddc2:	7812      	ldrb	r2, [r2, #0]
 800ddc4:	701a      	strb	r2, [r3, #0]
 800ddc6:	e7b4      	b.n	800dd32 <ucdr_deserialize_float+0x72>
 800ddc8:	4631      	mov	r1, r6
 800ddca:	463a      	mov	r2, r7
 800ddcc:	4628      	mov	r0, r5
 800ddce:	f00b fd8e 	bl	80198ee <memcpy>
 800ddd2:	464a      	mov	r2, r9
 800ddd4:	19e8      	adds	r0, r5, r7
 800ddd6:	68a1      	ldr	r1, [r4, #8]
 800ddd8:	f00b fd89 	bl	80198ee <memcpy>
 800dddc:	e7a9      	b.n	800dd32 <ucdr_deserialize_float+0x72>
 800ddde:	bf00      	nop

0800dde0 <ucdr_check_buffer_available_for>:
 800dde0:	7d83      	ldrb	r3, [r0, #22]
 800dde2:	b93b      	cbnz	r3, 800ddf4 <ucdr_check_buffer_available_for+0x14>
 800dde4:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800dde8:	4419      	add	r1, r3
 800ddea:	4288      	cmp	r0, r1
 800ddec:	bf34      	ite	cc
 800ddee:	2000      	movcc	r0, #0
 800ddf0:	2001      	movcs	r0, #1
 800ddf2:	4770      	bx	lr
 800ddf4:	2000      	movs	r0, #0
 800ddf6:	4770      	bx	lr

0800ddf8 <ucdr_check_final_buffer_behavior>:
 800ddf8:	7d83      	ldrb	r3, [r0, #22]
 800ddfa:	b943      	cbnz	r3, 800de0e <ucdr_check_final_buffer_behavior+0x16>
 800ddfc:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800de00:	b510      	push	{r4, lr}
 800de02:	4291      	cmp	r1, r2
 800de04:	4604      	mov	r4, r0
 800de06:	d205      	bcs.n	800de14 <ucdr_check_final_buffer_behavior+0x1c>
 800de08:	2301      	movs	r3, #1
 800de0a:	4618      	mov	r0, r3
 800de0c:	bd10      	pop	{r4, pc}
 800de0e:	2300      	movs	r3, #0
 800de10:	4618      	mov	r0, r3
 800de12:	4770      	bx	lr
 800de14:	6982      	ldr	r2, [r0, #24]
 800de16:	b13a      	cbz	r2, 800de28 <ucdr_check_final_buffer_behavior+0x30>
 800de18:	69c1      	ldr	r1, [r0, #28]
 800de1a:	4790      	blx	r2
 800de1c:	f080 0301 	eor.w	r3, r0, #1
 800de20:	75a0      	strb	r0, [r4, #22]
 800de22:	b2db      	uxtb	r3, r3
 800de24:	4618      	mov	r0, r3
 800de26:	bd10      	pop	{r4, pc}
 800de28:	2001      	movs	r0, #1
 800de2a:	75a0      	strb	r0, [r4, #22]
 800de2c:	e7fa      	b.n	800de24 <ucdr_check_final_buffer_behavior+0x2c>
 800de2e:	bf00      	nop

0800de30 <ucdr_set_on_full_buffer_callback>:
 800de30:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800de34:	4770      	bx	lr
 800de36:	bf00      	nop

0800de38 <ucdr_init_buffer_origin_offset_endian>:
 800de38:	b410      	push	{r4}
 800de3a:	9c01      	ldr	r4, [sp, #4]
 800de3c:	440a      	add	r2, r1
 800de3e:	6001      	str	r1, [r0, #0]
 800de40:	6042      	str	r2, [r0, #4]
 800de42:	190a      	adds	r2, r1, r4
 800de44:	441c      	add	r4, r3
 800de46:	6082      	str	r2, [r0, #8]
 800de48:	2200      	movs	r2, #0
 800de4a:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800de4e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800de52:	7542      	strb	r2, [r0, #21]
 800de54:	f85d 4b04 	ldr.w	r4, [sp], #4
 800de58:	7582      	strb	r2, [r0, #22]
 800de5a:	7503      	strb	r3, [r0, #20]
 800de5c:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800de60:	4770      	bx	lr
 800de62:	bf00      	nop

0800de64 <ucdr_init_buffer_origin_offset>:
 800de64:	b510      	push	{r4, lr}
 800de66:	b082      	sub	sp, #8
 800de68:	9c04      	ldr	r4, [sp, #16]
 800de6a:	9400      	str	r4, [sp, #0]
 800de6c:	2401      	movs	r4, #1
 800de6e:	9401      	str	r4, [sp, #4]
 800de70:	f7ff ffe2 	bl	800de38 <ucdr_init_buffer_origin_offset_endian>
 800de74:	b002      	add	sp, #8
 800de76:	bd10      	pop	{r4, pc}

0800de78 <ucdr_init_buffer_origin>:
 800de78:	b510      	push	{r4, lr}
 800de7a:	2400      	movs	r4, #0
 800de7c:	b082      	sub	sp, #8
 800de7e:	9400      	str	r4, [sp, #0]
 800de80:	f7ff fff0 	bl	800de64 <ucdr_init_buffer_origin_offset>
 800de84:	b002      	add	sp, #8
 800de86:	bd10      	pop	{r4, pc}

0800de88 <ucdr_init_buffer>:
 800de88:	2300      	movs	r3, #0
 800de8a:	f7ff bff5 	b.w	800de78 <ucdr_init_buffer_origin>
 800de8e:	bf00      	nop

0800de90 <ucdr_alignment>:
 800de90:	fbb0 f2f1 	udiv	r2, r0, r1
 800de94:	fb02 0011 	mls	r0, r2, r1, r0
 800de98:	1e4b      	subs	r3, r1, #1
 800de9a:	1a08      	subs	r0, r1, r0
 800de9c:	4018      	ands	r0, r3
 800de9e:	4770      	bx	lr

0800dea0 <ucdr_buffer_alignment>:
 800dea0:	7d43      	ldrb	r3, [r0, #21]
 800dea2:	428b      	cmp	r3, r1
 800dea4:	d209      	bcs.n	800deba <ucdr_buffer_alignment+0x1a>
 800dea6:	6903      	ldr	r3, [r0, #16]
 800dea8:	1e4a      	subs	r2, r1, #1
 800deaa:	fbb3 f0f1 	udiv	r0, r3, r1
 800deae:	fb01 3010 	mls	r0, r1, r0, r3
 800deb2:	1a09      	subs	r1, r1, r0
 800deb4:	ea01 0002 	and.w	r0, r1, r2
 800deb8:	4770      	bx	lr
 800deba:	2000      	movs	r0, #0
 800debc:	4770      	bx	lr
 800debe:	bf00      	nop

0800dec0 <ucdr_align_to>:
 800dec0:	b538      	push	{r3, r4, r5, lr}
 800dec2:	4604      	mov	r4, r0
 800dec4:	460d      	mov	r5, r1
 800dec6:	f7ff ffeb 	bl	800dea0 <ucdr_buffer_alignment>
 800deca:	68a3      	ldr	r3, [r4, #8]
 800decc:	7565      	strb	r5, [r4, #21]
 800dece:	181a      	adds	r2, r3, r0
 800ded0:	6923      	ldr	r3, [r4, #16]
 800ded2:	4418      	add	r0, r3
 800ded4:	6863      	ldr	r3, [r4, #4]
 800ded6:	4293      	cmp	r3, r2
 800ded8:	6120      	str	r0, [r4, #16]
 800deda:	bf28      	it	cs
 800dedc:	4613      	movcs	r3, r2
 800dede:	60a3      	str	r3, [r4, #8]
 800dee0:	bd38      	pop	{r3, r4, r5, pc}
 800dee2:	bf00      	nop

0800dee4 <ucdr_buffer_length>:
 800dee4:	6882      	ldr	r2, [r0, #8]
 800dee6:	6800      	ldr	r0, [r0, #0]
 800dee8:	1a10      	subs	r0, r2, r0
 800deea:	4770      	bx	lr

0800deec <ucdr_buffer_remaining>:
 800deec:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800def0:	1a10      	subs	r0, r2, r0
 800def2:	4770      	bx	lr

0800def4 <ucdr_check_final_buffer_behavior_array>:
 800def4:	b538      	push	{r3, r4, r5, lr}
 800def6:	7d83      	ldrb	r3, [r0, #22]
 800def8:	b9a3      	cbnz	r3, 800df24 <ucdr_check_final_buffer_behavior_array+0x30>
 800defa:	4604      	mov	r4, r0
 800defc:	460d      	mov	r5, r1
 800defe:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800df02:	429a      	cmp	r2, r3
 800df04:	d300      	bcc.n	800df08 <ucdr_check_final_buffer_behavior_array+0x14>
 800df06:	b931      	cbnz	r1, 800df16 <ucdr_check_final_buffer_behavior_array+0x22>
 800df08:	4620      	mov	r0, r4
 800df0a:	f7ff ffef 	bl	800deec <ucdr_buffer_remaining>
 800df0e:	42a8      	cmp	r0, r5
 800df10:	bf28      	it	cs
 800df12:	4628      	movcs	r0, r5
 800df14:	bd38      	pop	{r3, r4, r5, pc}
 800df16:	6983      	ldr	r3, [r0, #24]
 800df18:	b133      	cbz	r3, 800df28 <ucdr_check_final_buffer_behavior_array+0x34>
 800df1a:	69c1      	ldr	r1, [r0, #28]
 800df1c:	4798      	blx	r3
 800df1e:	75a0      	strb	r0, [r4, #22]
 800df20:	2800      	cmp	r0, #0
 800df22:	d0f1      	beq.n	800df08 <ucdr_check_final_buffer_behavior_array+0x14>
 800df24:	2000      	movs	r0, #0
 800df26:	bd38      	pop	{r3, r4, r5, pc}
 800df28:	2301      	movs	r3, #1
 800df2a:	7583      	strb	r3, [r0, #22]
 800df2c:	e7fa      	b.n	800df24 <ucdr_check_final_buffer_behavior_array+0x30>
 800df2e:	bf00      	nop

0800df30 <ucdr_advance_buffer>:
 800df30:	b538      	push	{r3, r4, r5, lr}
 800df32:	4604      	mov	r4, r0
 800df34:	460d      	mov	r5, r1
 800df36:	f7ff ff53 	bl	800dde0 <ucdr_check_buffer_available_for>
 800df3a:	b178      	cbz	r0, 800df5c <ucdr_advance_buffer+0x2c>
 800df3c:	6923      	ldr	r3, [r4, #16]
 800df3e:	68a2      	ldr	r2, [r4, #8]
 800df40:	442b      	add	r3, r5
 800df42:	442a      	add	r2, r5
 800df44:	6123      	str	r3, [r4, #16]
 800df46:	2301      	movs	r3, #1
 800df48:	60a2      	str	r2, [r4, #8]
 800df4a:	7563      	strb	r3, [r4, #21]
 800df4c:	bd38      	pop	{r3, r4, r5, pc}
 800df4e:	68a2      	ldr	r2, [r4, #8]
 800df50:	1a2d      	subs	r5, r5, r0
 800df52:	6923      	ldr	r3, [r4, #16]
 800df54:	4402      	add	r2, r0
 800df56:	4418      	add	r0, r3
 800df58:	60a2      	str	r2, [r4, #8]
 800df5a:	6120      	str	r0, [r4, #16]
 800df5c:	4629      	mov	r1, r5
 800df5e:	2201      	movs	r2, #1
 800df60:	4620      	mov	r0, r4
 800df62:	f7ff ffc7 	bl	800def4 <ucdr_check_final_buffer_behavior_array>
 800df66:	2800      	cmp	r0, #0
 800df68:	d1f1      	bne.n	800df4e <ucdr_advance_buffer+0x1e>
 800df6a:	2301      	movs	r3, #1
 800df6c:	7563      	strb	r3, [r4, #21]
 800df6e:	bd38      	pop	{r3, r4, r5, pc}

0800df70 <ucdr_serialize_sequence_char>:
 800df70:	b570      	push	{r4, r5, r6, lr}
 800df72:	4615      	mov	r5, r2
 800df74:	460e      	mov	r6, r1
 800df76:	7d01      	ldrb	r1, [r0, #20]
 800df78:	4604      	mov	r4, r0
 800df7a:	f7fe ffc9 	bl	800cf10 <ucdr_serialize_endian_uint32_t>
 800df7e:	b90d      	cbnz	r5, 800df84 <ucdr_serialize_sequence_char+0x14>
 800df80:	2001      	movs	r0, #1
 800df82:	bd70      	pop	{r4, r5, r6, pc}
 800df84:	462b      	mov	r3, r5
 800df86:	4632      	mov	r2, r6
 800df88:	7d21      	ldrb	r1, [r4, #20]
 800df8a:	4620      	mov	r0, r4
 800df8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800df90:	f7fe bbb0 	b.w	800c6f4 <ucdr_serialize_endian_array_char>

0800df94 <ucdr_deserialize_sequence_char>:
 800df94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df98:	461d      	mov	r5, r3
 800df9a:	4616      	mov	r6, r2
 800df9c:	460f      	mov	r7, r1
 800df9e:	461a      	mov	r2, r3
 800dfa0:	7d01      	ldrb	r1, [r0, #20]
 800dfa2:	4604      	mov	r4, r0
 800dfa4:	f7ff f8dc 	bl	800d160 <ucdr_deserialize_endian_uint32_t>
 800dfa8:	682b      	ldr	r3, [r5, #0]
 800dfaa:	429e      	cmp	r6, r3
 800dfac:	d201      	bcs.n	800dfb2 <ucdr_deserialize_sequence_char+0x1e>
 800dfae:	2201      	movs	r2, #1
 800dfb0:	75a2      	strb	r2, [r4, #22]
 800dfb2:	b913      	cbnz	r3, 800dfba <ucdr_deserialize_sequence_char+0x26>
 800dfb4:	2001      	movs	r0, #1
 800dfb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfba:	463a      	mov	r2, r7
 800dfbc:	7d21      	ldrb	r1, [r4, #20]
 800dfbe:	4620      	mov	r0, r4
 800dfc0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dfc4:	f7fe bbc8 	b.w	800c758 <ucdr_deserialize_endian_array_char>

0800dfc8 <ucdr_serialize_sequence_uint8_t>:
 800dfc8:	b570      	push	{r4, r5, r6, lr}
 800dfca:	4615      	mov	r5, r2
 800dfcc:	460e      	mov	r6, r1
 800dfce:	7d01      	ldrb	r1, [r0, #20]
 800dfd0:	4604      	mov	r4, r0
 800dfd2:	f7fe ff9d 	bl	800cf10 <ucdr_serialize_endian_uint32_t>
 800dfd6:	b90d      	cbnz	r5, 800dfdc <ucdr_serialize_sequence_uint8_t+0x14>
 800dfd8:	2001      	movs	r0, #1
 800dfda:	bd70      	pop	{r4, r5, r6, pc}
 800dfdc:	462b      	mov	r3, r5
 800dfde:	4632      	mov	r2, r6
 800dfe0:	7d21      	ldrb	r1, [r4, #20]
 800dfe2:	4620      	mov	r0, r4
 800dfe4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dfe8:	f7fe bc1c 	b.w	800c824 <ucdr_serialize_endian_array_uint8_t>

0800dfec <ucdr_deserialize_sequence_uint8_t>:
 800dfec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dff0:	461d      	mov	r5, r3
 800dff2:	4616      	mov	r6, r2
 800dff4:	460f      	mov	r7, r1
 800dff6:	461a      	mov	r2, r3
 800dff8:	7d01      	ldrb	r1, [r0, #20]
 800dffa:	4604      	mov	r4, r0
 800dffc:	f7ff f8b0 	bl	800d160 <ucdr_deserialize_endian_uint32_t>
 800e000:	682b      	ldr	r3, [r5, #0]
 800e002:	429e      	cmp	r6, r3
 800e004:	d201      	bcs.n	800e00a <ucdr_deserialize_sequence_uint8_t+0x1e>
 800e006:	2201      	movs	r2, #1
 800e008:	75a2      	strb	r2, [r4, #22]
 800e00a:	b913      	cbnz	r3, 800e012 <ucdr_deserialize_sequence_uint8_t+0x26>
 800e00c:	2001      	movs	r0, #1
 800e00e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e012:	463a      	mov	r2, r7
 800e014:	7d21      	ldrb	r1, [r4, #20]
 800e016:	4620      	mov	r0, r4
 800e018:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e01c:	f7fe bc68 	b.w	800c8f0 <ucdr_deserialize_endian_array_uint8_t>

0800e020 <racs_services__srv__Control_Event__get_type_description.part.0>:
 800e020:	b510      	push	{r4, lr}
 800e022:	2000      	movs	r0, #0
 800e024:	4c13      	ldr	r4, [pc, #76]	; (800e074 <racs_services__srv__Control_Event__get_type_description.part.0+0x54>)
 800e026:	f006 f81b 	bl	8014060 <builtin_interfaces__msg__Time__get_type_description>
 800e02a:	300c      	adds	r0, #12
 800e02c:	4b12      	ldr	r3, [pc, #72]	; (800e078 <racs_services__srv__Control_Event__get_type_description.part.0+0x58>)
 800e02e:	c807      	ldmia	r0, {r0, r1, r2}
 800e030:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e034:	7823      	ldrb	r3, [r4, #0]
 800e036:	b90b      	cbnz	r3, 800e03c <racs_services__srv__Control_Event__get_type_description.part.0+0x1c>
 800e038:	2301      	movs	r3, #1
 800e03a:	7023      	strb	r3, [r4, #0]
 800e03c:	4a0f      	ldr	r2, [pc, #60]	; (800e07c <racs_services__srv__Control_Event__get_type_description.part.0+0x5c>)
 800e03e:	4b10      	ldr	r3, [pc, #64]	; (800e080 <racs_services__srv__Control_Event__get_type_description.part.0+0x60>)
 800e040:	4c10      	ldr	r4, [pc, #64]	; (800e084 <racs_services__srv__Control_Event__get_type_description.part.0+0x64>)
 800e042:	ca07      	ldmia	r2, {r0, r1, r2}
 800e044:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e048:	7823      	ldrb	r3, [r4, #0]
 800e04a:	b90b      	cbnz	r3, 800e050 <racs_services__srv__Control_Event__get_type_description.part.0+0x30>
 800e04c:	2301      	movs	r3, #1
 800e04e:	7023      	strb	r3, [r4, #0]
 800e050:	4b0d      	ldr	r3, [pc, #52]	; (800e088 <racs_services__srv__Control_Event__get_type_description.part.0+0x68>)
 800e052:	4c0e      	ldr	r4, [pc, #56]	; (800e08c <racs_services__srv__Control_Event__get_type_description.part.0+0x6c>)
 800e054:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e058:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e05c:	2000      	movs	r0, #0
 800e05e:	3418      	adds	r4, #24
 800e060:	f005 ff9e 	bl	8013fa0 <service_msgs__msg__ServiceEventInfo__get_type_description>
 800e064:	300c      	adds	r0, #12
 800e066:	4b0a      	ldr	r3, [pc, #40]	; (800e090 <racs_services__srv__Control_Event__get_type_description.part.0+0x70>)
 800e068:	c807      	ldmia	r0, {r0, r1, r2}
 800e06a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e06e:	2201      	movs	r2, #1
 800e070:	701a      	strb	r2, [r3, #0]
 800e072:	bd10      	pop	{r4, pc}
 800e074:	2000b96c 	.word	0x2000b96c
 800e078:	20000d38 	.word	0x20000d38
 800e07c:	0801b26c 	.word	0x0801b26c
 800e080:	20000d50 	.word	0x20000d50
 800e084:	2000b96a 	.word	0x2000b96a
 800e088:	0801b248 	.word	0x0801b248
 800e08c:	20000d68 	.word	0x20000d68
 800e090:	2000b969 	.word	0x2000b969

0800e094 <racs_services__srv__Control__get_type_hash>:
 800e094:	4800      	ldr	r0, [pc, #0]	; (800e098 <racs_services__srv__Control__get_type_hash+0x4>)
 800e096:	4770      	bx	lr
 800e098:	20000c04 	.word	0x20000c04

0800e09c <racs_services__srv__Control_Request__get_type_hash>:
 800e09c:	4800      	ldr	r0, [pc, #0]	; (800e0a0 <racs_services__srv__Control_Request__get_type_hash+0x4>)
 800e09e:	4770      	bx	lr
 800e0a0:	20000be0 	.word	0x20000be0

0800e0a4 <racs_services__srv__Control_Response__get_type_hash>:
 800e0a4:	4800      	ldr	r0, [pc, #0]	; (800e0a8 <racs_services__srv__Control_Response__get_type_hash+0x4>)
 800e0a6:	4770      	bx	lr
 800e0a8:	20000bbc 	.word	0x20000bbc

0800e0ac <racs_services__srv__Control_Event__get_type_hash>:
 800e0ac:	4800      	ldr	r0, [pc, #0]	; (800e0b0 <racs_services__srv__Control_Event__get_type_hash+0x4>)
 800e0ae:	4770      	bx	lr
 800e0b0:	20000b98 	.word	0x20000b98

0800e0b4 <racs_services__srv__Control__get_type_description>:
 800e0b4:	b538      	push	{r3, r4, r5, lr}
 800e0b6:	4d1c      	ldr	r5, [pc, #112]	; (800e128 <racs_services__srv__Control__get_type_description+0x74>)
 800e0b8:	7828      	ldrb	r0, [r5, #0]
 800e0ba:	b108      	cbz	r0, 800e0c0 <racs_services__srv__Control__get_type_description+0xc>
 800e0bc:	481b      	ldr	r0, [pc, #108]	; (800e12c <racs_services__srv__Control__get_type_description+0x78>)
 800e0be:	bd38      	pop	{r3, r4, r5, pc}
 800e0c0:	f005 ffce 	bl	8014060 <builtin_interfaces__msg__Time__get_type_description>
 800e0c4:	300c      	adds	r0, #12
 800e0c6:	4b1a      	ldr	r3, [pc, #104]	; (800e130 <racs_services__srv__Control__get_type_description+0x7c>)
 800e0c8:	c807      	ldmia	r0, {r0, r1, r2}
 800e0ca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e0ce:	4b19      	ldr	r3, [pc, #100]	; (800e134 <racs_services__srv__Control__get_type_description+0x80>)
 800e0d0:	781b      	ldrb	r3, [r3, #0]
 800e0d2:	b32b      	cbz	r3, 800e120 <racs_services__srv__Control__get_type_description+0x6c>
 800e0d4:	4a18      	ldr	r2, [pc, #96]	; (800e138 <racs_services__srv__Control__get_type_description+0x84>)
 800e0d6:	4b19      	ldr	r3, [pc, #100]	; (800e13c <racs_services__srv__Control__get_type_description+0x88>)
 800e0d8:	4c19      	ldr	r4, [pc, #100]	; (800e140 <racs_services__srv__Control__get_type_description+0x8c>)
 800e0da:	ca07      	ldmia	r2, {r0, r1, r2}
 800e0dc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e0e0:	7823      	ldrb	r3, [r4, #0]
 800e0e2:	b90b      	cbnz	r3, 800e0e8 <racs_services__srv__Control__get_type_description+0x34>
 800e0e4:	2301      	movs	r3, #1
 800e0e6:	7023      	strb	r3, [r4, #0]
 800e0e8:	4a16      	ldr	r2, [pc, #88]	; (800e144 <racs_services__srv__Control__get_type_description+0x90>)
 800e0ea:	4b17      	ldr	r3, [pc, #92]	; (800e148 <racs_services__srv__Control__get_type_description+0x94>)
 800e0ec:	4c17      	ldr	r4, [pc, #92]	; (800e14c <racs_services__srv__Control__get_type_description+0x98>)
 800e0ee:	ca07      	ldmia	r2, {r0, r1, r2}
 800e0f0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e0f4:	7823      	ldrb	r3, [r4, #0]
 800e0f6:	b90b      	cbnz	r3, 800e0fc <racs_services__srv__Control__get_type_description+0x48>
 800e0f8:	2301      	movs	r3, #1
 800e0fa:	7023      	strb	r3, [r4, #0]
 800e0fc:	4b14      	ldr	r3, [pc, #80]	; (800e150 <racs_services__srv__Control__get_type_description+0x9c>)
 800e0fe:	4c15      	ldr	r4, [pc, #84]	; (800e154 <racs_services__srv__Control__get_type_description+0xa0>)
 800e100:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e104:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e108:	2000      	movs	r0, #0
 800e10a:	3418      	adds	r4, #24
 800e10c:	f005 ff48 	bl	8013fa0 <service_msgs__msg__ServiceEventInfo__get_type_description>
 800e110:	300c      	adds	r0, #12
 800e112:	2301      	movs	r3, #1
 800e114:	c807      	ldmia	r0, {r0, r1, r2}
 800e116:	702b      	strb	r3, [r5, #0]
 800e118:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e11c:	4803      	ldr	r0, [pc, #12]	; (800e12c <racs_services__srv__Control__get_type_description+0x78>)
 800e11e:	bd38      	pop	{r3, r4, r5, pc}
 800e120:	f7ff ff7e 	bl	800e020 <racs_services__srv__Control_Event__get_type_description.part.0>
 800e124:	e7d6      	b.n	800e0d4 <racs_services__srv__Control__get_type_description+0x20>
 800e126:	bf00      	nop
 800e128:	2000b96d 	.word	0x2000b96d
 800e12c:	0801b284 	.word	0x0801b284
 800e130:	20001200 	.word	0x20001200
 800e134:	2000b969 	.word	0x2000b969
 800e138:	0801b224 	.word	0x0801b224
 800e13c:	20001218 	.word	0x20001218
 800e140:	2000b96c 	.word	0x2000b96c
 800e144:	0801b26c 	.word	0x0801b26c
 800e148:	20001230 	.word	0x20001230
 800e14c:	2000b96a 	.word	0x2000b96a
 800e150:	0801b248 	.word	0x0801b248
 800e154:	20001248 	.word	0x20001248

0800e158 <racs_services__srv__Control_Request__get_type_description>:
 800e158:	4b03      	ldr	r3, [pc, #12]	; (800e168 <racs_services__srv__Control_Request__get_type_description+0x10>)
 800e15a:	781a      	ldrb	r2, [r3, #0]
 800e15c:	b90a      	cbnz	r2, 800e162 <racs_services__srv__Control_Request__get_type_description+0xa>
 800e15e:	2201      	movs	r2, #1
 800e160:	701a      	strb	r2, [r3, #0]
 800e162:	4802      	ldr	r0, [pc, #8]	; (800e16c <racs_services__srv__Control_Request__get_type_description+0x14>)
 800e164:	4770      	bx	lr
 800e166:	bf00      	nop
 800e168:	2000b96c 	.word	0x2000b96c
 800e16c:	0801b260 	.word	0x0801b260

0800e170 <racs_services__srv__Control_Response__get_type_description>:
 800e170:	4b03      	ldr	r3, [pc, #12]	; (800e180 <racs_services__srv__Control_Response__get_type_description+0x10>)
 800e172:	781a      	ldrb	r2, [r3, #0]
 800e174:	b90a      	cbnz	r2, 800e17a <racs_services__srv__Control_Response__get_type_description+0xa>
 800e176:	2201      	movs	r2, #1
 800e178:	701a      	strb	r2, [r3, #0]
 800e17a:	4802      	ldr	r0, [pc, #8]	; (800e184 <racs_services__srv__Control_Response__get_type_description+0x14>)
 800e17c:	4770      	bx	lr
 800e17e:	bf00      	nop
 800e180:	2000b96a 	.word	0x2000b96a
 800e184:	0801b23c 	.word	0x0801b23c

0800e188 <racs_services__srv__Control_Event__get_type_description>:
 800e188:	b508      	push	{r3, lr}
 800e18a:	4b04      	ldr	r3, [pc, #16]	; (800e19c <racs_services__srv__Control_Event__get_type_description+0x14>)
 800e18c:	781b      	ldrb	r3, [r3, #0]
 800e18e:	b10b      	cbz	r3, 800e194 <racs_services__srv__Control_Event__get_type_description+0xc>
 800e190:	4803      	ldr	r0, [pc, #12]	; (800e1a0 <racs_services__srv__Control_Event__get_type_description+0x18>)
 800e192:	bd08      	pop	{r3, pc}
 800e194:	f7ff ff44 	bl	800e020 <racs_services__srv__Control_Event__get_type_description.part.0>
 800e198:	4801      	ldr	r0, [pc, #4]	; (800e1a0 <racs_services__srv__Control_Event__get_type_description+0x18>)
 800e19a:	bd08      	pop	{r3, pc}
 800e19c:	2000b969 	.word	0x2000b969
 800e1a0:	0801b218 	.word	0x0801b218

0800e1a4 <racs_services__srv__Control__get_type_description_sources>:
 800e1a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1a8:	4b2c      	ldr	r3, [pc, #176]	; (800e25c <racs_services__srv__Control__get_type_description_sources+0xb8>)
 800e1aa:	f893 9000 	ldrb.w	r9, [r3]
 800e1ae:	f1b9 0f00 	cmp.w	r9, #0
 800e1b2:	d002      	beq.n	800e1ba <racs_services__srv__Control__get_type_description_sources+0x16>
 800e1b4:	482a      	ldr	r0, [pc, #168]	; (800e260 <racs_services__srv__Control__get_type_description_sources+0xbc>)
 800e1b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1ba:	4d2a      	ldr	r5, [pc, #168]	; (800e264 <racs_services__srv__Control__get_type_description_sources+0xc0>)
 800e1bc:	4c2a      	ldr	r4, [pc, #168]	; (800e268 <racs_services__srv__Control__get_type_description_sources+0xc4>)
 800e1be:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 800e270 <racs_services__srv__Control__get_type_description_sources+0xcc>
 800e1c2:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 800e274 <racs_services__srv__Control__get_type_description_sources+0xd0>
 800e1c6:	4e29      	ldr	r6, [pc, #164]	; (800e26c <racs_services__srv__Control__get_type_description_sources+0xc8>)
 800e1c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e1ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e1cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e1ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e1d0:	682b      	ldr	r3, [r5, #0]
 800e1d2:	4625      	mov	r5, r4
 800e1d4:	4648      	mov	r0, r9
 800e1d6:	f104 0a28 	add.w	sl, r4, #40	; 0x28
 800e1da:	f845 3b04 	str.w	r3, [r5], #4
 800e1de:	f104 074c 	add.w	r7, r4, #76	; 0x4c
 800e1e2:	f005 ff49 	bl	8014078 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 800e1e6:	4684      	mov	ip, r0
 800e1e8:	f104 0e70 	add.w	lr, r4, #112	; 0x70
 800e1ec:	3494      	adds	r4, #148	; 0x94
 800e1ee:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e1f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e1f4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e1f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e1fa:	f8dc 3000 	ldr.w	r3, [ip]
 800e1fe:	602b      	str	r3, [r5, #0]
 800e200:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 800e204:	e8aa 000f 	stmia.w	sl!, {r0, r1, r2, r3}
 800e208:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 800e20c:	e8aa 000f 	stmia.w	sl!, {r0, r1, r2, r3}
 800e210:	f8db 3000 	ldr.w	r3, [fp]
 800e214:	f8ca 3000 	str.w	r3, [sl]
 800e218:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 800e21c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800e21e:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 800e222:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800e224:	f8d8 3000 	ldr.w	r3, [r8]
 800e228:	603b      	str	r3, [r7, #0]
 800e22a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800e22c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e230:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800e232:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e236:	6833      	ldr	r3, [r6, #0]
 800e238:	4648      	mov	r0, r9
 800e23a:	f8ce 3000 	str.w	r3, [lr]
 800e23e:	f005 fec7 	bl	8013fd0 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source>
 800e242:	2301      	movs	r3, #1
 800e244:	4a05      	ldr	r2, [pc, #20]	; (800e25c <racs_services__srv__Control__get_type_description_sources+0xb8>)
 800e246:	4605      	mov	r5, r0
 800e248:	7013      	strb	r3, [r2, #0]
 800e24a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e24c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e24e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e250:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e252:	682b      	ldr	r3, [r5, #0]
 800e254:	4802      	ldr	r0, [pc, #8]	; (800e260 <racs_services__srv__Control__get_type_description_sources+0xbc>)
 800e256:	6023      	str	r3, [r4, #0]
 800e258:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e25c:	2000b968 	.word	0x2000b968
 800e260:	0801b35c 	.word	0x0801b35c
 800e264:	0801b314 	.word	0x0801b314
 800e268:	2000ba24 	.word	0x2000ba24
 800e26c:	0801b2cc 	.word	0x0801b2cc
 800e270:	0801b2a8 	.word	0x0801b2a8
 800e274:	0801b2f0 	.word	0x0801b2f0

0800e278 <racs_services__srv__Control_Request__get_type_description_sources>:
 800e278:	4b09      	ldr	r3, [pc, #36]	; (800e2a0 <racs_services__srv__Control_Request__get_type_description_sources+0x28>)
 800e27a:	781a      	ldrb	r2, [r3, #0]
 800e27c:	b96a      	cbnz	r2, 800e29a <racs_services__srv__Control_Request__get_type_description_sources+0x22>
 800e27e:	2201      	movs	r2, #1
 800e280:	b430      	push	{r4, r5}
 800e282:	4d08      	ldr	r5, [pc, #32]	; (800e2a4 <racs_services__srv__Control_Request__get_type_description_sources+0x2c>)
 800e284:	4c08      	ldr	r4, [pc, #32]	; (800e2a8 <racs_services__srv__Control_Request__get_type_description_sources+0x30>)
 800e286:	701a      	strb	r2, [r3, #0]
 800e288:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e28a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e28c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e28e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e290:	682b      	ldr	r3, [r5, #0]
 800e292:	4806      	ldr	r0, [pc, #24]	; (800e2ac <racs_services__srv__Control_Request__get_type_description_sources+0x34>)
 800e294:	6023      	str	r3, [r4, #0]
 800e296:	bc30      	pop	{r4, r5}
 800e298:	4770      	bx	lr
 800e29a:	4804      	ldr	r0, [pc, #16]	; (800e2ac <racs_services__srv__Control_Request__get_type_description_sources+0x34>)
 800e29c:	4770      	bx	lr
 800e29e:	bf00      	nop
 800e2a0:	2000b96f 	.word	0x2000b96f
 800e2a4:	0801b2f0 	.word	0x0801b2f0
 800e2a8:	2000bb20 	.word	0x2000bb20
 800e2ac:	0801b350 	.word	0x0801b350

0800e2b0 <racs_services__srv__Control_Response__get_type_description_sources>:
 800e2b0:	4b09      	ldr	r3, [pc, #36]	; (800e2d8 <racs_services__srv__Control_Response__get_type_description_sources+0x28>)
 800e2b2:	781a      	ldrb	r2, [r3, #0]
 800e2b4:	b96a      	cbnz	r2, 800e2d2 <racs_services__srv__Control_Response__get_type_description_sources+0x22>
 800e2b6:	2201      	movs	r2, #1
 800e2b8:	b430      	push	{r4, r5}
 800e2ba:	4d08      	ldr	r5, [pc, #32]	; (800e2dc <racs_services__srv__Control_Response__get_type_description_sources+0x2c>)
 800e2bc:	4c08      	ldr	r4, [pc, #32]	; (800e2e0 <racs_services__srv__Control_Response__get_type_description_sources+0x30>)
 800e2be:	701a      	strb	r2, [r3, #0]
 800e2c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e2c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e2c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e2c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e2c8:	682b      	ldr	r3, [r5, #0]
 800e2ca:	4806      	ldr	r0, [pc, #24]	; (800e2e4 <racs_services__srv__Control_Response__get_type_description_sources+0x34>)
 800e2cc:	6023      	str	r3, [r4, #0]
 800e2ce:	bc30      	pop	{r4, r5}
 800e2d0:	4770      	bx	lr
 800e2d2:	4804      	ldr	r0, [pc, #16]	; (800e2e4 <racs_services__srv__Control_Response__get_type_description_sources+0x34>)
 800e2d4:	4770      	bx	lr
 800e2d6:	bf00      	nop
 800e2d8:	2000b96e 	.word	0x2000b96e
 800e2dc:	0801b2cc 	.word	0x0801b2cc
 800e2e0:	2000bafc 	.word	0x2000bafc
 800e2e4:	0801b344 	.word	0x0801b344

0800e2e8 <racs_services__srv__Control_Event__get_type_description_sources>:
 800e2e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e2ec:	4e27      	ldr	r6, [pc, #156]	; (800e38c <racs_services__srv__Control_Event__get_type_description_sources+0xa4>)
 800e2ee:	f896 8000 	ldrb.w	r8, [r6]
 800e2f2:	f1b8 0f00 	cmp.w	r8, #0
 800e2f6:	d002      	beq.n	800e2fe <racs_services__srv__Control_Event__get_type_description_sources+0x16>
 800e2f8:	4825      	ldr	r0, [pc, #148]	; (800e390 <racs_services__srv__Control_Event__get_type_description_sources+0xa8>)
 800e2fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e2fe:	4d25      	ldr	r5, [pc, #148]	; (800e394 <racs_services__srv__Control_Event__get_type_description_sources+0xac>)
 800e300:	4c25      	ldr	r4, [pc, #148]	; (800e398 <racs_services__srv__Control_Event__get_type_description_sources+0xb0>)
 800e302:	f8df a09c 	ldr.w	sl, [pc, #156]	; 800e3a0 <racs_services__srv__Control_Event__get_type_description_sources+0xb8>
 800e306:	4f25      	ldr	r7, [pc, #148]	; (800e39c <racs_services__srv__Control_Event__get_type_description_sources+0xb4>)
 800e308:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e30a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e30c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e30e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e310:	682b      	ldr	r3, [r5, #0]
 800e312:	4625      	mov	r5, r4
 800e314:	4640      	mov	r0, r8
 800e316:	f104 0928 	add.w	r9, r4, #40	; 0x28
 800e31a:	f845 3b04 	str.w	r3, [r5], #4
 800e31e:	f005 feab 	bl	8014078 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 800e322:	4684      	mov	ip, r0
 800e324:	f104 0e4c 	add.w	lr, r4, #76	; 0x4c
 800e328:	3470      	adds	r4, #112	; 0x70
 800e32a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e32e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e330:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e334:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e336:	f8dc 3000 	ldr.w	r3, [ip]
 800e33a:	602b      	str	r3, [r5, #0]
 800e33c:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
 800e340:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 800e344:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
 800e348:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 800e34c:	f8da 3000 	ldr.w	r3, [sl]
 800e350:	f8c9 3000 	str.w	r3, [r9]
 800e354:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800e356:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e35a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800e35c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e360:	683b      	ldr	r3, [r7, #0]
 800e362:	4640      	mov	r0, r8
 800e364:	f8ce 3000 	str.w	r3, [lr]
 800e368:	f005 fe32 	bl	8013fd0 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source>
 800e36c:	2301      	movs	r3, #1
 800e36e:	4684      	mov	ip, r0
 800e370:	7033      	strb	r3, [r6, #0]
 800e372:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e376:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e378:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e37c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e37e:	f8dc 3000 	ldr.w	r3, [ip]
 800e382:	4803      	ldr	r0, [pc, #12]	; (800e390 <racs_services__srv__Control_Event__get_type_description_sources+0xa8>)
 800e384:	6023      	str	r3, [r4, #0]
 800e386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e38a:	bf00      	nop
 800e38c:	2000b96b 	.word	0x2000b96b
 800e390:	0801b338 	.word	0x0801b338
 800e394:	0801b2a8 	.word	0x0801b2a8
 800e398:	2000b970 	.word	0x2000b970
 800e39c:	0801b2cc 	.word	0x0801b2cc
 800e3a0:	0801b2f0 	.word	0x0801b2f0

0800e3a4 <racs_services__srv__Control_Request__Sequence__init.part.0>:
 800e3a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e3a8:	b086      	sub	sp, #24
 800e3aa:	460f      	mov	r7, r1
 800e3ac:	4680      	mov	r8, r0
 800e3ae:	a801      	add	r0, sp, #4
 800e3b0:	f7fd febc 	bl	800c12c <rcutils_get_default_allocator>
 800e3b4:	b367      	cbz	r7, 800e410 <racs_services__srv__Control_Request__Sequence__init.part.0+0x6c>
 800e3b6:	2110      	movs	r1, #16
 800e3b8:	4638      	mov	r0, r7
 800e3ba:	e9dd 3a04 	ldrd	r3, sl, [sp, #16]
 800e3be:	4652      	mov	r2, sl
 800e3c0:	4798      	blx	r3
 800e3c2:	4681      	mov	r9, r0
 800e3c4:	b370      	cbz	r0, 800e424 <racs_services__srv__Control_Request__Sequence__init.part.0+0x80>
 800e3c6:	1d06      	adds	r6, r0, #4
 800e3c8:	2500      	movs	r5, #0
 800e3ca:	e003      	b.n	800e3d4 <racs_services__srv__Control_Request__Sequence__init.part.0+0x30>
 800e3cc:	3501      	adds	r5, #1
 800e3ce:	3610      	adds	r6, #16
 800e3d0:	42af      	cmp	r7, r5
 800e3d2:	d01e      	beq.n	800e412 <racs_services__srv__Control_Request__Sequence__init.part.0+0x6e>
 800e3d4:	4630      	mov	r0, r6
 800e3d6:	2100      	movs	r1, #0
 800e3d8:	f7fd ff66 	bl	800c2a8 <rosidl_runtime_c__uint8__Sequence__init>
 800e3dc:	4604      	mov	r4, r0
 800e3de:	2800      	cmp	r0, #0
 800e3e0:	d1f4      	bne.n	800e3cc <racs_services__srv__Control_Request__Sequence__init.part.0+0x28>
 800e3e2:	4630      	mov	r0, r6
 800e3e4:	f7fd ff78 	bl	800c2d8 <rosidl_runtime_c__uint8__Sequence__fini>
 800e3e8:	42af      	cmp	r7, r5
 800e3ea:	d912      	bls.n	800e412 <racs_services__srv__Control_Request__Sequence__init.part.0+0x6e>
 800e3ec:	b145      	cbz	r5, 800e400 <racs_services__srv__Control_Request__Sequence__init.part.0+0x5c>
 800e3ee:	eb09 1605 	add.w	r6, r9, r5, lsl #4
 800e3f2:	3e0c      	subs	r6, #12
 800e3f4:	4630      	mov	r0, r6
 800e3f6:	3e10      	subs	r6, #16
 800e3f8:	f7fd ff6e 	bl	800c2d8 <rosidl_runtime_c__uint8__Sequence__fini>
 800e3fc:	3d01      	subs	r5, #1
 800e3fe:	d1f9      	bne.n	800e3f4 <racs_services__srv__Control_Request__Sequence__init.part.0+0x50>
 800e400:	4648      	mov	r0, r9
 800e402:	9b02      	ldr	r3, [sp, #8]
 800e404:	4651      	mov	r1, sl
 800e406:	4798      	blx	r3
 800e408:	4620      	mov	r0, r4
 800e40a:	b006      	add	sp, #24
 800e40c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e410:	46b9      	mov	r9, r7
 800e412:	2401      	movs	r4, #1
 800e414:	f8c8 7008 	str.w	r7, [r8, #8]
 800e418:	e9c8 9700 	strd	r9, r7, [r8]
 800e41c:	4620      	mov	r0, r4
 800e41e:	b006      	add	sp, #24
 800e420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e424:	4604      	mov	r4, r0
 800e426:	e7f9      	b.n	800e41c <racs_services__srv__Control_Request__Sequence__init.part.0+0x78>

0800e428 <racs_services__srv__Control_Response__Sequence__init.part.0>:
 800e428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e42c:	b086      	sub	sp, #24
 800e42e:	460f      	mov	r7, r1
 800e430:	4680      	mov	r8, r0
 800e432:	a801      	add	r0, sp, #4
 800e434:	f7fd fe7a 	bl	800c12c <rcutils_get_default_allocator>
 800e438:	b367      	cbz	r7, 800e494 <racs_services__srv__Control_Response__Sequence__init.part.0+0x6c>
 800e43a:	2110      	movs	r1, #16
 800e43c:	4638      	mov	r0, r7
 800e43e:	e9dd 3a04 	ldrd	r3, sl, [sp, #16]
 800e442:	4652      	mov	r2, sl
 800e444:	4798      	blx	r3
 800e446:	4681      	mov	r9, r0
 800e448:	b370      	cbz	r0, 800e4a8 <racs_services__srv__Control_Response__Sequence__init.part.0+0x80>
 800e44a:	1d06      	adds	r6, r0, #4
 800e44c:	2500      	movs	r5, #0
 800e44e:	e003      	b.n	800e458 <racs_services__srv__Control_Response__Sequence__init.part.0+0x30>
 800e450:	3501      	adds	r5, #1
 800e452:	3610      	adds	r6, #16
 800e454:	42af      	cmp	r7, r5
 800e456:	d01e      	beq.n	800e496 <racs_services__srv__Control_Response__Sequence__init.part.0+0x6e>
 800e458:	4630      	mov	r0, r6
 800e45a:	2100      	movs	r1, #0
 800e45c:	f7fd ff24 	bl	800c2a8 <rosidl_runtime_c__uint8__Sequence__init>
 800e460:	4604      	mov	r4, r0
 800e462:	2800      	cmp	r0, #0
 800e464:	d1f4      	bne.n	800e450 <racs_services__srv__Control_Response__Sequence__init.part.0+0x28>
 800e466:	4630      	mov	r0, r6
 800e468:	f7fd ff36 	bl	800c2d8 <rosidl_runtime_c__uint8__Sequence__fini>
 800e46c:	42af      	cmp	r7, r5
 800e46e:	d912      	bls.n	800e496 <racs_services__srv__Control_Response__Sequence__init.part.0+0x6e>
 800e470:	b145      	cbz	r5, 800e484 <racs_services__srv__Control_Response__Sequence__init.part.0+0x5c>
 800e472:	eb09 1605 	add.w	r6, r9, r5, lsl #4
 800e476:	3e0c      	subs	r6, #12
 800e478:	4630      	mov	r0, r6
 800e47a:	3e10      	subs	r6, #16
 800e47c:	f7fd ff2c 	bl	800c2d8 <rosidl_runtime_c__uint8__Sequence__fini>
 800e480:	3d01      	subs	r5, #1
 800e482:	d1f9      	bne.n	800e478 <racs_services__srv__Control_Response__Sequence__init.part.0+0x50>
 800e484:	4648      	mov	r0, r9
 800e486:	9b02      	ldr	r3, [sp, #8]
 800e488:	4651      	mov	r1, sl
 800e48a:	4798      	blx	r3
 800e48c:	4620      	mov	r0, r4
 800e48e:	b006      	add	sp, #24
 800e490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e494:	46b9      	mov	r9, r7
 800e496:	2401      	movs	r4, #1
 800e498:	f8c8 7008 	str.w	r7, [r8, #8]
 800e49c:	e9c8 9700 	strd	r9, r7, [r8]
 800e4a0:	4620      	mov	r0, r4
 800e4a2:	b006      	add	sp, #24
 800e4a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e4a8:	4604      	mov	r4, r0
 800e4aa:	e7f9      	b.n	800e4a0 <racs_services__srv__Control_Response__Sequence__init.part.0+0x78>

0800e4ac <racs_services__srv__Control_Request__init>:
 800e4ac:	b538      	push	{r3, r4, r5, lr}
 800e4ae:	b140      	cbz	r0, 800e4c2 <racs_services__srv__Control_Request__init+0x16>
 800e4b0:	1d05      	adds	r5, r0, #4
 800e4b2:	2100      	movs	r1, #0
 800e4b4:	4628      	mov	r0, r5
 800e4b6:	f7fd fef7 	bl	800c2a8 <rosidl_runtime_c__uint8__Sequence__init>
 800e4ba:	4604      	mov	r4, r0
 800e4bc:	b120      	cbz	r0, 800e4c8 <racs_services__srv__Control_Request__init+0x1c>
 800e4be:	4620      	mov	r0, r4
 800e4c0:	bd38      	pop	{r3, r4, r5, pc}
 800e4c2:	4604      	mov	r4, r0
 800e4c4:	4620      	mov	r0, r4
 800e4c6:	bd38      	pop	{r3, r4, r5, pc}
 800e4c8:	4628      	mov	r0, r5
 800e4ca:	f7fd ff05 	bl	800c2d8 <rosidl_runtime_c__uint8__Sequence__fini>
 800e4ce:	4620      	mov	r0, r4
 800e4d0:	bd38      	pop	{r3, r4, r5, pc}
 800e4d2:	bf00      	nop

0800e4d4 <racs_services__srv__Control_Request__fini>:
 800e4d4:	b110      	cbz	r0, 800e4dc <racs_services__srv__Control_Request__fini+0x8>
 800e4d6:	3004      	adds	r0, #4
 800e4d8:	f7fd befe 	b.w	800c2d8 <rosidl_runtime_c__uint8__Sequence__fini>
 800e4dc:	4770      	bx	lr
 800e4de:	bf00      	nop

0800e4e0 <racs_services__srv__Control_Request__copy>:
 800e4e0:	4603      	mov	r3, r0
 800e4e2:	460a      	mov	r2, r1
 800e4e4:	b150      	cbz	r0, 800e4fc <racs_services__srv__Control_Request__copy+0x1c>
 800e4e6:	b149      	cbz	r1, 800e4fc <racs_services__srv__Control_Request__copy+0x1c>
 800e4e8:	f8b0 c000 	ldrh.w	ip, [r0]
 800e4ec:	3104      	adds	r1, #4
 800e4ee:	3004      	adds	r0, #4
 800e4f0:	f8a2 c000 	strh.w	ip, [r2]
 800e4f4:	789b      	ldrb	r3, [r3, #2]
 800e4f6:	7093      	strb	r3, [r2, #2]
 800e4f8:	f7fd bf02 	b.w	800c300 <rosidl_runtime_c__uint8__Sequence__copy>
 800e4fc:	2000      	movs	r0, #0
 800e4fe:	4770      	bx	lr

0800e500 <racs_services__srv__Control_Request__Sequence__init>:
 800e500:	b108      	cbz	r0, 800e506 <racs_services__srv__Control_Request__Sequence__init+0x6>
 800e502:	f7ff bf4f 	b.w	800e3a4 <racs_services__srv__Control_Request__Sequence__init.part.0>
 800e506:	4770      	bx	lr

0800e508 <racs_services__srv__Control_Request__Sequence__fini>:
 800e508:	b320      	cbz	r0, 800e554 <racs_services__srv__Control_Request__Sequence__fini+0x4c>
 800e50a:	b530      	push	{r4, r5, lr}
 800e50c:	b087      	sub	sp, #28
 800e50e:	4605      	mov	r5, r0
 800e510:	a801      	add	r0, sp, #4
 800e512:	f7fd fe0b 	bl	800c12c <rcutils_get_default_allocator>
 800e516:	682b      	ldr	r3, [r5, #0]
 800e518:	b1b3      	cbz	r3, 800e548 <racs_services__srv__Control_Request__Sequence__fini+0x40>
 800e51a:	68aa      	ldr	r2, [r5, #8]
 800e51c:	b162      	cbz	r2, 800e538 <racs_services__srv__Control_Request__Sequence__fini+0x30>
 800e51e:	2400      	movs	r4, #0
 800e520:	eb13 1004 	adds.w	r0, r3, r4, lsl #4
 800e524:	f100 0004 	add.w	r0, r0, #4
 800e528:	d010      	beq.n	800e54c <racs_services__srv__Control_Request__Sequence__fini+0x44>
 800e52a:	f7fd fed5 	bl	800c2d8 <rosidl_runtime_c__uint8__Sequence__fini>
 800e52e:	3401      	adds	r4, #1
 800e530:	68aa      	ldr	r2, [r5, #8]
 800e532:	682b      	ldr	r3, [r5, #0]
 800e534:	4294      	cmp	r4, r2
 800e536:	d3f3      	bcc.n	800e520 <racs_services__srv__Control_Request__Sequence__fini+0x18>
 800e538:	4618      	mov	r0, r3
 800e53a:	9a02      	ldr	r2, [sp, #8]
 800e53c:	9905      	ldr	r1, [sp, #20]
 800e53e:	4790      	blx	r2
 800e540:	2300      	movs	r3, #0
 800e542:	e9c5 3300 	strd	r3, r3, [r5]
 800e546:	60ab      	str	r3, [r5, #8]
 800e548:	b007      	add	sp, #28
 800e54a:	bd30      	pop	{r4, r5, pc}
 800e54c:	3401      	adds	r4, #1
 800e54e:	4294      	cmp	r4, r2
 800e550:	d3e6      	bcc.n	800e520 <racs_services__srv__Control_Request__Sequence__fini+0x18>
 800e552:	e7f1      	b.n	800e538 <racs_services__srv__Control_Request__Sequence__fini+0x30>
 800e554:	4770      	bx	lr
 800e556:	bf00      	nop

0800e558 <racs_services__srv__Control_Response__init>:
 800e558:	b538      	push	{r3, r4, r5, lr}
 800e55a:	b140      	cbz	r0, 800e56e <racs_services__srv__Control_Response__init+0x16>
 800e55c:	1d05      	adds	r5, r0, #4
 800e55e:	2100      	movs	r1, #0
 800e560:	4628      	mov	r0, r5
 800e562:	f7fd fea1 	bl	800c2a8 <rosidl_runtime_c__uint8__Sequence__init>
 800e566:	4604      	mov	r4, r0
 800e568:	b120      	cbz	r0, 800e574 <racs_services__srv__Control_Response__init+0x1c>
 800e56a:	4620      	mov	r0, r4
 800e56c:	bd38      	pop	{r3, r4, r5, pc}
 800e56e:	4604      	mov	r4, r0
 800e570:	4620      	mov	r0, r4
 800e572:	bd38      	pop	{r3, r4, r5, pc}
 800e574:	4628      	mov	r0, r5
 800e576:	f7fd feaf 	bl	800c2d8 <rosidl_runtime_c__uint8__Sequence__fini>
 800e57a:	4620      	mov	r0, r4
 800e57c:	bd38      	pop	{r3, r4, r5, pc}
 800e57e:	bf00      	nop

0800e580 <racs_services__srv__Control_Response__fini>:
 800e580:	b110      	cbz	r0, 800e588 <racs_services__srv__Control_Response__fini+0x8>
 800e582:	3004      	adds	r0, #4
 800e584:	f7fd bea8 	b.w	800c2d8 <rosidl_runtime_c__uint8__Sequence__fini>
 800e588:	4770      	bx	lr
 800e58a:	bf00      	nop

0800e58c <racs_services__srv__Control_Response__copy>:
 800e58c:	b130      	cbz	r0, 800e59c <racs_services__srv__Control_Response__copy+0x10>
 800e58e:	b129      	cbz	r1, 800e59c <racs_services__srv__Control_Response__copy+0x10>
 800e590:	f850 3b04 	ldr.w	r3, [r0], #4
 800e594:	f841 3b04 	str.w	r3, [r1], #4
 800e598:	f7fd beb2 	b.w	800c300 <rosidl_runtime_c__uint8__Sequence__copy>
 800e59c:	2000      	movs	r0, #0
 800e59e:	4770      	bx	lr

0800e5a0 <racs_services__srv__Control_Response__Sequence__init>:
 800e5a0:	b108      	cbz	r0, 800e5a6 <racs_services__srv__Control_Response__Sequence__init+0x6>
 800e5a2:	f7ff bf41 	b.w	800e428 <racs_services__srv__Control_Response__Sequence__init.part.0>
 800e5a6:	4770      	bx	lr

0800e5a8 <racs_services__srv__Control_Response__Sequence__fini>:
 800e5a8:	b320      	cbz	r0, 800e5f4 <racs_services__srv__Control_Response__Sequence__fini+0x4c>
 800e5aa:	b530      	push	{r4, r5, lr}
 800e5ac:	b087      	sub	sp, #28
 800e5ae:	4605      	mov	r5, r0
 800e5b0:	a801      	add	r0, sp, #4
 800e5b2:	f7fd fdbb 	bl	800c12c <rcutils_get_default_allocator>
 800e5b6:	682b      	ldr	r3, [r5, #0]
 800e5b8:	b1b3      	cbz	r3, 800e5e8 <racs_services__srv__Control_Response__Sequence__fini+0x40>
 800e5ba:	68aa      	ldr	r2, [r5, #8]
 800e5bc:	b162      	cbz	r2, 800e5d8 <racs_services__srv__Control_Response__Sequence__fini+0x30>
 800e5be:	2400      	movs	r4, #0
 800e5c0:	eb13 1004 	adds.w	r0, r3, r4, lsl #4
 800e5c4:	f100 0004 	add.w	r0, r0, #4
 800e5c8:	d010      	beq.n	800e5ec <racs_services__srv__Control_Response__Sequence__fini+0x44>
 800e5ca:	f7fd fe85 	bl	800c2d8 <rosidl_runtime_c__uint8__Sequence__fini>
 800e5ce:	3401      	adds	r4, #1
 800e5d0:	68aa      	ldr	r2, [r5, #8]
 800e5d2:	682b      	ldr	r3, [r5, #0]
 800e5d4:	4294      	cmp	r4, r2
 800e5d6:	d3f3      	bcc.n	800e5c0 <racs_services__srv__Control_Response__Sequence__fini+0x18>
 800e5d8:	4618      	mov	r0, r3
 800e5da:	9a02      	ldr	r2, [sp, #8]
 800e5dc:	9905      	ldr	r1, [sp, #20]
 800e5de:	4790      	blx	r2
 800e5e0:	2300      	movs	r3, #0
 800e5e2:	e9c5 3300 	strd	r3, r3, [r5]
 800e5e6:	60ab      	str	r3, [r5, #8]
 800e5e8:	b007      	add	sp, #28
 800e5ea:	bd30      	pop	{r4, r5, pc}
 800e5ec:	3401      	adds	r4, #1
 800e5ee:	4294      	cmp	r4, r2
 800e5f0:	d3e6      	bcc.n	800e5c0 <racs_services__srv__Control_Response__Sequence__fini+0x18>
 800e5f2:	e7f1      	b.n	800e5d8 <racs_services__srv__Control_Response__Sequence__fini+0x30>
 800e5f4:	4770      	bx	lr
 800e5f6:	bf00      	nop

0800e5f8 <racs_services__srv__Control_Event__init>:
 800e5f8:	b570      	push	{r4, r5, r6, lr}
 800e5fa:	4604      	mov	r4, r0
 800e5fc:	b086      	sub	sp, #24
 800e5fe:	2800      	cmp	r0, #0
 800e600:	d052      	beq.n	800e6a8 <racs_services__srv__Control_Event__init+0xb0>
 800e602:	f005 fd11 	bl	8014028 <service_msgs__msg__ServiceEventInfo__init>
 800e606:	4606      	mov	r6, r0
 800e608:	b178      	cbz	r0, 800e62a <racs_services__srv__Control_Event__init+0x32>
 800e60a:	2500      	movs	r5, #0
 800e60c:	a801      	add	r0, sp, #4
 800e60e:	f7fd fd8d 	bl	800c12c <rcutils_get_default_allocator>
 800e612:	a801      	add	r0, sp, #4
 800e614:	6325      	str	r5, [r4, #48]	; 0x30
 800e616:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
 800e61a:	f7fd fd87 	bl	800c12c <rcutils_get_default_allocator>
 800e61e:	63e5      	str	r5, [r4, #60]	; 0x3c
 800e620:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e624:	4630      	mov	r0, r6
 800e626:	b006      	add	sp, #24
 800e628:	bd70      	pop	{r4, r5, r6, pc}
 800e62a:	4620      	mov	r0, r4
 800e62c:	f005 fd0e 	bl	801404c <service_msgs__msg__ServiceEventInfo__fini>
 800e630:	a801      	add	r0, sp, #4
 800e632:	f7fd fd7b 	bl	800c12c <rcutils_get_default_allocator>
 800e636:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e638:	b1b3      	cbz	r3, 800e668 <racs_services__srv__Control_Event__init+0x70>
 800e63a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800e63c:	b162      	cbz	r2, 800e658 <racs_services__srv__Control_Event__init+0x60>
 800e63e:	4635      	mov	r5, r6
 800e640:	eb13 1005 	adds.w	r0, r3, r5, lsl #4
 800e644:	f100 0004 	add.w	r0, r0, #4
 800e648:	d032      	beq.n	800e6b0 <racs_services__srv__Control_Event__init+0xb8>
 800e64a:	f7fd fe45 	bl	800c2d8 <rosidl_runtime_c__uint8__Sequence__fini>
 800e64e:	3501      	adds	r5, #1
 800e650:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800e652:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e654:	4295      	cmp	r5, r2
 800e656:	d3f3      	bcc.n	800e640 <racs_services__srv__Control_Event__init+0x48>
 800e658:	4618      	mov	r0, r3
 800e65a:	9a02      	ldr	r2, [sp, #8]
 800e65c:	9905      	ldr	r1, [sp, #20]
 800e65e:	4790      	blx	r2
 800e660:	2300      	movs	r3, #0
 800e662:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 800e666:	6323      	str	r3, [r4, #48]	; 0x30
 800e668:	a801      	add	r0, sp, #4
 800e66a:	f7fd fd5f 	bl	800c12c <rcutils_get_default_allocator>
 800e66e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e670:	2b00      	cmp	r3, #0
 800e672:	d0d7      	beq.n	800e624 <racs_services__srv__Control_Event__init+0x2c>
 800e674:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800e676:	b162      	cbz	r2, 800e692 <racs_services__srv__Control_Event__init+0x9a>
 800e678:	2500      	movs	r5, #0
 800e67a:	eb13 1005 	adds.w	r0, r3, r5, lsl #4
 800e67e:	f100 0004 	add.w	r0, r0, #4
 800e682:	d019      	beq.n	800e6b8 <racs_services__srv__Control_Event__init+0xc0>
 800e684:	f7fd fe28 	bl	800c2d8 <rosidl_runtime_c__uint8__Sequence__fini>
 800e688:	3501      	adds	r5, #1
 800e68a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800e68c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e68e:	4295      	cmp	r5, r2
 800e690:	d3f3      	bcc.n	800e67a <racs_services__srv__Control_Event__init+0x82>
 800e692:	4618      	mov	r0, r3
 800e694:	9a02      	ldr	r2, [sp, #8]
 800e696:	9905      	ldr	r1, [sp, #20]
 800e698:	4790      	blx	r2
 800e69a:	2300      	movs	r3, #0
 800e69c:	4630      	mov	r0, r6
 800e69e:	63e3      	str	r3, [r4, #60]	; 0x3c
 800e6a0:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 800e6a4:	b006      	add	sp, #24
 800e6a6:	bd70      	pop	{r4, r5, r6, pc}
 800e6a8:	4606      	mov	r6, r0
 800e6aa:	4630      	mov	r0, r6
 800e6ac:	b006      	add	sp, #24
 800e6ae:	bd70      	pop	{r4, r5, r6, pc}
 800e6b0:	3501      	adds	r5, #1
 800e6b2:	4295      	cmp	r5, r2
 800e6b4:	d3c4      	bcc.n	800e640 <racs_services__srv__Control_Event__init+0x48>
 800e6b6:	e7cf      	b.n	800e658 <racs_services__srv__Control_Event__init+0x60>
 800e6b8:	3501      	adds	r5, #1
 800e6ba:	4295      	cmp	r5, r2
 800e6bc:	d3dd      	bcc.n	800e67a <racs_services__srv__Control_Event__init+0x82>
 800e6be:	e7e8      	b.n	800e692 <racs_services__srv__Control_Event__init+0x9a>

0800e6c0 <racs_services__srv__Control_Event__fini>:
 800e6c0:	2800      	cmp	r0, #0
 800e6c2:	d046      	beq.n	800e752 <racs_services__srv__Control_Event__fini+0x92>
 800e6c4:	b530      	push	{r4, r5, lr}
 800e6c6:	b087      	sub	sp, #28
 800e6c8:	4604      	mov	r4, r0
 800e6ca:	f005 fcbf 	bl	801404c <service_msgs__msg__ServiceEventInfo__fini>
 800e6ce:	a801      	add	r0, sp, #4
 800e6d0:	f7fd fd2c 	bl	800c12c <rcutils_get_default_allocator>
 800e6d4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e6d6:	b1b3      	cbz	r3, 800e706 <racs_services__srv__Control_Event__fini+0x46>
 800e6d8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800e6da:	b162      	cbz	r2, 800e6f6 <racs_services__srv__Control_Event__fini+0x36>
 800e6dc:	2500      	movs	r5, #0
 800e6de:	eb13 1005 	adds.w	r0, r3, r5, lsl #4
 800e6e2:	f100 0004 	add.w	r0, r0, #4
 800e6e6:	d030      	beq.n	800e74a <racs_services__srv__Control_Event__fini+0x8a>
 800e6e8:	f7fd fdf6 	bl	800c2d8 <rosidl_runtime_c__uint8__Sequence__fini>
 800e6ec:	3501      	adds	r5, #1
 800e6ee:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800e6f0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e6f2:	4295      	cmp	r5, r2
 800e6f4:	d3f3      	bcc.n	800e6de <racs_services__srv__Control_Event__fini+0x1e>
 800e6f6:	4618      	mov	r0, r3
 800e6f8:	9a02      	ldr	r2, [sp, #8]
 800e6fa:	9905      	ldr	r1, [sp, #20]
 800e6fc:	4790      	blx	r2
 800e6fe:	2300      	movs	r3, #0
 800e700:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 800e704:	6323      	str	r3, [r4, #48]	; 0x30
 800e706:	a801      	add	r0, sp, #4
 800e708:	f7fd fd10 	bl	800c12c <rcutils_get_default_allocator>
 800e70c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e70e:	b1b3      	cbz	r3, 800e73e <racs_services__srv__Control_Event__fini+0x7e>
 800e710:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800e712:	b162      	cbz	r2, 800e72e <racs_services__srv__Control_Event__fini+0x6e>
 800e714:	2500      	movs	r5, #0
 800e716:	eb13 1005 	adds.w	r0, r3, r5, lsl #4
 800e71a:	f100 0004 	add.w	r0, r0, #4
 800e71e:	d010      	beq.n	800e742 <racs_services__srv__Control_Event__fini+0x82>
 800e720:	f7fd fdda 	bl	800c2d8 <rosidl_runtime_c__uint8__Sequence__fini>
 800e724:	3501      	adds	r5, #1
 800e726:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800e728:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e72a:	4295      	cmp	r5, r2
 800e72c:	d3f3      	bcc.n	800e716 <racs_services__srv__Control_Event__fini+0x56>
 800e72e:	4618      	mov	r0, r3
 800e730:	9a02      	ldr	r2, [sp, #8]
 800e732:	9905      	ldr	r1, [sp, #20]
 800e734:	4790      	blx	r2
 800e736:	2300      	movs	r3, #0
 800e738:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 800e73c:	63e3      	str	r3, [r4, #60]	; 0x3c
 800e73e:	b007      	add	sp, #28
 800e740:	bd30      	pop	{r4, r5, pc}
 800e742:	3501      	adds	r5, #1
 800e744:	4295      	cmp	r5, r2
 800e746:	d3e6      	bcc.n	800e716 <racs_services__srv__Control_Event__fini+0x56>
 800e748:	e7f1      	b.n	800e72e <racs_services__srv__Control_Event__fini+0x6e>
 800e74a:	3501      	adds	r5, #1
 800e74c:	4295      	cmp	r5, r2
 800e74e:	d3c6      	bcc.n	800e6de <racs_services__srv__Control_Event__fini+0x1e>
 800e750:	e7d1      	b.n	800e6f6 <racs_services__srv__Control_Event__fini+0x36>
 800e752:	4770      	bx	lr

0800e754 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control>:
 800e754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e758:	2900      	cmp	r1, #0
 800e75a:	d04d      	beq.n	800e7f8 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control+0xa4>
 800e75c:	4605      	mov	r5, r0
 800e75e:	2800      	cmp	r0, #0
 800e760:	d04a      	beq.n	800e7f8 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control+0xa4>
 800e762:	460e      	mov	r6, r1
 800e764:	4698      	mov	r8, r3
 800e766:	2040      	movs	r0, #64	; 0x40
 800e768:	680b      	ldr	r3, [r1, #0]
 800e76a:	6909      	ldr	r1, [r1, #16]
 800e76c:	4617      	mov	r7, r2
 800e76e:	4798      	blx	r3
 800e770:	4604      	mov	r4, r0
 800e772:	f7ff ff41 	bl	800e5f8 <racs_services__srv__Control_Event__init>
 800e776:	4684      	mov	ip, r0
 800e778:	b370      	cbz	r0, 800e7d8 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control+0x84>
 800e77a:	782b      	ldrb	r3, [r5, #0]
 800e77c:	7023      	strb	r3, [r4, #0]
 800e77e:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
 800e782:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 800e786:	e9c4 2301 	strd	r2, r3, [r4, #4]
 800e78a:	e9c4 0108 	strd	r0, r1, [r4, #32]
 800e78e:	68e8      	ldr	r0, [r5, #12]
 800e790:	6929      	ldr	r1, [r5, #16]
 800e792:	696a      	ldr	r2, [r5, #20]
 800e794:	69ab      	ldr	r3, [r5, #24]
 800e796:	60e0      	str	r0, [r4, #12]
 800e798:	6121      	str	r1, [r4, #16]
 800e79a:	6162      	str	r2, [r4, #20]
 800e79c:	61a3      	str	r3, [r4, #24]
 800e79e:	b157      	cbz	r7, 800e7b6 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control+0x62>
 800e7a0:	2101      	movs	r1, #1
 800e7a2:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800e7a6:	f7ff feab 	bl	800e500 <racs_services__srv__Control_Request__Sequence__init>
 800e7aa:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800e7ac:	4638      	mov	r0, r7
 800e7ae:	f7ff fe97 	bl	800e4e0 <racs_services__srv__Control_Request__copy>
 800e7b2:	4603      	mov	r3, r0
 800e7b4:	b1c0      	cbz	r0, 800e7e8 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control+0x94>
 800e7b6:	f1b8 0f00 	cmp.w	r8, #0
 800e7ba:	d00a      	beq.n	800e7d2 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control+0x7e>
 800e7bc:	2101      	movs	r1, #1
 800e7be:	f104 0034 	add.w	r0, r4, #52	; 0x34
 800e7c2:	f7ff feed 	bl	800e5a0 <racs_services__srv__Control_Response__Sequence__init>
 800e7c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e7c8:	4640      	mov	r0, r8
 800e7ca:	f7ff fedf 	bl	800e58c <racs_services__srv__Control_Response__copy>
 800e7ce:	4603      	mov	r3, r0
 800e7d0:	b150      	cbz	r0, 800e7e8 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control+0x94>
 800e7d2:	4620      	mov	r0, r4
 800e7d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7d8:	4620      	mov	r0, r4
 800e7da:	4664      	mov	r4, ip
 800e7dc:	6873      	ldr	r3, [r6, #4]
 800e7de:	6931      	ldr	r1, [r6, #16]
 800e7e0:	4798      	blx	r3
 800e7e2:	4620      	mov	r0, r4
 800e7e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7e8:	4620      	mov	r0, r4
 800e7ea:	461c      	mov	r4, r3
 800e7ec:	6872      	ldr	r2, [r6, #4]
 800e7ee:	6931      	ldr	r1, [r6, #16]
 800e7f0:	4790      	blx	r2
 800e7f2:	4620      	mov	r0, r4
 800e7f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7f8:	2400      	movs	r4, #0
 800e7fa:	4620      	mov	r0, r4
 800e7fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e800 <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Control>:
 800e800:	b1b9      	cbz	r1, 800e832 <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Control+0x32>
 800e802:	b538      	push	{r3, r4, r5, lr}
 800e804:	4605      	mov	r5, r0
 800e806:	b190      	cbz	r0, 800e82e <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Control+0x2e>
 800e808:	460c      	mov	r4, r1
 800e80a:	f7ff ff59 	bl	800e6c0 <racs_services__srv__Control_Event__fini>
 800e80e:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 800e810:	b110      	cbz	r0, 800e818 <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Control+0x18>
 800e812:	6863      	ldr	r3, [r4, #4]
 800e814:	6921      	ldr	r1, [r4, #16]
 800e816:	4798      	blx	r3
 800e818:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800e81a:	b110      	cbz	r0, 800e822 <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Control+0x22>
 800e81c:	6863      	ldr	r3, [r4, #4]
 800e81e:	6921      	ldr	r1, [r4, #16]
 800e820:	4798      	blx	r3
 800e822:	4628      	mov	r0, r5
 800e824:	6863      	ldr	r3, [r4, #4]
 800e826:	6921      	ldr	r1, [r4, #16]
 800e828:	4798      	blx	r3
 800e82a:	2001      	movs	r0, #1
 800e82c:	bd38      	pop	{r3, r4, r5, pc}
 800e82e:	2000      	movs	r0, #0
 800e830:	bd38      	pop	{r3, r4, r5, pc}
 800e832:	2000      	movs	r0, #0
 800e834:	4770      	bx	lr
 800e836:	bf00      	nop

0800e838 <racs_services__srv__Setup_Event__get_type_description.part.0>:
 800e838:	b510      	push	{r4, lr}
 800e83a:	2000      	movs	r0, #0
 800e83c:	4c13      	ldr	r4, [pc, #76]	; (800e88c <racs_services__srv__Setup_Event__get_type_description.part.0+0x54>)
 800e83e:	f005 fc0f 	bl	8014060 <builtin_interfaces__msg__Time__get_type_description>
 800e842:	300c      	adds	r0, #12
 800e844:	4b12      	ldr	r3, [pc, #72]	; (800e890 <racs_services__srv__Setup_Event__get_type_description.part.0+0x58>)
 800e846:	c807      	ldmia	r0, {r0, r1, r2}
 800e848:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e84c:	7823      	ldrb	r3, [r4, #0]
 800e84e:	b90b      	cbnz	r3, 800e854 <racs_services__srv__Setup_Event__get_type_description.part.0+0x1c>
 800e850:	2301      	movs	r3, #1
 800e852:	7023      	strb	r3, [r4, #0]
 800e854:	4a0f      	ldr	r2, [pc, #60]	; (800e894 <racs_services__srv__Setup_Event__get_type_description.part.0+0x5c>)
 800e856:	4b10      	ldr	r3, [pc, #64]	; (800e898 <racs_services__srv__Setup_Event__get_type_description.part.0+0x60>)
 800e858:	4c10      	ldr	r4, [pc, #64]	; (800e89c <racs_services__srv__Setup_Event__get_type_description.part.0+0x64>)
 800e85a:	ca07      	ldmia	r2, {r0, r1, r2}
 800e85c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e860:	7823      	ldrb	r3, [r4, #0]
 800e862:	b90b      	cbnz	r3, 800e868 <racs_services__srv__Setup_Event__get_type_description.part.0+0x30>
 800e864:	2301      	movs	r3, #1
 800e866:	7023      	strb	r3, [r4, #0]
 800e868:	4b0d      	ldr	r3, [pc, #52]	; (800e8a0 <racs_services__srv__Setup_Event__get_type_description.part.0+0x68>)
 800e86a:	4c0e      	ldr	r4, [pc, #56]	; (800e8a4 <racs_services__srv__Setup_Event__get_type_description.part.0+0x6c>)
 800e86c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e870:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e874:	2000      	movs	r0, #0
 800e876:	3418      	adds	r4, #24
 800e878:	f005 fb92 	bl	8013fa0 <service_msgs__msg__ServiceEventInfo__get_type_description>
 800e87c:	300c      	adds	r0, #12
 800e87e:	4b0a      	ldr	r3, [pc, #40]	; (800e8a8 <racs_services__srv__Setup_Event__get_type_description.part.0+0x70>)
 800e880:	c807      	ldmia	r0, {r0, r1, r2}
 800e882:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e886:	2201      	movs	r2, #1
 800e888:	701a      	strb	r2, [r3, #0]
 800e88a:	bd10      	pop	{r4, pc}
 800e88c:	2000bb48 	.word	0x2000bb48
 800e890:	20001500 	.word	0x20001500
 800e894:	0801b3bc 	.word	0x0801b3bc
 800e898:	20001518 	.word	0x20001518
 800e89c:	2000bb46 	.word	0x2000bb46
 800e8a0:	0801b398 	.word	0x0801b398
 800e8a4:	20001530 	.word	0x20001530
 800e8a8:	2000bb45 	.word	0x2000bb45

0800e8ac <racs_services__srv__Setup__get_type_hash>:
 800e8ac:	4800      	ldr	r0, [pc, #0]	; (800e8b0 <racs_services__srv__Setup__get_type_hash+0x4>)
 800e8ae:	4770      	bx	lr
 800e8b0:	200013cc 	.word	0x200013cc

0800e8b4 <racs_services__srv__Setup_Request__get_type_hash>:
 800e8b4:	4800      	ldr	r0, [pc, #0]	; (800e8b8 <racs_services__srv__Setup_Request__get_type_hash+0x4>)
 800e8b6:	4770      	bx	lr
 800e8b8:	200013a8 	.word	0x200013a8

0800e8bc <racs_services__srv__Setup_Response__get_type_hash>:
 800e8bc:	4800      	ldr	r0, [pc, #0]	; (800e8c0 <racs_services__srv__Setup_Response__get_type_hash+0x4>)
 800e8be:	4770      	bx	lr
 800e8c0:	20001384 	.word	0x20001384

0800e8c4 <racs_services__srv__Setup_Event__get_type_hash>:
 800e8c4:	4800      	ldr	r0, [pc, #0]	; (800e8c8 <racs_services__srv__Setup_Event__get_type_hash+0x4>)
 800e8c6:	4770      	bx	lr
 800e8c8:	20001360 	.word	0x20001360

0800e8cc <racs_services__srv__Setup__get_type_description>:
 800e8cc:	b538      	push	{r3, r4, r5, lr}
 800e8ce:	4d1c      	ldr	r5, [pc, #112]	; (800e940 <racs_services__srv__Setup__get_type_description+0x74>)
 800e8d0:	7828      	ldrb	r0, [r5, #0]
 800e8d2:	b108      	cbz	r0, 800e8d8 <racs_services__srv__Setup__get_type_description+0xc>
 800e8d4:	481b      	ldr	r0, [pc, #108]	; (800e944 <racs_services__srv__Setup__get_type_description+0x78>)
 800e8d6:	bd38      	pop	{r3, r4, r5, pc}
 800e8d8:	f005 fbc2 	bl	8014060 <builtin_interfaces__msg__Time__get_type_description>
 800e8dc:	300c      	adds	r0, #12
 800e8de:	4b1a      	ldr	r3, [pc, #104]	; (800e948 <racs_services__srv__Setup__get_type_description+0x7c>)
 800e8e0:	c807      	ldmia	r0, {r0, r1, r2}
 800e8e2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e8e6:	4b19      	ldr	r3, [pc, #100]	; (800e94c <racs_services__srv__Setup__get_type_description+0x80>)
 800e8e8:	781b      	ldrb	r3, [r3, #0]
 800e8ea:	b32b      	cbz	r3, 800e938 <racs_services__srv__Setup__get_type_description+0x6c>
 800e8ec:	4a18      	ldr	r2, [pc, #96]	; (800e950 <racs_services__srv__Setup__get_type_description+0x84>)
 800e8ee:	4b19      	ldr	r3, [pc, #100]	; (800e954 <racs_services__srv__Setup__get_type_description+0x88>)
 800e8f0:	4c19      	ldr	r4, [pc, #100]	; (800e958 <racs_services__srv__Setup__get_type_description+0x8c>)
 800e8f2:	ca07      	ldmia	r2, {r0, r1, r2}
 800e8f4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e8f8:	7823      	ldrb	r3, [r4, #0]
 800e8fa:	b90b      	cbnz	r3, 800e900 <racs_services__srv__Setup__get_type_description+0x34>
 800e8fc:	2301      	movs	r3, #1
 800e8fe:	7023      	strb	r3, [r4, #0]
 800e900:	4a16      	ldr	r2, [pc, #88]	; (800e95c <racs_services__srv__Setup__get_type_description+0x90>)
 800e902:	4b17      	ldr	r3, [pc, #92]	; (800e960 <racs_services__srv__Setup__get_type_description+0x94>)
 800e904:	4c17      	ldr	r4, [pc, #92]	; (800e964 <racs_services__srv__Setup__get_type_description+0x98>)
 800e906:	ca07      	ldmia	r2, {r0, r1, r2}
 800e908:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e90c:	7823      	ldrb	r3, [r4, #0]
 800e90e:	b90b      	cbnz	r3, 800e914 <racs_services__srv__Setup__get_type_description+0x48>
 800e910:	2301      	movs	r3, #1
 800e912:	7023      	strb	r3, [r4, #0]
 800e914:	4b14      	ldr	r3, [pc, #80]	; (800e968 <racs_services__srv__Setup__get_type_description+0x9c>)
 800e916:	4c15      	ldr	r4, [pc, #84]	; (800e96c <racs_services__srv__Setup__get_type_description+0xa0>)
 800e918:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e91c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e920:	2000      	movs	r0, #0
 800e922:	3418      	adds	r4, #24
 800e924:	f005 fb3c 	bl	8013fa0 <service_msgs__msg__ServiceEventInfo__get_type_description>
 800e928:	300c      	adds	r0, #12
 800e92a:	2301      	movs	r3, #1
 800e92c:	c807      	ldmia	r0, {r0, r1, r2}
 800e92e:	702b      	strb	r3, [r5, #0]
 800e930:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e934:	4803      	ldr	r0, [pc, #12]	; (800e944 <racs_services__srv__Setup__get_type_description+0x78>)
 800e936:	bd38      	pop	{r3, r4, r5, pc}
 800e938:	f7ff ff7e 	bl	800e838 <racs_services__srv__Setup_Event__get_type_description.part.0>
 800e93c:	e7d6      	b.n	800e8ec <racs_services__srv__Setup__get_type_description+0x20>
 800e93e:	bf00      	nop
 800e940:	2000bb49 	.word	0x2000bb49
 800e944:	0801b3d4 	.word	0x0801b3d4
 800e948:	20001958 	.word	0x20001958
 800e94c:	2000bb45 	.word	0x2000bb45
 800e950:	0801b374 	.word	0x0801b374
 800e954:	20001970 	.word	0x20001970
 800e958:	2000bb48 	.word	0x2000bb48
 800e95c:	0801b3bc 	.word	0x0801b3bc
 800e960:	20001988 	.word	0x20001988
 800e964:	2000bb46 	.word	0x2000bb46
 800e968:	0801b398 	.word	0x0801b398
 800e96c:	200019a0 	.word	0x200019a0

0800e970 <racs_services__srv__Setup_Request__get_type_description>:
 800e970:	4b03      	ldr	r3, [pc, #12]	; (800e980 <racs_services__srv__Setup_Request__get_type_description+0x10>)
 800e972:	781a      	ldrb	r2, [r3, #0]
 800e974:	b90a      	cbnz	r2, 800e97a <racs_services__srv__Setup_Request__get_type_description+0xa>
 800e976:	2201      	movs	r2, #1
 800e978:	701a      	strb	r2, [r3, #0]
 800e97a:	4802      	ldr	r0, [pc, #8]	; (800e984 <racs_services__srv__Setup_Request__get_type_description+0x14>)
 800e97c:	4770      	bx	lr
 800e97e:	bf00      	nop
 800e980:	2000bb48 	.word	0x2000bb48
 800e984:	0801b3b0 	.word	0x0801b3b0

0800e988 <racs_services__srv__Setup_Response__get_type_description>:
 800e988:	4b03      	ldr	r3, [pc, #12]	; (800e998 <racs_services__srv__Setup_Response__get_type_description+0x10>)
 800e98a:	781a      	ldrb	r2, [r3, #0]
 800e98c:	b90a      	cbnz	r2, 800e992 <racs_services__srv__Setup_Response__get_type_description+0xa>
 800e98e:	2201      	movs	r2, #1
 800e990:	701a      	strb	r2, [r3, #0]
 800e992:	4802      	ldr	r0, [pc, #8]	; (800e99c <racs_services__srv__Setup_Response__get_type_description+0x14>)
 800e994:	4770      	bx	lr
 800e996:	bf00      	nop
 800e998:	2000bb46 	.word	0x2000bb46
 800e99c:	0801b38c 	.word	0x0801b38c

0800e9a0 <racs_services__srv__Setup_Event__get_type_description>:
 800e9a0:	b508      	push	{r3, lr}
 800e9a2:	4b04      	ldr	r3, [pc, #16]	; (800e9b4 <racs_services__srv__Setup_Event__get_type_description+0x14>)
 800e9a4:	781b      	ldrb	r3, [r3, #0]
 800e9a6:	b10b      	cbz	r3, 800e9ac <racs_services__srv__Setup_Event__get_type_description+0xc>
 800e9a8:	4803      	ldr	r0, [pc, #12]	; (800e9b8 <racs_services__srv__Setup_Event__get_type_description+0x18>)
 800e9aa:	bd08      	pop	{r3, pc}
 800e9ac:	f7ff ff44 	bl	800e838 <racs_services__srv__Setup_Event__get_type_description.part.0>
 800e9b0:	4801      	ldr	r0, [pc, #4]	; (800e9b8 <racs_services__srv__Setup_Event__get_type_description+0x18>)
 800e9b2:	bd08      	pop	{r3, pc}
 800e9b4:	2000bb45 	.word	0x2000bb45
 800e9b8:	0801b368 	.word	0x0801b368

0800e9bc <racs_services__srv__Setup__get_type_description_sources>:
 800e9bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9c0:	4b2c      	ldr	r3, [pc, #176]	; (800ea74 <racs_services__srv__Setup__get_type_description_sources+0xb8>)
 800e9c2:	f893 9000 	ldrb.w	r9, [r3]
 800e9c6:	f1b9 0f00 	cmp.w	r9, #0
 800e9ca:	d002      	beq.n	800e9d2 <racs_services__srv__Setup__get_type_description_sources+0x16>
 800e9cc:	482a      	ldr	r0, [pc, #168]	; (800ea78 <racs_services__srv__Setup__get_type_description_sources+0xbc>)
 800e9ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9d2:	4d2a      	ldr	r5, [pc, #168]	; (800ea7c <racs_services__srv__Setup__get_type_description_sources+0xc0>)
 800e9d4:	4c2a      	ldr	r4, [pc, #168]	; (800ea80 <racs_services__srv__Setup__get_type_description_sources+0xc4>)
 800e9d6:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 800ea88 <racs_services__srv__Setup__get_type_description_sources+0xcc>
 800e9da:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 800ea8c <racs_services__srv__Setup__get_type_description_sources+0xd0>
 800e9de:	4e29      	ldr	r6, [pc, #164]	; (800ea84 <racs_services__srv__Setup__get_type_description_sources+0xc8>)
 800e9e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e9e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e9e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e9e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e9e8:	682b      	ldr	r3, [r5, #0]
 800e9ea:	4625      	mov	r5, r4
 800e9ec:	4648      	mov	r0, r9
 800e9ee:	f104 0a28 	add.w	sl, r4, #40	; 0x28
 800e9f2:	f845 3b04 	str.w	r3, [r5], #4
 800e9f6:	f104 074c 	add.w	r7, r4, #76	; 0x4c
 800e9fa:	f005 fb3d 	bl	8014078 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 800e9fe:	4684      	mov	ip, r0
 800ea00:	f104 0e70 	add.w	lr, r4, #112	; 0x70
 800ea04:	3494      	adds	r4, #148	; 0x94
 800ea06:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ea0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ea0c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ea10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ea12:	f8dc 3000 	ldr.w	r3, [ip]
 800ea16:	602b      	str	r3, [r5, #0]
 800ea18:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 800ea1c:	e8aa 000f 	stmia.w	sl!, {r0, r1, r2, r3}
 800ea20:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 800ea24:	e8aa 000f 	stmia.w	sl!, {r0, r1, r2, r3}
 800ea28:	f8db 3000 	ldr.w	r3, [fp]
 800ea2c:	f8ca 3000 	str.w	r3, [sl]
 800ea30:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 800ea34:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800ea36:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 800ea3a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800ea3c:	f8d8 3000 	ldr.w	r3, [r8]
 800ea40:	603b      	str	r3, [r7, #0]
 800ea42:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800ea44:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ea48:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800ea4a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ea4e:	6833      	ldr	r3, [r6, #0]
 800ea50:	4648      	mov	r0, r9
 800ea52:	f8ce 3000 	str.w	r3, [lr]
 800ea56:	f005 fabb 	bl	8013fd0 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source>
 800ea5a:	2301      	movs	r3, #1
 800ea5c:	4a05      	ldr	r2, [pc, #20]	; (800ea74 <racs_services__srv__Setup__get_type_description_sources+0xb8>)
 800ea5e:	4605      	mov	r5, r0
 800ea60:	7013      	strb	r3, [r2, #0]
 800ea62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ea64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ea66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ea68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ea6a:	682b      	ldr	r3, [r5, #0]
 800ea6c:	4802      	ldr	r0, [pc, #8]	; (800ea78 <racs_services__srv__Setup__get_type_description_sources+0xbc>)
 800ea6e:	6023      	str	r3, [r4, #0]
 800ea70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea74:	2000bb44 	.word	0x2000bb44
 800ea78:	0801b4ac 	.word	0x0801b4ac
 800ea7c:	0801b464 	.word	0x0801b464
 800ea80:	2000bc00 	.word	0x2000bc00
 800ea84:	0801b41c 	.word	0x0801b41c
 800ea88:	0801b3f8 	.word	0x0801b3f8
 800ea8c:	0801b440 	.word	0x0801b440

0800ea90 <racs_services__srv__Setup_Request__get_type_description_sources>:
 800ea90:	4b09      	ldr	r3, [pc, #36]	; (800eab8 <racs_services__srv__Setup_Request__get_type_description_sources+0x28>)
 800ea92:	781a      	ldrb	r2, [r3, #0]
 800ea94:	b96a      	cbnz	r2, 800eab2 <racs_services__srv__Setup_Request__get_type_description_sources+0x22>
 800ea96:	2201      	movs	r2, #1
 800ea98:	b430      	push	{r4, r5}
 800ea9a:	4d08      	ldr	r5, [pc, #32]	; (800eabc <racs_services__srv__Setup_Request__get_type_description_sources+0x2c>)
 800ea9c:	4c08      	ldr	r4, [pc, #32]	; (800eac0 <racs_services__srv__Setup_Request__get_type_description_sources+0x30>)
 800ea9e:	701a      	strb	r2, [r3, #0]
 800eaa0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eaa2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eaa4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eaa6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eaa8:	682b      	ldr	r3, [r5, #0]
 800eaaa:	4806      	ldr	r0, [pc, #24]	; (800eac4 <racs_services__srv__Setup_Request__get_type_description_sources+0x34>)
 800eaac:	6023      	str	r3, [r4, #0]
 800eaae:	bc30      	pop	{r4, r5}
 800eab0:	4770      	bx	lr
 800eab2:	4804      	ldr	r0, [pc, #16]	; (800eac4 <racs_services__srv__Setup_Request__get_type_description_sources+0x34>)
 800eab4:	4770      	bx	lr
 800eab6:	bf00      	nop
 800eab8:	2000bb4b 	.word	0x2000bb4b
 800eabc:	0801b440 	.word	0x0801b440
 800eac0:	2000bcfc 	.word	0x2000bcfc
 800eac4:	0801b4a0 	.word	0x0801b4a0

0800eac8 <racs_services__srv__Setup_Response__get_type_description_sources>:
 800eac8:	4b09      	ldr	r3, [pc, #36]	; (800eaf0 <racs_services__srv__Setup_Response__get_type_description_sources+0x28>)
 800eaca:	781a      	ldrb	r2, [r3, #0]
 800eacc:	b96a      	cbnz	r2, 800eaea <racs_services__srv__Setup_Response__get_type_description_sources+0x22>
 800eace:	2201      	movs	r2, #1
 800ead0:	b430      	push	{r4, r5}
 800ead2:	4d08      	ldr	r5, [pc, #32]	; (800eaf4 <racs_services__srv__Setup_Response__get_type_description_sources+0x2c>)
 800ead4:	4c08      	ldr	r4, [pc, #32]	; (800eaf8 <racs_services__srv__Setup_Response__get_type_description_sources+0x30>)
 800ead6:	701a      	strb	r2, [r3, #0]
 800ead8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eada:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eadc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eade:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eae0:	682b      	ldr	r3, [r5, #0]
 800eae2:	4806      	ldr	r0, [pc, #24]	; (800eafc <racs_services__srv__Setup_Response__get_type_description_sources+0x34>)
 800eae4:	6023      	str	r3, [r4, #0]
 800eae6:	bc30      	pop	{r4, r5}
 800eae8:	4770      	bx	lr
 800eaea:	4804      	ldr	r0, [pc, #16]	; (800eafc <racs_services__srv__Setup_Response__get_type_description_sources+0x34>)
 800eaec:	4770      	bx	lr
 800eaee:	bf00      	nop
 800eaf0:	2000bb4a 	.word	0x2000bb4a
 800eaf4:	0801b41c 	.word	0x0801b41c
 800eaf8:	2000bcd8 	.word	0x2000bcd8
 800eafc:	0801b494 	.word	0x0801b494

0800eb00 <racs_services__srv__Setup_Event__get_type_description_sources>:
 800eb00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb04:	4e27      	ldr	r6, [pc, #156]	; (800eba4 <racs_services__srv__Setup_Event__get_type_description_sources+0xa4>)
 800eb06:	f896 8000 	ldrb.w	r8, [r6]
 800eb0a:	f1b8 0f00 	cmp.w	r8, #0
 800eb0e:	d002      	beq.n	800eb16 <racs_services__srv__Setup_Event__get_type_description_sources+0x16>
 800eb10:	4825      	ldr	r0, [pc, #148]	; (800eba8 <racs_services__srv__Setup_Event__get_type_description_sources+0xa8>)
 800eb12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb16:	4d25      	ldr	r5, [pc, #148]	; (800ebac <racs_services__srv__Setup_Event__get_type_description_sources+0xac>)
 800eb18:	4c25      	ldr	r4, [pc, #148]	; (800ebb0 <racs_services__srv__Setup_Event__get_type_description_sources+0xb0>)
 800eb1a:	f8df a09c 	ldr.w	sl, [pc, #156]	; 800ebb8 <racs_services__srv__Setup_Event__get_type_description_sources+0xb8>
 800eb1e:	4f25      	ldr	r7, [pc, #148]	; (800ebb4 <racs_services__srv__Setup_Event__get_type_description_sources+0xb4>)
 800eb20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eb22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eb24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eb26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eb28:	682b      	ldr	r3, [r5, #0]
 800eb2a:	4625      	mov	r5, r4
 800eb2c:	4640      	mov	r0, r8
 800eb2e:	f104 0928 	add.w	r9, r4, #40	; 0x28
 800eb32:	f845 3b04 	str.w	r3, [r5], #4
 800eb36:	f005 fa9f 	bl	8014078 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 800eb3a:	4684      	mov	ip, r0
 800eb3c:	f104 0e4c 	add.w	lr, r4, #76	; 0x4c
 800eb40:	3470      	adds	r4, #112	; 0x70
 800eb42:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800eb46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800eb48:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800eb4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800eb4e:	f8dc 3000 	ldr.w	r3, [ip]
 800eb52:	602b      	str	r3, [r5, #0]
 800eb54:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
 800eb58:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 800eb5c:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
 800eb60:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 800eb64:	f8da 3000 	ldr.w	r3, [sl]
 800eb68:	f8c9 3000 	str.w	r3, [r9]
 800eb6c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800eb6e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800eb72:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800eb74:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800eb78:	683b      	ldr	r3, [r7, #0]
 800eb7a:	4640      	mov	r0, r8
 800eb7c:	f8ce 3000 	str.w	r3, [lr]
 800eb80:	f005 fa26 	bl	8013fd0 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source>
 800eb84:	2301      	movs	r3, #1
 800eb86:	4684      	mov	ip, r0
 800eb88:	7033      	strb	r3, [r6, #0]
 800eb8a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800eb8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eb90:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800eb94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eb96:	f8dc 3000 	ldr.w	r3, [ip]
 800eb9a:	4803      	ldr	r0, [pc, #12]	; (800eba8 <racs_services__srv__Setup_Event__get_type_description_sources+0xa8>)
 800eb9c:	6023      	str	r3, [r4, #0]
 800eb9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eba2:	bf00      	nop
 800eba4:	2000bb47 	.word	0x2000bb47
 800eba8:	0801b488 	.word	0x0801b488
 800ebac:	0801b3f8 	.word	0x0801b3f8
 800ebb0:	2000bb4c 	.word	0x2000bb4c
 800ebb4:	0801b41c 	.word	0x0801b41c
 800ebb8:	0801b440 	.word	0x0801b440

0800ebbc <racs_services__srv__Setup_Event__fini.part.0>:
 800ebbc:	b510      	push	{r4, lr}
 800ebbe:	b086      	sub	sp, #24
 800ebc0:	4604      	mov	r4, r0
 800ebc2:	f005 fa43 	bl	801404c <service_msgs__msg__ServiceEventInfo__fini>
 800ebc6:	a801      	add	r0, sp, #4
 800ebc8:	f7fd fab0 	bl	800c12c <rcutils_get_default_allocator>
 800ebcc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800ebce:	b130      	cbz	r0, 800ebde <racs_services__srv__Setup_Event__fini.part.0+0x22>
 800ebd0:	9b02      	ldr	r3, [sp, #8]
 800ebd2:	9905      	ldr	r1, [sp, #20]
 800ebd4:	4798      	blx	r3
 800ebd6:	2300      	movs	r3, #0
 800ebd8:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 800ebdc:	6323      	str	r3, [r4, #48]	; 0x30
 800ebde:	a801      	add	r0, sp, #4
 800ebe0:	f7fd faa4 	bl	800c12c <rcutils_get_default_allocator>
 800ebe4:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800ebe6:	b130      	cbz	r0, 800ebf6 <racs_services__srv__Setup_Event__fini.part.0+0x3a>
 800ebe8:	9b02      	ldr	r3, [sp, #8]
 800ebea:	9905      	ldr	r1, [sp, #20]
 800ebec:	4798      	blx	r3
 800ebee:	2300      	movs	r3, #0
 800ebf0:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 800ebf4:	63e3      	str	r3, [r4, #60]	; 0x3c
 800ebf6:	b006      	add	sp, #24
 800ebf8:	bd10      	pop	{r4, pc}
 800ebfa:	bf00      	nop

0800ebfc <racs_services__srv__Setup_Request__init>:
 800ebfc:	3800      	subs	r0, #0
 800ebfe:	bf18      	it	ne
 800ec00:	2001      	movne	r0, #1
 800ec02:	4770      	bx	lr

0800ec04 <racs_services__srv__Setup_Request__fini>:
 800ec04:	4770      	bx	lr
 800ec06:	bf00      	nop

0800ec08 <racs_services__srv__Setup_Request__copy>:
 800ec08:	4603      	mov	r3, r0
 800ec0a:	b1a0      	cbz	r0, 800ec36 <racs_services__srv__Setup_Request__copy+0x2e>
 800ec0c:	b199      	cbz	r1, 800ec36 <racs_services__srv__Setup_Request__copy+0x2e>
 800ec0e:	7802      	ldrb	r2, [r0, #0]
 800ec10:	2001      	movs	r0, #1
 800ec12:	700a      	strb	r2, [r1, #0]
 800ec14:	689a      	ldr	r2, [r3, #8]
 800ec16:	f8d3 c004 	ldr.w	ip, [r3, #4]
 800ec1a:	608a      	str	r2, [r1, #8]
 800ec1c:	691a      	ldr	r2, [r3, #16]
 800ec1e:	f8c1 c004 	str.w	ip, [r1, #4]
 800ec22:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800ec26:	610a      	str	r2, [r1, #16]
 800ec28:	695a      	ldr	r2, [r3, #20]
 800ec2a:	699b      	ldr	r3, [r3, #24]
 800ec2c:	f8c1 c00c 	str.w	ip, [r1, #12]
 800ec30:	614a      	str	r2, [r1, #20]
 800ec32:	618b      	str	r3, [r1, #24]
 800ec34:	4770      	bx	lr
 800ec36:	2000      	movs	r0, #0
 800ec38:	4770      	bx	lr
 800ec3a:	bf00      	nop

0800ec3c <racs_services__srv__Setup_Request__Sequence__init>:
 800ec3c:	b530      	push	{r4, r5, lr}
 800ec3e:	4604      	mov	r4, r0
 800ec40:	b087      	sub	sp, #28
 800ec42:	b148      	cbz	r0, 800ec58 <racs_services__srv__Setup_Request__Sequence__init+0x1c>
 800ec44:	460d      	mov	r5, r1
 800ec46:	a801      	add	r0, sp, #4
 800ec48:	f7fd fa70 	bl	800c12c <rcutils_get_default_allocator>
 800ec4c:	b935      	cbnz	r5, 800ec5c <racs_services__srv__Setup_Request__Sequence__init+0x20>
 800ec4e:	462b      	mov	r3, r5
 800ec50:	2001      	movs	r0, #1
 800ec52:	60a5      	str	r5, [r4, #8]
 800ec54:	e9c4 3500 	strd	r3, r5, [r4]
 800ec58:	b007      	add	sp, #28
 800ec5a:	bd30      	pop	{r4, r5, pc}
 800ec5c:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800ec60:	211c      	movs	r1, #28
 800ec62:	4628      	mov	r0, r5
 800ec64:	4798      	blx	r3
 800ec66:	4603      	mov	r3, r0
 800ec68:	2800      	cmp	r0, #0
 800ec6a:	d1f1      	bne.n	800ec50 <racs_services__srv__Setup_Request__Sequence__init+0x14>
 800ec6c:	e7f4      	b.n	800ec58 <racs_services__srv__Setup_Request__Sequence__init+0x1c>
 800ec6e:	bf00      	nop

0800ec70 <racs_services__srv__Setup_Request__Sequence__fini>:
 800ec70:	b180      	cbz	r0, 800ec94 <racs_services__srv__Setup_Request__Sequence__fini+0x24>
 800ec72:	b510      	push	{r4, lr}
 800ec74:	b086      	sub	sp, #24
 800ec76:	4604      	mov	r4, r0
 800ec78:	a801      	add	r0, sp, #4
 800ec7a:	f7fd fa57 	bl	800c12c <rcutils_get_default_allocator>
 800ec7e:	6820      	ldr	r0, [r4, #0]
 800ec80:	b130      	cbz	r0, 800ec90 <racs_services__srv__Setup_Request__Sequence__fini+0x20>
 800ec82:	9b02      	ldr	r3, [sp, #8]
 800ec84:	9905      	ldr	r1, [sp, #20]
 800ec86:	4798      	blx	r3
 800ec88:	2300      	movs	r3, #0
 800ec8a:	e9c4 3300 	strd	r3, r3, [r4]
 800ec8e:	60a3      	str	r3, [r4, #8]
 800ec90:	b006      	add	sp, #24
 800ec92:	bd10      	pop	{r4, pc}
 800ec94:	4770      	bx	lr
 800ec96:	bf00      	nop

0800ec98 <racs_services__srv__Setup_Response__init>:
 800ec98:	3800      	subs	r0, #0
 800ec9a:	bf18      	it	ne
 800ec9c:	2001      	movne	r0, #1
 800ec9e:	4770      	bx	lr

0800eca0 <racs_services__srv__Setup_Response__fini>:
 800eca0:	4770      	bx	lr
 800eca2:	bf00      	nop

0800eca4 <racs_services__srv__Setup_Response__copy>:
 800eca4:	b120      	cbz	r0, 800ecb0 <racs_services__srv__Setup_Response__copy+0xc>
 800eca6:	b119      	cbz	r1, 800ecb0 <racs_services__srv__Setup_Response__copy+0xc>
 800eca8:	7803      	ldrb	r3, [r0, #0]
 800ecaa:	2001      	movs	r0, #1
 800ecac:	700b      	strb	r3, [r1, #0]
 800ecae:	4770      	bx	lr
 800ecb0:	2000      	movs	r0, #0
 800ecb2:	4770      	bx	lr

0800ecb4 <racs_services__srv__Setup_Response__Sequence__init>:
 800ecb4:	b530      	push	{r4, r5, lr}
 800ecb6:	4604      	mov	r4, r0
 800ecb8:	b087      	sub	sp, #28
 800ecba:	b148      	cbz	r0, 800ecd0 <racs_services__srv__Setup_Response__Sequence__init+0x1c>
 800ecbc:	460d      	mov	r5, r1
 800ecbe:	a801      	add	r0, sp, #4
 800ecc0:	f7fd fa34 	bl	800c12c <rcutils_get_default_allocator>
 800ecc4:	b935      	cbnz	r5, 800ecd4 <racs_services__srv__Setup_Response__Sequence__init+0x20>
 800ecc6:	462b      	mov	r3, r5
 800ecc8:	2001      	movs	r0, #1
 800ecca:	60a5      	str	r5, [r4, #8]
 800eccc:	e9c4 3500 	strd	r3, r5, [r4]
 800ecd0:	b007      	add	sp, #28
 800ecd2:	bd30      	pop	{r4, r5, pc}
 800ecd4:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800ecd8:	2101      	movs	r1, #1
 800ecda:	4628      	mov	r0, r5
 800ecdc:	4798      	blx	r3
 800ecde:	4603      	mov	r3, r0
 800ece0:	2800      	cmp	r0, #0
 800ece2:	d1f1      	bne.n	800ecc8 <racs_services__srv__Setup_Response__Sequence__init+0x14>
 800ece4:	e7f4      	b.n	800ecd0 <racs_services__srv__Setup_Response__Sequence__init+0x1c>
 800ece6:	bf00      	nop

0800ece8 <racs_services__srv__Setup_Response__Sequence__fini>:
 800ece8:	b180      	cbz	r0, 800ed0c <racs_services__srv__Setup_Response__Sequence__fini+0x24>
 800ecea:	b510      	push	{r4, lr}
 800ecec:	b086      	sub	sp, #24
 800ecee:	4604      	mov	r4, r0
 800ecf0:	a801      	add	r0, sp, #4
 800ecf2:	f7fd fa1b 	bl	800c12c <rcutils_get_default_allocator>
 800ecf6:	6820      	ldr	r0, [r4, #0]
 800ecf8:	b130      	cbz	r0, 800ed08 <racs_services__srv__Setup_Response__Sequence__fini+0x20>
 800ecfa:	9b02      	ldr	r3, [sp, #8]
 800ecfc:	9905      	ldr	r1, [sp, #20]
 800ecfe:	4798      	blx	r3
 800ed00:	2300      	movs	r3, #0
 800ed02:	e9c4 3300 	strd	r3, r3, [r4]
 800ed06:	60a3      	str	r3, [r4, #8]
 800ed08:	b006      	add	sp, #24
 800ed0a:	bd10      	pop	{r4, pc}
 800ed0c:	4770      	bx	lr
 800ed0e:	bf00      	nop

0800ed10 <racs_services__srv__Setup_Event__init>:
 800ed10:	b570      	push	{r4, r5, r6, lr}
 800ed12:	4604      	mov	r4, r0
 800ed14:	b086      	sub	sp, #24
 800ed16:	b1c8      	cbz	r0, 800ed4c <racs_services__srv__Setup_Event__init+0x3c>
 800ed18:	f005 f986 	bl	8014028 <service_msgs__msg__ServiceEventInfo__init>
 800ed1c:	4605      	mov	r5, r0
 800ed1e:	b178      	cbz	r0, 800ed40 <racs_services__srv__Setup_Event__init+0x30>
 800ed20:	2600      	movs	r6, #0
 800ed22:	a801      	add	r0, sp, #4
 800ed24:	f7fd fa02 	bl	800c12c <rcutils_get_default_allocator>
 800ed28:	a801      	add	r0, sp, #4
 800ed2a:	6326      	str	r6, [r4, #48]	; 0x30
 800ed2c:	e9c4 660a 	strd	r6, r6, [r4, #40]	; 0x28
 800ed30:	f7fd f9fc 	bl	800c12c <rcutils_get_default_allocator>
 800ed34:	4628      	mov	r0, r5
 800ed36:	63e6      	str	r6, [r4, #60]	; 0x3c
 800ed38:	e9c4 660d 	strd	r6, r6, [r4, #52]	; 0x34
 800ed3c:	b006      	add	sp, #24
 800ed3e:	bd70      	pop	{r4, r5, r6, pc}
 800ed40:	4620      	mov	r0, r4
 800ed42:	f7ff ff3b 	bl	800ebbc <racs_services__srv__Setup_Event__fini.part.0>
 800ed46:	4628      	mov	r0, r5
 800ed48:	b006      	add	sp, #24
 800ed4a:	bd70      	pop	{r4, r5, r6, pc}
 800ed4c:	4605      	mov	r5, r0
 800ed4e:	4628      	mov	r0, r5
 800ed50:	b006      	add	sp, #24
 800ed52:	bd70      	pop	{r4, r5, r6, pc}

0800ed54 <racs_services__srv__Setup_Event__fini>:
 800ed54:	b1f0      	cbz	r0, 800ed94 <racs_services__srv__Setup_Event__fini+0x40>
 800ed56:	b510      	push	{r4, lr}
 800ed58:	b086      	sub	sp, #24
 800ed5a:	4604      	mov	r4, r0
 800ed5c:	f005 f976 	bl	801404c <service_msgs__msg__ServiceEventInfo__fini>
 800ed60:	a801      	add	r0, sp, #4
 800ed62:	f7fd f9e3 	bl	800c12c <rcutils_get_default_allocator>
 800ed66:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800ed68:	b130      	cbz	r0, 800ed78 <racs_services__srv__Setup_Event__fini+0x24>
 800ed6a:	9b02      	ldr	r3, [sp, #8]
 800ed6c:	9905      	ldr	r1, [sp, #20]
 800ed6e:	4798      	blx	r3
 800ed70:	2300      	movs	r3, #0
 800ed72:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 800ed76:	6323      	str	r3, [r4, #48]	; 0x30
 800ed78:	a801      	add	r0, sp, #4
 800ed7a:	f7fd f9d7 	bl	800c12c <rcutils_get_default_allocator>
 800ed7e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800ed80:	b130      	cbz	r0, 800ed90 <racs_services__srv__Setup_Event__fini+0x3c>
 800ed82:	9b02      	ldr	r3, [sp, #8]
 800ed84:	9905      	ldr	r1, [sp, #20]
 800ed86:	4798      	blx	r3
 800ed88:	2300      	movs	r3, #0
 800ed8a:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 800ed8e:	63e3      	str	r3, [r4, #60]	; 0x3c
 800ed90:	b006      	add	sp, #24
 800ed92:	bd10      	pop	{r4, pc}
 800ed94:	4770      	bx	lr
 800ed96:	bf00      	nop

0800ed98 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup>:
 800ed98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed9c:	2900      	cmp	r1, #0
 800ed9e:	d04d      	beq.n	800ee3c <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup+0xa4>
 800eda0:	4605      	mov	r5, r0
 800eda2:	2800      	cmp	r0, #0
 800eda4:	d04a      	beq.n	800ee3c <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup+0xa4>
 800eda6:	460e      	mov	r6, r1
 800eda8:	4698      	mov	r8, r3
 800edaa:	2040      	movs	r0, #64	; 0x40
 800edac:	680b      	ldr	r3, [r1, #0]
 800edae:	6909      	ldr	r1, [r1, #16]
 800edb0:	4617      	mov	r7, r2
 800edb2:	4798      	blx	r3
 800edb4:	4604      	mov	r4, r0
 800edb6:	f7ff ffab 	bl	800ed10 <racs_services__srv__Setup_Event__init>
 800edba:	4684      	mov	ip, r0
 800edbc:	b370      	cbz	r0, 800ee1c <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup+0x84>
 800edbe:	782b      	ldrb	r3, [r5, #0]
 800edc0:	7023      	strb	r3, [r4, #0]
 800edc2:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
 800edc6:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 800edca:	e9c4 2301 	strd	r2, r3, [r4, #4]
 800edce:	e9c4 0108 	strd	r0, r1, [r4, #32]
 800edd2:	68e8      	ldr	r0, [r5, #12]
 800edd4:	6929      	ldr	r1, [r5, #16]
 800edd6:	696a      	ldr	r2, [r5, #20]
 800edd8:	69ab      	ldr	r3, [r5, #24]
 800edda:	60e0      	str	r0, [r4, #12]
 800eddc:	6121      	str	r1, [r4, #16]
 800edde:	6162      	str	r2, [r4, #20]
 800ede0:	61a3      	str	r3, [r4, #24]
 800ede2:	b157      	cbz	r7, 800edfa <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup+0x62>
 800ede4:	2101      	movs	r1, #1
 800ede6:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800edea:	f7ff ff27 	bl	800ec3c <racs_services__srv__Setup_Request__Sequence__init>
 800edee:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800edf0:	4638      	mov	r0, r7
 800edf2:	f7ff ff09 	bl	800ec08 <racs_services__srv__Setup_Request__copy>
 800edf6:	4603      	mov	r3, r0
 800edf8:	b1c0      	cbz	r0, 800ee2c <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup+0x94>
 800edfa:	f1b8 0f00 	cmp.w	r8, #0
 800edfe:	d00a      	beq.n	800ee16 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup+0x7e>
 800ee00:	2101      	movs	r1, #1
 800ee02:	f104 0034 	add.w	r0, r4, #52	; 0x34
 800ee06:	f7ff ff55 	bl	800ecb4 <racs_services__srv__Setup_Response__Sequence__init>
 800ee0a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ee0c:	4640      	mov	r0, r8
 800ee0e:	f7ff ff49 	bl	800eca4 <racs_services__srv__Setup_Response__copy>
 800ee12:	4603      	mov	r3, r0
 800ee14:	b150      	cbz	r0, 800ee2c <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup+0x94>
 800ee16:	4620      	mov	r0, r4
 800ee18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee1c:	4620      	mov	r0, r4
 800ee1e:	4664      	mov	r4, ip
 800ee20:	6873      	ldr	r3, [r6, #4]
 800ee22:	6931      	ldr	r1, [r6, #16]
 800ee24:	4798      	blx	r3
 800ee26:	4620      	mov	r0, r4
 800ee28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee2c:	4620      	mov	r0, r4
 800ee2e:	461c      	mov	r4, r3
 800ee30:	6872      	ldr	r2, [r6, #4]
 800ee32:	6931      	ldr	r1, [r6, #16]
 800ee34:	4790      	blx	r2
 800ee36:	4620      	mov	r0, r4
 800ee38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee3c:	2400      	movs	r4, #0
 800ee3e:	4620      	mov	r0, r4
 800ee40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ee44 <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Setup>:
 800ee44:	b1b9      	cbz	r1, 800ee76 <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Setup+0x32>
 800ee46:	b538      	push	{r3, r4, r5, lr}
 800ee48:	4605      	mov	r5, r0
 800ee4a:	b190      	cbz	r0, 800ee72 <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Setup+0x2e>
 800ee4c:	460c      	mov	r4, r1
 800ee4e:	f7ff ff81 	bl	800ed54 <racs_services__srv__Setup_Event__fini>
 800ee52:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 800ee54:	b110      	cbz	r0, 800ee5c <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Setup+0x18>
 800ee56:	6863      	ldr	r3, [r4, #4]
 800ee58:	6921      	ldr	r1, [r4, #16]
 800ee5a:	4798      	blx	r3
 800ee5c:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800ee5e:	b110      	cbz	r0, 800ee66 <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Setup+0x22>
 800ee60:	6863      	ldr	r3, [r4, #4]
 800ee62:	6921      	ldr	r1, [r4, #16]
 800ee64:	4798      	blx	r3
 800ee66:	4628      	mov	r0, r5
 800ee68:	6863      	ldr	r3, [r4, #4]
 800ee6a:	6921      	ldr	r1, [r4, #16]
 800ee6c:	4798      	blx	r3
 800ee6e:	2001      	movs	r0, #1
 800ee70:	bd38      	pop	{r3, r4, r5, pc}
 800ee72:	2000      	movs	r0, #0
 800ee74:	bd38      	pop	{r3, r4, r5, pc}
 800ee76:	2000      	movs	r0, #0
 800ee78:	4770      	bx	lr
 800ee7a:	bf00      	nop

0800ee7c <rcl_client_get_rmw_handle>:
 800ee7c:	b118      	cbz	r0, 800ee86 <rcl_client_get_rmw_handle+0xa>
 800ee7e:	6800      	ldr	r0, [r0, #0]
 800ee80:	b108      	cbz	r0, 800ee86 <rcl_client_get_rmw_handle+0xa>
 800ee82:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 800ee86:	4770      	bx	lr

0800ee88 <rcl_send_request>:
 800ee88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee8a:	b08b      	sub	sp, #44	; 0x2c
 800ee8c:	b1e8      	cbz	r0, 800eeca <rcl_send_request+0x42>
 800ee8e:	4604      	mov	r4, r0
 800ee90:	6800      	ldr	r0, [r0, #0]
 800ee92:	b1d0      	cbz	r0, 800eeca <rcl_send_request+0x42>
 800ee94:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 800ee98:	b1bb      	cbz	r3, 800eeca <rcl_send_request+0x42>
 800ee9a:	460f      	mov	r7, r1
 800ee9c:	b1d1      	cbz	r1, 800eed4 <rcl_send_request+0x4c>
 800ee9e:	4615      	mov	r5, r2
 800eea0:	b1c2      	cbz	r2, 800eed4 <rcl_send_request+0x4c>
 800eea2:	2105      	movs	r1, #5
 800eea4:	f500 7088 	add.w	r0, r0, #272	; 0x110
 800eea8:	f002 fef2 	bl	8011c90 <__atomic_load_8>
 800eeac:	6823      	ldr	r3, [r4, #0]
 800eeae:	462a      	mov	r2, r5
 800eeb0:	e9c5 0100 	strd	r0, r1, [r5]
 800eeb4:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 800eeb8:	4639      	mov	r1, r7
 800eeba:	f003 ffc9 	bl	8012e50 <rmw_send_request>
 800eebe:	4606      	mov	r6, r0
 800eec0:	b160      	cbz	r0, 800eedc <rcl_send_request+0x54>
 800eec2:	2601      	movs	r6, #1
 800eec4:	4630      	mov	r0, r6
 800eec6:	b00b      	add	sp, #44	; 0x2c
 800eec8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eeca:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
 800eece:	4630      	mov	r0, r6
 800eed0:	b00b      	add	sp, #44	; 0x2c
 800eed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eed4:	260b      	movs	r6, #11
 800eed6:	4630      	mov	r0, r6
 800eed8:	b00b      	add	sp, #44	; 0x2c
 800eeda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eedc:	6820      	ldr	r0, [r4, #0]
 800eede:	2305      	movs	r3, #5
 800eee0:	f500 7088 	add.w	r0, r0, #272	; 0x110
 800eee4:	9300      	str	r3, [sp, #0]
 800eee6:	e9d5 2300 	ldrd	r2, r3, [r5]
 800eeea:	f002 ff3d 	bl	8011d68 <__atomic_exchange_8>
 800eeee:	6823      	ldr	r3, [r4, #0]
 800eef0:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 800eef4:	2a00      	cmp	r2, #0
 800eef6:	d0e5      	beq.n	800eec4 <rcl_send_request+0x3c>
 800eef8:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 800eefc:	a905      	add	r1, sp, #20
 800eefe:	f003 fbe1 	bl	80126c4 <rmw_get_gid_for_client>
 800ef02:	b970      	cbnz	r0, 800ef22 <rcl_send_request+0x9a>
 800ef04:	6820      	ldr	r0, [r4, #0]
 800ef06:	ab06      	add	r3, sp, #24
 800ef08:	4631      	mov	r1, r6
 800ef0a:	463a      	mov	r2, r7
 800ef0c:	f8d0 0118 	ldr.w	r0, [r0, #280]	; 0x118
 800ef10:	9302      	str	r3, [sp, #8]
 800ef12:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ef16:	e9cd 4500 	strd	r4, r5, [sp]
 800ef1a:	f001 f825 	bl	800ff68 <rcl_send_service_event_message>
 800ef1e:	4606      	mov	r6, r0
 800ef20:	e7d0      	b.n	800eec4 <rcl_send_request+0x3c>
 800ef22:	f000 f877 	bl	800f014 <rcl_convert_rmw_ret_to_rcl_ret>
 800ef26:	4606      	mov	r6, r0
 800ef28:	e7cc      	b.n	800eec4 <rcl_send_request+0x3c>
 800ef2a:	bf00      	nop
 800ef2c:	0000      	movs	r0, r0
	...

0800ef30 <rcl_take_response>:
 800ef30:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef32:	468e      	mov	lr, r1
 800ef34:	b095      	sub	sp, #84	; 0x54
 800ef36:	460c      	mov	r4, r1
 800ef38:	4616      	mov	r6, r2
 800ef3a:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
 800ef3e:	4605      	mov	r5, r0
 800ef40:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ef44:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ef48:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800ef4c:	e88c 0003 	stmia.w	ip, {r0, r1}
 800ef50:	2d00      	cmp	r5, #0
 800ef52:	d042      	beq.n	800efda <rcl_take_response+0xaa>
 800ef54:	682b      	ldr	r3, [r5, #0]
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d03f      	beq.n	800efda <rcl_take_response+0xaa>
 800ef5a:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 800ef5e:	2800      	cmp	r0, #0
 800ef60:	d03b      	beq.n	800efda <rcl_take_response+0xaa>
 800ef62:	2e00      	cmp	r6, #0
 800ef64:	d03c      	beq.n	800efe0 <rcl_take_response+0xb0>
 800ef66:	2300      	movs	r3, #0
 800ef68:	4632      	mov	r2, r6
 800ef6a:	a90a      	add	r1, sp, #40	; 0x28
 800ef6c:	f88d 3013 	strb.w	r3, [sp, #19]
 800ef70:	f10d 0313 	add.w	r3, sp, #19
 800ef74:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800eff8 <rcl_take_response+0xc8>
 800ef78:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800ef7c:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800ef80:	f004 f86e 	bl	8013060 <rmw_take_response>
 800ef84:	4607      	mov	r7, r0
 800ef86:	bb68      	cbnz	r0, 800efe4 <rcl_take_response+0xb4>
 800ef88:	f89d 3013 	ldrb.w	r3, [sp, #19]
 800ef8c:	b363      	cbz	r3, 800efe8 <rcl_take_response+0xb8>
 800ef8e:	682b      	ldr	r3, [r5, #0]
 800ef90:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 800ef94:	b19a      	cbz	r2, 800efbe <rcl_take_response+0x8e>
 800ef96:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 800ef9a:	a905      	add	r1, sp, #20
 800ef9c:	f003 fb92 	bl	80126c4 <rmw_get_gid_for_client>
 800efa0:	bb28      	cbnz	r0, 800efee <rcl_take_response+0xbe>
 800efa2:	6829      	ldr	r1, [r5, #0]
 800efa4:	ab06      	add	r3, sp, #24
 800efa6:	4632      	mov	r2, r6
 800efa8:	f8d1 0118 	ldr.w	r0, [r1, #280]	; 0x118
 800efac:	2103      	movs	r1, #3
 800efae:	9302      	str	r3, [sp, #8]
 800efb0:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800efb4:	e9cd 6700 	strd	r6, r7, [sp]
 800efb8:	f000 ffd6 	bl	800ff68 <rcl_send_service_event_message>
 800efbc:	4607      	mov	r7, r0
 800efbe:	f10d 0e38 	add.w	lr, sp, #56	; 0x38
 800efc2:	46a4      	mov	ip, r4
 800efc4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800efc8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800efcc:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800efd0:	e88c 0003 	stmia.w	ip, {r0, r1}
 800efd4:	4638      	mov	r0, r7
 800efd6:	b015      	add	sp, #84	; 0x54
 800efd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800efda:	f44f 77fa 	mov.w	r7, #500	; 0x1f4
 800efde:	e7ee      	b.n	800efbe <rcl_take_response+0x8e>
 800efe0:	270b      	movs	r7, #11
 800efe2:	e7ec      	b.n	800efbe <rcl_take_response+0x8e>
 800efe4:	2701      	movs	r7, #1
 800efe6:	e7ea      	b.n	800efbe <rcl_take_response+0x8e>
 800efe8:	f240 17f5 	movw	r7, #501	; 0x1f5
 800efec:	e7e7      	b.n	800efbe <rcl_take_response+0x8e>
 800efee:	f000 f811 	bl	800f014 <rcl_convert_rmw_ret_to_rcl_ret>
 800eff2:	4607      	mov	r7, r0
 800eff4:	e7e3      	b.n	800efbe <rcl_take_response+0x8e>
 800eff6:	bf00      	nop
	...

0800f000 <rcl_client_is_valid>:
 800f000:	b130      	cbz	r0, 800f010 <rcl_client_is_valid+0x10>
 800f002:	6800      	ldr	r0, [r0, #0]
 800f004:	b120      	cbz	r0, 800f010 <rcl_client_is_valid+0x10>
 800f006:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 800f00a:	3800      	subs	r0, #0
 800f00c:	bf18      	it	ne
 800f00e:	2001      	movne	r0, #1
 800f010:	4770      	bx	lr
 800f012:	bf00      	nop

0800f014 <rcl_convert_rmw_ret_to_rcl_ret>:
 800f014:	280b      	cmp	r0, #11
 800f016:	dc0d      	bgt.n	800f034 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 800f018:	2800      	cmp	r0, #0
 800f01a:	db09      	blt.n	800f030 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800f01c:	280b      	cmp	r0, #11
 800f01e:	d807      	bhi.n	800f030 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800f020:	e8df f000 	tbb	[pc, r0]
 800f024:	07060607 	.word	0x07060607
 800f028:	06060606 	.word	0x06060606
 800f02c:	07070606 	.word	0x07070606
 800f030:	2001      	movs	r0, #1
 800f032:	4770      	bx	lr
 800f034:	28cb      	cmp	r0, #203	; 0xcb
 800f036:	bf18      	it	ne
 800f038:	2001      	movne	r0, #1
 800f03a:	4770      	bx	lr

0800f03c <rcl_get_zero_initialized_context>:
 800f03c:	4a03      	ldr	r2, [pc, #12]	; (800f04c <rcl_get_zero_initialized_context+0x10>)
 800f03e:	4603      	mov	r3, r0
 800f040:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f044:	e883 0003 	stmia.w	r3, {r0, r1}
 800f048:	4618      	mov	r0, r3
 800f04a:	4770      	bx	lr
 800f04c:	0801b4b8 	.word	0x0801b4b8

0800f050 <rcl_context_is_valid>:
 800f050:	b118      	cbz	r0, 800f05a <rcl_context_is_valid+0xa>
 800f052:	6840      	ldr	r0, [r0, #4]
 800f054:	3800      	subs	r0, #0
 800f056:	bf18      	it	ne
 800f058:	2001      	movne	r0, #1
 800f05a:	4770      	bx	lr

0800f05c <__cleanup_context>:
 800f05c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f060:	4606      	mov	r6, r0
 800f062:	2300      	movs	r3, #0
 800f064:	6800      	ldr	r0, [r0, #0]
 800f066:	6073      	str	r3, [r6, #4]
 800f068:	2800      	cmp	r0, #0
 800f06a:	d049      	beq.n	800f100 <__cleanup_context+0xa4>
 800f06c:	6947      	ldr	r7, [r0, #20]
 800f06e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800f072:	f8d0 9010 	ldr.w	r9, [r0, #16]
 800f076:	b137      	cbz	r7, 800f086 <__cleanup_context+0x2a>
 800f078:	3014      	adds	r0, #20
 800f07a:	f000 f9e7 	bl	800f44c <rcl_init_options_fini>
 800f07e:	4607      	mov	r7, r0
 800f080:	2800      	cmp	r0, #0
 800f082:	d144      	bne.n	800f10e <__cleanup_context+0xb2>
 800f084:	6830      	ldr	r0, [r6, #0]
 800f086:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800f088:	b143      	cbz	r3, 800f09c <__cleanup_context+0x40>
 800f08a:	3028      	adds	r0, #40	; 0x28
 800f08c:	f003 fd44 	bl	8012b18 <rmw_context_fini>
 800f090:	b118      	cbz	r0, 800f09a <__cleanup_context+0x3e>
 800f092:	2f00      	cmp	r7, #0
 800f094:	d03e      	beq.n	800f114 <__cleanup_context+0xb8>
 800f096:	f7fd f87b 	bl	800c190 <rcutils_reset_error>
 800f09a:	6830      	ldr	r0, [r6, #0]
 800f09c:	6a03      	ldr	r3, [r0, #32]
 800f09e:	b1db      	cbz	r3, 800f0d8 <__cleanup_context+0x7c>
 800f0a0:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 800f0a4:	2a01      	cmp	r2, #1
 800f0a6:	f17c 0100 	sbcs.w	r1, ip, #0
 800f0aa:	db11      	blt.n	800f0d0 <__cleanup_context+0x74>
 800f0ac:	2400      	movs	r4, #0
 800f0ae:	4625      	mov	r5, r4
 800f0b0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800f0b4:	4649      	mov	r1, r9
 800f0b6:	b1b8      	cbz	r0, 800f0e8 <__cleanup_context+0x8c>
 800f0b8:	47c0      	blx	r8
 800f0ba:	6833      	ldr	r3, [r6, #0]
 800f0bc:	3401      	adds	r4, #1
 800f0be:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 800f0c2:	f145 0500 	adc.w	r5, r5, #0
 800f0c6:	6a1b      	ldr	r3, [r3, #32]
 800f0c8:	4294      	cmp	r4, r2
 800f0ca:	eb75 010c 	sbcs.w	r1, r5, ip
 800f0ce:	dbef      	blt.n	800f0b0 <__cleanup_context+0x54>
 800f0d0:	4618      	mov	r0, r3
 800f0d2:	4649      	mov	r1, r9
 800f0d4:	47c0      	blx	r8
 800f0d6:	6830      	ldr	r0, [r6, #0]
 800f0d8:	4649      	mov	r1, r9
 800f0da:	47c0      	blx	r8
 800f0dc:	2300      	movs	r3, #0
 800f0de:	4638      	mov	r0, r7
 800f0e0:	e9c6 3300 	strd	r3, r3, [r6]
 800f0e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f0e8:	3401      	adds	r4, #1
 800f0ea:	f145 0500 	adc.w	r5, r5, #0
 800f0ee:	4294      	cmp	r4, r2
 800f0f0:	eb75 010c 	sbcs.w	r1, r5, ip
 800f0f4:	dbdc      	blt.n	800f0b0 <__cleanup_context+0x54>
 800f0f6:	4618      	mov	r0, r3
 800f0f8:	4649      	mov	r1, r9
 800f0fa:	47c0      	blx	r8
 800f0fc:	6830      	ldr	r0, [r6, #0]
 800f0fe:	e7eb      	b.n	800f0d8 <__cleanup_context+0x7c>
 800f100:	4607      	mov	r7, r0
 800f102:	2300      	movs	r3, #0
 800f104:	4638      	mov	r0, r7
 800f106:	e9c6 3300 	strd	r3, r3, [r6]
 800f10a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f10e:	f7fd f83f 	bl	800c190 <rcutils_reset_error>
 800f112:	e7b7      	b.n	800f084 <__cleanup_context+0x28>
 800f114:	f7ff ff7e 	bl	800f014 <rcl_convert_rmw_ret_to_rcl_ret>
 800f118:	4607      	mov	r7, r0
 800f11a:	e7bc      	b.n	800f096 <__cleanup_context+0x3a>

0800f11c <rcl_init>:
 800f11c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f120:	1e05      	subs	r5, r0, #0
 800f122:	b0a7      	sub	sp, #156	; 0x9c
 800f124:	460e      	mov	r6, r1
 800f126:	4690      	mov	r8, r2
 800f128:	461f      	mov	r7, r3
 800f12a:	f340 80a0 	ble.w	800f26e <rcl_init+0x152>
 800f12e:	2900      	cmp	r1, #0
 800f130:	f000 80a0 	beq.w	800f274 <rcl_init+0x158>
 800f134:	f1a1 0e04 	sub.w	lr, r1, #4
 800f138:	f04f 0c00 	mov.w	ip, #0
 800f13c:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 800f140:	f10c 0c01 	add.w	ip, ip, #1
 800f144:	2c00      	cmp	r4, #0
 800f146:	f000 8095 	beq.w	800f274 <rcl_init+0x158>
 800f14a:	4565      	cmp	r5, ip
 800f14c:	d1f6      	bne.n	800f13c <rcl_init+0x20>
 800f14e:	f1b8 0f00 	cmp.w	r8, #0
 800f152:	f000 808f 	beq.w	800f274 <rcl_init+0x158>
 800f156:	f8d8 4000 	ldr.w	r4, [r8]
 800f15a:	2c00      	cmp	r4, #0
 800f15c:	f000 808a 	beq.w	800f274 <rcl_init+0x158>
 800f160:	f10d 0c84 	add.w	ip, sp, #132	; 0x84
 800f164:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f166:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f16a:	6823      	ldr	r3, [r4, #0]
 800f16c:	a821      	add	r0, sp, #132	; 0x84
 800f16e:	f8cc 3000 	str.w	r3, [ip]
 800f172:	f7fc ffe9 	bl	800c148 <rcutils_allocator_is_valid>
 800f176:	f080 0001 	eor.w	r0, r0, #1
 800f17a:	b2c0      	uxtb	r0, r0
 800f17c:	2800      	cmp	r0, #0
 800f17e:	d179      	bne.n	800f274 <rcl_init+0x158>
 800f180:	2f00      	cmp	r7, #0
 800f182:	d077      	beq.n	800f274 <rcl_init+0x158>
 800f184:	683b      	ldr	r3, [r7, #0]
 800f186:	2b00      	cmp	r3, #0
 800f188:	d179      	bne.n	800f27e <rcl_init+0x162>
 800f18a:	2198      	movs	r1, #152	; 0x98
 800f18c:	2001      	movs	r0, #1
 800f18e:	e9dd 3224 	ldrd	r3, r2, [sp, #144]	; 0x90
 800f192:	4798      	blx	r3
 800f194:	4604      	mov	r4, r0
 800f196:	6038      	str	r0, [r7, #0]
 800f198:	2800      	cmp	r0, #0
 800f19a:	f000 80cd 	beq.w	800f338 <rcl_init+0x21c>
 800f19e:	a802      	add	r0, sp, #8
 800f1a0:	f003 f8ca 	bl	8012338 <rmw_get_zero_initialized_context>
 800f1a4:	a902      	add	r1, sp, #8
 800f1a6:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800f1aa:	2270      	movs	r2, #112	; 0x70
 800f1ac:	f00a fb9f 	bl	80198ee <memcpy>
 800f1b0:	f8d7 e000 	ldr.w	lr, [r7]
 800f1b4:	f10d 0c84 	add.w	ip, sp, #132	; 0x84
 800f1b8:	4674      	mov	r4, lr
 800f1ba:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f1be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f1c0:	f8dc 3000 	ldr.w	r3, [ip]
 800f1c4:	f10e 0114 	add.w	r1, lr, #20
 800f1c8:	4640      	mov	r0, r8
 800f1ca:	6023      	str	r3, [r4, #0]
 800f1cc:	f000 f968 	bl	800f4a0 <rcl_init_options_copy>
 800f1d0:	4604      	mov	r4, r0
 800f1d2:	2800      	cmp	r0, #0
 800f1d4:	d144      	bne.n	800f260 <rcl_init+0x144>
 800f1d6:	f8d7 9000 	ldr.w	r9, [r7]
 800f1da:	ea4f 7ae5 	mov.w	sl, r5, asr #31
 800f1de:	f8c9 0020 	str.w	r0, [r9, #32]
 800f1e2:	f8c9 5018 	str.w	r5, [r9, #24]
 800f1e6:	f8c9 a01c 	str.w	sl, [r9, #28]
 800f1ea:	2d00      	cmp	r5, #0
 800f1ec:	d04e      	beq.n	800f28c <rcl_init+0x170>
 800f1ee:	2e00      	cmp	r6, #0
 800f1f0:	d04c      	beq.n	800f28c <rcl_init+0x170>
 800f1f2:	2104      	movs	r1, #4
 800f1f4:	4628      	mov	r0, r5
 800f1f6:	e9dd 3224 	ldrd	r3, r2, [sp, #144]	; 0x90
 800f1fa:	4798      	blx	r3
 800f1fc:	f8c9 0020 	str.w	r0, [r9, #32]
 800f200:	f8d7 9000 	ldr.w	r9, [r7]
 800f204:	f8d9 3020 	ldr.w	r3, [r9, #32]
 800f208:	46cb      	mov	fp, r9
 800f20a:	b343      	cbz	r3, 800f25e <rcl_init+0x142>
 800f20c:	2d01      	cmp	r5, #1
 800f20e:	f17a 0300 	sbcs.w	r3, sl, #0
 800f212:	db3b      	blt.n	800f28c <rcl_init+0x170>
 800f214:	2400      	movs	r4, #0
 800f216:	3e04      	subs	r6, #4
 800f218:	46a1      	mov	r9, r4
 800f21a:	e00b      	b.n	800f234 <rcl_init+0x118>
 800f21c:	6831      	ldr	r1, [r6, #0]
 800f21e:	f00a fb66 	bl	80198ee <memcpy>
 800f222:	3401      	adds	r4, #1
 800f224:	f149 0900 	adc.w	r9, r9, #0
 800f228:	45ca      	cmp	sl, r9
 800f22a:	bf08      	it	eq
 800f22c:	42a5      	cmpeq	r5, r4
 800f22e:	d02b      	beq.n	800f288 <rcl_init+0x16c>
 800f230:	f8d7 b000 	ldr.w	fp, [r7]
 800f234:	f856 0f04 	ldr.w	r0, [r6, #4]!
 800f238:	f7f1 f862 	bl	8000300 <strlen>
 800f23c:	1c42      	adds	r2, r0, #1
 800f23e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f240:	4610      	mov	r0, r2
 800f242:	9925      	ldr	r1, [sp, #148]	; 0x94
 800f244:	f8db b020 	ldr.w	fp, [fp, #32]
 800f248:	9201      	str	r2, [sp, #4]
 800f24a:	4798      	blx	r3
 800f24c:	683b      	ldr	r3, [r7, #0]
 800f24e:	f84b 0024 	str.w	r0, [fp, r4, lsl #2]
 800f252:	6a1b      	ldr	r3, [r3, #32]
 800f254:	9a01      	ldr	r2, [sp, #4]
 800f256:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800f25a:	2800      	cmp	r0, #0
 800f25c:	d1de      	bne.n	800f21c <rcl_init+0x100>
 800f25e:	240a      	movs	r4, #10
 800f260:	4638      	mov	r0, r7
 800f262:	f7ff fefb 	bl	800f05c <__cleanup_context>
 800f266:	4620      	mov	r0, r4
 800f268:	b027      	add	sp, #156	; 0x9c
 800f26a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f26e:	2900      	cmp	r1, #0
 800f270:	f43f af6d 	beq.w	800f14e <rcl_init+0x32>
 800f274:	240b      	movs	r4, #11
 800f276:	4620      	mov	r0, r4
 800f278:	b027      	add	sp, #156	; 0x9c
 800f27a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f27e:	2464      	movs	r4, #100	; 0x64
 800f280:	4620      	mov	r0, r4
 800f282:	b027      	add	sp, #156	; 0x9c
 800f284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f288:	f8d7 9000 	ldr.w	r9, [r7]
 800f28c:	493f      	ldr	r1, [pc, #252]	; (800f38c <rcl_init+0x270>)
 800f28e:	680b      	ldr	r3, [r1, #0]
 800f290:	3301      	adds	r3, #1
 800f292:	d04c      	beq.n	800f32e <rcl_init+0x212>
 800f294:	461a      	mov	r2, r3
 800f296:	2000      	movs	r0, #0
 800f298:	600b      	str	r3, [r1, #0]
 800f29a:	f8d9 5014 	ldr.w	r5, [r9, #20]
 800f29e:	607b      	str	r3, [r7, #4]
 800f2a0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f2a2:	3301      	adds	r3, #1
 800f2a4:	e9c5 2006 	strd	r2, r0, [r5, #24]
 800f2a8:	d05d      	beq.n	800f366 <rcl_init+0x24a>
 800f2aa:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d044      	beq.n	800f33c <rcl_init+0x220>
 800f2b2:	2b01      	cmp	r3, #1
 800f2b4:	d04e      	beq.n	800f354 <rcl_init+0x238>
 800f2b6:	f8d8 3000 	ldr.w	r3, [r8]
 800f2ba:	f105 0634 	add.w	r6, r5, #52	; 0x34
 800f2be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d05a      	beq.n	800f37c <rcl_init+0x260>
 800f2c6:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800f2c8:	b953      	cbnz	r3, 800f2e0 <rcl_init+0x1c4>
 800f2ca:	f895 0034 	ldrb.w	r0, [r5, #52]	; 0x34
 800f2ce:	2801      	cmp	r0, #1
 800f2d0:	d008      	beq.n	800f2e4 <rcl_init+0x1c8>
 800f2d2:	a921      	add	r1, sp, #132	; 0x84
 800f2d4:	4630      	mov	r0, r6
 800f2d6:	f008 f8e7 	bl	80174a8 <rcl_get_discovery_static_peers>
 800f2da:	4604      	mov	r4, r0
 800f2dc:	2800      	cmp	r0, #0
 800f2de:	d1bf      	bne.n	800f260 <rcl_init+0x144>
 800f2e0:	f895 0034 	ldrb.w	r0, [r5, #52]	; 0x34
 800f2e4:	f008 f8d6 	bl	8017494 <rcl_automatic_discovery_range_to_string>
 800f2e8:	683b      	ldr	r3, [r7, #0]
 800f2ea:	aa20      	add	r2, sp, #128	; 0x80
 800f2ec:	a91f      	add	r1, sp, #124	; 0x7c
 800f2ee:	695b      	ldr	r3, [r3, #20]
 800f2f0:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800f2f2:	f001 f957 	bl	80105a4 <rcl_validate_enclave_name>
 800f2f6:	4604      	mov	r4, r0
 800f2f8:	2800      	cmp	r0, #0
 800f2fa:	d1b1      	bne.n	800f260 <rcl_init+0x144>
 800f2fc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f2fe:	bb83      	cbnz	r3, 800f362 <rcl_init+0x246>
 800f300:	6839      	ldr	r1, [r7, #0]
 800f302:	694b      	ldr	r3, [r1, #20]
 800f304:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800f308:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800f30a:	f000 fc77 	bl	800fbfc <rcl_get_security_options_from_environment>
 800f30e:	4604      	mov	r4, r0
 800f310:	2800      	cmp	r0, #0
 800f312:	d1a5      	bne.n	800f260 <rcl_init+0x144>
 800f314:	6839      	ldr	r1, [r7, #0]
 800f316:	6948      	ldr	r0, [r1, #20]
 800f318:	3128      	adds	r1, #40	; 0x28
 800f31a:	3018      	adds	r0, #24
 800f31c:	f003 fac6 	bl	80128ac <rmw_init>
 800f320:	4604      	mov	r4, r0
 800f322:	2800      	cmp	r0, #0
 800f324:	d0a7      	beq.n	800f276 <rcl_init+0x15a>
 800f326:	f7ff fe75 	bl	800f014 <rcl_convert_rmw_ret_to_rcl_ret>
 800f32a:	4604      	mov	r4, r0
 800f32c:	e798      	b.n	800f260 <rcl_init+0x144>
 800f32e:	2201      	movs	r2, #1
 800f330:	4618      	mov	r0, r3
 800f332:	600a      	str	r2, [r1, #0]
 800f334:	4613      	mov	r3, r2
 800f336:	e7b0      	b.n	800f29a <rcl_init+0x17e>
 800f338:	240a      	movs	r4, #10
 800f33a:	e79c      	b.n	800f276 <rcl_init+0x15a>
 800f33c:	f105 0030 	add.w	r0, r5, #48	; 0x30
 800f340:	f000 f90c 	bl	800f55c <rcl_get_localhost_only>
 800f344:	4604      	mov	r4, r0
 800f346:	2800      	cmp	r0, #0
 800f348:	d18a      	bne.n	800f260 <rcl_init+0x144>
 800f34a:	683a      	ldr	r2, [r7, #0]
 800f34c:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 800f350:	6955      	ldr	r5, [r2, #20]
 800f352:	e7ae      	b.n	800f2b2 <rcl_init+0x196>
 800f354:	2302      	movs	r3, #2
 800f356:	2200      	movs	r2, #0
 800f358:	4618      	mov	r0, r3
 800f35a:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
 800f35e:	63ea      	str	r2, [r5, #60]	; 0x3c
 800f360:	e7c0      	b.n	800f2e4 <rcl_init+0x1c8>
 800f362:	2401      	movs	r4, #1
 800f364:	e77c      	b.n	800f260 <rcl_init+0x144>
 800f366:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800f36a:	f008 f903 	bl	8017574 <rcl_get_default_domain_id>
 800f36e:	4604      	mov	r4, r0
 800f370:	2800      	cmp	r0, #0
 800f372:	f47f af75 	bne.w	800f260 <rcl_init+0x144>
 800f376:	683b      	ldr	r3, [r7, #0]
 800f378:	695d      	ldr	r5, [r3, #20]
 800f37a:	e796      	b.n	800f2aa <rcl_init+0x18e>
 800f37c:	4630      	mov	r0, r6
 800f37e:	f008 f847 	bl	8017410 <rcl_get_automatic_discovery_range>
 800f382:	4604      	mov	r4, r0
 800f384:	2800      	cmp	r0, #0
 800f386:	d09e      	beq.n	800f2c6 <rcl_init+0x1aa>
 800f388:	e76a      	b.n	800f260 <rcl_init+0x144>
 800f38a:	bf00      	nop
 800f38c:	2000bd20 	.word	0x2000bd20

0800f390 <rcl_get_zero_initialized_init_options>:
 800f390:	2000      	movs	r0, #0
 800f392:	4770      	bx	lr

0800f394 <rcl_init_options_init>:
 800f394:	b084      	sub	sp, #16
 800f396:	b570      	push	{r4, r5, r6, lr}
 800f398:	b09e      	sub	sp, #120	; 0x78
 800f39a:	ad23      	add	r5, sp, #140	; 0x8c
 800f39c:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800f3a0:	2800      	cmp	r0, #0
 800f3a2:	d046      	beq.n	800f432 <rcl_init_options_init+0x9e>
 800f3a4:	6803      	ldr	r3, [r0, #0]
 800f3a6:	4604      	mov	r4, r0
 800f3a8:	b133      	cbz	r3, 800f3b8 <rcl_init_options_init+0x24>
 800f3aa:	2564      	movs	r5, #100	; 0x64
 800f3ac:	4628      	mov	r0, r5
 800f3ae:	b01e      	add	sp, #120	; 0x78
 800f3b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f3b4:	b004      	add	sp, #16
 800f3b6:	4770      	bx	lr
 800f3b8:	4628      	mov	r0, r5
 800f3ba:	f7fc fec5 	bl	800c148 <rcutils_allocator_is_valid>
 800f3be:	2800      	cmp	r0, #0
 800f3c0:	d037      	beq.n	800f432 <rcl_init_options_init+0x9e>
 800f3c2:	46ae      	mov	lr, r5
 800f3c4:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
 800f3c8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f3cc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f3d0:	f8de 3000 	ldr.w	r3, [lr]
 800f3d4:	2070      	movs	r0, #112	; 0x70
 800f3d6:	9927      	ldr	r1, [sp, #156]	; 0x9c
 800f3d8:	f8cc 3000 	str.w	r3, [ip]
 800f3dc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f3de:	4798      	blx	r3
 800f3e0:	4606      	mov	r6, r0
 800f3e2:	6020      	str	r0, [r4, #0]
 800f3e4:	b338      	cbz	r0, 800f436 <rcl_init_options_init+0xa2>
 800f3e6:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
 800f3ea:	4686      	mov	lr, r0
 800f3ec:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f3f0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f3f4:	f8dc 3000 	ldr.w	r3, [ip]
 800f3f8:	a802      	add	r0, sp, #8
 800f3fa:	f8ce 3000 	str.w	r3, [lr]
 800f3fe:	f002 ffaf 	bl	8012360 <rmw_get_zero_initialized_init_options>
 800f402:	2258      	movs	r2, #88	; 0x58
 800f404:	a902      	add	r1, sp, #8
 800f406:	f106 0018 	add.w	r0, r6, #24
 800f40a:	f00a fa70 	bl	80198ee <memcpy>
 800f40e:	ab26      	add	r3, sp, #152	; 0x98
 800f410:	6826      	ldr	r6, [r4, #0]
 800f412:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f416:	e88d 0003 	stmia.w	sp, {r0, r1}
 800f41a:	f106 0018 	add.w	r0, r6, #24
 800f41e:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 800f422:	f003 f973 	bl	801270c <rmw_init_options_init>
 800f426:	4605      	mov	r5, r0
 800f428:	b938      	cbnz	r0, 800f43a <rcl_init_options_init+0xa6>
 800f42a:	6823      	ldr	r3, [r4, #0]
 800f42c:	f883 0034 	strb.w	r0, [r3, #52]	; 0x34
 800f430:	e7bc      	b.n	800f3ac <rcl_init_options_init+0x18>
 800f432:	250b      	movs	r5, #11
 800f434:	e7ba      	b.n	800f3ac <rcl_init_options_init+0x18>
 800f436:	250a      	movs	r5, #10
 800f438:	e7b8      	b.n	800f3ac <rcl_init_options_init+0x18>
 800f43a:	9927      	ldr	r1, [sp, #156]	; 0x9c
 800f43c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800f43e:	6820      	ldr	r0, [r4, #0]
 800f440:	4798      	blx	r3
 800f442:	4628      	mov	r0, r5
 800f444:	f7ff fde6 	bl	800f014 <rcl_convert_rmw_ret_to_rcl_ret>
 800f448:	4605      	mov	r5, r0
 800f44a:	e7af      	b.n	800f3ac <rcl_init_options_init+0x18>

0800f44c <rcl_init_options_fini>:
 800f44c:	b530      	push	{r4, r5, lr}
 800f44e:	b087      	sub	sp, #28
 800f450:	b1f0      	cbz	r0, 800f490 <rcl_init_options_fini+0x44>
 800f452:	6803      	ldr	r3, [r0, #0]
 800f454:	4604      	mov	r4, r0
 800f456:	b1db      	cbz	r3, 800f490 <rcl_init_options_fini+0x44>
 800f458:	469c      	mov	ip, r3
 800f45a:	f10d 0e04 	add.w	lr, sp, #4
 800f45e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f462:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f466:	f8dc 3000 	ldr.w	r3, [ip]
 800f46a:	a801      	add	r0, sp, #4
 800f46c:	f8ce 3000 	str.w	r3, [lr]
 800f470:	f7fc fe6a 	bl	800c148 <rcutils_allocator_is_valid>
 800f474:	b160      	cbz	r0, 800f490 <rcl_init_options_fini+0x44>
 800f476:	6820      	ldr	r0, [r4, #0]
 800f478:	3018      	adds	r0, #24
 800f47a:	f003 f9e1 	bl	8012840 <rmw_init_options_fini>
 800f47e:	4605      	mov	r5, r0
 800f480:	b950      	cbnz	r0, 800f498 <rcl_init_options_fini+0x4c>
 800f482:	6820      	ldr	r0, [r4, #0]
 800f484:	9b02      	ldr	r3, [sp, #8]
 800f486:	9905      	ldr	r1, [sp, #20]
 800f488:	4798      	blx	r3
 800f48a:	4628      	mov	r0, r5
 800f48c:	b007      	add	sp, #28
 800f48e:	bd30      	pop	{r4, r5, pc}
 800f490:	250b      	movs	r5, #11
 800f492:	4628      	mov	r0, r5
 800f494:	b007      	add	sp, #28
 800f496:	bd30      	pop	{r4, r5, pc}
 800f498:	f7ff fdbc 	bl	800f014 <rcl_convert_rmw_ret_to_rcl_ret>
 800f49c:	4605      	mov	r5, r0
 800f49e:	e7f8      	b.n	800f492 <rcl_init_options_fini+0x46>

0800f4a0 <rcl_init_options_copy>:
 800f4a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f4a2:	b09d      	sub	sp, #116	; 0x74
 800f4a4:	2800      	cmp	r0, #0
 800f4a6:	d04d      	beq.n	800f544 <rcl_init_options_copy+0xa4>
 800f4a8:	4604      	mov	r4, r0
 800f4aa:	6800      	ldr	r0, [r0, #0]
 800f4ac:	2800      	cmp	r0, #0
 800f4ae:	d049      	beq.n	800f544 <rcl_init_options_copy+0xa4>
 800f4b0:	460d      	mov	r5, r1
 800f4b2:	f7fc fe49 	bl	800c148 <rcutils_allocator_is_valid>
 800f4b6:	2d00      	cmp	r5, #0
 800f4b8:	d044      	beq.n	800f544 <rcl_init_options_copy+0xa4>
 800f4ba:	f080 0001 	eor.w	r0, r0, #1
 800f4be:	b2c0      	uxtb	r0, r0
 800f4c0:	2800      	cmp	r0, #0
 800f4c2:	d13f      	bne.n	800f544 <rcl_init_options_copy+0xa4>
 800f4c4:	682b      	ldr	r3, [r5, #0]
 800f4c6:	b11b      	cbz	r3, 800f4d0 <rcl_init_options_copy+0x30>
 800f4c8:	2464      	movs	r4, #100	; 0x64
 800f4ca:	4620      	mov	r0, r4
 800f4cc:	b01d      	add	sp, #116	; 0x74
 800f4ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f4d0:	6826      	ldr	r6, [r4, #0]
 800f4d2:	f10d 0c5c 	add.w	ip, sp, #92	; 0x5c
 800f4d6:	46b6      	mov	lr, r6
 800f4d8:	6837      	ldr	r7, [r6, #0]
 800f4da:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f4de:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f4e2:	f8de 3000 	ldr.w	r3, [lr]
 800f4e6:	2070      	movs	r0, #112	; 0x70
 800f4e8:	4619      	mov	r1, r3
 800f4ea:	f8cc 3000 	str.w	r3, [ip]
 800f4ee:	47b8      	blx	r7
 800f4f0:	4606      	mov	r6, r0
 800f4f2:	6028      	str	r0, [r5, #0]
 800f4f4:	b350      	cbz	r0, 800f54c <rcl_init_options_copy+0xac>
 800f4f6:	f10d 0c5c 	add.w	ip, sp, #92	; 0x5c
 800f4fa:	4686      	mov	lr, r0
 800f4fc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f500:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f504:	f8dc 3000 	ldr.w	r3, [ip]
 800f508:	4668      	mov	r0, sp
 800f50a:	f8ce 3000 	str.w	r3, [lr]
 800f50e:	f002 ff27 	bl	8012360 <rmw_get_zero_initialized_init_options>
 800f512:	2258      	movs	r2, #88	; 0x58
 800f514:	4669      	mov	r1, sp
 800f516:	f106 0018 	add.w	r0, r6, #24
 800f51a:	f00a f9e8 	bl	80198ee <memcpy>
 800f51e:	6820      	ldr	r0, [r4, #0]
 800f520:	6829      	ldr	r1, [r5, #0]
 800f522:	3018      	adds	r0, #24
 800f524:	3118      	adds	r1, #24
 800f526:	f003 f959 	bl	80127dc <rmw_init_options_copy>
 800f52a:	4604      	mov	r4, r0
 800f52c:	2800      	cmp	r0, #0
 800f52e:	d0cc      	beq.n	800f4ca <rcl_init_options_copy+0x2a>
 800f530:	f7fc fe18 	bl	800c164 <rcutils_get_error_string>
 800f534:	f7fc fe2c 	bl	800c190 <rcutils_reset_error>
 800f538:	4628      	mov	r0, r5
 800f53a:	f7ff ff87 	bl	800f44c <rcl_init_options_fini>
 800f53e:	b138      	cbz	r0, 800f550 <rcl_init_options_copy+0xb0>
 800f540:	4604      	mov	r4, r0
 800f542:	e7c2      	b.n	800f4ca <rcl_init_options_copy+0x2a>
 800f544:	240b      	movs	r4, #11
 800f546:	4620      	mov	r0, r4
 800f548:	b01d      	add	sp, #116	; 0x74
 800f54a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f54c:	240a      	movs	r4, #10
 800f54e:	e7bc      	b.n	800f4ca <rcl_init_options_copy+0x2a>
 800f550:	4620      	mov	r0, r4
 800f552:	b01d      	add	sp, #116	; 0x74
 800f554:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f558:	f7ff bd5c 	b.w	800f014 <rcl_convert_rmw_ret_to_rcl_ret>

0800f55c <rcl_get_localhost_only>:
 800f55c:	b510      	push	{r4, lr}
 800f55e:	2300      	movs	r3, #0
 800f560:	b082      	sub	sp, #8
 800f562:	9301      	str	r3, [sp, #4]
 800f564:	b1c0      	cbz	r0, 800f598 <rcl_get_localhost_only+0x3c>
 800f566:	4604      	mov	r4, r0
 800f568:	a901      	add	r1, sp, #4
 800f56a:	480d      	ldr	r0, [pc, #52]	; (800f5a0 <rcl_get_localhost_only+0x44>)
 800f56c:	f002 fc34 	bl	8011dd8 <rcutils_get_env>
 800f570:	b110      	cbz	r0, 800f578 <rcl_get_localhost_only+0x1c>
 800f572:	2001      	movs	r0, #1
 800f574:	b002      	add	sp, #8
 800f576:	bd10      	pop	{r4, pc}
 800f578:	9b01      	ldr	r3, [sp, #4]
 800f57a:	b10b      	cbz	r3, 800f580 <rcl_get_localhost_only+0x24>
 800f57c:	781b      	ldrb	r3, [r3, #0]
 800f57e:	b923      	cbnz	r3, 800f58a <rcl_get_localhost_only+0x2e>
 800f580:	2300      	movs	r3, #0
 800f582:	4618      	mov	r0, r3
 800f584:	7023      	strb	r3, [r4, #0]
 800f586:	b002      	add	sp, #8
 800f588:	bd10      	pop	{r4, pc}
 800f58a:	2b31      	cmp	r3, #49	; 0x31
 800f58c:	bf0c      	ite	eq
 800f58e:	2301      	moveq	r3, #1
 800f590:	2302      	movne	r3, #2
 800f592:	7023      	strb	r3, [r4, #0]
 800f594:	b002      	add	sp, #8
 800f596:	bd10      	pop	{r4, pc}
 800f598:	200b      	movs	r0, #11
 800f59a:	b002      	add	sp, #8
 800f59c:	bd10      	pop	{r4, pc}
 800f59e:	bf00      	nop
 800f5a0:	0801b4c0 	.word	0x0801b4c0

0800f5a4 <rcl_get_zero_initialized_node>:
 800f5a4:	4a03      	ldr	r2, [pc, #12]	; (800f5b4 <rcl_get_zero_initialized_node+0x10>)
 800f5a6:	4603      	mov	r3, r0
 800f5a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f5ac:	e883 0003 	stmia.w	r3, {r0, r1}
 800f5b0:	4618      	mov	r0, r3
 800f5b2:	4770      	bx	lr
 800f5b4:	0801b4f0 	.word	0x0801b4f0

0800f5b8 <rcl_node_init>:
 800f5b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5bc:	b0ab      	sub	sp, #172	; 0xac
 800f5be:	4604      	mov	r4, r0
 800f5c0:	460e      	mov	r6, r1
 800f5c2:	4615      	mov	r5, r2
 800f5c4:	f8dd 80d0 	ldr.w	r8, [sp, #208]	; 0xd0
 800f5c8:	a825      	add	r0, sp, #148	; 0x94
 800f5ca:	461f      	mov	r7, r3
 800f5cc:	f008 f9f8 	bl	80179c0 <rcl_guard_condition_get_default_options>
 800f5d0:	f1b8 0f00 	cmp.w	r8, #0
 800f5d4:	f000 80f3 	beq.w	800f7be <rcl_node_init+0x206>
 800f5d8:	4640      	mov	r0, r8
 800f5da:	f7fc fdb5 	bl	800c148 <rcutils_allocator_is_valid>
 800f5de:	2d00      	cmp	r5, #0
 800f5e0:	bf18      	it	ne
 800f5e2:	2c00      	cmpne	r4, #0
 800f5e4:	f080 0001 	eor.w	r0, r0, #1
 800f5e8:	bf0c      	ite	eq
 800f5ea:	f04f 0c01 	moveq.w	ip, #1
 800f5ee:	f04f 0c00 	movne.w	ip, #0
 800f5f2:	2e00      	cmp	r6, #0
 800f5f4:	bf08      	it	eq
 800f5f6:	f04c 0c01 	orreq.w	ip, ip, #1
 800f5fa:	ea4c 0c00 	orr.w	ip, ip, r0
 800f5fe:	f01c 09ff 	ands.w	r9, ip, #255	; 0xff
 800f602:	f040 80dc 	bne.w	800f7be <rcl_node_init+0x206>
 800f606:	f8d4 a004 	ldr.w	sl, [r4, #4]
 800f60a:	f1ba 0f00 	cmp.w	sl, #0
 800f60e:	f040 80fc 	bne.w	800f80a <rcl_node_init+0x252>
 800f612:	2f00      	cmp	r7, #0
 800f614:	f000 80d3 	beq.w	800f7be <rcl_node_init+0x206>
 800f618:	4638      	mov	r0, r7
 800f61a:	f7ff fd19 	bl	800f050 <rcl_context_is_valid>
 800f61e:	4683      	mov	fp, r0
 800f620:	2800      	cmp	r0, #0
 800f622:	f000 80d2 	beq.w	800f7ca <rcl_node_init+0x212>
 800f626:	4652      	mov	r2, sl
 800f628:	4630      	mov	r0, r6
 800f62a:	a924      	add	r1, sp, #144	; 0x90
 800f62c:	f8cd a090 	str.w	sl, [sp, #144]	; 0x90
 800f630:	f002 ffa4 	bl	801257c <rmw_validate_node_name>
 800f634:	4682      	mov	sl, r0
 800f636:	2800      	cmp	r0, #0
 800f638:	f040 80c3 	bne.w	800f7c2 <rcl_node_init+0x20a>
 800f63c:	9824      	ldr	r0, [sp, #144]	; 0x90
 800f63e:	2800      	cmp	r0, #0
 800f640:	f040 80f1 	bne.w	800f826 <rcl_node_init+0x26e>
 800f644:	4628      	mov	r0, r5
 800f646:	f7f0 fe5b 	bl	8000300 <strlen>
 800f64a:	2800      	cmp	r0, #0
 800f64c:	f040 80c0 	bne.w	800f7d0 <rcl_node_init+0x218>
 800f650:	4d79      	ldr	r5, [pc, #484]	; (800f838 <rcl_node_init+0x280>)
 800f652:	a924      	add	r1, sp, #144	; 0x90
 800f654:	2200      	movs	r2, #0
 800f656:	4628      	mov	r0, r5
 800f658:	f002 ff72 	bl	8012540 <rmw_validate_namespace>
 800f65c:	4682      	mov	sl, r0
 800f65e:	2800      	cmp	r0, #0
 800f660:	f040 80af 	bne.w	800f7c2 <rcl_node_init+0x20a>
 800f664:	9824      	ldr	r0, [sp, #144]	; 0x90
 800f666:	2800      	cmp	r0, #0
 800f668:	f040 80d5 	bne.w	800f816 <rcl_node_init+0x25e>
 800f66c:	f8d8 3000 	ldr.w	r3, [r8]
 800f670:	2080      	movs	r0, #128	; 0x80
 800f672:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800f676:	4798      	blx	r3
 800f678:	4682      	mov	sl, r0
 800f67a:	6060      	str	r0, [r4, #4]
 800f67c:	2800      	cmp	r0, #0
 800f67e:	f000 80cf 	beq.w	800f820 <rcl_node_init+0x268>
 800f682:	2200      	movs	r2, #0
 800f684:	2300      	movs	r3, #0
 800f686:	a808      	add	r0, sp, #32
 800f688:	e9ca 231c 	strd	r2, r3, [sl, #112]	; 0x70
 800f68c:	e9ca 231e 	strd	r2, r3, [sl, #120]	; 0x78
 800f690:	f000 f902 	bl	800f898 <rcl_node_get_default_options>
 800f694:	a908      	add	r1, sp, #32
 800f696:	4650      	mov	r0, sl
 800f698:	2270      	movs	r2, #112	; 0x70
 800f69a:	f00a f928 	bl	80198ee <memcpy>
 800f69e:	6861      	ldr	r1, [r4, #4]
 800f6a0:	4640      	mov	r0, r8
 800f6a2:	6027      	str	r7, [r4, #0]
 800f6a4:	f000 f906 	bl	800f8b4 <rcl_node_options_copy>
 800f6a8:	2800      	cmp	r0, #0
 800f6aa:	d158      	bne.n	800f75e <rcl_node_init+0x1a6>
 800f6ac:	4628      	mov	r0, r5
 800f6ae:	f7f0 fe27 	bl	8000300 <strlen>
 800f6b2:	4428      	add	r0, r5
 800f6b4:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 800f6b8:	e9cd 5603 	strd	r5, r6, [sp, #12]
 800f6bc:	2b2f      	cmp	r3, #47	; 0x2f
 800f6be:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800f6c2:	9300      	str	r3, [sp, #0]
 800f6c4:	bf0c      	ite	eq
 800f6c6:	4b5d      	ldreq	r3, [pc, #372]	; (800f83c <rcl_node_init+0x284>)
 800f6c8:	4b5d      	ldrne	r3, [pc, #372]	; (800f840 <rcl_node_init+0x288>)
 800f6ca:	9302      	str	r3, [sp, #8]
 800f6cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f6d0:	9301      	str	r3, [sp, #4]
 800f6d2:	f8d4 a004 	ldr.w	sl, [r4, #4]
 800f6d6:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800f6da:	f002 fba5 	bl	8011e28 <rcutils_format_string_limit>
 800f6de:	6823      	ldr	r3, [r4, #0]
 800f6e0:	f8ca 007c 	str.w	r0, [sl, #124]	; 0x7c
 800f6e4:	4631      	mov	r1, r6
 800f6e6:	6818      	ldr	r0, [r3, #0]
 800f6e8:	462a      	mov	r2, r5
 800f6ea:	6866      	ldr	r6, [r4, #4]
 800f6ec:	3028      	adds	r0, #40	; 0x28
 800f6ee:	f003 fac5 	bl	8012c7c <rmw_create_node>
 800f6f2:	6863      	ldr	r3, [r4, #4]
 800f6f4:	6730      	str	r0, [r6, #112]	; 0x70
 800f6f6:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800f6f8:	2800      	cmp	r0, #0
 800f6fa:	d032      	beq.n	800f762 <rcl_node_init+0x1aa>
 800f6fc:	f003 fb4e 	bl	8012d9c <rmw_node_get_graph_guard_condition>
 800f700:	4682      	mov	sl, r0
 800f702:	b360      	cbz	r0, 800f75e <rcl_node_init+0x1a6>
 800f704:	f8d8 3000 	ldr.w	r3, [r8]
 800f708:	2008      	movs	r0, #8
 800f70a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800f70e:	6866      	ldr	r6, [r4, #4]
 800f710:	4798      	blx	r3
 800f712:	6863      	ldr	r3, [r4, #4]
 800f714:	6770      	str	r0, [r6, #116]	; 0x74
 800f716:	f8d3 b074 	ldr.w	fp, [r3, #116]	; 0x74
 800f71a:	f1bb 0f00 	cmp.w	fp, #0
 800f71e:	d020      	beq.n	800f762 <rcl_node_init+0x1aa>
 800f720:	a806      	add	r0, sp, #24
 800f722:	ae25      	add	r6, sp, #148	; 0x94
 800f724:	f008 f8c0 	bl	80178a8 <rcl_get_zero_initialized_guard_condition>
 800f728:	a806      	add	r0, sp, #24
 800f72a:	6863      	ldr	r3, [r4, #4]
 800f72c:	46c4      	mov	ip, r8
 800f72e:	c803      	ldmia	r0, {r0, r1}
 800f730:	f8d3 e074 	ldr.w	lr, [r3, #116]	; 0x74
 800f734:	e88b 0003 	stmia.w	fp, {r0, r1}
 800f738:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f73c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800f73e:	f8dc 3000 	ldr.w	r3, [ip]
 800f742:	6033      	str	r3, [r6, #0]
 800f744:	ab2a      	add	r3, sp, #168	; 0xa8
 800f746:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800f74a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800f74e:	4651      	mov	r1, sl
 800f750:	463a      	mov	r2, r7
 800f752:	4670      	mov	r0, lr
 800f754:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800f756:	f008 f8b1 	bl	80178bc <rcl_guard_condition_init_from_rmw>
 800f75a:	4682      	mov	sl, r0
 800f75c:	b328      	cbz	r0, 800f7aa <rcl_node_init+0x1f2>
 800f75e:	6863      	ldr	r3, [r4, #4]
 800f760:	b1f3      	cbz	r3, 800f7a0 <rcl_node_init+0x1e8>
 800f762:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800f764:	b128      	cbz	r0, 800f772 <rcl_node_init+0x1ba>
 800f766:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f76a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800f76e:	4798      	blx	r3
 800f770:	6863      	ldr	r3, [r4, #4]
 800f772:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800f774:	b110      	cbz	r0, 800f77c <rcl_node_init+0x1c4>
 800f776:	f003 fa93 	bl	8012ca0 <rmw_destroy_node>
 800f77a:	6863      	ldr	r3, [r4, #4]
 800f77c:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800f77e:	b148      	cbz	r0, 800f794 <rcl_node_init+0x1dc>
 800f780:	f008 f8f8 	bl	8017974 <rcl_guard_condition_fini>
 800f784:	6863      	ldr	r3, [r4, #4]
 800f786:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800f78a:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800f78c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f790:	4798      	blx	r3
 800f792:	6863      	ldr	r3, [r4, #4]
 800f794:	4618      	mov	r0, r3
 800f796:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800f79a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f79e:	4798      	blx	r3
 800f7a0:	2300      	movs	r3, #0
 800f7a2:	f04f 0a01 	mov.w	sl, #1
 800f7a6:	e9c4 3300 	strd	r3, r3, [r4]
 800f7aa:	f1b9 0f00 	cmp.w	r9, #0
 800f7ae:	d008      	beq.n	800f7c2 <rcl_node_init+0x20a>
 800f7b0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f7b4:	4628      	mov	r0, r5
 800f7b6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800f7ba:	4798      	blx	r3
 800f7bc:	e001      	b.n	800f7c2 <rcl_node_init+0x20a>
 800f7be:	f04f 0a0b 	mov.w	sl, #11
 800f7c2:	4650      	mov	r0, sl
 800f7c4:	b02b      	add	sp, #172	; 0xac
 800f7c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7ca:	f04f 0a65 	mov.w	sl, #101	; 0x65
 800f7ce:	e7f8      	b.n	800f7c2 <rcl_node_init+0x20a>
 800f7d0:	782b      	ldrb	r3, [r5, #0]
 800f7d2:	2b2f      	cmp	r3, #47	; 0x2f
 800f7d4:	f43f af3d 	beq.w	800f652 <rcl_node_init+0x9a>
 800f7d8:	9503      	str	r5, [sp, #12]
 800f7da:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800f7de:	9300      	str	r3, [sp, #0]
 800f7e0:	4b18      	ldr	r3, [pc, #96]	; (800f844 <rcl_node_init+0x28c>)
 800f7e2:	9302      	str	r3, [sp, #8]
 800f7e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f7e8:	9301      	str	r3, [sp, #4]
 800f7ea:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800f7ee:	f002 fb1b 	bl	8011e28 <rcutils_format_string_limit>
 800f7f2:	4605      	mov	r5, r0
 800f7f4:	b1e0      	cbz	r0, 800f830 <rcl_node_init+0x278>
 800f7f6:	2200      	movs	r2, #0
 800f7f8:	a924      	add	r1, sp, #144	; 0x90
 800f7fa:	9224      	str	r2, [sp, #144]	; 0x90
 800f7fc:	f002 fea0 	bl	8012540 <rmw_validate_namespace>
 800f800:	4682      	mov	sl, r0
 800f802:	2800      	cmp	r0, #0
 800f804:	d1d4      	bne.n	800f7b0 <rcl_node_init+0x1f8>
 800f806:	46d9      	mov	r9, fp
 800f808:	e72c      	b.n	800f664 <rcl_node_init+0xac>
 800f80a:	f04f 0a64 	mov.w	sl, #100	; 0x64
 800f80e:	4650      	mov	r0, sl
 800f810:	b02b      	add	sp, #172	; 0xac
 800f812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f816:	f04f 0aca 	mov.w	sl, #202	; 0xca
 800f81a:	f002 fea3 	bl	8012564 <rmw_namespace_validation_result_string>
 800f81e:	e7c4      	b.n	800f7aa <rcl_node_init+0x1f2>
 800f820:	f04f 0a0a 	mov.w	sl, #10
 800f824:	e7c1      	b.n	800f7aa <rcl_node_init+0x1f2>
 800f826:	f04f 0ac9 	mov.w	sl, #201	; 0xc9
 800f82a:	f002 fefb 	bl	8012624 <rmw_node_name_validation_result_string>
 800f82e:	e7c8      	b.n	800f7c2 <rcl_node_init+0x20a>
 800f830:	f04f 0a0a 	mov.w	sl, #10
 800f834:	e7c5      	b.n	800f7c2 <rcl_node_init+0x20a>
 800f836:	bf00      	nop
 800f838:	0801b4d8 	.word	0x0801b4d8
 800f83c:	0801b4e0 	.word	0x0801b4e0
 800f840:	0801b4e8 	.word	0x0801b4e8
 800f844:	0801b4dc 	.word	0x0801b4dc

0800f848 <rcl_node_is_valid>:
 800f848:	b130      	cbz	r0, 800f858 <rcl_node_is_valid+0x10>
 800f84a:	6843      	ldr	r3, [r0, #4]
 800f84c:	b123      	cbz	r3, 800f858 <rcl_node_is_valid+0x10>
 800f84e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f850:	b113      	cbz	r3, 800f858 <rcl_node_is_valid+0x10>
 800f852:	6800      	ldr	r0, [r0, #0]
 800f854:	f7ff bbfc 	b.w	800f050 <rcl_context_is_valid>
 800f858:	2000      	movs	r0, #0
 800f85a:	4770      	bx	lr

0800f85c <rcl_node_get_name>:
 800f85c:	b120      	cbz	r0, 800f868 <rcl_node_get_name+0xc>
 800f85e:	6840      	ldr	r0, [r0, #4]
 800f860:	b110      	cbz	r0, 800f868 <rcl_node_get_name+0xc>
 800f862:	6f00      	ldr	r0, [r0, #112]	; 0x70
 800f864:	b100      	cbz	r0, 800f868 <rcl_node_get_name+0xc>
 800f866:	6880      	ldr	r0, [r0, #8]
 800f868:	4770      	bx	lr
 800f86a:	bf00      	nop

0800f86c <rcl_node_get_namespace>:
 800f86c:	b120      	cbz	r0, 800f878 <rcl_node_get_namespace+0xc>
 800f86e:	6840      	ldr	r0, [r0, #4]
 800f870:	b110      	cbz	r0, 800f878 <rcl_node_get_namespace+0xc>
 800f872:	6f00      	ldr	r0, [r0, #112]	; 0x70
 800f874:	b100      	cbz	r0, 800f878 <rcl_node_get_namespace+0xc>
 800f876:	68c0      	ldr	r0, [r0, #12]
 800f878:	4770      	bx	lr
 800f87a:	bf00      	nop

0800f87c <rcl_node_get_options>:
 800f87c:	b128      	cbz	r0, 800f88a <rcl_node_get_options+0xe>
 800f87e:	6840      	ldr	r0, [r0, #4]
 800f880:	b118      	cbz	r0, 800f88a <rcl_node_get_options+0xe>
 800f882:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800f884:	2b00      	cmp	r3, #0
 800f886:	bf08      	it	eq
 800f888:	2000      	moveq	r0, #0
 800f88a:	4770      	bx	lr

0800f88c <rcl_node_get_rmw_handle>:
 800f88c:	b110      	cbz	r0, 800f894 <rcl_node_get_rmw_handle+0x8>
 800f88e:	6840      	ldr	r0, [r0, #4]
 800f890:	b100      	cbz	r0, 800f894 <rcl_node_get_rmw_handle+0x8>
 800f892:	6f00      	ldr	r0, [r0, #112]	; 0x70
 800f894:	4770      	bx	lr
 800f896:	bf00      	nop

0800f898 <rcl_node_get_default_options>:
 800f898:	b510      	push	{r4, lr}
 800f89a:	4604      	mov	r4, r0
 800f89c:	2270      	movs	r2, #112	; 0x70
 800f89e:	2100      	movs	r1, #0
 800f8a0:	f009 feb0 	bl	8019604 <memset>
 800f8a4:	4620      	mov	r0, r4
 800f8a6:	f7fc fc41 	bl	800c12c <rcutils_get_default_allocator>
 800f8aa:	2301      	movs	r3, #1
 800f8ac:	4620      	mov	r0, r4
 800f8ae:	7523      	strb	r3, [r4, #20]
 800f8b0:	bd10      	pop	{r4, pc}
 800f8b2:	bf00      	nop

0800f8b4 <rcl_node_options_copy>:
 800f8b4:	2800      	cmp	r0, #0
 800f8b6:	bf18      	it	ne
 800f8b8:	4288      	cmpne	r0, r1
 800f8ba:	d01b      	beq.n	800f8f4 <rcl_node_options_copy+0x40>
 800f8bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8be:	fab1 f681 	clz	r6, r1
 800f8c2:	460c      	mov	r4, r1
 800f8c4:	0976      	lsrs	r6, r6, #5
 800f8c6:	b199      	cbz	r1, 800f8f0 <rcl_node_options_copy+0x3c>
 800f8c8:	4605      	mov	r5, r0
 800f8ca:	8a87      	ldrh	r7, [r0, #20]
 800f8cc:	4684      	mov	ip, r0
 800f8ce:	468e      	mov	lr, r1
 800f8d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f8d2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f8d6:	682b      	ldr	r3, [r5, #0]
 800f8d8:	2250      	movs	r2, #80	; 0x50
 800f8da:	f10c 0118 	add.w	r1, ip, #24
 800f8de:	f104 0018 	add.w	r0, r4, #24
 800f8e2:	f8ce 3000 	str.w	r3, [lr]
 800f8e6:	82a7      	strh	r7, [r4, #20]
 800f8e8:	f00a f801 	bl	80198ee <memcpy>
 800f8ec:	4630      	mov	r0, r6
 800f8ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f8f0:	200b      	movs	r0, #11
 800f8f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f8f4:	200b      	movs	r0, #11
 800f8f6:	4770      	bx	lr

0800f8f8 <rcl_node_resolve_name>:
 800f8f8:	b082      	sub	sp, #8
 800f8fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8fe:	b091      	sub	sp, #68	; 0x44
 800f900:	ac1a      	add	r4, sp, #104	; 0x68
 800f902:	f89d 807c 	ldrb.w	r8, [sp, #124]	; 0x7c
 800f906:	e884 000c 	stmia.w	r4, {r2, r3}
 800f90a:	2800      	cmp	r0, #0
 800f90c:	d03d      	beq.n	800f98a <rcl_node_resolve_name+0x92>
 800f90e:	460c      	mov	r4, r1
 800f910:	4605      	mov	r5, r0
 800f912:	f7ff ffb3 	bl	800f87c <rcl_node_get_options>
 800f916:	2800      	cmp	r0, #0
 800f918:	d03a      	beq.n	800f990 <rcl_node_resolve_name+0x98>
 800f91a:	4628      	mov	r0, r5
 800f91c:	f7ff ff9e 	bl	800f85c <rcl_node_get_name>
 800f920:	4606      	mov	r6, r0
 800f922:	4628      	mov	r0, r5
 800f924:	ad0b      	add	r5, sp, #44	; 0x2c
 800f926:	f7ff ffa1 	bl	800f86c <rcl_node_get_namespace>
 800f92a:	f10d 0e68 	add.w	lr, sp, #104	; 0x68
 800f92e:	4607      	mov	r7, r0
 800f930:	46ac      	mov	ip, r5
 800f932:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f936:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f93a:	f8de 3000 	ldr.w	r3, [lr]
 800f93e:	f8cc 3000 	str.w	r3, [ip]
 800f942:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f944:	b30b      	cbz	r3, 800f98a <rcl_node_resolve_name+0x92>
 800f946:	4689      	mov	r9, r1
 800f948:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800f94c:	f002 fbee 	bl	801212c <rcutils_get_zero_initialized_string_map>
 800f950:	ab10      	add	r3, sp, #64	; 0x40
 800f952:	9008      	str	r0, [sp, #32]
 800f954:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800f958:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800f95c:	2100      	movs	r1, #0
 800f95e:	a808      	add	r0, sp, #32
 800f960:	e895 000c 	ldmia.w	r5, {r2, r3}
 800f964:	f002 fc34 	bl	80121d0 <rcutils_string_map_init>
 800f968:	4683      	mov	fp, r0
 800f96a:	b1a0      	cbz	r0, 800f996 <rcl_node_resolve_name+0x9e>
 800f96c:	f7fc fbfa 	bl	800c164 <rcutils_get_error_string>
 800f970:	f7fc fc0e 	bl	800c190 <rcutils_reset_error>
 800f974:	f1bb 0f0a 	cmp.w	fp, #10
 800f978:	bf18      	it	ne
 800f97a:	f04f 0b01 	movne.w	fp, #1
 800f97e:	4658      	mov	r0, fp
 800f980:	b011      	add	sp, #68	; 0x44
 800f982:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f986:	b002      	add	sp, #8
 800f988:	4770      	bx	lr
 800f98a:	f04f 0b0b 	mov.w	fp, #11
 800f98e:	e7f6      	b.n	800f97e <rcl_node_resolve_name+0x86>
 800f990:	f04f 0b01 	mov.w	fp, #1
 800f994:	e7f3      	b.n	800f97e <rcl_node_resolve_name+0x86>
 800f996:	9009      	str	r0, [sp, #36]	; 0x24
 800f998:	9007      	str	r0, [sp, #28]
 800f99a:	a808      	add	r0, sp, #32
 800f99c:	f007 ff7e 	bl	801789c <rcl_get_default_topic_name_substitutions>
 800f9a0:	4683      	mov	fp, r0
 800f9a2:	b180      	cbz	r0, 800f9c6 <rcl_node_resolve_name+0xce>
 800f9a4:	280a      	cmp	r0, #10
 800f9a6:	a808      	add	r0, sp, #32
 800f9a8:	bf18      	it	ne
 800f9aa:	f04f 0b01 	movne.w	fp, #1
 800f9ae:	f002 fc4d 	bl	801224c <rcutils_string_map_fini>
 800f9b2:	4604      	mov	r4, r0
 800f9b4:	2800      	cmp	r0, #0
 800f9b6:	d15b      	bne.n	800fa70 <rcl_node_resolve_name+0x178>
 800f9b8:	4651      	mov	r1, sl
 800f9ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f9bc:	47c8      	blx	r9
 800f9be:	4651      	mov	r1, sl
 800f9c0:	4620      	mov	r0, r4
 800f9c2:	47c8      	blx	r9
 800f9c4:	e7db      	b.n	800f97e <rcl_node_resolve_name+0x86>
 800f9c6:	ab09      	add	r3, sp, #36	; 0x24
 800f9c8:	46ec      	mov	ip, sp
 800f9ca:	9305      	str	r3, [sp, #20]
 800f9cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f9ce:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f9d2:	682b      	ldr	r3, [r5, #0]
 800f9d4:	463a      	mov	r2, r7
 800f9d6:	4631      	mov	r1, r6
 800f9d8:	4620      	mov	r0, r4
 800f9da:	f8cc 3000 	str.w	r3, [ip]
 800f9de:	ab08      	add	r3, sp, #32
 800f9e0:	f007 fdfc 	bl	80175dc <rcl_expand_topic_name>
 800f9e4:	4683      	mov	fp, r0
 800f9e6:	b9d8      	cbnz	r0, 800fa20 <rcl_node_resolve_name+0x128>
 800f9e8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800f9ea:	4602      	mov	r2, r0
 800f9ec:	9009      	str	r0, [sp, #36]	; 0x24
 800f9ee:	a90a      	add	r1, sp, #40	; 0x28
 800f9f0:	4620      	mov	r0, r4
 800f9f2:	f002 fcd5 	bl	80123a0 <rmw_validate_full_topic_name>
 800f9f6:	bb50      	cbnz	r0, 800fa4e <rcl_node_resolve_name+0x156>
 800f9f8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800f9fa:	2d00      	cmp	r5, #0
 800f9fc:	d140      	bne.n	800fa80 <rcl_node_resolve_name+0x188>
 800f9fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fa00:	a808      	add	r0, sp, #32
 800fa02:	601c      	str	r4, [r3, #0]
 800fa04:	f002 fc22 	bl	801224c <rcutils_string_map_fini>
 800fa08:	4683      	mov	fp, r0
 800fa0a:	2800      	cmp	r0, #0
 800fa0c:	d043      	beq.n	800fa96 <rcl_node_resolve_name+0x19e>
 800fa0e:	f7fc fba9 	bl	800c164 <rcutils_get_error_string>
 800fa12:	46a8      	mov	r8, r5
 800fa14:	f04f 0b01 	mov.w	fp, #1
 800fa18:	462c      	mov	r4, r5
 800fa1a:	f7fc fbb9 	bl	800c190 <rcutils_reset_error>
 800fa1e:	e00a      	b.n	800fa36 <rcl_node_resolve_name+0x13e>
 800fa20:	2867      	cmp	r0, #103	; 0x67
 800fa22:	bf14      	ite	ne
 800fa24:	f04f 0800 	movne.w	r8, #0
 800fa28:	f008 0801 	andeq.w	r8, r8, #1
 800fa2c:	9c07      	ldr	r4, [sp, #28]
 800fa2e:	a808      	add	r0, sp, #32
 800fa30:	f002 fc0c 	bl	801224c <rcutils_string_map_fini>
 800fa34:	bb50      	cbnz	r0, 800fa8c <rcl_node_resolve_name+0x194>
 800fa36:	4651      	mov	r1, sl
 800fa38:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fa3a:	47c8      	blx	r9
 800fa3c:	4651      	mov	r1, sl
 800fa3e:	4620      	mov	r0, r4
 800fa40:	47c8      	blx	r9
 800fa42:	f1b8 0f00 	cmp.w	r8, #0
 800fa46:	bf18      	it	ne
 800fa48:	f04f 0b68 	movne.w	fp, #104	; 0x68
 800fa4c:	e797      	b.n	800f97e <rcl_node_resolve_name+0x86>
 800fa4e:	f7fc fb89 	bl	800c164 <rcutils_get_error_string>
 800fa52:	f7fc fb9d 	bl	800c190 <rcutils_reset_error>
 800fa56:	a808      	add	r0, sp, #32
 800fa58:	f002 fbf8 	bl	801224c <rcutils_string_map_fini>
 800fa5c:	b998      	cbnz	r0, 800fa86 <rcl_node_resolve_name+0x18e>
 800fa5e:	4651      	mov	r1, sl
 800fa60:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fa62:	47c8      	blx	r9
 800fa64:	4651      	mov	r1, sl
 800fa66:	4620      	mov	r0, r4
 800fa68:	f04f 0b01 	mov.w	fp, #1
 800fa6c:	47c8      	blx	r9
 800fa6e:	e786      	b.n	800f97e <rcl_node_resolve_name+0x86>
 800fa70:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800fa74:	f7fc fb76 	bl	800c164 <rcutils_get_error_string>
 800fa78:	f7fc fb8a 	bl	800c190 <rcutils_reset_error>
 800fa7c:	4644      	mov	r4, r8
 800fa7e:	e7da      	b.n	800fa36 <rcl_node_resolve_name+0x13e>
 800fa80:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800fa84:	e7d3      	b.n	800fa2e <rcl_node_resolve_name+0x136>
 800fa86:	46d8      	mov	r8, fp
 800fa88:	f04f 0b01 	mov.w	fp, #1
 800fa8c:	f7fc fb6a 	bl	800c164 <rcutils_get_error_string>
 800fa90:	f7fc fb7e 	bl	800c190 <rcutils_reset_error>
 800fa94:	e7cf      	b.n	800fa36 <rcl_node_resolve_name+0x13e>
 800fa96:	4651      	mov	r1, sl
 800fa98:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fa9a:	47c8      	blx	r9
 800fa9c:	4651      	mov	r1, sl
 800fa9e:	4658      	mov	r0, fp
 800faa0:	47c8      	blx	r9
 800faa2:	e76c      	b.n	800f97e <rcl_node_resolve_name+0x86>

0800faa4 <exact_match_lookup>:
 800faa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800faa6:	f102 0708 	add.w	r7, r2, #8
 800faaa:	460b      	mov	r3, r1
 800faac:	b085      	sub	sp, #20
 800faae:	4614      	mov	r4, r2
 800fab0:	4606      	mov	r6, r0
 800fab2:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800fab6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800faba:	4618      	mov	r0, r3
 800fabc:	4919      	ldr	r1, [pc, #100]	; (800fb24 <exact_match_lookup+0x80>)
 800fabe:	e894 000c 	ldmia.w	r4, {r2, r3}
 800fac2:	f002 f9a3 	bl	8011e0c <rcutils_join_path>
 800fac6:	7833      	ldrb	r3, [r6, #0]
 800fac8:	4605      	mov	r5, r0
 800faca:	2b2f      	cmp	r3, #47	; 0x2f
 800facc:	d023      	beq.n	800fb16 <exact_match_lookup+0x72>
 800face:	f104 030c 	add.w	r3, r4, #12
 800fad2:	e893 0003 	ldmia.w	r3, {r0, r1}
 800fad6:	e88d 0003 	stmia.w	sp, {r0, r1}
 800fada:	1c70      	adds	r0, r6, #1
 800fadc:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800fae0:	f002 f99a 	bl	8011e18 <rcutils_to_native_path>
 800fae4:	4606      	mov	r6, r0
 800fae6:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800faea:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800faee:	4631      	mov	r1, r6
 800faf0:	4628      	mov	r0, r5
 800faf2:	e894 000c 	ldmia.w	r4, {r2, r3}
 800faf6:	f002 f989 	bl	8011e0c <rcutils_join_path>
 800fafa:	4603      	mov	r3, r0
 800fafc:	4630      	mov	r0, r6
 800fafe:	6862      	ldr	r2, [r4, #4]
 800fb00:	461e      	mov	r6, r3
 800fb02:	6921      	ldr	r1, [r4, #16]
 800fb04:	4790      	blx	r2
 800fb06:	4628      	mov	r0, r5
 800fb08:	4635      	mov	r5, r6
 800fb0a:	6863      	ldr	r3, [r4, #4]
 800fb0c:	6921      	ldr	r1, [r4, #16]
 800fb0e:	4798      	blx	r3
 800fb10:	4628      	mov	r0, r5
 800fb12:	b005      	add	sp, #20
 800fb14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb16:	7873      	ldrb	r3, [r6, #1]
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d1d8      	bne.n	800face <exact_match_lookup+0x2a>
 800fb1c:	4628      	mov	r0, r5
 800fb1e:	b005      	add	sp, #20
 800fb20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb22:	bf00      	nop
 800fb24:	0801b534 	.word	0x0801b534

0800fb28 <rcl_get_secure_root>:
 800fb28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fb2c:	b085      	sub	sp, #20
 800fb2e:	b168      	cbz	r0, 800fb4c <rcl_get_secure_root+0x24>
 800fb30:	4607      	mov	r7, r0
 800fb32:	4608      	mov	r0, r1
 800fb34:	460c      	mov	r4, r1
 800fb36:	f7fc fb07 	bl	800c148 <rcutils_allocator_is_valid>
 800fb3a:	b138      	cbz	r0, 800fb4c <rcl_get_secure_root+0x24>
 800fb3c:	2300      	movs	r3, #0
 800fb3e:	482d      	ldr	r0, [pc, #180]	; (800fbf4 <rcl_get_secure_root+0xcc>)
 800fb40:	a903      	add	r1, sp, #12
 800fb42:	9303      	str	r3, [sp, #12]
 800fb44:	f002 f948 	bl	8011dd8 <rcutils_get_env>
 800fb48:	4605      	mov	r5, r0
 800fb4a:	b120      	cbz	r0, 800fb56 <rcl_get_secure_root+0x2e>
 800fb4c:	2500      	movs	r5, #0
 800fb4e:	4628      	mov	r0, r5
 800fb50:	b005      	add	sp, #20
 800fb52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fb56:	9b03      	ldr	r3, [sp, #12]
 800fb58:	781a      	ldrb	r2, [r3, #0]
 800fb5a:	2a00      	cmp	r2, #0
 800fb5c:	d0f6      	beq.n	800fb4c <rcl_get_secure_root+0x24>
 800fb5e:	f104 090c 	add.w	r9, r4, #12
 800fb62:	e899 0003 	ldmia.w	r9, {r0, r1}
 800fb66:	e88d 0003 	stmia.w	sp, {r0, r1}
 800fb6a:	4618      	mov	r0, r3
 800fb6c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800fb70:	f002 fa94 	bl	801209c <rcutils_strdup>
 800fb74:	4680      	mov	r8, r0
 800fb76:	2800      	cmp	r0, #0
 800fb78:	d0e8      	beq.n	800fb4c <rcl_get_secure_root+0x24>
 800fb7a:	a903      	add	r1, sp, #12
 800fb7c:	481e      	ldr	r0, [pc, #120]	; (800fbf8 <rcl_get_secure_root+0xd0>)
 800fb7e:	9503      	str	r5, [sp, #12]
 800fb80:	f002 f92a 	bl	8011dd8 <rcutils_get_env>
 800fb84:	b160      	cbz	r0, 800fba0 <rcl_get_secure_root+0x78>
 800fb86:	2600      	movs	r6, #0
 800fb88:	4630      	mov	r0, r6
 800fb8a:	6863      	ldr	r3, [r4, #4]
 800fb8c:	6921      	ldr	r1, [r4, #16]
 800fb8e:	4798      	blx	r3
 800fb90:	4640      	mov	r0, r8
 800fb92:	6863      	ldr	r3, [r4, #4]
 800fb94:	6921      	ldr	r1, [r4, #16]
 800fb96:	4798      	blx	r3
 800fb98:	4628      	mov	r0, r5
 800fb9a:	b005      	add	sp, #20
 800fb9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fba0:	9b03      	ldr	r3, [sp, #12]
 800fba2:	781e      	ldrb	r6, [r3, #0]
 800fba4:	b1f6      	cbz	r6, 800fbe4 <rcl_get_secure_root+0xbc>
 800fba6:	e899 0003 	ldmia.w	r9, {r0, r1}
 800fbaa:	e88d 0003 	stmia.w	sp, {r0, r1}
 800fbae:	4618      	mov	r0, r3
 800fbb0:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800fbb4:	f002 fa72 	bl	801209c <rcutils_strdup>
 800fbb8:	4606      	mov	r6, r0
 800fbba:	2800      	cmp	r0, #0
 800fbbc:	d0e3      	beq.n	800fb86 <rcl_get_secure_root+0x5e>
 800fbbe:	4622      	mov	r2, r4
 800fbc0:	4641      	mov	r1, r8
 800fbc2:	f7ff ff6f 	bl	800faa4 <exact_match_lookup>
 800fbc6:	4605      	mov	r5, r0
 800fbc8:	2d00      	cmp	r5, #0
 800fbca:	d0dd      	beq.n	800fb88 <rcl_get_secure_root+0x60>
 800fbcc:	4628      	mov	r0, r5
 800fbce:	f002 f91b 	bl	8011e08 <rcutils_is_directory>
 800fbd2:	4603      	mov	r3, r0
 800fbd4:	2800      	cmp	r0, #0
 800fbd6:	d1d7      	bne.n	800fb88 <rcl_get_secure_root+0x60>
 800fbd8:	4628      	mov	r0, r5
 800fbda:	6921      	ldr	r1, [r4, #16]
 800fbdc:	461d      	mov	r5, r3
 800fbde:	6863      	ldr	r3, [r4, #4]
 800fbe0:	4798      	blx	r3
 800fbe2:	e7d1      	b.n	800fb88 <rcl_get_secure_root+0x60>
 800fbe4:	4622      	mov	r2, r4
 800fbe6:	4638      	mov	r0, r7
 800fbe8:	4641      	mov	r1, r8
 800fbea:	f7ff ff5b 	bl	800faa4 <exact_match_lookup>
 800fbee:	4605      	mov	r5, r0
 800fbf0:	e7ea      	b.n	800fbc8 <rcl_get_secure_root+0xa0>
 800fbf2:	bf00      	nop
 800fbf4:	0801b540 	.word	0x0801b540
 800fbf8:	0801b558 	.word	0x0801b558

0800fbfc <rcl_get_security_options_from_environment>:
 800fbfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc00:	b082      	sub	sp, #8
 800fc02:	2300      	movs	r3, #0
 800fc04:	4606      	mov	r6, r0
 800fc06:	460f      	mov	r7, r1
 800fc08:	4821      	ldr	r0, [pc, #132]	; (800fc90 <rcl_get_security_options_from_environment+0x94>)
 800fc0a:	a901      	add	r1, sp, #4
 800fc0c:	4690      	mov	r8, r2
 800fc0e:	9301      	str	r3, [sp, #4]
 800fc10:	f002 f8e2 	bl	8011dd8 <rcutils_get_env>
 800fc14:	b120      	cbz	r0, 800fc20 <rcl_get_security_options_from_environment+0x24>
 800fc16:	2501      	movs	r5, #1
 800fc18:	4628      	mov	r0, r5
 800fc1a:	b002      	add	sp, #8
 800fc1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc20:	4604      	mov	r4, r0
 800fc22:	491c      	ldr	r1, [pc, #112]	; (800fc94 <rcl_get_security_options_from_environment+0x98>)
 800fc24:	9801      	ldr	r0, [sp, #4]
 800fc26:	f7f0 fb0b 	bl	8000240 <strcmp>
 800fc2a:	4605      	mov	r5, r0
 800fc2c:	b9f0      	cbnz	r0, 800fc6c <rcl_get_security_options_from_environment+0x70>
 800fc2e:	9001      	str	r0, [sp, #4]
 800fc30:	f1b8 0f00 	cmp.w	r8, #0
 800fc34:	d021      	beq.n	800fc7a <rcl_get_security_options_from_environment+0x7e>
 800fc36:	a901      	add	r1, sp, #4
 800fc38:	4817      	ldr	r0, [pc, #92]	; (800fc98 <rcl_get_security_options_from_environment+0x9c>)
 800fc3a:	f002 f8cd 	bl	8011dd8 <rcutils_get_env>
 800fc3e:	2800      	cmp	r0, #0
 800fc40:	d1e9      	bne.n	800fc16 <rcl_get_security_options_from_environment+0x1a>
 800fc42:	4916      	ldr	r1, [pc, #88]	; (800fc9c <rcl_get_security_options_from_environment+0xa0>)
 800fc44:	9801      	ldr	r0, [sp, #4]
 800fc46:	f7f0 fafb 	bl	8000240 <strcmp>
 800fc4a:	4603      	mov	r3, r0
 800fc4c:	4639      	mov	r1, r7
 800fc4e:	4630      	mov	r0, r6
 800fc50:	fab3 f383 	clz	r3, r3
 800fc54:	095b      	lsrs	r3, r3, #5
 800fc56:	f888 3000 	strb.w	r3, [r8]
 800fc5a:	f7ff ff65 	bl	800fb28 <rcl_get_secure_root>
 800fc5e:	b170      	cbz	r0, 800fc7e <rcl_get_security_options_from_environment+0x82>
 800fc60:	f8c8 0004 	str.w	r0, [r8, #4]
 800fc64:	4628      	mov	r0, r5
 800fc66:	b002      	add	sp, #8
 800fc68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc6c:	4625      	mov	r5, r4
 800fc6e:	f888 4000 	strb.w	r4, [r8]
 800fc72:	4628      	mov	r0, r5
 800fc74:	b002      	add	sp, #8
 800fc76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc7a:	250b      	movs	r5, #11
 800fc7c:	e7cc      	b.n	800fc18 <rcl_get_security_options_from_environment+0x1c>
 800fc7e:	f898 5000 	ldrb.w	r5, [r8]
 800fc82:	f1a5 0501 	sub.w	r5, r5, #1
 800fc86:	fab5 f585 	clz	r5, r5
 800fc8a:	096d      	lsrs	r5, r5, #5
 800fc8c:	e7c4      	b.n	800fc18 <rcl_get_security_options_from_environment+0x1c>
 800fc8e:	bf00      	nop
 800fc90:	0801b4f8 	.word	0x0801b4f8
 800fc94:	0801b50c 	.word	0x0801b50c
 800fc98:	0801b514 	.word	0x0801b514
 800fc9c:	0801b52c 	.word	0x0801b52c

0800fca0 <rcl_get_zero_initialized_service>:
 800fca0:	4b01      	ldr	r3, [pc, #4]	; (800fca8 <rcl_get_zero_initialized_service+0x8>)
 800fca2:	6818      	ldr	r0, [r3, #0]
 800fca4:	4770      	bx	lr
 800fca6:	bf00      	nop
 800fca8:	0801b578 	.word	0x0801b578

0800fcac <rcl_service_init>:
 800fcac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fcb0:	b086      	sub	sp, #24
 800fcb2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800fcb4:	2d00      	cmp	r5, #0
 800fcb6:	d04d      	beq.n	800fd54 <rcl_service_init+0xa8>
 800fcb8:	f105 0950 	add.w	r9, r5, #80	; 0x50
 800fcbc:	4604      	mov	r4, r0
 800fcbe:	460e      	mov	r6, r1
 800fcc0:	4690      	mov	r8, r2
 800fcc2:	4648      	mov	r0, r9
 800fcc4:	461f      	mov	r7, r3
 800fcc6:	f7fc fa3f 	bl	800c148 <rcutils_allocator_is_valid>
 800fcca:	2c00      	cmp	r4, #0
 800fccc:	d042      	beq.n	800fd54 <rcl_service_init+0xa8>
 800fcce:	f080 0001 	eor.w	r0, r0, #1
 800fcd2:	b2c0      	uxtb	r0, r0
 800fcd4:	2800      	cmp	r0, #0
 800fcd6:	d13d      	bne.n	800fd54 <rcl_service_init+0xa8>
 800fcd8:	4630      	mov	r0, r6
 800fcda:	f7ff fdb5 	bl	800f848 <rcl_node_is_valid>
 800fcde:	2800      	cmp	r0, #0
 800fce0:	d042      	beq.n	800fd68 <rcl_service_init+0xbc>
 800fce2:	2f00      	cmp	r7, #0
 800fce4:	d036      	beq.n	800fd54 <rcl_service_init+0xa8>
 800fce6:	f1b8 0f00 	cmp.w	r8, #0
 800fcea:	d033      	beq.n	800fd54 <rcl_service_init+0xa8>
 800fcec:	f8d4 a000 	ldr.w	sl, [r4]
 800fcf0:	f1ba 0f00 	cmp.w	sl, #0
 800fcf4:	d133      	bne.n	800fd5e <rcl_service_init+0xb2>
 800fcf6:	f44f 718c 	mov.w	r1, #280	; 0x118
 800fcfa:	2001      	movs	r0, #1
 800fcfc:	e9d5 3217 	ldrd	r3, r2, [r5, #92]	; 0x5c
 800fd00:	4798      	blx	r3
 800fd02:	6020      	str	r0, [r4, #0]
 800fd04:	2800      	cmp	r0, #0
 800fd06:	d075      	beq.n	800fdf4 <rcl_service_init+0x148>
 800fd08:	f500 7088 	add.w	r0, r0, #272	; 0x110
 800fd0c:	f105 0358 	add.w	r3, r5, #88	; 0x58
 800fd10:	2201      	movs	r2, #1
 800fd12:	f8cd a010 	str.w	sl, [sp, #16]
 800fd16:	9005      	str	r0, [sp, #20]
 800fd18:	9203      	str	r2, [sp, #12]
 800fd1a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fd1e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800fd22:	4639      	mov	r1, r7
 800fd24:	4630      	mov	r0, r6
 800fd26:	e899 000c 	ldmia.w	r9, {r2, r3}
 800fd2a:	f7ff fde5 	bl	800f8f8 <rcl_node_resolve_name>
 800fd2e:	4607      	mov	r7, r0
 800fd30:	b1f8      	cbz	r0, 800fd72 <rcl_service_init+0xc6>
 800fd32:	f1a0 0368 	sub.w	r3, r0, #104	; 0x68
 800fd36:	6820      	ldr	r0, [r4, #0]
 800fd38:	2b01      	cmp	r3, #1
 800fd3a:	d943      	bls.n	800fdc4 <rcl_service_init+0x118>
 800fd3c:	2f0a      	cmp	r7, #10
 800fd3e:	d000      	beq.n	800fd42 <rcl_service_init+0x96>
 800fd40:	2701      	movs	r7, #1
 800fd42:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800fd44:	6e29      	ldr	r1, [r5, #96]	; 0x60
 800fd46:	4798      	blx	r3
 800fd48:	2300      	movs	r3, #0
 800fd4a:	4638      	mov	r0, r7
 800fd4c:	6023      	str	r3, [r4, #0]
 800fd4e:	b006      	add	sp, #24
 800fd50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd54:	270b      	movs	r7, #11
 800fd56:	4638      	mov	r0, r7
 800fd58:	b006      	add	sp, #24
 800fd5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd5e:	2764      	movs	r7, #100	; 0x64
 800fd60:	4638      	mov	r0, r7
 800fd62:	b006      	add	sp, #24
 800fd64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd68:	27c8      	movs	r7, #200	; 0xc8
 800fd6a:	4638      	mov	r0, r7
 800fd6c:	b006      	add	sp, #24
 800fd6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd72:	4630      	mov	r0, r6
 800fd74:	f7ff fd8a 	bl	800f88c <rcl_node_get_rmw_handle>
 800fd78:	6827      	ldr	r7, [r4, #0]
 800fd7a:	4641      	mov	r1, r8
 800fd7c:	462b      	mov	r3, r5
 800fd7e:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800fd82:	f003 f9b5 	bl	80130f0 <rmw_create_service>
 800fd86:	6821      	ldr	r1, [r4, #0]
 800fd88:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
 800fd8c:	f8d1 0108 	ldr.w	r0, [r1, #264]	; 0x108
 800fd90:	b390      	cbz	r0, 800fdf8 <rcl_service_init+0x14c>
 800fd92:	3168      	adds	r1, #104	; 0x68
 800fd94:	f003 fade 	bl	8013354 <rmw_service_request_subscription_get_actual_qos>
 800fd98:	b9b0      	cbnz	r0, 800fdc8 <rcl_service_init+0x11c>
 800fd9a:	6823      	ldr	r3, [r4, #0]
 800fd9c:	f103 01b8 	add.w	r1, r3, #184	; 0xb8
 800fda0:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 800fda4:	f003 fac2 	bl	801332c <rmw_service_response_publisher_get_actual_qos>
 800fda8:	4607      	mov	r7, r0
 800fdaa:	b968      	cbnz	r0, 800fdc8 <rcl_service_init+0x11c>
 800fdac:	6820      	ldr	r0, [r4, #0]
 800fdae:	2268      	movs	r2, #104	; 0x68
 800fdb0:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
 800fdb4:	4629      	mov	r1, r5
 800fdb6:	f880 30b0 	strb.w	r3, [r0, #176]	; 0xb0
 800fdba:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
 800fdbe:	f009 fd96 	bl	80198ee <memcpy>
 800fdc2:	e7c8      	b.n	800fd56 <rcl_service_init+0xaa>
 800fdc4:	2768      	movs	r7, #104	; 0x68
 800fdc6:	e7bc      	b.n	800fd42 <rcl_service_init+0x96>
 800fdc8:	f7ff f924 	bl	800f014 <rcl_convert_rmw_ret_to_rcl_ret>
 800fdcc:	4607      	mov	r7, r0
 800fdce:	4630      	mov	r0, r6
 800fdd0:	f7ff fd5c 	bl	800f88c <rcl_node_get_rmw_handle>
 800fdd4:	6823      	ldr	r3, [r4, #0]
 800fdd6:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 800fdda:	f003 fa63 	bl	80132a4 <rmw_destroy_service>
 800fdde:	6821      	ldr	r1, [r4, #0]
 800fde0:	f8d1 0110 	ldr.w	r0, [r1, #272]	; 0x110
 800fde4:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800fde6:	6e29      	ldr	r1, [r5, #96]	; 0x60
 800fde8:	4798      	blx	r3
 800fdea:	6820      	ldr	r0, [r4, #0]
 800fdec:	2300      	movs	r3, #0
 800fdee:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
 800fdf2:	e7a6      	b.n	800fd42 <rcl_service_init+0x96>
 800fdf4:	270a      	movs	r7, #10
 800fdf6:	e7ae      	b.n	800fd56 <rcl_service_init+0xaa>
 800fdf8:	2701      	movs	r7, #1
 800fdfa:	e7f1      	b.n	800fde0 <rcl_service_init+0x134>

0800fdfc <rcl_service_get_default_options>:
 800fdfc:	b530      	push	{r4, r5, lr}
 800fdfe:	4d0f      	ldr	r5, [pc, #60]	; (800fe3c <rcl_service_get_default_options+0x40>)
 800fe00:	b087      	sub	sp, #28
 800fe02:	4604      	mov	r4, r0
 800fe04:	2250      	movs	r2, #80	; 0x50
 800fe06:	490e      	ldr	r1, [pc, #56]	; (800fe40 <rcl_service_get_default_options+0x44>)
 800fe08:	4628      	mov	r0, r5
 800fe0a:	f009 fd70 	bl	80198ee <memcpy>
 800fe0e:	4668      	mov	r0, sp
 800fe10:	f7fc f98c 	bl	800c12c <rcutils_get_default_allocator>
 800fe14:	46ec      	mov	ip, sp
 800fe16:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 800fe1a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800fe1e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800fe22:	f8dc 3000 	ldr.w	r3, [ip]
 800fe26:	2268      	movs	r2, #104	; 0x68
 800fe28:	4629      	mov	r1, r5
 800fe2a:	4620      	mov	r0, r4
 800fe2c:	f8ce 3000 	str.w	r3, [lr]
 800fe30:	f009 fd5d 	bl	80198ee <memcpy>
 800fe34:	4620      	mov	r0, r4
 800fe36:	b007      	add	sp, #28
 800fe38:	bd30      	pop	{r4, r5, pc}
 800fe3a:	bf00      	nop
 800fe3c:	2000bd28 	.word	0x2000bd28
 800fe40:	0801b580 	.word	0x0801b580

0800fe44 <rcl_service_get_rmw_handle>:
 800fe44:	b118      	cbz	r0, 800fe4e <rcl_service_get_rmw_handle+0xa>
 800fe46:	6800      	ldr	r0, [r0, #0]
 800fe48:	b108      	cbz	r0, 800fe4e <rcl_service_get_rmw_handle+0xa>
 800fe4a:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 800fe4e:	4770      	bx	lr

0800fe50 <rcl_take_request>:
 800fe50:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fe52:	468e      	mov	lr, r1
 800fe54:	b091      	sub	sp, #68	; 0x44
 800fe56:	460c      	mov	r4, r1
 800fe58:	4617      	mov	r7, r2
 800fe5a:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 800fe5e:	4605      	mov	r5, r0
 800fe60:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fe64:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fe68:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800fe6c:	e88c 0003 	stmia.w	ip, {r0, r1}
 800fe70:	b30d      	cbz	r5, 800feb6 <rcl_take_request+0x66>
 800fe72:	682b      	ldr	r3, [r5, #0]
 800fe74:	b1fb      	cbz	r3, 800feb6 <rcl_take_request+0x66>
 800fe76:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 800fe7a:	b1e0      	cbz	r0, 800feb6 <rcl_take_request+0x66>
 800fe7c:	b397      	cbz	r7, 800fee4 <rcl_take_request+0x94>
 800fe7e:	2300      	movs	r3, #0
 800fe80:	463a      	mov	r2, r7
 800fe82:	a906      	add	r1, sp, #24
 800fe84:	f88d 3017 	strb.w	r3, [sp, #23]
 800fe88:	f10d 0317 	add.w	r3, sp, #23
 800fe8c:	f003 f82e 	bl	8012eec <rmw_take_request>
 800fe90:	4606      	mov	r6, r0
 800fe92:	b198      	cbz	r0, 800febc <rcl_take_request+0x6c>
 800fe94:	280a      	cmp	r0, #10
 800fe96:	bf18      	it	ne
 800fe98:	2601      	movne	r6, #1
 800fe9a:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 800fe9e:	46a6      	mov	lr, r4
 800fea0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800fea4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800fea8:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800feac:	e88e 0003 	stmia.w	lr, {r0, r1}
 800feb0:	4630      	mov	r0, r6
 800feb2:	b011      	add	sp, #68	; 0x44
 800feb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800feb6:	f44f 7616 	mov.w	r6, #600	; 0x258
 800feba:	e7ee      	b.n	800fe9a <rcl_take_request+0x4a>
 800febc:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800fec0:	b193      	cbz	r3, 800fee8 <rcl_take_request+0x98>
 800fec2:	682b      	ldr	r3, [r5, #0]
 800fec4:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
 800fec8:	2800      	cmp	r0, #0
 800feca:	d0e6      	beq.n	800fe9a <rcl_take_request+0x4a>
 800fecc:	463a      	mov	r2, r7
 800fece:	ab0a      	add	r3, sp, #40	; 0x28
 800fed0:	2101      	movs	r1, #1
 800fed2:	9302      	str	r3, [sp, #8]
 800fed4:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 800fed8:	e9cd 6700 	strd	r6, r7, [sp]
 800fedc:	f000 f844 	bl	800ff68 <rcl_send_service_event_message>
 800fee0:	4606      	mov	r6, r0
 800fee2:	e7da      	b.n	800fe9a <rcl_take_request+0x4a>
 800fee4:	260b      	movs	r6, #11
 800fee6:	e7d8      	b.n	800fe9a <rcl_take_request+0x4a>
 800fee8:	f240 2659 	movw	r6, #601	; 0x259
 800feec:	e7d5      	b.n	800fe9a <rcl_take_request+0x4a>
 800feee:	bf00      	nop

0800fef0 <rcl_send_response>:
 800fef0:	b350      	cbz	r0, 800ff48 <rcl_send_response+0x58>
 800fef2:	6803      	ldr	r3, [r0, #0]
 800fef4:	b570      	push	{r4, r5, r6, lr}
 800fef6:	4604      	mov	r4, r0
 800fef8:	b084      	sub	sp, #16
 800fefa:	b1cb      	cbz	r3, 800ff30 <rcl_send_response+0x40>
 800fefc:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 800ff00:	b1b0      	cbz	r0, 800ff30 <rcl_send_response+0x40>
 800ff02:	4615      	mov	r5, r2
 800ff04:	b1ea      	cbz	r2, 800ff42 <rcl_send_response+0x52>
 800ff06:	460e      	mov	r6, r1
 800ff08:	b1d9      	cbz	r1, 800ff42 <rcl_send_response+0x52>
 800ff0a:	f003 f84d 	bl	8012fa8 <rmw_send_response>
 800ff0e:	b998      	cbnz	r0, 800ff38 <rcl_send_response+0x48>
 800ff10:	6823      	ldr	r3, [r4, #0]
 800ff12:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800ff16:	b16b      	cbz	r3, 800ff34 <rcl_send_response+0x44>
 800ff18:	462a      	mov	r2, r5
 800ff1a:	2102      	movs	r1, #2
 800ff1c:	4618      	mov	r0, r3
 800ff1e:	ed96 7b04 	vldr	d7, [r6, #16]
 800ff22:	9602      	str	r6, [sp, #8]
 800ff24:	ed8d 7b00 	vstr	d7, [sp]
 800ff28:	f000 f81e 	bl	800ff68 <rcl_send_service_event_message>
 800ff2c:	b004      	add	sp, #16
 800ff2e:	bd70      	pop	{r4, r5, r6, pc}
 800ff30:	f44f 7016 	mov.w	r0, #600	; 0x258
 800ff34:	b004      	add	sp, #16
 800ff36:	bd70      	pop	{r4, r5, r6, pc}
 800ff38:	2802      	cmp	r0, #2
 800ff3a:	bf18      	it	ne
 800ff3c:	2001      	movne	r0, #1
 800ff3e:	b004      	add	sp, #16
 800ff40:	bd70      	pop	{r4, r5, r6, pc}
 800ff42:	200b      	movs	r0, #11
 800ff44:	b004      	add	sp, #16
 800ff46:	bd70      	pop	{r4, r5, r6, pc}
 800ff48:	f44f 7016 	mov.w	r0, #600	; 0x258
 800ff4c:	4770      	bx	lr
 800ff4e:	bf00      	nop

0800ff50 <rcl_service_is_valid>:
 800ff50:	b130      	cbz	r0, 800ff60 <rcl_service_is_valid+0x10>
 800ff52:	6800      	ldr	r0, [r0, #0]
 800ff54:	b120      	cbz	r0, 800ff60 <rcl_service_is_valid+0x10>
 800ff56:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 800ff5a:	3800      	subs	r0, #0
 800ff5c:	bf18      	it	ne
 800ff5e:	2001      	movne	r0, #1
 800ff60:	4770      	bx	lr
 800ff62:	bf00      	nop
 800ff64:	0000      	movs	r0, r0
	...

0800ff68 <rcl_send_service_event_message>:
 800ff68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ff6c:	b093      	sub	sp, #76	; 0x4c
 800ff6e:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800ff70:	b196      	cbz	r6, 800ff98 <rcl_send_service_event_message+0x30>
 800ff72:	4615      	mov	r5, r2
 800ff74:	b182      	cbz	r2, 800ff98 <rcl_send_service_event_message+0x30>
 800ff76:	4604      	mov	r4, r0
 800ff78:	b148      	cbz	r0, 800ff8e <rcl_send_service_event_message+0x26>
 800ff7a:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 800ff7e:	b133      	cbz	r3, 800ff8e <rcl_send_service_event_message+0x26>
 800ff80:	68c0      	ldr	r0, [r0, #12]
 800ff82:	460f      	mov	r7, r1
 800ff84:	f000 f90c 	bl	80101a0 <rcl_clock_valid>
 800ff88:	b108      	cbz	r0, 800ff8e <rcl_send_service_event_message+0x26>
 800ff8a:	7a23      	ldrb	r3, [r4, #8]
 800ff8c:	b94b      	cbnz	r3, 800ffa2 <rcl_send_service_event_message+0x3a>
 800ff8e:	2401      	movs	r4, #1
 800ff90:	4620      	mov	r0, r4
 800ff92:	b013      	add	sp, #76	; 0x4c
 800ff94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ff98:	240b      	movs	r4, #11
 800ff9a:	4620      	mov	r0, r4
 800ff9c:	b013      	add	sp, #76	; 0x4c
 800ff9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ffa2:	f104 0e60 	add.w	lr, r4, #96	; 0x60
 800ffa6:	f10d 0c0c 	add.w	ip, sp, #12
 800ffaa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ffae:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ffb2:	f8de 3000 	ldr.w	r3, [lr]
 800ffb6:	a803      	add	r0, sp, #12
 800ffb8:	f8cc 3000 	str.w	r3, [ip]
 800ffbc:	f7fc f8c4 	bl	800c148 <rcutils_allocator_is_valid>
 800ffc0:	2800      	cmp	r0, #0
 800ffc2:	d0e9      	beq.n	800ff98 <rcl_send_service_event_message+0x30>
 800ffc4:	6820      	ldr	r0, [r4, #0]
 800ffc6:	f007 fd41 	bl	8017a4c <rcl_publisher_is_valid>
 800ffca:	2800      	cmp	r0, #0
 800ffcc:	d05e      	beq.n	801008c <rcl_send_service_event_message+0x124>
 800ffce:	4669      	mov	r1, sp
 800ffd0:	68e0      	ldr	r0, [r4, #12]
 800ffd2:	f000 f977 	bl	80102c4 <rcl_clock_get_now>
 800ffd6:	4601      	mov	r1, r0
 800ffd8:	2800      	cmp	r0, #0
 800ffda:	d146      	bne.n	801006a <rcl_send_service_event_message+0x102>
 800ffdc:	2220      	movs	r2, #32
 800ffde:	eb0d 0002 	add.w	r0, sp, r2
 800ffe2:	f009 fb0f 	bl	8019604 <memset>
 800ffe6:	f88d 7020 	strb.w	r7, [sp, #32]
 800ffea:	e9dd 8900 	ldrd	r8, r9, [sp]
 800ffee:	a32a      	add	r3, pc, #168	; (adr r3, 8010098 <rcl_send_service_event_message+0x130>)
 800fff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fff4:	4640      	mov	r0, r8
 800fff6:	4649      	mov	r1, r9
 800fff8:	f7f0 f98a 	bl	8000310 <__aeabi_ldivmod>
 800fffc:	4649      	mov	r1, r9
 800fffe:	9009      	str	r0, [sp, #36]	; 0x24
 8010000:	4640      	mov	r0, r8
 8010002:	a325      	add	r3, pc, #148	; (adr r3, 8010098 <rcl_send_service_event_message+0x130>)
 8010004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010008:	f7f0 f982 	bl	8000310 <__aeabi_ldivmod>
 801000c:	920a      	str	r2, [sp, #40]	; 0x28
 801000e:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
 8010012:	6830      	ldr	r0, [r6, #0]
 8010014:	6871      	ldr	r1, [r6, #4]
 8010016:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 801001a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 801001e:	7a23      	ldrb	r3, [r4, #8]
 8010020:	68b2      	ldr	r2, [r6, #8]
 8010022:	2b01      	cmp	r3, #1
 8010024:	68f3      	ldr	r3, [r6, #12]
 8010026:	bf08      	it	eq
 8010028:	2500      	moveq	r5, #0
 801002a:	2f01      	cmp	r7, #1
 801002c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010030:	d81f      	bhi.n	8010072 <rcl_send_service_event_message+0x10a>
 8010032:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8010036:	462a      	mov	r2, r5
 8010038:	a808      	add	r0, sp, #32
 801003a:	a903      	add	r1, sp, #12
 801003c:	699d      	ldr	r5, [r3, #24]
 801003e:	2300      	movs	r3, #0
 8010040:	47a8      	blx	r5
 8010042:	4605      	mov	r5, r0
 8010044:	2d00      	cmp	r5, #0
 8010046:	d0a2      	beq.n	800ff8e <rcl_send_service_event_message+0x26>
 8010048:	4629      	mov	r1, r5
 801004a:	6820      	ldr	r0, [r4, #0]
 801004c:	2200      	movs	r2, #0
 801004e:	f007 fcd9 	bl	8017a04 <rcl_publish>
 8010052:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8010056:	4604      	mov	r4, r0
 8010058:	a903      	add	r1, sp, #12
 801005a:	4628      	mov	r0, r5
 801005c:	69db      	ldr	r3, [r3, #28]
 801005e:	4798      	blx	r3
 8010060:	2c00      	cmp	r4, #0
 8010062:	d095      	beq.n	800ff90 <rcl_send_service_event_message+0x28>
 8010064:	f7fc f894 	bl	800c190 <rcutils_reset_error>
 8010068:	e792      	b.n	800ff90 <rcl_send_service_event_message+0x28>
 801006a:	2401      	movs	r4, #1
 801006c:	f7fc f890 	bl	800c190 <rcutils_reset_error>
 8010070:	e78e      	b.n	800ff90 <rcl_send_service_event_message+0x28>
 8010072:	1eb9      	subs	r1, r7, #2
 8010074:	2901      	cmp	r1, #1
 8010076:	d8f8      	bhi.n	801006a <rcl_send_service_event_message+0x102>
 8010078:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 801007c:	462b      	mov	r3, r5
 801007e:	a808      	add	r0, sp, #32
 8010080:	a903      	add	r1, sp, #12
 8010082:	6995      	ldr	r5, [r2, #24]
 8010084:	2200      	movs	r2, #0
 8010086:	47a8      	blx	r5
 8010088:	4605      	mov	r5, r0
 801008a:	e7db      	b.n	8010044 <rcl_send_service_event_message+0xdc>
 801008c:	f44f 7496 	mov.w	r4, #300	; 0x12c
 8010090:	e77e      	b.n	800ff90 <rcl_send_service_event_message+0x28>
 8010092:	bf00      	nop
 8010094:	f3af 8000 	nop.w
 8010098:	3b9aca00 	.word	0x3b9aca00
 801009c:	00000000 	.word	0x00000000

080100a0 <rcl_take>:
 80100a0:	2800      	cmp	r0, #0
 80100a2:	d049      	beq.n	8010138 <rcl_take+0x98>
 80100a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100a8:	4615      	mov	r5, r2
 80100aa:	6802      	ldr	r2, [r0, #0]
 80100ac:	b0a0      	sub	sp, #128	; 0x80
 80100ae:	4604      	mov	r4, r0
 80100b0:	2a00      	cmp	r2, #0
 80100b2:	d039      	beq.n	8010128 <rcl_take+0x88>
 80100b4:	461f      	mov	r7, r3
 80100b6:	f8d2 30c8 	ldr.w	r3, [r2, #200]	; 0xc8
 80100ba:	b3ab      	cbz	r3, 8010128 <rcl_take+0x88>
 80100bc:	460e      	mov	r6, r1
 80100be:	2900      	cmp	r1, #0
 80100c0:	d038      	beq.n	8010134 <rcl_take+0x94>
 80100c2:	2d00      	cmp	r5, #0
 80100c4:	d03c      	beq.n	8010140 <rcl_take+0xa0>
 80100c6:	a802      	add	r0, sp, #8
 80100c8:	f002 f962 	bl	8012390 <rmw_get_zero_initialized_message_info>
 80100cc:	6823      	ldr	r3, [r4, #0]
 80100ce:	f10d 0c08 	add.w	ip, sp, #8
 80100d2:	46ae      	mov	lr, r5
 80100d4:	f8d3 80c8 	ldr.w	r8, [r3, #200]	; 0xc8
 80100d8:	2400      	movs	r4, #0
 80100da:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80100de:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80100e2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80100e6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80100ea:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80100ee:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80100f2:	e89c 0003 	ldmia.w	ip, {r0, r1}
 80100f6:	462b      	mov	r3, r5
 80100f8:	f10d 0247 	add.w	r2, sp, #71	; 0x47
 80100fc:	f88d 4047 	strb.w	r4, [sp, #71]	; 0x47
 8010100:	e88e 0003 	stmia.w	lr, {r0, r1}
 8010104:	4631      	mov	r1, r6
 8010106:	4640      	mov	r0, r8
 8010108:	9700      	str	r7, [sp, #0]
 801010a:	f003 f999 	bl	8013440 <rmw_take_with_info>
 801010e:	4603      	mov	r3, r0
 8010110:	b9c0      	cbnz	r0, 8010144 <rcl_take+0xa4>
 8010112:	f89d 1047 	ldrb.w	r1, [sp, #71]	; 0x47
 8010116:	f240 1291 	movw	r2, #401	; 0x191
 801011a:	2900      	cmp	r1, #0
 801011c:	bf08      	it	eq
 801011e:	4613      	moveq	r3, r2
 8010120:	4618      	mov	r0, r3
 8010122:	b020      	add	sp, #128	; 0x80
 8010124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010128:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801012c:	4618      	mov	r0, r3
 801012e:	b020      	add	sp, #128	; 0x80
 8010130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010134:	230b      	movs	r3, #11
 8010136:	e7f3      	b.n	8010120 <rcl_take+0x80>
 8010138:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801013c:	4618      	mov	r0, r3
 801013e:	4770      	bx	lr
 8010140:	ad12      	add	r5, sp, #72	; 0x48
 8010142:	e7c0      	b.n	80100c6 <rcl_take+0x26>
 8010144:	f7fe ff66 	bl	800f014 <rcl_convert_rmw_ret_to_rcl_ret>
 8010148:	4603      	mov	r3, r0
 801014a:	e7e9      	b.n	8010120 <rcl_take+0x80>

0801014c <rcl_subscription_get_rmw_handle>:
 801014c:	b118      	cbz	r0, 8010156 <rcl_subscription_get_rmw_handle+0xa>
 801014e:	6800      	ldr	r0, [r0, #0]
 8010150:	b108      	cbz	r0, 8010156 <rcl_subscription_get_rmw_handle+0xa>
 8010152:	f8d0 00c8 	ldr.w	r0, [r0, #200]	; 0xc8
 8010156:	4770      	bx	lr

08010158 <rcl_subscription_is_valid>:
 8010158:	b130      	cbz	r0, 8010168 <rcl_subscription_is_valid+0x10>
 801015a:	6800      	ldr	r0, [r0, #0]
 801015c:	b120      	cbz	r0, 8010168 <rcl_subscription_is_valid+0x10>
 801015e:	f8d0 00c8 	ldr.w	r0, [r0, #200]	; 0xc8
 8010162:	3800      	subs	r0, #0
 8010164:	bf18      	it	ne
 8010166:	2001      	movne	r0, #1
 8010168:	4770      	bx	lr
 801016a:	bf00      	nop

0801016c <rcl_get_system_time>:
 801016c:	4608      	mov	r0, r1
 801016e:	f7fc b82b 	b.w	800c1c8 <rcutils_system_time_now>
 8010172:	bf00      	nop

08010174 <rcl_get_steady_time>:
 8010174:	4608      	mov	r0, r1
 8010176:	f7fc b84f 	b.w	800c218 <rcutils_steady_time_now>
 801017a:	bf00      	nop

0801017c <rcl_get_ros_time>:
 801017c:	7a03      	ldrb	r3, [r0, #8]
 801017e:	b510      	push	{r4, lr}
 8010180:	460c      	mov	r4, r1
 8010182:	b143      	cbz	r3, 8010196 <rcl_get_ros_time+0x1a>
 8010184:	2105      	movs	r1, #5
 8010186:	f001 fd83 	bl	8011c90 <__atomic_load_8>
 801018a:	4602      	mov	r2, r0
 801018c:	460b      	mov	r3, r1
 801018e:	2000      	movs	r0, #0
 8010190:	e9c4 2300 	strd	r2, r3, [r4]
 8010194:	bd10      	pop	{r4, pc}
 8010196:	4608      	mov	r0, r1
 8010198:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801019c:	f7fc b814 	b.w	800c1c8 <rcutils_system_time_now>

080101a0 <rcl_clock_valid>:
 80101a0:	b138      	cbz	r0, 80101b2 <rcl_clock_valid+0x12>
 80101a2:	7803      	ldrb	r3, [r0, #0]
 80101a4:	b123      	cbz	r3, 80101b0 <rcl_clock_valid+0x10>
 80101a6:	68c0      	ldr	r0, [r0, #12]
 80101a8:	3800      	subs	r0, #0
 80101aa:	bf18      	it	ne
 80101ac:	2001      	movne	r0, #1
 80101ae:	4770      	bx	lr
 80101b0:	4618      	mov	r0, r3
 80101b2:	4770      	bx	lr

080101b4 <rcl_clock_init>:
 80101b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101b6:	4605      	mov	r5, r0
 80101b8:	4610      	mov	r0, r2
 80101ba:	4614      	mov	r4, r2
 80101bc:	460e      	mov	r6, r1
 80101be:	f7fb ffc3 	bl	800c148 <rcutils_allocator_is_valid>
 80101c2:	b128      	cbz	r0, 80101d0 <rcl_clock_init+0x1c>
 80101c4:	2d03      	cmp	r5, #3
 80101c6:	d803      	bhi.n	80101d0 <rcl_clock_init+0x1c>
 80101c8:	e8df f005 	tbb	[pc, r5]
 80101cc:	0659301f 	.word	0x0659301f
 80101d0:	f04f 0c0b 	mov.w	ip, #11
 80101d4:	4660      	mov	r0, ip
 80101d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80101d8:	2c00      	cmp	r4, #0
 80101da:	d0f9      	beq.n	80101d0 <rcl_clock_init+0x1c>
 80101dc:	fab6 f386 	clz	r3, r6
 80101e0:	095b      	lsrs	r3, r3, #5
 80101e2:	2e00      	cmp	r6, #0
 80101e4:	d0f4      	beq.n	80101d0 <rcl_clock_init+0x1c>
 80101e6:	6133      	str	r3, [r6, #16]
 80101e8:	469c      	mov	ip, r3
 80101ea:	f106 0514 	add.w	r5, r6, #20
 80101ee:	4f32      	ldr	r7, [pc, #200]	; (80102b8 <rcl_clock_init+0x104>)
 80101f0:	f04f 0e03 	mov.w	lr, #3
 80101f4:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80101f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80101fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80101fc:	6823      	ldr	r3, [r4, #0]
 80101fe:	4660      	mov	r0, ip
 8010200:	602b      	str	r3, [r5, #0]
 8010202:	60f7      	str	r7, [r6, #12]
 8010204:	f886 e000 	strb.w	lr, [r6]
 8010208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801020a:	2e00      	cmp	r6, #0
 801020c:	d0e0      	beq.n	80101d0 <rcl_clock_init+0x1c>
 801020e:	2300      	movs	r3, #0
 8010210:	f106 0514 	add.w	r5, r6, #20
 8010214:	7033      	strb	r3, [r6, #0]
 8010216:	469c      	mov	ip, r3
 8010218:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801021c:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8010220:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010222:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010224:	6823      	ldr	r3, [r4, #0]
 8010226:	4660      	mov	r0, ip
 8010228:	602b      	str	r3, [r5, #0]
 801022a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801022c:	2c00      	cmp	r4, #0
 801022e:	d0cf      	beq.n	80101d0 <rcl_clock_init+0x1c>
 8010230:	fab6 f586 	clz	r5, r6
 8010234:	096d      	lsrs	r5, r5, #5
 8010236:	2e00      	cmp	r6, #0
 8010238:	d0ca      	beq.n	80101d0 <rcl_clock_init+0x1c>
 801023a:	46a6      	mov	lr, r4
 801023c:	7035      	strb	r5, [r6, #0]
 801023e:	f106 0c14 	add.w	ip, r6, #20
 8010242:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010246:	e9c6 5501 	strd	r5, r5, [r6, #4]
 801024a:	e9c6 5503 	strd	r5, r5, [r6, #12]
 801024e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010252:	f8de 3000 	ldr.w	r3, [lr]
 8010256:	2010      	movs	r0, #16
 8010258:	f8cc 3000 	str.w	r3, [ip]
 801025c:	6823      	ldr	r3, [r4, #0]
 801025e:	6921      	ldr	r1, [r4, #16]
 8010260:	4798      	blx	r3
 8010262:	6130      	str	r0, [r6, #16]
 8010264:	b320      	cbz	r0, 80102b0 <rcl_clock_init+0xfc>
 8010266:	2200      	movs	r2, #0
 8010268:	2300      	movs	r3, #0
 801026a:	46ac      	mov	ip, r5
 801026c:	7205      	strb	r5, [r0, #8]
 801026e:	e9c0 2300 	strd	r2, r3, [r0]
 8010272:	4a12      	ldr	r2, [pc, #72]	; (80102bc <rcl_clock_init+0x108>)
 8010274:	2301      	movs	r3, #1
 8010276:	4660      	mov	r0, ip
 8010278:	60f2      	str	r2, [r6, #12]
 801027a:	7033      	strb	r3, [r6, #0]
 801027c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801027e:	2c00      	cmp	r4, #0
 8010280:	d0a6      	beq.n	80101d0 <rcl_clock_init+0x1c>
 8010282:	fab6 f386 	clz	r3, r6
 8010286:	095b      	lsrs	r3, r3, #5
 8010288:	2e00      	cmp	r6, #0
 801028a:	d0a1      	beq.n	80101d0 <rcl_clock_init+0x1c>
 801028c:	6133      	str	r3, [r6, #16]
 801028e:	469c      	mov	ip, r3
 8010290:	f106 0514 	add.w	r5, r6, #20
 8010294:	f8df e028 	ldr.w	lr, [pc, #40]	; 80102c0 <rcl_clock_init+0x10c>
 8010298:	2702      	movs	r7, #2
 801029a:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801029e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80102a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80102a2:	6823      	ldr	r3, [r4, #0]
 80102a4:	4660      	mov	r0, ip
 80102a6:	602b      	str	r3, [r5, #0]
 80102a8:	f8c6 e00c 	str.w	lr, [r6, #12]
 80102ac:	7037      	strb	r7, [r6, #0]
 80102ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80102b0:	f04f 0c0a 	mov.w	ip, #10
 80102b4:	e78e      	b.n	80101d4 <rcl_clock_init+0x20>
 80102b6:	bf00      	nop
 80102b8:	08010175 	.word	0x08010175
 80102bc:	0801017d 	.word	0x0801017d
 80102c0:	0801016d 	.word	0x0801016d

080102c4 <rcl_clock_get_now>:
 80102c4:	b140      	cbz	r0, 80102d8 <rcl_clock_get_now+0x14>
 80102c6:	b139      	cbz	r1, 80102d8 <rcl_clock_get_now+0x14>
 80102c8:	7803      	ldrb	r3, [r0, #0]
 80102ca:	b11b      	cbz	r3, 80102d4 <rcl_clock_get_now+0x10>
 80102cc:	68c3      	ldr	r3, [r0, #12]
 80102ce:	b10b      	cbz	r3, 80102d4 <rcl_clock_get_now+0x10>
 80102d0:	6900      	ldr	r0, [r0, #16]
 80102d2:	4718      	bx	r3
 80102d4:	2001      	movs	r0, #1
 80102d6:	4770      	bx	lr
 80102d8:	200b      	movs	r0, #11
 80102da:	4770      	bx	lr

080102dc <rcl_timer_call>:
 80102dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102e0:	b087      	sub	sp, #28
 80102e2:	2800      	cmp	r0, #0
 80102e4:	d06c      	beq.n	80103c0 <rcl_timer_call+0xe4>
 80102e6:	6803      	ldr	r3, [r0, #0]
 80102e8:	4604      	mov	r4, r0
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d062      	beq.n	80103b4 <rcl_timer_call+0xd8>
 80102ee:	f3bf 8f5b 	dmb	ish
 80102f2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80102f6:	f3bf 8f5b 	dmb	ish
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	d14f      	bne.n	801039e <rcl_timer_call+0xc2>
 80102fe:	6803      	ldr	r3, [r0, #0]
 8010300:	a904      	add	r1, sp, #16
 8010302:	6818      	ldr	r0, [r3, #0]
 8010304:	f7ff ffde 	bl	80102c4 <rcl_clock_get_now>
 8010308:	4605      	mov	r5, r0
 801030a:	2800      	cmp	r0, #0
 801030c:	d149      	bne.n	80103a2 <rcl_timer_call+0xc6>
 801030e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010312:	2b00      	cmp	r3, #0
 8010314:	db49      	blt.n	80103aa <rcl_timer_call+0xce>
 8010316:	2605      	movs	r6, #5
 8010318:	6820      	ldr	r0, [r4, #0]
 801031a:	9600      	str	r6, [sp, #0]
 801031c:	3020      	adds	r0, #32
 801031e:	f001 fd23 	bl	8011d68 <__atomic_exchange_8>
 8010322:	6823      	ldr	r3, [r4, #0]
 8010324:	4680      	mov	r8, r0
 8010326:	f3bf 8f5b 	dmb	ish
 801032a:	f8d3 b010 	ldr.w	fp, [r3, #16]
 801032e:	f3bf 8f5b 	dmb	ish
 8010332:	6820      	ldr	r0, [r4, #0]
 8010334:	4689      	mov	r9, r1
 8010336:	4631      	mov	r1, r6
 8010338:	3028      	adds	r0, #40	; 0x28
 801033a:	f001 fca9 	bl	8011c90 <__atomic_load_8>
 801033e:	460f      	mov	r7, r1
 8010340:	4631      	mov	r1, r6
 8010342:	4606      	mov	r6, r0
 8010344:	6820      	ldr	r0, [r4, #0]
 8010346:	3018      	adds	r0, #24
 8010348:	f001 fca2 	bl	8011c90 <__atomic_load_8>
 801034c:	4602      	mov	r2, r0
 801034e:	9804      	ldr	r0, [sp, #16]
 8010350:	460b      	mov	r3, r1
 8010352:	18b6      	adds	r6, r6, r2
 8010354:	f8dd c014 	ldr.w	ip, [sp, #20]
 8010358:	4692      	mov	sl, r2
 801035a:	eb47 0701 	adc.w	r7, r7, r1
 801035e:	4286      	cmp	r6, r0
 8010360:	eb77 010c 	sbcs.w	r1, r7, ip
 8010364:	da04      	bge.n	8010370 <rcl_timer_call+0x94>
 8010366:	ea53 0102 	orrs.w	r1, r3, r2
 801036a:	d12e      	bne.n	80103ca <rcl_timer_call+0xee>
 801036c:	4606      	mov	r6, r0
 801036e:	4667      	mov	r7, ip
 8010370:	6820      	ldr	r0, [r4, #0]
 8010372:	2105      	movs	r1, #5
 8010374:	4632      	mov	r2, r6
 8010376:	463b      	mov	r3, r7
 8010378:	3028      	adds	r0, #40	; 0x28
 801037a:	9100      	str	r1, [sp, #0]
 801037c:	f001 fcbe 	bl	8011cfc <__atomic_store_8>
 8010380:	f1bb 0f00 	cmp.w	fp, #0
 8010384:	d00d      	beq.n	80103a2 <rcl_timer_call+0xc6>
 8010386:	9a04      	ldr	r2, [sp, #16]
 8010388:	4620      	mov	r0, r4
 801038a:	9b05      	ldr	r3, [sp, #20]
 801038c:	ebb2 0208 	subs.w	r2, r2, r8
 8010390:	eb63 0309 	sbc.w	r3, r3, r9
 8010394:	47d8      	blx	fp
 8010396:	4628      	mov	r0, r5
 8010398:	b007      	add	sp, #28
 801039a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801039e:	f240 3521 	movw	r5, #801	; 0x321
 80103a2:	4628      	mov	r0, r5
 80103a4:	b007      	add	sp, #28
 80103a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103aa:	2501      	movs	r5, #1
 80103ac:	4628      	mov	r0, r5
 80103ae:	b007      	add	sp, #28
 80103b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103b4:	f44f 7548 	mov.w	r5, #800	; 0x320
 80103b8:	4628      	mov	r0, r5
 80103ba:	b007      	add	sp, #28
 80103bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103c0:	250b      	movs	r5, #11
 80103c2:	4628      	mov	r0, r5
 80103c4:	b007      	add	sp, #28
 80103c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103ca:	1b80      	subs	r0, r0, r6
 80103cc:	eb6c 0107 	sbc.w	r1, ip, r7
 80103d0:	3801      	subs	r0, #1
 80103d2:	f161 0100 	sbc.w	r1, r1, #0
 80103d6:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80103da:	f7ef ff99 	bl	8000310 <__aeabi_ldivmod>
 80103de:	9b02      	ldr	r3, [sp, #8]
 80103e0:	3001      	adds	r0, #1
 80103e2:	f141 0100 	adc.w	r1, r1, #0
 80103e6:	fb00 f303 	mul.w	r3, r0, r3
 80103ea:	fb01 330a 	mla	r3, r1, sl, r3
 80103ee:	fba0 0a0a 	umull	r0, sl, r0, sl
 80103f2:	1986      	adds	r6, r0, r6
 80103f4:	4453      	add	r3, sl
 80103f6:	eb43 0707 	adc.w	r7, r3, r7
 80103fa:	e7b9      	b.n	8010370 <rcl_timer_call+0x94>

080103fc <rcl_timer_is_ready>:
 80103fc:	b570      	push	{r4, r5, r6, lr}
 80103fe:	b082      	sub	sp, #8
 8010400:	b380      	cbz	r0, 8010464 <rcl_timer_is_ready+0x68>
 8010402:	6803      	ldr	r3, [r0, #0]
 8010404:	4604      	mov	r4, r0
 8010406:	b38b      	cbz	r3, 801046c <rcl_timer_is_ready+0x70>
 8010408:	460d      	mov	r5, r1
 801040a:	b359      	cbz	r1, 8010464 <rcl_timer_is_ready+0x68>
 801040c:	f3bf 8f5b 	dmb	ish
 8010410:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010414:	f3bf 8f5b 	dmb	ish
 8010418:	b953      	cbnz	r3, 8010430 <rcl_timer_is_ready+0x34>
 801041a:	6803      	ldr	r3, [r0, #0]
 801041c:	4669      	mov	r1, sp
 801041e:	6818      	ldr	r0, [r3, #0]
 8010420:	f7ff ff50 	bl	80102c4 <rcl_clock_get_now>
 8010424:	4606      	mov	r6, r0
 8010426:	b148      	cbz	r0, 801043c <rcl_timer_is_ready+0x40>
 8010428:	f240 3321 	movw	r3, #801	; 0x321
 801042c:	4298      	cmp	r0, r3
 801042e:	d102      	bne.n	8010436 <rcl_timer_is_ready+0x3a>
 8010430:	2300      	movs	r3, #0
 8010432:	461e      	mov	r6, r3
 8010434:	702b      	strb	r3, [r5, #0]
 8010436:	4630      	mov	r0, r6
 8010438:	b002      	add	sp, #8
 801043a:	bd70      	pop	{r4, r5, r6, pc}
 801043c:	6820      	ldr	r0, [r4, #0]
 801043e:	2105      	movs	r1, #5
 8010440:	3028      	adds	r0, #40	; 0x28
 8010442:	f001 fc25 	bl	8011c90 <__atomic_load_8>
 8010446:	9b00      	ldr	r3, [sp, #0]
 8010448:	1ac0      	subs	r0, r0, r3
 801044a:	9b01      	ldr	r3, [sp, #4]
 801044c:	eb61 0103 	sbc.w	r1, r1, r3
 8010450:	2801      	cmp	r0, #1
 8010452:	4630      	mov	r0, r6
 8010454:	f171 0300 	sbcs.w	r3, r1, #0
 8010458:	bfb4      	ite	lt
 801045a:	2301      	movlt	r3, #1
 801045c:	2300      	movge	r3, #0
 801045e:	702b      	strb	r3, [r5, #0]
 8010460:	b002      	add	sp, #8
 8010462:	bd70      	pop	{r4, r5, r6, pc}
 8010464:	260b      	movs	r6, #11
 8010466:	4630      	mov	r0, r6
 8010468:	b002      	add	sp, #8
 801046a:	bd70      	pop	{r4, r5, r6, pc}
 801046c:	f44f 7648 	mov.w	r6, #800	; 0x320
 8010470:	e7e1      	b.n	8010436 <rcl_timer_is_ready+0x3a>
 8010472:	bf00      	nop

08010474 <rcl_timer_get_time_until_next_call>:
 8010474:	b570      	push	{r4, r5, r6, lr}
 8010476:	b082      	sub	sp, #8
 8010478:	b330      	cbz	r0, 80104c8 <rcl_timer_get_time_until_next_call+0x54>
 801047a:	6803      	ldr	r3, [r0, #0]
 801047c:	4604      	mov	r4, r0
 801047e:	b33b      	cbz	r3, 80104d0 <rcl_timer_get_time_until_next_call+0x5c>
 8010480:	460d      	mov	r5, r1
 8010482:	b309      	cbz	r1, 80104c8 <rcl_timer_get_time_until_next_call+0x54>
 8010484:	f3bf 8f5b 	dmb	ish
 8010488:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801048c:	f3bf 8f5b 	dmb	ish
 8010490:	b9ab      	cbnz	r3, 80104be <rcl_timer_get_time_until_next_call+0x4a>
 8010492:	6803      	ldr	r3, [r0, #0]
 8010494:	4669      	mov	r1, sp
 8010496:	6818      	ldr	r0, [r3, #0]
 8010498:	f7ff ff14 	bl	80102c4 <rcl_clock_get_now>
 801049c:	4606      	mov	r6, r0
 801049e:	b958      	cbnz	r0, 80104b8 <rcl_timer_get_time_until_next_call+0x44>
 80104a0:	6820      	ldr	r0, [r4, #0]
 80104a2:	2105      	movs	r1, #5
 80104a4:	3028      	adds	r0, #40	; 0x28
 80104a6:	f001 fbf3 	bl	8011c90 <__atomic_load_8>
 80104aa:	9b00      	ldr	r3, [sp, #0]
 80104ac:	1ac0      	subs	r0, r0, r3
 80104ae:	9b01      	ldr	r3, [sp, #4]
 80104b0:	eb61 0103 	sbc.w	r1, r1, r3
 80104b4:	6028      	str	r0, [r5, #0]
 80104b6:	6069      	str	r1, [r5, #4]
 80104b8:	4630      	mov	r0, r6
 80104ba:	b002      	add	sp, #8
 80104bc:	bd70      	pop	{r4, r5, r6, pc}
 80104be:	f240 3621 	movw	r6, #801	; 0x321
 80104c2:	4630      	mov	r0, r6
 80104c4:	b002      	add	sp, #8
 80104c6:	bd70      	pop	{r4, r5, r6, pc}
 80104c8:	260b      	movs	r6, #11
 80104ca:	4630      	mov	r0, r6
 80104cc:	b002      	add	sp, #8
 80104ce:	bd70      	pop	{r4, r5, r6, pc}
 80104d0:	f44f 7648 	mov.w	r6, #800	; 0x320
 80104d4:	e7f0      	b.n	80104b8 <rcl_timer_get_time_until_next_call+0x44>
 80104d6:	bf00      	nop

080104d8 <rcl_timer_get_guard_condition>:
 80104d8:	b130      	cbz	r0, 80104e8 <rcl_timer_get_guard_condition+0x10>
 80104da:	6800      	ldr	r0, [r0, #0]
 80104dc:	b120      	cbz	r0, 80104e8 <rcl_timer_get_guard_condition+0x10>
 80104de:	68c3      	ldr	r3, [r0, #12]
 80104e0:	b10b      	cbz	r3, 80104e6 <rcl_timer_get_guard_condition+0xe>
 80104e2:	3008      	adds	r0, #8
 80104e4:	4770      	bx	lr
 80104e6:	4618      	mov	r0, r3
 80104e8:	4770      	bx	lr
 80104ea:	bf00      	nop

080104ec <rcl_validate_enclave_name_with_size>:
 80104ec:	2800      	cmp	r0, #0
 80104ee:	d049      	beq.n	8010584 <rcl_validate_enclave_name_with_size+0x98>
 80104f0:	b570      	push	{r4, r5, r6, lr}
 80104f2:	4615      	mov	r5, r2
 80104f4:	b0c2      	sub	sp, #264	; 0x108
 80104f6:	b19a      	cbz	r2, 8010520 <rcl_validate_enclave_name_with_size+0x34>
 80104f8:	461e      	mov	r6, r3
 80104fa:	466a      	mov	r2, sp
 80104fc:	ab01      	add	r3, sp, #4
 80104fe:	460c      	mov	r4, r1
 8010500:	f001 ffca 	bl	8012498 <rmw_validate_namespace_with_size>
 8010504:	4684      	mov	ip, r0
 8010506:	b9b8      	cbnz	r0, 8010538 <rcl_validate_enclave_name_with_size+0x4c>
 8010508:	9900      	ldr	r1, [sp, #0]
 801050a:	b171      	cbz	r1, 801052a <rcl_validate_enclave_name_with_size+0x3e>
 801050c:	2907      	cmp	r1, #7
 801050e:	d019      	beq.n	8010544 <rcl_validate_enclave_name_with_size+0x58>
 8010510:	1e4b      	subs	r3, r1, #1
 8010512:	2b05      	cmp	r3, #5
 8010514:	d83a      	bhi.n	801058c <rcl_validate_enclave_name_with_size+0xa0>
 8010516:	e8df f003 	tbb	[pc, r3]
 801051a:	2926      	.short	0x2926
 801051c:	1d322f2c 	.word	0x1d322f2c
 8010520:	f04f 0c0b 	mov.w	ip, #11
 8010524:	4660      	mov	r0, ip
 8010526:	b042      	add	sp, #264	; 0x108
 8010528:	bd70      	pop	{r4, r5, r6, pc}
 801052a:	2907      	cmp	r1, #7
 801052c:	d00a      	beq.n	8010544 <rcl_validate_enclave_name_with_size+0x58>
 801052e:	2300      	movs	r3, #0
 8010530:	4660      	mov	r0, ip
 8010532:	602b      	str	r3, [r5, #0]
 8010534:	b042      	add	sp, #264	; 0x108
 8010536:	bd70      	pop	{r4, r5, r6, pc}
 8010538:	f7fe fd6c 	bl	800f014 <rcl_convert_rmw_ret_to_rcl_ret>
 801053c:	4684      	mov	ip, r0
 801053e:	4660      	mov	r0, ip
 8010540:	b042      	add	sp, #264	; 0x108
 8010542:	bd70      	pop	{r4, r5, r6, pc}
 8010544:	2cff      	cmp	r4, #255	; 0xff
 8010546:	d9f2      	bls.n	801052e <rcl_validate_enclave_name_with_size+0x42>
 8010548:	6029      	str	r1, [r5, #0]
 801054a:	2e00      	cmp	r6, #0
 801054c:	d0ea      	beq.n	8010524 <rcl_validate_enclave_name_with_size+0x38>
 801054e:	23fe      	movs	r3, #254	; 0xfe
 8010550:	6033      	str	r3, [r6, #0]
 8010552:	e7e7      	b.n	8010524 <rcl_validate_enclave_name_with_size+0x38>
 8010554:	2306      	movs	r3, #6
 8010556:	602b      	str	r3, [r5, #0]
 8010558:	2e00      	cmp	r6, #0
 801055a:	d0e3      	beq.n	8010524 <rcl_validate_enclave_name_with_size+0x38>
 801055c:	9b01      	ldr	r3, [sp, #4]
 801055e:	4660      	mov	r0, ip
 8010560:	6033      	str	r3, [r6, #0]
 8010562:	b042      	add	sp, #264	; 0x108
 8010564:	bd70      	pop	{r4, r5, r6, pc}
 8010566:	2301      	movs	r3, #1
 8010568:	602b      	str	r3, [r5, #0]
 801056a:	e7f5      	b.n	8010558 <rcl_validate_enclave_name_with_size+0x6c>
 801056c:	2302      	movs	r3, #2
 801056e:	602b      	str	r3, [r5, #0]
 8010570:	e7f2      	b.n	8010558 <rcl_validate_enclave_name_with_size+0x6c>
 8010572:	2303      	movs	r3, #3
 8010574:	602b      	str	r3, [r5, #0]
 8010576:	e7ef      	b.n	8010558 <rcl_validate_enclave_name_with_size+0x6c>
 8010578:	2304      	movs	r3, #4
 801057a:	602b      	str	r3, [r5, #0]
 801057c:	e7ec      	b.n	8010558 <rcl_validate_enclave_name_with_size+0x6c>
 801057e:	2305      	movs	r3, #5
 8010580:	602b      	str	r3, [r5, #0]
 8010582:	e7e9      	b.n	8010558 <rcl_validate_enclave_name_with_size+0x6c>
 8010584:	f04f 0c0b 	mov.w	ip, #11
 8010588:	4660      	mov	r0, ip
 801058a:	4770      	bx	lr
 801058c:	460b      	mov	r3, r1
 801058e:	4a04      	ldr	r2, [pc, #16]	; (80105a0 <rcl_validate_enclave_name_with_size+0xb4>)
 8010590:	f44f 7180 	mov.w	r1, #256	; 0x100
 8010594:	a802      	add	r0, sp, #8
 8010596:	f001 fd33 	bl	8012000 <rcutils_snprintf>
 801059a:	f04f 0c01 	mov.w	ip, #1
 801059e:	e7c1      	b.n	8010524 <rcl_validate_enclave_name_with_size+0x38>
 80105a0:	0801b5d0 	.word	0x0801b5d0

080105a4 <rcl_validate_enclave_name>:
 80105a4:	b168      	cbz	r0, 80105c2 <rcl_validate_enclave_name+0x1e>
 80105a6:	b570      	push	{r4, r5, r6, lr}
 80105a8:	460d      	mov	r5, r1
 80105aa:	4616      	mov	r6, r2
 80105ac:	4604      	mov	r4, r0
 80105ae:	f7ef fea7 	bl	8000300 <strlen>
 80105b2:	4633      	mov	r3, r6
 80105b4:	4601      	mov	r1, r0
 80105b6:	462a      	mov	r2, r5
 80105b8:	4620      	mov	r0, r4
 80105ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80105be:	f7ff bf95 	b.w	80104ec <rcl_validate_enclave_name_with_size>
 80105c2:	200b      	movs	r0, #11
 80105c4:	4770      	bx	lr
 80105c6:	bf00      	nop

080105c8 <rcl_get_zero_initialized_wait_set>:
 80105c8:	b510      	push	{r4, lr}
 80105ca:	4c08      	ldr	r4, [pc, #32]	; (80105ec <rcl_get_zero_initialized_wait_set+0x24>)
 80105cc:	4686      	mov	lr, r0
 80105ce:	4684      	mov	ip, r0
 80105d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80105d2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80105d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80105d8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80105dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80105de:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80105e2:	6823      	ldr	r3, [r4, #0]
 80105e4:	4670      	mov	r0, lr
 80105e6:	f8cc 3000 	str.w	r3, [ip]
 80105ea:	bd10      	pop	{r4, pc}
 80105ec:	0801b630 	.word	0x0801b630

080105f0 <rcl_wait_set_is_valid>:
 80105f0:	b118      	cbz	r0, 80105fa <rcl_wait_set_is_valid+0xa>
 80105f2:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80105f4:	3800      	subs	r0, #0
 80105f6:	bf18      	it	ne
 80105f8:	2001      	movne	r0, #1
 80105fa:	4770      	bx	lr

080105fc <rcl_wait_set_fini>:
 80105fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010600:	b082      	sub	sp, #8
 8010602:	2800      	cmp	r0, #0
 8010604:	f000 8095 	beq.w	8010732 <rcl_wait_set_fini+0x136>
 8010608:	6b06      	ldr	r6, [r0, #48]	; 0x30
 801060a:	4604      	mov	r4, r0
 801060c:	2e00      	cmp	r6, #0
 801060e:	f000 808c 	beq.w	801072a <rcl_wait_set_fini+0x12e>
 8010612:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 8010614:	f003 f8ee 	bl	80137f4 <rmw_destroy_wait_set>
 8010618:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801061a:	1e06      	subs	r6, r0, #0
 801061c:	bf18      	it	ne
 801061e:	f44f 7661 	movne.w	r6, #900	; 0x384
 8010622:	2d00      	cmp	r5, #0
 8010624:	f000 8081 	beq.w	801072a <rcl_wait_set_fini+0x12e>
 8010628:	2700      	movs	r7, #0
 801062a:	6820      	ldr	r0, [r4, #0]
 801062c:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 8010630:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8010632:	6067      	str	r7, [r4, #4]
 8010634:	602f      	str	r7, [r5, #0]
 8010636:	b120      	cbz	r0, 8010642 <rcl_wait_set_fini+0x46>
 8010638:	9101      	str	r1, [sp, #4]
 801063a:	47c0      	blx	r8
 801063c:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801063e:	9901      	ldr	r1, [sp, #4]
 8010640:	6027      	str	r7, [r4, #0]
 8010642:	68a8      	ldr	r0, [r5, #8]
 8010644:	b120      	cbz	r0, 8010650 <rcl_wait_set_fini+0x54>
 8010646:	47c0      	blx	r8
 8010648:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801064a:	2300      	movs	r3, #0
 801064c:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8010650:	f04f 0800 	mov.w	r8, #0
 8010654:	68a0      	ldr	r0, [r4, #8]
 8010656:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8010658:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801065a:	f8c4 800c 	str.w	r8, [r4, #12]
 801065e:	f8c5 800c 	str.w	r8, [r5, #12]
 8010662:	b128      	cbz	r0, 8010670 <rcl_wait_set_fini+0x74>
 8010664:	47b8      	blx	r7
 8010666:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8010668:	f8c4 8008 	str.w	r8, [r4, #8]
 801066c:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 801066e:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8010670:	f04f 0800 	mov.w	r8, #0
 8010674:	6968      	ldr	r0, [r5, #20]
 8010676:	f8c5 8010 	str.w	r8, [r5, #16]
 801067a:	b128      	cbz	r0, 8010688 <rcl_wait_set_fini+0x8c>
 801067c:	47b8      	blx	r7
 801067e:	f8c5 8014 	str.w	r8, [r5, #20]
 8010682:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8010684:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8010686:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8010688:	f04f 0800 	mov.w	r8, #0
 801068c:	6920      	ldr	r0, [r4, #16]
 801068e:	f8c4 8014 	str.w	r8, [r4, #20]
 8010692:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40
 8010696:	b128      	cbz	r0, 80106a4 <rcl_wait_set_fini+0xa8>
 8010698:	47b8      	blx	r7
 801069a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801069c:	f8c4 8010 	str.w	r8, [r4, #16]
 80106a0:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 80106a2:	6da9      	ldr	r1, [r5, #88]	; 0x58
 80106a4:	f04f 0800 	mov.w	r8, #0
 80106a8:	69a0      	ldr	r0, [r4, #24]
 80106aa:	f8c4 801c 	str.w	r8, [r4, #28]
 80106ae:	f8c5 8018 	str.w	r8, [r5, #24]
 80106b2:	b128      	cbz	r0, 80106c0 <rcl_wait_set_fini+0xc4>
 80106b4:	9101      	str	r1, [sp, #4]
 80106b6:	47b8      	blx	r7
 80106b8:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80106ba:	9901      	ldr	r1, [sp, #4]
 80106bc:	f8c4 8018 	str.w	r8, [r4, #24]
 80106c0:	6a28      	ldr	r0, [r5, #32]
 80106c2:	b120      	cbz	r0, 80106ce <rcl_wait_set_fini+0xd2>
 80106c4:	47b8      	blx	r7
 80106c6:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80106c8:	2300      	movs	r3, #0
 80106ca:	e9c5 3307 	strd	r3, r3, [r5, #28]
 80106ce:	2700      	movs	r7, #0
 80106d0:	6a20      	ldr	r0, [r4, #32]
 80106d2:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 80106d6:	6da9      	ldr	r1, [r5, #88]	; 0x58
 80106d8:	6267      	str	r7, [r4, #36]	; 0x24
 80106da:	626f      	str	r7, [r5, #36]	; 0x24
 80106dc:	b120      	cbz	r0, 80106e8 <rcl_wait_set_fini+0xec>
 80106de:	9101      	str	r1, [sp, #4]
 80106e0:	47c0      	blx	r8
 80106e2:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80106e4:	9901      	ldr	r1, [sp, #4]
 80106e6:	6227      	str	r7, [r4, #32]
 80106e8:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80106ea:	b120      	cbz	r0, 80106f6 <rcl_wait_set_fini+0xfa>
 80106ec:	47c0      	blx	r8
 80106ee:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80106f0:	2300      	movs	r3, #0
 80106f2:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 80106f6:	2700      	movs	r7, #0
 80106f8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80106fa:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 80106fe:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8010700:	62e7      	str	r7, [r4, #44]	; 0x2c
 8010702:	632f      	str	r7, [r5, #48]	; 0x30
 8010704:	b120      	cbz	r0, 8010710 <rcl_wait_set_fini+0x114>
 8010706:	9101      	str	r1, [sp, #4]
 8010708:	47c0      	blx	r8
 801070a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801070c:	9901      	ldr	r1, [sp, #4]
 801070e:	62a7      	str	r7, [r4, #40]	; 0x28
 8010710:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8010712:	b120      	cbz	r0, 801071e <rcl_wait_set_fini+0x122>
 8010714:	47c0      	blx	r8
 8010716:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8010718:	2300      	movs	r3, #0
 801071a:	e9c5 330d 	strd	r3, r3, [r5, #52]	; 0x34
 801071e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8010720:	4628      	mov	r0, r5
 8010722:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8010724:	4798      	blx	r3
 8010726:	2300      	movs	r3, #0
 8010728:	6323      	str	r3, [r4, #48]	; 0x30
 801072a:	4630      	mov	r0, r6
 801072c:	b002      	add	sp, #8
 801072e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010732:	260b      	movs	r6, #11
 8010734:	4630      	mov	r0, r6
 8010736:	b002      	add	sp, #8
 8010738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801073c <rcl_wait_set_add_subscription>:
 801073c:	b318      	cbz	r0, 8010786 <rcl_wait_set_add_subscription+0x4a>
 801073e:	b538      	push	{r3, r4, r5, lr}
 8010740:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8010742:	4604      	mov	r4, r0
 8010744:	b30b      	cbz	r3, 801078a <rcl_wait_set_add_subscription+0x4e>
 8010746:	b319      	cbz	r1, 8010790 <rcl_wait_set_add_subscription+0x54>
 8010748:	681d      	ldr	r5, [r3, #0]
 801074a:	6840      	ldr	r0, [r0, #4]
 801074c:	4285      	cmp	r5, r0
 801074e:	d217      	bcs.n	8010780 <rcl_wait_set_add_subscription+0x44>
 8010750:	1c68      	adds	r0, r5, #1
 8010752:	6018      	str	r0, [r3, #0]
 8010754:	6823      	ldr	r3, [r4, #0]
 8010756:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801075a:	b102      	cbz	r2, 801075e <rcl_wait_set_add_subscription+0x22>
 801075c:	6015      	str	r5, [r2, #0]
 801075e:	4608      	mov	r0, r1
 8010760:	f7ff fcf4 	bl	801014c <rcl_subscription_get_rmw_handle>
 8010764:	b150      	cbz	r0, 801077c <rcl_wait_set_add_subscription+0x40>
 8010766:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010768:	6842      	ldr	r2, [r0, #4]
 801076a:	2000      	movs	r0, #0
 801076c:	689b      	ldr	r3, [r3, #8]
 801076e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010772:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010774:	6853      	ldr	r3, [r2, #4]
 8010776:	3301      	adds	r3, #1
 8010778:	6053      	str	r3, [r2, #4]
 801077a:	bd38      	pop	{r3, r4, r5, pc}
 801077c:	2001      	movs	r0, #1
 801077e:	bd38      	pop	{r3, r4, r5, pc}
 8010780:	f240 3086 	movw	r0, #902	; 0x386
 8010784:	bd38      	pop	{r3, r4, r5, pc}
 8010786:	200b      	movs	r0, #11
 8010788:	4770      	bx	lr
 801078a:	f44f 7061 	mov.w	r0, #900	; 0x384
 801078e:	bd38      	pop	{r3, r4, r5, pc}
 8010790:	200b      	movs	r0, #11
 8010792:	bd38      	pop	{r3, r4, r5, pc}

08010794 <rcl_wait_set_clear>:
 8010794:	2800      	cmp	r0, #0
 8010796:	d074      	beq.n	8010882 <rcl_wait_set_clear+0xee>
 8010798:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801079a:	b510      	push	{r4, lr}
 801079c:	4604      	mov	r4, r0
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d071      	beq.n	8010886 <rcl_wait_set_clear+0xf2>
 80107a2:	6800      	ldr	r0, [r0, #0]
 80107a4:	b138      	cbz	r0, 80107b6 <rcl_wait_set_clear+0x22>
 80107a6:	6862      	ldr	r2, [r4, #4]
 80107a8:	2100      	movs	r1, #0
 80107aa:	0092      	lsls	r2, r2, #2
 80107ac:	f008 ff2a 	bl	8019604 <memset>
 80107b0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80107b2:	2200      	movs	r2, #0
 80107b4:	601a      	str	r2, [r3, #0]
 80107b6:	68a0      	ldr	r0, [r4, #8]
 80107b8:	b138      	cbz	r0, 80107ca <rcl_wait_set_clear+0x36>
 80107ba:	68e2      	ldr	r2, [r4, #12]
 80107bc:	2100      	movs	r1, #0
 80107be:	0092      	lsls	r2, r2, #2
 80107c0:	f008 ff20 	bl	8019604 <memset>
 80107c4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80107c6:	2200      	movs	r2, #0
 80107c8:	60da      	str	r2, [r3, #12]
 80107ca:	69a0      	ldr	r0, [r4, #24]
 80107cc:	b138      	cbz	r0, 80107de <rcl_wait_set_clear+0x4a>
 80107ce:	69e2      	ldr	r2, [r4, #28]
 80107d0:	2100      	movs	r1, #0
 80107d2:	0092      	lsls	r2, r2, #2
 80107d4:	f008 ff16 	bl	8019604 <memset>
 80107d8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80107da:	2200      	movs	r2, #0
 80107dc:	619a      	str	r2, [r3, #24]
 80107de:	6a20      	ldr	r0, [r4, #32]
 80107e0:	b138      	cbz	r0, 80107f2 <rcl_wait_set_clear+0x5e>
 80107e2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80107e4:	2100      	movs	r1, #0
 80107e6:	0092      	lsls	r2, r2, #2
 80107e8:	f008 ff0c 	bl	8019604 <memset>
 80107ec:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80107ee:	2200      	movs	r2, #0
 80107f0:	625a      	str	r2, [r3, #36]	; 0x24
 80107f2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80107f4:	b138      	cbz	r0, 8010806 <rcl_wait_set_clear+0x72>
 80107f6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80107f8:	2100      	movs	r1, #0
 80107fa:	0092      	lsls	r2, r2, #2
 80107fc:	f008 ff02 	bl	8019604 <memset>
 8010800:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010802:	2200      	movs	r2, #0
 8010804:	631a      	str	r2, [r3, #48]	; 0x30
 8010806:	6920      	ldr	r0, [r4, #16]
 8010808:	b138      	cbz	r0, 801081a <rcl_wait_set_clear+0x86>
 801080a:	6962      	ldr	r2, [r4, #20]
 801080c:	2100      	movs	r1, #0
 801080e:	0092      	lsls	r2, r2, #2
 8010810:	f008 fef8 	bl	8019604 <memset>
 8010814:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010816:	2200      	movs	r2, #0
 8010818:	641a      	str	r2, [r3, #64]	; 0x40
 801081a:	6898      	ldr	r0, [r3, #8]
 801081c:	b138      	cbz	r0, 801082e <rcl_wait_set_clear+0x9a>
 801081e:	685a      	ldr	r2, [r3, #4]
 8010820:	2100      	movs	r1, #0
 8010822:	0092      	lsls	r2, r2, #2
 8010824:	f008 feee 	bl	8019604 <memset>
 8010828:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801082a:	2200      	movs	r2, #0
 801082c:	605a      	str	r2, [r3, #4]
 801082e:	6958      	ldr	r0, [r3, #20]
 8010830:	b138      	cbz	r0, 8010842 <rcl_wait_set_clear+0xae>
 8010832:	691a      	ldr	r2, [r3, #16]
 8010834:	2100      	movs	r1, #0
 8010836:	0092      	lsls	r2, r2, #2
 8010838:	f008 fee4 	bl	8019604 <memset>
 801083c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801083e:	2200      	movs	r2, #0
 8010840:	611a      	str	r2, [r3, #16]
 8010842:	6a18      	ldr	r0, [r3, #32]
 8010844:	b138      	cbz	r0, 8010856 <rcl_wait_set_clear+0xc2>
 8010846:	69da      	ldr	r2, [r3, #28]
 8010848:	2100      	movs	r1, #0
 801084a:	0092      	lsls	r2, r2, #2
 801084c:	f008 feda 	bl	8019604 <memset>
 8010850:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010852:	2200      	movs	r2, #0
 8010854:	61da      	str	r2, [r3, #28]
 8010856:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8010858:	b138      	cbz	r0, 801086a <rcl_wait_set_clear+0xd6>
 801085a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801085c:	2100      	movs	r1, #0
 801085e:	0092      	lsls	r2, r2, #2
 8010860:	f008 fed0 	bl	8019604 <memset>
 8010864:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010866:	2200      	movs	r2, #0
 8010868:	629a      	str	r2, [r3, #40]	; 0x28
 801086a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 801086c:	b140      	cbz	r0, 8010880 <rcl_wait_set_clear+0xec>
 801086e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010870:	2100      	movs	r1, #0
 8010872:	0092      	lsls	r2, r2, #2
 8010874:	f008 fec6 	bl	8019604 <memset>
 8010878:	2300      	movs	r3, #0
 801087a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801087c:	4618      	mov	r0, r3
 801087e:	6353      	str	r3, [r2, #52]	; 0x34
 8010880:	bd10      	pop	{r4, pc}
 8010882:	200b      	movs	r0, #11
 8010884:	4770      	bx	lr
 8010886:	f44f 7061 	mov.w	r0, #900	; 0x384
 801088a:	bd10      	pop	{r4, pc}

0801088c <rcl_wait_set_resize>:
 801088c:	2800      	cmp	r0, #0
 801088e:	f000 8180 	beq.w	8010b92 <rcl_wait_set_resize+0x306>
 8010892:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010896:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8010898:	b083      	sub	sp, #12
 801089a:	4605      	mov	r5, r0
 801089c:	2c00      	cmp	r4, #0
 801089e:	f000 817a 	beq.w	8010b96 <rcl_wait_set_resize+0x30a>
 80108a2:	f04f 0900 	mov.w	r9, #0
 80108a6:	461f      	mov	r7, r3
 80108a8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80108ac:	4688      	mov	r8, r1
 80108ae:	4616      	mov	r6, r2
 80108b0:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	; 0x4c
 80108b4:	f8c0 9004 	str.w	r9, [r0, #4]
 80108b8:	f8c4 9000 	str.w	r9, [r4]
 80108bc:	2900      	cmp	r1, #0
 80108be:	f000 80bf 	beq.w	8010a40 <rcl_wait_set_resize+0x1b4>
 80108c2:	008c      	lsls	r4, r1, #2
 80108c4:	4652      	mov	r2, sl
 80108c6:	6800      	ldr	r0, [r0, #0]
 80108c8:	4621      	mov	r1, r4
 80108ca:	9301      	str	r3, [sp, #4]
 80108cc:	4798      	blx	r3
 80108ce:	9b01      	ldr	r3, [sp, #4]
 80108d0:	6028      	str	r0, [r5, #0]
 80108d2:	2800      	cmp	r0, #0
 80108d4:	f000 80f6 	beq.w	8010ac4 <rcl_wait_set_resize+0x238>
 80108d8:	4622      	mov	r2, r4
 80108da:	4649      	mov	r1, r9
 80108dc:	9301      	str	r3, [sp, #4]
 80108de:	f008 fe91 	bl	8019604 <memset>
 80108e2:	f8c5 8004 	str.w	r8, [r5, #4]
 80108e6:	4652      	mov	r2, sl
 80108e8:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 80108ec:	4621      	mov	r1, r4
 80108ee:	9b01      	ldr	r3, [sp, #4]
 80108f0:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80108f4:	f8c8 9004 	str.w	r9, [r8, #4]
 80108f8:	4798      	blx	r3
 80108fa:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80108fc:	f8c8 0008 	str.w	r0, [r8, #8]
 8010900:	689b      	ldr	r3, [r3, #8]
 8010902:	2b00      	cmp	r3, #0
 8010904:	f000 814a 	beq.w	8010b9c <rcl_wait_set_resize+0x310>
 8010908:	4622      	mov	r2, r4
 801090a:	4649      	mov	r1, r9
 801090c:	4618      	mov	r0, r3
 801090e:	f008 fe79 	bl	8019604 <memset>
 8010912:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010914:	f04f 0800 	mov.w	r8, #0
 8010918:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801091c:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	; 0x4c
 8010920:	f8c5 800c 	str.w	r8, [r5, #12]
 8010924:	f8c4 800c 	str.w	r8, [r4, #12]
 8010928:	2e00      	cmp	r6, #0
 801092a:	f040 809b 	bne.w	8010a64 <rcl_wait_set_resize+0x1d8>
 801092e:	68a8      	ldr	r0, [r5, #8]
 8010930:	b128      	cbz	r0, 801093e <rcl_wait_set_resize+0xb2>
 8010932:	4649      	mov	r1, r9
 8010934:	4790      	blx	r2
 8010936:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010938:	60ae      	str	r6, [r5, #8]
 801093a:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801093e:	f04f 0800 	mov.w	r8, #0
 8010942:	19f6      	adds	r6, r6, r7
 8010944:	f8c4 8010 	str.w	r8, [r4, #16]
 8010948:	f040 80a2 	bne.w	8010a90 <rcl_wait_set_resize+0x204>
 801094c:	6960      	ldr	r0, [r4, #20]
 801094e:	b130      	cbz	r0, 801095e <rcl_wait_set_resize+0xd2>
 8010950:	4649      	mov	r1, r9
 8010952:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8010954:	4798      	blx	r3
 8010956:	6166      	str	r6, [r4, #20]
 8010958:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801095a:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801095e:	2600      	movs	r6, #0
 8010960:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 8010964:	616e      	str	r6, [r5, #20]
 8010966:	6426      	str	r6, [r4, #64]	; 0x40
 8010968:	2f00      	cmp	r7, #0
 801096a:	f040 80af 	bne.w	8010acc <rcl_wait_set_resize+0x240>
 801096e:	6928      	ldr	r0, [r5, #16]
 8010970:	b138      	cbz	r0, 8010982 <rcl_wait_set_resize+0xf6>
 8010972:	4649      	mov	r1, r9
 8010974:	47d0      	blx	sl
 8010976:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010978:	612f      	str	r7, [r5, #16]
 801097a:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801097e:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 8010982:	2600      	movs	r6, #0
 8010984:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010986:	61ee      	str	r6, [r5, #28]
 8010988:	61a6      	str	r6, [r4, #24]
 801098a:	2b00      	cmp	r3, #0
 801098c:	f040 8093 	bne.w	8010ab6 <rcl_wait_set_resize+0x22a>
 8010990:	69a8      	ldr	r0, [r5, #24]
 8010992:	b120      	cbz	r0, 801099e <rcl_wait_set_resize+0x112>
 8010994:	4649      	mov	r1, r9
 8010996:	47d0      	blx	sl
 8010998:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801099a:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801099c:	61ab      	str	r3, [r5, #24]
 801099e:	6a20      	ldr	r0, [r4, #32]
 80109a0:	b128      	cbz	r0, 80109ae <rcl_wait_set_resize+0x122>
 80109a2:	4649      	mov	r1, r9
 80109a4:	47d0      	blx	sl
 80109a6:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80109a8:	2300      	movs	r3, #0
 80109aa:	e9c4 3307 	strd	r3, r3, [r4, #28]
 80109ae:	2600      	movs	r6, #0
 80109b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80109b2:	6da7      	ldr	r7, [r4, #88]	; 0x58
 80109b4:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	; 0x4c
 80109b8:	626e      	str	r6, [r5, #36]	; 0x24
 80109ba:	6266      	str	r6, [r4, #36]	; 0x24
 80109bc:	2b00      	cmp	r3, #0
 80109be:	f000 8098 	beq.w	8010af2 <rcl_wait_set_resize+0x266>
 80109c2:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 80109c6:	463a      	mov	r2, r7
 80109c8:	6a28      	ldr	r0, [r5, #32]
 80109ca:	4651      	mov	r1, sl
 80109cc:	47c8      	blx	r9
 80109ce:	6228      	str	r0, [r5, #32]
 80109d0:	2800      	cmp	r0, #0
 80109d2:	d077      	beq.n	8010ac4 <rcl_wait_set_resize+0x238>
 80109d4:	4652      	mov	r2, sl
 80109d6:	4631      	mov	r1, r6
 80109d8:	f008 fe14 	bl	8019604 <memset>
 80109dc:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80109de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80109e0:	463a      	mov	r2, r7
 80109e2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80109e4:	4651      	mov	r1, sl
 80109e6:	626b      	str	r3, [r5, #36]	; 0x24
 80109e8:	62a6      	str	r6, [r4, #40]	; 0x28
 80109ea:	47c8      	blx	r9
 80109ec:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80109ee:	62e0      	str	r0, [r4, #44]	; 0x2c
 80109f0:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80109f2:	2c00      	cmp	r4, #0
 80109f4:	f000 80f2 	beq.w	8010bdc <rcl_wait_set_resize+0x350>
 80109f8:	4620      	mov	r0, r4
 80109fa:	4652      	mov	r2, sl
 80109fc:	4631      	mov	r1, r6
 80109fe:	f008 fe01 	bl	8019604 <memset>
 8010a02:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010a04:	2600      	movs	r6, #0
 8010a06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010a08:	6da7      	ldr	r7, [r4, #88]	; 0x58
 8010a0a:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	; 0x4c
 8010a0e:	62ee      	str	r6, [r5, #44]	; 0x2c
 8010a10:	6326      	str	r6, [r4, #48]	; 0x30
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	f040 8097 	bne.w	8010b46 <rcl_wait_set_resize+0x2ba>
 8010a18:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8010a1a:	b120      	cbz	r0, 8010a26 <rcl_wait_set_resize+0x19a>
 8010a1c:	4639      	mov	r1, r7
 8010a1e:	47c0      	blx	r8
 8010a20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010a22:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010a24:	62ab      	str	r3, [r5, #40]	; 0x28
 8010a26:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8010a28:	2800      	cmp	r0, #0
 8010a2a:	d04c      	beq.n	8010ac6 <rcl_wait_set_resize+0x23a>
 8010a2c:	4639      	mov	r1, r7
 8010a2e:	47c0      	blx	r8
 8010a30:	2300      	movs	r3, #0
 8010a32:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8010a34:	4618      	mov	r0, r3
 8010a36:	e9c2 330d 	strd	r3, r3, [r2, #52]	; 0x34
 8010a3a:	b003      	add	sp, #12
 8010a3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a40:	6800      	ldr	r0, [r0, #0]
 8010a42:	b120      	cbz	r0, 8010a4e <rcl_wait_set_resize+0x1c2>
 8010a44:	4651      	mov	r1, sl
 8010a46:	47d8      	blx	fp
 8010a48:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010a4a:	f8c5 8000 	str.w	r8, [r5]
 8010a4e:	68a0      	ldr	r0, [r4, #8]
 8010a50:	2800      	cmp	r0, #0
 8010a52:	f43f af5f 	beq.w	8010914 <rcl_wait_set_resize+0x88>
 8010a56:	4651      	mov	r1, sl
 8010a58:	47d8      	blx	fp
 8010a5a:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010a5c:	2300      	movs	r3, #0
 8010a5e:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8010a62:	e757      	b.n	8010914 <rcl_wait_set_resize+0x88>
 8010a64:	00b4      	lsls	r4, r6, #2
 8010a66:	464a      	mov	r2, r9
 8010a68:	68a8      	ldr	r0, [r5, #8]
 8010a6a:	4621      	mov	r1, r4
 8010a6c:	4798      	blx	r3
 8010a6e:	60a8      	str	r0, [r5, #8]
 8010a70:	b340      	cbz	r0, 8010ac4 <rcl_wait_set_resize+0x238>
 8010a72:	4622      	mov	r2, r4
 8010a74:	4641      	mov	r1, r8
 8010a76:	f008 fdc5 	bl	8019604 <memset>
 8010a7a:	f04f 0800 	mov.w	r8, #0
 8010a7e:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010a80:	60ee      	str	r6, [r5, #12]
 8010a82:	19f6      	adds	r6, r6, r7
 8010a84:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8010a88:	f8c4 8010 	str.w	r8, [r4, #16]
 8010a8c:	f43f af5e 	beq.w	801094c <rcl_wait_set_resize+0xc0>
 8010a90:	00b6      	lsls	r6, r6, #2
 8010a92:	464a      	mov	r2, r9
 8010a94:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8010a96:	6960      	ldr	r0, [r4, #20]
 8010a98:	4631      	mov	r1, r6
 8010a9a:	4798      	blx	r3
 8010a9c:	4681      	mov	r9, r0
 8010a9e:	6160      	str	r0, [r4, #20]
 8010aa0:	2800      	cmp	r0, #0
 8010aa2:	f000 8084 	beq.w	8010bae <rcl_wait_set_resize+0x322>
 8010aa6:	4632      	mov	r2, r6
 8010aa8:	4641      	mov	r1, r8
 8010aaa:	f008 fdab 	bl	8019604 <memset>
 8010aae:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010ab0:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8010ab4:	e753      	b.n	801095e <rcl_wait_set_resize+0xd2>
 8010ab6:	009c      	lsls	r4, r3, #2
 8010ab8:	464a      	mov	r2, r9
 8010aba:	69a8      	ldr	r0, [r5, #24]
 8010abc:	4621      	mov	r1, r4
 8010abe:	47c0      	blx	r8
 8010ac0:	61a8      	str	r0, [r5, #24]
 8010ac2:	bb40      	cbnz	r0, 8010b16 <rcl_wait_set_resize+0x28a>
 8010ac4:	200a      	movs	r0, #10
 8010ac6:	b003      	add	sp, #12
 8010ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010acc:	00bc      	lsls	r4, r7, #2
 8010ace:	464a      	mov	r2, r9
 8010ad0:	6928      	ldr	r0, [r5, #16]
 8010ad2:	4621      	mov	r1, r4
 8010ad4:	47c0      	blx	r8
 8010ad6:	6128      	str	r0, [r5, #16]
 8010ad8:	2800      	cmp	r0, #0
 8010ada:	d0f3      	beq.n	8010ac4 <rcl_wait_set_resize+0x238>
 8010adc:	4622      	mov	r2, r4
 8010ade:	4631      	mov	r1, r6
 8010ae0:	f008 fd90 	bl	8019604 <memset>
 8010ae4:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010ae6:	616f      	str	r7, [r5, #20]
 8010ae8:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8010aec:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 8010af0:	e747      	b.n	8010982 <rcl_wait_set_resize+0xf6>
 8010af2:	6a28      	ldr	r0, [r5, #32]
 8010af4:	b120      	cbz	r0, 8010b00 <rcl_wait_set_resize+0x274>
 8010af6:	4639      	mov	r1, r7
 8010af8:	47c0      	blx	r8
 8010afa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010afc:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010afe:	622b      	str	r3, [r5, #32]
 8010b00:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8010b02:	2800      	cmp	r0, #0
 8010b04:	f43f af7e 	beq.w	8010a04 <rcl_wait_set_resize+0x178>
 8010b08:	4639      	mov	r1, r7
 8010b0a:	47c0      	blx	r8
 8010b0c:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010b0e:	2300      	movs	r3, #0
 8010b10:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 8010b14:	e776      	b.n	8010a04 <rcl_wait_set_resize+0x178>
 8010b16:	4622      	mov	r2, r4
 8010b18:	4631      	mov	r1, r6
 8010b1a:	f008 fd73 	bl	8019604 <memset>
 8010b1e:	6b2f      	ldr	r7, [r5, #48]	; 0x30
 8010b20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010b22:	464a      	mov	r2, r9
 8010b24:	6a38      	ldr	r0, [r7, #32]
 8010b26:	4621      	mov	r1, r4
 8010b28:	61eb      	str	r3, [r5, #28]
 8010b2a:	61fe      	str	r6, [r7, #28]
 8010b2c:	47c0      	blx	r8
 8010b2e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8010b30:	6238      	str	r0, [r7, #32]
 8010b32:	6a1f      	ldr	r7, [r3, #32]
 8010b34:	2f00      	cmp	r7, #0
 8010b36:	d04a      	beq.n	8010bce <rcl_wait_set_resize+0x342>
 8010b38:	4622      	mov	r2, r4
 8010b3a:	4631      	mov	r1, r6
 8010b3c:	4638      	mov	r0, r7
 8010b3e:	f008 fd61 	bl	8019604 <memset>
 8010b42:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8010b44:	e733      	b.n	80109ae <rcl_wait_set_resize+0x122>
 8010b46:	009c      	lsls	r4, r3, #2
 8010b48:	463a      	mov	r2, r7
 8010b4a:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8010b4c:	4621      	mov	r1, r4
 8010b4e:	47c8      	blx	r9
 8010b50:	62a8      	str	r0, [r5, #40]	; 0x28
 8010b52:	2800      	cmp	r0, #0
 8010b54:	d0b6      	beq.n	8010ac4 <rcl_wait_set_resize+0x238>
 8010b56:	4622      	mov	r2, r4
 8010b58:	4631      	mov	r1, r6
 8010b5a:	f008 fd53 	bl	8019604 <memset>
 8010b5e:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 8010b62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010b64:	463a      	mov	r2, r7
 8010b66:	4621      	mov	r1, r4
 8010b68:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 8010b6c:	62eb      	str	r3, [r5, #44]	; 0x2c
 8010b6e:	f8ca 6034 	str.w	r6, [sl, #52]	; 0x34
 8010b72:	47c8      	blx	r9
 8010b74:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8010b76:	f8ca 0038 	str.w	r0, [sl, #56]	; 0x38
 8010b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d034      	beq.n	8010bea <rcl_wait_set_resize+0x35e>
 8010b80:	4622      	mov	r2, r4
 8010b82:	4631      	mov	r1, r6
 8010b84:	4618      	mov	r0, r3
 8010b86:	f008 fd3d 	bl	8019604 <memset>
 8010b8a:	4630      	mov	r0, r6
 8010b8c:	b003      	add	sp, #12
 8010b8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b92:	200b      	movs	r0, #11
 8010b94:	4770      	bx	lr
 8010b96:	f44f 7061 	mov.w	r0, #900	; 0x384
 8010b9a:	e794      	b.n	8010ac6 <rcl_wait_set_resize+0x23a>
 8010b9c:	6828      	ldr	r0, [r5, #0]
 8010b9e:	4651      	mov	r1, sl
 8010ba0:	9301      	str	r3, [sp, #4]
 8010ba2:	47d8      	blx	fp
 8010ba4:	9b01      	ldr	r3, [sp, #4]
 8010ba6:	200a      	movs	r0, #10
 8010ba8:	e9c5 3300 	strd	r3, r3, [r5]
 8010bac:	e78b      	b.n	8010ac6 <rcl_wait_set_resize+0x23a>
 8010bae:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8010bb0:	68a8      	ldr	r0, [r5, #8]
 8010bb2:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8010bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010bb6:	4798      	blx	r3
 8010bb8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8010bba:	6928      	ldr	r0, [r5, #16]
 8010bbc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010bbe:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8010bc0:	e9c5 9902 	strd	r9, r9, [r5, #8]
 8010bc4:	4790      	blx	r2
 8010bc6:	200a      	movs	r0, #10
 8010bc8:	e9c5 9904 	strd	r9, r9, [r5, #16]
 8010bcc:	e77b      	b.n	8010ac6 <rcl_wait_set_resize+0x23a>
 8010bce:	69a8      	ldr	r0, [r5, #24]
 8010bd0:	4649      	mov	r1, r9
 8010bd2:	47d0      	blx	sl
 8010bd4:	200a      	movs	r0, #10
 8010bd6:	e9c5 7706 	strd	r7, r7, [r5, #24]
 8010bda:	e774      	b.n	8010ac6 <rcl_wait_set_resize+0x23a>
 8010bdc:	6a28      	ldr	r0, [r5, #32]
 8010bde:	4639      	mov	r1, r7
 8010be0:	47c0      	blx	r8
 8010be2:	200a      	movs	r0, #10
 8010be4:	e9c5 4408 	strd	r4, r4, [r5, #32]
 8010be8:	e76d      	b.n	8010ac6 <rcl_wait_set_resize+0x23a>
 8010bea:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8010bec:	4639      	mov	r1, r7
 8010bee:	9301      	str	r3, [sp, #4]
 8010bf0:	47c0      	blx	r8
 8010bf2:	9b01      	ldr	r3, [sp, #4]
 8010bf4:	200a      	movs	r0, #10
 8010bf6:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 8010bfa:	e764      	b.n	8010ac6 <rcl_wait_set_resize+0x23a>

08010bfc <rcl_wait_set_init>:
 8010bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c00:	b085      	sub	sp, #20
 8010c02:	4605      	mov	r5, r0
 8010c04:	460e      	mov	r6, r1
 8010c06:	4617      	mov	r7, r2
 8010c08:	a812      	add	r0, sp, #72	; 0x48
 8010c0a:	4698      	mov	r8, r3
 8010c0c:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
 8010c10:	f7fb fa9a 	bl	800c148 <rcutils_allocator_is_valid>
 8010c14:	2d00      	cmp	r5, #0
 8010c16:	d072      	beq.n	8010cfe <rcl_wait_set_init+0x102>
 8010c18:	f080 0001 	eor.w	r0, r0, #1
 8010c1c:	b2c0      	uxtb	r0, r0
 8010c1e:	2800      	cmp	r0, #0
 8010c20:	d16d      	bne.n	8010cfe <rcl_wait_set_init+0x102>
 8010c22:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 8010c26:	f1ba 0f00 	cmp.w	sl, #0
 8010c2a:	d004      	beq.n	8010c36 <rcl_wait_set_init+0x3a>
 8010c2c:	2464      	movs	r4, #100	; 0x64
 8010c2e:	4620      	mov	r0, r4
 8010c30:	b005      	add	sp, #20
 8010c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c36:	f1b9 0f00 	cmp.w	r9, #0
 8010c3a:	d060      	beq.n	8010cfe <rcl_wait_set_init+0x102>
 8010c3c:	4648      	mov	r0, r9
 8010c3e:	f7fe fa07 	bl	800f050 <rcl_context_is_valid>
 8010c42:	2800      	cmp	r0, #0
 8010c44:	d068      	beq.n	8010d18 <rcl_wait_set_init+0x11c>
 8010c46:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010c48:	205c      	movs	r0, #92	; 0x5c
 8010c4a:	9916      	ldr	r1, [sp, #88]	; 0x58
 8010c4c:	4798      	blx	r3
 8010c4e:	6328      	str	r0, [r5, #48]	; 0x30
 8010c50:	2800      	cmp	r0, #0
 8010c52:	d063      	beq.n	8010d1c <rcl_wait_set_init+0x120>
 8010c54:	225c      	movs	r2, #92	; 0x5c
 8010c56:	4651      	mov	r1, sl
 8010c58:	f008 fcd4 	bl	8019604 <memset>
 8010c5c:	ac12      	add	r4, sp, #72	; 0x48
 8010c5e:	f8d5 b030 	ldr.w	fp, [r5, #48]	; 0x30
 8010c62:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 8010c66:	f10b 0c48 	add.w	ip, fp, #72	; 0x48
 8010c6a:	f8cb 9044 	str.w	r9, [fp, #68]	; 0x44
 8010c6e:	eb03 0e02 	add.w	lr, r3, r2
 8010c72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010c74:	f8d9 9000 	ldr.w	r9, [r9]
 8010c78:	449e      	add	lr, r3
 8010c7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010c7c:	e9cb aa01 	strd	sl, sl, [fp, #4]
 8010c80:	e9cb aa04 	strd	sl, sl, [fp, #16]
 8010c84:	e9cb aa07 	strd	sl, sl, [fp, #28]
 8010c88:	e9cb aa0a 	strd	sl, sl, [fp, #40]	; 0x28
 8010c8c:	e9cb aa0d 	strd	sl, sl, [fp, #52]	; 0x34
 8010c90:	44be      	add	lr, r7
 8010c92:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010c96:	6823      	ldr	r3, [r4, #0]
 8010c98:	eb0e 0146 	add.w	r1, lr, r6, lsl #1
 8010c9c:	f109 0028 	add.w	r0, r9, #40	; 0x28
 8010ca0:	f8cc 3000 	str.w	r3, [ip]
 8010ca4:	f002 fd9c 	bl	80137e0 <rmw_create_wait_set>
 8010ca8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8010caa:	f8cb 003c 	str.w	r0, [fp, #60]	; 0x3c
 8010cae:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8010cb0:	b350      	cbz	r0, 8010d08 <rcl_wait_set_init+0x10c>
 8010cb2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8010cb4:	4643      	mov	r3, r8
 8010cb6:	463a      	mov	r2, r7
 8010cb8:	4631      	mov	r1, r6
 8010cba:	9402      	str	r4, [sp, #8]
 8010cbc:	4628      	mov	r0, r5
 8010cbe:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8010cc0:	9401      	str	r4, [sp, #4]
 8010cc2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8010cc4:	9400      	str	r4, [sp, #0]
 8010cc6:	f7ff fde1 	bl	801088c <rcl_wait_set_resize>
 8010cca:	4604      	mov	r4, r0
 8010ccc:	2800      	cmp	r0, #0
 8010cce:	d0ae      	beq.n	8010c2e <rcl_wait_set_init+0x32>
 8010cd0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8010cd2:	bb2b      	cbnz	r3, 8010d20 <rcl_wait_set_init+0x124>
 8010cd4:	2600      	movs	r6, #0
 8010cd6:	4628      	mov	r0, r5
 8010cd8:	4633      	mov	r3, r6
 8010cda:	4632      	mov	r2, r6
 8010cdc:	4631      	mov	r1, r6
 8010cde:	9600      	str	r6, [sp, #0]
 8010ce0:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8010ce4:	f7ff fdd2 	bl	801088c <rcl_wait_set_resize>
 8010ce8:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8010cea:	2800      	cmp	r0, #0
 8010cec:	d09f      	beq.n	8010c2e <rcl_wait_set_init+0x32>
 8010cee:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8010cf0:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8010cf2:	4798      	blx	r3
 8010cf4:	4620      	mov	r0, r4
 8010cf6:	632e      	str	r6, [r5, #48]	; 0x30
 8010cf8:	b005      	add	sp, #20
 8010cfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010cfe:	240b      	movs	r4, #11
 8010d00:	4620      	mov	r0, r4
 8010d02:	b005      	add	sp, #20
 8010d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d08:	2401      	movs	r4, #1
 8010d0a:	f002 fd73 	bl	80137f4 <rmw_destroy_wait_set>
 8010d0e:	2800      	cmp	r0, #0
 8010d10:	bf18      	it	ne
 8010d12:	f44f 7461 	movne.w	r4, #900	; 0x384
 8010d16:	e7dd      	b.n	8010cd4 <rcl_wait_set_init+0xd8>
 8010d18:	2465      	movs	r4, #101	; 0x65
 8010d1a:	e788      	b.n	8010c2e <rcl_wait_set_init+0x32>
 8010d1c:	240a      	movs	r4, #10
 8010d1e:	e786      	b.n	8010c2e <rcl_wait_set_init+0x32>
 8010d20:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8010d22:	e7f2      	b.n	8010d0a <rcl_wait_set_init+0x10e>

08010d24 <rcl_wait_set_add_guard_condition>:
 8010d24:	b318      	cbz	r0, 8010d6e <rcl_wait_set_add_guard_condition+0x4a>
 8010d26:	b538      	push	{r3, r4, r5, lr}
 8010d28:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8010d2a:	4604      	mov	r4, r0
 8010d2c:	b30b      	cbz	r3, 8010d72 <rcl_wait_set_add_guard_condition+0x4e>
 8010d2e:	b319      	cbz	r1, 8010d78 <rcl_wait_set_add_guard_condition+0x54>
 8010d30:	68dd      	ldr	r5, [r3, #12]
 8010d32:	68c0      	ldr	r0, [r0, #12]
 8010d34:	4285      	cmp	r5, r0
 8010d36:	d217      	bcs.n	8010d68 <rcl_wait_set_add_guard_condition+0x44>
 8010d38:	1c68      	adds	r0, r5, #1
 8010d3a:	60d8      	str	r0, [r3, #12]
 8010d3c:	68a3      	ldr	r3, [r4, #8]
 8010d3e:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8010d42:	b102      	cbz	r2, 8010d46 <rcl_wait_set_add_guard_condition+0x22>
 8010d44:	6015      	str	r5, [r2, #0]
 8010d46:	4608      	mov	r0, r1
 8010d48:	f006 fe56 	bl	80179f8 <rcl_guard_condition_get_rmw_handle>
 8010d4c:	b150      	cbz	r0, 8010d64 <rcl_wait_set_add_guard_condition+0x40>
 8010d4e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010d50:	6842      	ldr	r2, [r0, #4]
 8010d52:	2000      	movs	r0, #0
 8010d54:	695b      	ldr	r3, [r3, #20]
 8010d56:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010d5a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010d5c:	6913      	ldr	r3, [r2, #16]
 8010d5e:	3301      	adds	r3, #1
 8010d60:	6113      	str	r3, [r2, #16]
 8010d62:	bd38      	pop	{r3, r4, r5, pc}
 8010d64:	2001      	movs	r0, #1
 8010d66:	bd38      	pop	{r3, r4, r5, pc}
 8010d68:	f240 3086 	movw	r0, #902	; 0x386
 8010d6c:	bd38      	pop	{r3, r4, r5, pc}
 8010d6e:	200b      	movs	r0, #11
 8010d70:	4770      	bx	lr
 8010d72:	f44f 7061 	mov.w	r0, #900	; 0x384
 8010d76:	bd38      	pop	{r3, r4, r5, pc}
 8010d78:	200b      	movs	r0, #11
 8010d7a:	bd38      	pop	{r3, r4, r5, pc}

08010d7c <rcl_wait_set_add_timer>:
 8010d7c:	b328      	cbz	r0, 8010dca <rcl_wait_set_add_timer+0x4e>
 8010d7e:	b538      	push	{r3, r4, r5, lr}
 8010d80:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8010d82:	4604      	mov	r4, r0
 8010d84:	b31b      	cbz	r3, 8010dce <rcl_wait_set_add_timer+0x52>
 8010d86:	b329      	cbz	r1, 8010dd4 <rcl_wait_set_add_timer+0x58>
 8010d88:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8010d8a:	6965      	ldr	r5, [r4, #20]
 8010d8c:	42a8      	cmp	r0, r5
 8010d8e:	d219      	bcs.n	8010dc4 <rcl_wait_set_add_timer+0x48>
 8010d90:	1c45      	adds	r5, r0, #1
 8010d92:	641d      	str	r5, [r3, #64]	; 0x40
 8010d94:	6923      	ldr	r3, [r4, #16]
 8010d96:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 8010d9a:	b102      	cbz	r2, 8010d9e <rcl_wait_set_add_timer+0x22>
 8010d9c:	6010      	str	r0, [r2, #0]
 8010d9e:	4608      	mov	r0, r1
 8010da0:	f7ff fb9a 	bl	80104d8 <rcl_timer_get_guard_condition>
 8010da4:	b168      	cbz	r0, 8010dc2 <rcl_wait_set_add_timer+0x46>
 8010da6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010da8:	68e3      	ldr	r3, [r4, #12]
 8010daa:	6c15      	ldr	r5, [r2, #64]	; 0x40
 8010dac:	3b01      	subs	r3, #1
 8010dae:	441d      	add	r5, r3
 8010db0:	f006 fe22 	bl	80179f8 <rcl_guard_condition_get_rmw_handle>
 8010db4:	b180      	cbz	r0, 8010dd8 <rcl_wait_set_add_timer+0x5c>
 8010db6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010db8:	6842      	ldr	r2, [r0, #4]
 8010dba:	2000      	movs	r0, #0
 8010dbc:	695b      	ldr	r3, [r3, #20]
 8010dbe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010dc2:	bd38      	pop	{r3, r4, r5, pc}
 8010dc4:	f240 3086 	movw	r0, #902	; 0x386
 8010dc8:	bd38      	pop	{r3, r4, r5, pc}
 8010dca:	200b      	movs	r0, #11
 8010dcc:	4770      	bx	lr
 8010dce:	f44f 7061 	mov.w	r0, #900	; 0x384
 8010dd2:	bd38      	pop	{r3, r4, r5, pc}
 8010dd4:	200b      	movs	r0, #11
 8010dd6:	bd38      	pop	{r3, r4, r5, pc}
 8010dd8:	2001      	movs	r0, #1
 8010dda:	bd38      	pop	{r3, r4, r5, pc}

08010ddc <rcl_wait_set_add_client>:
 8010ddc:	b318      	cbz	r0, 8010e26 <rcl_wait_set_add_client+0x4a>
 8010dde:	b538      	push	{r3, r4, r5, lr}
 8010de0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8010de2:	4604      	mov	r4, r0
 8010de4:	b30b      	cbz	r3, 8010e2a <rcl_wait_set_add_client+0x4e>
 8010de6:	b319      	cbz	r1, 8010e30 <rcl_wait_set_add_client+0x54>
 8010de8:	699d      	ldr	r5, [r3, #24]
 8010dea:	69c0      	ldr	r0, [r0, #28]
 8010dec:	4285      	cmp	r5, r0
 8010dee:	d217      	bcs.n	8010e20 <rcl_wait_set_add_client+0x44>
 8010df0:	1c68      	adds	r0, r5, #1
 8010df2:	6198      	str	r0, [r3, #24]
 8010df4:	69a3      	ldr	r3, [r4, #24]
 8010df6:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8010dfa:	b102      	cbz	r2, 8010dfe <rcl_wait_set_add_client+0x22>
 8010dfc:	6015      	str	r5, [r2, #0]
 8010dfe:	4608      	mov	r0, r1
 8010e00:	f7fe f83c 	bl	800ee7c <rcl_client_get_rmw_handle>
 8010e04:	b150      	cbz	r0, 8010e1c <rcl_wait_set_add_client+0x40>
 8010e06:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010e08:	6842      	ldr	r2, [r0, #4]
 8010e0a:	2000      	movs	r0, #0
 8010e0c:	6a1b      	ldr	r3, [r3, #32]
 8010e0e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010e12:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010e14:	69d3      	ldr	r3, [r2, #28]
 8010e16:	3301      	adds	r3, #1
 8010e18:	61d3      	str	r3, [r2, #28]
 8010e1a:	bd38      	pop	{r3, r4, r5, pc}
 8010e1c:	2001      	movs	r0, #1
 8010e1e:	bd38      	pop	{r3, r4, r5, pc}
 8010e20:	f240 3086 	movw	r0, #902	; 0x386
 8010e24:	bd38      	pop	{r3, r4, r5, pc}
 8010e26:	200b      	movs	r0, #11
 8010e28:	4770      	bx	lr
 8010e2a:	f44f 7061 	mov.w	r0, #900	; 0x384
 8010e2e:	bd38      	pop	{r3, r4, r5, pc}
 8010e30:	200b      	movs	r0, #11
 8010e32:	bd38      	pop	{r3, r4, r5, pc}

08010e34 <rcl_wait_set_add_service>:
 8010e34:	b318      	cbz	r0, 8010e7e <rcl_wait_set_add_service+0x4a>
 8010e36:	b538      	push	{r3, r4, r5, lr}
 8010e38:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8010e3a:	4604      	mov	r4, r0
 8010e3c:	b30b      	cbz	r3, 8010e82 <rcl_wait_set_add_service+0x4e>
 8010e3e:	b319      	cbz	r1, 8010e88 <rcl_wait_set_add_service+0x54>
 8010e40:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8010e42:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8010e44:	4285      	cmp	r5, r0
 8010e46:	d217      	bcs.n	8010e78 <rcl_wait_set_add_service+0x44>
 8010e48:	1c68      	adds	r0, r5, #1
 8010e4a:	6258      	str	r0, [r3, #36]	; 0x24
 8010e4c:	6a23      	ldr	r3, [r4, #32]
 8010e4e:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8010e52:	b102      	cbz	r2, 8010e56 <rcl_wait_set_add_service+0x22>
 8010e54:	6015      	str	r5, [r2, #0]
 8010e56:	4608      	mov	r0, r1
 8010e58:	f7fe fff4 	bl	800fe44 <rcl_service_get_rmw_handle>
 8010e5c:	b150      	cbz	r0, 8010e74 <rcl_wait_set_add_service+0x40>
 8010e5e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010e60:	6842      	ldr	r2, [r0, #4]
 8010e62:	2000      	movs	r0, #0
 8010e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e66:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010e6a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010e6c:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8010e6e:	3301      	adds	r3, #1
 8010e70:	6293      	str	r3, [r2, #40]	; 0x28
 8010e72:	bd38      	pop	{r3, r4, r5, pc}
 8010e74:	2001      	movs	r0, #1
 8010e76:	bd38      	pop	{r3, r4, r5, pc}
 8010e78:	f240 3086 	movw	r0, #902	; 0x386
 8010e7c:	bd38      	pop	{r3, r4, r5, pc}
 8010e7e:	200b      	movs	r0, #11
 8010e80:	4770      	bx	lr
 8010e82:	f44f 7061 	mov.w	r0, #900	; 0x384
 8010e86:	bd38      	pop	{r3, r4, r5, pc}
 8010e88:	200b      	movs	r0, #11
 8010e8a:	bd38      	pop	{r3, r4, r5, pc}
 8010e8c:	0000      	movs	r0, r0
	...

08010e90 <rcl_wait>:
 8010e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e94:	ed2d 8b02 	vpush	{d8}
 8010e98:	b08d      	sub	sp, #52	; 0x34
 8010e9a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010e9e:	2800      	cmp	r0, #0
 8010ea0:	f000 814f 	beq.w	8011142 <rcl_wait+0x2b2>
 8010ea4:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8010ea6:	4605      	mov	r5, r0
 8010ea8:	2e00      	cmp	r6, #0
 8010eaa:	f000 811a 	beq.w	80110e2 <rcl_wait+0x252>
 8010eae:	6843      	ldr	r3, [r0, #4]
 8010eb0:	b983      	cbnz	r3, 8010ed4 <rcl_wait+0x44>
 8010eb2:	68eb      	ldr	r3, [r5, #12]
 8010eb4:	b973      	cbnz	r3, 8010ed4 <rcl_wait+0x44>
 8010eb6:	696b      	ldr	r3, [r5, #20]
 8010eb8:	b963      	cbnz	r3, 8010ed4 <rcl_wait+0x44>
 8010eba:	69eb      	ldr	r3, [r5, #28]
 8010ebc:	b953      	cbnz	r3, 8010ed4 <rcl_wait+0x44>
 8010ebe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010ec0:	b943      	cbnz	r3, 8010ed4 <rcl_wait+0x44>
 8010ec2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8010ec4:	b933      	cbnz	r3, 8010ed4 <rcl_wait+0x44>
 8010ec6:	f240 3085 	movw	r0, #901	; 0x385
 8010eca:	b00d      	add	sp, #52	; 0x34
 8010ecc:	ecbd 8b02 	vpop	{d8}
 8010ed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ed4:	9b04      	ldr	r3, [sp, #16]
 8010ed6:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8010ed8:	2b01      	cmp	r3, #1
 8010eda:	9b05      	ldr	r3, [sp, #20]
 8010edc:	f173 0300 	sbcs.w	r3, r3, #0
 8010ee0:	f2c0 80f8 	blt.w	80110d4 <rcl_wait+0x244>
 8010ee4:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8010ee8:	2a00      	cmp	r2, #0
 8010eea:	f000 810f 	beq.w	801110c <rcl_wait+0x27c>
 8010eee:	2400      	movs	r4, #0
 8010ef0:	4613      	mov	r3, r2
 8010ef2:	f240 3921 	movw	r9, #801	; 0x321
 8010ef6:	4632      	mov	r2, r6
 8010ef8:	46a2      	mov	sl, r4
 8010efa:	46a3      	mov	fp, r4
 8010efc:	ed9f 8b98 	vldr	d8, [pc, #608]	; 8011160 <rcl_wait+0x2d0>
 8010f00:	e014      	b.n	8010f2c <rcl_wait+0x9c>
 8010f02:	2800      	cmp	r0, #0
 8010f04:	d1e1      	bne.n	8010eca <rcl_wait+0x3a>
 8010f06:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8010f0a:	4542      	cmp	r2, r8
 8010f0c:	eb73 0107 	sbcs.w	r1, r3, r7
 8010f10:	da03      	bge.n	8010f1a <rcl_wait+0x8a>
 8010f12:	4690      	mov	r8, r2
 8010f14:	461f      	mov	r7, r3
 8010f16:	f04f 0b01 	mov.w	fp, #1
 8010f1a:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8010f1c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8010f1e:	3401      	adds	r4, #1
 8010f20:	f14a 0a00 	adc.w	sl, sl, #0
 8010f24:	429c      	cmp	r4, r3
 8010f26:	f17a 0100 	sbcs.w	r1, sl, #0
 8010f2a:	d228      	bcs.n	8010f7e <rcl_wait+0xee>
 8010f2c:	6928      	ldr	r0, [r5, #16]
 8010f2e:	a908      	add	r1, sp, #32
 8010f30:	00a6      	lsls	r6, r4, #2
 8010f32:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8010f36:	2800      	cmp	r0, #0
 8010f38:	d0f1      	beq.n	8010f1e <rcl_wait+0x8e>
 8010f3a:	68eb      	ldr	r3, [r5, #12]
 8010f3c:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8010f40:	4423      	add	r3, r4
 8010f42:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8010f46:	f1be 0f00 	cmp.w	lr, #0
 8010f4a:	d006      	beq.n	8010f5a <rcl_wait+0xca>
 8010f4c:	6913      	ldr	r3, [r2, #16]
 8010f4e:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 8010f52:	3301      	adds	r3, #1
 8010f54:	6113      	str	r3, [r2, #16]
 8010f56:	692b      	ldr	r3, [r5, #16]
 8010f58:	5998      	ldr	r0, [r3, r6]
 8010f5a:	ed8d 8b08 	vstr	d8, [sp, #32]
 8010f5e:	f7ff fa89 	bl	8010474 <rcl_timer_get_time_until_next_call>
 8010f62:	4548      	cmp	r0, r9
 8010f64:	d1cd      	bne.n	8010f02 <rcl_wait+0x72>
 8010f66:	692b      	ldr	r3, [r5, #16]
 8010f68:	2200      	movs	r2, #0
 8010f6a:	3401      	adds	r4, #1
 8010f6c:	519a      	str	r2, [r3, r6]
 8010f6e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8010f70:	f14a 0a00 	adc.w	sl, sl, #0
 8010f74:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8010f76:	429c      	cmp	r4, r3
 8010f78:	f17a 0100 	sbcs.w	r1, sl, #0
 8010f7c:	d3d6      	bcc.n	8010f2c <rcl_wait+0x9c>
 8010f7e:	4659      	mov	r1, fp
 8010f80:	4616      	mov	r6, r2
 8010f82:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8010f86:	4313      	orrs	r3, r2
 8010f88:	f040 80b4 	bne.w	80110f4 <rcl_wait+0x264>
 8010f8c:	2300      	movs	r3, #0
 8010f8e:	2200      	movs	r2, #0
 8010f90:	460c      	mov	r4, r1
 8010f92:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010f96:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8010f9a:	ab08      	add	r3, sp, #32
 8010f9c:	9302      	str	r3, [sp, #8]
 8010f9e:	f106 0334 	add.w	r3, r6, #52	; 0x34
 8010fa2:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 8010fa4:	f106 0110 	add.w	r1, r6, #16
 8010fa8:	9300      	str	r3, [sp, #0]
 8010faa:	1d30      	adds	r0, r6, #4
 8010fac:	f106 031c 	add.w	r3, r6, #28
 8010fb0:	9201      	str	r2, [sp, #4]
 8010fb2:	f106 0228 	add.w	r2, r6, #40	; 0x28
 8010fb6:	f002 faaf 	bl	8013518 <rmw_wait>
 8010fba:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8010fbc:	4680      	mov	r8, r0
 8010fbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010fc0:	b1e2      	cbz	r2, 8010ffc <rcl_wait+0x16c>
 8010fc2:	f04f 0900 	mov.w	r9, #0
 8010fc6:	464f      	mov	r7, r9
 8010fc8:	692a      	ldr	r2, [r5, #16]
 8010fca:	f10d 011f 	add.w	r1, sp, #31
 8010fce:	ea4f 0689 	mov.w	r6, r9, lsl #2
 8010fd2:	f852 0029 	ldr.w	r0, [r2, r9, lsl #2]
 8010fd6:	b160      	cbz	r0, 8010ff2 <rcl_wait+0x162>
 8010fd8:	f88d 701f 	strb.w	r7, [sp, #31]
 8010fdc:	f7ff fa0e 	bl	80103fc <rcl_timer_is_ready>
 8010fe0:	2800      	cmp	r0, #0
 8010fe2:	f47f af72 	bne.w	8010eca <rcl_wait+0x3a>
 8010fe6:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8010fea:	b90b      	cbnz	r3, 8010ff0 <rcl_wait+0x160>
 8010fec:	692a      	ldr	r2, [r5, #16]
 8010fee:	5193      	str	r3, [r2, r6]
 8010ff0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8010ff2:	f109 0901 	add.w	r9, r9, #1
 8010ff6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010ff8:	454a      	cmp	r2, r9
 8010ffa:	d8e5      	bhi.n	8010fc8 <rcl_wait+0x138>
 8010ffc:	f038 0002 	bics.w	r0, r8, #2
 8011000:	d176      	bne.n	80110f0 <rcl_wait+0x260>
 8011002:	686f      	ldr	r7, [r5, #4]
 8011004:	b17f      	cbz	r7, 8011026 <rcl_wait+0x196>
 8011006:	4602      	mov	r2, r0
 8011008:	e002      	b.n	8011010 <rcl_wait+0x180>
 801100a:	3201      	adds	r2, #1
 801100c:	42ba      	cmp	r2, r7
 801100e:	d00a      	beq.n	8011026 <rcl_wait+0x196>
 8011010:	6899      	ldr	r1, [r3, #8]
 8011012:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8011016:	2900      	cmp	r1, #0
 8011018:	d1f7      	bne.n	801100a <rcl_wait+0x17a>
 801101a:	682e      	ldr	r6, [r5, #0]
 801101c:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8011020:	3201      	adds	r2, #1
 8011022:	42ba      	cmp	r2, r7
 8011024:	d1f4      	bne.n	8011010 <rcl_wait+0x180>
 8011026:	68ef      	ldr	r7, [r5, #12]
 8011028:	b17f      	cbz	r7, 801104a <rcl_wait+0x1ba>
 801102a:	2200      	movs	r2, #0
 801102c:	e002      	b.n	8011034 <rcl_wait+0x1a4>
 801102e:	3201      	adds	r2, #1
 8011030:	42ba      	cmp	r2, r7
 8011032:	d00a      	beq.n	801104a <rcl_wait+0x1ba>
 8011034:	6959      	ldr	r1, [r3, #20]
 8011036:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801103a:	2900      	cmp	r1, #0
 801103c:	d1f7      	bne.n	801102e <rcl_wait+0x19e>
 801103e:	68ae      	ldr	r6, [r5, #8]
 8011040:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8011044:	3201      	adds	r2, #1
 8011046:	42ba      	cmp	r2, r7
 8011048:	d1f4      	bne.n	8011034 <rcl_wait+0x1a4>
 801104a:	69ef      	ldr	r7, [r5, #28]
 801104c:	b17f      	cbz	r7, 801106e <rcl_wait+0x1de>
 801104e:	2200      	movs	r2, #0
 8011050:	e002      	b.n	8011058 <rcl_wait+0x1c8>
 8011052:	3201      	adds	r2, #1
 8011054:	42ba      	cmp	r2, r7
 8011056:	d00a      	beq.n	801106e <rcl_wait+0x1de>
 8011058:	6a19      	ldr	r1, [r3, #32]
 801105a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801105e:	2900      	cmp	r1, #0
 8011060:	d1f7      	bne.n	8011052 <rcl_wait+0x1c2>
 8011062:	69ae      	ldr	r6, [r5, #24]
 8011064:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8011068:	3201      	adds	r2, #1
 801106a:	42ba      	cmp	r2, r7
 801106c:	d1f4      	bne.n	8011058 <rcl_wait+0x1c8>
 801106e:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 8011070:	b17f      	cbz	r7, 8011092 <rcl_wait+0x202>
 8011072:	2200      	movs	r2, #0
 8011074:	e002      	b.n	801107c <rcl_wait+0x1ec>
 8011076:	3201      	adds	r2, #1
 8011078:	42ba      	cmp	r2, r7
 801107a:	d00a      	beq.n	8011092 <rcl_wait+0x202>
 801107c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801107e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8011082:	2900      	cmp	r1, #0
 8011084:	d1f7      	bne.n	8011076 <rcl_wait+0x1e6>
 8011086:	6a2e      	ldr	r6, [r5, #32]
 8011088:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801108c:	3201      	adds	r2, #1
 801108e:	42ba      	cmp	r2, r7
 8011090:	d1f4      	bne.n	801107c <rcl_wait+0x1ec>
 8011092:	6aef      	ldr	r7, [r5, #44]	; 0x2c
 8011094:	b17f      	cbz	r7, 80110b6 <rcl_wait+0x226>
 8011096:	2200      	movs	r2, #0
 8011098:	e002      	b.n	80110a0 <rcl_wait+0x210>
 801109a:	3201      	adds	r2, #1
 801109c:	42ba      	cmp	r2, r7
 801109e:	d00a      	beq.n	80110b6 <rcl_wait+0x226>
 80110a0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80110a2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80110a6:	2900      	cmp	r1, #0
 80110a8:	d1f7      	bne.n	801109a <rcl_wait+0x20a>
 80110aa:	6aae      	ldr	r6, [r5, #40]	; 0x28
 80110ac:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 80110b0:	3201      	adds	r2, #1
 80110b2:	42ba      	cmp	r2, r7
 80110b4:	d1f4      	bne.n	80110a0 <rcl_wait+0x210>
 80110b6:	f1b8 0f02 	cmp.w	r8, #2
 80110ba:	f47f af06 	bne.w	8010eca <rcl_wait+0x3a>
 80110be:	f084 0301 	eor.w	r3, r4, #1
 80110c2:	b2db      	uxtb	r3, r3
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	bf18      	it	ne
 80110c8:	2002      	movne	r0, #2
 80110ca:	b00d      	add	sp, #52	; 0x34
 80110cc:	ecbd 8b02 	vpop	{d8}
 80110d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110d4:	2a00      	cmp	r2, #0
 80110d6:	d03a      	beq.n	801114e <rcl_wait+0x2be>
 80110d8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80110dc:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 80110e0:	e705      	b.n	8010eee <rcl_wait+0x5e>
 80110e2:	f44f 7061 	mov.w	r0, #900	; 0x384
 80110e6:	b00d      	add	sp, #52	; 0x34
 80110e8:	ecbd 8b02 	vpop	{d8}
 80110ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110f0:	2001      	movs	r0, #1
 80110f2:	e6ea      	b.n	8010eca <rcl_wait+0x3a>
 80110f4:	9b04      	ldr	r3, [sp, #16]
 80110f6:	460c      	mov	r4, r1
 80110f8:	2b01      	cmp	r3, #1
 80110fa:	9b05      	ldr	r3, [sp, #20]
 80110fc:	f173 0300 	sbcs.w	r3, r3, #0
 8011100:	bfa8      	it	ge
 8011102:	f044 0401 	orrge.w	r4, r4, #1
 8011106:	b914      	cbnz	r4, 801110e <rcl_wait+0x27e>
 8011108:	4623      	mov	r3, r4
 801110a:	e747      	b.n	8010f9c <rcl_wait+0x10c>
 801110c:	4611      	mov	r1, r2
 801110e:	2f00      	cmp	r7, #0
 8011110:	da02      	bge.n	8011118 <rcl_wait+0x288>
 8011112:	f04f 0800 	mov.w	r8, #0
 8011116:	4647      	mov	r7, r8
 8011118:	460c      	mov	r4, r1
 801111a:	4640      	mov	r0, r8
 801111c:	4639      	mov	r1, r7
 801111e:	a312      	add	r3, pc, #72	; (adr r3, 8011168 <rcl_wait+0x2d8>)
 8011120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011124:	f7ef f8f4 	bl	8000310 <__aeabi_ldivmod>
 8011128:	a30f      	add	r3, pc, #60	; (adr r3, 8011168 <rcl_wait+0x2d8>)
 801112a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801112e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011132:	4640      	mov	r0, r8
 8011134:	4639      	mov	r1, r7
 8011136:	f7ef f8eb 	bl	8000310 <__aeabi_ldivmod>
 801113a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801113e:	ab08      	add	r3, sp, #32
 8011140:	e72c      	b.n	8010f9c <rcl_wait+0x10c>
 8011142:	200b      	movs	r0, #11
 8011144:	b00d      	add	sp, #52	; 0x34
 8011146:	ecbd 8b02 	vpop	{d8}
 801114a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801114e:	4611      	mov	r1, r2
 8011150:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8011154:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 8011158:	e713      	b.n	8010f82 <rcl_wait+0xf2>
 801115a:	bf00      	nop
 801115c:	f3af 8000 	nop.w
 8011160:	ffffffff 	.word	0xffffffff
 8011164:	7fffffff 	.word	0x7fffffff
 8011168:	3b9aca00 	.word	0x3b9aca00
 801116c:	00000000 	.word	0x00000000

08011170 <rcl_action_take_goal_response>:
 8011170:	2800      	cmp	r0, #0
 8011172:	d039      	beq.n	80111e8 <rcl_action_take_goal_response+0x78>
 8011174:	b570      	push	{r4, r5, r6, lr}
 8011176:	4604      	mov	r4, r0
 8011178:	6800      	ldr	r0, [r0, #0]
 801117a:	b380      	cbz	r0, 80111de <rcl_action_take_goal_response+0x6e>
 801117c:	460e      	mov	r6, r1
 801117e:	4615      	mov	r5, r2
 8011180:	f7fd ff3e 	bl	800f000 <rcl_client_is_valid>
 8011184:	b330      	cbz	r0, 80111d4 <rcl_action_take_goal_response+0x64>
 8011186:	6820      	ldr	r0, [r4, #0]
 8011188:	3004      	adds	r0, #4
 801118a:	f7fd ff39 	bl	800f000 <rcl_client_is_valid>
 801118e:	b308      	cbz	r0, 80111d4 <rcl_action_take_goal_response+0x64>
 8011190:	6820      	ldr	r0, [r4, #0]
 8011192:	3008      	adds	r0, #8
 8011194:	f7fd ff34 	bl	800f000 <rcl_client_is_valid>
 8011198:	b1e0      	cbz	r0, 80111d4 <rcl_action_take_goal_response+0x64>
 801119a:	6820      	ldr	r0, [r4, #0]
 801119c:	300c      	adds	r0, #12
 801119e:	f7fe ffdb 	bl	8010158 <rcl_subscription_is_valid>
 80111a2:	b1b8      	cbz	r0, 80111d4 <rcl_action_take_goal_response+0x64>
 80111a4:	6820      	ldr	r0, [r4, #0]
 80111a6:	3010      	adds	r0, #16
 80111a8:	f7fe ffd6 	bl	8010158 <rcl_subscription_is_valid>
 80111ac:	b190      	cbz	r0, 80111d4 <rcl_action_take_goal_response+0x64>
 80111ae:	b1cd      	cbz	r5, 80111e4 <rcl_action_take_goal_response+0x74>
 80111b0:	b1c6      	cbz	r6, 80111e4 <rcl_action_take_goal_response+0x74>
 80111b2:	462a      	mov	r2, r5
 80111b4:	4631      	mov	r1, r6
 80111b6:	6820      	ldr	r0, [r4, #0]
 80111b8:	f7fd feba 	bl	800ef30 <rcl_take_response>
 80111bc:	b148      	cbz	r0, 80111d2 <rcl_action_take_goal_response+0x62>
 80111be:	280a      	cmp	r0, #10
 80111c0:	d007      	beq.n	80111d2 <rcl_action_take_goal_response+0x62>
 80111c2:	f240 12f5 	movw	r2, #501	; 0x1f5
 80111c6:	f640 0337 	movw	r3, #2103	; 0x837
 80111ca:	4290      	cmp	r0, r2
 80111cc:	bf0c      	ite	eq
 80111ce:	4618      	moveq	r0, r3
 80111d0:	2001      	movne	r0, #1
 80111d2:	bd70      	pop	{r4, r5, r6, pc}
 80111d4:	f7fa ffdc 	bl	800c190 <rcutils_reset_error>
 80111d8:	f640 0036 	movw	r0, #2102	; 0x836
 80111dc:	bd70      	pop	{r4, r5, r6, pc}
 80111de:	f640 0036 	movw	r0, #2102	; 0x836
 80111e2:	bd70      	pop	{r4, r5, r6, pc}
 80111e4:	200b      	movs	r0, #11
 80111e6:	bd70      	pop	{r4, r5, r6, pc}
 80111e8:	f640 0036 	movw	r0, #2102	; 0x836
 80111ec:	4770      	bx	lr
 80111ee:	bf00      	nop

080111f0 <rcl_action_send_result_request>:
 80111f0:	b390      	cbz	r0, 8011258 <rcl_action_send_result_request+0x68>
 80111f2:	b570      	push	{r4, r5, r6, lr}
 80111f4:	4604      	mov	r4, r0
 80111f6:	6800      	ldr	r0, [r0, #0]
 80111f8:	b348      	cbz	r0, 801124e <rcl_action_send_result_request+0x5e>
 80111fa:	460e      	mov	r6, r1
 80111fc:	4615      	mov	r5, r2
 80111fe:	f7fd feff 	bl	800f000 <rcl_client_is_valid>
 8011202:	b1f8      	cbz	r0, 8011244 <rcl_action_send_result_request+0x54>
 8011204:	6820      	ldr	r0, [r4, #0]
 8011206:	3004      	adds	r0, #4
 8011208:	f7fd fefa 	bl	800f000 <rcl_client_is_valid>
 801120c:	b1d0      	cbz	r0, 8011244 <rcl_action_send_result_request+0x54>
 801120e:	6820      	ldr	r0, [r4, #0]
 8011210:	3008      	adds	r0, #8
 8011212:	f7fd fef5 	bl	800f000 <rcl_client_is_valid>
 8011216:	b1a8      	cbz	r0, 8011244 <rcl_action_send_result_request+0x54>
 8011218:	6820      	ldr	r0, [r4, #0]
 801121a:	300c      	adds	r0, #12
 801121c:	f7fe ff9c 	bl	8010158 <rcl_subscription_is_valid>
 8011220:	b180      	cbz	r0, 8011244 <rcl_action_send_result_request+0x54>
 8011222:	6820      	ldr	r0, [r4, #0]
 8011224:	3010      	adds	r0, #16
 8011226:	f7fe ff97 	bl	8010158 <rcl_subscription_is_valid>
 801122a:	b158      	cbz	r0, 8011244 <rcl_action_send_result_request+0x54>
 801122c:	b195      	cbz	r5, 8011254 <rcl_action_send_result_request+0x64>
 801122e:	b18e      	cbz	r6, 8011254 <rcl_action_send_result_request+0x64>
 8011230:	6820      	ldr	r0, [r4, #0]
 8011232:	462a      	mov	r2, r5
 8011234:	4631      	mov	r1, r6
 8011236:	3008      	adds	r0, #8
 8011238:	f7fd fe26 	bl	800ee88 <rcl_send_request>
 801123c:	3800      	subs	r0, #0
 801123e:	bf18      	it	ne
 8011240:	2001      	movne	r0, #1
 8011242:	bd70      	pop	{r4, r5, r6, pc}
 8011244:	f7fa ffa4 	bl	800c190 <rcutils_reset_error>
 8011248:	f640 0036 	movw	r0, #2102	; 0x836
 801124c:	bd70      	pop	{r4, r5, r6, pc}
 801124e:	f640 0036 	movw	r0, #2102	; 0x836
 8011252:	bd70      	pop	{r4, r5, r6, pc}
 8011254:	200b      	movs	r0, #11
 8011256:	bd70      	pop	{r4, r5, r6, pc}
 8011258:	f640 0036 	movw	r0, #2102	; 0x836
 801125c:	4770      	bx	lr
 801125e:	bf00      	nop

08011260 <rcl_action_take_result_response>:
 8011260:	2800      	cmp	r0, #0
 8011262:	d03a      	beq.n	80112da <rcl_action_take_result_response+0x7a>
 8011264:	b570      	push	{r4, r5, r6, lr}
 8011266:	4604      	mov	r4, r0
 8011268:	6800      	ldr	r0, [r0, #0]
 801126a:	b388      	cbz	r0, 80112d0 <rcl_action_take_result_response+0x70>
 801126c:	460e      	mov	r6, r1
 801126e:	4615      	mov	r5, r2
 8011270:	f7fd fec6 	bl	800f000 <rcl_client_is_valid>
 8011274:	b338      	cbz	r0, 80112c6 <rcl_action_take_result_response+0x66>
 8011276:	6820      	ldr	r0, [r4, #0]
 8011278:	3004      	adds	r0, #4
 801127a:	f7fd fec1 	bl	800f000 <rcl_client_is_valid>
 801127e:	b310      	cbz	r0, 80112c6 <rcl_action_take_result_response+0x66>
 8011280:	6820      	ldr	r0, [r4, #0]
 8011282:	3008      	adds	r0, #8
 8011284:	f7fd febc 	bl	800f000 <rcl_client_is_valid>
 8011288:	b1e8      	cbz	r0, 80112c6 <rcl_action_take_result_response+0x66>
 801128a:	6820      	ldr	r0, [r4, #0]
 801128c:	300c      	adds	r0, #12
 801128e:	f7fe ff63 	bl	8010158 <rcl_subscription_is_valid>
 8011292:	b1c0      	cbz	r0, 80112c6 <rcl_action_take_result_response+0x66>
 8011294:	6820      	ldr	r0, [r4, #0]
 8011296:	3010      	adds	r0, #16
 8011298:	f7fe ff5e 	bl	8010158 <rcl_subscription_is_valid>
 801129c:	b198      	cbz	r0, 80112c6 <rcl_action_take_result_response+0x66>
 801129e:	b1d5      	cbz	r5, 80112d6 <rcl_action_take_result_response+0x76>
 80112a0:	b1ce      	cbz	r6, 80112d6 <rcl_action_take_result_response+0x76>
 80112a2:	6820      	ldr	r0, [r4, #0]
 80112a4:	462a      	mov	r2, r5
 80112a6:	4631      	mov	r1, r6
 80112a8:	3008      	adds	r0, #8
 80112aa:	f7fd fe41 	bl	800ef30 <rcl_take_response>
 80112ae:	b148      	cbz	r0, 80112c4 <rcl_action_take_result_response+0x64>
 80112b0:	280a      	cmp	r0, #10
 80112b2:	d007      	beq.n	80112c4 <rcl_action_take_result_response+0x64>
 80112b4:	f240 12f5 	movw	r2, #501	; 0x1f5
 80112b8:	f640 0337 	movw	r3, #2103	; 0x837
 80112bc:	4290      	cmp	r0, r2
 80112be:	bf0c      	ite	eq
 80112c0:	4618      	moveq	r0, r3
 80112c2:	2001      	movne	r0, #1
 80112c4:	bd70      	pop	{r4, r5, r6, pc}
 80112c6:	f7fa ff63 	bl	800c190 <rcutils_reset_error>
 80112ca:	f640 0036 	movw	r0, #2102	; 0x836
 80112ce:	bd70      	pop	{r4, r5, r6, pc}
 80112d0:	f640 0036 	movw	r0, #2102	; 0x836
 80112d4:	bd70      	pop	{r4, r5, r6, pc}
 80112d6:	200b      	movs	r0, #11
 80112d8:	bd70      	pop	{r4, r5, r6, pc}
 80112da:	f640 0036 	movw	r0, #2102	; 0x836
 80112de:	4770      	bx	lr

080112e0 <rcl_action_take_cancel_response>:
 80112e0:	2800      	cmp	r0, #0
 80112e2:	d03a      	beq.n	801135a <rcl_action_take_cancel_response+0x7a>
 80112e4:	b570      	push	{r4, r5, r6, lr}
 80112e6:	4604      	mov	r4, r0
 80112e8:	6800      	ldr	r0, [r0, #0]
 80112ea:	b388      	cbz	r0, 8011350 <rcl_action_take_cancel_response+0x70>
 80112ec:	460e      	mov	r6, r1
 80112ee:	4615      	mov	r5, r2
 80112f0:	f7fd fe86 	bl	800f000 <rcl_client_is_valid>
 80112f4:	b338      	cbz	r0, 8011346 <rcl_action_take_cancel_response+0x66>
 80112f6:	6820      	ldr	r0, [r4, #0]
 80112f8:	3004      	adds	r0, #4
 80112fa:	f7fd fe81 	bl	800f000 <rcl_client_is_valid>
 80112fe:	b310      	cbz	r0, 8011346 <rcl_action_take_cancel_response+0x66>
 8011300:	6820      	ldr	r0, [r4, #0]
 8011302:	3008      	adds	r0, #8
 8011304:	f7fd fe7c 	bl	800f000 <rcl_client_is_valid>
 8011308:	b1e8      	cbz	r0, 8011346 <rcl_action_take_cancel_response+0x66>
 801130a:	6820      	ldr	r0, [r4, #0]
 801130c:	300c      	adds	r0, #12
 801130e:	f7fe ff23 	bl	8010158 <rcl_subscription_is_valid>
 8011312:	b1c0      	cbz	r0, 8011346 <rcl_action_take_cancel_response+0x66>
 8011314:	6820      	ldr	r0, [r4, #0]
 8011316:	3010      	adds	r0, #16
 8011318:	f7fe ff1e 	bl	8010158 <rcl_subscription_is_valid>
 801131c:	b198      	cbz	r0, 8011346 <rcl_action_take_cancel_response+0x66>
 801131e:	b1d5      	cbz	r5, 8011356 <rcl_action_take_cancel_response+0x76>
 8011320:	b1ce      	cbz	r6, 8011356 <rcl_action_take_cancel_response+0x76>
 8011322:	6820      	ldr	r0, [r4, #0]
 8011324:	462a      	mov	r2, r5
 8011326:	4631      	mov	r1, r6
 8011328:	3004      	adds	r0, #4
 801132a:	f7fd fe01 	bl	800ef30 <rcl_take_response>
 801132e:	b148      	cbz	r0, 8011344 <rcl_action_take_cancel_response+0x64>
 8011330:	280a      	cmp	r0, #10
 8011332:	d007      	beq.n	8011344 <rcl_action_take_cancel_response+0x64>
 8011334:	f240 12f5 	movw	r2, #501	; 0x1f5
 8011338:	f640 0337 	movw	r3, #2103	; 0x837
 801133c:	4290      	cmp	r0, r2
 801133e:	bf0c      	ite	eq
 8011340:	4618      	moveq	r0, r3
 8011342:	2001      	movne	r0, #1
 8011344:	bd70      	pop	{r4, r5, r6, pc}
 8011346:	f7fa ff23 	bl	800c190 <rcutils_reset_error>
 801134a:	f640 0036 	movw	r0, #2102	; 0x836
 801134e:	bd70      	pop	{r4, r5, r6, pc}
 8011350:	f640 0036 	movw	r0, #2102	; 0x836
 8011354:	bd70      	pop	{r4, r5, r6, pc}
 8011356:	200b      	movs	r0, #11
 8011358:	bd70      	pop	{r4, r5, r6, pc}
 801135a:	f640 0036 	movw	r0, #2102	; 0x836
 801135e:	4770      	bx	lr

08011360 <rcl_action_take_feedback>:
 8011360:	2800      	cmp	r0, #0
 8011362:	d038      	beq.n	80113d6 <rcl_action_take_feedback+0x76>
 8011364:	b530      	push	{r4, r5, lr}
 8011366:	4604      	mov	r4, r0
 8011368:	6800      	ldr	r0, [r0, #0]
 801136a:	b08f      	sub	sp, #60	; 0x3c
 801136c:	b378      	cbz	r0, 80113ce <rcl_action_take_feedback+0x6e>
 801136e:	460d      	mov	r5, r1
 8011370:	f7fd fe46 	bl	800f000 <rcl_client_is_valid>
 8011374:	b328      	cbz	r0, 80113c2 <rcl_action_take_feedback+0x62>
 8011376:	6820      	ldr	r0, [r4, #0]
 8011378:	3004      	adds	r0, #4
 801137a:	f7fd fe41 	bl	800f000 <rcl_client_is_valid>
 801137e:	b300      	cbz	r0, 80113c2 <rcl_action_take_feedback+0x62>
 8011380:	6820      	ldr	r0, [r4, #0]
 8011382:	3008      	adds	r0, #8
 8011384:	f7fd fe3c 	bl	800f000 <rcl_client_is_valid>
 8011388:	b1d8      	cbz	r0, 80113c2 <rcl_action_take_feedback+0x62>
 801138a:	6820      	ldr	r0, [r4, #0]
 801138c:	300c      	adds	r0, #12
 801138e:	f7fe fee3 	bl	8010158 <rcl_subscription_is_valid>
 8011392:	b1b0      	cbz	r0, 80113c2 <rcl_action_take_feedback+0x62>
 8011394:	6820      	ldr	r0, [r4, #0]
 8011396:	3010      	adds	r0, #16
 8011398:	f7fe fede 	bl	8010158 <rcl_subscription_is_valid>
 801139c:	b188      	cbz	r0, 80113c2 <rcl_action_take_feedback+0x62>
 801139e:	b1ed      	cbz	r5, 80113dc <rcl_action_take_feedback+0x7c>
 80113a0:	6820      	ldr	r0, [r4, #0]
 80113a2:	2300      	movs	r3, #0
 80113a4:	466a      	mov	r2, sp
 80113a6:	4629      	mov	r1, r5
 80113a8:	300c      	adds	r0, #12
 80113aa:	f7fe fe79 	bl	80100a0 <rcl_take>
 80113ae:	b160      	cbz	r0, 80113ca <rcl_action_take_feedback+0x6a>
 80113b0:	f240 1391 	movw	r3, #401	; 0x191
 80113b4:	4298      	cmp	r0, r3
 80113b6:	d014      	beq.n	80113e2 <rcl_action_take_feedback+0x82>
 80113b8:	280a      	cmp	r0, #10
 80113ba:	bf18      	it	ne
 80113bc:	2001      	movne	r0, #1
 80113be:	b00f      	add	sp, #60	; 0x3c
 80113c0:	bd30      	pop	{r4, r5, pc}
 80113c2:	f7fa fee5 	bl	800c190 <rcutils_reset_error>
 80113c6:	f640 0036 	movw	r0, #2102	; 0x836
 80113ca:	b00f      	add	sp, #60	; 0x3c
 80113cc:	bd30      	pop	{r4, r5, pc}
 80113ce:	f640 0036 	movw	r0, #2102	; 0x836
 80113d2:	b00f      	add	sp, #60	; 0x3c
 80113d4:	bd30      	pop	{r4, r5, pc}
 80113d6:	f640 0036 	movw	r0, #2102	; 0x836
 80113da:	4770      	bx	lr
 80113dc:	200b      	movs	r0, #11
 80113de:	b00f      	add	sp, #60	; 0x3c
 80113e0:	bd30      	pop	{r4, r5, pc}
 80113e2:	f640 0037 	movw	r0, #2103	; 0x837
 80113e6:	e7f0      	b.n	80113ca <rcl_action_take_feedback+0x6a>

080113e8 <rcl_action_wait_set_add_action_client>:
 80113e8:	2800      	cmp	r0, #0
 80113ea:	d048      	beq.n	801147e <rcl_action_wait_set_add_action_client+0x96>
 80113ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113ee:	460c      	mov	r4, r1
 80113f0:	2900      	cmp	r1, #0
 80113f2:	d03c      	beq.n	801146e <rcl_action_wait_set_add_action_client+0x86>
 80113f4:	4605      	mov	r5, r0
 80113f6:	6808      	ldr	r0, [r1, #0]
 80113f8:	2800      	cmp	r0, #0
 80113fa:	d038      	beq.n	801146e <rcl_action_wait_set_add_action_client+0x86>
 80113fc:	4617      	mov	r7, r2
 80113fe:	461e      	mov	r6, r3
 8011400:	f7fd fdfe 	bl	800f000 <rcl_client_is_valid>
 8011404:	b3b0      	cbz	r0, 8011474 <rcl_action_wait_set_add_action_client+0x8c>
 8011406:	6820      	ldr	r0, [r4, #0]
 8011408:	3004      	adds	r0, #4
 801140a:	f7fd fdf9 	bl	800f000 <rcl_client_is_valid>
 801140e:	b388      	cbz	r0, 8011474 <rcl_action_wait_set_add_action_client+0x8c>
 8011410:	6820      	ldr	r0, [r4, #0]
 8011412:	3008      	adds	r0, #8
 8011414:	f7fd fdf4 	bl	800f000 <rcl_client_is_valid>
 8011418:	b360      	cbz	r0, 8011474 <rcl_action_wait_set_add_action_client+0x8c>
 801141a:	6820      	ldr	r0, [r4, #0]
 801141c:	300c      	adds	r0, #12
 801141e:	f7fe fe9b 	bl	8010158 <rcl_subscription_is_valid>
 8011422:	b338      	cbz	r0, 8011474 <rcl_action_wait_set_add_action_client+0x8c>
 8011424:	6820      	ldr	r0, [r4, #0]
 8011426:	3010      	adds	r0, #16
 8011428:	f7fe fe96 	bl	8010158 <rcl_subscription_is_valid>
 801142c:	b310      	cbz	r0, 8011474 <rcl_action_wait_set_add_action_client+0x8c>
 801142e:	6821      	ldr	r1, [r4, #0]
 8011430:	4628      	mov	r0, r5
 8011432:	f501 72e2 	add.w	r2, r1, #452	; 0x1c4
 8011436:	f7ff fcd1 	bl	8010ddc <rcl_wait_set_add_client>
 801143a:	b9b8      	cbnz	r0, 801146c <rcl_action_wait_set_add_action_client+0x84>
 801143c:	6821      	ldr	r1, [r4, #0]
 801143e:	4628      	mov	r0, r5
 8011440:	f501 72e4 	add.w	r2, r1, #456	; 0x1c8
 8011444:	3104      	adds	r1, #4
 8011446:	f7ff fcc9 	bl	8010ddc <rcl_wait_set_add_client>
 801144a:	b978      	cbnz	r0, 801146c <rcl_action_wait_set_add_action_client+0x84>
 801144c:	6821      	ldr	r1, [r4, #0]
 801144e:	4628      	mov	r0, r5
 8011450:	f501 72e6 	add.w	r2, r1, #460	; 0x1cc
 8011454:	3108      	adds	r1, #8
 8011456:	f7ff fcc1 	bl	8010ddc <rcl_wait_set_add_client>
 801145a:	b938      	cbnz	r0, 801146c <rcl_action_wait_set_add_action_client+0x84>
 801145c:	6821      	ldr	r1, [r4, #0]
 801145e:	4628      	mov	r0, r5
 8011460:	f501 72e8 	add.w	r2, r1, #464	; 0x1d0
 8011464:	310c      	adds	r1, #12
 8011466:	f7ff f969 	bl	801073c <rcl_wait_set_add_subscription>
 801146a:	b158      	cbz	r0, 8011484 <rcl_action_wait_set_add_action_client+0x9c>
 801146c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801146e:	f640 0036 	movw	r0, #2102	; 0x836
 8011472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011474:	f7fa fe8c 	bl	800c190 <rcutils_reset_error>
 8011478:	f640 0036 	movw	r0, #2102	; 0x836
 801147c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801147e:	f44f 7061 	mov.w	r0, #900	; 0x384
 8011482:	4770      	bx	lr
 8011484:	6821      	ldr	r1, [r4, #0]
 8011486:	4628      	mov	r0, r5
 8011488:	f501 72ea 	add.w	r2, r1, #468	; 0x1d4
 801148c:	3110      	adds	r1, #16
 801148e:	f7ff f955 	bl	801073c <rcl_wait_set_add_subscription>
 8011492:	2800      	cmp	r0, #0
 8011494:	d1ea      	bne.n	801146c <rcl_action_wait_set_add_action_client+0x84>
 8011496:	b11f      	cbz	r7, 80114a0 <rcl_action_wait_set_add_action_client+0xb8>
 8011498:	6823      	ldr	r3, [r4, #0]
 801149a:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 801149e:	603b      	str	r3, [r7, #0]
 80114a0:	2e00      	cmp	r6, #0
 80114a2:	d0e3      	beq.n	801146c <rcl_action_wait_set_add_action_client+0x84>
 80114a4:	6823      	ldr	r3, [r4, #0]
 80114a6:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 80114aa:	6033      	str	r3, [r6, #0]
 80114ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80114ae:	bf00      	nop

080114b0 <rcl_action_client_wait_set_get_entities_ready>:
 80114b0:	2800      	cmp	r0, #0
 80114b2:	d050      	beq.n	8011556 <rcl_action_client_wait_set_get_entities_ready+0xa6>
 80114b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80114b8:	460c      	mov	r4, r1
 80114ba:	2900      	cmp	r1, #0
 80114bc:	d03e      	beq.n	801153c <rcl_action_client_wait_set_get_entities_ready+0x8c>
 80114be:	4605      	mov	r5, r0
 80114c0:	6808      	ldr	r0, [r1, #0]
 80114c2:	2800      	cmp	r0, #0
 80114c4:	d03a      	beq.n	801153c <rcl_action_client_wait_set_get_entities_ready+0x8c>
 80114c6:	4616      	mov	r6, r2
 80114c8:	461f      	mov	r7, r3
 80114ca:	f7fd fd99 	bl	800f000 <rcl_client_is_valid>
 80114ce:	2800      	cmp	r0, #0
 80114d0:	d038      	beq.n	8011544 <rcl_action_client_wait_set_get_entities_ready+0x94>
 80114d2:	6820      	ldr	r0, [r4, #0]
 80114d4:	3004      	adds	r0, #4
 80114d6:	f7fd fd93 	bl	800f000 <rcl_client_is_valid>
 80114da:	2800      	cmp	r0, #0
 80114dc:	d032      	beq.n	8011544 <rcl_action_client_wait_set_get_entities_ready+0x94>
 80114de:	6820      	ldr	r0, [r4, #0]
 80114e0:	3008      	adds	r0, #8
 80114e2:	f7fd fd8d 	bl	800f000 <rcl_client_is_valid>
 80114e6:	b368      	cbz	r0, 8011544 <rcl_action_client_wait_set_get_entities_ready+0x94>
 80114e8:	6820      	ldr	r0, [r4, #0]
 80114ea:	300c      	adds	r0, #12
 80114ec:	f7fe fe34 	bl	8010158 <rcl_subscription_is_valid>
 80114f0:	b340      	cbz	r0, 8011544 <rcl_action_client_wait_set_get_entities_ready+0x94>
 80114f2:	6820      	ldr	r0, [r4, #0]
 80114f4:	3010      	adds	r0, #16
 80114f6:	f7fe fe2f 	bl	8010158 <rcl_subscription_is_valid>
 80114fa:	b318      	cbz	r0, 8011544 <rcl_action_client_wait_set_get_entities_ready+0x94>
 80114fc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8011500:	2a00      	cmp	r2, #0
 8011502:	bf18      	it	ne
 8011504:	2b00      	cmpne	r3, #0
 8011506:	9b08      	ldr	r3, [sp, #32]
 8011508:	bf0c      	ite	eq
 801150a:	2101      	moveq	r1, #1
 801150c:	2100      	movne	r1, #0
 801150e:	2b00      	cmp	r3, #0
 8011510:	bf08      	it	eq
 8011512:	f041 0101 	orreq.w	r1, r1, #1
 8011516:	2f00      	cmp	r7, #0
 8011518:	bf08      	it	eq
 801151a:	f041 0101 	orreq.w	r1, r1, #1
 801151e:	b9b9      	cbnz	r1, 8011550 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 8011520:	b1b6      	cbz	r6, 8011550 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 8011522:	6823      	ldr	r3, [r4, #0]
 8011524:	686c      	ldr	r4, [r5, #4]
 8011526:	e9d3 2174 	ldrd	r2, r1, [r3, #464]	; 0x1d0
 801152a:	428a      	cmp	r2, r1
 801152c:	4610      	mov	r0, r2
 801152e:	bf38      	it	cc
 8011530:	4608      	movcc	r0, r1
 8011532:	4284      	cmp	r4, r0
 8011534:	d812      	bhi.n	801155c <rcl_action_client_wait_set_get_entities_ready+0xac>
 8011536:	2001      	movs	r0, #1
 8011538:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801153c:	f640 0036 	movw	r0, #2102	; 0x836
 8011540:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011544:	f7fa fe24 	bl	800c190 <rcutils_reset_error>
 8011548:	f640 0036 	movw	r0, #2102	; 0x836
 801154c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011550:	200b      	movs	r0, #11
 8011552:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011556:	f44f 7061 	mov.w	r0, #900	; 0x384
 801155a:	4770      	bx	lr
 801155c:	e9d3 8e71 	ldrd	r8, lr, [r3, #452]	; 0x1c4
 8011560:	f8d3 c1cc 	ldr.w	ip, [r3, #460]	; 0x1cc
 8011564:	45f0      	cmp	r8, lr
 8011566:	4640      	mov	r0, r8
 8011568:	69ec      	ldr	r4, [r5, #28]
 801156a:	bf38      	it	cc
 801156c:	4670      	movcc	r0, lr
 801156e:	4560      	cmp	r0, ip
 8011570:	bf38      	it	cc
 8011572:	4660      	movcc	r0, ip
 8011574:	4284      	cmp	r4, r0
 8011576:	d9de      	bls.n	8011536 <rcl_action_client_wait_set_get_entities_ready+0x86>
 8011578:	f8d5 9018 	ldr.w	r9, [r5, #24]
 801157c:	682d      	ldr	r5, [r5, #0]
 801157e:	f859 0028 	ldr.w	r0, [r9, r8, lsl #2]
 8011582:	f855 4021 	ldr.w	r4, [r5, r1, lsl #2]
 8011586:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801158a:	1a18      	subs	r0, r3, r0
 801158c:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 8011590:	f103 0c0c 	add.w	ip, r3, #12
 8011594:	f859 102e 	ldr.w	r1, [r9, lr, lsl #2]
 8011598:	fab0 f080 	clz	r0, r0
 801159c:	eba5 050c 	sub.w	r5, r5, ip
 80115a0:	0940      	lsrs	r0, r0, #5
 80115a2:	fab5 f585 	clz	r5, r5
 80115a6:	096d      	lsrs	r5, r5, #5
 80115a8:	7035      	strb	r5, [r6, #0]
 80115aa:	f103 0510 	add.w	r5, r3, #16
 80115ae:	1b64      	subs	r4, r4, r5
 80115b0:	9d08      	ldr	r5, [sp, #32]
 80115b2:	fab4 f484 	clz	r4, r4
 80115b6:	0964      	lsrs	r4, r4, #5
 80115b8:	703c      	strb	r4, [r7, #0]
 80115ba:	1d1c      	adds	r4, r3, #4
 80115bc:	3308      	adds	r3, #8
 80115be:	7028      	strb	r0, [r5, #0]
 80115c0:	1b09      	subs	r1, r1, r4
 80115c2:	2000      	movs	r0, #0
 80115c4:	1ad3      	subs	r3, r2, r3
 80115c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80115c8:	fab1 f181 	clz	r1, r1
 80115cc:	fab3 f383 	clz	r3, r3
 80115d0:	0949      	lsrs	r1, r1, #5
 80115d2:	095b      	lsrs	r3, r3, #5
 80115d4:	7011      	strb	r1, [r2, #0]
 80115d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80115d8:	7013      	strb	r3, [r2, #0]
 80115da:	e7b1      	b.n	8011540 <rcl_action_client_wait_set_get_entities_ready+0x90>

080115dc <rcl_action_take_goal_request>:
 80115dc:	2800      	cmp	r0, #0
 80115de:	d039      	beq.n	8011654 <rcl_action_take_goal_request+0x78>
 80115e0:	b570      	push	{r4, r5, r6, lr}
 80115e2:	4604      	mov	r4, r0
 80115e4:	6800      	ldr	r0, [r0, #0]
 80115e6:	b380      	cbz	r0, 801164a <rcl_action_take_goal_request+0x6e>
 80115e8:	460e      	mov	r6, r1
 80115ea:	4615      	mov	r5, r2
 80115ec:	f7fe fcb0 	bl	800ff50 <rcl_service_is_valid>
 80115f0:	b330      	cbz	r0, 8011640 <rcl_action_take_goal_request+0x64>
 80115f2:	6820      	ldr	r0, [r4, #0]
 80115f4:	3004      	adds	r0, #4
 80115f6:	f7fe fcab 	bl	800ff50 <rcl_service_is_valid>
 80115fa:	b308      	cbz	r0, 8011640 <rcl_action_take_goal_request+0x64>
 80115fc:	6820      	ldr	r0, [r4, #0]
 80115fe:	3008      	adds	r0, #8
 8011600:	f7fe fca6 	bl	800ff50 <rcl_service_is_valid>
 8011604:	b1e0      	cbz	r0, 8011640 <rcl_action_take_goal_request+0x64>
 8011606:	6820      	ldr	r0, [r4, #0]
 8011608:	300c      	adds	r0, #12
 801160a:	f006 fa1f 	bl	8017a4c <rcl_publisher_is_valid>
 801160e:	b1b8      	cbz	r0, 8011640 <rcl_action_take_goal_request+0x64>
 8011610:	6820      	ldr	r0, [r4, #0]
 8011612:	3010      	adds	r0, #16
 8011614:	f006 fa1a 	bl	8017a4c <rcl_publisher_is_valid>
 8011618:	b190      	cbz	r0, 8011640 <rcl_action_take_goal_request+0x64>
 801161a:	b1cd      	cbz	r5, 8011650 <rcl_action_take_goal_request+0x74>
 801161c:	b1c6      	cbz	r6, 8011650 <rcl_action_take_goal_request+0x74>
 801161e:	462a      	mov	r2, r5
 8011620:	4631      	mov	r1, r6
 8011622:	6820      	ldr	r0, [r4, #0]
 8011624:	f7fe fc14 	bl	800fe50 <rcl_take_request>
 8011628:	b148      	cbz	r0, 801163e <rcl_action_take_goal_request+0x62>
 801162a:	280a      	cmp	r0, #10
 801162c:	d007      	beq.n	801163e <rcl_action_take_goal_request+0x62>
 801162e:	f240 2259 	movw	r2, #601	; 0x259
 8011632:	f640 0399 	movw	r3, #2201	; 0x899
 8011636:	4290      	cmp	r0, r2
 8011638:	bf0c      	ite	eq
 801163a:	4618      	moveq	r0, r3
 801163c:	2001      	movne	r0, #1
 801163e:	bd70      	pop	{r4, r5, r6, pc}
 8011640:	f7fa fda6 	bl	800c190 <rcutils_reset_error>
 8011644:	f640 0098 	movw	r0, #2200	; 0x898
 8011648:	bd70      	pop	{r4, r5, r6, pc}
 801164a:	f640 0098 	movw	r0, #2200	; 0x898
 801164e:	bd70      	pop	{r4, r5, r6, pc}
 8011650:	200b      	movs	r0, #11
 8011652:	bd70      	pop	{r4, r5, r6, pc}
 8011654:	f640 0098 	movw	r0, #2200	; 0x898
 8011658:	4770      	bx	lr
 801165a:	bf00      	nop

0801165c <rcl_action_send_goal_response>:
 801165c:	b388      	cbz	r0, 80116c2 <rcl_action_send_goal_response+0x66>
 801165e:	b570      	push	{r4, r5, r6, lr}
 8011660:	4604      	mov	r4, r0
 8011662:	6800      	ldr	r0, [r0, #0]
 8011664:	b340      	cbz	r0, 80116b8 <rcl_action_send_goal_response+0x5c>
 8011666:	460e      	mov	r6, r1
 8011668:	4615      	mov	r5, r2
 801166a:	f7fe fc71 	bl	800ff50 <rcl_service_is_valid>
 801166e:	b1f0      	cbz	r0, 80116ae <rcl_action_send_goal_response+0x52>
 8011670:	6820      	ldr	r0, [r4, #0]
 8011672:	3004      	adds	r0, #4
 8011674:	f7fe fc6c 	bl	800ff50 <rcl_service_is_valid>
 8011678:	b1c8      	cbz	r0, 80116ae <rcl_action_send_goal_response+0x52>
 801167a:	6820      	ldr	r0, [r4, #0]
 801167c:	3008      	adds	r0, #8
 801167e:	f7fe fc67 	bl	800ff50 <rcl_service_is_valid>
 8011682:	b1a0      	cbz	r0, 80116ae <rcl_action_send_goal_response+0x52>
 8011684:	6820      	ldr	r0, [r4, #0]
 8011686:	300c      	adds	r0, #12
 8011688:	f006 f9e0 	bl	8017a4c <rcl_publisher_is_valid>
 801168c:	b178      	cbz	r0, 80116ae <rcl_action_send_goal_response+0x52>
 801168e:	6820      	ldr	r0, [r4, #0]
 8011690:	3010      	adds	r0, #16
 8011692:	f006 f9db 	bl	8017a4c <rcl_publisher_is_valid>
 8011696:	b150      	cbz	r0, 80116ae <rcl_action_send_goal_response+0x52>
 8011698:	b18d      	cbz	r5, 80116be <rcl_action_send_goal_response+0x62>
 801169a:	b186      	cbz	r6, 80116be <rcl_action_send_goal_response+0x62>
 801169c:	462a      	mov	r2, r5
 801169e:	4631      	mov	r1, r6
 80116a0:	6820      	ldr	r0, [r4, #0]
 80116a2:	f7fe fc25 	bl	800fef0 <rcl_send_response>
 80116a6:	3800      	subs	r0, #0
 80116a8:	bf18      	it	ne
 80116aa:	2001      	movne	r0, #1
 80116ac:	bd70      	pop	{r4, r5, r6, pc}
 80116ae:	f7fa fd6f 	bl	800c190 <rcutils_reset_error>
 80116b2:	f640 0098 	movw	r0, #2200	; 0x898
 80116b6:	bd70      	pop	{r4, r5, r6, pc}
 80116b8:	f640 0098 	movw	r0, #2200	; 0x898
 80116bc:	bd70      	pop	{r4, r5, r6, pc}
 80116be:	200b      	movs	r0, #11
 80116c0:	bd70      	pop	{r4, r5, r6, pc}
 80116c2:	f640 0098 	movw	r0, #2200	; 0x898
 80116c6:	4770      	bx	lr

080116c8 <rcl_action_take_result_request>:
 80116c8:	2800      	cmp	r0, #0
 80116ca:	d03a      	beq.n	8011742 <rcl_action_take_result_request+0x7a>
 80116cc:	b570      	push	{r4, r5, r6, lr}
 80116ce:	4604      	mov	r4, r0
 80116d0:	6800      	ldr	r0, [r0, #0]
 80116d2:	b388      	cbz	r0, 8011738 <rcl_action_take_result_request+0x70>
 80116d4:	460e      	mov	r6, r1
 80116d6:	4615      	mov	r5, r2
 80116d8:	f7fe fc3a 	bl	800ff50 <rcl_service_is_valid>
 80116dc:	b338      	cbz	r0, 801172e <rcl_action_take_result_request+0x66>
 80116de:	6820      	ldr	r0, [r4, #0]
 80116e0:	3004      	adds	r0, #4
 80116e2:	f7fe fc35 	bl	800ff50 <rcl_service_is_valid>
 80116e6:	b310      	cbz	r0, 801172e <rcl_action_take_result_request+0x66>
 80116e8:	6820      	ldr	r0, [r4, #0]
 80116ea:	3008      	adds	r0, #8
 80116ec:	f7fe fc30 	bl	800ff50 <rcl_service_is_valid>
 80116f0:	b1e8      	cbz	r0, 801172e <rcl_action_take_result_request+0x66>
 80116f2:	6820      	ldr	r0, [r4, #0]
 80116f4:	300c      	adds	r0, #12
 80116f6:	f006 f9a9 	bl	8017a4c <rcl_publisher_is_valid>
 80116fa:	b1c0      	cbz	r0, 801172e <rcl_action_take_result_request+0x66>
 80116fc:	6820      	ldr	r0, [r4, #0]
 80116fe:	3010      	adds	r0, #16
 8011700:	f006 f9a4 	bl	8017a4c <rcl_publisher_is_valid>
 8011704:	b198      	cbz	r0, 801172e <rcl_action_take_result_request+0x66>
 8011706:	b1d5      	cbz	r5, 801173e <rcl_action_take_result_request+0x76>
 8011708:	b1ce      	cbz	r6, 801173e <rcl_action_take_result_request+0x76>
 801170a:	6820      	ldr	r0, [r4, #0]
 801170c:	462a      	mov	r2, r5
 801170e:	4631      	mov	r1, r6
 8011710:	3008      	adds	r0, #8
 8011712:	f7fe fb9d 	bl	800fe50 <rcl_take_request>
 8011716:	b148      	cbz	r0, 801172c <rcl_action_take_result_request+0x64>
 8011718:	280a      	cmp	r0, #10
 801171a:	d007      	beq.n	801172c <rcl_action_take_result_request+0x64>
 801171c:	f240 2259 	movw	r2, #601	; 0x259
 8011720:	f640 0399 	movw	r3, #2201	; 0x899
 8011724:	4290      	cmp	r0, r2
 8011726:	bf0c      	ite	eq
 8011728:	4618      	moveq	r0, r3
 801172a:	2001      	movne	r0, #1
 801172c:	bd70      	pop	{r4, r5, r6, pc}
 801172e:	f7fa fd2f 	bl	800c190 <rcutils_reset_error>
 8011732:	f640 0098 	movw	r0, #2200	; 0x898
 8011736:	bd70      	pop	{r4, r5, r6, pc}
 8011738:	f640 0098 	movw	r0, #2200	; 0x898
 801173c:	bd70      	pop	{r4, r5, r6, pc}
 801173e:	200b      	movs	r0, #11
 8011740:	bd70      	pop	{r4, r5, r6, pc}
 8011742:	f640 0098 	movw	r0, #2200	; 0x898
 8011746:	4770      	bx	lr

08011748 <rcl_action_take_cancel_request>:
 8011748:	2800      	cmp	r0, #0
 801174a:	d03a      	beq.n	80117c2 <rcl_action_take_cancel_request+0x7a>
 801174c:	b570      	push	{r4, r5, r6, lr}
 801174e:	4604      	mov	r4, r0
 8011750:	6800      	ldr	r0, [r0, #0]
 8011752:	b388      	cbz	r0, 80117b8 <rcl_action_take_cancel_request+0x70>
 8011754:	460e      	mov	r6, r1
 8011756:	4615      	mov	r5, r2
 8011758:	f7fe fbfa 	bl	800ff50 <rcl_service_is_valid>
 801175c:	b338      	cbz	r0, 80117ae <rcl_action_take_cancel_request+0x66>
 801175e:	6820      	ldr	r0, [r4, #0]
 8011760:	3004      	adds	r0, #4
 8011762:	f7fe fbf5 	bl	800ff50 <rcl_service_is_valid>
 8011766:	b310      	cbz	r0, 80117ae <rcl_action_take_cancel_request+0x66>
 8011768:	6820      	ldr	r0, [r4, #0]
 801176a:	3008      	adds	r0, #8
 801176c:	f7fe fbf0 	bl	800ff50 <rcl_service_is_valid>
 8011770:	b1e8      	cbz	r0, 80117ae <rcl_action_take_cancel_request+0x66>
 8011772:	6820      	ldr	r0, [r4, #0]
 8011774:	300c      	adds	r0, #12
 8011776:	f006 f969 	bl	8017a4c <rcl_publisher_is_valid>
 801177a:	b1c0      	cbz	r0, 80117ae <rcl_action_take_cancel_request+0x66>
 801177c:	6820      	ldr	r0, [r4, #0]
 801177e:	3010      	adds	r0, #16
 8011780:	f006 f964 	bl	8017a4c <rcl_publisher_is_valid>
 8011784:	b198      	cbz	r0, 80117ae <rcl_action_take_cancel_request+0x66>
 8011786:	b1d5      	cbz	r5, 80117be <rcl_action_take_cancel_request+0x76>
 8011788:	b1ce      	cbz	r6, 80117be <rcl_action_take_cancel_request+0x76>
 801178a:	6820      	ldr	r0, [r4, #0]
 801178c:	462a      	mov	r2, r5
 801178e:	4631      	mov	r1, r6
 8011790:	3004      	adds	r0, #4
 8011792:	f7fe fb5d 	bl	800fe50 <rcl_take_request>
 8011796:	b148      	cbz	r0, 80117ac <rcl_action_take_cancel_request+0x64>
 8011798:	280a      	cmp	r0, #10
 801179a:	d007      	beq.n	80117ac <rcl_action_take_cancel_request+0x64>
 801179c:	f240 2259 	movw	r2, #601	; 0x259
 80117a0:	f640 0399 	movw	r3, #2201	; 0x899
 80117a4:	4290      	cmp	r0, r2
 80117a6:	bf0c      	ite	eq
 80117a8:	4618      	moveq	r0, r3
 80117aa:	2001      	movne	r0, #1
 80117ac:	bd70      	pop	{r4, r5, r6, pc}
 80117ae:	f7fa fcef 	bl	800c190 <rcutils_reset_error>
 80117b2:	f640 0098 	movw	r0, #2200	; 0x898
 80117b6:	bd70      	pop	{r4, r5, r6, pc}
 80117b8:	f640 0098 	movw	r0, #2200	; 0x898
 80117bc:	bd70      	pop	{r4, r5, r6, pc}
 80117be:	200b      	movs	r0, #11
 80117c0:	bd70      	pop	{r4, r5, r6, pc}
 80117c2:	f640 0098 	movw	r0, #2200	; 0x898
 80117c6:	4770      	bx	lr

080117c8 <rcl_action_send_cancel_response>:
 80117c8:	b390      	cbz	r0, 8011830 <rcl_action_send_cancel_response+0x68>
 80117ca:	b570      	push	{r4, r5, r6, lr}
 80117cc:	4604      	mov	r4, r0
 80117ce:	6800      	ldr	r0, [r0, #0]
 80117d0:	b348      	cbz	r0, 8011826 <rcl_action_send_cancel_response+0x5e>
 80117d2:	460e      	mov	r6, r1
 80117d4:	4615      	mov	r5, r2
 80117d6:	f7fe fbbb 	bl	800ff50 <rcl_service_is_valid>
 80117da:	b1f8      	cbz	r0, 801181c <rcl_action_send_cancel_response+0x54>
 80117dc:	6820      	ldr	r0, [r4, #0]
 80117de:	3004      	adds	r0, #4
 80117e0:	f7fe fbb6 	bl	800ff50 <rcl_service_is_valid>
 80117e4:	b1d0      	cbz	r0, 801181c <rcl_action_send_cancel_response+0x54>
 80117e6:	6820      	ldr	r0, [r4, #0]
 80117e8:	3008      	adds	r0, #8
 80117ea:	f7fe fbb1 	bl	800ff50 <rcl_service_is_valid>
 80117ee:	b1a8      	cbz	r0, 801181c <rcl_action_send_cancel_response+0x54>
 80117f0:	6820      	ldr	r0, [r4, #0]
 80117f2:	300c      	adds	r0, #12
 80117f4:	f006 f92a 	bl	8017a4c <rcl_publisher_is_valid>
 80117f8:	b180      	cbz	r0, 801181c <rcl_action_send_cancel_response+0x54>
 80117fa:	6820      	ldr	r0, [r4, #0]
 80117fc:	3010      	adds	r0, #16
 80117fe:	f006 f925 	bl	8017a4c <rcl_publisher_is_valid>
 8011802:	b158      	cbz	r0, 801181c <rcl_action_send_cancel_response+0x54>
 8011804:	b195      	cbz	r5, 801182c <rcl_action_send_cancel_response+0x64>
 8011806:	b18e      	cbz	r6, 801182c <rcl_action_send_cancel_response+0x64>
 8011808:	6820      	ldr	r0, [r4, #0]
 801180a:	462a      	mov	r2, r5
 801180c:	4631      	mov	r1, r6
 801180e:	3004      	adds	r0, #4
 8011810:	f7fe fb6e 	bl	800fef0 <rcl_send_response>
 8011814:	3800      	subs	r0, #0
 8011816:	bf18      	it	ne
 8011818:	2001      	movne	r0, #1
 801181a:	bd70      	pop	{r4, r5, r6, pc}
 801181c:	f7fa fcb8 	bl	800c190 <rcutils_reset_error>
 8011820:	f640 0098 	movw	r0, #2200	; 0x898
 8011824:	bd70      	pop	{r4, r5, r6, pc}
 8011826:	f640 0098 	movw	r0, #2200	; 0x898
 801182a:	bd70      	pop	{r4, r5, r6, pc}
 801182c:	200b      	movs	r0, #11
 801182e:	bd70      	pop	{r4, r5, r6, pc}
 8011830:	f640 0098 	movw	r0, #2200	; 0x898
 8011834:	4770      	bx	lr
 8011836:	bf00      	nop

08011838 <rcl_action_wait_set_add_action_server>:
 8011838:	2800      	cmp	r0, #0
 801183a:	d04d      	beq.n	80118d8 <rcl_action_wait_set_add_action_server+0xa0>
 801183c:	b570      	push	{r4, r5, r6, lr}
 801183e:	460c      	mov	r4, r1
 8011840:	b159      	cbz	r1, 801185a <rcl_action_wait_set_add_action_server+0x22>
 8011842:	4605      	mov	r5, r0
 8011844:	6808      	ldr	r0, [r1, #0]
 8011846:	b140      	cbz	r0, 801185a <rcl_action_wait_set_add_action_server+0x22>
 8011848:	4616      	mov	r6, r2
 801184a:	f7fe fb81 	bl	800ff50 <rcl_service_is_valid>
 801184e:	b120      	cbz	r0, 801185a <rcl_action_wait_set_add_action_server+0x22>
 8011850:	6820      	ldr	r0, [r4, #0]
 8011852:	3004      	adds	r0, #4
 8011854:	f7fe fb7c 	bl	800ff50 <rcl_service_is_valid>
 8011858:	b910      	cbnz	r0, 8011860 <rcl_action_wait_set_add_action_server+0x28>
 801185a:	f640 0098 	movw	r0, #2200	; 0x898
 801185e:	bd70      	pop	{r4, r5, r6, pc}
 8011860:	6820      	ldr	r0, [r4, #0]
 8011862:	3008      	adds	r0, #8
 8011864:	f7fe fb74 	bl	800ff50 <rcl_service_is_valid>
 8011868:	2800      	cmp	r0, #0
 801186a:	d0f6      	beq.n	801185a <rcl_action_wait_set_add_action_server+0x22>
 801186c:	6820      	ldr	r0, [r4, #0]
 801186e:	300c      	adds	r0, #12
 8011870:	f006 f904 	bl	8017a7c <rcl_publisher_is_valid_except_context>
 8011874:	2800      	cmp	r0, #0
 8011876:	d0f0      	beq.n	801185a <rcl_action_wait_set_add_action_server+0x22>
 8011878:	6820      	ldr	r0, [r4, #0]
 801187a:	3010      	adds	r0, #16
 801187c:	f006 f8fe 	bl	8017a7c <rcl_publisher_is_valid_except_context>
 8011880:	2800      	cmp	r0, #0
 8011882:	d0ea      	beq.n	801185a <rcl_action_wait_set_add_action_server+0x22>
 8011884:	6821      	ldr	r1, [r4, #0]
 8011886:	4628      	mov	r0, r5
 8011888:	f501 72ee 	add.w	r2, r1, #476	; 0x1dc
 801188c:	f7ff fad2 	bl	8010e34 <rcl_wait_set_add_service>
 8011890:	2800      	cmp	r0, #0
 8011892:	d1e4      	bne.n	801185e <rcl_action_wait_set_add_action_server+0x26>
 8011894:	6821      	ldr	r1, [r4, #0]
 8011896:	4628      	mov	r0, r5
 8011898:	f501 72f0 	add.w	r2, r1, #480	; 0x1e0
 801189c:	3104      	adds	r1, #4
 801189e:	f7ff fac9 	bl	8010e34 <rcl_wait_set_add_service>
 80118a2:	2800      	cmp	r0, #0
 80118a4:	d1db      	bne.n	801185e <rcl_action_wait_set_add_action_server+0x26>
 80118a6:	6821      	ldr	r1, [r4, #0]
 80118a8:	4628      	mov	r0, r5
 80118aa:	f501 72f2 	add.w	r2, r1, #484	; 0x1e4
 80118ae:	3108      	adds	r1, #8
 80118b0:	f7ff fac0 	bl	8010e34 <rcl_wait_set_add_service>
 80118b4:	2800      	cmp	r0, #0
 80118b6:	d1d2      	bne.n	801185e <rcl_action_wait_set_add_action_server+0x26>
 80118b8:	6821      	ldr	r1, [r4, #0]
 80118ba:	4628      	mov	r0, r5
 80118bc:	f501 72f4 	add.w	r2, r1, #488	; 0x1e8
 80118c0:	3114      	adds	r1, #20
 80118c2:	f7ff fa5b 	bl	8010d7c <rcl_wait_set_add_timer>
 80118c6:	2800      	cmp	r0, #0
 80118c8:	d1c9      	bne.n	801185e <rcl_action_wait_set_add_action_server+0x26>
 80118ca:	2e00      	cmp	r6, #0
 80118cc:	d0c7      	beq.n	801185e <rcl_action_wait_set_add_action_server+0x26>
 80118ce:	6823      	ldr	r3, [r4, #0]
 80118d0:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 80118d4:	6033      	str	r3, [r6, #0]
 80118d6:	bd70      	pop	{r4, r5, r6, pc}
 80118d8:	f44f 7061 	mov.w	r0, #900	; 0x384
 80118dc:	4770      	bx	lr
 80118de:	bf00      	nop

080118e0 <rcl_action_server_wait_set_get_entities_ready>:
 80118e0:	2800      	cmp	r0, #0
 80118e2:	d067      	beq.n	80119b4 <rcl_action_server_wait_set_get_entities_ready+0xd4>
 80118e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80118e8:	460c      	mov	r4, r1
 80118ea:	b161      	cbz	r1, 8011906 <rcl_action_server_wait_set_get_entities_ready+0x26>
 80118ec:	4605      	mov	r5, r0
 80118ee:	6808      	ldr	r0, [r1, #0]
 80118f0:	b148      	cbz	r0, 8011906 <rcl_action_server_wait_set_get_entities_ready+0x26>
 80118f2:	4616      	mov	r6, r2
 80118f4:	4698      	mov	r8, r3
 80118f6:	f7fe fb2b 	bl	800ff50 <rcl_service_is_valid>
 80118fa:	b120      	cbz	r0, 8011906 <rcl_action_server_wait_set_get_entities_ready+0x26>
 80118fc:	6820      	ldr	r0, [r4, #0]
 80118fe:	3004      	adds	r0, #4
 8011900:	f7fe fb26 	bl	800ff50 <rcl_service_is_valid>
 8011904:	b918      	cbnz	r0, 801190e <rcl_action_server_wait_set_get_entities_ready+0x2e>
 8011906:	f640 0098 	movw	r0, #2200	; 0x898
 801190a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801190e:	6820      	ldr	r0, [r4, #0]
 8011910:	3008      	adds	r0, #8
 8011912:	f7fe fb1d 	bl	800ff50 <rcl_service_is_valid>
 8011916:	2800      	cmp	r0, #0
 8011918:	d0f5      	beq.n	8011906 <rcl_action_server_wait_set_get_entities_ready+0x26>
 801191a:	6820      	ldr	r0, [r4, #0]
 801191c:	300c      	adds	r0, #12
 801191e:	f006 f8ad 	bl	8017a7c <rcl_publisher_is_valid_except_context>
 8011922:	2800      	cmp	r0, #0
 8011924:	d0ef      	beq.n	8011906 <rcl_action_server_wait_set_get_entities_ready+0x26>
 8011926:	6820      	ldr	r0, [r4, #0]
 8011928:	3010      	adds	r0, #16
 801192a:	f006 f8a7 	bl	8017a7c <rcl_publisher_is_valid_except_context>
 801192e:	2800      	cmp	r0, #0
 8011930:	d0e9      	beq.n	8011906 <rcl_action_server_wait_set_get_entities_ready+0x26>
 8011932:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011936:	2a00      	cmp	r2, #0
 8011938:	bf18      	it	ne
 801193a:	2b00      	cmpne	r3, #0
 801193c:	bf0c      	ite	eq
 801193e:	2101      	moveq	r1, #1
 8011940:	2100      	movne	r1, #0
 8011942:	f1b8 0f00 	cmp.w	r8, #0
 8011946:	bf08      	it	eq
 8011948:	f041 0101 	orreq.w	r1, r1, #1
 801194c:	bba9      	cbnz	r1, 80119ba <rcl_action_server_wait_set_get_entities_ready+0xda>
 801194e:	b3a6      	cbz	r6, 80119ba <rcl_action_server_wait_set_get_entities_ready+0xda>
 8011950:	6821      	ldr	r1, [r4, #0]
 8011952:	2000      	movs	r0, #0
 8011954:	692c      	ldr	r4, [r5, #16]
 8011956:	f8d1 21e8 	ldr.w	r2, [r1, #488]	; 0x1e8
 801195a:	6a2f      	ldr	r7, [r5, #32]
 801195c:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011960:	f8d1 41dc 	ldr.w	r4, [r1, #476]	; 0x1dc
 8011964:	f8d1 31e0 	ldr.w	r3, [r1, #480]	; 0x1e0
 8011968:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
 801196c:	f857 5023 	ldr.w	r5, [r7, r3, lsl #2]
 8011970:	1a64      	subs	r4, r4, r1
 8011972:	f8d1 31e4 	ldr.w	r3, [r1, #484]	; 0x1e4
 8011976:	fab4 f484 	clz	r4, r4
 801197a:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 801197e:	0964      	lsrs	r4, r4, #5
 8011980:	7034      	strb	r4, [r6, #0]
 8011982:	1d0c      	adds	r4, r1, #4
 8011984:	1b2c      	subs	r4, r5, r4
 8011986:	fab4 f484 	clz	r4, r4
 801198a:	0964      	lsrs	r4, r4, #5
 801198c:	f888 4000 	strb.w	r4, [r8]
 8011990:	f101 0408 	add.w	r4, r1, #8
 8011994:	1b1b      	subs	r3, r3, r4
 8011996:	9c06      	ldr	r4, [sp, #24]
 8011998:	fab3 f383 	clz	r3, r3
 801199c:	095b      	lsrs	r3, r3, #5
 801199e:	7023      	strb	r3, [r4, #0]
 80119a0:	f101 0314 	add.w	r3, r1, #20
 80119a4:	1ad3      	subs	r3, r2, r3
 80119a6:	9a07      	ldr	r2, [sp, #28]
 80119a8:	fab3 f383 	clz	r3, r3
 80119ac:	095b      	lsrs	r3, r3, #5
 80119ae:	7013      	strb	r3, [r2, #0]
 80119b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80119b4:	f44f 7061 	mov.w	r0, #900	; 0x384
 80119b8:	4770      	bx	lr
 80119ba:	200b      	movs	r0, #11
 80119bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080119c0 <_execute_event_handler>:
 80119c0:	2002      	movs	r0, #2
 80119c2:	4770      	bx	lr

080119c4 <_cancel_goal_event_handler>:
 80119c4:	2003      	movs	r0, #3
 80119c6:	4770      	bx	lr

080119c8 <_succeed_event_handler>:
 80119c8:	2004      	movs	r0, #4
 80119ca:	4770      	bx	lr

080119cc <_abort_event_handler>:
 80119cc:	2006      	movs	r0, #6
 80119ce:	4770      	bx	lr

080119d0 <_canceled_event_handler>:
 80119d0:	2005      	movs	r0, #5
 80119d2:	4770      	bx	lr

080119d4 <rcl_action_transition_goal_state>:
 80119d4:	b2c2      	uxtb	r2, r0
 80119d6:	2a06      	cmp	r2, #6
 80119d8:	d810      	bhi.n	80119fc <rcl_action_transition_goal_state+0x28>
 80119da:	2904      	cmp	r1, #4
 80119dc:	d80e      	bhi.n	80119fc <rcl_action_transition_goal_state+0x28>
 80119de:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 80119e2:	b410      	push	{r4}
 80119e4:	1853      	adds	r3, r2, r1
 80119e6:	4c06      	ldr	r4, [pc, #24]	; (8011a00 <rcl_action_transition_goal_state+0x2c>)
 80119e8:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80119ec:	b113      	cbz	r3, 80119f4 <rcl_action_transition_goal_state+0x20>
 80119ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80119f2:	4718      	bx	r3
 80119f4:	2000      	movs	r0, #0
 80119f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80119fa:	4770      	bx	lr
 80119fc:	2000      	movs	r0, #0
 80119fe:	4770      	bx	lr
 8011a00:	0801b664 	.word	0x0801b664

08011a04 <rcl_action_get_zero_initialized_cancel_response>:
 8011a04:	b510      	push	{r4, lr}
 8011a06:	4c07      	ldr	r4, [pc, #28]	; (8011a24 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 8011a08:	4686      	mov	lr, r0
 8011a0a:	4684      	mov	ip, r0
 8011a0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011a0e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011a12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011a14:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011a18:	6823      	ldr	r3, [r4, #0]
 8011a1a:	4670      	mov	r0, lr
 8011a1c:	f8cc 3000 	str.w	r3, [ip]
 8011a20:	bd10      	pop	{r4, pc}
 8011a22:	bf00      	nop
 8011a24:	0801b6f0 	.word	0x0801b6f0

08011a28 <rclc_action_send_result_request>:
 8011a28:	b1d0      	cbz	r0, 8011a60 <rclc_action_send_result_request+0x38>
 8011a2a:	4684      	mov	ip, r0
 8011a2c:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8011a30:	b500      	push	{lr}
 8011a32:	b087      	sub	sp, #28
 8011a34:	f8dc 100d 	ldr.w	r1, [ip, #13]
 8011a38:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8011a3c:	f8dc 3015 	ldr.w	r3, [ip, #21]
 8011a40:	f10d 0e08 	add.w	lr, sp, #8
 8011a44:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011a48:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8011a4c:	f10c 0240 	add.w	r2, ip, #64	; 0x40
 8011a50:	a902      	add	r1, sp, #8
 8011a52:	3010      	adds	r0, #16
 8011a54:	f7ff fbcc 	bl	80111f0 <rcl_action_send_result_request>
 8011a58:	b920      	cbnz	r0, 8011a64 <rclc_action_send_result_request+0x3c>
 8011a5a:	b007      	add	sp, #28
 8011a5c:	f85d fb04 	ldr.w	pc, [sp], #4
 8011a60:	200b      	movs	r0, #11
 8011a62:	4770      	bx	lr
 8011a64:	9001      	str	r0, [sp, #4]
 8011a66:	f7fa fb93 	bl	800c190 <rcutils_reset_error>
 8011a6a:	9801      	ldr	r0, [sp, #4]
 8011a6c:	b007      	add	sp, #28
 8011a6e:	f85d fb04 	ldr.w	pc, [sp], #4
 8011a72:	bf00      	nop

08011a74 <rclc_action_take_goal_handle>:
 8011a74:	b160      	cbz	r0, 8011a90 <rclc_action_take_goal_handle+0x1c>
 8011a76:	6883      	ldr	r3, [r0, #8]
 8011a78:	b143      	cbz	r3, 8011a8c <rclc_action_take_goal_handle+0x18>
 8011a7a:	6819      	ldr	r1, [r3, #0]
 8011a7c:	2200      	movs	r2, #0
 8011a7e:	6081      	str	r1, [r0, #8]
 8011a80:	721a      	strb	r2, [r3, #8]
 8011a82:	68c1      	ldr	r1, [r0, #12]
 8011a84:	621a      	str	r2, [r3, #32]
 8011a86:	849a      	strh	r2, [r3, #36]	; 0x24
 8011a88:	6019      	str	r1, [r3, #0]
 8011a8a:	60c3      	str	r3, [r0, #12]
 8011a8c:	4618      	mov	r0, r3
 8011a8e:	4770      	bx	lr
 8011a90:	4603      	mov	r3, r0
 8011a92:	e7fb      	b.n	8011a8c <rclc_action_take_goal_handle+0x18>

08011a94 <rclc_action_remove_used_goal_handle>:
 8011a94:	b180      	cbz	r0, 8011ab8 <rclc_action_remove_used_goal_handle+0x24>
 8011a96:	b179      	cbz	r1, 8011ab8 <rclc_action_remove_used_goal_handle+0x24>
 8011a98:	68c3      	ldr	r3, [r0, #12]
 8011a9a:	4299      	cmp	r1, r3
 8011a9c:	d00d      	beq.n	8011aba <rclc_action_remove_used_goal_handle+0x26>
 8011a9e:	b12b      	cbz	r3, 8011aac <rclc_action_remove_used_goal_handle+0x18>
 8011aa0:	681a      	ldr	r2, [r3, #0]
 8011aa2:	4291      	cmp	r1, r2
 8011aa4:	d003      	beq.n	8011aae <rclc_action_remove_used_goal_handle+0x1a>
 8011aa6:	4613      	mov	r3, r2
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d1f9      	bne.n	8011aa0 <rclc_action_remove_used_goal_handle+0xc>
 8011aac:	4770      	bx	lr
 8011aae:	680a      	ldr	r2, [r1, #0]
 8011ab0:	601a      	str	r2, [r3, #0]
 8011ab2:	6883      	ldr	r3, [r0, #8]
 8011ab4:	600b      	str	r3, [r1, #0]
 8011ab6:	6081      	str	r1, [r0, #8]
 8011ab8:	4770      	bx	lr
 8011aba:	680b      	ldr	r3, [r1, #0]
 8011abc:	60c3      	str	r3, [r0, #12]
 8011abe:	e7f8      	b.n	8011ab2 <rclc_action_remove_used_goal_handle+0x1e>

08011ac0 <rclc_action_find_goal_handle_by_uuid>:
 8011ac0:	b538      	push	{r3, r4, r5, lr}
 8011ac2:	b181      	cbz	r1, 8011ae6 <rclc_action_find_goal_handle_by_uuid+0x26>
 8011ac4:	b178      	cbz	r0, 8011ae6 <rclc_action_find_goal_handle_by_uuid+0x26>
 8011ac6:	68c4      	ldr	r4, [r0, #12]
 8011ac8:	460d      	mov	r5, r1
 8011aca:	b914      	cbnz	r4, 8011ad2 <rclc_action_find_goal_handle_by_uuid+0x12>
 8011acc:	e009      	b.n	8011ae2 <rclc_action_find_goal_handle_by_uuid+0x22>
 8011ace:	6824      	ldr	r4, [r4, #0]
 8011ad0:	b13c      	cbz	r4, 8011ae2 <rclc_action_find_goal_handle_by_uuid+0x22>
 8011ad2:	f104 0009 	add.w	r0, r4, #9
 8011ad6:	2210      	movs	r2, #16
 8011ad8:	4629      	mov	r1, r5
 8011ada:	f007 fd69 	bl	80195b0 <memcmp>
 8011ade:	2800      	cmp	r0, #0
 8011ae0:	d1f5      	bne.n	8011ace <rclc_action_find_goal_handle_by_uuid+0xe>
 8011ae2:	4620      	mov	r0, r4
 8011ae4:	bd38      	pop	{r3, r4, r5, pc}
 8011ae6:	2400      	movs	r4, #0
 8011ae8:	4620      	mov	r0, r4
 8011aea:	bd38      	pop	{r3, r4, r5, pc}

08011aec <rclc_action_find_first_handle_by_status>:
 8011aec:	b140      	cbz	r0, 8011b00 <rclc_action_find_first_handle_by_status+0x14>
 8011aee:	68c0      	ldr	r0, [r0, #12]
 8011af0:	b910      	cbnz	r0, 8011af8 <rclc_action_find_first_handle_by_status+0xc>
 8011af2:	e005      	b.n	8011b00 <rclc_action_find_first_handle_by_status+0x14>
 8011af4:	6800      	ldr	r0, [r0, #0]
 8011af6:	b118      	cbz	r0, 8011b00 <rclc_action_find_first_handle_by_status+0x14>
 8011af8:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8011afc:	428b      	cmp	r3, r1
 8011afe:	d1f9      	bne.n	8011af4 <rclc_action_find_first_handle_by_status+0x8>
 8011b00:	4770      	bx	lr
 8011b02:	bf00      	nop

08011b04 <rclc_action_find_first_terminated_handle>:
 8011b04:	b140      	cbz	r0, 8011b18 <rclc_action_find_first_terminated_handle+0x14>
 8011b06:	68c0      	ldr	r0, [r0, #12]
 8011b08:	b910      	cbnz	r0, 8011b10 <rclc_action_find_first_terminated_handle+0xc>
 8011b0a:	e005      	b.n	8011b18 <rclc_action_find_first_terminated_handle+0x14>
 8011b0c:	6800      	ldr	r0, [r0, #0]
 8011b0e:	b118      	cbz	r0, 8011b18 <rclc_action_find_first_terminated_handle+0x14>
 8011b10:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8011b14:	2b03      	cmp	r3, #3
 8011b16:	ddf9      	ble.n	8011b0c <rclc_action_find_first_terminated_handle+0x8>
 8011b18:	4770      	bx	lr
 8011b1a:	bf00      	nop

08011b1c <rclc_action_find_handle_by_goal_request_sequence_number>:
 8011b1c:	b170      	cbz	r0, 8011b3c <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8011b1e:	68c0      	ldr	r0, [r0, #12]
 8011b20:	b160      	cbz	r0, 8011b3c <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8011b22:	b410      	push	{r4}
 8011b24:	e001      	b.n	8011b2a <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 8011b26:	6800      	ldr	r0, [r0, #0]
 8011b28:	b128      	cbz	r0, 8011b36 <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 8011b2a:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	; 0x28
 8011b2e:	4299      	cmp	r1, r3
 8011b30:	bf08      	it	eq
 8011b32:	4294      	cmpeq	r4, r2
 8011b34:	d1f7      	bne.n	8011b26 <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 8011b36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011b3a:	4770      	bx	lr
 8011b3c:	4770      	bx	lr
 8011b3e:	bf00      	nop

08011b40 <rclc_action_find_handle_by_result_request_sequence_number>:
 8011b40:	b170      	cbz	r0, 8011b60 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8011b42:	68c0      	ldr	r0, [r0, #12]
 8011b44:	b160      	cbz	r0, 8011b60 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8011b46:	b410      	push	{r4}
 8011b48:	e001      	b.n	8011b4e <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 8011b4a:	6800      	ldr	r0, [r0, #0]
 8011b4c:	b128      	cbz	r0, 8011b5a <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 8011b4e:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	; 0x40
 8011b52:	4299      	cmp	r1, r3
 8011b54:	bf08      	it	eq
 8011b56:	4294      	cmpeq	r4, r2
 8011b58:	d1f7      	bne.n	8011b4a <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 8011b5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011b5e:	4770      	bx	lr
 8011b60:	4770      	bx	lr
 8011b62:	bf00      	nop

08011b64 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8011b64:	b170      	cbz	r0, 8011b84 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8011b66:	68c0      	ldr	r0, [r0, #12]
 8011b68:	b160      	cbz	r0, 8011b84 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8011b6a:	b410      	push	{r4}
 8011b6c:	e001      	b.n	8011b72 <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 8011b6e:	6800      	ldr	r0, [r0, #0]
 8011b70:	b128      	cbz	r0, 8011b7e <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 8011b72:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	; 0x58
 8011b76:	4299      	cmp	r1, r3
 8011b78:	bf08      	it	eq
 8011b7a:	4294      	cmpeq	r4, r2
 8011b7c:	d1f7      	bne.n	8011b6e <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 8011b7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011b82:	4770      	bx	lr
 8011b84:	4770      	bx	lr
 8011b86:	bf00      	nop

08011b88 <rclc_action_find_first_handle_with_goal_response>:
 8011b88:	b140      	cbz	r0, 8011b9c <rclc_action_find_first_handle_with_goal_response+0x14>
 8011b8a:	68c0      	ldr	r0, [r0, #12]
 8011b8c:	b910      	cbnz	r0, 8011b94 <rclc_action_find_first_handle_with_goal_response+0xc>
 8011b8e:	e005      	b.n	8011b9c <rclc_action_find_first_handle_with_goal_response+0x14>
 8011b90:	6800      	ldr	r0, [r0, #0]
 8011b92:	b118      	cbz	r0, 8011b9c <rclc_action_find_first_handle_with_goal_response+0x14>
 8011b94:	f890 3020 	ldrb.w	r3, [r0, #32]
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	d0f9      	beq.n	8011b90 <rclc_action_find_first_handle_with_goal_response+0x8>
 8011b9c:	4770      	bx	lr
 8011b9e:	bf00      	nop

08011ba0 <rclc_action_find_first_handle_with_result_response>:
 8011ba0:	b140      	cbz	r0, 8011bb4 <rclc_action_find_first_handle_with_result_response+0x14>
 8011ba2:	68c0      	ldr	r0, [r0, #12]
 8011ba4:	b910      	cbnz	r0, 8011bac <rclc_action_find_first_handle_with_result_response+0xc>
 8011ba6:	e005      	b.n	8011bb4 <rclc_action_find_first_handle_with_result_response+0x14>
 8011ba8:	6800      	ldr	r0, [r0, #0]
 8011baa:	b118      	cbz	r0, 8011bb4 <rclc_action_find_first_handle_with_result_response+0x14>
 8011bac:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	d0f9      	beq.n	8011ba8 <rclc_action_find_first_handle_with_result_response+0x8>
 8011bb4:	4770      	bx	lr
 8011bb6:	bf00      	nop

08011bb8 <rclc_action_server_response_goal_request>:
 8011bb8:	b198      	cbz	r0, 8011be2 <rclc_action_server_response_goal_request+0x2a>
 8011bba:	2200      	movs	r2, #0
 8011bbc:	460b      	mov	r3, r1
 8011bbe:	f100 0128 	add.w	r1, r0, #40	; 0x28
 8011bc2:	b510      	push	{r4, lr}
 8011bc4:	6844      	ldr	r4, [r0, #4]
 8011bc6:	b086      	sub	sp, #24
 8011bc8:	f104 0010 	add.w	r0, r4, #16
 8011bcc:	9205      	str	r2, [sp, #20]
 8011bce:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8011bd2:	aa03      	add	r2, sp, #12
 8011bd4:	f88d 300c 	strb.w	r3, [sp, #12]
 8011bd8:	f7ff fd40 	bl	801165c <rcl_action_send_goal_response>
 8011bdc:	b918      	cbnz	r0, 8011be6 <rclc_action_server_response_goal_request+0x2e>
 8011bde:	b006      	add	sp, #24
 8011be0:	bd10      	pop	{r4, pc}
 8011be2:	200b      	movs	r0, #11
 8011be4:	4770      	bx	lr
 8011be6:	9001      	str	r0, [sp, #4]
 8011be8:	f7fa fad2 	bl	800c190 <rcutils_reset_error>
 8011bec:	9801      	ldr	r0, [sp, #4]
 8011bee:	b006      	add	sp, #24
 8011bf0:	bd10      	pop	{r4, pc}
 8011bf2:	bf00      	nop
 8011bf4:	0000      	movs	r0, r0
	...

08011bf8 <rclc_action_server_goal_cancel_accept>:
 8011bf8:	b310      	cbz	r0, 8011c40 <rclc_action_server_goal_cancel_accept+0x48>
 8011bfa:	b510      	push	{r4, lr}
 8011bfc:	b090      	sub	sp, #64	; 0x40
 8011bfe:	4604      	mov	r4, r0
 8011c00:	a806      	add	r0, sp, #24
 8011c02:	f7ff feff 	bl	8011a04 <rcl_action_get_zero_initialized_cancel_response>
 8011c06:	2300      	movs	r3, #0
 8011c08:	f8d4 0009 	ldr.w	r0, [r4, #9]
 8011c0c:	46ec      	mov	ip, sp
 8011c0e:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8011c12:	f8d4 2011 	ldr.w	r2, [r4, #17]
 8011c16:	f88d 3018 	strb.w	r3, [sp, #24]
 8011c1a:	f8d4 3015 	ldr.w	r3, [r4, #21]
 8011c1e:	f8cd d01c 	str.w	sp, [sp, #28]
 8011c22:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011c26:	ed9f 7b08 	vldr	d7, [pc, #32]	; 8011c48 <rclc_action_server_goal_cancel_accept+0x50>
 8011c2a:	6860      	ldr	r0, [r4, #4]
 8011c2c:	aa06      	add	r2, sp, #24
 8011c2e:	f104 0158 	add.w	r1, r4, #88	; 0x58
 8011c32:	3010      	adds	r0, #16
 8011c34:	ed8d 7b08 	vstr	d7, [sp, #32]
 8011c38:	f7ff fdc6 	bl	80117c8 <rcl_action_send_cancel_response>
 8011c3c:	b010      	add	sp, #64	; 0x40
 8011c3e:	bd10      	pop	{r4, pc}
 8011c40:	200b      	movs	r0, #11
 8011c42:	4770      	bx	lr
 8011c44:	f3af 8000 	nop.w
 8011c48:	00000001 	.word	0x00000001
 8011c4c:	00000001 	.word	0x00000001

08011c50 <rclc_action_server_goal_cancel_reject>:
 8011c50:	b082      	sub	sp, #8
 8011c52:	b530      	push	{r4, r5, lr}
 8011c54:	b08b      	sub	sp, #44	; 0x2c
 8011c56:	ac0e      	add	r4, sp, #56	; 0x38
 8011c58:	e884 000c 	stmia.w	r4, {r2, r3}
 8011c5c:	b188      	cbz	r0, 8011c82 <rclc_action_server_goal_cancel_reject+0x32>
 8011c5e:	4604      	mov	r4, r0
 8011c60:	a801      	add	r0, sp, #4
 8011c62:	460d      	mov	r5, r1
 8011c64:	f7ff fece 	bl	8011a04 <rcl_action_get_zero_initialized_cancel_response>
 8011c68:	aa01      	add	r2, sp, #4
 8011c6a:	a90e      	add	r1, sp, #56	; 0x38
 8011c6c:	f104 0010 	add.w	r0, r4, #16
 8011c70:	f88d 5004 	strb.w	r5, [sp, #4]
 8011c74:	f7ff fda8 	bl	80117c8 <rcl_action_send_cancel_response>
 8011c78:	b00b      	add	sp, #44	; 0x2c
 8011c7a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011c7e:	b002      	add	sp, #8
 8011c80:	4770      	bx	lr
 8011c82:	200b      	movs	r0, #11
 8011c84:	b00b      	add	sp, #44	; 0x2c
 8011c86:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011c8a:	b002      	add	sp, #8
 8011c8c:	4770      	bx	lr
 8011c8e:	bf00      	nop

08011c90 <__atomic_load_8>:
 8011c90:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8011c94:	4a16      	ldr	r2, [pc, #88]	; (8011cf0 <__atomic_load_8+0x60>)
 8011c96:	4b17      	ldr	r3, [pc, #92]	; (8011cf4 <__atomic_load_8+0x64>)
 8011c98:	f04f 0c01 	mov.w	ip, #1
 8011c9c:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 8011ca0:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8011ca4:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8011ca8:	fb02 f101 	mul.w	r1, r2, r1
 8011cac:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8011cb0:	fba3 2301 	umull	r2, r3, r3, r1
 8011cb4:	091b      	lsrs	r3, r3, #4
 8011cb6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8011cba:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 8011cbe:	b4d0      	push	{r4, r6, r7}
 8011cc0:	1ac9      	subs	r1, r1, r3
 8011cc2:	4c0d      	ldr	r4, [pc, #52]	; (8011cf8 <__atomic_load_8+0x68>)
 8011cc4:	1862      	adds	r2, r4, r1
 8011cc6:	e8d2 3f4f 	ldrexb	r3, [r2]
 8011cca:	e8c2 cf46 	strexb	r6, ip, [r2]
 8011cce:	2e00      	cmp	r6, #0
 8011cd0:	d1f9      	bne.n	8011cc6 <__atomic_load_8+0x36>
 8011cd2:	b2db      	uxtb	r3, r3
 8011cd4:	f3bf 8f5b 	dmb	ish
 8011cd8:	2b00      	cmp	r3, #0
 8011cda:	d1f4      	bne.n	8011cc6 <__atomic_load_8+0x36>
 8011cdc:	e9d0 6700 	ldrd	r6, r7, [r0]
 8011ce0:	f3bf 8f5b 	dmb	ish
 8011ce4:	5463      	strb	r3, [r4, r1]
 8011ce6:	4630      	mov	r0, r6
 8011ce8:	4639      	mov	r1, r7
 8011cea:	bcd0      	pop	{r4, r6, r7}
 8011cec:	4770      	bx	lr
 8011cee:	bf00      	nop
 8011cf0:	27d4eb2d 	.word	0x27d4eb2d
 8011cf4:	b21642c9 	.word	0xb21642c9
 8011cf8:	2000bd90 	.word	0x2000bd90

08011cfc <__atomic_store_8>:
 8011cfc:	b570      	push	{r4, r5, r6, lr}
 8011cfe:	ea80 4e10 	eor.w	lr, r0, r0, lsr #16
 8011d02:	4916      	ldr	r1, [pc, #88]	; (8011d5c <__atomic_store_8+0x60>)
 8011d04:	4c16      	ldr	r4, [pc, #88]	; (8011d60 <__atomic_store_8+0x64>)
 8011d06:	f08e 0e3d 	eor.w	lr, lr, #61	; 0x3d
 8011d0a:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 8011d0e:	ea8e 1e1e 	eor.w	lr, lr, lr, lsr #4
 8011d12:	fb01 fe0e 	mul.w	lr, r1, lr
 8011d16:	4913      	ldr	r1, [pc, #76]	; (8011d64 <__atomic_store_8+0x68>)
 8011d18:	ea8e 3ede 	eor.w	lr, lr, lr, lsr #15
 8011d1c:	fba1 510e 	umull	r5, r1, r1, lr
 8011d20:	f04f 0501 	mov.w	r5, #1
 8011d24:	0909      	lsrs	r1, r1, #4
 8011d26:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
 8011d2a:	ebc1 01cc 	rsb	r1, r1, ip, lsl #3
 8011d2e:	ebae 0e01 	sub.w	lr, lr, r1
 8011d32:	eb04 0c0e 	add.w	ip, r4, lr
 8011d36:	e8dc 1f4f 	ldrexb	r1, [ip]
 8011d3a:	e8cc 5f46 	strexb	r6, r5, [ip]
 8011d3e:	2e00      	cmp	r6, #0
 8011d40:	d1f9      	bne.n	8011d36 <__atomic_store_8+0x3a>
 8011d42:	b2c9      	uxtb	r1, r1
 8011d44:	f3bf 8f5b 	dmb	ish
 8011d48:	2900      	cmp	r1, #0
 8011d4a:	d1f4      	bne.n	8011d36 <__atomic_store_8+0x3a>
 8011d4c:	e9c0 2300 	strd	r2, r3, [r0]
 8011d50:	f3bf 8f5b 	dmb	ish
 8011d54:	f804 100e 	strb.w	r1, [r4, lr]
 8011d58:	bd70      	pop	{r4, r5, r6, pc}
 8011d5a:	bf00      	nop
 8011d5c:	27d4eb2d 	.word	0x27d4eb2d
 8011d60:	2000bd90 	.word	0x2000bd90
 8011d64:	b21642c9 	.word	0xb21642c9

08011d68 <__atomic_exchange_8>:
 8011d68:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 8011d6c:	4917      	ldr	r1, [pc, #92]	; (8011dcc <__atomic_exchange_8+0x64>)
 8011d6e:	f08c 0c3d 	eor.w	ip, ip, #61	; 0x3d
 8011d72:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 8011d76:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 8011d7a:	fb01 fc0c 	mul.w	ip, r1, ip
 8011d7e:	4914      	ldr	r1, [pc, #80]	; (8011dd0 <__atomic_exchange_8+0x68>)
 8011d80:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 8011d84:	b570      	push	{r4, r5, r6, lr}
 8011d86:	4686      	mov	lr, r0
 8011d88:	fba1 010c 	umull	r0, r1, r1, ip
 8011d8c:	4d11      	ldr	r5, [pc, #68]	; (8011dd4 <__atomic_exchange_8+0x6c>)
 8011d8e:	f04f 0001 	mov.w	r0, #1
 8011d92:	0909      	lsrs	r1, r1, #4
 8011d94:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 8011d98:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 8011d9c:	ebac 0c01 	sub.w	ip, ip, r1
 8011da0:	eb05 010c 	add.w	r1, r5, ip
 8011da4:	e8d1 4f4f 	ldrexb	r4, [r1]
 8011da8:	e8c1 0f46 	strexb	r6, r0, [r1]
 8011dac:	2e00      	cmp	r6, #0
 8011dae:	d1f9      	bne.n	8011da4 <__atomic_exchange_8+0x3c>
 8011db0:	b2e4      	uxtb	r4, r4
 8011db2:	f3bf 8f5b 	dmb	ish
 8011db6:	2c00      	cmp	r4, #0
 8011db8:	d1f4      	bne.n	8011da4 <__atomic_exchange_8+0x3c>
 8011dba:	e9de 0100 	ldrd	r0, r1, [lr]
 8011dbe:	e9ce 2300 	strd	r2, r3, [lr]
 8011dc2:	f3bf 8f5b 	dmb	ish
 8011dc6:	f805 400c 	strb.w	r4, [r5, ip]
 8011dca:	bd70      	pop	{r4, r5, r6, pc}
 8011dcc:	27d4eb2d 	.word	0x27d4eb2d
 8011dd0:	b21642c9 	.word	0xb21642c9
 8011dd4:	2000bd90 	.word	0x2000bd90

08011dd8 <rcutils_get_env>:
 8011dd8:	b168      	cbz	r0, 8011df6 <rcutils_get_env+0x1e>
 8011dda:	b510      	push	{r4, lr}
 8011ddc:	460c      	mov	r4, r1
 8011dde:	b129      	cbz	r1, 8011dec <rcutils_get_env+0x14>
 8011de0:	f007 f850 	bl	8018e84 <getenv>
 8011de4:	b120      	cbz	r0, 8011df0 <rcutils_get_env+0x18>
 8011de6:	6020      	str	r0, [r4, #0]
 8011de8:	2000      	movs	r0, #0
 8011dea:	bd10      	pop	{r4, pc}
 8011dec:	4803      	ldr	r0, [pc, #12]	; (8011dfc <rcutils_get_env+0x24>)
 8011dee:	bd10      	pop	{r4, pc}
 8011df0:	4b03      	ldr	r3, [pc, #12]	; (8011e00 <rcutils_get_env+0x28>)
 8011df2:	6023      	str	r3, [r4, #0]
 8011df4:	bd10      	pop	{r4, pc}
 8011df6:	4803      	ldr	r0, [pc, #12]	; (8011e04 <rcutils_get_env+0x2c>)
 8011df8:	4770      	bx	lr
 8011dfa:	bf00      	nop
 8011dfc:	0801b730 	.word	0x0801b730
 8011e00:	0801b854 	.word	0x0801b854
 8011e04:	0801b714 	.word	0x0801b714

08011e08 <rcutils_is_directory>:
 8011e08:	2000      	movs	r0, #0
 8011e0a:	4770      	bx	lr

08011e0c <rcutils_join_path>:
 8011e0c:	b082      	sub	sp, #8
 8011e0e:	2000      	movs	r0, #0
 8011e10:	e88d 000c 	stmia.w	sp, {r2, r3}
 8011e14:	b002      	add	sp, #8
 8011e16:	4770      	bx	lr

08011e18 <rcutils_to_native_path>:
 8011e18:	b084      	sub	sp, #16
 8011e1a:	2000      	movs	r0, #0
 8011e1c:	f10d 0c04 	add.w	ip, sp, #4
 8011e20:	b004      	add	sp, #16
 8011e22:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 8011e26:	4770      	bx	lr

08011e28 <rcutils_format_string_limit>:
 8011e28:	b40f      	push	{r0, r1, r2, r3}
 8011e2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011e2c:	b083      	sub	sp, #12
 8011e2e:	ac08      	add	r4, sp, #32
 8011e30:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8011e32:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8011e36:	b326      	cbz	r6, 8011e82 <rcutils_format_string_limit+0x5a>
 8011e38:	a808      	add	r0, sp, #32
 8011e3a:	f7fa f985 	bl	800c148 <rcutils_allocator_is_valid>
 8011e3e:	b300      	cbz	r0, 8011e82 <rcutils_format_string_limit+0x5a>
 8011e40:	2100      	movs	r1, #0
 8011e42:	ab0f      	add	r3, sp, #60	; 0x3c
 8011e44:	4632      	mov	r2, r6
 8011e46:	4608      	mov	r0, r1
 8011e48:	e9cd 3300 	strd	r3, r3, [sp]
 8011e4c:	f000 f906 	bl	801205c <rcutils_vsnprintf>
 8011e50:	1c43      	adds	r3, r0, #1
 8011e52:	4605      	mov	r5, r0
 8011e54:	d015      	beq.n	8011e82 <rcutils_format_string_limit+0x5a>
 8011e56:	1c47      	adds	r7, r0, #1
 8011e58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011e5a:	429f      	cmp	r7, r3
 8011e5c:	d901      	bls.n	8011e62 <rcutils_format_string_limit+0x3a>
 8011e5e:	1e5d      	subs	r5, r3, #1
 8011e60:	461f      	mov	r7, r3
 8011e62:	9b08      	ldr	r3, [sp, #32]
 8011e64:	4638      	mov	r0, r7
 8011e66:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011e68:	4798      	blx	r3
 8011e6a:	4604      	mov	r4, r0
 8011e6c:	b148      	cbz	r0, 8011e82 <rcutils_format_string_limit+0x5a>
 8011e6e:	4632      	mov	r2, r6
 8011e70:	4639      	mov	r1, r7
 8011e72:	9b01      	ldr	r3, [sp, #4]
 8011e74:	f000 f8f2 	bl	801205c <rcutils_vsnprintf>
 8011e78:	2800      	cmp	r0, #0
 8011e7a:	db09      	blt.n	8011e90 <rcutils_format_string_limit+0x68>
 8011e7c:	2300      	movs	r3, #0
 8011e7e:	5563      	strb	r3, [r4, r5]
 8011e80:	e000      	b.n	8011e84 <rcutils_format_string_limit+0x5c>
 8011e82:	2400      	movs	r4, #0
 8011e84:	4620      	mov	r0, r4
 8011e86:	b003      	add	sp, #12
 8011e88:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8011e8c:	b004      	add	sp, #16
 8011e8e:	4770      	bx	lr
 8011e90:	4620      	mov	r0, r4
 8011e92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011e94:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011e96:	2400      	movs	r4, #0
 8011e98:	4798      	blx	r3
 8011e9a:	e7f3      	b.n	8011e84 <rcutils_format_string_limit+0x5c>

08011e9c <rcutils_repl_str>:
 8011e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ea0:	ed2d 8b02 	vpush	{d8}
 8011ea4:	b087      	sub	sp, #28
 8011ea6:	2600      	movs	r6, #0
 8011ea8:	4680      	mov	r8, r0
 8011eaa:	468a      	mov	sl, r1
 8011eac:	9000      	str	r0, [sp, #0]
 8011eae:	4608      	mov	r0, r1
 8011eb0:	ee08 2a10 	vmov	s16, r2
 8011eb4:	4699      	mov	r9, r3
 8011eb6:	2510      	movs	r5, #16
 8011eb8:	f7ee fa22 	bl	8000300 <strlen>
 8011ebc:	4637      	mov	r7, r6
 8011ebe:	46b3      	mov	fp, r6
 8011ec0:	9001      	str	r0, [sp, #4]
 8011ec2:	e01e      	b.n	8011f02 <rcutils_repl_str+0x66>
 8011ec4:	f10b 0b01 	add.w	fp, fp, #1
 8011ec8:	9b01      	ldr	r3, [sp, #4]
 8011eca:	455e      	cmp	r6, fp
 8011ecc:	eb04 0803 	add.w	r8, r4, r3
 8011ed0:	d211      	bcs.n	8011ef6 <rcutils_repl_str+0x5a>
 8011ed2:	442e      	add	r6, r5
 8011ed4:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8011ed8:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8011edc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011ee0:	00b1      	lsls	r1, r6, #2
 8011ee2:	4798      	blx	r3
 8011ee4:	2800      	cmp	r0, #0
 8011ee6:	f000 8088 	beq.w	8011ffa <rcutils_repl_str+0x15e>
 8011eea:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 8011eee:	4607      	mov	r7, r0
 8011ef0:	bf28      	it	cs
 8011ef2:	f44f 1580 	movcs.w	r5, #1048576	; 0x100000
 8011ef6:	9a00      	ldr	r2, [sp, #0]
 8011ef8:	eb07 038b 	add.w	r3, r7, fp, lsl #2
 8011efc:	1aa4      	subs	r4, r4, r2
 8011efe:	f843 4c04 	str.w	r4, [r3, #-4]
 8011f02:	4651      	mov	r1, sl
 8011f04:	4640      	mov	r0, r8
 8011f06:	f007 fbb7 	bl	8019678 <strstr>
 8011f0a:	4604      	mov	r4, r0
 8011f0c:	4638      	mov	r0, r7
 8011f0e:	2c00      	cmp	r4, #0
 8011f10:	d1d8      	bne.n	8011ec4 <rcutils_repl_str+0x28>
 8011f12:	4640      	mov	r0, r8
 8011f14:	f7ee f9f4 	bl	8000300 <strlen>
 8011f18:	9b00      	ldr	r3, [sp, #0]
 8011f1a:	eba8 0803 	sub.w	r8, r8, r3
 8011f1e:	eb08 0400 	add.w	r4, r8, r0
 8011f22:	9402      	str	r4, [sp, #8]
 8011f24:	f1bb 0f00 	cmp.w	fp, #0
 8011f28:	d045      	beq.n	8011fb6 <rcutils_repl_str+0x11a>
 8011f2a:	ee18 0a10 	vmov	r0, s16
 8011f2e:	f7ee f9e7 	bl	8000300 <strlen>
 8011f32:	9a01      	ldr	r2, [sp, #4]
 8011f34:	4606      	mov	r6, r0
 8011f36:	f8d9 3000 	ldr.w	r3, [r9]
 8011f3a:	1a82      	subs	r2, r0, r2
 8011f3c:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8011f40:	fb0b 4202 	mla	r2, fp, r2, r4
 8011f44:	1c50      	adds	r0, r2, #1
 8011f46:	9205      	str	r2, [sp, #20]
 8011f48:	4798      	blx	r3
 8011f4a:	4682      	mov	sl, r0
 8011f4c:	2800      	cmp	r0, #0
 8011f4e:	d054      	beq.n	8011ffa <rcutils_repl_str+0x15e>
 8011f50:	683a      	ldr	r2, [r7, #0]
 8011f52:	463d      	mov	r5, r7
 8011f54:	9900      	ldr	r1, [sp, #0]
 8011f56:	2401      	movs	r4, #1
 8011f58:	f007 fcc9 	bl	80198ee <memcpy>
 8011f5c:	683b      	ldr	r3, [r7, #0]
 8011f5e:	e9cd 7a03 	strd	r7, sl, [sp, #12]
 8011f62:	eb0a 0803 	add.w	r8, sl, r3
 8011f66:	ee18 7a10 	vmov	r7, s16
 8011f6a:	f8dd a000 	ldr.w	sl, [sp]
 8011f6e:	f8cd 9000 	str.w	r9, [sp]
 8011f72:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8011f76:	4632      	mov	r2, r6
 8011f78:	4639      	mov	r1, r7
 8011f7a:	4640      	mov	r0, r8
 8011f7c:	44b0      	add	r8, r6
 8011f7e:	f007 fcb6 	bl	80198ee <memcpy>
 8011f82:	f855 2b04 	ldr.w	r2, [r5], #4
 8011f86:	45a3      	cmp	fp, r4
 8011f88:	444a      	add	r2, r9
 8011f8a:	eb0a 0102 	add.w	r1, sl, r2
 8011f8e:	d02a      	beq.n	8011fe6 <rcutils_repl_str+0x14a>
 8011f90:	6828      	ldr	r0, [r5, #0]
 8011f92:	1a82      	subs	r2, r0, r2
 8011f94:	4640      	mov	r0, r8
 8011f96:	4490      	add	r8, r2
 8011f98:	f007 fca9 	bl	80198ee <memcpy>
 8011f9c:	1c62      	adds	r2, r4, #1
 8011f9e:	45a3      	cmp	fp, r4
 8011fa0:	4614      	mov	r4, r2
 8011fa2:	d8e8      	bhi.n	8011f76 <rcutils_repl_str+0xda>
 8011fa4:	f8dd 9000 	ldr.w	r9, [sp]
 8011fa8:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 8011fac:	2300      	movs	r3, #0
 8011fae:	9a05      	ldr	r2, [sp, #20]
 8011fb0:	f80a 3002 	strb.w	r3, [sl, r2]
 8011fb4:	e00b      	b.n	8011fce <rcutils_repl_str+0x132>
 8011fb6:	4620      	mov	r0, r4
 8011fb8:	f8d9 3000 	ldr.w	r3, [r9]
 8011fbc:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8011fc0:	3001      	adds	r0, #1
 8011fc2:	4798      	blx	r3
 8011fc4:	4682      	mov	sl, r0
 8011fc6:	b110      	cbz	r0, 8011fce <rcutils_repl_str+0x132>
 8011fc8:	9900      	ldr	r1, [sp, #0]
 8011fca:	f007 fc88 	bl	80198de <strcpy>
 8011fce:	4638      	mov	r0, r7
 8011fd0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8011fd4:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8011fd8:	4798      	blx	r3
 8011fda:	4650      	mov	r0, sl
 8011fdc:	b007      	add	sp, #28
 8011fde:	ecbd 8b02 	vpop	{d8}
 8011fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fe6:	9b02      	ldr	r3, [sp, #8]
 8011fe8:	4640      	mov	r0, r8
 8011fea:	f8dd 9000 	ldr.w	r9, [sp]
 8011fee:	1a9a      	subs	r2, r3, r2
 8011ff0:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 8011ff4:	f007 fc7b 	bl	80198ee <memcpy>
 8011ff8:	e7d8      	b.n	8011fac <rcutils_repl_str+0x110>
 8011ffa:	f04f 0a00 	mov.w	sl, #0
 8011ffe:	e7e6      	b.n	8011fce <rcutils_repl_str+0x132>

08012000 <rcutils_snprintf>:
 8012000:	b40c      	push	{r2, r3}
 8012002:	b530      	push	{r4, r5, lr}
 8012004:	b083      	sub	sp, #12
 8012006:	ab06      	add	r3, sp, #24
 8012008:	f853 2b04 	ldr.w	r2, [r3], #4
 801200c:	9301      	str	r3, [sp, #4]
 801200e:	b1e2      	cbz	r2, 801204a <rcutils_snprintf+0x4a>
 8012010:	fab0 f480 	clz	r4, r0
 8012014:	fab1 f581 	clz	r5, r1
 8012018:	ea50 0c01 	orrs.w	ip, r0, r1
 801201c:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8012020:	ea4f 1555 	mov.w	r5, r5, lsr #5
 8012024:	d008      	beq.n	8012038 <rcutils_snprintf+0x38>
 8012026:	b984      	cbnz	r4, 801204a <rcutils_snprintf+0x4a>
 8012028:	b97d      	cbnz	r5, 801204a <rcutils_snprintf+0x4a>
 801202a:	f007 fab3 	bl	8019594 <vsniprintf>
 801202e:	b003      	add	sp, #12
 8012030:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012034:	b002      	add	sp, #8
 8012036:	4770      	bx	lr
 8012038:	4661      	mov	r1, ip
 801203a:	4660      	mov	r0, ip
 801203c:	f007 faaa 	bl	8019594 <vsniprintf>
 8012040:	b003      	add	sp, #12
 8012042:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012046:	b002      	add	sp, #8
 8012048:	4770      	bx	lr
 801204a:	f007 fc1b 	bl	8019884 <__errno>
 801204e:	2216      	movs	r2, #22
 8012050:	4603      	mov	r3, r0
 8012052:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012056:	601a      	str	r2, [r3, #0]
 8012058:	e7e9      	b.n	801202e <rcutils_snprintf+0x2e>
 801205a:	bf00      	nop

0801205c <rcutils_vsnprintf>:
 801205c:	b570      	push	{r4, r5, r6, lr}
 801205e:	b1b2      	cbz	r2, 801208e <rcutils_vsnprintf+0x32>
 8012060:	fab0 f480 	clz	r4, r0
 8012064:	fab1 f581 	clz	r5, r1
 8012068:	ea50 0c01 	orrs.w	ip, r0, r1
 801206c:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8012070:	ea4f 1555 	mov.w	r5, r5, lsr #5
 8012074:	d005      	beq.n	8012082 <rcutils_vsnprintf+0x26>
 8012076:	b954      	cbnz	r4, 801208e <rcutils_vsnprintf+0x32>
 8012078:	b94d      	cbnz	r5, 801208e <rcutils_vsnprintf+0x32>
 801207a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801207e:	f007 ba89 	b.w	8019594 <vsniprintf>
 8012082:	4661      	mov	r1, ip
 8012084:	4660      	mov	r0, ip
 8012086:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801208a:	f007 ba83 	b.w	8019594 <vsniprintf>
 801208e:	f007 fbf9 	bl	8019884 <__errno>
 8012092:	2316      	movs	r3, #22
 8012094:	6003      	str	r3, [r0, #0]
 8012096:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801209a:	bd70      	pop	{r4, r5, r6, pc}

0801209c <rcutils_strdup>:
 801209c:	b084      	sub	sp, #16
 801209e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120a0:	ac07      	add	r4, sp, #28
 80120a2:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80120a4:	4605      	mov	r5, r0
 80120a6:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 80120aa:	b1d0      	cbz	r0, 80120e2 <rcutils_strdup+0x46>
 80120ac:	460c      	mov	r4, r1
 80120ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80120b2:	2100      	movs	r1, #0
 80120b4:	f7ee f8d4 	bl	8000260 <memchr>
 80120b8:	b180      	cbz	r0, 80120dc <rcutils_strdup+0x40>
 80120ba:	1b46      	subs	r6, r0, r5
 80120bc:	1c70      	adds	r0, r6, #1
 80120be:	4639      	mov	r1, r7
 80120c0:	47a0      	blx	r4
 80120c2:	4604      	mov	r4, r0
 80120c4:	b128      	cbz	r0, 80120d2 <rcutils_strdup+0x36>
 80120c6:	4632      	mov	r2, r6
 80120c8:	4629      	mov	r1, r5
 80120ca:	f007 fc10 	bl	80198ee <memcpy>
 80120ce:	2300      	movs	r3, #0
 80120d0:	55a3      	strb	r3, [r4, r6]
 80120d2:	4620      	mov	r0, r4
 80120d4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80120d8:	b004      	add	sp, #16
 80120da:	4770      	bx	lr
 80120dc:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80120e0:	e7ed      	b.n	80120be <rcutils_strdup+0x22>
 80120e2:	4604      	mov	r4, r0
 80120e4:	e7f5      	b.n	80120d2 <rcutils_strdup+0x36>
 80120e6:	bf00      	nop

080120e8 <rcutils_strndup>:
 80120e8:	b082      	sub	sp, #8
 80120ea:	b570      	push	{r4, r5, r6, lr}
 80120ec:	ac04      	add	r4, sp, #16
 80120ee:	4606      	mov	r6, r0
 80120f0:	e884 000c 	stmia.w	r4, {r2, r3}
 80120f4:	b1b8      	cbz	r0, 8012126 <rcutils_strndup+0x3e>
 80120f6:	460c      	mov	r4, r1
 80120f8:	460a      	mov	r2, r1
 80120fa:	2100      	movs	r1, #0
 80120fc:	f7ee f8b0 	bl	8000260 <memchr>
 8012100:	b100      	cbz	r0, 8012104 <rcutils_strndup+0x1c>
 8012102:	1b84      	subs	r4, r0, r6
 8012104:	9b04      	ldr	r3, [sp, #16]
 8012106:	1c60      	adds	r0, r4, #1
 8012108:	9908      	ldr	r1, [sp, #32]
 801210a:	4798      	blx	r3
 801210c:	4605      	mov	r5, r0
 801210e:	b128      	cbz	r0, 801211c <rcutils_strndup+0x34>
 8012110:	4622      	mov	r2, r4
 8012112:	4631      	mov	r1, r6
 8012114:	f007 fbeb 	bl	80198ee <memcpy>
 8012118:	2300      	movs	r3, #0
 801211a:	552b      	strb	r3, [r5, r4]
 801211c:	4628      	mov	r0, r5
 801211e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012122:	b002      	add	sp, #8
 8012124:	4770      	bx	lr
 8012126:	4605      	mov	r5, r0
 8012128:	e7f8      	b.n	801211c <rcutils_strndup+0x34>
 801212a:	bf00      	nop

0801212c <rcutils_get_zero_initialized_string_map>:
 801212c:	2000      	movs	r0, #0
 801212e:	4b01      	ldr	r3, [pc, #4]	; (8012134 <rcutils_get_zero_initialized_string_map+0x8>)
 8012130:	6018      	str	r0, [r3, #0]
 8012132:	4770      	bx	lr
 8012134:	2000bda8 	.word	0x2000bda8

08012138 <rcutils_string_map_reserve>:
 8012138:	2800      	cmp	r0, #0
 801213a:	d03e      	beq.n	80121ba <rcutils_string_map_reserve+0x82>
 801213c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801213e:	6805      	ldr	r5, [r0, #0]
 8012140:	4606      	mov	r6, r0
 8012142:	460c      	mov	r4, r1
 8012144:	b12d      	cbz	r5, 8012152 <rcutils_string_map_reserve+0x1a>
 8012146:	68ab      	ldr	r3, [r5, #8]
 8012148:	42a3      	cmp	r3, r4
 801214a:	d904      	bls.n	8012156 <rcutils_string_map_reserve+0x1e>
 801214c:	461c      	mov	r4, r3
 801214e:	2d00      	cmp	r5, #0
 8012150:	d1f9      	bne.n	8012146 <rcutils_string_map_reserve+0xe>
 8012152:	201f      	movs	r0, #31
 8012154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012156:	686b      	ldr	r3, [r5, #4]
 8012158:	42a3      	cmp	r3, r4
 801215a:	d02a      	beq.n	80121b2 <rcutils_string_map_reserve+0x7a>
 801215c:	69e9      	ldr	r1, [r5, #28]
 801215e:	b304      	cbz	r4, 80121a2 <rcutils_string_map_reserve+0x6a>
 8012160:	f1b4 5f00 	cmp.w	r4, #536870912	; 0x20000000
 8012164:	d227      	bcs.n	80121b6 <rcutils_string_map_reserve+0x7e>
 8012166:	00e7      	lsls	r7, r4, #3
 8012168:	460a      	mov	r2, r1
 801216a:	696b      	ldr	r3, [r5, #20]
 801216c:	6828      	ldr	r0, [r5, #0]
 801216e:	4639      	mov	r1, r7
 8012170:	4798      	blx	r3
 8012172:	b300      	cbz	r0, 80121b6 <rcutils_string_map_reserve+0x7e>
 8012174:	6835      	ldr	r5, [r6, #0]
 8012176:	686a      	ldr	r2, [r5, #4]
 8012178:	6028      	str	r0, [r5, #0]
 801217a:	42a2      	cmp	r2, r4
 801217c:	d216      	bcs.n	80121ac <rcutils_string_map_reserve+0x74>
 801217e:	43d1      	mvns	r1, r2
 8012180:	eb00 03c2 	add.w	r3, r0, r2, lsl #3
 8012184:	4421      	add	r1, r4
 8012186:	2909      	cmp	r1, #9
 8012188:	d919      	bls.n	80121be <rcutils_string_map_reserve+0x86>
 801218a:	0759      	lsls	r1, r3, #29
 801218c:	d117      	bne.n	80121be <rcutils_string_map_reserve+0x86>
 801218e:	1aa1      	subs	r1, r4, r2
 8012190:	2600      	movs	r6, #0
 8012192:	2200      	movs	r2, #0
 8012194:	2700      	movs	r7, #0
 8012196:	3201      	adds	r2, #1
 8012198:	4291      	cmp	r1, r2
 801219a:	e8e3 6702 	strd	r6, r7, [r3], #8
 801219e:	d8fa      	bhi.n	8012196 <rcutils_string_map_reserve+0x5e>
 80121a0:	e004      	b.n	80121ac <rcutils_string_map_reserve+0x74>
 80121a2:	692b      	ldr	r3, [r5, #16]
 80121a4:	6828      	ldr	r0, [r5, #0]
 80121a6:	4798      	blx	r3
 80121a8:	6835      	ldr	r5, [r6, #0]
 80121aa:	602c      	str	r4, [r5, #0]
 80121ac:	2000      	movs	r0, #0
 80121ae:	606c      	str	r4, [r5, #4]
 80121b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80121b2:	2000      	movs	r0, #0
 80121b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80121b6:	200a      	movs	r0, #10
 80121b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80121ba:	200b      	movs	r0, #11
 80121bc:	4770      	bx	lr
 80121be:	4438      	add	r0, r7
 80121c0:	2200      	movs	r2, #0
 80121c2:	e9c3 2200 	strd	r2, r2, [r3]
 80121c6:	3308      	adds	r3, #8
 80121c8:	4283      	cmp	r3, r0
 80121ca:	d1fa      	bne.n	80121c2 <rcutils_string_map_reserve+0x8a>
 80121cc:	e7ee      	b.n	80121ac <rcutils_string_map_reserve+0x74>
 80121ce:	bf00      	nop

080121d0 <rcutils_string_map_init>:
 80121d0:	b082      	sub	sp, #8
 80121d2:	b570      	push	{r4, r5, r6, lr}
 80121d4:	ac04      	add	r4, sp, #16
 80121d6:	e884 000c 	stmia.w	r4, {r2, r3}
 80121da:	b378      	cbz	r0, 801223c <rcutils_string_map_init+0x6c>
 80121dc:	6806      	ldr	r6, [r0, #0]
 80121de:	4604      	mov	r4, r0
 80121e0:	b12e      	cbz	r6, 80121ee <rcutils_string_map_init+0x1e>
 80121e2:	251e      	movs	r5, #30
 80121e4:	4628      	mov	r0, r5
 80121e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80121ea:	b002      	add	sp, #8
 80121ec:	4770      	bx	lr
 80121ee:	a804      	add	r0, sp, #16
 80121f0:	460d      	mov	r5, r1
 80121f2:	f7f9 ffa9 	bl	800c148 <rcutils_allocator_is_valid>
 80121f6:	b308      	cbz	r0, 801223c <rcutils_string_map_init+0x6c>
 80121f8:	9b04      	ldr	r3, [sp, #16]
 80121fa:	2020      	movs	r0, #32
 80121fc:	9908      	ldr	r1, [sp, #32]
 80121fe:	4798      	blx	r3
 8012200:	6020      	str	r0, [r4, #0]
 8012202:	b308      	cbz	r0, 8012248 <rcutils_string_map_init+0x78>
 8012204:	f10d 0e10 	add.w	lr, sp, #16
 8012208:	6086      	str	r6, [r0, #8]
 801220a:	f100 0c0c 	add.w	ip, r0, #12
 801220e:	e9c0 6600 	strd	r6, r6, [r0]
 8012212:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012216:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801221a:	f8de 3000 	ldr.w	r3, [lr]
 801221e:	4629      	mov	r1, r5
 8012220:	4620      	mov	r0, r4
 8012222:	f8cc 3000 	str.w	r3, [ip]
 8012226:	f7ff ff87 	bl	8012138 <rcutils_string_map_reserve>
 801222a:	4605      	mov	r5, r0
 801222c:	2800      	cmp	r0, #0
 801222e:	d0d9      	beq.n	80121e4 <rcutils_string_map_init+0x14>
 8012230:	9b05      	ldr	r3, [sp, #20]
 8012232:	9908      	ldr	r1, [sp, #32]
 8012234:	6820      	ldr	r0, [r4, #0]
 8012236:	4798      	blx	r3
 8012238:	6026      	str	r6, [r4, #0]
 801223a:	e7d3      	b.n	80121e4 <rcutils_string_map_init+0x14>
 801223c:	250b      	movs	r5, #11
 801223e:	4628      	mov	r0, r5
 8012240:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012244:	b002      	add	sp, #8
 8012246:	4770      	bx	lr
 8012248:	250a      	movs	r5, #10
 801224a:	e7cb      	b.n	80121e4 <rcutils_string_map_init+0x14>

0801224c <rcutils_string_map_fini>:
 801224c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012250:	b083      	sub	sp, #12
 8012252:	2800      	cmp	r0, #0
 8012254:	d03e      	beq.n	80122d4 <rcutils_string_map_fini+0x88>
 8012256:	6804      	ldr	r4, [r0, #0]
 8012258:	4606      	mov	r6, r0
 801225a:	2c00      	cmp	r4, #0
 801225c:	d036      	beq.n	80122cc <rcutils_string_map_fini+0x80>
 801225e:	6863      	ldr	r3, [r4, #4]
 8012260:	b34b      	cbz	r3, 80122b6 <rcutils_string_map_fini+0x6a>
 8012262:	2500      	movs	r5, #0
 8012264:	6822      	ldr	r2, [r4, #0]
 8012266:	462f      	mov	r7, r5
 8012268:	f852 0035 	ldr.w	r0, [r2, r5, lsl #3]
 801226c:	ea4f 08c5 	mov.w	r8, r5, lsl #3
 8012270:	b1f0      	cbz	r0, 80122b0 <rcutils_string_map_fini+0x64>
 8012272:	69e1      	ldr	r1, [r4, #28]
 8012274:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8012278:	9101      	str	r1, [sp, #4]
 801227a:	47c8      	blx	r9
 801227c:	6823      	ldr	r3, [r4, #0]
 801227e:	9901      	ldr	r1, [sp, #4]
 8012280:	eb03 0208 	add.w	r2, r3, r8
 8012284:	f843 7035 	str.w	r7, [r3, r5, lsl #3]
 8012288:	3501      	adds	r5, #1
 801228a:	6850      	ldr	r0, [r2, #4]
 801228c:	47c8      	blx	r9
 801228e:	68a3      	ldr	r3, [r4, #8]
 8012290:	6822      	ldr	r2, [r4, #0]
 8012292:	3b01      	subs	r3, #1
 8012294:	4442      	add	r2, r8
 8012296:	6057      	str	r7, [r2, #4]
 8012298:	60a3      	str	r3, [r4, #8]
 801229a:	6834      	ldr	r4, [r6, #0]
 801229c:	6863      	ldr	r3, [r4, #4]
 801229e:	429d      	cmp	r5, r3
 80122a0:	d209      	bcs.n	80122b6 <rcutils_string_map_fini+0x6a>
 80122a2:	6822      	ldr	r2, [r4, #0]
 80122a4:	ea4f 08c5 	mov.w	r8, r5, lsl #3
 80122a8:	f852 0035 	ldr.w	r0, [r2, r5, lsl #3]
 80122ac:	2800      	cmp	r0, #0
 80122ae:	d1e0      	bne.n	8012272 <rcutils_string_map_fini+0x26>
 80122b0:	3501      	adds	r5, #1
 80122b2:	429d      	cmp	r5, r3
 80122b4:	d3d8      	bcc.n	8012268 <rcutils_string_map_fini+0x1c>
 80122b6:	2100      	movs	r1, #0
 80122b8:	4630      	mov	r0, r6
 80122ba:	f7ff ff3d 	bl	8012138 <rcutils_string_map_reserve>
 80122be:	4604      	mov	r4, r0
 80122c0:	b920      	cbnz	r0, 80122cc <rcutils_string_map_fini+0x80>
 80122c2:	6830      	ldr	r0, [r6, #0]
 80122c4:	6903      	ldr	r3, [r0, #16]
 80122c6:	69c1      	ldr	r1, [r0, #28]
 80122c8:	4798      	blx	r3
 80122ca:	6034      	str	r4, [r6, #0]
 80122cc:	4620      	mov	r0, r4
 80122ce:	b003      	add	sp, #12
 80122d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80122d4:	240b      	movs	r4, #11
 80122d6:	4620      	mov	r0, r4
 80122d8:	b003      	add	sp, #12
 80122da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80122de:	bf00      	nop

080122e0 <rcutils_string_map_getn>:
 80122e0:	b338      	cbz	r0, 8012332 <rcutils_string_map_getn+0x52>
 80122e2:	6803      	ldr	r3, [r0, #0]
 80122e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80122e8:	4688      	mov	r8, r1
 80122ea:	b1d9      	cbz	r1, 8012324 <rcutils_string_map_getn+0x44>
 80122ec:	fab3 f483 	clz	r4, r3
 80122f0:	0964      	lsrs	r4, r4, #5
 80122f2:	b1bb      	cbz	r3, 8012324 <rcutils_string_map_getn+0x44>
 80122f4:	4691      	mov	r9, r2
 80122f6:	e9d3 7600 	ldrd	r7, r6, [r3]
 80122fa:	b19e      	cbz	r6, 8012324 <rcutils_string_map_getn+0x44>
 80122fc:	f857 5034 	ldr.w	r5, [r7, r4, lsl #3]
 8012300:	eb07 0ac4 	add.w	sl, r7, r4, lsl #3
 8012304:	3401      	adds	r4, #1
 8012306:	4628      	mov	r0, r5
 8012308:	b155      	cbz	r5, 8012320 <rcutils_string_map_getn+0x40>
 801230a:	f7ed fff9 	bl	8000300 <strlen>
 801230e:	4602      	mov	r2, r0
 8012310:	4629      	mov	r1, r5
 8012312:	4640      	mov	r0, r8
 8012314:	454a      	cmp	r2, r9
 8012316:	bf38      	it	cc
 8012318:	464a      	movcc	r2, r9
 801231a:	f007 f988 	bl	801962e <strncmp>
 801231e:	b120      	cbz	r0, 801232a <rcutils_string_map_getn+0x4a>
 8012320:	42a6      	cmp	r6, r4
 8012322:	d1eb      	bne.n	80122fc <rcutils_string_map_getn+0x1c>
 8012324:	2000      	movs	r0, #0
 8012326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801232a:	f8da 0004 	ldr.w	r0, [sl, #4]
 801232e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012332:	4770      	bx	lr
 8012334:	0000      	movs	r0, r0
	...

08012338 <rmw_get_zero_initialized_context>:
 8012338:	b510      	push	{r4, lr}
 801233a:	4604      	mov	r4, r0
 801233c:	3010      	adds	r0, #16
 801233e:	f000 f80f 	bl	8012360 <rmw_get_zero_initialized_init_options>
 8012342:	2300      	movs	r3, #0
 8012344:	4620      	mov	r0, r4
 8012346:	60a3      	str	r3, [r4, #8]
 8012348:	66a3      	str	r3, [r4, #104]	; 0x68
 801234a:	66e3      	str	r3, [r4, #108]	; 0x6c
 801234c:	ed9f 7b02 	vldr	d7, [pc, #8]	; 8012358 <rmw_get_zero_initialized_context+0x20>
 8012350:	ed84 7b00 	vstr	d7, [r4]
 8012354:	bd10      	pop	{r4, pc}
 8012356:	bf00      	nop
	...

08012360 <rmw_get_zero_initialized_init_options>:
 8012360:	b510      	push	{r4, lr}
 8012362:	4604      	mov	r4, r0
 8012364:	2258      	movs	r2, #88	; 0x58
 8012366:	2100      	movs	r1, #0
 8012368:	f007 f94c 	bl	8019604 <memset>
 801236c:	f104 0010 	add.w	r0, r4, #16
 8012370:	f000 f80a 	bl	8012388 <rmw_get_default_security_options>
 8012374:	f104 001c 	add.w	r0, r4, #28
 8012378:	f005 fd54 	bl	8017e24 <rmw_get_zero_initialized_discovery_options>
 801237c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012380:	4620      	mov	r0, r4
 8012382:	60e3      	str	r3, [r4, #12]
 8012384:	bd10      	pop	{r4, pc}
 8012386:	bf00      	nop

08012388 <rmw_get_default_security_options>:
 8012388:	2200      	movs	r2, #0
 801238a:	7002      	strb	r2, [r0, #0]
 801238c:	6042      	str	r2, [r0, #4]
 801238e:	4770      	bx	lr

08012390 <rmw_get_zero_initialized_message_info>:
 8012390:	b510      	push	{r4, lr}
 8012392:	4604      	mov	r4, r0
 8012394:	2238      	movs	r2, #56	; 0x38
 8012396:	2100      	movs	r1, #0
 8012398:	f007 f934 	bl	8019604 <memset>
 801239c:	4620      	mov	r0, r4
 801239e:	bd10      	pop	{r4, pc}

080123a0 <rmw_validate_full_topic_name>:
 80123a0:	2800      	cmp	r0, #0
 80123a2:	d05d      	beq.n	8012460 <rmw_validate_full_topic_name+0xc0>
 80123a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80123a8:	460d      	mov	r5, r1
 80123aa:	2900      	cmp	r1, #0
 80123ac:	d05a      	beq.n	8012464 <rmw_validate_full_topic_name+0xc4>
 80123ae:	4604      	mov	r4, r0
 80123b0:	4616      	mov	r6, r2
 80123b2:	f7ed ffa5 	bl	8000300 <strlen>
 80123b6:	b150      	cbz	r0, 80123ce <rmw_validate_full_topic_name+0x2e>
 80123b8:	7823      	ldrb	r3, [r4, #0]
 80123ba:	2b2f      	cmp	r3, #47	; 0x2f
 80123bc:	d00e      	beq.n	80123dc <rmw_validate_full_topic_name+0x3c>
 80123be:	2302      	movs	r3, #2
 80123c0:	602b      	str	r3, [r5, #0]
 80123c2:	b146      	cbz	r6, 80123d6 <rmw_validate_full_topic_name+0x36>
 80123c4:	2300      	movs	r3, #0
 80123c6:	4618      	mov	r0, r3
 80123c8:	6033      	str	r3, [r6, #0]
 80123ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80123ce:	2301      	movs	r3, #1
 80123d0:	602b      	str	r3, [r5, #0]
 80123d2:	2e00      	cmp	r6, #0
 80123d4:	d1f6      	bne.n	80123c4 <rmw_validate_full_topic_name+0x24>
 80123d6:	2000      	movs	r0, #0
 80123d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80123dc:	1e43      	subs	r3, r0, #1
 80123de:	5ce2      	ldrb	r2, [r4, r3]
 80123e0:	2a2f      	cmp	r2, #47	; 0x2f
 80123e2:	d041      	beq.n	8012468 <rmw_validate_full_topic_name+0xc8>
 80123e4:	1e62      	subs	r2, r4, #1
 80123e6:	f1c4 0e01 	rsb	lr, r4, #1
 80123ea:	eb02 0800 	add.w	r8, r2, r0
 80123ee:	eb0e 0702 	add.w	r7, lr, r2
 80123f2:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80123f6:	f023 0120 	bic.w	r1, r3, #32
 80123fa:	f1a3 0c2f 	sub.w	ip, r3, #47	; 0x2f
 80123fe:	3941      	subs	r1, #65	; 0x41
 8012400:	2919      	cmp	r1, #25
 8012402:	d90f      	bls.n	8012424 <rmw_validate_full_topic_name+0x84>
 8012404:	f1bc 0f0a 	cmp.w	ip, #10
 8012408:	d90c      	bls.n	8012424 <rmw_validate_full_topic_name+0x84>
 801240a:	f1a3 035f 	sub.w	r3, r3, #95	; 0x5f
 801240e:	fab3 f383 	clz	r3, r3
 8012412:	095b      	lsrs	r3, r3, #5
 8012414:	b933      	cbnz	r3, 8012424 <rmw_validate_full_topic_name+0x84>
 8012416:	2204      	movs	r2, #4
 8012418:	602a      	str	r2, [r5, #0]
 801241a:	2e00      	cmp	r6, #0
 801241c:	d0db      	beq.n	80123d6 <rmw_validate_full_topic_name+0x36>
 801241e:	4618      	mov	r0, r3
 8012420:	6037      	str	r7, [r6, #0]
 8012422:	e7d2      	b.n	80123ca <rmw_validate_full_topic_name+0x2a>
 8012424:	4542      	cmp	r2, r8
 8012426:	d1e2      	bne.n	80123ee <rmw_validate_full_topic_name+0x4e>
 8012428:	2301      	movs	r3, #1
 801242a:	4f1a      	ldr	r7, [pc, #104]	; (8012494 <rmw_validate_full_topic_name+0xf4>)
 801242c:	e004      	b.n	8012438 <rmw_validate_full_topic_name+0x98>
 801242e:	4298      	cmp	r0, r3
 8012430:	f104 0401 	add.w	r4, r4, #1
 8012434:	4613      	mov	r3, r2
 8012436:	d91c      	bls.n	8012472 <rmw_validate_full_topic_name+0xd2>
 8012438:	4298      	cmp	r0, r3
 801243a:	f103 0201 	add.w	r2, r3, #1
 801243e:	d0f6      	beq.n	801242e <rmw_validate_full_topic_name+0x8e>
 8012440:	7821      	ldrb	r1, [r4, #0]
 8012442:	292f      	cmp	r1, #47	; 0x2f
 8012444:	d1f3      	bne.n	801242e <rmw_validate_full_topic_name+0x8e>
 8012446:	7861      	ldrb	r1, [r4, #1]
 8012448:	292f      	cmp	r1, #47	; 0x2f
 801244a:	d01e      	beq.n	801248a <rmw_validate_full_topic_name+0xea>
 801244c:	5dc9      	ldrb	r1, [r1, r7]
 801244e:	0749      	lsls	r1, r1, #29
 8012450:	d5ed      	bpl.n	801242e <rmw_validate_full_topic_name+0x8e>
 8012452:	2206      	movs	r2, #6
 8012454:	602a      	str	r2, [r5, #0]
 8012456:	2e00      	cmp	r6, #0
 8012458:	d0bd      	beq.n	80123d6 <rmw_validate_full_topic_name+0x36>
 801245a:	2000      	movs	r0, #0
 801245c:	6033      	str	r3, [r6, #0]
 801245e:	e7b4      	b.n	80123ca <rmw_validate_full_topic_name+0x2a>
 8012460:	200b      	movs	r0, #11
 8012462:	4770      	bx	lr
 8012464:	200b      	movs	r0, #11
 8012466:	e7b0      	b.n	80123ca <rmw_validate_full_topic_name+0x2a>
 8012468:	2203      	movs	r2, #3
 801246a:	602a      	str	r2, [r5, #0]
 801246c:	2e00      	cmp	r6, #0
 801246e:	d1f4      	bne.n	801245a <rmw_validate_full_topic_name+0xba>
 8012470:	e7b1      	b.n	80123d6 <rmw_validate_full_topic_name+0x36>
 8012472:	28f7      	cmp	r0, #247	; 0xf7
 8012474:	d803      	bhi.n	801247e <rmw_validate_full_topic_name+0xde>
 8012476:	2300      	movs	r3, #0
 8012478:	4618      	mov	r0, r3
 801247a:	602b      	str	r3, [r5, #0]
 801247c:	e7a5      	b.n	80123ca <rmw_validate_full_topic_name+0x2a>
 801247e:	2307      	movs	r3, #7
 8012480:	602b      	str	r3, [r5, #0]
 8012482:	2e00      	cmp	r6, #0
 8012484:	d0a7      	beq.n	80123d6 <rmw_validate_full_topic_name+0x36>
 8012486:	23f6      	movs	r3, #246	; 0xf6
 8012488:	e7e7      	b.n	801245a <rmw_validate_full_topic_name+0xba>
 801248a:	2205      	movs	r2, #5
 801248c:	602a      	str	r2, [r5, #0]
 801248e:	2e00      	cmp	r6, #0
 8012490:	d1e3      	bne.n	801245a <rmw_validate_full_topic_name+0xba>
 8012492:	e7a0      	b.n	80123d6 <rmw_validate_full_topic_name+0x36>
 8012494:	0801bf44 	.word	0x0801bf44

08012498 <rmw_validate_namespace_with_size>:
 8012498:	2800      	cmp	r0, #0
 801249a:	d043      	beq.n	8012524 <rmw_validate_namespace_with_size+0x8c>
 801249c:	b570      	push	{r4, r5, r6, lr}
 801249e:	4614      	mov	r4, r2
 80124a0:	b0c2      	sub	sp, #264	; 0x108
 80124a2:	b32a      	cbz	r2, 80124f0 <rmw_validate_namespace_with_size+0x58>
 80124a4:	2901      	cmp	r1, #1
 80124a6:	460d      	mov	r5, r1
 80124a8:	461e      	mov	r6, r3
 80124aa:	d102      	bne.n	80124b2 <rmw_validate_namespace_with_size+0x1a>
 80124ac:	7803      	ldrb	r3, [r0, #0]
 80124ae:	2b2f      	cmp	r3, #47	; 0x2f
 80124b0:	d012      	beq.n	80124d8 <rmw_validate_namespace_with_size+0x40>
 80124b2:	aa01      	add	r2, sp, #4
 80124b4:	4669      	mov	r1, sp
 80124b6:	f7ff ff73 	bl	80123a0 <rmw_validate_full_topic_name>
 80124ba:	b980      	cbnz	r0, 80124de <rmw_validate_namespace_with_size+0x46>
 80124bc:	9a00      	ldr	r2, [sp, #0]
 80124be:	b14a      	cbz	r2, 80124d4 <rmw_validate_namespace_with_size+0x3c>
 80124c0:	2a07      	cmp	r2, #7
 80124c2:	d007      	beq.n	80124d4 <rmw_validate_namespace_with_size+0x3c>
 80124c4:	1e53      	subs	r3, r2, #1
 80124c6:	2b05      	cmp	r3, #5
 80124c8:	d82e      	bhi.n	8012528 <rmw_validate_namespace_with_size+0x90>
 80124ca:	e8df f003 	tbb	[pc, r3]
 80124ce:	1f1c      	.short	0x1f1c
 80124d0:	14282522 	.word	0x14282522
 80124d4:	2df5      	cmp	r5, #245	; 0xf5
 80124d6:	d804      	bhi.n	80124e2 <rmw_validate_namespace_with_size+0x4a>
 80124d8:	2300      	movs	r3, #0
 80124da:	4618      	mov	r0, r3
 80124dc:	6023      	str	r3, [r4, #0]
 80124de:	b042      	add	sp, #264	; 0x108
 80124e0:	bd70      	pop	{r4, r5, r6, pc}
 80124e2:	2307      	movs	r3, #7
 80124e4:	6023      	str	r3, [r4, #0]
 80124e6:	2e00      	cmp	r6, #0
 80124e8:	d0f9      	beq.n	80124de <rmw_validate_namespace_with_size+0x46>
 80124ea:	23f4      	movs	r3, #244	; 0xf4
 80124ec:	6033      	str	r3, [r6, #0]
 80124ee:	e7f6      	b.n	80124de <rmw_validate_namespace_with_size+0x46>
 80124f0:	200b      	movs	r0, #11
 80124f2:	b042      	add	sp, #264	; 0x108
 80124f4:	bd70      	pop	{r4, r5, r6, pc}
 80124f6:	2306      	movs	r3, #6
 80124f8:	6023      	str	r3, [r4, #0]
 80124fa:	2e00      	cmp	r6, #0
 80124fc:	d0ef      	beq.n	80124de <rmw_validate_namespace_with_size+0x46>
 80124fe:	9b01      	ldr	r3, [sp, #4]
 8012500:	6033      	str	r3, [r6, #0]
 8012502:	b042      	add	sp, #264	; 0x108
 8012504:	bd70      	pop	{r4, r5, r6, pc}
 8012506:	2301      	movs	r3, #1
 8012508:	6023      	str	r3, [r4, #0]
 801250a:	e7f6      	b.n	80124fa <rmw_validate_namespace_with_size+0x62>
 801250c:	2302      	movs	r3, #2
 801250e:	6023      	str	r3, [r4, #0]
 8012510:	e7f3      	b.n	80124fa <rmw_validate_namespace_with_size+0x62>
 8012512:	2303      	movs	r3, #3
 8012514:	6023      	str	r3, [r4, #0]
 8012516:	e7f0      	b.n	80124fa <rmw_validate_namespace_with_size+0x62>
 8012518:	2304      	movs	r3, #4
 801251a:	6023      	str	r3, [r4, #0]
 801251c:	e7ed      	b.n	80124fa <rmw_validate_namespace_with_size+0x62>
 801251e:	2305      	movs	r3, #5
 8012520:	6023      	str	r3, [r4, #0]
 8012522:	e7ea      	b.n	80124fa <rmw_validate_namespace_with_size+0x62>
 8012524:	200b      	movs	r0, #11
 8012526:	4770      	bx	lr
 8012528:	4613      	mov	r3, r2
 801252a:	f44f 7180 	mov.w	r1, #256	; 0x100
 801252e:	4a03      	ldr	r2, [pc, #12]	; (801253c <rmw_validate_namespace_with_size+0xa4>)
 8012530:	a802      	add	r0, sp, #8
 8012532:	f7ff fd65 	bl	8012000 <rcutils_snprintf>
 8012536:	2001      	movs	r0, #1
 8012538:	e7d1      	b.n	80124de <rmw_validate_namespace_with_size+0x46>
 801253a:	bf00      	nop
 801253c:	0801b74c 	.word	0x0801b74c

08012540 <rmw_validate_namespace>:
 8012540:	b168      	cbz	r0, 801255e <rmw_validate_namespace+0x1e>
 8012542:	b570      	push	{r4, r5, r6, lr}
 8012544:	460d      	mov	r5, r1
 8012546:	4616      	mov	r6, r2
 8012548:	4604      	mov	r4, r0
 801254a:	f7ed fed9 	bl	8000300 <strlen>
 801254e:	4633      	mov	r3, r6
 8012550:	4601      	mov	r1, r0
 8012552:	462a      	mov	r2, r5
 8012554:	4620      	mov	r0, r4
 8012556:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801255a:	f7ff bf9d 	b.w	8012498 <rmw_validate_namespace_with_size>
 801255e:	200b      	movs	r0, #11
 8012560:	4770      	bx	lr
 8012562:	bf00      	nop

08012564 <rmw_namespace_validation_result_string>:
 8012564:	2807      	cmp	r0, #7
 8012566:	d803      	bhi.n	8012570 <rmw_namespace_validation_result_string+0xc>
 8012568:	4b02      	ldr	r3, [pc, #8]	; (8012574 <rmw_namespace_validation_result_string+0x10>)
 801256a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801256e:	4770      	bx	lr
 8012570:	4801      	ldr	r0, [pc, #4]	; (8012578 <rmw_namespace_validation_result_string+0x14>)
 8012572:	4770      	bx	lr
 8012574:	0801b944 	.word	0x0801b944
 8012578:	0801b79c 	.word	0x0801b79c

0801257c <rmw_validate_node_name>:
 801257c:	2800      	cmp	r0, #0
 801257e:	d042      	beq.n	8012606 <rmw_validate_node_name+0x8a>
 8012580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012584:	460d      	mov	r5, r1
 8012586:	2900      	cmp	r1, #0
 8012588:	d03f      	beq.n	801260a <rmw_validate_node_name+0x8e>
 801258a:	4604      	mov	r4, r0
 801258c:	4616      	mov	r6, r2
 801258e:	f7ed feb7 	bl	8000300 <strlen>
 8012592:	b310      	cbz	r0, 80125da <rmw_validate_node_name+0x5e>
 8012594:	1e63      	subs	r3, r4, #1
 8012596:	f1c4 0101 	rsb	r1, r4, #1
 801259a:	eb03 0800 	add.w	r8, r3, r0
 801259e:	18cf      	adds	r7, r1, r3
 80125a0:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 80125a4:	f1ae 0230 	sub.w	r2, lr, #48	; 0x30
 80125a8:	f02e 0c20 	bic.w	ip, lr, #32
 80125ac:	2a09      	cmp	r2, #9
 80125ae:	f1ac 0c41 	sub.w	ip, ip, #65	; 0x41
 80125b2:	d905      	bls.n	80125c0 <rmw_validate_node_name+0x44>
 80125b4:	f1bc 0f19 	cmp.w	ip, #25
 80125b8:	d902      	bls.n	80125c0 <rmw_validate_node_name+0x44>
 80125ba:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
 80125be:	d114      	bne.n	80125ea <rmw_validate_node_name+0x6e>
 80125c0:	4598      	cmp	r8, r3
 80125c2:	d1ec      	bne.n	801259e <rmw_validate_node_name+0x22>
 80125c4:	7822      	ldrb	r2, [r4, #0]
 80125c6:	4b16      	ldr	r3, [pc, #88]	; (8012620 <rmw_validate_node_name+0xa4>)
 80125c8:	5cd3      	ldrb	r3, [r2, r3]
 80125ca:	f013 0304 	ands.w	r3, r3, #4
 80125ce:	d113      	bne.n	80125f8 <rmw_validate_node_name+0x7c>
 80125d0:	28ff      	cmp	r0, #255	; 0xff
 80125d2:	d81c      	bhi.n	801260e <rmw_validate_node_name+0x92>
 80125d4:	4618      	mov	r0, r3
 80125d6:	602b      	str	r3, [r5, #0]
 80125d8:	e00c      	b.n	80125f4 <rmw_validate_node_name+0x78>
 80125da:	2301      	movs	r3, #1
 80125dc:	602b      	str	r3, [r5, #0]
 80125de:	b17e      	cbz	r6, 8012600 <rmw_validate_node_name+0x84>
 80125e0:	2300      	movs	r3, #0
 80125e2:	4618      	mov	r0, r3
 80125e4:	6033      	str	r3, [r6, #0]
 80125e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80125ea:	2302      	movs	r3, #2
 80125ec:	602b      	str	r3, [r5, #0]
 80125ee:	b13e      	cbz	r6, 8012600 <rmw_validate_node_name+0x84>
 80125f0:	2000      	movs	r0, #0
 80125f2:	6037      	str	r7, [r6, #0]
 80125f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80125f8:	2303      	movs	r3, #3
 80125fa:	602b      	str	r3, [r5, #0]
 80125fc:	2e00      	cmp	r6, #0
 80125fe:	d1ef      	bne.n	80125e0 <rmw_validate_node_name+0x64>
 8012600:	2000      	movs	r0, #0
 8012602:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012606:	200b      	movs	r0, #11
 8012608:	4770      	bx	lr
 801260a:	200b      	movs	r0, #11
 801260c:	e7f2      	b.n	80125f4 <rmw_validate_node_name+0x78>
 801260e:	2204      	movs	r2, #4
 8012610:	602a      	str	r2, [r5, #0]
 8012612:	2e00      	cmp	r6, #0
 8012614:	d0f4      	beq.n	8012600 <rmw_validate_node_name+0x84>
 8012616:	22fe      	movs	r2, #254	; 0xfe
 8012618:	4618      	mov	r0, r3
 801261a:	6032      	str	r2, [r6, #0]
 801261c:	e7ea      	b.n	80125f4 <rmw_validate_node_name+0x78>
 801261e:	bf00      	nop
 8012620:	0801bf44 	.word	0x0801bf44

08012624 <rmw_node_name_validation_result_string>:
 8012624:	2804      	cmp	r0, #4
 8012626:	d803      	bhi.n	8012630 <rmw_node_name_validation_result_string+0xc>
 8012628:	4b02      	ldr	r3, [pc, #8]	; (8012634 <rmw_node_name_validation_result_string+0x10>)
 801262a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801262e:	4770      	bx	lr
 8012630:	4801      	ldr	r0, [pc, #4]	; (8012638 <rmw_node_name_validation_result_string+0x14>)
 8012632:	4770      	bx	lr
 8012634:	0801ba50 	.word	0x0801ba50
 8012638:	0801b964 	.word	0x0801b964

0801263c <rmw_destroy_client>:
 801263c:	b570      	push	{r4, r5, r6, lr}
 801263e:	b128      	cbz	r0, 801264c <rmw_destroy_client+0x10>
 8012640:	4604      	mov	r4, r0
 8012642:	6800      	ldr	r0, [r0, #0]
 8012644:	460d      	mov	r5, r1
 8012646:	f001 fc99 	bl	8013f7c <is_uxrce_rmw_identifier_valid>
 801264a:	b910      	cbnz	r0, 8012652 <rmw_destroy_client+0x16>
 801264c:	2401      	movs	r4, #1
 801264e:	4620      	mov	r0, r4
 8012650:	bd70      	pop	{r4, r5, r6, pc}
 8012652:	6863      	ldr	r3, [r4, #4]
 8012654:	2b00      	cmp	r3, #0
 8012656:	d0f9      	beq.n	801264c <rmw_destroy_client+0x10>
 8012658:	2d00      	cmp	r5, #0
 801265a:	d0f7      	beq.n	801264c <rmw_destroy_client+0x10>
 801265c:	6828      	ldr	r0, [r5, #0]
 801265e:	f001 fc8d 	bl	8013f7c <is_uxrce_rmw_identifier_valid>
 8012662:	2800      	cmp	r0, #0
 8012664:	d0f2      	beq.n	801264c <rmw_destroy_client+0x10>
 8012666:	686e      	ldr	r6, [r5, #4]
 8012668:	2e00      	cmp	r6, #0
 801266a:	d0ef      	beq.n	801264c <rmw_destroy_client+0x10>
 801266c:	6864      	ldr	r4, [r4, #4]
 801266e:	6932      	ldr	r2, [r6, #16]
 8012670:	6920      	ldr	r0, [r4, #16]
 8012672:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8012676:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801267a:	6819      	ldr	r1, [r3, #0]
 801267c:	f001 ff02 	bl	8014484 <uxr_buffer_cancel_data>
 8012680:	4602      	mov	r2, r0
 8012682:	6920      	ldr	r0, [r4, #16]
 8012684:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8012688:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801268c:	f001 fbaa 	bl	8013de4 <run_xrce_session>
 8012690:	6920      	ldr	r0, [r4, #16]
 8012692:	6932      	ldr	r2, [r6, #16]
 8012694:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8012698:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801269c:	6819      	ldr	r1, [r3, #0]
 801269e:	f001 fd11 	bl	80140c4 <uxr_buffer_delete_entity>
 80126a2:	4602      	mov	r2, r0
 80126a4:	6920      	ldr	r0, [r4, #16]
 80126a6:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80126aa:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80126ae:	f001 fb99 	bl	8013de4 <run_xrce_session>
 80126b2:	4603      	mov	r3, r0
 80126b4:	4628      	mov	r0, r5
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	bf14      	ite	ne
 80126ba:	2400      	movne	r4, #0
 80126bc:	2402      	moveq	r4, #2
 80126be:	f001 fa6d 	bl	8013b9c <rmw_uxrce_fini_client_memory>
 80126c2:	e7c4      	b.n	801264e <rmw_destroy_client+0x12>

080126c4 <rmw_get_gid_for_client>:
 80126c4:	b1b9      	cbz	r1, 80126f6 <rmw_get_gid_for_client+0x32>
 80126c6:	b538      	push	{r3, r4, r5, lr}
 80126c8:	4605      	mov	r5, r0
 80126ca:	b180      	cbz	r0, 80126ee <rmw_get_gid_for_client+0x2a>
 80126cc:	6800      	ldr	r0, [r0, #0]
 80126ce:	460c      	mov	r4, r1
 80126d0:	b120      	cbz	r0, 80126dc <rmw_get_gid_for_client+0x18>
 80126d2:	4b0a      	ldr	r3, [pc, #40]	; (80126fc <rmw_get_gid_for_client+0x38>)
 80126d4:	6819      	ldr	r1, [r3, #0]
 80126d6:	f7ed fdb3 	bl	8000240 <strcmp>
 80126da:	b950      	cbnz	r0, 80126f2 <rmw_get_gid_for_client+0x2e>
 80126dc:	686b      	ldr	r3, [r5, #4]
 80126de:	2000      	movs	r0, #0
 80126e0:	6060      	str	r0, [r4, #4]
 80126e2:	60a0      	str	r0, [r4, #8]
 80126e4:	60e0      	str	r0, [r4, #12]
 80126e6:	6120      	str	r0, [r4, #16]
 80126e8:	691b      	ldr	r3, [r3, #16]
 80126ea:	6063      	str	r3, [r4, #4]
 80126ec:	bd38      	pop	{r3, r4, r5, pc}
 80126ee:	200b      	movs	r0, #11
 80126f0:	bd38      	pop	{r3, r4, r5, pc}
 80126f2:	200c      	movs	r0, #12
 80126f4:	bd38      	pop	{r3, r4, r5, pc}
 80126f6:	200b      	movs	r0, #11
 80126f8:	4770      	bx	lr
 80126fa:	bf00      	nop
 80126fc:	0801bed0 	.word	0x0801bed0

08012700 <rmw_get_implementation_identifier>:
 8012700:	4b01      	ldr	r3, [pc, #4]	; (8012708 <rmw_get_implementation_identifier+0x8>)
 8012702:	6818      	ldr	r0, [r3, #0]
 8012704:	4770      	bx	lr
 8012706:	bf00      	nop
 8012708:	0801bed0 	.word	0x0801bed0

0801270c <rmw_init_options_init>:
 801270c:	b084      	sub	sp, #16
 801270e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012710:	b083      	sub	sp, #12
 8012712:	ad09      	add	r5, sp, #36	; 0x24
 8012714:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8012718:	b130      	cbz	r0, 8012728 <rmw_init_options_init+0x1c>
 801271a:	4604      	mov	r4, r0
 801271c:	4628      	mov	r0, r5
 801271e:	f7f9 fd13 	bl	800c148 <rcutils_allocator_is_valid>
 8012722:	b108      	cbz	r0, 8012728 <rmw_init_options_init+0x1c>
 8012724:	68a6      	ldr	r6, [r4, #8]
 8012726:	b12e      	cbz	r6, 8012734 <rmw_init_options_init+0x28>
 8012728:	200b      	movs	r0, #11
 801272a:	b003      	add	sp, #12
 801272c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012730:	b004      	add	sp, #16
 8012732:	4770      	bx	lr
 8012734:	2200      	movs	r2, #0
 8012736:	2300      	movs	r3, #0
 8012738:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 801273c:	f8df e098 	ldr.w	lr, [pc, #152]	; 80127d8 <rmw_init_options_init+0xcc>
 8012740:	466f      	mov	r7, sp
 8012742:	e9c4 2300 	strd	r2, r3, [r4]
 8012746:	4b20      	ldr	r3, [pc, #128]	; (80127c8 <rmw_init_options_init+0xbc>)
 8012748:	681b      	ldr	r3, [r3, #0]
 801274a:	60a3      	str	r3, [r4, #8]
 801274c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801274e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012752:	682b      	ldr	r3, [r5, #0]
 8012754:	4638      	mov	r0, r7
 8012756:	f8cc 3000 	str.w	r3, [ip]
 801275a:	f8c4 e03c 	str.w	lr, [r4, #60]	; 0x3c
 801275e:	60e6      	str	r6, [r4, #12]
 8012760:	f7ff fe12 	bl	8012388 <rmw_get_default_security_options>
 8012764:	f104 0310 	add.w	r3, r4, #16
 8012768:	2203      	movs	r2, #3
 801276a:	e897 0003 	ldmia.w	r7, {r0, r1}
 801276e:	e883 0003 	stmia.w	r3, {r0, r1}
 8012772:	4816      	ldr	r0, [pc, #88]	; (80127cc <rmw_init_options_init+0xc0>)
 8012774:	4916      	ldr	r1, [pc, #88]	; (80127d0 <rmw_init_options_init+0xc4>)
 8012776:	7626      	strb	r6, [r4, #24]
 8012778:	f001 f950 	bl	8013a1c <rmw_uxrce_init_init_options_impl_memory>
 801277c:	4813      	ldr	r0, [pc, #76]	; (80127cc <rmw_init_options_init+0xc0>)
 801277e:	f005 fcf5 	bl	801816c <get_memory>
 8012782:	b1f0      	cbz	r0, 80127c2 <rmw_init_options_init+0xb6>
 8012784:	4a13      	ldr	r2, [pc, #76]	; (80127d4 <rmw_init_options_init+0xc8>)
 8012786:	6883      	ldr	r3, [r0, #8]
 8012788:	6851      	ldr	r1, [r2, #4]
 801278a:	6563      	str	r3, [r4, #84]	; 0x54
 801278c:	7810      	ldrb	r0, [r2, #0]
 801278e:	6159      	str	r1, [r3, #20]
 8012790:	68d1      	ldr	r1, [r2, #12]
 8012792:	7418      	strb	r0, [r3, #16]
 8012794:	61d9      	str	r1, [r3, #28]
 8012796:	6911      	ldr	r1, [r2, #16]
 8012798:	6219      	str	r1, [r3, #32]
 801279a:	6951      	ldr	r1, [r2, #20]
 801279c:	6892      	ldr	r2, [r2, #8]
 801279e:	6259      	str	r1, [r3, #36]	; 0x24
 80127a0:	619a      	str	r2, [r3, #24]
 80127a2:	f003 fe1b 	bl	80163dc <uxr_nanos>
 80127a6:	f006 fc71 	bl	801908c <srand>
 80127aa:	f006 fc9d 	bl	80190e8 <rand>
 80127ae:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80127b0:	6298      	str	r0, [r3, #40]	; 0x28
 80127b2:	2800      	cmp	r0, #0
 80127b4:	d0f9      	beq.n	80127aa <rmw_init_options_init+0x9e>
 80127b6:	2000      	movs	r0, #0
 80127b8:	b003      	add	sp, #12
 80127ba:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80127be:	b004      	add	sp, #16
 80127c0:	4770      	bx	lr
 80127c2:	2001      	movs	r0, #1
 80127c4:	e7b1      	b.n	801272a <rmw_init_options_init+0x1e>
 80127c6:	bf00      	nop
 80127c8:	0801bed0 	.word	0x0801bed0
 80127cc:	200108ac 	.word	0x200108ac
 80127d0:	2000c080 	.word	0x2000c080
 80127d4:	2000b94c 	.word	0x2000b94c
 80127d8:	0801b4d8 	.word	0x0801b4d8

080127dc <rmw_init_options_copy>:
 80127dc:	b570      	push	{r4, r5, r6, lr}
 80127de:	b158      	cbz	r0, 80127f8 <rmw_init_options_copy+0x1c>
 80127e0:	460d      	mov	r5, r1
 80127e2:	b149      	cbz	r1, 80127f8 <rmw_init_options_copy+0x1c>
 80127e4:	4604      	mov	r4, r0
 80127e6:	6880      	ldr	r0, [r0, #8]
 80127e8:	b120      	cbz	r0, 80127f4 <rmw_init_options_copy+0x18>
 80127ea:	4b13      	ldr	r3, [pc, #76]	; (8012838 <rmw_init_options_copy+0x5c>)
 80127ec:	6819      	ldr	r1, [r3, #0]
 80127ee:	f7ed fd27 	bl	8000240 <strcmp>
 80127f2:	b9d8      	cbnz	r0, 801282c <rmw_init_options_copy+0x50>
 80127f4:	68ae      	ldr	r6, [r5, #8]
 80127f6:	b116      	cbz	r6, 80127fe <rmw_init_options_copy+0x22>
 80127f8:	260b      	movs	r6, #11
 80127fa:	4630      	mov	r0, r6
 80127fc:	bd70      	pop	{r4, r5, r6, pc}
 80127fe:	2258      	movs	r2, #88	; 0x58
 8012800:	4621      	mov	r1, r4
 8012802:	4628      	mov	r0, r5
 8012804:	f007 f873 	bl	80198ee <memcpy>
 8012808:	480c      	ldr	r0, [pc, #48]	; (801283c <rmw_init_options_copy+0x60>)
 801280a:	f005 fcaf 	bl	801816c <get_memory>
 801280e:	b180      	cbz	r0, 8012832 <rmw_init_options_copy+0x56>
 8012810:	6883      	ldr	r3, [r0, #8]
 8012812:	656b      	str	r3, [r5, #84]	; 0x54
 8012814:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8012816:	f103 0410 	add.w	r4, r3, #16
 801281a:	3510      	adds	r5, #16
 801281c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801281e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012820:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8012824:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8012828:	4630      	mov	r0, r6
 801282a:	bd70      	pop	{r4, r5, r6, pc}
 801282c:	260c      	movs	r6, #12
 801282e:	4630      	mov	r0, r6
 8012830:	bd70      	pop	{r4, r5, r6, pc}
 8012832:	2601      	movs	r6, #1
 8012834:	e7e1      	b.n	80127fa <rmw_init_options_copy+0x1e>
 8012836:	bf00      	nop
 8012838:	0801bed0 	.word	0x0801bed0
 801283c:	200108ac 	.word	0x200108ac

08012840 <rmw_init_options_fini>:
 8012840:	b368      	cbz	r0, 801289e <rmw_init_options_fini+0x5e>
 8012842:	b510      	push	{r4, lr}
 8012844:	4604      	mov	r4, r0
 8012846:	b096      	sub	sp, #88	; 0x58
 8012848:	3040      	adds	r0, #64	; 0x40
 801284a:	f7f9 fc7d 	bl	800c148 <rcutils_allocator_is_valid>
 801284e:	b1f0      	cbz	r0, 801288e <rmw_init_options_fini+0x4e>
 8012850:	68a0      	ldr	r0, [r4, #8]
 8012852:	b120      	cbz	r0, 801285e <rmw_init_options_fini+0x1e>
 8012854:	4b13      	ldr	r3, [pc, #76]	; (80128a4 <rmw_init_options_fini+0x64>)
 8012856:	6819      	ldr	r1, [r3, #0]
 8012858:	f7ed fcf2 	bl	8000240 <strcmp>
 801285c:	b9e8      	cbnz	r0, 801289a <rmw_init_options_fini+0x5a>
 801285e:	4b12      	ldr	r3, [pc, #72]	; (80128a8 <rmw_init_options_fini+0x68>)
 8012860:	6819      	ldr	r1, [r3, #0]
 8012862:	b1b9      	cbz	r1, 8012894 <rmw_init_options_fini+0x54>
 8012864:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8012866:	e001      	b.n	801286c <rmw_init_options_fini+0x2c>
 8012868:	6849      	ldr	r1, [r1, #4]
 801286a:	b199      	cbz	r1, 8012894 <rmw_init_options_fini+0x54>
 801286c:	688b      	ldr	r3, [r1, #8]
 801286e:	429a      	cmp	r2, r3
 8012870:	d1fa      	bne.n	8012868 <rmw_init_options_fini+0x28>
 8012872:	480d      	ldr	r0, [pc, #52]	; (80128a8 <rmw_init_options_fini+0x68>)
 8012874:	f005 fc8a 	bl	801818c <put_memory>
 8012878:	4668      	mov	r0, sp
 801287a:	f7ff fd71 	bl	8012360 <rmw_get_zero_initialized_init_options>
 801287e:	2258      	movs	r2, #88	; 0x58
 8012880:	4669      	mov	r1, sp
 8012882:	4620      	mov	r0, r4
 8012884:	f007 f833 	bl	80198ee <memcpy>
 8012888:	2000      	movs	r0, #0
 801288a:	b016      	add	sp, #88	; 0x58
 801288c:	bd10      	pop	{r4, pc}
 801288e:	200b      	movs	r0, #11
 8012890:	b016      	add	sp, #88	; 0x58
 8012892:	bd10      	pop	{r4, pc}
 8012894:	2001      	movs	r0, #1
 8012896:	b016      	add	sp, #88	; 0x58
 8012898:	bd10      	pop	{r4, pc}
 801289a:	200c      	movs	r0, #12
 801289c:	e7f5      	b.n	801288a <rmw_init_options_fini+0x4a>
 801289e:	200b      	movs	r0, #11
 80128a0:	4770      	bx	lr
 80128a2:	bf00      	nop
 80128a4:	0801bed0 	.word	0x0801bed0
 80128a8:	200108ac 	.word	0x200108ac

080128ac <rmw_init>:
 80128ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80128b0:	b083      	sub	sp, #12
 80128b2:	2800      	cmp	r0, #0
 80128b4:	f000 80d3 	beq.w	8012a5e <rmw_init+0x1b2>
 80128b8:	460e      	mov	r6, r1
 80128ba:	2900      	cmp	r1, #0
 80128bc:	f000 80cf 	beq.w	8012a5e <rmw_init+0x1b2>
 80128c0:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80128c2:	4605      	mov	r5, r0
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	f000 80ca 	beq.w	8012a5e <rmw_init+0x1b2>
 80128ca:	4b78      	ldr	r3, [pc, #480]	; (8012aac <rmw_init+0x200>)
 80128cc:	6880      	ldr	r0, [r0, #8]
 80128ce:	681f      	ldr	r7, [r3, #0]
 80128d0:	b128      	cbz	r0, 80128de <rmw_init+0x32>
 80128d2:	4639      	mov	r1, r7
 80128d4:	f7ed fcb4 	bl	8000240 <strcmp>
 80128d8:	2800      	cmp	r0, #0
 80128da:	f040 80ca 	bne.w	8012a72 <rmw_init+0x1c6>
 80128de:	4c74      	ldr	r4, [pc, #464]	; (8012ab0 <rmw_init+0x204>)
 80128e0:	f04f 0800 	mov.w	r8, #0
 80128e4:	4973      	ldr	r1, [pc, #460]	; (8012ab4 <rmw_init+0x208>)
 80128e6:	4874      	ldr	r0, [pc, #464]	; (8012ab8 <rmw_init+0x20c>)
 80128e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80128ec:	60b7      	str	r7, [r6, #8]
 80128ee:	e9c6 2300 	strd	r2, r3, [r6]
 80128f2:	68eb      	ldr	r3, [r5, #12]
 80128f4:	2201      	movs	r2, #1
 80128f6:	66b3      	str	r3, [r6, #104]	; 0x68
 80128f8:	f001 f830 	bl	801395c <rmw_uxrce_init_session_memory>
 80128fc:	4620      	mov	r0, r4
 80128fe:	2204      	movs	r2, #4
 8012900:	496e      	ldr	r1, [pc, #440]	; (8012abc <rmw_init+0x210>)
 8012902:	f001 f86b 	bl	80139dc <rmw_uxrce_init_static_input_buffer_memory>
 8012906:	486c      	ldr	r0, [pc, #432]	; (8012ab8 <rmw_init+0x20c>)
 8012908:	f884 800d 	strb.w	r8, [r4, #13]
 801290c:	f005 fc2e 	bl	801816c <get_memory>
 8012910:	2800      	cmp	r0, #0
 8012912:	f000 80a9 	beq.w	8012a68 <rmw_init+0x1bc>
 8012916:	6884      	ldr	r4, [r0, #8]
 8012918:	6d68      	ldr	r0, [r5, #84]	; 0x54
 801291a:	f104 0910 	add.w	r9, r4, #16
 801291e:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8012920:	f890 c010 	ldrb.w	ip, [r0, #16]
 8012924:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8012928:	9101      	str	r1, [sp, #4]
 801292a:	4661      	mov	r1, ip
 801292c:	6a00      	ldr	r0, [r0, #32]
 801292e:	9000      	str	r0, [sp, #0]
 8012930:	4648      	mov	r0, r9
 8012932:	f001 fcfb 	bl	801432c <uxr_set_custom_transport_callbacks>
 8012936:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801293a:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 801293e:	4960      	ldr	r1, [pc, #384]	; (8012ac0 <rmw_init+0x214>)
 8012940:	4860      	ldr	r0, [pc, #384]	; (8012ac4 <rmw_init+0x218>)
 8012942:	e9c4 22e3 	strd	r2, r2, [r4, #908]	; 0x38c
 8012946:	f504 725e 	add.w	r2, r4, #888	; 0x378
 801294a:	e9c4 22e1 	strd	r2, r2, [r4, #900]	; 0x384
 801294e:	f8c3 8594 	str.w	r8, [r3, #1428]	; 0x594
 8012952:	2201      	movs	r2, #1
 8012954:	f8c3 8598 	str.w	r8, [r3, #1432]	; 0x598
 8012958:	f8c3 859c 	str.w	r8, [r3, #1436]	; 0x59c
 801295c:	f8c3 85a0 	str.w	r8, [r3, #1440]	; 0x5a0
 8012960:	e9c4 78da 	strd	r7, r8, [r4, #872]	; 0x368
 8012964:	66f4      	str	r4, [r6, #108]	; 0x6c
 8012966:	f000 ffd9 	bl	801391c <rmw_uxrce_init_node_memory>
 801296a:	2205      	movs	r2, #5
 801296c:	4956      	ldr	r1, [pc, #344]	; (8012ac8 <rmw_init+0x21c>)
 801296e:	4857      	ldr	r0, [pc, #348]	; (8012acc <rmw_init+0x220>)
 8012970:	f000 ffb4 	bl	80138dc <rmw_uxrce_init_subscription_memory>
 8012974:	220a      	movs	r2, #10
 8012976:	4956      	ldr	r1, [pc, #344]	; (8012ad0 <rmw_init+0x224>)
 8012978:	4856      	ldr	r0, [pc, #344]	; (8012ad4 <rmw_init+0x228>)
 801297a:	f000 ff8f 	bl	801389c <rmw_uxrce_init_publisher_memory>
 801297e:	2202      	movs	r2, #2
 8012980:	4955      	ldr	r1, [pc, #340]	; (8012ad8 <rmw_init+0x22c>)
 8012982:	4856      	ldr	r0, [pc, #344]	; (8012adc <rmw_init+0x230>)
 8012984:	f000 ff4a 	bl	801381c <rmw_uxrce_init_service_memory>
 8012988:	2201      	movs	r2, #1
 801298a:	4955      	ldr	r1, [pc, #340]	; (8012ae0 <rmw_init+0x234>)
 801298c:	4855      	ldr	r0, [pc, #340]	; (8012ae4 <rmw_init+0x238>)
 801298e:	f000 ff65 	bl	801385c <rmw_uxrce_init_client_memory>
 8012992:	220f      	movs	r2, #15
 8012994:	4954      	ldr	r1, [pc, #336]	; (8012ae8 <rmw_init+0x23c>)
 8012996:	4855      	ldr	r0, [pc, #340]	; (8012aec <rmw_init+0x240>)
 8012998:	f001 f800 	bl	801399c <rmw_uxrce_init_topic_memory>
 801299c:	2203      	movs	r2, #3
 801299e:	4954      	ldr	r1, [pc, #336]	; (8012af0 <rmw_init+0x244>)
 80129a0:	4854      	ldr	r0, [pc, #336]	; (8012af4 <rmw_init+0x248>)
 80129a2:	f001 f83b 	bl	8013a1c <rmw_uxrce_init_init_options_impl_memory>
 80129a6:	2204      	movs	r2, #4
 80129a8:	4953      	ldr	r1, [pc, #332]	; (8012af8 <rmw_init+0x24c>)
 80129aa:	4854      	ldr	r0, [pc, #336]	; (8012afc <rmw_init+0x250>)
 80129ac:	f001 f856 	bl	8013a5c <rmw_uxrce_init_wait_set_memory>
 80129b0:	4953      	ldr	r1, [pc, #332]	; (8012b00 <rmw_init+0x254>)
 80129b2:	4854      	ldr	r0, [pc, #336]	; (8012b04 <rmw_init+0x258>)
 80129b4:	2204      	movs	r2, #4
 80129b6:	f001 f871 	bl	8013a9c <rmw_uxrce_init_guard_condition_memory>
 80129ba:	4642      	mov	r2, r8
 80129bc:	6d69      	ldr	r1, [r5, #84]	; 0x54
 80129be:	6ef0      	ldr	r0, [r6, #108]	; 0x6c
 80129c0:	f000 fd92 	bl	80134e8 <rmw_uxrce_transport_init>
 80129c4:	4607      	mov	r7, r0
 80129c6:	2800      	cmp	r0, #0
 80129c8:	d158      	bne.n	8012a7c <rmw_init+0x1d0>
 80129ca:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 80129cc:	f504 7528 	add.w	r5, r4, #672	; 0x2a0
 80129d0:	f504 7122 	add.w	r1, r4, #648	; 0x288
 80129d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80129d6:	4628      	mov	r0, r5
 80129d8:	f001 feda 	bl	8014790 <uxr_init_session>
 80129dc:	4622      	mov	r2, r4
 80129de:	494a      	ldr	r1, [pc, #296]	; (8012b08 <rmw_init+0x25c>)
 80129e0:	4628      	mov	r0, r5
 80129e2:	f001 fef9 	bl	80147d8 <uxr_set_topic_callback>
 80129e6:	463a      	mov	r2, r7
 80129e8:	4948      	ldr	r1, [pc, #288]	; (8012b0c <rmw_init+0x260>)
 80129ea:	4628      	mov	r0, r5
 80129ec:	f001 fef0 	bl	80147d0 <uxr_set_status_callback>
 80129f0:	463a      	mov	r2, r7
 80129f2:	4947      	ldr	r1, [pc, #284]	; (8012b10 <rmw_init+0x264>)
 80129f4:	4628      	mov	r0, r5
 80129f6:	f001 fef3 	bl	80147e0 <uxr_set_request_callback>
 80129fa:	463a      	mov	r2, r7
 80129fc:	4945      	ldr	r1, [pc, #276]	; (8012b14 <rmw_init+0x268>)
 80129fe:	4628      	mov	r0, r5
 8012a00:	f001 fef2 	bl	80147e8 <uxr_set_reply_callback>
 8012a04:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8012a08:	2304      	movs	r3, #4
 8012a0a:	f504 7165 	add.w	r1, r4, #916	; 0x394
 8012a0e:	0092      	lsls	r2, r2, #2
 8012a10:	4628      	mov	r0, r5
 8012a12:	f001 ff29 	bl	8014868 <uxr_create_input_reliable_stream>
 8012a16:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8012a1a:	2304      	movs	r3, #4
 8012a1c:	f604 3194 	addw	r1, r4, #2964	; 0xb94
 8012a20:	0092      	lsls	r2, r2, #2
 8012a22:	f8c4 0374 	str.w	r0, [r4, #884]	; 0x374
 8012a26:	4628      	mov	r0, r5
 8012a28:	f001 fef4 	bl	8014814 <uxr_create_output_reliable_stream>
 8012a2c:	f8c4 0378 	str.w	r0, [r4, #888]	; 0x378
 8012a30:	4628      	mov	r0, r5
 8012a32:	f001 ff13 	bl	801485c <uxr_create_input_best_effort_stream>
 8012a36:	f241 3194 	movw	r1, #5012	; 0x1394
 8012a3a:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
 8012a3e:	4628      	mov	r0, r5
 8012a40:	4421      	add	r1, r4
 8012a42:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8012a46:	f001 fed3 	bl	80147f0 <uxr_create_output_best_effort_stream>
 8012a4a:	f8c4 037c 	str.w	r0, [r4, #892]	; 0x37c
 8012a4e:	4628      	mov	r0, r5
 8012a50:	f002 fc5c 	bl	801530c <uxr_create_session>
 8012a54:	b1f8      	cbz	r0, 8012a96 <rmw_init+0x1ea>
 8012a56:	4638      	mov	r0, r7
 8012a58:	b003      	add	sp, #12
 8012a5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012a5e:	270b      	movs	r7, #11
 8012a60:	4638      	mov	r0, r7
 8012a62:	b003      	add	sp, #12
 8012a64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012a68:	2701      	movs	r7, #1
 8012a6a:	4638      	mov	r0, r7
 8012a6c:	b003      	add	sp, #12
 8012a6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012a72:	270c      	movs	r7, #12
 8012a74:	4638      	mov	r0, r7
 8012a76:	b003      	add	sp, #12
 8012a78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012a7c:	4648      	mov	r0, r9
 8012a7e:	f001 fc93 	bl	80143a8 <uxr_close_custom_transport>
 8012a82:	4621      	mov	r1, r4
 8012a84:	480c      	ldr	r0, [pc, #48]	; (8012ab8 <rmw_init+0x20c>)
 8012a86:	f005 fb81 	bl	801818c <put_memory>
 8012a8a:	4638      	mov	r0, r7
 8012a8c:	f8c6 806c 	str.w	r8, [r6, #108]	; 0x6c
 8012a90:	b003      	add	sp, #12
 8012a92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012a96:	4648      	mov	r0, r9
 8012a98:	f001 fc86 	bl	80143a8 <uxr_close_custom_transport>
 8012a9c:	4621      	mov	r1, r4
 8012a9e:	4806      	ldr	r0, [pc, #24]	; (8012ab8 <rmw_init+0x20c>)
 8012aa0:	f005 fb74 	bl	801818c <put_memory>
 8012aa4:	66f7      	str	r7, [r6, #108]	; 0x6c
 8012aa6:	2701      	movs	r7, #1
 8012aa8:	e7d5      	b.n	8012a56 <rmw_init+0x1aa>
 8012aaa:	bf00      	nop
 8012aac:	0801bed0 	.word	0x0801bed0
 8012ab0:	200108fc 	.word	0x200108fc
 8012ab4:	2000cba8 	.word	0x2000cba8
 8012ab8:	200108ec 	.word	0x200108ec
 8012abc:	2000e150 	.word	0x2000e150
 8012ac0:	2000c104 	.word	0x2000c104
 8012ac4:	200108bc 	.word	0x200108bc
 8012ac8:	20010250 	.word	0x20010250
 8012acc:	2001090c 	.word	0x2001090c
 8012ad0:	2000c1a8 	.word	0x2000c1a8
 8012ad4:	200108cc 	.word	0x200108cc
 8012ad8:	2000ca18 	.word	0x2000ca18
 8012adc:	200108dc 	.word	0x200108dc
 8012ae0:	2000bf38 	.word	0x2000bf38
 8012ae4:	2000bf28 	.word	0x2000bf28
 8012ae8:	20010688 	.word	0x20010688
 8012aec:	2001091c 	.word	0x2001091c
 8012af0:	2000c080 	.word	0x2000c080
 8012af4:	200108ac 	.word	0x200108ac
 8012af8:	2001082c 	.word	0x2001082c
 8012afc:	2001092c 	.word	0x2001092c
 8012b00:	2000c000 	.word	0x2000c000
 8012b04:	2001089c 	.word	0x2001089c
 8012b08:	08017fa5 	.word	0x08017fa5
 8012b0c:	08017f9d 	.word	0x08017f9d
 8012b10:	0801803d 	.word	0x0801803d
 8012b14:	080180d9 	.word	0x080180d9

08012b18 <rmw_context_fini>:
 8012b18:	4b17      	ldr	r3, [pc, #92]	; (8012b78 <rmw_context_fini+0x60>)
 8012b1a:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 8012b1c:	b570      	push	{r4, r5, r6, lr}
 8012b1e:	681c      	ldr	r4, [r3, #0]
 8012b20:	4605      	mov	r5, r0
 8012b22:	b334      	cbz	r4, 8012b72 <rmw_context_fini+0x5a>
 8012b24:	2600      	movs	r6, #0
 8012b26:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 8012b2a:	6902      	ldr	r2, [r0, #16]
 8012b2c:	428a      	cmp	r2, r1
 8012b2e:	d018      	beq.n	8012b62 <rmw_context_fini+0x4a>
 8012b30:	2c00      	cmp	r4, #0
 8012b32:	d1f8      	bne.n	8012b26 <rmw_context_fini+0xe>
 8012b34:	b189      	cbz	r1, 8012b5a <rmw_context_fini+0x42>
 8012b36:	f8d1 3388 	ldr.w	r3, [r1, #904]	; 0x388
 8012b3a:	f501 7028 	add.w	r0, r1, #672	; 0x2a0
 8012b3e:	789b      	ldrb	r3, [r3, #2]
 8012b40:	2b01      	cmp	r3, #1
 8012b42:	bf14      	ite	ne
 8012b44:	210a      	movne	r1, #10
 8012b46:	2100      	moveq	r1, #0
 8012b48:	f002 fbb8 	bl	80152bc <uxr_delete_session_retries>
 8012b4c:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 8012b4e:	f000 ffc5 	bl	8013adc <rmw_uxrce_fini_session_memory>
 8012b52:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 8012b54:	3010      	adds	r0, #16
 8012b56:	f001 fc27 	bl	80143a8 <uxr_close_custom_transport>
 8012b5a:	2300      	movs	r3, #0
 8012b5c:	4630      	mov	r0, r6
 8012b5e:	66eb      	str	r3, [r5, #108]	; 0x6c
 8012b60:	bd70      	pop	{r4, r5, r6, pc}
 8012b62:	3018      	adds	r0, #24
 8012b64:	f000 f89c 	bl	8012ca0 <rmw_destroy_node>
 8012b68:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
 8012b6a:	4606      	mov	r6, r0
 8012b6c:	2c00      	cmp	r4, #0
 8012b6e:	d1da      	bne.n	8012b26 <rmw_context_fini+0xe>
 8012b70:	e7e0      	b.n	8012b34 <rmw_context_fini+0x1c>
 8012b72:	4626      	mov	r6, r4
 8012b74:	e7de      	b.n	8012b34 <rmw_context_fini+0x1c>
 8012b76:	bf00      	nop
 8012b78:	200108bc 	.word	0x200108bc

08012b7c <create_node>:
 8012b7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012b80:	b083      	sub	sp, #12
 8012b82:	2b00      	cmp	r3, #0
 8012b84:	d064      	beq.n	8012c50 <create_node+0xd4>
 8012b86:	4606      	mov	r6, r0
 8012b88:	4838      	ldr	r0, [pc, #224]	; (8012c6c <create_node+0xf0>)
 8012b8a:	460f      	mov	r7, r1
 8012b8c:	4690      	mov	r8, r2
 8012b8e:	461d      	mov	r5, r3
 8012b90:	f005 faec 	bl	801816c <get_memory>
 8012b94:	2800      	cmp	r0, #0
 8012b96:	d05b      	beq.n	8012c50 <create_node+0xd4>
 8012b98:	6884      	ldr	r4, [r0, #8]
 8012b9a:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8012b9c:	f104 092c 	add.w	r9, r4, #44	; 0x2c
 8012ba0:	f104 0518 	add.w	r5, r4, #24
 8012ba4:	6123      	str	r3, [r4, #16]
 8012ba6:	f7ff fdab 	bl	8012700 <rmw_get_implementation_identifier>
 8012baa:	f8c4 9020 	str.w	r9, [r4, #32]
 8012bae:	e9c4 0406 	strd	r0, r4, [r4, #24]
 8012bb2:	4630      	mov	r0, r6
 8012bb4:	f7ed fba4 	bl	8000300 <strlen>
 8012bb8:	1c42      	adds	r2, r0, #1
 8012bba:	2a3c      	cmp	r2, #60	; 0x3c
 8012bbc:	d840      	bhi.n	8012c40 <create_node+0xc4>
 8012bbe:	4648      	mov	r0, r9
 8012bc0:	f104 0968 	add.w	r9, r4, #104	; 0x68
 8012bc4:	4631      	mov	r1, r6
 8012bc6:	f006 fe92 	bl	80198ee <memcpy>
 8012bca:	4638      	mov	r0, r7
 8012bcc:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 8012bd0:	f7ed fb96 	bl	8000300 <strlen>
 8012bd4:	1c42      	adds	r2, r0, #1
 8012bd6:	2a3c      	cmp	r2, #60	; 0x3c
 8012bd8:	d832      	bhi.n	8012c40 <create_node+0xc4>
 8012bda:	4639      	mov	r1, r7
 8012bdc:	4648      	mov	r0, r9
 8012bde:	f006 fe86 	bl	80198ee <memcpy>
 8012be2:	6923      	ldr	r3, [r4, #16]
 8012be4:	2101      	movs	r1, #1
 8012be6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012bea:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	; 0x594
 8012bee:	1842      	adds	r2, r0, r1
 8012bf0:	f8a3 2594 	strh.w	r2, [r3, #1428]	; 0x594
 8012bf4:	f001 fbdc 	bl	80143b0 <uxr_object_id>
 8012bf8:	6160      	str	r0, [r4, #20]
 8012bfa:	783b      	ldrb	r3, [r7, #0]
 8012bfc:	2b2f      	cmp	r3, #47	; 0x2f
 8012bfe:	d12c      	bne.n	8012c5a <create_node+0xde>
 8012c00:	787b      	ldrb	r3, [r7, #1]
 8012c02:	bb53      	cbnz	r3, 8012c5a <create_node+0xde>
 8012c04:	4633      	mov	r3, r6
 8012c06:	4a1a      	ldr	r2, [pc, #104]	; (8012c70 <create_node+0xf4>)
 8012c08:	213c      	movs	r1, #60	; 0x3c
 8012c0a:	481a      	ldr	r0, [pc, #104]	; (8012c74 <create_node+0xf8>)
 8012c0c:	f006 fc20 	bl	8019450 <sniprintf>
 8012c10:	6920      	ldr	r0, [r4, #16]
 8012c12:	2106      	movs	r1, #6
 8012c14:	fa1f f388 	uxth.w	r3, r8
 8012c18:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 8012c1c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8012c20:	9101      	str	r1, [sp, #4]
 8012c22:	4914      	ldr	r1, [pc, #80]	; (8012c74 <create_node+0xf8>)
 8012c24:	9100      	str	r1, [sp, #0]
 8012c26:	6811      	ldr	r1, [r2, #0]
 8012c28:	6962      	ldr	r2, [r4, #20]
 8012c2a:	f001 fa97 	bl	801415c <uxr_buffer_create_participant_bin>
 8012c2e:	4602      	mov	r2, r0
 8012c30:	6920      	ldr	r0, [r4, #16]
 8012c32:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8012c36:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8012c3a:	f001 f8d3 	bl	8013de4 <run_xrce_session>
 8012c3e:	b918      	cbnz	r0, 8012c48 <create_node+0xcc>
 8012c40:	4628      	mov	r0, r5
 8012c42:	2500      	movs	r5, #0
 8012c44:	f000 ff50 	bl	8013ae8 <rmw_uxrce_fini_node_memory>
 8012c48:	4628      	mov	r0, r5
 8012c4a:	b003      	add	sp, #12
 8012c4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012c50:	2500      	movs	r5, #0
 8012c52:	4628      	mov	r0, r5
 8012c54:	b003      	add	sp, #12
 8012c56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012c5a:	463b      	mov	r3, r7
 8012c5c:	4a06      	ldr	r2, [pc, #24]	; (8012c78 <create_node+0xfc>)
 8012c5e:	213c      	movs	r1, #60	; 0x3c
 8012c60:	9600      	str	r6, [sp, #0]
 8012c62:	4804      	ldr	r0, [pc, #16]	; (8012c74 <create_node+0xf8>)
 8012c64:	f006 fbf4 	bl	8019450 <sniprintf>
 8012c68:	e7d2      	b.n	8012c10 <create_node+0x94>
 8012c6a:	bf00      	nop
 8012c6c:	200108bc 	.word	0x200108bc
 8012c70:	0801ba74 	.word	0x0801ba74
 8012c74:	2000bdac 	.word	0x2000bdac
 8012c78:	0801b4e8 	.word	0x0801b4e8

08012c7c <rmw_create_node>:
 8012c7c:	468c      	mov	ip, r1
 8012c7e:	4611      	mov	r1, r2
 8012c80:	f1bc 0f00 	cmp.w	ip, #0
 8012c84:	d00a      	beq.n	8012c9c <rmw_create_node+0x20>
 8012c86:	f89c 3000 	ldrb.w	r3, [ip]
 8012c8a:	b13b      	cbz	r3, 8012c9c <rmw_create_node+0x20>
 8012c8c:	b132      	cbz	r2, 8012c9c <rmw_create_node+0x20>
 8012c8e:	7813      	ldrb	r3, [r2, #0]
 8012c90:	b123      	cbz	r3, 8012c9c <rmw_create_node+0x20>
 8012c92:	4603      	mov	r3, r0
 8012c94:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8012c96:	4660      	mov	r0, ip
 8012c98:	f7ff bf70 	b.w	8012b7c <create_node>
 8012c9c:	2000      	movs	r0, #0
 8012c9e:	4770      	bx	lr

08012ca0 <rmw_destroy_node>:
 8012ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ca2:	b328      	cbz	r0, 8012cf0 <rmw_destroy_node+0x50>
 8012ca4:	4607      	mov	r7, r0
 8012ca6:	6800      	ldr	r0, [r0, #0]
 8012ca8:	b120      	cbz	r0, 8012cb4 <rmw_destroy_node+0x14>
 8012caa:	4b37      	ldr	r3, [pc, #220]	; (8012d88 <rmw_destroy_node+0xe8>)
 8012cac:	6819      	ldr	r1, [r3, #0]
 8012cae:	f7ed fac7 	bl	8000240 <strcmp>
 8012cb2:	b9e8      	cbnz	r0, 8012cf0 <rmw_destroy_node+0x50>
 8012cb4:	687d      	ldr	r5, [r7, #4]
 8012cb6:	b1dd      	cbz	r5, 8012cf0 <rmw_destroy_node+0x50>
 8012cb8:	4b34      	ldr	r3, [pc, #208]	; (8012d8c <rmw_destroy_node+0xec>)
 8012cba:	681c      	ldr	r4, [r3, #0]
 8012cbc:	2c00      	cmp	r4, #0
 8012cbe:	d060      	beq.n	8012d82 <rmw_destroy_node+0xe2>
 8012cc0:	2600      	movs	r6, #0
 8012cc2:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8012cc6:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 8012cca:	429d      	cmp	r5, r3
 8012ccc:	d013      	beq.n	8012cf6 <rmw_destroy_node+0x56>
 8012cce:	2c00      	cmp	r4, #0
 8012cd0:	d1f7      	bne.n	8012cc2 <rmw_destroy_node+0x22>
 8012cd2:	4b2f      	ldr	r3, [pc, #188]	; (8012d90 <rmw_destroy_node+0xf0>)
 8012cd4:	681c      	ldr	r4, [r3, #0]
 8012cd6:	b1c4      	cbz	r4, 8012d0a <rmw_destroy_node+0x6a>
 8012cd8:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8012cdc:	6a0b      	ldr	r3, [r1, #32]
 8012cde:	429d      	cmp	r5, r3
 8012ce0:	d1f9      	bne.n	8012cd6 <rmw_destroy_node+0x36>
 8012ce2:	317c      	adds	r1, #124	; 0x7c
 8012ce4:	4638      	mov	r0, r7
 8012ce6:	f000 fb49 	bl	801337c <rmw_destroy_subscription>
 8012cea:	2801      	cmp	r0, #1
 8012cec:	4606      	mov	r6, r0
 8012cee:	d1f2      	bne.n	8012cd6 <rmw_destroy_node+0x36>
 8012cf0:	2601      	movs	r6, #1
 8012cf2:	4630      	mov	r0, r6
 8012cf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012cf6:	3184      	adds	r1, #132	; 0x84
 8012cf8:	4638      	mov	r0, r7
 8012cfa:	f000 f855 	bl	8012da8 <rmw_destroy_publisher>
 8012cfe:	2801      	cmp	r0, #1
 8012d00:	4606      	mov	r6, r0
 8012d02:	d0f5      	beq.n	8012cf0 <rmw_destroy_node+0x50>
 8012d04:	2c00      	cmp	r4, #0
 8012d06:	d1dc      	bne.n	8012cc2 <rmw_destroy_node+0x22>
 8012d08:	e7e3      	b.n	8012cd2 <rmw_destroy_node+0x32>
 8012d0a:	4b22      	ldr	r3, [pc, #136]	; (8012d94 <rmw_destroy_node+0xf4>)
 8012d0c:	681c      	ldr	r4, [r3, #0]
 8012d0e:	b16c      	cbz	r4, 8012d2c <rmw_destroy_node+0x8c>
 8012d10:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8012d14:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 8012d16:	429d      	cmp	r5, r3
 8012d18:	d1f9      	bne.n	8012d0e <rmw_destroy_node+0x6e>
 8012d1a:	317c      	adds	r1, #124	; 0x7c
 8012d1c:	4638      	mov	r0, r7
 8012d1e:	f000 fac1 	bl	80132a4 <rmw_destroy_service>
 8012d22:	2801      	cmp	r0, #1
 8012d24:	4606      	mov	r6, r0
 8012d26:	d0e3      	beq.n	8012cf0 <rmw_destroy_node+0x50>
 8012d28:	2c00      	cmp	r4, #0
 8012d2a:	d1f1      	bne.n	8012d10 <rmw_destroy_node+0x70>
 8012d2c:	4b1a      	ldr	r3, [pc, #104]	; (8012d98 <rmw_destroy_node+0xf8>)
 8012d2e:	681c      	ldr	r4, [r3, #0]
 8012d30:	b16c      	cbz	r4, 8012d4e <rmw_destroy_node+0xae>
 8012d32:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8012d36:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 8012d38:	429d      	cmp	r5, r3
 8012d3a:	d1f9      	bne.n	8012d30 <rmw_destroy_node+0x90>
 8012d3c:	317c      	adds	r1, #124	; 0x7c
 8012d3e:	4638      	mov	r0, r7
 8012d40:	f7ff fc7c 	bl	801263c <rmw_destroy_client>
 8012d44:	2801      	cmp	r0, #1
 8012d46:	4606      	mov	r6, r0
 8012d48:	d0d2      	beq.n	8012cf0 <rmw_destroy_node+0x50>
 8012d4a:	2c00      	cmp	r4, #0
 8012d4c:	d1f1      	bne.n	8012d32 <rmw_destroy_node+0x92>
 8012d4e:	6928      	ldr	r0, [r5, #16]
 8012d50:	696a      	ldr	r2, [r5, #20]
 8012d52:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8012d56:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8012d5a:	6819      	ldr	r1, [r3, #0]
 8012d5c:	f001 f9b2 	bl	80140c4 <uxr_buffer_delete_entity>
 8012d60:	4602      	mov	r2, r0
 8012d62:	6928      	ldr	r0, [r5, #16]
 8012d64:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8012d68:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8012d6c:	f001 f83a 	bl	8013de4 <run_xrce_session>
 8012d70:	4603      	mov	r3, r0
 8012d72:	4638      	mov	r0, r7
 8012d74:	2b00      	cmp	r3, #0
 8012d76:	bf08      	it	eq
 8012d78:	2602      	moveq	r6, #2
 8012d7a:	f000 feb5 	bl	8013ae8 <rmw_uxrce_fini_node_memory>
 8012d7e:	4630      	mov	r0, r6
 8012d80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012d82:	4626      	mov	r6, r4
 8012d84:	e7a5      	b.n	8012cd2 <rmw_destroy_node+0x32>
 8012d86:	bf00      	nop
 8012d88:	0801bed0 	.word	0x0801bed0
 8012d8c:	200108cc 	.word	0x200108cc
 8012d90:	2001090c 	.word	0x2001090c
 8012d94:	200108dc 	.word	0x200108dc
 8012d98:	2000bf28 	.word	0x2000bf28

08012d9c <rmw_node_get_graph_guard_condition>:
 8012d9c:	6843      	ldr	r3, [r0, #4]
 8012d9e:	6918      	ldr	r0, [r3, #16]
 8012da0:	f500 705a 	add.w	r0, r0, #872	; 0x368
 8012da4:	4770      	bx	lr
 8012da6:	bf00      	nop

08012da8 <rmw_destroy_publisher>:
 8012da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012dac:	b128      	cbz	r0, 8012dba <rmw_destroy_publisher+0x12>
 8012dae:	4604      	mov	r4, r0
 8012db0:	6800      	ldr	r0, [r0, #0]
 8012db2:	460d      	mov	r5, r1
 8012db4:	f001 f8e2 	bl	8013f7c <is_uxrce_rmw_identifier_valid>
 8012db8:	b918      	cbnz	r0, 8012dc2 <rmw_destroy_publisher+0x1a>
 8012dba:	2401      	movs	r4, #1
 8012dbc:	4620      	mov	r0, r4
 8012dbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012dc2:	6863      	ldr	r3, [r4, #4]
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	d0f8      	beq.n	8012dba <rmw_destroy_publisher+0x12>
 8012dc8:	fab5 f485 	clz	r4, r5
 8012dcc:	0964      	lsrs	r4, r4, #5
 8012dce:	2d00      	cmp	r5, #0
 8012dd0:	d0f3      	beq.n	8012dba <rmw_destroy_publisher+0x12>
 8012dd2:	6828      	ldr	r0, [r5, #0]
 8012dd4:	f001 f8d2 	bl	8013f7c <is_uxrce_rmw_identifier_valid>
 8012dd8:	2800      	cmp	r0, #0
 8012dda:	d0ee      	beq.n	8012dba <rmw_destroy_publisher+0x12>
 8012ddc:	686e      	ldr	r6, [r5, #4]
 8012dde:	2e00      	cmp	r6, #0
 8012de0:	d0eb      	beq.n	8012dba <rmw_destroy_publisher+0x12>
 8012de2:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8012de4:	f8d6 7080 	ldr.w	r7, [r6, #128]	; 0x80
 8012de8:	f005 fa0e 	bl	8018208 <destroy_topic>
 8012dec:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8012df0:	6972      	ldr	r2, [r6, #20]
 8012df2:	6918      	ldr	r0, [r3, #16]
 8012df4:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8012df8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8012dfc:	6819      	ldr	r1, [r3, #0]
 8012dfe:	f001 f961 	bl	80140c4 <uxr_buffer_delete_entity>
 8012e02:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8012e06:	4680      	mov	r8, r0
 8012e08:	6932      	ldr	r2, [r6, #16]
 8012e0a:	6918      	ldr	r0, [r3, #16]
 8012e0c:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8012e10:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8012e14:	6819      	ldr	r1, [r3, #0]
 8012e16:	f001 f955 	bl	80140c4 <uxr_buffer_delete_entity>
 8012e1a:	4606      	mov	r6, r0
 8012e1c:	6938      	ldr	r0, [r7, #16]
 8012e1e:	4642      	mov	r2, r8
 8012e20:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8012e24:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8012e28:	f000 ffdc 	bl	8013de4 <run_xrce_session>
 8012e2c:	693f      	ldr	r7, [r7, #16]
 8012e2e:	4632      	mov	r2, r6
 8012e30:	4606      	mov	r6, r0
 8012e32:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 8012e36:	4638      	mov	r0, r7
 8012e38:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 8012e3c:	f000 ffd2 	bl	8013de4 <run_xrce_session>
 8012e40:	b126      	cbz	r6, 8012e4c <rmw_destroy_publisher+0xa4>
 8012e42:	b118      	cbz	r0, 8012e4c <rmw_destroy_publisher+0xa4>
 8012e44:	4628      	mov	r0, r5
 8012e46:	f000 fe67 	bl	8013b18 <rmw_uxrce_fini_publisher_memory>
 8012e4a:	e7b7      	b.n	8012dbc <rmw_destroy_publisher+0x14>
 8012e4c:	2402      	movs	r4, #2
 8012e4e:	e7f9      	b.n	8012e44 <rmw_destroy_publisher+0x9c>

08012e50 <rmw_send_request>:
 8012e50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012e54:	4604      	mov	r4, r0
 8012e56:	6800      	ldr	r0, [r0, #0]
 8012e58:	b08b      	sub	sp, #44	; 0x2c
 8012e5a:	460e      	mov	r6, r1
 8012e5c:	4615      	mov	r5, r2
 8012e5e:	b128      	cbz	r0, 8012e6c <rmw_send_request+0x1c>
 8012e60:	4b21      	ldr	r3, [pc, #132]	; (8012ee8 <rmw_send_request+0x98>)
 8012e62:	6819      	ldr	r1, [r3, #0]
 8012e64:	f7ed f9ec 	bl	8000240 <strcmp>
 8012e68:	2800      	cmp	r0, #0
 8012e6a:	d139      	bne.n	8012ee0 <rmw_send_request+0x90>
 8012e6c:	6864      	ldr	r4, [r4, #4]
 8012e6e:	2700      	movs	r7, #0
 8012e70:	6963      	ldr	r3, [r4, #20]
 8012e72:	f8d4 8078 	ldr.w	r8, [r4, #120]	; 0x78
 8012e76:	689b      	ldr	r3, [r3, #8]
 8012e78:	4798      	blx	r3
 8012e7a:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8012e7e:	4630      	mov	r0, r6
 8012e80:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012e84:	4798      	blx	r3
 8012e86:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8012e8a:	9000      	str	r0, [sp, #0]
 8012e8c:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8012e90:	6922      	ldr	r2, [r4, #16]
 8012e92:	ab02      	add	r3, sp, #8
 8012e94:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8012e96:	f003 fb41 	bl	801651c <uxr_prepare_output_stream>
 8012e9a:	e9c5 0700 	strd	r0, r7, [r5]
 8012e9e:	b198      	cbz	r0, 8012ec8 <rmw_send_request+0x78>
 8012ea0:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8012ea4:	a902      	add	r1, sp, #8
 8012ea6:	4630      	mov	r0, r6
 8012ea8:	4798      	blx	r3
 8012eaa:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
 8012eae:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8012eb2:	2b01      	cmp	r3, #1
 8012eb4:	d00c      	beq.n	8012ed0 <rmw_send_request+0x80>
 8012eb6:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8012eb8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8012ebc:	f002 f8b4 	bl	8015028 <uxr_run_session_until_confirm_delivery>
 8012ec0:	4638      	mov	r0, r7
 8012ec2:	b00b      	add	sp, #44	; 0x2c
 8012ec4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012ec8:	2001      	movs	r0, #1
 8012eca:	b00b      	add	sp, #44	; 0x2c
 8012ecc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012ed0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8012ed4:	f001 fcee 	bl	80148b4 <uxr_flash_output_streams>
 8012ed8:	4638      	mov	r0, r7
 8012eda:	b00b      	add	sp, #44	; 0x2c
 8012edc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012ee0:	200c      	movs	r0, #12
 8012ee2:	b00b      	add	sp, #44	; 0x2c
 8012ee4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012ee8:	0801bed0 	.word	0x0801bed0

08012eec <rmw_take_request>:
 8012eec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012ef0:	4605      	mov	r5, r0
 8012ef2:	6800      	ldr	r0, [r0, #0]
 8012ef4:	b089      	sub	sp, #36	; 0x24
 8012ef6:	460c      	mov	r4, r1
 8012ef8:	4690      	mov	r8, r2
 8012efa:	461e      	mov	r6, r3
 8012efc:	b128      	cbz	r0, 8012f0a <rmw_take_request+0x1e>
 8012efe:	4b28      	ldr	r3, [pc, #160]	; (8012fa0 <rmw_take_request+0xb4>)
 8012f00:	6819      	ldr	r1, [r3, #0]
 8012f02:	f7ed f99d 	bl	8000240 <strcmp>
 8012f06:	2800      	cmp	r0, #0
 8012f08:	d146      	bne.n	8012f98 <rmw_take_request+0xac>
 8012f0a:	b10e      	cbz	r6, 8012f10 <rmw_take_request+0x24>
 8012f0c:	2300      	movs	r3, #0
 8012f0e:	7033      	strb	r3, [r6, #0]
 8012f10:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8012f14:	f000 fee8 	bl	8013ce8 <rmw_uxrce_clean_expired_static_input_buffer>
 8012f18:	4648      	mov	r0, r9
 8012f1a:	f000 febb 	bl	8013c94 <rmw_uxrce_find_static_input_buffer_by_owner>
 8012f1e:	4607      	mov	r7, r0
 8012f20:	b3b0      	cbz	r0, 8012f90 <rmw_take_request+0xa4>
 8012f22:	6885      	ldr	r5, [r0, #8]
 8012f24:	f8d5 2838 	ldr.w	r2, [r5, #2104]	; 0x838
 8012f28:	f8d5 383c 	ldr.w	r3, [r5, #2108]	; 0x83c
 8012f2c:	e9c4 3208 	strd	r3, r2, [r4, #32]
 8012f30:	f895 3837 	ldrb.w	r3, [r5, #2103]	; 0x837
 8012f34:	7423      	strb	r3, [r4, #16]
 8012f36:	f8b5 2834 	ldrh.w	r2, [r5, #2100]	; 0x834
 8012f3a:	f895 3836 	ldrb.w	r3, [r5, #2102]	; 0x836
 8012f3e:	f8a4 2011 	strh.w	r2, [r4, #17]
 8012f42:	74e3      	strb	r3, [r4, #19]
 8012f44:	f8d5 1828 	ldr.w	r1, [r5, #2088]	; 0x828
 8012f48:	f8d5 282c 	ldr.w	r2, [r5, #2092]	; 0x82c
 8012f4c:	f8d5 3830 	ldr.w	r3, [r5, #2096]	; 0x830
 8012f50:	6161      	str	r1, [r4, #20]
 8012f52:	61a2      	str	r2, [r4, #24]
 8012f54:	61e3      	str	r3, [r4, #28]
 8012f56:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8012f5a:	689b      	ldr	r3, [r3, #8]
 8012f5c:	4798      	blx	r3
 8012f5e:	6844      	ldr	r4, [r0, #4]
 8012f60:	f8d5 2810 	ldr.w	r2, [r5, #2064]	; 0x810
 8012f64:	f105 0110 	add.w	r1, r5, #16
 8012f68:	4668      	mov	r0, sp
 8012f6a:	f7fa ff8d 	bl	800de88 <ucdr_init_buffer>
 8012f6e:	4641      	mov	r1, r8
 8012f70:	68e3      	ldr	r3, [r4, #12]
 8012f72:	4668      	mov	r0, sp
 8012f74:	4798      	blx	r3
 8012f76:	4639      	mov	r1, r7
 8012f78:	4604      	mov	r4, r0
 8012f7a:	480a      	ldr	r0, [pc, #40]	; (8012fa4 <rmw_take_request+0xb8>)
 8012f7c:	f005 f906 	bl	801818c <put_memory>
 8012f80:	b106      	cbz	r6, 8012f84 <rmw_take_request+0x98>
 8012f82:	7034      	strb	r4, [r6, #0]
 8012f84:	f084 0001 	eor.w	r0, r4, #1
 8012f88:	b2c0      	uxtb	r0, r0
 8012f8a:	b009      	add	sp, #36	; 0x24
 8012f8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012f90:	2001      	movs	r0, #1
 8012f92:	b009      	add	sp, #36	; 0x24
 8012f94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012f98:	200c      	movs	r0, #12
 8012f9a:	b009      	add	sp, #36	; 0x24
 8012f9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012fa0:	0801bed0 	.word	0x0801bed0
 8012fa4:	200108fc 	.word	0x200108fc

08012fa8 <rmw_send_response>:
 8012fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012faa:	4605      	mov	r5, r0
 8012fac:	6800      	ldr	r0, [r0, #0]
 8012fae:	b091      	sub	sp, #68	; 0x44
 8012fb0:	460c      	mov	r4, r1
 8012fb2:	4616      	mov	r6, r2
 8012fb4:	b128      	cbz	r0, 8012fc2 <rmw_send_response+0x1a>
 8012fb6:	4b29      	ldr	r3, [pc, #164]	; (801305c <rmw_send_response+0xb4>)
 8012fb8:	6819      	ldr	r1, [r3, #0]
 8012fba:	f7ed f941 	bl	8000240 <strcmp>
 8012fbe:	2800      	cmp	r0, #0
 8012fc0:	d141      	bne.n	8013046 <rmw_send_response+0x9e>
 8012fc2:	686d      	ldr	r5, [r5, #4]
 8012fc4:	68a1      	ldr	r1, [r4, #8]
 8012fc6:	6860      	ldr	r0, [r4, #4]
 8012fc8:	6faf      	ldr	r7, [r5, #120]	; 0x78
 8012fca:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8012fce:	9307      	str	r3, [sp, #28]
 8012fd0:	4623      	mov	r3, r4
 8012fd2:	9206      	str	r2, [sp, #24]
 8012fd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012fd8:	789b      	ldrb	r3, [r3, #2]
 8012fda:	f88d 2017 	strb.w	r2, [sp, #23]
 8012fde:	f88d 3016 	strb.w	r3, [sp, #22]
 8012fe2:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 8012fe6:	68e2      	ldr	r2, [r4, #12]
 8012fe8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8012fec:	ab02      	add	r3, sp, #8
 8012fee:	696c      	ldr	r4, [r5, #20]
 8012ff0:	c307      	stmia	r3!, {r0, r1, r2}
 8012ff2:	68e3      	ldr	r3, [r4, #12]
 8012ff4:	4798      	blx	r3
 8012ff6:	6844      	ldr	r4, [r0, #4]
 8012ff8:	4630      	mov	r0, r6
 8012ffa:	6923      	ldr	r3, [r4, #16]
 8012ffc:	4798      	blx	r3
 8012ffe:	f100 0318 	add.w	r3, r0, #24
 8013002:	6938      	ldr	r0, [r7, #16]
 8013004:	9300      	str	r3, [sp, #0]
 8013006:	ab08      	add	r3, sp, #32
 8013008:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801300c:	692a      	ldr	r2, [r5, #16]
 801300e:	6f29      	ldr	r1, [r5, #112]	; 0x70
 8013010:	f003 fa84 	bl	801651c <uxr_prepare_output_stream>
 8013014:	b910      	cbnz	r0, 801301c <rmw_send_response+0x74>
 8013016:	2001      	movs	r0, #1
 8013018:	b011      	add	sp, #68	; 0x44
 801301a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801301c:	a902      	add	r1, sp, #8
 801301e:	a808      	add	r0, sp, #32
 8013020:	f004 f9a6 	bl	8017370 <uxr_serialize_SampleIdentity>
 8013024:	68a3      	ldr	r3, [r4, #8]
 8013026:	a908      	add	r1, sp, #32
 8013028:	4630      	mov	r0, r6
 801302a:	4798      	blx	r3
 801302c:	f895 3072 	ldrb.w	r3, [r5, #114]	; 0x72
 8013030:	6938      	ldr	r0, [r7, #16]
 8013032:	2b01      	cmp	r3, #1
 8013034:	d00a      	beq.n	801304c <rmw_send_response+0xa4>
 8013036:	6f69      	ldr	r1, [r5, #116]	; 0x74
 8013038:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801303c:	f001 fff4 	bl	8015028 <uxr_run_session_until_confirm_delivery>
 8013040:	2000      	movs	r0, #0
 8013042:	b011      	add	sp, #68	; 0x44
 8013044:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013046:	200c      	movs	r0, #12
 8013048:	b011      	add	sp, #68	; 0x44
 801304a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801304c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8013050:	f001 fc30 	bl	80148b4 <uxr_flash_output_streams>
 8013054:	2000      	movs	r0, #0
 8013056:	b011      	add	sp, #68	; 0x44
 8013058:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801305a:	bf00      	nop
 801305c:	0801bed0 	.word	0x0801bed0

08013060 <rmw_take_response>:
 8013060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013064:	4604      	mov	r4, r0
 8013066:	6800      	ldr	r0, [r0, #0]
 8013068:	b088      	sub	sp, #32
 801306a:	460f      	mov	r7, r1
 801306c:	4690      	mov	r8, r2
 801306e:	461d      	mov	r5, r3
 8013070:	b120      	cbz	r0, 801307c <rmw_take_response+0x1c>
 8013072:	4b1d      	ldr	r3, [pc, #116]	; (80130e8 <rmw_take_response+0x88>)
 8013074:	6819      	ldr	r1, [r3, #0]
 8013076:	f7ed f8e3 	bl	8000240 <strcmp>
 801307a:	bb68      	cbnz	r0, 80130d8 <rmw_take_response+0x78>
 801307c:	b10d      	cbz	r5, 8013082 <rmw_take_response+0x22>
 801307e:	2300      	movs	r3, #0
 8013080:	702b      	strb	r3, [r5, #0]
 8013082:	6864      	ldr	r4, [r4, #4]
 8013084:	f000 fe30 	bl	8013ce8 <rmw_uxrce_clean_expired_static_input_buffer>
 8013088:	4620      	mov	r0, r4
 801308a:	f000 fe03 	bl	8013c94 <rmw_uxrce_find_static_input_buffer_by_owner>
 801308e:	4606      	mov	r6, r0
 8013090:	b330      	cbz	r0, 80130e0 <rmw_take_response+0x80>
 8013092:	6963      	ldr	r3, [r4, #20]
 8013094:	6884      	ldr	r4, [r0, #8]
 8013096:	68db      	ldr	r3, [r3, #12]
 8013098:	f504 6203 	add.w	r2, r4, #2096	; 0x830
 801309c:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 80130a0:	e9c7 0108 	strd	r0, r1, [r7, #32]
 80130a4:	4798      	blx	r3
 80130a6:	6847      	ldr	r7, [r0, #4]
 80130a8:	f8d4 2810 	ldr.w	r2, [r4, #2064]	; 0x810
 80130ac:	f104 0110 	add.w	r1, r4, #16
 80130b0:	4668      	mov	r0, sp
 80130b2:	f7fa fee9 	bl	800de88 <ucdr_init_buffer>
 80130b6:	4641      	mov	r1, r8
 80130b8:	68fb      	ldr	r3, [r7, #12]
 80130ba:	4668      	mov	r0, sp
 80130bc:	4798      	blx	r3
 80130be:	4631      	mov	r1, r6
 80130c0:	4604      	mov	r4, r0
 80130c2:	480a      	ldr	r0, [pc, #40]	; (80130ec <rmw_take_response+0x8c>)
 80130c4:	f005 f862 	bl	801818c <put_memory>
 80130c8:	b105      	cbz	r5, 80130cc <rmw_take_response+0x6c>
 80130ca:	702c      	strb	r4, [r5, #0]
 80130cc:	f084 0001 	eor.w	r0, r4, #1
 80130d0:	b2c0      	uxtb	r0, r0
 80130d2:	b008      	add	sp, #32
 80130d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80130d8:	200c      	movs	r0, #12
 80130da:	b008      	add	sp, #32
 80130dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80130e0:	2001      	movs	r0, #1
 80130e2:	b008      	add	sp, #32
 80130e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80130e8:	0801bed0 	.word	0x0801bed0
 80130ec:	200108fc 	.word	0x200108fc

080130f0 <rmw_create_service>:
 80130f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130f4:	b091      	sub	sp, #68	; 0x44
 80130f6:	2900      	cmp	r1, #0
 80130f8:	f000 80bb 	beq.w	8013272 <rmw_create_service+0x182>
 80130fc:	4606      	mov	r6, r0
 80130fe:	2800      	cmp	r0, #0
 8013100:	f000 80b7 	beq.w	8013272 <rmw_create_service+0x182>
 8013104:	4614      	mov	r4, r2
 8013106:	6800      	ldr	r0, [r0, #0]
 8013108:	4689      	mov	r9, r1
 801310a:	461d      	mov	r5, r3
 801310c:	f000 ff36 	bl	8013f7c <is_uxrce_rmw_identifier_valid>
 8013110:	2c00      	cmp	r4, #0
 8013112:	f000 80ae 	beq.w	8013272 <rmw_create_service+0x182>
 8013116:	f080 0001 	eor.w	r0, r0, #1
 801311a:	b2c0      	uxtb	r0, r0
 801311c:	2800      	cmp	r0, #0
 801311e:	f040 80a8 	bne.w	8013272 <rmw_create_service+0x182>
 8013122:	7823      	ldrb	r3, [r4, #0]
 8013124:	2b00      	cmp	r3, #0
 8013126:	f000 80a4 	beq.w	8013272 <rmw_create_service+0x182>
 801312a:	2d00      	cmp	r5, #0
 801312c:	f000 80a1 	beq.w	8013272 <rmw_create_service+0x182>
 8013130:	4856      	ldr	r0, [pc, #344]	; (801328c <rmw_create_service+0x19c>)
 8013132:	f8d6 8004 	ldr.w	r8, [r6, #4]
 8013136:	f005 f819 	bl	801816c <get_memory>
 801313a:	4606      	mov	r6, r0
 801313c:	2800      	cmp	r0, #0
 801313e:	f000 8099 	beq.w	8013274 <rmw_create_service+0x184>
 8013142:	6887      	ldr	r7, [r0, #8]
 8013144:	f107 0a88 	add.w	sl, r7, #136	; 0x88
 8013148:	f8c7 7080 	str.w	r7, [r7, #128]	; 0x80
 801314c:	f7ff fad8 	bl	8012700 <rmw_get_implementation_identifier>
 8013150:	67f8      	str	r0, [r7, #124]	; 0x7c
 8013152:	f8c7 a084 	str.w	sl, [r7, #132]	; 0x84
 8013156:	4620      	mov	r0, r4
 8013158:	f7ed f8d2 	bl	8000300 <strlen>
 801315c:	1c42      	adds	r2, r0, #1
 801315e:	f107 067c 	add.w	r6, r7, #124	; 0x7c
 8013162:	2a3c      	cmp	r2, #60	; 0x3c
 8013164:	f200 808a 	bhi.w	801327c <rmw_create_service+0x18c>
 8013168:	4621      	mov	r1, r4
 801316a:	4650      	mov	r0, sl
 801316c:	f006 fbbf 	bl	80198ee <memcpy>
 8013170:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8013174:	4629      	mov	r1, r5
 8013176:	2250      	movs	r2, #80	; 0x50
 8013178:	f107 0020 	add.w	r0, r7, #32
 801317c:	f8c7 8078 	str.w	r8, [r7, #120]	; 0x78
 8013180:	677b      	str	r3, [r7, #116]	; 0x74
 8013182:	f006 fbb4 	bl	80198ee <memcpy>
 8013186:	4648      	mov	r0, r9
 8013188:	4941      	ldr	r1, [pc, #260]	; (8013290 <rmw_create_service+0x1a0>)
 801318a:	f7f9 f8e5 	bl	800c358 <get_service_typesupport_handle>
 801318e:	2800      	cmp	r0, #0
 8013190:	d074      	beq.n	801327c <rmw_create_service+0x18c>
 8013192:	6843      	ldr	r3, [r0, #4]
 8013194:	617b      	str	r3, [r7, #20]
 8013196:	2b00      	cmp	r3, #0
 8013198:	d070      	beq.n	801327c <rmw_create_service+0x18c>
 801319a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801319e:	2108      	movs	r1, #8
 80131a0:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 8013298 <rmw_create_service+0x1a8>
 80131a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80131a8:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 801329c <rmw_create_service+0x1ac>
 80131ac:	f8b3 05a2 	ldrh.w	r0, [r3, #1442]	; 0x5a2
 80131b0:	1c42      	adds	r2, r0, #1
 80131b2:	f8a3 25a2 	strh.w	r2, [r3, #1442]	; 0x5a2
 80131b6:	f001 f8fb 	bl	80143b0 <uxr_object_id>
 80131ba:	2364      	movs	r3, #100	; 0x64
 80131bc:	6138      	str	r0, [r7, #16]
 80131be:	4652      	mov	r2, sl
 80131c0:	4649      	mov	r1, r9
 80131c2:	6978      	ldr	r0, [r7, #20]
 80131c4:	f000 fe74 	bl	8013eb0 <generate_service_types>
 80131c8:	2800      	cmp	r0, #0
 80131ca:	d057      	beq.n	801327c <rmw_create_service+0x18c>
 80131cc:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 80132a0 <rmw_create_service+0x1b0>
 80131d0:	233c      	movs	r3, #60	; 0x3c
 80131d2:	4a30      	ldr	r2, [pc, #192]	; (8013294 <rmw_create_service+0x1a4>)
 80131d4:	4620      	mov	r0, r4
 80131d6:	4659      	mov	r1, fp
 80131d8:	f000 fe38 	bl	8013e4c <generate_service_topics>
 80131dc:	2800      	cmp	r0, #0
 80131de:	d04d      	beq.n	801327c <rmw_create_service+0x18c>
 80131e0:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80131e4:	a80c      	add	r0, sp, #48	; 0x30
 80131e6:	4629      	mov	r1, r5
 80131e8:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80131ec:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80131f0:	f000 fe14 	bl	8013e1c <convert_qos_profile>
 80131f4:	4a27      	ldr	r2, [pc, #156]	; (8013294 <rmw_create_service+0x1a4>)
 80131f6:	a80c      	add	r0, sp, #48	; 0x30
 80131f8:	9400      	str	r4, [sp, #0]
 80131fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80131fc:	e9cd b203 	strd	fp, r2, [sp, #12]
 8013200:	e9cd 9a01 	strd	r9, sl, [sp, #4]
 8013204:	c803      	ldmia	r0, {r0, r1}
 8013206:	9a08      	ldr	r2, [sp, #32]
 8013208:	9005      	str	r0, [sp, #20]
 801320a:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 801320e:	2306      	movs	r3, #6
 8013210:	f8ad 1018 	strh.w	r1, [sp, #24]
 8013214:	9307      	str	r3, [sp, #28]
 8013216:	6811      	ldr	r1, [r2, #0]
 8013218:	f8d8 3014 	ldr.w	r3, [r8, #20]
 801321c:	693a      	ldr	r2, [r7, #16]
 801321e:	f000 ffcf 	bl	80141c0 <uxr_buffer_create_replier_bin>
 8013222:	4602      	mov	r2, r0
 8013224:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8013228:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 801322c:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8013230:	f000 fdd8 	bl	8013de4 <run_xrce_session>
 8013234:	b310      	cbz	r0, 801327c <rmw_create_service+0x18c>
 8013236:	7a2b      	ldrb	r3, [r5, #8]
 8013238:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801323c:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8013240:	2b02      	cmp	r3, #2
 8013242:	920e      	str	r2, [sp, #56]	; 0x38
 8013244:	f04f 0200 	mov.w	r2, #0
 8013248:	920f      	str	r2, [sp, #60]	; 0x3c
 801324a:	bf0c      	ite	eq
 801324c:	e9d0 23df 	ldrdeq	r2, r3, [r0, #892]	; 0x37c
 8013250:	e9d0 32dd 	ldrdne	r3, r2, [r0, #884]	; 0x374
 8013254:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8013258:	930b      	str	r3, [sp, #44]	; 0x2c
 801325a:	ab0e      	add	r3, sp, #56	; 0x38
 801325c:	673a      	str	r2, [r7, #112]	; 0x70
 801325e:	f8d0 20e4 	ldr.w	r2, [r0, #228]	; 0xe4
 8013262:	9300      	str	r3, [sp, #0]
 8013264:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013266:	6811      	ldr	r1, [r2, #0]
 8013268:	693a      	ldr	r2, [r7, #16]
 801326a:	f001 f8d1 	bl	8014410 <uxr_buffer_request_data>
 801326e:	8338      	strh	r0, [r7, #24]
 8013270:	e000      	b.n	8013274 <rmw_create_service+0x184>
 8013272:	2600      	movs	r6, #0
 8013274:	4630      	mov	r0, r6
 8013276:	b011      	add	sp, #68	; 0x44
 8013278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801327c:	4630      	mov	r0, r6
 801327e:	2600      	movs	r6, #0
 8013280:	f000 fc76 	bl	8013b70 <rmw_uxrce_fini_service_memory>
 8013284:	4630      	mov	r0, r6
 8013286:	b011      	add	sp, #68	; 0x44
 8013288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801328c:	200108dc 	.word	0x200108dc
 8013290:	0801a7d0 	.word	0x0801a7d0
 8013294:	2000be88 	.word	0x2000be88
 8013298:	2000bec4 	.word	0x2000bec4
 801329c:	2000be24 	.word	0x2000be24
 80132a0:	2000bde8 	.word	0x2000bde8

080132a4 <rmw_destroy_service>:
 80132a4:	b570      	push	{r4, r5, r6, lr}
 80132a6:	b128      	cbz	r0, 80132b4 <rmw_destroy_service+0x10>
 80132a8:	4604      	mov	r4, r0
 80132aa:	6800      	ldr	r0, [r0, #0]
 80132ac:	460d      	mov	r5, r1
 80132ae:	f000 fe65 	bl	8013f7c <is_uxrce_rmw_identifier_valid>
 80132b2:	b910      	cbnz	r0, 80132ba <rmw_destroy_service+0x16>
 80132b4:	2401      	movs	r4, #1
 80132b6:	4620      	mov	r0, r4
 80132b8:	bd70      	pop	{r4, r5, r6, pc}
 80132ba:	6863      	ldr	r3, [r4, #4]
 80132bc:	2b00      	cmp	r3, #0
 80132be:	d0f9      	beq.n	80132b4 <rmw_destroy_service+0x10>
 80132c0:	2d00      	cmp	r5, #0
 80132c2:	d0f7      	beq.n	80132b4 <rmw_destroy_service+0x10>
 80132c4:	6828      	ldr	r0, [r5, #0]
 80132c6:	f000 fe59 	bl	8013f7c <is_uxrce_rmw_identifier_valid>
 80132ca:	2800      	cmp	r0, #0
 80132cc:	d0f2      	beq.n	80132b4 <rmw_destroy_service+0x10>
 80132ce:	686e      	ldr	r6, [r5, #4]
 80132d0:	2e00      	cmp	r6, #0
 80132d2:	d0ef      	beq.n	80132b4 <rmw_destroy_service+0x10>
 80132d4:	6864      	ldr	r4, [r4, #4]
 80132d6:	6932      	ldr	r2, [r6, #16]
 80132d8:	6920      	ldr	r0, [r4, #16]
 80132da:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80132de:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80132e2:	6819      	ldr	r1, [r3, #0]
 80132e4:	f001 f8ce 	bl	8014484 <uxr_buffer_cancel_data>
 80132e8:	4602      	mov	r2, r0
 80132ea:	6920      	ldr	r0, [r4, #16]
 80132ec:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80132f0:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80132f4:	f000 fd76 	bl	8013de4 <run_xrce_session>
 80132f8:	6920      	ldr	r0, [r4, #16]
 80132fa:	6932      	ldr	r2, [r6, #16]
 80132fc:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8013300:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8013304:	6819      	ldr	r1, [r3, #0]
 8013306:	f000 fedd 	bl	80140c4 <uxr_buffer_delete_entity>
 801330a:	4602      	mov	r2, r0
 801330c:	6920      	ldr	r0, [r4, #16]
 801330e:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8013312:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8013316:	f000 fd65 	bl	8013de4 <run_xrce_session>
 801331a:	4603      	mov	r3, r0
 801331c:	4628      	mov	r0, r5
 801331e:	2b00      	cmp	r3, #0
 8013320:	bf14      	ite	ne
 8013322:	2400      	movne	r4, #0
 8013324:	2402      	moveq	r4, #2
 8013326:	f000 fc23 	bl	8013b70 <rmw_uxrce_fini_service_memory>
 801332a:	e7c4      	b.n	80132b6 <rmw_destroy_service+0x12>

0801332c <rmw_service_response_publisher_get_actual_qos>:
 801332c:	b181      	cbz	r1, 8013350 <rmw_service_response_publisher_get_actual_qos+0x24>
 801332e:	4603      	mov	r3, r0
 8013330:	b510      	push	{r4, lr}
 8013332:	fab0 f480 	clz	r4, r0
 8013336:	0964      	lsrs	r4, r4, #5
 8013338:	b140      	cbz	r0, 801334c <rmw_service_response_publisher_get_actual_qos+0x20>
 801333a:	685b      	ldr	r3, [r3, #4]
 801333c:	4608      	mov	r0, r1
 801333e:	2250      	movs	r2, #80	; 0x50
 8013340:	f103 0120 	add.w	r1, r3, #32
 8013344:	f006 fad3 	bl	80198ee <memcpy>
 8013348:	4620      	mov	r0, r4
 801334a:	bd10      	pop	{r4, pc}
 801334c:	200b      	movs	r0, #11
 801334e:	bd10      	pop	{r4, pc}
 8013350:	200b      	movs	r0, #11
 8013352:	4770      	bx	lr

08013354 <rmw_service_request_subscription_get_actual_qos>:
 8013354:	b178      	cbz	r0, 8013376 <rmw_service_request_subscription_get_actual_qos+0x22>
 8013356:	b510      	push	{r4, lr}
 8013358:	fab1 f481 	clz	r4, r1
 801335c:	0964      	lsrs	r4, r4, #5
 801335e:	b141      	cbz	r1, 8013372 <rmw_service_request_subscription_get_actual_qos+0x1e>
 8013360:	6843      	ldr	r3, [r0, #4]
 8013362:	2250      	movs	r2, #80	; 0x50
 8013364:	4608      	mov	r0, r1
 8013366:	f103 0120 	add.w	r1, r3, #32
 801336a:	f006 fac0 	bl	80198ee <memcpy>
 801336e:	4620      	mov	r0, r4
 8013370:	bd10      	pop	{r4, pc}
 8013372:	200b      	movs	r0, #11
 8013374:	bd10      	pop	{r4, pc}
 8013376:	200b      	movs	r0, #11
 8013378:	4770      	bx	lr
 801337a:	bf00      	nop

0801337c <rmw_destroy_subscription>:
 801337c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013380:	b128      	cbz	r0, 801338e <rmw_destroy_subscription+0x12>
 8013382:	4604      	mov	r4, r0
 8013384:	6800      	ldr	r0, [r0, #0]
 8013386:	460d      	mov	r5, r1
 8013388:	f000 fdf8 	bl	8013f7c <is_uxrce_rmw_identifier_valid>
 801338c:	b918      	cbnz	r0, 8013396 <rmw_destroy_subscription+0x1a>
 801338e:	2401      	movs	r4, #1
 8013390:	4620      	mov	r0, r4
 8013392:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013396:	6863      	ldr	r3, [r4, #4]
 8013398:	2b00      	cmp	r3, #0
 801339a:	d0f8      	beq.n	801338e <rmw_destroy_subscription+0x12>
 801339c:	fab5 f485 	clz	r4, r5
 80133a0:	0964      	lsrs	r4, r4, #5
 80133a2:	2d00      	cmp	r5, #0
 80133a4:	d0f3      	beq.n	801338e <rmw_destroy_subscription+0x12>
 80133a6:	6828      	ldr	r0, [r5, #0]
 80133a8:	f000 fde8 	bl	8013f7c <is_uxrce_rmw_identifier_valid>
 80133ac:	2800      	cmp	r0, #0
 80133ae:	d0ee      	beq.n	801338e <rmw_destroy_subscription+0x12>
 80133b0:	686e      	ldr	r6, [r5, #4]
 80133b2:	2e00      	cmp	r6, #0
 80133b4:	d0eb      	beq.n	801338e <rmw_destroy_subscription+0x12>
 80133b6:	6a37      	ldr	r7, [r6, #32]
 80133b8:	6972      	ldr	r2, [r6, #20]
 80133ba:	6938      	ldr	r0, [r7, #16]
 80133bc:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80133c0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80133c4:	6819      	ldr	r1, [r3, #0]
 80133c6:	f001 f85d 	bl	8014484 <uxr_buffer_cancel_data>
 80133ca:	4602      	mov	r2, r0
 80133cc:	6938      	ldr	r0, [r7, #16]
 80133ce:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80133d2:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80133d6:	f000 fd05 	bl	8013de4 <run_xrce_session>
 80133da:	69f0      	ldr	r0, [r6, #28]
 80133dc:	f004 ff14 	bl	8018208 <destroy_topic>
 80133e0:	6a33      	ldr	r3, [r6, #32]
 80133e2:	6972      	ldr	r2, [r6, #20]
 80133e4:	6918      	ldr	r0, [r3, #16]
 80133e6:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80133ea:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80133ee:	6819      	ldr	r1, [r3, #0]
 80133f0:	f000 fe68 	bl	80140c4 <uxr_buffer_delete_entity>
 80133f4:	6a33      	ldr	r3, [r6, #32]
 80133f6:	4680      	mov	r8, r0
 80133f8:	6932      	ldr	r2, [r6, #16]
 80133fa:	6918      	ldr	r0, [r3, #16]
 80133fc:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8013400:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8013404:	6819      	ldr	r1, [r3, #0]
 8013406:	f000 fe5d 	bl	80140c4 <uxr_buffer_delete_entity>
 801340a:	4606      	mov	r6, r0
 801340c:	6938      	ldr	r0, [r7, #16]
 801340e:	4642      	mov	r2, r8
 8013410:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8013414:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8013418:	f000 fce4 	bl	8013de4 <run_xrce_session>
 801341c:	693f      	ldr	r7, [r7, #16]
 801341e:	4632      	mov	r2, r6
 8013420:	4606      	mov	r6, r0
 8013422:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 8013426:	4638      	mov	r0, r7
 8013428:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 801342c:	f000 fcda 	bl	8013de4 <run_xrce_session>
 8013430:	b126      	cbz	r6, 801343c <rmw_destroy_subscription+0xc0>
 8013432:	b118      	cbz	r0, 801343c <rmw_destroy_subscription+0xc0>
 8013434:	4628      	mov	r0, r5
 8013436:	f000 fb85 	bl	8013b44 <rmw_uxrce_fini_subscription_memory>
 801343a:	e7a9      	b.n	8013390 <rmw_destroy_subscription+0x14>
 801343c:	2402      	movs	r4, #2
 801343e:	e7f9      	b.n	8013434 <rmw_destroy_subscription+0xb8>

08013440 <rmw_take_with_info>:
 8013440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013442:	4604      	mov	r4, r0
 8013444:	6800      	ldr	r0, [r0, #0]
 8013446:	b089      	sub	sp, #36	; 0x24
 8013448:	460f      	mov	r7, r1
 801344a:	4615      	mov	r5, r2
 801344c:	b128      	cbz	r0, 801345a <rmw_take_with_info+0x1a>
 801344e:	4b24      	ldr	r3, [pc, #144]	; (80134e0 <rmw_take_with_info+0xa0>)
 8013450:	6819      	ldr	r1, [r3, #0]
 8013452:	f7ec fef5 	bl	8000240 <strcmp>
 8013456:	2800      	cmp	r0, #0
 8013458:	d13e      	bne.n	80134d8 <rmw_take_with_info+0x98>
 801345a:	b305      	cbz	r5, 801349e <rmw_take_with_info+0x5e>
 801345c:	2300      	movs	r3, #0
 801345e:	6864      	ldr	r4, [r4, #4]
 8013460:	702b      	strb	r3, [r5, #0]
 8013462:	f000 fc41 	bl	8013ce8 <rmw_uxrce_clean_expired_static_input_buffer>
 8013466:	4620      	mov	r0, r4
 8013468:	f000 fc14 	bl	8013c94 <rmw_uxrce_find_static_input_buffer_by_owner>
 801346c:	4606      	mov	r6, r0
 801346e:	b1f0      	cbz	r0, 80134ae <rmw_take_with_info+0x6e>
 8013470:	6881      	ldr	r1, [r0, #8]
 8013472:	4668      	mov	r0, sp
 8013474:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 8013478:	3110      	adds	r1, #16
 801347a:	f7fa fd05 	bl	800de88 <ucdr_init_buffer>
 801347e:	69a3      	ldr	r3, [r4, #24]
 8013480:	4639      	mov	r1, r7
 8013482:	4668      	mov	r0, sp
 8013484:	68db      	ldr	r3, [r3, #12]
 8013486:	4798      	blx	r3
 8013488:	4604      	mov	r4, r0
 801348a:	4631      	mov	r1, r6
 801348c:	4815      	ldr	r0, [pc, #84]	; (80134e4 <rmw_take_with_info+0xa4>)
 801348e:	f004 fe7d 	bl	801818c <put_memory>
 8013492:	702c      	strb	r4, [r5, #0]
 8013494:	f084 0001 	eor.w	r0, r4, #1
 8013498:	b2c0      	uxtb	r0, r0
 801349a:	b009      	add	sp, #36	; 0x24
 801349c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801349e:	6864      	ldr	r4, [r4, #4]
 80134a0:	f000 fc22 	bl	8013ce8 <rmw_uxrce_clean_expired_static_input_buffer>
 80134a4:	4620      	mov	r0, r4
 80134a6:	f000 fbf5 	bl	8013c94 <rmw_uxrce_find_static_input_buffer_by_owner>
 80134aa:	4605      	mov	r5, r0
 80134ac:	b910      	cbnz	r0, 80134b4 <rmw_take_with_info+0x74>
 80134ae:	2001      	movs	r0, #1
 80134b0:	b009      	add	sp, #36	; 0x24
 80134b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80134b4:	68a9      	ldr	r1, [r5, #8]
 80134b6:	4668      	mov	r0, sp
 80134b8:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 80134bc:	3110      	adds	r1, #16
 80134be:	f7fa fce3 	bl	800de88 <ucdr_init_buffer>
 80134c2:	69a3      	ldr	r3, [r4, #24]
 80134c4:	4639      	mov	r1, r7
 80134c6:	4668      	mov	r0, sp
 80134c8:	68db      	ldr	r3, [r3, #12]
 80134ca:	4798      	blx	r3
 80134cc:	4629      	mov	r1, r5
 80134ce:	4604      	mov	r4, r0
 80134d0:	4804      	ldr	r0, [pc, #16]	; (80134e4 <rmw_take_with_info+0xa4>)
 80134d2:	f004 fe5b 	bl	801818c <put_memory>
 80134d6:	e7dd      	b.n	8013494 <rmw_take_with_info+0x54>
 80134d8:	200c      	movs	r0, #12
 80134da:	b009      	add	sp, #36	; 0x24
 80134dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80134de:	bf00      	nop
 80134e0:	0801bed0 	.word	0x0801bed0
 80134e4:	200108fc 	.word	0x200108fc

080134e8 <rmw_uxrce_transport_init>:
 80134e8:	b508      	push	{r3, lr}
 80134ea:	b108      	cbz	r0, 80134f0 <rmw_uxrce_transport_init+0x8>
 80134ec:	f100 0210 	add.w	r2, r0, #16
 80134f0:	b139      	cbz	r1, 8013502 <rmw_uxrce_transport_init+0x1a>
 80134f2:	6949      	ldr	r1, [r1, #20]
 80134f4:	4610      	mov	r0, r2
 80134f6:	f000 ff23 	bl	8014340 <uxr_init_custom_transport>
 80134fa:	f080 0001 	eor.w	r0, r0, #1
 80134fe:	b2c0      	uxtb	r0, r0
 8013500:	bd08      	pop	{r3, pc}
 8013502:	4b04      	ldr	r3, [pc, #16]	; (8013514 <rmw_uxrce_transport_init+0x2c>)
 8013504:	4610      	mov	r0, r2
 8013506:	6859      	ldr	r1, [r3, #4]
 8013508:	f000 ff1a 	bl	8014340 <uxr_init_custom_transport>
 801350c:	f080 0001 	eor.w	r0, r0, #1
 8013510:	b2c0      	uxtb	r0, r0
 8013512:	bd08      	pop	{r3, pc}
 8013514:	2000b94c 	.word	0x2000b94c

08013518 <rmw_wait>:
 8013518:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801351c:	4698      	mov	r8, r3
 801351e:	ea40 0301 	orr.w	r3, r0, r1
 8013522:	b089      	sub	sp, #36	; 0x24
 8013524:	ea48 0303 	orr.w	r3, r8, r3
 8013528:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801352a:	4313      	orrs	r3, r2
 801352c:	f000 8106 	beq.w	801373c <rmw_wait+0x224>
 8013530:	4605      	mov	r5, r0
 8013532:	460e      	mov	r6, r1
 8013534:	4691      	mov	r9, r2
 8013536:	b16c      	cbz	r4, 8013554 <rmw_wait+0x3c>
 8013538:	4ba6      	ldr	r3, [pc, #664]	; (80137d4 <rmw_wait+0x2bc>)
 801353a:	af04      	add	r7, sp, #16
 801353c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801353e:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8013542:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8013546:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801354a:	f004 fc9f 	bl	8017e8c <rmw_time_equal>
 801354e:	2800      	cmp	r0, #0
 8013550:	f000 810b 	beq.w	801376a <rmw_wait+0x252>
 8013554:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8013558:	f000 fbc6 	bl	8013ce8 <rmw_uxrce_clean_expired_static_input_buffer>
 801355c:	4b9e      	ldr	r3, [pc, #632]	; (80137d8 <rmw_wait+0x2c0>)
 801355e:	681c      	ldr	r4, [r3, #0]
 8013560:	b14c      	cbz	r4, 8013576 <rmw_wait+0x5e>
 8013562:	4623      	mov	r3, r4
 8013564:	2100      	movs	r1, #0
 8013566:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 801356a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801356e:	f882 15a4 	strb.w	r1, [r2, #1444]	; 0x5a4
 8013572:	2b00      	cmp	r3, #0
 8013574:	d1f7      	bne.n	8013566 <rmw_wait+0x4e>
 8013576:	f1b9 0f00 	cmp.w	r9, #0
 801357a:	d011      	beq.n	80135a0 <rmw_wait+0x88>
 801357c:	f8d9 1000 	ldr.w	r1, [r9]
 8013580:	b171      	cbz	r1, 80135a0 <rmw_wait+0x88>
 8013582:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8013586:	2300      	movs	r3, #0
 8013588:	2001      	movs	r0, #1
 801358a:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801358e:	3301      	adds	r3, #1
 8013590:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8013592:	4299      	cmp	r1, r3
 8013594:	6912      	ldr	r2, [r2, #16]
 8013596:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801359a:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 801359e:	d1f4      	bne.n	801358a <rmw_wait+0x72>
 80135a0:	f1b8 0f00 	cmp.w	r8, #0
 80135a4:	d011      	beq.n	80135ca <rmw_wait+0xb2>
 80135a6:	f8d8 1000 	ldr.w	r1, [r8]
 80135aa:	b171      	cbz	r1, 80135ca <rmw_wait+0xb2>
 80135ac:	f8d8 c004 	ldr.w	ip, [r8, #4]
 80135b0:	2300      	movs	r3, #0
 80135b2:	2001      	movs	r0, #1
 80135b4:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80135b8:	3301      	adds	r3, #1
 80135ba:	6f92      	ldr	r2, [r2, #120]	; 0x78
 80135bc:	4299      	cmp	r1, r3
 80135be:	6912      	ldr	r2, [r2, #16]
 80135c0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80135c4:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 80135c8:	d1f4      	bne.n	80135b4 <rmw_wait+0x9c>
 80135ca:	b185      	cbz	r5, 80135ee <rmw_wait+0xd6>
 80135cc:	6829      	ldr	r1, [r5, #0]
 80135ce:	b171      	cbz	r1, 80135ee <rmw_wait+0xd6>
 80135d0:	f8d5 c004 	ldr.w	ip, [r5, #4]
 80135d4:	2300      	movs	r3, #0
 80135d6:	2001      	movs	r0, #1
 80135d8:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80135dc:	3301      	adds	r3, #1
 80135de:	6a12      	ldr	r2, [r2, #32]
 80135e0:	4299      	cmp	r1, r3
 80135e2:	6912      	ldr	r2, [r2, #16]
 80135e4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80135e8:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 80135ec:	d1f4      	bne.n	80135d8 <rmw_wait+0xc0>
 80135ee:	b344      	cbz	r4, 8013642 <rmw_wait+0x12a>
 80135f0:	4622      	mov	r2, r4
 80135f2:	2300      	movs	r3, #0
 80135f4:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 80135f8:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 80135fc:	f891 15a4 	ldrb.w	r1, [r1, #1444]	; 0x5a4
 8013600:	440b      	add	r3, r1
 8013602:	b2db      	uxtb	r3, r3
 8013604:	2a00      	cmp	r2, #0
 8013606:	d1f5      	bne.n	80135f4 <rmw_wait+0xdc>
 8013608:	2b00      	cmp	r3, #0
 801360a:	d05f      	beq.n	80136cc <rmw_wait+0x1b4>
 801360c:	1c7a      	adds	r2, r7, #1
 801360e:	d00d      	beq.n	801362c <rmw_wait+0x114>
 8013610:	ee07 7a90 	vmov	s15, r7
 8013614:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8013618:	ee07 3a90 	vmov	s15, r3
 801361c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013620:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013624:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8013628:	ee17 7a90 	vmov	r7, s15
 801362c:	68a0      	ldr	r0, [r4, #8]
 801362e:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 8013632:	f893 35a4 	ldrb.w	r3, [r3, #1444]	; 0x5a4
 8013636:	2b00      	cmp	r3, #0
 8013638:	f040 808d 	bne.w	8013756 <rmw_wait+0x23e>
 801363c:	6864      	ldr	r4, [r4, #4]
 801363e:	2c00      	cmp	r4, #0
 8013640:	d1f4      	bne.n	801362c <rmw_wait+0x114>
 8013642:	f1b9 0f00 	cmp.w	r9, #0
 8013646:	f000 80a1 	beq.w	801378c <rmw_wait+0x274>
 801364a:	f8d9 7000 	ldr.w	r7, [r9]
 801364e:	2f00      	cmp	r7, #0
 8013650:	f000 80a4 	beq.w	801379c <rmw_wait+0x284>
 8013654:	2400      	movs	r4, #0
 8013656:	4627      	mov	r7, r4
 8013658:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801365c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8013660:	f000 fb18 	bl	8013c94 <rmw_uxrce_find_static_input_buffer_by_owner>
 8013664:	2800      	cmp	r0, #0
 8013666:	d03b      	beq.n	80136e0 <rmw_wait+0x1c8>
 8013668:	3401      	adds	r4, #1
 801366a:	f8d9 3000 	ldr.w	r3, [r9]
 801366e:	2701      	movs	r7, #1
 8013670:	42a3      	cmp	r3, r4
 8013672:	d8f1      	bhi.n	8013658 <rmw_wait+0x140>
 8013674:	2701      	movs	r7, #1
 8013676:	f1b8 0f00 	cmp.w	r8, #0
 801367a:	d010      	beq.n	801369e <rmw_wait+0x186>
 801367c:	f8d8 3000 	ldr.w	r3, [r8]
 8013680:	b16b      	cbz	r3, 801369e <rmw_wait+0x186>
 8013682:	2400      	movs	r4, #0
 8013684:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013688:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801368c:	f000 fb02 	bl	8013c94 <rmw_uxrce_find_static_input_buffer_by_owner>
 8013690:	b370      	cbz	r0, 80136f0 <rmw_wait+0x1d8>
 8013692:	3401      	adds	r4, #1
 8013694:	f8d8 3000 	ldr.w	r3, [r8]
 8013698:	2701      	movs	r7, #1
 801369a:	42a3      	cmp	r3, r4
 801369c:	d8f2      	bhi.n	8013684 <rmw_wait+0x16c>
 801369e:	2d00      	cmp	r5, #0
 80136a0:	d035      	beq.n	801370e <rmw_wait+0x1f6>
 80136a2:	682b      	ldr	r3, [r5, #0]
 80136a4:	b39b      	cbz	r3, 801370e <rmw_wait+0x1f6>
 80136a6:	2400      	movs	r4, #0
 80136a8:	686b      	ldr	r3, [r5, #4]
 80136aa:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80136ae:	f000 faf1 	bl	8013c94 <rmw_uxrce_find_static_input_buffer_by_owner>
 80136b2:	b328      	cbz	r0, 8013700 <rmw_wait+0x1e8>
 80136b4:	3401      	adds	r4, #1
 80136b6:	682b      	ldr	r3, [r5, #0]
 80136b8:	2701      	movs	r7, #1
 80136ba:	42a3      	cmp	r3, r4
 80136bc:	d8f4      	bhi.n	80136a8 <rmw_wait+0x190>
 80136be:	2e00      	cmp	r6, #0
 80136c0:	d03c      	beq.n	801373c <rmw_wait+0x224>
 80136c2:	6834      	ldr	r4, [r6, #0]
 80136c4:	2c00      	cmp	r4, #0
 80136c6:	d039      	beq.n	801373c <rmw_wait+0x224>
 80136c8:	2701      	movs	r7, #1
 80136ca:	e023      	b.n	8013714 <rmw_wait+0x1fc>
 80136cc:	68a0      	ldr	r0, [r4, #8]
 80136ce:	2100      	movs	r1, #0
 80136d0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80136d4:	f001 fc6e 	bl	8014fb4 <uxr_run_session_timeout>
 80136d8:	6864      	ldr	r4, [r4, #4]
 80136da:	2c00      	cmp	r4, #0
 80136dc:	d1f6      	bne.n	80136cc <rmw_wait+0x1b4>
 80136de:	e7b0      	b.n	8013642 <rmw_wait+0x12a>
 80136e0:	e9d9 3200 	ldrd	r3, r2, [r9]
 80136e4:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80136e8:	3401      	adds	r4, #1
 80136ea:	42a3      	cmp	r3, r4
 80136ec:	d8b4      	bhi.n	8013658 <rmw_wait+0x140>
 80136ee:	e7c2      	b.n	8013676 <rmw_wait+0x15e>
 80136f0:	e9d8 3200 	ldrd	r3, r2, [r8]
 80136f4:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80136f8:	3401      	adds	r4, #1
 80136fa:	429c      	cmp	r4, r3
 80136fc:	d3c2      	bcc.n	8013684 <rmw_wait+0x16c>
 80136fe:	e7ce      	b.n	801369e <rmw_wait+0x186>
 8013700:	e9d5 3200 	ldrd	r3, r2, [r5]
 8013704:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8013708:	3401      	adds	r4, #1
 801370a:	42a3      	cmp	r3, r4
 801370c:	d8cc      	bhi.n	80136a8 <rmw_wait+0x190>
 801370e:	b1a6      	cbz	r6, 801373a <rmw_wait+0x222>
 8013710:	6834      	ldr	r4, [r6, #0]
 8013712:	b194      	cbz	r4, 801373a <rmw_wait+0x222>
 8013714:	2300      	movs	r3, #0
 8013716:	461d      	mov	r5, r3
 8013718:	e004      	b.n	8013724 <rmw_wait+0x20c>
 801371a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 801371e:	3301      	adds	r3, #1
 8013720:	42a3      	cmp	r3, r4
 8013722:	d00a      	beq.n	801373a <rmw_wait+0x222>
 8013724:	6870      	ldr	r0, [r6, #4]
 8013726:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 801372a:	7c0a      	ldrb	r2, [r1, #16]
 801372c:	2a00      	cmp	r2, #0
 801372e:	d0f4      	beq.n	801371a <rmw_wait+0x202>
 8013730:	3301      	adds	r3, #1
 8013732:	4617      	mov	r7, r2
 8013734:	740d      	strb	r5, [r1, #16]
 8013736:	42a3      	cmp	r3, r4
 8013738:	d1f4      	bne.n	8013724 <rmw_wait+0x20c>
 801373a:	b147      	cbz	r7, 801374e <rmw_wait+0x236>
 801373c:	2000      	movs	r0, #0
 801373e:	b009      	add	sp, #36	; 0x24
 8013740:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013744:	b11e      	cbz	r6, 801374e <rmw_wait+0x236>
 8013746:	6834      	ldr	r4, [r6, #0]
 8013748:	462f      	mov	r7, r5
 801374a:	2c00      	cmp	r4, #0
 801374c:	d1e2      	bne.n	8013714 <rmw_wait+0x1fc>
 801374e:	2002      	movs	r0, #2
 8013750:	b009      	add	sp, #36	; 0x24
 8013752:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013756:	4639      	mov	r1, r7
 8013758:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801375c:	f001 fc44 	bl	8014fe8 <uxr_run_session_until_data>
 8013760:	6864      	ldr	r4, [r4, #4]
 8013762:	2c00      	cmp	r4, #0
 8013764:	f47f af62 	bne.w	801362c <rmw_wait+0x114>
 8013768:	e76b      	b.n	8013642 <rmw_wait+0x12a>
 801376a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801376e:	f004 fbe3 	bl	8017f38 <rmw_time_total_nsec>
 8013772:	2300      	movs	r3, #0
 8013774:	4a19      	ldr	r2, [pc, #100]	; (80137dc <rmw_wait+0x2c4>)
 8013776:	f7ec fe1b 	bl	80003b0 <__aeabi_uldivmod>
 801377a:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 801377e:	4607      	mov	r7, r0
 8013780:	f171 0300 	sbcs.w	r3, r1, #0
 8013784:	bfa8      	it	ge
 8013786:	f06f 4700 	mvnge.w	r7, #2147483648	; 0x80000000
 801378a:	e6e5      	b.n	8013558 <rmw_wait+0x40>
 801378c:	f1b8 0f00 	cmp.w	r8, #0
 8013790:	d00f      	beq.n	80137b2 <rmw_wait+0x29a>
 8013792:	f8d8 3000 	ldr.w	r3, [r8]
 8013796:	b193      	cbz	r3, 80137be <rmw_wait+0x2a6>
 8013798:	464f      	mov	r7, r9
 801379a:	e772      	b.n	8013682 <rmw_wait+0x16a>
 801379c:	f1b8 0f00 	cmp.w	r8, #0
 80137a0:	d007      	beq.n	80137b2 <rmw_wait+0x29a>
 80137a2:	f8d8 3000 	ldr.w	r3, [r8]
 80137a6:	2b00      	cmp	r3, #0
 80137a8:	f47f af6b 	bne.w	8013682 <rmw_wait+0x16a>
 80137ac:	b155      	cbz	r5, 80137c4 <rmw_wait+0x2ac>
 80137ae:	461f      	mov	r7, r3
 80137b0:	e777      	b.n	80136a2 <rmw_wait+0x18a>
 80137b2:	2d00      	cmp	r5, #0
 80137b4:	d0c6      	beq.n	8013744 <rmw_wait+0x22c>
 80137b6:	682b      	ldr	r3, [r5, #0]
 80137b8:	b143      	cbz	r3, 80137cc <rmw_wait+0x2b4>
 80137ba:	4647      	mov	r7, r8
 80137bc:	e773      	b.n	80136a6 <rmw_wait+0x18e>
 80137be:	b10d      	cbz	r5, 80137c4 <rmw_wait+0x2ac>
 80137c0:	464f      	mov	r7, r9
 80137c2:	e76e      	b.n	80136a2 <rmw_wait+0x18a>
 80137c4:	462f      	mov	r7, r5
 80137c6:	2e00      	cmp	r6, #0
 80137c8:	d1a2      	bne.n	8013710 <rmw_wait+0x1f8>
 80137ca:	e7c0      	b.n	801374e <rmw_wait+0x236>
 80137cc:	4647      	mov	r7, r8
 80137ce:	2e00      	cmp	r6, #0
 80137d0:	d19e      	bne.n	8013710 <rmw_wait+0x1f8>
 80137d2:	e7bc      	b.n	801374e <rmw_wait+0x236>
 80137d4:	0801a678 	.word	0x0801a678
 80137d8:	200108ec 	.word	0x200108ec
 80137dc:	000f4240 	.word	0x000f4240

080137e0 <rmw_create_wait_set>:
 80137e0:	b508      	push	{r3, lr}
 80137e2:	4803      	ldr	r0, [pc, #12]	; (80137f0 <rmw_create_wait_set+0x10>)
 80137e4:	f004 fcc2 	bl	801816c <get_memory>
 80137e8:	b108      	cbz	r0, 80137ee <rmw_create_wait_set+0xe>
 80137ea:	6880      	ldr	r0, [r0, #8]
 80137ec:	3010      	adds	r0, #16
 80137ee:	bd08      	pop	{r3, pc}
 80137f0:	2001092c 	.word	0x2001092c

080137f4 <rmw_destroy_wait_set>:
 80137f4:	b508      	push	{r3, lr}
 80137f6:	4b08      	ldr	r3, [pc, #32]	; (8013818 <rmw_destroy_wait_set+0x24>)
 80137f8:	6819      	ldr	r1, [r3, #0]
 80137fa:	b911      	cbnz	r1, 8013802 <rmw_destroy_wait_set+0xe>
 80137fc:	e00a      	b.n	8013814 <rmw_destroy_wait_set+0x20>
 80137fe:	6849      	ldr	r1, [r1, #4]
 8013800:	b141      	cbz	r1, 8013814 <rmw_destroy_wait_set+0x20>
 8013802:	688b      	ldr	r3, [r1, #8]
 8013804:	3310      	adds	r3, #16
 8013806:	4298      	cmp	r0, r3
 8013808:	d1f9      	bne.n	80137fe <rmw_destroy_wait_set+0xa>
 801380a:	4803      	ldr	r0, [pc, #12]	; (8013818 <rmw_destroy_wait_set+0x24>)
 801380c:	f004 fcbe 	bl	801818c <put_memory>
 8013810:	2000      	movs	r0, #0
 8013812:	bd08      	pop	{r3, pc}
 8013814:	2001      	movs	r0, #1
 8013816:	bd08      	pop	{r3, pc}
 8013818:	2001092c 	.word	0x2001092c

0801381c <rmw_uxrce_init_service_memory>:
 801381c:	b1e2      	cbz	r2, 8013858 <rmw_uxrce_init_service_memory+0x3c>
 801381e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013822:	7b05      	ldrb	r5, [r0, #12]
 8013824:	4606      	mov	r6, r0
 8013826:	b9ad      	cbnz	r5, 8013854 <rmw_uxrce_init_service_memory+0x38>
 8013828:	23c8      	movs	r3, #200	; 0xc8
 801382a:	4617      	mov	r7, r2
 801382c:	460c      	mov	r4, r1
 801382e:	46a8      	mov	r8, r5
 8013830:	6083      	str	r3, [r0, #8]
 8013832:	f240 1301 	movw	r3, #257	; 0x101
 8013836:	e9c0 5500 	strd	r5, r5, [r0]
 801383a:	8183      	strh	r3, [r0, #12]
 801383c:	3501      	adds	r5, #1
 801383e:	4621      	mov	r1, r4
 8013840:	4630      	mov	r0, r6
 8013842:	f004 fca3 	bl	801818c <put_memory>
 8013846:	42af      	cmp	r7, r5
 8013848:	60a4      	str	r4, [r4, #8]
 801384a:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 801384e:	f804 8cbc 	strb.w	r8, [r4, #-188]
 8013852:	d1f3      	bne.n	801383c <rmw_uxrce_init_service_memory+0x20>
 8013854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013858:	4770      	bx	lr
 801385a:	bf00      	nop

0801385c <rmw_uxrce_init_client_memory>:
 801385c:	b1e2      	cbz	r2, 8013898 <rmw_uxrce_init_client_memory+0x3c>
 801385e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013862:	7b05      	ldrb	r5, [r0, #12]
 8013864:	4606      	mov	r6, r0
 8013866:	b9ad      	cbnz	r5, 8013894 <rmw_uxrce_init_client_memory+0x38>
 8013868:	23c8      	movs	r3, #200	; 0xc8
 801386a:	4617      	mov	r7, r2
 801386c:	460c      	mov	r4, r1
 801386e:	46a8      	mov	r8, r5
 8013870:	6083      	str	r3, [r0, #8]
 8013872:	f240 1301 	movw	r3, #257	; 0x101
 8013876:	e9c0 5500 	strd	r5, r5, [r0]
 801387a:	8183      	strh	r3, [r0, #12]
 801387c:	3501      	adds	r5, #1
 801387e:	4621      	mov	r1, r4
 8013880:	4630      	mov	r0, r6
 8013882:	f004 fc83 	bl	801818c <put_memory>
 8013886:	42af      	cmp	r7, r5
 8013888:	60a4      	str	r4, [r4, #8]
 801388a:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 801388e:	f804 8cbc 	strb.w	r8, [r4, #-188]
 8013892:	d1f3      	bne.n	801387c <rmw_uxrce_init_client_memory+0x20>
 8013894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013898:	4770      	bx	lr
 801389a:	bf00      	nop

0801389c <rmw_uxrce_init_publisher_memory>:
 801389c:	b1e2      	cbz	r2, 80138d8 <rmw_uxrce_init_publisher_memory+0x3c>
 801389e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80138a2:	7b05      	ldrb	r5, [r0, #12]
 80138a4:	4606      	mov	r6, r0
 80138a6:	b9ad      	cbnz	r5, 80138d4 <rmw_uxrce_init_publisher_memory+0x38>
 80138a8:	23d8      	movs	r3, #216	; 0xd8
 80138aa:	4617      	mov	r7, r2
 80138ac:	460c      	mov	r4, r1
 80138ae:	46a8      	mov	r8, r5
 80138b0:	6083      	str	r3, [r0, #8]
 80138b2:	f240 1301 	movw	r3, #257	; 0x101
 80138b6:	e9c0 5500 	strd	r5, r5, [r0]
 80138ba:	8183      	strh	r3, [r0, #12]
 80138bc:	3501      	adds	r5, #1
 80138be:	4621      	mov	r1, r4
 80138c0:	4630      	mov	r0, r6
 80138c2:	f004 fc63 	bl	801818c <put_memory>
 80138c6:	42af      	cmp	r7, r5
 80138c8:	60a4      	str	r4, [r4, #8]
 80138ca:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 80138ce:	f804 8ccc 	strb.w	r8, [r4, #-204]
 80138d2:	d1f3      	bne.n	80138bc <rmw_uxrce_init_publisher_memory+0x20>
 80138d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80138d8:	4770      	bx	lr
 80138da:	bf00      	nop

080138dc <rmw_uxrce_init_subscription_memory>:
 80138dc:	b1e2      	cbz	r2, 8013918 <rmw_uxrce_init_subscription_memory+0x3c>
 80138de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80138e2:	7b05      	ldrb	r5, [r0, #12]
 80138e4:	4606      	mov	r6, r0
 80138e6:	b9ad      	cbnz	r5, 8013914 <rmw_uxrce_init_subscription_memory+0x38>
 80138e8:	23d8      	movs	r3, #216	; 0xd8
 80138ea:	4617      	mov	r7, r2
 80138ec:	460c      	mov	r4, r1
 80138ee:	46a8      	mov	r8, r5
 80138f0:	6083      	str	r3, [r0, #8]
 80138f2:	f240 1301 	movw	r3, #257	; 0x101
 80138f6:	e9c0 5500 	strd	r5, r5, [r0]
 80138fa:	8183      	strh	r3, [r0, #12]
 80138fc:	3501      	adds	r5, #1
 80138fe:	4621      	mov	r1, r4
 8013900:	4630      	mov	r0, r6
 8013902:	f004 fc43 	bl	801818c <put_memory>
 8013906:	42af      	cmp	r7, r5
 8013908:	60a4      	str	r4, [r4, #8]
 801390a:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 801390e:	f804 8ccc 	strb.w	r8, [r4, #-204]
 8013912:	d1f3      	bne.n	80138fc <rmw_uxrce_init_subscription_memory+0x20>
 8013914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013918:	4770      	bx	lr
 801391a:	bf00      	nop

0801391c <rmw_uxrce_init_node_memory>:
 801391c:	b1e2      	cbz	r2, 8013958 <rmw_uxrce_init_node_memory+0x3c>
 801391e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013922:	7b05      	ldrb	r5, [r0, #12]
 8013924:	4606      	mov	r6, r0
 8013926:	b9ad      	cbnz	r5, 8013954 <rmw_uxrce_init_node_memory+0x38>
 8013928:	23a4      	movs	r3, #164	; 0xa4
 801392a:	4617      	mov	r7, r2
 801392c:	460c      	mov	r4, r1
 801392e:	46a8      	mov	r8, r5
 8013930:	6083      	str	r3, [r0, #8]
 8013932:	f240 1301 	movw	r3, #257	; 0x101
 8013936:	e9c0 5500 	strd	r5, r5, [r0]
 801393a:	8183      	strh	r3, [r0, #12]
 801393c:	3501      	adds	r5, #1
 801393e:	4621      	mov	r1, r4
 8013940:	4630      	mov	r0, r6
 8013942:	f004 fc23 	bl	801818c <put_memory>
 8013946:	42af      	cmp	r7, r5
 8013948:	60a4      	str	r4, [r4, #8]
 801394a:	f104 04a4 	add.w	r4, r4, #164	; 0xa4
 801394e:	f804 8c98 	strb.w	r8, [r4, #-152]
 8013952:	d1f3      	bne.n	801393c <rmw_uxrce_init_node_memory+0x20>
 8013954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013958:	4770      	bx	lr
 801395a:	bf00      	nop

0801395c <rmw_uxrce_init_session_memory>:
 801395c:	b1ea      	cbz	r2, 801399a <rmw_uxrce_init_session_memory+0x3e>
 801395e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013962:	7b05      	ldrb	r5, [r0, #12]
 8013964:	4606      	mov	r6, r0
 8013966:	b9b5      	cbnz	r5, 8013996 <rmw_uxrce_init_session_memory+0x3a>
 8013968:	f241 58a8 	movw	r8, #5544	; 0x15a8
 801396c:	f240 1301 	movw	r3, #257	; 0x101
 8013970:	4617      	mov	r7, r2
 8013972:	460c      	mov	r4, r1
 8013974:	46a9      	mov	r9, r5
 8013976:	f8c0 8008 	str.w	r8, [r0, #8]
 801397a:	8183      	strh	r3, [r0, #12]
 801397c:	e9c0 5500 	strd	r5, r5, [r0]
 8013980:	3501      	adds	r5, #1
 8013982:	4621      	mov	r1, r4
 8013984:	4630      	mov	r0, r6
 8013986:	f004 fc01 	bl	801818c <put_memory>
 801398a:	42af      	cmp	r7, r5
 801398c:	60a4      	str	r4, [r4, #8]
 801398e:	f884 900c 	strb.w	r9, [r4, #12]
 8013992:	4444      	add	r4, r8
 8013994:	d1f4      	bne.n	8013980 <rmw_uxrce_init_session_memory+0x24>
 8013996:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801399a:	4770      	bx	lr

0801399c <rmw_uxrce_init_topic_memory>:
 801399c:	b1e2      	cbz	r2, 80139d8 <rmw_uxrce_init_topic_memory+0x3c>
 801399e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80139a2:	7b05      	ldrb	r5, [r0, #12]
 80139a4:	4606      	mov	r6, r0
 80139a6:	b9ad      	cbnz	r5, 80139d4 <rmw_uxrce_init_topic_memory+0x38>
 80139a8:	231c      	movs	r3, #28
 80139aa:	4617      	mov	r7, r2
 80139ac:	460c      	mov	r4, r1
 80139ae:	46a8      	mov	r8, r5
 80139b0:	6083      	str	r3, [r0, #8]
 80139b2:	f240 1301 	movw	r3, #257	; 0x101
 80139b6:	e9c0 5500 	strd	r5, r5, [r0]
 80139ba:	8183      	strh	r3, [r0, #12]
 80139bc:	3501      	adds	r5, #1
 80139be:	4621      	mov	r1, r4
 80139c0:	4630      	mov	r0, r6
 80139c2:	f004 fbe3 	bl	801818c <put_memory>
 80139c6:	42af      	cmp	r7, r5
 80139c8:	60a4      	str	r4, [r4, #8]
 80139ca:	f104 041c 	add.w	r4, r4, #28
 80139ce:	f804 8c10 	strb.w	r8, [r4, #-16]
 80139d2:	d1f3      	bne.n	80139bc <rmw_uxrce_init_topic_memory+0x20>
 80139d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80139d8:	4770      	bx	lr
 80139da:	bf00      	nop

080139dc <rmw_uxrce_init_static_input_buffer_memory>:
 80139dc:	b1ea      	cbz	r2, 8013a1a <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 80139de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80139e2:	7b05      	ldrb	r5, [r0, #12]
 80139e4:	4606      	mov	r6, r0
 80139e6:	b9b5      	cbnz	r5, 8013a16 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 80139e8:	f44f 6304 	mov.w	r3, #2112	; 0x840
 80139ec:	4617      	mov	r7, r2
 80139ee:	460c      	mov	r4, r1
 80139f0:	46a8      	mov	r8, r5
 80139f2:	6083      	str	r3, [r0, #8]
 80139f4:	f240 1301 	movw	r3, #257	; 0x101
 80139f8:	e9c0 5500 	strd	r5, r5, [r0]
 80139fc:	8183      	strh	r3, [r0, #12]
 80139fe:	3501      	adds	r5, #1
 8013a00:	4621      	mov	r1, r4
 8013a02:	4630      	mov	r0, r6
 8013a04:	f004 fbc2 	bl	801818c <put_memory>
 8013a08:	42af      	cmp	r7, r5
 8013a0a:	60a4      	str	r4, [r4, #8]
 8013a0c:	f884 800c 	strb.w	r8, [r4, #12]
 8013a10:	f504 6404 	add.w	r4, r4, #2112	; 0x840
 8013a14:	d1f3      	bne.n	80139fe <rmw_uxrce_init_static_input_buffer_memory+0x22>
 8013a16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a1a:	4770      	bx	lr

08013a1c <rmw_uxrce_init_init_options_impl_memory>:
 8013a1c:	b1e2      	cbz	r2, 8013a58 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 8013a1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a22:	7b05      	ldrb	r5, [r0, #12]
 8013a24:	4606      	mov	r6, r0
 8013a26:	b9ad      	cbnz	r5, 8013a54 <rmw_uxrce_init_init_options_impl_memory+0x38>
 8013a28:	232c      	movs	r3, #44	; 0x2c
 8013a2a:	4617      	mov	r7, r2
 8013a2c:	460c      	mov	r4, r1
 8013a2e:	46a8      	mov	r8, r5
 8013a30:	6083      	str	r3, [r0, #8]
 8013a32:	f240 1301 	movw	r3, #257	; 0x101
 8013a36:	e9c0 5500 	strd	r5, r5, [r0]
 8013a3a:	8183      	strh	r3, [r0, #12]
 8013a3c:	3501      	adds	r5, #1
 8013a3e:	4621      	mov	r1, r4
 8013a40:	4630      	mov	r0, r6
 8013a42:	f004 fba3 	bl	801818c <put_memory>
 8013a46:	42af      	cmp	r7, r5
 8013a48:	60a4      	str	r4, [r4, #8]
 8013a4a:	f104 042c 	add.w	r4, r4, #44	; 0x2c
 8013a4e:	f804 8c20 	strb.w	r8, [r4, #-32]
 8013a52:	d1f3      	bne.n	8013a3c <rmw_uxrce_init_init_options_impl_memory+0x20>
 8013a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a58:	4770      	bx	lr
 8013a5a:	bf00      	nop

08013a5c <rmw_uxrce_init_wait_set_memory>:
 8013a5c:	b1e2      	cbz	r2, 8013a98 <rmw_uxrce_init_wait_set_memory+0x3c>
 8013a5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a62:	7b05      	ldrb	r5, [r0, #12]
 8013a64:	4606      	mov	r6, r0
 8013a66:	b9ad      	cbnz	r5, 8013a94 <rmw_uxrce_init_wait_set_memory+0x38>
 8013a68:	231c      	movs	r3, #28
 8013a6a:	4617      	mov	r7, r2
 8013a6c:	460c      	mov	r4, r1
 8013a6e:	46a8      	mov	r8, r5
 8013a70:	6083      	str	r3, [r0, #8]
 8013a72:	f240 1301 	movw	r3, #257	; 0x101
 8013a76:	e9c0 5500 	strd	r5, r5, [r0]
 8013a7a:	8183      	strh	r3, [r0, #12]
 8013a7c:	3501      	adds	r5, #1
 8013a7e:	4621      	mov	r1, r4
 8013a80:	4630      	mov	r0, r6
 8013a82:	f004 fb83 	bl	801818c <put_memory>
 8013a86:	42af      	cmp	r7, r5
 8013a88:	60a4      	str	r4, [r4, #8]
 8013a8a:	f104 041c 	add.w	r4, r4, #28
 8013a8e:	f804 8c10 	strb.w	r8, [r4, #-16]
 8013a92:	d1f3      	bne.n	8013a7c <rmw_uxrce_init_wait_set_memory+0x20>
 8013a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a98:	4770      	bx	lr
 8013a9a:	bf00      	nop

08013a9c <rmw_uxrce_init_guard_condition_memory>:
 8013a9c:	b1e2      	cbz	r2, 8013ad8 <rmw_uxrce_init_guard_condition_memory+0x3c>
 8013a9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013aa2:	7b05      	ldrb	r5, [r0, #12]
 8013aa4:	4606      	mov	r6, r0
 8013aa6:	b9ad      	cbnz	r5, 8013ad4 <rmw_uxrce_init_guard_condition_memory+0x38>
 8013aa8:	2320      	movs	r3, #32
 8013aaa:	4617      	mov	r7, r2
 8013aac:	460c      	mov	r4, r1
 8013aae:	46a8      	mov	r8, r5
 8013ab0:	6083      	str	r3, [r0, #8]
 8013ab2:	f240 1301 	movw	r3, #257	; 0x101
 8013ab6:	e9c0 5500 	strd	r5, r5, [r0]
 8013aba:	8183      	strh	r3, [r0, #12]
 8013abc:	3501      	adds	r5, #1
 8013abe:	4621      	mov	r1, r4
 8013ac0:	4630      	mov	r0, r6
 8013ac2:	f004 fb63 	bl	801818c <put_memory>
 8013ac6:	42af      	cmp	r7, r5
 8013ac8:	60a4      	str	r4, [r4, #8]
 8013aca:	f104 0420 	add.w	r4, r4, #32
 8013ace:	f804 8c14 	strb.w	r8, [r4, #-20]
 8013ad2:	d1f3      	bne.n	8013abc <rmw_uxrce_init_guard_condition_memory+0x20>
 8013ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ad8:	4770      	bx	lr
 8013ada:	bf00      	nop

08013adc <rmw_uxrce_fini_session_memory>:
 8013adc:	4601      	mov	r1, r0
 8013ade:	4801      	ldr	r0, [pc, #4]	; (8013ae4 <rmw_uxrce_fini_session_memory+0x8>)
 8013ae0:	f004 bb54 	b.w	801818c <put_memory>
 8013ae4:	200108ec 	.word	0x200108ec

08013ae8 <rmw_uxrce_fini_node_memory>:
 8013ae8:	b538      	push	{r3, r4, r5, lr}
 8013aea:	4604      	mov	r4, r0
 8013aec:	6800      	ldr	r0, [r0, #0]
 8013aee:	b128      	cbz	r0, 8013afc <rmw_uxrce_fini_node_memory+0x14>
 8013af0:	4b07      	ldr	r3, [pc, #28]	; (8013b10 <rmw_uxrce_fini_node_memory+0x28>)
 8013af2:	6819      	ldr	r1, [r3, #0]
 8013af4:	f7ec fba4 	bl	8000240 <strcmp>
 8013af8:	b940      	cbnz	r0, 8013b0c <rmw_uxrce_fini_node_memory+0x24>
 8013afa:	6020      	str	r0, [r4, #0]
 8013afc:	6861      	ldr	r1, [r4, #4]
 8013afe:	b129      	cbz	r1, 8013b0c <rmw_uxrce_fini_node_memory+0x24>
 8013b00:	2500      	movs	r5, #0
 8013b02:	4804      	ldr	r0, [pc, #16]	; (8013b14 <rmw_uxrce_fini_node_memory+0x2c>)
 8013b04:	610d      	str	r5, [r1, #16]
 8013b06:	f004 fb41 	bl	801818c <put_memory>
 8013b0a:	6065      	str	r5, [r4, #4]
 8013b0c:	bd38      	pop	{r3, r4, r5, pc}
 8013b0e:	bf00      	nop
 8013b10:	0801bed0 	.word	0x0801bed0
 8013b14:	200108bc 	.word	0x200108bc

08013b18 <rmw_uxrce_fini_publisher_memory>:
 8013b18:	b510      	push	{r4, lr}
 8013b1a:	4604      	mov	r4, r0
 8013b1c:	6800      	ldr	r0, [r0, #0]
 8013b1e:	b128      	cbz	r0, 8013b2c <rmw_uxrce_fini_publisher_memory+0x14>
 8013b20:	4b06      	ldr	r3, [pc, #24]	; (8013b3c <rmw_uxrce_fini_publisher_memory+0x24>)
 8013b22:	6819      	ldr	r1, [r3, #0]
 8013b24:	f7ec fb8c 	bl	8000240 <strcmp>
 8013b28:	b938      	cbnz	r0, 8013b3a <rmw_uxrce_fini_publisher_memory+0x22>
 8013b2a:	6020      	str	r0, [r4, #0]
 8013b2c:	6861      	ldr	r1, [r4, #4]
 8013b2e:	b121      	cbz	r1, 8013b3a <rmw_uxrce_fini_publisher_memory+0x22>
 8013b30:	4803      	ldr	r0, [pc, #12]	; (8013b40 <rmw_uxrce_fini_publisher_memory+0x28>)
 8013b32:	f004 fb2b 	bl	801818c <put_memory>
 8013b36:	2300      	movs	r3, #0
 8013b38:	6063      	str	r3, [r4, #4]
 8013b3a:	bd10      	pop	{r4, pc}
 8013b3c:	0801bed0 	.word	0x0801bed0
 8013b40:	200108cc 	.word	0x200108cc

08013b44 <rmw_uxrce_fini_subscription_memory>:
 8013b44:	b510      	push	{r4, lr}
 8013b46:	4604      	mov	r4, r0
 8013b48:	6800      	ldr	r0, [r0, #0]
 8013b4a:	b128      	cbz	r0, 8013b58 <rmw_uxrce_fini_subscription_memory+0x14>
 8013b4c:	4b06      	ldr	r3, [pc, #24]	; (8013b68 <rmw_uxrce_fini_subscription_memory+0x24>)
 8013b4e:	6819      	ldr	r1, [r3, #0]
 8013b50:	f7ec fb76 	bl	8000240 <strcmp>
 8013b54:	b938      	cbnz	r0, 8013b66 <rmw_uxrce_fini_subscription_memory+0x22>
 8013b56:	6020      	str	r0, [r4, #0]
 8013b58:	6861      	ldr	r1, [r4, #4]
 8013b5a:	b121      	cbz	r1, 8013b66 <rmw_uxrce_fini_subscription_memory+0x22>
 8013b5c:	4803      	ldr	r0, [pc, #12]	; (8013b6c <rmw_uxrce_fini_subscription_memory+0x28>)
 8013b5e:	f004 fb15 	bl	801818c <put_memory>
 8013b62:	2300      	movs	r3, #0
 8013b64:	6063      	str	r3, [r4, #4]
 8013b66:	bd10      	pop	{r4, pc}
 8013b68:	0801bed0 	.word	0x0801bed0
 8013b6c:	2001090c 	.word	0x2001090c

08013b70 <rmw_uxrce_fini_service_memory>:
 8013b70:	b510      	push	{r4, lr}
 8013b72:	4604      	mov	r4, r0
 8013b74:	6800      	ldr	r0, [r0, #0]
 8013b76:	b128      	cbz	r0, 8013b84 <rmw_uxrce_fini_service_memory+0x14>
 8013b78:	4b06      	ldr	r3, [pc, #24]	; (8013b94 <rmw_uxrce_fini_service_memory+0x24>)
 8013b7a:	6819      	ldr	r1, [r3, #0]
 8013b7c:	f7ec fb60 	bl	8000240 <strcmp>
 8013b80:	b938      	cbnz	r0, 8013b92 <rmw_uxrce_fini_service_memory+0x22>
 8013b82:	6020      	str	r0, [r4, #0]
 8013b84:	6861      	ldr	r1, [r4, #4]
 8013b86:	b121      	cbz	r1, 8013b92 <rmw_uxrce_fini_service_memory+0x22>
 8013b88:	4803      	ldr	r0, [pc, #12]	; (8013b98 <rmw_uxrce_fini_service_memory+0x28>)
 8013b8a:	f004 faff 	bl	801818c <put_memory>
 8013b8e:	2300      	movs	r3, #0
 8013b90:	6063      	str	r3, [r4, #4]
 8013b92:	bd10      	pop	{r4, pc}
 8013b94:	0801bed0 	.word	0x0801bed0
 8013b98:	200108dc 	.word	0x200108dc

08013b9c <rmw_uxrce_fini_client_memory>:
 8013b9c:	b510      	push	{r4, lr}
 8013b9e:	4604      	mov	r4, r0
 8013ba0:	6800      	ldr	r0, [r0, #0]
 8013ba2:	b128      	cbz	r0, 8013bb0 <rmw_uxrce_fini_client_memory+0x14>
 8013ba4:	4b06      	ldr	r3, [pc, #24]	; (8013bc0 <rmw_uxrce_fini_client_memory+0x24>)
 8013ba6:	6819      	ldr	r1, [r3, #0]
 8013ba8:	f7ec fb4a 	bl	8000240 <strcmp>
 8013bac:	b938      	cbnz	r0, 8013bbe <rmw_uxrce_fini_client_memory+0x22>
 8013bae:	6020      	str	r0, [r4, #0]
 8013bb0:	6861      	ldr	r1, [r4, #4]
 8013bb2:	b121      	cbz	r1, 8013bbe <rmw_uxrce_fini_client_memory+0x22>
 8013bb4:	4803      	ldr	r0, [pc, #12]	; (8013bc4 <rmw_uxrce_fini_client_memory+0x28>)
 8013bb6:	f004 fae9 	bl	801818c <put_memory>
 8013bba:	2300      	movs	r3, #0
 8013bbc:	6063      	str	r3, [r4, #4]
 8013bbe:	bd10      	pop	{r4, pc}
 8013bc0:	0801bed0 	.word	0x0801bed0
 8013bc4:	2000bf28 	.word	0x2000bf28

08013bc8 <rmw_uxrce_fini_topic_memory>:
 8013bc8:	b510      	push	{r4, lr}
 8013bca:	4604      	mov	r4, r0
 8013bcc:	4803      	ldr	r0, [pc, #12]	; (8013bdc <rmw_uxrce_fini_topic_memory+0x14>)
 8013bce:	4621      	mov	r1, r4
 8013bd0:	f004 fadc 	bl	801818c <put_memory>
 8013bd4:	2300      	movs	r3, #0
 8013bd6:	61a3      	str	r3, [r4, #24]
 8013bd8:	bd10      	pop	{r4, pc}
 8013bda:	bf00      	nop
 8013bdc:	2001091c 	.word	0x2001091c

08013be0 <rmw_uxrce_get_static_input_buffer_for_entity>:
 8013be0:	b082      	sub	sp, #8
 8013be2:	492b      	ldr	r1, [pc, #172]	; (8013c90 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 8013be4:	b530      	push	{r4, r5, lr}
 8013be6:	680d      	ldr	r5, [r1, #0]
 8013be8:	ac03      	add	r4, sp, #12
 8013bea:	e884 000c 	stmia.w	r4, {r2, r3}
 8013bee:	461c      	mov	r4, r3
 8013bf0:	2d00      	cmp	r5, #0
 8013bf2:	d04b      	beq.n	8013c8c <rmw_uxrce_get_static_input_buffer_for_entity+0xac>
 8013bf4:	462b      	mov	r3, r5
 8013bf6:	2100      	movs	r1, #0
 8013bf8:	689a      	ldr	r2, [r3, #8]
 8013bfa:	685b      	ldr	r3, [r3, #4]
 8013bfc:	f8d2 2814 	ldr.w	r2, [r2, #2068]	; 0x814
 8013c00:	4290      	cmp	r0, r2
 8013c02:	bf08      	it	eq
 8013c04:	3101      	addeq	r1, #1
 8013c06:	2b00      	cmp	r3, #0
 8013c08:	d1f6      	bne.n	8013bf8 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 8013c0a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8013c0e:	2b02      	cmp	r3, #2
 8013c10:	d029      	beq.n	8013c66 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8013c12:	d820      	bhi.n	8013c56 <rmw_uxrce_get_static_input_buffer_for_entity+0x76>
 8013c14:	428c      	cmp	r4, r1
 8013c16:	d828      	bhi.n	8013c6a <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 8013c18:	fab4 f284 	clz	r2, r4
 8013c1c:	0952      	lsrs	r2, r2, #5
 8013c1e:	b324      	cbz	r4, 8013c6a <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 8013c20:	b1dd      	cbz	r5, 8013c5a <rmw_uxrce_get_static_input_buffer_for_entity+0x7a>
 8013c22:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8013c26:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 8013c2a:	e001      	b.n	8013c30 <rmw_uxrce_get_static_input_buffer_for_entity+0x50>
 8013c2c:	686d      	ldr	r5, [r5, #4]
 8013c2e:	b1ad      	cbz	r5, 8013c5c <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 8013c30:	68ab      	ldr	r3, [r5, #8]
 8013c32:	f8d3 1814 	ldr.w	r1, [r3, #2068]	; 0x814
 8013c36:	4288      	cmp	r0, r1
 8013c38:	d1f8      	bne.n	8013c2c <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8013c3a:	f8d3 1818 	ldr.w	r1, [r3, #2072]	; 0x818
 8013c3e:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 8013c42:	4561      	cmp	r1, ip
 8013c44:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8013c48:	eb73 0e04 	sbcs.w	lr, r3, r4
 8013c4c:	daee      	bge.n	8013c2c <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8013c4e:	468c      	mov	ip, r1
 8013c50:	461c      	mov	r4, r3
 8013c52:	462a      	mov	r2, r5
 8013c54:	e7ea      	b.n	8013c2c <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8013c56:	2b03      	cmp	r3, #3
 8013c58:	d0dc      	beq.n	8013c14 <rmw_uxrce_get_static_input_buffer_for_entity+0x34>
 8013c5a:	2200      	movs	r2, #0
 8013c5c:	4610      	mov	r0, r2
 8013c5e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013c62:	b002      	add	sp, #8
 8013c64:	4770      	bx	lr
 8013c66:	428c      	cmp	r4, r1
 8013c68:	d905      	bls.n	8013c76 <rmw_uxrce_get_static_input_buffer_for_entity+0x96>
 8013c6a:	4809      	ldr	r0, [pc, #36]	; (8013c90 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 8013c6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013c70:	b002      	add	sp, #8
 8013c72:	f004 ba7b 	b.w	801816c <get_memory>
 8013c76:	fab4 f284 	clz	r2, r4
 8013c7a:	0952      	lsrs	r2, r2, #5
 8013c7c:	2c00      	cmp	r4, #0
 8013c7e:	d1ed      	bne.n	8013c5c <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 8013c80:	4803      	ldr	r0, [pc, #12]	; (8013c90 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 8013c82:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013c86:	b002      	add	sp, #8
 8013c88:	f004 ba70 	b.w	801816c <get_memory>
 8013c8c:	4629      	mov	r1, r5
 8013c8e:	e7bc      	b.n	8013c0a <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 8013c90:	200108fc 	.word	0x200108fc

08013c94 <rmw_uxrce_find_static_input_buffer_by_owner>:
 8013c94:	4b12      	ldr	r3, [pc, #72]	; (8013ce0 <rmw_uxrce_find_static_input_buffer_by_owner+0x4c>)
 8013c96:	681b      	ldr	r3, [r3, #0]
 8013c98:	b530      	push	{r4, r5, lr}
 8013c9a:	b1f3      	cbz	r3, 8013cda <rmw_uxrce_find_static_input_buffer_by_owner+0x46>
 8013c9c:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8013ca0:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
 8013ca4:	2400      	movs	r4, #0
 8013ca6:	e001      	b.n	8013cac <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 8013ca8:	685b      	ldr	r3, [r3, #4]
 8013caa:	b1a3      	cbz	r3, 8013cd6 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 8013cac:	689a      	ldr	r2, [r3, #8]
 8013cae:	f8d2 1814 	ldr.w	r1, [r2, #2068]	; 0x814
 8013cb2:	4288      	cmp	r0, r1
 8013cb4:	d1f8      	bne.n	8013ca8 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 8013cb6:	f8d2 1818 	ldr.w	r1, [r2, #2072]	; 0x818
 8013cba:	f502 6202 	add.w	r2, r2, #2080	; 0x820
 8013cbe:	4571      	cmp	r1, lr
 8013cc0:	f852 2c04 	ldr.w	r2, [r2, #-4]
 8013cc4:	eb72 050c 	sbcs.w	r5, r2, ip
 8013cc8:	daee      	bge.n	8013ca8 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 8013cca:	461c      	mov	r4, r3
 8013ccc:	685b      	ldr	r3, [r3, #4]
 8013cce:	468e      	mov	lr, r1
 8013cd0:	4694      	mov	ip, r2
 8013cd2:	2b00      	cmp	r3, #0
 8013cd4:	d1ea      	bne.n	8013cac <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 8013cd6:	4620      	mov	r0, r4
 8013cd8:	bd30      	pop	{r4, r5, pc}
 8013cda:	461c      	mov	r4, r3
 8013cdc:	4620      	mov	r0, r4
 8013cde:	bd30      	pop	{r4, r5, pc}
 8013ce0:	200108fc 	.word	0x200108fc
 8013ce4:	00000000 	.word	0x00000000

08013ce8 <rmw_uxrce_clean_expired_static_input_buffer>:
 8013ce8:	4b3d      	ldr	r3, [pc, #244]	; (8013de0 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 8013cea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013cee:	681f      	ldr	r7, [r3, #0]
 8013cf0:	ed2d 8b06 	vpush	{d8-d10}
 8013cf4:	b08d      	sub	sp, #52	; 0x34
 8013cf6:	f004 fb0d 	bl	8018314 <rmw_uros_epoch_nanos>
 8013cfa:	2f00      	cmp	r7, #0
 8013cfc:	d05d      	beq.n	8013dba <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 8013cfe:	46b8      	mov	r8, r7
 8013d00:	4681      	mov	r9, r0
 8013d02:	468a      	mov	sl, r1
 8013d04:	ac04      	add	r4, sp, #16
 8013d06:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8013d0a:	f895 3820 	ldrb.w	r3, [r5, #2080]	; 0x820
 8013d0e:	2b04      	cmp	r3, #4
 8013d10:	ed9f 8b2d 	vldr	d8, [pc, #180]	; 8013dc8 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 8013d14:	ed9f ab2e 	vldr	d10, [pc, #184]	; 8013dd0 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 8013d18:	ed9f 9b2f 	vldr	d9, [pc, #188]	; 8013dd8 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 8013d1c:	d03f      	beq.n	8013d9e <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 8013d1e:	2b05      	cmp	r3, #5
 8013d20:	d044      	beq.n	8013dac <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 8013d22:	2b03      	cmp	r3, #3
 8013d24:	d03b      	beq.n	8013d9e <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 8013d26:	ed8d 8b04 	vstr	d8, [sp, #16]
 8013d2a:	ed8d ab06 	vstr	d10, [sp, #24]
 8013d2e:	ab08      	add	r3, sp, #32
 8013d30:	ed8d 8b08 	vstr	d8, [sp, #32]
 8013d34:	ed8d 8b0a 	vstr	d8, [sp, #40]	; 0x28
 8013d38:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013d3a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8013d3e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8013d42:	f004 f8a3 	bl	8017e8c <rmw_time_equal>
 8013d46:	b118      	cbz	r0, 8013d50 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 8013d48:	ed8d 9b04 	vstr	d9, [sp, #16]
 8013d4c:	ed8d 8b06 	vstr	d8, [sp, #24]
 8013d50:	f8d5 6818 	ldr.w	r6, [r5, #2072]	; 0x818
 8013d54:	f505 6502 	add.w	r5, r5, #2080	; 0x820
 8013d58:	f855 7c04 	ldr.w	r7, [r5, #-4]
 8013d5c:	f8d8 b004 	ldr.w	fp, [r8, #4]
 8013d60:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8013d64:	f004 f8e8 	bl	8017f38 <rmw_time_total_nsec>
 8013d68:	1830      	adds	r0, r6, r0
 8013d6a:	eb47 0101 	adc.w	r1, r7, r1
 8013d6e:	4548      	cmp	r0, r9
 8013d70:	eb71 030a 	sbcs.w	r3, r1, sl
 8013d74:	db05      	blt.n	8013d82 <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 8013d76:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 8013d7a:	4591      	cmp	r9, r2
 8013d7c:	eb7a 0303 	sbcs.w	r3, sl, r3
 8013d80:	da03      	bge.n	8013d8a <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 8013d82:	4641      	mov	r1, r8
 8013d84:	4816      	ldr	r0, [pc, #88]	; (8013de0 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 8013d86:	f004 fa01 	bl	801818c <put_memory>
 8013d8a:	f1bb 0f00 	cmp.w	fp, #0
 8013d8e:	d014      	beq.n	8013dba <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 8013d90:	46d8      	mov	r8, fp
 8013d92:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8013d96:	f895 3820 	ldrb.w	r3, [r5, #2080]	; 0x820
 8013d9a:	2b04      	cmp	r3, #4
 8013d9c:	d1bf      	bne.n	8013d1e <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 8013d9e:	f8d5 3814 	ldr.w	r3, [r5, #2068]	; 0x814
 8013da2:	3340      	adds	r3, #64	; 0x40
 8013da4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013da6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8013daa:	e7c0      	b.n	8013d2e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 8013dac:	f8d5 3814 	ldr.w	r3, [r5, #2068]	; 0x814
 8013db0:	3348      	adds	r3, #72	; 0x48
 8013db2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013db4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8013db8:	e7b9      	b.n	8013d2e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 8013dba:	b00d      	add	sp, #52	; 0x34
 8013dbc:	ecbd 8b06 	vpop	{d8-d10}
 8013dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013dc4:	f3af 8000 	nop.w
	...
 8013dd0:	00000001 	.word	0x00000001
 8013dd4:	00000000 	.word	0x00000000
 8013dd8:	0000001e 	.word	0x0000001e
 8013ddc:	00000000 	.word	0x00000000
 8013de0:	200108fc 	.word	0x200108fc

08013de4 <run_xrce_session>:
 8013de4:	b510      	push	{r4, lr}
 8013de6:	788c      	ldrb	r4, [r1, #2]
 8013de8:	b086      	sub	sp, #24
 8013dea:	2c01      	cmp	r4, #1
 8013dec:	f8ad 200e 	strh.w	r2, [sp, #14]
 8013df0:	d00c      	beq.n	8013e0c <run_xrce_session+0x28>
 8013df2:	2401      	movs	r4, #1
 8013df4:	4619      	mov	r1, r3
 8013df6:	f10d 020e 	add.w	r2, sp, #14
 8013dfa:	f10d 0317 	add.w	r3, sp, #23
 8013dfe:	9400      	str	r4, [sp, #0]
 8013e00:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8013e04:	f001 f934 	bl	8015070 <uxr_run_session_until_all_status>
 8013e08:	b006      	add	sp, #24
 8013e0a:	bd10      	pop	{r4, pc}
 8013e0c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8013e10:	f000 fd50 	bl	80148b4 <uxr_flash_output_streams>
 8013e14:	4620      	mov	r0, r4
 8013e16:	b006      	add	sp, #24
 8013e18:	bd10      	pop	{r4, pc}
 8013e1a:	bf00      	nop

08013e1c <convert_qos_profile>:
 8013e1c:	7a4a      	ldrb	r2, [r1, #9]
 8013e1e:	f891 c008 	ldrb.w	ip, [r1, #8]
 8013e22:	2a02      	cmp	r2, #2
 8013e24:	bf18      	it	ne
 8013e26:	2200      	movne	r2, #0
 8013e28:	7002      	strb	r2, [r0, #0]
 8013e2a:	f1ac 0202 	sub.w	r2, ip, #2
 8013e2e:	fab2 f282 	clz	r2, r2
 8013e32:	0952      	lsrs	r2, r2, #5
 8013e34:	7042      	strb	r2, [r0, #1]
 8013e36:	780a      	ldrb	r2, [r1, #0]
 8013e38:	8889      	ldrh	r1, [r1, #4]
 8013e3a:	f1a2 0202 	sub.w	r2, r2, #2
 8013e3e:	8081      	strh	r1, [r0, #4]
 8013e40:	fab2 f282 	clz	r2, r2
 8013e44:	0952      	lsrs	r2, r2, #5
 8013e46:	7082      	strb	r2, [r0, #2]
 8013e48:	4770      	bx	lr
 8013e4a:	bf00      	nop

08013e4c <generate_service_topics>:
 8013e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013e4e:	461d      	mov	r5, r3
 8013e50:	b083      	sub	sp, #12
 8013e52:	4606      	mov	r6, r0
 8013e54:	4c11      	ldr	r4, [pc, #68]	; (8013e9c <generate_service_topics+0x50>)
 8013e56:	4608      	mov	r0, r1
 8013e58:	4b11      	ldr	r3, [pc, #68]	; (8013ea0 <generate_service_topics+0x54>)
 8013e5a:	4617      	mov	r7, r2
 8013e5c:	4629      	mov	r1, r5
 8013e5e:	4a11      	ldr	r2, [pc, #68]	; (8013ea4 <generate_service_topics+0x58>)
 8013e60:	9401      	str	r4, [sp, #4]
 8013e62:	9600      	str	r6, [sp, #0]
 8013e64:	f005 faf4 	bl	8019450 <sniprintf>
 8013e68:	4a0f      	ldr	r2, [pc, #60]	; (8013ea8 <generate_service_topics+0x5c>)
 8013e6a:	4604      	mov	r4, r0
 8013e6c:	4b0f      	ldr	r3, [pc, #60]	; (8013eac <generate_service_topics+0x60>)
 8013e6e:	9201      	str	r2, [sp, #4]
 8013e70:	4638      	mov	r0, r7
 8013e72:	4a0c      	ldr	r2, [pc, #48]	; (8013ea4 <generate_service_topics+0x58>)
 8013e74:	4629      	mov	r1, r5
 8013e76:	9600      	str	r6, [sp, #0]
 8013e78:	f005 faea 	bl	8019450 <sniprintf>
 8013e7c:	2c00      	cmp	r4, #0
 8013e7e:	bfa8      	it	ge
 8013e80:	42a5      	cmpge	r5, r4
 8013e82:	bfcc      	ite	gt
 8013e84:	2401      	movgt	r4, #1
 8013e86:	2400      	movle	r4, #0
 8013e88:	dd05      	ble.n	8013e96 <generate_service_topics+0x4a>
 8013e8a:	2800      	cmp	r0, #0
 8013e8c:	bfa8      	it	ge
 8013e8e:	4285      	cmpge	r5, r0
 8013e90:	bfcc      	ite	gt
 8013e92:	2401      	movgt	r4, #1
 8013e94:	2400      	movle	r4, #0
 8013e96:	4620      	mov	r0, r4
 8013e98:	b003      	add	sp, #12
 8013e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013e9c:	0801ba90 	.word	0x0801ba90
 8013ea0:	0801ba8c 	.word	0x0801ba8c
 8013ea4:	0801ba70 	.word	0x0801ba70
 8013ea8:	0801ba84 	.word	0x0801ba84
 8013eac:	0801ba80 	.word	0x0801ba80

08013eb0 <generate_service_types>:
 8013eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013eb4:	4606      	mov	r6, r0
 8013eb6:	b087      	sub	sp, #28
 8013eb8:	461c      	mov	r4, r3
 8013eba:	6883      	ldr	r3, [r0, #8]
 8013ebc:	460d      	mov	r5, r1
 8013ebe:	4617      	mov	r7, r2
 8013ec0:	4798      	blx	r3
 8013ec2:	68f3      	ldr	r3, [r6, #12]
 8013ec4:	4606      	mov	r6, r0
 8013ec6:	4798      	blx	r3
 8013ec8:	2300      	movs	r3, #0
 8013eca:	f8d0 b004 	ldr.w	fp, [r0, #4]
 8013ece:	6872      	ldr	r2, [r6, #4]
 8013ed0:	702b      	strb	r3, [r5, #0]
 8013ed2:	6813      	ldr	r3, [r2, #0]
 8013ed4:	2b00      	cmp	r3, #0
 8013ed6:	d03f      	beq.n	8013f58 <generate_service_types+0xa8>
 8013ed8:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8013f6c <generate_service_types+0xbc>
 8013edc:	4649      	mov	r1, r9
 8013ede:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8013f74 <generate_service_types+0xc4>
 8013ee2:	4628      	mov	r0, r5
 8013ee4:	f8df a090 	ldr.w	sl, [pc, #144]	; 8013f78 <generate_service_types+0xc8>
 8013ee8:	f8cd 8014 	str.w	r8, [sp, #20]
 8013eec:	6852      	ldr	r2, [r2, #4]
 8013eee:	9100      	str	r1, [sp, #0]
 8013ef0:	4621      	mov	r1, r4
 8013ef2:	f8cd 8008 	str.w	r8, [sp, #8]
 8013ef6:	f8cd a004 	str.w	sl, [sp, #4]
 8013efa:	e9cd 9203 	strd	r9, r2, [sp, #12]
 8013efe:	4a1a      	ldr	r2, [pc, #104]	; (8013f68 <generate_service_types+0xb8>)
 8013f00:	f005 faa6 	bl	8019450 <sniprintf>
 8013f04:	2300      	movs	r3, #0
 8013f06:	42a0      	cmp	r0, r4
 8013f08:	ea6f 0600 	mvn.w	r6, r0
 8013f0c:	703b      	strb	r3, [r7, #0]
 8013f0e:	f8db 3000 	ldr.w	r3, [fp]
 8013f12:	ea4f 76d6 	mov.w	r6, r6, lsr #31
 8013f16:	bfac      	ite	ge
 8013f18:	2500      	movge	r5, #0
 8013f1a:	2501      	movlt	r5, #1
 8013f1c:	b30b      	cbz	r3, 8013f62 <generate_service_types+0xb2>
 8013f1e:	4a13      	ldr	r2, [pc, #76]	; (8013f6c <generate_service_types+0xbc>)
 8013f20:	f8cd 8014 	str.w	r8, [sp, #20]
 8013f24:	402e      	ands	r6, r5
 8013f26:	f8db 1004 	ldr.w	r1, [fp, #4]
 8013f2a:	4638      	mov	r0, r7
 8013f2c:	9104      	str	r1, [sp, #16]
 8013f2e:	4621      	mov	r1, r4
 8013f30:	e9cd 2a00 	strd	r2, sl, [sp]
 8013f34:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8013f38:	4a0b      	ldr	r2, [pc, #44]	; (8013f68 <generate_service_types+0xb8>)
 8013f3a:	f005 fa89 	bl	8019450 <sniprintf>
 8013f3e:	2800      	cmp	r0, #0
 8013f40:	bfb4      	ite	lt
 8013f42:	2600      	movlt	r6, #0
 8013f44:	f006 0601 	andge.w	r6, r6, #1
 8013f48:	42a0      	cmp	r0, r4
 8013f4a:	bfac      	ite	ge
 8013f4c:	2000      	movge	r0, #0
 8013f4e:	f006 0001 	andlt.w	r0, r6, #1
 8013f52:	b007      	add	sp, #28
 8013f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f58:	4b05      	ldr	r3, [pc, #20]	; (8013f70 <generate_service_types+0xc0>)
 8013f5a:	f8df 9010 	ldr.w	r9, [pc, #16]	; 8013f6c <generate_service_types+0xbc>
 8013f5e:	4619      	mov	r1, r3
 8013f60:	e7bd      	b.n	8013ede <generate_service_types+0x2e>
 8013f62:	4b03      	ldr	r3, [pc, #12]	; (8013f70 <generate_service_types+0xc0>)
 8013f64:	461a      	mov	r2, r3
 8013f66:	e7db      	b.n	8013f20 <generate_service_types+0x70>
 8013f68:	0801ba68 	.word	0x0801ba68
 8013f6c:	0801ba64 	.word	0x0801ba64
 8013f70:	0801b854 	.word	0x0801b854
 8013f74:	0801ba78 	.word	0x0801ba78
 8013f78:	0801ba7c 	.word	0x0801ba7c

08013f7c <is_uxrce_rmw_identifier_valid>:
 8013f7c:	b510      	push	{r4, lr}
 8013f7e:	4604      	mov	r4, r0
 8013f80:	b140      	cbz	r0, 8013f94 <is_uxrce_rmw_identifier_valid+0x18>
 8013f82:	f7fe fbbd 	bl	8012700 <rmw_get_implementation_identifier>
 8013f86:	4601      	mov	r1, r0
 8013f88:	4620      	mov	r0, r4
 8013f8a:	f7ec f959 	bl	8000240 <strcmp>
 8013f8e:	fab0 f080 	clz	r0, r0
 8013f92:	0940      	lsrs	r0, r0, #5
 8013f94:	bd10      	pop	{r4, pc}
 8013f96:	bf00      	nop

08013f98 <service_msgs__msg__ServiceEventInfo__get_type_hash>:
 8013f98:	4800      	ldr	r0, [pc, #0]	; (8013f9c <service_msgs__msg__ServiceEventInfo__get_type_hash+0x4>)
 8013f9a:	4770      	bx	lr
 8013f9c:	20001a9c 	.word	0x20001a9c

08013fa0 <service_msgs__msg__ServiceEventInfo__get_type_description>:
 8013fa0:	b510      	push	{r4, lr}
 8013fa2:	4c08      	ldr	r4, [pc, #32]	; (8013fc4 <service_msgs__msg__ServiceEventInfo__get_type_description+0x24>)
 8013fa4:	7820      	ldrb	r0, [r4, #0]
 8013fa6:	b108      	cbz	r0, 8013fac <service_msgs__msg__ServiceEventInfo__get_type_description+0xc>
 8013fa8:	4807      	ldr	r0, [pc, #28]	; (8013fc8 <service_msgs__msg__ServiceEventInfo__get_type_description+0x28>)
 8013faa:	bd10      	pop	{r4, pc}
 8013fac:	f000 f858 	bl	8014060 <builtin_interfaces__msg__Time__get_type_description>
 8013fb0:	300c      	adds	r0, #12
 8013fb2:	4b06      	ldr	r3, [pc, #24]	; (8013fcc <service_msgs__msg__ServiceEventInfo__get_type_description+0x2c>)
 8013fb4:	c807      	ldmia	r0, {r0, r1, r2}
 8013fb6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8013fba:	2301      	movs	r3, #1
 8013fbc:	4802      	ldr	r0, [pc, #8]	; (8013fc8 <service_msgs__msg__ServiceEventInfo__get_type_description+0x28>)
 8013fbe:	7023      	strb	r3, [r4, #0]
 8013fc0:	bd10      	pop	{r4, pc}
 8013fc2:	bf00      	nop
 8013fc4:	2001093d 	.word	0x2001093d
 8013fc8:	0801ba98 	.word	0x0801ba98
 8013fcc:	20001c24 	.word	0x20001c24

08013fd0 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source>:
 8013fd0:	4800      	ldr	r0, [pc, #0]	; (8013fd4 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source+0x4>)
 8013fd2:	4770      	bx	lr
 8013fd4:	0801babc 	.word	0x0801babc

08013fd8 <service_msgs__msg__ServiceEventInfo__get_type_description_sources>:
 8013fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013fda:	4e0f      	ldr	r6, [pc, #60]	; (8014018 <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0x40>)
 8013fdc:	7837      	ldrb	r7, [r6, #0]
 8013fde:	b10f      	cbz	r7, 8013fe4 <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0xc>
 8013fe0:	480e      	ldr	r0, [pc, #56]	; (801401c <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0x44>)
 8013fe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013fe4:	4d0e      	ldr	r5, [pc, #56]	; (8014020 <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0x48>)
 8013fe6:	4c0f      	ldr	r4, [pc, #60]	; (8014024 <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0x4c>)
 8013fe8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013fea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013fec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013fee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013ff0:	682b      	ldr	r3, [r5, #0]
 8013ff2:	4638      	mov	r0, r7
 8013ff4:	f844 3b04 	str.w	r3, [r4], #4
 8013ff8:	f000 f83e 	bl	8014078 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 8013ffc:	2301      	movs	r3, #1
 8013ffe:	4684      	mov	ip, r0
 8014000:	7033      	strb	r3, [r6, #0]
 8014002:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014006:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014008:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801400c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801400e:	f8dc 3000 	ldr.w	r3, [ip]
 8014012:	4802      	ldr	r0, [pc, #8]	; (801401c <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0x44>)
 8014014:	6023      	str	r3, [r4, #0]
 8014016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014018:	2001093c 	.word	0x2001093c
 801401c:	0801bae0 	.word	0x0801bae0
 8014020:	0801babc 	.word	0x0801babc
 8014024:	20010940 	.word	0x20010940

08014028 <service_msgs__msg__ServiceEventInfo__init>:
 8014028:	b538      	push	{r3, r4, r5, lr}
 801402a:	b138      	cbz	r0, 801403c <service_msgs__msg__ServiceEventInfo__init+0x14>
 801402c:	1d05      	adds	r5, r0, #4
 801402e:	4628      	mov	r0, r5
 8014030:	f000 f842 	bl	80140b8 <builtin_interfaces__msg__Time__init>
 8014034:	4604      	mov	r4, r0
 8014036:	b120      	cbz	r0, 8014042 <service_msgs__msg__ServiceEventInfo__init+0x1a>
 8014038:	4620      	mov	r0, r4
 801403a:	bd38      	pop	{r3, r4, r5, pc}
 801403c:	4604      	mov	r4, r0
 801403e:	4620      	mov	r0, r4
 8014040:	bd38      	pop	{r3, r4, r5, pc}
 8014042:	4628      	mov	r0, r5
 8014044:	f000 f83c 	bl	80140c0 <builtin_interfaces__msg__Time__fini>
 8014048:	4620      	mov	r0, r4
 801404a:	bd38      	pop	{r3, r4, r5, pc}

0801404c <service_msgs__msg__ServiceEventInfo__fini>:
 801404c:	b110      	cbz	r0, 8014054 <service_msgs__msg__ServiceEventInfo__fini+0x8>
 801404e:	3004      	adds	r0, #4
 8014050:	f000 b836 	b.w	80140c0 <builtin_interfaces__msg__Time__fini>
 8014054:	4770      	bx	lr
 8014056:	bf00      	nop

08014058 <builtin_interfaces__msg__Time__get_type_hash>:
 8014058:	4800      	ldr	r0, [pc, #0]	; (801405c <builtin_interfaces__msg__Time__get_type_hash+0x4>)
 801405a:	4770      	bx	lr
 801405c:	20001fc0 	.word	0x20001fc0

08014060 <builtin_interfaces__msg__Time__get_type_description>:
 8014060:	4b03      	ldr	r3, [pc, #12]	; (8014070 <builtin_interfaces__msg__Time__get_type_description+0x10>)
 8014062:	781a      	ldrb	r2, [r3, #0]
 8014064:	b90a      	cbnz	r2, 801406a <builtin_interfaces__msg__Time__get_type_description+0xa>
 8014066:	2201      	movs	r2, #1
 8014068:	701a      	strb	r2, [r3, #0]
 801406a:	4802      	ldr	r0, [pc, #8]	; (8014074 <builtin_interfaces__msg__Time__get_type_description+0x14>)
 801406c:	4770      	bx	lr
 801406e:	bf00      	nop
 8014070:	20010989 	.word	0x20010989
 8014074:	0801baec 	.word	0x0801baec

08014078 <builtin_interfaces__msg__Time__get_individual_type_description_source>:
 8014078:	4800      	ldr	r0, [pc, #0]	; (801407c <builtin_interfaces__msg__Time__get_individual_type_description_source+0x4>)
 801407a:	4770      	bx	lr
 801407c:	0801bb10 	.word	0x0801bb10

08014080 <builtin_interfaces__msg__Time__get_type_description_sources>:
 8014080:	4b09      	ldr	r3, [pc, #36]	; (80140a8 <builtin_interfaces__msg__Time__get_type_description_sources+0x28>)
 8014082:	781a      	ldrb	r2, [r3, #0]
 8014084:	b96a      	cbnz	r2, 80140a2 <builtin_interfaces__msg__Time__get_type_description_sources+0x22>
 8014086:	2201      	movs	r2, #1
 8014088:	b430      	push	{r4, r5}
 801408a:	4d08      	ldr	r5, [pc, #32]	; (80140ac <builtin_interfaces__msg__Time__get_type_description_sources+0x2c>)
 801408c:	4c08      	ldr	r4, [pc, #32]	; (80140b0 <builtin_interfaces__msg__Time__get_type_description_sources+0x30>)
 801408e:	701a      	strb	r2, [r3, #0]
 8014090:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014092:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014094:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014096:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014098:	682b      	ldr	r3, [r5, #0]
 801409a:	4806      	ldr	r0, [pc, #24]	; (80140b4 <builtin_interfaces__msg__Time__get_type_description_sources+0x34>)
 801409c:	6023      	str	r3, [r4, #0]
 801409e:	bc30      	pop	{r4, r5}
 80140a0:	4770      	bx	lr
 80140a2:	4804      	ldr	r0, [pc, #16]	; (80140b4 <builtin_interfaces__msg__Time__get_type_description_sources+0x34>)
 80140a4:	4770      	bx	lr
 80140a6:	bf00      	nop
 80140a8:	20010988 	.word	0x20010988
 80140ac:	0801bb10 	.word	0x0801bb10
 80140b0:	2001098c 	.word	0x2001098c
 80140b4:	0801bb34 	.word	0x0801bb34

080140b8 <builtin_interfaces__msg__Time__init>:
 80140b8:	3800      	subs	r0, #0
 80140ba:	bf18      	it	ne
 80140bc:	2001      	movne	r0, #1
 80140be:	4770      	bx	lr

080140c0 <builtin_interfaces__msg__Time__fini>:
 80140c0:	4770      	bx	lr
 80140c2:	bf00      	nop

080140c4 <uxr_buffer_delete_entity>:
 80140c4:	b510      	push	{r4, lr}
 80140c6:	2300      	movs	r3, #0
 80140c8:	b08e      	sub	sp, #56	; 0x38
 80140ca:	4604      	mov	r4, r0
 80140cc:	9103      	str	r1, [sp, #12]
 80140ce:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80140d2:	2303      	movs	r3, #3
 80140d4:	2204      	movs	r2, #4
 80140d6:	9300      	str	r3, [sp, #0]
 80140d8:	ab06      	add	r3, sp, #24
 80140da:	f001 f9f5 	bl	80154c8 <uxr_prepare_stream_to_write_submessage>
 80140de:	b918      	cbnz	r0, 80140e8 <uxr_buffer_delete_entity+0x24>
 80140e0:	4604      	mov	r4, r0
 80140e2:	4620      	mov	r0, r4
 80140e4:	b00e      	add	sp, #56	; 0x38
 80140e6:	bd10      	pop	{r4, pc}
 80140e8:	9902      	ldr	r1, [sp, #8]
 80140ea:	aa05      	add	r2, sp, #20
 80140ec:	4620      	mov	r0, r4
 80140ee:	f001 fb27 	bl	8015740 <uxr_init_base_object_request>
 80140f2:	4604      	mov	r4, r0
 80140f4:	a905      	add	r1, sp, #20
 80140f6:	a806      	add	r0, sp, #24
 80140f8:	f002 ffea 	bl	80170d0 <uxr_serialize_DELETE_Payload>
 80140fc:	4620      	mov	r0, r4
 80140fe:	b00e      	add	sp, #56	; 0x38
 8014100:	bd10      	pop	{r4, pc}
 8014102:	bf00      	nop

08014104 <uxr_common_create_entity>:
 8014104:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8014108:	b510      	push	{r4, lr}
 801410a:	f1bc 0f01 	cmp.w	ip, #1
 801410e:	b08c      	sub	sp, #48	; 0x30
 8014110:	4604      	mov	r4, r0
 8014112:	9202      	str	r2, [sp, #8]
 8014114:	bf0c      	ite	eq
 8014116:	f003 0201 	andeq.w	r2, r3, #1
 801411a:	2200      	movne	r2, #0
 801411c:	330e      	adds	r3, #14
 801411e:	9103      	str	r1, [sp, #12]
 8014120:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 8014124:	441a      	add	r2, r3
 8014126:	ab04      	add	r3, sp, #16
 8014128:	9101      	str	r1, [sp, #4]
 801412a:	2101      	movs	r1, #1
 801412c:	b292      	uxth	r2, r2
 801412e:	9100      	str	r1, [sp, #0]
 8014130:	9903      	ldr	r1, [sp, #12]
 8014132:	f001 f9c9 	bl	80154c8 <uxr_prepare_stream_to_write_submessage>
 8014136:	b918      	cbnz	r0, 8014140 <uxr_common_create_entity+0x3c>
 8014138:	4604      	mov	r4, r0
 801413a:	4620      	mov	r0, r4
 801413c:	b00c      	add	sp, #48	; 0x30
 801413e:	bd10      	pop	{r4, pc}
 8014140:	9902      	ldr	r1, [sp, #8]
 8014142:	4620      	mov	r0, r4
 8014144:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014146:	f001 fafb 	bl	8015740 <uxr_init_base_object_request>
 801414a:	4604      	mov	r4, r0
 801414c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801414e:	a804      	add	r0, sp, #16
 8014150:	f002 ff18 	bl	8016f84 <uxr_serialize_CREATE_Payload>
 8014154:	4620      	mov	r0, r4
 8014156:	b00c      	add	sp, #48	; 0x30
 8014158:	bd10      	pop	{r4, pc}
 801415a:	bf00      	nop

0801415c <uxr_buffer_create_participant_bin>:
 801415c:	b570      	push	{r4, r5, r6, lr}
 801415e:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 8014162:	4605      	mov	r5, r0
 8014164:	ac11      	add	r4, sp, #68	; 0x44
 8014166:	f8ad 3254 	strh.w	r3, [sp, #596]	; 0x254
 801416a:	2303      	movs	r3, #3
 801416c:	f89d 626c 	ldrb.w	r6, [sp, #620]	; 0x26c
 8014170:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8014174:	7223      	strb	r3, [r4, #8]
 8014176:	2300      	movs	r3, #0
 8014178:	2201      	movs	r2, #1
 801417a:	f88d 3014 	strb.w	r3, [sp, #20]
 801417e:	9b9a      	ldr	r3, [sp, #616]	; 0x268
 8014180:	7122      	strb	r2, [r4, #4]
 8014182:	b1cb      	cbz	r3, 80141b8 <uxr_buffer_create_participant_bin+0x5c>
 8014184:	f88d 201c 	strb.w	r2, [sp, #28]
 8014188:	9308      	str	r3, [sp, #32]
 801418a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801418e:	a915      	add	r1, sp, #84	; 0x54
 8014190:	a809      	add	r0, sp, #36	; 0x24
 8014192:	f7f9 fe79 	bl	800de88 <ucdr_init_buffer>
 8014196:	a905      	add	r1, sp, #20
 8014198:	a809      	add	r0, sp, #36	; 0x24
 801419a:	f002 fceb 	bl	8016b74 <uxr_serialize_OBJK_DomainParticipant_Binary>
 801419e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80141a0:	9600      	str	r6, [sp, #0]
 80141a2:	4628      	mov	r0, r5
 80141a4:	9401      	str	r4, [sp, #4]
 80141a6:	60e3      	str	r3, [r4, #12]
 80141a8:	b29b      	uxth	r3, r3
 80141aa:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80141ae:	f7ff ffa9 	bl	8014104 <uxr_common_create_entity>
 80141b2:	f50d 7d16 	add.w	sp, sp, #600	; 0x258
 80141b6:	bd70      	pop	{r4, r5, r6, pc}
 80141b8:	f88d 301c 	strb.w	r3, [sp, #28]
 80141bc:	e7e5      	b.n	801418a <uxr_buffer_create_participant_bin+0x2e>
 80141be:	bf00      	nop

080141c0 <uxr_buffer_create_replier_bin>:
 80141c0:	b570      	push	{r4, r5, r6, lr}
 80141c2:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 80141c6:	4605      	mov	r5, r0
 80141c8:	4618      	mov	r0, r3
 80141ca:	9105      	str	r1, [sp, #20]
 80141cc:	a999      	add	r1, sp, #612	; 0x264
 80141ce:	f89d 6294 	ldrb.w	r6, [sp, #660]	; 0x294
 80141d2:	ac15      	add	r4, sp, #84	; 0x54
 80141d4:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80141d8:	2308      	movs	r3, #8
 80141da:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
 80141de:	f000 f909 	bl	80143f4 <uxr_object_id_to_raw>
 80141e2:	9b9e      	ldr	r3, [sp, #632]	; 0x278
 80141e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80141e8:	a919      	add	r1, sp, #100	; 0x64
 80141ea:	a80d      	add	r0, sp, #52	; 0x34
 80141ec:	9306      	str	r3, [sp, #24]
 80141ee:	9b9f      	ldr	r3, [sp, #636]	; 0x27c
 80141f0:	9307      	str	r3, [sp, #28]
 80141f2:	9ba0      	ldr	r3, [sp, #640]	; 0x280
 80141f4:	9308      	str	r3, [sp, #32]
 80141f6:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80141f8:	930c      	str	r3, [sp, #48]	; 0x30
 80141fa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80141fc:	930a      	str	r3, [sp, #40]	; 0x28
 80141fe:	2301      	movs	r3, #1
 8014200:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8014204:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8014208:	2303      	movs	r3, #3
 801420a:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
 801420e:	f7f9 fe3b 	bl	800de88 <ucdr_init_buffer>
 8014212:	a906      	add	r1, sp, #24
 8014214:	a80d      	add	r0, sp, #52	; 0x34
 8014216:	f002 fccf 	bl	8016bb8 <uxr_serialize_OBJK_Replier_Binary>
 801421a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801421c:	4628      	mov	r0, r5
 801421e:	9600      	str	r6, [sp, #0]
 8014220:	9318      	str	r3, [sp, #96]	; 0x60
 8014222:	b29b      	uxth	r3, r3
 8014224:	9401      	str	r4, [sp, #4]
 8014226:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801422a:	f7ff ff6b 	bl	8014104 <uxr_common_create_entity>
 801422e:	f50d 7d1a 	add.w	sp, sp, #616	; 0x268
 8014232:	bd70      	pop	{r4, r5, r6, pc}

08014234 <get_custom_error>:
 8014234:	4b01      	ldr	r3, [pc, #4]	; (801423c <get_custom_error+0x8>)
 8014236:	7818      	ldrb	r0, [r3, #0]
 8014238:	4770      	bx	lr
 801423a:	bf00      	nop
 801423c:	200109b0 	.word	0x200109b0

08014240 <recv_custom_msg>:
 8014240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014244:	4693      	mov	fp, r2
 8014246:	b089      	sub	sp, #36	; 0x24
 8014248:	2200      	movs	r2, #0
 801424a:	4604      	mov	r4, r0
 801424c:	468a      	mov	sl, r1
 801424e:	9305      	str	r3, [sp, #20]
 8014250:	f88d 201e 	strb.w	r2, [sp, #30]
 8014254:	f890 2200 	ldrb.w	r2, [r0, #512]	; 0x200
 8014258:	b322      	cbz	r2, 80142a4 <recv_custom_msg+0x64>
 801425a:	f200 2902 	addw	r9, r0, #514	; 0x202
 801425e:	f10d 081f 	add.w	r8, sp, #31
 8014262:	af05      	add	r7, sp, #20
 8014264:	f10d 061e 	add.w	r6, sp, #30
 8014268:	f44f 7500 	mov.w	r5, #512	; 0x200
 801426c:	e002      	b.n	8014274 <recv_custom_msg+0x34>
 801426e:	9b05      	ldr	r3, [sp, #20]
 8014270:	2b00      	cmp	r3, #0
 8014272:	dd0f      	ble.n	8014294 <recv_custom_msg+0x54>
 8014274:	f8d4 1274 	ldr.w	r1, [r4, #628]	; 0x274
 8014278:	4623      	mov	r3, r4
 801427a:	4622      	mov	r2, r4
 801427c:	4648      	mov	r0, r9
 801427e:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8014282:	e9cd 5600 	strd	r5, r6, [sp]
 8014286:	f001 fc71 	bl	8015b6c <uxr_read_framed_msg>
 801428a:	2800      	cmp	r0, #0
 801428c:	d0ef      	beq.n	801426e <recv_custom_msg+0x2e>
 801428e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8014292:	b1b3      	cbz	r3, 80142c2 <recv_custom_msg+0x82>
 8014294:	4b0f      	ldr	r3, [pc, #60]	; (80142d4 <recv_custom_msg+0x94>)
 8014296:	2000      	movs	r0, #0
 8014298:	f89d 201f 	ldrb.w	r2, [sp, #31]
 801429c:	701a      	strb	r2, [r3, #0]
 801429e:	b009      	add	sp, #36	; 0x24
 80142a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80142a4:	f10d 021f 	add.w	r2, sp, #31
 80142a8:	4601      	mov	r1, r0
 80142aa:	9200      	str	r2, [sp, #0]
 80142ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80142b0:	f8d0 5274 	ldr.w	r5, [r0, #628]	; 0x274
 80142b4:	47a8      	blx	r5
 80142b6:	2800      	cmp	r0, #0
 80142b8:	d0ec      	beq.n	8014294 <recv_custom_msg+0x54>
 80142ba:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80142be:	2b00      	cmp	r3, #0
 80142c0:	d1e8      	bne.n	8014294 <recv_custom_msg+0x54>
 80142c2:	f8cb 0000 	str.w	r0, [fp]
 80142c6:	2001      	movs	r0, #1
 80142c8:	f8ca 4000 	str.w	r4, [sl]
 80142cc:	b009      	add	sp, #36	; 0x24
 80142ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80142d2:	bf00      	nop
 80142d4:	200109b0 	.word	0x200109b0

080142d8 <send_custom_msg>:
 80142d8:	b530      	push	{r4, r5, lr}
 80142da:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 80142de:	b087      	sub	sp, #28
 80142e0:	4614      	mov	r4, r2
 80142e2:	b995      	cbnz	r5, 801430a <send_custom_msg+0x32>
 80142e4:	f8d0 5270 	ldr.w	r5, [r0, #624]	; 0x270
 80142e8:	f10d 0317 	add.w	r3, sp, #23
 80142ec:	47a8      	blx	r5
 80142ee:	1e03      	subs	r3, r0, #0
 80142f0:	bf18      	it	ne
 80142f2:	2301      	movne	r3, #1
 80142f4:	42a0      	cmp	r0, r4
 80142f6:	bf18      	it	ne
 80142f8:	2300      	movne	r3, #0
 80142fa:	b91b      	cbnz	r3, 8014304 <send_custom_msg+0x2c>
 80142fc:	4a0a      	ldr	r2, [pc, #40]	; (8014328 <send_custom_msg+0x50>)
 80142fe:	f89d 1017 	ldrb.w	r1, [sp, #23]
 8014302:	7011      	strb	r1, [r2, #0]
 8014304:	4618      	mov	r0, r3
 8014306:	b007      	add	sp, #28
 8014308:	bd30      	pop	{r4, r5, pc}
 801430a:	460b      	mov	r3, r1
 801430c:	2200      	movs	r2, #0
 801430e:	f10d 0117 	add.w	r1, sp, #23
 8014312:	9400      	str	r4, [sp, #0]
 8014314:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8014318:	4602      	mov	r2, r0
 801431a:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
 801431e:	f200 2002 	addw	r0, r0, #514	; 0x202
 8014322:	f001 fa45 	bl	80157b0 <uxr_write_framed_msg>
 8014326:	e7e2      	b.n	80142ee <send_custom_msg+0x16>
 8014328:	200109b0 	.word	0x200109b0

0801432c <uxr_set_custom_transport_callbacks>:
 801432c:	f880 1200 	strb.w	r1, [r0, #512]	; 0x200
 8014330:	9901      	ldr	r1, [sp, #4]
 8014332:	e9c0 239a 	strd	r2, r3, [r0, #616]	; 0x268
 8014336:	9b00      	ldr	r3, [sp, #0]
 8014338:	e9c0 319c 	strd	r3, r1, [r0, #624]	; 0x270
 801433c:	4770      	bx	lr
 801433e:	bf00      	nop

08014340 <uxr_init_custom_transport>:
 8014340:	b538      	push	{r3, r4, r5, lr}
 8014342:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
 8014346:	b303      	cbz	r3, 801438a <uxr_init_custom_transport+0x4a>
 8014348:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 801434c:	4604      	mov	r4, r0
 801434e:	b1e2      	cbz	r2, 801438a <uxr_init_custom_transport+0x4a>
 8014350:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 8014354:	b1ca      	cbz	r2, 801438a <uxr_init_custom_transport+0x4a>
 8014356:	f8d0 2274 	ldr.w	r2, [r0, #628]	; 0x274
 801435a:	b1b2      	cbz	r2, 801438a <uxr_init_custom_transport+0x4a>
 801435c:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
 8014360:	4798      	blx	r3
 8014362:	4605      	mov	r5, r0
 8014364:	b188      	cbz	r0, 801438a <uxr_init_custom_transport+0x4a>
 8014366:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 801436a:	b98b      	cbnz	r3, 8014390 <uxr_init_custom_transport+0x50>
 801436c:	4b0b      	ldr	r3, [pc, #44]	; (801439c <uxr_init_custom_transport+0x5c>)
 801436e:	4628      	mov	r0, r5
 8014370:	490b      	ldr	r1, [pc, #44]	; (80143a0 <uxr_init_custom_transport+0x60>)
 8014372:	4a0c      	ldr	r2, [pc, #48]	; (80143a4 <uxr_init_custom_transport+0x64>)
 8014374:	f8c4 3280 	str.w	r3, [r4, #640]	; 0x280
 8014378:	f44f 7300 	mov.w	r3, #512	; 0x200
 801437c:	f8c4 2284 	str.w	r2, [r4, #644]	; 0x284
 8014380:	f8a4 3288 	strh.w	r3, [r4, #648]	; 0x288
 8014384:	e9c4 419e 	strd	r4, r1, [r4, #632]	; 0x278
 8014388:	bd38      	pop	{r3, r4, r5, pc}
 801438a:	2500      	movs	r5, #0
 801438c:	4628      	mov	r0, r5
 801438e:	bd38      	pop	{r3, r4, r5, pc}
 8014390:	2100      	movs	r1, #0
 8014392:	f204 2002 	addw	r0, r4, #514	; 0x202
 8014396:	f001 fa05 	bl	80157a4 <uxr_init_framing_io>
 801439a:	e7e7      	b.n	801436c <uxr_init_custom_transport+0x2c>
 801439c:	08014241 	.word	0x08014241
 80143a0:	080142d9 	.word	0x080142d9
 80143a4:	08014235 	.word	0x08014235

080143a8 <uxr_close_custom_transport>:
 80143a8:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 80143ac:	4718      	bx	r3
 80143ae:	bf00      	nop

080143b0 <uxr_object_id>:
 80143b0:	b082      	sub	sp, #8
 80143b2:	2300      	movs	r3, #0
 80143b4:	f88d 1006 	strb.w	r1, [sp, #6]
 80143b8:	f360 030f 	bfi	r3, r0, #0, #16
 80143bc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80143c0:	f362 431f 	bfi	r3, r2, #16, #16
 80143c4:	4618      	mov	r0, r3
 80143c6:	b002      	add	sp, #8
 80143c8:	4770      	bx	lr
 80143ca:	bf00      	nop

080143cc <uxr_object_id_from_raw>:
 80143cc:	7843      	ldrb	r3, [r0, #1]
 80143ce:	b082      	sub	sp, #8
 80143d0:	7801      	ldrb	r1, [r0, #0]
 80143d2:	2000      	movs	r0, #0
 80143d4:	091a      	lsrs	r2, r3, #4
 80143d6:	f003 030f 	and.w	r3, r3, #15
 80143da:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80143de:	f88d 3006 	strb.w	r3, [sp, #6]
 80143e2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80143e6:	f362 000f 	bfi	r0, r2, #0, #16
 80143ea:	f363 401f 	bfi	r0, r3, #16, #16
 80143ee:	b002      	add	sp, #8
 80143f0:	4770      	bx	lr
 80143f2:	bf00      	nop

080143f4 <uxr_object_id_to_raw>:
 80143f4:	4602      	mov	r2, r0
 80143f6:	f3c0 4303 	ubfx	r3, r0, #16, #4
 80143fa:	b082      	sub	sp, #8
 80143fc:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 8014400:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 8014404:	f881 c000 	strb.w	ip, [r1]
 8014408:	7048      	strb	r0, [r1, #1]
 801440a:	b002      	add	sp, #8
 801440c:	4770      	bx	lr
 801440e:	bf00      	nop

08014410 <uxr_buffer_request_data>:
 8014410:	b530      	push	{r4, r5, lr}
 8014412:	b095      	sub	sp, #84	; 0x54
 8014414:	4604      	mov	r4, r0
 8014416:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8014418:	9303      	str	r3, [sp, #12]
 801441a:	2d00      	cmp	r5, #0
 801441c:	f88d 301c 	strb.w	r3, [sp, #28]
 8014420:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8014424:	f04f 0200 	mov.w	r2, #0
 8014428:	bf14      	ite	ne
 801442a:	2101      	movne	r1, #1
 801442c:	4611      	moveq	r1, r2
 801442e:	f88d 201d 	strb.w	r2, [sp, #29]
 8014432:	f88d 201e 	strb.w	r2, [sp, #30]
 8014436:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801443a:	d021      	beq.n	8014480 <uxr_buffer_request_data+0x70>
 801443c:	686b      	ldr	r3, [r5, #4]
 801443e:	2210      	movs	r2, #16
 8014440:	6829      	ldr	r1, [r5, #0]
 8014442:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 8014446:	f8cd 1026 	str.w	r1, [sp, #38]	; 0x26
 801444a:	2308      	movs	r3, #8
 801444c:	2100      	movs	r1, #0
 801444e:	4620      	mov	r0, r4
 8014450:	e9cd 3100 	strd	r3, r1, [sp]
 8014454:	ab0c      	add	r3, sp, #48	; 0x30
 8014456:	9905      	ldr	r1, [sp, #20]
 8014458:	f001 f836 	bl	80154c8 <uxr_prepare_stream_to_write_submessage>
 801445c:	b918      	cbnz	r0, 8014466 <uxr_buffer_request_data+0x56>
 801445e:	4604      	mov	r4, r0
 8014460:	4620      	mov	r0, r4
 8014462:	b015      	add	sp, #84	; 0x54
 8014464:	bd30      	pop	{r4, r5, pc}
 8014466:	9904      	ldr	r1, [sp, #16]
 8014468:	aa06      	add	r2, sp, #24
 801446a:	4620      	mov	r0, r4
 801446c:	f001 f968 	bl	8015740 <uxr_init_base_object_request>
 8014470:	4604      	mov	r4, r0
 8014472:	a906      	add	r1, sp, #24
 8014474:	a80c      	add	r0, sp, #48	; 0x30
 8014476:	f002 fed5 	bl	8017224 <uxr_serialize_READ_DATA_Payload>
 801447a:	4620      	mov	r0, r4
 801447c:	b015      	add	sp, #84	; 0x54
 801447e:	bd30      	pop	{r4, r5, pc}
 8014480:	2208      	movs	r2, #8
 8014482:	e7e2      	b.n	801444a <uxr_buffer_request_data+0x3a>

08014484 <uxr_buffer_cancel_data>:
 8014484:	b510      	push	{r4, lr}
 8014486:	2300      	movs	r3, #0
 8014488:	b094      	sub	sp, #80	; 0x50
 801448a:	4604      	mov	r4, r0
 801448c:	9205      	str	r2, [sp, #20]
 801448e:	9301      	str	r3, [sp, #4]
 8014490:	f8ad 301c 	strh.w	r3, [sp, #28]
 8014494:	f88d 301e 	strb.w	r3, [sp, #30]
 8014498:	f8cd 3026 	str.w	r3, [sp, #38]	; 0x26
 801449c:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 80144a0:	2308      	movs	r3, #8
 80144a2:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80144a6:	2201      	movs	r2, #1
 80144a8:	9300      	str	r3, [sp, #0]
 80144aa:	ab0c      	add	r3, sp, #48	; 0x30
 80144ac:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 80144b0:	2210      	movs	r2, #16
 80144b2:	f001 f809 	bl	80154c8 <uxr_prepare_stream_to_write_submessage>
 80144b6:	b918      	cbnz	r0, 80144c0 <uxr_buffer_cancel_data+0x3c>
 80144b8:	4604      	mov	r4, r0
 80144ba:	4620      	mov	r0, r4
 80144bc:	b014      	add	sp, #80	; 0x50
 80144be:	bd10      	pop	{r4, pc}
 80144c0:	9905      	ldr	r1, [sp, #20]
 80144c2:	aa06      	add	r2, sp, #24
 80144c4:	4620      	mov	r0, r4
 80144c6:	f001 f93b 	bl	8015740 <uxr_init_base_object_request>
 80144ca:	4604      	mov	r4, r0
 80144cc:	a906      	add	r1, sp, #24
 80144ce:	a80c      	add	r0, sp, #48	; 0x30
 80144d0:	f002 fea8 	bl	8017224 <uxr_serialize_READ_DATA_Payload>
 80144d4:	4620      	mov	r0, r4
 80144d6:	b014      	add	sp, #80	; 0x50
 80144d8:	bd10      	pop	{r4, pc}
 80144da:	bf00      	nop

080144dc <read_submessage_format>:
 80144dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80144e0:	b095      	sub	sp, #84	; 0x54
 80144e2:	f8bd 7078 	ldrh.w	r7, [sp, #120]	; 0x78
 80144e6:	b113      	cbz	r3, 80144ee <read_submessage_format+0x12>
 80144e8:	b015      	add	sp, #84	; 0x54
 80144ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80144ee:	4606      	mov	r6, r0
 80144f0:	981c      	ldr	r0, [sp, #112]	; 0x70
 80144f2:	460c      	mov	r4, r1
 80144f4:	4615      	mov	r5, r2
 80144f6:	9004      	str	r0, [sp, #16]
 80144f8:	4699      	mov	r9, r3
 80144fa:	981d      	ldr	r0, [sp, #116]	; 0x74
 80144fc:	f89d 8076 	ldrb.w	r8, [sp, #118]	; 0x76
 8014500:	9005      	str	r0, [sp, #20]
 8014502:	a80c      	add	r0, sp, #48	; 0x30
 8014504:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8014508:	1a52      	subs	r2, r2, r1
 801450a:	f7f9 fcbd 	bl	800de88 <ucdr_init_buffer>
 801450e:	a80c      	add	r0, sp, #48	; 0x30
 8014510:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8014514:	f7f9 fc8c 	bl	800de30 <ucdr_set_on_full_buffer_callback>
 8014518:	69e2      	ldr	r2, [r4, #28]
 801451a:	b19a      	cbz	r2, 8014544 <read_submessage_format+0x68>
 801451c:	f1b8 0f07 	cmp.w	r8, #7
 8014520:	f882 9014 	strb.w	r9, [r2, #20]
 8014524:	d040      	beq.n	80145a8 <read_submessage_format+0xcc>
 8014526:	f1b8 0f08 	cmp.w	r8, #8
 801452a:	d02e      	beq.n	801458a <read_submessage_format+0xae>
 801452c:	f1b8 0f06 	cmp.w	r8, #6
 8014530:	d011      	beq.n	8014556 <read_submessage_format+0x7a>
 8014532:	2301      	movs	r3, #1
 8014534:	7513      	strb	r3, [r2, #20]
 8014536:	4629      	mov	r1, r5
 8014538:	4620      	mov	r0, r4
 801453a:	f7f9 fcf9 	bl	800df30 <ucdr_advance_buffer>
 801453e:	b015      	add	sp, #84	; 0x54
 8014540:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014544:	f1b8 0f07 	cmp.w	r8, #7
 8014548:	d02e      	beq.n	80145a8 <read_submessage_format+0xcc>
 801454a:	f1b8 0f08 	cmp.w	r8, #8
 801454e:	d01c      	beq.n	801458a <read_submessage_format+0xae>
 8014550:	f1b8 0f06 	cmp.w	r8, #6
 8014554:	d1ef      	bne.n	8014536 <read_submessage_format+0x5a>
 8014556:	f8d6 8088 	ldr.w	r8, [r6, #136]	; 0x88
 801455a:	f1b8 0f00 	cmp.w	r8, #0
 801455e:	d011      	beq.n	8014584 <read_submessage_format+0xa8>
 8014560:	ab0c      	add	r3, sp, #48	; 0x30
 8014562:	9501      	str	r5, [sp, #4]
 8014564:	463a      	mov	r2, r7
 8014566:	4630      	mov	r0, r6
 8014568:	9300      	str	r3, [sp, #0]
 801456a:	2306      	movs	r3, #6
 801456c:	f88d 3016 	strb.w	r3, [sp, #22]
 8014570:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 8014574:	9302      	str	r3, [sp, #8]
 8014576:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 801457a:	47c0      	blx	r8
 801457c:	2301      	movs	r3, #1
 801457e:	69e2      	ldr	r2, [r4, #28]
 8014580:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 8014584:	2a00      	cmp	r2, #0
 8014586:	d1d4      	bne.n	8014532 <read_submessage_format+0x56>
 8014588:	e7d5      	b.n	8014536 <read_submessage_format+0x5a>
 801458a:	f8d6 30a4 	ldr.w	r3, [r6, #164]	; 0xa4
 801458e:	2b00      	cmp	r3, #0
 8014590:	d0f8      	beq.n	8014584 <read_submessage_format+0xa8>
 8014592:	a80c      	add	r0, sp, #48	; 0x30
 8014594:	a906      	add	r1, sp, #24
 8014596:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 801459a:	f002 ff0f 	bl	80173bc <uxr_deserialize_SampleIdentity>
 801459e:	b9a0      	cbnz	r0, 80145ca <read_submessage_format+0xee>
 80145a0:	69e2      	ldr	r2, [r4, #28]
 80145a2:	2a00      	cmp	r2, #0
 80145a4:	d1c5      	bne.n	8014532 <read_submessage_format+0x56>
 80145a6:	e7c6      	b.n	8014536 <read_submessage_format+0x5a>
 80145a8:	f8d6 30ac 	ldr.w	r3, [r6, #172]	; 0xac
 80145ac:	b13b      	cbz	r3, 80145be <read_submessage_format+0xe2>
 80145ae:	a906      	add	r1, sp, #24
 80145b0:	a80c      	add	r0, sp, #48	; 0x30
 80145b2:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 80145b6:	f002 fbd5 	bl	8016d64 <uxr_deserialize_BaseObjectRequest>
 80145ba:	bb60      	cbnz	r0, 8014616 <read_submessage_format+0x13a>
 80145bc:	69e2      	ldr	r2, [r4, #28]
 80145be:	68a3      	ldr	r3, [r4, #8]
 80145c0:	442b      	add	r3, r5
 80145c2:	60a3      	str	r3, [r4, #8]
 80145c4:	2a00      	cmp	r2, #0
 80145c6:	d1b4      	bne.n	8014532 <read_submessage_format+0x56>
 80145c8:	e7b5      	b.n	8014536 <read_submessage_format+0x5a>
 80145ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80145cc:	a80c      	add	r0, sp, #48	; 0x30
 80145ce:	eba8 0803 	sub.w	r8, r8, r3
 80145d2:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 80145d6:	44a8      	add	r8, r5
 80145d8:	1a52      	subs	r2, r2, r1
 80145da:	f7f9 fc55 	bl	800de88 <ucdr_init_buffer>
 80145de:	a80c      	add	r0, sp, #48	; 0x30
 80145e0:	fa1f f888 	uxth.w	r8, r8
 80145e4:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80145e8:	f7f9 fc22 	bl	800de30 <ucdr_set_on_full_buffer_callback>
 80145ec:	ab0c      	add	r3, sp, #48	; 0x30
 80145ee:	2108      	movs	r1, #8
 80145f0:	f8cd 8004 	str.w	r8, [sp, #4]
 80145f4:	9300      	str	r3, [sp, #0]
 80145f6:	463a      	mov	r2, r7
 80145f8:	f88d 1016 	strb.w	r1, [sp, #22]
 80145fc:	ab06      	add	r3, sp, #24
 80145fe:	f8d6 10a8 	ldr.w	r1, [r6, #168]	; 0xa8
 8014602:	4630      	mov	r0, r6
 8014604:	9102      	str	r1, [sp, #8]
 8014606:	9905      	ldr	r1, [sp, #20]
 8014608:	f8d6 70a4 	ldr.w	r7, [r6, #164]	; 0xa4
 801460c:	47b8      	blx	r7
 801460e:	2301      	movs	r3, #1
 8014610:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 8014614:	e7c4      	b.n	80145a0 <read_submessage_format+0xc4>
 8014616:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 801461a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801461c:	a80c      	add	r0, sp, #48	; 0x30
 801461e:	1a52      	subs	r2, r2, r1
 8014620:	eba8 0803 	sub.w	r8, r8, r3
 8014624:	f7f9 fc30 	bl	800de88 <ucdr_init_buffer>
 8014628:	a80c      	add	r0, sp, #48	; 0x30
 801462a:	44a8      	add	r8, r5
 801462c:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8014630:	f7f9 fbfe 	bl	800de30 <ucdr_set_on_full_buffer_callback>
 8014634:	ab0c      	add	r3, sp, #48	; 0x30
 8014636:	f89d 1018 	ldrb.w	r1, [sp, #24]
 801463a:	fa1f f888 	uxth.w	r8, r8
 801463e:	9300      	str	r3, [sp, #0]
 8014640:	463a      	mov	r2, r7
 8014642:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8014646:	4630      	mov	r0, r6
 8014648:	f8cd 8004 	str.w	r8, [sp, #4]
 801464c:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8014650:	2107      	movs	r1, #7
 8014652:	f88d 1016 	strb.w	r1, [sp, #22]
 8014656:	b29b      	uxth	r3, r3
 8014658:	f8d6 10b0 	ldr.w	r1, [r6, #176]	; 0xb0
 801465c:	9102      	str	r1, [sp, #8]
 801465e:	9905      	ldr	r1, [sp, #20]
 8014660:	f8d6 70ac 	ldr.w	r7, [r6, #172]	; 0xac
 8014664:	47b8      	blx	r7
 8014666:	2301      	movs	r3, #1
 8014668:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 801466c:	e7a6      	b.n	80145bc <read_submessage_format+0xe0>
 801466e:	bf00      	nop

08014670 <on_get_fragmentation_info>:
 8014670:	b500      	push	{lr}
 8014672:	b08b      	sub	sp, #44	; 0x2c
 8014674:	4601      	mov	r1, r0
 8014676:	2204      	movs	r2, #4
 8014678:	a802      	add	r0, sp, #8
 801467a:	f7f9 fc05 	bl	800de88 <ucdr_init_buffer>
 801467e:	f10d 0305 	add.w	r3, sp, #5
 8014682:	f10d 0206 	add.w	r2, sp, #6
 8014686:	a901      	add	r1, sp, #4
 8014688:	a802      	add	r0, sp, #8
 801468a:	f001 fe5f 	bl	801634c <uxr_read_submessage_header>
 801468e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8014692:	2b0d      	cmp	r3, #13
 8014694:	d003      	beq.n	801469e <on_get_fragmentation_info+0x2e>
 8014696:	2000      	movs	r0, #0
 8014698:	b00b      	add	sp, #44	; 0x2c
 801469a:	f85d fb04 	ldr.w	pc, [sp], #4
 801469e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80146a2:	f013 0f02 	tst.w	r3, #2
 80146a6:	bf14      	ite	ne
 80146a8:	2002      	movne	r0, #2
 80146aa:	2001      	moveq	r0, #1
 80146ac:	b00b      	add	sp, #44	; 0x2c
 80146ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80146b2:	bf00      	nop

080146b4 <read_submessage_get_info>:
 80146b4:	b570      	push	{r4, r5, r6, lr}
 80146b6:	2500      	movs	r5, #0
 80146b8:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
 80146bc:	460e      	mov	r6, r1
 80146be:	4604      	mov	r4, r0
 80146c0:	f44f 7224 	mov.w	r2, #656	; 0x290
 80146c4:	4629      	mov	r1, r5
 80146c6:	a810      	add	r0, sp, #64	; 0x40
 80146c8:	9503      	str	r5, [sp, #12]
 80146ca:	9504      	str	r5, [sp, #16]
 80146cc:	f004 ff9a 	bl	8019604 <memset>
 80146d0:	a903      	add	r1, sp, #12
 80146d2:	4630      	mov	r0, r6
 80146d4:	f002 fce6 	bl	80170a4 <uxr_deserialize_GET_INFO_Payload>
 80146d8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80146dc:	4620      	mov	r0, r4
 80146de:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 80146e2:	f001 f825 	bl	8015730 <uxr_session_header_offset>
 80146e6:	462b      	mov	r3, r5
 80146e8:	220c      	movs	r2, #12
 80146ea:	a905      	add	r1, sp, #20
 80146ec:	9000      	str	r0, [sp, #0]
 80146ee:	a808      	add	r0, sp, #32
 80146f0:	f7f9 fbb8 	bl	800de64 <ucdr_init_buffer_origin_offset>
 80146f4:	a910      	add	r1, sp, #64	; 0x40
 80146f6:	a808      	add	r0, sp, #32
 80146f8:	f002 fd48 	bl	801718c <uxr_serialize_INFO_Payload>
 80146fc:	9b08      	ldr	r3, [sp, #32]
 80146fe:	462a      	mov	r2, r5
 8014700:	4629      	mov	r1, r5
 8014702:	4620      	mov	r0, r4
 8014704:	f000 ffc0 	bl	8015688 <uxr_stamp_session_header>
 8014708:	a808      	add	r0, sp, #32
 801470a:	f7f9 fbeb 	bl	800dee4 <ucdr_buffer_length>
 801470e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8014710:	4602      	mov	r2, r0
 8014712:	a905      	add	r1, sp, #20
 8014714:	e9d3 0400 	ldrd	r0, r4, [r3]
 8014718:	47a0      	blx	r4
 801471a:	f50d 7d34 	add.w	sp, sp, #720	; 0x2d0
 801471e:	bd70      	pop	{r4, r5, r6, pc}

08014720 <write_submessage_acknack.isra.0>:
 8014720:	b570      	push	{r4, r5, r6, lr}
 8014722:	b092      	sub	sp, #72	; 0x48
 8014724:	4605      	mov	r5, r0
 8014726:	460e      	mov	r6, r1
 8014728:	4614      	mov	r4, r2
 801472a:	f001 f801 	bl	8015730 <uxr_session_header_offset>
 801472e:	a905      	add	r1, sp, #20
 8014730:	9000      	str	r0, [sp, #0]
 8014732:	2300      	movs	r3, #0
 8014734:	a80a      	add	r0, sp, #40	; 0x28
 8014736:	2211      	movs	r2, #17
 8014738:	f7f9 fb94 	bl	800de64 <ucdr_init_buffer_origin_offset>
 801473c:	2218      	movs	r2, #24
 801473e:	2300      	movs	r3, #0
 8014740:	210a      	movs	r1, #10
 8014742:	fb02 5404 	mla	r4, r2, r4, r5
 8014746:	a80a      	add	r0, sp, #40	; 0x28
 8014748:	2205      	movs	r2, #5
 801474a:	3450      	adds	r4, #80	; 0x50
 801474c:	f001 fde4 	bl	8016318 <uxr_buffer_submessage_header>
 8014750:	a903      	add	r1, sp, #12
 8014752:	4620      	mov	r0, r4
 8014754:	f003 ff9e 	bl	8018694 <uxr_compute_acknack>
 8014758:	ba40      	rev16	r0, r0
 801475a:	a903      	add	r1, sp, #12
 801475c:	f88d 6010 	strb.w	r6, [sp, #16]
 8014760:	f8ad 000e 	strh.w	r0, [sp, #14]
 8014764:	a80a      	add	r0, sp, #40	; 0x28
 8014766:	f002 fd83 	bl	8017270 <uxr_serialize_ACKNACK_Payload>
 801476a:	2200      	movs	r2, #0
 801476c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801476e:	4628      	mov	r0, r5
 8014770:	4611      	mov	r1, r2
 8014772:	f000 ff89 	bl	8015688 <uxr_stamp_session_header>
 8014776:	a80a      	add	r0, sp, #40	; 0x28
 8014778:	f7f9 fbb4 	bl	800dee4 <ucdr_buffer_length>
 801477c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 801477e:	4602      	mov	r2, r0
 8014780:	a905      	add	r1, sp, #20
 8014782:	e9d3 0400 	ldrd	r0, r4, [r3]
 8014786:	47a0      	blx	r4
 8014788:	b012      	add	sp, #72	; 0x48
 801478a:	bd70      	pop	{r4, r5, r6, pc}
 801478c:	0000      	movs	r0, r0
	...

08014790 <uxr_init_session>:
 8014790:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 80147c8 <uxr_init_session+0x38>
 8014794:	2300      	movs	r3, #0
 8014796:	b510      	push	{r4, lr}
 8014798:	4604      	mov	r4, r0
 801479a:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 801479e:	e9c0 131c 	strd	r1, r3, [r0, #112]	; 0x70
 80147a2:	e9c0 331e 	strd	r3, r3, [r0, #120]	; 0x78
 80147a6:	e9c0 3320 	strd	r3, r3, [r0, #128]	; 0x80
 80147aa:	e9c0 3322 	strd	r3, r3, [r0, #136]	; 0x88
 80147ae:	e9c0 3324 	strd	r3, r3, [r0, #144]	; 0x90
 80147b2:	ed80 7b26 	vstr	d7, [r0, #152]	; 0x98
 80147b6:	2181      	movs	r1, #129	; 0x81
 80147b8:	f000 feca 	bl	8015550 <uxr_init_session_info>
 80147bc:	f104 0008 	add.w	r0, r4, #8
 80147c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80147c4:	f001 bcc4 	b.w	8016150 <uxr_init_stream_storage>
	...

080147d0 <uxr_set_status_callback>:
 80147d0:	e9c0 1220 	strd	r1, r2, [r0, #128]	; 0x80
 80147d4:	4770      	bx	lr
 80147d6:	bf00      	nop

080147d8 <uxr_set_topic_callback>:
 80147d8:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
 80147dc:	4770      	bx	lr
 80147de:	bf00      	nop

080147e0 <uxr_set_request_callback>:
 80147e0:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
 80147e4:	4770      	bx	lr
 80147e6:	bf00      	nop

080147e8 <uxr_set_reply_callback>:
 80147e8:	e9c0 122b 	strd	r1, r2, [r0, #172]	; 0xac
 80147ec:	4770      	bx	lr
 80147ee:	bf00      	nop

080147f0 <uxr_create_output_best_effort_stream>:
 80147f0:	b510      	push	{r4, lr}
 80147f2:	4604      	mov	r4, r0
 80147f4:	b084      	sub	sp, #16
 80147f6:	e9cd 2100 	strd	r2, r1, [sp]
 80147fa:	f000 ff99 	bl	8015730 <uxr_session_header_offset>
 80147fe:	4603      	mov	r3, r0
 8014800:	f104 0008 	add.w	r0, r4, #8
 8014804:	e9dd 2100 	ldrd	r2, r1, [sp]
 8014808:	b004      	add	sp, #16
 801480a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801480e:	f001 bce5 	b.w	80161dc <uxr_add_output_best_effort_buffer>
 8014812:	bf00      	nop

08014814 <uxr_create_output_reliable_stream>:
 8014814:	b530      	push	{r4, r5, lr}
 8014816:	b089      	sub	sp, #36	; 0x24
 8014818:	4604      	mov	r4, r0
 801481a:	e9cd 2104 	strd	r2, r1, [sp, #16]
 801481e:	9303      	str	r3, [sp, #12]
 8014820:	f000 ff86 	bl	8015730 <uxr_session_header_offset>
 8014824:	4605      	mov	r5, r0
 8014826:	9905      	ldr	r1, [sp, #20]
 8014828:	f104 0008 	add.w	r0, r4, #8
 801482c:	9500      	str	r5, [sp, #0]
 801482e:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8014832:	f001 fce7 	bl	8016204 <uxr_add_output_reliable_buffer>
 8014836:	2200      	movs	r2, #0
 8014838:	fa5f fc80 	uxtb.w	ip, r0
 801483c:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8014840:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8014844:	0e03      	lsrs	r3, r0, #24
 8014846:	f36c 0207 	bfi	r2, ip, #0, #8
 801484a:	f364 220f 	bfi	r2, r4, #8, #8
 801484e:	f361 4217 	bfi	r2, r1, #16, #8
 8014852:	f363 621f 	bfi	r2, r3, #24, #8
 8014856:	4610      	mov	r0, r2
 8014858:	b009      	add	sp, #36	; 0x24
 801485a:	bd30      	pop	{r4, r5, pc}

0801485c <uxr_create_input_best_effort_stream>:
 801485c:	b082      	sub	sp, #8
 801485e:	3008      	adds	r0, #8
 8014860:	b002      	add	sp, #8
 8014862:	f001 bce9 	b.w	8016238 <uxr_add_input_best_effort_buffer>
 8014866:	bf00      	nop

08014868 <uxr_create_input_reliable_stream>:
 8014868:	b510      	push	{r4, lr}
 801486a:	4c0c      	ldr	r4, [pc, #48]	; (801489c <uxr_create_input_reliable_stream+0x34>)
 801486c:	b084      	sub	sp, #16
 801486e:	3008      	adds	r0, #8
 8014870:	9400      	str	r4, [sp, #0]
 8014872:	f001 fcf7 	bl	8016264 <uxr_add_input_reliable_buffer>
 8014876:	2200      	movs	r2, #0
 8014878:	fa5f fe80 	uxtb.w	lr, r0
 801487c:	f3c0 2c07 	ubfx	ip, r0, #8, #8
 8014880:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8014884:	0e03      	lsrs	r3, r0, #24
 8014886:	f36e 0207 	bfi	r2, lr, #0, #8
 801488a:	f36c 220f 	bfi	r2, ip, #8, #8
 801488e:	f361 4217 	bfi	r2, r1, #16, #8
 8014892:	f363 621f 	bfi	r2, r3, #24, #8
 8014896:	4610      	mov	r0, r2
 8014898:	b004      	add	sp, #16
 801489a:	bd10      	pop	{r4, pc}
 801489c:	08014671 	.word	0x08014671

080148a0 <uxr_epoch_nanos>:
 80148a0:	b510      	push	{r4, lr}
 80148a2:	4604      	mov	r4, r0
 80148a4:	f001 fd9a 	bl	80163dc <uxr_nanos>
 80148a8:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 80148ac:	1ac0      	subs	r0, r0, r3
 80148ae:	eb61 0102 	sbc.w	r1, r1, r2
 80148b2:	bd10      	pop	{r4, pc}

080148b4 <uxr_flash_output_streams>:
 80148b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80148b8:	7e03      	ldrb	r3, [r0, #24]
 80148ba:	b084      	sub	sp, #16
 80148bc:	4604      	mov	r4, r0
 80148be:	b1fb      	cbz	r3, 8014900 <uxr_flash_output_streams+0x4c>
 80148c0:	f04f 0900 	mov.w	r9, #0
 80148c4:	f10d 0802 	add.w	r8, sp, #2
 80148c8:	af03      	add	r7, sp, #12
 80148ca:	ae02      	add	r6, sp, #8
 80148cc:	4648      	mov	r0, r9
 80148ce:	2201      	movs	r2, #1
 80148d0:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 80148d4:	4611      	mov	r1, r2
 80148d6:	3508      	adds	r5, #8
 80148d8:	f001 fbe0 	bl	801609c <uxr_stream_id>
 80148dc:	4684      	mov	ip, r0
 80148de:	4643      	mov	r3, r8
 80148e0:	463a      	mov	r2, r7
 80148e2:	4631      	mov	r1, r6
 80148e4:	4628      	mov	r0, r5
 80148e6:	f8cd c004 	str.w	ip, [sp, #4]
 80148ea:	f003 ff5d 	bl	80187a8 <uxr_prepare_best_effort_buffer_to_send>
 80148ee:	2800      	cmp	r0, #0
 80148f0:	d13d      	bne.n	801496e <uxr_flash_output_streams+0xba>
 80148f2:	f109 0901 	add.w	r9, r9, #1
 80148f6:	7e23      	ldrb	r3, [r4, #24]
 80148f8:	fa5f f089 	uxtb.w	r0, r9
 80148fc:	4283      	cmp	r3, r0
 80148fe:	d8e6      	bhi.n	80148ce <uxr_flash_output_streams+0x1a>
 8014900:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8014904:	b383      	cbz	r3, 8014968 <uxr_flash_output_streams+0xb4>
 8014906:	f04f 0900 	mov.w	r9, #0
 801490a:	f10d 0802 	add.w	r8, sp, #2
 801490e:	af03      	add	r7, sp, #12
 8014910:	ae02      	add	r6, sp, #8
 8014912:	4648      	mov	r0, r9
 8014914:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 8014918:	2201      	movs	r2, #1
 801491a:	2102      	movs	r1, #2
 801491c:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8014920:	f001 fbbc 	bl	801609c <uxr_stream_id>
 8014924:	9001      	str	r0, [sp, #4]
 8014926:	3520      	adds	r5, #32
 8014928:	e00c      	b.n	8014944 <uxr_flash_output_streams+0x90>
 801492a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801492e:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8014932:	9b02      	ldr	r3, [sp, #8]
 8014934:	f000 fea8 	bl	8015688 <uxr_stamp_session_header>
 8014938:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801493a:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801493e:	e9d3 0a00 	ldrd	r0, sl, [r3]
 8014942:	47d0      	blx	sl
 8014944:	4643      	mov	r3, r8
 8014946:	463a      	mov	r2, r7
 8014948:	4631      	mov	r1, r6
 801494a:	4628      	mov	r0, r5
 801494c:	f004 f950 	bl	8018bf0 <uxr_prepare_next_reliable_buffer_to_send>
 8014950:	4603      	mov	r3, r0
 8014952:	4620      	mov	r0, r4
 8014954:	2b00      	cmp	r3, #0
 8014956:	d1e8      	bne.n	801492a <uxr_flash_output_streams+0x76>
 8014958:	f109 0901 	add.w	r9, r9, #1
 801495c:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8014960:	fa5f f089 	uxtb.w	r0, r9
 8014964:	4283      	cmp	r3, r0
 8014966:	d8d5      	bhi.n	8014914 <uxr_flash_output_streams+0x60>
 8014968:	b004      	add	sp, #16
 801496a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801496e:	9b02      	ldr	r3, [sp, #8]
 8014970:	4620      	mov	r0, r4
 8014972:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8014976:	f109 0901 	add.w	r9, r9, #1
 801497a:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801497e:	f000 fe83 	bl	8015688 <uxr_stamp_session_header>
 8014982:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8014984:	9a03      	ldr	r2, [sp, #12]
 8014986:	685d      	ldr	r5, [r3, #4]
 8014988:	6818      	ldr	r0, [r3, #0]
 801498a:	9902      	ldr	r1, [sp, #8]
 801498c:	47a8      	blx	r5
 801498e:	7e23      	ldrb	r3, [r4, #24]
 8014990:	fa5f f089 	uxtb.w	r0, r9
 8014994:	4283      	cmp	r3, r0
 8014996:	d89a      	bhi.n	80148ce <uxr_flash_output_streams+0x1a>
 8014998:	e7b2      	b.n	8014900 <uxr_flash_output_streams+0x4c>
 801499a:	bf00      	nop

0801499c <read_submessage_info>:
 801499c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80149a0:	460d      	mov	r5, r1
 80149a2:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 80149a6:	4606      	mov	r6, r0
 80149a8:	4669      	mov	r1, sp
 80149aa:	4628      	mov	r0, r5
 80149ac:	f002 fa8c 	bl	8016ec8 <uxr_deserialize_BaseObjectReply>
 80149b0:	4604      	mov	r4, r0
 80149b2:	a902      	add	r1, sp, #8
 80149b4:	4628      	mov	r0, r5
 80149b6:	f89d 7005 	ldrb.w	r7, [sp, #5]
 80149ba:	f7f7 ffe3 	bl	800c984 <ucdr_deserialize_bool>
 80149be:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80149c2:	4004      	ands	r4, r0
 80149c4:	b2e4      	uxtb	r4, r4
 80149c6:	b95b      	cbnz	r3, 80149e0 <read_submessage_info+0x44>
 80149c8:	a987      	add	r1, sp, #540	; 0x21c
 80149ca:	4628      	mov	r0, r5
 80149cc:	f7f7 ffda 	bl	800c984 <ucdr_deserialize_bool>
 80149d0:	f89d 321c 	ldrb.w	r3, [sp, #540]	; 0x21c
 80149d4:	4680      	mov	r8, r0
 80149d6:	b94b      	cbnz	r3, 80149ec <read_submessage_info+0x50>
 80149d8:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 80149dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80149e0:	a903      	add	r1, sp, #12
 80149e2:	4628      	mov	r0, r5
 80149e4:	f002 f91c 	bl	8016c20 <uxr_deserialize_ObjectVariant>
 80149e8:	4004      	ands	r4, r0
 80149ea:	e7ed      	b.n	80149c8 <read_submessage_info+0x2c>
 80149ec:	a988      	add	r1, sp, #544	; 0x220
 80149ee:	4628      	mov	r0, r5
 80149f0:	f7f7 fff6 	bl	800c9e0 <ucdr_deserialize_uint8_t>
 80149f4:	ea14 0f08 	tst.w	r4, r8
 80149f8:	d0ee      	beq.n	80149d8 <read_submessage_info+0x3c>
 80149fa:	2800      	cmp	r0, #0
 80149fc:	d0ec      	beq.n	80149d8 <read_submessage_info+0x3c>
 80149fe:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
 8014a02:	2b0d      	cmp	r3, #13
 8014a04:	d1e8      	bne.n	80149d8 <read_submessage_info+0x3c>
 8014a06:	a98a      	add	r1, sp, #552	; 0x228
 8014a08:	4628      	mov	r0, r5
 8014a0a:	f7f8 fd8f 	bl	800d52c <ucdr_deserialize_int16_t>
 8014a0e:	b138      	cbz	r0, 8014a20 <read_submessage_info+0x84>
 8014a10:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	; 0x228
 8014a14:	2b00      	cmp	r3, #0
 8014a16:	dd06      	ble.n	8014a26 <read_submessage_info+0x8a>
 8014a18:	2f00      	cmp	r7, #0
 8014a1a:	bf14      	ite	ne
 8014a1c:	2001      	movne	r0, #1
 8014a1e:	2002      	moveq	r0, #2
 8014a20:	f886 00b5 	strb.w	r0, [r6, #181]	; 0xb5
 8014a24:	e7d8      	b.n	80149d8 <read_submessage_info+0x3c>
 8014a26:	2000      	movs	r0, #0
 8014a28:	e7fa      	b.n	8014a20 <read_submessage_info+0x84>
 8014a2a:	bf00      	nop

08014a2c <read_submessage_list>:
 8014a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a30:	4604      	mov	r4, r0
 8014a32:	b097      	sub	sp, #92	; 0x5c
 8014a34:	460d      	mov	r5, r1
 8014a36:	4ec1      	ldr	r6, [pc, #772]	; (8014d3c <read_submessage_list+0x310>)
 8014a38:	9209      	str	r2, [sp, #36]	; 0x24
 8014a3a:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 8014a3e:	aa0c      	add	r2, sp, #48	; 0x30
 8014a40:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 8014a44:	4628      	mov	r0, r5
 8014a46:	f001 fc81 	bl	801634c <uxr_read_submessage_header>
 8014a4a:	2800      	cmp	r0, #0
 8014a4c:	f000 8142 	beq.w	8014cd4 <read_submessage_list+0x2a8>
 8014a50:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 8014a54:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 8014a58:	3b02      	subs	r3, #2
 8014a5a:	2b0d      	cmp	r3, #13
 8014a5c:	d8ed      	bhi.n	8014a3a <read_submessage_list+0xe>
 8014a5e:	a101      	add	r1, pc, #4	; (adr r1, 8014a64 <read_submessage_list+0x38>)
 8014a60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014a64:	08014ccb 	.word	0x08014ccb
 8014a68:	08014a3b 	.word	0x08014a3b
 8014a6c:	08014cbb 	.word	0x08014cbb
 8014a70:	08014c59 	.word	0x08014c59
 8014a74:	08014c4f 	.word	0x08014c4f
 8014a78:	08014a3b 	.word	0x08014a3b
 8014a7c:	08014a3b 	.word	0x08014a3b
 8014a80:	08014ba5 	.word	0x08014ba5
 8014a84:	08014b37 	.word	0x08014b37
 8014a88:	08014af7 	.word	0x08014af7
 8014a8c:	08014a3b 	.word	0x08014a3b
 8014a90:	08014a3b 	.word	0x08014a3b
 8014a94:	08014a3b 	.word	0x08014a3b
 8014a98:	08014a9d 	.word	0x08014a9d
 8014a9c:	a910      	add	r1, sp, #64	; 0x40
 8014a9e:	4628      	mov	r0, r5
 8014aa0:	f002 fc3a 	bl	8017318 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 8014aa4:	f8d4 8090 	ldr.w	r8, [r4, #144]	; 0x90
 8014aa8:	f1b8 0f00 	cmp.w	r8, #0
 8014aac:	f000 811a 	beq.w	8014ce4 <read_submessage_list+0x2b8>
 8014ab0:	f001 fc94 	bl	80163dc <uxr_nanos>
 8014ab4:	4602      	mov	r2, r0
 8014ab6:	460b      	mov	r3, r1
 8014ab8:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 8014abc:	2100      	movs	r1, #0
 8014abe:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8014ac0:	9006      	str	r0, [sp, #24]
 8014ac2:	468c      	mov	ip, r1
 8014ac4:	9815      	ldr	r0, [sp, #84]	; 0x54
 8014ac6:	fbc7 0c06 	smlal	r0, ip, r7, r6
 8014aca:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8014acc:	e9cd 0c04 	strd	r0, ip, [sp, #16]
 8014ad0:	468c      	mov	ip, r1
 8014ad2:	9811      	ldr	r0, [sp, #68]	; 0x44
 8014ad4:	fbc7 0c06 	smlal	r0, ip, r7, r6
 8014ad8:	e9cd 0c02 	strd	r0, ip, [sp, #8]
 8014adc:	e9dd 7012 	ldrd	r7, r0, [sp, #72]	; 0x48
 8014ae0:	fbc7 0106 	smlal	r0, r1, r7, r6
 8014ae4:	e9cd 0100 	strd	r0, r1, [sp]
 8014ae8:	4620      	mov	r0, r4
 8014aea:	47c0      	blx	r8
 8014aec:	f04f 0301 	mov.w	r3, #1
 8014af0:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
 8014af4:	e7a1      	b.n	8014a3a <read_submessage_list+0xe>
 8014af6:	a910      	add	r1, sp, #64	; 0x40
 8014af8:	4628      	mov	r0, r5
 8014afa:	f002 fbf9 	bl	80172f0 <uxr_deserialize_HEARTBEAT_Payload>
 8014afe:	2100      	movs	r1, #0
 8014b00:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8014b04:	f001 faf8 	bl	80160f8 <uxr_stream_id_from_raw>
 8014b08:	f3c0 2807 	ubfx	r8, r0, #8, #8
 8014b0c:	900f      	str	r0, [sp, #60]	; 0x3c
 8014b0e:	f104 0008 	add.w	r0, r4, #8
 8014b12:	4641      	mov	r1, r8
 8014b14:	f001 fbde 	bl	80162d4 <uxr_get_input_reliable_stream>
 8014b18:	2800      	cmp	r0, #0
 8014b1a:	d08e      	beq.n	8014a3a <read_submessage_list+0xe>
 8014b1c:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 8014b20:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8014b24:	f003 fdaa 	bl	801867c <uxr_process_heartbeat>
 8014b28:	4642      	mov	r2, r8
 8014b2a:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 8014b2e:	4620      	mov	r0, r4
 8014b30:	f7ff fdf6 	bl	8014720 <write_submessage_acknack.isra.0>
 8014b34:	e781      	b.n	8014a3a <read_submessage_list+0xe>
 8014b36:	a910      	add	r1, sp, #64	; 0x40
 8014b38:	4628      	mov	r0, r5
 8014b3a:	f002 fbb1 	bl	80172a0 <uxr_deserialize_ACKNACK_Payload>
 8014b3e:	2100      	movs	r1, #0
 8014b40:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8014b44:	f001 fad8 	bl	80160f8 <uxr_stream_id_from_raw>
 8014b48:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8014b4c:	900d      	str	r0, [sp, #52]	; 0x34
 8014b4e:	f104 0008 	add.w	r0, r4, #8
 8014b52:	f001 fba9 	bl	80162a8 <uxr_get_output_reliable_stream>
 8014b56:	4680      	mov	r8, r0
 8014b58:	2800      	cmp	r0, #0
 8014b5a:	f43f af6e 	beq.w	8014a3a <read_submessage_list+0xe>
 8014b5e:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8014b62:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 8014b66:	f89d 1043 	ldrb.w	r1, [sp, #67]	; 0x43
 8014b6a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8014b6e:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8014b72:	b289      	uxth	r1, r1
 8014b74:	f004 f8e4 	bl	8018d40 <uxr_process_acknack>
 8014b78:	4640      	mov	r0, r8
 8014b7a:	f004 f8a5 	bl	8018cc8 <uxr_begin_output_nack_buffer_it>
 8014b7e:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
 8014b82:	e005      	b.n	8014b90 <read_submessage_list+0x164>
 8014b84:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8014b86:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	; 0x38
 8014b8a:	e9d3 0900 	ldrd	r0, r9, [r3]
 8014b8e:	47c8      	blx	r9
 8014b90:	f10d 0332 	add.w	r3, sp, #50	; 0x32
 8014b94:	aa0f      	add	r2, sp, #60	; 0x3c
 8014b96:	4651      	mov	r1, sl
 8014b98:	4640      	mov	r0, r8
 8014b9a:	f004 f897 	bl	8018ccc <uxr_next_reliable_nack_buffer_to_send>
 8014b9e:	2800      	cmp	r0, #0
 8014ba0:	d1f0      	bne.n	8014b84 <read_submessage_list+0x158>
 8014ba2:	e74a      	b.n	8014a3a <read_submessage_list+0xe>
 8014ba4:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 8014ba8:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 8014bac:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30
 8014bb0:	4628      	mov	r0, r5
 8014bb2:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
 8014bb6:	4651      	mov	r1, sl
 8014bb8:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8014bbc:	f1a8 0804 	sub.w	r8, r8, #4
 8014bc0:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
 8014bc4:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
 8014bc8:	fa1f f888 	uxth.w	r8, r8
 8014bcc:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8014bd0:	f009 090e 	and.w	r9, r9, #14
 8014bd4:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
 8014bd8:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 8014bdc:	f002 f8c2 	bl	8016d64 <uxr_deserialize_BaseObjectRequest>
 8014be0:	4650      	mov	r0, sl
 8014be2:	a90f      	add	r1, sp, #60	; 0x3c
 8014be4:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 8014be8:	f000 fdca 	bl	8015780 <uxr_parse_base_object_request>
 8014bec:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8014bee:	f8d4 b080 	ldr.w	fp, [r4, #128]	; 0x80
 8014bf2:	f8bd a032 	ldrh.w	sl, [sp, #50]	; 0x32
 8014bf6:	9110      	str	r1, [sp, #64]	; 0x40
 8014bf8:	f1bb 0f00 	cmp.w	fp, #0
 8014bfc:	d006      	beq.n	8014c0c <read_submessage_list+0x1e0>
 8014bfe:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8014c02:	4652      	mov	r2, sl
 8014c04:	4620      	mov	r0, r4
 8014c06:	9300      	str	r3, [sp, #0]
 8014c08:	2300      	movs	r3, #0
 8014c0a:	47d8      	blx	fp
 8014c0c:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8014c0e:	b182      	cbz	r2, 8014c32 <read_submessage_list+0x206>
 8014c10:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8014c12:	f04f 0c00 	mov.w	ip, #0
 8014c16:	3902      	subs	r1, #2
 8014c18:	e003      	b.n	8014c22 <read_submessage_list+0x1f6>
 8014c1a:	f10c 0c01 	add.w	ip, ip, #1
 8014c1e:	4594      	cmp	ip, r2
 8014c20:	d007      	beq.n	8014c32 <read_submessage_list+0x206>
 8014c22:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 8014c26:	4553      	cmp	r3, sl
 8014c28:	d1f7      	bne.n	8014c1a <read_submessage_list+0x1ee>
 8014c2a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8014c2c:	2200      	movs	r2, #0
 8014c2e:	f803 200c 	strb.w	r2, [r3, ip]
 8014c32:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 8014c36:	464b      	mov	r3, r9
 8014c38:	4642      	mov	r2, r8
 8014c3a:	4620      	mov	r0, r4
 8014c3c:	9102      	str	r1, [sp, #8]
 8014c3e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8014c40:	9101      	str	r1, [sp, #4]
 8014c42:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014c44:	9100      	str	r1, [sp, #0]
 8014c46:	4629      	mov	r1, r5
 8014c48:	f7ff fc48 	bl	80144dc <read_submessage_format>
 8014c4c:	e6f5      	b.n	8014a3a <read_submessage_list+0xe>
 8014c4e:	4629      	mov	r1, r5
 8014c50:	4620      	mov	r0, r4
 8014c52:	f7ff fea3 	bl	801499c <read_submessage_info>
 8014c56:	e6f0      	b.n	8014a3a <read_submessage_list+0xe>
 8014c58:	2a00      	cmp	r2, #0
 8014c5a:	d03e      	beq.n	8014cda <read_submessage_list+0x2ae>
 8014c5c:	a910      	add	r1, sp, #64	; 0x40
 8014c5e:	4628      	mov	r0, r5
 8014c60:	f002 fa76 	bl	8017150 <uxr_deserialize_STATUS_Payload>
 8014c64:	a90e      	add	r1, sp, #56	; 0x38
 8014c66:	aa0d      	add	r2, sp, #52	; 0x34
 8014c68:	a810      	add	r0, sp, #64	; 0x40
 8014c6a:	f000 fd89 	bl	8015780 <uxr_parse_base_object_request>
 8014c6e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8014c70:	f8d4 a080 	ldr.w	sl, [r4, #128]	; 0x80
 8014c74:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
 8014c78:	f8bd 8034 	ldrh.w	r8, [sp, #52]	; 0x34
 8014c7c:	910f      	str	r1, [sp, #60]	; 0x3c
 8014c7e:	f1ba 0f00 	cmp.w	sl, #0
 8014c82:	d006      	beq.n	8014c92 <read_submessage_list+0x266>
 8014c84:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8014c88:	4642      	mov	r2, r8
 8014c8a:	4620      	mov	r0, r4
 8014c8c:	9300      	str	r3, [sp, #0]
 8014c8e:	464b      	mov	r3, r9
 8014c90:	47d0      	blx	sl
 8014c92:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8014c94:	2a00      	cmp	r2, #0
 8014c96:	f43f aed0 	beq.w	8014a3a <read_submessage_list+0xe>
 8014c9a:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8014c9c:	2100      	movs	r1, #0
 8014c9e:	3802      	subs	r0, #2
 8014ca0:	e003      	b.n	8014caa <read_submessage_list+0x27e>
 8014ca2:	3101      	adds	r1, #1
 8014ca4:	4291      	cmp	r1, r2
 8014ca6:	f43f aec8 	beq.w	8014a3a <read_submessage_list+0xe>
 8014caa:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8014cae:	4543      	cmp	r3, r8
 8014cb0:	d1f7      	bne.n	8014ca2 <read_submessage_list+0x276>
 8014cb2:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8014cb4:	f803 9001 	strb.w	r9, [r3, r1]
 8014cb8:	e6bf      	b.n	8014a3a <read_submessage_list+0xe>
 8014cba:	2a00      	cmp	r2, #0
 8014cbc:	f47f aebd 	bne.w	8014a3a <read_submessage_list+0xe>
 8014cc0:	4629      	mov	r1, r5
 8014cc2:	4620      	mov	r0, r4
 8014cc4:	f000 fca0 	bl	8015608 <uxr_read_create_session_status>
 8014cc8:	e6b7      	b.n	8014a3a <read_submessage_list+0xe>
 8014cca:	4629      	mov	r1, r5
 8014ccc:	4620      	mov	r0, r4
 8014cce:	f7ff fcf1 	bl	80146b4 <read_submessage_get_info>
 8014cd2:	e6b2      	b.n	8014a3a <read_submessage_list+0xe>
 8014cd4:	b017      	add	sp, #92	; 0x5c
 8014cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014cda:	4629      	mov	r1, r5
 8014cdc:	4620      	mov	r0, r4
 8014cde:	f000 fca1 	bl	8015624 <uxr_read_delete_session_status>
 8014ce2:	e6aa      	b.n	8014a3a <read_submessage_list+0xe>
 8014ce4:	f001 fb7a 	bl	80163dc <uxr_nanos>
 8014ce8:	4642      	mov	r2, r8
 8014cea:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8014cec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014cee:	fbc7 3206 	smlal	r3, r2, r7, r6
 8014cf2:	1818      	adds	r0, r3, r0
 8014cf4:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8014cf6:	eb42 0101 	adc.w	r1, r2, r1
 8014cfa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014cfc:	4642      	mov	r2, r8
 8014cfe:	fbc7 3206 	smlal	r3, r2, r7, r6
 8014d02:	469c      	mov	ip, r3
 8014d04:	e9dd 3710 	ldrd	r3, r7, [sp, #64]	; 0x40
 8014d08:	fbc3 7806 	smlal	r7, r8, r3, r6
 8014d0c:	4643      	mov	r3, r8
 8014d0e:	eb1c 0c07 	adds.w	ip, ip, r7
 8014d12:	eb42 0203 	adc.w	r2, r2, r3
 8014d16:	ebb0 030c 	subs.w	r3, r0, ip
 8014d1a:	eb61 0202 	sbc.w	r2, r1, r2
 8014d1e:	2a00      	cmp	r2, #0
 8014d20:	db08      	blt.n	8014d34 <read_submessage_list+0x308>
 8014d22:	085b      	lsrs	r3, r3, #1
 8014d24:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 8014d28:	1052      	asrs	r2, r2, #1
 8014d2a:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 8014d2e:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
 8014d32:	e6db      	b.n	8014aec <read_submessage_list+0xc0>
 8014d34:	3301      	adds	r3, #1
 8014d36:	f142 0200 	adc.w	r2, r2, #0
 8014d3a:	e7f2      	b.n	8014d22 <read_submessage_list+0x2f6>
 8014d3c:	3b9aca00 	.word	0x3b9aca00

08014d40 <listen_message_reliably>:
 8014d40:	1e0b      	subs	r3, r1, #0
 8014d42:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d46:	bfb8      	it	lt
 8014d48:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 8014d4c:	b09d      	sub	sp, #116	; 0x74
 8014d4e:	4680      	mov	r8, r0
 8014d50:	9305      	str	r3, [sp, #20]
 8014d52:	f001 fb27 	bl	80163a4 <uxr_millis>
 8014d56:	f898 2048 	ldrb.w	r2, [r8, #72]	; 0x48
 8014d5a:	4681      	mov	r9, r0
 8014d5c:	2a00      	cmp	r2, #0
 8014d5e:	f000 809a 	beq.w	8014e96 <listen_message_reliably+0x156>
 8014d62:	2600      	movs	r6, #0
 8014d64:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8014d68:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8014d6c:	460f      	mov	r7, r1
 8014d6e:	4630      	mov	r0, r6
 8014d70:	9303      	str	r3, [sp, #12]
 8014d72:	e00e      	b.n	8014d92 <listen_message_reliably+0x52>
 8014d74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014d76:	3601      	adds	r6, #1
 8014d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014d7a:	455a      	cmp	r2, fp
 8014d7c:	9903      	ldr	r1, [sp, #12]
 8014d7e:	b2f0      	uxtb	r0, r6
 8014d80:	eb73 0101 	sbcs.w	r1, r3, r1
 8014d84:	da01      	bge.n	8014d8a <listen_message_reliably+0x4a>
 8014d86:	4693      	mov	fp, r2
 8014d88:	9303      	str	r3, [sp, #12]
 8014d8a:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 8014d8e:	4283      	cmp	r3, r0
 8014d90:	d95f      	bls.n	8014e52 <listen_message_reliably+0x112>
 8014d92:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 8014d96:	2102      	movs	r1, #2
 8014d98:	2201      	movs	r2, #1
 8014d9a:	00e4      	lsls	r4, r4, #3
 8014d9c:	f001 f97e 	bl	801609c <uxr_stream_id>
 8014da0:	4601      	mov	r1, r0
 8014da2:	f104 0520 	add.w	r5, r4, #32
 8014da6:	463b      	mov	r3, r7
 8014da8:	464a      	mov	r2, r9
 8014daa:	9109      	str	r1, [sp, #36]	; 0x24
 8014dac:	4445      	add	r5, r8
 8014dae:	4628      	mov	r0, r5
 8014db0:	f003 ff5e 	bl	8018c70 <uxr_update_output_stream_heartbeat_timestamp>
 8014db4:	eb08 0304 	add.w	r3, r8, r4
 8014db8:	2800      	cmp	r0, #0
 8014dba:	d0db      	beq.n	8014d74 <listen_message_reliably+0x34>
 8014dbc:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
 8014dc0:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
 8014dc4:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8014dc8:	4640      	mov	r0, r8
 8014dca:	3501      	adds	r5, #1
 8014dcc:	4444      	add	r4, r8
 8014dce:	9304      	str	r3, [sp, #16]
 8014dd0:	f000 fcae 	bl	8015730 <uxr_session_header_offset>
 8014dd4:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8014dd8:	2300      	movs	r3, #0
 8014dda:	2211      	movs	r2, #17
 8014ddc:	a90c      	add	r1, sp, #48	; 0x30
 8014dde:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 8014de2:	9000      	str	r0, [sp, #0]
 8014de4:	4650      	mov	r0, sl
 8014de6:	3601      	adds	r6, #1
 8014de8:	f7f9 f83c 	bl	800de64 <ucdr_init_buffer_origin_offset>
 8014dec:	2300      	movs	r3, #0
 8014dee:	2205      	movs	r2, #5
 8014df0:	210b      	movs	r1, #11
 8014df2:	4650      	mov	r0, sl
 8014df4:	f001 fa90 	bl	8016318 <uxr_buffer_submessage_header>
 8014df8:	2101      	movs	r1, #1
 8014dfa:	8968      	ldrh	r0, [r5, #10]
 8014dfc:	f003 fffc 	bl	8018df8 <uxr_seq_num_add>
 8014e00:	892b      	ldrh	r3, [r5, #8]
 8014e02:	4602      	mov	r2, r0
 8014e04:	a90a      	add	r1, sp, #40	; 0x28
 8014e06:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8014e0a:	4650      	mov	r0, sl
 8014e0c:	9b04      	ldr	r3, [sp, #16]
 8014e0e:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8014e12:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8014e16:	f002 fa57 	bl	80172c8 <uxr_serialize_HEARTBEAT_Payload>
 8014e1a:	2200      	movs	r2, #0
 8014e1c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014e1e:	4640      	mov	r0, r8
 8014e20:	4611      	mov	r1, r2
 8014e22:	f000 fc31 	bl	8015688 <uxr_stamp_session_header>
 8014e26:	4650      	mov	r0, sl
 8014e28:	f7f9 f85c 	bl	800dee4 <ucdr_buffer_length>
 8014e2c:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8014e30:	4602      	mov	r2, r0
 8014e32:	a90c      	add	r1, sp, #48	; 0x30
 8014e34:	e9d3 0500 	ldrd	r0, r5, [r3]
 8014e38:	47a8      	blx	r5
 8014e3a:	9903      	ldr	r1, [sp, #12]
 8014e3c:	b2f0      	uxtb	r0, r6
 8014e3e:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 8014e42:	455a      	cmp	r2, fp
 8014e44:	eb73 0101 	sbcs.w	r1, r3, r1
 8014e48:	db9d      	blt.n	8014d86 <listen_message_reliably+0x46>
 8014e4a:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 8014e4e:	4283      	cmp	r3, r0
 8014e50:	d89f      	bhi.n	8014d92 <listen_message_reliably+0x52>
 8014e52:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8014e56:	9a03      	ldr	r2, [sp, #12]
 8014e58:	429a      	cmp	r2, r3
 8014e5a:	bf08      	it	eq
 8014e5c:	f1bb 3fff 	cmpeq.w	fp, #4294967295	; 0xffffffff
 8014e60:	d019      	beq.n	8014e96 <listen_message_reliably+0x156>
 8014e62:	ebab 0309 	sub.w	r3, fp, r9
 8014e66:	2b00      	cmp	r3, #0
 8014e68:	9d05      	ldr	r5, [sp, #20]
 8014e6a:	f8d8 0070 	ldr.w	r0, [r8, #112]	; 0x70
 8014e6e:	aa08      	add	r2, sp, #32
 8014e70:	bf08      	it	eq
 8014e72:	2301      	moveq	r3, #1
 8014e74:	a907      	add	r1, sp, #28
 8014e76:	6884      	ldr	r4, [r0, #8]
 8014e78:	429d      	cmp	r5, r3
 8014e7a:	6800      	ldr	r0, [r0, #0]
 8014e7c:	bfa8      	it	ge
 8014e7e:	461d      	movge	r5, r3
 8014e80:	462b      	mov	r3, r5
 8014e82:	47a0      	blx	r4
 8014e84:	b948      	cbnz	r0, 8014e9a <listen_message_reliably+0x15a>
 8014e86:	9b05      	ldr	r3, [sp, #20]
 8014e88:	1b5b      	subs	r3, r3, r5
 8014e8a:	2b00      	cmp	r3, #0
 8014e8c:	9305      	str	r3, [sp, #20]
 8014e8e:	f73f af60 	bgt.w	8014d52 <listen_message_reliably+0x12>
 8014e92:	4604      	mov	r4, r0
 8014e94:	e012      	b.n	8014ebc <listen_message_reliably+0x17c>
 8014e96:	9b05      	ldr	r3, [sp, #20]
 8014e98:	e7e5      	b.n	8014e66 <listen_message_reliably+0x126>
 8014e9a:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8014e9e:	4604      	mov	r4, r0
 8014ea0:	2500      	movs	r5, #0
 8014ea2:	a80c      	add	r0, sp, #48	; 0x30
 8014ea4:	f7f8 fff0 	bl	800de88 <ucdr_init_buffer>
 8014ea8:	f10d 031a 	add.w	r3, sp, #26
 8014eac:	aa06      	add	r2, sp, #24
 8014eae:	a90c      	add	r1, sp, #48	; 0x30
 8014eb0:	4640      	mov	r0, r8
 8014eb2:	f88d 5018 	strb.w	r5, [sp, #24]
 8014eb6:	f000 fbfb 	bl	80156b0 <uxr_read_session_header>
 8014eba:	b918      	cbnz	r0, 8014ec4 <listen_message_reliably+0x184>
 8014ebc:	4620      	mov	r0, r4
 8014ebe:	b01d      	add	sp, #116	; 0x74
 8014ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ec4:	4629      	mov	r1, r5
 8014ec6:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8014eca:	f001 f915 	bl	80160f8 <uxr_stream_id_from_raw>
 8014ece:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8014ed2:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 8014ed6:	f3c0 2507 	ubfx	r5, r0, #8, #8
 8014eda:	2e01      	cmp	r6, #1
 8014edc:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 8014ee0:	d04b      	beq.n	8014f7a <listen_message_reliably+0x23a>
 8014ee2:	2e02      	cmp	r6, #2
 8014ee4:	d00f      	beq.n	8014f06 <listen_message_reliably+0x1c6>
 8014ee6:	2e00      	cmp	r6, #0
 8014ee8:	d1e8      	bne.n	8014ebc <listen_message_reliably+0x17c>
 8014eea:	4631      	mov	r1, r6
 8014eec:	4630      	mov	r0, r6
 8014eee:	f001 f903 	bl	80160f8 <uxr_stream_id_from_raw>
 8014ef2:	4602      	mov	r2, r0
 8014ef4:	a90c      	add	r1, sp, #48	; 0x30
 8014ef6:	4640      	mov	r0, r8
 8014ef8:	920a      	str	r2, [sp, #40]	; 0x28
 8014efa:	f7ff fd97 	bl	8014a2c <read_submessage_list>
 8014efe:	4620      	mov	r0, r4
 8014f00:	b01d      	add	sp, #116	; 0x74
 8014f02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f06:	4629      	mov	r1, r5
 8014f08:	f108 0008 	add.w	r0, r8, #8
 8014f0c:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 8014f10:	f001 f9e0 	bl	80162d4 <uxr_get_input_reliable_stream>
 8014f14:	4607      	mov	r7, r0
 8014f16:	b338      	cbz	r0, 8014f68 <listen_message_reliably+0x228>
 8014f18:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014f1a:	a80c      	add	r0, sp, #48	; 0x30
 8014f1c:	9203      	str	r2, [sp, #12]
 8014f1e:	f7f8 ffe5 	bl	800deec <ucdr_buffer_remaining>
 8014f22:	4603      	mov	r3, r0
 8014f24:	f10d 0019 	add.w	r0, sp, #25
 8014f28:	9a03      	ldr	r2, [sp, #12]
 8014f2a:	4651      	mov	r1, sl
 8014f2c:	9000      	str	r0, [sp, #0]
 8014f2e:	4638      	mov	r0, r7
 8014f30:	f003 faa8 	bl	8018484 <uxr_receive_reliable_message>
 8014f34:	b1c0      	cbz	r0, 8014f68 <listen_message_reliably+0x228>
 8014f36:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8014f3a:	b393      	cbz	r3, 8014fa2 <listen_message_reliably+0x262>
 8014f3c:	ae14      	add	r6, sp, #80	; 0x50
 8014f3e:	f04f 0a02 	mov.w	sl, #2
 8014f42:	e00a      	b.n	8014f5a <listen_message_reliably+0x21a>
 8014f44:	f88d 9028 	strb.w	r9, [sp, #40]	; 0x28
 8014f48:	4631      	mov	r1, r6
 8014f4a:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 8014f4e:	4640      	mov	r0, r8
 8014f50:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 8014f54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014f56:	f7ff fd69 	bl	8014a2c <read_submessage_list>
 8014f5a:	2204      	movs	r2, #4
 8014f5c:	4631      	mov	r1, r6
 8014f5e:	4638      	mov	r0, r7
 8014f60:	f003 fb12 	bl	8018588 <uxr_next_input_reliable_buffer_available>
 8014f64:	2800      	cmp	r0, #0
 8014f66:	d1ed      	bne.n	8014f44 <listen_message_reliably+0x204>
 8014f68:	4640      	mov	r0, r8
 8014f6a:	462a      	mov	r2, r5
 8014f6c:	4649      	mov	r1, r9
 8014f6e:	f7ff fbd7 	bl	8014720 <write_submessage_acknack.isra.0>
 8014f72:	4620      	mov	r0, r4
 8014f74:	b01d      	add	sp, #116	; 0x74
 8014f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f7a:	4629      	mov	r1, r5
 8014f7c:	f108 0008 	add.w	r0, r8, #8
 8014f80:	f001 f99e 	bl	80162c0 <uxr_get_input_best_effort_stream>
 8014f84:	2800      	cmp	r0, #0
 8014f86:	d099      	beq.n	8014ebc <listen_message_reliably+0x17c>
 8014f88:	4651      	mov	r1, sl
 8014f8a:	f003 f9f1 	bl	8018370 <uxr_receive_best_effort_message>
 8014f8e:	2800      	cmp	r0, #0
 8014f90:	d094      	beq.n	8014ebc <listen_message_reliably+0x17c>
 8014f92:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 8014f96:	a90c      	add	r1, sp, #48	; 0x30
 8014f98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014f9a:	4640      	mov	r0, r8
 8014f9c:	f7ff fd46 	bl	8014a2c <read_submessage_list>
 8014fa0:	e78c      	b.n	8014ebc <listen_message_reliably+0x17c>
 8014fa2:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 8014fa6:	a90c      	add	r1, sp, #48	; 0x30
 8014fa8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014faa:	4640      	mov	r0, r8
 8014fac:	f7ff fd3e 	bl	8014a2c <read_submessage_list>
 8014fb0:	e7c4      	b.n	8014f3c <listen_message_reliably+0x1fc>
 8014fb2:	bf00      	nop

08014fb4 <uxr_run_session_timeout>:
 8014fb4:	b570      	push	{r4, r5, r6, lr}
 8014fb6:	4604      	mov	r4, r0
 8014fb8:	460d      	mov	r5, r1
 8014fba:	f001 f9f3 	bl	80163a4 <uxr_millis>
 8014fbe:	4606      	mov	r6, r0
 8014fc0:	4620      	mov	r0, r4
 8014fc2:	f7ff fc77 	bl	80148b4 <uxr_flash_output_streams>
 8014fc6:	4629      	mov	r1, r5
 8014fc8:	4620      	mov	r0, r4
 8014fca:	f7ff feb9 	bl	8014d40 <listen_message_reliably>
 8014fce:	f001 f9e9 	bl	80163a4 <uxr_millis>
 8014fd2:	1b83      	subs	r3, r0, r6
 8014fd4:	1ae9      	subs	r1, r5, r3
 8014fd6:	2900      	cmp	r1, #0
 8014fd8:	dcf6      	bgt.n	8014fc8 <uxr_run_session_timeout+0x14>
 8014fda:	f104 0008 	add.w	r0, r4, #8
 8014fde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014fe2:	f001 b983 	b.w	80162ec <uxr_output_streams_confirmed>
 8014fe6:	bf00      	nop

08014fe8 <uxr_run_session_until_data>:
 8014fe8:	b570      	push	{r4, r5, r6, lr}
 8014fea:	4604      	mov	r4, r0
 8014fec:	460d      	mov	r5, r1
 8014fee:	f001 f9d9 	bl	80163a4 <uxr_millis>
 8014ff2:	4606      	mov	r6, r0
 8014ff4:	4620      	mov	r0, r4
 8014ff6:	f7ff fc5d 	bl	80148b4 <uxr_flash_output_streams>
 8014ffa:	2300      	movs	r3, #0
 8014ffc:	4629      	mov	r1, r5
 8014ffe:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 8015002:	e005      	b.n	8015010 <uxr_run_session_until_data+0x28>
 8015004:	f001 f9ce 	bl	80163a4 <uxr_millis>
 8015008:	1b83      	subs	r3, r0, r6
 801500a:	1ae9      	subs	r1, r5, r3
 801500c:	2900      	cmp	r1, #0
 801500e:	dd07      	ble.n	8015020 <uxr_run_session_until_data+0x38>
 8015010:	4620      	mov	r0, r4
 8015012:	f7ff fe95 	bl	8014d40 <listen_message_reliably>
 8015016:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 801501a:	2800      	cmp	r0, #0
 801501c:	d0f2      	beq.n	8015004 <uxr_run_session_until_data+0x1c>
 801501e:	bd70      	pop	{r4, r5, r6, pc}
 8015020:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 8015024:	bd70      	pop	{r4, r5, r6, pc}
 8015026:	bf00      	nop

08015028 <uxr_run_session_until_confirm_delivery>:
 8015028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801502c:	4606      	mov	r6, r0
 801502e:	460d      	mov	r5, r1
 8015030:	f001 f9b8 	bl	80163a4 <uxr_millis>
 8015034:	4607      	mov	r7, r0
 8015036:	4630      	mov	r0, r6
 8015038:	f106 0808 	add.w	r8, r6, #8
 801503c:	f7ff fc3a 	bl	80148b4 <uxr_flash_output_streams>
 8015040:	2d00      	cmp	r5, #0
 8015042:	db10      	blt.n	8015066 <uxr_run_session_until_confirm_delivery+0x3e>
 8015044:	462c      	mov	r4, r5
 8015046:	e006      	b.n	8015056 <uxr_run_session_until_confirm_delivery+0x2e>
 8015048:	f7ff fe7a 	bl	8014d40 <listen_message_reliably>
 801504c:	f001 f9aa 	bl	80163a4 <uxr_millis>
 8015050:	1bc3      	subs	r3, r0, r7
 8015052:	1aec      	subs	r4, r5, r3
 8015054:	d407      	bmi.n	8015066 <uxr_run_session_until_confirm_delivery+0x3e>
 8015056:	4640      	mov	r0, r8
 8015058:	f001 f948 	bl	80162ec <uxr_output_streams_confirmed>
 801505c:	4603      	mov	r3, r0
 801505e:	4621      	mov	r1, r4
 8015060:	4630      	mov	r0, r6
 8015062:	2b00      	cmp	r3, #0
 8015064:	d0f0      	beq.n	8015048 <uxr_run_session_until_confirm_delivery+0x20>
 8015066:	4640      	mov	r0, r8
 8015068:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801506c:	f001 b93e 	b.w	80162ec <uxr_output_streams_confirmed>

08015070 <uxr_run_session_until_all_status>:
 8015070:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015074:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8015078:	4606      	mov	r6, r0
 801507a:	4688      	mov	r8, r1
 801507c:	4692      	mov	sl, r2
 801507e:	461f      	mov	r7, r3
 8015080:	f7ff fc18 	bl	80148b4 <uxr_flash_output_streams>
 8015084:	f1bb 0f00 	cmp.w	fp, #0
 8015088:	d004      	beq.n	8015094 <uxr_run_session_until_all_status+0x24>
 801508a:	465a      	mov	r2, fp
 801508c:	21ff      	movs	r1, #255	; 0xff
 801508e:	4638      	mov	r0, r7
 8015090:	f004 fab8 	bl	8019604 <memset>
 8015094:	f8c6 b07c 	str.w	fp, [r6, #124]	; 0x7c
 8015098:	1e7d      	subs	r5, r7, #1
 801509a:	e9c6 a71d 	strd	sl, r7, [r6, #116]	; 0x74
 801509e:	f001 f981 	bl	80163a4 <uxr_millis>
 80150a2:	4641      	mov	r1, r8
 80150a4:	4681      	mov	r9, r0
 80150a6:	4630      	mov	r0, r6
 80150a8:	f7ff fe4a 	bl	8014d40 <listen_message_reliably>
 80150ac:	f001 f97a 	bl	80163a4 <uxr_millis>
 80150b0:	eba0 0009 	sub.w	r0, r0, r9
 80150b4:	eba8 0100 	sub.w	r1, r8, r0
 80150b8:	f1bb 0f00 	cmp.w	fp, #0
 80150bc:	d029      	beq.n	8015112 <uxr_run_session_until_all_status+0xa2>
 80150be:	46ae      	mov	lr, r5
 80150c0:	f04f 0c00 	mov.w	ip, #0
 80150c4:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 80150c8:	2cff      	cmp	r4, #255	; 0xff
 80150ca:	d015      	beq.n	80150f8 <uxr_run_session_until_all_status+0x88>
 80150cc:	f10c 0c01 	add.w	ip, ip, #1
 80150d0:	45e3      	cmp	fp, ip
 80150d2:	d8f7      	bhi.n	80150c4 <uxr_run_session_until_all_status+0x54>
 80150d4:	2300      	movs	r3, #0
 80150d6:	67f3      	str	r3, [r6, #124]	; 0x7c
 80150d8:	e000      	b.n	80150dc <uxr_run_session_until_all_status+0x6c>
 80150da:	b158      	cbz	r0, 80150f4 <uxr_run_session_until_all_status+0x84>
 80150dc:	462b      	mov	r3, r5
 80150de:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 80150e2:	3302      	adds	r3, #2
 80150e4:	2801      	cmp	r0, #1
 80150e6:	eba3 0307 	sub.w	r3, r3, r7
 80150ea:	bf8c      	ite	hi
 80150ec:	2000      	movhi	r0, #0
 80150ee:	2001      	movls	r0, #1
 80150f0:	459b      	cmp	fp, r3
 80150f2:	d8f2      	bhi.n	80150da <uxr_run_session_until_all_status+0x6a>
 80150f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80150f8:	f83a 301c 	ldrh.w	r3, [sl, ip, lsl #1]
 80150fc:	f10c 0c01 	add.w	ip, ip, #1
 8015100:	45dc      	cmp	ip, fp
 8015102:	d201      	bcs.n	8015108 <uxr_run_session_until_all_status+0x98>
 8015104:	2b00      	cmp	r3, #0
 8015106:	d0dd      	beq.n	80150c4 <uxr_run_session_until_all_status+0x54>
 8015108:	2900      	cmp	r1, #0
 801510a:	dde3      	ble.n	80150d4 <uxr_run_session_until_all_status+0x64>
 801510c:	2b00      	cmp	r3, #0
 801510e:	d1ca      	bne.n	80150a6 <uxr_run_session_until_all_status+0x36>
 8015110:	e7e0      	b.n	80150d4 <uxr_run_session_until_all_status+0x64>
 8015112:	2001      	movs	r0, #1
 8015114:	f8c6 b07c 	str.w	fp, [r6, #124]	; 0x7c
 8015118:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801511c <wait_session_status>:
 801511c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015120:	4604      	mov	r4, r0
 8015122:	b09d      	sub	sp, #116	; 0x74
 8015124:	20ff      	movs	r0, #255	; 0xff
 8015126:	9303      	str	r3, [sp, #12]
 8015128:	7160      	strb	r0, [r4, #5]
 801512a:	2b00      	cmp	r3, #0
 801512c:	f000 80b6 	beq.w	801529c <wait_session_status+0x180>
 8015130:	4689      	mov	r9, r1
 8015132:	4692      	mov	sl, r2
 8015134:	f04f 0b00 	mov.w	fp, #0
 8015138:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801513a:	4652      	mov	r2, sl
 801513c:	4649      	mov	r1, r9
 801513e:	e9d3 0500 	ldrd	r0, r5, [r3]
 8015142:	47a8      	blx	r5
 8015144:	f001 f92e 	bl	80163a4 <uxr_millis>
 8015148:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801514c:	4605      	mov	r5, r0
 801514e:	e009      	b.n	8015164 <wait_session_status+0x48>
 8015150:	f001 f928 	bl	80163a4 <uxr_millis>
 8015154:	1b40      	subs	r0, r0, r5
 8015156:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 801515a:	2b00      	cmp	r3, #0
 801515c:	dd40      	ble.n	80151e0 <wait_session_status+0xc4>
 801515e:	7960      	ldrb	r0, [r4, #5]
 8015160:	28ff      	cmp	r0, #255	; 0xff
 8015162:	d145      	bne.n	80151f0 <wait_session_status+0xd4>
 8015164:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8015166:	a908      	add	r1, sp, #32
 8015168:	6896      	ldr	r6, [r2, #8]
 801516a:	6810      	ldr	r0, [r2, #0]
 801516c:	aa09      	add	r2, sp, #36	; 0x24
 801516e:	47b0      	blx	r6
 8015170:	2800      	cmp	r0, #0
 8015172:	d0ed      	beq.n	8015150 <wait_session_status+0x34>
 8015174:	a80c      	add	r0, sp, #48	; 0x30
 8015176:	2600      	movs	r6, #0
 8015178:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 801517c:	f7f8 fe84 	bl	800de88 <ucdr_init_buffer>
 8015180:	f10d 031e 	add.w	r3, sp, #30
 8015184:	aa07      	add	r2, sp, #28
 8015186:	a90c      	add	r1, sp, #48	; 0x30
 8015188:	4620      	mov	r0, r4
 801518a:	f88d 601c 	strb.w	r6, [sp, #28]
 801518e:	f000 fa8f 	bl	80156b0 <uxr_read_session_header>
 8015192:	2800      	cmp	r0, #0
 8015194:	d0dc      	beq.n	8015150 <wait_session_status+0x34>
 8015196:	4631      	mov	r1, r6
 8015198:	f89d 001c 	ldrb.w	r0, [sp, #28]
 801519c:	f000 ffac 	bl	80160f8 <uxr_stream_id_from_raw>
 80151a0:	f3c0 4707 	ubfx	r7, r0, #16, #8
 80151a4:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80151a8:	f3c0 2607 	ubfx	r6, r0, #8, #8
 80151ac:	2f01      	cmp	r7, #1
 80151ae:	9302      	str	r3, [sp, #8]
 80151b0:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 80151b4:	d05c      	beq.n	8015270 <wait_session_status+0x154>
 80151b6:	2f02      	cmp	r7, #2
 80151b8:	d020      	beq.n	80151fc <wait_session_status+0xe0>
 80151ba:	2f00      	cmp	r7, #0
 80151bc:	d1c8      	bne.n	8015150 <wait_session_status+0x34>
 80151be:	4639      	mov	r1, r7
 80151c0:	4638      	mov	r0, r7
 80151c2:	f000 ff99 	bl	80160f8 <uxr_stream_id_from_raw>
 80151c6:	a90c      	add	r1, sp, #48	; 0x30
 80151c8:	4602      	mov	r2, r0
 80151ca:	900b      	str	r0, [sp, #44]	; 0x2c
 80151cc:	4620      	mov	r0, r4
 80151ce:	f7ff fc2d 	bl	8014a2c <read_submessage_list>
 80151d2:	f001 f8e7 	bl	80163a4 <uxr_millis>
 80151d6:	1b40      	subs	r0, r0, r5
 80151d8:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 80151dc:	2b00      	cmp	r3, #0
 80151de:	dcbe      	bgt.n	801515e <wait_session_status+0x42>
 80151e0:	f10b 0b01 	add.w	fp, fp, #1
 80151e4:	9b03      	ldr	r3, [sp, #12]
 80151e6:	7960      	ldrb	r0, [r4, #5]
 80151e8:	455b      	cmp	r3, fp
 80151ea:	d001      	beq.n	80151f0 <wait_session_status+0xd4>
 80151ec:	28ff      	cmp	r0, #255	; 0xff
 80151ee:	d0a3      	beq.n	8015138 <wait_session_status+0x1c>
 80151f0:	38ff      	subs	r0, #255	; 0xff
 80151f2:	bf18      	it	ne
 80151f4:	2001      	movne	r0, #1
 80151f6:	b01d      	add	sp, #116	; 0x74
 80151f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80151fc:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8015200:	4631      	mov	r1, r6
 8015202:	f104 0008 	add.w	r0, r4, #8
 8015206:	9304      	str	r3, [sp, #16]
 8015208:	f001 f864 	bl	80162d4 <uxr_get_input_reliable_stream>
 801520c:	4680      	mov	r8, r0
 801520e:	b348      	cbz	r0, 8015264 <wait_session_status+0x148>
 8015210:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015212:	a80c      	add	r0, sp, #48	; 0x30
 8015214:	9205      	str	r2, [sp, #20]
 8015216:	f7f8 fe69 	bl	800deec <ucdr_buffer_remaining>
 801521a:	4603      	mov	r3, r0
 801521c:	f10d 001d 	add.w	r0, sp, #29
 8015220:	9a05      	ldr	r2, [sp, #20]
 8015222:	9000      	str	r0, [sp, #0]
 8015224:	4640      	mov	r0, r8
 8015226:	9902      	ldr	r1, [sp, #8]
 8015228:	f003 f92c 	bl	8018484 <uxr_receive_reliable_message>
 801522c:	b1d0      	cbz	r0, 8015264 <wait_session_status+0x148>
 801522e:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8015232:	2b00      	cmp	r3, #0
 8015234:	d03a      	beq.n	80152ac <wait_session_status+0x190>
 8015236:	9f04      	ldr	r7, [sp, #16]
 8015238:	e00a      	b.n	8015250 <wait_session_status+0x134>
 801523a:	f04f 0302 	mov.w	r3, #2
 801523e:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
 8015242:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 8015246:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 801524a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801524c:	f7ff fbee 	bl	8014a2c <read_submessage_list>
 8015250:	a914      	add	r1, sp, #80	; 0x50
 8015252:	2204      	movs	r2, #4
 8015254:	4640      	mov	r0, r8
 8015256:	f003 f997 	bl	8018588 <uxr_next_input_reliable_buffer_available>
 801525a:	4603      	mov	r3, r0
 801525c:	a914      	add	r1, sp, #80	; 0x50
 801525e:	4620      	mov	r0, r4
 8015260:	2b00      	cmp	r3, #0
 8015262:	d1ea      	bne.n	801523a <wait_session_status+0x11e>
 8015264:	4632      	mov	r2, r6
 8015266:	9904      	ldr	r1, [sp, #16]
 8015268:	4620      	mov	r0, r4
 801526a:	f7ff fa59 	bl	8014720 <write_submessage_acknack.isra.0>
 801526e:	e76f      	b.n	8015150 <wait_session_status+0x34>
 8015270:	4631      	mov	r1, r6
 8015272:	f104 0008 	add.w	r0, r4, #8
 8015276:	f001 f823 	bl	80162c0 <uxr_get_input_best_effort_stream>
 801527a:	2800      	cmp	r0, #0
 801527c:	f43f af68 	beq.w	8015150 <wait_session_status+0x34>
 8015280:	9902      	ldr	r1, [sp, #8]
 8015282:	f003 f875 	bl	8018370 <uxr_receive_best_effort_message>
 8015286:	2800      	cmp	r0, #0
 8015288:	f43f af62 	beq.w	8015150 <wait_session_status+0x34>
 801528c:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 8015290:	a90c      	add	r1, sp, #48	; 0x30
 8015292:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015294:	4620      	mov	r0, r4
 8015296:	f7ff fbc9 	bl	8014a2c <read_submessage_list>
 801529a:	e759      	b.n	8015150 <wait_session_status+0x34>
 801529c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801529e:	e9d3 0400 	ldrd	r0, r4, [r3]
 80152a2:	47a0      	blx	r4
 80152a4:	2001      	movs	r0, #1
 80152a6:	b01d      	add	sp, #116	; 0x74
 80152a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80152ac:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 80152b0:	a90c      	add	r1, sp, #48	; 0x30
 80152b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80152b4:	4620      	mov	r0, r4
 80152b6:	f7ff fbb9 	bl	8014a2c <read_submessage_list>
 80152ba:	e7bc      	b.n	8015236 <wait_session_status+0x11a>

080152bc <uxr_delete_session_retries>:
 80152bc:	b530      	push	{r4, r5, lr}
 80152be:	b08f      	sub	sp, #60	; 0x3c
 80152c0:	4604      	mov	r4, r0
 80152c2:	460d      	mov	r5, r1
 80152c4:	f000 fa34 	bl	8015730 <uxr_session_header_offset>
 80152c8:	2300      	movs	r3, #0
 80152ca:	2210      	movs	r2, #16
 80152cc:	a902      	add	r1, sp, #8
 80152ce:	9000      	str	r0, [sp, #0]
 80152d0:	a806      	add	r0, sp, #24
 80152d2:	f7f8 fdc7 	bl	800de64 <ucdr_init_buffer_origin_offset>
 80152d6:	a906      	add	r1, sp, #24
 80152d8:	4620      	mov	r0, r4
 80152da:	f000 f979 	bl	80155d0 <uxr_buffer_delete_session>
 80152de:	2200      	movs	r2, #0
 80152e0:	9b06      	ldr	r3, [sp, #24]
 80152e2:	4620      	mov	r0, r4
 80152e4:	4611      	mov	r1, r2
 80152e6:	f000 f9cf 	bl	8015688 <uxr_stamp_session_header>
 80152ea:	a806      	add	r0, sp, #24
 80152ec:	f7f8 fdfa 	bl	800dee4 <ucdr_buffer_length>
 80152f0:	462b      	mov	r3, r5
 80152f2:	4602      	mov	r2, r0
 80152f4:	a902      	add	r1, sp, #8
 80152f6:	4620      	mov	r0, r4
 80152f8:	f7ff ff10 	bl	801511c <wait_session_status>
 80152fc:	b118      	cbz	r0, 8015306 <uxr_delete_session_retries+0x4a>
 80152fe:	7960      	ldrb	r0, [r4, #5]
 8015300:	fab0 f080 	clz	r0, r0
 8015304:	0940      	lsrs	r0, r0, #5
 8015306:	b00f      	add	sp, #60	; 0x3c
 8015308:	bd30      	pop	{r4, r5, pc}
 801530a:	bf00      	nop

0801530c <uxr_create_session>:
 801530c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015310:	f100 0b08 	add.w	fp, r0, #8
 8015314:	4604      	mov	r4, r0
 8015316:	b0ab      	sub	sp, #172	; 0xac
 8015318:	4658      	mov	r0, fp
 801531a:	465e      	mov	r6, fp
 801531c:	f000 ff22 	bl	8016164 <uxr_reset_stream_storage>
 8015320:	4620      	mov	r0, r4
 8015322:	f000 fa05 	bl	8015730 <uxr_session_header_offset>
 8015326:	2300      	movs	r3, #0
 8015328:	221c      	movs	r2, #28
 801532a:	a90b      	add	r1, sp, #44	; 0x2c
 801532c:	9000      	str	r0, [sp, #0]
 801532e:	a812      	add	r0, sp, #72	; 0x48
 8015330:	f7f8 fd98 	bl	800de64 <ucdr_init_buffer_origin_offset>
 8015334:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8015336:	a912      	add	r1, sp, #72	; 0x48
 8015338:	4620      	mov	r0, r4
 801533a:	8a1a      	ldrh	r2, [r3, #16]
 801533c:	3a04      	subs	r2, #4
 801533e:	b292      	uxth	r2, r2
 8015340:	f000 f91c 	bl	801557c <uxr_buffer_create_session>
 8015344:	9912      	ldr	r1, [sp, #72]	; 0x48
 8015346:	4620      	mov	r0, r4
 8015348:	f000 f98a 	bl	8015660 <uxr_stamp_create_session_header>
 801534c:	a812      	add	r0, sp, #72	; 0x48
 801534e:	f7f8 fdc9 	bl	800dee4 <ucdr_buffer_length>
 8015352:	23ff      	movs	r3, #255	; 0xff
 8015354:	4681      	mov	r9, r0
 8015356:	7163      	strb	r3, [r4, #5]
 8015358:	230a      	movs	r3, #10
 801535a:	9303      	str	r3, [sp, #12]
 801535c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801535e:	464a      	mov	r2, r9
 8015360:	a90b      	add	r1, sp, #44	; 0x2c
 8015362:	e9d3 0500 	ldrd	r0, r5, [r3]
 8015366:	47a8      	blx	r5
 8015368:	f001 f81c 	bl	80163a4 <uxr_millis>
 801536c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8015370:	4605      	mov	r5, r0
 8015372:	e009      	b.n	8015388 <uxr_create_session+0x7c>
 8015374:	f001 f816 	bl	80163a4 <uxr_millis>
 8015378:	1b40      	subs	r0, r0, r5
 801537a:	7962      	ldrb	r2, [r4, #5]
 801537c:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8015380:	2b00      	cmp	r3, #0
 8015382:	dd38      	ble.n	80153f6 <uxr_create_session+0xea>
 8015384:	2aff      	cmp	r2, #255	; 0xff
 8015386:	d13c      	bne.n	8015402 <uxr_create_session+0xf6>
 8015388:	6f22      	ldr	r2, [r4, #112]	; 0x70
 801538a:	a907      	add	r1, sp, #28
 801538c:	6897      	ldr	r7, [r2, #8]
 801538e:	6810      	ldr	r0, [r2, #0]
 8015390:	aa08      	add	r2, sp, #32
 8015392:	47b8      	blx	r7
 8015394:	2800      	cmp	r0, #0
 8015396:	d0ed      	beq.n	8015374 <uxr_create_session+0x68>
 8015398:	a81a      	add	r0, sp, #104	; 0x68
 801539a:	2700      	movs	r7, #0
 801539c:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 80153a0:	f7f8 fd72 	bl	800de88 <ucdr_init_buffer>
 80153a4:	f10d 031a 	add.w	r3, sp, #26
 80153a8:	aa06      	add	r2, sp, #24
 80153aa:	a91a      	add	r1, sp, #104	; 0x68
 80153ac:	4620      	mov	r0, r4
 80153ae:	f88d 7018 	strb.w	r7, [sp, #24]
 80153b2:	f000 f97d 	bl	80156b0 <uxr_read_session_header>
 80153b6:	2800      	cmp	r0, #0
 80153b8:	d0dc      	beq.n	8015374 <uxr_create_session+0x68>
 80153ba:	4639      	mov	r1, r7
 80153bc:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80153c0:	f000 fe9a 	bl	80160f8 <uxr_stream_id_from_raw>
 80153c4:	f3c0 4707 	ubfx	r7, r0, #16, #8
 80153c8:	f8bd b01a 	ldrh.w	fp, [sp, #26]
 80153cc:	f3c0 2807 	ubfx	r8, r0, #8, #8
 80153d0:	2f01      	cmp	r7, #1
 80153d2:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 80153d6:	d053      	beq.n	8015480 <uxr_create_session+0x174>
 80153d8:	2f02      	cmp	r7, #2
 80153da:	d018      	beq.n	801540e <uxr_create_session+0x102>
 80153dc:	2f00      	cmp	r7, #0
 80153de:	d1c9      	bne.n	8015374 <uxr_create_session+0x68>
 80153e0:	4639      	mov	r1, r7
 80153e2:	4638      	mov	r0, r7
 80153e4:	f000 fe88 	bl	80160f8 <uxr_stream_id_from_raw>
 80153e8:	a91a      	add	r1, sp, #104	; 0x68
 80153ea:	4602      	mov	r2, r0
 80153ec:	900a      	str	r0, [sp, #40]	; 0x28
 80153ee:	4620      	mov	r0, r4
 80153f0:	f7ff fb1c 	bl	8014a2c <read_submessage_list>
 80153f4:	e7be      	b.n	8015374 <uxr_create_session+0x68>
 80153f6:	9b03      	ldr	r3, [sp, #12]
 80153f8:	3b01      	subs	r3, #1
 80153fa:	9303      	str	r3, [sp, #12]
 80153fc:	d001      	beq.n	8015402 <uxr_create_session+0xf6>
 80153fe:	2aff      	cmp	r2, #255	; 0xff
 8015400:	d0ac      	beq.n	801535c <uxr_create_session+0x50>
 8015402:	2a00      	cmp	r2, #0
 8015404:	d051      	beq.n	80154aa <uxr_create_session+0x19e>
 8015406:	2000      	movs	r0, #0
 8015408:	b02b      	add	sp, #172	; 0xac
 801540a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801540e:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8015412:	4641      	mov	r1, r8
 8015414:	4630      	mov	r0, r6
 8015416:	9304      	str	r3, [sp, #16]
 8015418:	f000 ff5c 	bl	80162d4 <uxr_get_input_reliable_stream>
 801541c:	4682      	mov	sl, r0
 801541e:	b348      	cbz	r0, 8015474 <uxr_create_session+0x168>
 8015420:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8015422:	a81a      	add	r0, sp, #104	; 0x68
 8015424:	9205      	str	r2, [sp, #20]
 8015426:	f7f8 fd61 	bl	800deec <ucdr_buffer_remaining>
 801542a:	4603      	mov	r3, r0
 801542c:	f10d 0019 	add.w	r0, sp, #25
 8015430:	9a05      	ldr	r2, [sp, #20]
 8015432:	4659      	mov	r1, fp
 8015434:	9000      	str	r0, [sp, #0]
 8015436:	4650      	mov	r0, sl
 8015438:	f003 f824 	bl	8018484 <uxr_receive_reliable_message>
 801543c:	b1d0      	cbz	r0, 8015474 <uxr_create_session+0x168>
 801543e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8015442:	2b00      	cmp	r3, #0
 8015444:	d038      	beq.n	80154b8 <uxr_create_session+0x1ac>
 8015446:	9f04      	ldr	r7, [sp, #16]
 8015448:	e00a      	b.n	8015460 <uxr_create_session+0x154>
 801544a:	f04f 0302 	mov.w	r3, #2
 801544e:	f88d 7028 	strb.w	r7, [sp, #40]	; 0x28
 8015452:	f88d 8029 	strb.w	r8, [sp, #41]	; 0x29
 8015456:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801545a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801545c:	f7ff fae6 	bl	8014a2c <read_submessage_list>
 8015460:	a922      	add	r1, sp, #136	; 0x88
 8015462:	2204      	movs	r2, #4
 8015464:	4650      	mov	r0, sl
 8015466:	f003 f88f 	bl	8018588 <uxr_next_input_reliable_buffer_available>
 801546a:	4603      	mov	r3, r0
 801546c:	a922      	add	r1, sp, #136	; 0x88
 801546e:	4620      	mov	r0, r4
 8015470:	2b00      	cmp	r3, #0
 8015472:	d1ea      	bne.n	801544a <uxr_create_session+0x13e>
 8015474:	4642      	mov	r2, r8
 8015476:	9904      	ldr	r1, [sp, #16]
 8015478:	4620      	mov	r0, r4
 801547a:	f7ff f951 	bl	8014720 <write_submessage_acknack.isra.0>
 801547e:	e779      	b.n	8015374 <uxr_create_session+0x68>
 8015480:	4641      	mov	r1, r8
 8015482:	4630      	mov	r0, r6
 8015484:	f000 ff1c 	bl	80162c0 <uxr_get_input_best_effort_stream>
 8015488:	2800      	cmp	r0, #0
 801548a:	f43f af73 	beq.w	8015374 <uxr_create_session+0x68>
 801548e:	4659      	mov	r1, fp
 8015490:	f002 ff6e 	bl	8018370 <uxr_receive_best_effort_message>
 8015494:	2800      	cmp	r0, #0
 8015496:	f43f af6d 	beq.w	8015374 <uxr_create_session+0x68>
 801549a:	f88d 702a 	strb.w	r7, [sp, #42]	; 0x2a
 801549e:	a91a      	add	r1, sp, #104	; 0x68
 80154a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80154a2:	4620      	mov	r0, r4
 80154a4:	f7ff fac2 	bl	8014a2c <read_submessage_list>
 80154a8:	e764      	b.n	8015374 <uxr_create_session+0x68>
 80154aa:	4630      	mov	r0, r6
 80154ac:	f000 fe5a 	bl	8016164 <uxr_reset_stream_storage>
 80154b0:	2001      	movs	r0, #1
 80154b2:	b02b      	add	sp, #172	; 0xac
 80154b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80154b8:	f88d 702a 	strb.w	r7, [sp, #42]	; 0x2a
 80154bc:	a91a      	add	r1, sp, #104	; 0x68
 80154be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80154c0:	4620      	mov	r0, r4
 80154c2:	f7ff fab3 	bl	8014a2c <read_submessage_list>
 80154c6:	e7be      	b.n	8015446 <uxr_create_session+0x13a>

080154c8 <uxr_prepare_stream_to_write_submessage>:
 80154c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80154cc:	b082      	sub	sp, #8
 80154ce:	4604      	mov	r4, r0
 80154d0:	4610      	mov	r0, r2
 80154d2:	4615      	mov	r5, r2
 80154d4:	461e      	mov	r6, r3
 80154d6:	f3c1 2a07 	ubfx	sl, r1, #8, #8
 80154da:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 80154de:	f105 0904 	add.w	r9, r5, #4
 80154e2:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 80154e6:	9101      	str	r1, [sp, #4]
 80154e8:	f000 ff56 	bl	8016398 <uxr_submessage_padding>
 80154ec:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80154f0:	4481      	add	r9, r0
 80154f2:	2b01      	cmp	r3, #1
 80154f4:	d01d      	beq.n	8015532 <uxr_prepare_stream_to_write_submessage+0x6a>
 80154f6:	2b02      	cmp	r3, #2
 80154f8:	d116      	bne.n	8015528 <uxr_prepare_stream_to_write_submessage+0x60>
 80154fa:	f104 0008 	add.w	r0, r4, #8
 80154fe:	4651      	mov	r1, sl
 8015500:	f000 fed2 	bl	80162a8 <uxr_get_output_reliable_stream>
 8015504:	4604      	mov	r4, r0
 8015506:	b158      	cbz	r0, 8015520 <uxr_prepare_stream_to_write_submessage+0x58>
 8015508:	4649      	mov	r1, r9
 801550a:	4632      	mov	r2, r6
 801550c:	f003 fa02 	bl	8018914 <uxr_prepare_reliable_buffer_to_write>
 8015510:	4604      	mov	r4, r0
 8015512:	b12c      	cbz	r4, 8015520 <uxr_prepare_stream_to_write_submessage+0x58>
 8015514:	4643      	mov	r3, r8
 8015516:	b2aa      	uxth	r2, r5
 8015518:	4639      	mov	r1, r7
 801551a:	4630      	mov	r0, r6
 801551c:	f000 fefc 	bl	8016318 <uxr_buffer_submessage_header>
 8015520:	4620      	mov	r0, r4
 8015522:	b002      	add	sp, #8
 8015524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015528:	2400      	movs	r4, #0
 801552a:	4620      	mov	r0, r4
 801552c:	b002      	add	sp, #8
 801552e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015532:	f104 0008 	add.w	r0, r4, #8
 8015536:	4651      	mov	r1, sl
 8015538:	f000 feae 	bl	8016298 <uxr_get_output_best_effort_stream>
 801553c:	4604      	mov	r4, r0
 801553e:	2800      	cmp	r0, #0
 8015540:	d0ee      	beq.n	8015520 <uxr_prepare_stream_to_write_submessage+0x58>
 8015542:	4649      	mov	r1, r9
 8015544:	4632      	mov	r2, r6
 8015546:	f003 f90f 	bl	8018768 <uxr_prepare_best_effort_buffer_to_write>
 801554a:	4604      	mov	r4, r0
 801554c:	e7e1      	b.n	8015512 <uxr_prepare_stream_to_write_submessage+0x4a>
 801554e:	bf00      	nop

08015550 <uxr_init_session_info>:
 8015550:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8015554:	23ff      	movs	r3, #255	; 0xff
 8015556:	7102      	strb	r2, [r0, #4]
 8015558:	f880 c001 	strb.w	ip, [r0, #1]
 801555c:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8015560:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8015564:	7001      	strb	r1, [r0, #0]
 8015566:	f880 c002 	strb.w	ip, [r0, #2]
 801556a:	7143      	strb	r3, [r0, #5]
 801556c:	70c2      	strb	r2, [r0, #3]
 801556e:	b500      	push	{lr}
 8015570:	f04f 0e09 	mov.w	lr, #9
 8015574:	f8a0 e006 	strh.w	lr, [r0, #6]
 8015578:	f85d fb04 	ldr.w	pc, [sp], #4

0801557c <uxr_buffer_create_session>:
 801557c:	b530      	push	{r4, r5, lr}
 801557e:	2300      	movs	r3, #0
 8015580:	b089      	sub	sp, #36	; 0x24
 8015582:	4d12      	ldr	r5, [pc, #72]	; (80155cc <uxr_buffer_create_session+0x50>)
 8015584:	460c      	mov	r4, r1
 8015586:	9307      	str	r3, [sp, #28]
 8015588:	4619      	mov	r1, r3
 801558a:	f8ad 201c 	strh.w	r2, [sp, #28]
 801558e:	2201      	movs	r2, #1
 8015590:	9301      	str	r3, [sp, #4]
 8015592:	80c2      	strh	r2, [r0, #6]
 8015594:	f88d 2004 	strb.w	r2, [sp, #4]
 8015598:	682a      	ldr	r2, [r5, #0]
 801559a:	9303      	str	r3, [sp, #12]
 801559c:	9200      	str	r2, [sp, #0]
 801559e:	88aa      	ldrh	r2, [r5, #4]
 80155a0:	9306      	str	r3, [sp, #24]
 80155a2:	f8ad 2006 	strh.w	r2, [sp, #6]
 80155a6:	f8d0 2001 	ldr.w	r2, [r0, #1]
 80155aa:	9202      	str	r2, [sp, #8]
 80155ac:	7802      	ldrb	r2, [r0, #0]
 80155ae:	4620      	mov	r0, r4
 80155b0:	f88d 200c 	strb.w	r2, [sp, #12]
 80155b4:	2210      	movs	r2, #16
 80155b6:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80155ba:	f000 fead 	bl	8016318 <uxr_buffer_submessage_header>
 80155be:	4669      	mov	r1, sp
 80155c0:	4620      	mov	r0, r4
 80155c2:	f001 fcdd 	bl	8016f80 <uxr_serialize_CREATE_CLIENT_Payload>
 80155c6:	b009      	add	sp, #36	; 0x24
 80155c8:	bd30      	pop	{r4, r5, pc}
 80155ca:	bf00      	nop
 80155cc:	0801a688 	.word	0x0801a688

080155d0 <uxr_buffer_delete_session>:
 80155d0:	4a0c      	ldr	r2, [pc, #48]	; (8015604 <uxr_buffer_delete_session+0x34>)
 80155d2:	2302      	movs	r3, #2
 80155d4:	f44f 7c00 	mov.w	ip, #512	; 0x200
 80155d8:	b510      	push	{r4, lr}
 80155da:	460c      	mov	r4, r1
 80155dc:	b082      	sub	sp, #8
 80155de:	8911      	ldrh	r1, [r2, #8]
 80155e0:	2204      	movs	r2, #4
 80155e2:	80c3      	strh	r3, [r0, #6]
 80155e4:	2300      	movs	r3, #0
 80155e6:	f8ad 1006 	strh.w	r1, [sp, #6]
 80155ea:	4620      	mov	r0, r4
 80155ec:	2103      	movs	r1, #3
 80155ee:	f8ad c004 	strh.w	ip, [sp, #4]
 80155f2:	f000 fe91 	bl	8016318 <uxr_buffer_submessage_header>
 80155f6:	a901      	add	r1, sp, #4
 80155f8:	4620      	mov	r0, r4
 80155fa:	f001 fd69 	bl	80170d0 <uxr_serialize_DELETE_Payload>
 80155fe:	b002      	add	sp, #8
 8015600:	bd10      	pop	{r4, pc}
 8015602:	bf00      	nop
 8015604:	0801a688 	.word	0x0801a688

08015608 <uxr_read_create_session_status>:
 8015608:	b510      	push	{r4, lr}
 801560a:	460b      	mov	r3, r1
 801560c:	b088      	sub	sp, #32
 801560e:	4604      	mov	r4, r0
 8015610:	a901      	add	r1, sp, #4
 8015612:	4618      	mov	r0, r3
 8015614:	f001 fd6c 	bl	80170f0 <uxr_deserialize_STATUS_AGENT_Payload>
 8015618:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801561c:	7163      	strb	r3, [r4, #5]
 801561e:	b008      	add	sp, #32
 8015620:	bd10      	pop	{r4, pc}
 8015622:	bf00      	nop

08015624 <uxr_read_delete_session_status>:
 8015624:	b510      	push	{r4, lr}
 8015626:	b084      	sub	sp, #16
 8015628:	4604      	mov	r4, r0
 801562a:	4608      	mov	r0, r1
 801562c:	a902      	add	r1, sp, #8
 801562e:	f001 fd8f 	bl	8017150 <uxr_deserialize_STATUS_Payload>
 8015632:	88e3      	ldrh	r3, [r4, #6]
 8015634:	2b02      	cmp	r3, #2
 8015636:	d001      	beq.n	801563c <uxr_read_delete_session_status+0x18>
 8015638:	b004      	add	sp, #16
 801563a:	bd10      	pop	{r4, pc}
 801563c:	f10d 000a 	add.w	r0, sp, #10
 8015640:	f7fe fec4 	bl	80143cc <uxr_object_id_from_raw>
 8015644:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8015648:	f89d 3009 	ldrb.w	r3, [sp, #9]
 801564c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8015650:	b29b      	uxth	r3, r3
 8015652:	2b02      	cmp	r3, #2
 8015654:	d1f0      	bne.n	8015638 <uxr_read_delete_session_status+0x14>
 8015656:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801565a:	7163      	strb	r3, [r4, #5]
 801565c:	e7ec      	b.n	8015638 <uxr_read_delete_session_status+0x14>
 801565e:	bf00      	nop

08015660 <uxr_stamp_create_session_header>:
 8015660:	b510      	push	{r4, lr}
 8015662:	2208      	movs	r2, #8
 8015664:	b08a      	sub	sp, #40	; 0x28
 8015666:	4604      	mov	r4, r0
 8015668:	eb0d 0002 	add.w	r0, sp, r2
 801566c:	f7f8 fc0c 	bl	800de88 <ucdr_init_buffer>
 8015670:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015674:	2300      	movs	r3, #0
 8015676:	a802      	add	r0, sp, #8
 8015678:	f001 0180 	and.w	r1, r1, #128	; 0x80
 801567c:	9400      	str	r4, [sp, #0]
 801567e:	461a      	mov	r2, r3
 8015680:	f001 f846 	bl	8016710 <uxr_serialize_message_header>
 8015684:	b00a      	add	sp, #40	; 0x28
 8015686:	bd10      	pop	{r4, pc}

08015688 <uxr_stamp_session_header>:
 8015688:	b530      	push	{r4, r5, lr}
 801568a:	b08d      	sub	sp, #52	; 0x34
 801568c:	4604      	mov	r4, r0
 801568e:	460d      	mov	r5, r1
 8015690:	4619      	mov	r1, r3
 8015692:	a804      	add	r0, sp, #16
 8015694:	9203      	str	r2, [sp, #12]
 8015696:	2208      	movs	r2, #8
 8015698:	f7f8 fbf6 	bl	800de88 <ucdr_init_buffer>
 801569c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80156a0:	9b03      	ldr	r3, [sp, #12]
 80156a2:	462a      	mov	r2, r5
 80156a4:	a804      	add	r0, sp, #16
 80156a6:	9400      	str	r4, [sp, #0]
 80156a8:	f001 f832 	bl	8016710 <uxr_serialize_message_header>
 80156ac:	b00d      	add	sp, #52	; 0x34
 80156ae:	bd30      	pop	{r4, r5, pc}

080156b0 <uxr_read_session_header>:
 80156b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80156b4:	4607      	mov	r7, r0
 80156b6:	b084      	sub	sp, #16
 80156b8:	4608      	mov	r0, r1
 80156ba:	460c      	mov	r4, r1
 80156bc:	4615      	mov	r5, r2
 80156be:	461e      	mov	r6, r3
 80156c0:	f7f8 fc14 	bl	800deec <ucdr_buffer_remaining>
 80156c4:	2808      	cmp	r0, #8
 80156c6:	d803      	bhi.n	80156d0 <uxr_read_session_header+0x20>
 80156c8:	2000      	movs	r0, #0
 80156ca:	b004      	add	sp, #16
 80156cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80156d0:	f10d 080c 	add.w	r8, sp, #12
 80156d4:	4633      	mov	r3, r6
 80156d6:	462a      	mov	r2, r5
 80156d8:	4620      	mov	r0, r4
 80156da:	f10d 010b 	add.w	r1, sp, #11
 80156de:	f8cd 8000 	str.w	r8, [sp]
 80156e2:	f001 f833 	bl	801674c <uxr_deserialize_message_header>
 80156e6:	783a      	ldrb	r2, [r7, #0]
 80156e8:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80156ec:	4293      	cmp	r3, r2
 80156ee:	d1eb      	bne.n	80156c8 <uxr_read_session_header+0x18>
 80156f0:	061b      	lsls	r3, r3, #24
 80156f2:	d41b      	bmi.n	801572c <uxr_read_session_header+0x7c>
 80156f4:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80156f8:	787b      	ldrb	r3, [r7, #1]
 80156fa:	429a      	cmp	r2, r3
 80156fc:	d003      	beq.n	8015706 <uxr_read_session_header+0x56>
 80156fe:	2001      	movs	r0, #1
 8015700:	f080 0001 	eor.w	r0, r0, #1
 8015704:	e7e1      	b.n	80156ca <uxr_read_session_header+0x1a>
 8015706:	f89d 200d 	ldrb.w	r2, [sp, #13]
 801570a:	1cb8      	adds	r0, r7, #2
 801570c:	78bb      	ldrb	r3, [r7, #2]
 801570e:	429a      	cmp	r2, r3
 8015710:	d1f5      	bne.n	80156fe <uxr_read_session_header+0x4e>
 8015712:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8015716:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 801571a:	429a      	cmp	r2, r3
 801571c:	d1ef      	bne.n	80156fe <uxr_read_session_header+0x4e>
 801571e:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8015722:	7843      	ldrb	r3, [r0, #1]
 8015724:	429a      	cmp	r2, r3
 8015726:	d1ea      	bne.n	80156fe <uxr_read_session_header+0x4e>
 8015728:	2000      	movs	r0, #0
 801572a:	e7e9      	b.n	8015700 <uxr_read_session_header+0x50>
 801572c:	2001      	movs	r0, #1
 801572e:	e7cc      	b.n	80156ca <uxr_read_session_header+0x1a>

08015730 <uxr_session_header_offset>:
 8015730:	f990 3000 	ldrsb.w	r3, [r0]
 8015734:	2b00      	cmp	r3, #0
 8015736:	bfac      	ite	ge
 8015738:	2008      	movge	r0, #8
 801573a:	2004      	movlt	r0, #4
 801573c:	4770      	bx	lr
 801573e:	bf00      	nop

08015740 <uxr_init_base_object_request>:
 8015740:	b510      	push	{r4, lr}
 8015742:	b082      	sub	sp, #8
 8015744:	f64f 74f4 	movw	r4, #65524	; 0xfff4
 8015748:	9101      	str	r1, [sp, #4]
 801574a:	88c3      	ldrh	r3, [r0, #6]
 801574c:	f1a3 010a 	sub.w	r1, r3, #10
 8015750:	b289      	uxth	r1, r1
 8015752:	42a1      	cmp	r1, r4
 8015754:	d80f      	bhi.n	8015776 <uxr_init_base_object_request+0x36>
 8015756:	3301      	adds	r3, #1
 8015758:	b29c      	uxth	r4, r3
 801575a:	f3c3 2c07 	ubfx	ip, r3, #8, #8
 801575e:	b2db      	uxtb	r3, r3
 8015760:	80c4      	strh	r4, [r0, #6]
 8015762:	1c91      	adds	r1, r2, #2
 8015764:	9801      	ldr	r0, [sp, #4]
 8015766:	f882 c000 	strb.w	ip, [r2]
 801576a:	7053      	strb	r3, [r2, #1]
 801576c:	f7fe fe42 	bl	80143f4 <uxr_object_id_to_raw>
 8015770:	4620      	mov	r0, r4
 8015772:	b002      	add	sp, #8
 8015774:	bd10      	pop	{r4, pc}
 8015776:	230a      	movs	r3, #10
 8015778:	f04f 0c00 	mov.w	ip, #0
 801577c:	461c      	mov	r4, r3
 801577e:	e7ef      	b.n	8015760 <uxr_init_base_object_request+0x20>

08015780 <uxr_parse_base_object_request>:
 8015780:	b570      	push	{r4, r5, r6, lr}
 8015782:	4604      	mov	r4, r0
 8015784:	3002      	adds	r0, #2
 8015786:	460d      	mov	r5, r1
 8015788:	4616      	mov	r6, r2
 801578a:	f7fe fe1f 	bl	80143cc <uxr_object_id_from_raw>
 801578e:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8015792:	8028      	strh	r0, [r5, #0]
 8015794:	806b      	strh	r3, [r5, #2]
 8015796:	7822      	ldrb	r2, [r4, #0]
 8015798:	7863      	ldrb	r3, [r4, #1]
 801579a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801579e:	8033      	strh	r3, [r6, #0]
 80157a0:	bd70      	pop	{r4, r5, r6, pc}
 80157a2:	bf00      	nop

080157a4 <uxr_init_framing_io>:
 80157a4:	2300      	movs	r3, #0
 80157a6:	7041      	strb	r1, [r0, #1]
 80157a8:	7003      	strb	r3, [r0, #0]
 80157aa:	8583      	strh	r3, [r0, #44]	; 0x2c
 80157ac:	4770      	bx	lr
 80157ae:	bf00      	nop

080157b0 <uxr_write_framed_msg>:
 80157b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80157b4:	4617      	mov	r7, r2
 80157b6:	7842      	ldrb	r2, [r0, #1]
 80157b8:	460e      	mov	r6, r1
 80157ba:	b083      	sub	sp, #12
 80157bc:	f1a2 017d 	sub.w	r1, r2, #125	; 0x7d
 80157c0:	469b      	mov	fp, r3
 80157c2:	237e      	movs	r3, #126	; 0x7e
 80157c4:	4604      	mov	r4, r0
 80157c6:	2901      	cmp	r1, #1
 80157c8:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 80157cc:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 80157d0:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 80157d4:	f240 8115 	bls.w	8015a02 <uxr_write_framed_msg+0x252>
 80157d8:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 80157dc:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
 80157e0:	2202      	movs	r2, #2
 80157e2:	2901      	cmp	r1, #1
 80157e4:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80157e8:	d952      	bls.n	8015890 <uxr_write_framed_msg+0xe0>
 80157ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80157ec:	2103      	movs	r1, #3
 80157ee:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 80157f2:	b2dd      	uxtb	r5, r3
 80157f4:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 80157f8:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 80157fc:	2a01      	cmp	r2, #1
 80157fe:	d95c      	bls.n	80158ba <uxr_write_framed_msg+0x10a>
 8015800:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015802:	1862      	adds	r2, r4, r1
 8015804:	3101      	adds	r1, #1
 8015806:	f3c3 2007 	ubfx	r0, r3, #8, #8
 801580a:	f882 5038 	strb.w	r5, [r2, #56]	; 0x38
 801580e:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 8015812:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 8015816:	2a01      	cmp	r2, #1
 8015818:	d961      	bls.n	80158de <uxr_write_framed_msg+0x12e>
 801581a:	1c4a      	adds	r2, r1, #1
 801581c:	4421      	add	r1, r4
 801581e:	b2d2      	uxtb	r2, r2
 8015820:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
 8015824:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8015828:	2b00      	cmp	r3, #0
 801582a:	d06a      	beq.n	8015902 <uxr_write_framed_msg+0x152>
 801582c:	f04f 0800 	mov.w	r8, #0
 8015830:	46c1      	mov	r9, r8
 8015832:	e016      	b.n	8015862 <uxr_write_framed_msg+0xb2>
 8015834:	2a29      	cmp	r2, #41	; 0x29
 8015836:	d868      	bhi.n	801590a <uxr_write_framed_msg+0x15a>
 8015838:	18a0      	adds	r0, r4, r2
 801583a:	3201      	adds	r2, #1
 801583c:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 8015840:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8015844:	ea88 0101 	eor.w	r1, r8, r1
 8015848:	4b7d      	ldr	r3, [pc, #500]	; (8015a40 <uxr_write_framed_msg+0x290>)
 801584a:	f109 0901 	add.w	r9, r9, #1
 801584e:	b2c9      	uxtb	r1, r1
 8015850:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 8015854:	ea82 2818 	eor.w	r8, r2, r8, lsr #8
 8015858:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801585a:	454b      	cmp	r3, r9
 801585c:	d969      	bls.n	8015932 <uxr_write_framed_msg+0x182>
 801585e:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8015862:	f81b 1009 	ldrb.w	r1, [fp, r9]
 8015866:	f1a1 007d 	sub.w	r0, r1, #125	; 0x7d
 801586a:	2801      	cmp	r0, #1
 801586c:	d8e2      	bhi.n	8015834 <uxr_write_framed_msg+0x84>
 801586e:	1c50      	adds	r0, r2, #1
 8015870:	b2c0      	uxtb	r0, r0
 8015872:	2829      	cmp	r0, #41	; 0x29
 8015874:	d849      	bhi.n	801590a <uxr_write_framed_msg+0x15a>
 8015876:	18a0      	adds	r0, r4, r2
 8015878:	f04f 037d 	mov.w	r3, #125	; 0x7d
 801587c:	3202      	adds	r2, #2
 801587e:	f081 0520 	eor.w	r5, r1, #32
 8015882:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8015886:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
 801588a:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801588e:	e7d9      	b.n	8015844 <uxr_write_framed_msg+0x94>
 8015890:	2104      	movs	r1, #4
 8015892:	f04f 0c03 	mov.w	ip, #3
 8015896:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015898:	4422      	add	r2, r4
 801589a:	f04f 0e7d 	mov.w	lr, #125	; 0x7d
 801589e:	44a4      	add	ip, r4
 80158a0:	b2dd      	uxtb	r5, r3
 80158a2:	f080 0020 	eor.w	r0, r0, #32
 80158a6:	f882 e038 	strb.w	lr, [r2, #56]	; 0x38
 80158aa:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 80158ae:	f88c 0038 	strb.w	r0, [ip, #56]	; 0x38
 80158b2:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 80158b6:	2a01      	cmp	r2, #1
 80158b8:	d8a2      	bhi.n	8015800 <uxr_write_framed_msg+0x50>
 80158ba:	1862      	adds	r2, r4, r1
 80158bc:	207d      	movs	r0, #125	; 0x7d
 80158be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80158c0:	f085 0520 	eor.w	r5, r5, #32
 80158c4:	f882 0038 	strb.w	r0, [r2, #56]	; 0x38
 80158c8:	3102      	adds	r1, #2
 80158ca:	f3c3 2007 	ubfx	r0, r3, #8, #8
 80158ce:	f882 5039 	strb.w	r5, [r2, #57]	; 0x39
 80158d2:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 80158d6:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 80158da:	2a01      	cmp	r2, #1
 80158dc:	d89d      	bhi.n	801581a <uxr_write_framed_msg+0x6a>
 80158de:	1c4d      	adds	r5, r1, #1
 80158e0:	1c8a      	adds	r2, r1, #2
 80158e2:	f080 0020 	eor.w	r0, r0, #32
 80158e6:	4421      	add	r1, r4
 80158e8:	fa54 f585 	uxtab	r5, r4, r5
 80158ec:	b2d2      	uxtb	r2, r2
 80158ee:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 80158f2:	f881 c038 	strb.w	ip, [r1, #56]	; 0x38
 80158f6:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
 80158fa:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80158fe:	2b00      	cmp	r3, #0
 8015900:	d194      	bne.n	801582c <uxr_write_framed_msg+0x7c>
 8015902:	4619      	mov	r1, r3
 8015904:	f8ad 3004 	strh.w	r3, [sp, #4]
 8015908:	e019      	b.n	801593e <uxr_write_framed_msg+0x18e>
 801590a:	2500      	movs	r5, #0
 801590c:	e000      	b.n	8015910 <uxr_write_framed_msg+0x160>
 801590e:	b160      	cbz	r0, 801592a <uxr_write_framed_msg+0x17a>
 8015910:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8015914:	1b52      	subs	r2, r2, r5
 8015916:	4653      	mov	r3, sl
 8015918:	4638      	mov	r0, r7
 801591a:	4421      	add	r1, r4
 801591c:	47b0      	blx	r6
 801591e:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8015922:	4405      	add	r5, r0
 8015924:	4295      	cmp	r5, r2
 8015926:	d3f2      	bcc.n	801590e <uxr_write_framed_msg+0x15e>
 8015928:	d066      	beq.n	80159f8 <uxr_write_framed_msg+0x248>
 801592a:	2000      	movs	r0, #0
 801592c:	b003      	add	sp, #12
 801592e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015932:	fa5f f188 	uxtb.w	r1, r8
 8015936:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801593a:	f8ad 8004 	strh.w	r8, [sp, #4]
 801593e:	f04f 0900 	mov.w	r9, #0
 8015942:	f04f 0b7d 	mov.w	fp, #125	; 0x7d
 8015946:	46c8      	mov	r8, r9
 8015948:	e013      	b.n	8015972 <uxr_write_framed_msg+0x1c2>
 801594a:	2a29      	cmp	r2, #41	; 0x29
 801594c:	d824      	bhi.n	8015998 <uxr_write_framed_msg+0x1e8>
 801594e:	18a3      	adds	r3, r4, r2
 8015950:	3201      	adds	r2, #1
 8015952:	f883 1038 	strb.w	r1, [r3, #56]	; 0x38
 8015956:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801595a:	f109 0901 	add.w	r9, r9, #1
 801595e:	f1b9 0f02 	cmp.w	r9, #2
 8015962:	d02d      	beq.n	80159c0 <uxr_write_framed_msg+0x210>
 8015964:	f109 0308 	add.w	r3, r9, #8
 8015968:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801596c:	446b      	add	r3, sp
 801596e:	f813 1c04 	ldrb.w	r1, [r3, #-4]
 8015972:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 8015976:	2b01      	cmp	r3, #1
 8015978:	d8e7      	bhi.n	801594a <uxr_write_framed_msg+0x19a>
 801597a:	1c53      	adds	r3, r2, #1
 801597c:	b2db      	uxtb	r3, r3
 801597e:	2b29      	cmp	r3, #41	; 0x29
 8015980:	d80a      	bhi.n	8015998 <uxr_write_framed_msg+0x1e8>
 8015982:	18a3      	adds	r3, r4, r2
 8015984:	f081 0120 	eor.w	r1, r1, #32
 8015988:	3202      	adds	r2, #2
 801598a:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
 801598e:	f883 b038 	strb.w	fp, [r3, #56]	; 0x38
 8015992:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8015996:	e7e0      	b.n	801595a <uxr_write_framed_msg+0x1aa>
 8015998:	2500      	movs	r5, #0
 801599a:	e001      	b.n	80159a0 <uxr_write_framed_msg+0x1f0>
 801599c:	2800      	cmp	r0, #0
 801599e:	d0c4      	beq.n	801592a <uxr_write_framed_msg+0x17a>
 80159a0:	f105 0138 	add.w	r1, r5, #56	; 0x38
 80159a4:	1b52      	subs	r2, r2, r5
 80159a6:	4653      	mov	r3, sl
 80159a8:	4638      	mov	r0, r7
 80159aa:	4421      	add	r1, r4
 80159ac:	47b0      	blx	r6
 80159ae:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 80159b2:	4405      	add	r5, r0
 80159b4:	4295      	cmp	r5, r2
 80159b6:	d3f1      	bcc.n	801599c <uxr_write_framed_msg+0x1ec>
 80159b8:	d1b7      	bne.n	801592a <uxr_write_framed_msg+0x17a>
 80159ba:	f884 8062 	strb.w	r8, [r4, #98]	; 0x62
 80159be:	e7d1      	b.n	8015964 <uxr_write_framed_msg+0x1b4>
 80159c0:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 80159c4:	b19a      	cbz	r2, 80159ee <uxr_write_framed_msg+0x23e>
 80159c6:	2500      	movs	r5, #0
 80159c8:	e001      	b.n	80159ce <uxr_write_framed_msg+0x21e>
 80159ca:	2800      	cmp	r0, #0
 80159cc:	d0ad      	beq.n	801592a <uxr_write_framed_msg+0x17a>
 80159ce:	f105 0138 	add.w	r1, r5, #56	; 0x38
 80159d2:	1b52      	subs	r2, r2, r5
 80159d4:	4653      	mov	r3, sl
 80159d6:	4638      	mov	r0, r7
 80159d8:	4421      	add	r1, r4
 80159da:	47b0      	blx	r6
 80159dc:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 80159e0:	4405      	add	r5, r0
 80159e2:	4295      	cmp	r5, r2
 80159e4:	d3f1      	bcc.n	80159ca <uxr_write_framed_msg+0x21a>
 80159e6:	d1a0      	bne.n	801592a <uxr_write_framed_msg+0x17a>
 80159e8:	2300      	movs	r3, #0
 80159ea:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 80159ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80159f0:	b298      	uxth	r0, r3
 80159f2:	b003      	add	sp, #12
 80159f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80159f8:	f04f 0300 	mov.w	r3, #0
 80159fc:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8015a00:	e72a      	b.n	8015858 <uxr_write_framed_msg+0xa8>
 8015a02:	217d      	movs	r1, #125	; 0x7d
 8015a04:	f082 0220 	eor.w	r2, r2, #32
 8015a08:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
 8015a0c:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 8015a10:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
 8015a14:	2203      	movs	r2, #3
 8015a16:	2901      	cmp	r1, #1
 8015a18:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8015a1c:	d803      	bhi.n	8015a26 <uxr_write_framed_msg+0x276>
 8015a1e:	2105      	movs	r1, #5
 8015a20:	f04f 0c04 	mov.w	ip, #4
 8015a24:	e737      	b.n	8015896 <uxr_write_framed_msg+0xe6>
 8015a26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015a28:	2104      	movs	r1, #4
 8015a2a:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
 8015a2e:	b2dd      	uxtb	r5, r3
 8015a30:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 8015a34:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 8015a38:	2a01      	cmp	r2, #1
 8015a3a:	f63f aee1 	bhi.w	8015800 <uxr_write_framed_msg+0x50>
 8015a3e:	e73c      	b.n	80158ba <uxr_write_framed_msg+0x10a>
 8015a40:	0801bb40 	.word	0x0801bb40

08015a44 <uxr_framing_read_transport>:
 8015a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a48:	4604      	mov	r4, r0
 8015a4a:	b085      	sub	sp, #20
 8015a4c:	4692      	mov	sl, r2
 8015a4e:	4689      	mov	r9, r1
 8015a50:	461d      	mov	r5, r3
 8015a52:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8015a54:	f000 fca6 	bl	80163a4 <uxr_millis>
 8015a58:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8015a5c:	f894 702d 	ldrb.w	r7, [r4, #45]	; 0x2d
 8015a60:	4680      	mov	r8, r0
 8015a62:	42ba      	cmp	r2, r7
 8015a64:	d05f      	beq.n	8015b26 <uxr_framing_read_transport+0xe2>
 8015a66:	d817      	bhi.n	8015a98 <uxr_framing_read_transport+0x54>
 8015a68:	3f01      	subs	r7, #1
 8015a6a:	1aba      	subs	r2, r7, r2
 8015a6c:	2700      	movs	r7, #0
 8015a6e:	b2d2      	uxtb	r2, r2
 8015a70:	42b2      	cmp	r2, r6
 8015a72:	d81a      	bhi.n	8015aaa <uxr_framing_read_transport+0x66>
 8015a74:	19d3      	adds	r3, r2, r7
 8015a76:	42b3      	cmp	r3, r6
 8015a78:	d852      	bhi.n	8015b20 <uxr_framing_read_transport+0xdc>
 8015a7a:	b9d2      	cbnz	r2, 8015ab2 <uxr_framing_read_transport+0x6e>
 8015a7c:	2600      	movs	r6, #0
 8015a7e:	f000 fc91 	bl	80163a4 <uxr_millis>
 8015a82:	682b      	ldr	r3, [r5, #0]
 8015a84:	eba0 0008 	sub.w	r0, r0, r8
 8015a88:	1a1b      	subs	r3, r3, r0
 8015a8a:	4630      	mov	r0, r6
 8015a8c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015a90:	602b      	str	r3, [r5, #0]
 8015a92:	b005      	add	sp, #20
 8015a94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a98:	2f00      	cmp	r7, #0
 8015a9a:	d060      	beq.n	8015b5e <uxr_framing_read_transport+0x11a>
 8015a9c:	f1c2 022a 	rsb	r2, r2, #42	; 0x2a
 8015aa0:	3f01      	subs	r7, #1
 8015aa2:	b2d2      	uxtb	r2, r2
 8015aa4:	b2ff      	uxtb	r7, r7
 8015aa6:	42b2      	cmp	r2, r6
 8015aa8:	d9e4      	bls.n	8015a74 <uxr_framing_read_transport+0x30>
 8015aaa:	b2f2      	uxtb	r2, r6
 8015aac:	2700      	movs	r7, #0
 8015aae:	2a00      	cmp	r2, #0
 8015ab0:	d0e4      	beq.n	8015a7c <uxr_framing_read_transport+0x38>
 8015ab2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015ab4:	4650      	mov	r0, sl
 8015ab6:	9203      	str	r2, [sp, #12]
 8015ab8:	9300      	str	r3, [sp, #0]
 8015aba:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8015abe:	682b      	ldr	r3, [r5, #0]
 8015ac0:	3102      	adds	r1, #2
 8015ac2:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 8015b68 <uxr_framing_read_transport+0x124>
 8015ac6:	4421      	add	r1, r4
 8015ac8:	47c8      	blx	r9
 8015aca:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8015ace:	4606      	mov	r6, r0
 8015ad0:	4403      	add	r3, r0
 8015ad2:	0859      	lsrs	r1, r3, #1
 8015ad4:	fbab 2101 	umull	r2, r1, fp, r1
 8015ad8:	222a      	movs	r2, #42	; 0x2a
 8015ada:	0889      	lsrs	r1, r1, #2
 8015adc:	fb02 3111 	mls	r1, r2, r1, r3
 8015ae0:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
 8015ae4:	2800      	cmp	r0, #0
 8015ae6:	d0c9      	beq.n	8015a7c <uxr_framing_read_transport+0x38>
 8015ae8:	9a03      	ldr	r2, [sp, #12]
 8015aea:	4290      	cmp	r0, r2
 8015aec:	d1c7      	bne.n	8015a7e <uxr_framing_read_transport+0x3a>
 8015aee:	2f00      	cmp	r7, #0
 8015af0:	d0c5      	beq.n	8015a7e <uxr_framing_read_transport+0x3a>
 8015af2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015af4:	3102      	adds	r1, #2
 8015af6:	463a      	mov	r2, r7
 8015af8:	4650      	mov	r0, sl
 8015afa:	4421      	add	r1, r4
 8015afc:	9300      	str	r3, [sp, #0]
 8015afe:	2300      	movs	r3, #0
 8015b00:	47c8      	blx	r9
 8015b02:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8015b06:	4406      	add	r6, r0
 8015b08:	1813      	adds	r3, r2, r0
 8015b0a:	085a      	lsrs	r2, r3, #1
 8015b0c:	fbab 1b02 	umull	r1, fp, fp, r2
 8015b10:	222a      	movs	r2, #42	; 0x2a
 8015b12:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
 8015b16:	fb02 331b 	mls	r3, r2, fp, r3
 8015b1a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8015b1e:	e7ae      	b.n	8015a7e <uxr_framing_read_transport+0x3a>
 8015b20:	1ab6      	subs	r6, r6, r2
 8015b22:	b2f7      	uxtb	r7, r6
 8015b24:	e7a9      	b.n	8015a7a <uxr_framing_read_transport+0x36>
 8015b26:	2300      	movs	r3, #0
 8015b28:	2e28      	cmp	r6, #40	; 0x28
 8015b2a:	85a3      	strh	r3, [r4, #44]	; 0x2c
 8015b2c:	d9bd      	bls.n	8015aaa <uxr_framing_read_transport+0x66>
 8015b2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015b30:	2229      	movs	r2, #41	; 0x29
 8015b32:	1ca1      	adds	r1, r4, #2
 8015b34:	4650      	mov	r0, sl
 8015b36:	9300      	str	r3, [sp, #0]
 8015b38:	682b      	ldr	r3, [r5, #0]
 8015b3a:	47c8      	blx	r9
 8015b3c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8015b40:	4606      	mov	r6, r0
 8015b42:	212a      	movs	r1, #42	; 0x2a
 8015b44:	4403      	add	r3, r0
 8015b46:	4808      	ldr	r0, [pc, #32]	; (8015b68 <uxr_framing_read_transport+0x124>)
 8015b48:	085a      	lsrs	r2, r3, #1
 8015b4a:	fba0 0202 	umull	r0, r2, r0, r2
 8015b4e:	0892      	lsrs	r2, r2, #2
 8015b50:	fb01 3312 	mls	r3, r1, r2, r3
 8015b54:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8015b58:	2e00      	cmp	r6, #0
 8015b5a:	d08f      	beq.n	8015a7c <uxr_framing_read_transport+0x38>
 8015b5c:	e78f      	b.n	8015a7e <uxr_framing_read_transport+0x3a>
 8015b5e:	f1c2 0229 	rsb	r2, r2, #41	; 0x29
 8015b62:	b2d2      	uxtb	r2, r2
 8015b64:	e784      	b.n	8015a70 <uxr_framing_read_transport+0x2c>
 8015b66:	bf00      	nop
 8015b68:	30c30c31 	.word	0x30c30c31

08015b6c <uxr_read_framed_msg>:
 8015b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b70:	461e      	mov	r6, r3
 8015b72:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 8015b76:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8015b7a:	b083      	sub	sp, #12
 8015b7c:	4604      	mov	r4, r0
 8015b7e:	4688      	mov	r8, r1
 8015b80:	429d      	cmp	r5, r3
 8015b82:	4691      	mov	r9, r2
 8015b84:	f000 818c 	beq.w	8015ea0 <uxr_read_framed_msg+0x334>
 8015b88:	7823      	ldrb	r3, [r4, #0]
 8015b8a:	4dc3      	ldr	r5, [pc, #780]	; (8015e98 <uxr_read_framed_msg+0x32c>)
 8015b8c:	4fc3      	ldr	r7, [pc, #780]	; (8015e9c <uxr_read_framed_msg+0x330>)
 8015b8e:	2b07      	cmp	r3, #7
 8015b90:	d8fd      	bhi.n	8015b8e <uxr_read_framed_msg+0x22>
 8015b92:	e8df f013 	tbh	[pc, r3, lsl #1]
 8015b96:	011c      	.short	0x011c
 8015b98:	00d900fb 	.word	0x00d900fb
 8015b9c:	008f00ba 	.word	0x008f00ba
 8015ba0:	00320051 	.word	0x00320051
 8015ba4:	0008      	.short	0x0008
 8015ba6:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8015baa:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8015bae:	4299      	cmp	r1, r3
 8015bb0:	f000 814d 	beq.w	8015e4e <uxr_read_framed_msg+0x2e2>
 8015bb4:	18e2      	adds	r2, r4, r3
 8015bb6:	7892      	ldrb	r2, [r2, #2]
 8015bb8:	2a7d      	cmp	r2, #125	; 0x7d
 8015bba:	f000 81b8 	beq.w	8015f2e <uxr_read_framed_msg+0x3c2>
 8015bbe:	3301      	adds	r3, #1
 8015bc0:	212a      	movs	r1, #42	; 0x2a
 8015bc2:	2a7e      	cmp	r2, #126	; 0x7e
 8015bc4:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8015bc8:	fba5 c000 	umull	ip, r0, r5, r0
 8015bcc:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8015bd0:	fb01 3310 	mls	r3, r1, r0, r3
 8015bd4:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8015bd8:	f000 8257 	beq.w	801608a <uxr_read_framed_msg+0x51e>
 8015bdc:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8015bde:	2000      	movs	r0, #0
 8015be0:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 8015be2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8015be6:	7020      	strb	r0, [r4, #0]
 8015be8:	b29b      	uxth	r3, r3
 8015bea:	4299      	cmp	r1, r3
 8015bec:	86a3      	strh	r3, [r4, #52]	; 0x34
 8015bee:	f000 8178 	beq.w	8015ee2 <uxr_read_framed_msg+0x376>
 8015bf2:	2000      	movs	r0, #0
 8015bf4:	b003      	add	sp, #12
 8015bf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015bfa:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8015bfe:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8015c02:	4298      	cmp	r0, r3
 8015c04:	f000 8132 	beq.w	8015e6c <uxr_read_framed_msg+0x300>
 8015c08:	18e2      	adds	r2, r4, r3
 8015c0a:	7891      	ldrb	r1, [r2, #2]
 8015c0c:	297d      	cmp	r1, #125	; 0x7d
 8015c0e:	f000 8170 	beq.w	8015ef2 <uxr_read_framed_msg+0x386>
 8015c12:	3301      	adds	r3, #1
 8015c14:	202a      	movs	r0, #42	; 0x2a
 8015c16:	297e      	cmp	r1, #126	; 0x7e
 8015c18:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8015c1c:	fba5 c202 	umull	ip, r2, r5, r2
 8015c20:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8015c24:	fb00 3312 	mls	r3, r0, r2, r3
 8015c28:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8015c2c:	f000 821d 	beq.w	801606a <uxr_read_framed_msg+0x4fe>
 8015c30:	2307      	movs	r3, #7
 8015c32:	86a1      	strh	r1, [r4, #52]	; 0x34
 8015c34:	7023      	strb	r3, [r4, #0]
 8015c36:	e7aa      	b.n	8015b8e <uxr_read_framed_msg+0x22>
 8015c38:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8015c3a:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 8015c3e:	459e      	cmp	lr, r3
 8015c40:	d827      	bhi.n	8015c92 <uxr_read_framed_msg+0x126>
 8015c42:	e032      	b.n	8015caa <uxr_read_framed_msg+0x13e>
 8015c44:	fba5 b101 	umull	fp, r1, r5, r1
 8015c48:	f89c c002 	ldrb.w	ip, [ip, #2]
 8015c4c:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
 8015c50:	0889      	lsrs	r1, r1, #2
 8015c52:	f1bc 0f7d 	cmp.w	ip, #125	; 0x7d
 8015c56:	fb0b 0111 	mls	r1, fp, r1, r0
 8015c5a:	f000 80d4 	beq.w	8015e06 <uxr_read_framed_msg+0x29a>
 8015c5e:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 8015c62:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
 8015c66:	f000 80cb 	beq.w	8015e00 <uxr_read_framed_msg+0x294>
 8015c6a:	f806 c003 	strb.w	ip, [r6, r3]
 8015c6e:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 8015c70:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8015c72:	ea80 010c 	eor.w	r1, r0, ip
 8015c76:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 8015c7a:	3301      	adds	r3, #1
 8015c7c:	b2c9      	uxtb	r1, r1
 8015c7e:	b29b      	uxth	r3, r3
 8015c80:	f837 2011 	ldrh.w	r2, [r7, r1, lsl #1]
 8015c84:	4573      	cmp	r3, lr
 8015c86:	8663      	strh	r3, [r4, #50]	; 0x32
 8015c88:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 8015c8c:	86e2      	strh	r2, [r4, #54]	; 0x36
 8015c8e:	f080 811d 	bcs.w	8015ecc <uxr_read_framed_msg+0x360>
 8015c92:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8015c96:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
 8015c9a:	1c50      	adds	r0, r2, #1
 8015c9c:	eb04 0c02 	add.w	ip, r4, r2
 8015ca0:	4592      	cmp	sl, r2
 8015ca2:	ea4f 0150 	mov.w	r1, r0, lsr #1
 8015ca6:	d1cd      	bne.n	8015c44 <uxr_read_framed_msg+0xd8>
 8015ca8:	459e      	cmp	lr, r3
 8015caa:	f040 8114 	bne.w	8015ed6 <uxr_read_framed_msg+0x36a>
 8015cae:	2306      	movs	r3, #6
 8015cb0:	7023      	strb	r3, [r4, #0]
 8015cb2:	e76c      	b.n	8015b8e <uxr_read_framed_msg+0x22>
 8015cb4:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8015cb8:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8015cbc:	4298      	cmp	r0, r3
 8015cbe:	f000 80c6 	beq.w	8015e4e <uxr_read_framed_msg+0x2e2>
 8015cc2:	18e2      	adds	r2, r4, r3
 8015cc4:	7891      	ldrb	r1, [r2, #2]
 8015cc6:	297d      	cmp	r1, #125	; 0x7d
 8015cc8:	f000 8193 	beq.w	8015ff2 <uxr_read_framed_msg+0x486>
 8015ccc:	3301      	adds	r3, #1
 8015cce:	202a      	movs	r0, #42	; 0x2a
 8015cd0:	297e      	cmp	r1, #126	; 0x7e
 8015cd2:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8015cd6:	fba5 c202 	umull	ip, r2, r5, r2
 8015cda:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8015cde:	fb00 3312 	mls	r3, r0, r2, r3
 8015ce2:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8015ce6:	f000 81d0 	beq.w	801608a <uxr_read_framed_msg+0x51e>
 8015cea:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8015cec:	2000      	movs	r0, #0
 8015cee:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8015cf2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015cf4:	8660      	strh	r0, [r4, #50]	; 0x32
 8015cf6:	b29b      	uxth	r3, r3
 8015cf8:	86e0      	strh	r0, [r4, #54]	; 0x36
 8015cfa:	428b      	cmp	r3, r1
 8015cfc:	8623      	strh	r3, [r4, #48]	; 0x30
 8015cfe:	f240 80e2 	bls.w	8015ec6 <uxr_read_framed_msg+0x35a>
 8015d02:	7020      	strb	r0, [r4, #0]
 8015d04:	b003      	add	sp, #12
 8015d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d0a:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8015d0e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8015d12:	4298      	cmp	r0, r3
 8015d14:	f000 80aa 	beq.w	8015e6c <uxr_read_framed_msg+0x300>
 8015d18:	18e2      	adds	r2, r4, r3
 8015d1a:	7891      	ldrb	r1, [r2, #2]
 8015d1c:	297d      	cmp	r1, #125	; 0x7d
 8015d1e:	f000 8186 	beq.w	801602e <uxr_read_framed_msg+0x4c2>
 8015d22:	3301      	adds	r3, #1
 8015d24:	202a      	movs	r0, #42	; 0x2a
 8015d26:	297e      	cmp	r1, #126	; 0x7e
 8015d28:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8015d2c:	fba5 c202 	umull	ip, r2, r5, r2
 8015d30:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8015d34:	fb00 3312 	mls	r3, r0, r2, r3
 8015d38:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8015d3c:	f000 8195 	beq.w	801606a <uxr_read_framed_msg+0x4fe>
 8015d40:	2304      	movs	r3, #4
 8015d42:	8621      	strh	r1, [r4, #48]	; 0x30
 8015d44:	7023      	strb	r3, [r4, #0]
 8015d46:	e722      	b.n	8015b8e <uxr_read_framed_msg+0x22>
 8015d48:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8015d4c:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8015d50:	4290      	cmp	r0, r2
 8015d52:	f000 80b4 	beq.w	8015ebe <uxr_read_framed_msg+0x352>
 8015d56:	18a3      	adds	r3, r4, r2
 8015d58:	7899      	ldrb	r1, [r3, #2]
 8015d5a:	297d      	cmp	r1, #125	; 0x7d
 8015d5c:	f000 8107 	beq.w	8015f6e <uxr_read_framed_msg+0x402>
 8015d60:	3201      	adds	r2, #1
 8015d62:	232a      	movs	r3, #42	; 0x2a
 8015d64:	297e      	cmp	r1, #126	; 0x7e
 8015d66:	ea4f 0052 	mov.w	r0, r2, lsr #1
 8015d6a:	fba5 c000 	umull	ip, r0, r5, r0
 8015d6e:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8015d72:	fb03 2210 	mls	r2, r3, r0, r2
 8015d76:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8015d7a:	f000 818a 	beq.w	8016092 <uxr_read_framed_msg+0x526>
 8015d7e:	7863      	ldrb	r3, [r4, #1]
 8015d80:	428b      	cmp	r3, r1
 8015d82:	bf0c      	ite	eq
 8015d84:	2303      	moveq	r3, #3
 8015d86:	2300      	movne	r3, #0
 8015d88:	7023      	strb	r3, [r4, #0]
 8015d8a:	e700      	b.n	8015b8e <uxr_read_framed_msg+0x22>
 8015d8c:	2300      	movs	r3, #0
 8015d8e:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8015d92:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
 8015d96:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8015d9a:	4299      	cmp	r1, r3
 8015d9c:	d06a      	beq.n	8015e74 <uxr_read_framed_msg+0x308>
 8015d9e:	18e2      	adds	r2, r4, r3
 8015da0:	7890      	ldrb	r0, [r2, #2]
 8015da2:	287d      	cmp	r0, #125	; 0x7d
 8015da4:	f000 8100 	beq.w	8015fa8 <uxr_read_framed_msg+0x43c>
 8015da8:	3301      	adds	r3, #1
 8015daa:	212a      	movs	r1, #42	; 0x2a
 8015dac:	287e      	cmp	r0, #126	; 0x7e
 8015dae:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
 8015db2:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8015db6:	fba5 c202 	umull	ip, r2, r5, r2
 8015dba:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8015dbe:	fb01 3312 	mls	r3, r1, r2, r3
 8015dc2:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8015dc6:	d055      	beq.n	8015e74 <uxr_read_framed_msg+0x308>
 8015dc8:	2302      	movs	r3, #2
 8015dca:	7023      	strb	r3, [r4, #0]
 8015dcc:	e6df      	b.n	8015b8e <uxr_read_framed_msg+0x22>
 8015dce:	f894 c02c 	ldrb.w	ip, [r4, #44]	; 0x2c
 8015dd2:	f04f 0e2a 	mov.w	lr, #42	; 0x2a
 8015dd6:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8015dda:	1c5a      	adds	r2, r3, #1
 8015ddc:	459c      	cmp	ip, r3
 8015dde:	eb04 0103 	add.w	r1, r4, r3
 8015de2:	ea4f 0352 	mov.w	r3, r2, lsr #1
 8015de6:	f43f af04 	beq.w	8015bf2 <uxr_read_framed_msg+0x86>
 8015dea:	fba5 0303 	umull	r0, r3, r5, r3
 8015dee:	7889      	ldrb	r1, [r1, #2]
 8015df0:	089b      	lsrs	r3, r3, #2
 8015df2:	297e      	cmp	r1, #126	; 0x7e
 8015df4:	fb0e 2313 	mls	r3, lr, r3, r2
 8015df8:	b2db      	uxtb	r3, r3
 8015dfa:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8015dfe:	d1ec      	bne.n	8015dda <uxr_read_framed_msg+0x26e>
 8015e00:	2301      	movs	r3, #1
 8015e02:	7023      	strb	r3, [r4, #0]
 8015e04:	e6c3      	b.n	8015b8e <uxr_read_framed_msg+0x22>
 8015e06:	1c50      	adds	r0, r2, #1
 8015e08:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
 8015e0c:	3202      	adds	r2, #2
 8015e0e:	0841      	lsrs	r1, r0, #1
 8015e10:	fba5 c101 	umull	ip, r1, r5, r1
 8015e14:	0889      	lsrs	r1, r1, #2
 8015e16:	fb0b 0111 	mls	r1, fp, r1, r0
 8015e1a:	1860      	adds	r0, r4, r1
 8015e1c:	b2c9      	uxtb	r1, r1
 8015e1e:	458a      	cmp	sl, r1
 8015e20:	f43f af42 	beq.w	8015ca8 <uxr_read_framed_msg+0x13c>
 8015e24:	0851      	lsrs	r1, r2, #1
 8015e26:	7880      	ldrb	r0, [r0, #2]
 8015e28:	fba5 a101 	umull	sl, r1, r5, r1
 8015e2c:	287e      	cmp	r0, #126	; 0x7e
 8015e2e:	f080 0c20 	eor.w	ip, r0, #32
 8015e32:	ea4f 0191 	mov.w	r1, r1, lsr #2
 8015e36:	fb0b 2211 	mls	r2, fp, r1, r2
 8015e3a:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8015e3e:	f47f af14 	bne.w	8015c6a <uxr_read_framed_msg+0xfe>
 8015e42:	459e      	cmp	lr, r3
 8015e44:	f43f af33 	beq.w	8015cae <uxr_read_framed_msg+0x142>
 8015e48:	2301      	movs	r3, #1
 8015e4a:	7023      	strb	r3, [r4, #0]
 8015e4c:	e69f      	b.n	8015b8e <uxr_read_framed_msg+0x22>
 8015e4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015e50:	9300      	str	r3, [sp, #0]
 8015e52:	2301      	movs	r3, #1
 8015e54:	9301      	str	r3, [sp, #4]
 8015e56:	464a      	mov	r2, r9
 8015e58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015e5a:	4641      	mov	r1, r8
 8015e5c:	4620      	mov	r0, r4
 8015e5e:	f7ff fdf1 	bl	8015a44 <uxr_framing_read_transport>
 8015e62:	2800      	cmp	r0, #0
 8015e64:	f43f aec5 	beq.w	8015bf2 <uxr_read_framed_msg+0x86>
 8015e68:	7823      	ldrb	r3, [r4, #0]
 8015e6a:	e690      	b.n	8015b8e <uxr_read_framed_msg+0x22>
 8015e6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015e6e:	9300      	str	r3, [sp, #0]
 8015e70:	2302      	movs	r3, #2
 8015e72:	e7ef      	b.n	8015e54 <uxr_read_framed_msg+0x2e8>
 8015e74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015e76:	464a      	mov	r2, r9
 8015e78:	4641      	mov	r1, r8
 8015e7a:	4620      	mov	r0, r4
 8015e7c:	9300      	str	r3, [sp, #0]
 8015e7e:	2304      	movs	r3, #4
 8015e80:	9301      	str	r3, [sp, #4]
 8015e82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015e84:	f7ff fdde 	bl	8015a44 <uxr_framing_read_transport>
 8015e88:	2800      	cmp	r0, #0
 8015e8a:	d1ed      	bne.n	8015e68 <uxr_read_framed_msg+0x2fc>
 8015e8c:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8015e90:	2b7e      	cmp	r3, #126	; 0x7e
 8015e92:	d0e9      	beq.n	8015e68 <uxr_read_framed_msg+0x2fc>
 8015e94:	e6ad      	b.n	8015bf2 <uxr_read_framed_msg+0x86>
 8015e96:	bf00      	nop
 8015e98:	30c30c31 	.word	0x30c30c31
 8015e9c:	0801bb40 	.word	0x0801bb40
 8015ea0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015ea2:	9300      	str	r3, [sp, #0]
 8015ea4:	2305      	movs	r3, #5
 8015ea6:	9301      	str	r3, [sp, #4]
 8015ea8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015eaa:	f7ff fdcb 	bl	8015a44 <uxr_framing_read_transport>
 8015eae:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8015eb2:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8015eb6:	429a      	cmp	r2, r3
 8015eb8:	f43f ae9b 	beq.w	8015bf2 <uxr_read_framed_msg+0x86>
 8015ebc:	e664      	b.n	8015b88 <uxr_read_framed_msg+0x1c>
 8015ebe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015ec0:	9300      	str	r3, [sp, #0]
 8015ec2:	2303      	movs	r3, #3
 8015ec4:	e7c6      	b.n	8015e54 <uxr_read_framed_msg+0x2e8>
 8015ec6:	2305      	movs	r3, #5
 8015ec8:	7023      	strb	r3, [r4, #0]
 8015eca:	e660      	b.n	8015b8e <uxr_read_framed_msg+0x22>
 8015ecc:	f43f aeef 	beq.w	8015cae <uxr_read_framed_msg+0x142>
 8015ed0:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 8015ed4:	d094      	beq.n	8015e00 <uxr_read_framed_msg+0x294>
 8015ed6:	ebae 0303 	sub.w	r3, lr, r3
 8015eda:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015edc:	3302      	adds	r3, #2
 8015ede:	9200      	str	r2, [sp, #0]
 8015ee0:	e7b8      	b.n	8015e54 <uxr_read_framed_msg+0x2e8>
 8015ee2:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8015ee6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015ee8:	7013      	strb	r3, [r2, #0]
 8015eea:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 8015eec:	b003      	add	sp, #12
 8015eee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ef2:	1c59      	adds	r1, r3, #1
 8015ef4:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8015ef8:	084a      	lsrs	r2, r1, #1
 8015efa:	fba5 e202 	umull	lr, r2, r5, r2
 8015efe:	0892      	lsrs	r2, r2, #2
 8015f00:	fb0c 1212 	mls	r2, ip, r2, r1
 8015f04:	b2d1      	uxtb	r1, r2
 8015f06:	4288      	cmp	r0, r1
 8015f08:	d0b0      	beq.n	8015e6c <uxr_read_framed_msg+0x300>
 8015f0a:	3302      	adds	r3, #2
 8015f0c:	4422      	add	r2, r4
 8015f0e:	7891      	ldrb	r1, [r2, #2]
 8015f10:	085a      	lsrs	r2, r3, #1
 8015f12:	fba5 0202 	umull	r0, r2, r5, r2
 8015f16:	297e      	cmp	r1, #126	; 0x7e
 8015f18:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8015f1c:	fb0c 3312 	mls	r3, ip, r2, r3
 8015f20:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8015f24:	f000 80a1 	beq.w	801606a <uxr_read_framed_msg+0x4fe>
 8015f28:	f081 0120 	eor.w	r1, r1, #32
 8015f2c:	e680      	b.n	8015c30 <uxr_read_framed_msg+0xc4>
 8015f2e:	f103 0c01 	add.w	ip, r3, #1
 8015f32:	202a      	movs	r0, #42	; 0x2a
 8015f34:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8015f38:	fba5 e202 	umull	lr, r2, r5, r2
 8015f3c:	0892      	lsrs	r2, r2, #2
 8015f3e:	fb00 c212 	mls	r2, r0, r2, ip
 8015f42:	fa5f fc82 	uxtb.w	ip, r2
 8015f46:	4561      	cmp	r1, ip
 8015f48:	d081      	beq.n	8015e4e <uxr_read_framed_msg+0x2e2>
 8015f4a:	3302      	adds	r3, #2
 8015f4c:	4422      	add	r2, r4
 8015f4e:	0859      	lsrs	r1, r3, #1
 8015f50:	7892      	ldrb	r2, [r2, #2]
 8015f52:	fba5 c101 	umull	ip, r1, r5, r1
 8015f56:	2a7e      	cmp	r2, #126	; 0x7e
 8015f58:	ea4f 0191 	mov.w	r1, r1, lsr #2
 8015f5c:	fb00 3311 	mls	r3, r0, r1, r3
 8015f60:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8015f64:	f000 8091 	beq.w	801608a <uxr_read_framed_msg+0x51e>
 8015f68:	f082 0220 	eor.w	r2, r2, #32
 8015f6c:	e636      	b.n	8015bdc <uxr_read_framed_msg+0x70>
 8015f6e:	1c51      	adds	r1, r2, #1
 8015f70:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8015f74:	084b      	lsrs	r3, r1, #1
 8015f76:	fba5 e303 	umull	lr, r3, r5, r3
 8015f7a:	089b      	lsrs	r3, r3, #2
 8015f7c:	fb0c 1313 	mls	r3, ip, r3, r1
 8015f80:	b2d9      	uxtb	r1, r3
 8015f82:	4288      	cmp	r0, r1
 8015f84:	d09b      	beq.n	8015ebe <uxr_read_framed_msg+0x352>
 8015f86:	3202      	adds	r2, #2
 8015f88:	4423      	add	r3, r4
 8015f8a:	0850      	lsrs	r0, r2, #1
 8015f8c:	789b      	ldrb	r3, [r3, #2]
 8015f8e:	fba5 1000 	umull	r1, r0, r5, r0
 8015f92:	2b7e      	cmp	r3, #126	; 0x7e
 8015f94:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8015f98:	fb0c 2210 	mls	r2, ip, r0, r2
 8015f9c:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8015fa0:	d077      	beq.n	8016092 <uxr_read_framed_msg+0x526>
 8015fa2:	f083 0120 	eor.w	r1, r3, #32
 8015fa6:	e6ea      	b.n	8015d7e <uxr_read_framed_msg+0x212>
 8015fa8:	f103 0c01 	add.w	ip, r3, #1
 8015fac:	202a      	movs	r0, #42	; 0x2a
 8015fae:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8015fb2:	fba5 e202 	umull	lr, r2, r5, r2
 8015fb6:	0892      	lsrs	r2, r2, #2
 8015fb8:	fb00 c212 	mls	r2, r0, r2, ip
 8015fbc:	fa5f fc82 	uxtb.w	ip, r2
 8015fc0:	4561      	cmp	r1, ip
 8015fc2:	f43f af57 	beq.w	8015e74 <uxr_read_framed_msg+0x308>
 8015fc6:	3302      	adds	r3, #2
 8015fc8:	4422      	add	r2, r4
 8015fca:	7891      	ldrb	r1, [r2, #2]
 8015fcc:	085a      	lsrs	r2, r3, #1
 8015fce:	fba5 c202 	umull	ip, r2, r5, r2
 8015fd2:	297e      	cmp	r1, #126	; 0x7e
 8015fd4:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 8015fd8:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8015fdc:	fb00 3312 	mls	r3, r0, r2, r3
 8015fe0:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8015fe4:	f43f af46 	beq.w	8015e74 <uxr_read_framed_msg+0x308>
 8015fe8:	f081 0120 	eor.w	r1, r1, #32
 8015fec:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 8015ff0:	e6ea      	b.n	8015dc8 <uxr_read_framed_msg+0x25c>
 8015ff2:	1c59      	adds	r1, r3, #1
 8015ff4:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8015ff8:	084a      	lsrs	r2, r1, #1
 8015ffa:	fba5 e202 	umull	lr, r2, r5, r2
 8015ffe:	0892      	lsrs	r2, r2, #2
 8016000:	fb0c 1212 	mls	r2, ip, r2, r1
 8016004:	b2d1      	uxtb	r1, r2
 8016006:	4288      	cmp	r0, r1
 8016008:	f43f af21 	beq.w	8015e4e <uxr_read_framed_msg+0x2e2>
 801600c:	3302      	adds	r3, #2
 801600e:	4422      	add	r2, r4
 8016010:	7891      	ldrb	r1, [r2, #2]
 8016012:	085a      	lsrs	r2, r3, #1
 8016014:	fba5 0202 	umull	r0, r2, r5, r2
 8016018:	297e      	cmp	r1, #126	; 0x7e
 801601a:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801601e:	fb0c 3312 	mls	r3, ip, r2, r3
 8016022:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8016026:	d030      	beq.n	801608a <uxr_read_framed_msg+0x51e>
 8016028:	f081 0120 	eor.w	r1, r1, #32
 801602c:	e65d      	b.n	8015cea <uxr_read_framed_msg+0x17e>
 801602e:	1c59      	adds	r1, r3, #1
 8016030:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8016034:	084a      	lsrs	r2, r1, #1
 8016036:	fba5 e202 	umull	lr, r2, r5, r2
 801603a:	0892      	lsrs	r2, r2, #2
 801603c:	fb0c 1212 	mls	r2, ip, r2, r1
 8016040:	b2d1      	uxtb	r1, r2
 8016042:	4288      	cmp	r0, r1
 8016044:	f43f af12 	beq.w	8015e6c <uxr_read_framed_msg+0x300>
 8016048:	3302      	adds	r3, #2
 801604a:	4422      	add	r2, r4
 801604c:	7891      	ldrb	r1, [r2, #2]
 801604e:	085a      	lsrs	r2, r3, #1
 8016050:	fba5 0202 	umull	r0, r2, r5, r2
 8016054:	297e      	cmp	r1, #126	; 0x7e
 8016056:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801605a:	fb0c 3312 	mls	r3, ip, r2, r3
 801605e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8016062:	d002      	beq.n	801606a <uxr_read_framed_msg+0x4fe>
 8016064:	f081 0120 	eor.w	r1, r1, #32
 8016068:	e66a      	b.n	8015d40 <uxr_read_framed_msg+0x1d4>
 801606a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801606c:	9300      	str	r3, [sp, #0]
 801606e:	2302      	movs	r3, #2
 8016070:	9301      	str	r3, [sp, #4]
 8016072:	464a      	mov	r2, r9
 8016074:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016076:	4641      	mov	r1, r8
 8016078:	4620      	mov	r0, r4
 801607a:	f7ff fce3 	bl	8015a44 <uxr_framing_read_transport>
 801607e:	2800      	cmp	r0, #0
 8016080:	f47f aef2 	bne.w	8015e68 <uxr_read_framed_msg+0x2fc>
 8016084:	2301      	movs	r3, #1
 8016086:	7023      	strb	r3, [r4, #0]
 8016088:	e581      	b.n	8015b8e <uxr_read_framed_msg+0x22>
 801608a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801608c:	9300      	str	r3, [sp, #0]
 801608e:	2301      	movs	r3, #1
 8016090:	e7ee      	b.n	8016070 <uxr_read_framed_msg+0x504>
 8016092:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016094:	9300      	str	r3, [sp, #0]
 8016096:	2303      	movs	r3, #3
 8016098:	e7ea      	b.n	8016070 <uxr_read_framed_msg+0x504>
 801609a:	bf00      	nop

0801609c <uxr_stream_id>:
 801609c:	2901      	cmp	r1, #1
 801609e:	4684      	mov	ip, r0
 80160a0:	b500      	push	{lr}
 80160a2:	b083      	sub	sp, #12
 80160a4:	d01f      	beq.n	80160e6 <uxr_stream_id+0x4a>
 80160a6:	2902      	cmp	r1, #2
 80160a8:	f04f 0e00 	mov.w	lr, #0
 80160ac:	d020      	beq.n	80160f0 <uxr_stream_id+0x54>
 80160ae:	2300      	movs	r3, #0
 80160b0:	2000      	movs	r0, #0
 80160b2:	f36e 0307 	bfi	r3, lr, #0, #8
 80160b6:	f36c 230f 	bfi	r3, ip, #8, #8
 80160ba:	f361 4317 	bfi	r3, r1, #16, #8
 80160be:	f362 631f 	bfi	r3, r2, #24, #8
 80160c2:	fa5f fc83 	uxtb.w	ip, r3
 80160c6:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80160ca:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80160ce:	0e1b      	lsrs	r3, r3, #24
 80160d0:	f36c 0007 	bfi	r0, ip, #0, #8
 80160d4:	f361 200f 	bfi	r0, r1, #8, #8
 80160d8:	f362 4017 	bfi	r0, r2, #16, #8
 80160dc:	f363 601f 	bfi	r0, r3, #24, #8
 80160e0:	b003      	add	sp, #12
 80160e2:	f85d fb04 	ldr.w	pc, [sp], #4
 80160e6:	f100 0e01 	add.w	lr, r0, #1
 80160ea:	fa5f fe8e 	uxtb.w	lr, lr
 80160ee:	e7de      	b.n	80160ae <uxr_stream_id+0x12>
 80160f0:	f080 0e80 	eor.w	lr, r0, #128	; 0x80
 80160f4:	e7db      	b.n	80160ae <uxr_stream_id+0x12>
 80160f6:	bf00      	nop

080160f8 <uxr_stream_id_from_raw>:
 80160f8:	b082      	sub	sp, #8
 80160fa:	b130      	cbz	r0, 801610a <uxr_stream_id_from_raw+0x12>
 80160fc:	0603      	lsls	r3, r0, #24
 80160fe:	d421      	bmi.n	8016144 <uxr_stream_id_from_raw+0x4c>
 8016100:	1e42      	subs	r2, r0, #1
 8016102:	f04f 0c01 	mov.w	ip, #1
 8016106:	b2d2      	uxtb	r2, r2
 8016108:	e001      	b.n	801610e <uxr_stream_id_from_raw+0x16>
 801610a:	4684      	mov	ip, r0
 801610c:	4602      	mov	r2, r0
 801610e:	2300      	movs	r3, #0
 8016110:	f360 0307 	bfi	r3, r0, #0, #8
 8016114:	2000      	movs	r0, #0
 8016116:	f362 230f 	bfi	r3, r2, #8, #8
 801611a:	f36c 4317 	bfi	r3, ip, #16, #8
 801611e:	f361 631f 	bfi	r3, r1, #24, #8
 8016122:	fa5f fc83 	uxtb.w	ip, r3
 8016126:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801612a:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801612e:	0e1b      	lsrs	r3, r3, #24
 8016130:	f36c 0007 	bfi	r0, ip, #0, #8
 8016134:	f361 200f 	bfi	r0, r1, #8, #8
 8016138:	f362 4017 	bfi	r0, r2, #16, #8
 801613c:	f363 601f 	bfi	r0, r3, #24, #8
 8016140:	b002      	add	sp, #8
 8016142:	4770      	bx	lr
 8016144:	f080 0280 	eor.w	r2, r0, #128	; 0x80
 8016148:	f04f 0c02 	mov.w	ip, #2
 801614c:	e7df      	b.n	801610e <uxr_stream_id_from_raw+0x16>
 801614e:	bf00      	nop

08016150 <uxr_init_stream_storage>:
 8016150:	2300      	movs	r3, #0
 8016152:	7403      	strb	r3, [r0, #16]
 8016154:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8016158:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 801615c:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 8016160:	4770      	bx	lr
 8016162:	bf00      	nop

08016164 <uxr_reset_stream_storage>:
 8016164:	b570      	push	{r4, r5, r6, lr}
 8016166:	7c03      	ldrb	r3, [r0, #16]
 8016168:	4604      	mov	r4, r0
 801616a:	b14b      	cbz	r3, 8016180 <uxr_reset_stream_storage+0x1c>
 801616c:	4606      	mov	r6, r0
 801616e:	2500      	movs	r5, #0
 8016170:	4630      	mov	r0, r6
 8016172:	3501      	adds	r5, #1
 8016174:	f002 faf2 	bl	801875c <uxr_reset_output_best_effort_stream>
 8016178:	7c23      	ldrb	r3, [r4, #16]
 801617a:	3610      	adds	r6, #16
 801617c:	42ab      	cmp	r3, r5
 801617e:	d8f7      	bhi.n	8016170 <uxr_reset_stream_storage+0xc>
 8016180:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8016184:	b15b      	cbz	r3, 801619e <uxr_reset_stream_storage+0x3a>
 8016186:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801618a:	2500      	movs	r5, #0
 801618c:	4630      	mov	r0, r6
 801618e:	3501      	adds	r5, #1
 8016190:	f002 f8ea 	bl	8018368 <uxr_reset_input_best_effort_stream>
 8016194:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8016198:	3602      	adds	r6, #2
 801619a:	42ab      	cmp	r3, r5
 801619c:	d8f6      	bhi.n	801618c <uxr_reset_stream_storage+0x28>
 801619e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80161a2:	b15b      	cbz	r3, 80161bc <uxr_reset_stream_storage+0x58>
 80161a4:	f104 0618 	add.w	r6, r4, #24
 80161a8:	2500      	movs	r5, #0
 80161aa:	4630      	mov	r0, r6
 80161ac:	3501      	adds	r5, #1
 80161ae:	f002 fb83 	bl	80188b8 <uxr_reset_output_reliable_stream>
 80161b2:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80161b6:	3628      	adds	r6, #40	; 0x28
 80161b8:	42ab      	cmp	r3, r5
 80161ba:	d8f6      	bhi.n	80161aa <uxr_reset_stream_storage+0x46>
 80161bc:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 80161c0:	b15b      	cbz	r3, 80161da <uxr_reset_stream_storage+0x76>
 80161c2:	f104 0648 	add.w	r6, r4, #72	; 0x48
 80161c6:	2500      	movs	r5, #0
 80161c8:	4630      	mov	r0, r6
 80161ca:	3501      	adds	r5, #1
 80161cc:	f002 f938 	bl	8018440 <uxr_reset_input_reliable_stream>
 80161d0:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 80161d4:	3618      	adds	r6, #24
 80161d6:	42ab      	cmp	r3, r5
 80161d8:	d8f6      	bhi.n	80161c8 <uxr_reset_stream_storage+0x64>
 80161da:	bd70      	pop	{r4, r5, r6, pc}

080161dc <uxr_add_output_best_effort_buffer>:
 80161dc:	b510      	push	{r4, lr}
 80161de:	7c04      	ldrb	r4, [r0, #16]
 80161e0:	b082      	sub	sp, #8
 80161e2:	f104 0c01 	add.w	ip, r4, #1
 80161e6:	f880 c010 	strb.w	ip, [r0, #16]
 80161ea:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 80161ee:	f002 faab 	bl	8018748 <uxr_init_output_best_effort_stream>
 80161f2:	2201      	movs	r2, #1
 80161f4:	4620      	mov	r0, r4
 80161f6:	4611      	mov	r1, r2
 80161f8:	b002      	add	sp, #8
 80161fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80161fe:	f7ff bf4d 	b.w	801609c <uxr_stream_id>
 8016202:	bf00      	nop

08016204 <uxr_add_output_reliable_buffer>:
 8016204:	b510      	push	{r4, lr}
 8016206:	b084      	sub	sp, #16
 8016208:	4684      	mov	ip, r0
 801620a:	2028      	movs	r0, #40	; 0x28
 801620c:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8016210:	9400      	str	r4, [sp, #0]
 8016212:	f89c 4040 	ldrb.w	r4, [ip, #64]	; 0x40
 8016216:	fb00 c004 	mla	r0, r0, r4, ip
 801621a:	f104 0e01 	add.w	lr, r4, #1
 801621e:	3018      	adds	r0, #24
 8016220:	f88c e040 	strb.w	lr, [ip, #64]	; 0x40
 8016224:	f002 fb10 	bl	8018848 <uxr_init_output_reliable_stream>
 8016228:	2201      	movs	r2, #1
 801622a:	2102      	movs	r1, #2
 801622c:	4620      	mov	r0, r4
 801622e:	b004      	add	sp, #16
 8016230:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016234:	f7ff bf32 	b.w	801609c <uxr_stream_id>

08016238 <uxr_add_input_best_effort_buffer>:
 8016238:	b510      	push	{r4, lr}
 801623a:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 801623e:	b082      	sub	sp, #8
 8016240:	1c62      	adds	r2, r4, #1
 8016242:	f104 0321 	add.w	r3, r4, #33	; 0x21
 8016246:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 801624a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801624e:	f002 f887 	bl	8018360 <uxr_init_input_best_effort_stream>
 8016252:	2200      	movs	r2, #0
 8016254:	2101      	movs	r1, #1
 8016256:	4620      	mov	r0, r4
 8016258:	b002      	add	sp, #8
 801625a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801625e:	f7ff bf1d 	b.w	801609c <uxr_stream_id>
 8016262:	bf00      	nop

08016264 <uxr_add_input_reliable_buffer>:
 8016264:	b510      	push	{r4, lr}
 8016266:	b084      	sub	sp, #16
 8016268:	4684      	mov	ip, r0
 801626a:	2018      	movs	r0, #24
 801626c:	9c06      	ldr	r4, [sp, #24]
 801626e:	9400      	str	r4, [sp, #0]
 8016270:	f89c 4060 	ldrb.w	r4, [ip, #96]	; 0x60
 8016274:	fb00 c004 	mla	r0, r0, r4, ip
 8016278:	f104 0e01 	add.w	lr, r4, #1
 801627c:	3048      	adds	r0, #72	; 0x48
 801627e:	f88c e060 	strb.w	lr, [ip, #96]	; 0x60
 8016282:	f002 f8b7 	bl	80183f4 <uxr_init_input_reliable_stream>
 8016286:	2200      	movs	r2, #0
 8016288:	2102      	movs	r1, #2
 801628a:	4620      	mov	r0, r4
 801628c:	b004      	add	sp, #16
 801628e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016292:	f7ff bf03 	b.w	801609c <uxr_stream_id>
 8016296:	bf00      	nop

08016298 <uxr_get_output_best_effort_stream>:
 8016298:	7c03      	ldrb	r3, [r0, #16]
 801629a:	428b      	cmp	r3, r1
 801629c:	bf8c      	ite	hi
 801629e:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 80162a2:	2000      	movls	r0, #0
 80162a4:	4770      	bx	lr
 80162a6:	bf00      	nop

080162a8 <uxr_get_output_reliable_stream>:
 80162a8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80162ac:	428b      	cmp	r3, r1
 80162ae:	d904      	bls.n	80162ba <uxr_get_output_reliable_stream+0x12>
 80162b0:	2328      	movs	r3, #40	; 0x28
 80162b2:	fb03 0001 	mla	r0, r3, r1, r0
 80162b6:	3018      	adds	r0, #24
 80162b8:	4770      	bx	lr
 80162ba:	2000      	movs	r0, #0
 80162bc:	4770      	bx	lr
 80162be:	bf00      	nop

080162c0 <uxr_get_input_best_effort_stream>:
 80162c0:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 80162c4:	428b      	cmp	r3, r1
 80162c6:	d903      	bls.n	80162d0 <uxr_get_input_best_effort_stream+0x10>
 80162c8:	3121      	adds	r1, #33	; 0x21
 80162ca:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 80162ce:	4770      	bx	lr
 80162d0:	2000      	movs	r0, #0
 80162d2:	4770      	bx	lr

080162d4 <uxr_get_input_reliable_stream>:
 80162d4:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 80162d8:	428b      	cmp	r3, r1
 80162da:	d904      	bls.n	80162e6 <uxr_get_input_reliable_stream+0x12>
 80162dc:	2318      	movs	r3, #24
 80162de:	fb03 0001 	mla	r0, r3, r1, r0
 80162e2:	3048      	adds	r0, #72	; 0x48
 80162e4:	4770      	bx	lr
 80162e6:	2000      	movs	r0, #0
 80162e8:	4770      	bx	lr
 80162ea:	bf00      	nop

080162ec <uxr_output_streams_confirmed>:
 80162ec:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80162f0:	b183      	cbz	r3, 8016314 <uxr_output_streams_confirmed+0x28>
 80162f2:	b570      	push	{r4, r5, r6, lr}
 80162f4:	4606      	mov	r6, r0
 80162f6:	f100 0518 	add.w	r5, r0, #24
 80162fa:	2400      	movs	r4, #0
 80162fc:	e000      	b.n	8016300 <uxr_output_streams_confirmed+0x14>
 80162fe:	b140      	cbz	r0, 8016312 <uxr_output_streams_confirmed+0x26>
 8016300:	4628      	mov	r0, r5
 8016302:	3401      	adds	r4, #1
 8016304:	f002 fd4c 	bl	8018da0 <uxr_is_output_up_to_date>
 8016308:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 801630c:	3528      	adds	r5, #40	; 0x28
 801630e:	42a3      	cmp	r3, r4
 8016310:	d8f5      	bhi.n	80162fe <uxr_output_streams_confirmed+0x12>
 8016312:	bd70      	pop	{r4, r5, r6, pc}
 8016314:	2001      	movs	r0, #1
 8016316:	4770      	bx	lr

08016318 <uxr_buffer_submessage_header>:
 8016318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801631a:	460e      	mov	r6, r1
 801631c:	2104      	movs	r1, #4
 801631e:	4604      	mov	r4, r0
 8016320:	4615      	mov	r5, r2
 8016322:	461f      	mov	r7, r3
 8016324:	f7f7 fdcc 	bl	800dec0 <ucdr_align_to>
 8016328:	2301      	movs	r3, #1
 801632a:	4631      	mov	r1, r6
 801632c:	4620      	mov	r0, r4
 801632e:	ea47 0203 	orr.w	r2, r7, r3
 8016332:	7523      	strb	r3, [r4, #20]
 8016334:	462b      	mov	r3, r5
 8016336:	f000 fa29 	bl	801678c <uxr_serialize_submessage_header>
 801633a:	4620      	mov	r0, r4
 801633c:	f7f7 fdd6 	bl	800deec <ucdr_buffer_remaining>
 8016340:	42a8      	cmp	r0, r5
 8016342:	bf34      	ite	cc
 8016344:	2000      	movcc	r0, #0
 8016346:	2001      	movcs	r0, #1
 8016348:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801634a:	bf00      	nop

0801634c <uxr_read_submessage_header>:
 801634c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016350:	4604      	mov	r4, r0
 8016352:	460d      	mov	r5, r1
 8016354:	2104      	movs	r1, #4
 8016356:	4616      	mov	r6, r2
 8016358:	4698      	mov	r8, r3
 801635a:	f7f7 fdb1 	bl	800dec0 <ucdr_align_to>
 801635e:	4620      	mov	r0, r4
 8016360:	f7f7 fdc4 	bl	800deec <ucdr_buffer_remaining>
 8016364:	2803      	cmp	r0, #3
 8016366:	bf8c      	ite	hi
 8016368:	2701      	movhi	r7, #1
 801636a:	2700      	movls	r7, #0
 801636c:	d802      	bhi.n	8016374 <uxr_read_submessage_header+0x28>
 801636e:	4638      	mov	r0, r7
 8016370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016374:	4633      	mov	r3, r6
 8016376:	4642      	mov	r2, r8
 8016378:	4620      	mov	r0, r4
 801637a:	4629      	mov	r1, r5
 801637c:	f000 fa1a 	bl	80167b4 <uxr_deserialize_submessage_header>
 8016380:	f898 3000 	ldrb.w	r3, [r8]
 8016384:	4638      	mov	r0, r7
 8016386:	f003 0201 	and.w	r2, r3, #1
 801638a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 801638e:	f888 3000 	strb.w	r3, [r8]
 8016392:	7522      	strb	r2, [r4, #20]
 8016394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016398 <uxr_submessage_padding>:
 8016398:	f010 0003 	ands.w	r0, r0, #3
 801639c:	bf18      	it	ne
 801639e:	f1c0 0004 	rsbne	r0, r0, #4
 80163a2:	4770      	bx	lr

080163a4 <uxr_millis>:
 80163a4:	b510      	push	{r4, lr}
 80163a6:	b084      	sub	sp, #16
 80163a8:	2001      	movs	r0, #1
 80163aa:	4669      	mov	r1, sp
 80163ac:	f7eb fb8c 	bl	8001ac8 <clock_gettime>
 80163b0:	4908      	ldr	r1, [pc, #32]	; (80163d4 <uxr_millis+0x30>)
 80163b2:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 80163b6:	fba0 0301 	umull	r0, r3, r0, r1
 80163ba:	1900      	adds	r0, r0, r4
 80163bc:	fb01 3102 	mla	r1, r1, r2, r3
 80163c0:	4a05      	ldr	r2, [pc, #20]	; (80163d8 <uxr_millis+0x34>)
 80163c2:	f04f 0300 	mov.w	r3, #0
 80163c6:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 80163ca:	f7e9 ffa1 	bl	8000310 <__aeabi_ldivmod>
 80163ce:	b004      	add	sp, #16
 80163d0:	bd10      	pop	{r4, pc}
 80163d2:	bf00      	nop
 80163d4:	3b9aca00 	.word	0x3b9aca00
 80163d8:	000f4240 	.word	0x000f4240

080163dc <uxr_nanos>:
 80163dc:	b510      	push	{r4, lr}
 80163de:	b084      	sub	sp, #16
 80163e0:	2001      	movs	r0, #1
 80163e2:	4669      	mov	r1, sp
 80163e4:	f7eb fb70 	bl	8001ac8 <clock_gettime>
 80163e8:	4a06      	ldr	r2, [pc, #24]	; (8016404 <uxr_nanos+0x28>)
 80163ea:	9800      	ldr	r0, [sp, #0]
 80163ec:	9902      	ldr	r1, [sp, #8]
 80163ee:	fba0 0302 	umull	r0, r3, r0, r2
 80163f2:	9c01      	ldr	r4, [sp, #4]
 80163f4:	1840      	adds	r0, r0, r1
 80163f6:	fb02 3304 	mla	r3, r2, r4, r3
 80163fa:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 80163fe:	b004      	add	sp, #16
 8016400:	bd10      	pop	{r4, pc}
 8016402:	bf00      	nop
 8016404:	3b9aca00 	.word	0x3b9aca00

08016408 <on_full_output_buffer_fragmented>:
 8016408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801640c:	460c      	mov	r4, r1
 801640e:	b08a      	sub	sp, #40	; 0x28
 8016410:	4606      	mov	r6, r0
 8016412:	f891 10c1 	ldrb.w	r1, [r1, #193]	; 0xc1
 8016416:	f104 0008 	add.w	r0, r4, #8
 801641a:	f7ff ff45 	bl	80162a8 <uxr_get_output_reliable_stream>
 801641e:	4605      	mov	r5, r0
 8016420:	f002 fcc8 	bl	8018db4 <get_available_free_slots>
 8016424:	b968      	cbnz	r0, 8016442 <on_full_output_buffer_fragmented+0x3a>
 8016426:	4620      	mov	r0, r4
 8016428:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	; 0xb8
 801642c:	4798      	blx	r3
 801642e:	b918      	cbnz	r0, 8016438 <on_full_output_buffer_fragmented+0x30>
 8016430:	2001      	movs	r0, #1
 8016432:	b00a      	add	sp, #40	; 0x28
 8016434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016438:	4628      	mov	r0, r5
 801643a:	f002 fcbb 	bl	8018db4 <get_available_free_slots>
 801643e:	2800      	cmp	r0, #0
 8016440:	d0f6      	beq.n	8016430 <on_full_output_buffer_fragmented+0x28>
 8016442:	8929      	ldrh	r1, [r5, #8]
 8016444:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8016448:	89eb      	ldrh	r3, [r5, #14]
 801644a:	7b28      	ldrb	r0, [r5, #12]
 801644c:	686f      	ldr	r7, [r5, #4]
 801644e:	1a12      	subs	r2, r2, r0
 8016450:	fbb3 f0f1 	udiv	r0, r3, r1
 8016454:	fbb7 f7f1 	udiv	r7, r7, r1
 8016458:	fb01 3110 	mls	r1, r1, r0, r3
 801645c:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 8016460:	b289      	uxth	r1, r1
 8016462:	fb07 f101 	mul.w	r1, r7, r1
 8016466:	3f04      	subs	r7, #4
 8016468:	443a      	add	r2, r7
 801646a:	3104      	adds	r1, #4
 801646c:	fa1f f882 	uxth.w	r8, r2
 8016470:	463a      	mov	r2, r7
 8016472:	eba3 0308 	sub.w	r3, r3, r8
 8016476:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
 801647a:	682b      	ldr	r3, [r5, #0]
 801647c:	4419      	add	r1, r3
 801647e:	2300      	movs	r3, #0
 8016480:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8016484:	9000      	str	r0, [sp, #0]
 8016486:	a802      	add	r0, sp, #8
 8016488:	f7f7 fcec 	bl	800de64 <ucdr_init_buffer_origin_offset>
 801648c:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 8016490:	f102 0308 	add.w	r3, r2, #8
 8016494:	42bb      	cmp	r3, r7
 8016496:	d927      	bls.n	80164e8 <on_full_output_buffer_fragmented+0xe0>
 8016498:	4642      	mov	r2, r8
 801649a:	2300      	movs	r3, #0
 801649c:	210d      	movs	r1, #13
 801649e:	a802      	add	r0, sp, #8
 80164a0:	f7ff ff3a 	bl	8016318 <uxr_buffer_submessage_header>
 80164a4:	8929      	ldrh	r1, [r5, #8]
 80164a6:	89eb      	ldrh	r3, [r5, #14]
 80164a8:	686a      	ldr	r2, [r5, #4]
 80164aa:	fbb3 f0f1 	udiv	r0, r3, r1
 80164ae:	fbb2 f2f1 	udiv	r2, r2, r1
 80164b2:	fb01 3310 	mls	r3, r1, r0, r3
 80164b6:	b29b      	uxth	r3, r3
 80164b8:	fb02 f303 	mul.w	r3, r2, r3
 80164bc:	682a      	ldr	r2, [r5, #0]
 80164be:	50d7      	str	r7, [r2, r3]
 80164c0:	2101      	movs	r1, #1
 80164c2:	89e8      	ldrh	r0, [r5, #14]
 80164c4:	f002 fc98 	bl	8018df8 <uxr_seq_num_add>
 80164c8:	9904      	ldr	r1, [sp, #16]
 80164ca:	9a03      	ldr	r2, [sp, #12]
 80164cc:	81e8      	strh	r0, [r5, #14]
 80164ce:	4630      	mov	r0, r6
 80164d0:	1a52      	subs	r2, r2, r1
 80164d2:	f7f7 fcd9 	bl	800de88 <ucdr_init_buffer>
 80164d6:	4630      	mov	r0, r6
 80164d8:	4622      	mov	r2, r4
 80164da:	490f      	ldr	r1, [pc, #60]	; (8016518 <on_full_output_buffer_fragmented+0x110>)
 80164dc:	f7f7 fca8 	bl	800de30 <ucdr_set_on_full_buffer_callback>
 80164e0:	2000      	movs	r0, #0
 80164e2:	b00a      	add	sp, #40	; 0x28
 80164e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80164e8:	b292      	uxth	r2, r2
 80164ea:	2302      	movs	r3, #2
 80164ec:	210d      	movs	r1, #13
 80164ee:	a802      	add	r0, sp, #8
 80164f0:	f7ff ff12 	bl	8016318 <uxr_buffer_submessage_header>
 80164f4:	8928      	ldrh	r0, [r5, #8]
 80164f6:	89eb      	ldrh	r3, [r5, #14]
 80164f8:	6869      	ldr	r1, [r5, #4]
 80164fa:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 80164fe:	fbb3 f7f0 	udiv	r7, r3, r0
 8016502:	fbb1 f1f0 	udiv	r1, r1, r0
 8016506:	fb00 3317 	mls	r3, r0, r7, r3
 801650a:	3208      	adds	r2, #8
 801650c:	b29b      	uxth	r3, r3
 801650e:	fb01 f303 	mul.w	r3, r1, r3
 8016512:	6829      	ldr	r1, [r5, #0]
 8016514:	50ca      	str	r2, [r1, r3]
 8016516:	e7d3      	b.n	80164c0 <on_full_output_buffer_fragmented+0xb8>
 8016518:	08016409 	.word	0x08016409

0801651c <uxr_prepare_output_stream>:
 801651c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801651e:	b087      	sub	sp, #28
 8016520:	2707      	movs	r7, #7
 8016522:	2500      	movs	r5, #0
 8016524:	461c      	mov	r4, r3
 8016526:	4606      	mov	r6, r0
 8016528:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801652c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801652e:	e9cd 7500 	strd	r7, r5, [sp]
 8016532:	3204      	adds	r2, #4
 8016534:	f7fe ffc8 	bl	80154c8 <uxr_prepare_stream_to_write_submessage>
 8016538:	f080 0201 	eor.w	r2, r0, #1
 801653c:	b2d2      	uxtb	r2, r2
 801653e:	75a2      	strb	r2, [r4, #22]
 8016540:	b112      	cbz	r2, 8016548 <uxr_prepare_output_stream+0x2c>
 8016542:	4628      	mov	r0, r5
 8016544:	b007      	add	sp, #28
 8016546:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016548:	aa05      	add	r2, sp, #20
 801654a:	9902      	ldr	r1, [sp, #8]
 801654c:	4630      	mov	r0, r6
 801654e:	f7ff f8f7 	bl	8015740 <uxr_init_base_object_request>
 8016552:	a905      	add	r1, sp, #20
 8016554:	4605      	mov	r5, r0
 8016556:	4620      	mov	r0, r4
 8016558:	f000 fe7a 	bl	8017250 <uxr_serialize_WRITE_DATA_Payload_Data>
 801655c:	69a6      	ldr	r6, [r4, #24]
 801655e:	69e7      	ldr	r7, [r4, #28]
 8016560:	4620      	mov	r0, r4
 8016562:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8016566:	1a52      	subs	r2, r2, r1
 8016568:	f7f7 fc8e 	bl	800de88 <ucdr_init_buffer>
 801656c:	4620      	mov	r0, r4
 801656e:	463a      	mov	r2, r7
 8016570:	4631      	mov	r1, r6
 8016572:	f7f7 fc5d 	bl	800de30 <ucdr_set_on_full_buffer_callback>
 8016576:	4628      	mov	r0, r5
 8016578:	b007      	add	sp, #28
 801657a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801657c <uxr_prepare_output_stream_fragmented>:
 801657c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016580:	b091      	sub	sp, #68	; 0x44
 8016582:	4605      	mov	r5, r0
 8016584:	3008      	adds	r0, #8
 8016586:	461e      	mov	r6, r3
 8016588:	9105      	str	r1, [sp, #20]
 801658a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801658e:	9204      	str	r2, [sp, #16]
 8016590:	f7ff fe8a 	bl	80162a8 <uxr_get_output_reliable_stream>
 8016594:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8016598:	2b01      	cmp	r3, #1
 801659a:	f000 8093 	beq.w	80166c4 <uxr_prepare_output_stream_fragmented+0x148>
 801659e:	4604      	mov	r4, r0
 80165a0:	2800      	cmp	r0, #0
 80165a2:	f000 808f 	beq.w	80166c4 <uxr_prepare_output_stream_fragmented+0x148>
 80165a6:	f002 fc05 	bl	8018db4 <get_available_free_slots>
 80165aa:	2800      	cmp	r0, #0
 80165ac:	f000 8085 	beq.w	80166ba <uxr_prepare_output_stream_fragmented+0x13e>
 80165b0:	8923      	ldrh	r3, [r4, #8]
 80165b2:	89e7      	ldrh	r7, [r4, #14]
 80165b4:	6862      	ldr	r2, [r4, #4]
 80165b6:	fbb7 f9f3 	udiv	r9, r7, r3
 80165ba:	fbb2 f2f3 	udiv	r2, r2, r3
 80165be:	fb03 7919 	mls	r9, r3, r9, r7
 80165c2:	6823      	ldr	r3, [r4, #0]
 80165c4:	f1a2 0b04 	sub.w	fp, r2, #4
 80165c8:	9203      	str	r2, [sp, #12]
 80165ca:	fa1f f989 	uxth.w	r9, r9
 80165ce:	fb02 f909 	mul.w	r9, r2, r9
 80165d2:	f109 0904 	add.w	r9, r9, #4
 80165d6:	4499      	add	r9, r3
 80165d8:	7b23      	ldrb	r3, [r4, #12]
 80165da:	f859 8c04 	ldr.w	r8, [r9, #-4]
 80165de:	4543      	cmp	r3, r8
 80165e0:	d37c      	bcc.n	80166dc <uxr_prepare_output_stream_fragmented+0x160>
 80165e2:	f1ab 0a04 	sub.w	sl, fp, #4
 80165e6:	465a      	mov	r2, fp
 80165e8:	4649      	mov	r1, r9
 80165ea:	a808      	add	r0, sp, #32
 80165ec:	ebaa 0a03 	sub.w	sl, sl, r3
 80165f0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80165f2:	f8cd 8000 	str.w	r8, [sp]
 80165f6:	3308      	adds	r3, #8
 80165f8:	fa1f fa8a 	uxth.w	sl, sl
 80165fc:	9302      	str	r3, [sp, #8]
 80165fe:	2300      	movs	r3, #0
 8016600:	f7f7 fc30 	bl	800de64 <ucdr_init_buffer_origin_offset>
 8016604:	9b02      	ldr	r3, [sp, #8]
 8016606:	4652      	mov	r2, sl
 8016608:	210d      	movs	r1, #13
 801660a:	455b      	cmp	r3, fp
 801660c:	bf34      	ite	cc
 801660e:	2302      	movcc	r3, #2
 8016610:	2300      	movcs	r3, #0
 8016612:	a808      	add	r0, sp, #32
 8016614:	f7ff fe80 	bl	8016318 <uxr_buffer_submessage_header>
 8016618:	8921      	ldrh	r1, [r4, #8]
 801661a:	6863      	ldr	r3, [r4, #4]
 801661c:	4638      	mov	r0, r7
 801661e:	fbb7 f2f1 	udiv	r2, r7, r1
 8016622:	fbb3 f3f1 	udiv	r3, r3, r1
 8016626:	fb01 7212 	mls	r2, r1, r2, r7
 801662a:	2101      	movs	r1, #1
 801662c:	b292      	uxth	r2, r2
 801662e:	fb02 f303 	mul.w	r3, r2, r3
 8016632:	6822      	ldr	r2, [r4, #0]
 8016634:	f842 b003 	str.w	fp, [r2, r3]
 8016638:	f002 fbde 	bl	8018df8 <uxr_seq_num_add>
 801663c:	9b03      	ldr	r3, [sp, #12]
 801663e:	f108 0104 	add.w	r1, r8, #4
 8016642:	4607      	mov	r7, r0
 8016644:	f1a3 0208 	sub.w	r2, r3, #8
 8016648:	4630      	mov	r0, r6
 801664a:	4449      	add	r1, r9
 801664c:	eba2 0208 	sub.w	r2, r2, r8
 8016650:	f7f7 fc1a 	bl	800de88 <ucdr_init_buffer>
 8016654:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8016656:	2107      	movs	r1, #7
 8016658:	81e7      	strh	r7, [r4, #14]
 801665a:	1d1a      	adds	r2, r3, #4
 801665c:	2300      	movs	r3, #0
 801665e:	4630      	mov	r0, r6
 8016660:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8016664:	bf28      	it	cs
 8016666:	461a      	movcs	r2, r3
 8016668:	b292      	uxth	r2, r2
 801666a:	f7ff fe55 	bl	8016318 <uxr_buffer_submessage_header>
 801666e:	aa07      	add	r2, sp, #28
 8016670:	9904      	ldr	r1, [sp, #16]
 8016672:	4628      	mov	r0, r5
 8016674:	f7ff f864 	bl	8015740 <uxr_init_base_object_request>
 8016678:	4604      	mov	r4, r0
 801667a:	b320      	cbz	r0, 80166c6 <uxr_prepare_output_stream_fragmented+0x14a>
 801667c:	a907      	add	r1, sp, #28
 801667e:	4630      	mov	r0, r6
 8016680:	f000 fde6 	bl	8017250 <uxr_serialize_WRITE_DATA_Payload_Data>
 8016684:	4630      	mov	r0, r6
 8016686:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 801668a:	1a52      	subs	r2, r2, r1
 801668c:	f7f7 fbfc 	bl	800de88 <ucdr_init_buffer>
 8016690:	9b05      	ldr	r3, [sp, #20]
 8016692:	9a02      	ldr	r2, [sp, #8]
 8016694:	4630      	mov	r0, r6
 8016696:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
 801669a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801669c:	f8c5 20c4 	str.w	r2, [r5, #196]	; 0xc4
 80166a0:	462a      	mov	r2, r5
 80166a2:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
 80166a6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80166a8:	4918      	ldr	r1, [pc, #96]	; (801670c <uxr_prepare_output_stream_fragmented+0x190>)
 80166aa:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
 80166ae:	f7f7 fbbf 	bl	800de30 <ucdr_set_on_full_buffer_callback>
 80166b2:	4620      	mov	r0, r4
 80166b4:	b011      	add	sp, #68	; 0x44
 80166b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80166ba:	991c      	ldr	r1, [sp, #112]	; 0x70
 80166bc:	4628      	mov	r0, r5
 80166be:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80166c0:	4798      	blx	r3
 80166c2:	b920      	cbnz	r0, 80166ce <uxr_prepare_output_stream_fragmented+0x152>
 80166c4:	2400      	movs	r4, #0
 80166c6:	4620      	mov	r0, r4
 80166c8:	b011      	add	sp, #68	; 0x44
 80166ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80166ce:	4620      	mov	r0, r4
 80166d0:	f002 fb70 	bl	8018db4 <get_available_free_slots>
 80166d4:	2800      	cmp	r0, #0
 80166d6:	f47f af6b 	bne.w	80165b0 <uxr_prepare_output_stream_fragmented+0x34>
 80166da:	e7f3      	b.n	80166c4 <uxr_prepare_output_stream_fragmented+0x148>
 80166dc:	4638      	mov	r0, r7
 80166de:	2101      	movs	r1, #1
 80166e0:	f002 fb8a 	bl	8018df8 <uxr_seq_num_add>
 80166e4:	8922      	ldrh	r2, [r4, #8]
 80166e6:	6863      	ldr	r3, [r4, #4]
 80166e8:	4607      	mov	r7, r0
 80166ea:	fbb3 f9f2 	udiv	r9, r3, r2
 80166ee:	fbb0 f3f2 	udiv	r3, r0, r2
 80166f2:	fb02 0313 	mls	r3, r2, r3, r0
 80166f6:	b29b      	uxth	r3, r3
 80166f8:	fb03 f909 	mul.w	r9, r3, r9
 80166fc:	6823      	ldr	r3, [r4, #0]
 80166fe:	f109 0904 	add.w	r9, r9, #4
 8016702:	4499      	add	r9, r3
 8016704:	7b23      	ldrb	r3, [r4, #12]
 8016706:	f859 8c04 	ldr.w	r8, [r9, #-4]
 801670a:	e76a      	b.n	80165e2 <uxr_prepare_output_stream_fragmented+0x66>
 801670c:	08016409 	.word	0x08016409

08016710 <uxr_serialize_message_header>:
 8016710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016712:	4616      	mov	r6, r2
 8016714:	b083      	sub	sp, #12
 8016716:	4604      	mov	r4, r0
 8016718:	460d      	mov	r5, r1
 801671a:	9301      	str	r3, [sp, #4]
 801671c:	9f08      	ldr	r7, [sp, #32]
 801671e:	f7f6 f949 	bl	800c9b4 <ucdr_serialize_uint8_t>
 8016722:	4631      	mov	r1, r6
 8016724:	4620      	mov	r0, r4
 8016726:	f7f6 f945 	bl	800c9b4 <ucdr_serialize_uint8_t>
 801672a:	9a01      	ldr	r2, [sp, #4]
 801672c:	2101      	movs	r1, #1
 801672e:	4620      	mov	r0, r4
 8016730:	f7f6 f9ec 	bl	800cb0c <ucdr_serialize_endian_uint16_t>
 8016734:	062b      	lsls	r3, r5, #24
 8016736:	d501      	bpl.n	801673c <uxr_serialize_message_header+0x2c>
 8016738:	b003      	add	sp, #12
 801673a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801673c:	2204      	movs	r2, #4
 801673e:	4639      	mov	r1, r7
 8016740:	4620      	mov	r0, r4
 8016742:	b003      	add	sp, #12
 8016744:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8016748:	f7f6 b83a 	b.w	800c7c0 <ucdr_serialize_array_uint8_t>

0801674c <uxr_deserialize_message_header>:
 801674c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801674e:	4616      	mov	r6, r2
 8016750:	b083      	sub	sp, #12
 8016752:	4604      	mov	r4, r0
 8016754:	460d      	mov	r5, r1
 8016756:	9301      	str	r3, [sp, #4]
 8016758:	9f08      	ldr	r7, [sp, #32]
 801675a:	f7f6 f941 	bl	800c9e0 <ucdr_deserialize_uint8_t>
 801675e:	4631      	mov	r1, r6
 8016760:	4620      	mov	r0, r4
 8016762:	f7f6 f93d 	bl	800c9e0 <ucdr_deserialize_uint8_t>
 8016766:	9a01      	ldr	r2, [sp, #4]
 8016768:	2101      	movs	r1, #1
 801676a:	4620      	mov	r0, r4
 801676c:	f7f6 fac2 	bl	800ccf4 <ucdr_deserialize_endian_uint16_t>
 8016770:	f995 3000 	ldrsb.w	r3, [r5]
 8016774:	2b00      	cmp	r3, #0
 8016776:	da01      	bge.n	801677c <uxr_deserialize_message_header+0x30>
 8016778:	b003      	add	sp, #12
 801677a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801677c:	2204      	movs	r2, #4
 801677e:	4639      	mov	r1, r7
 8016780:	4620      	mov	r0, r4
 8016782:	b003      	add	sp, #12
 8016784:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8016788:	f7f6 b87e 	b.w	800c888 <ucdr_deserialize_array_uint8_t>

0801678c <uxr_serialize_submessage_header>:
 801678c:	b530      	push	{r4, r5, lr}
 801678e:	4615      	mov	r5, r2
 8016790:	b083      	sub	sp, #12
 8016792:	4604      	mov	r4, r0
 8016794:	9301      	str	r3, [sp, #4]
 8016796:	f7f6 f90d 	bl	800c9b4 <ucdr_serialize_uint8_t>
 801679a:	4629      	mov	r1, r5
 801679c:	4620      	mov	r0, r4
 801679e:	f7f6 f909 	bl	800c9b4 <ucdr_serialize_uint8_t>
 80167a2:	9a01      	ldr	r2, [sp, #4]
 80167a4:	2101      	movs	r1, #1
 80167a6:	4620      	mov	r0, r4
 80167a8:	b003      	add	sp, #12
 80167aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80167ae:	f7f6 b9ad 	b.w	800cb0c <ucdr_serialize_endian_uint16_t>
 80167b2:	bf00      	nop

080167b4 <uxr_deserialize_submessage_header>:
 80167b4:	b530      	push	{r4, r5, lr}
 80167b6:	4615      	mov	r5, r2
 80167b8:	b083      	sub	sp, #12
 80167ba:	4604      	mov	r4, r0
 80167bc:	9301      	str	r3, [sp, #4]
 80167be:	f7f6 f90f 	bl	800c9e0 <ucdr_deserialize_uint8_t>
 80167c2:	4629      	mov	r1, r5
 80167c4:	4620      	mov	r0, r4
 80167c6:	f7f6 f90b 	bl	800c9e0 <ucdr_deserialize_uint8_t>
 80167ca:	9a01      	ldr	r2, [sp, #4]
 80167cc:	2101      	movs	r1, #1
 80167ce:	4620      	mov	r0, r4
 80167d0:	b003      	add	sp, #12
 80167d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80167d6:	f7f6 ba8d 	b.w	800ccf4 <ucdr_deserialize_endian_uint16_t>
 80167da:	bf00      	nop

080167dc <uxr_serialize_CLIENT_Representation>:
 80167dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80167e0:	2204      	movs	r2, #4
 80167e2:	460e      	mov	r6, r1
 80167e4:	4605      	mov	r5, r0
 80167e6:	f7f5 ffeb 	bl	800c7c0 <ucdr_serialize_array_uint8_t>
 80167ea:	4607      	mov	r7, r0
 80167ec:	2202      	movs	r2, #2
 80167ee:	1d31      	adds	r1, r6, #4
 80167f0:	4628      	mov	r0, r5
 80167f2:	f7f5 ffe5 	bl	800c7c0 <ucdr_serialize_array_uint8_t>
 80167f6:	4038      	ands	r0, r7
 80167f8:	2202      	movs	r2, #2
 80167fa:	1db1      	adds	r1, r6, #6
 80167fc:	b2c7      	uxtb	r7, r0
 80167fe:	4628      	mov	r0, r5
 8016800:	f7f5 ffde 	bl	800c7c0 <ucdr_serialize_array_uint8_t>
 8016804:	2204      	movs	r2, #4
 8016806:	4007      	ands	r7, r0
 8016808:	f106 0108 	add.w	r1, r6, #8
 801680c:	4628      	mov	r0, r5
 801680e:	f7f5 ffd7 	bl	800c7c0 <ucdr_serialize_array_uint8_t>
 8016812:	4007      	ands	r7, r0
 8016814:	7b31      	ldrb	r1, [r6, #12]
 8016816:	4628      	mov	r0, r5
 8016818:	f7f6 f8cc 	bl	800c9b4 <ucdr_serialize_uint8_t>
 801681c:	7b71      	ldrb	r1, [r6, #13]
 801681e:	4007      	ands	r7, r0
 8016820:	4628      	mov	r0, r5
 8016822:	f7f6 f899 	bl	800c958 <ucdr_serialize_bool>
 8016826:	7b73      	ldrb	r3, [r6, #13]
 8016828:	ea07 0800 	and.w	r8, r7, r0
 801682c:	b93b      	cbnz	r3, 801683e <uxr_serialize_CLIENT_Representation+0x62>
 801682e:	8bb1      	ldrh	r1, [r6, #28]
 8016830:	4628      	mov	r0, r5
 8016832:	f7f6 f8eb 	bl	800ca0c <ucdr_serialize_uint16_t>
 8016836:	ea08 0000 	and.w	r0, r8, r0
 801683a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801683e:	6931      	ldr	r1, [r6, #16]
 8016840:	4628      	mov	r0, r5
 8016842:	f7f6 facd 	bl	800cde0 <ucdr_serialize_uint32_t>
 8016846:	6933      	ldr	r3, [r6, #16]
 8016848:	b1e3      	cbz	r3, 8016884 <uxr_serialize_CLIENT_Representation+0xa8>
 801684a:	b1c0      	cbz	r0, 801687e <uxr_serialize_CLIENT_Representation+0xa2>
 801684c:	4637      	mov	r7, r6
 801684e:	f04f 0900 	mov.w	r9, #0
 8016852:	e000      	b.n	8016856 <uxr_serialize_CLIENT_Representation+0x7a>
 8016854:	b19c      	cbz	r4, 801687e <uxr_serialize_CLIENT_Representation+0xa2>
 8016856:	6979      	ldr	r1, [r7, #20]
 8016858:	4628      	mov	r0, r5
 801685a:	f001 fd69 	bl	8018330 <ucdr_serialize_string>
 801685e:	69b9      	ldr	r1, [r7, #24]
 8016860:	4604      	mov	r4, r0
 8016862:	4628      	mov	r0, r5
 8016864:	f001 fd64 	bl	8018330 <ucdr_serialize_string>
 8016868:	f109 0901 	add.w	r9, r9, #1
 801686c:	6933      	ldr	r3, [r6, #16]
 801686e:	4004      	ands	r4, r0
 8016870:	3708      	adds	r7, #8
 8016872:	4599      	cmp	r9, r3
 8016874:	b2e4      	uxtb	r4, r4
 8016876:	d3ed      	bcc.n	8016854 <uxr_serialize_CLIENT_Representation+0x78>
 8016878:	ea08 0804 	and.w	r8, r8, r4
 801687c:	e7d7      	b.n	801682e <uxr_serialize_CLIENT_Representation+0x52>
 801687e:	f04f 0800 	mov.w	r8, #0
 8016882:	e7d4      	b.n	801682e <uxr_serialize_CLIENT_Representation+0x52>
 8016884:	ea08 0800 	and.w	r8, r8, r0
 8016888:	e7d1      	b.n	801682e <uxr_serialize_CLIENT_Representation+0x52>
 801688a:	bf00      	nop

0801688c <uxr_deserialize_CLIENT_Representation>:
 801688c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016890:	2204      	movs	r2, #4
 8016892:	460c      	mov	r4, r1
 8016894:	4605      	mov	r5, r0
 8016896:	f7f5 fff7 	bl	800c888 <ucdr_deserialize_array_uint8_t>
 801689a:	4607      	mov	r7, r0
 801689c:	2202      	movs	r2, #2
 801689e:	1d21      	adds	r1, r4, #4
 80168a0:	4628      	mov	r0, r5
 80168a2:	f7f5 fff1 	bl	800c888 <ucdr_deserialize_array_uint8_t>
 80168a6:	4038      	ands	r0, r7
 80168a8:	2202      	movs	r2, #2
 80168aa:	1da1      	adds	r1, r4, #6
 80168ac:	b2c6      	uxtb	r6, r0
 80168ae:	4628      	mov	r0, r5
 80168b0:	f7f5 ffea 	bl	800c888 <ucdr_deserialize_array_uint8_t>
 80168b4:	2204      	movs	r2, #4
 80168b6:	4006      	ands	r6, r0
 80168b8:	f104 0108 	add.w	r1, r4, #8
 80168bc:	4628      	mov	r0, r5
 80168be:	f7f5 ffe3 	bl	800c888 <ucdr_deserialize_array_uint8_t>
 80168c2:	4006      	ands	r6, r0
 80168c4:	f104 010c 	add.w	r1, r4, #12
 80168c8:	4628      	mov	r0, r5
 80168ca:	f7f6 f889 	bl	800c9e0 <ucdr_deserialize_uint8_t>
 80168ce:	f104 010d 	add.w	r1, r4, #13
 80168d2:	ea06 0700 	and.w	r7, r6, r0
 80168d6:	4628      	mov	r0, r5
 80168d8:	f7f6 f854 	bl	800c984 <ucdr_deserialize_bool>
 80168dc:	7b63      	ldrb	r3, [r4, #13]
 80168de:	4007      	ands	r7, r0
 80168e0:	b93b      	cbnz	r3, 80168f2 <uxr_deserialize_CLIENT_Representation+0x66>
 80168e2:	f104 011c 	add.w	r1, r4, #28
 80168e6:	4628      	mov	r0, r5
 80168e8:	f7f6 f990 	bl	800cc0c <ucdr_deserialize_uint16_t>
 80168ec:	4038      	ands	r0, r7
 80168ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80168f2:	f104 0110 	add.w	r1, r4, #16
 80168f6:	4628      	mov	r0, r5
 80168f8:	f7f6 fba2 	bl	800d040 <ucdr_deserialize_uint32_t>
 80168fc:	6923      	ldr	r3, [r4, #16]
 80168fe:	2b01      	cmp	r3, #1
 8016900:	d903      	bls.n	801690a <uxr_deserialize_CLIENT_Representation+0x7e>
 8016902:	2301      	movs	r3, #1
 8016904:	2700      	movs	r7, #0
 8016906:	75ab      	strb	r3, [r5, #22]
 8016908:	e7eb      	b.n	80168e2 <uxr_deserialize_CLIENT_Representation+0x56>
 801690a:	b30b      	cbz	r3, 8016950 <uxr_deserialize_CLIENT_Representation+0xc4>
 801690c:	b1f0      	cbz	r0, 801694c <uxr_deserialize_CLIENT_Representation+0xc0>
 801690e:	46a0      	mov	r8, r4
 8016910:	f04f 0900 	mov.w	r9, #0
 8016914:	e000      	b.n	8016918 <uxr_deserialize_CLIENT_Representation+0x8c>
 8016916:	b1ce      	cbz	r6, 801694c <uxr_deserialize_CLIENT_Representation+0xc0>
 8016918:	f8d8 1014 	ldr.w	r1, [r8, #20]
 801691c:	f108 0808 	add.w	r8, r8, #8
 8016920:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016924:	4628      	mov	r0, r5
 8016926:	f001 fd13 	bl	8018350 <ucdr_deserialize_string>
 801692a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801692e:	4606      	mov	r6, r0
 8016930:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016934:	4628      	mov	r0, r5
 8016936:	f109 0901 	add.w	r9, r9, #1
 801693a:	f001 fd09 	bl	8018350 <ucdr_deserialize_string>
 801693e:	6923      	ldr	r3, [r4, #16]
 8016940:	4006      	ands	r6, r0
 8016942:	4599      	cmp	r9, r3
 8016944:	b2f6      	uxtb	r6, r6
 8016946:	d3e6      	bcc.n	8016916 <uxr_deserialize_CLIENT_Representation+0x8a>
 8016948:	4037      	ands	r7, r6
 801694a:	e7ca      	b.n	80168e2 <uxr_deserialize_CLIENT_Representation+0x56>
 801694c:	2700      	movs	r7, #0
 801694e:	e7c8      	b.n	80168e2 <uxr_deserialize_CLIENT_Representation+0x56>
 8016950:	4007      	ands	r7, r0
 8016952:	e7c6      	b.n	80168e2 <uxr_deserialize_CLIENT_Representation+0x56>

08016954 <uxr_serialize_AGENT_Representation>:
 8016954:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016958:	2204      	movs	r2, #4
 801695a:	460f      	mov	r7, r1
 801695c:	4605      	mov	r5, r0
 801695e:	f7f5 ff2f 	bl	800c7c0 <ucdr_serialize_array_uint8_t>
 8016962:	4604      	mov	r4, r0
 8016964:	2202      	movs	r2, #2
 8016966:	1d39      	adds	r1, r7, #4
 8016968:	4628      	mov	r0, r5
 801696a:	f7f5 ff29 	bl	800c7c0 <ucdr_serialize_array_uint8_t>
 801696e:	4020      	ands	r0, r4
 8016970:	2202      	movs	r2, #2
 8016972:	1db9      	adds	r1, r7, #6
 8016974:	b2c4      	uxtb	r4, r0
 8016976:	4628      	mov	r0, r5
 8016978:	f7f5 ff22 	bl	800c7c0 <ucdr_serialize_array_uint8_t>
 801697c:	7a39      	ldrb	r1, [r7, #8]
 801697e:	4004      	ands	r4, r0
 8016980:	4628      	mov	r0, r5
 8016982:	f7f5 ffe9 	bl	800c958 <ucdr_serialize_bool>
 8016986:	7a3b      	ldrb	r3, [r7, #8]
 8016988:	ea00 0804 	and.w	r8, r0, r4
 801698c:	b913      	cbnz	r3, 8016994 <uxr_serialize_AGENT_Representation+0x40>
 801698e:	4640      	mov	r0, r8
 8016990:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016994:	68f9      	ldr	r1, [r7, #12]
 8016996:	4628      	mov	r0, r5
 8016998:	f7f6 fa22 	bl	800cde0 <ucdr_serialize_uint32_t>
 801699c:	68fb      	ldr	r3, [r7, #12]
 801699e:	b303      	cbz	r3, 80169e2 <uxr_serialize_AGENT_Representation+0x8e>
 80169a0:	b1d0      	cbz	r0, 80169d8 <uxr_serialize_AGENT_Representation+0x84>
 80169a2:	463e      	mov	r6, r7
 80169a4:	f04f 0900 	mov.w	r9, #0
 80169a8:	e000      	b.n	80169ac <uxr_serialize_AGENT_Representation+0x58>
 80169aa:	b1ac      	cbz	r4, 80169d8 <uxr_serialize_AGENT_Representation+0x84>
 80169ac:	6931      	ldr	r1, [r6, #16]
 80169ae:	4628      	mov	r0, r5
 80169b0:	f001 fcbe 	bl	8018330 <ucdr_serialize_string>
 80169b4:	6971      	ldr	r1, [r6, #20]
 80169b6:	4604      	mov	r4, r0
 80169b8:	4628      	mov	r0, r5
 80169ba:	f001 fcb9 	bl	8018330 <ucdr_serialize_string>
 80169be:	f109 0901 	add.w	r9, r9, #1
 80169c2:	68fb      	ldr	r3, [r7, #12]
 80169c4:	4004      	ands	r4, r0
 80169c6:	3608      	adds	r6, #8
 80169c8:	4599      	cmp	r9, r3
 80169ca:	b2e4      	uxtb	r4, r4
 80169cc:	d3ed      	bcc.n	80169aa <uxr_serialize_AGENT_Representation+0x56>
 80169ce:	ea08 0804 	and.w	r8, r8, r4
 80169d2:	4640      	mov	r0, r8
 80169d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80169d8:	f04f 0800 	mov.w	r8, #0
 80169dc:	4640      	mov	r0, r8
 80169de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80169e2:	ea08 0800 	and.w	r8, r8, r0
 80169e6:	e7d2      	b.n	801698e <uxr_serialize_AGENT_Representation+0x3a>

080169e8 <uxr_serialize_DATAWRITER_Representation>:
 80169e8:	b570      	push	{r4, r5, r6, lr}
 80169ea:	460d      	mov	r5, r1
 80169ec:	7809      	ldrb	r1, [r1, #0]
 80169ee:	4606      	mov	r6, r0
 80169f0:	f7f5 ffe0 	bl	800c9b4 <ucdr_serialize_uint8_t>
 80169f4:	4604      	mov	r4, r0
 80169f6:	b130      	cbz	r0, 8016a06 <uxr_serialize_DATAWRITER_Representation+0x1e>
 80169f8:	782b      	ldrb	r3, [r5, #0]
 80169fa:	2b02      	cmp	r3, #2
 80169fc:	d00c      	beq.n	8016a18 <uxr_serialize_DATAWRITER_Representation+0x30>
 80169fe:	2b03      	cmp	r3, #3
 8016a00:	d010      	beq.n	8016a24 <uxr_serialize_DATAWRITER_Representation+0x3c>
 8016a02:	2b01      	cmp	r3, #1
 8016a04:	d008      	beq.n	8016a18 <uxr_serialize_DATAWRITER_Representation+0x30>
 8016a06:	2202      	movs	r2, #2
 8016a08:	f505 7102 	add.w	r1, r5, #520	; 0x208
 8016a0c:	4630      	mov	r0, r6
 8016a0e:	f7f5 fed7 	bl	800c7c0 <ucdr_serialize_array_uint8_t>
 8016a12:	4020      	ands	r0, r4
 8016a14:	b2c0      	uxtb	r0, r0
 8016a16:	bd70      	pop	{r4, r5, r6, pc}
 8016a18:	6869      	ldr	r1, [r5, #4]
 8016a1a:	4630      	mov	r0, r6
 8016a1c:	f001 fc88 	bl	8018330 <ucdr_serialize_string>
 8016a20:	4604      	mov	r4, r0
 8016a22:	e7f0      	b.n	8016a06 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8016a24:	4629      	mov	r1, r5
 8016a26:	4630      	mov	r0, r6
 8016a28:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8016a2c:	3104      	adds	r1, #4
 8016a2e:	f7f7 facb 	bl	800dfc8 <ucdr_serialize_sequence_uint8_t>
 8016a32:	4604      	mov	r4, r0
 8016a34:	e7e7      	b.n	8016a06 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8016a36:	bf00      	nop

08016a38 <uxr_serialize_ObjectVariant.part.0>:
 8016a38:	b570      	push	{r4, r5, r6, lr}
 8016a3a:	780b      	ldrb	r3, [r1, #0]
 8016a3c:	460c      	mov	r4, r1
 8016a3e:	4605      	mov	r5, r0
 8016a40:	3b01      	subs	r3, #1
 8016a42:	2b0d      	cmp	r3, #13
 8016a44:	d854      	bhi.n	8016af0 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8016a46:	e8df f003 	tbb	[pc, r3]
 8016a4a:	0730      	.short	0x0730
 8016a4c:	07071b1b 	.word	0x07071b1b
 8016a50:	0c530707 	.word	0x0c530707
 8016a54:	494e0c0c 	.word	0x494e0c0c
 8016a58:	3104      	adds	r1, #4
 8016a5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016a5e:	f7ff bfc3 	b.w	80169e8 <uxr_serialize_DATAWRITER_Representation>
 8016a62:	7909      	ldrb	r1, [r1, #4]
 8016a64:	f7f5 ffa6 	bl	800c9b4 <ucdr_serialize_uint8_t>
 8016a68:	b1e8      	cbz	r0, 8016aa6 <uxr_serialize_ObjectVariant.part.0+0x6e>
 8016a6a:	7923      	ldrb	r3, [r4, #4]
 8016a6c:	2b01      	cmp	r3, #1
 8016a6e:	d001      	beq.n	8016a74 <uxr_serialize_ObjectVariant.part.0+0x3c>
 8016a70:	2b02      	cmp	r3, #2
 8016a72:	d13d      	bne.n	8016af0 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8016a74:	68a1      	ldr	r1, [r4, #8]
 8016a76:	4628      	mov	r0, r5
 8016a78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016a7c:	f001 bc58 	b.w	8018330 <ucdr_serialize_string>
 8016a80:	7909      	ldrb	r1, [r1, #4]
 8016a82:	f7f5 ff97 	bl	800c9b4 <ucdr_serialize_uint8_t>
 8016a86:	4606      	mov	r6, r0
 8016a88:	b120      	cbz	r0, 8016a94 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8016a8a:	7923      	ldrb	r3, [r4, #4]
 8016a8c:	2b02      	cmp	r3, #2
 8016a8e:	d039      	beq.n	8016b04 <uxr_serialize_ObjectVariant.part.0+0xcc>
 8016a90:	2b03      	cmp	r3, #3
 8016a92:	d02f      	beq.n	8016af4 <uxr_serialize_ObjectVariant.part.0+0xbc>
 8016a94:	2202      	movs	r2, #2
 8016a96:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8016a9a:	4628      	mov	r0, r5
 8016a9c:	f7f5 fe90 	bl	800c7c0 <ucdr_serialize_array_uint8_t>
 8016aa0:	4030      	ands	r0, r6
 8016aa2:	b2c0      	uxtb	r0, r0
 8016aa4:	bd70      	pop	{r4, r5, r6, pc}
 8016aa6:	2000      	movs	r0, #0
 8016aa8:	bd70      	pop	{r4, r5, r6, pc}
 8016aaa:	7909      	ldrb	r1, [r1, #4]
 8016aac:	f7f5 ff82 	bl	800c9b4 <ucdr_serialize_uint8_t>
 8016ab0:	4606      	mov	r6, r0
 8016ab2:	b158      	cbz	r0, 8016acc <uxr_serialize_ObjectVariant.part.0+0x94>
 8016ab4:	7923      	ldrb	r3, [r4, #4]
 8016ab6:	2b02      	cmp	r3, #2
 8016ab8:	d003      	beq.n	8016ac2 <uxr_serialize_ObjectVariant.part.0+0x8a>
 8016aba:	2b03      	cmp	r3, #3
 8016abc:	d028      	beq.n	8016b10 <uxr_serialize_ObjectVariant.part.0+0xd8>
 8016abe:	2b01      	cmp	r3, #1
 8016ac0:	d104      	bne.n	8016acc <uxr_serialize_ObjectVariant.part.0+0x94>
 8016ac2:	68a1      	ldr	r1, [r4, #8]
 8016ac4:	4628      	mov	r0, r5
 8016ac6:	f001 fc33 	bl	8018330 <ucdr_serialize_string>
 8016aca:	4606      	mov	r6, r0
 8016acc:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	; 0x20c
 8016ad0:	4628      	mov	r0, r5
 8016ad2:	f7f6 fcab 	bl	800d42c <ucdr_serialize_int16_t>
 8016ad6:	4030      	ands	r0, r6
 8016ad8:	b2c0      	uxtb	r0, r0
 8016ada:	bd70      	pop	{r4, r5, r6, pc}
 8016adc:	3104      	adds	r1, #4
 8016ade:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016ae2:	f7ff be7b 	b.w	80167dc <uxr_serialize_CLIENT_Representation>
 8016ae6:	3104      	adds	r1, #4
 8016ae8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016aec:	f7ff bf32 	b.w	8016954 <uxr_serialize_AGENT_Representation>
 8016af0:	2001      	movs	r0, #1
 8016af2:	bd70      	pop	{r4, r5, r6, pc}
 8016af4:	68a2      	ldr	r2, [r4, #8]
 8016af6:	f104 010c 	add.w	r1, r4, #12
 8016afa:	4628      	mov	r0, r5
 8016afc:	f7f7 fa64 	bl	800dfc8 <ucdr_serialize_sequence_uint8_t>
 8016b00:	4606      	mov	r6, r0
 8016b02:	e7c7      	b.n	8016a94 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8016b04:	68a1      	ldr	r1, [r4, #8]
 8016b06:	4628      	mov	r0, r5
 8016b08:	f001 fc12 	bl	8018330 <ucdr_serialize_string>
 8016b0c:	4606      	mov	r6, r0
 8016b0e:	e7c1      	b.n	8016a94 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8016b10:	68a2      	ldr	r2, [r4, #8]
 8016b12:	f104 010c 	add.w	r1, r4, #12
 8016b16:	4628      	mov	r0, r5
 8016b18:	f7f7 fa56 	bl	800dfc8 <ucdr_serialize_sequence_uint8_t>
 8016b1c:	4606      	mov	r6, r0
 8016b1e:	e7d5      	b.n	8016acc <uxr_serialize_ObjectVariant.part.0+0x94>

08016b20 <uxr_deserialize_DATAWRITER_Representation>:
 8016b20:	b570      	push	{r4, r5, r6, lr}
 8016b22:	4606      	mov	r6, r0
 8016b24:	460d      	mov	r5, r1
 8016b26:	f7f5 ff5b 	bl	800c9e0 <ucdr_deserialize_uint8_t>
 8016b2a:	4604      	mov	r4, r0
 8016b2c:	b130      	cbz	r0, 8016b3c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8016b2e:	782b      	ldrb	r3, [r5, #0]
 8016b30:	2b02      	cmp	r3, #2
 8016b32:	d00c      	beq.n	8016b4e <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8016b34:	2b03      	cmp	r3, #3
 8016b36:	d012      	beq.n	8016b5e <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8016b38:	2b01      	cmp	r3, #1
 8016b3a:	d008      	beq.n	8016b4e <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8016b3c:	2202      	movs	r2, #2
 8016b3e:	f505 7102 	add.w	r1, r5, #520	; 0x208
 8016b42:	4630      	mov	r0, r6
 8016b44:	f7f5 fea0 	bl	800c888 <ucdr_deserialize_array_uint8_t>
 8016b48:	4020      	ands	r0, r4
 8016b4a:	b2c0      	uxtb	r0, r0
 8016b4c:	bd70      	pop	{r4, r5, r6, pc}
 8016b4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016b52:	6869      	ldr	r1, [r5, #4]
 8016b54:	4630      	mov	r0, r6
 8016b56:	f001 fbfb 	bl	8018350 <ucdr_deserialize_string>
 8016b5a:	4604      	mov	r4, r0
 8016b5c:	e7ee      	b.n	8016b3c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8016b5e:	1d2b      	adds	r3, r5, #4
 8016b60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016b64:	f105 0108 	add.w	r1, r5, #8
 8016b68:	4630      	mov	r0, r6
 8016b6a:	f7f7 fa3f 	bl	800dfec <ucdr_deserialize_sequence_uint8_t>
 8016b6e:	4604      	mov	r4, r0
 8016b70:	e7e4      	b.n	8016b3c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8016b72:	bf00      	nop

08016b74 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8016b74:	b570      	push	{r4, r5, r6, lr}
 8016b76:	460d      	mov	r5, r1
 8016b78:	7809      	ldrb	r1, [r1, #0]
 8016b7a:	4606      	mov	r6, r0
 8016b7c:	f7f5 feec 	bl	800c958 <ucdr_serialize_bool>
 8016b80:	782b      	ldrb	r3, [r5, #0]
 8016b82:	4604      	mov	r4, r0
 8016b84:	b94b      	cbnz	r3, 8016b9a <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8016b86:	7a29      	ldrb	r1, [r5, #8]
 8016b88:	4630      	mov	r0, r6
 8016b8a:	f7f5 fee5 	bl	800c958 <ucdr_serialize_bool>
 8016b8e:	7a2b      	ldrb	r3, [r5, #8]
 8016b90:	4004      	ands	r4, r0
 8016b92:	b2e4      	uxtb	r4, r4
 8016b94:	b943      	cbnz	r3, 8016ba8 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8016b96:	4620      	mov	r0, r4
 8016b98:	bd70      	pop	{r4, r5, r6, pc}
 8016b9a:	6869      	ldr	r1, [r5, #4]
 8016b9c:	4630      	mov	r0, r6
 8016b9e:	f001 fbc7 	bl	8018330 <ucdr_serialize_string>
 8016ba2:	4004      	ands	r4, r0
 8016ba4:	b2e4      	uxtb	r4, r4
 8016ba6:	e7ee      	b.n	8016b86 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8016ba8:	68e9      	ldr	r1, [r5, #12]
 8016baa:	4630      	mov	r0, r6
 8016bac:	f001 fbc0 	bl	8018330 <ucdr_serialize_string>
 8016bb0:	4004      	ands	r4, r0
 8016bb2:	4620      	mov	r0, r4
 8016bb4:	bd70      	pop	{r4, r5, r6, pc}
 8016bb6:	bf00      	nop

08016bb8 <uxr_serialize_OBJK_Replier_Binary>:
 8016bb8:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 8016bbc:	460f      	mov	r7, r1
 8016bbe:	4680      	mov	r8, r0
 8016bc0:	6809      	ldr	r1, [r1, #0]
 8016bc2:	f001 fbb5 	bl	8018330 <ucdr_serialize_string>
 8016bc6:	4605      	mov	r5, r0
 8016bc8:	6879      	ldr	r1, [r7, #4]
 8016bca:	4640      	mov	r0, r8
 8016bcc:	f001 fbb0 	bl	8018330 <ucdr_serialize_string>
 8016bd0:	4005      	ands	r5, r0
 8016bd2:	68b9      	ldr	r1, [r7, #8]
 8016bd4:	4640      	mov	r0, r8
 8016bd6:	b2ec      	uxtb	r4, r5
 8016bd8:	f001 fbaa 	bl	8018330 <ucdr_serialize_string>
 8016bdc:	7b39      	ldrb	r1, [r7, #12]
 8016bde:	4004      	ands	r4, r0
 8016be0:	4640      	mov	r0, r8
 8016be2:	f7f5 feb9 	bl	800c958 <ucdr_serialize_bool>
 8016be6:	7b3b      	ldrb	r3, [r7, #12]
 8016be8:	4004      	ands	r4, r0
 8016bea:	b94b      	cbnz	r3, 8016c00 <uxr_serialize_OBJK_Replier_Binary+0x48>
 8016bec:	7d39      	ldrb	r1, [r7, #20]
 8016bee:	4640      	mov	r0, r8
 8016bf0:	f7f5 feb2 	bl	800c958 <ucdr_serialize_bool>
 8016bf4:	7d3b      	ldrb	r3, [r7, #20]
 8016bf6:	4004      	ands	r4, r0
 8016bf8:	b943      	cbnz	r3, 8016c0c <uxr_serialize_OBJK_Replier_Binary+0x54>
 8016bfa:	4620      	mov	r0, r4
 8016bfc:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 8016c00:	6939      	ldr	r1, [r7, #16]
 8016c02:	4640      	mov	r0, r8
 8016c04:	f001 fb94 	bl	8018330 <ucdr_serialize_string>
 8016c08:	4004      	ands	r4, r0
 8016c0a:	e7ef      	b.n	8016bec <uxr_serialize_OBJK_Replier_Binary+0x34>
 8016c0c:	69b9      	ldr	r1, [r7, #24]
 8016c0e:	4640      	mov	r0, r8
 8016c10:	f001 fb8e 	bl	8018330 <ucdr_serialize_string>
 8016c14:	4004      	ands	r4, r0
 8016c16:	b2e4      	uxtb	r4, r4
 8016c18:	4620      	mov	r0, r4
 8016c1a:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 8016c1e:	bf00      	nop

08016c20 <uxr_deserialize_ObjectVariant>:
 8016c20:	b570      	push	{r4, r5, r6, lr}
 8016c22:	4605      	mov	r5, r0
 8016c24:	460e      	mov	r6, r1
 8016c26:	f7f5 fedb 	bl	800c9e0 <ucdr_deserialize_uint8_t>
 8016c2a:	b168      	cbz	r0, 8016c48 <uxr_deserialize_ObjectVariant+0x28>
 8016c2c:	7833      	ldrb	r3, [r6, #0]
 8016c2e:	4604      	mov	r4, r0
 8016c30:	3b01      	subs	r3, #1
 8016c32:	2b0d      	cmp	r3, #13
 8016c34:	d809      	bhi.n	8016c4a <uxr_deserialize_ObjectVariant+0x2a>
 8016c36:	e8df f003 	tbb	[pc, r3]
 8016c3a:	0a41      	.short	0x0a41
 8016c3c:	0a0a2323 	.word	0x0a0a2323
 8016c40:	10080a0a 	.word	0x10080a0a
 8016c44:	565c1010 	.word	0x565c1010
 8016c48:	2400      	movs	r4, #0
 8016c4a:	4620      	mov	r0, r4
 8016c4c:	bd70      	pop	{r4, r5, r6, pc}
 8016c4e:	1d31      	adds	r1, r6, #4
 8016c50:	4628      	mov	r0, r5
 8016c52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016c56:	f7ff bf63 	b.w	8016b20 <uxr_deserialize_DATAWRITER_Representation>
 8016c5a:	1d31      	adds	r1, r6, #4
 8016c5c:	4628      	mov	r0, r5
 8016c5e:	f7f5 febf 	bl	800c9e0 <ucdr_deserialize_uint8_t>
 8016c62:	2800      	cmp	r0, #0
 8016c64:	d0f0      	beq.n	8016c48 <uxr_deserialize_ObjectVariant+0x28>
 8016c66:	7933      	ldrb	r3, [r6, #4]
 8016c68:	2b01      	cmp	r3, #1
 8016c6a:	d001      	beq.n	8016c70 <uxr_deserialize_ObjectVariant+0x50>
 8016c6c:	2b02      	cmp	r3, #2
 8016c6e:	d1ec      	bne.n	8016c4a <uxr_deserialize_ObjectVariant+0x2a>
 8016c70:	68b1      	ldr	r1, [r6, #8]
 8016c72:	4628      	mov	r0, r5
 8016c74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016c78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016c7c:	f001 bb68 	b.w	8018350 <ucdr_deserialize_string>
 8016c80:	1d31      	adds	r1, r6, #4
 8016c82:	4628      	mov	r0, r5
 8016c84:	f7f5 feac 	bl	800c9e0 <ucdr_deserialize_uint8_t>
 8016c88:	4604      	mov	r4, r0
 8016c8a:	b170      	cbz	r0, 8016caa <uxr_deserialize_ObjectVariant+0x8a>
 8016c8c:	7933      	ldrb	r3, [r6, #4]
 8016c8e:	2b02      	cmp	r3, #2
 8016c90:	d04c      	beq.n	8016d2c <uxr_deserialize_ObjectVariant+0x10c>
 8016c92:	2b03      	cmp	r3, #3
 8016c94:	d109      	bne.n	8016caa <uxr_deserialize_ObjectVariant+0x8a>
 8016c96:	f106 0308 	add.w	r3, r6, #8
 8016c9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016c9e:	f106 010c 	add.w	r1, r6, #12
 8016ca2:	4628      	mov	r0, r5
 8016ca4:	f7f7 f9a2 	bl	800dfec <ucdr_deserialize_sequence_uint8_t>
 8016ca8:	4604      	mov	r4, r0
 8016caa:	2202      	movs	r2, #2
 8016cac:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 8016cb0:	4628      	mov	r0, r5
 8016cb2:	f7f5 fde9 	bl	800c888 <ucdr_deserialize_array_uint8_t>
 8016cb6:	4020      	ands	r0, r4
 8016cb8:	b2c4      	uxtb	r4, r0
 8016cba:	e7c6      	b.n	8016c4a <uxr_deserialize_ObjectVariant+0x2a>
 8016cbc:	1d31      	adds	r1, r6, #4
 8016cbe:	4628      	mov	r0, r5
 8016cc0:	f7f5 fe8e 	bl	800c9e0 <ucdr_deserialize_uint8_t>
 8016cc4:	4604      	mov	r4, r0
 8016cc6:	b130      	cbz	r0, 8016cd6 <uxr_deserialize_ObjectVariant+0xb6>
 8016cc8:	7933      	ldrb	r3, [r6, #4]
 8016cca:	2b02      	cmp	r3, #2
 8016ccc:	d036      	beq.n	8016d3c <uxr_deserialize_ObjectVariant+0x11c>
 8016cce:	2b03      	cmp	r3, #3
 8016cd0:	d03c      	beq.n	8016d4c <uxr_deserialize_ObjectVariant+0x12c>
 8016cd2:	2b01      	cmp	r3, #1
 8016cd4:	d032      	beq.n	8016d3c <uxr_deserialize_ObjectVariant+0x11c>
 8016cd6:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 8016cda:	4628      	mov	r0, r5
 8016cdc:	f7f6 fc26 	bl	800d52c <ucdr_deserialize_int16_t>
 8016ce0:	4020      	ands	r0, r4
 8016ce2:	b2c4      	uxtb	r4, r0
 8016ce4:	e7b1      	b.n	8016c4a <uxr_deserialize_ObjectVariant+0x2a>
 8016ce6:	1d31      	adds	r1, r6, #4
 8016ce8:	4628      	mov	r0, r5
 8016cea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016cee:	f7ff bdcd 	b.w	801688c <uxr_deserialize_CLIENT_Representation>
 8016cf2:	2204      	movs	r2, #4
 8016cf4:	4628      	mov	r0, r5
 8016cf6:	18b1      	adds	r1, r6, r2
 8016cf8:	f7f5 fdc6 	bl	800c888 <ucdr_deserialize_array_uint8_t>
 8016cfc:	4604      	mov	r4, r0
 8016cfe:	2202      	movs	r2, #2
 8016d00:	f106 0108 	add.w	r1, r6, #8
 8016d04:	4628      	mov	r0, r5
 8016d06:	f7f5 fdbf 	bl	800c888 <ucdr_deserialize_array_uint8_t>
 8016d0a:	4004      	ands	r4, r0
 8016d0c:	2202      	movs	r2, #2
 8016d0e:	f106 010a 	add.w	r1, r6, #10
 8016d12:	4628      	mov	r0, r5
 8016d14:	b2e4      	uxtb	r4, r4
 8016d16:	f7f5 fdb7 	bl	800c888 <ucdr_deserialize_array_uint8_t>
 8016d1a:	4603      	mov	r3, r0
 8016d1c:	f106 010c 	add.w	r1, r6, #12
 8016d20:	4628      	mov	r0, r5
 8016d22:	401c      	ands	r4, r3
 8016d24:	f7f5 fe2e 	bl	800c984 <ucdr_deserialize_bool>
 8016d28:	4004      	ands	r4, r0
 8016d2a:	e78e      	b.n	8016c4a <uxr_deserialize_ObjectVariant+0x2a>
 8016d2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016d30:	68b1      	ldr	r1, [r6, #8]
 8016d32:	4628      	mov	r0, r5
 8016d34:	f001 fb0c 	bl	8018350 <ucdr_deserialize_string>
 8016d38:	4604      	mov	r4, r0
 8016d3a:	e7b6      	b.n	8016caa <uxr_deserialize_ObjectVariant+0x8a>
 8016d3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016d40:	68b1      	ldr	r1, [r6, #8]
 8016d42:	4628      	mov	r0, r5
 8016d44:	f001 fb04 	bl	8018350 <ucdr_deserialize_string>
 8016d48:	4604      	mov	r4, r0
 8016d4a:	e7c4      	b.n	8016cd6 <uxr_deserialize_ObjectVariant+0xb6>
 8016d4c:	f106 0308 	add.w	r3, r6, #8
 8016d50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016d54:	f106 010c 	add.w	r1, r6, #12
 8016d58:	4628      	mov	r0, r5
 8016d5a:	f7f7 f947 	bl	800dfec <ucdr_deserialize_sequence_uint8_t>
 8016d5e:	4604      	mov	r4, r0
 8016d60:	e7b9      	b.n	8016cd6 <uxr_deserialize_ObjectVariant+0xb6>
 8016d62:	bf00      	nop

08016d64 <uxr_deserialize_BaseObjectRequest>:
 8016d64:	b570      	push	{r4, r5, r6, lr}
 8016d66:	2202      	movs	r2, #2
 8016d68:	4605      	mov	r5, r0
 8016d6a:	460e      	mov	r6, r1
 8016d6c:	f7f5 fd8c 	bl	800c888 <ucdr_deserialize_array_uint8_t>
 8016d70:	2202      	movs	r2, #2
 8016d72:	4604      	mov	r4, r0
 8016d74:	4628      	mov	r0, r5
 8016d76:	18b1      	adds	r1, r6, r2
 8016d78:	f7f5 fd86 	bl	800c888 <ucdr_deserialize_array_uint8_t>
 8016d7c:	4020      	ands	r0, r4
 8016d7e:	b2c0      	uxtb	r0, r0
 8016d80:	bd70      	pop	{r4, r5, r6, pc}
 8016d82:	bf00      	nop

08016d84 <uxr_serialize_ActivityInfoVariant>:
 8016d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016d88:	460e      	mov	r6, r1
 8016d8a:	7809      	ldrb	r1, [r1, #0]
 8016d8c:	4680      	mov	r8, r0
 8016d8e:	f7f5 fe11 	bl	800c9b4 <ucdr_serialize_uint8_t>
 8016d92:	4607      	mov	r7, r0
 8016d94:	b138      	cbz	r0, 8016da6 <uxr_serialize_ActivityInfoVariant+0x22>
 8016d96:	7833      	ldrb	r3, [r6, #0]
 8016d98:	2b06      	cmp	r3, #6
 8016d9a:	f000 8081 	beq.w	8016ea0 <uxr_serialize_ActivityInfoVariant+0x11c>
 8016d9e:	2b0d      	cmp	r3, #13
 8016da0:	d014      	beq.n	8016dcc <uxr_serialize_ActivityInfoVariant+0x48>
 8016da2:	2b05      	cmp	r3, #5
 8016da4:	d002      	beq.n	8016dac <uxr_serialize_ActivityInfoVariant+0x28>
 8016da6:	4638      	mov	r0, r7
 8016da8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016dac:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8016db0:	4640      	mov	r0, r8
 8016db2:	f7f6 fb3b 	bl	800d42c <ucdr_serialize_int16_t>
 8016db6:	4607      	mov	r7, r0
 8016db8:	4640      	mov	r0, r8
 8016dba:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 8016dbe:	f7f6 fa65 	bl	800d28c <ucdr_serialize_uint64_t>
 8016dc2:	4038      	ands	r0, r7
 8016dc4:	b2c7      	uxtb	r7, r0
 8016dc6:	4638      	mov	r0, r7
 8016dc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016dcc:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8016dd0:	4640      	mov	r0, r8
 8016dd2:	f7f6 fb2b 	bl	800d42c <ucdr_serialize_int16_t>
 8016dd6:	68f1      	ldr	r1, [r6, #12]
 8016dd8:	4607      	mov	r7, r0
 8016dda:	4640      	mov	r0, r8
 8016ddc:	f7f6 f800 	bl	800cde0 <ucdr_serialize_uint32_t>
 8016de0:	68f3      	ldr	r3, [r6, #12]
 8016de2:	2b00      	cmp	r3, #0
 8016de4:	d0ed      	beq.n	8016dc2 <uxr_serialize_ActivityInfoVariant+0x3e>
 8016de6:	b318      	cbz	r0, 8016e30 <uxr_serialize_ActivityInfoVariant+0xac>
 8016de8:	f106 090c 	add.w	r9, r6, #12
 8016dec:	2400      	movs	r4, #0
 8016dee:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8016df2:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
 8016df6:	7c29      	ldrb	r1, [r5, #16]
 8016df8:	4640      	mov	r0, r8
 8016dfa:	f7f5 fddb 	bl	800c9b4 <ucdr_serialize_uint8_t>
 8016dfe:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 8016e02:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8016e06:	2800      	cmp	r0, #0
 8016e08:	d051      	beq.n	8016eae <uxr_serialize_ActivityInfoVariant+0x12a>
 8016e0a:	7c2b      	ldrb	r3, [r5, #16]
 8016e0c:	00c9      	lsls	r1, r1, #3
 8016e0e:	2b03      	cmp	r3, #3
 8016e10:	d854      	bhi.n	8016ebc <uxr_serialize_ActivityInfoVariant+0x138>
 8016e12:	e8df f003 	tbb	[pc, r3]
 8016e16:	2133      	.short	0x2133
 8016e18:	020f      	.short	0x020f
 8016e1a:	4449      	add	r1, r9
 8016e1c:	4640      	mov	r0, r8
 8016e1e:	6889      	ldr	r1, [r1, #8]
 8016e20:	f001 fa86 	bl	8018330 <ucdr_serialize_string>
 8016e24:	3401      	adds	r4, #1
 8016e26:	68f2      	ldr	r2, [r6, #12]
 8016e28:	4294      	cmp	r4, r2
 8016e2a:	d244      	bcs.n	8016eb6 <uxr_serialize_ActivityInfoVariant+0x132>
 8016e2c:	2800      	cmp	r0, #0
 8016e2e:	d1de      	bne.n	8016dee <uxr_serialize_ActivityInfoVariant+0x6a>
 8016e30:	2700      	movs	r7, #0
 8016e32:	e7b8      	b.n	8016da6 <uxr_serialize_ActivityInfoVariant+0x22>
 8016e34:	3108      	adds	r1, #8
 8016e36:	44a2      	add	sl, r4
 8016e38:	2210      	movs	r2, #16
 8016e3a:	4640      	mov	r0, r8
 8016e3c:	4449      	add	r1, r9
 8016e3e:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8016e42:	f7f5 fcbd 	bl	800c7c0 <ucdr_serialize_array_uint8_t>
 8016e46:	4605      	mov	r5, r0
 8016e48:	f8da 1024 	ldr.w	r1, [sl, #36]	; 0x24
 8016e4c:	4640      	mov	r0, r8
 8016e4e:	f7f5 ffc7 	bl	800cde0 <ucdr_serialize_uint32_t>
 8016e52:	4028      	ands	r0, r5
 8016e54:	b2c0      	uxtb	r0, r0
 8016e56:	e7e5      	b.n	8016e24 <uxr_serialize_ActivityInfoVariant+0xa0>
 8016e58:	3108      	adds	r1, #8
 8016e5a:	44a2      	add	sl, r4
 8016e5c:	2204      	movs	r2, #4
 8016e5e:	4640      	mov	r0, r8
 8016e60:	4449      	add	r1, r9
 8016e62:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8016e66:	f7f5 fcab 	bl	800c7c0 <ucdr_serialize_array_uint8_t>
 8016e6a:	4605      	mov	r5, r0
 8016e6c:	f8ba 1018 	ldrh.w	r1, [sl, #24]
 8016e70:	4640      	mov	r0, r8
 8016e72:	f7f5 fdcb 	bl	800ca0c <ucdr_serialize_uint16_t>
 8016e76:	4028      	ands	r0, r5
 8016e78:	b2c0      	uxtb	r0, r0
 8016e7a:	e7d3      	b.n	8016e24 <uxr_serialize_ActivityInfoVariant+0xa0>
 8016e7c:	3108      	adds	r1, #8
 8016e7e:	44a2      	add	sl, r4
 8016e80:	2202      	movs	r2, #2
 8016e82:	4640      	mov	r0, r8
 8016e84:	4449      	add	r1, r9
 8016e86:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8016e8a:	f7f5 fc99 	bl	800c7c0 <ucdr_serialize_array_uint8_t>
 8016e8e:	4605      	mov	r5, r0
 8016e90:	f89a 1016 	ldrb.w	r1, [sl, #22]
 8016e94:	4640      	mov	r0, r8
 8016e96:	f7f5 fd8d 	bl	800c9b4 <ucdr_serialize_uint8_t>
 8016e9a:	4028      	ands	r0, r5
 8016e9c:	b2c0      	uxtb	r0, r0
 8016e9e:	e7c1      	b.n	8016e24 <uxr_serialize_ActivityInfoVariant+0xa0>
 8016ea0:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8016ea4:	4640      	mov	r0, r8
 8016ea6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016eaa:	f7f6 babf 	b.w	800d42c <ucdr_serialize_int16_t>
 8016eae:	3401      	adds	r4, #1
 8016eb0:	68f2      	ldr	r2, [r6, #12]
 8016eb2:	42a2      	cmp	r2, r4
 8016eb4:	d8bc      	bhi.n	8016e30 <uxr_serialize_ActivityInfoVariant+0xac>
 8016eb6:	4007      	ands	r7, r0
 8016eb8:	b2ff      	uxtb	r7, r7
 8016eba:	e774      	b.n	8016da6 <uxr_serialize_ActivityInfoVariant+0x22>
 8016ebc:	3401      	adds	r4, #1
 8016ebe:	68f3      	ldr	r3, [r6, #12]
 8016ec0:	3518      	adds	r5, #24
 8016ec2:	429c      	cmp	r4, r3
 8016ec4:	d397      	bcc.n	8016df6 <uxr_serialize_ActivityInfoVariant+0x72>
 8016ec6:	e76e      	b.n	8016da6 <uxr_serialize_ActivityInfoVariant+0x22>

08016ec8 <uxr_deserialize_BaseObjectReply>:
 8016ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016ecc:	2202      	movs	r2, #2
 8016ece:	4606      	mov	r6, r0
 8016ed0:	460f      	mov	r7, r1
 8016ed2:	f7f5 fcd9 	bl	800c888 <ucdr_deserialize_array_uint8_t>
 8016ed6:	2202      	movs	r2, #2
 8016ed8:	4605      	mov	r5, r0
 8016eda:	4630      	mov	r0, r6
 8016edc:	18b9      	adds	r1, r7, r2
 8016ede:	f7f5 fcd3 	bl	800c888 <ucdr_deserialize_array_uint8_t>
 8016ee2:	4680      	mov	r8, r0
 8016ee4:	1d39      	adds	r1, r7, #4
 8016ee6:	4630      	mov	r0, r6
 8016ee8:	f7f5 fd7a 	bl	800c9e0 <ucdr_deserialize_uint8_t>
 8016eec:	ea05 0508 	and.w	r5, r5, r8
 8016ef0:	4604      	mov	r4, r0
 8016ef2:	1d79      	adds	r1, r7, #5
 8016ef4:	4630      	mov	r0, r6
 8016ef6:	402c      	ands	r4, r5
 8016ef8:	f7f5 fd72 	bl	800c9e0 <ucdr_deserialize_uint8_t>
 8016efc:	4020      	ands	r0, r4
 8016efe:	b2c0      	uxtb	r0, r0
 8016f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016f04 <uxr_serialize_ReadSpecification>:
 8016f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016f06:	460e      	mov	r6, r1
 8016f08:	4607      	mov	r7, r0
 8016f0a:	7809      	ldrb	r1, [r1, #0]
 8016f0c:	f7f5 fd52 	bl	800c9b4 <ucdr_serialize_uint8_t>
 8016f10:	4604      	mov	r4, r0
 8016f12:	7871      	ldrb	r1, [r6, #1]
 8016f14:	4638      	mov	r0, r7
 8016f16:	f7f5 fd4d 	bl	800c9b4 <ucdr_serialize_uint8_t>
 8016f1a:	4004      	ands	r4, r0
 8016f1c:	78b1      	ldrb	r1, [r6, #2]
 8016f1e:	4638      	mov	r0, r7
 8016f20:	f7f5 fd1a 	bl	800c958 <ucdr_serialize_bool>
 8016f24:	78b3      	ldrb	r3, [r6, #2]
 8016f26:	b2e4      	uxtb	r4, r4
 8016f28:	4004      	ands	r4, r0
 8016f2a:	b943      	cbnz	r3, 8016f3e <uxr_serialize_ReadSpecification+0x3a>
 8016f2c:	7a31      	ldrb	r1, [r6, #8]
 8016f2e:	4638      	mov	r0, r7
 8016f30:	f7f5 fd12 	bl	800c958 <ucdr_serialize_bool>
 8016f34:	7a33      	ldrb	r3, [r6, #8]
 8016f36:	4004      	ands	r4, r0
 8016f38:	b93b      	cbnz	r3, 8016f4a <uxr_serialize_ReadSpecification+0x46>
 8016f3a:	4620      	mov	r0, r4
 8016f3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016f3e:	6871      	ldr	r1, [r6, #4]
 8016f40:	4638      	mov	r0, r7
 8016f42:	f001 f9f5 	bl	8018330 <ucdr_serialize_string>
 8016f46:	4004      	ands	r4, r0
 8016f48:	e7f0      	b.n	8016f2c <uxr_serialize_ReadSpecification+0x28>
 8016f4a:	8971      	ldrh	r1, [r6, #10]
 8016f4c:	4638      	mov	r0, r7
 8016f4e:	f7f5 fd5d 	bl	800ca0c <ucdr_serialize_uint16_t>
 8016f52:	4605      	mov	r5, r0
 8016f54:	89b1      	ldrh	r1, [r6, #12]
 8016f56:	4638      	mov	r0, r7
 8016f58:	f7f5 fd58 	bl	800ca0c <ucdr_serialize_uint16_t>
 8016f5c:	4005      	ands	r5, r0
 8016f5e:	89f1      	ldrh	r1, [r6, #14]
 8016f60:	4638      	mov	r0, r7
 8016f62:	b2ed      	uxtb	r5, r5
 8016f64:	f7f5 fd52 	bl	800ca0c <ucdr_serialize_uint16_t>
 8016f68:	8a31      	ldrh	r1, [r6, #16]
 8016f6a:	4025      	ands	r5, r4
 8016f6c:	4604      	mov	r4, r0
 8016f6e:	4638      	mov	r0, r7
 8016f70:	4025      	ands	r5, r4
 8016f72:	f7f5 fd4b 	bl	800ca0c <ucdr_serialize_uint16_t>
 8016f76:	ea00 0405 	and.w	r4, r0, r5
 8016f7a:	4620      	mov	r0, r4
 8016f7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016f7e:	bf00      	nop

08016f80 <uxr_serialize_CREATE_CLIENT_Payload>:
 8016f80:	f7ff bc2c 	b.w	80167dc <uxr_serialize_CLIENT_Representation>

08016f84 <uxr_serialize_CREATE_Payload>:
 8016f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016f86:	2202      	movs	r2, #2
 8016f88:	4607      	mov	r7, r0
 8016f8a:	460e      	mov	r6, r1
 8016f8c:	f7f5 fc18 	bl	800c7c0 <ucdr_serialize_array_uint8_t>
 8016f90:	2202      	movs	r2, #2
 8016f92:	4605      	mov	r5, r0
 8016f94:	4638      	mov	r0, r7
 8016f96:	18b1      	adds	r1, r6, r2
 8016f98:	f7f5 fc12 	bl	800c7c0 <ucdr_serialize_array_uint8_t>
 8016f9c:	7931      	ldrb	r1, [r6, #4]
 8016f9e:	4604      	mov	r4, r0
 8016fa0:	4638      	mov	r0, r7
 8016fa2:	f7f5 fd07 	bl	800c9b4 <ucdr_serialize_uint8_t>
 8016fa6:	b170      	cbz	r0, 8016fc6 <uxr_serialize_CREATE_Payload+0x42>
 8016fa8:	7933      	ldrb	r3, [r6, #4]
 8016faa:	402c      	ands	r4, r5
 8016fac:	3b01      	subs	r3, #1
 8016fae:	b2e4      	uxtb	r4, r4
 8016fb0:	2b0d      	cmp	r3, #13
 8016fb2:	d809      	bhi.n	8016fc8 <uxr_serialize_CREATE_Payload+0x44>
 8016fb4:	e8df f003 	tbb	[pc, r3]
 8016fb8:	23230a4c 	.word	0x23230a4c
 8016fbc:	0a0a0a0a 	.word	0x0a0a0a0a
 8016fc0:	12121208 	.word	0x12121208
 8016fc4:	3e45      	.short	0x3e45
 8016fc6:	2400      	movs	r4, #0
 8016fc8:	4620      	mov	r0, r4
 8016fca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016fcc:	f106 0108 	add.w	r1, r6, #8
 8016fd0:	4638      	mov	r0, r7
 8016fd2:	f7ff fd09 	bl	80169e8 <uxr_serialize_DATAWRITER_Representation>
 8016fd6:	4004      	ands	r4, r0
 8016fd8:	4620      	mov	r0, r4
 8016fda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016fdc:	7a31      	ldrb	r1, [r6, #8]
 8016fde:	4638      	mov	r0, r7
 8016fe0:	f7f5 fce8 	bl	800c9b4 <ucdr_serialize_uint8_t>
 8016fe4:	2800      	cmp	r0, #0
 8016fe6:	d0ee      	beq.n	8016fc6 <uxr_serialize_CREATE_Payload+0x42>
 8016fe8:	7a33      	ldrb	r3, [r6, #8]
 8016fea:	2b01      	cmp	r3, #1
 8016fec:	d001      	beq.n	8016ff2 <uxr_serialize_CREATE_Payload+0x6e>
 8016fee:	2b02      	cmp	r3, #2
 8016ff0:	d1ea      	bne.n	8016fc8 <uxr_serialize_CREATE_Payload+0x44>
 8016ff2:	68f1      	ldr	r1, [r6, #12]
 8016ff4:	4638      	mov	r0, r7
 8016ff6:	f001 f99b 	bl	8018330 <ucdr_serialize_string>
 8016ffa:	4004      	ands	r4, r0
 8016ffc:	e7e4      	b.n	8016fc8 <uxr_serialize_CREATE_Payload+0x44>
 8016ffe:	7a31      	ldrb	r1, [r6, #8]
 8017000:	4638      	mov	r0, r7
 8017002:	f7f5 fcd7 	bl	800c9b4 <ucdr_serialize_uint8_t>
 8017006:	4605      	mov	r5, r0
 8017008:	b158      	cbz	r0, 8017022 <uxr_serialize_CREATE_Payload+0x9e>
 801700a:	7a33      	ldrb	r3, [r6, #8]
 801700c:	2b02      	cmp	r3, #2
 801700e:	d034      	beq.n	801707a <uxr_serialize_CREATE_Payload+0xf6>
 8017010:	2b03      	cmp	r3, #3
 8017012:	d106      	bne.n	8017022 <uxr_serialize_CREATE_Payload+0x9e>
 8017014:	68f2      	ldr	r2, [r6, #12]
 8017016:	f106 0110 	add.w	r1, r6, #16
 801701a:	4638      	mov	r0, r7
 801701c:	f7f6 ffd4 	bl	800dfc8 <ucdr_serialize_sequence_uint8_t>
 8017020:	4605      	mov	r5, r0
 8017022:	2202      	movs	r2, #2
 8017024:	f506 7104 	add.w	r1, r6, #528	; 0x210
 8017028:	4638      	mov	r0, r7
 801702a:	f7f5 fbc9 	bl	800c7c0 <ucdr_serialize_array_uint8_t>
 801702e:	4028      	ands	r0, r5
 8017030:	4004      	ands	r4, r0
 8017032:	e7c9      	b.n	8016fc8 <uxr_serialize_CREATE_Payload+0x44>
 8017034:	f106 0108 	add.w	r1, r6, #8
 8017038:	4638      	mov	r0, r7
 801703a:	f7ff fbcf 	bl	80167dc <uxr_serialize_CLIENT_Representation>
 801703e:	4004      	ands	r4, r0
 8017040:	e7c2      	b.n	8016fc8 <uxr_serialize_CREATE_Payload+0x44>
 8017042:	f106 0108 	add.w	r1, r6, #8
 8017046:	4638      	mov	r0, r7
 8017048:	f7ff fc84 	bl	8016954 <uxr_serialize_AGENT_Representation>
 801704c:	4004      	ands	r4, r0
 801704e:	e7bb      	b.n	8016fc8 <uxr_serialize_CREATE_Payload+0x44>
 8017050:	7a31      	ldrb	r1, [r6, #8]
 8017052:	4638      	mov	r0, r7
 8017054:	f7f5 fcae 	bl	800c9b4 <ucdr_serialize_uint8_t>
 8017058:	4605      	mov	r5, r0
 801705a:	b130      	cbz	r0, 801706a <uxr_serialize_CREATE_Payload+0xe6>
 801705c:	7a33      	ldrb	r3, [r6, #8]
 801705e:	2b02      	cmp	r3, #2
 8017060:	d011      	beq.n	8017086 <uxr_serialize_CREATE_Payload+0x102>
 8017062:	2b03      	cmp	r3, #3
 8017064:	d015      	beq.n	8017092 <uxr_serialize_CREATE_Payload+0x10e>
 8017066:	2b01      	cmp	r3, #1
 8017068:	d00d      	beq.n	8017086 <uxr_serialize_CREATE_Payload+0x102>
 801706a:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	; 0x210
 801706e:	4638      	mov	r0, r7
 8017070:	f7f6 f9dc 	bl	800d42c <ucdr_serialize_int16_t>
 8017074:	4028      	ands	r0, r5
 8017076:	4004      	ands	r4, r0
 8017078:	e7a6      	b.n	8016fc8 <uxr_serialize_CREATE_Payload+0x44>
 801707a:	68f1      	ldr	r1, [r6, #12]
 801707c:	4638      	mov	r0, r7
 801707e:	f001 f957 	bl	8018330 <ucdr_serialize_string>
 8017082:	4605      	mov	r5, r0
 8017084:	e7cd      	b.n	8017022 <uxr_serialize_CREATE_Payload+0x9e>
 8017086:	68f1      	ldr	r1, [r6, #12]
 8017088:	4638      	mov	r0, r7
 801708a:	f001 f951 	bl	8018330 <ucdr_serialize_string>
 801708e:	4605      	mov	r5, r0
 8017090:	e7eb      	b.n	801706a <uxr_serialize_CREATE_Payload+0xe6>
 8017092:	68f2      	ldr	r2, [r6, #12]
 8017094:	f106 0110 	add.w	r1, r6, #16
 8017098:	4638      	mov	r0, r7
 801709a:	f7f6 ff95 	bl	800dfc8 <ucdr_serialize_sequence_uint8_t>
 801709e:	4605      	mov	r5, r0
 80170a0:	e7e3      	b.n	801706a <uxr_serialize_CREATE_Payload+0xe6>
 80170a2:	bf00      	nop

080170a4 <uxr_deserialize_GET_INFO_Payload>:
 80170a4:	b570      	push	{r4, r5, r6, lr}
 80170a6:	2202      	movs	r2, #2
 80170a8:	4605      	mov	r5, r0
 80170aa:	460e      	mov	r6, r1
 80170ac:	f7f5 fbec 	bl	800c888 <ucdr_deserialize_array_uint8_t>
 80170b0:	2202      	movs	r2, #2
 80170b2:	4604      	mov	r4, r0
 80170b4:	4628      	mov	r0, r5
 80170b6:	18b1      	adds	r1, r6, r2
 80170b8:	f7f5 fbe6 	bl	800c888 <ucdr_deserialize_array_uint8_t>
 80170bc:	4603      	mov	r3, r0
 80170be:	1d31      	adds	r1, r6, #4
 80170c0:	4628      	mov	r0, r5
 80170c2:	401c      	ands	r4, r3
 80170c4:	f7f5 ffbc 	bl	800d040 <ucdr_deserialize_uint32_t>
 80170c8:	b2e4      	uxtb	r4, r4
 80170ca:	4020      	ands	r0, r4
 80170cc:	bd70      	pop	{r4, r5, r6, pc}
 80170ce:	bf00      	nop

080170d0 <uxr_serialize_DELETE_Payload>:
 80170d0:	b570      	push	{r4, r5, r6, lr}
 80170d2:	2202      	movs	r2, #2
 80170d4:	4605      	mov	r5, r0
 80170d6:	460e      	mov	r6, r1
 80170d8:	f7f5 fb72 	bl	800c7c0 <ucdr_serialize_array_uint8_t>
 80170dc:	2202      	movs	r2, #2
 80170de:	4604      	mov	r4, r0
 80170e0:	4628      	mov	r0, r5
 80170e2:	18b1      	adds	r1, r6, r2
 80170e4:	f7f5 fb6c 	bl	800c7c0 <ucdr_serialize_array_uint8_t>
 80170e8:	4020      	ands	r0, r4
 80170ea:	b2c0      	uxtb	r0, r0
 80170ec:	bd70      	pop	{r4, r5, r6, pc}
 80170ee:	bf00      	nop

080170f0 <uxr_deserialize_STATUS_AGENT_Payload>:
 80170f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80170f4:	460e      	mov	r6, r1
 80170f6:	4605      	mov	r5, r0
 80170f8:	f7f5 fc72 	bl	800c9e0 <ucdr_deserialize_uint8_t>
 80170fc:	4604      	mov	r4, r0
 80170fe:	1c71      	adds	r1, r6, #1
 8017100:	4628      	mov	r0, r5
 8017102:	f7f5 fc6d 	bl	800c9e0 <ucdr_deserialize_uint8_t>
 8017106:	2204      	movs	r2, #4
 8017108:	4681      	mov	r9, r0
 801710a:	4628      	mov	r0, r5
 801710c:	18b1      	adds	r1, r6, r2
 801710e:	f7f5 fbbb 	bl	800c888 <ucdr_deserialize_array_uint8_t>
 8017112:	f106 0108 	add.w	r1, r6, #8
 8017116:	4680      	mov	r8, r0
 8017118:	2202      	movs	r2, #2
 801711a:	4628      	mov	r0, r5
 801711c:	f7f5 fbb4 	bl	800c888 <ucdr_deserialize_array_uint8_t>
 8017120:	ea04 0309 	and.w	r3, r4, r9
 8017124:	4607      	mov	r7, r0
 8017126:	2202      	movs	r2, #2
 8017128:	b2db      	uxtb	r3, r3
 801712a:	f106 010a 	add.w	r1, r6, #10
 801712e:	4628      	mov	r0, r5
 8017130:	ea03 0408 	and.w	r4, r3, r8
 8017134:	f7f5 fba8 	bl	800c888 <ucdr_deserialize_array_uint8_t>
 8017138:	4603      	mov	r3, r0
 801713a:	4628      	mov	r0, r5
 801713c:	403c      	ands	r4, r7
 801713e:	f106 010c 	add.w	r1, r6, #12
 8017142:	461d      	mov	r5, r3
 8017144:	f7f5 fc1e 	bl	800c984 <ucdr_deserialize_bool>
 8017148:	4025      	ands	r5, r4
 801714a:	4028      	ands	r0, r5
 801714c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08017150 <uxr_deserialize_STATUS_Payload>:
 8017150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017154:	2202      	movs	r2, #2
 8017156:	4606      	mov	r6, r0
 8017158:	460f      	mov	r7, r1
 801715a:	f7f5 fb95 	bl	800c888 <ucdr_deserialize_array_uint8_t>
 801715e:	2202      	movs	r2, #2
 8017160:	4605      	mov	r5, r0
 8017162:	4630      	mov	r0, r6
 8017164:	18b9      	adds	r1, r7, r2
 8017166:	f7f5 fb8f 	bl	800c888 <ucdr_deserialize_array_uint8_t>
 801716a:	4680      	mov	r8, r0
 801716c:	1d39      	adds	r1, r7, #4
 801716e:	4630      	mov	r0, r6
 8017170:	f7f5 fc36 	bl	800c9e0 <ucdr_deserialize_uint8_t>
 8017174:	ea05 0508 	and.w	r5, r5, r8
 8017178:	4604      	mov	r4, r0
 801717a:	1d79      	adds	r1, r7, #5
 801717c:	4630      	mov	r0, r6
 801717e:	402c      	ands	r4, r5
 8017180:	f7f5 fc2e 	bl	800c9e0 <ucdr_deserialize_uint8_t>
 8017184:	4020      	ands	r0, r4
 8017186:	b2c0      	uxtb	r0, r0
 8017188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801718c <uxr_serialize_INFO_Payload>:
 801718c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017190:	2202      	movs	r2, #2
 8017192:	460c      	mov	r4, r1
 8017194:	4605      	mov	r5, r0
 8017196:	f7f5 fb13 	bl	800c7c0 <ucdr_serialize_array_uint8_t>
 801719a:	2202      	movs	r2, #2
 801719c:	4680      	mov	r8, r0
 801719e:	4628      	mov	r0, r5
 80171a0:	18a1      	adds	r1, r4, r2
 80171a2:	f7f5 fb0d 	bl	800c7c0 <ucdr_serialize_array_uint8_t>
 80171a6:	4607      	mov	r7, r0
 80171a8:	7921      	ldrb	r1, [r4, #4]
 80171aa:	4628      	mov	r0, r5
 80171ac:	f7f5 fc02 	bl	800c9b4 <ucdr_serialize_uint8_t>
 80171b0:	ea08 0807 	and.w	r8, r8, r7
 80171b4:	4606      	mov	r6, r0
 80171b6:	7961      	ldrb	r1, [r4, #5]
 80171b8:	4628      	mov	r0, r5
 80171ba:	ea06 0608 	and.w	r6, r6, r8
 80171be:	f7f5 fbf9 	bl	800c9b4 <ucdr_serialize_uint8_t>
 80171c2:	7a21      	ldrb	r1, [r4, #8]
 80171c4:	4030      	ands	r0, r6
 80171c6:	b2c7      	uxtb	r7, r0
 80171c8:	4628      	mov	r0, r5
 80171ca:	f7f5 fbc5 	bl	800c958 <ucdr_serialize_bool>
 80171ce:	7a23      	ldrb	r3, [r4, #8]
 80171d0:	4606      	mov	r6, r0
 80171d2:	b96b      	cbnz	r3, 80171f0 <uxr_serialize_INFO_Payload+0x64>
 80171d4:	f894 121c 	ldrb.w	r1, [r4, #540]	; 0x21c
 80171d8:	4628      	mov	r0, r5
 80171da:	f7f5 fbbd 	bl	800c958 <ucdr_serialize_bool>
 80171de:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
 80171e2:	4030      	ands	r0, r6
 80171e4:	b2c6      	uxtb	r6, r0
 80171e6:	b983      	cbnz	r3, 801720a <uxr_serialize_INFO_Payload+0x7e>
 80171e8:	ea06 0007 	and.w	r0, r6, r7
 80171ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80171f0:	7b21      	ldrb	r1, [r4, #12]
 80171f2:	4628      	mov	r0, r5
 80171f4:	f7f5 fbde 	bl	800c9b4 <ucdr_serialize_uint8_t>
 80171f8:	b188      	cbz	r0, 801721e <uxr_serialize_INFO_Payload+0x92>
 80171fa:	f104 010c 	add.w	r1, r4, #12
 80171fe:	4628      	mov	r0, r5
 8017200:	f7ff fc1a 	bl	8016a38 <uxr_serialize_ObjectVariant.part.0>
 8017204:	4030      	ands	r0, r6
 8017206:	b2c6      	uxtb	r6, r0
 8017208:	e7e4      	b.n	80171d4 <uxr_serialize_INFO_Payload+0x48>
 801720a:	f504 7108 	add.w	r1, r4, #544	; 0x220
 801720e:	4628      	mov	r0, r5
 8017210:	f7ff fdb8 	bl	8016d84 <uxr_serialize_ActivityInfoVariant>
 8017214:	4006      	ands	r6, r0
 8017216:	ea06 0007 	and.w	r0, r6, r7
 801721a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801721e:	4606      	mov	r6, r0
 8017220:	e7d8      	b.n	80171d4 <uxr_serialize_INFO_Payload+0x48>
 8017222:	bf00      	nop

08017224 <uxr_serialize_READ_DATA_Payload>:
 8017224:	b570      	push	{r4, r5, r6, lr}
 8017226:	2202      	movs	r2, #2
 8017228:	4605      	mov	r5, r0
 801722a:	460e      	mov	r6, r1
 801722c:	f7f5 fac8 	bl	800c7c0 <ucdr_serialize_array_uint8_t>
 8017230:	2202      	movs	r2, #2
 8017232:	4604      	mov	r4, r0
 8017234:	4628      	mov	r0, r5
 8017236:	18b1      	adds	r1, r6, r2
 8017238:	f7f5 fac2 	bl	800c7c0 <ucdr_serialize_array_uint8_t>
 801723c:	4603      	mov	r3, r0
 801723e:	1d31      	adds	r1, r6, #4
 8017240:	4628      	mov	r0, r5
 8017242:	401c      	ands	r4, r3
 8017244:	f7ff fe5e 	bl	8016f04 <uxr_serialize_ReadSpecification>
 8017248:	b2e4      	uxtb	r4, r4
 801724a:	4020      	ands	r0, r4
 801724c:	bd70      	pop	{r4, r5, r6, pc}
 801724e:	bf00      	nop

08017250 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8017250:	b570      	push	{r4, r5, r6, lr}
 8017252:	2202      	movs	r2, #2
 8017254:	4605      	mov	r5, r0
 8017256:	460e      	mov	r6, r1
 8017258:	f7f5 fab2 	bl	800c7c0 <ucdr_serialize_array_uint8_t>
 801725c:	2202      	movs	r2, #2
 801725e:	4604      	mov	r4, r0
 8017260:	4628      	mov	r0, r5
 8017262:	18b1      	adds	r1, r6, r2
 8017264:	f7f5 faac 	bl	800c7c0 <ucdr_serialize_array_uint8_t>
 8017268:	4020      	ands	r0, r4
 801726a:	b2c0      	uxtb	r0, r0
 801726c:	bd70      	pop	{r4, r5, r6, pc}
 801726e:	bf00      	nop

08017270 <uxr_serialize_ACKNACK_Payload>:
 8017270:	b570      	push	{r4, r5, r6, lr}
 8017272:	460c      	mov	r4, r1
 8017274:	4605      	mov	r5, r0
 8017276:	460e      	mov	r6, r1
 8017278:	f834 1b02 	ldrh.w	r1, [r4], #2
 801727c:	f7f5 fbc6 	bl	800ca0c <ucdr_serialize_uint16_t>
 8017280:	2202      	movs	r2, #2
 8017282:	4621      	mov	r1, r4
 8017284:	4604      	mov	r4, r0
 8017286:	4628      	mov	r0, r5
 8017288:	f7f5 fa9a 	bl	800c7c0 <ucdr_serialize_array_uint8_t>
 801728c:	4603      	mov	r3, r0
 801728e:	7931      	ldrb	r1, [r6, #4]
 8017290:	4628      	mov	r0, r5
 8017292:	401c      	ands	r4, r3
 8017294:	f7f5 fb8e 	bl	800c9b4 <ucdr_serialize_uint8_t>
 8017298:	b2e4      	uxtb	r4, r4
 801729a:	4020      	ands	r0, r4
 801729c:	bd70      	pop	{r4, r5, r6, pc}
 801729e:	bf00      	nop

080172a0 <uxr_deserialize_ACKNACK_Payload>:
 80172a0:	b570      	push	{r4, r5, r6, lr}
 80172a2:	460e      	mov	r6, r1
 80172a4:	4605      	mov	r5, r0
 80172a6:	f7f5 fcb1 	bl	800cc0c <ucdr_deserialize_uint16_t>
 80172aa:	2202      	movs	r2, #2
 80172ac:	4604      	mov	r4, r0
 80172ae:	4628      	mov	r0, r5
 80172b0:	18b1      	adds	r1, r6, r2
 80172b2:	f7f5 fae9 	bl	800c888 <ucdr_deserialize_array_uint8_t>
 80172b6:	4603      	mov	r3, r0
 80172b8:	1d31      	adds	r1, r6, #4
 80172ba:	4628      	mov	r0, r5
 80172bc:	401c      	ands	r4, r3
 80172be:	f7f5 fb8f 	bl	800c9e0 <ucdr_deserialize_uint8_t>
 80172c2:	b2e4      	uxtb	r4, r4
 80172c4:	4020      	ands	r0, r4
 80172c6:	bd70      	pop	{r4, r5, r6, pc}

080172c8 <uxr_serialize_HEARTBEAT_Payload>:
 80172c8:	b570      	push	{r4, r5, r6, lr}
 80172ca:	460d      	mov	r5, r1
 80172cc:	4606      	mov	r6, r0
 80172ce:	8809      	ldrh	r1, [r1, #0]
 80172d0:	f7f5 fb9c 	bl	800ca0c <ucdr_serialize_uint16_t>
 80172d4:	8869      	ldrh	r1, [r5, #2]
 80172d6:	4604      	mov	r4, r0
 80172d8:	4630      	mov	r0, r6
 80172da:	f7f5 fb97 	bl	800ca0c <ucdr_serialize_uint16_t>
 80172de:	4603      	mov	r3, r0
 80172e0:	7929      	ldrb	r1, [r5, #4]
 80172e2:	4630      	mov	r0, r6
 80172e4:	401c      	ands	r4, r3
 80172e6:	f7f5 fb65 	bl	800c9b4 <ucdr_serialize_uint8_t>
 80172ea:	b2e4      	uxtb	r4, r4
 80172ec:	4020      	ands	r0, r4
 80172ee:	bd70      	pop	{r4, r5, r6, pc}

080172f0 <uxr_deserialize_HEARTBEAT_Payload>:
 80172f0:	b570      	push	{r4, r5, r6, lr}
 80172f2:	460e      	mov	r6, r1
 80172f4:	4605      	mov	r5, r0
 80172f6:	f7f5 fc89 	bl	800cc0c <ucdr_deserialize_uint16_t>
 80172fa:	4604      	mov	r4, r0
 80172fc:	1cb1      	adds	r1, r6, #2
 80172fe:	4628      	mov	r0, r5
 8017300:	f7f5 fc84 	bl	800cc0c <ucdr_deserialize_uint16_t>
 8017304:	4603      	mov	r3, r0
 8017306:	1d31      	adds	r1, r6, #4
 8017308:	4628      	mov	r0, r5
 801730a:	401c      	ands	r4, r3
 801730c:	f7f5 fb68 	bl	800c9e0 <ucdr_deserialize_uint8_t>
 8017310:	b2e4      	uxtb	r4, r4
 8017312:	4020      	ands	r0, r4
 8017314:	bd70      	pop	{r4, r5, r6, pc}
 8017316:	bf00      	nop

08017318 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8017318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801731c:	460e      	mov	r6, r1
 801731e:	4605      	mov	r5, r0
 8017320:	f7f6 fa10 	bl	800d744 <ucdr_deserialize_int32_t>
 8017324:	4607      	mov	r7, r0
 8017326:	1d31      	adds	r1, r6, #4
 8017328:	4628      	mov	r0, r5
 801732a:	f7f5 fe89 	bl	800d040 <ucdr_deserialize_uint32_t>
 801732e:	4680      	mov	r8, r0
 8017330:	f106 0108 	add.w	r1, r6, #8
 8017334:	4628      	mov	r0, r5
 8017336:	f7f6 fa05 	bl	800d744 <ucdr_deserialize_int32_t>
 801733a:	ea07 0708 	and.w	r7, r7, r8
 801733e:	4604      	mov	r4, r0
 8017340:	f106 010c 	add.w	r1, r6, #12
 8017344:	4628      	mov	r0, r5
 8017346:	403c      	ands	r4, r7
 8017348:	f7f5 fe7a 	bl	800d040 <ucdr_deserialize_uint32_t>
 801734c:	f106 0110 	add.w	r1, r6, #16
 8017350:	4004      	ands	r4, r0
 8017352:	4628      	mov	r0, r5
 8017354:	f7f6 f9f6 	bl	800d744 <ucdr_deserialize_int32_t>
 8017358:	4603      	mov	r3, r0
 801735a:	b2e4      	uxtb	r4, r4
 801735c:	4628      	mov	r0, r5
 801735e:	461d      	mov	r5, r3
 8017360:	f106 0114 	add.w	r1, r6, #20
 8017364:	f7f5 fe6c 	bl	800d040 <ucdr_deserialize_uint32_t>
 8017368:	402c      	ands	r4, r5
 801736a:	4020      	ands	r0, r4
 801736c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017370 <uxr_serialize_SampleIdentity>:
 8017370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017374:	4604      	mov	r4, r0
 8017376:	460d      	mov	r5, r1
 8017378:	220c      	movs	r2, #12
 801737a:	f7f5 fa21 	bl	800c7c0 <ucdr_serialize_array_uint8_t>
 801737e:	2203      	movs	r2, #3
 8017380:	f105 010c 	add.w	r1, r5, #12
 8017384:	4607      	mov	r7, r0
 8017386:	4620      	mov	r0, r4
 8017388:	f7f5 fa1a 	bl	800c7c0 <ucdr_serialize_array_uint8_t>
 801738c:	7be9      	ldrb	r1, [r5, #15]
 801738e:	4680      	mov	r8, r0
 8017390:	4620      	mov	r0, r4
 8017392:	f7f5 fb0f 	bl	800c9b4 <ucdr_serialize_uint8_t>
 8017396:	6929      	ldr	r1, [r5, #16]
 8017398:	4606      	mov	r6, r0
 801739a:	4620      	mov	r0, r4
 801739c:	f7f6 f93a 	bl	800d614 <ucdr_serialize_int32_t>
 80173a0:	ea07 0708 	and.w	r7, r7, r8
 80173a4:	4603      	mov	r3, r0
 80173a6:	4620      	mov	r0, r4
 80173a8:	403e      	ands	r6, r7
 80173aa:	6969      	ldr	r1, [r5, #20]
 80173ac:	461c      	mov	r4, r3
 80173ae:	f7f5 fd17 	bl	800cde0 <ucdr_serialize_uint32_t>
 80173b2:	4034      	ands	r4, r6
 80173b4:	4020      	ands	r0, r4
 80173b6:	b2c0      	uxtb	r0, r0
 80173b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080173bc <uxr_deserialize_SampleIdentity>:
 80173bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80173c0:	4604      	mov	r4, r0
 80173c2:	460d      	mov	r5, r1
 80173c4:	220c      	movs	r2, #12
 80173c6:	f7f5 fa5f 	bl	800c888 <ucdr_deserialize_array_uint8_t>
 80173ca:	2203      	movs	r2, #3
 80173cc:	f105 010c 	add.w	r1, r5, #12
 80173d0:	4607      	mov	r7, r0
 80173d2:	4620      	mov	r0, r4
 80173d4:	f7f5 fa58 	bl	800c888 <ucdr_deserialize_array_uint8_t>
 80173d8:	f105 010f 	add.w	r1, r5, #15
 80173dc:	4680      	mov	r8, r0
 80173de:	4620      	mov	r0, r4
 80173e0:	f7f5 fafe 	bl	800c9e0 <ucdr_deserialize_uint8_t>
 80173e4:	f105 0110 	add.w	r1, r5, #16
 80173e8:	4606      	mov	r6, r0
 80173ea:	4620      	mov	r0, r4
 80173ec:	f7f6 f9aa 	bl	800d744 <ucdr_deserialize_int32_t>
 80173f0:	ea07 0708 	and.w	r7, r7, r8
 80173f4:	4603      	mov	r3, r0
 80173f6:	4620      	mov	r0, r4
 80173f8:	403e      	ands	r6, r7
 80173fa:	f105 0114 	add.w	r1, r5, #20
 80173fe:	461c      	mov	r4, r3
 8017400:	f7f5 fe1e 	bl	800d040 <ucdr_deserialize_uint32_t>
 8017404:	4034      	ands	r4, r6
 8017406:	4020      	ands	r0, r4
 8017408:	b2c0      	uxtb	r0, r0
 801740a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801740e:	bf00      	nop

08017410 <rcl_get_automatic_discovery_range>:
 8017410:	b530      	push	{r4, r5, lr}
 8017412:	2300      	movs	r3, #0
 8017414:	b083      	sub	sp, #12
 8017416:	9301      	str	r3, [sp, #4]
 8017418:	b1c0      	cbz	r0, 801744c <rcl_get_automatic_discovery_range+0x3c>
 801741a:	4604      	mov	r4, r0
 801741c:	a901      	add	r1, sp, #4
 801741e:	4818      	ldr	r0, [pc, #96]	; (8017480 <rcl_get_automatic_discovery_range+0x70>)
 8017420:	f7fa fcda 	bl	8011dd8 <rcutils_get_env>
 8017424:	b110      	cbz	r0, 801742c <rcl_get_automatic_discovery_range+0x1c>
 8017426:	2001      	movs	r0, #1
 8017428:	b003      	add	sp, #12
 801742a:	bd30      	pop	{r4, r5, pc}
 801742c:	9d01      	ldr	r5, [sp, #4]
 801742e:	782b      	ldrb	r3, [r5, #0]
 8017430:	b13b      	cbz	r3, 8017442 <rcl_get_automatic_discovery_range+0x32>
 8017432:	4914      	ldr	r1, [pc, #80]	; (8017484 <rcl_get_automatic_discovery_range+0x74>)
 8017434:	4628      	mov	r0, r5
 8017436:	f7e8 ff03 	bl	8000240 <strcmp>
 801743a:	b950      	cbnz	r0, 8017452 <rcl_get_automatic_discovery_range+0x42>
 801743c:	2301      	movs	r3, #1
 801743e:	7023      	strb	r3, [r4, #0]
 8017440:	e7f2      	b.n	8017428 <rcl_get_automatic_discovery_range+0x18>
 8017442:	2303      	movs	r3, #3
 8017444:	2000      	movs	r0, #0
 8017446:	7023      	strb	r3, [r4, #0]
 8017448:	b003      	add	sp, #12
 801744a:	bd30      	pop	{r4, r5, pc}
 801744c:	200b      	movs	r0, #11
 801744e:	b003      	add	sp, #12
 8017450:	bd30      	pop	{r4, r5, pc}
 8017452:	490d      	ldr	r1, [pc, #52]	; (8017488 <rcl_get_automatic_discovery_range+0x78>)
 8017454:	4628      	mov	r0, r5
 8017456:	f7e8 fef3 	bl	8000240 <strcmp>
 801745a:	b168      	cbz	r0, 8017478 <rcl_get_automatic_discovery_range+0x68>
 801745c:	490b      	ldr	r1, [pc, #44]	; (801748c <rcl_get_automatic_discovery_range+0x7c>)
 801745e:	4628      	mov	r0, r5
 8017460:	f7e8 feee 	bl	8000240 <strcmp>
 8017464:	2800      	cmp	r0, #0
 8017466:	d0ec      	beq.n	8017442 <rcl_get_automatic_discovery_range+0x32>
 8017468:	4909      	ldr	r1, [pc, #36]	; (8017490 <rcl_get_automatic_discovery_range+0x80>)
 801746a:	4628      	mov	r0, r5
 801746c:	f7e8 fee8 	bl	8000240 <strcmp>
 8017470:	b910      	cbnz	r0, 8017478 <rcl_get_automatic_discovery_range+0x68>
 8017472:	2304      	movs	r3, #4
 8017474:	7023      	strb	r3, [r4, #0]
 8017476:	e7d7      	b.n	8017428 <rcl_get_automatic_discovery_range+0x18>
 8017478:	2302      	movs	r3, #2
 801747a:	2000      	movs	r0, #0
 801747c:	7023      	strb	r3, [r4, #0]
 801747e:	e7d3      	b.n	8017428 <rcl_get_automatic_discovery_range+0x18>
 8017480:	0801bd40 	.word	0x0801bd40
 8017484:	0801bd60 	.word	0x0801bd60
 8017488:	0801bd64 	.word	0x0801bd64
 801748c:	0801bd70 	.word	0x0801bd70
 8017490:	0801bd78 	.word	0x0801bd78

08017494 <rcl_automatic_discovery_range_to_string>:
 8017494:	2804      	cmp	r0, #4
 8017496:	d803      	bhi.n	80174a0 <rcl_automatic_discovery_range_to_string+0xc>
 8017498:	4b02      	ldr	r3, [pc, #8]	; (80174a4 <rcl_automatic_discovery_range_to_string+0x10>)
 801749a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801749e:	4770      	bx	lr
 80174a0:	2000      	movs	r0, #0
 80174a2:	4770      	bx	lr
 80174a4:	0801be68 	.word	0x0801be68

080174a8 <rcl_get_discovery_static_peers>:
 80174a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80174ac:	2300      	movs	r3, #0
 80174ae:	b08e      	sub	sp, #56	; 0x38
 80174b0:	9306      	str	r3, [sp, #24]
 80174b2:	2900      	cmp	r1, #0
 80174b4:	d04b      	beq.n	801754e <rcl_get_discovery_static_peers+0xa6>
 80174b6:	4605      	mov	r5, r0
 80174b8:	2800      	cmp	r0, #0
 80174ba:	d048      	beq.n	801754e <rcl_get_discovery_static_peers+0xa6>
 80174bc:	460c      	mov	r4, r1
 80174be:	482c      	ldr	r0, [pc, #176]	; (8017570 <rcl_get_discovery_static_peers+0xc8>)
 80174c0:	a906      	add	r1, sp, #24
 80174c2:	f7fa fc89 	bl	8011dd8 <rcutils_get_env>
 80174c6:	b118      	cbz	r0, 80174d0 <rcl_get_discovery_static_peers+0x28>
 80174c8:	2001      	movs	r0, #1
 80174ca:	b00e      	add	sp, #56	; 0x38
 80174cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80174d0:	9b06      	ldr	r3, [sp, #24]
 80174d2:	2b00      	cmp	r3, #0
 80174d4:	d0f8      	beq.n	80174c8 <rcl_get_discovery_static_peers+0x20>
 80174d6:	af07      	add	r7, sp, #28
 80174d8:	4638      	mov	r0, r7
 80174da:	f000 fc5b 	bl	8017d94 <rcutils_get_zero_initialized_string_array>
 80174de:	f104 0308 	add.w	r3, r4, #8
 80174e2:	9703      	str	r7, [sp, #12]
 80174e4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80174e8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80174ec:	213b      	movs	r1, #59	; 0x3b
 80174ee:	9806      	ldr	r0, [sp, #24]
 80174f0:	e894 000c 	ldmia.w	r4, {r2, r3}
 80174f4:	f000 fb90 	bl	8017c18 <rcutils_split>
 80174f8:	2800      	cmp	r0, #0
 80174fa:	d1e5      	bne.n	80174c8 <rcl_get_discovery_static_peers+0x20>
 80174fc:	4622      	mov	r2, r4
 80174fe:	9907      	ldr	r1, [sp, #28]
 8017500:	4628      	mov	r0, r5
 8017502:	f000 fc97 	bl	8017e34 <rmw_discovery_options_init>
 8017506:	4604      	mov	r4, r0
 8017508:	bb78      	cbnz	r0, 801756a <rcl_get_discovery_static_peers+0xc2>
 801750a:	9e07      	ldr	r6, [sp, #28]
 801750c:	b336      	cbz	r6, 801755c <rcl_get_discovery_static_peers+0xb4>
 801750e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8017512:	4680      	mov	r8, r0
 8017514:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
 8017518:	ea4f 2904 	mov.w	r9, r4, lsl #8
 801751c:	4608      	mov	r0, r1
 801751e:	9105      	str	r1, [sp, #20]
 8017520:	f7e8 feee 	bl	8000300 <strlen>
 8017524:	28ff      	cmp	r0, #255	; 0xff
 8017526:	9905      	ldr	r1, [sp, #20]
 8017528:	d815      	bhi.n	8017556 <rcl_get_discovery_static_peers+0xae>
 801752a:	6868      	ldr	r0, [r5, #4]
 801752c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8017530:	eb00 2004 	add.w	r0, r0, r4, lsl #8
 8017534:	3401      	adds	r4, #1
 8017536:	f002 f88c 	bl	8019652 <strncpy>
 801753a:	686b      	ldr	r3, [r5, #4]
 801753c:	9e07      	ldr	r6, [sp, #28]
 801753e:	444b      	add	r3, r9
 8017540:	42b4      	cmp	r4, r6
 8017542:	f883 80ff 	strb.w	r8, [r3, #255]	; 0xff
 8017546:	d209      	bcs.n	801755c <rcl_get_discovery_static_peers+0xb4>
 8017548:	f8dd a020 	ldr.w	sl, [sp, #32]
 801754c:	e7e2      	b.n	8017514 <rcl_get_discovery_static_peers+0x6c>
 801754e:	200b      	movs	r0, #11
 8017550:	b00e      	add	sp, #56	; 0x38
 8017552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017556:	3401      	adds	r4, #1
 8017558:	42b4      	cmp	r4, r6
 801755a:	d3db      	bcc.n	8017514 <rcl_get_discovery_static_peers+0x6c>
 801755c:	4638      	mov	r0, r7
 801755e:	f000 fc37 	bl	8017dd0 <rcutils_string_array_fini>
 8017562:	3800      	subs	r0, #0
 8017564:	bf18      	it	ne
 8017566:	2001      	movne	r0, #1
 8017568:	e7af      	b.n	80174ca <rcl_get_discovery_static_peers+0x22>
 801756a:	f7f7 fd53 	bl	800f014 <rcl_convert_rmw_ret_to_rcl_ret>
 801756e:	e7ac      	b.n	80174ca <rcl_get_discovery_static_peers+0x22>
 8017570:	0801bd88 	.word	0x0801bd88

08017574 <rcl_get_default_domain_id>:
 8017574:	b530      	push	{r4, r5, lr}
 8017576:	2300      	movs	r3, #0
 8017578:	b083      	sub	sp, #12
 801757a:	9300      	str	r3, [sp, #0]
 801757c:	b1d0      	cbz	r0, 80175b4 <rcl_get_default_domain_id+0x40>
 801757e:	4604      	mov	r4, r0
 8017580:	4669      	mov	r1, sp
 8017582:	4815      	ldr	r0, [pc, #84]	; (80175d8 <rcl_get_default_domain_id+0x64>)
 8017584:	f7fa fc28 	bl	8011dd8 <rcutils_get_env>
 8017588:	4602      	mov	r2, r0
 801758a:	b110      	cbz	r0, 8017592 <rcl_get_default_domain_id+0x1e>
 801758c:	2001      	movs	r0, #1
 801758e:	b003      	add	sp, #12
 8017590:	bd30      	pop	{r4, r5, pc}
 8017592:	9b00      	ldr	r3, [sp, #0]
 8017594:	b18b      	cbz	r3, 80175ba <rcl_get_default_domain_id+0x46>
 8017596:	7818      	ldrb	r0, [r3, #0]
 8017598:	2800      	cmp	r0, #0
 801759a:	d0f8      	beq.n	801758e <rcl_get_default_domain_id+0x1a>
 801759c:	a901      	add	r1, sp, #4
 801759e:	4618      	mov	r0, r3
 80175a0:	9201      	str	r2, [sp, #4]
 80175a2:	f001 fe89 	bl	80192b8 <strtoul>
 80175a6:	4605      	mov	r5, r0
 80175a8:	b150      	cbz	r0, 80175c0 <rcl_get_default_domain_id+0x4c>
 80175aa:	1c43      	adds	r3, r0, #1
 80175ac:	d00d      	beq.n	80175ca <rcl_get_default_domain_id+0x56>
 80175ae:	2000      	movs	r0, #0
 80175b0:	6025      	str	r5, [r4, #0]
 80175b2:	e7ec      	b.n	801758e <rcl_get_default_domain_id+0x1a>
 80175b4:	200b      	movs	r0, #11
 80175b6:	b003      	add	sp, #12
 80175b8:	bd30      	pop	{r4, r5, pc}
 80175ba:	4618      	mov	r0, r3
 80175bc:	b003      	add	sp, #12
 80175be:	bd30      	pop	{r4, r5, pc}
 80175c0:	9b01      	ldr	r3, [sp, #4]
 80175c2:	781b      	ldrb	r3, [r3, #0]
 80175c4:	2b00      	cmp	r3, #0
 80175c6:	d0f2      	beq.n	80175ae <rcl_get_default_domain_id+0x3a>
 80175c8:	e7e0      	b.n	801758c <rcl_get_default_domain_id+0x18>
 80175ca:	f002 f95b 	bl	8019884 <__errno>
 80175ce:	6803      	ldr	r3, [r0, #0]
 80175d0:	2b22      	cmp	r3, #34	; 0x22
 80175d2:	d1ec      	bne.n	80175ae <rcl_get_default_domain_id+0x3a>
 80175d4:	e7da      	b.n	801758c <rcl_get_default_domain_id+0x18>
 80175d6:	bf00      	nop
 80175d8:	0801be7c 	.word	0x0801be7c

080175dc <rcl_expand_topic_name>:
 80175dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80175e0:	b08d      	sub	sp, #52	; 0x34
 80175e2:	4698      	mov	r8, r3
 80175e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80175e6:	9207      	str	r2, [sp, #28]
 80175e8:	2b00      	cmp	r3, #0
 80175ea:	bf18      	it	ne
 80175ec:	f1b8 0f00 	cmpne.w	r8, #0
 80175f0:	bf0c      	ite	eq
 80175f2:	2301      	moveq	r3, #1
 80175f4:	2300      	movne	r3, #0
 80175f6:	2a00      	cmp	r2, #0
 80175f8:	bf08      	it	eq
 80175fa:	f043 0301 	orreq.w	r3, r3, #1
 80175fe:	2900      	cmp	r1, #0
 8017600:	bf08      	it	eq
 8017602:	f043 0301 	orreq.w	r3, r3, #1
 8017606:	2b00      	cmp	r3, #0
 8017608:	d13d      	bne.n	8017686 <rcl_expand_topic_name+0xaa>
 801760a:	fab0 f280 	clz	r2, r0
 801760e:	4604      	mov	r4, r0
 8017610:	0952      	lsrs	r2, r2, #5
 8017612:	2800      	cmp	r0, #0
 8017614:	d037      	beq.n	8017686 <rcl_expand_topic_name+0xaa>
 8017616:	460f      	mov	r7, r1
 8017618:	a90b      	add	r1, sp, #44	; 0x2c
 801761a:	f000 fa39 	bl	8017a90 <rcl_validate_topic_name>
 801761e:	4605      	mov	r5, r0
 8017620:	bb68      	cbnz	r0, 801767e <rcl_expand_topic_name+0xa2>
 8017622:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017624:	2b00      	cmp	r3, #0
 8017626:	d137      	bne.n	8017698 <rcl_expand_topic_name+0xbc>
 8017628:	4602      	mov	r2, r0
 801762a:	a90b      	add	r1, sp, #44	; 0x2c
 801762c:	4638      	mov	r0, r7
 801762e:	f7fa ffa5 	bl	801257c <rmw_validate_node_name>
 8017632:	bb68      	cbnz	r0, 8017690 <rcl_expand_topic_name+0xb4>
 8017634:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017636:	2b00      	cmp	r3, #0
 8017638:	d133      	bne.n	80176a2 <rcl_expand_topic_name+0xc6>
 801763a:	462a      	mov	r2, r5
 801763c:	a90b      	add	r1, sp, #44	; 0x2c
 801763e:	9807      	ldr	r0, [sp, #28]
 8017640:	f7fa ff7e 	bl	8012540 <rmw_validate_namespace>
 8017644:	bb20      	cbnz	r0, 8017690 <rcl_expand_topic_name+0xb4>
 8017646:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8017648:	2d00      	cmp	r5, #0
 801764a:	f040 80a2 	bne.w	8017792 <rcl_expand_topic_name+0x1b6>
 801764e:	217b      	movs	r1, #123	; 0x7b
 8017650:	4620      	mov	r0, r4
 8017652:	f001 ffdf 	bl	8019614 <strchr>
 8017656:	7823      	ldrb	r3, [r4, #0]
 8017658:	4681      	mov	r9, r0
 801765a:	bb20      	cbnz	r0, 80176a6 <rcl_expand_topic_name+0xca>
 801765c:	2b2f      	cmp	r3, #47	; 0x2f
 801765e:	d122      	bne.n	80176a6 <rcl_expand_topic_name+0xca>
 8017660:	ab19      	add	r3, sp, #100	; 0x64
 8017662:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017666:	ab16      	add	r3, sp, #88	; 0x58
 8017668:	e88d 0003 	stmia.w	sp, {r0, r1}
 801766c:	4620      	mov	r0, r4
 801766e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8017670:	f7fa fd14 	bl	801209c <rcutils_strdup>
 8017674:	2800      	cmp	r0, #0
 8017676:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017678:	bf08      	it	eq
 801767a:	250a      	moveq	r5, #10
 801767c:	6018      	str	r0, [r3, #0]
 801767e:	4628      	mov	r0, r5
 8017680:	b00d      	add	sp, #52	; 0x34
 8017682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017686:	250b      	movs	r5, #11
 8017688:	4628      	mov	r0, r5
 801768a:	b00d      	add	sp, #52	; 0x34
 801768c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017690:	f7f7 fcc0 	bl	800f014 <rcl_convert_rmw_ret_to_rcl_ret>
 8017694:	4605      	mov	r5, r0
 8017696:	e7f2      	b.n	801767e <rcl_expand_topic_name+0xa2>
 8017698:	2567      	movs	r5, #103	; 0x67
 801769a:	4628      	mov	r0, r5
 801769c:	b00d      	add	sp, #52	; 0x34
 801769e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80176a2:	25c9      	movs	r5, #201	; 0xc9
 80176a4:	e7eb      	b.n	801767e <rcl_expand_topic_name+0xa2>
 80176a6:	2b7e      	cmp	r3, #126	; 0x7e
 80176a8:	d075      	beq.n	8017796 <rcl_expand_topic_name+0x1ba>
 80176aa:	f1b9 0f00 	cmp.w	r9, #0
 80176ae:	f000 80c2 	beq.w	8017836 <rcl_expand_topic_name+0x25a>
 80176b2:	2300      	movs	r3, #0
 80176b4:	46a2      	mov	sl, r4
 80176b6:	461e      	mov	r6, r3
 80176b8:	9508      	str	r5, [sp, #32]
 80176ba:	4655      	mov	r5, sl
 80176bc:	9409      	str	r4, [sp, #36]	; 0x24
 80176be:	46b2      	mov	sl, r6
 80176c0:	464c      	mov	r4, r9
 80176c2:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80176c6:	2c00      	cmp	r4, #0
 80176c8:	f000 80ae 	beq.w	8017828 <rcl_expand_topic_name+0x24c>
 80176cc:	217d      	movs	r1, #125	; 0x7d
 80176ce:	4628      	mov	r0, r5
 80176d0:	f001 ffa0 	bl	8019614 <strchr>
 80176d4:	eba0 0904 	sub.w	r9, r0, r4
 80176d8:	4621      	mov	r1, r4
 80176da:	4869      	ldr	r0, [pc, #420]	; (8017880 <rcl_expand_topic_name+0x2a4>)
 80176dc:	f109 0601 	add.w	r6, r9, #1
 80176e0:	4632      	mov	r2, r6
 80176e2:	f001 ffa4 	bl	801962e <strncmp>
 80176e6:	2800      	cmp	r0, #0
 80176e8:	d051      	beq.n	801778e <rcl_expand_topic_name+0x1b2>
 80176ea:	4632      	mov	r2, r6
 80176ec:	4621      	mov	r1, r4
 80176ee:	4865      	ldr	r0, [pc, #404]	; (8017884 <rcl_expand_topic_name+0x2a8>)
 80176f0:	f001 ff9d 	bl	801962e <strncmp>
 80176f4:	b128      	cbz	r0, 8017702 <rcl_expand_topic_name+0x126>
 80176f6:	4632      	mov	r2, r6
 80176f8:	4621      	mov	r1, r4
 80176fa:	4863      	ldr	r0, [pc, #396]	; (8017888 <rcl_expand_topic_name+0x2ac>)
 80176fc:	f001 ff97 	bl	801962e <strncmp>
 8017700:	bb38      	cbnz	r0, 8017752 <rcl_expand_topic_name+0x176>
 8017702:	46d9      	mov	r9, fp
 8017704:	ab18      	add	r3, sp, #96	; 0x60
 8017706:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801770a:	ab16      	add	r3, sp, #88	; 0x58
 801770c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8017710:	4620      	mov	r0, r4
 8017712:	4631      	mov	r1, r6
 8017714:	cb0c      	ldmia	r3, {r2, r3}
 8017716:	f7fa fce7 	bl	80120e8 <rcutils_strndup>
 801771a:	4604      	mov	r4, r0
 801771c:	2800      	cmp	r0, #0
 801771e:	f000 80a3 	beq.w	8017868 <rcl_expand_topic_name+0x28c>
 8017722:	464a      	mov	r2, r9
 8017724:	4628      	mov	r0, r5
 8017726:	ab16      	add	r3, sp, #88	; 0x58
 8017728:	4621      	mov	r1, r4
 801772a:	f7fa fbb7 	bl	8011e9c <rcutils_repl_str>
 801772e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8017730:	4605      	mov	r5, r0
 8017732:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8017734:	4620      	mov	r0, r4
 8017736:	4798      	blx	r3
 8017738:	4650      	mov	r0, sl
 801773a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801773c:	991a      	ldr	r1, [sp, #104]	; 0x68
 801773e:	4798      	blx	r3
 8017740:	2d00      	cmp	r5, #0
 8017742:	d06c      	beq.n	801781e <rcl_expand_topic_name+0x242>
 8017744:	217b      	movs	r1, #123	; 0x7b
 8017746:	4628      	mov	r0, r5
 8017748:	f001 ff64 	bl	8019614 <strchr>
 801774c:	46aa      	mov	sl, r5
 801774e:	4604      	mov	r4, r0
 8017750:	e7b9      	b.n	80176c6 <rcl_expand_topic_name+0xea>
 8017752:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 8017756:	1c61      	adds	r1, r4, #1
 8017758:	4640      	mov	r0, r8
 801775a:	f7fa fdc1 	bl	80122e0 <rcutils_string_map_getn>
 801775e:	4681      	mov	r9, r0
 8017760:	2800      	cmp	r0, #0
 8017762:	d1cf      	bne.n	8017704 <rcl_expand_topic_name+0x128>
 8017764:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017766:	aa18      	add	r2, sp, #96	; 0x60
 8017768:	2569      	movs	r5, #105	; 0x69
 801776a:	6018      	str	r0, [r3, #0]
 801776c:	ab16      	add	r3, sp, #88	; 0x58
 801776e:	ca07      	ldmia	r2, {r0, r1, r2}
 8017770:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8017774:	4631      	mov	r1, r6
 8017776:	4620      	mov	r0, r4
 8017778:	cb0c      	ldmia	r3, {r2, r3}
 801777a:	f7fa fcb5 	bl	80120e8 <rcutils_strndup>
 801777e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8017780:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8017782:	4798      	blx	r3
 8017784:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8017786:	991a      	ldr	r1, [sp, #104]	; 0x68
 8017788:	4650      	mov	r0, sl
 801778a:	4798      	blx	r3
 801778c:	e777      	b.n	801767e <rcl_expand_topic_name+0xa2>
 801778e:	46b9      	mov	r9, r7
 8017790:	e7b8      	b.n	8017704 <rcl_expand_topic_name+0x128>
 8017792:	25ca      	movs	r5, #202	; 0xca
 8017794:	e773      	b.n	801767e <rcl_expand_topic_name+0xa2>
 8017796:	9e07      	ldr	r6, [sp, #28]
 8017798:	4630      	mov	r0, r6
 801779a:	f7e8 fdb1 	bl	8000300 <strlen>
 801779e:	4a3b      	ldr	r2, [pc, #236]	; (801788c <rcl_expand_topic_name+0x2b0>)
 80177a0:	4b3b      	ldr	r3, [pc, #236]	; (8017890 <rcl_expand_topic_name+0x2b4>)
 80177a2:	9603      	str	r6, [sp, #12]
 80177a4:	2801      	cmp	r0, #1
 80177a6:	bf18      	it	ne
 80177a8:	4613      	movne	r3, r2
 80177aa:	9704      	str	r7, [sp, #16]
 80177ac:	9302      	str	r3, [sp, #8]
 80177ae:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80177b0:	9300      	str	r3, [sp, #0]
 80177b2:	1c63      	adds	r3, r4, #1
 80177b4:	9305      	str	r3, [sp, #20]
 80177b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80177ba:	9301      	str	r3, [sp, #4]
 80177bc:	ab16      	add	r3, sp, #88	; 0x58
 80177be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80177c0:	f7fa fb32 	bl	8011e28 <rcutils_format_string_limit>
 80177c4:	4606      	mov	r6, r0
 80177c6:	b350      	cbz	r0, 801781e <rcl_expand_topic_name+0x242>
 80177c8:	f1b9 0f00 	cmp.w	r9, #0
 80177cc:	d005      	beq.n	80177da <rcl_expand_topic_name+0x1fe>
 80177ce:	217b      	movs	r1, #123	; 0x7b
 80177d0:	46b2      	mov	sl, r6
 80177d2:	f001 ff1f 	bl	8019614 <strchr>
 80177d6:	4681      	mov	r9, r0
 80177d8:	e76e      	b.n	80176b8 <rcl_expand_topic_name+0xdc>
 80177da:	7833      	ldrb	r3, [r6, #0]
 80177dc:	2b2f      	cmp	r3, #47	; 0x2f
 80177de:	d01b      	beq.n	8017818 <rcl_expand_topic_name+0x23c>
 80177e0:	9c07      	ldr	r4, [sp, #28]
 80177e2:	4620      	mov	r0, r4
 80177e4:	f7e8 fd8c 	bl	8000300 <strlen>
 80177e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80177ec:	4a29      	ldr	r2, [pc, #164]	; (8017894 <rcl_expand_topic_name+0x2b8>)
 80177ee:	9301      	str	r3, [sp, #4]
 80177f0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80177f2:	9604      	str	r6, [sp, #16]
 80177f4:	9300      	str	r3, [sp, #0]
 80177f6:	4b28      	ldr	r3, [pc, #160]	; (8017898 <rcl_expand_topic_name+0x2bc>)
 80177f8:	9403      	str	r4, [sp, #12]
 80177fa:	2801      	cmp	r0, #1
 80177fc:	bf18      	it	ne
 80177fe:	4613      	movne	r3, r2
 8017800:	9302      	str	r3, [sp, #8]
 8017802:	ab16      	add	r3, sp, #88	; 0x58
 8017804:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017806:	f7fa fb0f 	bl	8011e28 <rcutils_format_string_limit>
 801780a:	4603      	mov	r3, r0
 801780c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801780e:	4630      	mov	r0, r6
 8017810:	991a      	ldr	r1, [sp, #104]	; 0x68
 8017812:	461e      	mov	r6, r3
 8017814:	4790      	blx	r2
 8017816:	b116      	cbz	r6, 801781e <rcl_expand_topic_name+0x242>
 8017818:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801781a:	601e      	str	r6, [r3, #0]
 801781c:	e72f      	b.n	801767e <rcl_expand_topic_name+0xa2>
 801781e:	2300      	movs	r3, #0
 8017820:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8017822:	250a      	movs	r5, #10
 8017824:	6013      	str	r3, [r2, #0]
 8017826:	e72a      	b.n	801767e <rcl_expand_topic_name+0xa2>
 8017828:	4653      	mov	r3, sl
 801782a:	4656      	mov	r6, sl
 801782c:	e9dd 5408 	ldrd	r5, r4, [sp, #32]
 8017830:	2b00      	cmp	r3, #0
 8017832:	d1d2      	bne.n	80177da <rcl_expand_topic_name+0x1fe>
 8017834:	7823      	ldrb	r3, [r4, #0]
 8017836:	2b2f      	cmp	r3, #47	; 0x2f
 8017838:	d01e      	beq.n	8017878 <rcl_expand_topic_name+0x29c>
 801783a:	9e07      	ldr	r6, [sp, #28]
 801783c:	4630      	mov	r0, r6
 801783e:	f7e8 fd5f 	bl	8000300 <strlen>
 8017842:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8017844:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017848:	9603      	str	r6, [sp, #12]
 801784a:	9404      	str	r4, [sp, #16]
 801784c:	e9cd 2300 	strd	r2, r3, [sp]
 8017850:	4a10      	ldr	r2, [pc, #64]	; (8017894 <rcl_expand_topic_name+0x2b8>)
 8017852:	4b11      	ldr	r3, [pc, #68]	; (8017898 <rcl_expand_topic_name+0x2bc>)
 8017854:	2801      	cmp	r0, #1
 8017856:	bf18      	it	ne
 8017858:	4613      	movne	r3, r2
 801785a:	9302      	str	r3, [sp, #8]
 801785c:	ab16      	add	r3, sp, #88	; 0x58
 801785e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017860:	f7fa fae2 	bl	8011e28 <rcutils_format_string_limit>
 8017864:	4606      	mov	r6, r0
 8017866:	e7d6      	b.n	8017816 <rcl_expand_topic_name+0x23a>
 8017868:	e9dd 121a 	ldrd	r1, r2, [sp, #104]	; 0x68
 801786c:	4650      	mov	r0, sl
 801786e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8017870:	6014      	str	r4, [r2, #0]
 8017872:	250a      	movs	r5, #10
 8017874:	4798      	blx	r3
 8017876:	e702      	b.n	801767e <rcl_expand_topic_name+0xa2>
 8017878:	2300      	movs	r3, #0
 801787a:	461e      	mov	r6, r3
 801787c:	e7cc      	b.n	8017818 <rcl_expand_topic_name+0x23c>
 801787e:	bf00      	nop
 8017880:	0801be94 	.word	0x0801be94
 8017884:	0801be9c 	.word	0x0801be9c
 8017888:	0801bea4 	.word	0x0801bea4
 801788c:	0801be8c 	.word	0x0801be8c
 8017890:	0801ba70 	.word	0x0801ba70
 8017894:	0801b4e8 	.word	0x0801b4e8
 8017898:	0801b4e0 	.word	0x0801b4e0

0801789c <rcl_get_default_topic_name_substitutions>:
 801789c:	2800      	cmp	r0, #0
 801789e:	bf0c      	ite	eq
 80178a0:	200b      	moveq	r0, #11
 80178a2:	2000      	movne	r0, #0
 80178a4:	4770      	bx	lr
 80178a6:	bf00      	nop

080178a8 <rcl_get_zero_initialized_guard_condition>:
 80178a8:	4a03      	ldr	r2, [pc, #12]	; (80178b8 <rcl_get_zero_initialized_guard_condition+0x10>)
 80178aa:	4603      	mov	r3, r0
 80178ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80178b0:	e883 0003 	stmia.w	r3, {r0, r1}
 80178b4:	4618      	mov	r0, r3
 80178b6:	4770      	bx	lr
 80178b8:	0801beb0 	.word	0x0801beb0

080178bc <rcl_guard_condition_init_from_rmw>:
 80178bc:	b082      	sub	sp, #8
 80178be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80178c2:	b086      	sub	sp, #24
 80178c4:	4604      	mov	r4, r0
 80178c6:	460e      	mov	r6, r1
 80178c8:	4615      	mov	r5, r2
 80178ca:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 80178ce:	f10d 0e04 	add.w	lr, sp, #4
 80178d2:	f84c 3f04 	str.w	r3, [ip, #4]!
 80178d6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80178da:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80178de:	f8dc 3000 	ldr.w	r3, [ip]
 80178e2:	a801      	add	r0, sp, #4
 80178e4:	f8ce 3000 	str.w	r3, [lr]
 80178e8:	f7f4 fc2e 	bl	800c148 <rcutils_allocator_is_valid>
 80178ec:	f080 0301 	eor.w	r3, r0, #1
 80178f0:	b2db      	uxtb	r3, r3
 80178f2:	bb3b      	cbnz	r3, 8017944 <rcl_guard_condition_init_from_rmw+0x88>
 80178f4:	b334      	cbz	r4, 8017944 <rcl_guard_condition_init_from_rmw+0x88>
 80178f6:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80178fa:	f1b8 0f00 	cmp.w	r8, #0
 80178fe:	d11a      	bne.n	8017936 <rcl_guard_condition_init_from_rmw+0x7a>
 8017900:	b305      	cbz	r5, 8017944 <rcl_guard_condition_init_from_rmw+0x88>
 8017902:	4628      	mov	r0, r5
 8017904:	f7f7 fba4 	bl	800f050 <rcl_context_is_valid>
 8017908:	b1f0      	cbz	r0, 8017948 <rcl_guard_condition_init_from_rmw+0x8c>
 801790a:	9b01      	ldr	r3, [sp, #4]
 801790c:	201c      	movs	r0, #28
 801790e:	9905      	ldr	r1, [sp, #20]
 8017910:	4798      	blx	r3
 8017912:	4607      	mov	r7, r0
 8017914:	6060      	str	r0, [r4, #4]
 8017916:	b320      	cbz	r0, 8017962 <rcl_guard_condition_init_from_rmw+0xa6>
 8017918:	b1c6      	cbz	r6, 801794c <rcl_guard_condition_init_from_rmw+0x90>
 801791a:	6006      	str	r6, [r0, #0]
 801791c:	f880 8004 	strb.w	r8, [r0, #4]
 8017920:	ac01      	add	r4, sp, #4
 8017922:	f107 0c08 	add.w	ip, r7, #8
 8017926:	2500      	movs	r5, #0
 8017928:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801792a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801792e:	6823      	ldr	r3, [r4, #0]
 8017930:	f8cc 3000 	str.w	r3, [ip]
 8017934:	e000      	b.n	8017938 <rcl_guard_condition_init_from_rmw+0x7c>
 8017936:	2564      	movs	r5, #100	; 0x64
 8017938:	4628      	mov	r0, r5
 801793a:	b006      	add	sp, #24
 801793c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017940:	b002      	add	sp, #8
 8017942:	4770      	bx	lr
 8017944:	250b      	movs	r5, #11
 8017946:	e7f7      	b.n	8017938 <rcl_guard_condition_init_from_rmw+0x7c>
 8017948:	2565      	movs	r5, #101	; 0x65
 801794a:	e7f5      	b.n	8017938 <rcl_guard_condition_init_from_rmw+0x7c>
 801794c:	6828      	ldr	r0, [r5, #0]
 801794e:	3028      	adds	r0, #40	; 0x28
 8017950:	f000 fc30 	bl	80181b4 <rmw_create_guard_condition>
 8017954:	6038      	str	r0, [r7, #0]
 8017956:	6867      	ldr	r7, [r4, #4]
 8017958:	683e      	ldr	r6, [r7, #0]
 801795a:	b126      	cbz	r6, 8017966 <rcl_guard_condition_init_from_rmw+0xaa>
 801795c:	2301      	movs	r3, #1
 801795e:	713b      	strb	r3, [r7, #4]
 8017960:	e7de      	b.n	8017920 <rcl_guard_condition_init_from_rmw+0x64>
 8017962:	250a      	movs	r5, #10
 8017964:	e7e8      	b.n	8017938 <rcl_guard_condition_init_from_rmw+0x7c>
 8017966:	9b02      	ldr	r3, [sp, #8]
 8017968:	4638      	mov	r0, r7
 801796a:	9905      	ldr	r1, [sp, #20]
 801796c:	2501      	movs	r5, #1
 801796e:	4798      	blx	r3
 8017970:	6066      	str	r6, [r4, #4]
 8017972:	e7e1      	b.n	8017938 <rcl_guard_condition_init_from_rmw+0x7c>

08017974 <rcl_guard_condition_fini>:
 8017974:	b570      	push	{r4, r5, r6, lr}
 8017976:	b082      	sub	sp, #8
 8017978:	b1f0      	cbz	r0, 80179b8 <rcl_guard_condition_fini+0x44>
 801797a:	6843      	ldr	r3, [r0, #4]
 801797c:	4604      	mov	r4, r0
 801797e:	b163      	cbz	r3, 801799a <rcl_guard_condition_fini+0x26>
 8017980:	6818      	ldr	r0, [r3, #0]
 8017982:	68de      	ldr	r6, [r3, #12]
 8017984:	6999      	ldr	r1, [r3, #24]
 8017986:	b160      	cbz	r0, 80179a2 <rcl_guard_condition_fini+0x2e>
 8017988:	791d      	ldrb	r5, [r3, #4]
 801798a:	b965      	cbnz	r5, 80179a6 <rcl_guard_condition_fini+0x32>
 801798c:	4618      	mov	r0, r3
 801798e:	47b0      	blx	r6
 8017990:	2300      	movs	r3, #0
 8017992:	4628      	mov	r0, r5
 8017994:	6063      	str	r3, [r4, #4]
 8017996:	b002      	add	sp, #8
 8017998:	bd70      	pop	{r4, r5, r6, pc}
 801799a:	461d      	mov	r5, r3
 801799c:	4628      	mov	r0, r5
 801799e:	b002      	add	sp, #8
 80179a0:	bd70      	pop	{r4, r5, r6, pc}
 80179a2:	4605      	mov	r5, r0
 80179a4:	e7f2      	b.n	801798c <rcl_guard_condition_fini+0x18>
 80179a6:	9101      	str	r1, [sp, #4]
 80179a8:	f000 fc1a 	bl	80181e0 <rmw_destroy_guard_condition>
 80179ac:	1e05      	subs	r5, r0, #0
 80179ae:	6863      	ldr	r3, [r4, #4]
 80179b0:	9901      	ldr	r1, [sp, #4]
 80179b2:	bf18      	it	ne
 80179b4:	2501      	movne	r5, #1
 80179b6:	e7e9      	b.n	801798c <rcl_guard_condition_fini+0x18>
 80179b8:	250b      	movs	r5, #11
 80179ba:	4628      	mov	r0, r5
 80179bc:	b002      	add	sp, #8
 80179be:	bd70      	pop	{r4, r5, r6, pc}

080179c0 <rcl_guard_condition_get_default_options>:
 80179c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80179c2:	b087      	sub	sp, #28
 80179c4:	4606      	mov	r6, r0
 80179c6:	4c0b      	ldr	r4, [pc, #44]	; (80179f4 <rcl_guard_condition_get_default_options+0x34>)
 80179c8:	4668      	mov	r0, sp
 80179ca:	f7f4 fbaf 	bl	800c12c <rcutils_get_default_allocator>
 80179ce:	46ee      	mov	lr, sp
 80179d0:	46a4      	mov	ip, r4
 80179d2:	4625      	mov	r5, r4
 80179d4:	4634      	mov	r4, r6
 80179d6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80179da:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80179de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80179e0:	f8de 7000 	ldr.w	r7, [lr]
 80179e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80179e6:	4630      	mov	r0, r6
 80179e8:	f8cc 7000 	str.w	r7, [ip]
 80179ec:	6027      	str	r7, [r4, #0]
 80179ee:	b007      	add	sp, #28
 80179f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80179f2:	bf00      	nop
 80179f4:	200109b4 	.word	0x200109b4

080179f8 <rcl_guard_condition_get_rmw_handle>:
 80179f8:	b110      	cbz	r0, 8017a00 <rcl_guard_condition_get_rmw_handle+0x8>
 80179fa:	6840      	ldr	r0, [r0, #4]
 80179fc:	b100      	cbz	r0, 8017a00 <rcl_guard_condition_get_rmw_handle+0x8>
 80179fe:	6800      	ldr	r0, [r0, #0]
 8017a00:	4770      	bx	lr
 8017a02:	bf00      	nop

08017a04 <rcl_publish>:
 8017a04:	b1f8      	cbz	r0, 8017a46 <rcl_publish+0x42>
 8017a06:	6803      	ldr	r3, [r0, #0]
 8017a08:	b570      	push	{r4, r5, r6, lr}
 8017a0a:	4604      	mov	r4, r0
 8017a0c:	b1b3      	cbz	r3, 8017a3c <rcl_publish+0x38>
 8017a0e:	4616      	mov	r6, r2
 8017a10:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8017a14:	b192      	cbz	r2, 8017a3c <rcl_publish+0x38>
 8017a16:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 8017a1a:	460d      	mov	r5, r1
 8017a1c:	f7f7 fb18 	bl	800f050 <rcl_context_is_valid>
 8017a20:	b160      	cbz	r0, 8017a3c <rcl_publish+0x38>
 8017a22:	6823      	ldr	r3, [r4, #0]
 8017a24:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 8017a28:	b140      	cbz	r0, 8017a3c <rcl_publish+0x38>
 8017a2a:	b155      	cbz	r5, 8017a42 <rcl_publish+0x3e>
 8017a2c:	4632      	mov	r2, r6
 8017a2e:	4629      	mov	r1, r5
 8017a30:	f000 fc10 	bl	8018254 <rmw_publish>
 8017a34:	3800      	subs	r0, #0
 8017a36:	bf18      	it	ne
 8017a38:	2001      	movne	r0, #1
 8017a3a:	bd70      	pop	{r4, r5, r6, pc}
 8017a3c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8017a40:	bd70      	pop	{r4, r5, r6, pc}
 8017a42:	200b      	movs	r0, #11
 8017a44:	bd70      	pop	{r4, r5, r6, pc}
 8017a46:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8017a4a:	4770      	bx	lr

08017a4c <rcl_publisher_is_valid>:
 8017a4c:	b1a0      	cbz	r0, 8017a78 <rcl_publisher_is_valid+0x2c>
 8017a4e:	6803      	ldr	r3, [r0, #0]
 8017a50:	b510      	push	{r4, lr}
 8017a52:	4604      	mov	r4, r0
 8017a54:	b173      	cbz	r3, 8017a74 <rcl_publisher_is_valid+0x28>
 8017a56:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8017a5a:	b15a      	cbz	r2, 8017a74 <rcl_publisher_is_valid+0x28>
 8017a5c:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 8017a60:	f7f7 faf6 	bl	800f050 <rcl_context_is_valid>
 8017a64:	b130      	cbz	r0, 8017a74 <rcl_publisher_is_valid+0x28>
 8017a66:	6823      	ldr	r3, [r4, #0]
 8017a68:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 8017a6c:	3800      	subs	r0, #0
 8017a6e:	bf18      	it	ne
 8017a70:	2001      	movne	r0, #1
 8017a72:	bd10      	pop	{r4, pc}
 8017a74:	2000      	movs	r0, #0
 8017a76:	bd10      	pop	{r4, pc}
 8017a78:	2000      	movs	r0, #0
 8017a7a:	4770      	bx	lr

08017a7c <rcl_publisher_is_valid_except_context>:
 8017a7c:	b130      	cbz	r0, 8017a8c <rcl_publisher_is_valid_except_context+0x10>
 8017a7e:	6800      	ldr	r0, [r0, #0]
 8017a80:	b120      	cbz	r0, 8017a8c <rcl_publisher_is_valid_except_context+0x10>
 8017a82:	f8d0 00c4 	ldr.w	r0, [r0, #196]	; 0xc4
 8017a86:	3800      	subs	r0, #0
 8017a88:	bf18      	it	ne
 8017a8a:	2001      	movne	r0, #1
 8017a8c:	4770      	bx	lr
 8017a8e:	bf00      	nop

08017a90 <rcl_validate_topic_name>:
 8017a90:	2800      	cmp	r0, #0
 8017a92:	f000 8089 	beq.w	8017ba8 <rcl_validate_topic_name+0x118>
 8017a96:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017a9a:	460e      	mov	r6, r1
 8017a9c:	2900      	cmp	r1, #0
 8017a9e:	f000 8085 	beq.w	8017bac <rcl_validate_topic_name+0x11c>
 8017aa2:	4604      	mov	r4, r0
 8017aa4:	4617      	mov	r7, r2
 8017aa6:	f7e8 fc2b 	bl	8000300 <strlen>
 8017aaa:	b1b0      	cbz	r0, 8017ada <rcl_validate_topic_name+0x4a>
 8017aac:	f894 e000 	ldrb.w	lr, [r4]
 8017ab0:	f8df c160 	ldr.w	ip, [pc, #352]	; 8017c14 <rcl_validate_topic_name+0x184>
 8017ab4:	f81c 300e 	ldrb.w	r3, [ip, lr]
 8017ab8:	f013 0304 	ands.w	r3, r3, #4
 8017abc:	d139      	bne.n	8017b32 <rcl_validate_topic_name+0xa2>
 8017abe:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8017ac2:	f814 2008 	ldrb.w	r2, [r4, r8]
 8017ac6:	2a2f      	cmp	r2, #47	; 0x2f
 8017ac8:	d10f      	bne.n	8017aea <rcl_validate_topic_name+0x5a>
 8017aca:	2202      	movs	r2, #2
 8017acc:	6032      	str	r2, [r6, #0]
 8017ace:	b3a7      	cbz	r7, 8017b3a <rcl_validate_topic_name+0xaa>
 8017ad0:	4618      	mov	r0, r3
 8017ad2:	f8c7 8000 	str.w	r8, [r7]
 8017ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017ada:	2301      	movs	r3, #1
 8017adc:	6033      	str	r3, [r6, #0]
 8017ade:	b367      	cbz	r7, 8017b3a <rcl_validate_topic_name+0xaa>
 8017ae0:	2300      	movs	r3, #0
 8017ae2:	4618      	mov	r0, r3
 8017ae4:	603b      	str	r3, [r7, #0]
 8017ae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017aea:	f104 3aff 	add.w	sl, r4, #4294967295	; 0xffffffff
 8017aee:	461d      	mov	r5, r3
 8017af0:	4619      	mov	r1, r3
 8017af2:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8017af6:	f1a2 0930 	sub.w	r9, r2, #48	; 0x30
 8017afa:	f1b9 0f09 	cmp.w	r9, #9
 8017afe:	d91f      	bls.n	8017b40 <rcl_validate_topic_name+0xb0>
 8017b00:	f022 0920 	bic.w	r9, r2, #32
 8017b04:	f1a9 0941 	sub.w	r9, r9, #65	; 0x41
 8017b08:	f1b9 0f19 	cmp.w	r9, #25
 8017b0c:	d918      	bls.n	8017b40 <rcl_validate_topic_name+0xb0>
 8017b0e:	2a5f      	cmp	r2, #95	; 0x5f
 8017b10:	d024      	beq.n	8017b5c <rcl_validate_topic_name+0xcc>
 8017b12:	2a2f      	cmp	r2, #47	; 0x2f
 8017b14:	d058      	beq.n	8017bc8 <rcl_validate_topic_name+0x138>
 8017b16:	2a7e      	cmp	r2, #126	; 0x7e
 8017b18:	d04a      	beq.n	8017bb0 <rcl_validate_topic_name+0x120>
 8017b1a:	2a7b      	cmp	r2, #123	; 0x7b
 8017b1c:	d05b      	beq.n	8017bd6 <rcl_validate_topic_name+0x146>
 8017b1e:	2a7d      	cmp	r2, #125	; 0x7d
 8017b20:	d169      	bne.n	8017bf6 <rcl_validate_topic_name+0x166>
 8017b22:	2d00      	cmp	r5, #0
 8017b24:	d15c      	bne.n	8017be0 <rcl_validate_topic_name+0x150>
 8017b26:	2305      	movs	r3, #5
 8017b28:	6033      	str	r3, [r6, #0]
 8017b2a:	b137      	cbz	r7, 8017b3a <rcl_validate_topic_name+0xaa>
 8017b2c:	2000      	movs	r0, #0
 8017b2e:	6039      	str	r1, [r7, #0]
 8017b30:	e7d9      	b.n	8017ae6 <rcl_validate_topic_name+0x56>
 8017b32:	2304      	movs	r3, #4
 8017b34:	6033      	str	r3, [r6, #0]
 8017b36:	2f00      	cmp	r7, #0
 8017b38:	d1d2      	bne.n	8017ae0 <rcl_validate_topic_name+0x50>
 8017b3a:	2000      	movs	r0, #0
 8017b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017b40:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8017b44:	0752      	lsls	r2, r2, #29
 8017b46:	d509      	bpl.n	8017b5c <rcl_validate_topic_name+0xcc>
 8017b48:	2900      	cmp	r1, #0
 8017b4a:	bf0c      	ite	eq
 8017b4c:	2200      	moveq	r2, #0
 8017b4e:	f005 0201 	andne.w	r2, r5, #1
 8017b52:	b11a      	cbz	r2, 8017b5c <rcl_validate_topic_name+0xcc>
 8017b54:	1e4d      	subs	r5, r1, #1
 8017b56:	429d      	cmp	r5, r3
 8017b58:	d031      	beq.n	8017bbe <rcl_validate_topic_name+0x12e>
 8017b5a:	4615      	mov	r5, r2
 8017b5c:	3101      	adds	r1, #1
 8017b5e:	4288      	cmp	r0, r1
 8017b60:	d1c7      	bne.n	8017af2 <rcl_validate_topic_name+0x62>
 8017b62:	2d00      	cmp	r5, #0
 8017b64:	d142      	bne.n	8017bec <rcl_validate_topic_name+0x15c>
 8017b66:	4628      	mov	r0, r5
 8017b68:	2301      	movs	r3, #1
 8017b6a:	e00c      	b.n	8017b86 <rcl_validate_topic_name+0xf6>
 8017b6c:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 8017b70:	d101      	bne.n	8017b76 <rcl_validate_topic_name+0xe6>
 8017b72:	2801      	cmp	r0, #1
 8017b74:	d047      	beq.n	8017c06 <rcl_validate_topic_name+0x176>
 8017b76:	1c5a      	adds	r2, r3, #1
 8017b78:	428b      	cmp	r3, r1
 8017b7a:	f100 0001 	add.w	r0, r0, #1
 8017b7e:	f104 0401 	add.w	r4, r4, #1
 8017b82:	4613      	mov	r3, r2
 8017b84:	d22e      	bcs.n	8017be4 <rcl_validate_topic_name+0x154>
 8017b86:	4580      	cmp	r8, r0
 8017b88:	d0f5      	beq.n	8017b76 <rcl_validate_topic_name+0xe6>
 8017b8a:	7822      	ldrb	r2, [r4, #0]
 8017b8c:	2a2f      	cmp	r2, #47	; 0x2f
 8017b8e:	d1ed      	bne.n	8017b6c <rcl_validate_topic_name+0xdc>
 8017b90:	7862      	ldrb	r2, [r4, #1]
 8017b92:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8017b96:	0752      	lsls	r2, r2, #29
 8017b98:	d5ed      	bpl.n	8017b76 <rcl_validate_topic_name+0xe6>
 8017b9a:	2204      	movs	r2, #4
 8017b9c:	6032      	str	r2, [r6, #0]
 8017b9e:	2f00      	cmp	r7, #0
 8017ba0:	d0cb      	beq.n	8017b3a <rcl_validate_topic_name+0xaa>
 8017ba2:	2000      	movs	r0, #0
 8017ba4:	603b      	str	r3, [r7, #0]
 8017ba6:	e79e      	b.n	8017ae6 <rcl_validate_topic_name+0x56>
 8017ba8:	200b      	movs	r0, #11
 8017baa:	4770      	bx	lr
 8017bac:	200b      	movs	r0, #11
 8017bae:	e79a      	b.n	8017ae6 <rcl_validate_topic_name+0x56>
 8017bb0:	2900      	cmp	r1, #0
 8017bb2:	d0d3      	beq.n	8017b5c <rcl_validate_topic_name+0xcc>
 8017bb4:	2306      	movs	r3, #6
 8017bb6:	6033      	str	r3, [r6, #0]
 8017bb8:	2f00      	cmp	r7, #0
 8017bba:	d1b7      	bne.n	8017b2c <rcl_validate_topic_name+0x9c>
 8017bbc:	e7bd      	b.n	8017b3a <rcl_validate_topic_name+0xaa>
 8017bbe:	2309      	movs	r3, #9
 8017bc0:	6033      	str	r3, [r6, #0]
 8017bc2:	2f00      	cmp	r7, #0
 8017bc4:	d1b2      	bne.n	8017b2c <rcl_validate_topic_name+0x9c>
 8017bc6:	e7b8      	b.n	8017b3a <rcl_validate_topic_name+0xaa>
 8017bc8:	2d00      	cmp	r5, #0
 8017bca:	d0c7      	beq.n	8017b5c <rcl_validate_topic_name+0xcc>
 8017bcc:	2308      	movs	r3, #8
 8017bce:	6033      	str	r3, [r6, #0]
 8017bd0:	2f00      	cmp	r7, #0
 8017bd2:	d1ab      	bne.n	8017b2c <rcl_validate_topic_name+0x9c>
 8017bd4:	e7b1      	b.n	8017b3a <rcl_validate_topic_name+0xaa>
 8017bd6:	2d00      	cmp	r5, #0
 8017bd8:	d1f8      	bne.n	8017bcc <rcl_validate_topic_name+0x13c>
 8017bda:	460b      	mov	r3, r1
 8017bdc:	2501      	movs	r5, #1
 8017bde:	e7bd      	b.n	8017b5c <rcl_validate_topic_name+0xcc>
 8017be0:	2500      	movs	r5, #0
 8017be2:	e7bb      	b.n	8017b5c <rcl_validate_topic_name+0xcc>
 8017be4:	2300      	movs	r3, #0
 8017be6:	4618      	mov	r0, r3
 8017be8:	6033      	str	r3, [r6, #0]
 8017bea:	e77c      	b.n	8017ae6 <rcl_validate_topic_name+0x56>
 8017bec:	2205      	movs	r2, #5
 8017bee:	6032      	str	r2, [r6, #0]
 8017bf0:	2f00      	cmp	r7, #0
 8017bf2:	d1d6      	bne.n	8017ba2 <rcl_validate_topic_name+0x112>
 8017bf4:	e7a1      	b.n	8017b3a <rcl_validate_topic_name+0xaa>
 8017bf6:	2d00      	cmp	r5, #0
 8017bf8:	bf14      	ite	ne
 8017bfa:	2308      	movne	r3, #8
 8017bfc:	2303      	moveq	r3, #3
 8017bfe:	6033      	str	r3, [r6, #0]
 8017c00:	2f00      	cmp	r7, #0
 8017c02:	d193      	bne.n	8017b2c <rcl_validate_topic_name+0x9c>
 8017c04:	e799      	b.n	8017b3a <rcl_validate_topic_name+0xaa>
 8017c06:	2307      	movs	r3, #7
 8017c08:	6033      	str	r3, [r6, #0]
 8017c0a:	2f00      	cmp	r7, #0
 8017c0c:	d095      	beq.n	8017b3a <rcl_validate_topic_name+0xaa>
 8017c0e:	2301      	movs	r3, #1
 8017c10:	e7c7      	b.n	8017ba2 <rcl_validate_topic_name+0x112>
 8017c12:	bf00      	nop
 8017c14:	0801bf44 	.word	0x0801bf44

08017c18 <rcutils_split>:
 8017c18:	b082      	sub	sp, #8
 8017c1a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c1e:	b08d      	sub	sp, #52	; 0x34
 8017c20:	ac16      	add	r4, sp, #88	; 0x58
 8017c22:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8017c24:	e884 000c 	stmia.w	r4, {r2, r3}
 8017c28:	2f00      	cmp	r7, #0
 8017c2a:	f000 80a8 	beq.w	8017d7e <rcutils_split+0x166>
 8017c2e:	4605      	mov	r5, r0
 8017c30:	2800      	cmp	r0, #0
 8017c32:	d07e      	beq.n	8017d32 <rcutils_split+0x11a>
 8017c34:	7803      	ldrb	r3, [r0, #0]
 8017c36:	2b00      	cmp	r3, #0
 8017c38:	d07b      	beq.n	8017d32 <rcutils_split+0x11a>
 8017c3a:	f10d 0c58 	add.w	ip, sp, #88	; 0x58
 8017c3e:	460e      	mov	r6, r1
 8017c40:	9203      	str	r2, [sp, #12]
 8017c42:	f107 0408 	add.w	r4, r7, #8
 8017c46:	f8dd b068 	ldr.w	fp, [sp, #104]	; 0x68
 8017c4a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8017c4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017c50:	4628      	mov	r0, r5
 8017c52:	f8c4 b000 	str.w	fp, [r4]
 8017c56:	f7e8 fb53 	bl	8000300 <strlen>
 8017c5a:	782c      	ldrb	r4, [r5, #0]
 8017c5c:	182b      	adds	r3, r5, r0
 8017c5e:	1ba4      	subs	r4, r4, r6
 8017c60:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8017c64:	fab4 f484 	clz	r4, r4
 8017c68:	42b3      	cmp	r3, r6
 8017c6a:	bf14      	ite	ne
 8017c6c:	4680      	movne	r8, r0
 8017c6e:	f1a0 0801 	subeq.w	r8, r0, #1
 8017c72:	2001      	movs	r0, #1
 8017c74:	0964      	lsrs	r4, r4, #5
 8017c76:	6038      	str	r0, [r7, #0]
 8017c78:	4544      	cmp	r4, r8
 8017c7a:	d26b      	bcs.n	8017d54 <rcutils_split+0x13c>
 8017c7c:	192b      	adds	r3, r5, r4
 8017c7e:	eb05 0108 	add.w	r1, r5, r8
 8017c82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017c86:	42b2      	cmp	r2, r6
 8017c88:	d101      	bne.n	8017c8e <rcutils_split+0x76>
 8017c8a:	3001      	adds	r0, #1
 8017c8c:	6038      	str	r0, [r7, #0]
 8017c8e:	4299      	cmp	r1, r3
 8017c90:	d1f7      	bne.n	8017c82 <rcutils_split+0x6a>
 8017c92:	9b03      	ldr	r3, [sp, #12]
 8017c94:	0080      	lsls	r0, r0, #2
 8017c96:	4659      	mov	r1, fp
 8017c98:	4798      	blx	r3
 8017c9a:	4603      	mov	r3, r0
 8017c9c:	6078      	str	r0, [r7, #4]
 8017c9e:	2800      	cmp	r0, #0
 8017ca0:	d05f      	beq.n	8017d62 <rcutils_split+0x14a>
 8017ca2:	f04f 0a00 	mov.w	sl, #0
 8017ca6:	46a1      	mov	r9, r4
 8017ca8:	e002      	b.n	8017cb0 <rcutils_split+0x98>
 8017caa:	3401      	adds	r4, #1
 8017cac:	45a0      	cmp	r8, r4
 8017cae:	d922      	bls.n	8017cf6 <rcutils_split+0xde>
 8017cb0:	5d2a      	ldrb	r2, [r5, r4]
 8017cb2:	42b2      	cmp	r2, r6
 8017cb4:	d1f9      	bne.n	8017caa <rcutils_split+0x92>
 8017cb6:	45a1      	cmp	r9, r4
 8017cb8:	eba4 0209 	sub.w	r2, r4, r9
 8017cbc:	d032      	beq.n	8017d24 <rcutils_split+0x10c>
 8017cbe:	4659      	mov	r1, fp
 8017cc0:	1c90      	adds	r0, r2, #2
 8017cc2:	9302      	str	r3, [sp, #8]
 8017cc4:	9b03      	ldr	r3, [sp, #12]
 8017cc6:	9201      	str	r2, [sp, #4]
 8017cc8:	4798      	blx	r3
 8017cca:	9a01      	ldr	r2, [sp, #4]
 8017ccc:	9b02      	ldr	r3, [sp, #8]
 8017cce:	1c51      	adds	r1, r2, #1
 8017cd0:	687a      	ldr	r2, [r7, #4]
 8017cd2:	f843 002a 	str.w	r0, [r3, sl, lsl #2]
 8017cd6:	eb05 0309 	add.w	r3, r5, r9
 8017cda:	f852 002a 	ldr.w	r0, [r2, sl, lsl #2]
 8017cde:	2800      	cmp	r0, #0
 8017ce0:	d04f      	beq.n	8017d82 <rcutils_split+0x16a>
 8017ce2:	4a2b      	ldr	r2, [pc, #172]	; (8017d90 <rcutils_split+0x178>)
 8017ce4:	f10a 0a01 	add.w	sl, sl, #1
 8017ce8:	f001 fbb2 	bl	8019450 <sniprintf>
 8017cec:	687b      	ldr	r3, [r7, #4]
 8017cee:	3401      	adds	r4, #1
 8017cf0:	45a0      	cmp	r8, r4
 8017cf2:	46a1      	mov	r9, r4
 8017cf4:	d8dc      	bhi.n	8017cb0 <rcutils_split+0x98>
 8017cf6:	45a1      	cmp	r9, r4
 8017cf8:	d039      	beq.n	8017d6e <rcutils_split+0x156>
 8017cfa:	eba4 0409 	sub.w	r4, r4, r9
 8017cfe:	4659      	mov	r1, fp
 8017d00:	9301      	str	r3, [sp, #4]
 8017d02:	1ca0      	adds	r0, r4, #2
 8017d04:	9b03      	ldr	r3, [sp, #12]
 8017d06:	4798      	blx	r3
 8017d08:	9b01      	ldr	r3, [sp, #4]
 8017d0a:	4a21      	ldr	r2, [pc, #132]	; (8017d90 <rcutils_split+0x178>)
 8017d0c:	1c61      	adds	r1, r4, #1
 8017d0e:	f843 002a 	str.w	r0, [r3, sl, lsl #2]
 8017d12:	eb05 0309 	add.w	r3, r5, r9
 8017d16:	6878      	ldr	r0, [r7, #4]
 8017d18:	2500      	movs	r5, #0
 8017d1a:	f850 002a 	ldr.w	r0, [r0, sl, lsl #2]
 8017d1e:	f001 fb97 	bl	8019450 <sniprintf>
 8017d22:	e011      	b.n	8017d48 <rcutils_split+0x130>
 8017d24:	683a      	ldr	r2, [r7, #0]
 8017d26:	2100      	movs	r1, #0
 8017d28:	3a01      	subs	r2, #1
 8017d2a:	603a      	str	r2, [r7, #0]
 8017d2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8017d30:	e7dd      	b.n	8017cee <rcutils_split+0xd6>
 8017d32:	ac04      	add	r4, sp, #16
 8017d34:	a804      	add	r0, sp, #16
 8017d36:	f000 f82d 	bl	8017d94 <rcutils_get_zero_initialized_string_array>
 8017d3a:	2500      	movs	r5, #0
 8017d3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017d3e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8017d40:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8017d44:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8017d48:	4628      	mov	r0, r5
 8017d4a:	b00d      	add	sp, #52	; 0x34
 8017d4c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d50:	b002      	add	sp, #8
 8017d52:	4770      	bx	lr
 8017d54:	9b03      	ldr	r3, [sp, #12]
 8017d56:	4659      	mov	r1, fp
 8017d58:	2004      	movs	r0, #4
 8017d5a:	4798      	blx	r3
 8017d5c:	4603      	mov	r3, r0
 8017d5e:	6078      	str	r0, [r7, #4]
 8017d60:	b928      	cbnz	r0, 8017d6e <rcutils_split+0x156>
 8017d62:	4638      	mov	r0, r7
 8017d64:	f000 f834 	bl	8017dd0 <rcutils_string_array_fini>
 8017d68:	b970      	cbnz	r0, 8017d88 <rcutils_split+0x170>
 8017d6a:	2502      	movs	r5, #2
 8017d6c:	e7ec      	b.n	8017d48 <rcutils_split+0x130>
 8017d6e:	683a      	ldr	r2, [r7, #0]
 8017d70:	2100      	movs	r1, #0
 8017d72:	3a01      	subs	r2, #1
 8017d74:	460d      	mov	r5, r1
 8017d76:	603a      	str	r2, [r7, #0]
 8017d78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8017d7c:	e7e4      	b.n	8017d48 <rcutils_split+0x130>
 8017d7e:	250b      	movs	r5, #11
 8017d80:	e7e2      	b.n	8017d48 <rcutils_split+0x130>
 8017d82:	f8c7 a000 	str.w	sl, [r7]
 8017d86:	e7ec      	b.n	8017d62 <rcutils_split+0x14a>
 8017d88:	2502      	movs	r5, #2
 8017d8a:	f7f4 fa01 	bl	800c190 <rcutils_reset_error>
 8017d8e:	e7db      	b.n	8017d48 <rcutils_split+0x130>
 8017d90:	0801ba74 	.word	0x0801ba74

08017d94 <rcutils_get_zero_initialized_string_array>:
 8017d94:	b570      	push	{r4, r5, r6, lr}
 8017d96:	b086      	sub	sp, #24
 8017d98:	4606      	mov	r6, r0
 8017d9a:	4c0c      	ldr	r4, [pc, #48]	; (8017dcc <rcutils_get_zero_initialized_string_array+0x38>)
 8017d9c:	4668      	mov	r0, sp
 8017d9e:	f7f4 f999 	bl	800c0d4 <rcutils_get_zero_initialized_allocator>
 8017da2:	46ee      	mov	lr, sp
 8017da4:	f104 0508 	add.w	r5, r4, #8
 8017da8:	46a4      	mov	ip, r4
 8017daa:	4634      	mov	r4, r6
 8017dac:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017db0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8017db2:	f8de 3000 	ldr.w	r3, [lr]
 8017db6:	602b      	str	r3, [r5, #0]
 8017db8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8017dbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017dbe:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8017dc2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8017dc6:	4630      	mov	r0, r6
 8017dc8:	b006      	add	sp, #24
 8017dca:	bd70      	pop	{r4, r5, r6, pc}
 8017dcc:	200109c8 	.word	0x200109c8

08017dd0 <rcutils_string_array_fini>:
 8017dd0:	b328      	cbz	r0, 8017e1e <rcutils_string_array_fini+0x4e>
 8017dd2:	b570      	push	{r4, r5, r6, lr}
 8017dd4:	4604      	mov	r4, r0
 8017dd6:	6840      	ldr	r0, [r0, #4]
 8017dd8:	b1e0      	cbz	r0, 8017e14 <rcutils_string_array_fini+0x44>
 8017dda:	f104 0008 	add.w	r0, r4, #8
 8017dde:	f7f4 f9b3 	bl	800c148 <rcutils_allocator_is_valid>
 8017de2:	b1c0      	cbz	r0, 8017e16 <rcutils_string_array_fini+0x46>
 8017de4:	6823      	ldr	r3, [r4, #0]
 8017de6:	b1c3      	cbz	r3, 8017e1a <rcutils_string_array_fini+0x4a>
 8017de8:	2500      	movs	r5, #0
 8017dea:	6860      	ldr	r0, [r4, #4]
 8017dec:	462e      	mov	r6, r5
 8017dee:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8017df2:	68e3      	ldr	r3, [r4, #12]
 8017df4:	69a1      	ldr	r1, [r4, #24]
 8017df6:	4798      	blx	r3
 8017df8:	e9d4 3000 	ldrd	r3, r0, [r4]
 8017dfc:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 8017e00:	3501      	adds	r5, #1
 8017e02:	429d      	cmp	r5, r3
 8017e04:	d3f3      	bcc.n	8017dee <rcutils_string_array_fini+0x1e>
 8017e06:	68e3      	ldr	r3, [r4, #12]
 8017e08:	69a1      	ldr	r1, [r4, #24]
 8017e0a:	4798      	blx	r3
 8017e0c:	2300      	movs	r3, #0
 8017e0e:	4618      	mov	r0, r3
 8017e10:	e9c4 3300 	strd	r3, r3, [r4]
 8017e14:	bd70      	pop	{r4, r5, r6, pc}
 8017e16:	200b      	movs	r0, #11
 8017e18:	bd70      	pop	{r4, r5, r6, pc}
 8017e1a:	6860      	ldr	r0, [r4, #4]
 8017e1c:	e7f3      	b.n	8017e06 <rcutils_string_array_fini+0x36>
 8017e1e:	200b      	movs	r0, #11
 8017e20:	4770      	bx	lr
 8017e22:	bf00      	nop

08017e24 <rmw_get_zero_initialized_discovery_options>:
 8017e24:	b510      	push	{r4, lr}
 8017e26:	4604      	mov	r4, r0
 8017e28:	2220      	movs	r2, #32
 8017e2a:	2100      	movs	r1, #0
 8017e2c:	f001 fbea 	bl	8019604 <memset>
 8017e30:	4620      	mov	r0, r4
 8017e32:	bd10      	pop	{r4, pc}

08017e34 <rmw_discovery_options_init>:
 8017e34:	b570      	push	{r4, r5, r6, lr}
 8017e36:	b318      	cbz	r0, 8017e80 <rmw_discovery_options_init+0x4c>
 8017e38:	4604      	mov	r4, r0
 8017e3a:	4610      	mov	r0, r2
 8017e3c:	460e      	mov	r6, r1
 8017e3e:	4615      	mov	r5, r2
 8017e40:	f7f4 f982 	bl	800c148 <rcutils_allocator_is_valid>
 8017e44:	b1e0      	cbz	r0, 8017e80 <rmw_discovery_options_init+0x4c>
 8017e46:	68a3      	ldr	r3, [r4, #8]
 8017e48:	b9d3      	cbnz	r3, 8017e80 <rmw_discovery_options_init+0x4c>
 8017e4a:	6863      	ldr	r3, [r4, #4]
 8017e4c:	b9c3      	cbnz	r3, 8017e80 <rmw_discovery_options_init+0x4c>
 8017e4e:	7823      	ldrb	r3, [r4, #0]
 8017e50:	b90b      	cbnz	r3, 8017e56 <rmw_discovery_options_init+0x22>
 8017e52:	2302      	movs	r3, #2
 8017e54:	7023      	strb	r3, [r4, #0]
 8017e56:	b1a6      	cbz	r6, 8017e82 <rmw_discovery_options_init+0x4e>
 8017e58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8017e5c:	4630      	mov	r0, r6
 8017e5e:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
 8017e62:	4798      	blx	r3
 8017e64:	6060      	str	r0, [r4, #4]
 8017e66:	b170      	cbz	r0, 8017e86 <rmw_discovery_options_init+0x52>
 8017e68:	f104 0c0c 	add.w	ip, r4, #12
 8017e6c:	60a6      	str	r6, [r4, #8]
 8017e6e:	2600      	movs	r6, #0
 8017e70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017e72:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017e76:	682b      	ldr	r3, [r5, #0]
 8017e78:	4630      	mov	r0, r6
 8017e7a:	f8cc 3000 	str.w	r3, [ip]
 8017e7e:	bd70      	pop	{r4, r5, r6, pc}
 8017e80:	260b      	movs	r6, #11
 8017e82:	4630      	mov	r0, r6
 8017e84:	bd70      	pop	{r4, r5, r6, pc}
 8017e86:	260a      	movs	r6, #10
 8017e88:	e7fb      	b.n	8017e82 <rmw_discovery_options_init+0x4e>
 8017e8a:	bf00      	nop

08017e8c <rmw_time_equal>:
 8017e8c:	b4f0      	push	{r4, r5, r6, r7}
 8017e8e:	b084      	sub	sp, #16
 8017e90:	ac04      	add	r4, sp, #16
 8017e92:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8017e96:	4603      	mov	r3, r0
 8017e98:	4925      	ldr	r1, [pc, #148]	; (8017f30 <rmw_time_equal+0xa4>)
 8017e9a:	9d01      	ldr	r5, [sp, #4]
 8017e9c:	4610      	mov	r0, r2
 8017e9e:	4299      	cmp	r1, r3
 8017ea0:	f04f 0202 	mov.w	r2, #2
 8017ea4:	9e03      	ldr	r6, [sp, #12]
 8017ea6:	41aa      	sbcs	r2, r5
 8017ea8:	d330      	bcc.n	8017f0c <rmw_time_equal+0x80>
 8017eaa:	4c22      	ldr	r4, [pc, #136]	; (8017f34 <rmw_time_equal+0xa8>)
 8017eac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017eb0:	fba3 3204 	umull	r3, r2, r3, r4
 8017eb4:	fb04 2205 	mla	r2, r4, r5, r2
 8017eb8:	43dd      	mvns	r5, r3
 8017eba:	1a8c      	subs	r4, r1, r2
 8017ebc:	4285      	cmp	r5, r0
 8017ebe:	41b4      	sbcs	r4, r6
 8017ec0:	d332      	bcc.n	8017f28 <rmw_time_equal+0x9c>
 8017ec2:	eb10 0c03 	adds.w	ip, r0, r3
 8017ec6:	eb42 0106 	adc.w	r1, r2, r6
 8017eca:	4819      	ldr	r0, [pc, #100]	; (8017f30 <rmw_time_equal+0xa4>)
 8017ecc:	2202      	movs	r2, #2
 8017ece:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8017ed0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8017ed2:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 8017ed6:	4298      	cmp	r0, r3
 8017ed8:	41b2      	sbcs	r2, r6
 8017eda:	d31c      	bcc.n	8017f16 <rmw_time_equal+0x8a>
 8017edc:	4c15      	ldr	r4, [pc, #84]	; (8017f34 <rmw_time_equal+0xa8>)
 8017ede:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8017ee2:	fba3 3204 	umull	r3, r2, r3, r4
 8017ee6:	fb04 2206 	mla	r2, r4, r6, r2
 8017eea:	43de      	mvns	r6, r3
 8017eec:	1a84      	subs	r4, r0, r2
 8017eee:	42ae      	cmp	r6, r5
 8017ef0:	41bc      	sbcs	r4, r7
 8017ef2:	d315      	bcc.n	8017f20 <rmw_time_equal+0x94>
 8017ef4:	195b      	adds	r3, r3, r5
 8017ef6:	eb42 0207 	adc.w	r2, r2, r7
 8017efa:	428a      	cmp	r2, r1
 8017efc:	bf08      	it	eq
 8017efe:	4563      	cmpeq	r3, ip
 8017f00:	bf0c      	ite	eq
 8017f02:	2001      	moveq	r0, #1
 8017f04:	2000      	movne	r0, #0
 8017f06:	b004      	add	sp, #16
 8017f08:	bcf0      	pop	{r4, r5, r6, r7}
 8017f0a:	4770      	bx	lr
 8017f0c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8017f10:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017f14:	e7d9      	b.n	8017eca <rmw_time_equal+0x3e>
 8017f16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017f1a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8017f1e:	e7ec      	b.n	8017efa <rmw_time_equal+0x6e>
 8017f20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017f24:	4602      	mov	r2, r0
 8017f26:	e7e8      	b.n	8017efa <rmw_time_equal+0x6e>
 8017f28:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8017f2c:	e7cd      	b.n	8017eca <rmw_time_equal+0x3e>
 8017f2e:	bf00      	nop
 8017f30:	25c17d04 	.word	0x25c17d04
 8017f34:	3b9aca00 	.word	0x3b9aca00

08017f38 <rmw_time_total_nsec>:
 8017f38:	b470      	push	{r4, r5, r6}
 8017f3a:	b085      	sub	sp, #20
 8017f3c:	ac04      	add	r4, sp, #16
 8017f3e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8017f42:	4603      	mov	r3, r0
 8017f44:	4913      	ldr	r1, [pc, #76]	; (8017f94 <rmw_time_total_nsec+0x5c>)
 8017f46:	9d01      	ldr	r5, [sp, #4]
 8017f48:	4610      	mov	r0, r2
 8017f4a:	4299      	cmp	r1, r3
 8017f4c:	f04f 0202 	mov.w	r2, #2
 8017f50:	9e03      	ldr	r6, [sp, #12]
 8017f52:	41aa      	sbcs	r2, r5
 8017f54:	d311      	bcc.n	8017f7a <rmw_time_total_nsec+0x42>
 8017f56:	4c10      	ldr	r4, [pc, #64]	; (8017f98 <rmw_time_total_nsec+0x60>)
 8017f58:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017f5c:	fba3 3204 	umull	r3, r2, r3, r4
 8017f60:	fb04 2205 	mla	r2, r4, r5, r2
 8017f64:	43dd      	mvns	r5, r3
 8017f66:	1a8c      	subs	r4, r1, r2
 8017f68:	4285      	cmp	r5, r0
 8017f6a:	41b4      	sbcs	r4, r6
 8017f6c:	d30c      	bcc.n	8017f88 <rmw_time_total_nsec+0x50>
 8017f6e:	1818      	adds	r0, r3, r0
 8017f70:	eb42 0106 	adc.w	r1, r2, r6
 8017f74:	b005      	add	sp, #20
 8017f76:	bc70      	pop	{r4, r5, r6}
 8017f78:	4770      	bx	lr
 8017f7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017f7e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017f82:	b005      	add	sp, #20
 8017f84:	bc70      	pop	{r4, r5, r6}
 8017f86:	4770      	bx	lr
 8017f88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017f8c:	b005      	add	sp, #20
 8017f8e:	bc70      	pop	{r4, r5, r6}
 8017f90:	4770      	bx	lr
 8017f92:	bf00      	nop
 8017f94:	25c17d04 	.word	0x25c17d04
 8017f98:	3b9aca00 	.word	0x3b9aca00

08017f9c <on_status>:
 8017f9c:	b082      	sub	sp, #8
 8017f9e:	b002      	add	sp, #8
 8017fa0:	4770      	bx	lr
 8017fa2:	bf00      	nop

08017fa4 <on_topic>:
 8017fa4:	4a23      	ldr	r2, [pc, #140]	; (8018034 <on_topic+0x90>)
 8017fa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017faa:	6812      	ldr	r2, [r2, #0]
 8017fac:	b094      	sub	sp, #80	; 0x50
 8017fae:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8017fb0:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
 8017fb4:	9113      	str	r1, [sp, #76]	; 0x4c
 8017fb6:	9312      	str	r3, [sp, #72]	; 0x48
 8017fb8:	b3c2      	cbz	r2, 801802c <on_topic+0x88>
 8017fba:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 8017fbe:	f89d 004e 	ldrb.w	r0, [sp, #78]	; 0x4e
 8017fc2:	e001      	b.n	8017fc8 <on_topic+0x24>
 8017fc4:	6852      	ldr	r2, [r2, #4]
 8017fc6:	b38a      	cbz	r2, 801802c <on_topic+0x88>
 8017fc8:	6894      	ldr	r4, [r2, #8]
 8017fca:	8aa3      	ldrh	r3, [r4, #20]
 8017fcc:	428b      	cmp	r3, r1
 8017fce:	d1f9      	bne.n	8017fc4 <on_topic+0x20>
 8017fd0:	7da3      	ldrb	r3, [r4, #22]
 8017fd2:	4283      	cmp	r3, r0
 8017fd4:	d1f6      	bne.n	8017fc4 <on_topic+0x20>
 8017fd6:	2248      	movs	r2, #72	; 0x48
 8017fd8:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8017fdc:	4668      	mov	r0, sp
 8017fde:	f001 fc86 	bl	80198ee <memcpy>
 8017fe2:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8017fe6:	4620      	mov	r0, r4
 8017fe8:	cb0c      	ldmia	r3, {r2, r3}
 8017fea:	f7fb fdf9 	bl	8013be0 <rmw_uxrce_get_static_input_buffer_for_entity>
 8017fee:	4607      	mov	r7, r0
 8017ff0:	b1e0      	cbz	r0, 801802c <on_topic+0x88>
 8017ff2:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8017ff6:	462a      	mov	r2, r5
 8017ff8:	4630      	mov	r0, r6
 8017ffa:	f108 0110 	add.w	r1, r8, #16
 8017ffe:	f7f4 fc43 	bl	800c888 <ucdr_deserialize_array_uint8_t>
 8018002:	b930      	cbnz	r0, 8018012 <on_topic+0x6e>
 8018004:	4639      	mov	r1, r7
 8018006:	480c      	ldr	r0, [pc, #48]	; (8018038 <on_topic+0x94>)
 8018008:	b014      	add	sp, #80	; 0x50
 801800a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801800e:	f000 b8bd 	b.w	801818c <put_memory>
 8018012:	f8c8 4814 	str.w	r4, [r8, #2068]	; 0x814
 8018016:	f8c8 5810 	str.w	r5, [r8, #2064]	; 0x810
 801801a:	f000 f97b 	bl	8018314 <rmw_uros_epoch_nanos>
 801801e:	f508 6202 	add.w	r2, r8, #2080	; 0x820
 8018022:	2305      	movs	r3, #5
 8018024:	e942 0102 	strd	r0, r1, [r2, #-8]
 8018028:	f888 3820 	strb.w	r3, [r8, #2080]	; 0x820
 801802c:	b014      	add	sp, #80	; 0x50
 801802e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018032:	bf00      	nop
 8018034:	2001090c 	.word	0x2001090c
 8018038:	200108fc 	.word	0x200108fc

0801803c <on_request>:
 801803c:	4824      	ldr	r0, [pc, #144]	; (80180d0 <on_request+0x94>)
 801803e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018042:	6800      	ldr	r0, [r0, #0]
 8018044:	b094      	sub	sp, #80	; 0x50
 8018046:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8018048:	f8bd 706c 	ldrh.w	r7, [sp, #108]	; 0x6c
 801804c:	9113      	str	r1, [sp, #76]	; 0x4c
 801804e:	2800      	cmp	r0, #0
 8018050:	d03b      	beq.n	80180ca <on_request+0x8e>
 8018052:	461d      	mov	r5, r3
 8018054:	e001      	b.n	801805a <on_request+0x1e>
 8018056:	6840      	ldr	r0, [r0, #4]
 8018058:	b3b8      	cbz	r0, 80180ca <on_request+0x8e>
 801805a:	6884      	ldr	r4, [r0, #8]
 801805c:	8b21      	ldrh	r1, [r4, #24]
 801805e:	4291      	cmp	r1, r2
 8018060:	d1f9      	bne.n	8018056 <on_request+0x1a>
 8018062:	2248      	movs	r2, #72	; 0x48
 8018064:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8018068:	4668      	mov	r0, sp
 801806a:	f001 fc40 	bl	80198ee <memcpy>
 801806e:	f104 0320 	add.w	r3, r4, #32
 8018072:	4620      	mov	r0, r4
 8018074:	cb0c      	ldmia	r3, {r2, r3}
 8018076:	f7fb fdb3 	bl	8013be0 <rmw_uxrce_get_static_input_buffer_for_entity>
 801807a:	4680      	mov	r8, r0
 801807c:	b328      	cbz	r0, 80180ca <on_request+0x8e>
 801807e:	4630      	mov	r0, r6
 8018080:	f8d8 6008 	ldr.w	r6, [r8, #8]
 8018084:	463a      	mov	r2, r7
 8018086:	f106 0110 	add.w	r1, r6, #16
 801808a:	f7f4 fbfd 	bl	800c888 <ucdr_deserialize_array_uint8_t>
 801808e:	b930      	cbnz	r0, 801809e <on_request+0x62>
 8018090:	4641      	mov	r1, r8
 8018092:	4810      	ldr	r0, [pc, #64]	; (80180d4 <on_request+0x98>)
 8018094:	b014      	add	sp, #80	; 0x50
 8018096:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801809a:	f000 b877 	b.w	801818c <put_memory>
 801809e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80180a0:	f606 0c28 	addw	ip, r6, #2088	; 0x828
 80180a4:	f8c6 4814 	str.w	r4, [r6, #2068]	; 0x814
 80180a8:	f8c6 7810 	str.w	r7, [r6, #2064]	; 0x810
 80180ac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80180b0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80180b4:	e88c 0003 	stmia.w	ip, {r0, r1}
 80180b8:	f000 f92c 	bl	8018314 <rmw_uros_epoch_nanos>
 80180bc:	f506 6202 	add.w	r2, r6, #2080	; 0x820
 80180c0:	2303      	movs	r3, #3
 80180c2:	e942 0102 	strd	r0, r1, [r2, #-8]
 80180c6:	f886 3820 	strb.w	r3, [r6, #2080]	; 0x820
 80180ca:	b014      	add	sp, #80	; 0x50
 80180cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80180d0:	200108dc 	.word	0x200108dc
 80180d4:	200108fc 	.word	0x200108fc

080180d8 <on_reply>:
 80180d8:	4822      	ldr	r0, [pc, #136]	; (8018164 <on_reply+0x8c>)
 80180da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80180de:	6800      	ldr	r0, [r0, #0]
 80180e0:	b094      	sub	sp, #80	; 0x50
 80180e2:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 80180e4:	f8bd 706c 	ldrh.w	r7, [sp, #108]	; 0x6c
 80180e8:	9113      	str	r1, [sp, #76]	; 0x4c
 80180ea:	b3b8      	cbz	r0, 801815c <on_reply+0x84>
 80180ec:	461d      	mov	r5, r3
 80180ee:	e001      	b.n	80180f4 <on_reply+0x1c>
 80180f0:	6840      	ldr	r0, [r0, #4]
 80180f2:	b398      	cbz	r0, 801815c <on_reply+0x84>
 80180f4:	6884      	ldr	r4, [r0, #8]
 80180f6:	8b21      	ldrh	r1, [r4, #24]
 80180f8:	4291      	cmp	r1, r2
 80180fa:	d1f9      	bne.n	80180f0 <on_reply+0x18>
 80180fc:	2248      	movs	r2, #72	; 0x48
 80180fe:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8018102:	4668      	mov	r0, sp
 8018104:	f001 fbf3 	bl	80198ee <memcpy>
 8018108:	f104 0320 	add.w	r3, r4, #32
 801810c:	4620      	mov	r0, r4
 801810e:	cb0c      	ldmia	r3, {r2, r3}
 8018110:	f7fb fd66 	bl	8013be0 <rmw_uxrce_get_static_input_buffer_for_entity>
 8018114:	4680      	mov	r8, r0
 8018116:	b308      	cbz	r0, 801815c <on_reply+0x84>
 8018118:	4630      	mov	r0, r6
 801811a:	f8d8 6008 	ldr.w	r6, [r8, #8]
 801811e:	463a      	mov	r2, r7
 8018120:	f106 0110 	add.w	r1, r6, #16
 8018124:	f7f4 fbb0 	bl	800c888 <ucdr_deserialize_array_uint8_t>
 8018128:	b930      	cbnz	r0, 8018138 <on_reply+0x60>
 801812a:	4641      	mov	r1, r8
 801812c:	480e      	ldr	r0, [pc, #56]	; (8018168 <on_reply+0x90>)
 801812e:	b014      	add	sp, #80	; 0x50
 8018130:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018134:	f000 b82a 	b.w	801818c <put_memory>
 8018138:	2200      	movs	r2, #0
 801813a:	f8c6 4814 	str.w	r4, [r6, #2068]	; 0x814
 801813e:	f8c6 7810 	str.w	r7, [r6, #2064]	; 0x810
 8018142:	f8c6 282c 	str.w	r2, [r6, #2092]	; 0x82c
 8018146:	f8c6 5828 	str.w	r5, [r6, #2088]	; 0x828
 801814a:	f000 f8e3 	bl	8018314 <rmw_uros_epoch_nanos>
 801814e:	f506 6202 	add.w	r2, r6, #2080	; 0x820
 8018152:	2304      	movs	r3, #4
 8018154:	e942 0102 	strd	r0, r1, [r2, #-8]
 8018158:	f886 3820 	strb.w	r3, [r6, #2080]	; 0x820
 801815c:	b014      	add	sp, #80	; 0x50
 801815e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018162:	bf00      	nop
 8018164:	2000bf28 	.word	0x2000bf28
 8018168:	200108fc 	.word	0x200108fc

0801816c <get_memory>:
 801816c:	4603      	mov	r3, r0
 801816e:	6840      	ldr	r0, [r0, #4]
 8018170:	b158      	cbz	r0, 801818a <get_memory+0x1e>
 8018172:	6842      	ldr	r2, [r0, #4]
 8018174:	605a      	str	r2, [r3, #4]
 8018176:	b10a      	cbz	r2, 801817c <get_memory+0x10>
 8018178:	2100      	movs	r1, #0
 801817a:	6011      	str	r1, [r2, #0]
 801817c:	681a      	ldr	r2, [r3, #0]
 801817e:	6042      	str	r2, [r0, #4]
 8018180:	b102      	cbz	r2, 8018184 <get_memory+0x18>
 8018182:	6010      	str	r0, [r2, #0]
 8018184:	2200      	movs	r2, #0
 8018186:	6002      	str	r2, [r0, #0]
 8018188:	6018      	str	r0, [r3, #0]
 801818a:	4770      	bx	lr

0801818c <put_memory>:
 801818c:	680b      	ldr	r3, [r1, #0]
 801818e:	b10b      	cbz	r3, 8018194 <put_memory+0x8>
 8018190:	684a      	ldr	r2, [r1, #4]
 8018192:	605a      	str	r2, [r3, #4]
 8018194:	684a      	ldr	r2, [r1, #4]
 8018196:	b102      	cbz	r2, 801819a <put_memory+0xe>
 8018198:	6013      	str	r3, [r2, #0]
 801819a:	6803      	ldr	r3, [r0, #0]
 801819c:	428b      	cmp	r3, r1
 801819e:	6843      	ldr	r3, [r0, #4]
 80181a0:	bf08      	it	eq
 80181a2:	6002      	streq	r2, [r0, #0]
 80181a4:	604b      	str	r3, [r1, #4]
 80181a6:	b103      	cbz	r3, 80181aa <put_memory+0x1e>
 80181a8:	6019      	str	r1, [r3, #0]
 80181aa:	2300      	movs	r3, #0
 80181ac:	600b      	str	r3, [r1, #0]
 80181ae:	6041      	str	r1, [r0, #4]
 80181b0:	4770      	bx	lr
 80181b2:	bf00      	nop

080181b4 <rmw_create_guard_condition>:
 80181b4:	b538      	push	{r3, r4, r5, lr}
 80181b6:	4605      	mov	r5, r0
 80181b8:	4808      	ldr	r0, [pc, #32]	; (80181dc <rmw_create_guard_condition+0x28>)
 80181ba:	f7ff ffd7 	bl	801816c <get_memory>
 80181be:	4603      	mov	r3, r0
 80181c0:	b148      	cbz	r0, 80181d6 <rmw_create_guard_condition+0x22>
 80181c2:	6884      	ldr	r4, [r0, #8]
 80181c4:	2300      	movs	r3, #0
 80181c6:	61e5      	str	r5, [r4, #28]
 80181c8:	7423      	strb	r3, [r4, #16]
 80181ca:	f7fa fa99 	bl	8012700 <rmw_get_implementation_identifier>
 80181ce:	f104 0314 	add.w	r3, r4, #20
 80181d2:	e9c4 0405 	strd	r0, r4, [r4, #20]
 80181d6:	4618      	mov	r0, r3
 80181d8:	bd38      	pop	{r3, r4, r5, pc}
 80181da:	bf00      	nop
 80181dc:	2001089c 	.word	0x2001089c

080181e0 <rmw_destroy_guard_condition>:
 80181e0:	b508      	push	{r3, lr}
 80181e2:	4b08      	ldr	r3, [pc, #32]	; (8018204 <rmw_destroy_guard_condition+0x24>)
 80181e4:	6819      	ldr	r1, [r3, #0]
 80181e6:	b911      	cbnz	r1, 80181ee <rmw_destroy_guard_condition+0xe>
 80181e8:	e00a      	b.n	8018200 <rmw_destroy_guard_condition+0x20>
 80181ea:	6849      	ldr	r1, [r1, #4]
 80181ec:	b141      	cbz	r1, 8018200 <rmw_destroy_guard_condition+0x20>
 80181ee:	688b      	ldr	r3, [r1, #8]
 80181f0:	3314      	adds	r3, #20
 80181f2:	4298      	cmp	r0, r3
 80181f4:	d1f9      	bne.n	80181ea <rmw_destroy_guard_condition+0xa>
 80181f6:	4803      	ldr	r0, [pc, #12]	; (8018204 <rmw_destroy_guard_condition+0x24>)
 80181f8:	f7ff ffc8 	bl	801818c <put_memory>
 80181fc:	2000      	movs	r0, #0
 80181fe:	bd08      	pop	{r3, pc}
 8018200:	2001      	movs	r0, #1
 8018202:	bd08      	pop	{r3, pc}
 8018204:	2001089c 	.word	0x2001089c

08018208 <destroy_topic>:
 8018208:	b538      	push	{r3, r4, r5, lr}
 801820a:	6985      	ldr	r5, [r0, #24]
 801820c:	b1dd      	cbz	r5, 8018246 <destroy_topic+0x3e>
 801820e:	4604      	mov	r4, r0
 8018210:	6928      	ldr	r0, [r5, #16]
 8018212:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8018216:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801821a:	6922      	ldr	r2, [r4, #16]
 801821c:	6819      	ldr	r1, [r3, #0]
 801821e:	f7fb ff51 	bl	80140c4 <uxr_buffer_delete_entity>
 8018222:	4602      	mov	r2, r0
 8018224:	6928      	ldr	r0, [r5, #16]
 8018226:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801822a:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801822e:	f7fb fdd9 	bl	8013de4 <run_xrce_session>
 8018232:	4603      	mov	r3, r0
 8018234:	4620      	mov	r0, r4
 8018236:	2b00      	cmp	r3, #0
 8018238:	bf14      	ite	ne
 801823a:	2400      	movne	r4, #0
 801823c:	2402      	moveq	r4, #2
 801823e:	f7fb fcc3 	bl	8013bc8 <rmw_uxrce_fini_topic_memory>
 8018242:	4620      	mov	r0, r4
 8018244:	bd38      	pop	{r3, r4, r5, pc}
 8018246:	2401      	movs	r4, #1
 8018248:	4620      	mov	r0, r4
 801824a:	bd38      	pop	{r3, r4, r5, pc}

0801824c <flush_session>:
 801824c:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
 801824e:	f7fc beeb 	b.w	8015028 <uxr_run_session_until_confirm_delivery>
 8018252:	bf00      	nop

08018254 <rmw_publish>:
 8018254:	2800      	cmp	r0, #0
 8018256:	d053      	beq.n	8018300 <rmw_publish+0xac>
 8018258:	b570      	push	{r4, r5, r6, lr}
 801825a:	460d      	mov	r5, r1
 801825c:	b08e      	sub	sp, #56	; 0x38
 801825e:	2900      	cmp	r1, #0
 8018260:	d04b      	beq.n	80182fa <rmw_publish+0xa6>
 8018262:	4604      	mov	r4, r0
 8018264:	6800      	ldr	r0, [r0, #0]
 8018266:	f7fb fe89 	bl	8013f7c <is_uxrce_rmw_identifier_valid>
 801826a:	2800      	cmp	r0, #0
 801826c:	d045      	beq.n	80182fa <rmw_publish+0xa6>
 801826e:	6866      	ldr	r6, [r4, #4]
 8018270:	2e00      	cmp	r6, #0
 8018272:	d042      	beq.n	80182fa <rmw_publish+0xa6>
 8018274:	69b4      	ldr	r4, [r6, #24]
 8018276:	4628      	mov	r0, r5
 8018278:	6923      	ldr	r3, [r4, #16]
 801827a:	4798      	blx	r3
 801827c:	69f3      	ldr	r3, [r6, #28]
 801827e:	9005      	str	r0, [sp, #20]
 8018280:	b113      	cbz	r3, 8018288 <rmw_publish+0x34>
 8018282:	a805      	add	r0, sp, #20
 8018284:	4798      	blx	r3
 8018286:	9805      	ldr	r0, [sp, #20]
 8018288:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 801828c:	691b      	ldr	r3, [r3, #16]
 801828e:	9000      	str	r0, [sp, #0]
 8018290:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8018294:	6972      	ldr	r2, [r6, #20]
 8018296:	ab06      	add	r3, sp, #24
 8018298:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 801829a:	f7fe f93f 	bl	801651c <uxr_prepare_output_stream>
 801829e:	b1d8      	cbz	r0, 80182d8 <rmw_publish+0x84>
 80182a0:	68a3      	ldr	r3, [r4, #8]
 80182a2:	a906      	add	r1, sp, #24
 80182a4:	4628      	mov	r0, r5
 80182a6:	4798      	blx	r3
 80182a8:	6a33      	ldr	r3, [r6, #32]
 80182aa:	4604      	mov	r4, r0
 80182ac:	b10b      	cbz	r3, 80182b2 <rmw_publish+0x5e>
 80182ae:	a806      	add	r0, sp, #24
 80182b0:	4798      	blx	r3
 80182b2:	f896 307a 	ldrb.w	r3, [r6, #122]	; 0x7a
 80182b6:	2b01      	cmp	r3, #1
 80182b8:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 80182bc:	d022      	beq.n	8018304 <rmw_publish+0xb0>
 80182be:	6918      	ldr	r0, [r3, #16]
 80182c0:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
 80182c2:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80182c6:	f7fc feaf 	bl	8015028 <uxr_run_session_until_confirm_delivery>
 80182ca:	4020      	ands	r0, r4
 80182cc:	b2c4      	uxtb	r4, r0
 80182ce:	f084 0001 	eor.w	r0, r4, #1
 80182d2:	b2c0      	uxtb	r0, r0
 80182d4:	b00e      	add	sp, #56	; 0x38
 80182d6:	bd70      	pop	{r4, r5, r6, pc}
 80182d8:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 80182dc:	6918      	ldr	r0, [r3, #16]
 80182de:	9b05      	ldr	r3, [sp, #20]
 80182e0:	9602      	str	r6, [sp, #8]
 80182e2:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80182e6:	9300      	str	r3, [sp, #0]
 80182e8:	4b09      	ldr	r3, [pc, #36]	; (8018310 <rmw_publish+0xbc>)
 80182ea:	9301      	str	r3, [sp, #4]
 80182ec:	ab06      	add	r3, sp, #24
 80182ee:	6972      	ldr	r2, [r6, #20]
 80182f0:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 80182f2:	f7fe f943 	bl	801657c <uxr_prepare_output_stream_fragmented>
 80182f6:	2800      	cmp	r0, #0
 80182f8:	d1d2      	bne.n	80182a0 <rmw_publish+0x4c>
 80182fa:	2001      	movs	r0, #1
 80182fc:	b00e      	add	sp, #56	; 0x38
 80182fe:	bd70      	pop	{r4, r5, r6, pc}
 8018300:	2001      	movs	r0, #1
 8018302:	4770      	bx	lr
 8018304:	6918      	ldr	r0, [r3, #16]
 8018306:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801830a:	f7fc fad3 	bl	80148b4 <uxr_flash_output_streams>
 801830e:	e7de      	b.n	80182ce <rmw_publish+0x7a>
 8018310:	0801824d 	.word	0x0801824d

08018314 <rmw_uros_epoch_nanos>:
 8018314:	4b05      	ldr	r3, [pc, #20]	; (801832c <rmw_uros_epoch_nanos+0x18>)
 8018316:	681b      	ldr	r3, [r3, #0]
 8018318:	b123      	cbz	r3, 8018324 <rmw_uros_epoch_nanos+0x10>
 801831a:	6898      	ldr	r0, [r3, #8]
 801831c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8018320:	f7fc babe 	b.w	80148a0 <uxr_epoch_nanos>
 8018324:	2000      	movs	r0, #0
 8018326:	2100      	movs	r1, #0
 8018328:	4770      	bx	lr
 801832a:	bf00      	nop
 801832c:	200108ec 	.word	0x200108ec

08018330 <ucdr_serialize_string>:
 8018330:	b510      	push	{r4, lr}
 8018332:	b082      	sub	sp, #8
 8018334:	4604      	mov	r4, r0
 8018336:	4608      	mov	r0, r1
 8018338:	9101      	str	r1, [sp, #4]
 801833a:	f7e7 ffe1 	bl	8000300 <strlen>
 801833e:	4602      	mov	r2, r0
 8018340:	9901      	ldr	r1, [sp, #4]
 8018342:	4620      	mov	r0, r4
 8018344:	3201      	adds	r2, #1
 8018346:	b002      	add	sp, #8
 8018348:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801834c:	f7f5 be10 	b.w	800df70 <ucdr_serialize_sequence_char>

08018350 <ucdr_deserialize_string>:
 8018350:	b500      	push	{lr}
 8018352:	b083      	sub	sp, #12
 8018354:	ab01      	add	r3, sp, #4
 8018356:	f7f5 fe1d 	bl	800df94 <ucdr_deserialize_sequence_char>
 801835a:	b003      	add	sp, #12
 801835c:	f85d fb04 	ldr.w	pc, [sp], #4

08018360 <uxr_init_input_best_effort_stream>:
 8018360:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018364:	8003      	strh	r3, [r0, #0]
 8018366:	4770      	bx	lr

08018368 <uxr_reset_input_best_effort_stream>:
 8018368:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801836c:	8003      	strh	r3, [r0, #0]
 801836e:	4770      	bx	lr

08018370 <uxr_receive_best_effort_message>:
 8018370:	b538      	push	{r3, r4, r5, lr}
 8018372:	4604      	mov	r4, r0
 8018374:	8800      	ldrh	r0, [r0, #0]
 8018376:	460d      	mov	r5, r1
 8018378:	f000 fd46 	bl	8018e08 <uxr_seq_num_cmp>
 801837c:	4603      	mov	r3, r0
 801837e:	0fc0      	lsrs	r0, r0, #31
 8018380:	2b00      	cmp	r3, #0
 8018382:	bfb8      	it	lt
 8018384:	8025      	strhlt	r5, [r4, #0]
 8018386:	bd38      	pop	{r3, r4, r5, pc}

08018388 <on_full_input_buffer>:
 8018388:	b570      	push	{r4, r5, r6, lr}
 801838a:	460c      	mov	r4, r1
 801838c:	4605      	mov	r5, r0
 801838e:	8908      	ldrh	r0, [r1, #8]
 8018390:	682b      	ldr	r3, [r5, #0]
 8018392:	7d26      	ldrb	r6, [r4, #20]
 8018394:	e9d1 1200 	ldrd	r1, r2, [r1]
 8018398:	fbb2 f2f0 	udiv	r2, r2, r0
 801839c:	eba3 0c01 	sub.w	ip, r3, r1
 80183a0:	fbbc fcf2 	udiv	ip, ip, r2
 80183a4:	f10c 0c01 	add.w	ip, ip, #1
 80183a8:	fa1f f38c 	uxth.w	r3, ip
 80183ac:	fbb3 fcf0 	udiv	ip, r3, r0
 80183b0:	fb00 331c 	mls	r3, r0, ip, r3
 80183b4:	b29b      	uxth	r3, r3
 80183b6:	fb02 f303 	mul.w	r3, r2, r3
 80183ba:	1d18      	adds	r0, r3, #4
 80183bc:	4408      	add	r0, r1
 80183be:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80183c2:	b116      	cbz	r6, 80183ca <on_full_input_buffer+0x42>
 80183c4:	2600      	movs	r6, #0
 80183c6:	f840 6c04 	str.w	r6, [r0, #-4]
 80183ca:	2a03      	cmp	r2, #3
 80183cc:	d801      	bhi.n	80183d2 <on_full_input_buffer+0x4a>
 80183ce:	2001      	movs	r0, #1
 80183d0:	bd70      	pop	{r4, r5, r6, pc}
 80183d2:	3308      	adds	r3, #8
 80183d4:	4628      	mov	r0, r5
 80183d6:	3a04      	subs	r2, #4
 80183d8:	4419      	add	r1, r3
 80183da:	692b      	ldr	r3, [r5, #16]
 80183dc:	f7f5 fd4c 	bl	800de78 <ucdr_init_buffer_origin>
 80183e0:	4628      	mov	r0, r5
 80183e2:	4622      	mov	r2, r4
 80183e4:	4902      	ldr	r1, [pc, #8]	; (80183f0 <on_full_input_buffer+0x68>)
 80183e6:	f7f5 fd23 	bl	800de30 <ucdr_set_on_full_buffer_callback>
 80183ea:	2000      	movs	r0, #0
 80183ec:	bd70      	pop	{r4, r5, r6, pc}
 80183ee:	bf00      	nop
 80183f0:	08018389 	.word	0x08018389

080183f4 <uxr_init_input_reliable_stream>:
 80183f4:	b510      	push	{r4, lr}
 80183f6:	e9c0 1200 	strd	r1, r2, [r0]
 80183fa:	2400      	movs	r4, #0
 80183fc:	9a02      	ldr	r2, [sp, #8]
 80183fe:	8103      	strh	r3, [r0, #8]
 8018400:	6102      	str	r2, [r0, #16]
 8018402:	7504      	strb	r4, [r0, #20]
 8018404:	b1c3      	cbz	r3, 8018438 <uxr_init_input_reliable_stream+0x44>
 8018406:	600c      	str	r4, [r1, #0]
 8018408:	8901      	ldrh	r1, [r0, #8]
 801840a:	2901      	cmp	r1, #1
 801840c:	d914      	bls.n	8018438 <uxr_init_input_reliable_stream+0x44>
 801840e:	f04f 0c01 	mov.w	ip, #1
 8018412:	6843      	ldr	r3, [r0, #4]
 8018414:	f10c 0e01 	add.w	lr, ip, #1
 8018418:	fbbc f2f1 	udiv	r2, ip, r1
 801841c:	fbb3 f3f1 	udiv	r3, r3, r1
 8018420:	fb01 c212 	mls	r2, r1, r2, ip
 8018424:	fa1f fc8e 	uxth.w	ip, lr
 8018428:	b292      	uxth	r2, r2
 801842a:	fb02 f303 	mul.w	r3, r2, r3
 801842e:	6802      	ldr	r2, [r0, #0]
 8018430:	50d4      	str	r4, [r2, r3]
 8018432:	8901      	ldrh	r1, [r0, #8]
 8018434:	4561      	cmp	r1, ip
 8018436:	d8ec      	bhi.n	8018412 <uxr_init_input_reliable_stream+0x1e>
 8018438:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801843c:	60c3      	str	r3, [r0, #12]
 801843e:	bd10      	pop	{r4, pc}

08018440 <uxr_reset_input_reliable_stream>:
 8018440:	8901      	ldrh	r1, [r0, #8]
 8018442:	b1d9      	cbz	r1, 801847c <uxr_reset_input_reliable_stream+0x3c>
 8018444:	b510      	push	{r4, lr}
 8018446:	f04f 0e00 	mov.w	lr, #0
 801844a:	46f4      	mov	ip, lr
 801844c:	4674      	mov	r4, lr
 801844e:	6843      	ldr	r3, [r0, #4]
 8018450:	f10e 0e01 	add.w	lr, lr, #1
 8018454:	fbbc f2f1 	udiv	r2, ip, r1
 8018458:	fbb3 f3f1 	udiv	r3, r3, r1
 801845c:	fb01 c212 	mls	r2, r1, r2, ip
 8018460:	fa1f fc8e 	uxth.w	ip, lr
 8018464:	b292      	uxth	r2, r2
 8018466:	fb02 f303 	mul.w	r3, r2, r3
 801846a:	6802      	ldr	r2, [r0, #0]
 801846c:	50d4      	str	r4, [r2, r3]
 801846e:	8901      	ldrh	r1, [r0, #8]
 8018470:	4561      	cmp	r1, ip
 8018472:	d8ec      	bhi.n	801844e <uxr_reset_input_reliable_stream+0xe>
 8018474:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018478:	60c3      	str	r3, [r0, #12]
 801847a:	bd10      	pop	{r4, pc}
 801847c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018480:	60c3      	str	r3, [r0, #12]
 8018482:	4770      	bx	lr

08018484 <uxr_receive_reliable_message>:
 8018484:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018488:	4604      	mov	r4, r0
 801848a:	460d      	mov	r5, r1
 801848c:	8901      	ldrh	r1, [r0, #8]
 801848e:	4617      	mov	r7, r2
 8018490:	8980      	ldrh	r0, [r0, #12]
 8018492:	4698      	mov	r8, r3
 8018494:	f000 fcb0 	bl	8018df8 <uxr_seq_num_add>
 8018498:	4629      	mov	r1, r5
 801849a:	4606      	mov	r6, r0
 801849c:	89a0      	ldrh	r0, [r4, #12]
 801849e:	f000 fcb3 	bl	8018e08 <uxr_seq_num_cmp>
 80184a2:	2800      	cmp	r0, #0
 80184a4:	db0a      	blt.n	80184bc <uxr_receive_reliable_message+0x38>
 80184a6:	2600      	movs	r6, #0
 80184a8:	4629      	mov	r1, r5
 80184aa:	89e0      	ldrh	r0, [r4, #14]
 80184ac:	f000 fcac 	bl	8018e08 <uxr_seq_num_cmp>
 80184b0:	2800      	cmp	r0, #0
 80184b2:	da00      	bge.n	80184b6 <uxr_receive_reliable_message+0x32>
 80184b4:	81e5      	strh	r5, [r4, #14]
 80184b6:	4630      	mov	r0, r6
 80184b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80184bc:	4630      	mov	r0, r6
 80184be:	4629      	mov	r1, r5
 80184c0:	f000 fca2 	bl	8018e08 <uxr_seq_num_cmp>
 80184c4:	2800      	cmp	r0, #0
 80184c6:	dbee      	blt.n	80184a6 <uxr_receive_reliable_message+0x22>
 80184c8:	6923      	ldr	r3, [r4, #16]
 80184ca:	4638      	mov	r0, r7
 80184cc:	4798      	blx	r3
 80184ce:	4681      	mov	r9, r0
 80184d0:	2101      	movs	r1, #1
 80184d2:	89a0      	ldrh	r0, [r4, #12]
 80184d4:	f000 fc90 	bl	8018df8 <uxr_seq_num_add>
 80184d8:	f1b9 0f00 	cmp.w	r9, #0
 80184dc:	bf08      	it	eq
 80184de:	4285      	cmpeq	r5, r0
 80184e0:	bf0c      	ite	eq
 80184e2:	2601      	moveq	r6, #1
 80184e4:	2600      	movne	r6, #0
 80184e6:	d104      	bne.n	80184f2 <uxr_receive_reliable_message+0x6e>
 80184e8:	2300      	movs	r3, #0
 80184ea:	9a08      	ldr	r2, [sp, #32]
 80184ec:	81a0      	strh	r0, [r4, #12]
 80184ee:	7013      	strb	r3, [r2, #0]
 80184f0:	e7da      	b.n	80184a8 <uxr_receive_reliable_message+0x24>
 80184f2:	8922      	ldrh	r2, [r4, #8]
 80184f4:	6863      	ldr	r3, [r4, #4]
 80184f6:	fbb5 f0f2 	udiv	r0, r5, r2
 80184fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80184fe:	fb02 5010 	mls	r0, r2, r0, r5
 8018502:	b280      	uxth	r0, r0
 8018504:	fb03 f000 	mul.w	r0, r3, r0
 8018508:	6823      	ldr	r3, [r4, #0]
 801850a:	3004      	adds	r0, #4
 801850c:	4418      	add	r0, r3
 801850e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8018512:	2b00      	cmp	r3, #0
 8018514:	d1c7      	bne.n	80184a6 <uxr_receive_reliable_message+0x22>
 8018516:	4639      	mov	r1, r7
 8018518:	4642      	mov	r2, r8
 801851a:	f001 f9e8 	bl	80198ee <memcpy>
 801851e:	8921      	ldrh	r1, [r4, #8]
 8018520:	6863      	ldr	r3, [r4, #4]
 8018522:	fbb5 f2f1 	udiv	r2, r5, r1
 8018526:	fbb3 f3f1 	udiv	r3, r3, r1
 801852a:	fb01 5212 	mls	r2, r1, r2, r5
 801852e:	b292      	uxth	r2, r2
 8018530:	fb02 f303 	mul.w	r3, r2, r3
 8018534:	6822      	ldr	r2, [r4, #0]
 8018536:	f842 8003 	str.w	r8, [r2, r3]
 801853a:	2301      	movs	r3, #1
 801853c:	9a08      	ldr	r2, [sp, #32]
 801853e:	7013      	strb	r3, [r2, #0]
 8018540:	f1b9 0f00 	cmp.w	r9, #0
 8018544:	d0af      	beq.n	80184a6 <uxr_receive_reliable_message+0x22>
 8018546:	89a6      	ldrh	r6, [r4, #12]
 8018548:	2101      	movs	r1, #1
 801854a:	4630      	mov	r0, r6
 801854c:	f000 fc54 	bl	8018df8 <uxr_seq_num_add>
 8018550:	8921      	ldrh	r1, [r4, #8]
 8018552:	6863      	ldr	r3, [r4, #4]
 8018554:	4606      	mov	r6, r0
 8018556:	fbb0 f2f1 	udiv	r2, r0, r1
 801855a:	fbb3 f3f1 	udiv	r3, r3, r1
 801855e:	fb01 0212 	mls	r2, r1, r2, r0
 8018562:	6820      	ldr	r0, [r4, #0]
 8018564:	b292      	uxth	r2, r2
 8018566:	fb02 f303 	mul.w	r3, r2, r3
 801856a:	3304      	adds	r3, #4
 801856c:	4418      	add	r0, r3
 801856e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8018572:	2b00      	cmp	r3, #0
 8018574:	d097      	beq.n	80184a6 <uxr_receive_reliable_message+0x22>
 8018576:	6923      	ldr	r3, [r4, #16]
 8018578:	4798      	blx	r3
 801857a:	2802      	cmp	r0, #2
 801857c:	d002      	beq.n	8018584 <uxr_receive_reliable_message+0x100>
 801857e:	2801      	cmp	r0, #1
 8018580:	d0e2      	beq.n	8018548 <uxr_receive_reliable_message+0xc4>
 8018582:	e790      	b.n	80184a6 <uxr_receive_reliable_message+0x22>
 8018584:	2601      	movs	r6, #1
 8018586:	e78f      	b.n	80184a8 <uxr_receive_reliable_message+0x24>

08018588 <uxr_next_input_reliable_buffer_available>:
 8018588:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801858c:	4604      	mov	r4, r0
 801858e:	460f      	mov	r7, r1
 8018590:	8980      	ldrh	r0, [r0, #12]
 8018592:	2101      	movs	r1, #1
 8018594:	4690      	mov	r8, r2
 8018596:	f000 fc2f 	bl	8018df8 <uxr_seq_num_add>
 801859a:	8922      	ldrh	r2, [r4, #8]
 801859c:	6866      	ldr	r6, [r4, #4]
 801859e:	fbb0 f3f2 	udiv	r3, r0, r2
 80185a2:	fbb6 f6f2 	udiv	r6, r6, r2
 80185a6:	fb02 0313 	mls	r3, r2, r3, r0
 80185aa:	b29b      	uxth	r3, r3
 80185ac:	fb03 f606 	mul.w	r6, r3, r6
 80185b0:	6823      	ldr	r3, [r4, #0]
 80185b2:	3604      	adds	r6, #4
 80185b4:	441e      	add	r6, r3
 80185b6:	f856 9c04 	ldr.w	r9, [r6, #-4]
 80185ba:	f1b9 0f00 	cmp.w	r9, #0
 80185be:	d023      	beq.n	8018608 <uxr_next_input_reliable_buffer_available+0x80>
 80185c0:	4605      	mov	r5, r0
 80185c2:	6923      	ldr	r3, [r4, #16]
 80185c4:	4630      	mov	r0, r6
 80185c6:	4798      	blx	r3
 80185c8:	4682      	mov	sl, r0
 80185ca:	b300      	cbz	r0, 801860e <uxr_next_input_reliable_buffer_available+0x86>
 80185cc:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 80185d0:	2101      	movs	r1, #1
 80185d2:	4650      	mov	r0, sl
 80185d4:	f000 fc10 	bl	8018df8 <uxr_seq_num_add>
 80185d8:	8921      	ldrh	r1, [r4, #8]
 80185da:	4682      	mov	sl, r0
 80185dc:	6863      	ldr	r3, [r4, #4]
 80185de:	6820      	ldr	r0, [r4, #0]
 80185e0:	fbba f2f1 	udiv	r2, sl, r1
 80185e4:	fbb3 f3f1 	udiv	r3, r3, r1
 80185e8:	fb01 a212 	mls	r2, r1, r2, sl
 80185ec:	b292      	uxth	r2, r2
 80185ee:	fb02 f303 	mul.w	r3, r2, r3
 80185f2:	3304      	adds	r3, #4
 80185f4:	4418      	add	r0, r3
 80185f6:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80185fa:	b12b      	cbz	r3, 8018608 <uxr_next_input_reliable_buffer_available+0x80>
 80185fc:	6923      	ldr	r3, [r4, #16]
 80185fe:	4798      	blx	r3
 8018600:	2802      	cmp	r0, #2
 8018602:	d01b      	beq.n	801863c <uxr_next_input_reliable_buffer_available+0xb4>
 8018604:	2801      	cmp	r0, #1
 8018606:	d0e3      	beq.n	80185d0 <uxr_next_input_reliable_buffer_available+0x48>
 8018608:	2000      	movs	r0, #0
 801860a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801860e:	464a      	mov	r2, r9
 8018610:	4631      	mov	r1, r6
 8018612:	4638      	mov	r0, r7
 8018614:	f7f5 fc38 	bl	800de88 <ucdr_init_buffer>
 8018618:	8921      	ldrh	r1, [r4, #8]
 801861a:	6863      	ldr	r3, [r4, #4]
 801861c:	2001      	movs	r0, #1
 801861e:	fbb5 f2f1 	udiv	r2, r5, r1
 8018622:	fbb3 f3f1 	udiv	r3, r3, r1
 8018626:	fb01 5212 	mls	r2, r1, r2, r5
 801862a:	b292      	uxth	r2, r2
 801862c:	fb02 f303 	mul.w	r3, r2, r3
 8018630:	6822      	ldr	r2, [r4, #0]
 8018632:	f842 a003 	str.w	sl, [r2, r3]
 8018636:	81a5      	strh	r5, [r4, #12]
 8018638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801863c:	8920      	ldrh	r0, [r4, #8]
 801863e:	eb06 0108 	add.w	r1, r6, r8
 8018642:	6863      	ldr	r3, [r4, #4]
 8018644:	eba9 0208 	sub.w	r2, r9, r8
 8018648:	fbb5 f6f0 	udiv	r6, r5, r0
 801864c:	fbb3 f3f0 	udiv	r3, r3, r0
 8018650:	fb00 5516 	mls	r5, r0, r6, r5
 8018654:	2000      	movs	r0, #0
 8018656:	b2ad      	uxth	r5, r5
 8018658:	fb03 f505 	mul.w	r5, r3, r5
 801865c:	6823      	ldr	r3, [r4, #0]
 801865e:	5158      	str	r0, [r3, r5]
 8018660:	4638      	mov	r0, r7
 8018662:	f7f5 fc11 	bl	800de88 <ucdr_init_buffer>
 8018666:	4638      	mov	r0, r7
 8018668:	4622      	mov	r2, r4
 801866a:	4903      	ldr	r1, [pc, #12]	; (8018678 <uxr_next_input_reliable_buffer_available+0xf0>)
 801866c:	f7f5 fbe0 	bl	800de30 <ucdr_set_on_full_buffer_callback>
 8018670:	2001      	movs	r0, #1
 8018672:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8018676:	e7c8      	b.n	801860a <uxr_next_input_reliable_buffer_available+0x82>
 8018678:	08018389 	.word	0x08018389

0801867c <uxr_process_heartbeat>:
 801867c:	b538      	push	{r3, r4, r5, lr}
 801867e:	4611      	mov	r1, r2
 8018680:	4604      	mov	r4, r0
 8018682:	89c0      	ldrh	r0, [r0, #14]
 8018684:	4615      	mov	r5, r2
 8018686:	f000 fbbf 	bl	8018e08 <uxr_seq_num_cmp>
 801868a:	2800      	cmp	r0, #0
 801868c:	bfb8      	it	lt
 801868e:	81e5      	strhlt	r5, [r4, #14]
 8018690:	bd38      	pop	{r3, r4, r5, pc}
 8018692:	bf00      	nop

08018694 <uxr_compute_acknack>:
 8018694:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018698:	8903      	ldrh	r3, [r0, #8]
 801869a:	4604      	mov	r4, r0
 801869c:	460f      	mov	r7, r1
 801869e:	8985      	ldrh	r5, [r0, #12]
 80186a0:	b1db      	cbz	r3, 80186da <uxr_compute_acknack+0x46>
 80186a2:	4628      	mov	r0, r5
 80186a4:	2601      	movs	r6, #1
 80186a6:	e004      	b.n	80186b2 <uxr_compute_acknack+0x1e>
 80186a8:	4566      	cmp	r6, ip
 80186aa:	f106 0601 	add.w	r6, r6, #1
 80186ae:	d214      	bcs.n	80186da <uxr_compute_acknack+0x46>
 80186b0:	89a0      	ldrh	r0, [r4, #12]
 80186b2:	b2b1      	uxth	r1, r6
 80186b4:	f000 fba0 	bl	8018df8 <uxr_seq_num_add>
 80186b8:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80186bc:	fbb0 f2fc 	udiv	r2, r0, ip
 80186c0:	e9d4 1300 	ldrd	r1, r3, [r4]
 80186c4:	fb0c 0212 	mls	r2, ip, r2, r0
 80186c8:	fbb3 f3fc 	udiv	r3, r3, ip
 80186cc:	b292      	uxth	r2, r2
 80186ce:	fb02 f303 	mul.w	r3, r2, r3
 80186d2:	58cb      	ldr	r3, [r1, r3]
 80186d4:	2b00      	cmp	r3, #0
 80186d6:	d1e7      	bne.n	80186a8 <uxr_compute_acknack+0x14>
 80186d8:	4605      	mov	r5, r0
 80186da:	803d      	strh	r5, [r7, #0]
 80186dc:	2101      	movs	r1, #1
 80186de:	89e6      	ldrh	r6, [r4, #14]
 80186e0:	4628      	mov	r0, r5
 80186e2:	f000 fb8d 	bl	8018e00 <uxr_seq_num_sub>
 80186e6:	4601      	mov	r1, r0
 80186e8:	4630      	mov	r0, r6
 80186ea:	f000 fb89 	bl	8018e00 <uxr_seq_num_sub>
 80186ee:	4606      	mov	r6, r0
 80186f0:	b328      	cbz	r0, 801873e <uxr_compute_acknack+0xaa>
 80186f2:	f04f 0900 	mov.w	r9, #0
 80186f6:	f04f 0801 	mov.w	r8, #1
 80186fa:	464d      	mov	r5, r9
 80186fc:	fa1f f189 	uxth.w	r1, r9
 8018700:	8838      	ldrh	r0, [r7, #0]
 8018702:	f000 fb79 	bl	8018df8 <uxr_seq_num_add>
 8018706:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801870a:	6861      	ldr	r1, [r4, #4]
 801870c:	fa08 fe09 	lsl.w	lr, r8, r9
 8018710:	6822      	ldr	r2, [r4, #0]
 8018712:	f109 0901 	add.w	r9, r9, #1
 8018716:	ea4e 0e05 	orr.w	lr, lr, r5
 801871a:	fbb0 f3fc 	udiv	r3, r0, ip
 801871e:	fbb1 f1fc 	udiv	r1, r1, ip
 8018722:	fb03 001c 	mls	r0, r3, ip, r0
 8018726:	b283      	uxth	r3, r0
 8018728:	fb01 f303 	mul.w	r3, r1, r3
 801872c:	58d3      	ldr	r3, [r2, r3]
 801872e:	b90b      	cbnz	r3, 8018734 <uxr_compute_acknack+0xa0>
 8018730:	fa1f f58e 	uxth.w	r5, lr
 8018734:	454e      	cmp	r6, r9
 8018736:	d1e1      	bne.n	80186fc <uxr_compute_acknack+0x68>
 8018738:	4628      	mov	r0, r5
 801873a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801873e:	4605      	mov	r5, r0
 8018740:	4628      	mov	r0, r5
 8018742:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018746:	bf00      	nop

08018748 <uxr_init_output_best_effort_stream>:
 8018748:	f64f 7cff 	movw	ip, #65535	; 0xffff
 801874c:	6001      	str	r1, [r0, #0]
 801874e:	7303      	strb	r3, [r0, #12]
 8018750:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8018754:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8018758:	4770      	bx	lr
 801875a:	bf00      	nop

0801875c <uxr_reset_output_best_effort_stream>:
 801875c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018760:	7b03      	ldrb	r3, [r0, #12]
 8018762:	81c2      	strh	r2, [r0, #14]
 8018764:	6043      	str	r3, [r0, #4]
 8018766:	4770      	bx	lr

08018768 <uxr_prepare_best_effort_buffer_to_write>:
 8018768:	b5f0      	push	{r4, r5, r6, r7, lr}
 801876a:	4604      	mov	r4, r0
 801876c:	b083      	sub	sp, #12
 801876e:	6840      	ldr	r0, [r0, #4]
 8018770:	460d      	mov	r5, r1
 8018772:	4616      	mov	r6, r2
 8018774:	f7fd fe10 	bl	8016398 <uxr_submessage_padding>
 8018778:	6863      	ldr	r3, [r4, #4]
 801877a:	4418      	add	r0, r3
 801877c:	68a3      	ldr	r3, [r4, #8]
 801877e:	1942      	adds	r2, r0, r5
 8018780:	4293      	cmp	r3, r2
 8018782:	bf2c      	ite	cs
 8018784:	2701      	movcs	r7, #1
 8018786:	2700      	movcc	r7, #0
 8018788:	d202      	bcs.n	8018790 <uxr_prepare_best_effort_buffer_to_write+0x28>
 801878a:	4638      	mov	r0, r7
 801878c:	b003      	add	sp, #12
 801878e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018790:	9000      	str	r0, [sp, #0]
 8018792:	2300      	movs	r3, #0
 8018794:	4630      	mov	r0, r6
 8018796:	6821      	ldr	r1, [r4, #0]
 8018798:	f7f5 fb64 	bl	800de64 <ucdr_init_buffer_origin_offset>
 801879c:	6861      	ldr	r1, [r4, #4]
 801879e:	4638      	mov	r0, r7
 80187a0:	4429      	add	r1, r5
 80187a2:	6061      	str	r1, [r4, #4]
 80187a4:	b003      	add	sp, #12
 80187a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080187a8 <uxr_prepare_best_effort_buffer_to_send>:
 80187a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80187ac:	4604      	mov	r4, r0
 80187ae:	461d      	mov	r5, r3
 80187b0:	6840      	ldr	r0, [r0, #4]
 80187b2:	7b23      	ldrb	r3, [r4, #12]
 80187b4:	4298      	cmp	r0, r3
 80187b6:	bf8c      	ite	hi
 80187b8:	2601      	movhi	r6, #1
 80187ba:	2600      	movls	r6, #0
 80187bc:	d802      	bhi.n	80187c4 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 80187be:	4630      	mov	r0, r6
 80187c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80187c4:	4688      	mov	r8, r1
 80187c6:	89e0      	ldrh	r0, [r4, #14]
 80187c8:	2101      	movs	r1, #1
 80187ca:	4617      	mov	r7, r2
 80187cc:	f000 fb14 	bl	8018df8 <uxr_seq_num_add>
 80187d0:	6823      	ldr	r3, [r4, #0]
 80187d2:	81e0      	strh	r0, [r4, #14]
 80187d4:	8028      	strh	r0, [r5, #0]
 80187d6:	4630      	mov	r0, r6
 80187d8:	f8c8 3000 	str.w	r3, [r8]
 80187dc:	6863      	ldr	r3, [r4, #4]
 80187de:	603b      	str	r3, [r7, #0]
 80187e0:	7b23      	ldrb	r3, [r4, #12]
 80187e2:	6063      	str	r3, [r4, #4]
 80187e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080187e8 <on_full_output_buffer>:
 80187e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80187ea:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 80187ee:	460c      	mov	r4, r1
 80187f0:	6803      	ldr	r3, [r0, #0]
 80187f2:	4605      	mov	r5, r0
 80187f4:	7b26      	ldrb	r6, [r4, #12]
 80187f6:	e9d1 1200 	ldrd	r1, r2, [r1]
 80187fa:	fbb2 f2fc 	udiv	r2, r2, ip
 80187fe:	eba3 0e01 	sub.w	lr, r3, r1
 8018802:	6903      	ldr	r3, [r0, #16]
 8018804:	fbbe fef2 	udiv	lr, lr, r2
 8018808:	f10e 0e01 	add.w	lr, lr, #1
 801880c:	fa1f fe8e 	uxth.w	lr, lr
 8018810:	fbbe f7fc 	udiv	r7, lr, ip
 8018814:	fb0c ec17 	mls	ip, ip, r7, lr
 8018818:	fa1f fc8c 	uxth.w	ip, ip
 801881c:	fb02 fc0c 	mul.w	ip, r2, ip
 8018820:	f851 200c 	ldr.w	r2, [r1, ip]
 8018824:	44b4      	add	ip, r6
 8018826:	1b92      	subs	r2, r2, r6
 8018828:	f10c 0c08 	add.w	ip, ip, #8
 801882c:	3a04      	subs	r2, #4
 801882e:	4461      	add	r1, ip
 8018830:	f7f5 fb22 	bl	800de78 <ucdr_init_buffer_origin>
 8018834:	4628      	mov	r0, r5
 8018836:	4622      	mov	r2, r4
 8018838:	4902      	ldr	r1, [pc, #8]	; (8018844 <on_full_output_buffer+0x5c>)
 801883a:	f7f5 faf9 	bl	800de30 <ucdr_set_on_full_buffer_callback>
 801883e:	2000      	movs	r0, #0
 8018840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018842:	bf00      	nop
 8018844:	080187e9 	.word	0x080187e9

08018848 <uxr_init_output_reliable_stream>:
 8018848:	b530      	push	{r4, r5, lr}
 801884a:	f89d 400c 	ldrb.w	r4, [sp, #12]
 801884e:	8103      	strh	r3, [r0, #8]
 8018850:	7304      	strb	r4, [r0, #12]
 8018852:	e9c0 1200 	strd	r1, r2, [r0]
 8018856:	b1e3      	cbz	r3, 8018892 <uxr_init_output_reliable_stream+0x4a>
 8018858:	600c      	str	r4, [r1, #0]
 801885a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801885e:	f1bc 0f01 	cmp.w	ip, #1
 8018862:	d916      	bls.n	8018892 <uxr_init_output_reliable_stream+0x4a>
 8018864:	f04f 0e01 	mov.w	lr, #1
 8018868:	6843      	ldr	r3, [r0, #4]
 801886a:	f10e 0501 	add.w	r5, lr, #1
 801886e:	7b04      	ldrb	r4, [r0, #12]
 8018870:	6801      	ldr	r1, [r0, #0]
 8018872:	fbbe f2fc 	udiv	r2, lr, ip
 8018876:	fbb3 f3fc 	udiv	r3, r3, ip
 801887a:	fb0c e212 	mls	r2, ip, r2, lr
 801887e:	fa1f fe85 	uxth.w	lr, r5
 8018882:	b292      	uxth	r2, r2
 8018884:	fb02 f303 	mul.w	r3, r2, r3
 8018888:	50cc      	str	r4, [r1, r3]
 801888a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801888e:	45f4      	cmp	ip, lr
 8018890:	d8ea      	bhi.n	8018868 <uxr_init_output_reliable_stream+0x20>
 8018892:	4b07      	ldr	r3, [pc, #28]	; (80188b0 <uxr_init_output_reliable_stream+0x68>)
 8018894:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018898:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801889c:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 80188a0:	f8c0 300e 	str.w	r3, [r0, #14]
 80188a4:	2300      	movs	r3, #0
 80188a6:	8242      	strh	r2, [r0, #18]
 80188a8:	8403      	strh	r3, [r0, #32]
 80188aa:	e9c0 4506 	strd	r4, r5, [r0, #24]
 80188ae:	bd30      	pop	{r4, r5, pc}
 80188b0:	ffff0000 	.word	0xffff0000
 80188b4:	00000000 	.word	0x00000000

080188b8 <uxr_reset_output_reliable_stream>:
 80188b8:	8901      	ldrh	r1, [r0, #8]
 80188ba:	b510      	push	{r4, lr}
 80188bc:	b1b1      	cbz	r1, 80188ec <uxr_reset_output_reliable_stream+0x34>
 80188be:	f04f 0e00 	mov.w	lr, #0
 80188c2:	46f4      	mov	ip, lr
 80188c4:	6843      	ldr	r3, [r0, #4]
 80188c6:	f10e 0e01 	add.w	lr, lr, #1
 80188ca:	7b04      	ldrb	r4, [r0, #12]
 80188cc:	fbbc f2f1 	udiv	r2, ip, r1
 80188d0:	fbb3 f3f1 	udiv	r3, r3, r1
 80188d4:	fb01 c212 	mls	r2, r1, r2, ip
 80188d8:	fa1f fc8e 	uxth.w	ip, lr
 80188dc:	b292      	uxth	r2, r2
 80188de:	fb02 f303 	mul.w	r3, r2, r3
 80188e2:	6802      	ldr	r2, [r0, #0]
 80188e4:	50d4      	str	r4, [r2, r3]
 80188e6:	8901      	ldrh	r1, [r0, #8]
 80188e8:	4561      	cmp	r1, ip
 80188ea:	d8eb      	bhi.n	80188c4 <uxr_reset_output_reliable_stream+0xc>
 80188ec:	4b08      	ldr	r3, [pc, #32]	; (8018910 <uxr_reset_output_reliable_stream+0x58>)
 80188ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80188f2:	ed9f 7b05 	vldr	d7, [pc, #20]	; 8018908 <uxr_reset_output_reliable_stream+0x50>
 80188f6:	f8c0 300e 	str.w	r3, [r0, #14]
 80188fa:	2300      	movs	r3, #0
 80188fc:	8242      	strh	r2, [r0, #18]
 80188fe:	8403      	strh	r3, [r0, #32]
 8018900:	ed80 7b06 	vstr	d7, [r0, #24]
 8018904:	bd10      	pop	{r4, pc}
 8018906:	bf00      	nop
 8018908:	ffffffff 	.word	0xffffffff
 801890c:	7fffffff 	.word	0x7fffffff
 8018910:	ffff0000 	.word	0xffff0000

08018914 <uxr_prepare_reliable_buffer_to_write>:
 8018914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018918:	4604      	mov	r4, r0
 801891a:	b091      	sub	sp, #68	; 0x44
 801891c:	8900      	ldrh	r0, [r0, #8]
 801891e:	468b      	mov	fp, r1
 8018920:	89e6      	ldrh	r6, [r4, #14]
 8018922:	9204      	str	r2, [sp, #16]
 8018924:	6865      	ldr	r5, [r4, #4]
 8018926:	6823      	ldr	r3, [r4, #0]
 8018928:	f894 900c 	ldrb.w	r9, [r4, #12]
 801892c:	fbb6 f2f0 	udiv	r2, r6, r0
 8018930:	fbb5 f5f0 	udiv	r5, r5, r0
 8018934:	fb00 6212 	mls	r2, r0, r2, r6
 8018938:	1f2f      	subs	r7, r5, #4
 801893a:	b292      	uxth	r2, r2
 801893c:	fb05 3202 	mla	r2, r5, r2, r3
 8018940:	1d11      	adds	r1, r2, #4
 8018942:	f8d2 8000 	ldr.w	r8, [r2]
 8018946:	9103      	str	r1, [sp, #12]
 8018948:	2800      	cmp	r0, #0
 801894a:	f000 814a 	beq.w	8018be2 <uxr_prepare_reliable_buffer_to_write+0x2ce>
 801894e:	f04f 0c00 	mov.w	ip, #0
 8018952:	46e2      	mov	sl, ip
 8018954:	4661      	mov	r1, ip
 8018956:	f10c 0c01 	add.w	ip, ip, #1
 801895a:	fbb1 f2f0 	udiv	r2, r1, r0
 801895e:	fb00 1212 	mls	r2, r0, r2, r1
 8018962:	fa1f f18c 	uxth.w	r1, ip
 8018966:	b292      	uxth	r2, r2
 8018968:	fb05 f202 	mul.w	r2, r5, r2
 801896c:	589a      	ldr	r2, [r3, r2]
 801896e:	454a      	cmp	r2, r9
 8018970:	d103      	bne.n	801897a <uxr_prepare_reliable_buffer_to_write+0x66>
 8018972:	f10a 0a01 	add.w	sl, sl, #1
 8018976:	fa1f fa8a 	uxth.w	sl, sl
 801897a:	4281      	cmp	r1, r0
 801897c:	d3eb      	bcc.n	8018956 <uxr_prepare_reliable_buffer_to_write+0x42>
 801897e:	4640      	mov	r0, r8
 8018980:	2104      	movs	r1, #4
 8018982:	f8cd a014 	str.w	sl, [sp, #20]
 8018986:	f7f5 fa83 	bl	800de90 <ucdr_alignment>
 801898a:	4480      	add	r8, r0
 801898c:	eb08 020b 	add.w	r2, r8, fp
 8018990:	42ba      	cmp	r2, r7
 8018992:	f240 80ca 	bls.w	8018b2a <uxr_prepare_reliable_buffer_to_write+0x216>
 8018996:	7b22      	ldrb	r2, [r4, #12]
 8018998:	445a      	add	r2, fp
 801899a:	42ba      	cmp	r2, r7
 801899c:	f240 80b2 	bls.w	8018b04 <uxr_prepare_reliable_buffer_to_write+0x1f0>
 80189a0:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 80189a4:	b2bb      	uxth	r3, r7
 80189a6:	eba2 0209 	sub.w	r2, r2, r9
 80189aa:	441a      	add	r2, r3
 80189ac:	b292      	uxth	r2, r2
 80189ae:	fb0a f902 	mul.w	r9, sl, r2
 80189b2:	9205      	str	r2, [sp, #20]
 80189b4:	45d9      	cmp	r9, fp
 80189b6:	9206      	str	r2, [sp, #24]
 80189b8:	f0c0 80b3 	bcc.w	8018b22 <uxr_prepare_reliable_buffer_to_write+0x20e>
 80189bc:	f108 0204 	add.w	r2, r8, #4
 80189c0:	42ba      	cmp	r2, r7
 80189c2:	f080 80da 	bcs.w	8018b7a <uxr_prepare_reliable_buffer_to_write+0x266>
 80189c6:	f1a3 0904 	sub.w	r9, r3, #4
 80189ca:	9b05      	ldr	r3, [sp, #20]
 80189cc:	eba9 0908 	sub.w	r9, r9, r8
 80189d0:	fa1f f989 	uxth.w	r9, r9
 80189d4:	ebab 0b09 	sub.w	fp, fp, r9
 80189d8:	fbbb f2f3 	udiv	r2, fp, r3
 80189dc:	fb03 b312 	mls	r3, r3, r2, fp
 80189e0:	2b00      	cmp	r3, #0
 80189e2:	f040 80c4 	bne.w	8018b6e <uxr_prepare_reliable_buffer_to_write+0x25a>
 80189e6:	b293      	uxth	r3, r2
 80189e8:	4553      	cmp	r3, sl
 80189ea:	f200 809a 	bhi.w	8018b22 <uxr_prepare_reliable_buffer_to_write+0x20e>
 80189ee:	2b00      	cmp	r3, #0
 80189f0:	f000 80f9 	beq.w	8018be6 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 80189f4:	f8cd 801c 	str.w	r8, [sp, #28]
 80189f8:	f04f 0a00 	mov.w	sl, #0
 80189fc:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8018a00:	f10d 0b20 	add.w	fp, sp, #32
 8018a04:	9505      	str	r5, [sp, #20]
 8018a06:	461d      	mov	r5, r3
 8018a08:	e000      	b.n	8018a0c <uxr_prepare_reliable_buffer_to_write+0xf8>
 8018a0a:	46c1      	mov	r9, r8
 8018a0c:	8922      	ldrh	r2, [r4, #8]
 8018a0e:	4658      	mov	r0, fp
 8018a10:	6863      	ldr	r3, [r4, #4]
 8018a12:	f10a 0a01 	add.w	sl, sl, #1
 8018a16:	fbb6 f1f2 	udiv	r1, r6, r2
 8018a1a:	fbb3 f3f2 	udiv	r3, r3, r2
 8018a1e:	fb02 6111 	mls	r1, r2, r1, r6
 8018a22:	463a      	mov	r2, r7
 8018a24:	b289      	uxth	r1, r1
 8018a26:	fb03 f101 	mul.w	r1, r3, r1
 8018a2a:	6823      	ldr	r3, [r4, #0]
 8018a2c:	3104      	adds	r1, #4
 8018a2e:	4419      	add	r1, r3
 8018a30:	2300      	movs	r3, #0
 8018a32:	f851 cc04 	ldr.w	ip, [r1, #-4]
 8018a36:	f8cd c000 	str.w	ip, [sp]
 8018a3a:	f7f5 fa13 	bl	800de64 <ucdr_init_buffer_origin_offset>
 8018a3e:	464a      	mov	r2, r9
 8018a40:	2300      	movs	r3, #0
 8018a42:	210d      	movs	r1, #13
 8018a44:	4658      	mov	r0, fp
 8018a46:	f7fd fc67 	bl	8016318 <uxr_buffer_submessage_header>
 8018a4a:	8921      	ldrh	r1, [r4, #8]
 8018a4c:	6863      	ldr	r3, [r4, #4]
 8018a4e:	4630      	mov	r0, r6
 8018a50:	fbb6 f2f1 	udiv	r2, r6, r1
 8018a54:	fbb3 f3f1 	udiv	r3, r3, r1
 8018a58:	fb01 6212 	mls	r2, r1, r2, r6
 8018a5c:	2101      	movs	r1, #1
 8018a5e:	b292      	uxth	r2, r2
 8018a60:	fb02 f303 	mul.w	r3, r2, r3
 8018a64:	6822      	ldr	r2, [r4, #0]
 8018a66:	50d7      	str	r7, [r2, r3]
 8018a68:	f000 f9c6 	bl	8018df8 <uxr_seq_num_add>
 8018a6c:	4606      	mov	r6, r0
 8018a6e:	fa1f f38a 	uxth.w	r3, sl
 8018a72:	429d      	cmp	r5, r3
 8018a74:	d8c9      	bhi.n	8018a0a <uxr_prepare_reliable_buffer_to_write+0xf6>
 8018a76:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8018a7a:	9d05      	ldr	r5, [sp, #20]
 8018a7c:	8920      	ldrh	r0, [r4, #8]
 8018a7e:	463a      	mov	r2, r7
 8018a80:	6863      	ldr	r3, [r4, #4]
 8018a82:	fbb6 f1f0 	udiv	r1, r6, r0
 8018a86:	fbb3 f3f0 	udiv	r3, r3, r0
 8018a8a:	fb00 6111 	mls	r1, r0, r1, r6
 8018a8e:	4658      	mov	r0, fp
 8018a90:	b289      	uxth	r1, r1
 8018a92:	fb01 f303 	mul.w	r3, r1, r3
 8018a96:	6821      	ldr	r1, [r4, #0]
 8018a98:	3304      	adds	r3, #4
 8018a9a:	4419      	add	r1, r3
 8018a9c:	2300      	movs	r3, #0
 8018a9e:	f851 7c04 	ldr.w	r7, [r1, #-4]
 8018aa2:	9700      	str	r7, [sp, #0]
 8018aa4:	f7f5 f9de 	bl	800de64 <ucdr_init_buffer_origin_offset>
 8018aa8:	9f06      	ldr	r7, [sp, #24]
 8018aaa:	4658      	mov	r0, fp
 8018aac:	2302      	movs	r3, #2
 8018aae:	b2ba      	uxth	r2, r7
 8018ab0:	210d      	movs	r1, #13
 8018ab2:	f7fd fc31 	bl	8016318 <uxr_buffer_submessage_header>
 8018ab6:	f108 0104 	add.w	r1, r8, #4
 8018aba:	9b03      	ldr	r3, [sp, #12]
 8018abc:	f1a5 0208 	sub.w	r2, r5, #8
 8018ac0:	8925      	ldrh	r5, [r4, #8]
 8018ac2:	440b      	add	r3, r1
 8018ac4:	eba2 0208 	sub.w	r2, r2, r8
 8018ac8:	fbb6 f0f5 	udiv	r0, r6, r5
 8018acc:	4619      	mov	r1, r3
 8018ace:	6863      	ldr	r3, [r4, #4]
 8018ad0:	fb05 6010 	mls	r0, r5, r0, r6
 8018ad4:	fbb3 f3f5 	udiv	r3, r3, r5
 8018ad8:	b280      	uxth	r0, r0
 8018ada:	6825      	ldr	r5, [r4, #0]
 8018adc:	fb00 f303 	mul.w	r3, r0, r3
 8018ae0:	7b20      	ldrb	r0, [r4, #12]
 8018ae2:	3004      	adds	r0, #4
 8018ae4:	4438      	add	r0, r7
 8018ae6:	50e8      	str	r0, [r5, r3]
 8018ae8:	9d04      	ldr	r5, [sp, #16]
 8018aea:	4628      	mov	r0, r5
 8018aec:	f7f5 f9cc 	bl	800de88 <ucdr_init_buffer>
 8018af0:	4628      	mov	r0, r5
 8018af2:	4622      	mov	r2, r4
 8018af4:	493d      	ldr	r1, [pc, #244]	; (8018bec <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 8018af6:	f7f5 f99b 	bl	800de30 <ucdr_set_on_full_buffer_callback>
 8018afa:	2001      	movs	r0, #1
 8018afc:	81e6      	strh	r6, [r4, #14]
 8018afe:	b011      	add	sp, #68	; 0x44
 8018b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b04:	2101      	movs	r1, #1
 8018b06:	89e0      	ldrh	r0, [r4, #14]
 8018b08:	f000 f976 	bl	8018df8 <uxr_seq_num_add>
 8018b0c:	4605      	mov	r5, r0
 8018b0e:	8921      	ldrh	r1, [r4, #8]
 8018b10:	8a60      	ldrh	r0, [r4, #18]
 8018b12:	f000 f971 	bl	8018df8 <uxr_seq_num_add>
 8018b16:	4601      	mov	r1, r0
 8018b18:	4628      	mov	r0, r5
 8018b1a:	f000 f975 	bl	8018e08 <uxr_seq_num_cmp>
 8018b1e:	2800      	cmp	r0, #0
 8018b20:	dd44      	ble.n	8018bac <uxr_prepare_reliable_buffer_to_write+0x298>
 8018b22:	2000      	movs	r0, #0
 8018b24:	b011      	add	sp, #68	; 0x44
 8018b26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b2a:	8921      	ldrh	r1, [r4, #8]
 8018b2c:	8a60      	ldrh	r0, [r4, #18]
 8018b2e:	9205      	str	r2, [sp, #20]
 8018b30:	f000 f962 	bl	8018df8 <uxr_seq_num_add>
 8018b34:	4601      	mov	r1, r0
 8018b36:	4630      	mov	r0, r6
 8018b38:	f000 f966 	bl	8018e08 <uxr_seq_num_cmp>
 8018b3c:	2800      	cmp	r0, #0
 8018b3e:	9a05      	ldr	r2, [sp, #20]
 8018b40:	dcef      	bgt.n	8018b22 <uxr_prepare_reliable_buffer_to_write+0x20e>
 8018b42:	8925      	ldrh	r5, [r4, #8]
 8018b44:	e9d4 7300 	ldrd	r7, r3, [r4]
 8018b48:	fbb6 f4f5 	udiv	r4, r6, r5
 8018b4c:	fbb3 f3f5 	udiv	r3, r3, r5
 8018b50:	fb05 6414 	mls	r4, r5, r4, r6
 8018b54:	b2a4      	uxth	r4, r4
 8018b56:	fb04 f303 	mul.w	r3, r4, r3
 8018b5a:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8018b5e:	50fa      	str	r2, [r7, r3]
 8018b60:	2300      	movs	r3, #0
 8018b62:	f8cd 8000 	str.w	r8, [sp]
 8018b66:	f7f5 f97d 	bl	800de64 <ucdr_init_buffer_origin_offset>
 8018b6a:	2001      	movs	r0, #1
 8018b6c:	e7da      	b.n	8018b24 <uxr_prepare_reliable_buffer_to_write+0x210>
 8018b6e:	3201      	adds	r2, #1
 8018b70:	9306      	str	r3, [sp, #24]
 8018b72:	b293      	uxth	r3, r2
 8018b74:	4553      	cmp	r3, sl
 8018b76:	d8d4      	bhi.n	8018b22 <uxr_prepare_reliable_buffer_to_write+0x20e>
 8018b78:	e739      	b.n	80189ee <uxr_prepare_reliable_buffer_to_write+0xda>
 8018b7a:	4630      	mov	r0, r6
 8018b7c:	2101      	movs	r1, #1
 8018b7e:	9307      	str	r3, [sp, #28]
 8018b80:	f000 f93a 	bl	8018df8 <uxr_seq_num_add>
 8018b84:	4606      	mov	r6, r0
 8018b86:	8920      	ldrh	r0, [r4, #8]
 8018b88:	6862      	ldr	r2, [r4, #4]
 8018b8a:	fbb6 f1f0 	udiv	r1, r6, r0
 8018b8e:	fbb2 f2f0 	udiv	r2, r2, r0
 8018b92:	fb00 6111 	mls	r1, r0, r1, r6
 8018b96:	b289      	uxth	r1, r1
 8018b98:	fb01 f202 	mul.w	r2, r1, r2
 8018b9c:	6821      	ldr	r1, [r4, #0]
 8018b9e:	3204      	adds	r2, #4
 8018ba0:	188b      	adds	r3, r1, r2
 8018ba2:	f853 8c04 	ldr.w	r8, [r3, #-4]
 8018ba6:	9303      	str	r3, [sp, #12]
 8018ba8:	9b07      	ldr	r3, [sp, #28]
 8018baa:	e70c      	b.n	80189c6 <uxr_prepare_reliable_buffer_to_write+0xb2>
 8018bac:	8921      	ldrh	r1, [r4, #8]
 8018bae:	6863      	ldr	r3, [r4, #4]
 8018bb0:	9804      	ldr	r0, [sp, #16]
 8018bb2:	fbb5 f2f1 	udiv	r2, r5, r1
 8018bb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8018bba:	fb01 5212 	mls	r2, r1, r2, r5
 8018bbe:	6821      	ldr	r1, [r4, #0]
 8018bc0:	b292      	uxth	r2, r2
 8018bc2:	fb02 f303 	mul.w	r3, r2, r3
 8018bc6:	7b22      	ldrb	r2, [r4, #12]
 8018bc8:	3304      	adds	r3, #4
 8018bca:	445a      	add	r2, fp
 8018bcc:	4419      	add	r1, r3
 8018bce:	f841 2c04 	str.w	r2, [r1, #-4]
 8018bd2:	7b23      	ldrb	r3, [r4, #12]
 8018bd4:	9300      	str	r3, [sp, #0]
 8018bd6:	2300      	movs	r3, #0
 8018bd8:	f7f5 f944 	bl	800de64 <ucdr_init_buffer_origin_offset>
 8018bdc:	2001      	movs	r0, #1
 8018bde:	81e5      	strh	r5, [r4, #14]
 8018be0:	e7a0      	b.n	8018b24 <uxr_prepare_reliable_buffer_to_write+0x210>
 8018be2:	4682      	mov	sl, r0
 8018be4:	e6cb      	b.n	801897e <uxr_prepare_reliable_buffer_to_write+0x6a>
 8018be6:	f10d 0b20 	add.w	fp, sp, #32
 8018bea:	e747      	b.n	8018a7c <uxr_prepare_reliable_buffer_to_write+0x168>
 8018bec:	080187e9 	.word	0x080187e9

08018bf0 <uxr_prepare_next_reliable_buffer_to_send>:
 8018bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018bf2:	4604      	mov	r4, r0
 8018bf4:	461d      	mov	r5, r3
 8018bf6:	460f      	mov	r7, r1
 8018bf8:	8a00      	ldrh	r0, [r0, #16]
 8018bfa:	2101      	movs	r1, #1
 8018bfc:	4616      	mov	r6, r2
 8018bfe:	f000 f8fb 	bl	8018df8 <uxr_seq_num_add>
 8018c02:	8028      	strh	r0, [r5, #0]
 8018c04:	8922      	ldrh	r2, [r4, #8]
 8018c06:	6863      	ldr	r3, [r4, #4]
 8018c08:	fbb0 f1f2 	udiv	r1, r0, r2
 8018c0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8018c10:	fb02 0c11 	mls	ip, r2, r1, r0
 8018c14:	89e1      	ldrh	r1, [r4, #14]
 8018c16:	fa1f fc8c 	uxth.w	ip, ip
 8018c1a:	fb0c fc03 	mul.w	ip, ip, r3
 8018c1e:	6823      	ldr	r3, [r4, #0]
 8018c20:	f10c 0c04 	add.w	ip, ip, #4
 8018c24:	4463      	add	r3, ip
 8018c26:	603b      	str	r3, [r7, #0]
 8018c28:	6823      	ldr	r3, [r4, #0]
 8018c2a:	449c      	add	ip, r3
 8018c2c:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8018c30:	6033      	str	r3, [r6, #0]
 8018c32:	f000 f8e9 	bl	8018e08 <uxr_seq_num_cmp>
 8018c36:	2800      	cmp	r0, #0
 8018c38:	dd01      	ble.n	8018c3e <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 8018c3a:	2000      	movs	r0, #0
 8018c3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018c3e:	7b23      	ldrb	r3, [r4, #12]
 8018c40:	6832      	ldr	r2, [r6, #0]
 8018c42:	429a      	cmp	r2, r3
 8018c44:	d9f9      	bls.n	8018c3a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8018c46:	8a61      	ldrh	r1, [r4, #18]
 8018c48:	8a20      	ldrh	r0, [r4, #16]
 8018c4a:	f000 f8d9 	bl	8018e00 <uxr_seq_num_sub>
 8018c4e:	8923      	ldrh	r3, [r4, #8]
 8018c50:	4283      	cmp	r3, r0
 8018c52:	d0f2      	beq.n	8018c3a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8018c54:	8828      	ldrh	r0, [r5, #0]
 8018c56:	89e3      	ldrh	r3, [r4, #14]
 8018c58:	8220      	strh	r0, [r4, #16]
 8018c5a:	4298      	cmp	r0, r3
 8018c5c:	d001      	beq.n	8018c62 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 8018c5e:	2001      	movs	r0, #1
 8018c60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018c62:	2101      	movs	r1, #1
 8018c64:	f000 f8c8 	bl	8018df8 <uxr_seq_num_add>
 8018c68:	4603      	mov	r3, r0
 8018c6a:	2001      	movs	r0, #1
 8018c6c:	81e3      	strh	r3, [r4, #14]
 8018c6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08018c70 <uxr_update_output_stream_heartbeat_timestamp>:
 8018c70:	b570      	push	{r4, r5, r6, lr}
 8018c72:	8a01      	ldrh	r1, [r0, #16]
 8018c74:	4604      	mov	r4, r0
 8018c76:	8a40      	ldrh	r0, [r0, #18]
 8018c78:	4615      	mov	r5, r2
 8018c7a:	461e      	mov	r6, r3
 8018c7c:	f000 f8c4 	bl	8018e08 <uxr_seq_num_cmp>
 8018c80:	2800      	cmp	r0, #0
 8018c82:	db07      	blt.n	8018c94 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8018c84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018c88:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8018c8c:	2000      	movs	r0, #0
 8018c8e:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8018c92:	bd70      	pop	{r4, r5, r6, pc}
 8018c94:	f894 0020 	ldrb.w	r0, [r4, #32]
 8018c98:	b940      	cbnz	r0, 8018cac <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 8018c9a:	2301      	movs	r3, #1
 8018c9c:	f884 3020 	strb.w	r3, [r4, #32]
 8018ca0:	3564      	adds	r5, #100	; 0x64
 8018ca2:	f146 0600 	adc.w	r6, r6, #0
 8018ca6:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8018caa:	bd70      	pop	{r4, r5, r6, pc}
 8018cac:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8018cb0:	4295      	cmp	r5, r2
 8018cb2:	eb76 0303 	sbcs.w	r3, r6, r3
 8018cb6:	db04      	blt.n	8018cc2 <uxr_update_output_stream_heartbeat_timestamp+0x52>
 8018cb8:	1c43      	adds	r3, r0, #1
 8018cba:	2001      	movs	r0, #1
 8018cbc:	f884 3020 	strb.w	r3, [r4, #32]
 8018cc0:	e7ee      	b.n	8018ca0 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 8018cc2:	2000      	movs	r0, #0
 8018cc4:	e7ec      	b.n	8018ca0 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 8018cc6:	bf00      	nop

08018cc8 <uxr_begin_output_nack_buffer_it>:
 8018cc8:	8a40      	ldrh	r0, [r0, #18]
 8018cca:	4770      	bx	lr

08018ccc <uxr_next_reliable_nack_buffer_to_send>:
 8018ccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018cd0:	f890 7021 	ldrb.w	r7, [r0, #33]	; 0x21
 8018cd4:	b197      	cbz	r7, 8018cfc <uxr_next_reliable_nack_buffer_to_send+0x30>
 8018cd6:	4680      	mov	r8, r0
 8018cd8:	460d      	mov	r5, r1
 8018cda:	4616      	mov	r6, r2
 8018cdc:	461c      	mov	r4, r3
 8018cde:	8818      	ldrh	r0, [r3, #0]
 8018ce0:	2101      	movs	r1, #1
 8018ce2:	f000 f889 	bl	8018df8 <uxr_seq_num_add>
 8018ce6:	8020      	strh	r0, [r4, #0]
 8018ce8:	f8b8 1010 	ldrh.w	r1, [r8, #16]
 8018cec:	f000 f88c 	bl	8018e08 <uxr_seq_num_cmp>
 8018cf0:	2800      	cmp	r0, #0
 8018cf2:	dd06      	ble.n	8018d02 <uxr_next_reliable_nack_buffer_to_send+0x36>
 8018cf4:	2300      	movs	r3, #0
 8018cf6:	461f      	mov	r7, r3
 8018cf8:	f888 3021 	strb.w	r3, [r8, #33]	; 0x21
 8018cfc:	4638      	mov	r0, r7
 8018cfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018d02:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 8018d06:	8820      	ldrh	r0, [r4, #0]
 8018d08:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8018d0c:	fbb0 f3f2 	udiv	r3, r0, r2
 8018d10:	fbb1 fcf2 	udiv	ip, r1, r2
 8018d14:	fb02 0313 	mls	r3, r2, r3, r0
 8018d18:	b29b      	uxth	r3, r3
 8018d1a:	fb03 fc0c 	mul.w	ip, r3, ip
 8018d1e:	f8d8 3000 	ldr.w	r3, [r8]
 8018d22:	f10c 0c04 	add.w	ip, ip, #4
 8018d26:	4463      	add	r3, ip
 8018d28:	602b      	str	r3, [r5, #0]
 8018d2a:	f8d8 3000 	ldr.w	r3, [r8]
 8018d2e:	4463      	add	r3, ip
 8018d30:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8018d34:	6033      	str	r3, [r6, #0]
 8018d36:	f898 200c 	ldrb.w	r2, [r8, #12]
 8018d3a:	429a      	cmp	r2, r3
 8018d3c:	d0d0      	beq.n	8018ce0 <uxr_next_reliable_nack_buffer_to_send+0x14>
 8018d3e:	e7dd      	b.n	8018cfc <uxr_next_reliable_nack_buffer_to_send+0x30>

08018d40 <uxr_process_acknack>:
 8018d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018d42:	4604      	mov	r4, r0
 8018d44:	460e      	mov	r6, r1
 8018d46:	4610      	mov	r0, r2
 8018d48:	2101      	movs	r1, #1
 8018d4a:	f000 f859 	bl	8018e00 <uxr_seq_num_sub>
 8018d4e:	8a61      	ldrh	r1, [r4, #18]
 8018d50:	f000 f856 	bl	8018e00 <uxr_seq_num_sub>
 8018d54:	b1c8      	cbz	r0, 8018d8a <uxr_process_acknack+0x4a>
 8018d56:	4605      	mov	r5, r0
 8018d58:	2700      	movs	r7, #0
 8018d5a:	2101      	movs	r1, #1
 8018d5c:	8a60      	ldrh	r0, [r4, #18]
 8018d5e:	f000 f84b 	bl	8018df8 <uxr_seq_num_add>
 8018d62:	8923      	ldrh	r3, [r4, #8]
 8018d64:	6862      	ldr	r2, [r4, #4]
 8018d66:	3701      	adds	r7, #1
 8018d68:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8018d6c:	6821      	ldr	r1, [r4, #0]
 8018d6e:	42bd      	cmp	r5, r7
 8018d70:	8260      	strh	r0, [r4, #18]
 8018d72:	fbb0 fef3 	udiv	lr, r0, r3
 8018d76:	fbb2 f2f3 	udiv	r2, r2, r3
 8018d7a:	fb03 031e 	mls	r3, r3, lr, r0
 8018d7e:	b29b      	uxth	r3, r3
 8018d80:	fb02 f303 	mul.w	r3, r2, r3
 8018d84:	f841 c003 	str.w	ip, [r1, r3]
 8018d88:	d1e7      	bne.n	8018d5a <uxr_process_acknack+0x1a>
 8018d8a:	3e00      	subs	r6, #0
 8018d8c:	f04f 0300 	mov.w	r3, #0
 8018d90:	bf18      	it	ne
 8018d92:	2601      	movne	r6, #1
 8018d94:	f884 3020 	strb.w	r3, [r4, #32]
 8018d98:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
 8018d9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018d9e:	bf00      	nop

08018da0 <uxr_is_output_up_to_date>:
 8018da0:	8a01      	ldrh	r1, [r0, #16]
 8018da2:	8a40      	ldrh	r0, [r0, #18]
 8018da4:	b508      	push	{r3, lr}
 8018da6:	f000 f82f 	bl	8018e08 <uxr_seq_num_cmp>
 8018daa:	fab0 f080 	clz	r0, r0
 8018dae:	0940      	lsrs	r0, r0, #5
 8018db0:	bd08      	pop	{r3, pc}
 8018db2:	bf00      	nop

08018db4 <get_available_free_slots>:
 8018db4:	8901      	ldrh	r1, [r0, #8]
 8018db6:	b1e1      	cbz	r1, 8018df2 <get_available_free_slots+0x3e>
 8018db8:	6843      	ldr	r3, [r0, #4]
 8018dba:	f04f 0c00 	mov.w	ip, #0
 8018dbe:	b530      	push	{r4, r5, lr}
 8018dc0:	fbb3 fef1 	udiv	lr, r3, r1
 8018dc4:	6805      	ldr	r5, [r0, #0]
 8018dc6:	4662      	mov	r2, ip
 8018dc8:	7b04      	ldrb	r4, [r0, #12]
 8018dca:	4660      	mov	r0, ip
 8018dcc:	f10c 0c01 	add.w	ip, ip, #1
 8018dd0:	fbb2 f3f1 	udiv	r3, r2, r1
 8018dd4:	fb01 2313 	mls	r3, r1, r3, r2
 8018dd8:	fa1f f28c 	uxth.w	r2, ip
 8018ddc:	b29b      	uxth	r3, r3
 8018dde:	fb0e f303 	mul.w	r3, lr, r3
 8018de2:	58eb      	ldr	r3, [r5, r3]
 8018de4:	429c      	cmp	r4, r3
 8018de6:	d101      	bne.n	8018dec <get_available_free_slots+0x38>
 8018de8:	3001      	adds	r0, #1
 8018dea:	b280      	uxth	r0, r0
 8018dec:	428a      	cmp	r2, r1
 8018dee:	d3ed      	bcc.n	8018dcc <get_available_free_slots+0x18>
 8018df0:	bd30      	pop	{r4, r5, pc}
 8018df2:	4608      	mov	r0, r1
 8018df4:	4770      	bx	lr
 8018df6:	bf00      	nop

08018df8 <uxr_seq_num_add>:
 8018df8:	4408      	add	r0, r1
 8018dfa:	b280      	uxth	r0, r0
 8018dfc:	4770      	bx	lr
 8018dfe:	bf00      	nop

08018e00 <uxr_seq_num_sub>:
 8018e00:	1a40      	subs	r0, r0, r1
 8018e02:	b280      	uxth	r0, r0
 8018e04:	4770      	bx	lr
 8018e06:	bf00      	nop

08018e08 <uxr_seq_num_cmp>:
 8018e08:	4288      	cmp	r0, r1
 8018e0a:	d011      	beq.n	8018e30 <uxr_seq_num_cmp+0x28>
 8018e0c:	d309      	bcc.n	8018e22 <uxr_seq_num_cmp+0x1a>
 8018e0e:	4288      	cmp	r0, r1
 8018e10:	d910      	bls.n	8018e34 <uxr_seq_num_cmp+0x2c>
 8018e12:	1a40      	subs	r0, r0, r1
 8018e14:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8018e18:	bfd4      	ite	le
 8018e1a:	2001      	movle	r0, #1
 8018e1c:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
 8018e20:	4770      	bx	lr
 8018e22:	1a0b      	subs	r3, r1, r0
 8018e24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8018e28:	daf1      	bge.n	8018e0e <uxr_seq_num_cmp+0x6>
 8018e2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018e2e:	4770      	bx	lr
 8018e30:	2000      	movs	r0, #0
 8018e32:	4770      	bx	lr
 8018e34:	2001      	movs	r0, #1
 8018e36:	4770      	bx	lr

08018e38 <abort>:
 8018e38:	b508      	push	{r3, lr}
 8018e3a:	2006      	movs	r0, #6
 8018e3c:	f000 fc5a 	bl	80196f4 <raise>
 8018e40:	2001      	movs	r0, #1
 8018e42:	f7e9 fb39 	bl	80024b8 <_exit>
	...

08018e48 <calloc>:
 8018e48:	4b02      	ldr	r3, [pc, #8]	; (8018e54 <calloc+0xc>)
 8018e4a:	460a      	mov	r2, r1
 8018e4c:	4601      	mov	r1, r0
 8018e4e:	6818      	ldr	r0, [r3, #0]
 8018e50:	f000 b802 	b.w	8018e58 <_calloc_r>
 8018e54:	20002138 	.word	0x20002138

08018e58 <_calloc_r>:
 8018e58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018e5a:	fba1 2402 	umull	r2, r4, r1, r2
 8018e5e:	b94c      	cbnz	r4, 8018e74 <_calloc_r+0x1c>
 8018e60:	4611      	mov	r1, r2
 8018e62:	9201      	str	r2, [sp, #4]
 8018e64:	f000 f886 	bl	8018f74 <_malloc_r>
 8018e68:	9a01      	ldr	r2, [sp, #4]
 8018e6a:	4605      	mov	r5, r0
 8018e6c:	b930      	cbnz	r0, 8018e7c <_calloc_r+0x24>
 8018e6e:	4628      	mov	r0, r5
 8018e70:	b003      	add	sp, #12
 8018e72:	bd30      	pop	{r4, r5, pc}
 8018e74:	220c      	movs	r2, #12
 8018e76:	6002      	str	r2, [r0, #0]
 8018e78:	2500      	movs	r5, #0
 8018e7a:	e7f8      	b.n	8018e6e <_calloc_r+0x16>
 8018e7c:	4621      	mov	r1, r4
 8018e7e:	f000 fbc1 	bl	8019604 <memset>
 8018e82:	e7f4      	b.n	8018e6e <_calloc_r+0x16>

08018e84 <getenv>:
 8018e84:	b507      	push	{r0, r1, r2, lr}
 8018e86:	4b04      	ldr	r3, [pc, #16]	; (8018e98 <getenv+0x14>)
 8018e88:	4601      	mov	r1, r0
 8018e8a:	aa01      	add	r2, sp, #4
 8018e8c:	6818      	ldr	r0, [r3, #0]
 8018e8e:	f000 f805 	bl	8018e9c <_findenv_r>
 8018e92:	b003      	add	sp, #12
 8018e94:	f85d fb04 	ldr.w	pc, [sp], #4
 8018e98:	20002138 	.word	0x20002138

08018e9c <_findenv_r>:
 8018e9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ea0:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8018f10 <_findenv_r+0x74>
 8018ea4:	4607      	mov	r7, r0
 8018ea6:	4689      	mov	r9, r1
 8018ea8:	4616      	mov	r6, r2
 8018eaa:	f000 fd4d 	bl	8019948 <__env_lock>
 8018eae:	f8da 4000 	ldr.w	r4, [sl]
 8018eb2:	b134      	cbz	r4, 8018ec2 <_findenv_r+0x26>
 8018eb4:	464b      	mov	r3, r9
 8018eb6:	4698      	mov	r8, r3
 8018eb8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018ebc:	b13a      	cbz	r2, 8018ece <_findenv_r+0x32>
 8018ebe:	2a3d      	cmp	r2, #61	; 0x3d
 8018ec0:	d1f9      	bne.n	8018eb6 <_findenv_r+0x1a>
 8018ec2:	4638      	mov	r0, r7
 8018ec4:	f000 fd46 	bl	8019954 <__env_unlock>
 8018ec8:	2000      	movs	r0, #0
 8018eca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ece:	eba8 0809 	sub.w	r8, r8, r9
 8018ed2:	46a3      	mov	fp, r4
 8018ed4:	f854 0b04 	ldr.w	r0, [r4], #4
 8018ed8:	2800      	cmp	r0, #0
 8018eda:	d0f2      	beq.n	8018ec2 <_findenv_r+0x26>
 8018edc:	4642      	mov	r2, r8
 8018ede:	4649      	mov	r1, r9
 8018ee0:	f000 fba5 	bl	801962e <strncmp>
 8018ee4:	2800      	cmp	r0, #0
 8018ee6:	d1f4      	bne.n	8018ed2 <_findenv_r+0x36>
 8018ee8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8018eec:	eb03 0508 	add.w	r5, r3, r8
 8018ef0:	f813 3008 	ldrb.w	r3, [r3, r8]
 8018ef4:	2b3d      	cmp	r3, #61	; 0x3d
 8018ef6:	d1ec      	bne.n	8018ed2 <_findenv_r+0x36>
 8018ef8:	f8da 3000 	ldr.w	r3, [sl]
 8018efc:	ebab 0303 	sub.w	r3, fp, r3
 8018f00:	109b      	asrs	r3, r3, #2
 8018f02:	4638      	mov	r0, r7
 8018f04:	6033      	str	r3, [r6, #0]
 8018f06:	f000 fd25 	bl	8019954 <__env_unlock>
 8018f0a:	1c68      	adds	r0, r5, #1
 8018f0c:	e7dd      	b.n	8018eca <_findenv_r+0x2e>
 8018f0e:	bf00      	nop
 8018f10:	20000000 	.word	0x20000000

08018f14 <malloc>:
 8018f14:	4b02      	ldr	r3, [pc, #8]	; (8018f20 <malloc+0xc>)
 8018f16:	4601      	mov	r1, r0
 8018f18:	6818      	ldr	r0, [r3, #0]
 8018f1a:	f000 b82b 	b.w	8018f74 <_malloc_r>
 8018f1e:	bf00      	nop
 8018f20:	20002138 	.word	0x20002138

08018f24 <free>:
 8018f24:	4b02      	ldr	r3, [pc, #8]	; (8018f30 <free+0xc>)
 8018f26:	4601      	mov	r1, r0
 8018f28:	6818      	ldr	r0, [r3, #0]
 8018f2a:	f000 bd19 	b.w	8019960 <_free_r>
 8018f2e:	bf00      	nop
 8018f30:	20002138 	.word	0x20002138

08018f34 <sbrk_aligned>:
 8018f34:	b570      	push	{r4, r5, r6, lr}
 8018f36:	4e0e      	ldr	r6, [pc, #56]	; (8018f70 <sbrk_aligned+0x3c>)
 8018f38:	460c      	mov	r4, r1
 8018f3a:	6831      	ldr	r1, [r6, #0]
 8018f3c:	4605      	mov	r5, r0
 8018f3e:	b911      	cbnz	r1, 8018f46 <sbrk_aligned+0x12>
 8018f40:	f000 fc7e 	bl	8019840 <_sbrk_r>
 8018f44:	6030      	str	r0, [r6, #0]
 8018f46:	4621      	mov	r1, r4
 8018f48:	4628      	mov	r0, r5
 8018f4a:	f000 fc79 	bl	8019840 <_sbrk_r>
 8018f4e:	1c43      	adds	r3, r0, #1
 8018f50:	d00a      	beq.n	8018f68 <sbrk_aligned+0x34>
 8018f52:	1cc4      	adds	r4, r0, #3
 8018f54:	f024 0403 	bic.w	r4, r4, #3
 8018f58:	42a0      	cmp	r0, r4
 8018f5a:	d007      	beq.n	8018f6c <sbrk_aligned+0x38>
 8018f5c:	1a21      	subs	r1, r4, r0
 8018f5e:	4628      	mov	r0, r5
 8018f60:	f000 fc6e 	bl	8019840 <_sbrk_r>
 8018f64:	3001      	adds	r0, #1
 8018f66:	d101      	bne.n	8018f6c <sbrk_aligned+0x38>
 8018f68:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8018f6c:	4620      	mov	r0, r4
 8018f6e:	bd70      	pop	{r4, r5, r6, pc}
 8018f70:	200109e8 	.word	0x200109e8

08018f74 <_malloc_r>:
 8018f74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018f78:	1ccd      	adds	r5, r1, #3
 8018f7a:	f025 0503 	bic.w	r5, r5, #3
 8018f7e:	3508      	adds	r5, #8
 8018f80:	2d0c      	cmp	r5, #12
 8018f82:	bf38      	it	cc
 8018f84:	250c      	movcc	r5, #12
 8018f86:	2d00      	cmp	r5, #0
 8018f88:	4607      	mov	r7, r0
 8018f8a:	db01      	blt.n	8018f90 <_malloc_r+0x1c>
 8018f8c:	42a9      	cmp	r1, r5
 8018f8e:	d905      	bls.n	8018f9c <_malloc_r+0x28>
 8018f90:	230c      	movs	r3, #12
 8018f92:	603b      	str	r3, [r7, #0]
 8018f94:	2600      	movs	r6, #0
 8018f96:	4630      	mov	r0, r6
 8018f98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018f9c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8019070 <_malloc_r+0xfc>
 8018fa0:	f000 f868 	bl	8019074 <__malloc_lock>
 8018fa4:	f8d8 3000 	ldr.w	r3, [r8]
 8018fa8:	461c      	mov	r4, r3
 8018faa:	bb5c      	cbnz	r4, 8019004 <_malloc_r+0x90>
 8018fac:	4629      	mov	r1, r5
 8018fae:	4638      	mov	r0, r7
 8018fb0:	f7ff ffc0 	bl	8018f34 <sbrk_aligned>
 8018fb4:	1c43      	adds	r3, r0, #1
 8018fb6:	4604      	mov	r4, r0
 8018fb8:	d155      	bne.n	8019066 <_malloc_r+0xf2>
 8018fba:	f8d8 4000 	ldr.w	r4, [r8]
 8018fbe:	4626      	mov	r6, r4
 8018fc0:	2e00      	cmp	r6, #0
 8018fc2:	d145      	bne.n	8019050 <_malloc_r+0xdc>
 8018fc4:	2c00      	cmp	r4, #0
 8018fc6:	d048      	beq.n	801905a <_malloc_r+0xe6>
 8018fc8:	6823      	ldr	r3, [r4, #0]
 8018fca:	4631      	mov	r1, r6
 8018fcc:	4638      	mov	r0, r7
 8018fce:	eb04 0903 	add.w	r9, r4, r3
 8018fd2:	f000 fc35 	bl	8019840 <_sbrk_r>
 8018fd6:	4581      	cmp	r9, r0
 8018fd8:	d13f      	bne.n	801905a <_malloc_r+0xe6>
 8018fda:	6821      	ldr	r1, [r4, #0]
 8018fdc:	1a6d      	subs	r5, r5, r1
 8018fde:	4629      	mov	r1, r5
 8018fe0:	4638      	mov	r0, r7
 8018fe2:	f7ff ffa7 	bl	8018f34 <sbrk_aligned>
 8018fe6:	3001      	adds	r0, #1
 8018fe8:	d037      	beq.n	801905a <_malloc_r+0xe6>
 8018fea:	6823      	ldr	r3, [r4, #0]
 8018fec:	442b      	add	r3, r5
 8018fee:	6023      	str	r3, [r4, #0]
 8018ff0:	f8d8 3000 	ldr.w	r3, [r8]
 8018ff4:	2b00      	cmp	r3, #0
 8018ff6:	d038      	beq.n	801906a <_malloc_r+0xf6>
 8018ff8:	685a      	ldr	r2, [r3, #4]
 8018ffa:	42a2      	cmp	r2, r4
 8018ffc:	d12b      	bne.n	8019056 <_malloc_r+0xe2>
 8018ffe:	2200      	movs	r2, #0
 8019000:	605a      	str	r2, [r3, #4]
 8019002:	e00f      	b.n	8019024 <_malloc_r+0xb0>
 8019004:	6822      	ldr	r2, [r4, #0]
 8019006:	1b52      	subs	r2, r2, r5
 8019008:	d41f      	bmi.n	801904a <_malloc_r+0xd6>
 801900a:	2a0b      	cmp	r2, #11
 801900c:	d917      	bls.n	801903e <_malloc_r+0xca>
 801900e:	1961      	adds	r1, r4, r5
 8019010:	42a3      	cmp	r3, r4
 8019012:	6025      	str	r5, [r4, #0]
 8019014:	bf18      	it	ne
 8019016:	6059      	strne	r1, [r3, #4]
 8019018:	6863      	ldr	r3, [r4, #4]
 801901a:	bf08      	it	eq
 801901c:	f8c8 1000 	streq.w	r1, [r8]
 8019020:	5162      	str	r2, [r4, r5]
 8019022:	604b      	str	r3, [r1, #4]
 8019024:	4638      	mov	r0, r7
 8019026:	f104 060b 	add.w	r6, r4, #11
 801902a:	f000 f829 	bl	8019080 <__malloc_unlock>
 801902e:	f026 0607 	bic.w	r6, r6, #7
 8019032:	1d23      	adds	r3, r4, #4
 8019034:	1af2      	subs	r2, r6, r3
 8019036:	d0ae      	beq.n	8018f96 <_malloc_r+0x22>
 8019038:	1b9b      	subs	r3, r3, r6
 801903a:	50a3      	str	r3, [r4, r2]
 801903c:	e7ab      	b.n	8018f96 <_malloc_r+0x22>
 801903e:	42a3      	cmp	r3, r4
 8019040:	6862      	ldr	r2, [r4, #4]
 8019042:	d1dd      	bne.n	8019000 <_malloc_r+0x8c>
 8019044:	f8c8 2000 	str.w	r2, [r8]
 8019048:	e7ec      	b.n	8019024 <_malloc_r+0xb0>
 801904a:	4623      	mov	r3, r4
 801904c:	6864      	ldr	r4, [r4, #4]
 801904e:	e7ac      	b.n	8018faa <_malloc_r+0x36>
 8019050:	4634      	mov	r4, r6
 8019052:	6876      	ldr	r6, [r6, #4]
 8019054:	e7b4      	b.n	8018fc0 <_malloc_r+0x4c>
 8019056:	4613      	mov	r3, r2
 8019058:	e7cc      	b.n	8018ff4 <_malloc_r+0x80>
 801905a:	230c      	movs	r3, #12
 801905c:	603b      	str	r3, [r7, #0]
 801905e:	4638      	mov	r0, r7
 8019060:	f000 f80e 	bl	8019080 <__malloc_unlock>
 8019064:	e797      	b.n	8018f96 <_malloc_r+0x22>
 8019066:	6025      	str	r5, [r4, #0]
 8019068:	e7dc      	b.n	8019024 <_malloc_r+0xb0>
 801906a:	605b      	str	r3, [r3, #4]
 801906c:	deff      	udf	#255	; 0xff
 801906e:	bf00      	nop
 8019070:	200109e4 	.word	0x200109e4

08019074 <__malloc_lock>:
 8019074:	4801      	ldr	r0, [pc, #4]	; (801907c <__malloc_lock+0x8>)
 8019076:	f000 bc30 	b.w	80198da <__retarget_lock_acquire_recursive>
 801907a:	bf00      	nop
 801907c:	20010b2d 	.word	0x20010b2d

08019080 <__malloc_unlock>:
 8019080:	4801      	ldr	r0, [pc, #4]	; (8019088 <__malloc_unlock+0x8>)
 8019082:	f000 bc2b 	b.w	80198dc <__retarget_lock_release_recursive>
 8019086:	bf00      	nop
 8019088:	20010b2d 	.word	0x20010b2d

0801908c <srand>:
 801908c:	b538      	push	{r3, r4, r5, lr}
 801908e:	4b10      	ldr	r3, [pc, #64]	; (80190d0 <srand+0x44>)
 8019090:	681d      	ldr	r5, [r3, #0]
 8019092:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8019094:	4604      	mov	r4, r0
 8019096:	b9b3      	cbnz	r3, 80190c6 <srand+0x3a>
 8019098:	2018      	movs	r0, #24
 801909a:	f7ff ff3b 	bl	8018f14 <malloc>
 801909e:	4602      	mov	r2, r0
 80190a0:	6328      	str	r0, [r5, #48]	; 0x30
 80190a2:	b920      	cbnz	r0, 80190ae <srand+0x22>
 80190a4:	4b0b      	ldr	r3, [pc, #44]	; (80190d4 <srand+0x48>)
 80190a6:	480c      	ldr	r0, [pc, #48]	; (80190d8 <srand+0x4c>)
 80190a8:	2146      	movs	r1, #70	; 0x46
 80190aa:	f000 fc2f 	bl	801990c <__assert_func>
 80190ae:	490b      	ldr	r1, [pc, #44]	; (80190dc <srand+0x50>)
 80190b0:	4b0b      	ldr	r3, [pc, #44]	; (80190e0 <srand+0x54>)
 80190b2:	e9c0 1300 	strd	r1, r3, [r0]
 80190b6:	4b0b      	ldr	r3, [pc, #44]	; (80190e4 <srand+0x58>)
 80190b8:	6083      	str	r3, [r0, #8]
 80190ba:	230b      	movs	r3, #11
 80190bc:	8183      	strh	r3, [r0, #12]
 80190be:	2100      	movs	r1, #0
 80190c0:	2001      	movs	r0, #1
 80190c2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80190c6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80190c8:	2200      	movs	r2, #0
 80190ca:	611c      	str	r4, [r3, #16]
 80190cc:	615a      	str	r2, [r3, #20]
 80190ce:	bd38      	pop	{r3, r4, r5, pc}
 80190d0:	20002138 	.word	0x20002138
 80190d4:	0801bed4 	.word	0x0801bed4
 80190d8:	0801beeb 	.word	0x0801beeb
 80190dc:	abcd330e 	.word	0xabcd330e
 80190e0:	e66d1234 	.word	0xe66d1234
 80190e4:	0005deec 	.word	0x0005deec

080190e8 <rand>:
 80190e8:	4b16      	ldr	r3, [pc, #88]	; (8019144 <rand+0x5c>)
 80190ea:	b510      	push	{r4, lr}
 80190ec:	681c      	ldr	r4, [r3, #0]
 80190ee:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80190f0:	b9b3      	cbnz	r3, 8019120 <rand+0x38>
 80190f2:	2018      	movs	r0, #24
 80190f4:	f7ff ff0e 	bl	8018f14 <malloc>
 80190f8:	4602      	mov	r2, r0
 80190fa:	6320      	str	r0, [r4, #48]	; 0x30
 80190fc:	b920      	cbnz	r0, 8019108 <rand+0x20>
 80190fe:	4b12      	ldr	r3, [pc, #72]	; (8019148 <rand+0x60>)
 8019100:	4812      	ldr	r0, [pc, #72]	; (801914c <rand+0x64>)
 8019102:	2152      	movs	r1, #82	; 0x52
 8019104:	f000 fc02 	bl	801990c <__assert_func>
 8019108:	4911      	ldr	r1, [pc, #68]	; (8019150 <rand+0x68>)
 801910a:	4b12      	ldr	r3, [pc, #72]	; (8019154 <rand+0x6c>)
 801910c:	e9c0 1300 	strd	r1, r3, [r0]
 8019110:	4b11      	ldr	r3, [pc, #68]	; (8019158 <rand+0x70>)
 8019112:	6083      	str	r3, [r0, #8]
 8019114:	230b      	movs	r3, #11
 8019116:	8183      	strh	r3, [r0, #12]
 8019118:	2100      	movs	r1, #0
 801911a:	2001      	movs	r0, #1
 801911c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8019120:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8019122:	480e      	ldr	r0, [pc, #56]	; (801915c <rand+0x74>)
 8019124:	690b      	ldr	r3, [r1, #16]
 8019126:	694c      	ldr	r4, [r1, #20]
 8019128:	4a0d      	ldr	r2, [pc, #52]	; (8019160 <rand+0x78>)
 801912a:	4358      	muls	r0, r3
 801912c:	fb02 0004 	mla	r0, r2, r4, r0
 8019130:	fba3 3202 	umull	r3, r2, r3, r2
 8019134:	3301      	adds	r3, #1
 8019136:	eb40 0002 	adc.w	r0, r0, r2
 801913a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801913e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8019142:	bd10      	pop	{r4, pc}
 8019144:	20002138 	.word	0x20002138
 8019148:	0801bed4 	.word	0x0801bed4
 801914c:	0801beeb 	.word	0x0801beeb
 8019150:	abcd330e 	.word	0xabcd330e
 8019154:	e66d1234 	.word	0xe66d1234
 8019158:	0005deec 	.word	0x0005deec
 801915c:	5851f42d 	.word	0x5851f42d
 8019160:	4c957f2d 	.word	0x4c957f2d

08019164 <realloc>:
 8019164:	4b02      	ldr	r3, [pc, #8]	; (8019170 <realloc+0xc>)
 8019166:	460a      	mov	r2, r1
 8019168:	4601      	mov	r1, r0
 801916a:	6818      	ldr	r0, [r3, #0]
 801916c:	f000 b802 	b.w	8019174 <_realloc_r>
 8019170:	20002138 	.word	0x20002138

08019174 <_realloc_r>:
 8019174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019178:	4680      	mov	r8, r0
 801917a:	4614      	mov	r4, r2
 801917c:	460e      	mov	r6, r1
 801917e:	b921      	cbnz	r1, 801918a <_realloc_r+0x16>
 8019180:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019184:	4611      	mov	r1, r2
 8019186:	f7ff bef5 	b.w	8018f74 <_malloc_r>
 801918a:	b92a      	cbnz	r2, 8019198 <_realloc_r+0x24>
 801918c:	f000 fbe8 	bl	8019960 <_free_r>
 8019190:	4625      	mov	r5, r4
 8019192:	4628      	mov	r0, r5
 8019194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019198:	f000 fc2e 	bl	80199f8 <_malloc_usable_size_r>
 801919c:	4284      	cmp	r4, r0
 801919e:	4607      	mov	r7, r0
 80191a0:	d802      	bhi.n	80191a8 <_realloc_r+0x34>
 80191a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80191a6:	d812      	bhi.n	80191ce <_realloc_r+0x5a>
 80191a8:	4621      	mov	r1, r4
 80191aa:	4640      	mov	r0, r8
 80191ac:	f7ff fee2 	bl	8018f74 <_malloc_r>
 80191b0:	4605      	mov	r5, r0
 80191b2:	2800      	cmp	r0, #0
 80191b4:	d0ed      	beq.n	8019192 <_realloc_r+0x1e>
 80191b6:	42bc      	cmp	r4, r7
 80191b8:	4622      	mov	r2, r4
 80191ba:	4631      	mov	r1, r6
 80191bc:	bf28      	it	cs
 80191be:	463a      	movcs	r2, r7
 80191c0:	f000 fb95 	bl	80198ee <memcpy>
 80191c4:	4631      	mov	r1, r6
 80191c6:	4640      	mov	r0, r8
 80191c8:	f000 fbca 	bl	8019960 <_free_r>
 80191cc:	e7e1      	b.n	8019192 <_realloc_r+0x1e>
 80191ce:	4635      	mov	r5, r6
 80191d0:	e7df      	b.n	8019192 <_realloc_r+0x1e>
	...

080191d4 <_strtoul_l.constprop.0>:
 80191d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80191d8:	4f36      	ldr	r7, [pc, #216]	; (80192b4 <_strtoul_l.constprop.0+0xe0>)
 80191da:	4686      	mov	lr, r0
 80191dc:	460d      	mov	r5, r1
 80191de:	4628      	mov	r0, r5
 80191e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80191e4:	5d3e      	ldrb	r6, [r7, r4]
 80191e6:	f016 0608 	ands.w	r6, r6, #8
 80191ea:	d1f8      	bne.n	80191de <_strtoul_l.constprop.0+0xa>
 80191ec:	2c2d      	cmp	r4, #45	; 0x2d
 80191ee:	d130      	bne.n	8019252 <_strtoul_l.constprop.0+0x7e>
 80191f0:	782c      	ldrb	r4, [r5, #0]
 80191f2:	2601      	movs	r6, #1
 80191f4:	1c85      	adds	r5, r0, #2
 80191f6:	2b00      	cmp	r3, #0
 80191f8:	d057      	beq.n	80192aa <_strtoul_l.constprop.0+0xd6>
 80191fa:	2b10      	cmp	r3, #16
 80191fc:	d109      	bne.n	8019212 <_strtoul_l.constprop.0+0x3e>
 80191fe:	2c30      	cmp	r4, #48	; 0x30
 8019200:	d107      	bne.n	8019212 <_strtoul_l.constprop.0+0x3e>
 8019202:	7828      	ldrb	r0, [r5, #0]
 8019204:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8019208:	2858      	cmp	r0, #88	; 0x58
 801920a:	d149      	bne.n	80192a0 <_strtoul_l.constprop.0+0xcc>
 801920c:	786c      	ldrb	r4, [r5, #1]
 801920e:	2310      	movs	r3, #16
 8019210:	3502      	adds	r5, #2
 8019212:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8019216:	2700      	movs	r7, #0
 8019218:	fbb8 f8f3 	udiv	r8, r8, r3
 801921c:	fb03 f908 	mul.w	r9, r3, r8
 8019220:	ea6f 0909 	mvn.w	r9, r9
 8019224:	4638      	mov	r0, r7
 8019226:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801922a:	f1bc 0f09 	cmp.w	ip, #9
 801922e:	d815      	bhi.n	801925c <_strtoul_l.constprop.0+0x88>
 8019230:	4664      	mov	r4, ip
 8019232:	42a3      	cmp	r3, r4
 8019234:	dd23      	ble.n	801927e <_strtoul_l.constprop.0+0xaa>
 8019236:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 801923a:	d007      	beq.n	801924c <_strtoul_l.constprop.0+0x78>
 801923c:	4580      	cmp	r8, r0
 801923e:	d31b      	bcc.n	8019278 <_strtoul_l.constprop.0+0xa4>
 8019240:	d101      	bne.n	8019246 <_strtoul_l.constprop.0+0x72>
 8019242:	45a1      	cmp	r9, r4
 8019244:	db18      	blt.n	8019278 <_strtoul_l.constprop.0+0xa4>
 8019246:	fb00 4003 	mla	r0, r0, r3, r4
 801924a:	2701      	movs	r7, #1
 801924c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019250:	e7e9      	b.n	8019226 <_strtoul_l.constprop.0+0x52>
 8019252:	2c2b      	cmp	r4, #43	; 0x2b
 8019254:	bf04      	itt	eq
 8019256:	782c      	ldrbeq	r4, [r5, #0]
 8019258:	1c85      	addeq	r5, r0, #2
 801925a:	e7cc      	b.n	80191f6 <_strtoul_l.constprop.0+0x22>
 801925c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8019260:	f1bc 0f19 	cmp.w	ip, #25
 8019264:	d801      	bhi.n	801926a <_strtoul_l.constprop.0+0x96>
 8019266:	3c37      	subs	r4, #55	; 0x37
 8019268:	e7e3      	b.n	8019232 <_strtoul_l.constprop.0+0x5e>
 801926a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801926e:	f1bc 0f19 	cmp.w	ip, #25
 8019272:	d804      	bhi.n	801927e <_strtoul_l.constprop.0+0xaa>
 8019274:	3c57      	subs	r4, #87	; 0x57
 8019276:	e7dc      	b.n	8019232 <_strtoul_l.constprop.0+0x5e>
 8019278:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801927c:	e7e6      	b.n	801924c <_strtoul_l.constprop.0+0x78>
 801927e:	1c7b      	adds	r3, r7, #1
 8019280:	d106      	bne.n	8019290 <_strtoul_l.constprop.0+0xbc>
 8019282:	2322      	movs	r3, #34	; 0x22
 8019284:	f8ce 3000 	str.w	r3, [lr]
 8019288:	4638      	mov	r0, r7
 801928a:	b932      	cbnz	r2, 801929a <_strtoul_l.constprop.0+0xc6>
 801928c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019290:	b106      	cbz	r6, 8019294 <_strtoul_l.constprop.0+0xc0>
 8019292:	4240      	negs	r0, r0
 8019294:	2a00      	cmp	r2, #0
 8019296:	d0f9      	beq.n	801928c <_strtoul_l.constprop.0+0xb8>
 8019298:	b107      	cbz	r7, 801929c <_strtoul_l.constprop.0+0xc8>
 801929a:	1e69      	subs	r1, r5, #1
 801929c:	6011      	str	r1, [r2, #0]
 801929e:	e7f5      	b.n	801928c <_strtoul_l.constprop.0+0xb8>
 80192a0:	2430      	movs	r4, #48	; 0x30
 80192a2:	2b00      	cmp	r3, #0
 80192a4:	d1b5      	bne.n	8019212 <_strtoul_l.constprop.0+0x3e>
 80192a6:	2308      	movs	r3, #8
 80192a8:	e7b3      	b.n	8019212 <_strtoul_l.constprop.0+0x3e>
 80192aa:	2c30      	cmp	r4, #48	; 0x30
 80192ac:	d0a9      	beq.n	8019202 <_strtoul_l.constprop.0+0x2e>
 80192ae:	230a      	movs	r3, #10
 80192b0:	e7af      	b.n	8019212 <_strtoul_l.constprop.0+0x3e>
 80192b2:	bf00      	nop
 80192b4:	0801bf44 	.word	0x0801bf44

080192b8 <strtoul>:
 80192b8:	4613      	mov	r3, r2
 80192ba:	460a      	mov	r2, r1
 80192bc:	4601      	mov	r1, r0
 80192be:	4802      	ldr	r0, [pc, #8]	; (80192c8 <strtoul+0x10>)
 80192c0:	6800      	ldr	r0, [r0, #0]
 80192c2:	f7ff bf87 	b.w	80191d4 <_strtoul_l.constprop.0>
 80192c6:	bf00      	nop
 80192c8:	20002138 	.word	0x20002138

080192cc <std>:
 80192cc:	2300      	movs	r3, #0
 80192ce:	b510      	push	{r4, lr}
 80192d0:	4604      	mov	r4, r0
 80192d2:	e9c0 3300 	strd	r3, r3, [r0]
 80192d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80192da:	6083      	str	r3, [r0, #8]
 80192dc:	8181      	strh	r1, [r0, #12]
 80192de:	6643      	str	r3, [r0, #100]	; 0x64
 80192e0:	81c2      	strh	r2, [r0, #14]
 80192e2:	6183      	str	r3, [r0, #24]
 80192e4:	4619      	mov	r1, r3
 80192e6:	2208      	movs	r2, #8
 80192e8:	305c      	adds	r0, #92	; 0x5c
 80192ea:	f000 f98b 	bl	8019604 <memset>
 80192ee:	4b0d      	ldr	r3, [pc, #52]	; (8019324 <std+0x58>)
 80192f0:	6263      	str	r3, [r4, #36]	; 0x24
 80192f2:	4b0d      	ldr	r3, [pc, #52]	; (8019328 <std+0x5c>)
 80192f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80192f6:	4b0d      	ldr	r3, [pc, #52]	; (801932c <std+0x60>)
 80192f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80192fa:	4b0d      	ldr	r3, [pc, #52]	; (8019330 <std+0x64>)
 80192fc:	6323      	str	r3, [r4, #48]	; 0x30
 80192fe:	4b0d      	ldr	r3, [pc, #52]	; (8019334 <std+0x68>)
 8019300:	6224      	str	r4, [r4, #32]
 8019302:	429c      	cmp	r4, r3
 8019304:	d006      	beq.n	8019314 <std+0x48>
 8019306:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801930a:	4294      	cmp	r4, r2
 801930c:	d002      	beq.n	8019314 <std+0x48>
 801930e:	33d0      	adds	r3, #208	; 0xd0
 8019310:	429c      	cmp	r4, r3
 8019312:	d105      	bne.n	8019320 <std+0x54>
 8019314:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8019318:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801931c:	f000 badc 	b.w	80198d8 <__retarget_lock_init_recursive>
 8019320:	bd10      	pop	{r4, pc}
 8019322:	bf00      	nop
 8019324:	080194b9 	.word	0x080194b9
 8019328:	080194db 	.word	0x080194db
 801932c:	08019513 	.word	0x08019513
 8019330:	08019537 	.word	0x08019537
 8019334:	200109ec 	.word	0x200109ec

08019338 <stdio_exit_handler>:
 8019338:	4a02      	ldr	r2, [pc, #8]	; (8019344 <stdio_exit_handler+0xc>)
 801933a:	4903      	ldr	r1, [pc, #12]	; (8019348 <stdio_exit_handler+0x10>)
 801933c:	4803      	ldr	r0, [pc, #12]	; (801934c <stdio_exit_handler+0x14>)
 801933e:	f000 b869 	b.w	8019414 <_fwalk_sglue>
 8019342:	bf00      	nop
 8019344:	200020e0 	.word	0x200020e0
 8019348:	0801a0e5 	.word	0x0801a0e5
 801934c:	200020ec 	.word	0x200020ec

08019350 <cleanup_stdio>:
 8019350:	6841      	ldr	r1, [r0, #4]
 8019352:	4b0c      	ldr	r3, [pc, #48]	; (8019384 <cleanup_stdio+0x34>)
 8019354:	4299      	cmp	r1, r3
 8019356:	b510      	push	{r4, lr}
 8019358:	4604      	mov	r4, r0
 801935a:	d001      	beq.n	8019360 <cleanup_stdio+0x10>
 801935c:	f000 fec2 	bl	801a0e4 <_fflush_r>
 8019360:	68a1      	ldr	r1, [r4, #8]
 8019362:	4b09      	ldr	r3, [pc, #36]	; (8019388 <cleanup_stdio+0x38>)
 8019364:	4299      	cmp	r1, r3
 8019366:	d002      	beq.n	801936e <cleanup_stdio+0x1e>
 8019368:	4620      	mov	r0, r4
 801936a:	f000 febb 	bl	801a0e4 <_fflush_r>
 801936e:	68e1      	ldr	r1, [r4, #12]
 8019370:	4b06      	ldr	r3, [pc, #24]	; (801938c <cleanup_stdio+0x3c>)
 8019372:	4299      	cmp	r1, r3
 8019374:	d004      	beq.n	8019380 <cleanup_stdio+0x30>
 8019376:	4620      	mov	r0, r4
 8019378:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801937c:	f000 beb2 	b.w	801a0e4 <_fflush_r>
 8019380:	bd10      	pop	{r4, pc}
 8019382:	bf00      	nop
 8019384:	200109ec 	.word	0x200109ec
 8019388:	20010a54 	.word	0x20010a54
 801938c:	20010abc 	.word	0x20010abc

08019390 <global_stdio_init.part.0>:
 8019390:	b510      	push	{r4, lr}
 8019392:	4b0b      	ldr	r3, [pc, #44]	; (80193c0 <global_stdio_init.part.0+0x30>)
 8019394:	4c0b      	ldr	r4, [pc, #44]	; (80193c4 <global_stdio_init.part.0+0x34>)
 8019396:	4a0c      	ldr	r2, [pc, #48]	; (80193c8 <global_stdio_init.part.0+0x38>)
 8019398:	601a      	str	r2, [r3, #0]
 801939a:	4620      	mov	r0, r4
 801939c:	2200      	movs	r2, #0
 801939e:	2104      	movs	r1, #4
 80193a0:	f7ff ff94 	bl	80192cc <std>
 80193a4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80193a8:	2201      	movs	r2, #1
 80193aa:	2109      	movs	r1, #9
 80193ac:	f7ff ff8e 	bl	80192cc <std>
 80193b0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80193b4:	2202      	movs	r2, #2
 80193b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80193ba:	2112      	movs	r1, #18
 80193bc:	f7ff bf86 	b.w	80192cc <std>
 80193c0:	20010b24 	.word	0x20010b24
 80193c4:	200109ec 	.word	0x200109ec
 80193c8:	08019339 	.word	0x08019339

080193cc <__sfp_lock_acquire>:
 80193cc:	4801      	ldr	r0, [pc, #4]	; (80193d4 <__sfp_lock_acquire+0x8>)
 80193ce:	f000 ba84 	b.w	80198da <__retarget_lock_acquire_recursive>
 80193d2:	bf00      	nop
 80193d4:	20010b2e 	.word	0x20010b2e

080193d8 <__sfp_lock_release>:
 80193d8:	4801      	ldr	r0, [pc, #4]	; (80193e0 <__sfp_lock_release+0x8>)
 80193da:	f000 ba7f 	b.w	80198dc <__retarget_lock_release_recursive>
 80193de:	bf00      	nop
 80193e0:	20010b2e 	.word	0x20010b2e

080193e4 <__sinit>:
 80193e4:	b510      	push	{r4, lr}
 80193e6:	4604      	mov	r4, r0
 80193e8:	f7ff fff0 	bl	80193cc <__sfp_lock_acquire>
 80193ec:	6a23      	ldr	r3, [r4, #32]
 80193ee:	b11b      	cbz	r3, 80193f8 <__sinit+0x14>
 80193f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80193f4:	f7ff bff0 	b.w	80193d8 <__sfp_lock_release>
 80193f8:	4b04      	ldr	r3, [pc, #16]	; (801940c <__sinit+0x28>)
 80193fa:	6223      	str	r3, [r4, #32]
 80193fc:	4b04      	ldr	r3, [pc, #16]	; (8019410 <__sinit+0x2c>)
 80193fe:	681b      	ldr	r3, [r3, #0]
 8019400:	2b00      	cmp	r3, #0
 8019402:	d1f5      	bne.n	80193f0 <__sinit+0xc>
 8019404:	f7ff ffc4 	bl	8019390 <global_stdio_init.part.0>
 8019408:	e7f2      	b.n	80193f0 <__sinit+0xc>
 801940a:	bf00      	nop
 801940c:	08019351 	.word	0x08019351
 8019410:	20010b24 	.word	0x20010b24

08019414 <_fwalk_sglue>:
 8019414:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019418:	4607      	mov	r7, r0
 801941a:	4688      	mov	r8, r1
 801941c:	4614      	mov	r4, r2
 801941e:	2600      	movs	r6, #0
 8019420:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019424:	f1b9 0901 	subs.w	r9, r9, #1
 8019428:	d505      	bpl.n	8019436 <_fwalk_sglue+0x22>
 801942a:	6824      	ldr	r4, [r4, #0]
 801942c:	2c00      	cmp	r4, #0
 801942e:	d1f7      	bne.n	8019420 <_fwalk_sglue+0xc>
 8019430:	4630      	mov	r0, r6
 8019432:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019436:	89ab      	ldrh	r3, [r5, #12]
 8019438:	2b01      	cmp	r3, #1
 801943a:	d907      	bls.n	801944c <_fwalk_sglue+0x38>
 801943c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019440:	3301      	adds	r3, #1
 8019442:	d003      	beq.n	801944c <_fwalk_sglue+0x38>
 8019444:	4629      	mov	r1, r5
 8019446:	4638      	mov	r0, r7
 8019448:	47c0      	blx	r8
 801944a:	4306      	orrs	r6, r0
 801944c:	3568      	adds	r5, #104	; 0x68
 801944e:	e7e9      	b.n	8019424 <_fwalk_sglue+0x10>

08019450 <sniprintf>:
 8019450:	b40c      	push	{r2, r3}
 8019452:	b530      	push	{r4, r5, lr}
 8019454:	4b17      	ldr	r3, [pc, #92]	; (80194b4 <sniprintf+0x64>)
 8019456:	1e0c      	subs	r4, r1, #0
 8019458:	681d      	ldr	r5, [r3, #0]
 801945a:	b09d      	sub	sp, #116	; 0x74
 801945c:	da08      	bge.n	8019470 <sniprintf+0x20>
 801945e:	238b      	movs	r3, #139	; 0x8b
 8019460:	602b      	str	r3, [r5, #0]
 8019462:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019466:	b01d      	add	sp, #116	; 0x74
 8019468:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801946c:	b002      	add	sp, #8
 801946e:	4770      	bx	lr
 8019470:	f44f 7302 	mov.w	r3, #520	; 0x208
 8019474:	f8ad 3014 	strh.w	r3, [sp, #20]
 8019478:	bf14      	ite	ne
 801947a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801947e:	4623      	moveq	r3, r4
 8019480:	9304      	str	r3, [sp, #16]
 8019482:	9307      	str	r3, [sp, #28]
 8019484:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019488:	9002      	str	r0, [sp, #8]
 801948a:	9006      	str	r0, [sp, #24]
 801948c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019490:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8019492:	ab21      	add	r3, sp, #132	; 0x84
 8019494:	a902      	add	r1, sp, #8
 8019496:	4628      	mov	r0, r5
 8019498:	9301      	str	r3, [sp, #4]
 801949a:	f000 fb0f 	bl	8019abc <_svfiprintf_r>
 801949e:	1c43      	adds	r3, r0, #1
 80194a0:	bfbc      	itt	lt
 80194a2:	238b      	movlt	r3, #139	; 0x8b
 80194a4:	602b      	strlt	r3, [r5, #0]
 80194a6:	2c00      	cmp	r4, #0
 80194a8:	d0dd      	beq.n	8019466 <sniprintf+0x16>
 80194aa:	9b02      	ldr	r3, [sp, #8]
 80194ac:	2200      	movs	r2, #0
 80194ae:	701a      	strb	r2, [r3, #0]
 80194b0:	e7d9      	b.n	8019466 <sniprintf+0x16>
 80194b2:	bf00      	nop
 80194b4:	20002138 	.word	0x20002138

080194b8 <__sread>:
 80194b8:	b510      	push	{r4, lr}
 80194ba:	460c      	mov	r4, r1
 80194bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80194c0:	f000 f998 	bl	80197f4 <_read_r>
 80194c4:	2800      	cmp	r0, #0
 80194c6:	bfab      	itete	ge
 80194c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80194ca:	89a3      	ldrhlt	r3, [r4, #12]
 80194cc:	181b      	addge	r3, r3, r0
 80194ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80194d2:	bfac      	ite	ge
 80194d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80194d6:	81a3      	strhlt	r3, [r4, #12]
 80194d8:	bd10      	pop	{r4, pc}

080194da <__swrite>:
 80194da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80194de:	461f      	mov	r7, r3
 80194e0:	898b      	ldrh	r3, [r1, #12]
 80194e2:	05db      	lsls	r3, r3, #23
 80194e4:	4605      	mov	r5, r0
 80194e6:	460c      	mov	r4, r1
 80194e8:	4616      	mov	r6, r2
 80194ea:	d505      	bpl.n	80194f8 <__swrite+0x1e>
 80194ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80194f0:	2302      	movs	r3, #2
 80194f2:	2200      	movs	r2, #0
 80194f4:	f000 f96c 	bl	80197d0 <_lseek_r>
 80194f8:	89a3      	ldrh	r3, [r4, #12]
 80194fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80194fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8019502:	81a3      	strh	r3, [r4, #12]
 8019504:	4632      	mov	r2, r6
 8019506:	463b      	mov	r3, r7
 8019508:	4628      	mov	r0, r5
 801950a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801950e:	f000 b9a7 	b.w	8019860 <_write_r>

08019512 <__sseek>:
 8019512:	b510      	push	{r4, lr}
 8019514:	460c      	mov	r4, r1
 8019516:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801951a:	f000 f959 	bl	80197d0 <_lseek_r>
 801951e:	1c43      	adds	r3, r0, #1
 8019520:	89a3      	ldrh	r3, [r4, #12]
 8019522:	bf15      	itete	ne
 8019524:	6560      	strne	r0, [r4, #84]	; 0x54
 8019526:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801952a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801952e:	81a3      	strheq	r3, [r4, #12]
 8019530:	bf18      	it	ne
 8019532:	81a3      	strhne	r3, [r4, #12]
 8019534:	bd10      	pop	{r4, pc}

08019536 <__sclose>:
 8019536:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801953a:	f000 b8e3 	b.w	8019704 <_close_r>

0801953e <_vsniprintf_r>:
 801953e:	b530      	push	{r4, r5, lr}
 8019540:	4614      	mov	r4, r2
 8019542:	2c00      	cmp	r4, #0
 8019544:	b09b      	sub	sp, #108	; 0x6c
 8019546:	4605      	mov	r5, r0
 8019548:	461a      	mov	r2, r3
 801954a:	da05      	bge.n	8019558 <_vsniprintf_r+0x1a>
 801954c:	238b      	movs	r3, #139	; 0x8b
 801954e:	6003      	str	r3, [r0, #0]
 8019550:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019554:	b01b      	add	sp, #108	; 0x6c
 8019556:	bd30      	pop	{r4, r5, pc}
 8019558:	f44f 7302 	mov.w	r3, #520	; 0x208
 801955c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8019560:	bf14      	ite	ne
 8019562:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8019566:	4623      	moveq	r3, r4
 8019568:	9302      	str	r3, [sp, #8]
 801956a:	9305      	str	r3, [sp, #20]
 801956c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019570:	9100      	str	r1, [sp, #0]
 8019572:	9104      	str	r1, [sp, #16]
 8019574:	f8ad 300e 	strh.w	r3, [sp, #14]
 8019578:	4669      	mov	r1, sp
 801957a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801957c:	f000 fa9e 	bl	8019abc <_svfiprintf_r>
 8019580:	1c43      	adds	r3, r0, #1
 8019582:	bfbc      	itt	lt
 8019584:	238b      	movlt	r3, #139	; 0x8b
 8019586:	602b      	strlt	r3, [r5, #0]
 8019588:	2c00      	cmp	r4, #0
 801958a:	d0e3      	beq.n	8019554 <_vsniprintf_r+0x16>
 801958c:	9b00      	ldr	r3, [sp, #0]
 801958e:	2200      	movs	r2, #0
 8019590:	701a      	strb	r2, [r3, #0]
 8019592:	e7df      	b.n	8019554 <_vsniprintf_r+0x16>

08019594 <vsniprintf>:
 8019594:	b507      	push	{r0, r1, r2, lr}
 8019596:	9300      	str	r3, [sp, #0]
 8019598:	4613      	mov	r3, r2
 801959a:	460a      	mov	r2, r1
 801959c:	4601      	mov	r1, r0
 801959e:	4803      	ldr	r0, [pc, #12]	; (80195ac <vsniprintf+0x18>)
 80195a0:	6800      	ldr	r0, [r0, #0]
 80195a2:	f7ff ffcc 	bl	801953e <_vsniprintf_r>
 80195a6:	b003      	add	sp, #12
 80195a8:	f85d fb04 	ldr.w	pc, [sp], #4
 80195ac:	20002138 	.word	0x20002138

080195b0 <memcmp>:
 80195b0:	b510      	push	{r4, lr}
 80195b2:	3901      	subs	r1, #1
 80195b4:	4402      	add	r2, r0
 80195b6:	4290      	cmp	r0, r2
 80195b8:	d101      	bne.n	80195be <memcmp+0xe>
 80195ba:	2000      	movs	r0, #0
 80195bc:	e005      	b.n	80195ca <memcmp+0x1a>
 80195be:	7803      	ldrb	r3, [r0, #0]
 80195c0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80195c4:	42a3      	cmp	r3, r4
 80195c6:	d001      	beq.n	80195cc <memcmp+0x1c>
 80195c8:	1b18      	subs	r0, r3, r4
 80195ca:	bd10      	pop	{r4, pc}
 80195cc:	3001      	adds	r0, #1
 80195ce:	e7f2      	b.n	80195b6 <memcmp+0x6>

080195d0 <memmove>:
 80195d0:	4288      	cmp	r0, r1
 80195d2:	b510      	push	{r4, lr}
 80195d4:	eb01 0402 	add.w	r4, r1, r2
 80195d8:	d902      	bls.n	80195e0 <memmove+0x10>
 80195da:	4284      	cmp	r4, r0
 80195dc:	4623      	mov	r3, r4
 80195de:	d807      	bhi.n	80195f0 <memmove+0x20>
 80195e0:	1e43      	subs	r3, r0, #1
 80195e2:	42a1      	cmp	r1, r4
 80195e4:	d008      	beq.n	80195f8 <memmove+0x28>
 80195e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80195ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80195ee:	e7f8      	b.n	80195e2 <memmove+0x12>
 80195f0:	4402      	add	r2, r0
 80195f2:	4601      	mov	r1, r0
 80195f4:	428a      	cmp	r2, r1
 80195f6:	d100      	bne.n	80195fa <memmove+0x2a>
 80195f8:	bd10      	pop	{r4, pc}
 80195fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80195fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8019602:	e7f7      	b.n	80195f4 <memmove+0x24>

08019604 <memset>:
 8019604:	4402      	add	r2, r0
 8019606:	4603      	mov	r3, r0
 8019608:	4293      	cmp	r3, r2
 801960a:	d100      	bne.n	801960e <memset+0xa>
 801960c:	4770      	bx	lr
 801960e:	f803 1b01 	strb.w	r1, [r3], #1
 8019612:	e7f9      	b.n	8019608 <memset+0x4>

08019614 <strchr>:
 8019614:	b2c9      	uxtb	r1, r1
 8019616:	4603      	mov	r3, r0
 8019618:	f810 2b01 	ldrb.w	r2, [r0], #1
 801961c:	b11a      	cbz	r2, 8019626 <strchr+0x12>
 801961e:	428a      	cmp	r2, r1
 8019620:	d1f9      	bne.n	8019616 <strchr+0x2>
 8019622:	4618      	mov	r0, r3
 8019624:	4770      	bx	lr
 8019626:	2900      	cmp	r1, #0
 8019628:	bf18      	it	ne
 801962a:	2300      	movne	r3, #0
 801962c:	e7f9      	b.n	8019622 <strchr+0xe>

0801962e <strncmp>:
 801962e:	b510      	push	{r4, lr}
 8019630:	b16a      	cbz	r2, 801964e <strncmp+0x20>
 8019632:	3901      	subs	r1, #1
 8019634:	1884      	adds	r4, r0, r2
 8019636:	f810 2b01 	ldrb.w	r2, [r0], #1
 801963a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801963e:	429a      	cmp	r2, r3
 8019640:	d103      	bne.n	801964a <strncmp+0x1c>
 8019642:	42a0      	cmp	r0, r4
 8019644:	d001      	beq.n	801964a <strncmp+0x1c>
 8019646:	2a00      	cmp	r2, #0
 8019648:	d1f5      	bne.n	8019636 <strncmp+0x8>
 801964a:	1ad0      	subs	r0, r2, r3
 801964c:	bd10      	pop	{r4, pc}
 801964e:	4610      	mov	r0, r2
 8019650:	e7fc      	b.n	801964c <strncmp+0x1e>

08019652 <strncpy>:
 8019652:	b510      	push	{r4, lr}
 8019654:	3901      	subs	r1, #1
 8019656:	4603      	mov	r3, r0
 8019658:	b132      	cbz	r2, 8019668 <strncpy+0x16>
 801965a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801965e:	f803 4b01 	strb.w	r4, [r3], #1
 8019662:	3a01      	subs	r2, #1
 8019664:	2c00      	cmp	r4, #0
 8019666:	d1f7      	bne.n	8019658 <strncpy+0x6>
 8019668:	441a      	add	r2, r3
 801966a:	2100      	movs	r1, #0
 801966c:	4293      	cmp	r3, r2
 801966e:	d100      	bne.n	8019672 <strncpy+0x20>
 8019670:	bd10      	pop	{r4, pc}
 8019672:	f803 1b01 	strb.w	r1, [r3], #1
 8019676:	e7f9      	b.n	801966c <strncpy+0x1a>

08019678 <strstr>:
 8019678:	780a      	ldrb	r2, [r1, #0]
 801967a:	b570      	push	{r4, r5, r6, lr}
 801967c:	b96a      	cbnz	r2, 801969a <strstr+0x22>
 801967e:	bd70      	pop	{r4, r5, r6, pc}
 8019680:	429a      	cmp	r2, r3
 8019682:	d109      	bne.n	8019698 <strstr+0x20>
 8019684:	460c      	mov	r4, r1
 8019686:	4605      	mov	r5, r0
 8019688:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801968c:	2b00      	cmp	r3, #0
 801968e:	d0f6      	beq.n	801967e <strstr+0x6>
 8019690:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8019694:	429e      	cmp	r6, r3
 8019696:	d0f7      	beq.n	8019688 <strstr+0x10>
 8019698:	3001      	adds	r0, #1
 801969a:	7803      	ldrb	r3, [r0, #0]
 801969c:	2b00      	cmp	r3, #0
 801969e:	d1ef      	bne.n	8019680 <strstr+0x8>
 80196a0:	4618      	mov	r0, r3
 80196a2:	e7ec      	b.n	801967e <strstr+0x6>

080196a4 <_raise_r>:
 80196a4:	291f      	cmp	r1, #31
 80196a6:	b538      	push	{r3, r4, r5, lr}
 80196a8:	4604      	mov	r4, r0
 80196aa:	460d      	mov	r5, r1
 80196ac:	d904      	bls.n	80196b8 <_raise_r+0x14>
 80196ae:	2316      	movs	r3, #22
 80196b0:	6003      	str	r3, [r0, #0]
 80196b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80196b6:	bd38      	pop	{r3, r4, r5, pc}
 80196b8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80196ba:	b112      	cbz	r2, 80196c2 <_raise_r+0x1e>
 80196bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80196c0:	b94b      	cbnz	r3, 80196d6 <_raise_r+0x32>
 80196c2:	4620      	mov	r0, r4
 80196c4:	f000 f8ba 	bl	801983c <_getpid_r>
 80196c8:	462a      	mov	r2, r5
 80196ca:	4601      	mov	r1, r0
 80196cc:	4620      	mov	r0, r4
 80196ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80196d2:	f000 b8a1 	b.w	8019818 <_kill_r>
 80196d6:	2b01      	cmp	r3, #1
 80196d8:	d00a      	beq.n	80196f0 <_raise_r+0x4c>
 80196da:	1c59      	adds	r1, r3, #1
 80196dc:	d103      	bne.n	80196e6 <_raise_r+0x42>
 80196de:	2316      	movs	r3, #22
 80196e0:	6003      	str	r3, [r0, #0]
 80196e2:	2001      	movs	r0, #1
 80196e4:	e7e7      	b.n	80196b6 <_raise_r+0x12>
 80196e6:	2400      	movs	r4, #0
 80196e8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80196ec:	4628      	mov	r0, r5
 80196ee:	4798      	blx	r3
 80196f0:	2000      	movs	r0, #0
 80196f2:	e7e0      	b.n	80196b6 <_raise_r+0x12>

080196f4 <raise>:
 80196f4:	4b02      	ldr	r3, [pc, #8]	; (8019700 <raise+0xc>)
 80196f6:	4601      	mov	r1, r0
 80196f8:	6818      	ldr	r0, [r3, #0]
 80196fa:	f7ff bfd3 	b.w	80196a4 <_raise_r>
 80196fe:	bf00      	nop
 8019700:	20002138 	.word	0x20002138

08019704 <_close_r>:
 8019704:	b538      	push	{r3, r4, r5, lr}
 8019706:	4d06      	ldr	r5, [pc, #24]	; (8019720 <_close_r+0x1c>)
 8019708:	2300      	movs	r3, #0
 801970a:	4604      	mov	r4, r0
 801970c:	4608      	mov	r0, r1
 801970e:	602b      	str	r3, [r5, #0]
 8019710:	f7e8 ff15 	bl	800253e <_close>
 8019714:	1c43      	adds	r3, r0, #1
 8019716:	d102      	bne.n	801971e <_close_r+0x1a>
 8019718:	682b      	ldr	r3, [r5, #0]
 801971a:	b103      	cbz	r3, 801971e <_close_r+0x1a>
 801971c:	6023      	str	r3, [r4, #0]
 801971e:	bd38      	pop	{r3, r4, r5, pc}
 8019720:	20010b28 	.word	0x20010b28

08019724 <_reclaim_reent>:
 8019724:	4b29      	ldr	r3, [pc, #164]	; (80197cc <_reclaim_reent+0xa8>)
 8019726:	681b      	ldr	r3, [r3, #0]
 8019728:	4283      	cmp	r3, r0
 801972a:	b570      	push	{r4, r5, r6, lr}
 801972c:	4604      	mov	r4, r0
 801972e:	d04b      	beq.n	80197c8 <_reclaim_reent+0xa4>
 8019730:	69c3      	ldr	r3, [r0, #28]
 8019732:	b143      	cbz	r3, 8019746 <_reclaim_reent+0x22>
 8019734:	68db      	ldr	r3, [r3, #12]
 8019736:	2b00      	cmp	r3, #0
 8019738:	d144      	bne.n	80197c4 <_reclaim_reent+0xa0>
 801973a:	69e3      	ldr	r3, [r4, #28]
 801973c:	6819      	ldr	r1, [r3, #0]
 801973e:	b111      	cbz	r1, 8019746 <_reclaim_reent+0x22>
 8019740:	4620      	mov	r0, r4
 8019742:	f000 f90d 	bl	8019960 <_free_r>
 8019746:	6961      	ldr	r1, [r4, #20]
 8019748:	b111      	cbz	r1, 8019750 <_reclaim_reent+0x2c>
 801974a:	4620      	mov	r0, r4
 801974c:	f000 f908 	bl	8019960 <_free_r>
 8019750:	69e1      	ldr	r1, [r4, #28]
 8019752:	b111      	cbz	r1, 801975a <_reclaim_reent+0x36>
 8019754:	4620      	mov	r0, r4
 8019756:	f000 f903 	bl	8019960 <_free_r>
 801975a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801975c:	b111      	cbz	r1, 8019764 <_reclaim_reent+0x40>
 801975e:	4620      	mov	r0, r4
 8019760:	f000 f8fe 	bl	8019960 <_free_r>
 8019764:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019766:	b111      	cbz	r1, 801976e <_reclaim_reent+0x4a>
 8019768:	4620      	mov	r0, r4
 801976a:	f000 f8f9 	bl	8019960 <_free_r>
 801976e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8019770:	b111      	cbz	r1, 8019778 <_reclaim_reent+0x54>
 8019772:	4620      	mov	r0, r4
 8019774:	f000 f8f4 	bl	8019960 <_free_r>
 8019778:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801977a:	b111      	cbz	r1, 8019782 <_reclaim_reent+0x5e>
 801977c:	4620      	mov	r0, r4
 801977e:	f000 f8ef 	bl	8019960 <_free_r>
 8019782:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8019784:	b111      	cbz	r1, 801978c <_reclaim_reent+0x68>
 8019786:	4620      	mov	r0, r4
 8019788:	f000 f8ea 	bl	8019960 <_free_r>
 801978c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801978e:	b111      	cbz	r1, 8019796 <_reclaim_reent+0x72>
 8019790:	4620      	mov	r0, r4
 8019792:	f000 f8e5 	bl	8019960 <_free_r>
 8019796:	6a23      	ldr	r3, [r4, #32]
 8019798:	b1b3      	cbz	r3, 80197c8 <_reclaim_reent+0xa4>
 801979a:	4620      	mov	r0, r4
 801979c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80197a0:	4718      	bx	r3
 80197a2:	5949      	ldr	r1, [r1, r5]
 80197a4:	b941      	cbnz	r1, 80197b8 <_reclaim_reent+0x94>
 80197a6:	3504      	adds	r5, #4
 80197a8:	69e3      	ldr	r3, [r4, #28]
 80197aa:	2d80      	cmp	r5, #128	; 0x80
 80197ac:	68d9      	ldr	r1, [r3, #12]
 80197ae:	d1f8      	bne.n	80197a2 <_reclaim_reent+0x7e>
 80197b0:	4620      	mov	r0, r4
 80197b2:	f000 f8d5 	bl	8019960 <_free_r>
 80197b6:	e7c0      	b.n	801973a <_reclaim_reent+0x16>
 80197b8:	680e      	ldr	r6, [r1, #0]
 80197ba:	4620      	mov	r0, r4
 80197bc:	f000 f8d0 	bl	8019960 <_free_r>
 80197c0:	4631      	mov	r1, r6
 80197c2:	e7ef      	b.n	80197a4 <_reclaim_reent+0x80>
 80197c4:	2500      	movs	r5, #0
 80197c6:	e7ef      	b.n	80197a8 <_reclaim_reent+0x84>
 80197c8:	bd70      	pop	{r4, r5, r6, pc}
 80197ca:	bf00      	nop
 80197cc:	20002138 	.word	0x20002138

080197d0 <_lseek_r>:
 80197d0:	b538      	push	{r3, r4, r5, lr}
 80197d2:	4d07      	ldr	r5, [pc, #28]	; (80197f0 <_lseek_r+0x20>)
 80197d4:	4604      	mov	r4, r0
 80197d6:	4608      	mov	r0, r1
 80197d8:	4611      	mov	r1, r2
 80197da:	2200      	movs	r2, #0
 80197dc:	602a      	str	r2, [r5, #0]
 80197de:	461a      	mov	r2, r3
 80197e0:	f7e8 fed4 	bl	800258c <_lseek>
 80197e4:	1c43      	adds	r3, r0, #1
 80197e6:	d102      	bne.n	80197ee <_lseek_r+0x1e>
 80197e8:	682b      	ldr	r3, [r5, #0]
 80197ea:	b103      	cbz	r3, 80197ee <_lseek_r+0x1e>
 80197ec:	6023      	str	r3, [r4, #0]
 80197ee:	bd38      	pop	{r3, r4, r5, pc}
 80197f0:	20010b28 	.word	0x20010b28

080197f4 <_read_r>:
 80197f4:	b538      	push	{r3, r4, r5, lr}
 80197f6:	4d07      	ldr	r5, [pc, #28]	; (8019814 <_read_r+0x20>)
 80197f8:	4604      	mov	r4, r0
 80197fa:	4608      	mov	r0, r1
 80197fc:	4611      	mov	r1, r2
 80197fe:	2200      	movs	r2, #0
 8019800:	602a      	str	r2, [r5, #0]
 8019802:	461a      	mov	r2, r3
 8019804:	f7e8 fe62 	bl	80024cc <_read>
 8019808:	1c43      	adds	r3, r0, #1
 801980a:	d102      	bne.n	8019812 <_read_r+0x1e>
 801980c:	682b      	ldr	r3, [r5, #0]
 801980e:	b103      	cbz	r3, 8019812 <_read_r+0x1e>
 8019810:	6023      	str	r3, [r4, #0]
 8019812:	bd38      	pop	{r3, r4, r5, pc}
 8019814:	20010b28 	.word	0x20010b28

08019818 <_kill_r>:
 8019818:	b538      	push	{r3, r4, r5, lr}
 801981a:	4d07      	ldr	r5, [pc, #28]	; (8019838 <_kill_r+0x20>)
 801981c:	2300      	movs	r3, #0
 801981e:	4604      	mov	r4, r0
 8019820:	4608      	mov	r0, r1
 8019822:	4611      	mov	r1, r2
 8019824:	602b      	str	r3, [r5, #0]
 8019826:	f7e8 fe37 	bl	8002498 <_kill>
 801982a:	1c43      	adds	r3, r0, #1
 801982c:	d102      	bne.n	8019834 <_kill_r+0x1c>
 801982e:	682b      	ldr	r3, [r5, #0]
 8019830:	b103      	cbz	r3, 8019834 <_kill_r+0x1c>
 8019832:	6023      	str	r3, [r4, #0]
 8019834:	bd38      	pop	{r3, r4, r5, pc}
 8019836:	bf00      	nop
 8019838:	20010b28 	.word	0x20010b28

0801983c <_getpid_r>:
 801983c:	f7e8 be24 	b.w	8002488 <_getpid>

08019840 <_sbrk_r>:
 8019840:	b538      	push	{r3, r4, r5, lr}
 8019842:	4d06      	ldr	r5, [pc, #24]	; (801985c <_sbrk_r+0x1c>)
 8019844:	2300      	movs	r3, #0
 8019846:	4604      	mov	r4, r0
 8019848:	4608      	mov	r0, r1
 801984a:	602b      	str	r3, [r5, #0]
 801984c:	f7e8 feac 	bl	80025a8 <_sbrk>
 8019850:	1c43      	adds	r3, r0, #1
 8019852:	d102      	bne.n	801985a <_sbrk_r+0x1a>
 8019854:	682b      	ldr	r3, [r5, #0]
 8019856:	b103      	cbz	r3, 801985a <_sbrk_r+0x1a>
 8019858:	6023      	str	r3, [r4, #0]
 801985a:	bd38      	pop	{r3, r4, r5, pc}
 801985c:	20010b28 	.word	0x20010b28

08019860 <_write_r>:
 8019860:	b538      	push	{r3, r4, r5, lr}
 8019862:	4d07      	ldr	r5, [pc, #28]	; (8019880 <_write_r+0x20>)
 8019864:	4604      	mov	r4, r0
 8019866:	4608      	mov	r0, r1
 8019868:	4611      	mov	r1, r2
 801986a:	2200      	movs	r2, #0
 801986c:	602a      	str	r2, [r5, #0]
 801986e:	461a      	mov	r2, r3
 8019870:	f7e8 fe49 	bl	8002506 <_write>
 8019874:	1c43      	adds	r3, r0, #1
 8019876:	d102      	bne.n	801987e <_write_r+0x1e>
 8019878:	682b      	ldr	r3, [r5, #0]
 801987a:	b103      	cbz	r3, 801987e <_write_r+0x1e>
 801987c:	6023      	str	r3, [r4, #0]
 801987e:	bd38      	pop	{r3, r4, r5, pc}
 8019880:	20010b28 	.word	0x20010b28

08019884 <__errno>:
 8019884:	4b01      	ldr	r3, [pc, #4]	; (801988c <__errno+0x8>)
 8019886:	6818      	ldr	r0, [r3, #0]
 8019888:	4770      	bx	lr
 801988a:	bf00      	nop
 801988c:	20002138 	.word	0x20002138

08019890 <__libc_init_array>:
 8019890:	b570      	push	{r4, r5, r6, lr}
 8019892:	4d0d      	ldr	r5, [pc, #52]	; (80198c8 <__libc_init_array+0x38>)
 8019894:	4c0d      	ldr	r4, [pc, #52]	; (80198cc <__libc_init_array+0x3c>)
 8019896:	1b64      	subs	r4, r4, r5
 8019898:	10a4      	asrs	r4, r4, #2
 801989a:	2600      	movs	r6, #0
 801989c:	42a6      	cmp	r6, r4
 801989e:	d109      	bne.n	80198b4 <__libc_init_array+0x24>
 80198a0:	4d0b      	ldr	r5, [pc, #44]	; (80198d0 <__libc_init_array+0x40>)
 80198a2:	4c0c      	ldr	r4, [pc, #48]	; (80198d4 <__libc_init_array+0x44>)
 80198a4:	f000 feb6 	bl	801a614 <_init>
 80198a8:	1b64      	subs	r4, r4, r5
 80198aa:	10a4      	asrs	r4, r4, #2
 80198ac:	2600      	movs	r6, #0
 80198ae:	42a6      	cmp	r6, r4
 80198b0:	d105      	bne.n	80198be <__libc_init_array+0x2e>
 80198b2:	bd70      	pop	{r4, r5, r6, pc}
 80198b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80198b8:	4798      	blx	r3
 80198ba:	3601      	adds	r6, #1
 80198bc:	e7ee      	b.n	801989c <__libc_init_array+0xc>
 80198be:	f855 3b04 	ldr.w	r3, [r5], #4
 80198c2:	4798      	blx	r3
 80198c4:	3601      	adds	r6, #1
 80198c6:	e7f2      	b.n	80198ae <__libc_init_array+0x1e>
 80198c8:	0801c0bc 	.word	0x0801c0bc
 80198cc:	0801c0bc 	.word	0x0801c0bc
 80198d0:	0801c0bc 	.word	0x0801c0bc
 80198d4:	0801c0cc 	.word	0x0801c0cc

080198d8 <__retarget_lock_init_recursive>:
 80198d8:	4770      	bx	lr

080198da <__retarget_lock_acquire_recursive>:
 80198da:	4770      	bx	lr

080198dc <__retarget_lock_release_recursive>:
 80198dc:	4770      	bx	lr

080198de <strcpy>:
 80198de:	4603      	mov	r3, r0
 80198e0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80198e4:	f803 2b01 	strb.w	r2, [r3], #1
 80198e8:	2a00      	cmp	r2, #0
 80198ea:	d1f9      	bne.n	80198e0 <strcpy+0x2>
 80198ec:	4770      	bx	lr

080198ee <memcpy>:
 80198ee:	440a      	add	r2, r1
 80198f0:	4291      	cmp	r1, r2
 80198f2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80198f6:	d100      	bne.n	80198fa <memcpy+0xc>
 80198f8:	4770      	bx	lr
 80198fa:	b510      	push	{r4, lr}
 80198fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019900:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019904:	4291      	cmp	r1, r2
 8019906:	d1f9      	bne.n	80198fc <memcpy+0xe>
 8019908:	bd10      	pop	{r4, pc}
	...

0801990c <__assert_func>:
 801990c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801990e:	4614      	mov	r4, r2
 8019910:	461a      	mov	r2, r3
 8019912:	4b09      	ldr	r3, [pc, #36]	; (8019938 <__assert_func+0x2c>)
 8019914:	681b      	ldr	r3, [r3, #0]
 8019916:	4605      	mov	r5, r0
 8019918:	68d8      	ldr	r0, [r3, #12]
 801991a:	b14c      	cbz	r4, 8019930 <__assert_func+0x24>
 801991c:	4b07      	ldr	r3, [pc, #28]	; (801993c <__assert_func+0x30>)
 801991e:	9100      	str	r1, [sp, #0]
 8019920:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019924:	4906      	ldr	r1, [pc, #24]	; (8019940 <__assert_func+0x34>)
 8019926:	462b      	mov	r3, r5
 8019928:	f000 fc04 	bl	801a134 <fiprintf>
 801992c:	f7ff fa84 	bl	8018e38 <abort>
 8019930:	4b04      	ldr	r3, [pc, #16]	; (8019944 <__assert_func+0x38>)
 8019932:	461c      	mov	r4, r3
 8019934:	e7f3      	b.n	801991e <__assert_func+0x12>
 8019936:	bf00      	nop
 8019938:	20002138 	.word	0x20002138
 801993c:	0801c044 	.word	0x0801c044
 8019940:	0801c051 	.word	0x0801c051
 8019944:	0801c07f 	.word	0x0801c07f

08019948 <__env_lock>:
 8019948:	4801      	ldr	r0, [pc, #4]	; (8019950 <__env_lock+0x8>)
 801994a:	f7ff bfc6 	b.w	80198da <__retarget_lock_acquire_recursive>
 801994e:	bf00      	nop
 8019950:	20010b2c 	.word	0x20010b2c

08019954 <__env_unlock>:
 8019954:	4801      	ldr	r0, [pc, #4]	; (801995c <__env_unlock+0x8>)
 8019956:	f7ff bfc1 	b.w	80198dc <__retarget_lock_release_recursive>
 801995a:	bf00      	nop
 801995c:	20010b2c 	.word	0x20010b2c

08019960 <_free_r>:
 8019960:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019962:	2900      	cmp	r1, #0
 8019964:	d044      	beq.n	80199f0 <_free_r+0x90>
 8019966:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801996a:	9001      	str	r0, [sp, #4]
 801996c:	2b00      	cmp	r3, #0
 801996e:	f1a1 0404 	sub.w	r4, r1, #4
 8019972:	bfb8      	it	lt
 8019974:	18e4      	addlt	r4, r4, r3
 8019976:	f7ff fb7d 	bl	8019074 <__malloc_lock>
 801997a:	4a1e      	ldr	r2, [pc, #120]	; (80199f4 <_free_r+0x94>)
 801997c:	9801      	ldr	r0, [sp, #4]
 801997e:	6813      	ldr	r3, [r2, #0]
 8019980:	b933      	cbnz	r3, 8019990 <_free_r+0x30>
 8019982:	6063      	str	r3, [r4, #4]
 8019984:	6014      	str	r4, [r2, #0]
 8019986:	b003      	add	sp, #12
 8019988:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801998c:	f7ff bb78 	b.w	8019080 <__malloc_unlock>
 8019990:	42a3      	cmp	r3, r4
 8019992:	d908      	bls.n	80199a6 <_free_r+0x46>
 8019994:	6825      	ldr	r5, [r4, #0]
 8019996:	1961      	adds	r1, r4, r5
 8019998:	428b      	cmp	r3, r1
 801999a:	bf01      	itttt	eq
 801999c:	6819      	ldreq	r1, [r3, #0]
 801999e:	685b      	ldreq	r3, [r3, #4]
 80199a0:	1949      	addeq	r1, r1, r5
 80199a2:	6021      	streq	r1, [r4, #0]
 80199a4:	e7ed      	b.n	8019982 <_free_r+0x22>
 80199a6:	461a      	mov	r2, r3
 80199a8:	685b      	ldr	r3, [r3, #4]
 80199aa:	b10b      	cbz	r3, 80199b0 <_free_r+0x50>
 80199ac:	42a3      	cmp	r3, r4
 80199ae:	d9fa      	bls.n	80199a6 <_free_r+0x46>
 80199b0:	6811      	ldr	r1, [r2, #0]
 80199b2:	1855      	adds	r5, r2, r1
 80199b4:	42a5      	cmp	r5, r4
 80199b6:	d10b      	bne.n	80199d0 <_free_r+0x70>
 80199b8:	6824      	ldr	r4, [r4, #0]
 80199ba:	4421      	add	r1, r4
 80199bc:	1854      	adds	r4, r2, r1
 80199be:	42a3      	cmp	r3, r4
 80199c0:	6011      	str	r1, [r2, #0]
 80199c2:	d1e0      	bne.n	8019986 <_free_r+0x26>
 80199c4:	681c      	ldr	r4, [r3, #0]
 80199c6:	685b      	ldr	r3, [r3, #4]
 80199c8:	6053      	str	r3, [r2, #4]
 80199ca:	440c      	add	r4, r1
 80199cc:	6014      	str	r4, [r2, #0]
 80199ce:	e7da      	b.n	8019986 <_free_r+0x26>
 80199d0:	d902      	bls.n	80199d8 <_free_r+0x78>
 80199d2:	230c      	movs	r3, #12
 80199d4:	6003      	str	r3, [r0, #0]
 80199d6:	e7d6      	b.n	8019986 <_free_r+0x26>
 80199d8:	6825      	ldr	r5, [r4, #0]
 80199da:	1961      	adds	r1, r4, r5
 80199dc:	428b      	cmp	r3, r1
 80199de:	bf04      	itt	eq
 80199e0:	6819      	ldreq	r1, [r3, #0]
 80199e2:	685b      	ldreq	r3, [r3, #4]
 80199e4:	6063      	str	r3, [r4, #4]
 80199e6:	bf04      	itt	eq
 80199e8:	1949      	addeq	r1, r1, r5
 80199ea:	6021      	streq	r1, [r4, #0]
 80199ec:	6054      	str	r4, [r2, #4]
 80199ee:	e7ca      	b.n	8019986 <_free_r+0x26>
 80199f0:	b003      	add	sp, #12
 80199f2:	bd30      	pop	{r4, r5, pc}
 80199f4:	200109e4 	.word	0x200109e4

080199f8 <_malloc_usable_size_r>:
 80199f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80199fc:	1f18      	subs	r0, r3, #4
 80199fe:	2b00      	cmp	r3, #0
 8019a00:	bfbc      	itt	lt
 8019a02:	580b      	ldrlt	r3, [r1, r0]
 8019a04:	18c0      	addlt	r0, r0, r3
 8019a06:	4770      	bx	lr

08019a08 <__ssputs_r>:
 8019a08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019a0c:	688e      	ldr	r6, [r1, #8]
 8019a0e:	461f      	mov	r7, r3
 8019a10:	42be      	cmp	r6, r7
 8019a12:	680b      	ldr	r3, [r1, #0]
 8019a14:	4682      	mov	sl, r0
 8019a16:	460c      	mov	r4, r1
 8019a18:	4690      	mov	r8, r2
 8019a1a:	d82c      	bhi.n	8019a76 <__ssputs_r+0x6e>
 8019a1c:	898a      	ldrh	r2, [r1, #12]
 8019a1e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8019a22:	d026      	beq.n	8019a72 <__ssputs_r+0x6a>
 8019a24:	6965      	ldr	r5, [r4, #20]
 8019a26:	6909      	ldr	r1, [r1, #16]
 8019a28:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019a2c:	eba3 0901 	sub.w	r9, r3, r1
 8019a30:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8019a34:	1c7b      	adds	r3, r7, #1
 8019a36:	444b      	add	r3, r9
 8019a38:	106d      	asrs	r5, r5, #1
 8019a3a:	429d      	cmp	r5, r3
 8019a3c:	bf38      	it	cc
 8019a3e:	461d      	movcc	r5, r3
 8019a40:	0553      	lsls	r3, r2, #21
 8019a42:	d527      	bpl.n	8019a94 <__ssputs_r+0x8c>
 8019a44:	4629      	mov	r1, r5
 8019a46:	f7ff fa95 	bl	8018f74 <_malloc_r>
 8019a4a:	4606      	mov	r6, r0
 8019a4c:	b360      	cbz	r0, 8019aa8 <__ssputs_r+0xa0>
 8019a4e:	6921      	ldr	r1, [r4, #16]
 8019a50:	464a      	mov	r2, r9
 8019a52:	f7ff ff4c 	bl	80198ee <memcpy>
 8019a56:	89a3      	ldrh	r3, [r4, #12]
 8019a58:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019a5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019a60:	81a3      	strh	r3, [r4, #12]
 8019a62:	6126      	str	r6, [r4, #16]
 8019a64:	6165      	str	r5, [r4, #20]
 8019a66:	444e      	add	r6, r9
 8019a68:	eba5 0509 	sub.w	r5, r5, r9
 8019a6c:	6026      	str	r6, [r4, #0]
 8019a6e:	60a5      	str	r5, [r4, #8]
 8019a70:	463e      	mov	r6, r7
 8019a72:	42be      	cmp	r6, r7
 8019a74:	d900      	bls.n	8019a78 <__ssputs_r+0x70>
 8019a76:	463e      	mov	r6, r7
 8019a78:	6820      	ldr	r0, [r4, #0]
 8019a7a:	4632      	mov	r2, r6
 8019a7c:	4641      	mov	r1, r8
 8019a7e:	f7ff fda7 	bl	80195d0 <memmove>
 8019a82:	68a3      	ldr	r3, [r4, #8]
 8019a84:	1b9b      	subs	r3, r3, r6
 8019a86:	60a3      	str	r3, [r4, #8]
 8019a88:	6823      	ldr	r3, [r4, #0]
 8019a8a:	4433      	add	r3, r6
 8019a8c:	6023      	str	r3, [r4, #0]
 8019a8e:	2000      	movs	r0, #0
 8019a90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019a94:	462a      	mov	r2, r5
 8019a96:	f7ff fb6d 	bl	8019174 <_realloc_r>
 8019a9a:	4606      	mov	r6, r0
 8019a9c:	2800      	cmp	r0, #0
 8019a9e:	d1e0      	bne.n	8019a62 <__ssputs_r+0x5a>
 8019aa0:	6921      	ldr	r1, [r4, #16]
 8019aa2:	4650      	mov	r0, sl
 8019aa4:	f7ff ff5c 	bl	8019960 <_free_r>
 8019aa8:	230c      	movs	r3, #12
 8019aaa:	f8ca 3000 	str.w	r3, [sl]
 8019aae:	89a3      	ldrh	r3, [r4, #12]
 8019ab0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019ab4:	81a3      	strh	r3, [r4, #12]
 8019ab6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019aba:	e7e9      	b.n	8019a90 <__ssputs_r+0x88>

08019abc <_svfiprintf_r>:
 8019abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ac0:	4698      	mov	r8, r3
 8019ac2:	898b      	ldrh	r3, [r1, #12]
 8019ac4:	061b      	lsls	r3, r3, #24
 8019ac6:	b09d      	sub	sp, #116	; 0x74
 8019ac8:	4607      	mov	r7, r0
 8019aca:	460d      	mov	r5, r1
 8019acc:	4614      	mov	r4, r2
 8019ace:	d50e      	bpl.n	8019aee <_svfiprintf_r+0x32>
 8019ad0:	690b      	ldr	r3, [r1, #16]
 8019ad2:	b963      	cbnz	r3, 8019aee <_svfiprintf_r+0x32>
 8019ad4:	2140      	movs	r1, #64	; 0x40
 8019ad6:	f7ff fa4d 	bl	8018f74 <_malloc_r>
 8019ada:	6028      	str	r0, [r5, #0]
 8019adc:	6128      	str	r0, [r5, #16]
 8019ade:	b920      	cbnz	r0, 8019aea <_svfiprintf_r+0x2e>
 8019ae0:	230c      	movs	r3, #12
 8019ae2:	603b      	str	r3, [r7, #0]
 8019ae4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019ae8:	e0d0      	b.n	8019c8c <_svfiprintf_r+0x1d0>
 8019aea:	2340      	movs	r3, #64	; 0x40
 8019aec:	616b      	str	r3, [r5, #20]
 8019aee:	2300      	movs	r3, #0
 8019af0:	9309      	str	r3, [sp, #36]	; 0x24
 8019af2:	2320      	movs	r3, #32
 8019af4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019af8:	f8cd 800c 	str.w	r8, [sp, #12]
 8019afc:	2330      	movs	r3, #48	; 0x30
 8019afe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8019ca4 <_svfiprintf_r+0x1e8>
 8019b02:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019b06:	f04f 0901 	mov.w	r9, #1
 8019b0a:	4623      	mov	r3, r4
 8019b0c:	469a      	mov	sl, r3
 8019b0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019b12:	b10a      	cbz	r2, 8019b18 <_svfiprintf_r+0x5c>
 8019b14:	2a25      	cmp	r2, #37	; 0x25
 8019b16:	d1f9      	bne.n	8019b0c <_svfiprintf_r+0x50>
 8019b18:	ebba 0b04 	subs.w	fp, sl, r4
 8019b1c:	d00b      	beq.n	8019b36 <_svfiprintf_r+0x7a>
 8019b1e:	465b      	mov	r3, fp
 8019b20:	4622      	mov	r2, r4
 8019b22:	4629      	mov	r1, r5
 8019b24:	4638      	mov	r0, r7
 8019b26:	f7ff ff6f 	bl	8019a08 <__ssputs_r>
 8019b2a:	3001      	adds	r0, #1
 8019b2c:	f000 80a9 	beq.w	8019c82 <_svfiprintf_r+0x1c6>
 8019b30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019b32:	445a      	add	r2, fp
 8019b34:	9209      	str	r2, [sp, #36]	; 0x24
 8019b36:	f89a 3000 	ldrb.w	r3, [sl]
 8019b3a:	2b00      	cmp	r3, #0
 8019b3c:	f000 80a1 	beq.w	8019c82 <_svfiprintf_r+0x1c6>
 8019b40:	2300      	movs	r3, #0
 8019b42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019b46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019b4a:	f10a 0a01 	add.w	sl, sl, #1
 8019b4e:	9304      	str	r3, [sp, #16]
 8019b50:	9307      	str	r3, [sp, #28]
 8019b52:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019b56:	931a      	str	r3, [sp, #104]	; 0x68
 8019b58:	4654      	mov	r4, sl
 8019b5a:	2205      	movs	r2, #5
 8019b5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019b60:	4850      	ldr	r0, [pc, #320]	; (8019ca4 <_svfiprintf_r+0x1e8>)
 8019b62:	f7e6 fb7d 	bl	8000260 <memchr>
 8019b66:	9a04      	ldr	r2, [sp, #16]
 8019b68:	b9d8      	cbnz	r0, 8019ba2 <_svfiprintf_r+0xe6>
 8019b6a:	06d0      	lsls	r0, r2, #27
 8019b6c:	bf44      	itt	mi
 8019b6e:	2320      	movmi	r3, #32
 8019b70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019b74:	0711      	lsls	r1, r2, #28
 8019b76:	bf44      	itt	mi
 8019b78:	232b      	movmi	r3, #43	; 0x2b
 8019b7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019b7e:	f89a 3000 	ldrb.w	r3, [sl]
 8019b82:	2b2a      	cmp	r3, #42	; 0x2a
 8019b84:	d015      	beq.n	8019bb2 <_svfiprintf_r+0xf6>
 8019b86:	9a07      	ldr	r2, [sp, #28]
 8019b88:	4654      	mov	r4, sl
 8019b8a:	2000      	movs	r0, #0
 8019b8c:	f04f 0c0a 	mov.w	ip, #10
 8019b90:	4621      	mov	r1, r4
 8019b92:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019b96:	3b30      	subs	r3, #48	; 0x30
 8019b98:	2b09      	cmp	r3, #9
 8019b9a:	d94d      	bls.n	8019c38 <_svfiprintf_r+0x17c>
 8019b9c:	b1b0      	cbz	r0, 8019bcc <_svfiprintf_r+0x110>
 8019b9e:	9207      	str	r2, [sp, #28]
 8019ba0:	e014      	b.n	8019bcc <_svfiprintf_r+0x110>
 8019ba2:	eba0 0308 	sub.w	r3, r0, r8
 8019ba6:	fa09 f303 	lsl.w	r3, r9, r3
 8019baa:	4313      	orrs	r3, r2
 8019bac:	9304      	str	r3, [sp, #16]
 8019bae:	46a2      	mov	sl, r4
 8019bb0:	e7d2      	b.n	8019b58 <_svfiprintf_r+0x9c>
 8019bb2:	9b03      	ldr	r3, [sp, #12]
 8019bb4:	1d19      	adds	r1, r3, #4
 8019bb6:	681b      	ldr	r3, [r3, #0]
 8019bb8:	9103      	str	r1, [sp, #12]
 8019bba:	2b00      	cmp	r3, #0
 8019bbc:	bfbb      	ittet	lt
 8019bbe:	425b      	neglt	r3, r3
 8019bc0:	f042 0202 	orrlt.w	r2, r2, #2
 8019bc4:	9307      	strge	r3, [sp, #28]
 8019bc6:	9307      	strlt	r3, [sp, #28]
 8019bc8:	bfb8      	it	lt
 8019bca:	9204      	strlt	r2, [sp, #16]
 8019bcc:	7823      	ldrb	r3, [r4, #0]
 8019bce:	2b2e      	cmp	r3, #46	; 0x2e
 8019bd0:	d10c      	bne.n	8019bec <_svfiprintf_r+0x130>
 8019bd2:	7863      	ldrb	r3, [r4, #1]
 8019bd4:	2b2a      	cmp	r3, #42	; 0x2a
 8019bd6:	d134      	bne.n	8019c42 <_svfiprintf_r+0x186>
 8019bd8:	9b03      	ldr	r3, [sp, #12]
 8019bda:	1d1a      	adds	r2, r3, #4
 8019bdc:	681b      	ldr	r3, [r3, #0]
 8019bde:	9203      	str	r2, [sp, #12]
 8019be0:	2b00      	cmp	r3, #0
 8019be2:	bfb8      	it	lt
 8019be4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8019be8:	3402      	adds	r4, #2
 8019bea:	9305      	str	r3, [sp, #20]
 8019bec:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8019cb4 <_svfiprintf_r+0x1f8>
 8019bf0:	7821      	ldrb	r1, [r4, #0]
 8019bf2:	2203      	movs	r2, #3
 8019bf4:	4650      	mov	r0, sl
 8019bf6:	f7e6 fb33 	bl	8000260 <memchr>
 8019bfa:	b138      	cbz	r0, 8019c0c <_svfiprintf_r+0x150>
 8019bfc:	9b04      	ldr	r3, [sp, #16]
 8019bfe:	eba0 000a 	sub.w	r0, r0, sl
 8019c02:	2240      	movs	r2, #64	; 0x40
 8019c04:	4082      	lsls	r2, r0
 8019c06:	4313      	orrs	r3, r2
 8019c08:	3401      	adds	r4, #1
 8019c0a:	9304      	str	r3, [sp, #16]
 8019c0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019c10:	4825      	ldr	r0, [pc, #148]	; (8019ca8 <_svfiprintf_r+0x1ec>)
 8019c12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019c16:	2206      	movs	r2, #6
 8019c18:	f7e6 fb22 	bl	8000260 <memchr>
 8019c1c:	2800      	cmp	r0, #0
 8019c1e:	d038      	beq.n	8019c92 <_svfiprintf_r+0x1d6>
 8019c20:	4b22      	ldr	r3, [pc, #136]	; (8019cac <_svfiprintf_r+0x1f0>)
 8019c22:	bb1b      	cbnz	r3, 8019c6c <_svfiprintf_r+0x1b0>
 8019c24:	9b03      	ldr	r3, [sp, #12]
 8019c26:	3307      	adds	r3, #7
 8019c28:	f023 0307 	bic.w	r3, r3, #7
 8019c2c:	3308      	adds	r3, #8
 8019c2e:	9303      	str	r3, [sp, #12]
 8019c30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019c32:	4433      	add	r3, r6
 8019c34:	9309      	str	r3, [sp, #36]	; 0x24
 8019c36:	e768      	b.n	8019b0a <_svfiprintf_r+0x4e>
 8019c38:	fb0c 3202 	mla	r2, ip, r2, r3
 8019c3c:	460c      	mov	r4, r1
 8019c3e:	2001      	movs	r0, #1
 8019c40:	e7a6      	b.n	8019b90 <_svfiprintf_r+0xd4>
 8019c42:	2300      	movs	r3, #0
 8019c44:	3401      	adds	r4, #1
 8019c46:	9305      	str	r3, [sp, #20]
 8019c48:	4619      	mov	r1, r3
 8019c4a:	f04f 0c0a 	mov.w	ip, #10
 8019c4e:	4620      	mov	r0, r4
 8019c50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019c54:	3a30      	subs	r2, #48	; 0x30
 8019c56:	2a09      	cmp	r2, #9
 8019c58:	d903      	bls.n	8019c62 <_svfiprintf_r+0x1a6>
 8019c5a:	2b00      	cmp	r3, #0
 8019c5c:	d0c6      	beq.n	8019bec <_svfiprintf_r+0x130>
 8019c5e:	9105      	str	r1, [sp, #20]
 8019c60:	e7c4      	b.n	8019bec <_svfiprintf_r+0x130>
 8019c62:	fb0c 2101 	mla	r1, ip, r1, r2
 8019c66:	4604      	mov	r4, r0
 8019c68:	2301      	movs	r3, #1
 8019c6a:	e7f0      	b.n	8019c4e <_svfiprintf_r+0x192>
 8019c6c:	ab03      	add	r3, sp, #12
 8019c6e:	9300      	str	r3, [sp, #0]
 8019c70:	462a      	mov	r2, r5
 8019c72:	4b0f      	ldr	r3, [pc, #60]	; (8019cb0 <_svfiprintf_r+0x1f4>)
 8019c74:	a904      	add	r1, sp, #16
 8019c76:	4638      	mov	r0, r7
 8019c78:	f3af 8000 	nop.w
 8019c7c:	1c42      	adds	r2, r0, #1
 8019c7e:	4606      	mov	r6, r0
 8019c80:	d1d6      	bne.n	8019c30 <_svfiprintf_r+0x174>
 8019c82:	89ab      	ldrh	r3, [r5, #12]
 8019c84:	065b      	lsls	r3, r3, #25
 8019c86:	f53f af2d 	bmi.w	8019ae4 <_svfiprintf_r+0x28>
 8019c8a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019c8c:	b01d      	add	sp, #116	; 0x74
 8019c8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019c92:	ab03      	add	r3, sp, #12
 8019c94:	9300      	str	r3, [sp, #0]
 8019c96:	462a      	mov	r2, r5
 8019c98:	4b05      	ldr	r3, [pc, #20]	; (8019cb0 <_svfiprintf_r+0x1f4>)
 8019c9a:	a904      	add	r1, sp, #16
 8019c9c:	4638      	mov	r0, r7
 8019c9e:	f000 f879 	bl	8019d94 <_printf_i>
 8019ca2:	e7eb      	b.n	8019c7c <_svfiprintf_r+0x1c0>
 8019ca4:	0801c080 	.word	0x0801c080
 8019ca8:	0801c08a 	.word	0x0801c08a
 8019cac:	00000000 	.word	0x00000000
 8019cb0:	08019a09 	.word	0x08019a09
 8019cb4:	0801c086 	.word	0x0801c086

08019cb8 <_printf_common>:
 8019cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019cbc:	4616      	mov	r6, r2
 8019cbe:	4699      	mov	r9, r3
 8019cc0:	688a      	ldr	r2, [r1, #8]
 8019cc2:	690b      	ldr	r3, [r1, #16]
 8019cc4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8019cc8:	4293      	cmp	r3, r2
 8019cca:	bfb8      	it	lt
 8019ccc:	4613      	movlt	r3, r2
 8019cce:	6033      	str	r3, [r6, #0]
 8019cd0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8019cd4:	4607      	mov	r7, r0
 8019cd6:	460c      	mov	r4, r1
 8019cd8:	b10a      	cbz	r2, 8019cde <_printf_common+0x26>
 8019cda:	3301      	adds	r3, #1
 8019cdc:	6033      	str	r3, [r6, #0]
 8019cde:	6823      	ldr	r3, [r4, #0]
 8019ce0:	0699      	lsls	r1, r3, #26
 8019ce2:	bf42      	ittt	mi
 8019ce4:	6833      	ldrmi	r3, [r6, #0]
 8019ce6:	3302      	addmi	r3, #2
 8019ce8:	6033      	strmi	r3, [r6, #0]
 8019cea:	6825      	ldr	r5, [r4, #0]
 8019cec:	f015 0506 	ands.w	r5, r5, #6
 8019cf0:	d106      	bne.n	8019d00 <_printf_common+0x48>
 8019cf2:	f104 0a19 	add.w	sl, r4, #25
 8019cf6:	68e3      	ldr	r3, [r4, #12]
 8019cf8:	6832      	ldr	r2, [r6, #0]
 8019cfa:	1a9b      	subs	r3, r3, r2
 8019cfc:	42ab      	cmp	r3, r5
 8019cfe:	dc26      	bgt.n	8019d4e <_printf_common+0x96>
 8019d00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8019d04:	1e13      	subs	r3, r2, #0
 8019d06:	6822      	ldr	r2, [r4, #0]
 8019d08:	bf18      	it	ne
 8019d0a:	2301      	movne	r3, #1
 8019d0c:	0692      	lsls	r2, r2, #26
 8019d0e:	d42b      	bmi.n	8019d68 <_printf_common+0xb0>
 8019d10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019d14:	4649      	mov	r1, r9
 8019d16:	4638      	mov	r0, r7
 8019d18:	47c0      	blx	r8
 8019d1a:	3001      	adds	r0, #1
 8019d1c:	d01e      	beq.n	8019d5c <_printf_common+0xa4>
 8019d1e:	6823      	ldr	r3, [r4, #0]
 8019d20:	6922      	ldr	r2, [r4, #16]
 8019d22:	f003 0306 	and.w	r3, r3, #6
 8019d26:	2b04      	cmp	r3, #4
 8019d28:	bf02      	ittt	eq
 8019d2a:	68e5      	ldreq	r5, [r4, #12]
 8019d2c:	6833      	ldreq	r3, [r6, #0]
 8019d2e:	1aed      	subeq	r5, r5, r3
 8019d30:	68a3      	ldr	r3, [r4, #8]
 8019d32:	bf0c      	ite	eq
 8019d34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019d38:	2500      	movne	r5, #0
 8019d3a:	4293      	cmp	r3, r2
 8019d3c:	bfc4      	itt	gt
 8019d3e:	1a9b      	subgt	r3, r3, r2
 8019d40:	18ed      	addgt	r5, r5, r3
 8019d42:	2600      	movs	r6, #0
 8019d44:	341a      	adds	r4, #26
 8019d46:	42b5      	cmp	r5, r6
 8019d48:	d11a      	bne.n	8019d80 <_printf_common+0xc8>
 8019d4a:	2000      	movs	r0, #0
 8019d4c:	e008      	b.n	8019d60 <_printf_common+0xa8>
 8019d4e:	2301      	movs	r3, #1
 8019d50:	4652      	mov	r2, sl
 8019d52:	4649      	mov	r1, r9
 8019d54:	4638      	mov	r0, r7
 8019d56:	47c0      	blx	r8
 8019d58:	3001      	adds	r0, #1
 8019d5a:	d103      	bne.n	8019d64 <_printf_common+0xac>
 8019d5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019d64:	3501      	adds	r5, #1
 8019d66:	e7c6      	b.n	8019cf6 <_printf_common+0x3e>
 8019d68:	18e1      	adds	r1, r4, r3
 8019d6a:	1c5a      	adds	r2, r3, #1
 8019d6c:	2030      	movs	r0, #48	; 0x30
 8019d6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019d72:	4422      	add	r2, r4
 8019d74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8019d78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8019d7c:	3302      	adds	r3, #2
 8019d7e:	e7c7      	b.n	8019d10 <_printf_common+0x58>
 8019d80:	2301      	movs	r3, #1
 8019d82:	4622      	mov	r2, r4
 8019d84:	4649      	mov	r1, r9
 8019d86:	4638      	mov	r0, r7
 8019d88:	47c0      	blx	r8
 8019d8a:	3001      	adds	r0, #1
 8019d8c:	d0e6      	beq.n	8019d5c <_printf_common+0xa4>
 8019d8e:	3601      	adds	r6, #1
 8019d90:	e7d9      	b.n	8019d46 <_printf_common+0x8e>
	...

08019d94 <_printf_i>:
 8019d94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019d98:	7e0f      	ldrb	r7, [r1, #24]
 8019d9a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8019d9c:	2f78      	cmp	r7, #120	; 0x78
 8019d9e:	4691      	mov	r9, r2
 8019da0:	4680      	mov	r8, r0
 8019da2:	460c      	mov	r4, r1
 8019da4:	469a      	mov	sl, r3
 8019da6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8019daa:	d807      	bhi.n	8019dbc <_printf_i+0x28>
 8019dac:	2f62      	cmp	r7, #98	; 0x62
 8019dae:	d80a      	bhi.n	8019dc6 <_printf_i+0x32>
 8019db0:	2f00      	cmp	r7, #0
 8019db2:	f000 80d4 	beq.w	8019f5e <_printf_i+0x1ca>
 8019db6:	2f58      	cmp	r7, #88	; 0x58
 8019db8:	f000 80c0 	beq.w	8019f3c <_printf_i+0x1a8>
 8019dbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019dc0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8019dc4:	e03a      	b.n	8019e3c <_printf_i+0xa8>
 8019dc6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8019dca:	2b15      	cmp	r3, #21
 8019dcc:	d8f6      	bhi.n	8019dbc <_printf_i+0x28>
 8019dce:	a101      	add	r1, pc, #4	; (adr r1, 8019dd4 <_printf_i+0x40>)
 8019dd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019dd4:	08019e2d 	.word	0x08019e2d
 8019dd8:	08019e41 	.word	0x08019e41
 8019ddc:	08019dbd 	.word	0x08019dbd
 8019de0:	08019dbd 	.word	0x08019dbd
 8019de4:	08019dbd 	.word	0x08019dbd
 8019de8:	08019dbd 	.word	0x08019dbd
 8019dec:	08019e41 	.word	0x08019e41
 8019df0:	08019dbd 	.word	0x08019dbd
 8019df4:	08019dbd 	.word	0x08019dbd
 8019df8:	08019dbd 	.word	0x08019dbd
 8019dfc:	08019dbd 	.word	0x08019dbd
 8019e00:	08019f45 	.word	0x08019f45
 8019e04:	08019e6d 	.word	0x08019e6d
 8019e08:	08019eff 	.word	0x08019eff
 8019e0c:	08019dbd 	.word	0x08019dbd
 8019e10:	08019dbd 	.word	0x08019dbd
 8019e14:	08019f67 	.word	0x08019f67
 8019e18:	08019dbd 	.word	0x08019dbd
 8019e1c:	08019e6d 	.word	0x08019e6d
 8019e20:	08019dbd 	.word	0x08019dbd
 8019e24:	08019dbd 	.word	0x08019dbd
 8019e28:	08019f07 	.word	0x08019f07
 8019e2c:	682b      	ldr	r3, [r5, #0]
 8019e2e:	1d1a      	adds	r2, r3, #4
 8019e30:	681b      	ldr	r3, [r3, #0]
 8019e32:	602a      	str	r2, [r5, #0]
 8019e34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019e38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019e3c:	2301      	movs	r3, #1
 8019e3e:	e09f      	b.n	8019f80 <_printf_i+0x1ec>
 8019e40:	6820      	ldr	r0, [r4, #0]
 8019e42:	682b      	ldr	r3, [r5, #0]
 8019e44:	0607      	lsls	r7, r0, #24
 8019e46:	f103 0104 	add.w	r1, r3, #4
 8019e4a:	6029      	str	r1, [r5, #0]
 8019e4c:	d501      	bpl.n	8019e52 <_printf_i+0xbe>
 8019e4e:	681e      	ldr	r6, [r3, #0]
 8019e50:	e003      	b.n	8019e5a <_printf_i+0xc6>
 8019e52:	0646      	lsls	r6, r0, #25
 8019e54:	d5fb      	bpl.n	8019e4e <_printf_i+0xba>
 8019e56:	f9b3 6000 	ldrsh.w	r6, [r3]
 8019e5a:	2e00      	cmp	r6, #0
 8019e5c:	da03      	bge.n	8019e66 <_printf_i+0xd2>
 8019e5e:	232d      	movs	r3, #45	; 0x2d
 8019e60:	4276      	negs	r6, r6
 8019e62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019e66:	485a      	ldr	r0, [pc, #360]	; (8019fd0 <_printf_i+0x23c>)
 8019e68:	230a      	movs	r3, #10
 8019e6a:	e012      	b.n	8019e92 <_printf_i+0xfe>
 8019e6c:	682b      	ldr	r3, [r5, #0]
 8019e6e:	6820      	ldr	r0, [r4, #0]
 8019e70:	1d19      	adds	r1, r3, #4
 8019e72:	6029      	str	r1, [r5, #0]
 8019e74:	0605      	lsls	r5, r0, #24
 8019e76:	d501      	bpl.n	8019e7c <_printf_i+0xe8>
 8019e78:	681e      	ldr	r6, [r3, #0]
 8019e7a:	e002      	b.n	8019e82 <_printf_i+0xee>
 8019e7c:	0641      	lsls	r1, r0, #25
 8019e7e:	d5fb      	bpl.n	8019e78 <_printf_i+0xe4>
 8019e80:	881e      	ldrh	r6, [r3, #0]
 8019e82:	4853      	ldr	r0, [pc, #332]	; (8019fd0 <_printf_i+0x23c>)
 8019e84:	2f6f      	cmp	r7, #111	; 0x6f
 8019e86:	bf0c      	ite	eq
 8019e88:	2308      	moveq	r3, #8
 8019e8a:	230a      	movne	r3, #10
 8019e8c:	2100      	movs	r1, #0
 8019e8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8019e92:	6865      	ldr	r5, [r4, #4]
 8019e94:	60a5      	str	r5, [r4, #8]
 8019e96:	2d00      	cmp	r5, #0
 8019e98:	bfa2      	ittt	ge
 8019e9a:	6821      	ldrge	r1, [r4, #0]
 8019e9c:	f021 0104 	bicge.w	r1, r1, #4
 8019ea0:	6021      	strge	r1, [r4, #0]
 8019ea2:	b90e      	cbnz	r6, 8019ea8 <_printf_i+0x114>
 8019ea4:	2d00      	cmp	r5, #0
 8019ea6:	d04b      	beq.n	8019f40 <_printf_i+0x1ac>
 8019ea8:	4615      	mov	r5, r2
 8019eaa:	fbb6 f1f3 	udiv	r1, r6, r3
 8019eae:	fb03 6711 	mls	r7, r3, r1, r6
 8019eb2:	5dc7      	ldrb	r7, [r0, r7]
 8019eb4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8019eb8:	4637      	mov	r7, r6
 8019eba:	42bb      	cmp	r3, r7
 8019ebc:	460e      	mov	r6, r1
 8019ebe:	d9f4      	bls.n	8019eaa <_printf_i+0x116>
 8019ec0:	2b08      	cmp	r3, #8
 8019ec2:	d10b      	bne.n	8019edc <_printf_i+0x148>
 8019ec4:	6823      	ldr	r3, [r4, #0]
 8019ec6:	07de      	lsls	r6, r3, #31
 8019ec8:	d508      	bpl.n	8019edc <_printf_i+0x148>
 8019eca:	6923      	ldr	r3, [r4, #16]
 8019ecc:	6861      	ldr	r1, [r4, #4]
 8019ece:	4299      	cmp	r1, r3
 8019ed0:	bfde      	ittt	le
 8019ed2:	2330      	movle	r3, #48	; 0x30
 8019ed4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8019ed8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8019edc:	1b52      	subs	r2, r2, r5
 8019ede:	6122      	str	r2, [r4, #16]
 8019ee0:	f8cd a000 	str.w	sl, [sp]
 8019ee4:	464b      	mov	r3, r9
 8019ee6:	aa03      	add	r2, sp, #12
 8019ee8:	4621      	mov	r1, r4
 8019eea:	4640      	mov	r0, r8
 8019eec:	f7ff fee4 	bl	8019cb8 <_printf_common>
 8019ef0:	3001      	adds	r0, #1
 8019ef2:	d14a      	bne.n	8019f8a <_printf_i+0x1f6>
 8019ef4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019ef8:	b004      	add	sp, #16
 8019efa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019efe:	6823      	ldr	r3, [r4, #0]
 8019f00:	f043 0320 	orr.w	r3, r3, #32
 8019f04:	6023      	str	r3, [r4, #0]
 8019f06:	4833      	ldr	r0, [pc, #204]	; (8019fd4 <_printf_i+0x240>)
 8019f08:	2778      	movs	r7, #120	; 0x78
 8019f0a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8019f0e:	6823      	ldr	r3, [r4, #0]
 8019f10:	6829      	ldr	r1, [r5, #0]
 8019f12:	061f      	lsls	r7, r3, #24
 8019f14:	f851 6b04 	ldr.w	r6, [r1], #4
 8019f18:	d402      	bmi.n	8019f20 <_printf_i+0x18c>
 8019f1a:	065f      	lsls	r7, r3, #25
 8019f1c:	bf48      	it	mi
 8019f1e:	b2b6      	uxthmi	r6, r6
 8019f20:	07df      	lsls	r7, r3, #31
 8019f22:	bf48      	it	mi
 8019f24:	f043 0320 	orrmi.w	r3, r3, #32
 8019f28:	6029      	str	r1, [r5, #0]
 8019f2a:	bf48      	it	mi
 8019f2c:	6023      	strmi	r3, [r4, #0]
 8019f2e:	b91e      	cbnz	r6, 8019f38 <_printf_i+0x1a4>
 8019f30:	6823      	ldr	r3, [r4, #0]
 8019f32:	f023 0320 	bic.w	r3, r3, #32
 8019f36:	6023      	str	r3, [r4, #0]
 8019f38:	2310      	movs	r3, #16
 8019f3a:	e7a7      	b.n	8019e8c <_printf_i+0xf8>
 8019f3c:	4824      	ldr	r0, [pc, #144]	; (8019fd0 <_printf_i+0x23c>)
 8019f3e:	e7e4      	b.n	8019f0a <_printf_i+0x176>
 8019f40:	4615      	mov	r5, r2
 8019f42:	e7bd      	b.n	8019ec0 <_printf_i+0x12c>
 8019f44:	682b      	ldr	r3, [r5, #0]
 8019f46:	6826      	ldr	r6, [r4, #0]
 8019f48:	6961      	ldr	r1, [r4, #20]
 8019f4a:	1d18      	adds	r0, r3, #4
 8019f4c:	6028      	str	r0, [r5, #0]
 8019f4e:	0635      	lsls	r5, r6, #24
 8019f50:	681b      	ldr	r3, [r3, #0]
 8019f52:	d501      	bpl.n	8019f58 <_printf_i+0x1c4>
 8019f54:	6019      	str	r1, [r3, #0]
 8019f56:	e002      	b.n	8019f5e <_printf_i+0x1ca>
 8019f58:	0670      	lsls	r0, r6, #25
 8019f5a:	d5fb      	bpl.n	8019f54 <_printf_i+0x1c0>
 8019f5c:	8019      	strh	r1, [r3, #0]
 8019f5e:	2300      	movs	r3, #0
 8019f60:	6123      	str	r3, [r4, #16]
 8019f62:	4615      	mov	r5, r2
 8019f64:	e7bc      	b.n	8019ee0 <_printf_i+0x14c>
 8019f66:	682b      	ldr	r3, [r5, #0]
 8019f68:	1d1a      	adds	r2, r3, #4
 8019f6a:	602a      	str	r2, [r5, #0]
 8019f6c:	681d      	ldr	r5, [r3, #0]
 8019f6e:	6862      	ldr	r2, [r4, #4]
 8019f70:	2100      	movs	r1, #0
 8019f72:	4628      	mov	r0, r5
 8019f74:	f7e6 f974 	bl	8000260 <memchr>
 8019f78:	b108      	cbz	r0, 8019f7e <_printf_i+0x1ea>
 8019f7a:	1b40      	subs	r0, r0, r5
 8019f7c:	6060      	str	r0, [r4, #4]
 8019f7e:	6863      	ldr	r3, [r4, #4]
 8019f80:	6123      	str	r3, [r4, #16]
 8019f82:	2300      	movs	r3, #0
 8019f84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019f88:	e7aa      	b.n	8019ee0 <_printf_i+0x14c>
 8019f8a:	6923      	ldr	r3, [r4, #16]
 8019f8c:	462a      	mov	r2, r5
 8019f8e:	4649      	mov	r1, r9
 8019f90:	4640      	mov	r0, r8
 8019f92:	47d0      	blx	sl
 8019f94:	3001      	adds	r0, #1
 8019f96:	d0ad      	beq.n	8019ef4 <_printf_i+0x160>
 8019f98:	6823      	ldr	r3, [r4, #0]
 8019f9a:	079b      	lsls	r3, r3, #30
 8019f9c:	d413      	bmi.n	8019fc6 <_printf_i+0x232>
 8019f9e:	68e0      	ldr	r0, [r4, #12]
 8019fa0:	9b03      	ldr	r3, [sp, #12]
 8019fa2:	4298      	cmp	r0, r3
 8019fa4:	bfb8      	it	lt
 8019fa6:	4618      	movlt	r0, r3
 8019fa8:	e7a6      	b.n	8019ef8 <_printf_i+0x164>
 8019faa:	2301      	movs	r3, #1
 8019fac:	4632      	mov	r2, r6
 8019fae:	4649      	mov	r1, r9
 8019fb0:	4640      	mov	r0, r8
 8019fb2:	47d0      	blx	sl
 8019fb4:	3001      	adds	r0, #1
 8019fb6:	d09d      	beq.n	8019ef4 <_printf_i+0x160>
 8019fb8:	3501      	adds	r5, #1
 8019fba:	68e3      	ldr	r3, [r4, #12]
 8019fbc:	9903      	ldr	r1, [sp, #12]
 8019fbe:	1a5b      	subs	r3, r3, r1
 8019fc0:	42ab      	cmp	r3, r5
 8019fc2:	dcf2      	bgt.n	8019faa <_printf_i+0x216>
 8019fc4:	e7eb      	b.n	8019f9e <_printf_i+0x20a>
 8019fc6:	2500      	movs	r5, #0
 8019fc8:	f104 0619 	add.w	r6, r4, #25
 8019fcc:	e7f5      	b.n	8019fba <_printf_i+0x226>
 8019fce:	bf00      	nop
 8019fd0:	0801c091 	.word	0x0801c091
 8019fd4:	0801c0a2 	.word	0x0801c0a2

08019fd8 <__sflush_r>:
 8019fd8:	898a      	ldrh	r2, [r1, #12]
 8019fda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019fde:	4605      	mov	r5, r0
 8019fe0:	0710      	lsls	r0, r2, #28
 8019fe2:	460c      	mov	r4, r1
 8019fe4:	d458      	bmi.n	801a098 <__sflush_r+0xc0>
 8019fe6:	684b      	ldr	r3, [r1, #4]
 8019fe8:	2b00      	cmp	r3, #0
 8019fea:	dc05      	bgt.n	8019ff8 <__sflush_r+0x20>
 8019fec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8019fee:	2b00      	cmp	r3, #0
 8019ff0:	dc02      	bgt.n	8019ff8 <__sflush_r+0x20>
 8019ff2:	2000      	movs	r0, #0
 8019ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019ff8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019ffa:	2e00      	cmp	r6, #0
 8019ffc:	d0f9      	beq.n	8019ff2 <__sflush_r+0x1a>
 8019ffe:	2300      	movs	r3, #0
 801a000:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801a004:	682f      	ldr	r7, [r5, #0]
 801a006:	6a21      	ldr	r1, [r4, #32]
 801a008:	602b      	str	r3, [r5, #0]
 801a00a:	d032      	beq.n	801a072 <__sflush_r+0x9a>
 801a00c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801a00e:	89a3      	ldrh	r3, [r4, #12]
 801a010:	075a      	lsls	r2, r3, #29
 801a012:	d505      	bpl.n	801a020 <__sflush_r+0x48>
 801a014:	6863      	ldr	r3, [r4, #4]
 801a016:	1ac0      	subs	r0, r0, r3
 801a018:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a01a:	b10b      	cbz	r3, 801a020 <__sflush_r+0x48>
 801a01c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a01e:	1ac0      	subs	r0, r0, r3
 801a020:	2300      	movs	r3, #0
 801a022:	4602      	mov	r2, r0
 801a024:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a026:	6a21      	ldr	r1, [r4, #32]
 801a028:	4628      	mov	r0, r5
 801a02a:	47b0      	blx	r6
 801a02c:	1c43      	adds	r3, r0, #1
 801a02e:	89a3      	ldrh	r3, [r4, #12]
 801a030:	d106      	bne.n	801a040 <__sflush_r+0x68>
 801a032:	6829      	ldr	r1, [r5, #0]
 801a034:	291d      	cmp	r1, #29
 801a036:	d82b      	bhi.n	801a090 <__sflush_r+0xb8>
 801a038:	4a29      	ldr	r2, [pc, #164]	; (801a0e0 <__sflush_r+0x108>)
 801a03a:	410a      	asrs	r2, r1
 801a03c:	07d6      	lsls	r6, r2, #31
 801a03e:	d427      	bmi.n	801a090 <__sflush_r+0xb8>
 801a040:	2200      	movs	r2, #0
 801a042:	6062      	str	r2, [r4, #4]
 801a044:	04d9      	lsls	r1, r3, #19
 801a046:	6922      	ldr	r2, [r4, #16]
 801a048:	6022      	str	r2, [r4, #0]
 801a04a:	d504      	bpl.n	801a056 <__sflush_r+0x7e>
 801a04c:	1c42      	adds	r2, r0, #1
 801a04e:	d101      	bne.n	801a054 <__sflush_r+0x7c>
 801a050:	682b      	ldr	r3, [r5, #0]
 801a052:	b903      	cbnz	r3, 801a056 <__sflush_r+0x7e>
 801a054:	6560      	str	r0, [r4, #84]	; 0x54
 801a056:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a058:	602f      	str	r7, [r5, #0]
 801a05a:	2900      	cmp	r1, #0
 801a05c:	d0c9      	beq.n	8019ff2 <__sflush_r+0x1a>
 801a05e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a062:	4299      	cmp	r1, r3
 801a064:	d002      	beq.n	801a06c <__sflush_r+0x94>
 801a066:	4628      	mov	r0, r5
 801a068:	f7ff fc7a 	bl	8019960 <_free_r>
 801a06c:	2000      	movs	r0, #0
 801a06e:	6360      	str	r0, [r4, #52]	; 0x34
 801a070:	e7c0      	b.n	8019ff4 <__sflush_r+0x1c>
 801a072:	2301      	movs	r3, #1
 801a074:	4628      	mov	r0, r5
 801a076:	47b0      	blx	r6
 801a078:	1c41      	adds	r1, r0, #1
 801a07a:	d1c8      	bne.n	801a00e <__sflush_r+0x36>
 801a07c:	682b      	ldr	r3, [r5, #0]
 801a07e:	2b00      	cmp	r3, #0
 801a080:	d0c5      	beq.n	801a00e <__sflush_r+0x36>
 801a082:	2b1d      	cmp	r3, #29
 801a084:	d001      	beq.n	801a08a <__sflush_r+0xb2>
 801a086:	2b16      	cmp	r3, #22
 801a088:	d101      	bne.n	801a08e <__sflush_r+0xb6>
 801a08a:	602f      	str	r7, [r5, #0]
 801a08c:	e7b1      	b.n	8019ff2 <__sflush_r+0x1a>
 801a08e:	89a3      	ldrh	r3, [r4, #12]
 801a090:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a094:	81a3      	strh	r3, [r4, #12]
 801a096:	e7ad      	b.n	8019ff4 <__sflush_r+0x1c>
 801a098:	690f      	ldr	r7, [r1, #16]
 801a09a:	2f00      	cmp	r7, #0
 801a09c:	d0a9      	beq.n	8019ff2 <__sflush_r+0x1a>
 801a09e:	0793      	lsls	r3, r2, #30
 801a0a0:	680e      	ldr	r6, [r1, #0]
 801a0a2:	bf08      	it	eq
 801a0a4:	694b      	ldreq	r3, [r1, #20]
 801a0a6:	600f      	str	r7, [r1, #0]
 801a0a8:	bf18      	it	ne
 801a0aa:	2300      	movne	r3, #0
 801a0ac:	eba6 0807 	sub.w	r8, r6, r7
 801a0b0:	608b      	str	r3, [r1, #8]
 801a0b2:	f1b8 0f00 	cmp.w	r8, #0
 801a0b6:	dd9c      	ble.n	8019ff2 <__sflush_r+0x1a>
 801a0b8:	6a21      	ldr	r1, [r4, #32]
 801a0ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801a0bc:	4643      	mov	r3, r8
 801a0be:	463a      	mov	r2, r7
 801a0c0:	4628      	mov	r0, r5
 801a0c2:	47b0      	blx	r6
 801a0c4:	2800      	cmp	r0, #0
 801a0c6:	dc06      	bgt.n	801a0d6 <__sflush_r+0xfe>
 801a0c8:	89a3      	ldrh	r3, [r4, #12]
 801a0ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a0ce:	81a3      	strh	r3, [r4, #12]
 801a0d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a0d4:	e78e      	b.n	8019ff4 <__sflush_r+0x1c>
 801a0d6:	4407      	add	r7, r0
 801a0d8:	eba8 0800 	sub.w	r8, r8, r0
 801a0dc:	e7e9      	b.n	801a0b2 <__sflush_r+0xda>
 801a0de:	bf00      	nop
 801a0e0:	dfbffffe 	.word	0xdfbffffe

0801a0e4 <_fflush_r>:
 801a0e4:	b538      	push	{r3, r4, r5, lr}
 801a0e6:	690b      	ldr	r3, [r1, #16]
 801a0e8:	4605      	mov	r5, r0
 801a0ea:	460c      	mov	r4, r1
 801a0ec:	b913      	cbnz	r3, 801a0f4 <_fflush_r+0x10>
 801a0ee:	2500      	movs	r5, #0
 801a0f0:	4628      	mov	r0, r5
 801a0f2:	bd38      	pop	{r3, r4, r5, pc}
 801a0f4:	b118      	cbz	r0, 801a0fe <_fflush_r+0x1a>
 801a0f6:	6a03      	ldr	r3, [r0, #32]
 801a0f8:	b90b      	cbnz	r3, 801a0fe <_fflush_r+0x1a>
 801a0fa:	f7ff f973 	bl	80193e4 <__sinit>
 801a0fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a102:	2b00      	cmp	r3, #0
 801a104:	d0f3      	beq.n	801a0ee <_fflush_r+0xa>
 801a106:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801a108:	07d0      	lsls	r0, r2, #31
 801a10a:	d404      	bmi.n	801a116 <_fflush_r+0x32>
 801a10c:	0599      	lsls	r1, r3, #22
 801a10e:	d402      	bmi.n	801a116 <_fflush_r+0x32>
 801a110:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a112:	f7ff fbe2 	bl	80198da <__retarget_lock_acquire_recursive>
 801a116:	4628      	mov	r0, r5
 801a118:	4621      	mov	r1, r4
 801a11a:	f7ff ff5d 	bl	8019fd8 <__sflush_r>
 801a11e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a120:	07da      	lsls	r2, r3, #31
 801a122:	4605      	mov	r5, r0
 801a124:	d4e4      	bmi.n	801a0f0 <_fflush_r+0xc>
 801a126:	89a3      	ldrh	r3, [r4, #12]
 801a128:	059b      	lsls	r3, r3, #22
 801a12a:	d4e1      	bmi.n	801a0f0 <_fflush_r+0xc>
 801a12c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a12e:	f7ff fbd5 	bl	80198dc <__retarget_lock_release_recursive>
 801a132:	e7dd      	b.n	801a0f0 <_fflush_r+0xc>

0801a134 <fiprintf>:
 801a134:	b40e      	push	{r1, r2, r3}
 801a136:	b503      	push	{r0, r1, lr}
 801a138:	4601      	mov	r1, r0
 801a13a:	ab03      	add	r3, sp, #12
 801a13c:	4805      	ldr	r0, [pc, #20]	; (801a154 <fiprintf+0x20>)
 801a13e:	f853 2b04 	ldr.w	r2, [r3], #4
 801a142:	6800      	ldr	r0, [r0, #0]
 801a144:	9301      	str	r3, [sp, #4]
 801a146:	f000 f831 	bl	801a1ac <_vfiprintf_r>
 801a14a:	b002      	add	sp, #8
 801a14c:	f85d eb04 	ldr.w	lr, [sp], #4
 801a150:	b003      	add	sp, #12
 801a152:	4770      	bx	lr
 801a154:	20002138 	.word	0x20002138

0801a158 <__sfputc_r>:
 801a158:	6893      	ldr	r3, [r2, #8]
 801a15a:	3b01      	subs	r3, #1
 801a15c:	2b00      	cmp	r3, #0
 801a15e:	b410      	push	{r4}
 801a160:	6093      	str	r3, [r2, #8]
 801a162:	da08      	bge.n	801a176 <__sfputc_r+0x1e>
 801a164:	6994      	ldr	r4, [r2, #24]
 801a166:	42a3      	cmp	r3, r4
 801a168:	db01      	blt.n	801a16e <__sfputc_r+0x16>
 801a16a:	290a      	cmp	r1, #10
 801a16c:	d103      	bne.n	801a176 <__sfputc_r+0x1e>
 801a16e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a172:	f000 b935 	b.w	801a3e0 <__swbuf_r>
 801a176:	6813      	ldr	r3, [r2, #0]
 801a178:	1c58      	adds	r0, r3, #1
 801a17a:	6010      	str	r0, [r2, #0]
 801a17c:	7019      	strb	r1, [r3, #0]
 801a17e:	4608      	mov	r0, r1
 801a180:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a184:	4770      	bx	lr

0801a186 <__sfputs_r>:
 801a186:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a188:	4606      	mov	r6, r0
 801a18a:	460f      	mov	r7, r1
 801a18c:	4614      	mov	r4, r2
 801a18e:	18d5      	adds	r5, r2, r3
 801a190:	42ac      	cmp	r4, r5
 801a192:	d101      	bne.n	801a198 <__sfputs_r+0x12>
 801a194:	2000      	movs	r0, #0
 801a196:	e007      	b.n	801a1a8 <__sfputs_r+0x22>
 801a198:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a19c:	463a      	mov	r2, r7
 801a19e:	4630      	mov	r0, r6
 801a1a0:	f7ff ffda 	bl	801a158 <__sfputc_r>
 801a1a4:	1c43      	adds	r3, r0, #1
 801a1a6:	d1f3      	bne.n	801a190 <__sfputs_r+0xa>
 801a1a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801a1ac <_vfiprintf_r>:
 801a1ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a1b0:	460d      	mov	r5, r1
 801a1b2:	b09d      	sub	sp, #116	; 0x74
 801a1b4:	4614      	mov	r4, r2
 801a1b6:	4698      	mov	r8, r3
 801a1b8:	4606      	mov	r6, r0
 801a1ba:	b118      	cbz	r0, 801a1c4 <_vfiprintf_r+0x18>
 801a1bc:	6a03      	ldr	r3, [r0, #32]
 801a1be:	b90b      	cbnz	r3, 801a1c4 <_vfiprintf_r+0x18>
 801a1c0:	f7ff f910 	bl	80193e4 <__sinit>
 801a1c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a1c6:	07d9      	lsls	r1, r3, #31
 801a1c8:	d405      	bmi.n	801a1d6 <_vfiprintf_r+0x2a>
 801a1ca:	89ab      	ldrh	r3, [r5, #12]
 801a1cc:	059a      	lsls	r2, r3, #22
 801a1ce:	d402      	bmi.n	801a1d6 <_vfiprintf_r+0x2a>
 801a1d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a1d2:	f7ff fb82 	bl	80198da <__retarget_lock_acquire_recursive>
 801a1d6:	89ab      	ldrh	r3, [r5, #12]
 801a1d8:	071b      	lsls	r3, r3, #28
 801a1da:	d501      	bpl.n	801a1e0 <_vfiprintf_r+0x34>
 801a1dc:	692b      	ldr	r3, [r5, #16]
 801a1de:	b99b      	cbnz	r3, 801a208 <_vfiprintf_r+0x5c>
 801a1e0:	4629      	mov	r1, r5
 801a1e2:	4630      	mov	r0, r6
 801a1e4:	f000 f93a 	bl	801a45c <__swsetup_r>
 801a1e8:	b170      	cbz	r0, 801a208 <_vfiprintf_r+0x5c>
 801a1ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a1ec:	07dc      	lsls	r4, r3, #31
 801a1ee:	d504      	bpl.n	801a1fa <_vfiprintf_r+0x4e>
 801a1f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a1f4:	b01d      	add	sp, #116	; 0x74
 801a1f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a1fa:	89ab      	ldrh	r3, [r5, #12]
 801a1fc:	0598      	lsls	r0, r3, #22
 801a1fe:	d4f7      	bmi.n	801a1f0 <_vfiprintf_r+0x44>
 801a200:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a202:	f7ff fb6b 	bl	80198dc <__retarget_lock_release_recursive>
 801a206:	e7f3      	b.n	801a1f0 <_vfiprintf_r+0x44>
 801a208:	2300      	movs	r3, #0
 801a20a:	9309      	str	r3, [sp, #36]	; 0x24
 801a20c:	2320      	movs	r3, #32
 801a20e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a212:	f8cd 800c 	str.w	r8, [sp, #12]
 801a216:	2330      	movs	r3, #48	; 0x30
 801a218:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801a3cc <_vfiprintf_r+0x220>
 801a21c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a220:	f04f 0901 	mov.w	r9, #1
 801a224:	4623      	mov	r3, r4
 801a226:	469a      	mov	sl, r3
 801a228:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a22c:	b10a      	cbz	r2, 801a232 <_vfiprintf_r+0x86>
 801a22e:	2a25      	cmp	r2, #37	; 0x25
 801a230:	d1f9      	bne.n	801a226 <_vfiprintf_r+0x7a>
 801a232:	ebba 0b04 	subs.w	fp, sl, r4
 801a236:	d00b      	beq.n	801a250 <_vfiprintf_r+0xa4>
 801a238:	465b      	mov	r3, fp
 801a23a:	4622      	mov	r2, r4
 801a23c:	4629      	mov	r1, r5
 801a23e:	4630      	mov	r0, r6
 801a240:	f7ff ffa1 	bl	801a186 <__sfputs_r>
 801a244:	3001      	adds	r0, #1
 801a246:	f000 80a9 	beq.w	801a39c <_vfiprintf_r+0x1f0>
 801a24a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a24c:	445a      	add	r2, fp
 801a24e:	9209      	str	r2, [sp, #36]	; 0x24
 801a250:	f89a 3000 	ldrb.w	r3, [sl]
 801a254:	2b00      	cmp	r3, #0
 801a256:	f000 80a1 	beq.w	801a39c <_vfiprintf_r+0x1f0>
 801a25a:	2300      	movs	r3, #0
 801a25c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a260:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a264:	f10a 0a01 	add.w	sl, sl, #1
 801a268:	9304      	str	r3, [sp, #16]
 801a26a:	9307      	str	r3, [sp, #28]
 801a26c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a270:	931a      	str	r3, [sp, #104]	; 0x68
 801a272:	4654      	mov	r4, sl
 801a274:	2205      	movs	r2, #5
 801a276:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a27a:	4854      	ldr	r0, [pc, #336]	; (801a3cc <_vfiprintf_r+0x220>)
 801a27c:	f7e5 fff0 	bl	8000260 <memchr>
 801a280:	9a04      	ldr	r2, [sp, #16]
 801a282:	b9d8      	cbnz	r0, 801a2bc <_vfiprintf_r+0x110>
 801a284:	06d1      	lsls	r1, r2, #27
 801a286:	bf44      	itt	mi
 801a288:	2320      	movmi	r3, #32
 801a28a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a28e:	0713      	lsls	r3, r2, #28
 801a290:	bf44      	itt	mi
 801a292:	232b      	movmi	r3, #43	; 0x2b
 801a294:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a298:	f89a 3000 	ldrb.w	r3, [sl]
 801a29c:	2b2a      	cmp	r3, #42	; 0x2a
 801a29e:	d015      	beq.n	801a2cc <_vfiprintf_r+0x120>
 801a2a0:	9a07      	ldr	r2, [sp, #28]
 801a2a2:	4654      	mov	r4, sl
 801a2a4:	2000      	movs	r0, #0
 801a2a6:	f04f 0c0a 	mov.w	ip, #10
 801a2aa:	4621      	mov	r1, r4
 801a2ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a2b0:	3b30      	subs	r3, #48	; 0x30
 801a2b2:	2b09      	cmp	r3, #9
 801a2b4:	d94d      	bls.n	801a352 <_vfiprintf_r+0x1a6>
 801a2b6:	b1b0      	cbz	r0, 801a2e6 <_vfiprintf_r+0x13a>
 801a2b8:	9207      	str	r2, [sp, #28]
 801a2ba:	e014      	b.n	801a2e6 <_vfiprintf_r+0x13a>
 801a2bc:	eba0 0308 	sub.w	r3, r0, r8
 801a2c0:	fa09 f303 	lsl.w	r3, r9, r3
 801a2c4:	4313      	orrs	r3, r2
 801a2c6:	9304      	str	r3, [sp, #16]
 801a2c8:	46a2      	mov	sl, r4
 801a2ca:	e7d2      	b.n	801a272 <_vfiprintf_r+0xc6>
 801a2cc:	9b03      	ldr	r3, [sp, #12]
 801a2ce:	1d19      	adds	r1, r3, #4
 801a2d0:	681b      	ldr	r3, [r3, #0]
 801a2d2:	9103      	str	r1, [sp, #12]
 801a2d4:	2b00      	cmp	r3, #0
 801a2d6:	bfbb      	ittet	lt
 801a2d8:	425b      	neglt	r3, r3
 801a2da:	f042 0202 	orrlt.w	r2, r2, #2
 801a2de:	9307      	strge	r3, [sp, #28]
 801a2e0:	9307      	strlt	r3, [sp, #28]
 801a2e2:	bfb8      	it	lt
 801a2e4:	9204      	strlt	r2, [sp, #16]
 801a2e6:	7823      	ldrb	r3, [r4, #0]
 801a2e8:	2b2e      	cmp	r3, #46	; 0x2e
 801a2ea:	d10c      	bne.n	801a306 <_vfiprintf_r+0x15a>
 801a2ec:	7863      	ldrb	r3, [r4, #1]
 801a2ee:	2b2a      	cmp	r3, #42	; 0x2a
 801a2f0:	d134      	bne.n	801a35c <_vfiprintf_r+0x1b0>
 801a2f2:	9b03      	ldr	r3, [sp, #12]
 801a2f4:	1d1a      	adds	r2, r3, #4
 801a2f6:	681b      	ldr	r3, [r3, #0]
 801a2f8:	9203      	str	r2, [sp, #12]
 801a2fa:	2b00      	cmp	r3, #0
 801a2fc:	bfb8      	it	lt
 801a2fe:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801a302:	3402      	adds	r4, #2
 801a304:	9305      	str	r3, [sp, #20]
 801a306:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801a3dc <_vfiprintf_r+0x230>
 801a30a:	7821      	ldrb	r1, [r4, #0]
 801a30c:	2203      	movs	r2, #3
 801a30e:	4650      	mov	r0, sl
 801a310:	f7e5 ffa6 	bl	8000260 <memchr>
 801a314:	b138      	cbz	r0, 801a326 <_vfiprintf_r+0x17a>
 801a316:	9b04      	ldr	r3, [sp, #16]
 801a318:	eba0 000a 	sub.w	r0, r0, sl
 801a31c:	2240      	movs	r2, #64	; 0x40
 801a31e:	4082      	lsls	r2, r0
 801a320:	4313      	orrs	r3, r2
 801a322:	3401      	adds	r4, #1
 801a324:	9304      	str	r3, [sp, #16]
 801a326:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a32a:	4829      	ldr	r0, [pc, #164]	; (801a3d0 <_vfiprintf_r+0x224>)
 801a32c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a330:	2206      	movs	r2, #6
 801a332:	f7e5 ff95 	bl	8000260 <memchr>
 801a336:	2800      	cmp	r0, #0
 801a338:	d03f      	beq.n	801a3ba <_vfiprintf_r+0x20e>
 801a33a:	4b26      	ldr	r3, [pc, #152]	; (801a3d4 <_vfiprintf_r+0x228>)
 801a33c:	bb1b      	cbnz	r3, 801a386 <_vfiprintf_r+0x1da>
 801a33e:	9b03      	ldr	r3, [sp, #12]
 801a340:	3307      	adds	r3, #7
 801a342:	f023 0307 	bic.w	r3, r3, #7
 801a346:	3308      	adds	r3, #8
 801a348:	9303      	str	r3, [sp, #12]
 801a34a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a34c:	443b      	add	r3, r7
 801a34e:	9309      	str	r3, [sp, #36]	; 0x24
 801a350:	e768      	b.n	801a224 <_vfiprintf_r+0x78>
 801a352:	fb0c 3202 	mla	r2, ip, r2, r3
 801a356:	460c      	mov	r4, r1
 801a358:	2001      	movs	r0, #1
 801a35a:	e7a6      	b.n	801a2aa <_vfiprintf_r+0xfe>
 801a35c:	2300      	movs	r3, #0
 801a35e:	3401      	adds	r4, #1
 801a360:	9305      	str	r3, [sp, #20]
 801a362:	4619      	mov	r1, r3
 801a364:	f04f 0c0a 	mov.w	ip, #10
 801a368:	4620      	mov	r0, r4
 801a36a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a36e:	3a30      	subs	r2, #48	; 0x30
 801a370:	2a09      	cmp	r2, #9
 801a372:	d903      	bls.n	801a37c <_vfiprintf_r+0x1d0>
 801a374:	2b00      	cmp	r3, #0
 801a376:	d0c6      	beq.n	801a306 <_vfiprintf_r+0x15a>
 801a378:	9105      	str	r1, [sp, #20]
 801a37a:	e7c4      	b.n	801a306 <_vfiprintf_r+0x15a>
 801a37c:	fb0c 2101 	mla	r1, ip, r1, r2
 801a380:	4604      	mov	r4, r0
 801a382:	2301      	movs	r3, #1
 801a384:	e7f0      	b.n	801a368 <_vfiprintf_r+0x1bc>
 801a386:	ab03      	add	r3, sp, #12
 801a388:	9300      	str	r3, [sp, #0]
 801a38a:	462a      	mov	r2, r5
 801a38c:	4b12      	ldr	r3, [pc, #72]	; (801a3d8 <_vfiprintf_r+0x22c>)
 801a38e:	a904      	add	r1, sp, #16
 801a390:	4630      	mov	r0, r6
 801a392:	f3af 8000 	nop.w
 801a396:	4607      	mov	r7, r0
 801a398:	1c78      	adds	r0, r7, #1
 801a39a:	d1d6      	bne.n	801a34a <_vfiprintf_r+0x19e>
 801a39c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a39e:	07d9      	lsls	r1, r3, #31
 801a3a0:	d405      	bmi.n	801a3ae <_vfiprintf_r+0x202>
 801a3a2:	89ab      	ldrh	r3, [r5, #12]
 801a3a4:	059a      	lsls	r2, r3, #22
 801a3a6:	d402      	bmi.n	801a3ae <_vfiprintf_r+0x202>
 801a3a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a3aa:	f7ff fa97 	bl	80198dc <__retarget_lock_release_recursive>
 801a3ae:	89ab      	ldrh	r3, [r5, #12]
 801a3b0:	065b      	lsls	r3, r3, #25
 801a3b2:	f53f af1d 	bmi.w	801a1f0 <_vfiprintf_r+0x44>
 801a3b6:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a3b8:	e71c      	b.n	801a1f4 <_vfiprintf_r+0x48>
 801a3ba:	ab03      	add	r3, sp, #12
 801a3bc:	9300      	str	r3, [sp, #0]
 801a3be:	462a      	mov	r2, r5
 801a3c0:	4b05      	ldr	r3, [pc, #20]	; (801a3d8 <_vfiprintf_r+0x22c>)
 801a3c2:	a904      	add	r1, sp, #16
 801a3c4:	4630      	mov	r0, r6
 801a3c6:	f7ff fce5 	bl	8019d94 <_printf_i>
 801a3ca:	e7e4      	b.n	801a396 <_vfiprintf_r+0x1ea>
 801a3cc:	0801c080 	.word	0x0801c080
 801a3d0:	0801c08a 	.word	0x0801c08a
 801a3d4:	00000000 	.word	0x00000000
 801a3d8:	0801a187 	.word	0x0801a187
 801a3dc:	0801c086 	.word	0x0801c086

0801a3e0 <__swbuf_r>:
 801a3e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a3e2:	460e      	mov	r6, r1
 801a3e4:	4614      	mov	r4, r2
 801a3e6:	4605      	mov	r5, r0
 801a3e8:	b118      	cbz	r0, 801a3f2 <__swbuf_r+0x12>
 801a3ea:	6a03      	ldr	r3, [r0, #32]
 801a3ec:	b90b      	cbnz	r3, 801a3f2 <__swbuf_r+0x12>
 801a3ee:	f7fe fff9 	bl	80193e4 <__sinit>
 801a3f2:	69a3      	ldr	r3, [r4, #24]
 801a3f4:	60a3      	str	r3, [r4, #8]
 801a3f6:	89a3      	ldrh	r3, [r4, #12]
 801a3f8:	071a      	lsls	r2, r3, #28
 801a3fa:	d525      	bpl.n	801a448 <__swbuf_r+0x68>
 801a3fc:	6923      	ldr	r3, [r4, #16]
 801a3fe:	b31b      	cbz	r3, 801a448 <__swbuf_r+0x68>
 801a400:	6823      	ldr	r3, [r4, #0]
 801a402:	6922      	ldr	r2, [r4, #16]
 801a404:	1a98      	subs	r0, r3, r2
 801a406:	6963      	ldr	r3, [r4, #20]
 801a408:	b2f6      	uxtb	r6, r6
 801a40a:	4283      	cmp	r3, r0
 801a40c:	4637      	mov	r7, r6
 801a40e:	dc04      	bgt.n	801a41a <__swbuf_r+0x3a>
 801a410:	4621      	mov	r1, r4
 801a412:	4628      	mov	r0, r5
 801a414:	f7ff fe66 	bl	801a0e4 <_fflush_r>
 801a418:	b9e0      	cbnz	r0, 801a454 <__swbuf_r+0x74>
 801a41a:	68a3      	ldr	r3, [r4, #8]
 801a41c:	3b01      	subs	r3, #1
 801a41e:	60a3      	str	r3, [r4, #8]
 801a420:	6823      	ldr	r3, [r4, #0]
 801a422:	1c5a      	adds	r2, r3, #1
 801a424:	6022      	str	r2, [r4, #0]
 801a426:	701e      	strb	r6, [r3, #0]
 801a428:	6962      	ldr	r2, [r4, #20]
 801a42a:	1c43      	adds	r3, r0, #1
 801a42c:	429a      	cmp	r2, r3
 801a42e:	d004      	beq.n	801a43a <__swbuf_r+0x5a>
 801a430:	89a3      	ldrh	r3, [r4, #12]
 801a432:	07db      	lsls	r3, r3, #31
 801a434:	d506      	bpl.n	801a444 <__swbuf_r+0x64>
 801a436:	2e0a      	cmp	r6, #10
 801a438:	d104      	bne.n	801a444 <__swbuf_r+0x64>
 801a43a:	4621      	mov	r1, r4
 801a43c:	4628      	mov	r0, r5
 801a43e:	f7ff fe51 	bl	801a0e4 <_fflush_r>
 801a442:	b938      	cbnz	r0, 801a454 <__swbuf_r+0x74>
 801a444:	4638      	mov	r0, r7
 801a446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a448:	4621      	mov	r1, r4
 801a44a:	4628      	mov	r0, r5
 801a44c:	f000 f806 	bl	801a45c <__swsetup_r>
 801a450:	2800      	cmp	r0, #0
 801a452:	d0d5      	beq.n	801a400 <__swbuf_r+0x20>
 801a454:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801a458:	e7f4      	b.n	801a444 <__swbuf_r+0x64>
	...

0801a45c <__swsetup_r>:
 801a45c:	b538      	push	{r3, r4, r5, lr}
 801a45e:	4b2a      	ldr	r3, [pc, #168]	; (801a508 <__swsetup_r+0xac>)
 801a460:	4605      	mov	r5, r0
 801a462:	6818      	ldr	r0, [r3, #0]
 801a464:	460c      	mov	r4, r1
 801a466:	b118      	cbz	r0, 801a470 <__swsetup_r+0x14>
 801a468:	6a03      	ldr	r3, [r0, #32]
 801a46a:	b90b      	cbnz	r3, 801a470 <__swsetup_r+0x14>
 801a46c:	f7fe ffba 	bl	80193e4 <__sinit>
 801a470:	89a3      	ldrh	r3, [r4, #12]
 801a472:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a476:	0718      	lsls	r0, r3, #28
 801a478:	d422      	bmi.n	801a4c0 <__swsetup_r+0x64>
 801a47a:	06d9      	lsls	r1, r3, #27
 801a47c:	d407      	bmi.n	801a48e <__swsetup_r+0x32>
 801a47e:	2309      	movs	r3, #9
 801a480:	602b      	str	r3, [r5, #0]
 801a482:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801a486:	81a3      	strh	r3, [r4, #12]
 801a488:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a48c:	e034      	b.n	801a4f8 <__swsetup_r+0x9c>
 801a48e:	0758      	lsls	r0, r3, #29
 801a490:	d512      	bpl.n	801a4b8 <__swsetup_r+0x5c>
 801a492:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a494:	b141      	cbz	r1, 801a4a8 <__swsetup_r+0x4c>
 801a496:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a49a:	4299      	cmp	r1, r3
 801a49c:	d002      	beq.n	801a4a4 <__swsetup_r+0x48>
 801a49e:	4628      	mov	r0, r5
 801a4a0:	f7ff fa5e 	bl	8019960 <_free_r>
 801a4a4:	2300      	movs	r3, #0
 801a4a6:	6363      	str	r3, [r4, #52]	; 0x34
 801a4a8:	89a3      	ldrh	r3, [r4, #12]
 801a4aa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a4ae:	81a3      	strh	r3, [r4, #12]
 801a4b0:	2300      	movs	r3, #0
 801a4b2:	6063      	str	r3, [r4, #4]
 801a4b4:	6923      	ldr	r3, [r4, #16]
 801a4b6:	6023      	str	r3, [r4, #0]
 801a4b8:	89a3      	ldrh	r3, [r4, #12]
 801a4ba:	f043 0308 	orr.w	r3, r3, #8
 801a4be:	81a3      	strh	r3, [r4, #12]
 801a4c0:	6923      	ldr	r3, [r4, #16]
 801a4c2:	b94b      	cbnz	r3, 801a4d8 <__swsetup_r+0x7c>
 801a4c4:	89a3      	ldrh	r3, [r4, #12]
 801a4c6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a4ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a4ce:	d003      	beq.n	801a4d8 <__swsetup_r+0x7c>
 801a4d0:	4621      	mov	r1, r4
 801a4d2:	4628      	mov	r0, r5
 801a4d4:	f000 f840 	bl	801a558 <__smakebuf_r>
 801a4d8:	89a0      	ldrh	r0, [r4, #12]
 801a4da:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a4de:	f010 0301 	ands.w	r3, r0, #1
 801a4e2:	d00a      	beq.n	801a4fa <__swsetup_r+0x9e>
 801a4e4:	2300      	movs	r3, #0
 801a4e6:	60a3      	str	r3, [r4, #8]
 801a4e8:	6963      	ldr	r3, [r4, #20]
 801a4ea:	425b      	negs	r3, r3
 801a4ec:	61a3      	str	r3, [r4, #24]
 801a4ee:	6923      	ldr	r3, [r4, #16]
 801a4f0:	b943      	cbnz	r3, 801a504 <__swsetup_r+0xa8>
 801a4f2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801a4f6:	d1c4      	bne.n	801a482 <__swsetup_r+0x26>
 801a4f8:	bd38      	pop	{r3, r4, r5, pc}
 801a4fa:	0781      	lsls	r1, r0, #30
 801a4fc:	bf58      	it	pl
 801a4fe:	6963      	ldrpl	r3, [r4, #20]
 801a500:	60a3      	str	r3, [r4, #8]
 801a502:	e7f4      	b.n	801a4ee <__swsetup_r+0x92>
 801a504:	2000      	movs	r0, #0
 801a506:	e7f7      	b.n	801a4f8 <__swsetup_r+0x9c>
 801a508:	20002138 	.word	0x20002138

0801a50c <__swhatbuf_r>:
 801a50c:	b570      	push	{r4, r5, r6, lr}
 801a50e:	460c      	mov	r4, r1
 801a510:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a514:	2900      	cmp	r1, #0
 801a516:	b096      	sub	sp, #88	; 0x58
 801a518:	4615      	mov	r5, r2
 801a51a:	461e      	mov	r6, r3
 801a51c:	da0d      	bge.n	801a53a <__swhatbuf_r+0x2e>
 801a51e:	89a3      	ldrh	r3, [r4, #12]
 801a520:	f013 0f80 	tst.w	r3, #128	; 0x80
 801a524:	f04f 0100 	mov.w	r1, #0
 801a528:	bf0c      	ite	eq
 801a52a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801a52e:	2340      	movne	r3, #64	; 0x40
 801a530:	2000      	movs	r0, #0
 801a532:	6031      	str	r1, [r6, #0]
 801a534:	602b      	str	r3, [r5, #0]
 801a536:	b016      	add	sp, #88	; 0x58
 801a538:	bd70      	pop	{r4, r5, r6, pc}
 801a53a:	466a      	mov	r2, sp
 801a53c:	f000 f848 	bl	801a5d0 <_fstat_r>
 801a540:	2800      	cmp	r0, #0
 801a542:	dbec      	blt.n	801a51e <__swhatbuf_r+0x12>
 801a544:	9901      	ldr	r1, [sp, #4]
 801a546:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801a54a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801a54e:	4259      	negs	r1, r3
 801a550:	4159      	adcs	r1, r3
 801a552:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a556:	e7eb      	b.n	801a530 <__swhatbuf_r+0x24>

0801a558 <__smakebuf_r>:
 801a558:	898b      	ldrh	r3, [r1, #12]
 801a55a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a55c:	079d      	lsls	r5, r3, #30
 801a55e:	4606      	mov	r6, r0
 801a560:	460c      	mov	r4, r1
 801a562:	d507      	bpl.n	801a574 <__smakebuf_r+0x1c>
 801a564:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a568:	6023      	str	r3, [r4, #0]
 801a56a:	6123      	str	r3, [r4, #16]
 801a56c:	2301      	movs	r3, #1
 801a56e:	6163      	str	r3, [r4, #20]
 801a570:	b002      	add	sp, #8
 801a572:	bd70      	pop	{r4, r5, r6, pc}
 801a574:	ab01      	add	r3, sp, #4
 801a576:	466a      	mov	r2, sp
 801a578:	f7ff ffc8 	bl	801a50c <__swhatbuf_r>
 801a57c:	9900      	ldr	r1, [sp, #0]
 801a57e:	4605      	mov	r5, r0
 801a580:	4630      	mov	r0, r6
 801a582:	f7fe fcf7 	bl	8018f74 <_malloc_r>
 801a586:	b948      	cbnz	r0, 801a59c <__smakebuf_r+0x44>
 801a588:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a58c:	059a      	lsls	r2, r3, #22
 801a58e:	d4ef      	bmi.n	801a570 <__smakebuf_r+0x18>
 801a590:	f023 0303 	bic.w	r3, r3, #3
 801a594:	f043 0302 	orr.w	r3, r3, #2
 801a598:	81a3      	strh	r3, [r4, #12]
 801a59a:	e7e3      	b.n	801a564 <__smakebuf_r+0xc>
 801a59c:	89a3      	ldrh	r3, [r4, #12]
 801a59e:	6020      	str	r0, [r4, #0]
 801a5a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a5a4:	81a3      	strh	r3, [r4, #12]
 801a5a6:	9b00      	ldr	r3, [sp, #0]
 801a5a8:	6163      	str	r3, [r4, #20]
 801a5aa:	9b01      	ldr	r3, [sp, #4]
 801a5ac:	6120      	str	r0, [r4, #16]
 801a5ae:	b15b      	cbz	r3, 801a5c8 <__smakebuf_r+0x70>
 801a5b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a5b4:	4630      	mov	r0, r6
 801a5b6:	f000 f81d 	bl	801a5f4 <_isatty_r>
 801a5ba:	b128      	cbz	r0, 801a5c8 <__smakebuf_r+0x70>
 801a5bc:	89a3      	ldrh	r3, [r4, #12]
 801a5be:	f023 0303 	bic.w	r3, r3, #3
 801a5c2:	f043 0301 	orr.w	r3, r3, #1
 801a5c6:	81a3      	strh	r3, [r4, #12]
 801a5c8:	89a3      	ldrh	r3, [r4, #12]
 801a5ca:	431d      	orrs	r5, r3
 801a5cc:	81a5      	strh	r5, [r4, #12]
 801a5ce:	e7cf      	b.n	801a570 <__smakebuf_r+0x18>

0801a5d0 <_fstat_r>:
 801a5d0:	b538      	push	{r3, r4, r5, lr}
 801a5d2:	4d07      	ldr	r5, [pc, #28]	; (801a5f0 <_fstat_r+0x20>)
 801a5d4:	2300      	movs	r3, #0
 801a5d6:	4604      	mov	r4, r0
 801a5d8:	4608      	mov	r0, r1
 801a5da:	4611      	mov	r1, r2
 801a5dc:	602b      	str	r3, [r5, #0]
 801a5de:	f7e7 ffba 	bl	8002556 <_fstat>
 801a5e2:	1c43      	adds	r3, r0, #1
 801a5e4:	d102      	bne.n	801a5ec <_fstat_r+0x1c>
 801a5e6:	682b      	ldr	r3, [r5, #0]
 801a5e8:	b103      	cbz	r3, 801a5ec <_fstat_r+0x1c>
 801a5ea:	6023      	str	r3, [r4, #0]
 801a5ec:	bd38      	pop	{r3, r4, r5, pc}
 801a5ee:	bf00      	nop
 801a5f0:	20010b28 	.word	0x20010b28

0801a5f4 <_isatty_r>:
 801a5f4:	b538      	push	{r3, r4, r5, lr}
 801a5f6:	4d06      	ldr	r5, [pc, #24]	; (801a610 <_isatty_r+0x1c>)
 801a5f8:	2300      	movs	r3, #0
 801a5fa:	4604      	mov	r4, r0
 801a5fc:	4608      	mov	r0, r1
 801a5fe:	602b      	str	r3, [r5, #0]
 801a600:	f7e7 ffb9 	bl	8002576 <_isatty>
 801a604:	1c43      	adds	r3, r0, #1
 801a606:	d102      	bne.n	801a60e <_isatty_r+0x1a>
 801a608:	682b      	ldr	r3, [r5, #0]
 801a60a:	b103      	cbz	r3, 801a60e <_isatty_r+0x1a>
 801a60c:	6023      	str	r3, [r4, #0]
 801a60e:	bd38      	pop	{r3, r4, r5, pc}
 801a610:	20010b28 	.word	0x20010b28

0801a614 <_init>:
 801a614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a616:	bf00      	nop
 801a618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a61a:	bc08      	pop	{r3}
 801a61c:	469e      	mov	lr, r3
 801a61e:	4770      	bx	lr

0801a620 <_fini>:
 801a620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a622:	bf00      	nop
 801a624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a626:	bc08      	pop	{r3}
 801a628:	469e      	mov	lr, r3
 801a62a:	4770      	bx	lr
