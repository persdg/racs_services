
scorbot_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c1ac  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001bf0  0801c3b0  0801c3b0  0002c3b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801dfa0  0801dfa0  0003213c  2**0
                  CONTENTS
  4 .ARM          00000008  0801dfa0  0801dfa0  0002dfa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801dfa8  0801dfa8  0003213c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000014  0801dfa8  0801dfa8  0002dfa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0801dfbc  0801dfbc  0002dfbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000213c  20000000  0801dfc4  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ea3c  20002140  08020100  00032140  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20010b7c  08020100  00040b7c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0003213c  2**0
                  CONTENTS, READONLY
 12 .comment      00000076  00000000  00000000  0003216a  2**0
                  CONTENTS, READONLY
 13 .debug_info   000404af  00000000  00000000  000321e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007780  00000000  00000000  0007268f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002170  00000000  00000000  00079e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001992  00000000  00000000  0007bf80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00035dc5  00000000  00000000  0007d912  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002f959  00000000  00000000  000b36d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00122d80  00000000  00000000  000e3030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009c08  00000000  00000000  00205db0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0020f9b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20002140 	.word	0x20002140
 800021c:	00000000 	.word	0x00000000
 8000220:	0801c394 	.word	0x0801c394

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20002144 	.word	0x20002144
 800023c:	0801c394 	.word	0x0801c394

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr
	...

08000260 <memchr>:
 8000260:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000264:	2a10      	cmp	r2, #16
 8000266:	db2b      	blt.n	80002c0 <memchr+0x60>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	d008      	beq.n	8000280 <memchr+0x20>
 800026e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000272:	3a01      	subs	r2, #1
 8000274:	428b      	cmp	r3, r1
 8000276:	d02d      	beq.n	80002d4 <memchr+0x74>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	b342      	cbz	r2, 80002d0 <memchr+0x70>
 800027e:	d1f6      	bne.n	800026e <memchr+0xe>
 8000280:	b4f0      	push	{r4, r5, r6, r7}
 8000282:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000286:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800028a:	f022 0407 	bic.w	r4, r2, #7
 800028e:	f07f 0700 	mvns.w	r7, #0
 8000292:	2300      	movs	r3, #0
 8000294:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000298:	3c08      	subs	r4, #8
 800029a:	ea85 0501 	eor.w	r5, r5, r1
 800029e:	ea86 0601 	eor.w	r6, r6, r1
 80002a2:	fa85 f547 	uadd8	r5, r5, r7
 80002a6:	faa3 f587 	sel	r5, r3, r7
 80002aa:	fa86 f647 	uadd8	r6, r6, r7
 80002ae:	faa5 f687 	sel	r6, r5, r7
 80002b2:	b98e      	cbnz	r6, 80002d8 <memchr+0x78>
 80002b4:	d1ee      	bne.n	8000294 <memchr+0x34>
 80002b6:	bcf0      	pop	{r4, r5, r6, r7}
 80002b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002bc:	f002 0207 	and.w	r2, r2, #7
 80002c0:	b132      	cbz	r2, 80002d0 <memchr+0x70>
 80002c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c6:	3a01      	subs	r2, #1
 80002c8:	ea83 0301 	eor.w	r3, r3, r1
 80002cc:	b113      	cbz	r3, 80002d4 <memchr+0x74>
 80002ce:	d1f8      	bne.n	80002c2 <memchr+0x62>
 80002d0:	2000      	movs	r0, #0
 80002d2:	4770      	bx	lr
 80002d4:	3801      	subs	r0, #1
 80002d6:	4770      	bx	lr
 80002d8:	2d00      	cmp	r5, #0
 80002da:	bf06      	itte	eq
 80002dc:	4635      	moveq	r5, r6
 80002de:	3803      	subeq	r0, #3
 80002e0:	3807      	subne	r0, #7
 80002e2:	f015 0f01 	tst.w	r5, #1
 80002e6:	d107      	bne.n	80002f8 <memchr+0x98>
 80002e8:	3001      	adds	r0, #1
 80002ea:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ee:	bf02      	ittt	eq
 80002f0:	3001      	addeq	r0, #1
 80002f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002f6:	3001      	addeq	r0, #1
 80002f8:	bcf0      	pop	{r4, r5, r6, r7}
 80002fa:	3801      	subs	r0, #1
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop

08000300 <strlen>:
 8000300:	4603      	mov	r3, r0
 8000302:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000306:	2a00      	cmp	r2, #0
 8000308:	d1fb      	bne.n	8000302 <strlen+0x2>
 800030a:	1a18      	subs	r0, r3, r0
 800030c:	3801      	subs	r0, #1
 800030e:	4770      	bx	lr

08000310 <__aeabi_ldivmod>:
 8000310:	b97b      	cbnz	r3, 8000332 <__aeabi_ldivmod+0x22>
 8000312:	b972      	cbnz	r2, 8000332 <__aeabi_ldivmod+0x22>
 8000314:	2900      	cmp	r1, #0
 8000316:	bfbe      	ittt	lt
 8000318:	2000      	movlt	r0, #0
 800031a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800031e:	e006      	blt.n	800032e <__aeabi_ldivmod+0x1e>
 8000320:	bf08      	it	eq
 8000322:	2800      	cmpeq	r0, #0
 8000324:	bf1c      	itt	ne
 8000326:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800032a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800032e:	f000 b9bb 	b.w	80006a8 <__aeabi_idiv0>
 8000332:	f1ad 0c08 	sub.w	ip, sp, #8
 8000336:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800033a:	2900      	cmp	r1, #0
 800033c:	db09      	blt.n	8000352 <__aeabi_ldivmod+0x42>
 800033e:	2b00      	cmp	r3, #0
 8000340:	db1a      	blt.n	8000378 <__aeabi_ldivmod+0x68>
 8000342:	f000 f84d 	bl	80003e0 <__udivmoddi4>
 8000346:	f8dd e004 	ldr.w	lr, [sp, #4]
 800034a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034e:	b004      	add	sp, #16
 8000350:	4770      	bx	lr
 8000352:	4240      	negs	r0, r0
 8000354:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000358:	2b00      	cmp	r3, #0
 800035a:	db1b      	blt.n	8000394 <__aeabi_ldivmod+0x84>
 800035c:	f000 f840 	bl	80003e0 <__udivmoddi4>
 8000360:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000364:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000368:	b004      	add	sp, #16
 800036a:	4240      	negs	r0, r0
 800036c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000370:	4252      	negs	r2, r2
 8000372:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000376:	4770      	bx	lr
 8000378:	4252      	negs	r2, r2
 800037a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037e:	f000 f82f 	bl	80003e0 <__udivmoddi4>
 8000382:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000386:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800038a:	b004      	add	sp, #16
 800038c:	4240      	negs	r0, r0
 800038e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000392:	4770      	bx	lr
 8000394:	4252      	negs	r2, r2
 8000396:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800039a:	f000 f821 	bl	80003e0 <__udivmoddi4>
 800039e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003a6:	b004      	add	sp, #16
 80003a8:	4252      	negs	r2, r2
 80003aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003c4:	f000 b970 	b.w	80006a8 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9e08      	ldr	r6, [sp, #32]
 80003e6:	460d      	mov	r5, r1
 80003e8:	4604      	mov	r4, r0
 80003ea:	460f      	mov	r7, r1
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d14a      	bne.n	8000486 <__udivmoddi4+0xa6>
 80003f0:	428a      	cmp	r2, r1
 80003f2:	4694      	mov	ip, r2
 80003f4:	d965      	bls.n	80004c2 <__udivmoddi4+0xe2>
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	b143      	cbz	r3, 800040e <__udivmoddi4+0x2e>
 80003fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000400:	f1c3 0220 	rsb	r2, r3, #32
 8000404:	409f      	lsls	r7, r3
 8000406:	fa20 f202 	lsr.w	r2, r0, r2
 800040a:	4317      	orrs	r7, r2
 800040c:	409c      	lsls	r4, r3
 800040e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000412:	fa1f f58c 	uxth.w	r5, ip
 8000416:	fbb7 f1fe 	udiv	r1, r7, lr
 800041a:	0c22      	lsrs	r2, r4, #16
 800041c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000420:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000424:	fb01 f005 	mul.w	r0, r1, r5
 8000428:	4290      	cmp	r0, r2
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x62>
 800042c:	eb1c 0202 	adds.w	r2, ip, r2
 8000430:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000434:	f080 811c 	bcs.w	8000670 <__udivmoddi4+0x290>
 8000438:	4290      	cmp	r0, r2
 800043a:	f240 8119 	bls.w	8000670 <__udivmoddi4+0x290>
 800043e:	3902      	subs	r1, #2
 8000440:	4462      	add	r2, ip
 8000442:	1a12      	subs	r2, r2, r0
 8000444:	b2a4      	uxth	r4, r4
 8000446:	fbb2 f0fe 	udiv	r0, r2, lr
 800044a:	fb0e 2210 	mls	r2, lr, r0, r2
 800044e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000452:	fb00 f505 	mul.w	r5, r0, r5
 8000456:	42a5      	cmp	r5, r4
 8000458:	d90a      	bls.n	8000470 <__udivmoddi4+0x90>
 800045a:	eb1c 0404 	adds.w	r4, ip, r4
 800045e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000462:	f080 8107 	bcs.w	8000674 <__udivmoddi4+0x294>
 8000466:	42a5      	cmp	r5, r4
 8000468:	f240 8104 	bls.w	8000674 <__udivmoddi4+0x294>
 800046c:	4464      	add	r4, ip
 800046e:	3802      	subs	r0, #2
 8000470:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000474:	1b64      	subs	r4, r4, r5
 8000476:	2100      	movs	r1, #0
 8000478:	b11e      	cbz	r6, 8000482 <__udivmoddi4+0xa2>
 800047a:	40dc      	lsrs	r4, r3
 800047c:	2300      	movs	r3, #0
 800047e:	e9c6 4300 	strd	r4, r3, [r6]
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	428b      	cmp	r3, r1
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0xbc>
 800048a:	2e00      	cmp	r6, #0
 800048c:	f000 80ed 	beq.w	800066a <__udivmoddi4+0x28a>
 8000490:	2100      	movs	r1, #0
 8000492:	e9c6 0500 	strd	r0, r5, [r6]
 8000496:	4608      	mov	r0, r1
 8000498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049c:	fab3 f183 	clz	r1, r3
 80004a0:	2900      	cmp	r1, #0
 80004a2:	d149      	bne.n	8000538 <__udivmoddi4+0x158>
 80004a4:	42ab      	cmp	r3, r5
 80004a6:	d302      	bcc.n	80004ae <__udivmoddi4+0xce>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	f200 80f8 	bhi.w	800069e <__udivmoddi4+0x2be>
 80004ae:	1a84      	subs	r4, r0, r2
 80004b0:	eb65 0203 	sbc.w	r2, r5, r3
 80004b4:	2001      	movs	r0, #1
 80004b6:	4617      	mov	r7, r2
 80004b8:	2e00      	cmp	r6, #0
 80004ba:	d0e2      	beq.n	8000482 <__udivmoddi4+0xa2>
 80004bc:	e9c6 4700 	strd	r4, r7, [r6]
 80004c0:	e7df      	b.n	8000482 <__udivmoddi4+0xa2>
 80004c2:	b902      	cbnz	r2, 80004c6 <__udivmoddi4+0xe6>
 80004c4:	deff      	udf	#255	; 0xff
 80004c6:	fab2 f382 	clz	r3, r2
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	f040 8090 	bne.w	80005f0 <__udivmoddi4+0x210>
 80004d0:	1a8a      	subs	r2, r1, r2
 80004d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d6:	fa1f fe8c 	uxth.w	lr, ip
 80004da:	2101      	movs	r1, #1
 80004dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004e0:	fb07 2015 	mls	r0, r7, r5, r2
 80004e4:	0c22      	lsrs	r2, r4, #16
 80004e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ea:	fb0e f005 	mul.w	r0, lr, r5
 80004ee:	4290      	cmp	r0, r2
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x124>
 80004f2:	eb1c 0202 	adds.w	r2, ip, r2
 80004f6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x122>
 80004fc:	4290      	cmp	r0, r2
 80004fe:	f200 80cb 	bhi.w	8000698 <__udivmoddi4+0x2b8>
 8000502:	4645      	mov	r5, r8
 8000504:	1a12      	subs	r2, r2, r0
 8000506:	b2a4      	uxth	r4, r4
 8000508:	fbb2 f0f7 	udiv	r0, r2, r7
 800050c:	fb07 2210 	mls	r2, r7, r0, r2
 8000510:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000514:	fb0e fe00 	mul.w	lr, lr, r0
 8000518:	45a6      	cmp	lr, r4
 800051a:	d908      	bls.n	800052e <__udivmoddi4+0x14e>
 800051c:	eb1c 0404 	adds.w	r4, ip, r4
 8000520:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000524:	d202      	bcs.n	800052c <__udivmoddi4+0x14c>
 8000526:	45a6      	cmp	lr, r4
 8000528:	f200 80bb 	bhi.w	80006a2 <__udivmoddi4+0x2c2>
 800052c:	4610      	mov	r0, r2
 800052e:	eba4 040e 	sub.w	r4, r4, lr
 8000532:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000536:	e79f      	b.n	8000478 <__udivmoddi4+0x98>
 8000538:	f1c1 0720 	rsb	r7, r1, #32
 800053c:	408b      	lsls	r3, r1
 800053e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000542:	ea4c 0c03 	orr.w	ip, ip, r3
 8000546:	fa05 f401 	lsl.w	r4, r5, r1
 800054a:	fa20 f307 	lsr.w	r3, r0, r7
 800054e:	40fd      	lsrs	r5, r7
 8000550:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000554:	4323      	orrs	r3, r4
 8000556:	fbb5 f8f9 	udiv	r8, r5, r9
 800055a:	fa1f fe8c 	uxth.w	lr, ip
 800055e:	fb09 5518 	mls	r5, r9, r8, r5
 8000562:	0c1c      	lsrs	r4, r3, #16
 8000564:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000568:	fb08 f50e 	mul.w	r5, r8, lr
 800056c:	42a5      	cmp	r5, r4
 800056e:	fa02 f201 	lsl.w	r2, r2, r1
 8000572:	fa00 f001 	lsl.w	r0, r0, r1
 8000576:	d90b      	bls.n	8000590 <__udivmoddi4+0x1b0>
 8000578:	eb1c 0404 	adds.w	r4, ip, r4
 800057c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000580:	f080 8088 	bcs.w	8000694 <__udivmoddi4+0x2b4>
 8000584:	42a5      	cmp	r5, r4
 8000586:	f240 8085 	bls.w	8000694 <__udivmoddi4+0x2b4>
 800058a:	f1a8 0802 	sub.w	r8, r8, #2
 800058e:	4464      	add	r4, ip
 8000590:	1b64      	subs	r4, r4, r5
 8000592:	b29d      	uxth	r5, r3
 8000594:	fbb4 f3f9 	udiv	r3, r4, r9
 8000598:	fb09 4413 	mls	r4, r9, r3, r4
 800059c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80005a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80005a4:	45a6      	cmp	lr, r4
 80005a6:	d908      	bls.n	80005ba <__udivmoddi4+0x1da>
 80005a8:	eb1c 0404 	adds.w	r4, ip, r4
 80005ac:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80005b0:	d26c      	bcs.n	800068c <__udivmoddi4+0x2ac>
 80005b2:	45a6      	cmp	lr, r4
 80005b4:	d96a      	bls.n	800068c <__udivmoddi4+0x2ac>
 80005b6:	3b02      	subs	r3, #2
 80005b8:	4464      	add	r4, ip
 80005ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005be:	fba3 9502 	umull	r9, r5, r3, r2
 80005c2:	eba4 040e 	sub.w	r4, r4, lr
 80005c6:	42ac      	cmp	r4, r5
 80005c8:	46c8      	mov	r8, r9
 80005ca:	46ae      	mov	lr, r5
 80005cc:	d356      	bcc.n	800067c <__udivmoddi4+0x29c>
 80005ce:	d053      	beq.n	8000678 <__udivmoddi4+0x298>
 80005d0:	b156      	cbz	r6, 80005e8 <__udivmoddi4+0x208>
 80005d2:	ebb0 0208 	subs.w	r2, r0, r8
 80005d6:	eb64 040e 	sbc.w	r4, r4, lr
 80005da:	fa04 f707 	lsl.w	r7, r4, r7
 80005de:	40ca      	lsrs	r2, r1
 80005e0:	40cc      	lsrs	r4, r1
 80005e2:	4317      	orrs	r7, r2
 80005e4:	e9c6 7400 	strd	r7, r4, [r6]
 80005e8:	4618      	mov	r0, r3
 80005ea:	2100      	movs	r1, #0
 80005ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005f0:	f1c3 0120 	rsb	r1, r3, #32
 80005f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005f8:	fa20 f201 	lsr.w	r2, r0, r1
 80005fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000600:	409d      	lsls	r5, r3
 8000602:	432a      	orrs	r2, r5
 8000604:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000608:	fa1f fe8c 	uxth.w	lr, ip
 800060c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000610:	fb07 1510 	mls	r5, r7, r0, r1
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800061a:	fb00 f50e 	mul.w	r5, r0, lr
 800061e:	428d      	cmp	r5, r1
 8000620:	fa04 f403 	lsl.w	r4, r4, r3
 8000624:	d908      	bls.n	8000638 <__udivmoddi4+0x258>
 8000626:	eb1c 0101 	adds.w	r1, ip, r1
 800062a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800062e:	d22f      	bcs.n	8000690 <__udivmoddi4+0x2b0>
 8000630:	428d      	cmp	r5, r1
 8000632:	d92d      	bls.n	8000690 <__udivmoddi4+0x2b0>
 8000634:	3802      	subs	r0, #2
 8000636:	4461      	add	r1, ip
 8000638:	1b49      	subs	r1, r1, r5
 800063a:	b292      	uxth	r2, r2
 800063c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000640:	fb07 1115 	mls	r1, r7, r5, r1
 8000644:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000648:	fb05 f10e 	mul.w	r1, r5, lr
 800064c:	4291      	cmp	r1, r2
 800064e:	d908      	bls.n	8000662 <__udivmoddi4+0x282>
 8000650:	eb1c 0202 	adds.w	r2, ip, r2
 8000654:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000658:	d216      	bcs.n	8000688 <__udivmoddi4+0x2a8>
 800065a:	4291      	cmp	r1, r2
 800065c:	d914      	bls.n	8000688 <__udivmoddi4+0x2a8>
 800065e:	3d02      	subs	r5, #2
 8000660:	4462      	add	r2, ip
 8000662:	1a52      	subs	r2, r2, r1
 8000664:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000668:	e738      	b.n	80004dc <__udivmoddi4+0xfc>
 800066a:	4631      	mov	r1, r6
 800066c:	4630      	mov	r0, r6
 800066e:	e708      	b.n	8000482 <__udivmoddi4+0xa2>
 8000670:	4639      	mov	r1, r7
 8000672:	e6e6      	b.n	8000442 <__udivmoddi4+0x62>
 8000674:	4610      	mov	r0, r2
 8000676:	e6fb      	b.n	8000470 <__udivmoddi4+0x90>
 8000678:	4548      	cmp	r0, r9
 800067a:	d2a9      	bcs.n	80005d0 <__udivmoddi4+0x1f0>
 800067c:	ebb9 0802 	subs.w	r8, r9, r2
 8000680:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000684:	3b01      	subs	r3, #1
 8000686:	e7a3      	b.n	80005d0 <__udivmoddi4+0x1f0>
 8000688:	4645      	mov	r5, r8
 800068a:	e7ea      	b.n	8000662 <__udivmoddi4+0x282>
 800068c:	462b      	mov	r3, r5
 800068e:	e794      	b.n	80005ba <__udivmoddi4+0x1da>
 8000690:	4640      	mov	r0, r8
 8000692:	e7d1      	b.n	8000638 <__udivmoddi4+0x258>
 8000694:	46d0      	mov	r8, sl
 8000696:	e77b      	b.n	8000590 <__udivmoddi4+0x1b0>
 8000698:	3d02      	subs	r5, #2
 800069a:	4462      	add	r2, ip
 800069c:	e732      	b.n	8000504 <__udivmoddi4+0x124>
 800069e:	4608      	mov	r0, r1
 80006a0:	e70a      	b.n	80004b8 <__udivmoddi4+0xd8>
 80006a2:	4464      	add	r4, ip
 80006a4:	3802      	subs	r0, #2
 80006a6:	e742      	b.n	800052e <__udivmoddi4+0x14e>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <control_callback>:
#include <callbacks.hpp>

void control_callback(const void* request_msg, void* response_msg){
 80006ac:	b480      	push	{r7}
 80006ae:	b085      	sub	sp, #20
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	6039      	str	r1, [r7, #0]
		racs_services__srv__Control_Request* req_in =
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	60fb      	str	r3, [r7, #12]
				(racs_services__srv__Control_Request*) request_msg;
		racs_services__srv__Control_Response* res_in =
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	60bb      	str	r3, [r7, #8]
				(racs_services__srv__Control_Response*) response_msg;
		//logica
	}
 80006be:	bf00      	nop
 80006c0:	3714      	adds	r7, #20
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
	...

080006cc <setup_callback>:

void setup_callback(const void* request_msg, void* response_msg){
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b084      	sub	sp, #16
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
 80006d4:	6039      	str	r1, [r7, #0]
		racs_services__srv__Setup_Request* req_in =
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	60fb      	str	r3, [r7, #12]
				(racs_services__srv__Setup_Request*) request_msg;
		racs_services__srv__Setup_Response* res_in =
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	60bb      	str	r3, [r7, #8]
				(racs_services__srv__Setup_Response*) response_msg;
		ScorBot.rcvSetup(req_in);
 80006de:	68f9      	ldr	r1, [r7, #12]
 80006e0:	4805      	ldr	r0, [pc, #20]	; (80006f8 <setup_callback+0x2c>)
 80006e2:	f001 f90f 	bl	8001904 <_ZN5Robot8rcvSetupEP33racs_services__srv__Setup_Request>
		ScorBot.sndSetup(res_in);
 80006e6:	68b9      	ldr	r1, [r7, #8]
 80006e8:	4803      	ldr	r0, [pc, #12]	; (80006f8 <setup_callback+0x2c>)
 80006ea:	f001 f96b 	bl	80019c4 <_ZN5Robot8sndSetupEP34racs_services__srv__Setup_Response>
		//res_in->response = 0b00000011;
	}
 80006ee:	bf00      	nop
 80006f0:	3710      	adds	r7, #16
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	2000215c 	.word	0x2000215c

080006fc <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
 8000704:	6039      	str	r1, [r7, #0]
 8000706:	683b      	ldr	r3, [r7, #0]
 8000708:	4618      	mov	r0, r3
 800070a:	370c      	adds	r7, #12
 800070c:	46bd      	mov	sp, r7
 800070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000712:	4770      	bx	lr

08000714 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
 800071c:	6878      	ldr	r0, [r7, #4]
 800071e:	f000 f8c5 	bl	80008ac <_ZNSaIhED1Ev>
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	4618      	mov	r0, r3
 8000726:	3708      	adds	r7, #8
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}

0800072c <_ZNSt12_Vector_baseIhSaIhEEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	4618      	mov	r0, r3
 8000738:	f000 f8a8 	bl	800088c <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1Ev>
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	4618      	mov	r0, r3
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}

08000746 <_ZNSt6vectorIhSaIhEEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8000746:	b580      	push	{r7, lr}
 8000748:	b082      	sub	sp, #8
 800074a:	af00      	add	r7, sp, #0
 800074c:	6078      	str	r0, [r7, #4]
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	4618      	mov	r0, r3
 8000752:	f7ff ffeb 	bl	800072c <_ZNSt12_Vector_baseIhSaIhEEC1Ev>
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	4618      	mov	r0, r3
 800075a:	3708      	adds	r7, #8
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}

08000760 <_ZN13Communication7RCVctrlC1Eh>:
// ==================================================
/*
 * RCVctrl:
 * Classe che gestisce il ricevimento di un messaggio di controllo
 */
Communication::RCVctrl::RCVctrl(uint8_t n){
 8000760:	b580      	push	{r7, lr}
 8000762:	b084      	sub	sp, #16
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
 8000768:	460b      	mov	r3, r1
 800076a:	70fb      	strb	r3, [r7, #3]
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	3304      	adds	r3, #4
 8000770:	4618      	mov	r0, r3
 8000772:	f7ff ffe8 	bl	8000746 <_ZNSt6vectorIhSaIhEEC1Ev>
	this->num = n;
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	78fa      	ldrb	r2, [r7, #3]
 800077a:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < n; i++) {
 800077c:	2300      	movs	r3, #0
 800077e:	73fb      	strb	r3, [r7, #15]
 8000780:	e00c      	b.n	800079c <_ZN13Communication7RCVctrlC1Eh+0x3c>
	  values.push_back(0);
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	3304      	adds	r3, #4
 8000786:	2200      	movs	r2, #0
 8000788:	73ba      	strb	r2, [r7, #14]
 800078a:	f107 020e 	add.w	r2, r7, #14
 800078e:	4611      	mov	r1, r2
 8000790:	4618      	mov	r0, r3
 8000792:	f000 f8ca 	bl	800092a <_ZNSt6vectorIhSaIhEE9push_backEOh>
	for (uint8_t i = 0; i < n; i++) {
 8000796:	7bfb      	ldrb	r3, [r7, #15]
 8000798:	3301      	adds	r3, #1
 800079a:	73fb      	strb	r3, [r7, #15]
 800079c:	7bfa      	ldrb	r2, [r7, #15]
 800079e:	78fb      	ldrb	r3, [r7, #3]
 80007a0:	429a      	cmp	r2, r3
 80007a2:	d3ee      	bcc.n	8000782 <_ZN13Communication7RCVctrlC1Eh+0x22>
	}
}
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	4618      	mov	r0, r3
 80007a8:	3710      	adds	r7, #16
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}

080007ae <_ZN13Communication7RCVctrlD1Ev>:

Communication::RCVctrl::~RCVctrl(){
 80007ae:	b580      	push	{r7, lr}
 80007b0:	b082      	sub	sp, #8
 80007b2:	af00      	add	r7, sp, #0
 80007b4:	6078      	str	r0, [r7, #4]
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	3304      	adds	r3, #4
 80007ba:	4618      	mov	r0, r3
 80007bc:	f000 f89a 	bl	80008f4 <_ZNSt6vectorIhSaIhEED1Ev>

}
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	4618      	mov	r0, r3
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}

080007ca <_ZN13Communication7SNDctrlC1Eh>:
/*
 * RCVctrl:
 * Classe che gestisce l'invio di un messaggio di controllo
 */
Communication::SNDctrl::SNDctrl(unsigned char n){
 80007ca:	b580      	push	{r7, lr}
 80007cc:	b084      	sub	sp, #16
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	6078      	str	r0, [r7, #4]
 80007d2:	460b      	mov	r3, r1
 80007d4:	70fb      	strb	r3, [r7, #3]
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	3304      	adds	r3, #4
 80007da:	4618      	mov	r0, r3
 80007dc:	f7ff ffb3 	bl	8000746 <_ZNSt6vectorIhSaIhEEC1Ev>
  this->num = n;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	78fa      	ldrb	r2, [r7, #3]
 80007e4:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < n; i++) {
 80007e6:	2300      	movs	r3, #0
 80007e8:	73fb      	strb	r3, [r7, #15]
 80007ea:	e00c      	b.n	8000806 <_ZN13Communication7SNDctrlC1Eh+0x3c>
    encoders.push_back(0);
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	3304      	adds	r3, #4
 80007f0:	2200      	movs	r2, #0
 80007f2:	73ba      	strb	r2, [r7, #14]
 80007f4:	f107 020e 	add.w	r2, r7, #14
 80007f8:	4611      	mov	r1, r2
 80007fa:	4618      	mov	r0, r3
 80007fc:	f000 f895 	bl	800092a <_ZNSt6vectorIhSaIhEE9push_backEOh>
  for (uint8_t i = 0; i < n; i++) {
 8000800:	7bfb      	ldrb	r3, [r7, #15]
 8000802:	3301      	adds	r3, #1
 8000804:	73fb      	strb	r3, [r7, #15]
 8000806:	7bfa      	ldrb	r2, [r7, #15]
 8000808:	78fb      	ldrb	r3, [r7, #3]
 800080a:	429a      	cmp	r2, r3
 800080c:	d3ee      	bcc.n	80007ec <_ZN13Communication7SNDctrlC1Eh+0x22>
  }
}
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	4618      	mov	r0, r3
 8000812:	3710      	adds	r7, #16
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}

08000818 <_ZN13Communication7SNDctrlD1Ev>:

Communication::SNDctrl::~SNDctrl(){
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	3304      	adds	r3, #4
 8000824:	4618      	mov	r0, r3
 8000826:	f000 f865 	bl	80008f4 <_ZNSt6vectorIhSaIhEED1Ev>

}
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	4618      	mov	r0, r3
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}

08000834 <_ZN13Communication8RCVsetupC1Ev>:
/*
 * RCVctrl:
 * Classe che gestisce il ricevimento di un messaggio di setup
 */
Communication::RCVsetup::RCVsetup(){
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]

}
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	4618      	mov	r0, r3
 8000840:	370c      	adds	r7, #12
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr

0800084a <_ZN13Communication8RCVsetupD1Ev>:

Communication::RCVsetup::~RCVsetup(){
 800084a:	b480      	push	{r7}
 800084c:	b083      	sub	sp, #12
 800084e:	af00      	add	r7, sp, #0
 8000850:	6078      	str	r0, [r7, #4]

}
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	4618      	mov	r0, r3
 8000856:	370c      	adds	r7, #12
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr

08000860 <_ZN13Communication8SNDsetupC1Ev>:
/*
 * RCVctrl:
 * Classe che gestisce l'invio di un messaggio di setup
 */
Communication::SNDsetup::SNDsetup(){
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]

}
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	4618      	mov	r0, r3
 800086c:	370c      	adds	r7, #12
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr

08000876 <_ZN13Communication8SNDsetupD1Ev>:

Communication::SNDsetup::~SNDsetup(){
 8000876:	b480      	push	{r7}
 8000878:	b083      	sub	sp, #12
 800087a:	af00      	add	r7, sp, #0
 800087c:	6078      	str	r0, [r7, #4]

}
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	4618      	mov	r0, r3
 8000882:	370c      	adds	r7, #12
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr

0800088c <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8000894:	6878      	ldr	r0, [r7, #4]
 8000896:	f000 f859 	bl	800094c <_ZNSaIhEC1Ev>
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	4618      	mov	r0, r3
 800089e:	f000 f861 	bl	8000964 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1Ev>
	{ }
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	4618      	mov	r0, r3
 80008a6:	3708      	adds	r7, #8
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}

080008ac <_ZNSaIhED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
 80008b4:	6878      	ldr	r0, [r7, #4]
 80008b6:	f000 f869 	bl	800098c <_ZN9__gnu_cxx13new_allocatorIhED1Ev>
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	4618      	mov	r0, r3
 80008be:	3708      	adds	r7, #8
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}

080008c4 <_ZNSt12_Vector_baseIhSaIhEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	689a      	ldr	r2, [r3, #8]
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	1ad3      	subs	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 80008da:	461a      	mov	r2, r3
 80008dc:	6878      	ldr	r0, [r7, #4]
 80008de:	f000 f860 	bl	80009a2 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
      }
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	4618      	mov	r0, r3
 80008e6:	f7ff ff15 	bl	8000714 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implD1Ev>
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	4618      	mov	r0, r3
 80008ee:	3708      	adds	r7, #8
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}

080008f4 <_ZNSt6vectorIhSaIhEED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 80008f4:	b5b0      	push	{r4, r5, r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681c      	ldr	r4, [r3, #0]
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	4618      	mov	r0, r3
 8000908:	f000 f85e 	bl	80009c8 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 800090c:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800090e:	461a      	mov	r2, r3
 8000910:	4629      	mov	r1, r5
 8000912:	4620      	mov	r0, r4
 8000914:	f000 f863 	bl	80009de <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	4618      	mov	r0, r3
 800091c:	f7ff ffd2 	bl	80008c4 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	4618      	mov	r0, r3
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bdb0      	pop	{r4, r5, r7, pc}

0800092a <_ZNSt6vectorIhSaIhEE9push_backEOh>:
	  _M_realloc_insert(end(), __x);
      }

#if __cplusplus >= 201103L
      void
      push_back(value_type&& __x)
 800092a:	b580      	push	{r7, lr}
 800092c:	b082      	sub	sp, #8
 800092e:	af00      	add	r7, sp, #0
 8000930:	6078      	str	r0, [r7, #4]
 8000932:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8000934:	6838      	ldr	r0, [r7, #0]
 8000936:	f000 f860 	bl	80009fa <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 800093a:	4603      	mov	r3, r0
 800093c:	4619      	mov	r1, r3
 800093e:	6878      	ldr	r0, [r7, #4]
 8000940:	f000 f866 	bl	8000a10 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>
 8000944:	bf00      	nop
 8000946:	3708      	adds	r7, #8
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}

0800094c <_ZNSaIhEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
 8000954:	6878      	ldr	r0, [r7, #4]
 8000956:	f000 f889 	bl	8000a6c <_ZN9__gnu_cxx13new_allocatorIhEC1Ev>
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	4618      	mov	r0, r3
 800095e:	3708      	adds	r7, #8
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}

08000964 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	2200      	movs	r2, #0
 8000970:	601a      	str	r2, [r3, #0]
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	2200      	movs	r2, #0
 8000976:	605a      	str	r2, [r3, #4]
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	2200      	movs	r2, #0
 800097c:	609a      	str	r2, [r3, #8]
	{ }
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	4618      	mov	r0, r3
 8000982:	370c      	adds	r7, #12
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr

0800098c <_ZN9__gnu_cxx13new_allocatorIhED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	4618      	mov	r0, r3
 8000998:	370c      	adds	r7, #12
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr

080009a2 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>:
      _M_deallocate(pointer __p, size_t __n)
 80009a2:	b580      	push	{r7, lr}
 80009a4:	b084      	sub	sp, #16
 80009a6:	af00      	add	r7, sp, #0
 80009a8:	60f8      	str	r0, [r7, #12]
 80009aa:	60b9      	str	r1, [r7, #8]
 80009ac:	607a      	str	r2, [r7, #4]
	if (__p)
 80009ae:	68bb      	ldr	r3, [r7, #8]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d005      	beq.n	80009c0 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	687a      	ldr	r2, [r7, #4]
 80009b8:	68b9      	ldr	r1, [r7, #8]
 80009ba:	4618      	mov	r0, r3
 80009bc:	f000 f861 	bl	8000a82 <_ZNSt16allocator_traitsISaIhEE10deallocateERS0_Phj>
      }
 80009c0:	bf00      	nop
 80009c2:	3710      	adds	r7, #16
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}

080009c8 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	4618      	mov	r0, r3
 80009d4:	370c      	adds	r7, #12
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr

080009de <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80009de:	b580      	push	{r7, lr}
 80009e0:	b084      	sub	sp, #16
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	60f8      	str	r0, [r7, #12]
 80009e6:	60b9      	str	r1, [r7, #8]
 80009e8:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 80009ea:	68b9      	ldr	r1, [r7, #8]
 80009ec:	68f8      	ldr	r0, [r7, #12]
 80009ee:	f000 f857 	bl	8000aa0 <_ZSt8_DestroyIPhEvT_S1_>
    }
 80009f2:	bf00      	nop
 80009f4:	3710      	adds	r7, #16
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}

080009fa <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 80009fa:	b480      	push	{r7}
 80009fc:	b083      	sub	sp, #12
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4618      	mov	r0, r3
 8000a06:	370c      	adds	r7, #12
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr

08000a10 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_>:
#if __cplusplus > 201402L
      typename vector<_Tp, _Alloc>::reference
#else
      void
#endif
      vector<_Tp, _Alloc>::
 8000a10:	b5b0      	push	{r4, r5, r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
 8000a18:	6039      	str	r1, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	685a      	ldr	r2, [r3, #4]
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	689b      	ldr	r3, [r3, #8]
 8000a22:	429a      	cmp	r2, r3
 8000a24:	d011      	beq.n	8000a4a <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_+0x3a>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8000a26:	687c      	ldr	r4, [r7, #4]
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	685d      	ldr	r5, [r3, #4]
 8000a2c:	6838      	ldr	r0, [r7, #0]
 8000a2e:	f000 f844 	bl	8000aba <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 8000a32:	4603      	mov	r3, r0
 8000a34:	461a      	mov	r2, r3
 8000a36:	4629      	mov	r1, r5
 8000a38:	4620      	mov	r0, r4
 8000a3a:	f000 f849 	bl	8000ad0 <_ZNSt16allocator_traitsISaIhEE9constructIhJhEEEvRS0_PT_DpOT0_>
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	1c5a      	adds	r2, r3, #1
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	605a      	str	r2, [r3, #4]
	else
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
#if __cplusplus > 201402L
	return back();
#endif
      }
 8000a48:	e00c      	b.n	8000a64 <_ZNSt6vectorIhSaIhEE12emplace_backIJhEEEvDpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8000a4a:	6878      	ldr	r0, [r7, #4]
 8000a4c:	f000 f853 	bl	8000af6 <_ZNSt6vectorIhSaIhEE3endEv>
 8000a50:	4604      	mov	r4, r0
 8000a52:	6838      	ldr	r0, [r7, #0]
 8000a54:	f000 f831 	bl	8000aba <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	461a      	mov	r2, r3
 8000a5c:	4621      	mov	r1, r4
 8000a5e:	6878      	ldr	r0, [r7, #4]
 8000a60:	f000 f870 	bl	8000b44 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_>
      }
 8000a64:	bf00      	nop
 8000a66:	3708      	adds	r7, #8
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bdb0      	pop	{r4, r5, r7, pc}

08000a6c <_ZN9__gnu_cxx13new_allocatorIhEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	4618      	mov	r0, r3
 8000a78:	370c      	adds	r7, #12
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr

08000a82 <_ZNSt16allocator_traitsISaIhEE10deallocateERS0_Phj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8000a82:	b580      	push	{r7, lr}
 8000a84:	b084      	sub	sp, #16
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	60f8      	str	r0, [r7, #12]
 8000a8a:	60b9      	str	r1, [r7, #8]
 8000a8c:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8000a8e:	687a      	ldr	r2, [r7, #4]
 8000a90:	68b9      	ldr	r1, [r7, #8]
 8000a92:	68f8      	ldr	r0, [r7, #12]
 8000a94:	f000 f90e 	bl	8000cb4 <_ZN9__gnu_cxx13new_allocatorIhE10deallocateEPhj>
 8000a98:	bf00      	nop
 8000a9a:	3710      	adds	r7, #16
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}

08000aa0 <_ZSt8_DestroyIPhEvT_S1_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
 8000aa8:	6039      	str	r1, [r7, #0]
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 8000aaa:	6839      	ldr	r1, [r7, #0]
 8000aac:	6878      	ldr	r0, [r7, #4]
 8000aae:	f000 f90f 	bl	8000cd0 <_ZNSt12_Destroy_auxILb1EE9__destroyIPhEEvT_S3_>
    }
 8000ab2:	bf00      	nop
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8000aba:	b480      	push	{r7}
 8000abc:	b083      	sub	sp, #12
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	370c      	adds	r7, #12
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr

08000ad0 <_ZNSt16allocator_traitsISaIhEE9constructIhJhEEEvRS0_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	60f8      	str	r0, [r7, #12]
 8000ad8:	60b9      	str	r1, [r7, #8]
 8000ada:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8000adc:	6878      	ldr	r0, [r7, #4]
 8000ade:	f7ff ffec 	bl	8000aba <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	68b9      	ldr	r1, [r7, #8]
 8000ae8:	68f8      	ldr	r0, [r7, #12]
 8000aea:	f000 f8fc 	bl	8000ce6 <_ZN9__gnu_cxx13new_allocatorIhE9constructIhJhEEEvPT_DpOT0_>
	}
 8000aee:	bf00      	nop
 8000af0:	3710      	adds	r7, #16
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}

08000af6 <_ZNSt6vectorIhSaIhEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8000af6:	b580      	push	{r7, lr}
 8000af8:	b084      	sub	sp, #16
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	1d1a      	adds	r2, r3, #4
 8000b02:	f107 030c 	add.w	r3, r7, #12
 8000b06:	4611      	mov	r1, r2
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f000 f903 	bl	8000d14 <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	4618      	mov	r0, r3
 8000b12:	3710      	adds	r7, #16
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <_ZNSt6vectorIhSaIhEE15_S_use_relocateEv>:
      _S_use_relocate()
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f000 f805 	bl	8000b2e <_ZNSt6vectorIhSaIhEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 8000b24:	4603      	mov	r3, r0
      }
 8000b26:	4618      	mov	r0, r3
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}

08000b2e <_ZNSt6vectorIhSaIhEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8000b2e:	b480      	push	{r7}
 8000b30:	b083      	sub	sp, #12
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8000b36:	2301      	movs	r3, #1
      }
 8000b38:	4618      	mov	r0, r3
 8000b3a:	370c      	adds	r7, #12
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr

08000b44 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 8000b44:	b5b0      	push	{r4, r5, r7, lr}
 8000b46:	b08c      	sub	sp, #48	; 0x30
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	60f8      	str	r0, [r7, #12]
 8000b4c:	60b9      	str	r1, [r7, #8]
 8000b4e:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8000b50:	4a57      	ldr	r2, [pc, #348]	; (8000cb0 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x16c>)
 8000b52:	2101      	movs	r1, #1
 8000b54:	68f8      	ldr	r0, [r7, #12]
 8000b56:	f000 f8ed 	bl	8000d34 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
 8000b5a:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8000b68:	68f8      	ldr	r0, [r7, #12]
 8000b6a:	f000 f92a 	bl	8000dc2 <_ZNSt6vectorIhSaIhEE5beginEv>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	617b      	str	r3, [r7, #20]
 8000b72:	f107 0214 	add.w	r2, r7, #20
 8000b76:	f107 0308 	add.w	r3, r7, #8
 8000b7a:	4611      	mov	r1, r2
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f000 f930 	bl	8000de2 <_ZN9__gnu_cxxmiIPhSt6vectorIhSaIhEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 8000b82:	4603      	mov	r3, r0
 8000b84:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f000 f93d 	bl	8000e0a <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>
 8000b90:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8000b92:	69bb      	ldr	r3, [r7, #24]
 8000b94:	62fb      	str	r3, [r7, #44]	; 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 8000b96:	68fc      	ldr	r4, [r7, #12]
 8000b98:	69ba      	ldr	r2, [r7, #24]
 8000b9a:	69fb      	ldr	r3, [r7, #28]
 8000b9c:	18d5      	adds	r5, r2, r3
 8000b9e:	6878      	ldr	r0, [r7, #4]
 8000ba0:	f7ff ff8b 	bl	8000aba <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	4629      	mov	r1, r5
 8000baa:	4620      	mov	r0, r4
 8000bac:	f7ff ff90 	bl	8000ad0 <_ZNSt16allocator_traitsISaIhEE9constructIhJhEEEvRS0_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	62fb      	str	r3, [r7, #44]	; 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8000bb4:	f7ff ffb0 	bl	8000b18 <_ZNSt6vectorIhSaIhEE15_S_use_relocateEv>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d027      	beq.n	8000c0e <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0xca>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8000bbe:	f107 0308 	add.w	r3, r7, #8
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f000 f949 	bl	8000e5a <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f7ff fefa 	bl	80009c8 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8000bd4:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8000bd6:	69ba      	ldr	r2, [r7, #24]
 8000bd8:	4621      	mov	r1, r4
 8000bda:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000bdc:	f000 f929 	bl	8000e32 <_ZNSt6vectorIhSaIhEE11_S_relocateEPhS2_S2_RS0_>
 8000be0:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 8000be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000be4:	3301      	adds	r3, #1
 8000be6:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8000be8:	f107 0308 	add.w	r3, r7, #8
 8000bec:	4618      	mov	r0, r3
 8000bee:	f000 f934 	bl	8000e5a <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f7ff fee5 	bl	80009c8 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8000bfe:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8000c00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000c02:	6a39      	ldr	r1, [r7, #32]
 8000c04:	4620      	mov	r0, r4
 8000c06:	f000 f914 	bl	8000e32 <_ZNSt6vectorIhSaIhEE11_S_relocateEPhS2_S2_RS0_>
 8000c0a:	62f8      	str	r0, [r7, #44]	; 0x2c
 8000c0c:	e026      	b.n	8000c5c <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x118>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 8000c0e:	f107 0308 	add.w	r3, r7, #8
 8000c12:	4618      	mov	r0, r3
 8000c14:	f000 f921 	bl	8000e5a <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f7ff fed2 	bl	80009c8 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8000c24:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8000c26:	69ba      	ldr	r2, [r7, #24]
 8000c28:	4621      	mov	r1, r4
 8000c2a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000c2c:	f000 f920 	bl	8000e70 <_ZSt34__uninitialized_move_if_noexcept_aIPhS0_SaIhEET0_T_S3_S2_RT1_>
 8000c30:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 8000c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c34:	3301      	adds	r3, #1
 8000c36:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 8000c38:	f107 0308 	add.w	r3, r7, #8
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f000 f90c 	bl	8000e5a <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 8000c42:	4603      	mov	r3, r0
 8000c44:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f7ff febd 	bl	80009c8 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8000c4e:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8000c50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000c52:	6a39      	ldr	r1, [r7, #32]
 8000c54:	4620      	mov	r0, r4
 8000c56:	f000 f90b 	bl	8000e70 <_ZSt34__uninitialized_move_if_noexcept_aIPhS0_SaIhEET0_T_S3_S2_RT1_>
 8000c5a:	62f8      	str	r0, [r7, #44]	; 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8000c5c:	f7ff ff5c 	bl	8000b18 <_ZNSt6vectorIhSaIhEE15_S_use_relocateEv>
 8000c60:	4603      	mov	r3, r0
 8000c62:	f083 0301 	eor.w	r3, r3, #1
 8000c66:	b2db      	uxtb	r3, r3
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d009      	beq.n	8000c80 <_ZNSt6vectorIhSaIhEE17_M_realloc_insertIJhEEEvN9__gnu_cxx17__normal_iteratorIPhS1_EEDpOT_+0x13c>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f7ff feaa 	bl	80009c8 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8000c74:	4603      	mov	r3, r0
 8000c76:	461a      	mov	r2, r3
 8000c78:	6a39      	ldr	r1, [r7, #32]
 8000c7a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000c7c:	f7ff feaf 	bl	80009de <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 8000c80:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	689a      	ldr	r2, [r3, #8]
 8000c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c88:	1ad3      	subs	r3, r2, r3
      _M_deallocate(__old_start,
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000c8e:	f7ff fe88 	bl	80009a2 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
      this->_M_impl._M_start = __new_start;
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	69ba      	ldr	r2, [r7, #24]
 8000c96:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000c9c:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8000c9e:	69ba      	ldr	r2, [r7, #24]
 8000ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ca2:	441a      	add	r2, r3
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	609a      	str	r2, [r3, #8]
    }
 8000ca8:	bf00      	nop
 8000caa:	3730      	adds	r7, #48	; 0x30
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bdb0      	pop	{r4, r5, r7, pc}
 8000cb0:	0801c3b0 	.word	0x0801c3b0

08000cb4 <_ZN9__gnu_cxx13new_allocatorIhE10deallocateEPhj>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	60f8      	str	r0, [r7, #12]
 8000cbc:	60b9      	str	r1, [r7, #8]
 8000cbe:	607a      	str	r2, [r7, #4]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
 8000cc0:	6879      	ldr	r1, [r7, #4]
 8000cc2:	68b8      	ldr	r0, [r7, #8]
 8000cc4:	f019 feb8 	bl	801aa38 <_ZdlPvj>
#if __cpp_sized_deallocation
			  , __t * sizeof(_Tp)
#endif
			 );
      }
 8000cc8:	bf00      	nop
 8000cca:	3710      	adds	r7, #16
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <_ZNSt12_Destroy_auxILb1EE9__destroyIPhEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
 8000cd8:	6039      	str	r1, [r7, #0]
 8000cda:	bf00      	nop
 8000cdc:	370c      	adds	r7, #12
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr

08000ce6 <_ZN9__gnu_cxx13new_allocatorIhE9constructIhJhEEEvPT_DpOT0_>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 8000ce6:	b590      	push	{r4, r7, lr}
 8000ce8:	b085      	sub	sp, #20
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	60f8      	str	r0, [r7, #12]
 8000cee:	60b9      	str	r1, [r7, #8]
 8000cf0:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8000cf2:	6878      	ldr	r0, [r7, #4]
 8000cf4:	f7ff fee1 	bl	8000aba <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	781c      	ldrb	r4, [r3, #0]
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	4619      	mov	r1, r3
 8000d00:	2001      	movs	r0, #1
 8000d02:	f7ff fcfb 	bl	80006fc <_ZnwjPv>
 8000d06:	4603      	mov	r3, r0
 8000d08:	4622      	mov	r2, r4
 8000d0a:	701a      	strb	r2, [r3, #0]
 8000d0c:	bf00      	nop
 8000d0e:	3714      	adds	r7, #20
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd90      	pop	{r4, r7, pc}

08000d14 <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	601a      	str	r2, [r3, #0]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4618      	mov	r0, r3
 8000d2a:	370c      	adds	r7, #12
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr

08000d34 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>:
      { return _M_insert_rval(__position, std::move(__v)); }
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
 8000d34:	b590      	push	{r4, r7, lr}
 8000d36:	b087      	sub	sp, #28
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	60f8      	str	r0, [r7, #12]
 8000d3c:	60b9      	str	r1, [r7, #8]
 8000d3e:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 8000d40:	68f8      	ldr	r0, [r7, #12]
 8000d42:	f000 f8ae 	bl	8000ea2 <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 8000d46:	4604      	mov	r4, r0
 8000d48:	68f8      	ldr	r0, [r7, #12]
 8000d4a:	f000 f8bb 	bl	8000ec4 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	1ae2      	subs	r2, r4, r3
 8000d52:	68bb      	ldr	r3, [r7, #8]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	bf34      	ite	cc
 8000d58:	2301      	movcc	r3, #1
 8000d5a:	2300      	movcs	r3, #0
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d002      	beq.n	8000d68 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8000d62:	6878      	ldr	r0, [r7, #4]
 8000d64:	f019 fe7e 	bl	801aa64 <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 8000d68:	68f8      	ldr	r0, [r7, #12]
 8000d6a:	f000 f8ab 	bl	8000ec4 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8000d6e:	4604      	mov	r4, r0
 8000d70:	68f8      	ldr	r0, [r7, #12]
 8000d72:	f000 f8a7 	bl	8000ec4 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8000d76:	4603      	mov	r3, r0
 8000d78:	613b      	str	r3, [r7, #16]
 8000d7a:	f107 0208 	add.w	r2, r7, #8
 8000d7e:	f107 0310 	add.w	r3, r7, #16
 8000d82:	4611      	mov	r1, r2
 8000d84:	4618      	mov	r0, r3
 8000d86:	f000 f8ac 	bl	8000ee2 <_ZSt3maxIjERKT_S2_S2_>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4423      	add	r3, r4
 8000d90:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8000d92:	68f8      	ldr	r0, [r7, #12]
 8000d94:	f000 f896 	bl	8000ec4 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8000d98:	4602      	mov	r2, r0
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d306      	bcc.n	8000dae <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x7a>
 8000da0:	68f8      	ldr	r0, [r7, #12]
 8000da2:	f000 f87e 	bl	8000ea2 <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 8000da6:	4602      	mov	r2, r0
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d904      	bls.n	8000db8 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x84>
 8000dae:	68f8      	ldr	r0, [r7, #12]
 8000db0:	f000 f877 	bl	8000ea2 <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 8000db4:	4603      	mov	r3, r0
 8000db6:	e000      	b.n	8000dba <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x86>
 8000db8:	697b      	ldr	r3, [r7, #20]
      }
 8000dba:	4618      	mov	r0, r3
 8000dbc:	371c      	adds	r7, #28
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd90      	pop	{r4, r7, pc}

08000dc2 <_ZNSt6vectorIhSaIhEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b084      	sub	sp, #16
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8000dca:	687a      	ldr	r2, [r7, #4]
 8000dcc:	f107 030c 	add.w	r3, r7, #12
 8000dd0:	4611      	mov	r1, r2
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f7ff ff9e 	bl	8000d14 <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3710      	adds	r7, #16
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <_ZN9__gnu_cxxmiIPhSt6vectorIhSaIhEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8000de2:	b590      	push	{r4, r7, lr}
 8000de4:	b083      	sub	sp, #12
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	6078      	str	r0, [r7, #4]
 8000dea:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8000dec:	6878      	ldr	r0, [r7, #4]
 8000dee:	f000 f834 	bl	8000e5a <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 8000df2:	4603      	mov	r3, r0
 8000df4:	681c      	ldr	r4, [r3, #0]
 8000df6:	6838      	ldr	r0, [r7, #0]
 8000df8:	f000 f82f 	bl	8000e5a <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	1ae3      	subs	r3, r4, r3
 8000e02:	4618      	mov	r0, r3
 8000e04:	370c      	adds	r7, #12
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd90      	pop	{r4, r7, pc}

08000e0a <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b082      	sub	sp, #8
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	6078      	str	r0, [r7, #4]
 8000e12:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d006      	beq.n	8000e28 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj+0x1e>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6839      	ldr	r1, [r7, #0]
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f000 f873 	bl	8000f0a <_ZNSt16allocator_traitsISaIhEE8allocateERS0_j>
 8000e24:	4603      	mov	r3, r0
 8000e26:	e000      	b.n	8000e2a <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj+0x20>
 8000e28:	2300      	movs	r3, #0
      }
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <_ZNSt6vectorIhSaIhEE11_S_relocateEPhS2_S2_RS0_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8000e32:	b590      	push	{r4, r7, lr}
 8000e34:	b087      	sub	sp, #28
 8000e36:	af02      	add	r7, sp, #8
 8000e38:	60f8      	str	r0, [r7, #12]
 8000e3a:	60b9      	str	r1, [r7, #8]
 8000e3c:	607a      	str	r2, [r7, #4]
 8000e3e:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8000e40:	f88d 4000 	strb.w	r4, [sp]
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	687a      	ldr	r2, [r7, #4]
 8000e48:	68b9      	ldr	r1, [r7, #8]
 8000e4a:	68f8      	ldr	r0, [r7, #12]
 8000e4c:	f000 f86c 	bl	8000f28 <_ZNSt6vectorIhSaIhEE14_S_do_relocateEPhS2_S2_RS0_St17integral_constantIbLb1EE>
 8000e50:	4603      	mov	r3, r0
      }
 8000e52:	4618      	mov	r0, r3
 8000e54:	3714      	adds	r7, #20
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd90      	pop	{r4, r7, pc}

08000e5a <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8000e5a:	b480      	push	{r7}
 8000e5c:	b083      	sub	sp, #12
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4618      	mov	r0, r3
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <_ZSt34__uninitialized_move_if_noexcept_aIPhS0_SaIhEET0_T_S3_S2_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8000e70:	b590      	push	{r4, r7, lr}
 8000e72:	b085      	sub	sp, #20
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	60f8      	str	r0, [r7, #12]
 8000e78:	60b9      	str	r1, [r7, #8]
 8000e7a:	607a      	str	r2, [r7, #4]
 8000e7c:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8000e7e:	68f8      	ldr	r0, [r7, #12]
 8000e80:	f000 f864 	bl	8000f4c <_ZSt32__make_move_if_noexcept_iteratorIhSt13move_iteratorIPhEET0_PT_>
 8000e84:	4604      	mov	r4, r0
 8000e86:	68b8      	ldr	r0, [r7, #8]
 8000e88:	f000 f860 	bl	8000f4c <_ZSt32__make_move_if_noexcept_iteratorIhSt13move_iteratorIPhEET0_PT_>
 8000e8c:	4601      	mov	r1, r0
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	687a      	ldr	r2, [r7, #4]
 8000e92:	4620      	mov	r0, r4
 8000e94:	f000 f869 	bl	8000f6a <_ZSt22__uninitialized_copy_aISt13move_iteratorIPhES1_hET0_T_S4_S3_RSaIT1_E>
 8000e98:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3714      	adds	r7, #20
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd90      	pop	{r4, r7, pc}

08000ea2 <_ZNKSt6vectorIhSaIhEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b082      	sub	sp, #8
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4618      	mov	r0, r3
 8000eae:	f000 f887 	bl	8000fc0 <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f000 f869 	bl	8000f8c <_ZNSt6vectorIhSaIhEE11_S_max_sizeERKS0_>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <_ZNKSt6vectorIhSaIhEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	685a      	ldr	r2, [r3, #4]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	370c      	adds	r7, #12
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr

08000ee2 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8000ee2:	b480      	push	{r7}
 8000ee4:	b083      	sub	sp, #12
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
 8000eea:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d201      	bcs.n	8000efc <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	e000      	b.n	8000efe <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8000efc:	687b      	ldr	r3, [r7, #4]
    }
 8000efe:	4618      	mov	r0, r3
 8000f00:	370c      	adds	r7, #12
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr

08000f0a <_ZNSt16allocator_traitsISaIhEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b082      	sub	sp, #8
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6078      	str	r0, [r7, #4]
 8000f12:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8000f14:	2200      	movs	r2, #0
 8000f16:	6839      	ldr	r1, [r7, #0]
 8000f18:	6878      	ldr	r0, [r7, #4]
 8000f1a:	f000 f868 	bl	8000fee <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	4618      	mov	r0, r3
 8000f22:	3708      	adds	r7, #8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <_ZNSt6vectorIhSaIhEE14_S_do_relocateEPhS2_S2_RS0_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	60b9      	str	r1, [r7, #8]
 8000f32:	607a      	str	r2, [r7, #4]
 8000f34:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	687a      	ldr	r2, [r7, #4]
 8000f3a:	68b9      	ldr	r1, [r7, #8]
 8000f3c:	68f8      	ldr	r0, [r7, #12]
 8000f3e:	f000 f877 	bl	8001030 <_ZSt12__relocate_aIPhS0_SaIhEET0_T_S3_S2_RT1_>
 8000f42:	4603      	mov	r3, r0
      }
 8000f44:	4618      	mov	r0, r3
 8000f46:	3710      	adds	r7, #16
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <_ZSt32__make_move_if_noexcept_iteratorIhSt13move_iteratorIPhEET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8000f54:	f107 030c 	add.w	r3, r7, #12
 8000f58:	6879      	ldr	r1, [r7, #4]
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f000 f885 	bl	800106a <_ZNSt13move_iteratorIPhEC1ES0_>
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	4618      	mov	r0, r3
 8000f64:	3710      	adds	r7, #16
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <_ZSt22__uninitialized_copy_aISt13move_iteratorIPhES1_hET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	b084      	sub	sp, #16
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	60f8      	str	r0, [r7, #12]
 8000f72:	60b9      	str	r1, [r7, #8]
 8000f74:	607a      	str	r2, [r7, #4]
 8000f76:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8000f78:	687a      	ldr	r2, [r7, #4]
 8000f7a:	68b9      	ldr	r1, [r7, #8]
 8000f7c:	68f8      	ldr	r0, [r7, #12]
 8000f7e:	f000 f886 	bl	800108e <_ZSt18uninitialized_copyISt13move_iteratorIPhES1_ET0_T_S4_S3_>
 8000f82:	4603      	mov	r3, r0
 8000f84:	4618      	mov	r0, r3
 8000f86:	3710      	adds	r7, #16
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <_ZNSt6vectorIhSaIhEE11_S_max_sizeERKS0_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 8000f94:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8000f98:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f000 f889 	bl	80010b2 <_ZNSt16allocator_traitsISaIhEE8max_sizeERKS0_>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8000fa4:	f107 0208 	add.w	r2, r7, #8
 8000fa8:	f107 030c 	add.w	r3, r7, #12
 8000fac:	4611      	mov	r1, r2
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f000 f88b 	bl	80010ca <_ZSt3minIjERKT_S2_S2_>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	681b      	ldr	r3, [r3, #0]
      }
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3710      	adds	r7, #16
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	4618      	mov	r0, r3
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr

08000fd6 <_ZNK9__gnu_cxx13new_allocatorIhE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8000fd6:	b480      	push	{r7}
 8000fd8:	b083      	sub	sp, #12
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8000fde:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr

08000fee <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b084      	sub	sp, #16
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	60f8      	str	r0, [r7, #12]
 8000ff6:	60b9      	str	r1, [r7, #8]
 8000ff8:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8000ffa:	68f8      	ldr	r0, [r7, #12]
 8000ffc:	f7ff ffeb 	bl	8000fd6 <_ZNK9__gnu_cxx13new_allocatorIhE11_M_max_sizeEv>
 8001000:	4602      	mov	r2, r0
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	4293      	cmp	r3, r2
 8001006:	bf8c      	ite	hi
 8001008:	2301      	movhi	r3, #1
 800100a:	2300      	movls	r3, #0
 800100c:	b2db      	uxtb	r3, r3
 800100e:	2b00      	cmp	r3, #0
 8001010:	bf14      	ite	ne
 8001012:	2301      	movne	r3, #1
 8001014:	2300      	moveq	r3, #0
 8001016:	b2db      	uxtb	r3, r3
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv+0x32>
	    std::__throw_bad_alloc();
 800101c:	f019 fd1f 	bl	801aa5e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8001020:	68b8      	ldr	r0, [r7, #8]
 8001022:	f019 fd0b 	bl	801aa3c <_Znwj>
 8001026:	4603      	mov	r3, r0
      }
 8001028:	4618      	mov	r0, r3
 800102a:	3710      	adds	r7, #16
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}

08001030 <_ZSt12__relocate_aIPhS0_SaIhEET0_T_S3_S2_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8001030:	b5b0      	push	{r4, r5, r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
 800103c:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 800103e:	68f8      	ldr	r0, [r7, #12]
 8001040:	f000 f857 	bl	80010f2 <_ZSt12__niter_baseIPhET_S1_>
 8001044:	4604      	mov	r4, r0
 8001046:	68b8      	ldr	r0, [r7, #8]
 8001048:	f000 f853 	bl	80010f2 <_ZSt12__niter_baseIPhET_S1_>
 800104c:	4605      	mov	r5, r0
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f000 f84f 	bl	80010f2 <_ZSt12__niter_baseIPhET_S1_>
 8001054:	4602      	mov	r2, r0
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	4629      	mov	r1, r5
 800105a:	4620      	mov	r0, r4
 800105c:	f000 f854 	bl	8001108 <_ZSt14__relocate_a_1IhhENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>
 8001060:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 8001062:	4618      	mov	r0, r3
 8001064:	3710      	adds	r7, #16
 8001066:	46bd      	mov	sp, r7
 8001068:	bdb0      	pop	{r4, r5, r7, pc}

0800106a <_ZNSt13move_iteratorIPhEC1ES0_>:
      move_iterator(iterator_type __i)
 800106a:	b580      	push	{r7, lr}
 800106c:	b082      	sub	sp, #8
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
 8001072:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 8001074:	463b      	mov	r3, r7
 8001076:	4618      	mov	r0, r3
 8001078:	f000 f861 	bl	800113e <_ZSt4moveIRPhEONSt16remove_referenceIT_E4typeEOS3_>
 800107c:	4603      	mov	r3, r0
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	4618      	mov	r0, r3
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <_ZSt18uninitialized_copyISt13move_iteratorIPhES1_ET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800108e:	b580      	push	{r7, lr}
 8001090:	b086      	sub	sp, #24
 8001092:	af00      	add	r7, sp, #0
 8001094:	60f8      	str	r0, [r7, #12]
 8001096:	60b9      	str	r1, [r7, #8]
 8001098:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800109a:	2301      	movs	r3, #1
 800109c:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800109e:	687a      	ldr	r2, [r7, #4]
 80010a0:	68b9      	ldr	r1, [r7, #8]
 80010a2:	68f8      	ldr	r0, [r7, #12]
 80010a4:	f000 f856 	bl	8001154 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPhES3_EET0_T_S6_S5_>
 80010a8:	4603      	mov	r3, r0
    }
 80010aa:	4618      	mov	r0, r3
 80010ac:	3718      	adds	r7, #24
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <_ZNSt16allocator_traitsISaIhEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b082      	sub	sp, #8
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f000 f85a 	bl	8001174 <_ZNK9__gnu_cxx13new_allocatorIhE8max_sizeEv>
 80010c0:	4603      	mov	r3, r0
      }
 80010c2:	4618      	mov	r0, r3
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 80010ca:	b480      	push	{r7}
 80010cc:	b083      	sub	sp, #12
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	6078      	str	r0, [r7, #4]
 80010d2:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	429a      	cmp	r2, r3
 80010de:	d201      	bcs.n	80010e4 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	e000      	b.n	80010e6 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 80010e4:	687b      	ldr	r3, [r7, #4]
    }
 80010e6:	4618      	mov	r0, r3
 80010e8:	370c      	adds	r7, #12
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr

080010f2 <_ZSt12__niter_baseIPhET_S1_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the __normal_iterator wrapper. See copy, fill, ...
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __niter_base(_Iterator __it)
 80010f2:	b480      	push	{r7}
 80010f4:	b083      	sub	sp, #12
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it; }
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4618      	mov	r0, r3
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr

08001108 <_ZSt14__relocate_a_1IhhENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8001108:	b580      	push	{r7, lr}
 800110a:	b086      	sub	sp, #24
 800110c:	af00      	add	r7, sp, #0
 800110e:	60f8      	str	r0, [r7, #12]
 8001110:	60b9      	str	r1, [r7, #8]
 8001112:	607a      	str	r2, [r7, #4]
 8001114:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8001116:	68ba      	ldr	r2, [r7, #8]
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	2b00      	cmp	r3, #0
 8001122:	dd05      	ble.n	8001130 <_ZSt14__relocate_a_1IhhENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E+0x28>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	461a      	mov	r2, r3
 8001128:	68f9      	ldr	r1, [r7, #12]
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f01a f910 	bl	801b350 <memmove>
      return __result + __count;
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	687a      	ldr	r2, [r7, #4]
 8001134:	4413      	add	r3, r2
    }
 8001136:	4618      	mov	r0, r3
 8001138:	3718      	adds	r7, #24
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <_ZSt4moveIRPhEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 800113e:	b480      	push	{r7}
 8001140:	b083      	sub	sp, #12
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4618      	mov	r0, r3
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr

08001154 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPhES3_EET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	60f8      	str	r0, [r7, #12]
 800115c:	60b9      	str	r1, [r7, #8]
 800115e:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8001160:	687a      	ldr	r2, [r7, #4]
 8001162:	68b9      	ldr	r1, [r7, #8]
 8001164:	68f8      	ldr	r0, [r7, #12]
 8001166:	f000 f811 	bl	800118c <_ZSt4copyISt13move_iteratorIPhES1_ET0_T_S4_S3_>
 800116a:	4603      	mov	r3, r0
 800116c:	4618      	mov	r0, r3
 800116e:	3710      	adds	r7, #16
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}

08001174 <_ZNK9__gnu_cxx13new_allocatorIhE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f7ff ff2a 	bl	8000fd6 <_ZNK9__gnu_cxx13new_allocatorIhE11_M_max_sizeEv>
 8001182:	4603      	mov	r3, r0
 8001184:	4618      	mov	r0, r3
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}

0800118c <_ZSt4copyISt13move_iteratorIPhES1_ET0_T_S4_S3_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 800118c:	b590      	push	{r4, r7, lr}
 800118e:	b085      	sub	sp, #20
 8001190:	af00      	add	r7, sp, #0
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8001198:	68f8      	ldr	r0, [r7, #12]
 800119a:	f000 f80f 	bl	80011bc <_ZSt12__miter_baseIPhEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 800119e:	4604      	mov	r4, r0
 80011a0:	68b8      	ldr	r0, [r7, #8]
 80011a2:	f000 f80b 	bl	80011bc <_ZSt12__miter_baseIPhEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 80011a6:	4603      	mov	r3, r0
 80011a8:	687a      	ldr	r2, [r7, #4]
 80011aa:	4619      	mov	r1, r3
 80011ac:	4620      	mov	r0, r4
 80011ae:	f000 f816 	bl	80011de <_ZSt13__copy_move_aILb1EPhS0_ET1_T0_S2_S1_>
 80011b2:	4603      	mov	r3, r0
    }
 80011b4:	4618      	mov	r0, r3
 80011b6:	3714      	adds	r7, #20
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd90      	pop	{r4, r7, pc}

080011bc <_ZSt12__miter_baseIPhEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
    };

  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    auto
    __miter_base(move_iterator<_Iterator> __it)
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 80011c4:	1d3b      	adds	r3, r7, #4
 80011c6:	4618      	mov	r0, r3
 80011c8:	f000 f82c 	bl	8001224 <_ZNKSt13move_iteratorIPhE4baseEv>
 80011cc:	4603      	mov	r3, r0
 80011ce:	4618      	mov	r0, r3
 80011d0:	f000 f834 	bl	800123c <_ZSt12__miter_baseIPhET_S1_>
 80011d4:	4603      	mov	r3, r0
 80011d6:	4618      	mov	r0, r3
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <_ZSt13__copy_move_aILb1EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80011de:	b5b0      	push	{r4, r5, r7, lr}
 80011e0:	b084      	sub	sp, #16
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	60f8      	str	r0, [r7, #12]
 80011e6:	60b9      	str	r1, [r7, #8]
 80011e8:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80011ea:	68f8      	ldr	r0, [r7, #12]
 80011ec:	f7ff ff81 	bl	80010f2 <_ZSt12__niter_baseIPhET_S1_>
 80011f0:	4604      	mov	r4, r0
 80011f2:	68b8      	ldr	r0, [r7, #8]
 80011f4:	f7ff ff7d 	bl	80010f2 <_ZSt12__niter_baseIPhET_S1_>
 80011f8:	4605      	mov	r5, r0
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff ff78 	bl	80010f2 <_ZSt12__niter_baseIPhET_S1_>
 8001202:	4603      	mov	r3, r0
 8001204:	461a      	mov	r2, r3
 8001206:	4629      	mov	r1, r5
 8001208:	4620      	mov	r0, r4
 800120a:	f000 f822 	bl	8001252 <_ZSt14__copy_move_a1ILb1EPhS0_ET1_T0_S2_S1_>
 800120e:	4602      	mov	r2, r0
 8001210:	1d3b      	adds	r3, r7, #4
 8001212:	4611      	mov	r1, r2
 8001214:	4618      	mov	r0, r3
 8001216:	f000 f82c 	bl	8001272 <_ZSt12__niter_wrapIPhET_RKS1_S1_>
 800121a:	4603      	mov	r3, r0
    }
 800121c:	4618      	mov	r0, r3
 800121e:	3710      	adds	r7, #16
 8001220:	46bd      	mov	sp, r7
 8001222:	bdb0      	pop	{r4, r5, r7, pc}

08001224 <_ZNKSt13move_iteratorIPhE4baseEv>:
      base() const
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4618      	mov	r0, r3
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <_ZSt12__miter_baseIPhET_S1_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
    { return __it; }
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	4618      	mov	r0, r3
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr

08001252 <_ZSt14__copy_move_a1ILb1EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8001252:	b580      	push	{r7, lr}
 8001254:	b084      	sub	sp, #16
 8001256:	af00      	add	r7, sp, #0
 8001258:	60f8      	str	r0, [r7, #12]
 800125a:	60b9      	str	r1, [r7, #8]
 800125c:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	68b9      	ldr	r1, [r7, #8]
 8001262:	68f8      	ldr	r0, [r7, #12]
 8001264:	f000 f811 	bl	800128a <_ZSt14__copy_move_a2ILb1EPhS0_ET1_T0_S2_S1_>
 8001268:	4603      	mov	r3, r0
 800126a:	4618      	mov	r0, r3
 800126c:	3710      	adds	r7, #16
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <_ZSt12__niter_wrapIPhET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8001272:	b480      	push	{r7}
 8001274:	b083      	sub	sp, #12
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
 800127a:	6039      	str	r1, [r7, #0]
    { return __res; }
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	4618      	mov	r0, r3
 8001280:	370c      	adds	r7, #12
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr

0800128a <_ZSt14__copy_move_a2ILb1EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800128a:	b580      	push	{r7, lr}
 800128c:	b084      	sub	sp, #16
 800128e:	af00      	add	r7, sp, #0
 8001290:	60f8      	str	r0, [r7, #12]
 8001292:	60b9      	str	r1, [r7, #8]
 8001294:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8001296:	687a      	ldr	r2, [r7, #4]
 8001298:	68b9      	ldr	r1, [r7, #8]
 800129a:	68f8      	ldr	r0, [r7, #12]
 800129c:	f000 f805 	bl	80012aa <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 80012a0:	4603      	mov	r3, r0
    }
 80012a2:	4618      	mov	r0, r3
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b086      	sub	sp, #24
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	60f8      	str	r0, [r7, #12]
 80012b2:	60b9      	str	r1, [r7, #8]
 80012b4:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80012b6:	68ba      	ldr	r2, [r7, #8]
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	1ad3      	subs	r3, r2, r3
 80012bc:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d005      	beq.n	80012d0 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_+0x26>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	461a      	mov	r2, r3
 80012c8:	68f9      	ldr	r1, [r7, #12]
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f01a f840 	bl	801b350 <memmove>
	  return __result + _Num;
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	687a      	ldr	r2, [r7, #4]
 80012d4:	4413      	add	r3, r2
	}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3718      	adds	r7, #24
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}

080012de <_ZN10PinControlC1Ev>:

// ==================================================
// PinControl
// ==================================================

PinControl::PinControl() {
 80012de:	b480      	push	{r7}
 80012e0:	b083      	sub	sp, #12
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]

}
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4618      	mov	r0, r3
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <_ZN10PinControlC1EP12GPIO_TypeDeft>:

PinControl::PinControl(GPIO_TypeDef* port, uint16_t pin){
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	4613      	mov	r3, r2
 8001300:	80fb      	strh	r3, [r7, #6]
  this->port = port;
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	68ba      	ldr	r2, [r7, #8]
 8001306:	601a      	str	r2, [r3, #0]
  this->pin = pin;
 8001308:	88fb      	ldrh	r3, [r7, #6]
 800130a:	b2da      	uxtb	r2, r3
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	711a      	strb	r2, [r3, #4]
  //tolta la linea per impostare il pin ad output perché STM32 lo fa da sé, se settato correttamente
  setLimits(0.0, 0.0);
 8001310:	eddf 0a05 	vldr	s1, [pc, #20]	; 8001328 <_ZN10PinControlC1EP12GPIO_TypeDeft+0x34>
 8001314:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8001328 <_ZN10PinControlC1EP12GPIO_TypeDeft+0x34>
 8001318:	68f8      	ldr	r0, [r7, #12]
 800131a:	f000 f807 	bl	800132c <_ZN10PinControl9setLimitsEff>
}
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	4618      	mov	r0, r3
 8001322:	3710      	adds	r7, #16
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	00000000 	.word	0x00000000

0800132c <_ZN10PinControl9setLimitsEff>:
  this->port = port;
  this->pin = pin;
  setLimits(v1, v2);
}

void PinControl::setLimits(float v1, float v2){
 800132c:	b480      	push	{r7}
 800132e:	b085      	sub	sp, #20
 8001330:	af00      	add	r7, sp, #0
 8001332:	60f8      	str	r0, [r7, #12]
 8001334:	ed87 0a02 	vstr	s0, [r7, #8]
 8001338:	edc7 0a01 	vstr	s1, [r7, #4]
  this->v1 = v1;
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	68ba      	ldr	r2, [r7, #8]
 8001340:	609a      	str	r2, [r3, #8]
  this->v2 = v2;
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	687a      	ldr	r2, [r7, #4]
 8001346:	60da      	str	r2, [r3, #12]
}
 8001348:	bf00      	nop
 800134a:	3714      	adds	r7, #20
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <_ZN10PinMeasureC1Ev>:

// ==================================================
// PinMeasure
// ==================================================

PinMeasure::PinMeasure() {
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]

}
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	4618      	mov	r0, r3
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
	...

0800136c <_ZN10PinMeasureC1EP12GPIO_TypeDeft>:

PinMeasure::PinMeasure(GPIO_TypeDef* port, uint16_t pin){
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	60f8      	str	r0, [r7, #12]
 8001374:	60b9      	str	r1, [r7, #8]
 8001376:	4613      	mov	r3, r2
 8001378:	80fb      	strh	r3, [r7, #6]
  this->port = port;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	68ba      	ldr	r2, [r7, #8]
 800137e:	601a      	str	r2, [r3, #0]
  this->pin = pin;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	88fa      	ldrh	r2, [r7, #6]
 8001384:	809a      	strh	r2, [r3, #4]
  setLimits(0.0, 0.0);
 8001386:	eddf 0a06 	vldr	s1, [pc, #24]	; 80013a0 <_ZN10PinMeasureC1EP12GPIO_TypeDeft+0x34>
 800138a:	ed9f 0a05 	vldr	s0, [pc, #20]	; 80013a0 <_ZN10PinMeasureC1EP12GPIO_TypeDeft+0x34>
 800138e:	68f8      	ldr	r0, [r7, #12]
 8001390:	f000 f808 	bl	80013a4 <_ZN10PinMeasure9setLimitsEff>
}
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	4618      	mov	r0, r3
 8001398:	3710      	adds	r7, #16
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	00000000 	.word	0x00000000

080013a4 <_ZN10PinMeasure9setLimitsEff>:
  this->port = port;
  this->pin = pin;
  setLimits(v1, v2);
}

void PinMeasure::setLimits(float v1, float v2){
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	60f8      	str	r0, [r7, #12]
 80013ac:	ed87 0a02 	vstr	s0, [r7, #8]
 80013b0:	edc7 0a01 	vstr	s1, [r7, #4]
  this->v1 = v1;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	68ba      	ldr	r2, [r7, #8]
 80013b8:	609a      	str	r2, [r3, #8]
  this->v2 = v2;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	60da      	str	r2, [r3, #12]
}
 80013c0:	bf00      	nop
 80013c2:	3714      	adds	r7, #20
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <_ZN10PinMeasure5stateEv>:

bool PinMeasure::state(){
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  return HAL_GPIO_ReadPin(port, pin);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	889b      	ldrh	r3, [r3, #4]
 80013dc:	4619      	mov	r1, r3
 80013de:	4610      	mov	r0, r2
 80013e0:	f003 fe32 	bl	8005048 <HAL_GPIO_ReadPin>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	bf14      	ite	ne
 80013ea:	2301      	movne	r3, #1
 80013ec:	2300      	moveq	r3, #0
 80013ee:	b2db      	uxtb	r3, r3
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3708      	adds	r7, #8
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <_ZN5MotorC1ER10PinControlS1_P17TIM_HandleTypeDefhR10PinMeasure>:

// ==================================================
// Motor
// ==================================================

Motor::Motor(PinControl &INA, PinControl &INB,
 80013f8:	b480      	push	{r7}
 80013fa:	b085      	sub	sp, #20
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	60f8      	str	r0, [r7, #12]
 8001400:	60b9      	str	r1, [r7, #8]
 8001402:	607a      	str	r2, [r7, #4]
 8001404:	603b      	str	r3, [r7, #0]
			 TIM_HandleTypeDef* htimPWM, uint8_t CCRx,
			 PinMeasure &END)
  : pin_INA(INA), pin_INB(INB), htimPWM(htimPWM), CCRx(CCRx), pin_END(END) {}
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	68ba      	ldr	r2, [r7, #8]
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	687a      	ldr	r2, [r7, #4]
 8001410:	605a      	str	r2, [r3, #4]
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	683a      	ldr	r2, [r7, #0]
 8001416:	609a      	str	r2, [r3, #8]
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	7e3a      	ldrb	r2, [r7, #24]
 800141c:	731a      	strb	r2, [r3, #12]
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	69fa      	ldr	r2, [r7, #28]
 8001422:	615a      	str	r2, [r3, #20]
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	2200      	movs	r2, #0
 8001428:	761a      	strb	r2, [r3, #24]
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	4618      	mov	r0, r3
 800142e:	3714      	adds	r7, #20
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <_ZN5MotorC1ER10PinControlS1_P17TIM_HandleTypeDefhS3_R10PinMeasure>:

Motor::Motor(PinControl &INA, PinControl &INB,
 8001438:	b480      	push	{r7}
 800143a:	b085      	sub	sp, #20
 800143c:	af00      	add	r7, sp, #0
 800143e:	60f8      	str	r0, [r7, #12]
 8001440:	60b9      	str	r1, [r7, #8]
 8001442:	607a      	str	r2, [r7, #4]
 8001444:	603b      	str	r3, [r7, #0]
			 TIM_HandleTypeDef* htimPWM, uint8_t CCRx,
			 TIM_HandleTypeDef* htimENC, PinMeasure &END)
  : pin_INA(INA), pin_INB(INB), htimPWM(htimPWM), CCRx(CCRx), htimENC(htimENC), pin_END(END) {}
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	68ba      	ldr	r2, [r7, #8]
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	605a      	str	r2, [r3, #4]
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	683a      	ldr	r2, [r7, #0]
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	7e3a      	ldrb	r2, [r7, #24]
 800145c:	731a      	strb	r2, [r3, #12]
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	69fa      	ldr	r2, [r7, #28]
 8001462:	611a      	str	r2, [r3, #16]
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	6a3a      	ldr	r2, [r7, #32]
 8001468:	615a      	str	r2, [r3, #20]
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	2200      	movs	r2, #0
 800146e:	761a      	strb	r2, [r3, #24]
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	4618      	mov	r0, r3
 8001474:	3714      	adds	r7, #20
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr

0800147e <_ZN5MotorD1Ev>:

Motor::~Motor() {}
 800147e:	b480      	push	{r7}
 8001480:	b083      	sub	sp, #12
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4618      	mov	r0, r3
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <_ZN5Motor10getEncoderEv>:

/*void Motor::invertEncoder(bool invert){
  this->encoder_invert = invert;
}*/

long Motor::getEncoder(){
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  return htimENC->Instance->CNT;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	691b      	ldr	r3, [r3, #16]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <_ZN5Motor11isInEndStopEv>:
      break;

  }
}

bool Motor::isInEndStop(){
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  return pin_END.state();
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	695b      	ldr	r3, [r3, #20]
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff ff85 	bl	80013cc <_ZN10PinMeasure5stateEv>
 80014c2:	4603      	mov	r3, r0
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3708      	adds	r7, #8
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}

080014cc <_ZN5RobotC1ER10PinControlS1_mhPP5MotorPf>:

// ==================================================
// Robot
// ==================================================

Robot::Robot(PinControl &enable, PinControl &toggle, unsigned long ts_ms, uint8_t size, Motor **motors, float *encs_div)
 80014cc:	b590      	push	{r4, r7, lr}
 80014ce:	b087      	sub	sp, #28
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	60f8      	str	r0, [r7, #12]
 80014d4:	60b9      	str	r1, [r7, #8]
 80014d6:	607a      	str	r2, [r7, #4]
 80014d8:	603b      	str	r3, [r7, #0]
  : pin_enable(enable), pin_toggle(toggle) {
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	68ba      	ldr	r2, [r7, #8]
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	687a      	ldr	r2, [r7, #4]
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	331c      	adds	r3, #28
 80014ea:	4618      	mov	r0, r3
 80014ec:	f002 fe6e 	bl	80041cc <_ZN5TimerC1Ev>
  this->ts = ts_ms;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	683a      	ldr	r2, [r7, #0]
 80014f4:	609a      	str	r2, [r3, #8]
  this->motors = 		(Motor**)	malloc(size * sizeof(Motor*));
 80014f6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	4618      	mov	r0, r3
 80014fe:	f019 fbc9 	bl	801ac94 <malloc>
 8001502:	4603      	mov	r3, r0
 8001504:	461a      	mov	r2, r3
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	611a      	str	r2, [r3, #16]
  this->pids = 			(PID*)		malloc(size * sizeof(PID));
 800150a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800150e:	4613      	mov	r3, r2
 8001510:	00db      	lsls	r3, r3, #3
 8001512:	1a9b      	subs	r3, r3, r2
 8001514:	00db      	lsls	r3, r3, #3
 8001516:	4618      	mov	r0, r3
 8001518:	f019 fbbc 	bl	801ac94 <malloc>
 800151c:	4603      	mov	r3, r0
 800151e:	461a      	mov	r2, r3
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	615a      	str	r2, [r3, #20]
  this->switches = 		(bool*) 	malloc(size * sizeof(bool));
 8001524:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001528:	4618      	mov	r0, r3
 800152a:	f019 fbb3 	bl	801ac94 <malloc>
 800152e:	4603      	mov	r3, r0
 8001530:	461a      	mov	r2, r3
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	625a      	str	r2, [r3, #36]	; 0x24
  this->motors_pwm = 	(int16_t*) 	malloc(size * sizeof(int16_t));
 8001536:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800153a:	005b      	lsls	r3, r3, #1
 800153c:	4618      	mov	r0, r3
 800153e:	f019 fba9 	bl	801ac94 <malloc>
 8001542:	4603      	mov	r3, r0
 8001544:	461a      	mov	r2, r3
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	629a      	str	r2, [r3, #40]	; 0x28
  this->encoders_rcv = 	(long*)		malloc(size * sizeof(long));
 800154a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	4618      	mov	r0, r3
 8001552:	f019 fb9f 	bl	801ac94 <malloc>
 8001556:	4603      	mov	r3, r0
 8001558:	461a      	mov	r2, r3
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	631a      	str	r2, [r3, #48]	; 0x30
  this->encoders_snd = 	(long*) 	malloc(size * sizeof(long));
 800155e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	4618      	mov	r0, r3
 8001566:	f019 fb95 	bl	801ac94 <malloc>
 800156a:	4603      	mov	r3, r0
 800156c:	461a      	mov	r2, r3
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	62da      	str	r2, [r3, #44]	; 0x2c
  this->error_div = 	(float*) 	malloc(size * sizeof(float));
 8001572:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	4618      	mov	r0, r3
 800157a:	f019 fb8b 	bl	801ac94 <malloc>
 800157e:	4603      	mov	r3, r0
 8001580:	461a      	mov	r2, r3
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	635a      	str	r2, [r3, #52]	; 0x34

  this->size = size;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800158c:	731a      	strb	r2, [r3, #12]
  this->status = Status::Idle;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	2200      	movs	r2, #0
 8001592:	761a      	strb	r2, [r3, #24]

  for(int i = 0; i < size; i++){
 8001594:	2300      	movs	r3, #0
 8001596:	617b      	str	r3, [r7, #20]
 8001598:	e025      	b.n	80015e6 <_ZN5RobotC1ER10PinControlS1_mhPP5MotorPf+0x11a>
    this->switches[i] = false;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	4413      	add	r3, r2
 80015a2:	2200      	movs	r2, #0
 80015a4:	701a      	strb	r2, [r3, #0]
    this->motors_pwm[i] = 0;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	4413      	add	r3, r2
 80015b0:	2200      	movs	r2, #0
 80015b2:	801a      	strh	r2, [r3, #0]
    this->encoders_snd[i] = 0;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	4413      	add	r3, r2
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
    this->encoders_rcv[i] = 0;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	4413      	add	r3, r2
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
    this->error_div[i] = 0.0;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	4413      	add	r3, r2
 80015da:	f04f 0200 	mov.w	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
  for(int i = 0; i < size; i++){
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	3301      	adds	r3, #1
 80015e4:	617b      	str	r3, [r7, #20]
 80015e6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80015ea:	697a      	ldr	r2, [r7, #20]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	dbd4      	blt.n	800159a <_ZN5RobotC1ER10PinControlS1_mhPP5MotorPf+0xce>
  }

  this->snd_ctrl = new Communication::SNDctrl(size);
 80015f0:	2010      	movs	r0, #16
 80015f2:	f019 fa23 	bl	801aa3c <_Znwj>
 80015f6:	4603      	mov	r3, r0
 80015f8:	461c      	mov	r4, r3
 80015fa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80015fe:	4619      	mov	r1, r3
 8001600:	4620      	mov	r0, r4
 8001602:	f7ff f8e2 	bl	80007ca <_ZN13Communication7SNDctrlC1Eh>
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	639c      	str	r4, [r3, #56]	; 0x38
  this->rcv_ctrl = new Communication::RCVctrl(size);
 800160a:	2010      	movs	r0, #16
 800160c:	f019 fa16 	bl	801aa3c <_Znwj>
 8001610:	4603      	mov	r3, r0
 8001612:	461c      	mov	r4, r3
 8001614:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001618:	4619      	mov	r1, r3
 800161a:	4620      	mov	r0, r4
 800161c:	f7ff f8a0 	bl	8000760 <_ZN13Communication7RCVctrlC1Eh>
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	63dc      	str	r4, [r3, #60]	; 0x3c
  this->snd_setup = new Communication::SNDsetup();
 8001624:	2001      	movs	r0, #1
 8001626:	f019 fa09 	bl	801aa3c <_Znwj>
 800162a:	4603      	mov	r3, r0
 800162c:	461c      	mov	r4, r3
 800162e:	4620      	mov	r0, r4
 8001630:	f7ff f916 	bl	8000860 <_ZN13Communication8SNDsetupC1Ev>
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	641c      	str	r4, [r3, #64]	; 0x40
  this->rcv_setup = new Communication::RCVsetup();
 8001638:	201c      	movs	r0, #28
 800163a:	f019 f9ff 	bl	801aa3c <_Znwj>
 800163e:	4603      	mov	r3, r0
 8001640:	461c      	mov	r4, r3
 8001642:	4620      	mov	r0, r4
 8001644:	f7ff f8f6 	bl	8000834 <_ZN13Communication8RCVsetupC1Ev>
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	645c      	str	r4, [r3, #68]	; 0x44

  if(motors != NULL){
 800164c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800164e:	2b00      	cmp	r3, #0
 8001650:	d02c      	beq.n	80016ac <_ZN5RobotC1ER10PinControlS1_mhPP5MotorPf+0x1e0>
    for(int i = 0; i < size; i++){
 8001652:	2300      	movs	r3, #0
 8001654:	613b      	str	r3, [r7, #16]
 8001656:	e024      	b.n	80016a2 <_ZN5RobotC1ER10PinControlS1_mhPP5MotorPf+0x1d6>
      if(encs_div != NULL){
 8001658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800165a:	2b00      	cmp	r3, #0
 800165c:	d013      	beq.n	8001686 <_ZN5RobotC1ER10PinControlS1_mhPP5MotorPf+0x1ba>
        setMotor(i, motors[i], encs_div[i]);
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	b2d9      	uxtb	r1, r3
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001668:	4413      	add	r3, r2
 800166a:	6818      	ldr	r0, [r3, #0]
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001672:	4413      	add	r3, r2
 8001674:	edd3 7a00 	vldr	s15, [r3]
 8001678:	eeb0 0a67 	vmov.f32	s0, s15
 800167c:	4602      	mov	r2, r0
 800167e:	68f8      	ldr	r0, [r7, #12]
 8001680:	f000 f8bd 	bl	80017fe <_ZN5Robot8setMotorEhP5Motorf>
 8001684:	e00a      	b.n	800169c <_ZN5RobotC1ER10PinControlS1_mhPP5MotorPf+0x1d0>
      } else {
        setMotor(i, motors[i]);
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	b2d9      	uxtb	r1, r3
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001690:	4413      	add	r3, r2
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	461a      	mov	r2, r3
 8001696:	68f8      	ldr	r0, [r7, #12]
 8001698:	f000 f89d 	bl	80017d6 <_ZN5Robot8setMotorEhP5Motor>
    for(int i = 0; i < size; i++){
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	3301      	adds	r3, #1
 80016a0:	613b      	str	r3, [r7, #16]
 80016a2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80016a6:	693a      	ldr	r2, [r7, #16]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	dbd5      	blt.n	8001658 <_ZN5RobotC1ER10PinControlS1_mhPP5MotorPf+0x18c>
      }
    }
  }

  timer.setup(ts_ms);
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	331c      	adds	r3, #28
 80016b0:	6839      	ldr	r1, [r7, #0]
 80016b2:	4618      	mov	r0, r3
 80016b4:	f002 fd9b 	bl	80041ee <_ZN5Timer5setupEm>
  update();
 80016b8:	68f8      	ldr	r0, [r7, #12]
 80016ba:	f000 f991 	bl	80019e0 <_ZN5Robot6updateEv>
}
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	4618      	mov	r0, r3
 80016c2:	371c      	adds	r7, #28
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd90      	pop	{r4, r7, pc}

080016c8 <_ZN5RobotD1Ev>:
  : Robot(enable, toggle,ts_ms, size, motors, NULL) {}

Robot::Robot(PinControl &enable, PinControl &toggle, unsigned long ts_ms, uint8_t size)
  : Robot(enable, toggle,ts_ms, size, NULL, NULL) {}

Robot::~Robot() {
 80016c8:	b590      	push	{r4, r7, lr}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  free(this->motors);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	691b      	ldr	r3, [r3, #16]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f019 fae5 	bl	801aca4 <free>
  free(this->pids);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	695b      	ldr	r3, [r3, #20]
 80016de:	4618      	mov	r0, r3
 80016e0:	f019 fae0 	bl	801aca4 <free>
  free(this->switches);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e8:	4618      	mov	r0, r3
 80016ea:	f019 fadb 	bl	801aca4 <free>
  free(this->motors_pwm);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f2:	4618      	mov	r0, r3
 80016f4:	f019 fad6 	bl	801aca4 <free>
  free(this->encoders_rcv);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fc:	4618      	mov	r0, r3
 80016fe:	f019 fad1 	bl	801aca4 <free>
  free(this->encoders_snd);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001706:	4618      	mov	r0, r3
 8001708:	f019 facc 	bl	801aca4 <free>
  free(this->error_div);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001710:	4618      	mov	r0, r3
 8001712:	f019 fac7 	bl	801aca4 <free>
  delete this->snd_ctrl;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800171a:	2c00      	cmp	r4, #0
 800171c:	d006      	beq.n	800172c <_ZN5RobotD1Ev+0x64>
 800171e:	4620      	mov	r0, r4
 8001720:	f7ff f87a 	bl	8000818 <_ZN13Communication7SNDctrlD1Ev>
 8001724:	2110      	movs	r1, #16
 8001726:	4620      	mov	r0, r4
 8001728:	f019 f986 	bl	801aa38 <_ZdlPvj>
  delete this->rcv_ctrl;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8001730:	2c00      	cmp	r4, #0
 8001732:	d006      	beq.n	8001742 <_ZN5RobotD1Ev+0x7a>
 8001734:	4620      	mov	r0, r4
 8001736:	f7ff f83a 	bl	80007ae <_ZN13Communication7RCVctrlD1Ev>
 800173a:	2110      	movs	r1, #16
 800173c:	4620      	mov	r0, r4
 800173e:	f019 f97b 	bl	801aa38 <_ZdlPvj>
  delete this->snd_setup;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8001746:	2c00      	cmp	r4, #0
 8001748:	d006      	beq.n	8001758 <_ZN5RobotD1Ev+0x90>
 800174a:	4620      	mov	r0, r4
 800174c:	f7ff f893 	bl	8000876 <_ZN13Communication8SNDsetupD1Ev>
 8001750:	2101      	movs	r1, #1
 8001752:	4620      	mov	r0, r4
 8001754:	f019 f970 	bl	801aa38 <_ZdlPvj>
  delete this->rcv_setup;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 800175c:	2c00      	cmp	r4, #0
 800175e:	d006      	beq.n	800176e <_ZN5RobotD1Ev+0xa6>
 8001760:	4620      	mov	r0, r4
 8001762:	f7ff f872 	bl	800084a <_ZN13Communication8RCVsetupD1Ev>
 8001766:	211c      	movs	r1, #28
 8001768:	4620      	mov	r0, r4
 800176a:	f019 f965 	bl	801aa38 <_ZdlPvj>
}
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4618      	mov	r0, r3
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	bd90      	pop	{r4, r7, pc}

08001778 <_ZN5Robot9setStatusENS_6StatusEb>:

Robot::Status Robot::getStatus(){
  return this->status;
}

void Robot::setStatus(Status status, bool reset = false){
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	460b      	mov	r3, r1
 8001782:	70fb      	strb	r3, [r7, #3]
 8001784:	4613      	mov	r3, r2
 8001786:	70bb      	strb	r3, [r7, #2]
  if(this->status != status || reset){
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	7e1b      	ldrb	r3, [r3, #24]
 800178c:	78fa      	ldrb	r2, [r7, #3]
 800178e:	429a      	cmp	r2, r3
 8001790:	d102      	bne.n	8001798 <_ZN5Robot9setStatusENS_6StatusEb+0x20>
 8001792:	78bb      	ldrb	r3, [r7, #2]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d008      	beq.n	80017aa <_ZN5Robot9setStatusENS_6StatusEb+0x32>
    resetPWMs();
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f000 f895 	bl	80018c8 <_ZN5Robot9resetPWMsEv>
    resetPIDs();
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f000 f873 	bl	800188a <_ZN5Robot9resetPIDsEv>
    this->status = status;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	78fa      	ldrb	r2, [r7, #3]
 80017a8:	761a      	strb	r2, [r3, #24]
  }
}
 80017aa:	bf00      	nop
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <_ZN5Robot8getMotorEh>:

Motor * Robot::getMotor(uint8_t index){
 80017b2:	b480      	push	{r7}
 80017b4:	b083      	sub	sp, #12
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	6078      	str	r0, [r7, #4]
 80017ba:	460b      	mov	r3, r1
 80017bc:	70fb      	strb	r3, [r7, #3]
  return this->motors[index];
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	691a      	ldr	r2, [r3, #16]
 80017c2:	78fb      	ldrb	r3, [r7, #3]
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	4413      	add	r3, r2
 80017c8:	681b      	ldr	r3, [r3, #0]
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr

080017d6 <_ZN5Robot8setMotorEhP5Motor>:

void Robot::setMotor(uint8_t index, Motor * motor){
 80017d6:	b480      	push	{r7}
 80017d8:	b085      	sub	sp, #20
 80017da:	af00      	add	r7, sp, #0
 80017dc:	60f8      	str	r0, [r7, #12]
 80017de:	460b      	mov	r3, r1
 80017e0:	607a      	str	r2, [r7, #4]
 80017e2:	72fb      	strb	r3, [r7, #11]
  this->motors[index] = motor;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	691a      	ldr	r2, [r3, #16]
 80017e8:	7afb      	ldrb	r3, [r7, #11]
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	4413      	add	r3, r2
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	601a      	str	r2, [r3, #0]
}
 80017f2:	bf00      	nop
 80017f4:	3714      	adds	r7, #20
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr

080017fe <_ZN5Robot8setMotorEhP5Motorf>:

void Robot::setMotor(uint8_t index, Motor * motor, float enc_div){
 80017fe:	b480      	push	{r7}
 8001800:	b085      	sub	sp, #20
 8001802:	af00      	add	r7, sp, #0
 8001804:	60f8      	str	r0, [r7, #12]
 8001806:	460b      	mov	r3, r1
 8001808:	607a      	str	r2, [r7, #4]
 800180a:	ed87 0a00 	vstr	s0, [r7]
 800180e:	72fb      	strb	r3, [r7, #11]
  this->motors[index] = motor;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	691a      	ldr	r2, [r3, #16]
 8001814:	7afb      	ldrb	r3, [r7, #11]
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	4413      	add	r3, r2
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	601a      	str	r2, [r3, #0]
  this->error_div[index] = enc_div;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001822:	7afb      	ldrb	r3, [r7, #11]
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	4413      	add	r3, r2
 8001828:	683a      	ldr	r2, [r7, #0]
 800182a:	601a      	str	r2, [r3, #0]
}
 800182c:	bf00      	nop
 800182e:	3714      	adds	r7, #20
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <_ZN5Robot17setEncoderDividerEhf>:

void Robot::setEncoderDivider(uint8_t index, float enc_div){
 8001838:	b480      	push	{r7}
 800183a:	b085      	sub	sp, #20
 800183c:	af00      	add	r7, sp, #0
 800183e:	60f8      	str	r0, [r7, #12]
 8001840:	460b      	mov	r3, r1
 8001842:	ed87 0a01 	vstr	s0, [r7, #4]
 8001846:	72fb      	strb	r3, [r7, #11]
  this->error_div[index] = enc_div;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800184c:	7afb      	ldrb	r3, [r7, #11]
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	4413      	add	r3, r2
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	601a      	str	r2, [r3, #0]
}
 8001856:	bf00      	nop
 8001858:	3714      	adds	r7, #20
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr

08001862 <_ZN5Robot6getPIDEh>:

PID * Robot::getPID(uint8_t index){
 8001862:	b480      	push	{r7}
 8001864:	b083      	sub	sp, #12
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
 800186a:	460b      	mov	r3, r1
 800186c:	70fb      	strb	r3, [r7, #3]
  return &(this->pids[index]);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6959      	ldr	r1, [r3, #20]
 8001872:	78fa      	ldrb	r2, [r7, #3]
 8001874:	4613      	mov	r3, r2
 8001876:	00db      	lsls	r3, r3, #3
 8001878:	1a9b      	subs	r3, r3, r2
 800187a:	00db      	lsls	r3, r3, #3
 800187c:	440b      	add	r3, r1
}
 800187e:	4618      	mov	r0, r3
 8001880:	370c      	adds	r7, #12
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr

0800188a <_ZN5Robot9resetPIDsEv>:
  for(int i = 0; i < size; i++){
    getPID(i)->setup(kp, ki, kd);
  }
}

void Robot::resetPIDs(){
 800188a:	b580      	push	{r7, lr}
 800188c:	b084      	sub	sp, #16
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
  for(int i = 0; i < size; i++){
 8001892:	2300      	movs	r3, #0
 8001894:	60fb      	str	r3, [r7, #12]
 8001896:	e00c      	b.n	80018b2 <_ZN5Robot9resetPIDsEv+0x28>
    getPID(i)->reset();
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	b2db      	uxtb	r3, r3
 800189c:	4619      	mov	r1, r3
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f7ff ffdf 	bl	8001862 <_ZN5Robot6getPIDEh>
 80018a4:	4603      	mov	r3, r0
 80018a6:	4618      	mov	r0, r3
 80018a8:	f000 fbd6 	bl	8002058 <_ZN3PID5resetEv>
  for(int i = 0; i < size; i++){
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	3301      	adds	r3, #1
 80018b0:	60fb      	str	r3, [r7, #12]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	7b1b      	ldrb	r3, [r3, #12]
 80018b6:	461a      	mov	r2, r3
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	4293      	cmp	r3, r2
 80018bc:	dbec      	blt.n	8001898 <_ZN5Robot9resetPIDsEv+0xe>
  }
}
 80018be:	bf00      	nop
 80018c0:	bf00      	nop
 80018c2:	3710      	adds	r7, #16
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <_ZN5Robot9resetPWMsEv>:
void Robot::setPWM(uint8_t index, int16_t pwm){
  motors_pwm[index] = pwm;

}

void Robot::resetPWMs(){
 80018c8:	b480      	push	{r7}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  for(int i = 0; i < size; i++){
 80018d0:	2300      	movs	r3, #0
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	e009      	b.n	80018ea <_ZN5Robot9resetPWMsEv+0x22>
    motors_pwm[i] = 0;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	4413      	add	r3, r2
 80018e0:	2200      	movs	r2, #0
 80018e2:	801a      	strh	r2, [r3, #0]
  for(int i = 0; i < size; i++){
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	3301      	adds	r3, #1
 80018e8:	60fb      	str	r3, [r7, #12]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	7b1b      	ldrb	r3, [r3, #12]
 80018ee:	461a      	mov	r2, r3
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	4293      	cmp	r3, r2
 80018f4:	dbef      	blt.n	80018d6 <_ZN5Robot9resetPWMsEv+0xe>
  }
}
 80018f6:	bf00      	nop
 80018f8:	bf00      	nop
 80018fa:	3714      	adds	r7, #20
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <_ZN5Robot8rcvSetupEP33racs_services__srv__Setup_Request>:
  }

  //Communication::snd(snd_ctrl);
}

void Robot::rcvSetup(racs_services__srv__Setup_Request* request){
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	6039      	str	r1, [r7, #0]
  //Communication::rcv(rcv_setup);

  setEncoderDivider(request->motor_index, request->encoder_error_divider);
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	781a      	ldrb	r2, [r3, #0]
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	edd3 7a01 	vldr	s15, [r3, #4]
 8001918:	eeb0 0a67 	vmov.f32	s0, s15
 800191c:	4611      	mov	r1, r2
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f7ff ff8a 	bl	8001838 <_ZN5Robot17setEncoderDividerEhf>
  getPID(request->motor_index)->reset();
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	4619      	mov	r1, r3
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f7ff ff99 	bl	8001862 <_ZN5Robot6getPIDEh>
 8001930:	4603      	mov	r3, r0
 8001932:	4618      	mov	r0, r3
 8001934:	f000 fb90 	bl	8002058 <_ZN3PID5resetEv>
  getPID(request->motor_index)->init((float) ts/1000.0, request->tau, request->sat, true);
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	4619      	mov	r1, r3
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f7ff ff8f 	bl	8001862 <_ZN5Robot6getPIDEh>
 8001944:	4602      	mov	r2, r0
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	ee07 3a90 	vmov	s15, r3
 800194e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001952:	eddf 6a1b 	vldr	s13, [pc, #108]	; 80019c0 <_ZN5Robot8rcvSetupEP33racs_services__srv__Setup_Request+0xbc>
 8001956:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	edd3 6a06 	vldr	s13, [r3, #24]
 8001966:	2101      	movs	r1, #1
 8001968:	eeb0 1a66 	vmov.f32	s2, s13
 800196c:	eef0 0a67 	vmov.f32	s1, s15
 8001970:	eeb0 0a47 	vmov.f32	s0, s14
 8001974:	4610      	mov	r0, r2
 8001976:	f000 fae7 	bl	8001f48 <_ZN3PID4initEfffb>
  getPID(request->motor_index)->setup(request->p, request->i, request->d);
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	4619      	mov	r1, r3
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f7ff ff6e 	bl	8001862 <_ZN5Robot6getPIDEh>
 8001986:	4602      	mov	r2, r0
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	edd3 7a02 	vldr	s15, [r3, #8]
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	ed93 7a03 	vldr	s14, [r3, #12]
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	edd3 6a04 	vldr	s13, [r3, #16]
 800199a:	eeb0 1a66 	vmov.f32	s2, s13
 800199e:	eef0 0a47 	vmov.f32	s1, s14
 80019a2:	eeb0 0a67 	vmov.f32	s0, s15
 80019a6:	4610      	mov	r0, r2
 80019a8:	f000 fb3c 	bl	8002024 <_ZN3PID5setupEfff>

  setStatus(Status::Idle, true);
 80019ac:	2201      	movs	r2, #1
 80019ae:	2100      	movs	r1, #0
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f7ff fee1 	bl	8001778 <_ZN5Robot9setStatusENS_6StatusEb>
}
 80019b6:	bf00      	nop
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	447a0000 	.word	0x447a0000

080019c4 <_ZN5Robot8sndSetupEP34racs_services__srv__Setup_Response>:

void Robot::sndSetup(racs_services__srv__Setup_Response* response){
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	6039      	str	r1, [r7, #0]
  response->response = (unsigned char) Status::Setup;
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	2203      	movs	r2, #3
 80019d2:	701a      	strb	r2, [r3, #0]
  //Communication::snd(snd_setup);
}
 80019d4:	bf00      	nop
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <_ZN5Robot6updateEv>:

void Robot::update(){
 80019e0:	b590      	push	{r4, r7, lr}
 80019e2:	b089      	sub	sp, #36	; 0x24
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  switch(status){
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	7e1b      	ldrb	r3, [r3, #24]
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d00a      	beq.n	8001a06 <_ZN5Robot6updateEv+0x26>
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d85e      	bhi.n	8001ab2 <_ZN5Robot6updateEv+0xd2>
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d002      	beq.n	80019fe <_ZN5Robot6updateEv+0x1e>
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d064      	beq.n	8001ac6 <_ZN5Robot6updateEv+0xe6>
 80019fc:	e059      	b.n	8001ab2 <_ZN5Robot6updateEv+0xd2>
    case Status::Idle:
      resetPWMs();
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f7ff ff62 	bl	80018c8 <_ZN5Robot9resetPWMsEv>
      break;
 8001a04:	e060      	b.n	8001ac8 <_ZN5Robot6updateEv+0xe8>

    case Status::DAQ:
      break;

    case Status::PID:
      for(int i = 0; i < size; i++){
 8001a06:	2300      	movs	r3, #0
 8001a08:	61fb      	str	r3, [r7, #28]
 8001a0a:	e04b      	b.n	8001aa4 <_ZN5Robot6updateEv+0xc4>
    	//RIMUOVERE ERROR_DIV
        //float err = (float) (getMotor(i)->getEncoder() - encoders_rcv[i]) / ((error_div[i] == 0) ? 1.0 : error_div[i]);
    	float err = (float) (getMotor(i)->getEncoder() - encoders_rcv[i]);
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	4619      	mov	r1, r3
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f7ff fecd 	bl	80017b2 <_ZN5Robot8getMotorEh>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7ff fd3a 	bl	8001494 <_ZN5Motor10getEncoderEv>
 8001a20:	4601      	mov	r1, r0
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	4413      	add	r3, r2
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	1acb      	subs	r3, r1, r3
 8001a30:	ee07 3a90 	vmov	s15, r3
 8001a34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a38:	edc7 7a05 	vstr	s15, [r7, #20]
    	motors_pwm[i] = (short) std::min(std::max(getPID(i)->evolve(err), (float) -255.0), (float) 255.0);
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	4619      	mov	r1, r3
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f7ff ff0d 	bl	8001862 <_ZN5Robot6getPIDEh>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	ed97 0a05 	vldr	s0, [r7, #20]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f000 fbef 	bl	8002232 <_ZN3PID6evolveEf>
 8001a54:	eef0 7a40 	vmov.f32	s15, s0
 8001a58:	edc7 7a02 	vstr	s15, [r7, #8]
 8001a5c:	4b2b      	ldr	r3, [pc, #172]	; (8001b0c <_ZN5Robot6updateEv+0x12c>)
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	f107 020c 	add.w	r2, r7, #12
 8001a64:	f107 0308 	add.w	r3, r7, #8
 8001a68:	4611      	mov	r1, r2
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f000 f9f8 	bl	8001e60 <_ZSt3maxIfERKT_S2_S2_>
 8001a70:	4602      	mov	r2, r0
 8001a72:	4b27      	ldr	r3, [pc, #156]	; (8001b10 <_ZN5Robot6updateEv+0x130>)
 8001a74:	613b      	str	r3, [r7, #16]
 8001a76:	f107 0310 	add.w	r3, r7, #16
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4610      	mov	r0, r2
 8001a7e:	f000 fa08 	bl	8001e92 <_ZSt3minIfERKT_S2_S2_>
 8001a82:	4603      	mov	r3, r0
 8001a84:	edd3 7a00 	vldr	s15, [r3]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	4413      	add	r3, r2
 8001a92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a96:	ee17 2a90 	vmov	r2, s15
 8001a9a:	b212      	sxth	r2, r2
 8001a9c:	801a      	strh	r2, [r3, #0]
      for(int i = 0; i < size; i++){
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	61fb      	str	r3, [r7, #28]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	7b1b      	ldrb	r3, [r3, #12]
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	4293      	cmp	r3, r2
 8001aae:	dbad      	blt.n	8001a0c <_ZN5Robot6updateEv+0x2c>
      }
      break;
 8001ab0:	e00a      	b.n	8001ac8 <_ZN5Robot6updateEv+0xe8>

    default:
      resetPWMs();
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f7ff ff08 	bl	80018c8 <_ZN5Robot9resetPWMsEv>
      resetPIDs();
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f7ff fee6 	bl	800188a <_ZN5Robot9resetPIDsEv>
      status = Status::Idle;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	761a      	strb	r2, [r3, #24]
      break;
 8001ac4:	e000      	b.n	8001ac8 <_ZN5Robot6updateEv+0xe8>
      break;
 8001ac6:	bf00      	nop
  }

  for(int i = 0; i < size; i++){
 8001ac8:	2300      	movs	r3, #0
 8001aca:	61bb      	str	r3, [r7, #24]
 8001acc:	e012      	b.n	8001af4 <_ZN5Robot6updateEv+0x114>
    switches[i] = getMotor(i)->isInEndStop();
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f7ff fe6c 	bl	80017b2 <_ZN5Robot8getMotorEh>
 8001ada:	4601      	mov	r1, r0
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	18d4      	adds	r4, r2, r3
 8001ae4:	4608      	mov	r0, r1
 8001ae6:	f7ff fce3 	bl	80014b0 <_ZN5Motor11isInEndStopEv>
 8001aea:	4603      	mov	r3, r0
 8001aec:	7023      	strb	r3, [r4, #0]
  for(int i = 0; i < size; i++){
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	3301      	adds	r3, #1
 8001af2:	61bb      	str	r3, [r7, #24]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	7b1b      	ldrb	r3, [r3, #12]
 8001af8:	461a      	mov	r2, r3
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	4293      	cmp	r3, r2
 8001afe:	dbe6      	blt.n	8001ace <_ZN5Robot6updateEv+0xee>
  }
}
 8001b00:	bf00      	nop
 8001b02:	bf00      	nop
 8001b04:	3724      	adds	r7, #36	; 0x24
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd90      	pop	{r4, r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	c37f0000 	.word	0xc37f0000
 8001b10:	437f0000 	.word	0x437f0000

08001b14 <_Z12create_robotv>:
      }
    }
  }
}*/

Robot create_robot() {
 8001b14:	b580      	push	{r7, lr}
 8001b16:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001b1a:	af04      	add	r7, sp, #16
 8001b1c:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8001b20:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8001b24:	6018      	str	r0, [r3, #0]

	PinControl mot1_ina = PinControl(MOTOR1_INA_GPIO_Port, MOTOR1_INA_Pin);
 8001b26:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	49c3      	ldr	r1, [pc, #780]	; (8001e3c <_Z12create_robotv+0x328>)
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7ff fbe0 	bl	80012f4 <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinControl mot1_inb = PinControl(MOTOR1_INB_GPIO_Port, MOTOR1_INB_Pin);
 8001b34:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8001b38:	2202      	movs	r2, #2
 8001b3a:	49c0      	ldr	r1, [pc, #768]	; (8001e3c <_Z12create_robotv+0x328>)
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7ff fbd9 	bl	80012f4 <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinMeasure mot1_end = PinMeasure(MOTOR1_END_GPIO_Port, MOTOR1_END_Pin);
 8001b42:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8001b46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b4a:	49bd      	ldr	r1, [pc, #756]	; (8001e40 <_Z12create_robotv+0x32c>)
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff fc0d 	bl	800136c <_ZN10PinMeasureC1EP12GPIO_TypeDeft>

	PinControl mot2_ina = PinControl(MOTOR2_INA_GPIO_Port, MOTOR2_INA_Pin);
 8001b52:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001b56:	2204      	movs	r2, #4
 8001b58:	49b8      	ldr	r1, [pc, #736]	; (8001e3c <_Z12create_robotv+0x328>)
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7ff fbca 	bl	80012f4 <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinControl mot2_inb = PinControl(MOTOR2_INB_GPIO_Port, MOTOR2_INB_Pin);
 8001b60:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001b64:	2208      	movs	r2, #8
 8001b66:	49b5      	ldr	r1, [pc, #724]	; (8001e3c <_Z12create_robotv+0x328>)
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7ff fbc3 	bl	80012f4 <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinMeasure mot2_end = PinMeasure(MOTOR2_END_GPIO_Port, MOTOR2_END_Pin);
 8001b6e:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001b72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b76:	49b2      	ldr	r1, [pc, #712]	; (8001e40 <_Z12create_robotv+0x32c>)
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff fbf7 	bl	800136c <_ZN10PinMeasureC1EP12GPIO_TypeDeft>

	PinControl mot3_ina = PinControl(MOTOR3_INA_GPIO_Port, MOTOR3_INA_Pin);
 8001b7e:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8001b82:	2210      	movs	r2, #16
 8001b84:	49ad      	ldr	r1, [pc, #692]	; (8001e3c <_Z12create_robotv+0x328>)
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7ff fbb4 	bl	80012f4 <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinControl mot3_inb = PinControl(MOTOR3_INB_GPIO_Port, MOTOR3_INB_Pin);
 8001b8c:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001b90:	2220      	movs	r2, #32
 8001b92:	49aa      	ldr	r1, [pc, #680]	; (8001e3c <_Z12create_robotv+0x328>)
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff fbad 	bl	80012f4 <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinMeasure mot3_end = PinMeasure(MOTOR3_END_GPIO_Port, MOTOR3_END_Pin);
 8001b9a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001b9e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ba2:	49a7      	ldr	r1, [pc, #668]	; (8001e40 <_Z12create_robotv+0x32c>)
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7ff fbe1 	bl	800136c <_ZN10PinMeasureC1EP12GPIO_TypeDeft>

	PinControl mot4_ina = PinControl(MOTOR4_INA_GPIO_Port, MOTOR4_INA_Pin);
 8001baa:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001bae:	2240      	movs	r2, #64	; 0x40
 8001bb0:	49a2      	ldr	r1, [pc, #648]	; (8001e3c <_Z12create_robotv+0x328>)
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7ff fb9e 	bl	80012f4 <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinControl mot4_inb = PinControl(MOTOR4_INB_GPIO_Port, MOTOR4_INB_Pin);
 8001bb8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001bbc:	2280      	movs	r2, #128	; 0x80
 8001bbe:	499f      	ldr	r1, [pc, #636]	; (8001e3c <_Z12create_robotv+0x328>)
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff fb97 	bl	80012f4 <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinMeasure mot4_end = PinMeasure(MOTOR4_END_GPIO_Port, MOTOR4_END_Pin);
 8001bc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001bca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001bce:	499c      	ldr	r1, [pc, #624]	; (8001e40 <_Z12create_robotv+0x32c>)
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff fbcb 	bl	800136c <_ZN10PinMeasureC1EP12GPIO_TypeDeft>

	PinControl mot5_ina = PinControl(MOTOR5_INA_GPIO_Port, MOTOR5_INA_Pin);
 8001bd6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001bda:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001bde:	4997      	ldr	r1, [pc, #604]	; (8001e3c <_Z12create_robotv+0x328>)
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff fb87 	bl	80012f4 <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinControl mot5_inb = PinControl(MOTOR5_INB_GPIO_Port, MOTOR5_INB_Pin);
 8001be6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001bea:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001bee:	4993      	ldr	r1, [pc, #588]	; (8001e3c <_Z12create_robotv+0x328>)
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff fb7f 	bl	80012f4 <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinMeasure mot5_end = PinMeasure(MOTOR5_END_GPIO_Port, MOTOR5_END_Pin);
 8001bf6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001bfa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bfe:	4990      	ldr	r1, [pc, #576]	; (8001e40 <_Z12create_robotv+0x32c>)
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff fbb3 	bl	800136c <_ZN10PinMeasureC1EP12GPIO_TypeDeft>

	PinControl mot6_ina = PinControl(MOTOR6_INA_GPIO_Port, MOTOR6_INA_Pin);
 8001c06:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001c0a:	2204      	movs	r2, #4
 8001c0c:	498c      	ldr	r1, [pc, #560]	; (8001e40 <_Z12create_robotv+0x32c>)
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7ff fb70 	bl	80012f4 <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinControl mot6_inb = PinControl(MOTOR6_INB_GPIO_Port, MOTOR6_INB_Pin);
 8001c14:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001c18:	2208      	movs	r2, #8
 8001c1a:	4989      	ldr	r1, [pc, #548]	; (8001e40 <_Z12create_robotv+0x32c>)
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7ff fb69 	bl	80012f4 <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinMeasure mot6_end = PinMeasure(MOTOR6_END_GPIO_Port, MOTOR6_END_Pin);
 8001c22:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001c26:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c2a:	4985      	ldr	r1, [pc, #532]	; (8001e40 <_Z12create_robotv+0x32c>)
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff fb9d 	bl	800136c <_ZN10PinMeasureC1EP12GPIO_TypeDeft>

	PinControl enable = PinControl(MOTORS_EN_GPIO_Port, MOTORS_EN_Pin);
 8001c32:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001c36:	2240      	movs	r2, #64	; 0x40
 8001c38:	4981      	ldr	r1, [pc, #516]	; (8001e40 <_Z12create_robotv+0x32c>)
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7ff fb5a 	bl	80012f4 <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinControl toggle = PinControl(PIN_TOGGLE_GPIO_Port, PIN_TOGGLE_Pin);
 8001c40:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001c44:	2220      	movs	r2, #32
 8001c46:	497e      	ldr	r1, [pc, #504]	; (8001e40 <_Z12create_robotv+0x32c>)
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7ff fb53 	bl	80012f4 <_ZN10PinControlC1EP12GPIO_TypeDeft>

	Motor motor1 = Motor(mot1_ina, mot1_inb, &htim1, 1, &htim2, mot1_end);
 8001c4e:	f507 72e8 	add.w	r2, r7, #464	; 0x1d0
 8001c52:	f507 71f0 	add.w	r1, r7, #480	; 0x1e0
 8001c56:	f107 0094 	add.w	r0, r7, #148	; 0x94
 8001c5a:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8001c5e:	9302      	str	r3, [sp, #8]
 8001c60:	4b78      	ldr	r3, [pc, #480]	; (8001e44 <_Z12create_robotv+0x330>)
 8001c62:	9301      	str	r3, [sp, #4]
 8001c64:	2301      	movs	r3, #1
 8001c66:	9300      	str	r3, [sp, #0]
 8001c68:	4b77      	ldr	r3, [pc, #476]	; (8001e48 <_Z12create_robotv+0x334>)
 8001c6a:	f7ff fbe5 	bl	8001438 <_ZN5MotorC1ER10PinControlS1_P17TIM_HandleTypeDefhS3_R10PinMeasure>
	Motor motor2 = Motor(mot2_ina, mot2_inb, &htim1, 2, &htim3, mot2_end);
 8001c6e:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8001c72:	f507 71d8 	add.w	r1, r7, #432	; 0x1b0
 8001c76:	f107 0078 	add.w	r0, r7, #120	; 0x78
 8001c7a:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001c7e:	9302      	str	r3, [sp, #8]
 8001c80:	4b72      	ldr	r3, [pc, #456]	; (8001e4c <_Z12create_robotv+0x338>)
 8001c82:	9301      	str	r3, [sp, #4]
 8001c84:	2302      	movs	r3, #2
 8001c86:	9300      	str	r3, [sp, #0]
 8001c88:	4b6f      	ldr	r3, [pc, #444]	; (8001e48 <_Z12create_robotv+0x334>)
 8001c8a:	f7ff fbd5 	bl	8001438 <_ZN5MotorC1ER10PinControlS1_P17TIM_HandleTypeDefhS3_R10PinMeasure>
	Motor motor3 = Motor(mot3_ina, mot3_inb, &htim1, 3, &htim4, mot3_end);
 8001c8e:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8001c92:	f507 71c0 	add.w	r1, r7, #384	; 0x180
 8001c96:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8001c9a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001c9e:	9302      	str	r3, [sp, #8]
 8001ca0:	4b6b      	ldr	r3, [pc, #428]	; (8001e50 <_Z12create_robotv+0x33c>)
 8001ca2:	9301      	str	r3, [sp, #4]
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	9300      	str	r3, [sp, #0]
 8001ca8:	4b67      	ldr	r3, [pc, #412]	; (8001e48 <_Z12create_robotv+0x334>)
 8001caa:	f7ff fbc5 	bl	8001438 <_ZN5MotorC1ER10PinControlS1_P17TIM_HandleTypeDefhS3_R10PinMeasure>
	Motor motor4 = Motor(mot4_ina, mot4_inb, &htim1, 4, &htim5, mot4_end);
 8001cae:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8001cb2:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 8001cb6:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8001cba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001cbe:	9302      	str	r3, [sp, #8]
 8001cc0:	4b64      	ldr	r3, [pc, #400]	; (8001e54 <_Z12create_robotv+0x340>)
 8001cc2:	9301      	str	r3, [sp, #4]
 8001cc4:	2304      	movs	r3, #4
 8001cc6:	9300      	str	r3, [sp, #0]
 8001cc8:	4b5f      	ldr	r3, [pc, #380]	; (8001e48 <_Z12create_robotv+0x334>)
 8001cca:	f7ff fbb5 	bl	8001438 <_ZN5MotorC1ER10PinControlS1_P17TIM_HandleTypeDefhS3_R10PinMeasure>
	Motor motor5 = Motor(mot5_ina, mot5_inb, &htim9, 1, &htim8, mot5_end);
 8001cce:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001cd2:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8001cd6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001cda:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001cde:	9302      	str	r3, [sp, #8]
 8001ce0:	4b5d      	ldr	r3, [pc, #372]	; (8001e58 <_Z12create_robotv+0x344>)
 8001ce2:	9301      	str	r3, [sp, #4]
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	9300      	str	r3, [sp, #0]
 8001ce8:	4b5c      	ldr	r3, [pc, #368]	; (8001e5c <_Z12create_robotv+0x348>)
 8001cea:	f7ff fba5 	bl	8001438 <_ZN5MotorC1ER10PinControlS1_P17TIM_HandleTypeDefhS3_R10PinMeasure>
	Motor motor6 = Motor(mot6_ina, mot6_inb, &htim9, 2, 		mot6_end);
 8001cee:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8001cf2:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 8001cf6:	f107 0008 	add.w	r0, r7, #8
 8001cfa:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001cfe:	9301      	str	r3, [sp, #4]
 8001d00:	2302      	movs	r3, #2
 8001d02:	9300      	str	r3, [sp, #0]
 8001d04:	4b55      	ldr	r3, [pc, #340]	; (8001e5c <_Z12create_robotv+0x348>)
 8001d06:	f7ff fb77 	bl	80013f8 <_ZN5MotorC1ER10PinControlS1_P17TIM_HandleTypeDefhR10PinMeasure>

	Motor** motors = (Motor**) malloc(sizeof(Motor*)*6);
 8001d0a:	2018      	movs	r0, #24
 8001d0c:	f018 ffc2 	bl	801ac94 <malloc>
 8001d10:	4603      	mov	r3, r0
 8001d12:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
	float* encs_div = (float*) malloc(sizeof(float)*6);
 8001d16:	2018      	movs	r0, #24
 8001d18:	f018 ffbc 	bl	801ac94 <malloc>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0

	motors[0] = &motor1; motors[1] = &motor2; motors[2] = &motor3; motors[3] = &motor4; motors[4] = &motor5; motors[5] = &motor6;
 8001d22:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001d26:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001d30:	3304      	adds	r3, #4
 8001d32:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8001d36:	601a      	str	r2, [r3, #0]
 8001d38:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001d3c:	3308      	adds	r3, #8
 8001d3e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001d48:	330c      	adds	r3, #12
 8001d4a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001d4e:	601a      	str	r2, [r3, #0]
 8001d50:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001d54:	3310      	adds	r3, #16
 8001d56:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001d60:	3314      	adds	r3, #20
 8001d62:	f107 0208 	add.w	r2, r7, #8
 8001d66:	601a      	str	r2, [r3, #0]
	encs_div[0] = 1; encs_div[1] = 1; encs_div[2] = 1; encs_div[3] = 1; encs_div[4] = 1; encs_div[5] = 1;
 8001d68:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001d6c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001d70:	601a      	str	r2, [r3, #0]
 8001d72:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001d76:	3304      	adds	r3, #4
 8001d78:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001d7c:	601a      	str	r2, [r3, #0]
 8001d7e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001d82:	3308      	adds	r3, #8
 8001d84:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001d88:	601a      	str	r2, [r3, #0]
 8001d8a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001d8e:	330c      	adds	r3, #12
 8001d90:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001d94:	601a      	str	r2, [r3, #0]
 8001d96:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001d9a:	3310      	adds	r3, #16
 8001d9c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001da0:	601a      	str	r2, [r3, #0]
 8001da2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001da6:	3314      	adds	r3, #20
 8001da8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001dac:	601a      	str	r2, [r3, #0]

	Robot myRobot = Robot(enable, toggle, 10, 6, motors, encs_div);
 8001dae:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8001db2:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 8001db6:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8001dba:	f5a3 70fa 	sub.w	r0, r3, #500	; 0x1f4
 8001dbe:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001dc2:	9302      	str	r3, [sp, #8]
 8001dc4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001dc8:	9301      	str	r3, [sp, #4]
 8001dca:	2306      	movs	r3, #6
 8001dcc:	9300      	str	r3, [sp, #0]
 8001dce:	230a      	movs	r3, #10
 8001dd0:	6800      	ldr	r0, [r0, #0]
 8001dd2:	f7ff fb7b 	bl	80014cc <_ZN5RobotC1ER10PinControlS1_mhPP5MotorPf>

	return myRobot;
 8001dd6:	bf00      	nop
}
 8001dd8:	f107 0308 	add.w	r3, r7, #8
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7ff fb4e 	bl	800147e <_ZN5MotorD1Ev>
 8001de2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7ff fb49 	bl	800147e <_ZN5MotorD1Ev>
 8001dec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff fb44 	bl	800147e <_ZN5MotorD1Ev>
 8001df6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7ff fb3f 	bl	800147e <_ZN5MotorD1Ev>
 8001e00:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7ff fb3a 	bl	800147e <_ZN5MotorD1Ev>
 8001e0a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7ff fb35 	bl	800147e <_ZN5MotorD1Ev>
	return myRobot;
 8001e14:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8001e18:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8001e1c:	f507 72fc 	add.w	r2, r7, #504	; 0x1f8
 8001e20:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001e24:	6812      	ldr	r2, [r2, #0]
 8001e26:	601a      	str	r2, [r3, #0]
}
 8001e28:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8001e2c:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8001e30:	6818      	ldr	r0, [r3, #0]
 8001e32:	f507 77fc 	add.w	r7, r7, #504	; 0x1f8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	40020c00 	.word	0x40020c00
 8001e40:	40021800 	.word	0x40021800
 8001e44:	20006780 	.word	0x20006780
 8001e48:	20006734 	.word	0x20006734
 8001e4c:	200067cc 	.word	0x200067cc
 8001e50:	20006818 	.word	0x20006818
 8001e54:	20006864 	.word	0x20006864
 8001e58:	200068b0 	.word	0x200068b0
 8001e5c:	200068fc 	.word	0x200068fc

08001e60 <_ZSt3maxIfERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	ed93 7a00 	vldr	s14, [r3]
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	edd3 7a00 	vldr	s15, [r3]
 8001e76:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e7e:	d501      	bpl.n	8001e84 <_ZSt3maxIfERKT_S2_S2_+0x24>
	return __b;
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	e000      	b.n	8001e86 <_ZSt3maxIfERKT_S2_S2_+0x26>
      return __a;
 8001e84:	687b      	ldr	r3, [r7, #4]
    }
 8001e86:	4618      	mov	r0, r3
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr

08001e92 <_ZSt3minIfERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8001e92:	b480      	push	{r7}
 8001e94:	b083      	sub	sp, #12
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
 8001e9a:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	ed93 7a00 	vldr	s14, [r3]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	edd3 7a00 	vldr	s15, [r3]
 8001ea8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eb0:	d501      	bpl.n	8001eb6 <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	e000      	b.n	8001eb8 <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 8001eb6:	687b      	ldr	r3, [r7, #4]
    }
 8001eb8:	4618      	mov	r0, r3
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <_Z41__static_initialization_and_destruction_0ii>:

Robot ScorBot = create_robot();
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	6039      	str	r1, [r7, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d108      	bne.n	8001ee6 <_Z41__static_initialization_and_destruction_0ii+0x22>
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d103      	bne.n	8001ee6 <_Z41__static_initialization_and_destruction_0ii+0x22>
 8001ede:	4b09      	ldr	r3, [pc, #36]	; (8001f04 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff fe17 	bl	8001b14 <_Z12create_robotv>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d107      	bne.n	8001efc <_Z41__static_initialization_and_destruction_0ii+0x38>
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d102      	bne.n	8001efc <_Z41__static_initialization_and_destruction_0ii+0x38>
 8001ef6:	4803      	ldr	r0, [pc, #12]	; (8001f04 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001ef8:	f7ff fbe6 	bl	80016c8 <_ZN5RobotD1Ev>
 8001efc:	bf00      	nop
 8001efe:	3708      	adds	r7, #8
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	2000215c 	.word	0x2000215c

08001f08 <_GLOBAL__sub_I__ZN10PinControlC2Ev>:
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001f10:	2001      	movs	r0, #1
 8001f12:	f7ff ffd7 	bl	8001ec4 <_Z41__static_initialization_and_destruction_0ii>
 8001f16:	bd80      	pop	{r7, pc}

08001f18 <_GLOBAL__sub_D__ZN10PinControlC2Ev>:
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001f20:	2000      	movs	r0, #0
 8001f22:	f7ff ffcf 	bl	8001ec4 <_Z41__static_initialization_and_destruction_0ii>
 8001f26:	bd80      	pop	{r7, pc}

08001f28 <_ZSt3expf>:
  using ::exp;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  exp(float __x)
  { return __builtin_expf(__x); }
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001f32:	ed97 0a01 	vldr	s0, [r7, #4]
 8001f36:	f018 fda3 	bl	801aa80 <expf>
 8001f3a:	eef0 7a40 	vmov.f32	s15, s0
 8001f3e:	eeb0 0a67 	vmov.f32	s0, s15
 8001f42:	3708      	adds	r7, #8
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <_ZN3PID4initEfffb>:


// PID

void PID::init(float ts, float pole, float sat, bool bumpless)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b086      	sub	sp, #24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6178      	str	r0, [r7, #20]
 8001f50:	ed87 0a04 	vstr	s0, [r7, #16]
 8001f54:	edc7 0a03 	vstr	s1, [r7, #12]
 8001f58:	ed87 1a02 	vstr	s2, [r7, #8]
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	71fb      	strb	r3, [r7, #7]
  this->ts = ts;
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	601a      	str	r2, [r3, #0]
  this->pole = pole;
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	68fa      	ldr	r2, [r7, #12]
 8001f6a:	605a      	str	r2, [r3, #4]
  this->sat = sat;
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	68ba      	ldr	r2, [r7, #8]
 8001f70:	609a      	str	r2, [r3, #8]
  this->bumpless = bumpless;
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	79fa      	ldrb	r2, [r7, #7]
 8001f76:	731a      	strb	r2, [r3, #12]

  if(pole > 0)
 8001f78:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f7c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f84:	dd2d      	ble.n	8001fe2 <_ZN3PID4initEfffb+0x9a>
  {
    A = exp(-pole*ts);
 8001f86:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f8a:	eeb1 7a67 	vneg.f32	s14, s15
 8001f8e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f96:	eeb0 0a67 	vmov.f32	s0, s15
 8001f9a:	f7ff ffc5 	bl	8001f28 <_ZSt3expf>
 8001f9e:	eef0 7a40 	vmov.f32	s15, s0
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    B = (1-A)/pole;
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001fae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001fb2:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001fb6:	ed97 7a03 	vldr	s14, [r7, #12]
 8001fba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    C = -pole*pole;
 8001fc4:	edd7 7a03 	vldr	s15, [r7, #12]
 8001fc8:	eeb1 7a67 	vneg.f32	s14, s15
 8001fcc:	edd7 7a03 	vldr	s15, [r7, #12]
 8001fd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
    D = pole;
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	68fa      	ldr	r2, [r7, #12]
 8001fde:	635a      	str	r2, [r3, #52]	; 0x34
 8001fe0:	e019      	b.n	8002016 <_ZN3PID4initEfffb+0xce>
  }
  else
  {
    A = 0;
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	f04f 0200 	mov.w	r2, #0
 8001fe8:	629a      	str	r2, [r3, #40]	; 0x28
    B = 1;
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001ff0:	62da      	str	r2, [r3, #44]	; 0x2c
    C = -1/ts;
 8001ff2:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 8001ff6:	ed97 7a04 	vldr	s14, [r7, #16]
 8001ffa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
    D = 1/ts;
 8002004:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002008:	ed97 7a04 	vldr	s14, [r7, #16]
 800200c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
  }

  apply_saturation();
 8002016:	6978      	ldr	r0, [r7, #20]
 8002018:	f000 f926 	bl	8002268 <_ZN3PID16apply_saturationEv>
}
 800201c:	bf00      	nop
 800201e:	3718      	adds	r7, #24
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}

08002024 <_ZN3PID5setupEfff>:

void PID::setup(float kp, float ki, float kd)
{
 8002024:	b480      	push	{r7}
 8002026:	b085      	sub	sp, #20
 8002028:	af00      	add	r7, sp, #0
 800202a:	60f8      	str	r0, [r7, #12]
 800202c:	ed87 0a02 	vstr	s0, [r7, #8]
 8002030:	edc7 0a01 	vstr	s1, [r7, #4]
 8002034:	ed87 1a00 	vstr	s2, [r7]
  this->kp = kp;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	68ba      	ldr	r2, [r7, #8]
 800203c:	611a      	str	r2, [r3, #16]
  this->ki = ki;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	615a      	str	r2, [r3, #20]
  this->kd = kd;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	683a      	ldr	r2, [r7, #0]
 8002048:	619a      	str	r2, [r3, #24]
}
 800204a:	bf00      	nop
 800204c:	3714      	adds	r7, #20
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
	...

08002058 <_ZN3PID5resetEv>:

void PID::reset()
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  reset(0.0, 0.0);
 8002060:	eddf 0a05 	vldr	s1, [pc, #20]	; 8002078 <_ZN3PID5resetEv+0x20>
 8002064:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8002078 <_ZN3PID5resetEv+0x20>
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f000 f807 	bl	800207c <_ZN3PID5resetEff>
}
 800206e:	bf00      	nop
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	00000000 	.word	0x00000000

0800207c <_ZN3PID5resetEff>:

void PID::reset(float xi, float xd)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	ed87 0a02 	vstr	s0, [r7, #8]
 8002088:	edc7 0a01 	vstr	s1, [r7, #4]
  this-> xi = xi;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	68ba      	ldr	r2, [r7, #8]
 8002090:	621a      	str	r2, [r3, #32]
  this-> xd = xd;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	687a      	ldr	r2, [r7, #4]
 8002096:	625a      	str	r2, [r3, #36]	; 0x24

  apply_saturation();
 8002098:	68f8      	ldr	r0, [r7, #12]
 800209a:	f000 f8e5 	bl	8002268 <_ZN3PID16apply_saturationEv>
}
 800209e:	bf00      	nop
 80020a0:	3710      	adds	r7, #16
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <_ZN3PID5inputEf>:

void PID::input(float e)
{
 80020a6:	b480      	push	{r7}
 80020a8:	b083      	sub	sp, #12
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
 80020ae:	ed87 0a00 	vstr	s0, [r7]
  this->e = e;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	683a      	ldr	r2, [r7, #0]
 80020b6:	61da      	str	r2, [r3, #28]
}
 80020b8:	bf00      	nop
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <_ZN3PID4stepEv>:

void PID::step()
{  
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  xi = xi + (bumpless ? ki*ts*e : ts*e);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	ed93 7a08 	vldr	s14, [r3, #32]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	7b1b      	ldrb	r3, [r3, #12]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d00d      	beq.n	80020f6 <_ZN3PID4stepEv+0x32>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	edd3 6a05 	vldr	s13, [r3, #20]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	edd3 7a00 	vldr	s15, [r3]
 80020e6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	edd3 7a07 	vldr	s15, [r3, #28]
 80020f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020f4:	e007      	b.n	8002106 <_ZN3PID4stepEv+0x42>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	edd3 6a00 	vldr	s13, [r3]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	edd3 7a07 	vldr	s15, [r3, #28]
 8002102:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002106:	ee77 7a87 	vadd.f32	s15, s15, s14
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	edc3 7a08 	vstr	s15, [r3, #32]
  xd = A*xd + (bumpless ? kd*B*e : B*e);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800211c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	7b1b      	ldrb	r3, [r3, #12]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d00d      	beq.n	8002144 <_ZN3PID4stepEv+0x80>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	edd3 6a06 	vldr	s13, [r3, #24]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002134:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	edd3 7a07 	vldr	s15, [r3, #28]
 800213e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002142:	e007      	b.n	8002154 <_ZN3PID4stepEv+0x90>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	edd3 7a07 	vldr	s15, [r3, #28]
 8002150:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002154:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

  apply_saturation();
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f000 f882 	bl	8002268 <_ZN3PID16apply_saturationEv>
}
 8002164:	bf00      	nop
 8002166:	3708      	adds	r7, #8
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}

0800216c <_ZN3PID6outputEv>:

float PID::output()
{
 800216c:	b480      	push	{r7}
 800216e:	b085      	sub	sp, #20
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  float u;

  if(bumpless) u = (kp + kd*D) * e + xi + C*xd;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	7b1b      	ldrb	r3, [r3, #12]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d023      	beq.n	80021c4 <_ZN3PID6outputEv+0x58>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	ed93 7a04 	vldr	s14, [r3, #16]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	edd3 6a06 	vldr	s13, [r3, #24]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800218e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002192:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	edd3 7a07 	vldr	s15, [r3, #28]
 800219c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	edd3 7a08 	vldr	s15, [r3, #32]
 80021a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80021b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021be:	edc7 7a03 	vstr	s15, [r7, #12]
 80021c2:	e02c      	b.n	800221e <_ZN3PID6outputEv+0xb2>
  else u = (kp + kd*D) * e + ki*xi + kd*C*xd;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	ed93 7a04 	vldr	s14, [r3, #16]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	edd3 6a06 	vldr	s13, [r3, #24]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80021d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	edd3 7a07 	vldr	s15, [r3, #28]
 80021e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	edd3 6a05 	vldr	s13, [r3, #20]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	edd3 7a08 	vldr	s15, [r3, #32]
 80021f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	edd3 6a06 	vldr	s13, [r3, #24]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8002208:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002212:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002216:	ee77 7a27 	vadd.f32	s15, s14, s15
 800221a:	edc7 7a03 	vstr	s15, [r7, #12]

  return u;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	ee07 3a90 	vmov	s15, r3
}
 8002224:	eeb0 0a67 	vmov.f32	s0, s15
 8002228:	3714      	adds	r7, #20
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr

08002232 <_ZN3PID6evolveEf>:

float PID::evolve(float e)
{ 
 8002232:	b580      	push	{r7, lr}
 8002234:	b084      	sub	sp, #16
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
 800223a:	ed87 0a00 	vstr	s0, [r7]
  float u;
  
  input(e);
 800223e:	ed97 0a00 	vldr	s0, [r7]
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f7ff ff2f 	bl	80020a6 <_ZN3PID5inputEf>
  u = output();
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f7ff ff8f 	bl	800216c <_ZN3PID6outputEv>
 800224e:	ed87 0a03 	vstr	s0, [r7, #12]
  step();
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f7ff ff36 	bl	80020c4 <_ZN3PID4stepEv>

  return u;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	ee07 3a90 	vmov	s15, r3
}
 800225e:	eeb0 0a67 	vmov.f32	s0, s15
 8002262:	3710      	adds	r7, #16
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}

08002268 <_ZN3PID16apply_saturationEv>:

void PID::apply_saturation()
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  if(sat > 0)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	edd3 7a02 	vldr	s15, [r3, #8]
 8002276:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800227a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800227e:	dc00      	bgt.n	8002282 <_ZN3PID16apply_saturationEv+0x1a>
  {
    xi = xi > +sat ? +sat : xi;
    xi = xi < -sat ? -sat : xi;
  }
}
 8002280:	e02a      	b.n	80022d8 <_ZN3PID16apply_saturationEv+0x70>
    xi = xi > +sat ? +sat : xi;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	ed93 7a08 	vldr	s14, [r3, #32]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	edd3 7a02 	vldr	s15, [r3, #8]
 800228e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002296:	dd02      	ble.n	800229e <_ZN3PID16apply_saturationEv+0x36>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	e001      	b.n	80022a2 <_ZN3PID16apply_saturationEv+0x3a>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a1b      	ldr	r3, [r3, #32]
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	6213      	str	r3, [r2, #32]
    xi = xi < -sat ? -sat : xi;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	ed93 7a08 	vldr	s14, [r3, #32]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	edd3 7a02 	vldr	s15, [r3, #8]
 80022b2:	eef1 7a67 	vneg.f32	s15, s15
 80022b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022be:	d505      	bpl.n	80022cc <_ZN3PID16apply_saturationEv+0x64>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	edd3 7a02 	vldr	s15, [r3, #8]
 80022c6:	eef1 7a67 	vneg.f32	s15, s15
 80022ca:	e002      	b.n	80022d2 <_ZN3PID16apply_saturationEv+0x6a>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	edd3 7a08 	vldr	s15, [r3, #32]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	edc3 7a08 	vstr	s15, [r3, #32]
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b08a      	sub	sp, #40	; 0x28
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80022ec:	2300      	movs	r3, #0
 80022ee:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80022f0:	f008 fa44 	bl	800a77c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80022f4:	4b5b      	ldr	r3, [pc, #364]	; (8002464 <pvPortMallocMicroROS+0x180>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d101      	bne.n	8002300 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 80022fc:	f000 f98a 	bl	8002614 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002300:	4b59      	ldr	r3, [pc, #356]	; (8002468 <pvPortMallocMicroROS+0x184>)
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4013      	ands	r3, r2
 8002308:	2b00      	cmp	r3, #0
 800230a:	f040 8092 	bne.w	8002432 <pvPortMallocMicroROS+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d01f      	beq.n	8002354 <pvPortMallocMicroROS+0x70>
			{
				xWantedSize += xHeapStructSize;
 8002314:	2208      	movs	r2, #8
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4413      	add	r3, r2
 800231a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f003 0307 	and.w	r3, r3, #7
 8002322:	2b00      	cmp	r3, #0
 8002324:	d016      	beq.n	8002354 <pvPortMallocMicroROS+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f023 0307 	bic.w	r3, r3, #7
 800232c:	3308      	adds	r3, #8
 800232e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f003 0307 	and.w	r3, r3, #7
 8002336:	2b00      	cmp	r3, #0
 8002338:	d00c      	beq.n	8002354 <pvPortMallocMicroROS+0x70>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800233a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800233e:	b672      	cpsid	i
 8002340:	f383 8811 	msr	BASEPRI, r3
 8002344:	f3bf 8f6f 	isb	sy
 8002348:	f3bf 8f4f 	dsb	sy
 800234c:	b662      	cpsie	i
 800234e:	617b      	str	r3, [r7, #20]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002350:	bf00      	nop
 8002352:	e7fe      	b.n	8002352 <pvPortMallocMicroROS+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d06b      	beq.n	8002432 <pvPortMallocMicroROS+0x14e>
 800235a:	4b44      	ldr	r3, [pc, #272]	; (800246c <pvPortMallocMicroROS+0x188>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	429a      	cmp	r2, r3
 8002362:	d866      	bhi.n	8002432 <pvPortMallocMicroROS+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002364:	4b42      	ldr	r3, [pc, #264]	; (8002470 <pvPortMallocMicroROS+0x18c>)
 8002366:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002368:	4b41      	ldr	r3, [pc, #260]	; (8002470 <pvPortMallocMicroROS+0x18c>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800236e:	e004      	b.n	800237a <pvPortMallocMicroROS+0x96>
				{
					pxPreviousBlock = pxBlock;
 8002370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002372:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800237a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	429a      	cmp	r2, r3
 8002382:	d903      	bls.n	800238c <pvPortMallocMicroROS+0xa8>
 8002384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d1f1      	bne.n	8002370 <pvPortMallocMicroROS+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800238c:	4b35      	ldr	r3, [pc, #212]	; (8002464 <pvPortMallocMicroROS+0x180>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002392:	429a      	cmp	r2, r3
 8002394:	d04d      	beq.n	8002432 <pvPortMallocMicroROS+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002396:	6a3b      	ldr	r3, [r7, #32]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	2208      	movs	r2, #8
 800239c:	4413      	add	r3, r2
 800239e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80023a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	6a3b      	ldr	r3, [r7, #32]
 80023a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80023a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023aa:	685a      	ldr	r2, [r3, #4]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	1ad2      	subs	r2, r2, r3
 80023b0:	2308      	movs	r3, #8
 80023b2:	005b      	lsls	r3, r3, #1
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d921      	bls.n	80023fc <pvPortMallocMicroROS+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80023b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4413      	add	r3, r2
 80023be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	f003 0307 	and.w	r3, r3, #7
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d00c      	beq.n	80023e4 <pvPortMallocMicroROS+0x100>
	__asm volatile
 80023ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023ce:	b672      	cpsid	i
 80023d0:	f383 8811 	msr	BASEPRI, r3
 80023d4:	f3bf 8f6f 	isb	sy
 80023d8:	f3bf 8f4f 	dsb	sy
 80023dc:	b662      	cpsie	i
 80023de:	613b      	str	r3, [r7, #16]
}
 80023e0:	bf00      	nop
 80023e2:	e7fe      	b.n	80023e2 <pvPortMallocMicroROS+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80023e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e6:	685a      	ldr	r2, [r3, #4]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	1ad2      	subs	r2, r2, r3
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80023f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80023f6:	69b8      	ldr	r0, [r7, #24]
 80023f8:	f000 f96e 	bl	80026d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80023fc:	4b1b      	ldr	r3, [pc, #108]	; (800246c <pvPortMallocMicroROS+0x188>)
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	4a19      	ldr	r2, [pc, #100]	; (800246c <pvPortMallocMicroROS+0x188>)
 8002408:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800240a:	4b18      	ldr	r3, [pc, #96]	; (800246c <pvPortMallocMicroROS+0x188>)
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	4b19      	ldr	r3, [pc, #100]	; (8002474 <pvPortMallocMicroROS+0x190>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	429a      	cmp	r2, r3
 8002414:	d203      	bcs.n	800241e <pvPortMallocMicroROS+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002416:	4b15      	ldr	r3, [pc, #84]	; (800246c <pvPortMallocMicroROS+0x188>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a16      	ldr	r2, [pc, #88]	; (8002474 <pvPortMallocMicroROS+0x190>)
 800241c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800241e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002420:	685a      	ldr	r2, [r3, #4]
 8002422:	4b11      	ldr	r3, [pc, #68]	; (8002468 <pvPortMallocMicroROS+0x184>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	431a      	orrs	r2, r3
 8002428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800242c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242e:	2200      	movs	r2, #0
 8002430:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002432:	f008 f9b1 	bl	800a798 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	f003 0307 	and.w	r3, r3, #7
 800243c:	2b00      	cmp	r3, #0
 800243e:	d00c      	beq.n	800245a <pvPortMallocMicroROS+0x176>
	__asm volatile
 8002440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002444:	b672      	cpsid	i
 8002446:	f383 8811 	msr	BASEPRI, r3
 800244a:	f3bf 8f6f 	isb	sy
 800244e:	f3bf 8f4f 	dsb	sy
 8002452:	b662      	cpsie	i
 8002454:	60fb      	str	r3, [r7, #12]
}
 8002456:	bf00      	nop
 8002458:	e7fe      	b.n	8002458 <pvPortMallocMicroROS+0x174>
	return pvReturn;
 800245a:	69fb      	ldr	r3, [r7, #28]
}
 800245c:	4618      	mov	r0, r3
 800245e:	3728      	adds	r7, #40	; 0x28
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	20005dac 	.word	0x20005dac
 8002468:	20005db8 	.word	0x20005db8
 800246c:	20005db0 	.word	0x20005db0
 8002470:	20005da4 	.word	0x20005da4
 8002474:	20005db4 	.word	0x20005db4

08002478 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b086      	sub	sp, #24
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d04c      	beq.n	8002524 <vPortFreeMicroROS+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800248a:	2308      	movs	r3, #8
 800248c:	425b      	negs	r3, r3
 800248e:	697a      	ldr	r2, [r7, #20]
 8002490:	4413      	add	r3, r2
 8002492:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	685a      	ldr	r2, [r3, #4]
 800249c:	4b23      	ldr	r3, [pc, #140]	; (800252c <vPortFreeMicroROS+0xb4>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4013      	ands	r3, r2
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d10c      	bne.n	80024c0 <vPortFreeMicroROS+0x48>
	__asm volatile
 80024a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024aa:	b672      	cpsid	i
 80024ac:	f383 8811 	msr	BASEPRI, r3
 80024b0:	f3bf 8f6f 	isb	sy
 80024b4:	f3bf 8f4f 	dsb	sy
 80024b8:	b662      	cpsie	i
 80024ba:	60fb      	str	r3, [r7, #12]
}
 80024bc:	bf00      	nop
 80024be:	e7fe      	b.n	80024be <vPortFreeMicroROS+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d00c      	beq.n	80024e2 <vPortFreeMicroROS+0x6a>
	__asm volatile
 80024c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024cc:	b672      	cpsid	i
 80024ce:	f383 8811 	msr	BASEPRI, r3
 80024d2:	f3bf 8f6f 	isb	sy
 80024d6:	f3bf 8f4f 	dsb	sy
 80024da:	b662      	cpsie	i
 80024dc:	60bb      	str	r3, [r7, #8]
}
 80024de:	bf00      	nop
 80024e0:	e7fe      	b.n	80024e0 <vPortFreeMicroROS+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	685a      	ldr	r2, [r3, #4]
 80024e6:	4b11      	ldr	r3, [pc, #68]	; (800252c <vPortFreeMicroROS+0xb4>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4013      	ands	r3, r2
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d019      	beq.n	8002524 <vPortFreeMicroROS+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d115      	bne.n	8002524 <vPortFreeMicroROS+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	685a      	ldr	r2, [r3, #4]
 80024fc:	4b0b      	ldr	r3, [pc, #44]	; (800252c <vPortFreeMicroROS+0xb4>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	43db      	mvns	r3, r3
 8002502:	401a      	ands	r2, r3
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002508:	f008 f938 	bl	800a77c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	685a      	ldr	r2, [r3, #4]
 8002510:	4b07      	ldr	r3, [pc, #28]	; (8002530 <vPortFreeMicroROS+0xb8>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4413      	add	r3, r2
 8002516:	4a06      	ldr	r2, [pc, #24]	; (8002530 <vPortFreeMicroROS+0xb8>)
 8002518:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800251a:	6938      	ldr	r0, [r7, #16]
 800251c:	f000 f8dc 	bl	80026d8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8002520:	f008 f93a 	bl	800a798 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002524:	bf00      	nop
 8002526:	3718      	adds	r7, #24
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	20005db8 	.word	0x20005db8
 8002530:	20005db0 	.word	0x20005db0

08002534 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8002534:	b480      	push	{r7}
 8002536:	b087      	sub	sp, #28
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8002540:	2308      	movs	r3, #8
 8002542:	425b      	negs	r3, r3
 8002544:	697a      	ldr	r2, [r7, #20]
 8002546:	4413      	add	r3, r2
 8002548:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	685a      	ldr	r2, [r3, #4]
 8002552:	4b06      	ldr	r3, [pc, #24]	; (800256c <getBlockSize+0x38>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	43db      	mvns	r3, r3
 8002558:	4013      	ands	r3, r2
 800255a:	60fb      	str	r3, [r7, #12]

	return count;
 800255c:	68fb      	ldr	r3, [r7, #12]
}
 800255e:	4618      	mov	r0, r3
 8002560:	371c      	adds	r7, #28
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	20005db8 	.word	0x20005db8

08002570 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 800257a:	f008 f8ff 	bl	800a77c <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 800257e:	6838      	ldr	r0, [r7, #0]
 8002580:	f7ff feb0 	bl	80022e4 <pvPortMallocMicroROS>
 8002584:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d017      	beq.n	80025bc <pvPortReallocMicroROS+0x4c>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d014      	beq.n	80025bc <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f7ff ffce 	bl	8002534 <getBlockSize>
 8002598:	4603      	mov	r3, r0
 800259a:	2208      	movs	r2, #8
 800259c:	1a9b      	subs	r3, r3, r2
 800259e:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 80025a0:	683a      	ldr	r2, [r7, #0]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d201      	bcs.n	80025ac <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	6879      	ldr	r1, [r7, #4]
 80025b0:	68b8      	ldr	r0, [r7, #8]
 80025b2:	f019 f85c 	bl	801b66e <memcpy>

		vPortFreeMicroROS(pv);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f7ff ff5e 	bl	8002478 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 80025bc:	f008 f8ec 	bl	800a798 <xTaskResumeAll>

	return newmem;
 80025c0:	68bb      	ldr	r3, [r7, #8]
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3710      	adds	r7, #16
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}

080025ca <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 80025ca:	b580      	push	{r7, lr}
 80025cc:	b086      	sub	sp, #24
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
 80025d2:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80025d4:	f008 f8d2 	bl	800a77c <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	fb02 f303 	mul.w	r3, r2, r3
 80025e0:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 80025e2:	6978      	ldr	r0, [r7, #20]
 80025e4:	f7ff fe7e 	bl	80022e4 <pvPortMallocMicroROS>
 80025e8:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	613b      	str	r3, [r7, #16]

  	while(count--)
 80025ee:	e004      	b.n	80025fa <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	1c5a      	adds	r2, r3, #1
 80025f4:	613a      	str	r2, [r7, #16]
 80025f6:	2200      	movs	r2, #0
 80025f8:	701a      	strb	r2, [r3, #0]
  	while(count--)
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	1e5a      	subs	r2, r3, #1
 80025fe:	617a      	str	r2, [r7, #20]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d1f5      	bne.n	80025f0 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8002604:	f008 f8c8 	bl	800a798 <xTaskResumeAll>
  	return mem;
 8002608:	68fb      	ldr	r3, [r7, #12]
}
 800260a:	4618      	mov	r0, r3
 800260c:	3718      	adds	r7, #24
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
	...

08002614 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002614:	b480      	push	{r7}
 8002616:	b085      	sub	sp, #20
 8002618:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800261a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800261e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002620:	4b27      	ldr	r3, [pc, #156]	; (80026c0 <prvHeapInit+0xac>)
 8002622:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f003 0307 	and.w	r3, r3, #7
 800262a:	2b00      	cmp	r3, #0
 800262c:	d00c      	beq.n	8002648 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	3307      	adds	r3, #7
 8002632:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f023 0307 	bic.w	r3, r3, #7
 800263a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800263c:	68ba      	ldr	r2, [r7, #8]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	4a1f      	ldr	r2, [pc, #124]	; (80026c0 <prvHeapInit+0xac>)
 8002644:	4413      	add	r3, r2
 8002646:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800264c:	4a1d      	ldr	r2, [pc, #116]	; (80026c4 <prvHeapInit+0xb0>)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002652:	4b1c      	ldr	r3, [pc, #112]	; (80026c4 <prvHeapInit+0xb0>)
 8002654:	2200      	movs	r2, #0
 8002656:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	68ba      	ldr	r2, [r7, #8]
 800265c:	4413      	add	r3, r2
 800265e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002660:	2208      	movs	r2, #8
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	1a9b      	subs	r3, r3, r2
 8002666:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f023 0307 	bic.w	r3, r3, #7
 800266e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	4a15      	ldr	r2, [pc, #84]	; (80026c8 <prvHeapInit+0xb4>)
 8002674:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002676:	4b14      	ldr	r3, [pc, #80]	; (80026c8 <prvHeapInit+0xb4>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	2200      	movs	r2, #0
 800267c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800267e:	4b12      	ldr	r3, [pc, #72]	; (80026c8 <prvHeapInit+0xb4>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2200      	movs	r2, #0
 8002684:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	68fa      	ldr	r2, [r7, #12]
 800268e:	1ad2      	subs	r2, r2, r3
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002694:	4b0c      	ldr	r3, [pc, #48]	; (80026c8 <prvHeapInit+0xb4>)
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	4a0a      	ldr	r2, [pc, #40]	; (80026cc <prvHeapInit+0xb8>)
 80026a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	4a09      	ldr	r2, [pc, #36]	; (80026d0 <prvHeapInit+0xbc>)
 80026aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80026ac:	4b09      	ldr	r3, [pc, #36]	; (80026d4 <prvHeapInit+0xc0>)
 80026ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80026b2:	601a      	str	r2, [r3, #0]
}
 80026b4:	bf00      	nop
 80026b6:	3714      	adds	r7, #20
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr
 80026c0:	200021a4 	.word	0x200021a4
 80026c4:	20005da4 	.word	0x20005da4
 80026c8:	20005dac 	.word	0x20005dac
 80026cc:	20005db4 	.word	0x20005db4
 80026d0:	20005db0 	.word	0x20005db0
 80026d4:	20005db8 	.word	0x20005db8

080026d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80026d8:	b480      	push	{r7}
 80026da:	b085      	sub	sp, #20
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80026e0:	4b28      	ldr	r3, [pc, #160]	; (8002784 <prvInsertBlockIntoFreeList+0xac>)
 80026e2:	60fb      	str	r3, [r7, #12]
 80026e4:	e002      	b.n	80026ec <prvInsertBlockIntoFreeList+0x14>
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	60fb      	str	r3, [r7, #12]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d8f7      	bhi.n	80026e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	68ba      	ldr	r2, [r7, #8]
 8002700:	4413      	add	r3, r2
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	429a      	cmp	r2, r3
 8002706:	d108      	bne.n	800271a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	685a      	ldr	r2, [r3, #4]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	441a      	add	r2, r3
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	68ba      	ldr	r2, [r7, #8]
 8002724:	441a      	add	r2, r3
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	429a      	cmp	r2, r3
 800272c:	d118      	bne.n	8002760 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	4b15      	ldr	r3, [pc, #84]	; (8002788 <prvInsertBlockIntoFreeList+0xb0>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	429a      	cmp	r2, r3
 8002738:	d00d      	beq.n	8002756 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685a      	ldr	r2, [r3, #4]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	441a      	add	r2, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	601a      	str	r2, [r3, #0]
 8002754:	e008      	b.n	8002768 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002756:	4b0c      	ldr	r3, [pc, #48]	; (8002788 <prvInsertBlockIntoFreeList+0xb0>)
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	601a      	str	r2, [r3, #0]
 800275e:	e003      	b.n	8002768 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002768:	68fa      	ldr	r2, [r7, #12]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	429a      	cmp	r2, r3
 800276e:	d002      	beq.n	8002776 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002776:	bf00      	nop
 8002778:	3714      	adds	r7, #20
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	20005da4 	.word	0x20005da4
 8002788:	20005dac 	.word	0x20005dac

0800278c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002792:	4b10      	ldr	r3, [pc, #64]	; (80027d4 <MX_DMA_Init+0x48>)
 8002794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002796:	4a0f      	ldr	r2, [pc, #60]	; (80027d4 <MX_DMA_Init+0x48>)
 8002798:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800279c:	6313      	str	r3, [r2, #48]	; 0x30
 800279e:	4b0d      	ldr	r3, [pc, #52]	; (80027d4 <MX_DMA_Init+0x48>)
 80027a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027a6:	607b      	str	r3, [r7, #4]
 80027a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 80027aa:	2200      	movs	r2, #0
 80027ac:	2105      	movs	r1, #5
 80027ae:	200c      	movs	r0, #12
 80027b0:	f001 fe5e 	bl	8004470 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80027b4:	200c      	movs	r0, #12
 80027b6:	f001 fe77 	bl	80044a8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 80027ba:	2200      	movs	r2, #0
 80027bc:	2105      	movs	r1, #5
 80027be:	200e      	movs	r0, #14
 80027c0:	f001 fe56 	bl	8004470 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80027c4:	200e      	movs	r0, #14
 80027c6:	f001 fe6f 	bl	80044a8 <HAL_NVIC_EnableIRQ>

}
 80027ca:	bf00      	nop
 80027cc:	3708      	adds	r7, #8
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	40023800 	.word	0x40023800

080027d8 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80027e6:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 80027e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80027ec:	4904      	ldr	r1, [pc, #16]	; (8002800 <cubemx_transport_open+0x28>)
 80027ee:	68f8      	ldr	r0, [r7, #12]
 80027f0:	f005 f858 	bl	80078a4 <HAL_UART_Receive_DMA>
    return true;
 80027f4:	2301      	movs	r3, #1
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3710      	adds	r7, #16
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	20005dbc 	.word	0x20005dbc

08002804 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8002812:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8002814:	68f8      	ldr	r0, [r7, #12]
 8002816:	f005 f889 	bl	800792c <HAL_UART_DMAStop>
    return true;
 800281a:	2301      	movs	r3, #1
}
 800281c:	4618      	mov	r0, r3
 800281e:	3710      	adds	r7, #16
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, const uint8_t * buf, size_t len, uint8_t * err){
 8002824:	b580      	push	{r7, lr}
 8002826:	b086      	sub	sp, #24
 8002828:	af00      	add	r7, sp, #0
 800282a:	60f8      	str	r0, [r7, #12]
 800282c:	60b9      	str	r1, [r7, #8]
 800282e:	607a      	str	r2, [r7, #4]
 8002830:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8002838:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800283e:	2b20      	cmp	r3, #32
 8002840:	d11a      	bne.n	8002878 <cubemx_transport_write+0x54>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	b29b      	uxth	r3, r3
 8002846:	461a      	mov	r2, r3
 8002848:	68b9      	ldr	r1, [r7, #8]
 800284a:	6978      	ldr	r0, [r7, #20]
 800284c:	f004 ffae 	bl	80077ac <HAL_UART_Transmit_DMA>
 8002850:	4603      	mov	r3, r0
 8002852:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8002854:	e002      	b.n	800285c <cubemx_transport_write+0x38>
            osDelay(1);
 8002856:	2001      	movs	r0, #1
 8002858:	f006 ff06 	bl	8009668 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 800285c:	7cfb      	ldrb	r3, [r7, #19]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d103      	bne.n	800286a <cubemx_transport_write+0x46>
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002866:	2b20      	cmp	r3, #32
 8002868:	d1f5      	bne.n	8002856 <cubemx_transport_write+0x32>
        }

        return (ret == HAL_OK) ? len : 0;
 800286a:	7cfb      	ldrb	r3, [r7, #19]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d101      	bne.n	8002874 <cubemx_transport_write+0x50>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	e002      	b.n	800287a <cubemx_transport_write+0x56>
 8002874:	2300      	movs	r3, #0
 8002876:	e000      	b.n	800287a <cubemx_transport_write+0x56>
    }else{
        return 0;
 8002878:	2300      	movs	r3, #0
    }
}
 800287a:	4618      	mov	r0, r3
 800287c:	3718      	adds	r7, #24
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
	...

08002884 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8002884:	b580      	push	{r7, lr}
 8002886:	b088      	sub	sp, #32
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	607a      	str	r2, [r7, #4]
 8002890:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8002898:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 800289a:	2300      	movs	r3, #0
 800289c:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800289e:	b672      	cpsid	i
}
 80028a0:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80028ae:	4a1c      	ldr	r2, [pc, #112]	; (8002920 <cubemx_transport_read+0x9c>)
 80028b0:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80028b2:	b662      	cpsie	i
}
 80028b4:	bf00      	nop
        __enable_irq();
        ms_used++;
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	3301      	adds	r3, #1
 80028ba:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 80028bc:	2001      	movs	r0, #1
 80028be:	f006 fed3 	bl	8009668 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 80028c2:	4b18      	ldr	r3, [pc, #96]	; (8002924 <cubemx_transport_read+0xa0>)
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	4b16      	ldr	r3, [pc, #88]	; (8002920 <cubemx_transport_read+0x9c>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d103      	bne.n	80028d6 <cubemx_transport_read+0x52>
 80028ce:	69fa      	ldr	r2, [r7, #28]
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	dbe3      	blt.n	800289e <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 80028d6:	2300      	movs	r3, #0
 80028d8:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80028da:	e011      	b.n	8002900 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 80028dc:	4b11      	ldr	r3, [pc, #68]	; (8002924 <cubemx_transport_read+0xa0>)
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	68b9      	ldr	r1, [r7, #8]
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	440b      	add	r3, r1
 80028e6:	4910      	ldr	r1, [pc, #64]	; (8002928 <cubemx_transport_read+0xa4>)
 80028e8:	5c8a      	ldrb	r2, [r1, r2]
 80028ea:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 80028ec:	4b0d      	ldr	r3, [pc, #52]	; (8002924 <cubemx_transport_read+0xa0>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	3301      	adds	r3, #1
 80028f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028f6:	4a0b      	ldr	r2, [pc, #44]	; (8002924 <cubemx_transport_read+0xa0>)
 80028f8:	6013      	str	r3, [r2, #0]
        wrote++;
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	3301      	adds	r3, #1
 80028fe:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8002900:	4b08      	ldr	r3, [pc, #32]	; (8002924 <cubemx_transport_read+0xa0>)
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	4b06      	ldr	r3, [pc, #24]	; (8002920 <cubemx_transport_read+0x9c>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	429a      	cmp	r2, r3
 800290a:	d003      	beq.n	8002914 <cubemx_transport_read+0x90>
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	429a      	cmp	r2, r3
 8002912:	d3e3      	bcc.n	80028dc <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8002914:	69bb      	ldr	r3, [r7, #24]
}
 8002916:	4618      	mov	r0, r3
 8002918:	3720      	adds	r7, #32
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	200065c0 	.word	0x200065c0
 8002924:	200065bc 	.word	0x200065bc
 8002928:	20005dbc 	.word	0x20005dbc

0800292c <_Z16MX_FREERTOS_Initv>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002930:	4a04      	ldr	r2, [pc, #16]	; (8002944 <_Z16MX_FREERTOS_Initv+0x18>)
 8002932:	2100      	movs	r1, #0
 8002934:	4804      	ldr	r0, [pc, #16]	; (8002948 <_Z16MX_FREERTOS_Initv+0x1c>)
 8002936:	f006 fdf1 	bl	800951c <osThreadNew>
 800293a:	4603      	mov	r3, r0
 800293c:	4a03      	ldr	r2, [pc, #12]	; (800294c <_Z16MX_FREERTOS_Initv+0x20>)
 800293e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8002940:	bf00      	nop
 8002942:	bd80      	pop	{r7, pc}
 8002944:	0801c434 	.word	0x0801c434
 8002948:	08002951 	.word	0x08002951
 800294c:	200065c4 	.word	0x200065c4

08002950 <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002950:	b5b0      	push	{r4, r5, r7, lr}
 8002952:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 8002956:	af02      	add	r7, sp, #8
 8002958:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800295c:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8002960:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartDefaultTask */
	rmw_uros_set_custom_transport(
 8002962:	4b6f      	ldr	r3, [pc, #444]	; (8002b20 <_Z16StartDefaultTaskPv+0x1d0>)
 8002964:	9301      	str	r3, [sp, #4]
 8002966:	4b6f      	ldr	r3, [pc, #444]	; (8002b24 <_Z16StartDefaultTaskPv+0x1d4>)
 8002968:	9300      	str	r3, [sp, #0]
 800296a:	4b6f      	ldr	r3, [pc, #444]	; (8002b28 <_Z16StartDefaultTaskPv+0x1d8>)
 800296c:	4a6f      	ldr	r2, [pc, #444]	; (8002b2c <_Z16StartDefaultTaskPv+0x1dc>)
 800296e:	4970      	ldr	r1, [pc, #448]	; (8002b30 <_Z16StartDefaultTaskPv+0x1e0>)
 8002970:	2001      	movs	r0, #1
 8002972:	f00b fa79 	bl	800de68 <rmw_uros_set_custom_transport>
		cubemx_transport_open,
		cubemx_transport_close,
		cubemx_transport_write,
		cubemx_transport_read);

	rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8002976:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 800297a:	4618      	mov	r0, r3
 800297c:	f00b f9aa 	bl	800dcd4 <rcutils_get_zero_initialized_allocator>
	freeRTOS_allocator.allocate = microros_allocate;
 8002980:	4b6c      	ldr	r3, [pc, #432]	; (8002b34 <_Z16StartDefaultTaskPv+0x1e4>)
 8002982:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
	freeRTOS_allocator.deallocate = microros_deallocate;
 8002986:	4b6c      	ldr	r3, [pc, #432]	; (8002b38 <_Z16StartDefaultTaskPv+0x1e8>)
 8002988:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
	freeRTOS_allocator.reallocate = microros_reallocate;
 800298c:	4b6b      	ldr	r3, [pc, #428]	; (8002b3c <_Z16StartDefaultTaskPv+0x1ec>)
 800298e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
	freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8002992:	4b6b      	ldr	r3, [pc, #428]	; (8002b40 <_Z16StartDefaultTaskPv+0x1f0>)
 8002994:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8

	if (!rcutils_set_default_allocator(&freeRTOS_allocator)) return;
 8002998:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 800299c:	4618      	mov	r0, r3
 800299e:	f00b f9a7 	bl	800dcf0 <rcutils_set_default_allocator>
 80029a2:	4603      	mov	r3, r0
 80029a4:	f083 0301 	eor.w	r3, r3, #1
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	f040 80a6 	bne.w	8002afc <_Z16StartDefaultTaskPv+0x1ac>

	rcl_ret_t rc;
	rcl_node_t node; // nodo;
	rcl_service_t setup_service, control_service; //servizi
	const char* setup_service_name = "/setup";
 80029b0:	4b64      	ldr	r3, [pc, #400]	; (8002b44 <_Z16StartDefaultTaskPv+0x1f4>)
 80029b2:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
	const char* control_service_name = "/control"; //nomi dei servizi
 80029b6:	4b64      	ldr	r3, [pc, #400]	; (8002b48 <_Z16StartDefaultTaskPv+0x1f8>)
 80029b8:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
	const rosidl_service_type_support_t* setup_type_support =
		ROSIDL_GET_SRV_TYPE_SUPPORT(racs_services, srv, Setup);
 80029bc:	f009 fb84 	bl	800c0c8 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Setup>
 80029c0:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
	const rosidl_service_type_support_t* control_type_support =
		ROSIDL_GET_SRV_TYPE_SUPPORT(racs_services, srv, Control);
 80029c4:	f009 fb5a 	bl	800c07c <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Control>
 80029c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
	racs_services__srv__Setup_Request req_setup;
	racs_services__srv__Setup_Response res_setup;
	racs_services__srv__Control_Request req_control;
	racs_services__srv__Control_Response res_control;

	allocator = rcl_get_default_allocator();
 80029cc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80029d0:	4618      	mov	r0, r3
 80029d2:	f00b f9ab 	bl	800dd2c <rcutils_get_default_allocator>
 80029d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029da:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80029de:	f507 74c2 	add.w	r4, r7, #388	; 0x184
 80029e2:	461d      	mov	r5, r3
 80029e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029e8:	682b      	ldr	r3, [r5, #0]
 80029ea:	6023      	str	r3, [r4, #0]

	rc = rclc_support_init(&support, 0, NULL, &allocator);
 80029ec:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 80029f0:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 80029f4:	2200      	movs	r2, #0
 80029f6:	2100      	movs	r1, #0
 80029f8:	f00b f89e 	bl	800db38 <rclc_support_init>
 80029fc:	f8c7 01f4 	str.w	r0, [r7, #500]	; 0x1f4
	if (rc != RCL_RET_OK) return;
 8002a00:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d17b      	bne.n	8002b00 <_Z16StartDefaultTaskPv+0x1b0>

	rc = rclc_node_init_default(&node, "STM32_node", "", &support);
 8002a08:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8002a0c:	f507 70ea 	add.w	r0, r7, #468	; 0x1d4
 8002a10:	4a4e      	ldr	r2, [pc, #312]	; (8002b4c <_Z16StartDefaultTaskPv+0x1fc>)
 8002a12:	494f      	ldr	r1, [pc, #316]	; (8002b50 <_Z16StartDefaultTaskPv+0x200>)
 8002a14:	f00b f8da 	bl	800dbcc <rclc_node_init_default>
 8002a18:	f8c7 01f4 	str.w	r0, [r7, #500]	; 0x1f4
	if (rc != RCL_RET_OK) return;
 8002a1c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d16f      	bne.n	8002b04 <_Z16StartDefaultTaskPv+0x1b4>

	rc = rclc_service_init_default(
 8002a24:	f507 71ea 	add.w	r1, r7, #468	; 0x1d4
 8002a28:	f507 70e8 	add.w	r0, r7, #464	; 0x1d0
 8002a2c:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8002a30:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 8002a34:	f00b f90c 	bl	800dc50 <rclc_service_init_default>
 8002a38:	f8c7 01f4 	str.w	r0, [r7, #500]	; 0x1f4
		&setup_service, &node, setup_type_support, setup_service_name);

	if (rc != RCL_RET_OK) return;
 8002a3c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d161      	bne.n	8002b08 <_Z16StartDefaultTaskPv+0x1b8>

	rc = rclc_service_init_default(
 8002a44:	f507 71ea 	add.w	r1, r7, #468	; 0x1d4
 8002a48:	f507 70e6 	add.w	r0, r7, #460	; 0x1cc
 8002a4c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002a50:	f8d7 21f8 	ldr.w	r2, [r7, #504]	; 0x1f8
 8002a54:	f00b f8fc 	bl	800dc50 <rclc_service_init_default>
 8002a58:	f8c7 01f4 	str.w	r0, [r7, #500]	; 0x1f4
		&control_service, &node, control_type_support, control_service_name);

	if (rc != RCL_RET_OK) return;
 8002a5c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d153      	bne.n	8002b0c <_Z16StartDefaultTaskPv+0x1bc>

	rclc_executor_t executor;
	executor = rclc_executor_get_zero_initialized_executor();
 8002a64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a68:	f5a3 74ac 	sub.w	r4, r3, #344	; 0x158
 8002a6c:	463b      	mov	r3, r7
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f00a fd6a 	bl	800d548 <rclc_executor_get_zero_initialized_executor>
 8002a74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a78:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8002a7c:	4620      	mov	r0, r4
 8002a7e:	4619      	mov	r1, r3
 8002a80:	2390      	movs	r3, #144	; 0x90
 8002a82:	461a      	mov	r2, r3
 8002a84:	f018 fdf3 	bl	801b66e <memcpy>
	unsigned int num_handles = 2;
 8002a88:	2302      	movs	r3, #2
 8002a8a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
	rclc_executor_init(&executor, &support.context, num_handles, &allocator);
 8002a8e:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8002a92:	f507 71cc 	add.w	r1, r7, #408	; 0x198
 8002a96:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8002a9a:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 8002a9e:	f00a fd5f 	bl	800d560 <rclc_executor_init>

	rc = rclc_executor_add_service(
 8002aa2:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8002aa6:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8002aaa:	f507 71e8 	add.w	r1, r7, #464	; 0x1d0
 8002aae:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8002ab2:	4c28      	ldr	r4, [pc, #160]	; (8002b54 <_Z16StartDefaultTaskPv+0x204>)
 8002ab4:	9400      	str	r4, [sp, #0]
 8002ab6:	f00a fdcf 	bl	800d658 <rclc_executor_add_service>
 8002aba:	f8c7 01f4 	str.w	r0, [r7, #500]	; 0x1f4
		&executor, &setup_service, &req_setup,
		&res_setup, setup_callback);
	if (rc != RCL_RET_OK) return;
 8002abe:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d124      	bne.n	8002b10 <_Z16StartDefaultTaskPv+0x1c0>

	rc = rclc_executor_add_service(
 8002ac6:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8002aca:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 8002ace:	f507 71e6 	add.w	r1, r7, #460	; 0x1cc
 8002ad2:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8002ad6:	4c20      	ldr	r4, [pc, #128]	; (8002b58 <_Z16StartDefaultTaskPv+0x208>)
 8002ad8:	9400      	str	r4, [sp, #0]
 8002ada:	f00a fdbd 	bl	800d658 <rclc_executor_add_service>
 8002ade:	f8c7 01f4 	str.w	r0, [r7, #500]	; 0x1f4
		&executor, &control_service, &req_control,
		&res_control, control_callback);
	if (rc != RCL_RET_OK) return;
 8002ae2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d114      	bne.n	8002b14 <_Z16StartDefaultTaskPv+0x1c4>

	rclc_executor_spin(&executor);
 8002aea:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002aee:	4618      	mov	r0, r3
 8002af0:	f00a ffe2 	bl	800dab8 <rclc_executor_spin>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002af4:	2001      	movs	r0, #1
 8002af6:	f006 fdb7 	bl	8009668 <osDelay>
 8002afa:	e7fb      	b.n	8002af4 <_Z16StartDefaultTaskPv+0x1a4>
	if (!rcutils_set_default_allocator(&freeRTOS_allocator)) return;
 8002afc:	bf00      	nop
 8002afe:	e00a      	b.n	8002b16 <_Z16StartDefaultTaskPv+0x1c6>
	if (rc != RCL_RET_OK) return;
 8002b00:	bf00      	nop
 8002b02:	e008      	b.n	8002b16 <_Z16StartDefaultTaskPv+0x1c6>
	if (rc != RCL_RET_OK) return;
 8002b04:	bf00      	nop
 8002b06:	e006      	b.n	8002b16 <_Z16StartDefaultTaskPv+0x1c6>
	if (rc != RCL_RET_OK) return;
 8002b08:	bf00      	nop
 8002b0a:	e004      	b.n	8002b16 <_Z16StartDefaultTaskPv+0x1c6>
	if (rc != RCL_RET_OK) return;
 8002b0c:	bf00      	nop
 8002b0e:	e002      	b.n	8002b16 <_Z16StartDefaultTaskPv+0x1c6>
	if (rc != RCL_RET_OK) return;
 8002b10:	bf00      	nop
 8002b12:	e000      	b.n	8002b16 <_Z16StartDefaultTaskPv+0x1c6>
	if (rc != RCL_RET_OK) return;
 8002b14:	bf00      	nop
  }
  /* USER CODE END StartDefaultTask */
}
 8002b16:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bdb0      	pop	{r4, r5, r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	08002885 	.word	0x08002885
 8002b24:	08002825 	.word	0x08002825
 8002b28:	08002805 	.word	0x08002805
 8002b2c:	080027d9 	.word	0x080027d9
 8002b30:	20006948 	.word	0x20006948
 8002b34:	08002e61 	.word	0x08002e61
 8002b38:	08002ea5 	.word	0x08002ea5
 8002b3c:	08002edd 	.word	0x08002edd
 8002b40:	08002f49 	.word	0x08002f49
 8002b44:	0801c3d8 	.word	0x0801c3d8
 8002b48:	0801c3e0 	.word	0x0801c3e0
 8002b4c:	0801c3ec 	.word	0x0801c3ec
 8002b50:	0801c3f0 	.word	0x0801c3f0
 8002b54:	080006cd 	.word	0x080006cd
 8002b58:	080006ad 	.word	0x080006ad

08002b5c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b08c      	sub	sp, #48	; 0x30
 8002b60:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b62:	f107 031c 	add.w	r3, r7, #28
 8002b66:	2200      	movs	r2, #0
 8002b68:	601a      	str	r2, [r3, #0]
 8002b6a:	605a      	str	r2, [r3, #4]
 8002b6c:	609a      	str	r2, [r3, #8]
 8002b6e:	60da      	str	r2, [r3, #12]
 8002b70:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b72:	4b58      	ldr	r3, [pc, #352]	; (8002cd4 <MX_GPIO_Init+0x178>)
 8002b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b76:	4a57      	ldr	r2, [pc, #348]	; (8002cd4 <MX_GPIO_Init+0x178>)
 8002b78:	f043 0310 	orr.w	r3, r3, #16
 8002b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b7e:	4b55      	ldr	r3, [pc, #340]	; (8002cd4 <MX_GPIO_Init+0x178>)
 8002b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b82:	f003 0310 	and.w	r3, r3, #16
 8002b86:	61bb      	str	r3, [r7, #24]
 8002b88:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b8a:	4b52      	ldr	r3, [pc, #328]	; (8002cd4 <MX_GPIO_Init+0x178>)
 8002b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8e:	4a51      	ldr	r2, [pc, #324]	; (8002cd4 <MX_GPIO_Init+0x178>)
 8002b90:	f043 0304 	orr.w	r3, r3, #4
 8002b94:	6313      	str	r3, [r2, #48]	; 0x30
 8002b96:	4b4f      	ldr	r3, [pc, #316]	; (8002cd4 <MX_GPIO_Init+0x178>)
 8002b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9a:	f003 0304 	and.w	r3, r3, #4
 8002b9e:	617b      	str	r3, [r7, #20]
 8002ba0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002ba2:	4b4c      	ldr	r3, [pc, #304]	; (8002cd4 <MX_GPIO_Init+0x178>)
 8002ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba6:	4a4b      	ldr	r2, [pc, #300]	; (8002cd4 <MX_GPIO_Init+0x178>)
 8002ba8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bac:	6313      	str	r3, [r2, #48]	; 0x30
 8002bae:	4b49      	ldr	r3, [pc, #292]	; (8002cd4 <MX_GPIO_Init+0x178>)
 8002bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bb6:	613b      	str	r3, [r7, #16]
 8002bb8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bba:	4b46      	ldr	r3, [pc, #280]	; (8002cd4 <MX_GPIO_Init+0x178>)
 8002bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bbe:	4a45      	ldr	r2, [pc, #276]	; (8002cd4 <MX_GPIO_Init+0x178>)
 8002bc0:	f043 0301 	orr.w	r3, r3, #1
 8002bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8002bc6:	4b43      	ldr	r3, [pc, #268]	; (8002cd4 <MX_GPIO_Init+0x178>)
 8002bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bca:	f003 0301 	and.w	r3, r3, #1
 8002bce:	60fb      	str	r3, [r7, #12]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bd2:	4b40      	ldr	r3, [pc, #256]	; (8002cd4 <MX_GPIO_Init+0x178>)
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd6:	4a3f      	ldr	r2, [pc, #252]	; (8002cd4 <MX_GPIO_Init+0x178>)
 8002bd8:	f043 0302 	orr.w	r3, r3, #2
 8002bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8002bde:	4b3d      	ldr	r3, [pc, #244]	; (8002cd4 <MX_GPIO_Init+0x178>)
 8002be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	60bb      	str	r3, [r7, #8]
 8002be8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002bea:	4b3a      	ldr	r3, [pc, #232]	; (8002cd4 <MX_GPIO_Init+0x178>)
 8002bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bee:	4a39      	ldr	r2, [pc, #228]	; (8002cd4 <MX_GPIO_Init+0x178>)
 8002bf0:	f043 0308 	orr.w	r3, r3, #8
 8002bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8002bf6:	4b37      	ldr	r3, [pc, #220]	; (8002cd4 <MX_GPIO_Init+0x178>)
 8002bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfa:	f003 0308 	and.w	r3, r3, #8
 8002bfe:	607b      	str	r3, [r7, #4]
 8002c00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002c02:	4b34      	ldr	r3, [pc, #208]	; (8002cd4 <MX_GPIO_Init+0x178>)
 8002c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c06:	4a33      	ldr	r2, [pc, #204]	; (8002cd4 <MX_GPIO_Init+0x178>)
 8002c08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c0e:	4b31      	ldr	r3, [pc, #196]	; (8002cd4 <MX_GPIO_Init+0x178>)
 8002c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c16:	603b      	str	r3, [r7, #0]
 8002c18:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f244 0181 	movw	r1, #16513	; 0x4081
 8002c20:	482d      	ldr	r0, [pc, #180]	; (8002cd8 <MX_GPIO_Init+0x17c>)
 8002c22:	f002 fa29 	bl	8005078 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, MOTOR5_INA_Pin|MOTOR5_INB_Pin|MOTOR1_INA_Pin|MOTOR1_INB_Pin
 8002c26:	2200      	movs	r2, #0
 8002c28:	f24c 01ff 	movw	r1, #49407	; 0xc0ff
 8002c2c:	482b      	ldr	r0, [pc, #172]	; (8002cdc <MX_GPIO_Init+0x180>)
 8002c2e:	f002 fa23 	bl	8005078 <HAL_GPIO_WritePin>
                          |MOTOR2_INA_Pin|MOTOR2_INB_Pin|MOTOR3_INA_Pin|MOTOR3_INB_Pin
                          |MOTOR4_INA_Pin|MOTOR4_INB_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, MOTOR6_INA_Pin|MOTOR6_INB_Pin|PIN_TOGGLE_Pin|MOTORS_EN_Pin
 8002c32:	2200      	movs	r2, #0
 8002c34:	f647 616c 	movw	r1, #32364	; 0x7e6c
 8002c38:	4829      	ldr	r0, [pc, #164]	; (8002ce0 <MX_GPIO_Init+0x184>)
 8002c3a:	f002 fa1d 	bl	8005078 <HAL_GPIO_WritePin>
                          |MOTOR1_END_Pin|MOTOR2_END_Pin|MOTOR3_END_Pin|MOTOR4_END_Pin
                          |MOTOR5_END_Pin|MOTOR6_END_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002c3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002c44:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002c48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002c4e:	f107 031c 	add.w	r3, r7, #28
 8002c52:	4619      	mov	r1, r3
 8002c54:	4823      	ldr	r0, [pc, #140]	; (8002ce4 <MX_GPIO_Init+0x188>)
 8002c56:	f002 f84b 	bl	8004cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8002c5a:	f244 0381 	movw	r3, #16513	; 0x4081
 8002c5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c60:	2301      	movs	r3, #1
 8002c62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c64:	2300      	movs	r3, #0
 8002c66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c6c:	f107 031c 	add.w	r3, r7, #28
 8002c70:	4619      	mov	r1, r3
 8002c72:	4819      	ldr	r0, [pc, #100]	; (8002cd8 <MX_GPIO_Init+0x17c>)
 8002c74:	f002 f83c 	bl	8004cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = MOTOR5_INA_Pin|MOTOR5_INB_Pin|MOTOR1_INA_Pin|MOTOR1_INB_Pin
 8002c78:	f24c 03ff 	movw	r3, #49407	; 0xc0ff
 8002c7c:	61fb      	str	r3, [r7, #28]
                          |MOTOR2_INA_Pin|MOTOR2_INB_Pin|MOTOR3_INA_Pin|MOTOR3_INB_Pin
                          |MOTOR4_INA_Pin|MOTOR4_INB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c82:	2300      	movs	r3, #0
 8002c84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c86:	2300      	movs	r3, #0
 8002c88:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c8a:	f107 031c 	add.w	r3, r7, #28
 8002c8e:	4619      	mov	r1, r3
 8002c90:	4812      	ldr	r0, [pc, #72]	; (8002cdc <MX_GPIO_Init+0x180>)
 8002c92:	f002 f82d 	bl	8004cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin
                           PGPin PGPin */
  GPIO_InitStruct.Pin = MOTOR6_INA_Pin|MOTOR6_INB_Pin|PIN_TOGGLE_Pin|MOTORS_EN_Pin
 8002c96:	f647 636c 	movw	r3, #32364	; 0x7e6c
 8002c9a:	61fb      	str	r3, [r7, #28]
                          |MOTOR1_END_Pin|MOTOR2_END_Pin|MOTOR3_END_Pin|MOTOR4_END_Pin
                          |MOTOR5_END_Pin|MOTOR6_END_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002ca8:	f107 031c 	add.w	r3, r7, #28
 8002cac:	4619      	mov	r1, r3
 8002cae:	480c      	ldr	r0, [pc, #48]	; (8002ce0 <MX_GPIO_Init+0x184>)
 8002cb0:	f002 f81e 	bl	8004cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002cb4:	2380      	movs	r3, #128	; 0x80
 8002cb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002cc0:	f107 031c 	add.w	r3, r7, #28
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	4806      	ldr	r0, [pc, #24]	; (8002ce0 <MX_GPIO_Init+0x184>)
 8002cc8:	f002 f812 	bl	8004cf0 <HAL_GPIO_Init>

}
 8002ccc:	bf00      	nop
 8002cce:	3730      	adds	r7, #48	; 0x30
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	40023800 	.word	0x40023800
 8002cd8:	40020400 	.word	0x40020400
 8002cdc:	40020c00 	.word	0x40020c00
 8002ce0:	40021800 	.word	0x40021800
 8002ce4:	40020800 	.word	0x40020800

08002ce8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002cec:	f001 fab7 	bl	800425e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002cf0:	f000 f81e 	bl	8002d30 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002cf4:	f7ff ff32 	bl	8002b5c <MX_GPIO_Init>
  MX_DMA_Init();
 8002cf8:	f7ff fd48 	bl	800278c <MX_DMA_Init>
  MX_USART3_UART_Init();
 8002cfc:	f001 f8be 	bl	8003e7c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8002d00:	f001 f9bc 	bl	800407c <MX_USB_OTG_FS_PCD_Init>
  MX_TIM1_Init();
 8002d04:	f000 fc36 	bl	8003574 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002d08:	f000 fce8 	bl	80036dc <MX_TIM2_Init>
  MX_TIM3_Init();
 8002d0c:	f000 fd3a 	bl	8003784 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002d10:	f000 fd8e 	bl	8003830 <MX_TIM4_Init>
  MX_TIM5_Init();
 8002d14:	f000 fde2 	bl	80038dc <MX_TIM5_Init>
  MX_TIM8_Init();
 8002d18:	f000 fe36 	bl	8003988 <MX_TIM8_Init>
  MX_TIM9_Init();
 8002d1c:	f000 fe8e 	bl	8003a3c <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8002d20:	f006 fb92 	bl	8009448 <osKernelInitialize>
  MX_FREERTOS_Init();
 8002d24:	f7ff fe02 	bl	800292c <_Z16MX_FREERTOS_Initv>

  /* Start scheduler */
  osKernelStart();
 8002d28:	f006 fbc2 	bl	80094b0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002d2c:	e7fe      	b.n	8002d2c <main+0x44>
	...

08002d30 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b094      	sub	sp, #80	; 0x50
 8002d34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d36:	f107 031c 	add.w	r3, r7, #28
 8002d3a:	2234      	movs	r2, #52	; 0x34
 8002d3c:	2100      	movs	r1, #0
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f018 fb20 	bl	801b384 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d44:	f107 0308 	add.w	r3, r7, #8
 8002d48:	2200      	movs	r2, #0
 8002d4a:	601a      	str	r2, [r3, #0]
 8002d4c:	605a      	str	r2, [r3, #4]
 8002d4e:	609a      	str	r2, [r3, #8]
 8002d50:	60da      	str	r2, [r3, #12]
 8002d52:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002d54:	f002 faf2 	bl	800533c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d58:	4b33      	ldr	r3, [pc, #204]	; (8002e28 <_Z18SystemClock_Configv+0xf8>)
 8002d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5c:	4a32      	ldr	r2, [pc, #200]	; (8002e28 <_Z18SystemClock_Configv+0xf8>)
 8002d5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d62:	6413      	str	r3, [r2, #64]	; 0x40
 8002d64:	4b30      	ldr	r3, [pc, #192]	; (8002e28 <_Z18SystemClock_Configv+0xf8>)
 8002d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d6c:	607b      	str	r3, [r7, #4]
 8002d6e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002d70:	4b2e      	ldr	r3, [pc, #184]	; (8002e2c <_Z18SystemClock_Configv+0xfc>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002d78:	4a2c      	ldr	r2, [pc, #176]	; (8002e2c <_Z18SystemClock_Configv+0xfc>)
 8002d7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d7e:	6013      	str	r3, [r2, #0]
 8002d80:	4b2a      	ldr	r3, [pc, #168]	; (8002e2c <_Z18SystemClock_Configv+0xfc>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002d88:	603b      	str	r3, [r7, #0]
 8002d8a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002d90:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002d94:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d96:	2302      	movs	r3, #2
 8002d98:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002d9a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002d9e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002da0:	2304      	movs	r3, #4
 8002da2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8002da4:	2360      	movs	r3, #96	; 0x60
 8002da6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002da8:	2302      	movs	r3, #2
 8002daa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002dac:	2304      	movs	r3, #4
 8002dae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002db0:	2302      	movs	r3, #2
 8002db2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002db4:	f107 031c 	add.w	r3, r7, #28
 8002db8:	4618      	mov	r0, r3
 8002dba:	f002 fb1f 	bl	80053fc <HAL_RCC_OscConfig>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	bf14      	ite	ne
 8002dc4:	2301      	movne	r3, #1
 8002dc6:	2300      	moveq	r3, #0
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d001      	beq.n	8002dd2 <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 8002dce:	f000 f841 	bl	8002e54 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002dd2:	f002 fac3 	bl	800535c <HAL_PWREx_EnableOverDrive>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	bf14      	ite	ne
 8002ddc:	2301      	movne	r3, #1
 8002dde:	2300      	moveq	r3, #0
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d001      	beq.n	8002dea <_Z18SystemClock_Configv+0xba>
  {
    Error_Handler();
 8002de6:	f000 f835 	bl	8002e54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002dea:	230f      	movs	r3, #15
 8002dec:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002dee:	2302      	movs	r3, #2
 8002df0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002df2:	2300      	movs	r3, #0
 8002df4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002df6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002dfa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002e00:	f107 0308 	add.w	r3, r7, #8
 8002e04:	2103      	movs	r1, #3
 8002e06:	4618      	mov	r0, r3
 8002e08:	f002 fda6 	bl	8005958 <HAL_RCC_ClockConfig>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	bf14      	ite	ne
 8002e12:	2301      	movne	r3, #1
 8002e14:	2300      	moveq	r3, #0
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d001      	beq.n	8002e20 <_Z18SystemClock_Configv+0xf0>
  {
    Error_Handler();
 8002e1c:	f000 f81a 	bl	8002e54 <Error_Handler>
  }
}
 8002e20:	bf00      	nop
 8002e22:	3750      	adds	r7, #80	; 0x50
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	40023800 	.word	0x40023800
 8002e2c:	40007000 	.word	0x40007000

08002e30 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a04      	ldr	r2, [pc, #16]	; (8002e50 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d101      	bne.n	8002e46 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002e42:	f001 fa19 	bl	8004278 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002e46:	bf00      	nop
 8002e48:	3708      	adds	r7, #8
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	40001000 	.word	0x40001000

08002e54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e54:	b480      	push	{r7}
 8002e56:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002e58:	b672      	cpsid	i
}
 8002e5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e5c:	e7fe      	b.n	8002e5c <Error_Handler+0x8>
	...

08002e60 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8002e6a:	4b0c      	ldr	r3, [pc, #48]	; (8002e9c <microros_allocate+0x3c>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	461a      	mov	r2, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	4413      	add	r3, r2
 8002e74:	461a      	mov	r2, r3
 8002e76:	4b09      	ldr	r3, [pc, #36]	; (8002e9c <microros_allocate+0x3c>)
 8002e78:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002e7a:	4b09      	ldr	r3, [pc, #36]	; (8002ea0 <microros_allocate+0x40>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	461a      	mov	r2, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	4413      	add	r3, r2
 8002e84:	461a      	mov	r2, r3
 8002e86:	4b06      	ldr	r3, [pc, #24]	; (8002ea0 <microros_allocate+0x40>)
 8002e88:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f7ff fa2a 	bl	80022e4 <pvPortMallocMicroROS>
 8002e90:	4603      	mov	r3, r0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3708      	adds	r7, #8
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	200065c8 	.word	0x200065c8
 8002ea0:	200065cc 	.word	0x200065cc

08002ea4 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d00c      	beq.n	8002ece <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f7ff fb3d 	bl	8002534 <getBlockSize>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	4a06      	ldr	r2, [pc, #24]	; (8002ed8 <microros_deallocate+0x34>)
 8002ebe:	6812      	ldr	r2, [r2, #0]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	4b04      	ldr	r3, [pc, #16]	; (8002ed8 <microros_deallocate+0x34>)
 8002ec6:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f7ff fad5 	bl	8002478 <vPortFreeMicroROS>
  }
}
 8002ece:	bf00      	nop
 8002ed0:	3708      	adds	r7, #8
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	200065cc 	.word	0x200065cc

08002edc <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	60b9      	str	r1, [r7, #8]
 8002ee6:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8002ee8:	4b15      	ldr	r3, [pc, #84]	; (8002f40 <microros_reallocate+0x64>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	461a      	mov	r2, r3
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	4413      	add	r3, r2
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	4b12      	ldr	r3, [pc, #72]	; (8002f40 <microros_reallocate+0x64>)
 8002ef6:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002ef8:	4b12      	ldr	r3, [pc, #72]	; (8002f44 <microros_reallocate+0x68>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	461a      	mov	r2, r3
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	4413      	add	r3, r2
 8002f02:	461a      	mov	r2, r3
 8002f04:	4b0f      	ldr	r3, [pc, #60]	; (8002f44 <microros_reallocate+0x68>)
 8002f06:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d104      	bne.n	8002f18 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8002f0e:	68b8      	ldr	r0, [r7, #8]
 8002f10:	f7ff f9e8 	bl	80022e4 <pvPortMallocMicroROS>
 8002f14:	4603      	mov	r3, r0
 8002f16:	e00e      	b.n	8002f36 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8002f18:	68f8      	ldr	r0, [r7, #12]
 8002f1a:	f7ff fb0b 	bl	8002534 <getBlockSize>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	4a08      	ldr	r2, [pc, #32]	; (8002f44 <microros_reallocate+0x68>)
 8002f22:	6812      	ldr	r2, [r2, #0]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	461a      	mov	r2, r3
 8002f28:	4b06      	ldr	r3, [pc, #24]	; (8002f44 <microros_reallocate+0x68>)
 8002f2a:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8002f2c:	68b9      	ldr	r1, [r7, #8]
 8002f2e:	68f8      	ldr	r0, [r7, #12]
 8002f30:	f7ff fb1e 	bl	8002570 <pvPortReallocMicroROS>
 8002f34:	4603      	mov	r3, r0
  }
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3710      	adds	r7, #16
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	200065c8 	.word	0x200065c8
 8002f44:	200065cc 	.word	0x200065cc

08002f48 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	60f8      	str	r0, [r7, #12]
 8002f50:	60b9      	str	r1, [r7, #8]
 8002f52:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	68ba      	ldr	r2, [r7, #8]
 8002f58:	fb02 f303 	mul.w	r3, r2, r3
 8002f5c:	4a0c      	ldr	r2, [pc, #48]	; (8002f90 <microros_zero_allocate+0x48>)
 8002f5e:	6812      	ldr	r2, [r2, #0]
 8002f60:	4413      	add	r3, r2
 8002f62:	461a      	mov	r2, r3
 8002f64:	4b0a      	ldr	r3, [pc, #40]	; (8002f90 <microros_zero_allocate+0x48>)
 8002f66:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	68ba      	ldr	r2, [r7, #8]
 8002f6c:	fb02 f303 	mul.w	r3, r2, r3
 8002f70:	4a08      	ldr	r2, [pc, #32]	; (8002f94 <microros_zero_allocate+0x4c>)
 8002f72:	6812      	ldr	r2, [r2, #0]
 8002f74:	4413      	add	r3, r2
 8002f76:	461a      	mov	r2, r3
 8002f78:	4b06      	ldr	r3, [pc, #24]	; (8002f94 <microros_zero_allocate+0x4c>)
 8002f7a:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8002f7c:	68b9      	ldr	r1, [r7, #8]
 8002f7e:	68f8      	ldr	r0, [r7, #12]
 8002f80:	f7ff fb23 	bl	80025ca <pvPortCallocMicroROS>
 8002f84:	4603      	mov	r3, r0
 8002f86:	4618      	mov	r0, r3
 8002f88:	3710      	adds	r7, #16
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	200065c8 	.word	0x200065c8
 8002f94:	200065cc 	.word	0x200065cc

08002f98 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8002f98:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002f9c:	b086      	sub	sp, #24
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002fa4:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8002faa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002fae:	a320      	add	r3, pc, #128	; (adr r3, 8003030 <UTILS_NanosecondsToTimespec+0x98>)
 8002fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fb4:	f7fd f9ac 	bl	8000310 <__aeabi_ldivmod>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	460b      	mov	r3, r1
 8002fbc:	6879      	ldr	r1, [r7, #4]
 8002fbe:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8002fc2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002fc6:	a31a      	add	r3, pc, #104	; (adr r3, 8003030 <UTILS_NanosecondsToTimespec+0x98>)
 8002fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fcc:	f7fd f9a0 	bl	8000310 <__aeabi_ldivmod>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	da20      	bge.n	800301e <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	4a11      	ldr	r2, [pc, #68]	; (8003028 <UTILS_NanosecondsToTimespec+0x90>)
 8002fe2:	fb82 1203 	smull	r1, r2, r2, r3
 8002fe6:	1712      	asrs	r2, r2, #28
 8002fe8:	17db      	asrs	r3, r3, #31
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	3301      	adds	r3, #1
 8002fee:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ff6:	6979      	ldr	r1, [r7, #20]
 8002ff8:	17c8      	asrs	r0, r1, #31
 8002ffa:	460c      	mov	r4, r1
 8002ffc:	4605      	mov	r5, r0
 8002ffe:	ebb2 0804 	subs.w	r8, r2, r4
 8003002:	eb63 0905 	sbc.w	r9, r3, r5
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	689a      	ldr	r2, [r3, #8]
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	4906      	ldr	r1, [pc, #24]	; (800302c <UTILS_NanosecondsToTimespec+0x94>)
 8003014:	fb01 f303 	mul.w	r3, r1, r3
 8003018:	441a      	add	r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	609a      	str	r2, [r3, #8]
    }
}
 800301e:	bf00      	nop
 8003020:	3718      	adds	r7, #24
 8003022:	46bd      	mov	sp, r7
 8003024:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003028:	44b82fa1 	.word	0x44b82fa1
 800302c:	3b9aca00 	.word	0x3b9aca00
 8003030:	3b9aca00 	.word	0x3b9aca00
 8003034:	00000000 	.word	0x00000000

08003038 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8003038:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800303c:	b08e      	sub	sp, #56	; 0x38
 800303e:	af00      	add	r7, sp, #0
 8003040:	6278      	str	r0, [r7, #36]	; 0x24
 8003042:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8003044:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003048:	2300      	movs	r3, #0
 800304a:	6013      	str	r3, [r2, #0]
 800304c:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 800304e:	f04f 0200 	mov.w	r2, #0
 8003052:	f04f 0300 	mov.w	r3, #0
 8003056:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 800305a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800305e:	4618      	mov	r0, r3
 8003060:	f007 fe26 	bl	800acb0 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8003064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003066:	17da      	asrs	r2, r3, #31
 8003068:	61bb      	str	r3, [r7, #24]
 800306a:	61fa      	str	r2, [r7, #28]
 800306c:	f04f 0200 	mov.w	r2, #0
 8003070:	f04f 0300 	mov.w	r3, #0
 8003074:	69b9      	ldr	r1, [r7, #24]
 8003076:	000b      	movs	r3, r1
 8003078:	2200      	movs	r2, #0
 800307a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 800307e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003080:	2200      	movs	r2, #0
 8003082:	461c      	mov	r4, r3
 8003084:	4615      	mov	r5, r2
 8003086:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800308a:	1911      	adds	r1, r2, r4
 800308c:	60b9      	str	r1, [r7, #8]
 800308e:	416b      	adcs	r3, r5
 8003090:	60fb      	str	r3, [r7, #12]
 8003092:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003096:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 800309a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800309e:	4602      	mov	r2, r0
 80030a0:	460b      	mov	r3, r1
 80030a2:	f04f 0400 	mov.w	r4, #0
 80030a6:	f04f 0500 	mov.w	r5, #0
 80030aa:	015d      	lsls	r5, r3, #5
 80030ac:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 80030b0:	0154      	lsls	r4, r2, #5
 80030b2:	4622      	mov	r2, r4
 80030b4:	462b      	mov	r3, r5
 80030b6:	ebb2 0800 	subs.w	r8, r2, r0
 80030ba:	eb63 0901 	sbc.w	r9, r3, r1
 80030be:	f04f 0200 	mov.w	r2, #0
 80030c2:	f04f 0300 	mov.w	r3, #0
 80030c6:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80030ca:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80030ce:	ea4f 2248 	mov.w	r2, r8, lsl #9
 80030d2:	4690      	mov	r8, r2
 80030d4:	4699      	mov	r9, r3
 80030d6:	eb18 0a00 	adds.w	sl, r8, r0
 80030da:	eb49 0b01 	adc.w	fp, r9, r1
 80030de:	f04f 0200 	mov.w	r2, #0
 80030e2:	f04f 0300 	mov.w	r3, #0
 80030e6:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80030ea:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80030ee:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80030f2:	ebb2 040a 	subs.w	r4, r2, sl
 80030f6:	603c      	str	r4, [r7, #0]
 80030f8:	eb63 030b 	sbc.w	r3, r3, fp
 80030fc:	607b      	str	r3, [r7, #4]
 80030fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003102:	4623      	mov	r3, r4
 8003104:	181b      	adds	r3, r3, r0
 8003106:	613b      	str	r3, [r7, #16]
 8003108:	462b      	mov	r3, r5
 800310a:	eb41 0303 	adc.w	r3, r1, r3
 800310e:	617b      	str	r3, [r7, #20]
 8003110:	6a3a      	ldr	r2, [r7, #32]
 8003112:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003116:	f7ff ff3f 	bl	8002f98 <UTILS_NanosecondsToTimespec>

    return 0;
 800311a:	2300      	movs	r3, #0
 800311c:	4618      	mov	r0, r3
 800311e:	3738      	adds	r7, #56	; 0x38
 8003120:	46bd      	mov	sp, r7
 8003122:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003128 <_Z41__static_initialization_and_destruction_0ii>:

GPIO_TypeDef* Port1A, Port2A, Port3A, Port4A, Port5A, Port6A;
GPIO_TypeDef* Port1B, Port2B, Port3B, Port4B, Port5B, Port6B;

uint16_t Pin1A, Pin2A, Pin3A, Pin4A, Pin5A, Pin6A;
uint16_t Pin1B, Pin2B, Pin3B, Pin4B, Pin5B, Pin6B;
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	6039      	str	r1, [r7, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2b01      	cmp	r3, #1
 8003136:	d137      	bne.n	80031a8 <_Z41__static_initialization_and_destruction_0ii+0x80>
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800313e:	4293      	cmp	r3, r2
 8003140:	d132      	bne.n	80031a8 <_Z41__static_initialization_and_destruction_0ii+0x80>
PinControl INA1;
 8003142:	481b      	ldr	r0, [pc, #108]	; (80031b0 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8003144:	f7fe f8cb 	bl	80012de <_ZN10PinControlC1Ev>
PinControl INA2, INA3, INA4, INA5, INA6;
 8003148:	481a      	ldr	r0, [pc, #104]	; (80031b4 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 800314a:	f7fe f8c8 	bl	80012de <_ZN10PinControlC1Ev>
 800314e:	481a      	ldr	r0, [pc, #104]	; (80031b8 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8003150:	f7fe f8c5 	bl	80012de <_ZN10PinControlC1Ev>
 8003154:	4819      	ldr	r0, [pc, #100]	; (80031bc <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8003156:	f7fe f8c2 	bl	80012de <_ZN10PinControlC1Ev>
 800315a:	4819      	ldr	r0, [pc, #100]	; (80031c0 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 800315c:	f7fe f8bf 	bl	80012de <_ZN10PinControlC1Ev>
 8003160:	4818      	ldr	r0, [pc, #96]	; (80031c4 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8003162:	f7fe f8bc 	bl	80012de <_ZN10PinControlC1Ev>
PinControl INB1, INB2, INB3, INB4, INB5, INB6;
 8003166:	4818      	ldr	r0, [pc, #96]	; (80031c8 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8003168:	f7fe f8b9 	bl	80012de <_ZN10PinControlC1Ev>
 800316c:	4817      	ldr	r0, [pc, #92]	; (80031cc <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 800316e:	f7fe f8b6 	bl	80012de <_ZN10PinControlC1Ev>
 8003172:	4817      	ldr	r0, [pc, #92]	; (80031d0 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8003174:	f7fe f8b3 	bl	80012de <_ZN10PinControlC1Ev>
 8003178:	4816      	ldr	r0, [pc, #88]	; (80031d4 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 800317a:	f7fe f8b0 	bl	80012de <_ZN10PinControlC1Ev>
 800317e:	4816      	ldr	r0, [pc, #88]	; (80031d8 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8003180:	f7fe f8ad 	bl	80012de <_ZN10PinControlC1Ev>
 8003184:	4815      	ldr	r0, [pc, #84]	; (80031dc <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8003186:	f7fe f8aa 	bl	80012de <_ZN10PinControlC1Ev>
PinMeasure END1, END2, END3, END4, END5;
 800318a:	4815      	ldr	r0, [pc, #84]	; (80031e0 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 800318c:	f7fe f8e2 	bl	8001354 <_ZN10PinMeasureC1Ev>
 8003190:	4814      	ldr	r0, [pc, #80]	; (80031e4 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8003192:	f7fe f8df 	bl	8001354 <_ZN10PinMeasureC1Ev>
 8003196:	4814      	ldr	r0, [pc, #80]	; (80031e8 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8003198:	f7fe f8dc 	bl	8001354 <_ZN10PinMeasureC1Ev>
 800319c:	4813      	ldr	r0, [pc, #76]	; (80031ec <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 800319e:	f7fe f8d9 	bl	8001354 <_ZN10PinMeasureC1Ev>
 80031a2:	4813      	ldr	r0, [pc, #76]	; (80031f0 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 80031a4:	f7fe f8d6 	bl	8001354 <_ZN10PinMeasureC1Ev>
uint16_t Pin1B, Pin2B, Pin3B, Pin4B, Pin5B, Pin6B;
 80031a8:	bf00      	nop
 80031aa:	3708      	adds	r7, #8
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	200065d0 	.word	0x200065d0
 80031b4:	200065e0 	.word	0x200065e0
 80031b8:	200065f0 	.word	0x200065f0
 80031bc:	20006600 	.word	0x20006600
 80031c0:	20006610 	.word	0x20006610
 80031c4:	20006620 	.word	0x20006620
 80031c8:	20006630 	.word	0x20006630
 80031cc:	20006640 	.word	0x20006640
 80031d0:	20006650 	.word	0x20006650
 80031d4:	20006660 	.word	0x20006660
 80031d8:	20006670 	.word	0x20006670
 80031dc:	20006680 	.word	0x20006680
 80031e0:	20006690 	.word	0x20006690
 80031e4:	200066a0 	.word	0x200066a0
 80031e8:	200066b0 	.word	0x200066b0
 80031ec:	200066c0 	.word	0x200066c0
 80031f0:	200066d0 	.word	0x200066d0

080031f4 <_GLOBAL__sub_I_INA1>:
 80031f4:	b580      	push	{r7, lr}
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80031fc:	2001      	movs	r0, #1
 80031fe:	f7ff ff93 	bl	8003128 <_Z41__static_initialization_and_destruction_0ii>
 8003202:	bd80      	pop	{r7, pc}

08003204 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800320a:	4b11      	ldr	r3, [pc, #68]	; (8003250 <HAL_MspInit+0x4c>)
 800320c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320e:	4a10      	ldr	r2, [pc, #64]	; (8003250 <HAL_MspInit+0x4c>)
 8003210:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003214:	6413      	str	r3, [r2, #64]	; 0x40
 8003216:	4b0e      	ldr	r3, [pc, #56]	; (8003250 <HAL_MspInit+0x4c>)
 8003218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800321e:	607b      	str	r3, [r7, #4]
 8003220:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003222:	4b0b      	ldr	r3, [pc, #44]	; (8003250 <HAL_MspInit+0x4c>)
 8003224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003226:	4a0a      	ldr	r2, [pc, #40]	; (8003250 <HAL_MspInit+0x4c>)
 8003228:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800322c:	6453      	str	r3, [r2, #68]	; 0x44
 800322e:	4b08      	ldr	r3, [pc, #32]	; (8003250 <HAL_MspInit+0x4c>)
 8003230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003232:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003236:	603b      	str	r3, [r7, #0]
 8003238:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800323a:	2200      	movs	r2, #0
 800323c:	210f      	movs	r1, #15
 800323e:	f06f 0001 	mvn.w	r0, #1
 8003242:	f001 f915 	bl	8004470 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003246:	bf00      	nop
 8003248:	3708      	adds	r7, #8
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	40023800 	.word	0x40023800

08003254 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b08e      	sub	sp, #56	; 0x38
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800325c:	2300      	movs	r3, #0
 800325e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003260:	2300      	movs	r3, #0
 8003262:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003264:	4b33      	ldr	r3, [pc, #204]	; (8003334 <HAL_InitTick+0xe0>)
 8003266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003268:	4a32      	ldr	r2, [pc, #200]	; (8003334 <HAL_InitTick+0xe0>)
 800326a:	f043 0310 	orr.w	r3, r3, #16
 800326e:	6413      	str	r3, [r2, #64]	; 0x40
 8003270:	4b30      	ldr	r3, [pc, #192]	; (8003334 <HAL_InitTick+0xe0>)
 8003272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003274:	f003 0310 	and.w	r3, r3, #16
 8003278:	60fb      	str	r3, [r7, #12]
 800327a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800327c:	f107 0210 	add.w	r2, r7, #16
 8003280:	f107 0314 	add.w	r3, r7, #20
 8003284:	4611      	mov	r1, r2
 8003286:	4618      	mov	r0, r3
 8003288:	f002 fd8c 	bl	8005da4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800328c:	6a3b      	ldr	r3, [r7, #32]
 800328e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003292:	2b00      	cmp	r3, #0
 8003294:	d103      	bne.n	800329e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003296:	f002 fd5d 	bl	8005d54 <HAL_RCC_GetPCLK1Freq>
 800329a:	6378      	str	r0, [r7, #52]	; 0x34
 800329c:	e004      	b.n	80032a8 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800329e:	f002 fd59 	bl	8005d54 <HAL_RCC_GetPCLK1Freq>
 80032a2:	4603      	mov	r3, r0
 80032a4:	005b      	lsls	r3, r3, #1
 80032a6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80032a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032aa:	4a23      	ldr	r2, [pc, #140]	; (8003338 <HAL_InitTick+0xe4>)
 80032ac:	fba2 2303 	umull	r2, r3, r2, r3
 80032b0:	0c9b      	lsrs	r3, r3, #18
 80032b2:	3b01      	subs	r3, #1
 80032b4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80032b6:	4b21      	ldr	r3, [pc, #132]	; (800333c <HAL_InitTick+0xe8>)
 80032b8:	4a21      	ldr	r2, [pc, #132]	; (8003340 <HAL_InitTick+0xec>)
 80032ba:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80032bc:	4b1f      	ldr	r3, [pc, #124]	; (800333c <HAL_InitTick+0xe8>)
 80032be:	f240 32e7 	movw	r2, #999	; 0x3e7
 80032c2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80032c4:	4a1d      	ldr	r2, [pc, #116]	; (800333c <HAL_InitTick+0xe8>)
 80032c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032c8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80032ca:	4b1c      	ldr	r3, [pc, #112]	; (800333c <HAL_InitTick+0xe8>)
 80032cc:	2200      	movs	r2, #0
 80032ce:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032d0:	4b1a      	ldr	r3, [pc, #104]	; (800333c <HAL_InitTick+0xe8>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032d6:	4b19      	ldr	r3, [pc, #100]	; (800333c <HAL_InitTick+0xe8>)
 80032d8:	2200      	movs	r2, #0
 80032da:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80032dc:	4817      	ldr	r0, [pc, #92]	; (800333c <HAL_InitTick+0xe8>)
 80032de:	f003 f9bb 	bl	8006658 <HAL_TIM_Base_Init>
 80032e2:	4603      	mov	r3, r0
 80032e4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80032e8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d11b      	bne.n	8003328 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80032f0:	4812      	ldr	r0, [pc, #72]	; (800333c <HAL_InitTick+0xe8>)
 80032f2:	f003 fa13 	bl	800671c <HAL_TIM_Base_Start_IT>
 80032f6:	4603      	mov	r3, r0
 80032f8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80032fc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003300:	2b00      	cmp	r3, #0
 8003302:	d111      	bne.n	8003328 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003304:	2036      	movs	r0, #54	; 0x36
 8003306:	f001 f8cf 	bl	80044a8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2b0f      	cmp	r3, #15
 800330e:	d808      	bhi.n	8003322 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8003310:	2200      	movs	r2, #0
 8003312:	6879      	ldr	r1, [r7, #4]
 8003314:	2036      	movs	r0, #54	; 0x36
 8003316:	f001 f8ab 	bl	8004470 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800331a:	4a0a      	ldr	r2, [pc, #40]	; (8003344 <HAL_InitTick+0xf0>)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6013      	str	r3, [r2, #0]
 8003320:	e002      	b.n	8003328 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003328:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800332c:	4618      	mov	r0, r3
 800332e:	3738      	adds	r7, #56	; 0x38
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	40023800 	.word	0x40023800
 8003338:	431bde83 	.word	0x431bde83
 800333c:	200066e0 	.word	0x200066e0
 8003340:	40001000 	.word	0x40001000
 8003344:	20000008 	.word	0x20000008

08003348 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003348:	b480      	push	{r7}
 800334a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800334c:	e7fe      	b.n	800334c <NMI_Handler+0x4>

0800334e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800334e:	b480      	push	{r7}
 8003350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003352:	e7fe      	b.n	8003352 <HardFault_Handler+0x4>

08003354 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003354:	b480      	push	{r7}
 8003356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003358:	e7fe      	b.n	8003358 <MemManage_Handler+0x4>

0800335a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800335a:	b480      	push	{r7}
 800335c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800335e:	e7fe      	b.n	800335e <BusFault_Handler+0x4>

08003360 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003360:	b480      	push	{r7}
 8003362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003364:	e7fe      	b.n	8003364 <UsageFault_Handler+0x4>

08003366 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003366:	b480      	push	{r7}
 8003368:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800336a:	bf00      	nop
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003378:	4802      	ldr	r0, [pc, #8]	; (8003384 <DMA1_Stream1_IRQHandler+0x10>)
 800337a:	f001 fa43 	bl	8004804 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800337e:	bf00      	nop
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	20006a30 	.word	0x20006a30

08003388 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800338c:	4802      	ldr	r0, [pc, #8]	; (8003398 <DMA1_Stream3_IRQHandler+0x10>)
 800338e:	f001 fa39 	bl	8004804 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003392:	bf00      	nop
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	200069d0 	.word	0x200069d0

0800339c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80033a0:	4802      	ldr	r0, [pc, #8]	; (80033ac <USART3_IRQHandler+0x10>)
 80033a2:	f004 fb55 	bl	8007a50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80033a6:	bf00      	nop
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	20006948 	.word	0x20006948

080033b0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80033b4:	4802      	ldr	r0, [pc, #8]	; (80033c0 <TIM6_DAC_IRQHandler+0x10>)
 80033b6:	f003 fb27 	bl	8006a08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80033ba:	bf00      	nop
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	200066e0 	.word	0x200066e0

080033c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80033c4:	b480      	push	{r7}
 80033c6:	af00      	add	r7, sp, #0
  return 1;
 80033c8:	2301      	movs	r3, #1
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <_kill>:

int _kill(int pid, int sig)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80033de:	f018 f911 	bl	801b604 <__errno>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2216      	movs	r2, #22
 80033e6:	601a      	str	r2, [r3, #0]
  return -1;
 80033e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3708      	adds	r7, #8
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <_exit>:

void _exit (int status)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80033fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f7ff ffe7 	bl	80033d4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003406:	e7fe      	b.n	8003406 <_exit+0x12>

08003408 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b086      	sub	sp, #24
 800340c:	af00      	add	r7, sp, #0
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003414:	2300      	movs	r3, #0
 8003416:	617b      	str	r3, [r7, #20]
 8003418:	e00a      	b.n	8003430 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800341a:	f3af 8000 	nop.w
 800341e:	4601      	mov	r1, r0
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	1c5a      	adds	r2, r3, #1
 8003424:	60ba      	str	r2, [r7, #8]
 8003426:	b2ca      	uxtb	r2, r1
 8003428:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	3301      	adds	r3, #1
 800342e:	617b      	str	r3, [r7, #20]
 8003430:	697a      	ldr	r2, [r7, #20]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	429a      	cmp	r2, r3
 8003436:	dbf0      	blt.n	800341a <_read+0x12>
  }

  return len;
 8003438:	687b      	ldr	r3, [r7, #4]
}
 800343a:	4618      	mov	r0, r3
 800343c:	3718      	adds	r7, #24
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}

08003442 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003442:	b580      	push	{r7, lr}
 8003444:	b086      	sub	sp, #24
 8003446:	af00      	add	r7, sp, #0
 8003448:	60f8      	str	r0, [r7, #12]
 800344a:	60b9      	str	r1, [r7, #8]
 800344c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800344e:	2300      	movs	r3, #0
 8003450:	617b      	str	r3, [r7, #20]
 8003452:	e009      	b.n	8003468 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	1c5a      	adds	r2, r3, #1
 8003458:	60ba      	str	r2, [r7, #8]
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	4618      	mov	r0, r3
 800345e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	3301      	adds	r3, #1
 8003466:	617b      	str	r3, [r7, #20]
 8003468:	697a      	ldr	r2, [r7, #20]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	429a      	cmp	r2, r3
 800346e:	dbf1      	blt.n	8003454 <_write+0x12>
  }
  return len;
 8003470:	687b      	ldr	r3, [r7, #4]
}
 8003472:	4618      	mov	r0, r3
 8003474:	3718      	adds	r7, #24
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}

0800347a <_close>:

int _close(int file)
{
 800347a:	b480      	push	{r7}
 800347c:	b083      	sub	sp, #12
 800347e:	af00      	add	r7, sp, #0
 8003480:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003482:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003486:	4618      	mov	r0, r3
 8003488:	370c      	adds	r7, #12
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr

08003492 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003492:	b480      	push	{r7}
 8003494:	b083      	sub	sp, #12
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
 800349a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80034a2:	605a      	str	r2, [r3, #4]
  return 0;
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	370c      	adds	r7, #12
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr

080034b2 <_isatty>:

int _isatty(int file)
{
 80034b2:	b480      	push	{r7}
 80034b4:	b083      	sub	sp, #12
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80034ba:	2301      	movs	r3, #1
}
 80034bc:	4618      	mov	r0, r3
 80034be:	370c      	adds	r7, #12
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b085      	sub	sp, #20
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	60f8      	str	r0, [r7, #12]
 80034d0:	60b9      	str	r1, [r7, #8]
 80034d2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3714      	adds	r7, #20
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr
	...

080034e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b086      	sub	sp, #24
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80034ec:	4a14      	ldr	r2, [pc, #80]	; (8003540 <_sbrk+0x5c>)
 80034ee:	4b15      	ldr	r3, [pc, #84]	; (8003544 <_sbrk+0x60>)
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80034f8:	4b13      	ldr	r3, [pc, #76]	; (8003548 <_sbrk+0x64>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d102      	bne.n	8003506 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003500:	4b11      	ldr	r3, [pc, #68]	; (8003548 <_sbrk+0x64>)
 8003502:	4a12      	ldr	r2, [pc, #72]	; (800354c <_sbrk+0x68>)
 8003504:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003506:	4b10      	ldr	r3, [pc, #64]	; (8003548 <_sbrk+0x64>)
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4413      	add	r3, r2
 800350e:	693a      	ldr	r2, [r7, #16]
 8003510:	429a      	cmp	r2, r3
 8003512:	d207      	bcs.n	8003524 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003514:	f018 f876 	bl	801b604 <__errno>
 8003518:	4603      	mov	r3, r0
 800351a:	220c      	movs	r2, #12
 800351c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800351e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003522:	e009      	b.n	8003538 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003524:	4b08      	ldr	r3, [pc, #32]	; (8003548 <_sbrk+0x64>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800352a:	4b07      	ldr	r3, [pc, #28]	; (8003548 <_sbrk+0x64>)
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4413      	add	r3, r2
 8003532:	4a05      	ldr	r2, [pc, #20]	; (8003548 <_sbrk+0x64>)
 8003534:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003536:	68fb      	ldr	r3, [r7, #12]
}
 8003538:	4618      	mov	r0, r3
 800353a:	3718      	adds	r7, #24
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	20080000 	.word	0x20080000
 8003544:	00000400 	.word	0x00000400
 8003548:	20006730 	.word	0x20006730
 800354c:	20010b80 	.word	0x20010b80

08003550 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003550:	b480      	push	{r7}
 8003552:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003554:	4b06      	ldr	r3, [pc, #24]	; (8003570 <SystemInit+0x20>)
 8003556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800355a:	4a05      	ldr	r2, [pc, #20]	; (8003570 <SystemInit+0x20>)
 800355c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003560:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003564:	bf00      	nop
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr
 800356e:	bf00      	nop
 8003570:	e000ed00 	.word	0xe000ed00

08003574 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim9;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b096      	sub	sp, #88	; 0x58
 8003578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800357a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800357e:	2200      	movs	r2, #0
 8003580:	601a      	str	r2, [r3, #0]
 8003582:	605a      	str	r2, [r3, #4]
 8003584:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003586:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800358a:	2200      	movs	r2, #0
 800358c:	601a      	str	r2, [r3, #0]
 800358e:	605a      	str	r2, [r3, #4]
 8003590:	609a      	str	r2, [r3, #8]
 8003592:	60da      	str	r2, [r3, #12]
 8003594:	611a      	str	r2, [r3, #16]
 8003596:	615a      	str	r2, [r3, #20]
 8003598:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800359a:	1d3b      	adds	r3, r7, #4
 800359c:	222c      	movs	r2, #44	; 0x2c
 800359e:	2100      	movs	r1, #0
 80035a0:	4618      	mov	r0, r3
 80035a2:	f017 feef 	bl	801b384 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80035a6:	4b4b      	ldr	r3, [pc, #300]	; (80036d4 <MX_TIM1_Init+0x160>)
 80035a8:	4a4b      	ldr	r2, [pc, #300]	; (80036d8 <MX_TIM1_Init+0x164>)
 80035aa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80035ac:	4b49      	ldr	r3, [pc, #292]	; (80036d4 <MX_TIM1_Init+0x160>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035b2:	4b48      	ldr	r3, [pc, #288]	; (80036d4 <MX_TIM1_Init+0x160>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80035b8:	4b46      	ldr	r3, [pc, #280]	; (80036d4 <MX_TIM1_Init+0x160>)
 80035ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80035be:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035c0:	4b44      	ldr	r3, [pc, #272]	; (80036d4 <MX_TIM1_Init+0x160>)
 80035c2:	2200      	movs	r2, #0
 80035c4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80035c6:	4b43      	ldr	r3, [pc, #268]	; (80036d4 <MX_TIM1_Init+0x160>)
 80035c8:	2200      	movs	r2, #0
 80035ca:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035cc:	4b41      	ldr	r3, [pc, #260]	; (80036d4 <MX_TIM1_Init+0x160>)
 80035ce:	2200      	movs	r2, #0
 80035d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80035d2:	4840      	ldr	r0, [pc, #256]	; (80036d4 <MX_TIM1_Init+0x160>)
 80035d4:	f003 f91a 	bl	800680c <HAL_TIM_PWM_Init>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d001      	beq.n	80035e2 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80035de:	f7ff fc39 	bl	8002e54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035e2:	2300      	movs	r3, #0
 80035e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80035e6:	2300      	movs	r3, #0
 80035e8:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035ea:	2300      	movs	r3, #0
 80035ec:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80035ee:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80035f2:	4619      	mov	r1, r3
 80035f4:	4837      	ldr	r0, [pc, #220]	; (80036d4 <MX_TIM1_Init+0x160>)
 80035f6:	f003 ff61 	bl	80074bc <HAL_TIMEx_MasterConfigSynchronization>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d001      	beq.n	8003604 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8003600:	f7ff fc28 	bl	8002e54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003604:	2360      	movs	r3, #96	; 0x60
 8003606:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8003608:	2300      	movs	r3, #0
 800360a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800360c:	2300      	movs	r3, #0
 800360e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003610:	2300      	movs	r3, #0
 8003612:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003614:	2300      	movs	r3, #0
 8003616:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003618:	2300      	movs	r3, #0
 800361a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800361c:	2300      	movs	r3, #0
 800361e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003620:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003624:	2200      	movs	r2, #0
 8003626:	4619      	mov	r1, r3
 8003628:	482a      	ldr	r0, [pc, #168]	; (80036d4 <MX_TIM1_Init+0x160>)
 800362a:	f003 fb0d 	bl	8006c48 <HAL_TIM_PWM_ConfigChannel>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d001      	beq.n	8003638 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8003634:	f7ff fc0e 	bl	8002e54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003638:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800363c:	2204      	movs	r2, #4
 800363e:	4619      	mov	r1, r3
 8003640:	4824      	ldr	r0, [pc, #144]	; (80036d4 <MX_TIM1_Init+0x160>)
 8003642:	f003 fb01 	bl	8006c48 <HAL_TIM_PWM_ConfigChannel>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d001      	beq.n	8003650 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 800364c:	f7ff fc02 	bl	8002e54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003650:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003654:	2208      	movs	r2, #8
 8003656:	4619      	mov	r1, r3
 8003658:	481e      	ldr	r0, [pc, #120]	; (80036d4 <MX_TIM1_Init+0x160>)
 800365a:	f003 faf5 	bl	8006c48 <HAL_TIM_PWM_ConfigChannel>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d001      	beq.n	8003668 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8003664:	f7ff fbf6 	bl	8002e54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003668:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800366c:	220c      	movs	r2, #12
 800366e:	4619      	mov	r1, r3
 8003670:	4818      	ldr	r0, [pc, #96]	; (80036d4 <MX_TIM1_Init+0x160>)
 8003672:	f003 fae9 	bl	8006c48 <HAL_TIM_PWM_ConfigChannel>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d001      	beq.n	8003680 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 800367c:	f7ff fbea 	bl	8002e54 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003680:	2300      	movs	r3, #0
 8003682:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003684:	2300      	movs	r3, #0
 8003686:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003688:	2300      	movs	r3, #0
 800368a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800368c:	2300      	movs	r3, #0
 800368e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003690:	2300      	movs	r3, #0
 8003692:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003694:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003698:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800369a:	2300      	movs	r3, #0
 800369c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800369e:	2300      	movs	r3, #0
 80036a0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80036a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036a6:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80036a8:	2300      	movs	r3, #0
 80036aa:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80036ac:	2300      	movs	r3, #0
 80036ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80036b0:	1d3b      	adds	r3, r7, #4
 80036b2:	4619      	mov	r1, r3
 80036b4:	4807      	ldr	r0, [pc, #28]	; (80036d4 <MX_TIM1_Init+0x160>)
 80036b6:	f003 ff8f 	bl	80075d8 <HAL_TIMEx_ConfigBreakDeadTime>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d001      	beq.n	80036c4 <MX_TIM1_Init+0x150>
  {
    Error_Handler();
 80036c0:	f7ff fbc8 	bl	8002e54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80036c4:	4803      	ldr	r0, [pc, #12]	; (80036d4 <MX_TIM1_Init+0x160>)
 80036c6:	f000 fb7d 	bl	8003dc4 <HAL_TIM_MspPostInit>

}
 80036ca:	bf00      	nop
 80036cc:	3758      	adds	r7, #88	; 0x58
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	20006734 	.word	0x20006734
 80036d8:	40010000 	.word	0x40010000

080036dc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b08c      	sub	sp, #48	; 0x30
 80036e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80036e2:	f107 030c 	add.w	r3, r7, #12
 80036e6:	2224      	movs	r2, #36	; 0x24
 80036e8:	2100      	movs	r1, #0
 80036ea:	4618      	mov	r0, r3
 80036ec:	f017 fe4a 	bl	801b384 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036f0:	463b      	mov	r3, r7
 80036f2:	2200      	movs	r2, #0
 80036f4:	601a      	str	r2, [r3, #0]
 80036f6:	605a      	str	r2, [r3, #4]
 80036f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80036fa:	4b21      	ldr	r3, [pc, #132]	; (8003780 <MX_TIM2_Init+0xa4>)
 80036fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003700:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003702:	4b1f      	ldr	r3, [pc, #124]	; (8003780 <MX_TIM2_Init+0xa4>)
 8003704:	2200      	movs	r2, #0
 8003706:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003708:	4b1d      	ldr	r3, [pc, #116]	; (8003780 <MX_TIM2_Init+0xa4>)
 800370a:	2200      	movs	r2, #0
 800370c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800370e:	4b1c      	ldr	r3, [pc, #112]	; (8003780 <MX_TIM2_Init+0xa4>)
 8003710:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003714:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003716:	4b1a      	ldr	r3, [pc, #104]	; (8003780 <MX_TIM2_Init+0xa4>)
 8003718:	2200      	movs	r2, #0
 800371a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800371c:	4b18      	ldr	r3, [pc, #96]	; (8003780 <MX_TIM2_Init+0xa4>)
 800371e:	2200      	movs	r2, #0
 8003720:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003722:	2301      	movs	r3, #1
 8003724:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003726:	2300      	movs	r3, #0
 8003728:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800372a:	2301      	movs	r3, #1
 800372c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800372e:	2300      	movs	r3, #0
 8003730:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003732:	2300      	movs	r3, #0
 8003734:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003736:	2300      	movs	r3, #0
 8003738:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800373a:	2301      	movs	r3, #1
 800373c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800373e:	2300      	movs	r3, #0
 8003740:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003742:	2300      	movs	r3, #0
 8003744:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8003746:	f107 030c 	add.w	r3, r7, #12
 800374a:	4619      	mov	r1, r3
 800374c:	480c      	ldr	r0, [pc, #48]	; (8003780 <MX_TIM2_Init+0xa4>)
 800374e:	f003 f8b5 	bl	80068bc <HAL_TIM_Encoder_Init>
 8003752:	4603      	mov	r3, r0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d001      	beq.n	800375c <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8003758:	f7ff fb7c 	bl	8002e54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800375c:	2300      	movs	r3, #0
 800375e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003760:	2300      	movs	r3, #0
 8003762:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003764:	463b      	mov	r3, r7
 8003766:	4619      	mov	r1, r3
 8003768:	4805      	ldr	r0, [pc, #20]	; (8003780 <MX_TIM2_Init+0xa4>)
 800376a:	f003 fea7 	bl	80074bc <HAL_TIMEx_MasterConfigSynchronization>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d001      	beq.n	8003778 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8003774:	f7ff fb6e 	bl	8002e54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003778:	bf00      	nop
 800377a:	3730      	adds	r7, #48	; 0x30
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}
 8003780:	20006780 	.word	0x20006780

08003784 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b08c      	sub	sp, #48	; 0x30
 8003788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800378a:	f107 030c 	add.w	r3, r7, #12
 800378e:	2224      	movs	r2, #36	; 0x24
 8003790:	2100      	movs	r1, #0
 8003792:	4618      	mov	r0, r3
 8003794:	f017 fdf6 	bl	801b384 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003798:	463b      	mov	r3, r7
 800379a:	2200      	movs	r2, #0
 800379c:	601a      	str	r2, [r3, #0]
 800379e:	605a      	str	r2, [r3, #4]
 80037a0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80037a2:	4b21      	ldr	r3, [pc, #132]	; (8003828 <MX_TIM3_Init+0xa4>)
 80037a4:	4a21      	ldr	r2, [pc, #132]	; (800382c <MX_TIM3_Init+0xa8>)
 80037a6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80037a8:	4b1f      	ldr	r3, [pc, #124]	; (8003828 <MX_TIM3_Init+0xa4>)
 80037aa:	2200      	movs	r2, #0
 80037ac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037ae:	4b1e      	ldr	r3, [pc, #120]	; (8003828 <MX_TIM3_Init+0xa4>)
 80037b0:	2200      	movs	r2, #0
 80037b2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80037b4:	4b1c      	ldr	r3, [pc, #112]	; (8003828 <MX_TIM3_Init+0xa4>)
 80037b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80037ba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037bc:	4b1a      	ldr	r3, [pc, #104]	; (8003828 <MX_TIM3_Init+0xa4>)
 80037be:	2200      	movs	r2, #0
 80037c0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037c2:	4b19      	ldr	r3, [pc, #100]	; (8003828 <MX_TIM3_Init+0xa4>)
 80037c4:	2200      	movs	r2, #0
 80037c6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80037c8:	2301      	movs	r3, #1
 80037ca:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80037cc:	2300      	movs	r3, #0
 80037ce:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80037d0:	2301      	movs	r3, #1
 80037d2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80037d4:	2300      	movs	r3, #0
 80037d6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80037d8:	2300      	movs	r3, #0
 80037da:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80037dc:	2300      	movs	r3, #0
 80037de:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80037e0:	2301      	movs	r3, #1
 80037e2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80037e4:	2300      	movs	r3, #0
 80037e6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80037e8:	2300      	movs	r3, #0
 80037ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80037ec:	f107 030c 	add.w	r3, r7, #12
 80037f0:	4619      	mov	r1, r3
 80037f2:	480d      	ldr	r0, [pc, #52]	; (8003828 <MX_TIM3_Init+0xa4>)
 80037f4:	f003 f862 	bl	80068bc <HAL_TIM_Encoder_Init>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d001      	beq.n	8003802 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80037fe:	f7ff fb29 	bl	8002e54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003802:	2300      	movs	r3, #0
 8003804:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003806:	2300      	movs	r3, #0
 8003808:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800380a:	463b      	mov	r3, r7
 800380c:	4619      	mov	r1, r3
 800380e:	4806      	ldr	r0, [pc, #24]	; (8003828 <MX_TIM3_Init+0xa4>)
 8003810:	f003 fe54 	bl	80074bc <HAL_TIMEx_MasterConfigSynchronization>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d001      	beq.n	800381e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800381a:	f7ff fb1b 	bl	8002e54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800381e:	bf00      	nop
 8003820:	3730      	adds	r7, #48	; 0x30
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	200067cc 	.word	0x200067cc
 800382c:	40000400 	.word	0x40000400

08003830 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b08c      	sub	sp, #48	; 0x30
 8003834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003836:	f107 030c 	add.w	r3, r7, #12
 800383a:	2224      	movs	r2, #36	; 0x24
 800383c:	2100      	movs	r1, #0
 800383e:	4618      	mov	r0, r3
 8003840:	f017 fda0 	bl	801b384 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003844:	463b      	mov	r3, r7
 8003846:	2200      	movs	r2, #0
 8003848:	601a      	str	r2, [r3, #0]
 800384a:	605a      	str	r2, [r3, #4]
 800384c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800384e:	4b21      	ldr	r3, [pc, #132]	; (80038d4 <MX_TIM4_Init+0xa4>)
 8003850:	4a21      	ldr	r2, [pc, #132]	; (80038d8 <MX_TIM4_Init+0xa8>)
 8003852:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003854:	4b1f      	ldr	r3, [pc, #124]	; (80038d4 <MX_TIM4_Init+0xa4>)
 8003856:	2200      	movs	r2, #0
 8003858:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800385a:	4b1e      	ldr	r3, [pc, #120]	; (80038d4 <MX_TIM4_Init+0xa4>)
 800385c:	2200      	movs	r2, #0
 800385e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003860:	4b1c      	ldr	r3, [pc, #112]	; (80038d4 <MX_TIM4_Init+0xa4>)
 8003862:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003866:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003868:	4b1a      	ldr	r3, [pc, #104]	; (80038d4 <MX_TIM4_Init+0xa4>)
 800386a:	2200      	movs	r2, #0
 800386c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800386e:	4b19      	ldr	r3, [pc, #100]	; (80038d4 <MX_TIM4_Init+0xa4>)
 8003870:	2200      	movs	r2, #0
 8003872:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003874:	2301      	movs	r3, #1
 8003876:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003878:	2300      	movs	r3, #0
 800387a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800387c:	2301      	movs	r3, #1
 800387e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003880:	2300      	movs	r3, #0
 8003882:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003884:	2300      	movs	r3, #0
 8003886:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003888:	2300      	movs	r3, #0
 800388a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800388c:	2301      	movs	r3, #1
 800388e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003890:	2300      	movs	r3, #0
 8003892:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003894:	2300      	movs	r3, #0
 8003896:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003898:	f107 030c 	add.w	r3, r7, #12
 800389c:	4619      	mov	r1, r3
 800389e:	480d      	ldr	r0, [pc, #52]	; (80038d4 <MX_TIM4_Init+0xa4>)
 80038a0:	f003 f80c 	bl	80068bc <HAL_TIM_Encoder_Init>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d001      	beq.n	80038ae <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80038aa:	f7ff fad3 	bl	8002e54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038ae:	2300      	movs	r3, #0
 80038b0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038b2:	2300      	movs	r3, #0
 80038b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80038b6:	463b      	mov	r3, r7
 80038b8:	4619      	mov	r1, r3
 80038ba:	4806      	ldr	r0, [pc, #24]	; (80038d4 <MX_TIM4_Init+0xa4>)
 80038bc:	f003 fdfe 	bl	80074bc <HAL_TIMEx_MasterConfigSynchronization>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d001      	beq.n	80038ca <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80038c6:	f7ff fac5 	bl	8002e54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80038ca:	bf00      	nop
 80038cc:	3730      	adds	r7, #48	; 0x30
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	20006818 	.word	0x20006818
 80038d8:	40000800 	.word	0x40000800

080038dc <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b08c      	sub	sp, #48	; 0x30
 80038e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80038e2:	f107 030c 	add.w	r3, r7, #12
 80038e6:	2224      	movs	r2, #36	; 0x24
 80038e8:	2100      	movs	r1, #0
 80038ea:	4618      	mov	r0, r3
 80038ec:	f017 fd4a 	bl	801b384 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038f0:	463b      	mov	r3, r7
 80038f2:	2200      	movs	r2, #0
 80038f4:	601a      	str	r2, [r3, #0]
 80038f6:	605a      	str	r2, [r3, #4]
 80038f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80038fa:	4b21      	ldr	r3, [pc, #132]	; (8003980 <MX_TIM5_Init+0xa4>)
 80038fc:	4a21      	ldr	r2, [pc, #132]	; (8003984 <MX_TIM5_Init+0xa8>)
 80038fe:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8003900:	4b1f      	ldr	r3, [pc, #124]	; (8003980 <MX_TIM5_Init+0xa4>)
 8003902:	2200      	movs	r2, #0
 8003904:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003906:	4b1e      	ldr	r3, [pc, #120]	; (8003980 <MX_TIM5_Init+0xa4>)
 8003908:	2200      	movs	r2, #0
 800390a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800390c:	4b1c      	ldr	r3, [pc, #112]	; (8003980 <MX_TIM5_Init+0xa4>)
 800390e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003912:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003914:	4b1a      	ldr	r3, [pc, #104]	; (8003980 <MX_TIM5_Init+0xa4>)
 8003916:	2200      	movs	r2, #0
 8003918:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800391a:	4b19      	ldr	r3, [pc, #100]	; (8003980 <MX_TIM5_Init+0xa4>)
 800391c:	2200      	movs	r2, #0
 800391e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003920:	2301      	movs	r3, #1
 8003922:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003924:	2300      	movs	r3, #0
 8003926:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003928:	2301      	movs	r3, #1
 800392a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800392c:	2300      	movs	r3, #0
 800392e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003930:	2300      	movs	r3, #0
 8003932:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003934:	2300      	movs	r3, #0
 8003936:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003938:	2301      	movs	r3, #1
 800393a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800393c:	2300      	movs	r3, #0
 800393e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003940:	2300      	movs	r3, #0
 8003942:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8003944:	f107 030c 	add.w	r3, r7, #12
 8003948:	4619      	mov	r1, r3
 800394a:	480d      	ldr	r0, [pc, #52]	; (8003980 <MX_TIM5_Init+0xa4>)
 800394c:	f002 ffb6 	bl	80068bc <HAL_TIM_Encoder_Init>
 8003950:	4603      	mov	r3, r0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d001      	beq.n	800395a <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8003956:	f7ff fa7d 	bl	8002e54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800395a:	2300      	movs	r3, #0
 800395c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800395e:	2300      	movs	r3, #0
 8003960:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003962:	463b      	mov	r3, r7
 8003964:	4619      	mov	r1, r3
 8003966:	4806      	ldr	r0, [pc, #24]	; (8003980 <MX_TIM5_Init+0xa4>)
 8003968:	f003 fda8 	bl	80074bc <HAL_TIMEx_MasterConfigSynchronization>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d001      	beq.n	8003976 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8003972:	f7ff fa6f 	bl	8002e54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003976:	bf00      	nop
 8003978:	3730      	adds	r7, #48	; 0x30
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	20006864 	.word	0x20006864
 8003984:	40000c00 	.word	0x40000c00

08003988 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b08c      	sub	sp, #48	; 0x30
 800398c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800398e:	f107 030c 	add.w	r3, r7, #12
 8003992:	2224      	movs	r2, #36	; 0x24
 8003994:	2100      	movs	r1, #0
 8003996:	4618      	mov	r0, r3
 8003998:	f017 fcf4 	bl	801b384 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800399c:	463b      	mov	r3, r7
 800399e:	2200      	movs	r2, #0
 80039a0:	601a      	str	r2, [r3, #0]
 80039a2:	605a      	str	r2, [r3, #4]
 80039a4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80039a6:	4b23      	ldr	r3, [pc, #140]	; (8003a34 <MX_TIM8_Init+0xac>)
 80039a8:	4a23      	ldr	r2, [pc, #140]	; (8003a38 <MX_TIM8_Init+0xb0>)
 80039aa:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80039ac:	4b21      	ldr	r3, [pc, #132]	; (8003a34 <MX_TIM8_Init+0xac>)
 80039ae:	2200      	movs	r2, #0
 80039b0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039b2:	4b20      	ldr	r3, [pc, #128]	; (8003a34 <MX_TIM8_Init+0xac>)
 80039b4:	2200      	movs	r2, #0
 80039b6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80039b8:	4b1e      	ldr	r3, [pc, #120]	; (8003a34 <MX_TIM8_Init+0xac>)
 80039ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80039be:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039c0:	4b1c      	ldr	r3, [pc, #112]	; (8003a34 <MX_TIM8_Init+0xac>)
 80039c2:	2200      	movs	r2, #0
 80039c4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80039c6:	4b1b      	ldr	r3, [pc, #108]	; (8003a34 <MX_TIM8_Init+0xac>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039cc:	4b19      	ldr	r3, [pc, #100]	; (8003a34 <MX_TIM8_Init+0xac>)
 80039ce:	2200      	movs	r2, #0
 80039d0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80039d2:	2301      	movs	r3, #1
 80039d4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80039d6:	2300      	movs	r3, #0
 80039d8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80039da:	2301      	movs	r3, #1
 80039dc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80039de:	2300      	movs	r3, #0
 80039e0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80039e2:	2300      	movs	r3, #0
 80039e4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80039e6:	2300      	movs	r3, #0
 80039e8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80039ea:	2301      	movs	r3, #1
 80039ec:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80039ee:	2300      	movs	r3, #0
 80039f0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80039f2:	2300      	movs	r3, #0
 80039f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80039f6:	f107 030c 	add.w	r3, r7, #12
 80039fa:	4619      	mov	r1, r3
 80039fc:	480d      	ldr	r0, [pc, #52]	; (8003a34 <MX_TIM8_Init+0xac>)
 80039fe:	f002 ff5d 	bl	80068bc <HAL_TIM_Encoder_Init>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d001      	beq.n	8003a0c <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8003a08:	f7ff fa24 	bl	8002e54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003a10:	2300      	movs	r3, #0
 8003a12:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a14:	2300      	movs	r3, #0
 8003a16:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003a18:	463b      	mov	r3, r7
 8003a1a:	4619      	mov	r1, r3
 8003a1c:	4805      	ldr	r0, [pc, #20]	; (8003a34 <MX_TIM8_Init+0xac>)
 8003a1e:	f003 fd4d 	bl	80074bc <HAL_TIMEx_MasterConfigSynchronization>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d001      	beq.n	8003a2c <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8003a28:	f7ff fa14 	bl	8002e54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8003a2c:	bf00      	nop
 8003a2e:	3730      	adds	r7, #48	; 0x30
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	200068b0 	.word	0x200068b0
 8003a38:	40010400 	.word	0x40010400

08003a3c <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b088      	sub	sp, #32
 8003a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003a42:	1d3b      	adds	r3, r7, #4
 8003a44:	2200      	movs	r2, #0
 8003a46:	601a      	str	r2, [r3, #0]
 8003a48:	605a      	str	r2, [r3, #4]
 8003a4a:	609a      	str	r2, [r3, #8]
 8003a4c:	60da      	str	r2, [r3, #12]
 8003a4e:	611a      	str	r2, [r3, #16]
 8003a50:	615a      	str	r2, [r3, #20]
 8003a52:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8003a54:	4b1f      	ldr	r3, [pc, #124]	; (8003ad4 <MX_TIM9_Init+0x98>)
 8003a56:	4a20      	ldr	r2, [pc, #128]	; (8003ad8 <MX_TIM9_Init+0x9c>)
 8003a58:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8003a5a:	4b1e      	ldr	r3, [pc, #120]	; (8003ad4 <MX_TIM9_Init+0x98>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a60:	4b1c      	ldr	r3, [pc, #112]	; (8003ad4 <MX_TIM9_Init+0x98>)
 8003a62:	2200      	movs	r2, #0
 8003a64:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8003a66:	4b1b      	ldr	r3, [pc, #108]	; (8003ad4 <MX_TIM9_Init+0x98>)
 8003a68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a6c:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a6e:	4b19      	ldr	r3, [pc, #100]	; (8003ad4 <MX_TIM9_Init+0x98>)
 8003a70:	2200      	movs	r2, #0
 8003a72:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a74:	4b17      	ldr	r3, [pc, #92]	; (8003ad4 <MX_TIM9_Init+0x98>)
 8003a76:	2200      	movs	r2, #0
 8003a78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8003a7a:	4816      	ldr	r0, [pc, #88]	; (8003ad4 <MX_TIM9_Init+0x98>)
 8003a7c:	f002 fec6 	bl	800680c <HAL_TIM_PWM_Init>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d001      	beq.n	8003a8a <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 8003a86:	f7ff f9e5 	bl	8002e54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003a8a:	2360      	movs	r3, #96	; 0x60
 8003a8c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003a92:	2300      	movs	r3, #0
 8003a94:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003a96:	2300      	movs	r3, #0
 8003a98:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003a9a:	1d3b      	adds	r3, r7, #4
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	4619      	mov	r1, r3
 8003aa0:	480c      	ldr	r0, [pc, #48]	; (8003ad4 <MX_TIM9_Init+0x98>)
 8003aa2:	f003 f8d1 	bl	8006c48 <HAL_TIM_PWM_ConfigChannel>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d001      	beq.n	8003ab0 <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 8003aac:	f7ff f9d2 	bl	8002e54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003ab0:	1d3b      	adds	r3, r7, #4
 8003ab2:	2204      	movs	r2, #4
 8003ab4:	4619      	mov	r1, r3
 8003ab6:	4807      	ldr	r0, [pc, #28]	; (8003ad4 <MX_TIM9_Init+0x98>)
 8003ab8:	f003 f8c6 	bl	8006c48 <HAL_TIM_PWM_ConfigChannel>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d001      	beq.n	8003ac6 <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 8003ac2:	f7ff f9c7 	bl	8002e54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8003ac6:	4803      	ldr	r0, [pc, #12]	; (8003ad4 <MX_TIM9_Init+0x98>)
 8003ac8:	f000 f97c 	bl	8003dc4 <HAL_TIM_MspPostInit>

}
 8003acc:	bf00      	nop
 8003ace:	3720      	adds	r7, #32
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	200068fc 	.word	0x200068fc
 8003ad8:	40014000 	.word	0x40014000

08003adc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b085      	sub	sp, #20
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a13      	ldr	r2, [pc, #76]	; (8003b38 <HAL_TIM_PWM_MspInit+0x5c>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d10c      	bne.n	8003b08 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003aee:	4b13      	ldr	r3, [pc, #76]	; (8003b3c <HAL_TIM_PWM_MspInit+0x60>)
 8003af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003af2:	4a12      	ldr	r2, [pc, #72]	; (8003b3c <HAL_TIM_PWM_MspInit+0x60>)
 8003af4:	f043 0301 	orr.w	r3, r3, #1
 8003af8:	6453      	str	r3, [r2, #68]	; 0x44
 8003afa:	4b10      	ldr	r3, [pc, #64]	; (8003b3c <HAL_TIM_PWM_MspInit+0x60>)
 8003afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003afe:	f003 0301 	and.w	r3, r3, #1
 8003b02:	60fb      	str	r3, [r7, #12]
 8003b04:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM9_CLK_ENABLE();
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 8003b06:	e010      	b.n	8003b2a <HAL_TIM_PWM_MspInit+0x4e>
  else if(tim_pwmHandle->Instance==TIM9)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a0c      	ldr	r2, [pc, #48]	; (8003b40 <HAL_TIM_PWM_MspInit+0x64>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d10b      	bne.n	8003b2a <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8003b12:	4b0a      	ldr	r3, [pc, #40]	; (8003b3c <HAL_TIM_PWM_MspInit+0x60>)
 8003b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b16:	4a09      	ldr	r2, [pc, #36]	; (8003b3c <HAL_TIM_PWM_MspInit+0x60>)
 8003b18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b1c:	6453      	str	r3, [r2, #68]	; 0x44
 8003b1e:	4b07      	ldr	r3, [pc, #28]	; (8003b3c <HAL_TIM_PWM_MspInit+0x60>)
 8003b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b26:	60bb      	str	r3, [r7, #8]
 8003b28:	68bb      	ldr	r3, [r7, #8]
}
 8003b2a:	bf00      	nop
 8003b2c:	3714      	adds	r7, #20
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop
 8003b38:	40010000 	.word	0x40010000
 8003b3c:	40023800 	.word	0x40023800
 8003b40:	40014000 	.word	0x40014000

08003b44 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b094      	sub	sp, #80	; 0x50
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b4c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003b50:	2200      	movs	r2, #0
 8003b52:	601a      	str	r2, [r3, #0]
 8003b54:	605a      	str	r2, [r3, #4]
 8003b56:	609a      	str	r2, [r3, #8]
 8003b58:	60da      	str	r2, [r3, #12]
 8003b5a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b64:	d144      	bne.n	8003bf0 <HAL_TIM_Encoder_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003b66:	4b8e      	ldr	r3, [pc, #568]	; (8003da0 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6a:	4a8d      	ldr	r2, [pc, #564]	; (8003da0 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003b6c:	f043 0301 	orr.w	r3, r3, #1
 8003b70:	6413      	str	r3, [r2, #64]	; 0x40
 8003b72:	4b8b      	ldr	r3, [pc, #556]	; (8003da0 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b7e:	4b88      	ldr	r3, [pc, #544]	; (8003da0 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b82:	4a87      	ldr	r2, [pc, #540]	; (8003da0 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003b84:	f043 0301 	orr.w	r3, r3, #1
 8003b88:	6313      	str	r3, [r2, #48]	; 0x30
 8003b8a:	4b85      	ldr	r3, [pc, #532]	; (8003da0 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b8e:	f003 0301 	and.w	r3, r3, #1
 8003b92:	637b      	str	r3, [r7, #52]	; 0x34
 8003b94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b96:	4b82      	ldr	r3, [pc, #520]	; (8003da0 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b9a:	4a81      	ldr	r2, [pc, #516]	; (8003da0 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003b9c:	f043 0302 	orr.w	r3, r3, #2
 8003ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ba2:	4b7f      	ldr	r3, [pc, #508]	; (8003da0 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba6:	f003 0302 	and.w	r3, r3, #2
 8003baa:	633b      	str	r3, [r7, #48]	; 0x30
 8003bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = MOTOR1_CHA_Pin;
 8003bae:	2320      	movs	r3, #32
 8003bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bb2:	2302      	movs	r3, #2
 8003bb4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(MOTOR1_CHA_GPIO_Port, &GPIO_InitStruct);
 8003bc2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	4876      	ldr	r0, [pc, #472]	; (8003da4 <HAL_TIM_Encoder_MspInit+0x260>)
 8003bca:	f001 f891 	bl	8004cf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTOR1_CHB_Pin;
 8003bce:	2308      	movs	r3, #8
 8003bd0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bd2:	2302      	movs	r3, #2
 8003bd4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003bde:	2301      	movs	r3, #1
 8003be0:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(MOTOR1_CHB_GPIO_Port, &GPIO_InitStruct);
 8003be2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003be6:	4619      	mov	r1, r3
 8003be8:	486f      	ldr	r0, [pc, #444]	; (8003da8 <HAL_TIM_Encoder_MspInit+0x264>)
 8003bea:	f001 f881 	bl	8004cf0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8003bee:	e0d3      	b.n	8003d98 <HAL_TIM_Encoder_MspInit+0x254>
  else if(tim_encoderHandle->Instance==TIM3)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a6d      	ldr	r2, [pc, #436]	; (8003dac <HAL_TIM_Encoder_MspInit+0x268>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d144      	bne.n	8003c84 <HAL_TIM_Encoder_MspInit+0x140>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003bfa:	4b69      	ldr	r3, [pc, #420]	; (8003da0 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfe:	4a68      	ldr	r2, [pc, #416]	; (8003da0 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003c00:	f043 0302 	orr.w	r3, r3, #2
 8003c04:	6413      	str	r3, [r2, #64]	; 0x40
 8003c06:	4b66      	ldr	r3, [pc, #408]	; (8003da0 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0a:	f003 0302 	and.w	r3, r3, #2
 8003c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c12:	4b63      	ldr	r3, [pc, #396]	; (8003da0 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c16:	4a62      	ldr	r2, [pc, #392]	; (8003da0 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003c18:	f043 0301 	orr.w	r3, r3, #1
 8003c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8003c1e:	4b60      	ldr	r3, [pc, #384]	; (8003da0 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c22:	f003 0301 	and.w	r3, r3, #1
 8003c26:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c2a:	4b5d      	ldr	r3, [pc, #372]	; (8003da0 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c2e:	4a5c      	ldr	r2, [pc, #368]	; (8003da0 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003c30:	f043 0302 	orr.w	r3, r3, #2
 8003c34:	6313      	str	r3, [r2, #48]	; 0x30
 8003c36:	4b5a      	ldr	r3, [pc, #360]	; (8003da0 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c3a:	f003 0302 	and.w	r3, r3, #2
 8003c3e:	627b      	str	r3, [r7, #36]	; 0x24
 8003c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = MOTOR2_CHA_Pin;
 8003c42:	2340      	movs	r3, #64	; 0x40
 8003c44:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c46:	2302      	movs	r3, #2
 8003c48:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003c52:	2302      	movs	r3, #2
 8003c54:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(MOTOR2_CHA_GPIO_Port, &GPIO_InitStruct);
 8003c56:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	4851      	ldr	r0, [pc, #324]	; (8003da4 <HAL_TIM_Encoder_MspInit+0x260>)
 8003c5e:	f001 f847 	bl	8004cf0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MOTOR2_CHB_Pin;
 8003c62:	2320      	movs	r3, #32
 8003c64:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c66:	2302      	movs	r3, #2
 8003c68:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003c72:	2302      	movs	r3, #2
 8003c74:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(MOTOR2_CHB_GPIO_Port, &GPIO_InitStruct);
 8003c76:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003c7a:	4619      	mov	r1, r3
 8003c7c:	484a      	ldr	r0, [pc, #296]	; (8003da8 <HAL_TIM_Encoder_MspInit+0x264>)
 8003c7e:	f001 f837 	bl	8004cf0 <HAL_GPIO_Init>
}
 8003c82:	e089      	b.n	8003d98 <HAL_TIM_Encoder_MspInit+0x254>
  else if(tim_encoderHandle->Instance==TIM4)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a49      	ldr	r2, [pc, #292]	; (8003db0 <HAL_TIM_Encoder_MspInit+0x26c>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d129      	bne.n	8003ce2 <HAL_TIM_Encoder_MspInit+0x19e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003c8e:	4b44      	ldr	r3, [pc, #272]	; (8003da0 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c92:	4a43      	ldr	r2, [pc, #268]	; (8003da0 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003c94:	f043 0304 	orr.w	r3, r3, #4
 8003c98:	6413      	str	r3, [r2, #64]	; 0x40
 8003c9a:	4b41      	ldr	r3, [pc, #260]	; (8003da0 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9e:	f003 0304 	and.w	r3, r3, #4
 8003ca2:	623b      	str	r3, [r7, #32]
 8003ca4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ca6:	4b3e      	ldr	r3, [pc, #248]	; (8003da0 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003caa:	4a3d      	ldr	r2, [pc, #244]	; (8003da0 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003cac:	f043 0308 	orr.w	r3, r3, #8
 8003cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8003cb2:	4b3b      	ldr	r3, [pc, #236]	; (8003da0 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb6:	f003 0308 	and.w	r3, r3, #8
 8003cba:	61fb      	str	r3, [r7, #28]
 8003cbc:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = MOTOR3_CHA_Pin|MOTOR3_CHB_Pin;
 8003cbe:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cc4:	2302      	movs	r3, #2
 8003cc6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003cd0:	2302      	movs	r3, #2
 8003cd2:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003cd4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003cd8:	4619      	mov	r1, r3
 8003cda:	4836      	ldr	r0, [pc, #216]	; (8003db4 <HAL_TIM_Encoder_MspInit+0x270>)
 8003cdc:	f001 f808 	bl	8004cf0 <HAL_GPIO_Init>
}
 8003ce0:	e05a      	b.n	8003d98 <HAL_TIM_Encoder_MspInit+0x254>
  else if(tim_encoderHandle->Instance==TIM5)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a34      	ldr	r2, [pc, #208]	; (8003db8 <HAL_TIM_Encoder_MspInit+0x274>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d128      	bne.n	8003d3e <HAL_TIM_Encoder_MspInit+0x1fa>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003cec:	4b2c      	ldr	r3, [pc, #176]	; (8003da0 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf0:	4a2b      	ldr	r2, [pc, #172]	; (8003da0 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003cf2:	f043 0308 	orr.w	r3, r3, #8
 8003cf6:	6413      	str	r3, [r2, #64]	; 0x40
 8003cf8:	4b29      	ldr	r3, [pc, #164]	; (8003da0 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfc:	f003 0308 	and.w	r3, r3, #8
 8003d00:	61bb      	str	r3, [r7, #24]
 8003d02:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d04:	4b26      	ldr	r3, [pc, #152]	; (8003da0 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d08:	4a25      	ldr	r2, [pc, #148]	; (8003da0 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003d0a:	f043 0301 	orr.w	r3, r3, #1
 8003d0e:	6313      	str	r3, [r2, #48]	; 0x30
 8003d10:	4b23      	ldr	r3, [pc, #140]	; (8003da0 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d14:	f003 0301 	and.w	r3, r3, #1
 8003d18:	617b      	str	r3, [r7, #20]
 8003d1a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MOTOR4_CHA_Pin|MOTOR4_CHB_Pin;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d20:	2302      	movs	r3, #2
 8003d22:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d24:	2300      	movs	r3, #0
 8003d26:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003d2c:	2302      	movs	r3, #2
 8003d2e:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d30:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003d34:	4619      	mov	r1, r3
 8003d36:	481b      	ldr	r0, [pc, #108]	; (8003da4 <HAL_TIM_Encoder_MspInit+0x260>)
 8003d38:	f000 ffda 	bl	8004cf0 <HAL_GPIO_Init>
}
 8003d3c:	e02c      	b.n	8003d98 <HAL_TIM_Encoder_MspInit+0x254>
  else if(tim_encoderHandle->Instance==TIM8)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a1e      	ldr	r2, [pc, #120]	; (8003dbc <HAL_TIM_Encoder_MspInit+0x278>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d127      	bne.n	8003d98 <HAL_TIM_Encoder_MspInit+0x254>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003d48:	4b15      	ldr	r3, [pc, #84]	; (8003da0 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d4c:	4a14      	ldr	r2, [pc, #80]	; (8003da0 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003d4e:	f043 0302 	orr.w	r3, r3, #2
 8003d52:	6453      	str	r3, [r2, #68]	; 0x44
 8003d54:	4b12      	ldr	r3, [pc, #72]	; (8003da0 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003d56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d58:	f003 0302 	and.w	r3, r3, #2
 8003d5c:	613b      	str	r3, [r7, #16]
 8003d5e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d60:	4b0f      	ldr	r3, [pc, #60]	; (8003da0 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d64:	4a0e      	ldr	r2, [pc, #56]	; (8003da0 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003d66:	f043 0304 	orr.w	r3, r3, #4
 8003d6a:	6313      	str	r3, [r2, #48]	; 0x30
 8003d6c:	4b0c      	ldr	r3, [pc, #48]	; (8003da0 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d70:	f003 0304 	and.w	r3, r3, #4
 8003d74:	60fb      	str	r3, [r7, #12]
 8003d76:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR5_CHA_Pin|MOTOR5_CHB_Pin;
 8003d78:	23c0      	movs	r3, #192	; 0xc0
 8003d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d7c:	2302      	movs	r3, #2
 8003d7e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d80:	2300      	movs	r3, #0
 8003d82:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d84:	2300      	movs	r3, #0
 8003d86:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d8c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003d90:	4619      	mov	r1, r3
 8003d92:	480b      	ldr	r0, [pc, #44]	; (8003dc0 <HAL_TIM_Encoder_MspInit+0x27c>)
 8003d94:	f000 ffac 	bl	8004cf0 <HAL_GPIO_Init>
}
 8003d98:	bf00      	nop
 8003d9a:	3750      	adds	r7, #80	; 0x50
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	40023800 	.word	0x40023800
 8003da4:	40020000 	.word	0x40020000
 8003da8:	40020400 	.word	0x40020400
 8003dac:	40000400 	.word	0x40000400
 8003db0:	40000800 	.word	0x40000800
 8003db4:	40020c00 	.word	0x40020c00
 8003db8:	40000c00 	.word	0x40000c00
 8003dbc:	40010400 	.word	0x40010400
 8003dc0:	40020800 	.word	0x40020800

08003dc4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b08a      	sub	sp, #40	; 0x28
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dcc:	f107 0314 	add.w	r3, r7, #20
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	601a      	str	r2, [r3, #0]
 8003dd4:	605a      	str	r2, [r3, #4]
 8003dd6:	609a      	str	r2, [r3, #8]
 8003dd8:	60da      	str	r2, [r3, #12]
 8003dda:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a22      	ldr	r2, [pc, #136]	; (8003e6c <HAL_TIM_MspPostInit+0xa8>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d11d      	bne.n	8003e22 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003de6:	4b22      	ldr	r3, [pc, #136]	; (8003e70 <HAL_TIM_MspPostInit+0xac>)
 8003de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dea:	4a21      	ldr	r2, [pc, #132]	; (8003e70 <HAL_TIM_MspPostInit+0xac>)
 8003dec:	f043 0310 	orr.w	r3, r3, #16
 8003df0:	6313      	str	r3, [r2, #48]	; 0x30
 8003df2:	4b1f      	ldr	r3, [pc, #124]	; (8003e70 <HAL_TIM_MspPostInit+0xac>)
 8003df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df6:	f003 0310 	and.w	r3, r3, #16
 8003dfa:	613b      	str	r3, [r7, #16]
 8003dfc:	693b      	ldr	r3, [r7, #16]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = MOTOR1_PWM_Pin|MOTOR2_PWM_Pin|MOTOR3_PWM_Pin|MOTOR4_PWM_Pin;
 8003dfe:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8003e02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e04:	2302      	movs	r3, #2
 8003e06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003e10:	2301      	movs	r3, #1
 8003e12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003e14:	f107 0314 	add.w	r3, r7, #20
 8003e18:	4619      	mov	r1, r3
 8003e1a:	4816      	ldr	r0, [pc, #88]	; (8003e74 <HAL_TIM_MspPostInit+0xb0>)
 8003e1c:	f000 ff68 	bl	8004cf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8003e20:	e020      	b.n	8003e64 <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM9)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a14      	ldr	r2, [pc, #80]	; (8003e78 <HAL_TIM_MspPostInit+0xb4>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d11b      	bne.n	8003e64 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003e2c:	4b10      	ldr	r3, [pc, #64]	; (8003e70 <HAL_TIM_MspPostInit+0xac>)
 8003e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e30:	4a0f      	ldr	r2, [pc, #60]	; (8003e70 <HAL_TIM_MspPostInit+0xac>)
 8003e32:	f043 0310 	orr.w	r3, r3, #16
 8003e36:	6313      	str	r3, [r2, #48]	; 0x30
 8003e38:	4b0d      	ldr	r3, [pc, #52]	; (8003e70 <HAL_TIM_MspPostInit+0xac>)
 8003e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3c:	f003 0310 	and.w	r3, r3, #16
 8003e40:	60fb      	str	r3, [r7, #12]
 8003e42:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR5_PWM_Pin|MOTOR6_PWM_Pin;
 8003e44:	2360      	movs	r3, #96	; 0x60
 8003e46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e48:	2302      	movs	r3, #2
 8003e4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e50:	2300      	movs	r3, #0
 8003e52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8003e54:	2303      	movs	r3, #3
 8003e56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003e58:	f107 0314 	add.w	r3, r7, #20
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	4805      	ldr	r0, [pc, #20]	; (8003e74 <HAL_TIM_MspPostInit+0xb0>)
 8003e60:	f000 ff46 	bl	8004cf0 <HAL_GPIO_Init>
}
 8003e64:	bf00      	nop
 8003e66:	3728      	adds	r7, #40	; 0x28
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	40010000 	.word	0x40010000
 8003e70:	40023800 	.word	0x40023800
 8003e74:	40021000 	.word	0x40021000
 8003e78:	40014000 	.word	0x40014000

08003e7c <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003e80:	4b14      	ldr	r3, [pc, #80]	; (8003ed4 <MX_USART3_UART_Init+0x58>)
 8003e82:	4a15      	ldr	r2, [pc, #84]	; (8003ed8 <MX_USART3_UART_Init+0x5c>)
 8003e84:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003e86:	4b13      	ldr	r3, [pc, #76]	; (8003ed4 <MX_USART3_UART_Init+0x58>)
 8003e88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003e8c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003e8e:	4b11      	ldr	r3, [pc, #68]	; (8003ed4 <MX_USART3_UART_Init+0x58>)
 8003e90:	2200      	movs	r2, #0
 8003e92:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003e94:	4b0f      	ldr	r3, [pc, #60]	; (8003ed4 <MX_USART3_UART_Init+0x58>)
 8003e96:	2200      	movs	r2, #0
 8003e98:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003e9a:	4b0e      	ldr	r3, [pc, #56]	; (8003ed4 <MX_USART3_UART_Init+0x58>)
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003ea0:	4b0c      	ldr	r3, [pc, #48]	; (8003ed4 <MX_USART3_UART_Init+0x58>)
 8003ea2:	220c      	movs	r2, #12
 8003ea4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003ea6:	4b0b      	ldr	r3, [pc, #44]	; (8003ed4 <MX_USART3_UART_Init+0x58>)
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003eac:	4b09      	ldr	r3, [pc, #36]	; (8003ed4 <MX_USART3_UART_Init+0x58>)
 8003eae:	2200      	movs	r2, #0
 8003eb0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003eb2:	4b08      	ldr	r3, [pc, #32]	; (8003ed4 <MX_USART3_UART_Init+0x58>)
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003eb8:	4b06      	ldr	r3, [pc, #24]	; (8003ed4 <MX_USART3_UART_Init+0x58>)
 8003eba:	2200      	movs	r2, #0
 8003ebc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003ebe:	4805      	ldr	r0, [pc, #20]	; (8003ed4 <MX_USART3_UART_Init+0x58>)
 8003ec0:	f003 fc26 	bl	8007710 <HAL_UART_Init>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d001      	beq.n	8003ece <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8003eca:	f7fe ffc3 	bl	8002e54 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003ece:	bf00      	nop
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	20006948 	.word	0x20006948
 8003ed8:	40004800 	.word	0x40004800

08003edc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b0ae      	sub	sp, #184	; 0xb8
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ee4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003ee8:	2200      	movs	r2, #0
 8003eea:	601a      	str	r2, [r3, #0]
 8003eec:	605a      	str	r2, [r3, #4]
 8003eee:	609a      	str	r2, [r3, #8]
 8003ef0:	60da      	str	r2, [r3, #12]
 8003ef2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003ef4:	f107 0314 	add.w	r3, r7, #20
 8003ef8:	2290      	movs	r2, #144	; 0x90
 8003efa:	2100      	movs	r1, #0
 8003efc:	4618      	mov	r0, r3
 8003efe:	f017 fa41 	bl	801b384 <memset>
  if(uartHandle->Instance==USART3)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a56      	ldr	r2, [pc, #344]	; (8004060 <HAL_UART_MspInit+0x184>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	f040 80a4 	bne.w	8004056 <HAL_UART_MspInit+0x17a>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003f0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f12:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003f14:	2300      	movs	r3, #0
 8003f16:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003f18:	f107 0314 	add.w	r3, r7, #20
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f001 ff73 	bl	8005e08 <HAL_RCCEx_PeriphCLKConfig>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d001      	beq.n	8003f2c <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8003f28:	f7fe ff94 	bl	8002e54 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003f2c:	4b4d      	ldr	r3, [pc, #308]	; (8004064 <HAL_UART_MspInit+0x188>)
 8003f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f30:	4a4c      	ldr	r2, [pc, #304]	; (8004064 <HAL_UART_MspInit+0x188>)
 8003f32:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f36:	6413      	str	r3, [r2, #64]	; 0x40
 8003f38:	4b4a      	ldr	r3, [pc, #296]	; (8004064 <HAL_UART_MspInit+0x188>)
 8003f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f40:	613b      	str	r3, [r7, #16]
 8003f42:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f44:	4b47      	ldr	r3, [pc, #284]	; (8004064 <HAL_UART_MspInit+0x188>)
 8003f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f48:	4a46      	ldr	r2, [pc, #280]	; (8004064 <HAL_UART_MspInit+0x188>)
 8003f4a:	f043 0308 	orr.w	r3, r3, #8
 8003f4e:	6313      	str	r3, [r2, #48]	; 0x30
 8003f50:	4b44      	ldr	r3, [pc, #272]	; (8004064 <HAL_UART_MspInit+0x188>)
 8003f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f54:	f003 0308 	and.w	r3, r3, #8
 8003f58:	60fb      	str	r3, [r7, #12]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8003f5c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003f60:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f64:	2302      	movs	r3, #2
 8003f66:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f70:	2303      	movs	r3, #3
 8003f72:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003f76:	2307      	movs	r3, #7
 8003f78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003f7c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003f80:	4619      	mov	r1, r3
 8003f82:	4839      	ldr	r0, [pc, #228]	; (8004068 <HAL_UART_MspInit+0x18c>)
 8003f84:	f000 feb4 	bl	8004cf0 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8003f88:	4b38      	ldr	r3, [pc, #224]	; (800406c <HAL_UART_MspInit+0x190>)
 8003f8a:	4a39      	ldr	r2, [pc, #228]	; (8004070 <HAL_UART_MspInit+0x194>)
 8003f8c:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8003f8e:	4b37      	ldr	r3, [pc, #220]	; (800406c <HAL_UART_MspInit+0x190>)
 8003f90:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003f94:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003f96:	4b35      	ldr	r3, [pc, #212]	; (800406c <HAL_UART_MspInit+0x190>)
 8003f98:	2240      	movs	r2, #64	; 0x40
 8003f9a:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f9c:	4b33      	ldr	r3, [pc, #204]	; (800406c <HAL_UART_MspInit+0x190>)
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003fa2:	4b32      	ldr	r3, [pc, #200]	; (800406c <HAL_UART_MspInit+0x190>)
 8003fa4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003fa8:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003faa:	4b30      	ldr	r3, [pc, #192]	; (800406c <HAL_UART_MspInit+0x190>)
 8003fac:	2200      	movs	r2, #0
 8003fae:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003fb0:	4b2e      	ldr	r3, [pc, #184]	; (800406c <HAL_UART_MspInit+0x190>)
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8003fb6:	4b2d      	ldr	r3, [pc, #180]	; (800406c <HAL_UART_MspInit+0x190>)
 8003fb8:	2200      	movs	r2, #0
 8003fba:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003fbc:	4b2b      	ldr	r3, [pc, #172]	; (800406c <HAL_UART_MspInit+0x190>)
 8003fbe:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003fc2:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003fc4:	4b29      	ldr	r3, [pc, #164]	; (800406c <HAL_UART_MspInit+0x190>)
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8003fca:	4828      	ldr	r0, [pc, #160]	; (800406c <HAL_UART_MspInit+0x190>)
 8003fcc:	f000 fa7a 	bl	80044c4 <HAL_DMA_Init>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d001      	beq.n	8003fda <HAL_UART_MspInit+0xfe>
    {
      Error_Handler();
 8003fd6:	f7fe ff3d 	bl	8002e54 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a23      	ldr	r2, [pc, #140]	; (800406c <HAL_UART_MspInit+0x190>)
 8003fde:	671a      	str	r2, [r3, #112]	; 0x70
 8003fe0:	4a22      	ldr	r2, [pc, #136]	; (800406c <HAL_UART_MspInit+0x190>)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8003fe6:	4b23      	ldr	r3, [pc, #140]	; (8004074 <HAL_UART_MspInit+0x198>)
 8003fe8:	4a23      	ldr	r2, [pc, #140]	; (8004078 <HAL_UART_MspInit+0x19c>)
 8003fea:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8003fec:	4b21      	ldr	r3, [pc, #132]	; (8004074 <HAL_UART_MspInit+0x198>)
 8003fee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003ff2:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003ff4:	4b1f      	ldr	r3, [pc, #124]	; (8004074 <HAL_UART_MspInit+0x198>)
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ffa:	4b1e      	ldr	r3, [pc, #120]	; (8004074 <HAL_UART_MspInit+0x198>)
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004000:	4b1c      	ldr	r3, [pc, #112]	; (8004074 <HAL_UART_MspInit+0x198>)
 8004002:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004006:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004008:	4b1a      	ldr	r3, [pc, #104]	; (8004074 <HAL_UART_MspInit+0x198>)
 800400a:	2200      	movs	r2, #0
 800400c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800400e:	4b19      	ldr	r3, [pc, #100]	; (8004074 <HAL_UART_MspInit+0x198>)
 8004010:	2200      	movs	r2, #0
 8004012:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8004014:	4b17      	ldr	r3, [pc, #92]	; (8004074 <HAL_UART_MspInit+0x198>)
 8004016:	f44f 7280 	mov.w	r2, #256	; 0x100
 800401a:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800401c:	4b15      	ldr	r3, [pc, #84]	; (8004074 <HAL_UART_MspInit+0x198>)
 800401e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004022:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004024:	4b13      	ldr	r3, [pc, #76]	; (8004074 <HAL_UART_MspInit+0x198>)
 8004026:	2200      	movs	r2, #0
 8004028:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800402a:	4812      	ldr	r0, [pc, #72]	; (8004074 <HAL_UART_MspInit+0x198>)
 800402c:	f000 fa4a 	bl	80044c4 <HAL_DMA_Init>
 8004030:	4603      	mov	r3, r0
 8004032:	2b00      	cmp	r3, #0
 8004034:	d001      	beq.n	800403a <HAL_UART_MspInit+0x15e>
    {
      Error_Handler();
 8004036:	f7fe ff0d 	bl	8002e54 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a0d      	ldr	r2, [pc, #52]	; (8004074 <HAL_UART_MspInit+0x198>)
 800403e:	675a      	str	r2, [r3, #116]	; 0x74
 8004040:	4a0c      	ldr	r2, [pc, #48]	; (8004074 <HAL_UART_MspInit+0x198>)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8004046:	2200      	movs	r2, #0
 8004048:	2105      	movs	r1, #5
 800404a:	2027      	movs	r0, #39	; 0x27
 800404c:	f000 fa10 	bl	8004470 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004050:	2027      	movs	r0, #39	; 0x27
 8004052:	f000 fa29 	bl	80044a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8004056:	bf00      	nop
 8004058:	37b8      	adds	r7, #184	; 0xb8
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	40004800 	.word	0x40004800
 8004064:	40023800 	.word	0x40023800
 8004068:	40020c00 	.word	0x40020c00
 800406c:	200069d0 	.word	0x200069d0
 8004070:	40026058 	.word	0x40026058
 8004074:	20006a30 	.word	0x20006a30
 8004078:	40026028 	.word	0x40026028

0800407c <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8004080:	4b14      	ldr	r3, [pc, #80]	; (80040d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004082:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8004086:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8004088:	4b12      	ldr	r3, [pc, #72]	; (80040d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800408a:	2206      	movs	r2, #6
 800408c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800408e:	4b11      	ldr	r3, [pc, #68]	; (80040d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004090:	2202      	movs	r2, #2
 8004092:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8004094:	4b0f      	ldr	r3, [pc, #60]	; (80040d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004096:	2200      	movs	r2, #0
 8004098:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800409a:	4b0e      	ldr	r3, [pc, #56]	; (80040d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800409c:	2202      	movs	r2, #2
 800409e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80040a0:	4b0c      	ldr	r3, [pc, #48]	; (80040d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80040a2:	2201      	movs	r2, #1
 80040a4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80040a6:	4b0b      	ldr	r3, [pc, #44]	; (80040d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80040a8:	2200      	movs	r2, #0
 80040aa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80040ac:	4b09      	ldr	r3, [pc, #36]	; (80040d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80040ae:	2200      	movs	r2, #0
 80040b0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80040b2:	4b08      	ldr	r3, [pc, #32]	; (80040d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80040b4:	2201      	movs	r2, #1
 80040b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80040b8:	4b06      	ldr	r3, [pc, #24]	; (80040d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80040ba:	2200      	movs	r2, #0
 80040bc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80040be:	4805      	ldr	r0, [pc, #20]	; (80040d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80040c0:	f000 fff3 	bl	80050aa <HAL_PCD_Init>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d001      	beq.n	80040ce <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80040ca:	f7fe fec3 	bl	8002e54 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80040ce:	bf00      	nop
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	20006a90 	.word	0x20006a90

080040d8 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b0ae      	sub	sp, #184	; 0xb8
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040e0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80040e4:	2200      	movs	r2, #0
 80040e6:	601a      	str	r2, [r3, #0]
 80040e8:	605a      	str	r2, [r3, #4]
 80040ea:	609a      	str	r2, [r3, #8]
 80040ec:	60da      	str	r2, [r3, #12]
 80040ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80040f0:	f107 0314 	add.w	r3, r7, #20
 80040f4:	2290      	movs	r2, #144	; 0x90
 80040f6:	2100      	movs	r1, #0
 80040f8:	4618      	mov	r0, r3
 80040fa:	f017 f943 	bl	801b384 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004106:	d159      	bne.n	80041bc <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8004108:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800410c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800410e:	2300      	movs	r3, #0
 8004110:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004114:	f107 0314 	add.w	r3, r7, #20
 8004118:	4618      	mov	r0, r3
 800411a:	f001 fe75 	bl	8005e08 <HAL_RCCEx_PeriphCLKConfig>
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d001      	beq.n	8004128 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8004124:	f7fe fe96 	bl	8002e54 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004128:	4b26      	ldr	r3, [pc, #152]	; (80041c4 <HAL_PCD_MspInit+0xec>)
 800412a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800412c:	4a25      	ldr	r2, [pc, #148]	; (80041c4 <HAL_PCD_MspInit+0xec>)
 800412e:	f043 0301 	orr.w	r3, r3, #1
 8004132:	6313      	str	r3, [r2, #48]	; 0x30
 8004134:	4b23      	ldr	r3, [pc, #140]	; (80041c4 <HAL_PCD_MspInit+0xec>)
 8004136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004138:	f003 0301 	and.w	r3, r3, #1
 800413c:	613b      	str	r3, [r7, #16]
 800413e:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8004140:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8004144:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004148:	2302      	movs	r3, #2
 800414a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800414e:	2300      	movs	r3, #0
 8004150:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004154:	2303      	movs	r3, #3
 8004156:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800415a:	230a      	movs	r3, #10
 800415c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004160:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004164:	4619      	mov	r1, r3
 8004166:	4818      	ldr	r0, [pc, #96]	; (80041c8 <HAL_PCD_MspInit+0xf0>)
 8004168:	f000 fdc2 	bl	8004cf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800416c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004170:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004174:	2300      	movs	r3, #0
 8004176:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800417a:	2300      	movs	r3, #0
 800417c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8004180:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004184:	4619      	mov	r1, r3
 8004186:	4810      	ldr	r0, [pc, #64]	; (80041c8 <HAL_PCD_MspInit+0xf0>)
 8004188:	f000 fdb2 	bl	8004cf0 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800418c:	4b0d      	ldr	r3, [pc, #52]	; (80041c4 <HAL_PCD_MspInit+0xec>)
 800418e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004190:	4a0c      	ldr	r2, [pc, #48]	; (80041c4 <HAL_PCD_MspInit+0xec>)
 8004192:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004196:	6353      	str	r3, [r2, #52]	; 0x34
 8004198:	4b0a      	ldr	r3, [pc, #40]	; (80041c4 <HAL_PCD_MspInit+0xec>)
 800419a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800419c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041a0:	60fb      	str	r3, [r7, #12]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	4b07      	ldr	r3, [pc, #28]	; (80041c4 <HAL_PCD_MspInit+0xec>)
 80041a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041a8:	4a06      	ldr	r2, [pc, #24]	; (80041c4 <HAL_PCD_MspInit+0xec>)
 80041aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80041ae:	6453      	str	r3, [r2, #68]	; 0x44
 80041b0:	4b04      	ldr	r3, [pc, #16]	; (80041c4 <HAL_PCD_MspInit+0xec>)
 80041b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041b8:	60bb      	str	r3, [r7, #8]
 80041ba:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80041bc:	bf00      	nop
 80041be:	37b8      	adds	r7, #184	; 0xb8
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	40023800 	.word	0x40023800
 80041c8:	40020000 	.word	0x40020000

080041cc <_ZN5TimerC1Ev>:

// ==================================================
// Timer
// ==================================================

Timer::Timer(){
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  this->delta = 0;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	605a      	str	r2, [r3, #4]
  this->time = 0;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	601a      	str	r2, [r3, #0]
}
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	4618      	mov	r0, r3
 80041e4:	370c      	adds	r7, #12
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr

080041ee <_ZN5Timer5setupEm>:
Timer::Timer(unsigned long delta, unsigned long time){
  this->delta = delta;
  this->time = time;
}

void Timer::setup(unsigned long delta){
 80041ee:	b480      	push	{r7}
 80041f0:	b083      	sub	sp, #12
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	6078      	str	r0, [r7, #4]
 80041f6:	6039      	str	r1, [r7, #0]
  this->delta = delta;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	683a      	ldr	r2, [r7, #0]
 80041fc:	605a      	str	r2, [r3, #4]
}
 80041fe:	bf00      	nop
 8004200:	370c      	adds	r7, #12
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr
	...

0800420c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800420c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004244 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004210:	480d      	ldr	r0, [pc, #52]	; (8004248 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004212:	490e      	ldr	r1, [pc, #56]	; (800424c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004214:	4a0e      	ldr	r2, [pc, #56]	; (8004250 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004216:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004218:	e002      	b.n	8004220 <LoopCopyDataInit>

0800421a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800421a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800421c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800421e:	3304      	adds	r3, #4

08004220 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004220:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004222:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004224:	d3f9      	bcc.n	800421a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004226:	4a0b      	ldr	r2, [pc, #44]	; (8004254 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004228:	4c0b      	ldr	r4, [pc, #44]	; (8004258 <LoopFillZerobss+0x26>)
  movs r3, #0
 800422a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800422c:	e001      	b.n	8004232 <LoopFillZerobss>

0800422e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800422e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004230:	3204      	adds	r2, #4

08004232 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004232:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004234:	d3fb      	bcc.n	800422e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004236:	f7ff f98b 	bl	8003550 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800423a:	f017 f9e9 	bl	801b610 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800423e:	f7fe fd53 	bl	8002ce8 <main>
  bx  lr    
 8004242:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004244:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8004248:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800424c:	2000213c 	.word	0x2000213c
  ldr r2, =_sidata
 8004250:	0801dfc4 	.word	0x0801dfc4
  ldr r2, =_sbss
 8004254:	20002140 	.word	0x20002140
  ldr r4, =_ebss
 8004258:	20010b7c 	.word	0x20010b7c

0800425c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800425c:	e7fe      	b.n	800425c <ADC_IRQHandler>

0800425e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800425e:	b580      	push	{r7, lr}
 8004260:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004262:	2003      	movs	r0, #3
 8004264:	f000 f8f9 	bl	800445a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004268:	200f      	movs	r0, #15
 800426a:	f7fe fff3 	bl	8003254 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800426e:	f7fe ffc9 	bl	8003204 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004272:	2300      	movs	r3, #0
}
 8004274:	4618      	mov	r0, r3
 8004276:	bd80      	pop	{r7, pc}

08004278 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004278:	b480      	push	{r7}
 800427a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800427c:	4b06      	ldr	r3, [pc, #24]	; (8004298 <HAL_IncTick+0x20>)
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	461a      	mov	r2, r3
 8004282:	4b06      	ldr	r3, [pc, #24]	; (800429c <HAL_IncTick+0x24>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4413      	add	r3, r2
 8004288:	4a04      	ldr	r2, [pc, #16]	; (800429c <HAL_IncTick+0x24>)
 800428a:	6013      	str	r3, [r2, #0]
}
 800428c:	bf00      	nop
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr
 8004296:	bf00      	nop
 8004298:	2000000c 	.word	0x2000000c
 800429c:	20006f98 	.word	0x20006f98

080042a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80042a0:	b480      	push	{r7}
 80042a2:	af00      	add	r7, sp, #0
  return uwTick;
 80042a4:	4b03      	ldr	r3, [pc, #12]	; (80042b4 <HAL_GetTick+0x14>)
 80042a6:	681b      	ldr	r3, [r3, #0]
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr
 80042b2:	bf00      	nop
 80042b4:	20006f98 	.word	0x20006f98

080042b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80042c0:	f7ff ffee 	bl	80042a0 <HAL_GetTick>
 80042c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042d0:	d005      	beq.n	80042de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80042d2:	4b0a      	ldr	r3, [pc, #40]	; (80042fc <HAL_Delay+0x44>)
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	461a      	mov	r2, r3
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	4413      	add	r3, r2
 80042dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80042de:	bf00      	nop
 80042e0:	f7ff ffde 	bl	80042a0 <HAL_GetTick>
 80042e4:	4602      	mov	r2, r0
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	68fa      	ldr	r2, [r7, #12]
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d8f7      	bhi.n	80042e0 <HAL_Delay+0x28>
  {
  }
}
 80042f0:	bf00      	nop
 80042f2:	bf00      	nop
 80042f4:	3710      	adds	r7, #16
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	2000000c 	.word	0x2000000c

08004300 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004300:	b480      	push	{r7}
 8004302:	b085      	sub	sp, #20
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f003 0307 	and.w	r3, r3, #7
 800430e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004310:	4b0b      	ldr	r3, [pc, #44]	; (8004340 <__NVIC_SetPriorityGrouping+0x40>)
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004316:	68ba      	ldr	r2, [r7, #8]
 8004318:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800431c:	4013      	ands	r3, r2
 800431e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004328:	4b06      	ldr	r3, [pc, #24]	; (8004344 <__NVIC_SetPriorityGrouping+0x44>)
 800432a:	4313      	orrs	r3, r2
 800432c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800432e:	4a04      	ldr	r2, [pc, #16]	; (8004340 <__NVIC_SetPriorityGrouping+0x40>)
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	60d3      	str	r3, [r2, #12]
}
 8004334:	bf00      	nop
 8004336:	3714      	adds	r7, #20
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr
 8004340:	e000ed00 	.word	0xe000ed00
 8004344:	05fa0000 	.word	0x05fa0000

08004348 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004348:	b480      	push	{r7}
 800434a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800434c:	4b04      	ldr	r3, [pc, #16]	; (8004360 <__NVIC_GetPriorityGrouping+0x18>)
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	0a1b      	lsrs	r3, r3, #8
 8004352:	f003 0307 	and.w	r3, r3, #7
}
 8004356:	4618      	mov	r0, r3
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr
 8004360:	e000ed00 	.word	0xe000ed00

08004364 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	4603      	mov	r3, r0
 800436c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800436e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004372:	2b00      	cmp	r3, #0
 8004374:	db0b      	blt.n	800438e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004376:	79fb      	ldrb	r3, [r7, #7]
 8004378:	f003 021f 	and.w	r2, r3, #31
 800437c:	4907      	ldr	r1, [pc, #28]	; (800439c <__NVIC_EnableIRQ+0x38>)
 800437e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004382:	095b      	lsrs	r3, r3, #5
 8004384:	2001      	movs	r0, #1
 8004386:	fa00 f202 	lsl.w	r2, r0, r2
 800438a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800438e:	bf00      	nop
 8004390:	370c      	adds	r7, #12
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr
 800439a:	bf00      	nop
 800439c:	e000e100 	.word	0xe000e100

080043a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b083      	sub	sp, #12
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	4603      	mov	r3, r0
 80043a8:	6039      	str	r1, [r7, #0]
 80043aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	db0a      	blt.n	80043ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	b2da      	uxtb	r2, r3
 80043b8:	490c      	ldr	r1, [pc, #48]	; (80043ec <__NVIC_SetPriority+0x4c>)
 80043ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043be:	0112      	lsls	r2, r2, #4
 80043c0:	b2d2      	uxtb	r2, r2
 80043c2:	440b      	add	r3, r1
 80043c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80043c8:	e00a      	b.n	80043e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	b2da      	uxtb	r2, r3
 80043ce:	4908      	ldr	r1, [pc, #32]	; (80043f0 <__NVIC_SetPriority+0x50>)
 80043d0:	79fb      	ldrb	r3, [r7, #7]
 80043d2:	f003 030f 	and.w	r3, r3, #15
 80043d6:	3b04      	subs	r3, #4
 80043d8:	0112      	lsls	r2, r2, #4
 80043da:	b2d2      	uxtb	r2, r2
 80043dc:	440b      	add	r3, r1
 80043de:	761a      	strb	r2, [r3, #24]
}
 80043e0:	bf00      	nop
 80043e2:	370c      	adds	r7, #12
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr
 80043ec:	e000e100 	.word	0xe000e100
 80043f0:	e000ed00 	.word	0xe000ed00

080043f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b089      	sub	sp, #36	; 0x24
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	60f8      	str	r0, [r7, #12]
 80043fc:	60b9      	str	r1, [r7, #8]
 80043fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f003 0307 	and.w	r3, r3, #7
 8004406:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	f1c3 0307 	rsb	r3, r3, #7
 800440e:	2b04      	cmp	r3, #4
 8004410:	bf28      	it	cs
 8004412:	2304      	movcs	r3, #4
 8004414:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	3304      	adds	r3, #4
 800441a:	2b06      	cmp	r3, #6
 800441c:	d902      	bls.n	8004424 <NVIC_EncodePriority+0x30>
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	3b03      	subs	r3, #3
 8004422:	e000      	b.n	8004426 <NVIC_EncodePriority+0x32>
 8004424:	2300      	movs	r3, #0
 8004426:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004428:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800442c:	69bb      	ldr	r3, [r7, #24]
 800442e:	fa02 f303 	lsl.w	r3, r2, r3
 8004432:	43da      	mvns	r2, r3
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	401a      	ands	r2, r3
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800443c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	fa01 f303 	lsl.w	r3, r1, r3
 8004446:	43d9      	mvns	r1, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800444c:	4313      	orrs	r3, r2
         );
}
 800444e:	4618      	mov	r0, r3
 8004450:	3724      	adds	r7, #36	; 0x24
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr

0800445a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800445a:	b580      	push	{r7, lr}
 800445c:	b082      	sub	sp, #8
 800445e:	af00      	add	r7, sp, #0
 8004460:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f7ff ff4c 	bl	8004300 <__NVIC_SetPriorityGrouping>
}
 8004468:	bf00      	nop
 800446a:	3708      	adds	r7, #8
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}

08004470 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004470:	b580      	push	{r7, lr}
 8004472:	b086      	sub	sp, #24
 8004474:	af00      	add	r7, sp, #0
 8004476:	4603      	mov	r3, r0
 8004478:	60b9      	str	r1, [r7, #8]
 800447a:	607a      	str	r2, [r7, #4]
 800447c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800447e:	2300      	movs	r3, #0
 8004480:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004482:	f7ff ff61 	bl	8004348 <__NVIC_GetPriorityGrouping>
 8004486:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	68b9      	ldr	r1, [r7, #8]
 800448c:	6978      	ldr	r0, [r7, #20]
 800448e:	f7ff ffb1 	bl	80043f4 <NVIC_EncodePriority>
 8004492:	4602      	mov	r2, r0
 8004494:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004498:	4611      	mov	r1, r2
 800449a:	4618      	mov	r0, r3
 800449c:	f7ff ff80 	bl	80043a0 <__NVIC_SetPriority>
}
 80044a0:	bf00      	nop
 80044a2:	3718      	adds	r7, #24
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	4603      	mov	r3, r0
 80044b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80044b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044b6:	4618      	mov	r0, r3
 80044b8:	f7ff ff54 	bl	8004364 <__NVIC_EnableIRQ>
}
 80044bc:	bf00      	nop
 80044be:	3708      	adds	r7, #8
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b086      	sub	sp, #24
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80044cc:	2300      	movs	r3, #0
 80044ce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80044d0:	f7ff fee6 	bl	80042a0 <HAL_GetTick>
 80044d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d101      	bne.n	80044e0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	e099      	b.n	8004614 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2202      	movs	r2, #2
 80044e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f022 0201 	bic.w	r2, r2, #1
 80044fe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004500:	e00f      	b.n	8004522 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004502:	f7ff fecd 	bl	80042a0 <HAL_GetTick>
 8004506:	4602      	mov	r2, r0
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	2b05      	cmp	r3, #5
 800450e:	d908      	bls.n	8004522 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2220      	movs	r2, #32
 8004514:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2203      	movs	r2, #3
 800451a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e078      	b.n	8004614 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0301 	and.w	r3, r3, #1
 800452c:	2b00      	cmp	r3, #0
 800452e:	d1e8      	bne.n	8004502 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004538:	697a      	ldr	r2, [r7, #20]
 800453a:	4b38      	ldr	r3, [pc, #224]	; (800461c <HAL_DMA_Init+0x158>)
 800453c:	4013      	ands	r3, r2
 800453e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	685a      	ldr	r2, [r3, #4]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800454e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	691b      	ldr	r3, [r3, #16]
 8004554:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800455a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	699b      	ldr	r3, [r3, #24]
 8004560:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004566:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6a1b      	ldr	r3, [r3, #32]
 800456c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800456e:	697a      	ldr	r2, [r7, #20]
 8004570:	4313      	orrs	r3, r2
 8004572:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004578:	2b04      	cmp	r3, #4
 800457a:	d107      	bne.n	800458c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004584:	4313      	orrs	r3, r2
 8004586:	697a      	ldr	r2, [r7, #20]
 8004588:	4313      	orrs	r3, r2
 800458a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	697a      	ldr	r2, [r7, #20]
 8004592:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	695b      	ldr	r3, [r3, #20]
 800459a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	f023 0307 	bic.w	r3, r3, #7
 80045a2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a8:	697a      	ldr	r2, [r7, #20]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b2:	2b04      	cmp	r3, #4
 80045b4:	d117      	bne.n	80045e6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ba:	697a      	ldr	r2, [r7, #20]
 80045bc:	4313      	orrs	r3, r2
 80045be:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d00e      	beq.n	80045e6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f000 fb15 	bl	8004bf8 <DMA_CheckFifoParam>
 80045ce:	4603      	mov	r3, r0
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d008      	beq.n	80045e6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2240      	movs	r2, #64	; 0x40
 80045d8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2201      	movs	r2, #1
 80045de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80045e2:	2301      	movs	r3, #1
 80045e4:	e016      	b.n	8004614 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	697a      	ldr	r2, [r7, #20]
 80045ec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f000 facc 	bl	8004b8c <DMA_CalcBaseAndBitshift>
 80045f4:	4603      	mov	r3, r0
 80045f6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045fc:	223f      	movs	r2, #63	; 0x3f
 80045fe:	409a      	lsls	r2, r3
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2201      	movs	r2, #1
 800460e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004612:	2300      	movs	r3, #0
}
 8004614:	4618      	mov	r0, r3
 8004616:	3718      	adds	r7, #24
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}
 800461c:	e010803f 	.word	0xe010803f

08004620 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b086      	sub	sp, #24
 8004624:	af00      	add	r7, sp, #0
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	60b9      	str	r1, [r7, #8]
 800462a:	607a      	str	r2, [r7, #4]
 800462c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800462e:	2300      	movs	r3, #0
 8004630:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004636:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800463e:	2b01      	cmp	r3, #1
 8004640:	d101      	bne.n	8004646 <HAL_DMA_Start_IT+0x26>
 8004642:	2302      	movs	r3, #2
 8004644:	e048      	b.n	80046d8 <HAL_DMA_Start_IT+0xb8>
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2201      	movs	r2, #1
 800464a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004654:	b2db      	uxtb	r3, r3
 8004656:	2b01      	cmp	r3, #1
 8004658:	d137      	bne.n	80046ca <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2202      	movs	r2, #2
 800465e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2200      	movs	r2, #0
 8004666:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	68b9      	ldr	r1, [r7, #8]
 800466e:	68f8      	ldr	r0, [r7, #12]
 8004670:	f000 fa5e 	bl	8004b30 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004678:	223f      	movs	r2, #63	; 0x3f
 800467a:	409a      	lsls	r2, r3
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f042 0216 	orr.w	r2, r2, #22
 800468e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	695a      	ldr	r2, [r3, #20]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800469e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d007      	beq.n	80046b8 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f042 0208 	orr.w	r2, r2, #8
 80046b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f042 0201 	orr.w	r2, r2, #1
 80046c6:	601a      	str	r2, [r3, #0]
 80046c8:	e005      	b.n	80046d6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2200      	movs	r2, #0
 80046ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80046d2:	2302      	movs	r3, #2
 80046d4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80046d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3718      	adds	r7, #24
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}

080046e0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046ec:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80046ee:	f7ff fdd7 	bl	80042a0 <HAL_GetTick>
 80046f2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d008      	beq.n	8004712 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2280      	movs	r2, #128	; 0x80
 8004704:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e052      	b.n	80047b8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f022 0216 	bic.w	r2, r2, #22
 8004720:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	695a      	ldr	r2, [r3, #20]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004730:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004736:	2b00      	cmp	r3, #0
 8004738:	d103      	bne.n	8004742 <HAL_DMA_Abort+0x62>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800473e:	2b00      	cmp	r3, #0
 8004740:	d007      	beq.n	8004752 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f022 0208 	bic.w	r2, r2, #8
 8004750:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f022 0201 	bic.w	r2, r2, #1
 8004760:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004762:	e013      	b.n	800478c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004764:	f7ff fd9c 	bl	80042a0 <HAL_GetTick>
 8004768:	4602      	mov	r2, r0
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	2b05      	cmp	r3, #5
 8004770:	d90c      	bls.n	800478c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2220      	movs	r2, #32
 8004776:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2203      	movs	r2, #3
 800477c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8004788:	2303      	movs	r3, #3
 800478a:	e015      	b.n	80047b8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 0301 	and.w	r3, r3, #1
 8004796:	2b00      	cmp	r3, #0
 8004798:	d1e4      	bne.n	8004764 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800479e:	223f      	movs	r2, #63	; 0x3f
 80047a0:	409a      	lsls	r2, r3
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2201      	movs	r2, #1
 80047aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80047b6:	2300      	movs	r3, #0
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3710      	adds	r7, #16
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}

080047c0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b083      	sub	sp, #12
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	2b02      	cmp	r3, #2
 80047d2:	d004      	beq.n	80047de <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2280      	movs	r2, #128	; 0x80
 80047d8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e00c      	b.n	80047f8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2205      	movs	r2, #5
 80047e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f022 0201 	bic.w	r2, r2, #1
 80047f4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80047f6:	2300      	movs	r3, #0
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	370c      	adds	r7, #12
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr

08004804 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b086      	sub	sp, #24
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800480c:	2300      	movs	r3, #0
 800480e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8004810:	4b8e      	ldr	r3, [pc, #568]	; (8004a4c <HAL_DMA_IRQHandler+0x248>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a8e      	ldr	r2, [pc, #568]	; (8004a50 <HAL_DMA_IRQHandler+0x24c>)
 8004816:	fba2 2303 	umull	r2, r3, r2, r3
 800481a:	0a9b      	lsrs	r3, r3, #10
 800481c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004822:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800482e:	2208      	movs	r2, #8
 8004830:	409a      	lsls	r2, r3
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	4013      	ands	r3, r2
 8004836:	2b00      	cmp	r3, #0
 8004838:	d01a      	beq.n	8004870 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0304 	and.w	r3, r3, #4
 8004844:	2b00      	cmp	r3, #0
 8004846:	d013      	beq.n	8004870 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f022 0204 	bic.w	r2, r2, #4
 8004856:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800485c:	2208      	movs	r2, #8
 800485e:	409a      	lsls	r2, r3
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004868:	f043 0201 	orr.w	r2, r3, #1
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004874:	2201      	movs	r2, #1
 8004876:	409a      	lsls	r2, r3
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	4013      	ands	r3, r2
 800487c:	2b00      	cmp	r3, #0
 800487e:	d012      	beq.n	80048a6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	695b      	ldr	r3, [r3, #20]
 8004886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800488a:	2b00      	cmp	r3, #0
 800488c:	d00b      	beq.n	80048a6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004892:	2201      	movs	r2, #1
 8004894:	409a      	lsls	r2, r3
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800489e:	f043 0202 	orr.w	r2, r3, #2
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048aa:	2204      	movs	r2, #4
 80048ac:	409a      	lsls	r2, r3
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	4013      	ands	r3, r2
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d012      	beq.n	80048dc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 0302 	and.w	r3, r3, #2
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d00b      	beq.n	80048dc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048c8:	2204      	movs	r2, #4
 80048ca:	409a      	lsls	r2, r3
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048d4:	f043 0204 	orr.w	r2, r3, #4
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048e0:	2210      	movs	r2, #16
 80048e2:	409a      	lsls	r2, r3
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	4013      	ands	r3, r2
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d043      	beq.n	8004974 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 0308 	and.w	r3, r3, #8
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d03c      	beq.n	8004974 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048fe:	2210      	movs	r2, #16
 8004900:	409a      	lsls	r2, r3
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004910:	2b00      	cmp	r3, #0
 8004912:	d018      	beq.n	8004946 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d108      	bne.n	8004934 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004926:	2b00      	cmp	r3, #0
 8004928:	d024      	beq.n	8004974 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	4798      	blx	r3
 8004932:	e01f      	b.n	8004974 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004938:	2b00      	cmp	r3, #0
 800493a:	d01b      	beq.n	8004974 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	4798      	blx	r3
 8004944:	e016      	b.n	8004974 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004950:	2b00      	cmp	r3, #0
 8004952:	d107      	bne.n	8004964 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f022 0208 	bic.w	r2, r2, #8
 8004962:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004968:	2b00      	cmp	r3, #0
 800496a:	d003      	beq.n	8004974 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004978:	2220      	movs	r2, #32
 800497a:	409a      	lsls	r2, r3
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	4013      	ands	r3, r2
 8004980:	2b00      	cmp	r3, #0
 8004982:	f000 808f 	beq.w	8004aa4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 0310 	and.w	r3, r3, #16
 8004990:	2b00      	cmp	r3, #0
 8004992:	f000 8087 	beq.w	8004aa4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800499a:	2220      	movs	r2, #32
 800499c:	409a      	lsls	r2, r3
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	2b05      	cmp	r3, #5
 80049ac:	d136      	bne.n	8004a1c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f022 0216 	bic.w	r2, r2, #22
 80049bc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	695a      	ldr	r2, [r3, #20]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80049cc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d103      	bne.n	80049de <HAL_DMA_IRQHandler+0x1da>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d007      	beq.n	80049ee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f022 0208 	bic.w	r2, r2, #8
 80049ec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049f2:	223f      	movs	r2, #63	; 0x3f
 80049f4:	409a      	lsls	r2, r3
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2201      	movs	r2, #1
 80049fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2200      	movs	r2, #0
 8004a06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d07e      	beq.n	8004b10 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	4798      	blx	r3
        }
        return;
 8004a1a:	e079      	b.n	8004b10 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d01d      	beq.n	8004a66 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d10d      	bne.n	8004a54 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d031      	beq.n	8004aa4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	4798      	blx	r3
 8004a48:	e02c      	b.n	8004aa4 <HAL_DMA_IRQHandler+0x2a0>
 8004a4a:	bf00      	nop
 8004a4c:	20000004 	.word	0x20000004
 8004a50:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d023      	beq.n	8004aa4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	4798      	blx	r3
 8004a64:	e01e      	b.n	8004aa4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d10f      	bne.n	8004a94 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f022 0210 	bic.w	r2, r2, #16
 8004a82:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d003      	beq.n	8004aa4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d032      	beq.n	8004b12 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ab0:	f003 0301 	and.w	r3, r3, #1
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d022      	beq.n	8004afe <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2205      	movs	r2, #5
 8004abc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f022 0201 	bic.w	r2, r2, #1
 8004ace:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	3301      	adds	r3, #1
 8004ad4:	60bb      	str	r3, [r7, #8]
 8004ad6:	697a      	ldr	r2, [r7, #20]
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d307      	bcc.n	8004aec <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 0301 	and.w	r3, r3, #1
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d1f2      	bne.n	8004ad0 <HAL_DMA_IRQHandler+0x2cc>
 8004aea:	e000      	b.n	8004aee <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004aec:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2201      	movs	r2, #1
 8004af2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d005      	beq.n	8004b12 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	4798      	blx	r3
 8004b0e:	e000      	b.n	8004b12 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004b10:	bf00      	nop
    }
  }
}
 8004b12:	3718      	adds	r7, #24
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	370c      	adds	r7, #12
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr

08004b30 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b085      	sub	sp, #20
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	60b9      	str	r1, [r7, #8]
 8004b3a:	607a      	str	r2, [r7, #4]
 8004b3c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004b4c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	683a      	ldr	r2, [r7, #0]
 8004b54:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	2b40      	cmp	r3, #64	; 0x40
 8004b5c:	d108      	bne.n	8004b70 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	68ba      	ldr	r2, [r7, #8]
 8004b6c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004b6e:	e007      	b.n	8004b80 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	68ba      	ldr	r2, [r7, #8]
 8004b76:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	60da      	str	r2, [r3, #12]
}
 8004b80:	bf00      	nop
 8004b82:	3714      	adds	r7, #20
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr

08004b8c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b085      	sub	sp, #20
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	3b10      	subs	r3, #16
 8004b9c:	4a13      	ldr	r2, [pc, #76]	; (8004bec <DMA_CalcBaseAndBitshift+0x60>)
 8004b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004ba2:	091b      	lsrs	r3, r3, #4
 8004ba4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004ba6:	4a12      	ldr	r2, [pc, #72]	; (8004bf0 <DMA_CalcBaseAndBitshift+0x64>)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	4413      	add	r3, r2
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	461a      	mov	r2, r3
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2b03      	cmp	r3, #3
 8004bb8:	d908      	bls.n	8004bcc <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	4b0c      	ldr	r3, [pc, #48]	; (8004bf4 <DMA_CalcBaseAndBitshift+0x68>)
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	1d1a      	adds	r2, r3, #4
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	659a      	str	r2, [r3, #88]	; 0x58
 8004bca:	e006      	b.n	8004bda <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	4b08      	ldr	r3, [pc, #32]	; (8004bf4 <DMA_CalcBaseAndBitshift+0x68>)
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3714      	adds	r7, #20
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr
 8004bea:	bf00      	nop
 8004bec:	aaaaaaab 	.word	0xaaaaaaab
 8004bf0:	0801c470 	.word	0x0801c470
 8004bf4:	fffffc00 	.word	0xfffffc00

08004bf8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b085      	sub	sp, #20
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c00:	2300      	movs	r3, #0
 8004c02:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c08:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	699b      	ldr	r3, [r3, #24]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d11f      	bne.n	8004c52 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	2b03      	cmp	r3, #3
 8004c16:	d856      	bhi.n	8004cc6 <DMA_CheckFifoParam+0xce>
 8004c18:	a201      	add	r2, pc, #4	; (adr r2, 8004c20 <DMA_CheckFifoParam+0x28>)
 8004c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c1e:	bf00      	nop
 8004c20:	08004c31 	.word	0x08004c31
 8004c24:	08004c43 	.word	0x08004c43
 8004c28:	08004c31 	.word	0x08004c31
 8004c2c:	08004cc7 	.word	0x08004cc7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d046      	beq.n	8004cca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c40:	e043      	b.n	8004cca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c46:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004c4a:	d140      	bne.n	8004cce <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c50:	e03d      	b.n	8004cce <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	699b      	ldr	r3, [r3, #24]
 8004c56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c5a:	d121      	bne.n	8004ca0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	2b03      	cmp	r3, #3
 8004c60:	d837      	bhi.n	8004cd2 <DMA_CheckFifoParam+0xda>
 8004c62:	a201      	add	r2, pc, #4	; (adr r2, 8004c68 <DMA_CheckFifoParam+0x70>)
 8004c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c68:	08004c79 	.word	0x08004c79
 8004c6c:	08004c7f 	.word	0x08004c7f
 8004c70:	08004c79 	.word	0x08004c79
 8004c74:	08004c91 	.word	0x08004c91
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	73fb      	strb	r3, [r7, #15]
      break;
 8004c7c:	e030      	b.n	8004ce0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d025      	beq.n	8004cd6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c8e:	e022      	b.n	8004cd6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c94:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004c98:	d11f      	bne.n	8004cda <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004c9e:	e01c      	b.n	8004cda <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	2b02      	cmp	r3, #2
 8004ca4:	d903      	bls.n	8004cae <DMA_CheckFifoParam+0xb6>
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	2b03      	cmp	r3, #3
 8004caa:	d003      	beq.n	8004cb4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004cac:	e018      	b.n	8004ce0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	73fb      	strb	r3, [r7, #15]
      break;
 8004cb2:	e015      	b.n	8004ce0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d00e      	beq.n	8004cde <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	73fb      	strb	r3, [r7, #15]
      break;
 8004cc4:	e00b      	b.n	8004cde <DMA_CheckFifoParam+0xe6>
      break;
 8004cc6:	bf00      	nop
 8004cc8:	e00a      	b.n	8004ce0 <DMA_CheckFifoParam+0xe8>
      break;
 8004cca:	bf00      	nop
 8004ccc:	e008      	b.n	8004ce0 <DMA_CheckFifoParam+0xe8>
      break;
 8004cce:	bf00      	nop
 8004cd0:	e006      	b.n	8004ce0 <DMA_CheckFifoParam+0xe8>
      break;
 8004cd2:	bf00      	nop
 8004cd4:	e004      	b.n	8004ce0 <DMA_CheckFifoParam+0xe8>
      break;
 8004cd6:	bf00      	nop
 8004cd8:	e002      	b.n	8004ce0 <DMA_CheckFifoParam+0xe8>
      break;   
 8004cda:	bf00      	nop
 8004cdc:	e000      	b.n	8004ce0 <DMA_CheckFifoParam+0xe8>
      break;
 8004cde:	bf00      	nop
    }
  } 
  
  return status; 
 8004ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3714      	adds	r7, #20
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr
 8004cee:	bf00      	nop

08004cf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b089      	sub	sp, #36	; 0x24
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004d02:	2300      	movs	r3, #0
 8004d04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004d06:	2300      	movs	r3, #0
 8004d08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	61fb      	str	r3, [r7, #28]
 8004d0e:	e175      	b.n	8004ffc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004d10:	2201      	movs	r2, #1
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	fa02 f303 	lsl.w	r3, r2, r3
 8004d18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	697a      	ldr	r2, [r7, #20]
 8004d20:	4013      	ands	r3, r2
 8004d22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004d24:	693a      	ldr	r2, [r7, #16]
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	f040 8164 	bne.w	8004ff6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	f003 0303 	and.w	r3, r3, #3
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d005      	beq.n	8004d46 <HAL_GPIO_Init+0x56>
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	f003 0303 	and.w	r3, r3, #3
 8004d42:	2b02      	cmp	r3, #2
 8004d44:	d130      	bne.n	8004da8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004d4c:	69fb      	ldr	r3, [r7, #28]
 8004d4e:	005b      	lsls	r3, r3, #1
 8004d50:	2203      	movs	r2, #3
 8004d52:	fa02 f303 	lsl.w	r3, r2, r3
 8004d56:	43db      	mvns	r3, r3
 8004d58:	69ba      	ldr	r2, [r7, #24]
 8004d5a:	4013      	ands	r3, r2
 8004d5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	68da      	ldr	r2, [r3, #12]
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	005b      	lsls	r3, r3, #1
 8004d66:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6a:	69ba      	ldr	r2, [r7, #24]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	69ba      	ldr	r2, [r7, #24]
 8004d74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	fa02 f303 	lsl.w	r3, r2, r3
 8004d84:	43db      	mvns	r3, r3
 8004d86:	69ba      	ldr	r2, [r7, #24]
 8004d88:	4013      	ands	r3, r2
 8004d8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	091b      	lsrs	r3, r3, #4
 8004d92:	f003 0201 	and.w	r2, r3, #1
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	fa02 f303 	lsl.w	r3, r2, r3
 8004d9c:	69ba      	ldr	r2, [r7, #24]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	69ba      	ldr	r2, [r7, #24]
 8004da6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	f003 0303 	and.w	r3, r3, #3
 8004db0:	2b03      	cmp	r3, #3
 8004db2:	d017      	beq.n	8004de4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004dba:	69fb      	ldr	r3, [r7, #28]
 8004dbc:	005b      	lsls	r3, r3, #1
 8004dbe:	2203      	movs	r2, #3
 8004dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc4:	43db      	mvns	r3, r3
 8004dc6:	69ba      	ldr	r2, [r7, #24]
 8004dc8:	4013      	ands	r3, r2
 8004dca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	689a      	ldr	r2, [r3, #8]
 8004dd0:	69fb      	ldr	r3, [r7, #28]
 8004dd2:	005b      	lsls	r3, r3, #1
 8004dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd8:	69ba      	ldr	r2, [r7, #24]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	69ba      	ldr	r2, [r7, #24]
 8004de2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	f003 0303 	and.w	r3, r3, #3
 8004dec:	2b02      	cmp	r3, #2
 8004dee:	d123      	bne.n	8004e38 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004df0:	69fb      	ldr	r3, [r7, #28]
 8004df2:	08da      	lsrs	r2, r3, #3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	3208      	adds	r2, #8
 8004df8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004dfe:	69fb      	ldr	r3, [r7, #28]
 8004e00:	f003 0307 	and.w	r3, r3, #7
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	220f      	movs	r2, #15
 8004e08:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0c:	43db      	mvns	r3, r3
 8004e0e:	69ba      	ldr	r2, [r7, #24]
 8004e10:	4013      	ands	r3, r2
 8004e12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	691a      	ldr	r2, [r3, #16]
 8004e18:	69fb      	ldr	r3, [r7, #28]
 8004e1a:	f003 0307 	and.w	r3, r3, #7
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	fa02 f303 	lsl.w	r3, r2, r3
 8004e24:	69ba      	ldr	r2, [r7, #24]
 8004e26:	4313      	orrs	r3, r2
 8004e28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004e2a:	69fb      	ldr	r3, [r7, #28]
 8004e2c:	08da      	lsrs	r2, r3, #3
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	3208      	adds	r2, #8
 8004e32:	69b9      	ldr	r1, [r7, #24]
 8004e34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	005b      	lsls	r3, r3, #1
 8004e42:	2203      	movs	r2, #3
 8004e44:	fa02 f303 	lsl.w	r3, r2, r3
 8004e48:	43db      	mvns	r3, r3
 8004e4a:	69ba      	ldr	r2, [r7, #24]
 8004e4c:	4013      	ands	r3, r2
 8004e4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	f003 0203 	and.w	r2, r3, #3
 8004e58:	69fb      	ldr	r3, [r7, #28]
 8004e5a:	005b      	lsls	r3, r3, #1
 8004e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e60:	69ba      	ldr	r2, [r7, #24]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	69ba      	ldr	r2, [r7, #24]
 8004e6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	f000 80be 	beq.w	8004ff6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e7a:	4b66      	ldr	r3, [pc, #408]	; (8005014 <HAL_GPIO_Init+0x324>)
 8004e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e7e:	4a65      	ldr	r2, [pc, #404]	; (8005014 <HAL_GPIO_Init+0x324>)
 8004e80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e84:	6453      	str	r3, [r2, #68]	; 0x44
 8004e86:	4b63      	ldr	r3, [pc, #396]	; (8005014 <HAL_GPIO_Init+0x324>)
 8004e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e8e:	60fb      	str	r3, [r7, #12]
 8004e90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004e92:	4a61      	ldr	r2, [pc, #388]	; (8005018 <HAL_GPIO_Init+0x328>)
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	089b      	lsrs	r3, r3, #2
 8004e98:	3302      	adds	r3, #2
 8004e9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004ea0:	69fb      	ldr	r3, [r7, #28]
 8004ea2:	f003 0303 	and.w	r3, r3, #3
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	220f      	movs	r2, #15
 8004eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8004eae:	43db      	mvns	r3, r3
 8004eb0:	69ba      	ldr	r2, [r7, #24]
 8004eb2:	4013      	ands	r3, r2
 8004eb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4a58      	ldr	r2, [pc, #352]	; (800501c <HAL_GPIO_Init+0x32c>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d037      	beq.n	8004f2e <HAL_GPIO_Init+0x23e>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a57      	ldr	r2, [pc, #348]	; (8005020 <HAL_GPIO_Init+0x330>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d031      	beq.n	8004f2a <HAL_GPIO_Init+0x23a>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a56      	ldr	r2, [pc, #344]	; (8005024 <HAL_GPIO_Init+0x334>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d02b      	beq.n	8004f26 <HAL_GPIO_Init+0x236>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a55      	ldr	r2, [pc, #340]	; (8005028 <HAL_GPIO_Init+0x338>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d025      	beq.n	8004f22 <HAL_GPIO_Init+0x232>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a54      	ldr	r2, [pc, #336]	; (800502c <HAL_GPIO_Init+0x33c>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d01f      	beq.n	8004f1e <HAL_GPIO_Init+0x22e>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a53      	ldr	r2, [pc, #332]	; (8005030 <HAL_GPIO_Init+0x340>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d019      	beq.n	8004f1a <HAL_GPIO_Init+0x22a>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4a52      	ldr	r2, [pc, #328]	; (8005034 <HAL_GPIO_Init+0x344>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d013      	beq.n	8004f16 <HAL_GPIO_Init+0x226>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4a51      	ldr	r2, [pc, #324]	; (8005038 <HAL_GPIO_Init+0x348>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d00d      	beq.n	8004f12 <HAL_GPIO_Init+0x222>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a50      	ldr	r2, [pc, #320]	; (800503c <HAL_GPIO_Init+0x34c>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d007      	beq.n	8004f0e <HAL_GPIO_Init+0x21e>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a4f      	ldr	r2, [pc, #316]	; (8005040 <HAL_GPIO_Init+0x350>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d101      	bne.n	8004f0a <HAL_GPIO_Init+0x21a>
 8004f06:	2309      	movs	r3, #9
 8004f08:	e012      	b.n	8004f30 <HAL_GPIO_Init+0x240>
 8004f0a:	230a      	movs	r3, #10
 8004f0c:	e010      	b.n	8004f30 <HAL_GPIO_Init+0x240>
 8004f0e:	2308      	movs	r3, #8
 8004f10:	e00e      	b.n	8004f30 <HAL_GPIO_Init+0x240>
 8004f12:	2307      	movs	r3, #7
 8004f14:	e00c      	b.n	8004f30 <HAL_GPIO_Init+0x240>
 8004f16:	2306      	movs	r3, #6
 8004f18:	e00a      	b.n	8004f30 <HAL_GPIO_Init+0x240>
 8004f1a:	2305      	movs	r3, #5
 8004f1c:	e008      	b.n	8004f30 <HAL_GPIO_Init+0x240>
 8004f1e:	2304      	movs	r3, #4
 8004f20:	e006      	b.n	8004f30 <HAL_GPIO_Init+0x240>
 8004f22:	2303      	movs	r3, #3
 8004f24:	e004      	b.n	8004f30 <HAL_GPIO_Init+0x240>
 8004f26:	2302      	movs	r3, #2
 8004f28:	e002      	b.n	8004f30 <HAL_GPIO_Init+0x240>
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e000      	b.n	8004f30 <HAL_GPIO_Init+0x240>
 8004f2e:	2300      	movs	r3, #0
 8004f30:	69fa      	ldr	r2, [r7, #28]
 8004f32:	f002 0203 	and.w	r2, r2, #3
 8004f36:	0092      	lsls	r2, r2, #2
 8004f38:	4093      	lsls	r3, r2
 8004f3a:	69ba      	ldr	r2, [r7, #24]
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004f40:	4935      	ldr	r1, [pc, #212]	; (8005018 <HAL_GPIO_Init+0x328>)
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	089b      	lsrs	r3, r3, #2
 8004f46:	3302      	adds	r3, #2
 8004f48:	69ba      	ldr	r2, [r7, #24]
 8004f4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004f4e:	4b3d      	ldr	r3, [pc, #244]	; (8005044 <HAL_GPIO_Init+0x354>)
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	43db      	mvns	r3, r3
 8004f58:	69ba      	ldr	r2, [r7, #24]
 8004f5a:	4013      	ands	r3, r2
 8004f5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d003      	beq.n	8004f72 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004f6a:	69ba      	ldr	r2, [r7, #24]
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004f72:	4a34      	ldr	r2, [pc, #208]	; (8005044 <HAL_GPIO_Init+0x354>)
 8004f74:	69bb      	ldr	r3, [r7, #24]
 8004f76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004f78:	4b32      	ldr	r3, [pc, #200]	; (8005044 <HAL_GPIO_Init+0x354>)
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	43db      	mvns	r3, r3
 8004f82:	69ba      	ldr	r2, [r7, #24]
 8004f84:	4013      	ands	r3, r2
 8004f86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d003      	beq.n	8004f9c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004f94:	69ba      	ldr	r2, [r7, #24]
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004f9c:	4a29      	ldr	r2, [pc, #164]	; (8005044 <HAL_GPIO_Init+0x354>)
 8004f9e:	69bb      	ldr	r3, [r7, #24]
 8004fa0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004fa2:	4b28      	ldr	r3, [pc, #160]	; (8005044 <HAL_GPIO_Init+0x354>)
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	43db      	mvns	r3, r3
 8004fac:	69ba      	ldr	r2, [r7, #24]
 8004fae:	4013      	ands	r3, r2
 8004fb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d003      	beq.n	8004fc6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004fbe:	69ba      	ldr	r2, [r7, #24]
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004fc6:	4a1f      	ldr	r2, [pc, #124]	; (8005044 <HAL_GPIO_Init+0x354>)
 8004fc8:	69bb      	ldr	r3, [r7, #24]
 8004fca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004fcc:	4b1d      	ldr	r3, [pc, #116]	; (8005044 <HAL_GPIO_Init+0x354>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	43db      	mvns	r3, r3
 8004fd6:	69ba      	ldr	r2, [r7, #24]
 8004fd8:	4013      	ands	r3, r2
 8004fda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d003      	beq.n	8004ff0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004fe8:	69ba      	ldr	r2, [r7, #24]
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	4313      	orrs	r3, r2
 8004fee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004ff0:	4a14      	ldr	r2, [pc, #80]	; (8005044 <HAL_GPIO_Init+0x354>)
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	3301      	adds	r3, #1
 8004ffa:	61fb      	str	r3, [r7, #28]
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	2b0f      	cmp	r3, #15
 8005000:	f67f ae86 	bls.w	8004d10 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005004:	bf00      	nop
 8005006:	bf00      	nop
 8005008:	3724      	adds	r7, #36	; 0x24
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr
 8005012:	bf00      	nop
 8005014:	40023800 	.word	0x40023800
 8005018:	40013800 	.word	0x40013800
 800501c:	40020000 	.word	0x40020000
 8005020:	40020400 	.word	0x40020400
 8005024:	40020800 	.word	0x40020800
 8005028:	40020c00 	.word	0x40020c00
 800502c:	40021000 	.word	0x40021000
 8005030:	40021400 	.word	0x40021400
 8005034:	40021800 	.word	0x40021800
 8005038:	40021c00 	.word	0x40021c00
 800503c:	40022000 	.word	0x40022000
 8005040:	40022400 	.word	0x40022400
 8005044:	40013c00 	.word	0x40013c00

08005048 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005048:	b480      	push	{r7}
 800504a:	b085      	sub	sp, #20
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	460b      	mov	r3, r1
 8005052:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	691a      	ldr	r2, [r3, #16]
 8005058:	887b      	ldrh	r3, [r7, #2]
 800505a:	4013      	ands	r3, r2
 800505c:	2b00      	cmp	r3, #0
 800505e:	d002      	beq.n	8005066 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005060:	2301      	movs	r3, #1
 8005062:	73fb      	strb	r3, [r7, #15]
 8005064:	e001      	b.n	800506a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005066:	2300      	movs	r3, #0
 8005068:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800506a:	7bfb      	ldrb	r3, [r7, #15]
}
 800506c:	4618      	mov	r0, r3
 800506e:	3714      	adds	r7, #20
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr

08005078 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005078:	b480      	push	{r7}
 800507a:	b083      	sub	sp, #12
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	460b      	mov	r3, r1
 8005082:	807b      	strh	r3, [r7, #2]
 8005084:	4613      	mov	r3, r2
 8005086:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005088:	787b      	ldrb	r3, [r7, #1]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d003      	beq.n	8005096 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800508e:	887a      	ldrh	r2, [r7, #2]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005094:	e003      	b.n	800509e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005096:	887b      	ldrh	r3, [r7, #2]
 8005098:	041a      	lsls	r2, r3, #16
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	619a      	str	r2, [r3, #24]
}
 800509e:	bf00      	nop
 80050a0:	370c      	adds	r7, #12
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr

080050aa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80050aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050ac:	b08f      	sub	sp, #60	; 0x3c
 80050ae:	af0a      	add	r7, sp, #40	; 0x28
 80050b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d101      	bne.n	80050bc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	e116      	b.n	80052ea <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80050c8:	b2db      	uxtb	r3, r3
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d106      	bne.n	80050dc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2200      	movs	r2, #0
 80050d2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f7fe fffe 	bl	80040d8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2203      	movs	r2, #3
 80050e0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d102      	bne.n	80050f6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2200      	movs	r2, #0
 80050f4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4618      	mov	r0, r3
 80050fc:	f003 ff00 	bl	8008f00 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	603b      	str	r3, [r7, #0]
 8005106:	687e      	ldr	r6, [r7, #4]
 8005108:	466d      	mov	r5, sp
 800510a:	f106 0410 	add.w	r4, r6, #16
 800510e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005110:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005112:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005114:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005116:	e894 0003 	ldmia.w	r4, {r0, r1}
 800511a:	e885 0003 	stmia.w	r5, {r0, r1}
 800511e:	1d33      	adds	r3, r6, #4
 8005120:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005122:	6838      	ldr	r0, [r7, #0]
 8005124:	f003 fe94 	bl	8008e50 <USB_CoreInit>
 8005128:	4603      	mov	r3, r0
 800512a:	2b00      	cmp	r3, #0
 800512c:	d005      	beq.n	800513a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2202      	movs	r2, #2
 8005132:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e0d7      	b.n	80052ea <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	2100      	movs	r1, #0
 8005140:	4618      	mov	r0, r3
 8005142:	f003 feee 	bl	8008f22 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005146:	2300      	movs	r3, #0
 8005148:	73fb      	strb	r3, [r7, #15]
 800514a:	e04a      	b.n	80051e2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800514c:	7bfa      	ldrb	r2, [r7, #15]
 800514e:	6879      	ldr	r1, [r7, #4]
 8005150:	4613      	mov	r3, r2
 8005152:	00db      	lsls	r3, r3, #3
 8005154:	4413      	add	r3, r2
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	440b      	add	r3, r1
 800515a:	333d      	adds	r3, #61	; 0x3d
 800515c:	2201      	movs	r2, #1
 800515e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005160:	7bfa      	ldrb	r2, [r7, #15]
 8005162:	6879      	ldr	r1, [r7, #4]
 8005164:	4613      	mov	r3, r2
 8005166:	00db      	lsls	r3, r3, #3
 8005168:	4413      	add	r3, r2
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	440b      	add	r3, r1
 800516e:	333c      	adds	r3, #60	; 0x3c
 8005170:	7bfa      	ldrb	r2, [r7, #15]
 8005172:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005174:	7bfa      	ldrb	r2, [r7, #15]
 8005176:	7bfb      	ldrb	r3, [r7, #15]
 8005178:	b298      	uxth	r0, r3
 800517a:	6879      	ldr	r1, [r7, #4]
 800517c:	4613      	mov	r3, r2
 800517e:	00db      	lsls	r3, r3, #3
 8005180:	4413      	add	r3, r2
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	440b      	add	r3, r1
 8005186:	3344      	adds	r3, #68	; 0x44
 8005188:	4602      	mov	r2, r0
 800518a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800518c:	7bfa      	ldrb	r2, [r7, #15]
 800518e:	6879      	ldr	r1, [r7, #4]
 8005190:	4613      	mov	r3, r2
 8005192:	00db      	lsls	r3, r3, #3
 8005194:	4413      	add	r3, r2
 8005196:	009b      	lsls	r3, r3, #2
 8005198:	440b      	add	r3, r1
 800519a:	3340      	adds	r3, #64	; 0x40
 800519c:	2200      	movs	r2, #0
 800519e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80051a0:	7bfa      	ldrb	r2, [r7, #15]
 80051a2:	6879      	ldr	r1, [r7, #4]
 80051a4:	4613      	mov	r3, r2
 80051a6:	00db      	lsls	r3, r3, #3
 80051a8:	4413      	add	r3, r2
 80051aa:	009b      	lsls	r3, r3, #2
 80051ac:	440b      	add	r3, r1
 80051ae:	3348      	adds	r3, #72	; 0x48
 80051b0:	2200      	movs	r2, #0
 80051b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80051b4:	7bfa      	ldrb	r2, [r7, #15]
 80051b6:	6879      	ldr	r1, [r7, #4]
 80051b8:	4613      	mov	r3, r2
 80051ba:	00db      	lsls	r3, r3, #3
 80051bc:	4413      	add	r3, r2
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	440b      	add	r3, r1
 80051c2:	334c      	adds	r3, #76	; 0x4c
 80051c4:	2200      	movs	r2, #0
 80051c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80051c8:	7bfa      	ldrb	r2, [r7, #15]
 80051ca:	6879      	ldr	r1, [r7, #4]
 80051cc:	4613      	mov	r3, r2
 80051ce:	00db      	lsls	r3, r3, #3
 80051d0:	4413      	add	r3, r2
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	440b      	add	r3, r1
 80051d6:	3354      	adds	r3, #84	; 0x54
 80051d8:	2200      	movs	r2, #0
 80051da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051dc:	7bfb      	ldrb	r3, [r7, #15]
 80051de:	3301      	adds	r3, #1
 80051e0:	73fb      	strb	r3, [r7, #15]
 80051e2:	7bfa      	ldrb	r2, [r7, #15]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d3af      	bcc.n	800514c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051ec:	2300      	movs	r3, #0
 80051ee:	73fb      	strb	r3, [r7, #15]
 80051f0:	e044      	b.n	800527c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80051f2:	7bfa      	ldrb	r2, [r7, #15]
 80051f4:	6879      	ldr	r1, [r7, #4]
 80051f6:	4613      	mov	r3, r2
 80051f8:	00db      	lsls	r3, r3, #3
 80051fa:	4413      	add	r3, r2
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	440b      	add	r3, r1
 8005200:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005204:	2200      	movs	r2, #0
 8005206:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005208:	7bfa      	ldrb	r2, [r7, #15]
 800520a:	6879      	ldr	r1, [r7, #4]
 800520c:	4613      	mov	r3, r2
 800520e:	00db      	lsls	r3, r3, #3
 8005210:	4413      	add	r3, r2
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	440b      	add	r3, r1
 8005216:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800521a:	7bfa      	ldrb	r2, [r7, #15]
 800521c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800521e:	7bfa      	ldrb	r2, [r7, #15]
 8005220:	6879      	ldr	r1, [r7, #4]
 8005222:	4613      	mov	r3, r2
 8005224:	00db      	lsls	r3, r3, #3
 8005226:	4413      	add	r3, r2
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	440b      	add	r3, r1
 800522c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005230:	2200      	movs	r2, #0
 8005232:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005234:	7bfa      	ldrb	r2, [r7, #15]
 8005236:	6879      	ldr	r1, [r7, #4]
 8005238:	4613      	mov	r3, r2
 800523a:	00db      	lsls	r3, r3, #3
 800523c:	4413      	add	r3, r2
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	440b      	add	r3, r1
 8005242:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005246:	2200      	movs	r2, #0
 8005248:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800524a:	7bfa      	ldrb	r2, [r7, #15]
 800524c:	6879      	ldr	r1, [r7, #4]
 800524e:	4613      	mov	r3, r2
 8005250:	00db      	lsls	r3, r3, #3
 8005252:	4413      	add	r3, r2
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	440b      	add	r3, r1
 8005258:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800525c:	2200      	movs	r2, #0
 800525e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005260:	7bfa      	ldrb	r2, [r7, #15]
 8005262:	6879      	ldr	r1, [r7, #4]
 8005264:	4613      	mov	r3, r2
 8005266:	00db      	lsls	r3, r3, #3
 8005268:	4413      	add	r3, r2
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	440b      	add	r3, r1
 800526e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005272:	2200      	movs	r2, #0
 8005274:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005276:	7bfb      	ldrb	r3, [r7, #15]
 8005278:	3301      	adds	r3, #1
 800527a:	73fb      	strb	r3, [r7, #15]
 800527c:	7bfa      	ldrb	r2, [r7, #15]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	429a      	cmp	r2, r3
 8005284:	d3b5      	bcc.n	80051f2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	603b      	str	r3, [r7, #0]
 800528c:	687e      	ldr	r6, [r7, #4]
 800528e:	466d      	mov	r5, sp
 8005290:	f106 0410 	add.w	r4, r6, #16
 8005294:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005296:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005298:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800529a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800529c:	e894 0003 	ldmia.w	r4, {r0, r1}
 80052a0:	e885 0003 	stmia.w	r5, {r0, r1}
 80052a4:	1d33      	adds	r3, r6, #4
 80052a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80052a8:	6838      	ldr	r0, [r7, #0]
 80052aa:	f003 fe87 	bl	8008fbc <USB_DevInit>
 80052ae:	4603      	mov	r3, r0
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d005      	beq.n	80052c0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2202      	movs	r2, #2
 80052b8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	e014      	b.n	80052ea <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2200      	movs	r2, #0
 80052c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d102      	bne.n	80052de <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f000 f80b 	bl	80052f4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4618      	mov	r0, r3
 80052e4:	f004 f845 	bl	8009372 <USB_DevDisconnect>

  return HAL_OK;
 80052e8:	2300      	movs	r3, #0
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3714      	adds	r7, #20
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080052f4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b085      	sub	sp, #20
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2201      	movs	r2, #1
 8005306:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	699b      	ldr	r3, [r3, #24]
 8005316:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005322:	4b05      	ldr	r3, [pc, #20]	; (8005338 <HAL_PCDEx_ActivateLPM+0x44>)
 8005324:	4313      	orrs	r3, r2
 8005326:	68fa      	ldr	r2, [r7, #12]
 8005328:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800532a:	2300      	movs	r3, #0
}
 800532c:	4618      	mov	r0, r3
 800532e:	3714      	adds	r7, #20
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr
 8005338:	10000003 	.word	0x10000003

0800533c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800533c:	b480      	push	{r7}
 800533e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005340:	4b05      	ldr	r3, [pc, #20]	; (8005358 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a04      	ldr	r2, [pc, #16]	; (8005358 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005346:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800534a:	6013      	str	r3, [r2, #0]
}
 800534c:	bf00      	nop
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr
 8005356:	bf00      	nop
 8005358:	40007000 	.word	0x40007000

0800535c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b082      	sub	sp, #8
 8005360:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8005362:	2300      	movs	r3, #0
 8005364:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005366:	4b23      	ldr	r3, [pc, #140]	; (80053f4 <HAL_PWREx_EnableOverDrive+0x98>)
 8005368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800536a:	4a22      	ldr	r2, [pc, #136]	; (80053f4 <HAL_PWREx_EnableOverDrive+0x98>)
 800536c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005370:	6413      	str	r3, [r2, #64]	; 0x40
 8005372:	4b20      	ldr	r3, [pc, #128]	; (80053f4 <HAL_PWREx_EnableOverDrive+0x98>)
 8005374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800537a:	603b      	str	r3, [r7, #0]
 800537c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800537e:	4b1e      	ldr	r3, [pc, #120]	; (80053f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a1d      	ldr	r2, [pc, #116]	; (80053f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005384:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005388:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800538a:	f7fe ff89 	bl	80042a0 <HAL_GetTick>
 800538e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005390:	e009      	b.n	80053a6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005392:	f7fe ff85 	bl	80042a0 <HAL_GetTick>
 8005396:	4602      	mov	r2, r0
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	1ad3      	subs	r3, r2, r3
 800539c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80053a0:	d901      	bls.n	80053a6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80053a2:	2303      	movs	r3, #3
 80053a4:	e022      	b.n	80053ec <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80053a6:	4b14      	ldr	r3, [pc, #80]	; (80053f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053b2:	d1ee      	bne.n	8005392 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80053b4:	4b10      	ldr	r3, [pc, #64]	; (80053f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a0f      	ldr	r2, [pc, #60]	; (80053f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80053ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053be:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80053c0:	f7fe ff6e 	bl	80042a0 <HAL_GetTick>
 80053c4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80053c6:	e009      	b.n	80053dc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80053c8:	f7fe ff6a 	bl	80042a0 <HAL_GetTick>
 80053cc:	4602      	mov	r2, r0
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	1ad3      	subs	r3, r2, r3
 80053d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80053d6:	d901      	bls.n	80053dc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80053d8:	2303      	movs	r3, #3
 80053da:	e007      	b.n	80053ec <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80053dc:	4b06      	ldr	r3, [pc, #24]	; (80053f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80053e8:	d1ee      	bne.n	80053c8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80053ea:	2300      	movs	r3, #0
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3708      	adds	r7, #8
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}
 80053f4:	40023800 	.word	0x40023800
 80053f8:	40007000 	.word	0x40007000

080053fc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b086      	sub	sp, #24
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005404:	2300      	movs	r3, #0
 8005406:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d101      	bne.n	8005412 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e29b      	b.n	800594a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 0301 	and.w	r3, r3, #1
 800541a:	2b00      	cmp	r3, #0
 800541c:	f000 8087 	beq.w	800552e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005420:	4b96      	ldr	r3, [pc, #600]	; (800567c <HAL_RCC_OscConfig+0x280>)
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	f003 030c 	and.w	r3, r3, #12
 8005428:	2b04      	cmp	r3, #4
 800542a:	d00c      	beq.n	8005446 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800542c:	4b93      	ldr	r3, [pc, #588]	; (800567c <HAL_RCC_OscConfig+0x280>)
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	f003 030c 	and.w	r3, r3, #12
 8005434:	2b08      	cmp	r3, #8
 8005436:	d112      	bne.n	800545e <HAL_RCC_OscConfig+0x62>
 8005438:	4b90      	ldr	r3, [pc, #576]	; (800567c <HAL_RCC_OscConfig+0x280>)
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005440:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005444:	d10b      	bne.n	800545e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005446:	4b8d      	ldr	r3, [pc, #564]	; (800567c <HAL_RCC_OscConfig+0x280>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800544e:	2b00      	cmp	r3, #0
 8005450:	d06c      	beq.n	800552c <HAL_RCC_OscConfig+0x130>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d168      	bne.n	800552c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	e275      	b.n	800594a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005466:	d106      	bne.n	8005476 <HAL_RCC_OscConfig+0x7a>
 8005468:	4b84      	ldr	r3, [pc, #528]	; (800567c <HAL_RCC_OscConfig+0x280>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a83      	ldr	r2, [pc, #524]	; (800567c <HAL_RCC_OscConfig+0x280>)
 800546e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005472:	6013      	str	r3, [r2, #0]
 8005474:	e02e      	b.n	80054d4 <HAL_RCC_OscConfig+0xd8>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d10c      	bne.n	8005498 <HAL_RCC_OscConfig+0x9c>
 800547e:	4b7f      	ldr	r3, [pc, #508]	; (800567c <HAL_RCC_OscConfig+0x280>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a7e      	ldr	r2, [pc, #504]	; (800567c <HAL_RCC_OscConfig+0x280>)
 8005484:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005488:	6013      	str	r3, [r2, #0]
 800548a:	4b7c      	ldr	r3, [pc, #496]	; (800567c <HAL_RCC_OscConfig+0x280>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a7b      	ldr	r2, [pc, #492]	; (800567c <HAL_RCC_OscConfig+0x280>)
 8005490:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005494:	6013      	str	r3, [r2, #0]
 8005496:	e01d      	b.n	80054d4 <HAL_RCC_OscConfig+0xd8>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80054a0:	d10c      	bne.n	80054bc <HAL_RCC_OscConfig+0xc0>
 80054a2:	4b76      	ldr	r3, [pc, #472]	; (800567c <HAL_RCC_OscConfig+0x280>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a75      	ldr	r2, [pc, #468]	; (800567c <HAL_RCC_OscConfig+0x280>)
 80054a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054ac:	6013      	str	r3, [r2, #0]
 80054ae:	4b73      	ldr	r3, [pc, #460]	; (800567c <HAL_RCC_OscConfig+0x280>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a72      	ldr	r2, [pc, #456]	; (800567c <HAL_RCC_OscConfig+0x280>)
 80054b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054b8:	6013      	str	r3, [r2, #0]
 80054ba:	e00b      	b.n	80054d4 <HAL_RCC_OscConfig+0xd8>
 80054bc:	4b6f      	ldr	r3, [pc, #444]	; (800567c <HAL_RCC_OscConfig+0x280>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a6e      	ldr	r2, [pc, #440]	; (800567c <HAL_RCC_OscConfig+0x280>)
 80054c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054c6:	6013      	str	r3, [r2, #0]
 80054c8:	4b6c      	ldr	r3, [pc, #432]	; (800567c <HAL_RCC_OscConfig+0x280>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a6b      	ldr	r2, [pc, #428]	; (800567c <HAL_RCC_OscConfig+0x280>)
 80054ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d013      	beq.n	8005504 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054dc:	f7fe fee0 	bl	80042a0 <HAL_GetTick>
 80054e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054e2:	e008      	b.n	80054f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054e4:	f7fe fedc 	bl	80042a0 <HAL_GetTick>
 80054e8:	4602      	mov	r2, r0
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	1ad3      	subs	r3, r2, r3
 80054ee:	2b64      	cmp	r3, #100	; 0x64
 80054f0:	d901      	bls.n	80054f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80054f2:	2303      	movs	r3, #3
 80054f4:	e229      	b.n	800594a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054f6:	4b61      	ldr	r3, [pc, #388]	; (800567c <HAL_RCC_OscConfig+0x280>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d0f0      	beq.n	80054e4 <HAL_RCC_OscConfig+0xe8>
 8005502:	e014      	b.n	800552e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005504:	f7fe fecc 	bl	80042a0 <HAL_GetTick>
 8005508:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800550a:	e008      	b.n	800551e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800550c:	f7fe fec8 	bl	80042a0 <HAL_GetTick>
 8005510:	4602      	mov	r2, r0
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	1ad3      	subs	r3, r2, r3
 8005516:	2b64      	cmp	r3, #100	; 0x64
 8005518:	d901      	bls.n	800551e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800551a:	2303      	movs	r3, #3
 800551c:	e215      	b.n	800594a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800551e:	4b57      	ldr	r3, [pc, #348]	; (800567c <HAL_RCC_OscConfig+0x280>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005526:	2b00      	cmp	r3, #0
 8005528:	d1f0      	bne.n	800550c <HAL_RCC_OscConfig+0x110>
 800552a:	e000      	b.n	800552e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800552c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f003 0302 	and.w	r3, r3, #2
 8005536:	2b00      	cmp	r3, #0
 8005538:	d069      	beq.n	800560e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800553a:	4b50      	ldr	r3, [pc, #320]	; (800567c <HAL_RCC_OscConfig+0x280>)
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	f003 030c 	and.w	r3, r3, #12
 8005542:	2b00      	cmp	r3, #0
 8005544:	d00b      	beq.n	800555e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005546:	4b4d      	ldr	r3, [pc, #308]	; (800567c <HAL_RCC_OscConfig+0x280>)
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	f003 030c 	and.w	r3, r3, #12
 800554e:	2b08      	cmp	r3, #8
 8005550:	d11c      	bne.n	800558c <HAL_RCC_OscConfig+0x190>
 8005552:	4b4a      	ldr	r3, [pc, #296]	; (800567c <HAL_RCC_OscConfig+0x280>)
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800555a:	2b00      	cmp	r3, #0
 800555c:	d116      	bne.n	800558c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800555e:	4b47      	ldr	r3, [pc, #284]	; (800567c <HAL_RCC_OscConfig+0x280>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 0302 	and.w	r3, r3, #2
 8005566:	2b00      	cmp	r3, #0
 8005568:	d005      	beq.n	8005576 <HAL_RCC_OscConfig+0x17a>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	68db      	ldr	r3, [r3, #12]
 800556e:	2b01      	cmp	r3, #1
 8005570:	d001      	beq.n	8005576 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e1e9      	b.n	800594a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005576:	4b41      	ldr	r3, [pc, #260]	; (800567c <HAL_RCC_OscConfig+0x280>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	00db      	lsls	r3, r3, #3
 8005584:	493d      	ldr	r1, [pc, #244]	; (800567c <HAL_RCC_OscConfig+0x280>)
 8005586:	4313      	orrs	r3, r2
 8005588:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800558a:	e040      	b.n	800560e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d023      	beq.n	80055dc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005594:	4b39      	ldr	r3, [pc, #228]	; (800567c <HAL_RCC_OscConfig+0x280>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a38      	ldr	r2, [pc, #224]	; (800567c <HAL_RCC_OscConfig+0x280>)
 800559a:	f043 0301 	orr.w	r3, r3, #1
 800559e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055a0:	f7fe fe7e 	bl	80042a0 <HAL_GetTick>
 80055a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055a6:	e008      	b.n	80055ba <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055a8:	f7fe fe7a 	bl	80042a0 <HAL_GetTick>
 80055ac:	4602      	mov	r2, r0
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	1ad3      	subs	r3, r2, r3
 80055b2:	2b02      	cmp	r3, #2
 80055b4:	d901      	bls.n	80055ba <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80055b6:	2303      	movs	r3, #3
 80055b8:	e1c7      	b.n	800594a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055ba:	4b30      	ldr	r3, [pc, #192]	; (800567c <HAL_RCC_OscConfig+0x280>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 0302 	and.w	r3, r3, #2
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d0f0      	beq.n	80055a8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055c6:	4b2d      	ldr	r3, [pc, #180]	; (800567c <HAL_RCC_OscConfig+0x280>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	691b      	ldr	r3, [r3, #16]
 80055d2:	00db      	lsls	r3, r3, #3
 80055d4:	4929      	ldr	r1, [pc, #164]	; (800567c <HAL_RCC_OscConfig+0x280>)
 80055d6:	4313      	orrs	r3, r2
 80055d8:	600b      	str	r3, [r1, #0]
 80055da:	e018      	b.n	800560e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055dc:	4b27      	ldr	r3, [pc, #156]	; (800567c <HAL_RCC_OscConfig+0x280>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a26      	ldr	r2, [pc, #152]	; (800567c <HAL_RCC_OscConfig+0x280>)
 80055e2:	f023 0301 	bic.w	r3, r3, #1
 80055e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055e8:	f7fe fe5a 	bl	80042a0 <HAL_GetTick>
 80055ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055ee:	e008      	b.n	8005602 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055f0:	f7fe fe56 	bl	80042a0 <HAL_GetTick>
 80055f4:	4602      	mov	r2, r0
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	1ad3      	subs	r3, r2, r3
 80055fa:	2b02      	cmp	r3, #2
 80055fc:	d901      	bls.n	8005602 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80055fe:	2303      	movs	r3, #3
 8005600:	e1a3      	b.n	800594a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005602:	4b1e      	ldr	r3, [pc, #120]	; (800567c <HAL_RCC_OscConfig+0x280>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 0302 	and.w	r3, r3, #2
 800560a:	2b00      	cmp	r3, #0
 800560c:	d1f0      	bne.n	80055f0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 0308 	and.w	r3, r3, #8
 8005616:	2b00      	cmp	r3, #0
 8005618:	d038      	beq.n	800568c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	695b      	ldr	r3, [r3, #20]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d019      	beq.n	8005656 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005622:	4b16      	ldr	r3, [pc, #88]	; (800567c <HAL_RCC_OscConfig+0x280>)
 8005624:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005626:	4a15      	ldr	r2, [pc, #84]	; (800567c <HAL_RCC_OscConfig+0x280>)
 8005628:	f043 0301 	orr.w	r3, r3, #1
 800562c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800562e:	f7fe fe37 	bl	80042a0 <HAL_GetTick>
 8005632:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005634:	e008      	b.n	8005648 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005636:	f7fe fe33 	bl	80042a0 <HAL_GetTick>
 800563a:	4602      	mov	r2, r0
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	1ad3      	subs	r3, r2, r3
 8005640:	2b02      	cmp	r3, #2
 8005642:	d901      	bls.n	8005648 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005644:	2303      	movs	r3, #3
 8005646:	e180      	b.n	800594a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005648:	4b0c      	ldr	r3, [pc, #48]	; (800567c <HAL_RCC_OscConfig+0x280>)
 800564a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800564c:	f003 0302 	and.w	r3, r3, #2
 8005650:	2b00      	cmp	r3, #0
 8005652:	d0f0      	beq.n	8005636 <HAL_RCC_OscConfig+0x23a>
 8005654:	e01a      	b.n	800568c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005656:	4b09      	ldr	r3, [pc, #36]	; (800567c <HAL_RCC_OscConfig+0x280>)
 8005658:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800565a:	4a08      	ldr	r2, [pc, #32]	; (800567c <HAL_RCC_OscConfig+0x280>)
 800565c:	f023 0301 	bic.w	r3, r3, #1
 8005660:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005662:	f7fe fe1d 	bl	80042a0 <HAL_GetTick>
 8005666:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005668:	e00a      	b.n	8005680 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800566a:	f7fe fe19 	bl	80042a0 <HAL_GetTick>
 800566e:	4602      	mov	r2, r0
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	1ad3      	subs	r3, r2, r3
 8005674:	2b02      	cmp	r3, #2
 8005676:	d903      	bls.n	8005680 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005678:	2303      	movs	r3, #3
 800567a:	e166      	b.n	800594a <HAL_RCC_OscConfig+0x54e>
 800567c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005680:	4b92      	ldr	r3, [pc, #584]	; (80058cc <HAL_RCC_OscConfig+0x4d0>)
 8005682:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005684:	f003 0302 	and.w	r3, r3, #2
 8005688:	2b00      	cmp	r3, #0
 800568a:	d1ee      	bne.n	800566a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f003 0304 	and.w	r3, r3, #4
 8005694:	2b00      	cmp	r3, #0
 8005696:	f000 80a4 	beq.w	80057e2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800569a:	4b8c      	ldr	r3, [pc, #560]	; (80058cc <HAL_RCC_OscConfig+0x4d0>)
 800569c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800569e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d10d      	bne.n	80056c2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80056a6:	4b89      	ldr	r3, [pc, #548]	; (80058cc <HAL_RCC_OscConfig+0x4d0>)
 80056a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056aa:	4a88      	ldr	r2, [pc, #544]	; (80058cc <HAL_RCC_OscConfig+0x4d0>)
 80056ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056b0:	6413      	str	r3, [r2, #64]	; 0x40
 80056b2:	4b86      	ldr	r3, [pc, #536]	; (80058cc <HAL_RCC_OscConfig+0x4d0>)
 80056b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056ba:	60bb      	str	r3, [r7, #8]
 80056bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056be:	2301      	movs	r3, #1
 80056c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056c2:	4b83      	ldr	r3, [pc, #524]	; (80058d0 <HAL_RCC_OscConfig+0x4d4>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d118      	bne.n	8005700 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80056ce:	4b80      	ldr	r3, [pc, #512]	; (80058d0 <HAL_RCC_OscConfig+0x4d4>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a7f      	ldr	r2, [pc, #508]	; (80058d0 <HAL_RCC_OscConfig+0x4d4>)
 80056d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056da:	f7fe fde1 	bl	80042a0 <HAL_GetTick>
 80056de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056e0:	e008      	b.n	80056f4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056e2:	f7fe fddd 	bl	80042a0 <HAL_GetTick>
 80056e6:	4602      	mov	r2, r0
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	1ad3      	subs	r3, r2, r3
 80056ec:	2b64      	cmp	r3, #100	; 0x64
 80056ee:	d901      	bls.n	80056f4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80056f0:	2303      	movs	r3, #3
 80056f2:	e12a      	b.n	800594a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056f4:	4b76      	ldr	r3, [pc, #472]	; (80058d0 <HAL_RCC_OscConfig+0x4d4>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d0f0      	beq.n	80056e2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	2b01      	cmp	r3, #1
 8005706:	d106      	bne.n	8005716 <HAL_RCC_OscConfig+0x31a>
 8005708:	4b70      	ldr	r3, [pc, #448]	; (80058cc <HAL_RCC_OscConfig+0x4d0>)
 800570a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800570c:	4a6f      	ldr	r2, [pc, #444]	; (80058cc <HAL_RCC_OscConfig+0x4d0>)
 800570e:	f043 0301 	orr.w	r3, r3, #1
 8005712:	6713      	str	r3, [r2, #112]	; 0x70
 8005714:	e02d      	b.n	8005772 <HAL_RCC_OscConfig+0x376>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d10c      	bne.n	8005738 <HAL_RCC_OscConfig+0x33c>
 800571e:	4b6b      	ldr	r3, [pc, #428]	; (80058cc <HAL_RCC_OscConfig+0x4d0>)
 8005720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005722:	4a6a      	ldr	r2, [pc, #424]	; (80058cc <HAL_RCC_OscConfig+0x4d0>)
 8005724:	f023 0301 	bic.w	r3, r3, #1
 8005728:	6713      	str	r3, [r2, #112]	; 0x70
 800572a:	4b68      	ldr	r3, [pc, #416]	; (80058cc <HAL_RCC_OscConfig+0x4d0>)
 800572c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800572e:	4a67      	ldr	r2, [pc, #412]	; (80058cc <HAL_RCC_OscConfig+0x4d0>)
 8005730:	f023 0304 	bic.w	r3, r3, #4
 8005734:	6713      	str	r3, [r2, #112]	; 0x70
 8005736:	e01c      	b.n	8005772 <HAL_RCC_OscConfig+0x376>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	2b05      	cmp	r3, #5
 800573e:	d10c      	bne.n	800575a <HAL_RCC_OscConfig+0x35e>
 8005740:	4b62      	ldr	r3, [pc, #392]	; (80058cc <HAL_RCC_OscConfig+0x4d0>)
 8005742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005744:	4a61      	ldr	r2, [pc, #388]	; (80058cc <HAL_RCC_OscConfig+0x4d0>)
 8005746:	f043 0304 	orr.w	r3, r3, #4
 800574a:	6713      	str	r3, [r2, #112]	; 0x70
 800574c:	4b5f      	ldr	r3, [pc, #380]	; (80058cc <HAL_RCC_OscConfig+0x4d0>)
 800574e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005750:	4a5e      	ldr	r2, [pc, #376]	; (80058cc <HAL_RCC_OscConfig+0x4d0>)
 8005752:	f043 0301 	orr.w	r3, r3, #1
 8005756:	6713      	str	r3, [r2, #112]	; 0x70
 8005758:	e00b      	b.n	8005772 <HAL_RCC_OscConfig+0x376>
 800575a:	4b5c      	ldr	r3, [pc, #368]	; (80058cc <HAL_RCC_OscConfig+0x4d0>)
 800575c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800575e:	4a5b      	ldr	r2, [pc, #364]	; (80058cc <HAL_RCC_OscConfig+0x4d0>)
 8005760:	f023 0301 	bic.w	r3, r3, #1
 8005764:	6713      	str	r3, [r2, #112]	; 0x70
 8005766:	4b59      	ldr	r3, [pc, #356]	; (80058cc <HAL_RCC_OscConfig+0x4d0>)
 8005768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800576a:	4a58      	ldr	r2, [pc, #352]	; (80058cc <HAL_RCC_OscConfig+0x4d0>)
 800576c:	f023 0304 	bic.w	r3, r3, #4
 8005770:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d015      	beq.n	80057a6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800577a:	f7fe fd91 	bl	80042a0 <HAL_GetTick>
 800577e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005780:	e00a      	b.n	8005798 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005782:	f7fe fd8d 	bl	80042a0 <HAL_GetTick>
 8005786:	4602      	mov	r2, r0
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	1ad3      	subs	r3, r2, r3
 800578c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005790:	4293      	cmp	r3, r2
 8005792:	d901      	bls.n	8005798 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005794:	2303      	movs	r3, #3
 8005796:	e0d8      	b.n	800594a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005798:	4b4c      	ldr	r3, [pc, #304]	; (80058cc <HAL_RCC_OscConfig+0x4d0>)
 800579a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800579c:	f003 0302 	and.w	r3, r3, #2
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d0ee      	beq.n	8005782 <HAL_RCC_OscConfig+0x386>
 80057a4:	e014      	b.n	80057d0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057a6:	f7fe fd7b 	bl	80042a0 <HAL_GetTick>
 80057aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057ac:	e00a      	b.n	80057c4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057ae:	f7fe fd77 	bl	80042a0 <HAL_GetTick>
 80057b2:	4602      	mov	r2, r0
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	1ad3      	subs	r3, r2, r3
 80057b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80057bc:	4293      	cmp	r3, r2
 80057be:	d901      	bls.n	80057c4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80057c0:	2303      	movs	r3, #3
 80057c2:	e0c2      	b.n	800594a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057c4:	4b41      	ldr	r3, [pc, #260]	; (80058cc <HAL_RCC_OscConfig+0x4d0>)
 80057c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057c8:	f003 0302 	and.w	r3, r3, #2
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d1ee      	bne.n	80057ae <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80057d0:	7dfb      	ldrb	r3, [r7, #23]
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d105      	bne.n	80057e2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057d6:	4b3d      	ldr	r3, [pc, #244]	; (80058cc <HAL_RCC_OscConfig+0x4d0>)
 80057d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057da:	4a3c      	ldr	r2, [pc, #240]	; (80058cc <HAL_RCC_OscConfig+0x4d0>)
 80057dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057e0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	699b      	ldr	r3, [r3, #24]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	f000 80ae 	beq.w	8005948 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80057ec:	4b37      	ldr	r3, [pc, #220]	; (80058cc <HAL_RCC_OscConfig+0x4d0>)
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	f003 030c 	and.w	r3, r3, #12
 80057f4:	2b08      	cmp	r3, #8
 80057f6:	d06d      	beq.n	80058d4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	699b      	ldr	r3, [r3, #24]
 80057fc:	2b02      	cmp	r3, #2
 80057fe:	d14b      	bne.n	8005898 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005800:	4b32      	ldr	r3, [pc, #200]	; (80058cc <HAL_RCC_OscConfig+0x4d0>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a31      	ldr	r2, [pc, #196]	; (80058cc <HAL_RCC_OscConfig+0x4d0>)
 8005806:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800580a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800580c:	f7fe fd48 	bl	80042a0 <HAL_GetTick>
 8005810:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005812:	e008      	b.n	8005826 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005814:	f7fe fd44 	bl	80042a0 <HAL_GetTick>
 8005818:	4602      	mov	r2, r0
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	1ad3      	subs	r3, r2, r3
 800581e:	2b02      	cmp	r3, #2
 8005820:	d901      	bls.n	8005826 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005822:	2303      	movs	r3, #3
 8005824:	e091      	b.n	800594a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005826:	4b29      	ldr	r3, [pc, #164]	; (80058cc <HAL_RCC_OscConfig+0x4d0>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800582e:	2b00      	cmp	r3, #0
 8005830:	d1f0      	bne.n	8005814 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	69da      	ldr	r2, [r3, #28]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6a1b      	ldr	r3, [r3, #32]
 800583a:	431a      	orrs	r2, r3
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005840:	019b      	lsls	r3, r3, #6
 8005842:	431a      	orrs	r2, r3
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005848:	085b      	lsrs	r3, r3, #1
 800584a:	3b01      	subs	r3, #1
 800584c:	041b      	lsls	r3, r3, #16
 800584e:	431a      	orrs	r2, r3
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005854:	061b      	lsls	r3, r3, #24
 8005856:	431a      	orrs	r2, r3
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800585c:	071b      	lsls	r3, r3, #28
 800585e:	491b      	ldr	r1, [pc, #108]	; (80058cc <HAL_RCC_OscConfig+0x4d0>)
 8005860:	4313      	orrs	r3, r2
 8005862:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005864:	4b19      	ldr	r3, [pc, #100]	; (80058cc <HAL_RCC_OscConfig+0x4d0>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a18      	ldr	r2, [pc, #96]	; (80058cc <HAL_RCC_OscConfig+0x4d0>)
 800586a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800586e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005870:	f7fe fd16 	bl	80042a0 <HAL_GetTick>
 8005874:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005876:	e008      	b.n	800588a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005878:	f7fe fd12 	bl	80042a0 <HAL_GetTick>
 800587c:	4602      	mov	r2, r0
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	1ad3      	subs	r3, r2, r3
 8005882:	2b02      	cmp	r3, #2
 8005884:	d901      	bls.n	800588a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8005886:	2303      	movs	r3, #3
 8005888:	e05f      	b.n	800594a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800588a:	4b10      	ldr	r3, [pc, #64]	; (80058cc <HAL_RCC_OscConfig+0x4d0>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005892:	2b00      	cmp	r3, #0
 8005894:	d0f0      	beq.n	8005878 <HAL_RCC_OscConfig+0x47c>
 8005896:	e057      	b.n	8005948 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005898:	4b0c      	ldr	r3, [pc, #48]	; (80058cc <HAL_RCC_OscConfig+0x4d0>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a0b      	ldr	r2, [pc, #44]	; (80058cc <HAL_RCC_OscConfig+0x4d0>)
 800589e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80058a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058a4:	f7fe fcfc 	bl	80042a0 <HAL_GetTick>
 80058a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058aa:	e008      	b.n	80058be <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058ac:	f7fe fcf8 	bl	80042a0 <HAL_GetTick>
 80058b0:	4602      	mov	r2, r0
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	1ad3      	subs	r3, r2, r3
 80058b6:	2b02      	cmp	r3, #2
 80058b8:	d901      	bls.n	80058be <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80058ba:	2303      	movs	r3, #3
 80058bc:	e045      	b.n	800594a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058be:	4b03      	ldr	r3, [pc, #12]	; (80058cc <HAL_RCC_OscConfig+0x4d0>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d1f0      	bne.n	80058ac <HAL_RCC_OscConfig+0x4b0>
 80058ca:	e03d      	b.n	8005948 <HAL_RCC_OscConfig+0x54c>
 80058cc:	40023800 	.word	0x40023800
 80058d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80058d4:	4b1f      	ldr	r3, [pc, #124]	; (8005954 <HAL_RCC_OscConfig+0x558>)
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	699b      	ldr	r3, [r3, #24]
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d030      	beq.n	8005944 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d129      	bne.n	8005944 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d122      	bne.n	8005944 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80058fe:	68fa      	ldr	r2, [r7, #12]
 8005900:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005904:	4013      	ands	r3, r2
 8005906:	687a      	ldr	r2, [r7, #4]
 8005908:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800590a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800590c:	4293      	cmp	r3, r2
 800590e:	d119      	bne.n	8005944 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800591a:	085b      	lsrs	r3, r3, #1
 800591c:	3b01      	subs	r3, #1
 800591e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005920:	429a      	cmp	r2, r3
 8005922:	d10f      	bne.n	8005944 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800592e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005930:	429a      	cmp	r2, r3
 8005932:	d107      	bne.n	8005944 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800593e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005940:	429a      	cmp	r2, r3
 8005942:	d001      	beq.n	8005948 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	e000      	b.n	800594a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8005948:	2300      	movs	r3, #0
}
 800594a:	4618      	mov	r0, r3
 800594c:	3718      	adds	r7, #24
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
 8005952:	bf00      	nop
 8005954:	40023800 	.word	0x40023800

08005958 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b084      	sub	sp, #16
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
 8005960:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005962:	2300      	movs	r3, #0
 8005964:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d101      	bne.n	8005970 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	e0d0      	b.n	8005b12 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005970:	4b6a      	ldr	r3, [pc, #424]	; (8005b1c <HAL_RCC_ClockConfig+0x1c4>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f003 030f 	and.w	r3, r3, #15
 8005978:	683a      	ldr	r2, [r7, #0]
 800597a:	429a      	cmp	r2, r3
 800597c:	d910      	bls.n	80059a0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800597e:	4b67      	ldr	r3, [pc, #412]	; (8005b1c <HAL_RCC_ClockConfig+0x1c4>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f023 020f 	bic.w	r2, r3, #15
 8005986:	4965      	ldr	r1, [pc, #404]	; (8005b1c <HAL_RCC_ClockConfig+0x1c4>)
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	4313      	orrs	r3, r2
 800598c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800598e:	4b63      	ldr	r3, [pc, #396]	; (8005b1c <HAL_RCC_ClockConfig+0x1c4>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f003 030f 	and.w	r3, r3, #15
 8005996:	683a      	ldr	r2, [r7, #0]
 8005998:	429a      	cmp	r2, r3
 800599a:	d001      	beq.n	80059a0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	e0b8      	b.n	8005b12 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 0302 	and.w	r3, r3, #2
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d020      	beq.n	80059ee <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f003 0304 	and.w	r3, r3, #4
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d005      	beq.n	80059c4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80059b8:	4b59      	ldr	r3, [pc, #356]	; (8005b20 <HAL_RCC_ClockConfig+0x1c8>)
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	4a58      	ldr	r2, [pc, #352]	; (8005b20 <HAL_RCC_ClockConfig+0x1c8>)
 80059be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80059c2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f003 0308 	and.w	r3, r3, #8
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d005      	beq.n	80059dc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80059d0:	4b53      	ldr	r3, [pc, #332]	; (8005b20 <HAL_RCC_ClockConfig+0x1c8>)
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	4a52      	ldr	r2, [pc, #328]	; (8005b20 <HAL_RCC_ClockConfig+0x1c8>)
 80059d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80059da:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059dc:	4b50      	ldr	r3, [pc, #320]	; (8005b20 <HAL_RCC_ClockConfig+0x1c8>)
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	494d      	ldr	r1, [pc, #308]	; (8005b20 <HAL_RCC_ClockConfig+0x1c8>)
 80059ea:	4313      	orrs	r3, r2
 80059ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f003 0301 	and.w	r3, r3, #1
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d040      	beq.n	8005a7c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d107      	bne.n	8005a12 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a02:	4b47      	ldr	r3, [pc, #284]	; (8005b20 <HAL_RCC_ClockConfig+0x1c8>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d115      	bne.n	8005a3a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e07f      	b.n	8005b12 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	2b02      	cmp	r3, #2
 8005a18:	d107      	bne.n	8005a2a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a1a:	4b41      	ldr	r3, [pc, #260]	; (8005b20 <HAL_RCC_ClockConfig+0x1c8>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d109      	bne.n	8005a3a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e073      	b.n	8005b12 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a2a:	4b3d      	ldr	r3, [pc, #244]	; (8005b20 <HAL_RCC_ClockConfig+0x1c8>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f003 0302 	and.w	r3, r3, #2
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d101      	bne.n	8005a3a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	e06b      	b.n	8005b12 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a3a:	4b39      	ldr	r3, [pc, #228]	; (8005b20 <HAL_RCC_ClockConfig+0x1c8>)
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	f023 0203 	bic.w	r2, r3, #3
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	4936      	ldr	r1, [pc, #216]	; (8005b20 <HAL_RCC_ClockConfig+0x1c8>)
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a4c:	f7fe fc28 	bl	80042a0 <HAL_GetTick>
 8005a50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a52:	e00a      	b.n	8005a6a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a54:	f7fe fc24 	bl	80042a0 <HAL_GetTick>
 8005a58:	4602      	mov	r2, r0
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	1ad3      	subs	r3, r2, r3
 8005a5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d901      	bls.n	8005a6a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005a66:	2303      	movs	r3, #3
 8005a68:	e053      	b.n	8005b12 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a6a:	4b2d      	ldr	r3, [pc, #180]	; (8005b20 <HAL_RCC_ClockConfig+0x1c8>)
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	f003 020c 	and.w	r2, r3, #12
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d1eb      	bne.n	8005a54 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005a7c:	4b27      	ldr	r3, [pc, #156]	; (8005b1c <HAL_RCC_ClockConfig+0x1c4>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f003 030f 	and.w	r3, r3, #15
 8005a84:	683a      	ldr	r2, [r7, #0]
 8005a86:	429a      	cmp	r2, r3
 8005a88:	d210      	bcs.n	8005aac <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a8a:	4b24      	ldr	r3, [pc, #144]	; (8005b1c <HAL_RCC_ClockConfig+0x1c4>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f023 020f 	bic.w	r2, r3, #15
 8005a92:	4922      	ldr	r1, [pc, #136]	; (8005b1c <HAL_RCC_ClockConfig+0x1c4>)
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a9a:	4b20      	ldr	r3, [pc, #128]	; (8005b1c <HAL_RCC_ClockConfig+0x1c4>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f003 030f 	and.w	r3, r3, #15
 8005aa2:	683a      	ldr	r2, [r7, #0]
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d001      	beq.n	8005aac <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	e032      	b.n	8005b12 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f003 0304 	and.w	r3, r3, #4
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d008      	beq.n	8005aca <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ab8:	4b19      	ldr	r3, [pc, #100]	; (8005b20 <HAL_RCC_ClockConfig+0x1c8>)
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	68db      	ldr	r3, [r3, #12]
 8005ac4:	4916      	ldr	r1, [pc, #88]	; (8005b20 <HAL_RCC_ClockConfig+0x1c8>)
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f003 0308 	and.w	r3, r3, #8
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d009      	beq.n	8005aea <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005ad6:	4b12      	ldr	r3, [pc, #72]	; (8005b20 <HAL_RCC_ClockConfig+0x1c8>)
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	691b      	ldr	r3, [r3, #16]
 8005ae2:	00db      	lsls	r3, r3, #3
 8005ae4:	490e      	ldr	r1, [pc, #56]	; (8005b20 <HAL_RCC_ClockConfig+0x1c8>)
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005aea:	f000 f821 	bl	8005b30 <HAL_RCC_GetSysClockFreq>
 8005aee:	4602      	mov	r2, r0
 8005af0:	4b0b      	ldr	r3, [pc, #44]	; (8005b20 <HAL_RCC_ClockConfig+0x1c8>)
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	091b      	lsrs	r3, r3, #4
 8005af6:	f003 030f 	and.w	r3, r3, #15
 8005afa:	490a      	ldr	r1, [pc, #40]	; (8005b24 <HAL_RCC_ClockConfig+0x1cc>)
 8005afc:	5ccb      	ldrb	r3, [r1, r3]
 8005afe:	fa22 f303 	lsr.w	r3, r2, r3
 8005b02:	4a09      	ldr	r2, [pc, #36]	; (8005b28 <HAL_RCC_ClockConfig+0x1d0>)
 8005b04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005b06:	4b09      	ldr	r3, [pc, #36]	; (8005b2c <HAL_RCC_ClockConfig+0x1d4>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f7fd fba2 	bl	8003254 <HAL_InitTick>

  return HAL_OK;
 8005b10:	2300      	movs	r3, #0
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3710      	adds	r7, #16
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}
 8005b1a:	bf00      	nop
 8005b1c:	40023c00 	.word	0x40023c00
 8005b20:	40023800 	.word	0x40023800
 8005b24:	0801c458 	.word	0x0801c458
 8005b28:	20000004 	.word	0x20000004
 8005b2c:	20000008 	.word	0x20000008

08005b30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b34:	b094      	sub	sp, #80	; 0x50
 8005b36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	647b      	str	r3, [r7, #68]	; 0x44
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b40:	2300      	movs	r3, #0
 8005b42:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8005b44:	2300      	movs	r3, #0
 8005b46:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005b48:	4b79      	ldr	r3, [pc, #484]	; (8005d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	f003 030c 	and.w	r3, r3, #12
 8005b50:	2b08      	cmp	r3, #8
 8005b52:	d00d      	beq.n	8005b70 <HAL_RCC_GetSysClockFreq+0x40>
 8005b54:	2b08      	cmp	r3, #8
 8005b56:	f200 80e1 	bhi.w	8005d1c <HAL_RCC_GetSysClockFreq+0x1ec>
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d002      	beq.n	8005b64 <HAL_RCC_GetSysClockFreq+0x34>
 8005b5e:	2b04      	cmp	r3, #4
 8005b60:	d003      	beq.n	8005b6a <HAL_RCC_GetSysClockFreq+0x3a>
 8005b62:	e0db      	b.n	8005d1c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005b64:	4b73      	ldr	r3, [pc, #460]	; (8005d34 <HAL_RCC_GetSysClockFreq+0x204>)
 8005b66:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005b68:	e0db      	b.n	8005d22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005b6a:	4b73      	ldr	r3, [pc, #460]	; (8005d38 <HAL_RCC_GetSysClockFreq+0x208>)
 8005b6c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005b6e:	e0d8      	b.n	8005d22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005b70:	4b6f      	ldr	r3, [pc, #444]	; (8005d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b78:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005b7a:	4b6d      	ldr	r3, [pc, #436]	; (8005d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d063      	beq.n	8005c4e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b86:	4b6a      	ldr	r3, [pc, #424]	; (8005d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	099b      	lsrs	r3, r3, #6
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b90:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b98:	633b      	str	r3, [r7, #48]	; 0x30
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	637b      	str	r3, [r7, #52]	; 0x34
 8005b9e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005ba2:	4622      	mov	r2, r4
 8005ba4:	462b      	mov	r3, r5
 8005ba6:	f04f 0000 	mov.w	r0, #0
 8005baa:	f04f 0100 	mov.w	r1, #0
 8005bae:	0159      	lsls	r1, r3, #5
 8005bb0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005bb4:	0150      	lsls	r0, r2, #5
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	460b      	mov	r3, r1
 8005bba:	4621      	mov	r1, r4
 8005bbc:	1a51      	subs	r1, r2, r1
 8005bbe:	6139      	str	r1, [r7, #16]
 8005bc0:	4629      	mov	r1, r5
 8005bc2:	eb63 0301 	sbc.w	r3, r3, r1
 8005bc6:	617b      	str	r3, [r7, #20]
 8005bc8:	f04f 0200 	mov.w	r2, #0
 8005bcc:	f04f 0300 	mov.w	r3, #0
 8005bd0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005bd4:	4659      	mov	r1, fp
 8005bd6:	018b      	lsls	r3, r1, #6
 8005bd8:	4651      	mov	r1, sl
 8005bda:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005bde:	4651      	mov	r1, sl
 8005be0:	018a      	lsls	r2, r1, #6
 8005be2:	4651      	mov	r1, sl
 8005be4:	ebb2 0801 	subs.w	r8, r2, r1
 8005be8:	4659      	mov	r1, fp
 8005bea:	eb63 0901 	sbc.w	r9, r3, r1
 8005bee:	f04f 0200 	mov.w	r2, #0
 8005bf2:	f04f 0300 	mov.w	r3, #0
 8005bf6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005bfa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005bfe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005c02:	4690      	mov	r8, r2
 8005c04:	4699      	mov	r9, r3
 8005c06:	4623      	mov	r3, r4
 8005c08:	eb18 0303 	adds.w	r3, r8, r3
 8005c0c:	60bb      	str	r3, [r7, #8]
 8005c0e:	462b      	mov	r3, r5
 8005c10:	eb49 0303 	adc.w	r3, r9, r3
 8005c14:	60fb      	str	r3, [r7, #12]
 8005c16:	f04f 0200 	mov.w	r2, #0
 8005c1a:	f04f 0300 	mov.w	r3, #0
 8005c1e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005c22:	4629      	mov	r1, r5
 8005c24:	024b      	lsls	r3, r1, #9
 8005c26:	4621      	mov	r1, r4
 8005c28:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005c2c:	4621      	mov	r1, r4
 8005c2e:	024a      	lsls	r2, r1, #9
 8005c30:	4610      	mov	r0, r2
 8005c32:	4619      	mov	r1, r3
 8005c34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c36:	2200      	movs	r2, #0
 8005c38:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c3c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005c40:	f7fa fbb6 	bl	80003b0 <__aeabi_uldivmod>
 8005c44:	4602      	mov	r2, r0
 8005c46:	460b      	mov	r3, r1
 8005c48:	4613      	mov	r3, r2
 8005c4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c4c:	e058      	b.n	8005d00 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c4e:	4b38      	ldr	r3, [pc, #224]	; (8005d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	099b      	lsrs	r3, r3, #6
 8005c54:	2200      	movs	r2, #0
 8005c56:	4618      	mov	r0, r3
 8005c58:	4611      	mov	r1, r2
 8005c5a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005c5e:	623b      	str	r3, [r7, #32]
 8005c60:	2300      	movs	r3, #0
 8005c62:	627b      	str	r3, [r7, #36]	; 0x24
 8005c64:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005c68:	4642      	mov	r2, r8
 8005c6a:	464b      	mov	r3, r9
 8005c6c:	f04f 0000 	mov.w	r0, #0
 8005c70:	f04f 0100 	mov.w	r1, #0
 8005c74:	0159      	lsls	r1, r3, #5
 8005c76:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c7a:	0150      	lsls	r0, r2, #5
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	460b      	mov	r3, r1
 8005c80:	4641      	mov	r1, r8
 8005c82:	ebb2 0a01 	subs.w	sl, r2, r1
 8005c86:	4649      	mov	r1, r9
 8005c88:	eb63 0b01 	sbc.w	fp, r3, r1
 8005c8c:	f04f 0200 	mov.w	r2, #0
 8005c90:	f04f 0300 	mov.w	r3, #0
 8005c94:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005c98:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005c9c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005ca0:	ebb2 040a 	subs.w	r4, r2, sl
 8005ca4:	eb63 050b 	sbc.w	r5, r3, fp
 8005ca8:	f04f 0200 	mov.w	r2, #0
 8005cac:	f04f 0300 	mov.w	r3, #0
 8005cb0:	00eb      	lsls	r3, r5, #3
 8005cb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005cb6:	00e2      	lsls	r2, r4, #3
 8005cb8:	4614      	mov	r4, r2
 8005cba:	461d      	mov	r5, r3
 8005cbc:	4643      	mov	r3, r8
 8005cbe:	18e3      	adds	r3, r4, r3
 8005cc0:	603b      	str	r3, [r7, #0]
 8005cc2:	464b      	mov	r3, r9
 8005cc4:	eb45 0303 	adc.w	r3, r5, r3
 8005cc8:	607b      	str	r3, [r7, #4]
 8005cca:	f04f 0200 	mov.w	r2, #0
 8005cce:	f04f 0300 	mov.w	r3, #0
 8005cd2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005cd6:	4629      	mov	r1, r5
 8005cd8:	028b      	lsls	r3, r1, #10
 8005cda:	4621      	mov	r1, r4
 8005cdc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005ce0:	4621      	mov	r1, r4
 8005ce2:	028a      	lsls	r2, r1, #10
 8005ce4:	4610      	mov	r0, r2
 8005ce6:	4619      	mov	r1, r3
 8005ce8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cea:	2200      	movs	r2, #0
 8005cec:	61bb      	str	r3, [r7, #24]
 8005cee:	61fa      	str	r2, [r7, #28]
 8005cf0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005cf4:	f7fa fb5c 	bl	80003b0 <__aeabi_uldivmod>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	460b      	mov	r3, r1
 8005cfc:	4613      	mov	r3, r2
 8005cfe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005d00:	4b0b      	ldr	r3, [pc, #44]	; (8005d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	0c1b      	lsrs	r3, r3, #16
 8005d06:	f003 0303 	and.w	r3, r3, #3
 8005d0a:	3301      	adds	r3, #1
 8005d0c:	005b      	lsls	r3, r3, #1
 8005d0e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8005d10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005d12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d18:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005d1a:	e002      	b.n	8005d22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005d1c:	4b05      	ldr	r3, [pc, #20]	; (8005d34 <HAL_RCC_GetSysClockFreq+0x204>)
 8005d1e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005d20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3750      	adds	r7, #80	; 0x50
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d2e:	bf00      	nop
 8005d30:	40023800 	.word	0x40023800
 8005d34:	00f42400 	.word	0x00f42400
 8005d38:	007a1200 	.word	0x007a1200

08005d3c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d40:	4b03      	ldr	r3, [pc, #12]	; (8005d50 <HAL_RCC_GetHCLKFreq+0x14>)
 8005d42:	681b      	ldr	r3, [r3, #0]
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	46bd      	mov	sp, r7
 8005d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4c:	4770      	bx	lr
 8005d4e:	bf00      	nop
 8005d50:	20000004 	.word	0x20000004

08005d54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005d58:	f7ff fff0 	bl	8005d3c <HAL_RCC_GetHCLKFreq>
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	4b05      	ldr	r3, [pc, #20]	; (8005d74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	0a9b      	lsrs	r3, r3, #10
 8005d64:	f003 0307 	and.w	r3, r3, #7
 8005d68:	4903      	ldr	r1, [pc, #12]	; (8005d78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d6a:	5ccb      	ldrb	r3, [r1, r3]
 8005d6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	bd80      	pop	{r7, pc}
 8005d74:	40023800 	.word	0x40023800
 8005d78:	0801c468 	.word	0x0801c468

08005d7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005d80:	f7ff ffdc 	bl	8005d3c <HAL_RCC_GetHCLKFreq>
 8005d84:	4602      	mov	r2, r0
 8005d86:	4b05      	ldr	r3, [pc, #20]	; (8005d9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	0b5b      	lsrs	r3, r3, #13
 8005d8c:	f003 0307 	and.w	r3, r3, #7
 8005d90:	4903      	ldr	r1, [pc, #12]	; (8005da0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d92:	5ccb      	ldrb	r3, [r1, r3]
 8005d94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	bd80      	pop	{r7, pc}
 8005d9c:	40023800 	.word	0x40023800
 8005da0:	0801c468 	.word	0x0801c468

08005da4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b083      	sub	sp, #12
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	220f      	movs	r2, #15
 8005db2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005db4:	4b12      	ldr	r3, [pc, #72]	; (8005e00 <HAL_RCC_GetClockConfig+0x5c>)
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	f003 0203 	and.w	r2, r3, #3
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005dc0:	4b0f      	ldr	r3, [pc, #60]	; (8005e00 <HAL_RCC_GetClockConfig+0x5c>)
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005dcc:	4b0c      	ldr	r3, [pc, #48]	; (8005e00 <HAL_RCC_GetClockConfig+0x5c>)
 8005dce:	689b      	ldr	r3, [r3, #8]
 8005dd0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005dd8:	4b09      	ldr	r3, [pc, #36]	; (8005e00 <HAL_RCC_GetClockConfig+0x5c>)
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	08db      	lsrs	r3, r3, #3
 8005dde:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005de6:	4b07      	ldr	r3, [pc, #28]	; (8005e04 <HAL_RCC_GetClockConfig+0x60>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f003 020f 	and.w	r2, r3, #15
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	601a      	str	r2, [r3, #0]
}
 8005df2:	bf00      	nop
 8005df4:	370c      	adds	r7, #12
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr
 8005dfe:	bf00      	nop
 8005e00:	40023800 	.word	0x40023800
 8005e04:	40023c00 	.word	0x40023c00

08005e08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b088      	sub	sp, #32
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005e10:	2300      	movs	r3, #0
 8005e12:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005e14:	2300      	movs	r3, #0
 8005e16:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005e20:	2300      	movs	r3, #0
 8005e22:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f003 0301 	and.w	r3, r3, #1
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d012      	beq.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005e30:	4b69      	ldr	r3, [pc, #420]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	4a68      	ldr	r2, [pc, #416]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e36:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005e3a:	6093      	str	r3, [r2, #8]
 8005e3c:	4b66      	ldr	r3, [pc, #408]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e3e:	689a      	ldr	r2, [r3, #8]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e44:	4964      	ldr	r1, [pc, #400]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e46:	4313      	orrs	r3, r2
 8005e48:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d101      	bne.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005e52:	2301      	movs	r3, #1
 8005e54:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d017      	beq.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005e62:	4b5d      	ldr	r3, [pc, #372]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e68:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e70:	4959      	ldr	r1, [pc, #356]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e72:	4313      	orrs	r3, r2
 8005e74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e80:	d101      	bne.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005e82:	2301      	movs	r3, #1
 8005e84:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d101      	bne.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d017      	beq.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005e9e:	4b4e      	ldr	r3, [pc, #312]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ea0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ea4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eac:	494a      	ldr	r1, [pc, #296]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ebc:	d101      	bne.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d101      	bne.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d001      	beq.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005eda:	2301      	movs	r3, #1
 8005edc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f003 0320 	and.w	r3, r3, #32
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	f000 808b 	beq.w	8006002 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005eec:	4b3a      	ldr	r3, [pc, #232]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef0:	4a39      	ldr	r2, [pc, #228]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ef2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ef6:	6413      	str	r3, [r2, #64]	; 0x40
 8005ef8:	4b37      	ldr	r3, [pc, #220]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005efc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f00:	60bb      	str	r3, [r7, #8]
 8005f02:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005f04:	4b35      	ldr	r3, [pc, #212]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a34      	ldr	r2, [pc, #208]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005f0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f10:	f7fe f9c6 	bl	80042a0 <HAL_GetTick>
 8005f14:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005f16:	e008      	b.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f18:	f7fe f9c2 	bl	80042a0 <HAL_GetTick>
 8005f1c:	4602      	mov	r2, r0
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	1ad3      	subs	r3, r2, r3
 8005f22:	2b64      	cmp	r3, #100	; 0x64
 8005f24:	d901      	bls.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005f26:	2303      	movs	r3, #3
 8005f28:	e38f      	b.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005f2a:	4b2c      	ldr	r3, [pc, #176]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d0f0      	beq.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005f36:	4b28      	ldr	r3, [pc, #160]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f3e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d035      	beq.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f4e:	693a      	ldr	r2, [r7, #16]
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d02e      	beq.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005f54:	4b20      	ldr	r3, [pc, #128]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f5c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005f5e:	4b1e      	ldr	r3, [pc, #120]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f62:	4a1d      	ldr	r2, [pc, #116]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f68:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005f6a:	4b1b      	ldr	r3, [pc, #108]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f6e:	4a1a      	ldr	r2, [pc, #104]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f74:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005f76:	4a18      	ldr	r2, [pc, #96]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005f7c:	4b16      	ldr	r3, [pc, #88]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f80:	f003 0301 	and.w	r3, r3, #1
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d114      	bne.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f88:	f7fe f98a 	bl	80042a0 <HAL_GetTick>
 8005f8c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f8e:	e00a      	b.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f90:	f7fe f986 	bl	80042a0 <HAL_GetTick>
 8005f94:	4602      	mov	r2, r0
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	1ad3      	subs	r3, r2, r3
 8005f9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d901      	bls.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005fa2:	2303      	movs	r3, #3
 8005fa4:	e351      	b.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fa6:	4b0c      	ldr	r3, [pc, #48]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005faa:	f003 0302 	and.w	r3, r3, #2
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d0ee      	beq.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005fbe:	d111      	bne.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005fc0:	4b05      	ldr	r3, [pc, #20]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005fcc:	4b04      	ldr	r3, [pc, #16]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005fce:	400b      	ands	r3, r1
 8005fd0:	4901      	ldr	r1, [pc, #4]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	608b      	str	r3, [r1, #8]
 8005fd6:	e00b      	b.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005fd8:	40023800 	.word	0x40023800
 8005fdc:	40007000 	.word	0x40007000
 8005fe0:	0ffffcff 	.word	0x0ffffcff
 8005fe4:	4bac      	ldr	r3, [pc, #688]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	4aab      	ldr	r2, [pc, #684]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005fea:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005fee:	6093      	str	r3, [r2, #8]
 8005ff0:	4ba9      	ldr	r3, [pc, #676]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ff2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ff8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ffc:	49a6      	ldr	r1, [pc, #664]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ffe:	4313      	orrs	r3, r2
 8006000:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f003 0310 	and.w	r3, r3, #16
 800600a:	2b00      	cmp	r3, #0
 800600c:	d010      	beq.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800600e:	4ba2      	ldr	r3, [pc, #648]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006010:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006014:	4aa0      	ldr	r2, [pc, #640]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006016:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800601a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800601e:	4b9e      	ldr	r3, [pc, #632]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006020:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006028:	499b      	ldr	r1, [pc, #620]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800602a:	4313      	orrs	r3, r2
 800602c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006038:	2b00      	cmp	r3, #0
 800603a:	d00a      	beq.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800603c:	4b96      	ldr	r3, [pc, #600]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800603e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006042:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800604a:	4993      	ldr	r1, [pc, #588]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800604c:	4313      	orrs	r3, r2
 800604e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800605a:	2b00      	cmp	r3, #0
 800605c:	d00a      	beq.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800605e:	4b8e      	ldr	r3, [pc, #568]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006064:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800606c:	498a      	ldr	r1, [pc, #552]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800606e:	4313      	orrs	r3, r2
 8006070:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800607c:	2b00      	cmp	r3, #0
 800607e:	d00a      	beq.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006080:	4b85      	ldr	r3, [pc, #532]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006086:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800608e:	4982      	ldr	r1, [pc, #520]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006090:	4313      	orrs	r3, r2
 8006092:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d00a      	beq.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80060a2:	4b7d      	ldr	r3, [pc, #500]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80060a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060a8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060b0:	4979      	ldr	r1, [pc, #484]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80060b2:	4313      	orrs	r3, r2
 80060b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d00a      	beq.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80060c4:	4b74      	ldr	r3, [pc, #464]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80060c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060ca:	f023 0203 	bic.w	r2, r3, #3
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060d2:	4971      	ldr	r1, [pc, #452]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80060d4:	4313      	orrs	r3, r2
 80060d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d00a      	beq.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80060e6:	4b6c      	ldr	r3, [pc, #432]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80060e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060ec:	f023 020c 	bic.w	r2, r3, #12
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060f4:	4968      	ldr	r1, [pc, #416]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80060f6:	4313      	orrs	r3, r2
 80060f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006104:	2b00      	cmp	r3, #0
 8006106:	d00a      	beq.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006108:	4b63      	ldr	r3, [pc, #396]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800610a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800610e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006116:	4960      	ldr	r1, [pc, #384]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006118:	4313      	orrs	r3, r2
 800611a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006126:	2b00      	cmp	r3, #0
 8006128:	d00a      	beq.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800612a:	4b5b      	ldr	r3, [pc, #364]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800612c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006130:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006138:	4957      	ldr	r1, [pc, #348]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800613a:	4313      	orrs	r3, r2
 800613c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006148:	2b00      	cmp	r3, #0
 800614a:	d00a      	beq.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800614c:	4b52      	ldr	r3, [pc, #328]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800614e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006152:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800615a:	494f      	ldr	r1, [pc, #316]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800615c:	4313      	orrs	r3, r2
 800615e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800616a:	2b00      	cmp	r3, #0
 800616c:	d00a      	beq.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800616e:	4b4a      	ldr	r3, [pc, #296]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006174:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800617c:	4946      	ldr	r1, [pc, #280]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800617e:	4313      	orrs	r3, r2
 8006180:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800618c:	2b00      	cmp	r3, #0
 800618e:	d00a      	beq.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006190:	4b41      	ldr	r3, [pc, #260]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006196:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800619e:	493e      	ldr	r1, [pc, #248]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80061a0:	4313      	orrs	r3, r2
 80061a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d00a      	beq.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80061b2:	4b39      	ldr	r3, [pc, #228]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80061b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061b8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061c0:	4935      	ldr	r1, [pc, #212]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80061c2:	4313      	orrs	r3, r2
 80061c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d00a      	beq.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80061d4:	4b30      	ldr	r3, [pc, #192]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80061d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061da:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80061e2:	492d      	ldr	r1, [pc, #180]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80061e4:	4313      	orrs	r3, r2
 80061e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d011      	beq.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80061f6:	4b28      	ldr	r3, [pc, #160]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80061f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061fc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006204:	4924      	ldr	r1, [pc, #144]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006206:	4313      	orrs	r3, r2
 8006208:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006210:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006214:	d101      	bne.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8006216:	2301      	movs	r3, #1
 8006218:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f003 0308 	and.w	r3, r3, #8
 8006222:	2b00      	cmp	r3, #0
 8006224:	d001      	beq.n	800622a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8006226:	2301      	movs	r3, #1
 8006228:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006232:	2b00      	cmp	r3, #0
 8006234:	d00a      	beq.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006236:	4b18      	ldr	r3, [pc, #96]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006238:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800623c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006244:	4914      	ldr	r1, [pc, #80]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006246:	4313      	orrs	r3, r2
 8006248:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006254:	2b00      	cmp	r3, #0
 8006256:	d00b      	beq.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006258:	4b0f      	ldr	r3, [pc, #60]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800625a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800625e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006268:	490b      	ldr	r1, [pc, #44]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800626a:	4313      	orrs	r3, r2
 800626c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006278:	2b00      	cmp	r3, #0
 800627a:	d00f      	beq.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800627c:	4b06      	ldr	r3, [pc, #24]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800627e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006282:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800628c:	4902      	ldr	r1, [pc, #8]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800628e:	4313      	orrs	r3, r2
 8006290:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006294:	e002      	b.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8006296:	bf00      	nop
 8006298:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d00b      	beq.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80062a8:	4b8a      	ldr	r3, [pc, #552]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80062aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062ae:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062b8:	4986      	ldr	r1, [pc, #536]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80062ba:	4313      	orrs	r3, r2
 80062bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d00b      	beq.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80062cc:	4b81      	ldr	r3, [pc, #516]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80062ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062d2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062dc:	497d      	ldr	r1, [pc, #500]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80062de:	4313      	orrs	r3, r2
 80062e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80062e4:	69fb      	ldr	r3, [r7, #28]
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	d006      	beq.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	f000 80d6 	beq.w	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80062f8:	4b76      	ldr	r3, [pc, #472]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a75      	ldr	r2, [pc, #468]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80062fe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006302:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006304:	f7fd ffcc 	bl	80042a0 <HAL_GetTick>
 8006308:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800630a:	e008      	b.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800630c:	f7fd ffc8 	bl	80042a0 <HAL_GetTick>
 8006310:	4602      	mov	r2, r0
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	1ad3      	subs	r3, r2, r3
 8006316:	2b64      	cmp	r3, #100	; 0x64
 8006318:	d901      	bls.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800631a:	2303      	movs	r3, #3
 800631c:	e195      	b.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800631e:	4b6d      	ldr	r3, [pc, #436]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006326:	2b00      	cmp	r3, #0
 8006328:	d1f0      	bne.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f003 0301 	and.w	r3, r3, #1
 8006332:	2b00      	cmp	r3, #0
 8006334:	d021      	beq.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800633a:	2b00      	cmp	r3, #0
 800633c:	d11d      	bne.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800633e:	4b65      	ldr	r3, [pc, #404]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006340:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006344:	0c1b      	lsrs	r3, r3, #16
 8006346:	f003 0303 	and.w	r3, r3, #3
 800634a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800634c:	4b61      	ldr	r3, [pc, #388]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800634e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006352:	0e1b      	lsrs	r3, r3, #24
 8006354:	f003 030f 	and.w	r3, r3, #15
 8006358:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	019a      	lsls	r2, r3, #6
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	041b      	lsls	r3, r3, #16
 8006364:	431a      	orrs	r2, r3
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	061b      	lsls	r3, r3, #24
 800636a:	431a      	orrs	r2, r3
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	071b      	lsls	r3, r3, #28
 8006372:	4958      	ldr	r1, [pc, #352]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006374:	4313      	orrs	r3, r2
 8006376:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006382:	2b00      	cmp	r3, #0
 8006384:	d004      	beq.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800638a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800638e:	d00a      	beq.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006398:	2b00      	cmp	r3, #0
 800639a:	d02e      	beq.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80063a4:	d129      	bne.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80063a6:	4b4b      	ldr	r3, [pc, #300]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80063a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063ac:	0c1b      	lsrs	r3, r3, #16
 80063ae:	f003 0303 	and.w	r3, r3, #3
 80063b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80063b4:	4b47      	ldr	r3, [pc, #284]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80063b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063ba:	0f1b      	lsrs	r3, r3, #28
 80063bc:	f003 0307 	and.w	r3, r3, #7
 80063c0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	019a      	lsls	r2, r3, #6
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	041b      	lsls	r3, r3, #16
 80063cc:	431a      	orrs	r2, r3
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	68db      	ldr	r3, [r3, #12]
 80063d2:	061b      	lsls	r3, r3, #24
 80063d4:	431a      	orrs	r2, r3
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	071b      	lsls	r3, r3, #28
 80063da:	493e      	ldr	r1, [pc, #248]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80063dc:	4313      	orrs	r3, r2
 80063de:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80063e2:	4b3c      	ldr	r3, [pc, #240]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80063e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80063e8:	f023 021f 	bic.w	r2, r3, #31
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f0:	3b01      	subs	r3, #1
 80063f2:	4938      	ldr	r1, [pc, #224]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80063f4:	4313      	orrs	r3, r2
 80063f6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006402:	2b00      	cmp	r3, #0
 8006404:	d01d      	beq.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006406:	4b33      	ldr	r3, [pc, #204]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006408:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800640c:	0e1b      	lsrs	r3, r3, #24
 800640e:	f003 030f 	and.w	r3, r3, #15
 8006412:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006414:	4b2f      	ldr	r3, [pc, #188]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006416:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800641a:	0f1b      	lsrs	r3, r3, #28
 800641c:	f003 0307 	and.w	r3, r3, #7
 8006420:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	019a      	lsls	r2, r3, #6
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	691b      	ldr	r3, [r3, #16]
 800642c:	041b      	lsls	r3, r3, #16
 800642e:	431a      	orrs	r2, r3
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	061b      	lsls	r3, r3, #24
 8006434:	431a      	orrs	r2, r3
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	071b      	lsls	r3, r3, #28
 800643a:	4926      	ldr	r1, [pc, #152]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800643c:	4313      	orrs	r3, r2
 800643e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800644a:	2b00      	cmp	r3, #0
 800644c:	d011      	beq.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	019a      	lsls	r2, r3, #6
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	691b      	ldr	r3, [r3, #16]
 8006458:	041b      	lsls	r3, r3, #16
 800645a:	431a      	orrs	r2, r3
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	68db      	ldr	r3, [r3, #12]
 8006460:	061b      	lsls	r3, r3, #24
 8006462:	431a      	orrs	r2, r3
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	071b      	lsls	r3, r3, #28
 800646a:	491a      	ldr	r1, [pc, #104]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800646c:	4313      	orrs	r3, r2
 800646e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006472:	4b18      	ldr	r3, [pc, #96]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a17      	ldr	r2, [pc, #92]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006478:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800647c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800647e:	f7fd ff0f 	bl	80042a0 <HAL_GetTick>
 8006482:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006484:	e008      	b.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006486:	f7fd ff0b 	bl	80042a0 <HAL_GetTick>
 800648a:	4602      	mov	r2, r0
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	1ad3      	subs	r3, r2, r3
 8006490:	2b64      	cmp	r3, #100	; 0x64
 8006492:	d901      	bls.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006494:	2303      	movs	r3, #3
 8006496:	e0d8      	b.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006498:	4b0e      	ldr	r3, [pc, #56]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d0f0      	beq.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80064a4:	69bb      	ldr	r3, [r7, #24]
 80064a6:	2b01      	cmp	r3, #1
 80064a8:	f040 80ce 	bne.w	8006648 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80064ac:	4b09      	ldr	r3, [pc, #36]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a08      	ldr	r2, [pc, #32]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80064b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80064b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064b8:	f7fd fef2 	bl	80042a0 <HAL_GetTick>
 80064bc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80064be:	e00b      	b.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80064c0:	f7fd feee 	bl	80042a0 <HAL_GetTick>
 80064c4:	4602      	mov	r2, r0
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	1ad3      	subs	r3, r2, r3
 80064ca:	2b64      	cmp	r3, #100	; 0x64
 80064cc:	d904      	bls.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80064ce:	2303      	movs	r3, #3
 80064d0:	e0bb      	b.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80064d2:	bf00      	nop
 80064d4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80064d8:	4b5e      	ldr	r3, [pc, #376]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80064e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064e4:	d0ec      	beq.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d003      	beq.n	80064fa <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d009      	beq.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006502:	2b00      	cmp	r3, #0
 8006504:	d02e      	beq.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800650a:	2b00      	cmp	r3, #0
 800650c:	d12a      	bne.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800650e:	4b51      	ldr	r3, [pc, #324]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006514:	0c1b      	lsrs	r3, r3, #16
 8006516:	f003 0303 	and.w	r3, r3, #3
 800651a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800651c:	4b4d      	ldr	r3, [pc, #308]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800651e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006522:	0f1b      	lsrs	r3, r3, #28
 8006524:	f003 0307 	and.w	r3, r3, #7
 8006528:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	695b      	ldr	r3, [r3, #20]
 800652e:	019a      	lsls	r2, r3, #6
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	041b      	lsls	r3, r3, #16
 8006534:	431a      	orrs	r2, r3
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	699b      	ldr	r3, [r3, #24]
 800653a:	061b      	lsls	r3, r3, #24
 800653c:	431a      	orrs	r2, r3
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	071b      	lsls	r3, r3, #28
 8006542:	4944      	ldr	r1, [pc, #272]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006544:	4313      	orrs	r3, r2
 8006546:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800654a:	4b42      	ldr	r3, [pc, #264]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800654c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006550:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006558:	3b01      	subs	r3, #1
 800655a:	021b      	lsls	r3, r3, #8
 800655c:	493d      	ldr	r1, [pc, #244]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800655e:	4313      	orrs	r3, r2
 8006560:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800656c:	2b00      	cmp	r3, #0
 800656e:	d022      	beq.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006574:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006578:	d11d      	bne.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800657a:	4b36      	ldr	r3, [pc, #216]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800657c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006580:	0e1b      	lsrs	r3, r3, #24
 8006582:	f003 030f 	and.w	r3, r3, #15
 8006586:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006588:	4b32      	ldr	r3, [pc, #200]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800658a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800658e:	0f1b      	lsrs	r3, r3, #28
 8006590:	f003 0307 	and.w	r3, r3, #7
 8006594:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	695b      	ldr	r3, [r3, #20]
 800659a:	019a      	lsls	r2, r3, #6
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6a1b      	ldr	r3, [r3, #32]
 80065a0:	041b      	lsls	r3, r3, #16
 80065a2:	431a      	orrs	r2, r3
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	061b      	lsls	r3, r3, #24
 80065a8:	431a      	orrs	r2, r3
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	071b      	lsls	r3, r3, #28
 80065ae:	4929      	ldr	r1, [pc, #164]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80065b0:	4313      	orrs	r3, r2
 80065b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f003 0308 	and.w	r3, r3, #8
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d028      	beq.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80065c2:	4b24      	ldr	r3, [pc, #144]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80065c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065c8:	0e1b      	lsrs	r3, r3, #24
 80065ca:	f003 030f 	and.w	r3, r3, #15
 80065ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80065d0:	4b20      	ldr	r3, [pc, #128]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80065d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065d6:	0c1b      	lsrs	r3, r3, #16
 80065d8:	f003 0303 	and.w	r3, r3, #3
 80065dc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	695b      	ldr	r3, [r3, #20]
 80065e2:	019a      	lsls	r2, r3, #6
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	041b      	lsls	r3, r3, #16
 80065e8:	431a      	orrs	r2, r3
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	061b      	lsls	r3, r3, #24
 80065ee:	431a      	orrs	r2, r3
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	69db      	ldr	r3, [r3, #28]
 80065f4:	071b      	lsls	r3, r3, #28
 80065f6:	4917      	ldr	r1, [pc, #92]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80065f8:	4313      	orrs	r3, r2
 80065fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80065fe:	4b15      	ldr	r3, [pc, #84]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006600:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006604:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800660c:	4911      	ldr	r1, [pc, #68]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800660e:	4313      	orrs	r3, r2
 8006610:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006614:	4b0f      	ldr	r3, [pc, #60]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a0e      	ldr	r2, [pc, #56]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800661a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800661e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006620:	f7fd fe3e 	bl	80042a0 <HAL_GetTick>
 8006624:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006626:	e008      	b.n	800663a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006628:	f7fd fe3a 	bl	80042a0 <HAL_GetTick>
 800662c:	4602      	mov	r2, r0
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	1ad3      	subs	r3, r2, r3
 8006632:	2b64      	cmp	r3, #100	; 0x64
 8006634:	d901      	bls.n	800663a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006636:	2303      	movs	r3, #3
 8006638:	e007      	b.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800663a:	4b06      	ldr	r3, [pc, #24]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006642:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006646:	d1ef      	bne.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8006648:	2300      	movs	r3, #0
}
 800664a:	4618      	mov	r0, r3
 800664c:	3720      	adds	r7, #32
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}
 8006652:	bf00      	nop
 8006654:	40023800 	.word	0x40023800

08006658 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b082      	sub	sp, #8
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d101      	bne.n	800666a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006666:	2301      	movs	r3, #1
 8006668:	e049      	b.n	80066fe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006670:	b2db      	uxtb	r3, r3
 8006672:	2b00      	cmp	r3, #0
 8006674:	d106      	bne.n	8006684 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2200      	movs	r2, #0
 800667a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 f841 	bl	8006706 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2202      	movs	r2, #2
 8006688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	3304      	adds	r3, #4
 8006694:	4619      	mov	r1, r3
 8006696:	4610      	mov	r0, r2
 8006698:	f000 fc12 	bl	8006ec0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2201      	movs	r2, #1
 80066a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2201      	movs	r2, #1
 80066a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2201      	movs	r2, #1
 80066b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2201      	movs	r2, #1
 80066b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2201      	movs	r2, #1
 80066c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2201      	movs	r2, #1
 80066c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2201      	movs	r2, #1
 80066d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2201      	movs	r2, #1
 80066d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2201      	movs	r2, #1
 80066e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2201      	movs	r2, #1
 80066e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2201      	movs	r2, #1
 80066f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2201      	movs	r2, #1
 80066f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80066fc:	2300      	movs	r3, #0
}
 80066fe:	4618      	mov	r0, r3
 8006700:	3708      	adds	r7, #8
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}

08006706 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006706:	b480      	push	{r7}
 8006708:	b083      	sub	sp, #12
 800670a:	af00      	add	r7, sp, #0
 800670c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800670e:	bf00      	nop
 8006710:	370c      	adds	r7, #12
 8006712:	46bd      	mov	sp, r7
 8006714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006718:	4770      	bx	lr
	...

0800671c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800671c:	b480      	push	{r7}
 800671e:	b085      	sub	sp, #20
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800672a:	b2db      	uxtb	r3, r3
 800672c:	2b01      	cmp	r3, #1
 800672e:	d001      	beq.n	8006734 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006730:	2301      	movs	r3, #1
 8006732:	e054      	b.n	80067de <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2202      	movs	r2, #2
 8006738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	68da      	ldr	r2, [r3, #12]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f042 0201 	orr.w	r2, r2, #1
 800674a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a26      	ldr	r2, [pc, #152]	; (80067ec <HAL_TIM_Base_Start_IT+0xd0>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d022      	beq.n	800679c <HAL_TIM_Base_Start_IT+0x80>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800675e:	d01d      	beq.n	800679c <HAL_TIM_Base_Start_IT+0x80>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a22      	ldr	r2, [pc, #136]	; (80067f0 <HAL_TIM_Base_Start_IT+0xd4>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d018      	beq.n	800679c <HAL_TIM_Base_Start_IT+0x80>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a21      	ldr	r2, [pc, #132]	; (80067f4 <HAL_TIM_Base_Start_IT+0xd8>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d013      	beq.n	800679c <HAL_TIM_Base_Start_IT+0x80>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a1f      	ldr	r2, [pc, #124]	; (80067f8 <HAL_TIM_Base_Start_IT+0xdc>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d00e      	beq.n	800679c <HAL_TIM_Base_Start_IT+0x80>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a1e      	ldr	r2, [pc, #120]	; (80067fc <HAL_TIM_Base_Start_IT+0xe0>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d009      	beq.n	800679c <HAL_TIM_Base_Start_IT+0x80>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a1c      	ldr	r2, [pc, #112]	; (8006800 <HAL_TIM_Base_Start_IT+0xe4>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d004      	beq.n	800679c <HAL_TIM_Base_Start_IT+0x80>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a1b      	ldr	r2, [pc, #108]	; (8006804 <HAL_TIM_Base_Start_IT+0xe8>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d115      	bne.n	80067c8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	689a      	ldr	r2, [r3, #8]
 80067a2:	4b19      	ldr	r3, [pc, #100]	; (8006808 <HAL_TIM_Base_Start_IT+0xec>)
 80067a4:	4013      	ands	r3, r2
 80067a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2b06      	cmp	r3, #6
 80067ac:	d015      	beq.n	80067da <HAL_TIM_Base_Start_IT+0xbe>
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067b4:	d011      	beq.n	80067da <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f042 0201 	orr.w	r2, r2, #1
 80067c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067c6:	e008      	b.n	80067da <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	681a      	ldr	r2, [r3, #0]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f042 0201 	orr.w	r2, r2, #1
 80067d6:	601a      	str	r2, [r3, #0]
 80067d8:	e000      	b.n	80067dc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067da:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80067dc:	2300      	movs	r3, #0
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3714      	adds	r7, #20
 80067e2:	46bd      	mov	sp, r7
 80067e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e8:	4770      	bx	lr
 80067ea:	bf00      	nop
 80067ec:	40010000 	.word	0x40010000
 80067f0:	40000400 	.word	0x40000400
 80067f4:	40000800 	.word	0x40000800
 80067f8:	40000c00 	.word	0x40000c00
 80067fc:	40010400 	.word	0x40010400
 8006800:	40014000 	.word	0x40014000
 8006804:	40001800 	.word	0x40001800
 8006808:	00010007 	.word	0x00010007

0800680c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b082      	sub	sp, #8
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d101      	bne.n	800681e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800681a:	2301      	movs	r3, #1
 800681c:	e049      	b.n	80068b2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006824:	b2db      	uxtb	r3, r3
 8006826:	2b00      	cmp	r3, #0
 8006828:	d106      	bne.n	8006838 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2200      	movs	r2, #0
 800682e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f7fd f952 	bl	8003adc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2202      	movs	r2, #2
 800683c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	3304      	adds	r3, #4
 8006848:	4619      	mov	r1, r3
 800684a:	4610      	mov	r0, r2
 800684c:	f000 fb38 	bl	8006ec0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2201      	movs	r2, #1
 8006854:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2201      	movs	r2, #1
 800685c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2201      	movs	r2, #1
 8006864:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2201      	movs	r2, #1
 800686c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2201      	movs	r2, #1
 8006874:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2201      	movs	r2, #1
 800687c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2201      	movs	r2, #1
 8006884:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2201      	movs	r2, #1
 800688c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2201      	movs	r2, #1
 8006894:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2201      	movs	r2, #1
 800689c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2201      	movs	r2, #1
 80068a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2201      	movs	r2, #1
 80068ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068b0:	2300      	movs	r3, #0
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3708      	adds	r7, #8
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}
	...

080068bc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b086      	sub	sp, #24
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
 80068c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d101      	bne.n	80068d0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80068cc:	2301      	movs	r3, #1
 80068ce:	e08f      	b.n	80069f0 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068d6:	b2db      	uxtb	r3, r3
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d106      	bne.n	80068ea <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2200      	movs	r2, #0
 80068e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f7fd f92d 	bl	8003b44 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2202      	movs	r2, #2
 80068ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	6899      	ldr	r1, [r3, #8]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	4b3e      	ldr	r3, [pc, #248]	; (80069f8 <HAL_TIM_Encoder_Init+0x13c>)
 80068fe:	400b      	ands	r3, r1
 8006900:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	3304      	adds	r3, #4
 800690a:	4619      	mov	r1, r3
 800690c:	4610      	mov	r0, r2
 800690e:	f000 fad7 	bl	8006ec0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	689b      	ldr	r3, [r3, #8]
 8006918:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	699b      	ldr	r3, [r3, #24]
 8006920:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	6a1b      	ldr	r3, [r3, #32]
 8006928:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	697a      	ldr	r2, [r7, #20]
 8006930:	4313      	orrs	r3, r2
 8006932:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006934:	693a      	ldr	r2, [r7, #16]
 8006936:	4b31      	ldr	r3, [pc, #196]	; (80069fc <HAL_TIM_Encoder_Init+0x140>)
 8006938:	4013      	ands	r3, r2
 800693a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	689a      	ldr	r2, [r3, #8]
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	699b      	ldr	r3, [r3, #24]
 8006944:	021b      	lsls	r3, r3, #8
 8006946:	4313      	orrs	r3, r2
 8006948:	693a      	ldr	r2, [r7, #16]
 800694a:	4313      	orrs	r3, r2
 800694c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800694e:	693a      	ldr	r2, [r7, #16]
 8006950:	4b2b      	ldr	r3, [pc, #172]	; (8006a00 <HAL_TIM_Encoder_Init+0x144>)
 8006952:	4013      	ands	r3, r2
 8006954:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006956:	693a      	ldr	r2, [r7, #16]
 8006958:	4b2a      	ldr	r3, [pc, #168]	; (8006a04 <HAL_TIM_Encoder_Init+0x148>)
 800695a:	4013      	ands	r3, r2
 800695c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	68da      	ldr	r2, [r3, #12]
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	69db      	ldr	r3, [r3, #28]
 8006966:	021b      	lsls	r3, r3, #8
 8006968:	4313      	orrs	r3, r2
 800696a:	693a      	ldr	r2, [r7, #16]
 800696c:	4313      	orrs	r3, r2
 800696e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	691b      	ldr	r3, [r3, #16]
 8006974:	011a      	lsls	r2, r3, #4
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	6a1b      	ldr	r3, [r3, #32]
 800697a:	031b      	lsls	r3, r3, #12
 800697c:	4313      	orrs	r3, r2
 800697e:	693a      	ldr	r2, [r7, #16]
 8006980:	4313      	orrs	r3, r2
 8006982:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800698a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006992:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	685a      	ldr	r2, [r3, #4]
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	695b      	ldr	r3, [r3, #20]
 800699c:	011b      	lsls	r3, r3, #4
 800699e:	4313      	orrs	r3, r2
 80069a0:	68fa      	ldr	r2, [r7, #12]
 80069a2:	4313      	orrs	r3, r2
 80069a4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	697a      	ldr	r2, [r7, #20]
 80069ac:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	693a      	ldr	r2, [r7, #16]
 80069b4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	68fa      	ldr	r2, [r7, #12]
 80069bc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2201      	movs	r2, #1
 80069c2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2201      	movs	r2, #1
 80069ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2201      	movs	r2, #1
 80069d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2201      	movs	r2, #1
 80069da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2201      	movs	r2, #1
 80069e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2201      	movs	r2, #1
 80069ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80069ee:	2300      	movs	r3, #0
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3718      	adds	r7, #24
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}
 80069f8:	fffebff8 	.word	0xfffebff8
 80069fc:	fffffcfc 	.word	0xfffffcfc
 8006a00:	fffff3f3 	.word	0xfffff3f3
 8006a04:	ffff0f0f 	.word	0xffff0f0f

08006a08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b082      	sub	sp, #8
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	691b      	ldr	r3, [r3, #16]
 8006a16:	f003 0302 	and.w	r3, r3, #2
 8006a1a:	2b02      	cmp	r3, #2
 8006a1c:	d122      	bne.n	8006a64 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	68db      	ldr	r3, [r3, #12]
 8006a24:	f003 0302 	and.w	r3, r3, #2
 8006a28:	2b02      	cmp	r3, #2
 8006a2a:	d11b      	bne.n	8006a64 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f06f 0202 	mvn.w	r2, #2
 8006a34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2201      	movs	r2, #1
 8006a3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	699b      	ldr	r3, [r3, #24]
 8006a42:	f003 0303 	and.w	r3, r3, #3
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d003      	beq.n	8006a52 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f000 fa1a 	bl	8006e84 <HAL_TIM_IC_CaptureCallback>
 8006a50:	e005      	b.n	8006a5e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f000 fa0c 	bl	8006e70 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f000 fa1d 	bl	8006e98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2200      	movs	r2, #0
 8006a62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	691b      	ldr	r3, [r3, #16]
 8006a6a:	f003 0304 	and.w	r3, r3, #4
 8006a6e:	2b04      	cmp	r3, #4
 8006a70:	d122      	bne.n	8006ab8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	68db      	ldr	r3, [r3, #12]
 8006a78:	f003 0304 	and.w	r3, r3, #4
 8006a7c:	2b04      	cmp	r3, #4
 8006a7e:	d11b      	bne.n	8006ab8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f06f 0204 	mvn.w	r2, #4
 8006a88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2202      	movs	r2, #2
 8006a8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	699b      	ldr	r3, [r3, #24]
 8006a96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d003      	beq.n	8006aa6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f000 f9f0 	bl	8006e84 <HAL_TIM_IC_CaptureCallback>
 8006aa4:	e005      	b.n	8006ab2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f000 f9e2 	bl	8006e70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f000 f9f3 	bl	8006e98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	691b      	ldr	r3, [r3, #16]
 8006abe:	f003 0308 	and.w	r3, r3, #8
 8006ac2:	2b08      	cmp	r3, #8
 8006ac4:	d122      	bne.n	8006b0c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	68db      	ldr	r3, [r3, #12]
 8006acc:	f003 0308 	and.w	r3, r3, #8
 8006ad0:	2b08      	cmp	r3, #8
 8006ad2:	d11b      	bne.n	8006b0c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f06f 0208 	mvn.w	r2, #8
 8006adc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2204      	movs	r2, #4
 8006ae2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	69db      	ldr	r3, [r3, #28]
 8006aea:	f003 0303 	and.w	r3, r3, #3
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d003      	beq.n	8006afa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f000 f9c6 	bl	8006e84 <HAL_TIM_IC_CaptureCallback>
 8006af8:	e005      	b.n	8006b06 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f000 f9b8 	bl	8006e70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f000 f9c9 	bl	8006e98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	691b      	ldr	r3, [r3, #16]
 8006b12:	f003 0310 	and.w	r3, r3, #16
 8006b16:	2b10      	cmp	r3, #16
 8006b18:	d122      	bne.n	8006b60 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	68db      	ldr	r3, [r3, #12]
 8006b20:	f003 0310 	and.w	r3, r3, #16
 8006b24:	2b10      	cmp	r3, #16
 8006b26:	d11b      	bne.n	8006b60 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f06f 0210 	mvn.w	r2, #16
 8006b30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2208      	movs	r2, #8
 8006b36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	69db      	ldr	r3, [r3, #28]
 8006b3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d003      	beq.n	8006b4e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f000 f99c 	bl	8006e84 <HAL_TIM_IC_CaptureCallback>
 8006b4c:	e005      	b.n	8006b5a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f000 f98e 	bl	8006e70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f000 f99f 	bl	8006e98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	691b      	ldr	r3, [r3, #16]
 8006b66:	f003 0301 	and.w	r3, r3, #1
 8006b6a:	2b01      	cmp	r3, #1
 8006b6c:	d10e      	bne.n	8006b8c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	68db      	ldr	r3, [r3, #12]
 8006b74:	f003 0301 	and.w	r3, r3, #1
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	d107      	bne.n	8006b8c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f06f 0201 	mvn.w	r2, #1
 8006b84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f7fc f952 	bl	8002e30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	691b      	ldr	r3, [r3, #16]
 8006b92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b96:	2b80      	cmp	r3, #128	; 0x80
 8006b98:	d10e      	bne.n	8006bb8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	68db      	ldr	r3, [r3, #12]
 8006ba0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ba4:	2b80      	cmp	r3, #128	; 0x80
 8006ba6:	d107      	bne.n	8006bb8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006bb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 fd98 	bl	80076e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	691b      	ldr	r3, [r3, #16]
 8006bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bc6:	d10e      	bne.n	8006be6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	68db      	ldr	r3, [r3, #12]
 8006bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bd2:	2b80      	cmp	r3, #128	; 0x80
 8006bd4:	d107      	bne.n	8006be6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006bde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f000 fd8b 	bl	80076fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	691b      	ldr	r3, [r3, #16]
 8006bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bf0:	2b40      	cmp	r3, #64	; 0x40
 8006bf2:	d10e      	bne.n	8006c12 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	68db      	ldr	r3, [r3, #12]
 8006bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bfe:	2b40      	cmp	r3, #64	; 0x40
 8006c00:	d107      	bne.n	8006c12 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006c0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f000 f94d 	bl	8006eac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	691b      	ldr	r3, [r3, #16]
 8006c18:	f003 0320 	and.w	r3, r3, #32
 8006c1c:	2b20      	cmp	r3, #32
 8006c1e:	d10e      	bne.n	8006c3e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	68db      	ldr	r3, [r3, #12]
 8006c26:	f003 0320 	and.w	r3, r3, #32
 8006c2a:	2b20      	cmp	r3, #32
 8006c2c:	d107      	bne.n	8006c3e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f06f 0220 	mvn.w	r2, #32
 8006c36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f000 fd4b 	bl	80076d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006c3e:	bf00      	nop
 8006c40:	3708      	adds	r7, #8
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}
	...

08006c48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b086      	sub	sp, #24
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	60f8      	str	r0, [r7, #12]
 8006c50:	60b9      	str	r1, [r7, #8]
 8006c52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c54:	2300      	movs	r3, #0
 8006c56:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c5e:	2b01      	cmp	r3, #1
 8006c60:	d101      	bne.n	8006c66 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006c62:	2302      	movs	r3, #2
 8006c64:	e0ff      	b.n	8006e66 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2201      	movs	r2, #1
 8006c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2b14      	cmp	r3, #20
 8006c72:	f200 80f0 	bhi.w	8006e56 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006c76:	a201      	add	r2, pc, #4	; (adr r2, 8006c7c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c7c:	08006cd1 	.word	0x08006cd1
 8006c80:	08006e57 	.word	0x08006e57
 8006c84:	08006e57 	.word	0x08006e57
 8006c88:	08006e57 	.word	0x08006e57
 8006c8c:	08006d11 	.word	0x08006d11
 8006c90:	08006e57 	.word	0x08006e57
 8006c94:	08006e57 	.word	0x08006e57
 8006c98:	08006e57 	.word	0x08006e57
 8006c9c:	08006d53 	.word	0x08006d53
 8006ca0:	08006e57 	.word	0x08006e57
 8006ca4:	08006e57 	.word	0x08006e57
 8006ca8:	08006e57 	.word	0x08006e57
 8006cac:	08006d93 	.word	0x08006d93
 8006cb0:	08006e57 	.word	0x08006e57
 8006cb4:	08006e57 	.word	0x08006e57
 8006cb8:	08006e57 	.word	0x08006e57
 8006cbc:	08006dd5 	.word	0x08006dd5
 8006cc0:	08006e57 	.word	0x08006e57
 8006cc4:	08006e57 	.word	0x08006e57
 8006cc8:	08006e57 	.word	0x08006e57
 8006ccc:	08006e15 	.word	0x08006e15
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	68b9      	ldr	r1, [r7, #8]
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f000 f992 	bl	8007000 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	699a      	ldr	r2, [r3, #24]
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f042 0208 	orr.w	r2, r2, #8
 8006cea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	699a      	ldr	r2, [r3, #24]
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f022 0204 	bic.w	r2, r2, #4
 8006cfa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	6999      	ldr	r1, [r3, #24]
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	691a      	ldr	r2, [r3, #16]
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	430a      	orrs	r2, r1
 8006d0c:	619a      	str	r2, [r3, #24]
      break;
 8006d0e:	e0a5      	b.n	8006e5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	68b9      	ldr	r1, [r7, #8]
 8006d16:	4618      	mov	r0, r3
 8006d18:	f000 f9e4 	bl	80070e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	699a      	ldr	r2, [r3, #24]
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	699a      	ldr	r2, [r3, #24]
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	6999      	ldr	r1, [r3, #24]
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	691b      	ldr	r3, [r3, #16]
 8006d46:	021a      	lsls	r2, r3, #8
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	430a      	orrs	r2, r1
 8006d4e:	619a      	str	r2, [r3, #24]
      break;
 8006d50:	e084      	b.n	8006e5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	68b9      	ldr	r1, [r7, #8]
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f000 fa3b 	bl	80071d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	69da      	ldr	r2, [r3, #28]
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f042 0208 	orr.w	r2, r2, #8
 8006d6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	69da      	ldr	r2, [r3, #28]
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f022 0204 	bic.w	r2, r2, #4
 8006d7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	69d9      	ldr	r1, [r3, #28]
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	691a      	ldr	r2, [r3, #16]
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	430a      	orrs	r2, r1
 8006d8e:	61da      	str	r2, [r3, #28]
      break;
 8006d90:	e064      	b.n	8006e5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	68b9      	ldr	r1, [r7, #8]
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f000 fa91 	bl	80072c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	69da      	ldr	r2, [r3, #28]
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006dac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	69da      	ldr	r2, [r3, #28]
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006dbc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	69d9      	ldr	r1, [r3, #28]
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	691b      	ldr	r3, [r3, #16]
 8006dc8:	021a      	lsls	r2, r3, #8
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	430a      	orrs	r2, r1
 8006dd0:	61da      	str	r2, [r3, #28]
      break;
 8006dd2:	e043      	b.n	8006e5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	68b9      	ldr	r1, [r7, #8]
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f000 fac8 	bl	8007370 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f042 0208 	orr.w	r2, r2, #8
 8006dee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f022 0204 	bic.w	r2, r2, #4
 8006dfe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	691a      	ldr	r2, [r3, #16]
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	430a      	orrs	r2, r1
 8006e10:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006e12:	e023      	b.n	8006e5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	68b9      	ldr	r1, [r7, #8]
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f000 fafa 	bl	8007414 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e2e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e3e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	691b      	ldr	r3, [r3, #16]
 8006e4a:	021a      	lsls	r2, r3, #8
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	430a      	orrs	r2, r1
 8006e52:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006e54:	e002      	b.n	8006e5c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006e56:	2301      	movs	r3, #1
 8006e58:	75fb      	strb	r3, [r7, #23]
      break;
 8006e5a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006e64:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3718      	adds	r7, #24
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}
 8006e6e:	bf00      	nop

08006e70 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b083      	sub	sp, #12
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006e78:	bf00      	nop
 8006e7a:	370c      	adds	r7, #12
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e82:	4770      	bx	lr

08006e84 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b083      	sub	sp, #12
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006e8c:	bf00      	nop
 8006e8e:	370c      	adds	r7, #12
 8006e90:	46bd      	mov	sp, r7
 8006e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e96:	4770      	bx	lr

08006e98 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b083      	sub	sp, #12
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006ea0:	bf00      	nop
 8006ea2:	370c      	adds	r7, #12
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr

08006eac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b083      	sub	sp, #12
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006eb4:	bf00      	nop
 8006eb6:	370c      	adds	r7, #12
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr

08006ec0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b085      	sub	sp, #20
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	4a40      	ldr	r2, [pc, #256]	; (8006fd4 <TIM_Base_SetConfig+0x114>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d013      	beq.n	8006f00 <TIM_Base_SetConfig+0x40>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ede:	d00f      	beq.n	8006f00 <TIM_Base_SetConfig+0x40>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	4a3d      	ldr	r2, [pc, #244]	; (8006fd8 <TIM_Base_SetConfig+0x118>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d00b      	beq.n	8006f00 <TIM_Base_SetConfig+0x40>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	4a3c      	ldr	r2, [pc, #240]	; (8006fdc <TIM_Base_SetConfig+0x11c>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d007      	beq.n	8006f00 <TIM_Base_SetConfig+0x40>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	4a3b      	ldr	r2, [pc, #236]	; (8006fe0 <TIM_Base_SetConfig+0x120>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d003      	beq.n	8006f00 <TIM_Base_SetConfig+0x40>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	4a3a      	ldr	r2, [pc, #232]	; (8006fe4 <TIM_Base_SetConfig+0x124>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d108      	bne.n	8006f12 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	68fa      	ldr	r2, [r7, #12]
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	4a2f      	ldr	r2, [pc, #188]	; (8006fd4 <TIM_Base_SetConfig+0x114>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d02b      	beq.n	8006f72 <TIM_Base_SetConfig+0xb2>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f20:	d027      	beq.n	8006f72 <TIM_Base_SetConfig+0xb2>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	4a2c      	ldr	r2, [pc, #176]	; (8006fd8 <TIM_Base_SetConfig+0x118>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d023      	beq.n	8006f72 <TIM_Base_SetConfig+0xb2>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	4a2b      	ldr	r2, [pc, #172]	; (8006fdc <TIM_Base_SetConfig+0x11c>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d01f      	beq.n	8006f72 <TIM_Base_SetConfig+0xb2>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	4a2a      	ldr	r2, [pc, #168]	; (8006fe0 <TIM_Base_SetConfig+0x120>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d01b      	beq.n	8006f72 <TIM_Base_SetConfig+0xb2>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	4a29      	ldr	r2, [pc, #164]	; (8006fe4 <TIM_Base_SetConfig+0x124>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d017      	beq.n	8006f72 <TIM_Base_SetConfig+0xb2>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	4a28      	ldr	r2, [pc, #160]	; (8006fe8 <TIM_Base_SetConfig+0x128>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d013      	beq.n	8006f72 <TIM_Base_SetConfig+0xb2>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	4a27      	ldr	r2, [pc, #156]	; (8006fec <TIM_Base_SetConfig+0x12c>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d00f      	beq.n	8006f72 <TIM_Base_SetConfig+0xb2>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	4a26      	ldr	r2, [pc, #152]	; (8006ff0 <TIM_Base_SetConfig+0x130>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d00b      	beq.n	8006f72 <TIM_Base_SetConfig+0xb2>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	4a25      	ldr	r2, [pc, #148]	; (8006ff4 <TIM_Base_SetConfig+0x134>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d007      	beq.n	8006f72 <TIM_Base_SetConfig+0xb2>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	4a24      	ldr	r2, [pc, #144]	; (8006ff8 <TIM_Base_SetConfig+0x138>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d003      	beq.n	8006f72 <TIM_Base_SetConfig+0xb2>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	4a23      	ldr	r2, [pc, #140]	; (8006ffc <TIM_Base_SetConfig+0x13c>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d108      	bne.n	8006f84 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	68db      	ldr	r3, [r3, #12]
 8006f7e:	68fa      	ldr	r2, [r7, #12]
 8006f80:	4313      	orrs	r3, r2
 8006f82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	695b      	ldr	r3, [r3, #20]
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	68fa      	ldr	r2, [r7, #12]
 8006f96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	689a      	ldr	r2, [r3, #8]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	681a      	ldr	r2, [r3, #0]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	4a0a      	ldr	r2, [pc, #40]	; (8006fd4 <TIM_Base_SetConfig+0x114>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d003      	beq.n	8006fb8 <TIM_Base_SetConfig+0xf8>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	4a0c      	ldr	r2, [pc, #48]	; (8006fe4 <TIM_Base_SetConfig+0x124>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d103      	bne.n	8006fc0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	691a      	ldr	r2, [r3, #16]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	615a      	str	r2, [r3, #20]
}
 8006fc6:	bf00      	nop
 8006fc8:	3714      	adds	r7, #20
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd0:	4770      	bx	lr
 8006fd2:	bf00      	nop
 8006fd4:	40010000 	.word	0x40010000
 8006fd8:	40000400 	.word	0x40000400
 8006fdc:	40000800 	.word	0x40000800
 8006fe0:	40000c00 	.word	0x40000c00
 8006fe4:	40010400 	.word	0x40010400
 8006fe8:	40014000 	.word	0x40014000
 8006fec:	40014400 	.word	0x40014400
 8006ff0:	40014800 	.word	0x40014800
 8006ff4:	40001800 	.word	0x40001800
 8006ff8:	40001c00 	.word	0x40001c00
 8006ffc:	40002000 	.word	0x40002000

08007000 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007000:	b480      	push	{r7}
 8007002:	b087      	sub	sp, #28
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
 8007008:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6a1b      	ldr	r3, [r3, #32]
 800700e:	f023 0201 	bic.w	r2, r3, #1
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6a1b      	ldr	r3, [r3, #32]
 800701a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	699b      	ldr	r3, [r3, #24]
 8007026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007028:	68fa      	ldr	r2, [r7, #12]
 800702a:	4b2b      	ldr	r3, [pc, #172]	; (80070d8 <TIM_OC1_SetConfig+0xd8>)
 800702c:	4013      	ands	r3, r2
 800702e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f023 0303 	bic.w	r3, r3, #3
 8007036:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	68fa      	ldr	r2, [r7, #12]
 800703e:	4313      	orrs	r3, r2
 8007040:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	f023 0302 	bic.w	r3, r3, #2
 8007048:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	689b      	ldr	r3, [r3, #8]
 800704e:	697a      	ldr	r2, [r7, #20]
 8007050:	4313      	orrs	r3, r2
 8007052:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	4a21      	ldr	r2, [pc, #132]	; (80070dc <TIM_OC1_SetConfig+0xdc>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d003      	beq.n	8007064 <TIM_OC1_SetConfig+0x64>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	4a20      	ldr	r2, [pc, #128]	; (80070e0 <TIM_OC1_SetConfig+0xe0>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d10c      	bne.n	800707e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	f023 0308 	bic.w	r3, r3, #8
 800706a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	68db      	ldr	r3, [r3, #12]
 8007070:	697a      	ldr	r2, [r7, #20]
 8007072:	4313      	orrs	r3, r2
 8007074:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	f023 0304 	bic.w	r3, r3, #4
 800707c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	4a16      	ldr	r2, [pc, #88]	; (80070dc <TIM_OC1_SetConfig+0xdc>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d003      	beq.n	800708e <TIM_OC1_SetConfig+0x8e>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	4a15      	ldr	r2, [pc, #84]	; (80070e0 <TIM_OC1_SetConfig+0xe0>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d111      	bne.n	80070b2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007094:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800709c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	695b      	ldr	r3, [r3, #20]
 80070a2:	693a      	ldr	r2, [r7, #16]
 80070a4:	4313      	orrs	r3, r2
 80070a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	699b      	ldr	r3, [r3, #24]
 80070ac:	693a      	ldr	r2, [r7, #16]
 80070ae:	4313      	orrs	r3, r2
 80070b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	693a      	ldr	r2, [r7, #16]
 80070b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	68fa      	ldr	r2, [r7, #12]
 80070bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	685a      	ldr	r2, [r3, #4]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	697a      	ldr	r2, [r7, #20]
 80070ca:	621a      	str	r2, [r3, #32]
}
 80070cc:	bf00      	nop
 80070ce:	371c      	adds	r7, #28
 80070d0:	46bd      	mov	sp, r7
 80070d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d6:	4770      	bx	lr
 80070d8:	fffeff8f 	.word	0xfffeff8f
 80070dc:	40010000 	.word	0x40010000
 80070e0:	40010400 	.word	0x40010400

080070e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b087      	sub	sp, #28
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
 80070ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6a1b      	ldr	r3, [r3, #32]
 80070f2:	f023 0210 	bic.w	r2, r3, #16
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6a1b      	ldr	r3, [r3, #32]
 80070fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	699b      	ldr	r3, [r3, #24]
 800710a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800710c:	68fa      	ldr	r2, [r7, #12]
 800710e:	4b2e      	ldr	r3, [pc, #184]	; (80071c8 <TIM_OC2_SetConfig+0xe4>)
 8007110:	4013      	ands	r3, r2
 8007112:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800711a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	021b      	lsls	r3, r3, #8
 8007122:	68fa      	ldr	r2, [r7, #12]
 8007124:	4313      	orrs	r3, r2
 8007126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	f023 0320 	bic.w	r3, r3, #32
 800712e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	689b      	ldr	r3, [r3, #8]
 8007134:	011b      	lsls	r3, r3, #4
 8007136:	697a      	ldr	r2, [r7, #20]
 8007138:	4313      	orrs	r3, r2
 800713a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	4a23      	ldr	r2, [pc, #140]	; (80071cc <TIM_OC2_SetConfig+0xe8>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d003      	beq.n	800714c <TIM_OC2_SetConfig+0x68>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	4a22      	ldr	r2, [pc, #136]	; (80071d0 <TIM_OC2_SetConfig+0xec>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d10d      	bne.n	8007168 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007152:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	68db      	ldr	r3, [r3, #12]
 8007158:	011b      	lsls	r3, r3, #4
 800715a:	697a      	ldr	r2, [r7, #20]
 800715c:	4313      	orrs	r3, r2
 800715e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007166:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	4a18      	ldr	r2, [pc, #96]	; (80071cc <TIM_OC2_SetConfig+0xe8>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d003      	beq.n	8007178 <TIM_OC2_SetConfig+0x94>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	4a17      	ldr	r2, [pc, #92]	; (80071d0 <TIM_OC2_SetConfig+0xec>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d113      	bne.n	80071a0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800717e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007186:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	695b      	ldr	r3, [r3, #20]
 800718c:	009b      	lsls	r3, r3, #2
 800718e:	693a      	ldr	r2, [r7, #16]
 8007190:	4313      	orrs	r3, r2
 8007192:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	699b      	ldr	r3, [r3, #24]
 8007198:	009b      	lsls	r3, r3, #2
 800719a:	693a      	ldr	r2, [r7, #16]
 800719c:	4313      	orrs	r3, r2
 800719e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	693a      	ldr	r2, [r7, #16]
 80071a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	68fa      	ldr	r2, [r7, #12]
 80071aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	685a      	ldr	r2, [r3, #4]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	697a      	ldr	r2, [r7, #20]
 80071b8:	621a      	str	r2, [r3, #32]
}
 80071ba:	bf00      	nop
 80071bc:	371c      	adds	r7, #28
 80071be:	46bd      	mov	sp, r7
 80071c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c4:	4770      	bx	lr
 80071c6:	bf00      	nop
 80071c8:	feff8fff 	.word	0xfeff8fff
 80071cc:	40010000 	.word	0x40010000
 80071d0:	40010400 	.word	0x40010400

080071d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80071d4:	b480      	push	{r7}
 80071d6:	b087      	sub	sp, #28
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
 80071dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6a1b      	ldr	r3, [r3, #32]
 80071e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6a1b      	ldr	r3, [r3, #32]
 80071ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	685b      	ldr	r3, [r3, #4]
 80071f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	69db      	ldr	r3, [r3, #28]
 80071fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80071fc:	68fa      	ldr	r2, [r7, #12]
 80071fe:	4b2d      	ldr	r3, [pc, #180]	; (80072b4 <TIM_OC3_SetConfig+0xe0>)
 8007200:	4013      	ands	r3, r2
 8007202:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	f023 0303 	bic.w	r3, r3, #3
 800720a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	68fa      	ldr	r2, [r7, #12]
 8007212:	4313      	orrs	r3, r2
 8007214:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800721c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	689b      	ldr	r3, [r3, #8]
 8007222:	021b      	lsls	r3, r3, #8
 8007224:	697a      	ldr	r2, [r7, #20]
 8007226:	4313      	orrs	r3, r2
 8007228:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	4a22      	ldr	r2, [pc, #136]	; (80072b8 <TIM_OC3_SetConfig+0xe4>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d003      	beq.n	800723a <TIM_OC3_SetConfig+0x66>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	4a21      	ldr	r2, [pc, #132]	; (80072bc <TIM_OC3_SetConfig+0xe8>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d10d      	bne.n	8007256 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007240:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	68db      	ldr	r3, [r3, #12]
 8007246:	021b      	lsls	r3, r3, #8
 8007248:	697a      	ldr	r2, [r7, #20]
 800724a:	4313      	orrs	r3, r2
 800724c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007254:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	4a17      	ldr	r2, [pc, #92]	; (80072b8 <TIM_OC3_SetConfig+0xe4>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d003      	beq.n	8007266 <TIM_OC3_SetConfig+0x92>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	4a16      	ldr	r2, [pc, #88]	; (80072bc <TIM_OC3_SetConfig+0xe8>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d113      	bne.n	800728e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007266:	693b      	ldr	r3, [r7, #16]
 8007268:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800726c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007274:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	695b      	ldr	r3, [r3, #20]
 800727a:	011b      	lsls	r3, r3, #4
 800727c:	693a      	ldr	r2, [r7, #16]
 800727e:	4313      	orrs	r3, r2
 8007280:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	699b      	ldr	r3, [r3, #24]
 8007286:	011b      	lsls	r3, r3, #4
 8007288:	693a      	ldr	r2, [r7, #16]
 800728a:	4313      	orrs	r3, r2
 800728c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	693a      	ldr	r2, [r7, #16]
 8007292:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	68fa      	ldr	r2, [r7, #12]
 8007298:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	685a      	ldr	r2, [r3, #4]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	697a      	ldr	r2, [r7, #20]
 80072a6:	621a      	str	r2, [r3, #32]
}
 80072a8:	bf00      	nop
 80072aa:	371c      	adds	r7, #28
 80072ac:	46bd      	mov	sp, r7
 80072ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b2:	4770      	bx	lr
 80072b4:	fffeff8f 	.word	0xfffeff8f
 80072b8:	40010000 	.word	0x40010000
 80072bc:	40010400 	.word	0x40010400

080072c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b087      	sub	sp, #28
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
 80072c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6a1b      	ldr	r3, [r3, #32]
 80072ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6a1b      	ldr	r3, [r3, #32]
 80072da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	69db      	ldr	r3, [r3, #28]
 80072e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80072e8:	68fa      	ldr	r2, [r7, #12]
 80072ea:	4b1e      	ldr	r3, [pc, #120]	; (8007364 <TIM_OC4_SetConfig+0xa4>)
 80072ec:	4013      	ands	r3, r2
 80072ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	021b      	lsls	r3, r3, #8
 80072fe:	68fa      	ldr	r2, [r7, #12]
 8007300:	4313      	orrs	r3, r2
 8007302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800730a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	689b      	ldr	r3, [r3, #8]
 8007310:	031b      	lsls	r3, r3, #12
 8007312:	693a      	ldr	r2, [r7, #16]
 8007314:	4313      	orrs	r3, r2
 8007316:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	4a13      	ldr	r2, [pc, #76]	; (8007368 <TIM_OC4_SetConfig+0xa8>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d003      	beq.n	8007328 <TIM_OC4_SetConfig+0x68>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	4a12      	ldr	r2, [pc, #72]	; (800736c <TIM_OC4_SetConfig+0xac>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d109      	bne.n	800733c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800732e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	695b      	ldr	r3, [r3, #20]
 8007334:	019b      	lsls	r3, r3, #6
 8007336:	697a      	ldr	r2, [r7, #20]
 8007338:	4313      	orrs	r3, r2
 800733a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	697a      	ldr	r2, [r7, #20]
 8007340:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	68fa      	ldr	r2, [r7, #12]
 8007346:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	685a      	ldr	r2, [r3, #4]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	693a      	ldr	r2, [r7, #16]
 8007354:	621a      	str	r2, [r3, #32]
}
 8007356:	bf00      	nop
 8007358:	371c      	adds	r7, #28
 800735a:	46bd      	mov	sp, r7
 800735c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007360:	4770      	bx	lr
 8007362:	bf00      	nop
 8007364:	feff8fff 	.word	0xfeff8fff
 8007368:	40010000 	.word	0x40010000
 800736c:	40010400 	.word	0x40010400

08007370 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007370:	b480      	push	{r7}
 8007372:	b087      	sub	sp, #28
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
 8007378:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6a1b      	ldr	r3, [r3, #32]
 800737e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6a1b      	ldr	r3, [r3, #32]
 800738a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	685b      	ldr	r3, [r3, #4]
 8007390:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007398:	68fa      	ldr	r2, [r7, #12]
 800739a:	4b1b      	ldr	r3, [pc, #108]	; (8007408 <TIM_OC5_SetConfig+0x98>)
 800739c:	4013      	ands	r3, r2
 800739e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	68fa      	ldr	r2, [r7, #12]
 80073a6:	4313      	orrs	r3, r2
 80073a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80073aa:	693b      	ldr	r3, [r7, #16]
 80073ac:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80073b0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	689b      	ldr	r3, [r3, #8]
 80073b6:	041b      	lsls	r3, r3, #16
 80073b8:	693a      	ldr	r2, [r7, #16]
 80073ba:	4313      	orrs	r3, r2
 80073bc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	4a12      	ldr	r2, [pc, #72]	; (800740c <TIM_OC5_SetConfig+0x9c>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d003      	beq.n	80073ce <TIM_OC5_SetConfig+0x5e>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	4a11      	ldr	r2, [pc, #68]	; (8007410 <TIM_OC5_SetConfig+0xa0>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d109      	bne.n	80073e2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073d4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	695b      	ldr	r3, [r3, #20]
 80073da:	021b      	lsls	r3, r3, #8
 80073dc:	697a      	ldr	r2, [r7, #20]
 80073de:	4313      	orrs	r3, r2
 80073e0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	697a      	ldr	r2, [r7, #20]
 80073e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	68fa      	ldr	r2, [r7, #12]
 80073ec:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	685a      	ldr	r2, [r3, #4]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	693a      	ldr	r2, [r7, #16]
 80073fa:	621a      	str	r2, [r3, #32]
}
 80073fc:	bf00      	nop
 80073fe:	371c      	adds	r7, #28
 8007400:	46bd      	mov	sp, r7
 8007402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007406:	4770      	bx	lr
 8007408:	fffeff8f 	.word	0xfffeff8f
 800740c:	40010000 	.word	0x40010000
 8007410:	40010400 	.word	0x40010400

08007414 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007414:	b480      	push	{r7}
 8007416:	b087      	sub	sp, #28
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
 800741c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6a1b      	ldr	r3, [r3, #32]
 8007422:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6a1b      	ldr	r3, [r3, #32]
 800742e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800743a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800743c:	68fa      	ldr	r2, [r7, #12]
 800743e:	4b1c      	ldr	r3, [pc, #112]	; (80074b0 <TIM_OC6_SetConfig+0x9c>)
 8007440:	4013      	ands	r3, r2
 8007442:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	021b      	lsls	r3, r3, #8
 800744a:	68fa      	ldr	r2, [r7, #12]
 800744c:	4313      	orrs	r3, r2
 800744e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007456:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	689b      	ldr	r3, [r3, #8]
 800745c:	051b      	lsls	r3, r3, #20
 800745e:	693a      	ldr	r2, [r7, #16]
 8007460:	4313      	orrs	r3, r2
 8007462:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	4a13      	ldr	r2, [pc, #76]	; (80074b4 <TIM_OC6_SetConfig+0xa0>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d003      	beq.n	8007474 <TIM_OC6_SetConfig+0x60>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	4a12      	ldr	r2, [pc, #72]	; (80074b8 <TIM_OC6_SetConfig+0xa4>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d109      	bne.n	8007488 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800747a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	695b      	ldr	r3, [r3, #20]
 8007480:	029b      	lsls	r3, r3, #10
 8007482:	697a      	ldr	r2, [r7, #20]
 8007484:	4313      	orrs	r3, r2
 8007486:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	697a      	ldr	r2, [r7, #20]
 800748c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	68fa      	ldr	r2, [r7, #12]
 8007492:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	685a      	ldr	r2, [r3, #4]
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	693a      	ldr	r2, [r7, #16]
 80074a0:	621a      	str	r2, [r3, #32]
}
 80074a2:	bf00      	nop
 80074a4:	371c      	adds	r7, #28
 80074a6:	46bd      	mov	sp, r7
 80074a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ac:	4770      	bx	lr
 80074ae:	bf00      	nop
 80074b0:	feff8fff 	.word	0xfeff8fff
 80074b4:	40010000 	.word	0x40010000
 80074b8:	40010400 	.word	0x40010400

080074bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80074bc:	b480      	push	{r7}
 80074be:	b085      	sub	sp, #20
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074cc:	2b01      	cmp	r3, #1
 80074ce:	d101      	bne.n	80074d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80074d0:	2302      	movs	r3, #2
 80074d2:	e06d      	b.n	80075b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2201      	movs	r2, #1
 80074d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2202      	movs	r2, #2
 80074e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	685b      	ldr	r3, [r3, #4]
 80074ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	689b      	ldr	r3, [r3, #8]
 80074f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a30      	ldr	r2, [pc, #192]	; (80075bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d004      	beq.n	8007508 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4a2f      	ldr	r2, [pc, #188]	; (80075c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d108      	bne.n	800751a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800750e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	68fa      	ldr	r2, [r7, #12]
 8007516:	4313      	orrs	r3, r2
 8007518:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007520:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	68fa      	ldr	r2, [r7, #12]
 8007528:	4313      	orrs	r3, r2
 800752a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	68fa      	ldr	r2, [r7, #12]
 8007532:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4a20      	ldr	r2, [pc, #128]	; (80075bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d022      	beq.n	8007584 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007546:	d01d      	beq.n	8007584 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4a1d      	ldr	r2, [pc, #116]	; (80075c4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d018      	beq.n	8007584 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4a1c      	ldr	r2, [pc, #112]	; (80075c8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d013      	beq.n	8007584 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4a1a      	ldr	r2, [pc, #104]	; (80075cc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d00e      	beq.n	8007584 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4a15      	ldr	r2, [pc, #84]	; (80075c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d009      	beq.n	8007584 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4a16      	ldr	r2, [pc, #88]	; (80075d0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d004      	beq.n	8007584 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a15      	ldr	r2, [pc, #84]	; (80075d4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d10c      	bne.n	800759e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800758a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	689b      	ldr	r3, [r3, #8]
 8007590:	68ba      	ldr	r2, [r7, #8]
 8007592:	4313      	orrs	r3, r2
 8007594:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	68ba      	ldr	r2, [r7, #8]
 800759c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2201      	movs	r2, #1
 80075a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2200      	movs	r2, #0
 80075aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80075ae:	2300      	movs	r3, #0
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	3714      	adds	r7, #20
 80075b4:	46bd      	mov	sp, r7
 80075b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ba:	4770      	bx	lr
 80075bc:	40010000 	.word	0x40010000
 80075c0:	40010400 	.word	0x40010400
 80075c4:	40000400 	.word	0x40000400
 80075c8:	40000800 	.word	0x40000800
 80075cc:	40000c00 	.word	0x40000c00
 80075d0:	40014000 	.word	0x40014000
 80075d4:	40001800 	.word	0x40001800

080075d8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80075d8:	b480      	push	{r7}
 80075da:	b085      	sub	sp, #20
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
 80075e0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80075e2:	2300      	movs	r3, #0
 80075e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075ec:	2b01      	cmp	r3, #1
 80075ee:	d101      	bne.n	80075f4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80075f0:	2302      	movs	r3, #2
 80075f2:	e065      	b.n	80076c0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2201      	movs	r2, #1
 80075f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	68db      	ldr	r3, [r3, #12]
 8007606:	4313      	orrs	r3, r2
 8007608:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	689b      	ldr	r3, [r3, #8]
 8007614:	4313      	orrs	r3, r2
 8007616:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	4313      	orrs	r3, r2
 8007624:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4313      	orrs	r3, r2
 8007632:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	691b      	ldr	r3, [r3, #16]
 800763e:	4313      	orrs	r3, r2
 8007640:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	695b      	ldr	r3, [r3, #20]
 800764c:	4313      	orrs	r3, r2
 800764e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800765a:	4313      	orrs	r3, r2
 800765c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	699b      	ldr	r3, [r3, #24]
 8007668:	041b      	lsls	r3, r3, #16
 800766a:	4313      	orrs	r3, r2
 800766c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4a16      	ldr	r2, [pc, #88]	; (80076cc <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d004      	beq.n	8007682 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4a14      	ldr	r2, [pc, #80]	; (80076d0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d115      	bne.n	80076ae <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800768c:	051b      	lsls	r3, r3, #20
 800768e:	4313      	orrs	r3, r2
 8007690:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	69db      	ldr	r3, [r3, #28]
 800769c:	4313      	orrs	r3, r2
 800769e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	6a1b      	ldr	r3, [r3, #32]
 80076aa:	4313      	orrs	r3, r2
 80076ac:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	68fa      	ldr	r2, [r7, #12]
 80076b4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2200      	movs	r2, #0
 80076ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80076be:	2300      	movs	r3, #0
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	3714      	adds	r7, #20
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr
 80076cc:	40010000 	.word	0x40010000
 80076d0:	40010400 	.word	0x40010400

080076d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b083      	sub	sp, #12
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80076dc:	bf00      	nop
 80076de:	370c      	adds	r7, #12
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr

080076e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b083      	sub	sp, #12
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80076f0:	bf00      	nop
 80076f2:	370c      	adds	r7, #12
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr

080076fc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b083      	sub	sp, #12
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007704:	bf00      	nop
 8007706:	370c      	adds	r7, #12
 8007708:	46bd      	mov	sp, r7
 800770a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770e:	4770      	bx	lr

08007710 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b082      	sub	sp, #8
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d101      	bne.n	8007722 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800771e:	2301      	movs	r3, #1
 8007720:	e040      	b.n	80077a4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007726:	2b00      	cmp	r3, #0
 8007728:	d106      	bne.n	8007738 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2200      	movs	r2, #0
 800772e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f7fc fbd2 	bl	8003edc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2224      	movs	r2, #36	; 0x24
 800773c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	681a      	ldr	r2, [r3, #0]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f022 0201 	bic.w	r2, r2, #1
 800774c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f000 fcae 	bl	80080b0 <UART_SetConfig>
 8007754:	4603      	mov	r3, r0
 8007756:	2b01      	cmp	r3, #1
 8007758:	d101      	bne.n	800775e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800775a:	2301      	movs	r3, #1
 800775c:	e022      	b.n	80077a4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007762:	2b00      	cmp	r3, #0
 8007764:	d002      	beq.n	800776c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f000 ff06 	bl	8008578 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	685a      	ldr	r2, [r3, #4]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800777a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	689a      	ldr	r2, [r3, #8]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800778a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	681a      	ldr	r2, [r3, #0]
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f042 0201 	orr.w	r2, r2, #1
 800779a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f000 ff8d 	bl	80086bc <UART_CheckIdleState>
 80077a2:	4603      	mov	r3, r0
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3708      	adds	r7, #8
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}

080077ac <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b08a      	sub	sp, #40	; 0x28
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	60f8      	str	r0, [r7, #12]
 80077b4:	60b9      	str	r1, [r7, #8]
 80077b6:	4613      	mov	r3, r2
 80077b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077be:	2b20      	cmp	r3, #32
 80077c0:	d165      	bne.n	800788e <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d002      	beq.n	80077ce <HAL_UART_Transmit_DMA+0x22>
 80077c8:	88fb      	ldrh	r3, [r7, #6]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d101      	bne.n	80077d2 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 80077ce:	2301      	movs	r3, #1
 80077d0:	e05e      	b.n	8007890 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	68ba      	ldr	r2, [r7, #8]
 80077d6:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	88fa      	ldrh	r2, [r7, #6]
 80077dc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	88fa      	ldrh	r2, [r7, #6]
 80077e4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	2200      	movs	r2, #0
 80077ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2221      	movs	r2, #33	; 0x21
 80077f4:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d027      	beq.n	800784e <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007802:	4a25      	ldr	r2, [pc, #148]	; (8007898 <HAL_UART_Transmit_DMA+0xec>)
 8007804:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800780a:	4a24      	ldr	r2, [pc, #144]	; (800789c <HAL_UART_Transmit_DMA+0xf0>)
 800780c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007812:	4a23      	ldr	r2, [pc, #140]	; (80078a0 <HAL_UART_Transmit_DMA+0xf4>)
 8007814:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800781a:	2200      	movs	r2, #0
 800781c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007826:	4619      	mov	r1, r3
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	3328      	adds	r3, #40	; 0x28
 800782e:	461a      	mov	r2, r3
 8007830:	88fb      	ldrh	r3, [r7, #6]
 8007832:	f7fc fef5 	bl	8004620 <HAL_DMA_Start_IT>
 8007836:	4603      	mov	r3, r0
 8007838:	2b00      	cmp	r3, #0
 800783a:	d008      	beq.n	800784e <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2210      	movs	r2, #16
 8007840:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2220      	movs	r2, #32
 8007848:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 800784a:	2301      	movs	r3, #1
 800784c:	e020      	b.n	8007890 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	2240      	movs	r2, #64	; 0x40
 8007854:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	3308      	adds	r3, #8
 800785c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	e853 3f00 	ldrex	r3, [r3]
 8007864:	613b      	str	r3, [r7, #16]
   return(result);
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800786c:	627b      	str	r3, [r7, #36]	; 0x24
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	3308      	adds	r3, #8
 8007874:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007876:	623a      	str	r2, [r7, #32]
 8007878:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800787a:	69f9      	ldr	r1, [r7, #28]
 800787c:	6a3a      	ldr	r2, [r7, #32]
 800787e:	e841 2300 	strex	r3, r2, [r1]
 8007882:	61bb      	str	r3, [r7, #24]
   return(result);
 8007884:	69bb      	ldr	r3, [r7, #24]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d1e5      	bne.n	8007856 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 800788a:	2300      	movs	r3, #0
 800788c:	e000      	b.n	8007890 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 800788e:	2302      	movs	r3, #2
  }
}
 8007890:	4618      	mov	r0, r3
 8007892:	3728      	adds	r7, #40	; 0x28
 8007894:	46bd      	mov	sp, r7
 8007896:	bd80      	pop	{r7, pc}
 8007898:	08008b39 	.word	0x08008b39
 800789c:	08008bcf 	.word	0x08008bcf
 80078a0:	08008d51 	.word	0x08008d51

080078a4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b08a      	sub	sp, #40	; 0x28
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	60f8      	str	r0, [r7, #12]
 80078ac:	60b9      	str	r1, [r7, #8]
 80078ae:	4613      	mov	r3, r2
 80078b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078b8:	2b20      	cmp	r3, #32
 80078ba:	d132      	bne.n	8007922 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d002      	beq.n	80078c8 <HAL_UART_Receive_DMA+0x24>
 80078c2:	88fb      	ldrh	r3, [r7, #6]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d101      	bne.n	80078cc <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80078c8:	2301      	movs	r3, #1
 80078ca:	e02b      	b.n	8007924 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	2200      	movs	r2, #0
 80078d0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	685b      	ldr	r3, [r3, #4]
 80078d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d018      	beq.n	8007912 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	e853 3f00 	ldrex	r3, [r3]
 80078ec:	613b      	str	r3, [r7, #16]
   return(result);
 80078ee:	693b      	ldr	r3, [r7, #16]
 80078f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80078f4:	627b      	str	r3, [r7, #36]	; 0x24
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	461a      	mov	r2, r3
 80078fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078fe:	623b      	str	r3, [r7, #32]
 8007900:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007902:	69f9      	ldr	r1, [r7, #28]
 8007904:	6a3a      	ldr	r2, [r7, #32]
 8007906:	e841 2300 	strex	r3, r2, [r1]
 800790a:	61bb      	str	r3, [r7, #24]
   return(result);
 800790c:	69bb      	ldr	r3, [r7, #24]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d1e6      	bne.n	80078e0 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007912:	88fb      	ldrh	r3, [r7, #6]
 8007914:	461a      	mov	r2, r3
 8007916:	68b9      	ldr	r1, [r7, #8]
 8007918:	68f8      	ldr	r0, [r7, #12]
 800791a:	f000 ffe3 	bl	80088e4 <UART_Start_Receive_DMA>
 800791e:	4603      	mov	r3, r0
 8007920:	e000      	b.n	8007924 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 8007922:	2302      	movs	r3, #2
  }
}
 8007924:	4618      	mov	r0, r3
 8007926:	3728      	adds	r7, #40	; 0x28
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}

0800792c <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b090      	sub	sp, #64	; 0x40
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007938:	63fb      	str	r3, [r7, #60]	; 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007940:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	689b      	ldr	r3, [r3, #8]
 8007948:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800794c:	2b80      	cmp	r3, #128	; 0x80
 800794e:	d139      	bne.n	80079c4 <HAL_UART_DMAStop+0x98>
 8007950:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007952:	2b21      	cmp	r3, #33	; 0x21
 8007954:	d136      	bne.n	80079c4 <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	3308      	adds	r3, #8
 800795c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800795e:	6a3b      	ldr	r3, [r7, #32]
 8007960:	e853 3f00 	ldrex	r3, [r3]
 8007964:	61fb      	str	r3, [r7, #28]
   return(result);
 8007966:	69fb      	ldr	r3, [r7, #28]
 8007968:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800796c:	637b      	str	r3, [r7, #52]	; 0x34
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	3308      	adds	r3, #8
 8007974:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007976:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007978:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800797a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800797c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800797e:	e841 2300 	strex	r3, r2, [r1]
 8007982:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007986:	2b00      	cmp	r3, #0
 8007988:	d1e5      	bne.n	8007956 <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800798e:	2b00      	cmp	r3, #0
 8007990:	d015      	beq.n	80079be <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007996:	4618      	mov	r0, r3
 8007998:	f7fc fea2 	bl	80046e0 <HAL_DMA_Abort>
 800799c:	4603      	mov	r3, r0
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d00d      	beq.n	80079be <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079a6:	4618      	mov	r0, r3
 80079a8:	f7fd f8b6 	bl	8004b18 <HAL_DMA_GetError>
 80079ac:	4603      	mov	r3, r0
 80079ae:	2b20      	cmp	r3, #32
 80079b0:	d105      	bne.n	80079be <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2210      	movs	r2, #16
 80079b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80079ba:	2303      	movs	r3, #3
 80079bc:	e044      	b.n	8007a48 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f001 f830 	bl	8008a24 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	689b      	ldr	r3, [r3, #8]
 80079ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079ce:	2b40      	cmp	r3, #64	; 0x40
 80079d0:	d139      	bne.n	8007a46 <HAL_UART_DMAStop+0x11a>
 80079d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079d4:	2b22      	cmp	r3, #34	; 0x22
 80079d6:	d136      	bne.n	8007a46 <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	3308      	adds	r3, #8
 80079de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	e853 3f00 	ldrex	r3, [r3]
 80079e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079ee:	633b      	str	r3, [r7, #48]	; 0x30
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	3308      	adds	r3, #8
 80079f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079f8:	61ba      	str	r2, [r7, #24]
 80079fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079fc:	6979      	ldr	r1, [r7, #20]
 80079fe:	69ba      	ldr	r2, [r7, #24]
 8007a00:	e841 2300 	strex	r3, r2, [r1]
 8007a04:	613b      	str	r3, [r7, #16]
   return(result);
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d1e5      	bne.n	80079d8 <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d015      	beq.n	8007a40 <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a18:	4618      	mov	r0, r3
 8007a1a:	f7fc fe61 	bl	80046e0 <HAL_DMA_Abort>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d00d      	beq.n	8007a40 <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a28:	4618      	mov	r0, r3
 8007a2a:	f7fd f875 	bl	8004b18 <HAL_DMA_GetError>
 8007a2e:	4603      	mov	r3, r0
 8007a30:	2b20      	cmp	r3, #32
 8007a32:	d105      	bne.n	8007a40 <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2210      	movs	r2, #16
 8007a38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007a3c:	2303      	movs	r3, #3
 8007a3e:	e003      	b.n	8007a48 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f001 f815 	bl	8008a70 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8007a46:	2300      	movs	r3, #0
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3740      	adds	r7, #64	; 0x40
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}

08007a50 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b0ba      	sub	sp, #232	; 0xe8
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	69db      	ldr	r3, [r3, #28]
 8007a5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	689b      	ldr	r3, [r3, #8]
 8007a72:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007a76:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007a7a:	f640 030f 	movw	r3, #2063	; 0x80f
 8007a7e:	4013      	ands	r3, r2
 8007a80:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007a84:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d115      	bne.n	8007ab8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007a8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a90:	f003 0320 	and.w	r3, r3, #32
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d00f      	beq.n	8007ab8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007a98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a9c:	f003 0320 	and.w	r3, r3, #32
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d009      	beq.n	8007ab8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	f000 82ac 	beq.w	8008006 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	4798      	blx	r3
      }
      return;
 8007ab6:	e2a6      	b.n	8008006 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007ab8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	f000 8117 	beq.w	8007cf0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007ac2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ac6:	f003 0301 	and.w	r3, r3, #1
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d106      	bne.n	8007adc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007ace:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007ad2:	4b85      	ldr	r3, [pc, #532]	; (8007ce8 <HAL_UART_IRQHandler+0x298>)
 8007ad4:	4013      	ands	r3, r2
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	f000 810a 	beq.w	8007cf0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007adc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ae0:	f003 0301 	and.w	r3, r3, #1
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d011      	beq.n	8007b0c <HAL_UART_IRQHandler+0xbc>
 8007ae8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d00b      	beq.n	8007b0c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	2201      	movs	r2, #1
 8007afa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b02:	f043 0201 	orr.w	r2, r3, #1
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007b0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b10:	f003 0302 	and.w	r3, r3, #2
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d011      	beq.n	8007b3c <HAL_UART_IRQHandler+0xec>
 8007b18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b1c:	f003 0301 	and.w	r3, r3, #1
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d00b      	beq.n	8007b3c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	2202      	movs	r2, #2
 8007b2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b32:	f043 0204 	orr.w	r2, r3, #4
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007b3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b40:	f003 0304 	and.w	r3, r3, #4
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d011      	beq.n	8007b6c <HAL_UART_IRQHandler+0x11c>
 8007b48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b4c:	f003 0301 	and.w	r3, r3, #1
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d00b      	beq.n	8007b6c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	2204      	movs	r2, #4
 8007b5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b62:	f043 0202 	orr.w	r2, r3, #2
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007b6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b70:	f003 0308 	and.w	r3, r3, #8
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d017      	beq.n	8007ba8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007b78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b7c:	f003 0320 	and.w	r3, r3, #32
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d105      	bne.n	8007b90 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007b84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b88:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d00b      	beq.n	8007ba8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	2208      	movs	r2, #8
 8007b96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b9e:	f043 0208 	orr.w	r2, r3, #8
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007ba8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d012      	beq.n	8007bda <HAL_UART_IRQHandler+0x18a>
 8007bb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bb8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d00c      	beq.n	8007bda <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007bc8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007bd0:	f043 0220 	orr.w	r2, r3, #32
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	f000 8212 	beq.w	800800a <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007be6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bea:	f003 0320 	and.w	r3, r3, #32
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d00d      	beq.n	8007c0e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007bf2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bf6:	f003 0320 	and.w	r3, r3, #32
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d007      	beq.n	8007c0e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d003      	beq.n	8007c0e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c14:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	689b      	ldr	r3, [r3, #8]
 8007c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c22:	2b40      	cmp	r3, #64	; 0x40
 8007c24:	d005      	beq.n	8007c32 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007c26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007c2a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d04f      	beq.n	8007cd2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f000 ff1c 	bl	8008a70 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	689b      	ldr	r3, [r3, #8]
 8007c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c42:	2b40      	cmp	r3, #64	; 0x40
 8007c44:	d141      	bne.n	8007cca <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	3308      	adds	r3, #8
 8007c4c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c50:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007c54:	e853 3f00 	ldrex	r3, [r3]
 8007c58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007c5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007c60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	3308      	adds	r3, #8
 8007c6e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007c72:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007c76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c7a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007c7e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007c82:	e841 2300 	strex	r3, r2, [r1]
 8007c86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007c8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d1d9      	bne.n	8007c46 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d013      	beq.n	8007cc2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c9e:	4a13      	ldr	r2, [pc, #76]	; (8007cec <HAL_UART_IRQHandler+0x29c>)
 8007ca0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f7fc fd8a 	bl	80047c0 <HAL_DMA_Abort_IT>
 8007cac:	4603      	mov	r3, r0
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d017      	beq.n	8007ce2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007cb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cb8:	687a      	ldr	r2, [r7, #4]
 8007cba:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007cbc:	4610      	mov	r0, r2
 8007cbe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cc0:	e00f      	b.n	8007ce2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f000 f9d4 	bl	8008070 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cc8:	e00b      	b.n	8007ce2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f000 f9d0 	bl	8008070 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cd0:	e007      	b.n	8007ce2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f000 f9cc 	bl	8008070 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8007ce0:	e193      	b.n	800800a <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ce2:	bf00      	nop
    return;
 8007ce4:	e191      	b.n	800800a <HAL_UART_IRQHandler+0x5ba>
 8007ce6:	bf00      	nop
 8007ce8:	04000120 	.word	0x04000120
 8007cec:	08008dcf 	.word	0x08008dcf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cf4:	2b01      	cmp	r3, #1
 8007cf6:	f040 814c 	bne.w	8007f92 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007cfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cfe:	f003 0310 	and.w	r3, r3, #16
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	f000 8145 	beq.w	8007f92 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007d08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d0c:	f003 0310 	and.w	r3, r3, #16
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	f000 813e 	beq.w	8007f92 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	2210      	movs	r2, #16
 8007d1c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	689b      	ldr	r3, [r3, #8]
 8007d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d28:	2b40      	cmp	r3, #64	; 0x40
 8007d2a:	f040 80b6 	bne.w	8007e9a <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	685b      	ldr	r3, [r3, #4]
 8007d36:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007d3a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	f000 8165 	beq.w	800800e <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007d4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007d4e:	429a      	cmp	r2, r3
 8007d50:	f080 815d 	bcs.w	800800e <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007d5a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d62:	69db      	ldr	r3, [r3, #28]
 8007d64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d68:	f000 8086 	beq.w	8007e78 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d74:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007d78:	e853 3f00 	ldrex	r3, [r3]
 8007d7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007d80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007d84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d88:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	461a      	mov	r2, r3
 8007d92:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007d96:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007d9a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d9e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007da2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007da6:	e841 2300 	strex	r3, r2, [r1]
 8007daa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007dae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d1da      	bne.n	8007d6c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	3308      	adds	r3, #8
 8007dbc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007dc0:	e853 3f00 	ldrex	r3, [r3]
 8007dc4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007dc6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007dc8:	f023 0301 	bic.w	r3, r3, #1
 8007dcc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	3308      	adds	r3, #8
 8007dd6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007dda:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007dde:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007de0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007de2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007de6:	e841 2300 	strex	r3, r2, [r1]
 8007dea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007dec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d1e1      	bne.n	8007db6 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	3308      	adds	r3, #8
 8007df8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dfa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007dfc:	e853 3f00 	ldrex	r3, [r3]
 8007e00:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007e02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	3308      	adds	r3, #8
 8007e12:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007e16:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007e18:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e1a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007e1c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007e1e:	e841 2300 	strex	r3, r2, [r1]
 8007e22:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007e24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d1e3      	bne.n	8007df2 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2220      	movs	r2, #32
 8007e2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2200      	movs	r2, #0
 8007e36:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e40:	e853 3f00 	ldrex	r3, [r3]
 8007e44:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007e46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e48:	f023 0310 	bic.w	r3, r3, #16
 8007e4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	461a      	mov	r2, r3
 8007e56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007e5a:	65bb      	str	r3, [r7, #88]	; 0x58
 8007e5c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e5e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007e60:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007e62:	e841 2300 	strex	r3, r2, [r1]
 8007e66:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007e68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d1e4      	bne.n	8007e38 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e72:	4618      	mov	r0, r3
 8007e74:	f7fc fc34 	bl	80046e0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2202      	movs	r2, #2
 8007e7c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007e8a:	b29b      	uxth	r3, r3
 8007e8c:	1ad3      	subs	r3, r2, r3
 8007e8e:	b29b      	uxth	r3, r3
 8007e90:	4619      	mov	r1, r3
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f000 f8f6 	bl	8008084 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007e98:	e0b9      	b.n	800800e <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007ea6:	b29b      	uxth	r3, r3
 8007ea8:	1ad3      	subs	r3, r2, r3
 8007eaa:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007eb4:	b29b      	uxth	r3, r3
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	f000 80ab 	beq.w	8008012 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8007ebc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	f000 80a6 	beq.w	8008012 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ece:	e853 3f00 	ldrex	r3, [r3]
 8007ed2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007ed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ed6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007eda:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	461a      	mov	r2, r3
 8007ee4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007ee8:	647b      	str	r3, [r7, #68]	; 0x44
 8007eea:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007eee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007ef0:	e841 2300 	strex	r3, r2, [r1]
 8007ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007ef6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d1e4      	bne.n	8007ec6 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	3308      	adds	r3, #8
 8007f02:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f06:	e853 3f00 	ldrex	r3, [r3]
 8007f0a:	623b      	str	r3, [r7, #32]
   return(result);
 8007f0c:	6a3b      	ldr	r3, [r7, #32]
 8007f0e:	f023 0301 	bic.w	r3, r3, #1
 8007f12:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	3308      	adds	r3, #8
 8007f1c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007f20:	633a      	str	r2, [r7, #48]	; 0x30
 8007f22:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f24:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007f26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f28:	e841 2300 	strex	r3, r2, [r1]
 8007f2c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d1e3      	bne.n	8007efc <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2220      	movs	r2, #32
 8007f38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2200      	movs	r2, #0
 8007f46:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	e853 3f00 	ldrex	r3, [r3]
 8007f54:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	f023 0310 	bic.w	r3, r3, #16
 8007f5c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	461a      	mov	r2, r3
 8007f66:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007f6a:	61fb      	str	r3, [r7, #28]
 8007f6c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f6e:	69b9      	ldr	r1, [r7, #24]
 8007f70:	69fa      	ldr	r2, [r7, #28]
 8007f72:	e841 2300 	strex	r3, r2, [r1]
 8007f76:	617b      	str	r3, [r7, #20]
   return(result);
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d1e4      	bne.n	8007f48 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2202      	movs	r2, #2
 8007f82:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007f84:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007f88:	4619      	mov	r1, r3
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f000 f87a 	bl	8008084 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007f90:	e03f      	b.n	8008012 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007f92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d00e      	beq.n	8007fbc <HAL_UART_IRQHandler+0x56c>
 8007f9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007fa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d008      	beq.n	8007fbc <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007fb2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f000 f871 	bl	800809c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007fba:	e02d      	b.n	8008018 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007fbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d00e      	beq.n	8007fe6 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007fc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d008      	beq.n	8007fe6 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d01c      	beq.n	8008016 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	4798      	blx	r3
    }
    return;
 8007fe4:	e017      	b.n	8008016 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007fe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d012      	beq.n	8008018 <HAL_UART_IRQHandler+0x5c8>
 8007ff2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d00c      	beq.n	8008018 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f000 fefb 	bl	8008dfa <UART_EndTransmit_IT>
    return;
 8008004:	e008      	b.n	8008018 <HAL_UART_IRQHandler+0x5c8>
      return;
 8008006:	bf00      	nop
 8008008:	e006      	b.n	8008018 <HAL_UART_IRQHandler+0x5c8>
    return;
 800800a:	bf00      	nop
 800800c:	e004      	b.n	8008018 <HAL_UART_IRQHandler+0x5c8>
      return;
 800800e:	bf00      	nop
 8008010:	e002      	b.n	8008018 <HAL_UART_IRQHandler+0x5c8>
      return;
 8008012:	bf00      	nop
 8008014:	e000      	b.n	8008018 <HAL_UART_IRQHandler+0x5c8>
    return;
 8008016:	bf00      	nop
  }

}
 8008018:	37e8      	adds	r7, #232	; 0xe8
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}
 800801e:	bf00      	nop

08008020 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008020:	b480      	push	{r7}
 8008022:	b083      	sub	sp, #12
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008028:	bf00      	nop
 800802a:	370c      	adds	r7, #12
 800802c:	46bd      	mov	sp, r7
 800802e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008032:	4770      	bx	lr

08008034 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008034:	b480      	push	{r7}
 8008036:	b083      	sub	sp, #12
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800803c:	bf00      	nop
 800803e:	370c      	adds	r7, #12
 8008040:	46bd      	mov	sp, r7
 8008042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008046:	4770      	bx	lr

08008048 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008048:	b480      	push	{r7}
 800804a:	b083      	sub	sp, #12
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8008050:	bf00      	nop
 8008052:	370c      	adds	r7, #12
 8008054:	46bd      	mov	sp, r7
 8008056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805a:	4770      	bx	lr

0800805c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800805c:	b480      	push	{r7}
 800805e:	b083      	sub	sp, #12
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008064:	bf00      	nop
 8008066:	370c      	adds	r7, #12
 8008068:	46bd      	mov	sp, r7
 800806a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806e:	4770      	bx	lr

08008070 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008070:	b480      	push	{r7}
 8008072:	b083      	sub	sp, #12
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008078:	bf00      	nop
 800807a:	370c      	adds	r7, #12
 800807c:	46bd      	mov	sp, r7
 800807e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008082:	4770      	bx	lr

08008084 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008084:	b480      	push	{r7}
 8008086:	b083      	sub	sp, #12
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
 800808c:	460b      	mov	r3, r1
 800808e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008090:	bf00      	nop
 8008092:	370c      	adds	r7, #12
 8008094:	46bd      	mov	sp, r7
 8008096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809a:	4770      	bx	lr

0800809c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800809c:	b480      	push	{r7}
 800809e:	b083      	sub	sp, #12
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80080a4:	bf00      	nop
 80080a6:	370c      	adds	r7, #12
 80080a8:	46bd      	mov	sp, r7
 80080aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ae:	4770      	bx	lr

080080b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b088      	sub	sp, #32
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80080b8:	2300      	movs	r3, #0
 80080ba:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	689a      	ldr	r2, [r3, #8]
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	691b      	ldr	r3, [r3, #16]
 80080c4:	431a      	orrs	r2, r3
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	695b      	ldr	r3, [r3, #20]
 80080ca:	431a      	orrs	r2, r3
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	69db      	ldr	r3, [r3, #28]
 80080d0:	4313      	orrs	r3, r2
 80080d2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	681a      	ldr	r2, [r3, #0]
 80080da:	4ba6      	ldr	r3, [pc, #664]	; (8008374 <UART_SetConfig+0x2c4>)
 80080dc:	4013      	ands	r3, r2
 80080de:	687a      	ldr	r2, [r7, #4]
 80080e0:	6812      	ldr	r2, [r2, #0]
 80080e2:	6979      	ldr	r1, [r7, #20]
 80080e4:	430b      	orrs	r3, r1
 80080e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	685b      	ldr	r3, [r3, #4]
 80080ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	68da      	ldr	r2, [r3, #12]
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	430a      	orrs	r2, r1
 80080fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	699b      	ldr	r3, [r3, #24]
 8008102:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6a1b      	ldr	r3, [r3, #32]
 8008108:	697a      	ldr	r2, [r7, #20]
 800810a:	4313      	orrs	r3, r2
 800810c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	689b      	ldr	r3, [r3, #8]
 8008114:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	697a      	ldr	r2, [r7, #20]
 800811e:	430a      	orrs	r2, r1
 8008120:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	4a94      	ldr	r2, [pc, #592]	; (8008378 <UART_SetConfig+0x2c8>)
 8008128:	4293      	cmp	r3, r2
 800812a:	d120      	bne.n	800816e <UART_SetConfig+0xbe>
 800812c:	4b93      	ldr	r3, [pc, #588]	; (800837c <UART_SetConfig+0x2cc>)
 800812e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008132:	f003 0303 	and.w	r3, r3, #3
 8008136:	2b03      	cmp	r3, #3
 8008138:	d816      	bhi.n	8008168 <UART_SetConfig+0xb8>
 800813a:	a201      	add	r2, pc, #4	; (adr r2, 8008140 <UART_SetConfig+0x90>)
 800813c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008140:	08008151 	.word	0x08008151
 8008144:	0800815d 	.word	0x0800815d
 8008148:	08008157 	.word	0x08008157
 800814c:	08008163 	.word	0x08008163
 8008150:	2301      	movs	r3, #1
 8008152:	77fb      	strb	r3, [r7, #31]
 8008154:	e150      	b.n	80083f8 <UART_SetConfig+0x348>
 8008156:	2302      	movs	r3, #2
 8008158:	77fb      	strb	r3, [r7, #31]
 800815a:	e14d      	b.n	80083f8 <UART_SetConfig+0x348>
 800815c:	2304      	movs	r3, #4
 800815e:	77fb      	strb	r3, [r7, #31]
 8008160:	e14a      	b.n	80083f8 <UART_SetConfig+0x348>
 8008162:	2308      	movs	r3, #8
 8008164:	77fb      	strb	r3, [r7, #31]
 8008166:	e147      	b.n	80083f8 <UART_SetConfig+0x348>
 8008168:	2310      	movs	r3, #16
 800816a:	77fb      	strb	r3, [r7, #31]
 800816c:	e144      	b.n	80083f8 <UART_SetConfig+0x348>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	4a83      	ldr	r2, [pc, #524]	; (8008380 <UART_SetConfig+0x2d0>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d132      	bne.n	80081de <UART_SetConfig+0x12e>
 8008178:	4b80      	ldr	r3, [pc, #512]	; (800837c <UART_SetConfig+0x2cc>)
 800817a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800817e:	f003 030c 	and.w	r3, r3, #12
 8008182:	2b0c      	cmp	r3, #12
 8008184:	d828      	bhi.n	80081d8 <UART_SetConfig+0x128>
 8008186:	a201      	add	r2, pc, #4	; (adr r2, 800818c <UART_SetConfig+0xdc>)
 8008188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800818c:	080081c1 	.word	0x080081c1
 8008190:	080081d9 	.word	0x080081d9
 8008194:	080081d9 	.word	0x080081d9
 8008198:	080081d9 	.word	0x080081d9
 800819c:	080081cd 	.word	0x080081cd
 80081a0:	080081d9 	.word	0x080081d9
 80081a4:	080081d9 	.word	0x080081d9
 80081a8:	080081d9 	.word	0x080081d9
 80081ac:	080081c7 	.word	0x080081c7
 80081b0:	080081d9 	.word	0x080081d9
 80081b4:	080081d9 	.word	0x080081d9
 80081b8:	080081d9 	.word	0x080081d9
 80081bc:	080081d3 	.word	0x080081d3
 80081c0:	2300      	movs	r3, #0
 80081c2:	77fb      	strb	r3, [r7, #31]
 80081c4:	e118      	b.n	80083f8 <UART_SetConfig+0x348>
 80081c6:	2302      	movs	r3, #2
 80081c8:	77fb      	strb	r3, [r7, #31]
 80081ca:	e115      	b.n	80083f8 <UART_SetConfig+0x348>
 80081cc:	2304      	movs	r3, #4
 80081ce:	77fb      	strb	r3, [r7, #31]
 80081d0:	e112      	b.n	80083f8 <UART_SetConfig+0x348>
 80081d2:	2308      	movs	r3, #8
 80081d4:	77fb      	strb	r3, [r7, #31]
 80081d6:	e10f      	b.n	80083f8 <UART_SetConfig+0x348>
 80081d8:	2310      	movs	r3, #16
 80081da:	77fb      	strb	r3, [r7, #31]
 80081dc:	e10c      	b.n	80083f8 <UART_SetConfig+0x348>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	4a68      	ldr	r2, [pc, #416]	; (8008384 <UART_SetConfig+0x2d4>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d120      	bne.n	800822a <UART_SetConfig+0x17a>
 80081e8:	4b64      	ldr	r3, [pc, #400]	; (800837c <UART_SetConfig+0x2cc>)
 80081ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081ee:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80081f2:	2b30      	cmp	r3, #48	; 0x30
 80081f4:	d013      	beq.n	800821e <UART_SetConfig+0x16e>
 80081f6:	2b30      	cmp	r3, #48	; 0x30
 80081f8:	d814      	bhi.n	8008224 <UART_SetConfig+0x174>
 80081fa:	2b20      	cmp	r3, #32
 80081fc:	d009      	beq.n	8008212 <UART_SetConfig+0x162>
 80081fe:	2b20      	cmp	r3, #32
 8008200:	d810      	bhi.n	8008224 <UART_SetConfig+0x174>
 8008202:	2b00      	cmp	r3, #0
 8008204:	d002      	beq.n	800820c <UART_SetConfig+0x15c>
 8008206:	2b10      	cmp	r3, #16
 8008208:	d006      	beq.n	8008218 <UART_SetConfig+0x168>
 800820a:	e00b      	b.n	8008224 <UART_SetConfig+0x174>
 800820c:	2300      	movs	r3, #0
 800820e:	77fb      	strb	r3, [r7, #31]
 8008210:	e0f2      	b.n	80083f8 <UART_SetConfig+0x348>
 8008212:	2302      	movs	r3, #2
 8008214:	77fb      	strb	r3, [r7, #31]
 8008216:	e0ef      	b.n	80083f8 <UART_SetConfig+0x348>
 8008218:	2304      	movs	r3, #4
 800821a:	77fb      	strb	r3, [r7, #31]
 800821c:	e0ec      	b.n	80083f8 <UART_SetConfig+0x348>
 800821e:	2308      	movs	r3, #8
 8008220:	77fb      	strb	r3, [r7, #31]
 8008222:	e0e9      	b.n	80083f8 <UART_SetConfig+0x348>
 8008224:	2310      	movs	r3, #16
 8008226:	77fb      	strb	r3, [r7, #31]
 8008228:	e0e6      	b.n	80083f8 <UART_SetConfig+0x348>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	4a56      	ldr	r2, [pc, #344]	; (8008388 <UART_SetConfig+0x2d8>)
 8008230:	4293      	cmp	r3, r2
 8008232:	d120      	bne.n	8008276 <UART_SetConfig+0x1c6>
 8008234:	4b51      	ldr	r3, [pc, #324]	; (800837c <UART_SetConfig+0x2cc>)
 8008236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800823a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800823e:	2bc0      	cmp	r3, #192	; 0xc0
 8008240:	d013      	beq.n	800826a <UART_SetConfig+0x1ba>
 8008242:	2bc0      	cmp	r3, #192	; 0xc0
 8008244:	d814      	bhi.n	8008270 <UART_SetConfig+0x1c0>
 8008246:	2b80      	cmp	r3, #128	; 0x80
 8008248:	d009      	beq.n	800825e <UART_SetConfig+0x1ae>
 800824a:	2b80      	cmp	r3, #128	; 0x80
 800824c:	d810      	bhi.n	8008270 <UART_SetConfig+0x1c0>
 800824e:	2b00      	cmp	r3, #0
 8008250:	d002      	beq.n	8008258 <UART_SetConfig+0x1a8>
 8008252:	2b40      	cmp	r3, #64	; 0x40
 8008254:	d006      	beq.n	8008264 <UART_SetConfig+0x1b4>
 8008256:	e00b      	b.n	8008270 <UART_SetConfig+0x1c0>
 8008258:	2300      	movs	r3, #0
 800825a:	77fb      	strb	r3, [r7, #31]
 800825c:	e0cc      	b.n	80083f8 <UART_SetConfig+0x348>
 800825e:	2302      	movs	r3, #2
 8008260:	77fb      	strb	r3, [r7, #31]
 8008262:	e0c9      	b.n	80083f8 <UART_SetConfig+0x348>
 8008264:	2304      	movs	r3, #4
 8008266:	77fb      	strb	r3, [r7, #31]
 8008268:	e0c6      	b.n	80083f8 <UART_SetConfig+0x348>
 800826a:	2308      	movs	r3, #8
 800826c:	77fb      	strb	r3, [r7, #31]
 800826e:	e0c3      	b.n	80083f8 <UART_SetConfig+0x348>
 8008270:	2310      	movs	r3, #16
 8008272:	77fb      	strb	r3, [r7, #31]
 8008274:	e0c0      	b.n	80083f8 <UART_SetConfig+0x348>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4a44      	ldr	r2, [pc, #272]	; (800838c <UART_SetConfig+0x2dc>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d125      	bne.n	80082cc <UART_SetConfig+0x21c>
 8008280:	4b3e      	ldr	r3, [pc, #248]	; (800837c <UART_SetConfig+0x2cc>)
 8008282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008286:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800828a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800828e:	d017      	beq.n	80082c0 <UART_SetConfig+0x210>
 8008290:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008294:	d817      	bhi.n	80082c6 <UART_SetConfig+0x216>
 8008296:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800829a:	d00b      	beq.n	80082b4 <UART_SetConfig+0x204>
 800829c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80082a0:	d811      	bhi.n	80082c6 <UART_SetConfig+0x216>
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d003      	beq.n	80082ae <UART_SetConfig+0x1fe>
 80082a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082aa:	d006      	beq.n	80082ba <UART_SetConfig+0x20a>
 80082ac:	e00b      	b.n	80082c6 <UART_SetConfig+0x216>
 80082ae:	2300      	movs	r3, #0
 80082b0:	77fb      	strb	r3, [r7, #31]
 80082b2:	e0a1      	b.n	80083f8 <UART_SetConfig+0x348>
 80082b4:	2302      	movs	r3, #2
 80082b6:	77fb      	strb	r3, [r7, #31]
 80082b8:	e09e      	b.n	80083f8 <UART_SetConfig+0x348>
 80082ba:	2304      	movs	r3, #4
 80082bc:	77fb      	strb	r3, [r7, #31]
 80082be:	e09b      	b.n	80083f8 <UART_SetConfig+0x348>
 80082c0:	2308      	movs	r3, #8
 80082c2:	77fb      	strb	r3, [r7, #31]
 80082c4:	e098      	b.n	80083f8 <UART_SetConfig+0x348>
 80082c6:	2310      	movs	r3, #16
 80082c8:	77fb      	strb	r3, [r7, #31]
 80082ca:	e095      	b.n	80083f8 <UART_SetConfig+0x348>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	4a2f      	ldr	r2, [pc, #188]	; (8008390 <UART_SetConfig+0x2e0>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d125      	bne.n	8008322 <UART_SetConfig+0x272>
 80082d6:	4b29      	ldr	r3, [pc, #164]	; (800837c <UART_SetConfig+0x2cc>)
 80082d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082dc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80082e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80082e4:	d017      	beq.n	8008316 <UART_SetConfig+0x266>
 80082e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80082ea:	d817      	bhi.n	800831c <UART_SetConfig+0x26c>
 80082ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082f0:	d00b      	beq.n	800830a <UART_SetConfig+0x25a>
 80082f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082f6:	d811      	bhi.n	800831c <UART_SetConfig+0x26c>
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d003      	beq.n	8008304 <UART_SetConfig+0x254>
 80082fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008300:	d006      	beq.n	8008310 <UART_SetConfig+0x260>
 8008302:	e00b      	b.n	800831c <UART_SetConfig+0x26c>
 8008304:	2301      	movs	r3, #1
 8008306:	77fb      	strb	r3, [r7, #31]
 8008308:	e076      	b.n	80083f8 <UART_SetConfig+0x348>
 800830a:	2302      	movs	r3, #2
 800830c:	77fb      	strb	r3, [r7, #31]
 800830e:	e073      	b.n	80083f8 <UART_SetConfig+0x348>
 8008310:	2304      	movs	r3, #4
 8008312:	77fb      	strb	r3, [r7, #31]
 8008314:	e070      	b.n	80083f8 <UART_SetConfig+0x348>
 8008316:	2308      	movs	r3, #8
 8008318:	77fb      	strb	r3, [r7, #31]
 800831a:	e06d      	b.n	80083f8 <UART_SetConfig+0x348>
 800831c:	2310      	movs	r3, #16
 800831e:	77fb      	strb	r3, [r7, #31]
 8008320:	e06a      	b.n	80083f8 <UART_SetConfig+0x348>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	4a1b      	ldr	r2, [pc, #108]	; (8008394 <UART_SetConfig+0x2e4>)
 8008328:	4293      	cmp	r3, r2
 800832a:	d138      	bne.n	800839e <UART_SetConfig+0x2ee>
 800832c:	4b13      	ldr	r3, [pc, #76]	; (800837c <UART_SetConfig+0x2cc>)
 800832e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008332:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008336:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800833a:	d017      	beq.n	800836c <UART_SetConfig+0x2bc>
 800833c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008340:	d82a      	bhi.n	8008398 <UART_SetConfig+0x2e8>
 8008342:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008346:	d00b      	beq.n	8008360 <UART_SetConfig+0x2b0>
 8008348:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800834c:	d824      	bhi.n	8008398 <UART_SetConfig+0x2e8>
 800834e:	2b00      	cmp	r3, #0
 8008350:	d003      	beq.n	800835a <UART_SetConfig+0x2aa>
 8008352:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008356:	d006      	beq.n	8008366 <UART_SetConfig+0x2b6>
 8008358:	e01e      	b.n	8008398 <UART_SetConfig+0x2e8>
 800835a:	2300      	movs	r3, #0
 800835c:	77fb      	strb	r3, [r7, #31]
 800835e:	e04b      	b.n	80083f8 <UART_SetConfig+0x348>
 8008360:	2302      	movs	r3, #2
 8008362:	77fb      	strb	r3, [r7, #31]
 8008364:	e048      	b.n	80083f8 <UART_SetConfig+0x348>
 8008366:	2304      	movs	r3, #4
 8008368:	77fb      	strb	r3, [r7, #31]
 800836a:	e045      	b.n	80083f8 <UART_SetConfig+0x348>
 800836c:	2308      	movs	r3, #8
 800836e:	77fb      	strb	r3, [r7, #31]
 8008370:	e042      	b.n	80083f8 <UART_SetConfig+0x348>
 8008372:	bf00      	nop
 8008374:	efff69f3 	.word	0xefff69f3
 8008378:	40011000 	.word	0x40011000
 800837c:	40023800 	.word	0x40023800
 8008380:	40004400 	.word	0x40004400
 8008384:	40004800 	.word	0x40004800
 8008388:	40004c00 	.word	0x40004c00
 800838c:	40005000 	.word	0x40005000
 8008390:	40011400 	.word	0x40011400
 8008394:	40007800 	.word	0x40007800
 8008398:	2310      	movs	r3, #16
 800839a:	77fb      	strb	r3, [r7, #31]
 800839c:	e02c      	b.n	80083f8 <UART_SetConfig+0x348>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	4a72      	ldr	r2, [pc, #456]	; (800856c <UART_SetConfig+0x4bc>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d125      	bne.n	80083f4 <UART_SetConfig+0x344>
 80083a8:	4b71      	ldr	r3, [pc, #452]	; (8008570 <UART_SetConfig+0x4c0>)
 80083aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083ae:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80083b2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80083b6:	d017      	beq.n	80083e8 <UART_SetConfig+0x338>
 80083b8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80083bc:	d817      	bhi.n	80083ee <UART_SetConfig+0x33e>
 80083be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80083c2:	d00b      	beq.n	80083dc <UART_SetConfig+0x32c>
 80083c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80083c8:	d811      	bhi.n	80083ee <UART_SetConfig+0x33e>
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d003      	beq.n	80083d6 <UART_SetConfig+0x326>
 80083ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80083d2:	d006      	beq.n	80083e2 <UART_SetConfig+0x332>
 80083d4:	e00b      	b.n	80083ee <UART_SetConfig+0x33e>
 80083d6:	2300      	movs	r3, #0
 80083d8:	77fb      	strb	r3, [r7, #31]
 80083da:	e00d      	b.n	80083f8 <UART_SetConfig+0x348>
 80083dc:	2302      	movs	r3, #2
 80083de:	77fb      	strb	r3, [r7, #31]
 80083e0:	e00a      	b.n	80083f8 <UART_SetConfig+0x348>
 80083e2:	2304      	movs	r3, #4
 80083e4:	77fb      	strb	r3, [r7, #31]
 80083e6:	e007      	b.n	80083f8 <UART_SetConfig+0x348>
 80083e8:	2308      	movs	r3, #8
 80083ea:	77fb      	strb	r3, [r7, #31]
 80083ec:	e004      	b.n	80083f8 <UART_SetConfig+0x348>
 80083ee:	2310      	movs	r3, #16
 80083f0:	77fb      	strb	r3, [r7, #31]
 80083f2:	e001      	b.n	80083f8 <UART_SetConfig+0x348>
 80083f4:	2310      	movs	r3, #16
 80083f6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	69db      	ldr	r3, [r3, #28]
 80083fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008400:	d15b      	bne.n	80084ba <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8008402:	7ffb      	ldrb	r3, [r7, #31]
 8008404:	2b08      	cmp	r3, #8
 8008406:	d828      	bhi.n	800845a <UART_SetConfig+0x3aa>
 8008408:	a201      	add	r2, pc, #4	; (adr r2, 8008410 <UART_SetConfig+0x360>)
 800840a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800840e:	bf00      	nop
 8008410:	08008435 	.word	0x08008435
 8008414:	0800843d 	.word	0x0800843d
 8008418:	08008445 	.word	0x08008445
 800841c:	0800845b 	.word	0x0800845b
 8008420:	0800844b 	.word	0x0800844b
 8008424:	0800845b 	.word	0x0800845b
 8008428:	0800845b 	.word	0x0800845b
 800842c:	0800845b 	.word	0x0800845b
 8008430:	08008453 	.word	0x08008453
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008434:	f7fd fc8e 	bl	8005d54 <HAL_RCC_GetPCLK1Freq>
 8008438:	61b8      	str	r0, [r7, #24]
        break;
 800843a:	e013      	b.n	8008464 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800843c:	f7fd fc9e 	bl	8005d7c <HAL_RCC_GetPCLK2Freq>
 8008440:	61b8      	str	r0, [r7, #24]
        break;
 8008442:	e00f      	b.n	8008464 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008444:	4b4b      	ldr	r3, [pc, #300]	; (8008574 <UART_SetConfig+0x4c4>)
 8008446:	61bb      	str	r3, [r7, #24]
        break;
 8008448:	e00c      	b.n	8008464 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800844a:	f7fd fb71 	bl	8005b30 <HAL_RCC_GetSysClockFreq>
 800844e:	61b8      	str	r0, [r7, #24]
        break;
 8008450:	e008      	b.n	8008464 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008452:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008456:	61bb      	str	r3, [r7, #24]
        break;
 8008458:	e004      	b.n	8008464 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800845a:	2300      	movs	r3, #0
 800845c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800845e:	2301      	movs	r3, #1
 8008460:	77bb      	strb	r3, [r7, #30]
        break;
 8008462:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008464:	69bb      	ldr	r3, [r7, #24]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d074      	beq.n	8008554 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800846a:	69bb      	ldr	r3, [r7, #24]
 800846c:	005a      	lsls	r2, r3, #1
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	685b      	ldr	r3, [r3, #4]
 8008472:	085b      	lsrs	r3, r3, #1
 8008474:	441a      	add	r2, r3
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	685b      	ldr	r3, [r3, #4]
 800847a:	fbb2 f3f3 	udiv	r3, r2, r3
 800847e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008480:	693b      	ldr	r3, [r7, #16]
 8008482:	2b0f      	cmp	r3, #15
 8008484:	d916      	bls.n	80084b4 <UART_SetConfig+0x404>
 8008486:	693b      	ldr	r3, [r7, #16]
 8008488:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800848c:	d212      	bcs.n	80084b4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	b29b      	uxth	r3, r3
 8008492:	f023 030f 	bic.w	r3, r3, #15
 8008496:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008498:	693b      	ldr	r3, [r7, #16]
 800849a:	085b      	lsrs	r3, r3, #1
 800849c:	b29b      	uxth	r3, r3
 800849e:	f003 0307 	and.w	r3, r3, #7
 80084a2:	b29a      	uxth	r2, r3
 80084a4:	89fb      	ldrh	r3, [r7, #14]
 80084a6:	4313      	orrs	r3, r2
 80084a8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	89fa      	ldrh	r2, [r7, #14]
 80084b0:	60da      	str	r2, [r3, #12]
 80084b2:	e04f      	b.n	8008554 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80084b4:	2301      	movs	r3, #1
 80084b6:	77bb      	strb	r3, [r7, #30]
 80084b8:	e04c      	b.n	8008554 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80084ba:	7ffb      	ldrb	r3, [r7, #31]
 80084bc:	2b08      	cmp	r3, #8
 80084be:	d828      	bhi.n	8008512 <UART_SetConfig+0x462>
 80084c0:	a201      	add	r2, pc, #4	; (adr r2, 80084c8 <UART_SetConfig+0x418>)
 80084c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084c6:	bf00      	nop
 80084c8:	080084ed 	.word	0x080084ed
 80084cc:	080084f5 	.word	0x080084f5
 80084d0:	080084fd 	.word	0x080084fd
 80084d4:	08008513 	.word	0x08008513
 80084d8:	08008503 	.word	0x08008503
 80084dc:	08008513 	.word	0x08008513
 80084e0:	08008513 	.word	0x08008513
 80084e4:	08008513 	.word	0x08008513
 80084e8:	0800850b 	.word	0x0800850b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80084ec:	f7fd fc32 	bl	8005d54 <HAL_RCC_GetPCLK1Freq>
 80084f0:	61b8      	str	r0, [r7, #24]
        break;
 80084f2:	e013      	b.n	800851c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80084f4:	f7fd fc42 	bl	8005d7c <HAL_RCC_GetPCLK2Freq>
 80084f8:	61b8      	str	r0, [r7, #24]
        break;
 80084fa:	e00f      	b.n	800851c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80084fc:	4b1d      	ldr	r3, [pc, #116]	; (8008574 <UART_SetConfig+0x4c4>)
 80084fe:	61bb      	str	r3, [r7, #24]
        break;
 8008500:	e00c      	b.n	800851c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008502:	f7fd fb15 	bl	8005b30 <HAL_RCC_GetSysClockFreq>
 8008506:	61b8      	str	r0, [r7, #24]
        break;
 8008508:	e008      	b.n	800851c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800850a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800850e:	61bb      	str	r3, [r7, #24]
        break;
 8008510:	e004      	b.n	800851c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8008512:	2300      	movs	r3, #0
 8008514:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008516:	2301      	movs	r3, #1
 8008518:	77bb      	strb	r3, [r7, #30]
        break;
 800851a:	bf00      	nop
    }

    if (pclk != 0U)
 800851c:	69bb      	ldr	r3, [r7, #24]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d018      	beq.n	8008554 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	685b      	ldr	r3, [r3, #4]
 8008526:	085a      	lsrs	r2, r3, #1
 8008528:	69bb      	ldr	r3, [r7, #24]
 800852a:	441a      	add	r2, r3
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	685b      	ldr	r3, [r3, #4]
 8008530:	fbb2 f3f3 	udiv	r3, r2, r3
 8008534:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008536:	693b      	ldr	r3, [r7, #16]
 8008538:	2b0f      	cmp	r3, #15
 800853a:	d909      	bls.n	8008550 <UART_SetConfig+0x4a0>
 800853c:	693b      	ldr	r3, [r7, #16]
 800853e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008542:	d205      	bcs.n	8008550 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008544:	693b      	ldr	r3, [r7, #16]
 8008546:	b29a      	uxth	r2, r3
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	60da      	str	r2, [r3, #12]
 800854e:	e001      	b.n	8008554 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008550:	2301      	movs	r3, #1
 8008552:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2200      	movs	r2, #0
 8008558:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2200      	movs	r2, #0
 800855e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8008560:	7fbb      	ldrb	r3, [r7, #30]
}
 8008562:	4618      	mov	r0, r3
 8008564:	3720      	adds	r7, #32
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}
 800856a:	bf00      	nop
 800856c:	40007c00 	.word	0x40007c00
 8008570:	40023800 	.word	0x40023800
 8008574:	00f42400 	.word	0x00f42400

08008578 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008578:	b480      	push	{r7}
 800857a:	b083      	sub	sp, #12
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008584:	f003 0301 	and.w	r3, r3, #1
 8008588:	2b00      	cmp	r3, #0
 800858a:	d00a      	beq.n	80085a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	685b      	ldr	r3, [r3, #4]
 8008592:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	430a      	orrs	r2, r1
 80085a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085a6:	f003 0302 	and.w	r3, r3, #2
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d00a      	beq.n	80085c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	685b      	ldr	r3, [r3, #4]
 80085b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	430a      	orrs	r2, r1
 80085c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085c8:	f003 0304 	and.w	r3, r3, #4
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d00a      	beq.n	80085e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	685b      	ldr	r3, [r3, #4]
 80085d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	430a      	orrs	r2, r1
 80085e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ea:	f003 0308 	and.w	r3, r3, #8
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d00a      	beq.n	8008608 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	685b      	ldr	r3, [r3, #4]
 80085f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	430a      	orrs	r2, r1
 8008606:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800860c:	f003 0310 	and.w	r3, r3, #16
 8008610:	2b00      	cmp	r3, #0
 8008612:	d00a      	beq.n	800862a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	689b      	ldr	r3, [r3, #8]
 800861a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	430a      	orrs	r2, r1
 8008628:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800862e:	f003 0320 	and.w	r3, r3, #32
 8008632:	2b00      	cmp	r3, #0
 8008634:	d00a      	beq.n	800864c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	689b      	ldr	r3, [r3, #8]
 800863c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	430a      	orrs	r2, r1
 800864a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008654:	2b00      	cmp	r3, #0
 8008656:	d01a      	beq.n	800868e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	685b      	ldr	r3, [r3, #4]
 800865e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	430a      	orrs	r2, r1
 800866c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008672:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008676:	d10a      	bne.n	800868e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	685b      	ldr	r3, [r3, #4]
 800867e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	430a      	orrs	r2, r1
 800868c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008696:	2b00      	cmp	r3, #0
 8008698:	d00a      	beq.n	80086b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	685b      	ldr	r3, [r3, #4]
 80086a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	430a      	orrs	r2, r1
 80086ae:	605a      	str	r2, [r3, #4]
  }
}
 80086b0:	bf00      	nop
 80086b2:	370c      	adds	r7, #12
 80086b4:	46bd      	mov	sp, r7
 80086b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ba:	4770      	bx	lr

080086bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b086      	sub	sp, #24
 80086c0:	af02      	add	r7, sp, #8
 80086c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2200      	movs	r2, #0
 80086c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80086cc:	f7fb fde8 	bl	80042a0 <HAL_GetTick>
 80086d0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f003 0308 	and.w	r3, r3, #8
 80086dc:	2b08      	cmp	r3, #8
 80086de:	d10e      	bne.n	80086fe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80086e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80086e4:	9300      	str	r3, [sp, #0]
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	2200      	movs	r2, #0
 80086ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f000 f831 	bl	8008756 <UART_WaitOnFlagUntilTimeout>
 80086f4:	4603      	mov	r3, r0
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d001      	beq.n	80086fe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80086fa:	2303      	movs	r3, #3
 80086fc:	e027      	b.n	800874e <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f003 0304 	and.w	r3, r3, #4
 8008708:	2b04      	cmp	r3, #4
 800870a:	d10e      	bne.n	800872a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800870c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008710:	9300      	str	r3, [sp, #0]
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	2200      	movs	r2, #0
 8008716:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f000 f81b 	bl	8008756 <UART_WaitOnFlagUntilTimeout>
 8008720:	4603      	mov	r3, r0
 8008722:	2b00      	cmp	r3, #0
 8008724:	d001      	beq.n	800872a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008726:	2303      	movs	r3, #3
 8008728:	e011      	b.n	800874e <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2220      	movs	r2, #32
 800872e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2220      	movs	r2, #32
 8008734:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2200      	movs	r2, #0
 800873c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2200      	movs	r2, #0
 8008742:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2200      	movs	r2, #0
 8008748:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800874c:	2300      	movs	r3, #0
}
 800874e:	4618      	mov	r0, r3
 8008750:	3710      	adds	r7, #16
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}

08008756 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008756:	b580      	push	{r7, lr}
 8008758:	b09c      	sub	sp, #112	; 0x70
 800875a:	af00      	add	r7, sp, #0
 800875c:	60f8      	str	r0, [r7, #12]
 800875e:	60b9      	str	r1, [r7, #8]
 8008760:	603b      	str	r3, [r7, #0]
 8008762:	4613      	mov	r3, r2
 8008764:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008766:	e0a7      	b.n	80088b8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008768:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800876a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800876e:	f000 80a3 	beq.w	80088b8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008772:	f7fb fd95 	bl	80042a0 <HAL_GetTick>
 8008776:	4602      	mov	r2, r0
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	1ad3      	subs	r3, r2, r3
 800877c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800877e:	429a      	cmp	r2, r3
 8008780:	d302      	bcc.n	8008788 <UART_WaitOnFlagUntilTimeout+0x32>
 8008782:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008784:	2b00      	cmp	r3, #0
 8008786:	d13f      	bne.n	8008808 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800878e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008790:	e853 3f00 	ldrex	r3, [r3]
 8008794:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008796:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008798:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800879c:	667b      	str	r3, [r7, #100]	; 0x64
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	461a      	mov	r2, r3
 80087a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80087a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80087a8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087aa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80087ac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80087ae:	e841 2300 	strex	r3, r2, [r1]
 80087b2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80087b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d1e6      	bne.n	8008788 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	3308      	adds	r3, #8
 80087c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087c4:	e853 3f00 	ldrex	r3, [r3]
 80087c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80087ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087cc:	f023 0301 	bic.w	r3, r3, #1
 80087d0:	663b      	str	r3, [r7, #96]	; 0x60
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	3308      	adds	r3, #8
 80087d8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80087da:	64ba      	str	r2, [r7, #72]	; 0x48
 80087dc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087de:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80087e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80087e2:	e841 2300 	strex	r3, r2, [r1]
 80087e6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80087e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d1e5      	bne.n	80087ba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	2220      	movs	r2, #32
 80087f2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	2220      	movs	r2, #32
 80087f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	2200      	movs	r2, #0
 8008800:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8008804:	2303      	movs	r3, #3
 8008806:	e068      	b.n	80088da <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f003 0304 	and.w	r3, r3, #4
 8008812:	2b00      	cmp	r3, #0
 8008814:	d050      	beq.n	80088b8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	69db      	ldr	r3, [r3, #28]
 800881c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008820:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008824:	d148      	bne.n	80088b8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800882e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008838:	e853 3f00 	ldrex	r3, [r3]
 800883c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800883e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008840:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008844:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	461a      	mov	r2, r3
 800884c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800884e:	637b      	str	r3, [r7, #52]	; 0x34
 8008850:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008852:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008854:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008856:	e841 2300 	strex	r3, r2, [r1]
 800885a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800885c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800885e:	2b00      	cmp	r3, #0
 8008860:	d1e6      	bne.n	8008830 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	3308      	adds	r3, #8
 8008868:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	e853 3f00 	ldrex	r3, [r3]
 8008870:	613b      	str	r3, [r7, #16]
   return(result);
 8008872:	693b      	ldr	r3, [r7, #16]
 8008874:	f023 0301 	bic.w	r3, r3, #1
 8008878:	66bb      	str	r3, [r7, #104]	; 0x68
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	3308      	adds	r3, #8
 8008880:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008882:	623a      	str	r2, [r7, #32]
 8008884:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008886:	69f9      	ldr	r1, [r7, #28]
 8008888:	6a3a      	ldr	r2, [r7, #32]
 800888a:	e841 2300 	strex	r3, r2, [r1]
 800888e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008890:	69bb      	ldr	r3, [r7, #24]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d1e5      	bne.n	8008862 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	2220      	movs	r2, #32
 800889a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	2220      	movs	r2, #32
 80088a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	2220      	movs	r2, #32
 80088a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	2200      	movs	r2, #0
 80088b0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80088b4:	2303      	movs	r3, #3
 80088b6:	e010      	b.n	80088da <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	69da      	ldr	r2, [r3, #28]
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	4013      	ands	r3, r2
 80088c2:	68ba      	ldr	r2, [r7, #8]
 80088c4:	429a      	cmp	r2, r3
 80088c6:	bf0c      	ite	eq
 80088c8:	2301      	moveq	r3, #1
 80088ca:	2300      	movne	r3, #0
 80088cc:	b2db      	uxtb	r3, r3
 80088ce:	461a      	mov	r2, r3
 80088d0:	79fb      	ldrb	r3, [r7, #7]
 80088d2:	429a      	cmp	r2, r3
 80088d4:	f43f af48 	beq.w	8008768 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80088d8:	2300      	movs	r3, #0
}
 80088da:	4618      	mov	r0, r3
 80088dc:	3770      	adds	r7, #112	; 0x70
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}
	...

080088e4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b096      	sub	sp, #88	; 0x58
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	60f8      	str	r0, [r7, #12]
 80088ec:	60b9      	str	r1, [r7, #8]
 80088ee:	4613      	mov	r3, r2
 80088f0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	68ba      	ldr	r2, [r7, #8]
 80088f6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	88fa      	ldrh	r2, [r7, #6]
 80088fc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	2200      	movs	r2, #0
 8008904:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	2222      	movs	r2, #34	; 0x22
 800890c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008914:	2b00      	cmp	r3, #0
 8008916:	d028      	beq.n	800896a <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800891c:	4a3e      	ldr	r2, [pc, #248]	; (8008a18 <UART_Start_Receive_DMA+0x134>)
 800891e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008924:	4a3d      	ldr	r2, [pc, #244]	; (8008a1c <UART_Start_Receive_DMA+0x138>)
 8008926:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800892c:	4a3c      	ldr	r2, [pc, #240]	; (8008a20 <UART_Start_Receive_DMA+0x13c>)
 800892e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008934:	2200      	movs	r2, #0
 8008936:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	3324      	adds	r3, #36	; 0x24
 8008942:	4619      	mov	r1, r3
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008948:	461a      	mov	r2, r3
 800894a:	88fb      	ldrh	r3, [r7, #6]
 800894c:	f7fb fe68 	bl	8004620 <HAL_DMA_Start_IT>
 8008950:	4603      	mov	r3, r0
 8008952:	2b00      	cmp	r3, #0
 8008954:	d009      	beq.n	800896a <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	2210      	movs	r2, #16
 800895a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	2220      	movs	r2, #32
 8008962:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 8008966:	2301      	movs	r3, #1
 8008968:	e051      	b.n	8008a0e <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	691b      	ldr	r3, [r3, #16]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d018      	beq.n	80089a4 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008978:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800897a:	e853 3f00 	ldrex	r3, [r3]
 800897e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008982:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008986:	657b      	str	r3, [r7, #84]	; 0x54
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	461a      	mov	r2, r3
 800898e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008990:	64bb      	str	r3, [r7, #72]	; 0x48
 8008992:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008994:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008996:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008998:	e841 2300 	strex	r3, r2, [r1]
 800899c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800899e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d1e6      	bne.n	8008972 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	3308      	adds	r3, #8
 80089aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ae:	e853 3f00 	ldrex	r3, [r3]
 80089b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80089b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089b6:	f043 0301 	orr.w	r3, r3, #1
 80089ba:	653b      	str	r3, [r7, #80]	; 0x50
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	3308      	adds	r3, #8
 80089c2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80089c4:	637a      	str	r2, [r7, #52]	; 0x34
 80089c6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80089ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80089cc:	e841 2300 	strex	r3, r2, [r1]
 80089d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80089d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d1e5      	bne.n	80089a4 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	3308      	adds	r3, #8
 80089de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089e0:	697b      	ldr	r3, [r7, #20]
 80089e2:	e853 3f00 	ldrex	r3, [r3]
 80089e6:	613b      	str	r3, [r7, #16]
   return(result);
 80089e8:	693b      	ldr	r3, [r7, #16]
 80089ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	3308      	adds	r3, #8
 80089f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80089f8:	623a      	str	r2, [r7, #32]
 80089fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089fc:	69f9      	ldr	r1, [r7, #28]
 80089fe:	6a3a      	ldr	r2, [r7, #32]
 8008a00:	e841 2300 	strex	r3, r2, [r1]
 8008a04:	61bb      	str	r3, [r7, #24]
   return(result);
 8008a06:	69bb      	ldr	r3, [r7, #24]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d1e5      	bne.n	80089d8 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8008a0c:	2300      	movs	r3, #0
}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	3758      	adds	r7, #88	; 0x58
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}
 8008a16:	bf00      	nop
 8008a18:	08008beb 	.word	0x08008beb
 8008a1c:	08008d13 	.word	0x08008d13
 8008a20:	08008d51 	.word	0x08008d51

08008a24 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008a24:	b480      	push	{r7}
 8008a26:	b089      	sub	sp, #36	; 0x24
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	e853 3f00 	ldrex	r3, [r3]
 8008a38:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008a40:	61fb      	str	r3, [r7, #28]
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	461a      	mov	r2, r3
 8008a48:	69fb      	ldr	r3, [r7, #28]
 8008a4a:	61bb      	str	r3, [r7, #24]
 8008a4c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a4e:	6979      	ldr	r1, [r7, #20]
 8008a50:	69ba      	ldr	r2, [r7, #24]
 8008a52:	e841 2300 	strex	r3, r2, [r1]
 8008a56:	613b      	str	r3, [r7, #16]
   return(result);
 8008a58:	693b      	ldr	r3, [r7, #16]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d1e6      	bne.n	8008a2c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2220      	movs	r2, #32
 8008a62:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8008a64:	bf00      	nop
 8008a66:	3724      	adds	r7, #36	; 0x24
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6e:	4770      	bx	lr

08008a70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008a70:	b480      	push	{r7}
 8008a72:	b095      	sub	sp, #84	; 0x54
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a80:	e853 3f00 	ldrex	r3, [r3]
 8008a84:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a88:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008a8c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	461a      	mov	r2, r3
 8008a94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a96:	643b      	str	r3, [r7, #64]	; 0x40
 8008a98:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a9a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008a9c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008a9e:	e841 2300 	strex	r3, r2, [r1]
 8008aa2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d1e6      	bne.n	8008a78 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	3308      	adds	r3, #8
 8008ab0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ab2:	6a3b      	ldr	r3, [r7, #32]
 8008ab4:	e853 3f00 	ldrex	r3, [r3]
 8008ab8:	61fb      	str	r3, [r7, #28]
   return(result);
 8008aba:	69fb      	ldr	r3, [r7, #28]
 8008abc:	f023 0301 	bic.w	r3, r3, #1
 8008ac0:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	3308      	adds	r3, #8
 8008ac8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008aca:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008acc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ace:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008ad0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ad2:	e841 2300 	strex	r3, r2, [r1]
 8008ad6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d1e5      	bne.n	8008aaa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ae2:	2b01      	cmp	r3, #1
 8008ae4:	d118      	bne.n	8008b18 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	e853 3f00 	ldrex	r3, [r3]
 8008af2:	60bb      	str	r3, [r7, #8]
   return(result);
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	f023 0310 	bic.w	r3, r3, #16
 8008afa:	647b      	str	r3, [r7, #68]	; 0x44
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	461a      	mov	r2, r3
 8008b02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b04:	61bb      	str	r3, [r7, #24]
 8008b06:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b08:	6979      	ldr	r1, [r7, #20]
 8008b0a:	69ba      	ldr	r2, [r7, #24]
 8008b0c:	e841 2300 	strex	r3, r2, [r1]
 8008b10:	613b      	str	r3, [r7, #16]
   return(result);
 8008b12:	693b      	ldr	r3, [r7, #16]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d1e6      	bne.n	8008ae6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2220      	movs	r2, #32
 8008b1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2200      	movs	r2, #0
 8008b24:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2200      	movs	r2, #0
 8008b2a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008b2c:	bf00      	nop
 8008b2e:	3754      	adds	r7, #84	; 0x54
 8008b30:	46bd      	mov	sp, r7
 8008b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b36:	4770      	bx	lr

08008b38 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b090      	sub	sp, #64	; 0x40
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b44:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	69db      	ldr	r3, [r3, #28]
 8008b4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b4e:	d037      	beq.n	8008bc0 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8008b50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b52:	2200      	movs	r2, #0
 8008b54:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008b58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	3308      	adds	r3, #8
 8008b5e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b62:	e853 3f00 	ldrex	r3, [r3]
 8008b66:	623b      	str	r3, [r7, #32]
   return(result);
 8008b68:	6a3b      	ldr	r3, [r7, #32]
 8008b6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008b70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	3308      	adds	r3, #8
 8008b76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b78:	633a      	str	r2, [r7, #48]	; 0x30
 8008b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b7c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008b7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b80:	e841 2300 	strex	r3, r2, [r1]
 8008b84:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d1e5      	bne.n	8008b58 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008b8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b92:	693b      	ldr	r3, [r7, #16]
 8008b94:	e853 3f00 	ldrex	r3, [r3]
 8008b98:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ba0:	637b      	str	r3, [r7, #52]	; 0x34
 8008ba2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	461a      	mov	r2, r3
 8008ba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008baa:	61fb      	str	r3, [r7, #28]
 8008bac:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bae:	69b9      	ldr	r1, [r7, #24]
 8008bb0:	69fa      	ldr	r2, [r7, #28]
 8008bb2:	e841 2300 	strex	r3, r2, [r1]
 8008bb6:	617b      	str	r3, [r7, #20]
   return(result);
 8008bb8:	697b      	ldr	r3, [r7, #20]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d1e6      	bne.n	8008b8c <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008bbe:	e002      	b.n	8008bc6 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8008bc0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008bc2:	f7ff fa2d 	bl	8008020 <HAL_UART_TxCpltCallback>
}
 8008bc6:	bf00      	nop
 8008bc8:	3740      	adds	r7, #64	; 0x40
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}

08008bce <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008bce:	b580      	push	{r7, lr}
 8008bd0:	b084      	sub	sp, #16
 8008bd2:	af00      	add	r7, sp, #0
 8008bd4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bda:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008bdc:	68f8      	ldr	r0, [r7, #12]
 8008bde:	f7ff fa29 	bl	8008034 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008be2:	bf00      	nop
 8008be4:	3710      	adds	r7, #16
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd80      	pop	{r7, pc}

08008bea <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008bea:	b580      	push	{r7, lr}
 8008bec:	b09c      	sub	sp, #112	; 0x70
 8008bee:	af00      	add	r7, sp, #0
 8008bf0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bf6:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	69db      	ldr	r3, [r3, #28]
 8008bfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c00:	d071      	beq.n	8008ce6 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8008c02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c04:	2200      	movs	r2, #0
 8008c06:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008c0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c12:	e853 3f00 	ldrex	r3, [r3]
 8008c16:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008c18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c1e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008c20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	461a      	mov	r2, r3
 8008c26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008c28:	65bb      	str	r3, [r7, #88]	; 0x58
 8008c2a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c2c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008c2e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008c30:	e841 2300 	strex	r3, r2, [r1]
 8008c34:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008c36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d1e6      	bne.n	8008c0a <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	3308      	adds	r3, #8
 8008c42:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c46:	e853 3f00 	ldrex	r3, [r3]
 8008c4a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c4e:	f023 0301 	bic.w	r3, r3, #1
 8008c52:	667b      	str	r3, [r7, #100]	; 0x64
 8008c54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	3308      	adds	r3, #8
 8008c5a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008c5c:	647a      	str	r2, [r7, #68]	; 0x44
 8008c5e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c60:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008c62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008c64:	e841 2300 	strex	r3, r2, [r1]
 8008c68:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008c6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d1e5      	bne.n	8008c3c <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	3308      	adds	r3, #8
 8008c76:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c7a:	e853 3f00 	ldrex	r3, [r3]
 8008c7e:	623b      	str	r3, [r7, #32]
   return(result);
 8008c80:	6a3b      	ldr	r3, [r7, #32]
 8008c82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c86:	663b      	str	r3, [r7, #96]	; 0x60
 8008c88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	3308      	adds	r3, #8
 8008c8e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008c90:	633a      	str	r2, [r7, #48]	; 0x30
 8008c92:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c94:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008c96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c98:	e841 2300 	strex	r3, r2, [r1]
 8008c9c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d1e5      	bne.n	8008c70 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008ca4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ca6:	2220      	movs	r2, #32
 8008ca8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008cae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008cb0:	2b01      	cmp	r3, #1
 8008cb2:	d118      	bne.n	8008ce6 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cba:	693b      	ldr	r3, [r7, #16]
 8008cbc:	e853 3f00 	ldrex	r3, [r3]
 8008cc0:	60fb      	str	r3, [r7, #12]
   return(result);
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	f023 0310 	bic.w	r3, r3, #16
 8008cc8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008cca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	461a      	mov	r2, r3
 8008cd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008cd2:	61fb      	str	r3, [r7, #28]
 8008cd4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cd6:	69b9      	ldr	r1, [r7, #24]
 8008cd8:	69fa      	ldr	r2, [r7, #28]
 8008cda:	e841 2300 	strex	r3, r2, [r1]
 8008cde:	617b      	str	r3, [r7, #20]
   return(result);
 8008ce0:	697b      	ldr	r3, [r7, #20]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d1e6      	bne.n	8008cb4 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ce6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ce8:	2200      	movs	r2, #0
 8008cea:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008cee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008cf0:	2b01      	cmp	r3, #1
 8008cf2:	d107      	bne.n	8008d04 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008cf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008cf6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008cfa:	4619      	mov	r1, r3
 8008cfc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008cfe:	f7ff f9c1 	bl	8008084 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008d02:	e002      	b.n	8008d0a <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8008d04:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008d06:	f7ff f99f 	bl	8008048 <HAL_UART_RxCpltCallback>
}
 8008d0a:	bf00      	nop
 8008d0c:	3770      	adds	r7, #112	; 0x70
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}

08008d12 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008d12:	b580      	push	{r7, lr}
 8008d14:	b084      	sub	sp, #16
 8008d16:	af00      	add	r7, sp, #0
 8008d18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d1e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	2201      	movs	r2, #1
 8008d24:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d2a:	2b01      	cmp	r3, #1
 8008d2c:	d109      	bne.n	8008d42 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008d34:	085b      	lsrs	r3, r3, #1
 8008d36:	b29b      	uxth	r3, r3
 8008d38:	4619      	mov	r1, r3
 8008d3a:	68f8      	ldr	r0, [r7, #12]
 8008d3c:	f7ff f9a2 	bl	8008084 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008d40:	e002      	b.n	8008d48 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8008d42:	68f8      	ldr	r0, [r7, #12]
 8008d44:	f7ff f98a 	bl	800805c <HAL_UART_RxHalfCpltCallback>
}
 8008d48:	bf00      	nop
 8008d4a:	3710      	adds	r7, #16
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}

08008d50 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b086      	sub	sp, #24
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d5c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008d5e:	697b      	ldr	r3, [r7, #20]
 8008d60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008d62:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008d64:	697b      	ldr	r3, [r7, #20]
 8008d66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008d6a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008d6c:	697b      	ldr	r3, [r7, #20]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	689b      	ldr	r3, [r3, #8]
 8008d72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d76:	2b80      	cmp	r3, #128	; 0x80
 8008d78:	d109      	bne.n	8008d8e <UART_DMAError+0x3e>
 8008d7a:	693b      	ldr	r3, [r7, #16]
 8008d7c:	2b21      	cmp	r3, #33	; 0x21
 8008d7e:	d106      	bne.n	8008d8e <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	2200      	movs	r2, #0
 8008d84:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8008d88:	6978      	ldr	r0, [r7, #20]
 8008d8a:	f7ff fe4b 	bl	8008a24 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008d8e:	697b      	ldr	r3, [r7, #20]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	689b      	ldr	r3, [r3, #8]
 8008d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d98:	2b40      	cmp	r3, #64	; 0x40
 8008d9a:	d109      	bne.n	8008db0 <UART_DMAError+0x60>
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	2b22      	cmp	r3, #34	; 0x22
 8008da0:	d106      	bne.n	8008db0 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008da2:	697b      	ldr	r3, [r7, #20]
 8008da4:	2200      	movs	r2, #0
 8008da6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8008daa:	6978      	ldr	r0, [r7, #20]
 8008dac:	f7ff fe60 	bl	8008a70 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008db0:	697b      	ldr	r3, [r7, #20]
 8008db2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008db6:	f043 0210 	orr.w	r2, r3, #16
 8008dba:	697b      	ldr	r3, [r7, #20]
 8008dbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008dc0:	6978      	ldr	r0, [r7, #20]
 8008dc2:	f7ff f955 	bl	8008070 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008dc6:	bf00      	nop
 8008dc8:	3718      	adds	r7, #24
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}

08008dce <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008dce:	b580      	push	{r7, lr}
 8008dd0:	b084      	sub	sp, #16
 8008dd2:	af00      	add	r7, sp, #0
 8008dd4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dda:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	2200      	movs	r2, #0
 8008de0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	2200      	movs	r2, #0
 8008de8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008dec:	68f8      	ldr	r0, [r7, #12]
 8008dee:	f7ff f93f 	bl	8008070 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008df2:	bf00      	nop
 8008df4:	3710      	adds	r7, #16
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bd80      	pop	{r7, pc}

08008dfa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008dfa:	b580      	push	{r7, lr}
 8008dfc:	b088      	sub	sp, #32
 8008dfe:	af00      	add	r7, sp, #0
 8008e00:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	e853 3f00 	ldrex	r3, [r3]
 8008e0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e16:	61fb      	str	r3, [r7, #28]
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	461a      	mov	r2, r3
 8008e1e:	69fb      	ldr	r3, [r7, #28]
 8008e20:	61bb      	str	r3, [r7, #24]
 8008e22:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e24:	6979      	ldr	r1, [r7, #20]
 8008e26:	69ba      	ldr	r2, [r7, #24]
 8008e28:	e841 2300 	strex	r3, r2, [r1]
 8008e2c:	613b      	str	r3, [r7, #16]
   return(result);
 8008e2e:	693b      	ldr	r3, [r7, #16]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d1e6      	bne.n	8008e02 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2220      	movs	r2, #32
 8008e38:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	f7ff f8ed 	bl	8008020 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e46:	bf00      	nop
 8008e48:	3720      	adds	r7, #32
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}
	...

08008e50 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008e50:	b084      	sub	sp, #16
 8008e52:	b580      	push	{r7, lr}
 8008e54:	b084      	sub	sp, #16
 8008e56:	af00      	add	r7, sp, #0
 8008e58:	6078      	str	r0, [r7, #4]
 8008e5a:	f107 001c 	add.w	r0, r7, #28
 8008e5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e64:	2b01      	cmp	r3, #1
 8008e66:	d120      	bne.n	8008eaa <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e6c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	68da      	ldr	r2, [r3, #12]
 8008e78:	4b20      	ldr	r3, [pc, #128]	; (8008efc <USB_CoreInit+0xac>)
 8008e7a:	4013      	ands	r3, r2
 8008e7c:	687a      	ldr	r2, [r7, #4]
 8008e7e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	68db      	ldr	r3, [r3, #12]
 8008e84:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008e8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e8e:	2b01      	cmp	r3, #1
 8008e90:	d105      	bne.n	8008e9e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	68db      	ldr	r3, [r3, #12]
 8008e96:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f000 fa96 	bl	80093d0 <USB_CoreReset>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	73fb      	strb	r3, [r7, #15]
 8008ea8:	e010      	b.n	8008ecc <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	68db      	ldr	r3, [r3, #12]
 8008eae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f000 fa8a 	bl	80093d0 <USB_CoreReset>
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ec4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8008ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ece:	2b01      	cmp	r3, #1
 8008ed0:	d10b      	bne.n	8008eea <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	689b      	ldr	r3, [r3, #8]
 8008ed6:	f043 0206 	orr.w	r2, r3, #6
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	689b      	ldr	r3, [r3, #8]
 8008ee2:	f043 0220 	orr.w	r2, r3, #32
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eec:	4618      	mov	r0, r3
 8008eee:	3710      	adds	r7, #16
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008ef6:	b004      	add	sp, #16
 8008ef8:	4770      	bx	lr
 8008efa:	bf00      	nop
 8008efc:	ffbdffbf 	.word	0xffbdffbf

08008f00 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b083      	sub	sp, #12
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	689b      	ldr	r3, [r3, #8]
 8008f0c:	f023 0201 	bic.w	r2, r3, #1
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008f14:	2300      	movs	r3, #0
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	370c      	adds	r7, #12
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f20:	4770      	bx	lr

08008f22 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008f22:	b580      	push	{r7, lr}
 8008f24:	b084      	sub	sp, #16
 8008f26:	af00      	add	r7, sp, #0
 8008f28:	6078      	str	r0, [r7, #4]
 8008f2a:	460b      	mov	r3, r1
 8008f2c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	68db      	ldr	r3, [r3, #12]
 8008f36:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008f3e:	78fb      	ldrb	r3, [r7, #3]
 8008f40:	2b01      	cmp	r3, #1
 8008f42:	d115      	bne.n	8008f70 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	68db      	ldr	r3, [r3, #12]
 8008f48:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008f50:	2001      	movs	r0, #1
 8008f52:	f7fb f9b1 	bl	80042b8 <HAL_Delay>
      ms++;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	3301      	adds	r3, #1
 8008f5a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f000 fa29 	bl	80093b4 <USB_GetMode>
 8008f62:	4603      	mov	r3, r0
 8008f64:	2b01      	cmp	r3, #1
 8008f66:	d01e      	beq.n	8008fa6 <USB_SetCurrentMode+0x84>
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	2b31      	cmp	r3, #49	; 0x31
 8008f6c:	d9f0      	bls.n	8008f50 <USB_SetCurrentMode+0x2e>
 8008f6e:	e01a      	b.n	8008fa6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008f70:	78fb      	ldrb	r3, [r7, #3]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d115      	bne.n	8008fa2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	68db      	ldr	r3, [r3, #12]
 8008f7a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008f82:	2001      	movs	r0, #1
 8008f84:	f7fb f998 	bl	80042b8 <HAL_Delay>
      ms++;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	3301      	adds	r3, #1
 8008f8c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f000 fa10 	bl	80093b4 <USB_GetMode>
 8008f94:	4603      	mov	r3, r0
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d005      	beq.n	8008fa6 <USB_SetCurrentMode+0x84>
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	2b31      	cmp	r3, #49	; 0x31
 8008f9e:	d9f0      	bls.n	8008f82 <USB_SetCurrentMode+0x60>
 8008fa0:	e001      	b.n	8008fa6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	e005      	b.n	8008fb2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	2b32      	cmp	r3, #50	; 0x32
 8008faa:	d101      	bne.n	8008fb0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008fac:	2301      	movs	r3, #1
 8008fae:	e000      	b.n	8008fb2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008fb0:	2300      	movs	r3, #0
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	3710      	adds	r7, #16
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}
	...

08008fbc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008fbc:	b084      	sub	sp, #16
 8008fbe:	b580      	push	{r7, lr}
 8008fc0:	b086      	sub	sp, #24
 8008fc2:	af00      	add	r7, sp, #0
 8008fc4:	6078      	str	r0, [r7, #4]
 8008fc6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008fca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008fce:	2300      	movs	r3, #0
 8008fd0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	613b      	str	r3, [r7, #16]
 8008fda:	e009      	b.n	8008ff0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008fdc:	687a      	ldr	r2, [r7, #4]
 8008fde:	693b      	ldr	r3, [r7, #16]
 8008fe0:	3340      	adds	r3, #64	; 0x40
 8008fe2:	009b      	lsls	r3, r3, #2
 8008fe4:	4413      	add	r3, r2
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008fea:	693b      	ldr	r3, [r7, #16]
 8008fec:	3301      	adds	r3, #1
 8008fee:	613b      	str	r3, [r7, #16]
 8008ff0:	693b      	ldr	r3, [r7, #16]
 8008ff2:	2b0e      	cmp	r3, #14
 8008ff4:	d9f2      	bls.n	8008fdc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008ff6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d11c      	bne.n	8009036 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009002:	685b      	ldr	r3, [r3, #4]
 8009004:	68fa      	ldr	r2, [r7, #12]
 8009006:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800900a:	f043 0302 	orr.w	r3, r3, #2
 800900e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009014:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	601a      	str	r2, [r3, #0]
 8009034:	e005      	b.n	8009042 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800903a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009048:	461a      	mov	r2, r3
 800904a:	2300      	movs	r3, #0
 800904c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009054:	4619      	mov	r1, r3
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800905c:	461a      	mov	r2, r3
 800905e:	680b      	ldr	r3, [r1, #0]
 8009060:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009064:	2b01      	cmp	r3, #1
 8009066:	d10c      	bne.n	8009082 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800906a:	2b00      	cmp	r3, #0
 800906c:	d104      	bne.n	8009078 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800906e:	2100      	movs	r1, #0
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f000 f965 	bl	8009340 <USB_SetDevSpeed>
 8009076:	e008      	b.n	800908a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009078:	2101      	movs	r1, #1
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f000 f960 	bl	8009340 <USB_SetDevSpeed>
 8009080:	e003      	b.n	800908a <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009082:	2103      	movs	r1, #3
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f000 f95b 	bl	8009340 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800908a:	2110      	movs	r1, #16
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f000 f8f3 	bl	8009278 <USB_FlushTxFifo>
 8009092:	4603      	mov	r3, r0
 8009094:	2b00      	cmp	r3, #0
 8009096:	d001      	beq.n	800909c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8009098:	2301      	movs	r3, #1
 800909a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f000 f91f 	bl	80092e0 <USB_FlushRxFifo>
 80090a2:	4603      	mov	r3, r0
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d001      	beq.n	80090ac <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80090a8:	2301      	movs	r3, #1
 80090aa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090b2:	461a      	mov	r2, r3
 80090b4:	2300      	movs	r3, #0
 80090b6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090be:	461a      	mov	r2, r3
 80090c0:	2300      	movs	r3, #0
 80090c2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090ca:	461a      	mov	r2, r3
 80090cc:	2300      	movs	r3, #0
 80090ce:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80090d0:	2300      	movs	r3, #0
 80090d2:	613b      	str	r3, [r7, #16]
 80090d4:	e043      	b.n	800915e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80090d6:	693b      	ldr	r3, [r7, #16]
 80090d8:	015a      	lsls	r2, r3, #5
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	4413      	add	r3, r2
 80090de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80090e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80090ec:	d118      	bne.n	8009120 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80090ee:	693b      	ldr	r3, [r7, #16]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d10a      	bne.n	800910a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80090f4:	693b      	ldr	r3, [r7, #16]
 80090f6:	015a      	lsls	r2, r3, #5
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	4413      	add	r3, r2
 80090fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009100:	461a      	mov	r2, r3
 8009102:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009106:	6013      	str	r3, [r2, #0]
 8009108:	e013      	b.n	8009132 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800910a:	693b      	ldr	r3, [r7, #16]
 800910c:	015a      	lsls	r2, r3, #5
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	4413      	add	r3, r2
 8009112:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009116:	461a      	mov	r2, r3
 8009118:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800911c:	6013      	str	r3, [r2, #0]
 800911e:	e008      	b.n	8009132 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009120:	693b      	ldr	r3, [r7, #16]
 8009122:	015a      	lsls	r2, r3, #5
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	4413      	add	r3, r2
 8009128:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800912c:	461a      	mov	r2, r3
 800912e:	2300      	movs	r3, #0
 8009130:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009132:	693b      	ldr	r3, [r7, #16]
 8009134:	015a      	lsls	r2, r3, #5
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	4413      	add	r3, r2
 800913a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800913e:	461a      	mov	r2, r3
 8009140:	2300      	movs	r3, #0
 8009142:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009144:	693b      	ldr	r3, [r7, #16]
 8009146:	015a      	lsls	r2, r3, #5
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	4413      	add	r3, r2
 800914c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009150:	461a      	mov	r2, r3
 8009152:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009156:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009158:	693b      	ldr	r3, [r7, #16]
 800915a:	3301      	adds	r3, #1
 800915c:	613b      	str	r3, [r7, #16]
 800915e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009160:	693a      	ldr	r2, [r7, #16]
 8009162:	429a      	cmp	r2, r3
 8009164:	d3b7      	bcc.n	80090d6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009166:	2300      	movs	r3, #0
 8009168:	613b      	str	r3, [r7, #16]
 800916a:	e043      	b.n	80091f4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800916c:	693b      	ldr	r3, [r7, #16]
 800916e:	015a      	lsls	r2, r3, #5
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	4413      	add	r3, r2
 8009174:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800917e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009182:	d118      	bne.n	80091b6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8009184:	693b      	ldr	r3, [r7, #16]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d10a      	bne.n	80091a0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800918a:	693b      	ldr	r3, [r7, #16]
 800918c:	015a      	lsls	r2, r3, #5
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	4413      	add	r3, r2
 8009192:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009196:	461a      	mov	r2, r3
 8009198:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800919c:	6013      	str	r3, [r2, #0]
 800919e:	e013      	b.n	80091c8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80091a0:	693b      	ldr	r3, [r7, #16]
 80091a2:	015a      	lsls	r2, r3, #5
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	4413      	add	r3, r2
 80091a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091ac:	461a      	mov	r2, r3
 80091ae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80091b2:	6013      	str	r3, [r2, #0]
 80091b4:	e008      	b.n	80091c8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	015a      	lsls	r2, r3, #5
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	4413      	add	r3, r2
 80091be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091c2:	461a      	mov	r2, r3
 80091c4:	2300      	movs	r3, #0
 80091c6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80091c8:	693b      	ldr	r3, [r7, #16]
 80091ca:	015a      	lsls	r2, r3, #5
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	4413      	add	r3, r2
 80091d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091d4:	461a      	mov	r2, r3
 80091d6:	2300      	movs	r3, #0
 80091d8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80091da:	693b      	ldr	r3, [r7, #16]
 80091dc:	015a      	lsls	r2, r3, #5
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	4413      	add	r3, r2
 80091e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091e6:	461a      	mov	r2, r3
 80091e8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80091ec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80091ee:	693b      	ldr	r3, [r7, #16]
 80091f0:	3301      	adds	r3, #1
 80091f2:	613b      	str	r3, [r7, #16]
 80091f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091f6:	693a      	ldr	r2, [r7, #16]
 80091f8:	429a      	cmp	r2, r3
 80091fa:	d3b7      	bcc.n	800916c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009202:	691b      	ldr	r3, [r3, #16]
 8009204:	68fa      	ldr	r2, [r7, #12]
 8009206:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800920a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800920e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2200      	movs	r2, #0
 8009214:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800921c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800921e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009220:	2b00      	cmp	r3, #0
 8009222:	d105      	bne.n	8009230 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	699b      	ldr	r3, [r3, #24]
 8009228:	f043 0210 	orr.w	r2, r3, #16
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	699a      	ldr	r2, [r3, #24]
 8009234:	4b0e      	ldr	r3, [pc, #56]	; (8009270 <USB_DevInit+0x2b4>)
 8009236:	4313      	orrs	r3, r2
 8009238:	687a      	ldr	r2, [r7, #4]
 800923a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800923c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800923e:	2b00      	cmp	r3, #0
 8009240:	d005      	beq.n	800924e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	699b      	ldr	r3, [r3, #24]
 8009246:	f043 0208 	orr.w	r2, r3, #8
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800924e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009250:	2b01      	cmp	r3, #1
 8009252:	d105      	bne.n	8009260 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	699a      	ldr	r2, [r3, #24]
 8009258:	4b06      	ldr	r3, [pc, #24]	; (8009274 <USB_DevInit+0x2b8>)
 800925a:	4313      	orrs	r3, r2
 800925c:	687a      	ldr	r2, [r7, #4]
 800925e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009260:	7dfb      	ldrb	r3, [r7, #23]
}
 8009262:	4618      	mov	r0, r3
 8009264:	3718      	adds	r7, #24
 8009266:	46bd      	mov	sp, r7
 8009268:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800926c:	b004      	add	sp, #16
 800926e:	4770      	bx	lr
 8009270:	803c3800 	.word	0x803c3800
 8009274:	40000004 	.word	0x40000004

08009278 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009278:	b480      	push	{r7}
 800927a:	b085      	sub	sp, #20
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
 8009280:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009282:	2300      	movs	r3, #0
 8009284:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	3301      	adds	r3, #1
 800928a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	4a13      	ldr	r2, [pc, #76]	; (80092dc <USB_FlushTxFifo+0x64>)
 8009290:	4293      	cmp	r3, r2
 8009292:	d901      	bls.n	8009298 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009294:	2303      	movs	r3, #3
 8009296:	e01b      	b.n	80092d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	691b      	ldr	r3, [r3, #16]
 800929c:	2b00      	cmp	r3, #0
 800929e:	daf2      	bge.n	8009286 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80092a0:	2300      	movs	r3, #0
 80092a2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	019b      	lsls	r3, r3, #6
 80092a8:	f043 0220 	orr.w	r2, r3, #32
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	3301      	adds	r3, #1
 80092b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	4a08      	ldr	r2, [pc, #32]	; (80092dc <USB_FlushTxFifo+0x64>)
 80092ba:	4293      	cmp	r3, r2
 80092bc:	d901      	bls.n	80092c2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80092be:	2303      	movs	r3, #3
 80092c0:	e006      	b.n	80092d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	691b      	ldr	r3, [r3, #16]
 80092c6:	f003 0320 	and.w	r3, r3, #32
 80092ca:	2b20      	cmp	r3, #32
 80092cc:	d0f0      	beq.n	80092b0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80092ce:	2300      	movs	r3, #0
}
 80092d0:	4618      	mov	r0, r3
 80092d2:	3714      	adds	r7, #20
 80092d4:	46bd      	mov	sp, r7
 80092d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092da:	4770      	bx	lr
 80092dc:	00030d40 	.word	0x00030d40

080092e0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80092e0:	b480      	push	{r7}
 80092e2:	b085      	sub	sp, #20
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80092e8:	2300      	movs	r3, #0
 80092ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	3301      	adds	r3, #1
 80092f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	4a11      	ldr	r2, [pc, #68]	; (800933c <USB_FlushRxFifo+0x5c>)
 80092f6:	4293      	cmp	r3, r2
 80092f8:	d901      	bls.n	80092fe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80092fa:	2303      	movs	r3, #3
 80092fc:	e018      	b.n	8009330 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	691b      	ldr	r3, [r3, #16]
 8009302:	2b00      	cmp	r3, #0
 8009304:	daf2      	bge.n	80092ec <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009306:	2300      	movs	r3, #0
 8009308:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2210      	movs	r2, #16
 800930e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	3301      	adds	r3, #1
 8009314:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	4a08      	ldr	r2, [pc, #32]	; (800933c <USB_FlushRxFifo+0x5c>)
 800931a:	4293      	cmp	r3, r2
 800931c:	d901      	bls.n	8009322 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800931e:	2303      	movs	r3, #3
 8009320:	e006      	b.n	8009330 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	691b      	ldr	r3, [r3, #16]
 8009326:	f003 0310 	and.w	r3, r3, #16
 800932a:	2b10      	cmp	r3, #16
 800932c:	d0f0      	beq.n	8009310 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800932e:	2300      	movs	r3, #0
}
 8009330:	4618      	mov	r0, r3
 8009332:	3714      	adds	r7, #20
 8009334:	46bd      	mov	sp, r7
 8009336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933a:	4770      	bx	lr
 800933c:	00030d40 	.word	0x00030d40

08009340 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009340:	b480      	push	{r7}
 8009342:	b085      	sub	sp, #20
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
 8009348:	460b      	mov	r3, r1
 800934a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009356:	681a      	ldr	r2, [r3, #0]
 8009358:	78fb      	ldrb	r3, [r7, #3]
 800935a:	68f9      	ldr	r1, [r7, #12]
 800935c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009360:	4313      	orrs	r3, r2
 8009362:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009364:	2300      	movs	r3, #0
}
 8009366:	4618      	mov	r0, r3
 8009368:	3714      	adds	r7, #20
 800936a:	46bd      	mov	sp, r7
 800936c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009370:	4770      	bx	lr

08009372 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009372:	b480      	push	{r7}
 8009374:	b085      	sub	sp, #20
 8009376:	af00      	add	r7, sp, #0
 8009378:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	68fa      	ldr	r2, [r7, #12]
 8009388:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800938c:	f023 0303 	bic.w	r3, r3, #3
 8009390:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009398:	685b      	ldr	r3, [r3, #4]
 800939a:	68fa      	ldr	r2, [r7, #12]
 800939c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80093a0:	f043 0302 	orr.w	r3, r3, #2
 80093a4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80093a6:	2300      	movs	r3, #0
}
 80093a8:	4618      	mov	r0, r3
 80093aa:	3714      	adds	r7, #20
 80093ac:	46bd      	mov	sp, r7
 80093ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b2:	4770      	bx	lr

080093b4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80093b4:	b480      	push	{r7}
 80093b6:	b083      	sub	sp, #12
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	695b      	ldr	r3, [r3, #20]
 80093c0:	f003 0301 	and.w	r3, r3, #1
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	370c      	adds	r7, #12
 80093c8:	46bd      	mov	sp, r7
 80093ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ce:	4770      	bx	lr

080093d0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80093d0:	b480      	push	{r7}
 80093d2:	b085      	sub	sp, #20
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80093d8:	2300      	movs	r3, #0
 80093da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	3301      	adds	r3, #1
 80093e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	4a13      	ldr	r2, [pc, #76]	; (8009434 <USB_CoreReset+0x64>)
 80093e6:	4293      	cmp	r3, r2
 80093e8:	d901      	bls.n	80093ee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80093ea:	2303      	movs	r3, #3
 80093ec:	e01b      	b.n	8009426 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	691b      	ldr	r3, [r3, #16]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	daf2      	bge.n	80093dc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80093f6:	2300      	movs	r3, #0
 80093f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	691b      	ldr	r3, [r3, #16]
 80093fe:	f043 0201 	orr.w	r2, r3, #1
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	3301      	adds	r3, #1
 800940a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	4a09      	ldr	r2, [pc, #36]	; (8009434 <USB_CoreReset+0x64>)
 8009410:	4293      	cmp	r3, r2
 8009412:	d901      	bls.n	8009418 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009414:	2303      	movs	r3, #3
 8009416:	e006      	b.n	8009426 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	691b      	ldr	r3, [r3, #16]
 800941c:	f003 0301 	and.w	r3, r3, #1
 8009420:	2b01      	cmp	r3, #1
 8009422:	d0f0      	beq.n	8009406 <USB_CoreReset+0x36>

  return HAL_OK;
 8009424:	2300      	movs	r3, #0
}
 8009426:	4618      	mov	r0, r3
 8009428:	3714      	adds	r7, #20
 800942a:	46bd      	mov	sp, r7
 800942c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009430:	4770      	bx	lr
 8009432:	bf00      	nop
 8009434:	00030d40 	.word	0x00030d40

08009438 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009438:	b480      	push	{r7}
 800943a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800943c:	bf00      	nop
 800943e:	46bd      	mov	sp, r7
 8009440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009444:	4770      	bx	lr
	...

08009448 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009448:	b480      	push	{r7}
 800944a:	b085      	sub	sp, #20
 800944c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800944e:	f3ef 8305 	mrs	r3, IPSR
 8009452:	60bb      	str	r3, [r7, #8]
  return(result);
 8009454:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009456:	2b00      	cmp	r3, #0
 8009458:	d10f      	bne.n	800947a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800945a:	f3ef 8310 	mrs	r3, PRIMASK
 800945e:	607b      	str	r3, [r7, #4]
  return(result);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d105      	bne.n	8009472 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009466:	f3ef 8311 	mrs	r3, BASEPRI
 800946a:	603b      	str	r3, [r7, #0]
  return(result);
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d007      	beq.n	8009482 <osKernelInitialize+0x3a>
 8009472:	4b0e      	ldr	r3, [pc, #56]	; (80094ac <osKernelInitialize+0x64>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	2b02      	cmp	r3, #2
 8009478:	d103      	bne.n	8009482 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800947a:	f06f 0305 	mvn.w	r3, #5
 800947e:	60fb      	str	r3, [r7, #12]
 8009480:	e00c      	b.n	800949c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009482:	4b0a      	ldr	r3, [pc, #40]	; (80094ac <osKernelInitialize+0x64>)
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d105      	bne.n	8009496 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800948a:	4b08      	ldr	r3, [pc, #32]	; (80094ac <osKernelInitialize+0x64>)
 800948c:	2201      	movs	r2, #1
 800948e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009490:	2300      	movs	r3, #0
 8009492:	60fb      	str	r3, [r7, #12]
 8009494:	e002      	b.n	800949c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8009496:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800949a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800949c:	68fb      	ldr	r3, [r7, #12]
}
 800949e:	4618      	mov	r0, r3
 80094a0:	3714      	adds	r7, #20
 80094a2:	46bd      	mov	sp, r7
 80094a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a8:	4770      	bx	lr
 80094aa:	bf00      	nop
 80094ac:	20006f9c 	.word	0x20006f9c

080094b0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b084      	sub	sp, #16
 80094b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80094b6:	f3ef 8305 	mrs	r3, IPSR
 80094ba:	60bb      	str	r3, [r7, #8]
  return(result);
 80094bc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d10f      	bne.n	80094e2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80094c2:	f3ef 8310 	mrs	r3, PRIMASK
 80094c6:	607b      	str	r3, [r7, #4]
  return(result);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d105      	bne.n	80094da <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80094ce:	f3ef 8311 	mrs	r3, BASEPRI
 80094d2:	603b      	str	r3, [r7, #0]
  return(result);
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d007      	beq.n	80094ea <osKernelStart+0x3a>
 80094da:	4b0f      	ldr	r3, [pc, #60]	; (8009518 <osKernelStart+0x68>)
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	2b02      	cmp	r3, #2
 80094e0:	d103      	bne.n	80094ea <osKernelStart+0x3a>
    stat = osErrorISR;
 80094e2:	f06f 0305 	mvn.w	r3, #5
 80094e6:	60fb      	str	r3, [r7, #12]
 80094e8:	e010      	b.n	800950c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80094ea:	4b0b      	ldr	r3, [pc, #44]	; (8009518 <osKernelStart+0x68>)
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	2b01      	cmp	r3, #1
 80094f0:	d109      	bne.n	8009506 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80094f2:	f7ff ffa1 	bl	8009438 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80094f6:	4b08      	ldr	r3, [pc, #32]	; (8009518 <osKernelStart+0x68>)
 80094f8:	2202      	movs	r2, #2
 80094fa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80094fc:	f001 f8ca 	bl	800a694 <vTaskStartScheduler>
      stat = osOK;
 8009500:	2300      	movs	r3, #0
 8009502:	60fb      	str	r3, [r7, #12]
 8009504:	e002      	b.n	800950c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8009506:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800950a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800950c:	68fb      	ldr	r3, [r7, #12]
}
 800950e:	4618      	mov	r0, r3
 8009510:	3710      	adds	r7, #16
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}
 8009516:	bf00      	nop
 8009518:	20006f9c 	.word	0x20006f9c

0800951c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800951c:	b580      	push	{r7, lr}
 800951e:	b090      	sub	sp, #64	; 0x40
 8009520:	af04      	add	r7, sp, #16
 8009522:	60f8      	str	r0, [r7, #12]
 8009524:	60b9      	str	r1, [r7, #8]
 8009526:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009528:	2300      	movs	r3, #0
 800952a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800952c:	f3ef 8305 	mrs	r3, IPSR
 8009530:	61fb      	str	r3, [r7, #28]
  return(result);
 8009532:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8009534:	2b00      	cmp	r3, #0
 8009536:	f040 808f 	bne.w	8009658 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800953a:	f3ef 8310 	mrs	r3, PRIMASK
 800953e:	61bb      	str	r3, [r7, #24]
  return(result);
 8009540:	69bb      	ldr	r3, [r7, #24]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d105      	bne.n	8009552 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009546:	f3ef 8311 	mrs	r3, BASEPRI
 800954a:	617b      	str	r3, [r7, #20]
  return(result);
 800954c:	697b      	ldr	r3, [r7, #20]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d003      	beq.n	800955a <osThreadNew+0x3e>
 8009552:	4b44      	ldr	r3, [pc, #272]	; (8009664 <osThreadNew+0x148>)
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	2b02      	cmp	r3, #2
 8009558:	d07e      	beq.n	8009658 <osThreadNew+0x13c>
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d07b      	beq.n	8009658 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8009560:	2380      	movs	r3, #128	; 0x80
 8009562:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8009564:	2318      	movs	r3, #24
 8009566:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8009568:	2300      	movs	r3, #0
 800956a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800956c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009570:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d045      	beq.n	8009604 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d002      	beq.n	8009586 <osThreadNew+0x6a>
        name = attr->name;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	699b      	ldr	r3, [r3, #24]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d002      	beq.n	8009594 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	699b      	ldr	r3, [r3, #24]
 8009592:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009596:	2b00      	cmp	r3, #0
 8009598:	d008      	beq.n	80095ac <osThreadNew+0x90>
 800959a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800959c:	2b38      	cmp	r3, #56	; 0x38
 800959e:	d805      	bhi.n	80095ac <osThreadNew+0x90>
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	685b      	ldr	r3, [r3, #4]
 80095a4:	f003 0301 	and.w	r3, r3, #1
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d001      	beq.n	80095b0 <osThreadNew+0x94>
        return (NULL);
 80095ac:	2300      	movs	r3, #0
 80095ae:	e054      	b.n	800965a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	695b      	ldr	r3, [r3, #20]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d003      	beq.n	80095c0 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	695b      	ldr	r3, [r3, #20]
 80095bc:	089b      	lsrs	r3, r3, #2
 80095be:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	689b      	ldr	r3, [r3, #8]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d00e      	beq.n	80095e6 <osThreadNew+0xca>
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	68db      	ldr	r3, [r3, #12]
 80095cc:	2ba7      	cmp	r3, #167	; 0xa7
 80095ce:	d90a      	bls.n	80095e6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d006      	beq.n	80095e6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	695b      	ldr	r3, [r3, #20]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d002      	beq.n	80095e6 <osThreadNew+0xca>
        mem = 1;
 80095e0:	2301      	movs	r3, #1
 80095e2:	623b      	str	r3, [r7, #32]
 80095e4:	e010      	b.n	8009608 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	689b      	ldr	r3, [r3, #8]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d10c      	bne.n	8009608 <osThreadNew+0xec>
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	68db      	ldr	r3, [r3, #12]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d108      	bne.n	8009608 <osThreadNew+0xec>
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	691b      	ldr	r3, [r3, #16]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d104      	bne.n	8009608 <osThreadNew+0xec>
          mem = 0;
 80095fe:	2300      	movs	r3, #0
 8009600:	623b      	str	r3, [r7, #32]
 8009602:	e001      	b.n	8009608 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8009604:	2300      	movs	r3, #0
 8009606:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8009608:	6a3b      	ldr	r3, [r7, #32]
 800960a:	2b01      	cmp	r3, #1
 800960c:	d110      	bne.n	8009630 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8009612:	687a      	ldr	r2, [r7, #4]
 8009614:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009616:	9202      	str	r2, [sp, #8]
 8009618:	9301      	str	r3, [sp, #4]
 800961a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800961c:	9300      	str	r3, [sp, #0]
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009622:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009624:	68f8      	ldr	r0, [r7, #12]
 8009626:	f000 fe3f 	bl	800a2a8 <xTaskCreateStatic>
 800962a:	4603      	mov	r3, r0
 800962c:	613b      	str	r3, [r7, #16]
 800962e:	e013      	b.n	8009658 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8009630:	6a3b      	ldr	r3, [r7, #32]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d110      	bne.n	8009658 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009638:	b29a      	uxth	r2, r3
 800963a:	f107 0310 	add.w	r3, r7, #16
 800963e:	9301      	str	r3, [sp, #4]
 8009640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009642:	9300      	str	r3, [sp, #0]
 8009644:	68bb      	ldr	r3, [r7, #8]
 8009646:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009648:	68f8      	ldr	r0, [r7, #12]
 800964a:	f000 fe90 	bl	800a36e <xTaskCreate>
 800964e:	4603      	mov	r3, r0
 8009650:	2b01      	cmp	r3, #1
 8009652:	d001      	beq.n	8009658 <osThreadNew+0x13c>
          hTask = NULL;
 8009654:	2300      	movs	r3, #0
 8009656:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009658:	693b      	ldr	r3, [r7, #16]
}
 800965a:	4618      	mov	r0, r3
 800965c:	3730      	adds	r7, #48	; 0x30
 800965e:	46bd      	mov	sp, r7
 8009660:	bd80      	pop	{r7, pc}
 8009662:	bf00      	nop
 8009664:	20006f9c 	.word	0x20006f9c

08009668 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8009668:	b580      	push	{r7, lr}
 800966a:	b086      	sub	sp, #24
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009670:	f3ef 8305 	mrs	r3, IPSR
 8009674:	613b      	str	r3, [r7, #16]
  return(result);
 8009676:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009678:	2b00      	cmp	r3, #0
 800967a:	d10f      	bne.n	800969c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800967c:	f3ef 8310 	mrs	r3, PRIMASK
 8009680:	60fb      	str	r3, [r7, #12]
  return(result);
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d105      	bne.n	8009694 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009688:	f3ef 8311 	mrs	r3, BASEPRI
 800968c:	60bb      	str	r3, [r7, #8]
  return(result);
 800968e:	68bb      	ldr	r3, [r7, #8]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d007      	beq.n	80096a4 <osDelay+0x3c>
 8009694:	4b0a      	ldr	r3, [pc, #40]	; (80096c0 <osDelay+0x58>)
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	2b02      	cmp	r3, #2
 800969a:	d103      	bne.n	80096a4 <osDelay+0x3c>
    stat = osErrorISR;
 800969c:	f06f 0305 	mvn.w	r3, #5
 80096a0:	617b      	str	r3, [r7, #20]
 80096a2:	e007      	b.n	80096b4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80096a4:	2300      	movs	r3, #0
 80096a6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d002      	beq.n	80096b4 <osDelay+0x4c>
      vTaskDelay(ticks);
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f000 ffba 	bl	800a628 <vTaskDelay>
    }
  }

  return (stat);
 80096b4:	697b      	ldr	r3, [r7, #20]
}
 80096b6:	4618      	mov	r0, r3
 80096b8:	3718      	adds	r7, #24
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}
 80096be:	bf00      	nop
 80096c0:	20006f9c 	.word	0x20006f9c

080096c4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80096c4:	b480      	push	{r7}
 80096c6:	b085      	sub	sp, #20
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	60f8      	str	r0, [r7, #12]
 80096cc:	60b9      	str	r1, [r7, #8]
 80096ce:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	4a07      	ldr	r2, [pc, #28]	; (80096f0 <vApplicationGetIdleTaskMemory+0x2c>)
 80096d4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80096d6:	68bb      	ldr	r3, [r7, #8]
 80096d8:	4a06      	ldr	r2, [pc, #24]	; (80096f4 <vApplicationGetIdleTaskMemory+0x30>)
 80096da:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2280      	movs	r2, #128	; 0x80
 80096e0:	601a      	str	r2, [r3, #0]
}
 80096e2:	bf00      	nop
 80096e4:	3714      	adds	r7, #20
 80096e6:	46bd      	mov	sp, r7
 80096e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ec:	4770      	bx	lr
 80096ee:	bf00      	nop
 80096f0:	20006fa0 	.word	0x20006fa0
 80096f4:	20007048 	.word	0x20007048

080096f8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80096f8:	b480      	push	{r7}
 80096fa:	b085      	sub	sp, #20
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	60f8      	str	r0, [r7, #12]
 8009700:	60b9      	str	r1, [r7, #8]
 8009702:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	4a07      	ldr	r2, [pc, #28]	; (8009724 <vApplicationGetTimerTaskMemory+0x2c>)
 8009708:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	4a06      	ldr	r2, [pc, #24]	; (8009728 <vApplicationGetTimerTaskMemory+0x30>)
 800970e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009716:	601a      	str	r2, [r3, #0]
}
 8009718:	bf00      	nop
 800971a:	3714      	adds	r7, #20
 800971c:	46bd      	mov	sp, r7
 800971e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009722:	4770      	bx	lr
 8009724:	20007248 	.word	0x20007248
 8009728:	200072f0 	.word	0x200072f0

0800972c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800972c:	b480      	push	{r7}
 800972e:	b083      	sub	sp, #12
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f103 0208 	add.w	r2, r3, #8
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009744:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	f103 0208 	add.w	r2, r3, #8
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f103 0208 	add.w	r2, r3, #8
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2200      	movs	r2, #0
 800975e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009760:	bf00      	nop
 8009762:	370c      	adds	r7, #12
 8009764:	46bd      	mov	sp, r7
 8009766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976a:	4770      	bx	lr

0800976c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800976c:	b480      	push	{r7}
 800976e:	b083      	sub	sp, #12
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2200      	movs	r2, #0
 8009778:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800977a:	bf00      	nop
 800977c:	370c      	adds	r7, #12
 800977e:	46bd      	mov	sp, r7
 8009780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009784:	4770      	bx	lr

08009786 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009786:	b480      	push	{r7}
 8009788:	b085      	sub	sp, #20
 800978a:	af00      	add	r7, sp, #0
 800978c:	6078      	str	r0, [r7, #4]
 800978e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	685b      	ldr	r3, [r3, #4]
 8009794:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	68fa      	ldr	r2, [r7, #12]
 800979a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	689a      	ldr	r2, [r3, #8]
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	689b      	ldr	r3, [r3, #8]
 80097a8:	683a      	ldr	r2, [r7, #0]
 80097aa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	683a      	ldr	r2, [r7, #0]
 80097b0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	687a      	ldr	r2, [r7, #4]
 80097b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	1c5a      	adds	r2, r3, #1
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	601a      	str	r2, [r3, #0]
}
 80097c2:	bf00      	nop
 80097c4:	3714      	adds	r7, #20
 80097c6:	46bd      	mov	sp, r7
 80097c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097cc:	4770      	bx	lr

080097ce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80097ce:	b480      	push	{r7}
 80097d0:	b085      	sub	sp, #20
 80097d2:	af00      	add	r7, sp, #0
 80097d4:	6078      	str	r0, [r7, #4]
 80097d6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80097de:	68bb      	ldr	r3, [r7, #8]
 80097e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80097e4:	d103      	bne.n	80097ee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	691b      	ldr	r3, [r3, #16]
 80097ea:	60fb      	str	r3, [r7, #12]
 80097ec:	e00c      	b.n	8009808 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	3308      	adds	r3, #8
 80097f2:	60fb      	str	r3, [r7, #12]
 80097f4:	e002      	b.n	80097fc <vListInsert+0x2e>
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	685b      	ldr	r3, [r3, #4]
 80097fa:	60fb      	str	r3, [r7, #12]
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	685b      	ldr	r3, [r3, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	68ba      	ldr	r2, [r7, #8]
 8009804:	429a      	cmp	r2, r3
 8009806:	d2f6      	bcs.n	80097f6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	685a      	ldr	r2, [r3, #4]
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	685b      	ldr	r3, [r3, #4]
 8009814:	683a      	ldr	r2, [r7, #0]
 8009816:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	68fa      	ldr	r2, [r7, #12]
 800981c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	683a      	ldr	r2, [r7, #0]
 8009822:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	687a      	ldr	r2, [r7, #4]
 8009828:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	1c5a      	adds	r2, r3, #1
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	601a      	str	r2, [r3, #0]
}
 8009834:	bf00      	nop
 8009836:	3714      	adds	r7, #20
 8009838:	46bd      	mov	sp, r7
 800983a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983e:	4770      	bx	lr

08009840 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009840:	b480      	push	{r7}
 8009842:	b085      	sub	sp, #20
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	691b      	ldr	r3, [r3, #16]
 800984c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	685b      	ldr	r3, [r3, #4]
 8009852:	687a      	ldr	r2, [r7, #4]
 8009854:	6892      	ldr	r2, [r2, #8]
 8009856:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	689b      	ldr	r3, [r3, #8]
 800985c:	687a      	ldr	r2, [r7, #4]
 800985e:	6852      	ldr	r2, [r2, #4]
 8009860:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	685b      	ldr	r3, [r3, #4]
 8009866:	687a      	ldr	r2, [r7, #4]
 8009868:	429a      	cmp	r2, r3
 800986a:	d103      	bne.n	8009874 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	689a      	ldr	r2, [r3, #8]
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2200      	movs	r2, #0
 8009878:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	1e5a      	subs	r2, r3, #1
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	681b      	ldr	r3, [r3, #0]
}
 8009888:	4618      	mov	r0, r3
 800988a:	3714      	adds	r7, #20
 800988c:	46bd      	mov	sp, r7
 800988e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009892:	4770      	bx	lr

08009894 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b084      	sub	sp, #16
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
 800989c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d10c      	bne.n	80098c2 <xQueueGenericReset+0x2e>
	__asm volatile
 80098a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ac:	b672      	cpsid	i
 80098ae:	f383 8811 	msr	BASEPRI, r3
 80098b2:	f3bf 8f6f 	isb	sy
 80098b6:	f3bf 8f4f 	dsb	sy
 80098ba:	b662      	cpsie	i
 80098bc:	60bb      	str	r3, [r7, #8]
}
 80098be:	bf00      	nop
 80098c0:	e7fe      	b.n	80098c0 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80098c2:	f002 f8cb 	bl	800ba5c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	681a      	ldr	r2, [r3, #0]
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098ce:	68f9      	ldr	r1, [r7, #12]
 80098d0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80098d2:	fb01 f303 	mul.w	r3, r1, r3
 80098d6:	441a      	add	r2, r3
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	2200      	movs	r2, #0
 80098e0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	681a      	ldr	r2, [r3, #0]
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	681a      	ldr	r2, [r3, #0]
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098f2:	3b01      	subs	r3, #1
 80098f4:	68f9      	ldr	r1, [r7, #12]
 80098f6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80098f8:	fb01 f303 	mul.w	r3, r1, r3
 80098fc:	441a      	add	r2, r3
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	22ff      	movs	r2, #255	; 0xff
 8009906:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	22ff      	movs	r2, #255	; 0xff
 800990e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009912:	683b      	ldr	r3, [r7, #0]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d114      	bne.n	8009942 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	691b      	ldr	r3, [r3, #16]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d01a      	beq.n	8009956 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	3310      	adds	r3, #16
 8009924:	4618      	mov	r0, r3
 8009926:	f001 f95d 	bl	800abe4 <xTaskRemoveFromEventList>
 800992a:	4603      	mov	r3, r0
 800992c:	2b00      	cmp	r3, #0
 800992e:	d012      	beq.n	8009956 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009930:	4b0c      	ldr	r3, [pc, #48]	; (8009964 <xQueueGenericReset+0xd0>)
 8009932:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009936:	601a      	str	r2, [r3, #0]
 8009938:	f3bf 8f4f 	dsb	sy
 800993c:	f3bf 8f6f 	isb	sy
 8009940:	e009      	b.n	8009956 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	3310      	adds	r3, #16
 8009946:	4618      	mov	r0, r3
 8009948:	f7ff fef0 	bl	800972c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	3324      	adds	r3, #36	; 0x24
 8009950:	4618      	mov	r0, r3
 8009952:	f7ff feeb 	bl	800972c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009956:	f002 f8b5 	bl	800bac4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800995a:	2301      	movs	r3, #1
}
 800995c:	4618      	mov	r0, r3
 800995e:	3710      	adds	r7, #16
 8009960:	46bd      	mov	sp, r7
 8009962:	bd80      	pop	{r7, pc}
 8009964:	e000ed04 	.word	0xe000ed04

08009968 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009968:	b580      	push	{r7, lr}
 800996a:	b08e      	sub	sp, #56	; 0x38
 800996c:	af02      	add	r7, sp, #8
 800996e:	60f8      	str	r0, [r7, #12]
 8009970:	60b9      	str	r1, [r7, #8]
 8009972:	607a      	str	r2, [r7, #4]
 8009974:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d10c      	bne.n	8009996 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800997c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009980:	b672      	cpsid	i
 8009982:	f383 8811 	msr	BASEPRI, r3
 8009986:	f3bf 8f6f 	isb	sy
 800998a:	f3bf 8f4f 	dsb	sy
 800998e:	b662      	cpsie	i
 8009990:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009992:	bf00      	nop
 8009994:	e7fe      	b.n	8009994 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009996:	683b      	ldr	r3, [r7, #0]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d10c      	bne.n	80099b6 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800999c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099a0:	b672      	cpsid	i
 80099a2:	f383 8811 	msr	BASEPRI, r3
 80099a6:	f3bf 8f6f 	isb	sy
 80099aa:	f3bf 8f4f 	dsb	sy
 80099ae:	b662      	cpsie	i
 80099b0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80099b2:	bf00      	nop
 80099b4:	e7fe      	b.n	80099b4 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d002      	beq.n	80099c2 <xQueueGenericCreateStatic+0x5a>
 80099bc:	68bb      	ldr	r3, [r7, #8]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d001      	beq.n	80099c6 <xQueueGenericCreateStatic+0x5e>
 80099c2:	2301      	movs	r3, #1
 80099c4:	e000      	b.n	80099c8 <xQueueGenericCreateStatic+0x60>
 80099c6:	2300      	movs	r3, #0
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d10c      	bne.n	80099e6 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 80099cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099d0:	b672      	cpsid	i
 80099d2:	f383 8811 	msr	BASEPRI, r3
 80099d6:	f3bf 8f6f 	isb	sy
 80099da:	f3bf 8f4f 	dsb	sy
 80099de:	b662      	cpsie	i
 80099e0:	623b      	str	r3, [r7, #32]
}
 80099e2:	bf00      	nop
 80099e4:	e7fe      	b.n	80099e4 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d102      	bne.n	80099f2 <xQueueGenericCreateStatic+0x8a>
 80099ec:	68bb      	ldr	r3, [r7, #8]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d101      	bne.n	80099f6 <xQueueGenericCreateStatic+0x8e>
 80099f2:	2301      	movs	r3, #1
 80099f4:	e000      	b.n	80099f8 <xQueueGenericCreateStatic+0x90>
 80099f6:	2300      	movs	r3, #0
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d10c      	bne.n	8009a16 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 80099fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a00:	b672      	cpsid	i
 8009a02:	f383 8811 	msr	BASEPRI, r3
 8009a06:	f3bf 8f6f 	isb	sy
 8009a0a:	f3bf 8f4f 	dsb	sy
 8009a0e:	b662      	cpsie	i
 8009a10:	61fb      	str	r3, [r7, #28]
}
 8009a12:	bf00      	nop
 8009a14:	e7fe      	b.n	8009a14 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009a16:	2350      	movs	r3, #80	; 0x50
 8009a18:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009a1a:	697b      	ldr	r3, [r7, #20]
 8009a1c:	2b50      	cmp	r3, #80	; 0x50
 8009a1e:	d00c      	beq.n	8009a3a <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8009a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a24:	b672      	cpsid	i
 8009a26:	f383 8811 	msr	BASEPRI, r3
 8009a2a:	f3bf 8f6f 	isb	sy
 8009a2e:	f3bf 8f4f 	dsb	sy
 8009a32:	b662      	cpsie	i
 8009a34:	61bb      	str	r3, [r7, #24]
}
 8009a36:	bf00      	nop
 8009a38:	e7fe      	b.n	8009a38 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009a3a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d00d      	beq.n	8009a62 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a48:	2201      	movs	r2, #1
 8009a4a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009a4e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a54:	9300      	str	r3, [sp, #0]
 8009a56:	4613      	mov	r3, r2
 8009a58:	687a      	ldr	r2, [r7, #4]
 8009a5a:	68b9      	ldr	r1, [r7, #8]
 8009a5c:	68f8      	ldr	r0, [r7, #12]
 8009a5e:	f000 f805 	bl	8009a6c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009a64:	4618      	mov	r0, r3
 8009a66:	3730      	adds	r7, #48	; 0x30
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	bd80      	pop	{r7, pc}

08009a6c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b084      	sub	sp, #16
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	60f8      	str	r0, [r7, #12]
 8009a74:	60b9      	str	r1, [r7, #8]
 8009a76:	607a      	str	r2, [r7, #4]
 8009a78:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009a7a:	68bb      	ldr	r3, [r7, #8]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d103      	bne.n	8009a88 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009a80:	69bb      	ldr	r3, [r7, #24]
 8009a82:	69ba      	ldr	r2, [r7, #24]
 8009a84:	601a      	str	r2, [r3, #0]
 8009a86:	e002      	b.n	8009a8e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009a88:	69bb      	ldr	r3, [r7, #24]
 8009a8a:	687a      	ldr	r2, [r7, #4]
 8009a8c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009a8e:	69bb      	ldr	r3, [r7, #24]
 8009a90:	68fa      	ldr	r2, [r7, #12]
 8009a92:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009a94:	69bb      	ldr	r3, [r7, #24]
 8009a96:	68ba      	ldr	r2, [r7, #8]
 8009a98:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009a9a:	2101      	movs	r1, #1
 8009a9c:	69b8      	ldr	r0, [r7, #24]
 8009a9e:	f7ff fef9 	bl	8009894 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009aa2:	69bb      	ldr	r3, [r7, #24]
 8009aa4:	78fa      	ldrb	r2, [r7, #3]
 8009aa6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009aaa:	bf00      	nop
 8009aac:	3710      	adds	r7, #16
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	bd80      	pop	{r7, pc}
	...

08009ab4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b08e      	sub	sp, #56	; 0x38
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	60f8      	str	r0, [r7, #12]
 8009abc:	60b9      	str	r1, [r7, #8]
 8009abe:	607a      	str	r2, [r7, #4]
 8009ac0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d10c      	bne.n	8009aea <xQueueGenericSend+0x36>
	__asm volatile
 8009ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ad4:	b672      	cpsid	i
 8009ad6:	f383 8811 	msr	BASEPRI, r3
 8009ada:	f3bf 8f6f 	isb	sy
 8009ade:	f3bf 8f4f 	dsb	sy
 8009ae2:	b662      	cpsie	i
 8009ae4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009ae6:	bf00      	nop
 8009ae8:	e7fe      	b.n	8009ae8 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d103      	bne.n	8009af8 <xQueueGenericSend+0x44>
 8009af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d101      	bne.n	8009afc <xQueueGenericSend+0x48>
 8009af8:	2301      	movs	r3, #1
 8009afa:	e000      	b.n	8009afe <xQueueGenericSend+0x4a>
 8009afc:	2300      	movs	r3, #0
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d10c      	bne.n	8009b1c <xQueueGenericSend+0x68>
	__asm volatile
 8009b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b06:	b672      	cpsid	i
 8009b08:	f383 8811 	msr	BASEPRI, r3
 8009b0c:	f3bf 8f6f 	isb	sy
 8009b10:	f3bf 8f4f 	dsb	sy
 8009b14:	b662      	cpsie	i
 8009b16:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009b18:	bf00      	nop
 8009b1a:	e7fe      	b.n	8009b1a <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	2b02      	cmp	r3, #2
 8009b20:	d103      	bne.n	8009b2a <xQueueGenericSend+0x76>
 8009b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b26:	2b01      	cmp	r3, #1
 8009b28:	d101      	bne.n	8009b2e <xQueueGenericSend+0x7a>
 8009b2a:	2301      	movs	r3, #1
 8009b2c:	e000      	b.n	8009b30 <xQueueGenericSend+0x7c>
 8009b2e:	2300      	movs	r3, #0
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d10c      	bne.n	8009b4e <xQueueGenericSend+0x9a>
	__asm volatile
 8009b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b38:	b672      	cpsid	i
 8009b3a:	f383 8811 	msr	BASEPRI, r3
 8009b3e:	f3bf 8f6f 	isb	sy
 8009b42:	f3bf 8f4f 	dsb	sy
 8009b46:	b662      	cpsie	i
 8009b48:	623b      	str	r3, [r7, #32]
}
 8009b4a:	bf00      	nop
 8009b4c:	e7fe      	b.n	8009b4c <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009b4e:	f001 fa3b 	bl	800afc8 <xTaskGetSchedulerState>
 8009b52:	4603      	mov	r3, r0
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d102      	bne.n	8009b5e <xQueueGenericSend+0xaa>
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d101      	bne.n	8009b62 <xQueueGenericSend+0xae>
 8009b5e:	2301      	movs	r3, #1
 8009b60:	e000      	b.n	8009b64 <xQueueGenericSend+0xb0>
 8009b62:	2300      	movs	r3, #0
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d10c      	bne.n	8009b82 <xQueueGenericSend+0xce>
	__asm volatile
 8009b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b6c:	b672      	cpsid	i
 8009b6e:	f383 8811 	msr	BASEPRI, r3
 8009b72:	f3bf 8f6f 	isb	sy
 8009b76:	f3bf 8f4f 	dsb	sy
 8009b7a:	b662      	cpsie	i
 8009b7c:	61fb      	str	r3, [r7, #28]
}
 8009b7e:	bf00      	nop
 8009b80:	e7fe      	b.n	8009b80 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009b82:	f001 ff6b 	bl	800ba5c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b8e:	429a      	cmp	r2, r3
 8009b90:	d302      	bcc.n	8009b98 <xQueueGenericSend+0xe4>
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	2b02      	cmp	r3, #2
 8009b96:	d129      	bne.n	8009bec <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009b98:	683a      	ldr	r2, [r7, #0]
 8009b9a:	68b9      	ldr	r1, [r7, #8]
 8009b9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009b9e:	f000 fa15 	bl	8009fcc <prvCopyDataToQueue>
 8009ba2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d010      	beq.n	8009bce <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bae:	3324      	adds	r3, #36	; 0x24
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	f001 f817 	bl	800abe4 <xTaskRemoveFromEventList>
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d013      	beq.n	8009be4 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009bbc:	4b3f      	ldr	r3, [pc, #252]	; (8009cbc <xQueueGenericSend+0x208>)
 8009bbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bc2:	601a      	str	r2, [r3, #0]
 8009bc4:	f3bf 8f4f 	dsb	sy
 8009bc8:	f3bf 8f6f 	isb	sy
 8009bcc:	e00a      	b.n	8009be4 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d007      	beq.n	8009be4 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009bd4:	4b39      	ldr	r3, [pc, #228]	; (8009cbc <xQueueGenericSend+0x208>)
 8009bd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bda:	601a      	str	r2, [r3, #0]
 8009bdc:	f3bf 8f4f 	dsb	sy
 8009be0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009be4:	f001 ff6e 	bl	800bac4 <vPortExitCritical>
				return pdPASS;
 8009be8:	2301      	movs	r3, #1
 8009bea:	e063      	b.n	8009cb4 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d103      	bne.n	8009bfa <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009bf2:	f001 ff67 	bl	800bac4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	e05c      	b.n	8009cb4 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009bfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d106      	bne.n	8009c0e <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009c00:	f107 0314 	add.w	r3, r7, #20
 8009c04:	4618      	mov	r0, r3
 8009c06:	f001 f87b 	bl	800ad00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009c0e:	f001 ff59 	bl	800bac4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009c12:	f000 fdb3 	bl	800a77c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009c16:	f001 ff21 	bl	800ba5c <vPortEnterCritical>
 8009c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c1c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009c20:	b25b      	sxtb	r3, r3
 8009c22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c26:	d103      	bne.n	8009c30 <xQueueGenericSend+0x17c>
 8009c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c32:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009c36:	b25b      	sxtb	r3, r3
 8009c38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c3c:	d103      	bne.n	8009c46 <xQueueGenericSend+0x192>
 8009c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c40:	2200      	movs	r2, #0
 8009c42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009c46:	f001 ff3d 	bl	800bac4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009c4a:	1d3a      	adds	r2, r7, #4
 8009c4c:	f107 0314 	add.w	r3, r7, #20
 8009c50:	4611      	mov	r1, r2
 8009c52:	4618      	mov	r0, r3
 8009c54:	f001 f86a 	bl	800ad2c <xTaskCheckForTimeOut>
 8009c58:	4603      	mov	r3, r0
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d124      	bne.n	8009ca8 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009c5e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009c60:	f000 faac 	bl	800a1bc <prvIsQueueFull>
 8009c64:	4603      	mov	r3, r0
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d018      	beq.n	8009c9c <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c6c:	3310      	adds	r3, #16
 8009c6e:	687a      	ldr	r2, [r7, #4]
 8009c70:	4611      	mov	r1, r2
 8009c72:	4618      	mov	r0, r3
 8009c74:	f000 ff62 	bl	800ab3c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009c78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009c7a:	f000 fa37 	bl	800a0ec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009c7e:	f000 fd8b 	bl	800a798 <xTaskResumeAll>
 8009c82:	4603      	mov	r3, r0
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	f47f af7c 	bne.w	8009b82 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8009c8a:	4b0c      	ldr	r3, [pc, #48]	; (8009cbc <xQueueGenericSend+0x208>)
 8009c8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c90:	601a      	str	r2, [r3, #0]
 8009c92:	f3bf 8f4f 	dsb	sy
 8009c96:	f3bf 8f6f 	isb	sy
 8009c9a:	e772      	b.n	8009b82 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009c9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009c9e:	f000 fa25 	bl	800a0ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009ca2:	f000 fd79 	bl	800a798 <xTaskResumeAll>
 8009ca6:	e76c      	b.n	8009b82 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009ca8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009caa:	f000 fa1f 	bl	800a0ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009cae:	f000 fd73 	bl	800a798 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009cb2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	3738      	adds	r7, #56	; 0x38
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bd80      	pop	{r7, pc}
 8009cbc:	e000ed04 	.word	0xe000ed04

08009cc0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b08e      	sub	sp, #56	; 0x38
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	60f8      	str	r0, [r7, #12]
 8009cc8:	60b9      	str	r1, [r7, #8]
 8009cca:	607a      	str	r2, [r7, #4]
 8009ccc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d10c      	bne.n	8009cf2 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8009cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cdc:	b672      	cpsid	i
 8009cde:	f383 8811 	msr	BASEPRI, r3
 8009ce2:	f3bf 8f6f 	isb	sy
 8009ce6:	f3bf 8f4f 	dsb	sy
 8009cea:	b662      	cpsie	i
 8009cec:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009cee:	bf00      	nop
 8009cf0:	e7fe      	b.n	8009cf0 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d103      	bne.n	8009d00 <xQueueGenericSendFromISR+0x40>
 8009cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d101      	bne.n	8009d04 <xQueueGenericSendFromISR+0x44>
 8009d00:	2301      	movs	r3, #1
 8009d02:	e000      	b.n	8009d06 <xQueueGenericSendFromISR+0x46>
 8009d04:	2300      	movs	r3, #0
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d10c      	bne.n	8009d24 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8009d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d0e:	b672      	cpsid	i
 8009d10:	f383 8811 	msr	BASEPRI, r3
 8009d14:	f3bf 8f6f 	isb	sy
 8009d18:	f3bf 8f4f 	dsb	sy
 8009d1c:	b662      	cpsie	i
 8009d1e:	623b      	str	r3, [r7, #32]
}
 8009d20:	bf00      	nop
 8009d22:	e7fe      	b.n	8009d22 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	2b02      	cmp	r3, #2
 8009d28:	d103      	bne.n	8009d32 <xQueueGenericSendFromISR+0x72>
 8009d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d2e:	2b01      	cmp	r3, #1
 8009d30:	d101      	bne.n	8009d36 <xQueueGenericSendFromISR+0x76>
 8009d32:	2301      	movs	r3, #1
 8009d34:	e000      	b.n	8009d38 <xQueueGenericSendFromISR+0x78>
 8009d36:	2300      	movs	r3, #0
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d10c      	bne.n	8009d56 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8009d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d40:	b672      	cpsid	i
 8009d42:	f383 8811 	msr	BASEPRI, r3
 8009d46:	f3bf 8f6f 	isb	sy
 8009d4a:	f3bf 8f4f 	dsb	sy
 8009d4e:	b662      	cpsie	i
 8009d50:	61fb      	str	r3, [r7, #28]
}
 8009d52:	bf00      	nop
 8009d54:	e7fe      	b.n	8009d54 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009d56:	f001 ff69 	bl	800bc2c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009d5a:	f3ef 8211 	mrs	r2, BASEPRI
 8009d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d62:	b672      	cpsid	i
 8009d64:	f383 8811 	msr	BASEPRI, r3
 8009d68:	f3bf 8f6f 	isb	sy
 8009d6c:	f3bf 8f4f 	dsb	sy
 8009d70:	b662      	cpsie	i
 8009d72:	61ba      	str	r2, [r7, #24]
 8009d74:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009d76:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009d78:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d82:	429a      	cmp	r2, r3
 8009d84:	d302      	bcc.n	8009d8c <xQueueGenericSendFromISR+0xcc>
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	2b02      	cmp	r3, #2
 8009d8a:	d12c      	bne.n	8009de6 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009d92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009d96:	683a      	ldr	r2, [r7, #0]
 8009d98:	68b9      	ldr	r1, [r7, #8]
 8009d9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009d9c:	f000 f916 	bl	8009fcc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009da0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8009da4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009da8:	d112      	bne.n	8009dd0 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d016      	beq.n	8009de0 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009db4:	3324      	adds	r3, #36	; 0x24
 8009db6:	4618      	mov	r0, r3
 8009db8:	f000 ff14 	bl	800abe4 <xTaskRemoveFromEventList>
 8009dbc:	4603      	mov	r3, r0
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d00e      	beq.n	8009de0 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d00b      	beq.n	8009de0 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2201      	movs	r2, #1
 8009dcc:	601a      	str	r2, [r3, #0]
 8009dce:	e007      	b.n	8009de0 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009dd0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009dd4:	3301      	adds	r3, #1
 8009dd6:	b2db      	uxtb	r3, r3
 8009dd8:	b25a      	sxtb	r2, r3
 8009dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ddc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009de0:	2301      	movs	r3, #1
 8009de2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8009de4:	e001      	b.n	8009dea <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009de6:	2300      	movs	r3, #0
 8009de8:	637b      	str	r3, [r7, #52]	; 0x34
 8009dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dec:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009dee:	693b      	ldr	r3, [r7, #16]
 8009df0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009df4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009df8:	4618      	mov	r0, r3
 8009dfa:	3738      	adds	r7, #56	; 0x38
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bd80      	pop	{r7, pc}

08009e00 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b08c      	sub	sp, #48	; 0x30
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	60f8      	str	r0, [r7, #12]
 8009e08:	60b9      	str	r1, [r7, #8]
 8009e0a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d10c      	bne.n	8009e34 <xQueueReceive+0x34>
	__asm volatile
 8009e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e1e:	b672      	cpsid	i
 8009e20:	f383 8811 	msr	BASEPRI, r3
 8009e24:	f3bf 8f6f 	isb	sy
 8009e28:	f3bf 8f4f 	dsb	sy
 8009e2c:	b662      	cpsie	i
 8009e2e:	623b      	str	r3, [r7, #32]
}
 8009e30:	bf00      	nop
 8009e32:	e7fe      	b.n	8009e32 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d103      	bne.n	8009e42 <xQueueReceive+0x42>
 8009e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d101      	bne.n	8009e46 <xQueueReceive+0x46>
 8009e42:	2301      	movs	r3, #1
 8009e44:	e000      	b.n	8009e48 <xQueueReceive+0x48>
 8009e46:	2300      	movs	r3, #0
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d10c      	bne.n	8009e66 <xQueueReceive+0x66>
	__asm volatile
 8009e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e50:	b672      	cpsid	i
 8009e52:	f383 8811 	msr	BASEPRI, r3
 8009e56:	f3bf 8f6f 	isb	sy
 8009e5a:	f3bf 8f4f 	dsb	sy
 8009e5e:	b662      	cpsie	i
 8009e60:	61fb      	str	r3, [r7, #28]
}
 8009e62:	bf00      	nop
 8009e64:	e7fe      	b.n	8009e64 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009e66:	f001 f8af 	bl	800afc8 <xTaskGetSchedulerState>
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d102      	bne.n	8009e76 <xQueueReceive+0x76>
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d101      	bne.n	8009e7a <xQueueReceive+0x7a>
 8009e76:	2301      	movs	r3, #1
 8009e78:	e000      	b.n	8009e7c <xQueueReceive+0x7c>
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d10c      	bne.n	8009e9a <xQueueReceive+0x9a>
	__asm volatile
 8009e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e84:	b672      	cpsid	i
 8009e86:	f383 8811 	msr	BASEPRI, r3
 8009e8a:	f3bf 8f6f 	isb	sy
 8009e8e:	f3bf 8f4f 	dsb	sy
 8009e92:	b662      	cpsie	i
 8009e94:	61bb      	str	r3, [r7, #24]
}
 8009e96:	bf00      	nop
 8009e98:	e7fe      	b.n	8009e98 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009e9a:	f001 fddf 	bl	800ba5c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ea2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d01f      	beq.n	8009eea <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009eaa:	68b9      	ldr	r1, [r7, #8]
 8009eac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009eae:	f000 f8f7 	bl	800a0a0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eb4:	1e5a      	subs	r2, r3, #1
 8009eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eb8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ebc:	691b      	ldr	r3, [r3, #16]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d00f      	beq.n	8009ee2 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ec4:	3310      	adds	r3, #16
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	f000 fe8c 	bl	800abe4 <xTaskRemoveFromEventList>
 8009ecc:	4603      	mov	r3, r0
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d007      	beq.n	8009ee2 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009ed2:	4b3d      	ldr	r3, [pc, #244]	; (8009fc8 <xQueueReceive+0x1c8>)
 8009ed4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ed8:	601a      	str	r2, [r3, #0]
 8009eda:	f3bf 8f4f 	dsb	sy
 8009ede:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009ee2:	f001 fdef 	bl	800bac4 <vPortExitCritical>
				return pdPASS;
 8009ee6:	2301      	movs	r3, #1
 8009ee8:	e069      	b.n	8009fbe <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d103      	bne.n	8009ef8 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009ef0:	f001 fde8 	bl	800bac4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	e062      	b.n	8009fbe <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d106      	bne.n	8009f0c <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009efe:	f107 0310 	add.w	r3, r7, #16
 8009f02:	4618      	mov	r0, r3
 8009f04:	f000 fefc 	bl	800ad00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009f08:	2301      	movs	r3, #1
 8009f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009f0c:	f001 fdda 	bl	800bac4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009f10:	f000 fc34 	bl	800a77c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009f14:	f001 fda2 	bl	800ba5c <vPortEnterCritical>
 8009f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f1a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009f1e:	b25b      	sxtb	r3, r3
 8009f20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f24:	d103      	bne.n	8009f2e <xQueueReceive+0x12e>
 8009f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f28:	2200      	movs	r2, #0
 8009f2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009f34:	b25b      	sxtb	r3, r3
 8009f36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f3a:	d103      	bne.n	8009f44 <xQueueReceive+0x144>
 8009f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f3e:	2200      	movs	r2, #0
 8009f40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009f44:	f001 fdbe 	bl	800bac4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009f48:	1d3a      	adds	r2, r7, #4
 8009f4a:	f107 0310 	add.w	r3, r7, #16
 8009f4e:	4611      	mov	r1, r2
 8009f50:	4618      	mov	r0, r3
 8009f52:	f000 feeb 	bl	800ad2c <xTaskCheckForTimeOut>
 8009f56:	4603      	mov	r3, r0
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d123      	bne.n	8009fa4 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009f5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f5e:	f000 f917 	bl	800a190 <prvIsQueueEmpty>
 8009f62:	4603      	mov	r3, r0
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d017      	beq.n	8009f98 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f6a:	3324      	adds	r3, #36	; 0x24
 8009f6c:	687a      	ldr	r2, [r7, #4]
 8009f6e:	4611      	mov	r1, r2
 8009f70:	4618      	mov	r0, r3
 8009f72:	f000 fde3 	bl	800ab3c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009f76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f78:	f000 f8b8 	bl	800a0ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009f7c:	f000 fc0c 	bl	800a798 <xTaskResumeAll>
 8009f80:	4603      	mov	r3, r0
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d189      	bne.n	8009e9a <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8009f86:	4b10      	ldr	r3, [pc, #64]	; (8009fc8 <xQueueReceive+0x1c8>)
 8009f88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f8c:	601a      	str	r2, [r3, #0]
 8009f8e:	f3bf 8f4f 	dsb	sy
 8009f92:	f3bf 8f6f 	isb	sy
 8009f96:	e780      	b.n	8009e9a <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009f98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f9a:	f000 f8a7 	bl	800a0ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009f9e:	f000 fbfb 	bl	800a798 <xTaskResumeAll>
 8009fa2:	e77a      	b.n	8009e9a <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009fa4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009fa6:	f000 f8a1 	bl	800a0ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009faa:	f000 fbf5 	bl	800a798 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009fae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009fb0:	f000 f8ee 	bl	800a190 <prvIsQueueEmpty>
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	f43f af6f 	beq.w	8009e9a <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009fbc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	3730      	adds	r7, #48	; 0x30
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	bd80      	pop	{r7, pc}
 8009fc6:	bf00      	nop
 8009fc8:	e000ed04 	.word	0xe000ed04

08009fcc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b086      	sub	sp, #24
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	60f8      	str	r0, [r7, #12]
 8009fd4:	60b9      	str	r1, [r7, #8]
 8009fd6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009fd8:	2300      	movs	r3, #0
 8009fda:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fe0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d10d      	bne.n	800a006 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d14d      	bne.n	800a08e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	689b      	ldr	r3, [r3, #8]
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	f001 f804 	bl	800b004 <xTaskPriorityDisinherit>
 8009ffc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	2200      	movs	r2, #0
 800a002:	609a      	str	r2, [r3, #8]
 800a004:	e043      	b.n	800a08e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d119      	bne.n	800a040 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	6858      	ldr	r0, [r3, #4]
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a014:	461a      	mov	r2, r3
 800a016:	68b9      	ldr	r1, [r7, #8]
 800a018:	f011 fb29 	bl	801b66e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	685a      	ldr	r2, [r3, #4]
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a024:	441a      	add	r2, r3
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	685a      	ldr	r2, [r3, #4]
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	689b      	ldr	r3, [r3, #8]
 800a032:	429a      	cmp	r2, r3
 800a034:	d32b      	bcc.n	800a08e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	681a      	ldr	r2, [r3, #0]
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	605a      	str	r2, [r3, #4]
 800a03e:	e026      	b.n	800a08e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	68d8      	ldr	r0, [r3, #12]
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a048:	461a      	mov	r2, r3
 800a04a:	68b9      	ldr	r1, [r7, #8]
 800a04c:	f011 fb0f 	bl	801b66e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	68da      	ldr	r2, [r3, #12]
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a058:	425b      	negs	r3, r3
 800a05a:	441a      	add	r2, r3
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	68da      	ldr	r2, [r3, #12]
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	429a      	cmp	r2, r3
 800a06a:	d207      	bcs.n	800a07c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	689a      	ldr	r2, [r3, #8]
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a074:	425b      	negs	r3, r3
 800a076:	441a      	add	r2, r3
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2b02      	cmp	r3, #2
 800a080:	d105      	bne.n	800a08e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a082:	693b      	ldr	r3, [r7, #16]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d002      	beq.n	800a08e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a088:	693b      	ldr	r3, [r7, #16]
 800a08a:	3b01      	subs	r3, #1
 800a08c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a08e:	693b      	ldr	r3, [r7, #16]
 800a090:	1c5a      	adds	r2, r3, #1
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a096:	697b      	ldr	r3, [r7, #20]
}
 800a098:	4618      	mov	r0, r3
 800a09a:	3718      	adds	r7, #24
 800a09c:	46bd      	mov	sp, r7
 800a09e:	bd80      	pop	{r7, pc}

0800a0a0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b082      	sub	sp, #8
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
 800a0a8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d018      	beq.n	800a0e4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	68da      	ldr	r2, [r3, #12]
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0ba:	441a      	add	r2, r3
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	68da      	ldr	r2, [r3, #12]
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	689b      	ldr	r3, [r3, #8]
 800a0c8:	429a      	cmp	r2, r3
 800a0ca:	d303      	bcc.n	800a0d4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681a      	ldr	r2, [r3, #0]
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	68d9      	ldr	r1, [r3, #12]
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0dc:	461a      	mov	r2, r3
 800a0de:	6838      	ldr	r0, [r7, #0]
 800a0e0:	f011 fac5 	bl	801b66e <memcpy>
	}
}
 800a0e4:	bf00      	nop
 800a0e6:	3708      	adds	r7, #8
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	bd80      	pop	{r7, pc}

0800a0ec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b084      	sub	sp, #16
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a0f4:	f001 fcb2 	bl	800ba5c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a0fe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a100:	e011      	b.n	800a126 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a106:	2b00      	cmp	r3, #0
 800a108:	d012      	beq.n	800a130 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	3324      	adds	r3, #36	; 0x24
 800a10e:	4618      	mov	r0, r3
 800a110:	f000 fd68 	bl	800abe4 <xTaskRemoveFromEventList>
 800a114:	4603      	mov	r3, r0
 800a116:	2b00      	cmp	r3, #0
 800a118:	d001      	beq.n	800a11e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a11a:	f000 fe6d 	bl	800adf8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a11e:	7bfb      	ldrb	r3, [r7, #15]
 800a120:	3b01      	subs	r3, #1
 800a122:	b2db      	uxtb	r3, r3
 800a124:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a126:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	dce9      	bgt.n	800a102 <prvUnlockQueue+0x16>
 800a12e:	e000      	b.n	800a132 <prvUnlockQueue+0x46>
					break;
 800a130:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	22ff      	movs	r2, #255	; 0xff
 800a136:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a13a:	f001 fcc3 	bl	800bac4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a13e:	f001 fc8d 	bl	800ba5c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a148:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a14a:	e011      	b.n	800a170 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	691b      	ldr	r3, [r3, #16]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d012      	beq.n	800a17a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	3310      	adds	r3, #16
 800a158:	4618      	mov	r0, r3
 800a15a:	f000 fd43 	bl	800abe4 <xTaskRemoveFromEventList>
 800a15e:	4603      	mov	r3, r0
 800a160:	2b00      	cmp	r3, #0
 800a162:	d001      	beq.n	800a168 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a164:	f000 fe48 	bl	800adf8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a168:	7bbb      	ldrb	r3, [r7, #14]
 800a16a:	3b01      	subs	r3, #1
 800a16c:	b2db      	uxtb	r3, r3
 800a16e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a170:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a174:	2b00      	cmp	r3, #0
 800a176:	dce9      	bgt.n	800a14c <prvUnlockQueue+0x60>
 800a178:	e000      	b.n	800a17c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a17a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	22ff      	movs	r2, #255	; 0xff
 800a180:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a184:	f001 fc9e 	bl	800bac4 <vPortExitCritical>
}
 800a188:	bf00      	nop
 800a18a:	3710      	adds	r7, #16
 800a18c:	46bd      	mov	sp, r7
 800a18e:	bd80      	pop	{r7, pc}

0800a190 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b084      	sub	sp, #16
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a198:	f001 fc60 	bl	800ba5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d102      	bne.n	800a1aa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a1a4:	2301      	movs	r3, #1
 800a1a6:	60fb      	str	r3, [r7, #12]
 800a1a8:	e001      	b.n	800a1ae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a1ae:	f001 fc89 	bl	800bac4 <vPortExitCritical>

	return xReturn;
 800a1b2:	68fb      	ldr	r3, [r7, #12]
}
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	3710      	adds	r7, #16
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	bd80      	pop	{r7, pc}

0800a1bc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b084      	sub	sp, #16
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a1c4:	f001 fc4a 	bl	800ba5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1d0:	429a      	cmp	r2, r3
 800a1d2:	d102      	bne.n	800a1da <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	60fb      	str	r3, [r7, #12]
 800a1d8:	e001      	b.n	800a1de <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a1da:	2300      	movs	r3, #0
 800a1dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a1de:	f001 fc71 	bl	800bac4 <vPortExitCritical>

	return xReturn;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
}
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	3710      	adds	r7, #16
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	bd80      	pop	{r7, pc}

0800a1ec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a1ec:	b480      	push	{r7}
 800a1ee:	b085      	sub	sp, #20
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
 800a1f4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	60fb      	str	r3, [r7, #12]
 800a1fa:	e014      	b.n	800a226 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a1fc:	4a0f      	ldr	r2, [pc, #60]	; (800a23c <vQueueAddToRegistry+0x50>)
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d10b      	bne.n	800a220 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a208:	490c      	ldr	r1, [pc, #48]	; (800a23c <vQueueAddToRegistry+0x50>)
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	683a      	ldr	r2, [r7, #0]
 800a20e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a212:	4a0a      	ldr	r2, [pc, #40]	; (800a23c <vQueueAddToRegistry+0x50>)
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	00db      	lsls	r3, r3, #3
 800a218:	4413      	add	r3, r2
 800a21a:	687a      	ldr	r2, [r7, #4]
 800a21c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a21e:	e006      	b.n	800a22e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	3301      	adds	r3, #1
 800a224:	60fb      	str	r3, [r7, #12]
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	2b07      	cmp	r3, #7
 800a22a:	d9e7      	bls.n	800a1fc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a22c:	bf00      	nop
 800a22e:	bf00      	nop
 800a230:	3714      	adds	r7, #20
 800a232:	46bd      	mov	sp, r7
 800a234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a238:	4770      	bx	lr
 800a23a:	bf00      	nop
 800a23c:	200076f0 	.word	0x200076f0

0800a240 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a240:	b580      	push	{r7, lr}
 800a242:	b086      	sub	sp, #24
 800a244:	af00      	add	r7, sp, #0
 800a246:	60f8      	str	r0, [r7, #12]
 800a248:	60b9      	str	r1, [r7, #8]
 800a24a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a250:	f001 fc04 	bl	800ba5c <vPortEnterCritical>
 800a254:	697b      	ldr	r3, [r7, #20]
 800a256:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a25a:	b25b      	sxtb	r3, r3
 800a25c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a260:	d103      	bne.n	800a26a <vQueueWaitForMessageRestricted+0x2a>
 800a262:	697b      	ldr	r3, [r7, #20]
 800a264:	2200      	movs	r2, #0
 800a266:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a26a:	697b      	ldr	r3, [r7, #20]
 800a26c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a270:	b25b      	sxtb	r3, r3
 800a272:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a276:	d103      	bne.n	800a280 <vQueueWaitForMessageRestricted+0x40>
 800a278:	697b      	ldr	r3, [r7, #20]
 800a27a:	2200      	movs	r2, #0
 800a27c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a280:	f001 fc20 	bl	800bac4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a284:	697b      	ldr	r3, [r7, #20]
 800a286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d106      	bne.n	800a29a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a28c:	697b      	ldr	r3, [r7, #20]
 800a28e:	3324      	adds	r3, #36	; 0x24
 800a290:	687a      	ldr	r2, [r7, #4]
 800a292:	68b9      	ldr	r1, [r7, #8]
 800a294:	4618      	mov	r0, r3
 800a296:	f000 fc77 	bl	800ab88 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a29a:	6978      	ldr	r0, [r7, #20]
 800a29c:	f7ff ff26 	bl	800a0ec <prvUnlockQueue>
	}
 800a2a0:	bf00      	nop
 800a2a2:	3718      	adds	r7, #24
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	bd80      	pop	{r7, pc}

0800a2a8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b08e      	sub	sp, #56	; 0x38
 800a2ac:	af04      	add	r7, sp, #16
 800a2ae:	60f8      	str	r0, [r7, #12]
 800a2b0:	60b9      	str	r1, [r7, #8]
 800a2b2:	607a      	str	r2, [r7, #4]
 800a2b4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a2b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d10c      	bne.n	800a2d6 <xTaskCreateStatic+0x2e>
	__asm volatile
 800a2bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2c0:	b672      	cpsid	i
 800a2c2:	f383 8811 	msr	BASEPRI, r3
 800a2c6:	f3bf 8f6f 	isb	sy
 800a2ca:	f3bf 8f4f 	dsb	sy
 800a2ce:	b662      	cpsie	i
 800a2d0:	623b      	str	r3, [r7, #32]
}
 800a2d2:	bf00      	nop
 800a2d4:	e7fe      	b.n	800a2d4 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800a2d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d10c      	bne.n	800a2f6 <xTaskCreateStatic+0x4e>
	__asm volatile
 800a2dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2e0:	b672      	cpsid	i
 800a2e2:	f383 8811 	msr	BASEPRI, r3
 800a2e6:	f3bf 8f6f 	isb	sy
 800a2ea:	f3bf 8f4f 	dsb	sy
 800a2ee:	b662      	cpsie	i
 800a2f0:	61fb      	str	r3, [r7, #28]
}
 800a2f2:	bf00      	nop
 800a2f4:	e7fe      	b.n	800a2f4 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a2f6:	23a8      	movs	r3, #168	; 0xa8
 800a2f8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a2fa:	693b      	ldr	r3, [r7, #16]
 800a2fc:	2ba8      	cmp	r3, #168	; 0xa8
 800a2fe:	d00c      	beq.n	800a31a <xTaskCreateStatic+0x72>
	__asm volatile
 800a300:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a304:	b672      	cpsid	i
 800a306:	f383 8811 	msr	BASEPRI, r3
 800a30a:	f3bf 8f6f 	isb	sy
 800a30e:	f3bf 8f4f 	dsb	sy
 800a312:	b662      	cpsie	i
 800a314:	61bb      	str	r3, [r7, #24]
}
 800a316:	bf00      	nop
 800a318:	e7fe      	b.n	800a318 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a31a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a31c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d01e      	beq.n	800a360 <xTaskCreateStatic+0xb8>
 800a322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a324:	2b00      	cmp	r3, #0
 800a326:	d01b      	beq.n	800a360 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a32a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a32c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a32e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a330:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a334:	2202      	movs	r2, #2
 800a336:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a33a:	2300      	movs	r3, #0
 800a33c:	9303      	str	r3, [sp, #12]
 800a33e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a340:	9302      	str	r3, [sp, #8]
 800a342:	f107 0314 	add.w	r3, r7, #20
 800a346:	9301      	str	r3, [sp, #4]
 800a348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a34a:	9300      	str	r3, [sp, #0]
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	687a      	ldr	r2, [r7, #4]
 800a350:	68b9      	ldr	r1, [r7, #8]
 800a352:	68f8      	ldr	r0, [r7, #12]
 800a354:	f000 f850 	bl	800a3f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a358:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a35a:	f000 f8f5 	bl	800a548 <prvAddNewTaskToReadyList>
 800a35e:	e001      	b.n	800a364 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800a360:	2300      	movs	r3, #0
 800a362:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a364:	697b      	ldr	r3, [r7, #20]
	}
 800a366:	4618      	mov	r0, r3
 800a368:	3728      	adds	r7, #40	; 0x28
 800a36a:	46bd      	mov	sp, r7
 800a36c:	bd80      	pop	{r7, pc}

0800a36e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a36e:	b580      	push	{r7, lr}
 800a370:	b08c      	sub	sp, #48	; 0x30
 800a372:	af04      	add	r7, sp, #16
 800a374:	60f8      	str	r0, [r7, #12]
 800a376:	60b9      	str	r1, [r7, #8]
 800a378:	603b      	str	r3, [r7, #0]
 800a37a:	4613      	mov	r3, r2
 800a37c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a37e:	88fb      	ldrh	r3, [r7, #6]
 800a380:	009b      	lsls	r3, r3, #2
 800a382:	4618      	mov	r0, r3
 800a384:	f001 fc96 	bl	800bcb4 <pvPortMalloc>
 800a388:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a38a:	697b      	ldr	r3, [r7, #20]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d00e      	beq.n	800a3ae <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a390:	20a8      	movs	r0, #168	; 0xa8
 800a392:	f001 fc8f 	bl	800bcb4 <pvPortMalloc>
 800a396:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a398:	69fb      	ldr	r3, [r7, #28]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d003      	beq.n	800a3a6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a39e:	69fb      	ldr	r3, [r7, #28]
 800a3a0:	697a      	ldr	r2, [r7, #20]
 800a3a2:	631a      	str	r2, [r3, #48]	; 0x30
 800a3a4:	e005      	b.n	800a3b2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a3a6:	6978      	ldr	r0, [r7, #20]
 800a3a8:	f001 fd4e 	bl	800be48 <vPortFree>
 800a3ac:	e001      	b.n	800a3b2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a3b2:	69fb      	ldr	r3, [r7, #28]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d017      	beq.n	800a3e8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a3b8:	69fb      	ldr	r3, [r7, #28]
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a3c0:	88fa      	ldrh	r2, [r7, #6]
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	9303      	str	r3, [sp, #12]
 800a3c6:	69fb      	ldr	r3, [r7, #28]
 800a3c8:	9302      	str	r3, [sp, #8]
 800a3ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3cc:	9301      	str	r3, [sp, #4]
 800a3ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3d0:	9300      	str	r3, [sp, #0]
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	68b9      	ldr	r1, [r7, #8]
 800a3d6:	68f8      	ldr	r0, [r7, #12]
 800a3d8:	f000 f80e 	bl	800a3f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a3dc:	69f8      	ldr	r0, [r7, #28]
 800a3de:	f000 f8b3 	bl	800a548 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a3e2:	2301      	movs	r3, #1
 800a3e4:	61bb      	str	r3, [r7, #24]
 800a3e6:	e002      	b.n	800a3ee <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a3e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a3ec:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a3ee:	69bb      	ldr	r3, [r7, #24]
	}
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	3720      	adds	r7, #32
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	bd80      	pop	{r7, pc}

0800a3f8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b088      	sub	sp, #32
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	60f8      	str	r0, [r7, #12]
 800a400:	60b9      	str	r1, [r7, #8]
 800a402:	607a      	str	r2, [r7, #4]
 800a404:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a408:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	009b      	lsls	r3, r3, #2
 800a40e:	461a      	mov	r2, r3
 800a410:	21a5      	movs	r1, #165	; 0xa5
 800a412:	f010 ffb7 	bl	801b384 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a418:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a41a:	6879      	ldr	r1, [r7, #4]
 800a41c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800a420:	440b      	add	r3, r1
 800a422:	009b      	lsls	r3, r3, #2
 800a424:	4413      	add	r3, r2
 800a426:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a428:	69bb      	ldr	r3, [r7, #24]
 800a42a:	f023 0307 	bic.w	r3, r3, #7
 800a42e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a430:	69bb      	ldr	r3, [r7, #24]
 800a432:	f003 0307 	and.w	r3, r3, #7
 800a436:	2b00      	cmp	r3, #0
 800a438:	d00c      	beq.n	800a454 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800a43a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a43e:	b672      	cpsid	i
 800a440:	f383 8811 	msr	BASEPRI, r3
 800a444:	f3bf 8f6f 	isb	sy
 800a448:	f3bf 8f4f 	dsb	sy
 800a44c:	b662      	cpsie	i
 800a44e:	617b      	str	r3, [r7, #20]
}
 800a450:	bf00      	nop
 800a452:	e7fe      	b.n	800a452 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a454:	68bb      	ldr	r3, [r7, #8]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d01f      	beq.n	800a49a <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a45a:	2300      	movs	r3, #0
 800a45c:	61fb      	str	r3, [r7, #28]
 800a45e:	e012      	b.n	800a486 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a460:	68ba      	ldr	r2, [r7, #8]
 800a462:	69fb      	ldr	r3, [r7, #28]
 800a464:	4413      	add	r3, r2
 800a466:	7819      	ldrb	r1, [r3, #0]
 800a468:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a46a:	69fb      	ldr	r3, [r7, #28]
 800a46c:	4413      	add	r3, r2
 800a46e:	3334      	adds	r3, #52	; 0x34
 800a470:	460a      	mov	r2, r1
 800a472:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a474:	68ba      	ldr	r2, [r7, #8]
 800a476:	69fb      	ldr	r3, [r7, #28]
 800a478:	4413      	add	r3, r2
 800a47a:	781b      	ldrb	r3, [r3, #0]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d006      	beq.n	800a48e <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a480:	69fb      	ldr	r3, [r7, #28]
 800a482:	3301      	adds	r3, #1
 800a484:	61fb      	str	r3, [r7, #28]
 800a486:	69fb      	ldr	r3, [r7, #28]
 800a488:	2b0f      	cmp	r3, #15
 800a48a:	d9e9      	bls.n	800a460 <prvInitialiseNewTask+0x68>
 800a48c:	e000      	b.n	800a490 <prvInitialiseNewTask+0x98>
			{
				break;
 800a48e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a492:	2200      	movs	r2, #0
 800a494:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a498:	e003      	b.n	800a4a2 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a49a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a49c:	2200      	movs	r2, #0
 800a49e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a4a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4a4:	2b37      	cmp	r3, #55	; 0x37
 800a4a6:	d901      	bls.n	800a4ac <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a4a8:	2337      	movs	r3, #55	; 0x37
 800a4aa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a4ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a4b0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a4b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a4b6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a4b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a4be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4c0:	3304      	adds	r3, #4
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	f7ff f952 	bl	800976c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a4c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4ca:	3318      	adds	r3, #24
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	f7ff f94d 	bl	800976c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a4d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a4d6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4da:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a4de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4e0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a4e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a4e6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a4e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a4f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a4f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4fa:	3354      	adds	r3, #84	; 0x54
 800a4fc:	224c      	movs	r2, #76	; 0x4c
 800a4fe:	2100      	movs	r1, #0
 800a500:	4618      	mov	r0, r3
 800a502:	f010 ff3f 	bl	801b384 <memset>
 800a506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a508:	4a0c      	ldr	r2, [pc, #48]	; (800a53c <prvInitialiseNewTask+0x144>)
 800a50a:	659a      	str	r2, [r3, #88]	; 0x58
 800a50c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a50e:	4a0c      	ldr	r2, [pc, #48]	; (800a540 <prvInitialiseNewTask+0x148>)
 800a510:	65da      	str	r2, [r3, #92]	; 0x5c
 800a512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a514:	4a0b      	ldr	r2, [pc, #44]	; (800a544 <prvInitialiseNewTask+0x14c>)
 800a516:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a518:	683a      	ldr	r2, [r7, #0]
 800a51a:	68f9      	ldr	r1, [r7, #12]
 800a51c:	69b8      	ldr	r0, [r7, #24]
 800a51e:	f001 f993 	bl	800b848 <pxPortInitialiseStack>
 800a522:	4602      	mov	r2, r0
 800a524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a526:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d002      	beq.n	800a534 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a52e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a530:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a532:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a534:	bf00      	nop
 800a536:	3720      	adds	r7, #32
 800a538:	46bd      	mov	sp, r7
 800a53a:	bd80      	pop	{r7, pc}
 800a53c:	20010a38 	.word	0x20010a38
 800a540:	20010aa0 	.word	0x20010aa0
 800a544:	20010b08 	.word	0x20010b08

0800a548 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b082      	sub	sp, #8
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a550:	f001 fa84 	bl	800ba5c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a554:	4b2d      	ldr	r3, [pc, #180]	; (800a60c <prvAddNewTaskToReadyList+0xc4>)
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	3301      	adds	r3, #1
 800a55a:	4a2c      	ldr	r2, [pc, #176]	; (800a60c <prvAddNewTaskToReadyList+0xc4>)
 800a55c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a55e:	4b2c      	ldr	r3, [pc, #176]	; (800a610 <prvAddNewTaskToReadyList+0xc8>)
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d109      	bne.n	800a57a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a566:	4a2a      	ldr	r2, [pc, #168]	; (800a610 <prvAddNewTaskToReadyList+0xc8>)
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a56c:	4b27      	ldr	r3, [pc, #156]	; (800a60c <prvAddNewTaskToReadyList+0xc4>)
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	2b01      	cmp	r3, #1
 800a572:	d110      	bne.n	800a596 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a574:	f000 fc64 	bl	800ae40 <prvInitialiseTaskLists>
 800a578:	e00d      	b.n	800a596 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a57a:	4b26      	ldr	r3, [pc, #152]	; (800a614 <prvAddNewTaskToReadyList+0xcc>)
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d109      	bne.n	800a596 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a582:	4b23      	ldr	r3, [pc, #140]	; (800a610 <prvAddNewTaskToReadyList+0xc8>)
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a58c:	429a      	cmp	r2, r3
 800a58e:	d802      	bhi.n	800a596 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a590:	4a1f      	ldr	r2, [pc, #124]	; (800a610 <prvAddNewTaskToReadyList+0xc8>)
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a596:	4b20      	ldr	r3, [pc, #128]	; (800a618 <prvAddNewTaskToReadyList+0xd0>)
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	3301      	adds	r3, #1
 800a59c:	4a1e      	ldr	r2, [pc, #120]	; (800a618 <prvAddNewTaskToReadyList+0xd0>)
 800a59e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a5a0:	4b1d      	ldr	r3, [pc, #116]	; (800a618 <prvAddNewTaskToReadyList+0xd0>)
 800a5a2:	681a      	ldr	r2, [r3, #0]
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5ac:	4b1b      	ldr	r3, [pc, #108]	; (800a61c <prvAddNewTaskToReadyList+0xd4>)
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	429a      	cmp	r2, r3
 800a5b2:	d903      	bls.n	800a5bc <prvAddNewTaskToReadyList+0x74>
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5b8:	4a18      	ldr	r2, [pc, #96]	; (800a61c <prvAddNewTaskToReadyList+0xd4>)
 800a5ba:	6013      	str	r3, [r2, #0]
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5c0:	4613      	mov	r3, r2
 800a5c2:	009b      	lsls	r3, r3, #2
 800a5c4:	4413      	add	r3, r2
 800a5c6:	009b      	lsls	r3, r3, #2
 800a5c8:	4a15      	ldr	r2, [pc, #84]	; (800a620 <prvAddNewTaskToReadyList+0xd8>)
 800a5ca:	441a      	add	r2, r3
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	3304      	adds	r3, #4
 800a5d0:	4619      	mov	r1, r3
 800a5d2:	4610      	mov	r0, r2
 800a5d4:	f7ff f8d7 	bl	8009786 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a5d8:	f001 fa74 	bl	800bac4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a5dc:	4b0d      	ldr	r3, [pc, #52]	; (800a614 <prvAddNewTaskToReadyList+0xcc>)
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d00e      	beq.n	800a602 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a5e4:	4b0a      	ldr	r3, [pc, #40]	; (800a610 <prvAddNewTaskToReadyList+0xc8>)
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5ee:	429a      	cmp	r2, r3
 800a5f0:	d207      	bcs.n	800a602 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a5f2:	4b0c      	ldr	r3, [pc, #48]	; (800a624 <prvAddNewTaskToReadyList+0xdc>)
 800a5f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5f8:	601a      	str	r2, [r3, #0]
 800a5fa:	f3bf 8f4f 	dsb	sy
 800a5fe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a602:	bf00      	nop
 800a604:	3708      	adds	r7, #8
 800a606:	46bd      	mov	sp, r7
 800a608:	bd80      	pop	{r7, pc}
 800a60a:	bf00      	nop
 800a60c:	20007c04 	.word	0x20007c04
 800a610:	20007730 	.word	0x20007730
 800a614:	20007c10 	.word	0x20007c10
 800a618:	20007c20 	.word	0x20007c20
 800a61c:	20007c0c 	.word	0x20007c0c
 800a620:	20007734 	.word	0x20007734
 800a624:	e000ed04 	.word	0xe000ed04

0800a628 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b084      	sub	sp, #16
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a630:	2300      	movs	r3, #0
 800a632:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d019      	beq.n	800a66e <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a63a:	4b14      	ldr	r3, [pc, #80]	; (800a68c <vTaskDelay+0x64>)
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d00c      	beq.n	800a65c <vTaskDelay+0x34>
	__asm volatile
 800a642:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a646:	b672      	cpsid	i
 800a648:	f383 8811 	msr	BASEPRI, r3
 800a64c:	f3bf 8f6f 	isb	sy
 800a650:	f3bf 8f4f 	dsb	sy
 800a654:	b662      	cpsie	i
 800a656:	60bb      	str	r3, [r7, #8]
}
 800a658:	bf00      	nop
 800a65a:	e7fe      	b.n	800a65a <vTaskDelay+0x32>
			vTaskSuspendAll();
 800a65c:	f000 f88e 	bl	800a77c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a660:	2100      	movs	r1, #0
 800a662:	6878      	ldr	r0, [r7, #4]
 800a664:	f000 fd40 	bl	800b0e8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a668:	f000 f896 	bl	800a798 <xTaskResumeAll>
 800a66c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d107      	bne.n	800a684 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800a674:	4b06      	ldr	r3, [pc, #24]	; (800a690 <vTaskDelay+0x68>)
 800a676:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a67a:	601a      	str	r2, [r3, #0]
 800a67c:	f3bf 8f4f 	dsb	sy
 800a680:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a684:	bf00      	nop
 800a686:	3710      	adds	r7, #16
 800a688:	46bd      	mov	sp, r7
 800a68a:	bd80      	pop	{r7, pc}
 800a68c:	20007c2c 	.word	0x20007c2c
 800a690:	e000ed04 	.word	0xe000ed04

0800a694 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b08a      	sub	sp, #40	; 0x28
 800a698:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a69a:	2300      	movs	r3, #0
 800a69c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a69e:	2300      	movs	r3, #0
 800a6a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a6a2:	463a      	mov	r2, r7
 800a6a4:	1d39      	adds	r1, r7, #4
 800a6a6:	f107 0308 	add.w	r3, r7, #8
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	f7ff f80a 	bl	80096c4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a6b0:	6839      	ldr	r1, [r7, #0]
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	68ba      	ldr	r2, [r7, #8]
 800a6b6:	9202      	str	r2, [sp, #8]
 800a6b8:	9301      	str	r3, [sp, #4]
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	9300      	str	r3, [sp, #0]
 800a6be:	2300      	movs	r3, #0
 800a6c0:	460a      	mov	r2, r1
 800a6c2:	4926      	ldr	r1, [pc, #152]	; (800a75c <vTaskStartScheduler+0xc8>)
 800a6c4:	4826      	ldr	r0, [pc, #152]	; (800a760 <vTaskStartScheduler+0xcc>)
 800a6c6:	f7ff fdef 	bl	800a2a8 <xTaskCreateStatic>
 800a6ca:	4603      	mov	r3, r0
 800a6cc:	4a25      	ldr	r2, [pc, #148]	; (800a764 <vTaskStartScheduler+0xd0>)
 800a6ce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a6d0:	4b24      	ldr	r3, [pc, #144]	; (800a764 <vTaskStartScheduler+0xd0>)
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d002      	beq.n	800a6de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a6d8:	2301      	movs	r3, #1
 800a6da:	617b      	str	r3, [r7, #20]
 800a6dc:	e001      	b.n	800a6e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a6de:	2300      	movs	r3, #0
 800a6e0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a6e2:	697b      	ldr	r3, [r7, #20]
 800a6e4:	2b01      	cmp	r3, #1
 800a6e6:	d102      	bne.n	800a6ee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a6e8:	f000 fd52 	bl	800b190 <xTimerCreateTimerTask>
 800a6ec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a6ee:	697b      	ldr	r3, [r7, #20]
 800a6f0:	2b01      	cmp	r3, #1
 800a6f2:	d11d      	bne.n	800a730 <vTaskStartScheduler+0x9c>
	__asm volatile
 800a6f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6f8:	b672      	cpsid	i
 800a6fa:	f383 8811 	msr	BASEPRI, r3
 800a6fe:	f3bf 8f6f 	isb	sy
 800a702:	f3bf 8f4f 	dsb	sy
 800a706:	b662      	cpsie	i
 800a708:	613b      	str	r3, [r7, #16]
}
 800a70a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a70c:	4b16      	ldr	r3, [pc, #88]	; (800a768 <vTaskStartScheduler+0xd4>)
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	3354      	adds	r3, #84	; 0x54
 800a712:	4a16      	ldr	r2, [pc, #88]	; (800a76c <vTaskStartScheduler+0xd8>)
 800a714:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a716:	4b16      	ldr	r3, [pc, #88]	; (800a770 <vTaskStartScheduler+0xdc>)
 800a718:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a71c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a71e:	4b15      	ldr	r3, [pc, #84]	; (800a774 <vTaskStartScheduler+0xe0>)
 800a720:	2201      	movs	r2, #1
 800a722:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a724:	4b14      	ldr	r3, [pc, #80]	; (800a778 <vTaskStartScheduler+0xe4>)
 800a726:	2200      	movs	r2, #0
 800a728:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a72a:	f001 f919 	bl	800b960 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a72e:	e010      	b.n	800a752 <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a730:	697b      	ldr	r3, [r7, #20]
 800a732:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a736:	d10c      	bne.n	800a752 <vTaskStartScheduler+0xbe>
	__asm volatile
 800a738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a73c:	b672      	cpsid	i
 800a73e:	f383 8811 	msr	BASEPRI, r3
 800a742:	f3bf 8f6f 	isb	sy
 800a746:	f3bf 8f4f 	dsb	sy
 800a74a:	b662      	cpsie	i
 800a74c:	60fb      	str	r3, [r7, #12]
}
 800a74e:	bf00      	nop
 800a750:	e7fe      	b.n	800a750 <vTaskStartScheduler+0xbc>
}
 800a752:	bf00      	nop
 800a754:	3718      	adds	r7, #24
 800a756:	46bd      	mov	sp, r7
 800a758:	bd80      	pop	{r7, pc}
 800a75a:	bf00      	nop
 800a75c:	0801c3fc 	.word	0x0801c3fc
 800a760:	0800ae11 	.word	0x0800ae11
 800a764:	20007c28 	.word	0x20007c28
 800a768:	20007730 	.word	0x20007730
 800a76c:	20002138 	.word	0x20002138
 800a770:	20007c24 	.word	0x20007c24
 800a774:	20007c10 	.word	0x20007c10
 800a778:	20007c08 	.word	0x20007c08

0800a77c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a77c:	b480      	push	{r7}
 800a77e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a780:	4b04      	ldr	r3, [pc, #16]	; (800a794 <vTaskSuspendAll+0x18>)
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	3301      	adds	r3, #1
 800a786:	4a03      	ldr	r2, [pc, #12]	; (800a794 <vTaskSuspendAll+0x18>)
 800a788:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800a78a:	bf00      	nop
 800a78c:	46bd      	mov	sp, r7
 800a78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a792:	4770      	bx	lr
 800a794:	20007c2c 	.word	0x20007c2c

0800a798 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b084      	sub	sp, #16
 800a79c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a79e:	2300      	movs	r3, #0
 800a7a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a7a6:	4b43      	ldr	r3, [pc, #268]	; (800a8b4 <xTaskResumeAll+0x11c>)
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d10c      	bne.n	800a7c8 <xTaskResumeAll+0x30>
	__asm volatile
 800a7ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7b2:	b672      	cpsid	i
 800a7b4:	f383 8811 	msr	BASEPRI, r3
 800a7b8:	f3bf 8f6f 	isb	sy
 800a7bc:	f3bf 8f4f 	dsb	sy
 800a7c0:	b662      	cpsie	i
 800a7c2:	603b      	str	r3, [r7, #0]
}
 800a7c4:	bf00      	nop
 800a7c6:	e7fe      	b.n	800a7c6 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a7c8:	f001 f948 	bl	800ba5c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a7cc:	4b39      	ldr	r3, [pc, #228]	; (800a8b4 <xTaskResumeAll+0x11c>)
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	3b01      	subs	r3, #1
 800a7d2:	4a38      	ldr	r2, [pc, #224]	; (800a8b4 <xTaskResumeAll+0x11c>)
 800a7d4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a7d6:	4b37      	ldr	r3, [pc, #220]	; (800a8b4 <xTaskResumeAll+0x11c>)
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d162      	bne.n	800a8a4 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a7de:	4b36      	ldr	r3, [pc, #216]	; (800a8b8 <xTaskResumeAll+0x120>)
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d05e      	beq.n	800a8a4 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a7e6:	e02f      	b.n	800a848 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a7e8:	4b34      	ldr	r3, [pc, #208]	; (800a8bc <xTaskResumeAll+0x124>)
 800a7ea:	68db      	ldr	r3, [r3, #12]
 800a7ec:	68db      	ldr	r3, [r3, #12]
 800a7ee:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	3318      	adds	r3, #24
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	f7ff f823 	bl	8009840 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	3304      	adds	r3, #4
 800a7fe:	4618      	mov	r0, r3
 800a800:	f7ff f81e 	bl	8009840 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a808:	4b2d      	ldr	r3, [pc, #180]	; (800a8c0 <xTaskResumeAll+0x128>)
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	429a      	cmp	r2, r3
 800a80e:	d903      	bls.n	800a818 <xTaskResumeAll+0x80>
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a814:	4a2a      	ldr	r2, [pc, #168]	; (800a8c0 <xTaskResumeAll+0x128>)
 800a816:	6013      	str	r3, [r2, #0]
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a81c:	4613      	mov	r3, r2
 800a81e:	009b      	lsls	r3, r3, #2
 800a820:	4413      	add	r3, r2
 800a822:	009b      	lsls	r3, r3, #2
 800a824:	4a27      	ldr	r2, [pc, #156]	; (800a8c4 <xTaskResumeAll+0x12c>)
 800a826:	441a      	add	r2, r3
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	3304      	adds	r3, #4
 800a82c:	4619      	mov	r1, r3
 800a82e:	4610      	mov	r0, r2
 800a830:	f7fe ffa9 	bl	8009786 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a838:	4b23      	ldr	r3, [pc, #140]	; (800a8c8 <xTaskResumeAll+0x130>)
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a83e:	429a      	cmp	r2, r3
 800a840:	d302      	bcc.n	800a848 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800a842:	4b22      	ldr	r3, [pc, #136]	; (800a8cc <xTaskResumeAll+0x134>)
 800a844:	2201      	movs	r2, #1
 800a846:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a848:	4b1c      	ldr	r3, [pc, #112]	; (800a8bc <xTaskResumeAll+0x124>)
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d1cb      	bne.n	800a7e8 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d001      	beq.n	800a85a <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a856:	f000 fb97 	bl	800af88 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a85a:	4b1d      	ldr	r3, [pc, #116]	; (800a8d0 <xTaskResumeAll+0x138>)
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d010      	beq.n	800a888 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a866:	f000 f847 	bl	800a8f8 <xTaskIncrementTick>
 800a86a:	4603      	mov	r3, r0
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d002      	beq.n	800a876 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800a870:	4b16      	ldr	r3, [pc, #88]	; (800a8cc <xTaskResumeAll+0x134>)
 800a872:	2201      	movs	r2, #1
 800a874:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	3b01      	subs	r3, #1
 800a87a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d1f1      	bne.n	800a866 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800a882:	4b13      	ldr	r3, [pc, #76]	; (800a8d0 <xTaskResumeAll+0x138>)
 800a884:	2200      	movs	r2, #0
 800a886:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a888:	4b10      	ldr	r3, [pc, #64]	; (800a8cc <xTaskResumeAll+0x134>)
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d009      	beq.n	800a8a4 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a890:	2301      	movs	r3, #1
 800a892:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a894:	4b0f      	ldr	r3, [pc, #60]	; (800a8d4 <xTaskResumeAll+0x13c>)
 800a896:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a89a:	601a      	str	r2, [r3, #0]
 800a89c:	f3bf 8f4f 	dsb	sy
 800a8a0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a8a4:	f001 f90e 	bl	800bac4 <vPortExitCritical>

	return xAlreadyYielded;
 800a8a8:	68bb      	ldr	r3, [r7, #8]
}
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	3710      	adds	r7, #16
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	bd80      	pop	{r7, pc}
 800a8b2:	bf00      	nop
 800a8b4:	20007c2c 	.word	0x20007c2c
 800a8b8:	20007c04 	.word	0x20007c04
 800a8bc:	20007bc4 	.word	0x20007bc4
 800a8c0:	20007c0c 	.word	0x20007c0c
 800a8c4:	20007734 	.word	0x20007734
 800a8c8:	20007730 	.word	0x20007730
 800a8cc:	20007c18 	.word	0x20007c18
 800a8d0:	20007c14 	.word	0x20007c14
 800a8d4:	e000ed04 	.word	0xe000ed04

0800a8d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a8d8:	b480      	push	{r7}
 800a8da:	b083      	sub	sp, #12
 800a8dc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a8de:	4b05      	ldr	r3, [pc, #20]	; (800a8f4 <xTaskGetTickCount+0x1c>)
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a8e4:	687b      	ldr	r3, [r7, #4]
}
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	370c      	adds	r7, #12
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f0:	4770      	bx	lr
 800a8f2:	bf00      	nop
 800a8f4:	20007c08 	.word	0x20007c08

0800a8f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b086      	sub	sp, #24
 800a8fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a8fe:	2300      	movs	r3, #0
 800a900:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a902:	4b50      	ldr	r3, [pc, #320]	; (800aa44 <xTaskIncrementTick+0x14c>)
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	2b00      	cmp	r3, #0
 800a908:	f040 808b 	bne.w	800aa22 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a90c:	4b4e      	ldr	r3, [pc, #312]	; (800aa48 <xTaskIncrementTick+0x150>)
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	3301      	adds	r3, #1
 800a912:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a914:	4a4c      	ldr	r2, [pc, #304]	; (800aa48 <xTaskIncrementTick+0x150>)
 800a916:	693b      	ldr	r3, [r7, #16]
 800a918:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a91a:	693b      	ldr	r3, [r7, #16]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d122      	bne.n	800a966 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800a920:	4b4a      	ldr	r3, [pc, #296]	; (800aa4c <xTaskIncrementTick+0x154>)
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d00c      	beq.n	800a944 <xTaskIncrementTick+0x4c>
	__asm volatile
 800a92a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a92e:	b672      	cpsid	i
 800a930:	f383 8811 	msr	BASEPRI, r3
 800a934:	f3bf 8f6f 	isb	sy
 800a938:	f3bf 8f4f 	dsb	sy
 800a93c:	b662      	cpsie	i
 800a93e:	603b      	str	r3, [r7, #0]
}
 800a940:	bf00      	nop
 800a942:	e7fe      	b.n	800a942 <xTaskIncrementTick+0x4a>
 800a944:	4b41      	ldr	r3, [pc, #260]	; (800aa4c <xTaskIncrementTick+0x154>)
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	60fb      	str	r3, [r7, #12]
 800a94a:	4b41      	ldr	r3, [pc, #260]	; (800aa50 <xTaskIncrementTick+0x158>)
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	4a3f      	ldr	r2, [pc, #252]	; (800aa4c <xTaskIncrementTick+0x154>)
 800a950:	6013      	str	r3, [r2, #0]
 800a952:	4a3f      	ldr	r2, [pc, #252]	; (800aa50 <xTaskIncrementTick+0x158>)
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	6013      	str	r3, [r2, #0]
 800a958:	4b3e      	ldr	r3, [pc, #248]	; (800aa54 <xTaskIncrementTick+0x15c>)
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	3301      	adds	r3, #1
 800a95e:	4a3d      	ldr	r2, [pc, #244]	; (800aa54 <xTaskIncrementTick+0x15c>)
 800a960:	6013      	str	r3, [r2, #0]
 800a962:	f000 fb11 	bl	800af88 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a966:	4b3c      	ldr	r3, [pc, #240]	; (800aa58 <xTaskIncrementTick+0x160>)
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	693a      	ldr	r2, [r7, #16]
 800a96c:	429a      	cmp	r2, r3
 800a96e:	d349      	bcc.n	800aa04 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a970:	4b36      	ldr	r3, [pc, #216]	; (800aa4c <xTaskIncrementTick+0x154>)
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d104      	bne.n	800a984 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a97a:	4b37      	ldr	r3, [pc, #220]	; (800aa58 <xTaskIncrementTick+0x160>)
 800a97c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a980:	601a      	str	r2, [r3, #0]
					break;
 800a982:	e03f      	b.n	800aa04 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a984:	4b31      	ldr	r3, [pc, #196]	; (800aa4c <xTaskIncrementTick+0x154>)
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	68db      	ldr	r3, [r3, #12]
 800a98a:	68db      	ldr	r3, [r3, #12]
 800a98c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a98e:	68bb      	ldr	r3, [r7, #8]
 800a990:	685b      	ldr	r3, [r3, #4]
 800a992:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a994:	693a      	ldr	r2, [r7, #16]
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	429a      	cmp	r2, r3
 800a99a:	d203      	bcs.n	800a9a4 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a99c:	4a2e      	ldr	r2, [pc, #184]	; (800aa58 <xTaskIncrementTick+0x160>)
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a9a2:	e02f      	b.n	800aa04 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a9a4:	68bb      	ldr	r3, [r7, #8]
 800a9a6:	3304      	adds	r3, #4
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	f7fe ff49 	bl	8009840 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a9ae:	68bb      	ldr	r3, [r7, #8]
 800a9b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d004      	beq.n	800a9c0 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a9b6:	68bb      	ldr	r3, [r7, #8]
 800a9b8:	3318      	adds	r3, #24
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	f7fe ff40 	bl	8009840 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a9c0:	68bb      	ldr	r3, [r7, #8]
 800a9c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9c4:	4b25      	ldr	r3, [pc, #148]	; (800aa5c <xTaskIncrementTick+0x164>)
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	429a      	cmp	r2, r3
 800a9ca:	d903      	bls.n	800a9d4 <xTaskIncrementTick+0xdc>
 800a9cc:	68bb      	ldr	r3, [r7, #8]
 800a9ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9d0:	4a22      	ldr	r2, [pc, #136]	; (800aa5c <xTaskIncrementTick+0x164>)
 800a9d2:	6013      	str	r3, [r2, #0]
 800a9d4:	68bb      	ldr	r3, [r7, #8]
 800a9d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9d8:	4613      	mov	r3, r2
 800a9da:	009b      	lsls	r3, r3, #2
 800a9dc:	4413      	add	r3, r2
 800a9de:	009b      	lsls	r3, r3, #2
 800a9e0:	4a1f      	ldr	r2, [pc, #124]	; (800aa60 <xTaskIncrementTick+0x168>)
 800a9e2:	441a      	add	r2, r3
 800a9e4:	68bb      	ldr	r3, [r7, #8]
 800a9e6:	3304      	adds	r3, #4
 800a9e8:	4619      	mov	r1, r3
 800a9ea:	4610      	mov	r0, r2
 800a9ec:	f7fe fecb 	bl	8009786 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a9f0:	68bb      	ldr	r3, [r7, #8]
 800a9f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9f4:	4b1b      	ldr	r3, [pc, #108]	; (800aa64 <xTaskIncrementTick+0x16c>)
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9fa:	429a      	cmp	r2, r3
 800a9fc:	d3b8      	bcc.n	800a970 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800a9fe:	2301      	movs	r3, #1
 800aa00:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aa02:	e7b5      	b.n	800a970 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800aa04:	4b17      	ldr	r3, [pc, #92]	; (800aa64 <xTaskIncrementTick+0x16c>)
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa0a:	4915      	ldr	r1, [pc, #84]	; (800aa60 <xTaskIncrementTick+0x168>)
 800aa0c:	4613      	mov	r3, r2
 800aa0e:	009b      	lsls	r3, r3, #2
 800aa10:	4413      	add	r3, r2
 800aa12:	009b      	lsls	r3, r3, #2
 800aa14:	440b      	add	r3, r1
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	2b01      	cmp	r3, #1
 800aa1a:	d907      	bls.n	800aa2c <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800aa1c:	2301      	movs	r3, #1
 800aa1e:	617b      	str	r3, [r7, #20]
 800aa20:	e004      	b.n	800aa2c <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800aa22:	4b11      	ldr	r3, [pc, #68]	; (800aa68 <xTaskIncrementTick+0x170>)
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	3301      	adds	r3, #1
 800aa28:	4a0f      	ldr	r2, [pc, #60]	; (800aa68 <xTaskIncrementTick+0x170>)
 800aa2a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800aa2c:	4b0f      	ldr	r3, [pc, #60]	; (800aa6c <xTaskIncrementTick+0x174>)
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d001      	beq.n	800aa38 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800aa34:	2301      	movs	r3, #1
 800aa36:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800aa38:	697b      	ldr	r3, [r7, #20]
}
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	3718      	adds	r7, #24
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	bd80      	pop	{r7, pc}
 800aa42:	bf00      	nop
 800aa44:	20007c2c 	.word	0x20007c2c
 800aa48:	20007c08 	.word	0x20007c08
 800aa4c:	20007bbc 	.word	0x20007bbc
 800aa50:	20007bc0 	.word	0x20007bc0
 800aa54:	20007c1c 	.word	0x20007c1c
 800aa58:	20007c24 	.word	0x20007c24
 800aa5c:	20007c0c 	.word	0x20007c0c
 800aa60:	20007734 	.word	0x20007734
 800aa64:	20007730 	.word	0x20007730
 800aa68:	20007c14 	.word	0x20007c14
 800aa6c:	20007c18 	.word	0x20007c18

0800aa70 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800aa70:	b480      	push	{r7}
 800aa72:	b085      	sub	sp, #20
 800aa74:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800aa76:	4b2b      	ldr	r3, [pc, #172]	; (800ab24 <vTaskSwitchContext+0xb4>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d003      	beq.n	800aa86 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800aa7e:	4b2a      	ldr	r3, [pc, #168]	; (800ab28 <vTaskSwitchContext+0xb8>)
 800aa80:	2201      	movs	r2, #1
 800aa82:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800aa84:	e048      	b.n	800ab18 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 800aa86:	4b28      	ldr	r3, [pc, #160]	; (800ab28 <vTaskSwitchContext+0xb8>)
 800aa88:	2200      	movs	r2, #0
 800aa8a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa8c:	4b27      	ldr	r3, [pc, #156]	; (800ab2c <vTaskSwitchContext+0xbc>)
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	60fb      	str	r3, [r7, #12]
 800aa92:	e012      	b.n	800aaba <vTaskSwitchContext+0x4a>
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d10c      	bne.n	800aab4 <vTaskSwitchContext+0x44>
	__asm volatile
 800aa9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa9e:	b672      	cpsid	i
 800aaa0:	f383 8811 	msr	BASEPRI, r3
 800aaa4:	f3bf 8f6f 	isb	sy
 800aaa8:	f3bf 8f4f 	dsb	sy
 800aaac:	b662      	cpsie	i
 800aaae:	607b      	str	r3, [r7, #4]
}
 800aab0:	bf00      	nop
 800aab2:	e7fe      	b.n	800aab2 <vTaskSwitchContext+0x42>
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	3b01      	subs	r3, #1
 800aab8:	60fb      	str	r3, [r7, #12]
 800aaba:	491d      	ldr	r1, [pc, #116]	; (800ab30 <vTaskSwitchContext+0xc0>)
 800aabc:	68fa      	ldr	r2, [r7, #12]
 800aabe:	4613      	mov	r3, r2
 800aac0:	009b      	lsls	r3, r3, #2
 800aac2:	4413      	add	r3, r2
 800aac4:	009b      	lsls	r3, r3, #2
 800aac6:	440b      	add	r3, r1
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d0e2      	beq.n	800aa94 <vTaskSwitchContext+0x24>
 800aace:	68fa      	ldr	r2, [r7, #12]
 800aad0:	4613      	mov	r3, r2
 800aad2:	009b      	lsls	r3, r3, #2
 800aad4:	4413      	add	r3, r2
 800aad6:	009b      	lsls	r3, r3, #2
 800aad8:	4a15      	ldr	r2, [pc, #84]	; (800ab30 <vTaskSwitchContext+0xc0>)
 800aada:	4413      	add	r3, r2
 800aadc:	60bb      	str	r3, [r7, #8]
 800aade:	68bb      	ldr	r3, [r7, #8]
 800aae0:	685b      	ldr	r3, [r3, #4]
 800aae2:	685a      	ldr	r2, [r3, #4]
 800aae4:	68bb      	ldr	r3, [r7, #8]
 800aae6:	605a      	str	r2, [r3, #4]
 800aae8:	68bb      	ldr	r3, [r7, #8]
 800aaea:	685a      	ldr	r2, [r3, #4]
 800aaec:	68bb      	ldr	r3, [r7, #8]
 800aaee:	3308      	adds	r3, #8
 800aaf0:	429a      	cmp	r2, r3
 800aaf2:	d104      	bne.n	800aafe <vTaskSwitchContext+0x8e>
 800aaf4:	68bb      	ldr	r3, [r7, #8]
 800aaf6:	685b      	ldr	r3, [r3, #4]
 800aaf8:	685a      	ldr	r2, [r3, #4]
 800aafa:	68bb      	ldr	r3, [r7, #8]
 800aafc:	605a      	str	r2, [r3, #4]
 800aafe:	68bb      	ldr	r3, [r7, #8]
 800ab00:	685b      	ldr	r3, [r3, #4]
 800ab02:	68db      	ldr	r3, [r3, #12]
 800ab04:	4a0b      	ldr	r2, [pc, #44]	; (800ab34 <vTaskSwitchContext+0xc4>)
 800ab06:	6013      	str	r3, [r2, #0]
 800ab08:	4a08      	ldr	r2, [pc, #32]	; (800ab2c <vTaskSwitchContext+0xbc>)
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ab0e:	4b09      	ldr	r3, [pc, #36]	; (800ab34 <vTaskSwitchContext+0xc4>)
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	3354      	adds	r3, #84	; 0x54
 800ab14:	4a08      	ldr	r2, [pc, #32]	; (800ab38 <vTaskSwitchContext+0xc8>)
 800ab16:	6013      	str	r3, [r2, #0]
}
 800ab18:	bf00      	nop
 800ab1a:	3714      	adds	r7, #20
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab22:	4770      	bx	lr
 800ab24:	20007c2c 	.word	0x20007c2c
 800ab28:	20007c18 	.word	0x20007c18
 800ab2c:	20007c0c 	.word	0x20007c0c
 800ab30:	20007734 	.word	0x20007734
 800ab34:	20007730 	.word	0x20007730
 800ab38:	20002138 	.word	0x20002138

0800ab3c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b084      	sub	sp, #16
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
 800ab44:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d10c      	bne.n	800ab66 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800ab4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab50:	b672      	cpsid	i
 800ab52:	f383 8811 	msr	BASEPRI, r3
 800ab56:	f3bf 8f6f 	isb	sy
 800ab5a:	f3bf 8f4f 	dsb	sy
 800ab5e:	b662      	cpsie	i
 800ab60:	60fb      	str	r3, [r7, #12]
}
 800ab62:	bf00      	nop
 800ab64:	e7fe      	b.n	800ab64 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ab66:	4b07      	ldr	r3, [pc, #28]	; (800ab84 <vTaskPlaceOnEventList+0x48>)
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	3318      	adds	r3, #24
 800ab6c:	4619      	mov	r1, r3
 800ab6e:	6878      	ldr	r0, [r7, #4]
 800ab70:	f7fe fe2d 	bl	80097ce <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ab74:	2101      	movs	r1, #1
 800ab76:	6838      	ldr	r0, [r7, #0]
 800ab78:	f000 fab6 	bl	800b0e8 <prvAddCurrentTaskToDelayedList>
}
 800ab7c:	bf00      	nop
 800ab7e:	3710      	adds	r7, #16
 800ab80:	46bd      	mov	sp, r7
 800ab82:	bd80      	pop	{r7, pc}
 800ab84:	20007730 	.word	0x20007730

0800ab88 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b086      	sub	sp, #24
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	60f8      	str	r0, [r7, #12]
 800ab90:	60b9      	str	r1, [r7, #8]
 800ab92:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d10c      	bne.n	800abb4 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800ab9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab9e:	b672      	cpsid	i
 800aba0:	f383 8811 	msr	BASEPRI, r3
 800aba4:	f3bf 8f6f 	isb	sy
 800aba8:	f3bf 8f4f 	dsb	sy
 800abac:	b662      	cpsie	i
 800abae:	617b      	str	r3, [r7, #20]
}
 800abb0:	bf00      	nop
 800abb2:	e7fe      	b.n	800abb2 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800abb4:	4b0a      	ldr	r3, [pc, #40]	; (800abe0 <vTaskPlaceOnEventListRestricted+0x58>)
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	3318      	adds	r3, #24
 800abba:	4619      	mov	r1, r3
 800abbc:	68f8      	ldr	r0, [r7, #12]
 800abbe:	f7fe fde2 	bl	8009786 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d002      	beq.n	800abce <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800abc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800abcc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800abce:	6879      	ldr	r1, [r7, #4]
 800abd0:	68b8      	ldr	r0, [r7, #8]
 800abd2:	f000 fa89 	bl	800b0e8 <prvAddCurrentTaskToDelayedList>
	}
 800abd6:	bf00      	nop
 800abd8:	3718      	adds	r7, #24
 800abda:	46bd      	mov	sp, r7
 800abdc:	bd80      	pop	{r7, pc}
 800abde:	bf00      	nop
 800abe0:	20007730 	.word	0x20007730

0800abe4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b086      	sub	sp, #24
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	68db      	ldr	r3, [r3, #12]
 800abf0:	68db      	ldr	r3, [r3, #12]
 800abf2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800abf4:	693b      	ldr	r3, [r7, #16]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d10c      	bne.n	800ac14 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800abfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abfe:	b672      	cpsid	i
 800ac00:	f383 8811 	msr	BASEPRI, r3
 800ac04:	f3bf 8f6f 	isb	sy
 800ac08:	f3bf 8f4f 	dsb	sy
 800ac0c:	b662      	cpsie	i
 800ac0e:	60fb      	str	r3, [r7, #12]
}
 800ac10:	bf00      	nop
 800ac12:	e7fe      	b.n	800ac12 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ac14:	693b      	ldr	r3, [r7, #16]
 800ac16:	3318      	adds	r3, #24
 800ac18:	4618      	mov	r0, r3
 800ac1a:	f7fe fe11 	bl	8009840 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ac1e:	4b1e      	ldr	r3, [pc, #120]	; (800ac98 <xTaskRemoveFromEventList+0xb4>)
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d11d      	bne.n	800ac62 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ac26:	693b      	ldr	r3, [r7, #16]
 800ac28:	3304      	adds	r3, #4
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	f7fe fe08 	bl	8009840 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ac30:	693b      	ldr	r3, [r7, #16]
 800ac32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac34:	4b19      	ldr	r3, [pc, #100]	; (800ac9c <xTaskRemoveFromEventList+0xb8>)
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	429a      	cmp	r2, r3
 800ac3a:	d903      	bls.n	800ac44 <xTaskRemoveFromEventList+0x60>
 800ac3c:	693b      	ldr	r3, [r7, #16]
 800ac3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac40:	4a16      	ldr	r2, [pc, #88]	; (800ac9c <xTaskRemoveFromEventList+0xb8>)
 800ac42:	6013      	str	r3, [r2, #0]
 800ac44:	693b      	ldr	r3, [r7, #16]
 800ac46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac48:	4613      	mov	r3, r2
 800ac4a:	009b      	lsls	r3, r3, #2
 800ac4c:	4413      	add	r3, r2
 800ac4e:	009b      	lsls	r3, r3, #2
 800ac50:	4a13      	ldr	r2, [pc, #76]	; (800aca0 <xTaskRemoveFromEventList+0xbc>)
 800ac52:	441a      	add	r2, r3
 800ac54:	693b      	ldr	r3, [r7, #16]
 800ac56:	3304      	adds	r3, #4
 800ac58:	4619      	mov	r1, r3
 800ac5a:	4610      	mov	r0, r2
 800ac5c:	f7fe fd93 	bl	8009786 <vListInsertEnd>
 800ac60:	e005      	b.n	800ac6e <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ac62:	693b      	ldr	r3, [r7, #16]
 800ac64:	3318      	adds	r3, #24
 800ac66:	4619      	mov	r1, r3
 800ac68:	480e      	ldr	r0, [pc, #56]	; (800aca4 <xTaskRemoveFromEventList+0xc0>)
 800ac6a:	f7fe fd8c 	bl	8009786 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ac6e:	693b      	ldr	r3, [r7, #16]
 800ac70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac72:	4b0d      	ldr	r3, [pc, #52]	; (800aca8 <xTaskRemoveFromEventList+0xc4>)
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac78:	429a      	cmp	r2, r3
 800ac7a:	d905      	bls.n	800ac88 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ac7c:	2301      	movs	r3, #1
 800ac7e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ac80:	4b0a      	ldr	r3, [pc, #40]	; (800acac <xTaskRemoveFromEventList+0xc8>)
 800ac82:	2201      	movs	r2, #1
 800ac84:	601a      	str	r2, [r3, #0]
 800ac86:	e001      	b.n	800ac8c <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800ac88:	2300      	movs	r3, #0
 800ac8a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ac8c:	697b      	ldr	r3, [r7, #20]
}
 800ac8e:	4618      	mov	r0, r3
 800ac90:	3718      	adds	r7, #24
 800ac92:	46bd      	mov	sp, r7
 800ac94:	bd80      	pop	{r7, pc}
 800ac96:	bf00      	nop
 800ac98:	20007c2c 	.word	0x20007c2c
 800ac9c:	20007c0c 	.word	0x20007c0c
 800aca0:	20007734 	.word	0x20007734
 800aca4:	20007bc4 	.word	0x20007bc4
 800aca8:	20007730 	.word	0x20007730
 800acac:	20007c18 	.word	0x20007c18

0800acb0 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b084      	sub	sp, #16
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d10c      	bne.n	800acd8 <vTaskSetTimeOutState+0x28>
	__asm volatile
 800acbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acc2:	b672      	cpsid	i
 800acc4:	f383 8811 	msr	BASEPRI, r3
 800acc8:	f3bf 8f6f 	isb	sy
 800accc:	f3bf 8f4f 	dsb	sy
 800acd0:	b662      	cpsie	i
 800acd2:	60fb      	str	r3, [r7, #12]
}
 800acd4:	bf00      	nop
 800acd6:	e7fe      	b.n	800acd6 <vTaskSetTimeOutState+0x26>
	taskENTER_CRITICAL();
 800acd8:	f000 fec0 	bl	800ba5c <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800acdc:	4b06      	ldr	r3, [pc, #24]	; (800acf8 <vTaskSetTimeOutState+0x48>)
 800acde:	681a      	ldr	r2, [r3, #0]
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800ace4:	4b05      	ldr	r3, [pc, #20]	; (800acfc <vTaskSetTimeOutState+0x4c>)
 800ace6:	681a      	ldr	r2, [r3, #0]
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800acec:	f000 feea 	bl	800bac4 <vPortExitCritical>
}
 800acf0:	bf00      	nop
 800acf2:	3710      	adds	r7, #16
 800acf4:	46bd      	mov	sp, r7
 800acf6:	bd80      	pop	{r7, pc}
 800acf8:	20007c1c 	.word	0x20007c1c
 800acfc:	20007c08 	.word	0x20007c08

0800ad00 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ad00:	b480      	push	{r7}
 800ad02:	b083      	sub	sp, #12
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ad08:	4b06      	ldr	r3, [pc, #24]	; (800ad24 <vTaskInternalSetTimeOutState+0x24>)
 800ad0a:	681a      	ldr	r2, [r3, #0]
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ad10:	4b05      	ldr	r3, [pc, #20]	; (800ad28 <vTaskInternalSetTimeOutState+0x28>)
 800ad12:	681a      	ldr	r2, [r3, #0]
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	605a      	str	r2, [r3, #4]
}
 800ad18:	bf00      	nop
 800ad1a:	370c      	adds	r7, #12
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad22:	4770      	bx	lr
 800ad24:	20007c1c 	.word	0x20007c1c
 800ad28:	20007c08 	.word	0x20007c08

0800ad2c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b088      	sub	sp, #32
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
 800ad34:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d10c      	bne.n	800ad56 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800ad3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad40:	b672      	cpsid	i
 800ad42:	f383 8811 	msr	BASEPRI, r3
 800ad46:	f3bf 8f6f 	isb	sy
 800ad4a:	f3bf 8f4f 	dsb	sy
 800ad4e:	b662      	cpsie	i
 800ad50:	613b      	str	r3, [r7, #16]
}
 800ad52:	bf00      	nop
 800ad54:	e7fe      	b.n	800ad54 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800ad56:	683b      	ldr	r3, [r7, #0]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d10c      	bne.n	800ad76 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800ad5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad60:	b672      	cpsid	i
 800ad62:	f383 8811 	msr	BASEPRI, r3
 800ad66:	f3bf 8f6f 	isb	sy
 800ad6a:	f3bf 8f4f 	dsb	sy
 800ad6e:	b662      	cpsie	i
 800ad70:	60fb      	str	r3, [r7, #12]
}
 800ad72:	bf00      	nop
 800ad74:	e7fe      	b.n	800ad74 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800ad76:	f000 fe71 	bl	800ba5c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ad7a:	4b1d      	ldr	r3, [pc, #116]	; (800adf0 <xTaskCheckForTimeOut+0xc4>)
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	685b      	ldr	r3, [r3, #4]
 800ad84:	69ba      	ldr	r2, [r7, #24]
 800ad86:	1ad3      	subs	r3, r2, r3
 800ad88:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ad8a:	683b      	ldr	r3, [r7, #0]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ad92:	d102      	bne.n	800ad9a <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ad94:	2300      	movs	r3, #0
 800ad96:	61fb      	str	r3, [r7, #28]
 800ad98:	e023      	b.n	800ade2 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681a      	ldr	r2, [r3, #0]
 800ad9e:	4b15      	ldr	r3, [pc, #84]	; (800adf4 <xTaskCheckForTimeOut+0xc8>)
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	429a      	cmp	r2, r3
 800ada4:	d007      	beq.n	800adb6 <xTaskCheckForTimeOut+0x8a>
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	685b      	ldr	r3, [r3, #4]
 800adaa:	69ba      	ldr	r2, [r7, #24]
 800adac:	429a      	cmp	r2, r3
 800adae:	d302      	bcc.n	800adb6 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800adb0:	2301      	movs	r3, #1
 800adb2:	61fb      	str	r3, [r7, #28]
 800adb4:	e015      	b.n	800ade2 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800adb6:	683b      	ldr	r3, [r7, #0]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	697a      	ldr	r2, [r7, #20]
 800adbc:	429a      	cmp	r2, r3
 800adbe:	d20b      	bcs.n	800add8 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800adc0:	683b      	ldr	r3, [r7, #0]
 800adc2:	681a      	ldr	r2, [r3, #0]
 800adc4:	697b      	ldr	r3, [r7, #20]
 800adc6:	1ad2      	subs	r2, r2, r3
 800adc8:	683b      	ldr	r3, [r7, #0]
 800adca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800adcc:	6878      	ldr	r0, [r7, #4]
 800adce:	f7ff ff97 	bl	800ad00 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800add2:	2300      	movs	r3, #0
 800add4:	61fb      	str	r3, [r7, #28]
 800add6:	e004      	b.n	800ade2 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800add8:	683b      	ldr	r3, [r7, #0]
 800adda:	2200      	movs	r2, #0
 800addc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800adde:	2301      	movs	r3, #1
 800ade0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ade2:	f000 fe6f 	bl	800bac4 <vPortExitCritical>

	return xReturn;
 800ade6:	69fb      	ldr	r3, [r7, #28]
}
 800ade8:	4618      	mov	r0, r3
 800adea:	3720      	adds	r7, #32
 800adec:	46bd      	mov	sp, r7
 800adee:	bd80      	pop	{r7, pc}
 800adf0:	20007c08 	.word	0x20007c08
 800adf4:	20007c1c 	.word	0x20007c1c

0800adf8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800adf8:	b480      	push	{r7}
 800adfa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800adfc:	4b03      	ldr	r3, [pc, #12]	; (800ae0c <vTaskMissedYield+0x14>)
 800adfe:	2201      	movs	r2, #1
 800ae00:	601a      	str	r2, [r3, #0]
}
 800ae02:	bf00      	nop
 800ae04:	46bd      	mov	sp, r7
 800ae06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0a:	4770      	bx	lr
 800ae0c:	20007c18 	.word	0x20007c18

0800ae10 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b082      	sub	sp, #8
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ae18:	f000 f852 	bl	800aec0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ae1c:	4b06      	ldr	r3, [pc, #24]	; (800ae38 <prvIdleTask+0x28>)
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	2b01      	cmp	r3, #1
 800ae22:	d9f9      	bls.n	800ae18 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ae24:	4b05      	ldr	r3, [pc, #20]	; (800ae3c <prvIdleTask+0x2c>)
 800ae26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae2a:	601a      	str	r2, [r3, #0]
 800ae2c:	f3bf 8f4f 	dsb	sy
 800ae30:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ae34:	e7f0      	b.n	800ae18 <prvIdleTask+0x8>
 800ae36:	bf00      	nop
 800ae38:	20007734 	.word	0x20007734
 800ae3c:	e000ed04 	.word	0xe000ed04

0800ae40 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b082      	sub	sp, #8
 800ae44:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ae46:	2300      	movs	r3, #0
 800ae48:	607b      	str	r3, [r7, #4]
 800ae4a:	e00c      	b.n	800ae66 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ae4c:	687a      	ldr	r2, [r7, #4]
 800ae4e:	4613      	mov	r3, r2
 800ae50:	009b      	lsls	r3, r3, #2
 800ae52:	4413      	add	r3, r2
 800ae54:	009b      	lsls	r3, r3, #2
 800ae56:	4a12      	ldr	r2, [pc, #72]	; (800aea0 <prvInitialiseTaskLists+0x60>)
 800ae58:	4413      	add	r3, r2
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	f7fe fc66 	bl	800972c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	3301      	adds	r3, #1
 800ae64:	607b      	str	r3, [r7, #4]
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	2b37      	cmp	r3, #55	; 0x37
 800ae6a:	d9ef      	bls.n	800ae4c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ae6c:	480d      	ldr	r0, [pc, #52]	; (800aea4 <prvInitialiseTaskLists+0x64>)
 800ae6e:	f7fe fc5d 	bl	800972c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ae72:	480d      	ldr	r0, [pc, #52]	; (800aea8 <prvInitialiseTaskLists+0x68>)
 800ae74:	f7fe fc5a 	bl	800972c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ae78:	480c      	ldr	r0, [pc, #48]	; (800aeac <prvInitialiseTaskLists+0x6c>)
 800ae7a:	f7fe fc57 	bl	800972c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ae7e:	480c      	ldr	r0, [pc, #48]	; (800aeb0 <prvInitialiseTaskLists+0x70>)
 800ae80:	f7fe fc54 	bl	800972c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ae84:	480b      	ldr	r0, [pc, #44]	; (800aeb4 <prvInitialiseTaskLists+0x74>)
 800ae86:	f7fe fc51 	bl	800972c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ae8a:	4b0b      	ldr	r3, [pc, #44]	; (800aeb8 <prvInitialiseTaskLists+0x78>)
 800ae8c:	4a05      	ldr	r2, [pc, #20]	; (800aea4 <prvInitialiseTaskLists+0x64>)
 800ae8e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ae90:	4b0a      	ldr	r3, [pc, #40]	; (800aebc <prvInitialiseTaskLists+0x7c>)
 800ae92:	4a05      	ldr	r2, [pc, #20]	; (800aea8 <prvInitialiseTaskLists+0x68>)
 800ae94:	601a      	str	r2, [r3, #0]
}
 800ae96:	bf00      	nop
 800ae98:	3708      	adds	r7, #8
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	bd80      	pop	{r7, pc}
 800ae9e:	bf00      	nop
 800aea0:	20007734 	.word	0x20007734
 800aea4:	20007b94 	.word	0x20007b94
 800aea8:	20007ba8 	.word	0x20007ba8
 800aeac:	20007bc4 	.word	0x20007bc4
 800aeb0:	20007bd8 	.word	0x20007bd8
 800aeb4:	20007bf0 	.word	0x20007bf0
 800aeb8:	20007bbc 	.word	0x20007bbc
 800aebc:	20007bc0 	.word	0x20007bc0

0800aec0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b082      	sub	sp, #8
 800aec4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aec6:	e019      	b.n	800aefc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800aec8:	f000 fdc8 	bl	800ba5c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aecc:	4b10      	ldr	r3, [pc, #64]	; (800af10 <prvCheckTasksWaitingTermination+0x50>)
 800aece:	68db      	ldr	r3, [r3, #12]
 800aed0:	68db      	ldr	r3, [r3, #12]
 800aed2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	3304      	adds	r3, #4
 800aed8:	4618      	mov	r0, r3
 800aeda:	f7fe fcb1 	bl	8009840 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800aede:	4b0d      	ldr	r3, [pc, #52]	; (800af14 <prvCheckTasksWaitingTermination+0x54>)
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	3b01      	subs	r3, #1
 800aee4:	4a0b      	ldr	r2, [pc, #44]	; (800af14 <prvCheckTasksWaitingTermination+0x54>)
 800aee6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800aee8:	4b0b      	ldr	r3, [pc, #44]	; (800af18 <prvCheckTasksWaitingTermination+0x58>)
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	3b01      	subs	r3, #1
 800aeee:	4a0a      	ldr	r2, [pc, #40]	; (800af18 <prvCheckTasksWaitingTermination+0x58>)
 800aef0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800aef2:	f000 fde7 	bl	800bac4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800aef6:	6878      	ldr	r0, [r7, #4]
 800aef8:	f000 f810 	bl	800af1c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aefc:	4b06      	ldr	r3, [pc, #24]	; (800af18 <prvCheckTasksWaitingTermination+0x58>)
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d1e1      	bne.n	800aec8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800af04:	bf00      	nop
 800af06:	bf00      	nop
 800af08:	3708      	adds	r7, #8
 800af0a:	46bd      	mov	sp, r7
 800af0c:	bd80      	pop	{r7, pc}
 800af0e:	bf00      	nop
 800af10:	20007bd8 	.word	0x20007bd8
 800af14:	20007c04 	.word	0x20007c04
 800af18:	20007bec 	.word	0x20007bec

0800af1c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b084      	sub	sp, #16
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	3354      	adds	r3, #84	; 0x54
 800af28:	4618      	mov	r0, r3
 800af2a:	f010 fabb 	bl	801b4a4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800af34:	2b00      	cmp	r3, #0
 800af36:	d108      	bne.n	800af4a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af3c:	4618      	mov	r0, r3
 800af3e:	f000 ff83 	bl	800be48 <vPortFree>
				vPortFree( pxTCB );
 800af42:	6878      	ldr	r0, [r7, #4]
 800af44:	f000 ff80 	bl	800be48 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800af48:	e01a      	b.n	800af80 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800af50:	2b01      	cmp	r3, #1
 800af52:	d103      	bne.n	800af5c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800af54:	6878      	ldr	r0, [r7, #4]
 800af56:	f000 ff77 	bl	800be48 <vPortFree>
	}
 800af5a:	e011      	b.n	800af80 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800af62:	2b02      	cmp	r3, #2
 800af64:	d00c      	beq.n	800af80 <prvDeleteTCB+0x64>
	__asm volatile
 800af66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af6a:	b672      	cpsid	i
 800af6c:	f383 8811 	msr	BASEPRI, r3
 800af70:	f3bf 8f6f 	isb	sy
 800af74:	f3bf 8f4f 	dsb	sy
 800af78:	b662      	cpsie	i
 800af7a:	60fb      	str	r3, [r7, #12]
}
 800af7c:	bf00      	nop
 800af7e:	e7fe      	b.n	800af7e <prvDeleteTCB+0x62>
	}
 800af80:	bf00      	nop
 800af82:	3710      	adds	r7, #16
 800af84:	46bd      	mov	sp, r7
 800af86:	bd80      	pop	{r7, pc}

0800af88 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800af88:	b480      	push	{r7}
 800af8a:	b083      	sub	sp, #12
 800af8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800af8e:	4b0c      	ldr	r3, [pc, #48]	; (800afc0 <prvResetNextTaskUnblockTime+0x38>)
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d104      	bne.n	800afa2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800af98:	4b0a      	ldr	r3, [pc, #40]	; (800afc4 <prvResetNextTaskUnblockTime+0x3c>)
 800af9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800af9e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800afa0:	e008      	b.n	800afb4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800afa2:	4b07      	ldr	r3, [pc, #28]	; (800afc0 <prvResetNextTaskUnblockTime+0x38>)
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	68db      	ldr	r3, [r3, #12]
 800afa8:	68db      	ldr	r3, [r3, #12]
 800afaa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	685b      	ldr	r3, [r3, #4]
 800afb0:	4a04      	ldr	r2, [pc, #16]	; (800afc4 <prvResetNextTaskUnblockTime+0x3c>)
 800afb2:	6013      	str	r3, [r2, #0]
}
 800afb4:	bf00      	nop
 800afb6:	370c      	adds	r7, #12
 800afb8:	46bd      	mov	sp, r7
 800afba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afbe:	4770      	bx	lr
 800afc0:	20007bbc 	.word	0x20007bbc
 800afc4:	20007c24 	.word	0x20007c24

0800afc8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800afc8:	b480      	push	{r7}
 800afca:	b083      	sub	sp, #12
 800afcc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800afce:	4b0b      	ldr	r3, [pc, #44]	; (800affc <xTaskGetSchedulerState+0x34>)
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d102      	bne.n	800afdc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800afd6:	2301      	movs	r3, #1
 800afd8:	607b      	str	r3, [r7, #4]
 800afda:	e008      	b.n	800afee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800afdc:	4b08      	ldr	r3, [pc, #32]	; (800b000 <xTaskGetSchedulerState+0x38>)
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d102      	bne.n	800afea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800afe4:	2302      	movs	r3, #2
 800afe6:	607b      	str	r3, [r7, #4]
 800afe8:	e001      	b.n	800afee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800afea:	2300      	movs	r3, #0
 800afec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800afee:	687b      	ldr	r3, [r7, #4]
	}
 800aff0:	4618      	mov	r0, r3
 800aff2:	370c      	adds	r7, #12
 800aff4:	46bd      	mov	sp, r7
 800aff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affa:	4770      	bx	lr
 800affc:	20007c10 	.word	0x20007c10
 800b000:	20007c2c 	.word	0x20007c2c

0800b004 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b004:	b580      	push	{r7, lr}
 800b006:	b086      	sub	sp, #24
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b010:	2300      	movs	r3, #0
 800b012:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d05a      	beq.n	800b0d0 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b01a:	4b30      	ldr	r3, [pc, #192]	; (800b0dc <xTaskPriorityDisinherit+0xd8>)
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	693a      	ldr	r2, [r7, #16]
 800b020:	429a      	cmp	r2, r3
 800b022:	d00c      	beq.n	800b03e <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800b024:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b028:	b672      	cpsid	i
 800b02a:	f383 8811 	msr	BASEPRI, r3
 800b02e:	f3bf 8f6f 	isb	sy
 800b032:	f3bf 8f4f 	dsb	sy
 800b036:	b662      	cpsie	i
 800b038:	60fb      	str	r3, [r7, #12]
}
 800b03a:	bf00      	nop
 800b03c:	e7fe      	b.n	800b03c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800b03e:	693b      	ldr	r3, [r7, #16]
 800b040:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b042:	2b00      	cmp	r3, #0
 800b044:	d10c      	bne.n	800b060 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800b046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b04a:	b672      	cpsid	i
 800b04c:	f383 8811 	msr	BASEPRI, r3
 800b050:	f3bf 8f6f 	isb	sy
 800b054:	f3bf 8f4f 	dsb	sy
 800b058:	b662      	cpsie	i
 800b05a:	60bb      	str	r3, [r7, #8]
}
 800b05c:	bf00      	nop
 800b05e:	e7fe      	b.n	800b05e <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800b060:	693b      	ldr	r3, [r7, #16]
 800b062:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b064:	1e5a      	subs	r2, r3, #1
 800b066:	693b      	ldr	r3, [r7, #16]
 800b068:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b06a:	693b      	ldr	r3, [r7, #16]
 800b06c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b06e:	693b      	ldr	r3, [r7, #16]
 800b070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b072:	429a      	cmp	r2, r3
 800b074:	d02c      	beq.n	800b0d0 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b076:	693b      	ldr	r3, [r7, #16]
 800b078:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d128      	bne.n	800b0d0 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b07e:	693b      	ldr	r3, [r7, #16]
 800b080:	3304      	adds	r3, #4
 800b082:	4618      	mov	r0, r3
 800b084:	f7fe fbdc 	bl	8009840 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b088:	693b      	ldr	r3, [r7, #16]
 800b08a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b08c:	693b      	ldr	r3, [r7, #16]
 800b08e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b090:	693b      	ldr	r3, [r7, #16]
 800b092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b094:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b098:	693b      	ldr	r3, [r7, #16]
 800b09a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b09c:	693b      	ldr	r3, [r7, #16]
 800b09e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0a0:	4b0f      	ldr	r3, [pc, #60]	; (800b0e0 <xTaskPriorityDisinherit+0xdc>)
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	429a      	cmp	r2, r3
 800b0a6:	d903      	bls.n	800b0b0 <xTaskPriorityDisinherit+0xac>
 800b0a8:	693b      	ldr	r3, [r7, #16]
 800b0aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0ac:	4a0c      	ldr	r2, [pc, #48]	; (800b0e0 <xTaskPriorityDisinherit+0xdc>)
 800b0ae:	6013      	str	r3, [r2, #0]
 800b0b0:	693b      	ldr	r3, [r7, #16]
 800b0b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0b4:	4613      	mov	r3, r2
 800b0b6:	009b      	lsls	r3, r3, #2
 800b0b8:	4413      	add	r3, r2
 800b0ba:	009b      	lsls	r3, r3, #2
 800b0bc:	4a09      	ldr	r2, [pc, #36]	; (800b0e4 <xTaskPriorityDisinherit+0xe0>)
 800b0be:	441a      	add	r2, r3
 800b0c0:	693b      	ldr	r3, [r7, #16]
 800b0c2:	3304      	adds	r3, #4
 800b0c4:	4619      	mov	r1, r3
 800b0c6:	4610      	mov	r0, r2
 800b0c8:	f7fe fb5d 	bl	8009786 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b0cc:	2301      	movs	r3, #1
 800b0ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b0d0:	697b      	ldr	r3, [r7, #20]
	}
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	3718      	adds	r7, #24
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	bd80      	pop	{r7, pc}
 800b0da:	bf00      	nop
 800b0dc:	20007730 	.word	0x20007730
 800b0e0:	20007c0c 	.word	0x20007c0c
 800b0e4:	20007734 	.word	0x20007734

0800b0e8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b084      	sub	sp, #16
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
 800b0f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b0f2:	4b21      	ldr	r3, [pc, #132]	; (800b178 <prvAddCurrentTaskToDelayedList+0x90>)
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b0f8:	4b20      	ldr	r3, [pc, #128]	; (800b17c <prvAddCurrentTaskToDelayedList+0x94>)
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	3304      	adds	r3, #4
 800b0fe:	4618      	mov	r0, r3
 800b100:	f7fe fb9e 	bl	8009840 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b10a:	d10a      	bne.n	800b122 <prvAddCurrentTaskToDelayedList+0x3a>
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d007      	beq.n	800b122 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b112:	4b1a      	ldr	r3, [pc, #104]	; (800b17c <prvAddCurrentTaskToDelayedList+0x94>)
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	3304      	adds	r3, #4
 800b118:	4619      	mov	r1, r3
 800b11a:	4819      	ldr	r0, [pc, #100]	; (800b180 <prvAddCurrentTaskToDelayedList+0x98>)
 800b11c:	f7fe fb33 	bl	8009786 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b120:	e026      	b.n	800b170 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b122:	68fa      	ldr	r2, [r7, #12]
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	4413      	add	r3, r2
 800b128:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b12a:	4b14      	ldr	r3, [pc, #80]	; (800b17c <prvAddCurrentTaskToDelayedList+0x94>)
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	68ba      	ldr	r2, [r7, #8]
 800b130:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b132:	68ba      	ldr	r2, [r7, #8]
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	429a      	cmp	r2, r3
 800b138:	d209      	bcs.n	800b14e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b13a:	4b12      	ldr	r3, [pc, #72]	; (800b184 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b13c:	681a      	ldr	r2, [r3, #0]
 800b13e:	4b0f      	ldr	r3, [pc, #60]	; (800b17c <prvAddCurrentTaskToDelayedList+0x94>)
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	3304      	adds	r3, #4
 800b144:	4619      	mov	r1, r3
 800b146:	4610      	mov	r0, r2
 800b148:	f7fe fb41 	bl	80097ce <vListInsert>
}
 800b14c:	e010      	b.n	800b170 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b14e:	4b0e      	ldr	r3, [pc, #56]	; (800b188 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b150:	681a      	ldr	r2, [r3, #0]
 800b152:	4b0a      	ldr	r3, [pc, #40]	; (800b17c <prvAddCurrentTaskToDelayedList+0x94>)
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	3304      	adds	r3, #4
 800b158:	4619      	mov	r1, r3
 800b15a:	4610      	mov	r0, r2
 800b15c:	f7fe fb37 	bl	80097ce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b160:	4b0a      	ldr	r3, [pc, #40]	; (800b18c <prvAddCurrentTaskToDelayedList+0xa4>)
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	68ba      	ldr	r2, [r7, #8]
 800b166:	429a      	cmp	r2, r3
 800b168:	d202      	bcs.n	800b170 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b16a:	4a08      	ldr	r2, [pc, #32]	; (800b18c <prvAddCurrentTaskToDelayedList+0xa4>)
 800b16c:	68bb      	ldr	r3, [r7, #8]
 800b16e:	6013      	str	r3, [r2, #0]
}
 800b170:	bf00      	nop
 800b172:	3710      	adds	r7, #16
 800b174:	46bd      	mov	sp, r7
 800b176:	bd80      	pop	{r7, pc}
 800b178:	20007c08 	.word	0x20007c08
 800b17c:	20007730 	.word	0x20007730
 800b180:	20007bf0 	.word	0x20007bf0
 800b184:	20007bc0 	.word	0x20007bc0
 800b188:	20007bbc 	.word	0x20007bbc
 800b18c:	20007c24 	.word	0x20007c24

0800b190 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b190:	b580      	push	{r7, lr}
 800b192:	b08a      	sub	sp, #40	; 0x28
 800b194:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b196:	2300      	movs	r3, #0
 800b198:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b19a:	f000 fb15 	bl	800b7c8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b19e:	4b1d      	ldr	r3, [pc, #116]	; (800b214 <xTimerCreateTimerTask+0x84>)
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d021      	beq.n	800b1ea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b1ae:	1d3a      	adds	r2, r7, #4
 800b1b0:	f107 0108 	add.w	r1, r7, #8
 800b1b4:	f107 030c 	add.w	r3, r7, #12
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	f7fe fa9d 	bl	80096f8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b1be:	6879      	ldr	r1, [r7, #4]
 800b1c0:	68bb      	ldr	r3, [r7, #8]
 800b1c2:	68fa      	ldr	r2, [r7, #12]
 800b1c4:	9202      	str	r2, [sp, #8]
 800b1c6:	9301      	str	r3, [sp, #4]
 800b1c8:	2302      	movs	r3, #2
 800b1ca:	9300      	str	r3, [sp, #0]
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	460a      	mov	r2, r1
 800b1d0:	4911      	ldr	r1, [pc, #68]	; (800b218 <xTimerCreateTimerTask+0x88>)
 800b1d2:	4812      	ldr	r0, [pc, #72]	; (800b21c <xTimerCreateTimerTask+0x8c>)
 800b1d4:	f7ff f868 	bl	800a2a8 <xTaskCreateStatic>
 800b1d8:	4603      	mov	r3, r0
 800b1da:	4a11      	ldr	r2, [pc, #68]	; (800b220 <xTimerCreateTimerTask+0x90>)
 800b1dc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b1de:	4b10      	ldr	r3, [pc, #64]	; (800b220 <xTimerCreateTimerTask+0x90>)
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d001      	beq.n	800b1ea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b1e6:	2301      	movs	r3, #1
 800b1e8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b1ea:	697b      	ldr	r3, [r7, #20]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d10c      	bne.n	800b20a <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800b1f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1f4:	b672      	cpsid	i
 800b1f6:	f383 8811 	msr	BASEPRI, r3
 800b1fa:	f3bf 8f6f 	isb	sy
 800b1fe:	f3bf 8f4f 	dsb	sy
 800b202:	b662      	cpsie	i
 800b204:	613b      	str	r3, [r7, #16]
}
 800b206:	bf00      	nop
 800b208:	e7fe      	b.n	800b208 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800b20a:	697b      	ldr	r3, [r7, #20]
}
 800b20c:	4618      	mov	r0, r3
 800b20e:	3718      	adds	r7, #24
 800b210:	46bd      	mov	sp, r7
 800b212:	bd80      	pop	{r7, pc}
 800b214:	20007c60 	.word	0x20007c60
 800b218:	0801c404 	.word	0x0801c404
 800b21c:	0800b361 	.word	0x0800b361
 800b220:	20007c64 	.word	0x20007c64

0800b224 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b224:	b580      	push	{r7, lr}
 800b226:	b08a      	sub	sp, #40	; 0x28
 800b228:	af00      	add	r7, sp, #0
 800b22a:	60f8      	str	r0, [r7, #12]
 800b22c:	60b9      	str	r1, [r7, #8]
 800b22e:	607a      	str	r2, [r7, #4]
 800b230:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b232:	2300      	movs	r3, #0
 800b234:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d10c      	bne.n	800b256 <xTimerGenericCommand+0x32>
	__asm volatile
 800b23c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b240:	b672      	cpsid	i
 800b242:	f383 8811 	msr	BASEPRI, r3
 800b246:	f3bf 8f6f 	isb	sy
 800b24a:	f3bf 8f4f 	dsb	sy
 800b24e:	b662      	cpsie	i
 800b250:	623b      	str	r3, [r7, #32]
}
 800b252:	bf00      	nop
 800b254:	e7fe      	b.n	800b254 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b256:	4b1a      	ldr	r3, [pc, #104]	; (800b2c0 <xTimerGenericCommand+0x9c>)
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d02a      	beq.n	800b2b4 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b25e:	68bb      	ldr	r3, [r7, #8]
 800b260:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b26a:	68bb      	ldr	r3, [r7, #8]
 800b26c:	2b05      	cmp	r3, #5
 800b26e:	dc18      	bgt.n	800b2a2 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b270:	f7ff feaa 	bl	800afc8 <xTaskGetSchedulerState>
 800b274:	4603      	mov	r3, r0
 800b276:	2b02      	cmp	r3, #2
 800b278:	d109      	bne.n	800b28e <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b27a:	4b11      	ldr	r3, [pc, #68]	; (800b2c0 <xTimerGenericCommand+0x9c>)
 800b27c:	6818      	ldr	r0, [r3, #0]
 800b27e:	f107 0110 	add.w	r1, r7, #16
 800b282:	2300      	movs	r3, #0
 800b284:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b286:	f7fe fc15 	bl	8009ab4 <xQueueGenericSend>
 800b28a:	6278      	str	r0, [r7, #36]	; 0x24
 800b28c:	e012      	b.n	800b2b4 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b28e:	4b0c      	ldr	r3, [pc, #48]	; (800b2c0 <xTimerGenericCommand+0x9c>)
 800b290:	6818      	ldr	r0, [r3, #0]
 800b292:	f107 0110 	add.w	r1, r7, #16
 800b296:	2300      	movs	r3, #0
 800b298:	2200      	movs	r2, #0
 800b29a:	f7fe fc0b 	bl	8009ab4 <xQueueGenericSend>
 800b29e:	6278      	str	r0, [r7, #36]	; 0x24
 800b2a0:	e008      	b.n	800b2b4 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b2a2:	4b07      	ldr	r3, [pc, #28]	; (800b2c0 <xTimerGenericCommand+0x9c>)
 800b2a4:	6818      	ldr	r0, [r3, #0]
 800b2a6:	f107 0110 	add.w	r1, r7, #16
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	683a      	ldr	r2, [r7, #0]
 800b2ae:	f7fe fd07 	bl	8009cc0 <xQueueGenericSendFromISR>
 800b2b2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b2b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	3728      	adds	r7, #40	; 0x28
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	bd80      	pop	{r7, pc}
 800b2be:	bf00      	nop
 800b2c0:	20007c60 	.word	0x20007c60

0800b2c4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b088      	sub	sp, #32
 800b2c8:	af02      	add	r7, sp, #8
 800b2ca:	6078      	str	r0, [r7, #4]
 800b2cc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b2ce:	4b23      	ldr	r3, [pc, #140]	; (800b35c <prvProcessExpiredTimer+0x98>)
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	68db      	ldr	r3, [r3, #12]
 800b2d4:	68db      	ldr	r3, [r3, #12]
 800b2d6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b2d8:	697b      	ldr	r3, [r7, #20]
 800b2da:	3304      	adds	r3, #4
 800b2dc:	4618      	mov	r0, r3
 800b2de:	f7fe faaf 	bl	8009840 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b2e2:	697b      	ldr	r3, [r7, #20]
 800b2e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b2e8:	f003 0304 	and.w	r3, r3, #4
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d024      	beq.n	800b33a <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b2f0:	697b      	ldr	r3, [r7, #20]
 800b2f2:	699a      	ldr	r2, [r3, #24]
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	18d1      	adds	r1, r2, r3
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	683a      	ldr	r2, [r7, #0]
 800b2fc:	6978      	ldr	r0, [r7, #20]
 800b2fe:	f000 f8d3 	bl	800b4a8 <prvInsertTimerInActiveList>
 800b302:	4603      	mov	r3, r0
 800b304:	2b00      	cmp	r3, #0
 800b306:	d021      	beq.n	800b34c <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b308:	2300      	movs	r3, #0
 800b30a:	9300      	str	r3, [sp, #0]
 800b30c:	2300      	movs	r3, #0
 800b30e:	687a      	ldr	r2, [r7, #4]
 800b310:	2100      	movs	r1, #0
 800b312:	6978      	ldr	r0, [r7, #20]
 800b314:	f7ff ff86 	bl	800b224 <xTimerGenericCommand>
 800b318:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b31a:	693b      	ldr	r3, [r7, #16]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d115      	bne.n	800b34c <prvProcessExpiredTimer+0x88>
	__asm volatile
 800b320:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b324:	b672      	cpsid	i
 800b326:	f383 8811 	msr	BASEPRI, r3
 800b32a:	f3bf 8f6f 	isb	sy
 800b32e:	f3bf 8f4f 	dsb	sy
 800b332:	b662      	cpsie	i
 800b334:	60fb      	str	r3, [r7, #12]
}
 800b336:	bf00      	nop
 800b338:	e7fe      	b.n	800b338 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b33a:	697b      	ldr	r3, [r7, #20]
 800b33c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b340:	f023 0301 	bic.w	r3, r3, #1
 800b344:	b2da      	uxtb	r2, r3
 800b346:	697b      	ldr	r3, [r7, #20]
 800b348:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b34c:	697b      	ldr	r3, [r7, #20]
 800b34e:	6a1b      	ldr	r3, [r3, #32]
 800b350:	6978      	ldr	r0, [r7, #20]
 800b352:	4798      	blx	r3
}
 800b354:	bf00      	nop
 800b356:	3718      	adds	r7, #24
 800b358:	46bd      	mov	sp, r7
 800b35a:	bd80      	pop	{r7, pc}
 800b35c:	20007c58 	.word	0x20007c58

0800b360 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b360:	b580      	push	{r7, lr}
 800b362:	b084      	sub	sp, #16
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b368:	f107 0308 	add.w	r3, r7, #8
 800b36c:	4618      	mov	r0, r3
 800b36e:	f000 f857 	bl	800b420 <prvGetNextExpireTime>
 800b372:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b374:	68bb      	ldr	r3, [r7, #8]
 800b376:	4619      	mov	r1, r3
 800b378:	68f8      	ldr	r0, [r7, #12]
 800b37a:	f000 f803 	bl	800b384 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b37e:	f000 f8d5 	bl	800b52c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b382:	e7f1      	b.n	800b368 <prvTimerTask+0x8>

0800b384 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b384:	b580      	push	{r7, lr}
 800b386:	b084      	sub	sp, #16
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
 800b38c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b38e:	f7ff f9f5 	bl	800a77c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b392:	f107 0308 	add.w	r3, r7, #8
 800b396:	4618      	mov	r0, r3
 800b398:	f000 f866 	bl	800b468 <prvSampleTimeNow>
 800b39c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b39e:	68bb      	ldr	r3, [r7, #8]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d130      	bne.n	800b406 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b3a4:	683b      	ldr	r3, [r7, #0]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d10a      	bne.n	800b3c0 <prvProcessTimerOrBlockTask+0x3c>
 800b3aa:	687a      	ldr	r2, [r7, #4]
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	429a      	cmp	r2, r3
 800b3b0:	d806      	bhi.n	800b3c0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b3b2:	f7ff f9f1 	bl	800a798 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b3b6:	68f9      	ldr	r1, [r7, #12]
 800b3b8:	6878      	ldr	r0, [r7, #4]
 800b3ba:	f7ff ff83 	bl	800b2c4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b3be:	e024      	b.n	800b40a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b3c0:	683b      	ldr	r3, [r7, #0]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d008      	beq.n	800b3d8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b3c6:	4b13      	ldr	r3, [pc, #76]	; (800b414 <prvProcessTimerOrBlockTask+0x90>)
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d101      	bne.n	800b3d4 <prvProcessTimerOrBlockTask+0x50>
 800b3d0:	2301      	movs	r3, #1
 800b3d2:	e000      	b.n	800b3d6 <prvProcessTimerOrBlockTask+0x52>
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b3d8:	4b0f      	ldr	r3, [pc, #60]	; (800b418 <prvProcessTimerOrBlockTask+0x94>)
 800b3da:	6818      	ldr	r0, [r3, #0]
 800b3dc:	687a      	ldr	r2, [r7, #4]
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	1ad3      	subs	r3, r2, r3
 800b3e2:	683a      	ldr	r2, [r7, #0]
 800b3e4:	4619      	mov	r1, r3
 800b3e6:	f7fe ff2b 	bl	800a240 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b3ea:	f7ff f9d5 	bl	800a798 <xTaskResumeAll>
 800b3ee:	4603      	mov	r3, r0
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d10a      	bne.n	800b40a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b3f4:	4b09      	ldr	r3, [pc, #36]	; (800b41c <prvProcessTimerOrBlockTask+0x98>)
 800b3f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3fa:	601a      	str	r2, [r3, #0]
 800b3fc:	f3bf 8f4f 	dsb	sy
 800b400:	f3bf 8f6f 	isb	sy
}
 800b404:	e001      	b.n	800b40a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b406:	f7ff f9c7 	bl	800a798 <xTaskResumeAll>
}
 800b40a:	bf00      	nop
 800b40c:	3710      	adds	r7, #16
 800b40e:	46bd      	mov	sp, r7
 800b410:	bd80      	pop	{r7, pc}
 800b412:	bf00      	nop
 800b414:	20007c5c 	.word	0x20007c5c
 800b418:	20007c60 	.word	0x20007c60
 800b41c:	e000ed04 	.word	0xe000ed04

0800b420 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b420:	b480      	push	{r7}
 800b422:	b085      	sub	sp, #20
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b428:	4b0e      	ldr	r3, [pc, #56]	; (800b464 <prvGetNextExpireTime+0x44>)
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d101      	bne.n	800b436 <prvGetNextExpireTime+0x16>
 800b432:	2201      	movs	r2, #1
 800b434:	e000      	b.n	800b438 <prvGetNextExpireTime+0x18>
 800b436:	2200      	movs	r2, #0
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d105      	bne.n	800b450 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b444:	4b07      	ldr	r3, [pc, #28]	; (800b464 <prvGetNextExpireTime+0x44>)
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	68db      	ldr	r3, [r3, #12]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	60fb      	str	r3, [r7, #12]
 800b44e:	e001      	b.n	800b454 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b450:	2300      	movs	r3, #0
 800b452:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b454:	68fb      	ldr	r3, [r7, #12]
}
 800b456:	4618      	mov	r0, r3
 800b458:	3714      	adds	r7, #20
 800b45a:	46bd      	mov	sp, r7
 800b45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b460:	4770      	bx	lr
 800b462:	bf00      	nop
 800b464:	20007c58 	.word	0x20007c58

0800b468 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b084      	sub	sp, #16
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b470:	f7ff fa32 	bl	800a8d8 <xTaskGetTickCount>
 800b474:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b476:	4b0b      	ldr	r3, [pc, #44]	; (800b4a4 <prvSampleTimeNow+0x3c>)
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	68fa      	ldr	r2, [r7, #12]
 800b47c:	429a      	cmp	r2, r3
 800b47e:	d205      	bcs.n	800b48c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b480:	f000 f93c 	bl	800b6fc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	2201      	movs	r2, #1
 800b488:	601a      	str	r2, [r3, #0]
 800b48a:	e002      	b.n	800b492 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	2200      	movs	r2, #0
 800b490:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b492:	4a04      	ldr	r2, [pc, #16]	; (800b4a4 <prvSampleTimeNow+0x3c>)
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b498:	68fb      	ldr	r3, [r7, #12]
}
 800b49a:	4618      	mov	r0, r3
 800b49c:	3710      	adds	r7, #16
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	bd80      	pop	{r7, pc}
 800b4a2:	bf00      	nop
 800b4a4:	20007c68 	.word	0x20007c68

0800b4a8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b086      	sub	sp, #24
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	60f8      	str	r0, [r7, #12]
 800b4b0:	60b9      	str	r1, [r7, #8]
 800b4b2:	607a      	str	r2, [r7, #4]
 800b4b4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	68ba      	ldr	r2, [r7, #8]
 800b4be:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	68fa      	ldr	r2, [r7, #12]
 800b4c4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b4c6:	68ba      	ldr	r2, [r7, #8]
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	429a      	cmp	r2, r3
 800b4cc:	d812      	bhi.n	800b4f4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b4ce:	687a      	ldr	r2, [r7, #4]
 800b4d0:	683b      	ldr	r3, [r7, #0]
 800b4d2:	1ad2      	subs	r2, r2, r3
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	699b      	ldr	r3, [r3, #24]
 800b4d8:	429a      	cmp	r2, r3
 800b4da:	d302      	bcc.n	800b4e2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b4dc:	2301      	movs	r3, #1
 800b4de:	617b      	str	r3, [r7, #20]
 800b4e0:	e01b      	b.n	800b51a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b4e2:	4b10      	ldr	r3, [pc, #64]	; (800b524 <prvInsertTimerInActiveList+0x7c>)
 800b4e4:	681a      	ldr	r2, [r3, #0]
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	3304      	adds	r3, #4
 800b4ea:	4619      	mov	r1, r3
 800b4ec:	4610      	mov	r0, r2
 800b4ee:	f7fe f96e 	bl	80097ce <vListInsert>
 800b4f2:	e012      	b.n	800b51a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b4f4:	687a      	ldr	r2, [r7, #4]
 800b4f6:	683b      	ldr	r3, [r7, #0]
 800b4f8:	429a      	cmp	r2, r3
 800b4fa:	d206      	bcs.n	800b50a <prvInsertTimerInActiveList+0x62>
 800b4fc:	68ba      	ldr	r2, [r7, #8]
 800b4fe:	683b      	ldr	r3, [r7, #0]
 800b500:	429a      	cmp	r2, r3
 800b502:	d302      	bcc.n	800b50a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b504:	2301      	movs	r3, #1
 800b506:	617b      	str	r3, [r7, #20]
 800b508:	e007      	b.n	800b51a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b50a:	4b07      	ldr	r3, [pc, #28]	; (800b528 <prvInsertTimerInActiveList+0x80>)
 800b50c:	681a      	ldr	r2, [r3, #0]
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	3304      	adds	r3, #4
 800b512:	4619      	mov	r1, r3
 800b514:	4610      	mov	r0, r2
 800b516:	f7fe f95a 	bl	80097ce <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b51a:	697b      	ldr	r3, [r7, #20]
}
 800b51c:	4618      	mov	r0, r3
 800b51e:	3718      	adds	r7, #24
 800b520:	46bd      	mov	sp, r7
 800b522:	bd80      	pop	{r7, pc}
 800b524:	20007c5c 	.word	0x20007c5c
 800b528:	20007c58 	.word	0x20007c58

0800b52c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b08e      	sub	sp, #56	; 0x38
 800b530:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b532:	e0d0      	b.n	800b6d6 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	2b00      	cmp	r3, #0
 800b538:	da1a      	bge.n	800b570 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b53a:	1d3b      	adds	r3, r7, #4
 800b53c:	3304      	adds	r3, #4
 800b53e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b542:	2b00      	cmp	r3, #0
 800b544:	d10c      	bne.n	800b560 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800b546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b54a:	b672      	cpsid	i
 800b54c:	f383 8811 	msr	BASEPRI, r3
 800b550:	f3bf 8f6f 	isb	sy
 800b554:	f3bf 8f4f 	dsb	sy
 800b558:	b662      	cpsie	i
 800b55a:	61fb      	str	r3, [r7, #28]
}
 800b55c:	bf00      	nop
 800b55e:	e7fe      	b.n	800b55e <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b566:	6850      	ldr	r0, [r2, #4]
 800b568:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b56a:	6892      	ldr	r2, [r2, #8]
 800b56c:	4611      	mov	r1, r2
 800b56e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	2b00      	cmp	r3, #0
 800b574:	f2c0 80af 	blt.w	800b6d6 <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b57c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b57e:	695b      	ldr	r3, [r3, #20]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d004      	beq.n	800b58e <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b586:	3304      	adds	r3, #4
 800b588:	4618      	mov	r0, r3
 800b58a:	f7fe f959 	bl	8009840 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b58e:	463b      	mov	r3, r7
 800b590:	4618      	mov	r0, r3
 800b592:	f7ff ff69 	bl	800b468 <prvSampleTimeNow>
 800b596:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	2b09      	cmp	r3, #9
 800b59c:	f200 809a 	bhi.w	800b6d4 <prvProcessReceivedCommands+0x1a8>
 800b5a0:	a201      	add	r2, pc, #4	; (adr r2, 800b5a8 <prvProcessReceivedCommands+0x7c>)
 800b5a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5a6:	bf00      	nop
 800b5a8:	0800b5d1 	.word	0x0800b5d1
 800b5ac:	0800b5d1 	.word	0x0800b5d1
 800b5b0:	0800b5d1 	.word	0x0800b5d1
 800b5b4:	0800b649 	.word	0x0800b649
 800b5b8:	0800b65d 	.word	0x0800b65d
 800b5bc:	0800b6ab 	.word	0x0800b6ab
 800b5c0:	0800b5d1 	.word	0x0800b5d1
 800b5c4:	0800b5d1 	.word	0x0800b5d1
 800b5c8:	0800b649 	.word	0x0800b649
 800b5cc:	0800b65d 	.word	0x0800b65d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b5d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b5d6:	f043 0301 	orr.w	r3, r3, #1
 800b5da:	b2da      	uxtb	r2, r3
 800b5dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b5e2:	68ba      	ldr	r2, [r7, #8]
 800b5e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5e6:	699b      	ldr	r3, [r3, #24]
 800b5e8:	18d1      	adds	r1, r2, r3
 800b5ea:	68bb      	ldr	r3, [r7, #8]
 800b5ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b5f0:	f7ff ff5a 	bl	800b4a8 <prvInsertTimerInActiveList>
 800b5f4:	4603      	mov	r3, r0
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d06d      	beq.n	800b6d6 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b5fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5fc:	6a1b      	ldr	r3, [r3, #32]
 800b5fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b600:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b604:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b608:	f003 0304 	and.w	r3, r3, #4
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d062      	beq.n	800b6d6 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b610:	68ba      	ldr	r2, [r7, #8]
 800b612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b614:	699b      	ldr	r3, [r3, #24]
 800b616:	441a      	add	r2, r3
 800b618:	2300      	movs	r3, #0
 800b61a:	9300      	str	r3, [sp, #0]
 800b61c:	2300      	movs	r3, #0
 800b61e:	2100      	movs	r1, #0
 800b620:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b622:	f7ff fdff 	bl	800b224 <xTimerGenericCommand>
 800b626:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b628:	6a3b      	ldr	r3, [r7, #32]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d153      	bne.n	800b6d6 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800b62e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b632:	b672      	cpsid	i
 800b634:	f383 8811 	msr	BASEPRI, r3
 800b638:	f3bf 8f6f 	isb	sy
 800b63c:	f3bf 8f4f 	dsb	sy
 800b640:	b662      	cpsie	i
 800b642:	61bb      	str	r3, [r7, #24]
}
 800b644:	bf00      	nop
 800b646:	e7fe      	b.n	800b646 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b64a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b64e:	f023 0301 	bic.w	r3, r3, #1
 800b652:	b2da      	uxtb	r2, r3
 800b654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b656:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b65a:	e03c      	b.n	800b6d6 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b65c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b65e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b662:	f043 0301 	orr.w	r3, r3, #1
 800b666:	b2da      	uxtb	r2, r3
 800b668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b66a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b66e:	68ba      	ldr	r2, [r7, #8]
 800b670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b672:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b676:	699b      	ldr	r3, [r3, #24]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d10c      	bne.n	800b696 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800b67c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b680:	b672      	cpsid	i
 800b682:	f383 8811 	msr	BASEPRI, r3
 800b686:	f3bf 8f6f 	isb	sy
 800b68a:	f3bf 8f4f 	dsb	sy
 800b68e:	b662      	cpsie	i
 800b690:	617b      	str	r3, [r7, #20]
}
 800b692:	bf00      	nop
 800b694:	e7fe      	b.n	800b694 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b698:	699a      	ldr	r2, [r3, #24]
 800b69a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b69c:	18d1      	adds	r1, r2, r3
 800b69e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b6a4:	f7ff ff00 	bl	800b4a8 <prvInsertTimerInActiveList>
					break;
 800b6a8:	e015      	b.n	800b6d6 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b6aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b6b0:	f003 0302 	and.w	r3, r3, #2
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d103      	bne.n	800b6c0 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800b6b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b6ba:	f000 fbc5 	bl	800be48 <vPortFree>
 800b6be:	e00a      	b.n	800b6d6 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b6c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b6c6:	f023 0301 	bic.w	r3, r3, #1
 800b6ca:	b2da      	uxtb	r2, r3
 800b6cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b6d2:	e000      	b.n	800b6d6 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 800b6d4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b6d6:	4b08      	ldr	r3, [pc, #32]	; (800b6f8 <prvProcessReceivedCommands+0x1cc>)
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	1d39      	adds	r1, r7, #4
 800b6dc:	2200      	movs	r2, #0
 800b6de:	4618      	mov	r0, r3
 800b6e0:	f7fe fb8e 	bl	8009e00 <xQueueReceive>
 800b6e4:	4603      	mov	r3, r0
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	f47f af24 	bne.w	800b534 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b6ec:	bf00      	nop
 800b6ee:	bf00      	nop
 800b6f0:	3730      	adds	r7, #48	; 0x30
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	bd80      	pop	{r7, pc}
 800b6f6:	bf00      	nop
 800b6f8:	20007c60 	.word	0x20007c60

0800b6fc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b088      	sub	sp, #32
 800b700:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b702:	e04a      	b.n	800b79a <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b704:	4b2e      	ldr	r3, [pc, #184]	; (800b7c0 <prvSwitchTimerLists+0xc4>)
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	68db      	ldr	r3, [r3, #12]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b70e:	4b2c      	ldr	r3, [pc, #176]	; (800b7c0 <prvSwitchTimerLists+0xc4>)
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	68db      	ldr	r3, [r3, #12]
 800b714:	68db      	ldr	r3, [r3, #12]
 800b716:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	3304      	adds	r3, #4
 800b71c:	4618      	mov	r0, r3
 800b71e:	f7fe f88f 	bl	8009840 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	6a1b      	ldr	r3, [r3, #32]
 800b726:	68f8      	ldr	r0, [r7, #12]
 800b728:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b730:	f003 0304 	and.w	r3, r3, #4
 800b734:	2b00      	cmp	r3, #0
 800b736:	d030      	beq.n	800b79a <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	699b      	ldr	r3, [r3, #24]
 800b73c:	693a      	ldr	r2, [r7, #16]
 800b73e:	4413      	add	r3, r2
 800b740:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b742:	68ba      	ldr	r2, [r7, #8]
 800b744:	693b      	ldr	r3, [r7, #16]
 800b746:	429a      	cmp	r2, r3
 800b748:	d90e      	bls.n	800b768 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	68ba      	ldr	r2, [r7, #8]
 800b74e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	68fa      	ldr	r2, [r7, #12]
 800b754:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b756:	4b1a      	ldr	r3, [pc, #104]	; (800b7c0 <prvSwitchTimerLists+0xc4>)
 800b758:	681a      	ldr	r2, [r3, #0]
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	3304      	adds	r3, #4
 800b75e:	4619      	mov	r1, r3
 800b760:	4610      	mov	r0, r2
 800b762:	f7fe f834 	bl	80097ce <vListInsert>
 800b766:	e018      	b.n	800b79a <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b768:	2300      	movs	r3, #0
 800b76a:	9300      	str	r3, [sp, #0]
 800b76c:	2300      	movs	r3, #0
 800b76e:	693a      	ldr	r2, [r7, #16]
 800b770:	2100      	movs	r1, #0
 800b772:	68f8      	ldr	r0, [r7, #12]
 800b774:	f7ff fd56 	bl	800b224 <xTimerGenericCommand>
 800b778:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d10c      	bne.n	800b79a <prvSwitchTimerLists+0x9e>
	__asm volatile
 800b780:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b784:	b672      	cpsid	i
 800b786:	f383 8811 	msr	BASEPRI, r3
 800b78a:	f3bf 8f6f 	isb	sy
 800b78e:	f3bf 8f4f 	dsb	sy
 800b792:	b662      	cpsie	i
 800b794:	603b      	str	r3, [r7, #0]
}
 800b796:	bf00      	nop
 800b798:	e7fe      	b.n	800b798 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b79a:	4b09      	ldr	r3, [pc, #36]	; (800b7c0 <prvSwitchTimerLists+0xc4>)
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d1af      	bne.n	800b704 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b7a4:	4b06      	ldr	r3, [pc, #24]	; (800b7c0 <prvSwitchTimerLists+0xc4>)
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b7aa:	4b06      	ldr	r3, [pc, #24]	; (800b7c4 <prvSwitchTimerLists+0xc8>)
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	4a04      	ldr	r2, [pc, #16]	; (800b7c0 <prvSwitchTimerLists+0xc4>)
 800b7b0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b7b2:	4a04      	ldr	r2, [pc, #16]	; (800b7c4 <prvSwitchTimerLists+0xc8>)
 800b7b4:	697b      	ldr	r3, [r7, #20]
 800b7b6:	6013      	str	r3, [r2, #0]
}
 800b7b8:	bf00      	nop
 800b7ba:	3718      	adds	r7, #24
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	bd80      	pop	{r7, pc}
 800b7c0:	20007c58 	.word	0x20007c58
 800b7c4:	20007c5c 	.word	0x20007c5c

0800b7c8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b082      	sub	sp, #8
 800b7cc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b7ce:	f000 f945 	bl	800ba5c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b7d2:	4b15      	ldr	r3, [pc, #84]	; (800b828 <prvCheckForValidListAndQueue+0x60>)
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d120      	bne.n	800b81c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b7da:	4814      	ldr	r0, [pc, #80]	; (800b82c <prvCheckForValidListAndQueue+0x64>)
 800b7dc:	f7fd ffa6 	bl	800972c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b7e0:	4813      	ldr	r0, [pc, #76]	; (800b830 <prvCheckForValidListAndQueue+0x68>)
 800b7e2:	f7fd ffa3 	bl	800972c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b7e6:	4b13      	ldr	r3, [pc, #76]	; (800b834 <prvCheckForValidListAndQueue+0x6c>)
 800b7e8:	4a10      	ldr	r2, [pc, #64]	; (800b82c <prvCheckForValidListAndQueue+0x64>)
 800b7ea:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b7ec:	4b12      	ldr	r3, [pc, #72]	; (800b838 <prvCheckForValidListAndQueue+0x70>)
 800b7ee:	4a10      	ldr	r2, [pc, #64]	; (800b830 <prvCheckForValidListAndQueue+0x68>)
 800b7f0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	9300      	str	r3, [sp, #0]
 800b7f6:	4b11      	ldr	r3, [pc, #68]	; (800b83c <prvCheckForValidListAndQueue+0x74>)
 800b7f8:	4a11      	ldr	r2, [pc, #68]	; (800b840 <prvCheckForValidListAndQueue+0x78>)
 800b7fa:	2110      	movs	r1, #16
 800b7fc:	200a      	movs	r0, #10
 800b7fe:	f7fe f8b3 	bl	8009968 <xQueueGenericCreateStatic>
 800b802:	4603      	mov	r3, r0
 800b804:	4a08      	ldr	r2, [pc, #32]	; (800b828 <prvCheckForValidListAndQueue+0x60>)
 800b806:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b808:	4b07      	ldr	r3, [pc, #28]	; (800b828 <prvCheckForValidListAndQueue+0x60>)
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d005      	beq.n	800b81c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b810:	4b05      	ldr	r3, [pc, #20]	; (800b828 <prvCheckForValidListAndQueue+0x60>)
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	490b      	ldr	r1, [pc, #44]	; (800b844 <prvCheckForValidListAndQueue+0x7c>)
 800b816:	4618      	mov	r0, r3
 800b818:	f7fe fce8 	bl	800a1ec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b81c:	f000 f952 	bl	800bac4 <vPortExitCritical>
}
 800b820:	bf00      	nop
 800b822:	46bd      	mov	sp, r7
 800b824:	bd80      	pop	{r7, pc}
 800b826:	bf00      	nop
 800b828:	20007c60 	.word	0x20007c60
 800b82c:	20007c30 	.word	0x20007c30
 800b830:	20007c44 	.word	0x20007c44
 800b834:	20007c58 	.word	0x20007c58
 800b838:	20007c5c 	.word	0x20007c5c
 800b83c:	20007d0c 	.word	0x20007d0c
 800b840:	20007c6c 	.word	0x20007c6c
 800b844:	0801c40c 	.word	0x0801c40c

0800b848 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b848:	b480      	push	{r7}
 800b84a:	b085      	sub	sp, #20
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	60f8      	str	r0, [r7, #12]
 800b850:	60b9      	str	r1, [r7, #8]
 800b852:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	3b04      	subs	r3, #4
 800b858:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b860:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	3b04      	subs	r3, #4
 800b866:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b868:	68bb      	ldr	r3, [r7, #8]
 800b86a:	f023 0201 	bic.w	r2, r3, #1
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	3b04      	subs	r3, #4
 800b876:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b878:	4a0c      	ldr	r2, [pc, #48]	; (800b8ac <pxPortInitialiseStack+0x64>)
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	3b14      	subs	r3, #20
 800b882:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b884:	687a      	ldr	r2, [r7, #4]
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	3b04      	subs	r3, #4
 800b88e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	f06f 0202 	mvn.w	r2, #2
 800b896:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	3b20      	subs	r3, #32
 800b89c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b89e:	68fb      	ldr	r3, [r7, #12]
}
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	3714      	adds	r7, #20
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8aa:	4770      	bx	lr
 800b8ac:	0800b8b1 	.word	0x0800b8b1

0800b8b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b8b0:	b480      	push	{r7}
 800b8b2:	b085      	sub	sp, #20
 800b8b4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b8ba:	4b14      	ldr	r3, [pc, #80]	; (800b90c <prvTaskExitError+0x5c>)
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b8c2:	d00c      	beq.n	800b8de <prvTaskExitError+0x2e>
	__asm volatile
 800b8c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8c8:	b672      	cpsid	i
 800b8ca:	f383 8811 	msr	BASEPRI, r3
 800b8ce:	f3bf 8f6f 	isb	sy
 800b8d2:	f3bf 8f4f 	dsb	sy
 800b8d6:	b662      	cpsie	i
 800b8d8:	60fb      	str	r3, [r7, #12]
}
 800b8da:	bf00      	nop
 800b8dc:	e7fe      	b.n	800b8dc <prvTaskExitError+0x2c>
	__asm volatile
 800b8de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8e2:	b672      	cpsid	i
 800b8e4:	f383 8811 	msr	BASEPRI, r3
 800b8e8:	f3bf 8f6f 	isb	sy
 800b8ec:	f3bf 8f4f 	dsb	sy
 800b8f0:	b662      	cpsie	i
 800b8f2:	60bb      	str	r3, [r7, #8]
}
 800b8f4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b8f6:	bf00      	nop
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d0fc      	beq.n	800b8f8 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b8fe:	bf00      	nop
 800b900:	bf00      	nop
 800b902:	3714      	adds	r7, #20
 800b904:	46bd      	mov	sp, r7
 800b906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90a:	4770      	bx	lr
 800b90c:	20000010 	.word	0x20000010

0800b910 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b910:	4b07      	ldr	r3, [pc, #28]	; (800b930 <pxCurrentTCBConst2>)
 800b912:	6819      	ldr	r1, [r3, #0]
 800b914:	6808      	ldr	r0, [r1, #0]
 800b916:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b91a:	f380 8809 	msr	PSP, r0
 800b91e:	f3bf 8f6f 	isb	sy
 800b922:	f04f 0000 	mov.w	r0, #0
 800b926:	f380 8811 	msr	BASEPRI, r0
 800b92a:	4770      	bx	lr
 800b92c:	f3af 8000 	nop.w

0800b930 <pxCurrentTCBConst2>:
 800b930:	20007730 	.word	0x20007730
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b934:	bf00      	nop
 800b936:	bf00      	nop

0800b938 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b938:	4808      	ldr	r0, [pc, #32]	; (800b95c <prvPortStartFirstTask+0x24>)
 800b93a:	6800      	ldr	r0, [r0, #0]
 800b93c:	6800      	ldr	r0, [r0, #0]
 800b93e:	f380 8808 	msr	MSP, r0
 800b942:	f04f 0000 	mov.w	r0, #0
 800b946:	f380 8814 	msr	CONTROL, r0
 800b94a:	b662      	cpsie	i
 800b94c:	b661      	cpsie	f
 800b94e:	f3bf 8f4f 	dsb	sy
 800b952:	f3bf 8f6f 	isb	sy
 800b956:	df00      	svc	0
 800b958:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b95a:	bf00      	nop
 800b95c:	e000ed08 	.word	0xe000ed08

0800b960 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b960:	b580      	push	{r7, lr}
 800b962:	b084      	sub	sp, #16
 800b964:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b966:	4b37      	ldr	r3, [pc, #220]	; (800ba44 <xPortStartScheduler+0xe4>)
 800b968:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	781b      	ldrb	r3, [r3, #0]
 800b96e:	b2db      	uxtb	r3, r3
 800b970:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	22ff      	movs	r2, #255	; 0xff
 800b976:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	781b      	ldrb	r3, [r3, #0]
 800b97c:	b2db      	uxtb	r3, r3
 800b97e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b980:	78fb      	ldrb	r3, [r7, #3]
 800b982:	b2db      	uxtb	r3, r3
 800b984:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b988:	b2da      	uxtb	r2, r3
 800b98a:	4b2f      	ldr	r3, [pc, #188]	; (800ba48 <xPortStartScheduler+0xe8>)
 800b98c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b98e:	4b2f      	ldr	r3, [pc, #188]	; (800ba4c <xPortStartScheduler+0xec>)
 800b990:	2207      	movs	r2, #7
 800b992:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b994:	e009      	b.n	800b9aa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800b996:	4b2d      	ldr	r3, [pc, #180]	; (800ba4c <xPortStartScheduler+0xec>)
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	3b01      	subs	r3, #1
 800b99c:	4a2b      	ldr	r2, [pc, #172]	; (800ba4c <xPortStartScheduler+0xec>)
 800b99e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b9a0:	78fb      	ldrb	r3, [r7, #3]
 800b9a2:	b2db      	uxtb	r3, r3
 800b9a4:	005b      	lsls	r3, r3, #1
 800b9a6:	b2db      	uxtb	r3, r3
 800b9a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b9aa:	78fb      	ldrb	r3, [r7, #3]
 800b9ac:	b2db      	uxtb	r3, r3
 800b9ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9b2:	2b80      	cmp	r3, #128	; 0x80
 800b9b4:	d0ef      	beq.n	800b996 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b9b6:	4b25      	ldr	r3, [pc, #148]	; (800ba4c <xPortStartScheduler+0xec>)
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	f1c3 0307 	rsb	r3, r3, #7
 800b9be:	2b04      	cmp	r3, #4
 800b9c0:	d00c      	beq.n	800b9dc <xPortStartScheduler+0x7c>
	__asm volatile
 800b9c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9c6:	b672      	cpsid	i
 800b9c8:	f383 8811 	msr	BASEPRI, r3
 800b9cc:	f3bf 8f6f 	isb	sy
 800b9d0:	f3bf 8f4f 	dsb	sy
 800b9d4:	b662      	cpsie	i
 800b9d6:	60bb      	str	r3, [r7, #8]
}
 800b9d8:	bf00      	nop
 800b9da:	e7fe      	b.n	800b9da <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b9dc:	4b1b      	ldr	r3, [pc, #108]	; (800ba4c <xPortStartScheduler+0xec>)
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	021b      	lsls	r3, r3, #8
 800b9e2:	4a1a      	ldr	r2, [pc, #104]	; (800ba4c <xPortStartScheduler+0xec>)
 800b9e4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b9e6:	4b19      	ldr	r3, [pc, #100]	; (800ba4c <xPortStartScheduler+0xec>)
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b9ee:	4a17      	ldr	r2, [pc, #92]	; (800ba4c <xPortStartScheduler+0xec>)
 800b9f0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	b2da      	uxtb	r2, r3
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b9fa:	4b15      	ldr	r3, [pc, #84]	; (800ba50 <xPortStartScheduler+0xf0>)
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	4a14      	ldr	r2, [pc, #80]	; (800ba50 <xPortStartScheduler+0xf0>)
 800ba00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ba04:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ba06:	4b12      	ldr	r3, [pc, #72]	; (800ba50 <xPortStartScheduler+0xf0>)
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	4a11      	ldr	r2, [pc, #68]	; (800ba50 <xPortStartScheduler+0xf0>)
 800ba0c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ba10:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ba12:	f000 f8dd 	bl	800bbd0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ba16:	4b0f      	ldr	r3, [pc, #60]	; (800ba54 <xPortStartScheduler+0xf4>)
 800ba18:	2200      	movs	r2, #0
 800ba1a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ba1c:	f000 f8fc 	bl	800bc18 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ba20:	4b0d      	ldr	r3, [pc, #52]	; (800ba58 <xPortStartScheduler+0xf8>)
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	4a0c      	ldr	r2, [pc, #48]	; (800ba58 <xPortStartScheduler+0xf8>)
 800ba26:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ba2a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ba2c:	f7ff ff84 	bl	800b938 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ba30:	f7ff f81e 	bl	800aa70 <vTaskSwitchContext>
	prvTaskExitError();
 800ba34:	f7ff ff3c 	bl	800b8b0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ba38:	2300      	movs	r3, #0
}
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	3710      	adds	r7, #16
 800ba3e:	46bd      	mov	sp, r7
 800ba40:	bd80      	pop	{r7, pc}
 800ba42:	bf00      	nop
 800ba44:	e000e400 	.word	0xe000e400
 800ba48:	20007d5c 	.word	0x20007d5c
 800ba4c:	20007d60 	.word	0x20007d60
 800ba50:	e000ed20 	.word	0xe000ed20
 800ba54:	20000010 	.word	0x20000010
 800ba58:	e000ef34 	.word	0xe000ef34

0800ba5c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ba5c:	b480      	push	{r7}
 800ba5e:	b083      	sub	sp, #12
 800ba60:	af00      	add	r7, sp, #0
	__asm volatile
 800ba62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba66:	b672      	cpsid	i
 800ba68:	f383 8811 	msr	BASEPRI, r3
 800ba6c:	f3bf 8f6f 	isb	sy
 800ba70:	f3bf 8f4f 	dsb	sy
 800ba74:	b662      	cpsie	i
 800ba76:	607b      	str	r3, [r7, #4]
}
 800ba78:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ba7a:	4b10      	ldr	r3, [pc, #64]	; (800babc <vPortEnterCritical+0x60>)
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	3301      	adds	r3, #1
 800ba80:	4a0e      	ldr	r2, [pc, #56]	; (800babc <vPortEnterCritical+0x60>)
 800ba82:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ba84:	4b0d      	ldr	r3, [pc, #52]	; (800babc <vPortEnterCritical+0x60>)
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	2b01      	cmp	r3, #1
 800ba8a:	d111      	bne.n	800bab0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ba8c:	4b0c      	ldr	r3, [pc, #48]	; (800bac0 <vPortEnterCritical+0x64>)
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	b2db      	uxtb	r3, r3
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d00c      	beq.n	800bab0 <vPortEnterCritical+0x54>
	__asm volatile
 800ba96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba9a:	b672      	cpsid	i
 800ba9c:	f383 8811 	msr	BASEPRI, r3
 800baa0:	f3bf 8f6f 	isb	sy
 800baa4:	f3bf 8f4f 	dsb	sy
 800baa8:	b662      	cpsie	i
 800baaa:	603b      	str	r3, [r7, #0]
}
 800baac:	bf00      	nop
 800baae:	e7fe      	b.n	800baae <vPortEnterCritical+0x52>
	}
}
 800bab0:	bf00      	nop
 800bab2:	370c      	adds	r7, #12
 800bab4:	46bd      	mov	sp, r7
 800bab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baba:	4770      	bx	lr
 800babc:	20000010 	.word	0x20000010
 800bac0:	e000ed04 	.word	0xe000ed04

0800bac4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bac4:	b480      	push	{r7}
 800bac6:	b083      	sub	sp, #12
 800bac8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800baca:	4b13      	ldr	r3, [pc, #76]	; (800bb18 <vPortExitCritical+0x54>)
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d10c      	bne.n	800baec <vPortExitCritical+0x28>
	__asm volatile
 800bad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bad6:	b672      	cpsid	i
 800bad8:	f383 8811 	msr	BASEPRI, r3
 800badc:	f3bf 8f6f 	isb	sy
 800bae0:	f3bf 8f4f 	dsb	sy
 800bae4:	b662      	cpsie	i
 800bae6:	607b      	str	r3, [r7, #4]
}
 800bae8:	bf00      	nop
 800baea:	e7fe      	b.n	800baea <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800baec:	4b0a      	ldr	r3, [pc, #40]	; (800bb18 <vPortExitCritical+0x54>)
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	3b01      	subs	r3, #1
 800baf2:	4a09      	ldr	r2, [pc, #36]	; (800bb18 <vPortExitCritical+0x54>)
 800baf4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800baf6:	4b08      	ldr	r3, [pc, #32]	; (800bb18 <vPortExitCritical+0x54>)
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d105      	bne.n	800bb0a <vPortExitCritical+0x46>
 800bafe:	2300      	movs	r3, #0
 800bb00:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bb02:	683b      	ldr	r3, [r7, #0]
 800bb04:	f383 8811 	msr	BASEPRI, r3
}
 800bb08:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bb0a:	bf00      	nop
 800bb0c:	370c      	adds	r7, #12
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb14:	4770      	bx	lr
 800bb16:	bf00      	nop
 800bb18:	20000010 	.word	0x20000010
 800bb1c:	00000000 	.word	0x00000000

0800bb20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bb20:	f3ef 8009 	mrs	r0, PSP
 800bb24:	f3bf 8f6f 	isb	sy
 800bb28:	4b15      	ldr	r3, [pc, #84]	; (800bb80 <pxCurrentTCBConst>)
 800bb2a:	681a      	ldr	r2, [r3, #0]
 800bb2c:	f01e 0f10 	tst.w	lr, #16
 800bb30:	bf08      	it	eq
 800bb32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bb36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb3a:	6010      	str	r0, [r2, #0]
 800bb3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bb40:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bb44:	b672      	cpsid	i
 800bb46:	f380 8811 	msr	BASEPRI, r0
 800bb4a:	f3bf 8f4f 	dsb	sy
 800bb4e:	f3bf 8f6f 	isb	sy
 800bb52:	b662      	cpsie	i
 800bb54:	f7fe ff8c 	bl	800aa70 <vTaskSwitchContext>
 800bb58:	f04f 0000 	mov.w	r0, #0
 800bb5c:	f380 8811 	msr	BASEPRI, r0
 800bb60:	bc09      	pop	{r0, r3}
 800bb62:	6819      	ldr	r1, [r3, #0]
 800bb64:	6808      	ldr	r0, [r1, #0]
 800bb66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb6a:	f01e 0f10 	tst.w	lr, #16
 800bb6e:	bf08      	it	eq
 800bb70:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bb74:	f380 8809 	msr	PSP, r0
 800bb78:	f3bf 8f6f 	isb	sy
 800bb7c:	4770      	bx	lr
 800bb7e:	bf00      	nop

0800bb80 <pxCurrentTCBConst>:
 800bb80:	20007730 	.word	0x20007730
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bb84:	bf00      	nop
 800bb86:	bf00      	nop

0800bb88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b082      	sub	sp, #8
 800bb8c:	af00      	add	r7, sp, #0
	__asm volatile
 800bb8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb92:	b672      	cpsid	i
 800bb94:	f383 8811 	msr	BASEPRI, r3
 800bb98:	f3bf 8f6f 	isb	sy
 800bb9c:	f3bf 8f4f 	dsb	sy
 800bba0:	b662      	cpsie	i
 800bba2:	607b      	str	r3, [r7, #4]
}
 800bba4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bba6:	f7fe fea7 	bl	800a8f8 <xTaskIncrementTick>
 800bbaa:	4603      	mov	r3, r0
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d003      	beq.n	800bbb8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bbb0:	4b06      	ldr	r3, [pc, #24]	; (800bbcc <SysTick_Handler+0x44>)
 800bbb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbb6:	601a      	str	r2, [r3, #0]
 800bbb8:	2300      	movs	r3, #0
 800bbba:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bbbc:	683b      	ldr	r3, [r7, #0]
 800bbbe:	f383 8811 	msr	BASEPRI, r3
}
 800bbc2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bbc4:	bf00      	nop
 800bbc6:	3708      	adds	r7, #8
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	bd80      	pop	{r7, pc}
 800bbcc:	e000ed04 	.word	0xe000ed04

0800bbd0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bbd0:	b480      	push	{r7}
 800bbd2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bbd4:	4b0b      	ldr	r3, [pc, #44]	; (800bc04 <vPortSetupTimerInterrupt+0x34>)
 800bbd6:	2200      	movs	r2, #0
 800bbd8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bbda:	4b0b      	ldr	r3, [pc, #44]	; (800bc08 <vPortSetupTimerInterrupt+0x38>)
 800bbdc:	2200      	movs	r2, #0
 800bbde:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bbe0:	4b0a      	ldr	r3, [pc, #40]	; (800bc0c <vPortSetupTimerInterrupt+0x3c>)
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	4a0a      	ldr	r2, [pc, #40]	; (800bc10 <vPortSetupTimerInterrupt+0x40>)
 800bbe6:	fba2 2303 	umull	r2, r3, r2, r3
 800bbea:	099b      	lsrs	r3, r3, #6
 800bbec:	4a09      	ldr	r2, [pc, #36]	; (800bc14 <vPortSetupTimerInterrupt+0x44>)
 800bbee:	3b01      	subs	r3, #1
 800bbf0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bbf2:	4b04      	ldr	r3, [pc, #16]	; (800bc04 <vPortSetupTimerInterrupt+0x34>)
 800bbf4:	2207      	movs	r2, #7
 800bbf6:	601a      	str	r2, [r3, #0]
}
 800bbf8:	bf00      	nop
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc00:	4770      	bx	lr
 800bc02:	bf00      	nop
 800bc04:	e000e010 	.word	0xe000e010
 800bc08:	e000e018 	.word	0xe000e018
 800bc0c:	20000004 	.word	0x20000004
 800bc10:	10624dd3 	.word	0x10624dd3
 800bc14:	e000e014 	.word	0xe000e014

0800bc18 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bc18:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bc28 <vPortEnableVFP+0x10>
 800bc1c:	6801      	ldr	r1, [r0, #0]
 800bc1e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bc22:	6001      	str	r1, [r0, #0]
 800bc24:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bc26:	bf00      	nop
 800bc28:	e000ed88 	.word	0xe000ed88

0800bc2c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bc2c:	b480      	push	{r7}
 800bc2e:	b085      	sub	sp, #20
 800bc30:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bc32:	f3ef 8305 	mrs	r3, IPSR
 800bc36:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	2b0f      	cmp	r3, #15
 800bc3c:	d916      	bls.n	800bc6c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bc3e:	4a19      	ldr	r2, [pc, #100]	; (800bca4 <vPortValidateInterruptPriority+0x78>)
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	4413      	add	r3, r2
 800bc44:	781b      	ldrb	r3, [r3, #0]
 800bc46:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bc48:	4b17      	ldr	r3, [pc, #92]	; (800bca8 <vPortValidateInterruptPriority+0x7c>)
 800bc4a:	781b      	ldrb	r3, [r3, #0]
 800bc4c:	7afa      	ldrb	r2, [r7, #11]
 800bc4e:	429a      	cmp	r2, r3
 800bc50:	d20c      	bcs.n	800bc6c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800bc52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc56:	b672      	cpsid	i
 800bc58:	f383 8811 	msr	BASEPRI, r3
 800bc5c:	f3bf 8f6f 	isb	sy
 800bc60:	f3bf 8f4f 	dsb	sy
 800bc64:	b662      	cpsie	i
 800bc66:	607b      	str	r3, [r7, #4]
}
 800bc68:	bf00      	nop
 800bc6a:	e7fe      	b.n	800bc6a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bc6c:	4b0f      	ldr	r3, [pc, #60]	; (800bcac <vPortValidateInterruptPriority+0x80>)
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800bc74:	4b0e      	ldr	r3, [pc, #56]	; (800bcb0 <vPortValidateInterruptPriority+0x84>)
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	429a      	cmp	r2, r3
 800bc7a:	d90c      	bls.n	800bc96 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800bc7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc80:	b672      	cpsid	i
 800bc82:	f383 8811 	msr	BASEPRI, r3
 800bc86:	f3bf 8f6f 	isb	sy
 800bc8a:	f3bf 8f4f 	dsb	sy
 800bc8e:	b662      	cpsie	i
 800bc90:	603b      	str	r3, [r7, #0]
}
 800bc92:	bf00      	nop
 800bc94:	e7fe      	b.n	800bc94 <vPortValidateInterruptPriority+0x68>
	}
 800bc96:	bf00      	nop
 800bc98:	3714      	adds	r7, #20
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca0:	4770      	bx	lr
 800bca2:	bf00      	nop
 800bca4:	e000e3f0 	.word	0xe000e3f0
 800bca8:	20007d5c 	.word	0x20007d5c
 800bcac:	e000ed0c 	.word	0xe000ed0c
 800bcb0:	20007d60 	.word	0x20007d60

0800bcb4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	b08a      	sub	sp, #40	; 0x28
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bcc0:	f7fe fd5c 	bl	800a77c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bcc4:	4b5b      	ldr	r3, [pc, #364]	; (800be34 <pvPortMalloc+0x180>)
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d101      	bne.n	800bcd0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bccc:	f000 f91a 	bl	800bf04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bcd0:	4b59      	ldr	r3, [pc, #356]	; (800be38 <pvPortMalloc+0x184>)
 800bcd2:	681a      	ldr	r2, [r3, #0]
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	4013      	ands	r3, r2
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	f040 8092 	bne.w	800be02 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d01f      	beq.n	800bd24 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800bce4:	2208      	movs	r2, #8
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	4413      	add	r3, r2
 800bcea:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	f003 0307 	and.w	r3, r3, #7
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d016      	beq.n	800bd24 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	f023 0307 	bic.w	r3, r3, #7
 800bcfc:	3308      	adds	r3, #8
 800bcfe:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	f003 0307 	and.w	r3, r3, #7
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d00c      	beq.n	800bd24 <pvPortMalloc+0x70>
	__asm volatile
 800bd0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd0e:	b672      	cpsid	i
 800bd10:	f383 8811 	msr	BASEPRI, r3
 800bd14:	f3bf 8f6f 	isb	sy
 800bd18:	f3bf 8f4f 	dsb	sy
 800bd1c:	b662      	cpsie	i
 800bd1e:	617b      	str	r3, [r7, #20]
}
 800bd20:	bf00      	nop
 800bd22:	e7fe      	b.n	800bd22 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d06b      	beq.n	800be02 <pvPortMalloc+0x14e>
 800bd2a:	4b44      	ldr	r3, [pc, #272]	; (800be3c <pvPortMalloc+0x188>)
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	687a      	ldr	r2, [r7, #4]
 800bd30:	429a      	cmp	r2, r3
 800bd32:	d866      	bhi.n	800be02 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bd34:	4b42      	ldr	r3, [pc, #264]	; (800be40 <pvPortMalloc+0x18c>)
 800bd36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bd38:	4b41      	ldr	r3, [pc, #260]	; (800be40 <pvPortMalloc+0x18c>)
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bd3e:	e004      	b.n	800bd4a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800bd40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bd44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bd4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd4c:	685b      	ldr	r3, [r3, #4]
 800bd4e:	687a      	ldr	r2, [r7, #4]
 800bd50:	429a      	cmp	r2, r3
 800bd52:	d903      	bls.n	800bd5c <pvPortMalloc+0xa8>
 800bd54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d1f1      	bne.n	800bd40 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bd5c:	4b35      	ldr	r3, [pc, #212]	; (800be34 <pvPortMalloc+0x180>)
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd62:	429a      	cmp	r2, r3
 800bd64:	d04d      	beq.n	800be02 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bd66:	6a3b      	ldr	r3, [r7, #32]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	2208      	movs	r2, #8
 800bd6c:	4413      	add	r3, r2
 800bd6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bd70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd72:	681a      	ldr	r2, [r3, #0]
 800bd74:	6a3b      	ldr	r3, [r7, #32]
 800bd76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bd78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd7a:	685a      	ldr	r2, [r3, #4]
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	1ad2      	subs	r2, r2, r3
 800bd80:	2308      	movs	r3, #8
 800bd82:	005b      	lsls	r3, r3, #1
 800bd84:	429a      	cmp	r2, r3
 800bd86:	d921      	bls.n	800bdcc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bd88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	4413      	add	r3, r2
 800bd8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bd90:	69bb      	ldr	r3, [r7, #24]
 800bd92:	f003 0307 	and.w	r3, r3, #7
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d00c      	beq.n	800bdb4 <pvPortMalloc+0x100>
	__asm volatile
 800bd9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd9e:	b672      	cpsid	i
 800bda0:	f383 8811 	msr	BASEPRI, r3
 800bda4:	f3bf 8f6f 	isb	sy
 800bda8:	f3bf 8f4f 	dsb	sy
 800bdac:	b662      	cpsie	i
 800bdae:	613b      	str	r3, [r7, #16]
}
 800bdb0:	bf00      	nop
 800bdb2:	e7fe      	b.n	800bdb2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bdb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdb6:	685a      	ldr	r2, [r3, #4]
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	1ad2      	subs	r2, r2, r3
 800bdbc:	69bb      	ldr	r3, [r7, #24]
 800bdbe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bdc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdc2:	687a      	ldr	r2, [r7, #4]
 800bdc4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bdc6:	69b8      	ldr	r0, [r7, #24]
 800bdc8:	f000 f8fe 	bl	800bfc8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bdcc:	4b1b      	ldr	r3, [pc, #108]	; (800be3c <pvPortMalloc+0x188>)
 800bdce:	681a      	ldr	r2, [r3, #0]
 800bdd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdd2:	685b      	ldr	r3, [r3, #4]
 800bdd4:	1ad3      	subs	r3, r2, r3
 800bdd6:	4a19      	ldr	r2, [pc, #100]	; (800be3c <pvPortMalloc+0x188>)
 800bdd8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bdda:	4b18      	ldr	r3, [pc, #96]	; (800be3c <pvPortMalloc+0x188>)
 800bddc:	681a      	ldr	r2, [r3, #0]
 800bdde:	4b19      	ldr	r3, [pc, #100]	; (800be44 <pvPortMalloc+0x190>)
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	429a      	cmp	r2, r3
 800bde4:	d203      	bcs.n	800bdee <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bde6:	4b15      	ldr	r3, [pc, #84]	; (800be3c <pvPortMalloc+0x188>)
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	4a16      	ldr	r2, [pc, #88]	; (800be44 <pvPortMalloc+0x190>)
 800bdec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bdee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdf0:	685a      	ldr	r2, [r3, #4]
 800bdf2:	4b11      	ldr	r3, [pc, #68]	; (800be38 <pvPortMalloc+0x184>)
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	431a      	orrs	r2, r3
 800bdf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdfa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bdfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdfe:	2200      	movs	r2, #0
 800be00:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800be02:	f7fe fcc9 	bl	800a798 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800be06:	69fb      	ldr	r3, [r7, #28]
 800be08:	f003 0307 	and.w	r3, r3, #7
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d00c      	beq.n	800be2a <pvPortMalloc+0x176>
	__asm volatile
 800be10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be14:	b672      	cpsid	i
 800be16:	f383 8811 	msr	BASEPRI, r3
 800be1a:	f3bf 8f6f 	isb	sy
 800be1e:	f3bf 8f4f 	dsb	sy
 800be22:	b662      	cpsie	i
 800be24:	60fb      	str	r3, [r7, #12]
}
 800be26:	bf00      	nop
 800be28:	e7fe      	b.n	800be28 <pvPortMalloc+0x174>
	return pvReturn;
 800be2a:	69fb      	ldr	r3, [r7, #28]
}
 800be2c:	4618      	mov	r0, r3
 800be2e:	3728      	adds	r7, #40	; 0x28
 800be30:	46bd      	mov	sp, r7
 800be32:	bd80      	pop	{r7, pc}
 800be34:	2000b96c 	.word	0x2000b96c
 800be38:	2000b978 	.word	0x2000b978
 800be3c:	2000b970 	.word	0x2000b970
 800be40:	2000b964 	.word	0x2000b964
 800be44:	2000b974 	.word	0x2000b974

0800be48 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800be48:	b580      	push	{r7, lr}
 800be4a:	b086      	sub	sp, #24
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	2b00      	cmp	r3, #0
 800be58:	d04c      	beq.n	800bef4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800be5a:	2308      	movs	r3, #8
 800be5c:	425b      	negs	r3, r3
 800be5e:	697a      	ldr	r2, [r7, #20]
 800be60:	4413      	add	r3, r2
 800be62:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800be64:	697b      	ldr	r3, [r7, #20]
 800be66:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800be68:	693b      	ldr	r3, [r7, #16]
 800be6a:	685a      	ldr	r2, [r3, #4]
 800be6c:	4b23      	ldr	r3, [pc, #140]	; (800befc <vPortFree+0xb4>)
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	4013      	ands	r3, r2
 800be72:	2b00      	cmp	r3, #0
 800be74:	d10c      	bne.n	800be90 <vPortFree+0x48>
	__asm volatile
 800be76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be7a:	b672      	cpsid	i
 800be7c:	f383 8811 	msr	BASEPRI, r3
 800be80:	f3bf 8f6f 	isb	sy
 800be84:	f3bf 8f4f 	dsb	sy
 800be88:	b662      	cpsie	i
 800be8a:	60fb      	str	r3, [r7, #12]
}
 800be8c:	bf00      	nop
 800be8e:	e7fe      	b.n	800be8e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800be90:	693b      	ldr	r3, [r7, #16]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d00c      	beq.n	800beb2 <vPortFree+0x6a>
	__asm volatile
 800be98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be9c:	b672      	cpsid	i
 800be9e:	f383 8811 	msr	BASEPRI, r3
 800bea2:	f3bf 8f6f 	isb	sy
 800bea6:	f3bf 8f4f 	dsb	sy
 800beaa:	b662      	cpsie	i
 800beac:	60bb      	str	r3, [r7, #8]
}
 800beae:	bf00      	nop
 800beb0:	e7fe      	b.n	800beb0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800beb2:	693b      	ldr	r3, [r7, #16]
 800beb4:	685a      	ldr	r2, [r3, #4]
 800beb6:	4b11      	ldr	r3, [pc, #68]	; (800befc <vPortFree+0xb4>)
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	4013      	ands	r3, r2
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d019      	beq.n	800bef4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bec0:	693b      	ldr	r3, [r7, #16]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d115      	bne.n	800bef4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bec8:	693b      	ldr	r3, [r7, #16]
 800beca:	685a      	ldr	r2, [r3, #4]
 800becc:	4b0b      	ldr	r3, [pc, #44]	; (800befc <vPortFree+0xb4>)
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	43db      	mvns	r3, r3
 800bed2:	401a      	ands	r2, r3
 800bed4:	693b      	ldr	r3, [r7, #16]
 800bed6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bed8:	f7fe fc50 	bl	800a77c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bedc:	693b      	ldr	r3, [r7, #16]
 800bede:	685a      	ldr	r2, [r3, #4]
 800bee0:	4b07      	ldr	r3, [pc, #28]	; (800bf00 <vPortFree+0xb8>)
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	4413      	add	r3, r2
 800bee6:	4a06      	ldr	r2, [pc, #24]	; (800bf00 <vPortFree+0xb8>)
 800bee8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800beea:	6938      	ldr	r0, [r7, #16]
 800beec:	f000 f86c 	bl	800bfc8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800bef0:	f7fe fc52 	bl	800a798 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bef4:	bf00      	nop
 800bef6:	3718      	adds	r7, #24
 800bef8:	46bd      	mov	sp, r7
 800befa:	bd80      	pop	{r7, pc}
 800befc:	2000b978 	.word	0x2000b978
 800bf00:	2000b970 	.word	0x2000b970

0800bf04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bf04:	b480      	push	{r7}
 800bf06:	b085      	sub	sp, #20
 800bf08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bf0a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800bf0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bf10:	4b27      	ldr	r3, [pc, #156]	; (800bfb0 <prvHeapInit+0xac>)
 800bf12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	f003 0307 	and.w	r3, r3, #7
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d00c      	beq.n	800bf38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	3307      	adds	r3, #7
 800bf22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	f023 0307 	bic.w	r3, r3, #7
 800bf2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bf2c:	68ba      	ldr	r2, [r7, #8]
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	1ad3      	subs	r3, r2, r3
 800bf32:	4a1f      	ldr	r2, [pc, #124]	; (800bfb0 <prvHeapInit+0xac>)
 800bf34:	4413      	add	r3, r2
 800bf36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bf3c:	4a1d      	ldr	r2, [pc, #116]	; (800bfb4 <prvHeapInit+0xb0>)
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bf42:	4b1c      	ldr	r3, [pc, #112]	; (800bfb4 <prvHeapInit+0xb0>)
 800bf44:	2200      	movs	r2, #0
 800bf46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	68ba      	ldr	r2, [r7, #8]
 800bf4c:	4413      	add	r3, r2
 800bf4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bf50:	2208      	movs	r2, #8
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	1a9b      	subs	r3, r3, r2
 800bf56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	f023 0307 	bic.w	r3, r3, #7
 800bf5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	4a15      	ldr	r2, [pc, #84]	; (800bfb8 <prvHeapInit+0xb4>)
 800bf64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bf66:	4b14      	ldr	r3, [pc, #80]	; (800bfb8 <prvHeapInit+0xb4>)
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bf6e:	4b12      	ldr	r3, [pc, #72]	; (800bfb8 <prvHeapInit+0xb4>)
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	2200      	movs	r2, #0
 800bf74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bf7a:	683b      	ldr	r3, [r7, #0]
 800bf7c:	68fa      	ldr	r2, [r7, #12]
 800bf7e:	1ad2      	subs	r2, r2, r3
 800bf80:	683b      	ldr	r3, [r7, #0]
 800bf82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bf84:	4b0c      	ldr	r3, [pc, #48]	; (800bfb8 <prvHeapInit+0xb4>)
 800bf86:	681a      	ldr	r2, [r3, #0]
 800bf88:	683b      	ldr	r3, [r7, #0]
 800bf8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bf8c:	683b      	ldr	r3, [r7, #0]
 800bf8e:	685b      	ldr	r3, [r3, #4]
 800bf90:	4a0a      	ldr	r2, [pc, #40]	; (800bfbc <prvHeapInit+0xb8>)
 800bf92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bf94:	683b      	ldr	r3, [r7, #0]
 800bf96:	685b      	ldr	r3, [r3, #4]
 800bf98:	4a09      	ldr	r2, [pc, #36]	; (800bfc0 <prvHeapInit+0xbc>)
 800bf9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bf9c:	4b09      	ldr	r3, [pc, #36]	; (800bfc4 <prvHeapInit+0xc0>)
 800bf9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bfa2:	601a      	str	r2, [r3, #0]
}
 800bfa4:	bf00      	nop
 800bfa6:	3714      	adds	r7, #20
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfae:	4770      	bx	lr
 800bfb0:	20007d64 	.word	0x20007d64
 800bfb4:	2000b964 	.word	0x2000b964
 800bfb8:	2000b96c 	.word	0x2000b96c
 800bfbc:	2000b974 	.word	0x2000b974
 800bfc0:	2000b970 	.word	0x2000b970
 800bfc4:	2000b978 	.word	0x2000b978

0800bfc8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bfc8:	b480      	push	{r7}
 800bfca:	b085      	sub	sp, #20
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bfd0:	4b28      	ldr	r3, [pc, #160]	; (800c074 <prvInsertBlockIntoFreeList+0xac>)
 800bfd2:	60fb      	str	r3, [r7, #12]
 800bfd4:	e002      	b.n	800bfdc <prvInsertBlockIntoFreeList+0x14>
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	60fb      	str	r3, [r7, #12]
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	687a      	ldr	r2, [r7, #4]
 800bfe2:	429a      	cmp	r2, r3
 800bfe4:	d8f7      	bhi.n	800bfd6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	685b      	ldr	r3, [r3, #4]
 800bfee:	68ba      	ldr	r2, [r7, #8]
 800bff0:	4413      	add	r3, r2
 800bff2:	687a      	ldr	r2, [r7, #4]
 800bff4:	429a      	cmp	r2, r3
 800bff6:	d108      	bne.n	800c00a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	685a      	ldr	r2, [r3, #4]
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	685b      	ldr	r3, [r3, #4]
 800c000:	441a      	add	r2, r3
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	685b      	ldr	r3, [r3, #4]
 800c012:	68ba      	ldr	r2, [r7, #8]
 800c014:	441a      	add	r2, r3
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	429a      	cmp	r2, r3
 800c01c:	d118      	bne.n	800c050 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	681a      	ldr	r2, [r3, #0]
 800c022:	4b15      	ldr	r3, [pc, #84]	; (800c078 <prvInsertBlockIntoFreeList+0xb0>)
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	429a      	cmp	r2, r3
 800c028:	d00d      	beq.n	800c046 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	685a      	ldr	r2, [r3, #4]
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	685b      	ldr	r3, [r3, #4]
 800c034:	441a      	add	r2, r3
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	681a      	ldr	r2, [r3, #0]
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	601a      	str	r2, [r3, #0]
 800c044:	e008      	b.n	800c058 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c046:	4b0c      	ldr	r3, [pc, #48]	; (800c078 <prvInsertBlockIntoFreeList+0xb0>)
 800c048:	681a      	ldr	r2, [r3, #0]
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	601a      	str	r2, [r3, #0]
 800c04e:	e003      	b.n	800c058 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	681a      	ldr	r2, [r3, #0]
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c058:	68fa      	ldr	r2, [r7, #12]
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	429a      	cmp	r2, r3
 800c05e:	d002      	beq.n	800c066 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	687a      	ldr	r2, [r7, #4]
 800c064:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c066:	bf00      	nop
 800c068:	3714      	adds	r7, #20
 800c06a:	46bd      	mov	sp, r7
 800c06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c070:	4770      	bx	lr
 800c072:	bf00      	nop
 800c074:	2000b964 	.word	0x2000b964
 800c078:	2000b96c 	.word	0x2000b96c

0800c07c <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Control>:
 800c07c:	4b04      	ldr	r3, [pc, #16]	; (800c090 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Control+0x14>)
 800c07e:	681a      	ldr	r2, [r3, #0]
 800c080:	b10a      	cbz	r2, 800c086 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Control+0xa>
 800c082:	4803      	ldr	r0, [pc, #12]	; (800c090 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Control+0x14>)
 800c084:	4770      	bx	lr
 800c086:	4a03      	ldr	r2, [pc, #12]	; (800c094 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Control+0x18>)
 800c088:	4801      	ldr	r0, [pc, #4]	; (800c090 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Control+0x14>)
 800c08a:	6812      	ldr	r2, [r2, #0]
 800c08c:	601a      	str	r2, [r3, #0]
 800c08e:	4770      	bx	lr
 800c090:	2000001c 	.word	0x2000001c
 800c094:	20000974 	.word	0x20000974

0800c098 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Control_Request>:
 800c098:	4b06      	ldr	r3, [pc, #24]	; (800c0b4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x1c>)
 800c09a:	4807      	ldr	r0, [pc, #28]	; (800c0b8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x20>)
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	4907      	ldr	r1, [pc, #28]	; (800c0bc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x24>)
 800c0a0:	4a07      	ldr	r2, [pc, #28]	; (800c0c0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x28>)
 800c0a2:	b410      	push	{r4}
 800c0a4:	4c07      	ldr	r4, [pc, #28]	; (800c0c4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x2c>)
 800c0a6:	6003      	str	r3, [r0, #0]
 800c0a8:	6023      	str	r3, [r4, #0]
 800c0aa:	600b      	str	r3, [r1, #0]
 800c0ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c0b0:	6013      	str	r3, [r2, #0]
 800c0b2:	4770      	bx	lr
 800c0b4:	20000974 	.word	0x20000974
 800c0b8:	20000090 	.word	0x20000090
 800c0bc:	20000050 	.word	0x20000050
 800c0c0:	2000001c 	.word	0x2000001c
 800c0c4:	20000078 	.word	0x20000078

0800c0c8 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Setup>:
 800c0c8:	4b04      	ldr	r3, [pc, #16]	; (800c0dc <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Setup+0x14>)
 800c0ca:	681a      	ldr	r2, [r3, #0]
 800c0cc:	b10a      	cbz	r2, 800c0d2 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Setup+0xa>
 800c0ce:	4803      	ldr	r0, [pc, #12]	; (800c0dc <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Setup+0x14>)
 800c0d0:	4770      	bx	lr
 800c0d2:	4a03      	ldr	r2, [pc, #12]	; (800c0e0 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Setup+0x18>)
 800c0d4:	4801      	ldr	r0, [pc, #4]	; (800c0dc <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Setup+0x14>)
 800c0d6:	6812      	ldr	r2, [r2, #0]
 800c0d8:	601a      	str	r2, [r3, #0]
 800c0da:	4770      	bx	lr
 800c0dc:	200000b0 	.word	0x200000b0
 800c0e0:	20000974 	.word	0x20000974

0800c0e4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Setup_Request>:
 800c0e4:	4b06      	ldr	r3, [pc, #24]	; (800c100 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x1c>)
 800c0e6:	4807      	ldr	r0, [pc, #28]	; (800c104 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x20>)
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	4907      	ldr	r1, [pc, #28]	; (800c108 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x24>)
 800c0ec:	4a07      	ldr	r2, [pc, #28]	; (800c10c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x28>)
 800c0ee:	b410      	push	{r4}
 800c0f0:	4c07      	ldr	r4, [pc, #28]	; (800c110 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x2c>)
 800c0f2:	6003      	str	r3, [r0, #0]
 800c0f4:	6023      	str	r3, [r4, #0]
 800c0f6:	600b      	str	r3, [r1, #0]
 800c0f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c0fc:	6013      	str	r3, [r2, #0]
 800c0fe:	4770      	bx	lr
 800c100:	20000974 	.word	0x20000974
 800c104:	20000124 	.word	0x20000124
 800c108:	200000e4 	.word	0x200000e4
 800c10c:	200000b0 	.word	0x200000b0
 800c110:	2000010c 	.word	0x2000010c

0800c114 <racs_services__srv__Control_Request__rosidl_typesupport_introspection_c__size_function__Control_Request__values>:
 800c114:	6840      	ldr	r0, [r0, #4]
 800c116:	4770      	bx	lr

0800c118 <racs_services__srv__Control_Request__rosidl_typesupport_introspection_c__get_const_function__Control_Request__values>:
 800c118:	6800      	ldr	r0, [r0, #0]
 800c11a:	4408      	add	r0, r1
 800c11c:	4770      	bx	lr
 800c11e:	bf00      	nop

0800c120 <racs_services__srv__Control_Request__rosidl_typesupport_introspection_c__fetch_function__Control_Request__values>:
 800c120:	6803      	ldr	r3, [r0, #0]
 800c122:	5c5b      	ldrb	r3, [r3, r1]
 800c124:	7013      	strb	r3, [r2, #0]
 800c126:	4770      	bx	lr

0800c128 <racs_services__srv__Control_Request__rosidl_typesupport_introspection_c__assign_function__Control_Request__values>:
 800c128:	7812      	ldrb	r2, [r2, #0]
 800c12a:	6803      	ldr	r3, [r0, #0]
 800c12c:	545a      	strb	r2, [r3, r1]
 800c12e:	4770      	bx	lr

0800c130 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__size_function__Control_Event__request>:
 800c130:	6840      	ldr	r0, [r0, #4]
 800c132:	4770      	bx	lr

0800c134 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__get_const_function__Control_Event__request>:
 800c134:	6800      	ldr	r0, [r0, #0]
 800c136:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 800c13a:	4770      	bx	lr

0800c13c <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__fetch_function__Control_Event__request>:
 800c13c:	6803      	ldr	r3, [r0, #0]
 800c13e:	4694      	mov	ip, r2
 800c140:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 800c144:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 800c146:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 800c14a:	4770      	bx	lr

0800c14c <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__assign_function__Control_Event__request>:
 800c14c:	6803      	ldr	r3, [r0, #0]
 800c14e:	eb03 1c01 	add.w	ip, r3, r1, lsl #4
 800c152:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800c154:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 800c158:	4770      	bx	lr
 800c15a:	bf00      	nop

0800c15c <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__size_function__Control_Event__response>:
 800c15c:	6840      	ldr	r0, [r0, #4]
 800c15e:	4770      	bx	lr

0800c160 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__get_const_function__Control_Event__response>:
 800c160:	6800      	ldr	r0, [r0, #0]
 800c162:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 800c166:	4770      	bx	lr

0800c168 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__fetch_function__Control_Event__response>:
 800c168:	6803      	ldr	r3, [r0, #0]
 800c16a:	4694      	mov	ip, r2
 800c16c:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 800c170:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 800c172:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 800c176:	4770      	bx	lr

0800c178 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__assign_function__Control_Event__response>:
 800c178:	6803      	ldr	r3, [r0, #0]
 800c17a:	eb03 1c01 	add.w	ip, r3, r1, lsl #4
 800c17e:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800c180:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 800c184:	4770      	bx	lr
 800c186:	bf00      	nop

0800c188 <racs_services__srv__Control_Request__rosidl_typesupport_introspection_c__Control_Request_init_function>:
 800c188:	f003 bf90 	b.w	80100ac <racs_services__srv__Control_Request__init>

0800c18c <racs_services__srv__Control_Request__rosidl_typesupport_introspection_c__Control_Request_fini_function>:
 800c18c:	f003 bfa2 	b.w	80100d4 <racs_services__srv__Control_Request__fini>

0800c190 <racs_services__srv__Control_Request__rosidl_typesupport_introspection_c__resize_function__Control_Request__values>:
 800c190:	b510      	push	{r4, lr}
 800c192:	4604      	mov	r4, r0
 800c194:	b082      	sub	sp, #8
 800c196:	9101      	str	r1, [sp, #4]
 800c198:	f001 fe9e 	bl	800ded8 <rosidl_runtime_c__uint8__Sequence__fini>
 800c19c:	9901      	ldr	r1, [sp, #4]
 800c19e:	4620      	mov	r0, r4
 800c1a0:	b002      	add	sp, #8
 800c1a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c1a6:	f001 be7f 	b.w	800dea8 <rosidl_runtime_c__uint8__Sequence__init>
 800c1aa:	bf00      	nop

0800c1ac <racs_services__srv__Control_Response__rosidl_typesupport_introspection_c__Control_Response_init_function>:
 800c1ac:	f003 bfd4 	b.w	8010158 <racs_services__srv__Control_Response__init>

0800c1b0 <racs_services__srv__Control_Response__rosidl_typesupport_introspection_c__Control_Response_fini_function>:
 800c1b0:	f003 bfe6 	b.w	8010180 <racs_services__srv__Control_Response__fini>

0800c1b4 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__Control_Event_init_function>:
 800c1b4:	f004 b820 	b.w	80101f8 <racs_services__srv__Control_Event__init>

0800c1b8 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__Control_Event_fini_function>:
 800c1b8:	f004 b882 	b.w	80102c0 <racs_services__srv__Control_Event__fini>

0800c1bc <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__resize_function__Control_Event__request>:
 800c1bc:	b510      	push	{r4, lr}
 800c1be:	4604      	mov	r4, r0
 800c1c0:	b082      	sub	sp, #8
 800c1c2:	9101      	str	r1, [sp, #4]
 800c1c4:	f003 ffa0 	bl	8010108 <racs_services__srv__Control_Request__Sequence__fini>
 800c1c8:	9901      	ldr	r1, [sp, #4]
 800c1ca:	4620      	mov	r0, r4
 800c1cc:	b002      	add	sp, #8
 800c1ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c1d2:	f003 bf95 	b.w	8010100 <racs_services__srv__Control_Request__Sequence__init>
 800c1d6:	bf00      	nop

0800c1d8 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__resize_function__Control_Event__response>:
 800c1d8:	b510      	push	{r4, lr}
 800c1da:	4604      	mov	r4, r0
 800c1dc:	b082      	sub	sp, #8
 800c1de:	9101      	str	r1, [sp, #4]
 800c1e0:	f003 ffe2 	bl	80101a8 <racs_services__srv__Control_Response__Sequence__fini>
 800c1e4:	9901      	ldr	r1, [sp, #4]
 800c1e6:	4620      	mov	r0, r4
 800c1e8:	b002      	add	sp, #8
 800c1ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c1ee:	f003 bfd7 	b.w	80101a0 <racs_services__srv__Control_Response__Sequence__init>
 800c1f2:	bf00      	nop

0800c1f4 <racs_services__srv__Control_Response__rosidl_typesupport_introspection_c__get_function__Control_Response__encoders>:
 800c1f4:	6800      	ldr	r0, [r0, #0]
 800c1f6:	4408      	add	r0, r1
 800c1f8:	4770      	bx	lr
 800c1fa:	bf00      	nop

0800c1fc <racs_services__srv__Control_Request__rosidl_typesupport_introspection_c__get_function__Control_Request__values>:
 800c1fc:	6800      	ldr	r0, [r0, #0]
 800c1fe:	4408      	add	r0, r1
 800c200:	4770      	bx	lr
 800c202:	bf00      	nop

0800c204 <racs_services__srv__Control_Response__rosidl_typesupport_introspection_c__size_function__Control_Response__encoders>:
 800c204:	6840      	ldr	r0, [r0, #4]
 800c206:	4770      	bx	lr

0800c208 <racs_services__srv__Control_Response__rosidl_typesupport_introspection_c__get_const_function__Control_Response__encoders>:
 800c208:	6800      	ldr	r0, [r0, #0]
 800c20a:	4408      	add	r0, r1
 800c20c:	4770      	bx	lr
 800c20e:	bf00      	nop

0800c210 <racs_services__srv__Control_Response__rosidl_typesupport_introspection_c__fetch_function__Control_Response__encoders>:
 800c210:	6803      	ldr	r3, [r0, #0]
 800c212:	5c5b      	ldrb	r3, [r3, r1]
 800c214:	7013      	strb	r3, [r2, #0]
 800c216:	4770      	bx	lr

0800c218 <racs_services__srv__Control_Response__rosidl_typesupport_introspection_c__assign_function__Control_Response__encoders>:
 800c218:	7812      	ldrb	r2, [r2, #0]
 800c21a:	6803      	ldr	r3, [r0, #0]
 800c21c:	545a      	strb	r2, [r3, r1]
 800c21e:	4770      	bx	lr

0800c220 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__get_function__Control_Event__request>:
 800c220:	6800      	ldr	r0, [r0, #0]
 800c222:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 800c226:	4770      	bx	lr

0800c228 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__get_function__Control_Event__response>:
 800c228:	6800      	ldr	r0, [r0, #0]
 800c22a:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 800c22e:	4770      	bx	lr

0800c230 <racs_services__srv__Control_Response__rosidl_typesupport_introspection_c__resize_function__Control_Response__encoders>:
 800c230:	b510      	push	{r4, lr}
 800c232:	4604      	mov	r4, r0
 800c234:	b082      	sub	sp, #8
 800c236:	9101      	str	r1, [sp, #4]
 800c238:	f001 fe4e 	bl	800ded8 <rosidl_runtime_c__uint8__Sequence__fini>
 800c23c:	9901      	ldr	r1, [sp, #4]
 800c23e:	4620      	mov	r0, r4
 800c240:	b002      	add	sp, #8
 800c242:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c246:	f001 be2f 	b.w	800dea8 <rosidl_runtime_c__uint8__Sequence__init>
 800c24a:	bf00      	nop

0800c24c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Request>:
 800c24c:	4b04      	ldr	r3, [pc, #16]	; (800c260 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x14>)
 800c24e:	681a      	ldr	r2, [r3, #0]
 800c250:	b10a      	cbz	r2, 800c256 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Request+0xa>
 800c252:	4803      	ldr	r0, [pc, #12]	; (800c260 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x14>)
 800c254:	4770      	bx	lr
 800c256:	4a03      	ldr	r2, [pc, #12]	; (800c264 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x18>)
 800c258:	4801      	ldr	r0, [pc, #4]	; (800c260 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x14>)
 800c25a:	6812      	ldr	r2, [r2, #0]
 800c25c:	601a      	str	r2, [r3, #0]
 800c25e:	4770      	bx	lr
 800c260:	200002f8 	.word	0x200002f8
 800c264:	20000978 	.word	0x20000978

0800c268 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Response>:
 800c268:	4b04      	ldr	r3, [pc, #16]	; (800c27c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Response+0x14>)
 800c26a:	681a      	ldr	r2, [r3, #0]
 800c26c:	b10a      	cbz	r2, 800c272 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Response+0xa>
 800c26e:	4803      	ldr	r0, [pc, #12]	; (800c27c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Response+0x14>)
 800c270:	4770      	bx	lr
 800c272:	4a03      	ldr	r2, [pc, #12]	; (800c280 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Response+0x18>)
 800c274:	4801      	ldr	r0, [pc, #4]	; (800c27c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Response+0x14>)
 800c276:	6812      	ldr	r2, [r2, #0]
 800c278:	601a      	str	r2, [r3, #0]
 800c27a:	4770      	bx	lr
 800c27c:	2000043c 	.word	0x2000043c
 800c280:	20000978 	.word	0x20000978

0800c284 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event>:
 800c284:	b508      	push	{r3, lr}
 800c286:	f001 fee1 	bl	800e04c <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800c28a:	4913      	ldr	r1, [pc, #76]	; (800c2d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x54>)
 800c28c:	4b13      	ldr	r3, [pc, #76]	; (800c2dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x58>)
 800c28e:	680a      	ldr	r2, [r1, #0]
 800c290:	60d8      	str	r0, [r3, #12]
 800c292:	b152      	cbz	r2, 800c2aa <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x26>
 800c294:	4a12      	ldr	r2, [pc, #72]	; (800c2e0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x5c>)
 800c296:	6499      	str	r1, [r3, #72]	; 0x48
 800c298:	6811      	ldr	r1, [r2, #0]
 800c29a:	b171      	cbz	r1, 800c2ba <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x36>
 800c29c:	4911      	ldr	r1, [pc, #68]	; (800c2e4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x60>)
 800c29e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800c2a2:	680b      	ldr	r3, [r1, #0]
 800c2a4:	b193      	cbz	r3, 800c2cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x48>
 800c2a6:	480f      	ldr	r0, [pc, #60]	; (800c2e4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x60>)
 800c2a8:	bd08      	pop	{r3, pc}
 800c2aa:	4a0f      	ldr	r2, [pc, #60]	; (800c2e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x64>)
 800c2ac:	6499      	str	r1, [r3, #72]	; 0x48
 800c2ae:	6812      	ldr	r2, [r2, #0]
 800c2b0:	600a      	str	r2, [r1, #0]
 800c2b2:	4a0b      	ldr	r2, [pc, #44]	; (800c2e0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x5c>)
 800c2b4:	6811      	ldr	r1, [r2, #0]
 800c2b6:	2900      	cmp	r1, #0
 800c2b8:	d1f0      	bne.n	800c29c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x18>
 800c2ba:	490b      	ldr	r1, [pc, #44]	; (800c2e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x64>)
 800c2bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800c2c0:	6809      	ldr	r1, [r1, #0]
 800c2c2:	6011      	str	r1, [r2, #0]
 800c2c4:	4907      	ldr	r1, [pc, #28]	; (800c2e4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x60>)
 800c2c6:	680b      	ldr	r3, [r1, #0]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d1ec      	bne.n	800c2a6 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x22>
 800c2cc:	4b06      	ldr	r3, [pc, #24]	; (800c2e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x64>)
 800c2ce:	4805      	ldr	r0, [pc, #20]	; (800c2e4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x60>)
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	600b      	str	r3, [r1, #0]
 800c2d4:	bd08      	pop	{r3, pc}
 800c2d6:	bf00      	nop
 800c2d8:	200002f8 	.word	0x200002f8
 800c2dc:	2000013c 	.word	0x2000013c
 800c2e0:	2000043c 	.word	0x2000043c
 800c2e4:	200001f0 	.word	0x200001f0
 800c2e8:	20000978 	.word	0x20000978

0800c2ec <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control>:
 800c2ec:	4b25      	ldr	r3, [pc, #148]	; (800c384 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x98>)
 800c2ee:	681a      	ldr	r2, [r3, #0]
 800c2f0:	b510      	push	{r4, lr}
 800c2f2:	b142      	cbz	r2, 800c306 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x1a>
 800c2f4:	685c      	ldr	r4, [r3, #4]
 800c2f6:	68a3      	ldr	r3, [r4, #8]
 800c2f8:	b163      	cbz	r3, 800c314 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x28>
 800c2fa:	68e3      	ldr	r3, [r4, #12]
 800c2fc:	b193      	cbz	r3, 800c324 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x38>
 800c2fe:	6923      	ldr	r3, [r4, #16]
 800c300:	b1c3      	cbz	r3, 800c334 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x48>
 800c302:	4820      	ldr	r0, [pc, #128]	; (800c384 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x98>)
 800c304:	bd10      	pop	{r4, pc}
 800c306:	4a20      	ldr	r2, [pc, #128]	; (800c388 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x9c>)
 800c308:	685c      	ldr	r4, [r3, #4]
 800c30a:	6812      	ldr	r2, [r2, #0]
 800c30c:	601a      	str	r2, [r3, #0]
 800c30e:	68a3      	ldr	r3, [r4, #8]
 800c310:	2b00      	cmp	r3, #0
 800c312:	d1f2      	bne.n	800c2fa <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0xe>
 800c314:	4a1d      	ldr	r2, [pc, #116]	; (800c38c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0xa0>)
 800c316:	6813      	ldr	r3, [r2, #0]
 800c318:	b303      	cbz	r3, 800c35c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x70>
 800c31a:	6853      	ldr	r3, [r2, #4]
 800c31c:	60a3      	str	r3, [r4, #8]
 800c31e:	68e3      	ldr	r3, [r4, #12]
 800c320:	2b00      	cmp	r3, #0
 800c322:	d1ec      	bne.n	800c2fe <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x12>
 800c324:	4b1a      	ldr	r3, [pc, #104]	; (800c390 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0xa4>)
 800c326:	681a      	ldr	r2, [r3, #0]
 800c328:	b1e2      	cbz	r2, 800c364 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x78>
 800c32a:	685b      	ldr	r3, [r3, #4]
 800c32c:	60e3      	str	r3, [r4, #12]
 800c32e:	6923      	ldr	r3, [r4, #16]
 800c330:	2b00      	cmp	r3, #0
 800c332:	d1e6      	bne.n	800c302 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x16>
 800c334:	f001 fe8a 	bl	800e04c <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800c338:	4a14      	ldr	r2, [pc, #80]	; (800c38c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0xa0>)
 800c33a:	4916      	ldr	r1, [pc, #88]	; (800c394 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0xa8>)
 800c33c:	6813      	ldr	r3, [r2, #0]
 800c33e:	60c8      	str	r0, [r1, #12]
 800c340:	b1e3      	cbz	r3, 800c37c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x90>
 800c342:	4b13      	ldr	r3, [pc, #76]	; (800c390 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0xa4>)
 800c344:	648a      	str	r2, [r1, #72]	; 0x48
 800c346:	681a      	ldr	r2, [r3, #0]
 800c348:	b1a2      	cbz	r2, 800c374 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x88>
 800c34a:	4a13      	ldr	r2, [pc, #76]	; (800c398 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0xac>)
 800c34c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 800c350:	6813      	ldr	r3, [r2, #0]
 800c352:	b15b      	cbz	r3, 800c36c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x80>
 800c354:	6853      	ldr	r3, [r2, #4]
 800c356:	480b      	ldr	r0, [pc, #44]	; (800c384 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x98>)
 800c358:	6123      	str	r3, [r4, #16]
 800c35a:	bd10      	pop	{r4, pc}
 800c35c:	4b0a      	ldr	r3, [pc, #40]	; (800c388 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x9c>)
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	6013      	str	r3, [r2, #0]
 800c362:	e7da      	b.n	800c31a <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x2e>
 800c364:	4a08      	ldr	r2, [pc, #32]	; (800c388 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x9c>)
 800c366:	6812      	ldr	r2, [r2, #0]
 800c368:	601a      	str	r2, [r3, #0]
 800c36a:	e7de      	b.n	800c32a <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x3e>
 800c36c:	4b06      	ldr	r3, [pc, #24]	; (800c388 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x9c>)
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	6013      	str	r3, [r2, #0]
 800c372:	e7ef      	b.n	800c354 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x68>
 800c374:	4a04      	ldr	r2, [pc, #16]	; (800c388 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x9c>)
 800c376:	6812      	ldr	r2, [r2, #0]
 800c378:	601a      	str	r2, [r3, #0]
 800c37a:	e7e6      	b.n	800c34a <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x5e>
 800c37c:	4b02      	ldr	r3, [pc, #8]	; (800c388 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x9c>)
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	6013      	str	r3, [r2, #0]
 800c382:	e7de      	b.n	800c342 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x56>
 800c384:	20000468 	.word	0x20000468
 800c388:	20000978 	.word	0x20000978
 800c38c:	200002f8 	.word	0x200002f8
 800c390:	2000043c 	.word	0x2000043c
 800c394:	2000013c 	.word	0x2000013c
 800c398:	200001f0 	.word	0x200001f0

0800c39c <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__size_function__Setup_Event__request>:
 800c39c:	6840      	ldr	r0, [r0, #4]
 800c39e:	4770      	bx	lr

0800c3a0 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__get_const_function__Setup_Event__request>:
 800c3a0:	6800      	ldr	r0, [r0, #0]
 800c3a2:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800c3a6:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800c3aa:	4770      	bx	lr

0800c3ac <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__fetch_function__Setup_Event__request>:
 800c3ac:	6803      	ldr	r3, [r0, #0]
 800c3ae:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800c3b2:	4694      	mov	ip, r2
 800c3b4:	b500      	push	{lr}
 800c3b6:	eb03 0e81 	add.w	lr, r3, r1, lsl #2
 800c3ba:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c3be:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c3c2:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 800c3c6:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 800c3ca:	f85d fb04 	ldr.w	pc, [sp], #4
 800c3ce:	bf00      	nop

0800c3d0 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__assign_function__Setup_Event__request>:
 800c3d0:	6803      	ldr	r3, [r0, #0]
 800c3d2:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800c3d6:	b500      	push	{lr}
 800c3d8:	4696      	mov	lr, r2
 800c3da:	eb03 0c81 	add.w	ip, r3, r1, lsl #2
 800c3de:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c3e2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c3e6:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 800c3ea:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 800c3ee:	f85d fb04 	ldr.w	pc, [sp], #4
 800c3f2:	bf00      	nop

0800c3f4 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__size_function__Setup_Event__response>:
 800c3f4:	6840      	ldr	r0, [r0, #4]
 800c3f6:	4770      	bx	lr

0800c3f8 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__get_const_function__Setup_Event__response>:
 800c3f8:	6800      	ldr	r0, [r0, #0]
 800c3fa:	4408      	add	r0, r1
 800c3fc:	4770      	bx	lr
 800c3fe:	bf00      	nop

0800c400 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__fetch_function__Setup_Event__response>:
 800c400:	6803      	ldr	r3, [r0, #0]
 800c402:	5c5b      	ldrb	r3, [r3, r1]
 800c404:	7013      	strb	r3, [r2, #0]
 800c406:	4770      	bx	lr

0800c408 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__assign_function__Setup_Event__response>:
 800c408:	6803      	ldr	r3, [r0, #0]
 800c40a:	7812      	ldrb	r2, [r2, #0]
 800c40c:	545a      	strb	r2, [r3, r1]
 800c40e:	4770      	bx	lr

0800c410 <racs_services__srv__Setup_Request__rosidl_typesupport_introspection_c__Setup_Request_init_function>:
 800c410:	f004 b9f4 	b.w	80107fc <racs_services__srv__Setup_Request__init>

0800c414 <racs_services__srv__Setup_Request__rosidl_typesupport_introspection_c__Setup_Request_fini_function>:
 800c414:	f004 b9f6 	b.w	8010804 <racs_services__srv__Setup_Request__fini>

0800c418 <racs_services__srv__Setup_Response__rosidl_typesupport_introspection_c__Setup_Response_init_function>:
 800c418:	f004 ba3e 	b.w	8010898 <racs_services__srv__Setup_Response__init>

0800c41c <racs_services__srv__Setup_Response__rosidl_typesupport_introspection_c__Setup_Response_fini_function>:
 800c41c:	f004 ba40 	b.w	80108a0 <racs_services__srv__Setup_Response__fini>

0800c420 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__Setup_Event_init_function>:
 800c420:	f004 ba76 	b.w	8010910 <racs_services__srv__Setup_Event__init>

0800c424 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__Setup_Event_fini_function>:
 800c424:	f004 ba96 	b.w	8010954 <racs_services__srv__Setup_Event__fini>

0800c428 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__resize_function__Setup_Event__request>:
 800c428:	b510      	push	{r4, lr}
 800c42a:	4604      	mov	r4, r0
 800c42c:	b082      	sub	sp, #8
 800c42e:	9101      	str	r1, [sp, #4]
 800c430:	f004 fa1e 	bl	8010870 <racs_services__srv__Setup_Request__Sequence__fini>
 800c434:	9901      	ldr	r1, [sp, #4]
 800c436:	4620      	mov	r0, r4
 800c438:	b002      	add	sp, #8
 800c43a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c43e:	f004 b9fd 	b.w	801083c <racs_services__srv__Setup_Request__Sequence__init>
 800c442:	bf00      	nop

0800c444 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__resize_function__Setup_Event__response>:
 800c444:	b510      	push	{r4, lr}
 800c446:	4604      	mov	r4, r0
 800c448:	b082      	sub	sp, #8
 800c44a:	9101      	str	r1, [sp, #4]
 800c44c:	f004 fa4c 	bl	80108e8 <racs_services__srv__Setup_Response__Sequence__fini>
 800c450:	9901      	ldr	r1, [sp, #4]
 800c452:	4620      	mov	r0, r4
 800c454:	b002      	add	sp, #8
 800c456:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c45a:	f004 ba2b 	b.w	80108b4 <racs_services__srv__Setup_Response__Sequence__init>
 800c45e:	bf00      	nop

0800c460 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__get_function__Setup_Event__response>:
 800c460:	6800      	ldr	r0, [r0, #0]
 800c462:	4408      	add	r0, r1
 800c464:	4770      	bx	lr
 800c466:	bf00      	nop

0800c468 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__get_function__Setup_Event__request>:
 800c468:	6800      	ldr	r0, [r0, #0]
 800c46a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800c46e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800c472:	4770      	bx	lr

0800c474 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Request>:
 800c474:	4b04      	ldr	r3, [pc, #16]	; (800c488 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x14>)
 800c476:	681a      	ldr	r2, [r3, #0]
 800c478:	b10a      	cbz	r2, 800c47e <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0xa>
 800c47a:	4803      	ldr	r0, [pc, #12]	; (800c488 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x14>)
 800c47c:	4770      	bx	lr
 800c47e:	4a03      	ldr	r2, [pc, #12]	; (800c48c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x18>)
 800c480:	4801      	ldr	r0, [pc, #4]	; (800c488 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x14>)
 800c482:	6812      	ldr	r2, [r2, #0]
 800c484:	601a      	str	r2, [r3, #0]
 800c486:	4770      	bx	lr
 800c488:	20000704 	.word	0x20000704
 800c48c:	20000978 	.word	0x20000978

0800c490 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Response>:
 800c490:	4b04      	ldr	r3, [pc, #16]	; (800c4a4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Response+0x14>)
 800c492:	681a      	ldr	r2, [r3, #0]
 800c494:	b10a      	cbz	r2, 800c49a <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Response+0xa>
 800c496:	4803      	ldr	r0, [pc, #12]	; (800c4a4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Response+0x14>)
 800c498:	4770      	bx	lr
 800c49a:	4a03      	ldr	r2, [pc, #12]	; (800c4a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Response+0x18>)
 800c49c:	4801      	ldr	r0, [pc, #4]	; (800c4a4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Response+0x14>)
 800c49e:	6812      	ldr	r2, [r2, #0]
 800c4a0:	601a      	str	r2, [r3, #0]
 800c4a2:	4770      	bx	lr
 800c4a4:	20000758 	.word	0x20000758
 800c4a8:	20000978 	.word	0x20000978

0800c4ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event>:
 800c4ac:	b508      	push	{r3, lr}
 800c4ae:	f001 fdcd 	bl	800e04c <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800c4b2:	4913      	ldr	r1, [pc, #76]	; (800c500 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x54>)
 800c4b4:	4b13      	ldr	r3, [pc, #76]	; (800c504 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x58>)
 800c4b6:	680a      	ldr	r2, [r1, #0]
 800c4b8:	60d8      	str	r0, [r3, #12]
 800c4ba:	b152      	cbz	r2, 800c4d2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x26>
 800c4bc:	4a12      	ldr	r2, [pc, #72]	; (800c508 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x5c>)
 800c4be:	6499      	str	r1, [r3, #72]	; 0x48
 800c4c0:	6811      	ldr	r1, [r2, #0]
 800c4c2:	b171      	cbz	r1, 800c4e2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x36>
 800c4c4:	4911      	ldr	r1, [pc, #68]	; (800c50c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x60>)
 800c4c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800c4ca:	680b      	ldr	r3, [r1, #0]
 800c4cc:	b193      	cbz	r3, 800c4f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x48>
 800c4ce:	480f      	ldr	r0, [pc, #60]	; (800c50c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x60>)
 800c4d0:	bd08      	pop	{r3, pc}
 800c4d2:	4a0f      	ldr	r2, [pc, #60]	; (800c510 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x64>)
 800c4d4:	6499      	str	r1, [r3, #72]	; 0x48
 800c4d6:	6812      	ldr	r2, [r2, #0]
 800c4d8:	600a      	str	r2, [r1, #0]
 800c4da:	4a0b      	ldr	r2, [pc, #44]	; (800c508 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x5c>)
 800c4dc:	6811      	ldr	r1, [r2, #0]
 800c4de:	2900      	cmp	r1, #0
 800c4e0:	d1f0      	bne.n	800c4c4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x18>
 800c4e2:	490b      	ldr	r1, [pc, #44]	; (800c510 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x64>)
 800c4e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800c4e8:	6809      	ldr	r1, [r1, #0]
 800c4ea:	6011      	str	r1, [r2, #0]
 800c4ec:	4907      	ldr	r1, [pc, #28]	; (800c50c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x60>)
 800c4ee:	680b      	ldr	r3, [r1, #0]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d1ec      	bne.n	800c4ce <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x22>
 800c4f4:	4b06      	ldr	r3, [pc, #24]	; (800c510 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x64>)
 800c4f6:	4805      	ldr	r0, [pc, #20]	; (800c50c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x60>)
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	600b      	str	r3, [r1, #0]
 800c4fc:	bd08      	pop	{r3, pc}
 800c4fe:	bf00      	nop
 800c500:	20000704 	.word	0x20000704
 800c504:	20000494 	.word	0x20000494
 800c508:	20000758 	.word	0x20000758
 800c50c:	20000548 	.word	0x20000548
 800c510:	20000978 	.word	0x20000978

0800c514 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup>:
 800c514:	4b25      	ldr	r3, [pc, #148]	; (800c5ac <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x98>)
 800c516:	681a      	ldr	r2, [r3, #0]
 800c518:	b510      	push	{r4, lr}
 800c51a:	b142      	cbz	r2, 800c52e <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x1a>
 800c51c:	685c      	ldr	r4, [r3, #4]
 800c51e:	68a3      	ldr	r3, [r4, #8]
 800c520:	b163      	cbz	r3, 800c53c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x28>
 800c522:	68e3      	ldr	r3, [r4, #12]
 800c524:	b193      	cbz	r3, 800c54c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x38>
 800c526:	6923      	ldr	r3, [r4, #16]
 800c528:	b1c3      	cbz	r3, 800c55c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x48>
 800c52a:	4820      	ldr	r0, [pc, #128]	; (800c5ac <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x98>)
 800c52c:	bd10      	pop	{r4, pc}
 800c52e:	4a20      	ldr	r2, [pc, #128]	; (800c5b0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x9c>)
 800c530:	685c      	ldr	r4, [r3, #4]
 800c532:	6812      	ldr	r2, [r2, #0]
 800c534:	601a      	str	r2, [r3, #0]
 800c536:	68a3      	ldr	r3, [r4, #8]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d1f2      	bne.n	800c522 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0xe>
 800c53c:	4a1d      	ldr	r2, [pc, #116]	; (800c5b4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0xa0>)
 800c53e:	6813      	ldr	r3, [r2, #0]
 800c540:	b303      	cbz	r3, 800c584 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x70>
 800c542:	6853      	ldr	r3, [r2, #4]
 800c544:	60a3      	str	r3, [r4, #8]
 800c546:	68e3      	ldr	r3, [r4, #12]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d1ec      	bne.n	800c526 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x12>
 800c54c:	4b1a      	ldr	r3, [pc, #104]	; (800c5b8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0xa4>)
 800c54e:	681a      	ldr	r2, [r3, #0]
 800c550:	b1e2      	cbz	r2, 800c58c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x78>
 800c552:	685b      	ldr	r3, [r3, #4]
 800c554:	60e3      	str	r3, [r4, #12]
 800c556:	6923      	ldr	r3, [r4, #16]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d1e6      	bne.n	800c52a <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x16>
 800c55c:	f001 fd76 	bl	800e04c <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800c560:	4a14      	ldr	r2, [pc, #80]	; (800c5b4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0xa0>)
 800c562:	4916      	ldr	r1, [pc, #88]	; (800c5bc <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0xa8>)
 800c564:	6813      	ldr	r3, [r2, #0]
 800c566:	60c8      	str	r0, [r1, #12]
 800c568:	b1e3      	cbz	r3, 800c5a4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x90>
 800c56a:	4b13      	ldr	r3, [pc, #76]	; (800c5b8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0xa4>)
 800c56c:	648a      	str	r2, [r1, #72]	; 0x48
 800c56e:	681a      	ldr	r2, [r3, #0]
 800c570:	b1a2      	cbz	r2, 800c59c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x88>
 800c572:	4a13      	ldr	r2, [pc, #76]	; (800c5c0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0xac>)
 800c574:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 800c578:	6813      	ldr	r3, [r2, #0]
 800c57a:	b15b      	cbz	r3, 800c594 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x80>
 800c57c:	6853      	ldr	r3, [r2, #4]
 800c57e:	480b      	ldr	r0, [pc, #44]	; (800c5ac <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x98>)
 800c580:	6123      	str	r3, [r4, #16]
 800c582:	bd10      	pop	{r4, pc}
 800c584:	4b0a      	ldr	r3, [pc, #40]	; (800c5b0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x9c>)
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	6013      	str	r3, [r2, #0]
 800c58a:	e7da      	b.n	800c542 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x2e>
 800c58c:	4a08      	ldr	r2, [pc, #32]	; (800c5b0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x9c>)
 800c58e:	6812      	ldr	r2, [r2, #0]
 800c590:	601a      	str	r2, [r3, #0]
 800c592:	e7de      	b.n	800c552 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x3e>
 800c594:	4b06      	ldr	r3, [pc, #24]	; (800c5b0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x9c>)
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	6013      	str	r3, [r2, #0]
 800c59a:	e7ef      	b.n	800c57c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x68>
 800c59c:	4a04      	ldr	r2, [pc, #16]	; (800c5b0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x9c>)
 800c59e:	6812      	ldr	r2, [r2, #0]
 800c5a0:	601a      	str	r2, [r3, #0]
 800c5a2:	e7e6      	b.n	800c572 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x5e>
 800c5a4:	4b02      	ldr	r3, [pc, #8]	; (800c5b0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x9c>)
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	6013      	str	r3, [r2, #0]
 800c5aa:	e7de      	b.n	800c56a <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x56>
 800c5ac:	20000784 	.word	0x20000784
 800c5b0:	20000978 	.word	0x20000978
 800c5b4:	20000704 	.word	0x20000704
 800c5b8:	20000758 	.word	0x20000758
 800c5bc:	20000494 	.word	0x20000494
 800c5c0:	20000548 	.word	0x20000548

0800c5c4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Control_Request>:
 800c5c4:	4800      	ldr	r0, [pc, #0]	; (800c5c8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x4>)
 800c5c6:	4770      	bx	lr
 800c5c8:	20000804 	.word	0x20000804

0800c5cc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Control_Response>:
 800c5cc:	4800      	ldr	r0, [pc, #0]	; (800c5d0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Control_Response+0x4>)
 800c5ce:	4770      	bx	lr
 800c5d0:	2000081c 	.word	0x2000081c

0800c5d4 <_Control_Event__max_serialized_size>:
 800c5d4:	b500      	push	{lr}
 800c5d6:	b083      	sub	sp, #12
 800c5d8:	2301      	movs	r3, #1
 800c5da:	2100      	movs	r1, #0
 800c5dc:	f10d 0007 	add.w	r0, sp, #7
 800c5e0:	f88d 3007 	strb.w	r3, [sp, #7]
 800c5e4:	f001 fde2 	bl	800e1ac <max_serialized_size_service_msgs__msg__ServiceEventInfo>
 800c5e8:	b003      	add	sp, #12
 800c5ea:	f85d fb04 	ldr.w	pc, [sp], #4
 800c5ee:	bf00      	nop

0800c5f0 <get_serialized_size_racs_services__srv__Control_Request>:
 800c5f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5f2:	4604      	mov	r4, r0
 800c5f4:	b1d8      	cbz	r0, 800c62e <get_serialized_size_racs_services__srv__Control_Request+0x3e>
 800c5f6:	460d      	mov	r5, r1
 800c5f8:	2101      	movs	r1, #1
 800c5fa:	1c6e      	adds	r6, r5, #1
 800c5fc:	4628      	mov	r0, r5
 800c5fe:	f003 fa47 	bl	800fa90 <ucdr_alignment>
 800c602:	2101      	movs	r1, #1
 800c604:	4406      	add	r6, r0
 800c606:	4630      	mov	r0, r6
 800c608:	f003 fa42 	bl	800fa90 <ucdr_alignment>
 800c60c:	2101      	movs	r1, #1
 800c60e:	1847      	adds	r7, r0, r1
 800c610:	4437      	add	r7, r6
 800c612:	4638      	mov	r0, r7
 800c614:	f003 fa3c 	bl	800fa90 <ucdr_alignment>
 800c618:	68a6      	ldr	r6, [r4, #8]
 800c61a:	1c44      	adds	r4, r0, #1
 800c61c:	2104      	movs	r1, #4
 800c61e:	443c      	add	r4, r7
 800c620:	4620      	mov	r0, r4
 800c622:	f003 fa35 	bl	800fa90 <ucdr_alignment>
 800c626:	1d03      	adds	r3, r0, #4
 800c628:	441c      	add	r4, r3
 800c62a:	b90e      	cbnz	r6, 800c630 <get_serialized_size_racs_services__srv__Control_Request+0x40>
 800c62c:	1b60      	subs	r0, r4, r5
 800c62e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c630:	4620      	mov	r0, r4
 800c632:	2101      	movs	r1, #1
 800c634:	f003 fa2c 	bl	800fa90 <ucdr_alignment>
 800c638:	1933      	adds	r3, r6, r4
 800c63a:	181c      	adds	r4, r3, r0
 800c63c:	1b60      	subs	r0, r4, r5
 800c63e:	e7f6      	b.n	800c62e <get_serialized_size_racs_services__srv__Control_Request+0x3e>

0800c640 <get_serialized_size_racs_services__srv__Control_Response.part.0>:
 800c640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c642:	460e      	mov	r6, r1
 800c644:	4607      	mov	r7, r0
 800c646:	2101      	movs	r1, #1
 800c648:	1c75      	adds	r5, r6, #1
 800c64a:	4630      	mov	r0, r6
 800c64c:	f003 fa20 	bl	800fa90 <ucdr_alignment>
 800c650:	2101      	movs	r1, #1
 800c652:	4405      	add	r5, r0
 800c654:	4628      	mov	r0, r5
 800c656:	f003 fa1b 	bl	800fa90 <ucdr_alignment>
 800c65a:	2101      	movs	r1, #1
 800c65c:	1844      	adds	r4, r0, r1
 800c65e:	4425      	add	r5, r4
 800c660:	4628      	mov	r0, r5
 800c662:	f003 fa15 	bl	800fa90 <ucdr_alignment>
 800c666:	2101      	movs	r1, #1
 800c668:	1844      	adds	r4, r0, r1
 800c66a:	442c      	add	r4, r5
 800c66c:	4620      	mov	r0, r4
 800c66e:	f003 fa0f 	bl	800fa90 <ucdr_alignment>
 800c672:	3001      	adds	r0, #1
 800c674:	2104      	movs	r1, #4
 800c676:	68bd      	ldr	r5, [r7, #8]
 800c678:	4404      	add	r4, r0
 800c67a:	4620      	mov	r0, r4
 800c67c:	f003 fa08 	bl	800fa90 <ucdr_alignment>
 800c680:	3004      	adds	r0, #4
 800c682:	4404      	add	r4, r0
 800c684:	b90d      	cbnz	r5, 800c68a <get_serialized_size_racs_services__srv__Control_Response.part.0+0x4a>
 800c686:	1ba0      	subs	r0, r4, r6
 800c688:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c68a:	4620      	mov	r0, r4
 800c68c:	442c      	add	r4, r5
 800c68e:	2101      	movs	r1, #1
 800c690:	f003 f9fe 	bl	800fa90 <ucdr_alignment>
 800c694:	4404      	add	r4, r0
 800c696:	1ba0      	subs	r0, r4, r6
 800c698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c69a:	bf00      	nop

0800c69c <get_serialized_size_racs_services__srv__Control_Response>:
 800c69c:	b108      	cbz	r0, 800c6a2 <get_serialized_size_racs_services__srv__Control_Response+0x6>
 800c69e:	f7ff bfcf 	b.w	800c640 <get_serialized_size_racs_services__srv__Control_Response.part.0>
 800c6a2:	4770      	bx	lr

0800c6a4 <_Control_Response__get_serialized_size>:
 800c6a4:	b110      	cbz	r0, 800c6ac <_Control_Response__get_serialized_size+0x8>
 800c6a6:	2100      	movs	r1, #0
 800c6a8:	f7ff bfca 	b.w	800c640 <get_serialized_size_racs_services__srv__Control_Response.part.0>
 800c6ac:	4770      	bx	lr
 800c6ae:	bf00      	nop

0800c6b0 <_Control_Request__cdr_deserialize>:
 800c6b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c6b2:	460c      	mov	r4, r1
 800c6b4:	b083      	sub	sp, #12
 800c6b6:	b1e9      	cbz	r1, 800c6f4 <_Control_Request__cdr_deserialize+0x44>
 800c6b8:	4605      	mov	r5, r0
 800c6ba:	f001 ff91 	bl	800e5e0 <ucdr_deserialize_uint8_t>
 800c6be:	1c61      	adds	r1, r4, #1
 800c6c0:	4628      	mov	r0, r5
 800c6c2:	f001 ff8d 	bl	800e5e0 <ucdr_deserialize_uint8_t>
 800c6c6:	1ca1      	adds	r1, r4, #2
 800c6c8:	4628      	mov	r0, r5
 800c6ca:	f001 ff89 	bl	800e5e0 <ucdr_deserialize_uint8_t>
 800c6ce:	68e7      	ldr	r7, [r4, #12]
 800c6d0:	ab01      	add	r3, sp, #4
 800c6d2:	6861      	ldr	r1, [r4, #4]
 800c6d4:	463a      	mov	r2, r7
 800c6d6:	4628      	mov	r0, r5
 800c6d8:	f003 fa88 	bl	800fbec <ucdr_deserialize_sequence_uint8_t>
 800c6dc:	9b01      	ldr	r3, [sp, #4]
 800c6de:	4606      	mov	r6, r0
 800c6e0:	b920      	cbnz	r0, 800c6ec <_Control_Request__cdr_deserialize+0x3c>
 800c6e2:	429f      	cmp	r7, r3
 800c6e4:	d30a      	bcc.n	800c6fc <_Control_Request__cdr_deserialize+0x4c>
 800c6e6:	4630      	mov	r0, r6
 800c6e8:	b003      	add	sp, #12
 800c6ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6ec:	4630      	mov	r0, r6
 800c6ee:	60a3      	str	r3, [r4, #8]
 800c6f0:	b003      	add	sp, #12
 800c6f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6f4:	460e      	mov	r6, r1
 800c6f6:	4630      	mov	r0, r6
 800c6f8:	b003      	add	sp, #12
 800c6fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6fc:	2101      	movs	r1, #1
 800c6fe:	4628      	mov	r0, r5
 800c700:	75ae      	strb	r6, [r5, #22]
 800c702:	7569      	strb	r1, [r5, #21]
 800c704:	60a6      	str	r6, [r4, #8]
 800c706:	f003 f9db 	bl	800fac0 <ucdr_align_to>
 800c70a:	4628      	mov	r0, r5
 800c70c:	9901      	ldr	r1, [sp, #4]
 800c70e:	f003 fa0f 	bl	800fb30 <ucdr_advance_buffer>
 800c712:	4630      	mov	r0, r6
 800c714:	b003      	add	sp, #12
 800c716:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c718 <_Control_Response__cdr_deserialize>:
 800c718:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c71a:	460c      	mov	r4, r1
 800c71c:	b083      	sub	sp, #12
 800c71e:	b309      	cbz	r1, 800c764 <_Control_Response__cdr_deserialize+0x4c>
 800c720:	4605      	mov	r5, r0
 800c722:	f001 ff5d 	bl	800e5e0 <ucdr_deserialize_uint8_t>
 800c726:	1c61      	adds	r1, r4, #1
 800c728:	4628      	mov	r0, r5
 800c72a:	f001 ff59 	bl	800e5e0 <ucdr_deserialize_uint8_t>
 800c72e:	1ca1      	adds	r1, r4, #2
 800c730:	4628      	mov	r0, r5
 800c732:	f001 ff55 	bl	800e5e0 <ucdr_deserialize_uint8_t>
 800c736:	1ce1      	adds	r1, r4, #3
 800c738:	4628      	mov	r0, r5
 800c73a:	f001 ff51 	bl	800e5e0 <ucdr_deserialize_uint8_t>
 800c73e:	68e7      	ldr	r7, [r4, #12]
 800c740:	ab01      	add	r3, sp, #4
 800c742:	6861      	ldr	r1, [r4, #4]
 800c744:	463a      	mov	r2, r7
 800c746:	4628      	mov	r0, r5
 800c748:	f003 fa50 	bl	800fbec <ucdr_deserialize_sequence_uint8_t>
 800c74c:	9b01      	ldr	r3, [sp, #4]
 800c74e:	4606      	mov	r6, r0
 800c750:	b920      	cbnz	r0, 800c75c <_Control_Response__cdr_deserialize+0x44>
 800c752:	429f      	cmp	r7, r3
 800c754:	d30a      	bcc.n	800c76c <_Control_Response__cdr_deserialize+0x54>
 800c756:	4630      	mov	r0, r6
 800c758:	b003      	add	sp, #12
 800c75a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c75c:	4630      	mov	r0, r6
 800c75e:	60a3      	str	r3, [r4, #8]
 800c760:	b003      	add	sp, #12
 800c762:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c764:	460e      	mov	r6, r1
 800c766:	4630      	mov	r0, r6
 800c768:	b003      	add	sp, #12
 800c76a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c76c:	2101      	movs	r1, #1
 800c76e:	4628      	mov	r0, r5
 800c770:	75ae      	strb	r6, [r5, #22]
 800c772:	7569      	strb	r1, [r5, #21]
 800c774:	60a6      	str	r6, [r4, #8]
 800c776:	f003 f9a3 	bl	800fac0 <ucdr_align_to>
 800c77a:	4628      	mov	r0, r5
 800c77c:	9901      	ldr	r1, [sp, #4]
 800c77e:	f003 f9d7 	bl	800fb30 <ucdr_advance_buffer>
 800c782:	4630      	mov	r0, r6
 800c784:	b003      	add	sp, #12
 800c786:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c788 <_Control_Request__cdr_serialize>:
 800c788:	b1a8      	cbz	r0, 800c7b6 <_Control_Request__cdr_serialize+0x2e>
 800c78a:	b538      	push	{r3, r4, r5, lr}
 800c78c:	460d      	mov	r5, r1
 800c78e:	4604      	mov	r4, r0
 800c790:	7801      	ldrb	r1, [r0, #0]
 800c792:	4628      	mov	r0, r5
 800c794:	f001 ff0e 	bl	800e5b4 <ucdr_serialize_uint8_t>
 800c798:	7861      	ldrb	r1, [r4, #1]
 800c79a:	4628      	mov	r0, r5
 800c79c:	f001 ff0a 	bl	800e5b4 <ucdr_serialize_uint8_t>
 800c7a0:	78a1      	ldrb	r1, [r4, #2]
 800c7a2:	4628      	mov	r0, r5
 800c7a4:	f001 ff06 	bl	800e5b4 <ucdr_serialize_uint8_t>
 800c7a8:	4628      	mov	r0, r5
 800c7aa:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 800c7ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c7b2:	f003 ba09 	b.w	800fbc8 <ucdr_serialize_sequence_uint8_t>
 800c7b6:	4770      	bx	lr

0800c7b8 <_Control_Response__cdr_serialize>:
 800c7b8:	b1c8      	cbz	r0, 800c7ee <_Control_Response__cdr_serialize+0x36>
 800c7ba:	b538      	push	{r3, r4, r5, lr}
 800c7bc:	460d      	mov	r5, r1
 800c7be:	4604      	mov	r4, r0
 800c7c0:	7801      	ldrb	r1, [r0, #0]
 800c7c2:	4628      	mov	r0, r5
 800c7c4:	f001 fef6 	bl	800e5b4 <ucdr_serialize_uint8_t>
 800c7c8:	7861      	ldrb	r1, [r4, #1]
 800c7ca:	4628      	mov	r0, r5
 800c7cc:	f001 fef2 	bl	800e5b4 <ucdr_serialize_uint8_t>
 800c7d0:	78a1      	ldrb	r1, [r4, #2]
 800c7d2:	4628      	mov	r0, r5
 800c7d4:	f001 feee 	bl	800e5b4 <ucdr_serialize_uint8_t>
 800c7d8:	78e1      	ldrb	r1, [r4, #3]
 800c7da:	4628      	mov	r0, r5
 800c7dc:	f001 feea 	bl	800e5b4 <ucdr_serialize_uint8_t>
 800c7e0:	4628      	mov	r0, r5
 800c7e2:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 800c7e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c7ea:	f003 b9ed 	b.w	800fbc8 <ucdr_serialize_sequence_uint8_t>
 800c7ee:	4770      	bx	lr

0800c7f0 <get_serialized_size_racs_services__srv__Control_Event.part.0>:
 800c7f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7f4:	460e      	mov	r6, r1
 800c7f6:	4605      	mov	r5, r0
 800c7f8:	f001 fc3e 	bl	800e078 <get_serialized_size_service_msgs__msg__ServiceEventInfo>
 800c7fc:	2104      	movs	r1, #4
 800c7fe:	1837      	adds	r7, r6, r0
 800c800:	f8d5 902c 	ldr.w	r9, [r5, #44]	; 0x2c
 800c804:	4638      	mov	r0, r7
 800c806:	f003 f943 	bl	800fa90 <ucdr_alignment>
 800c80a:	3004      	adds	r0, #4
 800c80c:	4407      	add	r7, r0
 800c80e:	f1b9 0f00 	cmp.w	r9, #0
 800c812:	d019      	beq.n	800c848 <get_serialized_size_racs_services__srv__Control_Event.part.0+0x58>
 800c814:	f04f 0800 	mov.w	r8, #0
 800c818:	f8df a07c 	ldr.w	sl, [pc, #124]	; 800c898 <get_serialized_size_racs_services__srv__Control_Event.part.0+0xa8>
 800c81c:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 800c81e:	4639      	mov	r1, r7
 800c820:	f8da 3004 	ldr.w	r3, [sl, #4]
 800c824:	eb00 1008 	add.w	r0, r0, r8, lsl #4
 800c828:	f108 0801 	add.w	r8, r8, #1
 800c82c:	695b      	ldr	r3, [r3, #20]
 800c82e:	4798      	blx	r3
 800c830:	4604      	mov	r4, r0
 800c832:	4638      	mov	r0, r7
 800c834:	2c04      	cmp	r4, #4
 800c836:	4621      	mov	r1, r4
 800c838:	bf28      	it	cs
 800c83a:	2104      	movcs	r1, #4
 800c83c:	f003 f928 	bl	800fa90 <ucdr_alignment>
 800c840:	45c1      	cmp	r9, r8
 800c842:	4420      	add	r0, r4
 800c844:	4407      	add	r7, r0
 800c846:	d1e9      	bne.n	800c81c <get_serialized_size_racs_services__srv__Control_Event.part.0+0x2c>
 800c848:	4638      	mov	r0, r7
 800c84a:	2104      	movs	r1, #4
 800c84c:	f8d5 8038 	ldr.w	r8, [r5, #56]	; 0x38
 800c850:	f003 f91e 	bl	800fa90 <ucdr_alignment>
 800c854:	4407      	add	r7, r0
 800c856:	3704      	adds	r7, #4
 800c858:	f1b8 0f00 	cmp.w	r8, #0
 800c85c:	d019      	beq.n	800c892 <get_serialized_size_racs_services__srv__Control_Event.part.0+0xa2>
 800c85e:	f04f 0900 	mov.w	r9, #0
 800c862:	f8df a038 	ldr.w	sl, [pc, #56]	; 800c89c <get_serialized_size_racs_services__srv__Control_Event.part.0+0xac>
 800c866:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800c868:	4639      	mov	r1, r7
 800c86a:	f8da 3004 	ldr.w	r3, [sl, #4]
 800c86e:	eb00 1009 	add.w	r0, r0, r9, lsl #4
 800c872:	f109 0901 	add.w	r9, r9, #1
 800c876:	695b      	ldr	r3, [r3, #20]
 800c878:	4798      	blx	r3
 800c87a:	4604      	mov	r4, r0
 800c87c:	4638      	mov	r0, r7
 800c87e:	2c04      	cmp	r4, #4
 800c880:	4621      	mov	r1, r4
 800c882:	bf28      	it	cs
 800c884:	2104      	movcs	r1, #4
 800c886:	f003 f903 	bl	800fa90 <ucdr_alignment>
 800c88a:	45c8      	cmp	r8, r9
 800c88c:	4420      	add	r0, r4
 800c88e:	4407      	add	r7, r0
 800c890:	d1e9      	bne.n	800c866 <get_serialized_size_racs_services__srv__Control_Event.part.0+0x76>
 800c892:	1bb8      	subs	r0, r7, r6
 800c894:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c898:	20000804 	.word	0x20000804
 800c89c:	2000081c 	.word	0x2000081c

0800c8a0 <get_serialized_size_racs_services__srv__Control_Event>:
 800c8a0:	b108      	cbz	r0, 800c8a6 <get_serialized_size_racs_services__srv__Control_Event+0x6>
 800c8a2:	f7ff bfa5 	b.w	800c7f0 <get_serialized_size_racs_services__srv__Control_Event.part.0>
 800c8a6:	4770      	bx	lr

0800c8a8 <_Control_Event__get_serialized_size>:
 800c8a8:	b110      	cbz	r0, 800c8b0 <_Control_Event__get_serialized_size+0x8>
 800c8aa:	2100      	movs	r1, #0
 800c8ac:	f7ff bfa0 	b.w	800c7f0 <get_serialized_size_racs_services__srv__Control_Event.part.0>
 800c8b0:	4770      	bx	lr
 800c8b2:	bf00      	nop

0800c8b4 <_Control_Event__cdr_deserialize>:
 800c8b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c8b6:	460d      	mov	r5, r1
 800c8b8:	b083      	sub	sp, #12
 800c8ba:	2900      	cmp	r1, #0
 800c8bc:	d041      	beq.n	800c942 <_Control_Event__cdr_deserialize+0x8e>
 800c8be:	4606      	mov	r6, r0
 800c8c0:	f001 fc9a 	bl	800e1f8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800c8c4:	4603      	mov	r3, r0
 800c8c6:	4629      	mov	r1, r5
 800c8c8:	4630      	mov	r0, r6
 800c8ca:	685b      	ldr	r3, [r3, #4]
 800c8cc:	68db      	ldr	r3, [r3, #12]
 800c8ce:	4798      	blx	r3
 800c8d0:	4630      	mov	r0, r6
 800c8d2:	a901      	add	r1, sp, #4
 800c8d4:	f002 f9b4 	bl	800ec40 <ucdr_deserialize_uint32_t>
 800c8d8:	9b01      	ldr	r3, [sp, #4]
 800c8da:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800c8dc:	429a      	cmp	r2, r3
 800c8de:	d32d      	bcc.n	800c93c <_Control_Event__cdr_deserialize+0x88>
 800c8e0:	62eb      	str	r3, [r5, #44]	; 0x2c
 800c8e2:	b17b      	cbz	r3, 800c904 <_Control_Event__cdr_deserialize+0x50>
 800c8e4:	2400      	movs	r4, #0
 800c8e6:	4f18      	ldr	r7, [pc, #96]	; (800c948 <_Control_Event__cdr_deserialize+0x94>)
 800c8e8:	e002      	b.n	800c8f0 <_Control_Event__cdr_deserialize+0x3c>
 800c8ea:	9b01      	ldr	r3, [sp, #4]
 800c8ec:	429c      	cmp	r4, r3
 800c8ee:	d209      	bcs.n	800c904 <_Control_Event__cdr_deserialize+0x50>
 800c8f0:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800c8f2:	4630      	mov	r0, r6
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 800c8fa:	3401      	adds	r4, #1
 800c8fc:	68db      	ldr	r3, [r3, #12]
 800c8fe:	4798      	blx	r3
 800c900:	2800      	cmp	r0, #0
 800c902:	d1f2      	bne.n	800c8ea <_Control_Event__cdr_deserialize+0x36>
 800c904:	a901      	add	r1, sp, #4
 800c906:	4630      	mov	r0, r6
 800c908:	f002 f99a 	bl	800ec40 <ucdr_deserialize_uint32_t>
 800c90c:	9b01      	ldr	r3, [sp, #4]
 800c90e:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 800c910:	429a      	cmp	r2, r3
 800c912:	d313      	bcc.n	800c93c <_Control_Event__cdr_deserialize+0x88>
 800c914:	63ab      	str	r3, [r5, #56]	; 0x38
 800c916:	b193      	cbz	r3, 800c93e <_Control_Event__cdr_deserialize+0x8a>
 800c918:	2400      	movs	r4, #0
 800c91a:	4f0c      	ldr	r7, [pc, #48]	; (800c94c <_Control_Event__cdr_deserialize+0x98>)
 800c91c:	e002      	b.n	800c924 <_Control_Event__cdr_deserialize+0x70>
 800c91e:	9b01      	ldr	r3, [sp, #4]
 800c920:	429c      	cmp	r4, r3
 800c922:	d20c      	bcs.n	800c93e <_Control_Event__cdr_deserialize+0x8a>
 800c924:	6b69      	ldr	r1, [r5, #52]	; 0x34
 800c926:	4630      	mov	r0, r6
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 800c92e:	3401      	adds	r4, #1
 800c930:	68db      	ldr	r3, [r3, #12]
 800c932:	4798      	blx	r3
 800c934:	2800      	cmp	r0, #0
 800c936:	d1f2      	bne.n	800c91e <_Control_Event__cdr_deserialize+0x6a>
 800c938:	b003      	add	sp, #12
 800c93a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c93c:	2000      	movs	r0, #0
 800c93e:	b003      	add	sp, #12
 800c940:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c942:	4608      	mov	r0, r1
 800c944:	b003      	add	sp, #12
 800c946:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c948:	20000804 	.word	0x20000804
 800c94c:	2000081c 	.word	0x2000081c

0800c950 <_Control_Event__cdr_serialize>:
 800c950:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c954:	2800      	cmp	r0, #0
 800c956:	d03a      	beq.n	800c9ce <_Control_Event__cdr_serialize+0x7e>
 800c958:	4605      	mov	r5, r0
 800c95a:	460e      	mov	r6, r1
 800c95c:	f001 fc4c 	bl	800e1f8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800c960:	4603      	mov	r3, r0
 800c962:	4631      	mov	r1, r6
 800c964:	4628      	mov	r0, r5
 800c966:	685b      	ldr	r3, [r3, #4]
 800c968:	689b      	ldr	r3, [r3, #8]
 800c96a:	4798      	blx	r3
 800c96c:	6aef      	ldr	r7, [r5, #44]	; 0x2c
 800c96e:	4630      	mov	r0, r6
 800c970:	4639      	mov	r1, r7
 800c972:	f002 f835 	bl	800e9e0 <ucdr_serialize_uint32_t>
 800c976:	b188      	cbz	r0, 800c99c <_Control_Event__cdr_serialize+0x4c>
 800c978:	b187      	cbz	r7, 800c99c <_Control_Event__cdr_serialize+0x4c>
 800c97a:	2400      	movs	r4, #0
 800c97c:	f8df 8058 	ldr.w	r8, [pc, #88]	; 800c9d8 <_Control_Event__cdr_serialize+0x88>
 800c980:	e001      	b.n	800c986 <_Control_Event__cdr_serialize+0x36>
 800c982:	42a7      	cmp	r7, r4
 800c984:	d00a      	beq.n	800c99c <_Control_Event__cdr_serialize+0x4c>
 800c986:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 800c988:	4631      	mov	r1, r6
 800c98a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c98e:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800c992:	3401      	adds	r4, #1
 800c994:	689b      	ldr	r3, [r3, #8]
 800c996:	4798      	blx	r3
 800c998:	2800      	cmp	r0, #0
 800c99a:	d1f2      	bne.n	800c982 <_Control_Event__cdr_serialize+0x32>
 800c99c:	6baf      	ldr	r7, [r5, #56]	; 0x38
 800c99e:	4630      	mov	r0, r6
 800c9a0:	4639      	mov	r1, r7
 800c9a2:	f002 f81d 	bl	800e9e0 <ucdr_serialize_uint32_t>
 800c9a6:	4680      	mov	r8, r0
 800c9a8:	b188      	cbz	r0, 800c9ce <_Control_Event__cdr_serialize+0x7e>
 800c9aa:	b197      	cbz	r7, 800c9d2 <_Control_Event__cdr_serialize+0x82>
 800c9ac:	2400      	movs	r4, #0
 800c9ae:	f8df 902c 	ldr.w	r9, [pc, #44]	; 800c9dc <_Control_Event__cdr_serialize+0x8c>
 800c9b2:	e001      	b.n	800c9b8 <_Control_Event__cdr_serialize+0x68>
 800c9b4:	42a7      	cmp	r7, r4
 800c9b6:	d00c      	beq.n	800c9d2 <_Control_Event__cdr_serialize+0x82>
 800c9b8:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800c9ba:	4631      	mov	r1, r6
 800c9bc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800c9c0:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800c9c4:	3401      	adds	r4, #1
 800c9c6:	689b      	ldr	r3, [r3, #8]
 800c9c8:	4798      	blx	r3
 800c9ca:	2800      	cmp	r0, #0
 800c9cc:	d1f2      	bne.n	800c9b4 <_Control_Event__cdr_serialize+0x64>
 800c9ce:	f04f 0800 	mov.w	r8, #0
 800c9d2:	4640      	mov	r0, r8
 800c9d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c9d8:	20000804 	.word	0x20000804
 800c9dc:	2000081c 	.word	0x2000081c

0800c9e0 <_Control_Request__max_serialized_size>:
 800c9e0:	b538      	push	{r3, r4, r5, lr}
 800c9e2:	2101      	movs	r1, #1
 800c9e4:	2000      	movs	r0, #0
 800c9e6:	f003 f853 	bl	800fa90 <ucdr_alignment>
 800c9ea:	2101      	movs	r1, #1
 800c9ec:	1845      	adds	r5, r0, r1
 800c9ee:	4628      	mov	r0, r5
 800c9f0:	f003 f84e 	bl	800fa90 <ucdr_alignment>
 800c9f4:	2101      	movs	r1, #1
 800c9f6:	1844      	adds	r4, r0, r1
 800c9f8:	442c      	add	r4, r5
 800c9fa:	4620      	mov	r0, r4
 800c9fc:	f003 f848 	bl	800fa90 <ucdr_alignment>
 800ca00:	3001      	adds	r0, #1
 800ca02:	4420      	add	r0, r4
 800ca04:	bd38      	pop	{r3, r4, r5, pc}
 800ca06:	bf00      	nop

0800ca08 <_Control_Response__max_serialized_size>:
 800ca08:	b538      	push	{r3, r4, r5, lr}
 800ca0a:	2101      	movs	r1, #1
 800ca0c:	2000      	movs	r0, #0
 800ca0e:	f003 f83f 	bl	800fa90 <ucdr_alignment>
 800ca12:	2101      	movs	r1, #1
 800ca14:	1845      	adds	r5, r0, r1
 800ca16:	4628      	mov	r0, r5
 800ca18:	f003 f83a 	bl	800fa90 <ucdr_alignment>
 800ca1c:	2101      	movs	r1, #1
 800ca1e:	1844      	adds	r4, r0, r1
 800ca20:	442c      	add	r4, r5
 800ca22:	4620      	mov	r0, r4
 800ca24:	f003 f834 	bl	800fa90 <ucdr_alignment>
 800ca28:	2101      	movs	r1, #1
 800ca2a:	4408      	add	r0, r1
 800ca2c:	4404      	add	r4, r0
 800ca2e:	4620      	mov	r0, r4
 800ca30:	f003 f82e 	bl	800fa90 <ucdr_alignment>
 800ca34:	3001      	adds	r0, #1
 800ca36:	4420      	add	r0, r4
 800ca38:	bd38      	pop	{r3, r4, r5, pc}
 800ca3a:	bf00      	nop

0800ca3c <_Control_Request__get_serialized_size>:
 800ca3c:	b570      	push	{r4, r5, r6, lr}
 800ca3e:	4604      	mov	r4, r0
 800ca40:	b1c0      	cbz	r0, 800ca74 <_Control_Request__get_serialized_size+0x38>
 800ca42:	2101      	movs	r1, #1
 800ca44:	2000      	movs	r0, #0
 800ca46:	f003 f823 	bl	800fa90 <ucdr_alignment>
 800ca4a:	2101      	movs	r1, #1
 800ca4c:	1846      	adds	r6, r0, r1
 800ca4e:	4630      	mov	r0, r6
 800ca50:	f003 f81e 	bl	800fa90 <ucdr_alignment>
 800ca54:	2101      	movs	r1, #1
 800ca56:	1845      	adds	r5, r0, r1
 800ca58:	4435      	add	r5, r6
 800ca5a:	4628      	mov	r0, r5
 800ca5c:	f003 f818 	bl	800fa90 <ucdr_alignment>
 800ca60:	3001      	adds	r0, #1
 800ca62:	2104      	movs	r1, #4
 800ca64:	68a6      	ldr	r6, [r4, #8]
 800ca66:	4405      	add	r5, r0
 800ca68:	4628      	mov	r0, r5
 800ca6a:	f003 f811 	bl	800fa90 <ucdr_alignment>
 800ca6e:	1d04      	adds	r4, r0, #4
 800ca70:	442c      	add	r4, r5
 800ca72:	b90e      	cbnz	r6, 800ca78 <_Control_Request__get_serialized_size+0x3c>
 800ca74:	4620      	mov	r0, r4
 800ca76:	bd70      	pop	{r4, r5, r6, pc}
 800ca78:	4620      	mov	r0, r4
 800ca7a:	4434      	add	r4, r6
 800ca7c:	2101      	movs	r1, #1
 800ca7e:	f003 f807 	bl	800fa90 <ucdr_alignment>
 800ca82:	4404      	add	r4, r0
 800ca84:	4620      	mov	r0, r4
 800ca86:	bd70      	pop	{r4, r5, r6, pc}

0800ca88 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Control_Event>:
 800ca88:	4800      	ldr	r0, [pc, #0]	; (800ca8c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x4>)
 800ca8a:	4770      	bx	lr
 800ca8c:	200007ec 	.word	0x200007ec

0800ca90 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__racs_services__srv__Control>:
 800ca90:	4800      	ldr	r0, [pc, #0]	; (800ca94 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__racs_services__srv__Control+0x4>)
 800ca92:	4770      	bx	lr
 800ca94:	200007c0 	.word	0x200007c0

0800ca98 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Setup_Request>:
 800ca98:	4800      	ldr	r0, [pc, #0]	; (800ca9c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x4>)
 800ca9a:	4770      	bx	lr
 800ca9c:	200008dc 	.word	0x200008dc

0800caa0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Setup_Response>:
 800caa0:	4800      	ldr	r0, [pc, #0]	; (800caa4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Setup_Response+0x4>)
 800caa2:	4770      	bx	lr
 800caa4:	200008f4 	.word	0x200008f4

0800caa8 <_Setup_Response__max_serialized_size>:
 800caa8:	2101      	movs	r1, #1
 800caaa:	2000      	movs	r0, #0
 800caac:	b508      	push	{r3, lr}
 800caae:	f002 ffef 	bl	800fa90 <ucdr_alignment>
 800cab2:	3001      	adds	r0, #1
 800cab4:	bd08      	pop	{r3, pc}
 800cab6:	bf00      	nop

0800cab8 <_Setup_Response__cdr_deserialize>:
 800cab8:	b109      	cbz	r1, 800cabe <_Setup_Response__cdr_deserialize+0x6>
 800caba:	f001 bd91 	b.w	800e5e0 <ucdr_deserialize_uint8_t>
 800cabe:	4608      	mov	r0, r1
 800cac0:	4770      	bx	lr
 800cac2:	bf00      	nop

0800cac4 <_Setup_Event__max_serialized_size>:
 800cac4:	b500      	push	{lr}
 800cac6:	b083      	sub	sp, #12
 800cac8:	2301      	movs	r3, #1
 800caca:	2100      	movs	r1, #0
 800cacc:	f10d 0007 	add.w	r0, sp, #7
 800cad0:	f88d 3007 	strb.w	r3, [sp, #7]
 800cad4:	f001 fb6a 	bl	800e1ac <max_serialized_size_service_msgs__msg__ServiceEventInfo>
 800cad8:	b003      	add	sp, #12
 800cada:	f85d fb04 	ldr.w	pc, [sp], #4
 800cade:	bf00      	nop

0800cae0 <get_serialized_size_racs_services__srv__Setup_Request.part.0>:
 800cae0:	b570      	push	{r4, r5, r6, lr}
 800cae2:	4604      	mov	r4, r0
 800cae4:	2101      	movs	r1, #1
 800cae6:	f002 ffd3 	bl	800fa90 <ucdr_alignment>
 800caea:	2104      	movs	r1, #4
 800caec:	1c65      	adds	r5, r4, #1
 800caee:	f1c4 0404 	rsb	r4, r4, #4
 800caf2:	4405      	add	r5, r0
 800caf4:	4628      	mov	r0, r5
 800caf6:	f002 ffcb 	bl	800fa90 <ucdr_alignment>
 800cafa:	2104      	movs	r1, #4
 800cafc:	1846      	adds	r6, r0, r1
 800cafe:	442e      	add	r6, r5
 800cb00:	4630      	mov	r0, r6
 800cb02:	f002 ffc5 	bl	800fa90 <ucdr_alignment>
 800cb06:	2104      	movs	r1, #4
 800cb08:	1845      	adds	r5, r0, r1
 800cb0a:	442e      	add	r6, r5
 800cb0c:	4630      	mov	r0, r6
 800cb0e:	f002 ffbf 	bl	800fa90 <ucdr_alignment>
 800cb12:	2104      	movs	r1, #4
 800cb14:	4408      	add	r0, r1
 800cb16:	4406      	add	r6, r0
 800cb18:	4630      	mov	r0, r6
 800cb1a:	f002 ffb9 	bl	800fa90 <ucdr_alignment>
 800cb1e:	2104      	movs	r1, #4
 800cb20:	1845      	adds	r5, r0, r1
 800cb22:	4435      	add	r5, r6
 800cb24:	4628      	mov	r0, r5
 800cb26:	f002 ffb3 	bl	800fa90 <ucdr_alignment>
 800cb2a:	2104      	movs	r1, #4
 800cb2c:	4408      	add	r0, r1
 800cb2e:	4405      	add	r5, r0
 800cb30:	4628      	mov	r0, r5
 800cb32:	f002 ffad 	bl	800fa90 <ucdr_alignment>
 800cb36:	4420      	add	r0, r4
 800cb38:	4428      	add	r0, r5
 800cb3a:	bd70      	pop	{r4, r5, r6, pc}

0800cb3c <get_serialized_size_racs_services__srv__Setup_Request>:
 800cb3c:	b110      	cbz	r0, 800cb44 <get_serialized_size_racs_services__srv__Setup_Request+0x8>
 800cb3e:	4608      	mov	r0, r1
 800cb40:	f7ff bfce 	b.w	800cae0 <get_serialized_size_racs_services__srv__Setup_Request.part.0>
 800cb44:	4770      	bx	lr
 800cb46:	bf00      	nop

0800cb48 <_Setup_Request__get_serialized_size>:
 800cb48:	b110      	cbz	r0, 800cb50 <_Setup_Request__get_serialized_size+0x8>
 800cb4a:	2000      	movs	r0, #0
 800cb4c:	f7ff bfc8 	b.w	800cae0 <get_serialized_size_racs_services__srv__Setup_Request.part.0>
 800cb50:	4770      	bx	lr
 800cb52:	bf00      	nop

0800cb54 <get_serialized_size_racs_services__srv__Setup_Response>:
 800cb54:	b138      	cbz	r0, 800cb66 <get_serialized_size_racs_services__srv__Setup_Response+0x12>
 800cb56:	b508      	push	{r3, lr}
 800cb58:	460b      	mov	r3, r1
 800cb5a:	2101      	movs	r1, #1
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	f002 ff97 	bl	800fa90 <ucdr_alignment>
 800cb62:	3001      	adds	r0, #1
 800cb64:	bd08      	pop	{r3, pc}
 800cb66:	4770      	bx	lr

0800cb68 <_Setup_Request__cdr_deserialize>:
 800cb68:	b538      	push	{r3, r4, r5, lr}
 800cb6a:	460c      	mov	r4, r1
 800cb6c:	b309      	cbz	r1, 800cbb2 <_Setup_Request__cdr_deserialize+0x4a>
 800cb6e:	4605      	mov	r5, r0
 800cb70:	f001 fd36 	bl	800e5e0 <ucdr_deserialize_uint8_t>
 800cb74:	1d21      	adds	r1, r4, #4
 800cb76:	4628      	mov	r0, r5
 800cb78:	f002 fea2 	bl	800f8c0 <ucdr_deserialize_float>
 800cb7c:	f104 0108 	add.w	r1, r4, #8
 800cb80:	4628      	mov	r0, r5
 800cb82:	f002 fe9d 	bl	800f8c0 <ucdr_deserialize_float>
 800cb86:	f104 010c 	add.w	r1, r4, #12
 800cb8a:	4628      	mov	r0, r5
 800cb8c:	f002 fe98 	bl	800f8c0 <ucdr_deserialize_float>
 800cb90:	f104 0110 	add.w	r1, r4, #16
 800cb94:	4628      	mov	r0, r5
 800cb96:	f002 fe93 	bl	800f8c0 <ucdr_deserialize_float>
 800cb9a:	f104 0114 	add.w	r1, r4, #20
 800cb9e:	4628      	mov	r0, r5
 800cba0:	f002 fe8e 	bl	800f8c0 <ucdr_deserialize_float>
 800cba4:	f104 0118 	add.w	r1, r4, #24
 800cba8:	4628      	mov	r0, r5
 800cbaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cbae:	f002 be87 	b.w	800f8c0 <ucdr_deserialize_float>
 800cbb2:	4608      	mov	r0, r1
 800cbb4:	bd38      	pop	{r3, r4, r5, pc}
 800cbb6:	bf00      	nop

0800cbb8 <_Setup_Response__cdr_serialize>:
 800cbb8:	460a      	mov	r2, r1
 800cbba:	b118      	cbz	r0, 800cbc4 <_Setup_Response__cdr_serialize+0xc>
 800cbbc:	7801      	ldrb	r1, [r0, #0]
 800cbbe:	4610      	mov	r0, r2
 800cbc0:	f001 bcf8 	b.w	800e5b4 <ucdr_serialize_uint8_t>
 800cbc4:	4770      	bx	lr
 800cbc6:	bf00      	nop

0800cbc8 <_Setup_Request__cdr_serialize>:
 800cbc8:	b330      	cbz	r0, 800cc18 <_Setup_Request__cdr_serialize+0x50>
 800cbca:	b538      	push	{r3, r4, r5, lr}
 800cbcc:	460d      	mov	r5, r1
 800cbce:	4604      	mov	r4, r0
 800cbd0:	7801      	ldrb	r1, [r0, #0]
 800cbd2:	4628      	mov	r0, r5
 800cbd4:	f001 fcee 	bl	800e5b4 <ucdr_serialize_uint8_t>
 800cbd8:	ed94 0a01 	vldr	s0, [r4, #4]
 800cbdc:	4628      	mov	r0, r5
 800cbde:	f002 fdd7 	bl	800f790 <ucdr_serialize_float>
 800cbe2:	ed94 0a02 	vldr	s0, [r4, #8]
 800cbe6:	4628      	mov	r0, r5
 800cbe8:	f002 fdd2 	bl	800f790 <ucdr_serialize_float>
 800cbec:	ed94 0a03 	vldr	s0, [r4, #12]
 800cbf0:	4628      	mov	r0, r5
 800cbf2:	f002 fdcd 	bl	800f790 <ucdr_serialize_float>
 800cbf6:	ed94 0a04 	vldr	s0, [r4, #16]
 800cbfa:	4628      	mov	r0, r5
 800cbfc:	f002 fdc8 	bl	800f790 <ucdr_serialize_float>
 800cc00:	ed94 0a05 	vldr	s0, [r4, #20]
 800cc04:	4628      	mov	r0, r5
 800cc06:	f002 fdc3 	bl	800f790 <ucdr_serialize_float>
 800cc0a:	ed94 0a06 	vldr	s0, [r4, #24]
 800cc0e:	4628      	mov	r0, r5
 800cc10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cc14:	f002 bdbc 	b.w	800f790 <ucdr_serialize_float>
 800cc18:	4770      	bx	lr
 800cc1a:	bf00      	nop

0800cc1c <get_serialized_size_racs_services__srv__Setup_Event.part.0>:
 800cc1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc20:	460e      	mov	r6, r1
 800cc22:	4605      	mov	r5, r0
 800cc24:	f001 fa28 	bl	800e078 <get_serialized_size_service_msgs__msg__ServiceEventInfo>
 800cc28:	2104      	movs	r1, #4
 800cc2a:	eb06 0800 	add.w	r8, r6, r0
 800cc2e:	f8d5 902c 	ldr.w	r9, [r5, #44]	; 0x2c
 800cc32:	4640      	mov	r0, r8
 800cc34:	f002 ff2c 	bl	800fa90 <ucdr_alignment>
 800cc38:	3004      	adds	r0, #4
 800cc3a:	4480      	add	r8, r0
 800cc3c:	f1b9 0f00 	cmp.w	r9, #0
 800cc40:	d019      	beq.n	800cc76 <get_serialized_size_racs_services__srv__Setup_Event.part.0+0x5a>
 800cc42:	2700      	movs	r7, #0
 800cc44:	f8df a07c 	ldr.w	sl, [pc, #124]	; 800ccc4 <get_serialized_size_racs_services__srv__Setup_Event.part.0+0xa8>
 800cc48:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800cc4a:	ebc7 00c7 	rsb	r0, r7, r7, lsl #3
 800cc4e:	f8da 3004 	ldr.w	r3, [sl, #4]
 800cc52:	4641      	mov	r1, r8
 800cc54:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800cc58:	3701      	adds	r7, #1
 800cc5a:	695b      	ldr	r3, [r3, #20]
 800cc5c:	4798      	blx	r3
 800cc5e:	4604      	mov	r4, r0
 800cc60:	4640      	mov	r0, r8
 800cc62:	2c04      	cmp	r4, #4
 800cc64:	4621      	mov	r1, r4
 800cc66:	bf28      	it	cs
 800cc68:	2104      	movcs	r1, #4
 800cc6a:	f002 ff11 	bl	800fa90 <ucdr_alignment>
 800cc6e:	45b9      	cmp	r9, r7
 800cc70:	4420      	add	r0, r4
 800cc72:	4480      	add	r8, r0
 800cc74:	d1e8      	bne.n	800cc48 <get_serialized_size_racs_services__srv__Setup_Event.part.0+0x2c>
 800cc76:	4640      	mov	r0, r8
 800cc78:	2104      	movs	r1, #4
 800cc7a:	6baf      	ldr	r7, [r5, #56]	; 0x38
 800cc7c:	f002 ff08 	bl	800fa90 <ucdr_alignment>
 800cc80:	4480      	add	r8, r0
 800cc82:	f108 0804 	add.w	r8, r8, #4
 800cc86:	b1c7      	cbz	r7, 800ccba <get_serialized_size_racs_services__srv__Setup_Event.part.0+0x9e>
 800cc88:	f04f 0900 	mov.w	r9, #0
 800cc8c:	f8df a038 	ldr.w	sl, [pc, #56]	; 800ccc8 <get_serialized_size_racs_services__srv__Setup_Event.part.0+0xac>
 800cc90:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800cc92:	4641      	mov	r1, r8
 800cc94:	f8da 3004 	ldr.w	r3, [sl, #4]
 800cc98:	4448      	add	r0, r9
 800cc9a:	f109 0901 	add.w	r9, r9, #1
 800cc9e:	695b      	ldr	r3, [r3, #20]
 800cca0:	4798      	blx	r3
 800cca2:	4604      	mov	r4, r0
 800cca4:	4640      	mov	r0, r8
 800cca6:	2c04      	cmp	r4, #4
 800cca8:	4621      	mov	r1, r4
 800ccaa:	bf28      	it	cs
 800ccac:	2104      	movcs	r1, #4
 800ccae:	f002 feef 	bl	800fa90 <ucdr_alignment>
 800ccb2:	454f      	cmp	r7, r9
 800ccb4:	4420      	add	r0, r4
 800ccb6:	4480      	add	r8, r0
 800ccb8:	d1ea      	bne.n	800cc90 <get_serialized_size_racs_services__srv__Setup_Event.part.0+0x74>
 800ccba:	eba8 0006 	sub.w	r0, r8, r6
 800ccbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccc2:	bf00      	nop
 800ccc4:	200008dc 	.word	0x200008dc
 800ccc8:	200008f4 	.word	0x200008f4

0800cccc <get_serialized_size_racs_services__srv__Setup_Event>:
 800cccc:	b108      	cbz	r0, 800ccd2 <get_serialized_size_racs_services__srv__Setup_Event+0x6>
 800ccce:	f7ff bfa5 	b.w	800cc1c <get_serialized_size_racs_services__srv__Setup_Event.part.0>
 800ccd2:	4770      	bx	lr

0800ccd4 <_Setup_Event__get_serialized_size>:
 800ccd4:	b110      	cbz	r0, 800ccdc <_Setup_Event__get_serialized_size+0x8>
 800ccd6:	2100      	movs	r1, #0
 800ccd8:	f7ff bfa0 	b.w	800cc1c <get_serialized_size_racs_services__srv__Setup_Event.part.0>
 800ccdc:	4770      	bx	lr
 800ccde:	bf00      	nop

0800cce0 <_Setup_Event__cdr_deserialize>:
 800cce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cce4:	460c      	mov	r4, r1
 800cce6:	b082      	sub	sp, #8
 800cce8:	2900      	cmp	r1, #0
 800ccea:	d045      	beq.n	800cd78 <_Setup_Event__cdr_deserialize+0x98>
 800ccec:	4607      	mov	r7, r0
 800ccee:	f001 fa83 	bl	800e1f8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800ccf2:	4603      	mov	r3, r0
 800ccf4:	4621      	mov	r1, r4
 800ccf6:	4638      	mov	r0, r7
 800ccf8:	685b      	ldr	r3, [r3, #4]
 800ccfa:	68db      	ldr	r3, [r3, #12]
 800ccfc:	4798      	blx	r3
 800ccfe:	4638      	mov	r0, r7
 800cd00:	a901      	add	r1, sp, #4
 800cd02:	f001 ff9d 	bl	800ec40 <ucdr_deserialize_uint32_t>
 800cd06:	9b01      	ldr	r3, [sp, #4]
 800cd08:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800cd0a:	429a      	cmp	r2, r3
 800cd0c:	d330      	bcc.n	800cd70 <_Setup_Event__cdr_deserialize+0x90>
 800cd0e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cd10:	b193      	cbz	r3, 800cd38 <_Setup_Event__cdr_deserialize+0x58>
 800cd12:	2500      	movs	r5, #0
 800cd14:	f8df 806c 	ldr.w	r8, [pc, #108]	; 800cd84 <_Setup_Event__cdr_deserialize+0xa4>
 800cd18:	462e      	mov	r6, r5
 800cd1a:	e002      	b.n	800cd22 <_Setup_Event__cdr_deserialize+0x42>
 800cd1c:	9b01      	ldr	r3, [sp, #4]
 800cd1e:	429e      	cmp	r6, r3
 800cd20:	d20a      	bcs.n	800cd38 <_Setup_Event__cdr_deserialize+0x58>
 800cd22:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800cd24:	4638      	mov	r0, r7
 800cd26:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cd2a:	3601      	adds	r6, #1
 800cd2c:	4429      	add	r1, r5
 800cd2e:	351c      	adds	r5, #28
 800cd30:	68db      	ldr	r3, [r3, #12]
 800cd32:	4798      	blx	r3
 800cd34:	2800      	cmp	r0, #0
 800cd36:	d1f1      	bne.n	800cd1c <_Setup_Event__cdr_deserialize+0x3c>
 800cd38:	a901      	add	r1, sp, #4
 800cd3a:	4638      	mov	r0, r7
 800cd3c:	f001 ff80 	bl	800ec40 <ucdr_deserialize_uint32_t>
 800cd40:	9b01      	ldr	r3, [sp, #4]
 800cd42:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800cd44:	429a      	cmp	r2, r3
 800cd46:	d313      	bcc.n	800cd70 <_Setup_Event__cdr_deserialize+0x90>
 800cd48:	63a3      	str	r3, [r4, #56]	; 0x38
 800cd4a:	b193      	cbz	r3, 800cd72 <_Setup_Event__cdr_deserialize+0x92>
 800cd4c:	2500      	movs	r5, #0
 800cd4e:	4e0c      	ldr	r6, [pc, #48]	; (800cd80 <_Setup_Event__cdr_deserialize+0xa0>)
 800cd50:	e002      	b.n	800cd58 <_Setup_Event__cdr_deserialize+0x78>
 800cd52:	9b01      	ldr	r3, [sp, #4]
 800cd54:	429d      	cmp	r5, r3
 800cd56:	d20c      	bcs.n	800cd72 <_Setup_Event__cdr_deserialize+0x92>
 800cd58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cd5a:	4638      	mov	r0, r7
 800cd5c:	6873      	ldr	r3, [r6, #4]
 800cd5e:	4429      	add	r1, r5
 800cd60:	3501      	adds	r5, #1
 800cd62:	68db      	ldr	r3, [r3, #12]
 800cd64:	4798      	blx	r3
 800cd66:	2800      	cmp	r0, #0
 800cd68:	d1f3      	bne.n	800cd52 <_Setup_Event__cdr_deserialize+0x72>
 800cd6a:	b002      	add	sp, #8
 800cd6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd70:	2000      	movs	r0, #0
 800cd72:	b002      	add	sp, #8
 800cd74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd78:	4608      	mov	r0, r1
 800cd7a:	b002      	add	sp, #8
 800cd7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd80:	200008f4 	.word	0x200008f4
 800cd84:	200008dc 	.word	0x200008dc

0800cd88 <_Setup_Event__cdr_serialize>:
 800cd88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd8c:	2800      	cmp	r0, #0
 800cd8e:	d03b      	beq.n	800ce08 <_Setup_Event__cdr_serialize+0x80>
 800cd90:	4605      	mov	r5, r0
 800cd92:	460e      	mov	r6, r1
 800cd94:	f001 fa30 	bl	800e1f8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800cd98:	4603      	mov	r3, r0
 800cd9a:	4631      	mov	r1, r6
 800cd9c:	4628      	mov	r0, r5
 800cd9e:	685b      	ldr	r3, [r3, #4]
 800cda0:	689b      	ldr	r3, [r3, #8]
 800cda2:	4798      	blx	r3
 800cda4:	6aef      	ldr	r7, [r5, #44]	; 0x2c
 800cda6:	4630      	mov	r0, r6
 800cda8:	4639      	mov	r1, r7
 800cdaa:	f001 fe19 	bl	800e9e0 <ucdr_serialize_uint32_t>
 800cdae:	b198      	cbz	r0, 800cdd8 <_Setup_Event__cdr_serialize+0x50>
 800cdb0:	b197      	cbz	r7, 800cdd8 <_Setup_Event__cdr_serialize+0x50>
 800cdb2:	2400      	movs	r4, #0
 800cdb4:	f8df 805c 	ldr.w	r8, [pc, #92]	; 800ce14 <_Setup_Event__cdr_serialize+0x8c>
 800cdb8:	e001      	b.n	800cdbe <_Setup_Event__cdr_serialize+0x36>
 800cdba:	42a7      	cmp	r7, r4
 800cdbc:	d00c      	beq.n	800cdd8 <_Setup_Event__cdr_serialize+0x50>
 800cdbe:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
 800cdc2:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800cdc4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cdc8:	4631      	mov	r1, r6
 800cdca:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800cdce:	3401      	adds	r4, #1
 800cdd0:	689b      	ldr	r3, [r3, #8]
 800cdd2:	4798      	blx	r3
 800cdd4:	2800      	cmp	r0, #0
 800cdd6:	d1f0      	bne.n	800cdba <_Setup_Event__cdr_serialize+0x32>
 800cdd8:	6baf      	ldr	r7, [r5, #56]	; 0x38
 800cdda:	4630      	mov	r0, r6
 800cddc:	4639      	mov	r1, r7
 800cdde:	f001 fdff 	bl	800e9e0 <ucdr_serialize_uint32_t>
 800cde2:	4680      	mov	r8, r0
 800cde4:	b180      	cbz	r0, 800ce08 <_Setup_Event__cdr_serialize+0x80>
 800cde6:	b18f      	cbz	r7, 800ce0c <_Setup_Event__cdr_serialize+0x84>
 800cde8:	2400      	movs	r4, #0
 800cdea:	f8df 902c 	ldr.w	r9, [pc, #44]	; 800ce18 <_Setup_Event__cdr_serialize+0x90>
 800cdee:	e001      	b.n	800cdf4 <_Setup_Event__cdr_serialize+0x6c>
 800cdf0:	42a7      	cmp	r7, r4
 800cdf2:	d00b      	beq.n	800ce0c <_Setup_Event__cdr_serialize+0x84>
 800cdf4:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800cdf6:	4631      	mov	r1, r6
 800cdf8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800cdfc:	4420      	add	r0, r4
 800cdfe:	3401      	adds	r4, #1
 800ce00:	689b      	ldr	r3, [r3, #8]
 800ce02:	4798      	blx	r3
 800ce04:	2800      	cmp	r0, #0
 800ce06:	d1f3      	bne.n	800cdf0 <_Setup_Event__cdr_serialize+0x68>
 800ce08:	f04f 0800 	mov.w	r8, #0
 800ce0c:	4640      	mov	r0, r8
 800ce0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce12:	bf00      	nop
 800ce14:	200008dc 	.word	0x200008dc
 800ce18:	200008f4 	.word	0x200008f4

0800ce1c <_Setup_Response__get_serialized_size>:
 800ce1c:	b130      	cbz	r0, 800ce2c <_Setup_Response__get_serialized_size+0x10>
 800ce1e:	2101      	movs	r1, #1
 800ce20:	2000      	movs	r0, #0
 800ce22:	b508      	push	{r3, lr}
 800ce24:	f002 fe34 	bl	800fa90 <ucdr_alignment>
 800ce28:	3001      	adds	r0, #1
 800ce2a:	bd08      	pop	{r3, pc}
 800ce2c:	4770      	bx	lr
 800ce2e:	bf00      	nop

0800ce30 <max_serialized_size_racs_services__srv__Setup_Request>:
 800ce30:	b570      	push	{r4, r5, r6, lr}
 800ce32:	460c      	mov	r4, r1
 800ce34:	2301      	movs	r3, #1
 800ce36:	1c65      	adds	r5, r4, #1
 800ce38:	4619      	mov	r1, r3
 800ce3a:	7003      	strb	r3, [r0, #0]
 800ce3c:	4620      	mov	r0, r4
 800ce3e:	f002 fe27 	bl	800fa90 <ucdr_alignment>
 800ce42:	4405      	add	r5, r0
 800ce44:	2104      	movs	r1, #4
 800ce46:	f1c4 0404 	rsb	r4, r4, #4
 800ce4a:	4628      	mov	r0, r5
 800ce4c:	f002 fe20 	bl	800fa90 <ucdr_alignment>
 800ce50:	2104      	movs	r1, #4
 800ce52:	1846      	adds	r6, r0, r1
 800ce54:	442e      	add	r6, r5
 800ce56:	4630      	mov	r0, r6
 800ce58:	f002 fe1a 	bl	800fa90 <ucdr_alignment>
 800ce5c:	2104      	movs	r1, #4
 800ce5e:	1845      	adds	r5, r0, r1
 800ce60:	442e      	add	r6, r5
 800ce62:	4630      	mov	r0, r6
 800ce64:	f002 fe14 	bl	800fa90 <ucdr_alignment>
 800ce68:	2104      	movs	r1, #4
 800ce6a:	4408      	add	r0, r1
 800ce6c:	4406      	add	r6, r0
 800ce6e:	4630      	mov	r0, r6
 800ce70:	f002 fe0e 	bl	800fa90 <ucdr_alignment>
 800ce74:	2104      	movs	r1, #4
 800ce76:	1845      	adds	r5, r0, r1
 800ce78:	4435      	add	r5, r6
 800ce7a:	4628      	mov	r0, r5
 800ce7c:	f002 fe08 	bl	800fa90 <ucdr_alignment>
 800ce80:	2104      	movs	r1, #4
 800ce82:	4408      	add	r0, r1
 800ce84:	4405      	add	r5, r0
 800ce86:	4628      	mov	r0, r5
 800ce88:	f002 fe02 	bl	800fa90 <ucdr_alignment>
 800ce8c:	4420      	add	r0, r4
 800ce8e:	4428      	add	r0, r5
 800ce90:	bd70      	pop	{r4, r5, r6, pc}
 800ce92:	bf00      	nop

0800ce94 <_Setup_Request__max_serialized_size>:
 800ce94:	b500      	push	{lr}
 800ce96:	b083      	sub	sp, #12
 800ce98:	2100      	movs	r1, #0
 800ce9a:	f10d 0007 	add.w	r0, sp, #7
 800ce9e:	f7ff ffc7 	bl	800ce30 <max_serialized_size_racs_services__srv__Setup_Request>
 800cea2:	b003      	add	sp, #12
 800cea4:	f85d fb04 	ldr.w	pc, [sp], #4

0800cea8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Setup_Event>:
 800cea8:	4800      	ldr	r0, [pc, #0]	; (800ceac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x4>)
 800ceaa:	4770      	bx	lr
 800ceac:	200008c4 	.word	0x200008c4

0800ceb0 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__racs_services__srv__Setup>:
 800ceb0:	4800      	ldr	r0, [pc, #0]	; (800ceb4 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__racs_services__srv__Setup+0x4>)
 800ceb2:	4770      	bx	lr
 800ceb4:	20000898 	.word	0x20000898

0800ceb8 <_rclc_check_for_new_data>:
 800ceb8:	2800      	cmp	r0, #0
 800ceba:	d046      	beq.n	800cf4a <_rclc_check_for_new_data+0x92>
 800cebc:	4603      	mov	r3, r0
 800cebe:	b530      	push	{r4, r5, lr}
 800cec0:	7802      	ldrb	r2, [r0, #0]
 800cec2:	b085      	sub	sp, #20
 800cec4:	2a0a      	cmp	r2, #10
 800cec6:	d842      	bhi.n	800cf4e <_rclc_check_for_new_data+0x96>
 800cec8:	e8df f002 	tbb	[pc, r2]
 800cecc:	14181212 	.word	0x14181212
 800ced0:	06060614 	.word	0x06060614
 800ced4:	2e1a      	.short	0x2e1a
 800ced6:	16          	.byte	0x16
 800ced7:	00          	.byte	0x00
 800ced8:	6a0a      	ldr	r2, [r1, #32]
 800ceda:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800cedc:	2000      	movs	r0, #0
 800cede:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800cee2:	1a12      	subs	r2, r2, r0
 800cee4:	bf18      	it	ne
 800cee6:	2201      	movne	r2, #1
 800cee8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800ceec:	b005      	add	sp, #20
 800ceee:	bd30      	pop	{r4, r5, pc}
 800cef0:	680a      	ldr	r2, [r1, #0]
 800cef2:	e7f2      	b.n	800ceda <_rclc_check_for_new_data+0x22>
 800cef4:	698a      	ldr	r2, [r1, #24]
 800cef6:	e7f0      	b.n	800ceda <_rclc_check_for_new_data+0x22>
 800cef8:	688a      	ldr	r2, [r1, #8]
 800cefa:	e7ee      	b.n	800ceda <_rclc_check_for_new_data+0x22>
 800cefc:	690a      	ldr	r2, [r1, #16]
 800cefe:	e7ec      	b.n	800ceda <_rclc_check_for_new_data+0x22>
 800cf00:	685c      	ldr	r4, [r3, #4]
 800cf02:	4608      	mov	r0, r1
 800cf04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cf08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cf0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cf10:	f104 0110 	add.w	r1, r4, #16
 800cf14:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800cf18:	9500      	str	r5, [sp, #0]
 800cf1a:	f104 0341 	add.w	r3, r4, #65	; 0x41
 800cf1e:	f104 0240 	add.w	r2, r4, #64	; 0x40
 800cf22:	f006 f8c5 	bl	80130b0 <rcl_action_client_wait_set_get_entities_ready>
 800cf26:	e7e1      	b.n	800ceec <_rclc_check_for_new_data+0x34>
 800cf28:	685c      	ldr	r4, [r3, #4]
 800cf2a:	4608      	mov	r0, r1
 800cf2c:	f104 0222 	add.w	r2, r4, #34	; 0x22
 800cf30:	f104 0123 	add.w	r1, r4, #35	; 0x23
 800cf34:	f104 0321 	add.w	r3, r4, #33	; 0x21
 800cf38:	e9cd 2100 	strd	r2, r1, [sp]
 800cf3c:	f104 0220 	add.w	r2, r4, #32
 800cf40:	f104 0110 	add.w	r1, r4, #16
 800cf44:	f006 facc 	bl	80134e0 <rcl_action_server_wait_set_get_entities_ready>
 800cf48:	e7d0      	b.n	800ceec <_rclc_check_for_new_data+0x34>
 800cf4a:	200b      	movs	r0, #11
 800cf4c:	4770      	bx	lr
 800cf4e:	2001      	movs	r0, #1
 800cf50:	e7cc      	b.n	800ceec <_rclc_check_for_new_data+0x34>
 800cf52:	bf00      	nop

0800cf54 <_rclc_take_new_data>:
 800cf54:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf56:	b099      	sub	sp, #100	; 0x64
 800cf58:	2800      	cmp	r0, #0
 800cf5a:	f000 8088 	beq.w	800d06e <_rclc_take_new_data+0x11a>
 800cf5e:	7803      	ldrb	r3, [r0, #0]
 800cf60:	4604      	mov	r4, r0
 800cf62:	2b0a      	cmp	r3, #10
 800cf64:	f200 8167 	bhi.w	800d236 <_rclc_take_new_data+0x2e2>
 800cf68:	e8df f003 	tbb	[pc, r3]
 800cf6c:	44152d2d 	.word	0x44152d2d
 800cf70:	19191944 	.word	0x19191944
 800cf74:	065a      	.short	0x065a
 800cf76:	15          	.byte	0x15
 800cf77:	00          	.byte	0x00
 800cf78:	6840      	ldr	r0, [r0, #4]
 800cf7a:	f890 3020 	ldrb.w	r3, [r0, #32]
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	f040 80b2 	bne.w	800d0e8 <_rclc_take_new_data+0x194>
 800cf84:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	f040 80e4 	bne.w	800d156 <_rclc_take_new_data+0x202>
 800cf8e:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d16f      	bne.n	800d076 <_rclc_take_new_data+0x122>
 800cf96:	2500      	movs	r5, #0
 800cf98:	4628      	mov	r0, r5
 800cf9a:	b019      	add	sp, #100	; 0x64
 800cf9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf9e:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800cfa0:	6a0b      	ldr	r3, [r1, #32]
 800cfa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d0f5      	beq.n	800cf96 <_rclc_take_new_data+0x42>
 800cfaa:	6882      	ldr	r2, [r0, #8]
 800cfac:	f100 0110 	add.w	r1, r0, #16
 800cfb0:	6840      	ldr	r0, [r0, #4]
 800cfb2:	f004 fd4d 	bl	8011a50 <rcl_take_request>
 800cfb6:	4605      	mov	r5, r0
 800cfb8:	2800      	cmp	r0, #0
 800cfba:	d0ec      	beq.n	800cf96 <_rclc_take_new_data+0x42>
 800cfbc:	f240 2359 	movw	r3, #601	; 0x259
 800cfc0:	4298      	cmp	r0, r3
 800cfc2:	d013      	beq.n	800cfec <_rclc_take_new_data+0x98>
 800cfc4:	e029      	b.n	800d01a <_rclc_take_new_data+0xc6>
 800cfc6:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800cfc8:	680b      	ldr	r3, [r1, #0]
 800cfca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d0e1      	beq.n	800cf96 <_rclc_take_new_data+0x42>
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	aa0a      	add	r2, sp, #40	; 0x28
 800cfd6:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800cfda:	f004 fe61 	bl	8011ca0 <rcl_take>
 800cfde:	4605      	mov	r5, r0
 800cfe0:	2800      	cmp	r0, #0
 800cfe2:	d0d9      	beq.n	800cf98 <_rclc_take_new_data+0x44>
 800cfe4:	f240 1391 	movw	r3, #401	; 0x191
 800cfe8:	4298      	cmp	r0, r3
 800cfea:	d116      	bne.n	800d01a <_rclc_take_new_data+0xc6>
 800cfec:	2300      	movs	r3, #0
 800cfee:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 800cff2:	e7d1      	b.n	800cf98 <_rclc_take_new_data+0x44>
 800cff4:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800cff6:	698b      	ldr	r3, [r1, #24]
 800cff8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d0ca      	beq.n	800cf96 <_rclc_take_new_data+0x42>
 800d000:	6882      	ldr	r2, [r0, #8]
 800d002:	f100 0110 	add.w	r1, r0, #16
 800d006:	6840      	ldr	r0, [r0, #4]
 800d008:	f003 fd92 	bl	8010b30 <rcl_take_response>
 800d00c:	4605      	mov	r5, r0
 800d00e:	2800      	cmp	r0, #0
 800d010:	d0c1      	beq.n	800cf96 <_rclc_take_new_data+0x42>
 800d012:	f240 13f5 	movw	r3, #501	; 0x1f5
 800d016:	4298      	cmp	r0, r3
 800d018:	d0be      	beq.n	800cf98 <_rclc_take_new_data+0x44>
 800d01a:	f000 feb9 	bl	800dd90 <rcutils_reset_error>
 800d01e:	e7bb      	b.n	800cf98 <_rclc_take_new_data+0x44>
 800d020:	6840      	ldr	r0, [r0, #4]
 800d022:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 800d026:	2b00      	cmp	r3, #0
 800d028:	d17d      	bne.n	800d126 <_rclc_take_new_data+0x1d2>
 800d02a:	69c3      	ldr	r3, [r0, #28]
 800d02c:	b11b      	cbz	r3, 800d036 <_rclc_take_new_data+0xe2>
 800d02e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800d032:	2b00      	cmp	r3, #0
 800d034:	d144      	bne.n	800d0c0 <_rclc_take_new_data+0x16c>
 800d036:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	f040 80ac 	bne.w	800d198 <_rclc_take_new_data+0x244>
 800d040:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 800d044:	2b00      	cmp	r3, #0
 800d046:	d0a6      	beq.n	800cf96 <_rclc_take_new_data+0x42>
 800d048:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800d04a:	a90a      	add	r1, sp, #40	; 0x28
 800d04c:	3010      	adds	r0, #16
 800d04e:	f005 ff07 	bl	8012e60 <rcl_action_take_result_response>
 800d052:	4605      	mov	r5, r0
 800d054:	2800      	cmp	r0, #0
 800d056:	d1e0      	bne.n	800d01a <_rclc_take_new_data+0xc6>
 800d058:	6860      	ldr	r0, [r4, #4]
 800d05a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800d05e:	f006 fb6f 	bl	8013740 <rclc_action_find_handle_by_result_request_sequence_number>
 800d062:	2800      	cmp	r0, #0
 800d064:	d098      	beq.n	800cf98 <_rclc_take_new_data+0x44>
 800d066:	2301      	movs	r3, #1
 800d068:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
 800d06c:	e794      	b.n	800cf98 <_rclc_take_new_data+0x44>
 800d06e:	250b      	movs	r5, #11
 800d070:	4628      	mov	r0, r5
 800d072:	b019      	add	sp, #100	; 0x64
 800d074:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d076:	ae04      	add	r6, sp, #16
 800d078:	3010      	adds	r0, #16
 800d07a:	aa0a      	add	r2, sp, #40	; 0x28
 800d07c:	4631      	mov	r1, r6
 800d07e:	f006 f963 	bl	8013348 <rcl_action_take_cancel_request>
 800d082:	4605      	mov	r5, r0
 800d084:	2800      	cmp	r0, #0
 800d086:	d1c8      	bne.n	800d01a <_rclc_take_new_data+0xc6>
 800d088:	a90a      	add	r1, sp, #40	; 0x28
 800d08a:	6860      	ldr	r0, [r4, #4]
 800d08c:	f006 fb18 	bl	80136c0 <rclc_action_find_goal_handle_by_uuid>
 800d090:	4607      	mov	r7, r0
 800d092:	2800      	cmp	r0, #0
 800d094:	f000 80bb 	beq.w	800d20e <_rclc_take_new_data+0x2ba>
 800d098:	2101      	movs	r1, #1
 800d09a:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800d09e:	f006 fa99 	bl	80135d4 <rcl_action_transition_goal_state>
 800d0a2:	2803      	cmp	r0, #3
 800d0a4:	4684      	mov	ip, r0
 800d0a6:	f040 80a7 	bne.w	800d1f8 <_rclc_take_new_data+0x2a4>
 800d0aa:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800d0ae:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800d0b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d0b2:	e896 0003 	ldmia.w	r6, {r0, r1}
 800d0b6:	e884 0003 	stmia.w	r4, {r0, r1}
 800d0ba:	f887 c008 	strb.w	ip, [r7, #8]
 800d0be:	e76b      	b.n	800cf98 <_rclc_take_new_data+0x44>
 800d0c0:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800d0c2:	3010      	adds	r0, #16
 800d0c4:	f005 ff4c 	bl	8012f60 <rcl_action_take_feedback>
 800d0c8:	4605      	mov	r5, r0
 800d0ca:	2800      	cmp	r0, #0
 800d0cc:	d1a5      	bne.n	800d01a <_rclc_take_new_data+0xc6>
 800d0ce:	6860      	ldr	r0, [r4, #4]
 800d0d0:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800d0d2:	f006 faf5 	bl	80136c0 <rclc_action_find_goal_handle_by_uuid>
 800d0d6:	4603      	mov	r3, r0
 800d0d8:	2800      	cmp	r0, #0
 800d0da:	f000 80a3 	beq.w	800d224 <_rclc_take_new_data+0x2d0>
 800d0de:	2201      	movs	r2, #1
 800d0e0:	6860      	ldr	r0, [r4, #4]
 800d0e2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 800d0e6:	e7a6      	b.n	800d036 <_rclc_take_new_data+0xe2>
 800d0e8:	f006 fac4 	bl	8013674 <rclc_action_take_goal_handle>
 800d0ec:	4606      	mov	r6, r0
 800d0ee:	6860      	ldr	r0, [r4, #4]
 800d0f0:	2e00      	cmp	r6, #0
 800d0f2:	f43f af47 	beq.w	800cf84 <_rclc_take_new_data+0x30>
 800d0f6:	6070      	str	r0, [r6, #4]
 800d0f8:	f106 0128 	add.w	r1, r6, #40	; 0x28
 800d0fc:	69f2      	ldr	r2, [r6, #28]
 800d0fe:	3010      	adds	r0, #16
 800d100:	f006 f86c 	bl	80131dc <rcl_action_take_goal_request>
 800d104:	4605      	mov	r5, r0
 800d106:	2800      	cmp	r0, #0
 800d108:	f040 808e 	bne.w	800d228 <_rclc_take_new_data+0x2d4>
 800d10c:	69f7      	ldr	r7, [r6, #28]
 800d10e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d110:	7235      	strb	r5, [r6, #8]
 800d112:	f8c6 0009 	str.w	r0, [r6, #9]
 800d116:	f8c6 100d 	str.w	r1, [r6, #13]
 800d11a:	6860      	ldr	r0, [r4, #4]
 800d11c:	f8c6 2011 	str.w	r2, [r6, #17]
 800d120:	f8c6 3015 	str.w	r3, [r6, #21]
 800d124:	e72e      	b.n	800cf84 <_rclc_take_new_data+0x30>
 800d126:	aa04      	add	r2, sp, #16
 800d128:	a90a      	add	r1, sp, #40	; 0x28
 800d12a:	3010      	adds	r0, #16
 800d12c:	f005 fe20 	bl	8012d70 <rcl_action_take_goal_response>
 800d130:	4605      	mov	r5, r0
 800d132:	2800      	cmp	r0, #0
 800d134:	f47f af71 	bne.w	800d01a <_rclc_take_new_data+0xc6>
 800d138:	6860      	ldr	r0, [r4, #4]
 800d13a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800d13e:	f006 faed 	bl	801371c <rclc_action_find_handle_by_goal_request_sequence_number>
 800d142:	b130      	cbz	r0, 800d152 <_rclc_take_new_data+0x1fe>
 800d144:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800d148:	2201      	movs	r2, #1
 800d14a:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
 800d14e:	f880 2020 	strb.w	r2, [r0, #32]
 800d152:	6860      	ldr	r0, [r4, #4]
 800d154:	e769      	b.n	800d02a <_rclc_take_new_data+0xd6>
 800d156:	3010      	adds	r0, #16
 800d158:	aa04      	add	r2, sp, #16
 800d15a:	a90a      	add	r1, sp, #40	; 0x28
 800d15c:	f006 f8b4 	bl	80132c8 <rcl_action_take_result_request>
 800d160:	4605      	mov	r5, r0
 800d162:	2800      	cmp	r0, #0
 800d164:	f47f af59 	bne.w	800d01a <_rclc_take_new_data+0xc6>
 800d168:	a904      	add	r1, sp, #16
 800d16a:	6860      	ldr	r0, [r4, #4]
 800d16c:	f006 faa8 	bl	80136c0 <rclc_action_find_goal_handle_by_uuid>
 800d170:	4607      	mov	r7, r0
 800d172:	b160      	cbz	r0, 800d18e <_rclc_take_new_data+0x23a>
 800d174:	ad0a      	add	r5, sp, #40	; 0x28
 800d176:	f100 0640 	add.w	r6, r0, #64	; 0x40
 800d17a:	f04f 0c02 	mov.w	ip, #2
 800d17e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d180:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800d182:	e895 0003 	ldmia.w	r5, {r0, r1}
 800d186:	e886 0003 	stmia.w	r6, {r0, r1}
 800d18a:	f887 c008 	strb.w	ip, [r7, #8]
 800d18e:	6860      	ldr	r0, [r4, #4]
 800d190:	2300      	movs	r3, #0
 800d192:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
 800d196:	e6fa      	b.n	800cf8e <_rclc_take_new_data+0x3a>
 800d198:	f100 0230 	add.w	r2, r0, #48	; 0x30
 800d19c:	a90a      	add	r1, sp, #40	; 0x28
 800d19e:	3010      	adds	r0, #16
 800d1a0:	f005 fe9e 	bl	8012ee0 <rcl_action_take_cancel_response>
 800d1a4:	4605      	mov	r5, r0
 800d1a6:	2800      	cmp	r0, #0
 800d1a8:	f47f af37 	bne.w	800d01a <_rclc_take_new_data+0xc6>
 800d1ac:	6860      	ldr	r0, [r4, #4]
 800d1ae:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800d1b2:	f006 fad7 	bl	8013764 <rclc_action_find_handle_by_cancel_request_sequence_number>
 800d1b6:	4606      	mov	r6, r0
 800d1b8:	6860      	ldr	r0, [r4, #4]
 800d1ba:	2e00      	cmp	r6, #0
 800d1bc:	f43f af40 	beq.w	800d040 <_rclc_take_new_data+0xec>
 800d1c0:	2701      	movs	r7, #1
 800d1c2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800d1c4:	84b7      	strh	r7, [r6, #36]	; 0x24
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	f43f af3a 	beq.w	800d040 <_rclc_take_new_data+0xec>
 800d1cc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800d1ce:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800d1d2:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800d1d6:	f006 fa73 	bl	80136c0 <rclc_action_find_goal_handle_by_uuid>
 800d1da:	b138      	cbz	r0, 800d1ec <_rclc_take_new_data+0x298>
 800d1dc:	6860      	ldr	r0, [r4, #4]
 800d1de:	3501      	adds	r5, #1
 800d1e0:	f886 7025 	strb.w	r7, [r6, #37]	; 0x25
 800d1e4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800d1e6:	42ab      	cmp	r3, r5
 800d1e8:	d8f0      	bhi.n	800d1cc <_rclc_take_new_data+0x278>
 800d1ea:	e729      	b.n	800d040 <_rclc_take_new_data+0xec>
 800d1ec:	6860      	ldr	r0, [r4, #4]
 800d1ee:	3501      	adds	r5, #1
 800d1f0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800d1f2:	42ab      	cmp	r3, r5
 800d1f4:	d8ea      	bhi.n	800d1cc <_rclc_take_new_data+0x278>
 800d1f6:	e723      	b.n	800d040 <_rclc_take_new_data+0xec>
 800d1f8:	ab06      	add	r3, sp, #24
 800d1fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d1fc:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800d200:	2103      	movs	r1, #3
 800d202:	6860      	ldr	r0, [r4, #4]
 800d204:	e896 000c 	ldmia.w	r6, {r2, r3}
 800d208:	f006 fb22 	bl	8013850 <rclc_action_server_goal_cancel_reject>
 800d20c:	e6c4      	b.n	800cf98 <_rclc_take_new_data+0x44>
 800d20e:	ab06      	add	r3, sp, #24
 800d210:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d212:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800d216:	2102      	movs	r1, #2
 800d218:	6860      	ldr	r0, [r4, #4]
 800d21a:	e896 000c 	ldmia.w	r6, {r2, r3}
 800d21e:	f006 fb17 	bl	8013850 <rclc_action_server_goal_cancel_reject>
 800d222:	e6b9      	b.n	800cf98 <_rclc_take_new_data+0x44>
 800d224:	6860      	ldr	r0, [r4, #4]
 800d226:	e706      	b.n	800d036 <_rclc_take_new_data+0xe2>
 800d228:	4631      	mov	r1, r6
 800d22a:	6860      	ldr	r0, [r4, #4]
 800d22c:	f006 fa32 	bl	8013694 <rclc_action_remove_used_goal_handle>
 800d230:	f000 fdae 	bl	800dd90 <rcutils_reset_error>
 800d234:	e6b0      	b.n	800cf98 <_rclc_take_new_data+0x44>
 800d236:	2501      	movs	r5, #1
 800d238:	e6ae      	b.n	800cf98 <_rclc_take_new_data+0x44>
 800d23a:	bf00      	nop

0800d23c <_rclc_execute.part.0>:
 800d23c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d23e:	7803      	ldrb	r3, [r0, #0]
 800d240:	b085      	sub	sp, #20
 800d242:	4604      	mov	r4, r0
 800d244:	2b0a      	cmp	r3, #10
 800d246:	f200 8139 	bhi.w	800d4bc <_rclc_execute.part.0+0x280>
 800d24a:	e8df f003 	tbb	[pc, r3]
 800d24e:	4268      	.short	0x4268
 800d250:	06a75b4d 	.word	0x06a75b4d
 800d254:	721d0606 	.word	0x721d0606
 800d258:	62          	.byte	0x62
 800d259:	00          	.byte	0x00
 800d25a:	2b06      	cmp	r3, #6
 800d25c:	f000 8126 	beq.w	800d4ac <_rclc_execute.part.0+0x270>
 800d260:	2b07      	cmp	r3, #7
 800d262:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800d264:	f040 811c 	bne.w	800d4a0 <_rclc_execute.part.0+0x264>
 800d268:	f104 0510 	add.w	r5, r4, #16
 800d26c:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	; 0x28
 800d270:	6880      	ldr	r0, [r0, #8]
 800d272:	4798      	blx	r3
 800d274:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800d276:	4629      	mov	r1, r5
 800d278:	6860      	ldr	r0, [r4, #4]
 800d27a:	f004 fc39 	bl	8011af0 <rcl_send_response>
 800d27e:	4604      	mov	r4, r0
 800d280:	b378      	cbz	r0, 800d2e2 <_rclc_execute.part.0+0xa6>
 800d282:	f000 fd85 	bl	800dd90 <rcutils_reset_error>
 800d286:	e02c      	b.n	800d2e2 <_rclc_execute.part.0+0xa6>
 800d288:	6840      	ldr	r0, [r0, #4]
 800d28a:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 800d28e:	2b00      	cmp	r3, #0
 800d290:	f000 808e 	beq.w	800d3b0 <_rclc_execute.part.0+0x174>
 800d294:	2600      	movs	r6, #0
 800d296:	2701      	movs	r7, #1
 800d298:	e004      	b.n	800d2a4 <_rclc_execute.part.0+0x68>
 800d29a:	f006 f9c5 	bl	8013628 <rclc_action_send_result_request>
 800d29e:	b998      	cbnz	r0, 800d2c8 <_rclc_execute.part.0+0x8c>
 800d2a0:	722f      	strb	r7, [r5, #8]
 800d2a2:	6860      	ldr	r0, [r4, #4]
 800d2a4:	f006 fa70 	bl	8013788 <rclc_action_find_first_handle_with_goal_response>
 800d2a8:	4605      	mov	r5, r0
 800d2aa:	2800      	cmp	r0, #0
 800d2ac:	d07f      	beq.n	800d3ae <_rclc_execute.part.0+0x172>
 800d2ae:	6863      	ldr	r3, [r4, #4]
 800d2b0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800d2b2:	699b      	ldr	r3, [r3, #24]
 800d2b4:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
 800d2b8:	f885 6020 	strb.w	r6, [r5, #32]
 800d2bc:	4798      	blx	r3
 800d2be:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 800d2c2:	4628      	mov	r0, r5
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d1e8      	bne.n	800d29a <_rclc_execute.part.0+0x5e>
 800d2c8:	6860      	ldr	r0, [r4, #4]
 800d2ca:	4629      	mov	r1, r5
 800d2cc:	f006 f9e2 	bl	8013694 <rclc_action_remove_used_goal_handle>
 800d2d0:	e7e7      	b.n	800d2a2 <_rclc_execute.part.0+0x66>
 800d2d2:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 800d2d6:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	; 0x2c
 800d2da:	b100      	cbz	r0, 800d2de <_rclc_execute.part.0+0xa2>
 800d2dc:	68a0      	ldr	r0, [r4, #8]
 800d2de:	2400      	movs	r4, #0
 800d2e0:	4798      	blx	r3
 800d2e2:	4620      	mov	r0, r4
 800d2e4:	b005      	add	sp, #20
 800d2e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d2e8:	6840      	ldr	r0, [r0, #4]
 800d2ea:	f004 fdf7 	bl	8011edc <rcl_timer_call>
 800d2ee:	f240 3321 	movw	r3, #801	; 0x321
 800d2f2:	4604      	mov	r4, r0
 800d2f4:	4298      	cmp	r0, r3
 800d2f6:	d001      	beq.n	800d2fc <_rclc_execute.part.0+0xc0>
 800d2f8:	2800      	cmp	r0, #0
 800d2fa:	d1c2      	bne.n	800d282 <_rclc_execute.part.0+0x46>
 800d2fc:	2400      	movs	r4, #0
 800d2fe:	4620      	mov	r0, r4
 800d300:	b005      	add	sp, #20
 800d302:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d304:	2400      	movs	r4, #0
 800d306:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800d308:	6880      	ldr	r0, [r0, #8]
 800d30a:	4798      	blx	r3
 800d30c:	4620      	mov	r0, r4
 800d30e:	b005      	add	sp, #20
 800d310:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d312:	2400      	movs	r4, #0
 800d314:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800d316:	4798      	blx	r3
 800d318:	4620      	mov	r0, r4
 800d31a:	b005      	add	sp, #20
 800d31c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d31e:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 800d322:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800d324:	b100      	cbz	r0, 800d328 <_rclc_execute.part.0+0xec>
 800d326:	68a0      	ldr	r0, [r4, #8]
 800d328:	2400      	movs	r4, #0
 800d32a:	4798      	blx	r3
 800d32c:	4620      	mov	r0, r4
 800d32e:	b005      	add	sp, #20
 800d330:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d332:	6840      	ldr	r0, [r0, #4]
 800d334:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800d338:	bb3b      	cbnz	r3, 800d38a <_rclc_execute.part.0+0x14e>
 800d33a:	f890 3020 	ldrb.w	r3, [r0, #32]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d07d      	beq.n	800d43e <_rclc_execute.part.0+0x202>
 800d342:	f640 0634 	movw	r6, #2100	; 0x834
 800d346:	2701      	movs	r7, #1
 800d348:	e007      	b.n	800d35a <_rclc_execute.part.0+0x11e>
 800d34a:	4628      	mov	r0, r5
 800d34c:	f006 fa34 	bl	80137b8 <rclc_action_server_response_goal_request>
 800d350:	4629      	mov	r1, r5
 800d352:	6860      	ldr	r0, [r4, #4]
 800d354:	f006 f99e 	bl	8013694 <rclc_action_remove_used_goal_handle>
 800d358:	6860      	ldr	r0, [r4, #4]
 800d35a:	2100      	movs	r1, #0
 800d35c:	f006 f9c6 	bl	80136ec <rclc_action_find_first_handle_by_status>
 800d360:	4605      	mov	r5, r0
 800d362:	2800      	cmp	r0, #0
 800d364:	d068      	beq.n	800d438 <_rclc_execute.part.0+0x1fc>
 800d366:	6863      	ldr	r3, [r4, #4]
 800d368:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800d36a:	699b      	ldr	r3, [r3, #24]
 800d36c:	4798      	blx	r3
 800d36e:	42b0      	cmp	r0, r6
 800d370:	f04f 0100 	mov.w	r1, #0
 800d374:	d1e9      	bne.n	800d34a <_rclc_execute.part.0+0x10e>
 800d376:	2101      	movs	r1, #1
 800d378:	4628      	mov	r0, r5
 800d37a:	f006 fa1d 	bl	80137b8 <rclc_action_server_response_goal_request>
 800d37e:	722f      	strb	r7, [r5, #8]
 800d380:	e7ea      	b.n	800d358 <_rclc_execute.part.0+0x11c>
 800d382:	6848      	ldr	r0, [r1, #4]
 800d384:	f006 f986 	bl	8013694 <rclc_action_remove_used_goal_handle>
 800d388:	6860      	ldr	r0, [r4, #4]
 800d38a:	f006 f9bb 	bl	8013704 <rclc_action_find_first_terminated_handle>
 800d38e:	4601      	mov	r1, r0
 800d390:	2800      	cmp	r0, #0
 800d392:	d1f6      	bne.n	800d382 <_rclc_execute.part.0+0x146>
 800d394:	6860      	ldr	r0, [r4, #4]
 800d396:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 800d39a:	e7ce      	b.n	800d33a <_rclc_execute.part.0+0xfe>
 800d39c:	2400      	movs	r4, #0
 800d39e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800d3a0:	f100 0110 	add.w	r1, r0, #16
 800d3a4:	6880      	ldr	r0, [r0, #8]
 800d3a6:	4798      	blx	r3
 800d3a8:	4620      	mov	r0, r4
 800d3aa:	b005      	add	sp, #20
 800d3ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d3ae:	6860      	ldr	r0, [r4, #4]
 800d3b0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800d3b4:	b18b      	cbz	r3, 800d3da <_rclc_execute.part.0+0x19e>
 800d3b6:	68c5      	ldr	r5, [r0, #12]
 800d3b8:	b32d      	cbz	r5, 800d406 <_rclc_execute.part.0+0x1ca>
 800d3ba:	2600      	movs	r6, #0
 800d3bc:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 800d3c0:	b143      	cbz	r3, 800d3d4 <_rclc_execute.part.0+0x198>
 800d3c2:	69c3      	ldr	r3, [r0, #28]
 800d3c4:	f885 6022 	strb.w	r6, [r5, #34]	; 0x22
 800d3c8:	b123      	cbz	r3, 800d3d4 <_rclc_execute.part.0+0x198>
 800d3ca:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800d3cc:	4628      	mov	r0, r5
 800d3ce:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800d3d0:	4798      	blx	r3
 800d3d2:	6860      	ldr	r0, [r4, #4]
 800d3d4:	682d      	ldr	r5, [r5, #0]
 800d3d6:	2d00      	cmp	r5, #0
 800d3d8:	d1f0      	bne.n	800d3bc <_rclc_execute.part.0+0x180>
 800d3da:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800d3de:	b193      	cbz	r3, 800d406 <_rclc_execute.part.0+0x1ca>
 800d3e0:	68c5      	ldr	r5, [r0, #12]
 800d3e2:	b185      	cbz	r5, 800d406 <_rclc_execute.part.0+0x1ca>
 800d3e4:	2600      	movs	r6, #0
 800d3e6:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 800d3ea:	b14b      	cbz	r3, 800d400 <_rclc_execute.part.0+0x1c4>
 800d3ec:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800d3ee:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
 800d3f2:	b12b      	cbz	r3, 800d400 <_rclc_execute.part.0+0x1c4>
 800d3f4:	4628      	mov	r0, r5
 800d3f6:	f895 1025 	ldrb.w	r1, [r5, #37]	; 0x25
 800d3fa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800d3fc:	4798      	blx	r3
 800d3fe:	6860      	ldr	r0, [r4, #4]
 800d400:	682d      	ldr	r5, [r5, #0]
 800d402:	2d00      	cmp	r5, #0
 800d404:	d1ef      	bne.n	800d3e6 <_rclc_execute.part.0+0x1aa>
 800d406:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	f43f af76 	beq.w	800d2fc <_rclc_execute.part.0+0xc0>
 800d410:	2700      	movs	r7, #0
 800d412:	e00b      	b.n	800d42c <_rclc_execute.part.0+0x1f0>
 800d414:	6863      	ldr	r3, [r4, #4]
 800d416:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800d418:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800d41a:	6a1e      	ldr	r6, [r3, #32]
 800d41c:	f885 7023 	strb.w	r7, [r5, #35]	; 0x23
 800d420:	47b0      	blx	r6
 800d422:	6860      	ldr	r0, [r4, #4]
 800d424:	4629      	mov	r1, r5
 800d426:	f006 f935 	bl	8013694 <rclc_action_remove_used_goal_handle>
 800d42a:	6860      	ldr	r0, [r4, #4]
 800d42c:	f006 f9b8 	bl	80137a0 <rclc_action_find_first_handle_with_result_response>
 800d430:	4605      	mov	r5, r0
 800d432:	2800      	cmp	r0, #0
 800d434:	d1ee      	bne.n	800d414 <_rclc_execute.part.0+0x1d8>
 800d436:	e761      	b.n	800d2fc <_rclc_execute.part.0+0xc0>
 800d438:	6860      	ldr	r0, [r4, #4]
 800d43a:	f880 5020 	strb.w	r5, [r0, #32]
 800d43e:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800d442:	2b00      	cmp	r3, #0
 800d444:	f43f af5a 	beq.w	800d2fc <_rclc_execute.part.0+0xc0>
 800d448:	68c5      	ldr	r5, [r0, #12]
 800d44a:	b1b5      	cbz	r5, 800d47a <_rclc_execute.part.0+0x23e>
 800d44c:	2602      	movs	r6, #2
 800d44e:	e001      	b.n	800d454 <_rclc_execute.part.0+0x218>
 800d450:	682d      	ldr	r5, [r5, #0]
 800d452:	b195      	cbz	r5, 800d47a <_rclc_execute.part.0+0x23e>
 800d454:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800d458:	2b03      	cmp	r3, #3
 800d45a:	d1f9      	bne.n	800d450 <_rclc_execute.part.0+0x214>
 800d45c:	69c3      	ldr	r3, [r0, #28]
 800d45e:	4628      	mov	r0, r5
 800d460:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800d462:	4798      	blx	r3
 800d464:	4603      	mov	r3, r0
 800d466:	f105 0260 	add.w	r2, r5, #96	; 0x60
 800d46a:	4628      	mov	r0, r5
 800d46c:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 800d470:	b143      	cbz	r3, 800d484 <_rclc_execute.part.0+0x248>
 800d472:	f006 f9c1 	bl	80137f8 <rclc_action_server_goal_cancel_accept>
 800d476:	6860      	ldr	r0, [r4, #4]
 800d478:	e7ea      	b.n	800d450 <_rclc_execute.part.0+0x214>
 800d47a:	2300      	movs	r3, #0
 800d47c:	461c      	mov	r4, r3
 800d47e:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
 800d482:	e72e      	b.n	800d2e2 <_rclc_execute.part.0+0xa6>
 800d484:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800d486:	f105 0758 	add.w	r7, r5, #88	; 0x58
 800d48a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800d48e:	2101      	movs	r1, #1
 800d490:	6860      	ldr	r0, [r4, #4]
 800d492:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d496:	f006 f9db 	bl	8013850 <rclc_action_server_goal_cancel_reject>
 800d49a:	722e      	strb	r6, [r5, #8]
 800d49c:	6860      	ldr	r0, [r4, #4]
 800d49e:	e7d7      	b.n	800d450 <_rclc_execute.part.0+0x214>
 800d4a0:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800d4a2:	f104 0510 	add.w	r5, r4, #16
 800d4a6:	6880      	ldr	r0, [r0, #8]
 800d4a8:	4798      	blx	r3
 800d4aa:	e6e3      	b.n	800d274 <_rclc_execute.part.0+0x38>
 800d4ac:	f100 0510 	add.w	r5, r0, #16
 800d4b0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800d4b2:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800d4b4:	4629      	mov	r1, r5
 800d4b6:	6880      	ldr	r0, [r0, #8]
 800d4b8:	4798      	blx	r3
 800d4ba:	e6db      	b.n	800d274 <_rclc_execute.part.0+0x38>
 800d4bc:	2401      	movs	r4, #1
 800d4be:	e710      	b.n	800d2e2 <_rclc_execute.part.0+0xa6>

0800d4c0 <rclc_executor_trigger_any>:
 800d4c0:	2800      	cmp	r0, #0
 800d4c2:	d03d      	beq.n	800d540 <rclc_executor_trigger_any+0x80>
 800d4c4:	2900      	cmp	r1, #0
 800d4c6:	d03c      	beq.n	800d542 <rclc_executor_trigger_any+0x82>
 800d4c8:	4603      	mov	r3, r0
 800d4ca:	f890 0038 	ldrb.w	r0, [r0, #56]	; 0x38
 800d4ce:	2200      	movs	r2, #0
 800d4d0:	2800      	cmp	r0, #0
 800d4d2:	d035      	beq.n	800d540 <rclc_executor_trigger_any+0x80>
 800d4d4:	b430      	push	{r4, r5}
 800d4d6:	f893 c000 	ldrb.w	ip, [r3]
 800d4da:	f1bc 0f08 	cmp.w	ip, #8
 800d4de:	d11d      	bne.n	800d51c <rclc_executor_trigger_any+0x5c>
 800d4e0:	685c      	ldr	r4, [r3, #4]
 800d4e2:	6c25      	ldr	r5, [r4, #64]	; 0x40
 800d4e4:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 800d4e8:	d105      	bne.n	800d4f6 <rclc_executor_trigger_any+0x36>
 800d4ea:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 800d4ee:	b910      	cbnz	r0, 800d4f6 <rclc_executor_trigger_any+0x36>
 800d4f0:	f894 0043 	ldrb.w	r0, [r4, #67]	; 0x43
 800d4f4:	b128      	cbz	r0, 800d502 <rclc_executor_trigger_any+0x42>
 800d4f6:	bc30      	pop	{r4, r5}
 800d4f8:	4770      	bx	lr
 800d4fa:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
 800d4fe:	2800      	cmp	r0, #0
 800d500:	d1f9      	bne.n	800d4f6 <rclc_executor_trigger_any+0x36>
 800d502:	3201      	adds	r2, #1
 800d504:	3340      	adds	r3, #64	; 0x40
 800d506:	4291      	cmp	r1, r2
 800d508:	d017      	beq.n	800d53a <rclc_executor_trigger_any+0x7a>
 800d50a:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
 800d50e:	2800      	cmp	r0, #0
 800d510:	d0f1      	beq.n	800d4f6 <rclc_executor_trigger_any+0x36>
 800d512:	f893 c000 	ldrb.w	ip, [r3]
 800d516:	f1bc 0f08 	cmp.w	ip, #8
 800d51a:	d0e1      	beq.n	800d4e0 <rclc_executor_trigger_any+0x20>
 800d51c:	f1bc 0f09 	cmp.w	ip, #9
 800d520:	d1eb      	bne.n	800d4fa <rclc_executor_trigger_any+0x3a>
 800d522:	685c      	ldr	r4, [r3, #4]
 800d524:	6a25      	ldr	r5, [r4, #32]
 800d526:	2d00      	cmp	r5, #0
 800d528:	d1e5      	bne.n	800d4f6 <rclc_executor_trigger_any+0x36>
 800d52a:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 800d52e:	2800      	cmp	r0, #0
 800d530:	d1e1      	bne.n	800d4f6 <rclc_executor_trigger_any+0x36>
 800d532:	3201      	adds	r2, #1
 800d534:	3340      	adds	r3, #64	; 0x40
 800d536:	4291      	cmp	r1, r2
 800d538:	d1e7      	bne.n	800d50a <rclc_executor_trigger_any+0x4a>
 800d53a:	2000      	movs	r0, #0
 800d53c:	bc30      	pop	{r4, r5}
 800d53e:	4770      	bx	lr
 800d540:	4770      	bx	lr
 800d542:	4608      	mov	r0, r1
 800d544:	4770      	bx	lr
 800d546:	bf00      	nop

0800d548 <rclc_executor_get_zero_initialized_executor>:
 800d548:	b510      	push	{r4, lr}
 800d54a:	4604      	mov	r4, r0
 800d54c:	2290      	movs	r2, #144	; 0x90
 800d54e:	4902      	ldr	r1, [pc, #8]	; (800d558 <rclc_executor_get_zero_initialized_executor+0x10>)
 800d550:	f00e f88d 	bl	801b66e <memcpy>
 800d554:	4620      	mov	r0, r4
 800d556:	bd10      	pop	{r4, pc}
 800d558:	0801cdc8 	.word	0x0801cdc8
 800d55c:	00000000 	.word	0x00000000

0800d560 <rclc_executor_init>:
 800d560:	2900      	cmp	r1, #0
 800d562:	d06a      	beq.n	800d63a <rclc_executor_init+0xda>
 800d564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d568:	4605      	mov	r5, r0
 800d56a:	b0b2      	sub	sp, #200	; 0xc8
 800d56c:	2800      	cmp	r0, #0
 800d56e:	d05c      	beq.n	800d62a <rclc_executor_init+0xca>
 800d570:	4616      	mov	r6, r2
 800d572:	4618      	mov	r0, r3
 800d574:	4688      	mov	r8, r1
 800d576:	461f      	mov	r7, r3
 800d578:	f000 fbe6 	bl	800dd48 <rcutils_allocator_is_valid>
 800d57c:	2e00      	cmp	r6, #0
 800d57e:	d054      	beq.n	800d62a <rclc_executor_init+0xca>
 800d580:	f080 0401 	eor.w	r4, r0, #1
 800d584:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 800d588:	d14f      	bne.n	800d62a <rclc_executor_init+0xca>
 800d58a:	2290      	movs	r2, #144	; 0x90
 800d58c:	4930      	ldr	r1, [pc, #192]	; (800d650 <rclc_executor_init+0xf0>)
 800d58e:	a80e      	add	r0, sp, #56	; 0x38
 800d590:	f00e f86d 	bl	801b66e <memcpy>
 800d594:	a90e      	add	r1, sp, #56	; 0x38
 800d596:	2290      	movs	r2, #144	; 0x90
 800d598:	4628      	mov	r0, r5
 800d59a:	f00e f868 	bl	801b66e <memcpy>
 800d59e:	4668      	mov	r0, sp
 800d5a0:	f8c5 8004 	str.w	r8, [r5, #4]
 800d5a4:	60ee      	str	r6, [r5, #12]
 800d5a6:	f004 fe0f 	bl	80121c8 <rcl_get_zero_initialized_wait_set>
 800d5aa:	46ec      	mov	ip, sp
 800d5ac:	f105 0e18 	add.w	lr, r5, #24
 800d5b0:	f8d7 8000 	ldr.w	r8, [r7]
 800d5b4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d5b8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d5bc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d5c0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d5c4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d5c8:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 800d648 <rclc_executor_init+0xe8>
 800d5cc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d5d0:	f8dc 3000 	ldr.w	r3, [ip]
 800d5d4:	01b0      	lsls	r0, r6, #6
 800d5d6:	6939      	ldr	r1, [r7, #16]
 800d5d8:	f8ce 3000 	str.w	r3, [lr]
 800d5dc:	616f      	str	r7, [r5, #20]
 800d5de:	ed85 7b1c 	vstr	d7, [r5, #112]	; 0x70
 800d5e2:	47c0      	blx	r8
 800d5e4:	60a8      	str	r0, [r5, #8]
 800d5e6:	b908      	cbnz	r0, 800d5ec <rclc_executor_init+0x8c>
 800d5e8:	e029      	b.n	800d63e <rclc_executor_init+0xde>
 800d5ea:	68a8      	ldr	r0, [r5, #8]
 800d5ec:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800d5f0:	3401      	adds	r4, #1
 800d5f2:	4631      	mov	r1, r6
 800d5f4:	f000 fa88 	bl	800db08 <rclc_executor_handle_init>
 800d5f8:	42a6      	cmp	r6, r4
 800d5fa:	d8f6      	bhi.n	800d5ea <rclc_executor_init+0x8a>
 800d5fc:	f105 004c 	add.w	r0, r5, #76	; 0x4c
 800d600:	f000 fa78 	bl	800daf4 <rclc_executor_handle_counters_zero_init>
 800d604:	4a13      	ldr	r2, [pc, #76]	; (800d654 <rclc_executor_init+0xf4>)
 800d606:	2300      	movs	r3, #0
 800d608:	68a8      	ldr	r0, [r5, #8]
 800d60a:	e9c5 2320 	strd	r2, r3, [r5, #128]	; 0x80
 800d60e:	b168      	cbz	r0, 800d62c <rclc_executor_init+0xcc>
 800d610:	68eb      	ldr	r3, [r5, #12]
 800d612:	b173      	cbz	r3, 800d632 <rclc_executor_init+0xd2>
 800d614:	696a      	ldr	r2, [r5, #20]
 800d616:	fab2 f382 	clz	r3, r2
 800d61a:	095b      	lsrs	r3, r3, #5
 800d61c:	b14a      	cbz	r2, 800d632 <rclc_executor_init+0xd2>
 800d61e:	4618      	mov	r0, r3
 800d620:	f885 3088 	strb.w	r3, [r5, #136]	; 0x88
 800d624:	b032      	add	sp, #200	; 0xc8
 800d626:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d62a:	200b      	movs	r0, #11
 800d62c:	b032      	add	sp, #200	; 0xc8
 800d62e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d632:	2000      	movs	r0, #0
 800d634:	b032      	add	sp, #200	; 0xc8
 800d636:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d63a:	200b      	movs	r0, #11
 800d63c:	4770      	bx	lr
 800d63e:	200a      	movs	r0, #10
 800d640:	e7f4      	b.n	800d62c <rclc_executor_init+0xcc>
 800d642:	bf00      	nop
 800d644:	f3af 8000 	nop.w
 800d648:	3b9aca00 	.word	0x3b9aca00
 800d64c:	00000000 	.word	0x00000000
 800d650:	0801cdc8 	.word	0x0801cdc8
 800d654:	0800d4c1 	.word	0x0800d4c1

0800d658 <rclc_executor_add_service>:
 800d658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d65a:	9d06      	ldr	r5, [sp, #24]
 800d65c:	4604      	mov	r4, r0
 800d65e:	2b00      	cmp	r3, #0
 800d660:	bf18      	it	ne
 800d662:	2d00      	cmpne	r5, #0
 800d664:	bf0c      	ite	eq
 800d666:	2001      	moveq	r0, #1
 800d668:	2000      	movne	r0, #0
 800d66a:	2a00      	cmp	r2, #0
 800d66c:	bf08      	it	eq
 800d66e:	f040 0001 	orreq.w	r0, r0, #1
 800d672:	2900      	cmp	r1, #0
 800d674:	bf08      	it	eq
 800d676:	f040 0001 	orreq.w	r0, r0, #1
 800d67a:	bb40      	cbnz	r0, 800d6ce <rclc_executor_add_service+0x76>
 800d67c:	fab4 f684 	clz	r6, r4
 800d680:	0976      	lsrs	r6, r6, #5
 800d682:	b324      	cbz	r4, 800d6ce <rclc_executor_add_service+0x76>
 800d684:	e9d4 7003 	ldrd	r7, r0, [r4, #12]
 800d688:	42b8      	cmp	r0, r7
 800d68a:	d301      	bcc.n	800d690 <rclc_executor_add_service+0x38>
 800d68c:	2001      	movs	r0, #1
 800d68e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d690:	68a7      	ldr	r7, [r4, #8]
 800d692:	ea4f 1e80 	mov.w	lr, r0, lsl #6
 800d696:	f100 0c01 	add.w	ip, r0, #1
 800d69a:	eb07 1080 	add.w	r0, r7, r0, lsl #6
 800d69e:	6283      	str	r3, [r0, #40]	; 0x28
 800d6a0:	2305      	movs	r3, #5
 800d6a2:	6305      	str	r5, [r0, #48]	; 0x30
 800d6a4:	f104 0518 	add.w	r5, r4, #24
 800d6a8:	e9c0 1201 	strd	r1, r2, [r0, #4]
 800d6ac:	f827 300e 	strh.w	r3, [r7, lr]
 800d6b0:	2301      	movs	r3, #1
 800d6b2:	62c6      	str	r6, [r0, #44]	; 0x2c
 800d6b4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 800d6b8:	4628      	mov	r0, r5
 800d6ba:	f8c4 c010 	str.w	ip, [r4, #16]
 800d6be:	f004 fd97 	bl	80121f0 <rcl_wait_set_is_valid>
 800d6c2:	b930      	cbnz	r0, 800d6d2 <rclc_executor_add_service+0x7a>
 800d6c4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d6c6:	2000      	movs	r0, #0
 800d6c8:	3301      	adds	r3, #1
 800d6ca:	65a3      	str	r3, [r4, #88]	; 0x58
 800d6cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d6ce:	200b      	movs	r0, #11
 800d6d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d6d2:	4628      	mov	r0, r5
 800d6d4:	f004 fd92 	bl	80121fc <rcl_wait_set_fini>
 800d6d8:	2800      	cmp	r0, #0
 800d6da:	d0f3      	beq.n	800d6c4 <rclc_executor_add_service+0x6c>
 800d6dc:	e7d7      	b.n	800d68e <rclc_executor_add_service+0x36>
 800d6de:	bf00      	nop

0800d6e0 <rclc_executor_prepare>:
 800d6e0:	2800      	cmp	r0, #0
 800d6e2:	d044      	beq.n	800d76e <rclc_executor_prepare+0x8e>
 800d6e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d6e6:	f100 0518 	add.w	r5, r0, #24
 800d6ea:	b09b      	sub	sp, #108	; 0x6c
 800d6ec:	4604      	mov	r4, r0
 800d6ee:	4628      	mov	r0, r5
 800d6f0:	f004 fd7e 	bl	80121f0 <rcl_wait_set_is_valid>
 800d6f4:	b110      	cbz	r0, 800d6fc <rclc_executor_prepare+0x1c>
 800d6f6:	2000      	movs	r0, #0
 800d6f8:	b01b      	add	sp, #108	; 0x6c
 800d6fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d6fc:	4628      	mov	r0, r5
 800d6fe:	f004 fd7d 	bl	80121fc <rcl_wait_set_fini>
 800d702:	2800      	cmp	r0, #0
 800d704:	d130      	bne.n	800d768 <rclc_executor_prepare+0x88>
 800d706:	a80c      	add	r0, sp, #48	; 0x30
 800d708:	ae04      	add	r6, sp, #16
 800d70a:	f004 fd5d 	bl	80121c8 <rcl_get_zero_initialized_wait_set>
 800d70e:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 800d712:	46ae      	mov	lr, r5
 800d714:	6967      	ldr	r7, [r4, #20]
 800d716:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d71a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d71e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d722:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d726:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d72a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d72e:	f8dc 3000 	ldr.w	r3, [ip]
 800d732:	f8ce 3000 	str.w	r3, [lr]
 800d736:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d738:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800d73a:	683b      	ldr	r3, [r7, #0]
 800d73c:	4628      	mov	r0, r5
 800d73e:	6862      	ldr	r2, [r4, #4]
 800d740:	6033      	str	r3, [r6, #0]
 800d742:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800d744:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800d746:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800d74a:	e9d4 3214 	ldrd	r3, r2, [r4, #80]	; 0x50
 800d74e:	e9cd 2100 	strd	r2, r1, [sp]
 800d752:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d754:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800d756:	f005 f851 	bl	80127fc <rcl_wait_set_init>
 800d75a:	2800      	cmp	r0, #0
 800d75c:	d0cc      	beq.n	800d6f8 <rclc_executor_prepare+0x18>
 800d75e:	900b      	str	r0, [sp, #44]	; 0x2c
 800d760:	f000 fb16 	bl	800dd90 <rcutils_reset_error>
 800d764:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800d766:	e7c7      	b.n	800d6f8 <rclc_executor_prepare+0x18>
 800d768:	f000 fb12 	bl	800dd90 <rcutils_reset_error>
 800d76c:	e7cb      	b.n	800d706 <rclc_executor_prepare+0x26>
 800d76e:	200b      	movs	r0, #11
 800d770:	4770      	bx	lr
 800d772:	bf00      	nop

0800d774 <rclc_executor_spin_some.part.0>:
 800d774:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d778:	4605      	mov	r5, r0
 800d77a:	4691      	mov	r9, r2
 800d77c:	4698      	mov	r8, r3
 800d77e:	f7ff ffaf 	bl	800d6e0 <rclc_executor_prepare>
 800d782:	f105 0618 	add.w	r6, r5, #24
 800d786:	4630      	mov	r0, r6
 800d788:	f004 fe04 	bl	8012394 <rcl_wait_set_clear>
 800d78c:	4607      	mov	r7, r0
 800d78e:	2800      	cmp	r0, #0
 800d790:	f040 80a8 	bne.w	800d8e4 <rclc_executor_spin_some.part.0+0x170>
 800d794:	68eb      	ldr	r3, [r5, #12]
 800d796:	b30b      	cbz	r3, 800d7dc <rclc_executor_spin_some.part.0+0x68>
 800d798:	4604      	mov	r4, r0
 800d79a:	68a9      	ldr	r1, [r5, #8]
 800d79c:	01a2      	lsls	r2, r4, #6
 800d79e:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800d7a2:	f89c 3038 	ldrb.w	r3, [ip, #56]	; 0x38
 800d7a6:	b1cb      	cbz	r3, 800d7dc <rclc_executor_spin_some.part.0+0x68>
 800d7a8:	5c8b      	ldrb	r3, [r1, r2]
 800d7aa:	2b0a      	cmp	r3, #10
 800d7ac:	f200 80de 	bhi.w	800d96c <rclc_executor_spin_some.part.0+0x1f8>
 800d7b0:	e8df f003 	tbb	[pc, r3]
 800d7b4:	8da99d9d 	.word	0x8da99d9d
 800d7b8:	0606068d 	.word	0x0606068d
 800d7bc:	c1ce      	.short	0xc1ce
 800d7be:	b5          	.byte	0xb5
 800d7bf:	00          	.byte	0x00
 800d7c0:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800d7c4:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d7c8:	4630      	mov	r0, r6
 800d7ca:	f005 f933 	bl	8012a34 <rcl_wait_set_add_service>
 800d7ce:	2800      	cmp	r0, #0
 800d7d0:	f040 8087 	bne.w	800d8e2 <rclc_executor_spin_some.part.0+0x16e>
 800d7d4:	3401      	adds	r4, #1
 800d7d6:	68eb      	ldr	r3, [r5, #12]
 800d7d8:	429c      	cmp	r4, r3
 800d7da:	d3de      	bcc.n	800d79a <rclc_executor_spin_some.part.0+0x26>
 800d7dc:	4643      	mov	r3, r8
 800d7de:	464a      	mov	r2, r9
 800d7e0:	4630      	mov	r0, r6
 800d7e2:	f005 f955 	bl	8012a90 <rcl_wait>
 800d7e6:	f895 3088 	ldrb.w	r3, [r5, #136]	; 0x88
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	f000 80c6 	beq.w	800d97c <rclc_executor_spin_some.part.0+0x208>
 800d7f0:	2b01      	cmp	r3, #1
 800d7f2:	f040 80bb 	bne.w	800d96c <rclc_executor_spin_some.part.0+0x1f8>
 800d7f6:	68eb      	ldr	r3, [r5, #12]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	f000 8159 	beq.w	800dab0 <rclc_executor_spin_some.part.0+0x33c>
 800d7fe:	2400      	movs	r4, #0
 800d800:	f240 1991 	movw	r9, #401	; 0x191
 800d804:	46a0      	mov	r8, r4
 800d806:	e00a      	b.n	800d81e <rclc_executor_spin_some.part.0+0xaa>
 800d808:	f7ff fb56 	bl	800ceb8 <_rclc_check_for_new_data>
 800d80c:	4604      	mov	r4, r0
 800d80e:	b110      	cbz	r0, 800d816 <rclc_executor_spin_some.part.0+0xa2>
 800d810:	4548      	cmp	r0, r9
 800d812:	f040 80b1 	bne.w	800d978 <rclc_executor_spin_some.part.0+0x204>
 800d816:	68eb      	ldr	r3, [r5, #12]
 800d818:	4598      	cmp	r8, r3
 800d81a:	f080 8126 	bcs.w	800da6a <rclc_executor_spin_some.part.0+0x2f6>
 800d81e:	68aa      	ldr	r2, [r5, #8]
 800d820:	4631      	mov	r1, r6
 800d822:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800d826:	f108 0801 	add.w	r8, r8, #1
 800d82a:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 800d82e:	f1bc 0f00 	cmp.w	ip, #0
 800d832:	d1e9      	bne.n	800d808 <rclc_executor_spin_some.part.0+0x94>
 800d834:	4619      	mov	r1, r3
 800d836:	4610      	mov	r0, r2
 800d838:	e9d5 3220 	ldrd	r3, r2, [r5, #128]	; 0x80
 800d83c:	4798      	blx	r3
 800d83e:	2800      	cmp	r0, #0
 800d840:	f000 809a 	beq.w	800d978 <rclc_executor_spin_some.part.0+0x204>
 800d844:	68eb      	ldr	r3, [r5, #12]
 800d846:	2b00      	cmp	r3, #0
 800d848:	f000 8096 	beq.w	800d978 <rclc_executor_spin_some.part.0+0x204>
 800d84c:	f04f 0800 	mov.w	r8, #0
 800d850:	f240 1991 	movw	r9, #401	; 0x191
 800d854:	e009      	b.n	800d86a <rclc_executor_spin_some.part.0+0xf6>
 800d856:	f7ff fb7d 	bl	800cf54 <_rclc_take_new_data>
 800d85a:	4604      	mov	r4, r0
 800d85c:	b110      	cbz	r0, 800d864 <rclc_executor_spin_some.part.0+0xf0>
 800d85e:	4548      	cmp	r0, r9
 800d860:	f040 808a 	bne.w	800d978 <rclc_executor_spin_some.part.0+0x204>
 800d864:	68eb      	ldr	r3, [r5, #12]
 800d866:	4598      	cmp	r8, r3
 800d868:	d209      	bcs.n	800d87e <rclc_executor_spin_some.part.0+0x10a>
 800d86a:	68a8      	ldr	r0, [r5, #8]
 800d86c:	4631      	mov	r1, r6
 800d86e:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800d872:	f108 0801 	add.w	r8, r8, #1
 800d876:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 800d87a:	2a00      	cmp	r2, #0
 800d87c:	d1eb      	bne.n	800d856 <rclc_executor_spin_some.part.0+0xe2>
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d07a      	beq.n	800d978 <rclc_executor_spin_some.part.0+0x204>
 800d882:	2600      	movs	r6, #0
 800d884:	e00e      	b.n	800d8a4 <rclc_executor_spin_some.part.0+0x130>
 800d886:	f812 200c 	ldrb.w	r2, [r2, ip]
 800d88a:	2a08      	cmp	r2, #8
 800d88c:	f000 80fc 	beq.w	800da88 <rclc_executor_spin_some.part.0+0x314>
 800d890:	2a09      	cmp	r2, #9
 800d892:	f000 80ee 	beq.w	800da72 <rclc_executor_spin_some.part.0+0x2fe>
 800d896:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
 800d89a:	b98a      	cbnz	r2, 800d8c0 <rclc_executor_spin_some.part.0+0x14c>
 800d89c:	3601      	adds	r6, #1
 800d89e:	429e      	cmp	r6, r3
 800d8a0:	d267      	bcs.n	800d972 <rclc_executor_spin_some.part.0+0x1fe>
 800d8a2:	2400      	movs	r4, #0
 800d8a4:	68aa      	ldr	r2, [r5, #8]
 800d8a6:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800d8aa:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800d8ae:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
 800d8b2:	2900      	cmp	r1, #0
 800d8b4:	d060      	beq.n	800d978 <rclc_executor_spin_some.part.0+0x204>
 800d8b6:	7841      	ldrb	r1, [r0, #1]
 800d8b8:	2900      	cmp	r1, #0
 800d8ba:	d0e4      	beq.n	800d886 <rclc_executor_spin_some.part.0+0x112>
 800d8bc:	2901      	cmp	r1, #1
 800d8be:	d1ed      	bne.n	800d89c <rclc_executor_spin_some.part.0+0x128>
 800d8c0:	f7ff fcbc 	bl	800d23c <_rclc_execute.part.0>
 800d8c4:	2800      	cmp	r0, #0
 800d8c6:	f040 80b5 	bne.w	800da34 <rclc_executor_spin_some.part.0+0x2c0>
 800d8ca:	68eb      	ldr	r3, [r5, #12]
 800d8cc:	e7e6      	b.n	800d89c <rclc_executor_spin_some.part.0+0x128>
 800d8ce:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800d8d2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d8d6:	4630      	mov	r0, r6
 800d8d8:	f005 f880 	bl	80129dc <rcl_wait_set_add_client>
 800d8dc:	2800      	cmp	r0, #0
 800d8de:	f43f af79 	beq.w	800d7d4 <rclc_executor_spin_some.part.0+0x60>
 800d8e2:	4607      	mov	r7, r0
 800d8e4:	f000 fa54 	bl	800dd90 <rcutils_reset_error>
 800d8e8:	4638      	mov	r0, r7
 800d8ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8ee:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800d8f2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d8f6:	4630      	mov	r0, r6
 800d8f8:	f004 fd20 	bl	801233c <rcl_wait_set_add_subscription>
 800d8fc:	2800      	cmp	r0, #0
 800d8fe:	f43f af69 	beq.w	800d7d4 <rclc_executor_spin_some.part.0+0x60>
 800d902:	4607      	mov	r7, r0
 800d904:	e7ee      	b.n	800d8e4 <rclc_executor_spin_some.part.0+0x170>
 800d906:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800d90a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d90e:	4630      	mov	r0, r6
 800d910:	f005 f834 	bl	801297c <rcl_wait_set_add_timer>
 800d914:	2800      	cmp	r0, #0
 800d916:	f43f af5d 	beq.w	800d7d4 <rclc_executor_spin_some.part.0+0x60>
 800d91a:	4607      	mov	r7, r0
 800d91c:	e7e2      	b.n	800d8e4 <rclc_executor_spin_some.part.0+0x170>
 800d91e:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800d922:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d926:	4630      	mov	r0, r6
 800d928:	f004 fffc 	bl	8012924 <rcl_wait_set_add_guard_condition>
 800d92c:	2800      	cmp	r0, #0
 800d92e:	f43f af51 	beq.w	800d7d4 <rclc_executor_spin_some.part.0+0x60>
 800d932:	4607      	mov	r7, r0
 800d934:	e7d6      	b.n	800d8e4 <rclc_executor_spin_some.part.0+0x170>
 800d936:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d93a:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800d93e:	4630      	mov	r0, r6
 800d940:	3110      	adds	r1, #16
 800d942:	f005 fd79 	bl	8013438 <rcl_action_wait_set_add_action_server>
 800d946:	2800      	cmp	r0, #0
 800d948:	f43f af44 	beq.w	800d7d4 <rclc_executor_spin_some.part.0+0x60>
 800d94c:	4607      	mov	r7, r0
 800d94e:	e7c9      	b.n	800d8e4 <rclc_executor_spin_some.part.0+0x170>
 800d950:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d954:	2300      	movs	r3, #0
 800d956:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800d95a:	4630      	mov	r0, r6
 800d95c:	3110      	adds	r1, #16
 800d95e:	f005 fb43 	bl	8012fe8 <rcl_action_wait_set_add_action_client>
 800d962:	2800      	cmp	r0, #0
 800d964:	f43f af36 	beq.w	800d7d4 <rclc_executor_spin_some.part.0+0x60>
 800d968:	4607      	mov	r7, r0
 800d96a:	e7bb      	b.n	800d8e4 <rclc_executor_spin_some.part.0+0x170>
 800d96c:	2701      	movs	r7, #1
 800d96e:	f000 fa0f 	bl	800dd90 <rcutils_reset_error>
 800d972:	4638      	mov	r0, r7
 800d974:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d978:	4627      	mov	r7, r4
 800d97a:	e7fa      	b.n	800d972 <rclc_executor_spin_some.part.0+0x1fe>
 800d97c:	68eb      	ldr	r3, [r5, #12]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	f000 8093 	beq.w	800daaa <rclc_executor_spin_some.part.0+0x336>
 800d984:	2400      	movs	r4, #0
 800d986:	f240 1991 	movw	r9, #401	; 0x191
 800d98a:	46a0      	mov	r8, r4
 800d98c:	e008      	b.n	800d9a0 <rclc_executor_spin_some.part.0+0x22c>
 800d98e:	f7ff fa93 	bl	800ceb8 <_rclc_check_for_new_data>
 800d992:	4604      	mov	r4, r0
 800d994:	b108      	cbz	r0, 800d99a <rclc_executor_spin_some.part.0+0x226>
 800d996:	4548      	cmp	r0, r9
 800d998:	d1ee      	bne.n	800d978 <rclc_executor_spin_some.part.0+0x204>
 800d99a:	68eb      	ldr	r3, [r5, #12]
 800d99c:	4598      	cmp	r8, r3
 800d99e:	d266      	bcs.n	800da6e <rclc_executor_spin_some.part.0+0x2fa>
 800d9a0:	68aa      	ldr	r2, [r5, #8]
 800d9a2:	4631      	mov	r1, r6
 800d9a4:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800d9a8:	f108 0801 	add.w	r8, r8, #1
 800d9ac:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 800d9b0:	f1bc 0f00 	cmp.w	ip, #0
 800d9b4:	d1eb      	bne.n	800d98e <rclc_executor_spin_some.part.0+0x21a>
 800d9b6:	4619      	mov	r1, r3
 800d9b8:	4610      	mov	r0, r2
 800d9ba:	e9d5 3220 	ldrd	r3, r2, [r5, #128]	; 0x80
 800d9be:	4798      	blx	r3
 800d9c0:	2800      	cmp	r0, #0
 800d9c2:	d0d9      	beq.n	800d978 <rclc_executor_spin_some.part.0+0x204>
 800d9c4:	68eb      	ldr	r3, [r5, #12]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d0d6      	beq.n	800d978 <rclc_executor_spin_some.part.0+0x204>
 800d9ca:	f04f 0a00 	mov.w	sl, #0
 800d9ce:	f240 1891 	movw	r8, #401	; 0x191
 800d9d2:	f240 2959 	movw	r9, #601	; 0x259
 800d9d6:	e00e      	b.n	800d9f6 <rclc_executor_spin_some.part.0+0x282>
 800d9d8:	f813 300b 	ldrb.w	r3, [r3, fp]
 800d9dc:	2b08      	cmp	r3, #8
 800d9de:	d034      	beq.n	800da4a <rclc_executor_spin_some.part.0+0x2d6>
 800d9e0:	2b09      	cmp	r3, #9
 800d9e2:	d029      	beq.n	800da38 <rclc_executor_spin_some.part.0+0x2c4>
 800d9e4:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800d9e8:	bb03      	cbnz	r3, 800da2c <rclc_executor_spin_some.part.0+0x2b8>
 800d9ea:	f10a 0a01 	add.w	sl, sl, #1
 800d9ee:	68eb      	ldr	r3, [r5, #12]
 800d9f0:	459a      	cmp	sl, r3
 800d9f2:	d2be      	bcs.n	800d972 <rclc_executor_spin_some.part.0+0x1fe>
 800d9f4:	2400      	movs	r4, #0
 800d9f6:	68a8      	ldr	r0, [r5, #8]
 800d9f8:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 800d9fc:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 800da00:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800da04:	2b00      	cmp	r3, #0
 800da06:	d0b7      	beq.n	800d978 <rclc_executor_spin_some.part.0+0x204>
 800da08:	4631      	mov	r1, r6
 800da0a:	f7ff faa3 	bl	800cf54 <_rclc_take_new_data>
 800da0e:	2800      	cmp	r0, #0
 800da10:	bf18      	it	ne
 800da12:	4540      	cmpne	r0, r8
 800da14:	d001      	beq.n	800da1a <rclc_executor_spin_some.part.0+0x2a6>
 800da16:	4548      	cmp	r0, r9
 800da18:	d10c      	bne.n	800da34 <rclc_executor_spin_some.part.0+0x2c0>
 800da1a:	68ab      	ldr	r3, [r5, #8]
 800da1c:	eb13 000b 	adds.w	r0, r3, fp
 800da20:	d021      	beq.n	800da66 <rclc_executor_spin_some.part.0+0x2f2>
 800da22:	7842      	ldrb	r2, [r0, #1]
 800da24:	2a00      	cmp	r2, #0
 800da26:	d0d7      	beq.n	800d9d8 <rclc_executor_spin_some.part.0+0x264>
 800da28:	2a01      	cmp	r2, #1
 800da2a:	d1de      	bne.n	800d9ea <rclc_executor_spin_some.part.0+0x276>
 800da2c:	f7ff fc06 	bl	800d23c <_rclc_execute.part.0>
 800da30:	2800      	cmp	r0, #0
 800da32:	d0da      	beq.n	800d9ea <rclc_executor_spin_some.part.0+0x276>
 800da34:	4607      	mov	r7, r0
 800da36:	e79c      	b.n	800d972 <rclc_executor_spin_some.part.0+0x1fe>
 800da38:	6843      	ldr	r3, [r0, #4]
 800da3a:	6a1a      	ldr	r2, [r3, #32]
 800da3c:	2a00      	cmp	r2, #0
 800da3e:	d1f5      	bne.n	800da2c <rclc_executor_spin_some.part.0+0x2b8>
 800da40:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800da44:	2b00      	cmp	r3, #0
 800da46:	d0d0      	beq.n	800d9ea <rclc_executor_spin_some.part.0+0x276>
 800da48:	e7f0      	b.n	800da2c <rclc_executor_spin_some.part.0+0x2b8>
 800da4a:	6843      	ldr	r3, [r0, #4]
 800da4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800da4e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800da52:	d1eb      	bne.n	800da2c <rclc_executor_spin_some.part.0+0x2b8>
 800da54:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800da58:	2a00      	cmp	r2, #0
 800da5a:	d1e7      	bne.n	800da2c <rclc_executor_spin_some.part.0+0x2b8>
 800da5c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800da60:	2b00      	cmp	r3, #0
 800da62:	d0c2      	beq.n	800d9ea <rclc_executor_spin_some.part.0+0x276>
 800da64:	e7e2      	b.n	800da2c <rclc_executor_spin_some.part.0+0x2b8>
 800da66:	270b      	movs	r7, #11
 800da68:	e783      	b.n	800d972 <rclc_executor_spin_some.part.0+0x1fe>
 800da6a:	68aa      	ldr	r2, [r5, #8]
 800da6c:	e6e2      	b.n	800d834 <rclc_executor_spin_some.part.0+0xc0>
 800da6e:	68aa      	ldr	r2, [r5, #8]
 800da70:	e7a1      	b.n	800d9b6 <rclc_executor_spin_some.part.0+0x242>
 800da72:	6842      	ldr	r2, [r0, #4]
 800da74:	6a11      	ldr	r1, [r2, #32]
 800da76:	2900      	cmp	r1, #0
 800da78:	f47f af22 	bne.w	800d8c0 <rclc_executor_spin_some.part.0+0x14c>
 800da7c:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800da80:	2a00      	cmp	r2, #0
 800da82:	f43f af0b 	beq.w	800d89c <rclc_executor_spin_some.part.0+0x128>
 800da86:	e71b      	b.n	800d8c0 <rclc_executor_spin_some.part.0+0x14c>
 800da88:	6842      	ldr	r2, [r0, #4]
 800da8a:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800da8c:	f031 417f 	bics.w	r1, r1, #4278190080	; 0xff000000
 800da90:	f47f af16 	bne.w	800d8c0 <rclc_executor_spin_some.part.0+0x14c>
 800da94:	f892 1044 	ldrb.w	r1, [r2, #68]	; 0x44
 800da98:	2900      	cmp	r1, #0
 800da9a:	f47f af11 	bne.w	800d8c0 <rclc_executor_spin_some.part.0+0x14c>
 800da9e:	f892 2043 	ldrb.w	r2, [r2, #67]	; 0x43
 800daa2:	2a00      	cmp	r2, #0
 800daa4:	f43f aefa 	beq.w	800d89c <rclc_executor_spin_some.part.0+0x128>
 800daa8:	e70a      	b.n	800d8c0 <rclc_executor_spin_some.part.0+0x14c>
 800daaa:	68aa      	ldr	r2, [r5, #8]
 800daac:	461c      	mov	r4, r3
 800daae:	e782      	b.n	800d9b6 <rclc_executor_spin_some.part.0+0x242>
 800dab0:	68aa      	ldr	r2, [r5, #8]
 800dab2:	461c      	mov	r4, r3
 800dab4:	e6be      	b.n	800d834 <rclc_executor_spin_some.part.0+0xc0>
 800dab6:	bf00      	nop

0800dab8 <rclc_executor_spin>:
 800dab8:	b1d0      	cbz	r0, 800daf0 <rclc_executor_spin+0x38>
 800daba:	b510      	push	{r4, lr}
 800dabc:	4604      	mov	r4, r0
 800dabe:	b082      	sub	sp, #8
 800dac0:	e004      	b.n	800dacc <rclc_executor_spin+0x14>
 800dac2:	f7ff fe57 	bl	800d774 <rclc_executor_spin_some.part.0>
 800dac6:	f030 0302 	bics.w	r3, r0, #2
 800daca:	d10f      	bne.n	800daec <rclc_executor_spin+0x34>
 800dacc:	6860      	ldr	r0, [r4, #4]
 800dace:	e9d4 231c 	ldrd	r2, r3, [r4, #112]	; 0x70
 800dad2:	e9cd 2300 	strd	r2, r3, [sp]
 800dad6:	f003 f8bb 	bl	8010c50 <rcl_context_is_valid>
 800dada:	4601      	mov	r1, r0
 800dadc:	4620      	mov	r0, r4
 800dade:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dae2:	2900      	cmp	r1, #0
 800dae4:	d1ed      	bne.n	800dac2 <rclc_executor_spin+0xa>
 800dae6:	f000 f953 	bl	800dd90 <rcutils_reset_error>
 800daea:	2001      	movs	r0, #1
 800daec:	b002      	add	sp, #8
 800daee:	bd10      	pop	{r4, pc}
 800daf0:	200b      	movs	r0, #11
 800daf2:	4770      	bx	lr

0800daf4 <rclc_executor_handle_counters_zero_init>:
 800daf4:	b130      	cbz	r0, 800db04 <rclc_executor_handle_counters_zero_init+0x10>
 800daf6:	2220      	movs	r2, #32
 800daf8:	2100      	movs	r1, #0
 800dafa:	b508      	push	{r3, lr}
 800dafc:	f00d fc42 	bl	801b384 <memset>
 800db00:	2000      	movs	r0, #0
 800db02:	bd08      	pop	{r3, pc}
 800db04:	200b      	movs	r0, #11
 800db06:	4770      	bx	lr

0800db08 <rclc_executor_handle_init>:
 800db08:	4603      	mov	r3, r0
 800db0a:	b178      	cbz	r0, 800db2c <rclc_executor_handle_init+0x24>
 800db0c:	2200      	movs	r2, #0
 800db0e:	f04f 0c0b 	mov.w	ip, #11
 800db12:	6341      	str	r1, [r0, #52]	; 0x34
 800db14:	4610      	mov	r0, r2
 800db16:	f8a3 c000 	strh.w	ip, [r3]
 800db1a:	631a      	str	r2, [r3, #48]	; 0x30
 800db1c:	871a      	strh	r2, [r3, #56]	; 0x38
 800db1e:	ed9f 7b04 	vldr	d7, [pc, #16]	; 800db30 <rclc_executor_handle_init+0x28>
 800db22:	e9c3 2201 	strd	r2, r2, [r3, #4]
 800db26:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
 800db2a:	4770      	bx	lr
 800db2c:	200b      	movs	r0, #11
 800db2e:	4770      	bx	lr
	...

0800db38 <rclc_support_init>:
 800db38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db3c:	b086      	sub	sp, #24
 800db3e:	b3bb      	cbz	r3, 800dbb0 <rclc_support_init+0x78>
 800db40:	4606      	mov	r6, r0
 800db42:	b3a8      	cbz	r0, 800dbb0 <rclc_support_init+0x78>
 800db44:	461c      	mov	r4, r3
 800db46:	460f      	mov	r7, r1
 800db48:	4690      	mov	r8, r2
 800db4a:	f003 fa21 	bl	8010f90 <rcl_get_zero_initialized_init_options>
 800db4e:	f104 050c 	add.w	r5, r4, #12
 800db52:	9005      	str	r0, [sp, #20]
 800db54:	e895 0003 	ldmia.w	r5, {r0, r1}
 800db58:	e88d 0003 	stmia.w	sp, {r0, r1}
 800db5c:	a805      	add	r0, sp, #20
 800db5e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800db62:	f003 fa17 	bl	8010f94 <rcl_init_options_init>
 800db66:	4605      	mov	r5, r0
 800db68:	b9e0      	cbnz	r0, 800dba4 <rclc_support_init+0x6c>
 800db6a:	ad02      	add	r5, sp, #8
 800db6c:	4628      	mov	r0, r5
 800db6e:	f003 f865 	bl	8010c3c <rcl_get_zero_initialized_context>
 800db72:	4633      	mov	r3, r6
 800db74:	aa05      	add	r2, sp, #20
 800db76:	e895 0003 	ldmia.w	r5, {r0, r1}
 800db7a:	e886 0003 	stmia.w	r6, {r0, r1}
 800db7e:	4641      	mov	r1, r8
 800db80:	4638      	mov	r0, r7
 800db82:	f003 f8cb 	bl	8010d1c <rcl_init>
 800db86:	4605      	mov	r5, r0
 800db88:	b9b8      	cbnz	r0, 800dbba <rclc_support_init+0x82>
 800db8a:	4622      	mov	r2, r4
 800db8c:	f106 010c 	add.w	r1, r6, #12
 800db90:	2003      	movs	r0, #3
 800db92:	60b4      	str	r4, [r6, #8]
 800db94:	f004 f90e 	bl	8011db4 <rcl_clock_init>
 800db98:	4605      	mov	r5, r0
 800db9a:	b970      	cbnz	r0, 800dbba <rclc_support_init+0x82>
 800db9c:	a805      	add	r0, sp, #20
 800db9e:	f003 fa55 	bl	801104c <rcl_init_options_fini>
 800dba2:	b108      	cbz	r0, 800dba8 <rclc_support_init+0x70>
 800dba4:	f000 f8f4 	bl	800dd90 <rcutils_reset_error>
 800dba8:	4628      	mov	r0, r5
 800dbaa:	b006      	add	sp, #24
 800dbac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbb0:	250b      	movs	r5, #11
 800dbb2:	4628      	mov	r0, r5
 800dbb4:	b006      	add	sp, #24
 800dbb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbba:	f000 f8e9 	bl	800dd90 <rcutils_reset_error>
 800dbbe:	a805      	add	r0, sp, #20
 800dbc0:	f003 fa44 	bl	801104c <rcl_init_options_fini>
 800dbc4:	2800      	cmp	r0, #0
 800dbc6:	d0ef      	beq.n	800dba8 <rclc_support_init+0x70>
 800dbc8:	e7ec      	b.n	800dba4 <rclc_support_init+0x6c>
 800dbca:	bf00      	nop

0800dbcc <rclc_node_init_default>:
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	bf18      	it	ne
 800dbd0:	2a00      	cmpne	r2, #0
 800dbd2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dbd6:	4616      	mov	r6, r2
 800dbd8:	bf0c      	ite	eq
 800dbda:	2201      	moveq	r2, #1
 800dbdc:	2200      	movne	r2, #0
 800dbde:	b0a3      	sub	sp, #140	; 0x8c
 800dbe0:	2900      	cmp	r1, #0
 800dbe2:	bf08      	it	eq
 800dbe4:	f042 0201 	orreq.w	r2, r2, #1
 800dbe8:	bb22      	cbnz	r2, 800dc34 <rclc_node_init_default+0x68>
 800dbea:	4604      	mov	r4, r0
 800dbec:	b310      	cbz	r0, 800dc34 <rclc_node_init_default+0x68>
 800dbee:	f10d 0810 	add.w	r8, sp, #16
 800dbf2:	461f      	mov	r7, r3
 800dbf4:	460d      	mov	r5, r1
 800dbf6:	f10d 0918 	add.w	r9, sp, #24
 800dbfa:	4640      	mov	r0, r8
 800dbfc:	f003 fad2 	bl	80111a4 <rcl_get_zero_initialized_node>
 800dc00:	e898 0003 	ldmia.w	r8, {r0, r1}
 800dc04:	e884 0003 	stmia.w	r4, {r0, r1}
 800dc08:	4648      	mov	r0, r9
 800dc0a:	f003 fc45 	bl	8011498 <rcl_node_get_default_options>
 800dc0e:	4640      	mov	r0, r8
 800dc10:	f003 fac8 	bl	80111a4 <rcl_get_zero_initialized_node>
 800dc14:	f8cd 9000 	str.w	r9, [sp]
 800dc18:	463b      	mov	r3, r7
 800dc1a:	4632      	mov	r2, r6
 800dc1c:	e898 0003 	ldmia.w	r8, {r0, r1}
 800dc20:	e884 0003 	stmia.w	r4, {r0, r1}
 800dc24:	4629      	mov	r1, r5
 800dc26:	4620      	mov	r0, r4
 800dc28:	f003 fac6 	bl	80111b8 <rcl_node_init>
 800dc2c:	b930      	cbnz	r0, 800dc3c <rclc_node_init_default+0x70>
 800dc2e:	b023      	add	sp, #140	; 0x8c
 800dc30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dc34:	200b      	movs	r0, #11
 800dc36:	b023      	add	sp, #140	; 0x8c
 800dc38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dc3c:	9003      	str	r0, [sp, #12]
 800dc3e:	f000 f8a7 	bl	800dd90 <rcutils_reset_error>
 800dc42:	f000 f8a5 	bl	800dd90 <rcutils_reset_error>
 800dc46:	9803      	ldr	r0, [sp, #12]
 800dc48:	b023      	add	sp, #140	; 0x8c
 800dc4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dc4e:	bf00      	nop

0800dc50 <rclc_service_init_default>:
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	bf18      	it	ne
 800dc54:	2a00      	cmpne	r2, #0
 800dc56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc5a:	4616      	mov	r6, r2
 800dc5c:	bf0c      	ite	eq
 800dc5e:	2201      	moveq	r2, #1
 800dc60:	2200      	movne	r2, #0
 800dc62:	b09e      	sub	sp, #120	; 0x78
 800dc64:	2900      	cmp	r1, #0
 800dc66:	bf08      	it	eq
 800dc68:	f042 0201 	orreq.w	r2, r2, #1
 800dc6c:	bb1a      	cbnz	r2, 800dcb6 <rclc_service_init_default+0x66>
 800dc6e:	4604      	mov	r4, r0
 800dc70:	b308      	cbz	r0, 800dcb6 <rclc_service_init_default+0x66>
 800dc72:	f10d 0810 	add.w	r8, sp, #16
 800dc76:	461f      	mov	r7, r3
 800dc78:	460d      	mov	r5, r1
 800dc7a:	f003 fe11 	bl	80118a0 <rcl_get_zero_initialized_service>
 800dc7e:	6020      	str	r0, [r4, #0]
 800dc80:	4640      	mov	r0, r8
 800dc82:	f003 febb 	bl	80119fc <rcl_service_get_default_options>
 800dc86:	2250      	movs	r2, #80	; 0x50
 800dc88:	490d      	ldr	r1, [pc, #52]	; (800dcc0 <rclc_service_init_default+0x70>)
 800dc8a:	4640      	mov	r0, r8
 800dc8c:	f00d fcef 	bl	801b66e <memcpy>
 800dc90:	463b      	mov	r3, r7
 800dc92:	4632      	mov	r2, r6
 800dc94:	4629      	mov	r1, r5
 800dc96:	4620      	mov	r0, r4
 800dc98:	f8cd 8000 	str.w	r8, [sp]
 800dc9c:	f003 fe06 	bl	80118ac <rcl_service_init>
 800dca0:	b910      	cbnz	r0, 800dca8 <rclc_service_init_default+0x58>
 800dca2:	b01e      	add	sp, #120	; 0x78
 800dca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dca8:	9003      	str	r0, [sp, #12]
 800dcaa:	f000 f871 	bl	800dd90 <rcutils_reset_error>
 800dcae:	9803      	ldr	r0, [sp, #12]
 800dcb0:	b01e      	add	sp, #120	; 0x78
 800dcb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcb6:	200b      	movs	r0, #11
 800dcb8:	b01e      	add	sp, #120	; 0x78
 800dcba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcbe:	bf00      	nop
 800dcc0:	0801ce58 	.word	0x0801ce58

0800dcc4 <__default_zero_allocate>:
 800dcc4:	f00c bf80 	b.w	801abc8 <calloc>

0800dcc8 <__default_reallocate>:
 800dcc8:	f00d b90c 	b.w	801aee4 <realloc>

0800dccc <__default_deallocate>:
 800dccc:	f00c bfea 	b.w	801aca4 <free>

0800dcd0 <__default_allocate>:
 800dcd0:	f00c bfe0 	b.w	801ac94 <malloc>

0800dcd4 <rcutils_get_zero_initialized_allocator>:
 800dcd4:	b510      	push	{r4, lr}
 800dcd6:	4c05      	ldr	r4, [pc, #20]	; (800dcec <rcutils_get_zero_initialized_allocator+0x18>)
 800dcd8:	4686      	mov	lr, r0
 800dcda:	4684      	mov	ip, r0
 800dcdc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dcde:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800dce2:	6823      	ldr	r3, [r4, #0]
 800dce4:	4670      	mov	r0, lr
 800dce6:	f8cc 3000 	str.w	r3, [ip]
 800dcea:	bd10      	pop	{r4, pc}
 800dcec:	0801cea8 	.word	0x0801cea8

0800dcf0 <rcutils_set_default_allocator>:
 800dcf0:	b1a8      	cbz	r0, 800dd1e <rcutils_set_default_allocator+0x2e>
 800dcf2:	6802      	ldr	r2, [r0, #0]
 800dcf4:	b1a2      	cbz	r2, 800dd20 <rcutils_set_default_allocator+0x30>
 800dcf6:	6841      	ldr	r1, [r0, #4]
 800dcf8:	b1a1      	cbz	r1, 800dd24 <rcutils_set_default_allocator+0x34>
 800dcfa:	b410      	push	{r4}
 800dcfc:	68c4      	ldr	r4, [r0, #12]
 800dcfe:	b164      	cbz	r4, 800dd1a <rcutils_set_default_allocator+0x2a>
 800dd00:	6880      	ldr	r0, [r0, #8]
 800dd02:	b138      	cbz	r0, 800dd14 <rcutils_set_default_allocator+0x24>
 800dd04:	4b08      	ldr	r3, [pc, #32]	; (800dd28 <rcutils_set_default_allocator+0x38>)
 800dd06:	601a      	str	r2, [r3, #0]
 800dd08:	2200      	movs	r2, #0
 800dd0a:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800dd0e:	2001      	movs	r0, #1
 800dd10:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800dd14:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dd18:	4770      	bx	lr
 800dd1a:	4620      	mov	r0, r4
 800dd1c:	e7fa      	b.n	800dd14 <rcutils_set_default_allocator+0x24>
 800dd1e:	4770      	bx	lr
 800dd20:	4610      	mov	r0, r2
 800dd22:	4770      	bx	lr
 800dd24:	4608      	mov	r0, r1
 800dd26:	4770      	bx	lr
 800dd28:	20000960 	.word	0x20000960

0800dd2c <rcutils_get_default_allocator>:
 800dd2c:	b510      	push	{r4, lr}
 800dd2e:	4c05      	ldr	r4, [pc, #20]	; (800dd44 <rcutils_get_default_allocator+0x18>)
 800dd30:	4686      	mov	lr, r0
 800dd32:	4684      	mov	ip, r0
 800dd34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dd36:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800dd3a:	6823      	ldr	r3, [r4, #0]
 800dd3c:	4670      	mov	r0, lr
 800dd3e:	f8cc 3000 	str.w	r3, [ip]
 800dd42:	bd10      	pop	{r4, pc}
 800dd44:	20000960 	.word	0x20000960

0800dd48 <rcutils_allocator_is_valid>:
 800dd48:	b158      	cbz	r0, 800dd62 <rcutils_allocator_is_valid+0x1a>
 800dd4a:	6803      	ldr	r3, [r0, #0]
 800dd4c:	b143      	cbz	r3, 800dd60 <rcutils_allocator_is_valid+0x18>
 800dd4e:	6843      	ldr	r3, [r0, #4]
 800dd50:	b133      	cbz	r3, 800dd60 <rcutils_allocator_is_valid+0x18>
 800dd52:	68c3      	ldr	r3, [r0, #12]
 800dd54:	b123      	cbz	r3, 800dd60 <rcutils_allocator_is_valid+0x18>
 800dd56:	6880      	ldr	r0, [r0, #8]
 800dd58:	3800      	subs	r0, #0
 800dd5a:	bf18      	it	ne
 800dd5c:	2001      	movne	r0, #1
 800dd5e:	4770      	bx	lr
 800dd60:	4618      	mov	r0, r3
 800dd62:	4770      	bx	lr

0800dd64 <rcutils_get_error_string>:
 800dd64:	4b06      	ldr	r3, [pc, #24]	; (800dd80 <rcutils_get_error_string+0x1c>)
 800dd66:	781b      	ldrb	r3, [r3, #0]
 800dd68:	b13b      	cbz	r3, 800dd7a <rcutils_get_error_string+0x16>
 800dd6a:	4b06      	ldr	r3, [pc, #24]	; (800dd84 <rcutils_get_error_string+0x20>)
 800dd6c:	781a      	ldrb	r2, [r3, #0]
 800dd6e:	b90a      	cbnz	r2, 800dd74 <rcutils_get_error_string+0x10>
 800dd70:	2201      	movs	r2, #1
 800dd72:	701a      	strb	r2, [r3, #0]
 800dd74:	4b04      	ldr	r3, [pc, #16]	; (800dd88 <rcutils_get_error_string+0x24>)
 800dd76:	7818      	ldrb	r0, [r3, #0]
 800dd78:	4770      	bx	lr
 800dd7a:	4b04      	ldr	r3, [pc, #16]	; (800dd8c <rcutils_get_error_string+0x28>)
 800dd7c:	7818      	ldrb	r0, [r3, #0]
 800dd7e:	4770      	bx	lr
 800dd80:	2000b97c 	.word	0x2000b97c
 800dd84:	2000b991 	.word	0x2000b991
 800dd88:	2000b990 	.word	0x2000b990
 800dd8c:	0801c6cc 	.word	0x0801c6cc

0800dd90 <rcutils_reset_error>:
 800dd90:	ed9f 7b07 	vldr	d7, [pc, #28]	; 800ddb0 <rcutils_reset_error+0x20>
 800dd94:	2300      	movs	r3, #0
 800dd96:	4a08      	ldr	r2, [pc, #32]	; (800ddb8 <rcutils_reset_error+0x28>)
 800dd98:	4808      	ldr	r0, [pc, #32]	; (800ddbc <rcutils_reset_error+0x2c>)
 800dd9a:	8013      	strh	r3, [r2, #0]
 800dd9c:	4908      	ldr	r1, [pc, #32]	; (800ddc0 <rcutils_reset_error+0x30>)
 800dd9e:	7003      	strb	r3, [r0, #0]
 800dda0:	700b      	strb	r3, [r1, #0]
 800dda2:	ed82 7b02 	vstr	d7, [r2, #8]
 800dda6:	4a07      	ldr	r2, [pc, #28]	; (800ddc4 <rcutils_reset_error+0x34>)
 800dda8:	7013      	strb	r3, [r2, #0]
 800ddaa:	4770      	bx	lr
 800ddac:	f3af 8000 	nop.w
	...
 800ddb8:	2000b980 	.word	0x2000b980
 800ddbc:	2000b991 	.word	0x2000b991
 800ddc0:	2000b990 	.word	0x2000b990
 800ddc4:	2000b97c 	.word	0x2000b97c

0800ddc8 <rcutils_system_time_now>:
 800ddc8:	b310      	cbz	r0, 800de10 <rcutils_system_time_now+0x48>
 800ddca:	b570      	push	{r4, r5, r6, lr}
 800ddcc:	b084      	sub	sp, #16
 800ddce:	4604      	mov	r4, r0
 800ddd0:	2001      	movs	r0, #1
 800ddd2:	4669      	mov	r1, sp
 800ddd4:	f7f5 f930 	bl	8003038 <clock_gettime>
 800ddd8:	2800      	cmp	r0, #0
 800ddda:	db16      	blt.n	800de0a <rcutils_system_time_now+0x42>
 800dddc:	e9dd 3100 	ldrd	r3, r1, [sp]
 800dde0:	2900      	cmp	r1, #0
 800dde2:	db12      	blt.n	800de0a <rcutils_system_time_now+0x42>
 800dde4:	ea53 0201 	orrs.w	r2, r3, r1
 800dde8:	9d02      	ldr	r5, [sp, #8]
 800ddea:	d101      	bne.n	800ddf0 <rcutils_system_time_now+0x28>
 800ddec:	2d00      	cmp	r5, #0
 800ddee:	db0c      	blt.n	800de0a <rcutils_system_time_now+0x42>
 800ddf0:	4e08      	ldr	r6, [pc, #32]	; (800de14 <rcutils_system_time_now+0x4c>)
 800ddf2:	2000      	movs	r0, #0
 800ddf4:	fba3 3206 	umull	r3, r2, r3, r6
 800ddf8:	195b      	adds	r3, r3, r5
 800ddfa:	fb06 2201 	mla	r2, r6, r1, r2
 800ddfe:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 800de02:	e9c4 3200 	strd	r3, r2, [r4]
 800de06:	b004      	add	sp, #16
 800de08:	bd70      	pop	{r4, r5, r6, pc}
 800de0a:	2002      	movs	r0, #2
 800de0c:	b004      	add	sp, #16
 800de0e:	bd70      	pop	{r4, r5, r6, pc}
 800de10:	200b      	movs	r0, #11
 800de12:	4770      	bx	lr
 800de14:	3b9aca00 	.word	0x3b9aca00

0800de18 <rcutils_steady_time_now>:
 800de18:	b310      	cbz	r0, 800de60 <rcutils_steady_time_now+0x48>
 800de1a:	b570      	push	{r4, r5, r6, lr}
 800de1c:	b084      	sub	sp, #16
 800de1e:	4604      	mov	r4, r0
 800de20:	2000      	movs	r0, #0
 800de22:	4669      	mov	r1, sp
 800de24:	f7f5 f908 	bl	8003038 <clock_gettime>
 800de28:	2800      	cmp	r0, #0
 800de2a:	db16      	blt.n	800de5a <rcutils_steady_time_now+0x42>
 800de2c:	e9dd 3100 	ldrd	r3, r1, [sp]
 800de30:	2900      	cmp	r1, #0
 800de32:	db12      	blt.n	800de5a <rcutils_steady_time_now+0x42>
 800de34:	ea53 0201 	orrs.w	r2, r3, r1
 800de38:	9d02      	ldr	r5, [sp, #8]
 800de3a:	d101      	bne.n	800de40 <rcutils_steady_time_now+0x28>
 800de3c:	2d00      	cmp	r5, #0
 800de3e:	db0c      	blt.n	800de5a <rcutils_steady_time_now+0x42>
 800de40:	4e08      	ldr	r6, [pc, #32]	; (800de64 <rcutils_steady_time_now+0x4c>)
 800de42:	2000      	movs	r0, #0
 800de44:	fba3 3206 	umull	r3, r2, r3, r6
 800de48:	195b      	adds	r3, r3, r5
 800de4a:	fb06 2201 	mla	r2, r6, r1, r2
 800de4e:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 800de52:	e9c4 3200 	strd	r3, r2, [r4]
 800de56:	b004      	add	sp, #16
 800de58:	bd70      	pop	{r4, r5, r6, pc}
 800de5a:	2002      	movs	r0, #2
 800de5c:	b004      	add	sp, #16
 800de5e:	bd70      	pop	{r4, r5, r6, pc}
 800de60:	200b      	movs	r0, #11
 800de62:	4770      	bx	lr
 800de64:	3b9aca00 	.word	0x3b9aca00

0800de68 <rmw_uros_set_custom_transport>:
 800de68:	b470      	push	{r4, r5, r6}
 800de6a:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800de6e:	b162      	cbz	r2, 800de8a <rmw_uros_set_custom_transport+0x22>
 800de70:	b15b      	cbz	r3, 800de8a <rmw_uros_set_custom_transport+0x22>
 800de72:	b155      	cbz	r5, 800de8a <rmw_uros_set_custom_transport+0x22>
 800de74:	b14e      	cbz	r6, 800de8a <rmw_uros_set_custom_transport+0x22>
 800de76:	4c06      	ldr	r4, [pc, #24]	; (800de90 <rmw_uros_set_custom_transport+0x28>)
 800de78:	7020      	strb	r0, [r4, #0]
 800de7a:	2000      	movs	r0, #0
 800de7c:	6166      	str	r6, [r4, #20]
 800de7e:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800de82:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800de86:	bc70      	pop	{r4, r5, r6}
 800de88:	4770      	bx	lr
 800de8a:	200b      	movs	r0, #11
 800de8c:	bc70      	pop	{r4, r5, r6}
 800de8e:	4770      	bx	lr
 800de90:	2000b994 	.word	0x2000b994

0800de94 <get_message_typesupport_handle_function>:
 800de94:	b510      	push	{r4, lr}
 800de96:	4604      	mov	r4, r0
 800de98:	6800      	ldr	r0, [r0, #0]
 800de9a:	f7f2 f9d1 	bl	8000240 <strcmp>
 800de9e:	2800      	cmp	r0, #0
 800dea0:	bf0c      	ite	eq
 800dea2:	4620      	moveq	r0, r4
 800dea4:	2000      	movne	r0, #0
 800dea6:	bd10      	pop	{r4, pc}

0800dea8 <rosidl_runtime_c__uint8__Sequence__init>:
 800dea8:	b530      	push	{r4, r5, lr}
 800deaa:	4604      	mov	r4, r0
 800deac:	b087      	sub	sp, #28
 800deae:	b130      	cbz	r0, 800debe <rosidl_runtime_c__uint8__Sequence__init+0x16>
 800deb0:	460d      	mov	r5, r1
 800deb2:	b931      	cbnz	r1, 800dec2 <rosidl_runtime_c__uint8__Sequence__init+0x1a>
 800deb4:	460b      	mov	r3, r1
 800deb6:	2001      	movs	r0, #1
 800deb8:	60a5      	str	r5, [r4, #8]
 800deba:	e9c4 3500 	strd	r3, r5, [r4]
 800debe:	b007      	add	sp, #28
 800dec0:	bd30      	pop	{r4, r5, pc}
 800dec2:	a801      	add	r0, sp, #4
 800dec4:	f7ff ff32 	bl	800dd2c <rcutils_get_default_allocator>
 800dec8:	9b01      	ldr	r3, [sp, #4]
 800deca:	9905      	ldr	r1, [sp, #20]
 800decc:	4628      	mov	r0, r5
 800dece:	4798      	blx	r3
 800ded0:	4603      	mov	r3, r0
 800ded2:	2800      	cmp	r0, #0
 800ded4:	d1ef      	bne.n	800deb6 <rosidl_runtime_c__uint8__Sequence__init+0xe>
 800ded6:	e7f2      	b.n	800debe <rosidl_runtime_c__uint8__Sequence__init+0x16>

0800ded8 <rosidl_runtime_c__uint8__Sequence__fini>:
 800ded8:	b188      	cbz	r0, 800defe <rosidl_runtime_c__uint8__Sequence__fini+0x26>
 800deda:	6803      	ldr	r3, [r0, #0]
 800dedc:	b510      	push	{r4, lr}
 800dede:	4604      	mov	r4, r0
 800dee0:	b086      	sub	sp, #24
 800dee2:	b153      	cbz	r3, 800defa <rosidl_runtime_c__uint8__Sequence__fini+0x22>
 800dee4:	a801      	add	r0, sp, #4
 800dee6:	f7ff ff21 	bl	800dd2c <rcutils_get_default_allocator>
 800deea:	9b02      	ldr	r3, [sp, #8]
 800deec:	9905      	ldr	r1, [sp, #20]
 800deee:	6820      	ldr	r0, [r4, #0]
 800def0:	4798      	blx	r3
 800def2:	2300      	movs	r3, #0
 800def4:	e9c4 3300 	strd	r3, r3, [r4]
 800def8:	60a3      	str	r3, [r4, #8]
 800defa:	b006      	add	sp, #24
 800defc:	bd10      	pop	{r4, pc}
 800defe:	4770      	bx	lr

0800df00 <rosidl_runtime_c__uint8__Sequence__copy>:
 800df00:	2900      	cmp	r1, #0
 800df02:	bf18      	it	ne
 800df04:	2800      	cmpne	r0, #0
 800df06:	b570      	push	{r4, r5, r6, lr}
 800df08:	bf08      	it	eq
 800df0a:	2601      	moveq	r6, #1
 800df0c:	b086      	sub	sp, #24
 800df0e:	bf18      	it	ne
 800df10:	2600      	movne	r6, #0
 800df12:	d01d      	beq.n	800df50 <rosidl_runtime_c__uint8__Sequence__copy+0x50>
 800df14:	6842      	ldr	r2, [r0, #4]
 800df16:	4605      	mov	r5, r0
 800df18:	688b      	ldr	r3, [r1, #8]
 800df1a:	460c      	mov	r4, r1
 800df1c:	4293      	cmp	r3, r2
 800df1e:	d309      	bcc.n	800df34 <rosidl_runtime_c__uint8__Sequence__copy+0x34>
 800df20:	6808      	ldr	r0, [r1, #0]
 800df22:	6829      	ldr	r1, [r5, #0]
 800df24:	2601      	movs	r6, #1
 800df26:	f00d fba2 	bl	801b66e <memcpy>
 800df2a:	686b      	ldr	r3, [r5, #4]
 800df2c:	6063      	str	r3, [r4, #4]
 800df2e:	4630      	mov	r0, r6
 800df30:	b006      	add	sp, #24
 800df32:	bd70      	pop	{r4, r5, r6, pc}
 800df34:	a801      	add	r0, sp, #4
 800df36:	f7ff fef9 	bl	800dd2c <rcutils_get_default_allocator>
 800df3a:	9b03      	ldr	r3, [sp, #12]
 800df3c:	9a05      	ldr	r2, [sp, #20]
 800df3e:	6869      	ldr	r1, [r5, #4]
 800df40:	6820      	ldr	r0, [r4, #0]
 800df42:	4798      	blx	r3
 800df44:	2800      	cmp	r0, #0
 800df46:	d0f2      	beq.n	800df2e <rosidl_runtime_c__uint8__Sequence__copy+0x2e>
 800df48:	686a      	ldr	r2, [r5, #4]
 800df4a:	6020      	str	r0, [r4, #0]
 800df4c:	60a2      	str	r2, [r4, #8]
 800df4e:	e7e8      	b.n	800df22 <rosidl_runtime_c__uint8__Sequence__copy+0x22>
 800df50:	2600      	movs	r6, #0
 800df52:	4630      	mov	r0, r6
 800df54:	b006      	add	sp, #24
 800df56:	bd70      	pop	{r4, r5, r6, pc}

0800df58 <get_service_typesupport_handle>:
 800df58:	6883      	ldr	r3, [r0, #8]
 800df5a:	4718      	bx	r3

0800df5c <get_service_typesupport_handle_function>:
 800df5c:	b510      	push	{r4, lr}
 800df5e:	4604      	mov	r4, r0
 800df60:	6800      	ldr	r0, [r0, #0]
 800df62:	f7f2 f96d 	bl	8000240 <strcmp>
 800df66:	2800      	cmp	r0, #0
 800df68:	bf0c      	ite	eq
 800df6a:	4620      	moveq	r0, r4
 800df6c:	2000      	movne	r0, #0
 800df6e:	bd10      	pop	{r4, pc}

0800df70 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 800df70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df74:	6805      	ldr	r5, [r0, #0]
 800df76:	4604      	mov	r4, r0
 800df78:	460e      	mov	r6, r1
 800df7a:	4628      	mov	r0, r5
 800df7c:	f7f2 f960 	bl	8000240 <strcmp>
 800df80:	b1c8      	cbz	r0, 800dfb6 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 800df82:	4b11      	ldr	r3, [pc, #68]	; (800dfc8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	429d      	cmp	r5, r3
 800df88:	d112      	bne.n	800dfb0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800df8a:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800df8e:	f8d8 4000 	ldr.w	r4, [r8]
 800df92:	b16c      	cbz	r4, 800dfb0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800df94:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800df98:	2700      	movs	r7, #0
 800df9a:	3d04      	subs	r5, #4
 800df9c:	4631      	mov	r1, r6
 800df9e:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800dfa2:	f7f2 f94d 	bl	8000240 <strcmp>
 800dfa6:	00bb      	lsls	r3, r7, #2
 800dfa8:	b140      	cbz	r0, 800dfbc <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 800dfaa:	3701      	adds	r7, #1
 800dfac:	42bc      	cmp	r4, r7
 800dfae:	d1f5      	bne.n	800df9c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 800dfb0:	2000      	movs	r0, #0
 800dfb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfb6:	4620      	mov	r0, r4
 800dfb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfbc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800dfc0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dfc4:	58d3      	ldr	r3, [r2, r3]
 800dfc6:	4718      	bx	r3
 800dfc8:	20000974 	.word	0x20000974

0800dfcc <rosidl_typesupport_c__get_service_typesupport_handle_function>:
 800dfcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dfd0:	6805      	ldr	r5, [r0, #0]
 800dfd2:	4604      	mov	r4, r0
 800dfd4:	460e      	mov	r6, r1
 800dfd6:	4628      	mov	r0, r5
 800dfd8:	f7f2 f932 	bl	8000240 <strcmp>
 800dfdc:	b1c8      	cbz	r0, 800e012 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x46>
 800dfde:	4b11      	ldr	r3, [pc, #68]	; (800e024 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x58>)
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	429d      	cmp	r5, r3
 800dfe4:	d112      	bne.n	800e00c <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 800dfe6:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800dfea:	f8d8 4000 	ldr.w	r4, [r8]
 800dfee:	b16c      	cbz	r4, 800e00c <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 800dff0:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800dff4:	2700      	movs	r7, #0
 800dff6:	3d04      	subs	r5, #4
 800dff8:	4631      	mov	r1, r6
 800dffa:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800dffe:	f7f2 f91f 	bl	8000240 <strcmp>
 800e002:	00bb      	lsls	r3, r7, #2
 800e004:	b140      	cbz	r0, 800e018 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x4c>
 800e006:	3701      	adds	r7, #1
 800e008:	42bc      	cmp	r4, r7
 800e00a:	d1f5      	bne.n	800dff8 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x2c>
 800e00c:	2000      	movs	r0, #0
 800e00e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e012:	4620      	mov	r0, r4
 800e014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e018:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e01c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e020:	58d3      	ldr	r3, [r2, r3]
 800e022:	4718      	bx	r3
 800e024:	20000974 	.word	0x20000974

0800e028 <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__size_function__ServiceEventInfo__client_gid>:
 800e028:	2010      	movs	r0, #16
 800e02a:	4770      	bx	lr

0800e02c <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__get_const_function__ServiceEventInfo__client_gid>:
 800e02c:	4408      	add	r0, r1
 800e02e:	4770      	bx	lr

0800e030 <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__fetch_function__ServiceEventInfo__client_gid>:
 800e030:	5c43      	ldrb	r3, [r0, r1]
 800e032:	7013      	strb	r3, [r2, #0]
 800e034:	4770      	bx	lr
 800e036:	bf00      	nop

0800e038 <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__assign_function__ServiceEventInfo__client_gid>:
 800e038:	7813      	ldrb	r3, [r2, #0]
 800e03a:	5443      	strb	r3, [r0, r1]
 800e03c:	4770      	bx	lr
 800e03e:	bf00      	nop

0800e040 <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__ServiceEventInfo_init_function>:
 800e040:	f007 bdf2 	b.w	8015c28 <service_msgs__msg__ServiceEventInfo__init>

0800e044 <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__ServiceEventInfo_fini_function>:
 800e044:	f007 be02 	b.w	8015c4c <service_msgs__msg__ServiceEventInfo__fini>

0800e048 <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__get_function__ServiceEventInfo__client_gid>:
 800e048:	4408      	add	r0, r1
 800e04a:	4770      	bx	lr

0800e04c <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>:
 800e04c:	b508      	push	{r3, lr}
 800e04e:	f000 f8db 	bl	800e208 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800e052:	4b06      	ldr	r3, [pc, #24]	; (800e06c <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x20>)
 800e054:	4906      	ldr	r1, [pc, #24]	; (800e070 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x24>)
 800e056:	681a      	ldr	r2, [r3, #0]
 800e058:	6488      	str	r0, [r1, #72]	; 0x48
 800e05a:	b10a      	cbz	r2, 800e060 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x14>
 800e05c:	4803      	ldr	r0, [pc, #12]	; (800e06c <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x20>)
 800e05e:	bd08      	pop	{r3, pc}
 800e060:	4a04      	ldr	r2, [pc, #16]	; (800e074 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x28>)
 800e062:	4802      	ldr	r0, [pc, #8]	; (800e06c <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x20>)
 800e064:	6812      	ldr	r2, [r2, #0]
 800e066:	601a      	str	r2, [r3, #0]
 800e068:	bd08      	pop	{r3, pc}
 800e06a:	bf00      	nop
 800e06c:	20000a6c 	.word	0x20000a6c
 800e070:	2000097c 	.word	0x2000097c
 800e074:	20000978 	.word	0x20000978

0800e078 <get_serialized_size_service_msgs__msg__ServiceEventInfo>:
 800e078:	b5b0      	push	{r4, r5, r7, lr}
 800e07a:	4604      	mov	r4, r0
 800e07c:	b1d8      	cbz	r0, 800e0b6 <get_serialized_size_service_msgs__msg__ServiceEventInfo+0x3e>
 800e07e:	460d      	mov	r5, r1
 800e080:	2101      	movs	r1, #1
 800e082:	4628      	mov	r0, r5
 800e084:	f001 fd04 	bl	800fa90 <ucdr_alignment>
 800e088:	1c6b      	adds	r3, r5, #1
 800e08a:	4607      	mov	r7, r0
 800e08c:	1d20      	adds	r0, r4, #4
 800e08e:	f1c5 0508 	rsb	r5, r5, #8
 800e092:	441f      	add	r7, r3
 800e094:	4639      	mov	r1, r7
 800e096:	f000 f8c5 	bl	800e224 <get_serialized_size_builtin_interfaces__msg__Time>
 800e09a:	4407      	add	r7, r0
 800e09c:	2101      	movs	r1, #1
 800e09e:	4638      	mov	r0, r7
 800e0a0:	f001 fcf6 	bl	800fa90 <ucdr_alignment>
 800e0a4:	f100 0410 	add.w	r4, r0, #16
 800e0a8:	2108      	movs	r1, #8
 800e0aa:	443c      	add	r4, r7
 800e0ac:	4620      	mov	r0, r4
 800e0ae:	f001 fcef 	bl	800fa90 <ucdr_alignment>
 800e0b2:	4428      	add	r0, r5
 800e0b4:	4420      	add	r0, r4
 800e0b6:	bdb0      	pop	{r4, r5, r7, pc}

0800e0b8 <_ServiceEventInfo__cdr_deserialize>:
 800e0b8:	b538      	push	{r3, r4, r5, lr}
 800e0ba:	460c      	mov	r4, r1
 800e0bc:	b1b9      	cbz	r1, 800e0ee <_ServiceEventInfo__cdr_deserialize+0x36>
 800e0be:	4605      	mov	r5, r0
 800e0c0:	f000 fa8e 	bl	800e5e0 <ucdr_deserialize_uint8_t>
 800e0c4:	f000 f912 	bl	800e2ec <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800e0c8:	4603      	mov	r3, r0
 800e0ca:	1d21      	adds	r1, r4, #4
 800e0cc:	4628      	mov	r0, r5
 800e0ce:	685b      	ldr	r3, [r3, #4]
 800e0d0:	68db      	ldr	r3, [r3, #12]
 800e0d2:	4798      	blx	r3
 800e0d4:	f104 010c 	add.w	r1, r4, #12
 800e0d8:	4628      	mov	r0, r5
 800e0da:	2210      	movs	r2, #16
 800e0dc:	f000 f9d4 	bl	800e488 <ucdr_deserialize_array_uint8_t>
 800e0e0:	f104 0120 	add.w	r1, r4, #32
 800e0e4:	4628      	mov	r0, r5
 800e0e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e0ea:	f001 ba8b 	b.w	800f604 <ucdr_deserialize_int64_t>
 800e0ee:	4608      	mov	r0, r1
 800e0f0:	bd38      	pop	{r3, r4, r5, pc}
 800e0f2:	bf00      	nop

0800e0f4 <_ServiceEventInfo__cdr_serialize>:
 800e0f4:	b1e8      	cbz	r0, 800e132 <_ServiceEventInfo__cdr_serialize+0x3e>
 800e0f6:	b570      	push	{r4, r5, r6, lr}
 800e0f8:	4606      	mov	r6, r0
 800e0fa:	460d      	mov	r5, r1
 800e0fc:	4604      	mov	r4, r0
 800e0fe:	4608      	mov	r0, r1
 800e100:	f816 1b04 	ldrb.w	r1, [r6], #4
 800e104:	f000 fa56 	bl	800e5b4 <ucdr_serialize_uint8_t>
 800e108:	f000 f8f0 	bl	800e2ec <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800e10c:	4603      	mov	r3, r0
 800e10e:	4629      	mov	r1, r5
 800e110:	4630      	mov	r0, r6
 800e112:	685b      	ldr	r3, [r3, #4]
 800e114:	689b      	ldr	r3, [r3, #8]
 800e116:	4798      	blx	r3
 800e118:	2210      	movs	r2, #16
 800e11a:	f104 010c 	add.w	r1, r4, #12
 800e11e:	4628      	mov	r0, r5
 800e120:	f000 f94e 	bl	800e3c0 <ucdr_serialize_array_uint8_t>
 800e124:	4628      	mov	r0, r5
 800e126:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 800e12a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e12e:	f001 b999 	b.w	800f464 <ucdr_serialize_int64_t>
 800e132:	4770      	bx	lr

0800e134 <_ServiceEventInfo__get_serialized_size>:
 800e134:	b538      	push	{r3, r4, r5, lr}
 800e136:	4604      	mov	r4, r0
 800e138:	b1b0      	cbz	r0, 800e168 <_ServiceEventInfo__get_serialized_size+0x34>
 800e13a:	2101      	movs	r1, #1
 800e13c:	2000      	movs	r0, #0
 800e13e:	f001 fca7 	bl	800fa90 <ucdr_alignment>
 800e142:	4605      	mov	r5, r0
 800e144:	1d20      	adds	r0, r4, #4
 800e146:	3501      	adds	r5, #1
 800e148:	4629      	mov	r1, r5
 800e14a:	f000 f86b 	bl	800e224 <get_serialized_size_builtin_interfaces__msg__Time>
 800e14e:	4405      	add	r5, r0
 800e150:	2101      	movs	r1, #1
 800e152:	4628      	mov	r0, r5
 800e154:	f001 fc9c 	bl	800fa90 <ucdr_alignment>
 800e158:	3010      	adds	r0, #16
 800e15a:	2108      	movs	r1, #8
 800e15c:	4405      	add	r5, r0
 800e15e:	4628      	mov	r0, r5
 800e160:	f001 fc96 	bl	800fa90 <ucdr_alignment>
 800e164:	3008      	adds	r0, #8
 800e166:	4428      	add	r0, r5
 800e168:	bd38      	pop	{r3, r4, r5, pc}
 800e16a:	bf00      	nop

0800e16c <_ServiceEventInfo__max_serialized_size>:
 800e16c:	b550      	push	{r4, r6, lr}
 800e16e:	2601      	movs	r6, #1
 800e170:	b083      	sub	sp, #12
 800e172:	2000      	movs	r0, #0
 800e174:	4631      	mov	r1, r6
 800e176:	f88d 6007 	strb.w	r6, [sp, #7]
 800e17a:	f001 fc89 	bl	800fa90 <ucdr_alignment>
 800e17e:	4604      	mov	r4, r0
 800e180:	f10d 0007 	add.w	r0, sp, #7
 800e184:	4434      	add	r4, r6
 800e186:	4621      	mov	r1, r4
 800e188:	f000 f89c 	bl	800e2c4 <max_serialized_size_builtin_interfaces__msg__Time>
 800e18c:	4404      	add	r4, r0
 800e18e:	4631      	mov	r1, r6
 800e190:	4620      	mov	r0, r4
 800e192:	f001 fc7d 	bl	800fa90 <ucdr_alignment>
 800e196:	3010      	adds	r0, #16
 800e198:	2108      	movs	r1, #8
 800e19a:	4404      	add	r4, r0
 800e19c:	4620      	mov	r0, r4
 800e19e:	f001 fc77 	bl	800fa90 <ucdr_alignment>
 800e1a2:	3008      	adds	r0, #8
 800e1a4:	4420      	add	r0, r4
 800e1a6:	b003      	add	sp, #12
 800e1a8:	bd50      	pop	{r4, r6, pc}
 800e1aa:	bf00      	nop

0800e1ac <max_serialized_size_service_msgs__msg__ServiceEventInfo>:
 800e1ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1b0:	f04f 0801 	mov.w	r8, #1
 800e1b4:	460c      	mov	r4, r1
 800e1b6:	4607      	mov	r7, r0
 800e1b8:	4641      	mov	r1, r8
 800e1ba:	4620      	mov	r0, r4
 800e1bc:	f887 8000 	strb.w	r8, [r7]
 800e1c0:	eb04 0608 	add.w	r6, r4, r8
 800e1c4:	f001 fc64 	bl	800fa90 <ucdr_alignment>
 800e1c8:	4605      	mov	r5, r0
 800e1ca:	4638      	mov	r0, r7
 800e1cc:	f1c4 0408 	rsb	r4, r4, #8
 800e1d0:	4435      	add	r5, r6
 800e1d2:	4629      	mov	r1, r5
 800e1d4:	f000 f876 	bl	800e2c4 <max_serialized_size_builtin_interfaces__msg__Time>
 800e1d8:	4405      	add	r5, r0
 800e1da:	4641      	mov	r1, r8
 800e1dc:	4628      	mov	r0, r5
 800e1de:	f001 fc57 	bl	800fa90 <ucdr_alignment>
 800e1e2:	3010      	adds	r0, #16
 800e1e4:	2108      	movs	r1, #8
 800e1e6:	4405      	add	r5, r0
 800e1e8:	4628      	mov	r0, r5
 800e1ea:	f001 fc51 	bl	800fa90 <ucdr_alignment>
 800e1ee:	4420      	add	r0, r4
 800e1f0:	4428      	add	r0, r5
 800e1f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1f6:	bf00      	nop

0800e1f8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>:
 800e1f8:	4800      	ldr	r0, [pc, #0]	; (800e1fc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x4>)
 800e1fa:	4770      	bx	lr
 800e1fc:	20000a84 	.word	0x20000a84

0800e200 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function>:
 800e200:	f007 bd5a 	b.w	8015cb8 <builtin_interfaces__msg__Time__init>

0800e204 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function>:
 800e204:	f007 bd5c 	b.w	8015cc0 <builtin_interfaces__msg__Time__fini>

0800e208 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800e208:	4b04      	ldr	r3, [pc, #16]	; (800e21c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800e20a:	681a      	ldr	r2, [r3, #0]
 800e20c:	b10a      	cbz	r2, 800e212 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0xa>
 800e20e:	4803      	ldr	r0, [pc, #12]	; (800e21c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800e210:	4770      	bx	lr
 800e212:	4a03      	ldr	r2, [pc, #12]	; (800e220 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x18>)
 800e214:	4801      	ldr	r0, [pc, #4]	; (800e21c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800e216:	6812      	ldr	r2, [r2, #0]
 800e218:	601a      	str	r2, [r3, #0]
 800e21a:	4770      	bx	lr
 800e21c:	20000b30 	.word	0x20000b30
 800e220:	20000978 	.word	0x20000978

0800e224 <get_serialized_size_builtin_interfaces__msg__Time>:
 800e224:	b180      	cbz	r0, 800e248 <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 800e226:	b538      	push	{r3, r4, r5, lr}
 800e228:	460d      	mov	r5, r1
 800e22a:	2104      	movs	r1, #4
 800e22c:	4628      	mov	r0, r5
 800e22e:	f001 fc2f 	bl	800fa90 <ucdr_alignment>
 800e232:	1d2b      	adds	r3, r5, #4
 800e234:	f1c5 0504 	rsb	r5, r5, #4
 800e238:	2104      	movs	r1, #4
 800e23a:	181c      	adds	r4, r3, r0
 800e23c:	4620      	mov	r0, r4
 800e23e:	f001 fc27 	bl	800fa90 <ucdr_alignment>
 800e242:	4428      	add	r0, r5
 800e244:	4420      	add	r0, r4
 800e246:	bd38      	pop	{r3, r4, r5, pc}
 800e248:	4770      	bx	lr
 800e24a:	bf00      	nop

0800e24c <_Time__cdr_deserialize>:
 800e24c:	b538      	push	{r3, r4, r5, lr}
 800e24e:	460c      	mov	r4, r1
 800e250:	b141      	cbz	r1, 800e264 <_Time__cdr_deserialize+0x18>
 800e252:	4605      	mov	r5, r0
 800e254:	f001 f876 	bl	800f344 <ucdr_deserialize_int32_t>
 800e258:	1d21      	adds	r1, r4, #4
 800e25a:	4628      	mov	r0, r5
 800e25c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e260:	f000 bcee 	b.w	800ec40 <ucdr_deserialize_uint32_t>
 800e264:	4608      	mov	r0, r1
 800e266:	bd38      	pop	{r3, r4, r5, pc}

0800e268 <_Time__cdr_serialize>:
 800e268:	b160      	cbz	r0, 800e284 <_Time__cdr_serialize+0x1c>
 800e26a:	b538      	push	{r3, r4, r5, lr}
 800e26c:	460d      	mov	r5, r1
 800e26e:	4604      	mov	r4, r0
 800e270:	6801      	ldr	r1, [r0, #0]
 800e272:	4628      	mov	r0, r5
 800e274:	f000 ffce 	bl	800f214 <ucdr_serialize_int32_t>
 800e278:	6861      	ldr	r1, [r4, #4]
 800e27a:	4628      	mov	r0, r5
 800e27c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e280:	f000 bbae 	b.w	800e9e0 <ucdr_serialize_uint32_t>
 800e284:	4770      	bx	lr
 800e286:	bf00      	nop

0800e288 <_Time__get_serialized_size>:
 800e288:	b160      	cbz	r0, 800e2a4 <_Time__get_serialized_size+0x1c>
 800e28a:	2104      	movs	r1, #4
 800e28c:	2000      	movs	r0, #0
 800e28e:	b510      	push	{r4, lr}
 800e290:	f001 fbfe 	bl	800fa90 <ucdr_alignment>
 800e294:	2104      	movs	r1, #4
 800e296:	1844      	adds	r4, r0, r1
 800e298:	4620      	mov	r0, r4
 800e29a:	f001 fbf9 	bl	800fa90 <ucdr_alignment>
 800e29e:	3004      	adds	r0, #4
 800e2a0:	4420      	add	r0, r4
 800e2a2:	bd10      	pop	{r4, pc}
 800e2a4:	4770      	bx	lr
 800e2a6:	bf00      	nop

0800e2a8 <_Time__max_serialized_size>:
 800e2a8:	b510      	push	{r4, lr}
 800e2aa:	2104      	movs	r1, #4
 800e2ac:	2000      	movs	r0, #0
 800e2ae:	f001 fbef 	bl	800fa90 <ucdr_alignment>
 800e2b2:	2104      	movs	r1, #4
 800e2b4:	1844      	adds	r4, r0, r1
 800e2b6:	4620      	mov	r0, r4
 800e2b8:	f001 fbea 	bl	800fa90 <ucdr_alignment>
 800e2bc:	3004      	adds	r0, #4
 800e2be:	4420      	add	r0, r4
 800e2c0:	bd10      	pop	{r4, pc}
 800e2c2:	bf00      	nop

0800e2c4 <max_serialized_size_builtin_interfaces__msg__Time>:
 800e2c4:	b538      	push	{r3, r4, r5, lr}
 800e2c6:	460c      	mov	r4, r1
 800e2c8:	2301      	movs	r3, #1
 800e2ca:	2104      	movs	r1, #4
 800e2cc:	1d25      	adds	r5, r4, #4
 800e2ce:	7003      	strb	r3, [r0, #0]
 800e2d0:	4620      	mov	r0, r4
 800e2d2:	f1c4 0404 	rsb	r4, r4, #4
 800e2d6:	f001 fbdb 	bl	800fa90 <ucdr_alignment>
 800e2da:	4405      	add	r5, r0
 800e2dc:	2104      	movs	r1, #4
 800e2de:	4628      	mov	r0, r5
 800e2e0:	f001 fbd6 	bl	800fa90 <ucdr_alignment>
 800e2e4:	4420      	add	r0, r4
 800e2e6:	4428      	add	r0, r5
 800e2e8:	bd38      	pop	{r3, r4, r5, pc}
 800e2ea:	bf00      	nop

0800e2ec <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800e2ec:	4800      	ldr	r0, [pc, #0]	; (800e2f0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 800e2ee:	4770      	bx	lr
 800e2f0:	20000b48 	.word	0x20000b48

0800e2f4 <ucdr_serialize_endian_array_char>:
 800e2f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2f8:	4619      	mov	r1, r3
 800e2fa:	461f      	mov	r7, r3
 800e2fc:	4605      	mov	r5, r0
 800e2fe:	4690      	mov	r8, r2
 800e300:	f001 fb6e 	bl	800f9e0 <ucdr_check_buffer_available_for>
 800e304:	b9e0      	cbnz	r0, 800e340 <ucdr_serialize_endian_array_char+0x4c>
 800e306:	463e      	mov	r6, r7
 800e308:	e00b      	b.n	800e322 <ucdr_serialize_endian_array_char+0x2e>
 800e30a:	4441      	add	r1, r8
 800e30c:	68a8      	ldr	r0, [r5, #8]
 800e30e:	4622      	mov	r2, r4
 800e310:	1b36      	subs	r6, r6, r4
 800e312:	f00d f9ac 	bl	801b66e <memcpy>
 800e316:	68ab      	ldr	r3, [r5, #8]
 800e318:	6928      	ldr	r0, [r5, #16]
 800e31a:	4423      	add	r3, r4
 800e31c:	4420      	add	r0, r4
 800e31e:	60ab      	str	r3, [r5, #8]
 800e320:	6128      	str	r0, [r5, #16]
 800e322:	4631      	mov	r1, r6
 800e324:	2201      	movs	r2, #1
 800e326:	4628      	mov	r0, r5
 800e328:	f001 fbe4 	bl	800faf4 <ucdr_check_final_buffer_behavior_array>
 800e32c:	1bb9      	subs	r1, r7, r6
 800e32e:	4604      	mov	r4, r0
 800e330:	2800      	cmp	r0, #0
 800e332:	d1ea      	bne.n	800e30a <ucdr_serialize_endian_array_char+0x16>
 800e334:	2301      	movs	r3, #1
 800e336:	7da8      	ldrb	r0, [r5, #22]
 800e338:	756b      	strb	r3, [r5, #21]
 800e33a:	4058      	eors	r0, r3
 800e33c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e340:	463a      	mov	r2, r7
 800e342:	4641      	mov	r1, r8
 800e344:	68a8      	ldr	r0, [r5, #8]
 800e346:	f00d f992 	bl	801b66e <memcpy>
 800e34a:	68aa      	ldr	r2, [r5, #8]
 800e34c:	692b      	ldr	r3, [r5, #16]
 800e34e:	443a      	add	r2, r7
 800e350:	443b      	add	r3, r7
 800e352:	60aa      	str	r2, [r5, #8]
 800e354:	612b      	str	r3, [r5, #16]
 800e356:	e7ed      	b.n	800e334 <ucdr_serialize_endian_array_char+0x40>

0800e358 <ucdr_deserialize_endian_array_char>:
 800e358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e35c:	4619      	mov	r1, r3
 800e35e:	461f      	mov	r7, r3
 800e360:	4605      	mov	r5, r0
 800e362:	4690      	mov	r8, r2
 800e364:	f001 fb3c 	bl	800f9e0 <ucdr_check_buffer_available_for>
 800e368:	b9e8      	cbnz	r0, 800e3a6 <ucdr_deserialize_endian_array_char+0x4e>
 800e36a:	463e      	mov	r6, r7
 800e36c:	e00c      	b.n	800e388 <ucdr_deserialize_endian_array_char+0x30>
 800e36e:	eb08 0003 	add.w	r0, r8, r3
 800e372:	68a9      	ldr	r1, [r5, #8]
 800e374:	4622      	mov	r2, r4
 800e376:	1b36      	subs	r6, r6, r4
 800e378:	f00d f979 	bl	801b66e <memcpy>
 800e37c:	68ab      	ldr	r3, [r5, #8]
 800e37e:	6928      	ldr	r0, [r5, #16]
 800e380:	4423      	add	r3, r4
 800e382:	4420      	add	r0, r4
 800e384:	60ab      	str	r3, [r5, #8]
 800e386:	6128      	str	r0, [r5, #16]
 800e388:	4631      	mov	r1, r6
 800e38a:	2201      	movs	r2, #1
 800e38c:	4628      	mov	r0, r5
 800e38e:	f001 fbb1 	bl	800faf4 <ucdr_check_final_buffer_behavior_array>
 800e392:	1bbb      	subs	r3, r7, r6
 800e394:	4604      	mov	r4, r0
 800e396:	2800      	cmp	r0, #0
 800e398:	d1e9      	bne.n	800e36e <ucdr_deserialize_endian_array_char+0x16>
 800e39a:	2301      	movs	r3, #1
 800e39c:	7da8      	ldrb	r0, [r5, #22]
 800e39e:	756b      	strb	r3, [r5, #21]
 800e3a0:	4058      	eors	r0, r3
 800e3a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3a6:	463a      	mov	r2, r7
 800e3a8:	68a9      	ldr	r1, [r5, #8]
 800e3aa:	4640      	mov	r0, r8
 800e3ac:	f00d f95f 	bl	801b66e <memcpy>
 800e3b0:	68aa      	ldr	r2, [r5, #8]
 800e3b2:	692b      	ldr	r3, [r5, #16]
 800e3b4:	443a      	add	r2, r7
 800e3b6:	443b      	add	r3, r7
 800e3b8:	60aa      	str	r2, [r5, #8]
 800e3ba:	612b      	str	r3, [r5, #16]
 800e3bc:	e7ed      	b.n	800e39a <ucdr_deserialize_endian_array_char+0x42>
 800e3be:	bf00      	nop

0800e3c0 <ucdr_serialize_array_uint8_t>:
 800e3c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3c4:	4688      	mov	r8, r1
 800e3c6:	4611      	mov	r1, r2
 800e3c8:	4617      	mov	r7, r2
 800e3ca:	4605      	mov	r5, r0
 800e3cc:	f001 fb08 	bl	800f9e0 <ucdr_check_buffer_available_for>
 800e3d0:	b9e0      	cbnz	r0, 800e40c <ucdr_serialize_array_uint8_t+0x4c>
 800e3d2:	463e      	mov	r6, r7
 800e3d4:	e00b      	b.n	800e3ee <ucdr_serialize_array_uint8_t+0x2e>
 800e3d6:	4441      	add	r1, r8
 800e3d8:	68a8      	ldr	r0, [r5, #8]
 800e3da:	4622      	mov	r2, r4
 800e3dc:	1b36      	subs	r6, r6, r4
 800e3de:	f00d f946 	bl	801b66e <memcpy>
 800e3e2:	68ab      	ldr	r3, [r5, #8]
 800e3e4:	6928      	ldr	r0, [r5, #16]
 800e3e6:	4423      	add	r3, r4
 800e3e8:	4420      	add	r0, r4
 800e3ea:	60ab      	str	r3, [r5, #8]
 800e3ec:	6128      	str	r0, [r5, #16]
 800e3ee:	4631      	mov	r1, r6
 800e3f0:	2201      	movs	r2, #1
 800e3f2:	4628      	mov	r0, r5
 800e3f4:	f001 fb7e 	bl	800faf4 <ucdr_check_final_buffer_behavior_array>
 800e3f8:	1bb9      	subs	r1, r7, r6
 800e3fa:	4604      	mov	r4, r0
 800e3fc:	2800      	cmp	r0, #0
 800e3fe:	d1ea      	bne.n	800e3d6 <ucdr_serialize_array_uint8_t+0x16>
 800e400:	2301      	movs	r3, #1
 800e402:	7da8      	ldrb	r0, [r5, #22]
 800e404:	756b      	strb	r3, [r5, #21]
 800e406:	4058      	eors	r0, r3
 800e408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e40c:	463a      	mov	r2, r7
 800e40e:	4641      	mov	r1, r8
 800e410:	68a8      	ldr	r0, [r5, #8]
 800e412:	f00d f92c 	bl	801b66e <memcpy>
 800e416:	68aa      	ldr	r2, [r5, #8]
 800e418:	692b      	ldr	r3, [r5, #16]
 800e41a:	443a      	add	r2, r7
 800e41c:	443b      	add	r3, r7
 800e41e:	60aa      	str	r2, [r5, #8]
 800e420:	612b      	str	r3, [r5, #16]
 800e422:	e7ed      	b.n	800e400 <ucdr_serialize_array_uint8_t+0x40>

0800e424 <ucdr_serialize_endian_array_uint8_t>:
 800e424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e428:	4619      	mov	r1, r3
 800e42a:	461f      	mov	r7, r3
 800e42c:	4605      	mov	r5, r0
 800e42e:	4690      	mov	r8, r2
 800e430:	f001 fad6 	bl	800f9e0 <ucdr_check_buffer_available_for>
 800e434:	b9e0      	cbnz	r0, 800e470 <ucdr_serialize_endian_array_uint8_t+0x4c>
 800e436:	463e      	mov	r6, r7
 800e438:	e00b      	b.n	800e452 <ucdr_serialize_endian_array_uint8_t+0x2e>
 800e43a:	4441      	add	r1, r8
 800e43c:	68a8      	ldr	r0, [r5, #8]
 800e43e:	4622      	mov	r2, r4
 800e440:	1b36      	subs	r6, r6, r4
 800e442:	f00d f914 	bl	801b66e <memcpy>
 800e446:	68ab      	ldr	r3, [r5, #8]
 800e448:	6928      	ldr	r0, [r5, #16]
 800e44a:	4423      	add	r3, r4
 800e44c:	4420      	add	r0, r4
 800e44e:	60ab      	str	r3, [r5, #8]
 800e450:	6128      	str	r0, [r5, #16]
 800e452:	4631      	mov	r1, r6
 800e454:	2201      	movs	r2, #1
 800e456:	4628      	mov	r0, r5
 800e458:	f001 fb4c 	bl	800faf4 <ucdr_check_final_buffer_behavior_array>
 800e45c:	1bb9      	subs	r1, r7, r6
 800e45e:	4604      	mov	r4, r0
 800e460:	2800      	cmp	r0, #0
 800e462:	d1ea      	bne.n	800e43a <ucdr_serialize_endian_array_uint8_t+0x16>
 800e464:	2301      	movs	r3, #1
 800e466:	7da8      	ldrb	r0, [r5, #22]
 800e468:	756b      	strb	r3, [r5, #21]
 800e46a:	4058      	eors	r0, r3
 800e46c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e470:	463a      	mov	r2, r7
 800e472:	4641      	mov	r1, r8
 800e474:	68a8      	ldr	r0, [r5, #8]
 800e476:	f00d f8fa 	bl	801b66e <memcpy>
 800e47a:	68aa      	ldr	r2, [r5, #8]
 800e47c:	692b      	ldr	r3, [r5, #16]
 800e47e:	443a      	add	r2, r7
 800e480:	443b      	add	r3, r7
 800e482:	60aa      	str	r2, [r5, #8]
 800e484:	612b      	str	r3, [r5, #16]
 800e486:	e7ed      	b.n	800e464 <ucdr_serialize_endian_array_uint8_t+0x40>

0800e488 <ucdr_deserialize_array_uint8_t>:
 800e488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e48c:	4688      	mov	r8, r1
 800e48e:	4611      	mov	r1, r2
 800e490:	4617      	mov	r7, r2
 800e492:	4605      	mov	r5, r0
 800e494:	f001 faa4 	bl	800f9e0 <ucdr_check_buffer_available_for>
 800e498:	b9e8      	cbnz	r0, 800e4d6 <ucdr_deserialize_array_uint8_t+0x4e>
 800e49a:	463e      	mov	r6, r7
 800e49c:	e00c      	b.n	800e4b8 <ucdr_deserialize_array_uint8_t+0x30>
 800e49e:	eb08 0003 	add.w	r0, r8, r3
 800e4a2:	68a9      	ldr	r1, [r5, #8]
 800e4a4:	4622      	mov	r2, r4
 800e4a6:	1b36      	subs	r6, r6, r4
 800e4a8:	f00d f8e1 	bl	801b66e <memcpy>
 800e4ac:	68ab      	ldr	r3, [r5, #8]
 800e4ae:	6928      	ldr	r0, [r5, #16]
 800e4b0:	4423      	add	r3, r4
 800e4b2:	4420      	add	r0, r4
 800e4b4:	60ab      	str	r3, [r5, #8]
 800e4b6:	6128      	str	r0, [r5, #16]
 800e4b8:	4631      	mov	r1, r6
 800e4ba:	2201      	movs	r2, #1
 800e4bc:	4628      	mov	r0, r5
 800e4be:	f001 fb19 	bl	800faf4 <ucdr_check_final_buffer_behavior_array>
 800e4c2:	1bbb      	subs	r3, r7, r6
 800e4c4:	4604      	mov	r4, r0
 800e4c6:	2800      	cmp	r0, #0
 800e4c8:	d1e9      	bne.n	800e49e <ucdr_deserialize_array_uint8_t+0x16>
 800e4ca:	2301      	movs	r3, #1
 800e4cc:	7da8      	ldrb	r0, [r5, #22]
 800e4ce:	756b      	strb	r3, [r5, #21]
 800e4d0:	4058      	eors	r0, r3
 800e4d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e4d6:	463a      	mov	r2, r7
 800e4d8:	68a9      	ldr	r1, [r5, #8]
 800e4da:	4640      	mov	r0, r8
 800e4dc:	f00d f8c7 	bl	801b66e <memcpy>
 800e4e0:	68aa      	ldr	r2, [r5, #8]
 800e4e2:	692b      	ldr	r3, [r5, #16]
 800e4e4:	443a      	add	r2, r7
 800e4e6:	443b      	add	r3, r7
 800e4e8:	60aa      	str	r2, [r5, #8]
 800e4ea:	612b      	str	r3, [r5, #16]
 800e4ec:	e7ed      	b.n	800e4ca <ucdr_deserialize_array_uint8_t+0x42>
 800e4ee:	bf00      	nop

0800e4f0 <ucdr_deserialize_endian_array_uint8_t>:
 800e4f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4f4:	4619      	mov	r1, r3
 800e4f6:	461f      	mov	r7, r3
 800e4f8:	4605      	mov	r5, r0
 800e4fa:	4690      	mov	r8, r2
 800e4fc:	f001 fa70 	bl	800f9e0 <ucdr_check_buffer_available_for>
 800e500:	b9e8      	cbnz	r0, 800e53e <ucdr_deserialize_endian_array_uint8_t+0x4e>
 800e502:	463e      	mov	r6, r7
 800e504:	e00c      	b.n	800e520 <ucdr_deserialize_endian_array_uint8_t+0x30>
 800e506:	eb08 0003 	add.w	r0, r8, r3
 800e50a:	68a9      	ldr	r1, [r5, #8]
 800e50c:	4622      	mov	r2, r4
 800e50e:	1b36      	subs	r6, r6, r4
 800e510:	f00d f8ad 	bl	801b66e <memcpy>
 800e514:	68ab      	ldr	r3, [r5, #8]
 800e516:	6928      	ldr	r0, [r5, #16]
 800e518:	4423      	add	r3, r4
 800e51a:	4420      	add	r0, r4
 800e51c:	60ab      	str	r3, [r5, #8]
 800e51e:	6128      	str	r0, [r5, #16]
 800e520:	4631      	mov	r1, r6
 800e522:	2201      	movs	r2, #1
 800e524:	4628      	mov	r0, r5
 800e526:	f001 fae5 	bl	800faf4 <ucdr_check_final_buffer_behavior_array>
 800e52a:	1bbb      	subs	r3, r7, r6
 800e52c:	4604      	mov	r4, r0
 800e52e:	2800      	cmp	r0, #0
 800e530:	d1e9      	bne.n	800e506 <ucdr_deserialize_endian_array_uint8_t+0x16>
 800e532:	2301      	movs	r3, #1
 800e534:	7da8      	ldrb	r0, [r5, #22]
 800e536:	756b      	strb	r3, [r5, #21]
 800e538:	4058      	eors	r0, r3
 800e53a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e53e:	463a      	mov	r2, r7
 800e540:	68a9      	ldr	r1, [r5, #8]
 800e542:	4640      	mov	r0, r8
 800e544:	f00d f893 	bl	801b66e <memcpy>
 800e548:	68aa      	ldr	r2, [r5, #8]
 800e54a:	692b      	ldr	r3, [r5, #16]
 800e54c:	443a      	add	r2, r7
 800e54e:	443b      	add	r3, r7
 800e550:	60aa      	str	r2, [r5, #8]
 800e552:	612b      	str	r3, [r5, #16]
 800e554:	e7ed      	b.n	800e532 <ucdr_deserialize_endian_array_uint8_t+0x42>
 800e556:	bf00      	nop

0800e558 <ucdr_serialize_bool>:
 800e558:	b538      	push	{r3, r4, r5, lr}
 800e55a:	460d      	mov	r5, r1
 800e55c:	2101      	movs	r1, #1
 800e55e:	4604      	mov	r4, r0
 800e560:	f001 fa4a 	bl	800f9f8 <ucdr_check_final_buffer_behavior>
 800e564:	b148      	cbz	r0, 800e57a <ucdr_serialize_bool+0x22>
 800e566:	68a3      	ldr	r3, [r4, #8]
 800e568:	2101      	movs	r1, #1
 800e56a:	701d      	strb	r5, [r3, #0]
 800e56c:	68a2      	ldr	r2, [r4, #8]
 800e56e:	6923      	ldr	r3, [r4, #16]
 800e570:	440a      	add	r2, r1
 800e572:	7561      	strb	r1, [r4, #21]
 800e574:	440b      	add	r3, r1
 800e576:	60a2      	str	r2, [r4, #8]
 800e578:	6123      	str	r3, [r4, #16]
 800e57a:	7da0      	ldrb	r0, [r4, #22]
 800e57c:	f080 0001 	eor.w	r0, r0, #1
 800e580:	bd38      	pop	{r3, r4, r5, pc}
 800e582:	bf00      	nop

0800e584 <ucdr_deserialize_bool>:
 800e584:	b538      	push	{r3, r4, r5, lr}
 800e586:	460d      	mov	r5, r1
 800e588:	2101      	movs	r1, #1
 800e58a:	4604      	mov	r4, r0
 800e58c:	f001 fa34 	bl	800f9f8 <ucdr_check_final_buffer_behavior>
 800e590:	b160      	cbz	r0, 800e5ac <ucdr_deserialize_bool+0x28>
 800e592:	68a2      	ldr	r2, [r4, #8]
 800e594:	2101      	movs	r1, #1
 800e596:	6923      	ldr	r3, [r4, #16]
 800e598:	f812 0b01 	ldrb.w	r0, [r2], #1
 800e59c:	440b      	add	r3, r1
 800e59e:	3800      	subs	r0, #0
 800e5a0:	bf18      	it	ne
 800e5a2:	2001      	movne	r0, #1
 800e5a4:	7028      	strb	r0, [r5, #0]
 800e5a6:	60a2      	str	r2, [r4, #8]
 800e5a8:	6123      	str	r3, [r4, #16]
 800e5aa:	7561      	strb	r1, [r4, #21]
 800e5ac:	7da0      	ldrb	r0, [r4, #22]
 800e5ae:	f080 0001 	eor.w	r0, r0, #1
 800e5b2:	bd38      	pop	{r3, r4, r5, pc}

0800e5b4 <ucdr_serialize_uint8_t>:
 800e5b4:	b538      	push	{r3, r4, r5, lr}
 800e5b6:	460d      	mov	r5, r1
 800e5b8:	2101      	movs	r1, #1
 800e5ba:	4604      	mov	r4, r0
 800e5bc:	f001 fa1c 	bl	800f9f8 <ucdr_check_final_buffer_behavior>
 800e5c0:	b148      	cbz	r0, 800e5d6 <ucdr_serialize_uint8_t+0x22>
 800e5c2:	68a3      	ldr	r3, [r4, #8]
 800e5c4:	2101      	movs	r1, #1
 800e5c6:	701d      	strb	r5, [r3, #0]
 800e5c8:	68a2      	ldr	r2, [r4, #8]
 800e5ca:	6923      	ldr	r3, [r4, #16]
 800e5cc:	440a      	add	r2, r1
 800e5ce:	7561      	strb	r1, [r4, #21]
 800e5d0:	440b      	add	r3, r1
 800e5d2:	60a2      	str	r2, [r4, #8]
 800e5d4:	6123      	str	r3, [r4, #16]
 800e5d6:	7da0      	ldrb	r0, [r4, #22]
 800e5d8:	f080 0001 	eor.w	r0, r0, #1
 800e5dc:	bd38      	pop	{r3, r4, r5, pc}
 800e5de:	bf00      	nop

0800e5e0 <ucdr_deserialize_uint8_t>:
 800e5e0:	b538      	push	{r3, r4, r5, lr}
 800e5e2:	460d      	mov	r5, r1
 800e5e4:	2101      	movs	r1, #1
 800e5e6:	4604      	mov	r4, r0
 800e5e8:	f001 fa06 	bl	800f9f8 <ucdr_check_final_buffer_behavior>
 800e5ec:	b150      	cbz	r0, 800e604 <ucdr_deserialize_uint8_t+0x24>
 800e5ee:	68a3      	ldr	r3, [r4, #8]
 800e5f0:	2101      	movs	r1, #1
 800e5f2:	781b      	ldrb	r3, [r3, #0]
 800e5f4:	702b      	strb	r3, [r5, #0]
 800e5f6:	68a2      	ldr	r2, [r4, #8]
 800e5f8:	6923      	ldr	r3, [r4, #16]
 800e5fa:	440a      	add	r2, r1
 800e5fc:	7561      	strb	r1, [r4, #21]
 800e5fe:	440b      	add	r3, r1
 800e600:	60a2      	str	r2, [r4, #8]
 800e602:	6123      	str	r3, [r4, #16]
 800e604:	7da0      	ldrb	r0, [r4, #22]
 800e606:	f080 0001 	eor.w	r0, r0, #1
 800e60a:	bd38      	pop	{r3, r4, r5, pc}

0800e60c <ucdr_serialize_uint16_t>:
 800e60c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e610:	460b      	mov	r3, r1
 800e612:	b082      	sub	sp, #8
 800e614:	4604      	mov	r4, r0
 800e616:	2102      	movs	r1, #2
 800e618:	f8ad 3006 	strh.w	r3, [sp, #6]
 800e61c:	f001 fa40 	bl	800faa0 <ucdr_buffer_alignment>
 800e620:	4601      	mov	r1, r0
 800e622:	4620      	mov	r0, r4
 800e624:	7d67      	ldrb	r7, [r4, #21]
 800e626:	f001 fa83 	bl	800fb30 <ucdr_advance_buffer>
 800e62a:	2102      	movs	r1, #2
 800e62c:	4620      	mov	r0, r4
 800e62e:	f001 f9d7 	bl	800f9e0 <ucdr_check_buffer_available_for>
 800e632:	bb78      	cbnz	r0, 800e694 <ucdr_serialize_uint16_t+0x88>
 800e634:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800e638:	42ab      	cmp	r3, r5
 800e63a:	d926      	bls.n	800e68a <ucdr_serialize_uint16_t+0x7e>
 800e63c:	1b5e      	subs	r6, r3, r5
 800e63e:	60a3      	str	r3, [r4, #8]
 800e640:	6923      	ldr	r3, [r4, #16]
 800e642:	4620      	mov	r0, r4
 800e644:	f1c6 0802 	rsb	r8, r6, #2
 800e648:	4433      	add	r3, r6
 800e64a:	4641      	mov	r1, r8
 800e64c:	6123      	str	r3, [r4, #16]
 800e64e:	f001 f9d3 	bl	800f9f8 <ucdr_check_final_buffer_behavior>
 800e652:	2800      	cmp	r0, #0
 800e654:	d03b      	beq.n	800e6ce <ucdr_serialize_uint16_t+0xc2>
 800e656:	7d23      	ldrb	r3, [r4, #20]
 800e658:	2b01      	cmp	r3, #1
 800e65a:	d04a      	beq.n	800e6f2 <ucdr_serialize_uint16_t+0xe6>
 800e65c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e660:	702b      	strb	r3, [r5, #0]
 800e662:	2e00      	cmp	r6, #0
 800e664:	d040      	beq.n	800e6e8 <ucdr_serialize_uint16_t+0xdc>
 800e666:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e66a:	706b      	strb	r3, [r5, #1]
 800e66c:	6923      	ldr	r3, [r4, #16]
 800e66e:	2102      	movs	r1, #2
 800e670:	68a2      	ldr	r2, [r4, #8]
 800e672:	3302      	adds	r3, #2
 800e674:	7da0      	ldrb	r0, [r4, #22]
 800e676:	4442      	add	r2, r8
 800e678:	7561      	strb	r1, [r4, #21]
 800e67a:	1b9e      	subs	r6, r3, r6
 800e67c:	f080 0001 	eor.w	r0, r0, #1
 800e680:	60a2      	str	r2, [r4, #8]
 800e682:	6126      	str	r6, [r4, #16]
 800e684:	b002      	add	sp, #8
 800e686:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e68a:	2102      	movs	r1, #2
 800e68c:	4620      	mov	r0, r4
 800e68e:	f001 f9b3 	bl	800f9f8 <ucdr_check_final_buffer_behavior>
 800e692:	b190      	cbz	r0, 800e6ba <ucdr_serialize_uint16_t+0xae>
 800e694:	7d23      	ldrb	r3, [r4, #20]
 800e696:	2b01      	cmp	r3, #1
 800e698:	68a3      	ldr	r3, [r4, #8]
 800e69a:	d014      	beq.n	800e6c6 <ucdr_serialize_uint16_t+0xba>
 800e69c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800e6a0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e6a4:	7019      	strb	r1, [r3, #0]
 800e6a6:	68a3      	ldr	r3, [r4, #8]
 800e6a8:	705a      	strb	r2, [r3, #1]
 800e6aa:	2102      	movs	r1, #2
 800e6ac:	68a2      	ldr	r2, [r4, #8]
 800e6ae:	6923      	ldr	r3, [r4, #16]
 800e6b0:	440a      	add	r2, r1
 800e6b2:	7561      	strb	r1, [r4, #21]
 800e6b4:	440b      	add	r3, r1
 800e6b6:	60a2      	str	r2, [r4, #8]
 800e6b8:	6123      	str	r3, [r4, #16]
 800e6ba:	7da0      	ldrb	r0, [r4, #22]
 800e6bc:	f080 0001 	eor.w	r0, r0, #1
 800e6c0:	b002      	add	sp, #8
 800e6c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6c6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800e6ca:	801a      	strh	r2, [r3, #0]
 800e6cc:	e7ed      	b.n	800e6aa <ucdr_serialize_uint16_t+0x9e>
 800e6ce:	68a2      	ldr	r2, [r4, #8]
 800e6d0:	6923      	ldr	r3, [r4, #16]
 800e6d2:	7da0      	ldrb	r0, [r4, #22]
 800e6d4:	1b92      	subs	r2, r2, r6
 800e6d6:	1b9b      	subs	r3, r3, r6
 800e6d8:	7567      	strb	r7, [r4, #21]
 800e6da:	f080 0001 	eor.w	r0, r0, #1
 800e6de:	60a2      	str	r2, [r4, #8]
 800e6e0:	6123      	str	r3, [r4, #16]
 800e6e2:	b002      	add	sp, #8
 800e6e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6e8:	68a3      	ldr	r3, [r4, #8]
 800e6ea:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e6ee:	701a      	strb	r2, [r3, #0]
 800e6f0:	e7bc      	b.n	800e66c <ucdr_serialize_uint16_t+0x60>
 800e6f2:	4628      	mov	r0, r5
 800e6f4:	f10d 0506 	add.w	r5, sp, #6
 800e6f8:	4632      	mov	r2, r6
 800e6fa:	4629      	mov	r1, r5
 800e6fc:	f00c ffb7 	bl	801b66e <memcpy>
 800e700:	4642      	mov	r2, r8
 800e702:	19a9      	adds	r1, r5, r6
 800e704:	68a0      	ldr	r0, [r4, #8]
 800e706:	f00c ffb2 	bl	801b66e <memcpy>
 800e70a:	e7af      	b.n	800e66c <ucdr_serialize_uint16_t+0x60>

0800e70c <ucdr_serialize_endian_uint16_t>:
 800e70c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e710:	4604      	mov	r4, r0
 800e712:	b083      	sub	sp, #12
 800e714:	460d      	mov	r5, r1
 800e716:	2102      	movs	r1, #2
 800e718:	f8ad 2006 	strh.w	r2, [sp, #6]
 800e71c:	f001 f9c0 	bl	800faa0 <ucdr_buffer_alignment>
 800e720:	4601      	mov	r1, r0
 800e722:	4620      	mov	r0, r4
 800e724:	f894 8015 	ldrb.w	r8, [r4, #21]
 800e728:	f001 fa02 	bl	800fb30 <ucdr_advance_buffer>
 800e72c:	2102      	movs	r1, #2
 800e72e:	4620      	mov	r0, r4
 800e730:	f001 f956 	bl	800f9e0 <ucdr_check_buffer_available_for>
 800e734:	bb70      	cbnz	r0, 800e794 <ucdr_serialize_endian_uint16_t+0x88>
 800e736:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800e73a:	42be      	cmp	r6, r7
 800e73c:	d925      	bls.n	800e78a <ucdr_serialize_endian_uint16_t+0x7e>
 800e73e:	6923      	ldr	r3, [r4, #16]
 800e740:	4620      	mov	r0, r4
 800e742:	60a6      	str	r6, [r4, #8]
 800e744:	1bf6      	subs	r6, r6, r7
 800e746:	4433      	add	r3, r6
 800e748:	f1c6 0902 	rsb	r9, r6, #2
 800e74c:	6123      	str	r3, [r4, #16]
 800e74e:	4649      	mov	r1, r9
 800e750:	f001 f952 	bl	800f9f8 <ucdr_check_final_buffer_behavior>
 800e754:	2800      	cmp	r0, #0
 800e756:	d039      	beq.n	800e7cc <ucdr_serialize_endian_uint16_t+0xc0>
 800e758:	2d01      	cmp	r5, #1
 800e75a:	d04a      	beq.n	800e7f2 <ucdr_serialize_endian_uint16_t+0xe6>
 800e75c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e760:	703b      	strb	r3, [r7, #0]
 800e762:	2e00      	cmp	r6, #0
 800e764:	d040      	beq.n	800e7e8 <ucdr_serialize_endian_uint16_t+0xdc>
 800e766:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e76a:	707b      	strb	r3, [r7, #1]
 800e76c:	6923      	ldr	r3, [r4, #16]
 800e76e:	2102      	movs	r1, #2
 800e770:	68a2      	ldr	r2, [r4, #8]
 800e772:	7da0      	ldrb	r0, [r4, #22]
 800e774:	3302      	adds	r3, #2
 800e776:	444a      	add	r2, r9
 800e778:	7561      	strb	r1, [r4, #21]
 800e77a:	1b9b      	subs	r3, r3, r6
 800e77c:	f080 0001 	eor.w	r0, r0, #1
 800e780:	60a2      	str	r2, [r4, #8]
 800e782:	6123      	str	r3, [r4, #16]
 800e784:	b003      	add	sp, #12
 800e786:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e78a:	2102      	movs	r1, #2
 800e78c:	4620      	mov	r0, r4
 800e78e:	f001 f933 	bl	800f9f8 <ucdr_check_final_buffer_behavior>
 800e792:	b188      	cbz	r0, 800e7b8 <ucdr_serialize_endian_uint16_t+0xac>
 800e794:	2d01      	cmp	r5, #1
 800e796:	68a3      	ldr	r3, [r4, #8]
 800e798:	d014      	beq.n	800e7c4 <ucdr_serialize_endian_uint16_t+0xb8>
 800e79a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800e79e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e7a2:	7019      	strb	r1, [r3, #0]
 800e7a4:	68a3      	ldr	r3, [r4, #8]
 800e7a6:	705a      	strb	r2, [r3, #1]
 800e7a8:	2102      	movs	r1, #2
 800e7aa:	68a2      	ldr	r2, [r4, #8]
 800e7ac:	6923      	ldr	r3, [r4, #16]
 800e7ae:	440a      	add	r2, r1
 800e7b0:	7561      	strb	r1, [r4, #21]
 800e7b2:	440b      	add	r3, r1
 800e7b4:	60a2      	str	r2, [r4, #8]
 800e7b6:	6123      	str	r3, [r4, #16]
 800e7b8:	7da0      	ldrb	r0, [r4, #22]
 800e7ba:	f080 0001 	eor.w	r0, r0, #1
 800e7be:	b003      	add	sp, #12
 800e7c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e7c4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800e7c8:	801a      	strh	r2, [r3, #0]
 800e7ca:	e7ed      	b.n	800e7a8 <ucdr_serialize_endian_uint16_t+0x9c>
 800e7cc:	68a2      	ldr	r2, [r4, #8]
 800e7ce:	6923      	ldr	r3, [r4, #16]
 800e7d0:	7da0      	ldrb	r0, [r4, #22]
 800e7d2:	1b92      	subs	r2, r2, r6
 800e7d4:	1b9b      	subs	r3, r3, r6
 800e7d6:	f884 8015 	strb.w	r8, [r4, #21]
 800e7da:	f080 0001 	eor.w	r0, r0, #1
 800e7de:	60a2      	str	r2, [r4, #8]
 800e7e0:	6123      	str	r3, [r4, #16]
 800e7e2:	b003      	add	sp, #12
 800e7e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e7e8:	68a3      	ldr	r3, [r4, #8]
 800e7ea:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e7ee:	701a      	strb	r2, [r3, #0]
 800e7f0:	e7bc      	b.n	800e76c <ucdr_serialize_endian_uint16_t+0x60>
 800e7f2:	f10d 0506 	add.w	r5, sp, #6
 800e7f6:	4632      	mov	r2, r6
 800e7f8:	4638      	mov	r0, r7
 800e7fa:	4629      	mov	r1, r5
 800e7fc:	f00c ff37 	bl	801b66e <memcpy>
 800e800:	464a      	mov	r2, r9
 800e802:	19a9      	adds	r1, r5, r6
 800e804:	68a0      	ldr	r0, [r4, #8]
 800e806:	f00c ff32 	bl	801b66e <memcpy>
 800e80a:	e7af      	b.n	800e76c <ucdr_serialize_endian_uint16_t+0x60>

0800e80c <ucdr_deserialize_uint16_t>:
 800e80c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e810:	4604      	mov	r4, r0
 800e812:	460d      	mov	r5, r1
 800e814:	2102      	movs	r1, #2
 800e816:	f001 f943 	bl	800faa0 <ucdr_buffer_alignment>
 800e81a:	4601      	mov	r1, r0
 800e81c:	4620      	mov	r0, r4
 800e81e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800e822:	f001 f985 	bl	800fb30 <ucdr_advance_buffer>
 800e826:	2102      	movs	r1, #2
 800e828:	4620      	mov	r0, r4
 800e82a:	f001 f8d9 	bl	800f9e0 <ucdr_check_buffer_available_for>
 800e82e:	bb60      	cbnz	r0, 800e88a <ucdr_deserialize_uint16_t+0x7e>
 800e830:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800e834:	42be      	cmp	r6, r7
 800e836:	d923      	bls.n	800e880 <ucdr_deserialize_uint16_t+0x74>
 800e838:	6923      	ldr	r3, [r4, #16]
 800e83a:	4620      	mov	r0, r4
 800e83c:	60a6      	str	r6, [r4, #8]
 800e83e:	1bf6      	subs	r6, r6, r7
 800e840:	4433      	add	r3, r6
 800e842:	f1c6 0902 	rsb	r9, r6, #2
 800e846:	6123      	str	r3, [r4, #16]
 800e848:	4649      	mov	r1, r9
 800e84a:	f001 f8d5 	bl	800f9f8 <ucdr_check_final_buffer_behavior>
 800e84e:	2800      	cmp	r0, #0
 800e850:	d034      	beq.n	800e8bc <ucdr_deserialize_uint16_t+0xb0>
 800e852:	7d23      	ldrb	r3, [r4, #20]
 800e854:	2b01      	cmp	r3, #1
 800e856:	d042      	beq.n	800e8de <ucdr_deserialize_uint16_t+0xd2>
 800e858:	787b      	ldrb	r3, [r7, #1]
 800e85a:	702b      	strb	r3, [r5, #0]
 800e85c:	2e00      	cmp	r6, #0
 800e85e:	d03a      	beq.n	800e8d6 <ucdr_deserialize_uint16_t+0xca>
 800e860:	783b      	ldrb	r3, [r7, #0]
 800e862:	706b      	strb	r3, [r5, #1]
 800e864:	6923      	ldr	r3, [r4, #16]
 800e866:	2102      	movs	r1, #2
 800e868:	68a2      	ldr	r2, [r4, #8]
 800e86a:	3302      	adds	r3, #2
 800e86c:	7da0      	ldrb	r0, [r4, #22]
 800e86e:	444a      	add	r2, r9
 800e870:	7561      	strb	r1, [r4, #21]
 800e872:	1b9b      	subs	r3, r3, r6
 800e874:	f080 0001 	eor.w	r0, r0, #1
 800e878:	60a2      	str	r2, [r4, #8]
 800e87a:	6123      	str	r3, [r4, #16]
 800e87c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e880:	2102      	movs	r1, #2
 800e882:	4620      	mov	r0, r4
 800e884:	f001 f8b8 	bl	800f9f8 <ucdr_check_final_buffer_behavior>
 800e888:	b180      	cbz	r0, 800e8ac <ucdr_deserialize_uint16_t+0xa0>
 800e88a:	7d23      	ldrb	r3, [r4, #20]
 800e88c:	2b01      	cmp	r3, #1
 800e88e:	68a3      	ldr	r3, [r4, #8]
 800e890:	d011      	beq.n	800e8b6 <ucdr_deserialize_uint16_t+0xaa>
 800e892:	785b      	ldrb	r3, [r3, #1]
 800e894:	702b      	strb	r3, [r5, #0]
 800e896:	68a3      	ldr	r3, [r4, #8]
 800e898:	781b      	ldrb	r3, [r3, #0]
 800e89a:	706b      	strb	r3, [r5, #1]
 800e89c:	2102      	movs	r1, #2
 800e89e:	68a2      	ldr	r2, [r4, #8]
 800e8a0:	6923      	ldr	r3, [r4, #16]
 800e8a2:	440a      	add	r2, r1
 800e8a4:	7561      	strb	r1, [r4, #21]
 800e8a6:	440b      	add	r3, r1
 800e8a8:	60a2      	str	r2, [r4, #8]
 800e8aa:	6123      	str	r3, [r4, #16]
 800e8ac:	7da0      	ldrb	r0, [r4, #22]
 800e8ae:	f080 0001 	eor.w	r0, r0, #1
 800e8b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e8b6:	881b      	ldrh	r3, [r3, #0]
 800e8b8:	802b      	strh	r3, [r5, #0]
 800e8ba:	e7ef      	b.n	800e89c <ucdr_deserialize_uint16_t+0x90>
 800e8bc:	68a2      	ldr	r2, [r4, #8]
 800e8be:	6923      	ldr	r3, [r4, #16]
 800e8c0:	1b92      	subs	r2, r2, r6
 800e8c2:	7da0      	ldrb	r0, [r4, #22]
 800e8c4:	1b9b      	subs	r3, r3, r6
 800e8c6:	f884 8015 	strb.w	r8, [r4, #21]
 800e8ca:	f080 0001 	eor.w	r0, r0, #1
 800e8ce:	60a2      	str	r2, [r4, #8]
 800e8d0:	6123      	str	r3, [r4, #16]
 800e8d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e8d6:	68a3      	ldr	r3, [r4, #8]
 800e8d8:	781b      	ldrb	r3, [r3, #0]
 800e8da:	706b      	strb	r3, [r5, #1]
 800e8dc:	e7c2      	b.n	800e864 <ucdr_deserialize_uint16_t+0x58>
 800e8de:	4639      	mov	r1, r7
 800e8e0:	4632      	mov	r2, r6
 800e8e2:	4628      	mov	r0, r5
 800e8e4:	f00c fec3 	bl	801b66e <memcpy>
 800e8e8:	464a      	mov	r2, r9
 800e8ea:	19a8      	adds	r0, r5, r6
 800e8ec:	68a1      	ldr	r1, [r4, #8]
 800e8ee:	f00c febe 	bl	801b66e <memcpy>
 800e8f2:	e7b7      	b.n	800e864 <ucdr_deserialize_uint16_t+0x58>

0800e8f4 <ucdr_deserialize_endian_uint16_t>:
 800e8f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e8f8:	4604      	mov	r4, r0
 800e8fa:	460e      	mov	r6, r1
 800e8fc:	2102      	movs	r1, #2
 800e8fe:	4615      	mov	r5, r2
 800e900:	f001 f8ce 	bl	800faa0 <ucdr_buffer_alignment>
 800e904:	4601      	mov	r1, r0
 800e906:	4620      	mov	r0, r4
 800e908:	f894 8015 	ldrb.w	r8, [r4, #21]
 800e90c:	f001 f910 	bl	800fb30 <ucdr_advance_buffer>
 800e910:	2102      	movs	r1, #2
 800e912:	4620      	mov	r0, r4
 800e914:	f001 f864 	bl	800f9e0 <ucdr_check_buffer_available_for>
 800e918:	bb70      	cbnz	r0, 800e978 <ucdr_deserialize_endian_uint16_t+0x84>
 800e91a:	e9d4 7901 	ldrd	r7, r9, [r4, #4]
 800e91e:	454f      	cmp	r7, r9
 800e920:	d925      	bls.n	800e96e <ucdr_deserialize_endian_uint16_t+0x7a>
 800e922:	6923      	ldr	r3, [r4, #16]
 800e924:	4620      	mov	r0, r4
 800e926:	60a7      	str	r7, [r4, #8]
 800e928:	eba7 0709 	sub.w	r7, r7, r9
 800e92c:	443b      	add	r3, r7
 800e92e:	f1c7 0a02 	rsb	sl, r7, #2
 800e932:	6123      	str	r3, [r4, #16]
 800e934:	4651      	mov	r1, sl
 800e936:	f001 f85f 	bl	800f9f8 <ucdr_check_final_buffer_behavior>
 800e93a:	2800      	cmp	r0, #0
 800e93c:	d034      	beq.n	800e9a8 <ucdr_deserialize_endian_uint16_t+0xb4>
 800e93e:	2e01      	cmp	r6, #1
 800e940:	d043      	beq.n	800e9ca <ucdr_deserialize_endian_uint16_t+0xd6>
 800e942:	f899 3001 	ldrb.w	r3, [r9, #1]
 800e946:	702b      	strb	r3, [r5, #0]
 800e948:	2f00      	cmp	r7, #0
 800e94a:	d03a      	beq.n	800e9c2 <ucdr_deserialize_endian_uint16_t+0xce>
 800e94c:	f899 3000 	ldrb.w	r3, [r9]
 800e950:	706b      	strb	r3, [r5, #1]
 800e952:	6923      	ldr	r3, [r4, #16]
 800e954:	2102      	movs	r1, #2
 800e956:	68a2      	ldr	r2, [r4, #8]
 800e958:	3302      	adds	r3, #2
 800e95a:	7da0      	ldrb	r0, [r4, #22]
 800e95c:	4452      	add	r2, sl
 800e95e:	7561      	strb	r1, [r4, #21]
 800e960:	1bdb      	subs	r3, r3, r7
 800e962:	f080 0001 	eor.w	r0, r0, #1
 800e966:	60a2      	str	r2, [r4, #8]
 800e968:	6123      	str	r3, [r4, #16]
 800e96a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e96e:	2102      	movs	r1, #2
 800e970:	4620      	mov	r0, r4
 800e972:	f001 f841 	bl	800f9f8 <ucdr_check_final_buffer_behavior>
 800e976:	b178      	cbz	r0, 800e998 <ucdr_deserialize_endian_uint16_t+0xa4>
 800e978:	2e01      	cmp	r6, #1
 800e97a:	68a3      	ldr	r3, [r4, #8]
 800e97c:	d011      	beq.n	800e9a2 <ucdr_deserialize_endian_uint16_t+0xae>
 800e97e:	785b      	ldrb	r3, [r3, #1]
 800e980:	702b      	strb	r3, [r5, #0]
 800e982:	68a3      	ldr	r3, [r4, #8]
 800e984:	781b      	ldrb	r3, [r3, #0]
 800e986:	706b      	strb	r3, [r5, #1]
 800e988:	2102      	movs	r1, #2
 800e98a:	68a2      	ldr	r2, [r4, #8]
 800e98c:	6923      	ldr	r3, [r4, #16]
 800e98e:	440a      	add	r2, r1
 800e990:	7561      	strb	r1, [r4, #21]
 800e992:	440b      	add	r3, r1
 800e994:	60a2      	str	r2, [r4, #8]
 800e996:	6123      	str	r3, [r4, #16]
 800e998:	7da0      	ldrb	r0, [r4, #22]
 800e99a:	f080 0001 	eor.w	r0, r0, #1
 800e99e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9a2:	881b      	ldrh	r3, [r3, #0]
 800e9a4:	802b      	strh	r3, [r5, #0]
 800e9a6:	e7ef      	b.n	800e988 <ucdr_deserialize_endian_uint16_t+0x94>
 800e9a8:	68a2      	ldr	r2, [r4, #8]
 800e9aa:	6923      	ldr	r3, [r4, #16]
 800e9ac:	1bd2      	subs	r2, r2, r7
 800e9ae:	7da0      	ldrb	r0, [r4, #22]
 800e9b0:	1bdb      	subs	r3, r3, r7
 800e9b2:	f884 8015 	strb.w	r8, [r4, #21]
 800e9b6:	f080 0001 	eor.w	r0, r0, #1
 800e9ba:	60a2      	str	r2, [r4, #8]
 800e9bc:	6123      	str	r3, [r4, #16]
 800e9be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9c2:	68a3      	ldr	r3, [r4, #8]
 800e9c4:	781b      	ldrb	r3, [r3, #0]
 800e9c6:	706b      	strb	r3, [r5, #1]
 800e9c8:	e7c3      	b.n	800e952 <ucdr_deserialize_endian_uint16_t+0x5e>
 800e9ca:	4649      	mov	r1, r9
 800e9cc:	463a      	mov	r2, r7
 800e9ce:	4628      	mov	r0, r5
 800e9d0:	f00c fe4d 	bl	801b66e <memcpy>
 800e9d4:	4652      	mov	r2, sl
 800e9d6:	19e8      	adds	r0, r5, r7
 800e9d8:	68a1      	ldr	r1, [r4, #8]
 800e9da:	f00c fe48 	bl	801b66e <memcpy>
 800e9de:	e7b8      	b.n	800e952 <ucdr_deserialize_endian_uint16_t+0x5e>

0800e9e0 <ucdr_serialize_uint32_t>:
 800e9e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9e4:	b082      	sub	sp, #8
 800e9e6:	4604      	mov	r4, r0
 800e9e8:	9101      	str	r1, [sp, #4]
 800e9ea:	2104      	movs	r1, #4
 800e9ec:	f001 f858 	bl	800faa0 <ucdr_buffer_alignment>
 800e9f0:	4601      	mov	r1, r0
 800e9f2:	4620      	mov	r0, r4
 800e9f4:	7d67      	ldrb	r7, [r4, #21]
 800e9f6:	f001 f89b 	bl	800fb30 <ucdr_advance_buffer>
 800e9fa:	2104      	movs	r1, #4
 800e9fc:	4620      	mov	r0, r4
 800e9fe:	f000 ffef 	bl	800f9e0 <ucdr_check_buffer_available_for>
 800ea02:	2800      	cmp	r0, #0
 800ea04:	d139      	bne.n	800ea7a <ucdr_serialize_uint32_t+0x9a>
 800ea06:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800ea0a:	42ab      	cmp	r3, r5
 800ea0c:	d930      	bls.n	800ea70 <ucdr_serialize_uint32_t+0x90>
 800ea0e:	1b5e      	subs	r6, r3, r5
 800ea10:	60a3      	str	r3, [r4, #8]
 800ea12:	6923      	ldr	r3, [r4, #16]
 800ea14:	4620      	mov	r0, r4
 800ea16:	f1c6 0804 	rsb	r8, r6, #4
 800ea1a:	4433      	add	r3, r6
 800ea1c:	4641      	mov	r1, r8
 800ea1e:	6123      	str	r3, [r4, #16]
 800ea20:	f000 ffea 	bl	800f9f8 <ucdr_check_final_buffer_behavior>
 800ea24:	2800      	cmp	r0, #0
 800ea26:	d04c      	beq.n	800eac2 <ucdr_serialize_uint32_t+0xe2>
 800ea28:	7d23      	ldrb	r3, [r4, #20]
 800ea2a:	2b01      	cmp	r3, #1
 800ea2c:	d063      	beq.n	800eaf6 <ucdr_serialize_uint32_t+0x116>
 800ea2e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ea32:	702b      	strb	r3, [r5, #0]
 800ea34:	2e00      	cmp	r6, #0
 800ea36:	d051      	beq.n	800eadc <ucdr_serialize_uint32_t+0xfc>
 800ea38:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ea3c:	2e01      	cmp	r6, #1
 800ea3e:	706b      	strb	r3, [r5, #1]
 800ea40:	d050      	beq.n	800eae4 <ucdr_serialize_uint32_t+0x104>
 800ea42:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ea46:	2e02      	cmp	r6, #2
 800ea48:	70ab      	strb	r3, [r5, #2]
 800ea4a:	d04f      	beq.n	800eaec <ucdr_serialize_uint32_t+0x10c>
 800ea4c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ea50:	70eb      	strb	r3, [r5, #3]
 800ea52:	6923      	ldr	r3, [r4, #16]
 800ea54:	2104      	movs	r1, #4
 800ea56:	68a2      	ldr	r2, [r4, #8]
 800ea58:	3304      	adds	r3, #4
 800ea5a:	7da0      	ldrb	r0, [r4, #22]
 800ea5c:	4442      	add	r2, r8
 800ea5e:	7561      	strb	r1, [r4, #21]
 800ea60:	1b9e      	subs	r6, r3, r6
 800ea62:	f080 0001 	eor.w	r0, r0, #1
 800ea66:	60a2      	str	r2, [r4, #8]
 800ea68:	6126      	str	r6, [r4, #16]
 800ea6a:	b002      	add	sp, #8
 800ea6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea70:	2104      	movs	r1, #4
 800ea72:	4620      	mov	r0, r4
 800ea74:	f000 ffc0 	bl	800f9f8 <ucdr_check_final_buffer_behavior>
 800ea78:	b1d0      	cbz	r0, 800eab0 <ucdr_serialize_uint32_t+0xd0>
 800ea7a:	7d23      	ldrb	r3, [r4, #20]
 800ea7c:	2b01      	cmp	r3, #1
 800ea7e:	68a3      	ldr	r3, [r4, #8]
 800ea80:	d01c      	beq.n	800eabc <ucdr_serialize_uint32_t+0xdc>
 800ea82:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800ea86:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ea8a:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800ea8e:	7018      	strb	r0, [r3, #0]
 800ea90:	68a3      	ldr	r3, [r4, #8]
 800ea92:	705a      	strb	r2, [r3, #1]
 800ea94:	68a3      	ldr	r3, [r4, #8]
 800ea96:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ea9a:	7099      	strb	r1, [r3, #2]
 800ea9c:	68a3      	ldr	r3, [r4, #8]
 800ea9e:	70da      	strb	r2, [r3, #3]
 800eaa0:	2104      	movs	r1, #4
 800eaa2:	68a2      	ldr	r2, [r4, #8]
 800eaa4:	6923      	ldr	r3, [r4, #16]
 800eaa6:	440a      	add	r2, r1
 800eaa8:	7561      	strb	r1, [r4, #21]
 800eaaa:	440b      	add	r3, r1
 800eaac:	60a2      	str	r2, [r4, #8]
 800eaae:	6123      	str	r3, [r4, #16]
 800eab0:	7da0      	ldrb	r0, [r4, #22]
 800eab2:	f080 0001 	eor.w	r0, r0, #1
 800eab6:	b002      	add	sp, #8
 800eab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eabc:	9a01      	ldr	r2, [sp, #4]
 800eabe:	601a      	str	r2, [r3, #0]
 800eac0:	e7ee      	b.n	800eaa0 <ucdr_serialize_uint32_t+0xc0>
 800eac2:	68a2      	ldr	r2, [r4, #8]
 800eac4:	6923      	ldr	r3, [r4, #16]
 800eac6:	7da0      	ldrb	r0, [r4, #22]
 800eac8:	1b92      	subs	r2, r2, r6
 800eaca:	1b9b      	subs	r3, r3, r6
 800eacc:	7567      	strb	r7, [r4, #21]
 800eace:	f080 0001 	eor.w	r0, r0, #1
 800ead2:	60a2      	str	r2, [r4, #8]
 800ead4:	6123      	str	r3, [r4, #16]
 800ead6:	b002      	add	sp, #8
 800ead8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eadc:	68a3      	ldr	r3, [r4, #8]
 800eade:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800eae2:	701a      	strb	r2, [r3, #0]
 800eae4:	68a3      	ldr	r3, [r4, #8]
 800eae6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800eaea:	701a      	strb	r2, [r3, #0]
 800eaec:	68a3      	ldr	r3, [r4, #8]
 800eaee:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800eaf2:	701a      	strb	r2, [r3, #0]
 800eaf4:	e7ad      	b.n	800ea52 <ucdr_serialize_uint32_t+0x72>
 800eaf6:	4628      	mov	r0, r5
 800eaf8:	ad01      	add	r5, sp, #4
 800eafa:	4632      	mov	r2, r6
 800eafc:	4629      	mov	r1, r5
 800eafe:	f00c fdb6 	bl	801b66e <memcpy>
 800eb02:	4642      	mov	r2, r8
 800eb04:	19a9      	adds	r1, r5, r6
 800eb06:	68a0      	ldr	r0, [r4, #8]
 800eb08:	f00c fdb1 	bl	801b66e <memcpy>
 800eb0c:	e7a1      	b.n	800ea52 <ucdr_serialize_uint32_t+0x72>
 800eb0e:	bf00      	nop

0800eb10 <ucdr_serialize_endian_uint32_t>:
 800eb10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800eb14:	4604      	mov	r4, r0
 800eb16:	b083      	sub	sp, #12
 800eb18:	460d      	mov	r5, r1
 800eb1a:	2104      	movs	r1, #4
 800eb1c:	9201      	str	r2, [sp, #4]
 800eb1e:	f000 ffbf 	bl	800faa0 <ucdr_buffer_alignment>
 800eb22:	4601      	mov	r1, r0
 800eb24:	4620      	mov	r0, r4
 800eb26:	f894 8015 	ldrb.w	r8, [r4, #21]
 800eb2a:	f001 f801 	bl	800fb30 <ucdr_advance_buffer>
 800eb2e:	2104      	movs	r1, #4
 800eb30:	4620      	mov	r0, r4
 800eb32:	f000 ff55 	bl	800f9e0 <ucdr_check_buffer_available_for>
 800eb36:	2800      	cmp	r0, #0
 800eb38:	d138      	bne.n	800ebac <ucdr_serialize_endian_uint32_t+0x9c>
 800eb3a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800eb3e:	42b7      	cmp	r7, r6
 800eb40:	d92f      	bls.n	800eba2 <ucdr_serialize_endian_uint32_t+0x92>
 800eb42:	6923      	ldr	r3, [r4, #16]
 800eb44:	4620      	mov	r0, r4
 800eb46:	60a7      	str	r7, [r4, #8]
 800eb48:	1bbf      	subs	r7, r7, r6
 800eb4a:	443b      	add	r3, r7
 800eb4c:	f1c7 0904 	rsb	r9, r7, #4
 800eb50:	6123      	str	r3, [r4, #16]
 800eb52:	4649      	mov	r1, r9
 800eb54:	f000 ff50 	bl	800f9f8 <ucdr_check_final_buffer_behavior>
 800eb58:	2800      	cmp	r0, #0
 800eb5a:	d04a      	beq.n	800ebf2 <ucdr_serialize_endian_uint32_t+0xe2>
 800eb5c:	2d01      	cmp	r5, #1
 800eb5e:	d063      	beq.n	800ec28 <ucdr_serialize_endian_uint32_t+0x118>
 800eb60:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800eb64:	7033      	strb	r3, [r6, #0]
 800eb66:	2f00      	cmp	r7, #0
 800eb68:	d051      	beq.n	800ec0e <ucdr_serialize_endian_uint32_t+0xfe>
 800eb6a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800eb6e:	2f01      	cmp	r7, #1
 800eb70:	7073      	strb	r3, [r6, #1]
 800eb72:	d050      	beq.n	800ec16 <ucdr_serialize_endian_uint32_t+0x106>
 800eb74:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800eb78:	2f02      	cmp	r7, #2
 800eb7a:	70b3      	strb	r3, [r6, #2]
 800eb7c:	d04f      	beq.n	800ec1e <ucdr_serialize_endian_uint32_t+0x10e>
 800eb7e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800eb82:	70f3      	strb	r3, [r6, #3]
 800eb84:	6923      	ldr	r3, [r4, #16]
 800eb86:	2104      	movs	r1, #4
 800eb88:	68a2      	ldr	r2, [r4, #8]
 800eb8a:	7da0      	ldrb	r0, [r4, #22]
 800eb8c:	3304      	adds	r3, #4
 800eb8e:	444a      	add	r2, r9
 800eb90:	7561      	strb	r1, [r4, #21]
 800eb92:	1bdb      	subs	r3, r3, r7
 800eb94:	f080 0001 	eor.w	r0, r0, #1
 800eb98:	60a2      	str	r2, [r4, #8]
 800eb9a:	6123      	str	r3, [r4, #16]
 800eb9c:	b003      	add	sp, #12
 800eb9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eba2:	2104      	movs	r1, #4
 800eba4:	4620      	mov	r0, r4
 800eba6:	f000 ff27 	bl	800f9f8 <ucdr_check_final_buffer_behavior>
 800ebaa:	b1c8      	cbz	r0, 800ebe0 <ucdr_serialize_endian_uint32_t+0xd0>
 800ebac:	2d01      	cmp	r5, #1
 800ebae:	68a3      	ldr	r3, [r4, #8]
 800ebb0:	d01c      	beq.n	800ebec <ucdr_serialize_endian_uint32_t+0xdc>
 800ebb2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800ebb6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ebba:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800ebbe:	7018      	strb	r0, [r3, #0]
 800ebc0:	68a3      	ldr	r3, [r4, #8]
 800ebc2:	705a      	strb	r2, [r3, #1]
 800ebc4:	68a3      	ldr	r3, [r4, #8]
 800ebc6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ebca:	7099      	strb	r1, [r3, #2]
 800ebcc:	68a3      	ldr	r3, [r4, #8]
 800ebce:	70da      	strb	r2, [r3, #3]
 800ebd0:	2104      	movs	r1, #4
 800ebd2:	68a2      	ldr	r2, [r4, #8]
 800ebd4:	6923      	ldr	r3, [r4, #16]
 800ebd6:	440a      	add	r2, r1
 800ebd8:	7561      	strb	r1, [r4, #21]
 800ebda:	440b      	add	r3, r1
 800ebdc:	60a2      	str	r2, [r4, #8]
 800ebde:	6123      	str	r3, [r4, #16]
 800ebe0:	7da0      	ldrb	r0, [r4, #22]
 800ebe2:	f080 0001 	eor.w	r0, r0, #1
 800ebe6:	b003      	add	sp, #12
 800ebe8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ebec:	9a01      	ldr	r2, [sp, #4]
 800ebee:	601a      	str	r2, [r3, #0]
 800ebf0:	e7ee      	b.n	800ebd0 <ucdr_serialize_endian_uint32_t+0xc0>
 800ebf2:	68a2      	ldr	r2, [r4, #8]
 800ebf4:	6923      	ldr	r3, [r4, #16]
 800ebf6:	7da0      	ldrb	r0, [r4, #22]
 800ebf8:	1bd2      	subs	r2, r2, r7
 800ebfa:	1bdb      	subs	r3, r3, r7
 800ebfc:	f884 8015 	strb.w	r8, [r4, #21]
 800ec00:	f080 0001 	eor.w	r0, r0, #1
 800ec04:	60a2      	str	r2, [r4, #8]
 800ec06:	6123      	str	r3, [r4, #16]
 800ec08:	b003      	add	sp, #12
 800ec0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ec0e:	68a3      	ldr	r3, [r4, #8]
 800ec10:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ec14:	701a      	strb	r2, [r3, #0]
 800ec16:	68a3      	ldr	r3, [r4, #8]
 800ec18:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ec1c:	701a      	strb	r2, [r3, #0]
 800ec1e:	68a3      	ldr	r3, [r4, #8]
 800ec20:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ec24:	701a      	strb	r2, [r3, #0]
 800ec26:	e7ad      	b.n	800eb84 <ucdr_serialize_endian_uint32_t+0x74>
 800ec28:	ad01      	add	r5, sp, #4
 800ec2a:	463a      	mov	r2, r7
 800ec2c:	4630      	mov	r0, r6
 800ec2e:	4629      	mov	r1, r5
 800ec30:	f00c fd1d 	bl	801b66e <memcpy>
 800ec34:	464a      	mov	r2, r9
 800ec36:	19e9      	adds	r1, r5, r7
 800ec38:	68a0      	ldr	r0, [r4, #8]
 800ec3a:	f00c fd18 	bl	801b66e <memcpy>
 800ec3e:	e7a1      	b.n	800eb84 <ucdr_serialize_endian_uint32_t+0x74>

0800ec40 <ucdr_deserialize_uint32_t>:
 800ec40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ec44:	4604      	mov	r4, r0
 800ec46:	460d      	mov	r5, r1
 800ec48:	2104      	movs	r1, #4
 800ec4a:	f000 ff29 	bl	800faa0 <ucdr_buffer_alignment>
 800ec4e:	4601      	mov	r1, r0
 800ec50:	4620      	mov	r0, r4
 800ec52:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ec56:	f000 ff6b 	bl	800fb30 <ucdr_advance_buffer>
 800ec5a:	2104      	movs	r1, #4
 800ec5c:	4620      	mov	r0, r4
 800ec5e:	f000 febf 	bl	800f9e0 <ucdr_check_buffer_available_for>
 800ec62:	2800      	cmp	r0, #0
 800ec64:	d138      	bne.n	800ecd8 <ucdr_deserialize_uint32_t+0x98>
 800ec66:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800ec6a:	42b7      	cmp	r7, r6
 800ec6c:	d92f      	bls.n	800ecce <ucdr_deserialize_uint32_t+0x8e>
 800ec6e:	6923      	ldr	r3, [r4, #16]
 800ec70:	4620      	mov	r0, r4
 800ec72:	60a7      	str	r7, [r4, #8]
 800ec74:	1bbf      	subs	r7, r7, r6
 800ec76:	443b      	add	r3, r7
 800ec78:	f1c7 0904 	rsb	r9, r7, #4
 800ec7c:	6123      	str	r3, [r4, #16]
 800ec7e:	4649      	mov	r1, r9
 800ec80:	f000 feba 	bl	800f9f8 <ucdr_check_final_buffer_behavior>
 800ec84:	2800      	cmp	r0, #0
 800ec86:	d046      	beq.n	800ed16 <ucdr_deserialize_uint32_t+0xd6>
 800ec88:	7d23      	ldrb	r3, [r4, #20]
 800ec8a:	2b01      	cmp	r3, #1
 800ec8c:	d05c      	beq.n	800ed48 <ucdr_deserialize_uint32_t+0x108>
 800ec8e:	78f3      	ldrb	r3, [r6, #3]
 800ec90:	702b      	strb	r3, [r5, #0]
 800ec92:	2f00      	cmp	r7, #0
 800ec94:	d04c      	beq.n	800ed30 <ucdr_deserialize_uint32_t+0xf0>
 800ec96:	78b3      	ldrb	r3, [r6, #2]
 800ec98:	2f01      	cmp	r7, #1
 800ec9a:	706b      	strb	r3, [r5, #1]
 800ec9c:	f105 0302 	add.w	r3, r5, #2
 800eca0:	d04a      	beq.n	800ed38 <ucdr_deserialize_uint32_t+0xf8>
 800eca2:	7873      	ldrb	r3, [r6, #1]
 800eca4:	2f02      	cmp	r7, #2
 800eca6:	70ab      	strb	r3, [r5, #2]
 800eca8:	f105 0303 	add.w	r3, r5, #3
 800ecac:	d048      	beq.n	800ed40 <ucdr_deserialize_uint32_t+0x100>
 800ecae:	7833      	ldrb	r3, [r6, #0]
 800ecb0:	70eb      	strb	r3, [r5, #3]
 800ecb2:	6923      	ldr	r3, [r4, #16]
 800ecb4:	2104      	movs	r1, #4
 800ecb6:	68a2      	ldr	r2, [r4, #8]
 800ecb8:	3304      	adds	r3, #4
 800ecba:	7da0      	ldrb	r0, [r4, #22]
 800ecbc:	444a      	add	r2, r9
 800ecbe:	7561      	strb	r1, [r4, #21]
 800ecc0:	1bdb      	subs	r3, r3, r7
 800ecc2:	f080 0001 	eor.w	r0, r0, #1
 800ecc6:	60a2      	str	r2, [r4, #8]
 800ecc8:	6123      	str	r3, [r4, #16]
 800ecca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ecce:	2104      	movs	r1, #4
 800ecd0:	4620      	mov	r0, r4
 800ecd2:	f000 fe91 	bl	800f9f8 <ucdr_check_final_buffer_behavior>
 800ecd6:	b1b0      	cbz	r0, 800ed06 <ucdr_deserialize_uint32_t+0xc6>
 800ecd8:	7d23      	ldrb	r3, [r4, #20]
 800ecda:	2b01      	cmp	r3, #1
 800ecdc:	68a3      	ldr	r3, [r4, #8]
 800ecde:	d017      	beq.n	800ed10 <ucdr_deserialize_uint32_t+0xd0>
 800ece0:	78db      	ldrb	r3, [r3, #3]
 800ece2:	702b      	strb	r3, [r5, #0]
 800ece4:	68a3      	ldr	r3, [r4, #8]
 800ece6:	789b      	ldrb	r3, [r3, #2]
 800ece8:	706b      	strb	r3, [r5, #1]
 800ecea:	68a3      	ldr	r3, [r4, #8]
 800ecec:	785b      	ldrb	r3, [r3, #1]
 800ecee:	70ab      	strb	r3, [r5, #2]
 800ecf0:	68a3      	ldr	r3, [r4, #8]
 800ecf2:	781b      	ldrb	r3, [r3, #0]
 800ecf4:	70eb      	strb	r3, [r5, #3]
 800ecf6:	2104      	movs	r1, #4
 800ecf8:	68a2      	ldr	r2, [r4, #8]
 800ecfa:	6923      	ldr	r3, [r4, #16]
 800ecfc:	440a      	add	r2, r1
 800ecfe:	7561      	strb	r1, [r4, #21]
 800ed00:	440b      	add	r3, r1
 800ed02:	60a2      	str	r2, [r4, #8]
 800ed04:	6123      	str	r3, [r4, #16]
 800ed06:	7da0      	ldrb	r0, [r4, #22]
 800ed08:	f080 0001 	eor.w	r0, r0, #1
 800ed0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	602b      	str	r3, [r5, #0]
 800ed14:	e7ef      	b.n	800ecf6 <ucdr_deserialize_uint32_t+0xb6>
 800ed16:	68a2      	ldr	r2, [r4, #8]
 800ed18:	6923      	ldr	r3, [r4, #16]
 800ed1a:	1bd2      	subs	r2, r2, r7
 800ed1c:	7da0      	ldrb	r0, [r4, #22]
 800ed1e:	1bdb      	subs	r3, r3, r7
 800ed20:	f884 8015 	strb.w	r8, [r4, #21]
 800ed24:	f080 0001 	eor.w	r0, r0, #1
 800ed28:	60a2      	str	r2, [r4, #8]
 800ed2a:	6123      	str	r3, [r4, #16]
 800ed2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed30:	68a3      	ldr	r3, [r4, #8]
 800ed32:	789b      	ldrb	r3, [r3, #2]
 800ed34:	706b      	strb	r3, [r5, #1]
 800ed36:	1cab      	adds	r3, r5, #2
 800ed38:	68a2      	ldr	r2, [r4, #8]
 800ed3a:	7852      	ldrb	r2, [r2, #1]
 800ed3c:	f803 2b01 	strb.w	r2, [r3], #1
 800ed40:	68a2      	ldr	r2, [r4, #8]
 800ed42:	7812      	ldrb	r2, [r2, #0]
 800ed44:	701a      	strb	r2, [r3, #0]
 800ed46:	e7b4      	b.n	800ecb2 <ucdr_deserialize_uint32_t+0x72>
 800ed48:	4631      	mov	r1, r6
 800ed4a:	463a      	mov	r2, r7
 800ed4c:	4628      	mov	r0, r5
 800ed4e:	f00c fc8e 	bl	801b66e <memcpy>
 800ed52:	464a      	mov	r2, r9
 800ed54:	19e8      	adds	r0, r5, r7
 800ed56:	68a1      	ldr	r1, [r4, #8]
 800ed58:	f00c fc89 	bl	801b66e <memcpy>
 800ed5c:	e7a9      	b.n	800ecb2 <ucdr_deserialize_uint32_t+0x72>
 800ed5e:	bf00      	nop

0800ed60 <ucdr_deserialize_endian_uint32_t>:
 800ed60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed64:	4604      	mov	r4, r0
 800ed66:	460e      	mov	r6, r1
 800ed68:	2104      	movs	r1, #4
 800ed6a:	4615      	mov	r5, r2
 800ed6c:	f000 fe98 	bl	800faa0 <ucdr_buffer_alignment>
 800ed70:	4601      	mov	r1, r0
 800ed72:	4620      	mov	r0, r4
 800ed74:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ed78:	f000 feda 	bl	800fb30 <ucdr_advance_buffer>
 800ed7c:	2104      	movs	r1, #4
 800ed7e:	4620      	mov	r0, r4
 800ed80:	f000 fe2e 	bl	800f9e0 <ucdr_check_buffer_available_for>
 800ed84:	2800      	cmp	r0, #0
 800ed86:	d13c      	bne.n	800ee02 <ucdr_deserialize_endian_uint32_t+0xa2>
 800ed88:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800ed8c:	42bb      	cmp	r3, r7
 800ed8e:	d933      	bls.n	800edf8 <ucdr_deserialize_endian_uint32_t+0x98>
 800ed90:	eba3 0907 	sub.w	r9, r3, r7
 800ed94:	60a3      	str	r3, [r4, #8]
 800ed96:	6923      	ldr	r3, [r4, #16]
 800ed98:	4620      	mov	r0, r4
 800ed9a:	f1c9 0a04 	rsb	sl, r9, #4
 800ed9e:	444b      	add	r3, r9
 800eda0:	4651      	mov	r1, sl
 800eda2:	6123      	str	r3, [r4, #16]
 800eda4:	f000 fe28 	bl	800f9f8 <ucdr_check_final_buffer_behavior>
 800eda8:	2800      	cmp	r0, #0
 800edaa:	d048      	beq.n	800ee3e <ucdr_deserialize_endian_uint32_t+0xde>
 800edac:	2e01      	cmp	r6, #1
 800edae:	d061      	beq.n	800ee74 <ucdr_deserialize_endian_uint32_t+0x114>
 800edb0:	78fb      	ldrb	r3, [r7, #3]
 800edb2:	702b      	strb	r3, [r5, #0]
 800edb4:	f1b9 0f00 	cmp.w	r9, #0
 800edb8:	d050      	beq.n	800ee5c <ucdr_deserialize_endian_uint32_t+0xfc>
 800edba:	78bb      	ldrb	r3, [r7, #2]
 800edbc:	f1b9 0f01 	cmp.w	r9, #1
 800edc0:	706b      	strb	r3, [r5, #1]
 800edc2:	f105 0302 	add.w	r3, r5, #2
 800edc6:	d04d      	beq.n	800ee64 <ucdr_deserialize_endian_uint32_t+0x104>
 800edc8:	787b      	ldrb	r3, [r7, #1]
 800edca:	f1b9 0f02 	cmp.w	r9, #2
 800edce:	70ab      	strb	r3, [r5, #2]
 800edd0:	f105 0303 	add.w	r3, r5, #3
 800edd4:	d04a      	beq.n	800ee6c <ucdr_deserialize_endian_uint32_t+0x10c>
 800edd6:	783b      	ldrb	r3, [r7, #0]
 800edd8:	70eb      	strb	r3, [r5, #3]
 800edda:	6923      	ldr	r3, [r4, #16]
 800eddc:	2104      	movs	r1, #4
 800edde:	68a2      	ldr	r2, [r4, #8]
 800ede0:	3304      	adds	r3, #4
 800ede2:	7da0      	ldrb	r0, [r4, #22]
 800ede4:	4452      	add	r2, sl
 800ede6:	7561      	strb	r1, [r4, #21]
 800ede8:	eba3 0309 	sub.w	r3, r3, r9
 800edec:	f080 0001 	eor.w	r0, r0, #1
 800edf0:	60a2      	str	r2, [r4, #8]
 800edf2:	6123      	str	r3, [r4, #16]
 800edf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800edf8:	2104      	movs	r1, #4
 800edfa:	4620      	mov	r0, r4
 800edfc:	f000 fdfc 	bl	800f9f8 <ucdr_check_final_buffer_behavior>
 800ee00:	b1a8      	cbz	r0, 800ee2e <ucdr_deserialize_endian_uint32_t+0xce>
 800ee02:	2e01      	cmp	r6, #1
 800ee04:	68a3      	ldr	r3, [r4, #8]
 800ee06:	d017      	beq.n	800ee38 <ucdr_deserialize_endian_uint32_t+0xd8>
 800ee08:	78db      	ldrb	r3, [r3, #3]
 800ee0a:	702b      	strb	r3, [r5, #0]
 800ee0c:	68a3      	ldr	r3, [r4, #8]
 800ee0e:	789b      	ldrb	r3, [r3, #2]
 800ee10:	706b      	strb	r3, [r5, #1]
 800ee12:	68a3      	ldr	r3, [r4, #8]
 800ee14:	785b      	ldrb	r3, [r3, #1]
 800ee16:	70ab      	strb	r3, [r5, #2]
 800ee18:	68a3      	ldr	r3, [r4, #8]
 800ee1a:	781b      	ldrb	r3, [r3, #0]
 800ee1c:	70eb      	strb	r3, [r5, #3]
 800ee1e:	2104      	movs	r1, #4
 800ee20:	68a2      	ldr	r2, [r4, #8]
 800ee22:	6923      	ldr	r3, [r4, #16]
 800ee24:	440a      	add	r2, r1
 800ee26:	7561      	strb	r1, [r4, #21]
 800ee28:	440b      	add	r3, r1
 800ee2a:	60a2      	str	r2, [r4, #8]
 800ee2c:	6123      	str	r3, [r4, #16]
 800ee2e:	7da0      	ldrb	r0, [r4, #22]
 800ee30:	f080 0001 	eor.w	r0, r0, #1
 800ee34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	602b      	str	r3, [r5, #0]
 800ee3c:	e7ef      	b.n	800ee1e <ucdr_deserialize_endian_uint32_t+0xbe>
 800ee3e:	68a2      	ldr	r2, [r4, #8]
 800ee40:	6923      	ldr	r3, [r4, #16]
 800ee42:	eba2 0209 	sub.w	r2, r2, r9
 800ee46:	7da0      	ldrb	r0, [r4, #22]
 800ee48:	eba3 0309 	sub.w	r3, r3, r9
 800ee4c:	f884 8015 	strb.w	r8, [r4, #21]
 800ee50:	f080 0001 	eor.w	r0, r0, #1
 800ee54:	60a2      	str	r2, [r4, #8]
 800ee56:	6123      	str	r3, [r4, #16]
 800ee58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee5c:	68a3      	ldr	r3, [r4, #8]
 800ee5e:	789b      	ldrb	r3, [r3, #2]
 800ee60:	706b      	strb	r3, [r5, #1]
 800ee62:	1cab      	adds	r3, r5, #2
 800ee64:	68a2      	ldr	r2, [r4, #8]
 800ee66:	7852      	ldrb	r2, [r2, #1]
 800ee68:	f803 2b01 	strb.w	r2, [r3], #1
 800ee6c:	68a2      	ldr	r2, [r4, #8]
 800ee6e:	7812      	ldrb	r2, [r2, #0]
 800ee70:	701a      	strb	r2, [r3, #0]
 800ee72:	e7b2      	b.n	800edda <ucdr_deserialize_endian_uint32_t+0x7a>
 800ee74:	4639      	mov	r1, r7
 800ee76:	464a      	mov	r2, r9
 800ee78:	4628      	mov	r0, r5
 800ee7a:	f00c fbf8 	bl	801b66e <memcpy>
 800ee7e:	4652      	mov	r2, sl
 800ee80:	eb05 0009 	add.w	r0, r5, r9
 800ee84:	68a1      	ldr	r1, [r4, #8]
 800ee86:	f00c fbf2 	bl	801b66e <memcpy>
 800ee8a:	e7a6      	b.n	800edda <ucdr_deserialize_endian_uint32_t+0x7a>

0800ee8c <ucdr_serialize_uint64_t>:
 800ee8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee90:	4604      	mov	r4, r0
 800ee92:	b082      	sub	sp, #8
 800ee94:	2108      	movs	r1, #8
 800ee96:	e9cd 2300 	strd	r2, r3, [sp]
 800ee9a:	f000 fe01 	bl	800faa0 <ucdr_buffer_alignment>
 800ee9e:	4601      	mov	r1, r0
 800eea0:	4620      	mov	r0, r4
 800eea2:	7d67      	ldrb	r7, [r4, #21]
 800eea4:	f000 fe44 	bl	800fb30 <ucdr_advance_buffer>
 800eea8:	2108      	movs	r1, #8
 800eeaa:	4620      	mov	r0, r4
 800eeac:	f000 fd98 	bl	800f9e0 <ucdr_check_buffer_available_for>
 800eeb0:	2800      	cmp	r0, #0
 800eeb2:	d14e      	bne.n	800ef52 <ucdr_serialize_uint64_t+0xc6>
 800eeb4:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800eeb8:	42ab      	cmp	r3, r5
 800eeba:	d945      	bls.n	800ef48 <ucdr_serialize_uint64_t+0xbc>
 800eebc:	1b5e      	subs	r6, r3, r5
 800eebe:	60a3      	str	r3, [r4, #8]
 800eec0:	6923      	ldr	r3, [r4, #16]
 800eec2:	4620      	mov	r0, r4
 800eec4:	f1c6 0808 	rsb	r8, r6, #8
 800eec8:	4433      	add	r3, r6
 800eeca:	4641      	mov	r1, r8
 800eecc:	6123      	str	r3, [r4, #16]
 800eece:	f000 fd93 	bl	800f9f8 <ucdr_check_final_buffer_behavior>
 800eed2:	2800      	cmp	r0, #0
 800eed4:	d074      	beq.n	800efc0 <ucdr_serialize_uint64_t+0x134>
 800eed6:	7d23      	ldrb	r3, [r4, #20]
 800eed8:	2b01      	cmp	r3, #1
 800eeda:	f000 809b 	beq.w	800f014 <ucdr_serialize_uint64_t+0x188>
 800eede:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800eee2:	702b      	strb	r3, [r5, #0]
 800eee4:	2e00      	cmp	r6, #0
 800eee6:	d078      	beq.n	800efda <ucdr_serialize_uint64_t+0x14e>
 800eee8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800eeec:	2e01      	cmp	r6, #1
 800eeee:	706b      	strb	r3, [r5, #1]
 800eef0:	d077      	beq.n	800efe2 <ucdr_serialize_uint64_t+0x156>
 800eef2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800eef6:	2e02      	cmp	r6, #2
 800eef8:	70ab      	strb	r3, [r5, #2]
 800eefa:	d076      	beq.n	800efea <ucdr_serialize_uint64_t+0x15e>
 800eefc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ef00:	2e03      	cmp	r6, #3
 800ef02:	70eb      	strb	r3, [r5, #3]
 800ef04:	d075      	beq.n	800eff2 <ucdr_serialize_uint64_t+0x166>
 800ef06:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800ef0a:	2e04      	cmp	r6, #4
 800ef0c:	712b      	strb	r3, [r5, #4]
 800ef0e:	d074      	beq.n	800effa <ucdr_serialize_uint64_t+0x16e>
 800ef10:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800ef14:	2e05      	cmp	r6, #5
 800ef16:	716b      	strb	r3, [r5, #5]
 800ef18:	d073      	beq.n	800f002 <ucdr_serialize_uint64_t+0x176>
 800ef1a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800ef1e:	2e06      	cmp	r6, #6
 800ef20:	71ab      	strb	r3, [r5, #6]
 800ef22:	d072      	beq.n	800f00a <ucdr_serialize_uint64_t+0x17e>
 800ef24:	f89d 3000 	ldrb.w	r3, [sp]
 800ef28:	71eb      	strb	r3, [r5, #7]
 800ef2a:	6923      	ldr	r3, [r4, #16]
 800ef2c:	2108      	movs	r1, #8
 800ef2e:	68a2      	ldr	r2, [r4, #8]
 800ef30:	3308      	adds	r3, #8
 800ef32:	7da0      	ldrb	r0, [r4, #22]
 800ef34:	4442      	add	r2, r8
 800ef36:	7561      	strb	r1, [r4, #21]
 800ef38:	1b9e      	subs	r6, r3, r6
 800ef3a:	f080 0001 	eor.w	r0, r0, #1
 800ef3e:	60a2      	str	r2, [r4, #8]
 800ef40:	6126      	str	r6, [r4, #16]
 800ef42:	b002      	add	sp, #8
 800ef44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef48:	2108      	movs	r1, #8
 800ef4a:	4620      	mov	r0, r4
 800ef4c:	f000 fd54 	bl	800f9f8 <ucdr_check_final_buffer_behavior>
 800ef50:	b350      	cbz	r0, 800efa8 <ucdr_serialize_uint64_t+0x11c>
 800ef52:	7d23      	ldrb	r3, [r4, #20]
 800ef54:	2b01      	cmp	r3, #1
 800ef56:	d02d      	beq.n	800efb4 <ucdr_serialize_uint64_t+0x128>
 800ef58:	68a3      	ldr	r3, [r4, #8]
 800ef5a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800ef5e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ef62:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800ef66:	7018      	strb	r0, [r3, #0]
 800ef68:	68a3      	ldr	r3, [r4, #8]
 800ef6a:	705a      	strb	r2, [r3, #1]
 800ef6c:	68a3      	ldr	r3, [r4, #8]
 800ef6e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ef72:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800ef76:	7099      	strb	r1, [r3, #2]
 800ef78:	68a3      	ldr	r3, [r4, #8]
 800ef7a:	70da      	strb	r2, [r3, #3]
 800ef7c:	68a3      	ldr	r3, [r4, #8]
 800ef7e:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800ef82:	f89d 1001 	ldrb.w	r1, [sp, #1]
 800ef86:	7118      	strb	r0, [r3, #4]
 800ef88:	68a3      	ldr	r3, [r4, #8]
 800ef8a:	715a      	strb	r2, [r3, #5]
 800ef8c:	68a3      	ldr	r3, [r4, #8]
 800ef8e:	f89d 2000 	ldrb.w	r2, [sp]
 800ef92:	7199      	strb	r1, [r3, #6]
 800ef94:	68a3      	ldr	r3, [r4, #8]
 800ef96:	71da      	strb	r2, [r3, #7]
 800ef98:	2108      	movs	r1, #8
 800ef9a:	68a2      	ldr	r2, [r4, #8]
 800ef9c:	6923      	ldr	r3, [r4, #16]
 800ef9e:	440a      	add	r2, r1
 800efa0:	7561      	strb	r1, [r4, #21]
 800efa2:	440b      	add	r3, r1
 800efa4:	60a2      	str	r2, [r4, #8]
 800efa6:	6123      	str	r3, [r4, #16]
 800efa8:	7da0      	ldrb	r0, [r4, #22]
 800efaa:	f080 0001 	eor.w	r0, r0, #1
 800efae:	b002      	add	sp, #8
 800efb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efb4:	466b      	mov	r3, sp
 800efb6:	68a2      	ldr	r2, [r4, #8]
 800efb8:	cb03      	ldmia	r3!, {r0, r1}
 800efba:	6010      	str	r0, [r2, #0]
 800efbc:	6051      	str	r1, [r2, #4]
 800efbe:	e7eb      	b.n	800ef98 <ucdr_serialize_uint64_t+0x10c>
 800efc0:	68a2      	ldr	r2, [r4, #8]
 800efc2:	6923      	ldr	r3, [r4, #16]
 800efc4:	7da0      	ldrb	r0, [r4, #22]
 800efc6:	1b92      	subs	r2, r2, r6
 800efc8:	1b9b      	subs	r3, r3, r6
 800efca:	7567      	strb	r7, [r4, #21]
 800efcc:	f080 0001 	eor.w	r0, r0, #1
 800efd0:	60a2      	str	r2, [r4, #8]
 800efd2:	6123      	str	r3, [r4, #16]
 800efd4:	b002      	add	sp, #8
 800efd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efda:	68a3      	ldr	r3, [r4, #8]
 800efdc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800efe0:	701a      	strb	r2, [r3, #0]
 800efe2:	68a3      	ldr	r3, [r4, #8]
 800efe4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800efe8:	701a      	strb	r2, [r3, #0]
 800efea:	68a3      	ldr	r3, [r4, #8]
 800efec:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800eff0:	701a      	strb	r2, [r3, #0]
 800eff2:	68a3      	ldr	r3, [r4, #8]
 800eff4:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800eff8:	701a      	strb	r2, [r3, #0]
 800effa:	68a3      	ldr	r3, [r4, #8]
 800effc:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800f000:	701a      	strb	r2, [r3, #0]
 800f002:	68a3      	ldr	r3, [r4, #8]
 800f004:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800f008:	701a      	strb	r2, [r3, #0]
 800f00a:	68a3      	ldr	r3, [r4, #8]
 800f00c:	f89d 2000 	ldrb.w	r2, [sp]
 800f010:	701a      	strb	r2, [r3, #0]
 800f012:	e78a      	b.n	800ef2a <ucdr_serialize_uint64_t+0x9e>
 800f014:	4628      	mov	r0, r5
 800f016:	466d      	mov	r5, sp
 800f018:	4632      	mov	r2, r6
 800f01a:	4629      	mov	r1, r5
 800f01c:	f00c fb27 	bl	801b66e <memcpy>
 800f020:	4642      	mov	r2, r8
 800f022:	19a9      	adds	r1, r5, r6
 800f024:	68a0      	ldr	r0, [r4, #8]
 800f026:	f00c fb22 	bl	801b66e <memcpy>
 800f02a:	e77e      	b.n	800ef2a <ucdr_serialize_uint64_t+0x9e>

0800f02c <ucdr_serialize_int16_t>:
 800f02c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f030:	460b      	mov	r3, r1
 800f032:	b082      	sub	sp, #8
 800f034:	4604      	mov	r4, r0
 800f036:	2102      	movs	r1, #2
 800f038:	f8ad 3006 	strh.w	r3, [sp, #6]
 800f03c:	f000 fd30 	bl	800faa0 <ucdr_buffer_alignment>
 800f040:	4601      	mov	r1, r0
 800f042:	4620      	mov	r0, r4
 800f044:	7d67      	ldrb	r7, [r4, #21]
 800f046:	f000 fd73 	bl	800fb30 <ucdr_advance_buffer>
 800f04a:	2102      	movs	r1, #2
 800f04c:	4620      	mov	r0, r4
 800f04e:	f000 fcc7 	bl	800f9e0 <ucdr_check_buffer_available_for>
 800f052:	bb78      	cbnz	r0, 800f0b4 <ucdr_serialize_int16_t+0x88>
 800f054:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800f058:	42ab      	cmp	r3, r5
 800f05a:	d926      	bls.n	800f0aa <ucdr_serialize_int16_t+0x7e>
 800f05c:	1b5e      	subs	r6, r3, r5
 800f05e:	60a3      	str	r3, [r4, #8]
 800f060:	6923      	ldr	r3, [r4, #16]
 800f062:	4620      	mov	r0, r4
 800f064:	f1c6 0802 	rsb	r8, r6, #2
 800f068:	4433      	add	r3, r6
 800f06a:	4641      	mov	r1, r8
 800f06c:	6123      	str	r3, [r4, #16]
 800f06e:	f000 fcc3 	bl	800f9f8 <ucdr_check_final_buffer_behavior>
 800f072:	2800      	cmp	r0, #0
 800f074:	d03b      	beq.n	800f0ee <ucdr_serialize_int16_t+0xc2>
 800f076:	7d23      	ldrb	r3, [r4, #20]
 800f078:	2b01      	cmp	r3, #1
 800f07a:	d04a      	beq.n	800f112 <ucdr_serialize_int16_t+0xe6>
 800f07c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f080:	702b      	strb	r3, [r5, #0]
 800f082:	2e00      	cmp	r6, #0
 800f084:	d040      	beq.n	800f108 <ucdr_serialize_int16_t+0xdc>
 800f086:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f08a:	706b      	strb	r3, [r5, #1]
 800f08c:	6923      	ldr	r3, [r4, #16]
 800f08e:	2102      	movs	r1, #2
 800f090:	68a2      	ldr	r2, [r4, #8]
 800f092:	3302      	adds	r3, #2
 800f094:	7da0      	ldrb	r0, [r4, #22]
 800f096:	4442      	add	r2, r8
 800f098:	7561      	strb	r1, [r4, #21]
 800f09a:	1b9e      	subs	r6, r3, r6
 800f09c:	f080 0001 	eor.w	r0, r0, #1
 800f0a0:	60a2      	str	r2, [r4, #8]
 800f0a2:	6126      	str	r6, [r4, #16]
 800f0a4:	b002      	add	sp, #8
 800f0a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0aa:	2102      	movs	r1, #2
 800f0ac:	4620      	mov	r0, r4
 800f0ae:	f000 fca3 	bl	800f9f8 <ucdr_check_final_buffer_behavior>
 800f0b2:	b190      	cbz	r0, 800f0da <ucdr_serialize_int16_t+0xae>
 800f0b4:	7d23      	ldrb	r3, [r4, #20]
 800f0b6:	2b01      	cmp	r3, #1
 800f0b8:	68a3      	ldr	r3, [r4, #8]
 800f0ba:	d014      	beq.n	800f0e6 <ucdr_serialize_int16_t+0xba>
 800f0bc:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800f0c0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f0c4:	7019      	strb	r1, [r3, #0]
 800f0c6:	68a3      	ldr	r3, [r4, #8]
 800f0c8:	705a      	strb	r2, [r3, #1]
 800f0ca:	2102      	movs	r1, #2
 800f0cc:	68a2      	ldr	r2, [r4, #8]
 800f0ce:	6923      	ldr	r3, [r4, #16]
 800f0d0:	440a      	add	r2, r1
 800f0d2:	7561      	strb	r1, [r4, #21]
 800f0d4:	440b      	add	r3, r1
 800f0d6:	60a2      	str	r2, [r4, #8]
 800f0d8:	6123      	str	r3, [r4, #16]
 800f0da:	7da0      	ldrb	r0, [r4, #22]
 800f0dc:	f080 0001 	eor.w	r0, r0, #1
 800f0e0:	b002      	add	sp, #8
 800f0e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0e6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800f0ea:	801a      	strh	r2, [r3, #0]
 800f0ec:	e7ed      	b.n	800f0ca <ucdr_serialize_int16_t+0x9e>
 800f0ee:	68a2      	ldr	r2, [r4, #8]
 800f0f0:	6923      	ldr	r3, [r4, #16]
 800f0f2:	7da0      	ldrb	r0, [r4, #22]
 800f0f4:	1b92      	subs	r2, r2, r6
 800f0f6:	1b9b      	subs	r3, r3, r6
 800f0f8:	7567      	strb	r7, [r4, #21]
 800f0fa:	f080 0001 	eor.w	r0, r0, #1
 800f0fe:	60a2      	str	r2, [r4, #8]
 800f100:	6123      	str	r3, [r4, #16]
 800f102:	b002      	add	sp, #8
 800f104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f108:	68a3      	ldr	r3, [r4, #8]
 800f10a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f10e:	701a      	strb	r2, [r3, #0]
 800f110:	e7bc      	b.n	800f08c <ucdr_serialize_int16_t+0x60>
 800f112:	4628      	mov	r0, r5
 800f114:	f10d 0506 	add.w	r5, sp, #6
 800f118:	4632      	mov	r2, r6
 800f11a:	4629      	mov	r1, r5
 800f11c:	f00c faa7 	bl	801b66e <memcpy>
 800f120:	4642      	mov	r2, r8
 800f122:	19a9      	adds	r1, r5, r6
 800f124:	68a0      	ldr	r0, [r4, #8]
 800f126:	f00c faa2 	bl	801b66e <memcpy>
 800f12a:	e7af      	b.n	800f08c <ucdr_serialize_int16_t+0x60>

0800f12c <ucdr_deserialize_int16_t>:
 800f12c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f130:	4604      	mov	r4, r0
 800f132:	460d      	mov	r5, r1
 800f134:	2102      	movs	r1, #2
 800f136:	f000 fcb3 	bl	800faa0 <ucdr_buffer_alignment>
 800f13a:	4601      	mov	r1, r0
 800f13c:	4620      	mov	r0, r4
 800f13e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f142:	f000 fcf5 	bl	800fb30 <ucdr_advance_buffer>
 800f146:	2102      	movs	r1, #2
 800f148:	4620      	mov	r0, r4
 800f14a:	f000 fc49 	bl	800f9e0 <ucdr_check_buffer_available_for>
 800f14e:	bb60      	cbnz	r0, 800f1aa <ucdr_deserialize_int16_t+0x7e>
 800f150:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800f154:	42be      	cmp	r6, r7
 800f156:	d923      	bls.n	800f1a0 <ucdr_deserialize_int16_t+0x74>
 800f158:	6923      	ldr	r3, [r4, #16]
 800f15a:	4620      	mov	r0, r4
 800f15c:	60a6      	str	r6, [r4, #8]
 800f15e:	1bf6      	subs	r6, r6, r7
 800f160:	4433      	add	r3, r6
 800f162:	f1c6 0902 	rsb	r9, r6, #2
 800f166:	6123      	str	r3, [r4, #16]
 800f168:	4649      	mov	r1, r9
 800f16a:	f000 fc45 	bl	800f9f8 <ucdr_check_final_buffer_behavior>
 800f16e:	2800      	cmp	r0, #0
 800f170:	d034      	beq.n	800f1dc <ucdr_deserialize_int16_t+0xb0>
 800f172:	7d23      	ldrb	r3, [r4, #20]
 800f174:	2b01      	cmp	r3, #1
 800f176:	d042      	beq.n	800f1fe <ucdr_deserialize_int16_t+0xd2>
 800f178:	787b      	ldrb	r3, [r7, #1]
 800f17a:	702b      	strb	r3, [r5, #0]
 800f17c:	2e00      	cmp	r6, #0
 800f17e:	d03a      	beq.n	800f1f6 <ucdr_deserialize_int16_t+0xca>
 800f180:	783b      	ldrb	r3, [r7, #0]
 800f182:	706b      	strb	r3, [r5, #1]
 800f184:	6923      	ldr	r3, [r4, #16]
 800f186:	2102      	movs	r1, #2
 800f188:	68a2      	ldr	r2, [r4, #8]
 800f18a:	3302      	adds	r3, #2
 800f18c:	7da0      	ldrb	r0, [r4, #22]
 800f18e:	444a      	add	r2, r9
 800f190:	7561      	strb	r1, [r4, #21]
 800f192:	1b9b      	subs	r3, r3, r6
 800f194:	f080 0001 	eor.w	r0, r0, #1
 800f198:	60a2      	str	r2, [r4, #8]
 800f19a:	6123      	str	r3, [r4, #16]
 800f19c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f1a0:	2102      	movs	r1, #2
 800f1a2:	4620      	mov	r0, r4
 800f1a4:	f000 fc28 	bl	800f9f8 <ucdr_check_final_buffer_behavior>
 800f1a8:	b180      	cbz	r0, 800f1cc <ucdr_deserialize_int16_t+0xa0>
 800f1aa:	7d23      	ldrb	r3, [r4, #20]
 800f1ac:	2b01      	cmp	r3, #1
 800f1ae:	68a3      	ldr	r3, [r4, #8]
 800f1b0:	d011      	beq.n	800f1d6 <ucdr_deserialize_int16_t+0xaa>
 800f1b2:	785b      	ldrb	r3, [r3, #1]
 800f1b4:	702b      	strb	r3, [r5, #0]
 800f1b6:	68a3      	ldr	r3, [r4, #8]
 800f1b8:	781b      	ldrb	r3, [r3, #0]
 800f1ba:	706b      	strb	r3, [r5, #1]
 800f1bc:	2102      	movs	r1, #2
 800f1be:	68a2      	ldr	r2, [r4, #8]
 800f1c0:	6923      	ldr	r3, [r4, #16]
 800f1c2:	440a      	add	r2, r1
 800f1c4:	7561      	strb	r1, [r4, #21]
 800f1c6:	440b      	add	r3, r1
 800f1c8:	60a2      	str	r2, [r4, #8]
 800f1ca:	6123      	str	r3, [r4, #16]
 800f1cc:	7da0      	ldrb	r0, [r4, #22]
 800f1ce:	f080 0001 	eor.w	r0, r0, #1
 800f1d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f1d6:	881b      	ldrh	r3, [r3, #0]
 800f1d8:	802b      	strh	r3, [r5, #0]
 800f1da:	e7ef      	b.n	800f1bc <ucdr_deserialize_int16_t+0x90>
 800f1dc:	68a2      	ldr	r2, [r4, #8]
 800f1de:	6923      	ldr	r3, [r4, #16]
 800f1e0:	1b92      	subs	r2, r2, r6
 800f1e2:	7da0      	ldrb	r0, [r4, #22]
 800f1e4:	1b9b      	subs	r3, r3, r6
 800f1e6:	f884 8015 	strb.w	r8, [r4, #21]
 800f1ea:	f080 0001 	eor.w	r0, r0, #1
 800f1ee:	60a2      	str	r2, [r4, #8]
 800f1f0:	6123      	str	r3, [r4, #16]
 800f1f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f1f6:	68a3      	ldr	r3, [r4, #8]
 800f1f8:	781b      	ldrb	r3, [r3, #0]
 800f1fa:	706b      	strb	r3, [r5, #1]
 800f1fc:	e7c2      	b.n	800f184 <ucdr_deserialize_int16_t+0x58>
 800f1fe:	4639      	mov	r1, r7
 800f200:	4632      	mov	r2, r6
 800f202:	4628      	mov	r0, r5
 800f204:	f00c fa33 	bl	801b66e <memcpy>
 800f208:	464a      	mov	r2, r9
 800f20a:	19a8      	adds	r0, r5, r6
 800f20c:	68a1      	ldr	r1, [r4, #8]
 800f20e:	f00c fa2e 	bl	801b66e <memcpy>
 800f212:	e7b7      	b.n	800f184 <ucdr_deserialize_int16_t+0x58>

0800f214 <ucdr_serialize_int32_t>:
 800f214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f218:	b082      	sub	sp, #8
 800f21a:	4604      	mov	r4, r0
 800f21c:	9101      	str	r1, [sp, #4]
 800f21e:	2104      	movs	r1, #4
 800f220:	f000 fc3e 	bl	800faa0 <ucdr_buffer_alignment>
 800f224:	4601      	mov	r1, r0
 800f226:	4620      	mov	r0, r4
 800f228:	7d67      	ldrb	r7, [r4, #21]
 800f22a:	f000 fc81 	bl	800fb30 <ucdr_advance_buffer>
 800f22e:	2104      	movs	r1, #4
 800f230:	4620      	mov	r0, r4
 800f232:	f000 fbd5 	bl	800f9e0 <ucdr_check_buffer_available_for>
 800f236:	2800      	cmp	r0, #0
 800f238:	d139      	bne.n	800f2ae <ucdr_serialize_int32_t+0x9a>
 800f23a:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800f23e:	42ab      	cmp	r3, r5
 800f240:	d930      	bls.n	800f2a4 <ucdr_serialize_int32_t+0x90>
 800f242:	1b5e      	subs	r6, r3, r5
 800f244:	60a3      	str	r3, [r4, #8]
 800f246:	6923      	ldr	r3, [r4, #16]
 800f248:	4620      	mov	r0, r4
 800f24a:	f1c6 0804 	rsb	r8, r6, #4
 800f24e:	4433      	add	r3, r6
 800f250:	4641      	mov	r1, r8
 800f252:	6123      	str	r3, [r4, #16]
 800f254:	f000 fbd0 	bl	800f9f8 <ucdr_check_final_buffer_behavior>
 800f258:	2800      	cmp	r0, #0
 800f25a:	d04c      	beq.n	800f2f6 <ucdr_serialize_int32_t+0xe2>
 800f25c:	7d23      	ldrb	r3, [r4, #20]
 800f25e:	2b01      	cmp	r3, #1
 800f260:	d063      	beq.n	800f32a <ucdr_serialize_int32_t+0x116>
 800f262:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f266:	702b      	strb	r3, [r5, #0]
 800f268:	2e00      	cmp	r6, #0
 800f26a:	d051      	beq.n	800f310 <ucdr_serialize_int32_t+0xfc>
 800f26c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f270:	2e01      	cmp	r6, #1
 800f272:	706b      	strb	r3, [r5, #1]
 800f274:	d050      	beq.n	800f318 <ucdr_serialize_int32_t+0x104>
 800f276:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f27a:	2e02      	cmp	r6, #2
 800f27c:	70ab      	strb	r3, [r5, #2]
 800f27e:	d04f      	beq.n	800f320 <ucdr_serialize_int32_t+0x10c>
 800f280:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f284:	70eb      	strb	r3, [r5, #3]
 800f286:	6923      	ldr	r3, [r4, #16]
 800f288:	2104      	movs	r1, #4
 800f28a:	68a2      	ldr	r2, [r4, #8]
 800f28c:	3304      	adds	r3, #4
 800f28e:	7da0      	ldrb	r0, [r4, #22]
 800f290:	4442      	add	r2, r8
 800f292:	7561      	strb	r1, [r4, #21]
 800f294:	1b9e      	subs	r6, r3, r6
 800f296:	f080 0001 	eor.w	r0, r0, #1
 800f29a:	60a2      	str	r2, [r4, #8]
 800f29c:	6126      	str	r6, [r4, #16]
 800f29e:	b002      	add	sp, #8
 800f2a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2a4:	2104      	movs	r1, #4
 800f2a6:	4620      	mov	r0, r4
 800f2a8:	f000 fba6 	bl	800f9f8 <ucdr_check_final_buffer_behavior>
 800f2ac:	b1d0      	cbz	r0, 800f2e4 <ucdr_serialize_int32_t+0xd0>
 800f2ae:	7d23      	ldrb	r3, [r4, #20]
 800f2b0:	2b01      	cmp	r3, #1
 800f2b2:	68a3      	ldr	r3, [r4, #8]
 800f2b4:	d01c      	beq.n	800f2f0 <ucdr_serialize_int32_t+0xdc>
 800f2b6:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800f2ba:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f2be:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800f2c2:	7018      	strb	r0, [r3, #0]
 800f2c4:	68a3      	ldr	r3, [r4, #8]
 800f2c6:	705a      	strb	r2, [r3, #1]
 800f2c8:	68a3      	ldr	r3, [r4, #8]
 800f2ca:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f2ce:	7099      	strb	r1, [r3, #2]
 800f2d0:	68a3      	ldr	r3, [r4, #8]
 800f2d2:	70da      	strb	r2, [r3, #3]
 800f2d4:	2104      	movs	r1, #4
 800f2d6:	68a2      	ldr	r2, [r4, #8]
 800f2d8:	6923      	ldr	r3, [r4, #16]
 800f2da:	440a      	add	r2, r1
 800f2dc:	7561      	strb	r1, [r4, #21]
 800f2de:	440b      	add	r3, r1
 800f2e0:	60a2      	str	r2, [r4, #8]
 800f2e2:	6123      	str	r3, [r4, #16]
 800f2e4:	7da0      	ldrb	r0, [r4, #22]
 800f2e6:	f080 0001 	eor.w	r0, r0, #1
 800f2ea:	b002      	add	sp, #8
 800f2ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2f0:	9a01      	ldr	r2, [sp, #4]
 800f2f2:	601a      	str	r2, [r3, #0]
 800f2f4:	e7ee      	b.n	800f2d4 <ucdr_serialize_int32_t+0xc0>
 800f2f6:	68a2      	ldr	r2, [r4, #8]
 800f2f8:	6923      	ldr	r3, [r4, #16]
 800f2fa:	7da0      	ldrb	r0, [r4, #22]
 800f2fc:	1b92      	subs	r2, r2, r6
 800f2fe:	1b9b      	subs	r3, r3, r6
 800f300:	7567      	strb	r7, [r4, #21]
 800f302:	f080 0001 	eor.w	r0, r0, #1
 800f306:	60a2      	str	r2, [r4, #8]
 800f308:	6123      	str	r3, [r4, #16]
 800f30a:	b002      	add	sp, #8
 800f30c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f310:	68a3      	ldr	r3, [r4, #8]
 800f312:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f316:	701a      	strb	r2, [r3, #0]
 800f318:	68a3      	ldr	r3, [r4, #8]
 800f31a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f31e:	701a      	strb	r2, [r3, #0]
 800f320:	68a3      	ldr	r3, [r4, #8]
 800f322:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f326:	701a      	strb	r2, [r3, #0]
 800f328:	e7ad      	b.n	800f286 <ucdr_serialize_int32_t+0x72>
 800f32a:	4628      	mov	r0, r5
 800f32c:	ad01      	add	r5, sp, #4
 800f32e:	4632      	mov	r2, r6
 800f330:	4629      	mov	r1, r5
 800f332:	f00c f99c 	bl	801b66e <memcpy>
 800f336:	4642      	mov	r2, r8
 800f338:	19a9      	adds	r1, r5, r6
 800f33a:	68a0      	ldr	r0, [r4, #8]
 800f33c:	f00c f997 	bl	801b66e <memcpy>
 800f340:	e7a1      	b.n	800f286 <ucdr_serialize_int32_t+0x72>
 800f342:	bf00      	nop

0800f344 <ucdr_deserialize_int32_t>:
 800f344:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f348:	4604      	mov	r4, r0
 800f34a:	460d      	mov	r5, r1
 800f34c:	2104      	movs	r1, #4
 800f34e:	f000 fba7 	bl	800faa0 <ucdr_buffer_alignment>
 800f352:	4601      	mov	r1, r0
 800f354:	4620      	mov	r0, r4
 800f356:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f35a:	f000 fbe9 	bl	800fb30 <ucdr_advance_buffer>
 800f35e:	2104      	movs	r1, #4
 800f360:	4620      	mov	r0, r4
 800f362:	f000 fb3d 	bl	800f9e0 <ucdr_check_buffer_available_for>
 800f366:	2800      	cmp	r0, #0
 800f368:	d138      	bne.n	800f3dc <ucdr_deserialize_int32_t+0x98>
 800f36a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800f36e:	42b7      	cmp	r7, r6
 800f370:	d92f      	bls.n	800f3d2 <ucdr_deserialize_int32_t+0x8e>
 800f372:	6923      	ldr	r3, [r4, #16]
 800f374:	4620      	mov	r0, r4
 800f376:	60a7      	str	r7, [r4, #8]
 800f378:	1bbf      	subs	r7, r7, r6
 800f37a:	443b      	add	r3, r7
 800f37c:	f1c7 0904 	rsb	r9, r7, #4
 800f380:	6123      	str	r3, [r4, #16]
 800f382:	4649      	mov	r1, r9
 800f384:	f000 fb38 	bl	800f9f8 <ucdr_check_final_buffer_behavior>
 800f388:	2800      	cmp	r0, #0
 800f38a:	d046      	beq.n	800f41a <ucdr_deserialize_int32_t+0xd6>
 800f38c:	7d23      	ldrb	r3, [r4, #20]
 800f38e:	2b01      	cmp	r3, #1
 800f390:	d05c      	beq.n	800f44c <ucdr_deserialize_int32_t+0x108>
 800f392:	78f3      	ldrb	r3, [r6, #3]
 800f394:	702b      	strb	r3, [r5, #0]
 800f396:	2f00      	cmp	r7, #0
 800f398:	d04c      	beq.n	800f434 <ucdr_deserialize_int32_t+0xf0>
 800f39a:	78b3      	ldrb	r3, [r6, #2]
 800f39c:	2f01      	cmp	r7, #1
 800f39e:	706b      	strb	r3, [r5, #1]
 800f3a0:	f105 0302 	add.w	r3, r5, #2
 800f3a4:	d04a      	beq.n	800f43c <ucdr_deserialize_int32_t+0xf8>
 800f3a6:	7873      	ldrb	r3, [r6, #1]
 800f3a8:	2f02      	cmp	r7, #2
 800f3aa:	70ab      	strb	r3, [r5, #2]
 800f3ac:	f105 0303 	add.w	r3, r5, #3
 800f3b0:	d048      	beq.n	800f444 <ucdr_deserialize_int32_t+0x100>
 800f3b2:	7833      	ldrb	r3, [r6, #0]
 800f3b4:	70eb      	strb	r3, [r5, #3]
 800f3b6:	6923      	ldr	r3, [r4, #16]
 800f3b8:	2104      	movs	r1, #4
 800f3ba:	68a2      	ldr	r2, [r4, #8]
 800f3bc:	3304      	adds	r3, #4
 800f3be:	7da0      	ldrb	r0, [r4, #22]
 800f3c0:	444a      	add	r2, r9
 800f3c2:	7561      	strb	r1, [r4, #21]
 800f3c4:	1bdb      	subs	r3, r3, r7
 800f3c6:	f080 0001 	eor.w	r0, r0, #1
 800f3ca:	60a2      	str	r2, [r4, #8]
 800f3cc:	6123      	str	r3, [r4, #16]
 800f3ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f3d2:	2104      	movs	r1, #4
 800f3d4:	4620      	mov	r0, r4
 800f3d6:	f000 fb0f 	bl	800f9f8 <ucdr_check_final_buffer_behavior>
 800f3da:	b1b0      	cbz	r0, 800f40a <ucdr_deserialize_int32_t+0xc6>
 800f3dc:	7d23      	ldrb	r3, [r4, #20]
 800f3de:	2b01      	cmp	r3, #1
 800f3e0:	68a3      	ldr	r3, [r4, #8]
 800f3e2:	d017      	beq.n	800f414 <ucdr_deserialize_int32_t+0xd0>
 800f3e4:	78db      	ldrb	r3, [r3, #3]
 800f3e6:	702b      	strb	r3, [r5, #0]
 800f3e8:	68a3      	ldr	r3, [r4, #8]
 800f3ea:	789b      	ldrb	r3, [r3, #2]
 800f3ec:	706b      	strb	r3, [r5, #1]
 800f3ee:	68a3      	ldr	r3, [r4, #8]
 800f3f0:	785b      	ldrb	r3, [r3, #1]
 800f3f2:	70ab      	strb	r3, [r5, #2]
 800f3f4:	68a3      	ldr	r3, [r4, #8]
 800f3f6:	781b      	ldrb	r3, [r3, #0]
 800f3f8:	70eb      	strb	r3, [r5, #3]
 800f3fa:	2104      	movs	r1, #4
 800f3fc:	68a2      	ldr	r2, [r4, #8]
 800f3fe:	6923      	ldr	r3, [r4, #16]
 800f400:	440a      	add	r2, r1
 800f402:	7561      	strb	r1, [r4, #21]
 800f404:	440b      	add	r3, r1
 800f406:	60a2      	str	r2, [r4, #8]
 800f408:	6123      	str	r3, [r4, #16]
 800f40a:	7da0      	ldrb	r0, [r4, #22]
 800f40c:	f080 0001 	eor.w	r0, r0, #1
 800f410:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	602b      	str	r3, [r5, #0]
 800f418:	e7ef      	b.n	800f3fa <ucdr_deserialize_int32_t+0xb6>
 800f41a:	68a2      	ldr	r2, [r4, #8]
 800f41c:	6923      	ldr	r3, [r4, #16]
 800f41e:	1bd2      	subs	r2, r2, r7
 800f420:	7da0      	ldrb	r0, [r4, #22]
 800f422:	1bdb      	subs	r3, r3, r7
 800f424:	f884 8015 	strb.w	r8, [r4, #21]
 800f428:	f080 0001 	eor.w	r0, r0, #1
 800f42c:	60a2      	str	r2, [r4, #8]
 800f42e:	6123      	str	r3, [r4, #16]
 800f430:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f434:	68a3      	ldr	r3, [r4, #8]
 800f436:	789b      	ldrb	r3, [r3, #2]
 800f438:	706b      	strb	r3, [r5, #1]
 800f43a:	1cab      	adds	r3, r5, #2
 800f43c:	68a2      	ldr	r2, [r4, #8]
 800f43e:	7852      	ldrb	r2, [r2, #1]
 800f440:	f803 2b01 	strb.w	r2, [r3], #1
 800f444:	68a2      	ldr	r2, [r4, #8]
 800f446:	7812      	ldrb	r2, [r2, #0]
 800f448:	701a      	strb	r2, [r3, #0]
 800f44a:	e7b4      	b.n	800f3b6 <ucdr_deserialize_int32_t+0x72>
 800f44c:	4631      	mov	r1, r6
 800f44e:	463a      	mov	r2, r7
 800f450:	4628      	mov	r0, r5
 800f452:	f00c f90c 	bl	801b66e <memcpy>
 800f456:	464a      	mov	r2, r9
 800f458:	19e8      	adds	r0, r5, r7
 800f45a:	68a1      	ldr	r1, [r4, #8]
 800f45c:	f00c f907 	bl	801b66e <memcpy>
 800f460:	e7a9      	b.n	800f3b6 <ucdr_deserialize_int32_t+0x72>
 800f462:	bf00      	nop

0800f464 <ucdr_serialize_int64_t>:
 800f464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f468:	4604      	mov	r4, r0
 800f46a:	b082      	sub	sp, #8
 800f46c:	2108      	movs	r1, #8
 800f46e:	e9cd 2300 	strd	r2, r3, [sp]
 800f472:	f000 fb15 	bl	800faa0 <ucdr_buffer_alignment>
 800f476:	4601      	mov	r1, r0
 800f478:	4620      	mov	r0, r4
 800f47a:	7d67      	ldrb	r7, [r4, #21]
 800f47c:	f000 fb58 	bl	800fb30 <ucdr_advance_buffer>
 800f480:	2108      	movs	r1, #8
 800f482:	4620      	mov	r0, r4
 800f484:	f000 faac 	bl	800f9e0 <ucdr_check_buffer_available_for>
 800f488:	2800      	cmp	r0, #0
 800f48a:	d14e      	bne.n	800f52a <ucdr_serialize_int64_t+0xc6>
 800f48c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800f490:	42ab      	cmp	r3, r5
 800f492:	d945      	bls.n	800f520 <ucdr_serialize_int64_t+0xbc>
 800f494:	1b5e      	subs	r6, r3, r5
 800f496:	60a3      	str	r3, [r4, #8]
 800f498:	6923      	ldr	r3, [r4, #16]
 800f49a:	4620      	mov	r0, r4
 800f49c:	f1c6 0808 	rsb	r8, r6, #8
 800f4a0:	4433      	add	r3, r6
 800f4a2:	4641      	mov	r1, r8
 800f4a4:	6123      	str	r3, [r4, #16]
 800f4a6:	f000 faa7 	bl	800f9f8 <ucdr_check_final_buffer_behavior>
 800f4aa:	2800      	cmp	r0, #0
 800f4ac:	d074      	beq.n	800f598 <ucdr_serialize_int64_t+0x134>
 800f4ae:	7d23      	ldrb	r3, [r4, #20]
 800f4b0:	2b01      	cmp	r3, #1
 800f4b2:	f000 809b 	beq.w	800f5ec <ucdr_serialize_int64_t+0x188>
 800f4b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f4ba:	702b      	strb	r3, [r5, #0]
 800f4bc:	2e00      	cmp	r6, #0
 800f4be:	d078      	beq.n	800f5b2 <ucdr_serialize_int64_t+0x14e>
 800f4c0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f4c4:	2e01      	cmp	r6, #1
 800f4c6:	706b      	strb	r3, [r5, #1]
 800f4c8:	d077      	beq.n	800f5ba <ucdr_serialize_int64_t+0x156>
 800f4ca:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f4ce:	2e02      	cmp	r6, #2
 800f4d0:	70ab      	strb	r3, [r5, #2]
 800f4d2:	d076      	beq.n	800f5c2 <ucdr_serialize_int64_t+0x15e>
 800f4d4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f4d8:	2e03      	cmp	r6, #3
 800f4da:	70eb      	strb	r3, [r5, #3]
 800f4dc:	d075      	beq.n	800f5ca <ucdr_serialize_int64_t+0x166>
 800f4de:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800f4e2:	2e04      	cmp	r6, #4
 800f4e4:	712b      	strb	r3, [r5, #4]
 800f4e6:	d074      	beq.n	800f5d2 <ucdr_serialize_int64_t+0x16e>
 800f4e8:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800f4ec:	2e05      	cmp	r6, #5
 800f4ee:	716b      	strb	r3, [r5, #5]
 800f4f0:	d073      	beq.n	800f5da <ucdr_serialize_int64_t+0x176>
 800f4f2:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800f4f6:	2e06      	cmp	r6, #6
 800f4f8:	71ab      	strb	r3, [r5, #6]
 800f4fa:	d072      	beq.n	800f5e2 <ucdr_serialize_int64_t+0x17e>
 800f4fc:	f89d 3000 	ldrb.w	r3, [sp]
 800f500:	71eb      	strb	r3, [r5, #7]
 800f502:	6923      	ldr	r3, [r4, #16]
 800f504:	2108      	movs	r1, #8
 800f506:	68a2      	ldr	r2, [r4, #8]
 800f508:	3308      	adds	r3, #8
 800f50a:	7da0      	ldrb	r0, [r4, #22]
 800f50c:	4442      	add	r2, r8
 800f50e:	7561      	strb	r1, [r4, #21]
 800f510:	1b9e      	subs	r6, r3, r6
 800f512:	f080 0001 	eor.w	r0, r0, #1
 800f516:	60a2      	str	r2, [r4, #8]
 800f518:	6126      	str	r6, [r4, #16]
 800f51a:	b002      	add	sp, #8
 800f51c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f520:	2108      	movs	r1, #8
 800f522:	4620      	mov	r0, r4
 800f524:	f000 fa68 	bl	800f9f8 <ucdr_check_final_buffer_behavior>
 800f528:	b350      	cbz	r0, 800f580 <ucdr_serialize_int64_t+0x11c>
 800f52a:	7d23      	ldrb	r3, [r4, #20]
 800f52c:	2b01      	cmp	r3, #1
 800f52e:	d02d      	beq.n	800f58c <ucdr_serialize_int64_t+0x128>
 800f530:	68a3      	ldr	r3, [r4, #8]
 800f532:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800f536:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f53a:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800f53e:	7018      	strb	r0, [r3, #0]
 800f540:	68a3      	ldr	r3, [r4, #8]
 800f542:	705a      	strb	r2, [r3, #1]
 800f544:	68a3      	ldr	r3, [r4, #8]
 800f546:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f54a:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800f54e:	7099      	strb	r1, [r3, #2]
 800f550:	68a3      	ldr	r3, [r4, #8]
 800f552:	70da      	strb	r2, [r3, #3]
 800f554:	68a3      	ldr	r3, [r4, #8]
 800f556:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800f55a:	f89d 1001 	ldrb.w	r1, [sp, #1]
 800f55e:	7118      	strb	r0, [r3, #4]
 800f560:	68a3      	ldr	r3, [r4, #8]
 800f562:	715a      	strb	r2, [r3, #5]
 800f564:	68a3      	ldr	r3, [r4, #8]
 800f566:	f89d 2000 	ldrb.w	r2, [sp]
 800f56a:	7199      	strb	r1, [r3, #6]
 800f56c:	68a3      	ldr	r3, [r4, #8]
 800f56e:	71da      	strb	r2, [r3, #7]
 800f570:	2108      	movs	r1, #8
 800f572:	68a2      	ldr	r2, [r4, #8]
 800f574:	6923      	ldr	r3, [r4, #16]
 800f576:	440a      	add	r2, r1
 800f578:	7561      	strb	r1, [r4, #21]
 800f57a:	440b      	add	r3, r1
 800f57c:	60a2      	str	r2, [r4, #8]
 800f57e:	6123      	str	r3, [r4, #16]
 800f580:	7da0      	ldrb	r0, [r4, #22]
 800f582:	f080 0001 	eor.w	r0, r0, #1
 800f586:	b002      	add	sp, #8
 800f588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f58c:	466b      	mov	r3, sp
 800f58e:	68a2      	ldr	r2, [r4, #8]
 800f590:	cb03      	ldmia	r3!, {r0, r1}
 800f592:	6010      	str	r0, [r2, #0]
 800f594:	6051      	str	r1, [r2, #4]
 800f596:	e7eb      	b.n	800f570 <ucdr_serialize_int64_t+0x10c>
 800f598:	68a2      	ldr	r2, [r4, #8]
 800f59a:	6923      	ldr	r3, [r4, #16]
 800f59c:	7da0      	ldrb	r0, [r4, #22]
 800f59e:	1b92      	subs	r2, r2, r6
 800f5a0:	1b9b      	subs	r3, r3, r6
 800f5a2:	7567      	strb	r7, [r4, #21]
 800f5a4:	f080 0001 	eor.w	r0, r0, #1
 800f5a8:	60a2      	str	r2, [r4, #8]
 800f5aa:	6123      	str	r3, [r4, #16]
 800f5ac:	b002      	add	sp, #8
 800f5ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5b2:	68a3      	ldr	r3, [r4, #8]
 800f5b4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f5b8:	701a      	strb	r2, [r3, #0]
 800f5ba:	68a3      	ldr	r3, [r4, #8]
 800f5bc:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f5c0:	701a      	strb	r2, [r3, #0]
 800f5c2:	68a3      	ldr	r3, [r4, #8]
 800f5c4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f5c8:	701a      	strb	r2, [r3, #0]
 800f5ca:	68a3      	ldr	r3, [r4, #8]
 800f5cc:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800f5d0:	701a      	strb	r2, [r3, #0]
 800f5d2:	68a3      	ldr	r3, [r4, #8]
 800f5d4:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800f5d8:	701a      	strb	r2, [r3, #0]
 800f5da:	68a3      	ldr	r3, [r4, #8]
 800f5dc:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800f5e0:	701a      	strb	r2, [r3, #0]
 800f5e2:	68a3      	ldr	r3, [r4, #8]
 800f5e4:	f89d 2000 	ldrb.w	r2, [sp]
 800f5e8:	701a      	strb	r2, [r3, #0]
 800f5ea:	e78a      	b.n	800f502 <ucdr_serialize_int64_t+0x9e>
 800f5ec:	4628      	mov	r0, r5
 800f5ee:	466d      	mov	r5, sp
 800f5f0:	4632      	mov	r2, r6
 800f5f2:	4629      	mov	r1, r5
 800f5f4:	f00c f83b 	bl	801b66e <memcpy>
 800f5f8:	4642      	mov	r2, r8
 800f5fa:	19a9      	adds	r1, r5, r6
 800f5fc:	68a0      	ldr	r0, [r4, #8]
 800f5fe:	f00c f836 	bl	801b66e <memcpy>
 800f602:	e77e      	b.n	800f502 <ucdr_serialize_int64_t+0x9e>

0800f604 <ucdr_deserialize_int64_t>:
 800f604:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f608:	4604      	mov	r4, r0
 800f60a:	460d      	mov	r5, r1
 800f60c:	2108      	movs	r1, #8
 800f60e:	f000 fa47 	bl	800faa0 <ucdr_buffer_alignment>
 800f612:	4601      	mov	r1, r0
 800f614:	4620      	mov	r0, r4
 800f616:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f61a:	f000 fa89 	bl	800fb30 <ucdr_advance_buffer>
 800f61e:	2108      	movs	r1, #8
 800f620:	4620      	mov	r0, r4
 800f622:	f000 f9dd 	bl	800f9e0 <ucdr_check_buffer_available_for>
 800f626:	2800      	cmp	r0, #0
 800f628:	d151      	bne.n	800f6ce <ucdr_deserialize_int64_t+0xca>
 800f62a:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800f62e:	42be      	cmp	r6, r7
 800f630:	d948      	bls.n	800f6c4 <ucdr_deserialize_int64_t+0xc0>
 800f632:	6923      	ldr	r3, [r4, #16]
 800f634:	4620      	mov	r0, r4
 800f636:	60a6      	str	r6, [r4, #8]
 800f638:	1bf6      	subs	r6, r6, r7
 800f63a:	4433      	add	r3, r6
 800f63c:	f1c6 0908 	rsb	r9, r6, #8
 800f640:	6123      	str	r3, [r4, #16]
 800f642:	4649      	mov	r1, r9
 800f644:	f000 f9d8 	bl	800f9f8 <ucdr_check_final_buffer_behavior>
 800f648:	2800      	cmp	r0, #0
 800f64a:	d06d      	beq.n	800f728 <ucdr_deserialize_int64_t+0x124>
 800f64c:	7d23      	ldrb	r3, [r4, #20]
 800f64e:	2b01      	cmp	r3, #1
 800f650:	f000 8093 	beq.w	800f77a <ucdr_deserialize_int64_t+0x176>
 800f654:	79fb      	ldrb	r3, [r7, #7]
 800f656:	702b      	strb	r3, [r5, #0]
 800f658:	2e00      	cmp	r6, #0
 800f65a:	d072      	beq.n	800f742 <ucdr_deserialize_int64_t+0x13e>
 800f65c:	79bb      	ldrb	r3, [r7, #6]
 800f65e:	2e01      	cmp	r6, #1
 800f660:	706b      	strb	r3, [r5, #1]
 800f662:	f105 0302 	add.w	r3, r5, #2
 800f666:	d070      	beq.n	800f74a <ucdr_deserialize_int64_t+0x146>
 800f668:	797b      	ldrb	r3, [r7, #5]
 800f66a:	2e02      	cmp	r6, #2
 800f66c:	70ab      	strb	r3, [r5, #2]
 800f66e:	f105 0303 	add.w	r3, r5, #3
 800f672:	d06e      	beq.n	800f752 <ucdr_deserialize_int64_t+0x14e>
 800f674:	793b      	ldrb	r3, [r7, #4]
 800f676:	2e03      	cmp	r6, #3
 800f678:	70eb      	strb	r3, [r5, #3]
 800f67a:	f105 0304 	add.w	r3, r5, #4
 800f67e:	d06c      	beq.n	800f75a <ucdr_deserialize_int64_t+0x156>
 800f680:	78fb      	ldrb	r3, [r7, #3]
 800f682:	2e04      	cmp	r6, #4
 800f684:	712b      	strb	r3, [r5, #4]
 800f686:	f105 0305 	add.w	r3, r5, #5
 800f68a:	d06a      	beq.n	800f762 <ucdr_deserialize_int64_t+0x15e>
 800f68c:	78bb      	ldrb	r3, [r7, #2]
 800f68e:	2e05      	cmp	r6, #5
 800f690:	716b      	strb	r3, [r5, #5]
 800f692:	f105 0306 	add.w	r3, r5, #6
 800f696:	d068      	beq.n	800f76a <ucdr_deserialize_int64_t+0x166>
 800f698:	787b      	ldrb	r3, [r7, #1]
 800f69a:	2e06      	cmp	r6, #6
 800f69c:	71ab      	strb	r3, [r5, #6]
 800f69e:	f105 0307 	add.w	r3, r5, #7
 800f6a2:	d066      	beq.n	800f772 <ucdr_deserialize_int64_t+0x16e>
 800f6a4:	783b      	ldrb	r3, [r7, #0]
 800f6a6:	71eb      	strb	r3, [r5, #7]
 800f6a8:	6923      	ldr	r3, [r4, #16]
 800f6aa:	2108      	movs	r1, #8
 800f6ac:	68a2      	ldr	r2, [r4, #8]
 800f6ae:	3308      	adds	r3, #8
 800f6b0:	7da0      	ldrb	r0, [r4, #22]
 800f6b2:	444a      	add	r2, r9
 800f6b4:	7561      	strb	r1, [r4, #21]
 800f6b6:	1b9e      	subs	r6, r3, r6
 800f6b8:	f080 0001 	eor.w	r0, r0, #1
 800f6bc:	60a2      	str	r2, [r4, #8]
 800f6be:	6126      	str	r6, [r4, #16]
 800f6c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f6c4:	2108      	movs	r1, #8
 800f6c6:	4620      	mov	r0, r4
 800f6c8:	f000 f996 	bl	800f9f8 <ucdr_check_final_buffer_behavior>
 800f6cc:	b310      	cbz	r0, 800f714 <ucdr_deserialize_int64_t+0x110>
 800f6ce:	7d23      	ldrb	r3, [r4, #20]
 800f6d0:	2b01      	cmp	r3, #1
 800f6d2:	68a3      	ldr	r3, [r4, #8]
 800f6d4:	d023      	beq.n	800f71e <ucdr_deserialize_int64_t+0x11a>
 800f6d6:	79db      	ldrb	r3, [r3, #7]
 800f6d8:	702b      	strb	r3, [r5, #0]
 800f6da:	68a3      	ldr	r3, [r4, #8]
 800f6dc:	799b      	ldrb	r3, [r3, #6]
 800f6de:	706b      	strb	r3, [r5, #1]
 800f6e0:	68a3      	ldr	r3, [r4, #8]
 800f6e2:	795b      	ldrb	r3, [r3, #5]
 800f6e4:	70ab      	strb	r3, [r5, #2]
 800f6e6:	68a3      	ldr	r3, [r4, #8]
 800f6e8:	791b      	ldrb	r3, [r3, #4]
 800f6ea:	70eb      	strb	r3, [r5, #3]
 800f6ec:	68a3      	ldr	r3, [r4, #8]
 800f6ee:	78db      	ldrb	r3, [r3, #3]
 800f6f0:	712b      	strb	r3, [r5, #4]
 800f6f2:	68a3      	ldr	r3, [r4, #8]
 800f6f4:	789b      	ldrb	r3, [r3, #2]
 800f6f6:	716b      	strb	r3, [r5, #5]
 800f6f8:	68a3      	ldr	r3, [r4, #8]
 800f6fa:	785b      	ldrb	r3, [r3, #1]
 800f6fc:	71ab      	strb	r3, [r5, #6]
 800f6fe:	68a3      	ldr	r3, [r4, #8]
 800f700:	781b      	ldrb	r3, [r3, #0]
 800f702:	71eb      	strb	r3, [r5, #7]
 800f704:	2108      	movs	r1, #8
 800f706:	68a2      	ldr	r2, [r4, #8]
 800f708:	6923      	ldr	r3, [r4, #16]
 800f70a:	440a      	add	r2, r1
 800f70c:	7561      	strb	r1, [r4, #21]
 800f70e:	440b      	add	r3, r1
 800f710:	60a2      	str	r2, [r4, #8]
 800f712:	6123      	str	r3, [r4, #16]
 800f714:	7da0      	ldrb	r0, [r4, #22]
 800f716:	f080 0001 	eor.w	r0, r0, #1
 800f71a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f71e:	681a      	ldr	r2, [r3, #0]
 800f720:	685b      	ldr	r3, [r3, #4]
 800f722:	602a      	str	r2, [r5, #0]
 800f724:	606b      	str	r3, [r5, #4]
 800f726:	e7ed      	b.n	800f704 <ucdr_deserialize_int64_t+0x100>
 800f728:	68a2      	ldr	r2, [r4, #8]
 800f72a:	6923      	ldr	r3, [r4, #16]
 800f72c:	1b92      	subs	r2, r2, r6
 800f72e:	7da0      	ldrb	r0, [r4, #22]
 800f730:	1b9b      	subs	r3, r3, r6
 800f732:	f884 8015 	strb.w	r8, [r4, #21]
 800f736:	f080 0001 	eor.w	r0, r0, #1
 800f73a:	60a2      	str	r2, [r4, #8]
 800f73c:	6123      	str	r3, [r4, #16]
 800f73e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f742:	68a3      	ldr	r3, [r4, #8]
 800f744:	799b      	ldrb	r3, [r3, #6]
 800f746:	706b      	strb	r3, [r5, #1]
 800f748:	1cab      	adds	r3, r5, #2
 800f74a:	68a2      	ldr	r2, [r4, #8]
 800f74c:	7952      	ldrb	r2, [r2, #5]
 800f74e:	f803 2b01 	strb.w	r2, [r3], #1
 800f752:	68a2      	ldr	r2, [r4, #8]
 800f754:	7912      	ldrb	r2, [r2, #4]
 800f756:	f803 2b01 	strb.w	r2, [r3], #1
 800f75a:	68a2      	ldr	r2, [r4, #8]
 800f75c:	78d2      	ldrb	r2, [r2, #3]
 800f75e:	f803 2b01 	strb.w	r2, [r3], #1
 800f762:	68a2      	ldr	r2, [r4, #8]
 800f764:	7892      	ldrb	r2, [r2, #2]
 800f766:	f803 2b01 	strb.w	r2, [r3], #1
 800f76a:	68a2      	ldr	r2, [r4, #8]
 800f76c:	7852      	ldrb	r2, [r2, #1]
 800f76e:	f803 2b01 	strb.w	r2, [r3], #1
 800f772:	68a2      	ldr	r2, [r4, #8]
 800f774:	7812      	ldrb	r2, [r2, #0]
 800f776:	701a      	strb	r2, [r3, #0]
 800f778:	e796      	b.n	800f6a8 <ucdr_deserialize_int64_t+0xa4>
 800f77a:	4639      	mov	r1, r7
 800f77c:	4632      	mov	r2, r6
 800f77e:	4628      	mov	r0, r5
 800f780:	f00b ff75 	bl	801b66e <memcpy>
 800f784:	464a      	mov	r2, r9
 800f786:	19a8      	adds	r0, r5, r6
 800f788:	68a1      	ldr	r1, [r4, #8]
 800f78a:	f00b ff70 	bl	801b66e <memcpy>
 800f78e:	e78b      	b.n	800f6a8 <ucdr_deserialize_int64_t+0xa4>

0800f790 <ucdr_serialize_float>:
 800f790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f794:	4604      	mov	r4, r0
 800f796:	b082      	sub	sp, #8
 800f798:	2104      	movs	r1, #4
 800f79a:	ed8d 0a01 	vstr	s0, [sp, #4]
 800f79e:	f000 f97f 	bl	800faa0 <ucdr_buffer_alignment>
 800f7a2:	4601      	mov	r1, r0
 800f7a4:	4620      	mov	r0, r4
 800f7a6:	7d67      	ldrb	r7, [r4, #21]
 800f7a8:	f000 f9c2 	bl	800fb30 <ucdr_advance_buffer>
 800f7ac:	2104      	movs	r1, #4
 800f7ae:	4620      	mov	r0, r4
 800f7b0:	f000 f916 	bl	800f9e0 <ucdr_check_buffer_available_for>
 800f7b4:	2800      	cmp	r0, #0
 800f7b6:	d139      	bne.n	800f82c <ucdr_serialize_float+0x9c>
 800f7b8:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800f7bc:	42ab      	cmp	r3, r5
 800f7be:	d930      	bls.n	800f822 <ucdr_serialize_float+0x92>
 800f7c0:	1b5e      	subs	r6, r3, r5
 800f7c2:	60a3      	str	r3, [r4, #8]
 800f7c4:	6923      	ldr	r3, [r4, #16]
 800f7c6:	4620      	mov	r0, r4
 800f7c8:	f1c6 0804 	rsb	r8, r6, #4
 800f7cc:	4433      	add	r3, r6
 800f7ce:	4641      	mov	r1, r8
 800f7d0:	6123      	str	r3, [r4, #16]
 800f7d2:	f000 f911 	bl	800f9f8 <ucdr_check_final_buffer_behavior>
 800f7d6:	2800      	cmp	r0, #0
 800f7d8:	d04c      	beq.n	800f874 <ucdr_serialize_float+0xe4>
 800f7da:	7d23      	ldrb	r3, [r4, #20]
 800f7dc:	2b01      	cmp	r3, #1
 800f7de:	d063      	beq.n	800f8a8 <ucdr_serialize_float+0x118>
 800f7e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f7e4:	702b      	strb	r3, [r5, #0]
 800f7e6:	2e00      	cmp	r6, #0
 800f7e8:	d051      	beq.n	800f88e <ucdr_serialize_float+0xfe>
 800f7ea:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f7ee:	2e01      	cmp	r6, #1
 800f7f0:	706b      	strb	r3, [r5, #1]
 800f7f2:	d050      	beq.n	800f896 <ucdr_serialize_float+0x106>
 800f7f4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f7f8:	2e02      	cmp	r6, #2
 800f7fa:	70ab      	strb	r3, [r5, #2]
 800f7fc:	d04f      	beq.n	800f89e <ucdr_serialize_float+0x10e>
 800f7fe:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f802:	70eb      	strb	r3, [r5, #3]
 800f804:	6923      	ldr	r3, [r4, #16]
 800f806:	2104      	movs	r1, #4
 800f808:	68a2      	ldr	r2, [r4, #8]
 800f80a:	3304      	adds	r3, #4
 800f80c:	7da0      	ldrb	r0, [r4, #22]
 800f80e:	4442      	add	r2, r8
 800f810:	7561      	strb	r1, [r4, #21]
 800f812:	1b9e      	subs	r6, r3, r6
 800f814:	f080 0001 	eor.w	r0, r0, #1
 800f818:	60a2      	str	r2, [r4, #8]
 800f81a:	6126      	str	r6, [r4, #16]
 800f81c:	b002      	add	sp, #8
 800f81e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f822:	2104      	movs	r1, #4
 800f824:	4620      	mov	r0, r4
 800f826:	f000 f8e7 	bl	800f9f8 <ucdr_check_final_buffer_behavior>
 800f82a:	b1d0      	cbz	r0, 800f862 <ucdr_serialize_float+0xd2>
 800f82c:	7d23      	ldrb	r3, [r4, #20]
 800f82e:	2b01      	cmp	r3, #1
 800f830:	68a3      	ldr	r3, [r4, #8]
 800f832:	d01c      	beq.n	800f86e <ucdr_serialize_float+0xde>
 800f834:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800f838:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f83c:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800f840:	7018      	strb	r0, [r3, #0]
 800f842:	68a3      	ldr	r3, [r4, #8]
 800f844:	705a      	strb	r2, [r3, #1]
 800f846:	68a3      	ldr	r3, [r4, #8]
 800f848:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f84c:	7099      	strb	r1, [r3, #2]
 800f84e:	68a3      	ldr	r3, [r4, #8]
 800f850:	70da      	strb	r2, [r3, #3]
 800f852:	2104      	movs	r1, #4
 800f854:	68a2      	ldr	r2, [r4, #8]
 800f856:	6923      	ldr	r3, [r4, #16]
 800f858:	440a      	add	r2, r1
 800f85a:	7561      	strb	r1, [r4, #21]
 800f85c:	440b      	add	r3, r1
 800f85e:	60a2      	str	r2, [r4, #8]
 800f860:	6123      	str	r3, [r4, #16]
 800f862:	7da0      	ldrb	r0, [r4, #22]
 800f864:	f080 0001 	eor.w	r0, r0, #1
 800f868:	b002      	add	sp, #8
 800f86a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f86e:	9a01      	ldr	r2, [sp, #4]
 800f870:	601a      	str	r2, [r3, #0]
 800f872:	e7ee      	b.n	800f852 <ucdr_serialize_float+0xc2>
 800f874:	68a2      	ldr	r2, [r4, #8]
 800f876:	6923      	ldr	r3, [r4, #16]
 800f878:	7da0      	ldrb	r0, [r4, #22]
 800f87a:	1b92      	subs	r2, r2, r6
 800f87c:	1b9b      	subs	r3, r3, r6
 800f87e:	7567      	strb	r7, [r4, #21]
 800f880:	f080 0001 	eor.w	r0, r0, #1
 800f884:	60a2      	str	r2, [r4, #8]
 800f886:	6123      	str	r3, [r4, #16]
 800f888:	b002      	add	sp, #8
 800f88a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f88e:	68a3      	ldr	r3, [r4, #8]
 800f890:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f894:	701a      	strb	r2, [r3, #0]
 800f896:	68a3      	ldr	r3, [r4, #8]
 800f898:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f89c:	701a      	strb	r2, [r3, #0]
 800f89e:	68a3      	ldr	r3, [r4, #8]
 800f8a0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f8a4:	701a      	strb	r2, [r3, #0]
 800f8a6:	e7ad      	b.n	800f804 <ucdr_serialize_float+0x74>
 800f8a8:	4628      	mov	r0, r5
 800f8aa:	ad01      	add	r5, sp, #4
 800f8ac:	4632      	mov	r2, r6
 800f8ae:	4629      	mov	r1, r5
 800f8b0:	f00b fedd 	bl	801b66e <memcpy>
 800f8b4:	4642      	mov	r2, r8
 800f8b6:	19a9      	adds	r1, r5, r6
 800f8b8:	68a0      	ldr	r0, [r4, #8]
 800f8ba:	f00b fed8 	bl	801b66e <memcpy>
 800f8be:	e7a1      	b.n	800f804 <ucdr_serialize_float+0x74>

0800f8c0 <ucdr_deserialize_float>:
 800f8c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f8c4:	4604      	mov	r4, r0
 800f8c6:	460d      	mov	r5, r1
 800f8c8:	2104      	movs	r1, #4
 800f8ca:	f000 f8e9 	bl	800faa0 <ucdr_buffer_alignment>
 800f8ce:	4601      	mov	r1, r0
 800f8d0:	4620      	mov	r0, r4
 800f8d2:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f8d6:	f000 f92b 	bl	800fb30 <ucdr_advance_buffer>
 800f8da:	2104      	movs	r1, #4
 800f8dc:	4620      	mov	r0, r4
 800f8de:	f000 f87f 	bl	800f9e0 <ucdr_check_buffer_available_for>
 800f8e2:	2800      	cmp	r0, #0
 800f8e4:	d138      	bne.n	800f958 <ucdr_deserialize_float+0x98>
 800f8e6:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800f8ea:	42b7      	cmp	r7, r6
 800f8ec:	d92f      	bls.n	800f94e <ucdr_deserialize_float+0x8e>
 800f8ee:	6923      	ldr	r3, [r4, #16]
 800f8f0:	4620      	mov	r0, r4
 800f8f2:	60a7      	str	r7, [r4, #8]
 800f8f4:	1bbf      	subs	r7, r7, r6
 800f8f6:	443b      	add	r3, r7
 800f8f8:	f1c7 0904 	rsb	r9, r7, #4
 800f8fc:	6123      	str	r3, [r4, #16]
 800f8fe:	4649      	mov	r1, r9
 800f900:	f000 f87a 	bl	800f9f8 <ucdr_check_final_buffer_behavior>
 800f904:	2800      	cmp	r0, #0
 800f906:	d046      	beq.n	800f996 <ucdr_deserialize_float+0xd6>
 800f908:	7d23      	ldrb	r3, [r4, #20]
 800f90a:	2b01      	cmp	r3, #1
 800f90c:	d05c      	beq.n	800f9c8 <ucdr_deserialize_float+0x108>
 800f90e:	78f3      	ldrb	r3, [r6, #3]
 800f910:	702b      	strb	r3, [r5, #0]
 800f912:	2f00      	cmp	r7, #0
 800f914:	d04c      	beq.n	800f9b0 <ucdr_deserialize_float+0xf0>
 800f916:	78b3      	ldrb	r3, [r6, #2]
 800f918:	2f01      	cmp	r7, #1
 800f91a:	706b      	strb	r3, [r5, #1]
 800f91c:	f105 0302 	add.w	r3, r5, #2
 800f920:	d04a      	beq.n	800f9b8 <ucdr_deserialize_float+0xf8>
 800f922:	7873      	ldrb	r3, [r6, #1]
 800f924:	2f02      	cmp	r7, #2
 800f926:	70ab      	strb	r3, [r5, #2]
 800f928:	f105 0303 	add.w	r3, r5, #3
 800f92c:	d048      	beq.n	800f9c0 <ucdr_deserialize_float+0x100>
 800f92e:	7833      	ldrb	r3, [r6, #0]
 800f930:	70eb      	strb	r3, [r5, #3]
 800f932:	6923      	ldr	r3, [r4, #16]
 800f934:	2104      	movs	r1, #4
 800f936:	68a2      	ldr	r2, [r4, #8]
 800f938:	3304      	adds	r3, #4
 800f93a:	7da0      	ldrb	r0, [r4, #22]
 800f93c:	444a      	add	r2, r9
 800f93e:	7561      	strb	r1, [r4, #21]
 800f940:	1bdb      	subs	r3, r3, r7
 800f942:	f080 0001 	eor.w	r0, r0, #1
 800f946:	60a2      	str	r2, [r4, #8]
 800f948:	6123      	str	r3, [r4, #16]
 800f94a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f94e:	2104      	movs	r1, #4
 800f950:	4620      	mov	r0, r4
 800f952:	f000 f851 	bl	800f9f8 <ucdr_check_final_buffer_behavior>
 800f956:	b1b0      	cbz	r0, 800f986 <ucdr_deserialize_float+0xc6>
 800f958:	7d23      	ldrb	r3, [r4, #20]
 800f95a:	2b01      	cmp	r3, #1
 800f95c:	68a3      	ldr	r3, [r4, #8]
 800f95e:	d017      	beq.n	800f990 <ucdr_deserialize_float+0xd0>
 800f960:	78db      	ldrb	r3, [r3, #3]
 800f962:	702b      	strb	r3, [r5, #0]
 800f964:	68a3      	ldr	r3, [r4, #8]
 800f966:	789b      	ldrb	r3, [r3, #2]
 800f968:	706b      	strb	r3, [r5, #1]
 800f96a:	68a3      	ldr	r3, [r4, #8]
 800f96c:	785b      	ldrb	r3, [r3, #1]
 800f96e:	70ab      	strb	r3, [r5, #2]
 800f970:	68a3      	ldr	r3, [r4, #8]
 800f972:	781b      	ldrb	r3, [r3, #0]
 800f974:	70eb      	strb	r3, [r5, #3]
 800f976:	2104      	movs	r1, #4
 800f978:	68a2      	ldr	r2, [r4, #8]
 800f97a:	6923      	ldr	r3, [r4, #16]
 800f97c:	440a      	add	r2, r1
 800f97e:	7561      	strb	r1, [r4, #21]
 800f980:	440b      	add	r3, r1
 800f982:	60a2      	str	r2, [r4, #8]
 800f984:	6123      	str	r3, [r4, #16]
 800f986:	7da0      	ldrb	r0, [r4, #22]
 800f988:	f080 0001 	eor.w	r0, r0, #1
 800f98c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f990:	681b      	ldr	r3, [r3, #0]
 800f992:	602b      	str	r3, [r5, #0]
 800f994:	e7ef      	b.n	800f976 <ucdr_deserialize_float+0xb6>
 800f996:	68a2      	ldr	r2, [r4, #8]
 800f998:	6923      	ldr	r3, [r4, #16]
 800f99a:	1bd2      	subs	r2, r2, r7
 800f99c:	7da0      	ldrb	r0, [r4, #22]
 800f99e:	1bdb      	subs	r3, r3, r7
 800f9a0:	f884 8015 	strb.w	r8, [r4, #21]
 800f9a4:	f080 0001 	eor.w	r0, r0, #1
 800f9a8:	60a2      	str	r2, [r4, #8]
 800f9aa:	6123      	str	r3, [r4, #16]
 800f9ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f9b0:	68a3      	ldr	r3, [r4, #8]
 800f9b2:	789b      	ldrb	r3, [r3, #2]
 800f9b4:	706b      	strb	r3, [r5, #1]
 800f9b6:	1cab      	adds	r3, r5, #2
 800f9b8:	68a2      	ldr	r2, [r4, #8]
 800f9ba:	7852      	ldrb	r2, [r2, #1]
 800f9bc:	f803 2b01 	strb.w	r2, [r3], #1
 800f9c0:	68a2      	ldr	r2, [r4, #8]
 800f9c2:	7812      	ldrb	r2, [r2, #0]
 800f9c4:	701a      	strb	r2, [r3, #0]
 800f9c6:	e7b4      	b.n	800f932 <ucdr_deserialize_float+0x72>
 800f9c8:	4631      	mov	r1, r6
 800f9ca:	463a      	mov	r2, r7
 800f9cc:	4628      	mov	r0, r5
 800f9ce:	f00b fe4e 	bl	801b66e <memcpy>
 800f9d2:	464a      	mov	r2, r9
 800f9d4:	19e8      	adds	r0, r5, r7
 800f9d6:	68a1      	ldr	r1, [r4, #8]
 800f9d8:	f00b fe49 	bl	801b66e <memcpy>
 800f9dc:	e7a9      	b.n	800f932 <ucdr_deserialize_float+0x72>
 800f9de:	bf00      	nop

0800f9e0 <ucdr_check_buffer_available_for>:
 800f9e0:	7d83      	ldrb	r3, [r0, #22]
 800f9e2:	b93b      	cbnz	r3, 800f9f4 <ucdr_check_buffer_available_for+0x14>
 800f9e4:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800f9e8:	4419      	add	r1, r3
 800f9ea:	4288      	cmp	r0, r1
 800f9ec:	bf34      	ite	cc
 800f9ee:	2000      	movcc	r0, #0
 800f9f0:	2001      	movcs	r0, #1
 800f9f2:	4770      	bx	lr
 800f9f4:	2000      	movs	r0, #0
 800f9f6:	4770      	bx	lr

0800f9f8 <ucdr_check_final_buffer_behavior>:
 800f9f8:	7d83      	ldrb	r3, [r0, #22]
 800f9fa:	b943      	cbnz	r3, 800fa0e <ucdr_check_final_buffer_behavior+0x16>
 800f9fc:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800fa00:	b510      	push	{r4, lr}
 800fa02:	4291      	cmp	r1, r2
 800fa04:	4604      	mov	r4, r0
 800fa06:	d205      	bcs.n	800fa14 <ucdr_check_final_buffer_behavior+0x1c>
 800fa08:	2301      	movs	r3, #1
 800fa0a:	4618      	mov	r0, r3
 800fa0c:	bd10      	pop	{r4, pc}
 800fa0e:	2300      	movs	r3, #0
 800fa10:	4618      	mov	r0, r3
 800fa12:	4770      	bx	lr
 800fa14:	6982      	ldr	r2, [r0, #24]
 800fa16:	b13a      	cbz	r2, 800fa28 <ucdr_check_final_buffer_behavior+0x30>
 800fa18:	69c1      	ldr	r1, [r0, #28]
 800fa1a:	4790      	blx	r2
 800fa1c:	f080 0301 	eor.w	r3, r0, #1
 800fa20:	75a0      	strb	r0, [r4, #22]
 800fa22:	b2db      	uxtb	r3, r3
 800fa24:	4618      	mov	r0, r3
 800fa26:	bd10      	pop	{r4, pc}
 800fa28:	2001      	movs	r0, #1
 800fa2a:	75a0      	strb	r0, [r4, #22]
 800fa2c:	e7fa      	b.n	800fa24 <ucdr_check_final_buffer_behavior+0x2c>
 800fa2e:	bf00      	nop

0800fa30 <ucdr_set_on_full_buffer_callback>:
 800fa30:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800fa34:	4770      	bx	lr
 800fa36:	bf00      	nop

0800fa38 <ucdr_init_buffer_origin_offset_endian>:
 800fa38:	b410      	push	{r4}
 800fa3a:	9c01      	ldr	r4, [sp, #4]
 800fa3c:	440a      	add	r2, r1
 800fa3e:	6001      	str	r1, [r0, #0]
 800fa40:	6042      	str	r2, [r0, #4]
 800fa42:	190a      	adds	r2, r1, r4
 800fa44:	441c      	add	r4, r3
 800fa46:	6082      	str	r2, [r0, #8]
 800fa48:	2200      	movs	r2, #0
 800fa4a:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800fa4e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800fa52:	7542      	strb	r2, [r0, #21]
 800fa54:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fa58:	7582      	strb	r2, [r0, #22]
 800fa5a:	7503      	strb	r3, [r0, #20]
 800fa5c:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800fa60:	4770      	bx	lr
 800fa62:	bf00      	nop

0800fa64 <ucdr_init_buffer_origin_offset>:
 800fa64:	b510      	push	{r4, lr}
 800fa66:	b082      	sub	sp, #8
 800fa68:	9c04      	ldr	r4, [sp, #16]
 800fa6a:	9400      	str	r4, [sp, #0]
 800fa6c:	2401      	movs	r4, #1
 800fa6e:	9401      	str	r4, [sp, #4]
 800fa70:	f7ff ffe2 	bl	800fa38 <ucdr_init_buffer_origin_offset_endian>
 800fa74:	b002      	add	sp, #8
 800fa76:	bd10      	pop	{r4, pc}

0800fa78 <ucdr_init_buffer_origin>:
 800fa78:	b510      	push	{r4, lr}
 800fa7a:	2400      	movs	r4, #0
 800fa7c:	b082      	sub	sp, #8
 800fa7e:	9400      	str	r4, [sp, #0]
 800fa80:	f7ff fff0 	bl	800fa64 <ucdr_init_buffer_origin_offset>
 800fa84:	b002      	add	sp, #8
 800fa86:	bd10      	pop	{r4, pc}

0800fa88 <ucdr_init_buffer>:
 800fa88:	2300      	movs	r3, #0
 800fa8a:	f7ff bff5 	b.w	800fa78 <ucdr_init_buffer_origin>
 800fa8e:	bf00      	nop

0800fa90 <ucdr_alignment>:
 800fa90:	fbb0 f2f1 	udiv	r2, r0, r1
 800fa94:	fb02 0011 	mls	r0, r2, r1, r0
 800fa98:	1e4b      	subs	r3, r1, #1
 800fa9a:	1a08      	subs	r0, r1, r0
 800fa9c:	4018      	ands	r0, r3
 800fa9e:	4770      	bx	lr

0800faa0 <ucdr_buffer_alignment>:
 800faa0:	7d43      	ldrb	r3, [r0, #21]
 800faa2:	428b      	cmp	r3, r1
 800faa4:	d209      	bcs.n	800faba <ucdr_buffer_alignment+0x1a>
 800faa6:	6903      	ldr	r3, [r0, #16]
 800faa8:	1e4a      	subs	r2, r1, #1
 800faaa:	fbb3 f0f1 	udiv	r0, r3, r1
 800faae:	fb01 3010 	mls	r0, r1, r0, r3
 800fab2:	1a09      	subs	r1, r1, r0
 800fab4:	ea01 0002 	and.w	r0, r1, r2
 800fab8:	4770      	bx	lr
 800faba:	2000      	movs	r0, #0
 800fabc:	4770      	bx	lr
 800fabe:	bf00      	nop

0800fac0 <ucdr_align_to>:
 800fac0:	b538      	push	{r3, r4, r5, lr}
 800fac2:	4604      	mov	r4, r0
 800fac4:	460d      	mov	r5, r1
 800fac6:	f7ff ffeb 	bl	800faa0 <ucdr_buffer_alignment>
 800faca:	68a3      	ldr	r3, [r4, #8]
 800facc:	7565      	strb	r5, [r4, #21]
 800face:	181a      	adds	r2, r3, r0
 800fad0:	6923      	ldr	r3, [r4, #16]
 800fad2:	4418      	add	r0, r3
 800fad4:	6863      	ldr	r3, [r4, #4]
 800fad6:	4293      	cmp	r3, r2
 800fad8:	6120      	str	r0, [r4, #16]
 800fada:	bf28      	it	cs
 800fadc:	4613      	movcs	r3, r2
 800fade:	60a3      	str	r3, [r4, #8]
 800fae0:	bd38      	pop	{r3, r4, r5, pc}
 800fae2:	bf00      	nop

0800fae4 <ucdr_buffer_length>:
 800fae4:	6882      	ldr	r2, [r0, #8]
 800fae6:	6800      	ldr	r0, [r0, #0]
 800fae8:	1a10      	subs	r0, r2, r0
 800faea:	4770      	bx	lr

0800faec <ucdr_buffer_remaining>:
 800faec:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800faf0:	1a10      	subs	r0, r2, r0
 800faf2:	4770      	bx	lr

0800faf4 <ucdr_check_final_buffer_behavior_array>:
 800faf4:	b538      	push	{r3, r4, r5, lr}
 800faf6:	7d83      	ldrb	r3, [r0, #22]
 800faf8:	b9a3      	cbnz	r3, 800fb24 <ucdr_check_final_buffer_behavior_array+0x30>
 800fafa:	4604      	mov	r4, r0
 800fafc:	460d      	mov	r5, r1
 800fafe:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800fb02:	429a      	cmp	r2, r3
 800fb04:	d300      	bcc.n	800fb08 <ucdr_check_final_buffer_behavior_array+0x14>
 800fb06:	b931      	cbnz	r1, 800fb16 <ucdr_check_final_buffer_behavior_array+0x22>
 800fb08:	4620      	mov	r0, r4
 800fb0a:	f7ff ffef 	bl	800faec <ucdr_buffer_remaining>
 800fb0e:	42a8      	cmp	r0, r5
 800fb10:	bf28      	it	cs
 800fb12:	4628      	movcs	r0, r5
 800fb14:	bd38      	pop	{r3, r4, r5, pc}
 800fb16:	6983      	ldr	r3, [r0, #24]
 800fb18:	b133      	cbz	r3, 800fb28 <ucdr_check_final_buffer_behavior_array+0x34>
 800fb1a:	69c1      	ldr	r1, [r0, #28]
 800fb1c:	4798      	blx	r3
 800fb1e:	75a0      	strb	r0, [r4, #22]
 800fb20:	2800      	cmp	r0, #0
 800fb22:	d0f1      	beq.n	800fb08 <ucdr_check_final_buffer_behavior_array+0x14>
 800fb24:	2000      	movs	r0, #0
 800fb26:	bd38      	pop	{r3, r4, r5, pc}
 800fb28:	2301      	movs	r3, #1
 800fb2a:	7583      	strb	r3, [r0, #22]
 800fb2c:	e7fa      	b.n	800fb24 <ucdr_check_final_buffer_behavior_array+0x30>
 800fb2e:	bf00      	nop

0800fb30 <ucdr_advance_buffer>:
 800fb30:	b538      	push	{r3, r4, r5, lr}
 800fb32:	4604      	mov	r4, r0
 800fb34:	460d      	mov	r5, r1
 800fb36:	f7ff ff53 	bl	800f9e0 <ucdr_check_buffer_available_for>
 800fb3a:	b178      	cbz	r0, 800fb5c <ucdr_advance_buffer+0x2c>
 800fb3c:	6923      	ldr	r3, [r4, #16]
 800fb3e:	68a2      	ldr	r2, [r4, #8]
 800fb40:	442b      	add	r3, r5
 800fb42:	442a      	add	r2, r5
 800fb44:	6123      	str	r3, [r4, #16]
 800fb46:	2301      	movs	r3, #1
 800fb48:	60a2      	str	r2, [r4, #8]
 800fb4a:	7563      	strb	r3, [r4, #21]
 800fb4c:	bd38      	pop	{r3, r4, r5, pc}
 800fb4e:	68a2      	ldr	r2, [r4, #8]
 800fb50:	1a2d      	subs	r5, r5, r0
 800fb52:	6923      	ldr	r3, [r4, #16]
 800fb54:	4402      	add	r2, r0
 800fb56:	4418      	add	r0, r3
 800fb58:	60a2      	str	r2, [r4, #8]
 800fb5a:	6120      	str	r0, [r4, #16]
 800fb5c:	4629      	mov	r1, r5
 800fb5e:	2201      	movs	r2, #1
 800fb60:	4620      	mov	r0, r4
 800fb62:	f7ff ffc7 	bl	800faf4 <ucdr_check_final_buffer_behavior_array>
 800fb66:	2800      	cmp	r0, #0
 800fb68:	d1f1      	bne.n	800fb4e <ucdr_advance_buffer+0x1e>
 800fb6a:	2301      	movs	r3, #1
 800fb6c:	7563      	strb	r3, [r4, #21]
 800fb6e:	bd38      	pop	{r3, r4, r5, pc}

0800fb70 <ucdr_serialize_sequence_char>:
 800fb70:	b570      	push	{r4, r5, r6, lr}
 800fb72:	4615      	mov	r5, r2
 800fb74:	460e      	mov	r6, r1
 800fb76:	7d01      	ldrb	r1, [r0, #20]
 800fb78:	4604      	mov	r4, r0
 800fb7a:	f7fe ffc9 	bl	800eb10 <ucdr_serialize_endian_uint32_t>
 800fb7e:	b90d      	cbnz	r5, 800fb84 <ucdr_serialize_sequence_char+0x14>
 800fb80:	2001      	movs	r0, #1
 800fb82:	bd70      	pop	{r4, r5, r6, pc}
 800fb84:	462b      	mov	r3, r5
 800fb86:	4632      	mov	r2, r6
 800fb88:	7d21      	ldrb	r1, [r4, #20]
 800fb8a:	4620      	mov	r0, r4
 800fb8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fb90:	f7fe bbb0 	b.w	800e2f4 <ucdr_serialize_endian_array_char>

0800fb94 <ucdr_deserialize_sequence_char>:
 800fb94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb98:	461d      	mov	r5, r3
 800fb9a:	4616      	mov	r6, r2
 800fb9c:	460f      	mov	r7, r1
 800fb9e:	461a      	mov	r2, r3
 800fba0:	7d01      	ldrb	r1, [r0, #20]
 800fba2:	4604      	mov	r4, r0
 800fba4:	f7ff f8dc 	bl	800ed60 <ucdr_deserialize_endian_uint32_t>
 800fba8:	682b      	ldr	r3, [r5, #0]
 800fbaa:	429e      	cmp	r6, r3
 800fbac:	d201      	bcs.n	800fbb2 <ucdr_deserialize_sequence_char+0x1e>
 800fbae:	2201      	movs	r2, #1
 800fbb0:	75a2      	strb	r2, [r4, #22]
 800fbb2:	b913      	cbnz	r3, 800fbba <ucdr_deserialize_sequence_char+0x26>
 800fbb4:	2001      	movs	r0, #1
 800fbb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fbba:	463a      	mov	r2, r7
 800fbbc:	7d21      	ldrb	r1, [r4, #20]
 800fbbe:	4620      	mov	r0, r4
 800fbc0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fbc4:	f7fe bbc8 	b.w	800e358 <ucdr_deserialize_endian_array_char>

0800fbc8 <ucdr_serialize_sequence_uint8_t>:
 800fbc8:	b570      	push	{r4, r5, r6, lr}
 800fbca:	4615      	mov	r5, r2
 800fbcc:	460e      	mov	r6, r1
 800fbce:	7d01      	ldrb	r1, [r0, #20]
 800fbd0:	4604      	mov	r4, r0
 800fbd2:	f7fe ff9d 	bl	800eb10 <ucdr_serialize_endian_uint32_t>
 800fbd6:	b90d      	cbnz	r5, 800fbdc <ucdr_serialize_sequence_uint8_t+0x14>
 800fbd8:	2001      	movs	r0, #1
 800fbda:	bd70      	pop	{r4, r5, r6, pc}
 800fbdc:	462b      	mov	r3, r5
 800fbde:	4632      	mov	r2, r6
 800fbe0:	7d21      	ldrb	r1, [r4, #20]
 800fbe2:	4620      	mov	r0, r4
 800fbe4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fbe8:	f7fe bc1c 	b.w	800e424 <ucdr_serialize_endian_array_uint8_t>

0800fbec <ucdr_deserialize_sequence_uint8_t>:
 800fbec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbf0:	461d      	mov	r5, r3
 800fbf2:	4616      	mov	r6, r2
 800fbf4:	460f      	mov	r7, r1
 800fbf6:	461a      	mov	r2, r3
 800fbf8:	7d01      	ldrb	r1, [r0, #20]
 800fbfa:	4604      	mov	r4, r0
 800fbfc:	f7ff f8b0 	bl	800ed60 <ucdr_deserialize_endian_uint32_t>
 800fc00:	682b      	ldr	r3, [r5, #0]
 800fc02:	429e      	cmp	r6, r3
 800fc04:	d201      	bcs.n	800fc0a <ucdr_deserialize_sequence_uint8_t+0x1e>
 800fc06:	2201      	movs	r2, #1
 800fc08:	75a2      	strb	r2, [r4, #22]
 800fc0a:	b913      	cbnz	r3, 800fc12 <ucdr_deserialize_sequence_uint8_t+0x26>
 800fc0c:	2001      	movs	r0, #1
 800fc0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc12:	463a      	mov	r2, r7
 800fc14:	7d21      	ldrb	r1, [r4, #20]
 800fc16:	4620      	mov	r0, r4
 800fc18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fc1c:	f7fe bc68 	b.w	800e4f0 <ucdr_deserialize_endian_array_uint8_t>

0800fc20 <racs_services__srv__Control_Event__get_type_description.part.0>:
 800fc20:	b510      	push	{r4, lr}
 800fc22:	2000      	movs	r0, #0
 800fc24:	4c13      	ldr	r4, [pc, #76]	; (800fc74 <racs_services__srv__Control_Event__get_type_description.part.0+0x54>)
 800fc26:	f006 f81b 	bl	8015c60 <builtin_interfaces__msg__Time__get_type_description>
 800fc2a:	300c      	adds	r0, #12
 800fc2c:	4b12      	ldr	r3, [pc, #72]	; (800fc78 <racs_services__srv__Control_Event__get_type_description.part.0+0x58>)
 800fc2e:	c807      	ldmia	r0, {r0, r1, r2}
 800fc30:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800fc34:	7823      	ldrb	r3, [r4, #0]
 800fc36:	b90b      	cbnz	r3, 800fc3c <racs_services__srv__Control_Event__get_type_description.part.0+0x1c>
 800fc38:	2301      	movs	r3, #1
 800fc3a:	7023      	strb	r3, [r4, #0]
 800fc3c:	4a0f      	ldr	r2, [pc, #60]	; (800fc7c <racs_services__srv__Control_Event__get_type_description.part.0+0x5c>)
 800fc3e:	4b10      	ldr	r3, [pc, #64]	; (800fc80 <racs_services__srv__Control_Event__get_type_description.part.0+0x60>)
 800fc40:	4c10      	ldr	r4, [pc, #64]	; (800fc84 <racs_services__srv__Control_Event__get_type_description.part.0+0x64>)
 800fc42:	ca07      	ldmia	r2, {r0, r1, r2}
 800fc44:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800fc48:	7823      	ldrb	r3, [r4, #0]
 800fc4a:	b90b      	cbnz	r3, 800fc50 <racs_services__srv__Control_Event__get_type_description.part.0+0x30>
 800fc4c:	2301      	movs	r3, #1
 800fc4e:	7023      	strb	r3, [r4, #0]
 800fc50:	4b0d      	ldr	r3, [pc, #52]	; (800fc88 <racs_services__srv__Control_Event__get_type_description.part.0+0x68>)
 800fc52:	4c0e      	ldr	r4, [pc, #56]	; (800fc8c <racs_services__srv__Control_Event__get_type_description.part.0+0x6c>)
 800fc54:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fc58:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800fc5c:	2000      	movs	r0, #0
 800fc5e:	3418      	adds	r4, #24
 800fc60:	f005 ff9e 	bl	8015ba0 <service_msgs__msg__ServiceEventInfo__get_type_description>
 800fc64:	300c      	adds	r0, #12
 800fc66:	4b0a      	ldr	r3, [pc, #40]	; (800fc90 <racs_services__srv__Control_Event__get_type_description.part.0+0x70>)
 800fc68:	c807      	ldmia	r0, {r0, r1, r2}
 800fc6a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800fc6e:	2201      	movs	r2, #1
 800fc70:	701a      	strb	r2, [r3, #0]
 800fc72:	bd10      	pop	{r4, pc}
 800fc74:	2000b9b4 	.word	0x2000b9b4
 800fc78:	20000d38 	.word	0x20000d38
 800fc7c:	0801d00c 	.word	0x0801d00c
 800fc80:	20000d50 	.word	0x20000d50
 800fc84:	2000b9b2 	.word	0x2000b9b2
 800fc88:	0801cfe8 	.word	0x0801cfe8
 800fc8c:	20000d68 	.word	0x20000d68
 800fc90:	2000b9b1 	.word	0x2000b9b1

0800fc94 <racs_services__srv__Control__get_type_hash>:
 800fc94:	4800      	ldr	r0, [pc, #0]	; (800fc98 <racs_services__srv__Control__get_type_hash+0x4>)
 800fc96:	4770      	bx	lr
 800fc98:	20000c04 	.word	0x20000c04

0800fc9c <racs_services__srv__Control_Request__get_type_hash>:
 800fc9c:	4800      	ldr	r0, [pc, #0]	; (800fca0 <racs_services__srv__Control_Request__get_type_hash+0x4>)
 800fc9e:	4770      	bx	lr
 800fca0:	20000be0 	.word	0x20000be0

0800fca4 <racs_services__srv__Control_Response__get_type_hash>:
 800fca4:	4800      	ldr	r0, [pc, #0]	; (800fca8 <racs_services__srv__Control_Response__get_type_hash+0x4>)
 800fca6:	4770      	bx	lr
 800fca8:	20000bbc 	.word	0x20000bbc

0800fcac <racs_services__srv__Control_Event__get_type_hash>:
 800fcac:	4800      	ldr	r0, [pc, #0]	; (800fcb0 <racs_services__srv__Control_Event__get_type_hash+0x4>)
 800fcae:	4770      	bx	lr
 800fcb0:	20000b98 	.word	0x20000b98

0800fcb4 <racs_services__srv__Control__get_type_description>:
 800fcb4:	b538      	push	{r3, r4, r5, lr}
 800fcb6:	4d1c      	ldr	r5, [pc, #112]	; (800fd28 <racs_services__srv__Control__get_type_description+0x74>)
 800fcb8:	7828      	ldrb	r0, [r5, #0]
 800fcba:	b108      	cbz	r0, 800fcc0 <racs_services__srv__Control__get_type_description+0xc>
 800fcbc:	481b      	ldr	r0, [pc, #108]	; (800fd2c <racs_services__srv__Control__get_type_description+0x78>)
 800fcbe:	bd38      	pop	{r3, r4, r5, pc}
 800fcc0:	f005 ffce 	bl	8015c60 <builtin_interfaces__msg__Time__get_type_description>
 800fcc4:	300c      	adds	r0, #12
 800fcc6:	4b1a      	ldr	r3, [pc, #104]	; (800fd30 <racs_services__srv__Control__get_type_description+0x7c>)
 800fcc8:	c807      	ldmia	r0, {r0, r1, r2}
 800fcca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800fcce:	4b19      	ldr	r3, [pc, #100]	; (800fd34 <racs_services__srv__Control__get_type_description+0x80>)
 800fcd0:	781b      	ldrb	r3, [r3, #0]
 800fcd2:	b32b      	cbz	r3, 800fd20 <racs_services__srv__Control__get_type_description+0x6c>
 800fcd4:	4a18      	ldr	r2, [pc, #96]	; (800fd38 <racs_services__srv__Control__get_type_description+0x84>)
 800fcd6:	4b19      	ldr	r3, [pc, #100]	; (800fd3c <racs_services__srv__Control__get_type_description+0x88>)
 800fcd8:	4c19      	ldr	r4, [pc, #100]	; (800fd40 <racs_services__srv__Control__get_type_description+0x8c>)
 800fcda:	ca07      	ldmia	r2, {r0, r1, r2}
 800fcdc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800fce0:	7823      	ldrb	r3, [r4, #0]
 800fce2:	b90b      	cbnz	r3, 800fce8 <racs_services__srv__Control__get_type_description+0x34>
 800fce4:	2301      	movs	r3, #1
 800fce6:	7023      	strb	r3, [r4, #0]
 800fce8:	4a16      	ldr	r2, [pc, #88]	; (800fd44 <racs_services__srv__Control__get_type_description+0x90>)
 800fcea:	4b17      	ldr	r3, [pc, #92]	; (800fd48 <racs_services__srv__Control__get_type_description+0x94>)
 800fcec:	4c17      	ldr	r4, [pc, #92]	; (800fd4c <racs_services__srv__Control__get_type_description+0x98>)
 800fcee:	ca07      	ldmia	r2, {r0, r1, r2}
 800fcf0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800fcf4:	7823      	ldrb	r3, [r4, #0]
 800fcf6:	b90b      	cbnz	r3, 800fcfc <racs_services__srv__Control__get_type_description+0x48>
 800fcf8:	2301      	movs	r3, #1
 800fcfa:	7023      	strb	r3, [r4, #0]
 800fcfc:	4b14      	ldr	r3, [pc, #80]	; (800fd50 <racs_services__srv__Control__get_type_description+0x9c>)
 800fcfe:	4c15      	ldr	r4, [pc, #84]	; (800fd54 <racs_services__srv__Control__get_type_description+0xa0>)
 800fd00:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fd04:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800fd08:	2000      	movs	r0, #0
 800fd0a:	3418      	adds	r4, #24
 800fd0c:	f005 ff48 	bl	8015ba0 <service_msgs__msg__ServiceEventInfo__get_type_description>
 800fd10:	300c      	adds	r0, #12
 800fd12:	2301      	movs	r3, #1
 800fd14:	c807      	ldmia	r0, {r0, r1, r2}
 800fd16:	702b      	strb	r3, [r5, #0]
 800fd18:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800fd1c:	4803      	ldr	r0, [pc, #12]	; (800fd2c <racs_services__srv__Control__get_type_description+0x78>)
 800fd1e:	bd38      	pop	{r3, r4, r5, pc}
 800fd20:	f7ff ff7e 	bl	800fc20 <racs_services__srv__Control_Event__get_type_description.part.0>
 800fd24:	e7d6      	b.n	800fcd4 <racs_services__srv__Control__get_type_description+0x20>
 800fd26:	bf00      	nop
 800fd28:	2000b9b5 	.word	0x2000b9b5
 800fd2c:	0801d024 	.word	0x0801d024
 800fd30:	20001200 	.word	0x20001200
 800fd34:	2000b9b1 	.word	0x2000b9b1
 800fd38:	0801cfc4 	.word	0x0801cfc4
 800fd3c:	20001218 	.word	0x20001218
 800fd40:	2000b9b4 	.word	0x2000b9b4
 800fd44:	0801d00c 	.word	0x0801d00c
 800fd48:	20001230 	.word	0x20001230
 800fd4c:	2000b9b2 	.word	0x2000b9b2
 800fd50:	0801cfe8 	.word	0x0801cfe8
 800fd54:	20001248 	.word	0x20001248

0800fd58 <racs_services__srv__Control_Request__get_type_description>:
 800fd58:	4b03      	ldr	r3, [pc, #12]	; (800fd68 <racs_services__srv__Control_Request__get_type_description+0x10>)
 800fd5a:	781a      	ldrb	r2, [r3, #0]
 800fd5c:	b90a      	cbnz	r2, 800fd62 <racs_services__srv__Control_Request__get_type_description+0xa>
 800fd5e:	2201      	movs	r2, #1
 800fd60:	701a      	strb	r2, [r3, #0]
 800fd62:	4802      	ldr	r0, [pc, #8]	; (800fd6c <racs_services__srv__Control_Request__get_type_description+0x14>)
 800fd64:	4770      	bx	lr
 800fd66:	bf00      	nop
 800fd68:	2000b9b4 	.word	0x2000b9b4
 800fd6c:	0801d000 	.word	0x0801d000

0800fd70 <racs_services__srv__Control_Response__get_type_description>:
 800fd70:	4b03      	ldr	r3, [pc, #12]	; (800fd80 <racs_services__srv__Control_Response__get_type_description+0x10>)
 800fd72:	781a      	ldrb	r2, [r3, #0]
 800fd74:	b90a      	cbnz	r2, 800fd7a <racs_services__srv__Control_Response__get_type_description+0xa>
 800fd76:	2201      	movs	r2, #1
 800fd78:	701a      	strb	r2, [r3, #0]
 800fd7a:	4802      	ldr	r0, [pc, #8]	; (800fd84 <racs_services__srv__Control_Response__get_type_description+0x14>)
 800fd7c:	4770      	bx	lr
 800fd7e:	bf00      	nop
 800fd80:	2000b9b2 	.word	0x2000b9b2
 800fd84:	0801cfdc 	.word	0x0801cfdc

0800fd88 <racs_services__srv__Control_Event__get_type_description>:
 800fd88:	b508      	push	{r3, lr}
 800fd8a:	4b04      	ldr	r3, [pc, #16]	; (800fd9c <racs_services__srv__Control_Event__get_type_description+0x14>)
 800fd8c:	781b      	ldrb	r3, [r3, #0]
 800fd8e:	b10b      	cbz	r3, 800fd94 <racs_services__srv__Control_Event__get_type_description+0xc>
 800fd90:	4803      	ldr	r0, [pc, #12]	; (800fda0 <racs_services__srv__Control_Event__get_type_description+0x18>)
 800fd92:	bd08      	pop	{r3, pc}
 800fd94:	f7ff ff44 	bl	800fc20 <racs_services__srv__Control_Event__get_type_description.part.0>
 800fd98:	4801      	ldr	r0, [pc, #4]	; (800fda0 <racs_services__srv__Control_Event__get_type_description+0x18>)
 800fd9a:	bd08      	pop	{r3, pc}
 800fd9c:	2000b9b1 	.word	0x2000b9b1
 800fda0:	0801cfb8 	.word	0x0801cfb8

0800fda4 <racs_services__srv__Control__get_type_description_sources>:
 800fda4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fda8:	4b2c      	ldr	r3, [pc, #176]	; (800fe5c <racs_services__srv__Control__get_type_description_sources+0xb8>)
 800fdaa:	f893 9000 	ldrb.w	r9, [r3]
 800fdae:	f1b9 0f00 	cmp.w	r9, #0
 800fdb2:	d002      	beq.n	800fdba <racs_services__srv__Control__get_type_description_sources+0x16>
 800fdb4:	482a      	ldr	r0, [pc, #168]	; (800fe60 <racs_services__srv__Control__get_type_description_sources+0xbc>)
 800fdb6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdba:	4d2a      	ldr	r5, [pc, #168]	; (800fe64 <racs_services__srv__Control__get_type_description_sources+0xc0>)
 800fdbc:	4c2a      	ldr	r4, [pc, #168]	; (800fe68 <racs_services__srv__Control__get_type_description_sources+0xc4>)
 800fdbe:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 800fe70 <racs_services__srv__Control__get_type_description_sources+0xcc>
 800fdc2:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 800fe74 <racs_services__srv__Control__get_type_description_sources+0xd0>
 800fdc6:	4e29      	ldr	r6, [pc, #164]	; (800fe6c <racs_services__srv__Control__get_type_description_sources+0xc8>)
 800fdc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fdca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fdcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fdce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fdd0:	682b      	ldr	r3, [r5, #0]
 800fdd2:	4625      	mov	r5, r4
 800fdd4:	4648      	mov	r0, r9
 800fdd6:	f104 0a28 	add.w	sl, r4, #40	; 0x28
 800fdda:	f845 3b04 	str.w	r3, [r5], #4
 800fdde:	f104 074c 	add.w	r7, r4, #76	; 0x4c
 800fde2:	f005 ff49 	bl	8015c78 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 800fde6:	4684      	mov	ip, r0
 800fde8:	f104 0e70 	add.w	lr, r4, #112	; 0x70
 800fdec:	3494      	adds	r4, #148	; 0x94
 800fdee:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800fdf2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800fdf4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800fdf8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800fdfa:	f8dc 3000 	ldr.w	r3, [ip]
 800fdfe:	602b      	str	r3, [r5, #0]
 800fe00:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 800fe04:	e8aa 000f 	stmia.w	sl!, {r0, r1, r2, r3}
 800fe08:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 800fe0c:	e8aa 000f 	stmia.w	sl!, {r0, r1, r2, r3}
 800fe10:	f8db 3000 	ldr.w	r3, [fp]
 800fe14:	f8ca 3000 	str.w	r3, [sl]
 800fe18:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 800fe1c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800fe1e:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 800fe22:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800fe24:	f8d8 3000 	ldr.w	r3, [r8]
 800fe28:	603b      	str	r3, [r7, #0]
 800fe2a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800fe2c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800fe30:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800fe32:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800fe36:	6833      	ldr	r3, [r6, #0]
 800fe38:	4648      	mov	r0, r9
 800fe3a:	f8ce 3000 	str.w	r3, [lr]
 800fe3e:	f005 fec7 	bl	8015bd0 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source>
 800fe42:	2301      	movs	r3, #1
 800fe44:	4a05      	ldr	r2, [pc, #20]	; (800fe5c <racs_services__srv__Control__get_type_description_sources+0xb8>)
 800fe46:	4605      	mov	r5, r0
 800fe48:	7013      	strb	r3, [r2, #0]
 800fe4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fe4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fe4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fe50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fe52:	682b      	ldr	r3, [r5, #0]
 800fe54:	4802      	ldr	r0, [pc, #8]	; (800fe60 <racs_services__srv__Control__get_type_description_sources+0xbc>)
 800fe56:	6023      	str	r3, [r4, #0]
 800fe58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe5c:	2000b9b0 	.word	0x2000b9b0
 800fe60:	0801d0fc 	.word	0x0801d0fc
 800fe64:	0801d0b4 	.word	0x0801d0b4
 800fe68:	2000ba6c 	.word	0x2000ba6c
 800fe6c:	0801d06c 	.word	0x0801d06c
 800fe70:	0801d048 	.word	0x0801d048
 800fe74:	0801d090 	.word	0x0801d090

0800fe78 <racs_services__srv__Control_Request__get_type_description_sources>:
 800fe78:	4b09      	ldr	r3, [pc, #36]	; (800fea0 <racs_services__srv__Control_Request__get_type_description_sources+0x28>)
 800fe7a:	781a      	ldrb	r2, [r3, #0]
 800fe7c:	b96a      	cbnz	r2, 800fe9a <racs_services__srv__Control_Request__get_type_description_sources+0x22>
 800fe7e:	2201      	movs	r2, #1
 800fe80:	b430      	push	{r4, r5}
 800fe82:	4d08      	ldr	r5, [pc, #32]	; (800fea4 <racs_services__srv__Control_Request__get_type_description_sources+0x2c>)
 800fe84:	4c08      	ldr	r4, [pc, #32]	; (800fea8 <racs_services__srv__Control_Request__get_type_description_sources+0x30>)
 800fe86:	701a      	strb	r2, [r3, #0]
 800fe88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fe8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fe8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fe8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fe90:	682b      	ldr	r3, [r5, #0]
 800fe92:	4806      	ldr	r0, [pc, #24]	; (800feac <racs_services__srv__Control_Request__get_type_description_sources+0x34>)
 800fe94:	6023      	str	r3, [r4, #0]
 800fe96:	bc30      	pop	{r4, r5}
 800fe98:	4770      	bx	lr
 800fe9a:	4804      	ldr	r0, [pc, #16]	; (800feac <racs_services__srv__Control_Request__get_type_description_sources+0x34>)
 800fe9c:	4770      	bx	lr
 800fe9e:	bf00      	nop
 800fea0:	2000b9b7 	.word	0x2000b9b7
 800fea4:	0801d090 	.word	0x0801d090
 800fea8:	2000bb68 	.word	0x2000bb68
 800feac:	0801d0f0 	.word	0x0801d0f0

0800feb0 <racs_services__srv__Control_Response__get_type_description_sources>:
 800feb0:	4b09      	ldr	r3, [pc, #36]	; (800fed8 <racs_services__srv__Control_Response__get_type_description_sources+0x28>)
 800feb2:	781a      	ldrb	r2, [r3, #0]
 800feb4:	b96a      	cbnz	r2, 800fed2 <racs_services__srv__Control_Response__get_type_description_sources+0x22>
 800feb6:	2201      	movs	r2, #1
 800feb8:	b430      	push	{r4, r5}
 800feba:	4d08      	ldr	r5, [pc, #32]	; (800fedc <racs_services__srv__Control_Response__get_type_description_sources+0x2c>)
 800febc:	4c08      	ldr	r4, [pc, #32]	; (800fee0 <racs_services__srv__Control_Response__get_type_description_sources+0x30>)
 800febe:	701a      	strb	r2, [r3, #0]
 800fec0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fec2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fec4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fec6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fec8:	682b      	ldr	r3, [r5, #0]
 800feca:	4806      	ldr	r0, [pc, #24]	; (800fee4 <racs_services__srv__Control_Response__get_type_description_sources+0x34>)
 800fecc:	6023      	str	r3, [r4, #0]
 800fece:	bc30      	pop	{r4, r5}
 800fed0:	4770      	bx	lr
 800fed2:	4804      	ldr	r0, [pc, #16]	; (800fee4 <racs_services__srv__Control_Response__get_type_description_sources+0x34>)
 800fed4:	4770      	bx	lr
 800fed6:	bf00      	nop
 800fed8:	2000b9b6 	.word	0x2000b9b6
 800fedc:	0801d06c 	.word	0x0801d06c
 800fee0:	2000bb44 	.word	0x2000bb44
 800fee4:	0801d0e4 	.word	0x0801d0e4

0800fee8 <racs_services__srv__Control_Event__get_type_description_sources>:
 800fee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800feec:	4e27      	ldr	r6, [pc, #156]	; (800ff8c <racs_services__srv__Control_Event__get_type_description_sources+0xa4>)
 800feee:	f896 8000 	ldrb.w	r8, [r6]
 800fef2:	f1b8 0f00 	cmp.w	r8, #0
 800fef6:	d002      	beq.n	800fefe <racs_services__srv__Control_Event__get_type_description_sources+0x16>
 800fef8:	4825      	ldr	r0, [pc, #148]	; (800ff90 <racs_services__srv__Control_Event__get_type_description_sources+0xa8>)
 800fefa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fefe:	4d25      	ldr	r5, [pc, #148]	; (800ff94 <racs_services__srv__Control_Event__get_type_description_sources+0xac>)
 800ff00:	4c25      	ldr	r4, [pc, #148]	; (800ff98 <racs_services__srv__Control_Event__get_type_description_sources+0xb0>)
 800ff02:	f8df a09c 	ldr.w	sl, [pc, #156]	; 800ffa0 <racs_services__srv__Control_Event__get_type_description_sources+0xb8>
 800ff06:	4f25      	ldr	r7, [pc, #148]	; (800ff9c <racs_services__srv__Control_Event__get_type_description_sources+0xb4>)
 800ff08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ff0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ff0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ff0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ff10:	682b      	ldr	r3, [r5, #0]
 800ff12:	4625      	mov	r5, r4
 800ff14:	4640      	mov	r0, r8
 800ff16:	f104 0928 	add.w	r9, r4, #40	; 0x28
 800ff1a:	f845 3b04 	str.w	r3, [r5], #4
 800ff1e:	f005 feab 	bl	8015c78 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 800ff22:	4684      	mov	ip, r0
 800ff24:	f104 0e4c 	add.w	lr, r4, #76	; 0x4c
 800ff28:	3470      	adds	r4, #112	; 0x70
 800ff2a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ff2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ff30:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ff34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ff36:	f8dc 3000 	ldr.w	r3, [ip]
 800ff3a:	602b      	str	r3, [r5, #0]
 800ff3c:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
 800ff40:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 800ff44:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
 800ff48:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 800ff4c:	f8da 3000 	ldr.w	r3, [sl]
 800ff50:	f8c9 3000 	str.w	r3, [r9]
 800ff54:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800ff56:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ff5a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800ff5c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ff60:	683b      	ldr	r3, [r7, #0]
 800ff62:	4640      	mov	r0, r8
 800ff64:	f8ce 3000 	str.w	r3, [lr]
 800ff68:	f005 fe32 	bl	8015bd0 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source>
 800ff6c:	2301      	movs	r3, #1
 800ff6e:	4684      	mov	ip, r0
 800ff70:	7033      	strb	r3, [r6, #0]
 800ff72:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ff76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ff78:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ff7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ff7e:	f8dc 3000 	ldr.w	r3, [ip]
 800ff82:	4803      	ldr	r0, [pc, #12]	; (800ff90 <racs_services__srv__Control_Event__get_type_description_sources+0xa8>)
 800ff84:	6023      	str	r3, [r4, #0]
 800ff86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff8a:	bf00      	nop
 800ff8c:	2000b9b3 	.word	0x2000b9b3
 800ff90:	0801d0d8 	.word	0x0801d0d8
 800ff94:	0801d048 	.word	0x0801d048
 800ff98:	2000b9b8 	.word	0x2000b9b8
 800ff9c:	0801d06c 	.word	0x0801d06c
 800ffa0:	0801d090 	.word	0x0801d090

0800ffa4 <racs_services__srv__Control_Request__Sequence__init.part.0>:
 800ffa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ffa8:	b086      	sub	sp, #24
 800ffaa:	460f      	mov	r7, r1
 800ffac:	4680      	mov	r8, r0
 800ffae:	a801      	add	r0, sp, #4
 800ffb0:	f7fd febc 	bl	800dd2c <rcutils_get_default_allocator>
 800ffb4:	b367      	cbz	r7, 8010010 <racs_services__srv__Control_Request__Sequence__init.part.0+0x6c>
 800ffb6:	2110      	movs	r1, #16
 800ffb8:	4638      	mov	r0, r7
 800ffba:	e9dd 3a04 	ldrd	r3, sl, [sp, #16]
 800ffbe:	4652      	mov	r2, sl
 800ffc0:	4798      	blx	r3
 800ffc2:	4681      	mov	r9, r0
 800ffc4:	b370      	cbz	r0, 8010024 <racs_services__srv__Control_Request__Sequence__init.part.0+0x80>
 800ffc6:	1d06      	adds	r6, r0, #4
 800ffc8:	2500      	movs	r5, #0
 800ffca:	e003      	b.n	800ffd4 <racs_services__srv__Control_Request__Sequence__init.part.0+0x30>
 800ffcc:	3501      	adds	r5, #1
 800ffce:	3610      	adds	r6, #16
 800ffd0:	42af      	cmp	r7, r5
 800ffd2:	d01e      	beq.n	8010012 <racs_services__srv__Control_Request__Sequence__init.part.0+0x6e>
 800ffd4:	4630      	mov	r0, r6
 800ffd6:	2100      	movs	r1, #0
 800ffd8:	f7fd ff66 	bl	800dea8 <rosidl_runtime_c__uint8__Sequence__init>
 800ffdc:	4604      	mov	r4, r0
 800ffde:	2800      	cmp	r0, #0
 800ffe0:	d1f4      	bne.n	800ffcc <racs_services__srv__Control_Request__Sequence__init.part.0+0x28>
 800ffe2:	4630      	mov	r0, r6
 800ffe4:	f7fd ff78 	bl	800ded8 <rosidl_runtime_c__uint8__Sequence__fini>
 800ffe8:	42af      	cmp	r7, r5
 800ffea:	d912      	bls.n	8010012 <racs_services__srv__Control_Request__Sequence__init.part.0+0x6e>
 800ffec:	b145      	cbz	r5, 8010000 <racs_services__srv__Control_Request__Sequence__init.part.0+0x5c>
 800ffee:	eb09 1605 	add.w	r6, r9, r5, lsl #4
 800fff2:	3e0c      	subs	r6, #12
 800fff4:	4630      	mov	r0, r6
 800fff6:	3e10      	subs	r6, #16
 800fff8:	f7fd ff6e 	bl	800ded8 <rosidl_runtime_c__uint8__Sequence__fini>
 800fffc:	3d01      	subs	r5, #1
 800fffe:	d1f9      	bne.n	800fff4 <racs_services__srv__Control_Request__Sequence__init.part.0+0x50>
 8010000:	4648      	mov	r0, r9
 8010002:	9b02      	ldr	r3, [sp, #8]
 8010004:	4651      	mov	r1, sl
 8010006:	4798      	blx	r3
 8010008:	4620      	mov	r0, r4
 801000a:	b006      	add	sp, #24
 801000c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010010:	46b9      	mov	r9, r7
 8010012:	2401      	movs	r4, #1
 8010014:	f8c8 7008 	str.w	r7, [r8, #8]
 8010018:	e9c8 9700 	strd	r9, r7, [r8]
 801001c:	4620      	mov	r0, r4
 801001e:	b006      	add	sp, #24
 8010020:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010024:	4604      	mov	r4, r0
 8010026:	e7f9      	b.n	801001c <racs_services__srv__Control_Request__Sequence__init.part.0+0x78>

08010028 <racs_services__srv__Control_Response__Sequence__init.part.0>:
 8010028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801002c:	b086      	sub	sp, #24
 801002e:	460f      	mov	r7, r1
 8010030:	4680      	mov	r8, r0
 8010032:	a801      	add	r0, sp, #4
 8010034:	f7fd fe7a 	bl	800dd2c <rcutils_get_default_allocator>
 8010038:	b367      	cbz	r7, 8010094 <racs_services__srv__Control_Response__Sequence__init.part.0+0x6c>
 801003a:	2110      	movs	r1, #16
 801003c:	4638      	mov	r0, r7
 801003e:	e9dd 3a04 	ldrd	r3, sl, [sp, #16]
 8010042:	4652      	mov	r2, sl
 8010044:	4798      	blx	r3
 8010046:	4681      	mov	r9, r0
 8010048:	b370      	cbz	r0, 80100a8 <racs_services__srv__Control_Response__Sequence__init.part.0+0x80>
 801004a:	1d06      	adds	r6, r0, #4
 801004c:	2500      	movs	r5, #0
 801004e:	e003      	b.n	8010058 <racs_services__srv__Control_Response__Sequence__init.part.0+0x30>
 8010050:	3501      	adds	r5, #1
 8010052:	3610      	adds	r6, #16
 8010054:	42af      	cmp	r7, r5
 8010056:	d01e      	beq.n	8010096 <racs_services__srv__Control_Response__Sequence__init.part.0+0x6e>
 8010058:	4630      	mov	r0, r6
 801005a:	2100      	movs	r1, #0
 801005c:	f7fd ff24 	bl	800dea8 <rosidl_runtime_c__uint8__Sequence__init>
 8010060:	4604      	mov	r4, r0
 8010062:	2800      	cmp	r0, #0
 8010064:	d1f4      	bne.n	8010050 <racs_services__srv__Control_Response__Sequence__init.part.0+0x28>
 8010066:	4630      	mov	r0, r6
 8010068:	f7fd ff36 	bl	800ded8 <rosidl_runtime_c__uint8__Sequence__fini>
 801006c:	42af      	cmp	r7, r5
 801006e:	d912      	bls.n	8010096 <racs_services__srv__Control_Response__Sequence__init.part.0+0x6e>
 8010070:	b145      	cbz	r5, 8010084 <racs_services__srv__Control_Response__Sequence__init.part.0+0x5c>
 8010072:	eb09 1605 	add.w	r6, r9, r5, lsl #4
 8010076:	3e0c      	subs	r6, #12
 8010078:	4630      	mov	r0, r6
 801007a:	3e10      	subs	r6, #16
 801007c:	f7fd ff2c 	bl	800ded8 <rosidl_runtime_c__uint8__Sequence__fini>
 8010080:	3d01      	subs	r5, #1
 8010082:	d1f9      	bne.n	8010078 <racs_services__srv__Control_Response__Sequence__init.part.0+0x50>
 8010084:	4648      	mov	r0, r9
 8010086:	9b02      	ldr	r3, [sp, #8]
 8010088:	4651      	mov	r1, sl
 801008a:	4798      	blx	r3
 801008c:	4620      	mov	r0, r4
 801008e:	b006      	add	sp, #24
 8010090:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010094:	46b9      	mov	r9, r7
 8010096:	2401      	movs	r4, #1
 8010098:	f8c8 7008 	str.w	r7, [r8, #8]
 801009c:	e9c8 9700 	strd	r9, r7, [r8]
 80100a0:	4620      	mov	r0, r4
 80100a2:	b006      	add	sp, #24
 80100a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80100a8:	4604      	mov	r4, r0
 80100aa:	e7f9      	b.n	80100a0 <racs_services__srv__Control_Response__Sequence__init.part.0+0x78>

080100ac <racs_services__srv__Control_Request__init>:
 80100ac:	b538      	push	{r3, r4, r5, lr}
 80100ae:	b140      	cbz	r0, 80100c2 <racs_services__srv__Control_Request__init+0x16>
 80100b0:	1d05      	adds	r5, r0, #4
 80100b2:	2100      	movs	r1, #0
 80100b4:	4628      	mov	r0, r5
 80100b6:	f7fd fef7 	bl	800dea8 <rosidl_runtime_c__uint8__Sequence__init>
 80100ba:	4604      	mov	r4, r0
 80100bc:	b120      	cbz	r0, 80100c8 <racs_services__srv__Control_Request__init+0x1c>
 80100be:	4620      	mov	r0, r4
 80100c0:	bd38      	pop	{r3, r4, r5, pc}
 80100c2:	4604      	mov	r4, r0
 80100c4:	4620      	mov	r0, r4
 80100c6:	bd38      	pop	{r3, r4, r5, pc}
 80100c8:	4628      	mov	r0, r5
 80100ca:	f7fd ff05 	bl	800ded8 <rosidl_runtime_c__uint8__Sequence__fini>
 80100ce:	4620      	mov	r0, r4
 80100d0:	bd38      	pop	{r3, r4, r5, pc}
 80100d2:	bf00      	nop

080100d4 <racs_services__srv__Control_Request__fini>:
 80100d4:	b110      	cbz	r0, 80100dc <racs_services__srv__Control_Request__fini+0x8>
 80100d6:	3004      	adds	r0, #4
 80100d8:	f7fd befe 	b.w	800ded8 <rosidl_runtime_c__uint8__Sequence__fini>
 80100dc:	4770      	bx	lr
 80100de:	bf00      	nop

080100e0 <racs_services__srv__Control_Request__copy>:
 80100e0:	4603      	mov	r3, r0
 80100e2:	460a      	mov	r2, r1
 80100e4:	b150      	cbz	r0, 80100fc <racs_services__srv__Control_Request__copy+0x1c>
 80100e6:	b149      	cbz	r1, 80100fc <racs_services__srv__Control_Request__copy+0x1c>
 80100e8:	f8b0 c000 	ldrh.w	ip, [r0]
 80100ec:	3104      	adds	r1, #4
 80100ee:	3004      	adds	r0, #4
 80100f0:	f8a2 c000 	strh.w	ip, [r2]
 80100f4:	789b      	ldrb	r3, [r3, #2]
 80100f6:	7093      	strb	r3, [r2, #2]
 80100f8:	f7fd bf02 	b.w	800df00 <rosidl_runtime_c__uint8__Sequence__copy>
 80100fc:	2000      	movs	r0, #0
 80100fe:	4770      	bx	lr

08010100 <racs_services__srv__Control_Request__Sequence__init>:
 8010100:	b108      	cbz	r0, 8010106 <racs_services__srv__Control_Request__Sequence__init+0x6>
 8010102:	f7ff bf4f 	b.w	800ffa4 <racs_services__srv__Control_Request__Sequence__init.part.0>
 8010106:	4770      	bx	lr

08010108 <racs_services__srv__Control_Request__Sequence__fini>:
 8010108:	b320      	cbz	r0, 8010154 <racs_services__srv__Control_Request__Sequence__fini+0x4c>
 801010a:	b530      	push	{r4, r5, lr}
 801010c:	b087      	sub	sp, #28
 801010e:	4605      	mov	r5, r0
 8010110:	a801      	add	r0, sp, #4
 8010112:	f7fd fe0b 	bl	800dd2c <rcutils_get_default_allocator>
 8010116:	682b      	ldr	r3, [r5, #0]
 8010118:	b1b3      	cbz	r3, 8010148 <racs_services__srv__Control_Request__Sequence__fini+0x40>
 801011a:	68aa      	ldr	r2, [r5, #8]
 801011c:	b162      	cbz	r2, 8010138 <racs_services__srv__Control_Request__Sequence__fini+0x30>
 801011e:	2400      	movs	r4, #0
 8010120:	eb13 1004 	adds.w	r0, r3, r4, lsl #4
 8010124:	f100 0004 	add.w	r0, r0, #4
 8010128:	d010      	beq.n	801014c <racs_services__srv__Control_Request__Sequence__fini+0x44>
 801012a:	f7fd fed5 	bl	800ded8 <rosidl_runtime_c__uint8__Sequence__fini>
 801012e:	3401      	adds	r4, #1
 8010130:	68aa      	ldr	r2, [r5, #8]
 8010132:	682b      	ldr	r3, [r5, #0]
 8010134:	4294      	cmp	r4, r2
 8010136:	d3f3      	bcc.n	8010120 <racs_services__srv__Control_Request__Sequence__fini+0x18>
 8010138:	4618      	mov	r0, r3
 801013a:	9a02      	ldr	r2, [sp, #8]
 801013c:	9905      	ldr	r1, [sp, #20]
 801013e:	4790      	blx	r2
 8010140:	2300      	movs	r3, #0
 8010142:	e9c5 3300 	strd	r3, r3, [r5]
 8010146:	60ab      	str	r3, [r5, #8]
 8010148:	b007      	add	sp, #28
 801014a:	bd30      	pop	{r4, r5, pc}
 801014c:	3401      	adds	r4, #1
 801014e:	4294      	cmp	r4, r2
 8010150:	d3e6      	bcc.n	8010120 <racs_services__srv__Control_Request__Sequence__fini+0x18>
 8010152:	e7f1      	b.n	8010138 <racs_services__srv__Control_Request__Sequence__fini+0x30>
 8010154:	4770      	bx	lr
 8010156:	bf00      	nop

08010158 <racs_services__srv__Control_Response__init>:
 8010158:	b538      	push	{r3, r4, r5, lr}
 801015a:	b140      	cbz	r0, 801016e <racs_services__srv__Control_Response__init+0x16>
 801015c:	1d05      	adds	r5, r0, #4
 801015e:	2100      	movs	r1, #0
 8010160:	4628      	mov	r0, r5
 8010162:	f7fd fea1 	bl	800dea8 <rosidl_runtime_c__uint8__Sequence__init>
 8010166:	4604      	mov	r4, r0
 8010168:	b120      	cbz	r0, 8010174 <racs_services__srv__Control_Response__init+0x1c>
 801016a:	4620      	mov	r0, r4
 801016c:	bd38      	pop	{r3, r4, r5, pc}
 801016e:	4604      	mov	r4, r0
 8010170:	4620      	mov	r0, r4
 8010172:	bd38      	pop	{r3, r4, r5, pc}
 8010174:	4628      	mov	r0, r5
 8010176:	f7fd feaf 	bl	800ded8 <rosidl_runtime_c__uint8__Sequence__fini>
 801017a:	4620      	mov	r0, r4
 801017c:	bd38      	pop	{r3, r4, r5, pc}
 801017e:	bf00      	nop

08010180 <racs_services__srv__Control_Response__fini>:
 8010180:	b110      	cbz	r0, 8010188 <racs_services__srv__Control_Response__fini+0x8>
 8010182:	3004      	adds	r0, #4
 8010184:	f7fd bea8 	b.w	800ded8 <rosidl_runtime_c__uint8__Sequence__fini>
 8010188:	4770      	bx	lr
 801018a:	bf00      	nop

0801018c <racs_services__srv__Control_Response__copy>:
 801018c:	b130      	cbz	r0, 801019c <racs_services__srv__Control_Response__copy+0x10>
 801018e:	b129      	cbz	r1, 801019c <racs_services__srv__Control_Response__copy+0x10>
 8010190:	f850 3b04 	ldr.w	r3, [r0], #4
 8010194:	f841 3b04 	str.w	r3, [r1], #4
 8010198:	f7fd beb2 	b.w	800df00 <rosidl_runtime_c__uint8__Sequence__copy>
 801019c:	2000      	movs	r0, #0
 801019e:	4770      	bx	lr

080101a0 <racs_services__srv__Control_Response__Sequence__init>:
 80101a0:	b108      	cbz	r0, 80101a6 <racs_services__srv__Control_Response__Sequence__init+0x6>
 80101a2:	f7ff bf41 	b.w	8010028 <racs_services__srv__Control_Response__Sequence__init.part.0>
 80101a6:	4770      	bx	lr

080101a8 <racs_services__srv__Control_Response__Sequence__fini>:
 80101a8:	b320      	cbz	r0, 80101f4 <racs_services__srv__Control_Response__Sequence__fini+0x4c>
 80101aa:	b530      	push	{r4, r5, lr}
 80101ac:	b087      	sub	sp, #28
 80101ae:	4605      	mov	r5, r0
 80101b0:	a801      	add	r0, sp, #4
 80101b2:	f7fd fdbb 	bl	800dd2c <rcutils_get_default_allocator>
 80101b6:	682b      	ldr	r3, [r5, #0]
 80101b8:	b1b3      	cbz	r3, 80101e8 <racs_services__srv__Control_Response__Sequence__fini+0x40>
 80101ba:	68aa      	ldr	r2, [r5, #8]
 80101bc:	b162      	cbz	r2, 80101d8 <racs_services__srv__Control_Response__Sequence__fini+0x30>
 80101be:	2400      	movs	r4, #0
 80101c0:	eb13 1004 	adds.w	r0, r3, r4, lsl #4
 80101c4:	f100 0004 	add.w	r0, r0, #4
 80101c8:	d010      	beq.n	80101ec <racs_services__srv__Control_Response__Sequence__fini+0x44>
 80101ca:	f7fd fe85 	bl	800ded8 <rosidl_runtime_c__uint8__Sequence__fini>
 80101ce:	3401      	adds	r4, #1
 80101d0:	68aa      	ldr	r2, [r5, #8]
 80101d2:	682b      	ldr	r3, [r5, #0]
 80101d4:	4294      	cmp	r4, r2
 80101d6:	d3f3      	bcc.n	80101c0 <racs_services__srv__Control_Response__Sequence__fini+0x18>
 80101d8:	4618      	mov	r0, r3
 80101da:	9a02      	ldr	r2, [sp, #8]
 80101dc:	9905      	ldr	r1, [sp, #20]
 80101de:	4790      	blx	r2
 80101e0:	2300      	movs	r3, #0
 80101e2:	e9c5 3300 	strd	r3, r3, [r5]
 80101e6:	60ab      	str	r3, [r5, #8]
 80101e8:	b007      	add	sp, #28
 80101ea:	bd30      	pop	{r4, r5, pc}
 80101ec:	3401      	adds	r4, #1
 80101ee:	4294      	cmp	r4, r2
 80101f0:	d3e6      	bcc.n	80101c0 <racs_services__srv__Control_Response__Sequence__fini+0x18>
 80101f2:	e7f1      	b.n	80101d8 <racs_services__srv__Control_Response__Sequence__fini+0x30>
 80101f4:	4770      	bx	lr
 80101f6:	bf00      	nop

080101f8 <racs_services__srv__Control_Event__init>:
 80101f8:	b570      	push	{r4, r5, r6, lr}
 80101fa:	4604      	mov	r4, r0
 80101fc:	b086      	sub	sp, #24
 80101fe:	2800      	cmp	r0, #0
 8010200:	d052      	beq.n	80102a8 <racs_services__srv__Control_Event__init+0xb0>
 8010202:	f005 fd11 	bl	8015c28 <service_msgs__msg__ServiceEventInfo__init>
 8010206:	4606      	mov	r6, r0
 8010208:	b178      	cbz	r0, 801022a <racs_services__srv__Control_Event__init+0x32>
 801020a:	2500      	movs	r5, #0
 801020c:	a801      	add	r0, sp, #4
 801020e:	f7fd fd8d 	bl	800dd2c <rcutils_get_default_allocator>
 8010212:	a801      	add	r0, sp, #4
 8010214:	6325      	str	r5, [r4, #48]	; 0x30
 8010216:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
 801021a:	f7fd fd87 	bl	800dd2c <rcutils_get_default_allocator>
 801021e:	63e5      	str	r5, [r4, #60]	; 0x3c
 8010220:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010224:	4630      	mov	r0, r6
 8010226:	b006      	add	sp, #24
 8010228:	bd70      	pop	{r4, r5, r6, pc}
 801022a:	4620      	mov	r0, r4
 801022c:	f005 fd0e 	bl	8015c4c <service_msgs__msg__ServiceEventInfo__fini>
 8010230:	a801      	add	r0, sp, #4
 8010232:	f7fd fd7b 	bl	800dd2c <rcutils_get_default_allocator>
 8010236:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8010238:	b1b3      	cbz	r3, 8010268 <racs_services__srv__Control_Event__init+0x70>
 801023a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801023c:	b162      	cbz	r2, 8010258 <racs_services__srv__Control_Event__init+0x60>
 801023e:	4635      	mov	r5, r6
 8010240:	eb13 1005 	adds.w	r0, r3, r5, lsl #4
 8010244:	f100 0004 	add.w	r0, r0, #4
 8010248:	d032      	beq.n	80102b0 <racs_services__srv__Control_Event__init+0xb8>
 801024a:	f7fd fe45 	bl	800ded8 <rosidl_runtime_c__uint8__Sequence__fini>
 801024e:	3501      	adds	r5, #1
 8010250:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010252:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8010254:	4295      	cmp	r5, r2
 8010256:	d3f3      	bcc.n	8010240 <racs_services__srv__Control_Event__init+0x48>
 8010258:	4618      	mov	r0, r3
 801025a:	9a02      	ldr	r2, [sp, #8]
 801025c:	9905      	ldr	r1, [sp, #20]
 801025e:	4790      	blx	r2
 8010260:	2300      	movs	r3, #0
 8010262:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 8010266:	6323      	str	r3, [r4, #48]	; 0x30
 8010268:	a801      	add	r0, sp, #4
 801026a:	f7fd fd5f 	bl	800dd2c <rcutils_get_default_allocator>
 801026e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010270:	2b00      	cmp	r3, #0
 8010272:	d0d7      	beq.n	8010224 <racs_services__srv__Control_Event__init+0x2c>
 8010274:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8010276:	b162      	cbz	r2, 8010292 <racs_services__srv__Control_Event__init+0x9a>
 8010278:	2500      	movs	r5, #0
 801027a:	eb13 1005 	adds.w	r0, r3, r5, lsl #4
 801027e:	f100 0004 	add.w	r0, r0, #4
 8010282:	d019      	beq.n	80102b8 <racs_services__srv__Control_Event__init+0xc0>
 8010284:	f7fd fe28 	bl	800ded8 <rosidl_runtime_c__uint8__Sequence__fini>
 8010288:	3501      	adds	r5, #1
 801028a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 801028c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801028e:	4295      	cmp	r5, r2
 8010290:	d3f3      	bcc.n	801027a <racs_services__srv__Control_Event__init+0x82>
 8010292:	4618      	mov	r0, r3
 8010294:	9a02      	ldr	r2, [sp, #8]
 8010296:	9905      	ldr	r1, [sp, #20]
 8010298:	4790      	blx	r2
 801029a:	2300      	movs	r3, #0
 801029c:	4630      	mov	r0, r6
 801029e:	63e3      	str	r3, [r4, #60]	; 0x3c
 80102a0:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 80102a4:	b006      	add	sp, #24
 80102a6:	bd70      	pop	{r4, r5, r6, pc}
 80102a8:	4606      	mov	r6, r0
 80102aa:	4630      	mov	r0, r6
 80102ac:	b006      	add	sp, #24
 80102ae:	bd70      	pop	{r4, r5, r6, pc}
 80102b0:	3501      	adds	r5, #1
 80102b2:	4295      	cmp	r5, r2
 80102b4:	d3c4      	bcc.n	8010240 <racs_services__srv__Control_Event__init+0x48>
 80102b6:	e7cf      	b.n	8010258 <racs_services__srv__Control_Event__init+0x60>
 80102b8:	3501      	adds	r5, #1
 80102ba:	4295      	cmp	r5, r2
 80102bc:	d3dd      	bcc.n	801027a <racs_services__srv__Control_Event__init+0x82>
 80102be:	e7e8      	b.n	8010292 <racs_services__srv__Control_Event__init+0x9a>

080102c0 <racs_services__srv__Control_Event__fini>:
 80102c0:	2800      	cmp	r0, #0
 80102c2:	d046      	beq.n	8010352 <racs_services__srv__Control_Event__fini+0x92>
 80102c4:	b530      	push	{r4, r5, lr}
 80102c6:	b087      	sub	sp, #28
 80102c8:	4604      	mov	r4, r0
 80102ca:	f005 fcbf 	bl	8015c4c <service_msgs__msg__ServiceEventInfo__fini>
 80102ce:	a801      	add	r0, sp, #4
 80102d0:	f7fd fd2c 	bl	800dd2c <rcutils_get_default_allocator>
 80102d4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80102d6:	b1b3      	cbz	r3, 8010306 <racs_services__srv__Control_Event__fini+0x46>
 80102d8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80102da:	b162      	cbz	r2, 80102f6 <racs_services__srv__Control_Event__fini+0x36>
 80102dc:	2500      	movs	r5, #0
 80102de:	eb13 1005 	adds.w	r0, r3, r5, lsl #4
 80102e2:	f100 0004 	add.w	r0, r0, #4
 80102e6:	d030      	beq.n	801034a <racs_services__srv__Control_Event__fini+0x8a>
 80102e8:	f7fd fdf6 	bl	800ded8 <rosidl_runtime_c__uint8__Sequence__fini>
 80102ec:	3501      	adds	r5, #1
 80102ee:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80102f0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80102f2:	4295      	cmp	r5, r2
 80102f4:	d3f3      	bcc.n	80102de <racs_services__srv__Control_Event__fini+0x1e>
 80102f6:	4618      	mov	r0, r3
 80102f8:	9a02      	ldr	r2, [sp, #8]
 80102fa:	9905      	ldr	r1, [sp, #20]
 80102fc:	4790      	blx	r2
 80102fe:	2300      	movs	r3, #0
 8010300:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 8010304:	6323      	str	r3, [r4, #48]	; 0x30
 8010306:	a801      	add	r0, sp, #4
 8010308:	f7fd fd10 	bl	800dd2c <rcutils_get_default_allocator>
 801030c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801030e:	b1b3      	cbz	r3, 801033e <racs_services__srv__Control_Event__fini+0x7e>
 8010310:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8010312:	b162      	cbz	r2, 801032e <racs_services__srv__Control_Event__fini+0x6e>
 8010314:	2500      	movs	r5, #0
 8010316:	eb13 1005 	adds.w	r0, r3, r5, lsl #4
 801031a:	f100 0004 	add.w	r0, r0, #4
 801031e:	d010      	beq.n	8010342 <racs_services__srv__Control_Event__fini+0x82>
 8010320:	f7fd fdda 	bl	800ded8 <rosidl_runtime_c__uint8__Sequence__fini>
 8010324:	3501      	adds	r5, #1
 8010326:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8010328:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801032a:	4295      	cmp	r5, r2
 801032c:	d3f3      	bcc.n	8010316 <racs_services__srv__Control_Event__fini+0x56>
 801032e:	4618      	mov	r0, r3
 8010330:	9a02      	ldr	r2, [sp, #8]
 8010332:	9905      	ldr	r1, [sp, #20]
 8010334:	4790      	blx	r2
 8010336:	2300      	movs	r3, #0
 8010338:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 801033c:	63e3      	str	r3, [r4, #60]	; 0x3c
 801033e:	b007      	add	sp, #28
 8010340:	bd30      	pop	{r4, r5, pc}
 8010342:	3501      	adds	r5, #1
 8010344:	4295      	cmp	r5, r2
 8010346:	d3e6      	bcc.n	8010316 <racs_services__srv__Control_Event__fini+0x56>
 8010348:	e7f1      	b.n	801032e <racs_services__srv__Control_Event__fini+0x6e>
 801034a:	3501      	adds	r5, #1
 801034c:	4295      	cmp	r5, r2
 801034e:	d3c6      	bcc.n	80102de <racs_services__srv__Control_Event__fini+0x1e>
 8010350:	e7d1      	b.n	80102f6 <racs_services__srv__Control_Event__fini+0x36>
 8010352:	4770      	bx	lr

08010354 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control>:
 8010354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010358:	2900      	cmp	r1, #0
 801035a:	d04d      	beq.n	80103f8 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control+0xa4>
 801035c:	4605      	mov	r5, r0
 801035e:	2800      	cmp	r0, #0
 8010360:	d04a      	beq.n	80103f8 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control+0xa4>
 8010362:	460e      	mov	r6, r1
 8010364:	4698      	mov	r8, r3
 8010366:	2040      	movs	r0, #64	; 0x40
 8010368:	680b      	ldr	r3, [r1, #0]
 801036a:	6909      	ldr	r1, [r1, #16]
 801036c:	4617      	mov	r7, r2
 801036e:	4798      	blx	r3
 8010370:	4604      	mov	r4, r0
 8010372:	f7ff ff41 	bl	80101f8 <racs_services__srv__Control_Event__init>
 8010376:	4684      	mov	ip, r0
 8010378:	b370      	cbz	r0, 80103d8 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control+0x84>
 801037a:	782b      	ldrb	r3, [r5, #0]
 801037c:	7023      	strb	r3, [r4, #0]
 801037e:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
 8010382:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 8010386:	e9c4 2301 	strd	r2, r3, [r4, #4]
 801038a:	e9c4 0108 	strd	r0, r1, [r4, #32]
 801038e:	68e8      	ldr	r0, [r5, #12]
 8010390:	6929      	ldr	r1, [r5, #16]
 8010392:	696a      	ldr	r2, [r5, #20]
 8010394:	69ab      	ldr	r3, [r5, #24]
 8010396:	60e0      	str	r0, [r4, #12]
 8010398:	6121      	str	r1, [r4, #16]
 801039a:	6162      	str	r2, [r4, #20]
 801039c:	61a3      	str	r3, [r4, #24]
 801039e:	b157      	cbz	r7, 80103b6 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control+0x62>
 80103a0:	2101      	movs	r1, #1
 80103a2:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80103a6:	f7ff feab 	bl	8010100 <racs_services__srv__Control_Request__Sequence__init>
 80103aa:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80103ac:	4638      	mov	r0, r7
 80103ae:	f7ff fe97 	bl	80100e0 <racs_services__srv__Control_Request__copy>
 80103b2:	4603      	mov	r3, r0
 80103b4:	b1c0      	cbz	r0, 80103e8 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control+0x94>
 80103b6:	f1b8 0f00 	cmp.w	r8, #0
 80103ba:	d00a      	beq.n	80103d2 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control+0x7e>
 80103bc:	2101      	movs	r1, #1
 80103be:	f104 0034 	add.w	r0, r4, #52	; 0x34
 80103c2:	f7ff feed 	bl	80101a0 <racs_services__srv__Control_Response__Sequence__init>
 80103c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80103c8:	4640      	mov	r0, r8
 80103ca:	f7ff fedf 	bl	801018c <racs_services__srv__Control_Response__copy>
 80103ce:	4603      	mov	r3, r0
 80103d0:	b150      	cbz	r0, 80103e8 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control+0x94>
 80103d2:	4620      	mov	r0, r4
 80103d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103d8:	4620      	mov	r0, r4
 80103da:	4664      	mov	r4, ip
 80103dc:	6873      	ldr	r3, [r6, #4]
 80103de:	6931      	ldr	r1, [r6, #16]
 80103e0:	4798      	blx	r3
 80103e2:	4620      	mov	r0, r4
 80103e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103e8:	4620      	mov	r0, r4
 80103ea:	461c      	mov	r4, r3
 80103ec:	6872      	ldr	r2, [r6, #4]
 80103ee:	6931      	ldr	r1, [r6, #16]
 80103f0:	4790      	blx	r2
 80103f2:	4620      	mov	r0, r4
 80103f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103f8:	2400      	movs	r4, #0
 80103fa:	4620      	mov	r0, r4
 80103fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010400 <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Control>:
 8010400:	b1b9      	cbz	r1, 8010432 <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Control+0x32>
 8010402:	b538      	push	{r3, r4, r5, lr}
 8010404:	4605      	mov	r5, r0
 8010406:	b190      	cbz	r0, 801042e <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Control+0x2e>
 8010408:	460c      	mov	r4, r1
 801040a:	f7ff ff59 	bl	80102c0 <racs_services__srv__Control_Event__fini>
 801040e:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8010410:	b110      	cbz	r0, 8010418 <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Control+0x18>
 8010412:	6863      	ldr	r3, [r4, #4]
 8010414:	6921      	ldr	r1, [r4, #16]
 8010416:	4798      	blx	r3
 8010418:	6b68      	ldr	r0, [r5, #52]	; 0x34
 801041a:	b110      	cbz	r0, 8010422 <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Control+0x22>
 801041c:	6863      	ldr	r3, [r4, #4]
 801041e:	6921      	ldr	r1, [r4, #16]
 8010420:	4798      	blx	r3
 8010422:	4628      	mov	r0, r5
 8010424:	6863      	ldr	r3, [r4, #4]
 8010426:	6921      	ldr	r1, [r4, #16]
 8010428:	4798      	blx	r3
 801042a:	2001      	movs	r0, #1
 801042c:	bd38      	pop	{r3, r4, r5, pc}
 801042e:	2000      	movs	r0, #0
 8010430:	bd38      	pop	{r3, r4, r5, pc}
 8010432:	2000      	movs	r0, #0
 8010434:	4770      	bx	lr
 8010436:	bf00      	nop

08010438 <racs_services__srv__Setup_Event__get_type_description.part.0>:
 8010438:	b510      	push	{r4, lr}
 801043a:	2000      	movs	r0, #0
 801043c:	4c13      	ldr	r4, [pc, #76]	; (801048c <racs_services__srv__Setup_Event__get_type_description.part.0+0x54>)
 801043e:	f005 fc0f 	bl	8015c60 <builtin_interfaces__msg__Time__get_type_description>
 8010442:	300c      	adds	r0, #12
 8010444:	4b12      	ldr	r3, [pc, #72]	; (8010490 <racs_services__srv__Setup_Event__get_type_description.part.0+0x58>)
 8010446:	c807      	ldmia	r0, {r0, r1, r2}
 8010448:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801044c:	7823      	ldrb	r3, [r4, #0]
 801044e:	b90b      	cbnz	r3, 8010454 <racs_services__srv__Setup_Event__get_type_description.part.0+0x1c>
 8010450:	2301      	movs	r3, #1
 8010452:	7023      	strb	r3, [r4, #0]
 8010454:	4a0f      	ldr	r2, [pc, #60]	; (8010494 <racs_services__srv__Setup_Event__get_type_description.part.0+0x5c>)
 8010456:	4b10      	ldr	r3, [pc, #64]	; (8010498 <racs_services__srv__Setup_Event__get_type_description.part.0+0x60>)
 8010458:	4c10      	ldr	r4, [pc, #64]	; (801049c <racs_services__srv__Setup_Event__get_type_description.part.0+0x64>)
 801045a:	ca07      	ldmia	r2, {r0, r1, r2}
 801045c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8010460:	7823      	ldrb	r3, [r4, #0]
 8010462:	b90b      	cbnz	r3, 8010468 <racs_services__srv__Setup_Event__get_type_description.part.0+0x30>
 8010464:	2301      	movs	r3, #1
 8010466:	7023      	strb	r3, [r4, #0]
 8010468:	4b0d      	ldr	r3, [pc, #52]	; (80104a0 <racs_services__srv__Setup_Event__get_type_description.part.0+0x68>)
 801046a:	4c0e      	ldr	r4, [pc, #56]	; (80104a4 <racs_services__srv__Setup_Event__get_type_description.part.0+0x6c>)
 801046c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010470:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8010474:	2000      	movs	r0, #0
 8010476:	3418      	adds	r4, #24
 8010478:	f005 fb92 	bl	8015ba0 <service_msgs__msg__ServiceEventInfo__get_type_description>
 801047c:	300c      	adds	r0, #12
 801047e:	4b0a      	ldr	r3, [pc, #40]	; (80104a8 <racs_services__srv__Setup_Event__get_type_description.part.0+0x70>)
 8010480:	c807      	ldmia	r0, {r0, r1, r2}
 8010482:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8010486:	2201      	movs	r2, #1
 8010488:	701a      	strb	r2, [r3, #0]
 801048a:	bd10      	pop	{r4, pc}
 801048c:	2000bb90 	.word	0x2000bb90
 8010490:	20001500 	.word	0x20001500
 8010494:	0801d15c 	.word	0x0801d15c
 8010498:	20001518 	.word	0x20001518
 801049c:	2000bb8e 	.word	0x2000bb8e
 80104a0:	0801d138 	.word	0x0801d138
 80104a4:	20001530 	.word	0x20001530
 80104a8:	2000bb8d 	.word	0x2000bb8d

080104ac <racs_services__srv__Setup__get_type_hash>:
 80104ac:	4800      	ldr	r0, [pc, #0]	; (80104b0 <racs_services__srv__Setup__get_type_hash+0x4>)
 80104ae:	4770      	bx	lr
 80104b0:	200013cc 	.word	0x200013cc

080104b4 <racs_services__srv__Setup_Request__get_type_hash>:
 80104b4:	4800      	ldr	r0, [pc, #0]	; (80104b8 <racs_services__srv__Setup_Request__get_type_hash+0x4>)
 80104b6:	4770      	bx	lr
 80104b8:	200013a8 	.word	0x200013a8

080104bc <racs_services__srv__Setup_Response__get_type_hash>:
 80104bc:	4800      	ldr	r0, [pc, #0]	; (80104c0 <racs_services__srv__Setup_Response__get_type_hash+0x4>)
 80104be:	4770      	bx	lr
 80104c0:	20001384 	.word	0x20001384

080104c4 <racs_services__srv__Setup_Event__get_type_hash>:
 80104c4:	4800      	ldr	r0, [pc, #0]	; (80104c8 <racs_services__srv__Setup_Event__get_type_hash+0x4>)
 80104c6:	4770      	bx	lr
 80104c8:	20001360 	.word	0x20001360

080104cc <racs_services__srv__Setup__get_type_description>:
 80104cc:	b538      	push	{r3, r4, r5, lr}
 80104ce:	4d1c      	ldr	r5, [pc, #112]	; (8010540 <racs_services__srv__Setup__get_type_description+0x74>)
 80104d0:	7828      	ldrb	r0, [r5, #0]
 80104d2:	b108      	cbz	r0, 80104d8 <racs_services__srv__Setup__get_type_description+0xc>
 80104d4:	481b      	ldr	r0, [pc, #108]	; (8010544 <racs_services__srv__Setup__get_type_description+0x78>)
 80104d6:	bd38      	pop	{r3, r4, r5, pc}
 80104d8:	f005 fbc2 	bl	8015c60 <builtin_interfaces__msg__Time__get_type_description>
 80104dc:	300c      	adds	r0, #12
 80104de:	4b1a      	ldr	r3, [pc, #104]	; (8010548 <racs_services__srv__Setup__get_type_description+0x7c>)
 80104e0:	c807      	ldmia	r0, {r0, r1, r2}
 80104e2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80104e6:	4b19      	ldr	r3, [pc, #100]	; (801054c <racs_services__srv__Setup__get_type_description+0x80>)
 80104e8:	781b      	ldrb	r3, [r3, #0]
 80104ea:	b32b      	cbz	r3, 8010538 <racs_services__srv__Setup__get_type_description+0x6c>
 80104ec:	4a18      	ldr	r2, [pc, #96]	; (8010550 <racs_services__srv__Setup__get_type_description+0x84>)
 80104ee:	4b19      	ldr	r3, [pc, #100]	; (8010554 <racs_services__srv__Setup__get_type_description+0x88>)
 80104f0:	4c19      	ldr	r4, [pc, #100]	; (8010558 <racs_services__srv__Setup__get_type_description+0x8c>)
 80104f2:	ca07      	ldmia	r2, {r0, r1, r2}
 80104f4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80104f8:	7823      	ldrb	r3, [r4, #0]
 80104fa:	b90b      	cbnz	r3, 8010500 <racs_services__srv__Setup__get_type_description+0x34>
 80104fc:	2301      	movs	r3, #1
 80104fe:	7023      	strb	r3, [r4, #0]
 8010500:	4a16      	ldr	r2, [pc, #88]	; (801055c <racs_services__srv__Setup__get_type_description+0x90>)
 8010502:	4b17      	ldr	r3, [pc, #92]	; (8010560 <racs_services__srv__Setup__get_type_description+0x94>)
 8010504:	4c17      	ldr	r4, [pc, #92]	; (8010564 <racs_services__srv__Setup__get_type_description+0x98>)
 8010506:	ca07      	ldmia	r2, {r0, r1, r2}
 8010508:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801050c:	7823      	ldrb	r3, [r4, #0]
 801050e:	b90b      	cbnz	r3, 8010514 <racs_services__srv__Setup__get_type_description+0x48>
 8010510:	2301      	movs	r3, #1
 8010512:	7023      	strb	r3, [r4, #0]
 8010514:	4b14      	ldr	r3, [pc, #80]	; (8010568 <racs_services__srv__Setup__get_type_description+0x9c>)
 8010516:	4c15      	ldr	r4, [pc, #84]	; (801056c <racs_services__srv__Setup__get_type_description+0xa0>)
 8010518:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801051c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8010520:	2000      	movs	r0, #0
 8010522:	3418      	adds	r4, #24
 8010524:	f005 fb3c 	bl	8015ba0 <service_msgs__msg__ServiceEventInfo__get_type_description>
 8010528:	300c      	adds	r0, #12
 801052a:	2301      	movs	r3, #1
 801052c:	c807      	ldmia	r0, {r0, r1, r2}
 801052e:	702b      	strb	r3, [r5, #0]
 8010530:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8010534:	4803      	ldr	r0, [pc, #12]	; (8010544 <racs_services__srv__Setup__get_type_description+0x78>)
 8010536:	bd38      	pop	{r3, r4, r5, pc}
 8010538:	f7ff ff7e 	bl	8010438 <racs_services__srv__Setup_Event__get_type_description.part.0>
 801053c:	e7d6      	b.n	80104ec <racs_services__srv__Setup__get_type_description+0x20>
 801053e:	bf00      	nop
 8010540:	2000bb91 	.word	0x2000bb91
 8010544:	0801d174 	.word	0x0801d174
 8010548:	20001958 	.word	0x20001958
 801054c:	2000bb8d 	.word	0x2000bb8d
 8010550:	0801d114 	.word	0x0801d114
 8010554:	20001970 	.word	0x20001970
 8010558:	2000bb90 	.word	0x2000bb90
 801055c:	0801d15c 	.word	0x0801d15c
 8010560:	20001988 	.word	0x20001988
 8010564:	2000bb8e 	.word	0x2000bb8e
 8010568:	0801d138 	.word	0x0801d138
 801056c:	200019a0 	.word	0x200019a0

08010570 <racs_services__srv__Setup_Request__get_type_description>:
 8010570:	4b03      	ldr	r3, [pc, #12]	; (8010580 <racs_services__srv__Setup_Request__get_type_description+0x10>)
 8010572:	781a      	ldrb	r2, [r3, #0]
 8010574:	b90a      	cbnz	r2, 801057a <racs_services__srv__Setup_Request__get_type_description+0xa>
 8010576:	2201      	movs	r2, #1
 8010578:	701a      	strb	r2, [r3, #0]
 801057a:	4802      	ldr	r0, [pc, #8]	; (8010584 <racs_services__srv__Setup_Request__get_type_description+0x14>)
 801057c:	4770      	bx	lr
 801057e:	bf00      	nop
 8010580:	2000bb90 	.word	0x2000bb90
 8010584:	0801d150 	.word	0x0801d150

08010588 <racs_services__srv__Setup_Response__get_type_description>:
 8010588:	4b03      	ldr	r3, [pc, #12]	; (8010598 <racs_services__srv__Setup_Response__get_type_description+0x10>)
 801058a:	781a      	ldrb	r2, [r3, #0]
 801058c:	b90a      	cbnz	r2, 8010592 <racs_services__srv__Setup_Response__get_type_description+0xa>
 801058e:	2201      	movs	r2, #1
 8010590:	701a      	strb	r2, [r3, #0]
 8010592:	4802      	ldr	r0, [pc, #8]	; (801059c <racs_services__srv__Setup_Response__get_type_description+0x14>)
 8010594:	4770      	bx	lr
 8010596:	bf00      	nop
 8010598:	2000bb8e 	.word	0x2000bb8e
 801059c:	0801d12c 	.word	0x0801d12c

080105a0 <racs_services__srv__Setup_Event__get_type_description>:
 80105a0:	b508      	push	{r3, lr}
 80105a2:	4b04      	ldr	r3, [pc, #16]	; (80105b4 <racs_services__srv__Setup_Event__get_type_description+0x14>)
 80105a4:	781b      	ldrb	r3, [r3, #0]
 80105a6:	b10b      	cbz	r3, 80105ac <racs_services__srv__Setup_Event__get_type_description+0xc>
 80105a8:	4803      	ldr	r0, [pc, #12]	; (80105b8 <racs_services__srv__Setup_Event__get_type_description+0x18>)
 80105aa:	bd08      	pop	{r3, pc}
 80105ac:	f7ff ff44 	bl	8010438 <racs_services__srv__Setup_Event__get_type_description.part.0>
 80105b0:	4801      	ldr	r0, [pc, #4]	; (80105b8 <racs_services__srv__Setup_Event__get_type_description+0x18>)
 80105b2:	bd08      	pop	{r3, pc}
 80105b4:	2000bb8d 	.word	0x2000bb8d
 80105b8:	0801d108 	.word	0x0801d108

080105bc <racs_services__srv__Setup__get_type_description_sources>:
 80105bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105c0:	4b2c      	ldr	r3, [pc, #176]	; (8010674 <racs_services__srv__Setup__get_type_description_sources+0xb8>)
 80105c2:	f893 9000 	ldrb.w	r9, [r3]
 80105c6:	f1b9 0f00 	cmp.w	r9, #0
 80105ca:	d002      	beq.n	80105d2 <racs_services__srv__Setup__get_type_description_sources+0x16>
 80105cc:	482a      	ldr	r0, [pc, #168]	; (8010678 <racs_services__srv__Setup__get_type_description_sources+0xbc>)
 80105ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105d2:	4d2a      	ldr	r5, [pc, #168]	; (801067c <racs_services__srv__Setup__get_type_description_sources+0xc0>)
 80105d4:	4c2a      	ldr	r4, [pc, #168]	; (8010680 <racs_services__srv__Setup__get_type_description_sources+0xc4>)
 80105d6:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 8010688 <racs_services__srv__Setup__get_type_description_sources+0xcc>
 80105da:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 801068c <racs_services__srv__Setup__get_type_description_sources+0xd0>
 80105de:	4e29      	ldr	r6, [pc, #164]	; (8010684 <racs_services__srv__Setup__get_type_description_sources+0xc8>)
 80105e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80105e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80105e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80105e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80105e8:	682b      	ldr	r3, [r5, #0]
 80105ea:	4625      	mov	r5, r4
 80105ec:	4648      	mov	r0, r9
 80105ee:	f104 0a28 	add.w	sl, r4, #40	; 0x28
 80105f2:	f845 3b04 	str.w	r3, [r5], #4
 80105f6:	f104 074c 	add.w	r7, r4, #76	; 0x4c
 80105fa:	f005 fb3d 	bl	8015c78 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 80105fe:	4684      	mov	ip, r0
 8010600:	f104 0e70 	add.w	lr, r4, #112	; 0x70
 8010604:	3494      	adds	r4, #148	; 0x94
 8010606:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801060a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801060c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010610:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010612:	f8dc 3000 	ldr.w	r3, [ip]
 8010616:	602b      	str	r3, [r5, #0]
 8010618:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 801061c:	e8aa 000f 	stmia.w	sl!, {r0, r1, r2, r3}
 8010620:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 8010624:	e8aa 000f 	stmia.w	sl!, {r0, r1, r2, r3}
 8010628:	f8db 3000 	ldr.w	r3, [fp]
 801062c:	f8ca 3000 	str.w	r3, [sl]
 8010630:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 8010634:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8010636:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 801063a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801063c:	f8d8 3000 	ldr.w	r3, [r8]
 8010640:	603b      	str	r3, [r7, #0]
 8010642:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8010644:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010648:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801064a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801064e:	6833      	ldr	r3, [r6, #0]
 8010650:	4648      	mov	r0, r9
 8010652:	f8ce 3000 	str.w	r3, [lr]
 8010656:	f005 fabb 	bl	8015bd0 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source>
 801065a:	2301      	movs	r3, #1
 801065c:	4a05      	ldr	r2, [pc, #20]	; (8010674 <racs_services__srv__Setup__get_type_description_sources+0xb8>)
 801065e:	4605      	mov	r5, r0
 8010660:	7013      	strb	r3, [r2, #0]
 8010662:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010664:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010666:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010668:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801066a:	682b      	ldr	r3, [r5, #0]
 801066c:	4802      	ldr	r0, [pc, #8]	; (8010678 <racs_services__srv__Setup__get_type_description_sources+0xbc>)
 801066e:	6023      	str	r3, [r4, #0]
 8010670:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010674:	2000bb8c 	.word	0x2000bb8c
 8010678:	0801d24c 	.word	0x0801d24c
 801067c:	0801d204 	.word	0x0801d204
 8010680:	2000bc48 	.word	0x2000bc48
 8010684:	0801d1bc 	.word	0x0801d1bc
 8010688:	0801d198 	.word	0x0801d198
 801068c:	0801d1e0 	.word	0x0801d1e0

08010690 <racs_services__srv__Setup_Request__get_type_description_sources>:
 8010690:	4b09      	ldr	r3, [pc, #36]	; (80106b8 <racs_services__srv__Setup_Request__get_type_description_sources+0x28>)
 8010692:	781a      	ldrb	r2, [r3, #0]
 8010694:	b96a      	cbnz	r2, 80106b2 <racs_services__srv__Setup_Request__get_type_description_sources+0x22>
 8010696:	2201      	movs	r2, #1
 8010698:	b430      	push	{r4, r5}
 801069a:	4d08      	ldr	r5, [pc, #32]	; (80106bc <racs_services__srv__Setup_Request__get_type_description_sources+0x2c>)
 801069c:	4c08      	ldr	r4, [pc, #32]	; (80106c0 <racs_services__srv__Setup_Request__get_type_description_sources+0x30>)
 801069e:	701a      	strb	r2, [r3, #0]
 80106a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80106a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80106a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80106a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80106a8:	682b      	ldr	r3, [r5, #0]
 80106aa:	4806      	ldr	r0, [pc, #24]	; (80106c4 <racs_services__srv__Setup_Request__get_type_description_sources+0x34>)
 80106ac:	6023      	str	r3, [r4, #0]
 80106ae:	bc30      	pop	{r4, r5}
 80106b0:	4770      	bx	lr
 80106b2:	4804      	ldr	r0, [pc, #16]	; (80106c4 <racs_services__srv__Setup_Request__get_type_description_sources+0x34>)
 80106b4:	4770      	bx	lr
 80106b6:	bf00      	nop
 80106b8:	2000bb93 	.word	0x2000bb93
 80106bc:	0801d1e0 	.word	0x0801d1e0
 80106c0:	2000bd44 	.word	0x2000bd44
 80106c4:	0801d240 	.word	0x0801d240

080106c8 <racs_services__srv__Setup_Response__get_type_description_sources>:
 80106c8:	4b09      	ldr	r3, [pc, #36]	; (80106f0 <racs_services__srv__Setup_Response__get_type_description_sources+0x28>)
 80106ca:	781a      	ldrb	r2, [r3, #0]
 80106cc:	b96a      	cbnz	r2, 80106ea <racs_services__srv__Setup_Response__get_type_description_sources+0x22>
 80106ce:	2201      	movs	r2, #1
 80106d0:	b430      	push	{r4, r5}
 80106d2:	4d08      	ldr	r5, [pc, #32]	; (80106f4 <racs_services__srv__Setup_Response__get_type_description_sources+0x2c>)
 80106d4:	4c08      	ldr	r4, [pc, #32]	; (80106f8 <racs_services__srv__Setup_Response__get_type_description_sources+0x30>)
 80106d6:	701a      	strb	r2, [r3, #0]
 80106d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80106da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80106dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80106de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80106e0:	682b      	ldr	r3, [r5, #0]
 80106e2:	4806      	ldr	r0, [pc, #24]	; (80106fc <racs_services__srv__Setup_Response__get_type_description_sources+0x34>)
 80106e4:	6023      	str	r3, [r4, #0]
 80106e6:	bc30      	pop	{r4, r5}
 80106e8:	4770      	bx	lr
 80106ea:	4804      	ldr	r0, [pc, #16]	; (80106fc <racs_services__srv__Setup_Response__get_type_description_sources+0x34>)
 80106ec:	4770      	bx	lr
 80106ee:	bf00      	nop
 80106f0:	2000bb92 	.word	0x2000bb92
 80106f4:	0801d1bc 	.word	0x0801d1bc
 80106f8:	2000bd20 	.word	0x2000bd20
 80106fc:	0801d234 	.word	0x0801d234

08010700 <racs_services__srv__Setup_Event__get_type_description_sources>:
 8010700:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010704:	4e27      	ldr	r6, [pc, #156]	; (80107a4 <racs_services__srv__Setup_Event__get_type_description_sources+0xa4>)
 8010706:	f896 8000 	ldrb.w	r8, [r6]
 801070a:	f1b8 0f00 	cmp.w	r8, #0
 801070e:	d002      	beq.n	8010716 <racs_services__srv__Setup_Event__get_type_description_sources+0x16>
 8010710:	4825      	ldr	r0, [pc, #148]	; (80107a8 <racs_services__srv__Setup_Event__get_type_description_sources+0xa8>)
 8010712:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010716:	4d25      	ldr	r5, [pc, #148]	; (80107ac <racs_services__srv__Setup_Event__get_type_description_sources+0xac>)
 8010718:	4c25      	ldr	r4, [pc, #148]	; (80107b0 <racs_services__srv__Setup_Event__get_type_description_sources+0xb0>)
 801071a:	f8df a09c 	ldr.w	sl, [pc, #156]	; 80107b8 <racs_services__srv__Setup_Event__get_type_description_sources+0xb8>
 801071e:	4f25      	ldr	r7, [pc, #148]	; (80107b4 <racs_services__srv__Setup_Event__get_type_description_sources+0xb4>)
 8010720:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010722:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010724:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010726:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010728:	682b      	ldr	r3, [r5, #0]
 801072a:	4625      	mov	r5, r4
 801072c:	4640      	mov	r0, r8
 801072e:	f104 0928 	add.w	r9, r4, #40	; 0x28
 8010732:	f845 3b04 	str.w	r3, [r5], #4
 8010736:	f005 fa9f 	bl	8015c78 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 801073a:	4684      	mov	ip, r0
 801073c:	f104 0e4c 	add.w	lr, r4, #76	; 0x4c
 8010740:	3470      	adds	r4, #112	; 0x70
 8010742:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010746:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010748:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801074c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801074e:	f8dc 3000 	ldr.w	r3, [ip]
 8010752:	602b      	str	r3, [r5, #0]
 8010754:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
 8010758:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 801075c:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
 8010760:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 8010764:	f8da 3000 	ldr.w	r3, [sl]
 8010768:	f8c9 3000 	str.w	r3, [r9]
 801076c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801076e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010772:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8010774:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010778:	683b      	ldr	r3, [r7, #0]
 801077a:	4640      	mov	r0, r8
 801077c:	f8ce 3000 	str.w	r3, [lr]
 8010780:	f005 fa26 	bl	8015bd0 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source>
 8010784:	2301      	movs	r3, #1
 8010786:	4684      	mov	ip, r0
 8010788:	7033      	strb	r3, [r6, #0]
 801078a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801078e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010790:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010794:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010796:	f8dc 3000 	ldr.w	r3, [ip]
 801079a:	4803      	ldr	r0, [pc, #12]	; (80107a8 <racs_services__srv__Setup_Event__get_type_description_sources+0xa8>)
 801079c:	6023      	str	r3, [r4, #0]
 801079e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80107a2:	bf00      	nop
 80107a4:	2000bb8f 	.word	0x2000bb8f
 80107a8:	0801d228 	.word	0x0801d228
 80107ac:	0801d198 	.word	0x0801d198
 80107b0:	2000bb94 	.word	0x2000bb94
 80107b4:	0801d1bc 	.word	0x0801d1bc
 80107b8:	0801d1e0 	.word	0x0801d1e0

080107bc <racs_services__srv__Setup_Event__fini.part.0>:
 80107bc:	b510      	push	{r4, lr}
 80107be:	b086      	sub	sp, #24
 80107c0:	4604      	mov	r4, r0
 80107c2:	f005 fa43 	bl	8015c4c <service_msgs__msg__ServiceEventInfo__fini>
 80107c6:	a801      	add	r0, sp, #4
 80107c8:	f7fd fab0 	bl	800dd2c <rcutils_get_default_allocator>
 80107cc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80107ce:	b130      	cbz	r0, 80107de <racs_services__srv__Setup_Event__fini.part.0+0x22>
 80107d0:	9b02      	ldr	r3, [sp, #8]
 80107d2:	9905      	ldr	r1, [sp, #20]
 80107d4:	4798      	blx	r3
 80107d6:	2300      	movs	r3, #0
 80107d8:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 80107dc:	6323      	str	r3, [r4, #48]	; 0x30
 80107de:	a801      	add	r0, sp, #4
 80107e0:	f7fd faa4 	bl	800dd2c <rcutils_get_default_allocator>
 80107e4:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80107e6:	b130      	cbz	r0, 80107f6 <racs_services__srv__Setup_Event__fini.part.0+0x3a>
 80107e8:	9b02      	ldr	r3, [sp, #8]
 80107ea:	9905      	ldr	r1, [sp, #20]
 80107ec:	4798      	blx	r3
 80107ee:	2300      	movs	r3, #0
 80107f0:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 80107f4:	63e3      	str	r3, [r4, #60]	; 0x3c
 80107f6:	b006      	add	sp, #24
 80107f8:	bd10      	pop	{r4, pc}
 80107fa:	bf00      	nop

080107fc <racs_services__srv__Setup_Request__init>:
 80107fc:	3800      	subs	r0, #0
 80107fe:	bf18      	it	ne
 8010800:	2001      	movne	r0, #1
 8010802:	4770      	bx	lr

08010804 <racs_services__srv__Setup_Request__fini>:
 8010804:	4770      	bx	lr
 8010806:	bf00      	nop

08010808 <racs_services__srv__Setup_Request__copy>:
 8010808:	4603      	mov	r3, r0
 801080a:	b1a0      	cbz	r0, 8010836 <racs_services__srv__Setup_Request__copy+0x2e>
 801080c:	b199      	cbz	r1, 8010836 <racs_services__srv__Setup_Request__copy+0x2e>
 801080e:	7802      	ldrb	r2, [r0, #0]
 8010810:	2001      	movs	r0, #1
 8010812:	700a      	strb	r2, [r1, #0]
 8010814:	689a      	ldr	r2, [r3, #8]
 8010816:	f8d3 c004 	ldr.w	ip, [r3, #4]
 801081a:	608a      	str	r2, [r1, #8]
 801081c:	691a      	ldr	r2, [r3, #16]
 801081e:	f8c1 c004 	str.w	ip, [r1, #4]
 8010822:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8010826:	610a      	str	r2, [r1, #16]
 8010828:	695a      	ldr	r2, [r3, #20]
 801082a:	699b      	ldr	r3, [r3, #24]
 801082c:	f8c1 c00c 	str.w	ip, [r1, #12]
 8010830:	614a      	str	r2, [r1, #20]
 8010832:	618b      	str	r3, [r1, #24]
 8010834:	4770      	bx	lr
 8010836:	2000      	movs	r0, #0
 8010838:	4770      	bx	lr
 801083a:	bf00      	nop

0801083c <racs_services__srv__Setup_Request__Sequence__init>:
 801083c:	b530      	push	{r4, r5, lr}
 801083e:	4604      	mov	r4, r0
 8010840:	b087      	sub	sp, #28
 8010842:	b148      	cbz	r0, 8010858 <racs_services__srv__Setup_Request__Sequence__init+0x1c>
 8010844:	460d      	mov	r5, r1
 8010846:	a801      	add	r0, sp, #4
 8010848:	f7fd fa70 	bl	800dd2c <rcutils_get_default_allocator>
 801084c:	b935      	cbnz	r5, 801085c <racs_services__srv__Setup_Request__Sequence__init+0x20>
 801084e:	462b      	mov	r3, r5
 8010850:	2001      	movs	r0, #1
 8010852:	60a5      	str	r5, [r4, #8]
 8010854:	e9c4 3500 	strd	r3, r5, [r4]
 8010858:	b007      	add	sp, #28
 801085a:	bd30      	pop	{r4, r5, pc}
 801085c:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8010860:	211c      	movs	r1, #28
 8010862:	4628      	mov	r0, r5
 8010864:	4798      	blx	r3
 8010866:	4603      	mov	r3, r0
 8010868:	2800      	cmp	r0, #0
 801086a:	d1f1      	bne.n	8010850 <racs_services__srv__Setup_Request__Sequence__init+0x14>
 801086c:	e7f4      	b.n	8010858 <racs_services__srv__Setup_Request__Sequence__init+0x1c>
 801086e:	bf00      	nop

08010870 <racs_services__srv__Setup_Request__Sequence__fini>:
 8010870:	b180      	cbz	r0, 8010894 <racs_services__srv__Setup_Request__Sequence__fini+0x24>
 8010872:	b510      	push	{r4, lr}
 8010874:	b086      	sub	sp, #24
 8010876:	4604      	mov	r4, r0
 8010878:	a801      	add	r0, sp, #4
 801087a:	f7fd fa57 	bl	800dd2c <rcutils_get_default_allocator>
 801087e:	6820      	ldr	r0, [r4, #0]
 8010880:	b130      	cbz	r0, 8010890 <racs_services__srv__Setup_Request__Sequence__fini+0x20>
 8010882:	9b02      	ldr	r3, [sp, #8]
 8010884:	9905      	ldr	r1, [sp, #20]
 8010886:	4798      	blx	r3
 8010888:	2300      	movs	r3, #0
 801088a:	e9c4 3300 	strd	r3, r3, [r4]
 801088e:	60a3      	str	r3, [r4, #8]
 8010890:	b006      	add	sp, #24
 8010892:	bd10      	pop	{r4, pc}
 8010894:	4770      	bx	lr
 8010896:	bf00      	nop

08010898 <racs_services__srv__Setup_Response__init>:
 8010898:	3800      	subs	r0, #0
 801089a:	bf18      	it	ne
 801089c:	2001      	movne	r0, #1
 801089e:	4770      	bx	lr

080108a0 <racs_services__srv__Setup_Response__fini>:
 80108a0:	4770      	bx	lr
 80108a2:	bf00      	nop

080108a4 <racs_services__srv__Setup_Response__copy>:
 80108a4:	b120      	cbz	r0, 80108b0 <racs_services__srv__Setup_Response__copy+0xc>
 80108a6:	b119      	cbz	r1, 80108b0 <racs_services__srv__Setup_Response__copy+0xc>
 80108a8:	7803      	ldrb	r3, [r0, #0]
 80108aa:	2001      	movs	r0, #1
 80108ac:	700b      	strb	r3, [r1, #0]
 80108ae:	4770      	bx	lr
 80108b0:	2000      	movs	r0, #0
 80108b2:	4770      	bx	lr

080108b4 <racs_services__srv__Setup_Response__Sequence__init>:
 80108b4:	b530      	push	{r4, r5, lr}
 80108b6:	4604      	mov	r4, r0
 80108b8:	b087      	sub	sp, #28
 80108ba:	b148      	cbz	r0, 80108d0 <racs_services__srv__Setup_Response__Sequence__init+0x1c>
 80108bc:	460d      	mov	r5, r1
 80108be:	a801      	add	r0, sp, #4
 80108c0:	f7fd fa34 	bl	800dd2c <rcutils_get_default_allocator>
 80108c4:	b935      	cbnz	r5, 80108d4 <racs_services__srv__Setup_Response__Sequence__init+0x20>
 80108c6:	462b      	mov	r3, r5
 80108c8:	2001      	movs	r0, #1
 80108ca:	60a5      	str	r5, [r4, #8]
 80108cc:	e9c4 3500 	strd	r3, r5, [r4]
 80108d0:	b007      	add	sp, #28
 80108d2:	bd30      	pop	{r4, r5, pc}
 80108d4:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 80108d8:	2101      	movs	r1, #1
 80108da:	4628      	mov	r0, r5
 80108dc:	4798      	blx	r3
 80108de:	4603      	mov	r3, r0
 80108e0:	2800      	cmp	r0, #0
 80108e2:	d1f1      	bne.n	80108c8 <racs_services__srv__Setup_Response__Sequence__init+0x14>
 80108e4:	e7f4      	b.n	80108d0 <racs_services__srv__Setup_Response__Sequence__init+0x1c>
 80108e6:	bf00      	nop

080108e8 <racs_services__srv__Setup_Response__Sequence__fini>:
 80108e8:	b180      	cbz	r0, 801090c <racs_services__srv__Setup_Response__Sequence__fini+0x24>
 80108ea:	b510      	push	{r4, lr}
 80108ec:	b086      	sub	sp, #24
 80108ee:	4604      	mov	r4, r0
 80108f0:	a801      	add	r0, sp, #4
 80108f2:	f7fd fa1b 	bl	800dd2c <rcutils_get_default_allocator>
 80108f6:	6820      	ldr	r0, [r4, #0]
 80108f8:	b130      	cbz	r0, 8010908 <racs_services__srv__Setup_Response__Sequence__fini+0x20>
 80108fa:	9b02      	ldr	r3, [sp, #8]
 80108fc:	9905      	ldr	r1, [sp, #20]
 80108fe:	4798      	blx	r3
 8010900:	2300      	movs	r3, #0
 8010902:	e9c4 3300 	strd	r3, r3, [r4]
 8010906:	60a3      	str	r3, [r4, #8]
 8010908:	b006      	add	sp, #24
 801090a:	bd10      	pop	{r4, pc}
 801090c:	4770      	bx	lr
 801090e:	bf00      	nop

08010910 <racs_services__srv__Setup_Event__init>:
 8010910:	b570      	push	{r4, r5, r6, lr}
 8010912:	4604      	mov	r4, r0
 8010914:	b086      	sub	sp, #24
 8010916:	b1c8      	cbz	r0, 801094c <racs_services__srv__Setup_Event__init+0x3c>
 8010918:	f005 f986 	bl	8015c28 <service_msgs__msg__ServiceEventInfo__init>
 801091c:	4605      	mov	r5, r0
 801091e:	b178      	cbz	r0, 8010940 <racs_services__srv__Setup_Event__init+0x30>
 8010920:	2600      	movs	r6, #0
 8010922:	a801      	add	r0, sp, #4
 8010924:	f7fd fa02 	bl	800dd2c <rcutils_get_default_allocator>
 8010928:	a801      	add	r0, sp, #4
 801092a:	6326      	str	r6, [r4, #48]	; 0x30
 801092c:	e9c4 660a 	strd	r6, r6, [r4, #40]	; 0x28
 8010930:	f7fd f9fc 	bl	800dd2c <rcutils_get_default_allocator>
 8010934:	4628      	mov	r0, r5
 8010936:	63e6      	str	r6, [r4, #60]	; 0x3c
 8010938:	e9c4 660d 	strd	r6, r6, [r4, #52]	; 0x34
 801093c:	b006      	add	sp, #24
 801093e:	bd70      	pop	{r4, r5, r6, pc}
 8010940:	4620      	mov	r0, r4
 8010942:	f7ff ff3b 	bl	80107bc <racs_services__srv__Setup_Event__fini.part.0>
 8010946:	4628      	mov	r0, r5
 8010948:	b006      	add	sp, #24
 801094a:	bd70      	pop	{r4, r5, r6, pc}
 801094c:	4605      	mov	r5, r0
 801094e:	4628      	mov	r0, r5
 8010950:	b006      	add	sp, #24
 8010952:	bd70      	pop	{r4, r5, r6, pc}

08010954 <racs_services__srv__Setup_Event__fini>:
 8010954:	b1f0      	cbz	r0, 8010994 <racs_services__srv__Setup_Event__fini+0x40>
 8010956:	b510      	push	{r4, lr}
 8010958:	b086      	sub	sp, #24
 801095a:	4604      	mov	r4, r0
 801095c:	f005 f976 	bl	8015c4c <service_msgs__msg__ServiceEventInfo__fini>
 8010960:	a801      	add	r0, sp, #4
 8010962:	f7fd f9e3 	bl	800dd2c <rcutils_get_default_allocator>
 8010966:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8010968:	b130      	cbz	r0, 8010978 <racs_services__srv__Setup_Event__fini+0x24>
 801096a:	9b02      	ldr	r3, [sp, #8]
 801096c:	9905      	ldr	r1, [sp, #20]
 801096e:	4798      	blx	r3
 8010970:	2300      	movs	r3, #0
 8010972:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 8010976:	6323      	str	r3, [r4, #48]	; 0x30
 8010978:	a801      	add	r0, sp, #4
 801097a:	f7fd f9d7 	bl	800dd2c <rcutils_get_default_allocator>
 801097e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8010980:	b130      	cbz	r0, 8010990 <racs_services__srv__Setup_Event__fini+0x3c>
 8010982:	9b02      	ldr	r3, [sp, #8]
 8010984:	9905      	ldr	r1, [sp, #20]
 8010986:	4798      	blx	r3
 8010988:	2300      	movs	r3, #0
 801098a:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 801098e:	63e3      	str	r3, [r4, #60]	; 0x3c
 8010990:	b006      	add	sp, #24
 8010992:	bd10      	pop	{r4, pc}
 8010994:	4770      	bx	lr
 8010996:	bf00      	nop

08010998 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup>:
 8010998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801099c:	2900      	cmp	r1, #0
 801099e:	d04d      	beq.n	8010a3c <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup+0xa4>
 80109a0:	4605      	mov	r5, r0
 80109a2:	2800      	cmp	r0, #0
 80109a4:	d04a      	beq.n	8010a3c <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup+0xa4>
 80109a6:	460e      	mov	r6, r1
 80109a8:	4698      	mov	r8, r3
 80109aa:	2040      	movs	r0, #64	; 0x40
 80109ac:	680b      	ldr	r3, [r1, #0]
 80109ae:	6909      	ldr	r1, [r1, #16]
 80109b0:	4617      	mov	r7, r2
 80109b2:	4798      	blx	r3
 80109b4:	4604      	mov	r4, r0
 80109b6:	f7ff ffab 	bl	8010910 <racs_services__srv__Setup_Event__init>
 80109ba:	4684      	mov	ip, r0
 80109bc:	b370      	cbz	r0, 8010a1c <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup+0x84>
 80109be:	782b      	ldrb	r3, [r5, #0]
 80109c0:	7023      	strb	r3, [r4, #0]
 80109c2:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
 80109c6:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 80109ca:	e9c4 2301 	strd	r2, r3, [r4, #4]
 80109ce:	e9c4 0108 	strd	r0, r1, [r4, #32]
 80109d2:	68e8      	ldr	r0, [r5, #12]
 80109d4:	6929      	ldr	r1, [r5, #16]
 80109d6:	696a      	ldr	r2, [r5, #20]
 80109d8:	69ab      	ldr	r3, [r5, #24]
 80109da:	60e0      	str	r0, [r4, #12]
 80109dc:	6121      	str	r1, [r4, #16]
 80109de:	6162      	str	r2, [r4, #20]
 80109e0:	61a3      	str	r3, [r4, #24]
 80109e2:	b157      	cbz	r7, 80109fa <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup+0x62>
 80109e4:	2101      	movs	r1, #1
 80109e6:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80109ea:	f7ff ff27 	bl	801083c <racs_services__srv__Setup_Request__Sequence__init>
 80109ee:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80109f0:	4638      	mov	r0, r7
 80109f2:	f7ff ff09 	bl	8010808 <racs_services__srv__Setup_Request__copy>
 80109f6:	4603      	mov	r3, r0
 80109f8:	b1c0      	cbz	r0, 8010a2c <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup+0x94>
 80109fa:	f1b8 0f00 	cmp.w	r8, #0
 80109fe:	d00a      	beq.n	8010a16 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup+0x7e>
 8010a00:	2101      	movs	r1, #1
 8010a02:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8010a06:	f7ff ff55 	bl	80108b4 <racs_services__srv__Setup_Response__Sequence__init>
 8010a0a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010a0c:	4640      	mov	r0, r8
 8010a0e:	f7ff ff49 	bl	80108a4 <racs_services__srv__Setup_Response__copy>
 8010a12:	4603      	mov	r3, r0
 8010a14:	b150      	cbz	r0, 8010a2c <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup+0x94>
 8010a16:	4620      	mov	r0, r4
 8010a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a1c:	4620      	mov	r0, r4
 8010a1e:	4664      	mov	r4, ip
 8010a20:	6873      	ldr	r3, [r6, #4]
 8010a22:	6931      	ldr	r1, [r6, #16]
 8010a24:	4798      	blx	r3
 8010a26:	4620      	mov	r0, r4
 8010a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a2c:	4620      	mov	r0, r4
 8010a2e:	461c      	mov	r4, r3
 8010a30:	6872      	ldr	r2, [r6, #4]
 8010a32:	6931      	ldr	r1, [r6, #16]
 8010a34:	4790      	blx	r2
 8010a36:	4620      	mov	r0, r4
 8010a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a3c:	2400      	movs	r4, #0
 8010a3e:	4620      	mov	r0, r4
 8010a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010a44 <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Setup>:
 8010a44:	b1b9      	cbz	r1, 8010a76 <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Setup+0x32>
 8010a46:	b538      	push	{r3, r4, r5, lr}
 8010a48:	4605      	mov	r5, r0
 8010a4a:	b190      	cbz	r0, 8010a72 <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Setup+0x2e>
 8010a4c:	460c      	mov	r4, r1
 8010a4e:	f7ff ff81 	bl	8010954 <racs_services__srv__Setup_Event__fini>
 8010a52:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8010a54:	b110      	cbz	r0, 8010a5c <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Setup+0x18>
 8010a56:	6863      	ldr	r3, [r4, #4]
 8010a58:	6921      	ldr	r1, [r4, #16]
 8010a5a:	4798      	blx	r3
 8010a5c:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8010a5e:	b110      	cbz	r0, 8010a66 <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Setup+0x22>
 8010a60:	6863      	ldr	r3, [r4, #4]
 8010a62:	6921      	ldr	r1, [r4, #16]
 8010a64:	4798      	blx	r3
 8010a66:	4628      	mov	r0, r5
 8010a68:	6863      	ldr	r3, [r4, #4]
 8010a6a:	6921      	ldr	r1, [r4, #16]
 8010a6c:	4798      	blx	r3
 8010a6e:	2001      	movs	r0, #1
 8010a70:	bd38      	pop	{r3, r4, r5, pc}
 8010a72:	2000      	movs	r0, #0
 8010a74:	bd38      	pop	{r3, r4, r5, pc}
 8010a76:	2000      	movs	r0, #0
 8010a78:	4770      	bx	lr
 8010a7a:	bf00      	nop

08010a7c <rcl_client_get_rmw_handle>:
 8010a7c:	b118      	cbz	r0, 8010a86 <rcl_client_get_rmw_handle+0xa>
 8010a7e:	6800      	ldr	r0, [r0, #0]
 8010a80:	b108      	cbz	r0, 8010a86 <rcl_client_get_rmw_handle+0xa>
 8010a82:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 8010a86:	4770      	bx	lr

08010a88 <rcl_send_request>:
 8010a88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010a8a:	b08b      	sub	sp, #44	; 0x2c
 8010a8c:	b1e8      	cbz	r0, 8010aca <rcl_send_request+0x42>
 8010a8e:	4604      	mov	r4, r0
 8010a90:	6800      	ldr	r0, [r0, #0]
 8010a92:	b1d0      	cbz	r0, 8010aca <rcl_send_request+0x42>
 8010a94:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8010a98:	b1bb      	cbz	r3, 8010aca <rcl_send_request+0x42>
 8010a9a:	460f      	mov	r7, r1
 8010a9c:	b1d1      	cbz	r1, 8010ad4 <rcl_send_request+0x4c>
 8010a9e:	4615      	mov	r5, r2
 8010aa0:	b1c2      	cbz	r2, 8010ad4 <rcl_send_request+0x4c>
 8010aa2:	2105      	movs	r1, #5
 8010aa4:	f500 7088 	add.w	r0, r0, #272	; 0x110
 8010aa8:	f002 fef2 	bl	8013890 <__atomic_load_8>
 8010aac:	6823      	ldr	r3, [r4, #0]
 8010aae:	462a      	mov	r2, r5
 8010ab0:	e9c5 0100 	strd	r0, r1, [r5]
 8010ab4:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 8010ab8:	4639      	mov	r1, r7
 8010aba:	f003 ffc9 	bl	8014a50 <rmw_send_request>
 8010abe:	4606      	mov	r6, r0
 8010ac0:	b160      	cbz	r0, 8010adc <rcl_send_request+0x54>
 8010ac2:	2601      	movs	r6, #1
 8010ac4:	4630      	mov	r0, r6
 8010ac6:	b00b      	add	sp, #44	; 0x2c
 8010ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010aca:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
 8010ace:	4630      	mov	r0, r6
 8010ad0:	b00b      	add	sp, #44	; 0x2c
 8010ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010ad4:	260b      	movs	r6, #11
 8010ad6:	4630      	mov	r0, r6
 8010ad8:	b00b      	add	sp, #44	; 0x2c
 8010ada:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010adc:	6820      	ldr	r0, [r4, #0]
 8010ade:	2305      	movs	r3, #5
 8010ae0:	f500 7088 	add.w	r0, r0, #272	; 0x110
 8010ae4:	9300      	str	r3, [sp, #0]
 8010ae6:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010aea:	f002 ff3d 	bl	8013968 <__atomic_exchange_8>
 8010aee:	6823      	ldr	r3, [r4, #0]
 8010af0:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 8010af4:	2a00      	cmp	r2, #0
 8010af6:	d0e5      	beq.n	8010ac4 <rcl_send_request+0x3c>
 8010af8:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 8010afc:	a905      	add	r1, sp, #20
 8010afe:	f003 fbe1 	bl	80142c4 <rmw_get_gid_for_client>
 8010b02:	b970      	cbnz	r0, 8010b22 <rcl_send_request+0x9a>
 8010b04:	6820      	ldr	r0, [r4, #0]
 8010b06:	ab06      	add	r3, sp, #24
 8010b08:	4631      	mov	r1, r6
 8010b0a:	463a      	mov	r2, r7
 8010b0c:	f8d0 0118 	ldr.w	r0, [r0, #280]	; 0x118
 8010b10:	9302      	str	r3, [sp, #8]
 8010b12:	e9d5 4500 	ldrd	r4, r5, [r5]
 8010b16:	e9cd 4500 	strd	r4, r5, [sp]
 8010b1a:	f001 f825 	bl	8011b68 <rcl_send_service_event_message>
 8010b1e:	4606      	mov	r6, r0
 8010b20:	e7d0      	b.n	8010ac4 <rcl_send_request+0x3c>
 8010b22:	f000 f877 	bl	8010c14 <rcl_convert_rmw_ret_to_rcl_ret>
 8010b26:	4606      	mov	r6, r0
 8010b28:	e7cc      	b.n	8010ac4 <rcl_send_request+0x3c>
 8010b2a:	bf00      	nop
 8010b2c:	0000      	movs	r0, r0
	...

08010b30 <rcl_take_response>:
 8010b30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010b32:	468e      	mov	lr, r1
 8010b34:	b095      	sub	sp, #84	; 0x54
 8010b36:	460c      	mov	r4, r1
 8010b38:	4616      	mov	r6, r2
 8010b3a:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
 8010b3e:	4605      	mov	r5, r0
 8010b40:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010b44:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010b48:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8010b4c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8010b50:	2d00      	cmp	r5, #0
 8010b52:	d042      	beq.n	8010bda <rcl_take_response+0xaa>
 8010b54:	682b      	ldr	r3, [r5, #0]
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d03f      	beq.n	8010bda <rcl_take_response+0xaa>
 8010b5a:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 8010b5e:	2800      	cmp	r0, #0
 8010b60:	d03b      	beq.n	8010bda <rcl_take_response+0xaa>
 8010b62:	2e00      	cmp	r6, #0
 8010b64:	d03c      	beq.n	8010be0 <rcl_take_response+0xb0>
 8010b66:	2300      	movs	r3, #0
 8010b68:	4632      	mov	r2, r6
 8010b6a:	a90a      	add	r1, sp, #40	; 0x28
 8010b6c:	f88d 3013 	strb.w	r3, [sp, #19]
 8010b70:	f10d 0313 	add.w	r3, sp, #19
 8010b74:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8010bf8 <rcl_take_response+0xc8>
 8010b78:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8010b7c:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8010b80:	f004 f86e 	bl	8014c60 <rmw_take_response>
 8010b84:	4607      	mov	r7, r0
 8010b86:	bb68      	cbnz	r0, 8010be4 <rcl_take_response+0xb4>
 8010b88:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8010b8c:	b363      	cbz	r3, 8010be8 <rcl_take_response+0xb8>
 8010b8e:	682b      	ldr	r3, [r5, #0]
 8010b90:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 8010b94:	b19a      	cbz	r2, 8010bbe <rcl_take_response+0x8e>
 8010b96:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 8010b9a:	a905      	add	r1, sp, #20
 8010b9c:	f003 fb92 	bl	80142c4 <rmw_get_gid_for_client>
 8010ba0:	bb28      	cbnz	r0, 8010bee <rcl_take_response+0xbe>
 8010ba2:	6829      	ldr	r1, [r5, #0]
 8010ba4:	ab06      	add	r3, sp, #24
 8010ba6:	4632      	mov	r2, r6
 8010ba8:	f8d1 0118 	ldr.w	r0, [r1, #280]	; 0x118
 8010bac:	2103      	movs	r1, #3
 8010bae:	9302      	str	r3, [sp, #8]
 8010bb0:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8010bb4:	e9cd 6700 	strd	r6, r7, [sp]
 8010bb8:	f000 ffd6 	bl	8011b68 <rcl_send_service_event_message>
 8010bbc:	4607      	mov	r7, r0
 8010bbe:	f10d 0e38 	add.w	lr, sp, #56	; 0x38
 8010bc2:	46a4      	mov	ip, r4
 8010bc4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010bc8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010bcc:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8010bd0:	e88c 0003 	stmia.w	ip, {r0, r1}
 8010bd4:	4638      	mov	r0, r7
 8010bd6:	b015      	add	sp, #84	; 0x54
 8010bd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010bda:	f44f 77fa 	mov.w	r7, #500	; 0x1f4
 8010bde:	e7ee      	b.n	8010bbe <rcl_take_response+0x8e>
 8010be0:	270b      	movs	r7, #11
 8010be2:	e7ec      	b.n	8010bbe <rcl_take_response+0x8e>
 8010be4:	2701      	movs	r7, #1
 8010be6:	e7ea      	b.n	8010bbe <rcl_take_response+0x8e>
 8010be8:	f240 17f5 	movw	r7, #501	; 0x1f5
 8010bec:	e7e7      	b.n	8010bbe <rcl_take_response+0x8e>
 8010bee:	f000 f811 	bl	8010c14 <rcl_convert_rmw_ret_to_rcl_ret>
 8010bf2:	4607      	mov	r7, r0
 8010bf4:	e7e3      	b.n	8010bbe <rcl_take_response+0x8e>
 8010bf6:	bf00      	nop
	...

08010c00 <rcl_client_is_valid>:
 8010c00:	b130      	cbz	r0, 8010c10 <rcl_client_is_valid+0x10>
 8010c02:	6800      	ldr	r0, [r0, #0]
 8010c04:	b120      	cbz	r0, 8010c10 <rcl_client_is_valid+0x10>
 8010c06:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 8010c0a:	3800      	subs	r0, #0
 8010c0c:	bf18      	it	ne
 8010c0e:	2001      	movne	r0, #1
 8010c10:	4770      	bx	lr
 8010c12:	bf00      	nop

08010c14 <rcl_convert_rmw_ret_to_rcl_ret>:
 8010c14:	280b      	cmp	r0, #11
 8010c16:	dc0d      	bgt.n	8010c34 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8010c18:	2800      	cmp	r0, #0
 8010c1a:	db09      	blt.n	8010c30 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8010c1c:	280b      	cmp	r0, #11
 8010c1e:	d807      	bhi.n	8010c30 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8010c20:	e8df f000 	tbb	[pc, r0]
 8010c24:	07060607 	.word	0x07060607
 8010c28:	06060606 	.word	0x06060606
 8010c2c:	07070606 	.word	0x07070606
 8010c30:	2001      	movs	r0, #1
 8010c32:	4770      	bx	lr
 8010c34:	28cb      	cmp	r0, #203	; 0xcb
 8010c36:	bf18      	it	ne
 8010c38:	2001      	movne	r0, #1
 8010c3a:	4770      	bx	lr

08010c3c <rcl_get_zero_initialized_context>:
 8010c3c:	4a03      	ldr	r2, [pc, #12]	; (8010c4c <rcl_get_zero_initialized_context+0x10>)
 8010c3e:	4603      	mov	r3, r0
 8010c40:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010c44:	e883 0003 	stmia.w	r3, {r0, r1}
 8010c48:	4618      	mov	r0, r3
 8010c4a:	4770      	bx	lr
 8010c4c:	0801d258 	.word	0x0801d258

08010c50 <rcl_context_is_valid>:
 8010c50:	b118      	cbz	r0, 8010c5a <rcl_context_is_valid+0xa>
 8010c52:	6840      	ldr	r0, [r0, #4]
 8010c54:	3800      	subs	r0, #0
 8010c56:	bf18      	it	ne
 8010c58:	2001      	movne	r0, #1
 8010c5a:	4770      	bx	lr

08010c5c <__cleanup_context>:
 8010c5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010c60:	4606      	mov	r6, r0
 8010c62:	2300      	movs	r3, #0
 8010c64:	6800      	ldr	r0, [r0, #0]
 8010c66:	6073      	str	r3, [r6, #4]
 8010c68:	2800      	cmp	r0, #0
 8010c6a:	d049      	beq.n	8010d00 <__cleanup_context+0xa4>
 8010c6c:	6947      	ldr	r7, [r0, #20]
 8010c6e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8010c72:	f8d0 9010 	ldr.w	r9, [r0, #16]
 8010c76:	b137      	cbz	r7, 8010c86 <__cleanup_context+0x2a>
 8010c78:	3014      	adds	r0, #20
 8010c7a:	f000 f9e7 	bl	801104c <rcl_init_options_fini>
 8010c7e:	4607      	mov	r7, r0
 8010c80:	2800      	cmp	r0, #0
 8010c82:	d144      	bne.n	8010d0e <__cleanup_context+0xb2>
 8010c84:	6830      	ldr	r0, [r6, #0]
 8010c86:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8010c88:	b143      	cbz	r3, 8010c9c <__cleanup_context+0x40>
 8010c8a:	3028      	adds	r0, #40	; 0x28
 8010c8c:	f003 fd44 	bl	8014718 <rmw_context_fini>
 8010c90:	b118      	cbz	r0, 8010c9a <__cleanup_context+0x3e>
 8010c92:	2f00      	cmp	r7, #0
 8010c94:	d03e      	beq.n	8010d14 <__cleanup_context+0xb8>
 8010c96:	f7fd f87b 	bl	800dd90 <rcutils_reset_error>
 8010c9a:	6830      	ldr	r0, [r6, #0]
 8010c9c:	6a03      	ldr	r3, [r0, #32]
 8010c9e:	b1db      	cbz	r3, 8010cd8 <__cleanup_context+0x7c>
 8010ca0:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 8010ca4:	2a01      	cmp	r2, #1
 8010ca6:	f17c 0100 	sbcs.w	r1, ip, #0
 8010caa:	db11      	blt.n	8010cd0 <__cleanup_context+0x74>
 8010cac:	2400      	movs	r4, #0
 8010cae:	4625      	mov	r5, r4
 8010cb0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8010cb4:	4649      	mov	r1, r9
 8010cb6:	b1b8      	cbz	r0, 8010ce8 <__cleanup_context+0x8c>
 8010cb8:	47c0      	blx	r8
 8010cba:	6833      	ldr	r3, [r6, #0]
 8010cbc:	3401      	adds	r4, #1
 8010cbe:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 8010cc2:	f145 0500 	adc.w	r5, r5, #0
 8010cc6:	6a1b      	ldr	r3, [r3, #32]
 8010cc8:	4294      	cmp	r4, r2
 8010cca:	eb75 010c 	sbcs.w	r1, r5, ip
 8010cce:	dbef      	blt.n	8010cb0 <__cleanup_context+0x54>
 8010cd0:	4618      	mov	r0, r3
 8010cd2:	4649      	mov	r1, r9
 8010cd4:	47c0      	blx	r8
 8010cd6:	6830      	ldr	r0, [r6, #0]
 8010cd8:	4649      	mov	r1, r9
 8010cda:	47c0      	blx	r8
 8010cdc:	2300      	movs	r3, #0
 8010cde:	4638      	mov	r0, r7
 8010ce0:	e9c6 3300 	strd	r3, r3, [r6]
 8010ce4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010ce8:	3401      	adds	r4, #1
 8010cea:	f145 0500 	adc.w	r5, r5, #0
 8010cee:	4294      	cmp	r4, r2
 8010cf0:	eb75 010c 	sbcs.w	r1, r5, ip
 8010cf4:	dbdc      	blt.n	8010cb0 <__cleanup_context+0x54>
 8010cf6:	4618      	mov	r0, r3
 8010cf8:	4649      	mov	r1, r9
 8010cfa:	47c0      	blx	r8
 8010cfc:	6830      	ldr	r0, [r6, #0]
 8010cfe:	e7eb      	b.n	8010cd8 <__cleanup_context+0x7c>
 8010d00:	4607      	mov	r7, r0
 8010d02:	2300      	movs	r3, #0
 8010d04:	4638      	mov	r0, r7
 8010d06:	e9c6 3300 	strd	r3, r3, [r6]
 8010d0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010d0e:	f7fd f83f 	bl	800dd90 <rcutils_reset_error>
 8010d12:	e7b7      	b.n	8010c84 <__cleanup_context+0x28>
 8010d14:	f7ff ff7e 	bl	8010c14 <rcl_convert_rmw_ret_to_rcl_ret>
 8010d18:	4607      	mov	r7, r0
 8010d1a:	e7bc      	b.n	8010c96 <__cleanup_context+0x3a>

08010d1c <rcl_init>:
 8010d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d20:	1e05      	subs	r5, r0, #0
 8010d22:	b0a7      	sub	sp, #156	; 0x9c
 8010d24:	460e      	mov	r6, r1
 8010d26:	4690      	mov	r8, r2
 8010d28:	461f      	mov	r7, r3
 8010d2a:	f340 80a0 	ble.w	8010e6e <rcl_init+0x152>
 8010d2e:	2900      	cmp	r1, #0
 8010d30:	f000 80a0 	beq.w	8010e74 <rcl_init+0x158>
 8010d34:	f1a1 0e04 	sub.w	lr, r1, #4
 8010d38:	f04f 0c00 	mov.w	ip, #0
 8010d3c:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 8010d40:	f10c 0c01 	add.w	ip, ip, #1
 8010d44:	2c00      	cmp	r4, #0
 8010d46:	f000 8095 	beq.w	8010e74 <rcl_init+0x158>
 8010d4a:	4565      	cmp	r5, ip
 8010d4c:	d1f6      	bne.n	8010d3c <rcl_init+0x20>
 8010d4e:	f1b8 0f00 	cmp.w	r8, #0
 8010d52:	f000 808f 	beq.w	8010e74 <rcl_init+0x158>
 8010d56:	f8d8 4000 	ldr.w	r4, [r8]
 8010d5a:	2c00      	cmp	r4, #0
 8010d5c:	f000 808a 	beq.w	8010e74 <rcl_init+0x158>
 8010d60:	f10d 0c84 	add.w	ip, sp, #132	; 0x84
 8010d64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010d66:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010d6a:	6823      	ldr	r3, [r4, #0]
 8010d6c:	a821      	add	r0, sp, #132	; 0x84
 8010d6e:	f8cc 3000 	str.w	r3, [ip]
 8010d72:	f7fc ffe9 	bl	800dd48 <rcutils_allocator_is_valid>
 8010d76:	f080 0001 	eor.w	r0, r0, #1
 8010d7a:	b2c0      	uxtb	r0, r0
 8010d7c:	2800      	cmp	r0, #0
 8010d7e:	d179      	bne.n	8010e74 <rcl_init+0x158>
 8010d80:	2f00      	cmp	r7, #0
 8010d82:	d077      	beq.n	8010e74 <rcl_init+0x158>
 8010d84:	683b      	ldr	r3, [r7, #0]
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d179      	bne.n	8010e7e <rcl_init+0x162>
 8010d8a:	2198      	movs	r1, #152	; 0x98
 8010d8c:	2001      	movs	r0, #1
 8010d8e:	e9dd 3224 	ldrd	r3, r2, [sp, #144]	; 0x90
 8010d92:	4798      	blx	r3
 8010d94:	4604      	mov	r4, r0
 8010d96:	6038      	str	r0, [r7, #0]
 8010d98:	2800      	cmp	r0, #0
 8010d9a:	f000 80cd 	beq.w	8010f38 <rcl_init+0x21c>
 8010d9e:	a802      	add	r0, sp, #8
 8010da0:	f003 f8ca 	bl	8013f38 <rmw_get_zero_initialized_context>
 8010da4:	a902      	add	r1, sp, #8
 8010da6:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8010daa:	2270      	movs	r2, #112	; 0x70
 8010dac:	f00a fc5f 	bl	801b66e <memcpy>
 8010db0:	f8d7 e000 	ldr.w	lr, [r7]
 8010db4:	f10d 0c84 	add.w	ip, sp, #132	; 0x84
 8010db8:	4674      	mov	r4, lr
 8010dba:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010dbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010dc0:	f8dc 3000 	ldr.w	r3, [ip]
 8010dc4:	f10e 0114 	add.w	r1, lr, #20
 8010dc8:	4640      	mov	r0, r8
 8010dca:	6023      	str	r3, [r4, #0]
 8010dcc:	f000 f968 	bl	80110a0 <rcl_init_options_copy>
 8010dd0:	4604      	mov	r4, r0
 8010dd2:	2800      	cmp	r0, #0
 8010dd4:	d144      	bne.n	8010e60 <rcl_init+0x144>
 8010dd6:	f8d7 9000 	ldr.w	r9, [r7]
 8010dda:	ea4f 7ae5 	mov.w	sl, r5, asr #31
 8010dde:	f8c9 0020 	str.w	r0, [r9, #32]
 8010de2:	f8c9 5018 	str.w	r5, [r9, #24]
 8010de6:	f8c9 a01c 	str.w	sl, [r9, #28]
 8010dea:	2d00      	cmp	r5, #0
 8010dec:	d04e      	beq.n	8010e8c <rcl_init+0x170>
 8010dee:	2e00      	cmp	r6, #0
 8010df0:	d04c      	beq.n	8010e8c <rcl_init+0x170>
 8010df2:	2104      	movs	r1, #4
 8010df4:	4628      	mov	r0, r5
 8010df6:	e9dd 3224 	ldrd	r3, r2, [sp, #144]	; 0x90
 8010dfa:	4798      	blx	r3
 8010dfc:	f8c9 0020 	str.w	r0, [r9, #32]
 8010e00:	f8d7 9000 	ldr.w	r9, [r7]
 8010e04:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8010e08:	46cb      	mov	fp, r9
 8010e0a:	b343      	cbz	r3, 8010e5e <rcl_init+0x142>
 8010e0c:	2d01      	cmp	r5, #1
 8010e0e:	f17a 0300 	sbcs.w	r3, sl, #0
 8010e12:	db3b      	blt.n	8010e8c <rcl_init+0x170>
 8010e14:	2400      	movs	r4, #0
 8010e16:	3e04      	subs	r6, #4
 8010e18:	46a1      	mov	r9, r4
 8010e1a:	e00b      	b.n	8010e34 <rcl_init+0x118>
 8010e1c:	6831      	ldr	r1, [r6, #0]
 8010e1e:	f00a fc26 	bl	801b66e <memcpy>
 8010e22:	3401      	adds	r4, #1
 8010e24:	f149 0900 	adc.w	r9, r9, #0
 8010e28:	45ca      	cmp	sl, r9
 8010e2a:	bf08      	it	eq
 8010e2c:	42a5      	cmpeq	r5, r4
 8010e2e:	d02b      	beq.n	8010e88 <rcl_init+0x16c>
 8010e30:	f8d7 b000 	ldr.w	fp, [r7]
 8010e34:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8010e38:	f7ef fa62 	bl	8000300 <strlen>
 8010e3c:	1c42      	adds	r2, r0, #1
 8010e3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010e40:	4610      	mov	r0, r2
 8010e42:	9925      	ldr	r1, [sp, #148]	; 0x94
 8010e44:	f8db b020 	ldr.w	fp, [fp, #32]
 8010e48:	9201      	str	r2, [sp, #4]
 8010e4a:	4798      	blx	r3
 8010e4c:	683b      	ldr	r3, [r7, #0]
 8010e4e:	f84b 0024 	str.w	r0, [fp, r4, lsl #2]
 8010e52:	6a1b      	ldr	r3, [r3, #32]
 8010e54:	9a01      	ldr	r2, [sp, #4]
 8010e56:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8010e5a:	2800      	cmp	r0, #0
 8010e5c:	d1de      	bne.n	8010e1c <rcl_init+0x100>
 8010e5e:	240a      	movs	r4, #10
 8010e60:	4638      	mov	r0, r7
 8010e62:	f7ff fefb 	bl	8010c5c <__cleanup_context>
 8010e66:	4620      	mov	r0, r4
 8010e68:	b027      	add	sp, #156	; 0x9c
 8010e6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e6e:	2900      	cmp	r1, #0
 8010e70:	f43f af6d 	beq.w	8010d4e <rcl_init+0x32>
 8010e74:	240b      	movs	r4, #11
 8010e76:	4620      	mov	r0, r4
 8010e78:	b027      	add	sp, #156	; 0x9c
 8010e7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e7e:	2464      	movs	r4, #100	; 0x64
 8010e80:	4620      	mov	r0, r4
 8010e82:	b027      	add	sp, #156	; 0x9c
 8010e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e88:	f8d7 9000 	ldr.w	r9, [r7]
 8010e8c:	493f      	ldr	r1, [pc, #252]	; (8010f8c <rcl_init+0x270>)
 8010e8e:	680b      	ldr	r3, [r1, #0]
 8010e90:	3301      	adds	r3, #1
 8010e92:	d04c      	beq.n	8010f2e <rcl_init+0x212>
 8010e94:	461a      	mov	r2, r3
 8010e96:	2000      	movs	r0, #0
 8010e98:	600b      	str	r3, [r1, #0]
 8010e9a:	f8d9 5014 	ldr.w	r5, [r9, #20]
 8010e9e:	607b      	str	r3, [r7, #4]
 8010ea0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010ea2:	3301      	adds	r3, #1
 8010ea4:	e9c5 2006 	strd	r2, r0, [r5, #24]
 8010ea8:	d05d      	beq.n	8010f66 <rcl_init+0x24a>
 8010eaa:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d044      	beq.n	8010f3c <rcl_init+0x220>
 8010eb2:	2b01      	cmp	r3, #1
 8010eb4:	d04e      	beq.n	8010f54 <rcl_init+0x238>
 8010eb6:	f8d8 3000 	ldr.w	r3, [r8]
 8010eba:	f105 0634 	add.w	r6, r5, #52	; 0x34
 8010ebe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	d05a      	beq.n	8010f7c <rcl_init+0x260>
 8010ec6:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8010ec8:	b953      	cbnz	r3, 8010ee0 <rcl_init+0x1c4>
 8010eca:	f895 0034 	ldrb.w	r0, [r5, #52]	; 0x34
 8010ece:	2801      	cmp	r0, #1
 8010ed0:	d008      	beq.n	8010ee4 <rcl_init+0x1c8>
 8010ed2:	a921      	add	r1, sp, #132	; 0x84
 8010ed4:	4630      	mov	r0, r6
 8010ed6:	f008 f8e7 	bl	80190a8 <rcl_get_discovery_static_peers>
 8010eda:	4604      	mov	r4, r0
 8010edc:	2800      	cmp	r0, #0
 8010ede:	d1bf      	bne.n	8010e60 <rcl_init+0x144>
 8010ee0:	f895 0034 	ldrb.w	r0, [r5, #52]	; 0x34
 8010ee4:	f008 f8d6 	bl	8019094 <rcl_automatic_discovery_range_to_string>
 8010ee8:	683b      	ldr	r3, [r7, #0]
 8010eea:	aa20      	add	r2, sp, #128	; 0x80
 8010eec:	a91f      	add	r1, sp, #124	; 0x7c
 8010eee:	695b      	ldr	r3, [r3, #20]
 8010ef0:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8010ef2:	f001 f957 	bl	80121a4 <rcl_validate_enclave_name>
 8010ef6:	4604      	mov	r4, r0
 8010ef8:	2800      	cmp	r0, #0
 8010efa:	d1b1      	bne.n	8010e60 <rcl_init+0x144>
 8010efc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8010efe:	bb83      	cbnz	r3, 8010f62 <rcl_init+0x246>
 8010f00:	6839      	ldr	r1, [r7, #0]
 8010f02:	694b      	ldr	r3, [r1, #20]
 8010f04:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8010f08:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8010f0a:	f000 fc77 	bl	80117fc <rcl_get_security_options_from_environment>
 8010f0e:	4604      	mov	r4, r0
 8010f10:	2800      	cmp	r0, #0
 8010f12:	d1a5      	bne.n	8010e60 <rcl_init+0x144>
 8010f14:	6839      	ldr	r1, [r7, #0]
 8010f16:	6948      	ldr	r0, [r1, #20]
 8010f18:	3128      	adds	r1, #40	; 0x28
 8010f1a:	3018      	adds	r0, #24
 8010f1c:	f003 fac6 	bl	80144ac <rmw_init>
 8010f20:	4604      	mov	r4, r0
 8010f22:	2800      	cmp	r0, #0
 8010f24:	d0a7      	beq.n	8010e76 <rcl_init+0x15a>
 8010f26:	f7ff fe75 	bl	8010c14 <rcl_convert_rmw_ret_to_rcl_ret>
 8010f2a:	4604      	mov	r4, r0
 8010f2c:	e798      	b.n	8010e60 <rcl_init+0x144>
 8010f2e:	2201      	movs	r2, #1
 8010f30:	4618      	mov	r0, r3
 8010f32:	600a      	str	r2, [r1, #0]
 8010f34:	4613      	mov	r3, r2
 8010f36:	e7b0      	b.n	8010e9a <rcl_init+0x17e>
 8010f38:	240a      	movs	r4, #10
 8010f3a:	e79c      	b.n	8010e76 <rcl_init+0x15a>
 8010f3c:	f105 0030 	add.w	r0, r5, #48	; 0x30
 8010f40:	f000 f90c 	bl	801115c <rcl_get_localhost_only>
 8010f44:	4604      	mov	r4, r0
 8010f46:	2800      	cmp	r0, #0
 8010f48:	d18a      	bne.n	8010e60 <rcl_init+0x144>
 8010f4a:	683a      	ldr	r2, [r7, #0]
 8010f4c:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8010f50:	6955      	ldr	r5, [r2, #20]
 8010f52:	e7ae      	b.n	8010eb2 <rcl_init+0x196>
 8010f54:	2302      	movs	r3, #2
 8010f56:	2200      	movs	r2, #0
 8010f58:	4618      	mov	r0, r3
 8010f5a:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
 8010f5e:	63ea      	str	r2, [r5, #60]	; 0x3c
 8010f60:	e7c0      	b.n	8010ee4 <rcl_init+0x1c8>
 8010f62:	2401      	movs	r4, #1
 8010f64:	e77c      	b.n	8010e60 <rcl_init+0x144>
 8010f66:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8010f6a:	f008 f903 	bl	8019174 <rcl_get_default_domain_id>
 8010f6e:	4604      	mov	r4, r0
 8010f70:	2800      	cmp	r0, #0
 8010f72:	f47f af75 	bne.w	8010e60 <rcl_init+0x144>
 8010f76:	683b      	ldr	r3, [r7, #0]
 8010f78:	695d      	ldr	r5, [r3, #20]
 8010f7a:	e796      	b.n	8010eaa <rcl_init+0x18e>
 8010f7c:	4630      	mov	r0, r6
 8010f7e:	f008 f847 	bl	8019010 <rcl_get_automatic_discovery_range>
 8010f82:	4604      	mov	r4, r0
 8010f84:	2800      	cmp	r0, #0
 8010f86:	d09e      	beq.n	8010ec6 <rcl_init+0x1aa>
 8010f88:	e76a      	b.n	8010e60 <rcl_init+0x144>
 8010f8a:	bf00      	nop
 8010f8c:	2000bd68 	.word	0x2000bd68

08010f90 <rcl_get_zero_initialized_init_options>:
 8010f90:	2000      	movs	r0, #0
 8010f92:	4770      	bx	lr

08010f94 <rcl_init_options_init>:
 8010f94:	b084      	sub	sp, #16
 8010f96:	b570      	push	{r4, r5, r6, lr}
 8010f98:	b09e      	sub	sp, #120	; 0x78
 8010f9a:	ad23      	add	r5, sp, #140	; 0x8c
 8010f9c:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8010fa0:	2800      	cmp	r0, #0
 8010fa2:	d046      	beq.n	8011032 <rcl_init_options_init+0x9e>
 8010fa4:	6803      	ldr	r3, [r0, #0]
 8010fa6:	4604      	mov	r4, r0
 8010fa8:	b133      	cbz	r3, 8010fb8 <rcl_init_options_init+0x24>
 8010faa:	2564      	movs	r5, #100	; 0x64
 8010fac:	4628      	mov	r0, r5
 8010fae:	b01e      	add	sp, #120	; 0x78
 8010fb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010fb4:	b004      	add	sp, #16
 8010fb6:	4770      	bx	lr
 8010fb8:	4628      	mov	r0, r5
 8010fba:	f7fc fec5 	bl	800dd48 <rcutils_allocator_is_valid>
 8010fbe:	2800      	cmp	r0, #0
 8010fc0:	d037      	beq.n	8011032 <rcl_init_options_init+0x9e>
 8010fc2:	46ae      	mov	lr, r5
 8010fc4:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
 8010fc8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010fcc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010fd0:	f8de 3000 	ldr.w	r3, [lr]
 8010fd4:	2070      	movs	r0, #112	; 0x70
 8010fd6:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8010fd8:	f8cc 3000 	str.w	r3, [ip]
 8010fdc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010fde:	4798      	blx	r3
 8010fe0:	4606      	mov	r6, r0
 8010fe2:	6020      	str	r0, [r4, #0]
 8010fe4:	b338      	cbz	r0, 8011036 <rcl_init_options_init+0xa2>
 8010fe6:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
 8010fea:	4686      	mov	lr, r0
 8010fec:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010ff0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010ff4:	f8dc 3000 	ldr.w	r3, [ip]
 8010ff8:	a802      	add	r0, sp, #8
 8010ffa:	f8ce 3000 	str.w	r3, [lr]
 8010ffe:	f002 ffaf 	bl	8013f60 <rmw_get_zero_initialized_init_options>
 8011002:	2258      	movs	r2, #88	; 0x58
 8011004:	a902      	add	r1, sp, #8
 8011006:	f106 0018 	add.w	r0, r6, #24
 801100a:	f00a fb30 	bl	801b66e <memcpy>
 801100e:	ab26      	add	r3, sp, #152	; 0x98
 8011010:	6826      	ldr	r6, [r4, #0]
 8011012:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011016:	e88d 0003 	stmia.w	sp, {r0, r1}
 801101a:	f106 0018 	add.w	r0, r6, #24
 801101e:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8011022:	f003 f973 	bl	801430c <rmw_init_options_init>
 8011026:	4605      	mov	r5, r0
 8011028:	b938      	cbnz	r0, 801103a <rcl_init_options_init+0xa6>
 801102a:	6823      	ldr	r3, [r4, #0]
 801102c:	f883 0034 	strb.w	r0, [r3, #52]	; 0x34
 8011030:	e7bc      	b.n	8010fac <rcl_init_options_init+0x18>
 8011032:	250b      	movs	r5, #11
 8011034:	e7ba      	b.n	8010fac <rcl_init_options_init+0x18>
 8011036:	250a      	movs	r5, #10
 8011038:	e7b8      	b.n	8010fac <rcl_init_options_init+0x18>
 801103a:	9927      	ldr	r1, [sp, #156]	; 0x9c
 801103c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801103e:	6820      	ldr	r0, [r4, #0]
 8011040:	4798      	blx	r3
 8011042:	4628      	mov	r0, r5
 8011044:	f7ff fde6 	bl	8010c14 <rcl_convert_rmw_ret_to_rcl_ret>
 8011048:	4605      	mov	r5, r0
 801104a:	e7af      	b.n	8010fac <rcl_init_options_init+0x18>

0801104c <rcl_init_options_fini>:
 801104c:	b530      	push	{r4, r5, lr}
 801104e:	b087      	sub	sp, #28
 8011050:	b1f0      	cbz	r0, 8011090 <rcl_init_options_fini+0x44>
 8011052:	6803      	ldr	r3, [r0, #0]
 8011054:	4604      	mov	r4, r0
 8011056:	b1db      	cbz	r3, 8011090 <rcl_init_options_fini+0x44>
 8011058:	469c      	mov	ip, r3
 801105a:	f10d 0e04 	add.w	lr, sp, #4
 801105e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011062:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011066:	f8dc 3000 	ldr.w	r3, [ip]
 801106a:	a801      	add	r0, sp, #4
 801106c:	f8ce 3000 	str.w	r3, [lr]
 8011070:	f7fc fe6a 	bl	800dd48 <rcutils_allocator_is_valid>
 8011074:	b160      	cbz	r0, 8011090 <rcl_init_options_fini+0x44>
 8011076:	6820      	ldr	r0, [r4, #0]
 8011078:	3018      	adds	r0, #24
 801107a:	f003 f9e1 	bl	8014440 <rmw_init_options_fini>
 801107e:	4605      	mov	r5, r0
 8011080:	b950      	cbnz	r0, 8011098 <rcl_init_options_fini+0x4c>
 8011082:	6820      	ldr	r0, [r4, #0]
 8011084:	9b02      	ldr	r3, [sp, #8]
 8011086:	9905      	ldr	r1, [sp, #20]
 8011088:	4798      	blx	r3
 801108a:	4628      	mov	r0, r5
 801108c:	b007      	add	sp, #28
 801108e:	bd30      	pop	{r4, r5, pc}
 8011090:	250b      	movs	r5, #11
 8011092:	4628      	mov	r0, r5
 8011094:	b007      	add	sp, #28
 8011096:	bd30      	pop	{r4, r5, pc}
 8011098:	f7ff fdbc 	bl	8010c14 <rcl_convert_rmw_ret_to_rcl_ret>
 801109c:	4605      	mov	r5, r0
 801109e:	e7f8      	b.n	8011092 <rcl_init_options_fini+0x46>

080110a0 <rcl_init_options_copy>:
 80110a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80110a2:	b09d      	sub	sp, #116	; 0x74
 80110a4:	2800      	cmp	r0, #0
 80110a6:	d04d      	beq.n	8011144 <rcl_init_options_copy+0xa4>
 80110a8:	4604      	mov	r4, r0
 80110aa:	6800      	ldr	r0, [r0, #0]
 80110ac:	2800      	cmp	r0, #0
 80110ae:	d049      	beq.n	8011144 <rcl_init_options_copy+0xa4>
 80110b0:	460d      	mov	r5, r1
 80110b2:	f7fc fe49 	bl	800dd48 <rcutils_allocator_is_valid>
 80110b6:	2d00      	cmp	r5, #0
 80110b8:	d044      	beq.n	8011144 <rcl_init_options_copy+0xa4>
 80110ba:	f080 0001 	eor.w	r0, r0, #1
 80110be:	b2c0      	uxtb	r0, r0
 80110c0:	2800      	cmp	r0, #0
 80110c2:	d13f      	bne.n	8011144 <rcl_init_options_copy+0xa4>
 80110c4:	682b      	ldr	r3, [r5, #0]
 80110c6:	b11b      	cbz	r3, 80110d0 <rcl_init_options_copy+0x30>
 80110c8:	2464      	movs	r4, #100	; 0x64
 80110ca:	4620      	mov	r0, r4
 80110cc:	b01d      	add	sp, #116	; 0x74
 80110ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80110d0:	6826      	ldr	r6, [r4, #0]
 80110d2:	f10d 0c5c 	add.w	ip, sp, #92	; 0x5c
 80110d6:	46b6      	mov	lr, r6
 80110d8:	6837      	ldr	r7, [r6, #0]
 80110da:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80110de:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80110e2:	f8de 3000 	ldr.w	r3, [lr]
 80110e6:	2070      	movs	r0, #112	; 0x70
 80110e8:	4619      	mov	r1, r3
 80110ea:	f8cc 3000 	str.w	r3, [ip]
 80110ee:	47b8      	blx	r7
 80110f0:	4606      	mov	r6, r0
 80110f2:	6028      	str	r0, [r5, #0]
 80110f4:	b350      	cbz	r0, 801114c <rcl_init_options_copy+0xac>
 80110f6:	f10d 0c5c 	add.w	ip, sp, #92	; 0x5c
 80110fa:	4686      	mov	lr, r0
 80110fc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011100:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011104:	f8dc 3000 	ldr.w	r3, [ip]
 8011108:	4668      	mov	r0, sp
 801110a:	f8ce 3000 	str.w	r3, [lr]
 801110e:	f002 ff27 	bl	8013f60 <rmw_get_zero_initialized_init_options>
 8011112:	2258      	movs	r2, #88	; 0x58
 8011114:	4669      	mov	r1, sp
 8011116:	f106 0018 	add.w	r0, r6, #24
 801111a:	f00a faa8 	bl	801b66e <memcpy>
 801111e:	6820      	ldr	r0, [r4, #0]
 8011120:	6829      	ldr	r1, [r5, #0]
 8011122:	3018      	adds	r0, #24
 8011124:	3118      	adds	r1, #24
 8011126:	f003 f959 	bl	80143dc <rmw_init_options_copy>
 801112a:	4604      	mov	r4, r0
 801112c:	2800      	cmp	r0, #0
 801112e:	d0cc      	beq.n	80110ca <rcl_init_options_copy+0x2a>
 8011130:	f7fc fe18 	bl	800dd64 <rcutils_get_error_string>
 8011134:	f7fc fe2c 	bl	800dd90 <rcutils_reset_error>
 8011138:	4628      	mov	r0, r5
 801113a:	f7ff ff87 	bl	801104c <rcl_init_options_fini>
 801113e:	b138      	cbz	r0, 8011150 <rcl_init_options_copy+0xb0>
 8011140:	4604      	mov	r4, r0
 8011142:	e7c2      	b.n	80110ca <rcl_init_options_copy+0x2a>
 8011144:	240b      	movs	r4, #11
 8011146:	4620      	mov	r0, r4
 8011148:	b01d      	add	sp, #116	; 0x74
 801114a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801114c:	240a      	movs	r4, #10
 801114e:	e7bc      	b.n	80110ca <rcl_init_options_copy+0x2a>
 8011150:	4620      	mov	r0, r4
 8011152:	b01d      	add	sp, #116	; 0x74
 8011154:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8011158:	f7ff bd5c 	b.w	8010c14 <rcl_convert_rmw_ret_to_rcl_ret>

0801115c <rcl_get_localhost_only>:
 801115c:	b510      	push	{r4, lr}
 801115e:	2300      	movs	r3, #0
 8011160:	b082      	sub	sp, #8
 8011162:	9301      	str	r3, [sp, #4]
 8011164:	b1c0      	cbz	r0, 8011198 <rcl_get_localhost_only+0x3c>
 8011166:	4604      	mov	r4, r0
 8011168:	a901      	add	r1, sp, #4
 801116a:	480d      	ldr	r0, [pc, #52]	; (80111a0 <rcl_get_localhost_only+0x44>)
 801116c:	f002 fc34 	bl	80139d8 <rcutils_get_env>
 8011170:	b110      	cbz	r0, 8011178 <rcl_get_localhost_only+0x1c>
 8011172:	2001      	movs	r0, #1
 8011174:	b002      	add	sp, #8
 8011176:	bd10      	pop	{r4, pc}
 8011178:	9b01      	ldr	r3, [sp, #4]
 801117a:	b10b      	cbz	r3, 8011180 <rcl_get_localhost_only+0x24>
 801117c:	781b      	ldrb	r3, [r3, #0]
 801117e:	b923      	cbnz	r3, 801118a <rcl_get_localhost_only+0x2e>
 8011180:	2300      	movs	r3, #0
 8011182:	4618      	mov	r0, r3
 8011184:	7023      	strb	r3, [r4, #0]
 8011186:	b002      	add	sp, #8
 8011188:	bd10      	pop	{r4, pc}
 801118a:	2b31      	cmp	r3, #49	; 0x31
 801118c:	bf0c      	ite	eq
 801118e:	2301      	moveq	r3, #1
 8011190:	2302      	movne	r3, #2
 8011192:	7023      	strb	r3, [r4, #0]
 8011194:	b002      	add	sp, #8
 8011196:	bd10      	pop	{r4, pc}
 8011198:	200b      	movs	r0, #11
 801119a:	b002      	add	sp, #8
 801119c:	bd10      	pop	{r4, pc}
 801119e:	bf00      	nop
 80111a0:	0801d260 	.word	0x0801d260

080111a4 <rcl_get_zero_initialized_node>:
 80111a4:	4a03      	ldr	r2, [pc, #12]	; (80111b4 <rcl_get_zero_initialized_node+0x10>)
 80111a6:	4603      	mov	r3, r0
 80111a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80111ac:	e883 0003 	stmia.w	r3, {r0, r1}
 80111b0:	4618      	mov	r0, r3
 80111b2:	4770      	bx	lr
 80111b4:	0801d290 	.word	0x0801d290

080111b8 <rcl_node_init>:
 80111b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111bc:	b0ab      	sub	sp, #172	; 0xac
 80111be:	4604      	mov	r4, r0
 80111c0:	460e      	mov	r6, r1
 80111c2:	4615      	mov	r5, r2
 80111c4:	f8dd 80d0 	ldr.w	r8, [sp, #208]	; 0xd0
 80111c8:	a825      	add	r0, sp, #148	; 0x94
 80111ca:	461f      	mov	r7, r3
 80111cc:	f008 f9f8 	bl	80195c0 <rcl_guard_condition_get_default_options>
 80111d0:	f1b8 0f00 	cmp.w	r8, #0
 80111d4:	f000 80f3 	beq.w	80113be <rcl_node_init+0x206>
 80111d8:	4640      	mov	r0, r8
 80111da:	f7fc fdb5 	bl	800dd48 <rcutils_allocator_is_valid>
 80111de:	2d00      	cmp	r5, #0
 80111e0:	bf18      	it	ne
 80111e2:	2c00      	cmpne	r4, #0
 80111e4:	f080 0001 	eor.w	r0, r0, #1
 80111e8:	bf0c      	ite	eq
 80111ea:	f04f 0c01 	moveq.w	ip, #1
 80111ee:	f04f 0c00 	movne.w	ip, #0
 80111f2:	2e00      	cmp	r6, #0
 80111f4:	bf08      	it	eq
 80111f6:	f04c 0c01 	orreq.w	ip, ip, #1
 80111fa:	ea4c 0c00 	orr.w	ip, ip, r0
 80111fe:	f01c 09ff 	ands.w	r9, ip, #255	; 0xff
 8011202:	f040 80dc 	bne.w	80113be <rcl_node_init+0x206>
 8011206:	f8d4 a004 	ldr.w	sl, [r4, #4]
 801120a:	f1ba 0f00 	cmp.w	sl, #0
 801120e:	f040 80fc 	bne.w	801140a <rcl_node_init+0x252>
 8011212:	2f00      	cmp	r7, #0
 8011214:	f000 80d3 	beq.w	80113be <rcl_node_init+0x206>
 8011218:	4638      	mov	r0, r7
 801121a:	f7ff fd19 	bl	8010c50 <rcl_context_is_valid>
 801121e:	4683      	mov	fp, r0
 8011220:	2800      	cmp	r0, #0
 8011222:	f000 80d2 	beq.w	80113ca <rcl_node_init+0x212>
 8011226:	4652      	mov	r2, sl
 8011228:	4630      	mov	r0, r6
 801122a:	a924      	add	r1, sp, #144	; 0x90
 801122c:	f8cd a090 	str.w	sl, [sp, #144]	; 0x90
 8011230:	f002 ffa4 	bl	801417c <rmw_validate_node_name>
 8011234:	4682      	mov	sl, r0
 8011236:	2800      	cmp	r0, #0
 8011238:	f040 80c3 	bne.w	80113c2 <rcl_node_init+0x20a>
 801123c:	9824      	ldr	r0, [sp, #144]	; 0x90
 801123e:	2800      	cmp	r0, #0
 8011240:	f040 80f1 	bne.w	8011426 <rcl_node_init+0x26e>
 8011244:	4628      	mov	r0, r5
 8011246:	f7ef f85b 	bl	8000300 <strlen>
 801124a:	2800      	cmp	r0, #0
 801124c:	f040 80c0 	bne.w	80113d0 <rcl_node_init+0x218>
 8011250:	4d79      	ldr	r5, [pc, #484]	; (8011438 <rcl_node_init+0x280>)
 8011252:	a924      	add	r1, sp, #144	; 0x90
 8011254:	2200      	movs	r2, #0
 8011256:	4628      	mov	r0, r5
 8011258:	f002 ff72 	bl	8014140 <rmw_validate_namespace>
 801125c:	4682      	mov	sl, r0
 801125e:	2800      	cmp	r0, #0
 8011260:	f040 80af 	bne.w	80113c2 <rcl_node_init+0x20a>
 8011264:	9824      	ldr	r0, [sp, #144]	; 0x90
 8011266:	2800      	cmp	r0, #0
 8011268:	f040 80d5 	bne.w	8011416 <rcl_node_init+0x25e>
 801126c:	f8d8 3000 	ldr.w	r3, [r8]
 8011270:	2080      	movs	r0, #128	; 0x80
 8011272:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8011276:	4798      	blx	r3
 8011278:	4682      	mov	sl, r0
 801127a:	6060      	str	r0, [r4, #4]
 801127c:	2800      	cmp	r0, #0
 801127e:	f000 80cf 	beq.w	8011420 <rcl_node_init+0x268>
 8011282:	2200      	movs	r2, #0
 8011284:	2300      	movs	r3, #0
 8011286:	a808      	add	r0, sp, #32
 8011288:	e9ca 231c 	strd	r2, r3, [sl, #112]	; 0x70
 801128c:	e9ca 231e 	strd	r2, r3, [sl, #120]	; 0x78
 8011290:	f000 f902 	bl	8011498 <rcl_node_get_default_options>
 8011294:	a908      	add	r1, sp, #32
 8011296:	4650      	mov	r0, sl
 8011298:	2270      	movs	r2, #112	; 0x70
 801129a:	f00a f9e8 	bl	801b66e <memcpy>
 801129e:	6861      	ldr	r1, [r4, #4]
 80112a0:	4640      	mov	r0, r8
 80112a2:	6027      	str	r7, [r4, #0]
 80112a4:	f000 f906 	bl	80114b4 <rcl_node_options_copy>
 80112a8:	2800      	cmp	r0, #0
 80112aa:	d158      	bne.n	801135e <rcl_node_init+0x1a6>
 80112ac:	4628      	mov	r0, r5
 80112ae:	f7ef f827 	bl	8000300 <strlen>
 80112b2:	4428      	add	r0, r5
 80112b4:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 80112b8:	e9cd 5603 	strd	r5, r6, [sp, #12]
 80112bc:	2b2f      	cmp	r3, #47	; 0x2f
 80112be:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80112c2:	9300      	str	r3, [sp, #0]
 80112c4:	bf0c      	ite	eq
 80112c6:	4b5d      	ldreq	r3, [pc, #372]	; (801143c <rcl_node_init+0x284>)
 80112c8:	4b5d      	ldrne	r3, [pc, #372]	; (8011440 <rcl_node_init+0x288>)
 80112ca:	9302      	str	r3, [sp, #8]
 80112cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80112d0:	9301      	str	r3, [sp, #4]
 80112d2:	f8d4 a004 	ldr.w	sl, [r4, #4]
 80112d6:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 80112da:	f002 fba5 	bl	8013a28 <rcutils_format_string_limit>
 80112de:	6823      	ldr	r3, [r4, #0]
 80112e0:	f8ca 007c 	str.w	r0, [sl, #124]	; 0x7c
 80112e4:	4631      	mov	r1, r6
 80112e6:	6818      	ldr	r0, [r3, #0]
 80112e8:	462a      	mov	r2, r5
 80112ea:	6866      	ldr	r6, [r4, #4]
 80112ec:	3028      	adds	r0, #40	; 0x28
 80112ee:	f003 fac5 	bl	801487c <rmw_create_node>
 80112f2:	6863      	ldr	r3, [r4, #4]
 80112f4:	6730      	str	r0, [r6, #112]	; 0x70
 80112f6:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80112f8:	2800      	cmp	r0, #0
 80112fa:	d032      	beq.n	8011362 <rcl_node_init+0x1aa>
 80112fc:	f003 fb4e 	bl	801499c <rmw_node_get_graph_guard_condition>
 8011300:	4682      	mov	sl, r0
 8011302:	b360      	cbz	r0, 801135e <rcl_node_init+0x1a6>
 8011304:	f8d8 3000 	ldr.w	r3, [r8]
 8011308:	2008      	movs	r0, #8
 801130a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801130e:	6866      	ldr	r6, [r4, #4]
 8011310:	4798      	blx	r3
 8011312:	6863      	ldr	r3, [r4, #4]
 8011314:	6770      	str	r0, [r6, #116]	; 0x74
 8011316:	f8d3 b074 	ldr.w	fp, [r3, #116]	; 0x74
 801131a:	f1bb 0f00 	cmp.w	fp, #0
 801131e:	d020      	beq.n	8011362 <rcl_node_init+0x1aa>
 8011320:	a806      	add	r0, sp, #24
 8011322:	ae25      	add	r6, sp, #148	; 0x94
 8011324:	f008 f8c0 	bl	80194a8 <rcl_get_zero_initialized_guard_condition>
 8011328:	a806      	add	r0, sp, #24
 801132a:	6863      	ldr	r3, [r4, #4]
 801132c:	46c4      	mov	ip, r8
 801132e:	c803      	ldmia	r0, {r0, r1}
 8011330:	f8d3 e074 	ldr.w	lr, [r3, #116]	; 0x74
 8011334:	e88b 0003 	stmia.w	fp, {r0, r1}
 8011338:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801133c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801133e:	f8dc 3000 	ldr.w	r3, [ip]
 8011342:	6033      	str	r3, [r6, #0]
 8011344:	ab2a      	add	r3, sp, #168	; 0xa8
 8011346:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 801134a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801134e:	4651      	mov	r1, sl
 8011350:	463a      	mov	r2, r7
 8011352:	4670      	mov	r0, lr
 8011354:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8011356:	f008 f8b1 	bl	80194bc <rcl_guard_condition_init_from_rmw>
 801135a:	4682      	mov	sl, r0
 801135c:	b328      	cbz	r0, 80113aa <rcl_node_init+0x1f2>
 801135e:	6863      	ldr	r3, [r4, #4]
 8011360:	b1f3      	cbz	r3, 80113a0 <rcl_node_init+0x1e8>
 8011362:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8011364:	b128      	cbz	r0, 8011372 <rcl_node_init+0x1ba>
 8011366:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801136a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801136e:	4798      	blx	r3
 8011370:	6863      	ldr	r3, [r4, #4]
 8011372:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8011374:	b110      	cbz	r0, 801137c <rcl_node_init+0x1c4>
 8011376:	f003 fa93 	bl	80148a0 <rmw_destroy_node>
 801137a:	6863      	ldr	r3, [r4, #4]
 801137c:	6f58      	ldr	r0, [r3, #116]	; 0x74
 801137e:	b148      	cbz	r0, 8011394 <rcl_node_init+0x1dc>
 8011380:	f008 f8f8 	bl	8019574 <rcl_guard_condition_fini>
 8011384:	6863      	ldr	r3, [r4, #4]
 8011386:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801138a:	6f58      	ldr	r0, [r3, #116]	; 0x74
 801138c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011390:	4798      	blx	r3
 8011392:	6863      	ldr	r3, [r4, #4]
 8011394:	4618      	mov	r0, r3
 8011396:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801139a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801139e:	4798      	blx	r3
 80113a0:	2300      	movs	r3, #0
 80113a2:	f04f 0a01 	mov.w	sl, #1
 80113a6:	e9c4 3300 	strd	r3, r3, [r4]
 80113aa:	f1b9 0f00 	cmp.w	r9, #0
 80113ae:	d008      	beq.n	80113c2 <rcl_node_init+0x20a>
 80113b0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80113b4:	4628      	mov	r0, r5
 80113b6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80113ba:	4798      	blx	r3
 80113bc:	e001      	b.n	80113c2 <rcl_node_init+0x20a>
 80113be:	f04f 0a0b 	mov.w	sl, #11
 80113c2:	4650      	mov	r0, sl
 80113c4:	b02b      	add	sp, #172	; 0xac
 80113c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113ca:	f04f 0a65 	mov.w	sl, #101	; 0x65
 80113ce:	e7f8      	b.n	80113c2 <rcl_node_init+0x20a>
 80113d0:	782b      	ldrb	r3, [r5, #0]
 80113d2:	2b2f      	cmp	r3, #47	; 0x2f
 80113d4:	f43f af3d 	beq.w	8011252 <rcl_node_init+0x9a>
 80113d8:	9503      	str	r5, [sp, #12]
 80113da:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80113de:	9300      	str	r3, [sp, #0]
 80113e0:	4b18      	ldr	r3, [pc, #96]	; (8011444 <rcl_node_init+0x28c>)
 80113e2:	9302      	str	r3, [sp, #8]
 80113e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80113e8:	9301      	str	r3, [sp, #4]
 80113ea:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 80113ee:	f002 fb1b 	bl	8013a28 <rcutils_format_string_limit>
 80113f2:	4605      	mov	r5, r0
 80113f4:	b1e0      	cbz	r0, 8011430 <rcl_node_init+0x278>
 80113f6:	2200      	movs	r2, #0
 80113f8:	a924      	add	r1, sp, #144	; 0x90
 80113fa:	9224      	str	r2, [sp, #144]	; 0x90
 80113fc:	f002 fea0 	bl	8014140 <rmw_validate_namespace>
 8011400:	4682      	mov	sl, r0
 8011402:	2800      	cmp	r0, #0
 8011404:	d1d4      	bne.n	80113b0 <rcl_node_init+0x1f8>
 8011406:	46d9      	mov	r9, fp
 8011408:	e72c      	b.n	8011264 <rcl_node_init+0xac>
 801140a:	f04f 0a64 	mov.w	sl, #100	; 0x64
 801140e:	4650      	mov	r0, sl
 8011410:	b02b      	add	sp, #172	; 0xac
 8011412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011416:	f04f 0aca 	mov.w	sl, #202	; 0xca
 801141a:	f002 fea3 	bl	8014164 <rmw_namespace_validation_result_string>
 801141e:	e7c4      	b.n	80113aa <rcl_node_init+0x1f2>
 8011420:	f04f 0a0a 	mov.w	sl, #10
 8011424:	e7c1      	b.n	80113aa <rcl_node_init+0x1f2>
 8011426:	f04f 0ac9 	mov.w	sl, #201	; 0xc9
 801142a:	f002 fefb 	bl	8014224 <rmw_node_name_validation_result_string>
 801142e:	e7c8      	b.n	80113c2 <rcl_node_init+0x20a>
 8011430:	f04f 0a0a 	mov.w	sl, #10
 8011434:	e7c5      	b.n	80113c2 <rcl_node_init+0x20a>
 8011436:	bf00      	nop
 8011438:	0801d278 	.word	0x0801d278
 801143c:	0801d280 	.word	0x0801d280
 8011440:	0801d288 	.word	0x0801d288
 8011444:	0801d27c 	.word	0x0801d27c

08011448 <rcl_node_is_valid>:
 8011448:	b130      	cbz	r0, 8011458 <rcl_node_is_valid+0x10>
 801144a:	6843      	ldr	r3, [r0, #4]
 801144c:	b123      	cbz	r3, 8011458 <rcl_node_is_valid+0x10>
 801144e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011450:	b113      	cbz	r3, 8011458 <rcl_node_is_valid+0x10>
 8011452:	6800      	ldr	r0, [r0, #0]
 8011454:	f7ff bbfc 	b.w	8010c50 <rcl_context_is_valid>
 8011458:	2000      	movs	r0, #0
 801145a:	4770      	bx	lr

0801145c <rcl_node_get_name>:
 801145c:	b120      	cbz	r0, 8011468 <rcl_node_get_name+0xc>
 801145e:	6840      	ldr	r0, [r0, #4]
 8011460:	b110      	cbz	r0, 8011468 <rcl_node_get_name+0xc>
 8011462:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8011464:	b100      	cbz	r0, 8011468 <rcl_node_get_name+0xc>
 8011466:	6880      	ldr	r0, [r0, #8]
 8011468:	4770      	bx	lr
 801146a:	bf00      	nop

0801146c <rcl_node_get_namespace>:
 801146c:	b120      	cbz	r0, 8011478 <rcl_node_get_namespace+0xc>
 801146e:	6840      	ldr	r0, [r0, #4]
 8011470:	b110      	cbz	r0, 8011478 <rcl_node_get_namespace+0xc>
 8011472:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8011474:	b100      	cbz	r0, 8011478 <rcl_node_get_namespace+0xc>
 8011476:	68c0      	ldr	r0, [r0, #12]
 8011478:	4770      	bx	lr
 801147a:	bf00      	nop

0801147c <rcl_node_get_options>:
 801147c:	b128      	cbz	r0, 801148a <rcl_node_get_options+0xe>
 801147e:	6840      	ldr	r0, [r0, #4]
 8011480:	b118      	cbz	r0, 801148a <rcl_node_get_options+0xe>
 8011482:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8011484:	2b00      	cmp	r3, #0
 8011486:	bf08      	it	eq
 8011488:	2000      	moveq	r0, #0
 801148a:	4770      	bx	lr

0801148c <rcl_node_get_rmw_handle>:
 801148c:	b110      	cbz	r0, 8011494 <rcl_node_get_rmw_handle+0x8>
 801148e:	6840      	ldr	r0, [r0, #4]
 8011490:	b100      	cbz	r0, 8011494 <rcl_node_get_rmw_handle+0x8>
 8011492:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8011494:	4770      	bx	lr
 8011496:	bf00      	nop

08011498 <rcl_node_get_default_options>:
 8011498:	b510      	push	{r4, lr}
 801149a:	4604      	mov	r4, r0
 801149c:	2270      	movs	r2, #112	; 0x70
 801149e:	2100      	movs	r1, #0
 80114a0:	f009 ff70 	bl	801b384 <memset>
 80114a4:	4620      	mov	r0, r4
 80114a6:	f7fc fc41 	bl	800dd2c <rcutils_get_default_allocator>
 80114aa:	2301      	movs	r3, #1
 80114ac:	4620      	mov	r0, r4
 80114ae:	7523      	strb	r3, [r4, #20]
 80114b0:	bd10      	pop	{r4, pc}
 80114b2:	bf00      	nop

080114b4 <rcl_node_options_copy>:
 80114b4:	2800      	cmp	r0, #0
 80114b6:	bf18      	it	ne
 80114b8:	4288      	cmpne	r0, r1
 80114ba:	d01b      	beq.n	80114f4 <rcl_node_options_copy+0x40>
 80114bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80114be:	fab1 f681 	clz	r6, r1
 80114c2:	460c      	mov	r4, r1
 80114c4:	0976      	lsrs	r6, r6, #5
 80114c6:	b199      	cbz	r1, 80114f0 <rcl_node_options_copy+0x3c>
 80114c8:	4605      	mov	r5, r0
 80114ca:	8a87      	ldrh	r7, [r0, #20]
 80114cc:	4684      	mov	ip, r0
 80114ce:	468e      	mov	lr, r1
 80114d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80114d2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80114d6:	682b      	ldr	r3, [r5, #0]
 80114d8:	2250      	movs	r2, #80	; 0x50
 80114da:	f10c 0118 	add.w	r1, ip, #24
 80114de:	f104 0018 	add.w	r0, r4, #24
 80114e2:	f8ce 3000 	str.w	r3, [lr]
 80114e6:	82a7      	strh	r7, [r4, #20]
 80114e8:	f00a f8c1 	bl	801b66e <memcpy>
 80114ec:	4630      	mov	r0, r6
 80114ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80114f0:	200b      	movs	r0, #11
 80114f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80114f4:	200b      	movs	r0, #11
 80114f6:	4770      	bx	lr

080114f8 <rcl_node_resolve_name>:
 80114f8:	b082      	sub	sp, #8
 80114fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114fe:	b091      	sub	sp, #68	; 0x44
 8011500:	ac1a      	add	r4, sp, #104	; 0x68
 8011502:	f89d 807c 	ldrb.w	r8, [sp, #124]	; 0x7c
 8011506:	e884 000c 	stmia.w	r4, {r2, r3}
 801150a:	2800      	cmp	r0, #0
 801150c:	d03d      	beq.n	801158a <rcl_node_resolve_name+0x92>
 801150e:	460c      	mov	r4, r1
 8011510:	4605      	mov	r5, r0
 8011512:	f7ff ffb3 	bl	801147c <rcl_node_get_options>
 8011516:	2800      	cmp	r0, #0
 8011518:	d03a      	beq.n	8011590 <rcl_node_resolve_name+0x98>
 801151a:	4628      	mov	r0, r5
 801151c:	f7ff ff9e 	bl	801145c <rcl_node_get_name>
 8011520:	4606      	mov	r6, r0
 8011522:	4628      	mov	r0, r5
 8011524:	ad0b      	add	r5, sp, #44	; 0x2c
 8011526:	f7ff ffa1 	bl	801146c <rcl_node_get_namespace>
 801152a:	f10d 0e68 	add.w	lr, sp, #104	; 0x68
 801152e:	4607      	mov	r7, r0
 8011530:	46ac      	mov	ip, r5
 8011532:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011536:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801153a:	f8de 3000 	ldr.w	r3, [lr]
 801153e:	f8cc 3000 	str.w	r3, [ip]
 8011542:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011544:	b30b      	cbz	r3, 801158a <rcl_node_resolve_name+0x92>
 8011546:	4689      	mov	r9, r1
 8011548:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 801154c:	f002 fbee 	bl	8013d2c <rcutils_get_zero_initialized_string_map>
 8011550:	ab10      	add	r3, sp, #64	; 0x40
 8011552:	9008      	str	r0, [sp, #32]
 8011554:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8011558:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801155c:	2100      	movs	r1, #0
 801155e:	a808      	add	r0, sp, #32
 8011560:	e895 000c 	ldmia.w	r5, {r2, r3}
 8011564:	f002 fc34 	bl	8013dd0 <rcutils_string_map_init>
 8011568:	4683      	mov	fp, r0
 801156a:	b1a0      	cbz	r0, 8011596 <rcl_node_resolve_name+0x9e>
 801156c:	f7fc fbfa 	bl	800dd64 <rcutils_get_error_string>
 8011570:	f7fc fc0e 	bl	800dd90 <rcutils_reset_error>
 8011574:	f1bb 0f0a 	cmp.w	fp, #10
 8011578:	bf18      	it	ne
 801157a:	f04f 0b01 	movne.w	fp, #1
 801157e:	4658      	mov	r0, fp
 8011580:	b011      	add	sp, #68	; 0x44
 8011582:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011586:	b002      	add	sp, #8
 8011588:	4770      	bx	lr
 801158a:	f04f 0b0b 	mov.w	fp, #11
 801158e:	e7f6      	b.n	801157e <rcl_node_resolve_name+0x86>
 8011590:	f04f 0b01 	mov.w	fp, #1
 8011594:	e7f3      	b.n	801157e <rcl_node_resolve_name+0x86>
 8011596:	9009      	str	r0, [sp, #36]	; 0x24
 8011598:	9007      	str	r0, [sp, #28]
 801159a:	a808      	add	r0, sp, #32
 801159c:	f007 ff7e 	bl	801949c <rcl_get_default_topic_name_substitutions>
 80115a0:	4683      	mov	fp, r0
 80115a2:	b180      	cbz	r0, 80115c6 <rcl_node_resolve_name+0xce>
 80115a4:	280a      	cmp	r0, #10
 80115a6:	a808      	add	r0, sp, #32
 80115a8:	bf18      	it	ne
 80115aa:	f04f 0b01 	movne.w	fp, #1
 80115ae:	f002 fc4d 	bl	8013e4c <rcutils_string_map_fini>
 80115b2:	4604      	mov	r4, r0
 80115b4:	2800      	cmp	r0, #0
 80115b6:	d15b      	bne.n	8011670 <rcl_node_resolve_name+0x178>
 80115b8:	4651      	mov	r1, sl
 80115ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 80115bc:	47c8      	blx	r9
 80115be:	4651      	mov	r1, sl
 80115c0:	4620      	mov	r0, r4
 80115c2:	47c8      	blx	r9
 80115c4:	e7db      	b.n	801157e <rcl_node_resolve_name+0x86>
 80115c6:	ab09      	add	r3, sp, #36	; 0x24
 80115c8:	46ec      	mov	ip, sp
 80115ca:	9305      	str	r3, [sp, #20]
 80115cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80115ce:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80115d2:	682b      	ldr	r3, [r5, #0]
 80115d4:	463a      	mov	r2, r7
 80115d6:	4631      	mov	r1, r6
 80115d8:	4620      	mov	r0, r4
 80115da:	f8cc 3000 	str.w	r3, [ip]
 80115de:	ab08      	add	r3, sp, #32
 80115e0:	f007 fdfc 	bl	80191dc <rcl_expand_topic_name>
 80115e4:	4683      	mov	fp, r0
 80115e6:	b9d8      	cbnz	r0, 8011620 <rcl_node_resolve_name+0x128>
 80115e8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80115ea:	4602      	mov	r2, r0
 80115ec:	9009      	str	r0, [sp, #36]	; 0x24
 80115ee:	a90a      	add	r1, sp, #40	; 0x28
 80115f0:	4620      	mov	r0, r4
 80115f2:	f002 fcd5 	bl	8013fa0 <rmw_validate_full_topic_name>
 80115f6:	bb50      	cbnz	r0, 801164e <rcl_node_resolve_name+0x156>
 80115f8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80115fa:	2d00      	cmp	r5, #0
 80115fc:	d140      	bne.n	8011680 <rcl_node_resolve_name+0x188>
 80115fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011600:	a808      	add	r0, sp, #32
 8011602:	601c      	str	r4, [r3, #0]
 8011604:	f002 fc22 	bl	8013e4c <rcutils_string_map_fini>
 8011608:	4683      	mov	fp, r0
 801160a:	2800      	cmp	r0, #0
 801160c:	d043      	beq.n	8011696 <rcl_node_resolve_name+0x19e>
 801160e:	f7fc fba9 	bl	800dd64 <rcutils_get_error_string>
 8011612:	46a8      	mov	r8, r5
 8011614:	f04f 0b01 	mov.w	fp, #1
 8011618:	462c      	mov	r4, r5
 801161a:	f7fc fbb9 	bl	800dd90 <rcutils_reset_error>
 801161e:	e00a      	b.n	8011636 <rcl_node_resolve_name+0x13e>
 8011620:	2867      	cmp	r0, #103	; 0x67
 8011622:	bf14      	ite	ne
 8011624:	f04f 0800 	movne.w	r8, #0
 8011628:	f008 0801 	andeq.w	r8, r8, #1
 801162c:	9c07      	ldr	r4, [sp, #28]
 801162e:	a808      	add	r0, sp, #32
 8011630:	f002 fc0c 	bl	8013e4c <rcutils_string_map_fini>
 8011634:	bb50      	cbnz	r0, 801168c <rcl_node_resolve_name+0x194>
 8011636:	4651      	mov	r1, sl
 8011638:	9809      	ldr	r0, [sp, #36]	; 0x24
 801163a:	47c8      	blx	r9
 801163c:	4651      	mov	r1, sl
 801163e:	4620      	mov	r0, r4
 8011640:	47c8      	blx	r9
 8011642:	f1b8 0f00 	cmp.w	r8, #0
 8011646:	bf18      	it	ne
 8011648:	f04f 0b68 	movne.w	fp, #104	; 0x68
 801164c:	e797      	b.n	801157e <rcl_node_resolve_name+0x86>
 801164e:	f7fc fb89 	bl	800dd64 <rcutils_get_error_string>
 8011652:	f7fc fb9d 	bl	800dd90 <rcutils_reset_error>
 8011656:	a808      	add	r0, sp, #32
 8011658:	f002 fbf8 	bl	8013e4c <rcutils_string_map_fini>
 801165c:	b998      	cbnz	r0, 8011686 <rcl_node_resolve_name+0x18e>
 801165e:	4651      	mov	r1, sl
 8011660:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011662:	47c8      	blx	r9
 8011664:	4651      	mov	r1, sl
 8011666:	4620      	mov	r0, r4
 8011668:	f04f 0b01 	mov.w	fp, #1
 801166c:	47c8      	blx	r9
 801166e:	e786      	b.n	801157e <rcl_node_resolve_name+0x86>
 8011670:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8011674:	f7fc fb76 	bl	800dd64 <rcutils_get_error_string>
 8011678:	f7fc fb8a 	bl	800dd90 <rcutils_reset_error>
 801167c:	4644      	mov	r4, r8
 801167e:	e7da      	b.n	8011636 <rcl_node_resolve_name+0x13e>
 8011680:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8011684:	e7d3      	b.n	801162e <rcl_node_resolve_name+0x136>
 8011686:	46d8      	mov	r8, fp
 8011688:	f04f 0b01 	mov.w	fp, #1
 801168c:	f7fc fb6a 	bl	800dd64 <rcutils_get_error_string>
 8011690:	f7fc fb7e 	bl	800dd90 <rcutils_reset_error>
 8011694:	e7cf      	b.n	8011636 <rcl_node_resolve_name+0x13e>
 8011696:	4651      	mov	r1, sl
 8011698:	9809      	ldr	r0, [sp, #36]	; 0x24
 801169a:	47c8      	blx	r9
 801169c:	4651      	mov	r1, sl
 801169e:	4658      	mov	r0, fp
 80116a0:	47c8      	blx	r9
 80116a2:	e76c      	b.n	801157e <rcl_node_resolve_name+0x86>

080116a4 <exact_match_lookup>:
 80116a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80116a6:	f102 0708 	add.w	r7, r2, #8
 80116aa:	460b      	mov	r3, r1
 80116ac:	b085      	sub	sp, #20
 80116ae:	4614      	mov	r4, r2
 80116b0:	4606      	mov	r6, r0
 80116b2:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80116b6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80116ba:	4618      	mov	r0, r3
 80116bc:	4919      	ldr	r1, [pc, #100]	; (8011724 <exact_match_lookup+0x80>)
 80116be:	e894 000c 	ldmia.w	r4, {r2, r3}
 80116c2:	f002 f9a3 	bl	8013a0c <rcutils_join_path>
 80116c6:	7833      	ldrb	r3, [r6, #0]
 80116c8:	4605      	mov	r5, r0
 80116ca:	2b2f      	cmp	r3, #47	; 0x2f
 80116cc:	d023      	beq.n	8011716 <exact_match_lookup+0x72>
 80116ce:	f104 030c 	add.w	r3, r4, #12
 80116d2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80116d6:	e88d 0003 	stmia.w	sp, {r0, r1}
 80116da:	1c70      	adds	r0, r6, #1
 80116dc:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80116e0:	f002 f99a 	bl	8013a18 <rcutils_to_native_path>
 80116e4:	4606      	mov	r6, r0
 80116e6:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80116ea:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80116ee:	4631      	mov	r1, r6
 80116f0:	4628      	mov	r0, r5
 80116f2:	e894 000c 	ldmia.w	r4, {r2, r3}
 80116f6:	f002 f989 	bl	8013a0c <rcutils_join_path>
 80116fa:	4603      	mov	r3, r0
 80116fc:	4630      	mov	r0, r6
 80116fe:	6862      	ldr	r2, [r4, #4]
 8011700:	461e      	mov	r6, r3
 8011702:	6921      	ldr	r1, [r4, #16]
 8011704:	4790      	blx	r2
 8011706:	4628      	mov	r0, r5
 8011708:	4635      	mov	r5, r6
 801170a:	6863      	ldr	r3, [r4, #4]
 801170c:	6921      	ldr	r1, [r4, #16]
 801170e:	4798      	blx	r3
 8011710:	4628      	mov	r0, r5
 8011712:	b005      	add	sp, #20
 8011714:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011716:	7873      	ldrb	r3, [r6, #1]
 8011718:	2b00      	cmp	r3, #0
 801171a:	d1d8      	bne.n	80116ce <exact_match_lookup+0x2a>
 801171c:	4628      	mov	r0, r5
 801171e:	b005      	add	sp, #20
 8011720:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011722:	bf00      	nop
 8011724:	0801d2d4 	.word	0x0801d2d4

08011728 <rcl_get_secure_root>:
 8011728:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801172c:	b085      	sub	sp, #20
 801172e:	b168      	cbz	r0, 801174c <rcl_get_secure_root+0x24>
 8011730:	4607      	mov	r7, r0
 8011732:	4608      	mov	r0, r1
 8011734:	460c      	mov	r4, r1
 8011736:	f7fc fb07 	bl	800dd48 <rcutils_allocator_is_valid>
 801173a:	b138      	cbz	r0, 801174c <rcl_get_secure_root+0x24>
 801173c:	2300      	movs	r3, #0
 801173e:	482d      	ldr	r0, [pc, #180]	; (80117f4 <rcl_get_secure_root+0xcc>)
 8011740:	a903      	add	r1, sp, #12
 8011742:	9303      	str	r3, [sp, #12]
 8011744:	f002 f948 	bl	80139d8 <rcutils_get_env>
 8011748:	4605      	mov	r5, r0
 801174a:	b120      	cbz	r0, 8011756 <rcl_get_secure_root+0x2e>
 801174c:	2500      	movs	r5, #0
 801174e:	4628      	mov	r0, r5
 8011750:	b005      	add	sp, #20
 8011752:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011756:	9b03      	ldr	r3, [sp, #12]
 8011758:	781a      	ldrb	r2, [r3, #0]
 801175a:	2a00      	cmp	r2, #0
 801175c:	d0f6      	beq.n	801174c <rcl_get_secure_root+0x24>
 801175e:	f104 090c 	add.w	r9, r4, #12
 8011762:	e899 0003 	ldmia.w	r9, {r0, r1}
 8011766:	e88d 0003 	stmia.w	sp, {r0, r1}
 801176a:	4618      	mov	r0, r3
 801176c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8011770:	f002 fa94 	bl	8013c9c <rcutils_strdup>
 8011774:	4680      	mov	r8, r0
 8011776:	2800      	cmp	r0, #0
 8011778:	d0e8      	beq.n	801174c <rcl_get_secure_root+0x24>
 801177a:	a903      	add	r1, sp, #12
 801177c:	481e      	ldr	r0, [pc, #120]	; (80117f8 <rcl_get_secure_root+0xd0>)
 801177e:	9503      	str	r5, [sp, #12]
 8011780:	f002 f92a 	bl	80139d8 <rcutils_get_env>
 8011784:	b160      	cbz	r0, 80117a0 <rcl_get_secure_root+0x78>
 8011786:	2600      	movs	r6, #0
 8011788:	4630      	mov	r0, r6
 801178a:	6863      	ldr	r3, [r4, #4]
 801178c:	6921      	ldr	r1, [r4, #16]
 801178e:	4798      	blx	r3
 8011790:	4640      	mov	r0, r8
 8011792:	6863      	ldr	r3, [r4, #4]
 8011794:	6921      	ldr	r1, [r4, #16]
 8011796:	4798      	blx	r3
 8011798:	4628      	mov	r0, r5
 801179a:	b005      	add	sp, #20
 801179c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80117a0:	9b03      	ldr	r3, [sp, #12]
 80117a2:	781e      	ldrb	r6, [r3, #0]
 80117a4:	b1f6      	cbz	r6, 80117e4 <rcl_get_secure_root+0xbc>
 80117a6:	e899 0003 	ldmia.w	r9, {r0, r1}
 80117aa:	e88d 0003 	stmia.w	sp, {r0, r1}
 80117ae:	4618      	mov	r0, r3
 80117b0:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80117b4:	f002 fa72 	bl	8013c9c <rcutils_strdup>
 80117b8:	4606      	mov	r6, r0
 80117ba:	2800      	cmp	r0, #0
 80117bc:	d0e3      	beq.n	8011786 <rcl_get_secure_root+0x5e>
 80117be:	4622      	mov	r2, r4
 80117c0:	4641      	mov	r1, r8
 80117c2:	f7ff ff6f 	bl	80116a4 <exact_match_lookup>
 80117c6:	4605      	mov	r5, r0
 80117c8:	2d00      	cmp	r5, #0
 80117ca:	d0dd      	beq.n	8011788 <rcl_get_secure_root+0x60>
 80117cc:	4628      	mov	r0, r5
 80117ce:	f002 f91b 	bl	8013a08 <rcutils_is_directory>
 80117d2:	4603      	mov	r3, r0
 80117d4:	2800      	cmp	r0, #0
 80117d6:	d1d7      	bne.n	8011788 <rcl_get_secure_root+0x60>
 80117d8:	4628      	mov	r0, r5
 80117da:	6921      	ldr	r1, [r4, #16]
 80117dc:	461d      	mov	r5, r3
 80117de:	6863      	ldr	r3, [r4, #4]
 80117e0:	4798      	blx	r3
 80117e2:	e7d1      	b.n	8011788 <rcl_get_secure_root+0x60>
 80117e4:	4622      	mov	r2, r4
 80117e6:	4638      	mov	r0, r7
 80117e8:	4641      	mov	r1, r8
 80117ea:	f7ff ff5b 	bl	80116a4 <exact_match_lookup>
 80117ee:	4605      	mov	r5, r0
 80117f0:	e7ea      	b.n	80117c8 <rcl_get_secure_root+0xa0>
 80117f2:	bf00      	nop
 80117f4:	0801d2e0 	.word	0x0801d2e0
 80117f8:	0801d2f8 	.word	0x0801d2f8

080117fc <rcl_get_security_options_from_environment>:
 80117fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011800:	b082      	sub	sp, #8
 8011802:	2300      	movs	r3, #0
 8011804:	4606      	mov	r6, r0
 8011806:	460f      	mov	r7, r1
 8011808:	4821      	ldr	r0, [pc, #132]	; (8011890 <rcl_get_security_options_from_environment+0x94>)
 801180a:	a901      	add	r1, sp, #4
 801180c:	4690      	mov	r8, r2
 801180e:	9301      	str	r3, [sp, #4]
 8011810:	f002 f8e2 	bl	80139d8 <rcutils_get_env>
 8011814:	b120      	cbz	r0, 8011820 <rcl_get_security_options_from_environment+0x24>
 8011816:	2501      	movs	r5, #1
 8011818:	4628      	mov	r0, r5
 801181a:	b002      	add	sp, #8
 801181c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011820:	4604      	mov	r4, r0
 8011822:	491c      	ldr	r1, [pc, #112]	; (8011894 <rcl_get_security_options_from_environment+0x98>)
 8011824:	9801      	ldr	r0, [sp, #4]
 8011826:	f7ee fd0b 	bl	8000240 <strcmp>
 801182a:	4605      	mov	r5, r0
 801182c:	b9f0      	cbnz	r0, 801186c <rcl_get_security_options_from_environment+0x70>
 801182e:	9001      	str	r0, [sp, #4]
 8011830:	f1b8 0f00 	cmp.w	r8, #0
 8011834:	d021      	beq.n	801187a <rcl_get_security_options_from_environment+0x7e>
 8011836:	a901      	add	r1, sp, #4
 8011838:	4817      	ldr	r0, [pc, #92]	; (8011898 <rcl_get_security_options_from_environment+0x9c>)
 801183a:	f002 f8cd 	bl	80139d8 <rcutils_get_env>
 801183e:	2800      	cmp	r0, #0
 8011840:	d1e9      	bne.n	8011816 <rcl_get_security_options_from_environment+0x1a>
 8011842:	4916      	ldr	r1, [pc, #88]	; (801189c <rcl_get_security_options_from_environment+0xa0>)
 8011844:	9801      	ldr	r0, [sp, #4]
 8011846:	f7ee fcfb 	bl	8000240 <strcmp>
 801184a:	4603      	mov	r3, r0
 801184c:	4639      	mov	r1, r7
 801184e:	4630      	mov	r0, r6
 8011850:	fab3 f383 	clz	r3, r3
 8011854:	095b      	lsrs	r3, r3, #5
 8011856:	f888 3000 	strb.w	r3, [r8]
 801185a:	f7ff ff65 	bl	8011728 <rcl_get_secure_root>
 801185e:	b170      	cbz	r0, 801187e <rcl_get_security_options_from_environment+0x82>
 8011860:	f8c8 0004 	str.w	r0, [r8, #4]
 8011864:	4628      	mov	r0, r5
 8011866:	b002      	add	sp, #8
 8011868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801186c:	4625      	mov	r5, r4
 801186e:	f888 4000 	strb.w	r4, [r8]
 8011872:	4628      	mov	r0, r5
 8011874:	b002      	add	sp, #8
 8011876:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801187a:	250b      	movs	r5, #11
 801187c:	e7cc      	b.n	8011818 <rcl_get_security_options_from_environment+0x1c>
 801187e:	f898 5000 	ldrb.w	r5, [r8]
 8011882:	f1a5 0501 	sub.w	r5, r5, #1
 8011886:	fab5 f585 	clz	r5, r5
 801188a:	096d      	lsrs	r5, r5, #5
 801188c:	e7c4      	b.n	8011818 <rcl_get_security_options_from_environment+0x1c>
 801188e:	bf00      	nop
 8011890:	0801d298 	.word	0x0801d298
 8011894:	0801d2ac 	.word	0x0801d2ac
 8011898:	0801d2b4 	.word	0x0801d2b4
 801189c:	0801d2cc 	.word	0x0801d2cc

080118a0 <rcl_get_zero_initialized_service>:
 80118a0:	4b01      	ldr	r3, [pc, #4]	; (80118a8 <rcl_get_zero_initialized_service+0x8>)
 80118a2:	6818      	ldr	r0, [r3, #0]
 80118a4:	4770      	bx	lr
 80118a6:	bf00      	nop
 80118a8:	0801d318 	.word	0x0801d318

080118ac <rcl_service_init>:
 80118ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80118b0:	b086      	sub	sp, #24
 80118b2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80118b4:	2d00      	cmp	r5, #0
 80118b6:	d04d      	beq.n	8011954 <rcl_service_init+0xa8>
 80118b8:	f105 0950 	add.w	r9, r5, #80	; 0x50
 80118bc:	4604      	mov	r4, r0
 80118be:	460e      	mov	r6, r1
 80118c0:	4690      	mov	r8, r2
 80118c2:	4648      	mov	r0, r9
 80118c4:	461f      	mov	r7, r3
 80118c6:	f7fc fa3f 	bl	800dd48 <rcutils_allocator_is_valid>
 80118ca:	2c00      	cmp	r4, #0
 80118cc:	d042      	beq.n	8011954 <rcl_service_init+0xa8>
 80118ce:	f080 0001 	eor.w	r0, r0, #1
 80118d2:	b2c0      	uxtb	r0, r0
 80118d4:	2800      	cmp	r0, #0
 80118d6:	d13d      	bne.n	8011954 <rcl_service_init+0xa8>
 80118d8:	4630      	mov	r0, r6
 80118da:	f7ff fdb5 	bl	8011448 <rcl_node_is_valid>
 80118de:	2800      	cmp	r0, #0
 80118e0:	d042      	beq.n	8011968 <rcl_service_init+0xbc>
 80118e2:	2f00      	cmp	r7, #0
 80118e4:	d036      	beq.n	8011954 <rcl_service_init+0xa8>
 80118e6:	f1b8 0f00 	cmp.w	r8, #0
 80118ea:	d033      	beq.n	8011954 <rcl_service_init+0xa8>
 80118ec:	f8d4 a000 	ldr.w	sl, [r4]
 80118f0:	f1ba 0f00 	cmp.w	sl, #0
 80118f4:	d133      	bne.n	801195e <rcl_service_init+0xb2>
 80118f6:	f44f 718c 	mov.w	r1, #280	; 0x118
 80118fa:	2001      	movs	r0, #1
 80118fc:	e9d5 3217 	ldrd	r3, r2, [r5, #92]	; 0x5c
 8011900:	4798      	blx	r3
 8011902:	6020      	str	r0, [r4, #0]
 8011904:	2800      	cmp	r0, #0
 8011906:	d075      	beq.n	80119f4 <rcl_service_init+0x148>
 8011908:	f500 7088 	add.w	r0, r0, #272	; 0x110
 801190c:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8011910:	2201      	movs	r2, #1
 8011912:	f8cd a010 	str.w	sl, [sp, #16]
 8011916:	9005      	str	r0, [sp, #20]
 8011918:	9203      	str	r2, [sp, #12]
 801191a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801191e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8011922:	4639      	mov	r1, r7
 8011924:	4630      	mov	r0, r6
 8011926:	e899 000c 	ldmia.w	r9, {r2, r3}
 801192a:	f7ff fde5 	bl	80114f8 <rcl_node_resolve_name>
 801192e:	4607      	mov	r7, r0
 8011930:	b1f8      	cbz	r0, 8011972 <rcl_service_init+0xc6>
 8011932:	f1a0 0368 	sub.w	r3, r0, #104	; 0x68
 8011936:	6820      	ldr	r0, [r4, #0]
 8011938:	2b01      	cmp	r3, #1
 801193a:	d943      	bls.n	80119c4 <rcl_service_init+0x118>
 801193c:	2f0a      	cmp	r7, #10
 801193e:	d000      	beq.n	8011942 <rcl_service_init+0x96>
 8011940:	2701      	movs	r7, #1
 8011942:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8011944:	6e29      	ldr	r1, [r5, #96]	; 0x60
 8011946:	4798      	blx	r3
 8011948:	2300      	movs	r3, #0
 801194a:	4638      	mov	r0, r7
 801194c:	6023      	str	r3, [r4, #0]
 801194e:	b006      	add	sp, #24
 8011950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011954:	270b      	movs	r7, #11
 8011956:	4638      	mov	r0, r7
 8011958:	b006      	add	sp, #24
 801195a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801195e:	2764      	movs	r7, #100	; 0x64
 8011960:	4638      	mov	r0, r7
 8011962:	b006      	add	sp, #24
 8011964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011968:	27c8      	movs	r7, #200	; 0xc8
 801196a:	4638      	mov	r0, r7
 801196c:	b006      	add	sp, #24
 801196e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011972:	4630      	mov	r0, r6
 8011974:	f7ff fd8a 	bl	801148c <rcl_node_get_rmw_handle>
 8011978:	6827      	ldr	r7, [r4, #0]
 801197a:	4641      	mov	r1, r8
 801197c:	462b      	mov	r3, r5
 801197e:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8011982:	f003 f9b5 	bl	8014cf0 <rmw_create_service>
 8011986:	6821      	ldr	r1, [r4, #0]
 8011988:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
 801198c:	f8d1 0108 	ldr.w	r0, [r1, #264]	; 0x108
 8011990:	b390      	cbz	r0, 80119f8 <rcl_service_init+0x14c>
 8011992:	3168      	adds	r1, #104	; 0x68
 8011994:	f003 fade 	bl	8014f54 <rmw_service_request_subscription_get_actual_qos>
 8011998:	b9b0      	cbnz	r0, 80119c8 <rcl_service_init+0x11c>
 801199a:	6823      	ldr	r3, [r4, #0]
 801199c:	f103 01b8 	add.w	r1, r3, #184	; 0xb8
 80119a0:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 80119a4:	f003 fac2 	bl	8014f2c <rmw_service_response_publisher_get_actual_qos>
 80119a8:	4607      	mov	r7, r0
 80119aa:	b968      	cbnz	r0, 80119c8 <rcl_service_init+0x11c>
 80119ac:	6820      	ldr	r0, [r4, #0]
 80119ae:	2268      	movs	r2, #104	; 0x68
 80119b0:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
 80119b4:	4629      	mov	r1, r5
 80119b6:	f880 30b0 	strb.w	r3, [r0, #176]	; 0xb0
 80119ba:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
 80119be:	f009 fe56 	bl	801b66e <memcpy>
 80119c2:	e7c8      	b.n	8011956 <rcl_service_init+0xaa>
 80119c4:	2768      	movs	r7, #104	; 0x68
 80119c6:	e7bc      	b.n	8011942 <rcl_service_init+0x96>
 80119c8:	f7ff f924 	bl	8010c14 <rcl_convert_rmw_ret_to_rcl_ret>
 80119cc:	4607      	mov	r7, r0
 80119ce:	4630      	mov	r0, r6
 80119d0:	f7ff fd5c 	bl	801148c <rcl_node_get_rmw_handle>
 80119d4:	6823      	ldr	r3, [r4, #0]
 80119d6:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 80119da:	f003 fa63 	bl	8014ea4 <rmw_destroy_service>
 80119de:	6821      	ldr	r1, [r4, #0]
 80119e0:	f8d1 0110 	ldr.w	r0, [r1, #272]	; 0x110
 80119e4:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 80119e6:	6e29      	ldr	r1, [r5, #96]	; 0x60
 80119e8:	4798      	blx	r3
 80119ea:	6820      	ldr	r0, [r4, #0]
 80119ec:	2300      	movs	r3, #0
 80119ee:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
 80119f2:	e7a6      	b.n	8011942 <rcl_service_init+0x96>
 80119f4:	270a      	movs	r7, #10
 80119f6:	e7ae      	b.n	8011956 <rcl_service_init+0xaa>
 80119f8:	2701      	movs	r7, #1
 80119fa:	e7f1      	b.n	80119e0 <rcl_service_init+0x134>

080119fc <rcl_service_get_default_options>:
 80119fc:	b530      	push	{r4, r5, lr}
 80119fe:	4d0f      	ldr	r5, [pc, #60]	; (8011a3c <rcl_service_get_default_options+0x40>)
 8011a00:	b087      	sub	sp, #28
 8011a02:	4604      	mov	r4, r0
 8011a04:	2250      	movs	r2, #80	; 0x50
 8011a06:	490e      	ldr	r1, [pc, #56]	; (8011a40 <rcl_service_get_default_options+0x44>)
 8011a08:	4628      	mov	r0, r5
 8011a0a:	f009 fe30 	bl	801b66e <memcpy>
 8011a0e:	4668      	mov	r0, sp
 8011a10:	f7fc f98c 	bl	800dd2c <rcutils_get_default_allocator>
 8011a14:	46ec      	mov	ip, sp
 8011a16:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 8011a1a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011a1e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011a22:	f8dc 3000 	ldr.w	r3, [ip]
 8011a26:	2268      	movs	r2, #104	; 0x68
 8011a28:	4629      	mov	r1, r5
 8011a2a:	4620      	mov	r0, r4
 8011a2c:	f8ce 3000 	str.w	r3, [lr]
 8011a30:	f009 fe1d 	bl	801b66e <memcpy>
 8011a34:	4620      	mov	r0, r4
 8011a36:	b007      	add	sp, #28
 8011a38:	bd30      	pop	{r4, r5, pc}
 8011a3a:	bf00      	nop
 8011a3c:	2000bd70 	.word	0x2000bd70
 8011a40:	0801d320 	.word	0x0801d320

08011a44 <rcl_service_get_rmw_handle>:
 8011a44:	b118      	cbz	r0, 8011a4e <rcl_service_get_rmw_handle+0xa>
 8011a46:	6800      	ldr	r0, [r0, #0]
 8011a48:	b108      	cbz	r0, 8011a4e <rcl_service_get_rmw_handle+0xa>
 8011a4a:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 8011a4e:	4770      	bx	lr

08011a50 <rcl_take_request>:
 8011a50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011a52:	468e      	mov	lr, r1
 8011a54:	b091      	sub	sp, #68	; 0x44
 8011a56:	460c      	mov	r4, r1
 8011a58:	4617      	mov	r7, r2
 8011a5a:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 8011a5e:	4605      	mov	r5, r0
 8011a60:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011a64:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011a68:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8011a6c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8011a70:	b30d      	cbz	r5, 8011ab6 <rcl_take_request+0x66>
 8011a72:	682b      	ldr	r3, [r5, #0]
 8011a74:	b1fb      	cbz	r3, 8011ab6 <rcl_take_request+0x66>
 8011a76:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 8011a7a:	b1e0      	cbz	r0, 8011ab6 <rcl_take_request+0x66>
 8011a7c:	b397      	cbz	r7, 8011ae4 <rcl_take_request+0x94>
 8011a7e:	2300      	movs	r3, #0
 8011a80:	463a      	mov	r2, r7
 8011a82:	a906      	add	r1, sp, #24
 8011a84:	f88d 3017 	strb.w	r3, [sp, #23]
 8011a88:	f10d 0317 	add.w	r3, sp, #23
 8011a8c:	f003 f82e 	bl	8014aec <rmw_take_request>
 8011a90:	4606      	mov	r6, r0
 8011a92:	b198      	cbz	r0, 8011abc <rcl_take_request+0x6c>
 8011a94:	280a      	cmp	r0, #10
 8011a96:	bf18      	it	ne
 8011a98:	2601      	movne	r6, #1
 8011a9a:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 8011a9e:	46a6      	mov	lr, r4
 8011aa0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011aa4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011aa8:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8011aac:	e88e 0003 	stmia.w	lr, {r0, r1}
 8011ab0:	4630      	mov	r0, r6
 8011ab2:	b011      	add	sp, #68	; 0x44
 8011ab4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011ab6:	f44f 7616 	mov.w	r6, #600	; 0x258
 8011aba:	e7ee      	b.n	8011a9a <rcl_take_request+0x4a>
 8011abc:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8011ac0:	b193      	cbz	r3, 8011ae8 <rcl_take_request+0x98>
 8011ac2:	682b      	ldr	r3, [r5, #0]
 8011ac4:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
 8011ac8:	2800      	cmp	r0, #0
 8011aca:	d0e6      	beq.n	8011a9a <rcl_take_request+0x4a>
 8011acc:	463a      	mov	r2, r7
 8011ace:	ab0a      	add	r3, sp, #40	; 0x28
 8011ad0:	2101      	movs	r1, #1
 8011ad2:	9302      	str	r3, [sp, #8]
 8011ad4:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 8011ad8:	e9cd 6700 	strd	r6, r7, [sp]
 8011adc:	f000 f844 	bl	8011b68 <rcl_send_service_event_message>
 8011ae0:	4606      	mov	r6, r0
 8011ae2:	e7da      	b.n	8011a9a <rcl_take_request+0x4a>
 8011ae4:	260b      	movs	r6, #11
 8011ae6:	e7d8      	b.n	8011a9a <rcl_take_request+0x4a>
 8011ae8:	f240 2659 	movw	r6, #601	; 0x259
 8011aec:	e7d5      	b.n	8011a9a <rcl_take_request+0x4a>
 8011aee:	bf00      	nop

08011af0 <rcl_send_response>:
 8011af0:	b350      	cbz	r0, 8011b48 <rcl_send_response+0x58>
 8011af2:	6803      	ldr	r3, [r0, #0]
 8011af4:	b570      	push	{r4, r5, r6, lr}
 8011af6:	4604      	mov	r4, r0
 8011af8:	b084      	sub	sp, #16
 8011afa:	b1cb      	cbz	r3, 8011b30 <rcl_send_response+0x40>
 8011afc:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 8011b00:	b1b0      	cbz	r0, 8011b30 <rcl_send_response+0x40>
 8011b02:	4615      	mov	r5, r2
 8011b04:	b1ea      	cbz	r2, 8011b42 <rcl_send_response+0x52>
 8011b06:	460e      	mov	r6, r1
 8011b08:	b1d9      	cbz	r1, 8011b42 <rcl_send_response+0x52>
 8011b0a:	f003 f84d 	bl	8014ba8 <rmw_send_response>
 8011b0e:	b998      	cbnz	r0, 8011b38 <rcl_send_response+0x48>
 8011b10:	6823      	ldr	r3, [r4, #0]
 8011b12:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8011b16:	b16b      	cbz	r3, 8011b34 <rcl_send_response+0x44>
 8011b18:	462a      	mov	r2, r5
 8011b1a:	2102      	movs	r1, #2
 8011b1c:	4618      	mov	r0, r3
 8011b1e:	ed96 7b04 	vldr	d7, [r6, #16]
 8011b22:	9602      	str	r6, [sp, #8]
 8011b24:	ed8d 7b00 	vstr	d7, [sp]
 8011b28:	f000 f81e 	bl	8011b68 <rcl_send_service_event_message>
 8011b2c:	b004      	add	sp, #16
 8011b2e:	bd70      	pop	{r4, r5, r6, pc}
 8011b30:	f44f 7016 	mov.w	r0, #600	; 0x258
 8011b34:	b004      	add	sp, #16
 8011b36:	bd70      	pop	{r4, r5, r6, pc}
 8011b38:	2802      	cmp	r0, #2
 8011b3a:	bf18      	it	ne
 8011b3c:	2001      	movne	r0, #1
 8011b3e:	b004      	add	sp, #16
 8011b40:	bd70      	pop	{r4, r5, r6, pc}
 8011b42:	200b      	movs	r0, #11
 8011b44:	b004      	add	sp, #16
 8011b46:	bd70      	pop	{r4, r5, r6, pc}
 8011b48:	f44f 7016 	mov.w	r0, #600	; 0x258
 8011b4c:	4770      	bx	lr
 8011b4e:	bf00      	nop

08011b50 <rcl_service_is_valid>:
 8011b50:	b130      	cbz	r0, 8011b60 <rcl_service_is_valid+0x10>
 8011b52:	6800      	ldr	r0, [r0, #0]
 8011b54:	b120      	cbz	r0, 8011b60 <rcl_service_is_valid+0x10>
 8011b56:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 8011b5a:	3800      	subs	r0, #0
 8011b5c:	bf18      	it	ne
 8011b5e:	2001      	movne	r0, #1
 8011b60:	4770      	bx	lr
 8011b62:	bf00      	nop
 8011b64:	0000      	movs	r0, r0
	...

08011b68 <rcl_send_service_event_message>:
 8011b68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011b6c:	b093      	sub	sp, #76	; 0x4c
 8011b6e:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8011b70:	b196      	cbz	r6, 8011b98 <rcl_send_service_event_message+0x30>
 8011b72:	4615      	mov	r5, r2
 8011b74:	b182      	cbz	r2, 8011b98 <rcl_send_service_event_message+0x30>
 8011b76:	4604      	mov	r4, r0
 8011b78:	b148      	cbz	r0, 8011b8e <rcl_send_service_event_message+0x26>
 8011b7a:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8011b7e:	b133      	cbz	r3, 8011b8e <rcl_send_service_event_message+0x26>
 8011b80:	68c0      	ldr	r0, [r0, #12]
 8011b82:	460f      	mov	r7, r1
 8011b84:	f000 f90c 	bl	8011da0 <rcl_clock_valid>
 8011b88:	b108      	cbz	r0, 8011b8e <rcl_send_service_event_message+0x26>
 8011b8a:	7a23      	ldrb	r3, [r4, #8]
 8011b8c:	b94b      	cbnz	r3, 8011ba2 <rcl_send_service_event_message+0x3a>
 8011b8e:	2401      	movs	r4, #1
 8011b90:	4620      	mov	r0, r4
 8011b92:	b013      	add	sp, #76	; 0x4c
 8011b94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011b98:	240b      	movs	r4, #11
 8011b9a:	4620      	mov	r0, r4
 8011b9c:	b013      	add	sp, #76	; 0x4c
 8011b9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011ba2:	f104 0e60 	add.w	lr, r4, #96	; 0x60
 8011ba6:	f10d 0c0c 	add.w	ip, sp, #12
 8011baa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011bae:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011bb2:	f8de 3000 	ldr.w	r3, [lr]
 8011bb6:	a803      	add	r0, sp, #12
 8011bb8:	f8cc 3000 	str.w	r3, [ip]
 8011bbc:	f7fc f8c4 	bl	800dd48 <rcutils_allocator_is_valid>
 8011bc0:	2800      	cmp	r0, #0
 8011bc2:	d0e9      	beq.n	8011b98 <rcl_send_service_event_message+0x30>
 8011bc4:	6820      	ldr	r0, [r4, #0]
 8011bc6:	f007 fd41 	bl	801964c <rcl_publisher_is_valid>
 8011bca:	2800      	cmp	r0, #0
 8011bcc:	d05e      	beq.n	8011c8c <rcl_send_service_event_message+0x124>
 8011bce:	4669      	mov	r1, sp
 8011bd0:	68e0      	ldr	r0, [r4, #12]
 8011bd2:	f000 f977 	bl	8011ec4 <rcl_clock_get_now>
 8011bd6:	4601      	mov	r1, r0
 8011bd8:	2800      	cmp	r0, #0
 8011bda:	d146      	bne.n	8011c6a <rcl_send_service_event_message+0x102>
 8011bdc:	2220      	movs	r2, #32
 8011bde:	eb0d 0002 	add.w	r0, sp, r2
 8011be2:	f009 fbcf 	bl	801b384 <memset>
 8011be6:	f88d 7020 	strb.w	r7, [sp, #32]
 8011bea:	e9dd 8900 	ldrd	r8, r9, [sp]
 8011bee:	a32a      	add	r3, pc, #168	; (adr r3, 8011c98 <rcl_send_service_event_message+0x130>)
 8011bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bf4:	4640      	mov	r0, r8
 8011bf6:	4649      	mov	r1, r9
 8011bf8:	f7ee fb8a 	bl	8000310 <__aeabi_ldivmod>
 8011bfc:	4649      	mov	r1, r9
 8011bfe:	9009      	str	r0, [sp, #36]	; 0x24
 8011c00:	4640      	mov	r0, r8
 8011c02:	a325      	add	r3, pc, #148	; (adr r3, 8011c98 <rcl_send_service_event_message+0x130>)
 8011c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c08:	f7ee fb82 	bl	8000310 <__aeabi_ldivmod>
 8011c0c:	920a      	str	r2, [sp, #40]	; 0x28
 8011c0e:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
 8011c12:	6830      	ldr	r0, [r6, #0]
 8011c14:	6871      	ldr	r1, [r6, #4]
 8011c16:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8011c1a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8011c1e:	7a23      	ldrb	r3, [r4, #8]
 8011c20:	68b2      	ldr	r2, [r6, #8]
 8011c22:	2b01      	cmp	r3, #1
 8011c24:	68f3      	ldr	r3, [r6, #12]
 8011c26:	bf08      	it	eq
 8011c28:	2500      	moveq	r5, #0
 8011c2a:	2f01      	cmp	r7, #1
 8011c2c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011c30:	d81f      	bhi.n	8011c72 <rcl_send_service_event_message+0x10a>
 8011c32:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8011c36:	462a      	mov	r2, r5
 8011c38:	a808      	add	r0, sp, #32
 8011c3a:	a903      	add	r1, sp, #12
 8011c3c:	699d      	ldr	r5, [r3, #24]
 8011c3e:	2300      	movs	r3, #0
 8011c40:	47a8      	blx	r5
 8011c42:	4605      	mov	r5, r0
 8011c44:	2d00      	cmp	r5, #0
 8011c46:	d0a2      	beq.n	8011b8e <rcl_send_service_event_message+0x26>
 8011c48:	4629      	mov	r1, r5
 8011c4a:	6820      	ldr	r0, [r4, #0]
 8011c4c:	2200      	movs	r2, #0
 8011c4e:	f007 fcd9 	bl	8019604 <rcl_publish>
 8011c52:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8011c56:	4604      	mov	r4, r0
 8011c58:	a903      	add	r1, sp, #12
 8011c5a:	4628      	mov	r0, r5
 8011c5c:	69db      	ldr	r3, [r3, #28]
 8011c5e:	4798      	blx	r3
 8011c60:	2c00      	cmp	r4, #0
 8011c62:	d095      	beq.n	8011b90 <rcl_send_service_event_message+0x28>
 8011c64:	f7fc f894 	bl	800dd90 <rcutils_reset_error>
 8011c68:	e792      	b.n	8011b90 <rcl_send_service_event_message+0x28>
 8011c6a:	2401      	movs	r4, #1
 8011c6c:	f7fc f890 	bl	800dd90 <rcutils_reset_error>
 8011c70:	e78e      	b.n	8011b90 <rcl_send_service_event_message+0x28>
 8011c72:	1eb9      	subs	r1, r7, #2
 8011c74:	2901      	cmp	r1, #1
 8011c76:	d8f8      	bhi.n	8011c6a <rcl_send_service_event_message+0x102>
 8011c78:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8011c7c:	462b      	mov	r3, r5
 8011c7e:	a808      	add	r0, sp, #32
 8011c80:	a903      	add	r1, sp, #12
 8011c82:	6995      	ldr	r5, [r2, #24]
 8011c84:	2200      	movs	r2, #0
 8011c86:	47a8      	blx	r5
 8011c88:	4605      	mov	r5, r0
 8011c8a:	e7db      	b.n	8011c44 <rcl_send_service_event_message+0xdc>
 8011c8c:	f44f 7496 	mov.w	r4, #300	; 0x12c
 8011c90:	e77e      	b.n	8011b90 <rcl_send_service_event_message+0x28>
 8011c92:	bf00      	nop
 8011c94:	f3af 8000 	nop.w
 8011c98:	3b9aca00 	.word	0x3b9aca00
 8011c9c:	00000000 	.word	0x00000000

08011ca0 <rcl_take>:
 8011ca0:	2800      	cmp	r0, #0
 8011ca2:	d049      	beq.n	8011d38 <rcl_take+0x98>
 8011ca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ca8:	4615      	mov	r5, r2
 8011caa:	6802      	ldr	r2, [r0, #0]
 8011cac:	b0a0      	sub	sp, #128	; 0x80
 8011cae:	4604      	mov	r4, r0
 8011cb0:	2a00      	cmp	r2, #0
 8011cb2:	d039      	beq.n	8011d28 <rcl_take+0x88>
 8011cb4:	461f      	mov	r7, r3
 8011cb6:	f8d2 30c8 	ldr.w	r3, [r2, #200]	; 0xc8
 8011cba:	b3ab      	cbz	r3, 8011d28 <rcl_take+0x88>
 8011cbc:	460e      	mov	r6, r1
 8011cbe:	2900      	cmp	r1, #0
 8011cc0:	d038      	beq.n	8011d34 <rcl_take+0x94>
 8011cc2:	2d00      	cmp	r5, #0
 8011cc4:	d03c      	beq.n	8011d40 <rcl_take+0xa0>
 8011cc6:	a802      	add	r0, sp, #8
 8011cc8:	f002 f962 	bl	8013f90 <rmw_get_zero_initialized_message_info>
 8011ccc:	6823      	ldr	r3, [r4, #0]
 8011cce:	f10d 0c08 	add.w	ip, sp, #8
 8011cd2:	46ae      	mov	lr, r5
 8011cd4:	f8d3 80c8 	ldr.w	r8, [r3, #200]	; 0xc8
 8011cd8:	2400      	movs	r4, #0
 8011cda:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011cde:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011ce2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011ce6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011cea:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011cee:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011cf2:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8011cf6:	462b      	mov	r3, r5
 8011cf8:	f10d 0247 	add.w	r2, sp, #71	; 0x47
 8011cfc:	f88d 4047 	strb.w	r4, [sp, #71]	; 0x47
 8011d00:	e88e 0003 	stmia.w	lr, {r0, r1}
 8011d04:	4631      	mov	r1, r6
 8011d06:	4640      	mov	r0, r8
 8011d08:	9700      	str	r7, [sp, #0]
 8011d0a:	f003 f999 	bl	8015040 <rmw_take_with_info>
 8011d0e:	4603      	mov	r3, r0
 8011d10:	b9c0      	cbnz	r0, 8011d44 <rcl_take+0xa4>
 8011d12:	f89d 1047 	ldrb.w	r1, [sp, #71]	; 0x47
 8011d16:	f240 1291 	movw	r2, #401	; 0x191
 8011d1a:	2900      	cmp	r1, #0
 8011d1c:	bf08      	it	eq
 8011d1e:	4613      	moveq	r3, r2
 8011d20:	4618      	mov	r0, r3
 8011d22:	b020      	add	sp, #128	; 0x80
 8011d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d28:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8011d2c:	4618      	mov	r0, r3
 8011d2e:	b020      	add	sp, #128	; 0x80
 8011d30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d34:	230b      	movs	r3, #11
 8011d36:	e7f3      	b.n	8011d20 <rcl_take+0x80>
 8011d38:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8011d3c:	4618      	mov	r0, r3
 8011d3e:	4770      	bx	lr
 8011d40:	ad12      	add	r5, sp, #72	; 0x48
 8011d42:	e7c0      	b.n	8011cc6 <rcl_take+0x26>
 8011d44:	f7fe ff66 	bl	8010c14 <rcl_convert_rmw_ret_to_rcl_ret>
 8011d48:	4603      	mov	r3, r0
 8011d4a:	e7e9      	b.n	8011d20 <rcl_take+0x80>

08011d4c <rcl_subscription_get_rmw_handle>:
 8011d4c:	b118      	cbz	r0, 8011d56 <rcl_subscription_get_rmw_handle+0xa>
 8011d4e:	6800      	ldr	r0, [r0, #0]
 8011d50:	b108      	cbz	r0, 8011d56 <rcl_subscription_get_rmw_handle+0xa>
 8011d52:	f8d0 00c8 	ldr.w	r0, [r0, #200]	; 0xc8
 8011d56:	4770      	bx	lr

08011d58 <rcl_subscription_is_valid>:
 8011d58:	b130      	cbz	r0, 8011d68 <rcl_subscription_is_valid+0x10>
 8011d5a:	6800      	ldr	r0, [r0, #0]
 8011d5c:	b120      	cbz	r0, 8011d68 <rcl_subscription_is_valid+0x10>
 8011d5e:	f8d0 00c8 	ldr.w	r0, [r0, #200]	; 0xc8
 8011d62:	3800      	subs	r0, #0
 8011d64:	bf18      	it	ne
 8011d66:	2001      	movne	r0, #1
 8011d68:	4770      	bx	lr
 8011d6a:	bf00      	nop

08011d6c <rcl_get_system_time>:
 8011d6c:	4608      	mov	r0, r1
 8011d6e:	f7fc b82b 	b.w	800ddc8 <rcutils_system_time_now>
 8011d72:	bf00      	nop

08011d74 <rcl_get_steady_time>:
 8011d74:	4608      	mov	r0, r1
 8011d76:	f7fc b84f 	b.w	800de18 <rcutils_steady_time_now>
 8011d7a:	bf00      	nop

08011d7c <rcl_get_ros_time>:
 8011d7c:	7a03      	ldrb	r3, [r0, #8]
 8011d7e:	b510      	push	{r4, lr}
 8011d80:	460c      	mov	r4, r1
 8011d82:	b143      	cbz	r3, 8011d96 <rcl_get_ros_time+0x1a>
 8011d84:	2105      	movs	r1, #5
 8011d86:	f001 fd83 	bl	8013890 <__atomic_load_8>
 8011d8a:	4602      	mov	r2, r0
 8011d8c:	460b      	mov	r3, r1
 8011d8e:	2000      	movs	r0, #0
 8011d90:	e9c4 2300 	strd	r2, r3, [r4]
 8011d94:	bd10      	pop	{r4, pc}
 8011d96:	4608      	mov	r0, r1
 8011d98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011d9c:	f7fc b814 	b.w	800ddc8 <rcutils_system_time_now>

08011da0 <rcl_clock_valid>:
 8011da0:	b138      	cbz	r0, 8011db2 <rcl_clock_valid+0x12>
 8011da2:	7803      	ldrb	r3, [r0, #0]
 8011da4:	b123      	cbz	r3, 8011db0 <rcl_clock_valid+0x10>
 8011da6:	68c0      	ldr	r0, [r0, #12]
 8011da8:	3800      	subs	r0, #0
 8011daa:	bf18      	it	ne
 8011dac:	2001      	movne	r0, #1
 8011dae:	4770      	bx	lr
 8011db0:	4618      	mov	r0, r3
 8011db2:	4770      	bx	lr

08011db4 <rcl_clock_init>:
 8011db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011db6:	4605      	mov	r5, r0
 8011db8:	4610      	mov	r0, r2
 8011dba:	4614      	mov	r4, r2
 8011dbc:	460e      	mov	r6, r1
 8011dbe:	f7fb ffc3 	bl	800dd48 <rcutils_allocator_is_valid>
 8011dc2:	b128      	cbz	r0, 8011dd0 <rcl_clock_init+0x1c>
 8011dc4:	2d03      	cmp	r5, #3
 8011dc6:	d803      	bhi.n	8011dd0 <rcl_clock_init+0x1c>
 8011dc8:	e8df f005 	tbb	[pc, r5]
 8011dcc:	0659301f 	.word	0x0659301f
 8011dd0:	f04f 0c0b 	mov.w	ip, #11
 8011dd4:	4660      	mov	r0, ip
 8011dd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011dd8:	2c00      	cmp	r4, #0
 8011dda:	d0f9      	beq.n	8011dd0 <rcl_clock_init+0x1c>
 8011ddc:	fab6 f386 	clz	r3, r6
 8011de0:	095b      	lsrs	r3, r3, #5
 8011de2:	2e00      	cmp	r6, #0
 8011de4:	d0f4      	beq.n	8011dd0 <rcl_clock_init+0x1c>
 8011de6:	6133      	str	r3, [r6, #16]
 8011de8:	469c      	mov	ip, r3
 8011dea:	f106 0514 	add.w	r5, r6, #20
 8011dee:	4f32      	ldr	r7, [pc, #200]	; (8011eb8 <rcl_clock_init+0x104>)
 8011df0:	f04f 0e03 	mov.w	lr, #3
 8011df4:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8011df8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011dfa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011dfc:	6823      	ldr	r3, [r4, #0]
 8011dfe:	4660      	mov	r0, ip
 8011e00:	602b      	str	r3, [r5, #0]
 8011e02:	60f7      	str	r7, [r6, #12]
 8011e04:	f886 e000 	strb.w	lr, [r6]
 8011e08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011e0a:	2e00      	cmp	r6, #0
 8011e0c:	d0e0      	beq.n	8011dd0 <rcl_clock_init+0x1c>
 8011e0e:	2300      	movs	r3, #0
 8011e10:	f106 0514 	add.w	r5, r6, #20
 8011e14:	7033      	strb	r3, [r6, #0]
 8011e16:	469c      	mov	ip, r3
 8011e18:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8011e1c:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8011e20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011e22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011e24:	6823      	ldr	r3, [r4, #0]
 8011e26:	4660      	mov	r0, ip
 8011e28:	602b      	str	r3, [r5, #0]
 8011e2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011e2c:	2c00      	cmp	r4, #0
 8011e2e:	d0cf      	beq.n	8011dd0 <rcl_clock_init+0x1c>
 8011e30:	fab6 f586 	clz	r5, r6
 8011e34:	096d      	lsrs	r5, r5, #5
 8011e36:	2e00      	cmp	r6, #0
 8011e38:	d0ca      	beq.n	8011dd0 <rcl_clock_init+0x1c>
 8011e3a:	46a6      	mov	lr, r4
 8011e3c:	7035      	strb	r5, [r6, #0]
 8011e3e:	f106 0c14 	add.w	ip, r6, #20
 8011e42:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011e46:	e9c6 5501 	strd	r5, r5, [r6, #4]
 8011e4a:	e9c6 5503 	strd	r5, r5, [r6, #12]
 8011e4e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011e52:	f8de 3000 	ldr.w	r3, [lr]
 8011e56:	2010      	movs	r0, #16
 8011e58:	f8cc 3000 	str.w	r3, [ip]
 8011e5c:	6823      	ldr	r3, [r4, #0]
 8011e5e:	6921      	ldr	r1, [r4, #16]
 8011e60:	4798      	blx	r3
 8011e62:	6130      	str	r0, [r6, #16]
 8011e64:	b320      	cbz	r0, 8011eb0 <rcl_clock_init+0xfc>
 8011e66:	2200      	movs	r2, #0
 8011e68:	2300      	movs	r3, #0
 8011e6a:	46ac      	mov	ip, r5
 8011e6c:	7205      	strb	r5, [r0, #8]
 8011e6e:	e9c0 2300 	strd	r2, r3, [r0]
 8011e72:	4a12      	ldr	r2, [pc, #72]	; (8011ebc <rcl_clock_init+0x108>)
 8011e74:	2301      	movs	r3, #1
 8011e76:	4660      	mov	r0, ip
 8011e78:	60f2      	str	r2, [r6, #12]
 8011e7a:	7033      	strb	r3, [r6, #0]
 8011e7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011e7e:	2c00      	cmp	r4, #0
 8011e80:	d0a6      	beq.n	8011dd0 <rcl_clock_init+0x1c>
 8011e82:	fab6 f386 	clz	r3, r6
 8011e86:	095b      	lsrs	r3, r3, #5
 8011e88:	2e00      	cmp	r6, #0
 8011e8a:	d0a1      	beq.n	8011dd0 <rcl_clock_init+0x1c>
 8011e8c:	6133      	str	r3, [r6, #16]
 8011e8e:	469c      	mov	ip, r3
 8011e90:	f106 0514 	add.w	r5, r6, #20
 8011e94:	f8df e028 	ldr.w	lr, [pc, #40]	; 8011ec0 <rcl_clock_init+0x10c>
 8011e98:	2702      	movs	r7, #2
 8011e9a:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8011e9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011ea0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011ea2:	6823      	ldr	r3, [r4, #0]
 8011ea4:	4660      	mov	r0, ip
 8011ea6:	602b      	str	r3, [r5, #0]
 8011ea8:	f8c6 e00c 	str.w	lr, [r6, #12]
 8011eac:	7037      	strb	r7, [r6, #0]
 8011eae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011eb0:	f04f 0c0a 	mov.w	ip, #10
 8011eb4:	e78e      	b.n	8011dd4 <rcl_clock_init+0x20>
 8011eb6:	bf00      	nop
 8011eb8:	08011d75 	.word	0x08011d75
 8011ebc:	08011d7d 	.word	0x08011d7d
 8011ec0:	08011d6d 	.word	0x08011d6d

08011ec4 <rcl_clock_get_now>:
 8011ec4:	b140      	cbz	r0, 8011ed8 <rcl_clock_get_now+0x14>
 8011ec6:	b139      	cbz	r1, 8011ed8 <rcl_clock_get_now+0x14>
 8011ec8:	7803      	ldrb	r3, [r0, #0]
 8011eca:	b11b      	cbz	r3, 8011ed4 <rcl_clock_get_now+0x10>
 8011ecc:	68c3      	ldr	r3, [r0, #12]
 8011ece:	b10b      	cbz	r3, 8011ed4 <rcl_clock_get_now+0x10>
 8011ed0:	6900      	ldr	r0, [r0, #16]
 8011ed2:	4718      	bx	r3
 8011ed4:	2001      	movs	r0, #1
 8011ed6:	4770      	bx	lr
 8011ed8:	200b      	movs	r0, #11
 8011eda:	4770      	bx	lr

08011edc <rcl_timer_call>:
 8011edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ee0:	b087      	sub	sp, #28
 8011ee2:	2800      	cmp	r0, #0
 8011ee4:	d06c      	beq.n	8011fc0 <rcl_timer_call+0xe4>
 8011ee6:	6803      	ldr	r3, [r0, #0]
 8011ee8:	4604      	mov	r4, r0
 8011eea:	2b00      	cmp	r3, #0
 8011eec:	d062      	beq.n	8011fb4 <rcl_timer_call+0xd8>
 8011eee:	f3bf 8f5b 	dmb	ish
 8011ef2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011ef6:	f3bf 8f5b 	dmb	ish
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	d14f      	bne.n	8011f9e <rcl_timer_call+0xc2>
 8011efe:	6803      	ldr	r3, [r0, #0]
 8011f00:	a904      	add	r1, sp, #16
 8011f02:	6818      	ldr	r0, [r3, #0]
 8011f04:	f7ff ffde 	bl	8011ec4 <rcl_clock_get_now>
 8011f08:	4605      	mov	r5, r0
 8011f0a:	2800      	cmp	r0, #0
 8011f0c:	d149      	bne.n	8011fa2 <rcl_timer_call+0xc6>
 8011f0e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	db49      	blt.n	8011faa <rcl_timer_call+0xce>
 8011f16:	2605      	movs	r6, #5
 8011f18:	6820      	ldr	r0, [r4, #0]
 8011f1a:	9600      	str	r6, [sp, #0]
 8011f1c:	3020      	adds	r0, #32
 8011f1e:	f001 fd23 	bl	8013968 <__atomic_exchange_8>
 8011f22:	6823      	ldr	r3, [r4, #0]
 8011f24:	4680      	mov	r8, r0
 8011f26:	f3bf 8f5b 	dmb	ish
 8011f2a:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8011f2e:	f3bf 8f5b 	dmb	ish
 8011f32:	6820      	ldr	r0, [r4, #0]
 8011f34:	4689      	mov	r9, r1
 8011f36:	4631      	mov	r1, r6
 8011f38:	3028      	adds	r0, #40	; 0x28
 8011f3a:	f001 fca9 	bl	8013890 <__atomic_load_8>
 8011f3e:	460f      	mov	r7, r1
 8011f40:	4631      	mov	r1, r6
 8011f42:	4606      	mov	r6, r0
 8011f44:	6820      	ldr	r0, [r4, #0]
 8011f46:	3018      	adds	r0, #24
 8011f48:	f001 fca2 	bl	8013890 <__atomic_load_8>
 8011f4c:	4602      	mov	r2, r0
 8011f4e:	9804      	ldr	r0, [sp, #16]
 8011f50:	460b      	mov	r3, r1
 8011f52:	18b6      	adds	r6, r6, r2
 8011f54:	f8dd c014 	ldr.w	ip, [sp, #20]
 8011f58:	4692      	mov	sl, r2
 8011f5a:	eb47 0701 	adc.w	r7, r7, r1
 8011f5e:	4286      	cmp	r6, r0
 8011f60:	eb77 010c 	sbcs.w	r1, r7, ip
 8011f64:	da04      	bge.n	8011f70 <rcl_timer_call+0x94>
 8011f66:	ea53 0102 	orrs.w	r1, r3, r2
 8011f6a:	d12e      	bne.n	8011fca <rcl_timer_call+0xee>
 8011f6c:	4606      	mov	r6, r0
 8011f6e:	4667      	mov	r7, ip
 8011f70:	6820      	ldr	r0, [r4, #0]
 8011f72:	2105      	movs	r1, #5
 8011f74:	4632      	mov	r2, r6
 8011f76:	463b      	mov	r3, r7
 8011f78:	3028      	adds	r0, #40	; 0x28
 8011f7a:	9100      	str	r1, [sp, #0]
 8011f7c:	f001 fcbe 	bl	80138fc <__atomic_store_8>
 8011f80:	f1bb 0f00 	cmp.w	fp, #0
 8011f84:	d00d      	beq.n	8011fa2 <rcl_timer_call+0xc6>
 8011f86:	9a04      	ldr	r2, [sp, #16]
 8011f88:	4620      	mov	r0, r4
 8011f8a:	9b05      	ldr	r3, [sp, #20]
 8011f8c:	ebb2 0208 	subs.w	r2, r2, r8
 8011f90:	eb63 0309 	sbc.w	r3, r3, r9
 8011f94:	47d8      	blx	fp
 8011f96:	4628      	mov	r0, r5
 8011f98:	b007      	add	sp, #28
 8011f9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f9e:	f240 3521 	movw	r5, #801	; 0x321
 8011fa2:	4628      	mov	r0, r5
 8011fa4:	b007      	add	sp, #28
 8011fa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011faa:	2501      	movs	r5, #1
 8011fac:	4628      	mov	r0, r5
 8011fae:	b007      	add	sp, #28
 8011fb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fb4:	f44f 7548 	mov.w	r5, #800	; 0x320
 8011fb8:	4628      	mov	r0, r5
 8011fba:	b007      	add	sp, #28
 8011fbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fc0:	250b      	movs	r5, #11
 8011fc2:	4628      	mov	r0, r5
 8011fc4:	b007      	add	sp, #28
 8011fc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fca:	1b80      	subs	r0, r0, r6
 8011fcc:	eb6c 0107 	sbc.w	r1, ip, r7
 8011fd0:	3801      	subs	r0, #1
 8011fd2:	f161 0100 	sbc.w	r1, r1, #0
 8011fd6:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8011fda:	f7ee f999 	bl	8000310 <__aeabi_ldivmod>
 8011fde:	9b02      	ldr	r3, [sp, #8]
 8011fe0:	3001      	adds	r0, #1
 8011fe2:	f141 0100 	adc.w	r1, r1, #0
 8011fe6:	fb00 f303 	mul.w	r3, r0, r3
 8011fea:	fb01 330a 	mla	r3, r1, sl, r3
 8011fee:	fba0 0a0a 	umull	r0, sl, r0, sl
 8011ff2:	1986      	adds	r6, r0, r6
 8011ff4:	4453      	add	r3, sl
 8011ff6:	eb43 0707 	adc.w	r7, r3, r7
 8011ffa:	e7b9      	b.n	8011f70 <rcl_timer_call+0x94>

08011ffc <rcl_timer_is_ready>:
 8011ffc:	b570      	push	{r4, r5, r6, lr}
 8011ffe:	b082      	sub	sp, #8
 8012000:	b380      	cbz	r0, 8012064 <rcl_timer_is_ready+0x68>
 8012002:	6803      	ldr	r3, [r0, #0]
 8012004:	4604      	mov	r4, r0
 8012006:	b38b      	cbz	r3, 801206c <rcl_timer_is_ready+0x70>
 8012008:	460d      	mov	r5, r1
 801200a:	b359      	cbz	r1, 8012064 <rcl_timer_is_ready+0x68>
 801200c:	f3bf 8f5b 	dmb	ish
 8012010:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012014:	f3bf 8f5b 	dmb	ish
 8012018:	b953      	cbnz	r3, 8012030 <rcl_timer_is_ready+0x34>
 801201a:	6803      	ldr	r3, [r0, #0]
 801201c:	4669      	mov	r1, sp
 801201e:	6818      	ldr	r0, [r3, #0]
 8012020:	f7ff ff50 	bl	8011ec4 <rcl_clock_get_now>
 8012024:	4606      	mov	r6, r0
 8012026:	b148      	cbz	r0, 801203c <rcl_timer_is_ready+0x40>
 8012028:	f240 3321 	movw	r3, #801	; 0x321
 801202c:	4298      	cmp	r0, r3
 801202e:	d102      	bne.n	8012036 <rcl_timer_is_ready+0x3a>
 8012030:	2300      	movs	r3, #0
 8012032:	461e      	mov	r6, r3
 8012034:	702b      	strb	r3, [r5, #0]
 8012036:	4630      	mov	r0, r6
 8012038:	b002      	add	sp, #8
 801203a:	bd70      	pop	{r4, r5, r6, pc}
 801203c:	6820      	ldr	r0, [r4, #0]
 801203e:	2105      	movs	r1, #5
 8012040:	3028      	adds	r0, #40	; 0x28
 8012042:	f001 fc25 	bl	8013890 <__atomic_load_8>
 8012046:	9b00      	ldr	r3, [sp, #0]
 8012048:	1ac0      	subs	r0, r0, r3
 801204a:	9b01      	ldr	r3, [sp, #4]
 801204c:	eb61 0103 	sbc.w	r1, r1, r3
 8012050:	2801      	cmp	r0, #1
 8012052:	4630      	mov	r0, r6
 8012054:	f171 0300 	sbcs.w	r3, r1, #0
 8012058:	bfb4      	ite	lt
 801205a:	2301      	movlt	r3, #1
 801205c:	2300      	movge	r3, #0
 801205e:	702b      	strb	r3, [r5, #0]
 8012060:	b002      	add	sp, #8
 8012062:	bd70      	pop	{r4, r5, r6, pc}
 8012064:	260b      	movs	r6, #11
 8012066:	4630      	mov	r0, r6
 8012068:	b002      	add	sp, #8
 801206a:	bd70      	pop	{r4, r5, r6, pc}
 801206c:	f44f 7648 	mov.w	r6, #800	; 0x320
 8012070:	e7e1      	b.n	8012036 <rcl_timer_is_ready+0x3a>
 8012072:	bf00      	nop

08012074 <rcl_timer_get_time_until_next_call>:
 8012074:	b570      	push	{r4, r5, r6, lr}
 8012076:	b082      	sub	sp, #8
 8012078:	b330      	cbz	r0, 80120c8 <rcl_timer_get_time_until_next_call+0x54>
 801207a:	6803      	ldr	r3, [r0, #0]
 801207c:	4604      	mov	r4, r0
 801207e:	b33b      	cbz	r3, 80120d0 <rcl_timer_get_time_until_next_call+0x5c>
 8012080:	460d      	mov	r5, r1
 8012082:	b309      	cbz	r1, 80120c8 <rcl_timer_get_time_until_next_call+0x54>
 8012084:	f3bf 8f5b 	dmb	ish
 8012088:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801208c:	f3bf 8f5b 	dmb	ish
 8012090:	b9ab      	cbnz	r3, 80120be <rcl_timer_get_time_until_next_call+0x4a>
 8012092:	6803      	ldr	r3, [r0, #0]
 8012094:	4669      	mov	r1, sp
 8012096:	6818      	ldr	r0, [r3, #0]
 8012098:	f7ff ff14 	bl	8011ec4 <rcl_clock_get_now>
 801209c:	4606      	mov	r6, r0
 801209e:	b958      	cbnz	r0, 80120b8 <rcl_timer_get_time_until_next_call+0x44>
 80120a0:	6820      	ldr	r0, [r4, #0]
 80120a2:	2105      	movs	r1, #5
 80120a4:	3028      	adds	r0, #40	; 0x28
 80120a6:	f001 fbf3 	bl	8013890 <__atomic_load_8>
 80120aa:	9b00      	ldr	r3, [sp, #0]
 80120ac:	1ac0      	subs	r0, r0, r3
 80120ae:	9b01      	ldr	r3, [sp, #4]
 80120b0:	eb61 0103 	sbc.w	r1, r1, r3
 80120b4:	6028      	str	r0, [r5, #0]
 80120b6:	6069      	str	r1, [r5, #4]
 80120b8:	4630      	mov	r0, r6
 80120ba:	b002      	add	sp, #8
 80120bc:	bd70      	pop	{r4, r5, r6, pc}
 80120be:	f240 3621 	movw	r6, #801	; 0x321
 80120c2:	4630      	mov	r0, r6
 80120c4:	b002      	add	sp, #8
 80120c6:	bd70      	pop	{r4, r5, r6, pc}
 80120c8:	260b      	movs	r6, #11
 80120ca:	4630      	mov	r0, r6
 80120cc:	b002      	add	sp, #8
 80120ce:	bd70      	pop	{r4, r5, r6, pc}
 80120d0:	f44f 7648 	mov.w	r6, #800	; 0x320
 80120d4:	e7f0      	b.n	80120b8 <rcl_timer_get_time_until_next_call+0x44>
 80120d6:	bf00      	nop

080120d8 <rcl_timer_get_guard_condition>:
 80120d8:	b130      	cbz	r0, 80120e8 <rcl_timer_get_guard_condition+0x10>
 80120da:	6800      	ldr	r0, [r0, #0]
 80120dc:	b120      	cbz	r0, 80120e8 <rcl_timer_get_guard_condition+0x10>
 80120de:	68c3      	ldr	r3, [r0, #12]
 80120e0:	b10b      	cbz	r3, 80120e6 <rcl_timer_get_guard_condition+0xe>
 80120e2:	3008      	adds	r0, #8
 80120e4:	4770      	bx	lr
 80120e6:	4618      	mov	r0, r3
 80120e8:	4770      	bx	lr
 80120ea:	bf00      	nop

080120ec <rcl_validate_enclave_name_with_size>:
 80120ec:	2800      	cmp	r0, #0
 80120ee:	d049      	beq.n	8012184 <rcl_validate_enclave_name_with_size+0x98>
 80120f0:	b570      	push	{r4, r5, r6, lr}
 80120f2:	4615      	mov	r5, r2
 80120f4:	b0c2      	sub	sp, #264	; 0x108
 80120f6:	b19a      	cbz	r2, 8012120 <rcl_validate_enclave_name_with_size+0x34>
 80120f8:	461e      	mov	r6, r3
 80120fa:	466a      	mov	r2, sp
 80120fc:	ab01      	add	r3, sp, #4
 80120fe:	460c      	mov	r4, r1
 8012100:	f001 ffca 	bl	8014098 <rmw_validate_namespace_with_size>
 8012104:	4684      	mov	ip, r0
 8012106:	b9b8      	cbnz	r0, 8012138 <rcl_validate_enclave_name_with_size+0x4c>
 8012108:	9900      	ldr	r1, [sp, #0]
 801210a:	b171      	cbz	r1, 801212a <rcl_validate_enclave_name_with_size+0x3e>
 801210c:	2907      	cmp	r1, #7
 801210e:	d019      	beq.n	8012144 <rcl_validate_enclave_name_with_size+0x58>
 8012110:	1e4b      	subs	r3, r1, #1
 8012112:	2b05      	cmp	r3, #5
 8012114:	d83a      	bhi.n	801218c <rcl_validate_enclave_name_with_size+0xa0>
 8012116:	e8df f003 	tbb	[pc, r3]
 801211a:	2926      	.short	0x2926
 801211c:	1d322f2c 	.word	0x1d322f2c
 8012120:	f04f 0c0b 	mov.w	ip, #11
 8012124:	4660      	mov	r0, ip
 8012126:	b042      	add	sp, #264	; 0x108
 8012128:	bd70      	pop	{r4, r5, r6, pc}
 801212a:	2907      	cmp	r1, #7
 801212c:	d00a      	beq.n	8012144 <rcl_validate_enclave_name_with_size+0x58>
 801212e:	2300      	movs	r3, #0
 8012130:	4660      	mov	r0, ip
 8012132:	602b      	str	r3, [r5, #0]
 8012134:	b042      	add	sp, #264	; 0x108
 8012136:	bd70      	pop	{r4, r5, r6, pc}
 8012138:	f7fe fd6c 	bl	8010c14 <rcl_convert_rmw_ret_to_rcl_ret>
 801213c:	4684      	mov	ip, r0
 801213e:	4660      	mov	r0, ip
 8012140:	b042      	add	sp, #264	; 0x108
 8012142:	bd70      	pop	{r4, r5, r6, pc}
 8012144:	2cff      	cmp	r4, #255	; 0xff
 8012146:	d9f2      	bls.n	801212e <rcl_validate_enclave_name_with_size+0x42>
 8012148:	6029      	str	r1, [r5, #0]
 801214a:	2e00      	cmp	r6, #0
 801214c:	d0ea      	beq.n	8012124 <rcl_validate_enclave_name_with_size+0x38>
 801214e:	23fe      	movs	r3, #254	; 0xfe
 8012150:	6033      	str	r3, [r6, #0]
 8012152:	e7e7      	b.n	8012124 <rcl_validate_enclave_name_with_size+0x38>
 8012154:	2306      	movs	r3, #6
 8012156:	602b      	str	r3, [r5, #0]
 8012158:	2e00      	cmp	r6, #0
 801215a:	d0e3      	beq.n	8012124 <rcl_validate_enclave_name_with_size+0x38>
 801215c:	9b01      	ldr	r3, [sp, #4]
 801215e:	4660      	mov	r0, ip
 8012160:	6033      	str	r3, [r6, #0]
 8012162:	b042      	add	sp, #264	; 0x108
 8012164:	bd70      	pop	{r4, r5, r6, pc}
 8012166:	2301      	movs	r3, #1
 8012168:	602b      	str	r3, [r5, #0]
 801216a:	e7f5      	b.n	8012158 <rcl_validate_enclave_name_with_size+0x6c>
 801216c:	2302      	movs	r3, #2
 801216e:	602b      	str	r3, [r5, #0]
 8012170:	e7f2      	b.n	8012158 <rcl_validate_enclave_name_with_size+0x6c>
 8012172:	2303      	movs	r3, #3
 8012174:	602b      	str	r3, [r5, #0]
 8012176:	e7ef      	b.n	8012158 <rcl_validate_enclave_name_with_size+0x6c>
 8012178:	2304      	movs	r3, #4
 801217a:	602b      	str	r3, [r5, #0]
 801217c:	e7ec      	b.n	8012158 <rcl_validate_enclave_name_with_size+0x6c>
 801217e:	2305      	movs	r3, #5
 8012180:	602b      	str	r3, [r5, #0]
 8012182:	e7e9      	b.n	8012158 <rcl_validate_enclave_name_with_size+0x6c>
 8012184:	f04f 0c0b 	mov.w	ip, #11
 8012188:	4660      	mov	r0, ip
 801218a:	4770      	bx	lr
 801218c:	460b      	mov	r3, r1
 801218e:	4a04      	ldr	r2, [pc, #16]	; (80121a0 <rcl_validate_enclave_name_with_size+0xb4>)
 8012190:	f44f 7180 	mov.w	r1, #256	; 0x100
 8012194:	a802      	add	r0, sp, #8
 8012196:	f001 fd33 	bl	8013c00 <rcutils_snprintf>
 801219a:	f04f 0c01 	mov.w	ip, #1
 801219e:	e7c1      	b.n	8012124 <rcl_validate_enclave_name_with_size+0x38>
 80121a0:	0801d370 	.word	0x0801d370

080121a4 <rcl_validate_enclave_name>:
 80121a4:	b168      	cbz	r0, 80121c2 <rcl_validate_enclave_name+0x1e>
 80121a6:	b570      	push	{r4, r5, r6, lr}
 80121a8:	460d      	mov	r5, r1
 80121aa:	4616      	mov	r6, r2
 80121ac:	4604      	mov	r4, r0
 80121ae:	f7ee f8a7 	bl	8000300 <strlen>
 80121b2:	4633      	mov	r3, r6
 80121b4:	4601      	mov	r1, r0
 80121b6:	462a      	mov	r2, r5
 80121b8:	4620      	mov	r0, r4
 80121ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80121be:	f7ff bf95 	b.w	80120ec <rcl_validate_enclave_name_with_size>
 80121c2:	200b      	movs	r0, #11
 80121c4:	4770      	bx	lr
 80121c6:	bf00      	nop

080121c8 <rcl_get_zero_initialized_wait_set>:
 80121c8:	b510      	push	{r4, lr}
 80121ca:	4c08      	ldr	r4, [pc, #32]	; (80121ec <rcl_get_zero_initialized_wait_set+0x24>)
 80121cc:	4686      	mov	lr, r0
 80121ce:	4684      	mov	ip, r0
 80121d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80121d2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80121d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80121d8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80121dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80121de:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80121e2:	6823      	ldr	r3, [r4, #0]
 80121e4:	4670      	mov	r0, lr
 80121e6:	f8cc 3000 	str.w	r3, [ip]
 80121ea:	bd10      	pop	{r4, pc}
 80121ec:	0801d3d0 	.word	0x0801d3d0

080121f0 <rcl_wait_set_is_valid>:
 80121f0:	b118      	cbz	r0, 80121fa <rcl_wait_set_is_valid+0xa>
 80121f2:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80121f4:	3800      	subs	r0, #0
 80121f6:	bf18      	it	ne
 80121f8:	2001      	movne	r0, #1
 80121fa:	4770      	bx	lr

080121fc <rcl_wait_set_fini>:
 80121fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012200:	b082      	sub	sp, #8
 8012202:	2800      	cmp	r0, #0
 8012204:	f000 8095 	beq.w	8012332 <rcl_wait_set_fini+0x136>
 8012208:	6b06      	ldr	r6, [r0, #48]	; 0x30
 801220a:	4604      	mov	r4, r0
 801220c:	2e00      	cmp	r6, #0
 801220e:	f000 808c 	beq.w	801232a <rcl_wait_set_fini+0x12e>
 8012212:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 8012214:	f003 f8ee 	bl	80153f4 <rmw_destroy_wait_set>
 8012218:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801221a:	1e06      	subs	r6, r0, #0
 801221c:	bf18      	it	ne
 801221e:	f44f 7661 	movne.w	r6, #900	; 0x384
 8012222:	2d00      	cmp	r5, #0
 8012224:	f000 8081 	beq.w	801232a <rcl_wait_set_fini+0x12e>
 8012228:	2700      	movs	r7, #0
 801222a:	6820      	ldr	r0, [r4, #0]
 801222c:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 8012230:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8012232:	6067      	str	r7, [r4, #4]
 8012234:	602f      	str	r7, [r5, #0]
 8012236:	b120      	cbz	r0, 8012242 <rcl_wait_set_fini+0x46>
 8012238:	9101      	str	r1, [sp, #4]
 801223a:	47c0      	blx	r8
 801223c:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801223e:	9901      	ldr	r1, [sp, #4]
 8012240:	6027      	str	r7, [r4, #0]
 8012242:	68a8      	ldr	r0, [r5, #8]
 8012244:	b120      	cbz	r0, 8012250 <rcl_wait_set_fini+0x54>
 8012246:	47c0      	blx	r8
 8012248:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801224a:	2300      	movs	r3, #0
 801224c:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8012250:	f04f 0800 	mov.w	r8, #0
 8012254:	68a0      	ldr	r0, [r4, #8]
 8012256:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8012258:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801225a:	f8c4 800c 	str.w	r8, [r4, #12]
 801225e:	f8c5 800c 	str.w	r8, [r5, #12]
 8012262:	b128      	cbz	r0, 8012270 <rcl_wait_set_fini+0x74>
 8012264:	47b8      	blx	r7
 8012266:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8012268:	f8c4 8008 	str.w	r8, [r4, #8]
 801226c:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 801226e:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8012270:	f04f 0800 	mov.w	r8, #0
 8012274:	6968      	ldr	r0, [r5, #20]
 8012276:	f8c5 8010 	str.w	r8, [r5, #16]
 801227a:	b128      	cbz	r0, 8012288 <rcl_wait_set_fini+0x8c>
 801227c:	47b8      	blx	r7
 801227e:	f8c5 8014 	str.w	r8, [r5, #20]
 8012282:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8012284:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8012286:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8012288:	f04f 0800 	mov.w	r8, #0
 801228c:	6920      	ldr	r0, [r4, #16]
 801228e:	f8c4 8014 	str.w	r8, [r4, #20]
 8012292:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40
 8012296:	b128      	cbz	r0, 80122a4 <rcl_wait_set_fini+0xa8>
 8012298:	47b8      	blx	r7
 801229a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801229c:	f8c4 8010 	str.w	r8, [r4, #16]
 80122a0:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 80122a2:	6da9      	ldr	r1, [r5, #88]	; 0x58
 80122a4:	f04f 0800 	mov.w	r8, #0
 80122a8:	69a0      	ldr	r0, [r4, #24]
 80122aa:	f8c4 801c 	str.w	r8, [r4, #28]
 80122ae:	f8c5 8018 	str.w	r8, [r5, #24]
 80122b2:	b128      	cbz	r0, 80122c0 <rcl_wait_set_fini+0xc4>
 80122b4:	9101      	str	r1, [sp, #4]
 80122b6:	47b8      	blx	r7
 80122b8:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80122ba:	9901      	ldr	r1, [sp, #4]
 80122bc:	f8c4 8018 	str.w	r8, [r4, #24]
 80122c0:	6a28      	ldr	r0, [r5, #32]
 80122c2:	b120      	cbz	r0, 80122ce <rcl_wait_set_fini+0xd2>
 80122c4:	47b8      	blx	r7
 80122c6:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80122c8:	2300      	movs	r3, #0
 80122ca:	e9c5 3307 	strd	r3, r3, [r5, #28]
 80122ce:	2700      	movs	r7, #0
 80122d0:	6a20      	ldr	r0, [r4, #32]
 80122d2:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 80122d6:	6da9      	ldr	r1, [r5, #88]	; 0x58
 80122d8:	6267      	str	r7, [r4, #36]	; 0x24
 80122da:	626f      	str	r7, [r5, #36]	; 0x24
 80122dc:	b120      	cbz	r0, 80122e8 <rcl_wait_set_fini+0xec>
 80122de:	9101      	str	r1, [sp, #4]
 80122e0:	47c0      	blx	r8
 80122e2:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80122e4:	9901      	ldr	r1, [sp, #4]
 80122e6:	6227      	str	r7, [r4, #32]
 80122e8:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80122ea:	b120      	cbz	r0, 80122f6 <rcl_wait_set_fini+0xfa>
 80122ec:	47c0      	blx	r8
 80122ee:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80122f0:	2300      	movs	r3, #0
 80122f2:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 80122f6:	2700      	movs	r7, #0
 80122f8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80122fa:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 80122fe:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8012300:	62e7      	str	r7, [r4, #44]	; 0x2c
 8012302:	632f      	str	r7, [r5, #48]	; 0x30
 8012304:	b120      	cbz	r0, 8012310 <rcl_wait_set_fini+0x114>
 8012306:	9101      	str	r1, [sp, #4]
 8012308:	47c0      	blx	r8
 801230a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801230c:	9901      	ldr	r1, [sp, #4]
 801230e:	62a7      	str	r7, [r4, #40]	; 0x28
 8012310:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8012312:	b120      	cbz	r0, 801231e <rcl_wait_set_fini+0x122>
 8012314:	47c0      	blx	r8
 8012316:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8012318:	2300      	movs	r3, #0
 801231a:	e9c5 330d 	strd	r3, r3, [r5, #52]	; 0x34
 801231e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8012320:	4628      	mov	r0, r5
 8012322:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8012324:	4798      	blx	r3
 8012326:	2300      	movs	r3, #0
 8012328:	6323      	str	r3, [r4, #48]	; 0x30
 801232a:	4630      	mov	r0, r6
 801232c:	b002      	add	sp, #8
 801232e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012332:	260b      	movs	r6, #11
 8012334:	4630      	mov	r0, r6
 8012336:	b002      	add	sp, #8
 8012338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801233c <rcl_wait_set_add_subscription>:
 801233c:	b318      	cbz	r0, 8012386 <rcl_wait_set_add_subscription+0x4a>
 801233e:	b538      	push	{r3, r4, r5, lr}
 8012340:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8012342:	4604      	mov	r4, r0
 8012344:	b30b      	cbz	r3, 801238a <rcl_wait_set_add_subscription+0x4e>
 8012346:	b319      	cbz	r1, 8012390 <rcl_wait_set_add_subscription+0x54>
 8012348:	681d      	ldr	r5, [r3, #0]
 801234a:	6840      	ldr	r0, [r0, #4]
 801234c:	4285      	cmp	r5, r0
 801234e:	d217      	bcs.n	8012380 <rcl_wait_set_add_subscription+0x44>
 8012350:	1c68      	adds	r0, r5, #1
 8012352:	6018      	str	r0, [r3, #0]
 8012354:	6823      	ldr	r3, [r4, #0]
 8012356:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801235a:	b102      	cbz	r2, 801235e <rcl_wait_set_add_subscription+0x22>
 801235c:	6015      	str	r5, [r2, #0]
 801235e:	4608      	mov	r0, r1
 8012360:	f7ff fcf4 	bl	8011d4c <rcl_subscription_get_rmw_handle>
 8012364:	b150      	cbz	r0, 801237c <rcl_wait_set_add_subscription+0x40>
 8012366:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8012368:	6842      	ldr	r2, [r0, #4]
 801236a:	2000      	movs	r0, #0
 801236c:	689b      	ldr	r3, [r3, #8]
 801236e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012372:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8012374:	6853      	ldr	r3, [r2, #4]
 8012376:	3301      	adds	r3, #1
 8012378:	6053      	str	r3, [r2, #4]
 801237a:	bd38      	pop	{r3, r4, r5, pc}
 801237c:	2001      	movs	r0, #1
 801237e:	bd38      	pop	{r3, r4, r5, pc}
 8012380:	f240 3086 	movw	r0, #902	; 0x386
 8012384:	bd38      	pop	{r3, r4, r5, pc}
 8012386:	200b      	movs	r0, #11
 8012388:	4770      	bx	lr
 801238a:	f44f 7061 	mov.w	r0, #900	; 0x384
 801238e:	bd38      	pop	{r3, r4, r5, pc}
 8012390:	200b      	movs	r0, #11
 8012392:	bd38      	pop	{r3, r4, r5, pc}

08012394 <rcl_wait_set_clear>:
 8012394:	2800      	cmp	r0, #0
 8012396:	d074      	beq.n	8012482 <rcl_wait_set_clear+0xee>
 8012398:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801239a:	b510      	push	{r4, lr}
 801239c:	4604      	mov	r4, r0
 801239e:	2b00      	cmp	r3, #0
 80123a0:	d071      	beq.n	8012486 <rcl_wait_set_clear+0xf2>
 80123a2:	6800      	ldr	r0, [r0, #0]
 80123a4:	b138      	cbz	r0, 80123b6 <rcl_wait_set_clear+0x22>
 80123a6:	6862      	ldr	r2, [r4, #4]
 80123a8:	2100      	movs	r1, #0
 80123aa:	0092      	lsls	r2, r2, #2
 80123ac:	f008 ffea 	bl	801b384 <memset>
 80123b0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80123b2:	2200      	movs	r2, #0
 80123b4:	601a      	str	r2, [r3, #0]
 80123b6:	68a0      	ldr	r0, [r4, #8]
 80123b8:	b138      	cbz	r0, 80123ca <rcl_wait_set_clear+0x36>
 80123ba:	68e2      	ldr	r2, [r4, #12]
 80123bc:	2100      	movs	r1, #0
 80123be:	0092      	lsls	r2, r2, #2
 80123c0:	f008 ffe0 	bl	801b384 <memset>
 80123c4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80123c6:	2200      	movs	r2, #0
 80123c8:	60da      	str	r2, [r3, #12]
 80123ca:	69a0      	ldr	r0, [r4, #24]
 80123cc:	b138      	cbz	r0, 80123de <rcl_wait_set_clear+0x4a>
 80123ce:	69e2      	ldr	r2, [r4, #28]
 80123d0:	2100      	movs	r1, #0
 80123d2:	0092      	lsls	r2, r2, #2
 80123d4:	f008 ffd6 	bl	801b384 <memset>
 80123d8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80123da:	2200      	movs	r2, #0
 80123dc:	619a      	str	r2, [r3, #24]
 80123de:	6a20      	ldr	r0, [r4, #32]
 80123e0:	b138      	cbz	r0, 80123f2 <rcl_wait_set_clear+0x5e>
 80123e2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80123e4:	2100      	movs	r1, #0
 80123e6:	0092      	lsls	r2, r2, #2
 80123e8:	f008 ffcc 	bl	801b384 <memset>
 80123ec:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80123ee:	2200      	movs	r2, #0
 80123f0:	625a      	str	r2, [r3, #36]	; 0x24
 80123f2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80123f4:	b138      	cbz	r0, 8012406 <rcl_wait_set_clear+0x72>
 80123f6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80123f8:	2100      	movs	r1, #0
 80123fa:	0092      	lsls	r2, r2, #2
 80123fc:	f008 ffc2 	bl	801b384 <memset>
 8012400:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8012402:	2200      	movs	r2, #0
 8012404:	631a      	str	r2, [r3, #48]	; 0x30
 8012406:	6920      	ldr	r0, [r4, #16]
 8012408:	b138      	cbz	r0, 801241a <rcl_wait_set_clear+0x86>
 801240a:	6962      	ldr	r2, [r4, #20]
 801240c:	2100      	movs	r1, #0
 801240e:	0092      	lsls	r2, r2, #2
 8012410:	f008 ffb8 	bl	801b384 <memset>
 8012414:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8012416:	2200      	movs	r2, #0
 8012418:	641a      	str	r2, [r3, #64]	; 0x40
 801241a:	6898      	ldr	r0, [r3, #8]
 801241c:	b138      	cbz	r0, 801242e <rcl_wait_set_clear+0x9a>
 801241e:	685a      	ldr	r2, [r3, #4]
 8012420:	2100      	movs	r1, #0
 8012422:	0092      	lsls	r2, r2, #2
 8012424:	f008 ffae 	bl	801b384 <memset>
 8012428:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801242a:	2200      	movs	r2, #0
 801242c:	605a      	str	r2, [r3, #4]
 801242e:	6958      	ldr	r0, [r3, #20]
 8012430:	b138      	cbz	r0, 8012442 <rcl_wait_set_clear+0xae>
 8012432:	691a      	ldr	r2, [r3, #16]
 8012434:	2100      	movs	r1, #0
 8012436:	0092      	lsls	r2, r2, #2
 8012438:	f008 ffa4 	bl	801b384 <memset>
 801243c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801243e:	2200      	movs	r2, #0
 8012440:	611a      	str	r2, [r3, #16]
 8012442:	6a18      	ldr	r0, [r3, #32]
 8012444:	b138      	cbz	r0, 8012456 <rcl_wait_set_clear+0xc2>
 8012446:	69da      	ldr	r2, [r3, #28]
 8012448:	2100      	movs	r1, #0
 801244a:	0092      	lsls	r2, r2, #2
 801244c:	f008 ff9a 	bl	801b384 <memset>
 8012450:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8012452:	2200      	movs	r2, #0
 8012454:	61da      	str	r2, [r3, #28]
 8012456:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8012458:	b138      	cbz	r0, 801246a <rcl_wait_set_clear+0xd6>
 801245a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801245c:	2100      	movs	r1, #0
 801245e:	0092      	lsls	r2, r2, #2
 8012460:	f008 ff90 	bl	801b384 <memset>
 8012464:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8012466:	2200      	movs	r2, #0
 8012468:	629a      	str	r2, [r3, #40]	; 0x28
 801246a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 801246c:	b140      	cbz	r0, 8012480 <rcl_wait_set_clear+0xec>
 801246e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012470:	2100      	movs	r1, #0
 8012472:	0092      	lsls	r2, r2, #2
 8012474:	f008 ff86 	bl	801b384 <memset>
 8012478:	2300      	movs	r3, #0
 801247a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801247c:	4618      	mov	r0, r3
 801247e:	6353      	str	r3, [r2, #52]	; 0x34
 8012480:	bd10      	pop	{r4, pc}
 8012482:	200b      	movs	r0, #11
 8012484:	4770      	bx	lr
 8012486:	f44f 7061 	mov.w	r0, #900	; 0x384
 801248a:	bd10      	pop	{r4, pc}

0801248c <rcl_wait_set_resize>:
 801248c:	2800      	cmp	r0, #0
 801248e:	f000 8180 	beq.w	8012792 <rcl_wait_set_resize+0x306>
 8012492:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012496:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8012498:	b083      	sub	sp, #12
 801249a:	4605      	mov	r5, r0
 801249c:	2c00      	cmp	r4, #0
 801249e:	f000 817a 	beq.w	8012796 <rcl_wait_set_resize+0x30a>
 80124a2:	f04f 0900 	mov.w	r9, #0
 80124a6:	461f      	mov	r7, r3
 80124a8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80124ac:	4688      	mov	r8, r1
 80124ae:	4616      	mov	r6, r2
 80124b0:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	; 0x4c
 80124b4:	f8c0 9004 	str.w	r9, [r0, #4]
 80124b8:	f8c4 9000 	str.w	r9, [r4]
 80124bc:	2900      	cmp	r1, #0
 80124be:	f000 80bf 	beq.w	8012640 <rcl_wait_set_resize+0x1b4>
 80124c2:	008c      	lsls	r4, r1, #2
 80124c4:	4652      	mov	r2, sl
 80124c6:	6800      	ldr	r0, [r0, #0]
 80124c8:	4621      	mov	r1, r4
 80124ca:	9301      	str	r3, [sp, #4]
 80124cc:	4798      	blx	r3
 80124ce:	9b01      	ldr	r3, [sp, #4]
 80124d0:	6028      	str	r0, [r5, #0]
 80124d2:	2800      	cmp	r0, #0
 80124d4:	f000 80f6 	beq.w	80126c4 <rcl_wait_set_resize+0x238>
 80124d8:	4622      	mov	r2, r4
 80124da:	4649      	mov	r1, r9
 80124dc:	9301      	str	r3, [sp, #4]
 80124de:	f008 ff51 	bl	801b384 <memset>
 80124e2:	f8c5 8004 	str.w	r8, [r5, #4]
 80124e6:	4652      	mov	r2, sl
 80124e8:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 80124ec:	4621      	mov	r1, r4
 80124ee:	9b01      	ldr	r3, [sp, #4]
 80124f0:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80124f4:	f8c8 9004 	str.w	r9, [r8, #4]
 80124f8:	4798      	blx	r3
 80124fa:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80124fc:	f8c8 0008 	str.w	r0, [r8, #8]
 8012500:	689b      	ldr	r3, [r3, #8]
 8012502:	2b00      	cmp	r3, #0
 8012504:	f000 814a 	beq.w	801279c <rcl_wait_set_resize+0x310>
 8012508:	4622      	mov	r2, r4
 801250a:	4649      	mov	r1, r9
 801250c:	4618      	mov	r0, r3
 801250e:	f008 ff39 	bl	801b384 <memset>
 8012512:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8012514:	f04f 0800 	mov.w	r8, #0
 8012518:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801251c:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	; 0x4c
 8012520:	f8c5 800c 	str.w	r8, [r5, #12]
 8012524:	f8c4 800c 	str.w	r8, [r4, #12]
 8012528:	2e00      	cmp	r6, #0
 801252a:	f040 809b 	bne.w	8012664 <rcl_wait_set_resize+0x1d8>
 801252e:	68a8      	ldr	r0, [r5, #8]
 8012530:	b128      	cbz	r0, 801253e <rcl_wait_set_resize+0xb2>
 8012532:	4649      	mov	r1, r9
 8012534:	4790      	blx	r2
 8012536:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8012538:	60ae      	str	r6, [r5, #8]
 801253a:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801253e:	f04f 0800 	mov.w	r8, #0
 8012542:	19f6      	adds	r6, r6, r7
 8012544:	f8c4 8010 	str.w	r8, [r4, #16]
 8012548:	f040 80a2 	bne.w	8012690 <rcl_wait_set_resize+0x204>
 801254c:	6960      	ldr	r0, [r4, #20]
 801254e:	b130      	cbz	r0, 801255e <rcl_wait_set_resize+0xd2>
 8012550:	4649      	mov	r1, r9
 8012552:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8012554:	4798      	blx	r3
 8012556:	6166      	str	r6, [r4, #20]
 8012558:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801255a:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801255e:	2600      	movs	r6, #0
 8012560:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 8012564:	616e      	str	r6, [r5, #20]
 8012566:	6426      	str	r6, [r4, #64]	; 0x40
 8012568:	2f00      	cmp	r7, #0
 801256a:	f040 80af 	bne.w	80126cc <rcl_wait_set_resize+0x240>
 801256e:	6928      	ldr	r0, [r5, #16]
 8012570:	b138      	cbz	r0, 8012582 <rcl_wait_set_resize+0xf6>
 8012572:	4649      	mov	r1, r9
 8012574:	47d0      	blx	sl
 8012576:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8012578:	612f      	str	r7, [r5, #16]
 801257a:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801257e:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 8012582:	2600      	movs	r6, #0
 8012584:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012586:	61ee      	str	r6, [r5, #28]
 8012588:	61a6      	str	r6, [r4, #24]
 801258a:	2b00      	cmp	r3, #0
 801258c:	f040 8093 	bne.w	80126b6 <rcl_wait_set_resize+0x22a>
 8012590:	69a8      	ldr	r0, [r5, #24]
 8012592:	b120      	cbz	r0, 801259e <rcl_wait_set_resize+0x112>
 8012594:	4649      	mov	r1, r9
 8012596:	47d0      	blx	sl
 8012598:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801259a:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801259c:	61ab      	str	r3, [r5, #24]
 801259e:	6a20      	ldr	r0, [r4, #32]
 80125a0:	b128      	cbz	r0, 80125ae <rcl_wait_set_resize+0x122>
 80125a2:	4649      	mov	r1, r9
 80125a4:	47d0      	blx	sl
 80125a6:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80125a8:	2300      	movs	r3, #0
 80125aa:	e9c4 3307 	strd	r3, r3, [r4, #28]
 80125ae:	2600      	movs	r6, #0
 80125b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80125b2:	6da7      	ldr	r7, [r4, #88]	; 0x58
 80125b4:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	; 0x4c
 80125b8:	626e      	str	r6, [r5, #36]	; 0x24
 80125ba:	6266      	str	r6, [r4, #36]	; 0x24
 80125bc:	2b00      	cmp	r3, #0
 80125be:	f000 8098 	beq.w	80126f2 <rcl_wait_set_resize+0x266>
 80125c2:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 80125c6:	463a      	mov	r2, r7
 80125c8:	6a28      	ldr	r0, [r5, #32]
 80125ca:	4651      	mov	r1, sl
 80125cc:	47c8      	blx	r9
 80125ce:	6228      	str	r0, [r5, #32]
 80125d0:	2800      	cmp	r0, #0
 80125d2:	d077      	beq.n	80126c4 <rcl_wait_set_resize+0x238>
 80125d4:	4652      	mov	r2, sl
 80125d6:	4631      	mov	r1, r6
 80125d8:	f008 fed4 	bl	801b384 <memset>
 80125dc:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80125de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80125e0:	463a      	mov	r2, r7
 80125e2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80125e4:	4651      	mov	r1, sl
 80125e6:	626b      	str	r3, [r5, #36]	; 0x24
 80125e8:	62a6      	str	r6, [r4, #40]	; 0x28
 80125ea:	47c8      	blx	r9
 80125ec:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80125ee:	62e0      	str	r0, [r4, #44]	; 0x2c
 80125f0:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80125f2:	2c00      	cmp	r4, #0
 80125f4:	f000 80f2 	beq.w	80127dc <rcl_wait_set_resize+0x350>
 80125f8:	4620      	mov	r0, r4
 80125fa:	4652      	mov	r2, sl
 80125fc:	4631      	mov	r1, r6
 80125fe:	f008 fec1 	bl	801b384 <memset>
 8012602:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8012604:	2600      	movs	r6, #0
 8012606:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012608:	6da7      	ldr	r7, [r4, #88]	; 0x58
 801260a:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	; 0x4c
 801260e:	62ee      	str	r6, [r5, #44]	; 0x2c
 8012610:	6326      	str	r6, [r4, #48]	; 0x30
 8012612:	2b00      	cmp	r3, #0
 8012614:	f040 8097 	bne.w	8012746 <rcl_wait_set_resize+0x2ba>
 8012618:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 801261a:	b120      	cbz	r0, 8012626 <rcl_wait_set_resize+0x19a>
 801261c:	4639      	mov	r1, r7
 801261e:	47c0      	blx	r8
 8012620:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012622:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8012624:	62ab      	str	r3, [r5, #40]	; 0x28
 8012626:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8012628:	2800      	cmp	r0, #0
 801262a:	d04c      	beq.n	80126c6 <rcl_wait_set_resize+0x23a>
 801262c:	4639      	mov	r1, r7
 801262e:	47c0      	blx	r8
 8012630:	2300      	movs	r3, #0
 8012632:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8012634:	4618      	mov	r0, r3
 8012636:	e9c2 330d 	strd	r3, r3, [r2, #52]	; 0x34
 801263a:	b003      	add	sp, #12
 801263c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012640:	6800      	ldr	r0, [r0, #0]
 8012642:	b120      	cbz	r0, 801264e <rcl_wait_set_resize+0x1c2>
 8012644:	4651      	mov	r1, sl
 8012646:	47d8      	blx	fp
 8012648:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801264a:	f8c5 8000 	str.w	r8, [r5]
 801264e:	68a0      	ldr	r0, [r4, #8]
 8012650:	2800      	cmp	r0, #0
 8012652:	f43f af5f 	beq.w	8012514 <rcl_wait_set_resize+0x88>
 8012656:	4651      	mov	r1, sl
 8012658:	47d8      	blx	fp
 801265a:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801265c:	2300      	movs	r3, #0
 801265e:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8012662:	e757      	b.n	8012514 <rcl_wait_set_resize+0x88>
 8012664:	00b4      	lsls	r4, r6, #2
 8012666:	464a      	mov	r2, r9
 8012668:	68a8      	ldr	r0, [r5, #8]
 801266a:	4621      	mov	r1, r4
 801266c:	4798      	blx	r3
 801266e:	60a8      	str	r0, [r5, #8]
 8012670:	b340      	cbz	r0, 80126c4 <rcl_wait_set_resize+0x238>
 8012672:	4622      	mov	r2, r4
 8012674:	4641      	mov	r1, r8
 8012676:	f008 fe85 	bl	801b384 <memset>
 801267a:	f04f 0800 	mov.w	r8, #0
 801267e:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8012680:	60ee      	str	r6, [r5, #12]
 8012682:	19f6      	adds	r6, r6, r7
 8012684:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8012688:	f8c4 8010 	str.w	r8, [r4, #16]
 801268c:	f43f af5e 	beq.w	801254c <rcl_wait_set_resize+0xc0>
 8012690:	00b6      	lsls	r6, r6, #2
 8012692:	464a      	mov	r2, r9
 8012694:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8012696:	6960      	ldr	r0, [r4, #20]
 8012698:	4631      	mov	r1, r6
 801269a:	4798      	blx	r3
 801269c:	4681      	mov	r9, r0
 801269e:	6160      	str	r0, [r4, #20]
 80126a0:	2800      	cmp	r0, #0
 80126a2:	f000 8084 	beq.w	80127ae <rcl_wait_set_resize+0x322>
 80126a6:	4632      	mov	r2, r6
 80126a8:	4641      	mov	r1, r8
 80126aa:	f008 fe6b 	bl	801b384 <memset>
 80126ae:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80126b0:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80126b4:	e753      	b.n	801255e <rcl_wait_set_resize+0xd2>
 80126b6:	009c      	lsls	r4, r3, #2
 80126b8:	464a      	mov	r2, r9
 80126ba:	69a8      	ldr	r0, [r5, #24]
 80126bc:	4621      	mov	r1, r4
 80126be:	47c0      	blx	r8
 80126c0:	61a8      	str	r0, [r5, #24]
 80126c2:	bb40      	cbnz	r0, 8012716 <rcl_wait_set_resize+0x28a>
 80126c4:	200a      	movs	r0, #10
 80126c6:	b003      	add	sp, #12
 80126c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126cc:	00bc      	lsls	r4, r7, #2
 80126ce:	464a      	mov	r2, r9
 80126d0:	6928      	ldr	r0, [r5, #16]
 80126d2:	4621      	mov	r1, r4
 80126d4:	47c0      	blx	r8
 80126d6:	6128      	str	r0, [r5, #16]
 80126d8:	2800      	cmp	r0, #0
 80126da:	d0f3      	beq.n	80126c4 <rcl_wait_set_resize+0x238>
 80126dc:	4622      	mov	r2, r4
 80126de:	4631      	mov	r1, r6
 80126e0:	f008 fe50 	bl	801b384 <memset>
 80126e4:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80126e6:	616f      	str	r7, [r5, #20]
 80126e8:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80126ec:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 80126f0:	e747      	b.n	8012582 <rcl_wait_set_resize+0xf6>
 80126f2:	6a28      	ldr	r0, [r5, #32]
 80126f4:	b120      	cbz	r0, 8012700 <rcl_wait_set_resize+0x274>
 80126f6:	4639      	mov	r1, r7
 80126f8:	47c0      	blx	r8
 80126fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80126fc:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80126fe:	622b      	str	r3, [r5, #32]
 8012700:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8012702:	2800      	cmp	r0, #0
 8012704:	f43f af7e 	beq.w	8012604 <rcl_wait_set_resize+0x178>
 8012708:	4639      	mov	r1, r7
 801270a:	47c0      	blx	r8
 801270c:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801270e:	2300      	movs	r3, #0
 8012710:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 8012714:	e776      	b.n	8012604 <rcl_wait_set_resize+0x178>
 8012716:	4622      	mov	r2, r4
 8012718:	4631      	mov	r1, r6
 801271a:	f008 fe33 	bl	801b384 <memset>
 801271e:	6b2f      	ldr	r7, [r5, #48]	; 0x30
 8012720:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012722:	464a      	mov	r2, r9
 8012724:	6a38      	ldr	r0, [r7, #32]
 8012726:	4621      	mov	r1, r4
 8012728:	61eb      	str	r3, [r5, #28]
 801272a:	61fe      	str	r6, [r7, #28]
 801272c:	47c0      	blx	r8
 801272e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8012730:	6238      	str	r0, [r7, #32]
 8012732:	6a1f      	ldr	r7, [r3, #32]
 8012734:	2f00      	cmp	r7, #0
 8012736:	d04a      	beq.n	80127ce <rcl_wait_set_resize+0x342>
 8012738:	4622      	mov	r2, r4
 801273a:	4631      	mov	r1, r6
 801273c:	4638      	mov	r0, r7
 801273e:	f008 fe21 	bl	801b384 <memset>
 8012742:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8012744:	e733      	b.n	80125ae <rcl_wait_set_resize+0x122>
 8012746:	009c      	lsls	r4, r3, #2
 8012748:	463a      	mov	r2, r7
 801274a:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 801274c:	4621      	mov	r1, r4
 801274e:	47c8      	blx	r9
 8012750:	62a8      	str	r0, [r5, #40]	; 0x28
 8012752:	2800      	cmp	r0, #0
 8012754:	d0b6      	beq.n	80126c4 <rcl_wait_set_resize+0x238>
 8012756:	4622      	mov	r2, r4
 8012758:	4631      	mov	r1, r6
 801275a:	f008 fe13 	bl	801b384 <memset>
 801275e:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 8012762:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012764:	463a      	mov	r2, r7
 8012766:	4621      	mov	r1, r4
 8012768:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 801276c:	62eb      	str	r3, [r5, #44]	; 0x2c
 801276e:	f8ca 6034 	str.w	r6, [sl, #52]	; 0x34
 8012772:	47c8      	blx	r9
 8012774:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8012776:	f8ca 0038 	str.w	r0, [sl, #56]	; 0x38
 801277a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801277c:	2b00      	cmp	r3, #0
 801277e:	d034      	beq.n	80127ea <rcl_wait_set_resize+0x35e>
 8012780:	4622      	mov	r2, r4
 8012782:	4631      	mov	r1, r6
 8012784:	4618      	mov	r0, r3
 8012786:	f008 fdfd 	bl	801b384 <memset>
 801278a:	4630      	mov	r0, r6
 801278c:	b003      	add	sp, #12
 801278e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012792:	200b      	movs	r0, #11
 8012794:	4770      	bx	lr
 8012796:	f44f 7061 	mov.w	r0, #900	; 0x384
 801279a:	e794      	b.n	80126c6 <rcl_wait_set_resize+0x23a>
 801279c:	6828      	ldr	r0, [r5, #0]
 801279e:	4651      	mov	r1, sl
 80127a0:	9301      	str	r3, [sp, #4]
 80127a2:	47d8      	blx	fp
 80127a4:	9b01      	ldr	r3, [sp, #4]
 80127a6:	200a      	movs	r0, #10
 80127a8:	e9c5 3300 	strd	r3, r3, [r5]
 80127ac:	e78b      	b.n	80126c6 <rcl_wait_set_resize+0x23a>
 80127ae:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80127b0:	68a8      	ldr	r0, [r5, #8]
 80127b2:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80127b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80127b6:	4798      	blx	r3
 80127b8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80127ba:	6928      	ldr	r0, [r5, #16]
 80127bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80127be:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80127c0:	e9c5 9902 	strd	r9, r9, [r5, #8]
 80127c4:	4790      	blx	r2
 80127c6:	200a      	movs	r0, #10
 80127c8:	e9c5 9904 	strd	r9, r9, [r5, #16]
 80127cc:	e77b      	b.n	80126c6 <rcl_wait_set_resize+0x23a>
 80127ce:	69a8      	ldr	r0, [r5, #24]
 80127d0:	4649      	mov	r1, r9
 80127d2:	47d0      	blx	sl
 80127d4:	200a      	movs	r0, #10
 80127d6:	e9c5 7706 	strd	r7, r7, [r5, #24]
 80127da:	e774      	b.n	80126c6 <rcl_wait_set_resize+0x23a>
 80127dc:	6a28      	ldr	r0, [r5, #32]
 80127de:	4639      	mov	r1, r7
 80127e0:	47c0      	blx	r8
 80127e2:	200a      	movs	r0, #10
 80127e4:	e9c5 4408 	strd	r4, r4, [r5, #32]
 80127e8:	e76d      	b.n	80126c6 <rcl_wait_set_resize+0x23a>
 80127ea:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 80127ec:	4639      	mov	r1, r7
 80127ee:	9301      	str	r3, [sp, #4]
 80127f0:	47c0      	blx	r8
 80127f2:	9b01      	ldr	r3, [sp, #4]
 80127f4:	200a      	movs	r0, #10
 80127f6:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 80127fa:	e764      	b.n	80126c6 <rcl_wait_set_resize+0x23a>

080127fc <rcl_wait_set_init>:
 80127fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012800:	b085      	sub	sp, #20
 8012802:	4605      	mov	r5, r0
 8012804:	460e      	mov	r6, r1
 8012806:	4617      	mov	r7, r2
 8012808:	a812      	add	r0, sp, #72	; 0x48
 801280a:	4698      	mov	r8, r3
 801280c:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
 8012810:	f7fb fa9a 	bl	800dd48 <rcutils_allocator_is_valid>
 8012814:	2d00      	cmp	r5, #0
 8012816:	d072      	beq.n	80128fe <rcl_wait_set_init+0x102>
 8012818:	f080 0001 	eor.w	r0, r0, #1
 801281c:	b2c0      	uxtb	r0, r0
 801281e:	2800      	cmp	r0, #0
 8012820:	d16d      	bne.n	80128fe <rcl_wait_set_init+0x102>
 8012822:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 8012826:	f1ba 0f00 	cmp.w	sl, #0
 801282a:	d004      	beq.n	8012836 <rcl_wait_set_init+0x3a>
 801282c:	2464      	movs	r4, #100	; 0x64
 801282e:	4620      	mov	r0, r4
 8012830:	b005      	add	sp, #20
 8012832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012836:	f1b9 0f00 	cmp.w	r9, #0
 801283a:	d060      	beq.n	80128fe <rcl_wait_set_init+0x102>
 801283c:	4648      	mov	r0, r9
 801283e:	f7fe fa07 	bl	8010c50 <rcl_context_is_valid>
 8012842:	2800      	cmp	r0, #0
 8012844:	d068      	beq.n	8012918 <rcl_wait_set_init+0x11c>
 8012846:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012848:	205c      	movs	r0, #92	; 0x5c
 801284a:	9916      	ldr	r1, [sp, #88]	; 0x58
 801284c:	4798      	blx	r3
 801284e:	6328      	str	r0, [r5, #48]	; 0x30
 8012850:	2800      	cmp	r0, #0
 8012852:	d063      	beq.n	801291c <rcl_wait_set_init+0x120>
 8012854:	225c      	movs	r2, #92	; 0x5c
 8012856:	4651      	mov	r1, sl
 8012858:	f008 fd94 	bl	801b384 <memset>
 801285c:	ac12      	add	r4, sp, #72	; 0x48
 801285e:	f8d5 b030 	ldr.w	fp, [r5, #48]	; 0x30
 8012862:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 8012866:	f10b 0c48 	add.w	ip, fp, #72	; 0x48
 801286a:	f8cb 9044 	str.w	r9, [fp, #68]	; 0x44
 801286e:	eb03 0e02 	add.w	lr, r3, r2
 8012872:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012874:	f8d9 9000 	ldr.w	r9, [r9]
 8012878:	449e      	add	lr, r3
 801287a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801287c:	e9cb aa01 	strd	sl, sl, [fp, #4]
 8012880:	e9cb aa04 	strd	sl, sl, [fp, #16]
 8012884:	e9cb aa07 	strd	sl, sl, [fp, #28]
 8012888:	e9cb aa0a 	strd	sl, sl, [fp, #40]	; 0x28
 801288c:	e9cb aa0d 	strd	sl, sl, [fp, #52]	; 0x34
 8012890:	44be      	add	lr, r7
 8012892:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012896:	6823      	ldr	r3, [r4, #0]
 8012898:	eb0e 0146 	add.w	r1, lr, r6, lsl #1
 801289c:	f109 0028 	add.w	r0, r9, #40	; 0x28
 80128a0:	f8cc 3000 	str.w	r3, [ip]
 80128a4:	f002 fd9c 	bl	80153e0 <rmw_create_wait_set>
 80128a8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80128aa:	f8cb 003c 	str.w	r0, [fp, #60]	; 0x3c
 80128ae:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80128b0:	b350      	cbz	r0, 8012908 <rcl_wait_set_init+0x10c>
 80128b2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80128b4:	4643      	mov	r3, r8
 80128b6:	463a      	mov	r2, r7
 80128b8:	4631      	mov	r1, r6
 80128ba:	9402      	str	r4, [sp, #8]
 80128bc:	4628      	mov	r0, r5
 80128be:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80128c0:	9401      	str	r4, [sp, #4]
 80128c2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80128c4:	9400      	str	r4, [sp, #0]
 80128c6:	f7ff fde1 	bl	801248c <rcl_wait_set_resize>
 80128ca:	4604      	mov	r4, r0
 80128cc:	2800      	cmp	r0, #0
 80128ce:	d0ae      	beq.n	801282e <rcl_wait_set_init+0x32>
 80128d0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80128d2:	bb2b      	cbnz	r3, 8012920 <rcl_wait_set_init+0x124>
 80128d4:	2600      	movs	r6, #0
 80128d6:	4628      	mov	r0, r5
 80128d8:	4633      	mov	r3, r6
 80128da:	4632      	mov	r2, r6
 80128dc:	4631      	mov	r1, r6
 80128de:	9600      	str	r6, [sp, #0]
 80128e0:	e9cd 6601 	strd	r6, r6, [sp, #4]
 80128e4:	f7ff fdd2 	bl	801248c <rcl_wait_set_resize>
 80128e8:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80128ea:	2800      	cmp	r0, #0
 80128ec:	d09f      	beq.n	801282e <rcl_wait_set_init+0x32>
 80128ee:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80128f0:	6d81      	ldr	r1, [r0, #88]	; 0x58
 80128f2:	4798      	blx	r3
 80128f4:	4620      	mov	r0, r4
 80128f6:	632e      	str	r6, [r5, #48]	; 0x30
 80128f8:	b005      	add	sp, #20
 80128fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128fe:	240b      	movs	r4, #11
 8012900:	4620      	mov	r0, r4
 8012902:	b005      	add	sp, #20
 8012904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012908:	2401      	movs	r4, #1
 801290a:	f002 fd73 	bl	80153f4 <rmw_destroy_wait_set>
 801290e:	2800      	cmp	r0, #0
 8012910:	bf18      	it	ne
 8012912:	f44f 7461 	movne.w	r4, #900	; 0x384
 8012916:	e7dd      	b.n	80128d4 <rcl_wait_set_init+0xd8>
 8012918:	2465      	movs	r4, #101	; 0x65
 801291a:	e788      	b.n	801282e <rcl_wait_set_init+0x32>
 801291c:	240a      	movs	r4, #10
 801291e:	e786      	b.n	801282e <rcl_wait_set_init+0x32>
 8012920:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8012922:	e7f2      	b.n	801290a <rcl_wait_set_init+0x10e>

08012924 <rcl_wait_set_add_guard_condition>:
 8012924:	b318      	cbz	r0, 801296e <rcl_wait_set_add_guard_condition+0x4a>
 8012926:	b538      	push	{r3, r4, r5, lr}
 8012928:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801292a:	4604      	mov	r4, r0
 801292c:	b30b      	cbz	r3, 8012972 <rcl_wait_set_add_guard_condition+0x4e>
 801292e:	b319      	cbz	r1, 8012978 <rcl_wait_set_add_guard_condition+0x54>
 8012930:	68dd      	ldr	r5, [r3, #12]
 8012932:	68c0      	ldr	r0, [r0, #12]
 8012934:	4285      	cmp	r5, r0
 8012936:	d217      	bcs.n	8012968 <rcl_wait_set_add_guard_condition+0x44>
 8012938:	1c68      	adds	r0, r5, #1
 801293a:	60d8      	str	r0, [r3, #12]
 801293c:	68a3      	ldr	r3, [r4, #8]
 801293e:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8012942:	b102      	cbz	r2, 8012946 <rcl_wait_set_add_guard_condition+0x22>
 8012944:	6015      	str	r5, [r2, #0]
 8012946:	4608      	mov	r0, r1
 8012948:	f006 fe56 	bl	80195f8 <rcl_guard_condition_get_rmw_handle>
 801294c:	b150      	cbz	r0, 8012964 <rcl_wait_set_add_guard_condition+0x40>
 801294e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8012950:	6842      	ldr	r2, [r0, #4]
 8012952:	2000      	movs	r0, #0
 8012954:	695b      	ldr	r3, [r3, #20]
 8012956:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801295a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801295c:	6913      	ldr	r3, [r2, #16]
 801295e:	3301      	adds	r3, #1
 8012960:	6113      	str	r3, [r2, #16]
 8012962:	bd38      	pop	{r3, r4, r5, pc}
 8012964:	2001      	movs	r0, #1
 8012966:	bd38      	pop	{r3, r4, r5, pc}
 8012968:	f240 3086 	movw	r0, #902	; 0x386
 801296c:	bd38      	pop	{r3, r4, r5, pc}
 801296e:	200b      	movs	r0, #11
 8012970:	4770      	bx	lr
 8012972:	f44f 7061 	mov.w	r0, #900	; 0x384
 8012976:	bd38      	pop	{r3, r4, r5, pc}
 8012978:	200b      	movs	r0, #11
 801297a:	bd38      	pop	{r3, r4, r5, pc}

0801297c <rcl_wait_set_add_timer>:
 801297c:	b328      	cbz	r0, 80129ca <rcl_wait_set_add_timer+0x4e>
 801297e:	b538      	push	{r3, r4, r5, lr}
 8012980:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8012982:	4604      	mov	r4, r0
 8012984:	b31b      	cbz	r3, 80129ce <rcl_wait_set_add_timer+0x52>
 8012986:	b329      	cbz	r1, 80129d4 <rcl_wait_set_add_timer+0x58>
 8012988:	6c18      	ldr	r0, [r3, #64]	; 0x40
 801298a:	6965      	ldr	r5, [r4, #20]
 801298c:	42a8      	cmp	r0, r5
 801298e:	d219      	bcs.n	80129c4 <rcl_wait_set_add_timer+0x48>
 8012990:	1c45      	adds	r5, r0, #1
 8012992:	641d      	str	r5, [r3, #64]	; 0x40
 8012994:	6923      	ldr	r3, [r4, #16]
 8012996:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 801299a:	b102      	cbz	r2, 801299e <rcl_wait_set_add_timer+0x22>
 801299c:	6010      	str	r0, [r2, #0]
 801299e:	4608      	mov	r0, r1
 80129a0:	f7ff fb9a 	bl	80120d8 <rcl_timer_get_guard_condition>
 80129a4:	b168      	cbz	r0, 80129c2 <rcl_wait_set_add_timer+0x46>
 80129a6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80129a8:	68e3      	ldr	r3, [r4, #12]
 80129aa:	6c15      	ldr	r5, [r2, #64]	; 0x40
 80129ac:	3b01      	subs	r3, #1
 80129ae:	441d      	add	r5, r3
 80129b0:	f006 fe22 	bl	80195f8 <rcl_guard_condition_get_rmw_handle>
 80129b4:	b180      	cbz	r0, 80129d8 <rcl_wait_set_add_timer+0x5c>
 80129b6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80129b8:	6842      	ldr	r2, [r0, #4]
 80129ba:	2000      	movs	r0, #0
 80129bc:	695b      	ldr	r3, [r3, #20]
 80129be:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80129c2:	bd38      	pop	{r3, r4, r5, pc}
 80129c4:	f240 3086 	movw	r0, #902	; 0x386
 80129c8:	bd38      	pop	{r3, r4, r5, pc}
 80129ca:	200b      	movs	r0, #11
 80129cc:	4770      	bx	lr
 80129ce:	f44f 7061 	mov.w	r0, #900	; 0x384
 80129d2:	bd38      	pop	{r3, r4, r5, pc}
 80129d4:	200b      	movs	r0, #11
 80129d6:	bd38      	pop	{r3, r4, r5, pc}
 80129d8:	2001      	movs	r0, #1
 80129da:	bd38      	pop	{r3, r4, r5, pc}

080129dc <rcl_wait_set_add_client>:
 80129dc:	b318      	cbz	r0, 8012a26 <rcl_wait_set_add_client+0x4a>
 80129de:	b538      	push	{r3, r4, r5, lr}
 80129e0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80129e2:	4604      	mov	r4, r0
 80129e4:	b30b      	cbz	r3, 8012a2a <rcl_wait_set_add_client+0x4e>
 80129e6:	b319      	cbz	r1, 8012a30 <rcl_wait_set_add_client+0x54>
 80129e8:	699d      	ldr	r5, [r3, #24]
 80129ea:	69c0      	ldr	r0, [r0, #28]
 80129ec:	4285      	cmp	r5, r0
 80129ee:	d217      	bcs.n	8012a20 <rcl_wait_set_add_client+0x44>
 80129f0:	1c68      	adds	r0, r5, #1
 80129f2:	6198      	str	r0, [r3, #24]
 80129f4:	69a3      	ldr	r3, [r4, #24]
 80129f6:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 80129fa:	b102      	cbz	r2, 80129fe <rcl_wait_set_add_client+0x22>
 80129fc:	6015      	str	r5, [r2, #0]
 80129fe:	4608      	mov	r0, r1
 8012a00:	f7fe f83c 	bl	8010a7c <rcl_client_get_rmw_handle>
 8012a04:	b150      	cbz	r0, 8012a1c <rcl_wait_set_add_client+0x40>
 8012a06:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8012a08:	6842      	ldr	r2, [r0, #4]
 8012a0a:	2000      	movs	r0, #0
 8012a0c:	6a1b      	ldr	r3, [r3, #32]
 8012a0e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012a12:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8012a14:	69d3      	ldr	r3, [r2, #28]
 8012a16:	3301      	adds	r3, #1
 8012a18:	61d3      	str	r3, [r2, #28]
 8012a1a:	bd38      	pop	{r3, r4, r5, pc}
 8012a1c:	2001      	movs	r0, #1
 8012a1e:	bd38      	pop	{r3, r4, r5, pc}
 8012a20:	f240 3086 	movw	r0, #902	; 0x386
 8012a24:	bd38      	pop	{r3, r4, r5, pc}
 8012a26:	200b      	movs	r0, #11
 8012a28:	4770      	bx	lr
 8012a2a:	f44f 7061 	mov.w	r0, #900	; 0x384
 8012a2e:	bd38      	pop	{r3, r4, r5, pc}
 8012a30:	200b      	movs	r0, #11
 8012a32:	bd38      	pop	{r3, r4, r5, pc}

08012a34 <rcl_wait_set_add_service>:
 8012a34:	b318      	cbz	r0, 8012a7e <rcl_wait_set_add_service+0x4a>
 8012a36:	b538      	push	{r3, r4, r5, lr}
 8012a38:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8012a3a:	4604      	mov	r4, r0
 8012a3c:	b30b      	cbz	r3, 8012a82 <rcl_wait_set_add_service+0x4e>
 8012a3e:	b319      	cbz	r1, 8012a88 <rcl_wait_set_add_service+0x54>
 8012a40:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8012a42:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8012a44:	4285      	cmp	r5, r0
 8012a46:	d217      	bcs.n	8012a78 <rcl_wait_set_add_service+0x44>
 8012a48:	1c68      	adds	r0, r5, #1
 8012a4a:	6258      	str	r0, [r3, #36]	; 0x24
 8012a4c:	6a23      	ldr	r3, [r4, #32]
 8012a4e:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8012a52:	b102      	cbz	r2, 8012a56 <rcl_wait_set_add_service+0x22>
 8012a54:	6015      	str	r5, [r2, #0]
 8012a56:	4608      	mov	r0, r1
 8012a58:	f7fe fff4 	bl	8011a44 <rcl_service_get_rmw_handle>
 8012a5c:	b150      	cbz	r0, 8012a74 <rcl_wait_set_add_service+0x40>
 8012a5e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8012a60:	6842      	ldr	r2, [r0, #4]
 8012a62:	2000      	movs	r0, #0
 8012a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a66:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012a6a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8012a6c:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8012a6e:	3301      	adds	r3, #1
 8012a70:	6293      	str	r3, [r2, #40]	; 0x28
 8012a72:	bd38      	pop	{r3, r4, r5, pc}
 8012a74:	2001      	movs	r0, #1
 8012a76:	bd38      	pop	{r3, r4, r5, pc}
 8012a78:	f240 3086 	movw	r0, #902	; 0x386
 8012a7c:	bd38      	pop	{r3, r4, r5, pc}
 8012a7e:	200b      	movs	r0, #11
 8012a80:	4770      	bx	lr
 8012a82:	f44f 7061 	mov.w	r0, #900	; 0x384
 8012a86:	bd38      	pop	{r3, r4, r5, pc}
 8012a88:	200b      	movs	r0, #11
 8012a8a:	bd38      	pop	{r3, r4, r5, pc}
 8012a8c:	0000      	movs	r0, r0
	...

08012a90 <rcl_wait>:
 8012a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a94:	ed2d 8b02 	vpush	{d8}
 8012a98:	b08d      	sub	sp, #52	; 0x34
 8012a9a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012a9e:	2800      	cmp	r0, #0
 8012aa0:	f000 814f 	beq.w	8012d42 <rcl_wait+0x2b2>
 8012aa4:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8012aa6:	4605      	mov	r5, r0
 8012aa8:	2e00      	cmp	r6, #0
 8012aaa:	f000 811a 	beq.w	8012ce2 <rcl_wait+0x252>
 8012aae:	6843      	ldr	r3, [r0, #4]
 8012ab0:	b983      	cbnz	r3, 8012ad4 <rcl_wait+0x44>
 8012ab2:	68eb      	ldr	r3, [r5, #12]
 8012ab4:	b973      	cbnz	r3, 8012ad4 <rcl_wait+0x44>
 8012ab6:	696b      	ldr	r3, [r5, #20]
 8012ab8:	b963      	cbnz	r3, 8012ad4 <rcl_wait+0x44>
 8012aba:	69eb      	ldr	r3, [r5, #28]
 8012abc:	b953      	cbnz	r3, 8012ad4 <rcl_wait+0x44>
 8012abe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012ac0:	b943      	cbnz	r3, 8012ad4 <rcl_wait+0x44>
 8012ac2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8012ac4:	b933      	cbnz	r3, 8012ad4 <rcl_wait+0x44>
 8012ac6:	f240 3085 	movw	r0, #901	; 0x385
 8012aca:	b00d      	add	sp, #52	; 0x34
 8012acc:	ecbd 8b02 	vpop	{d8}
 8012ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ad4:	9b04      	ldr	r3, [sp, #16]
 8012ad6:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8012ad8:	2b01      	cmp	r3, #1
 8012ada:	9b05      	ldr	r3, [sp, #20]
 8012adc:	f173 0300 	sbcs.w	r3, r3, #0
 8012ae0:	f2c0 80f8 	blt.w	8012cd4 <rcl_wait+0x244>
 8012ae4:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8012ae8:	2a00      	cmp	r2, #0
 8012aea:	f000 810f 	beq.w	8012d0c <rcl_wait+0x27c>
 8012aee:	2400      	movs	r4, #0
 8012af0:	4613      	mov	r3, r2
 8012af2:	f240 3921 	movw	r9, #801	; 0x321
 8012af6:	4632      	mov	r2, r6
 8012af8:	46a2      	mov	sl, r4
 8012afa:	46a3      	mov	fp, r4
 8012afc:	ed9f 8b98 	vldr	d8, [pc, #608]	; 8012d60 <rcl_wait+0x2d0>
 8012b00:	e014      	b.n	8012b2c <rcl_wait+0x9c>
 8012b02:	2800      	cmp	r0, #0
 8012b04:	d1e1      	bne.n	8012aca <rcl_wait+0x3a>
 8012b06:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8012b0a:	4542      	cmp	r2, r8
 8012b0c:	eb73 0107 	sbcs.w	r1, r3, r7
 8012b10:	da03      	bge.n	8012b1a <rcl_wait+0x8a>
 8012b12:	4690      	mov	r8, r2
 8012b14:	461f      	mov	r7, r3
 8012b16:	f04f 0b01 	mov.w	fp, #1
 8012b1a:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8012b1c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8012b1e:	3401      	adds	r4, #1
 8012b20:	f14a 0a00 	adc.w	sl, sl, #0
 8012b24:	429c      	cmp	r4, r3
 8012b26:	f17a 0100 	sbcs.w	r1, sl, #0
 8012b2a:	d228      	bcs.n	8012b7e <rcl_wait+0xee>
 8012b2c:	6928      	ldr	r0, [r5, #16]
 8012b2e:	a908      	add	r1, sp, #32
 8012b30:	00a6      	lsls	r6, r4, #2
 8012b32:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8012b36:	2800      	cmp	r0, #0
 8012b38:	d0f1      	beq.n	8012b1e <rcl_wait+0x8e>
 8012b3a:	68eb      	ldr	r3, [r5, #12]
 8012b3c:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8012b40:	4423      	add	r3, r4
 8012b42:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8012b46:	f1be 0f00 	cmp.w	lr, #0
 8012b4a:	d006      	beq.n	8012b5a <rcl_wait+0xca>
 8012b4c:	6913      	ldr	r3, [r2, #16]
 8012b4e:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 8012b52:	3301      	adds	r3, #1
 8012b54:	6113      	str	r3, [r2, #16]
 8012b56:	692b      	ldr	r3, [r5, #16]
 8012b58:	5998      	ldr	r0, [r3, r6]
 8012b5a:	ed8d 8b08 	vstr	d8, [sp, #32]
 8012b5e:	f7ff fa89 	bl	8012074 <rcl_timer_get_time_until_next_call>
 8012b62:	4548      	cmp	r0, r9
 8012b64:	d1cd      	bne.n	8012b02 <rcl_wait+0x72>
 8012b66:	692b      	ldr	r3, [r5, #16]
 8012b68:	2200      	movs	r2, #0
 8012b6a:	3401      	adds	r4, #1
 8012b6c:	519a      	str	r2, [r3, r6]
 8012b6e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8012b70:	f14a 0a00 	adc.w	sl, sl, #0
 8012b74:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8012b76:	429c      	cmp	r4, r3
 8012b78:	f17a 0100 	sbcs.w	r1, sl, #0
 8012b7c:	d3d6      	bcc.n	8012b2c <rcl_wait+0x9c>
 8012b7e:	4659      	mov	r1, fp
 8012b80:	4616      	mov	r6, r2
 8012b82:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8012b86:	4313      	orrs	r3, r2
 8012b88:	f040 80b4 	bne.w	8012cf4 <rcl_wait+0x264>
 8012b8c:	2300      	movs	r3, #0
 8012b8e:	2200      	movs	r2, #0
 8012b90:	460c      	mov	r4, r1
 8012b92:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8012b96:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8012b9a:	ab08      	add	r3, sp, #32
 8012b9c:	9302      	str	r3, [sp, #8]
 8012b9e:	f106 0334 	add.w	r3, r6, #52	; 0x34
 8012ba2:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 8012ba4:	f106 0110 	add.w	r1, r6, #16
 8012ba8:	9300      	str	r3, [sp, #0]
 8012baa:	1d30      	adds	r0, r6, #4
 8012bac:	f106 031c 	add.w	r3, r6, #28
 8012bb0:	9201      	str	r2, [sp, #4]
 8012bb2:	f106 0228 	add.w	r2, r6, #40	; 0x28
 8012bb6:	f002 faaf 	bl	8015118 <rmw_wait>
 8012bba:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8012bbc:	4680      	mov	r8, r0
 8012bbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8012bc0:	b1e2      	cbz	r2, 8012bfc <rcl_wait+0x16c>
 8012bc2:	f04f 0900 	mov.w	r9, #0
 8012bc6:	464f      	mov	r7, r9
 8012bc8:	692a      	ldr	r2, [r5, #16]
 8012bca:	f10d 011f 	add.w	r1, sp, #31
 8012bce:	ea4f 0689 	mov.w	r6, r9, lsl #2
 8012bd2:	f852 0029 	ldr.w	r0, [r2, r9, lsl #2]
 8012bd6:	b160      	cbz	r0, 8012bf2 <rcl_wait+0x162>
 8012bd8:	f88d 701f 	strb.w	r7, [sp, #31]
 8012bdc:	f7ff fa0e 	bl	8011ffc <rcl_timer_is_ready>
 8012be0:	2800      	cmp	r0, #0
 8012be2:	f47f af72 	bne.w	8012aca <rcl_wait+0x3a>
 8012be6:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8012bea:	b90b      	cbnz	r3, 8012bf0 <rcl_wait+0x160>
 8012bec:	692a      	ldr	r2, [r5, #16]
 8012bee:	5193      	str	r3, [r2, r6]
 8012bf0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8012bf2:	f109 0901 	add.w	r9, r9, #1
 8012bf6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8012bf8:	454a      	cmp	r2, r9
 8012bfa:	d8e5      	bhi.n	8012bc8 <rcl_wait+0x138>
 8012bfc:	f038 0002 	bics.w	r0, r8, #2
 8012c00:	d176      	bne.n	8012cf0 <rcl_wait+0x260>
 8012c02:	686f      	ldr	r7, [r5, #4]
 8012c04:	b17f      	cbz	r7, 8012c26 <rcl_wait+0x196>
 8012c06:	4602      	mov	r2, r0
 8012c08:	e002      	b.n	8012c10 <rcl_wait+0x180>
 8012c0a:	3201      	adds	r2, #1
 8012c0c:	42ba      	cmp	r2, r7
 8012c0e:	d00a      	beq.n	8012c26 <rcl_wait+0x196>
 8012c10:	6899      	ldr	r1, [r3, #8]
 8012c12:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8012c16:	2900      	cmp	r1, #0
 8012c18:	d1f7      	bne.n	8012c0a <rcl_wait+0x17a>
 8012c1a:	682e      	ldr	r6, [r5, #0]
 8012c1c:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8012c20:	3201      	adds	r2, #1
 8012c22:	42ba      	cmp	r2, r7
 8012c24:	d1f4      	bne.n	8012c10 <rcl_wait+0x180>
 8012c26:	68ef      	ldr	r7, [r5, #12]
 8012c28:	b17f      	cbz	r7, 8012c4a <rcl_wait+0x1ba>
 8012c2a:	2200      	movs	r2, #0
 8012c2c:	e002      	b.n	8012c34 <rcl_wait+0x1a4>
 8012c2e:	3201      	adds	r2, #1
 8012c30:	42ba      	cmp	r2, r7
 8012c32:	d00a      	beq.n	8012c4a <rcl_wait+0x1ba>
 8012c34:	6959      	ldr	r1, [r3, #20]
 8012c36:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8012c3a:	2900      	cmp	r1, #0
 8012c3c:	d1f7      	bne.n	8012c2e <rcl_wait+0x19e>
 8012c3e:	68ae      	ldr	r6, [r5, #8]
 8012c40:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8012c44:	3201      	adds	r2, #1
 8012c46:	42ba      	cmp	r2, r7
 8012c48:	d1f4      	bne.n	8012c34 <rcl_wait+0x1a4>
 8012c4a:	69ef      	ldr	r7, [r5, #28]
 8012c4c:	b17f      	cbz	r7, 8012c6e <rcl_wait+0x1de>
 8012c4e:	2200      	movs	r2, #0
 8012c50:	e002      	b.n	8012c58 <rcl_wait+0x1c8>
 8012c52:	3201      	adds	r2, #1
 8012c54:	42ba      	cmp	r2, r7
 8012c56:	d00a      	beq.n	8012c6e <rcl_wait+0x1de>
 8012c58:	6a19      	ldr	r1, [r3, #32]
 8012c5a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8012c5e:	2900      	cmp	r1, #0
 8012c60:	d1f7      	bne.n	8012c52 <rcl_wait+0x1c2>
 8012c62:	69ae      	ldr	r6, [r5, #24]
 8012c64:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8012c68:	3201      	adds	r2, #1
 8012c6a:	42ba      	cmp	r2, r7
 8012c6c:	d1f4      	bne.n	8012c58 <rcl_wait+0x1c8>
 8012c6e:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 8012c70:	b17f      	cbz	r7, 8012c92 <rcl_wait+0x202>
 8012c72:	2200      	movs	r2, #0
 8012c74:	e002      	b.n	8012c7c <rcl_wait+0x1ec>
 8012c76:	3201      	adds	r2, #1
 8012c78:	42ba      	cmp	r2, r7
 8012c7a:	d00a      	beq.n	8012c92 <rcl_wait+0x202>
 8012c7c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8012c7e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8012c82:	2900      	cmp	r1, #0
 8012c84:	d1f7      	bne.n	8012c76 <rcl_wait+0x1e6>
 8012c86:	6a2e      	ldr	r6, [r5, #32]
 8012c88:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8012c8c:	3201      	adds	r2, #1
 8012c8e:	42ba      	cmp	r2, r7
 8012c90:	d1f4      	bne.n	8012c7c <rcl_wait+0x1ec>
 8012c92:	6aef      	ldr	r7, [r5, #44]	; 0x2c
 8012c94:	b17f      	cbz	r7, 8012cb6 <rcl_wait+0x226>
 8012c96:	2200      	movs	r2, #0
 8012c98:	e002      	b.n	8012ca0 <rcl_wait+0x210>
 8012c9a:	3201      	adds	r2, #1
 8012c9c:	42ba      	cmp	r2, r7
 8012c9e:	d00a      	beq.n	8012cb6 <rcl_wait+0x226>
 8012ca0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8012ca2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8012ca6:	2900      	cmp	r1, #0
 8012ca8:	d1f7      	bne.n	8012c9a <rcl_wait+0x20a>
 8012caa:	6aae      	ldr	r6, [r5, #40]	; 0x28
 8012cac:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8012cb0:	3201      	adds	r2, #1
 8012cb2:	42ba      	cmp	r2, r7
 8012cb4:	d1f4      	bne.n	8012ca0 <rcl_wait+0x210>
 8012cb6:	f1b8 0f02 	cmp.w	r8, #2
 8012cba:	f47f af06 	bne.w	8012aca <rcl_wait+0x3a>
 8012cbe:	f084 0301 	eor.w	r3, r4, #1
 8012cc2:	b2db      	uxtb	r3, r3
 8012cc4:	2b00      	cmp	r3, #0
 8012cc6:	bf18      	it	ne
 8012cc8:	2002      	movne	r0, #2
 8012cca:	b00d      	add	sp, #52	; 0x34
 8012ccc:	ecbd 8b02 	vpop	{d8}
 8012cd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012cd4:	2a00      	cmp	r2, #0
 8012cd6:	d03a      	beq.n	8012d4e <rcl_wait+0x2be>
 8012cd8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8012cdc:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 8012ce0:	e705      	b.n	8012aee <rcl_wait+0x5e>
 8012ce2:	f44f 7061 	mov.w	r0, #900	; 0x384
 8012ce6:	b00d      	add	sp, #52	; 0x34
 8012ce8:	ecbd 8b02 	vpop	{d8}
 8012cec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012cf0:	2001      	movs	r0, #1
 8012cf2:	e6ea      	b.n	8012aca <rcl_wait+0x3a>
 8012cf4:	9b04      	ldr	r3, [sp, #16]
 8012cf6:	460c      	mov	r4, r1
 8012cf8:	2b01      	cmp	r3, #1
 8012cfa:	9b05      	ldr	r3, [sp, #20]
 8012cfc:	f173 0300 	sbcs.w	r3, r3, #0
 8012d00:	bfa8      	it	ge
 8012d02:	f044 0401 	orrge.w	r4, r4, #1
 8012d06:	b914      	cbnz	r4, 8012d0e <rcl_wait+0x27e>
 8012d08:	4623      	mov	r3, r4
 8012d0a:	e747      	b.n	8012b9c <rcl_wait+0x10c>
 8012d0c:	4611      	mov	r1, r2
 8012d0e:	2f00      	cmp	r7, #0
 8012d10:	da02      	bge.n	8012d18 <rcl_wait+0x288>
 8012d12:	f04f 0800 	mov.w	r8, #0
 8012d16:	4647      	mov	r7, r8
 8012d18:	460c      	mov	r4, r1
 8012d1a:	4640      	mov	r0, r8
 8012d1c:	4639      	mov	r1, r7
 8012d1e:	a312      	add	r3, pc, #72	; (adr r3, 8012d68 <rcl_wait+0x2d8>)
 8012d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d24:	f7ed faf4 	bl	8000310 <__aeabi_ldivmod>
 8012d28:	a30f      	add	r3, pc, #60	; (adr r3, 8012d68 <rcl_wait+0x2d8>)
 8012d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d2e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012d32:	4640      	mov	r0, r8
 8012d34:	4639      	mov	r1, r7
 8012d36:	f7ed faeb 	bl	8000310 <__aeabi_ldivmod>
 8012d3a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8012d3e:	ab08      	add	r3, sp, #32
 8012d40:	e72c      	b.n	8012b9c <rcl_wait+0x10c>
 8012d42:	200b      	movs	r0, #11
 8012d44:	b00d      	add	sp, #52	; 0x34
 8012d46:	ecbd 8b02 	vpop	{d8}
 8012d4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d4e:	4611      	mov	r1, r2
 8012d50:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8012d54:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 8012d58:	e713      	b.n	8012b82 <rcl_wait+0xf2>
 8012d5a:	bf00      	nop
 8012d5c:	f3af 8000 	nop.w
 8012d60:	ffffffff 	.word	0xffffffff
 8012d64:	7fffffff 	.word	0x7fffffff
 8012d68:	3b9aca00 	.word	0x3b9aca00
 8012d6c:	00000000 	.word	0x00000000

08012d70 <rcl_action_take_goal_response>:
 8012d70:	2800      	cmp	r0, #0
 8012d72:	d039      	beq.n	8012de8 <rcl_action_take_goal_response+0x78>
 8012d74:	b570      	push	{r4, r5, r6, lr}
 8012d76:	4604      	mov	r4, r0
 8012d78:	6800      	ldr	r0, [r0, #0]
 8012d7a:	b380      	cbz	r0, 8012dde <rcl_action_take_goal_response+0x6e>
 8012d7c:	460e      	mov	r6, r1
 8012d7e:	4615      	mov	r5, r2
 8012d80:	f7fd ff3e 	bl	8010c00 <rcl_client_is_valid>
 8012d84:	b330      	cbz	r0, 8012dd4 <rcl_action_take_goal_response+0x64>
 8012d86:	6820      	ldr	r0, [r4, #0]
 8012d88:	3004      	adds	r0, #4
 8012d8a:	f7fd ff39 	bl	8010c00 <rcl_client_is_valid>
 8012d8e:	b308      	cbz	r0, 8012dd4 <rcl_action_take_goal_response+0x64>
 8012d90:	6820      	ldr	r0, [r4, #0]
 8012d92:	3008      	adds	r0, #8
 8012d94:	f7fd ff34 	bl	8010c00 <rcl_client_is_valid>
 8012d98:	b1e0      	cbz	r0, 8012dd4 <rcl_action_take_goal_response+0x64>
 8012d9a:	6820      	ldr	r0, [r4, #0]
 8012d9c:	300c      	adds	r0, #12
 8012d9e:	f7fe ffdb 	bl	8011d58 <rcl_subscription_is_valid>
 8012da2:	b1b8      	cbz	r0, 8012dd4 <rcl_action_take_goal_response+0x64>
 8012da4:	6820      	ldr	r0, [r4, #0]
 8012da6:	3010      	adds	r0, #16
 8012da8:	f7fe ffd6 	bl	8011d58 <rcl_subscription_is_valid>
 8012dac:	b190      	cbz	r0, 8012dd4 <rcl_action_take_goal_response+0x64>
 8012dae:	b1cd      	cbz	r5, 8012de4 <rcl_action_take_goal_response+0x74>
 8012db0:	b1c6      	cbz	r6, 8012de4 <rcl_action_take_goal_response+0x74>
 8012db2:	462a      	mov	r2, r5
 8012db4:	4631      	mov	r1, r6
 8012db6:	6820      	ldr	r0, [r4, #0]
 8012db8:	f7fd feba 	bl	8010b30 <rcl_take_response>
 8012dbc:	b148      	cbz	r0, 8012dd2 <rcl_action_take_goal_response+0x62>
 8012dbe:	280a      	cmp	r0, #10
 8012dc0:	d007      	beq.n	8012dd2 <rcl_action_take_goal_response+0x62>
 8012dc2:	f240 12f5 	movw	r2, #501	; 0x1f5
 8012dc6:	f640 0337 	movw	r3, #2103	; 0x837
 8012dca:	4290      	cmp	r0, r2
 8012dcc:	bf0c      	ite	eq
 8012dce:	4618      	moveq	r0, r3
 8012dd0:	2001      	movne	r0, #1
 8012dd2:	bd70      	pop	{r4, r5, r6, pc}
 8012dd4:	f7fa ffdc 	bl	800dd90 <rcutils_reset_error>
 8012dd8:	f640 0036 	movw	r0, #2102	; 0x836
 8012ddc:	bd70      	pop	{r4, r5, r6, pc}
 8012dde:	f640 0036 	movw	r0, #2102	; 0x836
 8012de2:	bd70      	pop	{r4, r5, r6, pc}
 8012de4:	200b      	movs	r0, #11
 8012de6:	bd70      	pop	{r4, r5, r6, pc}
 8012de8:	f640 0036 	movw	r0, #2102	; 0x836
 8012dec:	4770      	bx	lr
 8012dee:	bf00      	nop

08012df0 <rcl_action_send_result_request>:
 8012df0:	b390      	cbz	r0, 8012e58 <rcl_action_send_result_request+0x68>
 8012df2:	b570      	push	{r4, r5, r6, lr}
 8012df4:	4604      	mov	r4, r0
 8012df6:	6800      	ldr	r0, [r0, #0]
 8012df8:	b348      	cbz	r0, 8012e4e <rcl_action_send_result_request+0x5e>
 8012dfa:	460e      	mov	r6, r1
 8012dfc:	4615      	mov	r5, r2
 8012dfe:	f7fd feff 	bl	8010c00 <rcl_client_is_valid>
 8012e02:	b1f8      	cbz	r0, 8012e44 <rcl_action_send_result_request+0x54>
 8012e04:	6820      	ldr	r0, [r4, #0]
 8012e06:	3004      	adds	r0, #4
 8012e08:	f7fd fefa 	bl	8010c00 <rcl_client_is_valid>
 8012e0c:	b1d0      	cbz	r0, 8012e44 <rcl_action_send_result_request+0x54>
 8012e0e:	6820      	ldr	r0, [r4, #0]
 8012e10:	3008      	adds	r0, #8
 8012e12:	f7fd fef5 	bl	8010c00 <rcl_client_is_valid>
 8012e16:	b1a8      	cbz	r0, 8012e44 <rcl_action_send_result_request+0x54>
 8012e18:	6820      	ldr	r0, [r4, #0]
 8012e1a:	300c      	adds	r0, #12
 8012e1c:	f7fe ff9c 	bl	8011d58 <rcl_subscription_is_valid>
 8012e20:	b180      	cbz	r0, 8012e44 <rcl_action_send_result_request+0x54>
 8012e22:	6820      	ldr	r0, [r4, #0]
 8012e24:	3010      	adds	r0, #16
 8012e26:	f7fe ff97 	bl	8011d58 <rcl_subscription_is_valid>
 8012e2a:	b158      	cbz	r0, 8012e44 <rcl_action_send_result_request+0x54>
 8012e2c:	b195      	cbz	r5, 8012e54 <rcl_action_send_result_request+0x64>
 8012e2e:	b18e      	cbz	r6, 8012e54 <rcl_action_send_result_request+0x64>
 8012e30:	6820      	ldr	r0, [r4, #0]
 8012e32:	462a      	mov	r2, r5
 8012e34:	4631      	mov	r1, r6
 8012e36:	3008      	adds	r0, #8
 8012e38:	f7fd fe26 	bl	8010a88 <rcl_send_request>
 8012e3c:	3800      	subs	r0, #0
 8012e3e:	bf18      	it	ne
 8012e40:	2001      	movne	r0, #1
 8012e42:	bd70      	pop	{r4, r5, r6, pc}
 8012e44:	f7fa ffa4 	bl	800dd90 <rcutils_reset_error>
 8012e48:	f640 0036 	movw	r0, #2102	; 0x836
 8012e4c:	bd70      	pop	{r4, r5, r6, pc}
 8012e4e:	f640 0036 	movw	r0, #2102	; 0x836
 8012e52:	bd70      	pop	{r4, r5, r6, pc}
 8012e54:	200b      	movs	r0, #11
 8012e56:	bd70      	pop	{r4, r5, r6, pc}
 8012e58:	f640 0036 	movw	r0, #2102	; 0x836
 8012e5c:	4770      	bx	lr
 8012e5e:	bf00      	nop

08012e60 <rcl_action_take_result_response>:
 8012e60:	2800      	cmp	r0, #0
 8012e62:	d03a      	beq.n	8012eda <rcl_action_take_result_response+0x7a>
 8012e64:	b570      	push	{r4, r5, r6, lr}
 8012e66:	4604      	mov	r4, r0
 8012e68:	6800      	ldr	r0, [r0, #0]
 8012e6a:	b388      	cbz	r0, 8012ed0 <rcl_action_take_result_response+0x70>
 8012e6c:	460e      	mov	r6, r1
 8012e6e:	4615      	mov	r5, r2
 8012e70:	f7fd fec6 	bl	8010c00 <rcl_client_is_valid>
 8012e74:	b338      	cbz	r0, 8012ec6 <rcl_action_take_result_response+0x66>
 8012e76:	6820      	ldr	r0, [r4, #0]
 8012e78:	3004      	adds	r0, #4
 8012e7a:	f7fd fec1 	bl	8010c00 <rcl_client_is_valid>
 8012e7e:	b310      	cbz	r0, 8012ec6 <rcl_action_take_result_response+0x66>
 8012e80:	6820      	ldr	r0, [r4, #0]
 8012e82:	3008      	adds	r0, #8
 8012e84:	f7fd febc 	bl	8010c00 <rcl_client_is_valid>
 8012e88:	b1e8      	cbz	r0, 8012ec6 <rcl_action_take_result_response+0x66>
 8012e8a:	6820      	ldr	r0, [r4, #0]
 8012e8c:	300c      	adds	r0, #12
 8012e8e:	f7fe ff63 	bl	8011d58 <rcl_subscription_is_valid>
 8012e92:	b1c0      	cbz	r0, 8012ec6 <rcl_action_take_result_response+0x66>
 8012e94:	6820      	ldr	r0, [r4, #0]
 8012e96:	3010      	adds	r0, #16
 8012e98:	f7fe ff5e 	bl	8011d58 <rcl_subscription_is_valid>
 8012e9c:	b198      	cbz	r0, 8012ec6 <rcl_action_take_result_response+0x66>
 8012e9e:	b1d5      	cbz	r5, 8012ed6 <rcl_action_take_result_response+0x76>
 8012ea0:	b1ce      	cbz	r6, 8012ed6 <rcl_action_take_result_response+0x76>
 8012ea2:	6820      	ldr	r0, [r4, #0]
 8012ea4:	462a      	mov	r2, r5
 8012ea6:	4631      	mov	r1, r6
 8012ea8:	3008      	adds	r0, #8
 8012eaa:	f7fd fe41 	bl	8010b30 <rcl_take_response>
 8012eae:	b148      	cbz	r0, 8012ec4 <rcl_action_take_result_response+0x64>
 8012eb0:	280a      	cmp	r0, #10
 8012eb2:	d007      	beq.n	8012ec4 <rcl_action_take_result_response+0x64>
 8012eb4:	f240 12f5 	movw	r2, #501	; 0x1f5
 8012eb8:	f640 0337 	movw	r3, #2103	; 0x837
 8012ebc:	4290      	cmp	r0, r2
 8012ebe:	bf0c      	ite	eq
 8012ec0:	4618      	moveq	r0, r3
 8012ec2:	2001      	movne	r0, #1
 8012ec4:	bd70      	pop	{r4, r5, r6, pc}
 8012ec6:	f7fa ff63 	bl	800dd90 <rcutils_reset_error>
 8012eca:	f640 0036 	movw	r0, #2102	; 0x836
 8012ece:	bd70      	pop	{r4, r5, r6, pc}
 8012ed0:	f640 0036 	movw	r0, #2102	; 0x836
 8012ed4:	bd70      	pop	{r4, r5, r6, pc}
 8012ed6:	200b      	movs	r0, #11
 8012ed8:	bd70      	pop	{r4, r5, r6, pc}
 8012eda:	f640 0036 	movw	r0, #2102	; 0x836
 8012ede:	4770      	bx	lr

08012ee0 <rcl_action_take_cancel_response>:
 8012ee0:	2800      	cmp	r0, #0
 8012ee2:	d03a      	beq.n	8012f5a <rcl_action_take_cancel_response+0x7a>
 8012ee4:	b570      	push	{r4, r5, r6, lr}
 8012ee6:	4604      	mov	r4, r0
 8012ee8:	6800      	ldr	r0, [r0, #0]
 8012eea:	b388      	cbz	r0, 8012f50 <rcl_action_take_cancel_response+0x70>
 8012eec:	460e      	mov	r6, r1
 8012eee:	4615      	mov	r5, r2
 8012ef0:	f7fd fe86 	bl	8010c00 <rcl_client_is_valid>
 8012ef4:	b338      	cbz	r0, 8012f46 <rcl_action_take_cancel_response+0x66>
 8012ef6:	6820      	ldr	r0, [r4, #0]
 8012ef8:	3004      	adds	r0, #4
 8012efa:	f7fd fe81 	bl	8010c00 <rcl_client_is_valid>
 8012efe:	b310      	cbz	r0, 8012f46 <rcl_action_take_cancel_response+0x66>
 8012f00:	6820      	ldr	r0, [r4, #0]
 8012f02:	3008      	adds	r0, #8
 8012f04:	f7fd fe7c 	bl	8010c00 <rcl_client_is_valid>
 8012f08:	b1e8      	cbz	r0, 8012f46 <rcl_action_take_cancel_response+0x66>
 8012f0a:	6820      	ldr	r0, [r4, #0]
 8012f0c:	300c      	adds	r0, #12
 8012f0e:	f7fe ff23 	bl	8011d58 <rcl_subscription_is_valid>
 8012f12:	b1c0      	cbz	r0, 8012f46 <rcl_action_take_cancel_response+0x66>
 8012f14:	6820      	ldr	r0, [r4, #0]
 8012f16:	3010      	adds	r0, #16
 8012f18:	f7fe ff1e 	bl	8011d58 <rcl_subscription_is_valid>
 8012f1c:	b198      	cbz	r0, 8012f46 <rcl_action_take_cancel_response+0x66>
 8012f1e:	b1d5      	cbz	r5, 8012f56 <rcl_action_take_cancel_response+0x76>
 8012f20:	b1ce      	cbz	r6, 8012f56 <rcl_action_take_cancel_response+0x76>
 8012f22:	6820      	ldr	r0, [r4, #0]
 8012f24:	462a      	mov	r2, r5
 8012f26:	4631      	mov	r1, r6
 8012f28:	3004      	adds	r0, #4
 8012f2a:	f7fd fe01 	bl	8010b30 <rcl_take_response>
 8012f2e:	b148      	cbz	r0, 8012f44 <rcl_action_take_cancel_response+0x64>
 8012f30:	280a      	cmp	r0, #10
 8012f32:	d007      	beq.n	8012f44 <rcl_action_take_cancel_response+0x64>
 8012f34:	f240 12f5 	movw	r2, #501	; 0x1f5
 8012f38:	f640 0337 	movw	r3, #2103	; 0x837
 8012f3c:	4290      	cmp	r0, r2
 8012f3e:	bf0c      	ite	eq
 8012f40:	4618      	moveq	r0, r3
 8012f42:	2001      	movne	r0, #1
 8012f44:	bd70      	pop	{r4, r5, r6, pc}
 8012f46:	f7fa ff23 	bl	800dd90 <rcutils_reset_error>
 8012f4a:	f640 0036 	movw	r0, #2102	; 0x836
 8012f4e:	bd70      	pop	{r4, r5, r6, pc}
 8012f50:	f640 0036 	movw	r0, #2102	; 0x836
 8012f54:	bd70      	pop	{r4, r5, r6, pc}
 8012f56:	200b      	movs	r0, #11
 8012f58:	bd70      	pop	{r4, r5, r6, pc}
 8012f5a:	f640 0036 	movw	r0, #2102	; 0x836
 8012f5e:	4770      	bx	lr

08012f60 <rcl_action_take_feedback>:
 8012f60:	2800      	cmp	r0, #0
 8012f62:	d038      	beq.n	8012fd6 <rcl_action_take_feedback+0x76>
 8012f64:	b530      	push	{r4, r5, lr}
 8012f66:	4604      	mov	r4, r0
 8012f68:	6800      	ldr	r0, [r0, #0]
 8012f6a:	b08f      	sub	sp, #60	; 0x3c
 8012f6c:	b378      	cbz	r0, 8012fce <rcl_action_take_feedback+0x6e>
 8012f6e:	460d      	mov	r5, r1
 8012f70:	f7fd fe46 	bl	8010c00 <rcl_client_is_valid>
 8012f74:	b328      	cbz	r0, 8012fc2 <rcl_action_take_feedback+0x62>
 8012f76:	6820      	ldr	r0, [r4, #0]
 8012f78:	3004      	adds	r0, #4
 8012f7a:	f7fd fe41 	bl	8010c00 <rcl_client_is_valid>
 8012f7e:	b300      	cbz	r0, 8012fc2 <rcl_action_take_feedback+0x62>
 8012f80:	6820      	ldr	r0, [r4, #0]
 8012f82:	3008      	adds	r0, #8
 8012f84:	f7fd fe3c 	bl	8010c00 <rcl_client_is_valid>
 8012f88:	b1d8      	cbz	r0, 8012fc2 <rcl_action_take_feedback+0x62>
 8012f8a:	6820      	ldr	r0, [r4, #0]
 8012f8c:	300c      	adds	r0, #12
 8012f8e:	f7fe fee3 	bl	8011d58 <rcl_subscription_is_valid>
 8012f92:	b1b0      	cbz	r0, 8012fc2 <rcl_action_take_feedback+0x62>
 8012f94:	6820      	ldr	r0, [r4, #0]
 8012f96:	3010      	adds	r0, #16
 8012f98:	f7fe fede 	bl	8011d58 <rcl_subscription_is_valid>
 8012f9c:	b188      	cbz	r0, 8012fc2 <rcl_action_take_feedback+0x62>
 8012f9e:	b1ed      	cbz	r5, 8012fdc <rcl_action_take_feedback+0x7c>
 8012fa0:	6820      	ldr	r0, [r4, #0]
 8012fa2:	2300      	movs	r3, #0
 8012fa4:	466a      	mov	r2, sp
 8012fa6:	4629      	mov	r1, r5
 8012fa8:	300c      	adds	r0, #12
 8012faa:	f7fe fe79 	bl	8011ca0 <rcl_take>
 8012fae:	b160      	cbz	r0, 8012fca <rcl_action_take_feedback+0x6a>
 8012fb0:	f240 1391 	movw	r3, #401	; 0x191
 8012fb4:	4298      	cmp	r0, r3
 8012fb6:	d014      	beq.n	8012fe2 <rcl_action_take_feedback+0x82>
 8012fb8:	280a      	cmp	r0, #10
 8012fba:	bf18      	it	ne
 8012fbc:	2001      	movne	r0, #1
 8012fbe:	b00f      	add	sp, #60	; 0x3c
 8012fc0:	bd30      	pop	{r4, r5, pc}
 8012fc2:	f7fa fee5 	bl	800dd90 <rcutils_reset_error>
 8012fc6:	f640 0036 	movw	r0, #2102	; 0x836
 8012fca:	b00f      	add	sp, #60	; 0x3c
 8012fcc:	bd30      	pop	{r4, r5, pc}
 8012fce:	f640 0036 	movw	r0, #2102	; 0x836
 8012fd2:	b00f      	add	sp, #60	; 0x3c
 8012fd4:	bd30      	pop	{r4, r5, pc}
 8012fd6:	f640 0036 	movw	r0, #2102	; 0x836
 8012fda:	4770      	bx	lr
 8012fdc:	200b      	movs	r0, #11
 8012fde:	b00f      	add	sp, #60	; 0x3c
 8012fe0:	bd30      	pop	{r4, r5, pc}
 8012fe2:	f640 0037 	movw	r0, #2103	; 0x837
 8012fe6:	e7f0      	b.n	8012fca <rcl_action_take_feedback+0x6a>

08012fe8 <rcl_action_wait_set_add_action_client>:
 8012fe8:	2800      	cmp	r0, #0
 8012fea:	d048      	beq.n	801307e <rcl_action_wait_set_add_action_client+0x96>
 8012fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012fee:	460c      	mov	r4, r1
 8012ff0:	2900      	cmp	r1, #0
 8012ff2:	d03c      	beq.n	801306e <rcl_action_wait_set_add_action_client+0x86>
 8012ff4:	4605      	mov	r5, r0
 8012ff6:	6808      	ldr	r0, [r1, #0]
 8012ff8:	2800      	cmp	r0, #0
 8012ffa:	d038      	beq.n	801306e <rcl_action_wait_set_add_action_client+0x86>
 8012ffc:	4617      	mov	r7, r2
 8012ffe:	461e      	mov	r6, r3
 8013000:	f7fd fdfe 	bl	8010c00 <rcl_client_is_valid>
 8013004:	b3b0      	cbz	r0, 8013074 <rcl_action_wait_set_add_action_client+0x8c>
 8013006:	6820      	ldr	r0, [r4, #0]
 8013008:	3004      	adds	r0, #4
 801300a:	f7fd fdf9 	bl	8010c00 <rcl_client_is_valid>
 801300e:	b388      	cbz	r0, 8013074 <rcl_action_wait_set_add_action_client+0x8c>
 8013010:	6820      	ldr	r0, [r4, #0]
 8013012:	3008      	adds	r0, #8
 8013014:	f7fd fdf4 	bl	8010c00 <rcl_client_is_valid>
 8013018:	b360      	cbz	r0, 8013074 <rcl_action_wait_set_add_action_client+0x8c>
 801301a:	6820      	ldr	r0, [r4, #0]
 801301c:	300c      	adds	r0, #12
 801301e:	f7fe fe9b 	bl	8011d58 <rcl_subscription_is_valid>
 8013022:	b338      	cbz	r0, 8013074 <rcl_action_wait_set_add_action_client+0x8c>
 8013024:	6820      	ldr	r0, [r4, #0]
 8013026:	3010      	adds	r0, #16
 8013028:	f7fe fe96 	bl	8011d58 <rcl_subscription_is_valid>
 801302c:	b310      	cbz	r0, 8013074 <rcl_action_wait_set_add_action_client+0x8c>
 801302e:	6821      	ldr	r1, [r4, #0]
 8013030:	4628      	mov	r0, r5
 8013032:	f501 72e2 	add.w	r2, r1, #452	; 0x1c4
 8013036:	f7ff fcd1 	bl	80129dc <rcl_wait_set_add_client>
 801303a:	b9b8      	cbnz	r0, 801306c <rcl_action_wait_set_add_action_client+0x84>
 801303c:	6821      	ldr	r1, [r4, #0]
 801303e:	4628      	mov	r0, r5
 8013040:	f501 72e4 	add.w	r2, r1, #456	; 0x1c8
 8013044:	3104      	adds	r1, #4
 8013046:	f7ff fcc9 	bl	80129dc <rcl_wait_set_add_client>
 801304a:	b978      	cbnz	r0, 801306c <rcl_action_wait_set_add_action_client+0x84>
 801304c:	6821      	ldr	r1, [r4, #0]
 801304e:	4628      	mov	r0, r5
 8013050:	f501 72e6 	add.w	r2, r1, #460	; 0x1cc
 8013054:	3108      	adds	r1, #8
 8013056:	f7ff fcc1 	bl	80129dc <rcl_wait_set_add_client>
 801305a:	b938      	cbnz	r0, 801306c <rcl_action_wait_set_add_action_client+0x84>
 801305c:	6821      	ldr	r1, [r4, #0]
 801305e:	4628      	mov	r0, r5
 8013060:	f501 72e8 	add.w	r2, r1, #464	; 0x1d0
 8013064:	310c      	adds	r1, #12
 8013066:	f7ff f969 	bl	801233c <rcl_wait_set_add_subscription>
 801306a:	b158      	cbz	r0, 8013084 <rcl_action_wait_set_add_action_client+0x9c>
 801306c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801306e:	f640 0036 	movw	r0, #2102	; 0x836
 8013072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013074:	f7fa fe8c 	bl	800dd90 <rcutils_reset_error>
 8013078:	f640 0036 	movw	r0, #2102	; 0x836
 801307c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801307e:	f44f 7061 	mov.w	r0, #900	; 0x384
 8013082:	4770      	bx	lr
 8013084:	6821      	ldr	r1, [r4, #0]
 8013086:	4628      	mov	r0, r5
 8013088:	f501 72ea 	add.w	r2, r1, #468	; 0x1d4
 801308c:	3110      	adds	r1, #16
 801308e:	f7ff f955 	bl	801233c <rcl_wait_set_add_subscription>
 8013092:	2800      	cmp	r0, #0
 8013094:	d1ea      	bne.n	801306c <rcl_action_wait_set_add_action_client+0x84>
 8013096:	b11f      	cbz	r7, 80130a0 <rcl_action_wait_set_add_action_client+0xb8>
 8013098:	6823      	ldr	r3, [r4, #0]
 801309a:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 801309e:	603b      	str	r3, [r7, #0]
 80130a0:	2e00      	cmp	r6, #0
 80130a2:	d0e3      	beq.n	801306c <rcl_action_wait_set_add_action_client+0x84>
 80130a4:	6823      	ldr	r3, [r4, #0]
 80130a6:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 80130aa:	6033      	str	r3, [r6, #0]
 80130ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80130ae:	bf00      	nop

080130b0 <rcl_action_client_wait_set_get_entities_ready>:
 80130b0:	2800      	cmp	r0, #0
 80130b2:	d050      	beq.n	8013156 <rcl_action_client_wait_set_get_entities_ready+0xa6>
 80130b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80130b8:	460c      	mov	r4, r1
 80130ba:	2900      	cmp	r1, #0
 80130bc:	d03e      	beq.n	801313c <rcl_action_client_wait_set_get_entities_ready+0x8c>
 80130be:	4605      	mov	r5, r0
 80130c0:	6808      	ldr	r0, [r1, #0]
 80130c2:	2800      	cmp	r0, #0
 80130c4:	d03a      	beq.n	801313c <rcl_action_client_wait_set_get_entities_ready+0x8c>
 80130c6:	4616      	mov	r6, r2
 80130c8:	461f      	mov	r7, r3
 80130ca:	f7fd fd99 	bl	8010c00 <rcl_client_is_valid>
 80130ce:	2800      	cmp	r0, #0
 80130d0:	d038      	beq.n	8013144 <rcl_action_client_wait_set_get_entities_ready+0x94>
 80130d2:	6820      	ldr	r0, [r4, #0]
 80130d4:	3004      	adds	r0, #4
 80130d6:	f7fd fd93 	bl	8010c00 <rcl_client_is_valid>
 80130da:	2800      	cmp	r0, #0
 80130dc:	d032      	beq.n	8013144 <rcl_action_client_wait_set_get_entities_ready+0x94>
 80130de:	6820      	ldr	r0, [r4, #0]
 80130e0:	3008      	adds	r0, #8
 80130e2:	f7fd fd8d 	bl	8010c00 <rcl_client_is_valid>
 80130e6:	b368      	cbz	r0, 8013144 <rcl_action_client_wait_set_get_entities_ready+0x94>
 80130e8:	6820      	ldr	r0, [r4, #0]
 80130ea:	300c      	adds	r0, #12
 80130ec:	f7fe fe34 	bl	8011d58 <rcl_subscription_is_valid>
 80130f0:	b340      	cbz	r0, 8013144 <rcl_action_client_wait_set_get_entities_ready+0x94>
 80130f2:	6820      	ldr	r0, [r4, #0]
 80130f4:	3010      	adds	r0, #16
 80130f6:	f7fe fe2f 	bl	8011d58 <rcl_subscription_is_valid>
 80130fa:	b318      	cbz	r0, 8013144 <rcl_action_client_wait_set_get_entities_ready+0x94>
 80130fc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8013100:	2a00      	cmp	r2, #0
 8013102:	bf18      	it	ne
 8013104:	2b00      	cmpne	r3, #0
 8013106:	9b08      	ldr	r3, [sp, #32]
 8013108:	bf0c      	ite	eq
 801310a:	2101      	moveq	r1, #1
 801310c:	2100      	movne	r1, #0
 801310e:	2b00      	cmp	r3, #0
 8013110:	bf08      	it	eq
 8013112:	f041 0101 	orreq.w	r1, r1, #1
 8013116:	2f00      	cmp	r7, #0
 8013118:	bf08      	it	eq
 801311a:	f041 0101 	orreq.w	r1, r1, #1
 801311e:	b9b9      	cbnz	r1, 8013150 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 8013120:	b1b6      	cbz	r6, 8013150 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 8013122:	6823      	ldr	r3, [r4, #0]
 8013124:	686c      	ldr	r4, [r5, #4]
 8013126:	e9d3 2174 	ldrd	r2, r1, [r3, #464]	; 0x1d0
 801312a:	428a      	cmp	r2, r1
 801312c:	4610      	mov	r0, r2
 801312e:	bf38      	it	cc
 8013130:	4608      	movcc	r0, r1
 8013132:	4284      	cmp	r4, r0
 8013134:	d812      	bhi.n	801315c <rcl_action_client_wait_set_get_entities_ready+0xac>
 8013136:	2001      	movs	r0, #1
 8013138:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801313c:	f640 0036 	movw	r0, #2102	; 0x836
 8013140:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013144:	f7fa fe24 	bl	800dd90 <rcutils_reset_error>
 8013148:	f640 0036 	movw	r0, #2102	; 0x836
 801314c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013150:	200b      	movs	r0, #11
 8013152:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013156:	f44f 7061 	mov.w	r0, #900	; 0x384
 801315a:	4770      	bx	lr
 801315c:	e9d3 8e71 	ldrd	r8, lr, [r3, #452]	; 0x1c4
 8013160:	f8d3 c1cc 	ldr.w	ip, [r3, #460]	; 0x1cc
 8013164:	45f0      	cmp	r8, lr
 8013166:	4640      	mov	r0, r8
 8013168:	69ec      	ldr	r4, [r5, #28]
 801316a:	bf38      	it	cc
 801316c:	4670      	movcc	r0, lr
 801316e:	4560      	cmp	r0, ip
 8013170:	bf38      	it	cc
 8013172:	4660      	movcc	r0, ip
 8013174:	4284      	cmp	r4, r0
 8013176:	d9de      	bls.n	8013136 <rcl_action_client_wait_set_get_entities_ready+0x86>
 8013178:	f8d5 9018 	ldr.w	r9, [r5, #24]
 801317c:	682d      	ldr	r5, [r5, #0]
 801317e:	f859 0028 	ldr.w	r0, [r9, r8, lsl #2]
 8013182:	f855 4021 	ldr.w	r4, [r5, r1, lsl #2]
 8013186:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801318a:	1a18      	subs	r0, r3, r0
 801318c:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 8013190:	f103 0c0c 	add.w	ip, r3, #12
 8013194:	f859 102e 	ldr.w	r1, [r9, lr, lsl #2]
 8013198:	fab0 f080 	clz	r0, r0
 801319c:	eba5 050c 	sub.w	r5, r5, ip
 80131a0:	0940      	lsrs	r0, r0, #5
 80131a2:	fab5 f585 	clz	r5, r5
 80131a6:	096d      	lsrs	r5, r5, #5
 80131a8:	7035      	strb	r5, [r6, #0]
 80131aa:	f103 0510 	add.w	r5, r3, #16
 80131ae:	1b64      	subs	r4, r4, r5
 80131b0:	9d08      	ldr	r5, [sp, #32]
 80131b2:	fab4 f484 	clz	r4, r4
 80131b6:	0964      	lsrs	r4, r4, #5
 80131b8:	703c      	strb	r4, [r7, #0]
 80131ba:	1d1c      	adds	r4, r3, #4
 80131bc:	3308      	adds	r3, #8
 80131be:	7028      	strb	r0, [r5, #0]
 80131c0:	1b09      	subs	r1, r1, r4
 80131c2:	2000      	movs	r0, #0
 80131c4:	1ad3      	subs	r3, r2, r3
 80131c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80131c8:	fab1 f181 	clz	r1, r1
 80131cc:	fab3 f383 	clz	r3, r3
 80131d0:	0949      	lsrs	r1, r1, #5
 80131d2:	095b      	lsrs	r3, r3, #5
 80131d4:	7011      	strb	r1, [r2, #0]
 80131d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80131d8:	7013      	strb	r3, [r2, #0]
 80131da:	e7b1      	b.n	8013140 <rcl_action_client_wait_set_get_entities_ready+0x90>

080131dc <rcl_action_take_goal_request>:
 80131dc:	2800      	cmp	r0, #0
 80131de:	d039      	beq.n	8013254 <rcl_action_take_goal_request+0x78>
 80131e0:	b570      	push	{r4, r5, r6, lr}
 80131e2:	4604      	mov	r4, r0
 80131e4:	6800      	ldr	r0, [r0, #0]
 80131e6:	b380      	cbz	r0, 801324a <rcl_action_take_goal_request+0x6e>
 80131e8:	460e      	mov	r6, r1
 80131ea:	4615      	mov	r5, r2
 80131ec:	f7fe fcb0 	bl	8011b50 <rcl_service_is_valid>
 80131f0:	b330      	cbz	r0, 8013240 <rcl_action_take_goal_request+0x64>
 80131f2:	6820      	ldr	r0, [r4, #0]
 80131f4:	3004      	adds	r0, #4
 80131f6:	f7fe fcab 	bl	8011b50 <rcl_service_is_valid>
 80131fa:	b308      	cbz	r0, 8013240 <rcl_action_take_goal_request+0x64>
 80131fc:	6820      	ldr	r0, [r4, #0]
 80131fe:	3008      	adds	r0, #8
 8013200:	f7fe fca6 	bl	8011b50 <rcl_service_is_valid>
 8013204:	b1e0      	cbz	r0, 8013240 <rcl_action_take_goal_request+0x64>
 8013206:	6820      	ldr	r0, [r4, #0]
 8013208:	300c      	adds	r0, #12
 801320a:	f006 fa1f 	bl	801964c <rcl_publisher_is_valid>
 801320e:	b1b8      	cbz	r0, 8013240 <rcl_action_take_goal_request+0x64>
 8013210:	6820      	ldr	r0, [r4, #0]
 8013212:	3010      	adds	r0, #16
 8013214:	f006 fa1a 	bl	801964c <rcl_publisher_is_valid>
 8013218:	b190      	cbz	r0, 8013240 <rcl_action_take_goal_request+0x64>
 801321a:	b1cd      	cbz	r5, 8013250 <rcl_action_take_goal_request+0x74>
 801321c:	b1c6      	cbz	r6, 8013250 <rcl_action_take_goal_request+0x74>
 801321e:	462a      	mov	r2, r5
 8013220:	4631      	mov	r1, r6
 8013222:	6820      	ldr	r0, [r4, #0]
 8013224:	f7fe fc14 	bl	8011a50 <rcl_take_request>
 8013228:	b148      	cbz	r0, 801323e <rcl_action_take_goal_request+0x62>
 801322a:	280a      	cmp	r0, #10
 801322c:	d007      	beq.n	801323e <rcl_action_take_goal_request+0x62>
 801322e:	f240 2259 	movw	r2, #601	; 0x259
 8013232:	f640 0399 	movw	r3, #2201	; 0x899
 8013236:	4290      	cmp	r0, r2
 8013238:	bf0c      	ite	eq
 801323a:	4618      	moveq	r0, r3
 801323c:	2001      	movne	r0, #1
 801323e:	bd70      	pop	{r4, r5, r6, pc}
 8013240:	f7fa fda6 	bl	800dd90 <rcutils_reset_error>
 8013244:	f640 0098 	movw	r0, #2200	; 0x898
 8013248:	bd70      	pop	{r4, r5, r6, pc}
 801324a:	f640 0098 	movw	r0, #2200	; 0x898
 801324e:	bd70      	pop	{r4, r5, r6, pc}
 8013250:	200b      	movs	r0, #11
 8013252:	bd70      	pop	{r4, r5, r6, pc}
 8013254:	f640 0098 	movw	r0, #2200	; 0x898
 8013258:	4770      	bx	lr
 801325a:	bf00      	nop

0801325c <rcl_action_send_goal_response>:
 801325c:	b388      	cbz	r0, 80132c2 <rcl_action_send_goal_response+0x66>
 801325e:	b570      	push	{r4, r5, r6, lr}
 8013260:	4604      	mov	r4, r0
 8013262:	6800      	ldr	r0, [r0, #0]
 8013264:	b340      	cbz	r0, 80132b8 <rcl_action_send_goal_response+0x5c>
 8013266:	460e      	mov	r6, r1
 8013268:	4615      	mov	r5, r2
 801326a:	f7fe fc71 	bl	8011b50 <rcl_service_is_valid>
 801326e:	b1f0      	cbz	r0, 80132ae <rcl_action_send_goal_response+0x52>
 8013270:	6820      	ldr	r0, [r4, #0]
 8013272:	3004      	adds	r0, #4
 8013274:	f7fe fc6c 	bl	8011b50 <rcl_service_is_valid>
 8013278:	b1c8      	cbz	r0, 80132ae <rcl_action_send_goal_response+0x52>
 801327a:	6820      	ldr	r0, [r4, #0]
 801327c:	3008      	adds	r0, #8
 801327e:	f7fe fc67 	bl	8011b50 <rcl_service_is_valid>
 8013282:	b1a0      	cbz	r0, 80132ae <rcl_action_send_goal_response+0x52>
 8013284:	6820      	ldr	r0, [r4, #0]
 8013286:	300c      	adds	r0, #12
 8013288:	f006 f9e0 	bl	801964c <rcl_publisher_is_valid>
 801328c:	b178      	cbz	r0, 80132ae <rcl_action_send_goal_response+0x52>
 801328e:	6820      	ldr	r0, [r4, #0]
 8013290:	3010      	adds	r0, #16
 8013292:	f006 f9db 	bl	801964c <rcl_publisher_is_valid>
 8013296:	b150      	cbz	r0, 80132ae <rcl_action_send_goal_response+0x52>
 8013298:	b18d      	cbz	r5, 80132be <rcl_action_send_goal_response+0x62>
 801329a:	b186      	cbz	r6, 80132be <rcl_action_send_goal_response+0x62>
 801329c:	462a      	mov	r2, r5
 801329e:	4631      	mov	r1, r6
 80132a0:	6820      	ldr	r0, [r4, #0]
 80132a2:	f7fe fc25 	bl	8011af0 <rcl_send_response>
 80132a6:	3800      	subs	r0, #0
 80132a8:	bf18      	it	ne
 80132aa:	2001      	movne	r0, #1
 80132ac:	bd70      	pop	{r4, r5, r6, pc}
 80132ae:	f7fa fd6f 	bl	800dd90 <rcutils_reset_error>
 80132b2:	f640 0098 	movw	r0, #2200	; 0x898
 80132b6:	bd70      	pop	{r4, r5, r6, pc}
 80132b8:	f640 0098 	movw	r0, #2200	; 0x898
 80132bc:	bd70      	pop	{r4, r5, r6, pc}
 80132be:	200b      	movs	r0, #11
 80132c0:	bd70      	pop	{r4, r5, r6, pc}
 80132c2:	f640 0098 	movw	r0, #2200	; 0x898
 80132c6:	4770      	bx	lr

080132c8 <rcl_action_take_result_request>:
 80132c8:	2800      	cmp	r0, #0
 80132ca:	d03a      	beq.n	8013342 <rcl_action_take_result_request+0x7a>
 80132cc:	b570      	push	{r4, r5, r6, lr}
 80132ce:	4604      	mov	r4, r0
 80132d0:	6800      	ldr	r0, [r0, #0]
 80132d2:	b388      	cbz	r0, 8013338 <rcl_action_take_result_request+0x70>
 80132d4:	460e      	mov	r6, r1
 80132d6:	4615      	mov	r5, r2
 80132d8:	f7fe fc3a 	bl	8011b50 <rcl_service_is_valid>
 80132dc:	b338      	cbz	r0, 801332e <rcl_action_take_result_request+0x66>
 80132de:	6820      	ldr	r0, [r4, #0]
 80132e0:	3004      	adds	r0, #4
 80132e2:	f7fe fc35 	bl	8011b50 <rcl_service_is_valid>
 80132e6:	b310      	cbz	r0, 801332e <rcl_action_take_result_request+0x66>
 80132e8:	6820      	ldr	r0, [r4, #0]
 80132ea:	3008      	adds	r0, #8
 80132ec:	f7fe fc30 	bl	8011b50 <rcl_service_is_valid>
 80132f0:	b1e8      	cbz	r0, 801332e <rcl_action_take_result_request+0x66>
 80132f2:	6820      	ldr	r0, [r4, #0]
 80132f4:	300c      	adds	r0, #12
 80132f6:	f006 f9a9 	bl	801964c <rcl_publisher_is_valid>
 80132fa:	b1c0      	cbz	r0, 801332e <rcl_action_take_result_request+0x66>
 80132fc:	6820      	ldr	r0, [r4, #0]
 80132fe:	3010      	adds	r0, #16
 8013300:	f006 f9a4 	bl	801964c <rcl_publisher_is_valid>
 8013304:	b198      	cbz	r0, 801332e <rcl_action_take_result_request+0x66>
 8013306:	b1d5      	cbz	r5, 801333e <rcl_action_take_result_request+0x76>
 8013308:	b1ce      	cbz	r6, 801333e <rcl_action_take_result_request+0x76>
 801330a:	6820      	ldr	r0, [r4, #0]
 801330c:	462a      	mov	r2, r5
 801330e:	4631      	mov	r1, r6
 8013310:	3008      	adds	r0, #8
 8013312:	f7fe fb9d 	bl	8011a50 <rcl_take_request>
 8013316:	b148      	cbz	r0, 801332c <rcl_action_take_result_request+0x64>
 8013318:	280a      	cmp	r0, #10
 801331a:	d007      	beq.n	801332c <rcl_action_take_result_request+0x64>
 801331c:	f240 2259 	movw	r2, #601	; 0x259
 8013320:	f640 0399 	movw	r3, #2201	; 0x899
 8013324:	4290      	cmp	r0, r2
 8013326:	bf0c      	ite	eq
 8013328:	4618      	moveq	r0, r3
 801332a:	2001      	movne	r0, #1
 801332c:	bd70      	pop	{r4, r5, r6, pc}
 801332e:	f7fa fd2f 	bl	800dd90 <rcutils_reset_error>
 8013332:	f640 0098 	movw	r0, #2200	; 0x898
 8013336:	bd70      	pop	{r4, r5, r6, pc}
 8013338:	f640 0098 	movw	r0, #2200	; 0x898
 801333c:	bd70      	pop	{r4, r5, r6, pc}
 801333e:	200b      	movs	r0, #11
 8013340:	bd70      	pop	{r4, r5, r6, pc}
 8013342:	f640 0098 	movw	r0, #2200	; 0x898
 8013346:	4770      	bx	lr

08013348 <rcl_action_take_cancel_request>:
 8013348:	2800      	cmp	r0, #0
 801334a:	d03a      	beq.n	80133c2 <rcl_action_take_cancel_request+0x7a>
 801334c:	b570      	push	{r4, r5, r6, lr}
 801334e:	4604      	mov	r4, r0
 8013350:	6800      	ldr	r0, [r0, #0]
 8013352:	b388      	cbz	r0, 80133b8 <rcl_action_take_cancel_request+0x70>
 8013354:	460e      	mov	r6, r1
 8013356:	4615      	mov	r5, r2
 8013358:	f7fe fbfa 	bl	8011b50 <rcl_service_is_valid>
 801335c:	b338      	cbz	r0, 80133ae <rcl_action_take_cancel_request+0x66>
 801335e:	6820      	ldr	r0, [r4, #0]
 8013360:	3004      	adds	r0, #4
 8013362:	f7fe fbf5 	bl	8011b50 <rcl_service_is_valid>
 8013366:	b310      	cbz	r0, 80133ae <rcl_action_take_cancel_request+0x66>
 8013368:	6820      	ldr	r0, [r4, #0]
 801336a:	3008      	adds	r0, #8
 801336c:	f7fe fbf0 	bl	8011b50 <rcl_service_is_valid>
 8013370:	b1e8      	cbz	r0, 80133ae <rcl_action_take_cancel_request+0x66>
 8013372:	6820      	ldr	r0, [r4, #0]
 8013374:	300c      	adds	r0, #12
 8013376:	f006 f969 	bl	801964c <rcl_publisher_is_valid>
 801337a:	b1c0      	cbz	r0, 80133ae <rcl_action_take_cancel_request+0x66>
 801337c:	6820      	ldr	r0, [r4, #0]
 801337e:	3010      	adds	r0, #16
 8013380:	f006 f964 	bl	801964c <rcl_publisher_is_valid>
 8013384:	b198      	cbz	r0, 80133ae <rcl_action_take_cancel_request+0x66>
 8013386:	b1d5      	cbz	r5, 80133be <rcl_action_take_cancel_request+0x76>
 8013388:	b1ce      	cbz	r6, 80133be <rcl_action_take_cancel_request+0x76>
 801338a:	6820      	ldr	r0, [r4, #0]
 801338c:	462a      	mov	r2, r5
 801338e:	4631      	mov	r1, r6
 8013390:	3004      	adds	r0, #4
 8013392:	f7fe fb5d 	bl	8011a50 <rcl_take_request>
 8013396:	b148      	cbz	r0, 80133ac <rcl_action_take_cancel_request+0x64>
 8013398:	280a      	cmp	r0, #10
 801339a:	d007      	beq.n	80133ac <rcl_action_take_cancel_request+0x64>
 801339c:	f240 2259 	movw	r2, #601	; 0x259
 80133a0:	f640 0399 	movw	r3, #2201	; 0x899
 80133a4:	4290      	cmp	r0, r2
 80133a6:	bf0c      	ite	eq
 80133a8:	4618      	moveq	r0, r3
 80133aa:	2001      	movne	r0, #1
 80133ac:	bd70      	pop	{r4, r5, r6, pc}
 80133ae:	f7fa fcef 	bl	800dd90 <rcutils_reset_error>
 80133b2:	f640 0098 	movw	r0, #2200	; 0x898
 80133b6:	bd70      	pop	{r4, r5, r6, pc}
 80133b8:	f640 0098 	movw	r0, #2200	; 0x898
 80133bc:	bd70      	pop	{r4, r5, r6, pc}
 80133be:	200b      	movs	r0, #11
 80133c0:	bd70      	pop	{r4, r5, r6, pc}
 80133c2:	f640 0098 	movw	r0, #2200	; 0x898
 80133c6:	4770      	bx	lr

080133c8 <rcl_action_send_cancel_response>:
 80133c8:	b390      	cbz	r0, 8013430 <rcl_action_send_cancel_response+0x68>
 80133ca:	b570      	push	{r4, r5, r6, lr}
 80133cc:	4604      	mov	r4, r0
 80133ce:	6800      	ldr	r0, [r0, #0]
 80133d0:	b348      	cbz	r0, 8013426 <rcl_action_send_cancel_response+0x5e>
 80133d2:	460e      	mov	r6, r1
 80133d4:	4615      	mov	r5, r2
 80133d6:	f7fe fbbb 	bl	8011b50 <rcl_service_is_valid>
 80133da:	b1f8      	cbz	r0, 801341c <rcl_action_send_cancel_response+0x54>
 80133dc:	6820      	ldr	r0, [r4, #0]
 80133de:	3004      	adds	r0, #4
 80133e0:	f7fe fbb6 	bl	8011b50 <rcl_service_is_valid>
 80133e4:	b1d0      	cbz	r0, 801341c <rcl_action_send_cancel_response+0x54>
 80133e6:	6820      	ldr	r0, [r4, #0]
 80133e8:	3008      	adds	r0, #8
 80133ea:	f7fe fbb1 	bl	8011b50 <rcl_service_is_valid>
 80133ee:	b1a8      	cbz	r0, 801341c <rcl_action_send_cancel_response+0x54>
 80133f0:	6820      	ldr	r0, [r4, #0]
 80133f2:	300c      	adds	r0, #12
 80133f4:	f006 f92a 	bl	801964c <rcl_publisher_is_valid>
 80133f8:	b180      	cbz	r0, 801341c <rcl_action_send_cancel_response+0x54>
 80133fa:	6820      	ldr	r0, [r4, #0]
 80133fc:	3010      	adds	r0, #16
 80133fe:	f006 f925 	bl	801964c <rcl_publisher_is_valid>
 8013402:	b158      	cbz	r0, 801341c <rcl_action_send_cancel_response+0x54>
 8013404:	b195      	cbz	r5, 801342c <rcl_action_send_cancel_response+0x64>
 8013406:	b18e      	cbz	r6, 801342c <rcl_action_send_cancel_response+0x64>
 8013408:	6820      	ldr	r0, [r4, #0]
 801340a:	462a      	mov	r2, r5
 801340c:	4631      	mov	r1, r6
 801340e:	3004      	adds	r0, #4
 8013410:	f7fe fb6e 	bl	8011af0 <rcl_send_response>
 8013414:	3800      	subs	r0, #0
 8013416:	bf18      	it	ne
 8013418:	2001      	movne	r0, #1
 801341a:	bd70      	pop	{r4, r5, r6, pc}
 801341c:	f7fa fcb8 	bl	800dd90 <rcutils_reset_error>
 8013420:	f640 0098 	movw	r0, #2200	; 0x898
 8013424:	bd70      	pop	{r4, r5, r6, pc}
 8013426:	f640 0098 	movw	r0, #2200	; 0x898
 801342a:	bd70      	pop	{r4, r5, r6, pc}
 801342c:	200b      	movs	r0, #11
 801342e:	bd70      	pop	{r4, r5, r6, pc}
 8013430:	f640 0098 	movw	r0, #2200	; 0x898
 8013434:	4770      	bx	lr
 8013436:	bf00      	nop

08013438 <rcl_action_wait_set_add_action_server>:
 8013438:	2800      	cmp	r0, #0
 801343a:	d04d      	beq.n	80134d8 <rcl_action_wait_set_add_action_server+0xa0>
 801343c:	b570      	push	{r4, r5, r6, lr}
 801343e:	460c      	mov	r4, r1
 8013440:	b159      	cbz	r1, 801345a <rcl_action_wait_set_add_action_server+0x22>
 8013442:	4605      	mov	r5, r0
 8013444:	6808      	ldr	r0, [r1, #0]
 8013446:	b140      	cbz	r0, 801345a <rcl_action_wait_set_add_action_server+0x22>
 8013448:	4616      	mov	r6, r2
 801344a:	f7fe fb81 	bl	8011b50 <rcl_service_is_valid>
 801344e:	b120      	cbz	r0, 801345a <rcl_action_wait_set_add_action_server+0x22>
 8013450:	6820      	ldr	r0, [r4, #0]
 8013452:	3004      	adds	r0, #4
 8013454:	f7fe fb7c 	bl	8011b50 <rcl_service_is_valid>
 8013458:	b910      	cbnz	r0, 8013460 <rcl_action_wait_set_add_action_server+0x28>
 801345a:	f640 0098 	movw	r0, #2200	; 0x898
 801345e:	bd70      	pop	{r4, r5, r6, pc}
 8013460:	6820      	ldr	r0, [r4, #0]
 8013462:	3008      	adds	r0, #8
 8013464:	f7fe fb74 	bl	8011b50 <rcl_service_is_valid>
 8013468:	2800      	cmp	r0, #0
 801346a:	d0f6      	beq.n	801345a <rcl_action_wait_set_add_action_server+0x22>
 801346c:	6820      	ldr	r0, [r4, #0]
 801346e:	300c      	adds	r0, #12
 8013470:	f006 f904 	bl	801967c <rcl_publisher_is_valid_except_context>
 8013474:	2800      	cmp	r0, #0
 8013476:	d0f0      	beq.n	801345a <rcl_action_wait_set_add_action_server+0x22>
 8013478:	6820      	ldr	r0, [r4, #0]
 801347a:	3010      	adds	r0, #16
 801347c:	f006 f8fe 	bl	801967c <rcl_publisher_is_valid_except_context>
 8013480:	2800      	cmp	r0, #0
 8013482:	d0ea      	beq.n	801345a <rcl_action_wait_set_add_action_server+0x22>
 8013484:	6821      	ldr	r1, [r4, #0]
 8013486:	4628      	mov	r0, r5
 8013488:	f501 72ee 	add.w	r2, r1, #476	; 0x1dc
 801348c:	f7ff fad2 	bl	8012a34 <rcl_wait_set_add_service>
 8013490:	2800      	cmp	r0, #0
 8013492:	d1e4      	bne.n	801345e <rcl_action_wait_set_add_action_server+0x26>
 8013494:	6821      	ldr	r1, [r4, #0]
 8013496:	4628      	mov	r0, r5
 8013498:	f501 72f0 	add.w	r2, r1, #480	; 0x1e0
 801349c:	3104      	adds	r1, #4
 801349e:	f7ff fac9 	bl	8012a34 <rcl_wait_set_add_service>
 80134a2:	2800      	cmp	r0, #0
 80134a4:	d1db      	bne.n	801345e <rcl_action_wait_set_add_action_server+0x26>
 80134a6:	6821      	ldr	r1, [r4, #0]
 80134a8:	4628      	mov	r0, r5
 80134aa:	f501 72f2 	add.w	r2, r1, #484	; 0x1e4
 80134ae:	3108      	adds	r1, #8
 80134b0:	f7ff fac0 	bl	8012a34 <rcl_wait_set_add_service>
 80134b4:	2800      	cmp	r0, #0
 80134b6:	d1d2      	bne.n	801345e <rcl_action_wait_set_add_action_server+0x26>
 80134b8:	6821      	ldr	r1, [r4, #0]
 80134ba:	4628      	mov	r0, r5
 80134bc:	f501 72f4 	add.w	r2, r1, #488	; 0x1e8
 80134c0:	3114      	adds	r1, #20
 80134c2:	f7ff fa5b 	bl	801297c <rcl_wait_set_add_timer>
 80134c6:	2800      	cmp	r0, #0
 80134c8:	d1c9      	bne.n	801345e <rcl_action_wait_set_add_action_server+0x26>
 80134ca:	2e00      	cmp	r6, #0
 80134cc:	d0c7      	beq.n	801345e <rcl_action_wait_set_add_action_server+0x26>
 80134ce:	6823      	ldr	r3, [r4, #0]
 80134d0:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 80134d4:	6033      	str	r3, [r6, #0]
 80134d6:	bd70      	pop	{r4, r5, r6, pc}
 80134d8:	f44f 7061 	mov.w	r0, #900	; 0x384
 80134dc:	4770      	bx	lr
 80134de:	bf00      	nop

080134e0 <rcl_action_server_wait_set_get_entities_ready>:
 80134e0:	2800      	cmp	r0, #0
 80134e2:	d067      	beq.n	80135b4 <rcl_action_server_wait_set_get_entities_ready+0xd4>
 80134e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80134e8:	460c      	mov	r4, r1
 80134ea:	b161      	cbz	r1, 8013506 <rcl_action_server_wait_set_get_entities_ready+0x26>
 80134ec:	4605      	mov	r5, r0
 80134ee:	6808      	ldr	r0, [r1, #0]
 80134f0:	b148      	cbz	r0, 8013506 <rcl_action_server_wait_set_get_entities_ready+0x26>
 80134f2:	4616      	mov	r6, r2
 80134f4:	4698      	mov	r8, r3
 80134f6:	f7fe fb2b 	bl	8011b50 <rcl_service_is_valid>
 80134fa:	b120      	cbz	r0, 8013506 <rcl_action_server_wait_set_get_entities_ready+0x26>
 80134fc:	6820      	ldr	r0, [r4, #0]
 80134fe:	3004      	adds	r0, #4
 8013500:	f7fe fb26 	bl	8011b50 <rcl_service_is_valid>
 8013504:	b918      	cbnz	r0, 801350e <rcl_action_server_wait_set_get_entities_ready+0x2e>
 8013506:	f640 0098 	movw	r0, #2200	; 0x898
 801350a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801350e:	6820      	ldr	r0, [r4, #0]
 8013510:	3008      	adds	r0, #8
 8013512:	f7fe fb1d 	bl	8011b50 <rcl_service_is_valid>
 8013516:	2800      	cmp	r0, #0
 8013518:	d0f5      	beq.n	8013506 <rcl_action_server_wait_set_get_entities_ready+0x26>
 801351a:	6820      	ldr	r0, [r4, #0]
 801351c:	300c      	adds	r0, #12
 801351e:	f006 f8ad 	bl	801967c <rcl_publisher_is_valid_except_context>
 8013522:	2800      	cmp	r0, #0
 8013524:	d0ef      	beq.n	8013506 <rcl_action_server_wait_set_get_entities_ready+0x26>
 8013526:	6820      	ldr	r0, [r4, #0]
 8013528:	3010      	adds	r0, #16
 801352a:	f006 f8a7 	bl	801967c <rcl_publisher_is_valid_except_context>
 801352e:	2800      	cmp	r0, #0
 8013530:	d0e9      	beq.n	8013506 <rcl_action_server_wait_set_get_entities_ready+0x26>
 8013532:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013536:	2a00      	cmp	r2, #0
 8013538:	bf18      	it	ne
 801353a:	2b00      	cmpne	r3, #0
 801353c:	bf0c      	ite	eq
 801353e:	2101      	moveq	r1, #1
 8013540:	2100      	movne	r1, #0
 8013542:	f1b8 0f00 	cmp.w	r8, #0
 8013546:	bf08      	it	eq
 8013548:	f041 0101 	orreq.w	r1, r1, #1
 801354c:	bba9      	cbnz	r1, 80135ba <rcl_action_server_wait_set_get_entities_ready+0xda>
 801354e:	b3a6      	cbz	r6, 80135ba <rcl_action_server_wait_set_get_entities_ready+0xda>
 8013550:	6821      	ldr	r1, [r4, #0]
 8013552:	2000      	movs	r0, #0
 8013554:	692c      	ldr	r4, [r5, #16]
 8013556:	f8d1 21e8 	ldr.w	r2, [r1, #488]	; 0x1e8
 801355a:	6a2f      	ldr	r7, [r5, #32]
 801355c:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013560:	f8d1 41dc 	ldr.w	r4, [r1, #476]	; 0x1dc
 8013564:	f8d1 31e0 	ldr.w	r3, [r1, #480]	; 0x1e0
 8013568:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
 801356c:	f857 5023 	ldr.w	r5, [r7, r3, lsl #2]
 8013570:	1a64      	subs	r4, r4, r1
 8013572:	f8d1 31e4 	ldr.w	r3, [r1, #484]	; 0x1e4
 8013576:	fab4 f484 	clz	r4, r4
 801357a:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 801357e:	0964      	lsrs	r4, r4, #5
 8013580:	7034      	strb	r4, [r6, #0]
 8013582:	1d0c      	adds	r4, r1, #4
 8013584:	1b2c      	subs	r4, r5, r4
 8013586:	fab4 f484 	clz	r4, r4
 801358a:	0964      	lsrs	r4, r4, #5
 801358c:	f888 4000 	strb.w	r4, [r8]
 8013590:	f101 0408 	add.w	r4, r1, #8
 8013594:	1b1b      	subs	r3, r3, r4
 8013596:	9c06      	ldr	r4, [sp, #24]
 8013598:	fab3 f383 	clz	r3, r3
 801359c:	095b      	lsrs	r3, r3, #5
 801359e:	7023      	strb	r3, [r4, #0]
 80135a0:	f101 0314 	add.w	r3, r1, #20
 80135a4:	1ad3      	subs	r3, r2, r3
 80135a6:	9a07      	ldr	r2, [sp, #28]
 80135a8:	fab3 f383 	clz	r3, r3
 80135ac:	095b      	lsrs	r3, r3, #5
 80135ae:	7013      	strb	r3, [r2, #0]
 80135b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80135b4:	f44f 7061 	mov.w	r0, #900	; 0x384
 80135b8:	4770      	bx	lr
 80135ba:	200b      	movs	r0, #11
 80135bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080135c0 <_execute_event_handler>:
 80135c0:	2002      	movs	r0, #2
 80135c2:	4770      	bx	lr

080135c4 <_cancel_goal_event_handler>:
 80135c4:	2003      	movs	r0, #3
 80135c6:	4770      	bx	lr

080135c8 <_succeed_event_handler>:
 80135c8:	2004      	movs	r0, #4
 80135ca:	4770      	bx	lr

080135cc <_abort_event_handler>:
 80135cc:	2006      	movs	r0, #6
 80135ce:	4770      	bx	lr

080135d0 <_canceled_event_handler>:
 80135d0:	2005      	movs	r0, #5
 80135d2:	4770      	bx	lr

080135d4 <rcl_action_transition_goal_state>:
 80135d4:	b2c2      	uxtb	r2, r0
 80135d6:	2a06      	cmp	r2, #6
 80135d8:	d810      	bhi.n	80135fc <rcl_action_transition_goal_state+0x28>
 80135da:	2904      	cmp	r1, #4
 80135dc:	d80e      	bhi.n	80135fc <rcl_action_transition_goal_state+0x28>
 80135de:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 80135e2:	b410      	push	{r4}
 80135e4:	1853      	adds	r3, r2, r1
 80135e6:	4c06      	ldr	r4, [pc, #24]	; (8013600 <rcl_action_transition_goal_state+0x2c>)
 80135e8:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80135ec:	b113      	cbz	r3, 80135f4 <rcl_action_transition_goal_state+0x20>
 80135ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80135f2:	4718      	bx	r3
 80135f4:	2000      	movs	r0, #0
 80135f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80135fa:	4770      	bx	lr
 80135fc:	2000      	movs	r0, #0
 80135fe:	4770      	bx	lr
 8013600:	0801d404 	.word	0x0801d404

08013604 <rcl_action_get_zero_initialized_cancel_response>:
 8013604:	b510      	push	{r4, lr}
 8013606:	4c07      	ldr	r4, [pc, #28]	; (8013624 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 8013608:	4686      	mov	lr, r0
 801360a:	4684      	mov	ip, r0
 801360c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801360e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013612:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013614:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013618:	6823      	ldr	r3, [r4, #0]
 801361a:	4670      	mov	r0, lr
 801361c:	f8cc 3000 	str.w	r3, [ip]
 8013620:	bd10      	pop	{r4, pc}
 8013622:	bf00      	nop
 8013624:	0801d490 	.word	0x0801d490

08013628 <rclc_action_send_result_request>:
 8013628:	b1d0      	cbz	r0, 8013660 <rclc_action_send_result_request+0x38>
 801362a:	4684      	mov	ip, r0
 801362c:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8013630:	b500      	push	{lr}
 8013632:	b087      	sub	sp, #28
 8013634:	f8dc 100d 	ldr.w	r1, [ip, #13]
 8013638:	f8dc 2011 	ldr.w	r2, [ip, #17]
 801363c:	f8dc 3015 	ldr.w	r3, [ip, #21]
 8013640:	f10d 0e08 	add.w	lr, sp, #8
 8013644:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013648:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801364c:	f10c 0240 	add.w	r2, ip, #64	; 0x40
 8013650:	a902      	add	r1, sp, #8
 8013652:	3010      	adds	r0, #16
 8013654:	f7ff fbcc 	bl	8012df0 <rcl_action_send_result_request>
 8013658:	b920      	cbnz	r0, 8013664 <rclc_action_send_result_request+0x3c>
 801365a:	b007      	add	sp, #28
 801365c:	f85d fb04 	ldr.w	pc, [sp], #4
 8013660:	200b      	movs	r0, #11
 8013662:	4770      	bx	lr
 8013664:	9001      	str	r0, [sp, #4]
 8013666:	f7fa fb93 	bl	800dd90 <rcutils_reset_error>
 801366a:	9801      	ldr	r0, [sp, #4]
 801366c:	b007      	add	sp, #28
 801366e:	f85d fb04 	ldr.w	pc, [sp], #4
 8013672:	bf00      	nop

08013674 <rclc_action_take_goal_handle>:
 8013674:	b160      	cbz	r0, 8013690 <rclc_action_take_goal_handle+0x1c>
 8013676:	6883      	ldr	r3, [r0, #8]
 8013678:	b143      	cbz	r3, 801368c <rclc_action_take_goal_handle+0x18>
 801367a:	6819      	ldr	r1, [r3, #0]
 801367c:	2200      	movs	r2, #0
 801367e:	6081      	str	r1, [r0, #8]
 8013680:	721a      	strb	r2, [r3, #8]
 8013682:	68c1      	ldr	r1, [r0, #12]
 8013684:	621a      	str	r2, [r3, #32]
 8013686:	849a      	strh	r2, [r3, #36]	; 0x24
 8013688:	6019      	str	r1, [r3, #0]
 801368a:	60c3      	str	r3, [r0, #12]
 801368c:	4618      	mov	r0, r3
 801368e:	4770      	bx	lr
 8013690:	4603      	mov	r3, r0
 8013692:	e7fb      	b.n	801368c <rclc_action_take_goal_handle+0x18>

08013694 <rclc_action_remove_used_goal_handle>:
 8013694:	b180      	cbz	r0, 80136b8 <rclc_action_remove_used_goal_handle+0x24>
 8013696:	b179      	cbz	r1, 80136b8 <rclc_action_remove_used_goal_handle+0x24>
 8013698:	68c3      	ldr	r3, [r0, #12]
 801369a:	4299      	cmp	r1, r3
 801369c:	d00d      	beq.n	80136ba <rclc_action_remove_used_goal_handle+0x26>
 801369e:	b12b      	cbz	r3, 80136ac <rclc_action_remove_used_goal_handle+0x18>
 80136a0:	681a      	ldr	r2, [r3, #0]
 80136a2:	4291      	cmp	r1, r2
 80136a4:	d003      	beq.n	80136ae <rclc_action_remove_used_goal_handle+0x1a>
 80136a6:	4613      	mov	r3, r2
 80136a8:	2b00      	cmp	r3, #0
 80136aa:	d1f9      	bne.n	80136a0 <rclc_action_remove_used_goal_handle+0xc>
 80136ac:	4770      	bx	lr
 80136ae:	680a      	ldr	r2, [r1, #0]
 80136b0:	601a      	str	r2, [r3, #0]
 80136b2:	6883      	ldr	r3, [r0, #8]
 80136b4:	600b      	str	r3, [r1, #0]
 80136b6:	6081      	str	r1, [r0, #8]
 80136b8:	4770      	bx	lr
 80136ba:	680b      	ldr	r3, [r1, #0]
 80136bc:	60c3      	str	r3, [r0, #12]
 80136be:	e7f8      	b.n	80136b2 <rclc_action_remove_used_goal_handle+0x1e>

080136c0 <rclc_action_find_goal_handle_by_uuid>:
 80136c0:	b538      	push	{r3, r4, r5, lr}
 80136c2:	b181      	cbz	r1, 80136e6 <rclc_action_find_goal_handle_by_uuid+0x26>
 80136c4:	b178      	cbz	r0, 80136e6 <rclc_action_find_goal_handle_by_uuid+0x26>
 80136c6:	68c4      	ldr	r4, [r0, #12]
 80136c8:	460d      	mov	r5, r1
 80136ca:	b914      	cbnz	r4, 80136d2 <rclc_action_find_goal_handle_by_uuid+0x12>
 80136cc:	e009      	b.n	80136e2 <rclc_action_find_goal_handle_by_uuid+0x22>
 80136ce:	6824      	ldr	r4, [r4, #0]
 80136d0:	b13c      	cbz	r4, 80136e2 <rclc_action_find_goal_handle_by_uuid+0x22>
 80136d2:	f104 0009 	add.w	r0, r4, #9
 80136d6:	2210      	movs	r2, #16
 80136d8:	4629      	mov	r1, r5
 80136da:	f007 fe29 	bl	801b330 <memcmp>
 80136de:	2800      	cmp	r0, #0
 80136e0:	d1f5      	bne.n	80136ce <rclc_action_find_goal_handle_by_uuid+0xe>
 80136e2:	4620      	mov	r0, r4
 80136e4:	bd38      	pop	{r3, r4, r5, pc}
 80136e6:	2400      	movs	r4, #0
 80136e8:	4620      	mov	r0, r4
 80136ea:	bd38      	pop	{r3, r4, r5, pc}

080136ec <rclc_action_find_first_handle_by_status>:
 80136ec:	b140      	cbz	r0, 8013700 <rclc_action_find_first_handle_by_status+0x14>
 80136ee:	68c0      	ldr	r0, [r0, #12]
 80136f0:	b910      	cbnz	r0, 80136f8 <rclc_action_find_first_handle_by_status+0xc>
 80136f2:	e005      	b.n	8013700 <rclc_action_find_first_handle_by_status+0x14>
 80136f4:	6800      	ldr	r0, [r0, #0]
 80136f6:	b118      	cbz	r0, 8013700 <rclc_action_find_first_handle_by_status+0x14>
 80136f8:	f990 3008 	ldrsb.w	r3, [r0, #8]
 80136fc:	428b      	cmp	r3, r1
 80136fe:	d1f9      	bne.n	80136f4 <rclc_action_find_first_handle_by_status+0x8>
 8013700:	4770      	bx	lr
 8013702:	bf00      	nop

08013704 <rclc_action_find_first_terminated_handle>:
 8013704:	b140      	cbz	r0, 8013718 <rclc_action_find_first_terminated_handle+0x14>
 8013706:	68c0      	ldr	r0, [r0, #12]
 8013708:	b910      	cbnz	r0, 8013710 <rclc_action_find_first_terminated_handle+0xc>
 801370a:	e005      	b.n	8013718 <rclc_action_find_first_terminated_handle+0x14>
 801370c:	6800      	ldr	r0, [r0, #0]
 801370e:	b118      	cbz	r0, 8013718 <rclc_action_find_first_terminated_handle+0x14>
 8013710:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8013714:	2b03      	cmp	r3, #3
 8013716:	ddf9      	ble.n	801370c <rclc_action_find_first_terminated_handle+0x8>
 8013718:	4770      	bx	lr
 801371a:	bf00      	nop

0801371c <rclc_action_find_handle_by_goal_request_sequence_number>:
 801371c:	b170      	cbz	r0, 801373c <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801371e:	68c0      	ldr	r0, [r0, #12]
 8013720:	b160      	cbz	r0, 801373c <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8013722:	b410      	push	{r4}
 8013724:	e001      	b.n	801372a <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 8013726:	6800      	ldr	r0, [r0, #0]
 8013728:	b128      	cbz	r0, 8013736 <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 801372a:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	; 0x28
 801372e:	4299      	cmp	r1, r3
 8013730:	bf08      	it	eq
 8013732:	4294      	cmpeq	r4, r2
 8013734:	d1f7      	bne.n	8013726 <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 8013736:	f85d 4b04 	ldr.w	r4, [sp], #4
 801373a:	4770      	bx	lr
 801373c:	4770      	bx	lr
 801373e:	bf00      	nop

08013740 <rclc_action_find_handle_by_result_request_sequence_number>:
 8013740:	b170      	cbz	r0, 8013760 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8013742:	68c0      	ldr	r0, [r0, #12]
 8013744:	b160      	cbz	r0, 8013760 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8013746:	b410      	push	{r4}
 8013748:	e001      	b.n	801374e <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 801374a:	6800      	ldr	r0, [r0, #0]
 801374c:	b128      	cbz	r0, 801375a <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 801374e:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	; 0x40
 8013752:	4299      	cmp	r1, r3
 8013754:	bf08      	it	eq
 8013756:	4294      	cmpeq	r4, r2
 8013758:	d1f7      	bne.n	801374a <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 801375a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801375e:	4770      	bx	lr
 8013760:	4770      	bx	lr
 8013762:	bf00      	nop

08013764 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8013764:	b170      	cbz	r0, 8013784 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8013766:	68c0      	ldr	r0, [r0, #12]
 8013768:	b160      	cbz	r0, 8013784 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801376a:	b410      	push	{r4}
 801376c:	e001      	b.n	8013772 <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 801376e:	6800      	ldr	r0, [r0, #0]
 8013770:	b128      	cbz	r0, 801377e <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 8013772:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	; 0x58
 8013776:	4299      	cmp	r1, r3
 8013778:	bf08      	it	eq
 801377a:	4294      	cmpeq	r4, r2
 801377c:	d1f7      	bne.n	801376e <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 801377e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013782:	4770      	bx	lr
 8013784:	4770      	bx	lr
 8013786:	bf00      	nop

08013788 <rclc_action_find_first_handle_with_goal_response>:
 8013788:	b140      	cbz	r0, 801379c <rclc_action_find_first_handle_with_goal_response+0x14>
 801378a:	68c0      	ldr	r0, [r0, #12]
 801378c:	b910      	cbnz	r0, 8013794 <rclc_action_find_first_handle_with_goal_response+0xc>
 801378e:	e005      	b.n	801379c <rclc_action_find_first_handle_with_goal_response+0x14>
 8013790:	6800      	ldr	r0, [r0, #0]
 8013792:	b118      	cbz	r0, 801379c <rclc_action_find_first_handle_with_goal_response+0x14>
 8013794:	f890 3020 	ldrb.w	r3, [r0, #32]
 8013798:	2b00      	cmp	r3, #0
 801379a:	d0f9      	beq.n	8013790 <rclc_action_find_first_handle_with_goal_response+0x8>
 801379c:	4770      	bx	lr
 801379e:	bf00      	nop

080137a0 <rclc_action_find_first_handle_with_result_response>:
 80137a0:	b140      	cbz	r0, 80137b4 <rclc_action_find_first_handle_with_result_response+0x14>
 80137a2:	68c0      	ldr	r0, [r0, #12]
 80137a4:	b910      	cbnz	r0, 80137ac <rclc_action_find_first_handle_with_result_response+0xc>
 80137a6:	e005      	b.n	80137b4 <rclc_action_find_first_handle_with_result_response+0x14>
 80137a8:	6800      	ldr	r0, [r0, #0]
 80137aa:	b118      	cbz	r0, 80137b4 <rclc_action_find_first_handle_with_result_response+0x14>
 80137ac:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 80137b0:	2b00      	cmp	r3, #0
 80137b2:	d0f9      	beq.n	80137a8 <rclc_action_find_first_handle_with_result_response+0x8>
 80137b4:	4770      	bx	lr
 80137b6:	bf00      	nop

080137b8 <rclc_action_server_response_goal_request>:
 80137b8:	b198      	cbz	r0, 80137e2 <rclc_action_server_response_goal_request+0x2a>
 80137ba:	2200      	movs	r2, #0
 80137bc:	460b      	mov	r3, r1
 80137be:	f100 0128 	add.w	r1, r0, #40	; 0x28
 80137c2:	b510      	push	{r4, lr}
 80137c4:	6844      	ldr	r4, [r0, #4]
 80137c6:	b086      	sub	sp, #24
 80137c8:	f104 0010 	add.w	r0, r4, #16
 80137cc:	9205      	str	r2, [sp, #20]
 80137ce:	e9cd 2203 	strd	r2, r2, [sp, #12]
 80137d2:	aa03      	add	r2, sp, #12
 80137d4:	f88d 300c 	strb.w	r3, [sp, #12]
 80137d8:	f7ff fd40 	bl	801325c <rcl_action_send_goal_response>
 80137dc:	b918      	cbnz	r0, 80137e6 <rclc_action_server_response_goal_request+0x2e>
 80137de:	b006      	add	sp, #24
 80137e0:	bd10      	pop	{r4, pc}
 80137e2:	200b      	movs	r0, #11
 80137e4:	4770      	bx	lr
 80137e6:	9001      	str	r0, [sp, #4]
 80137e8:	f7fa fad2 	bl	800dd90 <rcutils_reset_error>
 80137ec:	9801      	ldr	r0, [sp, #4]
 80137ee:	b006      	add	sp, #24
 80137f0:	bd10      	pop	{r4, pc}
 80137f2:	bf00      	nop
 80137f4:	0000      	movs	r0, r0
	...

080137f8 <rclc_action_server_goal_cancel_accept>:
 80137f8:	b310      	cbz	r0, 8013840 <rclc_action_server_goal_cancel_accept+0x48>
 80137fa:	b510      	push	{r4, lr}
 80137fc:	b090      	sub	sp, #64	; 0x40
 80137fe:	4604      	mov	r4, r0
 8013800:	a806      	add	r0, sp, #24
 8013802:	f7ff feff 	bl	8013604 <rcl_action_get_zero_initialized_cancel_response>
 8013806:	2300      	movs	r3, #0
 8013808:	f8d4 0009 	ldr.w	r0, [r4, #9]
 801380c:	46ec      	mov	ip, sp
 801380e:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8013812:	f8d4 2011 	ldr.w	r2, [r4, #17]
 8013816:	f88d 3018 	strb.w	r3, [sp, #24]
 801381a:	f8d4 3015 	ldr.w	r3, [r4, #21]
 801381e:	f8cd d01c 	str.w	sp, [sp, #28]
 8013822:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013826:	ed9f 7b08 	vldr	d7, [pc, #32]	; 8013848 <rclc_action_server_goal_cancel_accept+0x50>
 801382a:	6860      	ldr	r0, [r4, #4]
 801382c:	aa06      	add	r2, sp, #24
 801382e:	f104 0158 	add.w	r1, r4, #88	; 0x58
 8013832:	3010      	adds	r0, #16
 8013834:	ed8d 7b08 	vstr	d7, [sp, #32]
 8013838:	f7ff fdc6 	bl	80133c8 <rcl_action_send_cancel_response>
 801383c:	b010      	add	sp, #64	; 0x40
 801383e:	bd10      	pop	{r4, pc}
 8013840:	200b      	movs	r0, #11
 8013842:	4770      	bx	lr
 8013844:	f3af 8000 	nop.w
 8013848:	00000001 	.word	0x00000001
 801384c:	00000001 	.word	0x00000001

08013850 <rclc_action_server_goal_cancel_reject>:
 8013850:	b082      	sub	sp, #8
 8013852:	b530      	push	{r4, r5, lr}
 8013854:	b08b      	sub	sp, #44	; 0x2c
 8013856:	ac0e      	add	r4, sp, #56	; 0x38
 8013858:	e884 000c 	stmia.w	r4, {r2, r3}
 801385c:	b188      	cbz	r0, 8013882 <rclc_action_server_goal_cancel_reject+0x32>
 801385e:	4604      	mov	r4, r0
 8013860:	a801      	add	r0, sp, #4
 8013862:	460d      	mov	r5, r1
 8013864:	f7ff fece 	bl	8013604 <rcl_action_get_zero_initialized_cancel_response>
 8013868:	aa01      	add	r2, sp, #4
 801386a:	a90e      	add	r1, sp, #56	; 0x38
 801386c:	f104 0010 	add.w	r0, r4, #16
 8013870:	f88d 5004 	strb.w	r5, [sp, #4]
 8013874:	f7ff fda8 	bl	80133c8 <rcl_action_send_cancel_response>
 8013878:	b00b      	add	sp, #44	; 0x2c
 801387a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801387e:	b002      	add	sp, #8
 8013880:	4770      	bx	lr
 8013882:	200b      	movs	r0, #11
 8013884:	b00b      	add	sp, #44	; 0x2c
 8013886:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801388a:	b002      	add	sp, #8
 801388c:	4770      	bx	lr
 801388e:	bf00      	nop

08013890 <__atomic_load_8>:
 8013890:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8013894:	4a16      	ldr	r2, [pc, #88]	; (80138f0 <__atomic_load_8+0x60>)
 8013896:	4b17      	ldr	r3, [pc, #92]	; (80138f4 <__atomic_load_8+0x64>)
 8013898:	f04f 0c01 	mov.w	ip, #1
 801389c:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 80138a0:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80138a4:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 80138a8:	fb02 f101 	mul.w	r1, r2, r1
 80138ac:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 80138b0:	fba3 2301 	umull	r2, r3, r3, r1
 80138b4:	091b      	lsrs	r3, r3, #4
 80138b6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80138ba:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 80138be:	b4d0      	push	{r4, r6, r7}
 80138c0:	1ac9      	subs	r1, r1, r3
 80138c2:	4c0d      	ldr	r4, [pc, #52]	; (80138f8 <__atomic_load_8+0x68>)
 80138c4:	1862      	adds	r2, r4, r1
 80138c6:	e8d2 3f4f 	ldrexb	r3, [r2]
 80138ca:	e8c2 cf46 	strexb	r6, ip, [r2]
 80138ce:	2e00      	cmp	r6, #0
 80138d0:	d1f9      	bne.n	80138c6 <__atomic_load_8+0x36>
 80138d2:	b2db      	uxtb	r3, r3
 80138d4:	f3bf 8f5b 	dmb	ish
 80138d8:	2b00      	cmp	r3, #0
 80138da:	d1f4      	bne.n	80138c6 <__atomic_load_8+0x36>
 80138dc:	e9d0 6700 	ldrd	r6, r7, [r0]
 80138e0:	f3bf 8f5b 	dmb	ish
 80138e4:	5463      	strb	r3, [r4, r1]
 80138e6:	4630      	mov	r0, r6
 80138e8:	4639      	mov	r1, r7
 80138ea:	bcd0      	pop	{r4, r6, r7}
 80138ec:	4770      	bx	lr
 80138ee:	bf00      	nop
 80138f0:	27d4eb2d 	.word	0x27d4eb2d
 80138f4:	b21642c9 	.word	0xb21642c9
 80138f8:	2000bdd8 	.word	0x2000bdd8

080138fc <__atomic_store_8>:
 80138fc:	b570      	push	{r4, r5, r6, lr}
 80138fe:	ea80 4e10 	eor.w	lr, r0, r0, lsr #16
 8013902:	4916      	ldr	r1, [pc, #88]	; (801395c <__atomic_store_8+0x60>)
 8013904:	4c16      	ldr	r4, [pc, #88]	; (8013960 <__atomic_store_8+0x64>)
 8013906:	f08e 0e3d 	eor.w	lr, lr, #61	; 0x3d
 801390a:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 801390e:	ea8e 1e1e 	eor.w	lr, lr, lr, lsr #4
 8013912:	fb01 fe0e 	mul.w	lr, r1, lr
 8013916:	4913      	ldr	r1, [pc, #76]	; (8013964 <__atomic_store_8+0x68>)
 8013918:	ea8e 3ede 	eor.w	lr, lr, lr, lsr #15
 801391c:	fba1 510e 	umull	r5, r1, r1, lr
 8013920:	f04f 0501 	mov.w	r5, #1
 8013924:	0909      	lsrs	r1, r1, #4
 8013926:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
 801392a:	ebc1 01cc 	rsb	r1, r1, ip, lsl #3
 801392e:	ebae 0e01 	sub.w	lr, lr, r1
 8013932:	eb04 0c0e 	add.w	ip, r4, lr
 8013936:	e8dc 1f4f 	ldrexb	r1, [ip]
 801393a:	e8cc 5f46 	strexb	r6, r5, [ip]
 801393e:	2e00      	cmp	r6, #0
 8013940:	d1f9      	bne.n	8013936 <__atomic_store_8+0x3a>
 8013942:	b2c9      	uxtb	r1, r1
 8013944:	f3bf 8f5b 	dmb	ish
 8013948:	2900      	cmp	r1, #0
 801394a:	d1f4      	bne.n	8013936 <__atomic_store_8+0x3a>
 801394c:	e9c0 2300 	strd	r2, r3, [r0]
 8013950:	f3bf 8f5b 	dmb	ish
 8013954:	f804 100e 	strb.w	r1, [r4, lr]
 8013958:	bd70      	pop	{r4, r5, r6, pc}
 801395a:	bf00      	nop
 801395c:	27d4eb2d 	.word	0x27d4eb2d
 8013960:	2000bdd8 	.word	0x2000bdd8
 8013964:	b21642c9 	.word	0xb21642c9

08013968 <__atomic_exchange_8>:
 8013968:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 801396c:	4917      	ldr	r1, [pc, #92]	; (80139cc <__atomic_exchange_8+0x64>)
 801396e:	f08c 0c3d 	eor.w	ip, ip, #61	; 0x3d
 8013972:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 8013976:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 801397a:	fb01 fc0c 	mul.w	ip, r1, ip
 801397e:	4914      	ldr	r1, [pc, #80]	; (80139d0 <__atomic_exchange_8+0x68>)
 8013980:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 8013984:	b570      	push	{r4, r5, r6, lr}
 8013986:	4686      	mov	lr, r0
 8013988:	fba1 010c 	umull	r0, r1, r1, ip
 801398c:	4d11      	ldr	r5, [pc, #68]	; (80139d4 <__atomic_exchange_8+0x6c>)
 801398e:	f04f 0001 	mov.w	r0, #1
 8013992:	0909      	lsrs	r1, r1, #4
 8013994:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 8013998:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 801399c:	ebac 0c01 	sub.w	ip, ip, r1
 80139a0:	eb05 010c 	add.w	r1, r5, ip
 80139a4:	e8d1 4f4f 	ldrexb	r4, [r1]
 80139a8:	e8c1 0f46 	strexb	r6, r0, [r1]
 80139ac:	2e00      	cmp	r6, #0
 80139ae:	d1f9      	bne.n	80139a4 <__atomic_exchange_8+0x3c>
 80139b0:	b2e4      	uxtb	r4, r4
 80139b2:	f3bf 8f5b 	dmb	ish
 80139b6:	2c00      	cmp	r4, #0
 80139b8:	d1f4      	bne.n	80139a4 <__atomic_exchange_8+0x3c>
 80139ba:	e9de 0100 	ldrd	r0, r1, [lr]
 80139be:	e9ce 2300 	strd	r2, r3, [lr]
 80139c2:	f3bf 8f5b 	dmb	ish
 80139c6:	f805 400c 	strb.w	r4, [r5, ip]
 80139ca:	bd70      	pop	{r4, r5, r6, pc}
 80139cc:	27d4eb2d 	.word	0x27d4eb2d
 80139d0:	b21642c9 	.word	0xb21642c9
 80139d4:	2000bdd8 	.word	0x2000bdd8

080139d8 <rcutils_get_env>:
 80139d8:	b168      	cbz	r0, 80139f6 <rcutils_get_env+0x1e>
 80139da:	b510      	push	{r4, lr}
 80139dc:	460c      	mov	r4, r1
 80139de:	b129      	cbz	r1, 80139ec <rcutils_get_env+0x14>
 80139e0:	f007 f910 	bl	801ac04 <getenv>
 80139e4:	b120      	cbz	r0, 80139f0 <rcutils_get_env+0x18>
 80139e6:	6020      	str	r0, [r4, #0]
 80139e8:	2000      	movs	r0, #0
 80139ea:	bd10      	pop	{r4, pc}
 80139ec:	4803      	ldr	r0, [pc, #12]	; (80139fc <rcutils_get_env+0x24>)
 80139ee:	bd10      	pop	{r4, pc}
 80139f0:	4b03      	ldr	r3, [pc, #12]	; (8013a00 <rcutils_get_env+0x28>)
 80139f2:	6023      	str	r3, [r4, #0]
 80139f4:	bd10      	pop	{r4, pc}
 80139f6:	4803      	ldr	r0, [pc, #12]	; (8013a04 <rcutils_get_env+0x2c>)
 80139f8:	4770      	bx	lr
 80139fa:	bf00      	nop
 80139fc:	0801d4d0 	.word	0x0801d4d0
 8013a00:	0801d5f4 	.word	0x0801d5f4
 8013a04:	0801d4b4 	.word	0x0801d4b4

08013a08 <rcutils_is_directory>:
 8013a08:	2000      	movs	r0, #0
 8013a0a:	4770      	bx	lr

08013a0c <rcutils_join_path>:
 8013a0c:	b082      	sub	sp, #8
 8013a0e:	2000      	movs	r0, #0
 8013a10:	e88d 000c 	stmia.w	sp, {r2, r3}
 8013a14:	b002      	add	sp, #8
 8013a16:	4770      	bx	lr

08013a18 <rcutils_to_native_path>:
 8013a18:	b084      	sub	sp, #16
 8013a1a:	2000      	movs	r0, #0
 8013a1c:	f10d 0c04 	add.w	ip, sp, #4
 8013a20:	b004      	add	sp, #16
 8013a22:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 8013a26:	4770      	bx	lr

08013a28 <rcutils_format_string_limit>:
 8013a28:	b40f      	push	{r0, r1, r2, r3}
 8013a2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013a2c:	b083      	sub	sp, #12
 8013a2e:	ac08      	add	r4, sp, #32
 8013a30:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8013a32:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8013a36:	b326      	cbz	r6, 8013a82 <rcutils_format_string_limit+0x5a>
 8013a38:	a808      	add	r0, sp, #32
 8013a3a:	f7fa f985 	bl	800dd48 <rcutils_allocator_is_valid>
 8013a3e:	b300      	cbz	r0, 8013a82 <rcutils_format_string_limit+0x5a>
 8013a40:	2100      	movs	r1, #0
 8013a42:	ab0f      	add	r3, sp, #60	; 0x3c
 8013a44:	4632      	mov	r2, r6
 8013a46:	4608      	mov	r0, r1
 8013a48:	e9cd 3300 	strd	r3, r3, [sp]
 8013a4c:	f000 f906 	bl	8013c5c <rcutils_vsnprintf>
 8013a50:	1c43      	adds	r3, r0, #1
 8013a52:	4605      	mov	r5, r0
 8013a54:	d015      	beq.n	8013a82 <rcutils_format_string_limit+0x5a>
 8013a56:	1c47      	adds	r7, r0, #1
 8013a58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013a5a:	429f      	cmp	r7, r3
 8013a5c:	d901      	bls.n	8013a62 <rcutils_format_string_limit+0x3a>
 8013a5e:	1e5d      	subs	r5, r3, #1
 8013a60:	461f      	mov	r7, r3
 8013a62:	9b08      	ldr	r3, [sp, #32]
 8013a64:	4638      	mov	r0, r7
 8013a66:	990c      	ldr	r1, [sp, #48]	; 0x30
 8013a68:	4798      	blx	r3
 8013a6a:	4604      	mov	r4, r0
 8013a6c:	b148      	cbz	r0, 8013a82 <rcutils_format_string_limit+0x5a>
 8013a6e:	4632      	mov	r2, r6
 8013a70:	4639      	mov	r1, r7
 8013a72:	9b01      	ldr	r3, [sp, #4]
 8013a74:	f000 f8f2 	bl	8013c5c <rcutils_vsnprintf>
 8013a78:	2800      	cmp	r0, #0
 8013a7a:	db09      	blt.n	8013a90 <rcutils_format_string_limit+0x68>
 8013a7c:	2300      	movs	r3, #0
 8013a7e:	5563      	strb	r3, [r4, r5]
 8013a80:	e000      	b.n	8013a84 <rcutils_format_string_limit+0x5c>
 8013a82:	2400      	movs	r4, #0
 8013a84:	4620      	mov	r0, r4
 8013a86:	b003      	add	sp, #12
 8013a88:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013a8c:	b004      	add	sp, #16
 8013a8e:	4770      	bx	lr
 8013a90:	4620      	mov	r0, r4
 8013a92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013a94:	990c      	ldr	r1, [sp, #48]	; 0x30
 8013a96:	2400      	movs	r4, #0
 8013a98:	4798      	blx	r3
 8013a9a:	e7f3      	b.n	8013a84 <rcutils_format_string_limit+0x5c>

08013a9c <rcutils_repl_str>:
 8013a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013aa0:	ed2d 8b02 	vpush	{d8}
 8013aa4:	b087      	sub	sp, #28
 8013aa6:	2600      	movs	r6, #0
 8013aa8:	4680      	mov	r8, r0
 8013aaa:	468a      	mov	sl, r1
 8013aac:	9000      	str	r0, [sp, #0]
 8013aae:	4608      	mov	r0, r1
 8013ab0:	ee08 2a10 	vmov	s16, r2
 8013ab4:	4699      	mov	r9, r3
 8013ab6:	2510      	movs	r5, #16
 8013ab8:	f7ec fc22 	bl	8000300 <strlen>
 8013abc:	4637      	mov	r7, r6
 8013abe:	46b3      	mov	fp, r6
 8013ac0:	9001      	str	r0, [sp, #4]
 8013ac2:	e01e      	b.n	8013b02 <rcutils_repl_str+0x66>
 8013ac4:	f10b 0b01 	add.w	fp, fp, #1
 8013ac8:	9b01      	ldr	r3, [sp, #4]
 8013aca:	455e      	cmp	r6, fp
 8013acc:	eb04 0803 	add.w	r8, r4, r3
 8013ad0:	d211      	bcs.n	8013af6 <rcutils_repl_str+0x5a>
 8013ad2:	442e      	add	r6, r5
 8013ad4:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8013ad8:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8013adc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013ae0:	00b1      	lsls	r1, r6, #2
 8013ae2:	4798      	blx	r3
 8013ae4:	2800      	cmp	r0, #0
 8013ae6:	f000 8088 	beq.w	8013bfa <rcutils_repl_str+0x15e>
 8013aea:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 8013aee:	4607      	mov	r7, r0
 8013af0:	bf28      	it	cs
 8013af2:	f44f 1580 	movcs.w	r5, #1048576	; 0x100000
 8013af6:	9a00      	ldr	r2, [sp, #0]
 8013af8:	eb07 038b 	add.w	r3, r7, fp, lsl #2
 8013afc:	1aa4      	subs	r4, r4, r2
 8013afe:	f843 4c04 	str.w	r4, [r3, #-4]
 8013b02:	4651      	mov	r1, sl
 8013b04:	4640      	mov	r0, r8
 8013b06:	f007 fc77 	bl	801b3f8 <strstr>
 8013b0a:	4604      	mov	r4, r0
 8013b0c:	4638      	mov	r0, r7
 8013b0e:	2c00      	cmp	r4, #0
 8013b10:	d1d8      	bne.n	8013ac4 <rcutils_repl_str+0x28>
 8013b12:	4640      	mov	r0, r8
 8013b14:	f7ec fbf4 	bl	8000300 <strlen>
 8013b18:	9b00      	ldr	r3, [sp, #0]
 8013b1a:	eba8 0803 	sub.w	r8, r8, r3
 8013b1e:	eb08 0400 	add.w	r4, r8, r0
 8013b22:	9402      	str	r4, [sp, #8]
 8013b24:	f1bb 0f00 	cmp.w	fp, #0
 8013b28:	d045      	beq.n	8013bb6 <rcutils_repl_str+0x11a>
 8013b2a:	ee18 0a10 	vmov	r0, s16
 8013b2e:	f7ec fbe7 	bl	8000300 <strlen>
 8013b32:	9a01      	ldr	r2, [sp, #4]
 8013b34:	4606      	mov	r6, r0
 8013b36:	f8d9 3000 	ldr.w	r3, [r9]
 8013b3a:	1a82      	subs	r2, r0, r2
 8013b3c:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8013b40:	fb0b 4202 	mla	r2, fp, r2, r4
 8013b44:	1c50      	adds	r0, r2, #1
 8013b46:	9205      	str	r2, [sp, #20]
 8013b48:	4798      	blx	r3
 8013b4a:	4682      	mov	sl, r0
 8013b4c:	2800      	cmp	r0, #0
 8013b4e:	d054      	beq.n	8013bfa <rcutils_repl_str+0x15e>
 8013b50:	683a      	ldr	r2, [r7, #0]
 8013b52:	463d      	mov	r5, r7
 8013b54:	9900      	ldr	r1, [sp, #0]
 8013b56:	2401      	movs	r4, #1
 8013b58:	f007 fd89 	bl	801b66e <memcpy>
 8013b5c:	683b      	ldr	r3, [r7, #0]
 8013b5e:	e9cd 7a03 	strd	r7, sl, [sp, #12]
 8013b62:	eb0a 0803 	add.w	r8, sl, r3
 8013b66:	ee18 7a10 	vmov	r7, s16
 8013b6a:	f8dd a000 	ldr.w	sl, [sp]
 8013b6e:	f8cd 9000 	str.w	r9, [sp]
 8013b72:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8013b76:	4632      	mov	r2, r6
 8013b78:	4639      	mov	r1, r7
 8013b7a:	4640      	mov	r0, r8
 8013b7c:	44b0      	add	r8, r6
 8013b7e:	f007 fd76 	bl	801b66e <memcpy>
 8013b82:	f855 2b04 	ldr.w	r2, [r5], #4
 8013b86:	45a3      	cmp	fp, r4
 8013b88:	444a      	add	r2, r9
 8013b8a:	eb0a 0102 	add.w	r1, sl, r2
 8013b8e:	d02a      	beq.n	8013be6 <rcutils_repl_str+0x14a>
 8013b90:	6828      	ldr	r0, [r5, #0]
 8013b92:	1a82      	subs	r2, r0, r2
 8013b94:	4640      	mov	r0, r8
 8013b96:	4490      	add	r8, r2
 8013b98:	f007 fd69 	bl	801b66e <memcpy>
 8013b9c:	1c62      	adds	r2, r4, #1
 8013b9e:	45a3      	cmp	fp, r4
 8013ba0:	4614      	mov	r4, r2
 8013ba2:	d8e8      	bhi.n	8013b76 <rcutils_repl_str+0xda>
 8013ba4:	f8dd 9000 	ldr.w	r9, [sp]
 8013ba8:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 8013bac:	2300      	movs	r3, #0
 8013bae:	9a05      	ldr	r2, [sp, #20]
 8013bb0:	f80a 3002 	strb.w	r3, [sl, r2]
 8013bb4:	e00b      	b.n	8013bce <rcutils_repl_str+0x132>
 8013bb6:	4620      	mov	r0, r4
 8013bb8:	f8d9 3000 	ldr.w	r3, [r9]
 8013bbc:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8013bc0:	3001      	adds	r0, #1
 8013bc2:	4798      	blx	r3
 8013bc4:	4682      	mov	sl, r0
 8013bc6:	b110      	cbz	r0, 8013bce <rcutils_repl_str+0x132>
 8013bc8:	9900      	ldr	r1, [sp, #0]
 8013bca:	f007 fd48 	bl	801b65e <strcpy>
 8013bce:	4638      	mov	r0, r7
 8013bd0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8013bd4:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8013bd8:	4798      	blx	r3
 8013bda:	4650      	mov	r0, sl
 8013bdc:	b007      	add	sp, #28
 8013bde:	ecbd 8b02 	vpop	{d8}
 8013be2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013be6:	9b02      	ldr	r3, [sp, #8]
 8013be8:	4640      	mov	r0, r8
 8013bea:	f8dd 9000 	ldr.w	r9, [sp]
 8013bee:	1a9a      	subs	r2, r3, r2
 8013bf0:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 8013bf4:	f007 fd3b 	bl	801b66e <memcpy>
 8013bf8:	e7d8      	b.n	8013bac <rcutils_repl_str+0x110>
 8013bfa:	f04f 0a00 	mov.w	sl, #0
 8013bfe:	e7e6      	b.n	8013bce <rcutils_repl_str+0x132>

08013c00 <rcutils_snprintf>:
 8013c00:	b40c      	push	{r2, r3}
 8013c02:	b530      	push	{r4, r5, lr}
 8013c04:	b083      	sub	sp, #12
 8013c06:	ab06      	add	r3, sp, #24
 8013c08:	f853 2b04 	ldr.w	r2, [r3], #4
 8013c0c:	9301      	str	r3, [sp, #4]
 8013c0e:	b1e2      	cbz	r2, 8013c4a <rcutils_snprintf+0x4a>
 8013c10:	fab0 f480 	clz	r4, r0
 8013c14:	fab1 f581 	clz	r5, r1
 8013c18:	ea50 0c01 	orrs.w	ip, r0, r1
 8013c1c:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8013c20:	ea4f 1555 	mov.w	r5, r5, lsr #5
 8013c24:	d008      	beq.n	8013c38 <rcutils_snprintf+0x38>
 8013c26:	b984      	cbnz	r4, 8013c4a <rcutils_snprintf+0x4a>
 8013c28:	b97d      	cbnz	r5, 8013c4a <rcutils_snprintf+0x4a>
 8013c2a:	f007 fb73 	bl	801b314 <vsniprintf>
 8013c2e:	b003      	add	sp, #12
 8013c30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013c34:	b002      	add	sp, #8
 8013c36:	4770      	bx	lr
 8013c38:	4661      	mov	r1, ip
 8013c3a:	4660      	mov	r0, ip
 8013c3c:	f007 fb6a 	bl	801b314 <vsniprintf>
 8013c40:	b003      	add	sp, #12
 8013c42:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013c46:	b002      	add	sp, #8
 8013c48:	4770      	bx	lr
 8013c4a:	f007 fcdb 	bl	801b604 <__errno>
 8013c4e:	2216      	movs	r2, #22
 8013c50:	4603      	mov	r3, r0
 8013c52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013c56:	601a      	str	r2, [r3, #0]
 8013c58:	e7e9      	b.n	8013c2e <rcutils_snprintf+0x2e>
 8013c5a:	bf00      	nop

08013c5c <rcutils_vsnprintf>:
 8013c5c:	b570      	push	{r4, r5, r6, lr}
 8013c5e:	b1b2      	cbz	r2, 8013c8e <rcutils_vsnprintf+0x32>
 8013c60:	fab0 f480 	clz	r4, r0
 8013c64:	fab1 f581 	clz	r5, r1
 8013c68:	ea50 0c01 	orrs.w	ip, r0, r1
 8013c6c:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8013c70:	ea4f 1555 	mov.w	r5, r5, lsr #5
 8013c74:	d005      	beq.n	8013c82 <rcutils_vsnprintf+0x26>
 8013c76:	b954      	cbnz	r4, 8013c8e <rcutils_vsnprintf+0x32>
 8013c78:	b94d      	cbnz	r5, 8013c8e <rcutils_vsnprintf+0x32>
 8013c7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013c7e:	f007 bb49 	b.w	801b314 <vsniprintf>
 8013c82:	4661      	mov	r1, ip
 8013c84:	4660      	mov	r0, ip
 8013c86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013c8a:	f007 bb43 	b.w	801b314 <vsniprintf>
 8013c8e:	f007 fcb9 	bl	801b604 <__errno>
 8013c92:	2316      	movs	r3, #22
 8013c94:	6003      	str	r3, [r0, #0]
 8013c96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013c9a:	bd70      	pop	{r4, r5, r6, pc}

08013c9c <rcutils_strdup>:
 8013c9c:	b084      	sub	sp, #16
 8013c9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013ca0:	ac07      	add	r4, sp, #28
 8013ca2:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8013ca4:	4605      	mov	r5, r0
 8013ca6:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8013caa:	b1d0      	cbz	r0, 8013ce2 <rcutils_strdup+0x46>
 8013cac:	460c      	mov	r4, r1
 8013cae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013cb2:	2100      	movs	r1, #0
 8013cb4:	f7ec fad4 	bl	8000260 <memchr>
 8013cb8:	b180      	cbz	r0, 8013cdc <rcutils_strdup+0x40>
 8013cba:	1b46      	subs	r6, r0, r5
 8013cbc:	1c70      	adds	r0, r6, #1
 8013cbe:	4639      	mov	r1, r7
 8013cc0:	47a0      	blx	r4
 8013cc2:	4604      	mov	r4, r0
 8013cc4:	b128      	cbz	r0, 8013cd2 <rcutils_strdup+0x36>
 8013cc6:	4632      	mov	r2, r6
 8013cc8:	4629      	mov	r1, r5
 8013cca:	f007 fcd0 	bl	801b66e <memcpy>
 8013cce:	2300      	movs	r3, #0
 8013cd0:	55a3      	strb	r3, [r4, r6]
 8013cd2:	4620      	mov	r0, r4
 8013cd4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8013cd8:	b004      	add	sp, #16
 8013cda:	4770      	bx	lr
 8013cdc:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8013ce0:	e7ed      	b.n	8013cbe <rcutils_strdup+0x22>
 8013ce2:	4604      	mov	r4, r0
 8013ce4:	e7f5      	b.n	8013cd2 <rcutils_strdup+0x36>
 8013ce6:	bf00      	nop

08013ce8 <rcutils_strndup>:
 8013ce8:	b082      	sub	sp, #8
 8013cea:	b570      	push	{r4, r5, r6, lr}
 8013cec:	ac04      	add	r4, sp, #16
 8013cee:	4606      	mov	r6, r0
 8013cf0:	e884 000c 	stmia.w	r4, {r2, r3}
 8013cf4:	b1b8      	cbz	r0, 8013d26 <rcutils_strndup+0x3e>
 8013cf6:	460c      	mov	r4, r1
 8013cf8:	460a      	mov	r2, r1
 8013cfa:	2100      	movs	r1, #0
 8013cfc:	f7ec fab0 	bl	8000260 <memchr>
 8013d00:	b100      	cbz	r0, 8013d04 <rcutils_strndup+0x1c>
 8013d02:	1b84      	subs	r4, r0, r6
 8013d04:	9b04      	ldr	r3, [sp, #16]
 8013d06:	1c60      	adds	r0, r4, #1
 8013d08:	9908      	ldr	r1, [sp, #32]
 8013d0a:	4798      	blx	r3
 8013d0c:	4605      	mov	r5, r0
 8013d0e:	b128      	cbz	r0, 8013d1c <rcutils_strndup+0x34>
 8013d10:	4622      	mov	r2, r4
 8013d12:	4631      	mov	r1, r6
 8013d14:	f007 fcab 	bl	801b66e <memcpy>
 8013d18:	2300      	movs	r3, #0
 8013d1a:	552b      	strb	r3, [r5, r4]
 8013d1c:	4628      	mov	r0, r5
 8013d1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013d22:	b002      	add	sp, #8
 8013d24:	4770      	bx	lr
 8013d26:	4605      	mov	r5, r0
 8013d28:	e7f8      	b.n	8013d1c <rcutils_strndup+0x34>
 8013d2a:	bf00      	nop

08013d2c <rcutils_get_zero_initialized_string_map>:
 8013d2c:	2000      	movs	r0, #0
 8013d2e:	4b01      	ldr	r3, [pc, #4]	; (8013d34 <rcutils_get_zero_initialized_string_map+0x8>)
 8013d30:	6018      	str	r0, [r3, #0]
 8013d32:	4770      	bx	lr
 8013d34:	2000bdf0 	.word	0x2000bdf0

08013d38 <rcutils_string_map_reserve>:
 8013d38:	2800      	cmp	r0, #0
 8013d3a:	d03e      	beq.n	8013dba <rcutils_string_map_reserve+0x82>
 8013d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d3e:	6805      	ldr	r5, [r0, #0]
 8013d40:	4606      	mov	r6, r0
 8013d42:	460c      	mov	r4, r1
 8013d44:	b12d      	cbz	r5, 8013d52 <rcutils_string_map_reserve+0x1a>
 8013d46:	68ab      	ldr	r3, [r5, #8]
 8013d48:	42a3      	cmp	r3, r4
 8013d4a:	d904      	bls.n	8013d56 <rcutils_string_map_reserve+0x1e>
 8013d4c:	461c      	mov	r4, r3
 8013d4e:	2d00      	cmp	r5, #0
 8013d50:	d1f9      	bne.n	8013d46 <rcutils_string_map_reserve+0xe>
 8013d52:	201f      	movs	r0, #31
 8013d54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013d56:	686b      	ldr	r3, [r5, #4]
 8013d58:	42a3      	cmp	r3, r4
 8013d5a:	d02a      	beq.n	8013db2 <rcutils_string_map_reserve+0x7a>
 8013d5c:	69e9      	ldr	r1, [r5, #28]
 8013d5e:	b304      	cbz	r4, 8013da2 <rcutils_string_map_reserve+0x6a>
 8013d60:	f1b4 5f00 	cmp.w	r4, #536870912	; 0x20000000
 8013d64:	d227      	bcs.n	8013db6 <rcutils_string_map_reserve+0x7e>
 8013d66:	00e7      	lsls	r7, r4, #3
 8013d68:	460a      	mov	r2, r1
 8013d6a:	696b      	ldr	r3, [r5, #20]
 8013d6c:	6828      	ldr	r0, [r5, #0]
 8013d6e:	4639      	mov	r1, r7
 8013d70:	4798      	blx	r3
 8013d72:	b300      	cbz	r0, 8013db6 <rcutils_string_map_reserve+0x7e>
 8013d74:	6835      	ldr	r5, [r6, #0]
 8013d76:	686a      	ldr	r2, [r5, #4]
 8013d78:	6028      	str	r0, [r5, #0]
 8013d7a:	42a2      	cmp	r2, r4
 8013d7c:	d216      	bcs.n	8013dac <rcutils_string_map_reserve+0x74>
 8013d7e:	43d1      	mvns	r1, r2
 8013d80:	eb00 03c2 	add.w	r3, r0, r2, lsl #3
 8013d84:	4421      	add	r1, r4
 8013d86:	2909      	cmp	r1, #9
 8013d88:	d919      	bls.n	8013dbe <rcutils_string_map_reserve+0x86>
 8013d8a:	0759      	lsls	r1, r3, #29
 8013d8c:	d117      	bne.n	8013dbe <rcutils_string_map_reserve+0x86>
 8013d8e:	1aa1      	subs	r1, r4, r2
 8013d90:	2600      	movs	r6, #0
 8013d92:	2200      	movs	r2, #0
 8013d94:	2700      	movs	r7, #0
 8013d96:	3201      	adds	r2, #1
 8013d98:	4291      	cmp	r1, r2
 8013d9a:	e8e3 6702 	strd	r6, r7, [r3], #8
 8013d9e:	d8fa      	bhi.n	8013d96 <rcutils_string_map_reserve+0x5e>
 8013da0:	e004      	b.n	8013dac <rcutils_string_map_reserve+0x74>
 8013da2:	692b      	ldr	r3, [r5, #16]
 8013da4:	6828      	ldr	r0, [r5, #0]
 8013da6:	4798      	blx	r3
 8013da8:	6835      	ldr	r5, [r6, #0]
 8013daa:	602c      	str	r4, [r5, #0]
 8013dac:	2000      	movs	r0, #0
 8013dae:	606c      	str	r4, [r5, #4]
 8013db0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013db2:	2000      	movs	r0, #0
 8013db4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013db6:	200a      	movs	r0, #10
 8013db8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013dba:	200b      	movs	r0, #11
 8013dbc:	4770      	bx	lr
 8013dbe:	4438      	add	r0, r7
 8013dc0:	2200      	movs	r2, #0
 8013dc2:	e9c3 2200 	strd	r2, r2, [r3]
 8013dc6:	3308      	adds	r3, #8
 8013dc8:	4283      	cmp	r3, r0
 8013dca:	d1fa      	bne.n	8013dc2 <rcutils_string_map_reserve+0x8a>
 8013dcc:	e7ee      	b.n	8013dac <rcutils_string_map_reserve+0x74>
 8013dce:	bf00      	nop

08013dd0 <rcutils_string_map_init>:
 8013dd0:	b082      	sub	sp, #8
 8013dd2:	b570      	push	{r4, r5, r6, lr}
 8013dd4:	ac04      	add	r4, sp, #16
 8013dd6:	e884 000c 	stmia.w	r4, {r2, r3}
 8013dda:	b378      	cbz	r0, 8013e3c <rcutils_string_map_init+0x6c>
 8013ddc:	6806      	ldr	r6, [r0, #0]
 8013dde:	4604      	mov	r4, r0
 8013de0:	b12e      	cbz	r6, 8013dee <rcutils_string_map_init+0x1e>
 8013de2:	251e      	movs	r5, #30
 8013de4:	4628      	mov	r0, r5
 8013de6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013dea:	b002      	add	sp, #8
 8013dec:	4770      	bx	lr
 8013dee:	a804      	add	r0, sp, #16
 8013df0:	460d      	mov	r5, r1
 8013df2:	f7f9 ffa9 	bl	800dd48 <rcutils_allocator_is_valid>
 8013df6:	b308      	cbz	r0, 8013e3c <rcutils_string_map_init+0x6c>
 8013df8:	9b04      	ldr	r3, [sp, #16]
 8013dfa:	2020      	movs	r0, #32
 8013dfc:	9908      	ldr	r1, [sp, #32]
 8013dfe:	4798      	blx	r3
 8013e00:	6020      	str	r0, [r4, #0]
 8013e02:	b308      	cbz	r0, 8013e48 <rcutils_string_map_init+0x78>
 8013e04:	f10d 0e10 	add.w	lr, sp, #16
 8013e08:	6086      	str	r6, [r0, #8]
 8013e0a:	f100 0c0c 	add.w	ip, r0, #12
 8013e0e:	e9c0 6600 	strd	r6, r6, [r0]
 8013e12:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013e16:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013e1a:	f8de 3000 	ldr.w	r3, [lr]
 8013e1e:	4629      	mov	r1, r5
 8013e20:	4620      	mov	r0, r4
 8013e22:	f8cc 3000 	str.w	r3, [ip]
 8013e26:	f7ff ff87 	bl	8013d38 <rcutils_string_map_reserve>
 8013e2a:	4605      	mov	r5, r0
 8013e2c:	2800      	cmp	r0, #0
 8013e2e:	d0d9      	beq.n	8013de4 <rcutils_string_map_init+0x14>
 8013e30:	9b05      	ldr	r3, [sp, #20]
 8013e32:	9908      	ldr	r1, [sp, #32]
 8013e34:	6820      	ldr	r0, [r4, #0]
 8013e36:	4798      	blx	r3
 8013e38:	6026      	str	r6, [r4, #0]
 8013e3a:	e7d3      	b.n	8013de4 <rcutils_string_map_init+0x14>
 8013e3c:	250b      	movs	r5, #11
 8013e3e:	4628      	mov	r0, r5
 8013e40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013e44:	b002      	add	sp, #8
 8013e46:	4770      	bx	lr
 8013e48:	250a      	movs	r5, #10
 8013e4a:	e7cb      	b.n	8013de4 <rcutils_string_map_init+0x14>

08013e4c <rcutils_string_map_fini>:
 8013e4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013e50:	b083      	sub	sp, #12
 8013e52:	2800      	cmp	r0, #0
 8013e54:	d03e      	beq.n	8013ed4 <rcutils_string_map_fini+0x88>
 8013e56:	6804      	ldr	r4, [r0, #0]
 8013e58:	4606      	mov	r6, r0
 8013e5a:	2c00      	cmp	r4, #0
 8013e5c:	d036      	beq.n	8013ecc <rcutils_string_map_fini+0x80>
 8013e5e:	6863      	ldr	r3, [r4, #4]
 8013e60:	b34b      	cbz	r3, 8013eb6 <rcutils_string_map_fini+0x6a>
 8013e62:	2500      	movs	r5, #0
 8013e64:	6822      	ldr	r2, [r4, #0]
 8013e66:	462f      	mov	r7, r5
 8013e68:	f852 0035 	ldr.w	r0, [r2, r5, lsl #3]
 8013e6c:	ea4f 08c5 	mov.w	r8, r5, lsl #3
 8013e70:	b1f0      	cbz	r0, 8013eb0 <rcutils_string_map_fini+0x64>
 8013e72:	69e1      	ldr	r1, [r4, #28]
 8013e74:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8013e78:	9101      	str	r1, [sp, #4]
 8013e7a:	47c8      	blx	r9
 8013e7c:	6823      	ldr	r3, [r4, #0]
 8013e7e:	9901      	ldr	r1, [sp, #4]
 8013e80:	eb03 0208 	add.w	r2, r3, r8
 8013e84:	f843 7035 	str.w	r7, [r3, r5, lsl #3]
 8013e88:	3501      	adds	r5, #1
 8013e8a:	6850      	ldr	r0, [r2, #4]
 8013e8c:	47c8      	blx	r9
 8013e8e:	68a3      	ldr	r3, [r4, #8]
 8013e90:	6822      	ldr	r2, [r4, #0]
 8013e92:	3b01      	subs	r3, #1
 8013e94:	4442      	add	r2, r8
 8013e96:	6057      	str	r7, [r2, #4]
 8013e98:	60a3      	str	r3, [r4, #8]
 8013e9a:	6834      	ldr	r4, [r6, #0]
 8013e9c:	6863      	ldr	r3, [r4, #4]
 8013e9e:	429d      	cmp	r5, r3
 8013ea0:	d209      	bcs.n	8013eb6 <rcutils_string_map_fini+0x6a>
 8013ea2:	6822      	ldr	r2, [r4, #0]
 8013ea4:	ea4f 08c5 	mov.w	r8, r5, lsl #3
 8013ea8:	f852 0035 	ldr.w	r0, [r2, r5, lsl #3]
 8013eac:	2800      	cmp	r0, #0
 8013eae:	d1e0      	bne.n	8013e72 <rcutils_string_map_fini+0x26>
 8013eb0:	3501      	adds	r5, #1
 8013eb2:	429d      	cmp	r5, r3
 8013eb4:	d3d8      	bcc.n	8013e68 <rcutils_string_map_fini+0x1c>
 8013eb6:	2100      	movs	r1, #0
 8013eb8:	4630      	mov	r0, r6
 8013eba:	f7ff ff3d 	bl	8013d38 <rcutils_string_map_reserve>
 8013ebe:	4604      	mov	r4, r0
 8013ec0:	b920      	cbnz	r0, 8013ecc <rcutils_string_map_fini+0x80>
 8013ec2:	6830      	ldr	r0, [r6, #0]
 8013ec4:	6903      	ldr	r3, [r0, #16]
 8013ec6:	69c1      	ldr	r1, [r0, #28]
 8013ec8:	4798      	blx	r3
 8013eca:	6034      	str	r4, [r6, #0]
 8013ecc:	4620      	mov	r0, r4
 8013ece:	b003      	add	sp, #12
 8013ed0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013ed4:	240b      	movs	r4, #11
 8013ed6:	4620      	mov	r0, r4
 8013ed8:	b003      	add	sp, #12
 8013eda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013ede:	bf00      	nop

08013ee0 <rcutils_string_map_getn>:
 8013ee0:	b338      	cbz	r0, 8013f32 <rcutils_string_map_getn+0x52>
 8013ee2:	6803      	ldr	r3, [r0, #0]
 8013ee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013ee8:	4688      	mov	r8, r1
 8013eea:	b1d9      	cbz	r1, 8013f24 <rcutils_string_map_getn+0x44>
 8013eec:	fab3 f483 	clz	r4, r3
 8013ef0:	0964      	lsrs	r4, r4, #5
 8013ef2:	b1bb      	cbz	r3, 8013f24 <rcutils_string_map_getn+0x44>
 8013ef4:	4691      	mov	r9, r2
 8013ef6:	e9d3 7600 	ldrd	r7, r6, [r3]
 8013efa:	b19e      	cbz	r6, 8013f24 <rcutils_string_map_getn+0x44>
 8013efc:	f857 5034 	ldr.w	r5, [r7, r4, lsl #3]
 8013f00:	eb07 0ac4 	add.w	sl, r7, r4, lsl #3
 8013f04:	3401      	adds	r4, #1
 8013f06:	4628      	mov	r0, r5
 8013f08:	b155      	cbz	r5, 8013f20 <rcutils_string_map_getn+0x40>
 8013f0a:	f7ec f9f9 	bl	8000300 <strlen>
 8013f0e:	4602      	mov	r2, r0
 8013f10:	4629      	mov	r1, r5
 8013f12:	4640      	mov	r0, r8
 8013f14:	454a      	cmp	r2, r9
 8013f16:	bf38      	it	cc
 8013f18:	464a      	movcc	r2, r9
 8013f1a:	f007 fa48 	bl	801b3ae <strncmp>
 8013f1e:	b120      	cbz	r0, 8013f2a <rcutils_string_map_getn+0x4a>
 8013f20:	42a6      	cmp	r6, r4
 8013f22:	d1eb      	bne.n	8013efc <rcutils_string_map_getn+0x1c>
 8013f24:	2000      	movs	r0, #0
 8013f26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013f2a:	f8da 0004 	ldr.w	r0, [sl, #4]
 8013f2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013f32:	4770      	bx	lr
 8013f34:	0000      	movs	r0, r0
	...

08013f38 <rmw_get_zero_initialized_context>:
 8013f38:	b510      	push	{r4, lr}
 8013f3a:	4604      	mov	r4, r0
 8013f3c:	3010      	adds	r0, #16
 8013f3e:	f000 f80f 	bl	8013f60 <rmw_get_zero_initialized_init_options>
 8013f42:	2300      	movs	r3, #0
 8013f44:	4620      	mov	r0, r4
 8013f46:	60a3      	str	r3, [r4, #8]
 8013f48:	66a3      	str	r3, [r4, #104]	; 0x68
 8013f4a:	66e3      	str	r3, [r4, #108]	; 0x6c
 8013f4c:	ed9f 7b02 	vldr	d7, [pc, #8]	; 8013f58 <rmw_get_zero_initialized_context+0x20>
 8013f50:	ed84 7b00 	vstr	d7, [r4]
 8013f54:	bd10      	pop	{r4, pc}
 8013f56:	bf00      	nop
	...

08013f60 <rmw_get_zero_initialized_init_options>:
 8013f60:	b510      	push	{r4, lr}
 8013f62:	4604      	mov	r4, r0
 8013f64:	2258      	movs	r2, #88	; 0x58
 8013f66:	2100      	movs	r1, #0
 8013f68:	f007 fa0c 	bl	801b384 <memset>
 8013f6c:	f104 0010 	add.w	r0, r4, #16
 8013f70:	f000 f80a 	bl	8013f88 <rmw_get_default_security_options>
 8013f74:	f104 001c 	add.w	r0, r4, #28
 8013f78:	f005 fd54 	bl	8019a24 <rmw_get_zero_initialized_discovery_options>
 8013f7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013f80:	4620      	mov	r0, r4
 8013f82:	60e3      	str	r3, [r4, #12]
 8013f84:	bd10      	pop	{r4, pc}
 8013f86:	bf00      	nop

08013f88 <rmw_get_default_security_options>:
 8013f88:	2200      	movs	r2, #0
 8013f8a:	7002      	strb	r2, [r0, #0]
 8013f8c:	6042      	str	r2, [r0, #4]
 8013f8e:	4770      	bx	lr

08013f90 <rmw_get_zero_initialized_message_info>:
 8013f90:	b510      	push	{r4, lr}
 8013f92:	4604      	mov	r4, r0
 8013f94:	2238      	movs	r2, #56	; 0x38
 8013f96:	2100      	movs	r1, #0
 8013f98:	f007 f9f4 	bl	801b384 <memset>
 8013f9c:	4620      	mov	r0, r4
 8013f9e:	bd10      	pop	{r4, pc}

08013fa0 <rmw_validate_full_topic_name>:
 8013fa0:	2800      	cmp	r0, #0
 8013fa2:	d05d      	beq.n	8014060 <rmw_validate_full_topic_name+0xc0>
 8013fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013fa8:	460d      	mov	r5, r1
 8013faa:	2900      	cmp	r1, #0
 8013fac:	d05a      	beq.n	8014064 <rmw_validate_full_topic_name+0xc4>
 8013fae:	4604      	mov	r4, r0
 8013fb0:	4616      	mov	r6, r2
 8013fb2:	f7ec f9a5 	bl	8000300 <strlen>
 8013fb6:	b150      	cbz	r0, 8013fce <rmw_validate_full_topic_name+0x2e>
 8013fb8:	7823      	ldrb	r3, [r4, #0]
 8013fba:	2b2f      	cmp	r3, #47	; 0x2f
 8013fbc:	d00e      	beq.n	8013fdc <rmw_validate_full_topic_name+0x3c>
 8013fbe:	2302      	movs	r3, #2
 8013fc0:	602b      	str	r3, [r5, #0]
 8013fc2:	b146      	cbz	r6, 8013fd6 <rmw_validate_full_topic_name+0x36>
 8013fc4:	2300      	movs	r3, #0
 8013fc6:	4618      	mov	r0, r3
 8013fc8:	6033      	str	r3, [r6, #0]
 8013fca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013fce:	2301      	movs	r3, #1
 8013fd0:	602b      	str	r3, [r5, #0]
 8013fd2:	2e00      	cmp	r6, #0
 8013fd4:	d1f6      	bne.n	8013fc4 <rmw_validate_full_topic_name+0x24>
 8013fd6:	2000      	movs	r0, #0
 8013fd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013fdc:	1e43      	subs	r3, r0, #1
 8013fde:	5ce2      	ldrb	r2, [r4, r3]
 8013fe0:	2a2f      	cmp	r2, #47	; 0x2f
 8013fe2:	d041      	beq.n	8014068 <rmw_validate_full_topic_name+0xc8>
 8013fe4:	1e62      	subs	r2, r4, #1
 8013fe6:	f1c4 0e01 	rsb	lr, r4, #1
 8013fea:	eb02 0800 	add.w	r8, r2, r0
 8013fee:	eb0e 0702 	add.w	r7, lr, r2
 8013ff2:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8013ff6:	f023 0120 	bic.w	r1, r3, #32
 8013ffa:	f1a3 0c2f 	sub.w	ip, r3, #47	; 0x2f
 8013ffe:	3941      	subs	r1, #65	; 0x41
 8014000:	2919      	cmp	r1, #25
 8014002:	d90f      	bls.n	8014024 <rmw_validate_full_topic_name+0x84>
 8014004:	f1bc 0f0a 	cmp.w	ip, #10
 8014008:	d90c      	bls.n	8014024 <rmw_validate_full_topic_name+0x84>
 801400a:	f1a3 035f 	sub.w	r3, r3, #95	; 0x5f
 801400e:	fab3 f383 	clz	r3, r3
 8014012:	095b      	lsrs	r3, r3, #5
 8014014:	b933      	cbnz	r3, 8014024 <rmw_validate_full_topic_name+0x84>
 8014016:	2204      	movs	r2, #4
 8014018:	602a      	str	r2, [r5, #0]
 801401a:	2e00      	cmp	r6, #0
 801401c:	d0db      	beq.n	8013fd6 <rmw_validate_full_topic_name+0x36>
 801401e:	4618      	mov	r0, r3
 8014020:	6037      	str	r7, [r6, #0]
 8014022:	e7d2      	b.n	8013fca <rmw_validate_full_topic_name+0x2a>
 8014024:	4542      	cmp	r2, r8
 8014026:	d1e2      	bne.n	8013fee <rmw_validate_full_topic_name+0x4e>
 8014028:	2301      	movs	r3, #1
 801402a:	4f1a      	ldr	r7, [pc, #104]	; (8014094 <rmw_validate_full_topic_name+0xf4>)
 801402c:	e004      	b.n	8014038 <rmw_validate_full_topic_name+0x98>
 801402e:	4298      	cmp	r0, r3
 8014030:	f104 0401 	add.w	r4, r4, #1
 8014034:	4613      	mov	r3, r2
 8014036:	d91c      	bls.n	8014072 <rmw_validate_full_topic_name+0xd2>
 8014038:	4298      	cmp	r0, r3
 801403a:	f103 0201 	add.w	r2, r3, #1
 801403e:	d0f6      	beq.n	801402e <rmw_validate_full_topic_name+0x8e>
 8014040:	7821      	ldrb	r1, [r4, #0]
 8014042:	292f      	cmp	r1, #47	; 0x2f
 8014044:	d1f3      	bne.n	801402e <rmw_validate_full_topic_name+0x8e>
 8014046:	7861      	ldrb	r1, [r4, #1]
 8014048:	292f      	cmp	r1, #47	; 0x2f
 801404a:	d01e      	beq.n	801408a <rmw_validate_full_topic_name+0xea>
 801404c:	5dc9      	ldrb	r1, [r1, r7]
 801404e:	0749      	lsls	r1, r1, #29
 8014050:	d5ed      	bpl.n	801402e <rmw_validate_full_topic_name+0x8e>
 8014052:	2206      	movs	r2, #6
 8014054:	602a      	str	r2, [r5, #0]
 8014056:	2e00      	cmp	r6, #0
 8014058:	d0bd      	beq.n	8013fd6 <rmw_validate_full_topic_name+0x36>
 801405a:	2000      	movs	r0, #0
 801405c:	6033      	str	r3, [r6, #0]
 801405e:	e7b4      	b.n	8013fca <rmw_validate_full_topic_name+0x2a>
 8014060:	200b      	movs	r0, #11
 8014062:	4770      	bx	lr
 8014064:	200b      	movs	r0, #11
 8014066:	e7b0      	b.n	8013fca <rmw_validate_full_topic_name+0x2a>
 8014068:	2203      	movs	r2, #3
 801406a:	602a      	str	r2, [r5, #0]
 801406c:	2e00      	cmp	r6, #0
 801406e:	d1f4      	bne.n	801405a <rmw_validate_full_topic_name+0xba>
 8014070:	e7b1      	b.n	8013fd6 <rmw_validate_full_topic_name+0x36>
 8014072:	28f7      	cmp	r0, #247	; 0xf7
 8014074:	d803      	bhi.n	801407e <rmw_validate_full_topic_name+0xde>
 8014076:	2300      	movs	r3, #0
 8014078:	4618      	mov	r0, r3
 801407a:	602b      	str	r3, [r5, #0]
 801407c:	e7a5      	b.n	8013fca <rmw_validate_full_topic_name+0x2a>
 801407e:	2307      	movs	r3, #7
 8014080:	602b      	str	r3, [r5, #0]
 8014082:	2e00      	cmp	r6, #0
 8014084:	d0a7      	beq.n	8013fd6 <rmw_validate_full_topic_name+0x36>
 8014086:	23f6      	movs	r3, #246	; 0xf6
 8014088:	e7e7      	b.n	801405a <rmw_validate_full_topic_name+0xba>
 801408a:	2205      	movs	r2, #5
 801408c:	602a      	str	r2, [r5, #0]
 801408e:	2e00      	cmp	r6, #0
 8014090:	d1e3      	bne.n	801405a <rmw_validate_full_topic_name+0xba>
 8014092:	e7a0      	b.n	8013fd6 <rmw_validate_full_topic_name+0x36>
 8014094:	0801de30 	.word	0x0801de30

08014098 <rmw_validate_namespace_with_size>:
 8014098:	2800      	cmp	r0, #0
 801409a:	d043      	beq.n	8014124 <rmw_validate_namespace_with_size+0x8c>
 801409c:	b570      	push	{r4, r5, r6, lr}
 801409e:	4614      	mov	r4, r2
 80140a0:	b0c2      	sub	sp, #264	; 0x108
 80140a2:	b32a      	cbz	r2, 80140f0 <rmw_validate_namespace_with_size+0x58>
 80140a4:	2901      	cmp	r1, #1
 80140a6:	460d      	mov	r5, r1
 80140a8:	461e      	mov	r6, r3
 80140aa:	d102      	bne.n	80140b2 <rmw_validate_namespace_with_size+0x1a>
 80140ac:	7803      	ldrb	r3, [r0, #0]
 80140ae:	2b2f      	cmp	r3, #47	; 0x2f
 80140b0:	d012      	beq.n	80140d8 <rmw_validate_namespace_with_size+0x40>
 80140b2:	aa01      	add	r2, sp, #4
 80140b4:	4669      	mov	r1, sp
 80140b6:	f7ff ff73 	bl	8013fa0 <rmw_validate_full_topic_name>
 80140ba:	b980      	cbnz	r0, 80140de <rmw_validate_namespace_with_size+0x46>
 80140bc:	9a00      	ldr	r2, [sp, #0]
 80140be:	b14a      	cbz	r2, 80140d4 <rmw_validate_namespace_with_size+0x3c>
 80140c0:	2a07      	cmp	r2, #7
 80140c2:	d007      	beq.n	80140d4 <rmw_validate_namespace_with_size+0x3c>
 80140c4:	1e53      	subs	r3, r2, #1
 80140c6:	2b05      	cmp	r3, #5
 80140c8:	d82e      	bhi.n	8014128 <rmw_validate_namespace_with_size+0x90>
 80140ca:	e8df f003 	tbb	[pc, r3]
 80140ce:	1f1c      	.short	0x1f1c
 80140d0:	14282522 	.word	0x14282522
 80140d4:	2df5      	cmp	r5, #245	; 0xf5
 80140d6:	d804      	bhi.n	80140e2 <rmw_validate_namespace_with_size+0x4a>
 80140d8:	2300      	movs	r3, #0
 80140da:	4618      	mov	r0, r3
 80140dc:	6023      	str	r3, [r4, #0]
 80140de:	b042      	add	sp, #264	; 0x108
 80140e0:	bd70      	pop	{r4, r5, r6, pc}
 80140e2:	2307      	movs	r3, #7
 80140e4:	6023      	str	r3, [r4, #0]
 80140e6:	2e00      	cmp	r6, #0
 80140e8:	d0f9      	beq.n	80140de <rmw_validate_namespace_with_size+0x46>
 80140ea:	23f4      	movs	r3, #244	; 0xf4
 80140ec:	6033      	str	r3, [r6, #0]
 80140ee:	e7f6      	b.n	80140de <rmw_validate_namespace_with_size+0x46>
 80140f0:	200b      	movs	r0, #11
 80140f2:	b042      	add	sp, #264	; 0x108
 80140f4:	bd70      	pop	{r4, r5, r6, pc}
 80140f6:	2306      	movs	r3, #6
 80140f8:	6023      	str	r3, [r4, #0]
 80140fa:	2e00      	cmp	r6, #0
 80140fc:	d0ef      	beq.n	80140de <rmw_validate_namespace_with_size+0x46>
 80140fe:	9b01      	ldr	r3, [sp, #4]
 8014100:	6033      	str	r3, [r6, #0]
 8014102:	b042      	add	sp, #264	; 0x108
 8014104:	bd70      	pop	{r4, r5, r6, pc}
 8014106:	2301      	movs	r3, #1
 8014108:	6023      	str	r3, [r4, #0]
 801410a:	e7f6      	b.n	80140fa <rmw_validate_namespace_with_size+0x62>
 801410c:	2302      	movs	r3, #2
 801410e:	6023      	str	r3, [r4, #0]
 8014110:	e7f3      	b.n	80140fa <rmw_validate_namespace_with_size+0x62>
 8014112:	2303      	movs	r3, #3
 8014114:	6023      	str	r3, [r4, #0]
 8014116:	e7f0      	b.n	80140fa <rmw_validate_namespace_with_size+0x62>
 8014118:	2304      	movs	r3, #4
 801411a:	6023      	str	r3, [r4, #0]
 801411c:	e7ed      	b.n	80140fa <rmw_validate_namespace_with_size+0x62>
 801411e:	2305      	movs	r3, #5
 8014120:	6023      	str	r3, [r4, #0]
 8014122:	e7ea      	b.n	80140fa <rmw_validate_namespace_with_size+0x62>
 8014124:	200b      	movs	r0, #11
 8014126:	4770      	bx	lr
 8014128:	4613      	mov	r3, r2
 801412a:	f44f 7180 	mov.w	r1, #256	; 0x100
 801412e:	4a03      	ldr	r2, [pc, #12]	; (801413c <rmw_validate_namespace_with_size+0xa4>)
 8014130:	a802      	add	r0, sp, #8
 8014132:	f7ff fd65 	bl	8013c00 <rcutils_snprintf>
 8014136:	2001      	movs	r0, #1
 8014138:	e7d1      	b.n	80140de <rmw_validate_namespace_with_size+0x46>
 801413a:	bf00      	nop
 801413c:	0801d4ec 	.word	0x0801d4ec

08014140 <rmw_validate_namespace>:
 8014140:	b168      	cbz	r0, 801415e <rmw_validate_namespace+0x1e>
 8014142:	b570      	push	{r4, r5, r6, lr}
 8014144:	460d      	mov	r5, r1
 8014146:	4616      	mov	r6, r2
 8014148:	4604      	mov	r4, r0
 801414a:	f7ec f8d9 	bl	8000300 <strlen>
 801414e:	4633      	mov	r3, r6
 8014150:	4601      	mov	r1, r0
 8014152:	462a      	mov	r2, r5
 8014154:	4620      	mov	r0, r4
 8014156:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801415a:	f7ff bf9d 	b.w	8014098 <rmw_validate_namespace_with_size>
 801415e:	200b      	movs	r0, #11
 8014160:	4770      	bx	lr
 8014162:	bf00      	nop

08014164 <rmw_namespace_validation_result_string>:
 8014164:	2807      	cmp	r0, #7
 8014166:	d803      	bhi.n	8014170 <rmw_namespace_validation_result_string+0xc>
 8014168:	4b02      	ldr	r3, [pc, #8]	; (8014174 <rmw_namespace_validation_result_string+0x10>)
 801416a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801416e:	4770      	bx	lr
 8014170:	4801      	ldr	r0, [pc, #4]	; (8014178 <rmw_namespace_validation_result_string+0x14>)
 8014172:	4770      	bx	lr
 8014174:	0801d6e4 	.word	0x0801d6e4
 8014178:	0801d53c 	.word	0x0801d53c

0801417c <rmw_validate_node_name>:
 801417c:	2800      	cmp	r0, #0
 801417e:	d042      	beq.n	8014206 <rmw_validate_node_name+0x8a>
 8014180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014184:	460d      	mov	r5, r1
 8014186:	2900      	cmp	r1, #0
 8014188:	d03f      	beq.n	801420a <rmw_validate_node_name+0x8e>
 801418a:	4604      	mov	r4, r0
 801418c:	4616      	mov	r6, r2
 801418e:	f7ec f8b7 	bl	8000300 <strlen>
 8014192:	b310      	cbz	r0, 80141da <rmw_validate_node_name+0x5e>
 8014194:	1e63      	subs	r3, r4, #1
 8014196:	f1c4 0101 	rsb	r1, r4, #1
 801419a:	eb03 0800 	add.w	r8, r3, r0
 801419e:	18cf      	adds	r7, r1, r3
 80141a0:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 80141a4:	f1ae 0230 	sub.w	r2, lr, #48	; 0x30
 80141a8:	f02e 0c20 	bic.w	ip, lr, #32
 80141ac:	2a09      	cmp	r2, #9
 80141ae:	f1ac 0c41 	sub.w	ip, ip, #65	; 0x41
 80141b2:	d905      	bls.n	80141c0 <rmw_validate_node_name+0x44>
 80141b4:	f1bc 0f19 	cmp.w	ip, #25
 80141b8:	d902      	bls.n	80141c0 <rmw_validate_node_name+0x44>
 80141ba:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
 80141be:	d114      	bne.n	80141ea <rmw_validate_node_name+0x6e>
 80141c0:	4598      	cmp	r8, r3
 80141c2:	d1ec      	bne.n	801419e <rmw_validate_node_name+0x22>
 80141c4:	7822      	ldrb	r2, [r4, #0]
 80141c6:	4b16      	ldr	r3, [pc, #88]	; (8014220 <rmw_validate_node_name+0xa4>)
 80141c8:	5cd3      	ldrb	r3, [r2, r3]
 80141ca:	f013 0304 	ands.w	r3, r3, #4
 80141ce:	d113      	bne.n	80141f8 <rmw_validate_node_name+0x7c>
 80141d0:	28ff      	cmp	r0, #255	; 0xff
 80141d2:	d81c      	bhi.n	801420e <rmw_validate_node_name+0x92>
 80141d4:	4618      	mov	r0, r3
 80141d6:	602b      	str	r3, [r5, #0]
 80141d8:	e00c      	b.n	80141f4 <rmw_validate_node_name+0x78>
 80141da:	2301      	movs	r3, #1
 80141dc:	602b      	str	r3, [r5, #0]
 80141de:	b17e      	cbz	r6, 8014200 <rmw_validate_node_name+0x84>
 80141e0:	2300      	movs	r3, #0
 80141e2:	4618      	mov	r0, r3
 80141e4:	6033      	str	r3, [r6, #0]
 80141e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80141ea:	2302      	movs	r3, #2
 80141ec:	602b      	str	r3, [r5, #0]
 80141ee:	b13e      	cbz	r6, 8014200 <rmw_validate_node_name+0x84>
 80141f0:	2000      	movs	r0, #0
 80141f2:	6037      	str	r7, [r6, #0]
 80141f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80141f8:	2303      	movs	r3, #3
 80141fa:	602b      	str	r3, [r5, #0]
 80141fc:	2e00      	cmp	r6, #0
 80141fe:	d1ef      	bne.n	80141e0 <rmw_validate_node_name+0x64>
 8014200:	2000      	movs	r0, #0
 8014202:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014206:	200b      	movs	r0, #11
 8014208:	4770      	bx	lr
 801420a:	200b      	movs	r0, #11
 801420c:	e7f2      	b.n	80141f4 <rmw_validate_node_name+0x78>
 801420e:	2204      	movs	r2, #4
 8014210:	602a      	str	r2, [r5, #0]
 8014212:	2e00      	cmp	r6, #0
 8014214:	d0f4      	beq.n	8014200 <rmw_validate_node_name+0x84>
 8014216:	22fe      	movs	r2, #254	; 0xfe
 8014218:	4618      	mov	r0, r3
 801421a:	6032      	str	r2, [r6, #0]
 801421c:	e7ea      	b.n	80141f4 <rmw_validate_node_name+0x78>
 801421e:	bf00      	nop
 8014220:	0801de30 	.word	0x0801de30

08014224 <rmw_node_name_validation_result_string>:
 8014224:	2804      	cmp	r0, #4
 8014226:	d803      	bhi.n	8014230 <rmw_node_name_validation_result_string+0xc>
 8014228:	4b02      	ldr	r3, [pc, #8]	; (8014234 <rmw_node_name_validation_result_string+0x10>)
 801422a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801422e:	4770      	bx	lr
 8014230:	4801      	ldr	r0, [pc, #4]	; (8014238 <rmw_node_name_validation_result_string+0x14>)
 8014232:	4770      	bx	lr
 8014234:	0801d7f0 	.word	0x0801d7f0
 8014238:	0801d704 	.word	0x0801d704

0801423c <rmw_destroy_client>:
 801423c:	b570      	push	{r4, r5, r6, lr}
 801423e:	b128      	cbz	r0, 801424c <rmw_destroy_client+0x10>
 8014240:	4604      	mov	r4, r0
 8014242:	6800      	ldr	r0, [r0, #0]
 8014244:	460d      	mov	r5, r1
 8014246:	f001 fc99 	bl	8015b7c <is_uxrce_rmw_identifier_valid>
 801424a:	b910      	cbnz	r0, 8014252 <rmw_destroy_client+0x16>
 801424c:	2401      	movs	r4, #1
 801424e:	4620      	mov	r0, r4
 8014250:	bd70      	pop	{r4, r5, r6, pc}
 8014252:	6863      	ldr	r3, [r4, #4]
 8014254:	2b00      	cmp	r3, #0
 8014256:	d0f9      	beq.n	801424c <rmw_destroy_client+0x10>
 8014258:	2d00      	cmp	r5, #0
 801425a:	d0f7      	beq.n	801424c <rmw_destroy_client+0x10>
 801425c:	6828      	ldr	r0, [r5, #0]
 801425e:	f001 fc8d 	bl	8015b7c <is_uxrce_rmw_identifier_valid>
 8014262:	2800      	cmp	r0, #0
 8014264:	d0f2      	beq.n	801424c <rmw_destroy_client+0x10>
 8014266:	686e      	ldr	r6, [r5, #4]
 8014268:	2e00      	cmp	r6, #0
 801426a:	d0ef      	beq.n	801424c <rmw_destroy_client+0x10>
 801426c:	6864      	ldr	r4, [r4, #4]
 801426e:	6932      	ldr	r2, [r6, #16]
 8014270:	6920      	ldr	r0, [r4, #16]
 8014272:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8014276:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801427a:	6819      	ldr	r1, [r3, #0]
 801427c:	f001 ff02 	bl	8016084 <uxr_buffer_cancel_data>
 8014280:	4602      	mov	r2, r0
 8014282:	6920      	ldr	r0, [r4, #16]
 8014284:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8014288:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801428c:	f001 fbaa 	bl	80159e4 <run_xrce_session>
 8014290:	6920      	ldr	r0, [r4, #16]
 8014292:	6932      	ldr	r2, [r6, #16]
 8014294:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8014298:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801429c:	6819      	ldr	r1, [r3, #0]
 801429e:	f001 fd11 	bl	8015cc4 <uxr_buffer_delete_entity>
 80142a2:	4602      	mov	r2, r0
 80142a4:	6920      	ldr	r0, [r4, #16]
 80142a6:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80142aa:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80142ae:	f001 fb99 	bl	80159e4 <run_xrce_session>
 80142b2:	4603      	mov	r3, r0
 80142b4:	4628      	mov	r0, r5
 80142b6:	2b00      	cmp	r3, #0
 80142b8:	bf14      	ite	ne
 80142ba:	2400      	movne	r4, #0
 80142bc:	2402      	moveq	r4, #2
 80142be:	f001 fa6d 	bl	801579c <rmw_uxrce_fini_client_memory>
 80142c2:	e7c4      	b.n	801424e <rmw_destroy_client+0x12>

080142c4 <rmw_get_gid_for_client>:
 80142c4:	b1b9      	cbz	r1, 80142f6 <rmw_get_gid_for_client+0x32>
 80142c6:	b538      	push	{r3, r4, r5, lr}
 80142c8:	4605      	mov	r5, r0
 80142ca:	b180      	cbz	r0, 80142ee <rmw_get_gid_for_client+0x2a>
 80142cc:	6800      	ldr	r0, [r0, #0]
 80142ce:	460c      	mov	r4, r1
 80142d0:	b120      	cbz	r0, 80142dc <rmw_get_gid_for_client+0x18>
 80142d2:	4b0a      	ldr	r3, [pc, #40]	; (80142fc <rmw_get_gid_for_client+0x38>)
 80142d4:	6819      	ldr	r1, [r3, #0]
 80142d6:	f7eb ffb3 	bl	8000240 <strcmp>
 80142da:	b950      	cbnz	r0, 80142f2 <rmw_get_gid_for_client+0x2e>
 80142dc:	686b      	ldr	r3, [r5, #4]
 80142de:	2000      	movs	r0, #0
 80142e0:	6060      	str	r0, [r4, #4]
 80142e2:	60a0      	str	r0, [r4, #8]
 80142e4:	60e0      	str	r0, [r4, #12]
 80142e6:	6120      	str	r0, [r4, #16]
 80142e8:	691b      	ldr	r3, [r3, #16]
 80142ea:	6063      	str	r3, [r4, #4]
 80142ec:	bd38      	pop	{r3, r4, r5, pc}
 80142ee:	200b      	movs	r0, #11
 80142f0:	bd38      	pop	{r3, r4, r5, pc}
 80142f2:	200c      	movs	r0, #12
 80142f4:	bd38      	pop	{r3, r4, r5, pc}
 80142f6:	200b      	movs	r0, #11
 80142f8:	4770      	bx	lr
 80142fa:	bf00      	nop
 80142fc:	0801dc70 	.word	0x0801dc70

08014300 <rmw_get_implementation_identifier>:
 8014300:	4b01      	ldr	r3, [pc, #4]	; (8014308 <rmw_get_implementation_identifier+0x8>)
 8014302:	6818      	ldr	r0, [r3, #0]
 8014304:	4770      	bx	lr
 8014306:	bf00      	nop
 8014308:	0801dc70 	.word	0x0801dc70

0801430c <rmw_init_options_init>:
 801430c:	b084      	sub	sp, #16
 801430e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014310:	b083      	sub	sp, #12
 8014312:	ad09      	add	r5, sp, #36	; 0x24
 8014314:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8014318:	b130      	cbz	r0, 8014328 <rmw_init_options_init+0x1c>
 801431a:	4604      	mov	r4, r0
 801431c:	4628      	mov	r0, r5
 801431e:	f7f9 fd13 	bl	800dd48 <rcutils_allocator_is_valid>
 8014322:	b108      	cbz	r0, 8014328 <rmw_init_options_init+0x1c>
 8014324:	68a6      	ldr	r6, [r4, #8]
 8014326:	b12e      	cbz	r6, 8014334 <rmw_init_options_init+0x28>
 8014328:	200b      	movs	r0, #11
 801432a:	b003      	add	sp, #12
 801432c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014330:	b004      	add	sp, #16
 8014332:	4770      	bx	lr
 8014334:	2200      	movs	r2, #0
 8014336:	2300      	movs	r3, #0
 8014338:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 801433c:	f8df e098 	ldr.w	lr, [pc, #152]	; 80143d8 <rmw_init_options_init+0xcc>
 8014340:	466f      	mov	r7, sp
 8014342:	e9c4 2300 	strd	r2, r3, [r4]
 8014346:	4b20      	ldr	r3, [pc, #128]	; (80143c8 <rmw_init_options_init+0xbc>)
 8014348:	681b      	ldr	r3, [r3, #0]
 801434a:	60a3      	str	r3, [r4, #8]
 801434c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801434e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014352:	682b      	ldr	r3, [r5, #0]
 8014354:	4638      	mov	r0, r7
 8014356:	f8cc 3000 	str.w	r3, [ip]
 801435a:	f8c4 e03c 	str.w	lr, [r4, #60]	; 0x3c
 801435e:	60e6      	str	r6, [r4, #12]
 8014360:	f7ff fe12 	bl	8013f88 <rmw_get_default_security_options>
 8014364:	f104 0310 	add.w	r3, r4, #16
 8014368:	2203      	movs	r2, #3
 801436a:	e897 0003 	ldmia.w	r7, {r0, r1}
 801436e:	e883 0003 	stmia.w	r3, {r0, r1}
 8014372:	4816      	ldr	r0, [pc, #88]	; (80143cc <rmw_init_options_init+0xc0>)
 8014374:	4916      	ldr	r1, [pc, #88]	; (80143d0 <rmw_init_options_init+0xc4>)
 8014376:	7626      	strb	r6, [r4, #24]
 8014378:	f001 f950 	bl	801561c <rmw_uxrce_init_init_options_impl_memory>
 801437c:	4813      	ldr	r0, [pc, #76]	; (80143cc <rmw_init_options_init+0xc0>)
 801437e:	f005 fcf5 	bl	8019d6c <get_memory>
 8014382:	b1f0      	cbz	r0, 80143c2 <rmw_init_options_init+0xb6>
 8014384:	4a13      	ldr	r2, [pc, #76]	; (80143d4 <rmw_init_options_init+0xc8>)
 8014386:	6883      	ldr	r3, [r0, #8]
 8014388:	6851      	ldr	r1, [r2, #4]
 801438a:	6563      	str	r3, [r4, #84]	; 0x54
 801438c:	7810      	ldrb	r0, [r2, #0]
 801438e:	6159      	str	r1, [r3, #20]
 8014390:	68d1      	ldr	r1, [r2, #12]
 8014392:	7418      	strb	r0, [r3, #16]
 8014394:	61d9      	str	r1, [r3, #28]
 8014396:	6911      	ldr	r1, [r2, #16]
 8014398:	6219      	str	r1, [r3, #32]
 801439a:	6951      	ldr	r1, [r2, #20]
 801439c:	6892      	ldr	r2, [r2, #8]
 801439e:	6259      	str	r1, [r3, #36]	; 0x24
 80143a0:	619a      	str	r2, [r3, #24]
 80143a2:	f003 fe1b 	bl	8017fdc <uxr_nanos>
 80143a6:	f006 fd31 	bl	801ae0c <srand>
 80143aa:	f006 fd5d 	bl	801ae68 <rand>
 80143ae:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80143b0:	6298      	str	r0, [r3, #40]	; 0x28
 80143b2:	2800      	cmp	r0, #0
 80143b4:	d0f9      	beq.n	80143aa <rmw_init_options_init+0x9e>
 80143b6:	2000      	movs	r0, #0
 80143b8:	b003      	add	sp, #12
 80143ba:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80143be:	b004      	add	sp, #16
 80143c0:	4770      	bx	lr
 80143c2:	2001      	movs	r0, #1
 80143c4:	e7b1      	b.n	801432a <rmw_init_options_init+0x1e>
 80143c6:	bf00      	nop
 80143c8:	0801dc70 	.word	0x0801dc70
 80143cc:	200108f4 	.word	0x200108f4
 80143d0:	2000c0c8 	.word	0x2000c0c8
 80143d4:	2000b994 	.word	0x2000b994
 80143d8:	0801d278 	.word	0x0801d278

080143dc <rmw_init_options_copy>:
 80143dc:	b570      	push	{r4, r5, r6, lr}
 80143de:	b158      	cbz	r0, 80143f8 <rmw_init_options_copy+0x1c>
 80143e0:	460d      	mov	r5, r1
 80143e2:	b149      	cbz	r1, 80143f8 <rmw_init_options_copy+0x1c>
 80143e4:	4604      	mov	r4, r0
 80143e6:	6880      	ldr	r0, [r0, #8]
 80143e8:	b120      	cbz	r0, 80143f4 <rmw_init_options_copy+0x18>
 80143ea:	4b13      	ldr	r3, [pc, #76]	; (8014438 <rmw_init_options_copy+0x5c>)
 80143ec:	6819      	ldr	r1, [r3, #0]
 80143ee:	f7eb ff27 	bl	8000240 <strcmp>
 80143f2:	b9d8      	cbnz	r0, 801442c <rmw_init_options_copy+0x50>
 80143f4:	68ae      	ldr	r6, [r5, #8]
 80143f6:	b116      	cbz	r6, 80143fe <rmw_init_options_copy+0x22>
 80143f8:	260b      	movs	r6, #11
 80143fa:	4630      	mov	r0, r6
 80143fc:	bd70      	pop	{r4, r5, r6, pc}
 80143fe:	2258      	movs	r2, #88	; 0x58
 8014400:	4621      	mov	r1, r4
 8014402:	4628      	mov	r0, r5
 8014404:	f007 f933 	bl	801b66e <memcpy>
 8014408:	480c      	ldr	r0, [pc, #48]	; (801443c <rmw_init_options_copy+0x60>)
 801440a:	f005 fcaf 	bl	8019d6c <get_memory>
 801440e:	b180      	cbz	r0, 8014432 <rmw_init_options_copy+0x56>
 8014410:	6883      	ldr	r3, [r0, #8]
 8014412:	656b      	str	r3, [r5, #84]	; 0x54
 8014414:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8014416:	f103 0410 	add.w	r4, r3, #16
 801441a:	3510      	adds	r5, #16
 801441c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801441e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014420:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8014424:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8014428:	4630      	mov	r0, r6
 801442a:	bd70      	pop	{r4, r5, r6, pc}
 801442c:	260c      	movs	r6, #12
 801442e:	4630      	mov	r0, r6
 8014430:	bd70      	pop	{r4, r5, r6, pc}
 8014432:	2601      	movs	r6, #1
 8014434:	e7e1      	b.n	80143fa <rmw_init_options_copy+0x1e>
 8014436:	bf00      	nop
 8014438:	0801dc70 	.word	0x0801dc70
 801443c:	200108f4 	.word	0x200108f4

08014440 <rmw_init_options_fini>:
 8014440:	b368      	cbz	r0, 801449e <rmw_init_options_fini+0x5e>
 8014442:	b510      	push	{r4, lr}
 8014444:	4604      	mov	r4, r0
 8014446:	b096      	sub	sp, #88	; 0x58
 8014448:	3040      	adds	r0, #64	; 0x40
 801444a:	f7f9 fc7d 	bl	800dd48 <rcutils_allocator_is_valid>
 801444e:	b1f0      	cbz	r0, 801448e <rmw_init_options_fini+0x4e>
 8014450:	68a0      	ldr	r0, [r4, #8]
 8014452:	b120      	cbz	r0, 801445e <rmw_init_options_fini+0x1e>
 8014454:	4b13      	ldr	r3, [pc, #76]	; (80144a4 <rmw_init_options_fini+0x64>)
 8014456:	6819      	ldr	r1, [r3, #0]
 8014458:	f7eb fef2 	bl	8000240 <strcmp>
 801445c:	b9e8      	cbnz	r0, 801449a <rmw_init_options_fini+0x5a>
 801445e:	4b12      	ldr	r3, [pc, #72]	; (80144a8 <rmw_init_options_fini+0x68>)
 8014460:	6819      	ldr	r1, [r3, #0]
 8014462:	b1b9      	cbz	r1, 8014494 <rmw_init_options_fini+0x54>
 8014464:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8014466:	e001      	b.n	801446c <rmw_init_options_fini+0x2c>
 8014468:	6849      	ldr	r1, [r1, #4]
 801446a:	b199      	cbz	r1, 8014494 <rmw_init_options_fini+0x54>
 801446c:	688b      	ldr	r3, [r1, #8]
 801446e:	429a      	cmp	r2, r3
 8014470:	d1fa      	bne.n	8014468 <rmw_init_options_fini+0x28>
 8014472:	480d      	ldr	r0, [pc, #52]	; (80144a8 <rmw_init_options_fini+0x68>)
 8014474:	f005 fc8a 	bl	8019d8c <put_memory>
 8014478:	4668      	mov	r0, sp
 801447a:	f7ff fd71 	bl	8013f60 <rmw_get_zero_initialized_init_options>
 801447e:	2258      	movs	r2, #88	; 0x58
 8014480:	4669      	mov	r1, sp
 8014482:	4620      	mov	r0, r4
 8014484:	f007 f8f3 	bl	801b66e <memcpy>
 8014488:	2000      	movs	r0, #0
 801448a:	b016      	add	sp, #88	; 0x58
 801448c:	bd10      	pop	{r4, pc}
 801448e:	200b      	movs	r0, #11
 8014490:	b016      	add	sp, #88	; 0x58
 8014492:	bd10      	pop	{r4, pc}
 8014494:	2001      	movs	r0, #1
 8014496:	b016      	add	sp, #88	; 0x58
 8014498:	bd10      	pop	{r4, pc}
 801449a:	200c      	movs	r0, #12
 801449c:	e7f5      	b.n	801448a <rmw_init_options_fini+0x4a>
 801449e:	200b      	movs	r0, #11
 80144a0:	4770      	bx	lr
 80144a2:	bf00      	nop
 80144a4:	0801dc70 	.word	0x0801dc70
 80144a8:	200108f4 	.word	0x200108f4

080144ac <rmw_init>:
 80144ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80144b0:	b083      	sub	sp, #12
 80144b2:	2800      	cmp	r0, #0
 80144b4:	f000 80d3 	beq.w	801465e <rmw_init+0x1b2>
 80144b8:	460e      	mov	r6, r1
 80144ba:	2900      	cmp	r1, #0
 80144bc:	f000 80cf 	beq.w	801465e <rmw_init+0x1b2>
 80144c0:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80144c2:	4605      	mov	r5, r0
 80144c4:	2b00      	cmp	r3, #0
 80144c6:	f000 80ca 	beq.w	801465e <rmw_init+0x1b2>
 80144ca:	4b78      	ldr	r3, [pc, #480]	; (80146ac <rmw_init+0x200>)
 80144cc:	6880      	ldr	r0, [r0, #8]
 80144ce:	681f      	ldr	r7, [r3, #0]
 80144d0:	b128      	cbz	r0, 80144de <rmw_init+0x32>
 80144d2:	4639      	mov	r1, r7
 80144d4:	f7eb feb4 	bl	8000240 <strcmp>
 80144d8:	2800      	cmp	r0, #0
 80144da:	f040 80ca 	bne.w	8014672 <rmw_init+0x1c6>
 80144de:	4c74      	ldr	r4, [pc, #464]	; (80146b0 <rmw_init+0x204>)
 80144e0:	f04f 0800 	mov.w	r8, #0
 80144e4:	4973      	ldr	r1, [pc, #460]	; (80146b4 <rmw_init+0x208>)
 80144e6:	4874      	ldr	r0, [pc, #464]	; (80146b8 <rmw_init+0x20c>)
 80144e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80144ec:	60b7      	str	r7, [r6, #8]
 80144ee:	e9c6 2300 	strd	r2, r3, [r6]
 80144f2:	68eb      	ldr	r3, [r5, #12]
 80144f4:	2201      	movs	r2, #1
 80144f6:	66b3      	str	r3, [r6, #104]	; 0x68
 80144f8:	f001 f830 	bl	801555c <rmw_uxrce_init_session_memory>
 80144fc:	4620      	mov	r0, r4
 80144fe:	2204      	movs	r2, #4
 8014500:	496e      	ldr	r1, [pc, #440]	; (80146bc <rmw_init+0x210>)
 8014502:	f001 f86b 	bl	80155dc <rmw_uxrce_init_static_input_buffer_memory>
 8014506:	486c      	ldr	r0, [pc, #432]	; (80146b8 <rmw_init+0x20c>)
 8014508:	f884 800d 	strb.w	r8, [r4, #13]
 801450c:	f005 fc2e 	bl	8019d6c <get_memory>
 8014510:	2800      	cmp	r0, #0
 8014512:	f000 80a9 	beq.w	8014668 <rmw_init+0x1bc>
 8014516:	6884      	ldr	r4, [r0, #8]
 8014518:	6d68      	ldr	r0, [r5, #84]	; 0x54
 801451a:	f104 0910 	add.w	r9, r4, #16
 801451e:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8014520:	f890 c010 	ldrb.w	ip, [r0, #16]
 8014524:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8014528:	9101      	str	r1, [sp, #4]
 801452a:	4661      	mov	r1, ip
 801452c:	6a00      	ldr	r0, [r0, #32]
 801452e:	9000      	str	r0, [sp, #0]
 8014530:	4648      	mov	r0, r9
 8014532:	f001 fcfb 	bl	8015f2c <uxr_set_custom_transport_callbacks>
 8014536:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801453a:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 801453e:	4960      	ldr	r1, [pc, #384]	; (80146c0 <rmw_init+0x214>)
 8014540:	4860      	ldr	r0, [pc, #384]	; (80146c4 <rmw_init+0x218>)
 8014542:	e9c4 22e3 	strd	r2, r2, [r4, #908]	; 0x38c
 8014546:	f504 725e 	add.w	r2, r4, #888	; 0x378
 801454a:	e9c4 22e1 	strd	r2, r2, [r4, #900]	; 0x384
 801454e:	f8c3 8594 	str.w	r8, [r3, #1428]	; 0x594
 8014552:	2201      	movs	r2, #1
 8014554:	f8c3 8598 	str.w	r8, [r3, #1432]	; 0x598
 8014558:	f8c3 859c 	str.w	r8, [r3, #1436]	; 0x59c
 801455c:	f8c3 85a0 	str.w	r8, [r3, #1440]	; 0x5a0
 8014560:	e9c4 78da 	strd	r7, r8, [r4, #872]	; 0x368
 8014564:	66f4      	str	r4, [r6, #108]	; 0x6c
 8014566:	f000 ffd9 	bl	801551c <rmw_uxrce_init_node_memory>
 801456a:	2205      	movs	r2, #5
 801456c:	4956      	ldr	r1, [pc, #344]	; (80146c8 <rmw_init+0x21c>)
 801456e:	4857      	ldr	r0, [pc, #348]	; (80146cc <rmw_init+0x220>)
 8014570:	f000 ffb4 	bl	80154dc <rmw_uxrce_init_subscription_memory>
 8014574:	220a      	movs	r2, #10
 8014576:	4956      	ldr	r1, [pc, #344]	; (80146d0 <rmw_init+0x224>)
 8014578:	4856      	ldr	r0, [pc, #344]	; (80146d4 <rmw_init+0x228>)
 801457a:	f000 ff8f 	bl	801549c <rmw_uxrce_init_publisher_memory>
 801457e:	2202      	movs	r2, #2
 8014580:	4955      	ldr	r1, [pc, #340]	; (80146d8 <rmw_init+0x22c>)
 8014582:	4856      	ldr	r0, [pc, #344]	; (80146dc <rmw_init+0x230>)
 8014584:	f000 ff4a 	bl	801541c <rmw_uxrce_init_service_memory>
 8014588:	2201      	movs	r2, #1
 801458a:	4955      	ldr	r1, [pc, #340]	; (80146e0 <rmw_init+0x234>)
 801458c:	4855      	ldr	r0, [pc, #340]	; (80146e4 <rmw_init+0x238>)
 801458e:	f000 ff65 	bl	801545c <rmw_uxrce_init_client_memory>
 8014592:	220f      	movs	r2, #15
 8014594:	4954      	ldr	r1, [pc, #336]	; (80146e8 <rmw_init+0x23c>)
 8014596:	4855      	ldr	r0, [pc, #340]	; (80146ec <rmw_init+0x240>)
 8014598:	f001 f800 	bl	801559c <rmw_uxrce_init_topic_memory>
 801459c:	2203      	movs	r2, #3
 801459e:	4954      	ldr	r1, [pc, #336]	; (80146f0 <rmw_init+0x244>)
 80145a0:	4854      	ldr	r0, [pc, #336]	; (80146f4 <rmw_init+0x248>)
 80145a2:	f001 f83b 	bl	801561c <rmw_uxrce_init_init_options_impl_memory>
 80145a6:	2204      	movs	r2, #4
 80145a8:	4953      	ldr	r1, [pc, #332]	; (80146f8 <rmw_init+0x24c>)
 80145aa:	4854      	ldr	r0, [pc, #336]	; (80146fc <rmw_init+0x250>)
 80145ac:	f001 f856 	bl	801565c <rmw_uxrce_init_wait_set_memory>
 80145b0:	4953      	ldr	r1, [pc, #332]	; (8014700 <rmw_init+0x254>)
 80145b2:	4854      	ldr	r0, [pc, #336]	; (8014704 <rmw_init+0x258>)
 80145b4:	2204      	movs	r2, #4
 80145b6:	f001 f871 	bl	801569c <rmw_uxrce_init_guard_condition_memory>
 80145ba:	4642      	mov	r2, r8
 80145bc:	6d69      	ldr	r1, [r5, #84]	; 0x54
 80145be:	6ef0      	ldr	r0, [r6, #108]	; 0x6c
 80145c0:	f000 fd92 	bl	80150e8 <rmw_uxrce_transport_init>
 80145c4:	4607      	mov	r7, r0
 80145c6:	2800      	cmp	r0, #0
 80145c8:	d158      	bne.n	801467c <rmw_init+0x1d0>
 80145ca:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 80145cc:	f504 7528 	add.w	r5, r4, #672	; 0x2a0
 80145d0:	f504 7122 	add.w	r1, r4, #648	; 0x288
 80145d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80145d6:	4628      	mov	r0, r5
 80145d8:	f001 feda 	bl	8016390 <uxr_init_session>
 80145dc:	4622      	mov	r2, r4
 80145de:	494a      	ldr	r1, [pc, #296]	; (8014708 <rmw_init+0x25c>)
 80145e0:	4628      	mov	r0, r5
 80145e2:	f001 fef9 	bl	80163d8 <uxr_set_topic_callback>
 80145e6:	463a      	mov	r2, r7
 80145e8:	4948      	ldr	r1, [pc, #288]	; (801470c <rmw_init+0x260>)
 80145ea:	4628      	mov	r0, r5
 80145ec:	f001 fef0 	bl	80163d0 <uxr_set_status_callback>
 80145f0:	463a      	mov	r2, r7
 80145f2:	4947      	ldr	r1, [pc, #284]	; (8014710 <rmw_init+0x264>)
 80145f4:	4628      	mov	r0, r5
 80145f6:	f001 fef3 	bl	80163e0 <uxr_set_request_callback>
 80145fa:	463a      	mov	r2, r7
 80145fc:	4945      	ldr	r1, [pc, #276]	; (8014714 <rmw_init+0x268>)
 80145fe:	4628      	mov	r0, r5
 8014600:	f001 fef2 	bl	80163e8 <uxr_set_reply_callback>
 8014604:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8014608:	2304      	movs	r3, #4
 801460a:	f504 7165 	add.w	r1, r4, #916	; 0x394
 801460e:	0092      	lsls	r2, r2, #2
 8014610:	4628      	mov	r0, r5
 8014612:	f001 ff29 	bl	8016468 <uxr_create_input_reliable_stream>
 8014616:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 801461a:	2304      	movs	r3, #4
 801461c:	f604 3194 	addw	r1, r4, #2964	; 0xb94
 8014620:	0092      	lsls	r2, r2, #2
 8014622:	f8c4 0374 	str.w	r0, [r4, #884]	; 0x374
 8014626:	4628      	mov	r0, r5
 8014628:	f001 fef4 	bl	8016414 <uxr_create_output_reliable_stream>
 801462c:	f8c4 0378 	str.w	r0, [r4, #888]	; 0x378
 8014630:	4628      	mov	r0, r5
 8014632:	f001 ff13 	bl	801645c <uxr_create_input_best_effort_stream>
 8014636:	f241 3194 	movw	r1, #5012	; 0x1394
 801463a:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
 801463e:	4628      	mov	r0, r5
 8014640:	4421      	add	r1, r4
 8014642:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8014646:	f001 fed3 	bl	80163f0 <uxr_create_output_best_effort_stream>
 801464a:	f8c4 037c 	str.w	r0, [r4, #892]	; 0x37c
 801464e:	4628      	mov	r0, r5
 8014650:	f002 fc5c 	bl	8016f0c <uxr_create_session>
 8014654:	b1f8      	cbz	r0, 8014696 <rmw_init+0x1ea>
 8014656:	4638      	mov	r0, r7
 8014658:	b003      	add	sp, #12
 801465a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801465e:	270b      	movs	r7, #11
 8014660:	4638      	mov	r0, r7
 8014662:	b003      	add	sp, #12
 8014664:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014668:	2701      	movs	r7, #1
 801466a:	4638      	mov	r0, r7
 801466c:	b003      	add	sp, #12
 801466e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014672:	270c      	movs	r7, #12
 8014674:	4638      	mov	r0, r7
 8014676:	b003      	add	sp, #12
 8014678:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801467c:	4648      	mov	r0, r9
 801467e:	f001 fc93 	bl	8015fa8 <uxr_close_custom_transport>
 8014682:	4621      	mov	r1, r4
 8014684:	480c      	ldr	r0, [pc, #48]	; (80146b8 <rmw_init+0x20c>)
 8014686:	f005 fb81 	bl	8019d8c <put_memory>
 801468a:	4638      	mov	r0, r7
 801468c:	f8c6 806c 	str.w	r8, [r6, #108]	; 0x6c
 8014690:	b003      	add	sp, #12
 8014692:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014696:	4648      	mov	r0, r9
 8014698:	f001 fc86 	bl	8015fa8 <uxr_close_custom_transport>
 801469c:	4621      	mov	r1, r4
 801469e:	4806      	ldr	r0, [pc, #24]	; (80146b8 <rmw_init+0x20c>)
 80146a0:	f005 fb74 	bl	8019d8c <put_memory>
 80146a4:	66f7      	str	r7, [r6, #108]	; 0x6c
 80146a6:	2701      	movs	r7, #1
 80146a8:	e7d5      	b.n	8014656 <rmw_init+0x1aa>
 80146aa:	bf00      	nop
 80146ac:	0801dc70 	.word	0x0801dc70
 80146b0:	20010944 	.word	0x20010944
 80146b4:	2000cbf0 	.word	0x2000cbf0
 80146b8:	20010934 	.word	0x20010934
 80146bc:	2000e198 	.word	0x2000e198
 80146c0:	2000c14c 	.word	0x2000c14c
 80146c4:	20010904 	.word	0x20010904
 80146c8:	20010298 	.word	0x20010298
 80146cc:	20010954 	.word	0x20010954
 80146d0:	2000c1f0 	.word	0x2000c1f0
 80146d4:	20010914 	.word	0x20010914
 80146d8:	2000ca60 	.word	0x2000ca60
 80146dc:	20010924 	.word	0x20010924
 80146e0:	2000bf80 	.word	0x2000bf80
 80146e4:	2000bf70 	.word	0x2000bf70
 80146e8:	200106d0 	.word	0x200106d0
 80146ec:	20010964 	.word	0x20010964
 80146f0:	2000c0c8 	.word	0x2000c0c8
 80146f4:	200108f4 	.word	0x200108f4
 80146f8:	20010874 	.word	0x20010874
 80146fc:	20010974 	.word	0x20010974
 8014700:	2000c048 	.word	0x2000c048
 8014704:	200108e4 	.word	0x200108e4
 8014708:	08019ba5 	.word	0x08019ba5
 801470c:	08019b9d 	.word	0x08019b9d
 8014710:	08019c3d 	.word	0x08019c3d
 8014714:	08019cd9 	.word	0x08019cd9

08014718 <rmw_context_fini>:
 8014718:	4b17      	ldr	r3, [pc, #92]	; (8014778 <rmw_context_fini+0x60>)
 801471a:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 801471c:	b570      	push	{r4, r5, r6, lr}
 801471e:	681c      	ldr	r4, [r3, #0]
 8014720:	4605      	mov	r5, r0
 8014722:	b334      	cbz	r4, 8014772 <rmw_context_fini+0x5a>
 8014724:	2600      	movs	r6, #0
 8014726:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 801472a:	6902      	ldr	r2, [r0, #16]
 801472c:	428a      	cmp	r2, r1
 801472e:	d018      	beq.n	8014762 <rmw_context_fini+0x4a>
 8014730:	2c00      	cmp	r4, #0
 8014732:	d1f8      	bne.n	8014726 <rmw_context_fini+0xe>
 8014734:	b189      	cbz	r1, 801475a <rmw_context_fini+0x42>
 8014736:	f8d1 3388 	ldr.w	r3, [r1, #904]	; 0x388
 801473a:	f501 7028 	add.w	r0, r1, #672	; 0x2a0
 801473e:	789b      	ldrb	r3, [r3, #2]
 8014740:	2b01      	cmp	r3, #1
 8014742:	bf14      	ite	ne
 8014744:	210a      	movne	r1, #10
 8014746:	2100      	moveq	r1, #0
 8014748:	f002 fbb8 	bl	8016ebc <uxr_delete_session_retries>
 801474c:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 801474e:	f000 ffc5 	bl	80156dc <rmw_uxrce_fini_session_memory>
 8014752:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 8014754:	3010      	adds	r0, #16
 8014756:	f001 fc27 	bl	8015fa8 <uxr_close_custom_transport>
 801475a:	2300      	movs	r3, #0
 801475c:	4630      	mov	r0, r6
 801475e:	66eb      	str	r3, [r5, #108]	; 0x6c
 8014760:	bd70      	pop	{r4, r5, r6, pc}
 8014762:	3018      	adds	r0, #24
 8014764:	f000 f89c 	bl	80148a0 <rmw_destroy_node>
 8014768:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
 801476a:	4606      	mov	r6, r0
 801476c:	2c00      	cmp	r4, #0
 801476e:	d1da      	bne.n	8014726 <rmw_context_fini+0xe>
 8014770:	e7e0      	b.n	8014734 <rmw_context_fini+0x1c>
 8014772:	4626      	mov	r6, r4
 8014774:	e7de      	b.n	8014734 <rmw_context_fini+0x1c>
 8014776:	bf00      	nop
 8014778:	20010904 	.word	0x20010904

0801477c <create_node>:
 801477c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014780:	b083      	sub	sp, #12
 8014782:	2b00      	cmp	r3, #0
 8014784:	d064      	beq.n	8014850 <create_node+0xd4>
 8014786:	4606      	mov	r6, r0
 8014788:	4838      	ldr	r0, [pc, #224]	; (801486c <create_node+0xf0>)
 801478a:	460f      	mov	r7, r1
 801478c:	4690      	mov	r8, r2
 801478e:	461d      	mov	r5, r3
 8014790:	f005 faec 	bl	8019d6c <get_memory>
 8014794:	2800      	cmp	r0, #0
 8014796:	d05b      	beq.n	8014850 <create_node+0xd4>
 8014798:	6884      	ldr	r4, [r0, #8]
 801479a:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 801479c:	f104 092c 	add.w	r9, r4, #44	; 0x2c
 80147a0:	f104 0518 	add.w	r5, r4, #24
 80147a4:	6123      	str	r3, [r4, #16]
 80147a6:	f7ff fdab 	bl	8014300 <rmw_get_implementation_identifier>
 80147aa:	f8c4 9020 	str.w	r9, [r4, #32]
 80147ae:	e9c4 0406 	strd	r0, r4, [r4, #24]
 80147b2:	4630      	mov	r0, r6
 80147b4:	f7eb fda4 	bl	8000300 <strlen>
 80147b8:	1c42      	adds	r2, r0, #1
 80147ba:	2a3c      	cmp	r2, #60	; 0x3c
 80147bc:	d840      	bhi.n	8014840 <create_node+0xc4>
 80147be:	4648      	mov	r0, r9
 80147c0:	f104 0968 	add.w	r9, r4, #104	; 0x68
 80147c4:	4631      	mov	r1, r6
 80147c6:	f006 ff52 	bl	801b66e <memcpy>
 80147ca:	4638      	mov	r0, r7
 80147cc:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 80147d0:	f7eb fd96 	bl	8000300 <strlen>
 80147d4:	1c42      	adds	r2, r0, #1
 80147d6:	2a3c      	cmp	r2, #60	; 0x3c
 80147d8:	d832      	bhi.n	8014840 <create_node+0xc4>
 80147da:	4639      	mov	r1, r7
 80147dc:	4648      	mov	r0, r9
 80147de:	f006 ff46 	bl	801b66e <memcpy>
 80147e2:	6923      	ldr	r3, [r4, #16]
 80147e4:	2101      	movs	r1, #1
 80147e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80147ea:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	; 0x594
 80147ee:	1842      	adds	r2, r0, r1
 80147f0:	f8a3 2594 	strh.w	r2, [r3, #1428]	; 0x594
 80147f4:	f001 fbdc 	bl	8015fb0 <uxr_object_id>
 80147f8:	6160      	str	r0, [r4, #20]
 80147fa:	783b      	ldrb	r3, [r7, #0]
 80147fc:	2b2f      	cmp	r3, #47	; 0x2f
 80147fe:	d12c      	bne.n	801485a <create_node+0xde>
 8014800:	787b      	ldrb	r3, [r7, #1]
 8014802:	bb53      	cbnz	r3, 801485a <create_node+0xde>
 8014804:	4633      	mov	r3, r6
 8014806:	4a1a      	ldr	r2, [pc, #104]	; (8014870 <create_node+0xf4>)
 8014808:	213c      	movs	r1, #60	; 0x3c
 801480a:	481a      	ldr	r0, [pc, #104]	; (8014874 <create_node+0xf8>)
 801480c:	f006 fce0 	bl	801b1d0 <sniprintf>
 8014810:	6920      	ldr	r0, [r4, #16]
 8014812:	2106      	movs	r1, #6
 8014814:	fa1f f388 	uxth.w	r3, r8
 8014818:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 801481c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8014820:	9101      	str	r1, [sp, #4]
 8014822:	4914      	ldr	r1, [pc, #80]	; (8014874 <create_node+0xf8>)
 8014824:	9100      	str	r1, [sp, #0]
 8014826:	6811      	ldr	r1, [r2, #0]
 8014828:	6962      	ldr	r2, [r4, #20]
 801482a:	f001 fa97 	bl	8015d5c <uxr_buffer_create_participant_bin>
 801482e:	4602      	mov	r2, r0
 8014830:	6920      	ldr	r0, [r4, #16]
 8014832:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8014836:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 801483a:	f001 f8d3 	bl	80159e4 <run_xrce_session>
 801483e:	b918      	cbnz	r0, 8014848 <create_node+0xcc>
 8014840:	4628      	mov	r0, r5
 8014842:	2500      	movs	r5, #0
 8014844:	f000 ff50 	bl	80156e8 <rmw_uxrce_fini_node_memory>
 8014848:	4628      	mov	r0, r5
 801484a:	b003      	add	sp, #12
 801484c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014850:	2500      	movs	r5, #0
 8014852:	4628      	mov	r0, r5
 8014854:	b003      	add	sp, #12
 8014856:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801485a:	463b      	mov	r3, r7
 801485c:	4a06      	ldr	r2, [pc, #24]	; (8014878 <create_node+0xfc>)
 801485e:	213c      	movs	r1, #60	; 0x3c
 8014860:	9600      	str	r6, [sp, #0]
 8014862:	4804      	ldr	r0, [pc, #16]	; (8014874 <create_node+0xf8>)
 8014864:	f006 fcb4 	bl	801b1d0 <sniprintf>
 8014868:	e7d2      	b.n	8014810 <create_node+0x94>
 801486a:	bf00      	nop
 801486c:	20010904 	.word	0x20010904
 8014870:	0801d814 	.word	0x0801d814
 8014874:	2000bdf4 	.word	0x2000bdf4
 8014878:	0801d288 	.word	0x0801d288

0801487c <rmw_create_node>:
 801487c:	468c      	mov	ip, r1
 801487e:	4611      	mov	r1, r2
 8014880:	f1bc 0f00 	cmp.w	ip, #0
 8014884:	d00a      	beq.n	801489c <rmw_create_node+0x20>
 8014886:	f89c 3000 	ldrb.w	r3, [ip]
 801488a:	b13b      	cbz	r3, 801489c <rmw_create_node+0x20>
 801488c:	b132      	cbz	r2, 801489c <rmw_create_node+0x20>
 801488e:	7813      	ldrb	r3, [r2, #0]
 8014890:	b123      	cbz	r3, 801489c <rmw_create_node+0x20>
 8014892:	4603      	mov	r3, r0
 8014894:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8014896:	4660      	mov	r0, ip
 8014898:	f7ff bf70 	b.w	801477c <create_node>
 801489c:	2000      	movs	r0, #0
 801489e:	4770      	bx	lr

080148a0 <rmw_destroy_node>:
 80148a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80148a2:	b328      	cbz	r0, 80148f0 <rmw_destroy_node+0x50>
 80148a4:	4607      	mov	r7, r0
 80148a6:	6800      	ldr	r0, [r0, #0]
 80148a8:	b120      	cbz	r0, 80148b4 <rmw_destroy_node+0x14>
 80148aa:	4b37      	ldr	r3, [pc, #220]	; (8014988 <rmw_destroy_node+0xe8>)
 80148ac:	6819      	ldr	r1, [r3, #0]
 80148ae:	f7eb fcc7 	bl	8000240 <strcmp>
 80148b2:	b9e8      	cbnz	r0, 80148f0 <rmw_destroy_node+0x50>
 80148b4:	687d      	ldr	r5, [r7, #4]
 80148b6:	b1dd      	cbz	r5, 80148f0 <rmw_destroy_node+0x50>
 80148b8:	4b34      	ldr	r3, [pc, #208]	; (801498c <rmw_destroy_node+0xec>)
 80148ba:	681c      	ldr	r4, [r3, #0]
 80148bc:	2c00      	cmp	r4, #0
 80148be:	d060      	beq.n	8014982 <rmw_destroy_node+0xe2>
 80148c0:	2600      	movs	r6, #0
 80148c2:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80148c6:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 80148ca:	429d      	cmp	r5, r3
 80148cc:	d013      	beq.n	80148f6 <rmw_destroy_node+0x56>
 80148ce:	2c00      	cmp	r4, #0
 80148d0:	d1f7      	bne.n	80148c2 <rmw_destroy_node+0x22>
 80148d2:	4b2f      	ldr	r3, [pc, #188]	; (8014990 <rmw_destroy_node+0xf0>)
 80148d4:	681c      	ldr	r4, [r3, #0]
 80148d6:	b1c4      	cbz	r4, 801490a <rmw_destroy_node+0x6a>
 80148d8:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80148dc:	6a0b      	ldr	r3, [r1, #32]
 80148de:	429d      	cmp	r5, r3
 80148e0:	d1f9      	bne.n	80148d6 <rmw_destroy_node+0x36>
 80148e2:	317c      	adds	r1, #124	; 0x7c
 80148e4:	4638      	mov	r0, r7
 80148e6:	f000 fb49 	bl	8014f7c <rmw_destroy_subscription>
 80148ea:	2801      	cmp	r0, #1
 80148ec:	4606      	mov	r6, r0
 80148ee:	d1f2      	bne.n	80148d6 <rmw_destroy_node+0x36>
 80148f0:	2601      	movs	r6, #1
 80148f2:	4630      	mov	r0, r6
 80148f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80148f6:	3184      	adds	r1, #132	; 0x84
 80148f8:	4638      	mov	r0, r7
 80148fa:	f000 f855 	bl	80149a8 <rmw_destroy_publisher>
 80148fe:	2801      	cmp	r0, #1
 8014900:	4606      	mov	r6, r0
 8014902:	d0f5      	beq.n	80148f0 <rmw_destroy_node+0x50>
 8014904:	2c00      	cmp	r4, #0
 8014906:	d1dc      	bne.n	80148c2 <rmw_destroy_node+0x22>
 8014908:	e7e3      	b.n	80148d2 <rmw_destroy_node+0x32>
 801490a:	4b22      	ldr	r3, [pc, #136]	; (8014994 <rmw_destroy_node+0xf4>)
 801490c:	681c      	ldr	r4, [r3, #0]
 801490e:	b16c      	cbz	r4, 801492c <rmw_destroy_node+0x8c>
 8014910:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8014914:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 8014916:	429d      	cmp	r5, r3
 8014918:	d1f9      	bne.n	801490e <rmw_destroy_node+0x6e>
 801491a:	317c      	adds	r1, #124	; 0x7c
 801491c:	4638      	mov	r0, r7
 801491e:	f000 fac1 	bl	8014ea4 <rmw_destroy_service>
 8014922:	2801      	cmp	r0, #1
 8014924:	4606      	mov	r6, r0
 8014926:	d0e3      	beq.n	80148f0 <rmw_destroy_node+0x50>
 8014928:	2c00      	cmp	r4, #0
 801492a:	d1f1      	bne.n	8014910 <rmw_destroy_node+0x70>
 801492c:	4b1a      	ldr	r3, [pc, #104]	; (8014998 <rmw_destroy_node+0xf8>)
 801492e:	681c      	ldr	r4, [r3, #0]
 8014930:	b16c      	cbz	r4, 801494e <rmw_destroy_node+0xae>
 8014932:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8014936:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 8014938:	429d      	cmp	r5, r3
 801493a:	d1f9      	bne.n	8014930 <rmw_destroy_node+0x90>
 801493c:	317c      	adds	r1, #124	; 0x7c
 801493e:	4638      	mov	r0, r7
 8014940:	f7ff fc7c 	bl	801423c <rmw_destroy_client>
 8014944:	2801      	cmp	r0, #1
 8014946:	4606      	mov	r6, r0
 8014948:	d0d2      	beq.n	80148f0 <rmw_destroy_node+0x50>
 801494a:	2c00      	cmp	r4, #0
 801494c:	d1f1      	bne.n	8014932 <rmw_destroy_node+0x92>
 801494e:	6928      	ldr	r0, [r5, #16]
 8014950:	696a      	ldr	r2, [r5, #20]
 8014952:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8014956:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801495a:	6819      	ldr	r1, [r3, #0]
 801495c:	f001 f9b2 	bl	8015cc4 <uxr_buffer_delete_entity>
 8014960:	4602      	mov	r2, r0
 8014962:	6928      	ldr	r0, [r5, #16]
 8014964:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8014968:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801496c:	f001 f83a 	bl	80159e4 <run_xrce_session>
 8014970:	4603      	mov	r3, r0
 8014972:	4638      	mov	r0, r7
 8014974:	2b00      	cmp	r3, #0
 8014976:	bf08      	it	eq
 8014978:	2602      	moveq	r6, #2
 801497a:	f000 feb5 	bl	80156e8 <rmw_uxrce_fini_node_memory>
 801497e:	4630      	mov	r0, r6
 8014980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014982:	4626      	mov	r6, r4
 8014984:	e7a5      	b.n	80148d2 <rmw_destroy_node+0x32>
 8014986:	bf00      	nop
 8014988:	0801dc70 	.word	0x0801dc70
 801498c:	20010914 	.word	0x20010914
 8014990:	20010954 	.word	0x20010954
 8014994:	20010924 	.word	0x20010924
 8014998:	2000bf70 	.word	0x2000bf70

0801499c <rmw_node_get_graph_guard_condition>:
 801499c:	6843      	ldr	r3, [r0, #4]
 801499e:	6918      	ldr	r0, [r3, #16]
 80149a0:	f500 705a 	add.w	r0, r0, #872	; 0x368
 80149a4:	4770      	bx	lr
 80149a6:	bf00      	nop

080149a8 <rmw_destroy_publisher>:
 80149a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80149ac:	b128      	cbz	r0, 80149ba <rmw_destroy_publisher+0x12>
 80149ae:	4604      	mov	r4, r0
 80149b0:	6800      	ldr	r0, [r0, #0]
 80149b2:	460d      	mov	r5, r1
 80149b4:	f001 f8e2 	bl	8015b7c <is_uxrce_rmw_identifier_valid>
 80149b8:	b918      	cbnz	r0, 80149c2 <rmw_destroy_publisher+0x1a>
 80149ba:	2401      	movs	r4, #1
 80149bc:	4620      	mov	r0, r4
 80149be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80149c2:	6863      	ldr	r3, [r4, #4]
 80149c4:	2b00      	cmp	r3, #0
 80149c6:	d0f8      	beq.n	80149ba <rmw_destroy_publisher+0x12>
 80149c8:	fab5 f485 	clz	r4, r5
 80149cc:	0964      	lsrs	r4, r4, #5
 80149ce:	2d00      	cmp	r5, #0
 80149d0:	d0f3      	beq.n	80149ba <rmw_destroy_publisher+0x12>
 80149d2:	6828      	ldr	r0, [r5, #0]
 80149d4:	f001 f8d2 	bl	8015b7c <is_uxrce_rmw_identifier_valid>
 80149d8:	2800      	cmp	r0, #0
 80149da:	d0ee      	beq.n	80149ba <rmw_destroy_publisher+0x12>
 80149dc:	686e      	ldr	r6, [r5, #4]
 80149de:	2e00      	cmp	r6, #0
 80149e0:	d0eb      	beq.n	80149ba <rmw_destroy_publisher+0x12>
 80149e2:	6a70      	ldr	r0, [r6, #36]	; 0x24
 80149e4:	f8d6 7080 	ldr.w	r7, [r6, #128]	; 0x80
 80149e8:	f005 fa0e 	bl	8019e08 <destroy_topic>
 80149ec:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 80149f0:	6972      	ldr	r2, [r6, #20]
 80149f2:	6918      	ldr	r0, [r3, #16]
 80149f4:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80149f8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80149fc:	6819      	ldr	r1, [r3, #0]
 80149fe:	f001 f961 	bl	8015cc4 <uxr_buffer_delete_entity>
 8014a02:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8014a06:	4680      	mov	r8, r0
 8014a08:	6932      	ldr	r2, [r6, #16]
 8014a0a:	6918      	ldr	r0, [r3, #16]
 8014a0c:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8014a10:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8014a14:	6819      	ldr	r1, [r3, #0]
 8014a16:	f001 f955 	bl	8015cc4 <uxr_buffer_delete_entity>
 8014a1a:	4606      	mov	r6, r0
 8014a1c:	6938      	ldr	r0, [r7, #16]
 8014a1e:	4642      	mov	r2, r8
 8014a20:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8014a24:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8014a28:	f000 ffdc 	bl	80159e4 <run_xrce_session>
 8014a2c:	693f      	ldr	r7, [r7, #16]
 8014a2e:	4632      	mov	r2, r6
 8014a30:	4606      	mov	r6, r0
 8014a32:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 8014a36:	4638      	mov	r0, r7
 8014a38:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 8014a3c:	f000 ffd2 	bl	80159e4 <run_xrce_session>
 8014a40:	b126      	cbz	r6, 8014a4c <rmw_destroy_publisher+0xa4>
 8014a42:	b118      	cbz	r0, 8014a4c <rmw_destroy_publisher+0xa4>
 8014a44:	4628      	mov	r0, r5
 8014a46:	f000 fe67 	bl	8015718 <rmw_uxrce_fini_publisher_memory>
 8014a4a:	e7b7      	b.n	80149bc <rmw_destroy_publisher+0x14>
 8014a4c:	2402      	movs	r4, #2
 8014a4e:	e7f9      	b.n	8014a44 <rmw_destroy_publisher+0x9c>

08014a50 <rmw_send_request>:
 8014a50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014a54:	4604      	mov	r4, r0
 8014a56:	6800      	ldr	r0, [r0, #0]
 8014a58:	b08b      	sub	sp, #44	; 0x2c
 8014a5a:	460e      	mov	r6, r1
 8014a5c:	4615      	mov	r5, r2
 8014a5e:	b128      	cbz	r0, 8014a6c <rmw_send_request+0x1c>
 8014a60:	4b21      	ldr	r3, [pc, #132]	; (8014ae8 <rmw_send_request+0x98>)
 8014a62:	6819      	ldr	r1, [r3, #0]
 8014a64:	f7eb fbec 	bl	8000240 <strcmp>
 8014a68:	2800      	cmp	r0, #0
 8014a6a:	d139      	bne.n	8014ae0 <rmw_send_request+0x90>
 8014a6c:	6864      	ldr	r4, [r4, #4]
 8014a6e:	2700      	movs	r7, #0
 8014a70:	6963      	ldr	r3, [r4, #20]
 8014a72:	f8d4 8078 	ldr.w	r8, [r4, #120]	; 0x78
 8014a76:	689b      	ldr	r3, [r3, #8]
 8014a78:	4798      	blx	r3
 8014a7a:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8014a7e:	4630      	mov	r0, r6
 8014a80:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014a84:	4798      	blx	r3
 8014a86:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8014a8a:	9000      	str	r0, [sp, #0]
 8014a8c:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8014a90:	6922      	ldr	r2, [r4, #16]
 8014a92:	ab02      	add	r3, sp, #8
 8014a94:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8014a96:	f003 fb41 	bl	801811c <uxr_prepare_output_stream>
 8014a9a:	e9c5 0700 	strd	r0, r7, [r5]
 8014a9e:	b198      	cbz	r0, 8014ac8 <rmw_send_request+0x78>
 8014aa0:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8014aa4:	a902      	add	r1, sp, #8
 8014aa6:	4630      	mov	r0, r6
 8014aa8:	4798      	blx	r3
 8014aaa:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
 8014aae:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8014ab2:	2b01      	cmp	r3, #1
 8014ab4:	d00c      	beq.n	8014ad0 <rmw_send_request+0x80>
 8014ab6:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8014ab8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8014abc:	f002 f8b4 	bl	8016c28 <uxr_run_session_until_confirm_delivery>
 8014ac0:	4638      	mov	r0, r7
 8014ac2:	b00b      	add	sp, #44	; 0x2c
 8014ac4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014ac8:	2001      	movs	r0, #1
 8014aca:	b00b      	add	sp, #44	; 0x2c
 8014acc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014ad0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8014ad4:	f001 fcee 	bl	80164b4 <uxr_flash_output_streams>
 8014ad8:	4638      	mov	r0, r7
 8014ada:	b00b      	add	sp, #44	; 0x2c
 8014adc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014ae0:	200c      	movs	r0, #12
 8014ae2:	b00b      	add	sp, #44	; 0x2c
 8014ae4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014ae8:	0801dc70 	.word	0x0801dc70

08014aec <rmw_take_request>:
 8014aec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014af0:	4605      	mov	r5, r0
 8014af2:	6800      	ldr	r0, [r0, #0]
 8014af4:	b089      	sub	sp, #36	; 0x24
 8014af6:	460c      	mov	r4, r1
 8014af8:	4690      	mov	r8, r2
 8014afa:	461e      	mov	r6, r3
 8014afc:	b128      	cbz	r0, 8014b0a <rmw_take_request+0x1e>
 8014afe:	4b28      	ldr	r3, [pc, #160]	; (8014ba0 <rmw_take_request+0xb4>)
 8014b00:	6819      	ldr	r1, [r3, #0]
 8014b02:	f7eb fb9d 	bl	8000240 <strcmp>
 8014b06:	2800      	cmp	r0, #0
 8014b08:	d146      	bne.n	8014b98 <rmw_take_request+0xac>
 8014b0a:	b10e      	cbz	r6, 8014b10 <rmw_take_request+0x24>
 8014b0c:	2300      	movs	r3, #0
 8014b0e:	7033      	strb	r3, [r6, #0]
 8014b10:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8014b14:	f000 fee8 	bl	80158e8 <rmw_uxrce_clean_expired_static_input_buffer>
 8014b18:	4648      	mov	r0, r9
 8014b1a:	f000 febb 	bl	8015894 <rmw_uxrce_find_static_input_buffer_by_owner>
 8014b1e:	4607      	mov	r7, r0
 8014b20:	b3b0      	cbz	r0, 8014b90 <rmw_take_request+0xa4>
 8014b22:	6885      	ldr	r5, [r0, #8]
 8014b24:	f8d5 2838 	ldr.w	r2, [r5, #2104]	; 0x838
 8014b28:	f8d5 383c 	ldr.w	r3, [r5, #2108]	; 0x83c
 8014b2c:	e9c4 3208 	strd	r3, r2, [r4, #32]
 8014b30:	f895 3837 	ldrb.w	r3, [r5, #2103]	; 0x837
 8014b34:	7423      	strb	r3, [r4, #16]
 8014b36:	f8b5 2834 	ldrh.w	r2, [r5, #2100]	; 0x834
 8014b3a:	f895 3836 	ldrb.w	r3, [r5, #2102]	; 0x836
 8014b3e:	f8a4 2011 	strh.w	r2, [r4, #17]
 8014b42:	74e3      	strb	r3, [r4, #19]
 8014b44:	f8d5 1828 	ldr.w	r1, [r5, #2088]	; 0x828
 8014b48:	f8d5 282c 	ldr.w	r2, [r5, #2092]	; 0x82c
 8014b4c:	f8d5 3830 	ldr.w	r3, [r5, #2096]	; 0x830
 8014b50:	6161      	str	r1, [r4, #20]
 8014b52:	61a2      	str	r2, [r4, #24]
 8014b54:	61e3      	str	r3, [r4, #28]
 8014b56:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8014b5a:	689b      	ldr	r3, [r3, #8]
 8014b5c:	4798      	blx	r3
 8014b5e:	6844      	ldr	r4, [r0, #4]
 8014b60:	f8d5 2810 	ldr.w	r2, [r5, #2064]	; 0x810
 8014b64:	f105 0110 	add.w	r1, r5, #16
 8014b68:	4668      	mov	r0, sp
 8014b6a:	f7fa ff8d 	bl	800fa88 <ucdr_init_buffer>
 8014b6e:	4641      	mov	r1, r8
 8014b70:	68e3      	ldr	r3, [r4, #12]
 8014b72:	4668      	mov	r0, sp
 8014b74:	4798      	blx	r3
 8014b76:	4639      	mov	r1, r7
 8014b78:	4604      	mov	r4, r0
 8014b7a:	480a      	ldr	r0, [pc, #40]	; (8014ba4 <rmw_take_request+0xb8>)
 8014b7c:	f005 f906 	bl	8019d8c <put_memory>
 8014b80:	b106      	cbz	r6, 8014b84 <rmw_take_request+0x98>
 8014b82:	7034      	strb	r4, [r6, #0]
 8014b84:	f084 0001 	eor.w	r0, r4, #1
 8014b88:	b2c0      	uxtb	r0, r0
 8014b8a:	b009      	add	sp, #36	; 0x24
 8014b8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014b90:	2001      	movs	r0, #1
 8014b92:	b009      	add	sp, #36	; 0x24
 8014b94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014b98:	200c      	movs	r0, #12
 8014b9a:	b009      	add	sp, #36	; 0x24
 8014b9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014ba0:	0801dc70 	.word	0x0801dc70
 8014ba4:	20010944 	.word	0x20010944

08014ba8 <rmw_send_response>:
 8014ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014baa:	4605      	mov	r5, r0
 8014bac:	6800      	ldr	r0, [r0, #0]
 8014bae:	b091      	sub	sp, #68	; 0x44
 8014bb0:	460c      	mov	r4, r1
 8014bb2:	4616      	mov	r6, r2
 8014bb4:	b128      	cbz	r0, 8014bc2 <rmw_send_response+0x1a>
 8014bb6:	4b29      	ldr	r3, [pc, #164]	; (8014c5c <rmw_send_response+0xb4>)
 8014bb8:	6819      	ldr	r1, [r3, #0]
 8014bba:	f7eb fb41 	bl	8000240 <strcmp>
 8014bbe:	2800      	cmp	r0, #0
 8014bc0:	d141      	bne.n	8014c46 <rmw_send_response+0x9e>
 8014bc2:	686d      	ldr	r5, [r5, #4]
 8014bc4:	68a1      	ldr	r1, [r4, #8]
 8014bc6:	6860      	ldr	r0, [r4, #4]
 8014bc8:	6faf      	ldr	r7, [r5, #120]	; 0x78
 8014bca:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8014bce:	9307      	str	r3, [sp, #28]
 8014bd0:	4623      	mov	r3, r4
 8014bd2:	9206      	str	r2, [sp, #24]
 8014bd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014bd8:	789b      	ldrb	r3, [r3, #2]
 8014bda:	f88d 2017 	strb.w	r2, [sp, #23]
 8014bde:	f88d 3016 	strb.w	r3, [sp, #22]
 8014be2:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 8014be6:	68e2      	ldr	r2, [r4, #12]
 8014be8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8014bec:	ab02      	add	r3, sp, #8
 8014bee:	696c      	ldr	r4, [r5, #20]
 8014bf0:	c307      	stmia	r3!, {r0, r1, r2}
 8014bf2:	68e3      	ldr	r3, [r4, #12]
 8014bf4:	4798      	blx	r3
 8014bf6:	6844      	ldr	r4, [r0, #4]
 8014bf8:	4630      	mov	r0, r6
 8014bfa:	6923      	ldr	r3, [r4, #16]
 8014bfc:	4798      	blx	r3
 8014bfe:	f100 0318 	add.w	r3, r0, #24
 8014c02:	6938      	ldr	r0, [r7, #16]
 8014c04:	9300      	str	r3, [sp, #0]
 8014c06:	ab08      	add	r3, sp, #32
 8014c08:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8014c0c:	692a      	ldr	r2, [r5, #16]
 8014c0e:	6f29      	ldr	r1, [r5, #112]	; 0x70
 8014c10:	f003 fa84 	bl	801811c <uxr_prepare_output_stream>
 8014c14:	b910      	cbnz	r0, 8014c1c <rmw_send_response+0x74>
 8014c16:	2001      	movs	r0, #1
 8014c18:	b011      	add	sp, #68	; 0x44
 8014c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014c1c:	a902      	add	r1, sp, #8
 8014c1e:	a808      	add	r0, sp, #32
 8014c20:	f004 f9a6 	bl	8018f70 <uxr_serialize_SampleIdentity>
 8014c24:	68a3      	ldr	r3, [r4, #8]
 8014c26:	a908      	add	r1, sp, #32
 8014c28:	4630      	mov	r0, r6
 8014c2a:	4798      	blx	r3
 8014c2c:	f895 3072 	ldrb.w	r3, [r5, #114]	; 0x72
 8014c30:	6938      	ldr	r0, [r7, #16]
 8014c32:	2b01      	cmp	r3, #1
 8014c34:	d00a      	beq.n	8014c4c <rmw_send_response+0xa4>
 8014c36:	6f69      	ldr	r1, [r5, #116]	; 0x74
 8014c38:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8014c3c:	f001 fff4 	bl	8016c28 <uxr_run_session_until_confirm_delivery>
 8014c40:	2000      	movs	r0, #0
 8014c42:	b011      	add	sp, #68	; 0x44
 8014c44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014c46:	200c      	movs	r0, #12
 8014c48:	b011      	add	sp, #68	; 0x44
 8014c4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014c4c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8014c50:	f001 fc30 	bl	80164b4 <uxr_flash_output_streams>
 8014c54:	2000      	movs	r0, #0
 8014c56:	b011      	add	sp, #68	; 0x44
 8014c58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014c5a:	bf00      	nop
 8014c5c:	0801dc70 	.word	0x0801dc70

08014c60 <rmw_take_response>:
 8014c60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c64:	4604      	mov	r4, r0
 8014c66:	6800      	ldr	r0, [r0, #0]
 8014c68:	b088      	sub	sp, #32
 8014c6a:	460f      	mov	r7, r1
 8014c6c:	4690      	mov	r8, r2
 8014c6e:	461d      	mov	r5, r3
 8014c70:	b120      	cbz	r0, 8014c7c <rmw_take_response+0x1c>
 8014c72:	4b1d      	ldr	r3, [pc, #116]	; (8014ce8 <rmw_take_response+0x88>)
 8014c74:	6819      	ldr	r1, [r3, #0]
 8014c76:	f7eb fae3 	bl	8000240 <strcmp>
 8014c7a:	bb68      	cbnz	r0, 8014cd8 <rmw_take_response+0x78>
 8014c7c:	b10d      	cbz	r5, 8014c82 <rmw_take_response+0x22>
 8014c7e:	2300      	movs	r3, #0
 8014c80:	702b      	strb	r3, [r5, #0]
 8014c82:	6864      	ldr	r4, [r4, #4]
 8014c84:	f000 fe30 	bl	80158e8 <rmw_uxrce_clean_expired_static_input_buffer>
 8014c88:	4620      	mov	r0, r4
 8014c8a:	f000 fe03 	bl	8015894 <rmw_uxrce_find_static_input_buffer_by_owner>
 8014c8e:	4606      	mov	r6, r0
 8014c90:	b330      	cbz	r0, 8014ce0 <rmw_take_response+0x80>
 8014c92:	6963      	ldr	r3, [r4, #20]
 8014c94:	6884      	ldr	r4, [r0, #8]
 8014c96:	68db      	ldr	r3, [r3, #12]
 8014c98:	f504 6203 	add.w	r2, r4, #2096	; 0x830
 8014c9c:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8014ca0:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8014ca4:	4798      	blx	r3
 8014ca6:	6847      	ldr	r7, [r0, #4]
 8014ca8:	f8d4 2810 	ldr.w	r2, [r4, #2064]	; 0x810
 8014cac:	f104 0110 	add.w	r1, r4, #16
 8014cb0:	4668      	mov	r0, sp
 8014cb2:	f7fa fee9 	bl	800fa88 <ucdr_init_buffer>
 8014cb6:	4641      	mov	r1, r8
 8014cb8:	68fb      	ldr	r3, [r7, #12]
 8014cba:	4668      	mov	r0, sp
 8014cbc:	4798      	blx	r3
 8014cbe:	4631      	mov	r1, r6
 8014cc0:	4604      	mov	r4, r0
 8014cc2:	480a      	ldr	r0, [pc, #40]	; (8014cec <rmw_take_response+0x8c>)
 8014cc4:	f005 f862 	bl	8019d8c <put_memory>
 8014cc8:	b105      	cbz	r5, 8014ccc <rmw_take_response+0x6c>
 8014cca:	702c      	strb	r4, [r5, #0]
 8014ccc:	f084 0001 	eor.w	r0, r4, #1
 8014cd0:	b2c0      	uxtb	r0, r0
 8014cd2:	b008      	add	sp, #32
 8014cd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014cd8:	200c      	movs	r0, #12
 8014cda:	b008      	add	sp, #32
 8014cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ce0:	2001      	movs	r0, #1
 8014ce2:	b008      	add	sp, #32
 8014ce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ce8:	0801dc70 	.word	0x0801dc70
 8014cec:	20010944 	.word	0x20010944

08014cf0 <rmw_create_service>:
 8014cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014cf4:	b091      	sub	sp, #68	; 0x44
 8014cf6:	2900      	cmp	r1, #0
 8014cf8:	f000 80bb 	beq.w	8014e72 <rmw_create_service+0x182>
 8014cfc:	4606      	mov	r6, r0
 8014cfe:	2800      	cmp	r0, #0
 8014d00:	f000 80b7 	beq.w	8014e72 <rmw_create_service+0x182>
 8014d04:	4614      	mov	r4, r2
 8014d06:	6800      	ldr	r0, [r0, #0]
 8014d08:	4689      	mov	r9, r1
 8014d0a:	461d      	mov	r5, r3
 8014d0c:	f000 ff36 	bl	8015b7c <is_uxrce_rmw_identifier_valid>
 8014d10:	2c00      	cmp	r4, #0
 8014d12:	f000 80ae 	beq.w	8014e72 <rmw_create_service+0x182>
 8014d16:	f080 0001 	eor.w	r0, r0, #1
 8014d1a:	b2c0      	uxtb	r0, r0
 8014d1c:	2800      	cmp	r0, #0
 8014d1e:	f040 80a8 	bne.w	8014e72 <rmw_create_service+0x182>
 8014d22:	7823      	ldrb	r3, [r4, #0]
 8014d24:	2b00      	cmp	r3, #0
 8014d26:	f000 80a4 	beq.w	8014e72 <rmw_create_service+0x182>
 8014d2a:	2d00      	cmp	r5, #0
 8014d2c:	f000 80a1 	beq.w	8014e72 <rmw_create_service+0x182>
 8014d30:	4856      	ldr	r0, [pc, #344]	; (8014e8c <rmw_create_service+0x19c>)
 8014d32:	f8d6 8004 	ldr.w	r8, [r6, #4]
 8014d36:	f005 f819 	bl	8019d6c <get_memory>
 8014d3a:	4606      	mov	r6, r0
 8014d3c:	2800      	cmp	r0, #0
 8014d3e:	f000 8099 	beq.w	8014e74 <rmw_create_service+0x184>
 8014d42:	6887      	ldr	r7, [r0, #8]
 8014d44:	f107 0a88 	add.w	sl, r7, #136	; 0x88
 8014d48:	f8c7 7080 	str.w	r7, [r7, #128]	; 0x80
 8014d4c:	f7ff fad8 	bl	8014300 <rmw_get_implementation_identifier>
 8014d50:	67f8      	str	r0, [r7, #124]	; 0x7c
 8014d52:	f8c7 a084 	str.w	sl, [r7, #132]	; 0x84
 8014d56:	4620      	mov	r0, r4
 8014d58:	f7eb fad2 	bl	8000300 <strlen>
 8014d5c:	1c42      	adds	r2, r0, #1
 8014d5e:	f107 067c 	add.w	r6, r7, #124	; 0x7c
 8014d62:	2a3c      	cmp	r2, #60	; 0x3c
 8014d64:	f200 808a 	bhi.w	8014e7c <rmw_create_service+0x18c>
 8014d68:	4621      	mov	r1, r4
 8014d6a:	4650      	mov	r0, sl
 8014d6c:	f006 fc7f 	bl	801b66e <memcpy>
 8014d70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8014d74:	4629      	mov	r1, r5
 8014d76:	2250      	movs	r2, #80	; 0x50
 8014d78:	f107 0020 	add.w	r0, r7, #32
 8014d7c:	f8c7 8078 	str.w	r8, [r7, #120]	; 0x78
 8014d80:	677b      	str	r3, [r7, #116]	; 0x74
 8014d82:	f006 fc74 	bl	801b66e <memcpy>
 8014d86:	4648      	mov	r0, r9
 8014d88:	4941      	ldr	r1, [pc, #260]	; (8014e90 <rmw_create_service+0x1a0>)
 8014d8a:	f7f9 f8e5 	bl	800df58 <get_service_typesupport_handle>
 8014d8e:	2800      	cmp	r0, #0
 8014d90:	d074      	beq.n	8014e7c <rmw_create_service+0x18c>
 8014d92:	6843      	ldr	r3, [r0, #4]
 8014d94:	617b      	str	r3, [r7, #20]
 8014d96:	2b00      	cmp	r3, #0
 8014d98:	d070      	beq.n	8014e7c <rmw_create_service+0x18c>
 8014d9a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8014d9e:	2108      	movs	r1, #8
 8014da0:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 8014e98 <rmw_create_service+0x1a8>
 8014da4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014da8:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 8014e9c <rmw_create_service+0x1ac>
 8014dac:	f8b3 05a2 	ldrh.w	r0, [r3, #1442]	; 0x5a2
 8014db0:	1c42      	adds	r2, r0, #1
 8014db2:	f8a3 25a2 	strh.w	r2, [r3, #1442]	; 0x5a2
 8014db6:	f001 f8fb 	bl	8015fb0 <uxr_object_id>
 8014dba:	2364      	movs	r3, #100	; 0x64
 8014dbc:	6138      	str	r0, [r7, #16]
 8014dbe:	4652      	mov	r2, sl
 8014dc0:	4649      	mov	r1, r9
 8014dc2:	6978      	ldr	r0, [r7, #20]
 8014dc4:	f000 fe74 	bl	8015ab0 <generate_service_types>
 8014dc8:	2800      	cmp	r0, #0
 8014dca:	d057      	beq.n	8014e7c <rmw_create_service+0x18c>
 8014dcc:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 8014ea0 <rmw_create_service+0x1b0>
 8014dd0:	233c      	movs	r3, #60	; 0x3c
 8014dd2:	4a30      	ldr	r2, [pc, #192]	; (8014e94 <rmw_create_service+0x1a4>)
 8014dd4:	4620      	mov	r0, r4
 8014dd6:	4659      	mov	r1, fp
 8014dd8:	f000 fe38 	bl	8015a4c <generate_service_topics>
 8014ddc:	2800      	cmp	r0, #0
 8014dde:	d04d      	beq.n	8014e7c <rmw_create_service+0x18c>
 8014de0:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8014de4:	a80c      	add	r0, sp, #48	; 0x30
 8014de6:	4629      	mov	r1, r5
 8014de8:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8014dec:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014df0:	f000 fe14 	bl	8015a1c <convert_qos_profile>
 8014df4:	4a27      	ldr	r2, [pc, #156]	; (8014e94 <rmw_create_service+0x1a4>)
 8014df6:	a80c      	add	r0, sp, #48	; 0x30
 8014df8:	9400      	str	r4, [sp, #0]
 8014dfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014dfc:	e9cd b203 	strd	fp, r2, [sp, #12]
 8014e00:	e9cd 9a01 	strd	r9, sl, [sp, #4]
 8014e04:	c803      	ldmia	r0, {r0, r1}
 8014e06:	9a08      	ldr	r2, [sp, #32]
 8014e08:	9005      	str	r0, [sp, #20]
 8014e0a:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8014e0e:	2306      	movs	r3, #6
 8014e10:	f8ad 1018 	strh.w	r1, [sp, #24]
 8014e14:	9307      	str	r3, [sp, #28]
 8014e16:	6811      	ldr	r1, [r2, #0]
 8014e18:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8014e1c:	693a      	ldr	r2, [r7, #16]
 8014e1e:	f000 ffcf 	bl	8015dc0 <uxr_buffer_create_replier_bin>
 8014e22:	4602      	mov	r2, r0
 8014e24:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8014e28:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8014e2c:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8014e30:	f000 fdd8 	bl	80159e4 <run_xrce_session>
 8014e34:	b310      	cbz	r0, 8014e7c <rmw_create_service+0x18c>
 8014e36:	7a2b      	ldrb	r3, [r5, #8]
 8014e38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014e3c:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8014e40:	2b02      	cmp	r3, #2
 8014e42:	920e      	str	r2, [sp, #56]	; 0x38
 8014e44:	f04f 0200 	mov.w	r2, #0
 8014e48:	920f      	str	r2, [sp, #60]	; 0x3c
 8014e4a:	bf0c      	ite	eq
 8014e4c:	e9d0 23df 	ldrdeq	r2, r3, [r0, #892]	; 0x37c
 8014e50:	e9d0 32dd 	ldrdne	r3, r2, [r0, #884]	; 0x374
 8014e54:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8014e58:	930b      	str	r3, [sp, #44]	; 0x2c
 8014e5a:	ab0e      	add	r3, sp, #56	; 0x38
 8014e5c:	673a      	str	r2, [r7, #112]	; 0x70
 8014e5e:	f8d0 20e4 	ldr.w	r2, [r0, #228]	; 0xe4
 8014e62:	9300      	str	r3, [sp, #0]
 8014e64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014e66:	6811      	ldr	r1, [r2, #0]
 8014e68:	693a      	ldr	r2, [r7, #16]
 8014e6a:	f001 f8d1 	bl	8016010 <uxr_buffer_request_data>
 8014e6e:	8338      	strh	r0, [r7, #24]
 8014e70:	e000      	b.n	8014e74 <rmw_create_service+0x184>
 8014e72:	2600      	movs	r6, #0
 8014e74:	4630      	mov	r0, r6
 8014e76:	b011      	add	sp, #68	; 0x44
 8014e78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e7c:	4630      	mov	r0, r6
 8014e7e:	2600      	movs	r6, #0
 8014e80:	f000 fc76 	bl	8015770 <rmw_uxrce_fini_service_memory>
 8014e84:	4630      	mov	r0, r6
 8014e86:	b011      	add	sp, #68	; 0x44
 8014e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e8c:	20010924 	.word	0x20010924
 8014e90:	0801c570 	.word	0x0801c570
 8014e94:	2000bed0 	.word	0x2000bed0
 8014e98:	2000bf0c 	.word	0x2000bf0c
 8014e9c:	2000be6c 	.word	0x2000be6c
 8014ea0:	2000be30 	.word	0x2000be30

08014ea4 <rmw_destroy_service>:
 8014ea4:	b570      	push	{r4, r5, r6, lr}
 8014ea6:	b128      	cbz	r0, 8014eb4 <rmw_destroy_service+0x10>
 8014ea8:	4604      	mov	r4, r0
 8014eaa:	6800      	ldr	r0, [r0, #0]
 8014eac:	460d      	mov	r5, r1
 8014eae:	f000 fe65 	bl	8015b7c <is_uxrce_rmw_identifier_valid>
 8014eb2:	b910      	cbnz	r0, 8014eba <rmw_destroy_service+0x16>
 8014eb4:	2401      	movs	r4, #1
 8014eb6:	4620      	mov	r0, r4
 8014eb8:	bd70      	pop	{r4, r5, r6, pc}
 8014eba:	6863      	ldr	r3, [r4, #4]
 8014ebc:	2b00      	cmp	r3, #0
 8014ebe:	d0f9      	beq.n	8014eb4 <rmw_destroy_service+0x10>
 8014ec0:	2d00      	cmp	r5, #0
 8014ec2:	d0f7      	beq.n	8014eb4 <rmw_destroy_service+0x10>
 8014ec4:	6828      	ldr	r0, [r5, #0]
 8014ec6:	f000 fe59 	bl	8015b7c <is_uxrce_rmw_identifier_valid>
 8014eca:	2800      	cmp	r0, #0
 8014ecc:	d0f2      	beq.n	8014eb4 <rmw_destroy_service+0x10>
 8014ece:	686e      	ldr	r6, [r5, #4]
 8014ed0:	2e00      	cmp	r6, #0
 8014ed2:	d0ef      	beq.n	8014eb4 <rmw_destroy_service+0x10>
 8014ed4:	6864      	ldr	r4, [r4, #4]
 8014ed6:	6932      	ldr	r2, [r6, #16]
 8014ed8:	6920      	ldr	r0, [r4, #16]
 8014eda:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8014ede:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8014ee2:	6819      	ldr	r1, [r3, #0]
 8014ee4:	f001 f8ce 	bl	8016084 <uxr_buffer_cancel_data>
 8014ee8:	4602      	mov	r2, r0
 8014eea:	6920      	ldr	r0, [r4, #16]
 8014eec:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8014ef0:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8014ef4:	f000 fd76 	bl	80159e4 <run_xrce_session>
 8014ef8:	6920      	ldr	r0, [r4, #16]
 8014efa:	6932      	ldr	r2, [r6, #16]
 8014efc:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8014f00:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8014f04:	6819      	ldr	r1, [r3, #0]
 8014f06:	f000 fedd 	bl	8015cc4 <uxr_buffer_delete_entity>
 8014f0a:	4602      	mov	r2, r0
 8014f0c:	6920      	ldr	r0, [r4, #16]
 8014f0e:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8014f12:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8014f16:	f000 fd65 	bl	80159e4 <run_xrce_session>
 8014f1a:	4603      	mov	r3, r0
 8014f1c:	4628      	mov	r0, r5
 8014f1e:	2b00      	cmp	r3, #0
 8014f20:	bf14      	ite	ne
 8014f22:	2400      	movne	r4, #0
 8014f24:	2402      	moveq	r4, #2
 8014f26:	f000 fc23 	bl	8015770 <rmw_uxrce_fini_service_memory>
 8014f2a:	e7c4      	b.n	8014eb6 <rmw_destroy_service+0x12>

08014f2c <rmw_service_response_publisher_get_actual_qos>:
 8014f2c:	b181      	cbz	r1, 8014f50 <rmw_service_response_publisher_get_actual_qos+0x24>
 8014f2e:	4603      	mov	r3, r0
 8014f30:	b510      	push	{r4, lr}
 8014f32:	fab0 f480 	clz	r4, r0
 8014f36:	0964      	lsrs	r4, r4, #5
 8014f38:	b140      	cbz	r0, 8014f4c <rmw_service_response_publisher_get_actual_qos+0x20>
 8014f3a:	685b      	ldr	r3, [r3, #4]
 8014f3c:	4608      	mov	r0, r1
 8014f3e:	2250      	movs	r2, #80	; 0x50
 8014f40:	f103 0120 	add.w	r1, r3, #32
 8014f44:	f006 fb93 	bl	801b66e <memcpy>
 8014f48:	4620      	mov	r0, r4
 8014f4a:	bd10      	pop	{r4, pc}
 8014f4c:	200b      	movs	r0, #11
 8014f4e:	bd10      	pop	{r4, pc}
 8014f50:	200b      	movs	r0, #11
 8014f52:	4770      	bx	lr

08014f54 <rmw_service_request_subscription_get_actual_qos>:
 8014f54:	b178      	cbz	r0, 8014f76 <rmw_service_request_subscription_get_actual_qos+0x22>
 8014f56:	b510      	push	{r4, lr}
 8014f58:	fab1 f481 	clz	r4, r1
 8014f5c:	0964      	lsrs	r4, r4, #5
 8014f5e:	b141      	cbz	r1, 8014f72 <rmw_service_request_subscription_get_actual_qos+0x1e>
 8014f60:	6843      	ldr	r3, [r0, #4]
 8014f62:	2250      	movs	r2, #80	; 0x50
 8014f64:	4608      	mov	r0, r1
 8014f66:	f103 0120 	add.w	r1, r3, #32
 8014f6a:	f006 fb80 	bl	801b66e <memcpy>
 8014f6e:	4620      	mov	r0, r4
 8014f70:	bd10      	pop	{r4, pc}
 8014f72:	200b      	movs	r0, #11
 8014f74:	bd10      	pop	{r4, pc}
 8014f76:	200b      	movs	r0, #11
 8014f78:	4770      	bx	lr
 8014f7a:	bf00      	nop

08014f7c <rmw_destroy_subscription>:
 8014f7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f80:	b128      	cbz	r0, 8014f8e <rmw_destroy_subscription+0x12>
 8014f82:	4604      	mov	r4, r0
 8014f84:	6800      	ldr	r0, [r0, #0]
 8014f86:	460d      	mov	r5, r1
 8014f88:	f000 fdf8 	bl	8015b7c <is_uxrce_rmw_identifier_valid>
 8014f8c:	b918      	cbnz	r0, 8014f96 <rmw_destroy_subscription+0x1a>
 8014f8e:	2401      	movs	r4, #1
 8014f90:	4620      	mov	r0, r4
 8014f92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f96:	6863      	ldr	r3, [r4, #4]
 8014f98:	2b00      	cmp	r3, #0
 8014f9a:	d0f8      	beq.n	8014f8e <rmw_destroy_subscription+0x12>
 8014f9c:	fab5 f485 	clz	r4, r5
 8014fa0:	0964      	lsrs	r4, r4, #5
 8014fa2:	2d00      	cmp	r5, #0
 8014fa4:	d0f3      	beq.n	8014f8e <rmw_destroy_subscription+0x12>
 8014fa6:	6828      	ldr	r0, [r5, #0]
 8014fa8:	f000 fde8 	bl	8015b7c <is_uxrce_rmw_identifier_valid>
 8014fac:	2800      	cmp	r0, #0
 8014fae:	d0ee      	beq.n	8014f8e <rmw_destroy_subscription+0x12>
 8014fb0:	686e      	ldr	r6, [r5, #4]
 8014fb2:	2e00      	cmp	r6, #0
 8014fb4:	d0eb      	beq.n	8014f8e <rmw_destroy_subscription+0x12>
 8014fb6:	6a37      	ldr	r7, [r6, #32]
 8014fb8:	6972      	ldr	r2, [r6, #20]
 8014fba:	6938      	ldr	r0, [r7, #16]
 8014fbc:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8014fc0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8014fc4:	6819      	ldr	r1, [r3, #0]
 8014fc6:	f001 f85d 	bl	8016084 <uxr_buffer_cancel_data>
 8014fca:	4602      	mov	r2, r0
 8014fcc:	6938      	ldr	r0, [r7, #16]
 8014fce:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8014fd2:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8014fd6:	f000 fd05 	bl	80159e4 <run_xrce_session>
 8014fda:	69f0      	ldr	r0, [r6, #28]
 8014fdc:	f004 ff14 	bl	8019e08 <destroy_topic>
 8014fe0:	6a33      	ldr	r3, [r6, #32]
 8014fe2:	6972      	ldr	r2, [r6, #20]
 8014fe4:	6918      	ldr	r0, [r3, #16]
 8014fe6:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8014fea:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8014fee:	6819      	ldr	r1, [r3, #0]
 8014ff0:	f000 fe68 	bl	8015cc4 <uxr_buffer_delete_entity>
 8014ff4:	6a33      	ldr	r3, [r6, #32]
 8014ff6:	4680      	mov	r8, r0
 8014ff8:	6932      	ldr	r2, [r6, #16]
 8014ffa:	6918      	ldr	r0, [r3, #16]
 8014ffc:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8015000:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015004:	6819      	ldr	r1, [r3, #0]
 8015006:	f000 fe5d 	bl	8015cc4 <uxr_buffer_delete_entity>
 801500a:	4606      	mov	r6, r0
 801500c:	6938      	ldr	r0, [r7, #16]
 801500e:	4642      	mov	r2, r8
 8015010:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8015014:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8015018:	f000 fce4 	bl	80159e4 <run_xrce_session>
 801501c:	693f      	ldr	r7, [r7, #16]
 801501e:	4632      	mov	r2, r6
 8015020:	4606      	mov	r6, r0
 8015022:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 8015026:	4638      	mov	r0, r7
 8015028:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 801502c:	f000 fcda 	bl	80159e4 <run_xrce_session>
 8015030:	b126      	cbz	r6, 801503c <rmw_destroy_subscription+0xc0>
 8015032:	b118      	cbz	r0, 801503c <rmw_destroy_subscription+0xc0>
 8015034:	4628      	mov	r0, r5
 8015036:	f000 fb85 	bl	8015744 <rmw_uxrce_fini_subscription_memory>
 801503a:	e7a9      	b.n	8014f90 <rmw_destroy_subscription+0x14>
 801503c:	2402      	movs	r4, #2
 801503e:	e7f9      	b.n	8015034 <rmw_destroy_subscription+0xb8>

08015040 <rmw_take_with_info>:
 8015040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015042:	4604      	mov	r4, r0
 8015044:	6800      	ldr	r0, [r0, #0]
 8015046:	b089      	sub	sp, #36	; 0x24
 8015048:	460f      	mov	r7, r1
 801504a:	4615      	mov	r5, r2
 801504c:	b128      	cbz	r0, 801505a <rmw_take_with_info+0x1a>
 801504e:	4b24      	ldr	r3, [pc, #144]	; (80150e0 <rmw_take_with_info+0xa0>)
 8015050:	6819      	ldr	r1, [r3, #0]
 8015052:	f7eb f8f5 	bl	8000240 <strcmp>
 8015056:	2800      	cmp	r0, #0
 8015058:	d13e      	bne.n	80150d8 <rmw_take_with_info+0x98>
 801505a:	b305      	cbz	r5, 801509e <rmw_take_with_info+0x5e>
 801505c:	2300      	movs	r3, #0
 801505e:	6864      	ldr	r4, [r4, #4]
 8015060:	702b      	strb	r3, [r5, #0]
 8015062:	f000 fc41 	bl	80158e8 <rmw_uxrce_clean_expired_static_input_buffer>
 8015066:	4620      	mov	r0, r4
 8015068:	f000 fc14 	bl	8015894 <rmw_uxrce_find_static_input_buffer_by_owner>
 801506c:	4606      	mov	r6, r0
 801506e:	b1f0      	cbz	r0, 80150ae <rmw_take_with_info+0x6e>
 8015070:	6881      	ldr	r1, [r0, #8]
 8015072:	4668      	mov	r0, sp
 8015074:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 8015078:	3110      	adds	r1, #16
 801507a:	f7fa fd05 	bl	800fa88 <ucdr_init_buffer>
 801507e:	69a3      	ldr	r3, [r4, #24]
 8015080:	4639      	mov	r1, r7
 8015082:	4668      	mov	r0, sp
 8015084:	68db      	ldr	r3, [r3, #12]
 8015086:	4798      	blx	r3
 8015088:	4604      	mov	r4, r0
 801508a:	4631      	mov	r1, r6
 801508c:	4815      	ldr	r0, [pc, #84]	; (80150e4 <rmw_take_with_info+0xa4>)
 801508e:	f004 fe7d 	bl	8019d8c <put_memory>
 8015092:	702c      	strb	r4, [r5, #0]
 8015094:	f084 0001 	eor.w	r0, r4, #1
 8015098:	b2c0      	uxtb	r0, r0
 801509a:	b009      	add	sp, #36	; 0x24
 801509c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801509e:	6864      	ldr	r4, [r4, #4]
 80150a0:	f000 fc22 	bl	80158e8 <rmw_uxrce_clean_expired_static_input_buffer>
 80150a4:	4620      	mov	r0, r4
 80150a6:	f000 fbf5 	bl	8015894 <rmw_uxrce_find_static_input_buffer_by_owner>
 80150aa:	4605      	mov	r5, r0
 80150ac:	b910      	cbnz	r0, 80150b4 <rmw_take_with_info+0x74>
 80150ae:	2001      	movs	r0, #1
 80150b0:	b009      	add	sp, #36	; 0x24
 80150b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80150b4:	68a9      	ldr	r1, [r5, #8]
 80150b6:	4668      	mov	r0, sp
 80150b8:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 80150bc:	3110      	adds	r1, #16
 80150be:	f7fa fce3 	bl	800fa88 <ucdr_init_buffer>
 80150c2:	69a3      	ldr	r3, [r4, #24]
 80150c4:	4639      	mov	r1, r7
 80150c6:	4668      	mov	r0, sp
 80150c8:	68db      	ldr	r3, [r3, #12]
 80150ca:	4798      	blx	r3
 80150cc:	4629      	mov	r1, r5
 80150ce:	4604      	mov	r4, r0
 80150d0:	4804      	ldr	r0, [pc, #16]	; (80150e4 <rmw_take_with_info+0xa4>)
 80150d2:	f004 fe5b 	bl	8019d8c <put_memory>
 80150d6:	e7dd      	b.n	8015094 <rmw_take_with_info+0x54>
 80150d8:	200c      	movs	r0, #12
 80150da:	b009      	add	sp, #36	; 0x24
 80150dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80150de:	bf00      	nop
 80150e0:	0801dc70 	.word	0x0801dc70
 80150e4:	20010944 	.word	0x20010944

080150e8 <rmw_uxrce_transport_init>:
 80150e8:	b508      	push	{r3, lr}
 80150ea:	b108      	cbz	r0, 80150f0 <rmw_uxrce_transport_init+0x8>
 80150ec:	f100 0210 	add.w	r2, r0, #16
 80150f0:	b139      	cbz	r1, 8015102 <rmw_uxrce_transport_init+0x1a>
 80150f2:	6949      	ldr	r1, [r1, #20]
 80150f4:	4610      	mov	r0, r2
 80150f6:	f000 ff23 	bl	8015f40 <uxr_init_custom_transport>
 80150fa:	f080 0001 	eor.w	r0, r0, #1
 80150fe:	b2c0      	uxtb	r0, r0
 8015100:	bd08      	pop	{r3, pc}
 8015102:	4b04      	ldr	r3, [pc, #16]	; (8015114 <rmw_uxrce_transport_init+0x2c>)
 8015104:	4610      	mov	r0, r2
 8015106:	6859      	ldr	r1, [r3, #4]
 8015108:	f000 ff1a 	bl	8015f40 <uxr_init_custom_transport>
 801510c:	f080 0001 	eor.w	r0, r0, #1
 8015110:	b2c0      	uxtb	r0, r0
 8015112:	bd08      	pop	{r3, pc}
 8015114:	2000b994 	.word	0x2000b994

08015118 <rmw_wait>:
 8015118:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801511c:	4698      	mov	r8, r3
 801511e:	ea40 0301 	orr.w	r3, r0, r1
 8015122:	b089      	sub	sp, #36	; 0x24
 8015124:	ea48 0303 	orr.w	r3, r8, r3
 8015128:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801512a:	4313      	orrs	r3, r2
 801512c:	f000 8106 	beq.w	801533c <rmw_wait+0x224>
 8015130:	4605      	mov	r5, r0
 8015132:	460e      	mov	r6, r1
 8015134:	4691      	mov	r9, r2
 8015136:	b16c      	cbz	r4, 8015154 <rmw_wait+0x3c>
 8015138:	4ba6      	ldr	r3, [pc, #664]	; (80153d4 <rmw_wait+0x2bc>)
 801513a:	af04      	add	r7, sp, #16
 801513c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801513e:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8015142:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8015146:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801514a:	f004 fc9f 	bl	8019a8c <rmw_time_equal>
 801514e:	2800      	cmp	r0, #0
 8015150:	f000 810b 	beq.w	801536a <rmw_wait+0x252>
 8015154:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8015158:	f000 fbc6 	bl	80158e8 <rmw_uxrce_clean_expired_static_input_buffer>
 801515c:	4b9e      	ldr	r3, [pc, #632]	; (80153d8 <rmw_wait+0x2c0>)
 801515e:	681c      	ldr	r4, [r3, #0]
 8015160:	b14c      	cbz	r4, 8015176 <rmw_wait+0x5e>
 8015162:	4623      	mov	r3, r4
 8015164:	2100      	movs	r1, #0
 8015166:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 801516a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801516e:	f882 15a4 	strb.w	r1, [r2, #1444]	; 0x5a4
 8015172:	2b00      	cmp	r3, #0
 8015174:	d1f7      	bne.n	8015166 <rmw_wait+0x4e>
 8015176:	f1b9 0f00 	cmp.w	r9, #0
 801517a:	d011      	beq.n	80151a0 <rmw_wait+0x88>
 801517c:	f8d9 1000 	ldr.w	r1, [r9]
 8015180:	b171      	cbz	r1, 80151a0 <rmw_wait+0x88>
 8015182:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8015186:	2300      	movs	r3, #0
 8015188:	2001      	movs	r0, #1
 801518a:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801518e:	3301      	adds	r3, #1
 8015190:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8015192:	4299      	cmp	r1, r3
 8015194:	6912      	ldr	r2, [r2, #16]
 8015196:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801519a:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 801519e:	d1f4      	bne.n	801518a <rmw_wait+0x72>
 80151a0:	f1b8 0f00 	cmp.w	r8, #0
 80151a4:	d011      	beq.n	80151ca <rmw_wait+0xb2>
 80151a6:	f8d8 1000 	ldr.w	r1, [r8]
 80151aa:	b171      	cbz	r1, 80151ca <rmw_wait+0xb2>
 80151ac:	f8d8 c004 	ldr.w	ip, [r8, #4]
 80151b0:	2300      	movs	r3, #0
 80151b2:	2001      	movs	r0, #1
 80151b4:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80151b8:	3301      	adds	r3, #1
 80151ba:	6f92      	ldr	r2, [r2, #120]	; 0x78
 80151bc:	4299      	cmp	r1, r3
 80151be:	6912      	ldr	r2, [r2, #16]
 80151c0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80151c4:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 80151c8:	d1f4      	bne.n	80151b4 <rmw_wait+0x9c>
 80151ca:	b185      	cbz	r5, 80151ee <rmw_wait+0xd6>
 80151cc:	6829      	ldr	r1, [r5, #0]
 80151ce:	b171      	cbz	r1, 80151ee <rmw_wait+0xd6>
 80151d0:	f8d5 c004 	ldr.w	ip, [r5, #4]
 80151d4:	2300      	movs	r3, #0
 80151d6:	2001      	movs	r0, #1
 80151d8:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80151dc:	3301      	adds	r3, #1
 80151de:	6a12      	ldr	r2, [r2, #32]
 80151e0:	4299      	cmp	r1, r3
 80151e2:	6912      	ldr	r2, [r2, #16]
 80151e4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80151e8:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 80151ec:	d1f4      	bne.n	80151d8 <rmw_wait+0xc0>
 80151ee:	b344      	cbz	r4, 8015242 <rmw_wait+0x12a>
 80151f0:	4622      	mov	r2, r4
 80151f2:	2300      	movs	r3, #0
 80151f4:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 80151f8:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 80151fc:	f891 15a4 	ldrb.w	r1, [r1, #1444]	; 0x5a4
 8015200:	440b      	add	r3, r1
 8015202:	b2db      	uxtb	r3, r3
 8015204:	2a00      	cmp	r2, #0
 8015206:	d1f5      	bne.n	80151f4 <rmw_wait+0xdc>
 8015208:	2b00      	cmp	r3, #0
 801520a:	d05f      	beq.n	80152cc <rmw_wait+0x1b4>
 801520c:	1c7a      	adds	r2, r7, #1
 801520e:	d00d      	beq.n	801522c <rmw_wait+0x114>
 8015210:	ee07 7a90 	vmov	s15, r7
 8015214:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8015218:	ee07 3a90 	vmov	s15, r3
 801521c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015220:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015224:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8015228:	ee17 7a90 	vmov	r7, s15
 801522c:	68a0      	ldr	r0, [r4, #8]
 801522e:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 8015232:	f893 35a4 	ldrb.w	r3, [r3, #1444]	; 0x5a4
 8015236:	2b00      	cmp	r3, #0
 8015238:	f040 808d 	bne.w	8015356 <rmw_wait+0x23e>
 801523c:	6864      	ldr	r4, [r4, #4]
 801523e:	2c00      	cmp	r4, #0
 8015240:	d1f4      	bne.n	801522c <rmw_wait+0x114>
 8015242:	f1b9 0f00 	cmp.w	r9, #0
 8015246:	f000 80a1 	beq.w	801538c <rmw_wait+0x274>
 801524a:	f8d9 7000 	ldr.w	r7, [r9]
 801524e:	2f00      	cmp	r7, #0
 8015250:	f000 80a4 	beq.w	801539c <rmw_wait+0x284>
 8015254:	2400      	movs	r4, #0
 8015256:	4627      	mov	r7, r4
 8015258:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801525c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015260:	f000 fb18 	bl	8015894 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015264:	2800      	cmp	r0, #0
 8015266:	d03b      	beq.n	80152e0 <rmw_wait+0x1c8>
 8015268:	3401      	adds	r4, #1
 801526a:	f8d9 3000 	ldr.w	r3, [r9]
 801526e:	2701      	movs	r7, #1
 8015270:	42a3      	cmp	r3, r4
 8015272:	d8f1      	bhi.n	8015258 <rmw_wait+0x140>
 8015274:	2701      	movs	r7, #1
 8015276:	f1b8 0f00 	cmp.w	r8, #0
 801527a:	d010      	beq.n	801529e <rmw_wait+0x186>
 801527c:	f8d8 3000 	ldr.w	r3, [r8]
 8015280:	b16b      	cbz	r3, 801529e <rmw_wait+0x186>
 8015282:	2400      	movs	r4, #0
 8015284:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015288:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801528c:	f000 fb02 	bl	8015894 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015290:	b370      	cbz	r0, 80152f0 <rmw_wait+0x1d8>
 8015292:	3401      	adds	r4, #1
 8015294:	f8d8 3000 	ldr.w	r3, [r8]
 8015298:	2701      	movs	r7, #1
 801529a:	42a3      	cmp	r3, r4
 801529c:	d8f2      	bhi.n	8015284 <rmw_wait+0x16c>
 801529e:	2d00      	cmp	r5, #0
 80152a0:	d035      	beq.n	801530e <rmw_wait+0x1f6>
 80152a2:	682b      	ldr	r3, [r5, #0]
 80152a4:	b39b      	cbz	r3, 801530e <rmw_wait+0x1f6>
 80152a6:	2400      	movs	r4, #0
 80152a8:	686b      	ldr	r3, [r5, #4]
 80152aa:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80152ae:	f000 faf1 	bl	8015894 <rmw_uxrce_find_static_input_buffer_by_owner>
 80152b2:	b328      	cbz	r0, 8015300 <rmw_wait+0x1e8>
 80152b4:	3401      	adds	r4, #1
 80152b6:	682b      	ldr	r3, [r5, #0]
 80152b8:	2701      	movs	r7, #1
 80152ba:	42a3      	cmp	r3, r4
 80152bc:	d8f4      	bhi.n	80152a8 <rmw_wait+0x190>
 80152be:	2e00      	cmp	r6, #0
 80152c0:	d03c      	beq.n	801533c <rmw_wait+0x224>
 80152c2:	6834      	ldr	r4, [r6, #0]
 80152c4:	2c00      	cmp	r4, #0
 80152c6:	d039      	beq.n	801533c <rmw_wait+0x224>
 80152c8:	2701      	movs	r7, #1
 80152ca:	e023      	b.n	8015314 <rmw_wait+0x1fc>
 80152cc:	68a0      	ldr	r0, [r4, #8]
 80152ce:	2100      	movs	r1, #0
 80152d0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80152d4:	f001 fc6e 	bl	8016bb4 <uxr_run_session_timeout>
 80152d8:	6864      	ldr	r4, [r4, #4]
 80152da:	2c00      	cmp	r4, #0
 80152dc:	d1f6      	bne.n	80152cc <rmw_wait+0x1b4>
 80152de:	e7b0      	b.n	8015242 <rmw_wait+0x12a>
 80152e0:	e9d9 3200 	ldrd	r3, r2, [r9]
 80152e4:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80152e8:	3401      	adds	r4, #1
 80152ea:	42a3      	cmp	r3, r4
 80152ec:	d8b4      	bhi.n	8015258 <rmw_wait+0x140>
 80152ee:	e7c2      	b.n	8015276 <rmw_wait+0x15e>
 80152f0:	e9d8 3200 	ldrd	r3, r2, [r8]
 80152f4:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80152f8:	3401      	adds	r4, #1
 80152fa:	429c      	cmp	r4, r3
 80152fc:	d3c2      	bcc.n	8015284 <rmw_wait+0x16c>
 80152fe:	e7ce      	b.n	801529e <rmw_wait+0x186>
 8015300:	e9d5 3200 	ldrd	r3, r2, [r5]
 8015304:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8015308:	3401      	adds	r4, #1
 801530a:	42a3      	cmp	r3, r4
 801530c:	d8cc      	bhi.n	80152a8 <rmw_wait+0x190>
 801530e:	b1a6      	cbz	r6, 801533a <rmw_wait+0x222>
 8015310:	6834      	ldr	r4, [r6, #0]
 8015312:	b194      	cbz	r4, 801533a <rmw_wait+0x222>
 8015314:	2300      	movs	r3, #0
 8015316:	461d      	mov	r5, r3
 8015318:	e004      	b.n	8015324 <rmw_wait+0x20c>
 801531a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 801531e:	3301      	adds	r3, #1
 8015320:	42a3      	cmp	r3, r4
 8015322:	d00a      	beq.n	801533a <rmw_wait+0x222>
 8015324:	6870      	ldr	r0, [r6, #4]
 8015326:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 801532a:	7c0a      	ldrb	r2, [r1, #16]
 801532c:	2a00      	cmp	r2, #0
 801532e:	d0f4      	beq.n	801531a <rmw_wait+0x202>
 8015330:	3301      	adds	r3, #1
 8015332:	4617      	mov	r7, r2
 8015334:	740d      	strb	r5, [r1, #16]
 8015336:	42a3      	cmp	r3, r4
 8015338:	d1f4      	bne.n	8015324 <rmw_wait+0x20c>
 801533a:	b147      	cbz	r7, 801534e <rmw_wait+0x236>
 801533c:	2000      	movs	r0, #0
 801533e:	b009      	add	sp, #36	; 0x24
 8015340:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015344:	b11e      	cbz	r6, 801534e <rmw_wait+0x236>
 8015346:	6834      	ldr	r4, [r6, #0]
 8015348:	462f      	mov	r7, r5
 801534a:	2c00      	cmp	r4, #0
 801534c:	d1e2      	bne.n	8015314 <rmw_wait+0x1fc>
 801534e:	2002      	movs	r0, #2
 8015350:	b009      	add	sp, #36	; 0x24
 8015352:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015356:	4639      	mov	r1, r7
 8015358:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801535c:	f001 fc44 	bl	8016be8 <uxr_run_session_until_data>
 8015360:	6864      	ldr	r4, [r4, #4]
 8015362:	2c00      	cmp	r4, #0
 8015364:	f47f af62 	bne.w	801522c <rmw_wait+0x114>
 8015368:	e76b      	b.n	8015242 <rmw_wait+0x12a>
 801536a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801536e:	f004 fbe3 	bl	8019b38 <rmw_time_total_nsec>
 8015372:	2300      	movs	r3, #0
 8015374:	4a19      	ldr	r2, [pc, #100]	; (80153dc <rmw_wait+0x2c4>)
 8015376:	f7eb f81b 	bl	80003b0 <__aeabi_uldivmod>
 801537a:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 801537e:	4607      	mov	r7, r0
 8015380:	f171 0300 	sbcs.w	r3, r1, #0
 8015384:	bfa8      	it	ge
 8015386:	f06f 4700 	mvnge.w	r7, #2147483648	; 0x80000000
 801538a:	e6e5      	b.n	8015158 <rmw_wait+0x40>
 801538c:	f1b8 0f00 	cmp.w	r8, #0
 8015390:	d00f      	beq.n	80153b2 <rmw_wait+0x29a>
 8015392:	f8d8 3000 	ldr.w	r3, [r8]
 8015396:	b193      	cbz	r3, 80153be <rmw_wait+0x2a6>
 8015398:	464f      	mov	r7, r9
 801539a:	e772      	b.n	8015282 <rmw_wait+0x16a>
 801539c:	f1b8 0f00 	cmp.w	r8, #0
 80153a0:	d007      	beq.n	80153b2 <rmw_wait+0x29a>
 80153a2:	f8d8 3000 	ldr.w	r3, [r8]
 80153a6:	2b00      	cmp	r3, #0
 80153a8:	f47f af6b 	bne.w	8015282 <rmw_wait+0x16a>
 80153ac:	b155      	cbz	r5, 80153c4 <rmw_wait+0x2ac>
 80153ae:	461f      	mov	r7, r3
 80153b0:	e777      	b.n	80152a2 <rmw_wait+0x18a>
 80153b2:	2d00      	cmp	r5, #0
 80153b4:	d0c6      	beq.n	8015344 <rmw_wait+0x22c>
 80153b6:	682b      	ldr	r3, [r5, #0]
 80153b8:	b143      	cbz	r3, 80153cc <rmw_wait+0x2b4>
 80153ba:	4647      	mov	r7, r8
 80153bc:	e773      	b.n	80152a6 <rmw_wait+0x18e>
 80153be:	b10d      	cbz	r5, 80153c4 <rmw_wait+0x2ac>
 80153c0:	464f      	mov	r7, r9
 80153c2:	e76e      	b.n	80152a2 <rmw_wait+0x18a>
 80153c4:	462f      	mov	r7, r5
 80153c6:	2e00      	cmp	r6, #0
 80153c8:	d1a2      	bne.n	8015310 <rmw_wait+0x1f8>
 80153ca:	e7c0      	b.n	801534e <rmw_wait+0x236>
 80153cc:	4647      	mov	r7, r8
 80153ce:	2e00      	cmp	r6, #0
 80153d0:	d19e      	bne.n	8015310 <rmw_wait+0x1f8>
 80153d2:	e7bc      	b.n	801534e <rmw_wait+0x236>
 80153d4:	0801c418 	.word	0x0801c418
 80153d8:	20010934 	.word	0x20010934
 80153dc:	000f4240 	.word	0x000f4240

080153e0 <rmw_create_wait_set>:
 80153e0:	b508      	push	{r3, lr}
 80153e2:	4803      	ldr	r0, [pc, #12]	; (80153f0 <rmw_create_wait_set+0x10>)
 80153e4:	f004 fcc2 	bl	8019d6c <get_memory>
 80153e8:	b108      	cbz	r0, 80153ee <rmw_create_wait_set+0xe>
 80153ea:	6880      	ldr	r0, [r0, #8]
 80153ec:	3010      	adds	r0, #16
 80153ee:	bd08      	pop	{r3, pc}
 80153f0:	20010974 	.word	0x20010974

080153f4 <rmw_destroy_wait_set>:
 80153f4:	b508      	push	{r3, lr}
 80153f6:	4b08      	ldr	r3, [pc, #32]	; (8015418 <rmw_destroy_wait_set+0x24>)
 80153f8:	6819      	ldr	r1, [r3, #0]
 80153fa:	b911      	cbnz	r1, 8015402 <rmw_destroy_wait_set+0xe>
 80153fc:	e00a      	b.n	8015414 <rmw_destroy_wait_set+0x20>
 80153fe:	6849      	ldr	r1, [r1, #4]
 8015400:	b141      	cbz	r1, 8015414 <rmw_destroy_wait_set+0x20>
 8015402:	688b      	ldr	r3, [r1, #8]
 8015404:	3310      	adds	r3, #16
 8015406:	4298      	cmp	r0, r3
 8015408:	d1f9      	bne.n	80153fe <rmw_destroy_wait_set+0xa>
 801540a:	4803      	ldr	r0, [pc, #12]	; (8015418 <rmw_destroy_wait_set+0x24>)
 801540c:	f004 fcbe 	bl	8019d8c <put_memory>
 8015410:	2000      	movs	r0, #0
 8015412:	bd08      	pop	{r3, pc}
 8015414:	2001      	movs	r0, #1
 8015416:	bd08      	pop	{r3, pc}
 8015418:	20010974 	.word	0x20010974

0801541c <rmw_uxrce_init_service_memory>:
 801541c:	b1e2      	cbz	r2, 8015458 <rmw_uxrce_init_service_memory+0x3c>
 801541e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015422:	7b05      	ldrb	r5, [r0, #12]
 8015424:	4606      	mov	r6, r0
 8015426:	b9ad      	cbnz	r5, 8015454 <rmw_uxrce_init_service_memory+0x38>
 8015428:	23c8      	movs	r3, #200	; 0xc8
 801542a:	4617      	mov	r7, r2
 801542c:	460c      	mov	r4, r1
 801542e:	46a8      	mov	r8, r5
 8015430:	6083      	str	r3, [r0, #8]
 8015432:	f240 1301 	movw	r3, #257	; 0x101
 8015436:	e9c0 5500 	strd	r5, r5, [r0]
 801543a:	8183      	strh	r3, [r0, #12]
 801543c:	3501      	adds	r5, #1
 801543e:	4621      	mov	r1, r4
 8015440:	4630      	mov	r0, r6
 8015442:	f004 fca3 	bl	8019d8c <put_memory>
 8015446:	42af      	cmp	r7, r5
 8015448:	60a4      	str	r4, [r4, #8]
 801544a:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 801544e:	f804 8cbc 	strb.w	r8, [r4, #-188]
 8015452:	d1f3      	bne.n	801543c <rmw_uxrce_init_service_memory+0x20>
 8015454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015458:	4770      	bx	lr
 801545a:	bf00      	nop

0801545c <rmw_uxrce_init_client_memory>:
 801545c:	b1e2      	cbz	r2, 8015498 <rmw_uxrce_init_client_memory+0x3c>
 801545e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015462:	7b05      	ldrb	r5, [r0, #12]
 8015464:	4606      	mov	r6, r0
 8015466:	b9ad      	cbnz	r5, 8015494 <rmw_uxrce_init_client_memory+0x38>
 8015468:	23c8      	movs	r3, #200	; 0xc8
 801546a:	4617      	mov	r7, r2
 801546c:	460c      	mov	r4, r1
 801546e:	46a8      	mov	r8, r5
 8015470:	6083      	str	r3, [r0, #8]
 8015472:	f240 1301 	movw	r3, #257	; 0x101
 8015476:	e9c0 5500 	strd	r5, r5, [r0]
 801547a:	8183      	strh	r3, [r0, #12]
 801547c:	3501      	adds	r5, #1
 801547e:	4621      	mov	r1, r4
 8015480:	4630      	mov	r0, r6
 8015482:	f004 fc83 	bl	8019d8c <put_memory>
 8015486:	42af      	cmp	r7, r5
 8015488:	60a4      	str	r4, [r4, #8]
 801548a:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 801548e:	f804 8cbc 	strb.w	r8, [r4, #-188]
 8015492:	d1f3      	bne.n	801547c <rmw_uxrce_init_client_memory+0x20>
 8015494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015498:	4770      	bx	lr
 801549a:	bf00      	nop

0801549c <rmw_uxrce_init_publisher_memory>:
 801549c:	b1e2      	cbz	r2, 80154d8 <rmw_uxrce_init_publisher_memory+0x3c>
 801549e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80154a2:	7b05      	ldrb	r5, [r0, #12]
 80154a4:	4606      	mov	r6, r0
 80154a6:	b9ad      	cbnz	r5, 80154d4 <rmw_uxrce_init_publisher_memory+0x38>
 80154a8:	23d8      	movs	r3, #216	; 0xd8
 80154aa:	4617      	mov	r7, r2
 80154ac:	460c      	mov	r4, r1
 80154ae:	46a8      	mov	r8, r5
 80154b0:	6083      	str	r3, [r0, #8]
 80154b2:	f240 1301 	movw	r3, #257	; 0x101
 80154b6:	e9c0 5500 	strd	r5, r5, [r0]
 80154ba:	8183      	strh	r3, [r0, #12]
 80154bc:	3501      	adds	r5, #1
 80154be:	4621      	mov	r1, r4
 80154c0:	4630      	mov	r0, r6
 80154c2:	f004 fc63 	bl	8019d8c <put_memory>
 80154c6:	42af      	cmp	r7, r5
 80154c8:	60a4      	str	r4, [r4, #8]
 80154ca:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 80154ce:	f804 8ccc 	strb.w	r8, [r4, #-204]
 80154d2:	d1f3      	bne.n	80154bc <rmw_uxrce_init_publisher_memory+0x20>
 80154d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80154d8:	4770      	bx	lr
 80154da:	bf00      	nop

080154dc <rmw_uxrce_init_subscription_memory>:
 80154dc:	b1e2      	cbz	r2, 8015518 <rmw_uxrce_init_subscription_memory+0x3c>
 80154de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80154e2:	7b05      	ldrb	r5, [r0, #12]
 80154e4:	4606      	mov	r6, r0
 80154e6:	b9ad      	cbnz	r5, 8015514 <rmw_uxrce_init_subscription_memory+0x38>
 80154e8:	23d8      	movs	r3, #216	; 0xd8
 80154ea:	4617      	mov	r7, r2
 80154ec:	460c      	mov	r4, r1
 80154ee:	46a8      	mov	r8, r5
 80154f0:	6083      	str	r3, [r0, #8]
 80154f2:	f240 1301 	movw	r3, #257	; 0x101
 80154f6:	e9c0 5500 	strd	r5, r5, [r0]
 80154fa:	8183      	strh	r3, [r0, #12]
 80154fc:	3501      	adds	r5, #1
 80154fe:	4621      	mov	r1, r4
 8015500:	4630      	mov	r0, r6
 8015502:	f004 fc43 	bl	8019d8c <put_memory>
 8015506:	42af      	cmp	r7, r5
 8015508:	60a4      	str	r4, [r4, #8]
 801550a:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 801550e:	f804 8ccc 	strb.w	r8, [r4, #-204]
 8015512:	d1f3      	bne.n	80154fc <rmw_uxrce_init_subscription_memory+0x20>
 8015514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015518:	4770      	bx	lr
 801551a:	bf00      	nop

0801551c <rmw_uxrce_init_node_memory>:
 801551c:	b1e2      	cbz	r2, 8015558 <rmw_uxrce_init_node_memory+0x3c>
 801551e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015522:	7b05      	ldrb	r5, [r0, #12]
 8015524:	4606      	mov	r6, r0
 8015526:	b9ad      	cbnz	r5, 8015554 <rmw_uxrce_init_node_memory+0x38>
 8015528:	23a4      	movs	r3, #164	; 0xa4
 801552a:	4617      	mov	r7, r2
 801552c:	460c      	mov	r4, r1
 801552e:	46a8      	mov	r8, r5
 8015530:	6083      	str	r3, [r0, #8]
 8015532:	f240 1301 	movw	r3, #257	; 0x101
 8015536:	e9c0 5500 	strd	r5, r5, [r0]
 801553a:	8183      	strh	r3, [r0, #12]
 801553c:	3501      	adds	r5, #1
 801553e:	4621      	mov	r1, r4
 8015540:	4630      	mov	r0, r6
 8015542:	f004 fc23 	bl	8019d8c <put_memory>
 8015546:	42af      	cmp	r7, r5
 8015548:	60a4      	str	r4, [r4, #8]
 801554a:	f104 04a4 	add.w	r4, r4, #164	; 0xa4
 801554e:	f804 8c98 	strb.w	r8, [r4, #-152]
 8015552:	d1f3      	bne.n	801553c <rmw_uxrce_init_node_memory+0x20>
 8015554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015558:	4770      	bx	lr
 801555a:	bf00      	nop

0801555c <rmw_uxrce_init_session_memory>:
 801555c:	b1ea      	cbz	r2, 801559a <rmw_uxrce_init_session_memory+0x3e>
 801555e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015562:	7b05      	ldrb	r5, [r0, #12]
 8015564:	4606      	mov	r6, r0
 8015566:	b9b5      	cbnz	r5, 8015596 <rmw_uxrce_init_session_memory+0x3a>
 8015568:	f241 58a8 	movw	r8, #5544	; 0x15a8
 801556c:	f240 1301 	movw	r3, #257	; 0x101
 8015570:	4617      	mov	r7, r2
 8015572:	460c      	mov	r4, r1
 8015574:	46a9      	mov	r9, r5
 8015576:	f8c0 8008 	str.w	r8, [r0, #8]
 801557a:	8183      	strh	r3, [r0, #12]
 801557c:	e9c0 5500 	strd	r5, r5, [r0]
 8015580:	3501      	adds	r5, #1
 8015582:	4621      	mov	r1, r4
 8015584:	4630      	mov	r0, r6
 8015586:	f004 fc01 	bl	8019d8c <put_memory>
 801558a:	42af      	cmp	r7, r5
 801558c:	60a4      	str	r4, [r4, #8]
 801558e:	f884 900c 	strb.w	r9, [r4, #12]
 8015592:	4444      	add	r4, r8
 8015594:	d1f4      	bne.n	8015580 <rmw_uxrce_init_session_memory+0x24>
 8015596:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801559a:	4770      	bx	lr

0801559c <rmw_uxrce_init_topic_memory>:
 801559c:	b1e2      	cbz	r2, 80155d8 <rmw_uxrce_init_topic_memory+0x3c>
 801559e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80155a2:	7b05      	ldrb	r5, [r0, #12]
 80155a4:	4606      	mov	r6, r0
 80155a6:	b9ad      	cbnz	r5, 80155d4 <rmw_uxrce_init_topic_memory+0x38>
 80155a8:	231c      	movs	r3, #28
 80155aa:	4617      	mov	r7, r2
 80155ac:	460c      	mov	r4, r1
 80155ae:	46a8      	mov	r8, r5
 80155b0:	6083      	str	r3, [r0, #8]
 80155b2:	f240 1301 	movw	r3, #257	; 0x101
 80155b6:	e9c0 5500 	strd	r5, r5, [r0]
 80155ba:	8183      	strh	r3, [r0, #12]
 80155bc:	3501      	adds	r5, #1
 80155be:	4621      	mov	r1, r4
 80155c0:	4630      	mov	r0, r6
 80155c2:	f004 fbe3 	bl	8019d8c <put_memory>
 80155c6:	42af      	cmp	r7, r5
 80155c8:	60a4      	str	r4, [r4, #8]
 80155ca:	f104 041c 	add.w	r4, r4, #28
 80155ce:	f804 8c10 	strb.w	r8, [r4, #-16]
 80155d2:	d1f3      	bne.n	80155bc <rmw_uxrce_init_topic_memory+0x20>
 80155d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80155d8:	4770      	bx	lr
 80155da:	bf00      	nop

080155dc <rmw_uxrce_init_static_input_buffer_memory>:
 80155dc:	b1ea      	cbz	r2, 801561a <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 80155de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80155e2:	7b05      	ldrb	r5, [r0, #12]
 80155e4:	4606      	mov	r6, r0
 80155e6:	b9b5      	cbnz	r5, 8015616 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 80155e8:	f44f 6304 	mov.w	r3, #2112	; 0x840
 80155ec:	4617      	mov	r7, r2
 80155ee:	460c      	mov	r4, r1
 80155f0:	46a8      	mov	r8, r5
 80155f2:	6083      	str	r3, [r0, #8]
 80155f4:	f240 1301 	movw	r3, #257	; 0x101
 80155f8:	e9c0 5500 	strd	r5, r5, [r0]
 80155fc:	8183      	strh	r3, [r0, #12]
 80155fe:	3501      	adds	r5, #1
 8015600:	4621      	mov	r1, r4
 8015602:	4630      	mov	r0, r6
 8015604:	f004 fbc2 	bl	8019d8c <put_memory>
 8015608:	42af      	cmp	r7, r5
 801560a:	60a4      	str	r4, [r4, #8]
 801560c:	f884 800c 	strb.w	r8, [r4, #12]
 8015610:	f504 6404 	add.w	r4, r4, #2112	; 0x840
 8015614:	d1f3      	bne.n	80155fe <rmw_uxrce_init_static_input_buffer_memory+0x22>
 8015616:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801561a:	4770      	bx	lr

0801561c <rmw_uxrce_init_init_options_impl_memory>:
 801561c:	b1e2      	cbz	r2, 8015658 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 801561e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015622:	7b05      	ldrb	r5, [r0, #12]
 8015624:	4606      	mov	r6, r0
 8015626:	b9ad      	cbnz	r5, 8015654 <rmw_uxrce_init_init_options_impl_memory+0x38>
 8015628:	232c      	movs	r3, #44	; 0x2c
 801562a:	4617      	mov	r7, r2
 801562c:	460c      	mov	r4, r1
 801562e:	46a8      	mov	r8, r5
 8015630:	6083      	str	r3, [r0, #8]
 8015632:	f240 1301 	movw	r3, #257	; 0x101
 8015636:	e9c0 5500 	strd	r5, r5, [r0]
 801563a:	8183      	strh	r3, [r0, #12]
 801563c:	3501      	adds	r5, #1
 801563e:	4621      	mov	r1, r4
 8015640:	4630      	mov	r0, r6
 8015642:	f004 fba3 	bl	8019d8c <put_memory>
 8015646:	42af      	cmp	r7, r5
 8015648:	60a4      	str	r4, [r4, #8]
 801564a:	f104 042c 	add.w	r4, r4, #44	; 0x2c
 801564e:	f804 8c20 	strb.w	r8, [r4, #-32]
 8015652:	d1f3      	bne.n	801563c <rmw_uxrce_init_init_options_impl_memory+0x20>
 8015654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015658:	4770      	bx	lr
 801565a:	bf00      	nop

0801565c <rmw_uxrce_init_wait_set_memory>:
 801565c:	b1e2      	cbz	r2, 8015698 <rmw_uxrce_init_wait_set_memory+0x3c>
 801565e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015662:	7b05      	ldrb	r5, [r0, #12]
 8015664:	4606      	mov	r6, r0
 8015666:	b9ad      	cbnz	r5, 8015694 <rmw_uxrce_init_wait_set_memory+0x38>
 8015668:	231c      	movs	r3, #28
 801566a:	4617      	mov	r7, r2
 801566c:	460c      	mov	r4, r1
 801566e:	46a8      	mov	r8, r5
 8015670:	6083      	str	r3, [r0, #8]
 8015672:	f240 1301 	movw	r3, #257	; 0x101
 8015676:	e9c0 5500 	strd	r5, r5, [r0]
 801567a:	8183      	strh	r3, [r0, #12]
 801567c:	3501      	adds	r5, #1
 801567e:	4621      	mov	r1, r4
 8015680:	4630      	mov	r0, r6
 8015682:	f004 fb83 	bl	8019d8c <put_memory>
 8015686:	42af      	cmp	r7, r5
 8015688:	60a4      	str	r4, [r4, #8]
 801568a:	f104 041c 	add.w	r4, r4, #28
 801568e:	f804 8c10 	strb.w	r8, [r4, #-16]
 8015692:	d1f3      	bne.n	801567c <rmw_uxrce_init_wait_set_memory+0x20>
 8015694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015698:	4770      	bx	lr
 801569a:	bf00      	nop

0801569c <rmw_uxrce_init_guard_condition_memory>:
 801569c:	b1e2      	cbz	r2, 80156d8 <rmw_uxrce_init_guard_condition_memory+0x3c>
 801569e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80156a2:	7b05      	ldrb	r5, [r0, #12]
 80156a4:	4606      	mov	r6, r0
 80156a6:	b9ad      	cbnz	r5, 80156d4 <rmw_uxrce_init_guard_condition_memory+0x38>
 80156a8:	2320      	movs	r3, #32
 80156aa:	4617      	mov	r7, r2
 80156ac:	460c      	mov	r4, r1
 80156ae:	46a8      	mov	r8, r5
 80156b0:	6083      	str	r3, [r0, #8]
 80156b2:	f240 1301 	movw	r3, #257	; 0x101
 80156b6:	e9c0 5500 	strd	r5, r5, [r0]
 80156ba:	8183      	strh	r3, [r0, #12]
 80156bc:	3501      	adds	r5, #1
 80156be:	4621      	mov	r1, r4
 80156c0:	4630      	mov	r0, r6
 80156c2:	f004 fb63 	bl	8019d8c <put_memory>
 80156c6:	42af      	cmp	r7, r5
 80156c8:	60a4      	str	r4, [r4, #8]
 80156ca:	f104 0420 	add.w	r4, r4, #32
 80156ce:	f804 8c14 	strb.w	r8, [r4, #-20]
 80156d2:	d1f3      	bne.n	80156bc <rmw_uxrce_init_guard_condition_memory+0x20>
 80156d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80156d8:	4770      	bx	lr
 80156da:	bf00      	nop

080156dc <rmw_uxrce_fini_session_memory>:
 80156dc:	4601      	mov	r1, r0
 80156de:	4801      	ldr	r0, [pc, #4]	; (80156e4 <rmw_uxrce_fini_session_memory+0x8>)
 80156e0:	f004 bb54 	b.w	8019d8c <put_memory>
 80156e4:	20010934 	.word	0x20010934

080156e8 <rmw_uxrce_fini_node_memory>:
 80156e8:	b538      	push	{r3, r4, r5, lr}
 80156ea:	4604      	mov	r4, r0
 80156ec:	6800      	ldr	r0, [r0, #0]
 80156ee:	b128      	cbz	r0, 80156fc <rmw_uxrce_fini_node_memory+0x14>
 80156f0:	4b07      	ldr	r3, [pc, #28]	; (8015710 <rmw_uxrce_fini_node_memory+0x28>)
 80156f2:	6819      	ldr	r1, [r3, #0]
 80156f4:	f7ea fda4 	bl	8000240 <strcmp>
 80156f8:	b940      	cbnz	r0, 801570c <rmw_uxrce_fini_node_memory+0x24>
 80156fa:	6020      	str	r0, [r4, #0]
 80156fc:	6861      	ldr	r1, [r4, #4]
 80156fe:	b129      	cbz	r1, 801570c <rmw_uxrce_fini_node_memory+0x24>
 8015700:	2500      	movs	r5, #0
 8015702:	4804      	ldr	r0, [pc, #16]	; (8015714 <rmw_uxrce_fini_node_memory+0x2c>)
 8015704:	610d      	str	r5, [r1, #16]
 8015706:	f004 fb41 	bl	8019d8c <put_memory>
 801570a:	6065      	str	r5, [r4, #4]
 801570c:	bd38      	pop	{r3, r4, r5, pc}
 801570e:	bf00      	nop
 8015710:	0801dc70 	.word	0x0801dc70
 8015714:	20010904 	.word	0x20010904

08015718 <rmw_uxrce_fini_publisher_memory>:
 8015718:	b510      	push	{r4, lr}
 801571a:	4604      	mov	r4, r0
 801571c:	6800      	ldr	r0, [r0, #0]
 801571e:	b128      	cbz	r0, 801572c <rmw_uxrce_fini_publisher_memory+0x14>
 8015720:	4b06      	ldr	r3, [pc, #24]	; (801573c <rmw_uxrce_fini_publisher_memory+0x24>)
 8015722:	6819      	ldr	r1, [r3, #0]
 8015724:	f7ea fd8c 	bl	8000240 <strcmp>
 8015728:	b938      	cbnz	r0, 801573a <rmw_uxrce_fini_publisher_memory+0x22>
 801572a:	6020      	str	r0, [r4, #0]
 801572c:	6861      	ldr	r1, [r4, #4]
 801572e:	b121      	cbz	r1, 801573a <rmw_uxrce_fini_publisher_memory+0x22>
 8015730:	4803      	ldr	r0, [pc, #12]	; (8015740 <rmw_uxrce_fini_publisher_memory+0x28>)
 8015732:	f004 fb2b 	bl	8019d8c <put_memory>
 8015736:	2300      	movs	r3, #0
 8015738:	6063      	str	r3, [r4, #4]
 801573a:	bd10      	pop	{r4, pc}
 801573c:	0801dc70 	.word	0x0801dc70
 8015740:	20010914 	.word	0x20010914

08015744 <rmw_uxrce_fini_subscription_memory>:
 8015744:	b510      	push	{r4, lr}
 8015746:	4604      	mov	r4, r0
 8015748:	6800      	ldr	r0, [r0, #0]
 801574a:	b128      	cbz	r0, 8015758 <rmw_uxrce_fini_subscription_memory+0x14>
 801574c:	4b06      	ldr	r3, [pc, #24]	; (8015768 <rmw_uxrce_fini_subscription_memory+0x24>)
 801574e:	6819      	ldr	r1, [r3, #0]
 8015750:	f7ea fd76 	bl	8000240 <strcmp>
 8015754:	b938      	cbnz	r0, 8015766 <rmw_uxrce_fini_subscription_memory+0x22>
 8015756:	6020      	str	r0, [r4, #0]
 8015758:	6861      	ldr	r1, [r4, #4]
 801575a:	b121      	cbz	r1, 8015766 <rmw_uxrce_fini_subscription_memory+0x22>
 801575c:	4803      	ldr	r0, [pc, #12]	; (801576c <rmw_uxrce_fini_subscription_memory+0x28>)
 801575e:	f004 fb15 	bl	8019d8c <put_memory>
 8015762:	2300      	movs	r3, #0
 8015764:	6063      	str	r3, [r4, #4]
 8015766:	bd10      	pop	{r4, pc}
 8015768:	0801dc70 	.word	0x0801dc70
 801576c:	20010954 	.word	0x20010954

08015770 <rmw_uxrce_fini_service_memory>:
 8015770:	b510      	push	{r4, lr}
 8015772:	4604      	mov	r4, r0
 8015774:	6800      	ldr	r0, [r0, #0]
 8015776:	b128      	cbz	r0, 8015784 <rmw_uxrce_fini_service_memory+0x14>
 8015778:	4b06      	ldr	r3, [pc, #24]	; (8015794 <rmw_uxrce_fini_service_memory+0x24>)
 801577a:	6819      	ldr	r1, [r3, #0]
 801577c:	f7ea fd60 	bl	8000240 <strcmp>
 8015780:	b938      	cbnz	r0, 8015792 <rmw_uxrce_fini_service_memory+0x22>
 8015782:	6020      	str	r0, [r4, #0]
 8015784:	6861      	ldr	r1, [r4, #4]
 8015786:	b121      	cbz	r1, 8015792 <rmw_uxrce_fini_service_memory+0x22>
 8015788:	4803      	ldr	r0, [pc, #12]	; (8015798 <rmw_uxrce_fini_service_memory+0x28>)
 801578a:	f004 faff 	bl	8019d8c <put_memory>
 801578e:	2300      	movs	r3, #0
 8015790:	6063      	str	r3, [r4, #4]
 8015792:	bd10      	pop	{r4, pc}
 8015794:	0801dc70 	.word	0x0801dc70
 8015798:	20010924 	.word	0x20010924

0801579c <rmw_uxrce_fini_client_memory>:
 801579c:	b510      	push	{r4, lr}
 801579e:	4604      	mov	r4, r0
 80157a0:	6800      	ldr	r0, [r0, #0]
 80157a2:	b128      	cbz	r0, 80157b0 <rmw_uxrce_fini_client_memory+0x14>
 80157a4:	4b06      	ldr	r3, [pc, #24]	; (80157c0 <rmw_uxrce_fini_client_memory+0x24>)
 80157a6:	6819      	ldr	r1, [r3, #0]
 80157a8:	f7ea fd4a 	bl	8000240 <strcmp>
 80157ac:	b938      	cbnz	r0, 80157be <rmw_uxrce_fini_client_memory+0x22>
 80157ae:	6020      	str	r0, [r4, #0]
 80157b0:	6861      	ldr	r1, [r4, #4]
 80157b2:	b121      	cbz	r1, 80157be <rmw_uxrce_fini_client_memory+0x22>
 80157b4:	4803      	ldr	r0, [pc, #12]	; (80157c4 <rmw_uxrce_fini_client_memory+0x28>)
 80157b6:	f004 fae9 	bl	8019d8c <put_memory>
 80157ba:	2300      	movs	r3, #0
 80157bc:	6063      	str	r3, [r4, #4]
 80157be:	bd10      	pop	{r4, pc}
 80157c0:	0801dc70 	.word	0x0801dc70
 80157c4:	2000bf70 	.word	0x2000bf70

080157c8 <rmw_uxrce_fini_topic_memory>:
 80157c8:	b510      	push	{r4, lr}
 80157ca:	4604      	mov	r4, r0
 80157cc:	4803      	ldr	r0, [pc, #12]	; (80157dc <rmw_uxrce_fini_topic_memory+0x14>)
 80157ce:	4621      	mov	r1, r4
 80157d0:	f004 fadc 	bl	8019d8c <put_memory>
 80157d4:	2300      	movs	r3, #0
 80157d6:	61a3      	str	r3, [r4, #24]
 80157d8:	bd10      	pop	{r4, pc}
 80157da:	bf00      	nop
 80157dc:	20010964 	.word	0x20010964

080157e0 <rmw_uxrce_get_static_input_buffer_for_entity>:
 80157e0:	b082      	sub	sp, #8
 80157e2:	492b      	ldr	r1, [pc, #172]	; (8015890 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 80157e4:	b530      	push	{r4, r5, lr}
 80157e6:	680d      	ldr	r5, [r1, #0]
 80157e8:	ac03      	add	r4, sp, #12
 80157ea:	e884 000c 	stmia.w	r4, {r2, r3}
 80157ee:	461c      	mov	r4, r3
 80157f0:	2d00      	cmp	r5, #0
 80157f2:	d04b      	beq.n	801588c <rmw_uxrce_get_static_input_buffer_for_entity+0xac>
 80157f4:	462b      	mov	r3, r5
 80157f6:	2100      	movs	r1, #0
 80157f8:	689a      	ldr	r2, [r3, #8]
 80157fa:	685b      	ldr	r3, [r3, #4]
 80157fc:	f8d2 2814 	ldr.w	r2, [r2, #2068]	; 0x814
 8015800:	4290      	cmp	r0, r2
 8015802:	bf08      	it	eq
 8015804:	3101      	addeq	r1, #1
 8015806:	2b00      	cmp	r3, #0
 8015808:	d1f6      	bne.n	80157f8 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 801580a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801580e:	2b02      	cmp	r3, #2
 8015810:	d029      	beq.n	8015866 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8015812:	d820      	bhi.n	8015856 <rmw_uxrce_get_static_input_buffer_for_entity+0x76>
 8015814:	428c      	cmp	r4, r1
 8015816:	d828      	bhi.n	801586a <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 8015818:	fab4 f284 	clz	r2, r4
 801581c:	0952      	lsrs	r2, r2, #5
 801581e:	b324      	cbz	r4, 801586a <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 8015820:	b1dd      	cbz	r5, 801585a <rmw_uxrce_get_static_input_buffer_for_entity+0x7a>
 8015822:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8015826:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 801582a:	e001      	b.n	8015830 <rmw_uxrce_get_static_input_buffer_for_entity+0x50>
 801582c:	686d      	ldr	r5, [r5, #4]
 801582e:	b1ad      	cbz	r5, 801585c <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 8015830:	68ab      	ldr	r3, [r5, #8]
 8015832:	f8d3 1814 	ldr.w	r1, [r3, #2068]	; 0x814
 8015836:	4288      	cmp	r0, r1
 8015838:	d1f8      	bne.n	801582c <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 801583a:	f8d3 1818 	ldr.w	r1, [r3, #2072]	; 0x818
 801583e:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 8015842:	4561      	cmp	r1, ip
 8015844:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8015848:	eb73 0e04 	sbcs.w	lr, r3, r4
 801584c:	daee      	bge.n	801582c <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 801584e:	468c      	mov	ip, r1
 8015850:	461c      	mov	r4, r3
 8015852:	462a      	mov	r2, r5
 8015854:	e7ea      	b.n	801582c <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8015856:	2b03      	cmp	r3, #3
 8015858:	d0dc      	beq.n	8015814 <rmw_uxrce_get_static_input_buffer_for_entity+0x34>
 801585a:	2200      	movs	r2, #0
 801585c:	4610      	mov	r0, r2
 801585e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015862:	b002      	add	sp, #8
 8015864:	4770      	bx	lr
 8015866:	428c      	cmp	r4, r1
 8015868:	d905      	bls.n	8015876 <rmw_uxrce_get_static_input_buffer_for_entity+0x96>
 801586a:	4809      	ldr	r0, [pc, #36]	; (8015890 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 801586c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015870:	b002      	add	sp, #8
 8015872:	f004 ba7b 	b.w	8019d6c <get_memory>
 8015876:	fab4 f284 	clz	r2, r4
 801587a:	0952      	lsrs	r2, r2, #5
 801587c:	2c00      	cmp	r4, #0
 801587e:	d1ed      	bne.n	801585c <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 8015880:	4803      	ldr	r0, [pc, #12]	; (8015890 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 8015882:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015886:	b002      	add	sp, #8
 8015888:	f004 ba70 	b.w	8019d6c <get_memory>
 801588c:	4629      	mov	r1, r5
 801588e:	e7bc      	b.n	801580a <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 8015890:	20010944 	.word	0x20010944

08015894 <rmw_uxrce_find_static_input_buffer_by_owner>:
 8015894:	4b12      	ldr	r3, [pc, #72]	; (80158e0 <rmw_uxrce_find_static_input_buffer_by_owner+0x4c>)
 8015896:	681b      	ldr	r3, [r3, #0]
 8015898:	b530      	push	{r4, r5, lr}
 801589a:	b1f3      	cbz	r3, 80158da <rmw_uxrce_find_static_input_buffer_by_owner+0x46>
 801589c:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 80158a0:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
 80158a4:	2400      	movs	r4, #0
 80158a6:	e001      	b.n	80158ac <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 80158a8:	685b      	ldr	r3, [r3, #4]
 80158aa:	b1a3      	cbz	r3, 80158d6 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 80158ac:	689a      	ldr	r2, [r3, #8]
 80158ae:	f8d2 1814 	ldr.w	r1, [r2, #2068]	; 0x814
 80158b2:	4288      	cmp	r0, r1
 80158b4:	d1f8      	bne.n	80158a8 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 80158b6:	f8d2 1818 	ldr.w	r1, [r2, #2072]	; 0x818
 80158ba:	f502 6202 	add.w	r2, r2, #2080	; 0x820
 80158be:	4571      	cmp	r1, lr
 80158c0:	f852 2c04 	ldr.w	r2, [r2, #-4]
 80158c4:	eb72 050c 	sbcs.w	r5, r2, ip
 80158c8:	daee      	bge.n	80158a8 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 80158ca:	461c      	mov	r4, r3
 80158cc:	685b      	ldr	r3, [r3, #4]
 80158ce:	468e      	mov	lr, r1
 80158d0:	4694      	mov	ip, r2
 80158d2:	2b00      	cmp	r3, #0
 80158d4:	d1ea      	bne.n	80158ac <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 80158d6:	4620      	mov	r0, r4
 80158d8:	bd30      	pop	{r4, r5, pc}
 80158da:	461c      	mov	r4, r3
 80158dc:	4620      	mov	r0, r4
 80158de:	bd30      	pop	{r4, r5, pc}
 80158e0:	20010944 	.word	0x20010944
 80158e4:	00000000 	.word	0x00000000

080158e8 <rmw_uxrce_clean_expired_static_input_buffer>:
 80158e8:	4b3d      	ldr	r3, [pc, #244]	; (80159e0 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 80158ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80158ee:	681f      	ldr	r7, [r3, #0]
 80158f0:	ed2d 8b06 	vpush	{d8-d10}
 80158f4:	b08d      	sub	sp, #52	; 0x34
 80158f6:	f004 fb0d 	bl	8019f14 <rmw_uros_epoch_nanos>
 80158fa:	2f00      	cmp	r7, #0
 80158fc:	d05d      	beq.n	80159ba <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 80158fe:	46b8      	mov	r8, r7
 8015900:	4681      	mov	r9, r0
 8015902:	468a      	mov	sl, r1
 8015904:	ac04      	add	r4, sp, #16
 8015906:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801590a:	f895 3820 	ldrb.w	r3, [r5, #2080]	; 0x820
 801590e:	2b04      	cmp	r3, #4
 8015910:	ed9f 8b2d 	vldr	d8, [pc, #180]	; 80159c8 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 8015914:	ed9f ab2e 	vldr	d10, [pc, #184]	; 80159d0 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 8015918:	ed9f 9b2f 	vldr	d9, [pc, #188]	; 80159d8 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 801591c:	d03f      	beq.n	801599e <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 801591e:	2b05      	cmp	r3, #5
 8015920:	d044      	beq.n	80159ac <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 8015922:	2b03      	cmp	r3, #3
 8015924:	d03b      	beq.n	801599e <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 8015926:	ed8d 8b04 	vstr	d8, [sp, #16]
 801592a:	ed8d ab06 	vstr	d10, [sp, #24]
 801592e:	ab08      	add	r3, sp, #32
 8015930:	ed8d 8b08 	vstr	d8, [sp, #32]
 8015934:	ed8d 8b0a 	vstr	d8, [sp, #40]	; 0x28
 8015938:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801593a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801593e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015942:	f004 f8a3 	bl	8019a8c <rmw_time_equal>
 8015946:	b118      	cbz	r0, 8015950 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 8015948:	ed8d 9b04 	vstr	d9, [sp, #16]
 801594c:	ed8d 8b06 	vstr	d8, [sp, #24]
 8015950:	f8d5 6818 	ldr.w	r6, [r5, #2072]	; 0x818
 8015954:	f505 6502 	add.w	r5, r5, #2080	; 0x820
 8015958:	f855 7c04 	ldr.w	r7, [r5, #-4]
 801595c:	f8d8 b004 	ldr.w	fp, [r8, #4]
 8015960:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015964:	f004 f8e8 	bl	8019b38 <rmw_time_total_nsec>
 8015968:	1830      	adds	r0, r6, r0
 801596a:	eb47 0101 	adc.w	r1, r7, r1
 801596e:	4548      	cmp	r0, r9
 8015970:	eb71 030a 	sbcs.w	r3, r1, sl
 8015974:	db05      	blt.n	8015982 <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 8015976:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 801597a:	4591      	cmp	r9, r2
 801597c:	eb7a 0303 	sbcs.w	r3, sl, r3
 8015980:	da03      	bge.n	801598a <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 8015982:	4641      	mov	r1, r8
 8015984:	4816      	ldr	r0, [pc, #88]	; (80159e0 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 8015986:	f004 fa01 	bl	8019d8c <put_memory>
 801598a:	f1bb 0f00 	cmp.w	fp, #0
 801598e:	d014      	beq.n	80159ba <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 8015990:	46d8      	mov	r8, fp
 8015992:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8015996:	f895 3820 	ldrb.w	r3, [r5, #2080]	; 0x820
 801599a:	2b04      	cmp	r3, #4
 801599c:	d1bf      	bne.n	801591e <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 801599e:	f8d5 3814 	ldr.w	r3, [r5, #2068]	; 0x814
 80159a2:	3340      	adds	r3, #64	; 0x40
 80159a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80159a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80159aa:	e7c0      	b.n	801592e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 80159ac:	f8d5 3814 	ldr.w	r3, [r5, #2068]	; 0x814
 80159b0:	3348      	adds	r3, #72	; 0x48
 80159b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80159b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80159b8:	e7b9      	b.n	801592e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 80159ba:	b00d      	add	sp, #52	; 0x34
 80159bc:	ecbd 8b06 	vpop	{d8-d10}
 80159c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80159c4:	f3af 8000 	nop.w
	...
 80159d0:	00000001 	.word	0x00000001
 80159d4:	00000000 	.word	0x00000000
 80159d8:	0000001e 	.word	0x0000001e
 80159dc:	00000000 	.word	0x00000000
 80159e0:	20010944 	.word	0x20010944

080159e4 <run_xrce_session>:
 80159e4:	b510      	push	{r4, lr}
 80159e6:	788c      	ldrb	r4, [r1, #2]
 80159e8:	b086      	sub	sp, #24
 80159ea:	2c01      	cmp	r4, #1
 80159ec:	f8ad 200e 	strh.w	r2, [sp, #14]
 80159f0:	d00c      	beq.n	8015a0c <run_xrce_session+0x28>
 80159f2:	2401      	movs	r4, #1
 80159f4:	4619      	mov	r1, r3
 80159f6:	f10d 020e 	add.w	r2, sp, #14
 80159fa:	f10d 0317 	add.w	r3, sp, #23
 80159fe:	9400      	str	r4, [sp, #0]
 8015a00:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015a04:	f001 f934 	bl	8016c70 <uxr_run_session_until_all_status>
 8015a08:	b006      	add	sp, #24
 8015a0a:	bd10      	pop	{r4, pc}
 8015a0c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015a10:	f000 fd50 	bl	80164b4 <uxr_flash_output_streams>
 8015a14:	4620      	mov	r0, r4
 8015a16:	b006      	add	sp, #24
 8015a18:	bd10      	pop	{r4, pc}
 8015a1a:	bf00      	nop

08015a1c <convert_qos_profile>:
 8015a1c:	7a4a      	ldrb	r2, [r1, #9]
 8015a1e:	f891 c008 	ldrb.w	ip, [r1, #8]
 8015a22:	2a02      	cmp	r2, #2
 8015a24:	bf18      	it	ne
 8015a26:	2200      	movne	r2, #0
 8015a28:	7002      	strb	r2, [r0, #0]
 8015a2a:	f1ac 0202 	sub.w	r2, ip, #2
 8015a2e:	fab2 f282 	clz	r2, r2
 8015a32:	0952      	lsrs	r2, r2, #5
 8015a34:	7042      	strb	r2, [r0, #1]
 8015a36:	780a      	ldrb	r2, [r1, #0]
 8015a38:	8889      	ldrh	r1, [r1, #4]
 8015a3a:	f1a2 0202 	sub.w	r2, r2, #2
 8015a3e:	8081      	strh	r1, [r0, #4]
 8015a40:	fab2 f282 	clz	r2, r2
 8015a44:	0952      	lsrs	r2, r2, #5
 8015a46:	7082      	strb	r2, [r0, #2]
 8015a48:	4770      	bx	lr
 8015a4a:	bf00      	nop

08015a4c <generate_service_topics>:
 8015a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015a4e:	461d      	mov	r5, r3
 8015a50:	b083      	sub	sp, #12
 8015a52:	4606      	mov	r6, r0
 8015a54:	4c11      	ldr	r4, [pc, #68]	; (8015a9c <generate_service_topics+0x50>)
 8015a56:	4608      	mov	r0, r1
 8015a58:	4b11      	ldr	r3, [pc, #68]	; (8015aa0 <generate_service_topics+0x54>)
 8015a5a:	4617      	mov	r7, r2
 8015a5c:	4629      	mov	r1, r5
 8015a5e:	4a11      	ldr	r2, [pc, #68]	; (8015aa4 <generate_service_topics+0x58>)
 8015a60:	9401      	str	r4, [sp, #4]
 8015a62:	9600      	str	r6, [sp, #0]
 8015a64:	f005 fbb4 	bl	801b1d0 <sniprintf>
 8015a68:	4a0f      	ldr	r2, [pc, #60]	; (8015aa8 <generate_service_topics+0x5c>)
 8015a6a:	4604      	mov	r4, r0
 8015a6c:	4b0f      	ldr	r3, [pc, #60]	; (8015aac <generate_service_topics+0x60>)
 8015a6e:	9201      	str	r2, [sp, #4]
 8015a70:	4638      	mov	r0, r7
 8015a72:	4a0c      	ldr	r2, [pc, #48]	; (8015aa4 <generate_service_topics+0x58>)
 8015a74:	4629      	mov	r1, r5
 8015a76:	9600      	str	r6, [sp, #0]
 8015a78:	f005 fbaa 	bl	801b1d0 <sniprintf>
 8015a7c:	2c00      	cmp	r4, #0
 8015a7e:	bfa8      	it	ge
 8015a80:	42a5      	cmpge	r5, r4
 8015a82:	bfcc      	ite	gt
 8015a84:	2401      	movgt	r4, #1
 8015a86:	2400      	movle	r4, #0
 8015a88:	dd05      	ble.n	8015a96 <generate_service_topics+0x4a>
 8015a8a:	2800      	cmp	r0, #0
 8015a8c:	bfa8      	it	ge
 8015a8e:	4285      	cmpge	r5, r0
 8015a90:	bfcc      	ite	gt
 8015a92:	2401      	movgt	r4, #1
 8015a94:	2400      	movle	r4, #0
 8015a96:	4620      	mov	r0, r4
 8015a98:	b003      	add	sp, #12
 8015a9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015a9c:	0801d830 	.word	0x0801d830
 8015aa0:	0801d82c 	.word	0x0801d82c
 8015aa4:	0801d810 	.word	0x0801d810
 8015aa8:	0801d824 	.word	0x0801d824
 8015aac:	0801d820 	.word	0x0801d820

08015ab0 <generate_service_types>:
 8015ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ab4:	4606      	mov	r6, r0
 8015ab6:	b087      	sub	sp, #28
 8015ab8:	461c      	mov	r4, r3
 8015aba:	6883      	ldr	r3, [r0, #8]
 8015abc:	460d      	mov	r5, r1
 8015abe:	4617      	mov	r7, r2
 8015ac0:	4798      	blx	r3
 8015ac2:	68f3      	ldr	r3, [r6, #12]
 8015ac4:	4606      	mov	r6, r0
 8015ac6:	4798      	blx	r3
 8015ac8:	2300      	movs	r3, #0
 8015aca:	f8d0 b004 	ldr.w	fp, [r0, #4]
 8015ace:	6872      	ldr	r2, [r6, #4]
 8015ad0:	702b      	strb	r3, [r5, #0]
 8015ad2:	6813      	ldr	r3, [r2, #0]
 8015ad4:	2b00      	cmp	r3, #0
 8015ad6:	d03f      	beq.n	8015b58 <generate_service_types+0xa8>
 8015ad8:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8015b6c <generate_service_types+0xbc>
 8015adc:	4649      	mov	r1, r9
 8015ade:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8015b74 <generate_service_types+0xc4>
 8015ae2:	4628      	mov	r0, r5
 8015ae4:	f8df a090 	ldr.w	sl, [pc, #144]	; 8015b78 <generate_service_types+0xc8>
 8015ae8:	f8cd 8014 	str.w	r8, [sp, #20]
 8015aec:	6852      	ldr	r2, [r2, #4]
 8015aee:	9100      	str	r1, [sp, #0]
 8015af0:	4621      	mov	r1, r4
 8015af2:	f8cd 8008 	str.w	r8, [sp, #8]
 8015af6:	f8cd a004 	str.w	sl, [sp, #4]
 8015afa:	e9cd 9203 	strd	r9, r2, [sp, #12]
 8015afe:	4a1a      	ldr	r2, [pc, #104]	; (8015b68 <generate_service_types+0xb8>)
 8015b00:	f005 fb66 	bl	801b1d0 <sniprintf>
 8015b04:	2300      	movs	r3, #0
 8015b06:	42a0      	cmp	r0, r4
 8015b08:	ea6f 0600 	mvn.w	r6, r0
 8015b0c:	703b      	strb	r3, [r7, #0]
 8015b0e:	f8db 3000 	ldr.w	r3, [fp]
 8015b12:	ea4f 76d6 	mov.w	r6, r6, lsr #31
 8015b16:	bfac      	ite	ge
 8015b18:	2500      	movge	r5, #0
 8015b1a:	2501      	movlt	r5, #1
 8015b1c:	b30b      	cbz	r3, 8015b62 <generate_service_types+0xb2>
 8015b1e:	4a13      	ldr	r2, [pc, #76]	; (8015b6c <generate_service_types+0xbc>)
 8015b20:	f8cd 8014 	str.w	r8, [sp, #20]
 8015b24:	402e      	ands	r6, r5
 8015b26:	f8db 1004 	ldr.w	r1, [fp, #4]
 8015b2a:	4638      	mov	r0, r7
 8015b2c:	9104      	str	r1, [sp, #16]
 8015b2e:	4621      	mov	r1, r4
 8015b30:	e9cd 2a00 	strd	r2, sl, [sp]
 8015b34:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8015b38:	4a0b      	ldr	r2, [pc, #44]	; (8015b68 <generate_service_types+0xb8>)
 8015b3a:	f005 fb49 	bl	801b1d0 <sniprintf>
 8015b3e:	2800      	cmp	r0, #0
 8015b40:	bfb4      	ite	lt
 8015b42:	2600      	movlt	r6, #0
 8015b44:	f006 0601 	andge.w	r6, r6, #1
 8015b48:	42a0      	cmp	r0, r4
 8015b4a:	bfac      	ite	ge
 8015b4c:	2000      	movge	r0, #0
 8015b4e:	f006 0001 	andlt.w	r0, r6, #1
 8015b52:	b007      	add	sp, #28
 8015b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b58:	4b05      	ldr	r3, [pc, #20]	; (8015b70 <generate_service_types+0xc0>)
 8015b5a:	f8df 9010 	ldr.w	r9, [pc, #16]	; 8015b6c <generate_service_types+0xbc>
 8015b5e:	4619      	mov	r1, r3
 8015b60:	e7bd      	b.n	8015ade <generate_service_types+0x2e>
 8015b62:	4b03      	ldr	r3, [pc, #12]	; (8015b70 <generate_service_types+0xc0>)
 8015b64:	461a      	mov	r2, r3
 8015b66:	e7db      	b.n	8015b20 <generate_service_types+0x70>
 8015b68:	0801d808 	.word	0x0801d808
 8015b6c:	0801d804 	.word	0x0801d804
 8015b70:	0801d5f4 	.word	0x0801d5f4
 8015b74:	0801d818 	.word	0x0801d818
 8015b78:	0801d81c 	.word	0x0801d81c

08015b7c <is_uxrce_rmw_identifier_valid>:
 8015b7c:	b510      	push	{r4, lr}
 8015b7e:	4604      	mov	r4, r0
 8015b80:	b140      	cbz	r0, 8015b94 <is_uxrce_rmw_identifier_valid+0x18>
 8015b82:	f7fe fbbd 	bl	8014300 <rmw_get_implementation_identifier>
 8015b86:	4601      	mov	r1, r0
 8015b88:	4620      	mov	r0, r4
 8015b8a:	f7ea fb59 	bl	8000240 <strcmp>
 8015b8e:	fab0 f080 	clz	r0, r0
 8015b92:	0940      	lsrs	r0, r0, #5
 8015b94:	bd10      	pop	{r4, pc}
 8015b96:	bf00      	nop

08015b98 <service_msgs__msg__ServiceEventInfo__get_type_hash>:
 8015b98:	4800      	ldr	r0, [pc, #0]	; (8015b9c <service_msgs__msg__ServiceEventInfo__get_type_hash+0x4>)
 8015b9a:	4770      	bx	lr
 8015b9c:	20001a9c 	.word	0x20001a9c

08015ba0 <service_msgs__msg__ServiceEventInfo__get_type_description>:
 8015ba0:	b510      	push	{r4, lr}
 8015ba2:	4c08      	ldr	r4, [pc, #32]	; (8015bc4 <service_msgs__msg__ServiceEventInfo__get_type_description+0x24>)
 8015ba4:	7820      	ldrb	r0, [r4, #0]
 8015ba6:	b108      	cbz	r0, 8015bac <service_msgs__msg__ServiceEventInfo__get_type_description+0xc>
 8015ba8:	4807      	ldr	r0, [pc, #28]	; (8015bc8 <service_msgs__msg__ServiceEventInfo__get_type_description+0x28>)
 8015baa:	bd10      	pop	{r4, pc}
 8015bac:	f000 f858 	bl	8015c60 <builtin_interfaces__msg__Time__get_type_description>
 8015bb0:	300c      	adds	r0, #12
 8015bb2:	4b06      	ldr	r3, [pc, #24]	; (8015bcc <service_msgs__msg__ServiceEventInfo__get_type_description+0x2c>)
 8015bb4:	c807      	ldmia	r0, {r0, r1, r2}
 8015bb6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8015bba:	2301      	movs	r3, #1
 8015bbc:	4802      	ldr	r0, [pc, #8]	; (8015bc8 <service_msgs__msg__ServiceEventInfo__get_type_description+0x28>)
 8015bbe:	7023      	strb	r3, [r4, #0]
 8015bc0:	bd10      	pop	{r4, pc}
 8015bc2:	bf00      	nop
 8015bc4:	20010985 	.word	0x20010985
 8015bc8:	0801d838 	.word	0x0801d838
 8015bcc:	20001c24 	.word	0x20001c24

08015bd0 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source>:
 8015bd0:	4800      	ldr	r0, [pc, #0]	; (8015bd4 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source+0x4>)
 8015bd2:	4770      	bx	lr
 8015bd4:	0801d85c 	.word	0x0801d85c

08015bd8 <service_msgs__msg__ServiceEventInfo__get_type_description_sources>:
 8015bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015bda:	4e0f      	ldr	r6, [pc, #60]	; (8015c18 <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0x40>)
 8015bdc:	7837      	ldrb	r7, [r6, #0]
 8015bde:	b10f      	cbz	r7, 8015be4 <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0xc>
 8015be0:	480e      	ldr	r0, [pc, #56]	; (8015c1c <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0x44>)
 8015be2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015be4:	4d0e      	ldr	r5, [pc, #56]	; (8015c20 <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0x48>)
 8015be6:	4c0f      	ldr	r4, [pc, #60]	; (8015c24 <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0x4c>)
 8015be8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015bea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015bec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015bee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015bf0:	682b      	ldr	r3, [r5, #0]
 8015bf2:	4638      	mov	r0, r7
 8015bf4:	f844 3b04 	str.w	r3, [r4], #4
 8015bf8:	f000 f83e 	bl	8015c78 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 8015bfc:	2301      	movs	r3, #1
 8015bfe:	4684      	mov	ip, r0
 8015c00:	7033      	strb	r3, [r6, #0]
 8015c02:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015c06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015c08:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015c0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015c0e:	f8dc 3000 	ldr.w	r3, [ip]
 8015c12:	4802      	ldr	r0, [pc, #8]	; (8015c1c <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0x44>)
 8015c14:	6023      	str	r3, [r4, #0]
 8015c16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015c18:	20010984 	.word	0x20010984
 8015c1c:	0801d880 	.word	0x0801d880
 8015c20:	0801d85c 	.word	0x0801d85c
 8015c24:	20010988 	.word	0x20010988

08015c28 <service_msgs__msg__ServiceEventInfo__init>:
 8015c28:	b538      	push	{r3, r4, r5, lr}
 8015c2a:	b138      	cbz	r0, 8015c3c <service_msgs__msg__ServiceEventInfo__init+0x14>
 8015c2c:	1d05      	adds	r5, r0, #4
 8015c2e:	4628      	mov	r0, r5
 8015c30:	f000 f842 	bl	8015cb8 <builtin_interfaces__msg__Time__init>
 8015c34:	4604      	mov	r4, r0
 8015c36:	b120      	cbz	r0, 8015c42 <service_msgs__msg__ServiceEventInfo__init+0x1a>
 8015c38:	4620      	mov	r0, r4
 8015c3a:	bd38      	pop	{r3, r4, r5, pc}
 8015c3c:	4604      	mov	r4, r0
 8015c3e:	4620      	mov	r0, r4
 8015c40:	bd38      	pop	{r3, r4, r5, pc}
 8015c42:	4628      	mov	r0, r5
 8015c44:	f000 f83c 	bl	8015cc0 <builtin_interfaces__msg__Time__fini>
 8015c48:	4620      	mov	r0, r4
 8015c4a:	bd38      	pop	{r3, r4, r5, pc}

08015c4c <service_msgs__msg__ServiceEventInfo__fini>:
 8015c4c:	b110      	cbz	r0, 8015c54 <service_msgs__msg__ServiceEventInfo__fini+0x8>
 8015c4e:	3004      	adds	r0, #4
 8015c50:	f000 b836 	b.w	8015cc0 <builtin_interfaces__msg__Time__fini>
 8015c54:	4770      	bx	lr
 8015c56:	bf00      	nop

08015c58 <builtin_interfaces__msg__Time__get_type_hash>:
 8015c58:	4800      	ldr	r0, [pc, #0]	; (8015c5c <builtin_interfaces__msg__Time__get_type_hash+0x4>)
 8015c5a:	4770      	bx	lr
 8015c5c:	20001fc0 	.word	0x20001fc0

08015c60 <builtin_interfaces__msg__Time__get_type_description>:
 8015c60:	4b03      	ldr	r3, [pc, #12]	; (8015c70 <builtin_interfaces__msg__Time__get_type_description+0x10>)
 8015c62:	781a      	ldrb	r2, [r3, #0]
 8015c64:	b90a      	cbnz	r2, 8015c6a <builtin_interfaces__msg__Time__get_type_description+0xa>
 8015c66:	2201      	movs	r2, #1
 8015c68:	701a      	strb	r2, [r3, #0]
 8015c6a:	4802      	ldr	r0, [pc, #8]	; (8015c74 <builtin_interfaces__msg__Time__get_type_description+0x14>)
 8015c6c:	4770      	bx	lr
 8015c6e:	bf00      	nop
 8015c70:	200109d1 	.word	0x200109d1
 8015c74:	0801d88c 	.word	0x0801d88c

08015c78 <builtin_interfaces__msg__Time__get_individual_type_description_source>:
 8015c78:	4800      	ldr	r0, [pc, #0]	; (8015c7c <builtin_interfaces__msg__Time__get_individual_type_description_source+0x4>)
 8015c7a:	4770      	bx	lr
 8015c7c:	0801d8b0 	.word	0x0801d8b0

08015c80 <builtin_interfaces__msg__Time__get_type_description_sources>:
 8015c80:	4b09      	ldr	r3, [pc, #36]	; (8015ca8 <builtin_interfaces__msg__Time__get_type_description_sources+0x28>)
 8015c82:	781a      	ldrb	r2, [r3, #0]
 8015c84:	b96a      	cbnz	r2, 8015ca2 <builtin_interfaces__msg__Time__get_type_description_sources+0x22>
 8015c86:	2201      	movs	r2, #1
 8015c88:	b430      	push	{r4, r5}
 8015c8a:	4d08      	ldr	r5, [pc, #32]	; (8015cac <builtin_interfaces__msg__Time__get_type_description_sources+0x2c>)
 8015c8c:	4c08      	ldr	r4, [pc, #32]	; (8015cb0 <builtin_interfaces__msg__Time__get_type_description_sources+0x30>)
 8015c8e:	701a      	strb	r2, [r3, #0]
 8015c90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015c92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015c94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015c96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015c98:	682b      	ldr	r3, [r5, #0]
 8015c9a:	4806      	ldr	r0, [pc, #24]	; (8015cb4 <builtin_interfaces__msg__Time__get_type_description_sources+0x34>)
 8015c9c:	6023      	str	r3, [r4, #0]
 8015c9e:	bc30      	pop	{r4, r5}
 8015ca0:	4770      	bx	lr
 8015ca2:	4804      	ldr	r0, [pc, #16]	; (8015cb4 <builtin_interfaces__msg__Time__get_type_description_sources+0x34>)
 8015ca4:	4770      	bx	lr
 8015ca6:	bf00      	nop
 8015ca8:	200109d0 	.word	0x200109d0
 8015cac:	0801d8b0 	.word	0x0801d8b0
 8015cb0:	200109d4 	.word	0x200109d4
 8015cb4:	0801d8d4 	.word	0x0801d8d4

08015cb8 <builtin_interfaces__msg__Time__init>:
 8015cb8:	3800      	subs	r0, #0
 8015cba:	bf18      	it	ne
 8015cbc:	2001      	movne	r0, #1
 8015cbe:	4770      	bx	lr

08015cc0 <builtin_interfaces__msg__Time__fini>:
 8015cc0:	4770      	bx	lr
 8015cc2:	bf00      	nop

08015cc4 <uxr_buffer_delete_entity>:
 8015cc4:	b510      	push	{r4, lr}
 8015cc6:	2300      	movs	r3, #0
 8015cc8:	b08e      	sub	sp, #56	; 0x38
 8015cca:	4604      	mov	r4, r0
 8015ccc:	9103      	str	r1, [sp, #12]
 8015cce:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8015cd2:	2303      	movs	r3, #3
 8015cd4:	2204      	movs	r2, #4
 8015cd6:	9300      	str	r3, [sp, #0]
 8015cd8:	ab06      	add	r3, sp, #24
 8015cda:	f001 f9f5 	bl	80170c8 <uxr_prepare_stream_to_write_submessage>
 8015cde:	b918      	cbnz	r0, 8015ce8 <uxr_buffer_delete_entity+0x24>
 8015ce0:	4604      	mov	r4, r0
 8015ce2:	4620      	mov	r0, r4
 8015ce4:	b00e      	add	sp, #56	; 0x38
 8015ce6:	bd10      	pop	{r4, pc}
 8015ce8:	9902      	ldr	r1, [sp, #8]
 8015cea:	aa05      	add	r2, sp, #20
 8015cec:	4620      	mov	r0, r4
 8015cee:	f001 fb27 	bl	8017340 <uxr_init_base_object_request>
 8015cf2:	4604      	mov	r4, r0
 8015cf4:	a905      	add	r1, sp, #20
 8015cf6:	a806      	add	r0, sp, #24
 8015cf8:	f002 ffea 	bl	8018cd0 <uxr_serialize_DELETE_Payload>
 8015cfc:	4620      	mov	r0, r4
 8015cfe:	b00e      	add	sp, #56	; 0x38
 8015d00:	bd10      	pop	{r4, pc}
 8015d02:	bf00      	nop

08015d04 <uxr_common_create_entity>:
 8015d04:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8015d08:	b510      	push	{r4, lr}
 8015d0a:	f1bc 0f01 	cmp.w	ip, #1
 8015d0e:	b08c      	sub	sp, #48	; 0x30
 8015d10:	4604      	mov	r4, r0
 8015d12:	9202      	str	r2, [sp, #8]
 8015d14:	bf0c      	ite	eq
 8015d16:	f003 0201 	andeq.w	r2, r3, #1
 8015d1a:	2200      	movne	r2, #0
 8015d1c:	330e      	adds	r3, #14
 8015d1e:	9103      	str	r1, [sp, #12]
 8015d20:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 8015d24:	441a      	add	r2, r3
 8015d26:	ab04      	add	r3, sp, #16
 8015d28:	9101      	str	r1, [sp, #4]
 8015d2a:	2101      	movs	r1, #1
 8015d2c:	b292      	uxth	r2, r2
 8015d2e:	9100      	str	r1, [sp, #0]
 8015d30:	9903      	ldr	r1, [sp, #12]
 8015d32:	f001 f9c9 	bl	80170c8 <uxr_prepare_stream_to_write_submessage>
 8015d36:	b918      	cbnz	r0, 8015d40 <uxr_common_create_entity+0x3c>
 8015d38:	4604      	mov	r4, r0
 8015d3a:	4620      	mov	r0, r4
 8015d3c:	b00c      	add	sp, #48	; 0x30
 8015d3e:	bd10      	pop	{r4, pc}
 8015d40:	9902      	ldr	r1, [sp, #8]
 8015d42:	4620      	mov	r0, r4
 8015d44:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015d46:	f001 fafb 	bl	8017340 <uxr_init_base_object_request>
 8015d4a:	4604      	mov	r4, r0
 8015d4c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015d4e:	a804      	add	r0, sp, #16
 8015d50:	f002 ff18 	bl	8018b84 <uxr_serialize_CREATE_Payload>
 8015d54:	4620      	mov	r0, r4
 8015d56:	b00c      	add	sp, #48	; 0x30
 8015d58:	bd10      	pop	{r4, pc}
 8015d5a:	bf00      	nop

08015d5c <uxr_buffer_create_participant_bin>:
 8015d5c:	b570      	push	{r4, r5, r6, lr}
 8015d5e:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 8015d62:	4605      	mov	r5, r0
 8015d64:	ac11      	add	r4, sp, #68	; 0x44
 8015d66:	f8ad 3254 	strh.w	r3, [sp, #596]	; 0x254
 8015d6a:	2303      	movs	r3, #3
 8015d6c:	f89d 626c 	ldrb.w	r6, [sp, #620]	; 0x26c
 8015d70:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8015d74:	7223      	strb	r3, [r4, #8]
 8015d76:	2300      	movs	r3, #0
 8015d78:	2201      	movs	r2, #1
 8015d7a:	f88d 3014 	strb.w	r3, [sp, #20]
 8015d7e:	9b9a      	ldr	r3, [sp, #616]	; 0x268
 8015d80:	7122      	strb	r2, [r4, #4]
 8015d82:	b1cb      	cbz	r3, 8015db8 <uxr_buffer_create_participant_bin+0x5c>
 8015d84:	f88d 201c 	strb.w	r2, [sp, #28]
 8015d88:	9308      	str	r3, [sp, #32]
 8015d8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015d8e:	a915      	add	r1, sp, #84	; 0x54
 8015d90:	a809      	add	r0, sp, #36	; 0x24
 8015d92:	f7f9 fe79 	bl	800fa88 <ucdr_init_buffer>
 8015d96:	a905      	add	r1, sp, #20
 8015d98:	a809      	add	r0, sp, #36	; 0x24
 8015d9a:	f002 fceb 	bl	8018774 <uxr_serialize_OBJK_DomainParticipant_Binary>
 8015d9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015da0:	9600      	str	r6, [sp, #0]
 8015da2:	4628      	mov	r0, r5
 8015da4:	9401      	str	r4, [sp, #4]
 8015da6:	60e3      	str	r3, [r4, #12]
 8015da8:	b29b      	uxth	r3, r3
 8015daa:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8015dae:	f7ff ffa9 	bl	8015d04 <uxr_common_create_entity>
 8015db2:	f50d 7d16 	add.w	sp, sp, #600	; 0x258
 8015db6:	bd70      	pop	{r4, r5, r6, pc}
 8015db8:	f88d 301c 	strb.w	r3, [sp, #28]
 8015dbc:	e7e5      	b.n	8015d8a <uxr_buffer_create_participant_bin+0x2e>
 8015dbe:	bf00      	nop

08015dc0 <uxr_buffer_create_replier_bin>:
 8015dc0:	b570      	push	{r4, r5, r6, lr}
 8015dc2:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 8015dc6:	4605      	mov	r5, r0
 8015dc8:	4618      	mov	r0, r3
 8015dca:	9105      	str	r1, [sp, #20]
 8015dcc:	a999      	add	r1, sp, #612	; 0x264
 8015dce:	f89d 6294 	ldrb.w	r6, [sp, #660]	; 0x294
 8015dd2:	ac15      	add	r4, sp, #84	; 0x54
 8015dd4:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8015dd8:	2308      	movs	r3, #8
 8015dda:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
 8015dde:	f000 f909 	bl	8015ff4 <uxr_object_id_to_raw>
 8015de2:	9b9e      	ldr	r3, [sp, #632]	; 0x278
 8015de4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015de8:	a919      	add	r1, sp, #100	; 0x64
 8015dea:	a80d      	add	r0, sp, #52	; 0x34
 8015dec:	9306      	str	r3, [sp, #24]
 8015dee:	9b9f      	ldr	r3, [sp, #636]	; 0x27c
 8015df0:	9307      	str	r3, [sp, #28]
 8015df2:	9ba0      	ldr	r3, [sp, #640]	; 0x280
 8015df4:	9308      	str	r3, [sp, #32]
 8015df6:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8015df8:	930c      	str	r3, [sp, #48]	; 0x30
 8015dfa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8015dfc:	930a      	str	r3, [sp, #40]	; 0x28
 8015dfe:	2301      	movs	r3, #1
 8015e00:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8015e04:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8015e08:	2303      	movs	r3, #3
 8015e0a:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
 8015e0e:	f7f9 fe3b 	bl	800fa88 <ucdr_init_buffer>
 8015e12:	a906      	add	r1, sp, #24
 8015e14:	a80d      	add	r0, sp, #52	; 0x34
 8015e16:	f002 fccf 	bl	80187b8 <uxr_serialize_OBJK_Replier_Binary>
 8015e1a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015e1c:	4628      	mov	r0, r5
 8015e1e:	9600      	str	r6, [sp, #0]
 8015e20:	9318      	str	r3, [sp, #96]	; 0x60
 8015e22:	b29b      	uxth	r3, r3
 8015e24:	9401      	str	r4, [sp, #4]
 8015e26:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8015e2a:	f7ff ff6b 	bl	8015d04 <uxr_common_create_entity>
 8015e2e:	f50d 7d1a 	add.w	sp, sp, #616	; 0x268
 8015e32:	bd70      	pop	{r4, r5, r6, pc}

08015e34 <get_custom_error>:
 8015e34:	4b01      	ldr	r3, [pc, #4]	; (8015e3c <get_custom_error+0x8>)
 8015e36:	7818      	ldrb	r0, [r3, #0]
 8015e38:	4770      	bx	lr
 8015e3a:	bf00      	nop
 8015e3c:	200109f8 	.word	0x200109f8

08015e40 <recv_custom_msg>:
 8015e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e44:	4693      	mov	fp, r2
 8015e46:	b089      	sub	sp, #36	; 0x24
 8015e48:	2200      	movs	r2, #0
 8015e4a:	4604      	mov	r4, r0
 8015e4c:	468a      	mov	sl, r1
 8015e4e:	9305      	str	r3, [sp, #20]
 8015e50:	f88d 201e 	strb.w	r2, [sp, #30]
 8015e54:	f890 2200 	ldrb.w	r2, [r0, #512]	; 0x200
 8015e58:	b322      	cbz	r2, 8015ea4 <recv_custom_msg+0x64>
 8015e5a:	f200 2902 	addw	r9, r0, #514	; 0x202
 8015e5e:	f10d 081f 	add.w	r8, sp, #31
 8015e62:	af05      	add	r7, sp, #20
 8015e64:	f10d 061e 	add.w	r6, sp, #30
 8015e68:	f44f 7500 	mov.w	r5, #512	; 0x200
 8015e6c:	e002      	b.n	8015e74 <recv_custom_msg+0x34>
 8015e6e:	9b05      	ldr	r3, [sp, #20]
 8015e70:	2b00      	cmp	r3, #0
 8015e72:	dd0f      	ble.n	8015e94 <recv_custom_msg+0x54>
 8015e74:	f8d4 1274 	ldr.w	r1, [r4, #628]	; 0x274
 8015e78:	4623      	mov	r3, r4
 8015e7a:	4622      	mov	r2, r4
 8015e7c:	4648      	mov	r0, r9
 8015e7e:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8015e82:	e9cd 5600 	strd	r5, r6, [sp]
 8015e86:	f001 fc71 	bl	801776c <uxr_read_framed_msg>
 8015e8a:	2800      	cmp	r0, #0
 8015e8c:	d0ef      	beq.n	8015e6e <recv_custom_msg+0x2e>
 8015e8e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8015e92:	b1b3      	cbz	r3, 8015ec2 <recv_custom_msg+0x82>
 8015e94:	4b0f      	ldr	r3, [pc, #60]	; (8015ed4 <recv_custom_msg+0x94>)
 8015e96:	2000      	movs	r0, #0
 8015e98:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8015e9c:	701a      	strb	r2, [r3, #0]
 8015e9e:	b009      	add	sp, #36	; 0x24
 8015ea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ea4:	f10d 021f 	add.w	r2, sp, #31
 8015ea8:	4601      	mov	r1, r0
 8015eaa:	9200      	str	r2, [sp, #0]
 8015eac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015eb0:	f8d0 5274 	ldr.w	r5, [r0, #628]	; 0x274
 8015eb4:	47a8      	blx	r5
 8015eb6:	2800      	cmp	r0, #0
 8015eb8:	d0ec      	beq.n	8015e94 <recv_custom_msg+0x54>
 8015eba:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8015ebe:	2b00      	cmp	r3, #0
 8015ec0:	d1e8      	bne.n	8015e94 <recv_custom_msg+0x54>
 8015ec2:	f8cb 0000 	str.w	r0, [fp]
 8015ec6:	2001      	movs	r0, #1
 8015ec8:	f8ca 4000 	str.w	r4, [sl]
 8015ecc:	b009      	add	sp, #36	; 0x24
 8015ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ed2:	bf00      	nop
 8015ed4:	200109f8 	.word	0x200109f8

08015ed8 <send_custom_msg>:
 8015ed8:	b530      	push	{r4, r5, lr}
 8015eda:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 8015ede:	b087      	sub	sp, #28
 8015ee0:	4614      	mov	r4, r2
 8015ee2:	b995      	cbnz	r5, 8015f0a <send_custom_msg+0x32>
 8015ee4:	f8d0 5270 	ldr.w	r5, [r0, #624]	; 0x270
 8015ee8:	f10d 0317 	add.w	r3, sp, #23
 8015eec:	47a8      	blx	r5
 8015eee:	1e03      	subs	r3, r0, #0
 8015ef0:	bf18      	it	ne
 8015ef2:	2301      	movne	r3, #1
 8015ef4:	42a0      	cmp	r0, r4
 8015ef6:	bf18      	it	ne
 8015ef8:	2300      	movne	r3, #0
 8015efa:	b91b      	cbnz	r3, 8015f04 <send_custom_msg+0x2c>
 8015efc:	4a0a      	ldr	r2, [pc, #40]	; (8015f28 <send_custom_msg+0x50>)
 8015efe:	f89d 1017 	ldrb.w	r1, [sp, #23]
 8015f02:	7011      	strb	r1, [r2, #0]
 8015f04:	4618      	mov	r0, r3
 8015f06:	b007      	add	sp, #28
 8015f08:	bd30      	pop	{r4, r5, pc}
 8015f0a:	460b      	mov	r3, r1
 8015f0c:	2200      	movs	r2, #0
 8015f0e:	f10d 0117 	add.w	r1, sp, #23
 8015f12:	9400      	str	r4, [sp, #0]
 8015f14:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8015f18:	4602      	mov	r2, r0
 8015f1a:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
 8015f1e:	f200 2002 	addw	r0, r0, #514	; 0x202
 8015f22:	f001 fa45 	bl	80173b0 <uxr_write_framed_msg>
 8015f26:	e7e2      	b.n	8015eee <send_custom_msg+0x16>
 8015f28:	200109f8 	.word	0x200109f8

08015f2c <uxr_set_custom_transport_callbacks>:
 8015f2c:	f880 1200 	strb.w	r1, [r0, #512]	; 0x200
 8015f30:	9901      	ldr	r1, [sp, #4]
 8015f32:	e9c0 239a 	strd	r2, r3, [r0, #616]	; 0x268
 8015f36:	9b00      	ldr	r3, [sp, #0]
 8015f38:	e9c0 319c 	strd	r3, r1, [r0, #624]	; 0x270
 8015f3c:	4770      	bx	lr
 8015f3e:	bf00      	nop

08015f40 <uxr_init_custom_transport>:
 8015f40:	b538      	push	{r3, r4, r5, lr}
 8015f42:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
 8015f46:	b303      	cbz	r3, 8015f8a <uxr_init_custom_transport+0x4a>
 8015f48:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 8015f4c:	4604      	mov	r4, r0
 8015f4e:	b1e2      	cbz	r2, 8015f8a <uxr_init_custom_transport+0x4a>
 8015f50:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 8015f54:	b1ca      	cbz	r2, 8015f8a <uxr_init_custom_transport+0x4a>
 8015f56:	f8d0 2274 	ldr.w	r2, [r0, #628]	; 0x274
 8015f5a:	b1b2      	cbz	r2, 8015f8a <uxr_init_custom_transport+0x4a>
 8015f5c:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
 8015f60:	4798      	blx	r3
 8015f62:	4605      	mov	r5, r0
 8015f64:	b188      	cbz	r0, 8015f8a <uxr_init_custom_transport+0x4a>
 8015f66:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8015f6a:	b98b      	cbnz	r3, 8015f90 <uxr_init_custom_transport+0x50>
 8015f6c:	4b0b      	ldr	r3, [pc, #44]	; (8015f9c <uxr_init_custom_transport+0x5c>)
 8015f6e:	4628      	mov	r0, r5
 8015f70:	490b      	ldr	r1, [pc, #44]	; (8015fa0 <uxr_init_custom_transport+0x60>)
 8015f72:	4a0c      	ldr	r2, [pc, #48]	; (8015fa4 <uxr_init_custom_transport+0x64>)
 8015f74:	f8c4 3280 	str.w	r3, [r4, #640]	; 0x280
 8015f78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015f7c:	f8c4 2284 	str.w	r2, [r4, #644]	; 0x284
 8015f80:	f8a4 3288 	strh.w	r3, [r4, #648]	; 0x288
 8015f84:	e9c4 419e 	strd	r4, r1, [r4, #632]	; 0x278
 8015f88:	bd38      	pop	{r3, r4, r5, pc}
 8015f8a:	2500      	movs	r5, #0
 8015f8c:	4628      	mov	r0, r5
 8015f8e:	bd38      	pop	{r3, r4, r5, pc}
 8015f90:	2100      	movs	r1, #0
 8015f92:	f204 2002 	addw	r0, r4, #514	; 0x202
 8015f96:	f001 fa05 	bl	80173a4 <uxr_init_framing_io>
 8015f9a:	e7e7      	b.n	8015f6c <uxr_init_custom_transport+0x2c>
 8015f9c:	08015e41 	.word	0x08015e41
 8015fa0:	08015ed9 	.word	0x08015ed9
 8015fa4:	08015e35 	.word	0x08015e35

08015fa8 <uxr_close_custom_transport>:
 8015fa8:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 8015fac:	4718      	bx	r3
 8015fae:	bf00      	nop

08015fb0 <uxr_object_id>:
 8015fb0:	b082      	sub	sp, #8
 8015fb2:	2300      	movs	r3, #0
 8015fb4:	f88d 1006 	strb.w	r1, [sp, #6]
 8015fb8:	f360 030f 	bfi	r3, r0, #0, #16
 8015fbc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8015fc0:	f362 431f 	bfi	r3, r2, #16, #16
 8015fc4:	4618      	mov	r0, r3
 8015fc6:	b002      	add	sp, #8
 8015fc8:	4770      	bx	lr
 8015fca:	bf00      	nop

08015fcc <uxr_object_id_from_raw>:
 8015fcc:	7843      	ldrb	r3, [r0, #1]
 8015fce:	b082      	sub	sp, #8
 8015fd0:	7801      	ldrb	r1, [r0, #0]
 8015fd2:	2000      	movs	r0, #0
 8015fd4:	091a      	lsrs	r2, r3, #4
 8015fd6:	f003 030f 	and.w	r3, r3, #15
 8015fda:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8015fde:	f88d 3006 	strb.w	r3, [sp, #6]
 8015fe2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8015fe6:	f362 000f 	bfi	r0, r2, #0, #16
 8015fea:	f363 401f 	bfi	r0, r3, #16, #16
 8015fee:	b002      	add	sp, #8
 8015ff0:	4770      	bx	lr
 8015ff2:	bf00      	nop

08015ff4 <uxr_object_id_to_raw>:
 8015ff4:	4602      	mov	r2, r0
 8015ff6:	f3c0 4303 	ubfx	r3, r0, #16, #4
 8015ffa:	b082      	sub	sp, #8
 8015ffc:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 8016000:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 8016004:	f881 c000 	strb.w	ip, [r1]
 8016008:	7048      	strb	r0, [r1, #1]
 801600a:	b002      	add	sp, #8
 801600c:	4770      	bx	lr
 801600e:	bf00      	nop

08016010 <uxr_buffer_request_data>:
 8016010:	b530      	push	{r4, r5, lr}
 8016012:	b095      	sub	sp, #84	; 0x54
 8016014:	4604      	mov	r4, r0
 8016016:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8016018:	9303      	str	r3, [sp, #12]
 801601a:	2d00      	cmp	r5, #0
 801601c:	f88d 301c 	strb.w	r3, [sp, #28]
 8016020:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8016024:	f04f 0200 	mov.w	r2, #0
 8016028:	bf14      	ite	ne
 801602a:	2101      	movne	r1, #1
 801602c:	4611      	moveq	r1, r2
 801602e:	f88d 201d 	strb.w	r2, [sp, #29]
 8016032:	f88d 201e 	strb.w	r2, [sp, #30]
 8016036:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801603a:	d021      	beq.n	8016080 <uxr_buffer_request_data+0x70>
 801603c:	686b      	ldr	r3, [r5, #4]
 801603e:	2210      	movs	r2, #16
 8016040:	6829      	ldr	r1, [r5, #0]
 8016042:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 8016046:	f8cd 1026 	str.w	r1, [sp, #38]	; 0x26
 801604a:	2308      	movs	r3, #8
 801604c:	2100      	movs	r1, #0
 801604e:	4620      	mov	r0, r4
 8016050:	e9cd 3100 	strd	r3, r1, [sp]
 8016054:	ab0c      	add	r3, sp, #48	; 0x30
 8016056:	9905      	ldr	r1, [sp, #20]
 8016058:	f001 f836 	bl	80170c8 <uxr_prepare_stream_to_write_submessage>
 801605c:	b918      	cbnz	r0, 8016066 <uxr_buffer_request_data+0x56>
 801605e:	4604      	mov	r4, r0
 8016060:	4620      	mov	r0, r4
 8016062:	b015      	add	sp, #84	; 0x54
 8016064:	bd30      	pop	{r4, r5, pc}
 8016066:	9904      	ldr	r1, [sp, #16]
 8016068:	aa06      	add	r2, sp, #24
 801606a:	4620      	mov	r0, r4
 801606c:	f001 f968 	bl	8017340 <uxr_init_base_object_request>
 8016070:	4604      	mov	r4, r0
 8016072:	a906      	add	r1, sp, #24
 8016074:	a80c      	add	r0, sp, #48	; 0x30
 8016076:	f002 fed5 	bl	8018e24 <uxr_serialize_READ_DATA_Payload>
 801607a:	4620      	mov	r0, r4
 801607c:	b015      	add	sp, #84	; 0x54
 801607e:	bd30      	pop	{r4, r5, pc}
 8016080:	2208      	movs	r2, #8
 8016082:	e7e2      	b.n	801604a <uxr_buffer_request_data+0x3a>

08016084 <uxr_buffer_cancel_data>:
 8016084:	b510      	push	{r4, lr}
 8016086:	2300      	movs	r3, #0
 8016088:	b094      	sub	sp, #80	; 0x50
 801608a:	4604      	mov	r4, r0
 801608c:	9205      	str	r2, [sp, #20]
 801608e:	9301      	str	r3, [sp, #4]
 8016090:	f8ad 301c 	strh.w	r3, [sp, #28]
 8016094:	f88d 301e 	strb.w	r3, [sp, #30]
 8016098:	f8cd 3026 	str.w	r3, [sp, #38]	; 0x26
 801609c:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 80160a0:	2308      	movs	r3, #8
 80160a2:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80160a6:	2201      	movs	r2, #1
 80160a8:	9300      	str	r3, [sp, #0]
 80160aa:	ab0c      	add	r3, sp, #48	; 0x30
 80160ac:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 80160b0:	2210      	movs	r2, #16
 80160b2:	f001 f809 	bl	80170c8 <uxr_prepare_stream_to_write_submessage>
 80160b6:	b918      	cbnz	r0, 80160c0 <uxr_buffer_cancel_data+0x3c>
 80160b8:	4604      	mov	r4, r0
 80160ba:	4620      	mov	r0, r4
 80160bc:	b014      	add	sp, #80	; 0x50
 80160be:	bd10      	pop	{r4, pc}
 80160c0:	9905      	ldr	r1, [sp, #20]
 80160c2:	aa06      	add	r2, sp, #24
 80160c4:	4620      	mov	r0, r4
 80160c6:	f001 f93b 	bl	8017340 <uxr_init_base_object_request>
 80160ca:	4604      	mov	r4, r0
 80160cc:	a906      	add	r1, sp, #24
 80160ce:	a80c      	add	r0, sp, #48	; 0x30
 80160d0:	f002 fea8 	bl	8018e24 <uxr_serialize_READ_DATA_Payload>
 80160d4:	4620      	mov	r0, r4
 80160d6:	b014      	add	sp, #80	; 0x50
 80160d8:	bd10      	pop	{r4, pc}
 80160da:	bf00      	nop

080160dc <read_submessage_format>:
 80160dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80160e0:	b095      	sub	sp, #84	; 0x54
 80160e2:	f8bd 7078 	ldrh.w	r7, [sp, #120]	; 0x78
 80160e6:	b113      	cbz	r3, 80160ee <read_submessage_format+0x12>
 80160e8:	b015      	add	sp, #84	; 0x54
 80160ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80160ee:	4606      	mov	r6, r0
 80160f0:	981c      	ldr	r0, [sp, #112]	; 0x70
 80160f2:	460c      	mov	r4, r1
 80160f4:	4615      	mov	r5, r2
 80160f6:	9004      	str	r0, [sp, #16]
 80160f8:	4699      	mov	r9, r3
 80160fa:	981d      	ldr	r0, [sp, #116]	; 0x74
 80160fc:	f89d 8076 	ldrb.w	r8, [sp, #118]	; 0x76
 8016100:	9005      	str	r0, [sp, #20]
 8016102:	a80c      	add	r0, sp, #48	; 0x30
 8016104:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8016108:	1a52      	subs	r2, r2, r1
 801610a:	f7f9 fcbd 	bl	800fa88 <ucdr_init_buffer>
 801610e:	a80c      	add	r0, sp, #48	; 0x30
 8016110:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8016114:	f7f9 fc8c 	bl	800fa30 <ucdr_set_on_full_buffer_callback>
 8016118:	69e2      	ldr	r2, [r4, #28]
 801611a:	b19a      	cbz	r2, 8016144 <read_submessage_format+0x68>
 801611c:	f1b8 0f07 	cmp.w	r8, #7
 8016120:	f882 9014 	strb.w	r9, [r2, #20]
 8016124:	d040      	beq.n	80161a8 <read_submessage_format+0xcc>
 8016126:	f1b8 0f08 	cmp.w	r8, #8
 801612a:	d02e      	beq.n	801618a <read_submessage_format+0xae>
 801612c:	f1b8 0f06 	cmp.w	r8, #6
 8016130:	d011      	beq.n	8016156 <read_submessage_format+0x7a>
 8016132:	2301      	movs	r3, #1
 8016134:	7513      	strb	r3, [r2, #20]
 8016136:	4629      	mov	r1, r5
 8016138:	4620      	mov	r0, r4
 801613a:	f7f9 fcf9 	bl	800fb30 <ucdr_advance_buffer>
 801613e:	b015      	add	sp, #84	; 0x54
 8016140:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016144:	f1b8 0f07 	cmp.w	r8, #7
 8016148:	d02e      	beq.n	80161a8 <read_submessage_format+0xcc>
 801614a:	f1b8 0f08 	cmp.w	r8, #8
 801614e:	d01c      	beq.n	801618a <read_submessage_format+0xae>
 8016150:	f1b8 0f06 	cmp.w	r8, #6
 8016154:	d1ef      	bne.n	8016136 <read_submessage_format+0x5a>
 8016156:	f8d6 8088 	ldr.w	r8, [r6, #136]	; 0x88
 801615a:	f1b8 0f00 	cmp.w	r8, #0
 801615e:	d011      	beq.n	8016184 <read_submessage_format+0xa8>
 8016160:	ab0c      	add	r3, sp, #48	; 0x30
 8016162:	9501      	str	r5, [sp, #4]
 8016164:	463a      	mov	r2, r7
 8016166:	4630      	mov	r0, r6
 8016168:	9300      	str	r3, [sp, #0]
 801616a:	2306      	movs	r3, #6
 801616c:	f88d 3016 	strb.w	r3, [sp, #22]
 8016170:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 8016174:	9302      	str	r3, [sp, #8]
 8016176:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 801617a:	47c0      	blx	r8
 801617c:	2301      	movs	r3, #1
 801617e:	69e2      	ldr	r2, [r4, #28]
 8016180:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 8016184:	2a00      	cmp	r2, #0
 8016186:	d1d4      	bne.n	8016132 <read_submessage_format+0x56>
 8016188:	e7d5      	b.n	8016136 <read_submessage_format+0x5a>
 801618a:	f8d6 30a4 	ldr.w	r3, [r6, #164]	; 0xa4
 801618e:	2b00      	cmp	r3, #0
 8016190:	d0f8      	beq.n	8016184 <read_submessage_format+0xa8>
 8016192:	a80c      	add	r0, sp, #48	; 0x30
 8016194:	a906      	add	r1, sp, #24
 8016196:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 801619a:	f002 ff0f 	bl	8018fbc <uxr_deserialize_SampleIdentity>
 801619e:	b9a0      	cbnz	r0, 80161ca <read_submessage_format+0xee>
 80161a0:	69e2      	ldr	r2, [r4, #28]
 80161a2:	2a00      	cmp	r2, #0
 80161a4:	d1c5      	bne.n	8016132 <read_submessage_format+0x56>
 80161a6:	e7c6      	b.n	8016136 <read_submessage_format+0x5a>
 80161a8:	f8d6 30ac 	ldr.w	r3, [r6, #172]	; 0xac
 80161ac:	b13b      	cbz	r3, 80161be <read_submessage_format+0xe2>
 80161ae:	a906      	add	r1, sp, #24
 80161b0:	a80c      	add	r0, sp, #48	; 0x30
 80161b2:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 80161b6:	f002 fbd5 	bl	8018964 <uxr_deserialize_BaseObjectRequest>
 80161ba:	bb60      	cbnz	r0, 8016216 <read_submessage_format+0x13a>
 80161bc:	69e2      	ldr	r2, [r4, #28]
 80161be:	68a3      	ldr	r3, [r4, #8]
 80161c0:	442b      	add	r3, r5
 80161c2:	60a3      	str	r3, [r4, #8]
 80161c4:	2a00      	cmp	r2, #0
 80161c6:	d1b4      	bne.n	8016132 <read_submessage_format+0x56>
 80161c8:	e7b5      	b.n	8016136 <read_submessage_format+0x5a>
 80161ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80161cc:	a80c      	add	r0, sp, #48	; 0x30
 80161ce:	eba8 0803 	sub.w	r8, r8, r3
 80161d2:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 80161d6:	44a8      	add	r8, r5
 80161d8:	1a52      	subs	r2, r2, r1
 80161da:	f7f9 fc55 	bl	800fa88 <ucdr_init_buffer>
 80161de:	a80c      	add	r0, sp, #48	; 0x30
 80161e0:	fa1f f888 	uxth.w	r8, r8
 80161e4:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80161e8:	f7f9 fc22 	bl	800fa30 <ucdr_set_on_full_buffer_callback>
 80161ec:	ab0c      	add	r3, sp, #48	; 0x30
 80161ee:	2108      	movs	r1, #8
 80161f0:	f8cd 8004 	str.w	r8, [sp, #4]
 80161f4:	9300      	str	r3, [sp, #0]
 80161f6:	463a      	mov	r2, r7
 80161f8:	f88d 1016 	strb.w	r1, [sp, #22]
 80161fc:	ab06      	add	r3, sp, #24
 80161fe:	f8d6 10a8 	ldr.w	r1, [r6, #168]	; 0xa8
 8016202:	4630      	mov	r0, r6
 8016204:	9102      	str	r1, [sp, #8]
 8016206:	9905      	ldr	r1, [sp, #20]
 8016208:	f8d6 70a4 	ldr.w	r7, [r6, #164]	; 0xa4
 801620c:	47b8      	blx	r7
 801620e:	2301      	movs	r3, #1
 8016210:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 8016214:	e7c4      	b.n	80161a0 <read_submessage_format+0xc4>
 8016216:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 801621a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801621c:	a80c      	add	r0, sp, #48	; 0x30
 801621e:	1a52      	subs	r2, r2, r1
 8016220:	eba8 0803 	sub.w	r8, r8, r3
 8016224:	f7f9 fc30 	bl	800fa88 <ucdr_init_buffer>
 8016228:	a80c      	add	r0, sp, #48	; 0x30
 801622a:	44a8      	add	r8, r5
 801622c:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8016230:	f7f9 fbfe 	bl	800fa30 <ucdr_set_on_full_buffer_callback>
 8016234:	ab0c      	add	r3, sp, #48	; 0x30
 8016236:	f89d 1018 	ldrb.w	r1, [sp, #24]
 801623a:	fa1f f888 	uxth.w	r8, r8
 801623e:	9300      	str	r3, [sp, #0]
 8016240:	463a      	mov	r2, r7
 8016242:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8016246:	4630      	mov	r0, r6
 8016248:	f8cd 8004 	str.w	r8, [sp, #4]
 801624c:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8016250:	2107      	movs	r1, #7
 8016252:	f88d 1016 	strb.w	r1, [sp, #22]
 8016256:	b29b      	uxth	r3, r3
 8016258:	f8d6 10b0 	ldr.w	r1, [r6, #176]	; 0xb0
 801625c:	9102      	str	r1, [sp, #8]
 801625e:	9905      	ldr	r1, [sp, #20]
 8016260:	f8d6 70ac 	ldr.w	r7, [r6, #172]	; 0xac
 8016264:	47b8      	blx	r7
 8016266:	2301      	movs	r3, #1
 8016268:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 801626c:	e7a6      	b.n	80161bc <read_submessage_format+0xe0>
 801626e:	bf00      	nop

08016270 <on_get_fragmentation_info>:
 8016270:	b500      	push	{lr}
 8016272:	b08b      	sub	sp, #44	; 0x2c
 8016274:	4601      	mov	r1, r0
 8016276:	2204      	movs	r2, #4
 8016278:	a802      	add	r0, sp, #8
 801627a:	f7f9 fc05 	bl	800fa88 <ucdr_init_buffer>
 801627e:	f10d 0305 	add.w	r3, sp, #5
 8016282:	f10d 0206 	add.w	r2, sp, #6
 8016286:	a901      	add	r1, sp, #4
 8016288:	a802      	add	r0, sp, #8
 801628a:	f001 fe5f 	bl	8017f4c <uxr_read_submessage_header>
 801628e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8016292:	2b0d      	cmp	r3, #13
 8016294:	d003      	beq.n	801629e <on_get_fragmentation_info+0x2e>
 8016296:	2000      	movs	r0, #0
 8016298:	b00b      	add	sp, #44	; 0x2c
 801629a:	f85d fb04 	ldr.w	pc, [sp], #4
 801629e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80162a2:	f013 0f02 	tst.w	r3, #2
 80162a6:	bf14      	ite	ne
 80162a8:	2002      	movne	r0, #2
 80162aa:	2001      	moveq	r0, #1
 80162ac:	b00b      	add	sp, #44	; 0x2c
 80162ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80162b2:	bf00      	nop

080162b4 <read_submessage_get_info>:
 80162b4:	b570      	push	{r4, r5, r6, lr}
 80162b6:	2500      	movs	r5, #0
 80162b8:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
 80162bc:	460e      	mov	r6, r1
 80162be:	4604      	mov	r4, r0
 80162c0:	f44f 7224 	mov.w	r2, #656	; 0x290
 80162c4:	4629      	mov	r1, r5
 80162c6:	a810      	add	r0, sp, #64	; 0x40
 80162c8:	9503      	str	r5, [sp, #12]
 80162ca:	9504      	str	r5, [sp, #16]
 80162cc:	f005 f85a 	bl	801b384 <memset>
 80162d0:	a903      	add	r1, sp, #12
 80162d2:	4630      	mov	r0, r6
 80162d4:	f002 fce6 	bl	8018ca4 <uxr_deserialize_GET_INFO_Payload>
 80162d8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80162dc:	4620      	mov	r0, r4
 80162de:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 80162e2:	f001 f825 	bl	8017330 <uxr_session_header_offset>
 80162e6:	462b      	mov	r3, r5
 80162e8:	220c      	movs	r2, #12
 80162ea:	a905      	add	r1, sp, #20
 80162ec:	9000      	str	r0, [sp, #0]
 80162ee:	a808      	add	r0, sp, #32
 80162f0:	f7f9 fbb8 	bl	800fa64 <ucdr_init_buffer_origin_offset>
 80162f4:	a910      	add	r1, sp, #64	; 0x40
 80162f6:	a808      	add	r0, sp, #32
 80162f8:	f002 fd48 	bl	8018d8c <uxr_serialize_INFO_Payload>
 80162fc:	9b08      	ldr	r3, [sp, #32]
 80162fe:	462a      	mov	r2, r5
 8016300:	4629      	mov	r1, r5
 8016302:	4620      	mov	r0, r4
 8016304:	f000 ffc0 	bl	8017288 <uxr_stamp_session_header>
 8016308:	a808      	add	r0, sp, #32
 801630a:	f7f9 fbeb 	bl	800fae4 <ucdr_buffer_length>
 801630e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8016310:	4602      	mov	r2, r0
 8016312:	a905      	add	r1, sp, #20
 8016314:	e9d3 0400 	ldrd	r0, r4, [r3]
 8016318:	47a0      	blx	r4
 801631a:	f50d 7d34 	add.w	sp, sp, #720	; 0x2d0
 801631e:	bd70      	pop	{r4, r5, r6, pc}

08016320 <write_submessage_acknack.isra.0>:
 8016320:	b570      	push	{r4, r5, r6, lr}
 8016322:	b092      	sub	sp, #72	; 0x48
 8016324:	4605      	mov	r5, r0
 8016326:	460e      	mov	r6, r1
 8016328:	4614      	mov	r4, r2
 801632a:	f001 f801 	bl	8017330 <uxr_session_header_offset>
 801632e:	a905      	add	r1, sp, #20
 8016330:	9000      	str	r0, [sp, #0]
 8016332:	2300      	movs	r3, #0
 8016334:	a80a      	add	r0, sp, #40	; 0x28
 8016336:	2211      	movs	r2, #17
 8016338:	f7f9 fb94 	bl	800fa64 <ucdr_init_buffer_origin_offset>
 801633c:	2218      	movs	r2, #24
 801633e:	2300      	movs	r3, #0
 8016340:	210a      	movs	r1, #10
 8016342:	fb02 5404 	mla	r4, r2, r4, r5
 8016346:	a80a      	add	r0, sp, #40	; 0x28
 8016348:	2205      	movs	r2, #5
 801634a:	3450      	adds	r4, #80	; 0x50
 801634c:	f001 fde4 	bl	8017f18 <uxr_buffer_submessage_header>
 8016350:	a903      	add	r1, sp, #12
 8016352:	4620      	mov	r0, r4
 8016354:	f003 ff9e 	bl	801a294 <uxr_compute_acknack>
 8016358:	ba40      	rev16	r0, r0
 801635a:	a903      	add	r1, sp, #12
 801635c:	f88d 6010 	strb.w	r6, [sp, #16]
 8016360:	f8ad 000e 	strh.w	r0, [sp, #14]
 8016364:	a80a      	add	r0, sp, #40	; 0x28
 8016366:	f002 fd83 	bl	8018e70 <uxr_serialize_ACKNACK_Payload>
 801636a:	2200      	movs	r2, #0
 801636c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801636e:	4628      	mov	r0, r5
 8016370:	4611      	mov	r1, r2
 8016372:	f000 ff89 	bl	8017288 <uxr_stamp_session_header>
 8016376:	a80a      	add	r0, sp, #40	; 0x28
 8016378:	f7f9 fbb4 	bl	800fae4 <ucdr_buffer_length>
 801637c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 801637e:	4602      	mov	r2, r0
 8016380:	a905      	add	r1, sp, #20
 8016382:	e9d3 0400 	ldrd	r0, r4, [r3]
 8016386:	47a0      	blx	r4
 8016388:	b012      	add	sp, #72	; 0x48
 801638a:	bd70      	pop	{r4, r5, r6, pc}
 801638c:	0000      	movs	r0, r0
	...

08016390 <uxr_init_session>:
 8016390:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 80163c8 <uxr_init_session+0x38>
 8016394:	2300      	movs	r3, #0
 8016396:	b510      	push	{r4, lr}
 8016398:	4604      	mov	r4, r0
 801639a:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 801639e:	e9c0 131c 	strd	r1, r3, [r0, #112]	; 0x70
 80163a2:	e9c0 331e 	strd	r3, r3, [r0, #120]	; 0x78
 80163a6:	e9c0 3320 	strd	r3, r3, [r0, #128]	; 0x80
 80163aa:	e9c0 3322 	strd	r3, r3, [r0, #136]	; 0x88
 80163ae:	e9c0 3324 	strd	r3, r3, [r0, #144]	; 0x90
 80163b2:	ed80 7b26 	vstr	d7, [r0, #152]	; 0x98
 80163b6:	2181      	movs	r1, #129	; 0x81
 80163b8:	f000 feca 	bl	8017150 <uxr_init_session_info>
 80163bc:	f104 0008 	add.w	r0, r4, #8
 80163c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80163c4:	f001 bcc4 	b.w	8017d50 <uxr_init_stream_storage>
	...

080163d0 <uxr_set_status_callback>:
 80163d0:	e9c0 1220 	strd	r1, r2, [r0, #128]	; 0x80
 80163d4:	4770      	bx	lr
 80163d6:	bf00      	nop

080163d8 <uxr_set_topic_callback>:
 80163d8:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
 80163dc:	4770      	bx	lr
 80163de:	bf00      	nop

080163e0 <uxr_set_request_callback>:
 80163e0:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
 80163e4:	4770      	bx	lr
 80163e6:	bf00      	nop

080163e8 <uxr_set_reply_callback>:
 80163e8:	e9c0 122b 	strd	r1, r2, [r0, #172]	; 0xac
 80163ec:	4770      	bx	lr
 80163ee:	bf00      	nop

080163f0 <uxr_create_output_best_effort_stream>:
 80163f0:	b510      	push	{r4, lr}
 80163f2:	4604      	mov	r4, r0
 80163f4:	b084      	sub	sp, #16
 80163f6:	e9cd 2100 	strd	r2, r1, [sp]
 80163fa:	f000 ff99 	bl	8017330 <uxr_session_header_offset>
 80163fe:	4603      	mov	r3, r0
 8016400:	f104 0008 	add.w	r0, r4, #8
 8016404:	e9dd 2100 	ldrd	r2, r1, [sp]
 8016408:	b004      	add	sp, #16
 801640a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801640e:	f001 bce5 	b.w	8017ddc <uxr_add_output_best_effort_buffer>
 8016412:	bf00      	nop

08016414 <uxr_create_output_reliable_stream>:
 8016414:	b530      	push	{r4, r5, lr}
 8016416:	b089      	sub	sp, #36	; 0x24
 8016418:	4604      	mov	r4, r0
 801641a:	e9cd 2104 	strd	r2, r1, [sp, #16]
 801641e:	9303      	str	r3, [sp, #12]
 8016420:	f000 ff86 	bl	8017330 <uxr_session_header_offset>
 8016424:	4605      	mov	r5, r0
 8016426:	9905      	ldr	r1, [sp, #20]
 8016428:	f104 0008 	add.w	r0, r4, #8
 801642c:	9500      	str	r5, [sp, #0]
 801642e:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8016432:	f001 fce7 	bl	8017e04 <uxr_add_output_reliable_buffer>
 8016436:	2200      	movs	r2, #0
 8016438:	fa5f fc80 	uxtb.w	ip, r0
 801643c:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8016440:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8016444:	0e03      	lsrs	r3, r0, #24
 8016446:	f36c 0207 	bfi	r2, ip, #0, #8
 801644a:	f364 220f 	bfi	r2, r4, #8, #8
 801644e:	f361 4217 	bfi	r2, r1, #16, #8
 8016452:	f363 621f 	bfi	r2, r3, #24, #8
 8016456:	4610      	mov	r0, r2
 8016458:	b009      	add	sp, #36	; 0x24
 801645a:	bd30      	pop	{r4, r5, pc}

0801645c <uxr_create_input_best_effort_stream>:
 801645c:	b082      	sub	sp, #8
 801645e:	3008      	adds	r0, #8
 8016460:	b002      	add	sp, #8
 8016462:	f001 bce9 	b.w	8017e38 <uxr_add_input_best_effort_buffer>
 8016466:	bf00      	nop

08016468 <uxr_create_input_reliable_stream>:
 8016468:	b510      	push	{r4, lr}
 801646a:	4c0c      	ldr	r4, [pc, #48]	; (801649c <uxr_create_input_reliable_stream+0x34>)
 801646c:	b084      	sub	sp, #16
 801646e:	3008      	adds	r0, #8
 8016470:	9400      	str	r4, [sp, #0]
 8016472:	f001 fcf7 	bl	8017e64 <uxr_add_input_reliable_buffer>
 8016476:	2200      	movs	r2, #0
 8016478:	fa5f fe80 	uxtb.w	lr, r0
 801647c:	f3c0 2c07 	ubfx	ip, r0, #8, #8
 8016480:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8016484:	0e03      	lsrs	r3, r0, #24
 8016486:	f36e 0207 	bfi	r2, lr, #0, #8
 801648a:	f36c 220f 	bfi	r2, ip, #8, #8
 801648e:	f361 4217 	bfi	r2, r1, #16, #8
 8016492:	f363 621f 	bfi	r2, r3, #24, #8
 8016496:	4610      	mov	r0, r2
 8016498:	b004      	add	sp, #16
 801649a:	bd10      	pop	{r4, pc}
 801649c:	08016271 	.word	0x08016271

080164a0 <uxr_epoch_nanos>:
 80164a0:	b510      	push	{r4, lr}
 80164a2:	4604      	mov	r4, r0
 80164a4:	f001 fd9a 	bl	8017fdc <uxr_nanos>
 80164a8:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 80164ac:	1ac0      	subs	r0, r0, r3
 80164ae:	eb61 0102 	sbc.w	r1, r1, r2
 80164b2:	bd10      	pop	{r4, pc}

080164b4 <uxr_flash_output_streams>:
 80164b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80164b8:	7e03      	ldrb	r3, [r0, #24]
 80164ba:	b084      	sub	sp, #16
 80164bc:	4604      	mov	r4, r0
 80164be:	b1fb      	cbz	r3, 8016500 <uxr_flash_output_streams+0x4c>
 80164c0:	f04f 0900 	mov.w	r9, #0
 80164c4:	f10d 0802 	add.w	r8, sp, #2
 80164c8:	af03      	add	r7, sp, #12
 80164ca:	ae02      	add	r6, sp, #8
 80164cc:	4648      	mov	r0, r9
 80164ce:	2201      	movs	r2, #1
 80164d0:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 80164d4:	4611      	mov	r1, r2
 80164d6:	3508      	adds	r5, #8
 80164d8:	f001 fbe0 	bl	8017c9c <uxr_stream_id>
 80164dc:	4684      	mov	ip, r0
 80164de:	4643      	mov	r3, r8
 80164e0:	463a      	mov	r2, r7
 80164e2:	4631      	mov	r1, r6
 80164e4:	4628      	mov	r0, r5
 80164e6:	f8cd c004 	str.w	ip, [sp, #4]
 80164ea:	f003 ff5d 	bl	801a3a8 <uxr_prepare_best_effort_buffer_to_send>
 80164ee:	2800      	cmp	r0, #0
 80164f0:	d13d      	bne.n	801656e <uxr_flash_output_streams+0xba>
 80164f2:	f109 0901 	add.w	r9, r9, #1
 80164f6:	7e23      	ldrb	r3, [r4, #24]
 80164f8:	fa5f f089 	uxtb.w	r0, r9
 80164fc:	4283      	cmp	r3, r0
 80164fe:	d8e6      	bhi.n	80164ce <uxr_flash_output_streams+0x1a>
 8016500:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8016504:	b383      	cbz	r3, 8016568 <uxr_flash_output_streams+0xb4>
 8016506:	f04f 0900 	mov.w	r9, #0
 801650a:	f10d 0802 	add.w	r8, sp, #2
 801650e:	af03      	add	r7, sp, #12
 8016510:	ae02      	add	r6, sp, #8
 8016512:	4648      	mov	r0, r9
 8016514:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 8016518:	2201      	movs	r2, #1
 801651a:	2102      	movs	r1, #2
 801651c:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8016520:	f001 fbbc 	bl	8017c9c <uxr_stream_id>
 8016524:	9001      	str	r0, [sp, #4]
 8016526:	3520      	adds	r5, #32
 8016528:	e00c      	b.n	8016544 <uxr_flash_output_streams+0x90>
 801652a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801652e:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8016532:	9b02      	ldr	r3, [sp, #8]
 8016534:	f000 fea8 	bl	8017288 <uxr_stamp_session_header>
 8016538:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801653a:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801653e:	e9d3 0a00 	ldrd	r0, sl, [r3]
 8016542:	47d0      	blx	sl
 8016544:	4643      	mov	r3, r8
 8016546:	463a      	mov	r2, r7
 8016548:	4631      	mov	r1, r6
 801654a:	4628      	mov	r0, r5
 801654c:	f004 f950 	bl	801a7f0 <uxr_prepare_next_reliable_buffer_to_send>
 8016550:	4603      	mov	r3, r0
 8016552:	4620      	mov	r0, r4
 8016554:	2b00      	cmp	r3, #0
 8016556:	d1e8      	bne.n	801652a <uxr_flash_output_streams+0x76>
 8016558:	f109 0901 	add.w	r9, r9, #1
 801655c:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8016560:	fa5f f089 	uxtb.w	r0, r9
 8016564:	4283      	cmp	r3, r0
 8016566:	d8d5      	bhi.n	8016514 <uxr_flash_output_streams+0x60>
 8016568:	b004      	add	sp, #16
 801656a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801656e:	9b02      	ldr	r3, [sp, #8]
 8016570:	4620      	mov	r0, r4
 8016572:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8016576:	f109 0901 	add.w	r9, r9, #1
 801657a:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801657e:	f000 fe83 	bl	8017288 <uxr_stamp_session_header>
 8016582:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8016584:	9a03      	ldr	r2, [sp, #12]
 8016586:	685d      	ldr	r5, [r3, #4]
 8016588:	6818      	ldr	r0, [r3, #0]
 801658a:	9902      	ldr	r1, [sp, #8]
 801658c:	47a8      	blx	r5
 801658e:	7e23      	ldrb	r3, [r4, #24]
 8016590:	fa5f f089 	uxtb.w	r0, r9
 8016594:	4283      	cmp	r3, r0
 8016596:	d89a      	bhi.n	80164ce <uxr_flash_output_streams+0x1a>
 8016598:	e7b2      	b.n	8016500 <uxr_flash_output_streams+0x4c>
 801659a:	bf00      	nop

0801659c <read_submessage_info>:
 801659c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80165a0:	460d      	mov	r5, r1
 80165a2:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 80165a6:	4606      	mov	r6, r0
 80165a8:	4669      	mov	r1, sp
 80165aa:	4628      	mov	r0, r5
 80165ac:	f002 fa8c 	bl	8018ac8 <uxr_deserialize_BaseObjectReply>
 80165b0:	4604      	mov	r4, r0
 80165b2:	a902      	add	r1, sp, #8
 80165b4:	4628      	mov	r0, r5
 80165b6:	f89d 7005 	ldrb.w	r7, [sp, #5]
 80165ba:	f7f7 ffe3 	bl	800e584 <ucdr_deserialize_bool>
 80165be:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80165c2:	4004      	ands	r4, r0
 80165c4:	b2e4      	uxtb	r4, r4
 80165c6:	b95b      	cbnz	r3, 80165e0 <read_submessage_info+0x44>
 80165c8:	a987      	add	r1, sp, #540	; 0x21c
 80165ca:	4628      	mov	r0, r5
 80165cc:	f7f7 ffda 	bl	800e584 <ucdr_deserialize_bool>
 80165d0:	f89d 321c 	ldrb.w	r3, [sp, #540]	; 0x21c
 80165d4:	4680      	mov	r8, r0
 80165d6:	b94b      	cbnz	r3, 80165ec <read_submessage_info+0x50>
 80165d8:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 80165dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80165e0:	a903      	add	r1, sp, #12
 80165e2:	4628      	mov	r0, r5
 80165e4:	f002 f91c 	bl	8018820 <uxr_deserialize_ObjectVariant>
 80165e8:	4004      	ands	r4, r0
 80165ea:	e7ed      	b.n	80165c8 <read_submessage_info+0x2c>
 80165ec:	a988      	add	r1, sp, #544	; 0x220
 80165ee:	4628      	mov	r0, r5
 80165f0:	f7f7 fff6 	bl	800e5e0 <ucdr_deserialize_uint8_t>
 80165f4:	ea14 0f08 	tst.w	r4, r8
 80165f8:	d0ee      	beq.n	80165d8 <read_submessage_info+0x3c>
 80165fa:	2800      	cmp	r0, #0
 80165fc:	d0ec      	beq.n	80165d8 <read_submessage_info+0x3c>
 80165fe:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
 8016602:	2b0d      	cmp	r3, #13
 8016604:	d1e8      	bne.n	80165d8 <read_submessage_info+0x3c>
 8016606:	a98a      	add	r1, sp, #552	; 0x228
 8016608:	4628      	mov	r0, r5
 801660a:	f7f8 fd8f 	bl	800f12c <ucdr_deserialize_int16_t>
 801660e:	b138      	cbz	r0, 8016620 <read_submessage_info+0x84>
 8016610:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	; 0x228
 8016614:	2b00      	cmp	r3, #0
 8016616:	dd06      	ble.n	8016626 <read_submessage_info+0x8a>
 8016618:	2f00      	cmp	r7, #0
 801661a:	bf14      	ite	ne
 801661c:	2001      	movne	r0, #1
 801661e:	2002      	moveq	r0, #2
 8016620:	f886 00b5 	strb.w	r0, [r6, #181]	; 0xb5
 8016624:	e7d8      	b.n	80165d8 <read_submessage_info+0x3c>
 8016626:	2000      	movs	r0, #0
 8016628:	e7fa      	b.n	8016620 <read_submessage_info+0x84>
 801662a:	bf00      	nop

0801662c <read_submessage_list>:
 801662c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016630:	4604      	mov	r4, r0
 8016632:	b097      	sub	sp, #92	; 0x5c
 8016634:	460d      	mov	r5, r1
 8016636:	4ec1      	ldr	r6, [pc, #772]	; (801693c <read_submessage_list+0x310>)
 8016638:	9209      	str	r2, [sp, #36]	; 0x24
 801663a:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 801663e:	aa0c      	add	r2, sp, #48	; 0x30
 8016640:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 8016644:	4628      	mov	r0, r5
 8016646:	f001 fc81 	bl	8017f4c <uxr_read_submessage_header>
 801664a:	2800      	cmp	r0, #0
 801664c:	f000 8142 	beq.w	80168d4 <read_submessage_list+0x2a8>
 8016650:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 8016654:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 8016658:	3b02      	subs	r3, #2
 801665a:	2b0d      	cmp	r3, #13
 801665c:	d8ed      	bhi.n	801663a <read_submessage_list+0xe>
 801665e:	a101      	add	r1, pc, #4	; (adr r1, 8016664 <read_submessage_list+0x38>)
 8016660:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8016664:	080168cb 	.word	0x080168cb
 8016668:	0801663b 	.word	0x0801663b
 801666c:	080168bb 	.word	0x080168bb
 8016670:	08016859 	.word	0x08016859
 8016674:	0801684f 	.word	0x0801684f
 8016678:	0801663b 	.word	0x0801663b
 801667c:	0801663b 	.word	0x0801663b
 8016680:	080167a5 	.word	0x080167a5
 8016684:	08016737 	.word	0x08016737
 8016688:	080166f7 	.word	0x080166f7
 801668c:	0801663b 	.word	0x0801663b
 8016690:	0801663b 	.word	0x0801663b
 8016694:	0801663b 	.word	0x0801663b
 8016698:	0801669d 	.word	0x0801669d
 801669c:	a910      	add	r1, sp, #64	; 0x40
 801669e:	4628      	mov	r0, r5
 80166a0:	f002 fc3a 	bl	8018f18 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 80166a4:	f8d4 8090 	ldr.w	r8, [r4, #144]	; 0x90
 80166a8:	f1b8 0f00 	cmp.w	r8, #0
 80166ac:	f000 811a 	beq.w	80168e4 <read_submessage_list+0x2b8>
 80166b0:	f001 fc94 	bl	8017fdc <uxr_nanos>
 80166b4:	4602      	mov	r2, r0
 80166b6:	460b      	mov	r3, r1
 80166b8:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 80166bc:	2100      	movs	r1, #0
 80166be:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80166c0:	9006      	str	r0, [sp, #24]
 80166c2:	468c      	mov	ip, r1
 80166c4:	9815      	ldr	r0, [sp, #84]	; 0x54
 80166c6:	fbc7 0c06 	smlal	r0, ip, r7, r6
 80166ca:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80166cc:	e9cd 0c04 	strd	r0, ip, [sp, #16]
 80166d0:	468c      	mov	ip, r1
 80166d2:	9811      	ldr	r0, [sp, #68]	; 0x44
 80166d4:	fbc7 0c06 	smlal	r0, ip, r7, r6
 80166d8:	e9cd 0c02 	strd	r0, ip, [sp, #8]
 80166dc:	e9dd 7012 	ldrd	r7, r0, [sp, #72]	; 0x48
 80166e0:	fbc7 0106 	smlal	r0, r1, r7, r6
 80166e4:	e9cd 0100 	strd	r0, r1, [sp]
 80166e8:	4620      	mov	r0, r4
 80166ea:	47c0      	blx	r8
 80166ec:	f04f 0301 	mov.w	r3, #1
 80166f0:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
 80166f4:	e7a1      	b.n	801663a <read_submessage_list+0xe>
 80166f6:	a910      	add	r1, sp, #64	; 0x40
 80166f8:	4628      	mov	r0, r5
 80166fa:	f002 fbf9 	bl	8018ef0 <uxr_deserialize_HEARTBEAT_Payload>
 80166fe:	2100      	movs	r1, #0
 8016700:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8016704:	f001 faf8 	bl	8017cf8 <uxr_stream_id_from_raw>
 8016708:	f3c0 2807 	ubfx	r8, r0, #8, #8
 801670c:	900f      	str	r0, [sp, #60]	; 0x3c
 801670e:	f104 0008 	add.w	r0, r4, #8
 8016712:	4641      	mov	r1, r8
 8016714:	f001 fbde 	bl	8017ed4 <uxr_get_input_reliable_stream>
 8016718:	2800      	cmp	r0, #0
 801671a:	d08e      	beq.n	801663a <read_submessage_list+0xe>
 801671c:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 8016720:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8016724:	f003 fdaa 	bl	801a27c <uxr_process_heartbeat>
 8016728:	4642      	mov	r2, r8
 801672a:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 801672e:	4620      	mov	r0, r4
 8016730:	f7ff fdf6 	bl	8016320 <write_submessage_acknack.isra.0>
 8016734:	e781      	b.n	801663a <read_submessage_list+0xe>
 8016736:	a910      	add	r1, sp, #64	; 0x40
 8016738:	4628      	mov	r0, r5
 801673a:	f002 fbb1 	bl	8018ea0 <uxr_deserialize_ACKNACK_Payload>
 801673e:	2100      	movs	r1, #0
 8016740:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8016744:	f001 fad8 	bl	8017cf8 <uxr_stream_id_from_raw>
 8016748:	f3c0 2107 	ubfx	r1, r0, #8, #8
 801674c:	900d      	str	r0, [sp, #52]	; 0x34
 801674e:	f104 0008 	add.w	r0, r4, #8
 8016752:	f001 fba9 	bl	8017ea8 <uxr_get_output_reliable_stream>
 8016756:	4680      	mov	r8, r0
 8016758:	2800      	cmp	r0, #0
 801675a:	f43f af6e 	beq.w	801663a <read_submessage_list+0xe>
 801675e:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8016762:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 8016766:	f89d 1043 	ldrb.w	r1, [sp, #67]	; 0x43
 801676a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 801676e:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8016772:	b289      	uxth	r1, r1
 8016774:	f004 f8e4 	bl	801a940 <uxr_process_acknack>
 8016778:	4640      	mov	r0, r8
 801677a:	f004 f8a5 	bl	801a8c8 <uxr_begin_output_nack_buffer_it>
 801677e:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
 8016782:	e005      	b.n	8016790 <read_submessage_list+0x164>
 8016784:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8016786:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	; 0x38
 801678a:	e9d3 0900 	ldrd	r0, r9, [r3]
 801678e:	47c8      	blx	r9
 8016790:	f10d 0332 	add.w	r3, sp, #50	; 0x32
 8016794:	aa0f      	add	r2, sp, #60	; 0x3c
 8016796:	4651      	mov	r1, sl
 8016798:	4640      	mov	r0, r8
 801679a:	f004 f897 	bl	801a8cc <uxr_next_reliable_nack_buffer_to_send>
 801679e:	2800      	cmp	r0, #0
 80167a0:	d1f0      	bne.n	8016784 <read_submessage_list+0x158>
 80167a2:	e74a      	b.n	801663a <read_submessage_list+0xe>
 80167a4:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 80167a8:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 80167ac:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30
 80167b0:	4628      	mov	r0, r5
 80167b2:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
 80167b6:	4651      	mov	r1, sl
 80167b8:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 80167bc:	f1a8 0804 	sub.w	r8, r8, #4
 80167c0:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
 80167c4:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
 80167c8:	fa1f f888 	uxth.w	r8, r8
 80167cc:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80167d0:	f009 090e 	and.w	r9, r9, #14
 80167d4:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
 80167d8:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 80167dc:	f002 f8c2 	bl	8018964 <uxr_deserialize_BaseObjectRequest>
 80167e0:	4650      	mov	r0, sl
 80167e2:	a90f      	add	r1, sp, #60	; 0x3c
 80167e4:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 80167e8:	f000 fdca 	bl	8017380 <uxr_parse_base_object_request>
 80167ec:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80167ee:	f8d4 b080 	ldr.w	fp, [r4, #128]	; 0x80
 80167f2:	f8bd a032 	ldrh.w	sl, [sp, #50]	; 0x32
 80167f6:	9110      	str	r1, [sp, #64]	; 0x40
 80167f8:	f1bb 0f00 	cmp.w	fp, #0
 80167fc:	d006      	beq.n	801680c <read_submessage_list+0x1e0>
 80167fe:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8016802:	4652      	mov	r2, sl
 8016804:	4620      	mov	r0, r4
 8016806:	9300      	str	r3, [sp, #0]
 8016808:	2300      	movs	r3, #0
 801680a:	47d8      	blx	fp
 801680c:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 801680e:	b182      	cbz	r2, 8016832 <read_submessage_list+0x206>
 8016810:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8016812:	f04f 0c00 	mov.w	ip, #0
 8016816:	3902      	subs	r1, #2
 8016818:	e003      	b.n	8016822 <read_submessage_list+0x1f6>
 801681a:	f10c 0c01 	add.w	ip, ip, #1
 801681e:	4594      	cmp	ip, r2
 8016820:	d007      	beq.n	8016832 <read_submessage_list+0x206>
 8016822:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 8016826:	4553      	cmp	r3, sl
 8016828:	d1f7      	bne.n	801681a <read_submessage_list+0x1ee>
 801682a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 801682c:	2200      	movs	r2, #0
 801682e:	f803 200c 	strb.w	r2, [r3, ip]
 8016832:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 8016836:	464b      	mov	r3, r9
 8016838:	4642      	mov	r2, r8
 801683a:	4620      	mov	r0, r4
 801683c:	9102      	str	r1, [sp, #8]
 801683e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8016840:	9101      	str	r1, [sp, #4]
 8016842:	990d      	ldr	r1, [sp, #52]	; 0x34
 8016844:	9100      	str	r1, [sp, #0]
 8016846:	4629      	mov	r1, r5
 8016848:	f7ff fc48 	bl	80160dc <read_submessage_format>
 801684c:	e6f5      	b.n	801663a <read_submessage_list+0xe>
 801684e:	4629      	mov	r1, r5
 8016850:	4620      	mov	r0, r4
 8016852:	f7ff fea3 	bl	801659c <read_submessage_info>
 8016856:	e6f0      	b.n	801663a <read_submessage_list+0xe>
 8016858:	2a00      	cmp	r2, #0
 801685a:	d03e      	beq.n	80168da <read_submessage_list+0x2ae>
 801685c:	a910      	add	r1, sp, #64	; 0x40
 801685e:	4628      	mov	r0, r5
 8016860:	f002 fa76 	bl	8018d50 <uxr_deserialize_STATUS_Payload>
 8016864:	a90e      	add	r1, sp, #56	; 0x38
 8016866:	aa0d      	add	r2, sp, #52	; 0x34
 8016868:	a810      	add	r0, sp, #64	; 0x40
 801686a:	f000 fd89 	bl	8017380 <uxr_parse_base_object_request>
 801686e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8016870:	f8d4 a080 	ldr.w	sl, [r4, #128]	; 0x80
 8016874:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
 8016878:	f8bd 8034 	ldrh.w	r8, [sp, #52]	; 0x34
 801687c:	910f      	str	r1, [sp, #60]	; 0x3c
 801687e:	f1ba 0f00 	cmp.w	sl, #0
 8016882:	d006      	beq.n	8016892 <read_submessage_list+0x266>
 8016884:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8016888:	4642      	mov	r2, r8
 801688a:	4620      	mov	r0, r4
 801688c:	9300      	str	r3, [sp, #0]
 801688e:	464b      	mov	r3, r9
 8016890:	47d0      	blx	sl
 8016892:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8016894:	2a00      	cmp	r2, #0
 8016896:	f43f aed0 	beq.w	801663a <read_submessage_list+0xe>
 801689a:	6f60      	ldr	r0, [r4, #116]	; 0x74
 801689c:	2100      	movs	r1, #0
 801689e:	3802      	subs	r0, #2
 80168a0:	e003      	b.n	80168aa <read_submessage_list+0x27e>
 80168a2:	3101      	adds	r1, #1
 80168a4:	4291      	cmp	r1, r2
 80168a6:	f43f aec8 	beq.w	801663a <read_submessage_list+0xe>
 80168aa:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 80168ae:	4543      	cmp	r3, r8
 80168b0:	d1f7      	bne.n	80168a2 <read_submessage_list+0x276>
 80168b2:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80168b4:	f803 9001 	strb.w	r9, [r3, r1]
 80168b8:	e6bf      	b.n	801663a <read_submessage_list+0xe>
 80168ba:	2a00      	cmp	r2, #0
 80168bc:	f47f aebd 	bne.w	801663a <read_submessage_list+0xe>
 80168c0:	4629      	mov	r1, r5
 80168c2:	4620      	mov	r0, r4
 80168c4:	f000 fca0 	bl	8017208 <uxr_read_create_session_status>
 80168c8:	e6b7      	b.n	801663a <read_submessage_list+0xe>
 80168ca:	4629      	mov	r1, r5
 80168cc:	4620      	mov	r0, r4
 80168ce:	f7ff fcf1 	bl	80162b4 <read_submessage_get_info>
 80168d2:	e6b2      	b.n	801663a <read_submessage_list+0xe>
 80168d4:	b017      	add	sp, #92	; 0x5c
 80168d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80168da:	4629      	mov	r1, r5
 80168dc:	4620      	mov	r0, r4
 80168de:	f000 fca1 	bl	8017224 <uxr_read_delete_session_status>
 80168e2:	e6aa      	b.n	801663a <read_submessage_list+0xe>
 80168e4:	f001 fb7a 	bl	8017fdc <uxr_nanos>
 80168e8:	4642      	mov	r2, r8
 80168ea:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80168ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80168ee:	fbc7 3206 	smlal	r3, r2, r7, r6
 80168f2:	1818      	adds	r0, r3, r0
 80168f4:	9f12      	ldr	r7, [sp, #72]	; 0x48
 80168f6:	eb42 0101 	adc.w	r1, r2, r1
 80168fa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80168fc:	4642      	mov	r2, r8
 80168fe:	fbc7 3206 	smlal	r3, r2, r7, r6
 8016902:	469c      	mov	ip, r3
 8016904:	e9dd 3710 	ldrd	r3, r7, [sp, #64]	; 0x40
 8016908:	fbc3 7806 	smlal	r7, r8, r3, r6
 801690c:	4643      	mov	r3, r8
 801690e:	eb1c 0c07 	adds.w	ip, ip, r7
 8016912:	eb42 0203 	adc.w	r2, r2, r3
 8016916:	ebb0 030c 	subs.w	r3, r0, ip
 801691a:	eb61 0202 	sbc.w	r2, r1, r2
 801691e:	2a00      	cmp	r2, #0
 8016920:	db08      	blt.n	8016934 <read_submessage_list+0x308>
 8016922:	085b      	lsrs	r3, r3, #1
 8016924:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 8016928:	1052      	asrs	r2, r2, #1
 801692a:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 801692e:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
 8016932:	e6db      	b.n	80166ec <read_submessage_list+0xc0>
 8016934:	3301      	adds	r3, #1
 8016936:	f142 0200 	adc.w	r2, r2, #0
 801693a:	e7f2      	b.n	8016922 <read_submessage_list+0x2f6>
 801693c:	3b9aca00 	.word	0x3b9aca00

08016940 <listen_message_reliably>:
 8016940:	1e0b      	subs	r3, r1, #0
 8016942:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016946:	bfb8      	it	lt
 8016948:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 801694c:	b09d      	sub	sp, #116	; 0x74
 801694e:	4680      	mov	r8, r0
 8016950:	9305      	str	r3, [sp, #20]
 8016952:	f001 fb27 	bl	8017fa4 <uxr_millis>
 8016956:	f898 2048 	ldrb.w	r2, [r8, #72]	; 0x48
 801695a:	4681      	mov	r9, r0
 801695c:	2a00      	cmp	r2, #0
 801695e:	f000 809a 	beq.w	8016a96 <listen_message_reliably+0x156>
 8016962:	2600      	movs	r6, #0
 8016964:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8016968:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 801696c:	460f      	mov	r7, r1
 801696e:	4630      	mov	r0, r6
 8016970:	9303      	str	r3, [sp, #12]
 8016972:	e00e      	b.n	8016992 <listen_message_reliably+0x52>
 8016974:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016976:	3601      	adds	r6, #1
 8016978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801697a:	455a      	cmp	r2, fp
 801697c:	9903      	ldr	r1, [sp, #12]
 801697e:	b2f0      	uxtb	r0, r6
 8016980:	eb73 0101 	sbcs.w	r1, r3, r1
 8016984:	da01      	bge.n	801698a <listen_message_reliably+0x4a>
 8016986:	4693      	mov	fp, r2
 8016988:	9303      	str	r3, [sp, #12]
 801698a:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 801698e:	4283      	cmp	r3, r0
 8016990:	d95f      	bls.n	8016a52 <listen_message_reliably+0x112>
 8016992:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 8016996:	2102      	movs	r1, #2
 8016998:	2201      	movs	r2, #1
 801699a:	00e4      	lsls	r4, r4, #3
 801699c:	f001 f97e 	bl	8017c9c <uxr_stream_id>
 80169a0:	4601      	mov	r1, r0
 80169a2:	f104 0520 	add.w	r5, r4, #32
 80169a6:	463b      	mov	r3, r7
 80169a8:	464a      	mov	r2, r9
 80169aa:	9109      	str	r1, [sp, #36]	; 0x24
 80169ac:	4445      	add	r5, r8
 80169ae:	4628      	mov	r0, r5
 80169b0:	f003 ff5e 	bl	801a870 <uxr_update_output_stream_heartbeat_timestamp>
 80169b4:	eb08 0304 	add.w	r3, r8, r4
 80169b8:	2800      	cmp	r0, #0
 80169ba:	d0db      	beq.n	8016974 <listen_message_reliably+0x34>
 80169bc:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
 80169c0:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
 80169c4:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80169c8:	4640      	mov	r0, r8
 80169ca:	3501      	adds	r5, #1
 80169cc:	4444      	add	r4, r8
 80169ce:	9304      	str	r3, [sp, #16]
 80169d0:	f000 fcae 	bl	8017330 <uxr_session_header_offset>
 80169d4:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80169d8:	2300      	movs	r3, #0
 80169da:	2211      	movs	r2, #17
 80169dc:	a90c      	add	r1, sp, #48	; 0x30
 80169de:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 80169e2:	9000      	str	r0, [sp, #0]
 80169e4:	4650      	mov	r0, sl
 80169e6:	3601      	adds	r6, #1
 80169e8:	f7f9 f83c 	bl	800fa64 <ucdr_init_buffer_origin_offset>
 80169ec:	2300      	movs	r3, #0
 80169ee:	2205      	movs	r2, #5
 80169f0:	210b      	movs	r1, #11
 80169f2:	4650      	mov	r0, sl
 80169f4:	f001 fa90 	bl	8017f18 <uxr_buffer_submessage_header>
 80169f8:	2101      	movs	r1, #1
 80169fa:	8968      	ldrh	r0, [r5, #10]
 80169fc:	f003 fffc 	bl	801a9f8 <uxr_seq_num_add>
 8016a00:	892b      	ldrh	r3, [r5, #8]
 8016a02:	4602      	mov	r2, r0
 8016a04:	a90a      	add	r1, sp, #40	; 0x28
 8016a06:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8016a0a:	4650      	mov	r0, sl
 8016a0c:	9b04      	ldr	r3, [sp, #16]
 8016a0e:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8016a12:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8016a16:	f002 fa57 	bl	8018ec8 <uxr_serialize_HEARTBEAT_Payload>
 8016a1a:	2200      	movs	r2, #0
 8016a1c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016a1e:	4640      	mov	r0, r8
 8016a20:	4611      	mov	r1, r2
 8016a22:	f000 fc31 	bl	8017288 <uxr_stamp_session_header>
 8016a26:	4650      	mov	r0, sl
 8016a28:	f7f9 f85c 	bl	800fae4 <ucdr_buffer_length>
 8016a2c:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8016a30:	4602      	mov	r2, r0
 8016a32:	a90c      	add	r1, sp, #48	; 0x30
 8016a34:	e9d3 0500 	ldrd	r0, r5, [r3]
 8016a38:	47a8      	blx	r5
 8016a3a:	9903      	ldr	r1, [sp, #12]
 8016a3c:	b2f0      	uxtb	r0, r6
 8016a3e:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 8016a42:	455a      	cmp	r2, fp
 8016a44:	eb73 0101 	sbcs.w	r1, r3, r1
 8016a48:	db9d      	blt.n	8016986 <listen_message_reliably+0x46>
 8016a4a:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 8016a4e:	4283      	cmp	r3, r0
 8016a50:	d89f      	bhi.n	8016992 <listen_message_reliably+0x52>
 8016a52:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8016a56:	9a03      	ldr	r2, [sp, #12]
 8016a58:	429a      	cmp	r2, r3
 8016a5a:	bf08      	it	eq
 8016a5c:	f1bb 3fff 	cmpeq.w	fp, #4294967295	; 0xffffffff
 8016a60:	d019      	beq.n	8016a96 <listen_message_reliably+0x156>
 8016a62:	ebab 0309 	sub.w	r3, fp, r9
 8016a66:	2b00      	cmp	r3, #0
 8016a68:	9d05      	ldr	r5, [sp, #20]
 8016a6a:	f8d8 0070 	ldr.w	r0, [r8, #112]	; 0x70
 8016a6e:	aa08      	add	r2, sp, #32
 8016a70:	bf08      	it	eq
 8016a72:	2301      	moveq	r3, #1
 8016a74:	a907      	add	r1, sp, #28
 8016a76:	6884      	ldr	r4, [r0, #8]
 8016a78:	429d      	cmp	r5, r3
 8016a7a:	6800      	ldr	r0, [r0, #0]
 8016a7c:	bfa8      	it	ge
 8016a7e:	461d      	movge	r5, r3
 8016a80:	462b      	mov	r3, r5
 8016a82:	47a0      	blx	r4
 8016a84:	b948      	cbnz	r0, 8016a9a <listen_message_reliably+0x15a>
 8016a86:	9b05      	ldr	r3, [sp, #20]
 8016a88:	1b5b      	subs	r3, r3, r5
 8016a8a:	2b00      	cmp	r3, #0
 8016a8c:	9305      	str	r3, [sp, #20]
 8016a8e:	f73f af60 	bgt.w	8016952 <listen_message_reliably+0x12>
 8016a92:	4604      	mov	r4, r0
 8016a94:	e012      	b.n	8016abc <listen_message_reliably+0x17c>
 8016a96:	9b05      	ldr	r3, [sp, #20]
 8016a98:	e7e5      	b.n	8016a66 <listen_message_reliably+0x126>
 8016a9a:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8016a9e:	4604      	mov	r4, r0
 8016aa0:	2500      	movs	r5, #0
 8016aa2:	a80c      	add	r0, sp, #48	; 0x30
 8016aa4:	f7f8 fff0 	bl	800fa88 <ucdr_init_buffer>
 8016aa8:	f10d 031a 	add.w	r3, sp, #26
 8016aac:	aa06      	add	r2, sp, #24
 8016aae:	a90c      	add	r1, sp, #48	; 0x30
 8016ab0:	4640      	mov	r0, r8
 8016ab2:	f88d 5018 	strb.w	r5, [sp, #24]
 8016ab6:	f000 fbfb 	bl	80172b0 <uxr_read_session_header>
 8016aba:	b918      	cbnz	r0, 8016ac4 <listen_message_reliably+0x184>
 8016abc:	4620      	mov	r0, r4
 8016abe:	b01d      	add	sp, #116	; 0x74
 8016ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ac4:	4629      	mov	r1, r5
 8016ac6:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8016aca:	f001 f915 	bl	8017cf8 <uxr_stream_id_from_raw>
 8016ace:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8016ad2:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 8016ad6:	f3c0 2507 	ubfx	r5, r0, #8, #8
 8016ada:	2e01      	cmp	r6, #1
 8016adc:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 8016ae0:	d04b      	beq.n	8016b7a <listen_message_reliably+0x23a>
 8016ae2:	2e02      	cmp	r6, #2
 8016ae4:	d00f      	beq.n	8016b06 <listen_message_reliably+0x1c6>
 8016ae6:	2e00      	cmp	r6, #0
 8016ae8:	d1e8      	bne.n	8016abc <listen_message_reliably+0x17c>
 8016aea:	4631      	mov	r1, r6
 8016aec:	4630      	mov	r0, r6
 8016aee:	f001 f903 	bl	8017cf8 <uxr_stream_id_from_raw>
 8016af2:	4602      	mov	r2, r0
 8016af4:	a90c      	add	r1, sp, #48	; 0x30
 8016af6:	4640      	mov	r0, r8
 8016af8:	920a      	str	r2, [sp, #40]	; 0x28
 8016afa:	f7ff fd97 	bl	801662c <read_submessage_list>
 8016afe:	4620      	mov	r0, r4
 8016b00:	b01d      	add	sp, #116	; 0x74
 8016b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b06:	4629      	mov	r1, r5
 8016b08:	f108 0008 	add.w	r0, r8, #8
 8016b0c:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 8016b10:	f001 f9e0 	bl	8017ed4 <uxr_get_input_reliable_stream>
 8016b14:	4607      	mov	r7, r0
 8016b16:	b338      	cbz	r0, 8016b68 <listen_message_reliably+0x228>
 8016b18:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016b1a:	a80c      	add	r0, sp, #48	; 0x30
 8016b1c:	9203      	str	r2, [sp, #12]
 8016b1e:	f7f8 ffe5 	bl	800faec <ucdr_buffer_remaining>
 8016b22:	4603      	mov	r3, r0
 8016b24:	f10d 0019 	add.w	r0, sp, #25
 8016b28:	9a03      	ldr	r2, [sp, #12]
 8016b2a:	4651      	mov	r1, sl
 8016b2c:	9000      	str	r0, [sp, #0]
 8016b2e:	4638      	mov	r0, r7
 8016b30:	f003 faa8 	bl	801a084 <uxr_receive_reliable_message>
 8016b34:	b1c0      	cbz	r0, 8016b68 <listen_message_reliably+0x228>
 8016b36:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8016b3a:	b393      	cbz	r3, 8016ba2 <listen_message_reliably+0x262>
 8016b3c:	ae14      	add	r6, sp, #80	; 0x50
 8016b3e:	f04f 0a02 	mov.w	sl, #2
 8016b42:	e00a      	b.n	8016b5a <listen_message_reliably+0x21a>
 8016b44:	f88d 9028 	strb.w	r9, [sp, #40]	; 0x28
 8016b48:	4631      	mov	r1, r6
 8016b4a:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 8016b4e:	4640      	mov	r0, r8
 8016b50:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 8016b54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016b56:	f7ff fd69 	bl	801662c <read_submessage_list>
 8016b5a:	2204      	movs	r2, #4
 8016b5c:	4631      	mov	r1, r6
 8016b5e:	4638      	mov	r0, r7
 8016b60:	f003 fb12 	bl	801a188 <uxr_next_input_reliable_buffer_available>
 8016b64:	2800      	cmp	r0, #0
 8016b66:	d1ed      	bne.n	8016b44 <listen_message_reliably+0x204>
 8016b68:	4640      	mov	r0, r8
 8016b6a:	462a      	mov	r2, r5
 8016b6c:	4649      	mov	r1, r9
 8016b6e:	f7ff fbd7 	bl	8016320 <write_submessage_acknack.isra.0>
 8016b72:	4620      	mov	r0, r4
 8016b74:	b01d      	add	sp, #116	; 0x74
 8016b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b7a:	4629      	mov	r1, r5
 8016b7c:	f108 0008 	add.w	r0, r8, #8
 8016b80:	f001 f99e 	bl	8017ec0 <uxr_get_input_best_effort_stream>
 8016b84:	2800      	cmp	r0, #0
 8016b86:	d099      	beq.n	8016abc <listen_message_reliably+0x17c>
 8016b88:	4651      	mov	r1, sl
 8016b8a:	f003 f9f1 	bl	8019f70 <uxr_receive_best_effort_message>
 8016b8e:	2800      	cmp	r0, #0
 8016b90:	d094      	beq.n	8016abc <listen_message_reliably+0x17c>
 8016b92:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 8016b96:	a90c      	add	r1, sp, #48	; 0x30
 8016b98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016b9a:	4640      	mov	r0, r8
 8016b9c:	f7ff fd46 	bl	801662c <read_submessage_list>
 8016ba0:	e78c      	b.n	8016abc <listen_message_reliably+0x17c>
 8016ba2:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 8016ba6:	a90c      	add	r1, sp, #48	; 0x30
 8016ba8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016baa:	4640      	mov	r0, r8
 8016bac:	f7ff fd3e 	bl	801662c <read_submessage_list>
 8016bb0:	e7c4      	b.n	8016b3c <listen_message_reliably+0x1fc>
 8016bb2:	bf00      	nop

08016bb4 <uxr_run_session_timeout>:
 8016bb4:	b570      	push	{r4, r5, r6, lr}
 8016bb6:	4604      	mov	r4, r0
 8016bb8:	460d      	mov	r5, r1
 8016bba:	f001 f9f3 	bl	8017fa4 <uxr_millis>
 8016bbe:	4606      	mov	r6, r0
 8016bc0:	4620      	mov	r0, r4
 8016bc2:	f7ff fc77 	bl	80164b4 <uxr_flash_output_streams>
 8016bc6:	4629      	mov	r1, r5
 8016bc8:	4620      	mov	r0, r4
 8016bca:	f7ff feb9 	bl	8016940 <listen_message_reliably>
 8016bce:	f001 f9e9 	bl	8017fa4 <uxr_millis>
 8016bd2:	1b83      	subs	r3, r0, r6
 8016bd4:	1ae9      	subs	r1, r5, r3
 8016bd6:	2900      	cmp	r1, #0
 8016bd8:	dcf6      	bgt.n	8016bc8 <uxr_run_session_timeout+0x14>
 8016bda:	f104 0008 	add.w	r0, r4, #8
 8016bde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016be2:	f001 b983 	b.w	8017eec <uxr_output_streams_confirmed>
 8016be6:	bf00      	nop

08016be8 <uxr_run_session_until_data>:
 8016be8:	b570      	push	{r4, r5, r6, lr}
 8016bea:	4604      	mov	r4, r0
 8016bec:	460d      	mov	r5, r1
 8016bee:	f001 f9d9 	bl	8017fa4 <uxr_millis>
 8016bf2:	4606      	mov	r6, r0
 8016bf4:	4620      	mov	r0, r4
 8016bf6:	f7ff fc5d 	bl	80164b4 <uxr_flash_output_streams>
 8016bfa:	2300      	movs	r3, #0
 8016bfc:	4629      	mov	r1, r5
 8016bfe:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 8016c02:	e005      	b.n	8016c10 <uxr_run_session_until_data+0x28>
 8016c04:	f001 f9ce 	bl	8017fa4 <uxr_millis>
 8016c08:	1b83      	subs	r3, r0, r6
 8016c0a:	1ae9      	subs	r1, r5, r3
 8016c0c:	2900      	cmp	r1, #0
 8016c0e:	dd07      	ble.n	8016c20 <uxr_run_session_until_data+0x38>
 8016c10:	4620      	mov	r0, r4
 8016c12:	f7ff fe95 	bl	8016940 <listen_message_reliably>
 8016c16:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 8016c1a:	2800      	cmp	r0, #0
 8016c1c:	d0f2      	beq.n	8016c04 <uxr_run_session_until_data+0x1c>
 8016c1e:	bd70      	pop	{r4, r5, r6, pc}
 8016c20:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 8016c24:	bd70      	pop	{r4, r5, r6, pc}
 8016c26:	bf00      	nop

08016c28 <uxr_run_session_until_confirm_delivery>:
 8016c28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016c2c:	4606      	mov	r6, r0
 8016c2e:	460d      	mov	r5, r1
 8016c30:	f001 f9b8 	bl	8017fa4 <uxr_millis>
 8016c34:	4607      	mov	r7, r0
 8016c36:	4630      	mov	r0, r6
 8016c38:	f106 0808 	add.w	r8, r6, #8
 8016c3c:	f7ff fc3a 	bl	80164b4 <uxr_flash_output_streams>
 8016c40:	2d00      	cmp	r5, #0
 8016c42:	db10      	blt.n	8016c66 <uxr_run_session_until_confirm_delivery+0x3e>
 8016c44:	462c      	mov	r4, r5
 8016c46:	e006      	b.n	8016c56 <uxr_run_session_until_confirm_delivery+0x2e>
 8016c48:	f7ff fe7a 	bl	8016940 <listen_message_reliably>
 8016c4c:	f001 f9aa 	bl	8017fa4 <uxr_millis>
 8016c50:	1bc3      	subs	r3, r0, r7
 8016c52:	1aec      	subs	r4, r5, r3
 8016c54:	d407      	bmi.n	8016c66 <uxr_run_session_until_confirm_delivery+0x3e>
 8016c56:	4640      	mov	r0, r8
 8016c58:	f001 f948 	bl	8017eec <uxr_output_streams_confirmed>
 8016c5c:	4603      	mov	r3, r0
 8016c5e:	4621      	mov	r1, r4
 8016c60:	4630      	mov	r0, r6
 8016c62:	2b00      	cmp	r3, #0
 8016c64:	d0f0      	beq.n	8016c48 <uxr_run_session_until_confirm_delivery+0x20>
 8016c66:	4640      	mov	r0, r8
 8016c68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016c6c:	f001 b93e 	b.w	8017eec <uxr_output_streams_confirmed>

08016c70 <uxr_run_session_until_all_status>:
 8016c70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c74:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8016c78:	4606      	mov	r6, r0
 8016c7a:	4688      	mov	r8, r1
 8016c7c:	4692      	mov	sl, r2
 8016c7e:	461f      	mov	r7, r3
 8016c80:	f7ff fc18 	bl	80164b4 <uxr_flash_output_streams>
 8016c84:	f1bb 0f00 	cmp.w	fp, #0
 8016c88:	d004      	beq.n	8016c94 <uxr_run_session_until_all_status+0x24>
 8016c8a:	465a      	mov	r2, fp
 8016c8c:	21ff      	movs	r1, #255	; 0xff
 8016c8e:	4638      	mov	r0, r7
 8016c90:	f004 fb78 	bl	801b384 <memset>
 8016c94:	f8c6 b07c 	str.w	fp, [r6, #124]	; 0x7c
 8016c98:	1e7d      	subs	r5, r7, #1
 8016c9a:	e9c6 a71d 	strd	sl, r7, [r6, #116]	; 0x74
 8016c9e:	f001 f981 	bl	8017fa4 <uxr_millis>
 8016ca2:	4641      	mov	r1, r8
 8016ca4:	4681      	mov	r9, r0
 8016ca6:	4630      	mov	r0, r6
 8016ca8:	f7ff fe4a 	bl	8016940 <listen_message_reliably>
 8016cac:	f001 f97a 	bl	8017fa4 <uxr_millis>
 8016cb0:	eba0 0009 	sub.w	r0, r0, r9
 8016cb4:	eba8 0100 	sub.w	r1, r8, r0
 8016cb8:	f1bb 0f00 	cmp.w	fp, #0
 8016cbc:	d029      	beq.n	8016d12 <uxr_run_session_until_all_status+0xa2>
 8016cbe:	46ae      	mov	lr, r5
 8016cc0:	f04f 0c00 	mov.w	ip, #0
 8016cc4:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 8016cc8:	2cff      	cmp	r4, #255	; 0xff
 8016cca:	d015      	beq.n	8016cf8 <uxr_run_session_until_all_status+0x88>
 8016ccc:	f10c 0c01 	add.w	ip, ip, #1
 8016cd0:	45e3      	cmp	fp, ip
 8016cd2:	d8f7      	bhi.n	8016cc4 <uxr_run_session_until_all_status+0x54>
 8016cd4:	2300      	movs	r3, #0
 8016cd6:	67f3      	str	r3, [r6, #124]	; 0x7c
 8016cd8:	e000      	b.n	8016cdc <uxr_run_session_until_all_status+0x6c>
 8016cda:	b158      	cbz	r0, 8016cf4 <uxr_run_session_until_all_status+0x84>
 8016cdc:	462b      	mov	r3, r5
 8016cde:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8016ce2:	3302      	adds	r3, #2
 8016ce4:	2801      	cmp	r0, #1
 8016ce6:	eba3 0307 	sub.w	r3, r3, r7
 8016cea:	bf8c      	ite	hi
 8016cec:	2000      	movhi	r0, #0
 8016cee:	2001      	movls	r0, #1
 8016cf0:	459b      	cmp	fp, r3
 8016cf2:	d8f2      	bhi.n	8016cda <uxr_run_session_until_all_status+0x6a>
 8016cf4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016cf8:	f83a 301c 	ldrh.w	r3, [sl, ip, lsl #1]
 8016cfc:	f10c 0c01 	add.w	ip, ip, #1
 8016d00:	45dc      	cmp	ip, fp
 8016d02:	d201      	bcs.n	8016d08 <uxr_run_session_until_all_status+0x98>
 8016d04:	2b00      	cmp	r3, #0
 8016d06:	d0dd      	beq.n	8016cc4 <uxr_run_session_until_all_status+0x54>
 8016d08:	2900      	cmp	r1, #0
 8016d0a:	dde3      	ble.n	8016cd4 <uxr_run_session_until_all_status+0x64>
 8016d0c:	2b00      	cmp	r3, #0
 8016d0e:	d1ca      	bne.n	8016ca6 <uxr_run_session_until_all_status+0x36>
 8016d10:	e7e0      	b.n	8016cd4 <uxr_run_session_until_all_status+0x64>
 8016d12:	2001      	movs	r0, #1
 8016d14:	f8c6 b07c 	str.w	fp, [r6, #124]	; 0x7c
 8016d18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016d1c <wait_session_status>:
 8016d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d20:	4604      	mov	r4, r0
 8016d22:	b09d      	sub	sp, #116	; 0x74
 8016d24:	20ff      	movs	r0, #255	; 0xff
 8016d26:	9303      	str	r3, [sp, #12]
 8016d28:	7160      	strb	r0, [r4, #5]
 8016d2a:	2b00      	cmp	r3, #0
 8016d2c:	f000 80b6 	beq.w	8016e9c <wait_session_status+0x180>
 8016d30:	4689      	mov	r9, r1
 8016d32:	4692      	mov	sl, r2
 8016d34:	f04f 0b00 	mov.w	fp, #0
 8016d38:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8016d3a:	4652      	mov	r2, sl
 8016d3c:	4649      	mov	r1, r9
 8016d3e:	e9d3 0500 	ldrd	r0, r5, [r3]
 8016d42:	47a8      	blx	r5
 8016d44:	f001 f92e 	bl	8017fa4 <uxr_millis>
 8016d48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8016d4c:	4605      	mov	r5, r0
 8016d4e:	e009      	b.n	8016d64 <wait_session_status+0x48>
 8016d50:	f001 f928 	bl	8017fa4 <uxr_millis>
 8016d54:	1b40      	subs	r0, r0, r5
 8016d56:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8016d5a:	2b00      	cmp	r3, #0
 8016d5c:	dd40      	ble.n	8016de0 <wait_session_status+0xc4>
 8016d5e:	7960      	ldrb	r0, [r4, #5]
 8016d60:	28ff      	cmp	r0, #255	; 0xff
 8016d62:	d145      	bne.n	8016df0 <wait_session_status+0xd4>
 8016d64:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8016d66:	a908      	add	r1, sp, #32
 8016d68:	6896      	ldr	r6, [r2, #8]
 8016d6a:	6810      	ldr	r0, [r2, #0]
 8016d6c:	aa09      	add	r2, sp, #36	; 0x24
 8016d6e:	47b0      	blx	r6
 8016d70:	2800      	cmp	r0, #0
 8016d72:	d0ed      	beq.n	8016d50 <wait_session_status+0x34>
 8016d74:	a80c      	add	r0, sp, #48	; 0x30
 8016d76:	2600      	movs	r6, #0
 8016d78:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8016d7c:	f7f8 fe84 	bl	800fa88 <ucdr_init_buffer>
 8016d80:	f10d 031e 	add.w	r3, sp, #30
 8016d84:	aa07      	add	r2, sp, #28
 8016d86:	a90c      	add	r1, sp, #48	; 0x30
 8016d88:	4620      	mov	r0, r4
 8016d8a:	f88d 601c 	strb.w	r6, [sp, #28]
 8016d8e:	f000 fa8f 	bl	80172b0 <uxr_read_session_header>
 8016d92:	2800      	cmp	r0, #0
 8016d94:	d0dc      	beq.n	8016d50 <wait_session_status+0x34>
 8016d96:	4631      	mov	r1, r6
 8016d98:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8016d9c:	f000 ffac 	bl	8017cf8 <uxr_stream_id_from_raw>
 8016da0:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8016da4:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8016da8:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8016dac:	2f01      	cmp	r7, #1
 8016dae:	9302      	str	r3, [sp, #8]
 8016db0:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 8016db4:	d05c      	beq.n	8016e70 <wait_session_status+0x154>
 8016db6:	2f02      	cmp	r7, #2
 8016db8:	d020      	beq.n	8016dfc <wait_session_status+0xe0>
 8016dba:	2f00      	cmp	r7, #0
 8016dbc:	d1c8      	bne.n	8016d50 <wait_session_status+0x34>
 8016dbe:	4639      	mov	r1, r7
 8016dc0:	4638      	mov	r0, r7
 8016dc2:	f000 ff99 	bl	8017cf8 <uxr_stream_id_from_raw>
 8016dc6:	a90c      	add	r1, sp, #48	; 0x30
 8016dc8:	4602      	mov	r2, r0
 8016dca:	900b      	str	r0, [sp, #44]	; 0x2c
 8016dcc:	4620      	mov	r0, r4
 8016dce:	f7ff fc2d 	bl	801662c <read_submessage_list>
 8016dd2:	f001 f8e7 	bl	8017fa4 <uxr_millis>
 8016dd6:	1b40      	subs	r0, r0, r5
 8016dd8:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8016ddc:	2b00      	cmp	r3, #0
 8016dde:	dcbe      	bgt.n	8016d5e <wait_session_status+0x42>
 8016de0:	f10b 0b01 	add.w	fp, fp, #1
 8016de4:	9b03      	ldr	r3, [sp, #12]
 8016de6:	7960      	ldrb	r0, [r4, #5]
 8016de8:	455b      	cmp	r3, fp
 8016dea:	d001      	beq.n	8016df0 <wait_session_status+0xd4>
 8016dec:	28ff      	cmp	r0, #255	; 0xff
 8016dee:	d0a3      	beq.n	8016d38 <wait_session_status+0x1c>
 8016df0:	38ff      	subs	r0, #255	; 0xff
 8016df2:	bf18      	it	ne
 8016df4:	2001      	movne	r0, #1
 8016df6:	b01d      	add	sp, #116	; 0x74
 8016df8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016dfc:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8016e00:	4631      	mov	r1, r6
 8016e02:	f104 0008 	add.w	r0, r4, #8
 8016e06:	9304      	str	r3, [sp, #16]
 8016e08:	f001 f864 	bl	8017ed4 <uxr_get_input_reliable_stream>
 8016e0c:	4680      	mov	r8, r0
 8016e0e:	b348      	cbz	r0, 8016e64 <wait_session_status+0x148>
 8016e10:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016e12:	a80c      	add	r0, sp, #48	; 0x30
 8016e14:	9205      	str	r2, [sp, #20]
 8016e16:	f7f8 fe69 	bl	800faec <ucdr_buffer_remaining>
 8016e1a:	4603      	mov	r3, r0
 8016e1c:	f10d 001d 	add.w	r0, sp, #29
 8016e20:	9a05      	ldr	r2, [sp, #20]
 8016e22:	9000      	str	r0, [sp, #0]
 8016e24:	4640      	mov	r0, r8
 8016e26:	9902      	ldr	r1, [sp, #8]
 8016e28:	f003 f92c 	bl	801a084 <uxr_receive_reliable_message>
 8016e2c:	b1d0      	cbz	r0, 8016e64 <wait_session_status+0x148>
 8016e2e:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8016e32:	2b00      	cmp	r3, #0
 8016e34:	d03a      	beq.n	8016eac <wait_session_status+0x190>
 8016e36:	9f04      	ldr	r7, [sp, #16]
 8016e38:	e00a      	b.n	8016e50 <wait_session_status+0x134>
 8016e3a:	f04f 0302 	mov.w	r3, #2
 8016e3e:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
 8016e42:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 8016e46:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 8016e4a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016e4c:	f7ff fbee 	bl	801662c <read_submessage_list>
 8016e50:	a914      	add	r1, sp, #80	; 0x50
 8016e52:	2204      	movs	r2, #4
 8016e54:	4640      	mov	r0, r8
 8016e56:	f003 f997 	bl	801a188 <uxr_next_input_reliable_buffer_available>
 8016e5a:	4603      	mov	r3, r0
 8016e5c:	a914      	add	r1, sp, #80	; 0x50
 8016e5e:	4620      	mov	r0, r4
 8016e60:	2b00      	cmp	r3, #0
 8016e62:	d1ea      	bne.n	8016e3a <wait_session_status+0x11e>
 8016e64:	4632      	mov	r2, r6
 8016e66:	9904      	ldr	r1, [sp, #16]
 8016e68:	4620      	mov	r0, r4
 8016e6a:	f7ff fa59 	bl	8016320 <write_submessage_acknack.isra.0>
 8016e6e:	e76f      	b.n	8016d50 <wait_session_status+0x34>
 8016e70:	4631      	mov	r1, r6
 8016e72:	f104 0008 	add.w	r0, r4, #8
 8016e76:	f001 f823 	bl	8017ec0 <uxr_get_input_best_effort_stream>
 8016e7a:	2800      	cmp	r0, #0
 8016e7c:	f43f af68 	beq.w	8016d50 <wait_session_status+0x34>
 8016e80:	9902      	ldr	r1, [sp, #8]
 8016e82:	f003 f875 	bl	8019f70 <uxr_receive_best_effort_message>
 8016e86:	2800      	cmp	r0, #0
 8016e88:	f43f af62 	beq.w	8016d50 <wait_session_status+0x34>
 8016e8c:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 8016e90:	a90c      	add	r1, sp, #48	; 0x30
 8016e92:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016e94:	4620      	mov	r0, r4
 8016e96:	f7ff fbc9 	bl	801662c <read_submessage_list>
 8016e9a:	e759      	b.n	8016d50 <wait_session_status+0x34>
 8016e9c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8016e9e:	e9d3 0400 	ldrd	r0, r4, [r3]
 8016ea2:	47a0      	blx	r4
 8016ea4:	2001      	movs	r0, #1
 8016ea6:	b01d      	add	sp, #116	; 0x74
 8016ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016eac:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 8016eb0:	a90c      	add	r1, sp, #48	; 0x30
 8016eb2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016eb4:	4620      	mov	r0, r4
 8016eb6:	f7ff fbb9 	bl	801662c <read_submessage_list>
 8016eba:	e7bc      	b.n	8016e36 <wait_session_status+0x11a>

08016ebc <uxr_delete_session_retries>:
 8016ebc:	b530      	push	{r4, r5, lr}
 8016ebe:	b08f      	sub	sp, #60	; 0x3c
 8016ec0:	4604      	mov	r4, r0
 8016ec2:	460d      	mov	r5, r1
 8016ec4:	f000 fa34 	bl	8017330 <uxr_session_header_offset>
 8016ec8:	2300      	movs	r3, #0
 8016eca:	2210      	movs	r2, #16
 8016ecc:	a902      	add	r1, sp, #8
 8016ece:	9000      	str	r0, [sp, #0]
 8016ed0:	a806      	add	r0, sp, #24
 8016ed2:	f7f8 fdc7 	bl	800fa64 <ucdr_init_buffer_origin_offset>
 8016ed6:	a906      	add	r1, sp, #24
 8016ed8:	4620      	mov	r0, r4
 8016eda:	f000 f979 	bl	80171d0 <uxr_buffer_delete_session>
 8016ede:	2200      	movs	r2, #0
 8016ee0:	9b06      	ldr	r3, [sp, #24]
 8016ee2:	4620      	mov	r0, r4
 8016ee4:	4611      	mov	r1, r2
 8016ee6:	f000 f9cf 	bl	8017288 <uxr_stamp_session_header>
 8016eea:	a806      	add	r0, sp, #24
 8016eec:	f7f8 fdfa 	bl	800fae4 <ucdr_buffer_length>
 8016ef0:	462b      	mov	r3, r5
 8016ef2:	4602      	mov	r2, r0
 8016ef4:	a902      	add	r1, sp, #8
 8016ef6:	4620      	mov	r0, r4
 8016ef8:	f7ff ff10 	bl	8016d1c <wait_session_status>
 8016efc:	b118      	cbz	r0, 8016f06 <uxr_delete_session_retries+0x4a>
 8016efe:	7960      	ldrb	r0, [r4, #5]
 8016f00:	fab0 f080 	clz	r0, r0
 8016f04:	0940      	lsrs	r0, r0, #5
 8016f06:	b00f      	add	sp, #60	; 0x3c
 8016f08:	bd30      	pop	{r4, r5, pc}
 8016f0a:	bf00      	nop

08016f0c <uxr_create_session>:
 8016f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f10:	f100 0b08 	add.w	fp, r0, #8
 8016f14:	4604      	mov	r4, r0
 8016f16:	b0ab      	sub	sp, #172	; 0xac
 8016f18:	4658      	mov	r0, fp
 8016f1a:	465e      	mov	r6, fp
 8016f1c:	f000 ff22 	bl	8017d64 <uxr_reset_stream_storage>
 8016f20:	4620      	mov	r0, r4
 8016f22:	f000 fa05 	bl	8017330 <uxr_session_header_offset>
 8016f26:	2300      	movs	r3, #0
 8016f28:	221c      	movs	r2, #28
 8016f2a:	a90b      	add	r1, sp, #44	; 0x2c
 8016f2c:	9000      	str	r0, [sp, #0]
 8016f2e:	a812      	add	r0, sp, #72	; 0x48
 8016f30:	f7f8 fd98 	bl	800fa64 <ucdr_init_buffer_origin_offset>
 8016f34:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8016f36:	a912      	add	r1, sp, #72	; 0x48
 8016f38:	4620      	mov	r0, r4
 8016f3a:	8a1a      	ldrh	r2, [r3, #16]
 8016f3c:	3a04      	subs	r2, #4
 8016f3e:	b292      	uxth	r2, r2
 8016f40:	f000 f91c 	bl	801717c <uxr_buffer_create_session>
 8016f44:	9912      	ldr	r1, [sp, #72]	; 0x48
 8016f46:	4620      	mov	r0, r4
 8016f48:	f000 f98a 	bl	8017260 <uxr_stamp_create_session_header>
 8016f4c:	a812      	add	r0, sp, #72	; 0x48
 8016f4e:	f7f8 fdc9 	bl	800fae4 <ucdr_buffer_length>
 8016f52:	23ff      	movs	r3, #255	; 0xff
 8016f54:	4681      	mov	r9, r0
 8016f56:	7163      	strb	r3, [r4, #5]
 8016f58:	230a      	movs	r3, #10
 8016f5a:	9303      	str	r3, [sp, #12]
 8016f5c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8016f5e:	464a      	mov	r2, r9
 8016f60:	a90b      	add	r1, sp, #44	; 0x2c
 8016f62:	e9d3 0500 	ldrd	r0, r5, [r3]
 8016f66:	47a8      	blx	r5
 8016f68:	f001 f81c 	bl	8017fa4 <uxr_millis>
 8016f6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8016f70:	4605      	mov	r5, r0
 8016f72:	e009      	b.n	8016f88 <uxr_create_session+0x7c>
 8016f74:	f001 f816 	bl	8017fa4 <uxr_millis>
 8016f78:	1b40      	subs	r0, r0, r5
 8016f7a:	7962      	ldrb	r2, [r4, #5]
 8016f7c:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8016f80:	2b00      	cmp	r3, #0
 8016f82:	dd38      	ble.n	8016ff6 <uxr_create_session+0xea>
 8016f84:	2aff      	cmp	r2, #255	; 0xff
 8016f86:	d13c      	bne.n	8017002 <uxr_create_session+0xf6>
 8016f88:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8016f8a:	a907      	add	r1, sp, #28
 8016f8c:	6897      	ldr	r7, [r2, #8]
 8016f8e:	6810      	ldr	r0, [r2, #0]
 8016f90:	aa08      	add	r2, sp, #32
 8016f92:	47b8      	blx	r7
 8016f94:	2800      	cmp	r0, #0
 8016f96:	d0ed      	beq.n	8016f74 <uxr_create_session+0x68>
 8016f98:	a81a      	add	r0, sp, #104	; 0x68
 8016f9a:	2700      	movs	r7, #0
 8016f9c:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8016fa0:	f7f8 fd72 	bl	800fa88 <ucdr_init_buffer>
 8016fa4:	f10d 031a 	add.w	r3, sp, #26
 8016fa8:	aa06      	add	r2, sp, #24
 8016faa:	a91a      	add	r1, sp, #104	; 0x68
 8016fac:	4620      	mov	r0, r4
 8016fae:	f88d 7018 	strb.w	r7, [sp, #24]
 8016fb2:	f000 f97d 	bl	80172b0 <uxr_read_session_header>
 8016fb6:	2800      	cmp	r0, #0
 8016fb8:	d0dc      	beq.n	8016f74 <uxr_create_session+0x68>
 8016fba:	4639      	mov	r1, r7
 8016fbc:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8016fc0:	f000 fe9a 	bl	8017cf8 <uxr_stream_id_from_raw>
 8016fc4:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8016fc8:	f8bd b01a 	ldrh.w	fp, [sp, #26]
 8016fcc:	f3c0 2807 	ubfx	r8, r0, #8, #8
 8016fd0:	2f01      	cmp	r7, #1
 8016fd2:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 8016fd6:	d053      	beq.n	8017080 <uxr_create_session+0x174>
 8016fd8:	2f02      	cmp	r7, #2
 8016fda:	d018      	beq.n	801700e <uxr_create_session+0x102>
 8016fdc:	2f00      	cmp	r7, #0
 8016fde:	d1c9      	bne.n	8016f74 <uxr_create_session+0x68>
 8016fe0:	4639      	mov	r1, r7
 8016fe2:	4638      	mov	r0, r7
 8016fe4:	f000 fe88 	bl	8017cf8 <uxr_stream_id_from_raw>
 8016fe8:	a91a      	add	r1, sp, #104	; 0x68
 8016fea:	4602      	mov	r2, r0
 8016fec:	900a      	str	r0, [sp, #40]	; 0x28
 8016fee:	4620      	mov	r0, r4
 8016ff0:	f7ff fb1c 	bl	801662c <read_submessage_list>
 8016ff4:	e7be      	b.n	8016f74 <uxr_create_session+0x68>
 8016ff6:	9b03      	ldr	r3, [sp, #12]
 8016ff8:	3b01      	subs	r3, #1
 8016ffa:	9303      	str	r3, [sp, #12]
 8016ffc:	d001      	beq.n	8017002 <uxr_create_session+0xf6>
 8016ffe:	2aff      	cmp	r2, #255	; 0xff
 8017000:	d0ac      	beq.n	8016f5c <uxr_create_session+0x50>
 8017002:	2a00      	cmp	r2, #0
 8017004:	d051      	beq.n	80170aa <uxr_create_session+0x19e>
 8017006:	2000      	movs	r0, #0
 8017008:	b02b      	add	sp, #172	; 0xac
 801700a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801700e:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8017012:	4641      	mov	r1, r8
 8017014:	4630      	mov	r0, r6
 8017016:	9304      	str	r3, [sp, #16]
 8017018:	f000 ff5c 	bl	8017ed4 <uxr_get_input_reliable_stream>
 801701c:	4682      	mov	sl, r0
 801701e:	b348      	cbz	r0, 8017074 <uxr_create_session+0x168>
 8017020:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8017022:	a81a      	add	r0, sp, #104	; 0x68
 8017024:	9205      	str	r2, [sp, #20]
 8017026:	f7f8 fd61 	bl	800faec <ucdr_buffer_remaining>
 801702a:	4603      	mov	r3, r0
 801702c:	f10d 0019 	add.w	r0, sp, #25
 8017030:	9a05      	ldr	r2, [sp, #20]
 8017032:	4659      	mov	r1, fp
 8017034:	9000      	str	r0, [sp, #0]
 8017036:	4650      	mov	r0, sl
 8017038:	f003 f824 	bl	801a084 <uxr_receive_reliable_message>
 801703c:	b1d0      	cbz	r0, 8017074 <uxr_create_session+0x168>
 801703e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8017042:	2b00      	cmp	r3, #0
 8017044:	d038      	beq.n	80170b8 <uxr_create_session+0x1ac>
 8017046:	9f04      	ldr	r7, [sp, #16]
 8017048:	e00a      	b.n	8017060 <uxr_create_session+0x154>
 801704a:	f04f 0302 	mov.w	r3, #2
 801704e:	f88d 7028 	strb.w	r7, [sp, #40]	; 0x28
 8017052:	f88d 8029 	strb.w	r8, [sp, #41]	; 0x29
 8017056:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801705a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801705c:	f7ff fae6 	bl	801662c <read_submessage_list>
 8017060:	a922      	add	r1, sp, #136	; 0x88
 8017062:	2204      	movs	r2, #4
 8017064:	4650      	mov	r0, sl
 8017066:	f003 f88f 	bl	801a188 <uxr_next_input_reliable_buffer_available>
 801706a:	4603      	mov	r3, r0
 801706c:	a922      	add	r1, sp, #136	; 0x88
 801706e:	4620      	mov	r0, r4
 8017070:	2b00      	cmp	r3, #0
 8017072:	d1ea      	bne.n	801704a <uxr_create_session+0x13e>
 8017074:	4642      	mov	r2, r8
 8017076:	9904      	ldr	r1, [sp, #16]
 8017078:	4620      	mov	r0, r4
 801707a:	f7ff f951 	bl	8016320 <write_submessage_acknack.isra.0>
 801707e:	e779      	b.n	8016f74 <uxr_create_session+0x68>
 8017080:	4641      	mov	r1, r8
 8017082:	4630      	mov	r0, r6
 8017084:	f000 ff1c 	bl	8017ec0 <uxr_get_input_best_effort_stream>
 8017088:	2800      	cmp	r0, #0
 801708a:	f43f af73 	beq.w	8016f74 <uxr_create_session+0x68>
 801708e:	4659      	mov	r1, fp
 8017090:	f002 ff6e 	bl	8019f70 <uxr_receive_best_effort_message>
 8017094:	2800      	cmp	r0, #0
 8017096:	f43f af6d 	beq.w	8016f74 <uxr_create_session+0x68>
 801709a:	f88d 702a 	strb.w	r7, [sp, #42]	; 0x2a
 801709e:	a91a      	add	r1, sp, #104	; 0x68
 80170a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80170a2:	4620      	mov	r0, r4
 80170a4:	f7ff fac2 	bl	801662c <read_submessage_list>
 80170a8:	e764      	b.n	8016f74 <uxr_create_session+0x68>
 80170aa:	4630      	mov	r0, r6
 80170ac:	f000 fe5a 	bl	8017d64 <uxr_reset_stream_storage>
 80170b0:	2001      	movs	r0, #1
 80170b2:	b02b      	add	sp, #172	; 0xac
 80170b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80170b8:	f88d 702a 	strb.w	r7, [sp, #42]	; 0x2a
 80170bc:	a91a      	add	r1, sp, #104	; 0x68
 80170be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80170c0:	4620      	mov	r0, r4
 80170c2:	f7ff fab3 	bl	801662c <read_submessage_list>
 80170c6:	e7be      	b.n	8017046 <uxr_create_session+0x13a>

080170c8 <uxr_prepare_stream_to_write_submessage>:
 80170c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80170cc:	b082      	sub	sp, #8
 80170ce:	4604      	mov	r4, r0
 80170d0:	4610      	mov	r0, r2
 80170d2:	4615      	mov	r5, r2
 80170d4:	461e      	mov	r6, r3
 80170d6:	f3c1 2a07 	ubfx	sl, r1, #8, #8
 80170da:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 80170de:	f105 0904 	add.w	r9, r5, #4
 80170e2:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 80170e6:	9101      	str	r1, [sp, #4]
 80170e8:	f000 ff56 	bl	8017f98 <uxr_submessage_padding>
 80170ec:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80170f0:	4481      	add	r9, r0
 80170f2:	2b01      	cmp	r3, #1
 80170f4:	d01d      	beq.n	8017132 <uxr_prepare_stream_to_write_submessage+0x6a>
 80170f6:	2b02      	cmp	r3, #2
 80170f8:	d116      	bne.n	8017128 <uxr_prepare_stream_to_write_submessage+0x60>
 80170fa:	f104 0008 	add.w	r0, r4, #8
 80170fe:	4651      	mov	r1, sl
 8017100:	f000 fed2 	bl	8017ea8 <uxr_get_output_reliable_stream>
 8017104:	4604      	mov	r4, r0
 8017106:	b158      	cbz	r0, 8017120 <uxr_prepare_stream_to_write_submessage+0x58>
 8017108:	4649      	mov	r1, r9
 801710a:	4632      	mov	r2, r6
 801710c:	f003 fa02 	bl	801a514 <uxr_prepare_reliable_buffer_to_write>
 8017110:	4604      	mov	r4, r0
 8017112:	b12c      	cbz	r4, 8017120 <uxr_prepare_stream_to_write_submessage+0x58>
 8017114:	4643      	mov	r3, r8
 8017116:	b2aa      	uxth	r2, r5
 8017118:	4639      	mov	r1, r7
 801711a:	4630      	mov	r0, r6
 801711c:	f000 fefc 	bl	8017f18 <uxr_buffer_submessage_header>
 8017120:	4620      	mov	r0, r4
 8017122:	b002      	add	sp, #8
 8017124:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017128:	2400      	movs	r4, #0
 801712a:	4620      	mov	r0, r4
 801712c:	b002      	add	sp, #8
 801712e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017132:	f104 0008 	add.w	r0, r4, #8
 8017136:	4651      	mov	r1, sl
 8017138:	f000 feae 	bl	8017e98 <uxr_get_output_best_effort_stream>
 801713c:	4604      	mov	r4, r0
 801713e:	2800      	cmp	r0, #0
 8017140:	d0ee      	beq.n	8017120 <uxr_prepare_stream_to_write_submessage+0x58>
 8017142:	4649      	mov	r1, r9
 8017144:	4632      	mov	r2, r6
 8017146:	f003 f90f 	bl	801a368 <uxr_prepare_best_effort_buffer_to_write>
 801714a:	4604      	mov	r4, r0
 801714c:	e7e1      	b.n	8017112 <uxr_prepare_stream_to_write_submessage+0x4a>
 801714e:	bf00      	nop

08017150 <uxr_init_session_info>:
 8017150:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8017154:	23ff      	movs	r3, #255	; 0xff
 8017156:	7102      	strb	r2, [r0, #4]
 8017158:	f880 c001 	strb.w	ip, [r0, #1]
 801715c:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8017160:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8017164:	7001      	strb	r1, [r0, #0]
 8017166:	f880 c002 	strb.w	ip, [r0, #2]
 801716a:	7143      	strb	r3, [r0, #5]
 801716c:	70c2      	strb	r2, [r0, #3]
 801716e:	b500      	push	{lr}
 8017170:	f04f 0e09 	mov.w	lr, #9
 8017174:	f8a0 e006 	strh.w	lr, [r0, #6]
 8017178:	f85d fb04 	ldr.w	pc, [sp], #4

0801717c <uxr_buffer_create_session>:
 801717c:	b530      	push	{r4, r5, lr}
 801717e:	2300      	movs	r3, #0
 8017180:	b089      	sub	sp, #36	; 0x24
 8017182:	4d12      	ldr	r5, [pc, #72]	; (80171cc <uxr_buffer_create_session+0x50>)
 8017184:	460c      	mov	r4, r1
 8017186:	9307      	str	r3, [sp, #28]
 8017188:	4619      	mov	r1, r3
 801718a:	f8ad 201c 	strh.w	r2, [sp, #28]
 801718e:	2201      	movs	r2, #1
 8017190:	9301      	str	r3, [sp, #4]
 8017192:	80c2      	strh	r2, [r0, #6]
 8017194:	f88d 2004 	strb.w	r2, [sp, #4]
 8017198:	682a      	ldr	r2, [r5, #0]
 801719a:	9303      	str	r3, [sp, #12]
 801719c:	9200      	str	r2, [sp, #0]
 801719e:	88aa      	ldrh	r2, [r5, #4]
 80171a0:	9306      	str	r3, [sp, #24]
 80171a2:	f8ad 2006 	strh.w	r2, [sp, #6]
 80171a6:	f8d0 2001 	ldr.w	r2, [r0, #1]
 80171aa:	9202      	str	r2, [sp, #8]
 80171ac:	7802      	ldrb	r2, [r0, #0]
 80171ae:	4620      	mov	r0, r4
 80171b0:	f88d 200c 	strb.w	r2, [sp, #12]
 80171b4:	2210      	movs	r2, #16
 80171b6:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80171ba:	f000 fead 	bl	8017f18 <uxr_buffer_submessage_header>
 80171be:	4669      	mov	r1, sp
 80171c0:	4620      	mov	r0, r4
 80171c2:	f001 fcdd 	bl	8018b80 <uxr_serialize_CREATE_CLIENT_Payload>
 80171c6:	b009      	add	sp, #36	; 0x24
 80171c8:	bd30      	pop	{r4, r5, pc}
 80171ca:	bf00      	nop
 80171cc:	0801c428 	.word	0x0801c428

080171d0 <uxr_buffer_delete_session>:
 80171d0:	4a0c      	ldr	r2, [pc, #48]	; (8017204 <uxr_buffer_delete_session+0x34>)
 80171d2:	2302      	movs	r3, #2
 80171d4:	f44f 7c00 	mov.w	ip, #512	; 0x200
 80171d8:	b510      	push	{r4, lr}
 80171da:	460c      	mov	r4, r1
 80171dc:	b082      	sub	sp, #8
 80171de:	8911      	ldrh	r1, [r2, #8]
 80171e0:	2204      	movs	r2, #4
 80171e2:	80c3      	strh	r3, [r0, #6]
 80171e4:	2300      	movs	r3, #0
 80171e6:	f8ad 1006 	strh.w	r1, [sp, #6]
 80171ea:	4620      	mov	r0, r4
 80171ec:	2103      	movs	r1, #3
 80171ee:	f8ad c004 	strh.w	ip, [sp, #4]
 80171f2:	f000 fe91 	bl	8017f18 <uxr_buffer_submessage_header>
 80171f6:	a901      	add	r1, sp, #4
 80171f8:	4620      	mov	r0, r4
 80171fa:	f001 fd69 	bl	8018cd0 <uxr_serialize_DELETE_Payload>
 80171fe:	b002      	add	sp, #8
 8017200:	bd10      	pop	{r4, pc}
 8017202:	bf00      	nop
 8017204:	0801c428 	.word	0x0801c428

08017208 <uxr_read_create_session_status>:
 8017208:	b510      	push	{r4, lr}
 801720a:	460b      	mov	r3, r1
 801720c:	b088      	sub	sp, #32
 801720e:	4604      	mov	r4, r0
 8017210:	a901      	add	r1, sp, #4
 8017212:	4618      	mov	r0, r3
 8017214:	f001 fd6c 	bl	8018cf0 <uxr_deserialize_STATUS_AGENT_Payload>
 8017218:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801721c:	7163      	strb	r3, [r4, #5]
 801721e:	b008      	add	sp, #32
 8017220:	bd10      	pop	{r4, pc}
 8017222:	bf00      	nop

08017224 <uxr_read_delete_session_status>:
 8017224:	b510      	push	{r4, lr}
 8017226:	b084      	sub	sp, #16
 8017228:	4604      	mov	r4, r0
 801722a:	4608      	mov	r0, r1
 801722c:	a902      	add	r1, sp, #8
 801722e:	f001 fd8f 	bl	8018d50 <uxr_deserialize_STATUS_Payload>
 8017232:	88e3      	ldrh	r3, [r4, #6]
 8017234:	2b02      	cmp	r3, #2
 8017236:	d001      	beq.n	801723c <uxr_read_delete_session_status+0x18>
 8017238:	b004      	add	sp, #16
 801723a:	bd10      	pop	{r4, pc}
 801723c:	f10d 000a 	add.w	r0, sp, #10
 8017240:	f7fe fec4 	bl	8015fcc <uxr_object_id_from_raw>
 8017244:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8017248:	f89d 3009 	ldrb.w	r3, [sp, #9]
 801724c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8017250:	b29b      	uxth	r3, r3
 8017252:	2b02      	cmp	r3, #2
 8017254:	d1f0      	bne.n	8017238 <uxr_read_delete_session_status+0x14>
 8017256:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801725a:	7163      	strb	r3, [r4, #5]
 801725c:	e7ec      	b.n	8017238 <uxr_read_delete_session_status+0x14>
 801725e:	bf00      	nop

08017260 <uxr_stamp_create_session_header>:
 8017260:	b510      	push	{r4, lr}
 8017262:	2208      	movs	r2, #8
 8017264:	b08a      	sub	sp, #40	; 0x28
 8017266:	4604      	mov	r4, r0
 8017268:	eb0d 0002 	add.w	r0, sp, r2
 801726c:	f7f8 fc0c 	bl	800fa88 <ucdr_init_buffer>
 8017270:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017274:	2300      	movs	r3, #0
 8017276:	a802      	add	r0, sp, #8
 8017278:	f001 0180 	and.w	r1, r1, #128	; 0x80
 801727c:	9400      	str	r4, [sp, #0]
 801727e:	461a      	mov	r2, r3
 8017280:	f001 f846 	bl	8018310 <uxr_serialize_message_header>
 8017284:	b00a      	add	sp, #40	; 0x28
 8017286:	bd10      	pop	{r4, pc}

08017288 <uxr_stamp_session_header>:
 8017288:	b530      	push	{r4, r5, lr}
 801728a:	b08d      	sub	sp, #52	; 0x34
 801728c:	4604      	mov	r4, r0
 801728e:	460d      	mov	r5, r1
 8017290:	4619      	mov	r1, r3
 8017292:	a804      	add	r0, sp, #16
 8017294:	9203      	str	r2, [sp, #12]
 8017296:	2208      	movs	r2, #8
 8017298:	f7f8 fbf6 	bl	800fa88 <ucdr_init_buffer>
 801729c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80172a0:	9b03      	ldr	r3, [sp, #12]
 80172a2:	462a      	mov	r2, r5
 80172a4:	a804      	add	r0, sp, #16
 80172a6:	9400      	str	r4, [sp, #0]
 80172a8:	f001 f832 	bl	8018310 <uxr_serialize_message_header>
 80172ac:	b00d      	add	sp, #52	; 0x34
 80172ae:	bd30      	pop	{r4, r5, pc}

080172b0 <uxr_read_session_header>:
 80172b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80172b4:	4607      	mov	r7, r0
 80172b6:	b084      	sub	sp, #16
 80172b8:	4608      	mov	r0, r1
 80172ba:	460c      	mov	r4, r1
 80172bc:	4615      	mov	r5, r2
 80172be:	461e      	mov	r6, r3
 80172c0:	f7f8 fc14 	bl	800faec <ucdr_buffer_remaining>
 80172c4:	2808      	cmp	r0, #8
 80172c6:	d803      	bhi.n	80172d0 <uxr_read_session_header+0x20>
 80172c8:	2000      	movs	r0, #0
 80172ca:	b004      	add	sp, #16
 80172cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80172d0:	f10d 080c 	add.w	r8, sp, #12
 80172d4:	4633      	mov	r3, r6
 80172d6:	462a      	mov	r2, r5
 80172d8:	4620      	mov	r0, r4
 80172da:	f10d 010b 	add.w	r1, sp, #11
 80172de:	f8cd 8000 	str.w	r8, [sp]
 80172e2:	f001 f833 	bl	801834c <uxr_deserialize_message_header>
 80172e6:	783a      	ldrb	r2, [r7, #0]
 80172e8:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80172ec:	4293      	cmp	r3, r2
 80172ee:	d1eb      	bne.n	80172c8 <uxr_read_session_header+0x18>
 80172f0:	061b      	lsls	r3, r3, #24
 80172f2:	d41b      	bmi.n	801732c <uxr_read_session_header+0x7c>
 80172f4:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80172f8:	787b      	ldrb	r3, [r7, #1]
 80172fa:	429a      	cmp	r2, r3
 80172fc:	d003      	beq.n	8017306 <uxr_read_session_header+0x56>
 80172fe:	2001      	movs	r0, #1
 8017300:	f080 0001 	eor.w	r0, r0, #1
 8017304:	e7e1      	b.n	80172ca <uxr_read_session_header+0x1a>
 8017306:	f89d 200d 	ldrb.w	r2, [sp, #13]
 801730a:	1cb8      	adds	r0, r7, #2
 801730c:	78bb      	ldrb	r3, [r7, #2]
 801730e:	429a      	cmp	r2, r3
 8017310:	d1f5      	bne.n	80172fe <uxr_read_session_header+0x4e>
 8017312:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8017316:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 801731a:	429a      	cmp	r2, r3
 801731c:	d1ef      	bne.n	80172fe <uxr_read_session_header+0x4e>
 801731e:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8017322:	7843      	ldrb	r3, [r0, #1]
 8017324:	429a      	cmp	r2, r3
 8017326:	d1ea      	bne.n	80172fe <uxr_read_session_header+0x4e>
 8017328:	2000      	movs	r0, #0
 801732a:	e7e9      	b.n	8017300 <uxr_read_session_header+0x50>
 801732c:	2001      	movs	r0, #1
 801732e:	e7cc      	b.n	80172ca <uxr_read_session_header+0x1a>

08017330 <uxr_session_header_offset>:
 8017330:	f990 3000 	ldrsb.w	r3, [r0]
 8017334:	2b00      	cmp	r3, #0
 8017336:	bfac      	ite	ge
 8017338:	2008      	movge	r0, #8
 801733a:	2004      	movlt	r0, #4
 801733c:	4770      	bx	lr
 801733e:	bf00      	nop

08017340 <uxr_init_base_object_request>:
 8017340:	b510      	push	{r4, lr}
 8017342:	b082      	sub	sp, #8
 8017344:	f64f 74f4 	movw	r4, #65524	; 0xfff4
 8017348:	9101      	str	r1, [sp, #4]
 801734a:	88c3      	ldrh	r3, [r0, #6]
 801734c:	f1a3 010a 	sub.w	r1, r3, #10
 8017350:	b289      	uxth	r1, r1
 8017352:	42a1      	cmp	r1, r4
 8017354:	d80f      	bhi.n	8017376 <uxr_init_base_object_request+0x36>
 8017356:	3301      	adds	r3, #1
 8017358:	b29c      	uxth	r4, r3
 801735a:	f3c3 2c07 	ubfx	ip, r3, #8, #8
 801735e:	b2db      	uxtb	r3, r3
 8017360:	80c4      	strh	r4, [r0, #6]
 8017362:	1c91      	adds	r1, r2, #2
 8017364:	9801      	ldr	r0, [sp, #4]
 8017366:	f882 c000 	strb.w	ip, [r2]
 801736a:	7053      	strb	r3, [r2, #1]
 801736c:	f7fe fe42 	bl	8015ff4 <uxr_object_id_to_raw>
 8017370:	4620      	mov	r0, r4
 8017372:	b002      	add	sp, #8
 8017374:	bd10      	pop	{r4, pc}
 8017376:	230a      	movs	r3, #10
 8017378:	f04f 0c00 	mov.w	ip, #0
 801737c:	461c      	mov	r4, r3
 801737e:	e7ef      	b.n	8017360 <uxr_init_base_object_request+0x20>

08017380 <uxr_parse_base_object_request>:
 8017380:	b570      	push	{r4, r5, r6, lr}
 8017382:	4604      	mov	r4, r0
 8017384:	3002      	adds	r0, #2
 8017386:	460d      	mov	r5, r1
 8017388:	4616      	mov	r6, r2
 801738a:	f7fe fe1f 	bl	8015fcc <uxr_object_id_from_raw>
 801738e:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8017392:	8028      	strh	r0, [r5, #0]
 8017394:	806b      	strh	r3, [r5, #2]
 8017396:	7822      	ldrb	r2, [r4, #0]
 8017398:	7863      	ldrb	r3, [r4, #1]
 801739a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801739e:	8033      	strh	r3, [r6, #0]
 80173a0:	bd70      	pop	{r4, r5, r6, pc}
 80173a2:	bf00      	nop

080173a4 <uxr_init_framing_io>:
 80173a4:	2300      	movs	r3, #0
 80173a6:	7041      	strb	r1, [r0, #1]
 80173a8:	7003      	strb	r3, [r0, #0]
 80173aa:	8583      	strh	r3, [r0, #44]	; 0x2c
 80173ac:	4770      	bx	lr
 80173ae:	bf00      	nop

080173b0 <uxr_write_framed_msg>:
 80173b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80173b4:	4617      	mov	r7, r2
 80173b6:	7842      	ldrb	r2, [r0, #1]
 80173b8:	460e      	mov	r6, r1
 80173ba:	b083      	sub	sp, #12
 80173bc:	f1a2 017d 	sub.w	r1, r2, #125	; 0x7d
 80173c0:	469b      	mov	fp, r3
 80173c2:	237e      	movs	r3, #126	; 0x7e
 80173c4:	4604      	mov	r4, r0
 80173c6:	2901      	cmp	r1, #1
 80173c8:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 80173cc:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 80173d0:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 80173d4:	f240 8115 	bls.w	8017602 <uxr_write_framed_msg+0x252>
 80173d8:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 80173dc:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
 80173e0:	2202      	movs	r2, #2
 80173e2:	2901      	cmp	r1, #1
 80173e4:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80173e8:	d952      	bls.n	8017490 <uxr_write_framed_msg+0xe0>
 80173ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80173ec:	2103      	movs	r1, #3
 80173ee:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 80173f2:	b2dd      	uxtb	r5, r3
 80173f4:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 80173f8:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 80173fc:	2a01      	cmp	r2, #1
 80173fe:	d95c      	bls.n	80174ba <uxr_write_framed_msg+0x10a>
 8017400:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017402:	1862      	adds	r2, r4, r1
 8017404:	3101      	adds	r1, #1
 8017406:	f3c3 2007 	ubfx	r0, r3, #8, #8
 801740a:	f882 5038 	strb.w	r5, [r2, #56]	; 0x38
 801740e:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 8017412:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 8017416:	2a01      	cmp	r2, #1
 8017418:	d961      	bls.n	80174de <uxr_write_framed_msg+0x12e>
 801741a:	1c4a      	adds	r2, r1, #1
 801741c:	4421      	add	r1, r4
 801741e:	b2d2      	uxtb	r2, r2
 8017420:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
 8017424:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8017428:	2b00      	cmp	r3, #0
 801742a:	d06a      	beq.n	8017502 <uxr_write_framed_msg+0x152>
 801742c:	f04f 0800 	mov.w	r8, #0
 8017430:	46c1      	mov	r9, r8
 8017432:	e016      	b.n	8017462 <uxr_write_framed_msg+0xb2>
 8017434:	2a29      	cmp	r2, #41	; 0x29
 8017436:	d868      	bhi.n	801750a <uxr_write_framed_msg+0x15a>
 8017438:	18a0      	adds	r0, r4, r2
 801743a:	3201      	adds	r2, #1
 801743c:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 8017440:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8017444:	ea88 0101 	eor.w	r1, r8, r1
 8017448:	4b7d      	ldr	r3, [pc, #500]	; (8017640 <uxr_write_framed_msg+0x290>)
 801744a:	f109 0901 	add.w	r9, r9, #1
 801744e:	b2c9      	uxtb	r1, r1
 8017450:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 8017454:	ea82 2818 	eor.w	r8, r2, r8, lsr #8
 8017458:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801745a:	454b      	cmp	r3, r9
 801745c:	d969      	bls.n	8017532 <uxr_write_framed_msg+0x182>
 801745e:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8017462:	f81b 1009 	ldrb.w	r1, [fp, r9]
 8017466:	f1a1 007d 	sub.w	r0, r1, #125	; 0x7d
 801746a:	2801      	cmp	r0, #1
 801746c:	d8e2      	bhi.n	8017434 <uxr_write_framed_msg+0x84>
 801746e:	1c50      	adds	r0, r2, #1
 8017470:	b2c0      	uxtb	r0, r0
 8017472:	2829      	cmp	r0, #41	; 0x29
 8017474:	d849      	bhi.n	801750a <uxr_write_framed_msg+0x15a>
 8017476:	18a0      	adds	r0, r4, r2
 8017478:	f04f 037d 	mov.w	r3, #125	; 0x7d
 801747c:	3202      	adds	r2, #2
 801747e:	f081 0520 	eor.w	r5, r1, #32
 8017482:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8017486:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
 801748a:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801748e:	e7d9      	b.n	8017444 <uxr_write_framed_msg+0x94>
 8017490:	2104      	movs	r1, #4
 8017492:	f04f 0c03 	mov.w	ip, #3
 8017496:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017498:	4422      	add	r2, r4
 801749a:	f04f 0e7d 	mov.w	lr, #125	; 0x7d
 801749e:	44a4      	add	ip, r4
 80174a0:	b2dd      	uxtb	r5, r3
 80174a2:	f080 0020 	eor.w	r0, r0, #32
 80174a6:	f882 e038 	strb.w	lr, [r2, #56]	; 0x38
 80174aa:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 80174ae:	f88c 0038 	strb.w	r0, [ip, #56]	; 0x38
 80174b2:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 80174b6:	2a01      	cmp	r2, #1
 80174b8:	d8a2      	bhi.n	8017400 <uxr_write_framed_msg+0x50>
 80174ba:	1862      	adds	r2, r4, r1
 80174bc:	207d      	movs	r0, #125	; 0x7d
 80174be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80174c0:	f085 0520 	eor.w	r5, r5, #32
 80174c4:	f882 0038 	strb.w	r0, [r2, #56]	; 0x38
 80174c8:	3102      	adds	r1, #2
 80174ca:	f3c3 2007 	ubfx	r0, r3, #8, #8
 80174ce:	f882 5039 	strb.w	r5, [r2, #57]	; 0x39
 80174d2:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 80174d6:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 80174da:	2a01      	cmp	r2, #1
 80174dc:	d89d      	bhi.n	801741a <uxr_write_framed_msg+0x6a>
 80174de:	1c4d      	adds	r5, r1, #1
 80174e0:	1c8a      	adds	r2, r1, #2
 80174e2:	f080 0020 	eor.w	r0, r0, #32
 80174e6:	4421      	add	r1, r4
 80174e8:	fa54 f585 	uxtab	r5, r4, r5
 80174ec:	b2d2      	uxtb	r2, r2
 80174ee:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 80174f2:	f881 c038 	strb.w	ip, [r1, #56]	; 0x38
 80174f6:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
 80174fa:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80174fe:	2b00      	cmp	r3, #0
 8017500:	d194      	bne.n	801742c <uxr_write_framed_msg+0x7c>
 8017502:	4619      	mov	r1, r3
 8017504:	f8ad 3004 	strh.w	r3, [sp, #4]
 8017508:	e019      	b.n	801753e <uxr_write_framed_msg+0x18e>
 801750a:	2500      	movs	r5, #0
 801750c:	e000      	b.n	8017510 <uxr_write_framed_msg+0x160>
 801750e:	b160      	cbz	r0, 801752a <uxr_write_framed_msg+0x17a>
 8017510:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8017514:	1b52      	subs	r2, r2, r5
 8017516:	4653      	mov	r3, sl
 8017518:	4638      	mov	r0, r7
 801751a:	4421      	add	r1, r4
 801751c:	47b0      	blx	r6
 801751e:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8017522:	4405      	add	r5, r0
 8017524:	4295      	cmp	r5, r2
 8017526:	d3f2      	bcc.n	801750e <uxr_write_framed_msg+0x15e>
 8017528:	d066      	beq.n	80175f8 <uxr_write_framed_msg+0x248>
 801752a:	2000      	movs	r0, #0
 801752c:	b003      	add	sp, #12
 801752e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017532:	fa5f f188 	uxtb.w	r1, r8
 8017536:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801753a:	f8ad 8004 	strh.w	r8, [sp, #4]
 801753e:	f04f 0900 	mov.w	r9, #0
 8017542:	f04f 0b7d 	mov.w	fp, #125	; 0x7d
 8017546:	46c8      	mov	r8, r9
 8017548:	e013      	b.n	8017572 <uxr_write_framed_msg+0x1c2>
 801754a:	2a29      	cmp	r2, #41	; 0x29
 801754c:	d824      	bhi.n	8017598 <uxr_write_framed_msg+0x1e8>
 801754e:	18a3      	adds	r3, r4, r2
 8017550:	3201      	adds	r2, #1
 8017552:	f883 1038 	strb.w	r1, [r3, #56]	; 0x38
 8017556:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801755a:	f109 0901 	add.w	r9, r9, #1
 801755e:	f1b9 0f02 	cmp.w	r9, #2
 8017562:	d02d      	beq.n	80175c0 <uxr_write_framed_msg+0x210>
 8017564:	f109 0308 	add.w	r3, r9, #8
 8017568:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801756c:	446b      	add	r3, sp
 801756e:	f813 1c04 	ldrb.w	r1, [r3, #-4]
 8017572:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 8017576:	2b01      	cmp	r3, #1
 8017578:	d8e7      	bhi.n	801754a <uxr_write_framed_msg+0x19a>
 801757a:	1c53      	adds	r3, r2, #1
 801757c:	b2db      	uxtb	r3, r3
 801757e:	2b29      	cmp	r3, #41	; 0x29
 8017580:	d80a      	bhi.n	8017598 <uxr_write_framed_msg+0x1e8>
 8017582:	18a3      	adds	r3, r4, r2
 8017584:	f081 0120 	eor.w	r1, r1, #32
 8017588:	3202      	adds	r2, #2
 801758a:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
 801758e:	f883 b038 	strb.w	fp, [r3, #56]	; 0x38
 8017592:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8017596:	e7e0      	b.n	801755a <uxr_write_framed_msg+0x1aa>
 8017598:	2500      	movs	r5, #0
 801759a:	e001      	b.n	80175a0 <uxr_write_framed_msg+0x1f0>
 801759c:	2800      	cmp	r0, #0
 801759e:	d0c4      	beq.n	801752a <uxr_write_framed_msg+0x17a>
 80175a0:	f105 0138 	add.w	r1, r5, #56	; 0x38
 80175a4:	1b52      	subs	r2, r2, r5
 80175a6:	4653      	mov	r3, sl
 80175a8:	4638      	mov	r0, r7
 80175aa:	4421      	add	r1, r4
 80175ac:	47b0      	blx	r6
 80175ae:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 80175b2:	4405      	add	r5, r0
 80175b4:	4295      	cmp	r5, r2
 80175b6:	d3f1      	bcc.n	801759c <uxr_write_framed_msg+0x1ec>
 80175b8:	d1b7      	bne.n	801752a <uxr_write_framed_msg+0x17a>
 80175ba:	f884 8062 	strb.w	r8, [r4, #98]	; 0x62
 80175be:	e7d1      	b.n	8017564 <uxr_write_framed_msg+0x1b4>
 80175c0:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 80175c4:	b19a      	cbz	r2, 80175ee <uxr_write_framed_msg+0x23e>
 80175c6:	2500      	movs	r5, #0
 80175c8:	e001      	b.n	80175ce <uxr_write_framed_msg+0x21e>
 80175ca:	2800      	cmp	r0, #0
 80175cc:	d0ad      	beq.n	801752a <uxr_write_framed_msg+0x17a>
 80175ce:	f105 0138 	add.w	r1, r5, #56	; 0x38
 80175d2:	1b52      	subs	r2, r2, r5
 80175d4:	4653      	mov	r3, sl
 80175d6:	4638      	mov	r0, r7
 80175d8:	4421      	add	r1, r4
 80175da:	47b0      	blx	r6
 80175dc:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 80175e0:	4405      	add	r5, r0
 80175e2:	4295      	cmp	r5, r2
 80175e4:	d3f1      	bcc.n	80175ca <uxr_write_framed_msg+0x21a>
 80175e6:	d1a0      	bne.n	801752a <uxr_write_framed_msg+0x17a>
 80175e8:	2300      	movs	r3, #0
 80175ea:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 80175ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80175f0:	b298      	uxth	r0, r3
 80175f2:	b003      	add	sp, #12
 80175f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80175f8:	f04f 0300 	mov.w	r3, #0
 80175fc:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8017600:	e72a      	b.n	8017458 <uxr_write_framed_msg+0xa8>
 8017602:	217d      	movs	r1, #125	; 0x7d
 8017604:	f082 0220 	eor.w	r2, r2, #32
 8017608:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
 801760c:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 8017610:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
 8017614:	2203      	movs	r2, #3
 8017616:	2901      	cmp	r1, #1
 8017618:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801761c:	d803      	bhi.n	8017626 <uxr_write_framed_msg+0x276>
 801761e:	2105      	movs	r1, #5
 8017620:	f04f 0c04 	mov.w	ip, #4
 8017624:	e737      	b.n	8017496 <uxr_write_framed_msg+0xe6>
 8017626:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017628:	2104      	movs	r1, #4
 801762a:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
 801762e:	b2dd      	uxtb	r5, r3
 8017630:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 8017634:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 8017638:	2a01      	cmp	r2, #1
 801763a:	f63f aee1 	bhi.w	8017400 <uxr_write_framed_msg+0x50>
 801763e:	e73c      	b.n	80174ba <uxr_write_framed_msg+0x10a>
 8017640:	0801d8e0 	.word	0x0801d8e0

08017644 <uxr_framing_read_transport>:
 8017644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017648:	4604      	mov	r4, r0
 801764a:	b085      	sub	sp, #20
 801764c:	4692      	mov	sl, r2
 801764e:	4689      	mov	r9, r1
 8017650:	461d      	mov	r5, r3
 8017652:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8017654:	f000 fca6 	bl	8017fa4 <uxr_millis>
 8017658:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 801765c:	f894 702d 	ldrb.w	r7, [r4, #45]	; 0x2d
 8017660:	4680      	mov	r8, r0
 8017662:	42ba      	cmp	r2, r7
 8017664:	d05f      	beq.n	8017726 <uxr_framing_read_transport+0xe2>
 8017666:	d817      	bhi.n	8017698 <uxr_framing_read_transport+0x54>
 8017668:	3f01      	subs	r7, #1
 801766a:	1aba      	subs	r2, r7, r2
 801766c:	2700      	movs	r7, #0
 801766e:	b2d2      	uxtb	r2, r2
 8017670:	42b2      	cmp	r2, r6
 8017672:	d81a      	bhi.n	80176aa <uxr_framing_read_transport+0x66>
 8017674:	19d3      	adds	r3, r2, r7
 8017676:	42b3      	cmp	r3, r6
 8017678:	d852      	bhi.n	8017720 <uxr_framing_read_transport+0xdc>
 801767a:	b9d2      	cbnz	r2, 80176b2 <uxr_framing_read_transport+0x6e>
 801767c:	2600      	movs	r6, #0
 801767e:	f000 fc91 	bl	8017fa4 <uxr_millis>
 8017682:	682b      	ldr	r3, [r5, #0]
 8017684:	eba0 0008 	sub.w	r0, r0, r8
 8017688:	1a1b      	subs	r3, r3, r0
 801768a:	4630      	mov	r0, r6
 801768c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017690:	602b      	str	r3, [r5, #0]
 8017692:	b005      	add	sp, #20
 8017694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017698:	2f00      	cmp	r7, #0
 801769a:	d060      	beq.n	801775e <uxr_framing_read_transport+0x11a>
 801769c:	f1c2 022a 	rsb	r2, r2, #42	; 0x2a
 80176a0:	3f01      	subs	r7, #1
 80176a2:	b2d2      	uxtb	r2, r2
 80176a4:	b2ff      	uxtb	r7, r7
 80176a6:	42b2      	cmp	r2, r6
 80176a8:	d9e4      	bls.n	8017674 <uxr_framing_read_transport+0x30>
 80176aa:	b2f2      	uxtb	r2, r6
 80176ac:	2700      	movs	r7, #0
 80176ae:	2a00      	cmp	r2, #0
 80176b0:	d0e4      	beq.n	801767c <uxr_framing_read_transport+0x38>
 80176b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80176b4:	4650      	mov	r0, sl
 80176b6:	9203      	str	r2, [sp, #12]
 80176b8:	9300      	str	r3, [sp, #0]
 80176ba:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 80176be:	682b      	ldr	r3, [r5, #0]
 80176c0:	3102      	adds	r1, #2
 80176c2:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 8017768 <uxr_framing_read_transport+0x124>
 80176c6:	4421      	add	r1, r4
 80176c8:	47c8      	blx	r9
 80176ca:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80176ce:	4606      	mov	r6, r0
 80176d0:	4403      	add	r3, r0
 80176d2:	0859      	lsrs	r1, r3, #1
 80176d4:	fbab 2101 	umull	r2, r1, fp, r1
 80176d8:	222a      	movs	r2, #42	; 0x2a
 80176da:	0889      	lsrs	r1, r1, #2
 80176dc:	fb02 3111 	mls	r1, r2, r1, r3
 80176e0:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
 80176e4:	2800      	cmp	r0, #0
 80176e6:	d0c9      	beq.n	801767c <uxr_framing_read_transport+0x38>
 80176e8:	9a03      	ldr	r2, [sp, #12]
 80176ea:	4290      	cmp	r0, r2
 80176ec:	d1c7      	bne.n	801767e <uxr_framing_read_transport+0x3a>
 80176ee:	2f00      	cmp	r7, #0
 80176f0:	d0c5      	beq.n	801767e <uxr_framing_read_transport+0x3a>
 80176f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80176f4:	3102      	adds	r1, #2
 80176f6:	463a      	mov	r2, r7
 80176f8:	4650      	mov	r0, sl
 80176fa:	4421      	add	r1, r4
 80176fc:	9300      	str	r3, [sp, #0]
 80176fe:	2300      	movs	r3, #0
 8017700:	47c8      	blx	r9
 8017702:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8017706:	4406      	add	r6, r0
 8017708:	1813      	adds	r3, r2, r0
 801770a:	085a      	lsrs	r2, r3, #1
 801770c:	fbab 1b02 	umull	r1, fp, fp, r2
 8017710:	222a      	movs	r2, #42	; 0x2a
 8017712:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
 8017716:	fb02 331b 	mls	r3, r2, fp, r3
 801771a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 801771e:	e7ae      	b.n	801767e <uxr_framing_read_transport+0x3a>
 8017720:	1ab6      	subs	r6, r6, r2
 8017722:	b2f7      	uxtb	r7, r6
 8017724:	e7a9      	b.n	801767a <uxr_framing_read_transport+0x36>
 8017726:	2300      	movs	r3, #0
 8017728:	2e28      	cmp	r6, #40	; 0x28
 801772a:	85a3      	strh	r3, [r4, #44]	; 0x2c
 801772c:	d9bd      	bls.n	80176aa <uxr_framing_read_transport+0x66>
 801772e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017730:	2229      	movs	r2, #41	; 0x29
 8017732:	1ca1      	adds	r1, r4, #2
 8017734:	4650      	mov	r0, sl
 8017736:	9300      	str	r3, [sp, #0]
 8017738:	682b      	ldr	r3, [r5, #0]
 801773a:	47c8      	blx	r9
 801773c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8017740:	4606      	mov	r6, r0
 8017742:	212a      	movs	r1, #42	; 0x2a
 8017744:	4403      	add	r3, r0
 8017746:	4808      	ldr	r0, [pc, #32]	; (8017768 <uxr_framing_read_transport+0x124>)
 8017748:	085a      	lsrs	r2, r3, #1
 801774a:	fba0 0202 	umull	r0, r2, r0, r2
 801774e:	0892      	lsrs	r2, r2, #2
 8017750:	fb01 3312 	mls	r3, r1, r2, r3
 8017754:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8017758:	2e00      	cmp	r6, #0
 801775a:	d08f      	beq.n	801767c <uxr_framing_read_transport+0x38>
 801775c:	e78f      	b.n	801767e <uxr_framing_read_transport+0x3a>
 801775e:	f1c2 0229 	rsb	r2, r2, #41	; 0x29
 8017762:	b2d2      	uxtb	r2, r2
 8017764:	e784      	b.n	8017670 <uxr_framing_read_transport+0x2c>
 8017766:	bf00      	nop
 8017768:	30c30c31 	.word	0x30c30c31

0801776c <uxr_read_framed_msg>:
 801776c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017770:	461e      	mov	r6, r3
 8017772:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 8017776:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 801777a:	b083      	sub	sp, #12
 801777c:	4604      	mov	r4, r0
 801777e:	4688      	mov	r8, r1
 8017780:	429d      	cmp	r5, r3
 8017782:	4691      	mov	r9, r2
 8017784:	f000 818c 	beq.w	8017aa0 <uxr_read_framed_msg+0x334>
 8017788:	7823      	ldrb	r3, [r4, #0]
 801778a:	4dc3      	ldr	r5, [pc, #780]	; (8017a98 <uxr_read_framed_msg+0x32c>)
 801778c:	4fc3      	ldr	r7, [pc, #780]	; (8017a9c <uxr_read_framed_msg+0x330>)
 801778e:	2b07      	cmp	r3, #7
 8017790:	d8fd      	bhi.n	801778e <uxr_read_framed_msg+0x22>
 8017792:	e8df f013 	tbh	[pc, r3, lsl #1]
 8017796:	011c      	.short	0x011c
 8017798:	00d900fb 	.word	0x00d900fb
 801779c:	008f00ba 	.word	0x008f00ba
 80177a0:	00320051 	.word	0x00320051
 80177a4:	0008      	.short	0x0008
 80177a6:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 80177aa:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80177ae:	4299      	cmp	r1, r3
 80177b0:	f000 814d 	beq.w	8017a4e <uxr_read_framed_msg+0x2e2>
 80177b4:	18e2      	adds	r2, r4, r3
 80177b6:	7892      	ldrb	r2, [r2, #2]
 80177b8:	2a7d      	cmp	r2, #125	; 0x7d
 80177ba:	f000 81b8 	beq.w	8017b2e <uxr_read_framed_msg+0x3c2>
 80177be:	3301      	adds	r3, #1
 80177c0:	212a      	movs	r1, #42	; 0x2a
 80177c2:	2a7e      	cmp	r2, #126	; 0x7e
 80177c4:	ea4f 0053 	mov.w	r0, r3, lsr #1
 80177c8:	fba5 c000 	umull	ip, r0, r5, r0
 80177cc:	ea4f 0090 	mov.w	r0, r0, lsr #2
 80177d0:	fb01 3310 	mls	r3, r1, r0, r3
 80177d4:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80177d8:	f000 8257 	beq.w	8017c8a <uxr_read_framed_msg+0x51e>
 80177dc:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80177de:	2000      	movs	r0, #0
 80177e0:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 80177e2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80177e6:	7020      	strb	r0, [r4, #0]
 80177e8:	b29b      	uxth	r3, r3
 80177ea:	4299      	cmp	r1, r3
 80177ec:	86a3      	strh	r3, [r4, #52]	; 0x34
 80177ee:	f000 8178 	beq.w	8017ae2 <uxr_read_framed_msg+0x376>
 80177f2:	2000      	movs	r0, #0
 80177f4:	b003      	add	sp, #12
 80177f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80177fa:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 80177fe:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8017802:	4298      	cmp	r0, r3
 8017804:	f000 8132 	beq.w	8017a6c <uxr_read_framed_msg+0x300>
 8017808:	18e2      	adds	r2, r4, r3
 801780a:	7891      	ldrb	r1, [r2, #2]
 801780c:	297d      	cmp	r1, #125	; 0x7d
 801780e:	f000 8170 	beq.w	8017af2 <uxr_read_framed_msg+0x386>
 8017812:	3301      	adds	r3, #1
 8017814:	202a      	movs	r0, #42	; 0x2a
 8017816:	297e      	cmp	r1, #126	; 0x7e
 8017818:	ea4f 0253 	mov.w	r2, r3, lsr #1
 801781c:	fba5 c202 	umull	ip, r2, r5, r2
 8017820:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8017824:	fb00 3312 	mls	r3, r0, r2, r3
 8017828:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801782c:	f000 821d 	beq.w	8017c6a <uxr_read_framed_msg+0x4fe>
 8017830:	2307      	movs	r3, #7
 8017832:	86a1      	strh	r1, [r4, #52]	; 0x34
 8017834:	7023      	strb	r3, [r4, #0]
 8017836:	e7aa      	b.n	801778e <uxr_read_framed_msg+0x22>
 8017838:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 801783a:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 801783e:	459e      	cmp	lr, r3
 8017840:	d827      	bhi.n	8017892 <uxr_read_framed_msg+0x126>
 8017842:	e032      	b.n	80178aa <uxr_read_framed_msg+0x13e>
 8017844:	fba5 b101 	umull	fp, r1, r5, r1
 8017848:	f89c c002 	ldrb.w	ip, [ip, #2]
 801784c:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
 8017850:	0889      	lsrs	r1, r1, #2
 8017852:	f1bc 0f7d 	cmp.w	ip, #125	; 0x7d
 8017856:	fb0b 0111 	mls	r1, fp, r1, r0
 801785a:	f000 80d4 	beq.w	8017a06 <uxr_read_framed_msg+0x29a>
 801785e:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 8017862:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
 8017866:	f000 80cb 	beq.w	8017a00 <uxr_read_framed_msg+0x294>
 801786a:	f806 c003 	strb.w	ip, [r6, r3]
 801786e:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 8017870:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8017872:	ea80 010c 	eor.w	r1, r0, ip
 8017876:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 801787a:	3301      	adds	r3, #1
 801787c:	b2c9      	uxtb	r1, r1
 801787e:	b29b      	uxth	r3, r3
 8017880:	f837 2011 	ldrh.w	r2, [r7, r1, lsl #1]
 8017884:	4573      	cmp	r3, lr
 8017886:	8663      	strh	r3, [r4, #50]	; 0x32
 8017888:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 801788c:	86e2      	strh	r2, [r4, #54]	; 0x36
 801788e:	f080 811d 	bcs.w	8017acc <uxr_read_framed_msg+0x360>
 8017892:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8017896:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
 801789a:	1c50      	adds	r0, r2, #1
 801789c:	eb04 0c02 	add.w	ip, r4, r2
 80178a0:	4592      	cmp	sl, r2
 80178a2:	ea4f 0150 	mov.w	r1, r0, lsr #1
 80178a6:	d1cd      	bne.n	8017844 <uxr_read_framed_msg+0xd8>
 80178a8:	459e      	cmp	lr, r3
 80178aa:	f040 8114 	bne.w	8017ad6 <uxr_read_framed_msg+0x36a>
 80178ae:	2306      	movs	r3, #6
 80178b0:	7023      	strb	r3, [r4, #0]
 80178b2:	e76c      	b.n	801778e <uxr_read_framed_msg+0x22>
 80178b4:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 80178b8:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80178bc:	4298      	cmp	r0, r3
 80178be:	f000 80c6 	beq.w	8017a4e <uxr_read_framed_msg+0x2e2>
 80178c2:	18e2      	adds	r2, r4, r3
 80178c4:	7891      	ldrb	r1, [r2, #2]
 80178c6:	297d      	cmp	r1, #125	; 0x7d
 80178c8:	f000 8193 	beq.w	8017bf2 <uxr_read_framed_msg+0x486>
 80178cc:	3301      	adds	r3, #1
 80178ce:	202a      	movs	r0, #42	; 0x2a
 80178d0:	297e      	cmp	r1, #126	; 0x7e
 80178d2:	ea4f 0253 	mov.w	r2, r3, lsr #1
 80178d6:	fba5 c202 	umull	ip, r2, r5, r2
 80178da:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80178de:	fb00 3312 	mls	r3, r0, r2, r3
 80178e2:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80178e6:	f000 81d0 	beq.w	8017c8a <uxr_read_framed_msg+0x51e>
 80178ea:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 80178ec:	2000      	movs	r0, #0
 80178ee:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80178f2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80178f4:	8660      	strh	r0, [r4, #50]	; 0x32
 80178f6:	b29b      	uxth	r3, r3
 80178f8:	86e0      	strh	r0, [r4, #54]	; 0x36
 80178fa:	428b      	cmp	r3, r1
 80178fc:	8623      	strh	r3, [r4, #48]	; 0x30
 80178fe:	f240 80e2 	bls.w	8017ac6 <uxr_read_framed_msg+0x35a>
 8017902:	7020      	strb	r0, [r4, #0]
 8017904:	b003      	add	sp, #12
 8017906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801790a:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 801790e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8017912:	4298      	cmp	r0, r3
 8017914:	f000 80aa 	beq.w	8017a6c <uxr_read_framed_msg+0x300>
 8017918:	18e2      	adds	r2, r4, r3
 801791a:	7891      	ldrb	r1, [r2, #2]
 801791c:	297d      	cmp	r1, #125	; 0x7d
 801791e:	f000 8186 	beq.w	8017c2e <uxr_read_framed_msg+0x4c2>
 8017922:	3301      	adds	r3, #1
 8017924:	202a      	movs	r0, #42	; 0x2a
 8017926:	297e      	cmp	r1, #126	; 0x7e
 8017928:	ea4f 0253 	mov.w	r2, r3, lsr #1
 801792c:	fba5 c202 	umull	ip, r2, r5, r2
 8017930:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8017934:	fb00 3312 	mls	r3, r0, r2, r3
 8017938:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801793c:	f000 8195 	beq.w	8017c6a <uxr_read_framed_msg+0x4fe>
 8017940:	2304      	movs	r3, #4
 8017942:	8621      	strh	r1, [r4, #48]	; 0x30
 8017944:	7023      	strb	r3, [r4, #0]
 8017946:	e722      	b.n	801778e <uxr_read_framed_msg+0x22>
 8017948:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 801794c:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8017950:	4290      	cmp	r0, r2
 8017952:	f000 80b4 	beq.w	8017abe <uxr_read_framed_msg+0x352>
 8017956:	18a3      	adds	r3, r4, r2
 8017958:	7899      	ldrb	r1, [r3, #2]
 801795a:	297d      	cmp	r1, #125	; 0x7d
 801795c:	f000 8107 	beq.w	8017b6e <uxr_read_framed_msg+0x402>
 8017960:	3201      	adds	r2, #1
 8017962:	232a      	movs	r3, #42	; 0x2a
 8017964:	297e      	cmp	r1, #126	; 0x7e
 8017966:	ea4f 0052 	mov.w	r0, r2, lsr #1
 801796a:	fba5 c000 	umull	ip, r0, r5, r0
 801796e:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8017972:	fb03 2210 	mls	r2, r3, r0, r2
 8017976:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 801797a:	f000 818a 	beq.w	8017c92 <uxr_read_framed_msg+0x526>
 801797e:	7863      	ldrb	r3, [r4, #1]
 8017980:	428b      	cmp	r3, r1
 8017982:	bf0c      	ite	eq
 8017984:	2303      	moveq	r3, #3
 8017986:	2300      	movne	r3, #0
 8017988:	7023      	strb	r3, [r4, #0]
 801798a:	e700      	b.n	801778e <uxr_read_framed_msg+0x22>
 801798c:	2300      	movs	r3, #0
 801798e:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8017992:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
 8017996:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801799a:	4299      	cmp	r1, r3
 801799c:	d06a      	beq.n	8017a74 <uxr_read_framed_msg+0x308>
 801799e:	18e2      	adds	r2, r4, r3
 80179a0:	7890      	ldrb	r0, [r2, #2]
 80179a2:	287d      	cmp	r0, #125	; 0x7d
 80179a4:	f000 8100 	beq.w	8017ba8 <uxr_read_framed_msg+0x43c>
 80179a8:	3301      	adds	r3, #1
 80179aa:	212a      	movs	r1, #42	; 0x2a
 80179ac:	287e      	cmp	r0, #126	; 0x7e
 80179ae:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
 80179b2:	ea4f 0253 	mov.w	r2, r3, lsr #1
 80179b6:	fba5 c202 	umull	ip, r2, r5, r2
 80179ba:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80179be:	fb01 3312 	mls	r3, r1, r2, r3
 80179c2:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80179c6:	d055      	beq.n	8017a74 <uxr_read_framed_msg+0x308>
 80179c8:	2302      	movs	r3, #2
 80179ca:	7023      	strb	r3, [r4, #0]
 80179cc:	e6df      	b.n	801778e <uxr_read_framed_msg+0x22>
 80179ce:	f894 c02c 	ldrb.w	ip, [r4, #44]	; 0x2c
 80179d2:	f04f 0e2a 	mov.w	lr, #42	; 0x2a
 80179d6:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80179da:	1c5a      	adds	r2, r3, #1
 80179dc:	459c      	cmp	ip, r3
 80179de:	eb04 0103 	add.w	r1, r4, r3
 80179e2:	ea4f 0352 	mov.w	r3, r2, lsr #1
 80179e6:	f43f af04 	beq.w	80177f2 <uxr_read_framed_msg+0x86>
 80179ea:	fba5 0303 	umull	r0, r3, r5, r3
 80179ee:	7889      	ldrb	r1, [r1, #2]
 80179f0:	089b      	lsrs	r3, r3, #2
 80179f2:	297e      	cmp	r1, #126	; 0x7e
 80179f4:	fb0e 2313 	mls	r3, lr, r3, r2
 80179f8:	b2db      	uxtb	r3, r3
 80179fa:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80179fe:	d1ec      	bne.n	80179da <uxr_read_framed_msg+0x26e>
 8017a00:	2301      	movs	r3, #1
 8017a02:	7023      	strb	r3, [r4, #0]
 8017a04:	e6c3      	b.n	801778e <uxr_read_framed_msg+0x22>
 8017a06:	1c50      	adds	r0, r2, #1
 8017a08:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
 8017a0c:	3202      	adds	r2, #2
 8017a0e:	0841      	lsrs	r1, r0, #1
 8017a10:	fba5 c101 	umull	ip, r1, r5, r1
 8017a14:	0889      	lsrs	r1, r1, #2
 8017a16:	fb0b 0111 	mls	r1, fp, r1, r0
 8017a1a:	1860      	adds	r0, r4, r1
 8017a1c:	b2c9      	uxtb	r1, r1
 8017a1e:	458a      	cmp	sl, r1
 8017a20:	f43f af42 	beq.w	80178a8 <uxr_read_framed_msg+0x13c>
 8017a24:	0851      	lsrs	r1, r2, #1
 8017a26:	7880      	ldrb	r0, [r0, #2]
 8017a28:	fba5 a101 	umull	sl, r1, r5, r1
 8017a2c:	287e      	cmp	r0, #126	; 0x7e
 8017a2e:	f080 0c20 	eor.w	ip, r0, #32
 8017a32:	ea4f 0191 	mov.w	r1, r1, lsr #2
 8017a36:	fb0b 2211 	mls	r2, fp, r1, r2
 8017a3a:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8017a3e:	f47f af14 	bne.w	801786a <uxr_read_framed_msg+0xfe>
 8017a42:	459e      	cmp	lr, r3
 8017a44:	f43f af33 	beq.w	80178ae <uxr_read_framed_msg+0x142>
 8017a48:	2301      	movs	r3, #1
 8017a4a:	7023      	strb	r3, [r4, #0]
 8017a4c:	e69f      	b.n	801778e <uxr_read_framed_msg+0x22>
 8017a4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017a50:	9300      	str	r3, [sp, #0]
 8017a52:	2301      	movs	r3, #1
 8017a54:	9301      	str	r3, [sp, #4]
 8017a56:	464a      	mov	r2, r9
 8017a58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017a5a:	4641      	mov	r1, r8
 8017a5c:	4620      	mov	r0, r4
 8017a5e:	f7ff fdf1 	bl	8017644 <uxr_framing_read_transport>
 8017a62:	2800      	cmp	r0, #0
 8017a64:	f43f aec5 	beq.w	80177f2 <uxr_read_framed_msg+0x86>
 8017a68:	7823      	ldrb	r3, [r4, #0]
 8017a6a:	e690      	b.n	801778e <uxr_read_framed_msg+0x22>
 8017a6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017a6e:	9300      	str	r3, [sp, #0]
 8017a70:	2302      	movs	r3, #2
 8017a72:	e7ef      	b.n	8017a54 <uxr_read_framed_msg+0x2e8>
 8017a74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017a76:	464a      	mov	r2, r9
 8017a78:	4641      	mov	r1, r8
 8017a7a:	4620      	mov	r0, r4
 8017a7c:	9300      	str	r3, [sp, #0]
 8017a7e:	2304      	movs	r3, #4
 8017a80:	9301      	str	r3, [sp, #4]
 8017a82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017a84:	f7ff fdde 	bl	8017644 <uxr_framing_read_transport>
 8017a88:	2800      	cmp	r0, #0
 8017a8a:	d1ed      	bne.n	8017a68 <uxr_read_framed_msg+0x2fc>
 8017a8c:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8017a90:	2b7e      	cmp	r3, #126	; 0x7e
 8017a92:	d0e9      	beq.n	8017a68 <uxr_read_framed_msg+0x2fc>
 8017a94:	e6ad      	b.n	80177f2 <uxr_read_framed_msg+0x86>
 8017a96:	bf00      	nop
 8017a98:	30c30c31 	.word	0x30c30c31
 8017a9c:	0801d8e0 	.word	0x0801d8e0
 8017aa0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017aa2:	9300      	str	r3, [sp, #0]
 8017aa4:	2305      	movs	r3, #5
 8017aa6:	9301      	str	r3, [sp, #4]
 8017aa8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017aaa:	f7ff fdcb 	bl	8017644 <uxr_framing_read_transport>
 8017aae:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8017ab2:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8017ab6:	429a      	cmp	r2, r3
 8017ab8:	f43f ae9b 	beq.w	80177f2 <uxr_read_framed_msg+0x86>
 8017abc:	e664      	b.n	8017788 <uxr_read_framed_msg+0x1c>
 8017abe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017ac0:	9300      	str	r3, [sp, #0]
 8017ac2:	2303      	movs	r3, #3
 8017ac4:	e7c6      	b.n	8017a54 <uxr_read_framed_msg+0x2e8>
 8017ac6:	2305      	movs	r3, #5
 8017ac8:	7023      	strb	r3, [r4, #0]
 8017aca:	e660      	b.n	801778e <uxr_read_framed_msg+0x22>
 8017acc:	f43f aeef 	beq.w	80178ae <uxr_read_framed_msg+0x142>
 8017ad0:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 8017ad4:	d094      	beq.n	8017a00 <uxr_read_framed_msg+0x294>
 8017ad6:	ebae 0303 	sub.w	r3, lr, r3
 8017ada:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017adc:	3302      	adds	r3, #2
 8017ade:	9200      	str	r2, [sp, #0]
 8017ae0:	e7b8      	b.n	8017a54 <uxr_read_framed_msg+0x2e8>
 8017ae2:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8017ae6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017ae8:	7013      	strb	r3, [r2, #0]
 8017aea:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 8017aec:	b003      	add	sp, #12
 8017aee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017af2:	1c59      	adds	r1, r3, #1
 8017af4:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8017af8:	084a      	lsrs	r2, r1, #1
 8017afa:	fba5 e202 	umull	lr, r2, r5, r2
 8017afe:	0892      	lsrs	r2, r2, #2
 8017b00:	fb0c 1212 	mls	r2, ip, r2, r1
 8017b04:	b2d1      	uxtb	r1, r2
 8017b06:	4288      	cmp	r0, r1
 8017b08:	d0b0      	beq.n	8017a6c <uxr_read_framed_msg+0x300>
 8017b0a:	3302      	adds	r3, #2
 8017b0c:	4422      	add	r2, r4
 8017b0e:	7891      	ldrb	r1, [r2, #2]
 8017b10:	085a      	lsrs	r2, r3, #1
 8017b12:	fba5 0202 	umull	r0, r2, r5, r2
 8017b16:	297e      	cmp	r1, #126	; 0x7e
 8017b18:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8017b1c:	fb0c 3312 	mls	r3, ip, r2, r3
 8017b20:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8017b24:	f000 80a1 	beq.w	8017c6a <uxr_read_framed_msg+0x4fe>
 8017b28:	f081 0120 	eor.w	r1, r1, #32
 8017b2c:	e680      	b.n	8017830 <uxr_read_framed_msg+0xc4>
 8017b2e:	f103 0c01 	add.w	ip, r3, #1
 8017b32:	202a      	movs	r0, #42	; 0x2a
 8017b34:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8017b38:	fba5 e202 	umull	lr, r2, r5, r2
 8017b3c:	0892      	lsrs	r2, r2, #2
 8017b3e:	fb00 c212 	mls	r2, r0, r2, ip
 8017b42:	fa5f fc82 	uxtb.w	ip, r2
 8017b46:	4561      	cmp	r1, ip
 8017b48:	d081      	beq.n	8017a4e <uxr_read_framed_msg+0x2e2>
 8017b4a:	3302      	adds	r3, #2
 8017b4c:	4422      	add	r2, r4
 8017b4e:	0859      	lsrs	r1, r3, #1
 8017b50:	7892      	ldrb	r2, [r2, #2]
 8017b52:	fba5 c101 	umull	ip, r1, r5, r1
 8017b56:	2a7e      	cmp	r2, #126	; 0x7e
 8017b58:	ea4f 0191 	mov.w	r1, r1, lsr #2
 8017b5c:	fb00 3311 	mls	r3, r0, r1, r3
 8017b60:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8017b64:	f000 8091 	beq.w	8017c8a <uxr_read_framed_msg+0x51e>
 8017b68:	f082 0220 	eor.w	r2, r2, #32
 8017b6c:	e636      	b.n	80177dc <uxr_read_framed_msg+0x70>
 8017b6e:	1c51      	adds	r1, r2, #1
 8017b70:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8017b74:	084b      	lsrs	r3, r1, #1
 8017b76:	fba5 e303 	umull	lr, r3, r5, r3
 8017b7a:	089b      	lsrs	r3, r3, #2
 8017b7c:	fb0c 1313 	mls	r3, ip, r3, r1
 8017b80:	b2d9      	uxtb	r1, r3
 8017b82:	4288      	cmp	r0, r1
 8017b84:	d09b      	beq.n	8017abe <uxr_read_framed_msg+0x352>
 8017b86:	3202      	adds	r2, #2
 8017b88:	4423      	add	r3, r4
 8017b8a:	0850      	lsrs	r0, r2, #1
 8017b8c:	789b      	ldrb	r3, [r3, #2]
 8017b8e:	fba5 1000 	umull	r1, r0, r5, r0
 8017b92:	2b7e      	cmp	r3, #126	; 0x7e
 8017b94:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8017b98:	fb0c 2210 	mls	r2, ip, r0, r2
 8017b9c:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8017ba0:	d077      	beq.n	8017c92 <uxr_read_framed_msg+0x526>
 8017ba2:	f083 0120 	eor.w	r1, r3, #32
 8017ba6:	e6ea      	b.n	801797e <uxr_read_framed_msg+0x212>
 8017ba8:	f103 0c01 	add.w	ip, r3, #1
 8017bac:	202a      	movs	r0, #42	; 0x2a
 8017bae:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8017bb2:	fba5 e202 	umull	lr, r2, r5, r2
 8017bb6:	0892      	lsrs	r2, r2, #2
 8017bb8:	fb00 c212 	mls	r2, r0, r2, ip
 8017bbc:	fa5f fc82 	uxtb.w	ip, r2
 8017bc0:	4561      	cmp	r1, ip
 8017bc2:	f43f af57 	beq.w	8017a74 <uxr_read_framed_msg+0x308>
 8017bc6:	3302      	adds	r3, #2
 8017bc8:	4422      	add	r2, r4
 8017bca:	7891      	ldrb	r1, [r2, #2]
 8017bcc:	085a      	lsrs	r2, r3, #1
 8017bce:	fba5 c202 	umull	ip, r2, r5, r2
 8017bd2:	297e      	cmp	r1, #126	; 0x7e
 8017bd4:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 8017bd8:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8017bdc:	fb00 3312 	mls	r3, r0, r2, r3
 8017be0:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8017be4:	f43f af46 	beq.w	8017a74 <uxr_read_framed_msg+0x308>
 8017be8:	f081 0120 	eor.w	r1, r1, #32
 8017bec:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 8017bf0:	e6ea      	b.n	80179c8 <uxr_read_framed_msg+0x25c>
 8017bf2:	1c59      	adds	r1, r3, #1
 8017bf4:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8017bf8:	084a      	lsrs	r2, r1, #1
 8017bfa:	fba5 e202 	umull	lr, r2, r5, r2
 8017bfe:	0892      	lsrs	r2, r2, #2
 8017c00:	fb0c 1212 	mls	r2, ip, r2, r1
 8017c04:	b2d1      	uxtb	r1, r2
 8017c06:	4288      	cmp	r0, r1
 8017c08:	f43f af21 	beq.w	8017a4e <uxr_read_framed_msg+0x2e2>
 8017c0c:	3302      	adds	r3, #2
 8017c0e:	4422      	add	r2, r4
 8017c10:	7891      	ldrb	r1, [r2, #2]
 8017c12:	085a      	lsrs	r2, r3, #1
 8017c14:	fba5 0202 	umull	r0, r2, r5, r2
 8017c18:	297e      	cmp	r1, #126	; 0x7e
 8017c1a:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8017c1e:	fb0c 3312 	mls	r3, ip, r2, r3
 8017c22:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8017c26:	d030      	beq.n	8017c8a <uxr_read_framed_msg+0x51e>
 8017c28:	f081 0120 	eor.w	r1, r1, #32
 8017c2c:	e65d      	b.n	80178ea <uxr_read_framed_msg+0x17e>
 8017c2e:	1c59      	adds	r1, r3, #1
 8017c30:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8017c34:	084a      	lsrs	r2, r1, #1
 8017c36:	fba5 e202 	umull	lr, r2, r5, r2
 8017c3a:	0892      	lsrs	r2, r2, #2
 8017c3c:	fb0c 1212 	mls	r2, ip, r2, r1
 8017c40:	b2d1      	uxtb	r1, r2
 8017c42:	4288      	cmp	r0, r1
 8017c44:	f43f af12 	beq.w	8017a6c <uxr_read_framed_msg+0x300>
 8017c48:	3302      	adds	r3, #2
 8017c4a:	4422      	add	r2, r4
 8017c4c:	7891      	ldrb	r1, [r2, #2]
 8017c4e:	085a      	lsrs	r2, r3, #1
 8017c50:	fba5 0202 	umull	r0, r2, r5, r2
 8017c54:	297e      	cmp	r1, #126	; 0x7e
 8017c56:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8017c5a:	fb0c 3312 	mls	r3, ip, r2, r3
 8017c5e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8017c62:	d002      	beq.n	8017c6a <uxr_read_framed_msg+0x4fe>
 8017c64:	f081 0120 	eor.w	r1, r1, #32
 8017c68:	e66a      	b.n	8017940 <uxr_read_framed_msg+0x1d4>
 8017c6a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017c6c:	9300      	str	r3, [sp, #0]
 8017c6e:	2302      	movs	r3, #2
 8017c70:	9301      	str	r3, [sp, #4]
 8017c72:	464a      	mov	r2, r9
 8017c74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017c76:	4641      	mov	r1, r8
 8017c78:	4620      	mov	r0, r4
 8017c7a:	f7ff fce3 	bl	8017644 <uxr_framing_read_transport>
 8017c7e:	2800      	cmp	r0, #0
 8017c80:	f47f aef2 	bne.w	8017a68 <uxr_read_framed_msg+0x2fc>
 8017c84:	2301      	movs	r3, #1
 8017c86:	7023      	strb	r3, [r4, #0]
 8017c88:	e581      	b.n	801778e <uxr_read_framed_msg+0x22>
 8017c8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017c8c:	9300      	str	r3, [sp, #0]
 8017c8e:	2301      	movs	r3, #1
 8017c90:	e7ee      	b.n	8017c70 <uxr_read_framed_msg+0x504>
 8017c92:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017c94:	9300      	str	r3, [sp, #0]
 8017c96:	2303      	movs	r3, #3
 8017c98:	e7ea      	b.n	8017c70 <uxr_read_framed_msg+0x504>
 8017c9a:	bf00      	nop

08017c9c <uxr_stream_id>:
 8017c9c:	2901      	cmp	r1, #1
 8017c9e:	4684      	mov	ip, r0
 8017ca0:	b500      	push	{lr}
 8017ca2:	b083      	sub	sp, #12
 8017ca4:	d01f      	beq.n	8017ce6 <uxr_stream_id+0x4a>
 8017ca6:	2902      	cmp	r1, #2
 8017ca8:	f04f 0e00 	mov.w	lr, #0
 8017cac:	d020      	beq.n	8017cf0 <uxr_stream_id+0x54>
 8017cae:	2300      	movs	r3, #0
 8017cb0:	2000      	movs	r0, #0
 8017cb2:	f36e 0307 	bfi	r3, lr, #0, #8
 8017cb6:	f36c 230f 	bfi	r3, ip, #8, #8
 8017cba:	f361 4317 	bfi	r3, r1, #16, #8
 8017cbe:	f362 631f 	bfi	r3, r2, #24, #8
 8017cc2:	fa5f fc83 	uxtb.w	ip, r3
 8017cc6:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8017cca:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8017cce:	0e1b      	lsrs	r3, r3, #24
 8017cd0:	f36c 0007 	bfi	r0, ip, #0, #8
 8017cd4:	f361 200f 	bfi	r0, r1, #8, #8
 8017cd8:	f362 4017 	bfi	r0, r2, #16, #8
 8017cdc:	f363 601f 	bfi	r0, r3, #24, #8
 8017ce0:	b003      	add	sp, #12
 8017ce2:	f85d fb04 	ldr.w	pc, [sp], #4
 8017ce6:	f100 0e01 	add.w	lr, r0, #1
 8017cea:	fa5f fe8e 	uxtb.w	lr, lr
 8017cee:	e7de      	b.n	8017cae <uxr_stream_id+0x12>
 8017cf0:	f080 0e80 	eor.w	lr, r0, #128	; 0x80
 8017cf4:	e7db      	b.n	8017cae <uxr_stream_id+0x12>
 8017cf6:	bf00      	nop

08017cf8 <uxr_stream_id_from_raw>:
 8017cf8:	b082      	sub	sp, #8
 8017cfa:	b130      	cbz	r0, 8017d0a <uxr_stream_id_from_raw+0x12>
 8017cfc:	0603      	lsls	r3, r0, #24
 8017cfe:	d421      	bmi.n	8017d44 <uxr_stream_id_from_raw+0x4c>
 8017d00:	1e42      	subs	r2, r0, #1
 8017d02:	f04f 0c01 	mov.w	ip, #1
 8017d06:	b2d2      	uxtb	r2, r2
 8017d08:	e001      	b.n	8017d0e <uxr_stream_id_from_raw+0x16>
 8017d0a:	4684      	mov	ip, r0
 8017d0c:	4602      	mov	r2, r0
 8017d0e:	2300      	movs	r3, #0
 8017d10:	f360 0307 	bfi	r3, r0, #0, #8
 8017d14:	2000      	movs	r0, #0
 8017d16:	f362 230f 	bfi	r3, r2, #8, #8
 8017d1a:	f36c 4317 	bfi	r3, ip, #16, #8
 8017d1e:	f361 631f 	bfi	r3, r1, #24, #8
 8017d22:	fa5f fc83 	uxtb.w	ip, r3
 8017d26:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8017d2a:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8017d2e:	0e1b      	lsrs	r3, r3, #24
 8017d30:	f36c 0007 	bfi	r0, ip, #0, #8
 8017d34:	f361 200f 	bfi	r0, r1, #8, #8
 8017d38:	f362 4017 	bfi	r0, r2, #16, #8
 8017d3c:	f363 601f 	bfi	r0, r3, #24, #8
 8017d40:	b002      	add	sp, #8
 8017d42:	4770      	bx	lr
 8017d44:	f080 0280 	eor.w	r2, r0, #128	; 0x80
 8017d48:	f04f 0c02 	mov.w	ip, #2
 8017d4c:	e7df      	b.n	8017d0e <uxr_stream_id_from_raw+0x16>
 8017d4e:	bf00      	nop

08017d50 <uxr_init_stream_storage>:
 8017d50:	2300      	movs	r3, #0
 8017d52:	7403      	strb	r3, [r0, #16]
 8017d54:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8017d58:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 8017d5c:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 8017d60:	4770      	bx	lr
 8017d62:	bf00      	nop

08017d64 <uxr_reset_stream_storage>:
 8017d64:	b570      	push	{r4, r5, r6, lr}
 8017d66:	7c03      	ldrb	r3, [r0, #16]
 8017d68:	4604      	mov	r4, r0
 8017d6a:	b14b      	cbz	r3, 8017d80 <uxr_reset_stream_storage+0x1c>
 8017d6c:	4606      	mov	r6, r0
 8017d6e:	2500      	movs	r5, #0
 8017d70:	4630      	mov	r0, r6
 8017d72:	3501      	adds	r5, #1
 8017d74:	f002 faf2 	bl	801a35c <uxr_reset_output_best_effort_stream>
 8017d78:	7c23      	ldrb	r3, [r4, #16]
 8017d7a:	3610      	adds	r6, #16
 8017d7c:	42ab      	cmp	r3, r5
 8017d7e:	d8f7      	bhi.n	8017d70 <uxr_reset_stream_storage+0xc>
 8017d80:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8017d84:	b15b      	cbz	r3, 8017d9e <uxr_reset_stream_storage+0x3a>
 8017d86:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8017d8a:	2500      	movs	r5, #0
 8017d8c:	4630      	mov	r0, r6
 8017d8e:	3501      	adds	r5, #1
 8017d90:	f002 f8ea 	bl	8019f68 <uxr_reset_input_best_effort_stream>
 8017d94:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8017d98:	3602      	adds	r6, #2
 8017d9a:	42ab      	cmp	r3, r5
 8017d9c:	d8f6      	bhi.n	8017d8c <uxr_reset_stream_storage+0x28>
 8017d9e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8017da2:	b15b      	cbz	r3, 8017dbc <uxr_reset_stream_storage+0x58>
 8017da4:	f104 0618 	add.w	r6, r4, #24
 8017da8:	2500      	movs	r5, #0
 8017daa:	4630      	mov	r0, r6
 8017dac:	3501      	adds	r5, #1
 8017dae:	f002 fb83 	bl	801a4b8 <uxr_reset_output_reliable_stream>
 8017db2:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8017db6:	3628      	adds	r6, #40	; 0x28
 8017db8:	42ab      	cmp	r3, r5
 8017dba:	d8f6      	bhi.n	8017daa <uxr_reset_stream_storage+0x46>
 8017dbc:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8017dc0:	b15b      	cbz	r3, 8017dda <uxr_reset_stream_storage+0x76>
 8017dc2:	f104 0648 	add.w	r6, r4, #72	; 0x48
 8017dc6:	2500      	movs	r5, #0
 8017dc8:	4630      	mov	r0, r6
 8017dca:	3501      	adds	r5, #1
 8017dcc:	f002 f938 	bl	801a040 <uxr_reset_input_reliable_stream>
 8017dd0:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8017dd4:	3618      	adds	r6, #24
 8017dd6:	42ab      	cmp	r3, r5
 8017dd8:	d8f6      	bhi.n	8017dc8 <uxr_reset_stream_storage+0x64>
 8017dda:	bd70      	pop	{r4, r5, r6, pc}

08017ddc <uxr_add_output_best_effort_buffer>:
 8017ddc:	b510      	push	{r4, lr}
 8017dde:	7c04      	ldrb	r4, [r0, #16]
 8017de0:	b082      	sub	sp, #8
 8017de2:	f104 0c01 	add.w	ip, r4, #1
 8017de6:	f880 c010 	strb.w	ip, [r0, #16]
 8017dea:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8017dee:	f002 faab 	bl	801a348 <uxr_init_output_best_effort_stream>
 8017df2:	2201      	movs	r2, #1
 8017df4:	4620      	mov	r0, r4
 8017df6:	4611      	mov	r1, r2
 8017df8:	b002      	add	sp, #8
 8017dfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017dfe:	f7ff bf4d 	b.w	8017c9c <uxr_stream_id>
 8017e02:	bf00      	nop

08017e04 <uxr_add_output_reliable_buffer>:
 8017e04:	b510      	push	{r4, lr}
 8017e06:	b084      	sub	sp, #16
 8017e08:	4684      	mov	ip, r0
 8017e0a:	2028      	movs	r0, #40	; 0x28
 8017e0c:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8017e10:	9400      	str	r4, [sp, #0]
 8017e12:	f89c 4040 	ldrb.w	r4, [ip, #64]	; 0x40
 8017e16:	fb00 c004 	mla	r0, r0, r4, ip
 8017e1a:	f104 0e01 	add.w	lr, r4, #1
 8017e1e:	3018      	adds	r0, #24
 8017e20:	f88c e040 	strb.w	lr, [ip, #64]	; 0x40
 8017e24:	f002 fb10 	bl	801a448 <uxr_init_output_reliable_stream>
 8017e28:	2201      	movs	r2, #1
 8017e2a:	2102      	movs	r1, #2
 8017e2c:	4620      	mov	r0, r4
 8017e2e:	b004      	add	sp, #16
 8017e30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017e34:	f7ff bf32 	b.w	8017c9c <uxr_stream_id>

08017e38 <uxr_add_input_best_effort_buffer>:
 8017e38:	b510      	push	{r4, lr}
 8017e3a:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 8017e3e:	b082      	sub	sp, #8
 8017e40:	1c62      	adds	r2, r4, #1
 8017e42:	f104 0321 	add.w	r3, r4, #33	; 0x21
 8017e46:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 8017e4a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8017e4e:	f002 f887 	bl	8019f60 <uxr_init_input_best_effort_stream>
 8017e52:	2200      	movs	r2, #0
 8017e54:	2101      	movs	r1, #1
 8017e56:	4620      	mov	r0, r4
 8017e58:	b002      	add	sp, #8
 8017e5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017e5e:	f7ff bf1d 	b.w	8017c9c <uxr_stream_id>
 8017e62:	bf00      	nop

08017e64 <uxr_add_input_reliable_buffer>:
 8017e64:	b510      	push	{r4, lr}
 8017e66:	b084      	sub	sp, #16
 8017e68:	4684      	mov	ip, r0
 8017e6a:	2018      	movs	r0, #24
 8017e6c:	9c06      	ldr	r4, [sp, #24]
 8017e6e:	9400      	str	r4, [sp, #0]
 8017e70:	f89c 4060 	ldrb.w	r4, [ip, #96]	; 0x60
 8017e74:	fb00 c004 	mla	r0, r0, r4, ip
 8017e78:	f104 0e01 	add.w	lr, r4, #1
 8017e7c:	3048      	adds	r0, #72	; 0x48
 8017e7e:	f88c e060 	strb.w	lr, [ip, #96]	; 0x60
 8017e82:	f002 f8b7 	bl	8019ff4 <uxr_init_input_reliable_stream>
 8017e86:	2200      	movs	r2, #0
 8017e88:	2102      	movs	r1, #2
 8017e8a:	4620      	mov	r0, r4
 8017e8c:	b004      	add	sp, #16
 8017e8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017e92:	f7ff bf03 	b.w	8017c9c <uxr_stream_id>
 8017e96:	bf00      	nop

08017e98 <uxr_get_output_best_effort_stream>:
 8017e98:	7c03      	ldrb	r3, [r0, #16]
 8017e9a:	428b      	cmp	r3, r1
 8017e9c:	bf8c      	ite	hi
 8017e9e:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 8017ea2:	2000      	movls	r0, #0
 8017ea4:	4770      	bx	lr
 8017ea6:	bf00      	nop

08017ea8 <uxr_get_output_reliable_stream>:
 8017ea8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8017eac:	428b      	cmp	r3, r1
 8017eae:	d904      	bls.n	8017eba <uxr_get_output_reliable_stream+0x12>
 8017eb0:	2328      	movs	r3, #40	; 0x28
 8017eb2:	fb03 0001 	mla	r0, r3, r1, r0
 8017eb6:	3018      	adds	r0, #24
 8017eb8:	4770      	bx	lr
 8017eba:	2000      	movs	r0, #0
 8017ebc:	4770      	bx	lr
 8017ebe:	bf00      	nop

08017ec0 <uxr_get_input_best_effort_stream>:
 8017ec0:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8017ec4:	428b      	cmp	r3, r1
 8017ec6:	d903      	bls.n	8017ed0 <uxr_get_input_best_effort_stream+0x10>
 8017ec8:	3121      	adds	r1, #33	; 0x21
 8017eca:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8017ece:	4770      	bx	lr
 8017ed0:	2000      	movs	r0, #0
 8017ed2:	4770      	bx	lr

08017ed4 <uxr_get_input_reliable_stream>:
 8017ed4:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 8017ed8:	428b      	cmp	r3, r1
 8017eda:	d904      	bls.n	8017ee6 <uxr_get_input_reliable_stream+0x12>
 8017edc:	2318      	movs	r3, #24
 8017ede:	fb03 0001 	mla	r0, r3, r1, r0
 8017ee2:	3048      	adds	r0, #72	; 0x48
 8017ee4:	4770      	bx	lr
 8017ee6:	2000      	movs	r0, #0
 8017ee8:	4770      	bx	lr
 8017eea:	bf00      	nop

08017eec <uxr_output_streams_confirmed>:
 8017eec:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8017ef0:	b183      	cbz	r3, 8017f14 <uxr_output_streams_confirmed+0x28>
 8017ef2:	b570      	push	{r4, r5, r6, lr}
 8017ef4:	4606      	mov	r6, r0
 8017ef6:	f100 0518 	add.w	r5, r0, #24
 8017efa:	2400      	movs	r4, #0
 8017efc:	e000      	b.n	8017f00 <uxr_output_streams_confirmed+0x14>
 8017efe:	b140      	cbz	r0, 8017f12 <uxr_output_streams_confirmed+0x26>
 8017f00:	4628      	mov	r0, r5
 8017f02:	3401      	adds	r4, #1
 8017f04:	f002 fd4c 	bl	801a9a0 <uxr_is_output_up_to_date>
 8017f08:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 8017f0c:	3528      	adds	r5, #40	; 0x28
 8017f0e:	42a3      	cmp	r3, r4
 8017f10:	d8f5      	bhi.n	8017efe <uxr_output_streams_confirmed+0x12>
 8017f12:	bd70      	pop	{r4, r5, r6, pc}
 8017f14:	2001      	movs	r0, #1
 8017f16:	4770      	bx	lr

08017f18 <uxr_buffer_submessage_header>:
 8017f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017f1a:	460e      	mov	r6, r1
 8017f1c:	2104      	movs	r1, #4
 8017f1e:	4604      	mov	r4, r0
 8017f20:	4615      	mov	r5, r2
 8017f22:	461f      	mov	r7, r3
 8017f24:	f7f7 fdcc 	bl	800fac0 <ucdr_align_to>
 8017f28:	2301      	movs	r3, #1
 8017f2a:	4631      	mov	r1, r6
 8017f2c:	4620      	mov	r0, r4
 8017f2e:	ea47 0203 	orr.w	r2, r7, r3
 8017f32:	7523      	strb	r3, [r4, #20]
 8017f34:	462b      	mov	r3, r5
 8017f36:	f000 fa29 	bl	801838c <uxr_serialize_submessage_header>
 8017f3a:	4620      	mov	r0, r4
 8017f3c:	f7f7 fdd6 	bl	800faec <ucdr_buffer_remaining>
 8017f40:	42a8      	cmp	r0, r5
 8017f42:	bf34      	ite	cc
 8017f44:	2000      	movcc	r0, #0
 8017f46:	2001      	movcs	r0, #1
 8017f48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017f4a:	bf00      	nop

08017f4c <uxr_read_submessage_header>:
 8017f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017f50:	4604      	mov	r4, r0
 8017f52:	460d      	mov	r5, r1
 8017f54:	2104      	movs	r1, #4
 8017f56:	4616      	mov	r6, r2
 8017f58:	4698      	mov	r8, r3
 8017f5a:	f7f7 fdb1 	bl	800fac0 <ucdr_align_to>
 8017f5e:	4620      	mov	r0, r4
 8017f60:	f7f7 fdc4 	bl	800faec <ucdr_buffer_remaining>
 8017f64:	2803      	cmp	r0, #3
 8017f66:	bf8c      	ite	hi
 8017f68:	2701      	movhi	r7, #1
 8017f6a:	2700      	movls	r7, #0
 8017f6c:	d802      	bhi.n	8017f74 <uxr_read_submessage_header+0x28>
 8017f6e:	4638      	mov	r0, r7
 8017f70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017f74:	4633      	mov	r3, r6
 8017f76:	4642      	mov	r2, r8
 8017f78:	4620      	mov	r0, r4
 8017f7a:	4629      	mov	r1, r5
 8017f7c:	f000 fa1a 	bl	80183b4 <uxr_deserialize_submessage_header>
 8017f80:	f898 3000 	ldrb.w	r3, [r8]
 8017f84:	4638      	mov	r0, r7
 8017f86:	f003 0201 	and.w	r2, r3, #1
 8017f8a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8017f8e:	f888 3000 	strb.w	r3, [r8]
 8017f92:	7522      	strb	r2, [r4, #20]
 8017f94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017f98 <uxr_submessage_padding>:
 8017f98:	f010 0003 	ands.w	r0, r0, #3
 8017f9c:	bf18      	it	ne
 8017f9e:	f1c0 0004 	rsbne	r0, r0, #4
 8017fa2:	4770      	bx	lr

08017fa4 <uxr_millis>:
 8017fa4:	b510      	push	{r4, lr}
 8017fa6:	b084      	sub	sp, #16
 8017fa8:	2001      	movs	r0, #1
 8017faa:	4669      	mov	r1, sp
 8017fac:	f7eb f844 	bl	8003038 <clock_gettime>
 8017fb0:	4908      	ldr	r1, [pc, #32]	; (8017fd4 <uxr_millis+0x30>)
 8017fb2:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 8017fb6:	fba0 0301 	umull	r0, r3, r0, r1
 8017fba:	1900      	adds	r0, r0, r4
 8017fbc:	fb01 3102 	mla	r1, r1, r2, r3
 8017fc0:	4a05      	ldr	r2, [pc, #20]	; (8017fd8 <uxr_millis+0x34>)
 8017fc2:	f04f 0300 	mov.w	r3, #0
 8017fc6:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8017fca:	f7e8 f9a1 	bl	8000310 <__aeabi_ldivmod>
 8017fce:	b004      	add	sp, #16
 8017fd0:	bd10      	pop	{r4, pc}
 8017fd2:	bf00      	nop
 8017fd4:	3b9aca00 	.word	0x3b9aca00
 8017fd8:	000f4240 	.word	0x000f4240

08017fdc <uxr_nanos>:
 8017fdc:	b510      	push	{r4, lr}
 8017fde:	b084      	sub	sp, #16
 8017fe0:	2001      	movs	r0, #1
 8017fe2:	4669      	mov	r1, sp
 8017fe4:	f7eb f828 	bl	8003038 <clock_gettime>
 8017fe8:	4a06      	ldr	r2, [pc, #24]	; (8018004 <uxr_nanos+0x28>)
 8017fea:	9800      	ldr	r0, [sp, #0]
 8017fec:	9902      	ldr	r1, [sp, #8]
 8017fee:	fba0 0302 	umull	r0, r3, r0, r2
 8017ff2:	9c01      	ldr	r4, [sp, #4]
 8017ff4:	1840      	adds	r0, r0, r1
 8017ff6:	fb02 3304 	mla	r3, r2, r4, r3
 8017ffa:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 8017ffe:	b004      	add	sp, #16
 8018000:	bd10      	pop	{r4, pc}
 8018002:	bf00      	nop
 8018004:	3b9aca00 	.word	0x3b9aca00

08018008 <on_full_output_buffer_fragmented>:
 8018008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801800c:	460c      	mov	r4, r1
 801800e:	b08a      	sub	sp, #40	; 0x28
 8018010:	4606      	mov	r6, r0
 8018012:	f891 10c1 	ldrb.w	r1, [r1, #193]	; 0xc1
 8018016:	f104 0008 	add.w	r0, r4, #8
 801801a:	f7ff ff45 	bl	8017ea8 <uxr_get_output_reliable_stream>
 801801e:	4605      	mov	r5, r0
 8018020:	f002 fcc8 	bl	801a9b4 <get_available_free_slots>
 8018024:	b968      	cbnz	r0, 8018042 <on_full_output_buffer_fragmented+0x3a>
 8018026:	4620      	mov	r0, r4
 8018028:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	; 0xb8
 801802c:	4798      	blx	r3
 801802e:	b918      	cbnz	r0, 8018038 <on_full_output_buffer_fragmented+0x30>
 8018030:	2001      	movs	r0, #1
 8018032:	b00a      	add	sp, #40	; 0x28
 8018034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018038:	4628      	mov	r0, r5
 801803a:	f002 fcbb 	bl	801a9b4 <get_available_free_slots>
 801803e:	2800      	cmp	r0, #0
 8018040:	d0f6      	beq.n	8018030 <on_full_output_buffer_fragmented+0x28>
 8018042:	8929      	ldrh	r1, [r5, #8]
 8018044:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8018048:	89eb      	ldrh	r3, [r5, #14]
 801804a:	7b28      	ldrb	r0, [r5, #12]
 801804c:	686f      	ldr	r7, [r5, #4]
 801804e:	1a12      	subs	r2, r2, r0
 8018050:	fbb3 f0f1 	udiv	r0, r3, r1
 8018054:	fbb7 f7f1 	udiv	r7, r7, r1
 8018058:	fb01 3110 	mls	r1, r1, r0, r3
 801805c:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 8018060:	b289      	uxth	r1, r1
 8018062:	fb07 f101 	mul.w	r1, r7, r1
 8018066:	3f04      	subs	r7, #4
 8018068:	443a      	add	r2, r7
 801806a:	3104      	adds	r1, #4
 801806c:	fa1f f882 	uxth.w	r8, r2
 8018070:	463a      	mov	r2, r7
 8018072:	eba3 0308 	sub.w	r3, r3, r8
 8018076:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
 801807a:	682b      	ldr	r3, [r5, #0]
 801807c:	4419      	add	r1, r3
 801807e:	2300      	movs	r3, #0
 8018080:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8018084:	9000      	str	r0, [sp, #0]
 8018086:	a802      	add	r0, sp, #8
 8018088:	f7f7 fcec 	bl	800fa64 <ucdr_init_buffer_origin_offset>
 801808c:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 8018090:	f102 0308 	add.w	r3, r2, #8
 8018094:	42bb      	cmp	r3, r7
 8018096:	d927      	bls.n	80180e8 <on_full_output_buffer_fragmented+0xe0>
 8018098:	4642      	mov	r2, r8
 801809a:	2300      	movs	r3, #0
 801809c:	210d      	movs	r1, #13
 801809e:	a802      	add	r0, sp, #8
 80180a0:	f7ff ff3a 	bl	8017f18 <uxr_buffer_submessage_header>
 80180a4:	8929      	ldrh	r1, [r5, #8]
 80180a6:	89eb      	ldrh	r3, [r5, #14]
 80180a8:	686a      	ldr	r2, [r5, #4]
 80180aa:	fbb3 f0f1 	udiv	r0, r3, r1
 80180ae:	fbb2 f2f1 	udiv	r2, r2, r1
 80180b2:	fb01 3310 	mls	r3, r1, r0, r3
 80180b6:	b29b      	uxth	r3, r3
 80180b8:	fb02 f303 	mul.w	r3, r2, r3
 80180bc:	682a      	ldr	r2, [r5, #0]
 80180be:	50d7      	str	r7, [r2, r3]
 80180c0:	2101      	movs	r1, #1
 80180c2:	89e8      	ldrh	r0, [r5, #14]
 80180c4:	f002 fc98 	bl	801a9f8 <uxr_seq_num_add>
 80180c8:	9904      	ldr	r1, [sp, #16]
 80180ca:	9a03      	ldr	r2, [sp, #12]
 80180cc:	81e8      	strh	r0, [r5, #14]
 80180ce:	4630      	mov	r0, r6
 80180d0:	1a52      	subs	r2, r2, r1
 80180d2:	f7f7 fcd9 	bl	800fa88 <ucdr_init_buffer>
 80180d6:	4630      	mov	r0, r6
 80180d8:	4622      	mov	r2, r4
 80180da:	490f      	ldr	r1, [pc, #60]	; (8018118 <on_full_output_buffer_fragmented+0x110>)
 80180dc:	f7f7 fca8 	bl	800fa30 <ucdr_set_on_full_buffer_callback>
 80180e0:	2000      	movs	r0, #0
 80180e2:	b00a      	add	sp, #40	; 0x28
 80180e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80180e8:	b292      	uxth	r2, r2
 80180ea:	2302      	movs	r3, #2
 80180ec:	210d      	movs	r1, #13
 80180ee:	a802      	add	r0, sp, #8
 80180f0:	f7ff ff12 	bl	8017f18 <uxr_buffer_submessage_header>
 80180f4:	8928      	ldrh	r0, [r5, #8]
 80180f6:	89eb      	ldrh	r3, [r5, #14]
 80180f8:	6869      	ldr	r1, [r5, #4]
 80180fa:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 80180fe:	fbb3 f7f0 	udiv	r7, r3, r0
 8018102:	fbb1 f1f0 	udiv	r1, r1, r0
 8018106:	fb00 3317 	mls	r3, r0, r7, r3
 801810a:	3208      	adds	r2, #8
 801810c:	b29b      	uxth	r3, r3
 801810e:	fb01 f303 	mul.w	r3, r1, r3
 8018112:	6829      	ldr	r1, [r5, #0]
 8018114:	50ca      	str	r2, [r1, r3]
 8018116:	e7d3      	b.n	80180c0 <on_full_output_buffer_fragmented+0xb8>
 8018118:	08018009 	.word	0x08018009

0801811c <uxr_prepare_output_stream>:
 801811c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801811e:	b087      	sub	sp, #28
 8018120:	2707      	movs	r7, #7
 8018122:	2500      	movs	r5, #0
 8018124:	461c      	mov	r4, r3
 8018126:	4606      	mov	r6, r0
 8018128:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801812c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801812e:	e9cd 7500 	strd	r7, r5, [sp]
 8018132:	3204      	adds	r2, #4
 8018134:	f7fe ffc8 	bl	80170c8 <uxr_prepare_stream_to_write_submessage>
 8018138:	f080 0201 	eor.w	r2, r0, #1
 801813c:	b2d2      	uxtb	r2, r2
 801813e:	75a2      	strb	r2, [r4, #22]
 8018140:	b112      	cbz	r2, 8018148 <uxr_prepare_output_stream+0x2c>
 8018142:	4628      	mov	r0, r5
 8018144:	b007      	add	sp, #28
 8018146:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018148:	aa05      	add	r2, sp, #20
 801814a:	9902      	ldr	r1, [sp, #8]
 801814c:	4630      	mov	r0, r6
 801814e:	f7ff f8f7 	bl	8017340 <uxr_init_base_object_request>
 8018152:	a905      	add	r1, sp, #20
 8018154:	4605      	mov	r5, r0
 8018156:	4620      	mov	r0, r4
 8018158:	f000 fe7a 	bl	8018e50 <uxr_serialize_WRITE_DATA_Payload_Data>
 801815c:	69a6      	ldr	r6, [r4, #24]
 801815e:	69e7      	ldr	r7, [r4, #28]
 8018160:	4620      	mov	r0, r4
 8018162:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8018166:	1a52      	subs	r2, r2, r1
 8018168:	f7f7 fc8e 	bl	800fa88 <ucdr_init_buffer>
 801816c:	4620      	mov	r0, r4
 801816e:	463a      	mov	r2, r7
 8018170:	4631      	mov	r1, r6
 8018172:	f7f7 fc5d 	bl	800fa30 <ucdr_set_on_full_buffer_callback>
 8018176:	4628      	mov	r0, r5
 8018178:	b007      	add	sp, #28
 801817a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801817c <uxr_prepare_output_stream_fragmented>:
 801817c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018180:	b091      	sub	sp, #68	; 0x44
 8018182:	4605      	mov	r5, r0
 8018184:	3008      	adds	r0, #8
 8018186:	461e      	mov	r6, r3
 8018188:	9105      	str	r1, [sp, #20]
 801818a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801818e:	9204      	str	r2, [sp, #16]
 8018190:	f7ff fe8a 	bl	8017ea8 <uxr_get_output_reliable_stream>
 8018194:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8018198:	2b01      	cmp	r3, #1
 801819a:	f000 8093 	beq.w	80182c4 <uxr_prepare_output_stream_fragmented+0x148>
 801819e:	4604      	mov	r4, r0
 80181a0:	2800      	cmp	r0, #0
 80181a2:	f000 808f 	beq.w	80182c4 <uxr_prepare_output_stream_fragmented+0x148>
 80181a6:	f002 fc05 	bl	801a9b4 <get_available_free_slots>
 80181aa:	2800      	cmp	r0, #0
 80181ac:	f000 8085 	beq.w	80182ba <uxr_prepare_output_stream_fragmented+0x13e>
 80181b0:	8923      	ldrh	r3, [r4, #8]
 80181b2:	89e7      	ldrh	r7, [r4, #14]
 80181b4:	6862      	ldr	r2, [r4, #4]
 80181b6:	fbb7 f9f3 	udiv	r9, r7, r3
 80181ba:	fbb2 f2f3 	udiv	r2, r2, r3
 80181be:	fb03 7919 	mls	r9, r3, r9, r7
 80181c2:	6823      	ldr	r3, [r4, #0]
 80181c4:	f1a2 0b04 	sub.w	fp, r2, #4
 80181c8:	9203      	str	r2, [sp, #12]
 80181ca:	fa1f f989 	uxth.w	r9, r9
 80181ce:	fb02 f909 	mul.w	r9, r2, r9
 80181d2:	f109 0904 	add.w	r9, r9, #4
 80181d6:	4499      	add	r9, r3
 80181d8:	7b23      	ldrb	r3, [r4, #12]
 80181da:	f859 8c04 	ldr.w	r8, [r9, #-4]
 80181de:	4543      	cmp	r3, r8
 80181e0:	d37c      	bcc.n	80182dc <uxr_prepare_output_stream_fragmented+0x160>
 80181e2:	f1ab 0a04 	sub.w	sl, fp, #4
 80181e6:	465a      	mov	r2, fp
 80181e8:	4649      	mov	r1, r9
 80181ea:	a808      	add	r0, sp, #32
 80181ec:	ebaa 0a03 	sub.w	sl, sl, r3
 80181f0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80181f2:	f8cd 8000 	str.w	r8, [sp]
 80181f6:	3308      	adds	r3, #8
 80181f8:	fa1f fa8a 	uxth.w	sl, sl
 80181fc:	9302      	str	r3, [sp, #8]
 80181fe:	2300      	movs	r3, #0
 8018200:	f7f7 fc30 	bl	800fa64 <ucdr_init_buffer_origin_offset>
 8018204:	9b02      	ldr	r3, [sp, #8]
 8018206:	4652      	mov	r2, sl
 8018208:	210d      	movs	r1, #13
 801820a:	455b      	cmp	r3, fp
 801820c:	bf34      	ite	cc
 801820e:	2302      	movcc	r3, #2
 8018210:	2300      	movcs	r3, #0
 8018212:	a808      	add	r0, sp, #32
 8018214:	f7ff fe80 	bl	8017f18 <uxr_buffer_submessage_header>
 8018218:	8921      	ldrh	r1, [r4, #8]
 801821a:	6863      	ldr	r3, [r4, #4]
 801821c:	4638      	mov	r0, r7
 801821e:	fbb7 f2f1 	udiv	r2, r7, r1
 8018222:	fbb3 f3f1 	udiv	r3, r3, r1
 8018226:	fb01 7212 	mls	r2, r1, r2, r7
 801822a:	2101      	movs	r1, #1
 801822c:	b292      	uxth	r2, r2
 801822e:	fb02 f303 	mul.w	r3, r2, r3
 8018232:	6822      	ldr	r2, [r4, #0]
 8018234:	f842 b003 	str.w	fp, [r2, r3]
 8018238:	f002 fbde 	bl	801a9f8 <uxr_seq_num_add>
 801823c:	9b03      	ldr	r3, [sp, #12]
 801823e:	f108 0104 	add.w	r1, r8, #4
 8018242:	4607      	mov	r7, r0
 8018244:	f1a3 0208 	sub.w	r2, r3, #8
 8018248:	4630      	mov	r0, r6
 801824a:	4449      	add	r1, r9
 801824c:	eba2 0208 	sub.w	r2, r2, r8
 8018250:	f7f7 fc1a 	bl	800fa88 <ucdr_init_buffer>
 8018254:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8018256:	2107      	movs	r1, #7
 8018258:	81e7      	strh	r7, [r4, #14]
 801825a:	1d1a      	adds	r2, r3, #4
 801825c:	2300      	movs	r3, #0
 801825e:	4630      	mov	r0, r6
 8018260:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8018264:	bf28      	it	cs
 8018266:	461a      	movcs	r2, r3
 8018268:	b292      	uxth	r2, r2
 801826a:	f7ff fe55 	bl	8017f18 <uxr_buffer_submessage_header>
 801826e:	aa07      	add	r2, sp, #28
 8018270:	9904      	ldr	r1, [sp, #16]
 8018272:	4628      	mov	r0, r5
 8018274:	f7ff f864 	bl	8017340 <uxr_init_base_object_request>
 8018278:	4604      	mov	r4, r0
 801827a:	b320      	cbz	r0, 80182c6 <uxr_prepare_output_stream_fragmented+0x14a>
 801827c:	a907      	add	r1, sp, #28
 801827e:	4630      	mov	r0, r6
 8018280:	f000 fde6 	bl	8018e50 <uxr_serialize_WRITE_DATA_Payload_Data>
 8018284:	4630      	mov	r0, r6
 8018286:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 801828a:	1a52      	subs	r2, r2, r1
 801828c:	f7f7 fbfc 	bl	800fa88 <ucdr_init_buffer>
 8018290:	9b05      	ldr	r3, [sp, #20]
 8018292:	9a02      	ldr	r2, [sp, #8]
 8018294:	4630      	mov	r0, r6
 8018296:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
 801829a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801829c:	f8c5 20c4 	str.w	r2, [r5, #196]	; 0xc4
 80182a0:	462a      	mov	r2, r5
 80182a2:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
 80182a6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80182a8:	4918      	ldr	r1, [pc, #96]	; (801830c <uxr_prepare_output_stream_fragmented+0x190>)
 80182aa:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
 80182ae:	f7f7 fbbf 	bl	800fa30 <ucdr_set_on_full_buffer_callback>
 80182b2:	4620      	mov	r0, r4
 80182b4:	b011      	add	sp, #68	; 0x44
 80182b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80182ba:	991c      	ldr	r1, [sp, #112]	; 0x70
 80182bc:	4628      	mov	r0, r5
 80182be:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80182c0:	4798      	blx	r3
 80182c2:	b920      	cbnz	r0, 80182ce <uxr_prepare_output_stream_fragmented+0x152>
 80182c4:	2400      	movs	r4, #0
 80182c6:	4620      	mov	r0, r4
 80182c8:	b011      	add	sp, #68	; 0x44
 80182ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80182ce:	4620      	mov	r0, r4
 80182d0:	f002 fb70 	bl	801a9b4 <get_available_free_slots>
 80182d4:	2800      	cmp	r0, #0
 80182d6:	f47f af6b 	bne.w	80181b0 <uxr_prepare_output_stream_fragmented+0x34>
 80182da:	e7f3      	b.n	80182c4 <uxr_prepare_output_stream_fragmented+0x148>
 80182dc:	4638      	mov	r0, r7
 80182de:	2101      	movs	r1, #1
 80182e0:	f002 fb8a 	bl	801a9f8 <uxr_seq_num_add>
 80182e4:	8922      	ldrh	r2, [r4, #8]
 80182e6:	6863      	ldr	r3, [r4, #4]
 80182e8:	4607      	mov	r7, r0
 80182ea:	fbb3 f9f2 	udiv	r9, r3, r2
 80182ee:	fbb0 f3f2 	udiv	r3, r0, r2
 80182f2:	fb02 0313 	mls	r3, r2, r3, r0
 80182f6:	b29b      	uxth	r3, r3
 80182f8:	fb03 f909 	mul.w	r9, r3, r9
 80182fc:	6823      	ldr	r3, [r4, #0]
 80182fe:	f109 0904 	add.w	r9, r9, #4
 8018302:	4499      	add	r9, r3
 8018304:	7b23      	ldrb	r3, [r4, #12]
 8018306:	f859 8c04 	ldr.w	r8, [r9, #-4]
 801830a:	e76a      	b.n	80181e2 <uxr_prepare_output_stream_fragmented+0x66>
 801830c:	08018009 	.word	0x08018009

08018310 <uxr_serialize_message_header>:
 8018310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018312:	4616      	mov	r6, r2
 8018314:	b083      	sub	sp, #12
 8018316:	4604      	mov	r4, r0
 8018318:	460d      	mov	r5, r1
 801831a:	9301      	str	r3, [sp, #4]
 801831c:	9f08      	ldr	r7, [sp, #32]
 801831e:	f7f6 f949 	bl	800e5b4 <ucdr_serialize_uint8_t>
 8018322:	4631      	mov	r1, r6
 8018324:	4620      	mov	r0, r4
 8018326:	f7f6 f945 	bl	800e5b4 <ucdr_serialize_uint8_t>
 801832a:	9a01      	ldr	r2, [sp, #4]
 801832c:	2101      	movs	r1, #1
 801832e:	4620      	mov	r0, r4
 8018330:	f7f6 f9ec 	bl	800e70c <ucdr_serialize_endian_uint16_t>
 8018334:	062b      	lsls	r3, r5, #24
 8018336:	d501      	bpl.n	801833c <uxr_serialize_message_header+0x2c>
 8018338:	b003      	add	sp, #12
 801833a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801833c:	2204      	movs	r2, #4
 801833e:	4639      	mov	r1, r7
 8018340:	4620      	mov	r0, r4
 8018342:	b003      	add	sp, #12
 8018344:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8018348:	f7f6 b83a 	b.w	800e3c0 <ucdr_serialize_array_uint8_t>

0801834c <uxr_deserialize_message_header>:
 801834c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801834e:	4616      	mov	r6, r2
 8018350:	b083      	sub	sp, #12
 8018352:	4604      	mov	r4, r0
 8018354:	460d      	mov	r5, r1
 8018356:	9301      	str	r3, [sp, #4]
 8018358:	9f08      	ldr	r7, [sp, #32]
 801835a:	f7f6 f941 	bl	800e5e0 <ucdr_deserialize_uint8_t>
 801835e:	4631      	mov	r1, r6
 8018360:	4620      	mov	r0, r4
 8018362:	f7f6 f93d 	bl	800e5e0 <ucdr_deserialize_uint8_t>
 8018366:	9a01      	ldr	r2, [sp, #4]
 8018368:	2101      	movs	r1, #1
 801836a:	4620      	mov	r0, r4
 801836c:	f7f6 fac2 	bl	800e8f4 <ucdr_deserialize_endian_uint16_t>
 8018370:	f995 3000 	ldrsb.w	r3, [r5]
 8018374:	2b00      	cmp	r3, #0
 8018376:	da01      	bge.n	801837c <uxr_deserialize_message_header+0x30>
 8018378:	b003      	add	sp, #12
 801837a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801837c:	2204      	movs	r2, #4
 801837e:	4639      	mov	r1, r7
 8018380:	4620      	mov	r0, r4
 8018382:	b003      	add	sp, #12
 8018384:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8018388:	f7f6 b87e 	b.w	800e488 <ucdr_deserialize_array_uint8_t>

0801838c <uxr_serialize_submessage_header>:
 801838c:	b530      	push	{r4, r5, lr}
 801838e:	4615      	mov	r5, r2
 8018390:	b083      	sub	sp, #12
 8018392:	4604      	mov	r4, r0
 8018394:	9301      	str	r3, [sp, #4]
 8018396:	f7f6 f90d 	bl	800e5b4 <ucdr_serialize_uint8_t>
 801839a:	4629      	mov	r1, r5
 801839c:	4620      	mov	r0, r4
 801839e:	f7f6 f909 	bl	800e5b4 <ucdr_serialize_uint8_t>
 80183a2:	9a01      	ldr	r2, [sp, #4]
 80183a4:	2101      	movs	r1, #1
 80183a6:	4620      	mov	r0, r4
 80183a8:	b003      	add	sp, #12
 80183aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80183ae:	f7f6 b9ad 	b.w	800e70c <ucdr_serialize_endian_uint16_t>
 80183b2:	bf00      	nop

080183b4 <uxr_deserialize_submessage_header>:
 80183b4:	b530      	push	{r4, r5, lr}
 80183b6:	4615      	mov	r5, r2
 80183b8:	b083      	sub	sp, #12
 80183ba:	4604      	mov	r4, r0
 80183bc:	9301      	str	r3, [sp, #4]
 80183be:	f7f6 f90f 	bl	800e5e0 <ucdr_deserialize_uint8_t>
 80183c2:	4629      	mov	r1, r5
 80183c4:	4620      	mov	r0, r4
 80183c6:	f7f6 f90b 	bl	800e5e0 <ucdr_deserialize_uint8_t>
 80183ca:	9a01      	ldr	r2, [sp, #4]
 80183cc:	2101      	movs	r1, #1
 80183ce:	4620      	mov	r0, r4
 80183d0:	b003      	add	sp, #12
 80183d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80183d6:	f7f6 ba8d 	b.w	800e8f4 <ucdr_deserialize_endian_uint16_t>
 80183da:	bf00      	nop

080183dc <uxr_serialize_CLIENT_Representation>:
 80183dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80183e0:	2204      	movs	r2, #4
 80183e2:	460e      	mov	r6, r1
 80183e4:	4605      	mov	r5, r0
 80183e6:	f7f5 ffeb 	bl	800e3c0 <ucdr_serialize_array_uint8_t>
 80183ea:	4607      	mov	r7, r0
 80183ec:	2202      	movs	r2, #2
 80183ee:	1d31      	adds	r1, r6, #4
 80183f0:	4628      	mov	r0, r5
 80183f2:	f7f5 ffe5 	bl	800e3c0 <ucdr_serialize_array_uint8_t>
 80183f6:	4038      	ands	r0, r7
 80183f8:	2202      	movs	r2, #2
 80183fa:	1db1      	adds	r1, r6, #6
 80183fc:	b2c7      	uxtb	r7, r0
 80183fe:	4628      	mov	r0, r5
 8018400:	f7f5 ffde 	bl	800e3c0 <ucdr_serialize_array_uint8_t>
 8018404:	2204      	movs	r2, #4
 8018406:	4007      	ands	r7, r0
 8018408:	f106 0108 	add.w	r1, r6, #8
 801840c:	4628      	mov	r0, r5
 801840e:	f7f5 ffd7 	bl	800e3c0 <ucdr_serialize_array_uint8_t>
 8018412:	4007      	ands	r7, r0
 8018414:	7b31      	ldrb	r1, [r6, #12]
 8018416:	4628      	mov	r0, r5
 8018418:	f7f6 f8cc 	bl	800e5b4 <ucdr_serialize_uint8_t>
 801841c:	7b71      	ldrb	r1, [r6, #13]
 801841e:	4007      	ands	r7, r0
 8018420:	4628      	mov	r0, r5
 8018422:	f7f6 f899 	bl	800e558 <ucdr_serialize_bool>
 8018426:	7b73      	ldrb	r3, [r6, #13]
 8018428:	ea07 0800 	and.w	r8, r7, r0
 801842c:	b93b      	cbnz	r3, 801843e <uxr_serialize_CLIENT_Representation+0x62>
 801842e:	8bb1      	ldrh	r1, [r6, #28]
 8018430:	4628      	mov	r0, r5
 8018432:	f7f6 f8eb 	bl	800e60c <ucdr_serialize_uint16_t>
 8018436:	ea08 0000 	and.w	r0, r8, r0
 801843a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801843e:	6931      	ldr	r1, [r6, #16]
 8018440:	4628      	mov	r0, r5
 8018442:	f7f6 facd 	bl	800e9e0 <ucdr_serialize_uint32_t>
 8018446:	6933      	ldr	r3, [r6, #16]
 8018448:	b1e3      	cbz	r3, 8018484 <uxr_serialize_CLIENT_Representation+0xa8>
 801844a:	b1c0      	cbz	r0, 801847e <uxr_serialize_CLIENT_Representation+0xa2>
 801844c:	4637      	mov	r7, r6
 801844e:	f04f 0900 	mov.w	r9, #0
 8018452:	e000      	b.n	8018456 <uxr_serialize_CLIENT_Representation+0x7a>
 8018454:	b19c      	cbz	r4, 801847e <uxr_serialize_CLIENT_Representation+0xa2>
 8018456:	6979      	ldr	r1, [r7, #20]
 8018458:	4628      	mov	r0, r5
 801845a:	f001 fd69 	bl	8019f30 <ucdr_serialize_string>
 801845e:	69b9      	ldr	r1, [r7, #24]
 8018460:	4604      	mov	r4, r0
 8018462:	4628      	mov	r0, r5
 8018464:	f001 fd64 	bl	8019f30 <ucdr_serialize_string>
 8018468:	f109 0901 	add.w	r9, r9, #1
 801846c:	6933      	ldr	r3, [r6, #16]
 801846e:	4004      	ands	r4, r0
 8018470:	3708      	adds	r7, #8
 8018472:	4599      	cmp	r9, r3
 8018474:	b2e4      	uxtb	r4, r4
 8018476:	d3ed      	bcc.n	8018454 <uxr_serialize_CLIENT_Representation+0x78>
 8018478:	ea08 0804 	and.w	r8, r8, r4
 801847c:	e7d7      	b.n	801842e <uxr_serialize_CLIENT_Representation+0x52>
 801847e:	f04f 0800 	mov.w	r8, #0
 8018482:	e7d4      	b.n	801842e <uxr_serialize_CLIENT_Representation+0x52>
 8018484:	ea08 0800 	and.w	r8, r8, r0
 8018488:	e7d1      	b.n	801842e <uxr_serialize_CLIENT_Representation+0x52>
 801848a:	bf00      	nop

0801848c <uxr_deserialize_CLIENT_Representation>:
 801848c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018490:	2204      	movs	r2, #4
 8018492:	460c      	mov	r4, r1
 8018494:	4605      	mov	r5, r0
 8018496:	f7f5 fff7 	bl	800e488 <ucdr_deserialize_array_uint8_t>
 801849a:	4607      	mov	r7, r0
 801849c:	2202      	movs	r2, #2
 801849e:	1d21      	adds	r1, r4, #4
 80184a0:	4628      	mov	r0, r5
 80184a2:	f7f5 fff1 	bl	800e488 <ucdr_deserialize_array_uint8_t>
 80184a6:	4038      	ands	r0, r7
 80184a8:	2202      	movs	r2, #2
 80184aa:	1da1      	adds	r1, r4, #6
 80184ac:	b2c6      	uxtb	r6, r0
 80184ae:	4628      	mov	r0, r5
 80184b0:	f7f5 ffea 	bl	800e488 <ucdr_deserialize_array_uint8_t>
 80184b4:	2204      	movs	r2, #4
 80184b6:	4006      	ands	r6, r0
 80184b8:	f104 0108 	add.w	r1, r4, #8
 80184bc:	4628      	mov	r0, r5
 80184be:	f7f5 ffe3 	bl	800e488 <ucdr_deserialize_array_uint8_t>
 80184c2:	4006      	ands	r6, r0
 80184c4:	f104 010c 	add.w	r1, r4, #12
 80184c8:	4628      	mov	r0, r5
 80184ca:	f7f6 f889 	bl	800e5e0 <ucdr_deserialize_uint8_t>
 80184ce:	f104 010d 	add.w	r1, r4, #13
 80184d2:	ea06 0700 	and.w	r7, r6, r0
 80184d6:	4628      	mov	r0, r5
 80184d8:	f7f6 f854 	bl	800e584 <ucdr_deserialize_bool>
 80184dc:	7b63      	ldrb	r3, [r4, #13]
 80184de:	4007      	ands	r7, r0
 80184e0:	b93b      	cbnz	r3, 80184f2 <uxr_deserialize_CLIENT_Representation+0x66>
 80184e2:	f104 011c 	add.w	r1, r4, #28
 80184e6:	4628      	mov	r0, r5
 80184e8:	f7f6 f990 	bl	800e80c <ucdr_deserialize_uint16_t>
 80184ec:	4038      	ands	r0, r7
 80184ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80184f2:	f104 0110 	add.w	r1, r4, #16
 80184f6:	4628      	mov	r0, r5
 80184f8:	f7f6 fba2 	bl	800ec40 <ucdr_deserialize_uint32_t>
 80184fc:	6923      	ldr	r3, [r4, #16]
 80184fe:	2b01      	cmp	r3, #1
 8018500:	d903      	bls.n	801850a <uxr_deserialize_CLIENT_Representation+0x7e>
 8018502:	2301      	movs	r3, #1
 8018504:	2700      	movs	r7, #0
 8018506:	75ab      	strb	r3, [r5, #22]
 8018508:	e7eb      	b.n	80184e2 <uxr_deserialize_CLIENT_Representation+0x56>
 801850a:	b30b      	cbz	r3, 8018550 <uxr_deserialize_CLIENT_Representation+0xc4>
 801850c:	b1f0      	cbz	r0, 801854c <uxr_deserialize_CLIENT_Representation+0xc0>
 801850e:	46a0      	mov	r8, r4
 8018510:	f04f 0900 	mov.w	r9, #0
 8018514:	e000      	b.n	8018518 <uxr_deserialize_CLIENT_Representation+0x8c>
 8018516:	b1ce      	cbz	r6, 801854c <uxr_deserialize_CLIENT_Representation+0xc0>
 8018518:	f8d8 1014 	ldr.w	r1, [r8, #20]
 801851c:	f108 0808 	add.w	r8, r8, #8
 8018520:	f44f 7200 	mov.w	r2, #512	; 0x200
 8018524:	4628      	mov	r0, r5
 8018526:	f001 fd13 	bl	8019f50 <ucdr_deserialize_string>
 801852a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801852e:	4606      	mov	r6, r0
 8018530:	f44f 7200 	mov.w	r2, #512	; 0x200
 8018534:	4628      	mov	r0, r5
 8018536:	f109 0901 	add.w	r9, r9, #1
 801853a:	f001 fd09 	bl	8019f50 <ucdr_deserialize_string>
 801853e:	6923      	ldr	r3, [r4, #16]
 8018540:	4006      	ands	r6, r0
 8018542:	4599      	cmp	r9, r3
 8018544:	b2f6      	uxtb	r6, r6
 8018546:	d3e6      	bcc.n	8018516 <uxr_deserialize_CLIENT_Representation+0x8a>
 8018548:	4037      	ands	r7, r6
 801854a:	e7ca      	b.n	80184e2 <uxr_deserialize_CLIENT_Representation+0x56>
 801854c:	2700      	movs	r7, #0
 801854e:	e7c8      	b.n	80184e2 <uxr_deserialize_CLIENT_Representation+0x56>
 8018550:	4007      	ands	r7, r0
 8018552:	e7c6      	b.n	80184e2 <uxr_deserialize_CLIENT_Representation+0x56>

08018554 <uxr_serialize_AGENT_Representation>:
 8018554:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018558:	2204      	movs	r2, #4
 801855a:	460f      	mov	r7, r1
 801855c:	4605      	mov	r5, r0
 801855e:	f7f5 ff2f 	bl	800e3c0 <ucdr_serialize_array_uint8_t>
 8018562:	4604      	mov	r4, r0
 8018564:	2202      	movs	r2, #2
 8018566:	1d39      	adds	r1, r7, #4
 8018568:	4628      	mov	r0, r5
 801856a:	f7f5 ff29 	bl	800e3c0 <ucdr_serialize_array_uint8_t>
 801856e:	4020      	ands	r0, r4
 8018570:	2202      	movs	r2, #2
 8018572:	1db9      	adds	r1, r7, #6
 8018574:	b2c4      	uxtb	r4, r0
 8018576:	4628      	mov	r0, r5
 8018578:	f7f5 ff22 	bl	800e3c0 <ucdr_serialize_array_uint8_t>
 801857c:	7a39      	ldrb	r1, [r7, #8]
 801857e:	4004      	ands	r4, r0
 8018580:	4628      	mov	r0, r5
 8018582:	f7f5 ffe9 	bl	800e558 <ucdr_serialize_bool>
 8018586:	7a3b      	ldrb	r3, [r7, #8]
 8018588:	ea00 0804 	and.w	r8, r0, r4
 801858c:	b913      	cbnz	r3, 8018594 <uxr_serialize_AGENT_Representation+0x40>
 801858e:	4640      	mov	r0, r8
 8018590:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018594:	68f9      	ldr	r1, [r7, #12]
 8018596:	4628      	mov	r0, r5
 8018598:	f7f6 fa22 	bl	800e9e0 <ucdr_serialize_uint32_t>
 801859c:	68fb      	ldr	r3, [r7, #12]
 801859e:	b303      	cbz	r3, 80185e2 <uxr_serialize_AGENT_Representation+0x8e>
 80185a0:	b1d0      	cbz	r0, 80185d8 <uxr_serialize_AGENT_Representation+0x84>
 80185a2:	463e      	mov	r6, r7
 80185a4:	f04f 0900 	mov.w	r9, #0
 80185a8:	e000      	b.n	80185ac <uxr_serialize_AGENT_Representation+0x58>
 80185aa:	b1ac      	cbz	r4, 80185d8 <uxr_serialize_AGENT_Representation+0x84>
 80185ac:	6931      	ldr	r1, [r6, #16]
 80185ae:	4628      	mov	r0, r5
 80185b0:	f001 fcbe 	bl	8019f30 <ucdr_serialize_string>
 80185b4:	6971      	ldr	r1, [r6, #20]
 80185b6:	4604      	mov	r4, r0
 80185b8:	4628      	mov	r0, r5
 80185ba:	f001 fcb9 	bl	8019f30 <ucdr_serialize_string>
 80185be:	f109 0901 	add.w	r9, r9, #1
 80185c2:	68fb      	ldr	r3, [r7, #12]
 80185c4:	4004      	ands	r4, r0
 80185c6:	3608      	adds	r6, #8
 80185c8:	4599      	cmp	r9, r3
 80185ca:	b2e4      	uxtb	r4, r4
 80185cc:	d3ed      	bcc.n	80185aa <uxr_serialize_AGENT_Representation+0x56>
 80185ce:	ea08 0804 	and.w	r8, r8, r4
 80185d2:	4640      	mov	r0, r8
 80185d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80185d8:	f04f 0800 	mov.w	r8, #0
 80185dc:	4640      	mov	r0, r8
 80185de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80185e2:	ea08 0800 	and.w	r8, r8, r0
 80185e6:	e7d2      	b.n	801858e <uxr_serialize_AGENT_Representation+0x3a>

080185e8 <uxr_serialize_DATAWRITER_Representation>:
 80185e8:	b570      	push	{r4, r5, r6, lr}
 80185ea:	460d      	mov	r5, r1
 80185ec:	7809      	ldrb	r1, [r1, #0]
 80185ee:	4606      	mov	r6, r0
 80185f0:	f7f5 ffe0 	bl	800e5b4 <ucdr_serialize_uint8_t>
 80185f4:	4604      	mov	r4, r0
 80185f6:	b130      	cbz	r0, 8018606 <uxr_serialize_DATAWRITER_Representation+0x1e>
 80185f8:	782b      	ldrb	r3, [r5, #0]
 80185fa:	2b02      	cmp	r3, #2
 80185fc:	d00c      	beq.n	8018618 <uxr_serialize_DATAWRITER_Representation+0x30>
 80185fe:	2b03      	cmp	r3, #3
 8018600:	d010      	beq.n	8018624 <uxr_serialize_DATAWRITER_Representation+0x3c>
 8018602:	2b01      	cmp	r3, #1
 8018604:	d008      	beq.n	8018618 <uxr_serialize_DATAWRITER_Representation+0x30>
 8018606:	2202      	movs	r2, #2
 8018608:	f505 7102 	add.w	r1, r5, #520	; 0x208
 801860c:	4630      	mov	r0, r6
 801860e:	f7f5 fed7 	bl	800e3c0 <ucdr_serialize_array_uint8_t>
 8018612:	4020      	ands	r0, r4
 8018614:	b2c0      	uxtb	r0, r0
 8018616:	bd70      	pop	{r4, r5, r6, pc}
 8018618:	6869      	ldr	r1, [r5, #4]
 801861a:	4630      	mov	r0, r6
 801861c:	f001 fc88 	bl	8019f30 <ucdr_serialize_string>
 8018620:	4604      	mov	r4, r0
 8018622:	e7f0      	b.n	8018606 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8018624:	4629      	mov	r1, r5
 8018626:	4630      	mov	r0, r6
 8018628:	f851 2f04 	ldr.w	r2, [r1, #4]!
 801862c:	3104      	adds	r1, #4
 801862e:	f7f7 facb 	bl	800fbc8 <ucdr_serialize_sequence_uint8_t>
 8018632:	4604      	mov	r4, r0
 8018634:	e7e7      	b.n	8018606 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8018636:	bf00      	nop

08018638 <uxr_serialize_ObjectVariant.part.0>:
 8018638:	b570      	push	{r4, r5, r6, lr}
 801863a:	780b      	ldrb	r3, [r1, #0]
 801863c:	460c      	mov	r4, r1
 801863e:	4605      	mov	r5, r0
 8018640:	3b01      	subs	r3, #1
 8018642:	2b0d      	cmp	r3, #13
 8018644:	d854      	bhi.n	80186f0 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8018646:	e8df f003 	tbb	[pc, r3]
 801864a:	0730      	.short	0x0730
 801864c:	07071b1b 	.word	0x07071b1b
 8018650:	0c530707 	.word	0x0c530707
 8018654:	494e0c0c 	.word	0x494e0c0c
 8018658:	3104      	adds	r1, #4
 801865a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801865e:	f7ff bfc3 	b.w	80185e8 <uxr_serialize_DATAWRITER_Representation>
 8018662:	7909      	ldrb	r1, [r1, #4]
 8018664:	f7f5 ffa6 	bl	800e5b4 <ucdr_serialize_uint8_t>
 8018668:	b1e8      	cbz	r0, 80186a6 <uxr_serialize_ObjectVariant.part.0+0x6e>
 801866a:	7923      	ldrb	r3, [r4, #4]
 801866c:	2b01      	cmp	r3, #1
 801866e:	d001      	beq.n	8018674 <uxr_serialize_ObjectVariant.part.0+0x3c>
 8018670:	2b02      	cmp	r3, #2
 8018672:	d13d      	bne.n	80186f0 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8018674:	68a1      	ldr	r1, [r4, #8]
 8018676:	4628      	mov	r0, r5
 8018678:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801867c:	f001 bc58 	b.w	8019f30 <ucdr_serialize_string>
 8018680:	7909      	ldrb	r1, [r1, #4]
 8018682:	f7f5 ff97 	bl	800e5b4 <ucdr_serialize_uint8_t>
 8018686:	4606      	mov	r6, r0
 8018688:	b120      	cbz	r0, 8018694 <uxr_serialize_ObjectVariant.part.0+0x5c>
 801868a:	7923      	ldrb	r3, [r4, #4]
 801868c:	2b02      	cmp	r3, #2
 801868e:	d039      	beq.n	8018704 <uxr_serialize_ObjectVariant.part.0+0xcc>
 8018690:	2b03      	cmp	r3, #3
 8018692:	d02f      	beq.n	80186f4 <uxr_serialize_ObjectVariant.part.0+0xbc>
 8018694:	2202      	movs	r2, #2
 8018696:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 801869a:	4628      	mov	r0, r5
 801869c:	f7f5 fe90 	bl	800e3c0 <ucdr_serialize_array_uint8_t>
 80186a0:	4030      	ands	r0, r6
 80186a2:	b2c0      	uxtb	r0, r0
 80186a4:	bd70      	pop	{r4, r5, r6, pc}
 80186a6:	2000      	movs	r0, #0
 80186a8:	bd70      	pop	{r4, r5, r6, pc}
 80186aa:	7909      	ldrb	r1, [r1, #4]
 80186ac:	f7f5 ff82 	bl	800e5b4 <ucdr_serialize_uint8_t>
 80186b0:	4606      	mov	r6, r0
 80186b2:	b158      	cbz	r0, 80186cc <uxr_serialize_ObjectVariant.part.0+0x94>
 80186b4:	7923      	ldrb	r3, [r4, #4]
 80186b6:	2b02      	cmp	r3, #2
 80186b8:	d003      	beq.n	80186c2 <uxr_serialize_ObjectVariant.part.0+0x8a>
 80186ba:	2b03      	cmp	r3, #3
 80186bc:	d028      	beq.n	8018710 <uxr_serialize_ObjectVariant.part.0+0xd8>
 80186be:	2b01      	cmp	r3, #1
 80186c0:	d104      	bne.n	80186cc <uxr_serialize_ObjectVariant.part.0+0x94>
 80186c2:	68a1      	ldr	r1, [r4, #8]
 80186c4:	4628      	mov	r0, r5
 80186c6:	f001 fc33 	bl	8019f30 <ucdr_serialize_string>
 80186ca:	4606      	mov	r6, r0
 80186cc:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	; 0x20c
 80186d0:	4628      	mov	r0, r5
 80186d2:	f7f6 fcab 	bl	800f02c <ucdr_serialize_int16_t>
 80186d6:	4030      	ands	r0, r6
 80186d8:	b2c0      	uxtb	r0, r0
 80186da:	bd70      	pop	{r4, r5, r6, pc}
 80186dc:	3104      	adds	r1, #4
 80186de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80186e2:	f7ff be7b 	b.w	80183dc <uxr_serialize_CLIENT_Representation>
 80186e6:	3104      	adds	r1, #4
 80186e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80186ec:	f7ff bf32 	b.w	8018554 <uxr_serialize_AGENT_Representation>
 80186f0:	2001      	movs	r0, #1
 80186f2:	bd70      	pop	{r4, r5, r6, pc}
 80186f4:	68a2      	ldr	r2, [r4, #8]
 80186f6:	f104 010c 	add.w	r1, r4, #12
 80186fa:	4628      	mov	r0, r5
 80186fc:	f7f7 fa64 	bl	800fbc8 <ucdr_serialize_sequence_uint8_t>
 8018700:	4606      	mov	r6, r0
 8018702:	e7c7      	b.n	8018694 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8018704:	68a1      	ldr	r1, [r4, #8]
 8018706:	4628      	mov	r0, r5
 8018708:	f001 fc12 	bl	8019f30 <ucdr_serialize_string>
 801870c:	4606      	mov	r6, r0
 801870e:	e7c1      	b.n	8018694 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8018710:	68a2      	ldr	r2, [r4, #8]
 8018712:	f104 010c 	add.w	r1, r4, #12
 8018716:	4628      	mov	r0, r5
 8018718:	f7f7 fa56 	bl	800fbc8 <ucdr_serialize_sequence_uint8_t>
 801871c:	4606      	mov	r6, r0
 801871e:	e7d5      	b.n	80186cc <uxr_serialize_ObjectVariant.part.0+0x94>

08018720 <uxr_deserialize_DATAWRITER_Representation>:
 8018720:	b570      	push	{r4, r5, r6, lr}
 8018722:	4606      	mov	r6, r0
 8018724:	460d      	mov	r5, r1
 8018726:	f7f5 ff5b 	bl	800e5e0 <ucdr_deserialize_uint8_t>
 801872a:	4604      	mov	r4, r0
 801872c:	b130      	cbz	r0, 801873c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801872e:	782b      	ldrb	r3, [r5, #0]
 8018730:	2b02      	cmp	r3, #2
 8018732:	d00c      	beq.n	801874e <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8018734:	2b03      	cmp	r3, #3
 8018736:	d012      	beq.n	801875e <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8018738:	2b01      	cmp	r3, #1
 801873a:	d008      	beq.n	801874e <uxr_deserialize_DATAWRITER_Representation+0x2e>
 801873c:	2202      	movs	r2, #2
 801873e:	f505 7102 	add.w	r1, r5, #520	; 0x208
 8018742:	4630      	mov	r0, r6
 8018744:	f7f5 fea0 	bl	800e488 <ucdr_deserialize_array_uint8_t>
 8018748:	4020      	ands	r0, r4
 801874a:	b2c0      	uxtb	r0, r0
 801874c:	bd70      	pop	{r4, r5, r6, pc}
 801874e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8018752:	6869      	ldr	r1, [r5, #4]
 8018754:	4630      	mov	r0, r6
 8018756:	f001 fbfb 	bl	8019f50 <ucdr_deserialize_string>
 801875a:	4604      	mov	r4, r0
 801875c:	e7ee      	b.n	801873c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801875e:	1d2b      	adds	r3, r5, #4
 8018760:	f44f 7200 	mov.w	r2, #512	; 0x200
 8018764:	f105 0108 	add.w	r1, r5, #8
 8018768:	4630      	mov	r0, r6
 801876a:	f7f7 fa3f 	bl	800fbec <ucdr_deserialize_sequence_uint8_t>
 801876e:	4604      	mov	r4, r0
 8018770:	e7e4      	b.n	801873c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8018772:	bf00      	nop

08018774 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8018774:	b570      	push	{r4, r5, r6, lr}
 8018776:	460d      	mov	r5, r1
 8018778:	7809      	ldrb	r1, [r1, #0]
 801877a:	4606      	mov	r6, r0
 801877c:	f7f5 feec 	bl	800e558 <ucdr_serialize_bool>
 8018780:	782b      	ldrb	r3, [r5, #0]
 8018782:	4604      	mov	r4, r0
 8018784:	b94b      	cbnz	r3, 801879a <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8018786:	7a29      	ldrb	r1, [r5, #8]
 8018788:	4630      	mov	r0, r6
 801878a:	f7f5 fee5 	bl	800e558 <ucdr_serialize_bool>
 801878e:	7a2b      	ldrb	r3, [r5, #8]
 8018790:	4004      	ands	r4, r0
 8018792:	b2e4      	uxtb	r4, r4
 8018794:	b943      	cbnz	r3, 80187a8 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8018796:	4620      	mov	r0, r4
 8018798:	bd70      	pop	{r4, r5, r6, pc}
 801879a:	6869      	ldr	r1, [r5, #4]
 801879c:	4630      	mov	r0, r6
 801879e:	f001 fbc7 	bl	8019f30 <ucdr_serialize_string>
 80187a2:	4004      	ands	r4, r0
 80187a4:	b2e4      	uxtb	r4, r4
 80187a6:	e7ee      	b.n	8018786 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 80187a8:	68e9      	ldr	r1, [r5, #12]
 80187aa:	4630      	mov	r0, r6
 80187ac:	f001 fbc0 	bl	8019f30 <ucdr_serialize_string>
 80187b0:	4004      	ands	r4, r0
 80187b2:	4620      	mov	r0, r4
 80187b4:	bd70      	pop	{r4, r5, r6, pc}
 80187b6:	bf00      	nop

080187b8 <uxr_serialize_OBJK_Replier_Binary>:
 80187b8:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 80187bc:	460f      	mov	r7, r1
 80187be:	4680      	mov	r8, r0
 80187c0:	6809      	ldr	r1, [r1, #0]
 80187c2:	f001 fbb5 	bl	8019f30 <ucdr_serialize_string>
 80187c6:	4605      	mov	r5, r0
 80187c8:	6879      	ldr	r1, [r7, #4]
 80187ca:	4640      	mov	r0, r8
 80187cc:	f001 fbb0 	bl	8019f30 <ucdr_serialize_string>
 80187d0:	4005      	ands	r5, r0
 80187d2:	68b9      	ldr	r1, [r7, #8]
 80187d4:	4640      	mov	r0, r8
 80187d6:	b2ec      	uxtb	r4, r5
 80187d8:	f001 fbaa 	bl	8019f30 <ucdr_serialize_string>
 80187dc:	7b39      	ldrb	r1, [r7, #12]
 80187de:	4004      	ands	r4, r0
 80187e0:	4640      	mov	r0, r8
 80187e2:	f7f5 feb9 	bl	800e558 <ucdr_serialize_bool>
 80187e6:	7b3b      	ldrb	r3, [r7, #12]
 80187e8:	4004      	ands	r4, r0
 80187ea:	b94b      	cbnz	r3, 8018800 <uxr_serialize_OBJK_Replier_Binary+0x48>
 80187ec:	7d39      	ldrb	r1, [r7, #20]
 80187ee:	4640      	mov	r0, r8
 80187f0:	f7f5 feb2 	bl	800e558 <ucdr_serialize_bool>
 80187f4:	7d3b      	ldrb	r3, [r7, #20]
 80187f6:	4004      	ands	r4, r0
 80187f8:	b943      	cbnz	r3, 801880c <uxr_serialize_OBJK_Replier_Binary+0x54>
 80187fa:	4620      	mov	r0, r4
 80187fc:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 8018800:	6939      	ldr	r1, [r7, #16]
 8018802:	4640      	mov	r0, r8
 8018804:	f001 fb94 	bl	8019f30 <ucdr_serialize_string>
 8018808:	4004      	ands	r4, r0
 801880a:	e7ef      	b.n	80187ec <uxr_serialize_OBJK_Replier_Binary+0x34>
 801880c:	69b9      	ldr	r1, [r7, #24]
 801880e:	4640      	mov	r0, r8
 8018810:	f001 fb8e 	bl	8019f30 <ucdr_serialize_string>
 8018814:	4004      	ands	r4, r0
 8018816:	b2e4      	uxtb	r4, r4
 8018818:	4620      	mov	r0, r4
 801881a:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 801881e:	bf00      	nop

08018820 <uxr_deserialize_ObjectVariant>:
 8018820:	b570      	push	{r4, r5, r6, lr}
 8018822:	4605      	mov	r5, r0
 8018824:	460e      	mov	r6, r1
 8018826:	f7f5 fedb 	bl	800e5e0 <ucdr_deserialize_uint8_t>
 801882a:	b168      	cbz	r0, 8018848 <uxr_deserialize_ObjectVariant+0x28>
 801882c:	7833      	ldrb	r3, [r6, #0]
 801882e:	4604      	mov	r4, r0
 8018830:	3b01      	subs	r3, #1
 8018832:	2b0d      	cmp	r3, #13
 8018834:	d809      	bhi.n	801884a <uxr_deserialize_ObjectVariant+0x2a>
 8018836:	e8df f003 	tbb	[pc, r3]
 801883a:	0a41      	.short	0x0a41
 801883c:	0a0a2323 	.word	0x0a0a2323
 8018840:	10080a0a 	.word	0x10080a0a
 8018844:	565c1010 	.word	0x565c1010
 8018848:	2400      	movs	r4, #0
 801884a:	4620      	mov	r0, r4
 801884c:	bd70      	pop	{r4, r5, r6, pc}
 801884e:	1d31      	adds	r1, r6, #4
 8018850:	4628      	mov	r0, r5
 8018852:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018856:	f7ff bf63 	b.w	8018720 <uxr_deserialize_DATAWRITER_Representation>
 801885a:	1d31      	adds	r1, r6, #4
 801885c:	4628      	mov	r0, r5
 801885e:	f7f5 febf 	bl	800e5e0 <ucdr_deserialize_uint8_t>
 8018862:	2800      	cmp	r0, #0
 8018864:	d0f0      	beq.n	8018848 <uxr_deserialize_ObjectVariant+0x28>
 8018866:	7933      	ldrb	r3, [r6, #4]
 8018868:	2b01      	cmp	r3, #1
 801886a:	d001      	beq.n	8018870 <uxr_deserialize_ObjectVariant+0x50>
 801886c:	2b02      	cmp	r3, #2
 801886e:	d1ec      	bne.n	801884a <uxr_deserialize_ObjectVariant+0x2a>
 8018870:	68b1      	ldr	r1, [r6, #8]
 8018872:	4628      	mov	r0, r5
 8018874:	f44f 7200 	mov.w	r2, #512	; 0x200
 8018878:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801887c:	f001 bb68 	b.w	8019f50 <ucdr_deserialize_string>
 8018880:	1d31      	adds	r1, r6, #4
 8018882:	4628      	mov	r0, r5
 8018884:	f7f5 feac 	bl	800e5e0 <ucdr_deserialize_uint8_t>
 8018888:	4604      	mov	r4, r0
 801888a:	b170      	cbz	r0, 80188aa <uxr_deserialize_ObjectVariant+0x8a>
 801888c:	7933      	ldrb	r3, [r6, #4]
 801888e:	2b02      	cmp	r3, #2
 8018890:	d04c      	beq.n	801892c <uxr_deserialize_ObjectVariant+0x10c>
 8018892:	2b03      	cmp	r3, #3
 8018894:	d109      	bne.n	80188aa <uxr_deserialize_ObjectVariant+0x8a>
 8018896:	f106 0308 	add.w	r3, r6, #8
 801889a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801889e:	f106 010c 	add.w	r1, r6, #12
 80188a2:	4628      	mov	r0, r5
 80188a4:	f7f7 f9a2 	bl	800fbec <ucdr_deserialize_sequence_uint8_t>
 80188a8:	4604      	mov	r4, r0
 80188aa:	2202      	movs	r2, #2
 80188ac:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 80188b0:	4628      	mov	r0, r5
 80188b2:	f7f5 fde9 	bl	800e488 <ucdr_deserialize_array_uint8_t>
 80188b6:	4020      	ands	r0, r4
 80188b8:	b2c4      	uxtb	r4, r0
 80188ba:	e7c6      	b.n	801884a <uxr_deserialize_ObjectVariant+0x2a>
 80188bc:	1d31      	adds	r1, r6, #4
 80188be:	4628      	mov	r0, r5
 80188c0:	f7f5 fe8e 	bl	800e5e0 <ucdr_deserialize_uint8_t>
 80188c4:	4604      	mov	r4, r0
 80188c6:	b130      	cbz	r0, 80188d6 <uxr_deserialize_ObjectVariant+0xb6>
 80188c8:	7933      	ldrb	r3, [r6, #4]
 80188ca:	2b02      	cmp	r3, #2
 80188cc:	d036      	beq.n	801893c <uxr_deserialize_ObjectVariant+0x11c>
 80188ce:	2b03      	cmp	r3, #3
 80188d0:	d03c      	beq.n	801894c <uxr_deserialize_ObjectVariant+0x12c>
 80188d2:	2b01      	cmp	r3, #1
 80188d4:	d032      	beq.n	801893c <uxr_deserialize_ObjectVariant+0x11c>
 80188d6:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 80188da:	4628      	mov	r0, r5
 80188dc:	f7f6 fc26 	bl	800f12c <ucdr_deserialize_int16_t>
 80188e0:	4020      	ands	r0, r4
 80188e2:	b2c4      	uxtb	r4, r0
 80188e4:	e7b1      	b.n	801884a <uxr_deserialize_ObjectVariant+0x2a>
 80188e6:	1d31      	adds	r1, r6, #4
 80188e8:	4628      	mov	r0, r5
 80188ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80188ee:	f7ff bdcd 	b.w	801848c <uxr_deserialize_CLIENT_Representation>
 80188f2:	2204      	movs	r2, #4
 80188f4:	4628      	mov	r0, r5
 80188f6:	18b1      	adds	r1, r6, r2
 80188f8:	f7f5 fdc6 	bl	800e488 <ucdr_deserialize_array_uint8_t>
 80188fc:	4604      	mov	r4, r0
 80188fe:	2202      	movs	r2, #2
 8018900:	f106 0108 	add.w	r1, r6, #8
 8018904:	4628      	mov	r0, r5
 8018906:	f7f5 fdbf 	bl	800e488 <ucdr_deserialize_array_uint8_t>
 801890a:	4004      	ands	r4, r0
 801890c:	2202      	movs	r2, #2
 801890e:	f106 010a 	add.w	r1, r6, #10
 8018912:	4628      	mov	r0, r5
 8018914:	b2e4      	uxtb	r4, r4
 8018916:	f7f5 fdb7 	bl	800e488 <ucdr_deserialize_array_uint8_t>
 801891a:	4603      	mov	r3, r0
 801891c:	f106 010c 	add.w	r1, r6, #12
 8018920:	4628      	mov	r0, r5
 8018922:	401c      	ands	r4, r3
 8018924:	f7f5 fe2e 	bl	800e584 <ucdr_deserialize_bool>
 8018928:	4004      	ands	r4, r0
 801892a:	e78e      	b.n	801884a <uxr_deserialize_ObjectVariant+0x2a>
 801892c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8018930:	68b1      	ldr	r1, [r6, #8]
 8018932:	4628      	mov	r0, r5
 8018934:	f001 fb0c 	bl	8019f50 <ucdr_deserialize_string>
 8018938:	4604      	mov	r4, r0
 801893a:	e7b6      	b.n	80188aa <uxr_deserialize_ObjectVariant+0x8a>
 801893c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8018940:	68b1      	ldr	r1, [r6, #8]
 8018942:	4628      	mov	r0, r5
 8018944:	f001 fb04 	bl	8019f50 <ucdr_deserialize_string>
 8018948:	4604      	mov	r4, r0
 801894a:	e7c4      	b.n	80188d6 <uxr_deserialize_ObjectVariant+0xb6>
 801894c:	f106 0308 	add.w	r3, r6, #8
 8018950:	f44f 7200 	mov.w	r2, #512	; 0x200
 8018954:	f106 010c 	add.w	r1, r6, #12
 8018958:	4628      	mov	r0, r5
 801895a:	f7f7 f947 	bl	800fbec <ucdr_deserialize_sequence_uint8_t>
 801895e:	4604      	mov	r4, r0
 8018960:	e7b9      	b.n	80188d6 <uxr_deserialize_ObjectVariant+0xb6>
 8018962:	bf00      	nop

08018964 <uxr_deserialize_BaseObjectRequest>:
 8018964:	b570      	push	{r4, r5, r6, lr}
 8018966:	2202      	movs	r2, #2
 8018968:	4605      	mov	r5, r0
 801896a:	460e      	mov	r6, r1
 801896c:	f7f5 fd8c 	bl	800e488 <ucdr_deserialize_array_uint8_t>
 8018970:	2202      	movs	r2, #2
 8018972:	4604      	mov	r4, r0
 8018974:	4628      	mov	r0, r5
 8018976:	18b1      	adds	r1, r6, r2
 8018978:	f7f5 fd86 	bl	800e488 <ucdr_deserialize_array_uint8_t>
 801897c:	4020      	ands	r0, r4
 801897e:	b2c0      	uxtb	r0, r0
 8018980:	bd70      	pop	{r4, r5, r6, pc}
 8018982:	bf00      	nop

08018984 <uxr_serialize_ActivityInfoVariant>:
 8018984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018988:	460e      	mov	r6, r1
 801898a:	7809      	ldrb	r1, [r1, #0]
 801898c:	4680      	mov	r8, r0
 801898e:	f7f5 fe11 	bl	800e5b4 <ucdr_serialize_uint8_t>
 8018992:	4607      	mov	r7, r0
 8018994:	b138      	cbz	r0, 80189a6 <uxr_serialize_ActivityInfoVariant+0x22>
 8018996:	7833      	ldrb	r3, [r6, #0]
 8018998:	2b06      	cmp	r3, #6
 801899a:	f000 8081 	beq.w	8018aa0 <uxr_serialize_ActivityInfoVariant+0x11c>
 801899e:	2b0d      	cmp	r3, #13
 80189a0:	d014      	beq.n	80189cc <uxr_serialize_ActivityInfoVariant+0x48>
 80189a2:	2b05      	cmp	r3, #5
 80189a4:	d002      	beq.n	80189ac <uxr_serialize_ActivityInfoVariant+0x28>
 80189a6:	4638      	mov	r0, r7
 80189a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80189ac:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 80189b0:	4640      	mov	r0, r8
 80189b2:	f7f6 fb3b 	bl	800f02c <ucdr_serialize_int16_t>
 80189b6:	4607      	mov	r7, r0
 80189b8:	4640      	mov	r0, r8
 80189ba:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 80189be:	f7f6 fa65 	bl	800ee8c <ucdr_serialize_uint64_t>
 80189c2:	4038      	ands	r0, r7
 80189c4:	b2c7      	uxtb	r7, r0
 80189c6:	4638      	mov	r0, r7
 80189c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80189cc:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 80189d0:	4640      	mov	r0, r8
 80189d2:	f7f6 fb2b 	bl	800f02c <ucdr_serialize_int16_t>
 80189d6:	68f1      	ldr	r1, [r6, #12]
 80189d8:	4607      	mov	r7, r0
 80189da:	4640      	mov	r0, r8
 80189dc:	f7f6 f800 	bl	800e9e0 <ucdr_serialize_uint32_t>
 80189e0:	68f3      	ldr	r3, [r6, #12]
 80189e2:	2b00      	cmp	r3, #0
 80189e4:	d0ed      	beq.n	80189c2 <uxr_serialize_ActivityInfoVariant+0x3e>
 80189e6:	b318      	cbz	r0, 8018a30 <uxr_serialize_ActivityInfoVariant+0xac>
 80189e8:	f106 090c 	add.w	r9, r6, #12
 80189ec:	2400      	movs	r4, #0
 80189ee:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 80189f2:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
 80189f6:	7c29      	ldrb	r1, [r5, #16]
 80189f8:	4640      	mov	r0, r8
 80189fa:	f7f5 fddb 	bl	800e5b4 <ucdr_serialize_uint8_t>
 80189fe:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 8018a02:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8018a06:	2800      	cmp	r0, #0
 8018a08:	d051      	beq.n	8018aae <uxr_serialize_ActivityInfoVariant+0x12a>
 8018a0a:	7c2b      	ldrb	r3, [r5, #16]
 8018a0c:	00c9      	lsls	r1, r1, #3
 8018a0e:	2b03      	cmp	r3, #3
 8018a10:	d854      	bhi.n	8018abc <uxr_serialize_ActivityInfoVariant+0x138>
 8018a12:	e8df f003 	tbb	[pc, r3]
 8018a16:	2133      	.short	0x2133
 8018a18:	020f      	.short	0x020f
 8018a1a:	4449      	add	r1, r9
 8018a1c:	4640      	mov	r0, r8
 8018a1e:	6889      	ldr	r1, [r1, #8]
 8018a20:	f001 fa86 	bl	8019f30 <ucdr_serialize_string>
 8018a24:	3401      	adds	r4, #1
 8018a26:	68f2      	ldr	r2, [r6, #12]
 8018a28:	4294      	cmp	r4, r2
 8018a2a:	d244      	bcs.n	8018ab6 <uxr_serialize_ActivityInfoVariant+0x132>
 8018a2c:	2800      	cmp	r0, #0
 8018a2e:	d1de      	bne.n	80189ee <uxr_serialize_ActivityInfoVariant+0x6a>
 8018a30:	2700      	movs	r7, #0
 8018a32:	e7b8      	b.n	80189a6 <uxr_serialize_ActivityInfoVariant+0x22>
 8018a34:	3108      	adds	r1, #8
 8018a36:	44a2      	add	sl, r4
 8018a38:	2210      	movs	r2, #16
 8018a3a:	4640      	mov	r0, r8
 8018a3c:	4449      	add	r1, r9
 8018a3e:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8018a42:	f7f5 fcbd 	bl	800e3c0 <ucdr_serialize_array_uint8_t>
 8018a46:	4605      	mov	r5, r0
 8018a48:	f8da 1024 	ldr.w	r1, [sl, #36]	; 0x24
 8018a4c:	4640      	mov	r0, r8
 8018a4e:	f7f5 ffc7 	bl	800e9e0 <ucdr_serialize_uint32_t>
 8018a52:	4028      	ands	r0, r5
 8018a54:	b2c0      	uxtb	r0, r0
 8018a56:	e7e5      	b.n	8018a24 <uxr_serialize_ActivityInfoVariant+0xa0>
 8018a58:	3108      	adds	r1, #8
 8018a5a:	44a2      	add	sl, r4
 8018a5c:	2204      	movs	r2, #4
 8018a5e:	4640      	mov	r0, r8
 8018a60:	4449      	add	r1, r9
 8018a62:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8018a66:	f7f5 fcab 	bl	800e3c0 <ucdr_serialize_array_uint8_t>
 8018a6a:	4605      	mov	r5, r0
 8018a6c:	f8ba 1018 	ldrh.w	r1, [sl, #24]
 8018a70:	4640      	mov	r0, r8
 8018a72:	f7f5 fdcb 	bl	800e60c <ucdr_serialize_uint16_t>
 8018a76:	4028      	ands	r0, r5
 8018a78:	b2c0      	uxtb	r0, r0
 8018a7a:	e7d3      	b.n	8018a24 <uxr_serialize_ActivityInfoVariant+0xa0>
 8018a7c:	3108      	adds	r1, #8
 8018a7e:	44a2      	add	sl, r4
 8018a80:	2202      	movs	r2, #2
 8018a82:	4640      	mov	r0, r8
 8018a84:	4449      	add	r1, r9
 8018a86:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8018a8a:	f7f5 fc99 	bl	800e3c0 <ucdr_serialize_array_uint8_t>
 8018a8e:	4605      	mov	r5, r0
 8018a90:	f89a 1016 	ldrb.w	r1, [sl, #22]
 8018a94:	4640      	mov	r0, r8
 8018a96:	f7f5 fd8d 	bl	800e5b4 <ucdr_serialize_uint8_t>
 8018a9a:	4028      	ands	r0, r5
 8018a9c:	b2c0      	uxtb	r0, r0
 8018a9e:	e7c1      	b.n	8018a24 <uxr_serialize_ActivityInfoVariant+0xa0>
 8018aa0:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8018aa4:	4640      	mov	r0, r8
 8018aa6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018aaa:	f7f6 babf 	b.w	800f02c <ucdr_serialize_int16_t>
 8018aae:	3401      	adds	r4, #1
 8018ab0:	68f2      	ldr	r2, [r6, #12]
 8018ab2:	42a2      	cmp	r2, r4
 8018ab4:	d8bc      	bhi.n	8018a30 <uxr_serialize_ActivityInfoVariant+0xac>
 8018ab6:	4007      	ands	r7, r0
 8018ab8:	b2ff      	uxtb	r7, r7
 8018aba:	e774      	b.n	80189a6 <uxr_serialize_ActivityInfoVariant+0x22>
 8018abc:	3401      	adds	r4, #1
 8018abe:	68f3      	ldr	r3, [r6, #12]
 8018ac0:	3518      	adds	r5, #24
 8018ac2:	429c      	cmp	r4, r3
 8018ac4:	d397      	bcc.n	80189f6 <uxr_serialize_ActivityInfoVariant+0x72>
 8018ac6:	e76e      	b.n	80189a6 <uxr_serialize_ActivityInfoVariant+0x22>

08018ac8 <uxr_deserialize_BaseObjectReply>:
 8018ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018acc:	2202      	movs	r2, #2
 8018ace:	4606      	mov	r6, r0
 8018ad0:	460f      	mov	r7, r1
 8018ad2:	f7f5 fcd9 	bl	800e488 <ucdr_deserialize_array_uint8_t>
 8018ad6:	2202      	movs	r2, #2
 8018ad8:	4605      	mov	r5, r0
 8018ada:	4630      	mov	r0, r6
 8018adc:	18b9      	adds	r1, r7, r2
 8018ade:	f7f5 fcd3 	bl	800e488 <ucdr_deserialize_array_uint8_t>
 8018ae2:	4680      	mov	r8, r0
 8018ae4:	1d39      	adds	r1, r7, #4
 8018ae6:	4630      	mov	r0, r6
 8018ae8:	f7f5 fd7a 	bl	800e5e0 <ucdr_deserialize_uint8_t>
 8018aec:	ea05 0508 	and.w	r5, r5, r8
 8018af0:	4604      	mov	r4, r0
 8018af2:	1d79      	adds	r1, r7, #5
 8018af4:	4630      	mov	r0, r6
 8018af6:	402c      	ands	r4, r5
 8018af8:	f7f5 fd72 	bl	800e5e0 <ucdr_deserialize_uint8_t>
 8018afc:	4020      	ands	r0, r4
 8018afe:	b2c0      	uxtb	r0, r0
 8018b00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018b04 <uxr_serialize_ReadSpecification>:
 8018b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018b06:	460e      	mov	r6, r1
 8018b08:	4607      	mov	r7, r0
 8018b0a:	7809      	ldrb	r1, [r1, #0]
 8018b0c:	f7f5 fd52 	bl	800e5b4 <ucdr_serialize_uint8_t>
 8018b10:	4604      	mov	r4, r0
 8018b12:	7871      	ldrb	r1, [r6, #1]
 8018b14:	4638      	mov	r0, r7
 8018b16:	f7f5 fd4d 	bl	800e5b4 <ucdr_serialize_uint8_t>
 8018b1a:	4004      	ands	r4, r0
 8018b1c:	78b1      	ldrb	r1, [r6, #2]
 8018b1e:	4638      	mov	r0, r7
 8018b20:	f7f5 fd1a 	bl	800e558 <ucdr_serialize_bool>
 8018b24:	78b3      	ldrb	r3, [r6, #2]
 8018b26:	b2e4      	uxtb	r4, r4
 8018b28:	4004      	ands	r4, r0
 8018b2a:	b943      	cbnz	r3, 8018b3e <uxr_serialize_ReadSpecification+0x3a>
 8018b2c:	7a31      	ldrb	r1, [r6, #8]
 8018b2e:	4638      	mov	r0, r7
 8018b30:	f7f5 fd12 	bl	800e558 <ucdr_serialize_bool>
 8018b34:	7a33      	ldrb	r3, [r6, #8]
 8018b36:	4004      	ands	r4, r0
 8018b38:	b93b      	cbnz	r3, 8018b4a <uxr_serialize_ReadSpecification+0x46>
 8018b3a:	4620      	mov	r0, r4
 8018b3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018b3e:	6871      	ldr	r1, [r6, #4]
 8018b40:	4638      	mov	r0, r7
 8018b42:	f001 f9f5 	bl	8019f30 <ucdr_serialize_string>
 8018b46:	4004      	ands	r4, r0
 8018b48:	e7f0      	b.n	8018b2c <uxr_serialize_ReadSpecification+0x28>
 8018b4a:	8971      	ldrh	r1, [r6, #10]
 8018b4c:	4638      	mov	r0, r7
 8018b4e:	f7f5 fd5d 	bl	800e60c <ucdr_serialize_uint16_t>
 8018b52:	4605      	mov	r5, r0
 8018b54:	89b1      	ldrh	r1, [r6, #12]
 8018b56:	4638      	mov	r0, r7
 8018b58:	f7f5 fd58 	bl	800e60c <ucdr_serialize_uint16_t>
 8018b5c:	4005      	ands	r5, r0
 8018b5e:	89f1      	ldrh	r1, [r6, #14]
 8018b60:	4638      	mov	r0, r7
 8018b62:	b2ed      	uxtb	r5, r5
 8018b64:	f7f5 fd52 	bl	800e60c <ucdr_serialize_uint16_t>
 8018b68:	8a31      	ldrh	r1, [r6, #16]
 8018b6a:	4025      	ands	r5, r4
 8018b6c:	4604      	mov	r4, r0
 8018b6e:	4638      	mov	r0, r7
 8018b70:	4025      	ands	r5, r4
 8018b72:	f7f5 fd4b 	bl	800e60c <ucdr_serialize_uint16_t>
 8018b76:	ea00 0405 	and.w	r4, r0, r5
 8018b7a:	4620      	mov	r0, r4
 8018b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018b7e:	bf00      	nop

08018b80 <uxr_serialize_CREATE_CLIENT_Payload>:
 8018b80:	f7ff bc2c 	b.w	80183dc <uxr_serialize_CLIENT_Representation>

08018b84 <uxr_serialize_CREATE_Payload>:
 8018b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018b86:	2202      	movs	r2, #2
 8018b88:	4607      	mov	r7, r0
 8018b8a:	460e      	mov	r6, r1
 8018b8c:	f7f5 fc18 	bl	800e3c0 <ucdr_serialize_array_uint8_t>
 8018b90:	2202      	movs	r2, #2
 8018b92:	4605      	mov	r5, r0
 8018b94:	4638      	mov	r0, r7
 8018b96:	18b1      	adds	r1, r6, r2
 8018b98:	f7f5 fc12 	bl	800e3c0 <ucdr_serialize_array_uint8_t>
 8018b9c:	7931      	ldrb	r1, [r6, #4]
 8018b9e:	4604      	mov	r4, r0
 8018ba0:	4638      	mov	r0, r7
 8018ba2:	f7f5 fd07 	bl	800e5b4 <ucdr_serialize_uint8_t>
 8018ba6:	b170      	cbz	r0, 8018bc6 <uxr_serialize_CREATE_Payload+0x42>
 8018ba8:	7933      	ldrb	r3, [r6, #4]
 8018baa:	402c      	ands	r4, r5
 8018bac:	3b01      	subs	r3, #1
 8018bae:	b2e4      	uxtb	r4, r4
 8018bb0:	2b0d      	cmp	r3, #13
 8018bb2:	d809      	bhi.n	8018bc8 <uxr_serialize_CREATE_Payload+0x44>
 8018bb4:	e8df f003 	tbb	[pc, r3]
 8018bb8:	23230a4c 	.word	0x23230a4c
 8018bbc:	0a0a0a0a 	.word	0x0a0a0a0a
 8018bc0:	12121208 	.word	0x12121208
 8018bc4:	3e45      	.short	0x3e45
 8018bc6:	2400      	movs	r4, #0
 8018bc8:	4620      	mov	r0, r4
 8018bca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018bcc:	f106 0108 	add.w	r1, r6, #8
 8018bd0:	4638      	mov	r0, r7
 8018bd2:	f7ff fd09 	bl	80185e8 <uxr_serialize_DATAWRITER_Representation>
 8018bd6:	4004      	ands	r4, r0
 8018bd8:	4620      	mov	r0, r4
 8018bda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018bdc:	7a31      	ldrb	r1, [r6, #8]
 8018bde:	4638      	mov	r0, r7
 8018be0:	f7f5 fce8 	bl	800e5b4 <ucdr_serialize_uint8_t>
 8018be4:	2800      	cmp	r0, #0
 8018be6:	d0ee      	beq.n	8018bc6 <uxr_serialize_CREATE_Payload+0x42>
 8018be8:	7a33      	ldrb	r3, [r6, #8]
 8018bea:	2b01      	cmp	r3, #1
 8018bec:	d001      	beq.n	8018bf2 <uxr_serialize_CREATE_Payload+0x6e>
 8018bee:	2b02      	cmp	r3, #2
 8018bf0:	d1ea      	bne.n	8018bc8 <uxr_serialize_CREATE_Payload+0x44>
 8018bf2:	68f1      	ldr	r1, [r6, #12]
 8018bf4:	4638      	mov	r0, r7
 8018bf6:	f001 f99b 	bl	8019f30 <ucdr_serialize_string>
 8018bfa:	4004      	ands	r4, r0
 8018bfc:	e7e4      	b.n	8018bc8 <uxr_serialize_CREATE_Payload+0x44>
 8018bfe:	7a31      	ldrb	r1, [r6, #8]
 8018c00:	4638      	mov	r0, r7
 8018c02:	f7f5 fcd7 	bl	800e5b4 <ucdr_serialize_uint8_t>
 8018c06:	4605      	mov	r5, r0
 8018c08:	b158      	cbz	r0, 8018c22 <uxr_serialize_CREATE_Payload+0x9e>
 8018c0a:	7a33      	ldrb	r3, [r6, #8]
 8018c0c:	2b02      	cmp	r3, #2
 8018c0e:	d034      	beq.n	8018c7a <uxr_serialize_CREATE_Payload+0xf6>
 8018c10:	2b03      	cmp	r3, #3
 8018c12:	d106      	bne.n	8018c22 <uxr_serialize_CREATE_Payload+0x9e>
 8018c14:	68f2      	ldr	r2, [r6, #12]
 8018c16:	f106 0110 	add.w	r1, r6, #16
 8018c1a:	4638      	mov	r0, r7
 8018c1c:	f7f6 ffd4 	bl	800fbc8 <ucdr_serialize_sequence_uint8_t>
 8018c20:	4605      	mov	r5, r0
 8018c22:	2202      	movs	r2, #2
 8018c24:	f506 7104 	add.w	r1, r6, #528	; 0x210
 8018c28:	4638      	mov	r0, r7
 8018c2a:	f7f5 fbc9 	bl	800e3c0 <ucdr_serialize_array_uint8_t>
 8018c2e:	4028      	ands	r0, r5
 8018c30:	4004      	ands	r4, r0
 8018c32:	e7c9      	b.n	8018bc8 <uxr_serialize_CREATE_Payload+0x44>
 8018c34:	f106 0108 	add.w	r1, r6, #8
 8018c38:	4638      	mov	r0, r7
 8018c3a:	f7ff fbcf 	bl	80183dc <uxr_serialize_CLIENT_Representation>
 8018c3e:	4004      	ands	r4, r0
 8018c40:	e7c2      	b.n	8018bc8 <uxr_serialize_CREATE_Payload+0x44>
 8018c42:	f106 0108 	add.w	r1, r6, #8
 8018c46:	4638      	mov	r0, r7
 8018c48:	f7ff fc84 	bl	8018554 <uxr_serialize_AGENT_Representation>
 8018c4c:	4004      	ands	r4, r0
 8018c4e:	e7bb      	b.n	8018bc8 <uxr_serialize_CREATE_Payload+0x44>
 8018c50:	7a31      	ldrb	r1, [r6, #8]
 8018c52:	4638      	mov	r0, r7
 8018c54:	f7f5 fcae 	bl	800e5b4 <ucdr_serialize_uint8_t>
 8018c58:	4605      	mov	r5, r0
 8018c5a:	b130      	cbz	r0, 8018c6a <uxr_serialize_CREATE_Payload+0xe6>
 8018c5c:	7a33      	ldrb	r3, [r6, #8]
 8018c5e:	2b02      	cmp	r3, #2
 8018c60:	d011      	beq.n	8018c86 <uxr_serialize_CREATE_Payload+0x102>
 8018c62:	2b03      	cmp	r3, #3
 8018c64:	d015      	beq.n	8018c92 <uxr_serialize_CREATE_Payload+0x10e>
 8018c66:	2b01      	cmp	r3, #1
 8018c68:	d00d      	beq.n	8018c86 <uxr_serialize_CREATE_Payload+0x102>
 8018c6a:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	; 0x210
 8018c6e:	4638      	mov	r0, r7
 8018c70:	f7f6 f9dc 	bl	800f02c <ucdr_serialize_int16_t>
 8018c74:	4028      	ands	r0, r5
 8018c76:	4004      	ands	r4, r0
 8018c78:	e7a6      	b.n	8018bc8 <uxr_serialize_CREATE_Payload+0x44>
 8018c7a:	68f1      	ldr	r1, [r6, #12]
 8018c7c:	4638      	mov	r0, r7
 8018c7e:	f001 f957 	bl	8019f30 <ucdr_serialize_string>
 8018c82:	4605      	mov	r5, r0
 8018c84:	e7cd      	b.n	8018c22 <uxr_serialize_CREATE_Payload+0x9e>
 8018c86:	68f1      	ldr	r1, [r6, #12]
 8018c88:	4638      	mov	r0, r7
 8018c8a:	f001 f951 	bl	8019f30 <ucdr_serialize_string>
 8018c8e:	4605      	mov	r5, r0
 8018c90:	e7eb      	b.n	8018c6a <uxr_serialize_CREATE_Payload+0xe6>
 8018c92:	68f2      	ldr	r2, [r6, #12]
 8018c94:	f106 0110 	add.w	r1, r6, #16
 8018c98:	4638      	mov	r0, r7
 8018c9a:	f7f6 ff95 	bl	800fbc8 <ucdr_serialize_sequence_uint8_t>
 8018c9e:	4605      	mov	r5, r0
 8018ca0:	e7e3      	b.n	8018c6a <uxr_serialize_CREATE_Payload+0xe6>
 8018ca2:	bf00      	nop

08018ca4 <uxr_deserialize_GET_INFO_Payload>:
 8018ca4:	b570      	push	{r4, r5, r6, lr}
 8018ca6:	2202      	movs	r2, #2
 8018ca8:	4605      	mov	r5, r0
 8018caa:	460e      	mov	r6, r1
 8018cac:	f7f5 fbec 	bl	800e488 <ucdr_deserialize_array_uint8_t>
 8018cb0:	2202      	movs	r2, #2
 8018cb2:	4604      	mov	r4, r0
 8018cb4:	4628      	mov	r0, r5
 8018cb6:	18b1      	adds	r1, r6, r2
 8018cb8:	f7f5 fbe6 	bl	800e488 <ucdr_deserialize_array_uint8_t>
 8018cbc:	4603      	mov	r3, r0
 8018cbe:	1d31      	adds	r1, r6, #4
 8018cc0:	4628      	mov	r0, r5
 8018cc2:	401c      	ands	r4, r3
 8018cc4:	f7f5 ffbc 	bl	800ec40 <ucdr_deserialize_uint32_t>
 8018cc8:	b2e4      	uxtb	r4, r4
 8018cca:	4020      	ands	r0, r4
 8018ccc:	bd70      	pop	{r4, r5, r6, pc}
 8018cce:	bf00      	nop

08018cd0 <uxr_serialize_DELETE_Payload>:
 8018cd0:	b570      	push	{r4, r5, r6, lr}
 8018cd2:	2202      	movs	r2, #2
 8018cd4:	4605      	mov	r5, r0
 8018cd6:	460e      	mov	r6, r1
 8018cd8:	f7f5 fb72 	bl	800e3c0 <ucdr_serialize_array_uint8_t>
 8018cdc:	2202      	movs	r2, #2
 8018cde:	4604      	mov	r4, r0
 8018ce0:	4628      	mov	r0, r5
 8018ce2:	18b1      	adds	r1, r6, r2
 8018ce4:	f7f5 fb6c 	bl	800e3c0 <ucdr_serialize_array_uint8_t>
 8018ce8:	4020      	ands	r0, r4
 8018cea:	b2c0      	uxtb	r0, r0
 8018cec:	bd70      	pop	{r4, r5, r6, pc}
 8018cee:	bf00      	nop

08018cf0 <uxr_deserialize_STATUS_AGENT_Payload>:
 8018cf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018cf4:	460e      	mov	r6, r1
 8018cf6:	4605      	mov	r5, r0
 8018cf8:	f7f5 fc72 	bl	800e5e0 <ucdr_deserialize_uint8_t>
 8018cfc:	4604      	mov	r4, r0
 8018cfe:	1c71      	adds	r1, r6, #1
 8018d00:	4628      	mov	r0, r5
 8018d02:	f7f5 fc6d 	bl	800e5e0 <ucdr_deserialize_uint8_t>
 8018d06:	2204      	movs	r2, #4
 8018d08:	4681      	mov	r9, r0
 8018d0a:	4628      	mov	r0, r5
 8018d0c:	18b1      	adds	r1, r6, r2
 8018d0e:	f7f5 fbbb 	bl	800e488 <ucdr_deserialize_array_uint8_t>
 8018d12:	f106 0108 	add.w	r1, r6, #8
 8018d16:	4680      	mov	r8, r0
 8018d18:	2202      	movs	r2, #2
 8018d1a:	4628      	mov	r0, r5
 8018d1c:	f7f5 fbb4 	bl	800e488 <ucdr_deserialize_array_uint8_t>
 8018d20:	ea04 0309 	and.w	r3, r4, r9
 8018d24:	4607      	mov	r7, r0
 8018d26:	2202      	movs	r2, #2
 8018d28:	b2db      	uxtb	r3, r3
 8018d2a:	f106 010a 	add.w	r1, r6, #10
 8018d2e:	4628      	mov	r0, r5
 8018d30:	ea03 0408 	and.w	r4, r3, r8
 8018d34:	f7f5 fba8 	bl	800e488 <ucdr_deserialize_array_uint8_t>
 8018d38:	4603      	mov	r3, r0
 8018d3a:	4628      	mov	r0, r5
 8018d3c:	403c      	ands	r4, r7
 8018d3e:	f106 010c 	add.w	r1, r6, #12
 8018d42:	461d      	mov	r5, r3
 8018d44:	f7f5 fc1e 	bl	800e584 <ucdr_deserialize_bool>
 8018d48:	4025      	ands	r5, r4
 8018d4a:	4028      	ands	r0, r5
 8018d4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08018d50 <uxr_deserialize_STATUS_Payload>:
 8018d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018d54:	2202      	movs	r2, #2
 8018d56:	4606      	mov	r6, r0
 8018d58:	460f      	mov	r7, r1
 8018d5a:	f7f5 fb95 	bl	800e488 <ucdr_deserialize_array_uint8_t>
 8018d5e:	2202      	movs	r2, #2
 8018d60:	4605      	mov	r5, r0
 8018d62:	4630      	mov	r0, r6
 8018d64:	18b9      	adds	r1, r7, r2
 8018d66:	f7f5 fb8f 	bl	800e488 <ucdr_deserialize_array_uint8_t>
 8018d6a:	4680      	mov	r8, r0
 8018d6c:	1d39      	adds	r1, r7, #4
 8018d6e:	4630      	mov	r0, r6
 8018d70:	f7f5 fc36 	bl	800e5e0 <ucdr_deserialize_uint8_t>
 8018d74:	ea05 0508 	and.w	r5, r5, r8
 8018d78:	4604      	mov	r4, r0
 8018d7a:	1d79      	adds	r1, r7, #5
 8018d7c:	4630      	mov	r0, r6
 8018d7e:	402c      	ands	r4, r5
 8018d80:	f7f5 fc2e 	bl	800e5e0 <ucdr_deserialize_uint8_t>
 8018d84:	4020      	ands	r0, r4
 8018d86:	b2c0      	uxtb	r0, r0
 8018d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018d8c <uxr_serialize_INFO_Payload>:
 8018d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018d90:	2202      	movs	r2, #2
 8018d92:	460c      	mov	r4, r1
 8018d94:	4605      	mov	r5, r0
 8018d96:	f7f5 fb13 	bl	800e3c0 <ucdr_serialize_array_uint8_t>
 8018d9a:	2202      	movs	r2, #2
 8018d9c:	4680      	mov	r8, r0
 8018d9e:	4628      	mov	r0, r5
 8018da0:	18a1      	adds	r1, r4, r2
 8018da2:	f7f5 fb0d 	bl	800e3c0 <ucdr_serialize_array_uint8_t>
 8018da6:	4607      	mov	r7, r0
 8018da8:	7921      	ldrb	r1, [r4, #4]
 8018daa:	4628      	mov	r0, r5
 8018dac:	f7f5 fc02 	bl	800e5b4 <ucdr_serialize_uint8_t>
 8018db0:	ea08 0807 	and.w	r8, r8, r7
 8018db4:	4606      	mov	r6, r0
 8018db6:	7961      	ldrb	r1, [r4, #5]
 8018db8:	4628      	mov	r0, r5
 8018dba:	ea06 0608 	and.w	r6, r6, r8
 8018dbe:	f7f5 fbf9 	bl	800e5b4 <ucdr_serialize_uint8_t>
 8018dc2:	7a21      	ldrb	r1, [r4, #8]
 8018dc4:	4030      	ands	r0, r6
 8018dc6:	b2c7      	uxtb	r7, r0
 8018dc8:	4628      	mov	r0, r5
 8018dca:	f7f5 fbc5 	bl	800e558 <ucdr_serialize_bool>
 8018dce:	7a23      	ldrb	r3, [r4, #8]
 8018dd0:	4606      	mov	r6, r0
 8018dd2:	b96b      	cbnz	r3, 8018df0 <uxr_serialize_INFO_Payload+0x64>
 8018dd4:	f894 121c 	ldrb.w	r1, [r4, #540]	; 0x21c
 8018dd8:	4628      	mov	r0, r5
 8018dda:	f7f5 fbbd 	bl	800e558 <ucdr_serialize_bool>
 8018dde:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
 8018de2:	4030      	ands	r0, r6
 8018de4:	b2c6      	uxtb	r6, r0
 8018de6:	b983      	cbnz	r3, 8018e0a <uxr_serialize_INFO_Payload+0x7e>
 8018de8:	ea06 0007 	and.w	r0, r6, r7
 8018dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018df0:	7b21      	ldrb	r1, [r4, #12]
 8018df2:	4628      	mov	r0, r5
 8018df4:	f7f5 fbde 	bl	800e5b4 <ucdr_serialize_uint8_t>
 8018df8:	b188      	cbz	r0, 8018e1e <uxr_serialize_INFO_Payload+0x92>
 8018dfa:	f104 010c 	add.w	r1, r4, #12
 8018dfe:	4628      	mov	r0, r5
 8018e00:	f7ff fc1a 	bl	8018638 <uxr_serialize_ObjectVariant.part.0>
 8018e04:	4030      	ands	r0, r6
 8018e06:	b2c6      	uxtb	r6, r0
 8018e08:	e7e4      	b.n	8018dd4 <uxr_serialize_INFO_Payload+0x48>
 8018e0a:	f504 7108 	add.w	r1, r4, #544	; 0x220
 8018e0e:	4628      	mov	r0, r5
 8018e10:	f7ff fdb8 	bl	8018984 <uxr_serialize_ActivityInfoVariant>
 8018e14:	4006      	ands	r6, r0
 8018e16:	ea06 0007 	and.w	r0, r6, r7
 8018e1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018e1e:	4606      	mov	r6, r0
 8018e20:	e7d8      	b.n	8018dd4 <uxr_serialize_INFO_Payload+0x48>
 8018e22:	bf00      	nop

08018e24 <uxr_serialize_READ_DATA_Payload>:
 8018e24:	b570      	push	{r4, r5, r6, lr}
 8018e26:	2202      	movs	r2, #2
 8018e28:	4605      	mov	r5, r0
 8018e2a:	460e      	mov	r6, r1
 8018e2c:	f7f5 fac8 	bl	800e3c0 <ucdr_serialize_array_uint8_t>
 8018e30:	2202      	movs	r2, #2
 8018e32:	4604      	mov	r4, r0
 8018e34:	4628      	mov	r0, r5
 8018e36:	18b1      	adds	r1, r6, r2
 8018e38:	f7f5 fac2 	bl	800e3c0 <ucdr_serialize_array_uint8_t>
 8018e3c:	4603      	mov	r3, r0
 8018e3e:	1d31      	adds	r1, r6, #4
 8018e40:	4628      	mov	r0, r5
 8018e42:	401c      	ands	r4, r3
 8018e44:	f7ff fe5e 	bl	8018b04 <uxr_serialize_ReadSpecification>
 8018e48:	b2e4      	uxtb	r4, r4
 8018e4a:	4020      	ands	r0, r4
 8018e4c:	bd70      	pop	{r4, r5, r6, pc}
 8018e4e:	bf00      	nop

08018e50 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8018e50:	b570      	push	{r4, r5, r6, lr}
 8018e52:	2202      	movs	r2, #2
 8018e54:	4605      	mov	r5, r0
 8018e56:	460e      	mov	r6, r1
 8018e58:	f7f5 fab2 	bl	800e3c0 <ucdr_serialize_array_uint8_t>
 8018e5c:	2202      	movs	r2, #2
 8018e5e:	4604      	mov	r4, r0
 8018e60:	4628      	mov	r0, r5
 8018e62:	18b1      	adds	r1, r6, r2
 8018e64:	f7f5 faac 	bl	800e3c0 <ucdr_serialize_array_uint8_t>
 8018e68:	4020      	ands	r0, r4
 8018e6a:	b2c0      	uxtb	r0, r0
 8018e6c:	bd70      	pop	{r4, r5, r6, pc}
 8018e6e:	bf00      	nop

08018e70 <uxr_serialize_ACKNACK_Payload>:
 8018e70:	b570      	push	{r4, r5, r6, lr}
 8018e72:	460c      	mov	r4, r1
 8018e74:	4605      	mov	r5, r0
 8018e76:	460e      	mov	r6, r1
 8018e78:	f834 1b02 	ldrh.w	r1, [r4], #2
 8018e7c:	f7f5 fbc6 	bl	800e60c <ucdr_serialize_uint16_t>
 8018e80:	2202      	movs	r2, #2
 8018e82:	4621      	mov	r1, r4
 8018e84:	4604      	mov	r4, r0
 8018e86:	4628      	mov	r0, r5
 8018e88:	f7f5 fa9a 	bl	800e3c0 <ucdr_serialize_array_uint8_t>
 8018e8c:	4603      	mov	r3, r0
 8018e8e:	7931      	ldrb	r1, [r6, #4]
 8018e90:	4628      	mov	r0, r5
 8018e92:	401c      	ands	r4, r3
 8018e94:	f7f5 fb8e 	bl	800e5b4 <ucdr_serialize_uint8_t>
 8018e98:	b2e4      	uxtb	r4, r4
 8018e9a:	4020      	ands	r0, r4
 8018e9c:	bd70      	pop	{r4, r5, r6, pc}
 8018e9e:	bf00      	nop

08018ea0 <uxr_deserialize_ACKNACK_Payload>:
 8018ea0:	b570      	push	{r4, r5, r6, lr}
 8018ea2:	460e      	mov	r6, r1
 8018ea4:	4605      	mov	r5, r0
 8018ea6:	f7f5 fcb1 	bl	800e80c <ucdr_deserialize_uint16_t>
 8018eaa:	2202      	movs	r2, #2
 8018eac:	4604      	mov	r4, r0
 8018eae:	4628      	mov	r0, r5
 8018eb0:	18b1      	adds	r1, r6, r2
 8018eb2:	f7f5 fae9 	bl	800e488 <ucdr_deserialize_array_uint8_t>
 8018eb6:	4603      	mov	r3, r0
 8018eb8:	1d31      	adds	r1, r6, #4
 8018eba:	4628      	mov	r0, r5
 8018ebc:	401c      	ands	r4, r3
 8018ebe:	f7f5 fb8f 	bl	800e5e0 <ucdr_deserialize_uint8_t>
 8018ec2:	b2e4      	uxtb	r4, r4
 8018ec4:	4020      	ands	r0, r4
 8018ec6:	bd70      	pop	{r4, r5, r6, pc}

08018ec8 <uxr_serialize_HEARTBEAT_Payload>:
 8018ec8:	b570      	push	{r4, r5, r6, lr}
 8018eca:	460d      	mov	r5, r1
 8018ecc:	4606      	mov	r6, r0
 8018ece:	8809      	ldrh	r1, [r1, #0]
 8018ed0:	f7f5 fb9c 	bl	800e60c <ucdr_serialize_uint16_t>
 8018ed4:	8869      	ldrh	r1, [r5, #2]
 8018ed6:	4604      	mov	r4, r0
 8018ed8:	4630      	mov	r0, r6
 8018eda:	f7f5 fb97 	bl	800e60c <ucdr_serialize_uint16_t>
 8018ede:	4603      	mov	r3, r0
 8018ee0:	7929      	ldrb	r1, [r5, #4]
 8018ee2:	4630      	mov	r0, r6
 8018ee4:	401c      	ands	r4, r3
 8018ee6:	f7f5 fb65 	bl	800e5b4 <ucdr_serialize_uint8_t>
 8018eea:	b2e4      	uxtb	r4, r4
 8018eec:	4020      	ands	r0, r4
 8018eee:	bd70      	pop	{r4, r5, r6, pc}

08018ef0 <uxr_deserialize_HEARTBEAT_Payload>:
 8018ef0:	b570      	push	{r4, r5, r6, lr}
 8018ef2:	460e      	mov	r6, r1
 8018ef4:	4605      	mov	r5, r0
 8018ef6:	f7f5 fc89 	bl	800e80c <ucdr_deserialize_uint16_t>
 8018efa:	4604      	mov	r4, r0
 8018efc:	1cb1      	adds	r1, r6, #2
 8018efe:	4628      	mov	r0, r5
 8018f00:	f7f5 fc84 	bl	800e80c <ucdr_deserialize_uint16_t>
 8018f04:	4603      	mov	r3, r0
 8018f06:	1d31      	adds	r1, r6, #4
 8018f08:	4628      	mov	r0, r5
 8018f0a:	401c      	ands	r4, r3
 8018f0c:	f7f5 fb68 	bl	800e5e0 <ucdr_deserialize_uint8_t>
 8018f10:	b2e4      	uxtb	r4, r4
 8018f12:	4020      	ands	r0, r4
 8018f14:	bd70      	pop	{r4, r5, r6, pc}
 8018f16:	bf00      	nop

08018f18 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8018f18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018f1c:	460e      	mov	r6, r1
 8018f1e:	4605      	mov	r5, r0
 8018f20:	f7f6 fa10 	bl	800f344 <ucdr_deserialize_int32_t>
 8018f24:	4607      	mov	r7, r0
 8018f26:	1d31      	adds	r1, r6, #4
 8018f28:	4628      	mov	r0, r5
 8018f2a:	f7f5 fe89 	bl	800ec40 <ucdr_deserialize_uint32_t>
 8018f2e:	4680      	mov	r8, r0
 8018f30:	f106 0108 	add.w	r1, r6, #8
 8018f34:	4628      	mov	r0, r5
 8018f36:	f7f6 fa05 	bl	800f344 <ucdr_deserialize_int32_t>
 8018f3a:	ea07 0708 	and.w	r7, r7, r8
 8018f3e:	4604      	mov	r4, r0
 8018f40:	f106 010c 	add.w	r1, r6, #12
 8018f44:	4628      	mov	r0, r5
 8018f46:	403c      	ands	r4, r7
 8018f48:	f7f5 fe7a 	bl	800ec40 <ucdr_deserialize_uint32_t>
 8018f4c:	f106 0110 	add.w	r1, r6, #16
 8018f50:	4004      	ands	r4, r0
 8018f52:	4628      	mov	r0, r5
 8018f54:	f7f6 f9f6 	bl	800f344 <ucdr_deserialize_int32_t>
 8018f58:	4603      	mov	r3, r0
 8018f5a:	b2e4      	uxtb	r4, r4
 8018f5c:	4628      	mov	r0, r5
 8018f5e:	461d      	mov	r5, r3
 8018f60:	f106 0114 	add.w	r1, r6, #20
 8018f64:	f7f5 fe6c 	bl	800ec40 <ucdr_deserialize_uint32_t>
 8018f68:	402c      	ands	r4, r5
 8018f6a:	4020      	ands	r0, r4
 8018f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018f70 <uxr_serialize_SampleIdentity>:
 8018f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018f74:	4604      	mov	r4, r0
 8018f76:	460d      	mov	r5, r1
 8018f78:	220c      	movs	r2, #12
 8018f7a:	f7f5 fa21 	bl	800e3c0 <ucdr_serialize_array_uint8_t>
 8018f7e:	2203      	movs	r2, #3
 8018f80:	f105 010c 	add.w	r1, r5, #12
 8018f84:	4607      	mov	r7, r0
 8018f86:	4620      	mov	r0, r4
 8018f88:	f7f5 fa1a 	bl	800e3c0 <ucdr_serialize_array_uint8_t>
 8018f8c:	7be9      	ldrb	r1, [r5, #15]
 8018f8e:	4680      	mov	r8, r0
 8018f90:	4620      	mov	r0, r4
 8018f92:	f7f5 fb0f 	bl	800e5b4 <ucdr_serialize_uint8_t>
 8018f96:	6929      	ldr	r1, [r5, #16]
 8018f98:	4606      	mov	r6, r0
 8018f9a:	4620      	mov	r0, r4
 8018f9c:	f7f6 f93a 	bl	800f214 <ucdr_serialize_int32_t>
 8018fa0:	ea07 0708 	and.w	r7, r7, r8
 8018fa4:	4603      	mov	r3, r0
 8018fa6:	4620      	mov	r0, r4
 8018fa8:	403e      	ands	r6, r7
 8018faa:	6969      	ldr	r1, [r5, #20]
 8018fac:	461c      	mov	r4, r3
 8018fae:	f7f5 fd17 	bl	800e9e0 <ucdr_serialize_uint32_t>
 8018fb2:	4034      	ands	r4, r6
 8018fb4:	4020      	ands	r0, r4
 8018fb6:	b2c0      	uxtb	r0, r0
 8018fb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018fbc <uxr_deserialize_SampleIdentity>:
 8018fbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018fc0:	4604      	mov	r4, r0
 8018fc2:	460d      	mov	r5, r1
 8018fc4:	220c      	movs	r2, #12
 8018fc6:	f7f5 fa5f 	bl	800e488 <ucdr_deserialize_array_uint8_t>
 8018fca:	2203      	movs	r2, #3
 8018fcc:	f105 010c 	add.w	r1, r5, #12
 8018fd0:	4607      	mov	r7, r0
 8018fd2:	4620      	mov	r0, r4
 8018fd4:	f7f5 fa58 	bl	800e488 <ucdr_deserialize_array_uint8_t>
 8018fd8:	f105 010f 	add.w	r1, r5, #15
 8018fdc:	4680      	mov	r8, r0
 8018fde:	4620      	mov	r0, r4
 8018fe0:	f7f5 fafe 	bl	800e5e0 <ucdr_deserialize_uint8_t>
 8018fe4:	f105 0110 	add.w	r1, r5, #16
 8018fe8:	4606      	mov	r6, r0
 8018fea:	4620      	mov	r0, r4
 8018fec:	f7f6 f9aa 	bl	800f344 <ucdr_deserialize_int32_t>
 8018ff0:	ea07 0708 	and.w	r7, r7, r8
 8018ff4:	4603      	mov	r3, r0
 8018ff6:	4620      	mov	r0, r4
 8018ff8:	403e      	ands	r6, r7
 8018ffa:	f105 0114 	add.w	r1, r5, #20
 8018ffe:	461c      	mov	r4, r3
 8019000:	f7f5 fe1e 	bl	800ec40 <ucdr_deserialize_uint32_t>
 8019004:	4034      	ands	r4, r6
 8019006:	4020      	ands	r0, r4
 8019008:	b2c0      	uxtb	r0, r0
 801900a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801900e:	bf00      	nop

08019010 <rcl_get_automatic_discovery_range>:
 8019010:	b530      	push	{r4, r5, lr}
 8019012:	2300      	movs	r3, #0
 8019014:	b083      	sub	sp, #12
 8019016:	9301      	str	r3, [sp, #4]
 8019018:	b1c0      	cbz	r0, 801904c <rcl_get_automatic_discovery_range+0x3c>
 801901a:	4604      	mov	r4, r0
 801901c:	a901      	add	r1, sp, #4
 801901e:	4818      	ldr	r0, [pc, #96]	; (8019080 <rcl_get_automatic_discovery_range+0x70>)
 8019020:	f7fa fcda 	bl	80139d8 <rcutils_get_env>
 8019024:	b110      	cbz	r0, 801902c <rcl_get_automatic_discovery_range+0x1c>
 8019026:	2001      	movs	r0, #1
 8019028:	b003      	add	sp, #12
 801902a:	bd30      	pop	{r4, r5, pc}
 801902c:	9d01      	ldr	r5, [sp, #4]
 801902e:	782b      	ldrb	r3, [r5, #0]
 8019030:	b13b      	cbz	r3, 8019042 <rcl_get_automatic_discovery_range+0x32>
 8019032:	4914      	ldr	r1, [pc, #80]	; (8019084 <rcl_get_automatic_discovery_range+0x74>)
 8019034:	4628      	mov	r0, r5
 8019036:	f7e7 f903 	bl	8000240 <strcmp>
 801903a:	b950      	cbnz	r0, 8019052 <rcl_get_automatic_discovery_range+0x42>
 801903c:	2301      	movs	r3, #1
 801903e:	7023      	strb	r3, [r4, #0]
 8019040:	e7f2      	b.n	8019028 <rcl_get_automatic_discovery_range+0x18>
 8019042:	2303      	movs	r3, #3
 8019044:	2000      	movs	r0, #0
 8019046:	7023      	strb	r3, [r4, #0]
 8019048:	b003      	add	sp, #12
 801904a:	bd30      	pop	{r4, r5, pc}
 801904c:	200b      	movs	r0, #11
 801904e:	b003      	add	sp, #12
 8019050:	bd30      	pop	{r4, r5, pc}
 8019052:	490d      	ldr	r1, [pc, #52]	; (8019088 <rcl_get_automatic_discovery_range+0x78>)
 8019054:	4628      	mov	r0, r5
 8019056:	f7e7 f8f3 	bl	8000240 <strcmp>
 801905a:	b168      	cbz	r0, 8019078 <rcl_get_automatic_discovery_range+0x68>
 801905c:	490b      	ldr	r1, [pc, #44]	; (801908c <rcl_get_automatic_discovery_range+0x7c>)
 801905e:	4628      	mov	r0, r5
 8019060:	f7e7 f8ee 	bl	8000240 <strcmp>
 8019064:	2800      	cmp	r0, #0
 8019066:	d0ec      	beq.n	8019042 <rcl_get_automatic_discovery_range+0x32>
 8019068:	4909      	ldr	r1, [pc, #36]	; (8019090 <rcl_get_automatic_discovery_range+0x80>)
 801906a:	4628      	mov	r0, r5
 801906c:	f7e7 f8e8 	bl	8000240 <strcmp>
 8019070:	b910      	cbnz	r0, 8019078 <rcl_get_automatic_discovery_range+0x68>
 8019072:	2304      	movs	r3, #4
 8019074:	7023      	strb	r3, [r4, #0]
 8019076:	e7d7      	b.n	8019028 <rcl_get_automatic_discovery_range+0x18>
 8019078:	2302      	movs	r3, #2
 801907a:	2000      	movs	r0, #0
 801907c:	7023      	strb	r3, [r4, #0]
 801907e:	e7d3      	b.n	8019028 <rcl_get_automatic_discovery_range+0x18>
 8019080:	0801dae0 	.word	0x0801dae0
 8019084:	0801db00 	.word	0x0801db00
 8019088:	0801db04 	.word	0x0801db04
 801908c:	0801db10 	.word	0x0801db10
 8019090:	0801db18 	.word	0x0801db18

08019094 <rcl_automatic_discovery_range_to_string>:
 8019094:	2804      	cmp	r0, #4
 8019096:	d803      	bhi.n	80190a0 <rcl_automatic_discovery_range_to_string+0xc>
 8019098:	4b02      	ldr	r3, [pc, #8]	; (80190a4 <rcl_automatic_discovery_range_to_string+0x10>)
 801909a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801909e:	4770      	bx	lr
 80190a0:	2000      	movs	r0, #0
 80190a2:	4770      	bx	lr
 80190a4:	0801dc08 	.word	0x0801dc08

080190a8 <rcl_get_discovery_static_peers>:
 80190a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80190ac:	2300      	movs	r3, #0
 80190ae:	b08e      	sub	sp, #56	; 0x38
 80190b0:	9306      	str	r3, [sp, #24]
 80190b2:	2900      	cmp	r1, #0
 80190b4:	d04b      	beq.n	801914e <rcl_get_discovery_static_peers+0xa6>
 80190b6:	4605      	mov	r5, r0
 80190b8:	2800      	cmp	r0, #0
 80190ba:	d048      	beq.n	801914e <rcl_get_discovery_static_peers+0xa6>
 80190bc:	460c      	mov	r4, r1
 80190be:	482c      	ldr	r0, [pc, #176]	; (8019170 <rcl_get_discovery_static_peers+0xc8>)
 80190c0:	a906      	add	r1, sp, #24
 80190c2:	f7fa fc89 	bl	80139d8 <rcutils_get_env>
 80190c6:	b118      	cbz	r0, 80190d0 <rcl_get_discovery_static_peers+0x28>
 80190c8:	2001      	movs	r0, #1
 80190ca:	b00e      	add	sp, #56	; 0x38
 80190cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80190d0:	9b06      	ldr	r3, [sp, #24]
 80190d2:	2b00      	cmp	r3, #0
 80190d4:	d0f8      	beq.n	80190c8 <rcl_get_discovery_static_peers+0x20>
 80190d6:	af07      	add	r7, sp, #28
 80190d8:	4638      	mov	r0, r7
 80190da:	f000 fc5b 	bl	8019994 <rcutils_get_zero_initialized_string_array>
 80190de:	f104 0308 	add.w	r3, r4, #8
 80190e2:	9703      	str	r7, [sp, #12]
 80190e4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80190e8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80190ec:	213b      	movs	r1, #59	; 0x3b
 80190ee:	9806      	ldr	r0, [sp, #24]
 80190f0:	e894 000c 	ldmia.w	r4, {r2, r3}
 80190f4:	f000 fb90 	bl	8019818 <rcutils_split>
 80190f8:	2800      	cmp	r0, #0
 80190fa:	d1e5      	bne.n	80190c8 <rcl_get_discovery_static_peers+0x20>
 80190fc:	4622      	mov	r2, r4
 80190fe:	9907      	ldr	r1, [sp, #28]
 8019100:	4628      	mov	r0, r5
 8019102:	f000 fc97 	bl	8019a34 <rmw_discovery_options_init>
 8019106:	4604      	mov	r4, r0
 8019108:	bb78      	cbnz	r0, 801916a <rcl_get_discovery_static_peers+0xc2>
 801910a:	9e07      	ldr	r6, [sp, #28]
 801910c:	b336      	cbz	r6, 801915c <rcl_get_discovery_static_peers+0xb4>
 801910e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8019112:	4680      	mov	r8, r0
 8019114:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
 8019118:	ea4f 2904 	mov.w	r9, r4, lsl #8
 801911c:	4608      	mov	r0, r1
 801911e:	9105      	str	r1, [sp, #20]
 8019120:	f7e7 f8ee 	bl	8000300 <strlen>
 8019124:	28ff      	cmp	r0, #255	; 0xff
 8019126:	9905      	ldr	r1, [sp, #20]
 8019128:	d815      	bhi.n	8019156 <rcl_get_discovery_static_peers+0xae>
 801912a:	6868      	ldr	r0, [r5, #4]
 801912c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8019130:	eb00 2004 	add.w	r0, r0, r4, lsl #8
 8019134:	3401      	adds	r4, #1
 8019136:	f002 f94c 	bl	801b3d2 <strncpy>
 801913a:	686b      	ldr	r3, [r5, #4]
 801913c:	9e07      	ldr	r6, [sp, #28]
 801913e:	444b      	add	r3, r9
 8019140:	42b4      	cmp	r4, r6
 8019142:	f883 80ff 	strb.w	r8, [r3, #255]	; 0xff
 8019146:	d209      	bcs.n	801915c <rcl_get_discovery_static_peers+0xb4>
 8019148:	f8dd a020 	ldr.w	sl, [sp, #32]
 801914c:	e7e2      	b.n	8019114 <rcl_get_discovery_static_peers+0x6c>
 801914e:	200b      	movs	r0, #11
 8019150:	b00e      	add	sp, #56	; 0x38
 8019152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019156:	3401      	adds	r4, #1
 8019158:	42b4      	cmp	r4, r6
 801915a:	d3db      	bcc.n	8019114 <rcl_get_discovery_static_peers+0x6c>
 801915c:	4638      	mov	r0, r7
 801915e:	f000 fc37 	bl	80199d0 <rcutils_string_array_fini>
 8019162:	3800      	subs	r0, #0
 8019164:	bf18      	it	ne
 8019166:	2001      	movne	r0, #1
 8019168:	e7af      	b.n	80190ca <rcl_get_discovery_static_peers+0x22>
 801916a:	f7f7 fd53 	bl	8010c14 <rcl_convert_rmw_ret_to_rcl_ret>
 801916e:	e7ac      	b.n	80190ca <rcl_get_discovery_static_peers+0x22>
 8019170:	0801db28 	.word	0x0801db28

08019174 <rcl_get_default_domain_id>:
 8019174:	b530      	push	{r4, r5, lr}
 8019176:	2300      	movs	r3, #0
 8019178:	b083      	sub	sp, #12
 801917a:	9300      	str	r3, [sp, #0]
 801917c:	b1d0      	cbz	r0, 80191b4 <rcl_get_default_domain_id+0x40>
 801917e:	4604      	mov	r4, r0
 8019180:	4669      	mov	r1, sp
 8019182:	4815      	ldr	r0, [pc, #84]	; (80191d8 <rcl_get_default_domain_id+0x64>)
 8019184:	f7fa fc28 	bl	80139d8 <rcutils_get_env>
 8019188:	4602      	mov	r2, r0
 801918a:	b110      	cbz	r0, 8019192 <rcl_get_default_domain_id+0x1e>
 801918c:	2001      	movs	r0, #1
 801918e:	b003      	add	sp, #12
 8019190:	bd30      	pop	{r4, r5, pc}
 8019192:	9b00      	ldr	r3, [sp, #0]
 8019194:	b18b      	cbz	r3, 80191ba <rcl_get_default_domain_id+0x46>
 8019196:	7818      	ldrb	r0, [r3, #0]
 8019198:	2800      	cmp	r0, #0
 801919a:	d0f8      	beq.n	801918e <rcl_get_default_domain_id+0x1a>
 801919c:	a901      	add	r1, sp, #4
 801919e:	4618      	mov	r0, r3
 80191a0:	9201      	str	r2, [sp, #4]
 80191a2:	f001 ff49 	bl	801b038 <strtoul>
 80191a6:	4605      	mov	r5, r0
 80191a8:	b150      	cbz	r0, 80191c0 <rcl_get_default_domain_id+0x4c>
 80191aa:	1c43      	adds	r3, r0, #1
 80191ac:	d00d      	beq.n	80191ca <rcl_get_default_domain_id+0x56>
 80191ae:	2000      	movs	r0, #0
 80191b0:	6025      	str	r5, [r4, #0]
 80191b2:	e7ec      	b.n	801918e <rcl_get_default_domain_id+0x1a>
 80191b4:	200b      	movs	r0, #11
 80191b6:	b003      	add	sp, #12
 80191b8:	bd30      	pop	{r4, r5, pc}
 80191ba:	4618      	mov	r0, r3
 80191bc:	b003      	add	sp, #12
 80191be:	bd30      	pop	{r4, r5, pc}
 80191c0:	9b01      	ldr	r3, [sp, #4]
 80191c2:	781b      	ldrb	r3, [r3, #0]
 80191c4:	2b00      	cmp	r3, #0
 80191c6:	d0f2      	beq.n	80191ae <rcl_get_default_domain_id+0x3a>
 80191c8:	e7e0      	b.n	801918c <rcl_get_default_domain_id+0x18>
 80191ca:	f002 fa1b 	bl	801b604 <__errno>
 80191ce:	6803      	ldr	r3, [r0, #0]
 80191d0:	2b22      	cmp	r3, #34	; 0x22
 80191d2:	d1ec      	bne.n	80191ae <rcl_get_default_domain_id+0x3a>
 80191d4:	e7da      	b.n	801918c <rcl_get_default_domain_id+0x18>
 80191d6:	bf00      	nop
 80191d8:	0801dc1c 	.word	0x0801dc1c

080191dc <rcl_expand_topic_name>:
 80191dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80191e0:	b08d      	sub	sp, #52	; 0x34
 80191e2:	4698      	mov	r8, r3
 80191e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80191e6:	9207      	str	r2, [sp, #28]
 80191e8:	2b00      	cmp	r3, #0
 80191ea:	bf18      	it	ne
 80191ec:	f1b8 0f00 	cmpne.w	r8, #0
 80191f0:	bf0c      	ite	eq
 80191f2:	2301      	moveq	r3, #1
 80191f4:	2300      	movne	r3, #0
 80191f6:	2a00      	cmp	r2, #0
 80191f8:	bf08      	it	eq
 80191fa:	f043 0301 	orreq.w	r3, r3, #1
 80191fe:	2900      	cmp	r1, #0
 8019200:	bf08      	it	eq
 8019202:	f043 0301 	orreq.w	r3, r3, #1
 8019206:	2b00      	cmp	r3, #0
 8019208:	d13d      	bne.n	8019286 <rcl_expand_topic_name+0xaa>
 801920a:	fab0 f280 	clz	r2, r0
 801920e:	4604      	mov	r4, r0
 8019210:	0952      	lsrs	r2, r2, #5
 8019212:	2800      	cmp	r0, #0
 8019214:	d037      	beq.n	8019286 <rcl_expand_topic_name+0xaa>
 8019216:	460f      	mov	r7, r1
 8019218:	a90b      	add	r1, sp, #44	; 0x2c
 801921a:	f000 fa39 	bl	8019690 <rcl_validate_topic_name>
 801921e:	4605      	mov	r5, r0
 8019220:	bb68      	cbnz	r0, 801927e <rcl_expand_topic_name+0xa2>
 8019222:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019224:	2b00      	cmp	r3, #0
 8019226:	d137      	bne.n	8019298 <rcl_expand_topic_name+0xbc>
 8019228:	4602      	mov	r2, r0
 801922a:	a90b      	add	r1, sp, #44	; 0x2c
 801922c:	4638      	mov	r0, r7
 801922e:	f7fa ffa5 	bl	801417c <rmw_validate_node_name>
 8019232:	bb68      	cbnz	r0, 8019290 <rcl_expand_topic_name+0xb4>
 8019234:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019236:	2b00      	cmp	r3, #0
 8019238:	d133      	bne.n	80192a2 <rcl_expand_topic_name+0xc6>
 801923a:	462a      	mov	r2, r5
 801923c:	a90b      	add	r1, sp, #44	; 0x2c
 801923e:	9807      	ldr	r0, [sp, #28]
 8019240:	f7fa ff7e 	bl	8014140 <rmw_validate_namespace>
 8019244:	bb20      	cbnz	r0, 8019290 <rcl_expand_topic_name+0xb4>
 8019246:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8019248:	2d00      	cmp	r5, #0
 801924a:	f040 80a2 	bne.w	8019392 <rcl_expand_topic_name+0x1b6>
 801924e:	217b      	movs	r1, #123	; 0x7b
 8019250:	4620      	mov	r0, r4
 8019252:	f002 f89f 	bl	801b394 <strchr>
 8019256:	7823      	ldrb	r3, [r4, #0]
 8019258:	4681      	mov	r9, r0
 801925a:	bb20      	cbnz	r0, 80192a6 <rcl_expand_topic_name+0xca>
 801925c:	2b2f      	cmp	r3, #47	; 0x2f
 801925e:	d122      	bne.n	80192a6 <rcl_expand_topic_name+0xca>
 8019260:	ab19      	add	r3, sp, #100	; 0x64
 8019262:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019266:	ab16      	add	r3, sp, #88	; 0x58
 8019268:	e88d 0003 	stmia.w	sp, {r0, r1}
 801926c:	4620      	mov	r0, r4
 801926e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8019270:	f7fa fd14 	bl	8013c9c <rcutils_strdup>
 8019274:	2800      	cmp	r0, #0
 8019276:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8019278:	bf08      	it	eq
 801927a:	250a      	moveq	r5, #10
 801927c:	6018      	str	r0, [r3, #0]
 801927e:	4628      	mov	r0, r5
 8019280:	b00d      	add	sp, #52	; 0x34
 8019282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019286:	250b      	movs	r5, #11
 8019288:	4628      	mov	r0, r5
 801928a:	b00d      	add	sp, #52	; 0x34
 801928c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019290:	f7f7 fcc0 	bl	8010c14 <rcl_convert_rmw_ret_to_rcl_ret>
 8019294:	4605      	mov	r5, r0
 8019296:	e7f2      	b.n	801927e <rcl_expand_topic_name+0xa2>
 8019298:	2567      	movs	r5, #103	; 0x67
 801929a:	4628      	mov	r0, r5
 801929c:	b00d      	add	sp, #52	; 0x34
 801929e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80192a2:	25c9      	movs	r5, #201	; 0xc9
 80192a4:	e7eb      	b.n	801927e <rcl_expand_topic_name+0xa2>
 80192a6:	2b7e      	cmp	r3, #126	; 0x7e
 80192a8:	d075      	beq.n	8019396 <rcl_expand_topic_name+0x1ba>
 80192aa:	f1b9 0f00 	cmp.w	r9, #0
 80192ae:	f000 80c2 	beq.w	8019436 <rcl_expand_topic_name+0x25a>
 80192b2:	2300      	movs	r3, #0
 80192b4:	46a2      	mov	sl, r4
 80192b6:	461e      	mov	r6, r3
 80192b8:	9508      	str	r5, [sp, #32]
 80192ba:	4655      	mov	r5, sl
 80192bc:	9409      	str	r4, [sp, #36]	; 0x24
 80192be:	46b2      	mov	sl, r6
 80192c0:	464c      	mov	r4, r9
 80192c2:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80192c6:	2c00      	cmp	r4, #0
 80192c8:	f000 80ae 	beq.w	8019428 <rcl_expand_topic_name+0x24c>
 80192cc:	217d      	movs	r1, #125	; 0x7d
 80192ce:	4628      	mov	r0, r5
 80192d0:	f002 f860 	bl	801b394 <strchr>
 80192d4:	eba0 0904 	sub.w	r9, r0, r4
 80192d8:	4621      	mov	r1, r4
 80192da:	4869      	ldr	r0, [pc, #420]	; (8019480 <rcl_expand_topic_name+0x2a4>)
 80192dc:	f109 0601 	add.w	r6, r9, #1
 80192e0:	4632      	mov	r2, r6
 80192e2:	f002 f864 	bl	801b3ae <strncmp>
 80192e6:	2800      	cmp	r0, #0
 80192e8:	d051      	beq.n	801938e <rcl_expand_topic_name+0x1b2>
 80192ea:	4632      	mov	r2, r6
 80192ec:	4621      	mov	r1, r4
 80192ee:	4865      	ldr	r0, [pc, #404]	; (8019484 <rcl_expand_topic_name+0x2a8>)
 80192f0:	f002 f85d 	bl	801b3ae <strncmp>
 80192f4:	b128      	cbz	r0, 8019302 <rcl_expand_topic_name+0x126>
 80192f6:	4632      	mov	r2, r6
 80192f8:	4621      	mov	r1, r4
 80192fa:	4863      	ldr	r0, [pc, #396]	; (8019488 <rcl_expand_topic_name+0x2ac>)
 80192fc:	f002 f857 	bl	801b3ae <strncmp>
 8019300:	bb38      	cbnz	r0, 8019352 <rcl_expand_topic_name+0x176>
 8019302:	46d9      	mov	r9, fp
 8019304:	ab18      	add	r3, sp, #96	; 0x60
 8019306:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801930a:	ab16      	add	r3, sp, #88	; 0x58
 801930c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8019310:	4620      	mov	r0, r4
 8019312:	4631      	mov	r1, r6
 8019314:	cb0c      	ldmia	r3, {r2, r3}
 8019316:	f7fa fce7 	bl	8013ce8 <rcutils_strndup>
 801931a:	4604      	mov	r4, r0
 801931c:	2800      	cmp	r0, #0
 801931e:	f000 80a3 	beq.w	8019468 <rcl_expand_topic_name+0x28c>
 8019322:	464a      	mov	r2, r9
 8019324:	4628      	mov	r0, r5
 8019326:	ab16      	add	r3, sp, #88	; 0x58
 8019328:	4621      	mov	r1, r4
 801932a:	f7fa fbb7 	bl	8013a9c <rcutils_repl_str>
 801932e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8019330:	4605      	mov	r5, r0
 8019332:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8019334:	4620      	mov	r0, r4
 8019336:	4798      	blx	r3
 8019338:	4650      	mov	r0, sl
 801933a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801933c:	991a      	ldr	r1, [sp, #104]	; 0x68
 801933e:	4798      	blx	r3
 8019340:	2d00      	cmp	r5, #0
 8019342:	d06c      	beq.n	801941e <rcl_expand_topic_name+0x242>
 8019344:	217b      	movs	r1, #123	; 0x7b
 8019346:	4628      	mov	r0, r5
 8019348:	f002 f824 	bl	801b394 <strchr>
 801934c:	46aa      	mov	sl, r5
 801934e:	4604      	mov	r4, r0
 8019350:	e7b9      	b.n	80192c6 <rcl_expand_topic_name+0xea>
 8019352:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 8019356:	1c61      	adds	r1, r4, #1
 8019358:	4640      	mov	r0, r8
 801935a:	f7fa fdc1 	bl	8013ee0 <rcutils_string_map_getn>
 801935e:	4681      	mov	r9, r0
 8019360:	2800      	cmp	r0, #0
 8019362:	d1cf      	bne.n	8019304 <rcl_expand_topic_name+0x128>
 8019364:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8019366:	aa18      	add	r2, sp, #96	; 0x60
 8019368:	2569      	movs	r5, #105	; 0x69
 801936a:	6018      	str	r0, [r3, #0]
 801936c:	ab16      	add	r3, sp, #88	; 0x58
 801936e:	ca07      	ldmia	r2, {r0, r1, r2}
 8019370:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8019374:	4631      	mov	r1, r6
 8019376:	4620      	mov	r0, r4
 8019378:	cb0c      	ldmia	r3, {r2, r3}
 801937a:	f7fa fcb5 	bl	8013ce8 <rcutils_strndup>
 801937e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8019380:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8019382:	4798      	blx	r3
 8019384:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8019386:	991a      	ldr	r1, [sp, #104]	; 0x68
 8019388:	4650      	mov	r0, sl
 801938a:	4798      	blx	r3
 801938c:	e777      	b.n	801927e <rcl_expand_topic_name+0xa2>
 801938e:	46b9      	mov	r9, r7
 8019390:	e7b8      	b.n	8019304 <rcl_expand_topic_name+0x128>
 8019392:	25ca      	movs	r5, #202	; 0xca
 8019394:	e773      	b.n	801927e <rcl_expand_topic_name+0xa2>
 8019396:	9e07      	ldr	r6, [sp, #28]
 8019398:	4630      	mov	r0, r6
 801939a:	f7e6 ffb1 	bl	8000300 <strlen>
 801939e:	4a3b      	ldr	r2, [pc, #236]	; (801948c <rcl_expand_topic_name+0x2b0>)
 80193a0:	4b3b      	ldr	r3, [pc, #236]	; (8019490 <rcl_expand_topic_name+0x2b4>)
 80193a2:	9603      	str	r6, [sp, #12]
 80193a4:	2801      	cmp	r0, #1
 80193a6:	bf18      	it	ne
 80193a8:	4613      	movne	r3, r2
 80193aa:	9704      	str	r7, [sp, #16]
 80193ac:	9302      	str	r3, [sp, #8]
 80193ae:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80193b0:	9300      	str	r3, [sp, #0]
 80193b2:	1c63      	adds	r3, r4, #1
 80193b4:	9305      	str	r3, [sp, #20]
 80193b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80193ba:	9301      	str	r3, [sp, #4]
 80193bc:	ab16      	add	r3, sp, #88	; 0x58
 80193be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80193c0:	f7fa fb32 	bl	8013a28 <rcutils_format_string_limit>
 80193c4:	4606      	mov	r6, r0
 80193c6:	b350      	cbz	r0, 801941e <rcl_expand_topic_name+0x242>
 80193c8:	f1b9 0f00 	cmp.w	r9, #0
 80193cc:	d005      	beq.n	80193da <rcl_expand_topic_name+0x1fe>
 80193ce:	217b      	movs	r1, #123	; 0x7b
 80193d0:	46b2      	mov	sl, r6
 80193d2:	f001 ffdf 	bl	801b394 <strchr>
 80193d6:	4681      	mov	r9, r0
 80193d8:	e76e      	b.n	80192b8 <rcl_expand_topic_name+0xdc>
 80193da:	7833      	ldrb	r3, [r6, #0]
 80193dc:	2b2f      	cmp	r3, #47	; 0x2f
 80193de:	d01b      	beq.n	8019418 <rcl_expand_topic_name+0x23c>
 80193e0:	9c07      	ldr	r4, [sp, #28]
 80193e2:	4620      	mov	r0, r4
 80193e4:	f7e6 ff8c 	bl	8000300 <strlen>
 80193e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80193ec:	4a29      	ldr	r2, [pc, #164]	; (8019494 <rcl_expand_topic_name+0x2b8>)
 80193ee:	9301      	str	r3, [sp, #4]
 80193f0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80193f2:	9604      	str	r6, [sp, #16]
 80193f4:	9300      	str	r3, [sp, #0]
 80193f6:	4b28      	ldr	r3, [pc, #160]	; (8019498 <rcl_expand_topic_name+0x2bc>)
 80193f8:	9403      	str	r4, [sp, #12]
 80193fa:	2801      	cmp	r0, #1
 80193fc:	bf18      	it	ne
 80193fe:	4613      	movne	r3, r2
 8019400:	9302      	str	r3, [sp, #8]
 8019402:	ab16      	add	r3, sp, #88	; 0x58
 8019404:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8019406:	f7fa fb0f 	bl	8013a28 <rcutils_format_string_limit>
 801940a:	4603      	mov	r3, r0
 801940c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801940e:	4630      	mov	r0, r6
 8019410:	991a      	ldr	r1, [sp, #104]	; 0x68
 8019412:	461e      	mov	r6, r3
 8019414:	4790      	blx	r2
 8019416:	b116      	cbz	r6, 801941e <rcl_expand_topic_name+0x242>
 8019418:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801941a:	601e      	str	r6, [r3, #0]
 801941c:	e72f      	b.n	801927e <rcl_expand_topic_name+0xa2>
 801941e:	2300      	movs	r3, #0
 8019420:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8019422:	250a      	movs	r5, #10
 8019424:	6013      	str	r3, [r2, #0]
 8019426:	e72a      	b.n	801927e <rcl_expand_topic_name+0xa2>
 8019428:	4653      	mov	r3, sl
 801942a:	4656      	mov	r6, sl
 801942c:	e9dd 5408 	ldrd	r5, r4, [sp, #32]
 8019430:	2b00      	cmp	r3, #0
 8019432:	d1d2      	bne.n	80193da <rcl_expand_topic_name+0x1fe>
 8019434:	7823      	ldrb	r3, [r4, #0]
 8019436:	2b2f      	cmp	r3, #47	; 0x2f
 8019438:	d01e      	beq.n	8019478 <rcl_expand_topic_name+0x29c>
 801943a:	9e07      	ldr	r6, [sp, #28]
 801943c:	4630      	mov	r0, r6
 801943e:	f7e6 ff5f 	bl	8000300 <strlen>
 8019442:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8019444:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8019448:	9603      	str	r6, [sp, #12]
 801944a:	9404      	str	r4, [sp, #16]
 801944c:	e9cd 2300 	strd	r2, r3, [sp]
 8019450:	4a10      	ldr	r2, [pc, #64]	; (8019494 <rcl_expand_topic_name+0x2b8>)
 8019452:	4b11      	ldr	r3, [pc, #68]	; (8019498 <rcl_expand_topic_name+0x2bc>)
 8019454:	2801      	cmp	r0, #1
 8019456:	bf18      	it	ne
 8019458:	4613      	movne	r3, r2
 801945a:	9302      	str	r3, [sp, #8]
 801945c:	ab16      	add	r3, sp, #88	; 0x58
 801945e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8019460:	f7fa fae2 	bl	8013a28 <rcutils_format_string_limit>
 8019464:	4606      	mov	r6, r0
 8019466:	e7d6      	b.n	8019416 <rcl_expand_topic_name+0x23a>
 8019468:	e9dd 121a 	ldrd	r1, r2, [sp, #104]	; 0x68
 801946c:	4650      	mov	r0, sl
 801946e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8019470:	6014      	str	r4, [r2, #0]
 8019472:	250a      	movs	r5, #10
 8019474:	4798      	blx	r3
 8019476:	e702      	b.n	801927e <rcl_expand_topic_name+0xa2>
 8019478:	2300      	movs	r3, #0
 801947a:	461e      	mov	r6, r3
 801947c:	e7cc      	b.n	8019418 <rcl_expand_topic_name+0x23c>
 801947e:	bf00      	nop
 8019480:	0801dc34 	.word	0x0801dc34
 8019484:	0801dc3c 	.word	0x0801dc3c
 8019488:	0801dc44 	.word	0x0801dc44
 801948c:	0801dc2c 	.word	0x0801dc2c
 8019490:	0801d810 	.word	0x0801d810
 8019494:	0801d288 	.word	0x0801d288
 8019498:	0801d280 	.word	0x0801d280

0801949c <rcl_get_default_topic_name_substitutions>:
 801949c:	2800      	cmp	r0, #0
 801949e:	bf0c      	ite	eq
 80194a0:	200b      	moveq	r0, #11
 80194a2:	2000      	movne	r0, #0
 80194a4:	4770      	bx	lr
 80194a6:	bf00      	nop

080194a8 <rcl_get_zero_initialized_guard_condition>:
 80194a8:	4a03      	ldr	r2, [pc, #12]	; (80194b8 <rcl_get_zero_initialized_guard_condition+0x10>)
 80194aa:	4603      	mov	r3, r0
 80194ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80194b0:	e883 0003 	stmia.w	r3, {r0, r1}
 80194b4:	4618      	mov	r0, r3
 80194b6:	4770      	bx	lr
 80194b8:	0801dc50 	.word	0x0801dc50

080194bc <rcl_guard_condition_init_from_rmw>:
 80194bc:	b082      	sub	sp, #8
 80194be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80194c2:	b086      	sub	sp, #24
 80194c4:	4604      	mov	r4, r0
 80194c6:	460e      	mov	r6, r1
 80194c8:	4615      	mov	r5, r2
 80194ca:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 80194ce:	f10d 0e04 	add.w	lr, sp, #4
 80194d2:	f84c 3f04 	str.w	r3, [ip, #4]!
 80194d6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80194da:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80194de:	f8dc 3000 	ldr.w	r3, [ip]
 80194e2:	a801      	add	r0, sp, #4
 80194e4:	f8ce 3000 	str.w	r3, [lr]
 80194e8:	f7f4 fc2e 	bl	800dd48 <rcutils_allocator_is_valid>
 80194ec:	f080 0301 	eor.w	r3, r0, #1
 80194f0:	b2db      	uxtb	r3, r3
 80194f2:	bb3b      	cbnz	r3, 8019544 <rcl_guard_condition_init_from_rmw+0x88>
 80194f4:	b334      	cbz	r4, 8019544 <rcl_guard_condition_init_from_rmw+0x88>
 80194f6:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80194fa:	f1b8 0f00 	cmp.w	r8, #0
 80194fe:	d11a      	bne.n	8019536 <rcl_guard_condition_init_from_rmw+0x7a>
 8019500:	b305      	cbz	r5, 8019544 <rcl_guard_condition_init_from_rmw+0x88>
 8019502:	4628      	mov	r0, r5
 8019504:	f7f7 fba4 	bl	8010c50 <rcl_context_is_valid>
 8019508:	b1f0      	cbz	r0, 8019548 <rcl_guard_condition_init_from_rmw+0x8c>
 801950a:	9b01      	ldr	r3, [sp, #4]
 801950c:	201c      	movs	r0, #28
 801950e:	9905      	ldr	r1, [sp, #20]
 8019510:	4798      	blx	r3
 8019512:	4607      	mov	r7, r0
 8019514:	6060      	str	r0, [r4, #4]
 8019516:	b320      	cbz	r0, 8019562 <rcl_guard_condition_init_from_rmw+0xa6>
 8019518:	b1c6      	cbz	r6, 801954c <rcl_guard_condition_init_from_rmw+0x90>
 801951a:	6006      	str	r6, [r0, #0]
 801951c:	f880 8004 	strb.w	r8, [r0, #4]
 8019520:	ac01      	add	r4, sp, #4
 8019522:	f107 0c08 	add.w	ip, r7, #8
 8019526:	2500      	movs	r5, #0
 8019528:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801952a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801952e:	6823      	ldr	r3, [r4, #0]
 8019530:	f8cc 3000 	str.w	r3, [ip]
 8019534:	e000      	b.n	8019538 <rcl_guard_condition_init_from_rmw+0x7c>
 8019536:	2564      	movs	r5, #100	; 0x64
 8019538:	4628      	mov	r0, r5
 801953a:	b006      	add	sp, #24
 801953c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019540:	b002      	add	sp, #8
 8019542:	4770      	bx	lr
 8019544:	250b      	movs	r5, #11
 8019546:	e7f7      	b.n	8019538 <rcl_guard_condition_init_from_rmw+0x7c>
 8019548:	2565      	movs	r5, #101	; 0x65
 801954a:	e7f5      	b.n	8019538 <rcl_guard_condition_init_from_rmw+0x7c>
 801954c:	6828      	ldr	r0, [r5, #0]
 801954e:	3028      	adds	r0, #40	; 0x28
 8019550:	f000 fc30 	bl	8019db4 <rmw_create_guard_condition>
 8019554:	6038      	str	r0, [r7, #0]
 8019556:	6867      	ldr	r7, [r4, #4]
 8019558:	683e      	ldr	r6, [r7, #0]
 801955a:	b126      	cbz	r6, 8019566 <rcl_guard_condition_init_from_rmw+0xaa>
 801955c:	2301      	movs	r3, #1
 801955e:	713b      	strb	r3, [r7, #4]
 8019560:	e7de      	b.n	8019520 <rcl_guard_condition_init_from_rmw+0x64>
 8019562:	250a      	movs	r5, #10
 8019564:	e7e8      	b.n	8019538 <rcl_guard_condition_init_from_rmw+0x7c>
 8019566:	9b02      	ldr	r3, [sp, #8]
 8019568:	4638      	mov	r0, r7
 801956a:	9905      	ldr	r1, [sp, #20]
 801956c:	2501      	movs	r5, #1
 801956e:	4798      	blx	r3
 8019570:	6066      	str	r6, [r4, #4]
 8019572:	e7e1      	b.n	8019538 <rcl_guard_condition_init_from_rmw+0x7c>

08019574 <rcl_guard_condition_fini>:
 8019574:	b570      	push	{r4, r5, r6, lr}
 8019576:	b082      	sub	sp, #8
 8019578:	b1f0      	cbz	r0, 80195b8 <rcl_guard_condition_fini+0x44>
 801957a:	6843      	ldr	r3, [r0, #4]
 801957c:	4604      	mov	r4, r0
 801957e:	b163      	cbz	r3, 801959a <rcl_guard_condition_fini+0x26>
 8019580:	6818      	ldr	r0, [r3, #0]
 8019582:	68de      	ldr	r6, [r3, #12]
 8019584:	6999      	ldr	r1, [r3, #24]
 8019586:	b160      	cbz	r0, 80195a2 <rcl_guard_condition_fini+0x2e>
 8019588:	791d      	ldrb	r5, [r3, #4]
 801958a:	b965      	cbnz	r5, 80195a6 <rcl_guard_condition_fini+0x32>
 801958c:	4618      	mov	r0, r3
 801958e:	47b0      	blx	r6
 8019590:	2300      	movs	r3, #0
 8019592:	4628      	mov	r0, r5
 8019594:	6063      	str	r3, [r4, #4]
 8019596:	b002      	add	sp, #8
 8019598:	bd70      	pop	{r4, r5, r6, pc}
 801959a:	461d      	mov	r5, r3
 801959c:	4628      	mov	r0, r5
 801959e:	b002      	add	sp, #8
 80195a0:	bd70      	pop	{r4, r5, r6, pc}
 80195a2:	4605      	mov	r5, r0
 80195a4:	e7f2      	b.n	801958c <rcl_guard_condition_fini+0x18>
 80195a6:	9101      	str	r1, [sp, #4]
 80195a8:	f000 fc1a 	bl	8019de0 <rmw_destroy_guard_condition>
 80195ac:	1e05      	subs	r5, r0, #0
 80195ae:	6863      	ldr	r3, [r4, #4]
 80195b0:	9901      	ldr	r1, [sp, #4]
 80195b2:	bf18      	it	ne
 80195b4:	2501      	movne	r5, #1
 80195b6:	e7e9      	b.n	801958c <rcl_guard_condition_fini+0x18>
 80195b8:	250b      	movs	r5, #11
 80195ba:	4628      	mov	r0, r5
 80195bc:	b002      	add	sp, #8
 80195be:	bd70      	pop	{r4, r5, r6, pc}

080195c0 <rcl_guard_condition_get_default_options>:
 80195c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80195c2:	b087      	sub	sp, #28
 80195c4:	4606      	mov	r6, r0
 80195c6:	4c0b      	ldr	r4, [pc, #44]	; (80195f4 <rcl_guard_condition_get_default_options+0x34>)
 80195c8:	4668      	mov	r0, sp
 80195ca:	f7f4 fbaf 	bl	800dd2c <rcutils_get_default_allocator>
 80195ce:	46ee      	mov	lr, sp
 80195d0:	46a4      	mov	ip, r4
 80195d2:	4625      	mov	r5, r4
 80195d4:	4634      	mov	r4, r6
 80195d6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80195da:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80195de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80195e0:	f8de 7000 	ldr.w	r7, [lr]
 80195e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80195e6:	4630      	mov	r0, r6
 80195e8:	f8cc 7000 	str.w	r7, [ip]
 80195ec:	6027      	str	r7, [r4, #0]
 80195ee:	b007      	add	sp, #28
 80195f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80195f2:	bf00      	nop
 80195f4:	200109fc 	.word	0x200109fc

080195f8 <rcl_guard_condition_get_rmw_handle>:
 80195f8:	b110      	cbz	r0, 8019600 <rcl_guard_condition_get_rmw_handle+0x8>
 80195fa:	6840      	ldr	r0, [r0, #4]
 80195fc:	b100      	cbz	r0, 8019600 <rcl_guard_condition_get_rmw_handle+0x8>
 80195fe:	6800      	ldr	r0, [r0, #0]
 8019600:	4770      	bx	lr
 8019602:	bf00      	nop

08019604 <rcl_publish>:
 8019604:	b1f8      	cbz	r0, 8019646 <rcl_publish+0x42>
 8019606:	6803      	ldr	r3, [r0, #0]
 8019608:	b570      	push	{r4, r5, r6, lr}
 801960a:	4604      	mov	r4, r0
 801960c:	b1b3      	cbz	r3, 801963c <rcl_publish+0x38>
 801960e:	4616      	mov	r6, r2
 8019610:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8019614:	b192      	cbz	r2, 801963c <rcl_publish+0x38>
 8019616:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 801961a:	460d      	mov	r5, r1
 801961c:	f7f7 fb18 	bl	8010c50 <rcl_context_is_valid>
 8019620:	b160      	cbz	r0, 801963c <rcl_publish+0x38>
 8019622:	6823      	ldr	r3, [r4, #0]
 8019624:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 8019628:	b140      	cbz	r0, 801963c <rcl_publish+0x38>
 801962a:	b155      	cbz	r5, 8019642 <rcl_publish+0x3e>
 801962c:	4632      	mov	r2, r6
 801962e:	4629      	mov	r1, r5
 8019630:	f000 fc10 	bl	8019e54 <rmw_publish>
 8019634:	3800      	subs	r0, #0
 8019636:	bf18      	it	ne
 8019638:	2001      	movne	r0, #1
 801963a:	bd70      	pop	{r4, r5, r6, pc}
 801963c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8019640:	bd70      	pop	{r4, r5, r6, pc}
 8019642:	200b      	movs	r0, #11
 8019644:	bd70      	pop	{r4, r5, r6, pc}
 8019646:	f44f 7096 	mov.w	r0, #300	; 0x12c
 801964a:	4770      	bx	lr

0801964c <rcl_publisher_is_valid>:
 801964c:	b1a0      	cbz	r0, 8019678 <rcl_publisher_is_valid+0x2c>
 801964e:	6803      	ldr	r3, [r0, #0]
 8019650:	b510      	push	{r4, lr}
 8019652:	4604      	mov	r4, r0
 8019654:	b173      	cbz	r3, 8019674 <rcl_publisher_is_valid+0x28>
 8019656:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 801965a:	b15a      	cbz	r2, 8019674 <rcl_publisher_is_valid+0x28>
 801965c:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 8019660:	f7f7 faf6 	bl	8010c50 <rcl_context_is_valid>
 8019664:	b130      	cbz	r0, 8019674 <rcl_publisher_is_valid+0x28>
 8019666:	6823      	ldr	r3, [r4, #0]
 8019668:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 801966c:	3800      	subs	r0, #0
 801966e:	bf18      	it	ne
 8019670:	2001      	movne	r0, #1
 8019672:	bd10      	pop	{r4, pc}
 8019674:	2000      	movs	r0, #0
 8019676:	bd10      	pop	{r4, pc}
 8019678:	2000      	movs	r0, #0
 801967a:	4770      	bx	lr

0801967c <rcl_publisher_is_valid_except_context>:
 801967c:	b130      	cbz	r0, 801968c <rcl_publisher_is_valid_except_context+0x10>
 801967e:	6800      	ldr	r0, [r0, #0]
 8019680:	b120      	cbz	r0, 801968c <rcl_publisher_is_valid_except_context+0x10>
 8019682:	f8d0 00c4 	ldr.w	r0, [r0, #196]	; 0xc4
 8019686:	3800      	subs	r0, #0
 8019688:	bf18      	it	ne
 801968a:	2001      	movne	r0, #1
 801968c:	4770      	bx	lr
 801968e:	bf00      	nop

08019690 <rcl_validate_topic_name>:
 8019690:	2800      	cmp	r0, #0
 8019692:	f000 8089 	beq.w	80197a8 <rcl_validate_topic_name+0x118>
 8019696:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801969a:	460e      	mov	r6, r1
 801969c:	2900      	cmp	r1, #0
 801969e:	f000 8085 	beq.w	80197ac <rcl_validate_topic_name+0x11c>
 80196a2:	4604      	mov	r4, r0
 80196a4:	4617      	mov	r7, r2
 80196a6:	f7e6 fe2b 	bl	8000300 <strlen>
 80196aa:	b1b0      	cbz	r0, 80196da <rcl_validate_topic_name+0x4a>
 80196ac:	f894 e000 	ldrb.w	lr, [r4]
 80196b0:	f8df c160 	ldr.w	ip, [pc, #352]	; 8019814 <rcl_validate_topic_name+0x184>
 80196b4:	f81c 300e 	ldrb.w	r3, [ip, lr]
 80196b8:	f013 0304 	ands.w	r3, r3, #4
 80196bc:	d139      	bne.n	8019732 <rcl_validate_topic_name+0xa2>
 80196be:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80196c2:	f814 2008 	ldrb.w	r2, [r4, r8]
 80196c6:	2a2f      	cmp	r2, #47	; 0x2f
 80196c8:	d10f      	bne.n	80196ea <rcl_validate_topic_name+0x5a>
 80196ca:	2202      	movs	r2, #2
 80196cc:	6032      	str	r2, [r6, #0]
 80196ce:	b3a7      	cbz	r7, 801973a <rcl_validate_topic_name+0xaa>
 80196d0:	4618      	mov	r0, r3
 80196d2:	f8c7 8000 	str.w	r8, [r7]
 80196d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80196da:	2301      	movs	r3, #1
 80196dc:	6033      	str	r3, [r6, #0]
 80196de:	b367      	cbz	r7, 801973a <rcl_validate_topic_name+0xaa>
 80196e0:	2300      	movs	r3, #0
 80196e2:	4618      	mov	r0, r3
 80196e4:	603b      	str	r3, [r7, #0]
 80196e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80196ea:	f104 3aff 	add.w	sl, r4, #4294967295	; 0xffffffff
 80196ee:	461d      	mov	r5, r3
 80196f0:	4619      	mov	r1, r3
 80196f2:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 80196f6:	f1a2 0930 	sub.w	r9, r2, #48	; 0x30
 80196fa:	f1b9 0f09 	cmp.w	r9, #9
 80196fe:	d91f      	bls.n	8019740 <rcl_validate_topic_name+0xb0>
 8019700:	f022 0920 	bic.w	r9, r2, #32
 8019704:	f1a9 0941 	sub.w	r9, r9, #65	; 0x41
 8019708:	f1b9 0f19 	cmp.w	r9, #25
 801970c:	d918      	bls.n	8019740 <rcl_validate_topic_name+0xb0>
 801970e:	2a5f      	cmp	r2, #95	; 0x5f
 8019710:	d024      	beq.n	801975c <rcl_validate_topic_name+0xcc>
 8019712:	2a2f      	cmp	r2, #47	; 0x2f
 8019714:	d058      	beq.n	80197c8 <rcl_validate_topic_name+0x138>
 8019716:	2a7e      	cmp	r2, #126	; 0x7e
 8019718:	d04a      	beq.n	80197b0 <rcl_validate_topic_name+0x120>
 801971a:	2a7b      	cmp	r2, #123	; 0x7b
 801971c:	d05b      	beq.n	80197d6 <rcl_validate_topic_name+0x146>
 801971e:	2a7d      	cmp	r2, #125	; 0x7d
 8019720:	d169      	bne.n	80197f6 <rcl_validate_topic_name+0x166>
 8019722:	2d00      	cmp	r5, #0
 8019724:	d15c      	bne.n	80197e0 <rcl_validate_topic_name+0x150>
 8019726:	2305      	movs	r3, #5
 8019728:	6033      	str	r3, [r6, #0]
 801972a:	b137      	cbz	r7, 801973a <rcl_validate_topic_name+0xaa>
 801972c:	2000      	movs	r0, #0
 801972e:	6039      	str	r1, [r7, #0]
 8019730:	e7d9      	b.n	80196e6 <rcl_validate_topic_name+0x56>
 8019732:	2304      	movs	r3, #4
 8019734:	6033      	str	r3, [r6, #0]
 8019736:	2f00      	cmp	r7, #0
 8019738:	d1d2      	bne.n	80196e0 <rcl_validate_topic_name+0x50>
 801973a:	2000      	movs	r0, #0
 801973c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019740:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8019744:	0752      	lsls	r2, r2, #29
 8019746:	d509      	bpl.n	801975c <rcl_validate_topic_name+0xcc>
 8019748:	2900      	cmp	r1, #0
 801974a:	bf0c      	ite	eq
 801974c:	2200      	moveq	r2, #0
 801974e:	f005 0201 	andne.w	r2, r5, #1
 8019752:	b11a      	cbz	r2, 801975c <rcl_validate_topic_name+0xcc>
 8019754:	1e4d      	subs	r5, r1, #1
 8019756:	429d      	cmp	r5, r3
 8019758:	d031      	beq.n	80197be <rcl_validate_topic_name+0x12e>
 801975a:	4615      	mov	r5, r2
 801975c:	3101      	adds	r1, #1
 801975e:	4288      	cmp	r0, r1
 8019760:	d1c7      	bne.n	80196f2 <rcl_validate_topic_name+0x62>
 8019762:	2d00      	cmp	r5, #0
 8019764:	d142      	bne.n	80197ec <rcl_validate_topic_name+0x15c>
 8019766:	4628      	mov	r0, r5
 8019768:	2301      	movs	r3, #1
 801976a:	e00c      	b.n	8019786 <rcl_validate_topic_name+0xf6>
 801976c:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 8019770:	d101      	bne.n	8019776 <rcl_validate_topic_name+0xe6>
 8019772:	2801      	cmp	r0, #1
 8019774:	d047      	beq.n	8019806 <rcl_validate_topic_name+0x176>
 8019776:	1c5a      	adds	r2, r3, #1
 8019778:	428b      	cmp	r3, r1
 801977a:	f100 0001 	add.w	r0, r0, #1
 801977e:	f104 0401 	add.w	r4, r4, #1
 8019782:	4613      	mov	r3, r2
 8019784:	d22e      	bcs.n	80197e4 <rcl_validate_topic_name+0x154>
 8019786:	4580      	cmp	r8, r0
 8019788:	d0f5      	beq.n	8019776 <rcl_validate_topic_name+0xe6>
 801978a:	7822      	ldrb	r2, [r4, #0]
 801978c:	2a2f      	cmp	r2, #47	; 0x2f
 801978e:	d1ed      	bne.n	801976c <rcl_validate_topic_name+0xdc>
 8019790:	7862      	ldrb	r2, [r4, #1]
 8019792:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8019796:	0752      	lsls	r2, r2, #29
 8019798:	d5ed      	bpl.n	8019776 <rcl_validate_topic_name+0xe6>
 801979a:	2204      	movs	r2, #4
 801979c:	6032      	str	r2, [r6, #0]
 801979e:	2f00      	cmp	r7, #0
 80197a0:	d0cb      	beq.n	801973a <rcl_validate_topic_name+0xaa>
 80197a2:	2000      	movs	r0, #0
 80197a4:	603b      	str	r3, [r7, #0]
 80197a6:	e79e      	b.n	80196e6 <rcl_validate_topic_name+0x56>
 80197a8:	200b      	movs	r0, #11
 80197aa:	4770      	bx	lr
 80197ac:	200b      	movs	r0, #11
 80197ae:	e79a      	b.n	80196e6 <rcl_validate_topic_name+0x56>
 80197b0:	2900      	cmp	r1, #0
 80197b2:	d0d3      	beq.n	801975c <rcl_validate_topic_name+0xcc>
 80197b4:	2306      	movs	r3, #6
 80197b6:	6033      	str	r3, [r6, #0]
 80197b8:	2f00      	cmp	r7, #0
 80197ba:	d1b7      	bne.n	801972c <rcl_validate_topic_name+0x9c>
 80197bc:	e7bd      	b.n	801973a <rcl_validate_topic_name+0xaa>
 80197be:	2309      	movs	r3, #9
 80197c0:	6033      	str	r3, [r6, #0]
 80197c2:	2f00      	cmp	r7, #0
 80197c4:	d1b2      	bne.n	801972c <rcl_validate_topic_name+0x9c>
 80197c6:	e7b8      	b.n	801973a <rcl_validate_topic_name+0xaa>
 80197c8:	2d00      	cmp	r5, #0
 80197ca:	d0c7      	beq.n	801975c <rcl_validate_topic_name+0xcc>
 80197cc:	2308      	movs	r3, #8
 80197ce:	6033      	str	r3, [r6, #0]
 80197d0:	2f00      	cmp	r7, #0
 80197d2:	d1ab      	bne.n	801972c <rcl_validate_topic_name+0x9c>
 80197d4:	e7b1      	b.n	801973a <rcl_validate_topic_name+0xaa>
 80197d6:	2d00      	cmp	r5, #0
 80197d8:	d1f8      	bne.n	80197cc <rcl_validate_topic_name+0x13c>
 80197da:	460b      	mov	r3, r1
 80197dc:	2501      	movs	r5, #1
 80197de:	e7bd      	b.n	801975c <rcl_validate_topic_name+0xcc>
 80197e0:	2500      	movs	r5, #0
 80197e2:	e7bb      	b.n	801975c <rcl_validate_topic_name+0xcc>
 80197e4:	2300      	movs	r3, #0
 80197e6:	4618      	mov	r0, r3
 80197e8:	6033      	str	r3, [r6, #0]
 80197ea:	e77c      	b.n	80196e6 <rcl_validate_topic_name+0x56>
 80197ec:	2205      	movs	r2, #5
 80197ee:	6032      	str	r2, [r6, #0]
 80197f0:	2f00      	cmp	r7, #0
 80197f2:	d1d6      	bne.n	80197a2 <rcl_validate_topic_name+0x112>
 80197f4:	e7a1      	b.n	801973a <rcl_validate_topic_name+0xaa>
 80197f6:	2d00      	cmp	r5, #0
 80197f8:	bf14      	ite	ne
 80197fa:	2308      	movne	r3, #8
 80197fc:	2303      	moveq	r3, #3
 80197fe:	6033      	str	r3, [r6, #0]
 8019800:	2f00      	cmp	r7, #0
 8019802:	d193      	bne.n	801972c <rcl_validate_topic_name+0x9c>
 8019804:	e799      	b.n	801973a <rcl_validate_topic_name+0xaa>
 8019806:	2307      	movs	r3, #7
 8019808:	6033      	str	r3, [r6, #0]
 801980a:	2f00      	cmp	r7, #0
 801980c:	d095      	beq.n	801973a <rcl_validate_topic_name+0xaa>
 801980e:	2301      	movs	r3, #1
 8019810:	e7c7      	b.n	80197a2 <rcl_validate_topic_name+0x112>
 8019812:	bf00      	nop
 8019814:	0801de30 	.word	0x0801de30

08019818 <rcutils_split>:
 8019818:	b082      	sub	sp, #8
 801981a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801981e:	b08d      	sub	sp, #52	; 0x34
 8019820:	ac16      	add	r4, sp, #88	; 0x58
 8019822:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8019824:	e884 000c 	stmia.w	r4, {r2, r3}
 8019828:	2f00      	cmp	r7, #0
 801982a:	f000 80a8 	beq.w	801997e <rcutils_split+0x166>
 801982e:	4605      	mov	r5, r0
 8019830:	2800      	cmp	r0, #0
 8019832:	d07e      	beq.n	8019932 <rcutils_split+0x11a>
 8019834:	7803      	ldrb	r3, [r0, #0]
 8019836:	2b00      	cmp	r3, #0
 8019838:	d07b      	beq.n	8019932 <rcutils_split+0x11a>
 801983a:	f10d 0c58 	add.w	ip, sp, #88	; 0x58
 801983e:	460e      	mov	r6, r1
 8019840:	9203      	str	r2, [sp, #12]
 8019842:	f107 0408 	add.w	r4, r7, #8
 8019846:	f8dd b068 	ldr.w	fp, [sp, #104]	; 0x68
 801984a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801984e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019850:	4628      	mov	r0, r5
 8019852:	f8c4 b000 	str.w	fp, [r4]
 8019856:	f7e6 fd53 	bl	8000300 <strlen>
 801985a:	782c      	ldrb	r4, [r5, #0]
 801985c:	182b      	adds	r3, r5, r0
 801985e:	1ba4      	subs	r4, r4, r6
 8019860:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8019864:	fab4 f484 	clz	r4, r4
 8019868:	42b3      	cmp	r3, r6
 801986a:	bf14      	ite	ne
 801986c:	4680      	movne	r8, r0
 801986e:	f1a0 0801 	subeq.w	r8, r0, #1
 8019872:	2001      	movs	r0, #1
 8019874:	0964      	lsrs	r4, r4, #5
 8019876:	6038      	str	r0, [r7, #0]
 8019878:	4544      	cmp	r4, r8
 801987a:	d26b      	bcs.n	8019954 <rcutils_split+0x13c>
 801987c:	192b      	adds	r3, r5, r4
 801987e:	eb05 0108 	add.w	r1, r5, r8
 8019882:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019886:	42b2      	cmp	r2, r6
 8019888:	d101      	bne.n	801988e <rcutils_split+0x76>
 801988a:	3001      	adds	r0, #1
 801988c:	6038      	str	r0, [r7, #0]
 801988e:	4299      	cmp	r1, r3
 8019890:	d1f7      	bne.n	8019882 <rcutils_split+0x6a>
 8019892:	9b03      	ldr	r3, [sp, #12]
 8019894:	0080      	lsls	r0, r0, #2
 8019896:	4659      	mov	r1, fp
 8019898:	4798      	blx	r3
 801989a:	4603      	mov	r3, r0
 801989c:	6078      	str	r0, [r7, #4]
 801989e:	2800      	cmp	r0, #0
 80198a0:	d05f      	beq.n	8019962 <rcutils_split+0x14a>
 80198a2:	f04f 0a00 	mov.w	sl, #0
 80198a6:	46a1      	mov	r9, r4
 80198a8:	e002      	b.n	80198b0 <rcutils_split+0x98>
 80198aa:	3401      	adds	r4, #1
 80198ac:	45a0      	cmp	r8, r4
 80198ae:	d922      	bls.n	80198f6 <rcutils_split+0xde>
 80198b0:	5d2a      	ldrb	r2, [r5, r4]
 80198b2:	42b2      	cmp	r2, r6
 80198b4:	d1f9      	bne.n	80198aa <rcutils_split+0x92>
 80198b6:	45a1      	cmp	r9, r4
 80198b8:	eba4 0209 	sub.w	r2, r4, r9
 80198bc:	d032      	beq.n	8019924 <rcutils_split+0x10c>
 80198be:	4659      	mov	r1, fp
 80198c0:	1c90      	adds	r0, r2, #2
 80198c2:	9302      	str	r3, [sp, #8]
 80198c4:	9b03      	ldr	r3, [sp, #12]
 80198c6:	9201      	str	r2, [sp, #4]
 80198c8:	4798      	blx	r3
 80198ca:	9a01      	ldr	r2, [sp, #4]
 80198cc:	9b02      	ldr	r3, [sp, #8]
 80198ce:	1c51      	adds	r1, r2, #1
 80198d0:	687a      	ldr	r2, [r7, #4]
 80198d2:	f843 002a 	str.w	r0, [r3, sl, lsl #2]
 80198d6:	eb05 0309 	add.w	r3, r5, r9
 80198da:	f852 002a 	ldr.w	r0, [r2, sl, lsl #2]
 80198de:	2800      	cmp	r0, #0
 80198e0:	d04f      	beq.n	8019982 <rcutils_split+0x16a>
 80198e2:	4a2b      	ldr	r2, [pc, #172]	; (8019990 <rcutils_split+0x178>)
 80198e4:	f10a 0a01 	add.w	sl, sl, #1
 80198e8:	f001 fc72 	bl	801b1d0 <sniprintf>
 80198ec:	687b      	ldr	r3, [r7, #4]
 80198ee:	3401      	adds	r4, #1
 80198f0:	45a0      	cmp	r8, r4
 80198f2:	46a1      	mov	r9, r4
 80198f4:	d8dc      	bhi.n	80198b0 <rcutils_split+0x98>
 80198f6:	45a1      	cmp	r9, r4
 80198f8:	d039      	beq.n	801996e <rcutils_split+0x156>
 80198fa:	eba4 0409 	sub.w	r4, r4, r9
 80198fe:	4659      	mov	r1, fp
 8019900:	9301      	str	r3, [sp, #4]
 8019902:	1ca0      	adds	r0, r4, #2
 8019904:	9b03      	ldr	r3, [sp, #12]
 8019906:	4798      	blx	r3
 8019908:	9b01      	ldr	r3, [sp, #4]
 801990a:	4a21      	ldr	r2, [pc, #132]	; (8019990 <rcutils_split+0x178>)
 801990c:	1c61      	adds	r1, r4, #1
 801990e:	f843 002a 	str.w	r0, [r3, sl, lsl #2]
 8019912:	eb05 0309 	add.w	r3, r5, r9
 8019916:	6878      	ldr	r0, [r7, #4]
 8019918:	2500      	movs	r5, #0
 801991a:	f850 002a 	ldr.w	r0, [r0, sl, lsl #2]
 801991e:	f001 fc57 	bl	801b1d0 <sniprintf>
 8019922:	e011      	b.n	8019948 <rcutils_split+0x130>
 8019924:	683a      	ldr	r2, [r7, #0]
 8019926:	2100      	movs	r1, #0
 8019928:	3a01      	subs	r2, #1
 801992a:	603a      	str	r2, [r7, #0]
 801992c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8019930:	e7dd      	b.n	80198ee <rcutils_split+0xd6>
 8019932:	ac04      	add	r4, sp, #16
 8019934:	a804      	add	r0, sp, #16
 8019936:	f000 f82d 	bl	8019994 <rcutils_get_zero_initialized_string_array>
 801993a:	2500      	movs	r5, #0
 801993c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801993e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8019940:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8019944:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8019948:	4628      	mov	r0, r5
 801994a:	b00d      	add	sp, #52	; 0x34
 801994c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019950:	b002      	add	sp, #8
 8019952:	4770      	bx	lr
 8019954:	9b03      	ldr	r3, [sp, #12]
 8019956:	4659      	mov	r1, fp
 8019958:	2004      	movs	r0, #4
 801995a:	4798      	blx	r3
 801995c:	4603      	mov	r3, r0
 801995e:	6078      	str	r0, [r7, #4]
 8019960:	b928      	cbnz	r0, 801996e <rcutils_split+0x156>
 8019962:	4638      	mov	r0, r7
 8019964:	f000 f834 	bl	80199d0 <rcutils_string_array_fini>
 8019968:	b970      	cbnz	r0, 8019988 <rcutils_split+0x170>
 801996a:	2502      	movs	r5, #2
 801996c:	e7ec      	b.n	8019948 <rcutils_split+0x130>
 801996e:	683a      	ldr	r2, [r7, #0]
 8019970:	2100      	movs	r1, #0
 8019972:	3a01      	subs	r2, #1
 8019974:	460d      	mov	r5, r1
 8019976:	603a      	str	r2, [r7, #0]
 8019978:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 801997c:	e7e4      	b.n	8019948 <rcutils_split+0x130>
 801997e:	250b      	movs	r5, #11
 8019980:	e7e2      	b.n	8019948 <rcutils_split+0x130>
 8019982:	f8c7 a000 	str.w	sl, [r7]
 8019986:	e7ec      	b.n	8019962 <rcutils_split+0x14a>
 8019988:	2502      	movs	r5, #2
 801998a:	f7f4 fa01 	bl	800dd90 <rcutils_reset_error>
 801998e:	e7db      	b.n	8019948 <rcutils_split+0x130>
 8019990:	0801d814 	.word	0x0801d814

08019994 <rcutils_get_zero_initialized_string_array>:
 8019994:	b570      	push	{r4, r5, r6, lr}
 8019996:	b086      	sub	sp, #24
 8019998:	4606      	mov	r6, r0
 801999a:	4c0c      	ldr	r4, [pc, #48]	; (80199cc <rcutils_get_zero_initialized_string_array+0x38>)
 801999c:	4668      	mov	r0, sp
 801999e:	f7f4 f999 	bl	800dcd4 <rcutils_get_zero_initialized_allocator>
 80199a2:	46ee      	mov	lr, sp
 80199a4:	f104 0508 	add.w	r5, r4, #8
 80199a8:	46a4      	mov	ip, r4
 80199aa:	4634      	mov	r4, r6
 80199ac:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80199b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80199b2:	f8de 3000 	ldr.w	r3, [lr]
 80199b6:	602b      	str	r3, [r5, #0]
 80199b8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80199bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80199be:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80199c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80199c6:	4630      	mov	r0, r6
 80199c8:	b006      	add	sp, #24
 80199ca:	bd70      	pop	{r4, r5, r6, pc}
 80199cc:	20010a10 	.word	0x20010a10

080199d0 <rcutils_string_array_fini>:
 80199d0:	b328      	cbz	r0, 8019a1e <rcutils_string_array_fini+0x4e>
 80199d2:	b570      	push	{r4, r5, r6, lr}
 80199d4:	4604      	mov	r4, r0
 80199d6:	6840      	ldr	r0, [r0, #4]
 80199d8:	b1e0      	cbz	r0, 8019a14 <rcutils_string_array_fini+0x44>
 80199da:	f104 0008 	add.w	r0, r4, #8
 80199de:	f7f4 f9b3 	bl	800dd48 <rcutils_allocator_is_valid>
 80199e2:	b1c0      	cbz	r0, 8019a16 <rcutils_string_array_fini+0x46>
 80199e4:	6823      	ldr	r3, [r4, #0]
 80199e6:	b1c3      	cbz	r3, 8019a1a <rcutils_string_array_fini+0x4a>
 80199e8:	2500      	movs	r5, #0
 80199ea:	6860      	ldr	r0, [r4, #4]
 80199ec:	462e      	mov	r6, r5
 80199ee:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 80199f2:	68e3      	ldr	r3, [r4, #12]
 80199f4:	69a1      	ldr	r1, [r4, #24]
 80199f6:	4798      	blx	r3
 80199f8:	e9d4 3000 	ldrd	r3, r0, [r4]
 80199fc:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 8019a00:	3501      	adds	r5, #1
 8019a02:	429d      	cmp	r5, r3
 8019a04:	d3f3      	bcc.n	80199ee <rcutils_string_array_fini+0x1e>
 8019a06:	68e3      	ldr	r3, [r4, #12]
 8019a08:	69a1      	ldr	r1, [r4, #24]
 8019a0a:	4798      	blx	r3
 8019a0c:	2300      	movs	r3, #0
 8019a0e:	4618      	mov	r0, r3
 8019a10:	e9c4 3300 	strd	r3, r3, [r4]
 8019a14:	bd70      	pop	{r4, r5, r6, pc}
 8019a16:	200b      	movs	r0, #11
 8019a18:	bd70      	pop	{r4, r5, r6, pc}
 8019a1a:	6860      	ldr	r0, [r4, #4]
 8019a1c:	e7f3      	b.n	8019a06 <rcutils_string_array_fini+0x36>
 8019a1e:	200b      	movs	r0, #11
 8019a20:	4770      	bx	lr
 8019a22:	bf00      	nop

08019a24 <rmw_get_zero_initialized_discovery_options>:
 8019a24:	b510      	push	{r4, lr}
 8019a26:	4604      	mov	r4, r0
 8019a28:	2220      	movs	r2, #32
 8019a2a:	2100      	movs	r1, #0
 8019a2c:	f001 fcaa 	bl	801b384 <memset>
 8019a30:	4620      	mov	r0, r4
 8019a32:	bd10      	pop	{r4, pc}

08019a34 <rmw_discovery_options_init>:
 8019a34:	b570      	push	{r4, r5, r6, lr}
 8019a36:	b318      	cbz	r0, 8019a80 <rmw_discovery_options_init+0x4c>
 8019a38:	4604      	mov	r4, r0
 8019a3a:	4610      	mov	r0, r2
 8019a3c:	460e      	mov	r6, r1
 8019a3e:	4615      	mov	r5, r2
 8019a40:	f7f4 f982 	bl	800dd48 <rcutils_allocator_is_valid>
 8019a44:	b1e0      	cbz	r0, 8019a80 <rmw_discovery_options_init+0x4c>
 8019a46:	68a3      	ldr	r3, [r4, #8]
 8019a48:	b9d3      	cbnz	r3, 8019a80 <rmw_discovery_options_init+0x4c>
 8019a4a:	6863      	ldr	r3, [r4, #4]
 8019a4c:	b9c3      	cbnz	r3, 8019a80 <rmw_discovery_options_init+0x4c>
 8019a4e:	7823      	ldrb	r3, [r4, #0]
 8019a50:	b90b      	cbnz	r3, 8019a56 <rmw_discovery_options_init+0x22>
 8019a52:	2302      	movs	r3, #2
 8019a54:	7023      	strb	r3, [r4, #0]
 8019a56:	b1a6      	cbz	r6, 8019a82 <rmw_discovery_options_init+0x4e>
 8019a58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8019a5c:	4630      	mov	r0, r6
 8019a5e:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
 8019a62:	4798      	blx	r3
 8019a64:	6060      	str	r0, [r4, #4]
 8019a66:	b170      	cbz	r0, 8019a86 <rmw_discovery_options_init+0x52>
 8019a68:	f104 0c0c 	add.w	ip, r4, #12
 8019a6c:	60a6      	str	r6, [r4, #8]
 8019a6e:	2600      	movs	r6, #0
 8019a70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019a72:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019a76:	682b      	ldr	r3, [r5, #0]
 8019a78:	4630      	mov	r0, r6
 8019a7a:	f8cc 3000 	str.w	r3, [ip]
 8019a7e:	bd70      	pop	{r4, r5, r6, pc}
 8019a80:	260b      	movs	r6, #11
 8019a82:	4630      	mov	r0, r6
 8019a84:	bd70      	pop	{r4, r5, r6, pc}
 8019a86:	260a      	movs	r6, #10
 8019a88:	e7fb      	b.n	8019a82 <rmw_discovery_options_init+0x4e>
 8019a8a:	bf00      	nop

08019a8c <rmw_time_equal>:
 8019a8c:	b4f0      	push	{r4, r5, r6, r7}
 8019a8e:	b084      	sub	sp, #16
 8019a90:	ac04      	add	r4, sp, #16
 8019a92:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8019a96:	4603      	mov	r3, r0
 8019a98:	4925      	ldr	r1, [pc, #148]	; (8019b30 <rmw_time_equal+0xa4>)
 8019a9a:	9d01      	ldr	r5, [sp, #4]
 8019a9c:	4610      	mov	r0, r2
 8019a9e:	4299      	cmp	r1, r3
 8019aa0:	f04f 0202 	mov.w	r2, #2
 8019aa4:	9e03      	ldr	r6, [sp, #12]
 8019aa6:	41aa      	sbcs	r2, r5
 8019aa8:	d330      	bcc.n	8019b0c <rmw_time_equal+0x80>
 8019aaa:	4c22      	ldr	r4, [pc, #136]	; (8019b34 <rmw_time_equal+0xa8>)
 8019aac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8019ab0:	fba3 3204 	umull	r3, r2, r3, r4
 8019ab4:	fb04 2205 	mla	r2, r4, r5, r2
 8019ab8:	43dd      	mvns	r5, r3
 8019aba:	1a8c      	subs	r4, r1, r2
 8019abc:	4285      	cmp	r5, r0
 8019abe:	41b4      	sbcs	r4, r6
 8019ac0:	d332      	bcc.n	8019b28 <rmw_time_equal+0x9c>
 8019ac2:	eb10 0c03 	adds.w	ip, r0, r3
 8019ac6:	eb42 0106 	adc.w	r1, r2, r6
 8019aca:	4819      	ldr	r0, [pc, #100]	; (8019b30 <rmw_time_equal+0xa4>)
 8019acc:	2202      	movs	r2, #2
 8019ace:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8019ad0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8019ad2:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 8019ad6:	4298      	cmp	r0, r3
 8019ad8:	41b2      	sbcs	r2, r6
 8019ada:	d31c      	bcc.n	8019b16 <rmw_time_equal+0x8a>
 8019adc:	4c15      	ldr	r4, [pc, #84]	; (8019b34 <rmw_time_equal+0xa8>)
 8019ade:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8019ae2:	fba3 3204 	umull	r3, r2, r3, r4
 8019ae6:	fb04 2206 	mla	r2, r4, r6, r2
 8019aea:	43de      	mvns	r6, r3
 8019aec:	1a84      	subs	r4, r0, r2
 8019aee:	42ae      	cmp	r6, r5
 8019af0:	41bc      	sbcs	r4, r7
 8019af2:	d315      	bcc.n	8019b20 <rmw_time_equal+0x94>
 8019af4:	195b      	adds	r3, r3, r5
 8019af6:	eb42 0207 	adc.w	r2, r2, r7
 8019afa:	428a      	cmp	r2, r1
 8019afc:	bf08      	it	eq
 8019afe:	4563      	cmpeq	r3, ip
 8019b00:	bf0c      	ite	eq
 8019b02:	2001      	moveq	r0, #1
 8019b04:	2000      	movne	r0, #0
 8019b06:	b004      	add	sp, #16
 8019b08:	bcf0      	pop	{r4, r5, r6, r7}
 8019b0a:	4770      	bx	lr
 8019b0c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8019b10:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8019b14:	e7d9      	b.n	8019aca <rmw_time_equal+0x3e>
 8019b16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019b1a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8019b1e:	e7ec      	b.n	8019afa <rmw_time_equal+0x6e>
 8019b20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019b24:	4602      	mov	r2, r0
 8019b26:	e7e8      	b.n	8019afa <rmw_time_equal+0x6e>
 8019b28:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8019b2c:	e7cd      	b.n	8019aca <rmw_time_equal+0x3e>
 8019b2e:	bf00      	nop
 8019b30:	25c17d04 	.word	0x25c17d04
 8019b34:	3b9aca00 	.word	0x3b9aca00

08019b38 <rmw_time_total_nsec>:
 8019b38:	b470      	push	{r4, r5, r6}
 8019b3a:	b085      	sub	sp, #20
 8019b3c:	ac04      	add	r4, sp, #16
 8019b3e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8019b42:	4603      	mov	r3, r0
 8019b44:	4913      	ldr	r1, [pc, #76]	; (8019b94 <rmw_time_total_nsec+0x5c>)
 8019b46:	9d01      	ldr	r5, [sp, #4]
 8019b48:	4610      	mov	r0, r2
 8019b4a:	4299      	cmp	r1, r3
 8019b4c:	f04f 0202 	mov.w	r2, #2
 8019b50:	9e03      	ldr	r6, [sp, #12]
 8019b52:	41aa      	sbcs	r2, r5
 8019b54:	d311      	bcc.n	8019b7a <rmw_time_total_nsec+0x42>
 8019b56:	4c10      	ldr	r4, [pc, #64]	; (8019b98 <rmw_time_total_nsec+0x60>)
 8019b58:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8019b5c:	fba3 3204 	umull	r3, r2, r3, r4
 8019b60:	fb04 2205 	mla	r2, r4, r5, r2
 8019b64:	43dd      	mvns	r5, r3
 8019b66:	1a8c      	subs	r4, r1, r2
 8019b68:	4285      	cmp	r5, r0
 8019b6a:	41b4      	sbcs	r4, r6
 8019b6c:	d30c      	bcc.n	8019b88 <rmw_time_total_nsec+0x50>
 8019b6e:	1818      	adds	r0, r3, r0
 8019b70:	eb42 0106 	adc.w	r1, r2, r6
 8019b74:	b005      	add	sp, #20
 8019b76:	bc70      	pop	{r4, r5, r6}
 8019b78:	4770      	bx	lr
 8019b7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019b7e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8019b82:	b005      	add	sp, #20
 8019b84:	bc70      	pop	{r4, r5, r6}
 8019b86:	4770      	bx	lr
 8019b88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019b8c:	b005      	add	sp, #20
 8019b8e:	bc70      	pop	{r4, r5, r6}
 8019b90:	4770      	bx	lr
 8019b92:	bf00      	nop
 8019b94:	25c17d04 	.word	0x25c17d04
 8019b98:	3b9aca00 	.word	0x3b9aca00

08019b9c <on_status>:
 8019b9c:	b082      	sub	sp, #8
 8019b9e:	b002      	add	sp, #8
 8019ba0:	4770      	bx	lr
 8019ba2:	bf00      	nop

08019ba4 <on_topic>:
 8019ba4:	4a23      	ldr	r2, [pc, #140]	; (8019c34 <on_topic+0x90>)
 8019ba6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019baa:	6812      	ldr	r2, [r2, #0]
 8019bac:	b094      	sub	sp, #80	; 0x50
 8019bae:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8019bb0:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
 8019bb4:	9113      	str	r1, [sp, #76]	; 0x4c
 8019bb6:	9312      	str	r3, [sp, #72]	; 0x48
 8019bb8:	b3c2      	cbz	r2, 8019c2c <on_topic+0x88>
 8019bba:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 8019bbe:	f89d 004e 	ldrb.w	r0, [sp, #78]	; 0x4e
 8019bc2:	e001      	b.n	8019bc8 <on_topic+0x24>
 8019bc4:	6852      	ldr	r2, [r2, #4]
 8019bc6:	b38a      	cbz	r2, 8019c2c <on_topic+0x88>
 8019bc8:	6894      	ldr	r4, [r2, #8]
 8019bca:	8aa3      	ldrh	r3, [r4, #20]
 8019bcc:	428b      	cmp	r3, r1
 8019bce:	d1f9      	bne.n	8019bc4 <on_topic+0x20>
 8019bd0:	7da3      	ldrb	r3, [r4, #22]
 8019bd2:	4283      	cmp	r3, r0
 8019bd4:	d1f6      	bne.n	8019bc4 <on_topic+0x20>
 8019bd6:	2248      	movs	r2, #72	; 0x48
 8019bd8:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8019bdc:	4668      	mov	r0, sp
 8019bde:	f001 fd46 	bl	801b66e <memcpy>
 8019be2:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8019be6:	4620      	mov	r0, r4
 8019be8:	cb0c      	ldmia	r3, {r2, r3}
 8019bea:	f7fb fdf9 	bl	80157e0 <rmw_uxrce_get_static_input_buffer_for_entity>
 8019bee:	4607      	mov	r7, r0
 8019bf0:	b1e0      	cbz	r0, 8019c2c <on_topic+0x88>
 8019bf2:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8019bf6:	462a      	mov	r2, r5
 8019bf8:	4630      	mov	r0, r6
 8019bfa:	f108 0110 	add.w	r1, r8, #16
 8019bfe:	f7f4 fc43 	bl	800e488 <ucdr_deserialize_array_uint8_t>
 8019c02:	b930      	cbnz	r0, 8019c12 <on_topic+0x6e>
 8019c04:	4639      	mov	r1, r7
 8019c06:	480c      	ldr	r0, [pc, #48]	; (8019c38 <on_topic+0x94>)
 8019c08:	b014      	add	sp, #80	; 0x50
 8019c0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019c0e:	f000 b8bd 	b.w	8019d8c <put_memory>
 8019c12:	f8c8 4814 	str.w	r4, [r8, #2068]	; 0x814
 8019c16:	f8c8 5810 	str.w	r5, [r8, #2064]	; 0x810
 8019c1a:	f000 f97b 	bl	8019f14 <rmw_uros_epoch_nanos>
 8019c1e:	f508 6202 	add.w	r2, r8, #2080	; 0x820
 8019c22:	2305      	movs	r3, #5
 8019c24:	e942 0102 	strd	r0, r1, [r2, #-8]
 8019c28:	f888 3820 	strb.w	r3, [r8, #2080]	; 0x820
 8019c2c:	b014      	add	sp, #80	; 0x50
 8019c2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019c32:	bf00      	nop
 8019c34:	20010954 	.word	0x20010954
 8019c38:	20010944 	.word	0x20010944

08019c3c <on_request>:
 8019c3c:	4824      	ldr	r0, [pc, #144]	; (8019cd0 <on_request+0x94>)
 8019c3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019c42:	6800      	ldr	r0, [r0, #0]
 8019c44:	b094      	sub	sp, #80	; 0x50
 8019c46:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8019c48:	f8bd 706c 	ldrh.w	r7, [sp, #108]	; 0x6c
 8019c4c:	9113      	str	r1, [sp, #76]	; 0x4c
 8019c4e:	2800      	cmp	r0, #0
 8019c50:	d03b      	beq.n	8019cca <on_request+0x8e>
 8019c52:	461d      	mov	r5, r3
 8019c54:	e001      	b.n	8019c5a <on_request+0x1e>
 8019c56:	6840      	ldr	r0, [r0, #4]
 8019c58:	b3b8      	cbz	r0, 8019cca <on_request+0x8e>
 8019c5a:	6884      	ldr	r4, [r0, #8]
 8019c5c:	8b21      	ldrh	r1, [r4, #24]
 8019c5e:	4291      	cmp	r1, r2
 8019c60:	d1f9      	bne.n	8019c56 <on_request+0x1a>
 8019c62:	2248      	movs	r2, #72	; 0x48
 8019c64:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8019c68:	4668      	mov	r0, sp
 8019c6a:	f001 fd00 	bl	801b66e <memcpy>
 8019c6e:	f104 0320 	add.w	r3, r4, #32
 8019c72:	4620      	mov	r0, r4
 8019c74:	cb0c      	ldmia	r3, {r2, r3}
 8019c76:	f7fb fdb3 	bl	80157e0 <rmw_uxrce_get_static_input_buffer_for_entity>
 8019c7a:	4680      	mov	r8, r0
 8019c7c:	b328      	cbz	r0, 8019cca <on_request+0x8e>
 8019c7e:	4630      	mov	r0, r6
 8019c80:	f8d8 6008 	ldr.w	r6, [r8, #8]
 8019c84:	463a      	mov	r2, r7
 8019c86:	f106 0110 	add.w	r1, r6, #16
 8019c8a:	f7f4 fbfd 	bl	800e488 <ucdr_deserialize_array_uint8_t>
 8019c8e:	b930      	cbnz	r0, 8019c9e <on_request+0x62>
 8019c90:	4641      	mov	r1, r8
 8019c92:	4810      	ldr	r0, [pc, #64]	; (8019cd4 <on_request+0x98>)
 8019c94:	b014      	add	sp, #80	; 0x50
 8019c96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019c9a:	f000 b877 	b.w	8019d8c <put_memory>
 8019c9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019ca0:	f606 0c28 	addw	ip, r6, #2088	; 0x828
 8019ca4:	f8c6 4814 	str.w	r4, [r6, #2068]	; 0x814
 8019ca8:	f8c6 7810 	str.w	r7, [r6, #2064]	; 0x810
 8019cac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019cb0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8019cb4:	e88c 0003 	stmia.w	ip, {r0, r1}
 8019cb8:	f000 f92c 	bl	8019f14 <rmw_uros_epoch_nanos>
 8019cbc:	f506 6202 	add.w	r2, r6, #2080	; 0x820
 8019cc0:	2303      	movs	r3, #3
 8019cc2:	e942 0102 	strd	r0, r1, [r2, #-8]
 8019cc6:	f886 3820 	strb.w	r3, [r6, #2080]	; 0x820
 8019cca:	b014      	add	sp, #80	; 0x50
 8019ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019cd0:	20010924 	.word	0x20010924
 8019cd4:	20010944 	.word	0x20010944

08019cd8 <on_reply>:
 8019cd8:	4822      	ldr	r0, [pc, #136]	; (8019d64 <on_reply+0x8c>)
 8019cda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019cde:	6800      	ldr	r0, [r0, #0]
 8019ce0:	b094      	sub	sp, #80	; 0x50
 8019ce2:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8019ce4:	f8bd 706c 	ldrh.w	r7, [sp, #108]	; 0x6c
 8019ce8:	9113      	str	r1, [sp, #76]	; 0x4c
 8019cea:	b3b8      	cbz	r0, 8019d5c <on_reply+0x84>
 8019cec:	461d      	mov	r5, r3
 8019cee:	e001      	b.n	8019cf4 <on_reply+0x1c>
 8019cf0:	6840      	ldr	r0, [r0, #4]
 8019cf2:	b398      	cbz	r0, 8019d5c <on_reply+0x84>
 8019cf4:	6884      	ldr	r4, [r0, #8]
 8019cf6:	8b21      	ldrh	r1, [r4, #24]
 8019cf8:	4291      	cmp	r1, r2
 8019cfa:	d1f9      	bne.n	8019cf0 <on_reply+0x18>
 8019cfc:	2248      	movs	r2, #72	; 0x48
 8019cfe:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8019d02:	4668      	mov	r0, sp
 8019d04:	f001 fcb3 	bl	801b66e <memcpy>
 8019d08:	f104 0320 	add.w	r3, r4, #32
 8019d0c:	4620      	mov	r0, r4
 8019d0e:	cb0c      	ldmia	r3, {r2, r3}
 8019d10:	f7fb fd66 	bl	80157e0 <rmw_uxrce_get_static_input_buffer_for_entity>
 8019d14:	4680      	mov	r8, r0
 8019d16:	b308      	cbz	r0, 8019d5c <on_reply+0x84>
 8019d18:	4630      	mov	r0, r6
 8019d1a:	f8d8 6008 	ldr.w	r6, [r8, #8]
 8019d1e:	463a      	mov	r2, r7
 8019d20:	f106 0110 	add.w	r1, r6, #16
 8019d24:	f7f4 fbb0 	bl	800e488 <ucdr_deserialize_array_uint8_t>
 8019d28:	b930      	cbnz	r0, 8019d38 <on_reply+0x60>
 8019d2a:	4641      	mov	r1, r8
 8019d2c:	480e      	ldr	r0, [pc, #56]	; (8019d68 <on_reply+0x90>)
 8019d2e:	b014      	add	sp, #80	; 0x50
 8019d30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019d34:	f000 b82a 	b.w	8019d8c <put_memory>
 8019d38:	2200      	movs	r2, #0
 8019d3a:	f8c6 4814 	str.w	r4, [r6, #2068]	; 0x814
 8019d3e:	f8c6 7810 	str.w	r7, [r6, #2064]	; 0x810
 8019d42:	f8c6 282c 	str.w	r2, [r6, #2092]	; 0x82c
 8019d46:	f8c6 5828 	str.w	r5, [r6, #2088]	; 0x828
 8019d4a:	f000 f8e3 	bl	8019f14 <rmw_uros_epoch_nanos>
 8019d4e:	f506 6202 	add.w	r2, r6, #2080	; 0x820
 8019d52:	2304      	movs	r3, #4
 8019d54:	e942 0102 	strd	r0, r1, [r2, #-8]
 8019d58:	f886 3820 	strb.w	r3, [r6, #2080]	; 0x820
 8019d5c:	b014      	add	sp, #80	; 0x50
 8019d5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019d62:	bf00      	nop
 8019d64:	2000bf70 	.word	0x2000bf70
 8019d68:	20010944 	.word	0x20010944

08019d6c <get_memory>:
 8019d6c:	4603      	mov	r3, r0
 8019d6e:	6840      	ldr	r0, [r0, #4]
 8019d70:	b158      	cbz	r0, 8019d8a <get_memory+0x1e>
 8019d72:	6842      	ldr	r2, [r0, #4]
 8019d74:	605a      	str	r2, [r3, #4]
 8019d76:	b10a      	cbz	r2, 8019d7c <get_memory+0x10>
 8019d78:	2100      	movs	r1, #0
 8019d7a:	6011      	str	r1, [r2, #0]
 8019d7c:	681a      	ldr	r2, [r3, #0]
 8019d7e:	6042      	str	r2, [r0, #4]
 8019d80:	b102      	cbz	r2, 8019d84 <get_memory+0x18>
 8019d82:	6010      	str	r0, [r2, #0]
 8019d84:	2200      	movs	r2, #0
 8019d86:	6002      	str	r2, [r0, #0]
 8019d88:	6018      	str	r0, [r3, #0]
 8019d8a:	4770      	bx	lr

08019d8c <put_memory>:
 8019d8c:	680b      	ldr	r3, [r1, #0]
 8019d8e:	b10b      	cbz	r3, 8019d94 <put_memory+0x8>
 8019d90:	684a      	ldr	r2, [r1, #4]
 8019d92:	605a      	str	r2, [r3, #4]
 8019d94:	684a      	ldr	r2, [r1, #4]
 8019d96:	b102      	cbz	r2, 8019d9a <put_memory+0xe>
 8019d98:	6013      	str	r3, [r2, #0]
 8019d9a:	6803      	ldr	r3, [r0, #0]
 8019d9c:	428b      	cmp	r3, r1
 8019d9e:	6843      	ldr	r3, [r0, #4]
 8019da0:	bf08      	it	eq
 8019da2:	6002      	streq	r2, [r0, #0]
 8019da4:	604b      	str	r3, [r1, #4]
 8019da6:	b103      	cbz	r3, 8019daa <put_memory+0x1e>
 8019da8:	6019      	str	r1, [r3, #0]
 8019daa:	2300      	movs	r3, #0
 8019dac:	600b      	str	r3, [r1, #0]
 8019dae:	6041      	str	r1, [r0, #4]
 8019db0:	4770      	bx	lr
 8019db2:	bf00      	nop

08019db4 <rmw_create_guard_condition>:
 8019db4:	b538      	push	{r3, r4, r5, lr}
 8019db6:	4605      	mov	r5, r0
 8019db8:	4808      	ldr	r0, [pc, #32]	; (8019ddc <rmw_create_guard_condition+0x28>)
 8019dba:	f7ff ffd7 	bl	8019d6c <get_memory>
 8019dbe:	4603      	mov	r3, r0
 8019dc0:	b148      	cbz	r0, 8019dd6 <rmw_create_guard_condition+0x22>
 8019dc2:	6884      	ldr	r4, [r0, #8]
 8019dc4:	2300      	movs	r3, #0
 8019dc6:	61e5      	str	r5, [r4, #28]
 8019dc8:	7423      	strb	r3, [r4, #16]
 8019dca:	f7fa fa99 	bl	8014300 <rmw_get_implementation_identifier>
 8019dce:	f104 0314 	add.w	r3, r4, #20
 8019dd2:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8019dd6:	4618      	mov	r0, r3
 8019dd8:	bd38      	pop	{r3, r4, r5, pc}
 8019dda:	bf00      	nop
 8019ddc:	200108e4 	.word	0x200108e4

08019de0 <rmw_destroy_guard_condition>:
 8019de0:	b508      	push	{r3, lr}
 8019de2:	4b08      	ldr	r3, [pc, #32]	; (8019e04 <rmw_destroy_guard_condition+0x24>)
 8019de4:	6819      	ldr	r1, [r3, #0]
 8019de6:	b911      	cbnz	r1, 8019dee <rmw_destroy_guard_condition+0xe>
 8019de8:	e00a      	b.n	8019e00 <rmw_destroy_guard_condition+0x20>
 8019dea:	6849      	ldr	r1, [r1, #4]
 8019dec:	b141      	cbz	r1, 8019e00 <rmw_destroy_guard_condition+0x20>
 8019dee:	688b      	ldr	r3, [r1, #8]
 8019df0:	3314      	adds	r3, #20
 8019df2:	4298      	cmp	r0, r3
 8019df4:	d1f9      	bne.n	8019dea <rmw_destroy_guard_condition+0xa>
 8019df6:	4803      	ldr	r0, [pc, #12]	; (8019e04 <rmw_destroy_guard_condition+0x24>)
 8019df8:	f7ff ffc8 	bl	8019d8c <put_memory>
 8019dfc:	2000      	movs	r0, #0
 8019dfe:	bd08      	pop	{r3, pc}
 8019e00:	2001      	movs	r0, #1
 8019e02:	bd08      	pop	{r3, pc}
 8019e04:	200108e4 	.word	0x200108e4

08019e08 <destroy_topic>:
 8019e08:	b538      	push	{r3, r4, r5, lr}
 8019e0a:	6985      	ldr	r5, [r0, #24]
 8019e0c:	b1dd      	cbz	r5, 8019e46 <destroy_topic+0x3e>
 8019e0e:	4604      	mov	r4, r0
 8019e10:	6928      	ldr	r0, [r5, #16]
 8019e12:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8019e16:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8019e1a:	6922      	ldr	r2, [r4, #16]
 8019e1c:	6819      	ldr	r1, [r3, #0]
 8019e1e:	f7fb ff51 	bl	8015cc4 <uxr_buffer_delete_entity>
 8019e22:	4602      	mov	r2, r0
 8019e24:	6928      	ldr	r0, [r5, #16]
 8019e26:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8019e2a:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8019e2e:	f7fb fdd9 	bl	80159e4 <run_xrce_session>
 8019e32:	4603      	mov	r3, r0
 8019e34:	4620      	mov	r0, r4
 8019e36:	2b00      	cmp	r3, #0
 8019e38:	bf14      	ite	ne
 8019e3a:	2400      	movne	r4, #0
 8019e3c:	2402      	moveq	r4, #2
 8019e3e:	f7fb fcc3 	bl	80157c8 <rmw_uxrce_fini_topic_memory>
 8019e42:	4620      	mov	r0, r4
 8019e44:	bd38      	pop	{r3, r4, r5, pc}
 8019e46:	2401      	movs	r4, #1
 8019e48:	4620      	mov	r0, r4
 8019e4a:	bd38      	pop	{r3, r4, r5, pc}

08019e4c <flush_session>:
 8019e4c:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
 8019e4e:	f7fc beeb 	b.w	8016c28 <uxr_run_session_until_confirm_delivery>
 8019e52:	bf00      	nop

08019e54 <rmw_publish>:
 8019e54:	2800      	cmp	r0, #0
 8019e56:	d053      	beq.n	8019f00 <rmw_publish+0xac>
 8019e58:	b570      	push	{r4, r5, r6, lr}
 8019e5a:	460d      	mov	r5, r1
 8019e5c:	b08e      	sub	sp, #56	; 0x38
 8019e5e:	2900      	cmp	r1, #0
 8019e60:	d04b      	beq.n	8019efa <rmw_publish+0xa6>
 8019e62:	4604      	mov	r4, r0
 8019e64:	6800      	ldr	r0, [r0, #0]
 8019e66:	f7fb fe89 	bl	8015b7c <is_uxrce_rmw_identifier_valid>
 8019e6a:	2800      	cmp	r0, #0
 8019e6c:	d045      	beq.n	8019efa <rmw_publish+0xa6>
 8019e6e:	6866      	ldr	r6, [r4, #4]
 8019e70:	2e00      	cmp	r6, #0
 8019e72:	d042      	beq.n	8019efa <rmw_publish+0xa6>
 8019e74:	69b4      	ldr	r4, [r6, #24]
 8019e76:	4628      	mov	r0, r5
 8019e78:	6923      	ldr	r3, [r4, #16]
 8019e7a:	4798      	blx	r3
 8019e7c:	69f3      	ldr	r3, [r6, #28]
 8019e7e:	9005      	str	r0, [sp, #20]
 8019e80:	b113      	cbz	r3, 8019e88 <rmw_publish+0x34>
 8019e82:	a805      	add	r0, sp, #20
 8019e84:	4798      	blx	r3
 8019e86:	9805      	ldr	r0, [sp, #20]
 8019e88:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8019e8c:	691b      	ldr	r3, [r3, #16]
 8019e8e:	9000      	str	r0, [sp, #0]
 8019e90:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8019e94:	6972      	ldr	r2, [r6, #20]
 8019e96:	ab06      	add	r3, sp, #24
 8019e98:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 8019e9a:	f7fe f93f 	bl	801811c <uxr_prepare_output_stream>
 8019e9e:	b1d8      	cbz	r0, 8019ed8 <rmw_publish+0x84>
 8019ea0:	68a3      	ldr	r3, [r4, #8]
 8019ea2:	a906      	add	r1, sp, #24
 8019ea4:	4628      	mov	r0, r5
 8019ea6:	4798      	blx	r3
 8019ea8:	6a33      	ldr	r3, [r6, #32]
 8019eaa:	4604      	mov	r4, r0
 8019eac:	b10b      	cbz	r3, 8019eb2 <rmw_publish+0x5e>
 8019eae:	a806      	add	r0, sp, #24
 8019eb0:	4798      	blx	r3
 8019eb2:	f896 307a 	ldrb.w	r3, [r6, #122]	; 0x7a
 8019eb6:	2b01      	cmp	r3, #1
 8019eb8:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8019ebc:	d022      	beq.n	8019f04 <rmw_publish+0xb0>
 8019ebe:	6918      	ldr	r0, [r3, #16]
 8019ec0:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
 8019ec2:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8019ec6:	f7fc feaf 	bl	8016c28 <uxr_run_session_until_confirm_delivery>
 8019eca:	4020      	ands	r0, r4
 8019ecc:	b2c4      	uxtb	r4, r0
 8019ece:	f084 0001 	eor.w	r0, r4, #1
 8019ed2:	b2c0      	uxtb	r0, r0
 8019ed4:	b00e      	add	sp, #56	; 0x38
 8019ed6:	bd70      	pop	{r4, r5, r6, pc}
 8019ed8:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8019edc:	6918      	ldr	r0, [r3, #16]
 8019ede:	9b05      	ldr	r3, [sp, #20]
 8019ee0:	9602      	str	r6, [sp, #8]
 8019ee2:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8019ee6:	9300      	str	r3, [sp, #0]
 8019ee8:	4b09      	ldr	r3, [pc, #36]	; (8019f10 <rmw_publish+0xbc>)
 8019eea:	9301      	str	r3, [sp, #4]
 8019eec:	ab06      	add	r3, sp, #24
 8019eee:	6972      	ldr	r2, [r6, #20]
 8019ef0:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 8019ef2:	f7fe f943 	bl	801817c <uxr_prepare_output_stream_fragmented>
 8019ef6:	2800      	cmp	r0, #0
 8019ef8:	d1d2      	bne.n	8019ea0 <rmw_publish+0x4c>
 8019efa:	2001      	movs	r0, #1
 8019efc:	b00e      	add	sp, #56	; 0x38
 8019efe:	bd70      	pop	{r4, r5, r6, pc}
 8019f00:	2001      	movs	r0, #1
 8019f02:	4770      	bx	lr
 8019f04:	6918      	ldr	r0, [r3, #16]
 8019f06:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8019f0a:	f7fc fad3 	bl	80164b4 <uxr_flash_output_streams>
 8019f0e:	e7de      	b.n	8019ece <rmw_publish+0x7a>
 8019f10:	08019e4d 	.word	0x08019e4d

08019f14 <rmw_uros_epoch_nanos>:
 8019f14:	4b05      	ldr	r3, [pc, #20]	; (8019f2c <rmw_uros_epoch_nanos+0x18>)
 8019f16:	681b      	ldr	r3, [r3, #0]
 8019f18:	b123      	cbz	r3, 8019f24 <rmw_uros_epoch_nanos+0x10>
 8019f1a:	6898      	ldr	r0, [r3, #8]
 8019f1c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8019f20:	f7fc babe 	b.w	80164a0 <uxr_epoch_nanos>
 8019f24:	2000      	movs	r0, #0
 8019f26:	2100      	movs	r1, #0
 8019f28:	4770      	bx	lr
 8019f2a:	bf00      	nop
 8019f2c:	20010934 	.word	0x20010934

08019f30 <ucdr_serialize_string>:
 8019f30:	b510      	push	{r4, lr}
 8019f32:	b082      	sub	sp, #8
 8019f34:	4604      	mov	r4, r0
 8019f36:	4608      	mov	r0, r1
 8019f38:	9101      	str	r1, [sp, #4]
 8019f3a:	f7e6 f9e1 	bl	8000300 <strlen>
 8019f3e:	4602      	mov	r2, r0
 8019f40:	9901      	ldr	r1, [sp, #4]
 8019f42:	4620      	mov	r0, r4
 8019f44:	3201      	adds	r2, #1
 8019f46:	b002      	add	sp, #8
 8019f48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019f4c:	f7f5 be10 	b.w	800fb70 <ucdr_serialize_sequence_char>

08019f50 <ucdr_deserialize_string>:
 8019f50:	b500      	push	{lr}
 8019f52:	b083      	sub	sp, #12
 8019f54:	ab01      	add	r3, sp, #4
 8019f56:	f7f5 fe1d 	bl	800fb94 <ucdr_deserialize_sequence_char>
 8019f5a:	b003      	add	sp, #12
 8019f5c:	f85d fb04 	ldr.w	pc, [sp], #4

08019f60 <uxr_init_input_best_effort_stream>:
 8019f60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019f64:	8003      	strh	r3, [r0, #0]
 8019f66:	4770      	bx	lr

08019f68 <uxr_reset_input_best_effort_stream>:
 8019f68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019f6c:	8003      	strh	r3, [r0, #0]
 8019f6e:	4770      	bx	lr

08019f70 <uxr_receive_best_effort_message>:
 8019f70:	b538      	push	{r3, r4, r5, lr}
 8019f72:	4604      	mov	r4, r0
 8019f74:	8800      	ldrh	r0, [r0, #0]
 8019f76:	460d      	mov	r5, r1
 8019f78:	f000 fd46 	bl	801aa08 <uxr_seq_num_cmp>
 8019f7c:	4603      	mov	r3, r0
 8019f7e:	0fc0      	lsrs	r0, r0, #31
 8019f80:	2b00      	cmp	r3, #0
 8019f82:	bfb8      	it	lt
 8019f84:	8025      	strhlt	r5, [r4, #0]
 8019f86:	bd38      	pop	{r3, r4, r5, pc}

08019f88 <on_full_input_buffer>:
 8019f88:	b570      	push	{r4, r5, r6, lr}
 8019f8a:	460c      	mov	r4, r1
 8019f8c:	4605      	mov	r5, r0
 8019f8e:	8908      	ldrh	r0, [r1, #8]
 8019f90:	682b      	ldr	r3, [r5, #0]
 8019f92:	7d26      	ldrb	r6, [r4, #20]
 8019f94:	e9d1 1200 	ldrd	r1, r2, [r1]
 8019f98:	fbb2 f2f0 	udiv	r2, r2, r0
 8019f9c:	eba3 0c01 	sub.w	ip, r3, r1
 8019fa0:	fbbc fcf2 	udiv	ip, ip, r2
 8019fa4:	f10c 0c01 	add.w	ip, ip, #1
 8019fa8:	fa1f f38c 	uxth.w	r3, ip
 8019fac:	fbb3 fcf0 	udiv	ip, r3, r0
 8019fb0:	fb00 331c 	mls	r3, r0, ip, r3
 8019fb4:	b29b      	uxth	r3, r3
 8019fb6:	fb02 f303 	mul.w	r3, r2, r3
 8019fba:	1d18      	adds	r0, r3, #4
 8019fbc:	4408      	add	r0, r1
 8019fbe:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8019fc2:	b116      	cbz	r6, 8019fca <on_full_input_buffer+0x42>
 8019fc4:	2600      	movs	r6, #0
 8019fc6:	f840 6c04 	str.w	r6, [r0, #-4]
 8019fca:	2a03      	cmp	r2, #3
 8019fcc:	d801      	bhi.n	8019fd2 <on_full_input_buffer+0x4a>
 8019fce:	2001      	movs	r0, #1
 8019fd0:	bd70      	pop	{r4, r5, r6, pc}
 8019fd2:	3308      	adds	r3, #8
 8019fd4:	4628      	mov	r0, r5
 8019fd6:	3a04      	subs	r2, #4
 8019fd8:	4419      	add	r1, r3
 8019fda:	692b      	ldr	r3, [r5, #16]
 8019fdc:	f7f5 fd4c 	bl	800fa78 <ucdr_init_buffer_origin>
 8019fe0:	4628      	mov	r0, r5
 8019fe2:	4622      	mov	r2, r4
 8019fe4:	4902      	ldr	r1, [pc, #8]	; (8019ff0 <on_full_input_buffer+0x68>)
 8019fe6:	f7f5 fd23 	bl	800fa30 <ucdr_set_on_full_buffer_callback>
 8019fea:	2000      	movs	r0, #0
 8019fec:	bd70      	pop	{r4, r5, r6, pc}
 8019fee:	bf00      	nop
 8019ff0:	08019f89 	.word	0x08019f89

08019ff4 <uxr_init_input_reliable_stream>:
 8019ff4:	b510      	push	{r4, lr}
 8019ff6:	e9c0 1200 	strd	r1, r2, [r0]
 8019ffa:	2400      	movs	r4, #0
 8019ffc:	9a02      	ldr	r2, [sp, #8]
 8019ffe:	8103      	strh	r3, [r0, #8]
 801a000:	6102      	str	r2, [r0, #16]
 801a002:	7504      	strb	r4, [r0, #20]
 801a004:	b1c3      	cbz	r3, 801a038 <uxr_init_input_reliable_stream+0x44>
 801a006:	600c      	str	r4, [r1, #0]
 801a008:	8901      	ldrh	r1, [r0, #8]
 801a00a:	2901      	cmp	r1, #1
 801a00c:	d914      	bls.n	801a038 <uxr_init_input_reliable_stream+0x44>
 801a00e:	f04f 0c01 	mov.w	ip, #1
 801a012:	6843      	ldr	r3, [r0, #4]
 801a014:	f10c 0e01 	add.w	lr, ip, #1
 801a018:	fbbc f2f1 	udiv	r2, ip, r1
 801a01c:	fbb3 f3f1 	udiv	r3, r3, r1
 801a020:	fb01 c212 	mls	r2, r1, r2, ip
 801a024:	fa1f fc8e 	uxth.w	ip, lr
 801a028:	b292      	uxth	r2, r2
 801a02a:	fb02 f303 	mul.w	r3, r2, r3
 801a02e:	6802      	ldr	r2, [r0, #0]
 801a030:	50d4      	str	r4, [r2, r3]
 801a032:	8901      	ldrh	r1, [r0, #8]
 801a034:	4561      	cmp	r1, ip
 801a036:	d8ec      	bhi.n	801a012 <uxr_init_input_reliable_stream+0x1e>
 801a038:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a03c:	60c3      	str	r3, [r0, #12]
 801a03e:	bd10      	pop	{r4, pc}

0801a040 <uxr_reset_input_reliable_stream>:
 801a040:	8901      	ldrh	r1, [r0, #8]
 801a042:	b1d9      	cbz	r1, 801a07c <uxr_reset_input_reliable_stream+0x3c>
 801a044:	b510      	push	{r4, lr}
 801a046:	f04f 0e00 	mov.w	lr, #0
 801a04a:	46f4      	mov	ip, lr
 801a04c:	4674      	mov	r4, lr
 801a04e:	6843      	ldr	r3, [r0, #4]
 801a050:	f10e 0e01 	add.w	lr, lr, #1
 801a054:	fbbc f2f1 	udiv	r2, ip, r1
 801a058:	fbb3 f3f1 	udiv	r3, r3, r1
 801a05c:	fb01 c212 	mls	r2, r1, r2, ip
 801a060:	fa1f fc8e 	uxth.w	ip, lr
 801a064:	b292      	uxth	r2, r2
 801a066:	fb02 f303 	mul.w	r3, r2, r3
 801a06a:	6802      	ldr	r2, [r0, #0]
 801a06c:	50d4      	str	r4, [r2, r3]
 801a06e:	8901      	ldrh	r1, [r0, #8]
 801a070:	4561      	cmp	r1, ip
 801a072:	d8ec      	bhi.n	801a04e <uxr_reset_input_reliable_stream+0xe>
 801a074:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a078:	60c3      	str	r3, [r0, #12]
 801a07a:	bd10      	pop	{r4, pc}
 801a07c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a080:	60c3      	str	r3, [r0, #12]
 801a082:	4770      	bx	lr

0801a084 <uxr_receive_reliable_message>:
 801a084:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a088:	4604      	mov	r4, r0
 801a08a:	460d      	mov	r5, r1
 801a08c:	8901      	ldrh	r1, [r0, #8]
 801a08e:	4617      	mov	r7, r2
 801a090:	8980      	ldrh	r0, [r0, #12]
 801a092:	4698      	mov	r8, r3
 801a094:	f000 fcb0 	bl	801a9f8 <uxr_seq_num_add>
 801a098:	4629      	mov	r1, r5
 801a09a:	4606      	mov	r6, r0
 801a09c:	89a0      	ldrh	r0, [r4, #12]
 801a09e:	f000 fcb3 	bl	801aa08 <uxr_seq_num_cmp>
 801a0a2:	2800      	cmp	r0, #0
 801a0a4:	db0a      	blt.n	801a0bc <uxr_receive_reliable_message+0x38>
 801a0a6:	2600      	movs	r6, #0
 801a0a8:	4629      	mov	r1, r5
 801a0aa:	89e0      	ldrh	r0, [r4, #14]
 801a0ac:	f000 fcac 	bl	801aa08 <uxr_seq_num_cmp>
 801a0b0:	2800      	cmp	r0, #0
 801a0b2:	da00      	bge.n	801a0b6 <uxr_receive_reliable_message+0x32>
 801a0b4:	81e5      	strh	r5, [r4, #14]
 801a0b6:	4630      	mov	r0, r6
 801a0b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a0bc:	4630      	mov	r0, r6
 801a0be:	4629      	mov	r1, r5
 801a0c0:	f000 fca2 	bl	801aa08 <uxr_seq_num_cmp>
 801a0c4:	2800      	cmp	r0, #0
 801a0c6:	dbee      	blt.n	801a0a6 <uxr_receive_reliable_message+0x22>
 801a0c8:	6923      	ldr	r3, [r4, #16]
 801a0ca:	4638      	mov	r0, r7
 801a0cc:	4798      	blx	r3
 801a0ce:	4681      	mov	r9, r0
 801a0d0:	2101      	movs	r1, #1
 801a0d2:	89a0      	ldrh	r0, [r4, #12]
 801a0d4:	f000 fc90 	bl	801a9f8 <uxr_seq_num_add>
 801a0d8:	f1b9 0f00 	cmp.w	r9, #0
 801a0dc:	bf08      	it	eq
 801a0de:	4285      	cmpeq	r5, r0
 801a0e0:	bf0c      	ite	eq
 801a0e2:	2601      	moveq	r6, #1
 801a0e4:	2600      	movne	r6, #0
 801a0e6:	d104      	bne.n	801a0f2 <uxr_receive_reliable_message+0x6e>
 801a0e8:	2300      	movs	r3, #0
 801a0ea:	9a08      	ldr	r2, [sp, #32]
 801a0ec:	81a0      	strh	r0, [r4, #12]
 801a0ee:	7013      	strb	r3, [r2, #0]
 801a0f0:	e7da      	b.n	801a0a8 <uxr_receive_reliable_message+0x24>
 801a0f2:	8922      	ldrh	r2, [r4, #8]
 801a0f4:	6863      	ldr	r3, [r4, #4]
 801a0f6:	fbb5 f0f2 	udiv	r0, r5, r2
 801a0fa:	fbb3 f3f2 	udiv	r3, r3, r2
 801a0fe:	fb02 5010 	mls	r0, r2, r0, r5
 801a102:	b280      	uxth	r0, r0
 801a104:	fb03 f000 	mul.w	r0, r3, r0
 801a108:	6823      	ldr	r3, [r4, #0]
 801a10a:	3004      	adds	r0, #4
 801a10c:	4418      	add	r0, r3
 801a10e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801a112:	2b00      	cmp	r3, #0
 801a114:	d1c7      	bne.n	801a0a6 <uxr_receive_reliable_message+0x22>
 801a116:	4639      	mov	r1, r7
 801a118:	4642      	mov	r2, r8
 801a11a:	f001 faa8 	bl	801b66e <memcpy>
 801a11e:	8921      	ldrh	r1, [r4, #8]
 801a120:	6863      	ldr	r3, [r4, #4]
 801a122:	fbb5 f2f1 	udiv	r2, r5, r1
 801a126:	fbb3 f3f1 	udiv	r3, r3, r1
 801a12a:	fb01 5212 	mls	r2, r1, r2, r5
 801a12e:	b292      	uxth	r2, r2
 801a130:	fb02 f303 	mul.w	r3, r2, r3
 801a134:	6822      	ldr	r2, [r4, #0]
 801a136:	f842 8003 	str.w	r8, [r2, r3]
 801a13a:	2301      	movs	r3, #1
 801a13c:	9a08      	ldr	r2, [sp, #32]
 801a13e:	7013      	strb	r3, [r2, #0]
 801a140:	f1b9 0f00 	cmp.w	r9, #0
 801a144:	d0af      	beq.n	801a0a6 <uxr_receive_reliable_message+0x22>
 801a146:	89a6      	ldrh	r6, [r4, #12]
 801a148:	2101      	movs	r1, #1
 801a14a:	4630      	mov	r0, r6
 801a14c:	f000 fc54 	bl	801a9f8 <uxr_seq_num_add>
 801a150:	8921      	ldrh	r1, [r4, #8]
 801a152:	6863      	ldr	r3, [r4, #4]
 801a154:	4606      	mov	r6, r0
 801a156:	fbb0 f2f1 	udiv	r2, r0, r1
 801a15a:	fbb3 f3f1 	udiv	r3, r3, r1
 801a15e:	fb01 0212 	mls	r2, r1, r2, r0
 801a162:	6820      	ldr	r0, [r4, #0]
 801a164:	b292      	uxth	r2, r2
 801a166:	fb02 f303 	mul.w	r3, r2, r3
 801a16a:	3304      	adds	r3, #4
 801a16c:	4418      	add	r0, r3
 801a16e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801a172:	2b00      	cmp	r3, #0
 801a174:	d097      	beq.n	801a0a6 <uxr_receive_reliable_message+0x22>
 801a176:	6923      	ldr	r3, [r4, #16]
 801a178:	4798      	blx	r3
 801a17a:	2802      	cmp	r0, #2
 801a17c:	d002      	beq.n	801a184 <uxr_receive_reliable_message+0x100>
 801a17e:	2801      	cmp	r0, #1
 801a180:	d0e2      	beq.n	801a148 <uxr_receive_reliable_message+0xc4>
 801a182:	e790      	b.n	801a0a6 <uxr_receive_reliable_message+0x22>
 801a184:	2601      	movs	r6, #1
 801a186:	e78f      	b.n	801a0a8 <uxr_receive_reliable_message+0x24>

0801a188 <uxr_next_input_reliable_buffer_available>:
 801a188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a18c:	4604      	mov	r4, r0
 801a18e:	460f      	mov	r7, r1
 801a190:	8980      	ldrh	r0, [r0, #12]
 801a192:	2101      	movs	r1, #1
 801a194:	4690      	mov	r8, r2
 801a196:	f000 fc2f 	bl	801a9f8 <uxr_seq_num_add>
 801a19a:	8922      	ldrh	r2, [r4, #8]
 801a19c:	6866      	ldr	r6, [r4, #4]
 801a19e:	fbb0 f3f2 	udiv	r3, r0, r2
 801a1a2:	fbb6 f6f2 	udiv	r6, r6, r2
 801a1a6:	fb02 0313 	mls	r3, r2, r3, r0
 801a1aa:	b29b      	uxth	r3, r3
 801a1ac:	fb03 f606 	mul.w	r6, r3, r6
 801a1b0:	6823      	ldr	r3, [r4, #0]
 801a1b2:	3604      	adds	r6, #4
 801a1b4:	441e      	add	r6, r3
 801a1b6:	f856 9c04 	ldr.w	r9, [r6, #-4]
 801a1ba:	f1b9 0f00 	cmp.w	r9, #0
 801a1be:	d023      	beq.n	801a208 <uxr_next_input_reliable_buffer_available+0x80>
 801a1c0:	4605      	mov	r5, r0
 801a1c2:	6923      	ldr	r3, [r4, #16]
 801a1c4:	4630      	mov	r0, r6
 801a1c6:	4798      	blx	r3
 801a1c8:	4682      	mov	sl, r0
 801a1ca:	b300      	cbz	r0, 801a20e <uxr_next_input_reliable_buffer_available+0x86>
 801a1cc:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 801a1d0:	2101      	movs	r1, #1
 801a1d2:	4650      	mov	r0, sl
 801a1d4:	f000 fc10 	bl	801a9f8 <uxr_seq_num_add>
 801a1d8:	8921      	ldrh	r1, [r4, #8]
 801a1da:	4682      	mov	sl, r0
 801a1dc:	6863      	ldr	r3, [r4, #4]
 801a1de:	6820      	ldr	r0, [r4, #0]
 801a1e0:	fbba f2f1 	udiv	r2, sl, r1
 801a1e4:	fbb3 f3f1 	udiv	r3, r3, r1
 801a1e8:	fb01 a212 	mls	r2, r1, r2, sl
 801a1ec:	b292      	uxth	r2, r2
 801a1ee:	fb02 f303 	mul.w	r3, r2, r3
 801a1f2:	3304      	adds	r3, #4
 801a1f4:	4418      	add	r0, r3
 801a1f6:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801a1fa:	b12b      	cbz	r3, 801a208 <uxr_next_input_reliable_buffer_available+0x80>
 801a1fc:	6923      	ldr	r3, [r4, #16]
 801a1fe:	4798      	blx	r3
 801a200:	2802      	cmp	r0, #2
 801a202:	d01b      	beq.n	801a23c <uxr_next_input_reliable_buffer_available+0xb4>
 801a204:	2801      	cmp	r0, #1
 801a206:	d0e3      	beq.n	801a1d0 <uxr_next_input_reliable_buffer_available+0x48>
 801a208:	2000      	movs	r0, #0
 801a20a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a20e:	464a      	mov	r2, r9
 801a210:	4631      	mov	r1, r6
 801a212:	4638      	mov	r0, r7
 801a214:	f7f5 fc38 	bl	800fa88 <ucdr_init_buffer>
 801a218:	8921      	ldrh	r1, [r4, #8]
 801a21a:	6863      	ldr	r3, [r4, #4]
 801a21c:	2001      	movs	r0, #1
 801a21e:	fbb5 f2f1 	udiv	r2, r5, r1
 801a222:	fbb3 f3f1 	udiv	r3, r3, r1
 801a226:	fb01 5212 	mls	r2, r1, r2, r5
 801a22a:	b292      	uxth	r2, r2
 801a22c:	fb02 f303 	mul.w	r3, r2, r3
 801a230:	6822      	ldr	r2, [r4, #0]
 801a232:	f842 a003 	str.w	sl, [r2, r3]
 801a236:	81a5      	strh	r5, [r4, #12]
 801a238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a23c:	8920      	ldrh	r0, [r4, #8]
 801a23e:	eb06 0108 	add.w	r1, r6, r8
 801a242:	6863      	ldr	r3, [r4, #4]
 801a244:	eba9 0208 	sub.w	r2, r9, r8
 801a248:	fbb5 f6f0 	udiv	r6, r5, r0
 801a24c:	fbb3 f3f0 	udiv	r3, r3, r0
 801a250:	fb00 5516 	mls	r5, r0, r6, r5
 801a254:	2000      	movs	r0, #0
 801a256:	b2ad      	uxth	r5, r5
 801a258:	fb03 f505 	mul.w	r5, r3, r5
 801a25c:	6823      	ldr	r3, [r4, #0]
 801a25e:	5158      	str	r0, [r3, r5]
 801a260:	4638      	mov	r0, r7
 801a262:	f7f5 fc11 	bl	800fa88 <ucdr_init_buffer>
 801a266:	4638      	mov	r0, r7
 801a268:	4622      	mov	r2, r4
 801a26a:	4903      	ldr	r1, [pc, #12]	; (801a278 <uxr_next_input_reliable_buffer_available+0xf0>)
 801a26c:	f7f5 fbe0 	bl	800fa30 <ucdr_set_on_full_buffer_callback>
 801a270:	2001      	movs	r0, #1
 801a272:	f8a4 a00c 	strh.w	sl, [r4, #12]
 801a276:	e7c8      	b.n	801a20a <uxr_next_input_reliable_buffer_available+0x82>
 801a278:	08019f89 	.word	0x08019f89

0801a27c <uxr_process_heartbeat>:
 801a27c:	b538      	push	{r3, r4, r5, lr}
 801a27e:	4611      	mov	r1, r2
 801a280:	4604      	mov	r4, r0
 801a282:	89c0      	ldrh	r0, [r0, #14]
 801a284:	4615      	mov	r5, r2
 801a286:	f000 fbbf 	bl	801aa08 <uxr_seq_num_cmp>
 801a28a:	2800      	cmp	r0, #0
 801a28c:	bfb8      	it	lt
 801a28e:	81e5      	strhlt	r5, [r4, #14]
 801a290:	bd38      	pop	{r3, r4, r5, pc}
 801a292:	bf00      	nop

0801a294 <uxr_compute_acknack>:
 801a294:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a298:	8903      	ldrh	r3, [r0, #8]
 801a29a:	4604      	mov	r4, r0
 801a29c:	460f      	mov	r7, r1
 801a29e:	8985      	ldrh	r5, [r0, #12]
 801a2a0:	b1db      	cbz	r3, 801a2da <uxr_compute_acknack+0x46>
 801a2a2:	4628      	mov	r0, r5
 801a2a4:	2601      	movs	r6, #1
 801a2a6:	e004      	b.n	801a2b2 <uxr_compute_acknack+0x1e>
 801a2a8:	4566      	cmp	r6, ip
 801a2aa:	f106 0601 	add.w	r6, r6, #1
 801a2ae:	d214      	bcs.n	801a2da <uxr_compute_acknack+0x46>
 801a2b0:	89a0      	ldrh	r0, [r4, #12]
 801a2b2:	b2b1      	uxth	r1, r6
 801a2b4:	f000 fba0 	bl	801a9f8 <uxr_seq_num_add>
 801a2b8:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801a2bc:	fbb0 f2fc 	udiv	r2, r0, ip
 801a2c0:	e9d4 1300 	ldrd	r1, r3, [r4]
 801a2c4:	fb0c 0212 	mls	r2, ip, r2, r0
 801a2c8:	fbb3 f3fc 	udiv	r3, r3, ip
 801a2cc:	b292      	uxth	r2, r2
 801a2ce:	fb02 f303 	mul.w	r3, r2, r3
 801a2d2:	58cb      	ldr	r3, [r1, r3]
 801a2d4:	2b00      	cmp	r3, #0
 801a2d6:	d1e7      	bne.n	801a2a8 <uxr_compute_acknack+0x14>
 801a2d8:	4605      	mov	r5, r0
 801a2da:	803d      	strh	r5, [r7, #0]
 801a2dc:	2101      	movs	r1, #1
 801a2de:	89e6      	ldrh	r6, [r4, #14]
 801a2e0:	4628      	mov	r0, r5
 801a2e2:	f000 fb8d 	bl	801aa00 <uxr_seq_num_sub>
 801a2e6:	4601      	mov	r1, r0
 801a2e8:	4630      	mov	r0, r6
 801a2ea:	f000 fb89 	bl	801aa00 <uxr_seq_num_sub>
 801a2ee:	4606      	mov	r6, r0
 801a2f0:	b328      	cbz	r0, 801a33e <uxr_compute_acknack+0xaa>
 801a2f2:	f04f 0900 	mov.w	r9, #0
 801a2f6:	f04f 0801 	mov.w	r8, #1
 801a2fa:	464d      	mov	r5, r9
 801a2fc:	fa1f f189 	uxth.w	r1, r9
 801a300:	8838      	ldrh	r0, [r7, #0]
 801a302:	f000 fb79 	bl	801a9f8 <uxr_seq_num_add>
 801a306:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801a30a:	6861      	ldr	r1, [r4, #4]
 801a30c:	fa08 fe09 	lsl.w	lr, r8, r9
 801a310:	6822      	ldr	r2, [r4, #0]
 801a312:	f109 0901 	add.w	r9, r9, #1
 801a316:	ea4e 0e05 	orr.w	lr, lr, r5
 801a31a:	fbb0 f3fc 	udiv	r3, r0, ip
 801a31e:	fbb1 f1fc 	udiv	r1, r1, ip
 801a322:	fb03 001c 	mls	r0, r3, ip, r0
 801a326:	b283      	uxth	r3, r0
 801a328:	fb01 f303 	mul.w	r3, r1, r3
 801a32c:	58d3      	ldr	r3, [r2, r3]
 801a32e:	b90b      	cbnz	r3, 801a334 <uxr_compute_acknack+0xa0>
 801a330:	fa1f f58e 	uxth.w	r5, lr
 801a334:	454e      	cmp	r6, r9
 801a336:	d1e1      	bne.n	801a2fc <uxr_compute_acknack+0x68>
 801a338:	4628      	mov	r0, r5
 801a33a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a33e:	4605      	mov	r5, r0
 801a340:	4628      	mov	r0, r5
 801a342:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a346:	bf00      	nop

0801a348 <uxr_init_output_best_effort_stream>:
 801a348:	f64f 7cff 	movw	ip, #65535	; 0xffff
 801a34c:	6001      	str	r1, [r0, #0]
 801a34e:	7303      	strb	r3, [r0, #12]
 801a350:	f8a0 c00e 	strh.w	ip, [r0, #14]
 801a354:	e9c0 3201 	strd	r3, r2, [r0, #4]
 801a358:	4770      	bx	lr
 801a35a:	bf00      	nop

0801a35c <uxr_reset_output_best_effort_stream>:
 801a35c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a360:	7b03      	ldrb	r3, [r0, #12]
 801a362:	81c2      	strh	r2, [r0, #14]
 801a364:	6043      	str	r3, [r0, #4]
 801a366:	4770      	bx	lr

0801a368 <uxr_prepare_best_effort_buffer_to_write>:
 801a368:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a36a:	4604      	mov	r4, r0
 801a36c:	b083      	sub	sp, #12
 801a36e:	6840      	ldr	r0, [r0, #4]
 801a370:	460d      	mov	r5, r1
 801a372:	4616      	mov	r6, r2
 801a374:	f7fd fe10 	bl	8017f98 <uxr_submessage_padding>
 801a378:	6863      	ldr	r3, [r4, #4]
 801a37a:	4418      	add	r0, r3
 801a37c:	68a3      	ldr	r3, [r4, #8]
 801a37e:	1942      	adds	r2, r0, r5
 801a380:	4293      	cmp	r3, r2
 801a382:	bf2c      	ite	cs
 801a384:	2701      	movcs	r7, #1
 801a386:	2700      	movcc	r7, #0
 801a388:	d202      	bcs.n	801a390 <uxr_prepare_best_effort_buffer_to_write+0x28>
 801a38a:	4638      	mov	r0, r7
 801a38c:	b003      	add	sp, #12
 801a38e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a390:	9000      	str	r0, [sp, #0]
 801a392:	2300      	movs	r3, #0
 801a394:	4630      	mov	r0, r6
 801a396:	6821      	ldr	r1, [r4, #0]
 801a398:	f7f5 fb64 	bl	800fa64 <ucdr_init_buffer_origin_offset>
 801a39c:	6861      	ldr	r1, [r4, #4]
 801a39e:	4638      	mov	r0, r7
 801a3a0:	4429      	add	r1, r5
 801a3a2:	6061      	str	r1, [r4, #4]
 801a3a4:	b003      	add	sp, #12
 801a3a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a3a8 <uxr_prepare_best_effort_buffer_to_send>:
 801a3a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a3ac:	4604      	mov	r4, r0
 801a3ae:	461d      	mov	r5, r3
 801a3b0:	6840      	ldr	r0, [r0, #4]
 801a3b2:	7b23      	ldrb	r3, [r4, #12]
 801a3b4:	4298      	cmp	r0, r3
 801a3b6:	bf8c      	ite	hi
 801a3b8:	2601      	movhi	r6, #1
 801a3ba:	2600      	movls	r6, #0
 801a3bc:	d802      	bhi.n	801a3c4 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 801a3be:	4630      	mov	r0, r6
 801a3c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a3c4:	4688      	mov	r8, r1
 801a3c6:	89e0      	ldrh	r0, [r4, #14]
 801a3c8:	2101      	movs	r1, #1
 801a3ca:	4617      	mov	r7, r2
 801a3cc:	f000 fb14 	bl	801a9f8 <uxr_seq_num_add>
 801a3d0:	6823      	ldr	r3, [r4, #0]
 801a3d2:	81e0      	strh	r0, [r4, #14]
 801a3d4:	8028      	strh	r0, [r5, #0]
 801a3d6:	4630      	mov	r0, r6
 801a3d8:	f8c8 3000 	str.w	r3, [r8]
 801a3dc:	6863      	ldr	r3, [r4, #4]
 801a3de:	603b      	str	r3, [r7, #0]
 801a3e0:	7b23      	ldrb	r3, [r4, #12]
 801a3e2:	6063      	str	r3, [r4, #4]
 801a3e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a3e8 <on_full_output_buffer>:
 801a3e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a3ea:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 801a3ee:	460c      	mov	r4, r1
 801a3f0:	6803      	ldr	r3, [r0, #0]
 801a3f2:	4605      	mov	r5, r0
 801a3f4:	7b26      	ldrb	r6, [r4, #12]
 801a3f6:	e9d1 1200 	ldrd	r1, r2, [r1]
 801a3fa:	fbb2 f2fc 	udiv	r2, r2, ip
 801a3fe:	eba3 0e01 	sub.w	lr, r3, r1
 801a402:	6903      	ldr	r3, [r0, #16]
 801a404:	fbbe fef2 	udiv	lr, lr, r2
 801a408:	f10e 0e01 	add.w	lr, lr, #1
 801a40c:	fa1f fe8e 	uxth.w	lr, lr
 801a410:	fbbe f7fc 	udiv	r7, lr, ip
 801a414:	fb0c ec17 	mls	ip, ip, r7, lr
 801a418:	fa1f fc8c 	uxth.w	ip, ip
 801a41c:	fb02 fc0c 	mul.w	ip, r2, ip
 801a420:	f851 200c 	ldr.w	r2, [r1, ip]
 801a424:	44b4      	add	ip, r6
 801a426:	1b92      	subs	r2, r2, r6
 801a428:	f10c 0c08 	add.w	ip, ip, #8
 801a42c:	3a04      	subs	r2, #4
 801a42e:	4461      	add	r1, ip
 801a430:	f7f5 fb22 	bl	800fa78 <ucdr_init_buffer_origin>
 801a434:	4628      	mov	r0, r5
 801a436:	4622      	mov	r2, r4
 801a438:	4902      	ldr	r1, [pc, #8]	; (801a444 <on_full_output_buffer+0x5c>)
 801a43a:	f7f5 faf9 	bl	800fa30 <ucdr_set_on_full_buffer_callback>
 801a43e:	2000      	movs	r0, #0
 801a440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a442:	bf00      	nop
 801a444:	0801a3e9 	.word	0x0801a3e9

0801a448 <uxr_init_output_reliable_stream>:
 801a448:	b530      	push	{r4, r5, lr}
 801a44a:	f89d 400c 	ldrb.w	r4, [sp, #12]
 801a44e:	8103      	strh	r3, [r0, #8]
 801a450:	7304      	strb	r4, [r0, #12]
 801a452:	e9c0 1200 	strd	r1, r2, [r0]
 801a456:	b1e3      	cbz	r3, 801a492 <uxr_init_output_reliable_stream+0x4a>
 801a458:	600c      	str	r4, [r1, #0]
 801a45a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801a45e:	f1bc 0f01 	cmp.w	ip, #1
 801a462:	d916      	bls.n	801a492 <uxr_init_output_reliable_stream+0x4a>
 801a464:	f04f 0e01 	mov.w	lr, #1
 801a468:	6843      	ldr	r3, [r0, #4]
 801a46a:	f10e 0501 	add.w	r5, lr, #1
 801a46e:	7b04      	ldrb	r4, [r0, #12]
 801a470:	6801      	ldr	r1, [r0, #0]
 801a472:	fbbe f2fc 	udiv	r2, lr, ip
 801a476:	fbb3 f3fc 	udiv	r3, r3, ip
 801a47a:	fb0c e212 	mls	r2, ip, r2, lr
 801a47e:	fa1f fe85 	uxth.w	lr, r5
 801a482:	b292      	uxth	r2, r2
 801a484:	fb02 f303 	mul.w	r3, r2, r3
 801a488:	50cc      	str	r4, [r1, r3]
 801a48a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801a48e:	45f4      	cmp	ip, lr
 801a490:	d8ea      	bhi.n	801a468 <uxr_init_output_reliable_stream+0x20>
 801a492:	4b07      	ldr	r3, [pc, #28]	; (801a4b0 <uxr_init_output_reliable_stream+0x68>)
 801a494:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a498:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801a49c:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 801a4a0:	f8c0 300e 	str.w	r3, [r0, #14]
 801a4a4:	2300      	movs	r3, #0
 801a4a6:	8242      	strh	r2, [r0, #18]
 801a4a8:	8403      	strh	r3, [r0, #32]
 801a4aa:	e9c0 4506 	strd	r4, r5, [r0, #24]
 801a4ae:	bd30      	pop	{r4, r5, pc}
 801a4b0:	ffff0000 	.word	0xffff0000
 801a4b4:	00000000 	.word	0x00000000

0801a4b8 <uxr_reset_output_reliable_stream>:
 801a4b8:	8901      	ldrh	r1, [r0, #8]
 801a4ba:	b510      	push	{r4, lr}
 801a4bc:	b1b1      	cbz	r1, 801a4ec <uxr_reset_output_reliable_stream+0x34>
 801a4be:	f04f 0e00 	mov.w	lr, #0
 801a4c2:	46f4      	mov	ip, lr
 801a4c4:	6843      	ldr	r3, [r0, #4]
 801a4c6:	f10e 0e01 	add.w	lr, lr, #1
 801a4ca:	7b04      	ldrb	r4, [r0, #12]
 801a4cc:	fbbc f2f1 	udiv	r2, ip, r1
 801a4d0:	fbb3 f3f1 	udiv	r3, r3, r1
 801a4d4:	fb01 c212 	mls	r2, r1, r2, ip
 801a4d8:	fa1f fc8e 	uxth.w	ip, lr
 801a4dc:	b292      	uxth	r2, r2
 801a4de:	fb02 f303 	mul.w	r3, r2, r3
 801a4e2:	6802      	ldr	r2, [r0, #0]
 801a4e4:	50d4      	str	r4, [r2, r3]
 801a4e6:	8901      	ldrh	r1, [r0, #8]
 801a4e8:	4561      	cmp	r1, ip
 801a4ea:	d8eb      	bhi.n	801a4c4 <uxr_reset_output_reliable_stream+0xc>
 801a4ec:	4b08      	ldr	r3, [pc, #32]	; (801a510 <uxr_reset_output_reliable_stream+0x58>)
 801a4ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a4f2:	ed9f 7b05 	vldr	d7, [pc, #20]	; 801a508 <uxr_reset_output_reliable_stream+0x50>
 801a4f6:	f8c0 300e 	str.w	r3, [r0, #14]
 801a4fa:	2300      	movs	r3, #0
 801a4fc:	8242      	strh	r2, [r0, #18]
 801a4fe:	8403      	strh	r3, [r0, #32]
 801a500:	ed80 7b06 	vstr	d7, [r0, #24]
 801a504:	bd10      	pop	{r4, pc}
 801a506:	bf00      	nop
 801a508:	ffffffff 	.word	0xffffffff
 801a50c:	7fffffff 	.word	0x7fffffff
 801a510:	ffff0000 	.word	0xffff0000

0801a514 <uxr_prepare_reliable_buffer_to_write>:
 801a514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a518:	4604      	mov	r4, r0
 801a51a:	b091      	sub	sp, #68	; 0x44
 801a51c:	8900      	ldrh	r0, [r0, #8]
 801a51e:	468b      	mov	fp, r1
 801a520:	89e6      	ldrh	r6, [r4, #14]
 801a522:	9204      	str	r2, [sp, #16]
 801a524:	6865      	ldr	r5, [r4, #4]
 801a526:	6823      	ldr	r3, [r4, #0]
 801a528:	f894 900c 	ldrb.w	r9, [r4, #12]
 801a52c:	fbb6 f2f0 	udiv	r2, r6, r0
 801a530:	fbb5 f5f0 	udiv	r5, r5, r0
 801a534:	fb00 6212 	mls	r2, r0, r2, r6
 801a538:	1f2f      	subs	r7, r5, #4
 801a53a:	b292      	uxth	r2, r2
 801a53c:	fb05 3202 	mla	r2, r5, r2, r3
 801a540:	1d11      	adds	r1, r2, #4
 801a542:	f8d2 8000 	ldr.w	r8, [r2]
 801a546:	9103      	str	r1, [sp, #12]
 801a548:	2800      	cmp	r0, #0
 801a54a:	f000 814a 	beq.w	801a7e2 <uxr_prepare_reliable_buffer_to_write+0x2ce>
 801a54e:	f04f 0c00 	mov.w	ip, #0
 801a552:	46e2      	mov	sl, ip
 801a554:	4661      	mov	r1, ip
 801a556:	f10c 0c01 	add.w	ip, ip, #1
 801a55a:	fbb1 f2f0 	udiv	r2, r1, r0
 801a55e:	fb00 1212 	mls	r2, r0, r2, r1
 801a562:	fa1f f18c 	uxth.w	r1, ip
 801a566:	b292      	uxth	r2, r2
 801a568:	fb05 f202 	mul.w	r2, r5, r2
 801a56c:	589a      	ldr	r2, [r3, r2]
 801a56e:	454a      	cmp	r2, r9
 801a570:	d103      	bne.n	801a57a <uxr_prepare_reliable_buffer_to_write+0x66>
 801a572:	f10a 0a01 	add.w	sl, sl, #1
 801a576:	fa1f fa8a 	uxth.w	sl, sl
 801a57a:	4281      	cmp	r1, r0
 801a57c:	d3eb      	bcc.n	801a556 <uxr_prepare_reliable_buffer_to_write+0x42>
 801a57e:	4640      	mov	r0, r8
 801a580:	2104      	movs	r1, #4
 801a582:	f8cd a014 	str.w	sl, [sp, #20]
 801a586:	f7f5 fa83 	bl	800fa90 <ucdr_alignment>
 801a58a:	4480      	add	r8, r0
 801a58c:	eb08 020b 	add.w	r2, r8, fp
 801a590:	42ba      	cmp	r2, r7
 801a592:	f240 80ca 	bls.w	801a72a <uxr_prepare_reliable_buffer_to_write+0x216>
 801a596:	7b22      	ldrb	r2, [r4, #12]
 801a598:	445a      	add	r2, fp
 801a59a:	42ba      	cmp	r2, r7
 801a59c:	f240 80b2 	bls.w	801a704 <uxr_prepare_reliable_buffer_to_write+0x1f0>
 801a5a0:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 801a5a4:	b2bb      	uxth	r3, r7
 801a5a6:	eba2 0209 	sub.w	r2, r2, r9
 801a5aa:	441a      	add	r2, r3
 801a5ac:	b292      	uxth	r2, r2
 801a5ae:	fb0a f902 	mul.w	r9, sl, r2
 801a5b2:	9205      	str	r2, [sp, #20]
 801a5b4:	45d9      	cmp	r9, fp
 801a5b6:	9206      	str	r2, [sp, #24]
 801a5b8:	f0c0 80b3 	bcc.w	801a722 <uxr_prepare_reliable_buffer_to_write+0x20e>
 801a5bc:	f108 0204 	add.w	r2, r8, #4
 801a5c0:	42ba      	cmp	r2, r7
 801a5c2:	f080 80da 	bcs.w	801a77a <uxr_prepare_reliable_buffer_to_write+0x266>
 801a5c6:	f1a3 0904 	sub.w	r9, r3, #4
 801a5ca:	9b05      	ldr	r3, [sp, #20]
 801a5cc:	eba9 0908 	sub.w	r9, r9, r8
 801a5d0:	fa1f f989 	uxth.w	r9, r9
 801a5d4:	ebab 0b09 	sub.w	fp, fp, r9
 801a5d8:	fbbb f2f3 	udiv	r2, fp, r3
 801a5dc:	fb03 b312 	mls	r3, r3, r2, fp
 801a5e0:	2b00      	cmp	r3, #0
 801a5e2:	f040 80c4 	bne.w	801a76e <uxr_prepare_reliable_buffer_to_write+0x25a>
 801a5e6:	b293      	uxth	r3, r2
 801a5e8:	4553      	cmp	r3, sl
 801a5ea:	f200 809a 	bhi.w	801a722 <uxr_prepare_reliable_buffer_to_write+0x20e>
 801a5ee:	2b00      	cmp	r3, #0
 801a5f0:	f000 80f9 	beq.w	801a7e6 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 801a5f4:	f8cd 801c 	str.w	r8, [sp, #28]
 801a5f8:	f04f 0a00 	mov.w	sl, #0
 801a5fc:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801a600:	f10d 0b20 	add.w	fp, sp, #32
 801a604:	9505      	str	r5, [sp, #20]
 801a606:	461d      	mov	r5, r3
 801a608:	e000      	b.n	801a60c <uxr_prepare_reliable_buffer_to_write+0xf8>
 801a60a:	46c1      	mov	r9, r8
 801a60c:	8922      	ldrh	r2, [r4, #8]
 801a60e:	4658      	mov	r0, fp
 801a610:	6863      	ldr	r3, [r4, #4]
 801a612:	f10a 0a01 	add.w	sl, sl, #1
 801a616:	fbb6 f1f2 	udiv	r1, r6, r2
 801a61a:	fbb3 f3f2 	udiv	r3, r3, r2
 801a61e:	fb02 6111 	mls	r1, r2, r1, r6
 801a622:	463a      	mov	r2, r7
 801a624:	b289      	uxth	r1, r1
 801a626:	fb03 f101 	mul.w	r1, r3, r1
 801a62a:	6823      	ldr	r3, [r4, #0]
 801a62c:	3104      	adds	r1, #4
 801a62e:	4419      	add	r1, r3
 801a630:	2300      	movs	r3, #0
 801a632:	f851 cc04 	ldr.w	ip, [r1, #-4]
 801a636:	f8cd c000 	str.w	ip, [sp]
 801a63a:	f7f5 fa13 	bl	800fa64 <ucdr_init_buffer_origin_offset>
 801a63e:	464a      	mov	r2, r9
 801a640:	2300      	movs	r3, #0
 801a642:	210d      	movs	r1, #13
 801a644:	4658      	mov	r0, fp
 801a646:	f7fd fc67 	bl	8017f18 <uxr_buffer_submessage_header>
 801a64a:	8921      	ldrh	r1, [r4, #8]
 801a64c:	6863      	ldr	r3, [r4, #4]
 801a64e:	4630      	mov	r0, r6
 801a650:	fbb6 f2f1 	udiv	r2, r6, r1
 801a654:	fbb3 f3f1 	udiv	r3, r3, r1
 801a658:	fb01 6212 	mls	r2, r1, r2, r6
 801a65c:	2101      	movs	r1, #1
 801a65e:	b292      	uxth	r2, r2
 801a660:	fb02 f303 	mul.w	r3, r2, r3
 801a664:	6822      	ldr	r2, [r4, #0]
 801a666:	50d7      	str	r7, [r2, r3]
 801a668:	f000 f9c6 	bl	801a9f8 <uxr_seq_num_add>
 801a66c:	4606      	mov	r6, r0
 801a66e:	fa1f f38a 	uxth.w	r3, sl
 801a672:	429d      	cmp	r5, r3
 801a674:	d8c9      	bhi.n	801a60a <uxr_prepare_reliable_buffer_to_write+0xf6>
 801a676:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801a67a:	9d05      	ldr	r5, [sp, #20]
 801a67c:	8920      	ldrh	r0, [r4, #8]
 801a67e:	463a      	mov	r2, r7
 801a680:	6863      	ldr	r3, [r4, #4]
 801a682:	fbb6 f1f0 	udiv	r1, r6, r0
 801a686:	fbb3 f3f0 	udiv	r3, r3, r0
 801a68a:	fb00 6111 	mls	r1, r0, r1, r6
 801a68e:	4658      	mov	r0, fp
 801a690:	b289      	uxth	r1, r1
 801a692:	fb01 f303 	mul.w	r3, r1, r3
 801a696:	6821      	ldr	r1, [r4, #0]
 801a698:	3304      	adds	r3, #4
 801a69a:	4419      	add	r1, r3
 801a69c:	2300      	movs	r3, #0
 801a69e:	f851 7c04 	ldr.w	r7, [r1, #-4]
 801a6a2:	9700      	str	r7, [sp, #0]
 801a6a4:	f7f5 f9de 	bl	800fa64 <ucdr_init_buffer_origin_offset>
 801a6a8:	9f06      	ldr	r7, [sp, #24]
 801a6aa:	4658      	mov	r0, fp
 801a6ac:	2302      	movs	r3, #2
 801a6ae:	b2ba      	uxth	r2, r7
 801a6b0:	210d      	movs	r1, #13
 801a6b2:	f7fd fc31 	bl	8017f18 <uxr_buffer_submessage_header>
 801a6b6:	f108 0104 	add.w	r1, r8, #4
 801a6ba:	9b03      	ldr	r3, [sp, #12]
 801a6bc:	f1a5 0208 	sub.w	r2, r5, #8
 801a6c0:	8925      	ldrh	r5, [r4, #8]
 801a6c2:	440b      	add	r3, r1
 801a6c4:	eba2 0208 	sub.w	r2, r2, r8
 801a6c8:	fbb6 f0f5 	udiv	r0, r6, r5
 801a6cc:	4619      	mov	r1, r3
 801a6ce:	6863      	ldr	r3, [r4, #4]
 801a6d0:	fb05 6010 	mls	r0, r5, r0, r6
 801a6d4:	fbb3 f3f5 	udiv	r3, r3, r5
 801a6d8:	b280      	uxth	r0, r0
 801a6da:	6825      	ldr	r5, [r4, #0]
 801a6dc:	fb00 f303 	mul.w	r3, r0, r3
 801a6e0:	7b20      	ldrb	r0, [r4, #12]
 801a6e2:	3004      	adds	r0, #4
 801a6e4:	4438      	add	r0, r7
 801a6e6:	50e8      	str	r0, [r5, r3]
 801a6e8:	9d04      	ldr	r5, [sp, #16]
 801a6ea:	4628      	mov	r0, r5
 801a6ec:	f7f5 f9cc 	bl	800fa88 <ucdr_init_buffer>
 801a6f0:	4628      	mov	r0, r5
 801a6f2:	4622      	mov	r2, r4
 801a6f4:	493d      	ldr	r1, [pc, #244]	; (801a7ec <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 801a6f6:	f7f5 f99b 	bl	800fa30 <ucdr_set_on_full_buffer_callback>
 801a6fa:	2001      	movs	r0, #1
 801a6fc:	81e6      	strh	r6, [r4, #14]
 801a6fe:	b011      	add	sp, #68	; 0x44
 801a700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a704:	2101      	movs	r1, #1
 801a706:	89e0      	ldrh	r0, [r4, #14]
 801a708:	f000 f976 	bl	801a9f8 <uxr_seq_num_add>
 801a70c:	4605      	mov	r5, r0
 801a70e:	8921      	ldrh	r1, [r4, #8]
 801a710:	8a60      	ldrh	r0, [r4, #18]
 801a712:	f000 f971 	bl	801a9f8 <uxr_seq_num_add>
 801a716:	4601      	mov	r1, r0
 801a718:	4628      	mov	r0, r5
 801a71a:	f000 f975 	bl	801aa08 <uxr_seq_num_cmp>
 801a71e:	2800      	cmp	r0, #0
 801a720:	dd44      	ble.n	801a7ac <uxr_prepare_reliable_buffer_to_write+0x298>
 801a722:	2000      	movs	r0, #0
 801a724:	b011      	add	sp, #68	; 0x44
 801a726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a72a:	8921      	ldrh	r1, [r4, #8]
 801a72c:	8a60      	ldrh	r0, [r4, #18]
 801a72e:	9205      	str	r2, [sp, #20]
 801a730:	f000 f962 	bl	801a9f8 <uxr_seq_num_add>
 801a734:	4601      	mov	r1, r0
 801a736:	4630      	mov	r0, r6
 801a738:	f000 f966 	bl	801aa08 <uxr_seq_num_cmp>
 801a73c:	2800      	cmp	r0, #0
 801a73e:	9a05      	ldr	r2, [sp, #20]
 801a740:	dcef      	bgt.n	801a722 <uxr_prepare_reliable_buffer_to_write+0x20e>
 801a742:	8925      	ldrh	r5, [r4, #8]
 801a744:	e9d4 7300 	ldrd	r7, r3, [r4]
 801a748:	fbb6 f4f5 	udiv	r4, r6, r5
 801a74c:	fbb3 f3f5 	udiv	r3, r3, r5
 801a750:	fb05 6414 	mls	r4, r5, r4, r6
 801a754:	b2a4      	uxth	r4, r4
 801a756:	fb04 f303 	mul.w	r3, r4, r3
 801a75a:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 801a75e:	50fa      	str	r2, [r7, r3]
 801a760:	2300      	movs	r3, #0
 801a762:	f8cd 8000 	str.w	r8, [sp]
 801a766:	f7f5 f97d 	bl	800fa64 <ucdr_init_buffer_origin_offset>
 801a76a:	2001      	movs	r0, #1
 801a76c:	e7da      	b.n	801a724 <uxr_prepare_reliable_buffer_to_write+0x210>
 801a76e:	3201      	adds	r2, #1
 801a770:	9306      	str	r3, [sp, #24]
 801a772:	b293      	uxth	r3, r2
 801a774:	4553      	cmp	r3, sl
 801a776:	d8d4      	bhi.n	801a722 <uxr_prepare_reliable_buffer_to_write+0x20e>
 801a778:	e739      	b.n	801a5ee <uxr_prepare_reliable_buffer_to_write+0xda>
 801a77a:	4630      	mov	r0, r6
 801a77c:	2101      	movs	r1, #1
 801a77e:	9307      	str	r3, [sp, #28]
 801a780:	f000 f93a 	bl	801a9f8 <uxr_seq_num_add>
 801a784:	4606      	mov	r6, r0
 801a786:	8920      	ldrh	r0, [r4, #8]
 801a788:	6862      	ldr	r2, [r4, #4]
 801a78a:	fbb6 f1f0 	udiv	r1, r6, r0
 801a78e:	fbb2 f2f0 	udiv	r2, r2, r0
 801a792:	fb00 6111 	mls	r1, r0, r1, r6
 801a796:	b289      	uxth	r1, r1
 801a798:	fb01 f202 	mul.w	r2, r1, r2
 801a79c:	6821      	ldr	r1, [r4, #0]
 801a79e:	3204      	adds	r2, #4
 801a7a0:	188b      	adds	r3, r1, r2
 801a7a2:	f853 8c04 	ldr.w	r8, [r3, #-4]
 801a7a6:	9303      	str	r3, [sp, #12]
 801a7a8:	9b07      	ldr	r3, [sp, #28]
 801a7aa:	e70c      	b.n	801a5c6 <uxr_prepare_reliable_buffer_to_write+0xb2>
 801a7ac:	8921      	ldrh	r1, [r4, #8]
 801a7ae:	6863      	ldr	r3, [r4, #4]
 801a7b0:	9804      	ldr	r0, [sp, #16]
 801a7b2:	fbb5 f2f1 	udiv	r2, r5, r1
 801a7b6:	fbb3 f3f1 	udiv	r3, r3, r1
 801a7ba:	fb01 5212 	mls	r2, r1, r2, r5
 801a7be:	6821      	ldr	r1, [r4, #0]
 801a7c0:	b292      	uxth	r2, r2
 801a7c2:	fb02 f303 	mul.w	r3, r2, r3
 801a7c6:	7b22      	ldrb	r2, [r4, #12]
 801a7c8:	3304      	adds	r3, #4
 801a7ca:	445a      	add	r2, fp
 801a7cc:	4419      	add	r1, r3
 801a7ce:	f841 2c04 	str.w	r2, [r1, #-4]
 801a7d2:	7b23      	ldrb	r3, [r4, #12]
 801a7d4:	9300      	str	r3, [sp, #0]
 801a7d6:	2300      	movs	r3, #0
 801a7d8:	f7f5 f944 	bl	800fa64 <ucdr_init_buffer_origin_offset>
 801a7dc:	2001      	movs	r0, #1
 801a7de:	81e5      	strh	r5, [r4, #14]
 801a7e0:	e7a0      	b.n	801a724 <uxr_prepare_reliable_buffer_to_write+0x210>
 801a7e2:	4682      	mov	sl, r0
 801a7e4:	e6cb      	b.n	801a57e <uxr_prepare_reliable_buffer_to_write+0x6a>
 801a7e6:	f10d 0b20 	add.w	fp, sp, #32
 801a7ea:	e747      	b.n	801a67c <uxr_prepare_reliable_buffer_to_write+0x168>
 801a7ec:	0801a3e9 	.word	0x0801a3e9

0801a7f0 <uxr_prepare_next_reliable_buffer_to_send>:
 801a7f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a7f2:	4604      	mov	r4, r0
 801a7f4:	461d      	mov	r5, r3
 801a7f6:	460f      	mov	r7, r1
 801a7f8:	8a00      	ldrh	r0, [r0, #16]
 801a7fa:	2101      	movs	r1, #1
 801a7fc:	4616      	mov	r6, r2
 801a7fe:	f000 f8fb 	bl	801a9f8 <uxr_seq_num_add>
 801a802:	8028      	strh	r0, [r5, #0]
 801a804:	8922      	ldrh	r2, [r4, #8]
 801a806:	6863      	ldr	r3, [r4, #4]
 801a808:	fbb0 f1f2 	udiv	r1, r0, r2
 801a80c:	fbb3 f3f2 	udiv	r3, r3, r2
 801a810:	fb02 0c11 	mls	ip, r2, r1, r0
 801a814:	89e1      	ldrh	r1, [r4, #14]
 801a816:	fa1f fc8c 	uxth.w	ip, ip
 801a81a:	fb0c fc03 	mul.w	ip, ip, r3
 801a81e:	6823      	ldr	r3, [r4, #0]
 801a820:	f10c 0c04 	add.w	ip, ip, #4
 801a824:	4463      	add	r3, ip
 801a826:	603b      	str	r3, [r7, #0]
 801a828:	6823      	ldr	r3, [r4, #0]
 801a82a:	449c      	add	ip, r3
 801a82c:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 801a830:	6033      	str	r3, [r6, #0]
 801a832:	f000 f8e9 	bl	801aa08 <uxr_seq_num_cmp>
 801a836:	2800      	cmp	r0, #0
 801a838:	dd01      	ble.n	801a83e <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 801a83a:	2000      	movs	r0, #0
 801a83c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a83e:	7b23      	ldrb	r3, [r4, #12]
 801a840:	6832      	ldr	r2, [r6, #0]
 801a842:	429a      	cmp	r2, r3
 801a844:	d9f9      	bls.n	801a83a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801a846:	8a61      	ldrh	r1, [r4, #18]
 801a848:	8a20      	ldrh	r0, [r4, #16]
 801a84a:	f000 f8d9 	bl	801aa00 <uxr_seq_num_sub>
 801a84e:	8923      	ldrh	r3, [r4, #8]
 801a850:	4283      	cmp	r3, r0
 801a852:	d0f2      	beq.n	801a83a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801a854:	8828      	ldrh	r0, [r5, #0]
 801a856:	89e3      	ldrh	r3, [r4, #14]
 801a858:	8220      	strh	r0, [r4, #16]
 801a85a:	4298      	cmp	r0, r3
 801a85c:	d001      	beq.n	801a862 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 801a85e:	2001      	movs	r0, #1
 801a860:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a862:	2101      	movs	r1, #1
 801a864:	f000 f8c8 	bl	801a9f8 <uxr_seq_num_add>
 801a868:	4603      	mov	r3, r0
 801a86a:	2001      	movs	r0, #1
 801a86c:	81e3      	strh	r3, [r4, #14]
 801a86e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801a870 <uxr_update_output_stream_heartbeat_timestamp>:
 801a870:	b570      	push	{r4, r5, r6, lr}
 801a872:	8a01      	ldrh	r1, [r0, #16]
 801a874:	4604      	mov	r4, r0
 801a876:	8a40      	ldrh	r0, [r0, #18]
 801a878:	4615      	mov	r5, r2
 801a87a:	461e      	mov	r6, r3
 801a87c:	f000 f8c4 	bl	801aa08 <uxr_seq_num_cmp>
 801a880:	2800      	cmp	r0, #0
 801a882:	db07      	blt.n	801a894 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 801a884:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a888:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801a88c:	2000      	movs	r0, #0
 801a88e:	e9c4 2306 	strd	r2, r3, [r4, #24]
 801a892:	bd70      	pop	{r4, r5, r6, pc}
 801a894:	f894 0020 	ldrb.w	r0, [r4, #32]
 801a898:	b940      	cbnz	r0, 801a8ac <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 801a89a:	2301      	movs	r3, #1
 801a89c:	f884 3020 	strb.w	r3, [r4, #32]
 801a8a0:	3564      	adds	r5, #100	; 0x64
 801a8a2:	f146 0600 	adc.w	r6, r6, #0
 801a8a6:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801a8aa:	bd70      	pop	{r4, r5, r6, pc}
 801a8ac:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 801a8b0:	4295      	cmp	r5, r2
 801a8b2:	eb76 0303 	sbcs.w	r3, r6, r3
 801a8b6:	db04      	blt.n	801a8c2 <uxr_update_output_stream_heartbeat_timestamp+0x52>
 801a8b8:	1c43      	adds	r3, r0, #1
 801a8ba:	2001      	movs	r0, #1
 801a8bc:	f884 3020 	strb.w	r3, [r4, #32]
 801a8c0:	e7ee      	b.n	801a8a0 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 801a8c2:	2000      	movs	r0, #0
 801a8c4:	e7ec      	b.n	801a8a0 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 801a8c6:	bf00      	nop

0801a8c8 <uxr_begin_output_nack_buffer_it>:
 801a8c8:	8a40      	ldrh	r0, [r0, #18]
 801a8ca:	4770      	bx	lr

0801a8cc <uxr_next_reliable_nack_buffer_to_send>:
 801a8cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a8d0:	f890 7021 	ldrb.w	r7, [r0, #33]	; 0x21
 801a8d4:	b197      	cbz	r7, 801a8fc <uxr_next_reliable_nack_buffer_to_send+0x30>
 801a8d6:	4680      	mov	r8, r0
 801a8d8:	460d      	mov	r5, r1
 801a8da:	4616      	mov	r6, r2
 801a8dc:	461c      	mov	r4, r3
 801a8de:	8818      	ldrh	r0, [r3, #0]
 801a8e0:	2101      	movs	r1, #1
 801a8e2:	f000 f889 	bl	801a9f8 <uxr_seq_num_add>
 801a8e6:	8020      	strh	r0, [r4, #0]
 801a8e8:	f8b8 1010 	ldrh.w	r1, [r8, #16]
 801a8ec:	f000 f88c 	bl	801aa08 <uxr_seq_num_cmp>
 801a8f0:	2800      	cmp	r0, #0
 801a8f2:	dd06      	ble.n	801a902 <uxr_next_reliable_nack_buffer_to_send+0x36>
 801a8f4:	2300      	movs	r3, #0
 801a8f6:	461f      	mov	r7, r3
 801a8f8:	f888 3021 	strb.w	r3, [r8, #33]	; 0x21
 801a8fc:	4638      	mov	r0, r7
 801a8fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a902:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 801a906:	8820      	ldrh	r0, [r4, #0]
 801a908:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801a90c:	fbb0 f3f2 	udiv	r3, r0, r2
 801a910:	fbb1 fcf2 	udiv	ip, r1, r2
 801a914:	fb02 0313 	mls	r3, r2, r3, r0
 801a918:	b29b      	uxth	r3, r3
 801a91a:	fb03 fc0c 	mul.w	ip, r3, ip
 801a91e:	f8d8 3000 	ldr.w	r3, [r8]
 801a922:	f10c 0c04 	add.w	ip, ip, #4
 801a926:	4463      	add	r3, ip
 801a928:	602b      	str	r3, [r5, #0]
 801a92a:	f8d8 3000 	ldr.w	r3, [r8]
 801a92e:	4463      	add	r3, ip
 801a930:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801a934:	6033      	str	r3, [r6, #0]
 801a936:	f898 200c 	ldrb.w	r2, [r8, #12]
 801a93a:	429a      	cmp	r2, r3
 801a93c:	d0d0      	beq.n	801a8e0 <uxr_next_reliable_nack_buffer_to_send+0x14>
 801a93e:	e7dd      	b.n	801a8fc <uxr_next_reliable_nack_buffer_to_send+0x30>

0801a940 <uxr_process_acknack>:
 801a940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a942:	4604      	mov	r4, r0
 801a944:	460e      	mov	r6, r1
 801a946:	4610      	mov	r0, r2
 801a948:	2101      	movs	r1, #1
 801a94a:	f000 f859 	bl	801aa00 <uxr_seq_num_sub>
 801a94e:	8a61      	ldrh	r1, [r4, #18]
 801a950:	f000 f856 	bl	801aa00 <uxr_seq_num_sub>
 801a954:	b1c8      	cbz	r0, 801a98a <uxr_process_acknack+0x4a>
 801a956:	4605      	mov	r5, r0
 801a958:	2700      	movs	r7, #0
 801a95a:	2101      	movs	r1, #1
 801a95c:	8a60      	ldrh	r0, [r4, #18]
 801a95e:	f000 f84b 	bl	801a9f8 <uxr_seq_num_add>
 801a962:	8923      	ldrh	r3, [r4, #8]
 801a964:	6862      	ldr	r2, [r4, #4]
 801a966:	3701      	adds	r7, #1
 801a968:	f894 c00c 	ldrb.w	ip, [r4, #12]
 801a96c:	6821      	ldr	r1, [r4, #0]
 801a96e:	42bd      	cmp	r5, r7
 801a970:	8260      	strh	r0, [r4, #18]
 801a972:	fbb0 fef3 	udiv	lr, r0, r3
 801a976:	fbb2 f2f3 	udiv	r2, r2, r3
 801a97a:	fb03 031e 	mls	r3, r3, lr, r0
 801a97e:	b29b      	uxth	r3, r3
 801a980:	fb02 f303 	mul.w	r3, r2, r3
 801a984:	f841 c003 	str.w	ip, [r1, r3]
 801a988:	d1e7      	bne.n	801a95a <uxr_process_acknack+0x1a>
 801a98a:	3e00      	subs	r6, #0
 801a98c:	f04f 0300 	mov.w	r3, #0
 801a990:	bf18      	it	ne
 801a992:	2601      	movne	r6, #1
 801a994:	f884 3020 	strb.w	r3, [r4, #32]
 801a998:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
 801a99c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a99e:	bf00      	nop

0801a9a0 <uxr_is_output_up_to_date>:
 801a9a0:	8a01      	ldrh	r1, [r0, #16]
 801a9a2:	8a40      	ldrh	r0, [r0, #18]
 801a9a4:	b508      	push	{r3, lr}
 801a9a6:	f000 f82f 	bl	801aa08 <uxr_seq_num_cmp>
 801a9aa:	fab0 f080 	clz	r0, r0
 801a9ae:	0940      	lsrs	r0, r0, #5
 801a9b0:	bd08      	pop	{r3, pc}
 801a9b2:	bf00      	nop

0801a9b4 <get_available_free_slots>:
 801a9b4:	8901      	ldrh	r1, [r0, #8]
 801a9b6:	b1e1      	cbz	r1, 801a9f2 <get_available_free_slots+0x3e>
 801a9b8:	6843      	ldr	r3, [r0, #4]
 801a9ba:	f04f 0c00 	mov.w	ip, #0
 801a9be:	b530      	push	{r4, r5, lr}
 801a9c0:	fbb3 fef1 	udiv	lr, r3, r1
 801a9c4:	6805      	ldr	r5, [r0, #0]
 801a9c6:	4662      	mov	r2, ip
 801a9c8:	7b04      	ldrb	r4, [r0, #12]
 801a9ca:	4660      	mov	r0, ip
 801a9cc:	f10c 0c01 	add.w	ip, ip, #1
 801a9d0:	fbb2 f3f1 	udiv	r3, r2, r1
 801a9d4:	fb01 2313 	mls	r3, r1, r3, r2
 801a9d8:	fa1f f28c 	uxth.w	r2, ip
 801a9dc:	b29b      	uxth	r3, r3
 801a9de:	fb0e f303 	mul.w	r3, lr, r3
 801a9e2:	58eb      	ldr	r3, [r5, r3]
 801a9e4:	429c      	cmp	r4, r3
 801a9e6:	d101      	bne.n	801a9ec <get_available_free_slots+0x38>
 801a9e8:	3001      	adds	r0, #1
 801a9ea:	b280      	uxth	r0, r0
 801a9ec:	428a      	cmp	r2, r1
 801a9ee:	d3ed      	bcc.n	801a9cc <get_available_free_slots+0x18>
 801a9f0:	bd30      	pop	{r4, r5, pc}
 801a9f2:	4608      	mov	r0, r1
 801a9f4:	4770      	bx	lr
 801a9f6:	bf00      	nop

0801a9f8 <uxr_seq_num_add>:
 801a9f8:	4408      	add	r0, r1
 801a9fa:	b280      	uxth	r0, r0
 801a9fc:	4770      	bx	lr
 801a9fe:	bf00      	nop

0801aa00 <uxr_seq_num_sub>:
 801aa00:	1a40      	subs	r0, r0, r1
 801aa02:	b280      	uxth	r0, r0
 801aa04:	4770      	bx	lr
 801aa06:	bf00      	nop

0801aa08 <uxr_seq_num_cmp>:
 801aa08:	4288      	cmp	r0, r1
 801aa0a:	d011      	beq.n	801aa30 <uxr_seq_num_cmp+0x28>
 801aa0c:	d309      	bcc.n	801aa22 <uxr_seq_num_cmp+0x1a>
 801aa0e:	4288      	cmp	r0, r1
 801aa10:	d910      	bls.n	801aa34 <uxr_seq_num_cmp+0x2c>
 801aa12:	1a40      	subs	r0, r0, r1
 801aa14:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 801aa18:	bfd4      	ite	le
 801aa1a:	2001      	movle	r0, #1
 801aa1c:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
 801aa20:	4770      	bx	lr
 801aa22:	1a0b      	subs	r3, r1, r0
 801aa24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801aa28:	daf1      	bge.n	801aa0e <uxr_seq_num_cmp+0x6>
 801aa2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801aa2e:	4770      	bx	lr
 801aa30:	2000      	movs	r0, #0
 801aa32:	4770      	bx	lr
 801aa34:	2001      	movs	r0, #1
 801aa36:	4770      	bx	lr

0801aa38 <_ZdlPvj>:
 801aa38:	f000 b817 	b.w	801aa6a <_ZdlPv>

0801aa3c <_Znwj>:
 801aa3c:	2801      	cmp	r0, #1
 801aa3e:	bf38      	it	cc
 801aa40:	2001      	movcc	r0, #1
 801aa42:	b510      	push	{r4, lr}
 801aa44:	4604      	mov	r4, r0
 801aa46:	4620      	mov	r0, r4
 801aa48:	f000 f924 	bl	801ac94 <malloc>
 801aa4c:	b100      	cbz	r0, 801aa50 <_Znwj+0x14>
 801aa4e:	bd10      	pop	{r4, pc}
 801aa50:	f000 f80e 	bl	801aa70 <_ZSt15get_new_handlerv>
 801aa54:	b908      	cbnz	r0, 801aa5a <_Znwj+0x1e>
 801aa56:	f000 f8af 	bl	801abb8 <abort>
 801aa5a:	4780      	blx	r0
 801aa5c:	e7f3      	b.n	801aa46 <_Znwj+0xa>

0801aa5e <_ZSt17__throw_bad_allocv>:
 801aa5e:	b508      	push	{r3, lr}
 801aa60:	f000 f8aa 	bl	801abb8 <abort>

0801aa64 <_ZSt20__throw_length_errorPKc>:
 801aa64:	b508      	push	{r3, lr}
 801aa66:	f000 f8a7 	bl	801abb8 <abort>

0801aa6a <_ZdlPv>:
 801aa6a:	f000 b91b 	b.w	801aca4 <free>
	...

0801aa70 <_ZSt15get_new_handlerv>:
 801aa70:	4b02      	ldr	r3, [pc, #8]	; (801aa7c <_ZSt15get_new_handlerv+0xc>)
 801aa72:	6818      	ldr	r0, [r3, #0]
 801aa74:	f3bf 8f5b 	dmb	ish
 801aa78:	4770      	bx	lr
 801aa7a:	bf00      	nop
 801aa7c:	20010a2c 	.word	0x20010a2c

0801aa80 <expf>:
 801aa80:	ee10 2a10 	vmov	r2, s0
 801aa84:	f240 412a 	movw	r1, #1066	; 0x42a
 801aa88:	f3c2 530a 	ubfx	r3, r2, #20, #11
 801aa8c:	428b      	cmp	r3, r1
 801aa8e:	b430      	push	{r4, r5}
 801aa90:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 801aa94:	d92a      	bls.n	801aaec <expf+0x6c>
 801aa96:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
 801aa9a:	d058      	beq.n	801ab4e <expf+0xce>
 801aa9c:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 801aaa0:	d303      	bcc.n	801aaaa <expf+0x2a>
 801aaa2:	ee30 0a00 	vadd.f32	s0, s0, s0
 801aaa6:	bc30      	pop	{r4, r5}
 801aaa8:	4770      	bx	lr
 801aaaa:	eddf 7a2a 	vldr	s15, [pc, #168]	; 801ab54 <expf+0xd4>
 801aaae:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801aab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aab6:	dd03      	ble.n	801aac0 <expf+0x40>
 801aab8:	bc30      	pop	{r4, r5}
 801aaba:	2000      	movs	r0, #0
 801aabc:	f000 b876 	b.w	801abac <__math_oflowf>
 801aac0:	eddf 7a25 	vldr	s15, [pc, #148]	; 801ab58 <expf+0xd8>
 801aac4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801aac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aacc:	d503      	bpl.n	801aad6 <expf+0x56>
 801aace:	bc30      	pop	{r4, r5}
 801aad0:	2000      	movs	r0, #0
 801aad2:	f000 b85f 	b.w	801ab94 <__math_uflowf>
 801aad6:	eddf 7a21 	vldr	s15, [pc, #132]	; 801ab5c <expf+0xdc>
 801aada:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801aade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aae2:	d503      	bpl.n	801aaec <expf+0x6c>
 801aae4:	bc30      	pop	{r4, r5}
 801aae6:	2000      	movs	r0, #0
 801aae8:	f000 b85a 	b.w	801aba0 <__math_may_uflowf>
 801aaec:	4b1c      	ldr	r3, [pc, #112]	; (801ab60 <expf+0xe0>)
 801aaee:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801aaf2:	ed93 5b4a 	vldr	d5, [r3, #296]	; 0x128
 801aaf6:	ed93 4b48 	vldr	d4, [r3, #288]	; 0x120
 801aafa:	eeb0 7b44 	vmov.f64	d7, d4
 801aafe:	eea5 7b06 	vfma.f64	d7, d5, d6
 801ab02:	ee17 0a10 	vmov	r0, s14
 801ab06:	ee37 7b44 	vsub.f64	d7, d7, d4
 801ab0a:	f000 021f 	and.w	r2, r0, #31
 801ab0e:	ee95 7b06 	vfnms.f64	d7, d5, d6
 801ab12:	ed93 5b4c 	vldr	d5, [r3, #304]	; 0x130
 801ab16:	ee27 4b07 	vmul.f64	d4, d7, d7
 801ab1a:	ed93 6b4e 	vldr	d6, [r3, #312]	; 0x138
 801ab1e:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 801ab22:	eea5 6b07 	vfma.f64	d6, d5, d7
 801ab26:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
 801ab2a:	684d      	ldr	r5, [r1, #4]
 801ab2c:	ed93 5b50 	vldr	d5, [r3, #320]	; 0x140
 801ab30:	2100      	movs	r1, #0
 801ab32:	190a      	adds	r2, r1, r4
 801ab34:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 801ab38:	eea5 0b07 	vfma.f64	d0, d5, d7
 801ab3c:	ec43 2b17 	vmov	d7, r2, r3
 801ab40:	eea6 0b04 	vfma.f64	d0, d6, d4
 801ab44:	ee20 0b07 	vmul.f64	d0, d0, d7
 801ab48:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801ab4c:	e7ab      	b.n	801aaa6 <expf+0x26>
 801ab4e:	ed9f 0a05 	vldr	s0, [pc, #20]	; 801ab64 <expf+0xe4>
 801ab52:	e7a8      	b.n	801aaa6 <expf+0x26>
 801ab54:	42b17217 	.word	0x42b17217
 801ab58:	c2cff1b4 	.word	0xc2cff1b4
 801ab5c:	c2ce8ecf 	.word	0xc2ce8ecf
 801ab60:	0801dc78 	.word	0x0801dc78
 801ab64:	00000000 	.word	0x00000000

0801ab68 <with_errnof>:
 801ab68:	b513      	push	{r0, r1, r4, lr}
 801ab6a:	4604      	mov	r4, r0
 801ab6c:	ed8d 0a01 	vstr	s0, [sp, #4]
 801ab70:	f000 fd48 	bl	801b604 <__errno>
 801ab74:	ed9d 0a01 	vldr	s0, [sp, #4]
 801ab78:	6004      	str	r4, [r0, #0]
 801ab7a:	b002      	add	sp, #8
 801ab7c:	bd10      	pop	{r4, pc}

0801ab7e <xflowf>:
 801ab7e:	b130      	cbz	r0, 801ab8e <xflowf+0x10>
 801ab80:	eef1 7a40 	vneg.f32	s15, s0
 801ab84:	ee27 0a80 	vmul.f32	s0, s15, s0
 801ab88:	2022      	movs	r0, #34	; 0x22
 801ab8a:	f7ff bfed 	b.w	801ab68 <with_errnof>
 801ab8e:	eef0 7a40 	vmov.f32	s15, s0
 801ab92:	e7f7      	b.n	801ab84 <xflowf+0x6>

0801ab94 <__math_uflowf>:
 801ab94:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801ab9c <__math_uflowf+0x8>
 801ab98:	f7ff bff1 	b.w	801ab7e <xflowf>
 801ab9c:	10000000 	.word	0x10000000

0801aba0 <__math_may_uflowf>:
 801aba0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801aba8 <__math_may_uflowf+0x8>
 801aba4:	f7ff bfeb 	b.w	801ab7e <xflowf>
 801aba8:	1a200000 	.word	0x1a200000

0801abac <__math_oflowf>:
 801abac:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801abb4 <__math_oflowf+0x8>
 801abb0:	f7ff bfe5 	b.w	801ab7e <xflowf>
 801abb4:	70000000 	.word	0x70000000

0801abb8 <abort>:
 801abb8:	b508      	push	{r3, lr}
 801abba:	2006      	movs	r0, #6
 801abbc:	f000 fc5a 	bl	801b474 <raise>
 801abc0:	2001      	movs	r0, #1
 801abc2:	f7e8 fc17 	bl	80033f4 <_exit>
	...

0801abc8 <calloc>:
 801abc8:	4b02      	ldr	r3, [pc, #8]	; (801abd4 <calloc+0xc>)
 801abca:	460a      	mov	r2, r1
 801abcc:	4601      	mov	r1, r0
 801abce:	6818      	ldr	r0, [r3, #0]
 801abd0:	f000 b802 	b.w	801abd8 <_calloc_r>
 801abd4:	20002138 	.word	0x20002138

0801abd8 <_calloc_r>:
 801abd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801abda:	fba1 2402 	umull	r2, r4, r1, r2
 801abde:	b94c      	cbnz	r4, 801abf4 <_calloc_r+0x1c>
 801abe0:	4611      	mov	r1, r2
 801abe2:	9201      	str	r2, [sp, #4]
 801abe4:	f000 f886 	bl	801acf4 <_malloc_r>
 801abe8:	9a01      	ldr	r2, [sp, #4]
 801abea:	4605      	mov	r5, r0
 801abec:	b930      	cbnz	r0, 801abfc <_calloc_r+0x24>
 801abee:	4628      	mov	r0, r5
 801abf0:	b003      	add	sp, #12
 801abf2:	bd30      	pop	{r4, r5, pc}
 801abf4:	220c      	movs	r2, #12
 801abf6:	6002      	str	r2, [r0, #0]
 801abf8:	2500      	movs	r5, #0
 801abfa:	e7f8      	b.n	801abee <_calloc_r+0x16>
 801abfc:	4621      	mov	r1, r4
 801abfe:	f000 fbc1 	bl	801b384 <memset>
 801ac02:	e7f4      	b.n	801abee <_calloc_r+0x16>

0801ac04 <getenv>:
 801ac04:	b507      	push	{r0, r1, r2, lr}
 801ac06:	4b04      	ldr	r3, [pc, #16]	; (801ac18 <getenv+0x14>)
 801ac08:	4601      	mov	r1, r0
 801ac0a:	aa01      	add	r2, sp, #4
 801ac0c:	6818      	ldr	r0, [r3, #0]
 801ac0e:	f000 f805 	bl	801ac1c <_findenv_r>
 801ac12:	b003      	add	sp, #12
 801ac14:	f85d fb04 	ldr.w	pc, [sp], #4
 801ac18:	20002138 	.word	0x20002138

0801ac1c <_findenv_r>:
 801ac1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac20:	f8df a06c 	ldr.w	sl, [pc, #108]	; 801ac90 <_findenv_r+0x74>
 801ac24:	4607      	mov	r7, r0
 801ac26:	4689      	mov	r9, r1
 801ac28:	4616      	mov	r6, r2
 801ac2a:	f000 fd4d 	bl	801b6c8 <__env_lock>
 801ac2e:	f8da 4000 	ldr.w	r4, [sl]
 801ac32:	b134      	cbz	r4, 801ac42 <_findenv_r+0x26>
 801ac34:	464b      	mov	r3, r9
 801ac36:	4698      	mov	r8, r3
 801ac38:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ac3c:	b13a      	cbz	r2, 801ac4e <_findenv_r+0x32>
 801ac3e:	2a3d      	cmp	r2, #61	; 0x3d
 801ac40:	d1f9      	bne.n	801ac36 <_findenv_r+0x1a>
 801ac42:	4638      	mov	r0, r7
 801ac44:	f000 fd46 	bl	801b6d4 <__env_unlock>
 801ac48:	2000      	movs	r0, #0
 801ac4a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ac4e:	eba8 0809 	sub.w	r8, r8, r9
 801ac52:	46a3      	mov	fp, r4
 801ac54:	f854 0b04 	ldr.w	r0, [r4], #4
 801ac58:	2800      	cmp	r0, #0
 801ac5a:	d0f2      	beq.n	801ac42 <_findenv_r+0x26>
 801ac5c:	4642      	mov	r2, r8
 801ac5e:	4649      	mov	r1, r9
 801ac60:	f000 fba5 	bl	801b3ae <strncmp>
 801ac64:	2800      	cmp	r0, #0
 801ac66:	d1f4      	bne.n	801ac52 <_findenv_r+0x36>
 801ac68:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801ac6c:	eb03 0508 	add.w	r5, r3, r8
 801ac70:	f813 3008 	ldrb.w	r3, [r3, r8]
 801ac74:	2b3d      	cmp	r3, #61	; 0x3d
 801ac76:	d1ec      	bne.n	801ac52 <_findenv_r+0x36>
 801ac78:	f8da 3000 	ldr.w	r3, [sl]
 801ac7c:	ebab 0303 	sub.w	r3, fp, r3
 801ac80:	109b      	asrs	r3, r3, #2
 801ac82:	4638      	mov	r0, r7
 801ac84:	6033      	str	r3, [r6, #0]
 801ac86:	f000 fd25 	bl	801b6d4 <__env_unlock>
 801ac8a:	1c68      	adds	r0, r5, #1
 801ac8c:	e7dd      	b.n	801ac4a <_findenv_r+0x2e>
 801ac8e:	bf00      	nop
 801ac90:	20000000 	.word	0x20000000

0801ac94 <malloc>:
 801ac94:	4b02      	ldr	r3, [pc, #8]	; (801aca0 <malloc+0xc>)
 801ac96:	4601      	mov	r1, r0
 801ac98:	6818      	ldr	r0, [r3, #0]
 801ac9a:	f000 b82b 	b.w	801acf4 <_malloc_r>
 801ac9e:	bf00      	nop
 801aca0:	20002138 	.word	0x20002138

0801aca4 <free>:
 801aca4:	4b02      	ldr	r3, [pc, #8]	; (801acb0 <free+0xc>)
 801aca6:	4601      	mov	r1, r0
 801aca8:	6818      	ldr	r0, [r3, #0]
 801acaa:	f000 bd19 	b.w	801b6e0 <_free_r>
 801acae:	bf00      	nop
 801acb0:	20002138 	.word	0x20002138

0801acb4 <sbrk_aligned>:
 801acb4:	b570      	push	{r4, r5, r6, lr}
 801acb6:	4e0e      	ldr	r6, [pc, #56]	; (801acf0 <sbrk_aligned+0x3c>)
 801acb8:	460c      	mov	r4, r1
 801acba:	6831      	ldr	r1, [r6, #0]
 801acbc:	4605      	mov	r5, r0
 801acbe:	b911      	cbnz	r1, 801acc6 <sbrk_aligned+0x12>
 801acc0:	f000 fc7e 	bl	801b5c0 <_sbrk_r>
 801acc4:	6030      	str	r0, [r6, #0]
 801acc6:	4621      	mov	r1, r4
 801acc8:	4628      	mov	r0, r5
 801acca:	f000 fc79 	bl	801b5c0 <_sbrk_r>
 801acce:	1c43      	adds	r3, r0, #1
 801acd0:	d00a      	beq.n	801ace8 <sbrk_aligned+0x34>
 801acd2:	1cc4      	adds	r4, r0, #3
 801acd4:	f024 0403 	bic.w	r4, r4, #3
 801acd8:	42a0      	cmp	r0, r4
 801acda:	d007      	beq.n	801acec <sbrk_aligned+0x38>
 801acdc:	1a21      	subs	r1, r4, r0
 801acde:	4628      	mov	r0, r5
 801ace0:	f000 fc6e 	bl	801b5c0 <_sbrk_r>
 801ace4:	3001      	adds	r0, #1
 801ace6:	d101      	bne.n	801acec <sbrk_aligned+0x38>
 801ace8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801acec:	4620      	mov	r0, r4
 801acee:	bd70      	pop	{r4, r5, r6, pc}
 801acf0:	20010a34 	.word	0x20010a34

0801acf4 <_malloc_r>:
 801acf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801acf8:	1ccd      	adds	r5, r1, #3
 801acfa:	f025 0503 	bic.w	r5, r5, #3
 801acfe:	3508      	adds	r5, #8
 801ad00:	2d0c      	cmp	r5, #12
 801ad02:	bf38      	it	cc
 801ad04:	250c      	movcc	r5, #12
 801ad06:	2d00      	cmp	r5, #0
 801ad08:	4607      	mov	r7, r0
 801ad0a:	db01      	blt.n	801ad10 <_malloc_r+0x1c>
 801ad0c:	42a9      	cmp	r1, r5
 801ad0e:	d905      	bls.n	801ad1c <_malloc_r+0x28>
 801ad10:	230c      	movs	r3, #12
 801ad12:	603b      	str	r3, [r7, #0]
 801ad14:	2600      	movs	r6, #0
 801ad16:	4630      	mov	r0, r6
 801ad18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ad1c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801adf0 <_malloc_r+0xfc>
 801ad20:	f000 f868 	bl	801adf4 <__malloc_lock>
 801ad24:	f8d8 3000 	ldr.w	r3, [r8]
 801ad28:	461c      	mov	r4, r3
 801ad2a:	bb5c      	cbnz	r4, 801ad84 <_malloc_r+0x90>
 801ad2c:	4629      	mov	r1, r5
 801ad2e:	4638      	mov	r0, r7
 801ad30:	f7ff ffc0 	bl	801acb4 <sbrk_aligned>
 801ad34:	1c43      	adds	r3, r0, #1
 801ad36:	4604      	mov	r4, r0
 801ad38:	d155      	bne.n	801ade6 <_malloc_r+0xf2>
 801ad3a:	f8d8 4000 	ldr.w	r4, [r8]
 801ad3e:	4626      	mov	r6, r4
 801ad40:	2e00      	cmp	r6, #0
 801ad42:	d145      	bne.n	801add0 <_malloc_r+0xdc>
 801ad44:	2c00      	cmp	r4, #0
 801ad46:	d048      	beq.n	801adda <_malloc_r+0xe6>
 801ad48:	6823      	ldr	r3, [r4, #0]
 801ad4a:	4631      	mov	r1, r6
 801ad4c:	4638      	mov	r0, r7
 801ad4e:	eb04 0903 	add.w	r9, r4, r3
 801ad52:	f000 fc35 	bl	801b5c0 <_sbrk_r>
 801ad56:	4581      	cmp	r9, r0
 801ad58:	d13f      	bne.n	801adda <_malloc_r+0xe6>
 801ad5a:	6821      	ldr	r1, [r4, #0]
 801ad5c:	1a6d      	subs	r5, r5, r1
 801ad5e:	4629      	mov	r1, r5
 801ad60:	4638      	mov	r0, r7
 801ad62:	f7ff ffa7 	bl	801acb4 <sbrk_aligned>
 801ad66:	3001      	adds	r0, #1
 801ad68:	d037      	beq.n	801adda <_malloc_r+0xe6>
 801ad6a:	6823      	ldr	r3, [r4, #0]
 801ad6c:	442b      	add	r3, r5
 801ad6e:	6023      	str	r3, [r4, #0]
 801ad70:	f8d8 3000 	ldr.w	r3, [r8]
 801ad74:	2b00      	cmp	r3, #0
 801ad76:	d038      	beq.n	801adea <_malloc_r+0xf6>
 801ad78:	685a      	ldr	r2, [r3, #4]
 801ad7a:	42a2      	cmp	r2, r4
 801ad7c:	d12b      	bne.n	801add6 <_malloc_r+0xe2>
 801ad7e:	2200      	movs	r2, #0
 801ad80:	605a      	str	r2, [r3, #4]
 801ad82:	e00f      	b.n	801ada4 <_malloc_r+0xb0>
 801ad84:	6822      	ldr	r2, [r4, #0]
 801ad86:	1b52      	subs	r2, r2, r5
 801ad88:	d41f      	bmi.n	801adca <_malloc_r+0xd6>
 801ad8a:	2a0b      	cmp	r2, #11
 801ad8c:	d917      	bls.n	801adbe <_malloc_r+0xca>
 801ad8e:	1961      	adds	r1, r4, r5
 801ad90:	42a3      	cmp	r3, r4
 801ad92:	6025      	str	r5, [r4, #0]
 801ad94:	bf18      	it	ne
 801ad96:	6059      	strne	r1, [r3, #4]
 801ad98:	6863      	ldr	r3, [r4, #4]
 801ad9a:	bf08      	it	eq
 801ad9c:	f8c8 1000 	streq.w	r1, [r8]
 801ada0:	5162      	str	r2, [r4, r5]
 801ada2:	604b      	str	r3, [r1, #4]
 801ada4:	4638      	mov	r0, r7
 801ada6:	f104 060b 	add.w	r6, r4, #11
 801adaa:	f000 f829 	bl	801ae00 <__malloc_unlock>
 801adae:	f026 0607 	bic.w	r6, r6, #7
 801adb2:	1d23      	adds	r3, r4, #4
 801adb4:	1af2      	subs	r2, r6, r3
 801adb6:	d0ae      	beq.n	801ad16 <_malloc_r+0x22>
 801adb8:	1b9b      	subs	r3, r3, r6
 801adba:	50a3      	str	r3, [r4, r2]
 801adbc:	e7ab      	b.n	801ad16 <_malloc_r+0x22>
 801adbe:	42a3      	cmp	r3, r4
 801adc0:	6862      	ldr	r2, [r4, #4]
 801adc2:	d1dd      	bne.n	801ad80 <_malloc_r+0x8c>
 801adc4:	f8c8 2000 	str.w	r2, [r8]
 801adc8:	e7ec      	b.n	801ada4 <_malloc_r+0xb0>
 801adca:	4623      	mov	r3, r4
 801adcc:	6864      	ldr	r4, [r4, #4]
 801adce:	e7ac      	b.n	801ad2a <_malloc_r+0x36>
 801add0:	4634      	mov	r4, r6
 801add2:	6876      	ldr	r6, [r6, #4]
 801add4:	e7b4      	b.n	801ad40 <_malloc_r+0x4c>
 801add6:	4613      	mov	r3, r2
 801add8:	e7cc      	b.n	801ad74 <_malloc_r+0x80>
 801adda:	230c      	movs	r3, #12
 801addc:	603b      	str	r3, [r7, #0]
 801adde:	4638      	mov	r0, r7
 801ade0:	f000 f80e 	bl	801ae00 <__malloc_unlock>
 801ade4:	e797      	b.n	801ad16 <_malloc_r+0x22>
 801ade6:	6025      	str	r5, [r4, #0]
 801ade8:	e7dc      	b.n	801ada4 <_malloc_r+0xb0>
 801adea:	605b      	str	r3, [r3, #4]
 801adec:	deff      	udf	#255	; 0xff
 801adee:	bf00      	nop
 801adf0:	20010a30 	.word	0x20010a30

0801adf4 <__malloc_lock>:
 801adf4:	4801      	ldr	r0, [pc, #4]	; (801adfc <__malloc_lock+0x8>)
 801adf6:	f000 bc30 	b.w	801b65a <__retarget_lock_acquire_recursive>
 801adfa:	bf00      	nop
 801adfc:	20010b79 	.word	0x20010b79

0801ae00 <__malloc_unlock>:
 801ae00:	4801      	ldr	r0, [pc, #4]	; (801ae08 <__malloc_unlock+0x8>)
 801ae02:	f000 bc2b 	b.w	801b65c <__retarget_lock_release_recursive>
 801ae06:	bf00      	nop
 801ae08:	20010b79 	.word	0x20010b79

0801ae0c <srand>:
 801ae0c:	b538      	push	{r3, r4, r5, lr}
 801ae0e:	4b10      	ldr	r3, [pc, #64]	; (801ae50 <srand+0x44>)
 801ae10:	681d      	ldr	r5, [r3, #0]
 801ae12:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801ae14:	4604      	mov	r4, r0
 801ae16:	b9b3      	cbnz	r3, 801ae46 <srand+0x3a>
 801ae18:	2018      	movs	r0, #24
 801ae1a:	f7ff ff3b 	bl	801ac94 <malloc>
 801ae1e:	4602      	mov	r2, r0
 801ae20:	6328      	str	r0, [r5, #48]	; 0x30
 801ae22:	b920      	cbnz	r0, 801ae2e <srand+0x22>
 801ae24:	4b0b      	ldr	r3, [pc, #44]	; (801ae54 <srand+0x48>)
 801ae26:	480c      	ldr	r0, [pc, #48]	; (801ae58 <srand+0x4c>)
 801ae28:	2146      	movs	r1, #70	; 0x46
 801ae2a:	f000 fc2f 	bl	801b68c <__assert_func>
 801ae2e:	490b      	ldr	r1, [pc, #44]	; (801ae5c <srand+0x50>)
 801ae30:	4b0b      	ldr	r3, [pc, #44]	; (801ae60 <srand+0x54>)
 801ae32:	e9c0 1300 	strd	r1, r3, [r0]
 801ae36:	4b0b      	ldr	r3, [pc, #44]	; (801ae64 <srand+0x58>)
 801ae38:	6083      	str	r3, [r0, #8]
 801ae3a:	230b      	movs	r3, #11
 801ae3c:	8183      	strh	r3, [r0, #12]
 801ae3e:	2100      	movs	r1, #0
 801ae40:	2001      	movs	r0, #1
 801ae42:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801ae46:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801ae48:	2200      	movs	r2, #0
 801ae4a:	611c      	str	r4, [r3, #16]
 801ae4c:	615a      	str	r2, [r3, #20]
 801ae4e:	bd38      	pop	{r3, r4, r5, pc}
 801ae50:	20002138 	.word	0x20002138
 801ae54:	0801ddc0 	.word	0x0801ddc0
 801ae58:	0801ddd7 	.word	0x0801ddd7
 801ae5c:	abcd330e 	.word	0xabcd330e
 801ae60:	e66d1234 	.word	0xe66d1234
 801ae64:	0005deec 	.word	0x0005deec

0801ae68 <rand>:
 801ae68:	4b16      	ldr	r3, [pc, #88]	; (801aec4 <rand+0x5c>)
 801ae6a:	b510      	push	{r4, lr}
 801ae6c:	681c      	ldr	r4, [r3, #0]
 801ae6e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801ae70:	b9b3      	cbnz	r3, 801aea0 <rand+0x38>
 801ae72:	2018      	movs	r0, #24
 801ae74:	f7ff ff0e 	bl	801ac94 <malloc>
 801ae78:	4602      	mov	r2, r0
 801ae7a:	6320      	str	r0, [r4, #48]	; 0x30
 801ae7c:	b920      	cbnz	r0, 801ae88 <rand+0x20>
 801ae7e:	4b12      	ldr	r3, [pc, #72]	; (801aec8 <rand+0x60>)
 801ae80:	4812      	ldr	r0, [pc, #72]	; (801aecc <rand+0x64>)
 801ae82:	2152      	movs	r1, #82	; 0x52
 801ae84:	f000 fc02 	bl	801b68c <__assert_func>
 801ae88:	4911      	ldr	r1, [pc, #68]	; (801aed0 <rand+0x68>)
 801ae8a:	4b12      	ldr	r3, [pc, #72]	; (801aed4 <rand+0x6c>)
 801ae8c:	e9c0 1300 	strd	r1, r3, [r0]
 801ae90:	4b11      	ldr	r3, [pc, #68]	; (801aed8 <rand+0x70>)
 801ae92:	6083      	str	r3, [r0, #8]
 801ae94:	230b      	movs	r3, #11
 801ae96:	8183      	strh	r3, [r0, #12]
 801ae98:	2100      	movs	r1, #0
 801ae9a:	2001      	movs	r0, #1
 801ae9c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801aea0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801aea2:	480e      	ldr	r0, [pc, #56]	; (801aedc <rand+0x74>)
 801aea4:	690b      	ldr	r3, [r1, #16]
 801aea6:	694c      	ldr	r4, [r1, #20]
 801aea8:	4a0d      	ldr	r2, [pc, #52]	; (801aee0 <rand+0x78>)
 801aeaa:	4358      	muls	r0, r3
 801aeac:	fb02 0004 	mla	r0, r2, r4, r0
 801aeb0:	fba3 3202 	umull	r3, r2, r3, r2
 801aeb4:	3301      	adds	r3, #1
 801aeb6:	eb40 0002 	adc.w	r0, r0, r2
 801aeba:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801aebe:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801aec2:	bd10      	pop	{r4, pc}
 801aec4:	20002138 	.word	0x20002138
 801aec8:	0801ddc0 	.word	0x0801ddc0
 801aecc:	0801ddd7 	.word	0x0801ddd7
 801aed0:	abcd330e 	.word	0xabcd330e
 801aed4:	e66d1234 	.word	0xe66d1234
 801aed8:	0005deec 	.word	0x0005deec
 801aedc:	5851f42d 	.word	0x5851f42d
 801aee0:	4c957f2d 	.word	0x4c957f2d

0801aee4 <realloc>:
 801aee4:	4b02      	ldr	r3, [pc, #8]	; (801aef0 <realloc+0xc>)
 801aee6:	460a      	mov	r2, r1
 801aee8:	4601      	mov	r1, r0
 801aeea:	6818      	ldr	r0, [r3, #0]
 801aeec:	f000 b802 	b.w	801aef4 <_realloc_r>
 801aef0:	20002138 	.word	0x20002138

0801aef4 <_realloc_r>:
 801aef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aef8:	4680      	mov	r8, r0
 801aefa:	4614      	mov	r4, r2
 801aefc:	460e      	mov	r6, r1
 801aefe:	b921      	cbnz	r1, 801af0a <_realloc_r+0x16>
 801af00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801af04:	4611      	mov	r1, r2
 801af06:	f7ff bef5 	b.w	801acf4 <_malloc_r>
 801af0a:	b92a      	cbnz	r2, 801af18 <_realloc_r+0x24>
 801af0c:	f000 fbe8 	bl	801b6e0 <_free_r>
 801af10:	4625      	mov	r5, r4
 801af12:	4628      	mov	r0, r5
 801af14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801af18:	f000 fc2e 	bl	801b778 <_malloc_usable_size_r>
 801af1c:	4284      	cmp	r4, r0
 801af1e:	4607      	mov	r7, r0
 801af20:	d802      	bhi.n	801af28 <_realloc_r+0x34>
 801af22:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801af26:	d812      	bhi.n	801af4e <_realloc_r+0x5a>
 801af28:	4621      	mov	r1, r4
 801af2a:	4640      	mov	r0, r8
 801af2c:	f7ff fee2 	bl	801acf4 <_malloc_r>
 801af30:	4605      	mov	r5, r0
 801af32:	2800      	cmp	r0, #0
 801af34:	d0ed      	beq.n	801af12 <_realloc_r+0x1e>
 801af36:	42bc      	cmp	r4, r7
 801af38:	4622      	mov	r2, r4
 801af3a:	4631      	mov	r1, r6
 801af3c:	bf28      	it	cs
 801af3e:	463a      	movcs	r2, r7
 801af40:	f000 fb95 	bl	801b66e <memcpy>
 801af44:	4631      	mov	r1, r6
 801af46:	4640      	mov	r0, r8
 801af48:	f000 fbca 	bl	801b6e0 <_free_r>
 801af4c:	e7e1      	b.n	801af12 <_realloc_r+0x1e>
 801af4e:	4635      	mov	r5, r6
 801af50:	e7df      	b.n	801af12 <_realloc_r+0x1e>
	...

0801af54 <_strtoul_l.constprop.0>:
 801af54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801af58:	4f36      	ldr	r7, [pc, #216]	; (801b034 <_strtoul_l.constprop.0+0xe0>)
 801af5a:	4686      	mov	lr, r0
 801af5c:	460d      	mov	r5, r1
 801af5e:	4628      	mov	r0, r5
 801af60:	f815 4b01 	ldrb.w	r4, [r5], #1
 801af64:	5d3e      	ldrb	r6, [r7, r4]
 801af66:	f016 0608 	ands.w	r6, r6, #8
 801af6a:	d1f8      	bne.n	801af5e <_strtoul_l.constprop.0+0xa>
 801af6c:	2c2d      	cmp	r4, #45	; 0x2d
 801af6e:	d130      	bne.n	801afd2 <_strtoul_l.constprop.0+0x7e>
 801af70:	782c      	ldrb	r4, [r5, #0]
 801af72:	2601      	movs	r6, #1
 801af74:	1c85      	adds	r5, r0, #2
 801af76:	2b00      	cmp	r3, #0
 801af78:	d057      	beq.n	801b02a <_strtoul_l.constprop.0+0xd6>
 801af7a:	2b10      	cmp	r3, #16
 801af7c:	d109      	bne.n	801af92 <_strtoul_l.constprop.0+0x3e>
 801af7e:	2c30      	cmp	r4, #48	; 0x30
 801af80:	d107      	bne.n	801af92 <_strtoul_l.constprop.0+0x3e>
 801af82:	7828      	ldrb	r0, [r5, #0]
 801af84:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801af88:	2858      	cmp	r0, #88	; 0x58
 801af8a:	d149      	bne.n	801b020 <_strtoul_l.constprop.0+0xcc>
 801af8c:	786c      	ldrb	r4, [r5, #1]
 801af8e:	2310      	movs	r3, #16
 801af90:	3502      	adds	r5, #2
 801af92:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801af96:	2700      	movs	r7, #0
 801af98:	fbb8 f8f3 	udiv	r8, r8, r3
 801af9c:	fb03 f908 	mul.w	r9, r3, r8
 801afa0:	ea6f 0909 	mvn.w	r9, r9
 801afa4:	4638      	mov	r0, r7
 801afa6:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801afaa:	f1bc 0f09 	cmp.w	ip, #9
 801afae:	d815      	bhi.n	801afdc <_strtoul_l.constprop.0+0x88>
 801afb0:	4664      	mov	r4, ip
 801afb2:	42a3      	cmp	r3, r4
 801afb4:	dd23      	ble.n	801affe <_strtoul_l.constprop.0+0xaa>
 801afb6:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 801afba:	d007      	beq.n	801afcc <_strtoul_l.constprop.0+0x78>
 801afbc:	4580      	cmp	r8, r0
 801afbe:	d31b      	bcc.n	801aff8 <_strtoul_l.constprop.0+0xa4>
 801afc0:	d101      	bne.n	801afc6 <_strtoul_l.constprop.0+0x72>
 801afc2:	45a1      	cmp	r9, r4
 801afc4:	db18      	blt.n	801aff8 <_strtoul_l.constprop.0+0xa4>
 801afc6:	fb00 4003 	mla	r0, r0, r3, r4
 801afca:	2701      	movs	r7, #1
 801afcc:	f815 4b01 	ldrb.w	r4, [r5], #1
 801afd0:	e7e9      	b.n	801afa6 <_strtoul_l.constprop.0+0x52>
 801afd2:	2c2b      	cmp	r4, #43	; 0x2b
 801afd4:	bf04      	itt	eq
 801afd6:	782c      	ldrbeq	r4, [r5, #0]
 801afd8:	1c85      	addeq	r5, r0, #2
 801afda:	e7cc      	b.n	801af76 <_strtoul_l.constprop.0+0x22>
 801afdc:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801afe0:	f1bc 0f19 	cmp.w	ip, #25
 801afe4:	d801      	bhi.n	801afea <_strtoul_l.constprop.0+0x96>
 801afe6:	3c37      	subs	r4, #55	; 0x37
 801afe8:	e7e3      	b.n	801afb2 <_strtoul_l.constprop.0+0x5e>
 801afea:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801afee:	f1bc 0f19 	cmp.w	ip, #25
 801aff2:	d804      	bhi.n	801affe <_strtoul_l.constprop.0+0xaa>
 801aff4:	3c57      	subs	r4, #87	; 0x57
 801aff6:	e7dc      	b.n	801afb2 <_strtoul_l.constprop.0+0x5e>
 801aff8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801affc:	e7e6      	b.n	801afcc <_strtoul_l.constprop.0+0x78>
 801affe:	1c7b      	adds	r3, r7, #1
 801b000:	d106      	bne.n	801b010 <_strtoul_l.constprop.0+0xbc>
 801b002:	2322      	movs	r3, #34	; 0x22
 801b004:	f8ce 3000 	str.w	r3, [lr]
 801b008:	4638      	mov	r0, r7
 801b00a:	b932      	cbnz	r2, 801b01a <_strtoul_l.constprop.0+0xc6>
 801b00c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b010:	b106      	cbz	r6, 801b014 <_strtoul_l.constprop.0+0xc0>
 801b012:	4240      	negs	r0, r0
 801b014:	2a00      	cmp	r2, #0
 801b016:	d0f9      	beq.n	801b00c <_strtoul_l.constprop.0+0xb8>
 801b018:	b107      	cbz	r7, 801b01c <_strtoul_l.constprop.0+0xc8>
 801b01a:	1e69      	subs	r1, r5, #1
 801b01c:	6011      	str	r1, [r2, #0]
 801b01e:	e7f5      	b.n	801b00c <_strtoul_l.constprop.0+0xb8>
 801b020:	2430      	movs	r4, #48	; 0x30
 801b022:	2b00      	cmp	r3, #0
 801b024:	d1b5      	bne.n	801af92 <_strtoul_l.constprop.0+0x3e>
 801b026:	2308      	movs	r3, #8
 801b028:	e7b3      	b.n	801af92 <_strtoul_l.constprop.0+0x3e>
 801b02a:	2c30      	cmp	r4, #48	; 0x30
 801b02c:	d0a9      	beq.n	801af82 <_strtoul_l.constprop.0+0x2e>
 801b02e:	230a      	movs	r3, #10
 801b030:	e7af      	b.n	801af92 <_strtoul_l.constprop.0+0x3e>
 801b032:	bf00      	nop
 801b034:	0801de30 	.word	0x0801de30

0801b038 <strtoul>:
 801b038:	4613      	mov	r3, r2
 801b03a:	460a      	mov	r2, r1
 801b03c:	4601      	mov	r1, r0
 801b03e:	4802      	ldr	r0, [pc, #8]	; (801b048 <strtoul+0x10>)
 801b040:	6800      	ldr	r0, [r0, #0]
 801b042:	f7ff bf87 	b.w	801af54 <_strtoul_l.constprop.0>
 801b046:	bf00      	nop
 801b048:	20002138 	.word	0x20002138

0801b04c <std>:
 801b04c:	2300      	movs	r3, #0
 801b04e:	b510      	push	{r4, lr}
 801b050:	4604      	mov	r4, r0
 801b052:	e9c0 3300 	strd	r3, r3, [r0]
 801b056:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801b05a:	6083      	str	r3, [r0, #8]
 801b05c:	8181      	strh	r1, [r0, #12]
 801b05e:	6643      	str	r3, [r0, #100]	; 0x64
 801b060:	81c2      	strh	r2, [r0, #14]
 801b062:	6183      	str	r3, [r0, #24]
 801b064:	4619      	mov	r1, r3
 801b066:	2208      	movs	r2, #8
 801b068:	305c      	adds	r0, #92	; 0x5c
 801b06a:	f000 f98b 	bl	801b384 <memset>
 801b06e:	4b0d      	ldr	r3, [pc, #52]	; (801b0a4 <std+0x58>)
 801b070:	6263      	str	r3, [r4, #36]	; 0x24
 801b072:	4b0d      	ldr	r3, [pc, #52]	; (801b0a8 <std+0x5c>)
 801b074:	62a3      	str	r3, [r4, #40]	; 0x28
 801b076:	4b0d      	ldr	r3, [pc, #52]	; (801b0ac <std+0x60>)
 801b078:	62e3      	str	r3, [r4, #44]	; 0x2c
 801b07a:	4b0d      	ldr	r3, [pc, #52]	; (801b0b0 <std+0x64>)
 801b07c:	6323      	str	r3, [r4, #48]	; 0x30
 801b07e:	4b0d      	ldr	r3, [pc, #52]	; (801b0b4 <std+0x68>)
 801b080:	6224      	str	r4, [r4, #32]
 801b082:	429c      	cmp	r4, r3
 801b084:	d006      	beq.n	801b094 <std+0x48>
 801b086:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801b08a:	4294      	cmp	r4, r2
 801b08c:	d002      	beq.n	801b094 <std+0x48>
 801b08e:	33d0      	adds	r3, #208	; 0xd0
 801b090:	429c      	cmp	r4, r3
 801b092:	d105      	bne.n	801b0a0 <std+0x54>
 801b094:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801b098:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b09c:	f000 badc 	b.w	801b658 <__retarget_lock_init_recursive>
 801b0a0:	bd10      	pop	{r4, pc}
 801b0a2:	bf00      	nop
 801b0a4:	0801b239 	.word	0x0801b239
 801b0a8:	0801b25b 	.word	0x0801b25b
 801b0ac:	0801b293 	.word	0x0801b293
 801b0b0:	0801b2b7 	.word	0x0801b2b7
 801b0b4:	20010a38 	.word	0x20010a38

0801b0b8 <stdio_exit_handler>:
 801b0b8:	4a02      	ldr	r2, [pc, #8]	; (801b0c4 <stdio_exit_handler+0xc>)
 801b0ba:	4903      	ldr	r1, [pc, #12]	; (801b0c8 <stdio_exit_handler+0x10>)
 801b0bc:	4803      	ldr	r0, [pc, #12]	; (801b0cc <stdio_exit_handler+0x14>)
 801b0be:	f000 b869 	b.w	801b194 <_fwalk_sglue>
 801b0c2:	bf00      	nop
 801b0c4:	200020e0 	.word	0x200020e0
 801b0c8:	0801be65 	.word	0x0801be65
 801b0cc:	200020ec 	.word	0x200020ec

0801b0d0 <cleanup_stdio>:
 801b0d0:	6841      	ldr	r1, [r0, #4]
 801b0d2:	4b0c      	ldr	r3, [pc, #48]	; (801b104 <cleanup_stdio+0x34>)
 801b0d4:	4299      	cmp	r1, r3
 801b0d6:	b510      	push	{r4, lr}
 801b0d8:	4604      	mov	r4, r0
 801b0da:	d001      	beq.n	801b0e0 <cleanup_stdio+0x10>
 801b0dc:	f000 fec2 	bl	801be64 <_fflush_r>
 801b0e0:	68a1      	ldr	r1, [r4, #8]
 801b0e2:	4b09      	ldr	r3, [pc, #36]	; (801b108 <cleanup_stdio+0x38>)
 801b0e4:	4299      	cmp	r1, r3
 801b0e6:	d002      	beq.n	801b0ee <cleanup_stdio+0x1e>
 801b0e8:	4620      	mov	r0, r4
 801b0ea:	f000 febb 	bl	801be64 <_fflush_r>
 801b0ee:	68e1      	ldr	r1, [r4, #12]
 801b0f0:	4b06      	ldr	r3, [pc, #24]	; (801b10c <cleanup_stdio+0x3c>)
 801b0f2:	4299      	cmp	r1, r3
 801b0f4:	d004      	beq.n	801b100 <cleanup_stdio+0x30>
 801b0f6:	4620      	mov	r0, r4
 801b0f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b0fc:	f000 beb2 	b.w	801be64 <_fflush_r>
 801b100:	bd10      	pop	{r4, pc}
 801b102:	bf00      	nop
 801b104:	20010a38 	.word	0x20010a38
 801b108:	20010aa0 	.word	0x20010aa0
 801b10c:	20010b08 	.word	0x20010b08

0801b110 <global_stdio_init.part.0>:
 801b110:	b510      	push	{r4, lr}
 801b112:	4b0b      	ldr	r3, [pc, #44]	; (801b140 <global_stdio_init.part.0+0x30>)
 801b114:	4c0b      	ldr	r4, [pc, #44]	; (801b144 <global_stdio_init.part.0+0x34>)
 801b116:	4a0c      	ldr	r2, [pc, #48]	; (801b148 <global_stdio_init.part.0+0x38>)
 801b118:	601a      	str	r2, [r3, #0]
 801b11a:	4620      	mov	r0, r4
 801b11c:	2200      	movs	r2, #0
 801b11e:	2104      	movs	r1, #4
 801b120:	f7ff ff94 	bl	801b04c <std>
 801b124:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801b128:	2201      	movs	r2, #1
 801b12a:	2109      	movs	r1, #9
 801b12c:	f7ff ff8e 	bl	801b04c <std>
 801b130:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801b134:	2202      	movs	r2, #2
 801b136:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b13a:	2112      	movs	r1, #18
 801b13c:	f7ff bf86 	b.w	801b04c <std>
 801b140:	20010b70 	.word	0x20010b70
 801b144:	20010a38 	.word	0x20010a38
 801b148:	0801b0b9 	.word	0x0801b0b9

0801b14c <__sfp_lock_acquire>:
 801b14c:	4801      	ldr	r0, [pc, #4]	; (801b154 <__sfp_lock_acquire+0x8>)
 801b14e:	f000 ba84 	b.w	801b65a <__retarget_lock_acquire_recursive>
 801b152:	bf00      	nop
 801b154:	20010b7a 	.word	0x20010b7a

0801b158 <__sfp_lock_release>:
 801b158:	4801      	ldr	r0, [pc, #4]	; (801b160 <__sfp_lock_release+0x8>)
 801b15a:	f000 ba7f 	b.w	801b65c <__retarget_lock_release_recursive>
 801b15e:	bf00      	nop
 801b160:	20010b7a 	.word	0x20010b7a

0801b164 <__sinit>:
 801b164:	b510      	push	{r4, lr}
 801b166:	4604      	mov	r4, r0
 801b168:	f7ff fff0 	bl	801b14c <__sfp_lock_acquire>
 801b16c:	6a23      	ldr	r3, [r4, #32]
 801b16e:	b11b      	cbz	r3, 801b178 <__sinit+0x14>
 801b170:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b174:	f7ff bff0 	b.w	801b158 <__sfp_lock_release>
 801b178:	4b04      	ldr	r3, [pc, #16]	; (801b18c <__sinit+0x28>)
 801b17a:	6223      	str	r3, [r4, #32]
 801b17c:	4b04      	ldr	r3, [pc, #16]	; (801b190 <__sinit+0x2c>)
 801b17e:	681b      	ldr	r3, [r3, #0]
 801b180:	2b00      	cmp	r3, #0
 801b182:	d1f5      	bne.n	801b170 <__sinit+0xc>
 801b184:	f7ff ffc4 	bl	801b110 <global_stdio_init.part.0>
 801b188:	e7f2      	b.n	801b170 <__sinit+0xc>
 801b18a:	bf00      	nop
 801b18c:	0801b0d1 	.word	0x0801b0d1
 801b190:	20010b70 	.word	0x20010b70

0801b194 <_fwalk_sglue>:
 801b194:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b198:	4607      	mov	r7, r0
 801b19a:	4688      	mov	r8, r1
 801b19c:	4614      	mov	r4, r2
 801b19e:	2600      	movs	r6, #0
 801b1a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801b1a4:	f1b9 0901 	subs.w	r9, r9, #1
 801b1a8:	d505      	bpl.n	801b1b6 <_fwalk_sglue+0x22>
 801b1aa:	6824      	ldr	r4, [r4, #0]
 801b1ac:	2c00      	cmp	r4, #0
 801b1ae:	d1f7      	bne.n	801b1a0 <_fwalk_sglue+0xc>
 801b1b0:	4630      	mov	r0, r6
 801b1b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b1b6:	89ab      	ldrh	r3, [r5, #12]
 801b1b8:	2b01      	cmp	r3, #1
 801b1ba:	d907      	bls.n	801b1cc <_fwalk_sglue+0x38>
 801b1bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801b1c0:	3301      	adds	r3, #1
 801b1c2:	d003      	beq.n	801b1cc <_fwalk_sglue+0x38>
 801b1c4:	4629      	mov	r1, r5
 801b1c6:	4638      	mov	r0, r7
 801b1c8:	47c0      	blx	r8
 801b1ca:	4306      	orrs	r6, r0
 801b1cc:	3568      	adds	r5, #104	; 0x68
 801b1ce:	e7e9      	b.n	801b1a4 <_fwalk_sglue+0x10>

0801b1d0 <sniprintf>:
 801b1d0:	b40c      	push	{r2, r3}
 801b1d2:	b530      	push	{r4, r5, lr}
 801b1d4:	4b17      	ldr	r3, [pc, #92]	; (801b234 <sniprintf+0x64>)
 801b1d6:	1e0c      	subs	r4, r1, #0
 801b1d8:	681d      	ldr	r5, [r3, #0]
 801b1da:	b09d      	sub	sp, #116	; 0x74
 801b1dc:	da08      	bge.n	801b1f0 <sniprintf+0x20>
 801b1de:	238b      	movs	r3, #139	; 0x8b
 801b1e0:	602b      	str	r3, [r5, #0]
 801b1e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b1e6:	b01d      	add	sp, #116	; 0x74
 801b1e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b1ec:	b002      	add	sp, #8
 801b1ee:	4770      	bx	lr
 801b1f0:	f44f 7302 	mov.w	r3, #520	; 0x208
 801b1f4:	f8ad 3014 	strh.w	r3, [sp, #20]
 801b1f8:	bf14      	ite	ne
 801b1fa:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801b1fe:	4623      	moveq	r3, r4
 801b200:	9304      	str	r3, [sp, #16]
 801b202:	9307      	str	r3, [sp, #28]
 801b204:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b208:	9002      	str	r0, [sp, #8]
 801b20a:	9006      	str	r0, [sp, #24]
 801b20c:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b210:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801b212:	ab21      	add	r3, sp, #132	; 0x84
 801b214:	a902      	add	r1, sp, #8
 801b216:	4628      	mov	r0, r5
 801b218:	9301      	str	r3, [sp, #4]
 801b21a:	f000 fb0f 	bl	801b83c <_svfiprintf_r>
 801b21e:	1c43      	adds	r3, r0, #1
 801b220:	bfbc      	itt	lt
 801b222:	238b      	movlt	r3, #139	; 0x8b
 801b224:	602b      	strlt	r3, [r5, #0]
 801b226:	2c00      	cmp	r4, #0
 801b228:	d0dd      	beq.n	801b1e6 <sniprintf+0x16>
 801b22a:	9b02      	ldr	r3, [sp, #8]
 801b22c:	2200      	movs	r2, #0
 801b22e:	701a      	strb	r2, [r3, #0]
 801b230:	e7d9      	b.n	801b1e6 <sniprintf+0x16>
 801b232:	bf00      	nop
 801b234:	20002138 	.word	0x20002138

0801b238 <__sread>:
 801b238:	b510      	push	{r4, lr}
 801b23a:	460c      	mov	r4, r1
 801b23c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b240:	f000 f998 	bl	801b574 <_read_r>
 801b244:	2800      	cmp	r0, #0
 801b246:	bfab      	itete	ge
 801b248:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801b24a:	89a3      	ldrhlt	r3, [r4, #12]
 801b24c:	181b      	addge	r3, r3, r0
 801b24e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801b252:	bfac      	ite	ge
 801b254:	6563      	strge	r3, [r4, #84]	; 0x54
 801b256:	81a3      	strhlt	r3, [r4, #12]
 801b258:	bd10      	pop	{r4, pc}

0801b25a <__swrite>:
 801b25a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b25e:	461f      	mov	r7, r3
 801b260:	898b      	ldrh	r3, [r1, #12]
 801b262:	05db      	lsls	r3, r3, #23
 801b264:	4605      	mov	r5, r0
 801b266:	460c      	mov	r4, r1
 801b268:	4616      	mov	r6, r2
 801b26a:	d505      	bpl.n	801b278 <__swrite+0x1e>
 801b26c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b270:	2302      	movs	r3, #2
 801b272:	2200      	movs	r2, #0
 801b274:	f000 f96c 	bl	801b550 <_lseek_r>
 801b278:	89a3      	ldrh	r3, [r4, #12]
 801b27a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b27e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b282:	81a3      	strh	r3, [r4, #12]
 801b284:	4632      	mov	r2, r6
 801b286:	463b      	mov	r3, r7
 801b288:	4628      	mov	r0, r5
 801b28a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b28e:	f000 b9a7 	b.w	801b5e0 <_write_r>

0801b292 <__sseek>:
 801b292:	b510      	push	{r4, lr}
 801b294:	460c      	mov	r4, r1
 801b296:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b29a:	f000 f959 	bl	801b550 <_lseek_r>
 801b29e:	1c43      	adds	r3, r0, #1
 801b2a0:	89a3      	ldrh	r3, [r4, #12]
 801b2a2:	bf15      	itete	ne
 801b2a4:	6560      	strne	r0, [r4, #84]	; 0x54
 801b2a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801b2aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801b2ae:	81a3      	strheq	r3, [r4, #12]
 801b2b0:	bf18      	it	ne
 801b2b2:	81a3      	strhne	r3, [r4, #12]
 801b2b4:	bd10      	pop	{r4, pc}

0801b2b6 <__sclose>:
 801b2b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b2ba:	f000 b8e3 	b.w	801b484 <_close_r>

0801b2be <_vsniprintf_r>:
 801b2be:	b530      	push	{r4, r5, lr}
 801b2c0:	4614      	mov	r4, r2
 801b2c2:	2c00      	cmp	r4, #0
 801b2c4:	b09b      	sub	sp, #108	; 0x6c
 801b2c6:	4605      	mov	r5, r0
 801b2c8:	461a      	mov	r2, r3
 801b2ca:	da05      	bge.n	801b2d8 <_vsniprintf_r+0x1a>
 801b2cc:	238b      	movs	r3, #139	; 0x8b
 801b2ce:	6003      	str	r3, [r0, #0]
 801b2d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b2d4:	b01b      	add	sp, #108	; 0x6c
 801b2d6:	bd30      	pop	{r4, r5, pc}
 801b2d8:	f44f 7302 	mov.w	r3, #520	; 0x208
 801b2dc:	f8ad 300c 	strh.w	r3, [sp, #12]
 801b2e0:	bf14      	ite	ne
 801b2e2:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801b2e6:	4623      	moveq	r3, r4
 801b2e8:	9302      	str	r3, [sp, #8]
 801b2ea:	9305      	str	r3, [sp, #20]
 801b2ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b2f0:	9100      	str	r1, [sp, #0]
 801b2f2:	9104      	str	r1, [sp, #16]
 801b2f4:	f8ad 300e 	strh.w	r3, [sp, #14]
 801b2f8:	4669      	mov	r1, sp
 801b2fa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801b2fc:	f000 fa9e 	bl	801b83c <_svfiprintf_r>
 801b300:	1c43      	adds	r3, r0, #1
 801b302:	bfbc      	itt	lt
 801b304:	238b      	movlt	r3, #139	; 0x8b
 801b306:	602b      	strlt	r3, [r5, #0]
 801b308:	2c00      	cmp	r4, #0
 801b30a:	d0e3      	beq.n	801b2d4 <_vsniprintf_r+0x16>
 801b30c:	9b00      	ldr	r3, [sp, #0]
 801b30e:	2200      	movs	r2, #0
 801b310:	701a      	strb	r2, [r3, #0]
 801b312:	e7df      	b.n	801b2d4 <_vsniprintf_r+0x16>

0801b314 <vsniprintf>:
 801b314:	b507      	push	{r0, r1, r2, lr}
 801b316:	9300      	str	r3, [sp, #0]
 801b318:	4613      	mov	r3, r2
 801b31a:	460a      	mov	r2, r1
 801b31c:	4601      	mov	r1, r0
 801b31e:	4803      	ldr	r0, [pc, #12]	; (801b32c <vsniprintf+0x18>)
 801b320:	6800      	ldr	r0, [r0, #0]
 801b322:	f7ff ffcc 	bl	801b2be <_vsniprintf_r>
 801b326:	b003      	add	sp, #12
 801b328:	f85d fb04 	ldr.w	pc, [sp], #4
 801b32c:	20002138 	.word	0x20002138

0801b330 <memcmp>:
 801b330:	b510      	push	{r4, lr}
 801b332:	3901      	subs	r1, #1
 801b334:	4402      	add	r2, r0
 801b336:	4290      	cmp	r0, r2
 801b338:	d101      	bne.n	801b33e <memcmp+0xe>
 801b33a:	2000      	movs	r0, #0
 801b33c:	e005      	b.n	801b34a <memcmp+0x1a>
 801b33e:	7803      	ldrb	r3, [r0, #0]
 801b340:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801b344:	42a3      	cmp	r3, r4
 801b346:	d001      	beq.n	801b34c <memcmp+0x1c>
 801b348:	1b18      	subs	r0, r3, r4
 801b34a:	bd10      	pop	{r4, pc}
 801b34c:	3001      	adds	r0, #1
 801b34e:	e7f2      	b.n	801b336 <memcmp+0x6>

0801b350 <memmove>:
 801b350:	4288      	cmp	r0, r1
 801b352:	b510      	push	{r4, lr}
 801b354:	eb01 0402 	add.w	r4, r1, r2
 801b358:	d902      	bls.n	801b360 <memmove+0x10>
 801b35a:	4284      	cmp	r4, r0
 801b35c:	4623      	mov	r3, r4
 801b35e:	d807      	bhi.n	801b370 <memmove+0x20>
 801b360:	1e43      	subs	r3, r0, #1
 801b362:	42a1      	cmp	r1, r4
 801b364:	d008      	beq.n	801b378 <memmove+0x28>
 801b366:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b36a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801b36e:	e7f8      	b.n	801b362 <memmove+0x12>
 801b370:	4402      	add	r2, r0
 801b372:	4601      	mov	r1, r0
 801b374:	428a      	cmp	r2, r1
 801b376:	d100      	bne.n	801b37a <memmove+0x2a>
 801b378:	bd10      	pop	{r4, pc}
 801b37a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801b37e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801b382:	e7f7      	b.n	801b374 <memmove+0x24>

0801b384 <memset>:
 801b384:	4402      	add	r2, r0
 801b386:	4603      	mov	r3, r0
 801b388:	4293      	cmp	r3, r2
 801b38a:	d100      	bne.n	801b38e <memset+0xa>
 801b38c:	4770      	bx	lr
 801b38e:	f803 1b01 	strb.w	r1, [r3], #1
 801b392:	e7f9      	b.n	801b388 <memset+0x4>

0801b394 <strchr>:
 801b394:	b2c9      	uxtb	r1, r1
 801b396:	4603      	mov	r3, r0
 801b398:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b39c:	b11a      	cbz	r2, 801b3a6 <strchr+0x12>
 801b39e:	428a      	cmp	r2, r1
 801b3a0:	d1f9      	bne.n	801b396 <strchr+0x2>
 801b3a2:	4618      	mov	r0, r3
 801b3a4:	4770      	bx	lr
 801b3a6:	2900      	cmp	r1, #0
 801b3a8:	bf18      	it	ne
 801b3aa:	2300      	movne	r3, #0
 801b3ac:	e7f9      	b.n	801b3a2 <strchr+0xe>

0801b3ae <strncmp>:
 801b3ae:	b510      	push	{r4, lr}
 801b3b0:	b16a      	cbz	r2, 801b3ce <strncmp+0x20>
 801b3b2:	3901      	subs	r1, #1
 801b3b4:	1884      	adds	r4, r0, r2
 801b3b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b3ba:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801b3be:	429a      	cmp	r2, r3
 801b3c0:	d103      	bne.n	801b3ca <strncmp+0x1c>
 801b3c2:	42a0      	cmp	r0, r4
 801b3c4:	d001      	beq.n	801b3ca <strncmp+0x1c>
 801b3c6:	2a00      	cmp	r2, #0
 801b3c8:	d1f5      	bne.n	801b3b6 <strncmp+0x8>
 801b3ca:	1ad0      	subs	r0, r2, r3
 801b3cc:	bd10      	pop	{r4, pc}
 801b3ce:	4610      	mov	r0, r2
 801b3d0:	e7fc      	b.n	801b3cc <strncmp+0x1e>

0801b3d2 <strncpy>:
 801b3d2:	b510      	push	{r4, lr}
 801b3d4:	3901      	subs	r1, #1
 801b3d6:	4603      	mov	r3, r0
 801b3d8:	b132      	cbz	r2, 801b3e8 <strncpy+0x16>
 801b3da:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801b3de:	f803 4b01 	strb.w	r4, [r3], #1
 801b3e2:	3a01      	subs	r2, #1
 801b3e4:	2c00      	cmp	r4, #0
 801b3e6:	d1f7      	bne.n	801b3d8 <strncpy+0x6>
 801b3e8:	441a      	add	r2, r3
 801b3ea:	2100      	movs	r1, #0
 801b3ec:	4293      	cmp	r3, r2
 801b3ee:	d100      	bne.n	801b3f2 <strncpy+0x20>
 801b3f0:	bd10      	pop	{r4, pc}
 801b3f2:	f803 1b01 	strb.w	r1, [r3], #1
 801b3f6:	e7f9      	b.n	801b3ec <strncpy+0x1a>

0801b3f8 <strstr>:
 801b3f8:	780a      	ldrb	r2, [r1, #0]
 801b3fa:	b570      	push	{r4, r5, r6, lr}
 801b3fc:	b96a      	cbnz	r2, 801b41a <strstr+0x22>
 801b3fe:	bd70      	pop	{r4, r5, r6, pc}
 801b400:	429a      	cmp	r2, r3
 801b402:	d109      	bne.n	801b418 <strstr+0x20>
 801b404:	460c      	mov	r4, r1
 801b406:	4605      	mov	r5, r0
 801b408:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801b40c:	2b00      	cmp	r3, #0
 801b40e:	d0f6      	beq.n	801b3fe <strstr+0x6>
 801b410:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801b414:	429e      	cmp	r6, r3
 801b416:	d0f7      	beq.n	801b408 <strstr+0x10>
 801b418:	3001      	adds	r0, #1
 801b41a:	7803      	ldrb	r3, [r0, #0]
 801b41c:	2b00      	cmp	r3, #0
 801b41e:	d1ef      	bne.n	801b400 <strstr+0x8>
 801b420:	4618      	mov	r0, r3
 801b422:	e7ec      	b.n	801b3fe <strstr+0x6>

0801b424 <_raise_r>:
 801b424:	291f      	cmp	r1, #31
 801b426:	b538      	push	{r3, r4, r5, lr}
 801b428:	4604      	mov	r4, r0
 801b42a:	460d      	mov	r5, r1
 801b42c:	d904      	bls.n	801b438 <_raise_r+0x14>
 801b42e:	2316      	movs	r3, #22
 801b430:	6003      	str	r3, [r0, #0]
 801b432:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b436:	bd38      	pop	{r3, r4, r5, pc}
 801b438:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801b43a:	b112      	cbz	r2, 801b442 <_raise_r+0x1e>
 801b43c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801b440:	b94b      	cbnz	r3, 801b456 <_raise_r+0x32>
 801b442:	4620      	mov	r0, r4
 801b444:	f000 f8ba 	bl	801b5bc <_getpid_r>
 801b448:	462a      	mov	r2, r5
 801b44a:	4601      	mov	r1, r0
 801b44c:	4620      	mov	r0, r4
 801b44e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b452:	f000 b8a1 	b.w	801b598 <_kill_r>
 801b456:	2b01      	cmp	r3, #1
 801b458:	d00a      	beq.n	801b470 <_raise_r+0x4c>
 801b45a:	1c59      	adds	r1, r3, #1
 801b45c:	d103      	bne.n	801b466 <_raise_r+0x42>
 801b45e:	2316      	movs	r3, #22
 801b460:	6003      	str	r3, [r0, #0]
 801b462:	2001      	movs	r0, #1
 801b464:	e7e7      	b.n	801b436 <_raise_r+0x12>
 801b466:	2400      	movs	r4, #0
 801b468:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801b46c:	4628      	mov	r0, r5
 801b46e:	4798      	blx	r3
 801b470:	2000      	movs	r0, #0
 801b472:	e7e0      	b.n	801b436 <_raise_r+0x12>

0801b474 <raise>:
 801b474:	4b02      	ldr	r3, [pc, #8]	; (801b480 <raise+0xc>)
 801b476:	4601      	mov	r1, r0
 801b478:	6818      	ldr	r0, [r3, #0]
 801b47a:	f7ff bfd3 	b.w	801b424 <_raise_r>
 801b47e:	bf00      	nop
 801b480:	20002138 	.word	0x20002138

0801b484 <_close_r>:
 801b484:	b538      	push	{r3, r4, r5, lr}
 801b486:	4d06      	ldr	r5, [pc, #24]	; (801b4a0 <_close_r+0x1c>)
 801b488:	2300      	movs	r3, #0
 801b48a:	4604      	mov	r4, r0
 801b48c:	4608      	mov	r0, r1
 801b48e:	602b      	str	r3, [r5, #0]
 801b490:	f7e7 fff3 	bl	800347a <_close>
 801b494:	1c43      	adds	r3, r0, #1
 801b496:	d102      	bne.n	801b49e <_close_r+0x1a>
 801b498:	682b      	ldr	r3, [r5, #0]
 801b49a:	b103      	cbz	r3, 801b49e <_close_r+0x1a>
 801b49c:	6023      	str	r3, [r4, #0]
 801b49e:	bd38      	pop	{r3, r4, r5, pc}
 801b4a0:	20010b74 	.word	0x20010b74

0801b4a4 <_reclaim_reent>:
 801b4a4:	4b29      	ldr	r3, [pc, #164]	; (801b54c <_reclaim_reent+0xa8>)
 801b4a6:	681b      	ldr	r3, [r3, #0]
 801b4a8:	4283      	cmp	r3, r0
 801b4aa:	b570      	push	{r4, r5, r6, lr}
 801b4ac:	4604      	mov	r4, r0
 801b4ae:	d04b      	beq.n	801b548 <_reclaim_reent+0xa4>
 801b4b0:	69c3      	ldr	r3, [r0, #28]
 801b4b2:	b143      	cbz	r3, 801b4c6 <_reclaim_reent+0x22>
 801b4b4:	68db      	ldr	r3, [r3, #12]
 801b4b6:	2b00      	cmp	r3, #0
 801b4b8:	d144      	bne.n	801b544 <_reclaim_reent+0xa0>
 801b4ba:	69e3      	ldr	r3, [r4, #28]
 801b4bc:	6819      	ldr	r1, [r3, #0]
 801b4be:	b111      	cbz	r1, 801b4c6 <_reclaim_reent+0x22>
 801b4c0:	4620      	mov	r0, r4
 801b4c2:	f000 f90d 	bl	801b6e0 <_free_r>
 801b4c6:	6961      	ldr	r1, [r4, #20]
 801b4c8:	b111      	cbz	r1, 801b4d0 <_reclaim_reent+0x2c>
 801b4ca:	4620      	mov	r0, r4
 801b4cc:	f000 f908 	bl	801b6e0 <_free_r>
 801b4d0:	69e1      	ldr	r1, [r4, #28]
 801b4d2:	b111      	cbz	r1, 801b4da <_reclaim_reent+0x36>
 801b4d4:	4620      	mov	r0, r4
 801b4d6:	f000 f903 	bl	801b6e0 <_free_r>
 801b4da:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801b4dc:	b111      	cbz	r1, 801b4e4 <_reclaim_reent+0x40>
 801b4de:	4620      	mov	r0, r4
 801b4e0:	f000 f8fe 	bl	801b6e0 <_free_r>
 801b4e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b4e6:	b111      	cbz	r1, 801b4ee <_reclaim_reent+0x4a>
 801b4e8:	4620      	mov	r0, r4
 801b4ea:	f000 f8f9 	bl	801b6e0 <_free_r>
 801b4ee:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801b4f0:	b111      	cbz	r1, 801b4f8 <_reclaim_reent+0x54>
 801b4f2:	4620      	mov	r0, r4
 801b4f4:	f000 f8f4 	bl	801b6e0 <_free_r>
 801b4f8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801b4fa:	b111      	cbz	r1, 801b502 <_reclaim_reent+0x5e>
 801b4fc:	4620      	mov	r0, r4
 801b4fe:	f000 f8ef 	bl	801b6e0 <_free_r>
 801b502:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801b504:	b111      	cbz	r1, 801b50c <_reclaim_reent+0x68>
 801b506:	4620      	mov	r0, r4
 801b508:	f000 f8ea 	bl	801b6e0 <_free_r>
 801b50c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801b50e:	b111      	cbz	r1, 801b516 <_reclaim_reent+0x72>
 801b510:	4620      	mov	r0, r4
 801b512:	f000 f8e5 	bl	801b6e0 <_free_r>
 801b516:	6a23      	ldr	r3, [r4, #32]
 801b518:	b1b3      	cbz	r3, 801b548 <_reclaim_reent+0xa4>
 801b51a:	4620      	mov	r0, r4
 801b51c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b520:	4718      	bx	r3
 801b522:	5949      	ldr	r1, [r1, r5]
 801b524:	b941      	cbnz	r1, 801b538 <_reclaim_reent+0x94>
 801b526:	3504      	adds	r5, #4
 801b528:	69e3      	ldr	r3, [r4, #28]
 801b52a:	2d80      	cmp	r5, #128	; 0x80
 801b52c:	68d9      	ldr	r1, [r3, #12]
 801b52e:	d1f8      	bne.n	801b522 <_reclaim_reent+0x7e>
 801b530:	4620      	mov	r0, r4
 801b532:	f000 f8d5 	bl	801b6e0 <_free_r>
 801b536:	e7c0      	b.n	801b4ba <_reclaim_reent+0x16>
 801b538:	680e      	ldr	r6, [r1, #0]
 801b53a:	4620      	mov	r0, r4
 801b53c:	f000 f8d0 	bl	801b6e0 <_free_r>
 801b540:	4631      	mov	r1, r6
 801b542:	e7ef      	b.n	801b524 <_reclaim_reent+0x80>
 801b544:	2500      	movs	r5, #0
 801b546:	e7ef      	b.n	801b528 <_reclaim_reent+0x84>
 801b548:	bd70      	pop	{r4, r5, r6, pc}
 801b54a:	bf00      	nop
 801b54c:	20002138 	.word	0x20002138

0801b550 <_lseek_r>:
 801b550:	b538      	push	{r3, r4, r5, lr}
 801b552:	4d07      	ldr	r5, [pc, #28]	; (801b570 <_lseek_r+0x20>)
 801b554:	4604      	mov	r4, r0
 801b556:	4608      	mov	r0, r1
 801b558:	4611      	mov	r1, r2
 801b55a:	2200      	movs	r2, #0
 801b55c:	602a      	str	r2, [r5, #0]
 801b55e:	461a      	mov	r2, r3
 801b560:	f7e7 ffb2 	bl	80034c8 <_lseek>
 801b564:	1c43      	adds	r3, r0, #1
 801b566:	d102      	bne.n	801b56e <_lseek_r+0x1e>
 801b568:	682b      	ldr	r3, [r5, #0]
 801b56a:	b103      	cbz	r3, 801b56e <_lseek_r+0x1e>
 801b56c:	6023      	str	r3, [r4, #0]
 801b56e:	bd38      	pop	{r3, r4, r5, pc}
 801b570:	20010b74 	.word	0x20010b74

0801b574 <_read_r>:
 801b574:	b538      	push	{r3, r4, r5, lr}
 801b576:	4d07      	ldr	r5, [pc, #28]	; (801b594 <_read_r+0x20>)
 801b578:	4604      	mov	r4, r0
 801b57a:	4608      	mov	r0, r1
 801b57c:	4611      	mov	r1, r2
 801b57e:	2200      	movs	r2, #0
 801b580:	602a      	str	r2, [r5, #0]
 801b582:	461a      	mov	r2, r3
 801b584:	f7e7 ff40 	bl	8003408 <_read>
 801b588:	1c43      	adds	r3, r0, #1
 801b58a:	d102      	bne.n	801b592 <_read_r+0x1e>
 801b58c:	682b      	ldr	r3, [r5, #0]
 801b58e:	b103      	cbz	r3, 801b592 <_read_r+0x1e>
 801b590:	6023      	str	r3, [r4, #0]
 801b592:	bd38      	pop	{r3, r4, r5, pc}
 801b594:	20010b74 	.word	0x20010b74

0801b598 <_kill_r>:
 801b598:	b538      	push	{r3, r4, r5, lr}
 801b59a:	4d07      	ldr	r5, [pc, #28]	; (801b5b8 <_kill_r+0x20>)
 801b59c:	2300      	movs	r3, #0
 801b59e:	4604      	mov	r4, r0
 801b5a0:	4608      	mov	r0, r1
 801b5a2:	4611      	mov	r1, r2
 801b5a4:	602b      	str	r3, [r5, #0]
 801b5a6:	f7e7 ff15 	bl	80033d4 <_kill>
 801b5aa:	1c43      	adds	r3, r0, #1
 801b5ac:	d102      	bne.n	801b5b4 <_kill_r+0x1c>
 801b5ae:	682b      	ldr	r3, [r5, #0]
 801b5b0:	b103      	cbz	r3, 801b5b4 <_kill_r+0x1c>
 801b5b2:	6023      	str	r3, [r4, #0]
 801b5b4:	bd38      	pop	{r3, r4, r5, pc}
 801b5b6:	bf00      	nop
 801b5b8:	20010b74 	.word	0x20010b74

0801b5bc <_getpid_r>:
 801b5bc:	f7e7 bf02 	b.w	80033c4 <_getpid>

0801b5c0 <_sbrk_r>:
 801b5c0:	b538      	push	{r3, r4, r5, lr}
 801b5c2:	4d06      	ldr	r5, [pc, #24]	; (801b5dc <_sbrk_r+0x1c>)
 801b5c4:	2300      	movs	r3, #0
 801b5c6:	4604      	mov	r4, r0
 801b5c8:	4608      	mov	r0, r1
 801b5ca:	602b      	str	r3, [r5, #0]
 801b5cc:	f7e7 ff8a 	bl	80034e4 <_sbrk>
 801b5d0:	1c43      	adds	r3, r0, #1
 801b5d2:	d102      	bne.n	801b5da <_sbrk_r+0x1a>
 801b5d4:	682b      	ldr	r3, [r5, #0]
 801b5d6:	b103      	cbz	r3, 801b5da <_sbrk_r+0x1a>
 801b5d8:	6023      	str	r3, [r4, #0]
 801b5da:	bd38      	pop	{r3, r4, r5, pc}
 801b5dc:	20010b74 	.word	0x20010b74

0801b5e0 <_write_r>:
 801b5e0:	b538      	push	{r3, r4, r5, lr}
 801b5e2:	4d07      	ldr	r5, [pc, #28]	; (801b600 <_write_r+0x20>)
 801b5e4:	4604      	mov	r4, r0
 801b5e6:	4608      	mov	r0, r1
 801b5e8:	4611      	mov	r1, r2
 801b5ea:	2200      	movs	r2, #0
 801b5ec:	602a      	str	r2, [r5, #0]
 801b5ee:	461a      	mov	r2, r3
 801b5f0:	f7e7 ff27 	bl	8003442 <_write>
 801b5f4:	1c43      	adds	r3, r0, #1
 801b5f6:	d102      	bne.n	801b5fe <_write_r+0x1e>
 801b5f8:	682b      	ldr	r3, [r5, #0]
 801b5fa:	b103      	cbz	r3, 801b5fe <_write_r+0x1e>
 801b5fc:	6023      	str	r3, [r4, #0]
 801b5fe:	bd38      	pop	{r3, r4, r5, pc}
 801b600:	20010b74 	.word	0x20010b74

0801b604 <__errno>:
 801b604:	4b01      	ldr	r3, [pc, #4]	; (801b60c <__errno+0x8>)
 801b606:	6818      	ldr	r0, [r3, #0]
 801b608:	4770      	bx	lr
 801b60a:	bf00      	nop
 801b60c:	20002138 	.word	0x20002138

0801b610 <__libc_init_array>:
 801b610:	b570      	push	{r4, r5, r6, lr}
 801b612:	4d0d      	ldr	r5, [pc, #52]	; (801b648 <__libc_init_array+0x38>)
 801b614:	4c0d      	ldr	r4, [pc, #52]	; (801b64c <__libc_init_array+0x3c>)
 801b616:	1b64      	subs	r4, r4, r5
 801b618:	10a4      	asrs	r4, r4, #2
 801b61a:	2600      	movs	r6, #0
 801b61c:	42a6      	cmp	r6, r4
 801b61e:	d109      	bne.n	801b634 <__libc_init_array+0x24>
 801b620:	4d0b      	ldr	r5, [pc, #44]	; (801b650 <__libc_init_array+0x40>)
 801b622:	4c0c      	ldr	r4, [pc, #48]	; (801b654 <__libc_init_array+0x44>)
 801b624:	f000 feb6 	bl	801c394 <_init>
 801b628:	1b64      	subs	r4, r4, r5
 801b62a:	10a4      	asrs	r4, r4, #2
 801b62c:	2600      	movs	r6, #0
 801b62e:	42a6      	cmp	r6, r4
 801b630:	d105      	bne.n	801b63e <__libc_init_array+0x2e>
 801b632:	bd70      	pop	{r4, r5, r6, pc}
 801b634:	f855 3b04 	ldr.w	r3, [r5], #4
 801b638:	4798      	blx	r3
 801b63a:	3601      	adds	r6, #1
 801b63c:	e7ee      	b.n	801b61c <__libc_init_array+0xc>
 801b63e:	f855 3b04 	ldr.w	r3, [r5], #4
 801b642:	4798      	blx	r3
 801b644:	3601      	adds	r6, #1
 801b646:	e7f2      	b.n	801b62e <__libc_init_array+0x1e>
 801b648:	0801dfa8 	.word	0x0801dfa8
 801b64c:	0801dfa8 	.word	0x0801dfa8
 801b650:	0801dfa8 	.word	0x0801dfa8
 801b654:	0801dfbc 	.word	0x0801dfbc

0801b658 <__retarget_lock_init_recursive>:
 801b658:	4770      	bx	lr

0801b65a <__retarget_lock_acquire_recursive>:
 801b65a:	4770      	bx	lr

0801b65c <__retarget_lock_release_recursive>:
 801b65c:	4770      	bx	lr

0801b65e <strcpy>:
 801b65e:	4603      	mov	r3, r0
 801b660:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b664:	f803 2b01 	strb.w	r2, [r3], #1
 801b668:	2a00      	cmp	r2, #0
 801b66a:	d1f9      	bne.n	801b660 <strcpy+0x2>
 801b66c:	4770      	bx	lr

0801b66e <memcpy>:
 801b66e:	440a      	add	r2, r1
 801b670:	4291      	cmp	r1, r2
 801b672:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801b676:	d100      	bne.n	801b67a <memcpy+0xc>
 801b678:	4770      	bx	lr
 801b67a:	b510      	push	{r4, lr}
 801b67c:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b680:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b684:	4291      	cmp	r1, r2
 801b686:	d1f9      	bne.n	801b67c <memcpy+0xe>
 801b688:	bd10      	pop	{r4, pc}
	...

0801b68c <__assert_func>:
 801b68c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801b68e:	4614      	mov	r4, r2
 801b690:	461a      	mov	r2, r3
 801b692:	4b09      	ldr	r3, [pc, #36]	; (801b6b8 <__assert_func+0x2c>)
 801b694:	681b      	ldr	r3, [r3, #0]
 801b696:	4605      	mov	r5, r0
 801b698:	68d8      	ldr	r0, [r3, #12]
 801b69a:	b14c      	cbz	r4, 801b6b0 <__assert_func+0x24>
 801b69c:	4b07      	ldr	r3, [pc, #28]	; (801b6bc <__assert_func+0x30>)
 801b69e:	9100      	str	r1, [sp, #0]
 801b6a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801b6a4:	4906      	ldr	r1, [pc, #24]	; (801b6c0 <__assert_func+0x34>)
 801b6a6:	462b      	mov	r3, r5
 801b6a8:	f000 fc04 	bl	801beb4 <fiprintf>
 801b6ac:	f7ff fa84 	bl	801abb8 <abort>
 801b6b0:	4b04      	ldr	r3, [pc, #16]	; (801b6c4 <__assert_func+0x38>)
 801b6b2:	461c      	mov	r4, r3
 801b6b4:	e7f3      	b.n	801b69e <__assert_func+0x12>
 801b6b6:	bf00      	nop
 801b6b8:	20002138 	.word	0x20002138
 801b6bc:	0801df30 	.word	0x0801df30
 801b6c0:	0801df3d 	.word	0x0801df3d
 801b6c4:	0801df6b 	.word	0x0801df6b

0801b6c8 <__env_lock>:
 801b6c8:	4801      	ldr	r0, [pc, #4]	; (801b6d0 <__env_lock+0x8>)
 801b6ca:	f7ff bfc6 	b.w	801b65a <__retarget_lock_acquire_recursive>
 801b6ce:	bf00      	nop
 801b6d0:	20010b78 	.word	0x20010b78

0801b6d4 <__env_unlock>:
 801b6d4:	4801      	ldr	r0, [pc, #4]	; (801b6dc <__env_unlock+0x8>)
 801b6d6:	f7ff bfc1 	b.w	801b65c <__retarget_lock_release_recursive>
 801b6da:	bf00      	nop
 801b6dc:	20010b78 	.word	0x20010b78

0801b6e0 <_free_r>:
 801b6e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b6e2:	2900      	cmp	r1, #0
 801b6e4:	d044      	beq.n	801b770 <_free_r+0x90>
 801b6e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b6ea:	9001      	str	r0, [sp, #4]
 801b6ec:	2b00      	cmp	r3, #0
 801b6ee:	f1a1 0404 	sub.w	r4, r1, #4
 801b6f2:	bfb8      	it	lt
 801b6f4:	18e4      	addlt	r4, r4, r3
 801b6f6:	f7ff fb7d 	bl	801adf4 <__malloc_lock>
 801b6fa:	4a1e      	ldr	r2, [pc, #120]	; (801b774 <_free_r+0x94>)
 801b6fc:	9801      	ldr	r0, [sp, #4]
 801b6fe:	6813      	ldr	r3, [r2, #0]
 801b700:	b933      	cbnz	r3, 801b710 <_free_r+0x30>
 801b702:	6063      	str	r3, [r4, #4]
 801b704:	6014      	str	r4, [r2, #0]
 801b706:	b003      	add	sp, #12
 801b708:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b70c:	f7ff bb78 	b.w	801ae00 <__malloc_unlock>
 801b710:	42a3      	cmp	r3, r4
 801b712:	d908      	bls.n	801b726 <_free_r+0x46>
 801b714:	6825      	ldr	r5, [r4, #0]
 801b716:	1961      	adds	r1, r4, r5
 801b718:	428b      	cmp	r3, r1
 801b71a:	bf01      	itttt	eq
 801b71c:	6819      	ldreq	r1, [r3, #0]
 801b71e:	685b      	ldreq	r3, [r3, #4]
 801b720:	1949      	addeq	r1, r1, r5
 801b722:	6021      	streq	r1, [r4, #0]
 801b724:	e7ed      	b.n	801b702 <_free_r+0x22>
 801b726:	461a      	mov	r2, r3
 801b728:	685b      	ldr	r3, [r3, #4]
 801b72a:	b10b      	cbz	r3, 801b730 <_free_r+0x50>
 801b72c:	42a3      	cmp	r3, r4
 801b72e:	d9fa      	bls.n	801b726 <_free_r+0x46>
 801b730:	6811      	ldr	r1, [r2, #0]
 801b732:	1855      	adds	r5, r2, r1
 801b734:	42a5      	cmp	r5, r4
 801b736:	d10b      	bne.n	801b750 <_free_r+0x70>
 801b738:	6824      	ldr	r4, [r4, #0]
 801b73a:	4421      	add	r1, r4
 801b73c:	1854      	adds	r4, r2, r1
 801b73e:	42a3      	cmp	r3, r4
 801b740:	6011      	str	r1, [r2, #0]
 801b742:	d1e0      	bne.n	801b706 <_free_r+0x26>
 801b744:	681c      	ldr	r4, [r3, #0]
 801b746:	685b      	ldr	r3, [r3, #4]
 801b748:	6053      	str	r3, [r2, #4]
 801b74a:	440c      	add	r4, r1
 801b74c:	6014      	str	r4, [r2, #0]
 801b74e:	e7da      	b.n	801b706 <_free_r+0x26>
 801b750:	d902      	bls.n	801b758 <_free_r+0x78>
 801b752:	230c      	movs	r3, #12
 801b754:	6003      	str	r3, [r0, #0]
 801b756:	e7d6      	b.n	801b706 <_free_r+0x26>
 801b758:	6825      	ldr	r5, [r4, #0]
 801b75a:	1961      	adds	r1, r4, r5
 801b75c:	428b      	cmp	r3, r1
 801b75e:	bf04      	itt	eq
 801b760:	6819      	ldreq	r1, [r3, #0]
 801b762:	685b      	ldreq	r3, [r3, #4]
 801b764:	6063      	str	r3, [r4, #4]
 801b766:	bf04      	itt	eq
 801b768:	1949      	addeq	r1, r1, r5
 801b76a:	6021      	streq	r1, [r4, #0]
 801b76c:	6054      	str	r4, [r2, #4]
 801b76e:	e7ca      	b.n	801b706 <_free_r+0x26>
 801b770:	b003      	add	sp, #12
 801b772:	bd30      	pop	{r4, r5, pc}
 801b774:	20010a30 	.word	0x20010a30

0801b778 <_malloc_usable_size_r>:
 801b778:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b77c:	1f18      	subs	r0, r3, #4
 801b77e:	2b00      	cmp	r3, #0
 801b780:	bfbc      	itt	lt
 801b782:	580b      	ldrlt	r3, [r1, r0]
 801b784:	18c0      	addlt	r0, r0, r3
 801b786:	4770      	bx	lr

0801b788 <__ssputs_r>:
 801b788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b78c:	688e      	ldr	r6, [r1, #8]
 801b78e:	461f      	mov	r7, r3
 801b790:	42be      	cmp	r6, r7
 801b792:	680b      	ldr	r3, [r1, #0]
 801b794:	4682      	mov	sl, r0
 801b796:	460c      	mov	r4, r1
 801b798:	4690      	mov	r8, r2
 801b79a:	d82c      	bhi.n	801b7f6 <__ssputs_r+0x6e>
 801b79c:	898a      	ldrh	r2, [r1, #12]
 801b79e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801b7a2:	d026      	beq.n	801b7f2 <__ssputs_r+0x6a>
 801b7a4:	6965      	ldr	r5, [r4, #20]
 801b7a6:	6909      	ldr	r1, [r1, #16]
 801b7a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b7ac:	eba3 0901 	sub.w	r9, r3, r1
 801b7b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801b7b4:	1c7b      	adds	r3, r7, #1
 801b7b6:	444b      	add	r3, r9
 801b7b8:	106d      	asrs	r5, r5, #1
 801b7ba:	429d      	cmp	r5, r3
 801b7bc:	bf38      	it	cc
 801b7be:	461d      	movcc	r5, r3
 801b7c0:	0553      	lsls	r3, r2, #21
 801b7c2:	d527      	bpl.n	801b814 <__ssputs_r+0x8c>
 801b7c4:	4629      	mov	r1, r5
 801b7c6:	f7ff fa95 	bl	801acf4 <_malloc_r>
 801b7ca:	4606      	mov	r6, r0
 801b7cc:	b360      	cbz	r0, 801b828 <__ssputs_r+0xa0>
 801b7ce:	6921      	ldr	r1, [r4, #16]
 801b7d0:	464a      	mov	r2, r9
 801b7d2:	f7ff ff4c 	bl	801b66e <memcpy>
 801b7d6:	89a3      	ldrh	r3, [r4, #12]
 801b7d8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801b7dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b7e0:	81a3      	strh	r3, [r4, #12]
 801b7e2:	6126      	str	r6, [r4, #16]
 801b7e4:	6165      	str	r5, [r4, #20]
 801b7e6:	444e      	add	r6, r9
 801b7e8:	eba5 0509 	sub.w	r5, r5, r9
 801b7ec:	6026      	str	r6, [r4, #0]
 801b7ee:	60a5      	str	r5, [r4, #8]
 801b7f0:	463e      	mov	r6, r7
 801b7f2:	42be      	cmp	r6, r7
 801b7f4:	d900      	bls.n	801b7f8 <__ssputs_r+0x70>
 801b7f6:	463e      	mov	r6, r7
 801b7f8:	6820      	ldr	r0, [r4, #0]
 801b7fa:	4632      	mov	r2, r6
 801b7fc:	4641      	mov	r1, r8
 801b7fe:	f7ff fda7 	bl	801b350 <memmove>
 801b802:	68a3      	ldr	r3, [r4, #8]
 801b804:	1b9b      	subs	r3, r3, r6
 801b806:	60a3      	str	r3, [r4, #8]
 801b808:	6823      	ldr	r3, [r4, #0]
 801b80a:	4433      	add	r3, r6
 801b80c:	6023      	str	r3, [r4, #0]
 801b80e:	2000      	movs	r0, #0
 801b810:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b814:	462a      	mov	r2, r5
 801b816:	f7ff fb6d 	bl	801aef4 <_realloc_r>
 801b81a:	4606      	mov	r6, r0
 801b81c:	2800      	cmp	r0, #0
 801b81e:	d1e0      	bne.n	801b7e2 <__ssputs_r+0x5a>
 801b820:	6921      	ldr	r1, [r4, #16]
 801b822:	4650      	mov	r0, sl
 801b824:	f7ff ff5c 	bl	801b6e0 <_free_r>
 801b828:	230c      	movs	r3, #12
 801b82a:	f8ca 3000 	str.w	r3, [sl]
 801b82e:	89a3      	ldrh	r3, [r4, #12]
 801b830:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b834:	81a3      	strh	r3, [r4, #12]
 801b836:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b83a:	e7e9      	b.n	801b810 <__ssputs_r+0x88>

0801b83c <_svfiprintf_r>:
 801b83c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b840:	4698      	mov	r8, r3
 801b842:	898b      	ldrh	r3, [r1, #12]
 801b844:	061b      	lsls	r3, r3, #24
 801b846:	b09d      	sub	sp, #116	; 0x74
 801b848:	4607      	mov	r7, r0
 801b84a:	460d      	mov	r5, r1
 801b84c:	4614      	mov	r4, r2
 801b84e:	d50e      	bpl.n	801b86e <_svfiprintf_r+0x32>
 801b850:	690b      	ldr	r3, [r1, #16]
 801b852:	b963      	cbnz	r3, 801b86e <_svfiprintf_r+0x32>
 801b854:	2140      	movs	r1, #64	; 0x40
 801b856:	f7ff fa4d 	bl	801acf4 <_malloc_r>
 801b85a:	6028      	str	r0, [r5, #0]
 801b85c:	6128      	str	r0, [r5, #16]
 801b85e:	b920      	cbnz	r0, 801b86a <_svfiprintf_r+0x2e>
 801b860:	230c      	movs	r3, #12
 801b862:	603b      	str	r3, [r7, #0]
 801b864:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b868:	e0d0      	b.n	801ba0c <_svfiprintf_r+0x1d0>
 801b86a:	2340      	movs	r3, #64	; 0x40
 801b86c:	616b      	str	r3, [r5, #20]
 801b86e:	2300      	movs	r3, #0
 801b870:	9309      	str	r3, [sp, #36]	; 0x24
 801b872:	2320      	movs	r3, #32
 801b874:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b878:	f8cd 800c 	str.w	r8, [sp, #12]
 801b87c:	2330      	movs	r3, #48	; 0x30
 801b87e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801ba24 <_svfiprintf_r+0x1e8>
 801b882:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b886:	f04f 0901 	mov.w	r9, #1
 801b88a:	4623      	mov	r3, r4
 801b88c:	469a      	mov	sl, r3
 801b88e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b892:	b10a      	cbz	r2, 801b898 <_svfiprintf_r+0x5c>
 801b894:	2a25      	cmp	r2, #37	; 0x25
 801b896:	d1f9      	bne.n	801b88c <_svfiprintf_r+0x50>
 801b898:	ebba 0b04 	subs.w	fp, sl, r4
 801b89c:	d00b      	beq.n	801b8b6 <_svfiprintf_r+0x7a>
 801b89e:	465b      	mov	r3, fp
 801b8a0:	4622      	mov	r2, r4
 801b8a2:	4629      	mov	r1, r5
 801b8a4:	4638      	mov	r0, r7
 801b8a6:	f7ff ff6f 	bl	801b788 <__ssputs_r>
 801b8aa:	3001      	adds	r0, #1
 801b8ac:	f000 80a9 	beq.w	801ba02 <_svfiprintf_r+0x1c6>
 801b8b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b8b2:	445a      	add	r2, fp
 801b8b4:	9209      	str	r2, [sp, #36]	; 0x24
 801b8b6:	f89a 3000 	ldrb.w	r3, [sl]
 801b8ba:	2b00      	cmp	r3, #0
 801b8bc:	f000 80a1 	beq.w	801ba02 <_svfiprintf_r+0x1c6>
 801b8c0:	2300      	movs	r3, #0
 801b8c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801b8c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b8ca:	f10a 0a01 	add.w	sl, sl, #1
 801b8ce:	9304      	str	r3, [sp, #16]
 801b8d0:	9307      	str	r3, [sp, #28]
 801b8d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b8d6:	931a      	str	r3, [sp, #104]	; 0x68
 801b8d8:	4654      	mov	r4, sl
 801b8da:	2205      	movs	r2, #5
 801b8dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b8e0:	4850      	ldr	r0, [pc, #320]	; (801ba24 <_svfiprintf_r+0x1e8>)
 801b8e2:	f7e4 fcbd 	bl	8000260 <memchr>
 801b8e6:	9a04      	ldr	r2, [sp, #16]
 801b8e8:	b9d8      	cbnz	r0, 801b922 <_svfiprintf_r+0xe6>
 801b8ea:	06d0      	lsls	r0, r2, #27
 801b8ec:	bf44      	itt	mi
 801b8ee:	2320      	movmi	r3, #32
 801b8f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b8f4:	0711      	lsls	r1, r2, #28
 801b8f6:	bf44      	itt	mi
 801b8f8:	232b      	movmi	r3, #43	; 0x2b
 801b8fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b8fe:	f89a 3000 	ldrb.w	r3, [sl]
 801b902:	2b2a      	cmp	r3, #42	; 0x2a
 801b904:	d015      	beq.n	801b932 <_svfiprintf_r+0xf6>
 801b906:	9a07      	ldr	r2, [sp, #28]
 801b908:	4654      	mov	r4, sl
 801b90a:	2000      	movs	r0, #0
 801b90c:	f04f 0c0a 	mov.w	ip, #10
 801b910:	4621      	mov	r1, r4
 801b912:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b916:	3b30      	subs	r3, #48	; 0x30
 801b918:	2b09      	cmp	r3, #9
 801b91a:	d94d      	bls.n	801b9b8 <_svfiprintf_r+0x17c>
 801b91c:	b1b0      	cbz	r0, 801b94c <_svfiprintf_r+0x110>
 801b91e:	9207      	str	r2, [sp, #28]
 801b920:	e014      	b.n	801b94c <_svfiprintf_r+0x110>
 801b922:	eba0 0308 	sub.w	r3, r0, r8
 801b926:	fa09 f303 	lsl.w	r3, r9, r3
 801b92a:	4313      	orrs	r3, r2
 801b92c:	9304      	str	r3, [sp, #16]
 801b92e:	46a2      	mov	sl, r4
 801b930:	e7d2      	b.n	801b8d8 <_svfiprintf_r+0x9c>
 801b932:	9b03      	ldr	r3, [sp, #12]
 801b934:	1d19      	adds	r1, r3, #4
 801b936:	681b      	ldr	r3, [r3, #0]
 801b938:	9103      	str	r1, [sp, #12]
 801b93a:	2b00      	cmp	r3, #0
 801b93c:	bfbb      	ittet	lt
 801b93e:	425b      	neglt	r3, r3
 801b940:	f042 0202 	orrlt.w	r2, r2, #2
 801b944:	9307      	strge	r3, [sp, #28]
 801b946:	9307      	strlt	r3, [sp, #28]
 801b948:	bfb8      	it	lt
 801b94a:	9204      	strlt	r2, [sp, #16]
 801b94c:	7823      	ldrb	r3, [r4, #0]
 801b94e:	2b2e      	cmp	r3, #46	; 0x2e
 801b950:	d10c      	bne.n	801b96c <_svfiprintf_r+0x130>
 801b952:	7863      	ldrb	r3, [r4, #1]
 801b954:	2b2a      	cmp	r3, #42	; 0x2a
 801b956:	d134      	bne.n	801b9c2 <_svfiprintf_r+0x186>
 801b958:	9b03      	ldr	r3, [sp, #12]
 801b95a:	1d1a      	adds	r2, r3, #4
 801b95c:	681b      	ldr	r3, [r3, #0]
 801b95e:	9203      	str	r2, [sp, #12]
 801b960:	2b00      	cmp	r3, #0
 801b962:	bfb8      	it	lt
 801b964:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801b968:	3402      	adds	r4, #2
 801b96a:	9305      	str	r3, [sp, #20]
 801b96c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801ba34 <_svfiprintf_r+0x1f8>
 801b970:	7821      	ldrb	r1, [r4, #0]
 801b972:	2203      	movs	r2, #3
 801b974:	4650      	mov	r0, sl
 801b976:	f7e4 fc73 	bl	8000260 <memchr>
 801b97a:	b138      	cbz	r0, 801b98c <_svfiprintf_r+0x150>
 801b97c:	9b04      	ldr	r3, [sp, #16]
 801b97e:	eba0 000a 	sub.w	r0, r0, sl
 801b982:	2240      	movs	r2, #64	; 0x40
 801b984:	4082      	lsls	r2, r0
 801b986:	4313      	orrs	r3, r2
 801b988:	3401      	adds	r4, #1
 801b98a:	9304      	str	r3, [sp, #16]
 801b98c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b990:	4825      	ldr	r0, [pc, #148]	; (801ba28 <_svfiprintf_r+0x1ec>)
 801b992:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b996:	2206      	movs	r2, #6
 801b998:	f7e4 fc62 	bl	8000260 <memchr>
 801b99c:	2800      	cmp	r0, #0
 801b99e:	d038      	beq.n	801ba12 <_svfiprintf_r+0x1d6>
 801b9a0:	4b22      	ldr	r3, [pc, #136]	; (801ba2c <_svfiprintf_r+0x1f0>)
 801b9a2:	bb1b      	cbnz	r3, 801b9ec <_svfiprintf_r+0x1b0>
 801b9a4:	9b03      	ldr	r3, [sp, #12]
 801b9a6:	3307      	adds	r3, #7
 801b9a8:	f023 0307 	bic.w	r3, r3, #7
 801b9ac:	3308      	adds	r3, #8
 801b9ae:	9303      	str	r3, [sp, #12]
 801b9b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b9b2:	4433      	add	r3, r6
 801b9b4:	9309      	str	r3, [sp, #36]	; 0x24
 801b9b6:	e768      	b.n	801b88a <_svfiprintf_r+0x4e>
 801b9b8:	fb0c 3202 	mla	r2, ip, r2, r3
 801b9bc:	460c      	mov	r4, r1
 801b9be:	2001      	movs	r0, #1
 801b9c0:	e7a6      	b.n	801b910 <_svfiprintf_r+0xd4>
 801b9c2:	2300      	movs	r3, #0
 801b9c4:	3401      	adds	r4, #1
 801b9c6:	9305      	str	r3, [sp, #20]
 801b9c8:	4619      	mov	r1, r3
 801b9ca:	f04f 0c0a 	mov.w	ip, #10
 801b9ce:	4620      	mov	r0, r4
 801b9d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b9d4:	3a30      	subs	r2, #48	; 0x30
 801b9d6:	2a09      	cmp	r2, #9
 801b9d8:	d903      	bls.n	801b9e2 <_svfiprintf_r+0x1a6>
 801b9da:	2b00      	cmp	r3, #0
 801b9dc:	d0c6      	beq.n	801b96c <_svfiprintf_r+0x130>
 801b9de:	9105      	str	r1, [sp, #20]
 801b9e0:	e7c4      	b.n	801b96c <_svfiprintf_r+0x130>
 801b9e2:	fb0c 2101 	mla	r1, ip, r1, r2
 801b9e6:	4604      	mov	r4, r0
 801b9e8:	2301      	movs	r3, #1
 801b9ea:	e7f0      	b.n	801b9ce <_svfiprintf_r+0x192>
 801b9ec:	ab03      	add	r3, sp, #12
 801b9ee:	9300      	str	r3, [sp, #0]
 801b9f0:	462a      	mov	r2, r5
 801b9f2:	4b0f      	ldr	r3, [pc, #60]	; (801ba30 <_svfiprintf_r+0x1f4>)
 801b9f4:	a904      	add	r1, sp, #16
 801b9f6:	4638      	mov	r0, r7
 801b9f8:	f3af 8000 	nop.w
 801b9fc:	1c42      	adds	r2, r0, #1
 801b9fe:	4606      	mov	r6, r0
 801ba00:	d1d6      	bne.n	801b9b0 <_svfiprintf_r+0x174>
 801ba02:	89ab      	ldrh	r3, [r5, #12]
 801ba04:	065b      	lsls	r3, r3, #25
 801ba06:	f53f af2d 	bmi.w	801b864 <_svfiprintf_r+0x28>
 801ba0a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ba0c:	b01d      	add	sp, #116	; 0x74
 801ba0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ba12:	ab03      	add	r3, sp, #12
 801ba14:	9300      	str	r3, [sp, #0]
 801ba16:	462a      	mov	r2, r5
 801ba18:	4b05      	ldr	r3, [pc, #20]	; (801ba30 <_svfiprintf_r+0x1f4>)
 801ba1a:	a904      	add	r1, sp, #16
 801ba1c:	4638      	mov	r0, r7
 801ba1e:	f000 f879 	bl	801bb14 <_printf_i>
 801ba22:	e7eb      	b.n	801b9fc <_svfiprintf_r+0x1c0>
 801ba24:	0801df6c 	.word	0x0801df6c
 801ba28:	0801df76 	.word	0x0801df76
 801ba2c:	00000000 	.word	0x00000000
 801ba30:	0801b789 	.word	0x0801b789
 801ba34:	0801df72 	.word	0x0801df72

0801ba38 <_printf_common>:
 801ba38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ba3c:	4616      	mov	r6, r2
 801ba3e:	4699      	mov	r9, r3
 801ba40:	688a      	ldr	r2, [r1, #8]
 801ba42:	690b      	ldr	r3, [r1, #16]
 801ba44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801ba48:	4293      	cmp	r3, r2
 801ba4a:	bfb8      	it	lt
 801ba4c:	4613      	movlt	r3, r2
 801ba4e:	6033      	str	r3, [r6, #0]
 801ba50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801ba54:	4607      	mov	r7, r0
 801ba56:	460c      	mov	r4, r1
 801ba58:	b10a      	cbz	r2, 801ba5e <_printf_common+0x26>
 801ba5a:	3301      	adds	r3, #1
 801ba5c:	6033      	str	r3, [r6, #0]
 801ba5e:	6823      	ldr	r3, [r4, #0]
 801ba60:	0699      	lsls	r1, r3, #26
 801ba62:	bf42      	ittt	mi
 801ba64:	6833      	ldrmi	r3, [r6, #0]
 801ba66:	3302      	addmi	r3, #2
 801ba68:	6033      	strmi	r3, [r6, #0]
 801ba6a:	6825      	ldr	r5, [r4, #0]
 801ba6c:	f015 0506 	ands.w	r5, r5, #6
 801ba70:	d106      	bne.n	801ba80 <_printf_common+0x48>
 801ba72:	f104 0a19 	add.w	sl, r4, #25
 801ba76:	68e3      	ldr	r3, [r4, #12]
 801ba78:	6832      	ldr	r2, [r6, #0]
 801ba7a:	1a9b      	subs	r3, r3, r2
 801ba7c:	42ab      	cmp	r3, r5
 801ba7e:	dc26      	bgt.n	801bace <_printf_common+0x96>
 801ba80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801ba84:	1e13      	subs	r3, r2, #0
 801ba86:	6822      	ldr	r2, [r4, #0]
 801ba88:	bf18      	it	ne
 801ba8a:	2301      	movne	r3, #1
 801ba8c:	0692      	lsls	r2, r2, #26
 801ba8e:	d42b      	bmi.n	801bae8 <_printf_common+0xb0>
 801ba90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801ba94:	4649      	mov	r1, r9
 801ba96:	4638      	mov	r0, r7
 801ba98:	47c0      	blx	r8
 801ba9a:	3001      	adds	r0, #1
 801ba9c:	d01e      	beq.n	801badc <_printf_common+0xa4>
 801ba9e:	6823      	ldr	r3, [r4, #0]
 801baa0:	6922      	ldr	r2, [r4, #16]
 801baa2:	f003 0306 	and.w	r3, r3, #6
 801baa6:	2b04      	cmp	r3, #4
 801baa8:	bf02      	ittt	eq
 801baaa:	68e5      	ldreq	r5, [r4, #12]
 801baac:	6833      	ldreq	r3, [r6, #0]
 801baae:	1aed      	subeq	r5, r5, r3
 801bab0:	68a3      	ldr	r3, [r4, #8]
 801bab2:	bf0c      	ite	eq
 801bab4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801bab8:	2500      	movne	r5, #0
 801baba:	4293      	cmp	r3, r2
 801babc:	bfc4      	itt	gt
 801babe:	1a9b      	subgt	r3, r3, r2
 801bac0:	18ed      	addgt	r5, r5, r3
 801bac2:	2600      	movs	r6, #0
 801bac4:	341a      	adds	r4, #26
 801bac6:	42b5      	cmp	r5, r6
 801bac8:	d11a      	bne.n	801bb00 <_printf_common+0xc8>
 801baca:	2000      	movs	r0, #0
 801bacc:	e008      	b.n	801bae0 <_printf_common+0xa8>
 801bace:	2301      	movs	r3, #1
 801bad0:	4652      	mov	r2, sl
 801bad2:	4649      	mov	r1, r9
 801bad4:	4638      	mov	r0, r7
 801bad6:	47c0      	blx	r8
 801bad8:	3001      	adds	r0, #1
 801bada:	d103      	bne.n	801bae4 <_printf_common+0xac>
 801badc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801bae0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bae4:	3501      	adds	r5, #1
 801bae6:	e7c6      	b.n	801ba76 <_printf_common+0x3e>
 801bae8:	18e1      	adds	r1, r4, r3
 801baea:	1c5a      	adds	r2, r3, #1
 801baec:	2030      	movs	r0, #48	; 0x30
 801baee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801baf2:	4422      	add	r2, r4
 801baf4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801baf8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801bafc:	3302      	adds	r3, #2
 801bafe:	e7c7      	b.n	801ba90 <_printf_common+0x58>
 801bb00:	2301      	movs	r3, #1
 801bb02:	4622      	mov	r2, r4
 801bb04:	4649      	mov	r1, r9
 801bb06:	4638      	mov	r0, r7
 801bb08:	47c0      	blx	r8
 801bb0a:	3001      	adds	r0, #1
 801bb0c:	d0e6      	beq.n	801badc <_printf_common+0xa4>
 801bb0e:	3601      	adds	r6, #1
 801bb10:	e7d9      	b.n	801bac6 <_printf_common+0x8e>
	...

0801bb14 <_printf_i>:
 801bb14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801bb18:	7e0f      	ldrb	r7, [r1, #24]
 801bb1a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801bb1c:	2f78      	cmp	r7, #120	; 0x78
 801bb1e:	4691      	mov	r9, r2
 801bb20:	4680      	mov	r8, r0
 801bb22:	460c      	mov	r4, r1
 801bb24:	469a      	mov	sl, r3
 801bb26:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801bb2a:	d807      	bhi.n	801bb3c <_printf_i+0x28>
 801bb2c:	2f62      	cmp	r7, #98	; 0x62
 801bb2e:	d80a      	bhi.n	801bb46 <_printf_i+0x32>
 801bb30:	2f00      	cmp	r7, #0
 801bb32:	f000 80d4 	beq.w	801bcde <_printf_i+0x1ca>
 801bb36:	2f58      	cmp	r7, #88	; 0x58
 801bb38:	f000 80c0 	beq.w	801bcbc <_printf_i+0x1a8>
 801bb3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801bb40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801bb44:	e03a      	b.n	801bbbc <_printf_i+0xa8>
 801bb46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801bb4a:	2b15      	cmp	r3, #21
 801bb4c:	d8f6      	bhi.n	801bb3c <_printf_i+0x28>
 801bb4e:	a101      	add	r1, pc, #4	; (adr r1, 801bb54 <_printf_i+0x40>)
 801bb50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801bb54:	0801bbad 	.word	0x0801bbad
 801bb58:	0801bbc1 	.word	0x0801bbc1
 801bb5c:	0801bb3d 	.word	0x0801bb3d
 801bb60:	0801bb3d 	.word	0x0801bb3d
 801bb64:	0801bb3d 	.word	0x0801bb3d
 801bb68:	0801bb3d 	.word	0x0801bb3d
 801bb6c:	0801bbc1 	.word	0x0801bbc1
 801bb70:	0801bb3d 	.word	0x0801bb3d
 801bb74:	0801bb3d 	.word	0x0801bb3d
 801bb78:	0801bb3d 	.word	0x0801bb3d
 801bb7c:	0801bb3d 	.word	0x0801bb3d
 801bb80:	0801bcc5 	.word	0x0801bcc5
 801bb84:	0801bbed 	.word	0x0801bbed
 801bb88:	0801bc7f 	.word	0x0801bc7f
 801bb8c:	0801bb3d 	.word	0x0801bb3d
 801bb90:	0801bb3d 	.word	0x0801bb3d
 801bb94:	0801bce7 	.word	0x0801bce7
 801bb98:	0801bb3d 	.word	0x0801bb3d
 801bb9c:	0801bbed 	.word	0x0801bbed
 801bba0:	0801bb3d 	.word	0x0801bb3d
 801bba4:	0801bb3d 	.word	0x0801bb3d
 801bba8:	0801bc87 	.word	0x0801bc87
 801bbac:	682b      	ldr	r3, [r5, #0]
 801bbae:	1d1a      	adds	r2, r3, #4
 801bbb0:	681b      	ldr	r3, [r3, #0]
 801bbb2:	602a      	str	r2, [r5, #0]
 801bbb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801bbb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801bbbc:	2301      	movs	r3, #1
 801bbbe:	e09f      	b.n	801bd00 <_printf_i+0x1ec>
 801bbc0:	6820      	ldr	r0, [r4, #0]
 801bbc2:	682b      	ldr	r3, [r5, #0]
 801bbc4:	0607      	lsls	r7, r0, #24
 801bbc6:	f103 0104 	add.w	r1, r3, #4
 801bbca:	6029      	str	r1, [r5, #0]
 801bbcc:	d501      	bpl.n	801bbd2 <_printf_i+0xbe>
 801bbce:	681e      	ldr	r6, [r3, #0]
 801bbd0:	e003      	b.n	801bbda <_printf_i+0xc6>
 801bbd2:	0646      	lsls	r6, r0, #25
 801bbd4:	d5fb      	bpl.n	801bbce <_printf_i+0xba>
 801bbd6:	f9b3 6000 	ldrsh.w	r6, [r3]
 801bbda:	2e00      	cmp	r6, #0
 801bbdc:	da03      	bge.n	801bbe6 <_printf_i+0xd2>
 801bbde:	232d      	movs	r3, #45	; 0x2d
 801bbe0:	4276      	negs	r6, r6
 801bbe2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801bbe6:	485a      	ldr	r0, [pc, #360]	; (801bd50 <_printf_i+0x23c>)
 801bbe8:	230a      	movs	r3, #10
 801bbea:	e012      	b.n	801bc12 <_printf_i+0xfe>
 801bbec:	682b      	ldr	r3, [r5, #0]
 801bbee:	6820      	ldr	r0, [r4, #0]
 801bbf0:	1d19      	adds	r1, r3, #4
 801bbf2:	6029      	str	r1, [r5, #0]
 801bbf4:	0605      	lsls	r5, r0, #24
 801bbf6:	d501      	bpl.n	801bbfc <_printf_i+0xe8>
 801bbf8:	681e      	ldr	r6, [r3, #0]
 801bbfa:	e002      	b.n	801bc02 <_printf_i+0xee>
 801bbfc:	0641      	lsls	r1, r0, #25
 801bbfe:	d5fb      	bpl.n	801bbf8 <_printf_i+0xe4>
 801bc00:	881e      	ldrh	r6, [r3, #0]
 801bc02:	4853      	ldr	r0, [pc, #332]	; (801bd50 <_printf_i+0x23c>)
 801bc04:	2f6f      	cmp	r7, #111	; 0x6f
 801bc06:	bf0c      	ite	eq
 801bc08:	2308      	moveq	r3, #8
 801bc0a:	230a      	movne	r3, #10
 801bc0c:	2100      	movs	r1, #0
 801bc0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801bc12:	6865      	ldr	r5, [r4, #4]
 801bc14:	60a5      	str	r5, [r4, #8]
 801bc16:	2d00      	cmp	r5, #0
 801bc18:	bfa2      	ittt	ge
 801bc1a:	6821      	ldrge	r1, [r4, #0]
 801bc1c:	f021 0104 	bicge.w	r1, r1, #4
 801bc20:	6021      	strge	r1, [r4, #0]
 801bc22:	b90e      	cbnz	r6, 801bc28 <_printf_i+0x114>
 801bc24:	2d00      	cmp	r5, #0
 801bc26:	d04b      	beq.n	801bcc0 <_printf_i+0x1ac>
 801bc28:	4615      	mov	r5, r2
 801bc2a:	fbb6 f1f3 	udiv	r1, r6, r3
 801bc2e:	fb03 6711 	mls	r7, r3, r1, r6
 801bc32:	5dc7      	ldrb	r7, [r0, r7]
 801bc34:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801bc38:	4637      	mov	r7, r6
 801bc3a:	42bb      	cmp	r3, r7
 801bc3c:	460e      	mov	r6, r1
 801bc3e:	d9f4      	bls.n	801bc2a <_printf_i+0x116>
 801bc40:	2b08      	cmp	r3, #8
 801bc42:	d10b      	bne.n	801bc5c <_printf_i+0x148>
 801bc44:	6823      	ldr	r3, [r4, #0]
 801bc46:	07de      	lsls	r6, r3, #31
 801bc48:	d508      	bpl.n	801bc5c <_printf_i+0x148>
 801bc4a:	6923      	ldr	r3, [r4, #16]
 801bc4c:	6861      	ldr	r1, [r4, #4]
 801bc4e:	4299      	cmp	r1, r3
 801bc50:	bfde      	ittt	le
 801bc52:	2330      	movle	r3, #48	; 0x30
 801bc54:	f805 3c01 	strble.w	r3, [r5, #-1]
 801bc58:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801bc5c:	1b52      	subs	r2, r2, r5
 801bc5e:	6122      	str	r2, [r4, #16]
 801bc60:	f8cd a000 	str.w	sl, [sp]
 801bc64:	464b      	mov	r3, r9
 801bc66:	aa03      	add	r2, sp, #12
 801bc68:	4621      	mov	r1, r4
 801bc6a:	4640      	mov	r0, r8
 801bc6c:	f7ff fee4 	bl	801ba38 <_printf_common>
 801bc70:	3001      	adds	r0, #1
 801bc72:	d14a      	bne.n	801bd0a <_printf_i+0x1f6>
 801bc74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801bc78:	b004      	add	sp, #16
 801bc7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bc7e:	6823      	ldr	r3, [r4, #0]
 801bc80:	f043 0320 	orr.w	r3, r3, #32
 801bc84:	6023      	str	r3, [r4, #0]
 801bc86:	4833      	ldr	r0, [pc, #204]	; (801bd54 <_printf_i+0x240>)
 801bc88:	2778      	movs	r7, #120	; 0x78
 801bc8a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801bc8e:	6823      	ldr	r3, [r4, #0]
 801bc90:	6829      	ldr	r1, [r5, #0]
 801bc92:	061f      	lsls	r7, r3, #24
 801bc94:	f851 6b04 	ldr.w	r6, [r1], #4
 801bc98:	d402      	bmi.n	801bca0 <_printf_i+0x18c>
 801bc9a:	065f      	lsls	r7, r3, #25
 801bc9c:	bf48      	it	mi
 801bc9e:	b2b6      	uxthmi	r6, r6
 801bca0:	07df      	lsls	r7, r3, #31
 801bca2:	bf48      	it	mi
 801bca4:	f043 0320 	orrmi.w	r3, r3, #32
 801bca8:	6029      	str	r1, [r5, #0]
 801bcaa:	bf48      	it	mi
 801bcac:	6023      	strmi	r3, [r4, #0]
 801bcae:	b91e      	cbnz	r6, 801bcb8 <_printf_i+0x1a4>
 801bcb0:	6823      	ldr	r3, [r4, #0]
 801bcb2:	f023 0320 	bic.w	r3, r3, #32
 801bcb6:	6023      	str	r3, [r4, #0]
 801bcb8:	2310      	movs	r3, #16
 801bcba:	e7a7      	b.n	801bc0c <_printf_i+0xf8>
 801bcbc:	4824      	ldr	r0, [pc, #144]	; (801bd50 <_printf_i+0x23c>)
 801bcbe:	e7e4      	b.n	801bc8a <_printf_i+0x176>
 801bcc0:	4615      	mov	r5, r2
 801bcc2:	e7bd      	b.n	801bc40 <_printf_i+0x12c>
 801bcc4:	682b      	ldr	r3, [r5, #0]
 801bcc6:	6826      	ldr	r6, [r4, #0]
 801bcc8:	6961      	ldr	r1, [r4, #20]
 801bcca:	1d18      	adds	r0, r3, #4
 801bccc:	6028      	str	r0, [r5, #0]
 801bcce:	0635      	lsls	r5, r6, #24
 801bcd0:	681b      	ldr	r3, [r3, #0]
 801bcd2:	d501      	bpl.n	801bcd8 <_printf_i+0x1c4>
 801bcd4:	6019      	str	r1, [r3, #0]
 801bcd6:	e002      	b.n	801bcde <_printf_i+0x1ca>
 801bcd8:	0670      	lsls	r0, r6, #25
 801bcda:	d5fb      	bpl.n	801bcd4 <_printf_i+0x1c0>
 801bcdc:	8019      	strh	r1, [r3, #0]
 801bcde:	2300      	movs	r3, #0
 801bce0:	6123      	str	r3, [r4, #16]
 801bce2:	4615      	mov	r5, r2
 801bce4:	e7bc      	b.n	801bc60 <_printf_i+0x14c>
 801bce6:	682b      	ldr	r3, [r5, #0]
 801bce8:	1d1a      	adds	r2, r3, #4
 801bcea:	602a      	str	r2, [r5, #0]
 801bcec:	681d      	ldr	r5, [r3, #0]
 801bcee:	6862      	ldr	r2, [r4, #4]
 801bcf0:	2100      	movs	r1, #0
 801bcf2:	4628      	mov	r0, r5
 801bcf4:	f7e4 fab4 	bl	8000260 <memchr>
 801bcf8:	b108      	cbz	r0, 801bcfe <_printf_i+0x1ea>
 801bcfa:	1b40      	subs	r0, r0, r5
 801bcfc:	6060      	str	r0, [r4, #4]
 801bcfe:	6863      	ldr	r3, [r4, #4]
 801bd00:	6123      	str	r3, [r4, #16]
 801bd02:	2300      	movs	r3, #0
 801bd04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801bd08:	e7aa      	b.n	801bc60 <_printf_i+0x14c>
 801bd0a:	6923      	ldr	r3, [r4, #16]
 801bd0c:	462a      	mov	r2, r5
 801bd0e:	4649      	mov	r1, r9
 801bd10:	4640      	mov	r0, r8
 801bd12:	47d0      	blx	sl
 801bd14:	3001      	adds	r0, #1
 801bd16:	d0ad      	beq.n	801bc74 <_printf_i+0x160>
 801bd18:	6823      	ldr	r3, [r4, #0]
 801bd1a:	079b      	lsls	r3, r3, #30
 801bd1c:	d413      	bmi.n	801bd46 <_printf_i+0x232>
 801bd1e:	68e0      	ldr	r0, [r4, #12]
 801bd20:	9b03      	ldr	r3, [sp, #12]
 801bd22:	4298      	cmp	r0, r3
 801bd24:	bfb8      	it	lt
 801bd26:	4618      	movlt	r0, r3
 801bd28:	e7a6      	b.n	801bc78 <_printf_i+0x164>
 801bd2a:	2301      	movs	r3, #1
 801bd2c:	4632      	mov	r2, r6
 801bd2e:	4649      	mov	r1, r9
 801bd30:	4640      	mov	r0, r8
 801bd32:	47d0      	blx	sl
 801bd34:	3001      	adds	r0, #1
 801bd36:	d09d      	beq.n	801bc74 <_printf_i+0x160>
 801bd38:	3501      	adds	r5, #1
 801bd3a:	68e3      	ldr	r3, [r4, #12]
 801bd3c:	9903      	ldr	r1, [sp, #12]
 801bd3e:	1a5b      	subs	r3, r3, r1
 801bd40:	42ab      	cmp	r3, r5
 801bd42:	dcf2      	bgt.n	801bd2a <_printf_i+0x216>
 801bd44:	e7eb      	b.n	801bd1e <_printf_i+0x20a>
 801bd46:	2500      	movs	r5, #0
 801bd48:	f104 0619 	add.w	r6, r4, #25
 801bd4c:	e7f5      	b.n	801bd3a <_printf_i+0x226>
 801bd4e:	bf00      	nop
 801bd50:	0801df7d 	.word	0x0801df7d
 801bd54:	0801df8e 	.word	0x0801df8e

0801bd58 <__sflush_r>:
 801bd58:	898a      	ldrh	r2, [r1, #12]
 801bd5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bd5e:	4605      	mov	r5, r0
 801bd60:	0710      	lsls	r0, r2, #28
 801bd62:	460c      	mov	r4, r1
 801bd64:	d458      	bmi.n	801be18 <__sflush_r+0xc0>
 801bd66:	684b      	ldr	r3, [r1, #4]
 801bd68:	2b00      	cmp	r3, #0
 801bd6a:	dc05      	bgt.n	801bd78 <__sflush_r+0x20>
 801bd6c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801bd6e:	2b00      	cmp	r3, #0
 801bd70:	dc02      	bgt.n	801bd78 <__sflush_r+0x20>
 801bd72:	2000      	movs	r0, #0
 801bd74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bd78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801bd7a:	2e00      	cmp	r6, #0
 801bd7c:	d0f9      	beq.n	801bd72 <__sflush_r+0x1a>
 801bd7e:	2300      	movs	r3, #0
 801bd80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801bd84:	682f      	ldr	r7, [r5, #0]
 801bd86:	6a21      	ldr	r1, [r4, #32]
 801bd88:	602b      	str	r3, [r5, #0]
 801bd8a:	d032      	beq.n	801bdf2 <__sflush_r+0x9a>
 801bd8c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801bd8e:	89a3      	ldrh	r3, [r4, #12]
 801bd90:	075a      	lsls	r2, r3, #29
 801bd92:	d505      	bpl.n	801bda0 <__sflush_r+0x48>
 801bd94:	6863      	ldr	r3, [r4, #4]
 801bd96:	1ac0      	subs	r0, r0, r3
 801bd98:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801bd9a:	b10b      	cbz	r3, 801bda0 <__sflush_r+0x48>
 801bd9c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801bd9e:	1ac0      	subs	r0, r0, r3
 801bda0:	2300      	movs	r3, #0
 801bda2:	4602      	mov	r2, r0
 801bda4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801bda6:	6a21      	ldr	r1, [r4, #32]
 801bda8:	4628      	mov	r0, r5
 801bdaa:	47b0      	blx	r6
 801bdac:	1c43      	adds	r3, r0, #1
 801bdae:	89a3      	ldrh	r3, [r4, #12]
 801bdb0:	d106      	bne.n	801bdc0 <__sflush_r+0x68>
 801bdb2:	6829      	ldr	r1, [r5, #0]
 801bdb4:	291d      	cmp	r1, #29
 801bdb6:	d82b      	bhi.n	801be10 <__sflush_r+0xb8>
 801bdb8:	4a29      	ldr	r2, [pc, #164]	; (801be60 <__sflush_r+0x108>)
 801bdba:	410a      	asrs	r2, r1
 801bdbc:	07d6      	lsls	r6, r2, #31
 801bdbe:	d427      	bmi.n	801be10 <__sflush_r+0xb8>
 801bdc0:	2200      	movs	r2, #0
 801bdc2:	6062      	str	r2, [r4, #4]
 801bdc4:	04d9      	lsls	r1, r3, #19
 801bdc6:	6922      	ldr	r2, [r4, #16]
 801bdc8:	6022      	str	r2, [r4, #0]
 801bdca:	d504      	bpl.n	801bdd6 <__sflush_r+0x7e>
 801bdcc:	1c42      	adds	r2, r0, #1
 801bdce:	d101      	bne.n	801bdd4 <__sflush_r+0x7c>
 801bdd0:	682b      	ldr	r3, [r5, #0]
 801bdd2:	b903      	cbnz	r3, 801bdd6 <__sflush_r+0x7e>
 801bdd4:	6560      	str	r0, [r4, #84]	; 0x54
 801bdd6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801bdd8:	602f      	str	r7, [r5, #0]
 801bdda:	2900      	cmp	r1, #0
 801bddc:	d0c9      	beq.n	801bd72 <__sflush_r+0x1a>
 801bdde:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801bde2:	4299      	cmp	r1, r3
 801bde4:	d002      	beq.n	801bdec <__sflush_r+0x94>
 801bde6:	4628      	mov	r0, r5
 801bde8:	f7ff fc7a 	bl	801b6e0 <_free_r>
 801bdec:	2000      	movs	r0, #0
 801bdee:	6360      	str	r0, [r4, #52]	; 0x34
 801bdf0:	e7c0      	b.n	801bd74 <__sflush_r+0x1c>
 801bdf2:	2301      	movs	r3, #1
 801bdf4:	4628      	mov	r0, r5
 801bdf6:	47b0      	blx	r6
 801bdf8:	1c41      	adds	r1, r0, #1
 801bdfa:	d1c8      	bne.n	801bd8e <__sflush_r+0x36>
 801bdfc:	682b      	ldr	r3, [r5, #0]
 801bdfe:	2b00      	cmp	r3, #0
 801be00:	d0c5      	beq.n	801bd8e <__sflush_r+0x36>
 801be02:	2b1d      	cmp	r3, #29
 801be04:	d001      	beq.n	801be0a <__sflush_r+0xb2>
 801be06:	2b16      	cmp	r3, #22
 801be08:	d101      	bne.n	801be0e <__sflush_r+0xb6>
 801be0a:	602f      	str	r7, [r5, #0]
 801be0c:	e7b1      	b.n	801bd72 <__sflush_r+0x1a>
 801be0e:	89a3      	ldrh	r3, [r4, #12]
 801be10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801be14:	81a3      	strh	r3, [r4, #12]
 801be16:	e7ad      	b.n	801bd74 <__sflush_r+0x1c>
 801be18:	690f      	ldr	r7, [r1, #16]
 801be1a:	2f00      	cmp	r7, #0
 801be1c:	d0a9      	beq.n	801bd72 <__sflush_r+0x1a>
 801be1e:	0793      	lsls	r3, r2, #30
 801be20:	680e      	ldr	r6, [r1, #0]
 801be22:	bf08      	it	eq
 801be24:	694b      	ldreq	r3, [r1, #20]
 801be26:	600f      	str	r7, [r1, #0]
 801be28:	bf18      	it	ne
 801be2a:	2300      	movne	r3, #0
 801be2c:	eba6 0807 	sub.w	r8, r6, r7
 801be30:	608b      	str	r3, [r1, #8]
 801be32:	f1b8 0f00 	cmp.w	r8, #0
 801be36:	dd9c      	ble.n	801bd72 <__sflush_r+0x1a>
 801be38:	6a21      	ldr	r1, [r4, #32]
 801be3a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801be3c:	4643      	mov	r3, r8
 801be3e:	463a      	mov	r2, r7
 801be40:	4628      	mov	r0, r5
 801be42:	47b0      	blx	r6
 801be44:	2800      	cmp	r0, #0
 801be46:	dc06      	bgt.n	801be56 <__sflush_r+0xfe>
 801be48:	89a3      	ldrh	r3, [r4, #12]
 801be4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801be4e:	81a3      	strh	r3, [r4, #12]
 801be50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801be54:	e78e      	b.n	801bd74 <__sflush_r+0x1c>
 801be56:	4407      	add	r7, r0
 801be58:	eba8 0800 	sub.w	r8, r8, r0
 801be5c:	e7e9      	b.n	801be32 <__sflush_r+0xda>
 801be5e:	bf00      	nop
 801be60:	dfbffffe 	.word	0xdfbffffe

0801be64 <_fflush_r>:
 801be64:	b538      	push	{r3, r4, r5, lr}
 801be66:	690b      	ldr	r3, [r1, #16]
 801be68:	4605      	mov	r5, r0
 801be6a:	460c      	mov	r4, r1
 801be6c:	b913      	cbnz	r3, 801be74 <_fflush_r+0x10>
 801be6e:	2500      	movs	r5, #0
 801be70:	4628      	mov	r0, r5
 801be72:	bd38      	pop	{r3, r4, r5, pc}
 801be74:	b118      	cbz	r0, 801be7e <_fflush_r+0x1a>
 801be76:	6a03      	ldr	r3, [r0, #32]
 801be78:	b90b      	cbnz	r3, 801be7e <_fflush_r+0x1a>
 801be7a:	f7ff f973 	bl	801b164 <__sinit>
 801be7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801be82:	2b00      	cmp	r3, #0
 801be84:	d0f3      	beq.n	801be6e <_fflush_r+0xa>
 801be86:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801be88:	07d0      	lsls	r0, r2, #31
 801be8a:	d404      	bmi.n	801be96 <_fflush_r+0x32>
 801be8c:	0599      	lsls	r1, r3, #22
 801be8e:	d402      	bmi.n	801be96 <_fflush_r+0x32>
 801be90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801be92:	f7ff fbe2 	bl	801b65a <__retarget_lock_acquire_recursive>
 801be96:	4628      	mov	r0, r5
 801be98:	4621      	mov	r1, r4
 801be9a:	f7ff ff5d 	bl	801bd58 <__sflush_r>
 801be9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801bea0:	07da      	lsls	r2, r3, #31
 801bea2:	4605      	mov	r5, r0
 801bea4:	d4e4      	bmi.n	801be70 <_fflush_r+0xc>
 801bea6:	89a3      	ldrh	r3, [r4, #12]
 801bea8:	059b      	lsls	r3, r3, #22
 801beaa:	d4e1      	bmi.n	801be70 <_fflush_r+0xc>
 801beac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801beae:	f7ff fbd5 	bl	801b65c <__retarget_lock_release_recursive>
 801beb2:	e7dd      	b.n	801be70 <_fflush_r+0xc>

0801beb4 <fiprintf>:
 801beb4:	b40e      	push	{r1, r2, r3}
 801beb6:	b503      	push	{r0, r1, lr}
 801beb8:	4601      	mov	r1, r0
 801beba:	ab03      	add	r3, sp, #12
 801bebc:	4805      	ldr	r0, [pc, #20]	; (801bed4 <fiprintf+0x20>)
 801bebe:	f853 2b04 	ldr.w	r2, [r3], #4
 801bec2:	6800      	ldr	r0, [r0, #0]
 801bec4:	9301      	str	r3, [sp, #4]
 801bec6:	f000 f831 	bl	801bf2c <_vfiprintf_r>
 801beca:	b002      	add	sp, #8
 801becc:	f85d eb04 	ldr.w	lr, [sp], #4
 801bed0:	b003      	add	sp, #12
 801bed2:	4770      	bx	lr
 801bed4:	20002138 	.word	0x20002138

0801bed8 <__sfputc_r>:
 801bed8:	6893      	ldr	r3, [r2, #8]
 801beda:	3b01      	subs	r3, #1
 801bedc:	2b00      	cmp	r3, #0
 801bede:	b410      	push	{r4}
 801bee0:	6093      	str	r3, [r2, #8]
 801bee2:	da08      	bge.n	801bef6 <__sfputc_r+0x1e>
 801bee4:	6994      	ldr	r4, [r2, #24]
 801bee6:	42a3      	cmp	r3, r4
 801bee8:	db01      	blt.n	801beee <__sfputc_r+0x16>
 801beea:	290a      	cmp	r1, #10
 801beec:	d103      	bne.n	801bef6 <__sfputc_r+0x1e>
 801beee:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bef2:	f000 b935 	b.w	801c160 <__swbuf_r>
 801bef6:	6813      	ldr	r3, [r2, #0]
 801bef8:	1c58      	adds	r0, r3, #1
 801befa:	6010      	str	r0, [r2, #0]
 801befc:	7019      	strb	r1, [r3, #0]
 801befe:	4608      	mov	r0, r1
 801bf00:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bf04:	4770      	bx	lr

0801bf06 <__sfputs_r>:
 801bf06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bf08:	4606      	mov	r6, r0
 801bf0a:	460f      	mov	r7, r1
 801bf0c:	4614      	mov	r4, r2
 801bf0e:	18d5      	adds	r5, r2, r3
 801bf10:	42ac      	cmp	r4, r5
 801bf12:	d101      	bne.n	801bf18 <__sfputs_r+0x12>
 801bf14:	2000      	movs	r0, #0
 801bf16:	e007      	b.n	801bf28 <__sfputs_r+0x22>
 801bf18:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bf1c:	463a      	mov	r2, r7
 801bf1e:	4630      	mov	r0, r6
 801bf20:	f7ff ffda 	bl	801bed8 <__sfputc_r>
 801bf24:	1c43      	adds	r3, r0, #1
 801bf26:	d1f3      	bne.n	801bf10 <__sfputs_r+0xa>
 801bf28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801bf2c <_vfiprintf_r>:
 801bf2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bf30:	460d      	mov	r5, r1
 801bf32:	b09d      	sub	sp, #116	; 0x74
 801bf34:	4614      	mov	r4, r2
 801bf36:	4698      	mov	r8, r3
 801bf38:	4606      	mov	r6, r0
 801bf3a:	b118      	cbz	r0, 801bf44 <_vfiprintf_r+0x18>
 801bf3c:	6a03      	ldr	r3, [r0, #32]
 801bf3e:	b90b      	cbnz	r3, 801bf44 <_vfiprintf_r+0x18>
 801bf40:	f7ff f910 	bl	801b164 <__sinit>
 801bf44:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801bf46:	07d9      	lsls	r1, r3, #31
 801bf48:	d405      	bmi.n	801bf56 <_vfiprintf_r+0x2a>
 801bf4a:	89ab      	ldrh	r3, [r5, #12]
 801bf4c:	059a      	lsls	r2, r3, #22
 801bf4e:	d402      	bmi.n	801bf56 <_vfiprintf_r+0x2a>
 801bf50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801bf52:	f7ff fb82 	bl	801b65a <__retarget_lock_acquire_recursive>
 801bf56:	89ab      	ldrh	r3, [r5, #12]
 801bf58:	071b      	lsls	r3, r3, #28
 801bf5a:	d501      	bpl.n	801bf60 <_vfiprintf_r+0x34>
 801bf5c:	692b      	ldr	r3, [r5, #16]
 801bf5e:	b99b      	cbnz	r3, 801bf88 <_vfiprintf_r+0x5c>
 801bf60:	4629      	mov	r1, r5
 801bf62:	4630      	mov	r0, r6
 801bf64:	f000 f93a 	bl	801c1dc <__swsetup_r>
 801bf68:	b170      	cbz	r0, 801bf88 <_vfiprintf_r+0x5c>
 801bf6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801bf6c:	07dc      	lsls	r4, r3, #31
 801bf6e:	d504      	bpl.n	801bf7a <_vfiprintf_r+0x4e>
 801bf70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801bf74:	b01d      	add	sp, #116	; 0x74
 801bf76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bf7a:	89ab      	ldrh	r3, [r5, #12]
 801bf7c:	0598      	lsls	r0, r3, #22
 801bf7e:	d4f7      	bmi.n	801bf70 <_vfiprintf_r+0x44>
 801bf80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801bf82:	f7ff fb6b 	bl	801b65c <__retarget_lock_release_recursive>
 801bf86:	e7f3      	b.n	801bf70 <_vfiprintf_r+0x44>
 801bf88:	2300      	movs	r3, #0
 801bf8a:	9309      	str	r3, [sp, #36]	; 0x24
 801bf8c:	2320      	movs	r3, #32
 801bf8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801bf92:	f8cd 800c 	str.w	r8, [sp, #12]
 801bf96:	2330      	movs	r3, #48	; 0x30
 801bf98:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801c14c <_vfiprintf_r+0x220>
 801bf9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801bfa0:	f04f 0901 	mov.w	r9, #1
 801bfa4:	4623      	mov	r3, r4
 801bfa6:	469a      	mov	sl, r3
 801bfa8:	f813 2b01 	ldrb.w	r2, [r3], #1
 801bfac:	b10a      	cbz	r2, 801bfb2 <_vfiprintf_r+0x86>
 801bfae:	2a25      	cmp	r2, #37	; 0x25
 801bfb0:	d1f9      	bne.n	801bfa6 <_vfiprintf_r+0x7a>
 801bfb2:	ebba 0b04 	subs.w	fp, sl, r4
 801bfb6:	d00b      	beq.n	801bfd0 <_vfiprintf_r+0xa4>
 801bfb8:	465b      	mov	r3, fp
 801bfba:	4622      	mov	r2, r4
 801bfbc:	4629      	mov	r1, r5
 801bfbe:	4630      	mov	r0, r6
 801bfc0:	f7ff ffa1 	bl	801bf06 <__sfputs_r>
 801bfc4:	3001      	adds	r0, #1
 801bfc6:	f000 80a9 	beq.w	801c11c <_vfiprintf_r+0x1f0>
 801bfca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801bfcc:	445a      	add	r2, fp
 801bfce:	9209      	str	r2, [sp, #36]	; 0x24
 801bfd0:	f89a 3000 	ldrb.w	r3, [sl]
 801bfd4:	2b00      	cmp	r3, #0
 801bfd6:	f000 80a1 	beq.w	801c11c <_vfiprintf_r+0x1f0>
 801bfda:	2300      	movs	r3, #0
 801bfdc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801bfe0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801bfe4:	f10a 0a01 	add.w	sl, sl, #1
 801bfe8:	9304      	str	r3, [sp, #16]
 801bfea:	9307      	str	r3, [sp, #28]
 801bfec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801bff0:	931a      	str	r3, [sp, #104]	; 0x68
 801bff2:	4654      	mov	r4, sl
 801bff4:	2205      	movs	r2, #5
 801bff6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bffa:	4854      	ldr	r0, [pc, #336]	; (801c14c <_vfiprintf_r+0x220>)
 801bffc:	f7e4 f930 	bl	8000260 <memchr>
 801c000:	9a04      	ldr	r2, [sp, #16]
 801c002:	b9d8      	cbnz	r0, 801c03c <_vfiprintf_r+0x110>
 801c004:	06d1      	lsls	r1, r2, #27
 801c006:	bf44      	itt	mi
 801c008:	2320      	movmi	r3, #32
 801c00a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c00e:	0713      	lsls	r3, r2, #28
 801c010:	bf44      	itt	mi
 801c012:	232b      	movmi	r3, #43	; 0x2b
 801c014:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c018:	f89a 3000 	ldrb.w	r3, [sl]
 801c01c:	2b2a      	cmp	r3, #42	; 0x2a
 801c01e:	d015      	beq.n	801c04c <_vfiprintf_r+0x120>
 801c020:	9a07      	ldr	r2, [sp, #28]
 801c022:	4654      	mov	r4, sl
 801c024:	2000      	movs	r0, #0
 801c026:	f04f 0c0a 	mov.w	ip, #10
 801c02a:	4621      	mov	r1, r4
 801c02c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c030:	3b30      	subs	r3, #48	; 0x30
 801c032:	2b09      	cmp	r3, #9
 801c034:	d94d      	bls.n	801c0d2 <_vfiprintf_r+0x1a6>
 801c036:	b1b0      	cbz	r0, 801c066 <_vfiprintf_r+0x13a>
 801c038:	9207      	str	r2, [sp, #28]
 801c03a:	e014      	b.n	801c066 <_vfiprintf_r+0x13a>
 801c03c:	eba0 0308 	sub.w	r3, r0, r8
 801c040:	fa09 f303 	lsl.w	r3, r9, r3
 801c044:	4313      	orrs	r3, r2
 801c046:	9304      	str	r3, [sp, #16]
 801c048:	46a2      	mov	sl, r4
 801c04a:	e7d2      	b.n	801bff2 <_vfiprintf_r+0xc6>
 801c04c:	9b03      	ldr	r3, [sp, #12]
 801c04e:	1d19      	adds	r1, r3, #4
 801c050:	681b      	ldr	r3, [r3, #0]
 801c052:	9103      	str	r1, [sp, #12]
 801c054:	2b00      	cmp	r3, #0
 801c056:	bfbb      	ittet	lt
 801c058:	425b      	neglt	r3, r3
 801c05a:	f042 0202 	orrlt.w	r2, r2, #2
 801c05e:	9307      	strge	r3, [sp, #28]
 801c060:	9307      	strlt	r3, [sp, #28]
 801c062:	bfb8      	it	lt
 801c064:	9204      	strlt	r2, [sp, #16]
 801c066:	7823      	ldrb	r3, [r4, #0]
 801c068:	2b2e      	cmp	r3, #46	; 0x2e
 801c06a:	d10c      	bne.n	801c086 <_vfiprintf_r+0x15a>
 801c06c:	7863      	ldrb	r3, [r4, #1]
 801c06e:	2b2a      	cmp	r3, #42	; 0x2a
 801c070:	d134      	bne.n	801c0dc <_vfiprintf_r+0x1b0>
 801c072:	9b03      	ldr	r3, [sp, #12]
 801c074:	1d1a      	adds	r2, r3, #4
 801c076:	681b      	ldr	r3, [r3, #0]
 801c078:	9203      	str	r2, [sp, #12]
 801c07a:	2b00      	cmp	r3, #0
 801c07c:	bfb8      	it	lt
 801c07e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801c082:	3402      	adds	r4, #2
 801c084:	9305      	str	r3, [sp, #20]
 801c086:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801c15c <_vfiprintf_r+0x230>
 801c08a:	7821      	ldrb	r1, [r4, #0]
 801c08c:	2203      	movs	r2, #3
 801c08e:	4650      	mov	r0, sl
 801c090:	f7e4 f8e6 	bl	8000260 <memchr>
 801c094:	b138      	cbz	r0, 801c0a6 <_vfiprintf_r+0x17a>
 801c096:	9b04      	ldr	r3, [sp, #16]
 801c098:	eba0 000a 	sub.w	r0, r0, sl
 801c09c:	2240      	movs	r2, #64	; 0x40
 801c09e:	4082      	lsls	r2, r0
 801c0a0:	4313      	orrs	r3, r2
 801c0a2:	3401      	adds	r4, #1
 801c0a4:	9304      	str	r3, [sp, #16]
 801c0a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c0aa:	4829      	ldr	r0, [pc, #164]	; (801c150 <_vfiprintf_r+0x224>)
 801c0ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801c0b0:	2206      	movs	r2, #6
 801c0b2:	f7e4 f8d5 	bl	8000260 <memchr>
 801c0b6:	2800      	cmp	r0, #0
 801c0b8:	d03f      	beq.n	801c13a <_vfiprintf_r+0x20e>
 801c0ba:	4b26      	ldr	r3, [pc, #152]	; (801c154 <_vfiprintf_r+0x228>)
 801c0bc:	bb1b      	cbnz	r3, 801c106 <_vfiprintf_r+0x1da>
 801c0be:	9b03      	ldr	r3, [sp, #12]
 801c0c0:	3307      	adds	r3, #7
 801c0c2:	f023 0307 	bic.w	r3, r3, #7
 801c0c6:	3308      	adds	r3, #8
 801c0c8:	9303      	str	r3, [sp, #12]
 801c0ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c0cc:	443b      	add	r3, r7
 801c0ce:	9309      	str	r3, [sp, #36]	; 0x24
 801c0d0:	e768      	b.n	801bfa4 <_vfiprintf_r+0x78>
 801c0d2:	fb0c 3202 	mla	r2, ip, r2, r3
 801c0d6:	460c      	mov	r4, r1
 801c0d8:	2001      	movs	r0, #1
 801c0da:	e7a6      	b.n	801c02a <_vfiprintf_r+0xfe>
 801c0dc:	2300      	movs	r3, #0
 801c0de:	3401      	adds	r4, #1
 801c0e0:	9305      	str	r3, [sp, #20]
 801c0e2:	4619      	mov	r1, r3
 801c0e4:	f04f 0c0a 	mov.w	ip, #10
 801c0e8:	4620      	mov	r0, r4
 801c0ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c0ee:	3a30      	subs	r2, #48	; 0x30
 801c0f0:	2a09      	cmp	r2, #9
 801c0f2:	d903      	bls.n	801c0fc <_vfiprintf_r+0x1d0>
 801c0f4:	2b00      	cmp	r3, #0
 801c0f6:	d0c6      	beq.n	801c086 <_vfiprintf_r+0x15a>
 801c0f8:	9105      	str	r1, [sp, #20]
 801c0fa:	e7c4      	b.n	801c086 <_vfiprintf_r+0x15a>
 801c0fc:	fb0c 2101 	mla	r1, ip, r1, r2
 801c100:	4604      	mov	r4, r0
 801c102:	2301      	movs	r3, #1
 801c104:	e7f0      	b.n	801c0e8 <_vfiprintf_r+0x1bc>
 801c106:	ab03      	add	r3, sp, #12
 801c108:	9300      	str	r3, [sp, #0]
 801c10a:	462a      	mov	r2, r5
 801c10c:	4b12      	ldr	r3, [pc, #72]	; (801c158 <_vfiprintf_r+0x22c>)
 801c10e:	a904      	add	r1, sp, #16
 801c110:	4630      	mov	r0, r6
 801c112:	f3af 8000 	nop.w
 801c116:	4607      	mov	r7, r0
 801c118:	1c78      	adds	r0, r7, #1
 801c11a:	d1d6      	bne.n	801c0ca <_vfiprintf_r+0x19e>
 801c11c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c11e:	07d9      	lsls	r1, r3, #31
 801c120:	d405      	bmi.n	801c12e <_vfiprintf_r+0x202>
 801c122:	89ab      	ldrh	r3, [r5, #12]
 801c124:	059a      	lsls	r2, r3, #22
 801c126:	d402      	bmi.n	801c12e <_vfiprintf_r+0x202>
 801c128:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c12a:	f7ff fa97 	bl	801b65c <__retarget_lock_release_recursive>
 801c12e:	89ab      	ldrh	r3, [r5, #12]
 801c130:	065b      	lsls	r3, r3, #25
 801c132:	f53f af1d 	bmi.w	801bf70 <_vfiprintf_r+0x44>
 801c136:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c138:	e71c      	b.n	801bf74 <_vfiprintf_r+0x48>
 801c13a:	ab03      	add	r3, sp, #12
 801c13c:	9300      	str	r3, [sp, #0]
 801c13e:	462a      	mov	r2, r5
 801c140:	4b05      	ldr	r3, [pc, #20]	; (801c158 <_vfiprintf_r+0x22c>)
 801c142:	a904      	add	r1, sp, #16
 801c144:	4630      	mov	r0, r6
 801c146:	f7ff fce5 	bl	801bb14 <_printf_i>
 801c14a:	e7e4      	b.n	801c116 <_vfiprintf_r+0x1ea>
 801c14c:	0801df6c 	.word	0x0801df6c
 801c150:	0801df76 	.word	0x0801df76
 801c154:	00000000 	.word	0x00000000
 801c158:	0801bf07 	.word	0x0801bf07
 801c15c:	0801df72 	.word	0x0801df72

0801c160 <__swbuf_r>:
 801c160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c162:	460e      	mov	r6, r1
 801c164:	4614      	mov	r4, r2
 801c166:	4605      	mov	r5, r0
 801c168:	b118      	cbz	r0, 801c172 <__swbuf_r+0x12>
 801c16a:	6a03      	ldr	r3, [r0, #32]
 801c16c:	b90b      	cbnz	r3, 801c172 <__swbuf_r+0x12>
 801c16e:	f7fe fff9 	bl	801b164 <__sinit>
 801c172:	69a3      	ldr	r3, [r4, #24]
 801c174:	60a3      	str	r3, [r4, #8]
 801c176:	89a3      	ldrh	r3, [r4, #12]
 801c178:	071a      	lsls	r2, r3, #28
 801c17a:	d525      	bpl.n	801c1c8 <__swbuf_r+0x68>
 801c17c:	6923      	ldr	r3, [r4, #16]
 801c17e:	b31b      	cbz	r3, 801c1c8 <__swbuf_r+0x68>
 801c180:	6823      	ldr	r3, [r4, #0]
 801c182:	6922      	ldr	r2, [r4, #16]
 801c184:	1a98      	subs	r0, r3, r2
 801c186:	6963      	ldr	r3, [r4, #20]
 801c188:	b2f6      	uxtb	r6, r6
 801c18a:	4283      	cmp	r3, r0
 801c18c:	4637      	mov	r7, r6
 801c18e:	dc04      	bgt.n	801c19a <__swbuf_r+0x3a>
 801c190:	4621      	mov	r1, r4
 801c192:	4628      	mov	r0, r5
 801c194:	f7ff fe66 	bl	801be64 <_fflush_r>
 801c198:	b9e0      	cbnz	r0, 801c1d4 <__swbuf_r+0x74>
 801c19a:	68a3      	ldr	r3, [r4, #8]
 801c19c:	3b01      	subs	r3, #1
 801c19e:	60a3      	str	r3, [r4, #8]
 801c1a0:	6823      	ldr	r3, [r4, #0]
 801c1a2:	1c5a      	adds	r2, r3, #1
 801c1a4:	6022      	str	r2, [r4, #0]
 801c1a6:	701e      	strb	r6, [r3, #0]
 801c1a8:	6962      	ldr	r2, [r4, #20]
 801c1aa:	1c43      	adds	r3, r0, #1
 801c1ac:	429a      	cmp	r2, r3
 801c1ae:	d004      	beq.n	801c1ba <__swbuf_r+0x5a>
 801c1b0:	89a3      	ldrh	r3, [r4, #12]
 801c1b2:	07db      	lsls	r3, r3, #31
 801c1b4:	d506      	bpl.n	801c1c4 <__swbuf_r+0x64>
 801c1b6:	2e0a      	cmp	r6, #10
 801c1b8:	d104      	bne.n	801c1c4 <__swbuf_r+0x64>
 801c1ba:	4621      	mov	r1, r4
 801c1bc:	4628      	mov	r0, r5
 801c1be:	f7ff fe51 	bl	801be64 <_fflush_r>
 801c1c2:	b938      	cbnz	r0, 801c1d4 <__swbuf_r+0x74>
 801c1c4:	4638      	mov	r0, r7
 801c1c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c1c8:	4621      	mov	r1, r4
 801c1ca:	4628      	mov	r0, r5
 801c1cc:	f000 f806 	bl	801c1dc <__swsetup_r>
 801c1d0:	2800      	cmp	r0, #0
 801c1d2:	d0d5      	beq.n	801c180 <__swbuf_r+0x20>
 801c1d4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801c1d8:	e7f4      	b.n	801c1c4 <__swbuf_r+0x64>
	...

0801c1dc <__swsetup_r>:
 801c1dc:	b538      	push	{r3, r4, r5, lr}
 801c1de:	4b2a      	ldr	r3, [pc, #168]	; (801c288 <__swsetup_r+0xac>)
 801c1e0:	4605      	mov	r5, r0
 801c1e2:	6818      	ldr	r0, [r3, #0]
 801c1e4:	460c      	mov	r4, r1
 801c1e6:	b118      	cbz	r0, 801c1f0 <__swsetup_r+0x14>
 801c1e8:	6a03      	ldr	r3, [r0, #32]
 801c1ea:	b90b      	cbnz	r3, 801c1f0 <__swsetup_r+0x14>
 801c1ec:	f7fe ffba 	bl	801b164 <__sinit>
 801c1f0:	89a3      	ldrh	r3, [r4, #12]
 801c1f2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c1f6:	0718      	lsls	r0, r3, #28
 801c1f8:	d422      	bmi.n	801c240 <__swsetup_r+0x64>
 801c1fa:	06d9      	lsls	r1, r3, #27
 801c1fc:	d407      	bmi.n	801c20e <__swsetup_r+0x32>
 801c1fe:	2309      	movs	r3, #9
 801c200:	602b      	str	r3, [r5, #0]
 801c202:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801c206:	81a3      	strh	r3, [r4, #12]
 801c208:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c20c:	e034      	b.n	801c278 <__swsetup_r+0x9c>
 801c20e:	0758      	lsls	r0, r3, #29
 801c210:	d512      	bpl.n	801c238 <__swsetup_r+0x5c>
 801c212:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c214:	b141      	cbz	r1, 801c228 <__swsetup_r+0x4c>
 801c216:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c21a:	4299      	cmp	r1, r3
 801c21c:	d002      	beq.n	801c224 <__swsetup_r+0x48>
 801c21e:	4628      	mov	r0, r5
 801c220:	f7ff fa5e 	bl	801b6e0 <_free_r>
 801c224:	2300      	movs	r3, #0
 801c226:	6363      	str	r3, [r4, #52]	; 0x34
 801c228:	89a3      	ldrh	r3, [r4, #12]
 801c22a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801c22e:	81a3      	strh	r3, [r4, #12]
 801c230:	2300      	movs	r3, #0
 801c232:	6063      	str	r3, [r4, #4]
 801c234:	6923      	ldr	r3, [r4, #16]
 801c236:	6023      	str	r3, [r4, #0]
 801c238:	89a3      	ldrh	r3, [r4, #12]
 801c23a:	f043 0308 	orr.w	r3, r3, #8
 801c23e:	81a3      	strh	r3, [r4, #12]
 801c240:	6923      	ldr	r3, [r4, #16]
 801c242:	b94b      	cbnz	r3, 801c258 <__swsetup_r+0x7c>
 801c244:	89a3      	ldrh	r3, [r4, #12]
 801c246:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801c24a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801c24e:	d003      	beq.n	801c258 <__swsetup_r+0x7c>
 801c250:	4621      	mov	r1, r4
 801c252:	4628      	mov	r0, r5
 801c254:	f000 f840 	bl	801c2d8 <__smakebuf_r>
 801c258:	89a0      	ldrh	r0, [r4, #12]
 801c25a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c25e:	f010 0301 	ands.w	r3, r0, #1
 801c262:	d00a      	beq.n	801c27a <__swsetup_r+0x9e>
 801c264:	2300      	movs	r3, #0
 801c266:	60a3      	str	r3, [r4, #8]
 801c268:	6963      	ldr	r3, [r4, #20]
 801c26a:	425b      	negs	r3, r3
 801c26c:	61a3      	str	r3, [r4, #24]
 801c26e:	6923      	ldr	r3, [r4, #16]
 801c270:	b943      	cbnz	r3, 801c284 <__swsetup_r+0xa8>
 801c272:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801c276:	d1c4      	bne.n	801c202 <__swsetup_r+0x26>
 801c278:	bd38      	pop	{r3, r4, r5, pc}
 801c27a:	0781      	lsls	r1, r0, #30
 801c27c:	bf58      	it	pl
 801c27e:	6963      	ldrpl	r3, [r4, #20]
 801c280:	60a3      	str	r3, [r4, #8]
 801c282:	e7f4      	b.n	801c26e <__swsetup_r+0x92>
 801c284:	2000      	movs	r0, #0
 801c286:	e7f7      	b.n	801c278 <__swsetup_r+0x9c>
 801c288:	20002138 	.word	0x20002138

0801c28c <__swhatbuf_r>:
 801c28c:	b570      	push	{r4, r5, r6, lr}
 801c28e:	460c      	mov	r4, r1
 801c290:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c294:	2900      	cmp	r1, #0
 801c296:	b096      	sub	sp, #88	; 0x58
 801c298:	4615      	mov	r5, r2
 801c29a:	461e      	mov	r6, r3
 801c29c:	da0d      	bge.n	801c2ba <__swhatbuf_r+0x2e>
 801c29e:	89a3      	ldrh	r3, [r4, #12]
 801c2a0:	f013 0f80 	tst.w	r3, #128	; 0x80
 801c2a4:	f04f 0100 	mov.w	r1, #0
 801c2a8:	bf0c      	ite	eq
 801c2aa:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801c2ae:	2340      	movne	r3, #64	; 0x40
 801c2b0:	2000      	movs	r0, #0
 801c2b2:	6031      	str	r1, [r6, #0]
 801c2b4:	602b      	str	r3, [r5, #0]
 801c2b6:	b016      	add	sp, #88	; 0x58
 801c2b8:	bd70      	pop	{r4, r5, r6, pc}
 801c2ba:	466a      	mov	r2, sp
 801c2bc:	f000 f848 	bl	801c350 <_fstat_r>
 801c2c0:	2800      	cmp	r0, #0
 801c2c2:	dbec      	blt.n	801c29e <__swhatbuf_r+0x12>
 801c2c4:	9901      	ldr	r1, [sp, #4]
 801c2c6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801c2ca:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801c2ce:	4259      	negs	r1, r3
 801c2d0:	4159      	adcs	r1, r3
 801c2d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c2d6:	e7eb      	b.n	801c2b0 <__swhatbuf_r+0x24>

0801c2d8 <__smakebuf_r>:
 801c2d8:	898b      	ldrh	r3, [r1, #12]
 801c2da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801c2dc:	079d      	lsls	r5, r3, #30
 801c2de:	4606      	mov	r6, r0
 801c2e0:	460c      	mov	r4, r1
 801c2e2:	d507      	bpl.n	801c2f4 <__smakebuf_r+0x1c>
 801c2e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801c2e8:	6023      	str	r3, [r4, #0]
 801c2ea:	6123      	str	r3, [r4, #16]
 801c2ec:	2301      	movs	r3, #1
 801c2ee:	6163      	str	r3, [r4, #20]
 801c2f0:	b002      	add	sp, #8
 801c2f2:	bd70      	pop	{r4, r5, r6, pc}
 801c2f4:	ab01      	add	r3, sp, #4
 801c2f6:	466a      	mov	r2, sp
 801c2f8:	f7ff ffc8 	bl	801c28c <__swhatbuf_r>
 801c2fc:	9900      	ldr	r1, [sp, #0]
 801c2fe:	4605      	mov	r5, r0
 801c300:	4630      	mov	r0, r6
 801c302:	f7fe fcf7 	bl	801acf4 <_malloc_r>
 801c306:	b948      	cbnz	r0, 801c31c <__smakebuf_r+0x44>
 801c308:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c30c:	059a      	lsls	r2, r3, #22
 801c30e:	d4ef      	bmi.n	801c2f0 <__smakebuf_r+0x18>
 801c310:	f023 0303 	bic.w	r3, r3, #3
 801c314:	f043 0302 	orr.w	r3, r3, #2
 801c318:	81a3      	strh	r3, [r4, #12]
 801c31a:	e7e3      	b.n	801c2e4 <__smakebuf_r+0xc>
 801c31c:	89a3      	ldrh	r3, [r4, #12]
 801c31e:	6020      	str	r0, [r4, #0]
 801c320:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c324:	81a3      	strh	r3, [r4, #12]
 801c326:	9b00      	ldr	r3, [sp, #0]
 801c328:	6163      	str	r3, [r4, #20]
 801c32a:	9b01      	ldr	r3, [sp, #4]
 801c32c:	6120      	str	r0, [r4, #16]
 801c32e:	b15b      	cbz	r3, 801c348 <__smakebuf_r+0x70>
 801c330:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c334:	4630      	mov	r0, r6
 801c336:	f000 f81d 	bl	801c374 <_isatty_r>
 801c33a:	b128      	cbz	r0, 801c348 <__smakebuf_r+0x70>
 801c33c:	89a3      	ldrh	r3, [r4, #12]
 801c33e:	f023 0303 	bic.w	r3, r3, #3
 801c342:	f043 0301 	orr.w	r3, r3, #1
 801c346:	81a3      	strh	r3, [r4, #12]
 801c348:	89a3      	ldrh	r3, [r4, #12]
 801c34a:	431d      	orrs	r5, r3
 801c34c:	81a5      	strh	r5, [r4, #12]
 801c34e:	e7cf      	b.n	801c2f0 <__smakebuf_r+0x18>

0801c350 <_fstat_r>:
 801c350:	b538      	push	{r3, r4, r5, lr}
 801c352:	4d07      	ldr	r5, [pc, #28]	; (801c370 <_fstat_r+0x20>)
 801c354:	2300      	movs	r3, #0
 801c356:	4604      	mov	r4, r0
 801c358:	4608      	mov	r0, r1
 801c35a:	4611      	mov	r1, r2
 801c35c:	602b      	str	r3, [r5, #0]
 801c35e:	f7e7 f898 	bl	8003492 <_fstat>
 801c362:	1c43      	adds	r3, r0, #1
 801c364:	d102      	bne.n	801c36c <_fstat_r+0x1c>
 801c366:	682b      	ldr	r3, [r5, #0]
 801c368:	b103      	cbz	r3, 801c36c <_fstat_r+0x1c>
 801c36a:	6023      	str	r3, [r4, #0]
 801c36c:	bd38      	pop	{r3, r4, r5, pc}
 801c36e:	bf00      	nop
 801c370:	20010b74 	.word	0x20010b74

0801c374 <_isatty_r>:
 801c374:	b538      	push	{r3, r4, r5, lr}
 801c376:	4d06      	ldr	r5, [pc, #24]	; (801c390 <_isatty_r+0x1c>)
 801c378:	2300      	movs	r3, #0
 801c37a:	4604      	mov	r4, r0
 801c37c:	4608      	mov	r0, r1
 801c37e:	602b      	str	r3, [r5, #0]
 801c380:	f7e7 f897 	bl	80034b2 <_isatty>
 801c384:	1c43      	adds	r3, r0, #1
 801c386:	d102      	bne.n	801c38e <_isatty_r+0x1a>
 801c388:	682b      	ldr	r3, [r5, #0]
 801c38a:	b103      	cbz	r3, 801c38e <_isatty_r+0x1a>
 801c38c:	6023      	str	r3, [r4, #0]
 801c38e:	bd38      	pop	{r3, r4, r5, pc}
 801c390:	20010b74 	.word	0x20010b74

0801c394 <_init>:
 801c394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c396:	bf00      	nop
 801c398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c39a:	bc08      	pop	{r3}
 801c39c:	469e      	mov	lr, r3
 801c39e:	4770      	bx	lr

0801c3a0 <_fini>:
 801c3a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c3a2:	bf00      	nop
 801c3a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c3a6:	bc08      	pop	{r3}
 801c3a8:	469e      	mov	lr, r3
 801c3aa:	4770      	bx	lr
